// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 42
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 43
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 41
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 40
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 22
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 23
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 24
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 26
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 27
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 28
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 29
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 30
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 31
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 32
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 33
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 34
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 35
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 39
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 36
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 37
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 38
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4140 0 0
// PrepareRussianBase ;
 241: CALL 2461 0 0
// PrepareRussianCommander ;
 245: CALL 2412 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 41
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
// uc_side = 1 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 1
 401: ST_TO_ADDR
// uc_nation = 1 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 1
 409: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 410: LD_ADDR_EXP 1
 414: PUSH
 415: LD_STRING JMM
 417: PPUSH
 418: LD_INT 1
 420: PPUSH
 421: CALL 3675 0 2
 425: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 426: LD_ADDR_EXP 4
 430: PUSH
 431: LD_STRING Lisa
 433: PPUSH
 434: LD_INT 1
 436: PPUSH
 437: CALL 3675 0 2
 441: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 442: LD_ADDR_EXP 7
 446: PUSH
 447: LD_STRING Brown
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL 3675 0 2
 457: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 458: LD_ADDR_EXP 8
 462: PUSH
 463: LD_STRING Dickens
 465: PPUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL 3675 0 2
 473: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 474: LD_ADDR_EXP 9
 478: PUSH
 479: LD_STRING Woodruff
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 3675 0 2
 489: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 490: LD_ADDR_EXP 12
 494: PUSH
 495: LD_STRING Campell
 497: PPUSH
 498: LD_INT 0
 500: PPUSH
 501: CALL 3675 0 2
 505: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 506: LD_ADDR_EXP 10
 510: PUSH
 511: LD_STRING Knight
 513: PPUSH
 514: LD_INT 0
 516: PPUSH
 517: CALL 3675 0 2
 521: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 522: LD_ADDR_EXP 11
 526: PUSH
 527: LD_STRING Claptopn
 529: PPUSH
 530: LD_INT 0
 532: PPUSH
 533: CALL 3675 0 2
 537: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 538: LD_ADDR_EXP 14
 542: PUSH
 543: LD_STRING Harisson
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: CALL 3675 0 2
 553: ST_TO_ADDR
// if Lisa = false then
 554: LD_EXP 4
 558: PUSH
 559: LD_INT 0
 561: EQUAL
 562: IFFALSE 580
// Bobby = PrepareUnit ( Bobby , true ) ;
 564: LD_ADDR_EXP 2
 568: PUSH
 569: LD_STRING Bobby
 571: PPUSH
 572: LD_INT 1
 574: PPUSH
 575: CALL 3675 0 2
 579: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 580: LD_EXP 4
 584: PUSH
 585: LD_INT 0
 587: EQUAL
 588: PUSH
 589: LD_EXP 2
 593: PUSH
 594: LD_INT 0
 596: EQUAL
 597: AND
 598: IFFALSE 616
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 600: LD_ADDR_EXP 3
 604: PUSH
 605: LD_STRING Cyrus
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 3675 0 2
 615: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 616: LD_EXP 4
 620: PUSH
 621: LD_INT 0
 623: EQUAL
 624: PUSH
 625: LD_EXP 2
 629: PUSH
 630: LD_INT 0
 632: EQUAL
 633: AND
 634: PUSH
 635: LD_EXP 3
 639: PUSH
 640: LD_INT 0
 642: EQUAL
 643: AND
 644: IFFALSE 662
// RandomBeforeMission = PrepareUnit ( 03_others , true ) ;
 646: LD_ADDR_EXP 6
 650: PUSH
 651: LD_STRING 03_others
 653: PPUSH
 654: LD_INT 1
 656: PPUSH
 657: CALL 3675 0 2
 661: ST_TO_ADDR
// uc_side = 4 ;
 662: LD_ADDR_OWVAR 20
 666: PUSH
 667: LD_INT 4
 669: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 670: LD_ADDR_EXP 13
 674: PUSH
 675: LD_STRING Donaldson
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL 3675 0 2
 685: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 686: LD_ADDR_EXP 5
 690: PUSH
 691: LD_STRING Frank
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: CALL 3675 0 2
 701: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 702: LD_EXP 1
 706: PPUSH
 707: LD_INT 32
 709: PPUSH
 710: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 714: LD_EXP 7
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 729: LD_EXP 7
 733: PPUSH
 734: LD_INT 32
 736: PPUSH
 737: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 741: LD_EXP 8
 745: PPUSH
 746: LD_INT 2
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 756: LD_EXP 9
 760: PPUSH
 761: LD_INT 2
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 771: LD_EXP 12
 775: PPUSH
 776: LD_INT 2
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 786: LD_EXP 10
 790: PPUSH
 791: LD_INT 2
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 801: LD_EXP 11
 805: PPUSH
 806: LD_INT 2
 808: PPUSH
 809: LD_INT 0
 811: PPUSH
 812: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 816: LD_EXP 4
 820: PPUSH
 821: LD_INT 2
 823: PPUSH
 824: LD_INT 0
 826: PPUSH
 827: CALL_OW 49
// if Lisa = false then
 831: LD_EXP 4
 835: PUSH
 836: LD_INT 0
 838: EQUAL
 839: IFFALSE 856
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 841: LD_EXP 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL_OW 49
// if Lisa = false and Bobby = false then
 856: LD_EXP 4
 860: PUSH
 861: LD_INT 0
 863: EQUAL
 864: PUSH
 865: LD_EXP 2
 869: PUSH
 870: LD_INT 0
 872: EQUAL
 873: AND
 874: IFFALSE 891
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 2
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 891: LD_EXP 4
 895: PUSH
 896: LD_INT 0
 898: EQUAL
 899: PUSH
 900: LD_EXP 2
 904: PUSH
 905: LD_INT 0
 907: EQUAL
 908: AND
 909: PUSH
 910: LD_EXP 3
 914: PUSH
 915: LD_INT 0
 917: EQUAL
 918: AND
 919: IFFALSE 936
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_INT 2
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end ;
 936: LD_VAR 0 1
 940: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 946: LD_EXP 13
 950: PPUSH
 951: LD_INT 10
 953: PPUSH
 954: LD_INT 0
 956: PPUSH
 957: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 961: LD_EXP 5
 965: PPUSH
 966: LD_INT 10
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: CALL_OW 49
// uc_nation = 1 ;
 976: LD_ADDR_OWVAR 21
 980: PUSH
 981: LD_INT 1
 983: ST_TO_ADDR
// uc_side = 4 ;
 984: LD_ADDR_OWVAR 20
 988: PUSH
 989: LD_INT 4
 991: ST_TO_ADDR
// hc_class := 3 ;
 992: LD_ADDR_OWVAR 28
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// hc_sex := sex_male ;
1000: LD_ADDR_OWVAR 27
1004: PUSH
1005: LD_INT 1
1007: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1008: LD_ADDR_OWVAR 33
1012: PUSH
1013: LD_STRING SecondCharsGal
1015: ST_TO_ADDR
// hc_face_number := 53 ;
1016: LD_ADDR_OWVAR 34
1020: PUSH
1021: LD_INT 53
1023: ST_TO_ADDR
// hc_name := Freddie Warner ;
1024: LD_ADDR_OWVAR 26
1028: PUSH
1029: LD_STRING Freddie Warner
1031: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1032: LD_ADDR_OWVAR 29
1036: PUSH
1037: LD_INT 8
1039: PUSH
1040: LD_INT 11
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1047: LD_ADDR_OWVAR 30
1051: PUSH
1052: LD_INT 0
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 1
1060: PUSH
1061: LD_INT 0
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1070: LD_ADDR_OWVAR 31
1074: PUSH
1075: LD_INT 1
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 0
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: ST_TO_ADDR
// un = CreateHuman ;
1093: LD_ADDR_VAR 0 3
1097: PUSH
1098: CALL_OW 44
1102: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1103: LD_VAR 0 3
1107: PPUSH
1108: LD_INT 10
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// hc_class := 1 ;
1118: LD_ADDR_OWVAR 28
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// hc_sex := sex_male ;
1126: LD_ADDR_OWVAR 27
1130: PUSH
1131: LD_INT 1
1133: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1134: LD_ADDR_OWVAR 33
1138: PUSH
1139: LD_STRING SecondCharsGal
1141: ST_TO_ADDR
// hc_face_number := 56 ;
1142: LD_ADDR_OWVAR 34
1146: PUSH
1147: LD_INT 56
1149: ST_TO_ADDR
// hc_name := Mel Brennan ;
1150: LD_ADDR_OWVAR 26
1154: PUSH
1155: LD_STRING Mel Brennan
1157: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1158: LD_ADDR_OWVAR 29
1162: PUSH
1163: LD_INT 12
1165: PUSH
1166: LD_INT 11
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1173: LD_ADDR_OWVAR 30
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1196: LD_ADDR_OWVAR 31
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 0
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: LIST
1218: ST_TO_ADDR
// un = CreateHuman ;
1219: LD_ADDR_VAR 0 3
1223: PUSH
1224: CALL_OW 44
1228: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1229: LD_VAR 0 3
1233: PPUSH
1234: LD_INT 10
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 49
// hc_class := 1 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING AmGalRemake
1267: ST_TO_ADDR
// hc_face_number := 5 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 5
1275: ST_TO_ADDR
// hc_name := Bob Joplin ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Bob Joplin
1283: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 10
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 1
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 3 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// hc_sex := sex_female ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 2
1385: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING AmGalRemake
1393: ST_TO_ADDR
// hc_face_number := 4 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 4
1401: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Elizabeth Whitney
1409: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 9
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 0
1432: PUSH
1433: LD_INT 0
1435: PUSH
1436: LD_INT 2
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 2
1455: PUSH
1456: LD_INT 2
1458: PUSH
1459: LD_INT 4
1461: PUSH
1462: LD_INT 2
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// InitHc ;
1496: CALL_OW 19
// end ;
1500: LD_VAR 0 1
1504: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
// uc_nation = 1 ;
1510: LD_ADDR_OWVAR 21
1514: PUSH
1515: LD_INT 1
1517: ST_TO_ADDR
// uc_side = 1 ;
1518: LD_ADDR_OWVAR 20
1522: PUSH
1523: LD_INT 1
1525: ST_TO_ADDR
// hc_class := 1 ;
1526: LD_ADDR_OWVAR 28
1530: PUSH
1531: LD_INT 1
1533: ST_TO_ADDR
// hc_sex := sex_male ;
1534: LD_ADDR_OWVAR 27
1538: PUSH
1539: LD_INT 1
1541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1542: LD_ADDR_OWVAR 33
1546: PUSH
1547: LD_STRING SecondCharsGal
1549: ST_TO_ADDR
// hc_face_number := 59 ;
1550: LD_ADDR_OWVAR 34
1554: PUSH
1555: LD_INT 59
1557: ST_TO_ADDR
// hc_name := Max Gray ;
1558: LD_ADDR_OWVAR 26
1562: PUSH
1563: LD_STRING Max Gray
1565: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1566: LD_ADDR_OWVAR 29
1570: PUSH
1571: LD_INT 9
1573: PUSH
1574: LD_INT 11
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1581: LD_ADDR_OWVAR 30
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 0
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1604: LD_ADDR_OWVAR 31
1608: PUSH
1609: LD_INT 2
1611: PUSH
1612: LD_INT 1
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: ST_TO_ADDR
// un = CreateHuman ;
1627: LD_ADDR_VAR 0 4
1631: PUSH
1632: CALL_OW 44
1636: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1637: LD_VAR 0 4
1641: PPUSH
1642: LD_INT 11
1644: PPUSH
1645: LD_INT 0
1647: PPUSH
1648: CALL_OW 49
// hc_class := 1 ;
1652: LD_ADDR_OWVAR 28
1656: PUSH
1657: LD_INT 1
1659: ST_TO_ADDR
// hc_sex := sex_male ;
1660: LD_ADDR_OWVAR 27
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1668: LD_ADDR_OWVAR 33
1672: PUSH
1673: LD_STRING SecondCharsGal
1675: ST_TO_ADDR
// hc_face_number := 54 ;
1676: LD_ADDR_OWVAR 34
1680: PUSH
1681: LD_INT 54
1683: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1684: LD_ADDR_OWVAR 26
1688: PUSH
1689: LD_STRING Luigi Ghbellin
1691: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1692: LD_ADDR_OWVAR 29
1696: PUSH
1697: LD_INT 11
1699: PUSH
1700: LD_INT 11
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1707: LD_ADDR_OWVAR 30
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 0
1720: PUSH
1721: LD_INT 0
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1730: LD_ADDR_OWVAR 31
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: LD_INT 0
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: LD_INT 1
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: ST_TO_ADDR
// un = CreateHuman ;
1753: LD_ADDR_VAR 0 4
1757: PUSH
1758: CALL_OW 44
1762: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1763: LD_VAR 0 4
1767: PPUSH
1768: LD_INT 11
1770: PPUSH
1771: LD_INT 0
1773: PPUSH
1774: CALL_OW 49
// hc_class := 3 ;
1778: LD_ADDR_OWVAR 28
1782: PUSH
1783: LD_INT 3
1785: ST_TO_ADDR
// hc_sex := sex_male ;
1786: LD_ADDR_OWVAR 27
1790: PUSH
1791: LD_INT 1
1793: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1794: LD_ADDR_OWVAR 33
1798: PUSH
1799: LD_STRING AmGalRemake
1801: ST_TO_ADDR
// hc_face_number := 6 ;
1802: LD_ADDR_OWVAR 34
1806: PUSH
1807: LD_INT 6
1809: ST_TO_ADDR
// hc_name := Leon Carter ;
1810: LD_ADDR_OWVAR 26
1814: PUSH
1815: LD_STRING Leon Carter
1817: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1818: LD_ADDR_OWVAR 29
1822: PUSH
1823: LD_INT 10
1825: PUSH
1826: LD_INT 9
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1833: LD_ADDR_OWVAR 30
1837: PUSH
1838: LD_INT 0
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 0
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1856: LD_ADDR_OWVAR 31
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: LD_INT 3
1869: PUSH
1870: LD_INT 0
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: ST_TO_ADDR
// un = CreateHuman ;
1879: LD_ADDR_VAR 0 4
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1889: LD_VAR 0 4
1893: PPUSH
1894: LD_INT 11
1896: PPUSH
1897: LD_INT 0
1899: PPUSH
1900: CALL_OW 49
// if count = 4 then
1904: LD_VAR 0 1
1908: PUSH
1909: LD_INT 4
1911: EQUAL
1912: IFFALSE 2040
// begin hc_class := 1 ;
1914: LD_ADDR_OWVAR 28
1918: PUSH
1919: LD_INT 1
1921: ST_TO_ADDR
// hc_sex := sex_male ;
1922: LD_ADDR_OWVAR 27
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1930: LD_ADDR_OWVAR 33
1934: PUSH
1935: LD_STRING SecondCharsGal
1937: ST_TO_ADDR
// hc_face_number := 34 ;
1938: LD_ADDR_OWVAR 34
1942: PUSH
1943: LD_INT 34
1945: ST_TO_ADDR
// hc_name := Ian Hill ;
1946: LD_ADDR_OWVAR 26
1950: PUSH
1951: LD_STRING Ian Hill
1953: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
1954: LD_ADDR_OWVAR 29
1958: PUSH
1959: LD_INT 10
1961: PUSH
1962: LD_INT 12
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1969: LD_ADDR_OWVAR 30
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: LD_INT 0
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1992: LD_ADDR_OWVAR 31
1996: PUSH
1997: LD_INT 2
1999: PUSH
2000: LD_INT 0
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: LD_INT 0
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: ST_TO_ADDR
// un = CreateHuman ;
2015: LD_ADDR_VAR 0 4
2019: PUSH
2020: CALL_OW 44
2024: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2025: LD_VAR 0 4
2029: PPUSH
2030: LD_INT 11
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// end ; if count = 5 then
2040: LD_VAR 0 1
2044: PUSH
2045: LD_INT 5
2047: EQUAL
2048: IFFALSE 2302
// begin hc_class := 1 ;
2050: LD_ADDR_OWVAR 28
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_sex := sex_male ;
2058: LD_ADDR_OWVAR 27
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2066: LD_ADDR_OWVAR 33
2070: PUSH
2071: LD_STRING SecondCharsGal
2073: ST_TO_ADDR
// hc_face_number := 34 ;
2074: LD_ADDR_OWVAR 34
2078: PUSH
2079: LD_INT 34
2081: ST_TO_ADDR
// hc_name := Ian Hill ;
2082: LD_ADDR_OWVAR 26
2086: PUSH
2087: LD_STRING Ian Hill
2089: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2090: LD_ADDR_OWVAR 29
2094: PUSH
2095: LD_INT 10
2097: PUSH
2098: LD_INT 12
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2105: LD_ADDR_OWVAR 30
2109: PUSH
2110: LD_INT 0
2112: PUSH
2113: LD_INT 0
2115: PUSH
2116: LD_INT 1
2118: PUSH
2119: LD_INT 0
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2128: LD_ADDR_OWVAR 31
2132: PUSH
2133: LD_INT 2
2135: PUSH
2136: LD_INT 0
2138: PUSH
2139: LD_INT 1
2141: PUSH
2142: LD_INT 0
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: ST_TO_ADDR
// un = CreateHuman ;
2151: LD_ADDR_VAR 0 4
2155: PUSH
2156: CALL_OW 44
2160: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2161: LD_VAR 0 4
2165: PPUSH
2166: LD_INT 11
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// hc_class := 1 ;
2176: LD_ADDR_OWVAR 28
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_sex := sex_female ;
2184: LD_ADDR_OWVAR 27
2188: PUSH
2189: LD_INT 2
2191: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2192: LD_ADDR_OWVAR 33
2196: PUSH
2197: LD_STRING SecondCharsGal
2199: ST_TO_ADDR
// hc_face_number := 41 ;
2200: LD_ADDR_OWVAR 34
2204: PUSH
2205: LD_INT 41
2207: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2208: LD_ADDR_OWVAR 26
2212: PUSH
2213: LD_STRING Kate Wadsworth
2215: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2216: LD_ADDR_OWVAR 29
2220: PUSH
2221: LD_INT 9
2223: PUSH
2224: LD_INT 9
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2231: LD_ADDR_OWVAR 30
2235: PUSH
2236: LD_INT 0
2238: PUSH
2239: LD_INT 2
2241: PUSH
2242: LD_INT 0
2244: PUSH
2245: LD_INT 0
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2254: LD_ADDR_OWVAR 31
2258: PUSH
2259: LD_INT 2
2261: PUSH
2262: LD_INT 3
2264: PUSH
2265: LD_INT 1
2267: PUSH
2268: LD_INT 0
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// un = CreateHuman ;
2277: LD_ADDR_VAR 0 4
2281: PUSH
2282: CALL_OW 44
2286: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2287: LD_VAR 0 4
2291: PPUSH
2292: LD_INT 11
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2302: LD_INT 11
2304: PPUSH
2305: LD_INT 22
2307: PUSH
2308: LD_INT 1
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: PUSH
2315: LD_INT 21
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 26
2327: PUSH
2328: LD_INT 1
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: PPUSH
2340: CALL_OW 70
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2353: LD_INT 11
2355: PPUSH
2356: LD_INT 22
2358: PUSH
2359: LD_INT 1
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 21
2368: PUSH
2369: LD_INT 1
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: LD_INT 26
2378: PUSH
2379: LD_INT 1
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: LIST
2390: PPUSH
2391: CALL_OW 70
2395: PUSH
2396: LD_INT 1
2398: ARRAY
2399: PPUSH
2400: LD_STRING D6-Sol3-1
2402: PPUSH
2403: CALL_OW 88
// end ; end_of_file
2407: LD_VAR 0 2
2411: RET
// export function PrepareRussianCommander ; begin
2412: LD_INT 0
2414: PPUSH
// uc_side = 3 ;
2415: LD_ADDR_OWVAR 20
2419: PUSH
2420: LD_INT 3
2422: ST_TO_ADDR
// uc_nation = 3 ;
2423: LD_ADDR_OWVAR 21
2427: PUSH
2428: LD_INT 3
2430: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2431: LD_ADDR_EXP 15
2435: PUSH
2436: LD_STRING Stolypin
2438: PPUSH
2439: CALL_OW 25
2443: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2444: LD_EXP 15
2448: PPUSH
2449: LD_INT 21
2451: PPUSH
2452: CALL_OW 52
// end ;
2456: LD_VAR 0 1
2460: RET
// export function PrepareRussianBase ; var i ; begin
2461: LD_INT 0
2463: PPUSH
2464: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2465: LD_INT 3
2467: PPUSH
2468: LD_INT 3
2470: PPUSH
2471: LD_INT 22
2473: PPUSH
2474: LD_EXP 16
2478: PPUSH
2479: LD_EXP 17
2483: PPUSH
2484: CALL_OW 12
2488: PPUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2499: LD_INT 3
2501: PPUSH
2502: LD_INT 3
2504: PPUSH
2505: LD_INT 21
2507: PPUSH
2508: LD_EXP 16
2512: PPUSH
2513: LD_EXP 17
2517: PPUSH
2518: CALL_OW 12
2522: PPUSH
2523: LD_INT 2
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2533: LD_INT 3
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: LD_INT 1
2541: PPUSH
2542: LD_EXP 16
2546: PPUSH
2547: LD_EXP 17
2551: PPUSH
2552: CALL_OW 12
2556: PPUSH
2557: LD_INT 4
2559: PPUSH
2560: LD_INT 2
2562: PPUSH
2563: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2567: LD_INT 3
2569: PPUSH
2570: LD_INT 3
2572: PPUSH
2573: LD_INT 24
2575: PPUSH
2576: LD_EXP 16
2580: PPUSH
2581: LD_EXP 17
2585: PPUSH
2586: CALL_OW 12
2590: PPUSH
2591: LD_INT 3
2593: PPUSH
2594: LD_INT 6
2596: PPUSH
2597: CALL 3738 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2601: LD_ADDR_VAR 0 2
2605: PUSH
2606: LD_INT 22
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 30
2618: PUSH
2619: LD_INT 32
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 69
2634: PUSH
2635: FOR_IN
2636: IFFALSE 2676
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2638: LD_INT 3
2640: PPUSH
2641: LD_INT 3
2643: PPUSH
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_EXP 16
2653: PPUSH
2654: LD_EXP 17
2658: PPUSH
2659: CALL_OW 12
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 1
2669: PPUSH
2670: CALL 3738 0 6
2674: GO 2635
2676: POP
2677: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 30
2695: PUSH
2696: LD_INT 31
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PPUSH
2707: CALL_OW 69
2711: PUSH
2712: FOR_IN
2713: IFFALSE 2741
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2715: LD_EXP 16
2719: PPUSH
2720: LD_EXP 17
2724: PPUSH
2725: CALL_OW 12
2729: PPUSH
2730: LD_VAR 0 2
2734: PPUSH
2735: CALL 3848 0 2
2739: GO 2712
2741: POP
2742: POP
// end ;
2743: LD_VAR 0 1
2747: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2748: LD_INT 0
2750: PPUSH
2751: PPUSH
2752: PPUSH
2753: PPUSH
// uc_side = 6 ;
2754: LD_ADDR_OWVAR 20
2758: PUSH
2759: LD_INT 6
2761: ST_TO_ADDR
// uc_nation = 3 ;
2762: LD_ADDR_OWVAR 21
2766: PUSH
2767: LD_INT 3
2769: ST_TO_ADDR
// for i := 1 to [ 2 , 1 , 1 ] [ Difficulty ] do
2770: LD_ADDR_VAR 0 2
2774: PUSH
2775: DOUBLE
2776: LD_INT 1
2778: DEC
2779: ST_TO_ADDR
2780: LD_INT 2
2782: PUSH
2783: LD_INT 1
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PUSH
2794: LD_OWVAR 67
2798: ARRAY
2799: PUSH
2800: FOR_TO
2801: IFFALSE 2961
// begin vc_engine = 1 ;
2803: LD_ADDR_OWVAR 39
2807: PUSH
2808: LD_INT 1
2810: ST_TO_ADDR
// vc_control = 1 ;
2811: LD_ADDR_OWVAR 38
2815: PUSH
2816: LD_INT 1
2818: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2819: LD_ADDR_OWVAR 40
2823: PUSH
2824: LD_INT 42
2826: PUSH
2827: LD_INT 42
2829: PUSH
2830: LD_INT 43
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: LIST
2837: PUSH
2838: LD_OWVAR 67
2842: ARRAY
2843: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2844: LD_ADDR_OWVAR 37
2848: PUSH
2849: LD_INT 21
2851: PUSH
2852: LD_INT 22
2854: PUSH
2855: LD_INT 22
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: PUSH
2863: LD_OWVAR 67
2867: ARRAY
2868: ST_TO_ADDR
// veh = CreateVehicle ;
2869: LD_ADDR_VAR 0 3
2873: PUSH
2874: CALL_OW 45
2878: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2879: LD_VAR 0 3
2883: PPUSH
2884: LD_INT 3
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: CALL_OW 49
// hc_gallery =  ;
2894: LD_ADDR_OWVAR 33
2898: PUSH
2899: LD_STRING 
2901: ST_TO_ADDR
// hc_name =  ;
2902: LD_ADDR_OWVAR 26
2906: PUSH
2907: LD_STRING 
2909: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2910: LD_INT 0
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_EXP 16
2920: PPUSH
2921: LD_EXP 17
2925: PPUSH
2926: CALL_OW 12
2930: PPUSH
2931: CALL_OW 380
// un = CreateHuman ;
2935: LD_ADDR_VAR 0 4
2939: PUSH
2940: CALL_OW 44
2944: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2945: LD_VAR 0 4
2949: PPUSH
2950: LD_VAR 0 3
2954: PPUSH
2955: CALL_OW 52
// end ;
2959: GO 2800
2961: POP
2962: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2963: LD_INT 0
2965: PPUSH
2966: LD_INT 2
2968: PPUSH
2969: LD_EXP 16
2973: PPUSH
2974: LD_EXP 17
2978: PPUSH
2979: CALL_OW 12
2983: PUSH
2984: LD_INT 2
2986: PLUS
2987: PPUSH
2988: CALL_OW 380
// un = CreateHuman ;
2992: LD_ADDR_VAR 0 4
2996: PUSH
2997: CALL_OW 44
3001: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3002: LD_VAR 0 4
3006: PPUSH
3007: LD_INT 3
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3017: LD_INT 0
3019: PPUSH
3020: LD_INT 4
3022: PPUSH
3023: LD_EXP 16
3027: PPUSH
3028: LD_EXP 17
3032: PPUSH
3033: CALL_OW 12
3037: PUSH
3038: LD_INT 2
3040: PLUS
3041: PPUSH
3042: CALL_OW 380
// un = CreateHuman ;
3046: LD_ADDR_VAR 0 4
3050: PUSH
3051: CALL_OW 44
3055: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3056: LD_VAR 0 4
3060: PPUSH
3061: LD_INT 3
3063: PPUSH
3064: LD_INT 0
3066: PPUSH
3067: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3071: LD_ADDR_VAR 0 2
3075: PUSH
3076: DOUBLE
3077: LD_INT 1
3079: DEC
3080: ST_TO_ADDR
3081: LD_INT 2
3083: PUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 3
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: PUSH
3095: LD_OWVAR 67
3099: ARRAY
3100: PUSH
3101: LD_INT 1
3103: PPUSH
3104: LD_INT 3
3106: PPUSH
3107: CALL_OW 12
3111: PLUS
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3184
// begin hc_gallery =  ;
3116: LD_ADDR_OWVAR 33
3120: PUSH
3121: LD_STRING 
3123: ST_TO_ADDR
// hc_name =  ;
3124: LD_ADDR_OWVAR 26
3128: PUSH
3129: LD_STRING 
3131: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3132: LD_INT 0
3134: PPUSH
3135: LD_INT 1
3137: PPUSH
3138: LD_EXP 16
3142: PPUSH
3143: LD_EXP 17
3147: PPUSH
3148: CALL_OW 12
3152: PPUSH
3153: CALL_OW 380
// un = CreateHuman ;
3157: LD_ADDR_VAR 0 4
3161: PUSH
3162: CALL_OW 44
3166: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3167: LD_VAR 0 4
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: LD_INT 0
3177: PPUSH
3178: CALL_OW 49
// end ;
3182: GO 3113
3184: POP
3185: POP
// vc_engine = 1 ;
3186: LD_ADDR_OWVAR 39
3190: PUSH
3191: LD_INT 1
3193: ST_TO_ADDR
// vc_control = 1 ;
3194: LD_ADDR_OWVAR 38
3198: PUSH
3199: LD_INT 1
3201: ST_TO_ADDR
// vc_weapon = 51 ;
3202: LD_ADDR_OWVAR 40
3206: PUSH
3207: LD_INT 51
3209: ST_TO_ADDR
// vc_chassis = 22 ;
3210: LD_ADDR_OWVAR 37
3214: PUSH
3215: LD_INT 22
3217: ST_TO_ADDR
// veh = CreateVehicle ;
3218: LD_ADDR_VAR 0 3
3222: PUSH
3223: CALL_OW 45
3227: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3228: LD_VAR 0 3
3232: PPUSH
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 0
3238: PPUSH
3239: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3243: LD_VAR 0 3
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: LD_INT 100
3253: PPUSH
3254: CALL_OW 290
// hc_gallery =  ;
3258: LD_ADDR_OWVAR 33
3262: PUSH
3263: LD_STRING 
3265: ST_TO_ADDR
// hc_name =  ;
3266: LD_ADDR_OWVAR 26
3270: PUSH
3271: LD_STRING 
3273: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3274: LD_INT 0
3276: PPUSH
3277: LD_INT 3
3279: PPUSH
3280: LD_EXP 16
3284: PPUSH
3285: LD_EXP 17
3289: PPUSH
3290: CALL_OW 12
3294: PPUSH
3295: CALL_OW 380
// un = CreateHuman ;
3299: LD_ADDR_VAR 0 4
3303: PUSH
3304: CALL_OW 44
3308: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3309: LD_VAR 0 4
3313: PPUSH
3314: LD_VAR 0 3
3318: PPUSH
3319: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3323: LD_ADDR_VAR 0 2
3327: PUSH
3328: LD_INT 22
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PUSH
3338: LD_INT 1
3340: PUSH
3341: LD_INT 3
3343: PUSH
3344: LD_INT 25
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: LD_INT 25
3363: PUSH
3364: LD_INT 4
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: PUSH
3389: FOR_IN
3390: IFFALSE 3409
// ComAgressiveMove ( i , 45 , 46 ) ;
3392: LD_VAR 0 2
3396: PPUSH
3397: LD_INT 45
3399: PPUSH
3400: LD_INT 46
3402: PPUSH
3403: CALL_OW 114
3407: GO 3389
3409: POP
3410: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3411: LD_ADDR_VAR 0 2
3415: PUSH
3416: LD_INT 22
3418: PUSH
3419: LD_INT 6
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: LD_INT 25
3428: PUSH
3429: LD_INT 2
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PPUSH
3440: CALL_OW 69
3444: PUSH
3445: FOR_IN
3446: IFFALSE 3477
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3448: LD_ADDR_EXP 19
3452: PUSH
3453: LD_VAR 0 2
3457: PPUSH
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 48
3463: PPUSH
3464: LD_INT 55
3466: PPUSH
3467: LD_INT 5
3469: PPUSH
3470: CALL_OW 145
3474: ST_TO_ADDR
3475: GO 3445
3477: POP
3478: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3479: LD_ADDR_VAR 0 2
3483: PUSH
3484: LD_INT 22
3486: PUSH
3487: LD_INT 6
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 25
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: PPUSH
3508: CALL_OW 69
3512: PUSH
3513: FOR_IN
3514: IFFALSE 3533
// ComMoveXY ( i , 39 , 55 ) ;
3516: LD_VAR 0 2
3520: PPUSH
3521: LD_INT 39
3523: PPUSH
3524: LD_INT 55
3526: PPUSH
3527: CALL_OW 111
3531: GO 3513
3533: POP
3534: POP
// end ;
3535: LD_VAR 0 1
3539: RET
// export function PrepareFirstAttack ; var i , un ; begin
3540: LD_INT 0
3542: PPUSH
3543: PPUSH
3544: PPUSH
// uc_side = 5 ;
3545: LD_ADDR_OWVAR 20
3549: PUSH
3550: LD_INT 5
3552: ST_TO_ADDR
// uc_nation = 3 ;
3553: LD_ADDR_OWVAR 21
3557: PUSH
3558: LD_INT 3
3560: ST_TO_ADDR
// for i := 1 to 4 do
3561: LD_ADDR_VAR 0 2
3565: PUSH
3566: DOUBLE
3567: LD_INT 1
3569: DEC
3570: ST_TO_ADDR
3571: LD_INT 4
3573: PUSH
3574: FOR_TO
3575: IFFALSE 3660
// begin hc_gallery =  ;
3577: LD_ADDR_OWVAR 33
3581: PUSH
3582: LD_STRING 
3584: ST_TO_ADDR
// hc_name =  ;
3585: LD_ADDR_OWVAR 26
3589: PUSH
3590: LD_STRING 
3592: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3593: LD_INT 0
3595: PPUSH
3596: LD_INT 1
3598: PPUSH
3599: LD_EXP 16
3603: PPUSH
3604: LD_EXP 17
3608: PPUSH
3609: CALL_OW 12
3613: PPUSH
3614: CALL_OW 380
// un = CreateHuman ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: CALL_OW 44
3627: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_INT 4
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3643: LD_VAR 0 3
3647: PPUSH
3648: LD_INT 48
3650: PPUSH
3651: LD_INT 14
3653: PPUSH
3654: CALL_OW 114
// end ;
3658: GO 3574
3660: POP
3661: POP
// firstRussianAttack = 1 ;
3662: LD_ADDR_EXP 21
3666: PUSH
3667: LD_INT 1
3669: ST_TO_ADDR
// end ; end_of_file
3670: LD_VAR 0 1
3674: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3675: LD_INT 0
3677: PPUSH
3678: PPUSH
// if exist_mode then
3679: LD_VAR 0 2
3683: IFFALSE 3708
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3685: LD_ADDR_VAR 0 4
3689: PUSH
3690: LD_EXP 43
3694: PUSH
3695: LD_VAR 0 1
3699: STR
3700: PPUSH
3701: CALL_OW 34
3705: ST_TO_ADDR
// end else
3706: GO 3723
// begin unit := NewCharacter ( ident ) ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_VAR 0 1
3717: PPUSH
3718: CALL_OW 25
3722: ST_TO_ADDR
// end ; result := unit ;
3723: LD_ADDR_VAR 0 3
3727: PUSH
3728: LD_VAR 0 4
3732: ST_TO_ADDR
// end ;
3733: LD_VAR 0 3
3737: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
// for i = 1 to count do
3744: LD_ADDR_VAR 0 8
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 6
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3841
// begin uc_side = side ;
3762: LD_ADDR_OWVAR 20
3766: PUSH
3767: LD_VAR 0 1
3771: ST_TO_ADDR
// uc_nation = nation ;
3772: LD_ADDR_OWVAR 21
3776: PUSH
3777: LD_VAR 0 2
3781: ST_TO_ADDR
// hc_gallery =  ;
3782: LD_ADDR_OWVAR 33
3786: PUSH
3787: LD_STRING 
3789: ST_TO_ADDR
// hc_name =  ;
3790: LD_ADDR_OWVAR 26
3794: PUSH
3795: LD_STRING 
3797: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3798: LD_INT 0
3800: PPUSH
3801: LD_VAR 0 5
3805: PPUSH
3806: LD_VAR 0 4
3810: PPUSH
3811: CALL_OW 380
// un = CreateHuman ;
3815: LD_ADDR_VAR 0 10
3819: PUSH
3820: CALL_OW 44
3824: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3825: LD_VAR 0 10
3829: PPUSH
3830: LD_VAR 0 3
3834: PPUSH
3835: CALL_OW 52
// end ;
3839: GO 3759
3841: POP
3842: POP
// end ;
3843: LD_VAR 0 7
3847: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3848: LD_INT 0
3850: PPUSH
3851: PPUSH
3852: PPUSH
// uc_side := GetSide ( b ) ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_VAR 0 2
3862: PPUSH
3863: CALL_OW 255
3867: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3868: LD_ADDR_OWVAR 21
3872: PUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: CALL_OW 248
3882: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3883: LD_INT 0
3885: PPUSH
3886: LD_INT 1
3888: PPUSH
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 380
// un = CreateHuman ;
3898: LD_ADDR_VAR 0 4
3902: PUSH
3903: CALL_OW 44
3907: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3908: LD_ADDR_VAR 0 5
3912: PUSH
3913: LD_VAR 0 2
3917: PPUSH
3918: CALL_OW 254
3922: PUSH
3923: LD_INT 3
3925: MINUS
3926: ST_TO_ADDR
// if dir < 0 then
3927: LD_VAR 0 5
3931: PUSH
3932: LD_INT 0
3934: LESS
3935: IFFALSE 3951
// dir := 6 + dir ;
3937: LD_ADDR_VAR 0 5
3941: PUSH
3942: LD_INT 6
3944: PUSH
3945: LD_VAR 0 5
3949: PLUS
3950: ST_TO_ADDR
// SetDir ( un , dir ) ;
3951: LD_VAR 0 4
3955: PPUSH
3956: LD_VAR 0 5
3960: PPUSH
3961: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 2
3974: PPUSH
3975: CALL_OW 52
// end ;
3979: LD_VAR 0 3
3983: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3984: LD_INT 0
3986: PPUSH
3987: PPUSH
3988: PPUSH
// rnd = rand ( 1 , characters ) ;
3989: LD_ADDR_VAR 0 6
3993: PUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_VAR 0 1
4001: PPUSH
4002: CALL_OW 12
4006: ST_TO_ADDR
// for i = 1 to characters do
4007: LD_ADDR_VAR 0 5
4011: PUSH
4012: DOUBLE
4013: LD_INT 1
4015: DEC
4016: ST_TO_ADDR
4017: LD_VAR 0 1
4021: PUSH
4022: FOR_TO
4023: IFFALSE 4133
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4025: LD_VAR 0 5
4029: PUSH
4030: LD_VAR 0 6
4034: EQUAL
4035: PUSH
4036: LD_VAR 0 1
4040: PUSH
4041: LD_VAR 0 5
4045: ARRAY
4046: PPUSH
4047: CALL_OW 258
4051: PUSH
4052: LD_INT 1
4054: EQUAL
4055: AND
4056: IFFALSE 4078
// Say ( characters [ i ] , dialogMID ) ;
4058: LD_VAR 0 1
4062: PUSH
4063: LD_VAR 0 5
4067: ARRAY
4068: PPUSH
4069: LD_VAR 0 2
4073: PPUSH
4074: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4078: LD_VAR 0 5
4082: PUSH
4083: LD_VAR 0 6
4087: EQUAL
4088: PUSH
4089: LD_VAR 0 1
4093: PUSH
4094: LD_VAR 0 5
4098: ARRAY
4099: PPUSH
4100: CALL_OW 258
4104: PUSH
4105: LD_INT 2
4107: EQUAL
4108: AND
4109: IFFALSE 4131
// Say ( characters [ i ] , dialogFID ) ;
4111: LD_VAR 0 1
4115: PUSH
4116: LD_VAR 0 5
4120: ARRAY
4121: PPUSH
4122: LD_VAR 0 3
4126: PPUSH
4127: CALL_OW 88
// end ;
4131: GO 4022
4133: POP
4134: POP
// end ;
4135: LD_VAR 0 4
4139: RET
// export function PrepareDifficulty ; begin
4140: LD_INT 0
4142: PPUSH
// if Difficulty = 1 then
4143: LD_OWVAR 67
4147: PUSH
4148: LD_INT 1
4150: EQUAL
4151: IFFALSE 4169
// begin RuSoldMinLevel = 0 ;
4153: LD_ADDR_EXP 16
4157: PUSH
4158: LD_INT 0
4160: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4161: LD_ADDR_EXP 17
4165: PUSH
4166: LD_INT 2
4168: ST_TO_ADDR
// end ; if Difficulty = 2 then
4169: LD_OWVAR 67
4173: PUSH
4174: LD_INT 2
4176: EQUAL
4177: IFFALSE 4215
// begin RuSoldMinLevel = 1 ;
4179: LD_ADDR_EXP 16
4183: PUSH
4184: LD_INT 1
4186: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4187: LD_ADDR_EXP 17
4191: PUSH
4192: LD_INT 2
4194: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
4202: LD_INT 51
4204: PPUSH
4205: LD_INT 3
4207: PPUSH
4208: LD_INT 1
4210: PPUSH
4211: CALL_OW 322
// end ; if Difficulty = 3 then
4215: LD_OWVAR 67
4219: PUSH
4220: LD_INT 3
4222: EQUAL
4223: IFFALSE 4291
// begin RuSoldMinLevel = 1 ;
4225: LD_ADDR_EXP 16
4229: PUSH
4230: LD_INT 1
4232: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4233: LD_ADDR_EXP 17
4237: PUSH
4238: LD_INT 3
4240: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4241: LD_INT 13
4243: PPUSH
4244: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4248: LD_INT 14
4250: PPUSH
4251: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
4255: LD_INT 51
4257: PPUSH
4258: LD_INT 3
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4268: LD_INT 52
4270: PPUSH
4271: LD_INT 3
4273: PPUSH
4274: LD_INT 1
4276: PPUSH
4277: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4281: LD_INT 25
4283: PPUSH
4284: LD_INT 44
4286: PPUSH
4287: CALL_OW 431
// end ; end ;
4291: LD_VAR 0 1
4295: RET
// export function EnergyDialog ; begin
4296: LD_INT 0
4298: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4299: LD_INT 46
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: CALL_OW 321
4309: PUSH
4310: LD_INT 1
4312: EQUAL
4313: PUSH
4314: LD_INT 35
4316: PPUSH
4317: LD_INT 1
4319: PPUSH
4320: CALL_OW 321
4324: PUSH
4325: LD_INT 1
4327: EQUAL
4328: AND
4329: IFFALSE 4353
// begin Say ( JMM , D9c-JMM-1 ) ;
4331: LD_EXP 1
4335: PPUSH
4336: LD_STRING D9c-JMM-1
4338: PPUSH
4339: CALL_OW 88
// energyVDialog = 1 ;
4343: LD_ADDR_EXP 31
4347: PUSH
4348: LD_INT 1
4350: ST_TO_ADDR
// end else
4351: GO 4507
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4353: LD_INT 35
4355: PPUSH
4356: LD_INT 1
4358: PPUSH
4359: CALL_OW 321
4363: PUSH
4364: LD_INT 2
4366: EQUAL
4367: PUSH
4368: LD_EXP 31
4372: PUSH
4373: LD_INT 0
4375: EQUAL
4376: AND
4377: IFFALSE 4399
// begin Say ( JMM , D9c-JMM-1a ) ;
4379: LD_EXP 1
4383: PPUSH
4384: LD_STRING D9c-JMM-1a
4386: PPUSH
4387: CALL_OW 88
// energyVDialog = 1 ;
4391: LD_ADDR_EXP 31
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4399: LD_INT 46
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 321
4409: PUSH
4410: LD_INT 2
4412: EQUAL
4413: PUSH
4414: LD_EXP 31
4418: PUSH
4419: LD_INT 0
4421: EQUAL
4422: AND
4423: IFFALSE 4445
// begin Say ( JMM , D9c-JMM-1b ) ;
4425: LD_EXP 1
4429: PPUSH
4430: LD_STRING D9c-JMM-1b
4432: PPUSH
4433: CALL_OW 88
// energyVDialog = 1 ;
4437: LD_ADDR_EXP 31
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4445: LD_INT 46
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: CALL_OW 321
4455: PUSH
4456: LD_INT 2
4458: EQUAL
4459: PUSH
4460: LD_INT 21
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: CALL_OW 321
4470: PUSH
4471: LD_INT 2
4473: EQUAL
4474: AND
4475: PUSH
4476: LD_EXP 31
4480: PUSH
4481: LD_INT 0
4483: EQUAL
4484: AND
4485: IFFALSE 4507
// begin Say ( JMM , D9c-JMM-1c ) ;
4487: LD_EXP 1
4491: PPUSH
4492: LD_STRING D9c-JMM-1c
4494: PPUSH
4495: CALL_OW 88
// energyVDialog = 1 ;
4499: LD_ADDR_EXP 31
4503: PUSH
4504: LD_INT 1
4506: ST_TO_ADDR
// end ; end ; end ;
4507: LD_VAR 0 1
4511: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4512: LD_INT 0
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4519: LD_VAR 0 1
4523: NOT
4524: PUSH
4525: LD_VAR 0 1
4529: PPUSH
4530: CALL_OW 256
4534: PUSH
4535: LD_INT 250
4537: LESS
4538: OR
4539: PUSH
4540: LD_VAR 0 1
4544: PPUSH
4545: CALL_OW 314
4549: PUSH
4550: LD_VAR 0 1
4554: PPUSH
4555: CALL_OW 261
4559: PUSH
4560: LD_INT 20
4562: GREATER
4563: AND
4564: OR
4565: IFFALSE 4569
// exit ;
4567: GO 4934
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4569: LD_VAR 0 1
4573: PPUSH
4574: CALL_OW 261
4578: PUSH
4579: LD_INT 20
4581: LESS
4582: PUSH
4583: LD_VAR 0 1
4587: PPUSH
4588: CALL_OW 110
4592: PUSH
4593: LD_INT 21
4595: EQUAL
4596: NOT
4597: AND
4598: IFFALSE 4625
// begin ComStop ( bulldozer ) ;
4600: LD_VAR 0 1
4604: PPUSH
4605: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4609: LD_VAR 0 1
4613: PPUSH
4614: LD_INT 21
4616: PPUSH
4617: CALL_OW 109
// exit ;
4621: GO 4934
// end else
4623: GO 4652
// if GetFuel ( bulldozer ) > 20 then
4625: LD_VAR 0 1
4629: PPUSH
4630: CALL_OW 261
4634: PUSH
4635: LD_INT 20
4637: GREATER
4638: IFFALSE 4652
// SetTag ( bulldozer , 0 ) ;
4640: LD_VAR 0 1
4644: PPUSH
4645: LD_INT 0
4647: PPUSH
4648: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4652: LD_ADDR_VAR 0 5
4656: PUSH
4657: LD_VAR 0 2
4661: PPUSH
4662: CALL_OW 353
4666: ST_TO_ADDR
// tmp := [ ] ;
4667: LD_ADDR_VAR 0 6
4671: PUSH
4672: EMPTY
4673: ST_TO_ADDR
// for i = 1 to list do
4674: LD_ADDR_VAR 0 4
4678: PUSH
4679: DOUBLE
4680: LD_INT 1
4682: DEC
4683: ST_TO_ADDR
4684: LD_VAR 0 5
4688: PUSH
4689: FOR_TO
4690: IFFALSE 4788
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4692: LD_VAR 0 5
4696: PUSH
4697: LD_VAR 0 4
4701: ARRAY
4702: PUSH
4703: LD_INT 1
4705: ARRAY
4706: PPUSH
4707: LD_VAR 0 5
4711: PUSH
4712: LD_VAR 0 4
4716: ARRAY
4717: PUSH
4718: LD_INT 2
4720: ARRAY
4721: PPUSH
4722: CALL_OW 554
4726: IFFALSE 4786
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4728: LD_ADDR_VAR 0 6
4732: PUSH
4733: LD_VAR 0 6
4737: PPUSH
4738: LD_VAR 0 6
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: PPUSH
4747: LD_VAR 0 5
4751: PUSH
4752: LD_VAR 0 4
4756: ARRAY
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PUSH
4762: LD_VAR 0 5
4766: PUSH
4767: LD_VAR 0 4
4771: ARRAY
4772: PUSH
4773: LD_INT 2
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PPUSH
4781: CALL_OW 1
4785: ST_TO_ADDR
// end ;
4786: GO 4689
4788: POP
4789: POP
// ComStop ( bulldozer ) ;
4790: LD_VAR 0 1
4794: PPUSH
4795: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
4799: LD_ADDR_VAR 0 7
4803: PUSH
4804: LD_VAR 0 1
4808: PPUSH
4809: CALL_OW 250
4813: PUSH
4814: LD_VAR 0 1
4818: PPUSH
4819: CALL_OW 251
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: ST_TO_ADDR
// for i = tmp downto 1 do
4828: LD_ADDR_VAR 0 4
4832: PUSH
4833: DOUBLE
4834: LD_VAR 0 6
4838: INC
4839: ST_TO_ADDR
4840: LD_INT 1
4842: PUSH
4843: FOR_DOWNTO
4844: IFFALSE 4932
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
4846: LD_ADDR_VAR 0 7
4850: PUSH
4851: LD_VAR 0 7
4855: PUSH
4856: LD_INT 1
4858: ARRAY
4859: PPUSH
4860: LD_VAR 0 7
4864: PUSH
4865: LD_INT 2
4867: ARRAY
4868: PPUSH
4869: LD_VAR 0 6
4873: PPUSH
4874: CALL 5035 0 3
4878: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_VAR 0 7
4888: PUSH
4889: LD_INT 1
4891: ARRAY
4892: PPUSH
4893: LD_VAR 0 7
4897: PUSH
4898: LD_INT 2
4900: ARRAY
4901: PPUSH
4902: CALL 4939 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
4906: LD_ADDR_VAR 0 6
4910: PUSH
4911: LD_VAR 0 6
4915: PPUSH
4916: LD_VAR 0 7
4920: PUSH
4921: LD_INT 3
4923: ARRAY
4924: PPUSH
4925: CALL_OW 3
4929: ST_TO_ADDR
// end ;
4930: GO 4843
4932: POP
4933: POP
// end ;
4934: LD_VAR 0 3
4938: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
4939: LD_INT 0
4941: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
4942: LD_VAR 0 2
4946: PPUSH
4947: LD_VAR 0 3
4951: PPUSH
4952: CALL_OW 351
4956: PUSH
4957: LD_VAR 0 2
4961: PPUSH
4962: LD_VAR 0 3
4966: PPUSH
4967: CALL_OW 554
4971: AND
4972: PUSH
4973: LD_VAR 0 2
4977: PPUSH
4978: LD_VAR 0 3
4982: PPUSH
4983: CALL_OW 488
4987: AND
4988: PUSH
4989: LD_VAR 0 2
4993: PPUSH
4994: LD_VAR 0 3
4998: PPUSH
4999: CALL_OW 428
5003: PUSH
5004: LD_INT 1
5006: NEG
5007: EQUAL
5008: AND
5009: IFFALSE 5030
// AddComMoveXY ( bulldozer , x , y ) ;
5011: LD_VAR 0 1
5015: PPUSH
5016: LD_VAR 0 2
5020: PPUSH
5021: LD_VAR 0 3
5025: PPUSH
5026: CALL_OW 171
// end ;
5030: LD_VAR 0 4
5034: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5035: LD_INT 0
5037: PPUSH
5038: PPUSH
5039: PPUSH
5040: PPUSH
5041: PPUSH
5042: PPUSH
5043: PPUSH
// dist := 99999 ;
5044: LD_ADDR_VAR 0 6
5048: PUSH
5049: LD_INT 99999
5051: ST_TO_ADDR
// for i = 1 to list do
5052: LD_ADDR_VAR 0 5
5056: PUSH
5057: DOUBLE
5058: LD_INT 1
5060: DEC
5061: ST_TO_ADDR
5062: LD_VAR 0 3
5066: PUSH
5067: FOR_TO
5068: IFFALSE 5206
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5070: LD_ADDR_VAR 0 7
5074: PUSH
5075: LD_VAR 0 1
5079: PPUSH
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 3
5089: PUSH
5090: LD_VAR 0 5
5094: ARRAY
5095: PUSH
5096: LD_INT 1
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 3
5104: PUSH
5105: LD_VAR 0 5
5109: ARRAY
5110: PUSH
5111: LD_INT 2
5113: ARRAY
5114: PPUSH
5115: CALL_OW 298
5119: ST_TO_ADDR
// if d = 0 then
5120: LD_VAR 0 7
5124: PUSH
5125: LD_INT 0
5127: EQUAL
5128: IFFALSE 5132
// continue ;
5130: GO 5067
// if d < dist then
5132: LD_VAR 0 7
5136: PUSH
5137: LD_VAR 0 6
5141: LESS
5142: IFFALSE 5204
// begin _x := list [ i ] [ 1 ] ;
5144: LD_ADDR_VAR 0 8
5148: PUSH
5149: LD_VAR 0 3
5153: PUSH
5154: LD_VAR 0 5
5158: ARRAY
5159: PUSH
5160: LD_INT 1
5162: ARRAY
5163: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5164: LD_ADDR_VAR 0 9
5168: PUSH
5169: LD_VAR 0 3
5173: PUSH
5174: LD_VAR 0 5
5178: ARRAY
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: ST_TO_ADDR
// _i := i ;
5184: LD_ADDR_VAR 0 10
5188: PUSH
5189: LD_VAR 0 5
5193: ST_TO_ADDR
// dist := d ;
5194: LD_ADDR_VAR 0 6
5198: PUSH
5199: LD_VAR 0 7
5203: ST_TO_ADDR
// end ; end ;
5204: GO 5067
5206: POP
5207: POP
// result := [ _x , _y , _i , dist ] ;
5208: LD_ADDR_VAR 0 4
5212: PUSH
5213: LD_VAR 0 8
5217: PUSH
5218: LD_VAR 0 9
5222: PUSH
5223: LD_VAR 0 10
5227: PUSH
5228: LD_VAR 0 6
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: ST_TO_ADDR
// end ;
5239: LD_VAR 0 4
5243: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5244: LD_INT 0
5246: PPUSH
5247: PPUSH
5248: PPUSH
5249: PPUSH
// for i = 1 to 72 do
5250: LD_ADDR_VAR 0 5
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 72
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5322
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5266: LD_VAR 0 5
5270: PPUSH
5271: LD_VAR 0 1
5275: PPUSH
5276: CALL_OW 321
5280: PUSH
5281: LD_INT 1
5283: EQUAL
5284: PUSH
5285: LD_VAR 0 5
5289: PPUSH
5290: LD_VAR 0 3
5294: PPUSH
5295: CALL_OW 482
5299: PUSH
5300: LD_INT 1
5302: EQUAL
5303: AND
5304: IFFALSE 5320
// AddComResearch ( lab , i ) ;
5306: LD_VAR 0 2
5310: PPUSH
5311: LD_VAR 0 5
5315: PPUSH
5316: CALL_OW 184
5320: GO 5263
5322: POP
5323: POP
// end ;
5324: LD_VAR 0 4
5328: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5329: LD_INT 0
5331: PPUSH
5332: PPUSH
5333: PPUSH
5334: PPUSH
5335: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5336: LD_ADDR_VAR 0 6
5340: PUSH
5341: LD_INT 22
5343: PUSH
5344: LD_VAR 0 1
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PUSH
5353: LD_INT 25
5355: PUSH
5356: LD_INT 2
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PUSH
5363: LD_INT 24
5365: PUSH
5366: LD_INT 1000
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: LIST
5377: PPUSH
5378: CALL_OW 69
5382: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5383: LD_ADDR_VAR 0 4
5387: PUSH
5388: LD_INT 22
5390: PUSH
5391: LD_VAR 0 1
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: LD_INT 3
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 3
5412: PUSH
5413: LD_INT 24
5415: PUSH
5416: LD_INT 1000
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: PPUSH
5435: CALL_OW 69
5439: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5440: LD_VAR 0 4
5444: PUSH
5445: LD_INT 0
5447: GREATER
5448: PUSH
5449: LD_VAR 0 6
5453: PUSH
5454: LD_INT 0
5456: GREATER
5457: AND
5458: IFFALSE 5524
// begin for i in engineerOk_list do
5460: LD_ADDR_VAR 0 5
5464: PUSH
5465: LD_VAR 0 6
5469: PUSH
5470: FOR_IN
5471: IFFALSE 5522
// begin for j in buildings_list do
5473: LD_ADDR_VAR 0 7
5477: PUSH
5478: LD_VAR 0 4
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5518
// begin AddComExitBuilding ( i ) ;
5486: LD_VAR 0 5
5490: PPUSH
5491: CALL_OW 182
// wait ( 0 0$1 ) ;
5495: LD_INT 35
5497: PPUSH
5498: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5502: LD_VAR 0 5
5506: PPUSH
5507: LD_VAR 0 7
5511: PPUSH
5512: CALL_OW 190
// end ;
5516: GO 5483
5518: POP
5519: POP
// end ;
5520: GO 5470
5522: POP
5523: POP
// end ; if buildings_list = 0 then
5524: LD_VAR 0 4
5528: PUSH
5529: LD_INT 0
5531: EQUAL
5532: IFFALSE 5565
// begin for i in engineerOK_list do
5534: LD_ADDR_VAR 0 5
5538: PUSH
5539: LD_VAR 0 6
5543: PUSH
5544: FOR_IN
5545: IFFALSE 5563
// begin ComEnterUnit ( i , building ) ;
5547: LD_VAR 0 5
5551: PPUSH
5552: LD_VAR 0 2
5556: PPUSH
5557: CALL_OW 120
// end ;
5561: GO 5544
5563: POP
5564: POP
// end ; end ;
5565: LD_VAR 0 3
5569: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5570: LD_INT 0
5572: PPUSH
5573: PPUSH
5574: PPUSH
5575: PPUSH
5576: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5577: LD_ADDR_VAR 0 6
5581: PUSH
5582: LD_INT 22
5584: PUSH
5585: LD_VAR 0 1
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 25
5596: PUSH
5597: LD_INT 4
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 69
5612: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5613: LD_ADDR_VAR 0 9
5617: PUSH
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 22
5625: PUSH
5626: LD_VAR 0 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 21
5637: PUSH
5638: LD_INT 1
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 3
5647: PUSH
5648: LD_INT 24
5650: PUSH
5651: LD_INT 750
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: LIST
5666: PPUSH
5667: CALL_OW 70
5671: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5672: LD_VAR 0 9
5676: PUSH
5677: LD_INT 0
5679: GREATER
5680: PUSH
5681: LD_VAR 0 6
5685: PUSH
5686: LD_INT 0
5688: GREATER
5689: AND
5690: IFFALSE 5817
// begin for i = 1 to damageUnits do
5692: LD_ADDR_VAR 0 7
5696: PUSH
5697: DOUBLE
5698: LD_INT 1
5700: DEC
5701: ST_TO_ADDR
5702: LD_VAR 0 9
5706: PUSH
5707: FOR_TO
5708: IFFALSE 5732
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5710: LD_VAR 0 9
5714: PUSH
5715: LD_VAR 0 7
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 2
5725: PPUSH
5726: CALL_OW 113
5730: GO 5707
5732: POP
5733: POP
// for i in sci_list do
5734: LD_ADDR_VAR 0 7
5738: PUSH
5739: LD_VAR 0 6
5743: PUSH
5744: FOR_IN
5745: IFFALSE 5813
// begin ComExitBuilding ( i ) ;
5747: LD_VAR 0 7
5751: PPUSH
5752: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5756: LD_ADDR_VAR 0 8
5760: PUSH
5761: LD_VAR 0 2
5765: PPUSH
5766: LD_INT 22
5768: PUSH
5769: LD_VAR 0 1
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PPUSH
5778: CALL_OW 70
5782: PUSH
5783: FOR_IN
5784: IFFALSE 5809
// begin AddComHeal ( i , j ) ;
5786: LD_VAR 0 7
5790: PPUSH
5791: LD_VAR 0 8
5795: PPUSH
5796: CALL_OW 188
// wait ( 1 1$0 ) ;
5800: LD_INT 2100
5802: PPUSH
5803: CALL_OW 67
// end ;
5807: GO 5783
5809: POP
5810: POP
// end ;
5811: GO 5744
5813: POP
5814: POP
// end else
5815: GO 5831
// begin AddComEnterUnit ( sci_list , build ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_VAR 0 4
5826: PPUSH
5827: CALL_OW 180
// end ; end ;
5831: LD_VAR 0 5
5835: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5836: LD_INT 0
5838: PPUSH
5839: PPUSH
5840: PPUSH
5841: PPUSH
5842: PPUSH
5843: PPUSH
5844: PPUSH
5845: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5846: LD_INT 22
5848: PUSH
5849: LD_VAR 0 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 21
5860: PUSH
5861: LD_INT 2
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL_OW 69
5876: PUSH
5877: LD_VAR 0 3
5881: LESSEQUAL
5882: IFFALSE 5949
// begin for i = 1 to vehCount do
5884: LD_ADDR_VAR 0 10
5888: PUSH
5889: DOUBLE
5890: LD_INT 1
5892: DEC
5893: ST_TO_ADDR
5894: LD_VAR 0 3
5898: PUSH
5899: FOR_TO
5900: IFFALSE 5947
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5902: LD_VAR 0 2
5906: PPUSH
5907: LD_VAR 0 8
5911: PPUSH
5912: LD_VAR 0 6
5916: PPUSH
5917: LD_VAR 0 7
5921: PPUSH
5922: LD_VAR 0 5
5926: PUSH
5927: LD_INT 1
5929: PPUSH
5930: LD_VAR 0 5
5934: PPUSH
5935: CALL_OW 12
5939: ARRAY
5940: PPUSH
5941: CALL_OW 185
5945: GO 5899
5947: POP
5948: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5949: LD_INT 22
5951: PUSH
5952: LD_VAR 0 1
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: LD_INT 21
5963: PUSH
5964: LD_INT 2
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 24
5973: PUSH
5974: LD_INT 250
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PPUSH
5986: CALL_OW 69
5990: PUSH
5991: LD_VAR 0 3
5995: GREATEREQUAL
5996: IFFALSE 6316
// begin repeat begin wait ( 0 0$1 ) ;
5998: LD_INT 35
6000: PPUSH
6001: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
6005: LD_INT 22
6007: PUSH
6008: LD_VAR 0 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 2
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 24
6029: PUSH
6030: LD_INT 651
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: LIST
6041: PPUSH
6042: CALL_OW 69
6046: PUSH
6047: LD_INT 0
6049: GREATER
6050: IFFALSE 6278
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
6052: LD_ADDR_VAR 0 10
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_VAR 0 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 21
6071: PUSH
6072: LD_INT 2
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 24
6081: PUSH
6082: LD_INT 651
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: PUSH
6099: FOR_IN
6100: IFFALSE 6276
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6102: LD_ADDR_VAR 0 15
6106: PUSH
6107: LD_INT 22
6109: PUSH
6110: LD_VAR 0 4
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL_OW 69
6123: PPUSH
6124: LD_VAR 0 10
6128: PPUSH
6129: CALL_OW 74
6133: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6134: LD_ADDR_VAR 0 16
6138: PUSH
6139: LD_INT 22
6141: PUSH
6142: LD_VAR 0 4
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 2
6153: PUSH
6154: LD_INT 59
6156: PUSH
6157: EMPTY
6158: LIST
6159: PUSH
6160: LD_INT 21
6162: PUSH
6163: LD_INT 1
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: LD_INT 21
6172: PUSH
6173: LD_INT 2
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: PPUSH
6198: LD_VAR 0 10
6202: PPUSH
6203: CALL_OW 74
6207: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6208: LD_VAR 0 10
6212: PPUSH
6213: LD_VAR 0 15
6217: PPUSH
6218: CALL_OW 296
6222: PUSH
6223: LD_INT 8
6225: PLUS
6226: PUSH
6227: LD_VAR 0 10
6231: PPUSH
6232: LD_VAR 0 16
6236: PPUSH
6237: CALL_OW 296
6241: LESS
6242: IFFALSE 6260
// begin ComAttackUnit ( i , target1 ) ;
6244: LD_VAR 0 10
6248: PPUSH
6249: LD_VAR 0 15
6253: PPUSH
6254: CALL_OW 115
// end else
6258: GO 6274
// begin ComAttackUnit ( i , target2 ) ;
6260: LD_VAR 0 10
6264: PPUSH
6265: LD_VAR 0 16
6269: PPUSH
6270: CALL_OW 115
// end ; end ;
6274: GO 6099
6276: POP
6277: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
6278: LD_INT 22
6280: PUSH
6281: LD_VAR 0 1
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 21
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: PUSH
6309: LD_VAR 0 3
6313: LESSEQUAL
6314: IFFALSE 5998
// end ; end ;
6316: LD_VAR 0 9
6320: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6321: LD_INT 0
6323: PPUSH
6324: PPUSH
6325: PPUSH
6326: PPUSH
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
6331: PPUSH
6332: PPUSH
6333: PPUSH
// for i = 1 to medicCount do
6334: LD_ADDR_VAR 0 14
6338: PUSH
6339: DOUBLE
6340: LD_INT 1
6342: DEC
6343: ST_TO_ADDR
6344: LD_VAR 0 7
6348: PUSH
6349: FOR_TO
6350: IFFALSE 6432
// begin uc_side = side ;
6352: LD_ADDR_OWVAR 20
6356: PUSH
6357: LD_VAR 0 1
6361: ST_TO_ADDR
// uc_nation = nation ;
6362: LD_ADDR_OWVAR 21
6366: PUSH
6367: LD_VAR 0 2
6371: ST_TO_ADDR
// hc_name =  ;
6372: LD_ADDR_OWVAR 26
6376: PUSH
6377: LD_STRING 
6379: ST_TO_ADDR
// hc_gallery =  ;
6380: LD_ADDR_OWVAR 33
6384: PUSH
6385: LD_STRING 
6387: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6388: LD_INT 0
6390: PPUSH
6391: LD_INT 4
6393: PPUSH
6394: LD_VAR 0 8
6398: PPUSH
6399: CALL_OW 380
// un = CreateHuman ;
6403: LD_ADDR_VAR 0 16
6407: PUSH
6408: CALL_OW 44
6412: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6413: LD_VAR 0 16
6417: PPUSH
6418: LD_VAR 0 9
6422: PPUSH
6423: LD_INT 0
6425: PPUSH
6426: CALL_OW 49
// end ;
6430: GO 6349
6432: POP
6433: POP
// for i = 1 to soldierCount do
6434: LD_ADDR_VAR 0 14
6438: PUSH
6439: DOUBLE
6440: LD_INT 1
6442: DEC
6443: ST_TO_ADDR
6444: LD_VAR 0 3
6448: PUSH
6449: FOR_TO
6450: IFFALSE 6532
// begin uc_side = side ;
6452: LD_ADDR_OWVAR 20
6456: PUSH
6457: LD_VAR 0 1
6461: ST_TO_ADDR
// uc_nation = nation ;
6462: LD_ADDR_OWVAR 21
6466: PUSH
6467: LD_VAR 0 2
6471: ST_TO_ADDR
// hc_name =  ;
6472: LD_ADDR_OWVAR 26
6476: PUSH
6477: LD_STRING 
6479: ST_TO_ADDR
// hc_gallery =  ;
6480: LD_ADDR_OWVAR 33
6484: PUSH
6485: LD_STRING 
6487: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6488: LD_INT 0
6490: PPUSH
6491: LD_INT 1
6493: PPUSH
6494: LD_VAR 0 8
6498: PPUSH
6499: CALL_OW 380
// un = CreateHuman ;
6503: LD_ADDR_VAR 0 16
6507: PUSH
6508: CALL_OW 44
6512: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6513: LD_VAR 0 16
6517: PPUSH
6518: LD_VAR 0 9
6522: PPUSH
6523: LD_INT 0
6525: PPUSH
6526: CALL_OW 49
// end ;
6530: GO 6449
6532: POP
6533: POP
// for i = 1 to sniperCount do
6534: LD_ADDR_VAR 0 14
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_VAR 0 4
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6632
// begin uc_side = side ;
6552: LD_ADDR_OWVAR 20
6556: PUSH
6557: LD_VAR 0 1
6561: ST_TO_ADDR
// uc_nation = nation ;
6562: LD_ADDR_OWVAR 21
6566: PUSH
6567: LD_VAR 0 2
6571: ST_TO_ADDR
// hc_name =  ;
6572: LD_ADDR_OWVAR 26
6576: PUSH
6577: LD_STRING 
6579: ST_TO_ADDR
// hc_gallery =  ;
6580: LD_ADDR_OWVAR 33
6584: PUSH
6585: LD_STRING 
6587: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6588: LD_INT 0
6590: PPUSH
6591: LD_INT 5
6593: PPUSH
6594: LD_VAR 0 8
6598: PPUSH
6599: CALL_OW 380
// un = CreateHuman ;
6603: LD_ADDR_VAR 0 16
6607: PUSH
6608: CALL_OW 44
6612: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6613: LD_VAR 0 16
6617: PPUSH
6618: LD_VAR 0 9
6622: PPUSH
6623: LD_INT 0
6625: PPUSH
6626: CALL_OW 49
// end ;
6630: GO 6549
6632: POP
6633: POP
// for i = 1 to bazookCount do
6634: LD_ADDR_VAR 0 14
6638: PUSH
6639: DOUBLE
6640: LD_INT 1
6642: DEC
6643: ST_TO_ADDR
6644: LD_VAR 0 5
6648: PUSH
6649: FOR_TO
6650: IFFALSE 6732
// begin uc_side = side ;
6652: LD_ADDR_OWVAR 20
6656: PUSH
6657: LD_VAR 0 1
6661: ST_TO_ADDR
// uc_nation = nation ;
6662: LD_ADDR_OWVAR 21
6666: PUSH
6667: LD_VAR 0 2
6671: ST_TO_ADDR
// hc_name =  ;
6672: LD_ADDR_OWVAR 26
6676: PUSH
6677: LD_STRING 
6679: ST_TO_ADDR
// hc_gallery =  ;
6680: LD_ADDR_OWVAR 33
6684: PUSH
6685: LD_STRING 
6687: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6688: LD_INT 0
6690: PPUSH
6691: LD_INT 9
6693: PPUSH
6694: LD_VAR 0 8
6698: PPUSH
6699: CALL_OW 380
// un = CreateHuman ;
6703: LD_ADDR_VAR 0 16
6707: PUSH
6708: CALL_OW 44
6712: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6713: LD_VAR 0 16
6717: PPUSH
6718: LD_VAR 0 9
6722: PPUSH
6723: LD_INT 0
6725: PPUSH
6726: CALL_OW 49
// end ;
6730: GO 6649
6732: POP
6733: POP
// for i = 1 to mortalCount do
6734: LD_ADDR_VAR 0 14
6738: PUSH
6739: DOUBLE
6740: LD_INT 1
6742: DEC
6743: ST_TO_ADDR
6744: LD_VAR 0 6
6748: PUSH
6749: FOR_TO
6750: IFFALSE 6832
// begin uc_side = side ;
6752: LD_ADDR_OWVAR 20
6756: PUSH
6757: LD_VAR 0 1
6761: ST_TO_ADDR
// uc_nation = nation ;
6762: LD_ADDR_OWVAR 21
6766: PUSH
6767: LD_VAR 0 2
6771: ST_TO_ADDR
// hc_name =  ;
6772: LD_ADDR_OWVAR 26
6776: PUSH
6777: LD_STRING 
6779: ST_TO_ADDR
// hc_gallery =  ;
6780: LD_ADDR_OWVAR 33
6784: PUSH
6785: LD_STRING 
6787: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6788: LD_INT 0
6790: PPUSH
6791: LD_INT 8
6793: PPUSH
6794: LD_VAR 0 8
6798: PPUSH
6799: CALL_OW 380
// un = CreateHuman ;
6803: LD_ADDR_VAR 0 16
6807: PUSH
6808: CALL_OW 44
6812: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6813: LD_VAR 0 16
6817: PPUSH
6818: LD_VAR 0 9
6822: PPUSH
6823: LD_INT 0
6825: PPUSH
6826: CALL_OW 49
// end ;
6830: GO 6749
6832: POP
6833: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6834: LD_ADDR_VAR 0 19
6838: PUSH
6839: LD_INT 22
6841: PUSH
6842: LD_VAR 0 1
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 2
6853: PUSH
6854: LD_INT 25
6856: PUSH
6857: LD_INT 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 25
6866: PUSH
6867: LD_INT 5
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 25
6876: PUSH
6877: LD_INT 8
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 25
6886: PUSH
6887: LD_INT 9
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 69
6909: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6910: LD_ADDR_VAR 0 18
6914: PUSH
6915: LD_INT 22
6917: PUSH
6918: LD_VAR 0 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 4
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 69
6945: ST_TO_ADDR
// for i in medic_list do
6946: LD_ADDR_VAR 0 14
6950: PUSH
6951: LD_VAR 0 18
6955: PUSH
6956: FOR_IN
6957: IFFALSE 6975
// ComMoveToArea ( i , healArea ) ;
6959: LD_VAR 0 14
6963: PPUSH
6964: LD_VAR 0 10
6968: PPUSH
6969: CALL_OW 113
6973: GO 6956
6975: POP
6976: POP
// if strategy = 1 then
6977: LD_VAR 0 12
6981: PUSH
6982: LD_INT 1
6984: EQUAL
6985: IFFALSE 7720
// begin repeat wait ( 0 0$3 ) ;
6987: LD_INT 105
6989: PPUSH
6990: CALL_OW 67
// for i in soldiersOK_list do
6994: LD_ADDR_VAR 0 14
6998: PUSH
6999: LD_VAR 0 19
7003: PUSH
7004: FOR_IN
7005: IFFALSE 7069
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7007: LD_VAR 0 14
7011: PPUSH
7012: LD_INT 91
7014: PPUSH
7015: LD_INT 63
7017: PPUSH
7018: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7022: LD_VAR 0 14
7026: PPUSH
7027: LD_INT 101
7029: PPUSH
7030: LD_INT 53
7032: PPUSH
7033: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7037: LD_VAR 0 14
7041: PPUSH
7042: LD_INT 75
7044: PPUSH
7045: LD_INT 23
7047: PPUSH
7048: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7052: LD_VAR 0 14
7056: PPUSH
7057: LD_INT 78
7059: PPUSH
7060: LD_INT 8
7062: PPUSH
7063: CALL_OW 174
// end ;
7067: GO 7004
7069: POP
7070: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
7071: LD_INT 15
7073: PPUSH
7074: LD_INT 22
7076: PUSH
7077: LD_VAR 0 1
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PPUSH
7086: CALL_OW 70
7090: PUSH
7091: LD_INT 2
7093: GREATER
7094: IFFALSE 6987
// repeat wait ( 0 0$1 ) ;
7096: LD_INT 35
7098: PPUSH
7099: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7103: LD_ADDR_VAR 0 17
7107: PUSH
7108: LD_INT 22
7110: PUSH
7111: LD_VAR 0 1
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 1
7122: PUSH
7123: LD_INT 3
7125: PUSH
7126: LD_INT 24
7128: PUSH
7129: LD_INT 550
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 24
7142: PUSH
7143: LD_INT 250
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: LIST
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 69
7163: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7164: LD_ADDR_VAR 0 19
7168: PUSH
7169: LD_INT 22
7171: PUSH
7172: LD_VAR 0 1
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: LD_INT 25
7186: PUSH
7187: LD_INT 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 25
7196: PUSH
7197: LD_INT 5
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 25
7206: PUSH
7207: LD_INT 8
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 25
7216: PUSH
7217: LD_INT 9
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 24
7233: PUSH
7234: LD_INT 1000
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 69
7250: ST_TO_ADDR
// if medicCount > 0 then
7251: LD_VAR 0 7
7255: PUSH
7256: LD_INT 0
7258: GREATER
7259: IFFALSE 7333
// begin if damageUnit_list > 0 then
7261: LD_VAR 0 17
7265: PUSH
7266: LD_INT 0
7268: GREATER
7269: IFFALSE 7333
// begin for i in damageUnit_list do
7271: LD_ADDR_VAR 0 14
7275: PUSH
7276: LD_VAR 0 17
7280: PUSH
7281: FOR_IN
7282: IFFALSE 7331
// begin ComMoveToArea ( i , healArea ) ;
7284: LD_VAR 0 14
7288: PPUSH
7289: LD_VAR 0 10
7293: PPUSH
7294: CALL_OW 113
// for j in medic_list do
7298: LD_ADDR_VAR 0 15
7302: PUSH
7303: LD_VAR 0 18
7307: PUSH
7308: FOR_IN
7309: IFFALSE 7327
// AddComHeal ( j , i ) ;
7311: LD_VAR 0 15
7315: PPUSH
7316: LD_VAR 0 14
7320: PPUSH
7321: CALL_OW 188
7325: GO 7308
7327: POP
7328: POP
// end ;
7329: GO 7281
7331: POP
7332: POP
// end ; end ; for i in soldiersOK_list do
7333: LD_ADDR_VAR 0 14
7337: PUSH
7338: LD_VAR 0 19
7342: PUSH
7343: FOR_IN
7344: IFFALSE 7520
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7346: LD_ADDR_VAR 0 22
7350: PUSH
7351: LD_INT 22
7353: PUSH
7354: LD_VAR 0 11
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PPUSH
7363: CALL_OW 69
7367: PPUSH
7368: LD_VAR 0 14
7372: PPUSH
7373: CALL_OW 74
7377: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7378: LD_ADDR_VAR 0 23
7382: PUSH
7383: LD_INT 22
7385: PUSH
7386: LD_VAR 0 11
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: LD_INT 59
7400: PUSH
7401: EMPTY
7402: LIST
7403: PUSH
7404: LD_INT 21
7406: PUSH
7407: LD_INT 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 2
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: EMPTY
7435: LIST
7436: PPUSH
7437: CALL_OW 69
7441: PPUSH
7442: LD_VAR 0 14
7446: PPUSH
7447: CALL_OW 74
7451: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7452: LD_VAR 0 14
7456: PPUSH
7457: LD_VAR 0 22
7461: PPUSH
7462: CALL_OW 296
7466: PUSH
7467: LD_INT 8
7469: PLUS
7470: PUSH
7471: LD_VAR 0 14
7475: PPUSH
7476: LD_VAR 0 23
7480: PPUSH
7481: CALL_OW 296
7485: LESS
7486: IFFALSE 7504
// begin ComAttackUnit ( i , target1 ) ;
7488: LD_VAR 0 14
7492: PPUSH
7493: LD_VAR 0 22
7497: PPUSH
7498: CALL_OW 115
// end else
7502: GO 7518
// begin ComAttackUnit ( i , target2 ) ;
7504: LD_VAR 0 14
7508: PPUSH
7509: LD_VAR 0 23
7513: PPUSH
7514: CALL_OW 115
// end ; end ;
7518: GO 7343
7520: POP
7521: POP
// for i in soldiersOK_list do
7522: LD_ADDR_VAR 0 14
7526: PUSH
7527: LD_VAR 0 19
7531: PUSH
7532: FOR_IN
7533: IFFALSE 7709
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7535: LD_ADDR_VAR 0 22
7539: PUSH
7540: LD_INT 22
7542: PUSH
7543: LD_VAR 0 11
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PPUSH
7552: CALL_OW 69
7556: PPUSH
7557: LD_VAR 0 14
7561: PPUSH
7562: CALL_OW 74
7566: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7567: LD_ADDR_VAR 0 23
7571: PUSH
7572: LD_INT 22
7574: PUSH
7575: LD_VAR 0 11
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: LD_INT 59
7589: PUSH
7590: EMPTY
7591: LIST
7592: PUSH
7593: LD_INT 21
7595: PUSH
7596: LD_INT 1
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 21
7605: PUSH
7606: LD_INT 2
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: PPUSH
7631: LD_VAR 0 14
7635: PPUSH
7636: CALL_OW 74
7640: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7641: LD_VAR 0 14
7645: PPUSH
7646: LD_VAR 0 22
7650: PPUSH
7651: CALL_OW 296
7655: PUSH
7656: LD_INT 8
7658: PLUS
7659: PUSH
7660: LD_VAR 0 14
7664: PPUSH
7665: LD_VAR 0 23
7669: PPUSH
7670: CALL_OW 296
7674: LESS
7675: IFFALSE 7693
// begin ComAttackUnit ( i , target1 ) ;
7677: LD_VAR 0 14
7681: PPUSH
7682: LD_VAR 0 22
7686: PPUSH
7687: CALL_OW 115
// end else
7691: GO 7707
// begin ComAttackUnit ( i , target2 ) ;
7693: LD_VAR 0 14
7697: PPUSH
7698: LD_VAR 0 23
7702: PPUSH
7703: CALL_OW 115
// end ; end ;
7707: GO 7532
7709: POP
7710: POP
// until soldiersOK_list = [ ] ;
7711: LD_VAR 0 19
7715: PUSH
7716: EMPTY
7717: EQUAL
7718: IFFALSE 7096
// end ; if strategy = 2 then
7720: LD_VAR 0 12
7724: PUSH
7725: LD_INT 2
7727: EQUAL
7728: IFFALSE 8433
// begin repeat wait ( 0 0$1 ) ;
7730: LD_INT 35
7732: PPUSH
7733: CALL_OW 67
// for i in soldiersOK_list do
7737: LD_ADDR_VAR 0 14
7741: PUSH
7742: LD_VAR 0 19
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7782
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7750: LD_VAR 0 14
7754: PPUSH
7755: LD_INT 91
7757: PPUSH
7758: LD_INT 63
7760: PPUSH
7761: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7765: LD_VAR 0 14
7769: PPUSH
7770: LD_INT 75
7772: PPUSH
7773: LD_INT 33
7775: PPUSH
7776: CALL_OW 174
// end ;
7780: GO 7747
7782: POP
7783: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
7784: LD_INT 16
7786: PPUSH
7787: LD_INT 22
7789: PUSH
7790: LD_VAR 0 1
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 70
7803: PUSH
7804: LD_INT 2
7806: GREATER
7807: IFFALSE 7730
// repeat wait ( 0 0$3 ) ;
7809: LD_INT 105
7811: PPUSH
7812: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7816: LD_ADDR_VAR 0 17
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_VAR 0 1
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 3
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 550
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 24
7855: PUSH
7856: LD_INT 250
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PPUSH
7872: CALL_OW 69
7876: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7877: LD_ADDR_VAR 0 19
7881: PUSH
7882: LD_INT 22
7884: PUSH
7885: LD_VAR 0 1
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: LD_INT 25
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 25
7909: PUSH
7910: LD_INT 5
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 25
7919: PUSH
7920: LD_INT 8
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 25
7929: PUSH
7930: LD_INT 9
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 24
7946: PUSH
7947: LD_INT 1000
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: ST_TO_ADDR
// if medicCount > 0 then
7964: LD_VAR 0 7
7968: PUSH
7969: LD_INT 0
7971: GREATER
7972: IFFALSE 8046
// begin if damageUnit_list > 0 then
7974: LD_VAR 0 17
7978: PUSH
7979: LD_INT 0
7981: GREATER
7982: IFFALSE 8046
// begin for i in damageUnit_list do
7984: LD_ADDR_VAR 0 14
7988: PUSH
7989: LD_VAR 0 17
7993: PUSH
7994: FOR_IN
7995: IFFALSE 8044
// begin ComMoveToArea ( i , healArea ) ;
7997: LD_VAR 0 14
8001: PPUSH
8002: LD_VAR 0 10
8006: PPUSH
8007: CALL_OW 113
// for j in medic_list do
8011: LD_ADDR_VAR 0 15
8015: PUSH
8016: LD_VAR 0 18
8020: PUSH
8021: FOR_IN
8022: IFFALSE 8040
// AddComHeal ( j , i ) ;
8024: LD_VAR 0 15
8028: PPUSH
8029: LD_VAR 0 14
8033: PPUSH
8034: CALL_OW 188
8038: GO 8021
8040: POP
8041: POP
// end ;
8042: GO 7994
8044: POP
8045: POP
// end ; end ; for i in soldiersOK_list do
8046: LD_ADDR_VAR 0 14
8050: PUSH
8051: LD_VAR 0 19
8055: PUSH
8056: FOR_IN
8057: IFFALSE 8233
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8059: LD_ADDR_VAR 0 22
8063: PUSH
8064: LD_INT 22
8066: PUSH
8067: LD_VAR 0 11
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PPUSH
8076: CALL_OW 69
8080: PPUSH
8081: LD_VAR 0 14
8085: PPUSH
8086: CALL_OW 74
8090: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8091: LD_ADDR_VAR 0 23
8095: PUSH
8096: LD_INT 22
8098: PUSH
8099: LD_VAR 0 11
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 2
8110: PUSH
8111: LD_INT 59
8113: PUSH
8114: EMPTY
8115: LIST
8116: PUSH
8117: LD_INT 21
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 21
8129: PUSH
8130: LD_INT 2
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: PPUSH
8150: CALL_OW 69
8154: PPUSH
8155: LD_VAR 0 14
8159: PPUSH
8160: CALL_OW 74
8164: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8165: LD_VAR 0 14
8169: PPUSH
8170: LD_VAR 0 22
8174: PPUSH
8175: CALL_OW 296
8179: PUSH
8180: LD_INT 8
8182: PLUS
8183: PUSH
8184: LD_VAR 0 14
8188: PPUSH
8189: LD_VAR 0 23
8193: PPUSH
8194: CALL_OW 296
8198: LESS
8199: IFFALSE 8217
// begin ComAttackUnit ( i , target1 ) ;
8201: LD_VAR 0 14
8205: PPUSH
8206: LD_VAR 0 22
8210: PPUSH
8211: CALL_OW 115
// end else
8215: GO 8231
// begin ComAttackUnit ( i , target2 ) ;
8217: LD_VAR 0 14
8221: PPUSH
8222: LD_VAR 0 23
8226: PPUSH
8227: CALL_OW 115
// end ; end ;
8231: GO 8056
8233: POP
8234: POP
// for i in soldiersOK_list do
8235: LD_ADDR_VAR 0 14
8239: PUSH
8240: LD_VAR 0 19
8244: PUSH
8245: FOR_IN
8246: IFFALSE 8422
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8248: LD_ADDR_VAR 0 22
8252: PUSH
8253: LD_INT 22
8255: PUSH
8256: LD_VAR 0 11
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PPUSH
8265: CALL_OW 69
8269: PPUSH
8270: LD_VAR 0 14
8274: PPUSH
8275: CALL_OW 74
8279: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8280: LD_ADDR_VAR 0 23
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_VAR 0 11
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 2
8299: PUSH
8300: LD_INT 59
8302: PUSH
8303: EMPTY
8304: LIST
8305: PUSH
8306: LD_INT 21
8308: PUSH
8309: LD_INT 1
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 21
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PUSH
8336: EMPTY
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: PPUSH
8344: LD_VAR 0 14
8348: PPUSH
8349: CALL_OW 74
8353: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8354: LD_VAR 0 14
8358: PPUSH
8359: LD_VAR 0 22
8363: PPUSH
8364: CALL_OW 296
8368: PUSH
8369: LD_INT 8
8371: PLUS
8372: PUSH
8373: LD_VAR 0 14
8377: PPUSH
8378: LD_VAR 0 23
8382: PPUSH
8383: CALL_OW 296
8387: LESS
8388: IFFALSE 8406
// begin ComAttackUnit ( i , target1 ) ;
8390: LD_VAR 0 14
8394: PPUSH
8395: LD_VAR 0 22
8399: PPUSH
8400: CALL_OW 115
// end else
8404: GO 8420
// begin ComAttackUnit ( i , target2 ) ;
8406: LD_VAR 0 14
8410: PPUSH
8411: LD_VAR 0 23
8415: PPUSH
8416: CALL_OW 115
// end ; end ;
8420: GO 8245
8422: POP
8423: POP
// until soldiersOK_list = [ ] ;
8424: LD_VAR 0 19
8428: PUSH
8429: EMPTY
8430: EQUAL
8431: IFFALSE 7809
// end ; end ;
8433: LD_VAR 0 13
8437: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8438: LD_INT 0
8440: PPUSH
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
8448: PPUSH
8449: PPUSH
8450: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8451: LD_ADDR_VAR 0 9
8455: PUSH
8456: LD_INT 22
8458: PUSH
8459: LD_VAR 0 1
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 21
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 24
8480: PUSH
8481: LD_INT 660
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 3
8490: PUSH
8491: LD_INT 58
8493: PUSH
8494: EMPTY
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 3
8503: PUSH
8504: LD_INT 34
8506: PUSH
8507: LD_INT 53
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8530: LD_ADDR_VAR 0 10
8534: PUSH
8535: LD_INT 22
8537: PUSH
8538: LD_VAR 0 1
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_INT 21
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 3
8559: PUSH
8560: LD_INT 24
8562: PUSH
8563: LD_INT 660
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: PPUSH
8579: CALL_OW 69
8583: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8584: LD_ADDR_VAR 0 11
8588: PUSH
8589: LD_VAR 0 2
8593: PPUSH
8594: LD_INT 22
8596: PUSH
8597: LD_VAR 0 1
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 21
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: LD_INT 24
8621: PUSH
8622: LD_INT 1000
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: PPUSH
8638: CALL_OW 70
8642: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8643: LD_ADDR_VAR 0 12
8647: PUSH
8648: LD_VAR 0 2
8652: PPUSH
8653: LD_INT 22
8655: PUSH
8656: LD_VAR 0 1
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PUSH
8665: LD_INT 21
8667: PUSH
8668: LD_INT 2
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 24
8677: PUSH
8678: LD_INT 1000
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 58
8687: PUSH
8688: EMPTY
8689: LIST
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 53
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: PPUSH
8715: CALL_OW 70
8719: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8720: LD_ADDR_VAR 0 13
8724: PUSH
8725: EMPTY
8726: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8727: LD_ADDR_VAR 0 14
8731: PUSH
8732: LD_VAR 0 2
8736: PPUSH
8737: LD_INT 22
8739: PUSH
8740: LD_VAR 0 1
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 25
8751: PUSH
8752: LD_INT 3
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PPUSH
8763: CALL_OW 70
8767: ST_TO_ADDR
// if damageVehicle_list > 0 then
8768: LD_VAR 0 10
8772: PUSH
8773: LD_INT 0
8775: GREATER
8776: IFFALSE 8814
// begin for i in damageVehicle_list do
8778: LD_ADDR_VAR 0 7
8782: PUSH
8783: LD_VAR 0 10
8787: PUSH
8788: FOR_IN
8789: IFFALSE 8812
// begin ComMoveXY ( i , repX , repY ) ;
8791: LD_VAR 0 7
8795: PPUSH
8796: LD_VAR 0 3
8800: PPUSH
8801: LD_VAR 0 4
8805: PPUSH
8806: CALL_OW 111
// end ;
8810: GO 8788
8812: POP
8813: POP
// end ; if vehicleNeedRepair_list > 0 then
8814: LD_VAR 0 11
8818: PUSH
8819: LD_INT 0
8821: GREATER
8822: IFFALSE 8909
// begin for i in vehicleNeedRepair_list do
8824: LD_ADDR_VAR 0 7
8828: PUSH
8829: LD_VAR 0 11
8833: PUSH
8834: FOR_IN
8835: IFFALSE 8907
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8837: LD_ADDR_VAR 0 13
8841: PUSH
8842: LD_VAR 0 13
8846: PUSH
8847: LD_VAR 0 7
8851: PPUSH
8852: CALL_OW 313
8856: ADD
8857: ST_TO_ADDR
// for j in mechanicInside_list do
8858: LD_ADDR_VAR 0 8
8862: PUSH
8863: LD_VAR 0 13
8867: PUSH
8868: FOR_IN
8869: IFFALSE 8903
// begin ComExitVehicle ( i ) ;
8871: LD_VAR 0 7
8875: PPUSH
8876: CALL_OW 121
// wait ( 0 0$1 ) ;
8880: LD_INT 35
8882: PPUSH
8883: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8887: LD_VAR 0 7
8891: PPUSH
8892: LD_VAR 0 8
8896: PPUSH
8897: CALL_OW 129
// end ;
8901: GO 8868
8903: POP
8904: POP
// end ;
8905: GO 8834
8907: POP
8908: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8909: LD_VAR 0 12
8913: PUSH
8914: LD_INT 0
8916: GREATER
8917: IFFALSE 8957
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8919: LD_VAR 0 14
8923: PUSH
8924: LD_INT 1
8926: ARRAY
8927: PPUSH
8928: LD_VAR 0 12
8932: PUSH
8933: LD_INT 1
8935: ARRAY
8936: PPUSH
8937: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8941: LD_VAR 0 12
8945: PUSH
8946: LD_INT 1
8948: ARRAY
8949: PPUSH
8950: LD_INT 100
8952: PPUSH
8953: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8957: LD_VAR 0 9
8961: PUSH
8962: LD_INT 0
8964: GREATER
8965: IFFALSE 9156
// begin for i in vehicleOK_list do
8967: LD_ADDR_VAR 0 7
8971: PUSH
8972: LD_VAR 0 9
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9154
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8980: LD_ADDR_VAR 0 15
8984: PUSH
8985: LD_INT 22
8987: PUSH
8988: LD_VAR 0 5
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PPUSH
8997: CALL_OW 69
9001: PPUSH
9002: LD_VAR 0 7
9006: PPUSH
9007: CALL_OW 74
9011: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9012: LD_ADDR_VAR 0 16
9016: PUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 5
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 59
9034: PUSH
9035: EMPTY
9036: LIST
9037: PUSH
9038: LD_INT 21
9040: PUSH
9041: LD_INT 1
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 21
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: PPUSH
9071: CALL_OW 69
9075: PPUSH
9076: LD_VAR 0 7
9080: PPUSH
9081: CALL_OW 74
9085: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9086: LD_VAR 0 7
9090: PPUSH
9091: LD_VAR 0 15
9095: PPUSH
9096: CALL_OW 296
9100: PUSH
9101: LD_INT 8
9103: PLUS
9104: PUSH
9105: LD_VAR 0 7
9109: PPUSH
9110: LD_VAR 0 16
9114: PPUSH
9115: CALL_OW 296
9119: LESS
9120: IFFALSE 9138
// begin ComAttackUnit ( i , target1 ) ;
9122: LD_VAR 0 7
9126: PPUSH
9127: LD_VAR 0 15
9131: PPUSH
9132: CALL_OW 115
// end else
9136: GO 9152
// begin ComAttackUnit ( i , target2 ) ;
9138: LD_VAR 0 7
9142: PPUSH
9143: LD_VAR 0 16
9147: PPUSH
9148: CALL_OW 115
// end ; end ;
9152: GO 8977
9154: POP
9155: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9156: LD_ADDR_VAR 0 7
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: LD_INT 22
9168: PUSH
9169: LD_VAR 0 1
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 25
9180: PUSH
9181: LD_INT 3
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 70
9196: NOT
9197: PUSH
9198: FOR_IN
9199: IFFALSE 9222
// ComMoveXY ( i , repX , repY ) ;
9201: LD_VAR 0 7
9205: PPUSH
9206: LD_VAR 0 3
9210: PPUSH
9211: LD_VAR 0 4
9215: PPUSH
9216: CALL_OW 111
9220: GO 9198
9222: POP
9223: POP
// end ;
9224: LD_VAR 0 6
9228: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9229: LD_INT 0
9231: PPUSH
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
9236: PPUSH
9237: PPUSH
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
// amChassisTab = [ ] ;
9242: LD_ADDR_VAR 0 19
9246: PUSH
9247: EMPTY
9248: ST_TO_ADDR
// arChassisTab = [ ] ;
9249: LD_ADDR_VAR 0 18
9253: PUSH
9254: EMPTY
9255: ST_TO_ADDR
// ruChassisTab = [ ] ;
9256: LD_ADDR_VAR 0 17
9260: PUSH
9261: EMPTY
9262: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9263: LD_INT 35
9265: PPUSH
9266: CALL_OW 67
// if nation = 1 then
9270: LD_VAR 0 5
9274: PUSH
9275: LD_INT 1
9277: EQUAL
9278: IFFALSE 9769
// begin uc_side = side ;
9280: LD_ADDR_OWVAR 20
9284: PUSH
9285: LD_VAR 0 2
9289: ST_TO_ADDR
// uc_nation = nation ;
9290: LD_ADDR_OWVAR 21
9294: PUSH
9295: LD_VAR 0 5
9299: ST_TO_ADDR
// vc_engine = vehengine ;
9300: LD_ADDR_OWVAR 39
9304: PUSH
9305: LD_VAR 0 6
9309: ST_TO_ADDR
// vc_control = vehcontrol ;
9310: LD_ADDR_OWVAR 38
9314: PUSH
9315: LD_VAR 0 7
9319: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9320: LD_ADDR_OWVAR 40
9324: PUSH
9325: LD_VAR 0 10
9329: PUSH
9330: LD_INT 1
9332: PPUSH
9333: LD_VAR 0 10
9337: PPUSH
9338: CALL_OW 12
9342: ARRAY
9343: ST_TO_ADDR
// for j = 1 to AMWeapon do
9344: LD_ADDR_VAR 0 14
9348: PUSH
9349: DOUBLE
9350: LD_INT 1
9352: DEC
9353: ST_TO_ADDR
9354: LD_VAR 0 10
9358: PUSH
9359: FOR_TO
9360: IFFALSE 9661
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9362: LD_VAR 0 10
9366: PUSH
9367: LD_VAR 0 14
9371: ARRAY
9372: PUSH
9373: LD_INT 2
9375: EQUAL
9376: PUSH
9377: LD_VAR 0 10
9381: PUSH
9382: LD_VAR 0 14
9386: ARRAY
9387: PUSH
9388: LD_INT 3
9390: EQUAL
9391: OR
9392: IFFALSE 9445
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9394: LD_ADDR_VAR 0 19
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: LD_INT 2
9404: PUSH
9405: LD_INT 3
9407: PUSH
9408: LD_INT 4
9410: PUSH
9411: LD_INT 5
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9421: LD_ADDR_OWVAR 37
9425: PUSH
9426: LD_VAR 0 19
9430: PUSH
9431: LD_INT 1
9433: PPUSH
9434: LD_VAR 0 19
9438: PPUSH
9439: CALL_OW 12
9443: ARRAY
9444: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9445: LD_VAR 0 10
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PUSH
9456: LD_INT 4
9458: EQUAL
9459: PUSH
9460: LD_VAR 0 10
9464: PUSH
9465: LD_VAR 0 14
9469: ARRAY
9470: PUSH
9471: LD_INT 5
9473: EQUAL
9474: OR
9475: PUSH
9476: LD_VAR 0 10
9480: PUSH
9481: LD_VAR 0 14
9485: ARRAY
9486: PUSH
9487: LD_INT 9
9489: EQUAL
9490: OR
9491: PUSH
9492: LD_VAR 0 10
9496: PUSH
9497: LD_VAR 0 14
9501: ARRAY
9502: PUSH
9503: LD_INT 11
9505: EQUAL
9506: OR
9507: PUSH
9508: LD_VAR 0 10
9512: PUSH
9513: LD_VAR 0 14
9517: ARRAY
9518: PUSH
9519: LD_INT 7
9521: EQUAL
9522: OR
9523: IFFALSE 9572
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9525: LD_ADDR_VAR 0 19
9529: PUSH
9530: LD_INT 2
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: LD_INT 4
9538: PUSH
9539: LD_INT 5
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9548: LD_ADDR_OWVAR 37
9552: PUSH
9553: LD_VAR 0 19
9557: PUSH
9558: LD_INT 1
9560: PPUSH
9561: LD_VAR 0 19
9565: PPUSH
9566: CALL_OW 12
9570: ARRAY
9571: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9572: LD_VAR 0 10
9576: PUSH
9577: LD_VAR 0 14
9581: ARRAY
9582: PUSH
9583: LD_INT 8
9585: EQUAL
9586: PUSH
9587: LD_VAR 0 10
9591: PUSH
9592: LD_VAR 0 14
9596: ARRAY
9597: PUSH
9598: LD_INT 6
9600: EQUAL
9601: OR
9602: PUSH
9603: LD_VAR 0 10
9607: PUSH
9608: LD_VAR 0 14
9612: ARRAY
9613: PUSH
9614: LD_INT 10
9616: EQUAL
9617: OR
9618: IFFALSE 9659
// begin amChassisTab = [ 4 , 5 ] ;
9620: LD_ADDR_VAR 0 19
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9635: LD_ADDR_OWVAR 37
9639: PUSH
9640: LD_VAR 0 19
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_VAR 0 19
9652: PPUSH
9653: CALL_OW 12
9657: ARRAY
9658: ST_TO_ADDR
// end ; end ;
9659: GO 9359
9661: POP
9662: POP
// veh = CreateVehicle ;
9663: LD_ADDR_VAR 0 16
9667: PUSH
9668: CALL_OW 45
9672: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9673: LD_VAR 0 16
9677: PPUSH
9678: LD_VAR 0 1
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 49
// if vehControl = 1 then
9690: LD_VAR 0 7
9694: PUSH
9695: LD_INT 1
9697: EQUAL
9698: IFFALSE 9755
// begin hc_gallery =  ;
9700: LD_ADDR_OWVAR 33
9704: PUSH
9705: LD_STRING 
9707: ST_TO_ADDR
// hc_name =  ;
9708: LD_ADDR_OWVAR 26
9712: PUSH
9713: LD_STRING 
9715: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9716: LD_INT 0
9718: PPUSH
9719: LD_INT 3
9721: PPUSH
9722: LD_VAR 0 4
9726: PPUSH
9727: CALL_OW 380
// un = CreateHuman ;
9731: LD_ADDR_VAR 0 15
9735: PUSH
9736: CALL_OW 44
9740: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9741: LD_VAR 0 15
9745: PPUSH
9746: LD_VAR 0 16
9750: PPUSH
9751: CALL_OW 52
// end ; i = i + 1 ;
9755: LD_ADDR_VAR 0 13
9759: PUSH
9760: LD_VAR 0 13
9764: PUSH
9765: LD_INT 1
9767: PLUS
9768: ST_TO_ADDR
// end ; if nation = 2 then
9769: LD_VAR 0 5
9773: PUSH
9774: LD_INT 2
9776: EQUAL
9777: IFFALSE 10201
// begin uc_side = side ;
9779: LD_ADDR_OWVAR 20
9783: PUSH
9784: LD_VAR 0 2
9788: ST_TO_ADDR
// uc_nation = nation ;
9789: LD_ADDR_OWVAR 21
9793: PUSH
9794: LD_VAR 0 5
9798: ST_TO_ADDR
// vc_engine = vehengine ;
9799: LD_ADDR_OWVAR 39
9803: PUSH
9804: LD_VAR 0 6
9808: ST_TO_ADDR
// vc_control = vehcontrol ;
9809: LD_ADDR_OWVAR 38
9813: PUSH
9814: LD_VAR 0 7
9818: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9819: LD_ADDR_OWVAR 40
9823: PUSH
9824: LD_VAR 0 9
9828: PUSH
9829: LD_INT 1
9831: PPUSH
9832: LD_VAR 0 9
9836: PPUSH
9837: CALL_OW 12
9841: ARRAY
9842: ST_TO_ADDR
// for j = 1 to ARWeapons do
9843: LD_ADDR_VAR 0 14
9847: PUSH
9848: DOUBLE
9849: LD_INT 1
9851: DEC
9852: ST_TO_ADDR
9853: LD_VAR 0 9
9857: PUSH
9858: FOR_TO
9859: IFFALSE 10093
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9861: LD_VAR 0 9
9865: PUSH
9866: LD_VAR 0 14
9870: ARRAY
9871: PUSH
9872: LD_INT 24
9874: EQUAL
9875: PUSH
9876: LD_VAR 0 9
9880: PUSH
9881: LD_VAR 0 14
9885: ARRAY
9886: PUSH
9887: LD_INT 22
9889: EQUAL
9890: OR
9891: PUSH
9892: LD_VAR 0 9
9896: PUSH
9897: LD_VAR 0 14
9901: ARRAY
9902: PUSH
9903: LD_INT 23
9905: EQUAL
9906: OR
9907: PUSH
9908: LD_VAR 0 9
9912: PUSH
9913: LD_VAR 0 14
9917: ARRAY
9918: PUSH
9919: LD_INT 30
9921: EQUAL
9922: OR
9923: IFFALSE 9972
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9925: LD_ADDR_VAR 0 18
9929: PUSH
9930: LD_INT 11
9932: PUSH
9933: LD_INT 12
9935: PUSH
9936: LD_INT 13
9938: PUSH
9939: LD_INT 14
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9948: LD_ADDR_OWVAR 37
9952: PUSH
9953: LD_VAR 0 18
9957: PUSH
9958: LD_INT 1
9960: PPUSH
9961: LD_VAR 0 18
9965: PPUSH
9966: CALL_OW 12
9970: ARRAY
9971: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9972: LD_VAR 0 9
9976: PUSH
9977: LD_VAR 0 14
9981: ARRAY
9982: PUSH
9983: LD_INT 29
9985: EQUAL
9986: PUSH
9987: LD_VAR 0 9
9991: PUSH
9992: LD_VAR 0 14
9996: ARRAY
9997: PUSH
9998: LD_INT 28
10000: EQUAL
10001: OR
10002: PUSH
10003: LD_VAR 0 9
10007: PUSH
10008: LD_VAR 0 14
10012: ARRAY
10013: PUSH
10014: LD_INT 27
10016: EQUAL
10017: OR
10018: PUSH
10019: LD_VAR 0 9
10023: PUSH
10024: LD_VAR 0 14
10028: ARRAY
10029: PUSH
10030: LD_INT 26
10032: EQUAL
10033: OR
10034: PUSH
10035: LD_VAR 0 9
10039: PUSH
10040: LD_VAR 0 14
10044: ARRAY
10045: PUSH
10046: LD_INT 25
10048: EQUAL
10049: OR
10050: IFFALSE 10091
// begin arChassisTab = [ 13 , 14 ] ;
10052: LD_ADDR_VAR 0 18
10056: PUSH
10057: LD_INT 13
10059: PUSH
10060: LD_INT 14
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10067: LD_ADDR_OWVAR 37
10071: PUSH
10072: LD_VAR 0 18
10076: PUSH
10077: LD_INT 1
10079: PPUSH
10080: LD_VAR 0 18
10084: PPUSH
10085: CALL_OW 12
10089: ARRAY
10090: ST_TO_ADDR
// end ; end ;
10091: GO 9858
10093: POP
10094: POP
// veh = CreateVehicle ;
10095: LD_ADDR_VAR 0 16
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10105: LD_VAR 0 16
10109: PPUSH
10110: LD_VAR 0 1
10114: PPUSH
10115: LD_INT 0
10117: PPUSH
10118: CALL_OW 49
// if vehcontrol = 1 then
10122: LD_VAR 0 7
10126: PUSH
10127: LD_INT 1
10129: EQUAL
10130: IFFALSE 10187
// begin hc_gallery =  ;
10132: LD_ADDR_OWVAR 33
10136: PUSH
10137: LD_STRING 
10139: ST_TO_ADDR
// hc_name =  ;
10140: LD_ADDR_OWVAR 26
10144: PUSH
10145: LD_STRING 
10147: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10148: LD_INT 0
10150: PPUSH
10151: LD_INT 3
10153: PPUSH
10154: LD_VAR 0 4
10158: PPUSH
10159: CALL_OW 380
// un = CreateHuman ;
10163: LD_ADDR_VAR 0 15
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10173: LD_VAR 0 15
10177: PPUSH
10178: LD_VAR 0 16
10182: PPUSH
10183: CALL_OW 52
// end ; i = i + 1 ;
10187: LD_ADDR_VAR 0 13
10191: PUSH
10192: LD_VAR 0 13
10196: PUSH
10197: LD_INT 1
10199: PLUS
10200: ST_TO_ADDR
// end ; if nation = 3 then
10201: LD_VAR 0 5
10205: PUSH
10206: LD_INT 3
10208: EQUAL
10209: IFFALSE 10601
// begin uc_side = side ;
10211: LD_ADDR_OWVAR 20
10215: PUSH
10216: LD_VAR 0 2
10220: ST_TO_ADDR
// uc_nation = nation ;
10221: LD_ADDR_OWVAR 21
10225: PUSH
10226: LD_VAR 0 5
10230: ST_TO_ADDR
// vc_engine = vehengine ;
10231: LD_ADDR_OWVAR 39
10235: PUSH
10236: LD_VAR 0 6
10240: ST_TO_ADDR
// vc_control = vehcontrol ;
10241: LD_ADDR_OWVAR 38
10245: PUSH
10246: LD_VAR 0 7
10250: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10251: LD_ADDR_OWVAR 40
10255: PUSH
10256: LD_VAR 0 8
10260: PUSH
10261: LD_INT 1
10263: PPUSH
10264: LD_VAR 0 8
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: ST_TO_ADDR
// for j = 1 to RuWeapons do
10275: LD_ADDR_VAR 0 14
10279: PUSH
10280: DOUBLE
10281: LD_INT 1
10283: DEC
10284: ST_TO_ADDR
10285: LD_VAR 0 8
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10493
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10293: LD_VAR 0 8
10297: PUSH
10298: LD_VAR 0 14
10302: ARRAY
10303: PUSH
10304: LD_INT 42
10306: EQUAL
10307: PUSH
10308: LD_VAR 0 8
10312: PUSH
10313: LD_VAR 0 14
10317: ARRAY
10318: PUSH
10319: LD_INT 43
10321: EQUAL
10322: OR
10323: PUSH
10324: LD_VAR 0 8
10328: PUSH
10329: LD_VAR 0 14
10333: ARRAY
10334: PUSH
10335: LD_INT 44
10337: EQUAL
10338: OR
10339: PUSH
10340: LD_VAR 0 8
10344: PUSH
10345: LD_VAR 0 14
10349: ARRAY
10350: PUSH
10351: LD_INT 45
10353: EQUAL
10354: OR
10355: PUSH
10356: LD_VAR 0 8
10360: PUSH
10361: LD_VAR 0 14
10365: ARRAY
10366: PUSH
10367: LD_INT 49
10369: EQUAL
10370: OR
10371: IFFALSE 10420
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10373: LD_ADDR_VAR 0 17
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 22
10383: PUSH
10384: LD_INT 23
10386: PUSH
10387: LD_INT 24
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10396: LD_ADDR_OWVAR 37
10400: PUSH
10401: LD_VAR 0 17
10405: PUSH
10406: LD_INT 1
10408: PPUSH
10409: LD_VAR 0 17
10413: PPUSH
10414: CALL_OW 12
10418: ARRAY
10419: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10420: LD_VAR 0 8
10424: PUSH
10425: LD_VAR 0 14
10429: ARRAY
10430: PUSH
10431: LD_INT 46
10433: EQUAL
10434: PUSH
10435: LD_VAR 0 8
10439: PUSH
10440: LD_VAR 0 14
10444: ARRAY
10445: PUSH
10446: LD_INT 47
10448: EQUAL
10449: OR
10450: IFFALSE 10491
// begin ruChassisTab = [ 23 , 24 ] ;
10452: LD_ADDR_VAR 0 17
10456: PUSH
10457: LD_INT 23
10459: PUSH
10460: LD_INT 24
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10467: LD_ADDR_OWVAR 37
10471: PUSH
10472: LD_VAR 0 17
10476: PUSH
10477: LD_INT 1
10479: PPUSH
10480: LD_VAR 0 17
10484: PPUSH
10485: CALL_OW 12
10489: ARRAY
10490: ST_TO_ADDR
// end ; end ;
10491: GO 10290
10493: POP
10494: POP
// veh = CreateVehicle ;
10495: LD_ADDR_VAR 0 16
10499: PUSH
10500: CALL_OW 45
10504: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10505: LD_VAR 0 16
10509: PPUSH
10510: LD_VAR 0 1
10514: PPUSH
10515: LD_INT 0
10517: PPUSH
10518: CALL_OW 49
// if vehcontrol = 1 then
10522: LD_VAR 0 7
10526: PUSH
10527: LD_INT 1
10529: EQUAL
10530: IFFALSE 10587
// begin hc_gallery =  ;
10532: LD_ADDR_OWVAR 33
10536: PUSH
10537: LD_STRING 
10539: ST_TO_ADDR
// hc_name =  ;
10540: LD_ADDR_OWVAR 26
10544: PUSH
10545: LD_STRING 
10547: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10548: LD_INT 0
10550: PPUSH
10551: LD_INT 3
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 380
// un = CreateHuman ;
10563: LD_ADDR_VAR 0 15
10567: PUSH
10568: CALL_OW 44
10572: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10573: LD_VAR 0 15
10577: PPUSH
10578: LD_VAR 0 16
10582: PPUSH
10583: CALL_OW 52
// end ; i = i + 1 ;
10587: LD_ADDR_VAR 0 13
10591: PUSH
10592: LD_VAR 0 13
10596: PUSH
10597: LD_INT 1
10599: PLUS
10600: ST_TO_ADDR
// end ; until i = vehCount ;
10601: LD_VAR 0 13
10605: PUSH
10606: LD_VAR 0 3
10610: EQUAL
10611: IFFALSE 9263
// repeat wait ( 0 0$1 ) ;
10613: LD_INT 35
10615: PPUSH
10616: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10620: LD_ADDR_VAR 0 20
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_VAR 0 2
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 21
10639: PUSH
10640: LD_INT 2
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 24
10649: PUSH
10650: LD_INT 661
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: PPUSH
10662: CALL_OW 69
10666: ST_TO_ADDR
// if vehicleOK_list > 0 then
10667: LD_VAR 0 20
10671: PUSH
10672: LD_INT 0
10674: GREATER
10675: IFFALSE 10866
// begin for i in vehicleOK_list do
10677: LD_ADDR_VAR 0 13
10681: PUSH
10682: LD_VAR 0 20
10686: PUSH
10687: FOR_IN
10688: IFFALSE 10864
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10690: LD_ADDR_VAR 0 21
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_VAR 0 11
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PPUSH
10707: CALL_OW 69
10711: PPUSH
10712: LD_VAR 0 13
10716: PPUSH
10717: CALL_OW 74
10721: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10722: LD_ADDR_VAR 0 22
10726: PUSH
10727: LD_INT 22
10729: PUSH
10730: LD_VAR 0 11
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 2
10741: PUSH
10742: LD_INT 59
10744: PUSH
10745: EMPTY
10746: LIST
10747: PUSH
10748: LD_INT 21
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 21
10760: PUSH
10761: LD_INT 2
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: EMPTY
10779: LIST
10780: PPUSH
10781: CALL_OW 69
10785: PPUSH
10786: LD_VAR 0 13
10790: PPUSH
10791: CALL_OW 74
10795: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10796: LD_VAR 0 13
10800: PPUSH
10801: LD_VAR 0 21
10805: PPUSH
10806: CALL_OW 296
10810: PUSH
10811: LD_INT 8
10813: PLUS
10814: PUSH
10815: LD_VAR 0 13
10819: PPUSH
10820: LD_VAR 0 22
10824: PPUSH
10825: CALL_OW 296
10829: LESS
10830: IFFALSE 10848
// begin ComAttackUnit ( i , target1 ) ;
10832: LD_VAR 0 13
10836: PPUSH
10837: LD_VAR 0 21
10841: PPUSH
10842: CALL_OW 115
// end else
10846: GO 10862
// begin ComAttackUnit ( i , target2 ) ;
10848: LD_VAR 0 13
10852: PPUSH
10853: LD_VAR 0 22
10857: PPUSH
10858: CALL_OW 115
// end ; end ;
10862: GO 10687
10864: POP
10865: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10866: LD_INT 22
10868: PUSH
10869: LD_VAR 0 2
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 21
10880: PUSH
10881: LD_INT 2
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PPUSH
10892: CALL_OW 69
10896: PUSH
10897: LD_INT 0
10899: EQUAL
10900: IFFALSE 10613
// end ; end_of_file
10902: LD_VAR 0 12
10906: RET
// every 1 do var i , gammaSquad , startX , startY ;
10907: GO 10909
10909: DISABLE
10910: LD_INT 0
10912: PPUSH
10913: PPUSH
10914: PPUSH
10915: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10916: LD_ADDR_VAR 0 2
10920: PUSH
10921: LD_EXP 8
10925: PUSH
10926: LD_EXP 9
10930: PUSH
10931: LD_EXP 10
10935: PUSH
10936: LD_EXP 11
10940: PUSH
10941: LD_EXP 12
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10953: LD_ADDR_VAR 0 3
10957: PUSH
10958: LD_INT 46
10960: PUSH
10961: LD_INT 45
10963: PUSH
10964: LD_INT 44
10966: PUSH
10967: LD_INT 43
10969: PUSH
10970: LD_INT 42
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10980: LD_ADDR_VAR 0 4
10984: PUSH
10985: LD_INT 14
10987: PUSH
10988: LD_INT 12
10990: PUSH
10991: LD_INT 10
10993: PUSH
10994: LD_INT 8
10996: PUSH
10997: LD_INT 6
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11007: LD_INT 32
11009: PPUSH
11010: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11014: LD_INT 32
11016: PPUSH
11017: LD_INT 51
11019: PPUSH
11020: LD_INT 26
11022: PPUSH
11023: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11027: LD_INT 32
11029: PPUSH
11030: LD_INT 53
11032: PPUSH
11033: LD_INT 23
11035: PPUSH
11036: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11040: LD_INT 32
11042: PPUSH
11043: LD_INT 52
11045: PPUSH
11046: LD_INT 19
11048: PPUSH
11049: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11053: LD_INT 35
11055: PPUSH
11056: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11060: LD_INT 32
11062: PPUSH
11063: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11067: LD_INT 32
11069: PPUSH
11070: CALL_OW 250
11074: PUSH
11075: LD_INT 52
11077: EQUAL
11078: PUSH
11079: LD_INT 32
11081: PPUSH
11082: CALL_OW 251
11086: PUSH
11087: LD_INT 19
11089: EQUAL
11090: AND
11091: IFFALSE 11053
// ComExitVehicle ( JMM ) ;
11093: LD_EXP 1
11097: PPUSH
11098: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11102: LD_EXP 7
11106: PPUSH
11107: LD_EXP 1
11111: PPUSH
11112: CALL_OW 119
// wait ( 0 0$01 ) ;
11116: LD_INT 35
11118: PPUSH
11119: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11123: LD_EXP 1
11127: PPUSH
11128: LD_INT 46
11130: PPUSH
11131: LD_INT 10
11133: PPUSH
11134: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11138: LD_EXP 1
11142: PPUSH
11143: LD_EXP 7
11147: PPUSH
11148: CALL_OW 179
// wait ( 0 0$4 ) ;
11152: LD_INT 140
11154: PPUSH
11155: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11159: LD_EXP 1
11163: PPUSH
11164: LD_STRING D1-JMM-1
11166: PPUSH
11167: CALL_OW 88
// if not dialogue_skipped then
11171: LD_OWVAR 59
11175: NOT
11176: IFFALSE 11833
// begin for i := 1 to gammaSquad do
11178: LD_ADDR_VAR 0 1
11182: PUSH
11183: DOUBLE
11184: LD_INT 1
11186: DEC
11187: ST_TO_ADDR
11188: LD_VAR 0 2
11192: PUSH
11193: FOR_TO
11194: IFFALSE 11255
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11196: LD_VAR 0 2
11200: PUSH
11201: LD_VAR 0 1
11205: ARRAY
11206: PPUSH
11207: LD_VAR 0 3
11211: PUSH
11212: LD_VAR 0 1
11216: ARRAY
11217: PPUSH
11218: LD_VAR 0 4
11222: PUSH
11223: LD_VAR 0 1
11227: ARRAY
11228: PPUSH
11229: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11233: LD_VAR 0 2
11237: PUSH
11238: LD_VAR 0 1
11242: ARRAY
11243: PPUSH
11244: LD_EXP 1
11248: PPUSH
11249: CALL_OW 179
// end ;
11253: GO 11193
11255: POP
11256: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11257: LD_EXP 4
11261: PPUSH
11262: LD_INT 41
11264: PPUSH
11265: LD_INT 4
11267: PPUSH
11268: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11272: LD_EXP 4
11276: PPUSH
11277: LD_EXP 1
11281: PPUSH
11282: CALL_OW 179
// if Lisa = false and Bobby then
11286: LD_EXP 4
11290: PUSH
11291: LD_INT 0
11293: EQUAL
11294: PUSH
11295: LD_EXP 2
11299: AND
11300: IFFALSE 11331
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11302: LD_EXP 2
11306: PPUSH
11307: LD_INT 41
11309: PPUSH
11310: LD_INT 4
11312: PPUSH
11313: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11317: LD_EXP 2
11321: PPUSH
11322: LD_EXP 1
11326: PPUSH
11327: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11331: LD_EXP 4
11335: PUSH
11336: LD_INT 0
11338: EQUAL
11339: PUSH
11340: LD_EXP 2
11344: PUSH
11345: LD_INT 0
11347: EQUAL
11348: AND
11349: PUSH
11350: LD_EXP 3
11354: AND
11355: IFFALSE 11386
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11357: LD_EXP 3
11361: PPUSH
11362: LD_INT 41
11364: PPUSH
11365: LD_INT 4
11367: PPUSH
11368: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11372: LD_EXP 3
11376: PPUSH
11377: LD_EXP 1
11381: PPUSH
11382: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11386: LD_EXP 4
11390: PUSH
11391: LD_INT 0
11393: EQUAL
11394: PUSH
11395: LD_EXP 2
11399: PUSH
11400: LD_INT 0
11402: EQUAL
11403: AND
11404: PUSH
11405: LD_EXP 3
11409: PUSH
11410: LD_INT 0
11412: EQUAL
11413: AND
11414: IFFALSE 11445
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11416: LD_EXP 6
11420: PPUSH
11421: LD_INT 41
11423: PPUSH
11424: LD_INT 4
11426: PPUSH
11427: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11431: LD_EXP 6
11435: PPUSH
11436: LD_EXP 1
11440: PPUSH
11441: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11445: LD_EXP 7
11449: PPUSH
11450: LD_STRING D1-Brown-1
11452: PPUSH
11453: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11457: LD_EXP 1
11461: PPUSH
11462: LD_STRING D1-JMM-2
11464: PPUSH
11465: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11469: LD_EXP 7
11473: PPUSH
11474: LD_STRING D1-Brown-2
11476: PPUSH
11477: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11481: LD_EXP 1
11485: PPUSH
11486: LD_EXP 9
11490: PPUSH
11491: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11495: LD_EXP 9
11499: PPUSH
11500: LD_STRING D1-FSol1-2
11502: PPUSH
11503: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11507: LD_EXP 1
11511: PPUSH
11512: LD_EXP 8
11516: PPUSH
11517: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11521: LD_EXP 8
11525: PPUSH
11526: LD_STRING D1-Sol2-2
11528: PPUSH
11529: CALL_OW 88
// if Lisa then
11533: LD_EXP 4
11537: IFFALSE 11577
// begin ComTurnUnit ( JMM , Lisa ) ;
11539: LD_EXP 1
11543: PPUSH
11544: LD_EXP 4
11548: PPUSH
11549: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11553: LD_EXP 4
11557: PPUSH
11558: LD_STRING D1-Lisa-2
11560: PPUSH
11561: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11565: LD_EXP 1
11569: PPUSH
11570: LD_STRING D1-JMM-3
11572: PPUSH
11573: CALL_OW 88
// end ; if Bobby then
11577: LD_EXP 2
11581: IFFALSE 11621
// begin ComTurnUnit ( JMM , Bobby ) ;
11583: LD_EXP 1
11587: PPUSH
11588: LD_EXP 2
11592: PPUSH
11593: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11597: LD_EXP 2
11601: PPUSH
11602: LD_STRING D1-Bobby-2
11604: PPUSH
11605: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11609: LD_EXP 1
11613: PPUSH
11614: LD_STRING D1-JMM-3
11616: PPUSH
11617: CALL_OW 88
// end ; if Cyrus then
11621: LD_EXP 3
11625: IFFALSE 11665
// begin ComTurnUnit ( JMM , Cyrus ) ;
11627: LD_EXP 1
11631: PPUSH
11632: LD_EXP 3
11636: PPUSH
11637: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11641: LD_EXP 3
11645: PPUSH
11646: LD_STRING D1-Cyrus-2
11648: PPUSH
11649: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11653: LD_EXP 1
11657: PPUSH
11658: LD_STRING D1-JMM-3
11660: PPUSH
11661: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11665: LD_EXP 1
11669: PPUSH
11670: LD_EXP 7
11674: PPUSH
11675: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11679: LD_EXP 1
11683: PPUSH
11684: LD_STRING D1-JMM-3a
11686: PPUSH
11687: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11691: LD_EXP 7
11695: PPUSH
11696: LD_INT 38
11698: PPUSH
11699: LD_INT 5
11701: PPUSH
11702: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11706: LD_EXP 7
11710: PPUSH
11711: LD_EXP 1
11715: PPUSH
11716: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11720: LD_EXP 1
11724: PPUSH
11725: LD_INT 40
11727: PPUSH
11728: LD_INT 7
11730: PPUSH
11731: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11735: LD_EXP 1
11739: PPUSH
11740: LD_EXP 7
11744: PPUSH
11745: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11749: LD_EXP 7
11753: PPUSH
11754: LD_STRING D1-Brown-3
11756: PPUSH
11757: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11761: LD_EXP 14
11765: PPUSH
11766: LD_STRING D1-Har-3
11768: PPUSH
11769: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11773: LD_EXP 1
11777: PPUSH
11778: LD_STRING D1-JMM-4
11780: PPUSH
11781: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11785: LD_EXP 14
11789: PPUSH
11790: LD_STRING D1-Har-4
11792: PPUSH
11793: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11797: LD_EXP 1
11801: PPUSH
11802: LD_STRING D1-JMM-5
11804: PPUSH
11805: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11809: LD_EXP 14
11813: PPUSH
11814: LD_STRING D1-Har-5
11816: PPUSH
11817: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11821: LD_EXP 1
11825: PPUSH
11826: LD_STRING D1-JMM-6
11828: PPUSH
11829: CALL_OW 88
// end ; InGameOff ;
11833: CALL_OW 9
// PrepareRussianConvoy ;
11837: CALL 2748 0 0
// ChangeMissionObjectives ( M1 ) ;
11841: LD_STRING M1
11843: PPUSH
11844: CALL_OW 337
// SaveForQuickRestart ;
11848: CALL_OW 22
// timerStatus = 1 ;
11852: LD_ADDR_EXP 27
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// startTimer = 1 ;
11860: LD_ADDR_EXP 28
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// bonusAvalaible = 1 ;
11868: LD_ADDR_EXP 40
11872: PUSH
11873: LD_INT 1
11875: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11876: LD_INT 105
11878: PPUSH
11879: CALL_OW 67
// DialogueOn ;
11883: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11887: LD_EXP 12
11891: PPUSH
11892: LD_STRING D9-Mech1-1
11894: PPUSH
11895: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11899: LD_EXP 1
11903: PPUSH
11904: LD_STRING D9-JMM-1
11906: PPUSH
11907: CALL_OW 88
// DialogueOff ;
11911: CALL_OW 7
// end ;
11915: PPOPN 4
11917: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11918: LD_INT 47
11920: PPUSH
11921: LD_INT 1
11923: PPUSH
11924: CALL_OW 321
11928: PUSH
11929: LD_INT 2
11931: EQUAL
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_INT 1
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 21
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 30
11955: PUSH
11956: LD_INT 3
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: PPUSH
11968: CALL_OW 69
11972: PUSH
11973: LD_INT 0
11975: GREATER
11976: AND
11977: IFFALSE 12207
11979: GO 11981
11981: DISABLE
// begin if IsOk ( Campell ) then
11982: LD_EXP 12
11986: PPUSH
11987: CALL_OW 302
11991: IFFALSE 12007
// begin Say ( Campell , D10-Mech1-1 ) ;
11993: LD_EXP 12
11997: PPUSH
11998: LD_STRING D10-Mech1-1
12000: PPUSH
12001: CALL_OW 88
// end else
12005: GO 12207
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12007: LD_INT 22
12009: PUSH
12010: LD_INT 1
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 21
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 25
12029: PUSH
12030: LD_INT 3
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 26
12039: PUSH
12040: LD_INT 1
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: PUSH
12058: LD_EXP 1
12062: PUSH
12063: EMPTY
12064: LIST
12065: PUSH
12066: LD_INT 0
12068: GREATER
12069: DIFF
12070: IFFALSE 12144
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12072: LD_INT 22
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 21
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 25
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 26
12104: PUSH
12105: LD_INT 1
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 69
12122: PUSH
12123: LD_EXP 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: DIFF
12131: PPUSH
12132: LD_STRING D10-Mech1-1
12134: PPUSH
12135: LD_STRING D10-Mech1-1
12137: PPUSH
12138: CALL 3984 0 3
// end else
12142: GO 12207
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12144: LD_INT 22
12146: PUSH
12147: LD_INT 1
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 21
12156: PUSH
12157: LD_INT 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 26
12166: PUSH
12167: LD_INT 1
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 1
12181: ARRAY
12182: PPUSH
12183: CALL_OW 69
12187: PUSH
12188: LD_EXP 1
12192: PUSH
12193: EMPTY
12194: LIST
12195: DIFF
12196: PPUSH
12197: LD_STRING D10-Mech1-1
12199: PPUSH
12200: LD_STRING D10-Mech1-1
12202: PPUSH
12203: CALL 3984 0 3
// end ; end ; end ;
12207: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12208: LD_INT 22
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: PUSH
12237: LD_INT 0
12239: GREATER
12240: PUSH
12241: LD_EXP 30
12245: PUSH
12246: LD_INT 0
12248: EQUAL
12249: AND
12250: IFFALSE 12490
12252: GO 12254
12254: DISABLE
// begin if IsOK ( Claptopn ) then
12255: LD_EXP 11
12259: PPUSH
12260: CALL_OW 302
12264: IFFALSE 12280
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12266: LD_EXP 11
12270: PPUSH
12271: LD_STRING D9b-Eng1-1
12273: PPUSH
12274: CALL_OW 88
// end else
12278: GO 12476
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12280: LD_INT 22
12282: PUSH
12283: LD_INT 1
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 21
12292: PUSH
12293: LD_INT 1
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 25
12302: PUSH
12303: LD_INT 3
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 26
12312: PUSH
12313: LD_INT 1
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: PUSH
12331: LD_EXP 1
12335: PUSH
12336: EMPTY
12337: LIST
12338: PUSH
12339: LD_INT 0
12341: GREATER
12342: DIFF
12343: IFFALSE 12417
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12345: LD_INT 22
12347: PUSH
12348: LD_INT 1
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 21
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 25
12367: PUSH
12368: LD_INT 2
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 26
12377: PUSH
12378: LD_INT 1
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL_OW 69
12395: PUSH
12396: LD_EXP 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: DIFF
12404: PPUSH
12405: LD_STRING D9b-Eng1-1
12407: PPUSH
12408: LD_STRING D9b-Eng1-11
12410: PPUSH
12411: CALL 3984 0 3
// end else
12415: GO 12476
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12417: LD_INT 22
12419: PUSH
12420: LD_INT 1
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 26
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: PPUSH
12452: CALL_OW 69
12456: PUSH
12457: LD_EXP 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: DIFF
12465: PPUSH
12466: LD_STRING D9b-Eng1-1
12468: PPUSH
12469: LD_STRING D9b-Eng1-1
12471: PPUSH
12472: CALL 3984 0 3
// end ; end ; if energyVDialog = 0 then
12476: LD_EXP 31
12480: PUSH
12481: LD_INT 0
12483: EQUAL
12484: IFFALSE 12490
// EnergyDialog ;
12486: CALL 4296 0 0
// end ;
12490: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12491: LD_EXP 32
12495: PUSH
12496: LD_INT 1
12498: EQUAL
12499: PUSH
12500: LD_EXP 33
12504: PUSH
12505: LD_INT 1
12507: EQUAL
12508: AND
12509: IFFALSE 12521
12511: GO 12513
12513: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12514: LD_STRING M1a
12516: PPUSH
12517: CALL_OW 337
12521: END
// every 3 3$0 do
12522: GO 12524
12524: DISABLE
// begin PrepareFirstAttack ;
12525: CALL 3540 0 0
// end ;
12529: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
12530: LD_INT 22
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 21
12542: PUSH
12543: LD_INT 1
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 69
12558: PUSH
12559: LD_INT 3
12561: LESSEQUAL
12562: PUSH
12563: LD_EXP 21
12567: PUSH
12568: LD_INT 1
12570: EQUAL
12571: AND
12572: IFFALSE 12890
12574: GO 12576
12576: DISABLE
12577: LD_INT 0
12579: PPUSH
// begin firstRussianAttack = 2 ;
12580: LD_ADDR_EXP 21
12584: PUSH
12585: LD_INT 2
12587: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12588: LD_ADDR_VAR 0 1
12592: PUSH
12593: LD_INT 22
12595: PUSH
12596: LD_INT 5
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: LD_INT 21
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PPUSH
12617: CALL_OW 69
12621: PUSH
12622: FOR_IN
12623: IFFALSE 12642
// ComMoveXY ( i , 125 , 98 ) ;
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_INT 125
12632: PPUSH
12633: LD_INT 98
12635: PPUSH
12636: CALL_OW 111
12640: GO 12622
12642: POP
12643: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12644: LD_INT 22
12646: PUSH
12647: LD_INT 1
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 21
12656: PUSH
12657: LD_INT 1
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PPUSH
12668: CALL_OW 69
12672: PUSH
12673: LD_EXP 1
12677: PUSH
12678: LD_EXP 7
12682: PUSH
12683: LD_EXP 4
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: DIFF
12693: PPUSH
12694: LD_STRING DAtt1-Sol1-1
12696: PPUSH
12697: LD_STRING DAtt1-FSol1-1
12699: PPUSH
12700: CALL 3984 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12704: LD_EXP 1
12708: PPUSH
12709: LD_STRING DAtt1-JMM-1
12711: PPUSH
12712: CALL_OW 88
// if Lisa then
12716: LD_EXP 4
12720: IFFALSE 12736
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12722: LD_EXP 4
12726: PPUSH
12727: LD_STRING DAtt1a-Lisa-1
12729: PPUSH
12730: CALL_OW 88
// end else
12734: GO 12807
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12736: LD_INT 22
12738: PUSH
12739: LD_INT 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 21
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 26
12758: PUSH
12759: LD_INT 1
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: PUSH
12776: LD_EXP 1
12780: PUSH
12781: LD_EXP 7
12785: PUSH
12786: LD_EXP 4
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: DIFF
12796: PPUSH
12797: LD_STRING DAtt1a-Sol1-1
12799: PPUSH
12800: LD_STRING DAtt1-FSol1-1
12802: PPUSH
12803: CALL 3984 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12807: LD_EXP 1
12811: PPUSH
12812: LD_STRING DAtt1a-JMM-1
12814: PPUSH
12815: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12819: LD_INT 22
12821: PUSH
12822: LD_INT 1
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 21
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: LD_INT 26
12841: PUSH
12842: LD_INT 1
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 69
12858: PUSH
12859: LD_EXP 1
12863: PUSH
12864: LD_EXP 7
12868: PUSH
12869: LD_EXP 4
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: DIFF
12879: PPUSH
12880: LD_STRING DAtt1b-Sol1-1
12882: PPUSH
12883: LD_STRING DAtt1a-Sol1-1
12885: PPUSH
12886: CALL 3984 0 3
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12893: LD_EXP 21
12897: PUSH
12898: LD_INT 2
12900: EQUAL
12901: IFFALSE 12963
12903: GO 12905
12905: DISABLE
12906: LD_INT 0
12908: PPUSH
// begin enable ;
12909: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_INT 5
12917: PPUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 5
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 21
12930: PUSH
12931: LD_INT 1
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PPUSH
12942: CALL_OW 70
12946: PUSH
12947: FOR_IN
12948: IFFALSE 12961
// RemoveUnit ( i ) ;
12950: LD_VAR 0 1
12954: PPUSH
12955: CALL_OW 64
12959: GO 12947
12961: POP
12962: POP
// end ;
12963: PPOPN 1
12965: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12966: LD_INT 22
12968: PUSH
12969: LD_INT 5
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: PPUSH
12979: CALL_OW 69
12983: PUSH
12984: LD_INT 0
12986: EQUAL
12987: PUSH
12988: LD_EXP 21
12992: PUSH
12993: LD_INT 2
12995: EQUAL
12996: AND
12997: IFFALSE 13010
12999: GO 13001
13001: DISABLE
// firstRussianAttack = 3 ;
13002: LD_ADDR_EXP 21
13006: PUSH
13007: LD_INT 3
13009: ST_TO_ADDR
13010: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13011: LD_EXP 26
13015: PUSH
13016: LD_INT 0
13018: EQUAL
13019: IFFALSE 13100
13021: GO 13023
13023: DISABLE
// begin timerStatus = 4 ;
13024: LD_ADDR_EXP 27
13028: PUSH
13029: LD_INT 4
13031: ST_TO_ADDR
// DialogueOn ;
13032: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13036: LD_EXP 13
13040: PPUSH
13041: LD_STRING D2-Don-1
13043: PPUSH
13044: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13048: LD_EXP 1
13052: PPUSH
13053: LD_STRING D2-JMM-1
13055: PPUSH
13056: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13060: LD_EXP 13
13064: PPUSH
13065: LD_STRING D2-Don-2
13067: PPUSH
13068: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13072: LD_EXP 1
13076: PPUSH
13077: LD_STRING D2-JMM-2
13079: PPUSH
13080: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13084: LD_EXP 13
13088: PPUSH
13089: LD_STRING D2-Don-3
13091: PPUSH
13092: CALL_OW 94
// DialogueOff ;
13096: CALL_OW 7
// end ;
13100: END
// every 12 12$0 do var tmp ;
13101: GO 13103
13103: DISABLE
13104: LD_INT 0
13106: PPUSH
// begin PrepareDonaldsonArmy ;
13107: CALL 941 0 0
// CenterNowOnUnits ( Donaldson ) ;
13111: LD_EXP 13
13115: PPUSH
13116: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13120: LD_ADDR_VAR 0 1
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_INT 4
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 1
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 26
13147: PUSH
13148: LD_INT 1
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 25
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: PPUSH
13171: CALL_OW 69
13175: PUSH
13176: LD_EXP 5
13180: PUSH
13181: EMPTY
13182: LIST
13183: DIFF
13184: ST_TO_ADDR
// DialogueOn ;
13185: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13189: LD_VAR 0 1
13193: PPUSH
13194: LD_STRING D3-Sol1-1
13196: PPUSH
13197: LD_STRING D3-Sol1-1
13199: PPUSH
13200: CALL 3984 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13204: LD_INT 22
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 21
13216: PUSH
13217: LD_INT 1
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 26
13226: PUSH
13227: LD_INT 1
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 25
13236: PUSH
13237: LD_INT 3
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PPUSH
13250: CALL_OW 69
13254: PPUSH
13255: LD_STRING D3-Sol2-1
13257: PPUSH
13258: LD_STRING D3-Sol2-1
13260: PPUSH
13261: CALL 3984 0 3
// if Frank then
13265: LD_EXP 5
13269: IFFALSE 13283
// Say ( Frank , D3-Frank-1 ) ;
13271: LD_EXP 5
13275: PPUSH
13276: LD_STRING D3-Frank-1
13278: PPUSH
13279: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13283: LD_EXP 13
13287: PPUSH
13288: LD_STRING D3-Don-1
13290: PPUSH
13291: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13295: LD_EXP 13
13299: PPUSH
13300: LD_STRING D3-Don-1a
13302: PPUSH
13303: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13307: LD_EXP 1
13311: PPUSH
13312: LD_STRING D3-JMM-1
13314: PPUSH
13315: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13319: LD_EXP 13
13323: PPUSH
13324: LD_STRING D3-Don-2
13326: PPUSH
13327: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13331: LD_INT 22
13333: PUSH
13334: LD_INT 6
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 21
13343: PUSH
13344: LD_INT 1
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PPUSH
13355: CALL_OW 69
13359: PUSH
13360: LD_INT 0
13362: GREATER
13363: IFFALSE 13477
// begin Say ( JMM , D3-JMM-2 ) ;
13365: LD_EXP 1
13369: PPUSH
13370: LD_STRING D3-JMM-2
13372: PPUSH
13373: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13377: LD_EXP 13
13381: PPUSH
13382: LD_STRING D3-Don-3
13384: PPUSH
13385: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13389: LD_EXP 1
13393: PPUSH
13394: LD_STRING D3-JMM-3
13396: PPUSH
13397: CALL_OW 88
// if IsOK ( Frank ) then
13401: LD_EXP 5
13405: PPUSH
13406: CALL_OW 302
13410: IFFALSE 13424
// Say ( Frank , D3-Frank-3 ) ;
13412: LD_EXP 5
13416: PPUSH
13417: LD_STRING D3-Frank-3
13419: PPUSH
13420: CALL_OW 88
// DialogueOff ;
13424: CALL_OW 7
// if IsOK ( Frank ) then
13428: LD_EXP 5
13432: PPUSH
13433: CALL_OW 302
13437: IFFALSE 13475
// begin SetSide ( Frank , 0 ) ;
13439: LD_EXP 5
13443: PPUSH
13444: LD_INT 0
13446: PPUSH
13447: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13451: LD_EXP 5
13455: PPUSH
13456: LD_INT 12
13458: PPUSH
13459: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13463: LD_EXP 5
13467: PPUSH
13468: LD_STRING Frank
13470: PPUSH
13471: CALL_OW 38
// end ; end else
13475: GO 13540
// begin Say ( JMM , D3-JMM-4 ) ;
13477: LD_EXP 1
13481: PPUSH
13482: LD_STRING D3-JMM-4
13484: PPUSH
13485: CALL_OW 88
// DialogueOff ;
13489: CALL_OW 7
// if IsOK ( Frank ) then
13493: LD_EXP 5
13497: PPUSH
13498: CALL_OW 302
13502: IFFALSE 13540
// begin SetSide ( Frank , 0 ) ;
13504: LD_EXP 5
13508: PPUSH
13509: LD_INT 0
13511: PPUSH
13512: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13516: LD_EXP 5
13520: PPUSH
13521: LD_INT 12
13523: PPUSH
13524: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13528: LD_EXP 5
13532: PPUSH
13533: LD_STRING Frank
13535: PPUSH
13536: CALL_OW 38
// end ; end ; end ;
13540: PPOPN 1
13542: END
// every 1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
13543: LD_EXP 5
13547: PPUSH
13548: LD_INT 12
13550: PPUSH
13551: CALL_OW 308
13555: PUSH
13556: LD_EXP 5
13560: PPUSH
13561: CALL_OW 255
13565: PUSH
13566: LD_INT 0
13568: EQUAL
13569: AND
13570: IFFALSE 13592
13572: GO 13574
13574: DISABLE
// begin RemoveUnit ( Frank ) ;
13575: LD_EXP 5
13579: PPUSH
13580: CALL_OW 64
// frankScoutBase = 1 ;
13584: LD_ADDR_EXP 23
13588: PUSH
13589: LD_INT 1
13591: ST_TO_ADDR
// end ;
13592: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13593: LD_EXP 13
13597: PPUSH
13598: CALL_OW 255
13602: PUSH
13603: LD_INT 4
13605: EQUAL
13606: PUSH
13607: LD_EXP 13
13611: PPUSH
13612: CALL_OW 302
13616: AND
13617: IFFALSE 13642
13619: GO 13621
13621: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13622: LD_EXP 13
13626: PPUSH
13627: LD_STRING D3b-Don-1
13629: PPUSH
13630: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13634: LD_ADDR_EXP 39
13638: PUSH
13639: LD_INT 1
13641: ST_TO_ADDR
// end ;
13642: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13643: LD_EXP 22
13647: PUSH
13648: LD_INT 0
13650: EQUAL
13651: IFFALSE 13807
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
// begin enable ;
13660: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13661: LD_ADDR_VAR 0 1
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_INT 4
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 21
13678: PUSH
13679: LD_INT 1
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: PUSH
13695: FOR_IN
13696: IFFALSE 13805
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13698: LD_ADDR_VAR 0 2
13702: PUSH
13703: LD_INT 22
13705: PUSH
13706: LD_INT 1
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 21
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: PUSH
13732: FOR_IN
13733: IFFALSE 13801
// begin if GetDistUnits ( i , j ) < 7 then
13735: LD_VAR 0 1
13739: PPUSH
13740: LD_VAR 0 2
13744: PPUSH
13745: CALL_OW 296
13749: PUSH
13750: LD_INT 7
13752: LESS
13753: IFFALSE 13799
// begin saveDonaldson = 1 ;
13755: LD_ADDR_EXP 22
13759: PUSH
13760: LD_INT 1
13762: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13763: LD_INT 22
13765: PUSH
13766: LD_INT 4
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 21
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PPUSH
13787: CALL_OW 69
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 235
// end ; end ;
13799: GO 13732
13801: POP
13802: POP
// end ;
13803: GO 13695
13805: POP
13806: POP
// end ;
13807: PPOPN 2
13809: END
// every 2 2$0 trigger saveDonaldson = 1 do
13810: LD_EXP 22
13814: PUSH
13815: LD_INT 1
13817: EQUAL
13818: IFFALSE 14060
13820: GO 13822
13822: DISABLE
// begin uc_side = 4 ;
13823: LD_ADDR_OWVAR 20
13827: PUSH
13828: LD_INT 4
13830: ST_TO_ADDR
// uc_nation = 1 ;
13831: LD_ADDR_OWVAR 21
13835: PUSH
13836: LD_INT 1
13838: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13839: LD_ADDR_EXP 5
13843: PUSH
13844: LD_STRING Frank
13846: PPUSH
13847: CALL_OW 34
13851: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13852: LD_EXP 5
13856: PPUSH
13857: LD_INT 13
13859: PPUSH
13860: LD_INT 0
13862: PPUSH
13863: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13867: LD_INT 35
13869: PPUSH
13870: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
13874: LD_EXP 5
13878: PPUSH
13879: LD_INT 51
13881: PPUSH
13882: LD_INT 15
13884: PPUSH
13885: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
13889: LD_EXP 5
13893: PPUSH
13894: LD_EXP 1
13898: PPUSH
13899: CALL_OW 296
13903: PUSH
13904: LD_INT 6
13906: LESS
13907: IFFALSE 13867
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13909: LD_EXP 1
13913: PUSH
13914: LD_EXP 5
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PPUSH
13923: CALL_OW 87
// DialogueOn ;
13927: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13931: LD_EXP 5
13935: PPUSH
13936: LD_STRING D3a-Frank-1
13938: PPUSH
13939: CALL_OW 88
// if Lisa then
13943: LD_EXP 4
13947: IFFALSE 13997
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13949: LD_EXP 4
13953: PPUSH
13954: LD_STRING D3a-Lisa-1
13956: PPUSH
13957: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13961: LD_EXP 5
13965: PPUSH
13966: LD_STRING D3a-Frank-2
13968: PPUSH
13969: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13973: LD_EXP 4
13977: PPUSH
13978: LD_STRING D3a-Lisa-2
13980: PPUSH
13981: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13985: LD_EXP 5
13989: PPUSH
13990: LD_STRING D3a-Frank-3
13992: PPUSH
13993: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13997: LD_EXP 1
14001: PPUSH
14002: LD_STRING D3a-JMM-3
14004: PPUSH
14005: CALL_OW 88
// DialogueOff ;
14009: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14013: LD_EXP 5
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: CALL_OW 235
// InGameOn ;
14025: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14029: LD_INT 1
14031: PPUSH
14032: LD_INT 7
14034: PPUSH
14035: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14039: LD_INT 93
14041: PPUSH
14042: LD_INT 91
14044: PPUSH
14045: CALL_OW 84
// wait ( 0 0$5 ) ;
14049: LD_INT 175
14051: PPUSH
14052: CALL_OW 67
// InGameOff ;
14056: CALL_OW 9
// end ;
14060: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14061: LD_OWVAR 67
14065: PUSH
14066: LD_INT 2
14068: EQUAL
14069: PUSH
14070: LD_OWVAR 67
14074: PUSH
14075: LD_INT 3
14077: EQUAL
14078: OR
14079: IFFALSE 14103
14081: GO 14083
14083: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14084: LD_INT 24
14086: PPUSH
14087: LD_INT 24
14089: PPUSH
14090: LD_INT 1
14092: PPUSH
14093: LD_INT 1
14095: PPUSH
14096: LD_INT 53
14098: PPUSH
14099: CALL_OW 125
14103: END
// every 18 18$0 do
14104: GO 14106
14106: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14107: LD_EXP 14
14111: PPUSH
14112: LD_STRING D4-Har-1
14114: PPUSH
14115: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14119: LD_EXP 1
14123: PPUSH
14124: LD_STRING D4-JMM-1
14126: PPUSH
14127: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14131: LD_EXP 14
14135: PPUSH
14136: LD_STRING D4-Har-2
14138: PPUSH
14139: CALL_OW 94
// case query ( Q1 ) of 1 :
14143: LD_STRING Q1
14145: PPUSH
14146: CALL_OW 97
14150: PUSH
14151: LD_INT 1
14153: DOUBLE
14154: EQUAL
14155: IFTRUE 14159
14157: GO 14218
14159: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14160: LD_EXP 1
14164: PPUSH
14165: LD_STRING D5-JMM-1
14167: PPUSH
14168: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14172: LD_EXP 14
14176: PPUSH
14177: LD_STRING D5-Har-1
14179: PPUSH
14180: CALL_OW 94
// timeToSupport = 10 10$0 ;
14184: LD_ADDR_EXP 26
14188: PUSH
14189: LD_INT 21000
14191: ST_TO_ADDR
// timerStatus = 2 ;
14192: LD_ADDR_EXP 27
14196: PUSH
14197: LD_INT 2
14199: ST_TO_ADDR
// startTimer = 1 ;
14200: LD_ADDR_EXP 28
14204: PUSH
14205: LD_INT 1
14207: ST_TO_ADDR
// harrAnswer = 1 ;
14208: LD_ADDR_EXP 24
14212: PUSH
14213: LD_INT 1
14215: ST_TO_ADDR
// end ; 2 :
14216: GO 14353
14218: LD_INT 2
14220: DOUBLE
14221: EQUAL
14222: IFTRUE 14226
14224: GO 14285
14226: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14227: LD_EXP 1
14231: PPUSH
14232: LD_STRING D5-JMM-2
14234: PPUSH
14235: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14239: LD_EXP 14
14243: PPUSH
14244: LD_STRING D5-Har-2
14246: PPUSH
14247: CALL_OW 94
// timeToSupport = 5 5$0 ;
14251: LD_ADDR_EXP 26
14255: PUSH
14256: LD_INT 10500
14258: ST_TO_ADDR
// timerStatus = 2 ;
14259: LD_ADDR_EXP 27
14263: PUSH
14264: LD_INT 2
14266: ST_TO_ADDR
// startTimer = 1 ;
14267: LD_ADDR_EXP 28
14271: PUSH
14272: LD_INT 1
14274: ST_TO_ADDR
// harrAnswer = 2 ;
14275: LD_ADDR_EXP 24
14279: PUSH
14280: LD_INT 2
14282: ST_TO_ADDR
// end ; 3 :
14283: GO 14353
14285: LD_INT 3
14287: DOUBLE
14288: EQUAL
14289: IFTRUE 14293
14291: GO 14352
14293: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14294: LD_EXP 1
14298: PPUSH
14299: LD_STRING D5-JMM-3
14301: PPUSH
14302: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14306: LD_EXP 14
14310: PPUSH
14311: LD_STRING D5-Har-3
14313: PPUSH
14314: CALL_OW 94
// timeToSupport = 5 5$0 ;
14318: LD_ADDR_EXP 26
14322: PUSH
14323: LD_INT 10500
14325: ST_TO_ADDR
// timerStatus = 2 ;
14326: LD_ADDR_EXP 27
14330: PUSH
14331: LD_INT 2
14333: ST_TO_ADDR
// startTimer = 1 ;
14334: LD_ADDR_EXP 28
14338: PUSH
14339: LD_INT 1
14341: ST_TO_ADDR
// harrAnswer = 3 ;
14342: LD_ADDR_EXP 24
14346: PUSH
14347: LD_INT 3
14349: ST_TO_ADDR
// end ; end ;
14350: GO 14353
14352: POP
// end ;
14353: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14354: LD_EXP 27
14358: PUSH
14359: LD_INT 2
14361: EQUAL
14362: PUSH
14363: LD_EXP 26
14367: PUSH
14368: LD_INT 0
14370: EQUAL
14371: AND
14372: IFFALSE 14649
14374: GO 14376
14376: DISABLE
// begin timerStatus = 4 ;
14377: LD_ADDR_EXP 27
14381: PUSH
14382: LD_INT 4
14384: ST_TO_ADDR
// if harrAnswer = 1 then
14385: LD_EXP 24
14389: PUSH
14390: LD_INT 1
14392: EQUAL
14393: IFFALSE 14473
// begin PrepareHarrisonSupport ( 3 ) ;
14395: LD_INT 3
14397: PPUSH
14398: CALL 1505 0 1
// wait ( 1 1$0 ) ;
14402: LD_INT 2100
14404: PPUSH
14405: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14409: LD_EXP 14
14413: PPUSH
14414: LD_STRING D7-Har-1
14416: PPUSH
14417: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14421: LD_STRING M2
14423: PPUSH
14424: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14428: LD_ADDR_EXP 25
14432: PUSH
14433: LD_INT 31500
14435: PUSH
14436: LD_INT 10500
14438: PUSH
14439: LD_INT 8400
14441: PUSH
14442: LD_INT 6300
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: PUSH
14450: LD_OWVAR 67
14454: ARRAY
14455: PLUS
14456: ST_TO_ADDR
// startTimer = 1 ;
14457: LD_ADDR_EXP 28
14461: PUSH
14462: LD_INT 1
14464: ST_TO_ADDR
// timerStatus = 3 ;
14465: LD_ADDR_EXP 27
14469: PUSH
14470: LD_INT 3
14472: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14473: LD_EXP 24
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: IFFALSE 14561
// begin PrepareHarrisonSupport ( 4 ) ;
14483: LD_INT 4
14485: PPUSH
14486: CALL 1505 0 1
// wait ( 1 1$0 ) ;
14490: LD_INT 2100
14492: PPUSH
14493: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14497: LD_EXP 14
14501: PPUSH
14502: LD_STRING D7-Har-1
14504: PPUSH
14505: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14509: LD_STRING M2
14511: PPUSH
14512: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14516: LD_ADDR_EXP 25
14520: PUSH
14521: LD_INT 27300
14523: PUSH
14524: LD_INT 8400
14526: PUSH
14527: LD_INT 8400
14529: PUSH
14530: LD_INT 6300
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: LD_OWVAR 67
14542: ARRAY
14543: PLUS
14544: ST_TO_ADDR
// startTimer = 1 ;
14545: LD_ADDR_EXP 28
14549: PUSH
14550: LD_INT 1
14552: ST_TO_ADDR
// timerStatus = 3 ;
14553: LD_ADDR_EXP 27
14557: PUSH
14558: LD_INT 3
14560: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14561: LD_EXP 24
14565: PUSH
14566: LD_INT 3
14568: EQUAL
14569: IFFALSE 14649
// begin PrepareHarrisonSupport ( 5 ) ;
14571: LD_INT 5
14573: PPUSH
14574: CALL 1505 0 1
// wait ( 1 1$0 ) ;
14578: LD_INT 2100
14580: PPUSH
14581: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14585: LD_EXP 14
14589: PPUSH
14590: LD_STRING D7-Har-1
14592: PPUSH
14593: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14597: LD_STRING M2
14599: PPUSH
14600: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14604: LD_ADDR_EXP 25
14608: PUSH
14609: LD_INT 21000
14611: PUSH
14612: LD_INT 8400
14614: PUSH
14615: LD_INT 6300
14617: PUSH
14618: LD_INT 4200
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: LIST
14625: PUSH
14626: LD_OWVAR 67
14630: ARRAY
14631: PLUS
14632: ST_TO_ADDR
// startTimer = 1 ;
14633: LD_ADDR_EXP 28
14637: PUSH
14638: LD_INT 1
14640: ST_TO_ADDR
// timerStatus = 3 ;
14641: LD_ADDR_EXP 27
14645: PUSH
14646: LD_INT 3
14648: ST_TO_ADDR
// end ; end ;
14649: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14650: LD_EXP 25
14654: PUSH
14655: LD_INT 8400
14657: LESSEQUAL
14658: PUSH
14659: LD_EXP 27
14663: PUSH
14664: LD_INT 3
14666: EQUAL
14667: AND
14668: IFFALSE 14700
14670: GO 14672
14672: DISABLE
// begin DialogueOn ;
14673: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14677: LD_EXP 14
14681: PPUSH
14682: LD_STRING D7a-Har-1
14684: PPUSH
14685: CALL_OW 94
// DialogueOff ;
14689: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14693: LD_STRING M2a
14695: PPUSH
14696: CALL_OW 337
// end ;
14700: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14701: LD_EXP 25
14705: PUSH
14706: LD_INT 0
14708: LESSEQUAL
14709: PUSH
14710: LD_EXP 27
14714: PUSH
14715: LD_INT 3
14717: EQUAL
14718: AND
14719: IFFALSE 14844
14721: GO 14723
14723: DISABLE
14724: LD_INT 0
14726: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14727: LD_ADDR_VAR 0 1
14731: PUSH
14732: LD_INT 22
14734: PUSH
14735: LD_INT 1
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PPUSH
14742: CALL_OW 69
14746: PUSH
14747: LD_EXP 1
14751: PUSH
14752: EMPTY
14753: LIST
14754: DIFF
14755: ST_TO_ADDR
// saveDonaldson = 2 ;
14756: LD_ADDR_EXP 22
14760: PUSH
14761: LD_INT 2
14763: ST_TO_ADDR
// DialogueOn ;
14764: CALL_OW 6
// if IsOK ( Donaldson ) then
14768: LD_EXP 13
14772: PPUSH
14773: CALL_OW 302
14777: IFFALSE 14793
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14779: LD_EXP 14
14783: PPUSH
14784: LD_STRING D8-Har-1
14786: PPUSH
14787: CALL_OW 94
// end else
14791: GO 14805
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14793: LD_EXP 14
14797: PPUSH
14798: LD_STRING D8-Har-1a
14800: PPUSH
14801: CALL_OW 94
// end ; DialogueOff ;
14805: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 4
14816: PPUSH
14817: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_INT 88
14828: PPUSH
14829: LD_INT 89
14831: PPUSH
14832: CALL_OW 114
// honor = 0 ;
14836: LD_ADDR_EXP 37
14840: PUSH
14841: LD_INT 0
14843: ST_TO_ADDR
// end ;
14844: PPOPN 1
14846: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14847: LD_INT 22
14849: PUSH
14850: LD_INT 6
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 21
14859: PUSH
14860: LD_INT 1
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: PUSH
14876: LD_INT 0
14878: EQUAL
14879: PUSH
14880: LD_EXP 18
14884: PUSH
14885: LD_INT 0
14887: EQUAL
14888: AND
14889: PUSH
14890: LD_EXP 40
14894: PUSH
14895: LD_INT 1
14897: EQUAL
14898: AND
14899: IFFALSE 14993
14901: GO 14903
14903: DISABLE
14904: LD_INT 0
14906: PPUSH
14907: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14908: LD_ADDR_VAR 0 2
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_INT 1
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 21
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 23
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: LIST
14947: PPUSH
14948: CALL_OW 69
14952: ST_TO_ADDR
// for i in tmp do
14953: LD_ADDR_VAR 0 1
14957: PUSH
14958: LD_VAR 0 2
14962: PUSH
14963: FOR_IN
14964: IFFALSE 14991
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14966: LD_VAR 0 1
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: LD_INT 4
14976: PPUSH
14977: CALL_OW 12
14981: PPUSH
14982: LD_INT 500
14984: PPUSH
14985: CALL_OW 492
// end ;
14989: GO 14963
14991: POP
14992: POP
// end ; end_of_file
14993: PPOPN 2
14995: END
// every 0 0$1 trigger AIEnable = 1 do
14996: LD_EXP 35
15000: PUSH
15001: LD_INT 1
15003: EQUAL
15004: IFFALSE 15076
15006: GO 15008
15008: DISABLE
// begin enable ;
15009: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
15010: LD_INT 3
15012: PPUSH
15013: LD_INT 21
15015: PPUSH
15016: CALL 5329 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15020: LD_INT 3
15022: PPUSH
15023: LD_INT 8
15025: PPUSH
15026: LD_INT 7
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL 5570 0 4
// if baseReadyToBuild = 2 then
15036: LD_EXP 18
15040: PUSH
15041: LD_INT 2
15043: EQUAL
15044: IFFALSE 15076
// begin RepairBuilding ( 6 , ruPDepot ) ;
15046: LD_INT 6
15048: PPUSH
15049: LD_EXP 19
15053: PPUSH
15054: CALL 5329 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15058: LD_INT 6
15060: PPUSH
15061: LD_INT 9
15063: PPUSH
15064: LD_INT 6
15066: PPUSH
15067: LD_EXP 20
15071: PPUSH
15072: CALL 5570 0 4
// end ; end ;
15076: END
// every 0 0$01 do
15077: GO 15079
15079: DISABLE
// begin enable ;
15080: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
15081: LD_INT 3
15083: PPUSH
15084: LD_INT 17
15086: PPUSH
15087: LD_INT 111
15089: PPUSH
15090: LD_INT 87
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL 8438 0 5
// end ;
15100: END
// every 0 0$01 do
15101: GO 15103
15103: DISABLE
// begin enable ;
15104: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
15105: LD_INT 5
15107: PPUSH
15108: LD_INT 17
15110: PPUSH
15111: LD_INT 111
15113: PPUSH
15114: LD_INT 87
15116: PPUSH
15117: LD_INT 1
15119: PPUSH
15120: CALL 8438 0 5
// end ;
15124: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
15125: LD_EXP 35
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: IFFALSE 15319
15135: GO 15137
15137: DISABLE
// begin enable ;
15138: ENABLE
// if Difficulty = 1 then
15139: LD_OWVAR 67
15143: PUSH
15144: LD_INT 1
15146: EQUAL
15147: IFFALSE 15194
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15149: LD_INT 3
15151: PPUSH
15152: LD_INT 24
15154: PPUSH
15155: LD_OWVAR 67
15159: PUSH
15160: LD_INT 1
15162: PLUS
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: LD_INT 42
15169: PUSH
15170: LD_INT 42
15172: PUSH
15173: LD_INT 43
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: PPUSH
15181: LD_INT 1
15183: PPUSH
15184: LD_INT 1
15186: PPUSH
15187: LD_INT 21
15189: PPUSH
15190: CALL 5836 0 8
// if Difficulty = 2 then
15194: LD_OWVAR 67
15198: PUSH
15199: LD_INT 2
15201: EQUAL
15202: IFFALSE 15264
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15204: LD_INT 3
15206: PPUSH
15207: LD_INT 24
15209: PPUSH
15210: LD_OWVAR 67
15214: PUSH
15215: LD_INT 1
15217: PLUS
15218: PPUSH
15219: LD_INT 1
15221: PPUSH
15222: LD_INT 42
15224: PUSH
15225: LD_INT 43
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PPUSH
15232: LD_INT 1
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: LD_INT 21
15240: PUSH
15241: LD_INT 22
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 1
15250: PPUSH
15251: LD_INT 2
15253: PPUSH
15254: CALL_OW 12
15258: ARRAY
15259: PPUSH
15260: CALL 5836 0 8
// if Difficulty = 3 then
15264: LD_OWVAR 67
15268: PUSH
15269: LD_INT 3
15271: EQUAL
15272: IFFALSE 15319
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
15274: LD_INT 3
15276: PPUSH
15277: LD_INT 24
15279: PPUSH
15280: LD_OWVAR 67
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: LD_INT 43
15290: PUSH
15291: LD_INT 43
15293: PUSH
15294: LD_INT 43
15296: PUSH
15297: LD_INT 44
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: PPUSH
15306: LD_INT 1
15308: PPUSH
15309: LD_INT 1
15311: PPUSH
15312: LD_INT 22
15314: PPUSH
15315: CALL 5836 0 8
// end ;
15319: END
// every 0 0$1 do
15320: GO 15322
15322: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15323: LD_INT 3
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: LD_INT 3
15331: PPUSH
15332: CALL 5244 0 3
15336: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15337: LD_EXP 18
15341: PUSH
15342: LD_INT 1
15344: EQUAL
15345: IFFALSE 15492
15347: GO 15349
15349: DISABLE
15350: LD_INT 0
15352: PPUSH
15353: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: LD_INT 22
15361: PUSH
15362: LD_INT 6
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 21
15371: PUSH
15372: LD_INT 2
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 34
15381: PUSH
15382: LD_INT 51
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: PPUSH
15394: CALL_OW 69
15398: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15399: LD_VAR 0 2
15403: PUSH
15404: LD_INT 1
15406: ARRAY
15407: PPUSH
15408: LD_EXP 19
15412: PPUSH
15413: CALL_OW 250
15417: PUSH
15418: LD_INT 5
15420: MINUS
15421: PPUSH
15422: LD_EXP 19
15426: PPUSH
15427: CALL_OW 251
15431: PUSH
15432: LD_INT 5
15434: MINUS
15435: PPUSH
15436: CALL_OW 111
// wait ( 0 0$5 ) ;
15440: LD_INT 175
15442: PPUSH
15443: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15447: LD_VAR 0 2
15451: PUSH
15452: LD_INT 1
15454: ARRAY
15455: PPUSH
15456: LD_INT 41
15458: PPUSH
15459: LD_INT 52
15461: PPUSH
15462: CALL_OW 177
// wait ( 0 0$40 ) ;
15466: LD_INT 1400
15468: PPUSH
15469: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15473: LD_VAR 0 2
15477: PUSH
15478: LD_INT 1
15480: ARRAY
15481: PPUSH
15482: LD_INT 41
15484: PPUSH
15485: LD_INT 44
15487: PPUSH
15488: CALL_OW 111
// end ;
15492: PPOPN 2
15494: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15495: LD_EXP 19
15499: PPUSH
15500: CALL_OW 274
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: CALL_OW 275
15512: PUSH
15513: LD_INT 100
15515: GREATEREQUAL
15516: IFFALSE 15744
15518: GO 15520
15520: DISABLE
15521: LD_INT 0
15523: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15524: LD_ADDR_VAR 0 1
15528: PUSH
15529: LD_INT 22
15531: PUSH
15532: LD_INT 6
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 21
15541: PUSH
15542: LD_INT 1
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 25
15551: PUSH
15552: LD_INT 2
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: LIST
15563: PPUSH
15564: CALL_OW 69
15568: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15569: LD_VAR 0 1
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_INT 4
15580: PPUSH
15581: LD_INT 39
15583: PPUSH
15584: LD_INT 37
15586: PPUSH
15587: LD_INT 3
15589: PPUSH
15590: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15594: LD_VAR 0 1
15598: PUSH
15599: LD_INT 1
15601: ARRAY
15602: PPUSH
15603: LD_INT 29
15605: PPUSH
15606: LD_INT 42
15608: PPUSH
15609: LD_INT 54
15611: PPUSH
15612: LD_INT 3
15614: PPUSH
15615: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15619: LD_VAR 0 1
15623: PUSH
15624: LD_INT 1
15626: ARRAY
15627: PPUSH
15628: LD_INT 6
15630: PPUSH
15631: LD_INT 38
15633: PPUSH
15634: LD_INT 48
15636: PPUSH
15637: LD_INT 0
15639: PPUSH
15640: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15644: LD_VAR 0 1
15648: PUSH
15649: LD_INT 1
15651: ARRAY
15652: PPUSH
15653: LD_INT 2
15655: PPUSH
15656: LD_INT 32
15658: PPUSH
15659: LD_INT 38
15661: PPUSH
15662: LD_INT 2
15664: PPUSH
15665: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15669: LD_VAR 0 1
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PPUSH
15678: LD_INT 26
15680: PPUSH
15681: LD_INT 39
15683: PPUSH
15684: LD_INT 55
15686: PPUSH
15687: LD_INT 3
15689: PPUSH
15690: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15694: LD_VAR 0 1
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: LD_INT 32
15705: PPUSH
15706: LD_INT 31
15708: PPUSH
15709: LD_INT 31
15711: PPUSH
15712: LD_INT 3
15714: PPUSH
15715: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15719: LD_VAR 0 1
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: PPUSH
15728: LD_INT 31
15730: PPUSH
15731: LD_INT 50
15733: PPUSH
15734: LD_INT 51
15736: PPUSH
15737: LD_INT 4
15739: PPUSH
15740: CALL_OW 205
// end ; end_of_file
15744: PPOPN 1
15746: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15756: LD_ADDR_VAR 0 3
15760: PUSH
15761: LD_INT 22
15763: PUSH
15764: LD_INT 6
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 21
15773: PUSH
15774: LD_INT 1
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 25
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: LD_INT 54
15796: PUSH
15797: EMPTY
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PPUSH
15810: CALL_OW 69
15814: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15815: LD_ADDR_VAR 0 7
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 6
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 21
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 25
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 54
15852: PUSH
15853: EMPTY
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: PPUSH
15862: CALL_OW 69
15866: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_INT 22
15874: PUSH
15875: LD_INT 6
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 21
15884: PUSH
15885: LD_INT 1
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 25
15894: PUSH
15895: LD_INT 2
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: LIST
15906: PPUSH
15907: CALL_OW 69
15911: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
15912: LD_ADDR_VAR 0 6
15916: PUSH
15917: LD_INT 22
15919: PUSH
15920: LD_INT 6
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 21
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 25
15939: PUSH
15940: LD_INT 4
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: PPUSH
15952: CALL_OW 69
15956: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15957: LD_ADDR_VAR 0 8
15961: PUSH
15962: LD_INT 22
15964: PUSH
15965: LD_INT 6
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 21
15974: PUSH
15975: LD_INT 2
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 34
15984: PUSH
15985: LD_INT 51
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 255
16011: PUSH
16012: LD_INT 6
16014: EQUAL
16015: PUSH
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 266
16025: PUSH
16026: LD_INT 0
16028: EQUAL
16029: AND
16030: IFFALSE 16050
// begin ruPDepot = building ;
16032: LD_ADDR_EXP 19
16036: PUSH
16037: LD_VAR 0 1
16041: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16042: LD_ADDR_EXP 18
16046: PUSH
16047: LD_INT 1
16049: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 266
16059: PUSH
16060: LD_INT 4
16062: EQUAL
16063: PUSH
16064: LD_VAR 0 1
16068: PPUSH
16069: CALL_OW 255
16073: PUSH
16074: LD_INT 6
16076: EQUAL
16077: AND
16078: IFFALSE 16111
// for i in tmpSold do
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_VAR 0 3
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16109
// ComEnterUnit ( i , building ) ;
16093: LD_VAR 0 2
16097: PPUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 120
16107: GO 16090
16109: POP
16110: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16111: LD_VAR 0 1
16115: PPUSH
16116: CALL_OW 266
16120: PUSH
16121: LD_INT 6
16123: EQUAL
16124: PUSH
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 255
16134: PUSH
16135: LD_INT 6
16137: EQUAL
16138: AND
16139: IFFALSE 16197
// begin for i in tmpSci do
16141: LD_ADDR_VAR 0 2
16145: PUSH
16146: LD_VAR 0 6
16150: PUSH
16151: FOR_IN
16152: IFFALSE 16170
// ComEnterUnit ( i , building ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_VAR 0 1
16163: PPUSH
16164: CALL_OW 120
16168: GO 16151
16170: POP
16171: POP
// ResAllTechs ( 6 , building , 3 ) ;
16172: LD_INT 6
16174: PPUSH
16175: LD_VAR 0 1
16179: PPUSH
16180: LD_INT 3
16182: PPUSH
16183: CALL 5244 0 3
// ruPLab = building ;
16187: LD_ADDR_EXP 20
16191: PUSH
16192: LD_VAR 0 1
16196: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 266
16206: PUSH
16207: LD_INT 2
16209: EQUAL
16210: PUSH
16211: LD_VAR 0 1
16215: PPUSH
16216: CALL_OW 255
16220: PUSH
16221: LD_INT 6
16223: EQUAL
16224: AND
16225: IFFALSE 16276
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16227: LD_ADDR_VAR 0 5
16231: PUSH
16232: LD_VAR 0 8
16236: PUSH
16237: LD_INT 1
16239: ARRAY
16240: PPUSH
16241: CALL_OW 313
16245: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16246: LD_VAR 0 5
16250: PPUSH
16251: CALL_OW 121
// wait ( 0 0$1 ) ;
16255: LD_INT 35
16257: PPUSH
16258: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16262: LD_VAR 0 5
16266: PPUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16276: LD_VAR 0 1
16280: PPUSH
16281: CALL_OW 266
16285: PUSH
16286: LD_INT 32
16288: EQUAL
16289: PUSH
16290: LD_VAR 0 1
16294: PPUSH
16295: CALL_OW 255
16299: PUSH
16300: LD_INT 6
16302: EQUAL
16303: AND
16304: IFFALSE 16356
// begin ComPlaceWeapon ( building , 42 ) ;
16306: LD_VAR 0 1
16310: PPUSH
16311: LD_INT 42
16313: PPUSH
16314: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16318: LD_VAR 0 7
16322: PUSH
16323: LD_INT 1
16325: ARRAY
16326: PPUSH
16327: CALL_OW 122
// wait ( 0 0$1 ) ;
16331: LD_INT 35
16333: PPUSH
16334: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16338: LD_VAR 0 7
16342: PUSH
16343: LD_INT 1
16345: ARRAY
16346: PPUSH
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 266
16365: PUSH
16366: LD_INT 31
16368: EQUAL
16369: PUSH
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 255
16379: PUSH
16380: LD_INT 6
16382: EQUAL
16383: AND
16384: IFFALSE 16450
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16386: LD_VAR 0 7
16390: PUSH
16391: LD_INT 2
16393: ARRAY
16394: PPUSH
16395: CALL_OW 122
// wait ( 0 0$1 ) ;
16399: LD_INT 35
16401: PPUSH
16402: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16406: LD_VAR 0 7
16410: PUSH
16411: LD_INT 2
16413: ARRAY
16414: PPUSH
16415: LD_VAR 0 1
16419: PPUSH
16420: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16424: LD_VAR 0 4
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_EXP 19
16437: PPUSH
16438: CALL_OW 120
// baseReadyToBuild = 2 ;
16442: LD_ADDR_EXP 18
16446: PUSH
16447: LD_INT 2
16449: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16450: LD_VAR 0 1
16454: PPUSH
16455: CALL_OW 266
16459: PUSH
16460: LD_INT 32
16462: EQUAL
16463: PUSH
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 255
16473: PUSH
16474: LD_INT 1
16476: EQUAL
16477: AND
16478: PUSH
16479: LD_EXP 30
16483: PUSH
16484: LD_INT 0
16486: EQUAL
16487: AND
16488: IFFALSE 16733
// begin bunkerDialog = 1 ;
16490: LD_ADDR_EXP 30
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16498: LD_EXP 11
16502: PPUSH
16503: CALL_OW 302
16507: IFFALSE 16523
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16509: LD_EXP 11
16513: PPUSH
16514: LD_STRING D11-Eng1-1
16516: PPUSH
16517: CALL_OW 88
// end else
16521: GO 16719
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16523: LD_INT 22
16525: PUSH
16526: LD_INT 1
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 21
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 25
16545: PUSH
16546: LD_INT 3
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 69
16573: PUSH
16574: LD_EXP 1
16578: PUSH
16579: EMPTY
16580: LIST
16581: PUSH
16582: LD_INT 0
16584: GREATER
16585: DIFF
16586: IFFALSE 16660
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16588: LD_INT 22
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 21
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 25
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 26
16620: PUSH
16621: LD_INT 1
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: PPUSH
16634: CALL_OW 69
16638: PUSH
16639: LD_EXP 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: DIFF
16647: PPUSH
16648: LD_STRING D11-Eng1-1
16650: PPUSH
16651: LD_STRING D11-Eng1-1
16653: PPUSH
16654: CALL 3984 0 3
// end else
16658: GO 16719
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16660: LD_INT 22
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 21
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 26
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: PPUSH
16695: CALL_OW 69
16699: PUSH
16700: LD_EXP 1
16704: PUSH
16705: EMPTY
16706: LIST
16707: DIFF
16708: PPUSH
16709: LD_STRING D11-Eng1-1
16711: PPUSH
16712: LD_STRING D11-Eng1-1
16714: PPUSH
16715: CALL 3984 0 3
// end ; end ; if energyVDialog = 0 then
16719: LD_EXP 31
16723: PUSH
16724: LD_INT 0
16726: EQUAL
16727: IFFALSE 16733
// EnergyDialog ;
16729: CALL 4296 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 266
16742: PUSH
16743: LD_INT 29
16745: EQUAL
16746: PUSH
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 255
16756: PUSH
16757: LD_INT 1
16759: EQUAL
16760: AND
16761: IFFALSE 16771
// buildOil = 1 ;
16763: LD_ADDR_EXP 32
16767: PUSH
16768: LD_INT 1
16770: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16771: LD_VAR 0 1
16775: PPUSH
16776: CALL_OW 266
16780: PUSH
16781: LD_INT 26
16783: EQUAL
16784: PUSH
16785: LD_VAR 0 1
16789: PPUSH
16790: CALL_OW 255
16794: PUSH
16795: LD_INT 1
16797: EQUAL
16798: AND
16799: IFFALSE 16809
// buildPower = 1 ;
16801: LD_ADDR_EXP 33
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// end ;
16809: PPOPN 8
16811: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 266
16821: PUSH
16822: LD_INT 3
16824: EQUAL
16825: PUSH
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 255
16835: PUSH
16836: LD_INT 1
16838: EQUAL
16839: AND
16840: PUSH
16841: LD_EXP 29
16845: PUSH
16846: LD_INT 0
16848: EQUAL
16849: AND
16850: IFFALSE 17166
// begin factoryDialog = 1 ;
16852: LD_ADDR_EXP 29
16856: PUSH
16857: LD_INT 1
16859: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
16860: LD_INT 22
16862: PUSH
16863: LD_INT 1
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 21
16872: PUSH
16873: LD_INT 3
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 30
16882: PUSH
16883: LD_INT 3
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 24
16892: PUSH
16893: LD_INT 1000
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: PPUSH
16906: CALL_OW 69
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PPUSH
16915: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
16919: LD_EXP 1
16923: PPUSH
16924: LD_STRING D9a-JMM-1
16926: PPUSH
16927: CALL_OW 88
// if IsOK ( Campell ) then
16931: LD_EXP 12
16935: PPUSH
16936: CALL_OW 302
16940: IFFALSE 16956
// begin Say ( Campell , D9a-Mech1-1 ) ;
16942: LD_EXP 12
16946: PPUSH
16947: LD_STRING D9a-Mech1-1
16949: PPUSH
16950: CALL_OW 88
// end else
16954: GO 17152
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16956: LD_INT 22
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 21
16968: PUSH
16969: LD_INT 1
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 25
16978: PUSH
16979: LD_INT 3
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 26
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: PPUSH
17002: CALL_OW 69
17006: PUSH
17007: LD_EXP 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: PUSH
17015: LD_INT 0
17017: GREATER
17018: DIFF
17019: IFFALSE 17093
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17021: LD_INT 22
17023: PUSH
17024: LD_INT 1
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 21
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 25
17043: PUSH
17044: LD_INT 3
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 26
17053: PUSH
17054: LD_INT 1
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: PUSH
17072: LD_EXP 1
17076: PUSH
17077: EMPTY
17078: LIST
17079: DIFF
17080: PPUSH
17081: LD_STRING D9a-Mech1-1
17083: PPUSH
17084: LD_STRING D9a-Mech1-1
17086: PPUSH
17087: CALL 3984 0 3
// end else
17091: GO 17152
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17093: LD_INT 22
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 21
17105: PUSH
17106: LD_INT 1
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 26
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: PPUSH
17128: CALL_OW 69
17132: PUSH
17133: LD_EXP 1
17137: PUSH
17138: EMPTY
17139: LIST
17140: DIFF
17141: PPUSH
17142: LD_STRING D9a-Mech1-1
17144: PPUSH
17145: LD_STRING D9a-Mech1-1
17147: PPUSH
17148: CALL 3984 0 3
// end ; end ; if energyVDialog = 0 then
17152: LD_EXP 31
17156: PUSH
17157: LD_INT 0
17159: EQUAL
17160: IFFALSE 17166
// EnergyDialog ;
17162: CALL 4296 0 0
// end ; end ;
17166: PPOPN 1
17168: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 247
17178: PUSH
17179: LD_INT 1
17181: EQUAL
17182: PUSH
17183: LD_VAR 0 1
17187: PPUSH
17188: CALL_OW 255
17192: PUSH
17193: LD_INT 1
17195: EQUAL
17196: AND
17197: IFFALSE 17213
// lostCounter = lostCounter + 1 ;
17199: LD_ADDR_EXP 36
17203: PUSH
17204: LD_EXP 36
17208: PUSH
17209: LD_INT 1
17211: PLUS
17212: ST_TO_ADDR
// end ;
17213: PPOPN 1
17215: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17216: LD_INT 0
17218: PPUSH
17219: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17220: LD_ADDR_VAR 0 4
17224: PUSH
17225: LD_INT 22
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PPUSH
17235: CALL_OW 69
17239: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17240: LD_VAR 0 1
17244: PUSH
17245: LD_INT 1
17247: EQUAL
17248: PUSH
17249: LD_VAR 0 2
17253: PUSH
17254: LD_INT 6
17256: EQUAL
17257: AND
17258: PUSH
17259: LD_EXP 39
17263: PUSH
17264: LD_INT 1
17266: EQUAL
17267: AND
17268: IFFALSE 17323
// begin donaldsonCoopAttack = 0 ;
17270: LD_ADDR_EXP 39
17274: PUSH
17275: LD_INT 0
17277: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17278: LD_ADDR_VAR 0 3
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_INT 4
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: PPUSH
17296: CALL_OW 69
17300: PUSH
17301: FOR_IN
17302: IFFALSE 17321
// ComAgressiveMove ( i , 52 , 64 ) ;
17304: LD_VAR 0 3
17308: PPUSH
17309: LD_INT 52
17311: PPUSH
17312: LD_INT 64
17314: PPUSH
17315: CALL_OW 114
17319: GO 17301
17321: POP
17322: POP
// end ; end ;
17323: PPOPN 4
17325: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 264
17335: PUSH
17336: LD_INT 53
17338: EQUAL
17339: IFFALSE 17424
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17341: LD_VAR 0 1
17345: PPUSH
17346: LD_INT 21
17348: PPUSH
17349: CALL 4512 0 2
// uc_side = 3 ;
17353: LD_ADDR_OWVAR 20
17357: PUSH
17358: LD_INT 3
17360: ST_TO_ADDR
// uc_nation = 3 ;
17361: LD_ADDR_OWVAR 21
17365: PUSH
17366: LD_INT 3
17368: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17369: LD_INT 0
17371: PPUSH
17372: LD_EXP 17
17376: PPUSH
17377: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17381: CALL_OW 44
17385: PPUSH
17386: LD_VAR 0 2
17390: PPUSH
17391: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17395: LD_VAR 0 1
17399: PPUSH
17400: LD_INT 6
17402: PPUSH
17403: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 313
17416: PPUSH
17417: LD_INT 6
17419: PPUSH
17420: CALL_OW 235
// end ; end ;
17424: PPOPN 2
17426: END
// on Command ( comandid ) do var i , j , tmp ;
17427: LD_INT 0
17429: PPUSH
17430: PPUSH
17431: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
17432: LD_ADDR_VAR 0 2
17436: PUSH
17437: LD_INT 22
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: LD_INT 21
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 21
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PPUSH
17479: CALL_OW 69
17483: PUSH
17484: FOR_IN
17485: IFFALSE 17595
// begin if GetTaskList ( i ) > 0 then
17487: LD_VAR 0 2
17491: PPUSH
17492: CALL_OW 437
17496: PUSH
17497: LD_INT 0
17499: GREATER
17500: IFFALSE 17593
// begin for j = 1 to GetTaskList ( i ) do
17502: LD_ADDR_VAR 0 3
17506: PUSH
17507: DOUBLE
17508: LD_INT 1
17510: DEC
17511: ST_TO_ADDR
17512: LD_VAR 0 2
17516: PPUSH
17517: CALL_OW 437
17521: PUSH
17522: FOR_TO
17523: IFFALSE 17591
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
17525: LD_ADDR_VAR 0 4
17529: PUSH
17530: LD_VAR 0 2
17534: PPUSH
17535: CALL_OW 437
17539: PUSH
17540: LD_VAR 0 3
17544: ARRAY
17545: PUSH
17546: LD_INT 4
17548: ARRAY
17549: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
17550: LD_VAR 0 4
17554: PPUSH
17555: CALL_OW 255
17559: PUSH
17560: LD_INT 4
17562: EQUAL
17563: PUSH
17564: LD_VAR 0 4
17568: PPUSH
17569: CALL_OW 255
17573: PUSH
17574: LD_INT 0
17576: EQUAL
17577: OR
17578: IFFALSE 17589
// ComStop ( i ) ;
17580: LD_VAR 0 2
17584: PPUSH
17585: CALL_OW 141
// end ;
17589: GO 17522
17591: POP
17592: POP
// end ; end ;
17593: GO 17484
17595: POP
17596: POP
// end ; end_of_file
17597: PPOPN 4
17599: END
// every 10 10$0 do
17600: GO 17602
17602: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17603: LD_INT 5
17605: PPUSH
17606: LD_INT 3
17608: PPUSH
17609: LD_INT 2
17611: PPUSH
17612: LD_INT 5
17614: PPUSH
17615: CALL_OW 12
17619: PUSH
17620: LD_INT 2
17622: PUSH
17623: LD_INT 3
17625: PUSH
17626: LD_INT 3
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: LD_OWVAR 67
17638: ARRAY
17639: PLUS
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 0
17646: PPUSH
17647: LD_INT 0
17649: PPUSH
17650: LD_INT 1
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: LIST
17663: PUSH
17664: LD_OWVAR 67
17668: ARRAY
17669: PPUSH
17670: LD_EXP 16
17674: PPUSH
17675: LD_EXP 17
17679: PPUSH
17680: CALL_OW 12
17684: PPUSH
17685: LD_INT 4
17687: PPUSH
17688: LD_INT 14
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: LD_INT 2
17696: PPUSH
17697: CALL 6321 0 12
// end ;
17701: END
// every 15 15$0 do
17702: GO 17704
17704: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17705: LD_INT 5
17707: PPUSH
17708: LD_INT 3
17710: PPUSH
17711: LD_INT 3
17713: PPUSH
17714: LD_INT 5
17716: PPUSH
17717: CALL_OW 12
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 3
17727: PUSH
17728: LD_INT 3
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: PUSH
17736: LD_OWVAR 67
17740: ARRAY
17741: PLUS
17742: PPUSH
17743: LD_INT 0
17745: PPUSH
17746: LD_INT 0
17748: PPUSH
17749: LD_INT 0
17751: PPUSH
17752: LD_INT 2
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: LD_INT 3
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: PUSH
17766: LD_OWVAR 67
17770: ARRAY
17771: PPUSH
17772: LD_EXP 16
17776: PPUSH
17777: LD_EXP 17
17781: PPUSH
17782: CALL_OW 12
17786: PPUSH
17787: LD_INT 4
17789: PPUSH
17790: LD_INT 14
17792: PPUSH
17793: LD_INT 1
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: CALL 6321 0 12
// end ;
17803: END
// every 25 25$0 do
17804: GO 17806
17806: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17807: LD_INT 5
17809: PPUSH
17810: LD_INT 3
17812: PPUSH
17813: LD_INT 2
17815: PPUSH
17816: LD_INT 3
17818: PPUSH
17819: CALL_OW 12
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: LD_INT 3
17829: PUSH
17830: LD_INT 3
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: LIST
17837: PUSH
17838: LD_OWVAR 67
17842: ARRAY
17843: PLUS
17844: PPUSH
17845: LD_INT 0
17847: PPUSH
17848: LD_INT 0
17850: PPUSH
17851: LD_INT 0
17853: PPUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 2
17859: PUSH
17860: LD_INT 3
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: PUSH
17868: LD_OWVAR 67
17872: ARRAY
17873: PPUSH
17874: LD_EXP 16
17878: PPUSH
17879: LD_EXP 17
17883: PPUSH
17884: CALL_OW 12
17888: PPUSH
17889: LD_INT 4
17891: PPUSH
17892: LD_INT 14
17894: PPUSH
17895: LD_INT 1
17897: PPUSH
17898: LD_INT 1
17900: PPUSH
17901: CALL 6321 0 12
// end ;
17905: END
// every 26 26$0 do
17906: GO 17908
17908: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17909: LD_INT 5
17911: PPUSH
17912: LD_INT 3
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: LD_INT 3
17920: PPUSH
17921: CALL_OW 12
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: LD_INT 2
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: PUSH
17940: LD_OWVAR 67
17944: ARRAY
17945: PLUS
17946: PPUSH
17947: LD_INT 0
17949: PPUSH
17950: LD_INT 0
17952: PPUSH
17953: LD_INT 0
17955: PPUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: LD_INT 3
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: PUSH
17970: LD_OWVAR 67
17974: ARRAY
17975: PPUSH
17976: LD_EXP 16
17980: PPUSH
17981: LD_EXP 17
17985: PPUSH
17986: CALL_OW 12
17990: PPUSH
17991: LD_INT 4
17993: PPUSH
17994: LD_INT 14
17996: PPUSH
17997: LD_INT 1
17999: PPUSH
18000: LD_INT 2
18002: PPUSH
18003: CALL 6321 0 12
// end ;
18007: END
// every 25 25$0 do
18008: GO 18010
18010: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18011: LD_INT 4
18013: PPUSH
18014: LD_INT 5
18016: PPUSH
18017: LD_INT 3
18019: PUSH
18020: LD_INT 4
18022: PUSH
18023: LD_INT 5
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: PUSH
18031: LD_OWVAR 67
18035: ARRAY
18036: PPUSH
18037: LD_EXP 16
18041: PPUSH
18042: LD_EXP 17
18046: PPUSH
18047: CALL_OW 12
18051: PPUSH
18052: LD_INT 3
18054: PPUSH
18055: LD_INT 1
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: LD_INT 42
18063: PUSH
18064: LD_INT 42
18066: PUSH
18067: LD_INT 43
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 42
18077: PUSH
18078: LD_INT 43
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 43
18087: PUSH
18088: LD_INT 43
18090: PUSH
18091: LD_INT 43
18093: PUSH
18094: LD_INT 44
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: PUSH
18108: LD_OWVAR 67
18112: ARRAY
18113: PPUSH
18114: EMPTY
18115: PPUSH
18116: EMPTY
18117: PPUSH
18118: LD_INT 1
18120: PPUSH
18121: CALL 9229 0 11
// end ; end_of_file
18125: END
// every 0 0$1 trigger startTimer = 1 do
18126: LD_EXP 28
18130: PUSH
18131: LD_INT 1
18133: EQUAL
18134: IFFALSE 18264
18136: GO 18138
18138: DISABLE
// begin enable ;
18139: ENABLE
// if timerStatus = 1 then
18140: LD_EXP 27
18144: PUSH
18145: LD_INT 1
18147: EQUAL
18148: IFFALSE 18181
// begin timeToSupport = timeToSupport - 0 0$01 ;
18150: LD_ADDR_EXP 26
18154: PUSH
18155: LD_EXP 26
18159: PUSH
18160: LD_INT 35
18162: MINUS
18163: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18164: LD_ADDR_OWVAR 47
18168: PUSH
18169: LD_STRING #Am04-1
18171: PUSH
18172: LD_EXP 26
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: ST_TO_ADDR
// end ; if timerStatus = 2 then
18181: LD_EXP 27
18185: PUSH
18186: LD_INT 2
18188: EQUAL
18189: IFFALSE 18222
// begin timeToSupport = timeToSupport - 0 0$01 ;
18191: LD_ADDR_EXP 26
18195: PUSH
18196: LD_EXP 26
18200: PUSH
18201: LD_INT 35
18203: MINUS
18204: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18205: LD_ADDR_OWVAR 47
18209: PUSH
18210: LD_STRING #Am04-2
18212: PUSH
18213: LD_EXP 26
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: ST_TO_ADDR
// end ; if timerStatus = 3 then
18222: LD_EXP 27
18226: PUSH
18227: LD_INT 3
18229: EQUAL
18230: IFFALSE 18246
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18232: LD_ADDR_EXP 25
18236: PUSH
18237: LD_EXP 25
18241: PUSH
18242: LD_INT 35
18244: MINUS
18245: ST_TO_ADDR
// end ; if timerStatus = 4 then
18246: LD_EXP 27
18250: PUSH
18251: LD_INT 4
18253: EQUAL
18254: IFFALSE 18264
// begin display_strings =  ;
18256: LD_ADDR_OWVAR 47
18260: PUSH
18261: LD_STRING 
18263: ST_TO_ADDR
// end ; end ; end_of_file
18264: END
// every 0 0$1 trigger IsDead ( JMM ) do
18265: LD_EXP 1
18269: PPUSH
18270: CALL_OW 301
18274: IFFALSE 18286
18276: GO 18278
18278: DISABLE
// YouLost ( JMM ) ;
18279: LD_STRING JMM
18281: PPUSH
18282: CALL_OW 104
18286: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18287: LD_INT 4
18289: PPUSH
18290: CALL_OW 301
18294: IFFALSE 18306
18296: GO 18298
18298: DISABLE
// YouLost ( Base ) ; end_of_file
18299: LD_STRING Base
18301: PPUSH
18302: CALL_OW 104
18306: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
18307: LD_EXP 15
18311: PPUSH
18312: CALL_OW 301
18316: IFFALSE 18698
18318: GO 18320
18320: DISABLE
18321: LD_INT 0
18323: PPUSH
// begin AIEnable = 0 ;
18324: LD_ADDR_EXP 35
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// escapeAvalaible = 1 ;
18332: LD_ADDR_EXP 38
18336: PUSH
18337: LD_INT 1
18339: ST_TO_ADDR
// InGameOn ;
18340: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18344: LD_INT 3
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: LD_INT 1
18352: PPUSH
18353: LD_INT 0
18355: PPUSH
18356: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18360: LD_INT 6
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: LD_INT 1
18368: PPUSH
18369: LD_INT 0
18371: PPUSH
18372: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18376: LD_INT 5
18378: PPUSH
18379: LD_INT 1
18381: PPUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_INT 0
18387: PPUSH
18388: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18392: LD_INT 3
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18402: LD_INT 97
18404: PPUSH
18405: LD_INT 91
18407: PPUSH
18408: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18412: LD_INT 22
18414: PUSH
18415: LD_INT 3
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: PPUSH
18441: CALL_OW 121
// wait ( 0 0$01 ) ;
18445: LD_INT 35
18447: PPUSH
18448: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18452: LD_INT 22
18454: PUSH
18455: LD_INT 3
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 21
18464: PUSH
18465: LD_INT 1
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PPUSH
18476: CALL_OW 69
18480: PPUSH
18481: LD_INT 124
18483: PPUSH
18484: LD_INT 98
18486: PPUSH
18487: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18491: LD_INT 22
18493: PUSH
18494: LD_INT 5
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 21
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PPUSH
18515: CALL_OW 69
18519: PPUSH
18520: CALL_OW 121
// wait ( 0 0$01 ) ;
18524: LD_INT 35
18526: PPUSH
18527: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18531: LD_INT 22
18533: PUSH
18534: LD_INT 5
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 21
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL_OW 69
18559: PPUSH
18560: LD_INT 124
18562: PPUSH
18563: LD_INT 98
18565: PPUSH
18566: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18570: LD_INT 22
18572: PUSH
18573: LD_INT 6
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 21
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PPUSH
18594: CALL_OW 69
18598: PPUSH
18599: CALL_OW 121
// wait ( 0 0$01 ) ;
18603: LD_INT 35
18605: PPUSH
18606: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18610: LD_INT 22
18612: PUSH
18613: LD_INT 6
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 21
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PPUSH
18634: CALL_OW 69
18638: PPUSH
18639: LD_INT 124
18641: PPUSH
18642: LD_INT 98
18644: PPUSH
18645: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18649: LD_INT 22
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 21
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PPUSH
18673: CALL_OW 69
18677: PPUSH
18678: LD_INT 124
18680: PPUSH
18681: LD_INT 98
18683: PPUSH
18684: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
18688: LD_INT 124
18690: PPUSH
18691: LD_INT 98
18693: PPUSH
18694: CALL_OW 84
// end ;
18698: PPOPN 1
18700: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
18701: LD_INT 23
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 24
18723: PUSH
18724: LD_INT 250
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: PPUSH
18736: CALL_OW 69
18740: PUSH
18741: LD_INT 0
18743: EQUAL
18744: IFFALSE 18753
18746: GO 18748
18748: DISABLE
// FinishMission ;
18749: CALL 18924 0 0
18753: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18754: LD_EXP 38
18758: PUSH
18759: LD_INT 1
18761: EQUAL
18762: IFFALSE 18921
18764: GO 18766
18766: DISABLE
18767: LD_INT 0
18769: PPUSH
// begin enable ;
18770: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18771: LD_ADDR_VAR 0 1
18775: PUSH
18776: LD_INT 22
18778: PUSH
18779: LD_INT 3
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PPUSH
18786: CALL_OW 69
18790: PUSH
18791: FOR_IN
18792: IFFALSE 18819
// if IsInArea ( i , RussianEscape ) then
18794: LD_VAR 0 1
18798: PPUSH
18799: LD_INT 5
18801: PPUSH
18802: CALL_OW 308
18806: IFFALSE 18817
// RemoveUnit ( i ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: CALL_OW 64
18817: GO 18791
18819: POP
18820: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
18821: LD_ADDR_VAR 0 1
18825: PUSH
18826: LD_INT 22
18828: PUSH
18829: LD_INT 5
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PPUSH
18836: CALL_OW 69
18840: PUSH
18841: FOR_IN
18842: IFFALSE 18869
// if IsInArea ( i , RussianEscape ) then
18844: LD_VAR 0 1
18848: PPUSH
18849: LD_INT 5
18851: PPUSH
18852: CALL_OW 308
18856: IFFALSE 18867
// RemoveUnit ( i ) ;
18858: LD_VAR 0 1
18862: PPUSH
18863: CALL_OW 64
18867: GO 18841
18869: POP
18870: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18871: LD_ADDR_VAR 0 1
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_INT 6
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PPUSH
18886: CALL_OW 69
18890: PUSH
18891: FOR_IN
18892: IFFALSE 18919
// if IsInArea ( i , RussianEscape ) then
18894: LD_VAR 0 1
18898: PPUSH
18899: LD_INT 5
18901: PPUSH
18902: CALL_OW 308
18906: IFFALSE 18917
// RemoveUnit ( i ) ;
18908: LD_VAR 0 1
18912: PPUSH
18913: CALL_OW 64
18917: GO 18891
18919: POP
18920: POP
// end ;
18921: PPOPN 1
18923: END
// export function FinishMission ; var tmp ; begin
18924: LD_INT 0
18926: PPUSH
18927: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18928: LD_INT 69
18930: PPUSH
18931: LD_INT 1
18933: PPUSH
18934: CALL_OW 321
18938: PPUSH
18939: LD_STRING GatlingInGamma
18941: PPUSH
18942: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
18946: LD_EXP 32
18950: PUSH
18951: LD_INT 1
18953: EQUAL
18954: PUSH
18955: LD_EXP 33
18959: PUSH
18960: LD_INT 1
18962: EQUAL
18963: AND
18964: IFFALSE 18978
// begin AddMedal ( oil , 1 ) ;
18966: LD_STRING oil
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 101
// end else
18976: GO 19071
// begin if buildOil = 1 and buildPower = 0 then
18978: LD_EXP 32
18982: PUSH
18983: LD_INT 1
18985: EQUAL
18986: PUSH
18987: LD_EXP 33
18991: PUSH
18992: LD_INT 0
18994: EQUAL
18995: AND
18996: IFFALSE 19009
// AddMedal ( oil , - 1 ) ;
18998: LD_STRING oil
19000: PPUSH
19001: LD_INT 1
19003: NEG
19004: PPUSH
19005: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19009: LD_EXP 32
19013: PUSH
19014: LD_INT 0
19016: EQUAL
19017: PUSH
19018: LD_EXP 33
19022: PUSH
19023: LD_INT 1
19025: EQUAL
19026: AND
19027: IFFALSE 19040
// AddMedal ( oil , - 2 ) ;
19029: LD_STRING oil
19031: PPUSH
19032: LD_INT 2
19034: NEG
19035: PPUSH
19036: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19040: LD_EXP 32
19044: PUSH
19045: LD_INT 0
19047: EQUAL
19048: PUSH
19049: LD_EXP 33
19053: PUSH
19054: LD_INT 0
19056: EQUAL
19057: AND
19058: IFFALSE 19071
// AddMedal ( oil , - 3 ) ;
19060: LD_STRING oil
19062: PPUSH
19063: LD_INT 3
19065: NEG
19066: PPUSH
19067: CALL_OW 101
// end ; if lostCounter < 3 then
19071: LD_EXP 36
19075: PUSH
19076: LD_INT 3
19078: LESS
19079: IFFALSE 19093
// begin AddMedal ( deaths , 1 ) ;
19081: LD_STRING deaths
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: CALL_OW 101
// end else
19091: GO 19104
// begin AddMedal ( deaths , - 1 ) ;
19093: LD_STRING deaths
19095: PPUSH
19096: LD_INT 1
19098: NEG
19099: PPUSH
19100: CALL_OW 101
// end ; if honor = 1 then
19104: LD_EXP 37
19108: PUSH
19109: LD_INT 1
19111: EQUAL
19112: IFFALSE 19126
// begin AddMedal ( honour , 1 ) ;
19114: LD_STRING honour
19116: PPUSH
19117: LD_INT 1
19119: PPUSH
19120: CALL_OW 101
// end else
19124: GO 19137
// begin AddMedal ( honour , - 1 ) ;
19126: LD_STRING honour
19128: PPUSH
19129: LD_INT 1
19131: NEG
19132: PPUSH
19133: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19137: LD_STRING Main
19139: PPUSH
19140: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19144: LD_INT 22
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 23
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 21
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: PPUSH
19184: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19188: LD_EXP 1
19192: PPUSH
19193: LD_EXP 42
19197: PUSH
19198: LD_STRING JMM
19200: STR
19201: PPUSH
19202: CALL_OW 38
// if IsOK ( Bobby ) then
19206: LD_EXP 2
19210: PPUSH
19211: CALL_OW 302
19215: IFFALSE 19235
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19217: LD_EXP 2
19221: PPUSH
19222: LD_EXP 42
19226: PUSH
19227: LD_STRING Bobby
19229: STR
19230: PPUSH
19231: CALL_OW 38
// if IsOK ( Cyrus ) then
19235: LD_EXP 3
19239: PPUSH
19240: CALL_OW 302
19244: IFFALSE 19264
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19246: LD_EXP 3
19250: PPUSH
19251: LD_EXP 42
19255: PUSH
19256: LD_STRING Cyrus
19258: STR
19259: PPUSH
19260: CALL_OW 38
// if IsOK ( Lisa ) then
19264: LD_EXP 4
19268: PPUSH
19269: CALL_OW 302
19273: IFFALSE 19293
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19275: LD_EXP 4
19279: PPUSH
19280: LD_EXP 42
19284: PUSH
19285: LD_STRING Lisa
19287: STR
19288: PPUSH
19289: CALL_OW 38
// if IsOK ( Brown ) then
19293: LD_EXP 7
19297: PPUSH
19298: CALL_OW 302
19302: IFFALSE 19322
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19304: LD_EXP 7
19308: PPUSH
19309: LD_EXP 42
19313: PUSH
19314: LD_STRING Brown
19316: STR
19317: PPUSH
19318: CALL_OW 38
// if IsOK ( Donaldson ) then
19322: LD_EXP 13
19326: PPUSH
19327: CALL_OW 302
19331: IFFALSE 19351
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19333: LD_EXP 13
19337: PPUSH
19338: LD_EXP 42
19342: PUSH
19343: LD_STRING Donaldson
19345: STR
19346: PPUSH
19347: CALL_OW 38
// if IsOK ( Frank ) then
19351: LD_EXP 5
19355: PPUSH
19356: CALL_OW 302
19360: IFFALSE 19380
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19362: LD_EXP 5
19366: PPUSH
19367: LD_EXP 42
19371: PUSH
19372: LD_STRING Frank
19374: STR
19375: PPUSH
19376: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19380: LD_INT 50
19382: PUSH
19383: EMPTY
19384: LIST
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 21
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: PPUSH
19411: CALL_OW 69
19415: PUSH
19416: LD_EXP 1
19420: PUSH
19421: LD_EXP 2
19425: PUSH
19426: LD_EXP 3
19430: PUSH
19431: LD_EXP 4
19435: PUSH
19436: LD_EXP 7
19440: PUSH
19441: LD_EXP 13
19445: PUSH
19446: LD_EXP 5
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: DIFF
19460: PPUSH
19461: LD_STRING 04_other_survivors
19463: PPUSH
19464: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
19468: LD_INT 22
19470: PPUSH
19471: CALL 19484 0 1
// YouWin ;
19475: CALL_OW 103
// end ;
19479: LD_VAR 0 1
19483: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19484: LD_INT 0
19486: PPUSH
19487: PPUSH
19488: PPUSH
19489: PPUSH
// gammaBase = [ ] ;
19490: LD_ADDR_VAR 0 4
19494: PUSH
19495: EMPTY
19496: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
19497: LD_ADDR_VAR 0 5
19501: PUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: LD_INT 22
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 3
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 50
19529: PUSH
19530: EMPTY
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 70
19542: ST_TO_ADDR
// for i in buildings do
19543: LD_ADDR_VAR 0 3
19547: PUSH
19548: LD_VAR 0 5
19552: PUSH
19553: FOR_IN
19554: IFFALSE 19891
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19556: LD_VAR 0 3
19560: PPUSH
19561: CALL_OW 266
19565: PUSH
19566: LD_INT 6
19568: PUSH
19569: LD_INT 7
19571: PUSH
19572: LD_INT 8
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: IN
19580: IFFALSE 19694
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19582: LD_ADDR_VAR 0 4
19586: PUSH
19587: LD_VAR 0 4
19591: PUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: CALL_OW 266
19601: PUSH
19602: LD_VAR 0 3
19606: PPUSH
19607: CALL_OW 250
19611: PUSH
19612: LD_VAR 0 3
19616: PPUSH
19617: CALL_OW 251
19621: PUSH
19622: LD_VAR 0 3
19626: PPUSH
19627: CALL_OW 254
19631: PUSH
19632: LD_VAR 0 3
19636: PPUSH
19637: CALL_OW 267
19641: PUSH
19642: LD_VAR 0 3
19646: PPUSH
19647: CALL_OW 248
19651: PUSH
19652: LD_VAR 0 3
19656: PPUSH
19657: LD_INT 1
19659: PPUSH
19660: CALL_OW 268
19664: PUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_INT 2
19672: PPUSH
19673: CALL_OW 268
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: PUSH
19688: EMPTY
19689: LIST
19690: ADD
19691: ST_TO_ADDR
19692: GO 19889
// if GetBType ( i ) in [ b_bunker ] then
19694: LD_VAR 0 3
19698: PPUSH
19699: CALL_OW 266
19703: PUSH
19704: LD_INT 32
19706: PUSH
19707: EMPTY
19708: LIST
19709: IN
19710: IFFALSE 19807
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19712: LD_ADDR_VAR 0 4
19716: PUSH
19717: LD_VAR 0 4
19721: PUSH
19722: LD_VAR 0 3
19726: PPUSH
19727: CALL_OW 266
19731: PUSH
19732: LD_VAR 0 3
19736: PPUSH
19737: CALL_OW 250
19741: PUSH
19742: LD_VAR 0 3
19746: PPUSH
19747: CALL_OW 251
19751: PUSH
19752: LD_VAR 0 3
19756: PPUSH
19757: CALL_OW 254
19761: PUSH
19762: LD_VAR 0 3
19766: PPUSH
19767: CALL_OW 267
19771: PUSH
19772: LD_VAR 0 3
19776: PPUSH
19777: CALL_OW 248
19781: PUSH
19782: LD_VAR 0 3
19786: PPUSH
19787: CALL_OW 269
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: PUSH
19801: EMPTY
19802: LIST
19803: ADD
19804: ST_TO_ADDR
19805: GO 19889
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19807: LD_ADDR_VAR 0 4
19811: PUSH
19812: LD_VAR 0 4
19816: PUSH
19817: LD_VAR 0 3
19821: PPUSH
19822: CALL_OW 266
19826: PUSH
19827: LD_VAR 0 3
19831: PPUSH
19832: CALL_OW 250
19836: PUSH
19837: LD_VAR 0 3
19841: PPUSH
19842: CALL_OW 251
19846: PUSH
19847: LD_VAR 0 3
19851: PPUSH
19852: CALL_OW 254
19856: PUSH
19857: LD_VAR 0 3
19861: PPUSH
19862: CALL_OW 267
19866: PUSH
19867: LD_VAR 0 3
19871: PPUSH
19872: CALL_OW 248
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: ADD
19888: ST_TO_ADDR
// end ;
19889: GO 19553
19891: POP
19892: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19893: LD_VAR 0 4
19897: PPUSH
19898: LD_STRING GammaBase
19900: PPUSH
19901: CALL_OW 39
// end ; end_of_file
19905: LD_VAR 0 2
19909: RET
// every 1 1$15 do
19910: GO 19912
19912: DISABLE
// begin if supply <= 13 and supply > 7 then
19913: LD_EXP 34
19917: PUSH
19918: LD_INT 13
19920: LESSEQUAL
19921: PUSH
19922: LD_EXP 34
19926: PUSH
19927: LD_INT 7
19929: GREATER
19930: AND
19931: IFFALSE 19954
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19933: LD_INT 3
19935: PPUSH
19936: LD_INT 5
19938: PPUSH
19939: CALL_OW 12
19943: PPUSH
19944: LD_INT 18
19946: PPUSH
19947: LD_INT 1
19949: PPUSH
19950: CALL_OW 55
// if supply <= 7 and supply > 4 then
19954: LD_EXP 34
19958: PUSH
19959: LD_INT 7
19961: LESSEQUAL
19962: PUSH
19963: LD_EXP 34
19967: PUSH
19968: LD_INT 4
19970: GREATER
19971: AND
19972: IFFALSE 19995
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19974: LD_INT 3
19976: PPUSH
19977: LD_INT 5
19979: PPUSH
19980: CALL_OW 12
19984: PPUSH
19985: LD_INT 19
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 55
// if supply <= 4 and supply > 0 then
19995: LD_EXP 34
19999: PUSH
20000: LD_INT 4
20002: LESSEQUAL
20003: PUSH
20004: LD_EXP 34
20008: PUSH
20009: LD_INT 0
20011: GREATER
20012: AND
20013: IFFALSE 20036
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20015: LD_INT 3
20017: PPUSH
20018: LD_INT 5
20020: PPUSH
20021: CALL_OW 12
20025: PPUSH
20026: LD_INT 20
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: CALL_OW 55
// if supply > 0 then
20036: LD_EXP 34
20040: PUSH
20041: LD_INT 0
20043: GREATER
20044: IFFALSE 20061
// begin supply = supply - 1 ;
20046: LD_ADDR_EXP 34
20050: PUSH
20051: LD_EXP 34
20055: PUSH
20056: LD_INT 1
20058: MINUS
20059: ST_TO_ADDR
// enable ;
20060: ENABLE
// end ; end ;
20061: END
