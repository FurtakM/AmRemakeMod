// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 42
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 43
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 41
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 40
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 22
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 23
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 24
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 26
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 27
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 28
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 29
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 30
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 31
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 32
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 33
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 11 , 12 , 14 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 34
 176: PUSH
 177: LD_INT 11
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 14
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 35
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 39
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 36
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 37
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 38
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 3756 0 0
// PrepareRussianBase ;
 241: CALL 2077 0 0
// PrepareRussianCommander ;
 245: CALL 2028 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 41
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
// uc_side = 1 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 1
 401: ST_TO_ADDR
// uc_nation = 1 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 1
 409: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 410: LD_ADDR_EXP 1
 414: PUSH
 415: LD_STRING JMM
 417: PPUSH
 418: LD_INT 1
 420: PPUSH
 421: CALL 3291 0 2
 425: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 426: LD_ADDR_EXP 4
 430: PUSH
 431: LD_STRING Lisa
 433: PPUSH
 434: LD_INT 1
 436: PPUSH
 437: CALL 3291 0 2
 441: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 442: LD_ADDR_EXP 7
 446: PUSH
 447: LD_STRING Brown
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL 3291 0 2
 457: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 458: LD_ADDR_EXP 8
 462: PUSH
 463: LD_STRING Dickens
 465: PPUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL 3291 0 2
 473: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 474: LD_ADDR_EXP 9
 478: PUSH
 479: LD_STRING Woodruff
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 3291 0 2
 489: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 490: LD_ADDR_EXP 12
 494: PUSH
 495: LD_STRING Campell
 497: PPUSH
 498: LD_INT 0
 500: PPUSH
 501: CALL 3291 0 2
 505: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 506: LD_ADDR_EXP 10
 510: PUSH
 511: LD_STRING Knight
 513: PPUSH
 514: LD_INT 0
 516: PPUSH
 517: CALL 3291 0 2
 521: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 522: LD_ADDR_EXP 11
 526: PUSH
 527: LD_STRING Claptopn
 529: PPUSH
 530: LD_INT 0
 532: PPUSH
 533: CALL 3291 0 2
 537: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 538: LD_ADDR_EXP 14
 542: PUSH
 543: LD_STRING Harisson
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: CALL 3291 0 2
 553: ST_TO_ADDR
// if Lisa = false then
 554: LD_EXP 4
 558: PUSH
 559: LD_INT 0
 561: EQUAL
 562: IFFALSE 580
// Bobby = PrepareUnit ( Bobby , true ) ;
 564: LD_ADDR_EXP 2
 568: PUSH
 569: LD_STRING Bobby
 571: PPUSH
 572: LD_INT 1
 574: PPUSH
 575: CALL 3291 0 2
 579: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 580: LD_EXP 4
 584: PUSH
 585: LD_INT 0
 587: EQUAL
 588: PUSH
 589: LD_EXP 2
 593: PUSH
 594: LD_INT 0
 596: EQUAL
 597: AND
 598: IFFALSE 616
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 600: LD_ADDR_EXP 3
 604: PUSH
 605: LD_STRING Cyrus
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 3291 0 2
 615: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 616: LD_EXP 4
 620: PUSH
 621: LD_INT 0
 623: EQUAL
 624: PUSH
 625: LD_EXP 2
 629: PUSH
 630: LD_INT 0
 632: EQUAL
 633: AND
 634: PUSH
 635: LD_EXP 3
 639: PUSH
 640: LD_INT 0
 642: EQUAL
 643: AND
 644: IFFALSE 662
// RandomBeforeMission = PrepareUnit ( 03_others , true ) ;
 646: LD_ADDR_EXP 6
 650: PUSH
 651: LD_STRING 03_others
 653: PPUSH
 654: LD_INT 1
 656: PPUSH
 657: CALL 3291 0 2
 661: ST_TO_ADDR
// uc_side = 4 ;
 662: LD_ADDR_OWVAR 20
 666: PUSH
 667: LD_INT 4
 669: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 670: LD_ADDR_EXP 13
 674: PUSH
 675: LD_STRING Donaldson
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL 3291 0 2
 685: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 686: LD_ADDR_EXP 5
 690: PUSH
 691: LD_STRING Frank
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: CALL 3291 0 2
 701: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 702: LD_EXP 1
 706: PPUSH
 707: LD_INT 32
 709: PPUSH
 710: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 714: LD_EXP 7
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 729: LD_EXP 7
 733: PPUSH
 734: LD_INT 32
 736: PPUSH
 737: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 741: LD_EXP 8
 745: PPUSH
 746: LD_INT 2
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 756: LD_EXP 9
 760: PPUSH
 761: LD_INT 2
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 771: LD_EXP 12
 775: PPUSH
 776: LD_INT 2
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 786: LD_EXP 10
 790: PPUSH
 791: LD_INT 2
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 801: LD_EXP 11
 805: PPUSH
 806: LD_INT 2
 808: PPUSH
 809: LD_INT 0
 811: PPUSH
 812: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 816: LD_EXP 4
 820: PPUSH
 821: LD_INT 2
 823: PPUSH
 824: LD_INT 0
 826: PPUSH
 827: CALL_OW 49
// if Lisa = false then
 831: LD_EXP 4
 835: PUSH
 836: LD_INT 0
 838: EQUAL
 839: IFFALSE 856
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 841: LD_EXP 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL_OW 49
// if Lisa = false and Bobby = false then
 856: LD_EXP 4
 860: PUSH
 861: LD_INT 0
 863: EQUAL
 864: PUSH
 865: LD_EXP 2
 869: PUSH
 870: LD_INT 0
 872: EQUAL
 873: AND
 874: IFFALSE 891
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 2
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 891: LD_EXP 4
 895: PUSH
 896: LD_INT 0
 898: EQUAL
 899: PUSH
 900: LD_EXP 2
 904: PUSH
 905: LD_INT 0
 907: EQUAL
 908: AND
 909: PUSH
 910: LD_EXP 3
 914: PUSH
 915: LD_INT 0
 917: EQUAL
 918: AND
 919: IFFALSE 936
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_INT 2
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end ;
 936: LD_VAR 0 1
 940: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 946: LD_EXP 13
 950: PPUSH
 951: LD_INT 10
 953: PPUSH
 954: LD_INT 0
 956: PPUSH
 957: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 961: LD_EXP 5
 965: PPUSH
 966: LD_INT 10
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: CALL_OW 49
// uc_nation = 1 ;
 976: LD_ADDR_OWVAR 21
 980: PUSH
 981: LD_INT 1
 983: ST_TO_ADDR
// uc_side = 4 ;
 984: LD_ADDR_OWVAR 20
 988: PUSH
 989: LD_INT 4
 991: ST_TO_ADDR
// hc_class := 3 ;
 992: LD_ADDR_OWVAR 28
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// hc_sex := sex_male ;
1000: LD_ADDR_OWVAR 27
1004: PUSH
1005: LD_INT 1
1007: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1008: LD_ADDR_OWVAR 33
1012: PUSH
1013: LD_STRING SecondCharsGal
1015: ST_TO_ADDR
// hc_face_number := 53 ;
1016: LD_ADDR_OWVAR 34
1020: PUSH
1021: LD_INT 53
1023: ST_TO_ADDR
// hc_name := Freddie Warner ;
1024: LD_ADDR_OWVAR 26
1028: PUSH
1029: LD_STRING Freddie Warner
1031: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1032: LD_ADDR_OWVAR 31
1036: PUSH
1037: LD_INT 1
1039: PUSH
1040: LD_INT 0
1042: PUSH
1043: LD_INT 3
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: ST_TO_ADDR
// un = CreateHuman ;
1055: LD_ADDR_VAR 0 3
1059: PUSH
1060: CALL_OW 44
1064: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1065: LD_VAR 0 3
1069: PPUSH
1070: LD_INT 10
1072: PPUSH
1073: LD_INT 0
1075: PPUSH
1076: CALL_OW 49
// hc_class := 1 ;
1080: LD_ADDR_OWVAR 28
1084: PUSH
1085: LD_INT 1
1087: ST_TO_ADDR
// hc_sex := sex_male ;
1088: LD_ADDR_OWVAR 27
1092: PUSH
1093: LD_INT 1
1095: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1096: LD_ADDR_OWVAR 33
1100: PUSH
1101: LD_STRING SecondCharsGal
1103: ST_TO_ADDR
// hc_face_number := 56 ;
1104: LD_ADDR_OWVAR 34
1108: PUSH
1109: LD_INT 56
1111: ST_TO_ADDR
// hc_name := Mel Brennan ;
1112: LD_ADDR_OWVAR 26
1116: PUSH
1117: LD_STRING Mel Brennan
1119: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1120: LD_ADDR_OWVAR 31
1124: PUSH
1125: LD_INT 2
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 0
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: ST_TO_ADDR
// un = CreateHuman ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: CALL_OW 44
1152: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_INT 10
1160: PPUSH
1161: LD_INT 0
1163: PPUSH
1164: CALL_OW 49
// hc_class := 1 ;
1168: LD_ADDR_OWVAR 28
1172: PUSH
1173: LD_INT 1
1175: ST_TO_ADDR
// hc_sex := sex_male ;
1176: LD_ADDR_OWVAR 27
1180: PUSH
1181: LD_INT 1
1183: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1184: LD_ADDR_OWVAR 33
1188: PUSH
1189: LD_STRING AmGalRemake
1191: ST_TO_ADDR
// hc_face_number := 5 ;
1192: LD_ADDR_OWVAR 34
1196: PUSH
1197: LD_INT 5
1199: ST_TO_ADDR
// hc_name := Bob Joplin ;
1200: LD_ADDR_OWVAR 26
1204: PUSH
1205: LD_STRING Bob Joplin
1207: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1208: LD_ADDR_OWVAR 31
1212: PUSH
1213: LD_INT 3
1215: PUSH
1216: LD_INT 1
1218: PUSH
1219: LD_INT 1
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: ST_TO_ADDR
// un = CreateHuman ;
1231: LD_ADDR_VAR 0 3
1235: PUSH
1236: CALL_OW 44
1240: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_INT 10
1248: PPUSH
1249: LD_INT 0
1251: PPUSH
1252: CALL_OW 49
// hc_class := 3 ;
1256: LD_ADDR_OWVAR 28
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// hc_sex := sex_female ;
1264: LD_ADDR_OWVAR 27
1268: PUSH
1269: LD_INT 2
1271: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1272: LD_ADDR_OWVAR 33
1276: PUSH
1277: LD_STRING AmGalRemake
1279: ST_TO_ADDR
// hc_face_number := 4 ;
1280: LD_ADDR_OWVAR 34
1284: PUSH
1285: LD_INT 4
1287: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Elizabeth Whitney
1295: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1296: LD_ADDR_OWVAR 31
1300: PUSH
1301: LD_INT 2
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 4
1309: PUSH
1310: LD_INT 2
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: ST_TO_ADDR
// un = CreateHuman ;
1319: LD_ADDR_VAR 0 3
1323: PUSH
1324: CALL_OW 44
1328: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1329: LD_VAR 0 3
1333: PPUSH
1334: LD_INT 10
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// end ;
1344: LD_VAR 0 1
1348: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1349: LD_INT 0
1351: PPUSH
1352: PPUSH
1353: PPUSH
// uc_nation = 1 ;
1354: LD_ADDR_OWVAR 21
1358: PUSH
1359: LD_INT 1
1361: ST_TO_ADDR
// uc_side = 1 ;
1362: LD_ADDR_OWVAR 20
1366: PUSH
1367: LD_INT 1
1369: ST_TO_ADDR
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 59 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 59
1401: ST_TO_ADDR
// hc_name := Max Gray ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Max Gray
1409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1410: LD_ADDR_OWVAR 31
1414: PUSH
1415: LD_INT 2
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 1
1423: PUSH
1424: LD_INT 0
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: ST_TO_ADDR
// un = CreateHuman ;
1433: LD_ADDR_VAR 0 4
1437: PUSH
1438: CALL_OW 44
1442: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1443: LD_VAR 0 4
1447: PPUSH
1448: LD_INT 11
1450: PPUSH
1451: LD_INT 0
1453: PPUSH
1454: CALL_OW 49
// hc_class := 1 ;
1458: LD_ADDR_OWVAR 28
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// hc_sex := sex_male ;
1466: LD_ADDR_OWVAR 27
1470: PUSH
1471: LD_INT 1
1473: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1474: LD_ADDR_OWVAR 33
1478: PUSH
1479: LD_STRING SecondCharsGal
1481: ST_TO_ADDR
// hc_face_number := 54 ;
1482: LD_ADDR_OWVAR 34
1486: PUSH
1487: LD_INT 54
1489: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1490: LD_ADDR_OWVAR 26
1494: PUSH
1495: LD_STRING Luigi Ghbellin
1497: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1498: LD_ADDR_OWVAR 31
1502: PUSH
1503: LD_INT 1
1505: PUSH
1506: LD_INT 0
1508: PUSH
1509: LD_INT 0
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: ST_TO_ADDR
// un = CreateHuman ;
1521: LD_ADDR_VAR 0 4
1525: PUSH
1526: CALL_OW 44
1530: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1531: LD_VAR 0 4
1535: PPUSH
1536: LD_INT 11
1538: PPUSH
1539: LD_INT 0
1541: PPUSH
1542: CALL_OW 49
// hc_class := 3 ;
1546: LD_ADDR_OWVAR 28
1550: PUSH
1551: LD_INT 3
1553: ST_TO_ADDR
// hc_sex := sex_male ;
1554: LD_ADDR_OWVAR 27
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1562: LD_ADDR_OWVAR 33
1566: PUSH
1567: LD_STRING AmGalRemake
1569: ST_TO_ADDR
// hc_face_number := 6 ;
1570: LD_ADDR_OWVAR 34
1574: PUSH
1575: LD_INT 6
1577: ST_TO_ADDR
// hc_name := Leon Carter ;
1578: LD_ADDR_OWVAR 26
1582: PUSH
1583: LD_STRING Leon Carter
1585: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1586: LD_ADDR_OWVAR 31
1590: PUSH
1591: LD_INT 0
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 0
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// un = CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_INT 11
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: CALL_OW 49
// if count = 4 then
1634: LD_VAR 0 1
1638: PUSH
1639: LD_INT 4
1641: EQUAL
1642: IFFALSE 1732
// begin hc_class := 1 ;
1644: LD_ADDR_OWVAR 28
1648: PUSH
1649: LD_INT 1
1651: ST_TO_ADDR
// hc_sex := sex_male ;
1652: LD_ADDR_OWVAR 27
1656: PUSH
1657: LD_INT 1
1659: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1660: LD_ADDR_OWVAR 33
1664: PUSH
1665: LD_STRING SecondCharsGal
1667: ST_TO_ADDR
// hc_face_number := 34 ;
1668: LD_ADDR_OWVAR 34
1672: PUSH
1673: LD_INT 34
1675: ST_TO_ADDR
// hc_name := Ian Hill ;
1676: LD_ADDR_OWVAR 26
1680: PUSH
1681: LD_STRING Ian Hill
1683: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1684: LD_ADDR_OWVAR 31
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 0
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: ST_TO_ADDR
// un = CreateHuman ;
1707: LD_ADDR_VAR 0 4
1711: PUSH
1712: CALL_OW 44
1716: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1717: LD_VAR 0 4
1721: PPUSH
1722: LD_INT 11
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// end ; if count = 5 then
1732: LD_VAR 0 1
1736: PUSH
1737: LD_INT 5
1739: EQUAL
1740: IFFALSE 1918
// begin hc_class := 1 ;
1742: LD_ADDR_OWVAR 28
1746: PUSH
1747: LD_INT 1
1749: ST_TO_ADDR
// hc_sex := sex_male ;
1750: LD_ADDR_OWVAR 27
1754: PUSH
1755: LD_INT 1
1757: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1758: LD_ADDR_OWVAR 33
1762: PUSH
1763: LD_STRING SecondCharsGal
1765: ST_TO_ADDR
// hc_face_number := 34 ;
1766: LD_ADDR_OWVAR 34
1770: PUSH
1771: LD_INT 34
1773: ST_TO_ADDR
// hc_name := Ian Hill ;
1774: LD_ADDR_OWVAR 26
1778: PUSH
1779: LD_STRING Ian Hill
1781: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1782: LD_ADDR_OWVAR 31
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 1
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: ST_TO_ADDR
// un = CreateHuman ;
1805: LD_ADDR_VAR 0 4
1809: PUSH
1810: CALL_OW 44
1814: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1815: LD_VAR 0 4
1819: PPUSH
1820: LD_INT 11
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 49
// hc_class := 1 ;
1830: LD_ADDR_OWVAR 28
1834: PUSH
1835: LD_INT 1
1837: ST_TO_ADDR
// hc_sex := sex_female ;
1838: LD_ADDR_OWVAR 27
1842: PUSH
1843: LD_INT 2
1845: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1846: LD_ADDR_OWVAR 33
1850: PUSH
1851: LD_STRING SecondCharsGal
1853: ST_TO_ADDR
// hc_face_number := 41 ;
1854: LD_ADDR_OWVAR 34
1858: PUSH
1859: LD_INT 41
1861: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
1862: LD_ADDR_OWVAR 26
1866: PUSH
1867: LD_STRING Kate Wadsworth
1869: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
1870: LD_ADDR_OWVAR 31
1874: PUSH
1875: LD_INT 2
1877: PUSH
1878: LD_INT 3
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: LD_INT 0
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: ST_TO_ADDR
// un = CreateHuman ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: CALL_OW 44
1902: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 11
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
1918: LD_INT 11
1920: PPUSH
1921: LD_INT 22
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 21
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 26
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 70
1960: PUSH
1961: LD_INT 1
1963: ARRAY
1964: PPUSH
1965: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
1969: LD_INT 11
1971: PPUSH
1972: LD_INT 22
1974: PUSH
1975: LD_INT 1
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 21
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 26
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PPUSH
2007: CALL_OW 70
2011: PUSH
2012: LD_INT 1
2014: ARRAY
2015: PPUSH
2016: LD_STRING D6-Sol3-1
2018: PPUSH
2019: CALL_OW 88
// end ; end_of_file
2023: LD_VAR 0 2
2027: RET
// export function PrepareRussianCommander ; begin
2028: LD_INT 0
2030: PPUSH
// uc_side = 3 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 3
2038: ST_TO_ADDR
// uc_nation = 3 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2047: LD_ADDR_EXP 15
2051: PUSH
2052: LD_STRING Stolypin
2054: PPUSH
2055: CALL_OW 25
2059: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2060: LD_EXP 15
2064: PPUSH
2065: LD_INT 21
2067: PPUSH
2068: CALL_OW 52
// end ;
2072: LD_VAR 0 1
2076: RET
// export function PrepareRussianBase ; var i ; begin
2077: LD_INT 0
2079: PPUSH
2080: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2081: LD_INT 3
2083: PPUSH
2084: LD_INT 3
2086: PPUSH
2087: LD_INT 22
2089: PPUSH
2090: LD_EXP 16
2094: PPUSH
2095: LD_EXP 17
2099: PPUSH
2100: CALL_OW 12
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: CALL 3354 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2115: LD_INT 3
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 21
2123: PPUSH
2124: LD_EXP 16
2128: PPUSH
2129: LD_EXP 17
2133: PPUSH
2134: CALL_OW 12
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: LD_INT 3
2144: PPUSH
2145: CALL 3354 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2149: LD_INT 3
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_EXP 16
2162: PPUSH
2163: LD_EXP 17
2167: PPUSH
2168: CALL_OW 12
2172: PPUSH
2173: LD_INT 4
2175: PPUSH
2176: LD_INT 2
2178: PPUSH
2179: CALL 3354 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2183: LD_INT 3
2185: PPUSH
2186: LD_INT 3
2188: PPUSH
2189: LD_INT 24
2191: PPUSH
2192: LD_EXP 16
2196: PPUSH
2197: LD_EXP 17
2201: PPUSH
2202: CALL_OW 12
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_INT 6
2212: PPUSH
2213: CALL 3354 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: LD_INT 22
2224: PUSH
2225: LD_INT 3
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 30
2234: PUSH
2235: LD_INT 32
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PPUSH
2246: CALL_OW 69
2250: PUSH
2251: FOR_IN
2252: IFFALSE 2292
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2254: LD_INT 3
2256: PPUSH
2257: LD_INT 3
2259: PPUSH
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_EXP 16
2269: PPUSH
2270: LD_EXP 17
2274: PPUSH
2275: CALL_OW 12
2279: PPUSH
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 1
2285: PPUSH
2286: CALL 3354 0 6
2290: GO 2251
2292: POP
2293: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2294: LD_ADDR_VAR 0 2
2298: PUSH
2299: LD_INT 22
2301: PUSH
2302: LD_INT 3
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 30
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 69
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2357
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2331: LD_EXP 16
2335: PPUSH
2336: LD_EXP 17
2340: PPUSH
2341: CALL_OW 12
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: CALL 3464 0 2
2355: GO 2328
2357: POP
2358: POP
// end ;
2359: LD_VAR 0 1
2363: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2364: LD_INT 0
2366: PPUSH
2367: PPUSH
2368: PPUSH
2369: PPUSH
// uc_side = 6 ;
2370: LD_ADDR_OWVAR 20
2374: PUSH
2375: LD_INT 6
2377: ST_TO_ADDR
// uc_nation = 3 ;
2378: LD_ADDR_OWVAR 21
2382: PUSH
2383: LD_INT 3
2385: ST_TO_ADDR
// for i := 1 to [ 2 , 1 , 1 ] [ Difficulty ] do
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: DOUBLE
2392: LD_INT 1
2394: DEC
2395: ST_TO_ADDR
2396: LD_INT 2
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: LD_INT 1
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: PUSH
2410: LD_OWVAR 67
2414: ARRAY
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2577
// begin vc_engine = 1 ;
2419: LD_ADDR_OWVAR 39
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// vc_control = 1 ;
2427: LD_ADDR_OWVAR 38
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2435: LD_ADDR_OWVAR 40
2439: PUSH
2440: LD_INT 42
2442: PUSH
2443: LD_INT 42
2445: PUSH
2446: LD_INT 43
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: PUSH
2454: LD_OWVAR 67
2458: ARRAY
2459: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2460: LD_ADDR_OWVAR 37
2464: PUSH
2465: LD_INT 21
2467: PUSH
2468: LD_INT 22
2470: PUSH
2471: LD_INT 22
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: PUSH
2479: LD_OWVAR 67
2483: ARRAY
2484: ST_TO_ADDR
// veh = CreateVehicle ;
2485: LD_ADDR_VAR 0 3
2489: PUSH
2490: CALL_OW 45
2494: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2495: LD_VAR 0 3
2499: PPUSH
2500: LD_INT 3
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: CALL_OW 49
// hc_gallery =  ;
2510: LD_ADDR_OWVAR 33
2514: PUSH
2515: LD_STRING 
2517: ST_TO_ADDR
// hc_name =  ;
2518: LD_ADDR_OWVAR 26
2522: PUSH
2523: LD_STRING 
2525: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2526: LD_INT 0
2528: PPUSH
2529: LD_INT 3
2531: PPUSH
2532: LD_EXP 16
2536: PPUSH
2537: LD_EXP 17
2541: PPUSH
2542: CALL_OW 12
2546: PPUSH
2547: CALL_OW 380
// un = CreateHuman ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: CALL_OW 44
2560: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2561: LD_VAR 0 4
2565: PPUSH
2566: LD_VAR 0 3
2570: PPUSH
2571: CALL_OW 52
// end ;
2575: GO 2416
2577: POP
2578: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 2
2584: PPUSH
2585: LD_EXP 16
2589: PPUSH
2590: LD_EXP 17
2594: PPUSH
2595: CALL_OW 12
2599: PUSH
2600: LD_INT 2
2602: PLUS
2603: PPUSH
2604: CALL_OW 380
// un = CreateHuman ;
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: CALL_OW 44
2617: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2618: LD_VAR 0 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_EXP 16
2643: PPUSH
2644: LD_EXP 17
2648: PPUSH
2649: CALL_OW 12
2653: PUSH
2654: LD_INT 2
2656: PLUS
2657: PPUSH
2658: CALL_OW 380
// un = CreateHuman ;
2662: LD_ADDR_VAR 0 4
2666: PUSH
2667: CALL_OW 44
2671: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2672: LD_VAR 0 4
2676: PPUSH
2677: LD_INT 3
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: DOUBLE
2693: LD_INT 1
2695: DEC
2696: ST_TO_ADDR
2697: LD_INT 2
2699: PUSH
2700: LD_INT 3
2702: PUSH
2703: LD_INT 3
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: LD_OWVAR 67
2715: ARRAY
2716: PUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: CALL_OW 12
2727: PLUS
2728: PUSH
2729: FOR_TO
2730: IFFALSE 2800
// begin hc_gallery =  ;
2732: LD_ADDR_OWVAR 33
2736: PUSH
2737: LD_STRING 
2739: ST_TO_ADDR
// hc_name =  ;
2740: LD_ADDR_OWVAR 26
2744: PUSH
2745: LD_STRING 
2747: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2748: LD_INT 0
2750: PPUSH
2751: LD_INT 1
2753: PPUSH
2754: LD_EXP 16
2758: PPUSH
2759: LD_EXP 17
2763: PPUSH
2764: CALL_OW 12
2768: PPUSH
2769: CALL_OW 380
// un = CreateHuman ;
2773: LD_ADDR_VAR 0 4
2777: PUSH
2778: CALL_OW 44
2782: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2783: LD_VAR 0 4
2787: PPUSH
2788: LD_INT 3
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 49
// end ;
2798: GO 2729
2800: POP
2801: POP
// vc_engine = 1 ;
2802: LD_ADDR_OWVAR 39
2806: PUSH
2807: LD_INT 1
2809: ST_TO_ADDR
// vc_control = 1 ;
2810: LD_ADDR_OWVAR 38
2814: PUSH
2815: LD_INT 1
2817: ST_TO_ADDR
// vc_weapon = 51 ;
2818: LD_ADDR_OWVAR 40
2822: PUSH
2823: LD_INT 51
2825: ST_TO_ADDR
// vc_chassis = 22 ;
2826: LD_ADDR_OWVAR 37
2830: PUSH
2831: LD_INT 22
2833: ST_TO_ADDR
// veh = CreateVehicle ;
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: CALL_OW 45
2843: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2844: LD_VAR 0 3
2848: PPUSH
2849: LD_INT 3
2851: PPUSH
2852: LD_INT 0
2854: PPUSH
2855: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
2859: LD_VAR 0 3
2863: PPUSH
2864: LD_INT 1
2866: PPUSH
2867: LD_INT 100
2869: PPUSH
2870: CALL_OW 290
// hc_gallery =  ;
2874: LD_ADDR_OWVAR 33
2878: PUSH
2879: LD_STRING 
2881: ST_TO_ADDR
// hc_name =  ;
2882: LD_ADDR_OWVAR 26
2886: PUSH
2887: LD_STRING 
2889: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2890: LD_INT 0
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_EXP 16
2900: PPUSH
2901: LD_EXP 17
2905: PPUSH
2906: CALL_OW 12
2910: PPUSH
2911: CALL_OW 380
// un = CreateHuman ;
2915: LD_ADDR_VAR 0 4
2919: PUSH
2920: CALL_OW 44
2924: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2925: LD_VAR 0 4
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
2939: LD_ADDR_VAR 0 2
2943: PUSH
2944: LD_INT 22
2946: PUSH
2947: LD_INT 6
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: LD_INT 3
2959: PUSH
2960: LD_INT 25
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 3
2976: PUSH
2977: LD_INT 25
2979: PUSH
2980: LD_INT 4
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PPUSH
3000: CALL_OW 69
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3025
// ComAgressiveMove ( i , 45 , 46 ) ;
3008: LD_VAR 0 2
3012: PPUSH
3013: LD_INT 45
3015: PPUSH
3016: LD_INT 46
3018: PPUSH
3019: CALL_OW 114
3023: GO 3005
3025: POP
3026: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3027: LD_ADDR_VAR 0 2
3031: PUSH
3032: LD_INT 22
3034: PUSH
3035: LD_INT 6
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 25
3044: PUSH
3045: LD_INT 2
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 69
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3093
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3064: LD_ADDR_EXP 19
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: LD_INT 48
3079: PPUSH
3080: LD_INT 55
3082: PPUSH
3083: LD_INT 5
3085: PPUSH
3086: CALL_OW 145
3090: ST_TO_ADDR
3091: GO 3061
3093: POP
3094: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_INT 22
3102: PUSH
3103: LD_INT 6
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 4
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 69
3128: PUSH
3129: FOR_IN
3130: IFFALSE 3149
// ComMoveXY ( i , 39 , 55 ) ;
3132: LD_VAR 0 2
3136: PPUSH
3137: LD_INT 39
3139: PPUSH
3140: LD_INT 55
3142: PPUSH
3143: CALL_OW 111
3147: GO 3129
3149: POP
3150: POP
// end ;
3151: LD_VAR 0 1
3155: RET
// export function PrepareFirstAttack ; var i , un ; begin
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
3160: PPUSH
// uc_side = 5 ;
3161: LD_ADDR_OWVAR 20
3165: PUSH
3166: LD_INT 5
3168: ST_TO_ADDR
// uc_nation = 3 ;
3169: LD_ADDR_OWVAR 21
3173: PUSH
3174: LD_INT 3
3176: ST_TO_ADDR
// for i := 1 to 4 do
3177: LD_ADDR_VAR 0 2
3181: PUSH
3182: DOUBLE
3183: LD_INT 1
3185: DEC
3186: ST_TO_ADDR
3187: LD_INT 4
3189: PUSH
3190: FOR_TO
3191: IFFALSE 3276
// begin hc_gallery =  ;
3193: LD_ADDR_OWVAR 33
3197: PUSH
3198: LD_STRING 
3200: ST_TO_ADDR
// hc_name =  ;
3201: LD_ADDR_OWVAR 26
3205: PUSH
3206: LD_STRING 
3208: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: LD_EXP 17
3224: PPUSH
3225: CALL_OW 12
3229: PPUSH
3230: CALL_OW 380
// un = CreateHuman ;
3234: LD_ADDR_VAR 0 3
3238: PUSH
3239: CALL_OW 44
3243: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3244: LD_VAR 0 3
3248: PPUSH
3249: LD_INT 4
3251: PPUSH
3252: LD_INT 0
3254: PPUSH
3255: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3259: LD_VAR 0 3
3263: PPUSH
3264: LD_INT 48
3266: PPUSH
3267: LD_INT 14
3269: PPUSH
3270: CALL_OW 114
// end ;
3274: GO 3190
3276: POP
3277: POP
// firstRussianAttack = 1 ;
3278: LD_ADDR_EXP 21
3282: PUSH
3283: LD_INT 1
3285: ST_TO_ADDR
// end ; end_of_file
3286: LD_VAR 0 1
3290: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
// if exist_mode then
3295: LD_VAR 0 2
3299: IFFALSE 3324
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3301: LD_ADDR_VAR 0 4
3305: PUSH
3306: LD_EXP 43
3310: PUSH
3311: LD_VAR 0 1
3315: STR
3316: PPUSH
3317: CALL_OW 34
3321: ST_TO_ADDR
// end else
3322: GO 3339
// begin unit := NewCharacter ( ident ) ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL_OW 25
3338: ST_TO_ADDR
// end ; result := unit ;
3339: LD_ADDR_VAR 0 3
3343: PUSH
3344: LD_VAR 0 4
3348: ST_TO_ADDR
// end ;
3349: LD_VAR 0 3
3353: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3354: LD_INT 0
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
// for i = 1 to count do
3360: LD_ADDR_VAR 0 8
3364: PUSH
3365: DOUBLE
3366: LD_INT 1
3368: DEC
3369: ST_TO_ADDR
3370: LD_VAR 0 6
3374: PUSH
3375: FOR_TO
3376: IFFALSE 3457
// begin uc_side = side ;
3378: LD_ADDR_OWVAR 20
3382: PUSH
3383: LD_VAR 0 1
3387: ST_TO_ADDR
// uc_nation = nation ;
3388: LD_ADDR_OWVAR 21
3392: PUSH
3393: LD_VAR 0 2
3397: ST_TO_ADDR
// hc_gallery =  ;
3398: LD_ADDR_OWVAR 33
3402: PUSH
3403: LD_STRING 
3405: ST_TO_ADDR
// hc_name =  ;
3406: LD_ADDR_OWVAR 26
3410: PUSH
3411: LD_STRING 
3413: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_VAR 0 5
3421: PPUSH
3422: LD_VAR 0 4
3426: PPUSH
3427: CALL_OW 380
// un = CreateHuman ;
3431: LD_ADDR_VAR 0 10
3435: PUSH
3436: CALL_OW 44
3440: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3441: LD_VAR 0 10
3445: PPUSH
3446: LD_VAR 0 3
3450: PPUSH
3451: CALL_OW 52
// end ;
3455: GO 3375
3457: POP
3458: POP
// end ;
3459: LD_VAR 0 7
3463: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3464: LD_INT 0
3466: PPUSH
3467: PPUSH
3468: PPUSH
// uc_side := GetSide ( b ) ;
3469: LD_ADDR_OWVAR 20
3473: PUSH
3474: LD_VAR 0 2
3478: PPUSH
3479: CALL_OW 255
3483: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3484: LD_ADDR_OWVAR 21
3488: PUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 248
3498: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3499: LD_INT 0
3501: PPUSH
3502: LD_INT 1
3504: PPUSH
3505: LD_VAR 0 1
3509: PPUSH
3510: CALL_OW 380
// un = CreateHuman ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_VAR 0 2
3533: PPUSH
3534: CALL_OW 254
3538: PUSH
3539: LD_INT 3
3541: MINUS
3542: ST_TO_ADDR
// if dir < 0 then
3543: LD_VAR 0 5
3547: PUSH
3548: LD_INT 0
3550: LESS
3551: IFFALSE 3567
// dir := 6 + dir ;
3553: LD_ADDR_VAR 0 5
3557: PUSH
3558: LD_INT 6
3560: PUSH
3561: LD_VAR 0 5
3565: PLUS
3566: ST_TO_ADDR
// SetDir ( un , dir ) ;
3567: LD_VAR 0 4
3571: PPUSH
3572: LD_VAR 0 5
3576: PPUSH
3577: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3581: LD_VAR 0 4
3585: PPUSH
3586: LD_VAR 0 2
3590: PPUSH
3591: CALL_OW 52
// end ;
3595: LD_VAR 0 3
3599: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
3604: PPUSH
// rnd = rand ( 1 , characters ) ;
3605: LD_ADDR_VAR 0 6
3609: PUSH
3610: LD_INT 1
3612: PPUSH
3613: LD_VAR 0 1
3617: PPUSH
3618: CALL_OW 12
3622: ST_TO_ADDR
// for i = 1 to characters do
3623: LD_ADDR_VAR 0 5
3627: PUSH
3628: DOUBLE
3629: LD_INT 1
3631: DEC
3632: ST_TO_ADDR
3633: LD_VAR 0 1
3637: PUSH
3638: FOR_TO
3639: IFFALSE 3749
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3641: LD_VAR 0 5
3645: PUSH
3646: LD_VAR 0 6
3650: EQUAL
3651: PUSH
3652: LD_VAR 0 1
3656: PUSH
3657: LD_VAR 0 5
3661: ARRAY
3662: PPUSH
3663: CALL_OW 258
3667: PUSH
3668: LD_INT 1
3670: EQUAL
3671: AND
3672: IFFALSE 3694
// Say ( characters [ i ] , dialogMID ) ;
3674: LD_VAR 0 1
3678: PUSH
3679: LD_VAR 0 5
3683: ARRAY
3684: PPUSH
3685: LD_VAR 0 2
3689: PPUSH
3690: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3694: LD_VAR 0 5
3698: PUSH
3699: LD_VAR 0 6
3703: EQUAL
3704: PUSH
3705: LD_VAR 0 1
3709: PUSH
3710: LD_VAR 0 5
3714: ARRAY
3715: PPUSH
3716: CALL_OW 258
3720: PUSH
3721: LD_INT 2
3723: EQUAL
3724: AND
3725: IFFALSE 3747
// Say ( characters [ i ] , dialogFID ) ;
3727: LD_VAR 0 1
3731: PUSH
3732: LD_VAR 0 5
3736: ARRAY
3737: PPUSH
3738: LD_VAR 0 3
3742: PPUSH
3743: CALL_OW 88
// end ;
3747: GO 3638
3749: POP
3750: POP
// end ;
3751: LD_VAR 0 4
3755: RET
// export function PrepareDifficulty ; begin
3756: LD_INT 0
3758: PPUSH
// if Difficulty = 1 then
3759: LD_OWVAR 67
3763: PUSH
3764: LD_INT 1
3766: EQUAL
3767: IFFALSE 3785
// begin RuSoldMinLevel = 0 ;
3769: LD_ADDR_EXP 16
3773: PUSH
3774: LD_INT 0
3776: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3777: LD_ADDR_EXP 17
3781: PUSH
3782: LD_INT 2
3784: ST_TO_ADDR
// end ; if Difficulty = 2 then
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 2
3792: EQUAL
3793: IFFALSE 3831
// begin RuSoldMinLevel = 1 ;
3795: LD_ADDR_EXP 16
3799: PUSH
3800: LD_INT 1
3802: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3803: LD_ADDR_EXP 17
3807: PUSH
3808: LD_INT 2
3810: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
3811: LD_INT 14
3813: PPUSH
3814: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3818: LD_INT 51
3820: PPUSH
3821: LD_INT 3
3823: PPUSH
3824: LD_INT 1
3826: PPUSH
3827: CALL_OW 322
// end ; if Difficulty = 3 then
3831: LD_OWVAR 67
3835: PUSH
3836: LD_INT 3
3838: EQUAL
3839: IFFALSE 3907
// begin RuSoldMinLevel = 1 ;
3841: LD_ADDR_EXP 16
3845: PUSH
3846: LD_INT 1
3848: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
3849: LD_ADDR_EXP 17
3853: PUSH
3854: LD_INT 3
3856: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
3857: LD_INT 13
3859: PPUSH
3860: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
3864: LD_INT 14
3866: PPUSH
3867: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3871: LD_INT 51
3873: PPUSH
3874: LD_INT 3
3876: PPUSH
3877: LD_INT 1
3879: PPUSH
3880: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
3884: LD_INT 52
3886: PPUSH
3887: LD_INT 3
3889: PPUSH
3890: LD_INT 1
3892: PPUSH
3893: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
3897: LD_INT 25
3899: PPUSH
3900: LD_INT 44
3902: PPUSH
3903: CALL_OW 431
// end ; end ;
3907: LD_VAR 0 1
3911: RET
// export function EnergyDialog ; begin
3912: LD_INT 0
3914: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
3915: LD_INT 46
3917: PPUSH
3918: LD_INT 1
3920: PPUSH
3921: CALL_OW 321
3925: PUSH
3926: LD_INT 1
3928: EQUAL
3929: PUSH
3930: LD_INT 35
3932: PPUSH
3933: LD_INT 1
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 1
3943: EQUAL
3944: AND
3945: IFFALSE 3969
// begin Say ( JMM , D9c-JMM-1 ) ;
3947: LD_EXP 1
3951: PPUSH
3952: LD_STRING D9c-JMM-1
3954: PPUSH
3955: CALL_OW 88
// energyVDialog = 1 ;
3959: LD_ADDR_EXP 31
3963: PUSH
3964: LD_INT 1
3966: ST_TO_ADDR
// end else
3967: GO 4123
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
3969: LD_INT 35
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: EQUAL
3983: PUSH
3984: LD_EXP 31
3988: PUSH
3989: LD_INT 0
3991: EQUAL
3992: AND
3993: IFFALSE 4015
// begin Say ( JMM , D9c-JMM-1a ) ;
3995: LD_EXP 1
3999: PPUSH
4000: LD_STRING D9c-JMM-1a
4002: PPUSH
4003: CALL_OW 88
// energyVDialog = 1 ;
4007: LD_ADDR_EXP 31
4011: PUSH
4012: LD_INT 1
4014: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4015: LD_INT 46
4017: PPUSH
4018: LD_INT 1
4020: PPUSH
4021: CALL_OW 321
4025: PUSH
4026: LD_INT 2
4028: EQUAL
4029: PUSH
4030: LD_EXP 31
4034: PUSH
4035: LD_INT 0
4037: EQUAL
4038: AND
4039: IFFALSE 4061
// begin Say ( JMM , D9c-JMM-1b ) ;
4041: LD_EXP 1
4045: PPUSH
4046: LD_STRING D9c-JMM-1b
4048: PPUSH
4049: CALL_OW 88
// energyVDialog = 1 ;
4053: LD_ADDR_EXP 31
4057: PUSH
4058: LD_INT 1
4060: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4061: LD_INT 46
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: CALL_OW 321
4071: PUSH
4072: LD_INT 2
4074: EQUAL
4075: PUSH
4076: LD_INT 21
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 321
4086: PUSH
4087: LD_INT 2
4089: EQUAL
4090: AND
4091: PUSH
4092: LD_EXP 31
4096: PUSH
4097: LD_INT 0
4099: EQUAL
4100: AND
4101: IFFALSE 4123
// begin Say ( JMM , D9c-JMM-1c ) ;
4103: LD_EXP 1
4107: PPUSH
4108: LD_STRING D9c-JMM-1c
4110: PPUSH
4111: CALL_OW 88
// energyVDialog = 1 ;
4115: LD_ADDR_EXP 31
4119: PUSH
4120: LD_INT 1
4122: ST_TO_ADDR
// end ; end ; end ;
4123: LD_VAR 0 1
4127: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
4132: PPUSH
4133: PPUSH
4134: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4135: LD_VAR 0 1
4139: NOT
4140: PUSH
4141: LD_VAR 0 1
4145: PPUSH
4146: CALL_OW 256
4150: PUSH
4151: LD_INT 250
4153: LESS
4154: OR
4155: PUSH
4156: LD_VAR 0 1
4160: PPUSH
4161: CALL_OW 314
4165: PUSH
4166: LD_VAR 0 1
4170: PPUSH
4171: CALL_OW 261
4175: PUSH
4176: LD_INT 20
4178: GREATER
4179: AND
4180: OR
4181: IFFALSE 4185
// exit ;
4183: GO 4550
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4185: LD_VAR 0 1
4189: PPUSH
4190: CALL_OW 261
4194: PUSH
4195: LD_INT 20
4197: LESS
4198: PUSH
4199: LD_VAR 0 1
4203: PPUSH
4204: CALL_OW 110
4208: PUSH
4209: LD_INT 21
4211: EQUAL
4212: NOT
4213: AND
4214: IFFALSE 4241
// begin ComStop ( bulldozer ) ;
4216: LD_VAR 0 1
4220: PPUSH
4221: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4225: LD_VAR 0 1
4229: PPUSH
4230: LD_INT 21
4232: PPUSH
4233: CALL_OW 109
// exit ;
4237: GO 4550
// end else
4239: GO 4268
// if GetFuel ( bulldozer ) > 20 then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 261
4250: PUSH
4251: LD_INT 20
4253: GREATER
4254: IFFALSE 4268
// SetTag ( bulldozer , 0 ) ;
4256: LD_VAR 0 1
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL_OW 353
4282: ST_TO_ADDR
// tmp := [ ] ;
4283: LD_ADDR_VAR 0 6
4287: PUSH
4288: EMPTY
4289: ST_TO_ADDR
// for i = 1 to list do
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_VAR 0 5
4304: PUSH
4305: FOR_TO
4306: IFFALSE 4404
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4308: LD_VAR 0 5
4312: PUSH
4313: LD_VAR 0 4
4317: ARRAY
4318: PUSH
4319: LD_INT 1
4321: ARRAY
4322: PPUSH
4323: LD_VAR 0 5
4327: PUSH
4328: LD_VAR 0 4
4332: ARRAY
4333: PUSH
4334: LD_INT 2
4336: ARRAY
4337: PPUSH
4338: CALL_OW 554
4342: IFFALSE 4402
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4344: LD_ADDR_VAR 0 6
4348: PUSH
4349: LD_VAR 0 6
4353: PPUSH
4354: LD_VAR 0 6
4358: PUSH
4359: LD_INT 1
4361: PLUS
4362: PPUSH
4363: LD_VAR 0 5
4367: PUSH
4368: LD_VAR 0 4
4372: ARRAY
4373: PUSH
4374: LD_INT 1
4376: ARRAY
4377: PUSH
4378: LD_VAR 0 5
4382: PUSH
4383: LD_VAR 0 4
4387: ARRAY
4388: PUSH
4389: LD_INT 2
4391: ARRAY
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PPUSH
4397: CALL_OW 1
4401: ST_TO_ADDR
// end ;
4402: GO 4305
4404: POP
4405: POP
// ComStop ( bulldozer ) ;
4406: LD_VAR 0 1
4410: PPUSH
4411: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
4415: LD_ADDR_VAR 0 7
4419: PUSH
4420: LD_VAR 0 1
4424: PPUSH
4425: CALL_OW 250
4429: PUSH
4430: LD_VAR 0 1
4434: PPUSH
4435: CALL_OW 251
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: ST_TO_ADDR
// for i = tmp downto 1 do
4444: LD_ADDR_VAR 0 4
4448: PUSH
4449: DOUBLE
4450: LD_VAR 0 6
4454: INC
4455: ST_TO_ADDR
4456: LD_INT 1
4458: PUSH
4459: FOR_DOWNTO
4460: IFFALSE 4548
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
4462: LD_ADDR_VAR 0 7
4466: PUSH
4467: LD_VAR 0 7
4471: PUSH
4472: LD_INT 1
4474: ARRAY
4475: PPUSH
4476: LD_VAR 0 7
4480: PUSH
4481: LD_INT 2
4483: ARRAY
4484: PPUSH
4485: LD_VAR 0 6
4489: PPUSH
4490: CALL 4651 0 3
4494: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
4495: LD_VAR 0 1
4499: PPUSH
4500: LD_VAR 0 7
4504: PUSH
4505: LD_INT 1
4507: ARRAY
4508: PPUSH
4509: LD_VAR 0 7
4513: PUSH
4514: LD_INT 2
4516: ARRAY
4517: PPUSH
4518: CALL 4555 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
4522: LD_ADDR_VAR 0 6
4526: PUSH
4527: LD_VAR 0 6
4531: PPUSH
4532: LD_VAR 0 7
4536: PUSH
4537: LD_INT 3
4539: ARRAY
4540: PPUSH
4541: CALL_OW 3
4545: ST_TO_ADDR
// end ;
4546: GO 4459
4548: POP
4549: POP
// end ;
4550: LD_VAR 0 3
4554: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
4555: LD_INT 0
4557: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
4558: LD_VAR 0 2
4562: PPUSH
4563: LD_VAR 0 3
4567: PPUSH
4568: CALL_OW 351
4572: PUSH
4573: LD_VAR 0 2
4577: PPUSH
4578: LD_VAR 0 3
4582: PPUSH
4583: CALL_OW 554
4587: AND
4588: PUSH
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_VAR 0 3
4598: PPUSH
4599: CALL_OW 488
4603: AND
4604: PUSH
4605: LD_VAR 0 2
4609: PPUSH
4610: LD_VAR 0 3
4614: PPUSH
4615: CALL_OW 428
4619: PUSH
4620: LD_INT 1
4622: NEG
4623: EQUAL
4624: AND
4625: IFFALSE 4646
// AddComMoveXY ( bulldozer , x , y ) ;
4627: LD_VAR 0 1
4631: PPUSH
4632: LD_VAR 0 2
4636: PPUSH
4637: LD_VAR 0 3
4641: PPUSH
4642: CALL_OW 171
// end ;
4646: LD_VAR 0 4
4650: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
4651: LD_INT 0
4653: PPUSH
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
// dist := 99999 ;
4660: LD_ADDR_VAR 0 6
4664: PUSH
4665: LD_INT 99999
4667: ST_TO_ADDR
// for i = 1 to list do
4668: LD_ADDR_VAR 0 5
4672: PUSH
4673: DOUBLE
4674: LD_INT 1
4676: DEC
4677: ST_TO_ADDR
4678: LD_VAR 0 3
4682: PUSH
4683: FOR_TO
4684: IFFALSE 4822
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
4686: LD_ADDR_VAR 0 7
4690: PUSH
4691: LD_VAR 0 1
4695: PPUSH
4696: LD_VAR 0 2
4700: PPUSH
4701: LD_VAR 0 3
4705: PUSH
4706: LD_VAR 0 5
4710: ARRAY
4711: PUSH
4712: LD_INT 1
4714: ARRAY
4715: PPUSH
4716: LD_VAR 0 3
4720: PUSH
4721: LD_VAR 0 5
4725: ARRAY
4726: PUSH
4727: LD_INT 2
4729: ARRAY
4730: PPUSH
4731: CALL_OW 298
4735: ST_TO_ADDR
// if d = 0 then
4736: LD_VAR 0 7
4740: PUSH
4741: LD_INT 0
4743: EQUAL
4744: IFFALSE 4748
// continue ;
4746: GO 4683
// if d < dist then
4748: LD_VAR 0 7
4752: PUSH
4753: LD_VAR 0 6
4757: LESS
4758: IFFALSE 4820
// begin _x := list [ i ] [ 1 ] ;
4760: LD_ADDR_VAR 0 8
4764: PUSH
4765: LD_VAR 0 3
4769: PUSH
4770: LD_VAR 0 5
4774: ARRAY
4775: PUSH
4776: LD_INT 1
4778: ARRAY
4779: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
4780: LD_ADDR_VAR 0 9
4784: PUSH
4785: LD_VAR 0 3
4789: PUSH
4790: LD_VAR 0 5
4794: ARRAY
4795: PUSH
4796: LD_INT 2
4798: ARRAY
4799: ST_TO_ADDR
// _i := i ;
4800: LD_ADDR_VAR 0 10
4804: PUSH
4805: LD_VAR 0 5
4809: ST_TO_ADDR
// dist := d ;
4810: LD_ADDR_VAR 0 6
4814: PUSH
4815: LD_VAR 0 7
4819: ST_TO_ADDR
// end ; end ;
4820: GO 4683
4822: POP
4823: POP
// result := [ _x , _y , _i , dist ] ;
4824: LD_ADDR_VAR 0 4
4828: PUSH
4829: LD_VAR 0 8
4833: PUSH
4834: LD_VAR 0 9
4838: PUSH
4839: LD_VAR 0 10
4843: PUSH
4844: LD_VAR 0 6
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: ST_TO_ADDR
// end ;
4855: LD_VAR 0 4
4859: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4860: LD_INT 0
4862: PPUSH
4863: PPUSH
4864: PPUSH
4865: PPUSH
// for i = 1 to 72 do
4866: LD_ADDR_VAR 0 5
4870: PUSH
4871: DOUBLE
4872: LD_INT 1
4874: DEC
4875: ST_TO_ADDR
4876: LD_INT 72
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4938
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4882: LD_VAR 0 5
4886: PPUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 321
4896: PUSH
4897: LD_INT 1
4899: EQUAL
4900: PUSH
4901: LD_VAR 0 5
4905: PPUSH
4906: LD_VAR 0 3
4910: PPUSH
4911: CALL_OW 482
4915: PUSH
4916: LD_INT 1
4918: EQUAL
4919: AND
4920: IFFALSE 4936
// AddComResearch ( lab , i ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_VAR 0 5
4931: PPUSH
4932: CALL_OW 184
4936: GO 4879
4938: POP
4939: POP
// end ;
4940: LD_VAR 0 4
4944: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4945: LD_INT 0
4947: PPUSH
4948: PPUSH
4949: PPUSH
4950: PPUSH
4951: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4952: LD_ADDR_VAR 0 6
4956: PUSH
4957: LD_INT 22
4959: PUSH
4960: LD_VAR 0 1
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 25
4971: PUSH
4972: LD_INT 2
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 24
4981: PUSH
4982: LD_INT 1000
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: PPUSH
4994: CALL_OW 69
4998: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4999: LD_ADDR_VAR 0 4
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_VAR 0 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 21
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 3
5028: PUSH
5029: LD_INT 24
5031: PUSH
5032: LD_INT 1000
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: PPUSH
5051: CALL_OW 69
5055: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5056: LD_VAR 0 4
5060: PUSH
5061: LD_INT 0
5063: GREATER
5064: PUSH
5065: LD_VAR 0 6
5069: PUSH
5070: LD_INT 0
5072: GREATER
5073: AND
5074: IFFALSE 5140
// begin for i in engineerOk_list do
5076: LD_ADDR_VAR 0 5
5080: PUSH
5081: LD_VAR 0 6
5085: PUSH
5086: FOR_IN
5087: IFFALSE 5138
// begin for j in buildings_list do
5089: LD_ADDR_VAR 0 7
5093: PUSH
5094: LD_VAR 0 4
5098: PUSH
5099: FOR_IN
5100: IFFALSE 5134
// begin AddComExitBuilding ( i ) ;
5102: LD_VAR 0 5
5106: PPUSH
5107: CALL_OW 182
// wait ( 0 0$1 ) ;
5111: LD_INT 35
5113: PPUSH
5114: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5118: LD_VAR 0 5
5122: PPUSH
5123: LD_VAR 0 7
5127: PPUSH
5128: CALL_OW 190
// end ;
5132: GO 5099
5134: POP
5135: POP
// end ;
5136: GO 5086
5138: POP
5139: POP
// end ; if buildings_list = 0 then
5140: LD_VAR 0 4
5144: PUSH
5145: LD_INT 0
5147: EQUAL
5148: IFFALSE 5181
// begin for i in engineerOK_list do
5150: LD_ADDR_VAR 0 5
5154: PUSH
5155: LD_VAR 0 6
5159: PUSH
5160: FOR_IN
5161: IFFALSE 5179
// begin ComEnterUnit ( i , building ) ;
5163: LD_VAR 0 5
5167: PPUSH
5168: LD_VAR 0 2
5172: PPUSH
5173: CALL_OW 120
// end ;
5177: GO 5160
5179: POP
5180: POP
// end ; end ;
5181: LD_VAR 0 3
5185: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5186: LD_INT 0
5188: PPUSH
5189: PPUSH
5190: PPUSH
5191: PPUSH
5192: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5193: LD_ADDR_VAR 0 6
5197: PUSH
5198: LD_INT 22
5200: PUSH
5201: LD_VAR 0 1
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: LD_INT 25
5212: PUSH
5213: LD_INT 4
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5229: LD_ADDR_VAR 0 9
5233: PUSH
5234: LD_VAR 0 3
5238: PPUSH
5239: LD_INT 22
5241: PUSH
5242: LD_VAR 0 1
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: LD_INT 3
5263: PUSH
5264: LD_INT 24
5266: PUSH
5267: LD_INT 750
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PPUSH
5283: CALL_OW 70
5287: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5288: LD_VAR 0 9
5292: PUSH
5293: LD_INT 0
5295: GREATER
5296: PUSH
5297: LD_VAR 0 6
5301: PUSH
5302: LD_INT 0
5304: GREATER
5305: AND
5306: IFFALSE 5433
// begin for i = 1 to damageUnits do
5308: LD_ADDR_VAR 0 7
5312: PUSH
5313: DOUBLE
5314: LD_INT 1
5316: DEC
5317: ST_TO_ADDR
5318: LD_VAR 0 9
5322: PUSH
5323: FOR_TO
5324: IFFALSE 5348
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5326: LD_VAR 0 9
5330: PUSH
5331: LD_VAR 0 7
5335: ARRAY
5336: PPUSH
5337: LD_VAR 0 2
5341: PPUSH
5342: CALL_OW 113
5346: GO 5323
5348: POP
5349: POP
// for i in sci_list do
5350: LD_ADDR_VAR 0 7
5354: PUSH
5355: LD_VAR 0 6
5359: PUSH
5360: FOR_IN
5361: IFFALSE 5429
// begin ComExitBuilding ( i ) ;
5363: LD_VAR 0 7
5367: PPUSH
5368: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5372: LD_ADDR_VAR 0 8
5376: PUSH
5377: LD_VAR 0 2
5381: PPUSH
5382: LD_INT 22
5384: PUSH
5385: LD_VAR 0 1
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PPUSH
5394: CALL_OW 70
5398: PUSH
5399: FOR_IN
5400: IFFALSE 5425
// begin AddComHeal ( i , j ) ;
5402: LD_VAR 0 7
5406: PPUSH
5407: LD_VAR 0 8
5411: PPUSH
5412: CALL_OW 188
// wait ( 1 1$0 ) ;
5416: LD_INT 2100
5418: PPUSH
5419: CALL_OW 67
// end ;
5423: GO 5399
5425: POP
5426: POP
// end ;
5427: GO 5360
5429: POP
5430: POP
// end else
5431: GO 5447
// begin AddComEnterUnit ( sci_list , build ) ;
5433: LD_VAR 0 6
5437: PPUSH
5438: LD_VAR 0 4
5442: PPUSH
5443: CALL_OW 180
// end ; end ;
5447: LD_VAR 0 5
5451: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5452: LD_INT 0
5454: PPUSH
5455: PPUSH
5456: PPUSH
5457: PPUSH
5458: PPUSH
5459: PPUSH
5460: PPUSH
5461: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5462: LD_INT 22
5464: PUSH
5465: LD_VAR 0 1
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 21
5476: PUSH
5477: LD_INT 2
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 69
5492: PUSH
5493: LD_VAR 0 3
5497: LESSEQUAL
5498: IFFALSE 5565
// begin for i = 1 to vehCount do
5500: LD_ADDR_VAR 0 10
5504: PUSH
5505: DOUBLE
5506: LD_INT 1
5508: DEC
5509: ST_TO_ADDR
5510: LD_VAR 0 3
5514: PUSH
5515: FOR_TO
5516: IFFALSE 5563
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_VAR 0 8
5527: PPUSH
5528: LD_VAR 0 6
5532: PPUSH
5533: LD_VAR 0 7
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 1
5545: PPUSH
5546: LD_VAR 0 5
5550: PPUSH
5551: CALL_OW 12
5555: ARRAY
5556: PPUSH
5557: CALL_OW 185
5561: GO 5515
5563: POP
5564: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5565: LD_INT 22
5567: PUSH
5568: LD_VAR 0 1
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PUSH
5577: LD_INT 21
5579: PUSH
5580: LD_INT 2
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PUSH
5587: LD_INT 24
5589: PUSH
5590: LD_INT 250
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: LIST
5601: PPUSH
5602: CALL_OW 69
5606: PUSH
5607: LD_VAR 0 3
5611: GREATEREQUAL
5612: IFFALSE 5932
// begin repeat begin wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
5621: LD_INT 22
5623: PUSH
5624: LD_VAR 0 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 21
5635: PUSH
5636: LD_INT 2
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 24
5645: PUSH
5646: LD_INT 651
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 69
5662: PUSH
5663: LD_INT 0
5665: GREATER
5666: IFFALSE 5894
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5668: LD_ADDR_VAR 0 10
5672: PUSH
5673: LD_INT 22
5675: PUSH
5676: LD_VAR 0 1
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 21
5687: PUSH
5688: LD_INT 2
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 24
5697: PUSH
5698: LD_INT 651
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: PPUSH
5710: CALL_OW 69
5714: PUSH
5715: FOR_IN
5716: IFFALSE 5892
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5718: LD_ADDR_VAR 0 15
5722: PUSH
5723: LD_INT 22
5725: PUSH
5726: LD_VAR 0 4
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PPUSH
5735: CALL_OW 69
5739: PPUSH
5740: LD_VAR 0 10
5744: PPUSH
5745: CALL_OW 74
5749: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5750: LD_ADDR_VAR 0 16
5754: PUSH
5755: LD_INT 22
5757: PUSH
5758: LD_VAR 0 4
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: LD_INT 59
5772: PUSH
5773: EMPTY
5774: LIST
5775: PUSH
5776: LD_INT 21
5778: PUSH
5779: LD_INT 1
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: LD_INT 21
5788: PUSH
5789: LD_INT 2
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: EMPTY
5807: LIST
5808: PPUSH
5809: CALL_OW 69
5813: PPUSH
5814: LD_VAR 0 10
5818: PPUSH
5819: CALL_OW 74
5823: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5824: LD_VAR 0 10
5828: PPUSH
5829: LD_VAR 0 15
5833: PPUSH
5834: CALL_OW 296
5838: PUSH
5839: LD_INT 8
5841: PLUS
5842: PUSH
5843: LD_VAR 0 10
5847: PPUSH
5848: LD_VAR 0 16
5852: PPUSH
5853: CALL_OW 296
5857: LESS
5858: IFFALSE 5876
// begin ComAttackUnit ( i , target1 ) ;
5860: LD_VAR 0 10
5864: PPUSH
5865: LD_VAR 0 15
5869: PPUSH
5870: CALL_OW 115
// end else
5874: GO 5890
// begin ComAttackUnit ( i , target2 ) ;
5876: LD_VAR 0 10
5880: PPUSH
5881: LD_VAR 0 16
5885: PPUSH
5886: CALL_OW 115
// end ; end ;
5890: GO 5715
5892: POP
5893: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
5894: LD_INT 22
5896: PUSH
5897: LD_VAR 0 1
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 21
5908: PUSH
5909: LD_INT 2
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_VAR 0 3
5929: LESSEQUAL
5930: IFFALSE 5614
// end ; end ;
5932: LD_VAR 0 9
5936: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
5937: LD_INT 0
5939: PPUSH
5940: PPUSH
5941: PPUSH
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
5946: PPUSH
5947: PPUSH
5948: PPUSH
5949: PPUSH
// for i = 1 to medicCount do
5950: LD_ADDR_VAR 0 14
5954: PUSH
5955: DOUBLE
5956: LD_INT 1
5958: DEC
5959: ST_TO_ADDR
5960: LD_VAR 0 7
5964: PUSH
5965: FOR_TO
5966: IFFALSE 6048
// begin uc_side = side ;
5968: LD_ADDR_OWVAR 20
5972: PUSH
5973: LD_VAR 0 1
5977: ST_TO_ADDR
// uc_nation = nation ;
5978: LD_ADDR_OWVAR 21
5982: PUSH
5983: LD_VAR 0 2
5987: ST_TO_ADDR
// hc_name =  ;
5988: LD_ADDR_OWVAR 26
5992: PUSH
5993: LD_STRING 
5995: ST_TO_ADDR
// hc_gallery =  ;
5996: LD_ADDR_OWVAR 33
6000: PUSH
6001: LD_STRING 
6003: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6004: LD_INT 0
6006: PPUSH
6007: LD_INT 4
6009: PPUSH
6010: LD_VAR 0 8
6014: PPUSH
6015: CALL_OW 380
// un = CreateHuman ;
6019: LD_ADDR_VAR 0 16
6023: PUSH
6024: CALL_OW 44
6028: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6029: LD_VAR 0 16
6033: PPUSH
6034: LD_VAR 0 9
6038: PPUSH
6039: LD_INT 0
6041: PPUSH
6042: CALL_OW 49
// end ;
6046: GO 5965
6048: POP
6049: POP
// for i = 1 to soldierCount do
6050: LD_ADDR_VAR 0 14
6054: PUSH
6055: DOUBLE
6056: LD_INT 1
6058: DEC
6059: ST_TO_ADDR
6060: LD_VAR 0 3
6064: PUSH
6065: FOR_TO
6066: IFFALSE 6148
// begin uc_side = side ;
6068: LD_ADDR_OWVAR 20
6072: PUSH
6073: LD_VAR 0 1
6077: ST_TO_ADDR
// uc_nation = nation ;
6078: LD_ADDR_OWVAR 21
6082: PUSH
6083: LD_VAR 0 2
6087: ST_TO_ADDR
// hc_name =  ;
6088: LD_ADDR_OWVAR 26
6092: PUSH
6093: LD_STRING 
6095: ST_TO_ADDR
// hc_gallery =  ;
6096: LD_ADDR_OWVAR 33
6100: PUSH
6101: LD_STRING 
6103: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6104: LD_INT 0
6106: PPUSH
6107: LD_INT 1
6109: PPUSH
6110: LD_VAR 0 8
6114: PPUSH
6115: CALL_OW 380
// un = CreateHuman ;
6119: LD_ADDR_VAR 0 16
6123: PUSH
6124: CALL_OW 44
6128: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6129: LD_VAR 0 16
6133: PPUSH
6134: LD_VAR 0 9
6138: PPUSH
6139: LD_INT 0
6141: PPUSH
6142: CALL_OW 49
// end ;
6146: GO 6065
6148: POP
6149: POP
// for i = 1 to sniperCount do
6150: LD_ADDR_VAR 0 14
6154: PUSH
6155: DOUBLE
6156: LD_INT 1
6158: DEC
6159: ST_TO_ADDR
6160: LD_VAR 0 4
6164: PUSH
6165: FOR_TO
6166: IFFALSE 6248
// begin uc_side = side ;
6168: LD_ADDR_OWVAR 20
6172: PUSH
6173: LD_VAR 0 1
6177: ST_TO_ADDR
// uc_nation = nation ;
6178: LD_ADDR_OWVAR 21
6182: PUSH
6183: LD_VAR 0 2
6187: ST_TO_ADDR
// hc_name =  ;
6188: LD_ADDR_OWVAR 26
6192: PUSH
6193: LD_STRING 
6195: ST_TO_ADDR
// hc_gallery =  ;
6196: LD_ADDR_OWVAR 33
6200: PUSH
6201: LD_STRING 
6203: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6204: LD_INT 0
6206: PPUSH
6207: LD_INT 5
6209: PPUSH
6210: LD_VAR 0 8
6214: PPUSH
6215: CALL_OW 380
// un = CreateHuman ;
6219: LD_ADDR_VAR 0 16
6223: PUSH
6224: CALL_OW 44
6228: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6229: LD_VAR 0 16
6233: PPUSH
6234: LD_VAR 0 9
6238: PPUSH
6239: LD_INT 0
6241: PPUSH
6242: CALL_OW 49
// end ;
6246: GO 6165
6248: POP
6249: POP
// for i = 1 to bazookCount do
6250: LD_ADDR_VAR 0 14
6254: PUSH
6255: DOUBLE
6256: LD_INT 1
6258: DEC
6259: ST_TO_ADDR
6260: LD_VAR 0 5
6264: PUSH
6265: FOR_TO
6266: IFFALSE 6348
// begin uc_side = side ;
6268: LD_ADDR_OWVAR 20
6272: PUSH
6273: LD_VAR 0 1
6277: ST_TO_ADDR
// uc_nation = nation ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_VAR 0 2
6287: ST_TO_ADDR
// hc_name =  ;
6288: LD_ADDR_OWVAR 26
6292: PUSH
6293: LD_STRING 
6295: ST_TO_ADDR
// hc_gallery =  ;
6296: LD_ADDR_OWVAR 33
6300: PUSH
6301: LD_STRING 
6303: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6304: LD_INT 0
6306: PPUSH
6307: LD_INT 9
6309: PPUSH
6310: LD_VAR 0 8
6314: PPUSH
6315: CALL_OW 380
// un = CreateHuman ;
6319: LD_ADDR_VAR 0 16
6323: PUSH
6324: CALL_OW 44
6328: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6329: LD_VAR 0 16
6333: PPUSH
6334: LD_VAR 0 9
6338: PPUSH
6339: LD_INT 0
6341: PPUSH
6342: CALL_OW 49
// end ;
6346: GO 6265
6348: POP
6349: POP
// for i = 1 to mortalCount do
6350: LD_ADDR_VAR 0 14
6354: PUSH
6355: DOUBLE
6356: LD_INT 1
6358: DEC
6359: ST_TO_ADDR
6360: LD_VAR 0 6
6364: PUSH
6365: FOR_TO
6366: IFFALSE 6448
// begin uc_side = side ;
6368: LD_ADDR_OWVAR 20
6372: PUSH
6373: LD_VAR 0 1
6377: ST_TO_ADDR
// uc_nation = nation ;
6378: LD_ADDR_OWVAR 21
6382: PUSH
6383: LD_VAR 0 2
6387: ST_TO_ADDR
// hc_name =  ;
6388: LD_ADDR_OWVAR 26
6392: PUSH
6393: LD_STRING 
6395: ST_TO_ADDR
// hc_gallery =  ;
6396: LD_ADDR_OWVAR 33
6400: PUSH
6401: LD_STRING 
6403: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6404: LD_INT 0
6406: PPUSH
6407: LD_INT 8
6409: PPUSH
6410: LD_VAR 0 8
6414: PPUSH
6415: CALL_OW 380
// un = CreateHuman ;
6419: LD_ADDR_VAR 0 16
6423: PUSH
6424: CALL_OW 44
6428: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6429: LD_VAR 0 16
6433: PPUSH
6434: LD_VAR 0 9
6438: PPUSH
6439: LD_INT 0
6441: PPUSH
6442: CALL_OW 49
// end ;
6446: GO 6365
6448: POP
6449: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6450: LD_ADDR_VAR 0 19
6454: PUSH
6455: LD_INT 22
6457: PUSH
6458: LD_VAR 0 1
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 2
6469: PUSH
6470: LD_INT 25
6472: PUSH
6473: LD_INT 1
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 25
6482: PUSH
6483: LD_INT 5
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 25
6492: PUSH
6493: LD_INT 8
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 25
6502: PUSH
6503: LD_INT 9
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PPUSH
6521: CALL_OW 69
6525: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6526: LD_ADDR_VAR 0 18
6530: PUSH
6531: LD_INT 22
6533: PUSH
6534: LD_VAR 0 1
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 25
6545: PUSH
6546: LD_INT 4
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PPUSH
6557: CALL_OW 69
6561: ST_TO_ADDR
// for i in medic_list do
6562: LD_ADDR_VAR 0 14
6566: PUSH
6567: LD_VAR 0 18
6571: PUSH
6572: FOR_IN
6573: IFFALSE 6591
// ComMoveToArea ( i , healArea ) ;
6575: LD_VAR 0 14
6579: PPUSH
6580: LD_VAR 0 10
6584: PPUSH
6585: CALL_OW 113
6589: GO 6572
6591: POP
6592: POP
// if strategy = 1 then
6593: LD_VAR 0 12
6597: PUSH
6598: LD_INT 1
6600: EQUAL
6601: IFFALSE 7336
// begin repeat wait ( 0 0$3 ) ;
6603: LD_INT 105
6605: PPUSH
6606: CALL_OW 67
// for i in soldiersOK_list do
6610: LD_ADDR_VAR 0 14
6614: PUSH
6615: LD_VAR 0 19
6619: PUSH
6620: FOR_IN
6621: IFFALSE 6685
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6623: LD_VAR 0 14
6627: PPUSH
6628: LD_INT 91
6630: PPUSH
6631: LD_INT 63
6633: PPUSH
6634: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
6638: LD_VAR 0 14
6642: PPUSH
6643: LD_INT 101
6645: PPUSH
6646: LD_INT 53
6648: PPUSH
6649: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
6653: LD_VAR 0 14
6657: PPUSH
6658: LD_INT 75
6660: PPUSH
6661: LD_INT 23
6663: PPUSH
6664: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
6668: LD_VAR 0 14
6672: PPUSH
6673: LD_INT 78
6675: PPUSH
6676: LD_INT 8
6678: PPUSH
6679: CALL_OW 174
// end ;
6683: GO 6620
6685: POP
6686: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
6687: LD_INT 15
6689: PPUSH
6690: LD_INT 22
6692: PUSH
6693: LD_VAR 0 1
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 70
6706: PUSH
6707: LD_INT 2
6709: GREATER
6710: IFFALSE 6603
// repeat wait ( 0 0$1 ) ;
6712: LD_INT 35
6714: PPUSH
6715: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6719: LD_ADDR_VAR 0 17
6723: PUSH
6724: LD_INT 22
6726: PUSH
6727: LD_VAR 0 1
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 1
6738: PUSH
6739: LD_INT 3
6741: PUSH
6742: LD_INT 24
6744: PUSH
6745: LD_INT 550
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 24
6758: PUSH
6759: LD_INT 250
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6780: LD_ADDR_VAR 0 19
6784: PUSH
6785: LD_INT 22
6787: PUSH
6788: LD_VAR 0 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 25
6802: PUSH
6803: LD_INT 1
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 25
6812: PUSH
6813: LD_INT 5
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 25
6822: PUSH
6823: LD_INT 8
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 25
6832: PUSH
6833: LD_INT 9
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 24
6849: PUSH
6850: LD_INT 1000
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// if medicCount > 0 then
6867: LD_VAR 0 7
6871: PUSH
6872: LD_INT 0
6874: GREATER
6875: IFFALSE 6949
// begin if damageUnit_list > 0 then
6877: LD_VAR 0 17
6881: PUSH
6882: LD_INT 0
6884: GREATER
6885: IFFALSE 6949
// begin for i in damageUnit_list do
6887: LD_ADDR_VAR 0 14
6891: PUSH
6892: LD_VAR 0 17
6896: PUSH
6897: FOR_IN
6898: IFFALSE 6947
// begin ComMoveToArea ( i , healArea ) ;
6900: LD_VAR 0 14
6904: PPUSH
6905: LD_VAR 0 10
6909: PPUSH
6910: CALL_OW 113
// for j in medic_list do
6914: LD_ADDR_VAR 0 15
6918: PUSH
6919: LD_VAR 0 18
6923: PUSH
6924: FOR_IN
6925: IFFALSE 6943
// AddComHeal ( j , i ) ;
6927: LD_VAR 0 15
6931: PPUSH
6932: LD_VAR 0 14
6936: PPUSH
6937: CALL_OW 188
6941: GO 6924
6943: POP
6944: POP
// end ;
6945: GO 6897
6947: POP
6948: POP
// end ; end ; for i in soldiersOK_list do
6949: LD_ADDR_VAR 0 14
6953: PUSH
6954: LD_VAR 0 19
6958: PUSH
6959: FOR_IN
6960: IFFALSE 7136
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6962: LD_ADDR_VAR 0 22
6966: PUSH
6967: LD_INT 22
6969: PUSH
6970: LD_VAR 0 11
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PPUSH
6984: LD_VAR 0 14
6988: PPUSH
6989: CALL_OW 74
6993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6994: LD_ADDR_VAR 0 23
6998: PUSH
6999: LD_INT 22
7001: PUSH
7002: LD_VAR 0 11
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 59
7016: PUSH
7017: EMPTY
7018: LIST
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 1
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 21
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: PPUSH
7053: CALL_OW 69
7057: PPUSH
7058: LD_VAR 0 14
7062: PPUSH
7063: CALL_OW 74
7067: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7068: LD_VAR 0 14
7072: PPUSH
7073: LD_VAR 0 22
7077: PPUSH
7078: CALL_OW 296
7082: PUSH
7083: LD_INT 8
7085: PLUS
7086: PUSH
7087: LD_VAR 0 14
7091: PPUSH
7092: LD_VAR 0 23
7096: PPUSH
7097: CALL_OW 296
7101: LESS
7102: IFFALSE 7120
// begin ComAttackUnit ( i , target1 ) ;
7104: LD_VAR 0 14
7108: PPUSH
7109: LD_VAR 0 22
7113: PPUSH
7114: CALL_OW 115
// end else
7118: GO 7134
// begin ComAttackUnit ( i , target2 ) ;
7120: LD_VAR 0 14
7124: PPUSH
7125: LD_VAR 0 23
7129: PPUSH
7130: CALL_OW 115
// end ; end ;
7134: GO 6959
7136: POP
7137: POP
// for i in soldiersOK_list do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: LD_VAR 0 19
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7325
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7151: LD_ADDR_VAR 0 22
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_VAR 0 11
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PPUSH
7168: CALL_OW 69
7172: PPUSH
7173: LD_VAR 0 14
7177: PPUSH
7178: CALL_OW 74
7182: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7183: LD_ADDR_VAR 0 23
7187: PUSH
7188: LD_INT 22
7190: PUSH
7191: LD_VAR 0 11
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 59
7205: PUSH
7206: EMPTY
7207: LIST
7208: PUSH
7209: LD_INT 21
7211: PUSH
7212: LD_INT 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: PPUSH
7247: LD_VAR 0 14
7251: PPUSH
7252: CALL_OW 74
7256: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7257: LD_VAR 0 14
7261: PPUSH
7262: LD_VAR 0 22
7266: PPUSH
7267: CALL_OW 296
7271: PUSH
7272: LD_INT 8
7274: PLUS
7275: PUSH
7276: LD_VAR 0 14
7280: PPUSH
7281: LD_VAR 0 23
7285: PPUSH
7286: CALL_OW 296
7290: LESS
7291: IFFALSE 7309
// begin ComAttackUnit ( i , target1 ) ;
7293: LD_VAR 0 14
7297: PPUSH
7298: LD_VAR 0 22
7302: PPUSH
7303: CALL_OW 115
// end else
7307: GO 7323
// begin ComAttackUnit ( i , target2 ) ;
7309: LD_VAR 0 14
7313: PPUSH
7314: LD_VAR 0 23
7318: PPUSH
7319: CALL_OW 115
// end ; end ;
7323: GO 7148
7325: POP
7326: POP
// until soldiersOK_list = [ ] ;
7327: LD_VAR 0 19
7331: PUSH
7332: EMPTY
7333: EQUAL
7334: IFFALSE 6712
// end ; if strategy = 2 then
7336: LD_VAR 0 12
7340: PUSH
7341: LD_INT 2
7343: EQUAL
7344: IFFALSE 8049
// begin repeat wait ( 0 0$1 ) ;
7346: LD_INT 35
7348: PPUSH
7349: CALL_OW 67
// for i in soldiersOK_list do
7353: LD_ADDR_VAR 0 14
7357: PUSH
7358: LD_VAR 0 19
7362: PUSH
7363: FOR_IN
7364: IFFALSE 7398
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7366: LD_VAR 0 14
7370: PPUSH
7371: LD_INT 91
7373: PPUSH
7374: LD_INT 63
7376: PPUSH
7377: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7381: LD_VAR 0 14
7385: PPUSH
7386: LD_INT 75
7388: PPUSH
7389: LD_INT 33
7391: PPUSH
7392: CALL_OW 174
// end ;
7396: GO 7363
7398: POP
7399: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
7400: LD_INT 16
7402: PPUSH
7403: LD_INT 22
7405: PUSH
7406: LD_VAR 0 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PPUSH
7415: CALL_OW 70
7419: PUSH
7420: LD_INT 2
7422: GREATER
7423: IFFALSE 7346
// repeat wait ( 0 0$3 ) ;
7425: LD_INT 105
7427: PPUSH
7428: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7432: LD_ADDR_VAR 0 17
7436: PUSH
7437: LD_INT 22
7439: PUSH
7440: LD_VAR 0 1
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: LD_INT 3
7454: PUSH
7455: LD_INT 24
7457: PUSH
7458: LD_INT 550
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 24
7471: PUSH
7472: LD_INT 250
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 69
7492: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7493: LD_ADDR_VAR 0 19
7497: PUSH
7498: LD_INT 22
7500: PUSH
7501: LD_VAR 0 1
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 25
7515: PUSH
7516: LD_INT 1
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 25
7525: PUSH
7526: LD_INT 5
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 25
7535: PUSH
7536: LD_INT 8
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 9
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PUSH
7560: LD_INT 24
7562: PUSH
7563: LD_INT 1000
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if medicCount > 0 then
7580: LD_VAR 0 7
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7662
// begin if damageUnit_list > 0 then
7590: LD_VAR 0 17
7594: PUSH
7595: LD_INT 0
7597: GREATER
7598: IFFALSE 7662
// begin for i in damageUnit_list do
7600: LD_ADDR_VAR 0 14
7604: PUSH
7605: LD_VAR 0 17
7609: PUSH
7610: FOR_IN
7611: IFFALSE 7660
// begin ComMoveToArea ( i , healArea ) ;
7613: LD_VAR 0 14
7617: PPUSH
7618: LD_VAR 0 10
7622: PPUSH
7623: CALL_OW 113
// for j in medic_list do
7627: LD_ADDR_VAR 0 15
7631: PUSH
7632: LD_VAR 0 18
7636: PUSH
7637: FOR_IN
7638: IFFALSE 7656
// AddComHeal ( j , i ) ;
7640: LD_VAR 0 15
7644: PPUSH
7645: LD_VAR 0 14
7649: PPUSH
7650: CALL_OW 188
7654: GO 7637
7656: POP
7657: POP
// end ;
7658: GO 7610
7660: POP
7661: POP
// end ; end ; for i in soldiersOK_list do
7662: LD_ADDR_VAR 0 14
7666: PUSH
7667: LD_VAR 0 19
7671: PUSH
7672: FOR_IN
7673: IFFALSE 7849
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7675: LD_ADDR_VAR 0 22
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_VAR 0 11
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 69
7696: PPUSH
7697: LD_VAR 0 14
7701: PPUSH
7702: CALL_OW 74
7706: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7707: LD_ADDR_VAR 0 23
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_VAR 0 11
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 59
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: LD_INT 21
7735: PUSH
7736: LD_INT 1
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 21
7745: PUSH
7746: LD_INT 2
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: PPUSH
7771: LD_VAR 0 14
7775: PPUSH
7776: CALL_OW 74
7780: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7781: LD_VAR 0 14
7785: PPUSH
7786: LD_VAR 0 22
7790: PPUSH
7791: CALL_OW 296
7795: PUSH
7796: LD_INT 8
7798: PLUS
7799: PUSH
7800: LD_VAR 0 14
7804: PPUSH
7805: LD_VAR 0 23
7809: PPUSH
7810: CALL_OW 296
7814: LESS
7815: IFFALSE 7833
// begin ComAttackUnit ( i , target1 ) ;
7817: LD_VAR 0 14
7821: PPUSH
7822: LD_VAR 0 22
7826: PPUSH
7827: CALL_OW 115
// end else
7831: GO 7847
// begin ComAttackUnit ( i , target2 ) ;
7833: LD_VAR 0 14
7837: PPUSH
7838: LD_VAR 0 23
7842: PPUSH
7843: CALL_OW 115
// end ; end ;
7847: GO 7672
7849: POP
7850: POP
// for i in soldiersOK_list do
7851: LD_ADDR_VAR 0 14
7855: PUSH
7856: LD_VAR 0 19
7860: PUSH
7861: FOR_IN
7862: IFFALSE 8038
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7864: LD_ADDR_VAR 0 22
7868: PUSH
7869: LD_INT 22
7871: PUSH
7872: LD_VAR 0 11
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PPUSH
7881: CALL_OW 69
7885: PPUSH
7886: LD_VAR 0 14
7890: PPUSH
7891: CALL_OW 74
7895: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7896: LD_ADDR_VAR 0 23
7900: PUSH
7901: LD_INT 22
7903: PUSH
7904: LD_VAR 0 11
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 59
7918: PUSH
7919: EMPTY
7920: LIST
7921: PUSH
7922: LD_INT 21
7924: PUSH
7925: LD_INT 1
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 21
7934: PUSH
7935: LD_INT 2
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: PPUSH
7960: LD_VAR 0 14
7964: PPUSH
7965: CALL_OW 74
7969: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7970: LD_VAR 0 14
7974: PPUSH
7975: LD_VAR 0 22
7979: PPUSH
7980: CALL_OW 296
7984: PUSH
7985: LD_INT 8
7987: PLUS
7988: PUSH
7989: LD_VAR 0 14
7993: PPUSH
7994: LD_VAR 0 23
7998: PPUSH
7999: CALL_OW 296
8003: LESS
8004: IFFALSE 8022
// begin ComAttackUnit ( i , target1 ) ;
8006: LD_VAR 0 14
8010: PPUSH
8011: LD_VAR 0 22
8015: PPUSH
8016: CALL_OW 115
// end else
8020: GO 8036
// begin ComAttackUnit ( i , target2 ) ;
8022: LD_VAR 0 14
8026: PPUSH
8027: LD_VAR 0 23
8031: PPUSH
8032: CALL_OW 115
// end ; end ;
8036: GO 7861
8038: POP
8039: POP
// until soldiersOK_list = [ ] ;
8040: LD_VAR 0 19
8044: PUSH
8045: EMPTY
8046: EQUAL
8047: IFFALSE 7425
// end ; end ;
8049: LD_VAR 0 13
8053: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8054: LD_INT 0
8056: PPUSH
8057: PPUSH
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
8064: PPUSH
8065: PPUSH
8066: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8067: LD_ADDR_VAR 0 9
8071: PUSH
8072: LD_INT 22
8074: PUSH
8075: LD_VAR 0 1
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: LD_INT 21
8086: PUSH
8087: LD_INT 2
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 24
8096: PUSH
8097: LD_INT 660
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 58
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 34
8122: PUSH
8123: LD_INT 53
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: PPUSH
8141: CALL_OW 69
8145: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8146: LD_ADDR_VAR 0 10
8150: PUSH
8151: LD_INT 22
8153: PUSH
8154: LD_VAR 0 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: LD_INT 24
8178: PUSH
8179: LD_INT 660
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8200: LD_ADDR_VAR 0 11
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_INT 22
8212: PUSH
8213: LD_VAR 0 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 21
8224: PUSH
8225: LD_INT 2
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 1000
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 70
8258: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8259: LD_ADDR_VAR 0 12
8263: PUSH
8264: LD_VAR 0 2
8268: PPUSH
8269: LD_INT 22
8271: PUSH
8272: LD_VAR 0 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 21
8283: PUSH
8284: LD_INT 2
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 24
8293: PUSH
8294: LD_INT 1000
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 58
8303: PUSH
8304: EMPTY
8305: LIST
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: LD_INT 34
8312: PUSH
8313: LD_INT 53
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: PPUSH
8331: CALL_OW 70
8335: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8336: LD_ADDR_VAR 0 13
8340: PUSH
8341: EMPTY
8342: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8343: LD_ADDR_VAR 0 14
8347: PUSH
8348: LD_VAR 0 2
8352: PPUSH
8353: LD_INT 22
8355: PUSH
8356: LD_VAR 0 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 25
8367: PUSH
8368: LD_INT 3
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 70
8383: ST_TO_ADDR
// if damageVehicle_list > 0 then
8384: LD_VAR 0 10
8388: PUSH
8389: LD_INT 0
8391: GREATER
8392: IFFALSE 8430
// begin for i in damageVehicle_list do
8394: LD_ADDR_VAR 0 7
8398: PUSH
8399: LD_VAR 0 10
8403: PUSH
8404: FOR_IN
8405: IFFALSE 8428
// begin ComMoveXY ( i , repX , repY ) ;
8407: LD_VAR 0 7
8411: PPUSH
8412: LD_VAR 0 3
8416: PPUSH
8417: LD_VAR 0 4
8421: PPUSH
8422: CALL_OW 111
// end ;
8426: GO 8404
8428: POP
8429: POP
// end ; if vehicleNeedRepair_list > 0 then
8430: LD_VAR 0 11
8434: PUSH
8435: LD_INT 0
8437: GREATER
8438: IFFALSE 8525
// begin for i in vehicleNeedRepair_list do
8440: LD_ADDR_VAR 0 7
8444: PUSH
8445: LD_VAR 0 11
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8523
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8453: LD_ADDR_VAR 0 13
8457: PUSH
8458: LD_VAR 0 13
8462: PUSH
8463: LD_VAR 0 7
8467: PPUSH
8468: CALL_OW 313
8472: ADD
8473: ST_TO_ADDR
// for j in mechanicInside_list do
8474: LD_ADDR_VAR 0 8
8478: PUSH
8479: LD_VAR 0 13
8483: PUSH
8484: FOR_IN
8485: IFFALSE 8519
// begin ComExitVehicle ( i ) ;
8487: LD_VAR 0 7
8491: PPUSH
8492: CALL_OW 121
// wait ( 0 0$1 ) ;
8496: LD_INT 35
8498: PPUSH
8499: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8503: LD_VAR 0 7
8507: PPUSH
8508: LD_VAR 0 8
8512: PPUSH
8513: CALL_OW 129
// end ;
8517: GO 8484
8519: POP
8520: POP
// end ;
8521: GO 8450
8523: POP
8524: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8525: LD_VAR 0 12
8529: PUSH
8530: LD_INT 0
8532: GREATER
8533: IFFALSE 8573
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8535: LD_VAR 0 14
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_VAR 0 12
8548: PUSH
8549: LD_INT 1
8551: ARRAY
8552: PPUSH
8553: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8557: LD_VAR 0 12
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: LD_INT 100
8568: PPUSH
8569: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8573: LD_VAR 0 9
8577: PUSH
8578: LD_INT 0
8580: GREATER
8581: IFFALSE 8772
// begin for i in vehicleOK_list do
8583: LD_ADDR_VAR 0 7
8587: PUSH
8588: LD_VAR 0 9
8592: PUSH
8593: FOR_IN
8594: IFFALSE 8770
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8596: LD_ADDR_VAR 0 15
8600: PUSH
8601: LD_INT 22
8603: PUSH
8604: LD_VAR 0 5
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PPUSH
8618: LD_VAR 0 7
8622: PPUSH
8623: CALL_OW 74
8627: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8628: LD_ADDR_VAR 0 16
8632: PUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: LD_INT 59
8650: PUSH
8651: EMPTY
8652: LIST
8653: PUSH
8654: LD_INT 21
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 2
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: PPUSH
8687: CALL_OW 69
8691: PPUSH
8692: LD_VAR 0 7
8696: PPUSH
8697: CALL_OW 74
8701: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8702: LD_VAR 0 7
8706: PPUSH
8707: LD_VAR 0 15
8711: PPUSH
8712: CALL_OW 296
8716: PUSH
8717: LD_INT 8
8719: PLUS
8720: PUSH
8721: LD_VAR 0 7
8725: PPUSH
8726: LD_VAR 0 16
8730: PPUSH
8731: CALL_OW 296
8735: LESS
8736: IFFALSE 8754
// begin ComAttackUnit ( i , target1 ) ;
8738: LD_VAR 0 7
8742: PPUSH
8743: LD_VAR 0 15
8747: PPUSH
8748: CALL_OW 115
// end else
8752: GO 8768
// begin ComAttackUnit ( i , target2 ) ;
8754: LD_VAR 0 7
8758: PPUSH
8759: LD_VAR 0 16
8763: PPUSH
8764: CALL_OW 115
// end ; end ;
8768: GO 8593
8770: POP
8771: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8772: LD_ADDR_VAR 0 7
8776: PUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 22
8784: PUSH
8785: LD_VAR 0 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 70
8812: NOT
8813: PUSH
8814: FOR_IN
8815: IFFALSE 8838
// ComMoveXY ( i , repX , repY ) ;
8817: LD_VAR 0 7
8821: PPUSH
8822: LD_VAR 0 3
8826: PPUSH
8827: LD_VAR 0 4
8831: PPUSH
8832: CALL_OW 111
8836: GO 8814
8838: POP
8839: POP
// end ;
8840: LD_VAR 0 6
8844: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8845: LD_INT 0
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
// amChassisTab = [ ] ;
8858: LD_ADDR_VAR 0 19
8862: PUSH
8863: EMPTY
8864: ST_TO_ADDR
// arChassisTab = [ ] ;
8865: LD_ADDR_VAR 0 18
8869: PUSH
8870: EMPTY
8871: ST_TO_ADDR
// ruChassisTab = [ ] ;
8872: LD_ADDR_VAR 0 17
8876: PUSH
8877: EMPTY
8878: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8879: LD_INT 35
8881: PPUSH
8882: CALL_OW 67
// if nation = 1 then
8886: LD_VAR 0 5
8890: PUSH
8891: LD_INT 1
8893: EQUAL
8894: IFFALSE 9385
// begin uc_side = side ;
8896: LD_ADDR_OWVAR 20
8900: PUSH
8901: LD_VAR 0 2
8905: ST_TO_ADDR
// uc_nation = nation ;
8906: LD_ADDR_OWVAR 21
8910: PUSH
8911: LD_VAR 0 5
8915: ST_TO_ADDR
// vc_engine = vehengine ;
8916: LD_ADDR_OWVAR 39
8920: PUSH
8921: LD_VAR 0 6
8925: ST_TO_ADDR
// vc_control = vehcontrol ;
8926: LD_ADDR_OWVAR 38
8930: PUSH
8931: LD_VAR 0 7
8935: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8936: LD_ADDR_OWVAR 40
8940: PUSH
8941: LD_VAR 0 10
8945: PUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_VAR 0 10
8953: PPUSH
8954: CALL_OW 12
8958: ARRAY
8959: ST_TO_ADDR
// for j = 1 to AMWeapon do
8960: LD_ADDR_VAR 0 14
8964: PUSH
8965: DOUBLE
8966: LD_INT 1
8968: DEC
8969: ST_TO_ADDR
8970: LD_VAR 0 10
8974: PUSH
8975: FOR_TO
8976: IFFALSE 9277
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8978: LD_VAR 0 10
8982: PUSH
8983: LD_VAR 0 14
8987: ARRAY
8988: PUSH
8989: LD_INT 2
8991: EQUAL
8992: PUSH
8993: LD_VAR 0 10
8997: PUSH
8998: LD_VAR 0 14
9002: ARRAY
9003: PUSH
9004: LD_INT 3
9006: EQUAL
9007: OR
9008: IFFALSE 9061
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9010: LD_ADDR_VAR 0 19
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: LD_INT 2
9020: PUSH
9021: LD_INT 3
9023: PUSH
9024: LD_INT 4
9026: PUSH
9027: LD_INT 5
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9037: LD_ADDR_OWVAR 37
9041: PUSH
9042: LD_VAR 0 19
9046: PUSH
9047: LD_INT 1
9049: PPUSH
9050: LD_VAR 0 19
9054: PPUSH
9055: CALL_OW 12
9059: ARRAY
9060: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9061: LD_VAR 0 10
9065: PUSH
9066: LD_VAR 0 14
9070: ARRAY
9071: PUSH
9072: LD_INT 4
9074: EQUAL
9075: PUSH
9076: LD_VAR 0 10
9080: PUSH
9081: LD_VAR 0 14
9085: ARRAY
9086: PUSH
9087: LD_INT 5
9089: EQUAL
9090: OR
9091: PUSH
9092: LD_VAR 0 10
9096: PUSH
9097: LD_VAR 0 14
9101: ARRAY
9102: PUSH
9103: LD_INT 9
9105: EQUAL
9106: OR
9107: PUSH
9108: LD_VAR 0 10
9112: PUSH
9113: LD_VAR 0 14
9117: ARRAY
9118: PUSH
9119: LD_INT 11
9121: EQUAL
9122: OR
9123: PUSH
9124: LD_VAR 0 10
9128: PUSH
9129: LD_VAR 0 14
9133: ARRAY
9134: PUSH
9135: LD_INT 7
9137: EQUAL
9138: OR
9139: IFFALSE 9188
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9141: LD_ADDR_VAR 0 19
9145: PUSH
9146: LD_INT 2
9148: PUSH
9149: LD_INT 3
9151: PUSH
9152: LD_INT 4
9154: PUSH
9155: LD_INT 5
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9164: LD_ADDR_OWVAR 37
9168: PUSH
9169: LD_VAR 0 19
9173: PUSH
9174: LD_INT 1
9176: PPUSH
9177: LD_VAR 0 19
9181: PPUSH
9182: CALL_OW 12
9186: ARRAY
9187: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9188: LD_VAR 0 10
9192: PUSH
9193: LD_VAR 0 14
9197: ARRAY
9198: PUSH
9199: LD_INT 8
9201: EQUAL
9202: PUSH
9203: LD_VAR 0 10
9207: PUSH
9208: LD_VAR 0 14
9212: ARRAY
9213: PUSH
9214: LD_INT 6
9216: EQUAL
9217: OR
9218: PUSH
9219: LD_VAR 0 10
9223: PUSH
9224: LD_VAR 0 14
9228: ARRAY
9229: PUSH
9230: LD_INT 10
9232: EQUAL
9233: OR
9234: IFFALSE 9275
// begin amChassisTab = [ 4 , 5 ] ;
9236: LD_ADDR_VAR 0 19
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9251: LD_ADDR_OWVAR 37
9255: PUSH
9256: LD_VAR 0 19
9260: PUSH
9261: LD_INT 1
9263: PPUSH
9264: LD_VAR 0 19
9268: PPUSH
9269: CALL_OW 12
9273: ARRAY
9274: ST_TO_ADDR
// end ; end ;
9275: GO 8975
9277: POP
9278: POP
// veh = CreateVehicle ;
9279: LD_ADDR_VAR 0 16
9283: PUSH
9284: CALL_OW 45
9288: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9289: LD_VAR 0 16
9293: PPUSH
9294: LD_VAR 0 1
9298: PPUSH
9299: LD_INT 0
9301: PPUSH
9302: CALL_OW 49
// if vehControl = 1 then
9306: LD_VAR 0 7
9310: PUSH
9311: LD_INT 1
9313: EQUAL
9314: IFFALSE 9371
// begin hc_gallery =  ;
9316: LD_ADDR_OWVAR 33
9320: PUSH
9321: LD_STRING 
9323: ST_TO_ADDR
// hc_name =  ;
9324: LD_ADDR_OWVAR 26
9328: PUSH
9329: LD_STRING 
9331: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9332: LD_INT 0
9334: PPUSH
9335: LD_INT 3
9337: PPUSH
9338: LD_VAR 0 4
9342: PPUSH
9343: CALL_OW 380
// un = CreateHuman ;
9347: LD_ADDR_VAR 0 15
9351: PUSH
9352: CALL_OW 44
9356: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9357: LD_VAR 0 15
9361: PPUSH
9362: LD_VAR 0 16
9366: PPUSH
9367: CALL_OW 52
// end ; i = i + 1 ;
9371: LD_ADDR_VAR 0 13
9375: PUSH
9376: LD_VAR 0 13
9380: PUSH
9381: LD_INT 1
9383: PLUS
9384: ST_TO_ADDR
// end ; if nation = 2 then
9385: LD_VAR 0 5
9389: PUSH
9390: LD_INT 2
9392: EQUAL
9393: IFFALSE 9817
// begin uc_side = side ;
9395: LD_ADDR_OWVAR 20
9399: PUSH
9400: LD_VAR 0 2
9404: ST_TO_ADDR
// uc_nation = nation ;
9405: LD_ADDR_OWVAR 21
9409: PUSH
9410: LD_VAR 0 5
9414: ST_TO_ADDR
// vc_engine = vehengine ;
9415: LD_ADDR_OWVAR 39
9419: PUSH
9420: LD_VAR 0 6
9424: ST_TO_ADDR
// vc_control = vehcontrol ;
9425: LD_ADDR_OWVAR 38
9429: PUSH
9430: LD_VAR 0 7
9434: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9435: LD_ADDR_OWVAR 40
9439: PUSH
9440: LD_VAR 0 9
9444: PUSH
9445: LD_INT 1
9447: PPUSH
9448: LD_VAR 0 9
9452: PPUSH
9453: CALL_OW 12
9457: ARRAY
9458: ST_TO_ADDR
// for j = 1 to ARWeapons do
9459: LD_ADDR_VAR 0 14
9463: PUSH
9464: DOUBLE
9465: LD_INT 1
9467: DEC
9468: ST_TO_ADDR
9469: LD_VAR 0 9
9473: PUSH
9474: FOR_TO
9475: IFFALSE 9709
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9477: LD_VAR 0 9
9481: PUSH
9482: LD_VAR 0 14
9486: ARRAY
9487: PUSH
9488: LD_INT 24
9490: EQUAL
9491: PUSH
9492: LD_VAR 0 9
9496: PUSH
9497: LD_VAR 0 14
9501: ARRAY
9502: PUSH
9503: LD_INT 22
9505: EQUAL
9506: OR
9507: PUSH
9508: LD_VAR 0 9
9512: PUSH
9513: LD_VAR 0 14
9517: ARRAY
9518: PUSH
9519: LD_INT 23
9521: EQUAL
9522: OR
9523: PUSH
9524: LD_VAR 0 9
9528: PUSH
9529: LD_VAR 0 14
9533: ARRAY
9534: PUSH
9535: LD_INT 30
9537: EQUAL
9538: OR
9539: IFFALSE 9588
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9541: LD_ADDR_VAR 0 18
9545: PUSH
9546: LD_INT 11
9548: PUSH
9549: LD_INT 12
9551: PUSH
9552: LD_INT 13
9554: PUSH
9555: LD_INT 14
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9564: LD_ADDR_OWVAR 37
9568: PUSH
9569: LD_VAR 0 18
9573: PUSH
9574: LD_INT 1
9576: PPUSH
9577: LD_VAR 0 18
9581: PPUSH
9582: CALL_OW 12
9586: ARRAY
9587: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9588: LD_VAR 0 9
9592: PUSH
9593: LD_VAR 0 14
9597: ARRAY
9598: PUSH
9599: LD_INT 29
9601: EQUAL
9602: PUSH
9603: LD_VAR 0 9
9607: PUSH
9608: LD_VAR 0 14
9612: ARRAY
9613: PUSH
9614: LD_INT 28
9616: EQUAL
9617: OR
9618: PUSH
9619: LD_VAR 0 9
9623: PUSH
9624: LD_VAR 0 14
9628: ARRAY
9629: PUSH
9630: LD_INT 27
9632: EQUAL
9633: OR
9634: PUSH
9635: LD_VAR 0 9
9639: PUSH
9640: LD_VAR 0 14
9644: ARRAY
9645: PUSH
9646: LD_INT 26
9648: EQUAL
9649: OR
9650: PUSH
9651: LD_VAR 0 9
9655: PUSH
9656: LD_VAR 0 14
9660: ARRAY
9661: PUSH
9662: LD_INT 25
9664: EQUAL
9665: OR
9666: IFFALSE 9707
// begin arChassisTab = [ 13 , 14 ] ;
9668: LD_ADDR_VAR 0 18
9672: PUSH
9673: LD_INT 13
9675: PUSH
9676: LD_INT 14
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9683: LD_ADDR_OWVAR 37
9687: PUSH
9688: LD_VAR 0 18
9692: PUSH
9693: LD_INT 1
9695: PPUSH
9696: LD_VAR 0 18
9700: PPUSH
9701: CALL_OW 12
9705: ARRAY
9706: ST_TO_ADDR
// end ; end ;
9707: GO 9474
9709: POP
9710: POP
// veh = CreateVehicle ;
9711: LD_ADDR_VAR 0 16
9715: PUSH
9716: CALL_OW 45
9720: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9721: LD_VAR 0 16
9725: PPUSH
9726: LD_VAR 0 1
9730: PPUSH
9731: LD_INT 0
9733: PPUSH
9734: CALL_OW 49
// if vehcontrol = 1 then
9738: LD_VAR 0 7
9742: PUSH
9743: LD_INT 1
9745: EQUAL
9746: IFFALSE 9803
// begin hc_gallery =  ;
9748: LD_ADDR_OWVAR 33
9752: PUSH
9753: LD_STRING 
9755: ST_TO_ADDR
// hc_name =  ;
9756: LD_ADDR_OWVAR 26
9760: PUSH
9761: LD_STRING 
9763: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9764: LD_INT 0
9766: PPUSH
9767: LD_INT 3
9769: PPUSH
9770: LD_VAR 0 4
9774: PPUSH
9775: CALL_OW 380
// un = CreateHuman ;
9779: LD_ADDR_VAR 0 15
9783: PUSH
9784: CALL_OW 44
9788: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9789: LD_VAR 0 15
9793: PPUSH
9794: LD_VAR 0 16
9798: PPUSH
9799: CALL_OW 52
// end ; i = i + 1 ;
9803: LD_ADDR_VAR 0 13
9807: PUSH
9808: LD_VAR 0 13
9812: PUSH
9813: LD_INT 1
9815: PLUS
9816: ST_TO_ADDR
// end ; if nation = 3 then
9817: LD_VAR 0 5
9821: PUSH
9822: LD_INT 3
9824: EQUAL
9825: IFFALSE 10217
// begin uc_side = side ;
9827: LD_ADDR_OWVAR 20
9831: PUSH
9832: LD_VAR 0 2
9836: ST_TO_ADDR
// uc_nation = nation ;
9837: LD_ADDR_OWVAR 21
9841: PUSH
9842: LD_VAR 0 5
9846: ST_TO_ADDR
// vc_engine = vehengine ;
9847: LD_ADDR_OWVAR 39
9851: PUSH
9852: LD_VAR 0 6
9856: ST_TO_ADDR
// vc_control = vehcontrol ;
9857: LD_ADDR_OWVAR 38
9861: PUSH
9862: LD_VAR 0 7
9866: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9867: LD_ADDR_OWVAR 40
9871: PUSH
9872: LD_VAR 0 8
9876: PUSH
9877: LD_INT 1
9879: PPUSH
9880: LD_VAR 0 8
9884: PPUSH
9885: CALL_OW 12
9889: ARRAY
9890: ST_TO_ADDR
// for j = 1 to RuWeapons do
9891: LD_ADDR_VAR 0 14
9895: PUSH
9896: DOUBLE
9897: LD_INT 1
9899: DEC
9900: ST_TO_ADDR
9901: LD_VAR 0 8
9905: PUSH
9906: FOR_TO
9907: IFFALSE 10109
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9909: LD_VAR 0 8
9913: PUSH
9914: LD_VAR 0 14
9918: ARRAY
9919: PUSH
9920: LD_INT 42
9922: EQUAL
9923: PUSH
9924: LD_VAR 0 8
9928: PUSH
9929: LD_VAR 0 14
9933: ARRAY
9934: PUSH
9935: LD_INT 43
9937: EQUAL
9938: OR
9939: PUSH
9940: LD_VAR 0 8
9944: PUSH
9945: LD_VAR 0 14
9949: ARRAY
9950: PUSH
9951: LD_INT 44
9953: EQUAL
9954: OR
9955: PUSH
9956: LD_VAR 0 8
9960: PUSH
9961: LD_VAR 0 14
9965: ARRAY
9966: PUSH
9967: LD_INT 45
9969: EQUAL
9970: OR
9971: PUSH
9972: LD_VAR 0 8
9976: PUSH
9977: LD_VAR 0 14
9981: ARRAY
9982: PUSH
9983: LD_INT 49
9985: EQUAL
9986: OR
9987: IFFALSE 10036
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
9989: LD_ADDR_VAR 0 17
9993: PUSH
9994: LD_INT 21
9996: PUSH
9997: LD_INT 22
9999: PUSH
10000: LD_INT 23
10002: PUSH
10003: LD_INT 24
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10012: LD_ADDR_OWVAR 37
10016: PUSH
10017: LD_VAR 0 17
10021: PUSH
10022: LD_INT 1
10024: PPUSH
10025: LD_VAR 0 17
10029: PPUSH
10030: CALL_OW 12
10034: ARRAY
10035: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10036: LD_VAR 0 8
10040: PUSH
10041: LD_VAR 0 14
10045: ARRAY
10046: PUSH
10047: LD_INT 46
10049: EQUAL
10050: PUSH
10051: LD_VAR 0 8
10055: PUSH
10056: LD_VAR 0 14
10060: ARRAY
10061: PUSH
10062: LD_INT 47
10064: EQUAL
10065: OR
10066: IFFALSE 10107
// begin ruChassisTab = [ 23 , 24 ] ;
10068: LD_ADDR_VAR 0 17
10072: PUSH
10073: LD_INT 23
10075: PUSH
10076: LD_INT 24
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10083: LD_ADDR_OWVAR 37
10087: PUSH
10088: LD_VAR 0 17
10092: PUSH
10093: LD_INT 1
10095: PPUSH
10096: LD_VAR 0 17
10100: PPUSH
10101: CALL_OW 12
10105: ARRAY
10106: ST_TO_ADDR
// end ; end ;
10107: GO 9906
10109: POP
10110: POP
// veh = CreateVehicle ;
10111: LD_ADDR_VAR 0 16
10115: PUSH
10116: CALL_OW 45
10120: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10121: LD_VAR 0 16
10125: PPUSH
10126: LD_VAR 0 1
10130: PPUSH
10131: LD_INT 0
10133: PPUSH
10134: CALL_OW 49
// if vehcontrol = 1 then
10138: LD_VAR 0 7
10142: PUSH
10143: LD_INT 1
10145: EQUAL
10146: IFFALSE 10203
// begin hc_gallery =  ;
10148: LD_ADDR_OWVAR 33
10152: PUSH
10153: LD_STRING 
10155: ST_TO_ADDR
// hc_name =  ;
10156: LD_ADDR_OWVAR 26
10160: PUSH
10161: LD_STRING 
10163: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10164: LD_INT 0
10166: PPUSH
10167: LD_INT 3
10169: PPUSH
10170: LD_VAR 0 4
10174: PPUSH
10175: CALL_OW 380
// un = CreateHuman ;
10179: LD_ADDR_VAR 0 15
10183: PUSH
10184: CALL_OW 44
10188: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10189: LD_VAR 0 15
10193: PPUSH
10194: LD_VAR 0 16
10198: PPUSH
10199: CALL_OW 52
// end ; i = i + 1 ;
10203: LD_ADDR_VAR 0 13
10207: PUSH
10208: LD_VAR 0 13
10212: PUSH
10213: LD_INT 1
10215: PLUS
10216: ST_TO_ADDR
// end ; until i = vehCount ;
10217: LD_VAR 0 13
10221: PUSH
10222: LD_VAR 0 3
10226: EQUAL
10227: IFFALSE 8879
// repeat wait ( 0 0$1 ) ;
10229: LD_INT 35
10231: PPUSH
10232: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10236: LD_ADDR_VAR 0 20
10240: PUSH
10241: LD_INT 22
10243: PUSH
10244: LD_VAR 0 2
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 24
10265: PUSH
10266: LD_INT 661
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: ST_TO_ADDR
// if vehicleOK_list > 0 then
10283: LD_VAR 0 20
10287: PUSH
10288: LD_INT 0
10290: GREATER
10291: IFFALSE 10482
// begin for i in vehicleOK_list do
10293: LD_ADDR_VAR 0 13
10297: PUSH
10298: LD_VAR 0 20
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10480
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10306: LD_ADDR_VAR 0 21
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_VAR 0 11
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: PPUSH
10328: LD_VAR 0 13
10332: PPUSH
10333: CALL_OW 74
10337: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10338: LD_ADDR_VAR 0 22
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 11
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 2
10357: PUSH
10358: LD_INT 59
10360: PUSH
10361: EMPTY
10362: LIST
10363: PUSH
10364: LD_INT 21
10366: PUSH
10367: LD_INT 1
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 21
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: PPUSH
10402: LD_VAR 0 13
10406: PPUSH
10407: CALL_OW 74
10411: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10412: LD_VAR 0 13
10416: PPUSH
10417: LD_VAR 0 21
10421: PPUSH
10422: CALL_OW 296
10426: PUSH
10427: LD_INT 8
10429: PLUS
10430: PUSH
10431: LD_VAR 0 13
10435: PPUSH
10436: LD_VAR 0 22
10440: PPUSH
10441: CALL_OW 296
10445: LESS
10446: IFFALSE 10464
// begin ComAttackUnit ( i , target1 ) ;
10448: LD_VAR 0 13
10452: PPUSH
10453: LD_VAR 0 21
10457: PPUSH
10458: CALL_OW 115
// end else
10462: GO 10478
// begin ComAttackUnit ( i , target2 ) ;
10464: LD_VAR 0 13
10468: PPUSH
10469: LD_VAR 0 22
10473: PPUSH
10474: CALL_OW 115
// end ; end ;
10478: GO 10303
10480: POP
10481: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10482: LD_INT 22
10484: PUSH
10485: LD_VAR 0 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 2
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 69
10512: PUSH
10513: LD_INT 0
10515: EQUAL
10516: IFFALSE 10229
// end ; end_of_file
10518: LD_VAR 0 12
10522: RET
// every 1 do var i , gammaSquad , startX , startY ;
10523: GO 10525
10525: DISABLE
10526: LD_INT 0
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10532: LD_ADDR_VAR 0 2
10536: PUSH
10537: LD_EXP 8
10541: PUSH
10542: LD_EXP 9
10546: PUSH
10547: LD_EXP 10
10551: PUSH
10552: LD_EXP 11
10556: PUSH
10557: LD_EXP 12
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_INT 46
10576: PUSH
10577: LD_INT 45
10579: PUSH
10580: LD_INT 44
10582: PUSH
10583: LD_INT 43
10585: PUSH
10586: LD_INT 42
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10596: LD_ADDR_VAR 0 4
10600: PUSH
10601: LD_INT 14
10603: PUSH
10604: LD_INT 12
10606: PUSH
10607: LD_INT 10
10609: PUSH
10610: LD_INT 8
10612: PUSH
10613: LD_INT 6
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10623: LD_INT 32
10625: PPUSH
10626: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10630: LD_INT 32
10632: PPUSH
10633: LD_INT 51
10635: PPUSH
10636: LD_INT 26
10638: PPUSH
10639: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10643: LD_INT 32
10645: PPUSH
10646: LD_INT 53
10648: PPUSH
10649: LD_INT 23
10651: PPUSH
10652: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10656: LD_INT 32
10658: PPUSH
10659: LD_INT 52
10661: PPUSH
10662: LD_INT 19
10664: PPUSH
10665: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10669: LD_INT 35
10671: PPUSH
10672: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10676: LD_INT 32
10678: PPUSH
10679: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10683: LD_INT 32
10685: PPUSH
10686: CALL_OW 250
10690: PUSH
10691: LD_INT 52
10693: EQUAL
10694: PUSH
10695: LD_INT 32
10697: PPUSH
10698: CALL_OW 251
10702: PUSH
10703: LD_INT 19
10705: EQUAL
10706: AND
10707: IFFALSE 10669
// ComExitVehicle ( JMM ) ;
10709: LD_EXP 1
10713: PPUSH
10714: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10718: LD_EXP 7
10722: PPUSH
10723: LD_EXP 1
10727: PPUSH
10728: CALL_OW 119
// wait ( 0 0$01 ) ;
10732: LD_INT 35
10734: PPUSH
10735: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10739: LD_EXP 1
10743: PPUSH
10744: LD_INT 46
10746: PPUSH
10747: LD_INT 10
10749: PPUSH
10750: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10754: LD_EXP 1
10758: PPUSH
10759: LD_EXP 7
10763: PPUSH
10764: CALL_OW 179
// wait ( 0 0$4 ) ;
10768: LD_INT 140
10770: PPUSH
10771: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10775: LD_EXP 1
10779: PPUSH
10780: LD_STRING D1-JMM-1
10782: PPUSH
10783: CALL_OW 88
// for i := 1 to gammaSquad do
10787: LD_ADDR_VAR 0 1
10791: PUSH
10792: DOUBLE
10793: LD_INT 1
10795: DEC
10796: ST_TO_ADDR
10797: LD_VAR 0 2
10801: PUSH
10802: FOR_TO
10803: IFFALSE 10864
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
10805: LD_VAR 0 2
10809: PUSH
10810: LD_VAR 0 1
10814: ARRAY
10815: PPUSH
10816: LD_VAR 0 3
10820: PUSH
10821: LD_VAR 0 1
10825: ARRAY
10826: PPUSH
10827: LD_VAR 0 4
10831: PUSH
10832: LD_VAR 0 1
10836: ARRAY
10837: PPUSH
10838: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
10842: LD_VAR 0 2
10846: PUSH
10847: LD_VAR 0 1
10851: ARRAY
10852: PPUSH
10853: LD_EXP 1
10857: PPUSH
10858: CALL_OW 179
// end ;
10862: GO 10802
10864: POP
10865: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
10866: LD_EXP 4
10870: PPUSH
10871: LD_INT 41
10873: PPUSH
10874: LD_INT 4
10876: PPUSH
10877: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
10881: LD_EXP 4
10885: PPUSH
10886: LD_EXP 1
10890: PPUSH
10891: CALL_OW 179
// if Lisa = false and Bobby then
10895: LD_EXP 4
10899: PUSH
10900: LD_INT 0
10902: EQUAL
10903: PUSH
10904: LD_EXP 2
10908: AND
10909: IFFALSE 10940
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
10911: LD_EXP 2
10915: PPUSH
10916: LD_INT 41
10918: PPUSH
10919: LD_INT 4
10921: PPUSH
10922: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
10926: LD_EXP 2
10930: PPUSH
10931: LD_EXP 1
10935: PPUSH
10936: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
10940: LD_EXP 4
10944: PUSH
10945: LD_INT 0
10947: EQUAL
10948: PUSH
10949: LD_EXP 2
10953: PUSH
10954: LD_INT 0
10956: EQUAL
10957: AND
10958: PUSH
10959: LD_EXP 3
10963: AND
10964: IFFALSE 10995
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
10966: LD_EXP 3
10970: PPUSH
10971: LD_INT 41
10973: PPUSH
10974: LD_INT 4
10976: PPUSH
10977: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
10981: LD_EXP 3
10985: PPUSH
10986: LD_EXP 1
10990: PPUSH
10991: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
10995: LD_EXP 4
10999: PUSH
11000: LD_INT 0
11002: EQUAL
11003: PUSH
11004: LD_EXP 2
11008: PUSH
11009: LD_INT 0
11011: EQUAL
11012: AND
11013: PUSH
11014: LD_EXP 3
11018: PUSH
11019: LD_INT 0
11021: EQUAL
11022: AND
11023: IFFALSE 11054
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11025: LD_EXP 6
11029: PPUSH
11030: LD_INT 41
11032: PPUSH
11033: LD_INT 4
11035: PPUSH
11036: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11040: LD_EXP 6
11044: PPUSH
11045: LD_EXP 1
11049: PPUSH
11050: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11054: LD_EXP 7
11058: PPUSH
11059: LD_STRING D1-Brown-1
11061: PPUSH
11062: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11066: LD_EXP 1
11070: PPUSH
11071: LD_STRING D1-JMM-2
11073: PPUSH
11074: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11078: LD_EXP 7
11082: PPUSH
11083: LD_STRING D1-Brown-2
11085: PPUSH
11086: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11090: LD_EXP 1
11094: PPUSH
11095: LD_EXP 9
11099: PPUSH
11100: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11104: LD_EXP 9
11108: PPUSH
11109: LD_STRING D1-FSol1-2
11111: PPUSH
11112: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11116: LD_EXP 1
11120: PPUSH
11121: LD_EXP 8
11125: PPUSH
11126: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11130: LD_EXP 8
11134: PPUSH
11135: LD_STRING D1-Sol2-2
11137: PPUSH
11138: CALL_OW 88
// if Lisa then
11142: LD_EXP 4
11146: IFFALSE 11186
// begin ComTurnUnit ( JMM , Lisa ) ;
11148: LD_EXP 1
11152: PPUSH
11153: LD_EXP 4
11157: PPUSH
11158: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11162: LD_EXP 4
11166: PPUSH
11167: LD_STRING D1-Lisa-2
11169: PPUSH
11170: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11174: LD_EXP 1
11178: PPUSH
11179: LD_STRING D1-JMM-3
11181: PPUSH
11182: CALL_OW 88
// end ; if Bobby then
11186: LD_EXP 2
11190: IFFALSE 11230
// begin ComTurnUnit ( JMM , Bobby ) ;
11192: LD_EXP 1
11196: PPUSH
11197: LD_EXP 2
11201: PPUSH
11202: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11206: LD_EXP 2
11210: PPUSH
11211: LD_STRING D1-Bobby-2
11213: PPUSH
11214: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11218: LD_EXP 1
11222: PPUSH
11223: LD_STRING D1-JMM-3
11225: PPUSH
11226: CALL_OW 88
// end ; if Cyrus then
11230: LD_EXP 3
11234: IFFALSE 11274
// begin ComTurnUnit ( JMM , Cyrus ) ;
11236: LD_EXP 1
11240: PPUSH
11241: LD_EXP 3
11245: PPUSH
11246: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11250: LD_EXP 3
11254: PPUSH
11255: LD_STRING D1-Cyrus-2
11257: PPUSH
11258: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11262: LD_EXP 1
11266: PPUSH
11267: LD_STRING D1-JMM-3
11269: PPUSH
11270: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11274: LD_EXP 1
11278: PPUSH
11279: LD_EXP 7
11283: PPUSH
11284: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11288: LD_EXP 1
11292: PPUSH
11293: LD_STRING D1-JMM-3a
11295: PPUSH
11296: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11300: LD_EXP 7
11304: PPUSH
11305: LD_INT 38
11307: PPUSH
11308: LD_INT 5
11310: PPUSH
11311: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11315: LD_EXP 7
11319: PPUSH
11320: LD_EXP 1
11324: PPUSH
11325: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11329: LD_EXP 1
11333: PPUSH
11334: LD_INT 40
11336: PPUSH
11337: LD_INT 7
11339: PPUSH
11340: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11344: LD_EXP 1
11348: PPUSH
11349: LD_EXP 7
11353: PPUSH
11354: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11358: LD_EXP 7
11362: PPUSH
11363: LD_STRING D1-Brown-3
11365: PPUSH
11366: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11370: LD_EXP 14
11374: PPUSH
11375: LD_STRING D1-Har-3
11377: PPUSH
11378: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11382: LD_EXP 1
11386: PPUSH
11387: LD_STRING D1-JMM-4
11389: PPUSH
11390: CALL_OW 88
// PrepareRussianConvoy ;
11394: CALL 2364 0 0
// SayRadio ( Harisson , D1-Har-4 ) ;
11398: LD_EXP 14
11402: PPUSH
11403: LD_STRING D1-Har-4
11405: PPUSH
11406: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11410: LD_EXP 1
11414: PPUSH
11415: LD_STRING D1-JMM-5
11417: PPUSH
11418: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11422: LD_EXP 14
11426: PPUSH
11427: LD_STRING D1-Har-5
11429: PPUSH
11430: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11434: LD_EXP 1
11438: PPUSH
11439: LD_STRING D1-JMM-6
11441: PPUSH
11442: CALL_OW 88
// InGameOff ;
11446: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
11450: LD_STRING M1
11452: PPUSH
11453: CALL_OW 337
// SaveForQuickRestart ;
11457: CALL_OW 22
// timerStatus = 1 ;
11461: LD_ADDR_EXP 27
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// startTimer = 1 ;
11469: LD_ADDR_EXP 28
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// bonusAvalaible = 1 ;
11477: LD_ADDR_EXP 40
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11485: LD_INT 105
11487: PPUSH
11488: CALL_OW 67
// DialogueOn ;
11492: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11496: LD_EXP 12
11500: PPUSH
11501: LD_STRING D9-Mech1-1
11503: PPUSH
11504: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11508: LD_EXP 1
11512: PPUSH
11513: LD_STRING D9-JMM-1
11515: PPUSH
11516: CALL_OW 88
// DialogueOff ;
11520: CALL_OW 7
// end ;
11524: PPOPN 4
11526: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11527: LD_INT 47
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: CALL_OW 321
11537: PUSH
11538: LD_INT 2
11540: EQUAL
11541: PUSH
11542: LD_INT 22
11544: PUSH
11545: LD_INT 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 30
11564: PUSH
11565: LD_INT 3
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: PPUSH
11577: CALL_OW 69
11581: PUSH
11582: LD_INT 0
11584: GREATER
11585: AND
11586: IFFALSE 11816
11588: GO 11590
11590: DISABLE
// begin if IsOk ( Campell ) then
11591: LD_EXP 12
11595: PPUSH
11596: CALL_OW 302
11600: IFFALSE 11616
// begin Say ( Campell , D10-Mech1-1 ) ;
11602: LD_EXP 12
11606: PPUSH
11607: LD_STRING D10-Mech1-1
11609: PPUSH
11610: CALL_OW 88
// end else
11614: GO 11816
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11616: LD_INT 22
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 21
11628: PUSH
11629: LD_INT 1
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 25
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 26
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: PUSH
11667: LD_EXP 1
11671: PUSH
11672: EMPTY
11673: LIST
11674: PUSH
11675: LD_INT 0
11677: GREATER
11678: DIFF
11679: IFFALSE 11753
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11681: LD_INT 22
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 21
11693: PUSH
11694: LD_INT 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 3
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 26
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: PPUSH
11727: CALL_OW 69
11731: PUSH
11732: LD_EXP 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: DIFF
11740: PPUSH
11741: LD_STRING D10-Mech1-1
11743: PPUSH
11744: LD_STRING D10-Mech1-1
11746: PPUSH
11747: CALL 3600 0 3
// end else
11751: GO 11816
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11753: LD_INT 22
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 21
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 26
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 1
11790: ARRAY
11791: PPUSH
11792: CALL_OW 69
11796: PUSH
11797: LD_EXP 1
11801: PUSH
11802: EMPTY
11803: LIST
11804: DIFF
11805: PPUSH
11806: LD_STRING D10-Mech1-1
11808: PPUSH
11809: LD_STRING D10-Mech1-1
11811: PPUSH
11812: CALL 3600 0 3
// end ; end ; end ;
11816: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
11817: LD_INT 22
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 30
11829: PUSH
11830: LD_INT 32
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PPUSH
11841: CALL_OW 69
11845: PUSH
11846: LD_INT 0
11848: GREATER
11849: PUSH
11850: LD_EXP 30
11854: PUSH
11855: LD_INT 0
11857: EQUAL
11858: AND
11859: IFFALSE 12099
11861: GO 11863
11863: DISABLE
// begin if IsOK ( Claptopn ) then
11864: LD_EXP 11
11868: PPUSH
11869: CALL_OW 302
11873: IFFALSE 11889
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
11875: LD_EXP 11
11879: PPUSH
11880: LD_STRING D9b-Eng1-1
11882: PPUSH
11883: CALL_OW 88
// end else
11887: GO 12085
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11889: LD_INT 22
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 21
11901: PUSH
11902: LD_INT 1
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 25
11911: PUSH
11912: LD_INT 3
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 26
11921: PUSH
11922: LD_INT 1
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: PUSH
11940: LD_EXP 1
11944: PUSH
11945: EMPTY
11946: LIST
11947: PUSH
11948: LD_INT 0
11950: GREATER
11951: DIFF
11952: IFFALSE 12026
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
11954: LD_INT 22
11956: PUSH
11957: LD_INT 1
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 21
11966: PUSH
11967: LD_INT 1
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 25
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 26
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 69
12004: PUSH
12005: LD_EXP 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: DIFF
12013: PPUSH
12014: LD_STRING D9b-Eng1-1
12016: PPUSH
12017: LD_STRING D9b-Eng1-11
12019: PPUSH
12020: CALL 3600 0 3
// end else
12024: GO 12085
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12026: LD_INT 22
12028: PUSH
12029: LD_INT 1
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 21
12038: PUSH
12039: LD_INT 1
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 26
12048: PUSH
12049: LD_INT 1
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 69
12065: PUSH
12066: LD_EXP 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: DIFF
12074: PPUSH
12075: LD_STRING D9b-Eng1-1
12077: PPUSH
12078: LD_STRING D9b-Eng1-1
12080: PPUSH
12081: CALL 3600 0 3
// end ; end ; if energyVDialog = 0 then
12085: LD_EXP 31
12089: PUSH
12090: LD_INT 0
12092: EQUAL
12093: IFFALSE 12099
// EnergyDialog ;
12095: CALL 3912 0 0
// end ;
12099: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12100: LD_EXP 32
12104: PUSH
12105: LD_INT 1
12107: EQUAL
12108: PUSH
12109: LD_EXP 33
12113: PUSH
12114: LD_INT 1
12116: EQUAL
12117: AND
12118: IFFALSE 12130
12120: GO 12122
12122: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12123: LD_STRING M1a
12125: PPUSH
12126: CALL_OW 337
12130: END
// every 3 3$0 do
12131: GO 12133
12133: DISABLE
// begin PrepareFirstAttack ;
12134: CALL 3156 0 0
// end ;
12138: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
12139: LD_INT 22
12141: PUSH
12142: LD_INT 5
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 21
12151: PUSH
12152: LD_INT 1
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: PUSH
12168: LD_INT 3
12170: LESSEQUAL
12171: PUSH
12172: LD_EXP 21
12176: PUSH
12177: LD_INT 1
12179: EQUAL
12180: AND
12181: IFFALSE 12499
12183: GO 12185
12185: DISABLE
12186: LD_INT 0
12188: PPUSH
// begin firstRussianAttack = 2 ;
12189: LD_ADDR_EXP 21
12193: PUSH
12194: LD_INT 2
12196: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12197: LD_ADDR_VAR 0 1
12201: PUSH
12202: LD_INT 22
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 21
12214: PUSH
12215: LD_INT 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PPUSH
12226: CALL_OW 69
12230: PUSH
12231: FOR_IN
12232: IFFALSE 12251
// ComMoveXY ( i , 125 , 98 ) ;
12234: LD_VAR 0 1
12238: PPUSH
12239: LD_INT 125
12241: PPUSH
12242: LD_INT 98
12244: PPUSH
12245: CALL_OW 111
12249: GO 12231
12251: POP
12252: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12253: LD_INT 22
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 21
12265: PUSH
12266: LD_INT 1
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: PUSH
12282: LD_EXP 1
12286: PUSH
12287: LD_EXP 7
12291: PUSH
12292: LD_EXP 4
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: DIFF
12302: PPUSH
12303: LD_STRING DAtt1-Sol1-1
12305: PPUSH
12306: LD_STRING DAtt1-FSol1-1
12308: PPUSH
12309: CALL 3600 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12313: LD_EXP 1
12317: PPUSH
12318: LD_STRING DAtt1-JMM-1
12320: PPUSH
12321: CALL_OW 88
// if Lisa then
12325: LD_EXP 4
12329: IFFALSE 12345
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12331: LD_EXP 4
12335: PPUSH
12336: LD_STRING DAtt1a-Lisa-1
12338: PPUSH
12339: CALL_OW 88
// end else
12343: GO 12416
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12345: LD_INT 22
12347: PUSH
12348: LD_INT 1
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 21
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 26
12367: PUSH
12368: LD_INT 1
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: PPUSH
12380: CALL_OW 69
12384: PUSH
12385: LD_EXP 1
12389: PUSH
12390: LD_EXP 7
12394: PUSH
12395: LD_EXP 4
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: DIFF
12405: PPUSH
12406: LD_STRING DAtt1a-Sol1-1
12408: PPUSH
12409: LD_STRING DAtt1-FSol1-1
12411: PPUSH
12412: CALL 3600 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12416: LD_EXP 1
12420: PPUSH
12421: LD_STRING DAtt1a-JMM-1
12423: PPUSH
12424: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12428: LD_INT 22
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 21
12440: PUSH
12441: LD_INT 1
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 26
12450: PUSH
12451: LD_INT 1
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: PPUSH
12463: CALL_OW 69
12467: PUSH
12468: LD_EXP 1
12472: PUSH
12473: LD_EXP 7
12477: PUSH
12478: LD_EXP 4
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: DIFF
12488: PPUSH
12489: LD_STRING DAtt1b-Sol1-1
12491: PPUSH
12492: LD_STRING DAtt1a-Sol1-1
12494: PPUSH
12495: CALL 3600 0 3
// end ;
12499: PPOPN 1
12501: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12502: LD_EXP 21
12506: PUSH
12507: LD_INT 2
12509: EQUAL
12510: IFFALSE 12572
12512: GO 12514
12514: DISABLE
12515: LD_INT 0
12517: PPUSH
// begin enable ;
12518: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12519: LD_ADDR_VAR 0 1
12523: PUSH
12524: LD_INT 5
12526: PPUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 5
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 21
12539: PUSH
12540: LD_INT 1
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 70
12555: PUSH
12556: FOR_IN
12557: IFFALSE 12570
// RemoveUnit ( i ) ;
12559: LD_VAR 0 1
12563: PPUSH
12564: CALL_OW 64
12568: GO 12556
12570: POP
12571: POP
// end ;
12572: PPOPN 1
12574: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12575: LD_INT 22
12577: PUSH
12578: LD_INT 5
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: PPUSH
12588: CALL_OW 69
12592: PUSH
12593: LD_INT 0
12595: EQUAL
12596: PUSH
12597: LD_EXP 21
12601: PUSH
12602: LD_INT 2
12604: EQUAL
12605: AND
12606: IFFALSE 12619
12608: GO 12610
12610: DISABLE
// firstRussianAttack = 3 ;
12611: LD_ADDR_EXP 21
12615: PUSH
12616: LD_INT 3
12618: ST_TO_ADDR
12619: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12620: LD_EXP 26
12624: PUSH
12625: LD_INT 0
12627: EQUAL
12628: IFFALSE 12709
12630: GO 12632
12632: DISABLE
// begin timerStatus = 4 ;
12633: LD_ADDR_EXP 27
12637: PUSH
12638: LD_INT 4
12640: ST_TO_ADDR
// DialogueOn ;
12641: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12645: LD_EXP 13
12649: PPUSH
12650: LD_STRING D2-Don-1
12652: PPUSH
12653: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12657: LD_EXP 1
12661: PPUSH
12662: LD_STRING D2-JMM-1
12664: PPUSH
12665: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12669: LD_EXP 13
12673: PPUSH
12674: LD_STRING D2-Don-2
12676: PPUSH
12677: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12681: LD_EXP 1
12685: PPUSH
12686: LD_STRING D2-JMM-2
12688: PPUSH
12689: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12693: LD_EXP 13
12697: PPUSH
12698: LD_STRING D2-Don-3
12700: PPUSH
12701: CALL_OW 94
// DialogueOff ;
12705: CALL_OW 7
// end ;
12709: END
// every 12 12$0 do var tmp ;
12710: GO 12712
12712: DISABLE
12713: LD_INT 0
12715: PPUSH
// begin PrepareDonaldsonArmy ;
12716: CALL 941 0 0
// CenterNowOnUnits ( Donaldson ) ;
12720: LD_EXP 13
12724: PPUSH
12725: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
12729: LD_ADDR_VAR 0 1
12733: PUSH
12734: LD_INT 22
12736: PUSH
12737: LD_INT 4
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 21
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 26
12756: PUSH
12757: LD_INT 1
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 25
12766: PUSH
12767: LD_INT 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: PPUSH
12780: CALL_OW 69
12784: PUSH
12785: LD_EXP 5
12789: PUSH
12790: EMPTY
12791: LIST
12792: DIFF
12793: ST_TO_ADDR
// DialogueOn ;
12794: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
12798: LD_VAR 0 1
12802: PPUSH
12803: LD_STRING D3-Sol1-1
12805: PPUSH
12806: LD_STRING D3-Sol1-1
12808: PPUSH
12809: CALL 3600 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
12813: LD_INT 22
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 21
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 26
12835: PUSH
12836: LD_INT 1
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 25
12845: PUSH
12846: LD_INT 3
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: PPUSH
12859: CALL_OW 69
12863: PPUSH
12864: LD_STRING D3-Sol2-1
12866: PPUSH
12867: LD_STRING D3-Sol2-1
12869: PPUSH
12870: CALL 3600 0 3
// if Frank then
12874: LD_EXP 5
12878: IFFALSE 12892
// Say ( Frank , D3-Frank-1 ) ;
12880: LD_EXP 5
12884: PPUSH
12885: LD_STRING D3-Frank-1
12887: PPUSH
12888: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
12892: LD_EXP 13
12896: PPUSH
12897: LD_STRING D3-Don-1
12899: PPUSH
12900: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
12904: LD_EXP 13
12908: PPUSH
12909: LD_STRING D3-Don-1a
12911: PPUSH
12912: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
12916: LD_EXP 1
12920: PPUSH
12921: LD_STRING D3-JMM-1
12923: PPUSH
12924: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
12928: LD_EXP 13
12932: PPUSH
12933: LD_STRING D3-Don-2
12935: PPUSH
12936: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
12940: LD_INT 22
12942: PUSH
12943: LD_INT 6
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 21
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: PUSH
12969: LD_INT 0
12971: GREATER
12972: IFFALSE 13086
// begin Say ( JMM , D3-JMM-2 ) ;
12974: LD_EXP 1
12978: PPUSH
12979: LD_STRING D3-JMM-2
12981: PPUSH
12982: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
12986: LD_EXP 13
12990: PPUSH
12991: LD_STRING D3-Don-3
12993: PPUSH
12994: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
12998: LD_EXP 1
13002: PPUSH
13003: LD_STRING D3-JMM-3
13005: PPUSH
13006: CALL_OW 88
// if IsOK ( Frank ) then
13010: LD_EXP 5
13014: PPUSH
13015: CALL_OW 302
13019: IFFALSE 13033
// Say ( Frank , D3-Frank-3 ) ;
13021: LD_EXP 5
13025: PPUSH
13026: LD_STRING D3-Frank-3
13028: PPUSH
13029: CALL_OW 88
// DialogueOff ;
13033: CALL_OW 7
// if IsOK ( Frank ) then
13037: LD_EXP 5
13041: PPUSH
13042: CALL_OW 302
13046: IFFALSE 13084
// begin SetSide ( Frank , 0 ) ;
13048: LD_EXP 5
13052: PPUSH
13053: LD_INT 0
13055: PPUSH
13056: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13060: LD_EXP 5
13064: PPUSH
13065: LD_INT 12
13067: PPUSH
13068: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13072: LD_EXP 5
13076: PPUSH
13077: LD_STRING Frank
13079: PPUSH
13080: CALL_OW 38
// end ; end else
13084: GO 13149
// begin Say ( JMM , D3-JMM-4 ) ;
13086: LD_EXP 1
13090: PPUSH
13091: LD_STRING D3-JMM-4
13093: PPUSH
13094: CALL_OW 88
// DialogueOff ;
13098: CALL_OW 7
// if IsOK ( Frank ) then
13102: LD_EXP 5
13106: PPUSH
13107: CALL_OW 302
13111: IFFALSE 13149
// begin SetSide ( Frank , 0 ) ;
13113: LD_EXP 5
13117: PPUSH
13118: LD_INT 0
13120: PPUSH
13121: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13125: LD_EXP 5
13129: PPUSH
13130: LD_INT 12
13132: PPUSH
13133: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13137: LD_EXP 5
13141: PPUSH
13142: LD_STRING Frank
13144: PPUSH
13145: CALL_OW 38
// end ; end ; end ;
13149: PPOPN 1
13151: END
// every 1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
13152: LD_EXP 5
13156: PPUSH
13157: LD_INT 12
13159: PPUSH
13160: CALL_OW 308
13164: PUSH
13165: LD_EXP 5
13169: PPUSH
13170: CALL_OW 255
13174: PUSH
13175: LD_INT 0
13177: EQUAL
13178: AND
13179: IFFALSE 13201
13181: GO 13183
13183: DISABLE
// begin RemoveUnit ( Frank ) ;
13184: LD_EXP 5
13188: PPUSH
13189: CALL_OW 64
// frankScoutBase = 1 ;
13193: LD_ADDR_EXP 23
13197: PUSH
13198: LD_INT 1
13200: ST_TO_ADDR
// end ;
13201: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13202: LD_EXP 13
13206: PPUSH
13207: CALL_OW 255
13211: PUSH
13212: LD_INT 4
13214: EQUAL
13215: PUSH
13216: LD_EXP 13
13220: PPUSH
13221: CALL_OW 302
13225: AND
13226: IFFALSE 13251
13228: GO 13230
13230: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13231: LD_EXP 13
13235: PPUSH
13236: LD_STRING D3b-Don-1
13238: PPUSH
13239: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13243: LD_ADDR_EXP 39
13247: PUSH
13248: LD_INT 1
13250: ST_TO_ADDR
// end ;
13251: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13252: LD_EXP 22
13256: PUSH
13257: LD_INT 0
13259: EQUAL
13260: IFFALSE 13416
13262: GO 13264
13264: DISABLE
13265: LD_INT 0
13267: PPUSH
13268: PPUSH
// begin enable ;
13269: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13270: LD_ADDR_VAR 0 1
13274: PUSH
13275: LD_INT 22
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 21
13287: PUSH
13288: LD_INT 1
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 69
13303: PUSH
13304: FOR_IN
13305: IFFALSE 13414
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13307: LD_ADDR_VAR 0 2
13311: PUSH
13312: LD_INT 22
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 21
13324: PUSH
13325: LD_INT 1
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PPUSH
13336: CALL_OW 69
13340: PUSH
13341: FOR_IN
13342: IFFALSE 13410
// begin if GetDistUnits ( i , j ) < 7 then
13344: LD_VAR 0 1
13348: PPUSH
13349: LD_VAR 0 2
13353: PPUSH
13354: CALL_OW 296
13358: PUSH
13359: LD_INT 7
13361: LESS
13362: IFFALSE 13408
// begin saveDonaldson = 1 ;
13364: LD_ADDR_EXP 22
13368: PUSH
13369: LD_INT 1
13371: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13372: LD_INT 22
13374: PUSH
13375: LD_INT 4
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 21
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 69
13400: PPUSH
13401: LD_INT 1
13403: PPUSH
13404: CALL_OW 235
// end ; end ;
13408: GO 13341
13410: POP
13411: POP
// end ;
13412: GO 13304
13414: POP
13415: POP
// end ;
13416: PPOPN 2
13418: END
// every 2 2$0 trigger saveDonaldson = 1 do
13419: LD_EXP 22
13423: PUSH
13424: LD_INT 1
13426: EQUAL
13427: IFFALSE 13669
13429: GO 13431
13431: DISABLE
// begin uc_side = 4 ;
13432: LD_ADDR_OWVAR 20
13436: PUSH
13437: LD_INT 4
13439: ST_TO_ADDR
// uc_nation = 1 ;
13440: LD_ADDR_OWVAR 21
13444: PUSH
13445: LD_INT 1
13447: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13448: LD_ADDR_EXP 5
13452: PUSH
13453: LD_STRING Frank
13455: PPUSH
13456: CALL_OW 34
13460: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13461: LD_EXP 5
13465: PPUSH
13466: LD_INT 13
13468: PPUSH
13469: LD_INT 0
13471: PPUSH
13472: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13476: LD_INT 35
13478: PPUSH
13479: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
13483: LD_EXP 5
13487: PPUSH
13488: LD_INT 51
13490: PPUSH
13491: LD_INT 15
13493: PPUSH
13494: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
13498: LD_EXP 5
13502: PPUSH
13503: LD_EXP 1
13507: PPUSH
13508: CALL_OW 296
13512: PUSH
13513: LD_INT 6
13515: LESS
13516: IFFALSE 13476
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13518: LD_EXP 1
13522: PUSH
13523: LD_EXP 5
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 87
// DialogueOn ;
13536: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13540: LD_EXP 5
13544: PPUSH
13545: LD_STRING D3a-Frank-1
13547: PPUSH
13548: CALL_OW 88
// if Lisa then
13552: LD_EXP 4
13556: IFFALSE 13606
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13558: LD_EXP 4
13562: PPUSH
13563: LD_STRING D3a-Lisa-1
13565: PPUSH
13566: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13570: LD_EXP 5
13574: PPUSH
13575: LD_STRING D3a-Frank-2
13577: PPUSH
13578: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13582: LD_EXP 4
13586: PPUSH
13587: LD_STRING D3a-Lisa-2
13589: PPUSH
13590: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13594: LD_EXP 5
13598: PPUSH
13599: LD_STRING D3a-Frank-3
13601: PPUSH
13602: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13606: LD_EXP 1
13610: PPUSH
13611: LD_STRING D3a-JMM-3
13613: PPUSH
13614: CALL_OW 88
// DialogueOff ;
13618: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13622: LD_EXP 5
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 235
// InGameOn ;
13634: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13638: LD_INT 1
13640: PPUSH
13641: LD_INT 7
13643: PPUSH
13644: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13648: LD_INT 93
13650: PPUSH
13651: LD_INT 91
13653: PPUSH
13654: CALL_OW 84
// wait ( 0 0$5 ) ;
13658: LD_INT 175
13660: PPUSH
13661: CALL_OW 67
// InGameOff ;
13665: CALL_OW 9
// end ;
13669: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13670: LD_OWVAR 67
13674: PUSH
13675: LD_INT 2
13677: EQUAL
13678: PUSH
13679: LD_OWVAR 67
13683: PUSH
13684: LD_INT 3
13686: EQUAL
13687: OR
13688: IFFALSE 13712
13690: GO 13692
13692: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
13693: LD_INT 24
13695: PPUSH
13696: LD_INT 24
13698: PPUSH
13699: LD_INT 1
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: LD_INT 53
13707: PPUSH
13708: CALL_OW 125
13712: END
// every 18 18$0 do
13713: GO 13715
13715: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
13716: LD_EXP 14
13720: PPUSH
13721: LD_STRING D4-Har-1
13723: PPUSH
13724: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
13728: LD_EXP 1
13732: PPUSH
13733: LD_STRING D4-JMM-1
13735: PPUSH
13736: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
13740: LD_EXP 14
13744: PPUSH
13745: LD_STRING D4-Har-2
13747: PPUSH
13748: CALL_OW 94
// case query ( Q1 ) of 1 :
13752: LD_STRING Q1
13754: PPUSH
13755: CALL_OW 97
13759: PUSH
13760: LD_INT 1
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13827
13768: POP
// begin Say ( JMM , D5-JMM-1 ) ;
13769: LD_EXP 1
13773: PPUSH
13774: LD_STRING D5-JMM-1
13776: PPUSH
13777: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
13781: LD_EXP 14
13785: PPUSH
13786: LD_STRING D5-Har-1
13788: PPUSH
13789: CALL_OW 94
// timeToSupport = 10 10$0 ;
13793: LD_ADDR_EXP 26
13797: PUSH
13798: LD_INT 21000
13800: ST_TO_ADDR
// timerStatus = 2 ;
13801: LD_ADDR_EXP 27
13805: PUSH
13806: LD_INT 2
13808: ST_TO_ADDR
// startTimer = 1 ;
13809: LD_ADDR_EXP 28
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// harrAnswer = 1 ;
13817: LD_ADDR_EXP 24
13821: PUSH
13822: LD_INT 1
13824: ST_TO_ADDR
// end ; 2 :
13825: GO 13962
13827: LD_INT 2
13829: DOUBLE
13830: EQUAL
13831: IFTRUE 13835
13833: GO 13894
13835: POP
// begin Say ( JMM , D5-JMM-2 ) ;
13836: LD_EXP 1
13840: PPUSH
13841: LD_STRING D5-JMM-2
13843: PPUSH
13844: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
13848: LD_EXP 14
13852: PPUSH
13853: LD_STRING D5-Har-2
13855: PPUSH
13856: CALL_OW 94
// timeToSupport = 5 5$0 ;
13860: LD_ADDR_EXP 26
13864: PUSH
13865: LD_INT 10500
13867: ST_TO_ADDR
// timerStatus = 2 ;
13868: LD_ADDR_EXP 27
13872: PUSH
13873: LD_INT 2
13875: ST_TO_ADDR
// startTimer = 1 ;
13876: LD_ADDR_EXP 28
13880: PUSH
13881: LD_INT 1
13883: ST_TO_ADDR
// harrAnswer = 2 ;
13884: LD_ADDR_EXP 24
13888: PUSH
13889: LD_INT 2
13891: ST_TO_ADDR
// end ; 3 :
13892: GO 13962
13894: LD_INT 3
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13902
13900: GO 13961
13902: POP
// begin Say ( JMM , D5-JMM-3 ) ;
13903: LD_EXP 1
13907: PPUSH
13908: LD_STRING D5-JMM-3
13910: PPUSH
13911: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
13915: LD_EXP 14
13919: PPUSH
13920: LD_STRING D5-Har-3
13922: PPUSH
13923: CALL_OW 94
// timeToSupport = 5 5$0 ;
13927: LD_ADDR_EXP 26
13931: PUSH
13932: LD_INT 10500
13934: ST_TO_ADDR
// timerStatus = 2 ;
13935: LD_ADDR_EXP 27
13939: PUSH
13940: LD_INT 2
13942: ST_TO_ADDR
// startTimer = 1 ;
13943: LD_ADDR_EXP 28
13947: PUSH
13948: LD_INT 1
13950: ST_TO_ADDR
// harrAnswer = 3 ;
13951: LD_ADDR_EXP 24
13955: PUSH
13956: LD_INT 3
13958: ST_TO_ADDR
// end ; end ;
13959: GO 13962
13961: POP
// end ;
13962: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
13963: LD_EXP 27
13967: PUSH
13968: LD_INT 2
13970: EQUAL
13971: PUSH
13972: LD_EXP 26
13976: PUSH
13977: LD_INT 0
13979: EQUAL
13980: AND
13981: IFFALSE 14258
13983: GO 13985
13985: DISABLE
// begin timerStatus = 4 ;
13986: LD_ADDR_EXP 27
13990: PUSH
13991: LD_INT 4
13993: ST_TO_ADDR
// if harrAnswer = 1 then
13994: LD_EXP 24
13998: PUSH
13999: LD_INT 1
14001: EQUAL
14002: IFFALSE 14082
// begin PrepareHarrisonSupport ( 3 ) ;
14004: LD_INT 3
14006: PPUSH
14007: CALL 1349 0 1
// wait ( 1 1$0 ) ;
14011: LD_INT 2100
14013: PPUSH
14014: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14018: LD_EXP 14
14022: PPUSH
14023: LD_STRING D7-Har-1
14025: PPUSH
14026: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14030: LD_STRING M2
14032: PPUSH
14033: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14037: LD_ADDR_EXP 25
14041: PUSH
14042: LD_INT 31500
14044: PUSH
14045: LD_INT 10500
14047: PUSH
14048: LD_INT 8400
14050: PUSH
14051: LD_INT 6300
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PUSH
14059: LD_OWVAR 67
14063: ARRAY
14064: PLUS
14065: ST_TO_ADDR
// startTimer = 1 ;
14066: LD_ADDR_EXP 28
14070: PUSH
14071: LD_INT 1
14073: ST_TO_ADDR
// timerStatus = 3 ;
14074: LD_ADDR_EXP 27
14078: PUSH
14079: LD_INT 3
14081: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14082: LD_EXP 24
14086: PUSH
14087: LD_INT 2
14089: EQUAL
14090: IFFALSE 14170
// begin PrepareHarrisonSupport ( 4 ) ;
14092: LD_INT 4
14094: PPUSH
14095: CALL 1349 0 1
// wait ( 1 1$0 ) ;
14099: LD_INT 2100
14101: PPUSH
14102: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14106: LD_EXP 14
14110: PPUSH
14111: LD_STRING D7-Har-1
14113: PPUSH
14114: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14118: LD_STRING M2
14120: PPUSH
14121: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14125: LD_ADDR_EXP 25
14129: PUSH
14130: LD_INT 27300
14132: PUSH
14133: LD_INT 8400
14135: PUSH
14136: LD_INT 8400
14138: PUSH
14139: LD_INT 6300
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_OWVAR 67
14151: ARRAY
14152: PLUS
14153: ST_TO_ADDR
// startTimer = 1 ;
14154: LD_ADDR_EXP 28
14158: PUSH
14159: LD_INT 1
14161: ST_TO_ADDR
// timerStatus = 3 ;
14162: LD_ADDR_EXP 27
14166: PUSH
14167: LD_INT 3
14169: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14170: LD_EXP 24
14174: PUSH
14175: LD_INT 3
14177: EQUAL
14178: IFFALSE 14258
// begin PrepareHarrisonSupport ( 5 ) ;
14180: LD_INT 5
14182: PPUSH
14183: CALL 1349 0 1
// wait ( 1 1$0 ) ;
14187: LD_INT 2100
14189: PPUSH
14190: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14194: LD_EXP 14
14198: PPUSH
14199: LD_STRING D7-Har-1
14201: PPUSH
14202: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14206: LD_STRING M2
14208: PPUSH
14209: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14213: LD_ADDR_EXP 25
14217: PUSH
14218: LD_INT 21000
14220: PUSH
14221: LD_INT 8400
14223: PUSH
14224: LD_INT 6300
14226: PUSH
14227: LD_INT 4200
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: PUSH
14235: LD_OWVAR 67
14239: ARRAY
14240: PLUS
14241: ST_TO_ADDR
// startTimer = 1 ;
14242: LD_ADDR_EXP 28
14246: PUSH
14247: LD_INT 1
14249: ST_TO_ADDR
// timerStatus = 3 ;
14250: LD_ADDR_EXP 27
14254: PUSH
14255: LD_INT 3
14257: ST_TO_ADDR
// end ; end ;
14258: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14259: LD_EXP 25
14263: PUSH
14264: LD_INT 8400
14266: LESSEQUAL
14267: PUSH
14268: LD_EXP 27
14272: PUSH
14273: LD_INT 3
14275: EQUAL
14276: AND
14277: IFFALSE 14309
14279: GO 14281
14281: DISABLE
// begin DialogueOn ;
14282: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14286: LD_EXP 14
14290: PPUSH
14291: LD_STRING D7a-Har-1
14293: PPUSH
14294: CALL_OW 94
// DialogueOff ;
14298: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14302: LD_STRING M2a
14304: PPUSH
14305: CALL_OW 337
// end ;
14309: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14310: LD_EXP 25
14314: PUSH
14315: LD_INT 0
14317: LESSEQUAL
14318: PUSH
14319: LD_EXP 27
14323: PUSH
14324: LD_INT 3
14326: EQUAL
14327: AND
14328: IFFALSE 14453
14330: GO 14332
14332: DISABLE
14333: LD_INT 0
14335: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14336: LD_ADDR_VAR 0 1
14340: PUSH
14341: LD_INT 22
14343: PUSH
14344: LD_INT 1
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PPUSH
14351: CALL_OW 69
14355: PUSH
14356: LD_EXP 1
14360: PUSH
14361: EMPTY
14362: LIST
14363: DIFF
14364: ST_TO_ADDR
// saveDonaldson = 2 ;
14365: LD_ADDR_EXP 22
14369: PUSH
14370: LD_INT 2
14372: ST_TO_ADDR
// DialogueOn ;
14373: CALL_OW 6
// if IsOK ( Donaldson ) then
14377: LD_EXP 13
14381: PPUSH
14382: CALL_OW 302
14386: IFFALSE 14402
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14388: LD_EXP 14
14392: PPUSH
14393: LD_STRING D8-Har-1
14395: PPUSH
14396: CALL_OW 94
// end else
14400: GO 14414
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14402: LD_EXP 14
14406: PPUSH
14407: LD_STRING D8-Har-1a
14409: PPUSH
14410: CALL_OW 94
// end ; DialogueOff ;
14414: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14418: LD_VAR 0 1
14422: PPUSH
14423: LD_INT 4
14425: PPUSH
14426: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14430: LD_VAR 0 1
14434: PPUSH
14435: LD_INT 88
14437: PPUSH
14438: LD_INT 89
14440: PPUSH
14441: CALL_OW 114
// honor = 0 ;
14445: LD_ADDR_EXP 37
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// end ;
14453: PPOPN 1
14455: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14456: LD_INT 22
14458: PUSH
14459: LD_INT 6
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 21
14468: PUSH
14469: LD_INT 1
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PPUSH
14480: CALL_OW 69
14484: PUSH
14485: LD_INT 0
14487: EQUAL
14488: PUSH
14489: LD_EXP 18
14493: PUSH
14494: LD_INT 0
14496: EQUAL
14497: AND
14498: PUSH
14499: LD_EXP 40
14503: PUSH
14504: LD_INT 1
14506: EQUAL
14507: AND
14508: IFFALSE 14602
14510: GO 14512
14512: DISABLE
14513: LD_INT 0
14515: PPUSH
14516: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14517: LD_ADDR_VAR 0 2
14521: PUSH
14522: LD_INT 22
14524: PUSH
14525: LD_INT 1
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: LD_INT 21
14534: PUSH
14535: LD_INT 1
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 1
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: PPUSH
14557: CALL_OW 69
14561: ST_TO_ADDR
// for i in tmp do
14562: LD_ADDR_VAR 0 1
14566: PUSH
14567: LD_VAR 0 2
14571: PUSH
14572: FOR_IN
14573: IFFALSE 14600
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14575: LD_VAR 0 1
14579: PPUSH
14580: LD_INT 1
14582: PPUSH
14583: LD_INT 4
14585: PPUSH
14586: CALL_OW 12
14590: PPUSH
14591: LD_INT 500
14593: PPUSH
14594: CALL_OW 492
// end ;
14598: GO 14572
14600: POP
14601: POP
// end ; end_of_file
14602: PPOPN 2
14604: END
// every 0 0$1 trigger AIEnable = 1 do
14605: LD_EXP 35
14609: PUSH
14610: LD_INT 1
14612: EQUAL
14613: IFFALSE 14685
14615: GO 14617
14617: DISABLE
// begin enable ;
14618: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
14619: LD_INT 3
14621: PPUSH
14622: LD_INT 21
14624: PPUSH
14625: CALL 4945 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
14629: LD_INT 3
14631: PPUSH
14632: LD_INT 8
14634: PPUSH
14635: LD_INT 7
14637: PPUSH
14638: LD_INT 1
14640: PPUSH
14641: CALL 5186 0 4
// if baseReadyToBuild = 2 then
14645: LD_EXP 18
14649: PUSH
14650: LD_INT 2
14652: EQUAL
14653: IFFALSE 14685
// begin RepairBuilding ( 6 , ruPDepot ) ;
14655: LD_INT 6
14657: PPUSH
14658: LD_EXP 19
14662: PPUSH
14663: CALL 4945 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
14667: LD_INT 6
14669: PPUSH
14670: LD_INT 9
14672: PPUSH
14673: LD_INT 6
14675: PPUSH
14676: LD_EXP 20
14680: PPUSH
14681: CALL 5186 0 4
// end ; end ;
14685: END
// every 0 0$01 do
14686: GO 14688
14688: DISABLE
// begin enable ;
14689: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
14690: LD_INT 3
14692: PPUSH
14693: LD_INT 17
14695: PPUSH
14696: LD_INT 111
14698: PPUSH
14699: LD_INT 87
14701: PPUSH
14702: LD_INT 1
14704: PPUSH
14705: CALL 8054 0 5
// end ;
14709: END
// every 0 0$01 do
14710: GO 14712
14712: DISABLE
// begin enable ;
14713: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
14714: LD_INT 5
14716: PPUSH
14717: LD_INT 17
14719: PPUSH
14720: LD_INT 111
14722: PPUSH
14723: LD_INT 87
14725: PPUSH
14726: LD_INT 1
14728: PPUSH
14729: CALL 8054 0 5
// end ;
14733: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
14734: LD_EXP 35
14738: PUSH
14739: LD_INT 1
14741: EQUAL
14742: IFFALSE 14928
14744: GO 14746
14746: DISABLE
// begin enable ;
14747: ENABLE
// if Difficulty = 1 then
14748: LD_OWVAR 67
14752: PUSH
14753: LD_INT 1
14755: EQUAL
14756: IFFALSE 14803
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
14758: LD_INT 3
14760: PPUSH
14761: LD_INT 24
14763: PPUSH
14764: LD_OWVAR 67
14768: PUSH
14769: LD_INT 1
14771: PLUS
14772: PPUSH
14773: LD_INT 1
14775: PPUSH
14776: LD_INT 42
14778: PUSH
14779: LD_INT 42
14781: PUSH
14782: LD_INT 43
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: LIST
14789: PPUSH
14790: LD_INT 1
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_INT 21
14798: PPUSH
14799: CALL 5452 0 8
// if Difficulty = 2 then
14803: LD_OWVAR 67
14807: PUSH
14808: LD_INT 2
14810: EQUAL
14811: IFFALSE 14873
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
14813: LD_INT 3
14815: PPUSH
14816: LD_INT 24
14818: PPUSH
14819: LD_OWVAR 67
14823: PUSH
14824: LD_INT 1
14826: PLUS
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: LD_INT 42
14833: PUSH
14834: LD_INT 43
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 22
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 1
14859: PPUSH
14860: LD_INT 2
14862: PPUSH
14863: CALL_OW 12
14867: ARRAY
14868: PPUSH
14869: CALL 5452 0 8
// if Difficulty = 3 then
14873: LD_OWVAR 67
14877: PUSH
14878: LD_INT 3
14880: EQUAL
14881: IFFALSE 14928
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
14883: LD_INT 3
14885: PPUSH
14886: LD_INT 24
14888: PPUSH
14889: LD_OWVAR 67
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: LD_INT 43
14899: PUSH
14900: LD_INT 43
14902: PUSH
14903: LD_INT 43
14905: PUSH
14906: LD_INT 44
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PPUSH
14915: LD_INT 1
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_INT 22
14923: PPUSH
14924: CALL 5452 0 8
// end ;
14928: END
// every 0 0$1 do
14929: GO 14931
14931: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
14932: LD_INT 3
14934: PPUSH
14935: LD_INT 1
14937: PPUSH
14938: LD_INT 3
14940: PPUSH
14941: CALL 4860 0 3
14945: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
14946: LD_EXP 18
14950: PUSH
14951: LD_INT 1
14953: EQUAL
14954: IFFALSE 15101
14956: GO 14958
14958: DISABLE
14959: LD_INT 0
14961: PPUSH
14962: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14963: LD_ADDR_VAR 0 2
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_INT 6
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 34
14990: PUSH
14991: LD_INT 51
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: PPUSH
15003: CALL_OW 69
15007: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15008: LD_VAR 0 2
15012: PUSH
15013: LD_INT 1
15015: ARRAY
15016: PPUSH
15017: LD_EXP 19
15021: PPUSH
15022: CALL_OW 250
15026: PUSH
15027: LD_INT 5
15029: MINUS
15030: PPUSH
15031: LD_EXP 19
15035: PPUSH
15036: CALL_OW 251
15040: PUSH
15041: LD_INT 5
15043: MINUS
15044: PPUSH
15045: CALL_OW 111
// wait ( 0 0$5 ) ;
15049: LD_INT 175
15051: PPUSH
15052: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15056: LD_VAR 0 2
15060: PUSH
15061: LD_INT 1
15063: ARRAY
15064: PPUSH
15065: LD_INT 41
15067: PPUSH
15068: LD_INT 52
15070: PPUSH
15071: CALL_OW 177
// wait ( 0 0$40 ) ;
15075: LD_INT 1400
15077: PPUSH
15078: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15082: LD_VAR 0 2
15086: PUSH
15087: LD_INT 1
15089: ARRAY
15090: PPUSH
15091: LD_INT 41
15093: PPUSH
15094: LD_INT 44
15096: PPUSH
15097: CALL_OW 111
// end ;
15101: PPOPN 2
15103: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15104: LD_EXP 19
15108: PPUSH
15109: CALL_OW 274
15113: PPUSH
15114: LD_INT 1
15116: PPUSH
15117: CALL_OW 275
15121: PUSH
15122: LD_INT 100
15124: GREATEREQUAL
15125: IFFALSE 15353
15127: GO 15129
15129: DISABLE
15130: LD_INT 0
15132: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15133: LD_ADDR_VAR 0 1
15137: PUSH
15138: LD_INT 22
15140: PUSH
15141: LD_INT 6
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 21
15150: PUSH
15151: LD_INT 1
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 25
15160: PUSH
15161: LD_INT 2
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: PPUSH
15173: CALL_OW 69
15177: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15178: LD_VAR 0 1
15182: PUSH
15183: LD_INT 1
15185: ARRAY
15186: PPUSH
15187: LD_INT 4
15189: PPUSH
15190: LD_INT 39
15192: PPUSH
15193: LD_INT 37
15195: PPUSH
15196: LD_INT 3
15198: PPUSH
15199: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15203: LD_VAR 0 1
15207: PUSH
15208: LD_INT 1
15210: ARRAY
15211: PPUSH
15212: LD_INT 29
15214: PPUSH
15215: LD_INT 42
15217: PPUSH
15218: LD_INT 54
15220: PPUSH
15221: LD_INT 3
15223: PPUSH
15224: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15228: LD_VAR 0 1
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: PPUSH
15237: LD_INT 6
15239: PPUSH
15240: LD_INT 38
15242: PPUSH
15243: LD_INT 48
15245: PPUSH
15246: LD_INT 0
15248: PPUSH
15249: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15253: LD_VAR 0 1
15257: PUSH
15258: LD_INT 1
15260: ARRAY
15261: PPUSH
15262: LD_INT 2
15264: PPUSH
15265: LD_INT 32
15267: PPUSH
15268: LD_INT 38
15270: PPUSH
15271: LD_INT 2
15273: PPUSH
15274: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15278: LD_VAR 0 1
15282: PUSH
15283: LD_INT 1
15285: ARRAY
15286: PPUSH
15287: LD_INT 26
15289: PPUSH
15290: LD_INT 39
15292: PPUSH
15293: LD_INT 55
15295: PPUSH
15296: LD_INT 3
15298: PPUSH
15299: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15303: LD_VAR 0 1
15307: PUSH
15308: LD_INT 1
15310: ARRAY
15311: PPUSH
15312: LD_INT 32
15314: PPUSH
15315: LD_INT 31
15317: PPUSH
15318: LD_INT 31
15320: PPUSH
15321: LD_INT 3
15323: PPUSH
15324: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15328: LD_VAR 0 1
15332: PUSH
15333: LD_INT 1
15335: ARRAY
15336: PPUSH
15337: LD_INT 31
15339: PPUSH
15340: LD_INT 50
15342: PPUSH
15343: LD_INT 51
15345: PPUSH
15346: LD_INT 4
15348: PPUSH
15349: CALL_OW 205
// end ; end_of_file
15353: PPOPN 1
15355: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15356: LD_INT 0
15358: PPUSH
15359: PPUSH
15360: PPUSH
15361: PPUSH
15362: PPUSH
15363: PPUSH
15364: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15365: LD_ADDR_VAR 0 3
15369: PUSH
15370: LD_INT 22
15372: PUSH
15373: LD_INT 6
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 1
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 25
15392: PUSH
15393: LD_INT 1
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 3
15402: PUSH
15403: LD_INT 54
15405: PUSH
15406: EMPTY
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: PPUSH
15419: CALL_OW 69
15423: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15424: LD_ADDR_VAR 0 7
15428: PUSH
15429: LD_INT 22
15431: PUSH
15432: LD_INT 6
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 21
15441: PUSH
15442: LD_INT 1
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 25
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 54
15461: PUSH
15462: EMPTY
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15476: LD_ADDR_VAR 0 4
15480: PUSH
15481: LD_INT 22
15483: PUSH
15484: LD_INT 6
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 21
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 2
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: PPUSH
15516: CALL_OW 69
15520: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
15521: LD_ADDR_VAR 0 6
15525: PUSH
15526: LD_INT 22
15528: PUSH
15529: LD_INT 6
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 21
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 25
15548: PUSH
15549: LD_INT 4
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 69
15565: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15566: LD_ADDR_VAR 0 8
15570: PUSH
15571: LD_INT 22
15573: PUSH
15574: LD_INT 6
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 21
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 34
15593: PUSH
15594: LD_INT 51
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 69
15610: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 255
15620: PUSH
15621: LD_INT 6
15623: EQUAL
15624: PUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 266
15634: PUSH
15635: LD_INT 0
15637: EQUAL
15638: AND
15639: IFFALSE 15659
// begin ruPDepot = building ;
15641: LD_ADDR_EXP 19
15645: PUSH
15646: LD_VAR 0 1
15650: ST_TO_ADDR
// baseReadyToBuild = 1 ;
15651: LD_ADDR_EXP 18
15655: PUSH
15656: LD_INT 1
15658: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
15659: LD_VAR 0 1
15663: PPUSH
15664: CALL_OW 266
15668: PUSH
15669: LD_INT 4
15671: EQUAL
15672: PUSH
15673: LD_VAR 0 1
15677: PPUSH
15678: CALL_OW 255
15682: PUSH
15683: LD_INT 6
15685: EQUAL
15686: AND
15687: IFFALSE 15720
// for i in tmpSold do
15689: LD_ADDR_VAR 0 2
15693: PUSH
15694: LD_VAR 0 3
15698: PUSH
15699: FOR_IN
15700: IFFALSE 15718
// ComEnterUnit ( i , building ) ;
15702: LD_VAR 0 2
15706: PPUSH
15707: LD_VAR 0 1
15711: PPUSH
15712: CALL_OW 120
15716: GO 15699
15718: POP
15719: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 266
15729: PUSH
15730: LD_INT 6
15732: EQUAL
15733: PUSH
15734: LD_VAR 0 1
15738: PPUSH
15739: CALL_OW 255
15743: PUSH
15744: LD_INT 6
15746: EQUAL
15747: AND
15748: IFFALSE 15806
// begin for i in tmpSci do
15750: LD_ADDR_VAR 0 2
15754: PUSH
15755: LD_VAR 0 6
15759: PUSH
15760: FOR_IN
15761: IFFALSE 15779
// ComEnterUnit ( i , building ) ;
15763: LD_VAR 0 2
15767: PPUSH
15768: LD_VAR 0 1
15772: PPUSH
15773: CALL_OW 120
15777: GO 15760
15779: POP
15780: POP
// ResAllTechs ( 6 , building , 3 ) ;
15781: LD_INT 6
15783: PPUSH
15784: LD_VAR 0 1
15788: PPUSH
15789: LD_INT 3
15791: PPUSH
15792: CALL 4860 0 3
// ruPLab = building ;
15796: LD_ADDR_EXP 20
15800: PUSH
15801: LD_VAR 0 1
15805: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 266
15815: PUSH
15816: LD_INT 2
15818: EQUAL
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 255
15829: PUSH
15830: LD_INT 6
15832: EQUAL
15833: AND
15834: IFFALSE 15885
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
15836: LD_ADDR_VAR 0 5
15840: PUSH
15841: LD_VAR 0 8
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: PPUSH
15850: CALL_OW 313
15854: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
15855: LD_VAR 0 5
15859: PPUSH
15860: CALL_OW 121
// wait ( 0 0$1 ) ;
15864: LD_INT 35
15866: PPUSH
15867: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
15871: LD_VAR 0 5
15875: PPUSH
15876: LD_VAR 0 1
15880: PPUSH
15881: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 266
15894: PUSH
15895: LD_INT 32
15897: EQUAL
15898: PUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 255
15908: PUSH
15909: LD_INT 6
15911: EQUAL
15912: AND
15913: IFFALSE 15965
// begin ComPlaceWeapon ( building , 42 ) ;
15915: LD_VAR 0 1
15919: PPUSH
15920: LD_INT 42
15922: PPUSH
15923: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
15927: LD_VAR 0 7
15931: PUSH
15932: LD_INT 1
15934: ARRAY
15935: PPUSH
15936: CALL_OW 122
// wait ( 0 0$1 ) ;
15940: LD_INT 35
15942: PPUSH
15943: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
15947: LD_VAR 0 7
15951: PUSH
15952: LD_INT 1
15954: ARRAY
15955: PPUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
15965: LD_VAR 0 1
15969: PPUSH
15970: CALL_OW 266
15974: PUSH
15975: LD_INT 31
15977: EQUAL
15978: PUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 255
15988: PUSH
15989: LD_INT 6
15991: EQUAL
15992: AND
15993: IFFALSE 16059
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
15995: LD_VAR 0 7
15999: PUSH
16000: LD_INT 2
16002: ARRAY
16003: PPUSH
16004: CALL_OW 122
// wait ( 0 0$1 ) ;
16008: LD_INT 35
16010: PPUSH
16011: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16015: LD_VAR 0 7
16019: PUSH
16020: LD_INT 2
16022: ARRAY
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16033: LD_VAR 0 4
16037: PUSH
16038: LD_INT 1
16040: ARRAY
16041: PPUSH
16042: LD_EXP 19
16046: PPUSH
16047: CALL_OW 120
// baseReadyToBuild = 2 ;
16051: LD_ADDR_EXP 18
16055: PUSH
16056: LD_INT 2
16058: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16059: LD_VAR 0 1
16063: PPUSH
16064: CALL_OW 266
16068: PUSH
16069: LD_INT 32
16071: EQUAL
16072: PUSH
16073: LD_VAR 0 1
16077: PPUSH
16078: CALL_OW 255
16082: PUSH
16083: LD_INT 1
16085: EQUAL
16086: AND
16087: PUSH
16088: LD_EXP 30
16092: PUSH
16093: LD_INT 0
16095: EQUAL
16096: AND
16097: IFFALSE 16342
// begin bunkerDialog = 1 ;
16099: LD_ADDR_EXP 30
16103: PUSH
16104: LD_INT 1
16106: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16107: LD_EXP 11
16111: PPUSH
16112: CALL_OW 302
16116: IFFALSE 16132
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16118: LD_EXP 11
16122: PPUSH
16123: LD_STRING D11-Eng1-1
16125: PPUSH
16126: CALL_OW 88
// end else
16130: GO 16328
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16132: LD_INT 22
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 21
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 25
16154: PUSH
16155: LD_INT 3
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 26
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 69
16182: PUSH
16183: LD_EXP 1
16187: PUSH
16188: EMPTY
16189: LIST
16190: PUSH
16191: LD_INT 0
16193: GREATER
16194: DIFF
16195: IFFALSE 16269
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16197: LD_INT 22
16199: PUSH
16200: LD_INT 1
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 21
16209: PUSH
16210: LD_INT 1
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 25
16219: PUSH
16220: LD_INT 2
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 26
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: PUSH
16248: LD_EXP 1
16252: PUSH
16253: EMPTY
16254: LIST
16255: DIFF
16256: PPUSH
16257: LD_STRING D11-Eng1-1
16259: PPUSH
16260: LD_STRING D11-Eng1-1
16262: PPUSH
16263: CALL 3600 0 3
// end else
16267: GO 16328
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16269: LD_INT 22
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 21
16281: PUSH
16282: LD_INT 1
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 26
16291: PUSH
16292: LD_INT 1
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: PUSH
16309: LD_EXP 1
16313: PUSH
16314: EMPTY
16315: LIST
16316: DIFF
16317: PPUSH
16318: LD_STRING D11-Eng1-1
16320: PPUSH
16321: LD_STRING D11-Eng1-1
16323: PPUSH
16324: CALL 3600 0 3
// end ; end ; if energyVDialog = 0 then
16328: LD_EXP 31
16332: PUSH
16333: LD_INT 0
16335: EQUAL
16336: IFFALSE 16342
// EnergyDialog ;
16338: CALL 3912 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16342: LD_VAR 0 1
16346: PPUSH
16347: CALL_OW 266
16351: PUSH
16352: LD_INT 29
16354: EQUAL
16355: PUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 255
16365: PUSH
16366: LD_INT 1
16368: EQUAL
16369: AND
16370: IFFALSE 16380
// buildOil = 1 ;
16372: LD_ADDR_EXP 32
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 266
16389: PUSH
16390: LD_INT 26
16392: EQUAL
16393: PUSH
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 255
16403: PUSH
16404: LD_INT 1
16406: EQUAL
16407: AND
16408: IFFALSE 16418
// buildPower = 1 ;
16410: LD_ADDR_EXP 33
16414: PUSH
16415: LD_INT 1
16417: ST_TO_ADDR
// end ;
16418: PPOPN 8
16420: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16421: LD_VAR 0 1
16425: PPUSH
16426: CALL_OW 266
16430: PUSH
16431: LD_INT 3
16433: EQUAL
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 255
16444: PUSH
16445: LD_INT 1
16447: EQUAL
16448: AND
16449: PUSH
16450: LD_EXP 29
16454: PUSH
16455: LD_INT 0
16457: EQUAL
16458: AND
16459: IFFALSE 16775
// begin factoryDialog = 1 ;
16461: LD_ADDR_EXP 29
16465: PUSH
16466: LD_INT 1
16468: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
16469: LD_INT 22
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 21
16481: PUSH
16482: LD_INT 3
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 30
16491: PUSH
16492: LD_INT 3
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 24
16501: PUSH
16502: LD_INT 1000
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 69
16519: PUSH
16520: LD_INT 1
16522: ARRAY
16523: PPUSH
16524: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
16528: LD_EXP 1
16532: PPUSH
16533: LD_STRING D9a-JMM-1
16535: PPUSH
16536: CALL_OW 88
// if IsOK ( Campell ) then
16540: LD_EXP 12
16544: PPUSH
16545: CALL_OW 302
16549: IFFALSE 16565
// begin Say ( Campell , D9a-Mech1-1 ) ;
16551: LD_EXP 12
16555: PPUSH
16556: LD_STRING D9a-Mech1-1
16558: PPUSH
16559: CALL_OW 88
// end else
16563: GO 16761
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16565: LD_INT 22
16567: PUSH
16568: LD_INT 1
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 21
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 25
16587: PUSH
16588: LD_INT 3
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 26
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: PPUSH
16611: CALL_OW 69
16615: PUSH
16616: LD_EXP 1
16620: PUSH
16621: EMPTY
16622: LIST
16623: PUSH
16624: LD_INT 0
16626: GREATER
16627: DIFF
16628: IFFALSE 16702
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16630: LD_INT 22
16632: PUSH
16633: LD_INT 1
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 21
16642: PUSH
16643: LD_INT 1
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 25
16652: PUSH
16653: LD_INT 3
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 26
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PUSH
16681: LD_EXP 1
16685: PUSH
16686: EMPTY
16687: LIST
16688: DIFF
16689: PPUSH
16690: LD_STRING D9a-Mech1-1
16692: PPUSH
16693: LD_STRING D9a-Mech1-1
16695: PPUSH
16696: CALL 3600 0 3
// end else
16700: GO 16761
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16702: LD_INT 22
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 21
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 26
16724: PUSH
16725: LD_INT 1
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: PUSH
16742: LD_EXP 1
16746: PUSH
16747: EMPTY
16748: LIST
16749: DIFF
16750: PPUSH
16751: LD_STRING D9a-Mech1-1
16753: PPUSH
16754: LD_STRING D9a-Mech1-1
16756: PPUSH
16757: CALL 3600 0 3
// end ; end ; if energyVDialog = 0 then
16761: LD_EXP 31
16765: PUSH
16766: LD_INT 0
16768: EQUAL
16769: IFFALSE 16775
// EnergyDialog ;
16771: CALL 3912 0 0
// end ; end ;
16775: PPOPN 1
16777: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
16778: LD_VAR 0 1
16782: PPUSH
16783: CALL_OW 247
16787: PUSH
16788: LD_INT 1
16790: EQUAL
16791: PUSH
16792: LD_VAR 0 1
16796: PPUSH
16797: CALL_OW 255
16801: PUSH
16802: LD_INT 1
16804: EQUAL
16805: AND
16806: IFFALSE 16822
// lostCounter = lostCounter + 1 ;
16808: LD_ADDR_EXP 36
16812: PUSH
16813: LD_EXP 36
16817: PUSH
16818: LD_INT 1
16820: PLUS
16821: ST_TO_ADDR
// end ;
16822: PPOPN 1
16824: END
// on Contact ( side1 , side2 ) do var i , tmp ;
16825: LD_INT 0
16827: PPUSH
16828: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
16829: LD_ADDR_VAR 0 4
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_INT 1
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PPUSH
16844: CALL_OW 69
16848: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
16849: LD_VAR 0 1
16853: PUSH
16854: LD_INT 1
16856: EQUAL
16857: PUSH
16858: LD_VAR 0 2
16862: PUSH
16863: LD_INT 6
16865: EQUAL
16866: AND
16867: PUSH
16868: LD_EXP 39
16872: PUSH
16873: LD_INT 1
16875: EQUAL
16876: AND
16877: IFFALSE 16932
// begin donaldsonCoopAttack = 0 ;
16879: LD_ADDR_EXP 39
16883: PUSH
16884: LD_INT 0
16886: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
16887: LD_ADDR_VAR 0 3
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 4
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: EMPTY
16903: LIST
16904: PPUSH
16905: CALL_OW 69
16909: PUSH
16910: FOR_IN
16911: IFFALSE 16930
// ComAgressiveMove ( i , 52 , 64 ) ;
16913: LD_VAR 0 3
16917: PPUSH
16918: LD_INT 52
16920: PPUSH
16921: LD_INT 64
16923: PPUSH
16924: CALL_OW 114
16928: GO 16910
16930: POP
16931: POP
// end ; end ;
16932: PPOPN 4
16934: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 264
16944: PUSH
16945: LD_INT 53
16947: EQUAL
16948: IFFALSE 17033
// begin CutTreeInArea ( vehicle , TreesArea ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: LD_INT 21
16957: PPUSH
16958: CALL 4128 0 2
// uc_side = 3 ;
16962: LD_ADDR_OWVAR 20
16966: PUSH
16967: LD_INT 3
16969: ST_TO_ADDR
// uc_nation = 3 ;
16970: LD_ADDR_OWVAR 21
16974: PUSH
16975: LD_INT 3
16977: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16978: LD_INT 0
16980: PPUSH
16981: LD_EXP 17
16985: PPUSH
16986: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
16990: CALL_OW 44
16994: PPUSH
16995: LD_VAR 0 2
16999: PPUSH
17000: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17004: LD_VAR 0 1
17008: PPUSH
17009: LD_INT 6
17011: PPUSH
17012: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 313
17025: PPUSH
17026: LD_INT 6
17028: PPUSH
17029: CALL_OW 235
// end ; end ; end_of_file
17033: PPOPN 2
17035: END
// every 10 10$0 do
17036: GO 17038
17038: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17039: LD_INT 5
17041: PPUSH
17042: LD_INT 3
17044: PPUSH
17045: LD_INT 2
17047: PPUSH
17048: LD_INT 5
17050: PPUSH
17051: CALL_OW 12
17055: PUSH
17056: LD_INT 2
17058: PUSH
17059: LD_INT 3
17061: PUSH
17062: LD_INT 3
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: LIST
17069: PUSH
17070: LD_OWVAR 67
17074: ARRAY
17075: PLUS
17076: PPUSH
17077: LD_INT 0
17079: PPUSH
17080: LD_INT 0
17082: PPUSH
17083: LD_INT 0
17085: PPUSH
17086: LD_INT 1
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: LD_INT 3
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PUSH
17100: LD_OWVAR 67
17104: ARRAY
17105: PPUSH
17106: LD_EXP 16
17110: PPUSH
17111: LD_EXP 17
17115: PPUSH
17116: CALL_OW 12
17120: PPUSH
17121: LD_INT 4
17123: PPUSH
17124: LD_INT 14
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: LD_INT 2
17132: PPUSH
17133: CALL 5937 0 12
// end ;
17137: END
// every 15 15$0 do
17138: GO 17140
17140: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17141: LD_INT 5
17143: PPUSH
17144: LD_INT 3
17146: PPUSH
17147: LD_INT 3
17149: PPUSH
17150: LD_INT 5
17152: PPUSH
17153: CALL_OW 12
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: LD_INT 3
17163: PUSH
17164: LD_INT 3
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PUSH
17172: LD_OWVAR 67
17176: ARRAY
17177: PLUS
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: LD_INT 0
17187: PPUSH
17188: LD_INT 2
17190: PUSH
17191: LD_INT 2
17193: PUSH
17194: LD_INT 3
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: PUSH
17202: LD_OWVAR 67
17206: ARRAY
17207: PPUSH
17208: LD_EXP 16
17212: PPUSH
17213: LD_EXP 17
17217: PPUSH
17218: CALL_OW 12
17222: PPUSH
17223: LD_INT 4
17225: PPUSH
17226: LD_INT 14
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: CALL 5937 0 12
// end ;
17239: END
// every 25 25$0 do
17240: GO 17242
17242: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17243: LD_INT 5
17245: PPUSH
17246: LD_INT 3
17248: PPUSH
17249: LD_INT 2
17251: PPUSH
17252: LD_INT 3
17254: PPUSH
17255: CALL_OW 12
17259: PUSH
17260: LD_INT 2
17262: PUSH
17263: LD_INT 3
17265: PUSH
17266: LD_INT 3
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: LD_OWVAR 67
17278: ARRAY
17279: PLUS
17280: PPUSH
17281: LD_INT 0
17283: PPUSH
17284: LD_INT 0
17286: PPUSH
17287: LD_INT 0
17289: PPUSH
17290: LD_INT 1
17292: PUSH
17293: LD_INT 2
17295: PUSH
17296: LD_INT 3
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: LD_OWVAR 67
17308: ARRAY
17309: PPUSH
17310: LD_EXP 16
17314: PPUSH
17315: LD_EXP 17
17319: PPUSH
17320: CALL_OW 12
17324: PPUSH
17325: LD_INT 4
17327: PPUSH
17328: LD_INT 14
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: LD_INT 1
17336: PPUSH
17337: CALL 5937 0 12
// end ;
17341: END
// every 26 26$0 do
17342: GO 17344
17344: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17345: LD_INT 5
17347: PPUSH
17348: LD_INT 3
17350: PPUSH
17351: LD_INT 1
17353: PPUSH
17354: LD_INT 3
17356: PPUSH
17357: CALL_OW 12
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: PUSH
17376: LD_OWVAR 67
17380: ARRAY
17381: PLUS
17382: PPUSH
17383: LD_INT 0
17385: PPUSH
17386: LD_INT 0
17388: PPUSH
17389: LD_INT 0
17391: PPUSH
17392: LD_INT 2
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: LD_INT 3
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: PUSH
17406: LD_OWVAR 67
17410: ARRAY
17411: PPUSH
17412: LD_EXP 16
17416: PPUSH
17417: LD_EXP 17
17421: PPUSH
17422: CALL_OW 12
17426: PPUSH
17427: LD_INT 4
17429: PPUSH
17430: LD_INT 14
17432: PPUSH
17433: LD_INT 1
17435: PPUSH
17436: LD_INT 2
17438: PPUSH
17439: CALL 5937 0 12
// end ;
17443: END
// every 25 25$0 do
17444: GO 17446
17446: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
17447: LD_INT 4
17449: PPUSH
17450: LD_INT 5
17452: PPUSH
17453: LD_INT 3
17455: PUSH
17456: LD_INT 4
17458: PUSH
17459: LD_INT 5
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: PUSH
17467: LD_OWVAR 67
17471: ARRAY
17472: PPUSH
17473: LD_EXP 16
17477: PPUSH
17478: LD_EXP 17
17482: PPUSH
17483: CALL_OW 12
17487: PPUSH
17488: LD_INT 3
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_INT 1
17496: PPUSH
17497: LD_INT 42
17499: PUSH
17500: LD_INT 42
17502: PUSH
17503: LD_INT 43
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 42
17513: PUSH
17514: LD_INT 43
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 43
17523: PUSH
17524: LD_INT 43
17526: PUSH
17527: LD_INT 43
17529: PUSH
17530: LD_INT 44
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: PUSH
17544: LD_OWVAR 67
17548: ARRAY
17549: PPUSH
17550: EMPTY
17551: PPUSH
17552: EMPTY
17553: PPUSH
17554: LD_INT 1
17556: PPUSH
17557: CALL 8845 0 11
// end ; end_of_file
17561: END
// every 0 0$1 trigger startTimer = 1 do
17562: LD_EXP 28
17566: PUSH
17567: LD_INT 1
17569: EQUAL
17570: IFFALSE 17700
17572: GO 17574
17574: DISABLE
// begin enable ;
17575: ENABLE
// if timerStatus = 1 then
17576: LD_EXP 27
17580: PUSH
17581: LD_INT 1
17583: EQUAL
17584: IFFALSE 17617
// begin timeToSupport = timeToSupport - 0 0$01 ;
17586: LD_ADDR_EXP 26
17590: PUSH
17591: LD_EXP 26
17595: PUSH
17596: LD_INT 35
17598: MINUS
17599: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17600: LD_ADDR_OWVAR 47
17604: PUSH
17605: LD_STRING #Am04-1
17607: PUSH
17608: LD_EXP 26
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: ST_TO_ADDR
// end ; if timerStatus = 2 then
17617: LD_EXP 27
17621: PUSH
17622: LD_INT 2
17624: EQUAL
17625: IFFALSE 17658
// begin timeToSupport = timeToSupport - 0 0$01 ;
17627: LD_ADDR_EXP 26
17631: PUSH
17632: LD_EXP 26
17636: PUSH
17637: LD_INT 35
17639: MINUS
17640: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17641: LD_ADDR_OWVAR 47
17645: PUSH
17646: LD_STRING #Am04-2
17648: PUSH
17649: LD_EXP 26
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: ST_TO_ADDR
// end ; if timerStatus = 3 then
17658: LD_EXP 27
17662: PUSH
17663: LD_INT 3
17665: EQUAL
17666: IFFALSE 17682
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17668: LD_ADDR_EXP 25
17672: PUSH
17673: LD_EXP 25
17677: PUSH
17678: LD_INT 35
17680: MINUS
17681: ST_TO_ADDR
// end ; if timerStatus = 4 then
17682: LD_EXP 27
17686: PUSH
17687: LD_INT 4
17689: EQUAL
17690: IFFALSE 17700
// begin display_strings =  ;
17692: LD_ADDR_OWVAR 47
17696: PUSH
17697: LD_STRING 
17699: ST_TO_ADDR
// end ; end ; end_of_file
17700: END
// every 0 0$1 trigger IsDead ( JMM ) do
17701: LD_EXP 1
17705: PPUSH
17706: CALL_OW 301
17710: IFFALSE 17722
17712: GO 17714
17714: DISABLE
// YouLost ( JMM ) ;
17715: LD_STRING JMM
17717: PPUSH
17718: CALL_OW 104
17722: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
17723: LD_INT 4
17725: PPUSH
17726: CALL_OW 301
17730: IFFALSE 17742
17732: GO 17734
17734: DISABLE
// YouLost ( Base ) ; end_of_file
17735: LD_STRING Base
17737: PPUSH
17738: CALL_OW 104
17742: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
17743: LD_EXP 15
17747: PPUSH
17748: CALL_OW 301
17752: IFFALSE 18134
17754: GO 17756
17756: DISABLE
17757: LD_INT 0
17759: PPUSH
// begin AIEnable = 0 ;
17760: LD_ADDR_EXP 35
17764: PUSH
17765: LD_INT 0
17767: ST_TO_ADDR
// escapeAvalaible = 1 ;
17768: LD_ADDR_EXP 38
17772: PUSH
17773: LD_INT 1
17775: ST_TO_ADDR
// InGameOn ;
17776: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17780: LD_INT 3
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: LD_INT 1
17788: PPUSH
17789: LD_INT 0
17791: PPUSH
17792: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17796: LD_INT 6
17798: PPUSH
17799: LD_INT 1
17801: PPUSH
17802: LD_INT 1
17804: PPUSH
17805: LD_INT 0
17807: PPUSH
17808: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17812: LD_INT 5
17814: PPUSH
17815: LD_INT 1
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: LD_INT 0
17823: PPUSH
17824: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17828: LD_INT 3
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17838: LD_INT 97
17840: PPUSH
17841: LD_INT 91
17843: PPUSH
17844: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17848: LD_INT 22
17850: PUSH
17851: LD_INT 3
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 21
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PPUSH
17872: CALL_OW 69
17876: PPUSH
17877: CALL_OW 121
// wait ( 0 0$01 ) ;
17881: LD_INT 35
17883: PPUSH
17884: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17888: LD_INT 22
17890: PUSH
17891: LD_INT 3
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 21
17900: PUSH
17901: LD_INT 1
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PPUSH
17912: CALL_OW 69
17916: PPUSH
17917: LD_INT 124
17919: PPUSH
17920: LD_INT 98
17922: PPUSH
17923: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
17927: LD_INT 22
17929: PUSH
17930: LD_INT 5
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 21
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 69
17955: PPUSH
17956: CALL_OW 121
// wait ( 0 0$01 ) ;
17960: LD_INT 35
17962: PPUSH
17963: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17967: LD_INT 22
17969: PUSH
17970: LD_INT 5
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 21
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PPUSH
17991: CALL_OW 69
17995: PPUSH
17996: LD_INT 124
17998: PPUSH
17999: LD_INT 98
18001: PPUSH
18002: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18006: LD_INT 22
18008: PUSH
18009: LD_INT 6
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 21
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PPUSH
18030: CALL_OW 69
18034: PPUSH
18035: CALL_OW 121
// wait ( 0 0$01 ) ;
18039: LD_INT 35
18041: PPUSH
18042: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18046: LD_INT 22
18048: PUSH
18049: LD_INT 6
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 21
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PPUSH
18075: LD_INT 124
18077: PPUSH
18078: LD_INT 98
18080: PPUSH
18081: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18085: LD_INT 22
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 21
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_INT 124
18116: PPUSH
18117: LD_INT 98
18119: PPUSH
18120: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
18124: LD_INT 124
18126: PPUSH
18127: LD_INT 98
18129: PPUSH
18130: CALL_OW 84
// end ;
18134: PPOPN 1
18136: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
18137: LD_INT 23
18139: PUSH
18140: LD_INT 3
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 21
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 24
18159: PUSH
18160: LD_INT 250
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: PPUSH
18172: CALL_OW 69
18176: PUSH
18177: LD_INT 0
18179: EQUAL
18180: IFFALSE 18189
18182: GO 18184
18184: DISABLE
// FinishMission ;
18185: CALL 18360 0 0
18189: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18190: LD_EXP 38
18194: PUSH
18195: LD_INT 1
18197: EQUAL
18198: IFFALSE 18357
18200: GO 18202
18202: DISABLE
18203: LD_INT 0
18205: PPUSH
// begin enable ;
18206: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18207: LD_ADDR_VAR 0 1
18211: PUSH
18212: LD_INT 22
18214: PUSH
18215: LD_INT 3
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 69
18226: PUSH
18227: FOR_IN
18228: IFFALSE 18255
// if IsInArea ( i , RussianEscape ) then
18230: LD_VAR 0 1
18234: PPUSH
18235: LD_INT 5
18237: PPUSH
18238: CALL_OW 308
18242: IFFALSE 18253
// RemoveUnit ( i ) ;
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 64
18253: GO 18227
18255: POP
18256: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
18257: LD_ADDR_VAR 0 1
18261: PUSH
18262: LD_INT 22
18264: PUSH
18265: LD_INT 5
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PPUSH
18272: CALL_OW 69
18276: PUSH
18277: FOR_IN
18278: IFFALSE 18305
// if IsInArea ( i , RussianEscape ) then
18280: LD_VAR 0 1
18284: PPUSH
18285: LD_INT 5
18287: PPUSH
18288: CALL_OW 308
18292: IFFALSE 18303
// RemoveUnit ( i ) ;
18294: LD_VAR 0 1
18298: PPUSH
18299: CALL_OW 64
18303: GO 18277
18305: POP
18306: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18307: LD_ADDR_VAR 0 1
18311: PUSH
18312: LD_INT 22
18314: PUSH
18315: LD_INT 6
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PPUSH
18322: CALL_OW 69
18326: PUSH
18327: FOR_IN
18328: IFFALSE 18355
// if IsInArea ( i , RussianEscape ) then
18330: LD_VAR 0 1
18334: PPUSH
18335: LD_INT 5
18337: PPUSH
18338: CALL_OW 308
18342: IFFALSE 18353
// RemoveUnit ( i ) ;
18344: LD_VAR 0 1
18348: PPUSH
18349: CALL_OW 64
18353: GO 18327
18355: POP
18356: POP
// end ;
18357: PPOPN 1
18359: END
// export function FinishMission ; var tmp ; begin
18360: LD_INT 0
18362: PPUSH
18363: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18364: LD_INT 69
18366: PPUSH
18367: LD_INT 1
18369: PPUSH
18370: CALL_OW 321
18374: PPUSH
18375: LD_STRING GatlingInGamma
18377: PPUSH
18378: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
18382: LD_EXP 32
18386: PUSH
18387: LD_INT 1
18389: EQUAL
18390: PUSH
18391: LD_EXP 33
18395: PUSH
18396: LD_INT 1
18398: EQUAL
18399: AND
18400: IFFALSE 18414
// begin AddMedal ( oil , 1 ) ;
18402: LD_STRING oil
18404: PPUSH
18405: LD_INT 1
18407: PPUSH
18408: CALL_OW 101
// end else
18412: GO 18507
// begin if buildOil = 1 and buildPower = 0 then
18414: LD_EXP 32
18418: PUSH
18419: LD_INT 1
18421: EQUAL
18422: PUSH
18423: LD_EXP 33
18427: PUSH
18428: LD_INT 0
18430: EQUAL
18431: AND
18432: IFFALSE 18445
// AddMedal ( oil , - 1 ) ;
18434: LD_STRING oil
18436: PPUSH
18437: LD_INT 1
18439: NEG
18440: PPUSH
18441: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18445: LD_EXP 32
18449: PUSH
18450: LD_INT 0
18452: EQUAL
18453: PUSH
18454: LD_EXP 33
18458: PUSH
18459: LD_INT 1
18461: EQUAL
18462: AND
18463: IFFALSE 18476
// AddMedal ( oil , - 2 ) ;
18465: LD_STRING oil
18467: PPUSH
18468: LD_INT 2
18470: NEG
18471: PPUSH
18472: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18476: LD_EXP 32
18480: PUSH
18481: LD_INT 0
18483: EQUAL
18484: PUSH
18485: LD_EXP 33
18489: PUSH
18490: LD_INT 0
18492: EQUAL
18493: AND
18494: IFFALSE 18507
// AddMedal ( oil , - 3 ) ;
18496: LD_STRING oil
18498: PPUSH
18499: LD_INT 3
18501: NEG
18502: PPUSH
18503: CALL_OW 101
// end ; if lostCounter < 3 then
18507: LD_EXP 36
18511: PUSH
18512: LD_INT 3
18514: LESS
18515: IFFALSE 18529
// begin AddMedal ( deaths , 1 ) ;
18517: LD_STRING deaths
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: CALL_OW 101
// end else
18527: GO 18540
// begin AddMedal ( deaths , - 1 ) ;
18529: LD_STRING deaths
18531: PPUSH
18532: LD_INT 1
18534: NEG
18535: PPUSH
18536: CALL_OW 101
// end ; if honor = 1 then
18540: LD_EXP 37
18544: PUSH
18545: LD_INT 1
18547: EQUAL
18548: IFFALSE 18562
// begin AddMedal ( honour , 1 ) ;
18550: LD_STRING honour
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL_OW 101
// end else
18560: GO 18573
// begin AddMedal ( honour , - 1 ) ;
18562: LD_STRING honour
18564: PPUSH
18565: LD_INT 1
18567: NEG
18568: PPUSH
18569: CALL_OW 101
// end ; GiveMedals ( Main ) ;
18573: LD_STRING Main
18575: PPUSH
18576: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18580: LD_INT 22
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 23
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 21
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: PPUSH
18615: CALL_OW 69
18619: PPUSH
18620: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18624: LD_EXP 1
18628: PPUSH
18629: LD_EXP 42
18633: PUSH
18634: LD_STRING JMM
18636: STR
18637: PPUSH
18638: CALL_OW 38
// if IsOK ( Bobby ) then
18642: LD_EXP 2
18646: PPUSH
18647: CALL_OW 302
18651: IFFALSE 18671
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18653: LD_EXP 2
18657: PPUSH
18658: LD_EXP 42
18662: PUSH
18663: LD_STRING Bobby
18665: STR
18666: PPUSH
18667: CALL_OW 38
// if IsOK ( Cyrus ) then
18671: LD_EXP 3
18675: PPUSH
18676: CALL_OW 302
18680: IFFALSE 18700
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18682: LD_EXP 3
18686: PPUSH
18687: LD_EXP 42
18691: PUSH
18692: LD_STRING Cyrus
18694: STR
18695: PPUSH
18696: CALL_OW 38
// if IsOK ( Lisa ) then
18700: LD_EXP 4
18704: PPUSH
18705: CALL_OW 302
18709: IFFALSE 18729
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18711: LD_EXP 4
18715: PPUSH
18716: LD_EXP 42
18720: PUSH
18721: LD_STRING Lisa
18723: STR
18724: PPUSH
18725: CALL_OW 38
// if IsOK ( Brown ) then
18729: LD_EXP 7
18733: PPUSH
18734: CALL_OW 302
18738: IFFALSE 18758
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18740: LD_EXP 7
18744: PPUSH
18745: LD_EXP 42
18749: PUSH
18750: LD_STRING Brown
18752: STR
18753: PPUSH
18754: CALL_OW 38
// if IsOK ( Donaldson ) then
18758: LD_EXP 13
18762: PPUSH
18763: CALL_OW 302
18767: IFFALSE 18787
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18769: LD_EXP 13
18773: PPUSH
18774: LD_EXP 42
18778: PUSH
18779: LD_STRING Donaldson
18781: STR
18782: PPUSH
18783: CALL_OW 38
// if IsOK ( Frank ) then
18787: LD_EXP 5
18791: PPUSH
18792: CALL_OW 302
18796: IFFALSE 18816
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
18798: LD_EXP 5
18802: PPUSH
18803: LD_EXP 42
18807: PUSH
18808: LD_STRING Frank
18810: STR
18811: PPUSH
18812: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
18816: LD_INT 50
18818: PUSH
18819: EMPTY
18820: LIST
18821: PUSH
18822: LD_INT 22
18824: PUSH
18825: LD_INT 1
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 21
18834: PUSH
18835: LD_INT 1
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: PPUSH
18847: CALL_OW 69
18851: PUSH
18852: LD_EXP 1
18856: PUSH
18857: LD_EXP 2
18861: PUSH
18862: LD_EXP 3
18866: PUSH
18867: LD_EXP 4
18871: PUSH
18872: LD_EXP 7
18876: PUSH
18877: LD_EXP 13
18881: PUSH
18882: LD_EXP 5
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: DIFF
18896: PPUSH
18897: LD_STRING 04_other_survivors
18899: PPUSH
18900: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
18904: LD_INT 22
18906: PPUSH
18907: CALL 18920 0 1
// YouWin ;
18911: CALL_OW 103
// end ;
18915: LD_VAR 0 1
18919: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
18920: LD_INT 0
18922: PPUSH
18923: PPUSH
18924: PPUSH
18925: PPUSH
// gammaBase = [ ] ;
18926: LD_ADDR_VAR 0 4
18930: PUSH
18931: EMPTY
18932: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
18933: LD_ADDR_VAR 0 5
18937: PUSH
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 21
18955: PUSH
18956: LD_INT 3
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 50
18965: PUSH
18966: EMPTY
18967: LIST
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: PPUSH
18974: CALL_OW 70
18978: ST_TO_ADDR
// for i in buildings do
18979: LD_ADDR_VAR 0 3
18983: PUSH
18984: LD_VAR 0 5
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19327
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
18992: LD_VAR 0 3
18996: PPUSH
18997: CALL_OW 266
19001: PUSH
19002: LD_INT 6
19004: PUSH
19005: LD_INT 7
19007: PUSH
19008: LD_INT 8
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: LIST
19015: IN
19016: IFFALSE 19130
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19018: LD_ADDR_VAR 0 4
19022: PUSH
19023: LD_VAR 0 4
19027: PUSH
19028: LD_VAR 0 3
19032: PPUSH
19033: CALL_OW 266
19037: PUSH
19038: LD_VAR 0 3
19042: PPUSH
19043: CALL_OW 250
19047: PUSH
19048: LD_VAR 0 3
19052: PPUSH
19053: CALL_OW 251
19057: PUSH
19058: LD_VAR 0 3
19062: PPUSH
19063: CALL_OW 254
19067: PUSH
19068: LD_VAR 0 3
19072: PPUSH
19073: CALL_OW 267
19077: PUSH
19078: LD_VAR 0 3
19082: PPUSH
19083: CALL_OW 248
19087: PUSH
19088: LD_VAR 0 3
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 268
19100: PUSH
19101: LD_VAR 0 3
19105: PPUSH
19106: LD_INT 2
19108: PPUSH
19109: CALL_OW 268
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: PUSH
19124: EMPTY
19125: LIST
19126: ADD
19127: ST_TO_ADDR
19128: GO 19325
// if GetBType ( i ) in [ b_bunker ] then
19130: LD_VAR 0 3
19134: PPUSH
19135: CALL_OW 266
19139: PUSH
19140: LD_INT 32
19142: PUSH
19143: EMPTY
19144: LIST
19145: IN
19146: IFFALSE 19243
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19148: LD_ADDR_VAR 0 4
19152: PUSH
19153: LD_VAR 0 4
19157: PUSH
19158: LD_VAR 0 3
19162: PPUSH
19163: CALL_OW 266
19167: PUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: CALL_OW 250
19177: PUSH
19178: LD_VAR 0 3
19182: PPUSH
19183: CALL_OW 251
19187: PUSH
19188: LD_VAR 0 3
19192: PPUSH
19193: CALL_OW 254
19197: PUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: CALL_OW 267
19207: PUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: CALL_OW 248
19217: PUSH
19218: LD_VAR 0 3
19222: PPUSH
19223: CALL_OW 269
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: PUSH
19237: EMPTY
19238: LIST
19239: ADD
19240: ST_TO_ADDR
19241: GO 19325
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19243: LD_ADDR_VAR 0 4
19247: PUSH
19248: LD_VAR 0 4
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 266
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 250
19272: PUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 251
19282: PUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 254
19292: PUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: CALL_OW 267
19302: PUSH
19303: LD_VAR 0 3
19307: PPUSH
19308: CALL_OW 248
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: PUSH
19321: EMPTY
19322: LIST
19323: ADD
19324: ST_TO_ADDR
// end ;
19325: GO 18989
19327: POP
19328: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19329: LD_VAR 0 4
19333: PPUSH
19334: LD_STRING GammaBase
19336: PPUSH
19337: CALL_OW 39
// end ; end_of_file
19341: LD_VAR 0 2
19345: RET
// every 1 1$15 do
19346: GO 19348
19348: DISABLE
// begin if supply <= 13 and supply > 7 then
19349: LD_EXP 34
19353: PUSH
19354: LD_INT 13
19356: LESSEQUAL
19357: PUSH
19358: LD_EXP 34
19362: PUSH
19363: LD_INT 7
19365: GREATER
19366: AND
19367: IFFALSE 19390
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19369: LD_INT 3
19371: PPUSH
19372: LD_INT 5
19374: PPUSH
19375: CALL_OW 12
19379: PPUSH
19380: LD_INT 18
19382: PPUSH
19383: LD_INT 1
19385: PPUSH
19386: CALL_OW 55
// if supply <= 7 and supply > 4 then
19390: LD_EXP 34
19394: PUSH
19395: LD_INT 7
19397: LESSEQUAL
19398: PUSH
19399: LD_EXP 34
19403: PUSH
19404: LD_INT 4
19406: GREATER
19407: AND
19408: IFFALSE 19431
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19410: LD_INT 3
19412: PPUSH
19413: LD_INT 5
19415: PPUSH
19416: CALL_OW 12
19420: PPUSH
19421: LD_INT 19
19423: PPUSH
19424: LD_INT 1
19426: PPUSH
19427: CALL_OW 55
// if supply <= 4 and supply > 0 then
19431: LD_EXP 34
19435: PUSH
19436: LD_INT 4
19438: LESSEQUAL
19439: PUSH
19440: LD_EXP 34
19444: PUSH
19445: LD_INT 0
19447: GREATER
19448: AND
19449: IFFALSE 19472
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19451: LD_INT 3
19453: PPUSH
19454: LD_INT 5
19456: PPUSH
19457: CALL_OW 12
19461: PPUSH
19462: LD_INT 20
19464: PPUSH
19465: LD_INT 1
19467: PPUSH
19468: CALL_OW 55
// if supply > 0 then
19472: LD_EXP 34
19476: PUSH
19477: LD_INT 0
19479: GREATER
19480: IFFALSE 19497
// begin supply = supply - 1 ;
19482: LD_ADDR_EXP 34
19486: PUSH
19487: LD_EXP 34
19491: PUSH
19492: LD_INT 1
19494: MINUS
19495: ST_TO_ADDR
// enable ;
19496: ENABLE
// end ; end ;
19497: END
