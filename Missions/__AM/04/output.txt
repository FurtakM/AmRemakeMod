// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4269 0 0
// PrepareRussianBase ;
 241: CALL 2582 0 0
// PrepareRussianCommander ;
 245: CALL 2533 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3804 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3804 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3804 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3804 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3804 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3804 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3804 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3804 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3804 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3804 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3804 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3804 0 2
 767: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 768: LD_STRING 03_Frank
 770: PPUSH
 771: CALL_OW 28
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 823
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING 03_Frank
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 3804 0 2
 796: ST_TO_ADDR
// if Frank = 0 then
 797: LD_EXP 5
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: IFFALSE 823
// Frank = PrepareUnit ( Frank , false ) ;
 807: LD_ADDR_EXP 5
 811: PUSH
 812: LD_STRING Frank
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL 3804 0 2
 822: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 32
 830: PPUSH
 831: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 835: LD_EXP 7
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 850: LD_EXP 7
 854: PPUSH
 855: LD_INT 32
 857: PPUSH
 858: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 862: LD_EXP 8
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 877: LD_EXP 9
 881: PPUSH
 882: LD_INT 2
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 892: LD_EXP 12
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 907: LD_EXP 10
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 922: LD_EXP 11
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 937: LD_EXP 4
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// if Lisa = false then
 952: LD_EXP 4
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 977
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 962: LD_EXP 2
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 49
// if Lisa = false and Bobby = false then
 977: LD_EXP 4
 981: PUSH
 982: LD_INT 0
 984: EQUAL
 985: PUSH
 986: LD_EXP 2
 990: PUSH
 991: LD_INT 0
 993: EQUAL
 994: AND
 995: IFFALSE 1012
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 997: LD_EXP 3
1001: PPUSH
1002: LD_INT 2
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 0
1019: EQUAL
1020: PUSH
1021: LD_EXP 2
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: PUSH
1031: LD_EXP 3
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1057
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
1066: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1067: LD_EXP 13
1071: PPUSH
1072: LD_INT 10
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1082: LD_EXP 5
1086: PPUSH
1087: LD_INT 10
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// uc_nation = 1 ;
1097: LD_ADDR_OWVAR 21
1101: PUSH
1102: LD_INT 1
1104: ST_TO_ADDR
// uc_side = 4 ;
1105: LD_ADDR_OWVAR 20
1109: PUSH
1110: LD_INT 4
1112: ST_TO_ADDR
// hc_class := 3 ;
1113: LD_ADDR_OWVAR 28
1117: PUSH
1118: LD_INT 3
1120: ST_TO_ADDR
// hc_sex := sex_male ;
1121: LD_ADDR_OWVAR 27
1125: PUSH
1126: LD_INT 1
1128: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1129: LD_ADDR_OWVAR 33
1133: PUSH
1134: LD_STRING SecondCharsGal
1136: ST_TO_ADDR
// hc_face_number := 53 ;
1137: LD_ADDR_OWVAR 34
1141: PUSH
1142: LD_INT 53
1144: ST_TO_ADDR
// hc_name := Freddie Warner ;
1145: LD_ADDR_OWVAR 26
1149: PUSH
1150: LD_STRING Freddie Warner
1152: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1153: LD_ADDR_OWVAR 29
1157: PUSH
1158: LD_INT 8
1160: PUSH
1161: LD_INT 11
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1168: LD_ADDR_OWVAR 30
1172: PUSH
1173: LD_INT 0
1175: PUSH
1176: LD_INT 0
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 0
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1191: LD_ADDR_OWVAR 31
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 0
1201: PUSH
1202: LD_INT 3
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// un = CreateHuman ;
1214: LD_ADDR_VAR 0 3
1218: PUSH
1219: CALL_OW 44
1223: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_INT 10
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 49
// hc_class := 1 ;
1239: LD_ADDR_OWVAR 28
1243: PUSH
1244: LD_INT 1
1246: ST_TO_ADDR
// hc_sex := sex_male ;
1247: LD_ADDR_OWVAR 27
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1255: LD_ADDR_OWVAR 33
1259: PUSH
1260: LD_STRING SecondCharsGal
1262: ST_TO_ADDR
// hc_face_number := 56 ;
1263: LD_ADDR_OWVAR 34
1267: PUSH
1268: LD_INT 56
1270: ST_TO_ADDR
// hc_name := Mel Brennan ;
1271: LD_ADDR_OWVAR 26
1275: PUSH
1276: LD_STRING Mel Brennan
1278: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1279: LD_ADDR_OWVAR 29
1283: PUSH
1284: LD_INT 12
1286: PUSH
1287: LD_INT 11
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1294: LD_ADDR_OWVAR 30
1298: PUSH
1299: LD_INT 1
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 0
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1317: LD_ADDR_OWVAR 31
1321: PUSH
1322: LD_INT 2
1324: PUSH
1325: LD_INT 1
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: LD_INT 0
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: ST_TO_ADDR
// un = CreateHuman ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1350: LD_VAR 0 3
1354: PPUSH
1355: LD_INT 10
1357: PPUSH
1358: LD_INT 0
1360: PPUSH
1361: CALL_OW 49
// hc_class := 1 ;
1365: LD_ADDR_OWVAR 28
1369: PUSH
1370: LD_INT 1
1372: ST_TO_ADDR
// hc_sex := sex_male ;
1373: LD_ADDR_OWVAR 27
1377: PUSH
1378: LD_INT 1
1380: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1381: LD_ADDR_OWVAR 33
1385: PUSH
1386: LD_STRING AmGalRemake
1388: ST_TO_ADDR
// hc_face_number := 5 ;
1389: LD_ADDR_OWVAR 34
1393: PUSH
1394: LD_INT 5
1396: ST_TO_ADDR
// hc_name := Bob Joplin ;
1397: LD_ADDR_OWVAR 26
1401: PUSH
1402: LD_STRING Bob Joplin
1404: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1405: LD_ADDR_OWVAR 29
1409: PUSH
1410: LD_INT 10
1412: PUSH
1413: LD_INT 11
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1420: LD_ADDR_OWVAR 30
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1443: LD_ADDR_OWVAR 31
1447: PUSH
1448: LD_INT 3
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: ST_TO_ADDR
// un = CreateHuman ;
1466: LD_ADDR_VAR 0 3
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1476: LD_VAR 0 3
1480: PPUSH
1481: LD_INT 10
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// hc_class := 3 ;
1491: LD_ADDR_OWVAR 28
1495: PUSH
1496: LD_INT 3
1498: ST_TO_ADDR
// hc_sex := sex_female ;
1499: LD_ADDR_OWVAR 27
1503: PUSH
1504: LD_INT 2
1506: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1507: LD_ADDR_OWVAR 33
1511: PUSH
1512: LD_STRING AmGalRemake
1514: ST_TO_ADDR
// hc_face_number := 4 ;
1515: LD_ADDR_OWVAR 34
1519: PUSH
1520: LD_INT 4
1522: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1523: LD_ADDR_OWVAR 26
1527: PUSH
1528: LD_STRING Elizabeth Whitney
1530: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1531: LD_ADDR_OWVAR 29
1535: PUSH
1536: LD_INT 9
1538: PUSH
1539: LD_INT 11
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1546: LD_ADDR_OWVAR 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: LD_INT 2
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1569: LD_ADDR_OWVAR 31
1573: PUSH
1574: LD_INT 2
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 4
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// un = CreateHuman ;
1592: LD_ADDR_VAR 0 3
1596: PUSH
1597: CALL_OW 44
1601: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1602: LD_VAR 0 3
1606: PPUSH
1607: LD_INT 10
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL_OW 49
// InitHc ;
1617: CALL_OW 19
// end ;
1621: LD_VAR 0 1
1625: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1626: LD_INT 0
1628: PPUSH
1629: PPUSH
1630: PPUSH
// uc_nation = 1 ;
1631: LD_ADDR_OWVAR 21
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// uc_side = 1 ;
1639: LD_ADDR_OWVAR 20
1643: PUSH
1644: LD_INT 1
1646: ST_TO_ADDR
// hc_class := 1 ;
1647: LD_ADDR_OWVAR 28
1651: PUSH
1652: LD_INT 1
1654: ST_TO_ADDR
// hc_sex := sex_male ;
1655: LD_ADDR_OWVAR 27
1659: PUSH
1660: LD_INT 1
1662: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1663: LD_ADDR_OWVAR 33
1667: PUSH
1668: LD_STRING SecondCharsGal
1670: ST_TO_ADDR
// hc_face_number := 59 ;
1671: LD_ADDR_OWVAR 34
1675: PUSH
1676: LD_INT 59
1678: ST_TO_ADDR
// hc_name := Max Gray ;
1679: LD_ADDR_OWVAR 26
1683: PUSH
1684: LD_STRING Max Gray
1686: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1687: LD_ADDR_OWVAR 29
1691: PUSH
1692: LD_INT 9
1694: PUSH
1695: LD_INT 11
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1702: LD_ADDR_OWVAR 30
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: LD_INT 0
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1725: LD_ADDR_OWVAR 31
1729: PUSH
1730: LD_INT 2
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: ST_TO_ADDR
// un = CreateHuman ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: CALL_OW 44
1757: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1758: LD_VAR 0 4
1762: PPUSH
1763: LD_INT 11
1765: PPUSH
1766: LD_INT 0
1768: PPUSH
1769: CALL_OW 49
// hc_class := 1 ;
1773: LD_ADDR_OWVAR 28
1777: PUSH
1778: LD_INT 1
1780: ST_TO_ADDR
// hc_sex := sex_male ;
1781: LD_ADDR_OWVAR 27
1785: PUSH
1786: LD_INT 1
1788: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1789: LD_ADDR_OWVAR 33
1793: PUSH
1794: LD_STRING SecondCharsGal
1796: ST_TO_ADDR
// hc_face_number := 54 ;
1797: LD_ADDR_OWVAR 34
1801: PUSH
1802: LD_INT 54
1804: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1805: LD_ADDR_OWVAR 26
1809: PUSH
1810: LD_STRING Luigi Ghbellin
1812: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1813: LD_ADDR_OWVAR 29
1817: PUSH
1818: LD_INT 11
1820: PUSH
1821: LD_INT 11
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1828: LD_ADDR_OWVAR 30
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1851: LD_ADDR_OWVAR 31
1855: PUSH
1856: LD_INT 1
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: LD_INT 1
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: ST_TO_ADDR
// un = CreateHuman ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: CALL_OW 44
1883: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 11
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 49
// hc_class := 3 ;
1899: LD_ADDR_OWVAR 28
1903: PUSH
1904: LD_INT 3
1906: ST_TO_ADDR
// hc_sex := sex_male ;
1907: LD_ADDR_OWVAR 27
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1915: LD_ADDR_OWVAR 33
1919: PUSH
1920: LD_STRING AmGalRemake
1922: ST_TO_ADDR
// hc_face_number := 6 ;
1923: LD_ADDR_OWVAR 34
1927: PUSH
1928: LD_INT 6
1930: ST_TO_ADDR
// hc_name := Leon Carter ;
1931: LD_ADDR_OWVAR 26
1935: PUSH
1936: LD_STRING Leon Carter
1938: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1939: LD_ADDR_OWVAR 29
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: LD_INT 9
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1954: LD_ADDR_OWVAR 30
1958: PUSH
1959: LD_INT 0
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 1
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1977: LD_ADDR_OWVAR 31
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: ST_TO_ADDR
// un = CreateHuman ;
2000: LD_ADDR_VAR 0 4
2004: PUSH
2005: CALL_OW 44
2009: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2010: LD_VAR 0 4
2014: PPUSH
2015: LD_INT 11
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// if count = 4 then
2025: LD_VAR 0 1
2029: PUSH
2030: LD_INT 4
2032: EQUAL
2033: IFFALSE 2161
// begin hc_class := 1 ;
2035: LD_ADDR_OWVAR 28
2039: PUSH
2040: LD_INT 1
2042: ST_TO_ADDR
// hc_sex := sex_male ;
2043: LD_ADDR_OWVAR 27
2047: PUSH
2048: LD_INT 1
2050: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2051: LD_ADDR_OWVAR 33
2055: PUSH
2056: LD_STRING SecondCharsGal
2058: ST_TO_ADDR
// hc_face_number := 34 ;
2059: LD_ADDR_OWVAR 34
2063: PUSH
2064: LD_INT 34
2066: ST_TO_ADDR
// hc_name := Ian Hill ;
2067: LD_ADDR_OWVAR 26
2071: PUSH
2072: LD_STRING Ian Hill
2074: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2075: LD_ADDR_OWVAR 29
2079: PUSH
2080: LD_INT 10
2082: PUSH
2083: LD_INT 12
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2090: LD_ADDR_OWVAR 30
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 0
2100: PUSH
2101: LD_INT 1
2103: PUSH
2104: LD_INT 0
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2113: LD_ADDR_OWVAR 31
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: LD_INT 0
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: LD_INT 0
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: ST_TO_ADDR
// un = CreateHuman ;
2136: LD_ADDR_VAR 0 4
2140: PUSH
2141: CALL_OW 44
2145: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2146: LD_VAR 0 4
2150: PPUSH
2151: LD_INT 11
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 49
// end ; if count = 5 then
2161: LD_VAR 0 1
2165: PUSH
2166: LD_INT 5
2168: EQUAL
2169: IFFALSE 2423
// begin hc_class := 1 ;
2171: LD_ADDR_OWVAR 28
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// hc_sex := sex_male ;
2179: LD_ADDR_OWVAR 27
2183: PUSH
2184: LD_INT 1
2186: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2187: LD_ADDR_OWVAR 33
2191: PUSH
2192: LD_STRING SecondCharsGal
2194: ST_TO_ADDR
// hc_face_number := 34 ;
2195: LD_ADDR_OWVAR 34
2199: PUSH
2200: LD_INT 34
2202: ST_TO_ADDR
// hc_name := Ian Hill ;
2203: LD_ADDR_OWVAR 26
2207: PUSH
2208: LD_STRING Ian Hill
2210: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2211: LD_ADDR_OWVAR 29
2215: PUSH
2216: LD_INT 10
2218: PUSH
2219: LD_INT 12
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2226: LD_ADDR_OWVAR 30
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 0
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2249: LD_ADDR_OWVAR 31
2253: PUSH
2254: LD_INT 2
2256: PUSH
2257: LD_INT 0
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: LD_INT 0
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: ST_TO_ADDR
// un = CreateHuman ;
2272: LD_ADDR_VAR 0 4
2276: PUSH
2277: CALL_OW 44
2281: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2282: LD_VAR 0 4
2286: PPUSH
2287: LD_INT 11
2289: PPUSH
2290: LD_INT 0
2292: PPUSH
2293: CALL_OW 49
// hc_class := 1 ;
2297: LD_ADDR_OWVAR 28
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// hc_sex := sex_female ;
2305: LD_ADDR_OWVAR 27
2309: PUSH
2310: LD_INT 2
2312: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING SecondCharsGal
2320: ST_TO_ADDR
// hc_face_number := 41 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 41
2328: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Kate Wadsworth
2336: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2337: LD_ADDR_OWVAR 29
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2352: LD_ADDR_OWVAR 30
2356: PUSH
2357: LD_INT 0
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 0
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2375: LD_ADDR_OWVAR 31
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// un = CreateHuman ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: CALL_OW 44
2407: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2408: LD_VAR 0 4
2412: PPUSH
2413: LD_INT 11
2415: PPUSH
2416: LD_INT 0
2418: PPUSH
2419: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2423: LD_INT 11
2425: PPUSH
2426: LD_INT 22
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 21
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 26
2448: PUSH
2449: LD_INT 1
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PPUSH
2461: CALL_OW 70
2465: PUSH
2466: LD_INT 1
2468: ARRAY
2469: PPUSH
2470: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2474: LD_INT 11
2476: PPUSH
2477: LD_INT 22
2479: PUSH
2480: LD_INT 1
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 21
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 26
2499: PUSH
2500: LD_INT 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PPUSH
2512: CALL_OW 70
2516: PUSH
2517: LD_INT 1
2519: ARRAY
2520: PPUSH
2521: LD_STRING D6-Sol3-1
2523: PPUSH
2524: CALL_OW 88
// end ; end_of_file
2528: LD_VAR 0 2
2532: RET
// export function PrepareRussianCommander ; begin
2533: LD_INT 0
2535: PPUSH
// uc_side = 3 ;
2536: LD_ADDR_OWVAR 20
2540: PUSH
2541: LD_INT 3
2543: ST_TO_ADDR
// uc_nation = 3 ;
2544: LD_ADDR_OWVAR 21
2548: PUSH
2549: LD_INT 3
2551: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2552: LD_ADDR_EXP 15
2556: PUSH
2557: LD_STRING Stolypin
2559: PPUSH
2560: CALL_OW 25
2564: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2565: LD_EXP 15
2569: PPUSH
2570: LD_INT 21
2572: PPUSH
2573: CALL_OW 52
// end ;
2577: LD_VAR 0 1
2581: RET
// export function PrepareRussianBase ; var i ; begin
2582: LD_INT 0
2584: PPUSH
2585: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 3
2591: PPUSH
2592: LD_INT 22
2594: PPUSH
2595: LD_EXP 16
2599: PPUSH
2600: LD_EXP 17
2604: PPUSH
2605: CALL_OW 12
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: LD_INT 2
2615: PPUSH
2616: CALL 3867 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2620: LD_INT 3
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 21
2628: PPUSH
2629: LD_EXP 16
2633: PPUSH
2634: LD_EXP 17
2638: PPUSH
2639: CALL_OW 12
2643: PPUSH
2644: LD_INT 2
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: CALL 3867 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 3
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_EXP 16
2667: PPUSH
2668: LD_EXP 17
2672: PPUSH
2673: CALL_OW 12
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: CALL 3867 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2688: LD_INT 3
2690: PPUSH
2691: LD_INT 3
2693: PPUSH
2694: LD_INT 24
2696: PPUSH
2697: LD_EXP 16
2701: PPUSH
2702: LD_EXP 17
2706: PPUSH
2707: CALL_OW 12
2711: PPUSH
2712: LD_INT 3
2714: PPUSH
2715: LD_INT 6
2717: PPUSH
2718: CALL 3867 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2722: LD_ADDR_VAR 0 2
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 30
2739: PUSH
2740: LD_INT 32
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: FOR_IN
2757: IFFALSE 2797
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2759: LD_INT 3
2761: PPUSH
2762: LD_INT 3
2764: PPUSH
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_EXP 16
2774: PPUSH
2775: LD_EXP 17
2779: PPUSH
2780: CALL_OW 12
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: CALL 3867 0 6
2795: GO 2756
2797: POP
2798: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: LD_INT 22
2806: PUSH
2807: LD_INT 3
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 30
2816: PUSH
2817: LD_INT 31
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PPUSH
2828: CALL_OW 69
2832: PUSH
2833: FOR_IN
2834: IFFALSE 2862
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2836: LD_EXP 16
2840: PPUSH
2841: LD_EXP 17
2845: PPUSH
2846: CALL_OW 12
2850: PPUSH
2851: LD_VAR 0 2
2855: PPUSH
2856: CALL 3977 0 2
2860: GO 2833
2862: POP
2863: POP
// end ;
2864: LD_VAR 0 1
2868: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2869: LD_INT 0
2871: PPUSH
2872: PPUSH
2873: PPUSH
2874: PPUSH
// uc_side = 6 ;
2875: LD_ADDR_OWVAR 20
2879: PUSH
2880: LD_INT 6
2882: ST_TO_ADDR
// uc_nation = 3 ;
2883: LD_ADDR_OWVAR 21
2887: PUSH
2888: LD_INT 3
2890: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2891: LD_ADDR_VAR 0 2
2895: PUSH
2896: DOUBLE
2897: LD_INT 1
2899: DEC
2900: ST_TO_ADDR
2901: LD_INT 1
2903: PUSH
2904: LD_INT 2
2906: PUSH
2907: LD_INT 1
2909: PPUSH
2910: LD_INT 2
2912: PPUSH
2913: CALL_OW 12
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_OWVAR 67
2927: ARRAY
2928: PUSH
2929: FOR_TO
2930: IFFALSE 3090
// begin vc_engine = 1 ;
2932: LD_ADDR_OWVAR 39
2936: PUSH
2937: LD_INT 1
2939: ST_TO_ADDR
// vc_control = 1 ;
2940: LD_ADDR_OWVAR 38
2944: PUSH
2945: LD_INT 1
2947: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2948: LD_ADDR_OWVAR 40
2952: PUSH
2953: LD_INT 42
2955: PUSH
2956: LD_INT 42
2958: PUSH
2959: LD_INT 43
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: PUSH
2967: LD_OWVAR 67
2971: ARRAY
2972: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2973: LD_ADDR_OWVAR 37
2977: PUSH
2978: LD_INT 21
2980: PUSH
2981: LD_INT 22
2983: PUSH
2984: LD_INT 22
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: PUSH
2992: LD_OWVAR 67
2996: ARRAY
2997: ST_TO_ADDR
// veh = CreateVehicle ;
2998: LD_ADDR_VAR 0 3
3002: PUSH
3003: CALL_OW 45
3007: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 3
3015: PPUSH
3016: LD_INT 0
3018: PPUSH
3019: CALL_OW 49
// hc_gallery =  ;
3023: LD_ADDR_OWVAR 33
3027: PUSH
3028: LD_STRING 
3030: ST_TO_ADDR
// hc_name =  ;
3031: LD_ADDR_OWVAR 26
3035: PUSH
3036: LD_STRING 
3038: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_EXP 16
3049: PPUSH
3050: LD_EXP 17
3054: PPUSH
3055: CALL_OW 12
3059: PPUSH
3060: CALL_OW 380
// un = CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_VAR 0 3
3083: PPUSH
3084: CALL_OW 52
// end ;
3088: GO 2929
3090: POP
3091: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3092: LD_INT 0
3094: PPUSH
3095: LD_INT 2
3097: PPUSH
3098: LD_EXP 16
3102: PPUSH
3103: LD_EXP 17
3107: PPUSH
3108: CALL_OW 12
3112: PUSH
3113: LD_INT 2
3115: PLUS
3116: PPUSH
3117: CALL_OW 380
// un = CreateHuman ;
3121: LD_ADDR_VAR 0 4
3125: PUSH
3126: CALL_OW 44
3130: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3131: LD_VAR 0 4
3135: PPUSH
3136: LD_INT 3
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3146: LD_INT 0
3148: PPUSH
3149: LD_INT 4
3151: PPUSH
3152: LD_EXP 16
3156: PPUSH
3157: LD_EXP 17
3161: PPUSH
3162: CALL_OW 12
3166: PUSH
3167: LD_INT 2
3169: PLUS
3170: PPUSH
3171: CALL_OW 380
// un = CreateHuman ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: CALL_OW 44
3184: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3185: LD_VAR 0 4
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: DOUBLE
3206: LD_INT 1
3208: DEC
3209: ST_TO_ADDR
3210: LD_INT 2
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_OWVAR 67
3228: ARRAY
3229: PUSH
3230: LD_INT 1
3232: PPUSH
3233: LD_INT 3
3235: PPUSH
3236: CALL_OW 12
3240: PLUS
3241: PUSH
3242: FOR_TO
3243: IFFALSE 3313
// begin hc_gallery =  ;
3245: LD_ADDR_OWVAR 33
3249: PUSH
3250: LD_STRING 
3252: ST_TO_ADDR
// hc_name =  ;
3253: LD_ADDR_OWVAR 26
3257: PUSH
3258: LD_STRING 
3260: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3261: LD_INT 0
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: LD_EXP 16
3271: PPUSH
3272: LD_EXP 17
3276: PPUSH
3277: CALL_OW 12
3281: PPUSH
3282: CALL_OW 380
// un = CreateHuman ;
3286: LD_ADDR_VAR 0 4
3290: PUSH
3291: CALL_OW 44
3295: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: CALL_OW 49
// end ;
3311: GO 3242
3313: POP
3314: POP
// vc_engine = 1 ;
3315: LD_ADDR_OWVAR 39
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// vc_control = 1 ;
3323: LD_ADDR_OWVAR 38
3327: PUSH
3328: LD_INT 1
3330: ST_TO_ADDR
// vc_weapon = 51 ;
3331: LD_ADDR_OWVAR 40
3335: PUSH
3336: LD_INT 51
3338: ST_TO_ADDR
// vc_chassis = 22 ;
3339: LD_ADDR_OWVAR 37
3343: PUSH
3344: LD_INT 22
3346: ST_TO_ADDR
// veh = CreateVehicle ;
3347: LD_ADDR_VAR 0 3
3351: PUSH
3352: CALL_OW 45
3356: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3357: LD_VAR 0 3
3361: PPUSH
3362: LD_INT 3
3364: PPUSH
3365: LD_INT 0
3367: PPUSH
3368: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3372: LD_VAR 0 3
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 100
3382: PPUSH
3383: CALL_OW 290
// hc_gallery =  ;
3387: LD_ADDR_OWVAR 33
3391: PUSH
3392: LD_STRING 
3394: ST_TO_ADDR
// hc_name =  ;
3395: LD_ADDR_OWVAR 26
3399: PUSH
3400: LD_STRING 
3402: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_EXP 16
3413: PPUSH
3414: LD_EXP 17
3418: PPUSH
3419: CALL_OW 12
3423: PPUSH
3424: CALL_OW 380
// un = CreateHuman ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: CALL_OW 44
3437: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3438: LD_VAR 0 4
3442: PPUSH
3443: LD_VAR 0 3
3447: PPUSH
3448: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: LD_INT 22
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 1
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: LD_INT 25
3475: PUSH
3476: LD_INT 2
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 25
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: PUSH
3518: FOR_IN
3519: IFFALSE 3538
// ComAgressiveMove ( i , 45 , 46 ) ;
3521: LD_VAR 0 2
3525: PPUSH
3526: LD_INT 45
3528: PPUSH
3529: LD_INT 46
3531: PPUSH
3532: CALL_OW 114
3536: GO 3518
3538: POP
3539: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3540: LD_ADDR_VAR 0 2
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 25
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 69
3573: PUSH
3574: FOR_IN
3575: IFFALSE 3606
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3577: LD_ADDR_EXP 21
3581: PUSH
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_INT 0
3589: PPUSH
3590: LD_INT 48
3592: PPUSH
3593: LD_INT 55
3595: PPUSH
3596: LD_INT 5
3598: PPUSH
3599: CALL_OW 145
3603: ST_TO_ADDR
3604: GO 3574
3606: POP
3607: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: LD_INT 22
3615: PUSH
3616: LD_INT 6
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: LD_INT 25
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: PUSH
3642: FOR_IN
3643: IFFALSE 3662
// ComMoveXY ( i , 39 , 55 ) ;
3645: LD_VAR 0 2
3649: PPUSH
3650: LD_INT 39
3652: PPUSH
3653: LD_INT 55
3655: PPUSH
3656: CALL_OW 111
3660: GO 3642
3662: POP
3663: POP
// end ;
3664: LD_VAR 0 1
3668: RET
// export function PrepareFirstAttack ; var i , un ; begin
3669: LD_INT 0
3671: PPUSH
3672: PPUSH
3673: PPUSH
// uc_side = 5 ;
3674: LD_ADDR_OWVAR 20
3678: PUSH
3679: LD_INT 5
3681: ST_TO_ADDR
// uc_nation = 3 ;
3682: LD_ADDR_OWVAR 21
3686: PUSH
3687: LD_INT 3
3689: ST_TO_ADDR
// for i := 1 to 4 do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_INT 4
3702: PUSH
3703: FOR_TO
3704: IFFALSE 3789
// begin hc_gallery =  ;
3706: LD_ADDR_OWVAR 33
3710: PUSH
3711: LD_STRING 
3713: ST_TO_ADDR
// hc_name =  ;
3714: LD_ADDR_OWVAR 26
3718: PUSH
3719: LD_STRING 
3721: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_EXP 16
3732: PPUSH
3733: LD_EXP 17
3737: PPUSH
3738: CALL_OW 12
3742: PPUSH
3743: CALL_OW 380
// un = CreateHuman ;
3747: LD_ADDR_VAR 0 3
3751: PUSH
3752: CALL_OW 44
3756: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3757: LD_VAR 0 3
3761: PPUSH
3762: LD_INT 4
3764: PPUSH
3765: LD_INT 0
3767: PPUSH
3768: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 48
3779: PPUSH
3780: LD_INT 14
3782: PPUSH
3783: CALL_OW 114
// end ;
3787: GO 3703
3789: POP
3790: POP
// firstRussianAttack = 1 ;
3791: LD_ADDR_EXP 23
3795: PUSH
3796: LD_INT 1
3798: ST_TO_ADDR
// end ; end_of_file
3799: LD_VAR 0 1
3803: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
// if exist_mode then
3808: LD_VAR 0 2
3812: IFFALSE 3837
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3814: LD_ADDR_VAR 0 4
3818: PUSH
3819: LD_EXP 45
3823: PUSH
3824: LD_VAR 0 1
3828: STR
3829: PPUSH
3830: CALL_OW 34
3834: ST_TO_ADDR
// end else
3835: GO 3852
// begin unit := NewCharacter ( ident ) ;
3837: LD_ADDR_VAR 0 4
3841: PUSH
3842: LD_VAR 0 1
3846: PPUSH
3847: CALL_OW 25
3851: ST_TO_ADDR
// end ; result := unit ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: LD_VAR 0 4
3861: ST_TO_ADDR
// end ;
3862: LD_VAR 0 3
3866: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
3872: PPUSH
// for i = 1 to count do
3873: LD_ADDR_VAR 0 8
3877: PUSH
3878: DOUBLE
3879: LD_INT 1
3881: DEC
3882: ST_TO_ADDR
3883: LD_VAR 0 6
3887: PUSH
3888: FOR_TO
3889: IFFALSE 3970
// begin uc_side = side ;
3891: LD_ADDR_OWVAR 20
3895: PUSH
3896: LD_VAR 0 1
3900: ST_TO_ADDR
// uc_nation = nation ;
3901: LD_ADDR_OWVAR 21
3905: PUSH
3906: LD_VAR 0 2
3910: ST_TO_ADDR
// hc_gallery =  ;
3911: LD_ADDR_OWVAR 33
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// hc_name =  ;
3919: LD_ADDR_OWVAR 26
3923: PUSH
3924: LD_STRING 
3926: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_VAR 0 5
3934: PPUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: CALL_OW 380
// un = CreateHuman ;
3944: LD_ADDR_VAR 0 10
3948: PUSH
3949: CALL_OW 44
3953: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3954: LD_VAR 0 10
3958: PPUSH
3959: LD_VAR 0 3
3963: PPUSH
3964: CALL_OW 52
// end ;
3968: GO 3888
3970: POP
3971: POP
// end ;
3972: LD_VAR 0 7
3976: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
3981: PPUSH
// uc_side := GetSide ( b ) ;
3982: LD_ADDR_OWVAR 20
3986: PUSH
3987: LD_VAR 0 2
3991: PPUSH
3992: CALL_OW 255
3996: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3997: LD_ADDR_OWVAR 21
4001: PUSH
4002: LD_VAR 0 2
4006: PPUSH
4007: CALL_OW 248
4011: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_INT 1
4017: PPUSH
4018: LD_VAR 0 1
4022: PPUSH
4023: CALL_OW 380
// un = CreateHuman ;
4027: LD_ADDR_VAR 0 4
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4037: LD_ADDR_VAR 0 5
4041: PUSH
4042: LD_VAR 0 2
4046: PPUSH
4047: CALL_OW 254
4051: PUSH
4052: LD_INT 3
4054: MINUS
4055: ST_TO_ADDR
// if dir < 0 then
4056: LD_VAR 0 5
4060: PUSH
4061: LD_INT 0
4063: LESS
4064: IFFALSE 4080
// dir := 6 + dir ;
4066: LD_ADDR_VAR 0 5
4070: PUSH
4071: LD_INT 6
4073: PUSH
4074: LD_VAR 0 5
4078: PLUS
4079: ST_TO_ADDR
// SetDir ( un , dir ) ;
4080: LD_VAR 0 4
4084: PPUSH
4085: LD_VAR 0 5
4089: PPUSH
4090: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4094: LD_VAR 0 4
4098: PPUSH
4099: LD_VAR 0 2
4103: PPUSH
4104: CALL_OW 52
// end ;
4108: LD_VAR 0 3
4112: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4113: LD_INT 0
4115: PPUSH
4116: PPUSH
4117: PPUSH
// rnd = rand ( 1 , characters ) ;
4118: LD_ADDR_VAR 0 6
4122: PUSH
4123: LD_INT 1
4125: PPUSH
4126: LD_VAR 0 1
4130: PPUSH
4131: CALL_OW 12
4135: ST_TO_ADDR
// for i = 1 to characters do
4136: LD_ADDR_VAR 0 5
4140: PUSH
4141: DOUBLE
4142: LD_INT 1
4144: DEC
4145: ST_TO_ADDR
4146: LD_VAR 0 1
4150: PUSH
4151: FOR_TO
4152: IFFALSE 4262
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 6
4163: EQUAL
4164: PUSH
4165: LD_VAR 0 1
4169: PUSH
4170: LD_VAR 0 5
4174: ARRAY
4175: PPUSH
4176: CALL_OW 258
4180: PUSH
4181: LD_INT 1
4183: EQUAL
4184: AND
4185: IFFALSE 4207
// Say ( characters [ i ] , dialogMID ) ;
4187: LD_VAR 0 1
4191: PUSH
4192: LD_VAR 0 5
4196: ARRAY
4197: PPUSH
4198: LD_VAR 0 2
4202: PPUSH
4203: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4207: LD_VAR 0 5
4211: PUSH
4212: LD_VAR 0 6
4216: EQUAL
4217: PUSH
4218: LD_VAR 0 1
4222: PUSH
4223: LD_VAR 0 5
4227: ARRAY
4228: PPUSH
4229: CALL_OW 258
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: AND
4238: IFFALSE 4260
// Say ( characters [ i ] , dialogFID ) ;
4240: LD_VAR 0 1
4244: PUSH
4245: LD_VAR 0 5
4249: ARRAY
4250: PPUSH
4251: LD_VAR 0 3
4255: PPUSH
4256: CALL_OW 88
// end ;
4260: GO 4151
4262: POP
4263: POP
// end ;
4264: LD_VAR 0 4
4268: RET
// export function PrepareDifficulty ; var tmp ; begin
4269: LD_INT 0
4271: PPUSH
4272: PPUSH
// if Difficulty = 1 then
4273: LD_OWVAR 67
4277: PUSH
4278: LD_INT 1
4280: EQUAL
4281: IFFALSE 4299
// begin RuSoldMinLevel = 0 ;
4283: LD_ADDR_EXP 16
4287: PUSH
4288: LD_INT 0
4290: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4291: LD_ADDR_EXP 17
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// end ; if Difficulty = 2 then
4299: LD_OWVAR 67
4303: PUSH
4304: LD_INT 2
4306: EQUAL
4307: IFFALSE 4415
// begin RuSoldMinLevel = 1 ;
4309: LD_ADDR_EXP 16
4313: PUSH
4314: LD_INT 1
4316: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4317: LD_ADDR_EXP 17
4321: PUSH
4322: LD_INT 2
4324: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4325: LD_INT 14
4327: PPUSH
4328: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4332: LD_INT 23
4334: PPUSH
4335: CALL_OW 64
// uc_nation = 3 ;
4339: LD_ADDR_OWVAR 21
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// uc_side = 3 ;
4347: LD_ADDR_OWVAR 20
4351: PUSH
4352: LD_INT 3
4354: ST_TO_ADDR
// bc_level = 5 ;
4355: LD_ADDR_OWVAR 43
4359: PUSH
4360: LD_INT 5
4362: ST_TO_ADDR
// bc_type = 32 ;
4363: LD_ADDR_OWVAR 42
4367: PUSH
4368: LD_INT 32
4370: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_INT 76
4378: PPUSH
4379: LD_INT 91
4381: PPUSH
4382: LD_INT 2
4384: PPUSH
4385: CALL_OW 47
4389: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4390: LD_VAR 0 2
4394: PPUSH
4395: LD_INT 43
4397: PPUSH
4398: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4402: LD_INT 51
4404: PPUSH
4405: LD_INT 3
4407: PPUSH
4408: LD_INT 1
4410: PPUSH
4411: CALL_OW 322
// end ; if Difficulty = 3 then
4415: LD_OWVAR 67
4419: PUSH
4420: LD_INT 3
4422: EQUAL
4423: IFFALSE 4599
// begin RuSoldMinLevel = 1 ;
4425: LD_ADDR_EXP 16
4429: PUSH
4430: LD_INT 1
4432: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4433: LD_ADDR_EXP 17
4437: PUSH
4438: LD_INT 3
4440: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4441: LD_INT 13
4443: PPUSH
4444: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4448: LD_INT 14
4450: PPUSH
4451: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4455: LD_INT 26
4457: PPUSH
4458: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4462: LD_INT 23
4464: PPUSH
4465: CALL_OW 64
// uc_nation = 3 ;
4469: LD_ADDR_OWVAR 21
4473: PUSH
4474: LD_INT 3
4476: ST_TO_ADDR
// uc_side = 3 ;
4477: LD_ADDR_OWVAR 20
4481: PUSH
4482: LD_INT 3
4484: ST_TO_ADDR
// bc_level = 5 ;
4485: LD_ADDR_OWVAR 43
4489: PUSH
4490: LD_INT 5
4492: ST_TO_ADDR
// bc_type = 32 ;
4493: LD_ADDR_OWVAR 42
4497: PUSH
4498: LD_INT 32
4500: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4501: LD_ADDR_VAR 0 2
4505: PUSH
4506: LD_INT 76
4508: PPUSH
4509: LD_INT 91
4511: PPUSH
4512: LD_INT 2
4514: PPUSH
4515: CALL_OW 47
4519: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4520: LD_VAR 0 2
4524: PPUSH
4525: LD_INT 44
4527: PPUSH
4528: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4532: LD_ADDR_VAR 0 2
4536: PUSH
4537: LD_INT 83
4539: PPUSH
4540: LD_INT 84
4542: PPUSH
4543: LD_INT 2
4545: PPUSH
4546: CALL_OW 47
4550: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4551: LD_VAR 0 2
4555: PPUSH
4556: LD_INT 43
4558: PPUSH
4559: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4563: LD_INT 51
4565: PPUSH
4566: LD_INT 3
4568: PPUSH
4569: LD_INT 1
4571: PPUSH
4572: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4576: LD_INT 52
4578: PPUSH
4579: LD_INT 3
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4589: LD_INT 25
4591: PPUSH
4592: LD_INT 44
4594: PPUSH
4595: CALL_OW 431
// end ; end ;
4599: LD_VAR 0 1
4603: RET
// export function EnergyDialog ; begin
4604: LD_INT 0
4606: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4607: LD_INT 46
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: CALL_OW 321
4617: PUSH
4618: LD_INT 1
4620: EQUAL
4621: PUSH
4622: LD_INT 35
4624: PPUSH
4625: LD_INT 1
4627: PPUSH
4628: CALL_OW 321
4632: PUSH
4633: LD_INT 1
4635: EQUAL
4636: AND
4637: IFFALSE 4661
// begin Say ( JMM , D9c-JMM-1 ) ;
4639: LD_EXP 1
4643: PPUSH
4644: LD_STRING D9c-JMM-1
4646: PPUSH
4647: CALL_OW 88
// energyVDialog = 1 ;
4651: LD_ADDR_EXP 33
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// end else
4659: GO 4815
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4661: LD_INT 35
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 321
4671: PUSH
4672: LD_INT 2
4674: EQUAL
4675: PUSH
4676: LD_EXP 33
4680: PUSH
4681: LD_INT 0
4683: EQUAL
4684: AND
4685: IFFALSE 4707
// begin Say ( JMM , D9c-JMM-1a ) ;
4687: LD_EXP 1
4691: PPUSH
4692: LD_STRING D9c-JMM-1a
4694: PPUSH
4695: CALL_OW 88
// energyVDialog = 1 ;
4699: LD_ADDR_EXP 33
4703: PUSH
4704: LD_INT 1
4706: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4707: LD_INT 46
4709: PPUSH
4710: LD_INT 1
4712: PPUSH
4713: CALL_OW 321
4717: PUSH
4718: LD_INT 2
4720: EQUAL
4721: PUSH
4722: LD_EXP 33
4726: PUSH
4727: LD_INT 0
4729: EQUAL
4730: AND
4731: IFFALSE 4753
// begin Say ( JMM , D9c-JMM-1b ) ;
4733: LD_EXP 1
4737: PPUSH
4738: LD_STRING D9c-JMM-1b
4740: PPUSH
4741: CALL_OW 88
// energyVDialog = 1 ;
4745: LD_ADDR_EXP 33
4749: PUSH
4750: LD_INT 1
4752: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4753: LD_INT 46
4755: PPUSH
4756: LD_INT 1
4758: PPUSH
4759: CALL_OW 321
4763: PUSH
4764: LD_INT 2
4766: EQUAL
4767: PUSH
4768: LD_INT 21
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 321
4778: PUSH
4779: LD_INT 2
4781: EQUAL
4782: AND
4783: PUSH
4784: LD_EXP 33
4788: PUSH
4789: LD_INT 0
4791: EQUAL
4792: AND
4793: IFFALSE 4815
// begin Say ( JMM , D9c-JMM-1c ) ;
4795: LD_EXP 1
4799: PPUSH
4800: LD_STRING D9c-JMM-1c
4802: PPUSH
4803: CALL_OW 88
// energyVDialog = 1 ;
4807: LD_ADDR_EXP 33
4811: PUSH
4812: LD_INT 1
4814: ST_TO_ADDR
// end ; end ; end ;
4815: LD_VAR 0 1
4819: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4820: LD_INT 0
4822: PPUSH
4823: PPUSH
4824: PPUSH
4825: PPUSH
4826: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4827: LD_VAR 0 1
4831: NOT
4832: PUSH
4833: LD_VAR 0 1
4837: PPUSH
4838: CALL_OW 256
4842: PUSH
4843: LD_INT 250
4845: LESS
4846: OR
4847: PUSH
4848: LD_VAR 0 1
4852: PPUSH
4853: CALL_OW 314
4857: PUSH
4858: LD_VAR 0 1
4862: PPUSH
4863: CALL_OW 261
4867: PUSH
4868: LD_INT 20
4870: GREATER
4871: AND
4872: OR
4873: IFFALSE 4877
// exit ;
4875: GO 5242
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4877: LD_VAR 0 1
4881: PPUSH
4882: CALL_OW 261
4886: PUSH
4887: LD_INT 20
4889: LESS
4890: PUSH
4891: LD_VAR 0 1
4895: PPUSH
4896: CALL_OW 110
4900: PUSH
4901: LD_INT 21
4903: EQUAL
4904: NOT
4905: AND
4906: IFFALSE 4933
// begin ComStop ( bulldozer ) ;
4908: LD_VAR 0 1
4912: PPUSH
4913: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4917: LD_VAR 0 1
4921: PPUSH
4922: LD_INT 21
4924: PPUSH
4925: CALL_OW 109
// exit ;
4929: GO 5242
// end else
4931: GO 4960
// if GetFuel ( bulldozer ) > 20 then
4933: LD_VAR 0 1
4937: PPUSH
4938: CALL_OW 261
4942: PUSH
4943: LD_INT 20
4945: GREATER
4946: IFFALSE 4960
// SetTag ( bulldozer , 0 ) ;
4948: LD_VAR 0 1
4952: PPUSH
4953: LD_INT 0
4955: PPUSH
4956: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4960: LD_ADDR_VAR 0 5
4964: PUSH
4965: LD_VAR 0 2
4969: PPUSH
4970: CALL_OW 353
4974: ST_TO_ADDR
// tmp := [ ] ;
4975: LD_ADDR_VAR 0 6
4979: PUSH
4980: EMPTY
4981: ST_TO_ADDR
// for i = 1 to list do
4982: LD_ADDR_VAR 0 4
4986: PUSH
4987: DOUBLE
4988: LD_INT 1
4990: DEC
4991: ST_TO_ADDR
4992: LD_VAR 0 5
4996: PUSH
4997: FOR_TO
4998: IFFALSE 5096
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5000: LD_VAR 0 5
5004: PUSH
5005: LD_VAR 0 4
5009: ARRAY
5010: PUSH
5011: LD_INT 1
5013: ARRAY
5014: PPUSH
5015: LD_VAR 0 5
5019: PUSH
5020: LD_VAR 0 4
5024: ARRAY
5025: PUSH
5026: LD_INT 2
5028: ARRAY
5029: PPUSH
5030: CALL_OW 554
5034: IFFALSE 5094
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_VAR 0 6
5045: PPUSH
5046: LD_VAR 0 6
5050: PUSH
5051: LD_INT 1
5053: PLUS
5054: PPUSH
5055: LD_VAR 0 5
5059: PUSH
5060: LD_VAR 0 4
5064: ARRAY
5065: PUSH
5066: LD_INT 1
5068: ARRAY
5069: PUSH
5070: LD_VAR 0 5
5074: PUSH
5075: LD_VAR 0 4
5079: ARRAY
5080: PUSH
5081: LD_INT 2
5083: ARRAY
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 1
5093: ST_TO_ADDR
// end ;
5094: GO 4997
5096: POP
5097: POP
// ComStop ( bulldozer ) ;
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5107: LD_ADDR_VAR 0 7
5111: PUSH
5112: LD_VAR 0 1
5116: PPUSH
5117: CALL_OW 250
5121: PUSH
5122: LD_VAR 0 1
5126: PPUSH
5127: CALL_OW 251
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: ST_TO_ADDR
// for i = tmp downto 1 do
5136: LD_ADDR_VAR 0 4
5140: PUSH
5141: DOUBLE
5142: LD_VAR 0 6
5146: INC
5147: ST_TO_ADDR
5148: LD_INT 1
5150: PUSH
5151: FOR_DOWNTO
5152: IFFALSE 5240
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5154: LD_ADDR_VAR 0 7
5158: PUSH
5159: LD_VAR 0 7
5163: PUSH
5164: LD_INT 1
5166: ARRAY
5167: PPUSH
5168: LD_VAR 0 7
5172: PUSH
5173: LD_INT 2
5175: ARRAY
5176: PPUSH
5177: LD_VAR 0 6
5181: PPUSH
5182: CALL 5343 0 3
5186: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5187: LD_VAR 0 1
5191: PPUSH
5192: LD_VAR 0 7
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: PPUSH
5201: LD_VAR 0 7
5205: PUSH
5206: LD_INT 2
5208: ARRAY
5209: PPUSH
5210: CALL 5247 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5214: LD_ADDR_VAR 0 6
5218: PUSH
5219: LD_VAR 0 6
5223: PPUSH
5224: LD_VAR 0 7
5228: PUSH
5229: LD_INT 3
5231: ARRAY
5232: PPUSH
5233: CALL_OW 3
5237: ST_TO_ADDR
// end ;
5238: GO 5151
5240: POP
5241: POP
// end ;
5242: LD_VAR 0 3
5246: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5247: LD_INT 0
5249: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5250: LD_VAR 0 2
5254: PPUSH
5255: LD_VAR 0 3
5259: PPUSH
5260: CALL_OW 351
5264: PUSH
5265: LD_VAR 0 2
5269: PPUSH
5270: LD_VAR 0 3
5274: PPUSH
5275: CALL_OW 554
5279: AND
5280: PUSH
5281: LD_VAR 0 2
5285: PPUSH
5286: LD_VAR 0 3
5290: PPUSH
5291: CALL_OW 488
5295: AND
5296: PUSH
5297: LD_VAR 0 2
5301: PPUSH
5302: LD_VAR 0 3
5306: PPUSH
5307: CALL_OW 428
5311: PUSH
5312: LD_INT 1
5314: NEG
5315: EQUAL
5316: AND
5317: IFFALSE 5338
// AddComMoveXY ( bulldozer , x , y ) ;
5319: LD_VAR 0 1
5323: PPUSH
5324: LD_VAR 0 2
5328: PPUSH
5329: LD_VAR 0 3
5333: PPUSH
5334: CALL_OW 171
// end ;
5338: LD_VAR 0 4
5342: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5343: LD_INT 0
5345: PPUSH
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
// dist := 99999 ;
5352: LD_ADDR_VAR 0 6
5356: PUSH
5357: LD_INT 99999
5359: ST_TO_ADDR
// for i = 1 to list do
5360: LD_ADDR_VAR 0 5
5364: PUSH
5365: DOUBLE
5366: LD_INT 1
5368: DEC
5369: ST_TO_ADDR
5370: LD_VAR 0 3
5374: PUSH
5375: FOR_TO
5376: IFFALSE 5514
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5378: LD_ADDR_VAR 0 7
5382: PUSH
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_VAR 0 2
5392: PPUSH
5393: LD_VAR 0 3
5397: PUSH
5398: LD_VAR 0 5
5402: ARRAY
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: PPUSH
5408: LD_VAR 0 3
5412: PUSH
5413: LD_VAR 0 5
5417: ARRAY
5418: PUSH
5419: LD_INT 2
5421: ARRAY
5422: PPUSH
5423: CALL_OW 298
5427: ST_TO_ADDR
// if d = 0 then
5428: LD_VAR 0 7
5432: PUSH
5433: LD_INT 0
5435: EQUAL
5436: IFFALSE 5440
// continue ;
5438: GO 5375
// if d < dist then
5440: LD_VAR 0 7
5444: PUSH
5445: LD_VAR 0 6
5449: LESS
5450: IFFALSE 5512
// begin _x := list [ i ] [ 1 ] ;
5452: LD_ADDR_VAR 0 8
5456: PUSH
5457: LD_VAR 0 3
5461: PUSH
5462: LD_VAR 0 5
5466: ARRAY
5467: PUSH
5468: LD_INT 1
5470: ARRAY
5471: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5472: LD_ADDR_VAR 0 9
5476: PUSH
5477: LD_VAR 0 3
5481: PUSH
5482: LD_VAR 0 5
5486: ARRAY
5487: PUSH
5488: LD_INT 2
5490: ARRAY
5491: ST_TO_ADDR
// _i := i ;
5492: LD_ADDR_VAR 0 10
5496: PUSH
5497: LD_VAR 0 5
5501: ST_TO_ADDR
// dist := d ;
5502: LD_ADDR_VAR 0 6
5506: PUSH
5507: LD_VAR 0 7
5511: ST_TO_ADDR
// end ; end ;
5512: GO 5375
5514: POP
5515: POP
// result := [ _x , _y , _i , dist ] ;
5516: LD_ADDR_VAR 0 4
5520: PUSH
5521: LD_VAR 0 8
5525: PUSH
5526: LD_VAR 0 9
5530: PUSH
5531: LD_VAR 0 10
5535: PUSH
5536: LD_VAR 0 6
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: ST_TO_ADDR
// end ;
5547: LD_VAR 0 4
5551: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5552: LD_INT 0
5554: PPUSH
5555: PPUSH
5556: PPUSH
5557: PPUSH
// for i = 1 to 72 do
5558: LD_ADDR_VAR 0 5
5562: PUSH
5563: DOUBLE
5564: LD_INT 1
5566: DEC
5567: ST_TO_ADDR
5568: LD_INT 72
5570: PUSH
5571: FOR_TO
5572: IFFALSE 5630
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5574: LD_VAR 0 5
5578: PPUSH
5579: LD_VAR 0 1
5583: PPUSH
5584: CALL_OW 321
5588: PUSH
5589: LD_INT 1
5591: EQUAL
5592: PUSH
5593: LD_VAR 0 5
5597: PPUSH
5598: LD_VAR 0 3
5602: PPUSH
5603: CALL_OW 482
5607: PUSH
5608: LD_INT 1
5610: EQUAL
5611: AND
5612: IFFALSE 5628
// AddComResearch ( lab , i ) ;
5614: LD_VAR 0 2
5618: PPUSH
5619: LD_VAR 0 5
5623: PPUSH
5624: CALL_OW 184
5628: GO 5571
5630: POP
5631: POP
// end ;
5632: LD_VAR 0 4
5636: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5637: LD_INT 0
5639: PPUSH
5640: PPUSH
5641: PPUSH
5642: PPUSH
5643: PPUSH
5644: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5645: LD_ADDR_VAR 0 7
5649: PUSH
5650: LD_VAR 0 2
5654: PPUSH
5655: CALL_OW 313
5659: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5660: LD_ADDR_VAR 0 8
5664: PUSH
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_INT 22
5672: PUSH
5673: LD_VAR 0 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 25
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 24
5694: PUSH
5695: LD_INT 750
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 3
5704: PUSH
5705: LD_INT 54
5707: PUSH
5708: EMPTY
5709: LIST
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PPUSH
5721: CALL_OW 70
5725: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5726: LD_ADDR_VAR 0 5
5730: PUSH
5731: LD_VAR 0 3
5735: PPUSH
5736: LD_INT 22
5738: PUSH
5739: LD_VAR 0 1
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 21
5750: PUSH
5751: LD_INT 3
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: LD_INT 3
5760: PUSH
5761: LD_INT 24
5763: PUSH
5764: LD_INT 1000
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: PPUSH
5783: CALL_OW 70
5787: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5788: LD_VAR 0 5
5792: NOT
5793: PUSH
5794: LD_INT 22
5796: PUSH
5797: LD_VAR 0 1
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 25
5808: PUSH
5809: LD_INT 2
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 24
5818: PUSH
5819: LD_INT 250
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PPUSH
5831: CALL_OW 69
5835: NOT
5836: AND
5837: IFFALSE 5841
// exit ;
5839: GO 5953
// if buildings_list > 0 and engineerOkInside then
5841: LD_VAR 0 5
5845: PUSH
5846: LD_INT 0
5848: GREATER
5849: PUSH
5850: LD_VAR 0 7
5854: AND
5855: IFFALSE 5881
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
5857: LD_VAR 0 7
5861: PPUSH
5862: LD_INT 25
5864: PUSH
5865: LD_INT 2
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL_OW 72
5876: PPUSH
5877: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5881: LD_VAR 0 5
5885: PUSH
5886: LD_INT 0
5888: GREATER
5889: PUSH
5890: LD_VAR 0 8
5894: PUSH
5895: LD_INT 0
5897: GREATER
5898: AND
5899: IFFALSE 5919
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5901: LD_VAR 0 8
5905: PPUSH
5906: LD_VAR 0 5
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: PPUSH
5915: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
5919: LD_VAR 0 5
5923: PUSH
5924: LD_INT 0
5926: EQUAL
5927: PUSH
5928: LD_VAR 0 8
5932: PUSH
5933: LD_INT 0
5935: GREATER
5936: AND
5937: IFFALSE 5953
// ComEnterUnit ( engineerOkOutside , building ) ;
5939: LD_VAR 0 8
5943: PPUSH
5944: LD_VAR 0 2
5948: PPUSH
5949: CALL_OW 120
// end ;
5953: LD_VAR 0 4
5957: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
5958: LD_INT 0
5960: PPUSH
5961: PPUSH
5962: PPUSH
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
5967: PPUSH
5968: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
5969: LD_ADDR_VAR 0 6
5973: PUSH
5974: LD_INT 22
5976: PUSH
5977: LD_VAR 0 1
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PUSH
5986: LD_INT 25
5988: PUSH
5989: LD_INT 4
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 23
5998: PUSH
5999: LD_INT 2
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 24
6008: PUSH
6009: LD_INT 251
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6027: LD_ADDR_VAR 0 7
6031: PUSH
6032: LD_VAR 0 3
6036: PPUSH
6037: LD_INT 22
6039: PUSH
6040: LD_VAR 0 1
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: LD_INT 23
6051: PUSH
6052: LD_INT 2
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 50
6071: PUSH
6072: EMPTY
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: PPUSH
6081: CALL_OW 70
6085: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6086: LD_ADDR_VAR 0 10
6090: PUSH
6091: LD_VAR 0 3
6095: PPUSH
6096: LD_INT 22
6098: PUSH
6099: LD_VAR 0 1
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 21
6110: PUSH
6111: LD_INT 1
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 25
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 3
6137: PUSH
6138: LD_INT 24
6140: PUSH
6141: LD_INT 750
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 70
6162: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6163: LD_ADDR_VAR 0 11
6167: PUSH
6168: LD_VAR 0 2
6172: PPUSH
6173: LD_INT 22
6175: PUSH
6176: LD_VAR 0 1
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 21
6187: PUSH
6188: LD_INT 1
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 3
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 3
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: LD_INT 24
6217: PUSH
6218: LD_INT 1000
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL_OW 70
6239: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6240: LD_VAR 0 10
6244: NOT
6245: PUSH
6246: LD_VAR 0 11
6250: NOT
6251: AND
6252: PUSH
6253: LD_VAR 0 6
6257: NOT
6258: AND
6259: IFFALSE 6263
// exit ;
6261: GO 6497
// if damageUnits > 0 and sci_list > 0 then
6263: LD_VAR 0 10
6267: PUSH
6268: LD_INT 0
6270: GREATER
6271: PUSH
6272: LD_VAR 0 6
6276: PUSH
6277: LD_INT 0
6279: GREATER
6280: AND
6281: IFFALSE 6297
// ComMoveToArea ( damageUnits , healArea ) ;
6283: LD_VAR 0 10
6287: PPUSH
6288: LD_VAR 0 2
6292: PPUSH
6293: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6297: LD_VAR 0 11
6301: PUSH
6302: LD_INT 0
6304: GREATER
6305: PUSH
6306: LD_VAR 0 6
6310: PUSH
6311: LD_INT 0
6313: GREATER
6314: AND
6315: IFFALSE 6326
// ComExitBuilding ( sci_list ) ;
6317: LD_VAR 0 6
6321: PPUSH
6322: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6326: LD_VAR 0 11
6330: PUSH
6331: LD_INT 0
6333: GREATER
6334: PUSH
6335: LD_VAR 0 7
6339: PUSH
6340: LD_INT 0
6342: GREATER
6343: AND
6344: IFFALSE 6364
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6346: LD_VAR 0 7
6350: PPUSH
6351: LD_VAR 0 11
6355: PUSH
6356: LD_INT 1
6358: ARRAY
6359: PPUSH
6360: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6364: LD_VAR 0 10
6368: PUSH
6369: LD_INT 0
6371: EQUAL
6372: PUSH
6373: LD_VAR 0 11
6377: PUSH
6378: LD_INT 0
6380: EQUAL
6381: AND
6382: PUSH
6383: LD_VAR 0 7
6387: PUSH
6388: LD_INT 0
6390: GREATER
6391: AND
6392: IFFALSE 6497
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6394: LD_ADDR_VAR 0 12
6398: PUSH
6399: LD_INT 22
6401: PUSH
6402: LD_VAR 0 1
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 21
6413: PUSH
6414: LD_INT 3
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 30
6423: PUSH
6424: LD_INT 8
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: PPUSH
6436: CALL_OW 69
6440: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6441: LD_ADDR_VAR 0 13
6445: PUSH
6446: LD_INT 1
6448: PPUSH
6449: LD_VAR 0 12
6453: PPUSH
6454: CALL_OW 12
6458: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6459: LD_VAR 0 7
6463: PPUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 60
6469: PUSH
6470: EMPTY
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 72
6481: PPUSH
6482: LD_VAR 0 12
6486: PUSH
6487: LD_VAR 0 13
6491: ARRAY
6492: PPUSH
6493: CALL_OW 120
// end ; end ;
6497: LD_VAR 0 5
6501: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6502: LD_INT 0
6504: PPUSH
6505: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6506: LD_INT 22
6508: PUSH
6509: LD_VAR 0 1
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: LD_INT 21
6520: PUSH
6521: LD_INT 2
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 69
6536: PUSH
6537: LD_VAR 0 3
6541: LESSEQUAL
6542: IFFALSE 6609
// for i = 1 to vehCount do
6544: LD_ADDR_VAR 0 9
6548: PUSH
6549: DOUBLE
6550: LD_INT 1
6552: DEC
6553: ST_TO_ADDR
6554: LD_VAR 0 3
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6607
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6562: LD_VAR 0 2
6566: PPUSH
6567: LD_VAR 0 7
6571: PPUSH
6572: LD_VAR 0 5
6576: PPUSH
6577: LD_VAR 0 6
6581: PPUSH
6582: LD_VAR 0 4
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_VAR 0 4
6594: PPUSH
6595: CALL_OW 12
6599: ARRAY
6600: PPUSH
6601: CALL_OW 185
6605: GO 6559
6607: POP
6608: POP
// end ;
6609: LD_VAR 0 8
6613: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6614: LD_INT 0
6616: PPUSH
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
6621: PPUSH
6622: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6623: LD_ADDR_VAR 0 8
6627: PUSH
6628: LD_INT 22
6630: PUSH
6631: LD_VAR 0 1
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: LD_INT 21
6642: PUSH
6643: LD_INT 2
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PUSH
6650: LD_INT 24
6652: PUSH
6653: LD_INT 650
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6670: LD_INT 22
6672: PUSH
6673: LD_VAR 0 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 21
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 24
6694: PUSH
6695: LD_INT 1000
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 69
6711: PUSH
6712: LD_INT 3
6714: PUSH
6715: LD_INT 4
6717: PUSH
6718: LD_INT 5
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_OWVAR 67
6730: ARRAY
6731: GREATEREQUAL
6732: IFFALSE 7189
// repeat wait ( 0 0$1 ) ;
6734: LD_INT 35
6736: PPUSH
6737: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6741: LD_ADDR_VAR 0 8
6745: PUSH
6746: LD_INT 22
6748: PUSH
6749: LD_VAR 0 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 21
6760: PUSH
6761: LD_INT 2
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 24
6770: PUSH
6771: LD_INT 650
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: PPUSH
6783: CALL_OW 69
6787: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6788: LD_INT 22
6790: PUSH
6791: LD_VAR 0 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 95
6802: PUSH
6803: LD_VAR 0 2
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: NOT
6821: PUSH
6822: LD_VAR 0 11
6826: PUSH
6827: LD_INT 0
6829: EQUAL
6830: AND
6831: IFFALSE 6886
// for i := 1 to wayX do
6833: LD_ADDR_VAR 0 6
6837: PUSH
6838: DOUBLE
6839: LD_INT 1
6841: DEC
6842: ST_TO_ADDR
6843: LD_VAR 0 3
6847: PUSH
6848: FOR_TO
6849: IFFALSE 6884
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6851: LD_VAR 0 8
6855: PPUSH
6856: LD_VAR 0 3
6860: PUSH
6861: LD_VAR 0 6
6865: ARRAY
6866: PPUSH
6867: LD_VAR 0 4
6871: PUSH
6872: LD_VAR 0 6
6876: ARRAY
6877: PPUSH
6878: CALL_OW 174
6882: GO 6848
6884: POP
6885: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6886: LD_INT 22
6888: PUSH
6889: LD_VAR 0 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 95
6900: PUSH
6901: LD_VAR 0 2
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PPUSH
6914: CALL_OW 69
6918: IFFALSE 7142
// begin seeEnemy = 1 ;
6920: LD_ADDR_VAR 0 11
6924: PUSH
6925: LD_INT 1
6927: ST_TO_ADDR
// for j in vehiclesOK do
6928: LD_ADDR_VAR 0 7
6932: PUSH
6933: LD_VAR 0 8
6937: PUSH
6938: FOR_IN
6939: IFFALSE 7140
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6941: LD_ADDR_VAR 0 9
6945: PUSH
6946: LD_INT 81
6948: PUSH
6949: LD_VAR 0 1
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 101
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 69
6976: PPUSH
6977: LD_VAR 0 7
6981: PPUSH
6982: CALL_OW 74
6986: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
6987: LD_ADDR_VAR 0 10
6991: PUSH
6992: LD_INT 81
6994: PUSH
6995: LD_VAR 0 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 101
7006: PUSH
7007: LD_INT 1
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: LD_INT 59
7019: PUSH
7020: EMPTY
7021: LIST
7022: PUSH
7023: LD_INT 21
7025: PUSH
7026: LD_INT 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 21
7035: PUSH
7036: LD_INT 2
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: PPUSH
7057: CALL_OW 69
7061: PPUSH
7062: LD_VAR 0 7
7066: PPUSH
7067: CALL_OW 74
7071: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7072: LD_VAR 0 7
7076: PPUSH
7077: LD_VAR 0 9
7081: PPUSH
7082: CALL_OW 296
7086: PUSH
7087: LD_INT 8
7089: PLUS
7090: PUSH
7091: LD_VAR 0 7
7095: PPUSH
7096: LD_VAR 0 10
7100: PPUSH
7101: CALL_OW 296
7105: LESS
7106: IFFALSE 7124
// ComAttackUnit ( j , target1 ) else
7108: LD_VAR 0 7
7112: PPUSH
7113: LD_VAR 0 9
7117: PPUSH
7118: CALL_OW 115
7122: GO 7138
// ComAttackUnit ( j , target2 ) ;
7124: LD_VAR 0 7
7128: PPUSH
7129: LD_VAR 0 10
7133: PPUSH
7134: CALL_OW 115
// end ;
7138: GO 6938
7140: POP
7141: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7142: LD_INT 22
7144: PUSH
7145: LD_VAR 0 1
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 21
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 24
7166: PUSH
7167: LD_INT 1000
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: PPUSH
7179: CALL_OW 69
7183: PUSH
7184: LD_INT 0
7186: EQUAL
7187: IFFALSE 6734
// seeEnemy = 0 ;
7189: LD_ADDR_VAR 0 11
7193: PUSH
7194: LD_INT 0
7196: ST_TO_ADDR
// end ;
7197: LD_VAR 0 5
7201: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7202: LD_INT 0
7204: PPUSH
7205: PPUSH
7206: PPUSH
7207: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7208: LD_ADDR_VAR 0 8
7212: PUSH
7213: LD_INT 22
7215: PUSH
7216: LD_VAR 0 1
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 21
7227: PUSH
7228: LD_INT 2
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: LD_INT 24
7240: PUSH
7241: LD_INT 650
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 69
7261: ST_TO_ADDR
// if damageVehicles > 0 then
7262: LD_VAR 0 8
7266: PUSH
7267: LD_INT 0
7269: GREATER
7270: IFFALSE 7291
// ComMoveXY ( damageVehicles , repX , repY ) ;
7272: LD_VAR 0 8
7276: PPUSH
7277: LD_VAR 0 3
7281: PPUSH
7282: LD_VAR 0 4
7286: PPUSH
7287: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7291: LD_VAR 0 8
7295: PPUSH
7296: LD_INT 95
7298: PUSH
7299: LD_VAR 0 2
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 3
7310: PUSH
7311: LD_INT 58
7313: PUSH
7314: EMPTY
7315: LIST
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 72
7329: PUSH
7330: LD_INT 0
7332: GREATER
7333: IFFALSE 7400
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7335: LD_ADDR_VAR 0 6
7339: PUSH
7340: LD_VAR 0 8
7344: PPUSH
7345: LD_INT 95
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 3
7359: PUSH
7360: LD_INT 58
7362: PUSH
7363: EMPTY
7364: LIST
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 72
7378: PUSH
7379: FOR_IN
7380: IFFALSE 7398
// ComExitVehicle ( UnitsInside ( i ) ) ;
7382: LD_VAR 0 6
7386: PPUSH
7387: CALL_OW 313
7391: PPUSH
7392: CALL_OW 121
7396: GO 7379
7398: POP
7399: POP
// end ;
7400: LD_VAR 0 5
7404: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
7415: PPUSH
7416: PPUSH
7417: PPUSH
// for i = 1 to medicCount do
7418: LD_ADDR_VAR 0 14
7422: PUSH
7423: DOUBLE
7424: LD_INT 1
7426: DEC
7427: ST_TO_ADDR
7428: LD_VAR 0 7
7432: PUSH
7433: FOR_TO
7434: IFFALSE 7516
// begin uc_side = side ;
7436: LD_ADDR_OWVAR 20
7440: PUSH
7441: LD_VAR 0 1
7445: ST_TO_ADDR
// uc_nation = nation ;
7446: LD_ADDR_OWVAR 21
7450: PUSH
7451: LD_VAR 0 2
7455: ST_TO_ADDR
// hc_name =  ;
7456: LD_ADDR_OWVAR 26
7460: PUSH
7461: LD_STRING 
7463: ST_TO_ADDR
// hc_gallery =  ;
7464: LD_ADDR_OWVAR 33
7468: PUSH
7469: LD_STRING 
7471: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7472: LD_INT 0
7474: PPUSH
7475: LD_INT 4
7477: PPUSH
7478: LD_VAR 0 8
7482: PPUSH
7483: CALL_OW 380
// un = CreateHuman ;
7487: LD_ADDR_VAR 0 16
7491: PUSH
7492: CALL_OW 44
7496: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7497: LD_VAR 0 16
7501: PPUSH
7502: LD_VAR 0 9
7506: PPUSH
7507: LD_INT 0
7509: PPUSH
7510: CALL_OW 49
// end ;
7514: GO 7433
7516: POP
7517: POP
// for i = 1 to soldierCount do
7518: LD_ADDR_VAR 0 14
7522: PUSH
7523: DOUBLE
7524: LD_INT 1
7526: DEC
7527: ST_TO_ADDR
7528: LD_VAR 0 3
7532: PUSH
7533: FOR_TO
7534: IFFALSE 7616
// begin uc_side = side ;
7536: LD_ADDR_OWVAR 20
7540: PUSH
7541: LD_VAR 0 1
7545: ST_TO_ADDR
// uc_nation = nation ;
7546: LD_ADDR_OWVAR 21
7550: PUSH
7551: LD_VAR 0 2
7555: ST_TO_ADDR
// hc_name =  ;
7556: LD_ADDR_OWVAR 26
7560: PUSH
7561: LD_STRING 
7563: ST_TO_ADDR
// hc_gallery =  ;
7564: LD_ADDR_OWVAR 33
7568: PUSH
7569: LD_STRING 
7571: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7572: LD_INT 0
7574: PPUSH
7575: LD_INT 1
7577: PPUSH
7578: LD_VAR 0 8
7582: PPUSH
7583: CALL_OW 380
// un = CreateHuman ;
7587: LD_ADDR_VAR 0 16
7591: PUSH
7592: CALL_OW 44
7596: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7597: LD_VAR 0 16
7601: PPUSH
7602: LD_VAR 0 9
7606: PPUSH
7607: LD_INT 0
7609: PPUSH
7610: CALL_OW 49
// end ;
7614: GO 7533
7616: POP
7617: POP
// for i = 1 to sniperCount do
7618: LD_ADDR_VAR 0 14
7622: PUSH
7623: DOUBLE
7624: LD_INT 1
7626: DEC
7627: ST_TO_ADDR
7628: LD_VAR 0 4
7632: PUSH
7633: FOR_TO
7634: IFFALSE 7716
// begin uc_side = side ;
7636: LD_ADDR_OWVAR 20
7640: PUSH
7641: LD_VAR 0 1
7645: ST_TO_ADDR
// uc_nation = nation ;
7646: LD_ADDR_OWVAR 21
7650: PUSH
7651: LD_VAR 0 2
7655: ST_TO_ADDR
// hc_name =  ;
7656: LD_ADDR_OWVAR 26
7660: PUSH
7661: LD_STRING 
7663: ST_TO_ADDR
// hc_gallery =  ;
7664: LD_ADDR_OWVAR 33
7668: PUSH
7669: LD_STRING 
7671: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7672: LD_INT 0
7674: PPUSH
7675: LD_INT 5
7677: PPUSH
7678: LD_VAR 0 8
7682: PPUSH
7683: CALL_OW 380
// un = CreateHuman ;
7687: LD_ADDR_VAR 0 16
7691: PUSH
7692: CALL_OW 44
7696: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7697: LD_VAR 0 16
7701: PPUSH
7702: LD_VAR 0 9
7706: PPUSH
7707: LD_INT 0
7709: PPUSH
7710: CALL_OW 49
// end ;
7714: GO 7633
7716: POP
7717: POP
// for i = 1 to bazookCount do
7718: LD_ADDR_VAR 0 14
7722: PUSH
7723: DOUBLE
7724: LD_INT 1
7726: DEC
7727: ST_TO_ADDR
7728: LD_VAR 0 5
7732: PUSH
7733: FOR_TO
7734: IFFALSE 7816
// begin uc_side = side ;
7736: LD_ADDR_OWVAR 20
7740: PUSH
7741: LD_VAR 0 1
7745: ST_TO_ADDR
// uc_nation = nation ;
7746: LD_ADDR_OWVAR 21
7750: PUSH
7751: LD_VAR 0 2
7755: ST_TO_ADDR
// hc_name =  ;
7756: LD_ADDR_OWVAR 26
7760: PUSH
7761: LD_STRING 
7763: ST_TO_ADDR
// hc_gallery =  ;
7764: LD_ADDR_OWVAR 33
7768: PUSH
7769: LD_STRING 
7771: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7772: LD_INT 0
7774: PPUSH
7775: LD_INT 9
7777: PPUSH
7778: LD_VAR 0 8
7782: PPUSH
7783: CALL_OW 380
// un = CreateHuman ;
7787: LD_ADDR_VAR 0 16
7791: PUSH
7792: CALL_OW 44
7796: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7797: LD_VAR 0 16
7801: PPUSH
7802: LD_VAR 0 9
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL_OW 49
// end ;
7814: GO 7733
7816: POP
7817: POP
// for i = 1 to mortalCount do
7818: LD_ADDR_VAR 0 14
7822: PUSH
7823: DOUBLE
7824: LD_INT 1
7826: DEC
7827: ST_TO_ADDR
7828: LD_VAR 0 6
7832: PUSH
7833: FOR_TO
7834: IFFALSE 7916
// begin uc_side = side ;
7836: LD_ADDR_OWVAR 20
7840: PUSH
7841: LD_VAR 0 1
7845: ST_TO_ADDR
// uc_nation = nation ;
7846: LD_ADDR_OWVAR 21
7850: PUSH
7851: LD_VAR 0 2
7855: ST_TO_ADDR
// hc_name =  ;
7856: LD_ADDR_OWVAR 26
7860: PUSH
7861: LD_STRING 
7863: ST_TO_ADDR
// hc_gallery =  ;
7864: LD_ADDR_OWVAR 33
7868: PUSH
7869: LD_STRING 
7871: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7872: LD_INT 0
7874: PPUSH
7875: LD_INT 8
7877: PPUSH
7878: LD_VAR 0 8
7882: PPUSH
7883: CALL_OW 380
// un = CreateHuman ;
7887: LD_ADDR_VAR 0 16
7891: PUSH
7892: CALL_OW 44
7896: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7897: LD_VAR 0 16
7901: PPUSH
7902: LD_VAR 0 9
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 49
// end ;
7914: GO 7833
7916: POP
7917: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7918: LD_ADDR_VAR 0 19
7922: PUSH
7923: LD_INT 22
7925: PUSH
7926: LD_VAR 0 1
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 2
7937: PUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: LD_INT 25
7950: PUSH
7951: LD_INT 5
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PUSH
7958: LD_INT 25
7960: PUSH
7961: LD_INT 8
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 25
7970: PUSH
7971: LD_INT 9
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PPUSH
7989: CALL_OW 69
7993: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7994: LD_ADDR_VAR 0 18
7998: PUSH
7999: LD_INT 22
8001: PUSH
8002: LD_VAR 0 1
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PUSH
8011: LD_INT 25
8013: PUSH
8014: LD_INT 4
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PPUSH
8025: CALL_OW 69
8029: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8030: LD_VAR 0 18
8034: PPUSH
8035: LD_VAR 0 10
8039: PPUSH
8040: CALL_OW 113
// if strategy = 1 then
8044: LD_VAR 0 12
8048: PUSH
8049: LD_INT 1
8051: EQUAL
8052: IFFALSE 8568
// begin repeat wait ( 0 0$3 ) ;
8054: LD_INT 105
8056: PPUSH
8057: CALL_OW 67
// for i in soldiersOK_list do
8061: LD_ADDR_VAR 0 14
8065: PUSH
8066: LD_VAR 0 19
8070: PUSH
8071: FOR_IN
8072: IFFALSE 8136
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8074: LD_VAR 0 14
8078: PPUSH
8079: LD_INT 91
8081: PPUSH
8082: LD_INT 63
8084: PPUSH
8085: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8089: LD_VAR 0 14
8093: PPUSH
8094: LD_INT 101
8096: PPUSH
8097: LD_INT 53
8099: PPUSH
8100: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8104: LD_VAR 0 14
8108: PPUSH
8109: LD_INT 75
8111: PPUSH
8112: LD_INT 23
8114: PPUSH
8115: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8119: LD_VAR 0 14
8123: PPUSH
8124: LD_INT 78
8126: PPUSH
8127: LD_INT 8
8129: PPUSH
8130: CALL_OW 174
// end ;
8134: GO 8071
8136: POP
8137: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8138: LD_INT 15
8140: PPUSH
8141: LD_INT 22
8143: PUSH
8144: LD_VAR 0 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PPUSH
8153: CALL_OW 70
8157: PUSH
8158: LD_INT 2
8160: GREATER
8161: IFFALSE 8054
// repeat wait ( 0 0$1 ) ;
8163: LD_INT 35
8165: PPUSH
8166: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8170: LD_ADDR_VAR 0 17
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_VAR 0 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 24
8195: PUSH
8196: LD_INT 550
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 24
8209: PUSH
8210: LD_INT 250
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 69
8230: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8231: LD_ADDR_VAR 0 19
8235: PUSH
8236: LD_INT 22
8238: PUSH
8239: LD_VAR 0 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: LD_INT 25
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 5
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 25
8273: PUSH
8274: LD_INT 8
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 25
8283: PUSH
8284: LD_INT 9
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 24
8300: PUSH
8301: LD_INT 1000
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 69
8317: ST_TO_ADDR
// if medicCount > 0 then
8318: LD_VAR 0 7
8322: PUSH
8323: LD_INT 0
8325: GREATER
8326: IFFALSE 8370
// begin if damageUnit_list > 0 then
8328: LD_VAR 0 17
8332: PUSH
8333: LD_INT 0
8335: GREATER
8336: IFFALSE 8370
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8338: LD_VAR 0 17
8342: PPUSH
8343: LD_VAR 0 10
8347: PPUSH
8348: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8352: LD_VAR 0 7
8356: PPUSH
8357: LD_VAR 0 17
8361: PUSH
8362: LD_INT 1
8364: ARRAY
8365: PPUSH
8366: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8370: LD_ADDR_VAR 0 14
8374: PUSH
8375: LD_VAR 0 19
8379: PUSH
8380: FOR_IN
8381: IFFALSE 8557
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8383: LD_ADDR_VAR 0 22
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_VAR 0 11
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PPUSH
8400: CALL_OW 69
8404: PPUSH
8405: LD_VAR 0 14
8409: PPUSH
8410: CALL_OW 74
8414: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8415: LD_ADDR_VAR 0 23
8419: PUSH
8420: LD_INT 22
8422: PUSH
8423: LD_VAR 0 11
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 2
8434: PUSH
8435: LD_INT 59
8437: PUSH
8438: EMPTY
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 21
8453: PUSH
8454: LD_INT 2
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: PPUSH
8474: CALL_OW 69
8478: PPUSH
8479: LD_VAR 0 14
8483: PPUSH
8484: CALL_OW 74
8488: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8489: LD_VAR 0 14
8493: PPUSH
8494: LD_VAR 0 22
8498: PPUSH
8499: CALL_OW 296
8503: PUSH
8504: LD_INT 8
8506: PLUS
8507: PUSH
8508: LD_VAR 0 14
8512: PPUSH
8513: LD_VAR 0 23
8517: PPUSH
8518: CALL_OW 296
8522: LESS
8523: IFFALSE 8541
// begin ComAttackUnit ( i , target1 ) ;
8525: LD_VAR 0 14
8529: PPUSH
8530: LD_VAR 0 22
8534: PPUSH
8535: CALL_OW 115
// end else
8539: GO 8555
// begin ComAttackUnit ( i , target2 ) ;
8541: LD_VAR 0 14
8545: PPUSH
8546: LD_VAR 0 23
8550: PPUSH
8551: CALL_OW 115
// end ; end ;
8555: GO 8380
8557: POP
8558: POP
// until soldiersOK_list = [ ] ;
8559: LD_VAR 0 19
8563: PUSH
8564: EMPTY
8565: EQUAL
8566: IFFALSE 8163
// end ; if strategy = 2 then
8568: LD_VAR 0 12
8572: PUSH
8573: LD_INT 2
8575: EQUAL
8576: IFFALSE 9062
// begin repeat wait ( 0 0$1 ) ;
8578: LD_INT 35
8580: PPUSH
8581: CALL_OW 67
// for i in soldiersOK_list do
8585: LD_ADDR_VAR 0 14
8589: PUSH
8590: LD_VAR 0 19
8594: PUSH
8595: FOR_IN
8596: IFFALSE 8630
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8598: LD_VAR 0 14
8602: PPUSH
8603: LD_INT 91
8605: PPUSH
8606: LD_INT 63
8608: PPUSH
8609: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8613: LD_VAR 0 14
8617: PPUSH
8618: LD_INT 75
8620: PPUSH
8621: LD_INT 33
8623: PPUSH
8624: CALL_OW 174
// end ;
8628: GO 8595
8630: POP
8631: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8632: LD_INT 16
8634: PPUSH
8635: LD_INT 22
8637: PUSH
8638: LD_VAR 0 1
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PPUSH
8647: CALL_OW 70
8651: PUSH
8652: LD_INT 2
8654: GREATER
8655: IFFALSE 8578
// repeat wait ( 0 0$3 ) ;
8657: LD_INT 105
8659: PPUSH
8660: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8664: LD_ADDR_VAR 0 17
8668: PUSH
8669: LD_INT 22
8671: PUSH
8672: LD_VAR 0 1
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 1
8683: PUSH
8684: LD_INT 3
8686: PUSH
8687: LD_INT 24
8689: PUSH
8690: LD_INT 550
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 24
8703: PUSH
8704: LD_INT 250
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8725: LD_ADDR_VAR 0 19
8729: PUSH
8730: LD_INT 22
8732: PUSH
8733: LD_VAR 0 1
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: LD_INT 2
8744: PUSH
8745: LD_INT 25
8747: PUSH
8748: LD_INT 1
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 25
8757: PUSH
8758: LD_INT 5
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 25
8767: PUSH
8768: LD_INT 8
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 25
8777: PUSH
8778: LD_INT 9
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 24
8794: PUSH
8795: LD_INT 1000
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 69
8811: ST_TO_ADDR
// if medicCount > 0 then
8812: LD_VAR 0 7
8816: PUSH
8817: LD_INT 0
8819: GREATER
8820: IFFALSE 8864
// begin if damageUnit_list > 0 then
8822: LD_VAR 0 17
8826: PUSH
8827: LD_INT 0
8829: GREATER
8830: IFFALSE 8864
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8832: LD_VAR 0 17
8836: PPUSH
8837: LD_VAR 0 10
8841: PPUSH
8842: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8846: LD_VAR 0 7
8850: PPUSH
8851: LD_VAR 0 17
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8864: LD_ADDR_VAR 0 14
8868: PUSH
8869: LD_VAR 0 19
8873: PUSH
8874: FOR_IN
8875: IFFALSE 9051
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8877: LD_ADDR_VAR 0 22
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_VAR 0 11
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PPUSH
8899: LD_VAR 0 14
8903: PPUSH
8904: CALL_OW 74
8908: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8909: LD_ADDR_VAR 0 23
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_VAR 0 11
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 2
8928: PUSH
8929: LD_INT 59
8931: PUSH
8932: EMPTY
8933: LIST
8934: PUSH
8935: LD_INT 21
8937: PUSH
8938: LD_INT 1
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 21
8947: PUSH
8948: LD_INT 2
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: EMPTY
8966: LIST
8967: PPUSH
8968: CALL_OW 69
8972: PPUSH
8973: LD_VAR 0 14
8977: PPUSH
8978: CALL_OW 74
8982: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8983: LD_VAR 0 14
8987: PPUSH
8988: LD_VAR 0 22
8992: PPUSH
8993: CALL_OW 296
8997: PUSH
8998: LD_INT 8
9000: PLUS
9001: PUSH
9002: LD_VAR 0 14
9006: PPUSH
9007: LD_VAR 0 23
9011: PPUSH
9012: CALL_OW 296
9016: LESS
9017: IFFALSE 9035
// begin ComAttackUnit ( i , target1 ) ;
9019: LD_VAR 0 14
9023: PPUSH
9024: LD_VAR 0 22
9028: PPUSH
9029: CALL_OW 115
// end else
9033: GO 9049
// begin ComAttackUnit ( i , target2 ) ;
9035: LD_VAR 0 14
9039: PPUSH
9040: LD_VAR 0 23
9044: PPUSH
9045: CALL_OW 115
// end ; end ;
9049: GO 8874
9051: POP
9052: POP
// until soldiersOK_list = [ ] ;
9053: LD_VAR 0 19
9057: PUSH
9058: EMPTY
9059: EQUAL
9060: IFFALSE 8657
// end ; end ;
9062: LD_VAR 0 13
9066: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9067: LD_INT 0
9069: PPUSH
9070: PPUSH
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
9079: PPUSH
// amChassisTab = [ ] ;
9080: LD_ADDR_VAR 0 19
9084: PUSH
9085: EMPTY
9086: ST_TO_ADDR
// arChassisTab = [ ] ;
9087: LD_ADDR_VAR 0 18
9091: PUSH
9092: EMPTY
9093: ST_TO_ADDR
// ruChassisTab = [ ] ;
9094: LD_ADDR_VAR 0 17
9098: PUSH
9099: EMPTY
9100: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9101: LD_INT 35
9103: PPUSH
9104: CALL_OW 67
// if nation = 1 then
9108: LD_VAR 0 5
9112: PUSH
9113: LD_INT 1
9115: EQUAL
9116: IFFALSE 9607
// begin uc_side = side ;
9118: LD_ADDR_OWVAR 20
9122: PUSH
9123: LD_VAR 0 2
9127: ST_TO_ADDR
// uc_nation = nation ;
9128: LD_ADDR_OWVAR 21
9132: PUSH
9133: LD_VAR 0 5
9137: ST_TO_ADDR
// vc_engine = vehengine ;
9138: LD_ADDR_OWVAR 39
9142: PUSH
9143: LD_VAR 0 6
9147: ST_TO_ADDR
// vc_control = vehcontrol ;
9148: LD_ADDR_OWVAR 38
9152: PUSH
9153: LD_VAR 0 7
9157: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9158: LD_ADDR_OWVAR 40
9162: PUSH
9163: LD_VAR 0 10
9167: PUSH
9168: LD_INT 1
9170: PPUSH
9171: LD_VAR 0 10
9175: PPUSH
9176: CALL_OW 12
9180: ARRAY
9181: ST_TO_ADDR
// for j = 1 to AMWeapon do
9182: LD_ADDR_VAR 0 14
9186: PUSH
9187: DOUBLE
9188: LD_INT 1
9190: DEC
9191: ST_TO_ADDR
9192: LD_VAR 0 10
9196: PUSH
9197: FOR_TO
9198: IFFALSE 9499
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9200: LD_VAR 0 10
9204: PUSH
9205: LD_VAR 0 14
9209: ARRAY
9210: PUSH
9211: LD_INT 2
9213: EQUAL
9214: PUSH
9215: LD_VAR 0 10
9219: PUSH
9220: LD_VAR 0 14
9224: ARRAY
9225: PUSH
9226: LD_INT 3
9228: EQUAL
9229: OR
9230: IFFALSE 9283
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9232: LD_ADDR_VAR 0 19
9236: PUSH
9237: LD_INT 1
9239: PUSH
9240: LD_INT 2
9242: PUSH
9243: LD_INT 3
9245: PUSH
9246: LD_INT 4
9248: PUSH
9249: LD_INT 5
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9259: LD_ADDR_OWVAR 37
9263: PUSH
9264: LD_VAR 0 19
9268: PUSH
9269: LD_INT 1
9271: PPUSH
9272: LD_VAR 0 19
9276: PPUSH
9277: CALL_OW 12
9281: ARRAY
9282: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9283: LD_VAR 0 10
9287: PUSH
9288: LD_VAR 0 14
9292: ARRAY
9293: PUSH
9294: LD_INT 4
9296: EQUAL
9297: PUSH
9298: LD_VAR 0 10
9302: PUSH
9303: LD_VAR 0 14
9307: ARRAY
9308: PUSH
9309: LD_INT 5
9311: EQUAL
9312: OR
9313: PUSH
9314: LD_VAR 0 10
9318: PUSH
9319: LD_VAR 0 14
9323: ARRAY
9324: PUSH
9325: LD_INT 9
9327: EQUAL
9328: OR
9329: PUSH
9330: LD_VAR 0 10
9334: PUSH
9335: LD_VAR 0 14
9339: ARRAY
9340: PUSH
9341: LD_INT 11
9343: EQUAL
9344: OR
9345: PUSH
9346: LD_VAR 0 10
9350: PUSH
9351: LD_VAR 0 14
9355: ARRAY
9356: PUSH
9357: LD_INT 7
9359: EQUAL
9360: OR
9361: IFFALSE 9410
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9363: LD_ADDR_VAR 0 19
9367: PUSH
9368: LD_INT 2
9370: PUSH
9371: LD_INT 3
9373: PUSH
9374: LD_INT 4
9376: PUSH
9377: LD_INT 5
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9386: LD_ADDR_OWVAR 37
9390: PUSH
9391: LD_VAR 0 19
9395: PUSH
9396: LD_INT 1
9398: PPUSH
9399: LD_VAR 0 19
9403: PPUSH
9404: CALL_OW 12
9408: ARRAY
9409: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9410: LD_VAR 0 10
9414: PUSH
9415: LD_VAR 0 14
9419: ARRAY
9420: PUSH
9421: LD_INT 8
9423: EQUAL
9424: PUSH
9425: LD_VAR 0 10
9429: PUSH
9430: LD_VAR 0 14
9434: ARRAY
9435: PUSH
9436: LD_INT 6
9438: EQUAL
9439: OR
9440: PUSH
9441: LD_VAR 0 10
9445: PUSH
9446: LD_VAR 0 14
9450: ARRAY
9451: PUSH
9452: LD_INT 10
9454: EQUAL
9455: OR
9456: IFFALSE 9497
// begin amChassisTab = [ 4 , 5 ] ;
9458: LD_ADDR_VAR 0 19
9462: PUSH
9463: LD_INT 4
9465: PUSH
9466: LD_INT 5
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9473: LD_ADDR_OWVAR 37
9477: PUSH
9478: LD_VAR 0 19
9482: PUSH
9483: LD_INT 1
9485: PPUSH
9486: LD_VAR 0 19
9490: PPUSH
9491: CALL_OW 12
9495: ARRAY
9496: ST_TO_ADDR
// end ; end ;
9497: GO 9197
9499: POP
9500: POP
// veh = CreateVehicle ;
9501: LD_ADDR_VAR 0 16
9505: PUSH
9506: CALL_OW 45
9510: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9511: LD_VAR 0 16
9515: PPUSH
9516: LD_VAR 0 1
9520: PPUSH
9521: LD_INT 0
9523: PPUSH
9524: CALL_OW 49
// if vehControl = 1 then
9528: LD_VAR 0 7
9532: PUSH
9533: LD_INT 1
9535: EQUAL
9536: IFFALSE 9593
// begin hc_gallery =  ;
9538: LD_ADDR_OWVAR 33
9542: PUSH
9543: LD_STRING 
9545: ST_TO_ADDR
// hc_name =  ;
9546: LD_ADDR_OWVAR 26
9550: PUSH
9551: LD_STRING 
9553: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9554: LD_INT 0
9556: PPUSH
9557: LD_INT 3
9559: PPUSH
9560: LD_VAR 0 4
9564: PPUSH
9565: CALL_OW 380
// un = CreateHuman ;
9569: LD_ADDR_VAR 0 15
9573: PUSH
9574: CALL_OW 44
9578: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9579: LD_VAR 0 15
9583: PPUSH
9584: LD_VAR 0 16
9588: PPUSH
9589: CALL_OW 52
// end ; i = i + 1 ;
9593: LD_ADDR_VAR 0 13
9597: PUSH
9598: LD_VAR 0 13
9602: PUSH
9603: LD_INT 1
9605: PLUS
9606: ST_TO_ADDR
// end ; if nation = 2 then
9607: LD_VAR 0 5
9611: PUSH
9612: LD_INT 2
9614: EQUAL
9615: IFFALSE 10039
// begin uc_side = side ;
9617: LD_ADDR_OWVAR 20
9621: PUSH
9622: LD_VAR 0 2
9626: ST_TO_ADDR
// uc_nation = nation ;
9627: LD_ADDR_OWVAR 21
9631: PUSH
9632: LD_VAR 0 5
9636: ST_TO_ADDR
// vc_engine = vehengine ;
9637: LD_ADDR_OWVAR 39
9641: PUSH
9642: LD_VAR 0 6
9646: ST_TO_ADDR
// vc_control = vehcontrol ;
9647: LD_ADDR_OWVAR 38
9651: PUSH
9652: LD_VAR 0 7
9656: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9657: LD_ADDR_OWVAR 40
9661: PUSH
9662: LD_VAR 0 9
9666: PUSH
9667: LD_INT 1
9669: PPUSH
9670: LD_VAR 0 9
9674: PPUSH
9675: CALL_OW 12
9679: ARRAY
9680: ST_TO_ADDR
// for j = 1 to ARWeapons do
9681: LD_ADDR_VAR 0 14
9685: PUSH
9686: DOUBLE
9687: LD_INT 1
9689: DEC
9690: ST_TO_ADDR
9691: LD_VAR 0 9
9695: PUSH
9696: FOR_TO
9697: IFFALSE 9931
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9699: LD_VAR 0 9
9703: PUSH
9704: LD_VAR 0 14
9708: ARRAY
9709: PUSH
9710: LD_INT 24
9712: EQUAL
9713: PUSH
9714: LD_VAR 0 9
9718: PUSH
9719: LD_VAR 0 14
9723: ARRAY
9724: PUSH
9725: LD_INT 22
9727: EQUAL
9728: OR
9729: PUSH
9730: LD_VAR 0 9
9734: PUSH
9735: LD_VAR 0 14
9739: ARRAY
9740: PUSH
9741: LD_INT 23
9743: EQUAL
9744: OR
9745: PUSH
9746: LD_VAR 0 9
9750: PUSH
9751: LD_VAR 0 14
9755: ARRAY
9756: PUSH
9757: LD_INT 30
9759: EQUAL
9760: OR
9761: IFFALSE 9810
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9763: LD_ADDR_VAR 0 18
9767: PUSH
9768: LD_INT 11
9770: PUSH
9771: LD_INT 12
9773: PUSH
9774: LD_INT 13
9776: PUSH
9777: LD_INT 14
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9786: LD_ADDR_OWVAR 37
9790: PUSH
9791: LD_VAR 0 18
9795: PUSH
9796: LD_INT 1
9798: PPUSH
9799: LD_VAR 0 18
9803: PPUSH
9804: CALL_OW 12
9808: ARRAY
9809: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9810: LD_VAR 0 9
9814: PUSH
9815: LD_VAR 0 14
9819: ARRAY
9820: PUSH
9821: LD_INT 29
9823: EQUAL
9824: PUSH
9825: LD_VAR 0 9
9829: PUSH
9830: LD_VAR 0 14
9834: ARRAY
9835: PUSH
9836: LD_INT 28
9838: EQUAL
9839: OR
9840: PUSH
9841: LD_VAR 0 9
9845: PUSH
9846: LD_VAR 0 14
9850: ARRAY
9851: PUSH
9852: LD_INT 27
9854: EQUAL
9855: OR
9856: PUSH
9857: LD_VAR 0 9
9861: PUSH
9862: LD_VAR 0 14
9866: ARRAY
9867: PUSH
9868: LD_INT 26
9870: EQUAL
9871: OR
9872: PUSH
9873: LD_VAR 0 9
9877: PUSH
9878: LD_VAR 0 14
9882: ARRAY
9883: PUSH
9884: LD_INT 25
9886: EQUAL
9887: OR
9888: IFFALSE 9929
// begin arChassisTab = [ 13 , 14 ] ;
9890: LD_ADDR_VAR 0 18
9894: PUSH
9895: LD_INT 13
9897: PUSH
9898: LD_INT 14
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9905: LD_ADDR_OWVAR 37
9909: PUSH
9910: LD_VAR 0 18
9914: PUSH
9915: LD_INT 1
9917: PPUSH
9918: LD_VAR 0 18
9922: PPUSH
9923: CALL_OW 12
9927: ARRAY
9928: ST_TO_ADDR
// end ; end ;
9929: GO 9696
9931: POP
9932: POP
// veh = CreateVehicle ;
9933: LD_ADDR_VAR 0 16
9937: PUSH
9938: CALL_OW 45
9942: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9943: LD_VAR 0 16
9947: PPUSH
9948: LD_VAR 0 1
9952: PPUSH
9953: LD_INT 0
9955: PPUSH
9956: CALL_OW 49
// if vehcontrol = 1 then
9960: LD_VAR 0 7
9964: PUSH
9965: LD_INT 1
9967: EQUAL
9968: IFFALSE 10025
// begin hc_gallery =  ;
9970: LD_ADDR_OWVAR 33
9974: PUSH
9975: LD_STRING 
9977: ST_TO_ADDR
// hc_name =  ;
9978: LD_ADDR_OWVAR 26
9982: PUSH
9983: LD_STRING 
9985: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9986: LD_INT 0
9988: PPUSH
9989: LD_INT 3
9991: PPUSH
9992: LD_VAR 0 4
9996: PPUSH
9997: CALL_OW 380
// un = CreateHuman ;
10001: LD_ADDR_VAR 0 15
10005: PUSH
10006: CALL_OW 44
10010: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10011: LD_VAR 0 15
10015: PPUSH
10016: LD_VAR 0 16
10020: PPUSH
10021: CALL_OW 52
// end ; i = i + 1 ;
10025: LD_ADDR_VAR 0 13
10029: PUSH
10030: LD_VAR 0 13
10034: PUSH
10035: LD_INT 1
10037: PLUS
10038: ST_TO_ADDR
// end ; if nation = 3 then
10039: LD_VAR 0 5
10043: PUSH
10044: LD_INT 3
10046: EQUAL
10047: IFFALSE 10439
// begin uc_side = side ;
10049: LD_ADDR_OWVAR 20
10053: PUSH
10054: LD_VAR 0 2
10058: ST_TO_ADDR
// uc_nation = nation ;
10059: LD_ADDR_OWVAR 21
10063: PUSH
10064: LD_VAR 0 5
10068: ST_TO_ADDR
// vc_engine = vehengine ;
10069: LD_ADDR_OWVAR 39
10073: PUSH
10074: LD_VAR 0 6
10078: ST_TO_ADDR
// vc_control = vehcontrol ;
10079: LD_ADDR_OWVAR 38
10083: PUSH
10084: LD_VAR 0 7
10088: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10089: LD_ADDR_OWVAR 40
10093: PUSH
10094: LD_VAR 0 8
10098: PUSH
10099: LD_INT 1
10101: PPUSH
10102: LD_VAR 0 8
10106: PPUSH
10107: CALL_OW 12
10111: ARRAY
10112: ST_TO_ADDR
// for j = 1 to RuWeapons do
10113: LD_ADDR_VAR 0 14
10117: PUSH
10118: DOUBLE
10119: LD_INT 1
10121: DEC
10122: ST_TO_ADDR
10123: LD_VAR 0 8
10127: PUSH
10128: FOR_TO
10129: IFFALSE 10331
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10131: LD_VAR 0 8
10135: PUSH
10136: LD_VAR 0 14
10140: ARRAY
10141: PUSH
10142: LD_INT 42
10144: EQUAL
10145: PUSH
10146: LD_VAR 0 8
10150: PUSH
10151: LD_VAR 0 14
10155: ARRAY
10156: PUSH
10157: LD_INT 43
10159: EQUAL
10160: OR
10161: PUSH
10162: LD_VAR 0 8
10166: PUSH
10167: LD_VAR 0 14
10171: ARRAY
10172: PUSH
10173: LD_INT 44
10175: EQUAL
10176: OR
10177: PUSH
10178: LD_VAR 0 8
10182: PUSH
10183: LD_VAR 0 14
10187: ARRAY
10188: PUSH
10189: LD_INT 45
10191: EQUAL
10192: OR
10193: PUSH
10194: LD_VAR 0 8
10198: PUSH
10199: LD_VAR 0 14
10203: ARRAY
10204: PUSH
10205: LD_INT 49
10207: EQUAL
10208: OR
10209: IFFALSE 10258
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10211: LD_ADDR_VAR 0 17
10215: PUSH
10216: LD_INT 21
10218: PUSH
10219: LD_INT 22
10221: PUSH
10222: LD_INT 23
10224: PUSH
10225: LD_INT 24
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10234: LD_ADDR_OWVAR 37
10238: PUSH
10239: LD_VAR 0 17
10243: PUSH
10244: LD_INT 1
10246: PPUSH
10247: LD_VAR 0 17
10251: PPUSH
10252: CALL_OW 12
10256: ARRAY
10257: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10258: LD_VAR 0 8
10262: PUSH
10263: LD_VAR 0 14
10267: ARRAY
10268: PUSH
10269: LD_INT 46
10271: EQUAL
10272: PUSH
10273: LD_VAR 0 8
10277: PUSH
10278: LD_VAR 0 14
10282: ARRAY
10283: PUSH
10284: LD_INT 47
10286: EQUAL
10287: OR
10288: IFFALSE 10329
// begin ruChassisTab = [ 23 , 24 ] ;
10290: LD_ADDR_VAR 0 17
10294: PUSH
10295: LD_INT 23
10297: PUSH
10298: LD_INT 24
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10305: LD_ADDR_OWVAR 37
10309: PUSH
10310: LD_VAR 0 17
10314: PUSH
10315: LD_INT 1
10317: PPUSH
10318: LD_VAR 0 17
10322: PPUSH
10323: CALL_OW 12
10327: ARRAY
10328: ST_TO_ADDR
// end ; end ;
10329: GO 10128
10331: POP
10332: POP
// veh = CreateVehicle ;
10333: LD_ADDR_VAR 0 16
10337: PUSH
10338: CALL_OW 45
10342: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10343: LD_VAR 0 16
10347: PPUSH
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_INT 0
10355: PPUSH
10356: CALL_OW 49
// if vehcontrol = 1 then
10360: LD_VAR 0 7
10364: PUSH
10365: LD_INT 1
10367: EQUAL
10368: IFFALSE 10425
// begin hc_gallery =  ;
10370: LD_ADDR_OWVAR 33
10374: PUSH
10375: LD_STRING 
10377: ST_TO_ADDR
// hc_name =  ;
10378: LD_ADDR_OWVAR 26
10382: PUSH
10383: LD_STRING 
10385: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10386: LD_INT 0
10388: PPUSH
10389: LD_INT 3
10391: PPUSH
10392: LD_VAR 0 4
10396: PPUSH
10397: CALL_OW 380
// un = CreateHuman ;
10401: LD_ADDR_VAR 0 15
10405: PUSH
10406: CALL_OW 44
10410: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10411: LD_VAR 0 15
10415: PPUSH
10416: LD_VAR 0 16
10420: PPUSH
10421: CALL_OW 52
// end ; i = i + 1 ;
10425: LD_ADDR_VAR 0 13
10429: PUSH
10430: LD_VAR 0 13
10434: PUSH
10435: LD_INT 1
10437: PLUS
10438: ST_TO_ADDR
// end ; until i = vehCount ;
10439: LD_VAR 0 13
10443: PUSH
10444: LD_VAR 0 3
10448: EQUAL
10449: IFFALSE 9101
// repeat wait ( 0 0$1 ) ;
10451: LD_INT 35
10453: PPUSH
10454: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10458: LD_INT 22
10460: PUSH
10461: LD_VAR 0 2
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: LD_INT 21
10472: PUSH
10473: LD_INT 2
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PUSH
10480: LD_INT 24
10482: PUSH
10483: LD_INT 250
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: LD_INT 3
10492: PUSH
10493: LD_INT 58
10495: PUSH
10496: EMPTY
10497: LIST
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 69
10513: PUSH
10514: LD_INT 0
10516: GREATER
10517: IFFALSE 10759
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10519: LD_ADDR_VAR 0 13
10523: PUSH
10524: LD_INT 22
10526: PUSH
10527: LD_VAR 0 2
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 2
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 24
10548: PUSH
10549: LD_INT 250
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 3
10558: PUSH
10559: LD_INT 58
10561: PUSH
10562: EMPTY
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: PUSH
10580: FOR_IN
10581: IFFALSE 10757
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10583: LD_ADDR_VAR 0 21
10587: PUSH
10588: LD_INT 22
10590: PUSH
10591: LD_VAR 0 11
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 69
10604: PPUSH
10605: LD_VAR 0 13
10609: PPUSH
10610: CALL_OW 74
10614: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10615: LD_ADDR_VAR 0 22
10619: PUSH
10620: LD_INT 22
10622: PUSH
10623: LD_VAR 0 11
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 59
10637: PUSH
10638: EMPTY
10639: LIST
10640: PUSH
10641: LD_INT 21
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 21
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: EMPTY
10672: LIST
10673: PPUSH
10674: CALL_OW 69
10678: PPUSH
10679: LD_VAR 0 13
10683: PPUSH
10684: CALL_OW 74
10688: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10689: LD_VAR 0 13
10693: PPUSH
10694: LD_VAR 0 21
10698: PPUSH
10699: CALL_OW 296
10703: PUSH
10704: LD_INT 8
10706: PLUS
10707: PUSH
10708: LD_VAR 0 13
10712: PPUSH
10713: LD_VAR 0 22
10717: PPUSH
10718: CALL_OW 296
10722: LESS
10723: IFFALSE 10741
// begin ComAttackUnit ( i , target1 ) ;
10725: LD_VAR 0 13
10729: PPUSH
10730: LD_VAR 0 21
10734: PPUSH
10735: CALL_OW 115
// end else
10739: GO 10755
// begin ComAttackUnit ( i , target2 ) ;
10741: LD_VAR 0 13
10745: PPUSH
10746: LD_VAR 0 22
10750: PPUSH
10751: CALL_OW 115
// end ; end ;
10755: GO 10580
10757: POP
10758: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10759: LD_INT 22
10761: PUSH
10762: LD_VAR 0 2
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 24
10783: PUSH
10784: LD_INT 250
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 3
10793: PUSH
10794: LD_INT 58
10796: PUSH
10797: EMPTY
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PPUSH
10810: CALL_OW 69
10814: PUSH
10815: LD_INT 0
10817: EQUAL
10818: IFFALSE 10451
// end ; end_of_file
10820: LD_VAR 0 12
10824: RET
// every 1 do var i , gammaSquad , startX , startY ;
10825: GO 10827
10827: DISABLE
10828: LD_INT 0
10830: PPUSH
10831: PPUSH
10832: PPUSH
10833: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10834: LD_ADDR_VAR 0 2
10838: PUSH
10839: LD_EXP 8
10843: PUSH
10844: LD_EXP 9
10848: PUSH
10849: LD_EXP 10
10853: PUSH
10854: LD_EXP 11
10858: PUSH
10859: LD_EXP 12
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10871: LD_ADDR_VAR 0 3
10875: PUSH
10876: LD_INT 46
10878: PUSH
10879: LD_INT 45
10881: PUSH
10882: LD_INT 44
10884: PUSH
10885: LD_INT 43
10887: PUSH
10888: LD_INT 42
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10898: LD_ADDR_VAR 0 4
10902: PUSH
10903: LD_INT 14
10905: PUSH
10906: LD_INT 12
10908: PUSH
10909: LD_INT 10
10911: PUSH
10912: LD_INT 8
10914: PUSH
10915: LD_INT 6
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10925: LD_INT 32
10927: PPUSH
10928: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10932: LD_INT 32
10934: PPUSH
10935: LD_INT 51
10937: PPUSH
10938: LD_INT 26
10940: PPUSH
10941: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10945: LD_INT 32
10947: PPUSH
10948: LD_INT 53
10950: PPUSH
10951: LD_INT 23
10953: PPUSH
10954: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10958: LD_INT 32
10960: PPUSH
10961: LD_INT 52
10963: PPUSH
10964: LD_INT 19
10966: PPUSH
10967: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10971: LD_INT 35
10973: PPUSH
10974: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10978: LD_INT 32
10980: PPUSH
10981: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10985: LD_INT 32
10987: PPUSH
10988: CALL_OW 250
10992: PUSH
10993: LD_INT 52
10995: EQUAL
10996: PUSH
10997: LD_INT 32
10999: PPUSH
11000: CALL_OW 251
11004: PUSH
11005: LD_INT 19
11007: EQUAL
11008: AND
11009: IFFALSE 10971
// ComExitVehicle ( JMM ) ;
11011: LD_EXP 1
11015: PPUSH
11016: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11020: LD_EXP 7
11024: PPUSH
11025: LD_EXP 1
11029: PPUSH
11030: CALL_OW 119
// wait ( 0 0$01 ) ;
11034: LD_INT 35
11036: PPUSH
11037: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11041: LD_EXP 1
11045: PPUSH
11046: LD_INT 46
11048: PPUSH
11049: LD_INT 10
11051: PPUSH
11052: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11056: LD_EXP 1
11060: PPUSH
11061: LD_EXP 7
11065: PPUSH
11066: CALL_OW 179
// wait ( 0 0$4 ) ;
11070: LD_INT 140
11072: PPUSH
11073: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11077: LD_EXP 1
11081: PPUSH
11082: LD_STRING D1-JMM-1
11084: PPUSH
11085: CALL_OW 88
// if not dialogue_skipped then
11089: LD_OWVAR 59
11093: NOT
11094: IFFALSE 11751
// begin for i := 1 to gammaSquad do
11096: LD_ADDR_VAR 0 1
11100: PUSH
11101: DOUBLE
11102: LD_INT 1
11104: DEC
11105: ST_TO_ADDR
11106: LD_VAR 0 2
11110: PUSH
11111: FOR_TO
11112: IFFALSE 11173
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11114: LD_VAR 0 2
11118: PUSH
11119: LD_VAR 0 1
11123: ARRAY
11124: PPUSH
11125: LD_VAR 0 3
11129: PUSH
11130: LD_VAR 0 1
11134: ARRAY
11135: PPUSH
11136: LD_VAR 0 4
11140: PUSH
11141: LD_VAR 0 1
11145: ARRAY
11146: PPUSH
11147: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11151: LD_VAR 0 2
11155: PUSH
11156: LD_VAR 0 1
11160: ARRAY
11161: PPUSH
11162: LD_EXP 1
11166: PPUSH
11167: CALL_OW 179
// end ;
11171: GO 11111
11173: POP
11174: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11175: LD_EXP 4
11179: PPUSH
11180: LD_INT 41
11182: PPUSH
11183: LD_INT 4
11185: PPUSH
11186: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11190: LD_EXP 4
11194: PPUSH
11195: LD_EXP 1
11199: PPUSH
11200: CALL_OW 179
// if Lisa = false and Bobby then
11204: LD_EXP 4
11208: PUSH
11209: LD_INT 0
11211: EQUAL
11212: PUSH
11213: LD_EXP 2
11217: AND
11218: IFFALSE 11249
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11220: LD_EXP 2
11224: PPUSH
11225: LD_INT 41
11227: PPUSH
11228: LD_INT 4
11230: PPUSH
11231: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11235: LD_EXP 2
11239: PPUSH
11240: LD_EXP 1
11244: PPUSH
11245: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11249: LD_EXP 4
11253: PUSH
11254: LD_INT 0
11256: EQUAL
11257: PUSH
11258: LD_EXP 2
11262: PUSH
11263: LD_INT 0
11265: EQUAL
11266: AND
11267: PUSH
11268: LD_EXP 3
11272: AND
11273: IFFALSE 11304
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11275: LD_EXP 3
11279: PPUSH
11280: LD_INT 41
11282: PPUSH
11283: LD_INT 4
11285: PPUSH
11286: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11290: LD_EXP 3
11294: PPUSH
11295: LD_EXP 1
11299: PPUSH
11300: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11304: LD_EXP 4
11308: PUSH
11309: LD_INT 0
11311: EQUAL
11312: PUSH
11313: LD_EXP 2
11317: PUSH
11318: LD_INT 0
11320: EQUAL
11321: AND
11322: PUSH
11323: LD_EXP 3
11327: PUSH
11328: LD_INT 0
11330: EQUAL
11331: AND
11332: IFFALSE 11363
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11334: LD_EXP 6
11338: PPUSH
11339: LD_INT 41
11341: PPUSH
11342: LD_INT 4
11344: PPUSH
11345: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11349: LD_EXP 6
11353: PPUSH
11354: LD_EXP 1
11358: PPUSH
11359: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11363: LD_EXP 7
11367: PPUSH
11368: LD_STRING D1-Brown-1
11370: PPUSH
11371: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11375: LD_EXP 1
11379: PPUSH
11380: LD_STRING D1-JMM-2
11382: PPUSH
11383: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11387: LD_EXP 7
11391: PPUSH
11392: LD_STRING D1-Brown-2
11394: PPUSH
11395: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11399: LD_EXP 1
11403: PPUSH
11404: LD_EXP 9
11408: PPUSH
11409: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11413: LD_EXP 9
11417: PPUSH
11418: LD_STRING D1-FSol1-2
11420: PPUSH
11421: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11425: LD_EXP 1
11429: PPUSH
11430: LD_EXP 8
11434: PPUSH
11435: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11439: LD_EXP 8
11443: PPUSH
11444: LD_STRING D1-Sol2-2
11446: PPUSH
11447: CALL_OW 88
// if Lisa then
11451: LD_EXP 4
11455: IFFALSE 11495
// begin ComTurnUnit ( JMM , Lisa ) ;
11457: LD_EXP 1
11461: PPUSH
11462: LD_EXP 4
11466: PPUSH
11467: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11471: LD_EXP 4
11475: PPUSH
11476: LD_STRING D1-Lisa-2
11478: PPUSH
11479: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11483: LD_EXP 1
11487: PPUSH
11488: LD_STRING D1-JMM-3
11490: PPUSH
11491: CALL_OW 88
// end ; if Bobby then
11495: LD_EXP 2
11499: IFFALSE 11539
// begin ComTurnUnit ( JMM , Bobby ) ;
11501: LD_EXP 1
11505: PPUSH
11506: LD_EXP 2
11510: PPUSH
11511: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11515: LD_EXP 2
11519: PPUSH
11520: LD_STRING D1-Bobby-2
11522: PPUSH
11523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11527: LD_EXP 1
11531: PPUSH
11532: LD_STRING D1-JMM-3
11534: PPUSH
11535: CALL_OW 88
// end ; if Cyrus then
11539: LD_EXP 3
11543: IFFALSE 11583
// begin ComTurnUnit ( JMM , Cyrus ) ;
11545: LD_EXP 1
11549: PPUSH
11550: LD_EXP 3
11554: PPUSH
11555: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11559: LD_EXP 3
11563: PPUSH
11564: LD_STRING D1-Cyrus-2
11566: PPUSH
11567: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11571: LD_EXP 1
11575: PPUSH
11576: LD_STRING D1-JMM-3
11578: PPUSH
11579: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11583: LD_EXP 1
11587: PPUSH
11588: LD_EXP 7
11592: PPUSH
11593: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11597: LD_EXP 1
11601: PPUSH
11602: LD_STRING D1-JMM-3a
11604: PPUSH
11605: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11609: LD_EXP 7
11613: PPUSH
11614: LD_INT 38
11616: PPUSH
11617: LD_INT 5
11619: PPUSH
11620: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_EXP 1
11633: PPUSH
11634: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11638: LD_EXP 1
11642: PPUSH
11643: LD_INT 40
11645: PPUSH
11646: LD_INT 7
11648: PPUSH
11649: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11653: LD_EXP 1
11657: PPUSH
11658: LD_EXP 7
11662: PPUSH
11663: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11667: LD_EXP 7
11671: PPUSH
11672: LD_STRING D1-Brown-3
11674: PPUSH
11675: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11679: LD_EXP 14
11683: PPUSH
11684: LD_STRING D1-Har-3
11686: PPUSH
11687: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11691: LD_EXP 1
11695: PPUSH
11696: LD_STRING D1-JMM-4
11698: PPUSH
11699: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11703: LD_EXP 14
11707: PPUSH
11708: LD_STRING D1-Har-4
11710: PPUSH
11711: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11715: LD_EXP 1
11719: PPUSH
11720: LD_STRING D1-JMM-5
11722: PPUSH
11723: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11727: LD_EXP 14
11731: PPUSH
11732: LD_STRING D1-Har-5
11734: PPUSH
11735: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11739: LD_EXP 1
11743: PPUSH
11744: LD_STRING D1-JMM-6
11746: PPUSH
11747: CALL_OW 88
// end ; InGameOff ;
11751: CALL_OW 9
// PrepareRussianConvoy ;
11755: CALL 2869 0 0
// ChangeMissionObjectives ( M1 ) ;
11759: LD_STRING M1
11761: PPUSH
11762: CALL_OW 337
// SaveForQuickRestart ;
11766: CALL_OW 22
// timerStatus = 1 ;
11770: LD_ADDR_EXP 29
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// startTimer = 1 ;
11778: LD_ADDR_EXP 30
11782: PUSH
11783: LD_INT 1
11785: ST_TO_ADDR
// bonusAvalaible = 1 ;
11786: LD_ADDR_EXP 42
11790: PUSH
11791: LD_INT 1
11793: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11794: LD_INT 105
11796: PPUSH
11797: CALL_OW 67
// DialogueOn ;
11801: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11805: LD_EXP 12
11809: PPUSH
11810: LD_STRING D9-Mech1-1
11812: PPUSH
11813: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11817: LD_EXP 1
11821: PPUSH
11822: LD_STRING D9-JMM-1
11824: PPUSH
11825: CALL_OW 88
// DialogueOff ;
11829: CALL_OW 7
// end ;
11833: PPOPN 4
11835: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11836: LD_INT 47
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 321
11846: PUSH
11847: LD_INT 2
11849: EQUAL
11850: PUSH
11851: LD_INT 22
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 21
11863: PUSH
11864: LD_INT 3
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: LD_INT 3
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: LIST
11885: PPUSH
11886: CALL_OW 69
11890: PUSH
11891: LD_INT 0
11893: GREATER
11894: AND
11895: IFFALSE 12125
11897: GO 11899
11899: DISABLE
// begin if IsOk ( Campell ) then
11900: LD_EXP 12
11904: PPUSH
11905: CALL_OW 302
11909: IFFALSE 11925
// begin Say ( Campell , D10-Mech1-1 ) ;
11911: LD_EXP 12
11915: PPUSH
11916: LD_STRING D10-Mech1-1
11918: PPUSH
11919: CALL_OW 88
// end else
11923: GO 12125
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11925: LD_INT 22
11927: PUSH
11928: LD_INT 1
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 21
11937: PUSH
11938: LD_INT 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 25
11947: PUSH
11948: LD_INT 3
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 26
11957: PUSH
11958: LD_INT 1
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 69
11975: PUSH
11976: LD_EXP 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: PUSH
11984: LD_INT 0
11986: GREATER
11987: DIFF
11988: IFFALSE 12062
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11990: LD_INT 22
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 25
12012: PUSH
12013: LD_INT 3
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 26
12022: PUSH
12023: LD_INT 1
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: PUSH
12041: LD_EXP 1
12045: PUSH
12046: EMPTY
12047: LIST
12048: DIFF
12049: PPUSH
12050: LD_STRING D10-Mech1-1
12052: PPUSH
12053: LD_STRING D10-Mech1-1
12055: PPUSH
12056: CALL 4113 0 3
// end else
12060: GO 12125
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12062: LD_INT 22
12064: PUSH
12065: LD_INT 1
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 21
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 26
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 1
12099: ARRAY
12100: PPUSH
12101: CALL_OW 69
12105: PUSH
12106: LD_EXP 1
12110: PUSH
12111: EMPTY
12112: LIST
12113: DIFF
12114: PPUSH
12115: LD_STRING D10-Mech1-1
12117: PPUSH
12118: LD_STRING D10-Mech1-1
12120: PPUSH
12121: CALL 4113 0 3
// end ; end ; end ;
12125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12126: LD_INT 22
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 32
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 69
12154: PUSH
12155: LD_INT 0
12157: GREATER
12158: PUSH
12159: LD_EXP 32
12163: PUSH
12164: LD_INT 0
12166: EQUAL
12167: AND
12168: IFFALSE 12408
12170: GO 12172
12172: DISABLE
// begin if IsOK ( Claptopn ) then
12173: LD_EXP 11
12177: PPUSH
12178: CALL_OW 302
12182: IFFALSE 12198
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12184: LD_EXP 11
12188: PPUSH
12189: LD_STRING D9b-Eng1-1
12191: PPUSH
12192: CALL_OW 88
// end else
12196: GO 12394
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12198: LD_INT 22
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 21
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 25
12220: PUSH
12221: LD_INT 3
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 26
12230: PUSH
12231: LD_INT 1
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: PUSH
12249: LD_EXP 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: PUSH
12257: LD_INT 0
12259: GREATER
12260: DIFF
12261: IFFALSE 12335
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12263: LD_INT 22
12265: PUSH
12266: LD_INT 1
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 21
12275: PUSH
12276: LD_INT 1
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 25
12285: PUSH
12286: LD_INT 2
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 26
12295: PUSH
12296: LD_INT 1
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: PPUSH
12309: CALL_OW 69
12313: PUSH
12314: LD_EXP 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: DIFF
12322: PPUSH
12323: LD_STRING D9b-Eng1-1
12325: PPUSH
12326: LD_STRING D9b-Eng1-11
12328: PPUSH
12329: CALL 4113 0 3
// end else
12333: GO 12394
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12335: LD_INT 22
12337: PUSH
12338: LD_INT 1
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 21
12347: PUSH
12348: LD_INT 1
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 26
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 69
12374: PUSH
12375: LD_EXP 1
12379: PUSH
12380: EMPTY
12381: LIST
12382: DIFF
12383: PPUSH
12384: LD_STRING D9b-Eng1-1
12386: PPUSH
12387: LD_STRING D9b-Eng1-1
12389: PPUSH
12390: CALL 4113 0 3
// end ; end ; if energyVDialog = 0 then
12394: LD_EXP 33
12398: PUSH
12399: LD_INT 0
12401: EQUAL
12402: IFFALSE 12408
// EnergyDialog ;
12404: CALL 4604 0 0
// end ;
12408: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12409: LD_EXP 34
12413: PUSH
12414: LD_INT 1
12416: EQUAL
12417: PUSH
12418: LD_EXP 35
12422: PUSH
12423: LD_INT 1
12425: EQUAL
12426: AND
12427: IFFALSE 12439
12429: GO 12431
12431: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12432: LD_STRING M1a
12434: PPUSH
12435: CALL_OW 337
12439: END
// every 3 3$0 do
12440: GO 12442
12442: DISABLE
// begin PrepareFirstAttack ;
12443: CALL 3669 0 0
// end ;
12447: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12448: LD_INT 22
12450: PUSH
12451: LD_INT 5
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 21
12460: PUSH
12461: LD_INT 1
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 3
12470: PUSH
12471: LD_INT 24
12473: PUSH
12474: LD_INT 250
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PPUSH
12490: CALL_OW 69
12494: PUSH
12495: LD_INT 0
12497: GREATER
12498: PUSH
12499: LD_EXP 23
12503: PUSH
12504: LD_INT 1
12506: EQUAL
12507: AND
12508: IFFALSE 12809
12510: GO 12512
12512: DISABLE
12513: LD_INT 0
12515: PPUSH
// begin firstRussianAttack = 2 ;
12516: LD_ADDR_EXP 23
12520: PUSH
12521: LD_INT 2
12523: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12524: LD_INT 22
12526: PUSH
12527: LD_INT 5
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 21
12536: PUSH
12537: LD_INT 1
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PPUSH
12548: CALL_OW 69
12552: PPUSH
12553: LD_INT 125
12555: PPUSH
12556: LD_INT 98
12558: PPUSH
12559: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12563: LD_INT 22
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 21
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 69
12591: PUSH
12592: LD_EXP 1
12596: PUSH
12597: LD_EXP 7
12601: PUSH
12602: LD_EXP 4
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: DIFF
12612: PPUSH
12613: LD_STRING DAtt1-Sol1-1
12615: PPUSH
12616: LD_STRING DAtt1-FSol1-1
12618: PPUSH
12619: CALL 4113 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12623: LD_EXP 1
12627: PPUSH
12628: LD_STRING DAtt1-JMM-1
12630: PPUSH
12631: CALL_OW 88
// if Lisa then
12635: LD_EXP 4
12639: IFFALSE 12655
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12641: LD_EXP 4
12645: PPUSH
12646: LD_STRING DAtt1a-Lisa-1
12648: PPUSH
12649: CALL_OW 88
// end else
12653: GO 12726
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12655: LD_INT 22
12657: PUSH
12658: LD_INT 1
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 21
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 26
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: PUSH
12695: LD_EXP 1
12699: PUSH
12700: LD_EXP 7
12704: PUSH
12705: LD_EXP 4
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: DIFF
12715: PPUSH
12716: LD_STRING DAtt1a-Sol1-1
12718: PPUSH
12719: LD_STRING DAtt1-FSol1-1
12721: PPUSH
12722: CALL 4113 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12726: LD_EXP 1
12730: PPUSH
12731: LD_STRING DAtt1a-JMM-1
12733: PPUSH
12734: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12738: LD_INT 22
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 21
12750: PUSH
12751: LD_INT 1
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 26
12760: PUSH
12761: LD_INT 1
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: PPUSH
12773: CALL_OW 69
12777: PUSH
12778: LD_EXP 1
12782: PUSH
12783: LD_EXP 7
12787: PUSH
12788: LD_EXP 4
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: DIFF
12798: PPUSH
12799: LD_STRING DAtt1b-Sol1-1
12801: PPUSH
12802: LD_STRING DAtt1a-Sol1-1
12804: PPUSH
12805: CALL 4113 0 3
// end ;
12809: PPOPN 1
12811: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12812: LD_EXP 23
12816: PUSH
12817: LD_INT 2
12819: EQUAL
12820: IFFALSE 12882
12822: GO 12824
12824: DISABLE
12825: LD_INT 0
12827: PPUSH
// begin enable ;
12828: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12829: LD_ADDR_VAR 0 1
12833: PUSH
12834: LD_INT 5
12836: PPUSH
12837: LD_INT 22
12839: PUSH
12840: LD_INT 5
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 21
12849: PUSH
12850: LD_INT 1
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 70
12865: PUSH
12866: FOR_IN
12867: IFFALSE 12880
// RemoveUnit ( i ) ;
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 64
12878: GO 12866
12880: POP
12881: POP
// end ;
12882: PPOPN 1
12884: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12885: LD_INT 22
12887: PUSH
12888: LD_INT 5
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: PPUSH
12898: CALL_OW 69
12902: PUSH
12903: LD_INT 0
12905: EQUAL
12906: PUSH
12907: LD_EXP 23
12911: PUSH
12912: LD_INT 2
12914: EQUAL
12915: AND
12916: IFFALSE 12929
12918: GO 12920
12920: DISABLE
// firstRussianAttack = 3 ;
12921: LD_ADDR_EXP 23
12925: PUSH
12926: LD_INT 3
12928: ST_TO_ADDR
12929: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12930: LD_EXP 28
12934: PUSH
12935: LD_INT 0
12937: EQUAL
12938: IFFALSE 13019
12940: GO 12942
12942: DISABLE
// begin timerStatus = 4 ;
12943: LD_ADDR_EXP 29
12947: PUSH
12948: LD_INT 4
12950: ST_TO_ADDR
// DialogueOn ;
12951: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12955: LD_EXP 13
12959: PPUSH
12960: LD_STRING D2-Don-1
12962: PPUSH
12963: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12967: LD_EXP 1
12971: PPUSH
12972: LD_STRING D2-JMM-1
12974: PPUSH
12975: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12979: LD_EXP 13
12983: PPUSH
12984: LD_STRING D2-Don-2
12986: PPUSH
12987: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12991: LD_EXP 1
12995: PPUSH
12996: LD_STRING D2-JMM-2
12998: PPUSH
12999: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13003: LD_EXP 13
13007: PPUSH
13008: LD_STRING D2-Don-3
13010: PPUSH
13011: CALL_OW 94
// DialogueOff ;
13015: CALL_OW 7
// end ;
13019: END
// every 12 12$0 do var tmp ;
13020: GO 13022
13022: DISABLE
13023: LD_INT 0
13025: PPUSH
// begin PrepareDonaldsonArmy ;
13026: CALL 1062 0 0
// CenterNowOnUnits ( Donaldson ) ;
13030: LD_EXP 13
13034: PPUSH
13035: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13039: LD_ADDR_VAR 0 1
13043: PUSH
13044: LD_INT 22
13046: PUSH
13047: LD_INT 4
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 21
13056: PUSH
13057: LD_INT 1
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 26
13066: PUSH
13067: LD_INT 1
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 25
13076: PUSH
13077: LD_INT 1
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: PPUSH
13090: CALL_OW 69
13094: PUSH
13095: LD_EXP 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: DIFF
13103: ST_TO_ADDR
// DialogueOn ;
13104: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13108: LD_VAR 0 1
13112: PPUSH
13113: LD_STRING D3-Sol1-1
13115: PPUSH
13116: LD_STRING D3-Sol1-1
13118: PPUSH
13119: CALL 4113 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13123: LD_INT 22
13125: PUSH
13126: LD_INT 4
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 21
13135: PUSH
13136: LD_INT 1
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 26
13145: PUSH
13146: LD_INT 1
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 25
13155: PUSH
13156: LD_INT 3
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 69
13173: PPUSH
13174: LD_STRING D3-Sol2-1
13176: PPUSH
13177: LD_STRING D3-Sol2-1
13179: PPUSH
13180: CALL 4113 0 3
// if Frank then
13184: LD_EXP 5
13188: IFFALSE 13202
// Say ( Frank , D3-Frank-1 ) ;
13190: LD_EXP 5
13194: PPUSH
13195: LD_STRING D3-Frank-1
13197: PPUSH
13198: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13202: LD_EXP 13
13206: PPUSH
13207: LD_STRING D3-Don-1
13209: PPUSH
13210: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13214: LD_EXP 13
13218: PPUSH
13219: LD_STRING D3-Don-1a
13221: PPUSH
13222: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13226: LD_EXP 1
13230: PPUSH
13231: LD_STRING D3-JMM-1
13233: PPUSH
13234: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13238: LD_EXP 13
13242: PPUSH
13243: LD_STRING D3-Don-2
13245: PPUSH
13246: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13250: LD_INT 22
13252: PUSH
13253: LD_INT 6
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 21
13262: PUSH
13263: LD_INT 1
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PPUSH
13274: CALL_OW 69
13278: PUSH
13279: LD_INT 0
13281: GREATER
13282: IFFALSE 13420
// begin Say ( JMM , D3-JMM-2 ) ;
13284: LD_EXP 1
13288: PPUSH
13289: LD_STRING D3-JMM-2
13291: PPUSH
13292: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13296: LD_EXP 13
13300: PPUSH
13301: LD_STRING D3-Don-3
13303: PPUSH
13304: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13308: LD_EXP 1
13312: PPUSH
13313: LD_STRING D3-JMM-3
13315: PPUSH
13316: CALL_OW 88
// if IsOK ( Frank ) then
13320: LD_EXP 5
13324: PPUSH
13325: CALL_OW 302
13329: IFFALSE 13343
// Say ( Frank , D3-Frank-3 ) ;
13331: LD_EXP 5
13335: PPUSH
13336: LD_STRING D3-Frank-3
13338: PPUSH
13339: CALL_OW 88
// DialogueOff ;
13343: CALL_OW 7
// if IsOK ( Frank ) then
13347: LD_EXP 5
13351: PPUSH
13352: CALL_OW 302
13356: IFFALSE 13418
// begin SetSide ( Frank , 0 ) ;
13358: LD_EXP 5
13362: PPUSH
13363: LD_INT 0
13365: PPUSH
13366: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13370: LD_EXP 5
13374: PPUSH
13375: LD_INT 12
13377: PPUSH
13378: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13382: LD_EXP 5
13386: PPUSH
13387: LD_STRING Frank
13389: PPUSH
13390: CALL_OW 38
// Wait ( 0 0$3 ) ;
13394: LD_INT 105
13396: PPUSH
13397: CALL_OW 67
// frankScoutBase = 1 ;
13401: LD_ADDR_EXP 25
13405: PUSH
13406: LD_INT 1
13408: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13409: LD_EXP 5
13413: PPUSH
13414: CALL_OW 64
// end ; end else
13418: GO 13507
// begin Say ( JMM , D3-JMM-4 ) ;
13420: LD_EXP 1
13424: PPUSH
13425: LD_STRING D3-JMM-4
13427: PPUSH
13428: CALL_OW 88
// DialogueOff ;
13432: CALL_OW 7
// if IsOK ( Frank ) then
13436: LD_EXP 5
13440: PPUSH
13441: CALL_OW 302
13445: IFFALSE 13507
// begin SetSide ( Frank , 0 ) ;
13447: LD_EXP 5
13451: PPUSH
13452: LD_INT 0
13454: PPUSH
13455: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13459: LD_EXP 5
13463: PPUSH
13464: LD_INT 12
13466: PPUSH
13467: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13471: LD_EXP 5
13475: PPUSH
13476: LD_STRING 04t_Frank
13478: PPUSH
13479: CALL_OW 38
// Wait ( 0 0$3 ) ;
13483: LD_INT 105
13485: PPUSH
13486: CALL_OW 67
// frankScoutBase = 1 ;
13490: LD_ADDR_EXP 25
13494: PUSH
13495: LD_INT 1
13497: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13498: LD_EXP 5
13502: PPUSH
13503: CALL_OW 64
// end ; end ; end ;
13507: PPOPN 1
13509: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13510: LD_EXP 13
13514: PPUSH
13515: CALL_OW 255
13519: PUSH
13520: LD_INT 4
13522: EQUAL
13523: PUSH
13524: LD_EXP 13
13528: PPUSH
13529: CALL_OW 302
13533: AND
13534: IFFALSE 13559
13536: GO 13538
13538: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13539: LD_EXP 13
13543: PPUSH
13544: LD_STRING D3b-Don-1
13546: PPUSH
13547: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13551: LD_ADDR_EXP 41
13555: PUSH
13556: LD_INT 1
13558: ST_TO_ADDR
// end ;
13559: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13560: LD_EXP 24
13564: PUSH
13565: LD_INT 0
13567: EQUAL
13568: IFFALSE 13724
13570: GO 13572
13572: DISABLE
13573: LD_INT 0
13575: PPUSH
13576: PPUSH
// begin enable ;
13577: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13578: LD_ADDR_VAR 0 1
13582: PUSH
13583: LD_INT 22
13585: PUSH
13586: LD_INT 4
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 21
13595: PUSH
13596: LD_INT 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 69
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13722
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: LD_INT 22
13622: PUSH
13623: LD_INT 1
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 21
13632: PUSH
13633: LD_INT 1
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PPUSH
13644: CALL_OW 69
13648: PUSH
13649: FOR_IN
13650: IFFALSE 13718
// begin if GetDistUnits ( i , j ) < 7 then
13652: LD_VAR 0 1
13656: PPUSH
13657: LD_VAR 0 2
13661: PPUSH
13662: CALL_OW 296
13666: PUSH
13667: LD_INT 7
13669: LESS
13670: IFFALSE 13716
// begin saveDonaldson = 1 ;
13672: LD_ADDR_EXP 24
13676: PUSH
13677: LD_INT 1
13679: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13680: LD_INT 22
13682: PUSH
13683: LD_INT 4
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 21
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 69
13708: PPUSH
13709: LD_INT 1
13711: PPUSH
13712: CALL_OW 235
// end ; end ;
13716: GO 13649
13718: POP
13719: POP
// end ;
13720: GO 13612
13722: POP
13723: POP
// end ;
13724: PPOPN 2
13726: END
// every 2 2$0 trigger saveDonaldson = 1 do
13727: LD_EXP 24
13731: PUSH
13732: LD_INT 1
13734: EQUAL
13735: IFFALSE 14038
13737: GO 13739
13739: DISABLE
// begin uc_side = 4 ;
13740: LD_ADDR_OWVAR 20
13744: PUSH
13745: LD_INT 4
13747: ST_TO_ADDR
// uc_nation = 1 ;
13748: LD_ADDR_OWVAR 21
13752: PUSH
13753: LD_INT 1
13755: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
13756: LD_ADDR_EXP 5
13760: PUSH
13761: LD_STRING 04t_Frank
13763: PPUSH
13764: CALL_OW 34
13768: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13769: LD_EXP 5
13773: PPUSH
13774: LD_INT 13
13776: PPUSH
13777: LD_INT 0
13779: PPUSH
13780: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13784: LD_INT 35
13786: PPUSH
13787: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
13791: LD_EXP 1
13795: PPUSH
13796: CALL_OW 310
13800: NOT
13801: PUSH
13802: LD_EXP 1
13806: PPUSH
13807: LD_INT 4
13809: PPUSH
13810: CALL_OW 296
13814: PUSH
13815: LD_INT 20
13817: LESS
13818: AND
13819: IFFALSE 13852
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
13821: LD_EXP 5
13825: PPUSH
13826: LD_EXP 1
13830: PPUSH
13831: CALL_OW 250
13835: PPUSH
13836: LD_EXP 1
13840: PPUSH
13841: CALL_OW 251
13845: PPUSH
13846: CALL_OW 111
13850: GO 13867
// ComMoveXY ( Frank , 51 , 15 ) ;
13852: LD_EXP 5
13856: PPUSH
13857: LD_INT 51
13859: PPUSH
13860: LD_INT 15
13862: PPUSH
13863: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
13867: LD_EXP 5
13871: PPUSH
13872: LD_EXP 1
13876: PPUSH
13877: CALL_OW 296
13881: PUSH
13882: LD_INT 10
13884: LESS
13885: IFFALSE 13784
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13887: LD_EXP 1
13891: PUSH
13892: LD_EXP 5
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 87
// DialogueOn ;
13905: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13909: LD_EXP 5
13913: PPUSH
13914: LD_STRING D3a-Frank-1
13916: PPUSH
13917: CALL_OW 88
// if Lisa then
13921: LD_EXP 4
13925: IFFALSE 13975
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13927: LD_EXP 4
13931: PPUSH
13932: LD_STRING D3a-Lisa-1
13934: PPUSH
13935: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13939: LD_EXP 5
13943: PPUSH
13944: LD_STRING D3a-Frank-2
13946: PPUSH
13947: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13951: LD_EXP 4
13955: PPUSH
13956: LD_STRING D3a-Lisa-2
13958: PPUSH
13959: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13963: LD_EXP 5
13967: PPUSH
13968: LD_STRING D3a-Frank-3
13970: PPUSH
13971: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13975: LD_EXP 1
13979: PPUSH
13980: LD_STRING D3a-JMM-3
13982: PPUSH
13983: CALL_OW 88
// DialogueOff ;
13987: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13991: LD_EXP 5
13995: PPUSH
13996: LD_INT 1
13998: PPUSH
13999: CALL_OW 235
// InGameOn ;
14003: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14007: LD_INT 1
14009: PPUSH
14010: LD_INT 7
14012: PPUSH
14013: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14017: LD_INT 93
14019: PPUSH
14020: LD_INT 91
14022: PPUSH
14023: CALL_OW 84
// wait ( 0 0$5 ) ;
14027: LD_INT 175
14029: PPUSH
14030: CALL_OW 67
// InGameOff ;
14034: CALL_OW 9
// end ;
14038: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14039: LD_OWVAR 67
14043: PUSH
14044: LD_INT 2
14046: EQUAL
14047: PUSH
14048: LD_OWVAR 67
14052: PUSH
14053: LD_INT 3
14055: EQUAL
14056: OR
14057: IFFALSE 14081
14059: GO 14061
14061: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14062: LD_INT 24
14064: PPUSH
14065: LD_INT 24
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: LD_INT 1
14073: PPUSH
14074: LD_INT 53
14076: PPUSH
14077: CALL_OW 125
14081: END
// every 18 18$0 do
14082: GO 14084
14084: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14085: LD_EXP 14
14089: PPUSH
14090: LD_STRING D4-Har-1
14092: PPUSH
14093: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14097: LD_EXP 1
14101: PPUSH
14102: LD_STRING D4-JMM-1
14104: PPUSH
14105: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14109: LD_EXP 14
14113: PPUSH
14114: LD_STRING D4-Har-2
14116: PPUSH
14117: CALL_OW 94
// case query ( Q1 ) of 1 :
14121: LD_STRING Q1
14123: PPUSH
14124: CALL_OW 97
14128: PUSH
14129: LD_INT 1
14131: DOUBLE
14132: EQUAL
14133: IFTRUE 14137
14135: GO 14196
14137: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14138: LD_EXP 1
14142: PPUSH
14143: LD_STRING D5-JMM-1
14145: PPUSH
14146: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14150: LD_EXP 14
14154: PPUSH
14155: LD_STRING D5-Har-1
14157: PPUSH
14158: CALL_OW 94
// timeToSupport = 10 10$0 ;
14162: LD_ADDR_EXP 28
14166: PUSH
14167: LD_INT 21000
14169: ST_TO_ADDR
// timerStatus = 2 ;
14170: LD_ADDR_EXP 29
14174: PUSH
14175: LD_INT 2
14177: ST_TO_ADDR
// startTimer = 1 ;
14178: LD_ADDR_EXP 30
14182: PUSH
14183: LD_INT 1
14185: ST_TO_ADDR
// harrAnswer = 1 ;
14186: LD_ADDR_EXP 26
14190: PUSH
14191: LD_INT 1
14193: ST_TO_ADDR
// end ; 2 :
14194: GO 14331
14196: LD_INT 2
14198: DOUBLE
14199: EQUAL
14200: IFTRUE 14204
14202: GO 14263
14204: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14205: LD_EXP 1
14209: PPUSH
14210: LD_STRING D5-JMM-2
14212: PPUSH
14213: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14217: LD_EXP 14
14221: PPUSH
14222: LD_STRING D5-Har-2
14224: PPUSH
14225: CALL_OW 94
// timeToSupport = 5 5$0 ;
14229: LD_ADDR_EXP 28
14233: PUSH
14234: LD_INT 10500
14236: ST_TO_ADDR
// timerStatus = 2 ;
14237: LD_ADDR_EXP 29
14241: PUSH
14242: LD_INT 2
14244: ST_TO_ADDR
// startTimer = 1 ;
14245: LD_ADDR_EXP 30
14249: PUSH
14250: LD_INT 1
14252: ST_TO_ADDR
// harrAnswer = 2 ;
14253: LD_ADDR_EXP 26
14257: PUSH
14258: LD_INT 2
14260: ST_TO_ADDR
// end ; 3 :
14261: GO 14331
14263: LD_INT 3
14265: DOUBLE
14266: EQUAL
14267: IFTRUE 14271
14269: GO 14330
14271: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14272: LD_EXP 1
14276: PPUSH
14277: LD_STRING D5-JMM-3
14279: PPUSH
14280: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14284: LD_EXP 14
14288: PPUSH
14289: LD_STRING D5-Har-3
14291: PPUSH
14292: CALL_OW 94
// timeToSupport = 5 5$0 ;
14296: LD_ADDR_EXP 28
14300: PUSH
14301: LD_INT 10500
14303: ST_TO_ADDR
// timerStatus = 2 ;
14304: LD_ADDR_EXP 29
14308: PUSH
14309: LD_INT 2
14311: ST_TO_ADDR
// startTimer = 1 ;
14312: LD_ADDR_EXP 30
14316: PUSH
14317: LD_INT 1
14319: ST_TO_ADDR
// harrAnswer = 3 ;
14320: LD_ADDR_EXP 26
14324: PUSH
14325: LD_INT 3
14327: ST_TO_ADDR
// end ; end ;
14328: GO 14331
14330: POP
// end ;
14331: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14332: LD_EXP 29
14336: PUSH
14337: LD_INT 2
14339: EQUAL
14340: PUSH
14341: LD_EXP 28
14345: PUSH
14346: LD_INT 0
14348: EQUAL
14349: AND
14350: IFFALSE 14627
14352: GO 14354
14354: DISABLE
// begin timerStatus = 4 ;
14355: LD_ADDR_EXP 29
14359: PUSH
14360: LD_INT 4
14362: ST_TO_ADDR
// if harrAnswer = 1 then
14363: LD_EXP 26
14367: PUSH
14368: LD_INT 1
14370: EQUAL
14371: IFFALSE 14451
// begin PrepareHarrisonSupport ( 3 ) ;
14373: LD_INT 3
14375: PPUSH
14376: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14380: LD_INT 2100
14382: PPUSH
14383: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14387: LD_EXP 14
14391: PPUSH
14392: LD_STRING D7-Har-1
14394: PPUSH
14395: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14399: LD_STRING M2
14401: PPUSH
14402: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14406: LD_ADDR_EXP 27
14410: PUSH
14411: LD_INT 31500
14413: PUSH
14414: LD_INT 10500
14416: PUSH
14417: LD_INT 8400
14419: PUSH
14420: LD_INT 6300
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: PUSH
14428: LD_OWVAR 67
14432: ARRAY
14433: PLUS
14434: ST_TO_ADDR
// startTimer = 1 ;
14435: LD_ADDR_EXP 30
14439: PUSH
14440: LD_INT 1
14442: ST_TO_ADDR
// timerStatus = 3 ;
14443: LD_ADDR_EXP 29
14447: PUSH
14448: LD_INT 3
14450: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14451: LD_EXP 26
14455: PUSH
14456: LD_INT 2
14458: EQUAL
14459: IFFALSE 14539
// begin PrepareHarrisonSupport ( 4 ) ;
14461: LD_INT 4
14463: PPUSH
14464: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14468: LD_INT 2100
14470: PPUSH
14471: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14475: LD_EXP 14
14479: PPUSH
14480: LD_STRING D7-Har-1
14482: PPUSH
14483: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14487: LD_STRING M2
14489: PPUSH
14490: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14494: LD_ADDR_EXP 27
14498: PUSH
14499: LD_INT 27300
14501: PUSH
14502: LD_INT 8400
14504: PUSH
14505: LD_INT 8400
14507: PUSH
14508: LD_INT 6300
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: PUSH
14516: LD_OWVAR 67
14520: ARRAY
14521: PLUS
14522: ST_TO_ADDR
// startTimer = 1 ;
14523: LD_ADDR_EXP 30
14527: PUSH
14528: LD_INT 1
14530: ST_TO_ADDR
// timerStatus = 3 ;
14531: LD_ADDR_EXP 29
14535: PUSH
14536: LD_INT 3
14538: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14539: LD_EXP 26
14543: PUSH
14544: LD_INT 3
14546: EQUAL
14547: IFFALSE 14627
// begin PrepareHarrisonSupport ( 5 ) ;
14549: LD_INT 5
14551: PPUSH
14552: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14556: LD_INT 2100
14558: PPUSH
14559: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14563: LD_EXP 14
14567: PPUSH
14568: LD_STRING D7-Har-1
14570: PPUSH
14571: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14575: LD_STRING M2
14577: PPUSH
14578: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14582: LD_ADDR_EXP 27
14586: PUSH
14587: LD_INT 21000
14589: PUSH
14590: LD_INT 8400
14592: PUSH
14593: LD_INT 6300
14595: PUSH
14596: LD_INT 4200
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: PUSH
14604: LD_OWVAR 67
14608: ARRAY
14609: PLUS
14610: ST_TO_ADDR
// startTimer = 1 ;
14611: LD_ADDR_EXP 30
14615: PUSH
14616: LD_INT 1
14618: ST_TO_ADDR
// timerStatus = 3 ;
14619: LD_ADDR_EXP 29
14623: PUSH
14624: LD_INT 3
14626: ST_TO_ADDR
// end ; end ;
14627: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14628: LD_EXP 27
14632: PUSH
14633: LD_INT 8400
14635: LESSEQUAL
14636: PUSH
14637: LD_EXP 29
14641: PUSH
14642: LD_INT 3
14644: EQUAL
14645: AND
14646: IFFALSE 14678
14648: GO 14650
14650: DISABLE
// begin DialogueOn ;
14651: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14655: LD_EXP 14
14659: PPUSH
14660: LD_STRING D7a-Har-1
14662: PPUSH
14663: CALL_OW 94
// DialogueOff ;
14667: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14671: LD_STRING M2a
14673: PPUSH
14674: CALL_OW 337
// end ;
14678: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
14679: LD_EXP 27
14683: PUSH
14684: LD_INT 0
14686: LESSEQUAL
14687: PUSH
14688: LD_EXP 29
14692: PUSH
14693: LD_INT 3
14695: EQUAL
14696: AND
14697: PUSH
14698: LD_EXP 40
14702: NOT
14703: AND
14704: IFFALSE 14843
14706: GO 14708
14708: DISABLE
14709: LD_INT 0
14711: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14712: LD_ADDR_VAR 0 1
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PPUSH
14727: CALL_OW 69
14731: PUSH
14732: LD_EXP 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: DIFF
14740: ST_TO_ADDR
// saveDonaldson = 2 ;
14741: LD_ADDR_EXP 24
14745: PUSH
14746: LD_INT 2
14748: ST_TO_ADDR
// DialogueOn ;
14749: CALL_OW 6
// if IsOK ( Donaldson ) then
14753: LD_EXP 13
14757: PPUSH
14758: CALL_OW 302
14762: IFFALSE 14778
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14764: LD_EXP 14
14768: PPUSH
14769: LD_STRING D8-Har-1
14771: PPUSH
14772: CALL_OW 94
// end else
14776: GO 14790
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14778: LD_EXP 14
14782: PPUSH
14783: LD_STRING D8-Har-1a
14785: PPUSH
14786: CALL_OW 94
// end ; DialogueOff ;
14790: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14794: LD_VAR 0 1
14798: PPUSH
14799: LD_INT 4
14801: PPUSH
14802: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14806: LD_VAR 0 1
14810: PPUSH
14811: LD_INT 88
14813: PPUSH
14814: LD_INT 89
14816: PPUSH
14817: CALL_OW 114
// honor = 0 ;
14821: LD_ADDR_EXP 39
14825: PUSH
14826: LD_INT 0
14828: ST_TO_ADDR
// wait ( 0 0$10 ) ;
14829: LD_INT 350
14831: PPUSH
14832: CALL_OW 67
// YouLost ( LostCommand ) ;
14836: LD_STRING LostCommand
14838: PPUSH
14839: CALL_OW 104
// end ;
14843: PPOPN 1
14845: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14846: LD_INT 22
14848: PUSH
14849: LD_INT 6
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: PUSH
14875: LD_INT 0
14877: EQUAL
14878: PUSH
14879: LD_EXP 20
14883: PUSH
14884: LD_INT 0
14886: EQUAL
14887: AND
14888: PUSH
14889: LD_EXP 42
14893: PUSH
14894: LD_INT 1
14896: EQUAL
14897: AND
14898: IFFALSE 14992
14900: GO 14902
14902: DISABLE
14903: LD_INT 0
14905: PPUSH
14906: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14907: LD_ADDR_VAR 0 2
14911: PUSH
14912: LD_INT 22
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: LD_INT 21
14924: PUSH
14925: LD_INT 1
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 23
14934: PUSH
14935: LD_INT 1
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: PPUSH
14947: CALL_OW 69
14951: ST_TO_ADDR
// for i in tmp do
14952: LD_ADDR_VAR 0 1
14956: PUSH
14957: LD_VAR 0 2
14961: PUSH
14962: FOR_IN
14963: IFFALSE 14990
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14965: LD_VAR 0 1
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: LD_INT 4
14975: PPUSH
14976: CALL_OW 12
14980: PPUSH
14981: LD_INT 500
14983: PPUSH
14984: CALL_OW 492
// end ;
14988: GO 14962
14990: POP
14991: POP
// end ; end_of_file
14992: PPOPN 2
14994: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
14995: GO 14997
14997: DISABLE
14998: LD_INT 0
15000: PPUSH
// begin enemyWayX = [ ] ;
15001: LD_ADDR_EXP 46
15005: PUSH
15006: EMPTY
15007: ST_TO_ADDR
// enemyWayY = [ ] ;
15008: LD_ADDR_EXP 47
15012: PUSH
15013: EMPTY
15014: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_INT 1
15022: PPUSH
15023: LD_INT 3
15025: PPUSH
15026: CALL_OW 12
15030: ST_TO_ADDR
// if rnd = 1 then
15031: LD_VAR 0 1
15035: PUSH
15036: LD_INT 1
15038: EQUAL
15039: IFFALSE 15079
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15041: LD_ADDR_EXP 46
15045: PUSH
15046: LD_INT 73
15048: PUSH
15049: LD_INT 46
15051: PUSH
15052: LD_INT 29
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15060: LD_ADDR_EXP 47
15064: PUSH
15065: LD_INT 71
15067: PUSH
15068: LD_INT 43
15070: PUSH
15071: LD_INT 29
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: ST_TO_ADDR
// end ; if rnd = 2 then
15079: LD_VAR 0 1
15083: PUSH
15084: LD_INT 2
15086: EQUAL
15087: IFFALSE 15111
// begin enemyWayX = [ 64 ] ;
15089: LD_ADDR_EXP 46
15093: PUSH
15094: LD_INT 64
15096: PUSH
15097: EMPTY
15098: LIST
15099: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15100: LD_ADDR_EXP 47
15104: PUSH
15105: LD_INT 43
15107: PUSH
15108: EMPTY
15109: LIST
15110: ST_TO_ADDR
// end ; if rnd = 3 then
15111: LD_VAR 0 1
15115: PUSH
15116: LD_INT 3
15118: EQUAL
15119: IFFALSE 15143
// begin enemyWayX = [ 80 ] ;
15121: LD_ADDR_EXP 46
15125: PUSH
15126: LD_INT 80
15128: PUSH
15129: EMPTY
15130: LIST
15131: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15132: LD_ADDR_EXP 47
15136: PUSH
15137: LD_INT 28
15139: PUSH
15140: EMPTY
15141: LIST
15142: ST_TO_ADDR
// end ; enable ;
15143: ENABLE
// end ;
15144: PPOPN 1
15146: END
// every 0 0$1 trigger AIEnable = 1 do
15147: LD_EXP 37
15151: PUSH
15152: LD_INT 1
15154: EQUAL
15155: IFFALSE 15269
15157: GO 15159
15159: DISABLE
// begin enable ;
15160: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15161: LD_INT 3
15163: PPUSH
15164: LD_INT 21
15166: PPUSH
15167: LD_INT 7
15169: PPUSH
15170: CALL 5637 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15174: LD_INT 3
15176: PPUSH
15177: LD_INT 8
15179: PPUSH
15180: LD_INT 7
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL 5958 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15190: LD_INT 3
15192: PPUSH
15193: LD_INT 17
15195: PPUSH
15196: LD_INT 108
15198: PPUSH
15199: LD_INT 95
15201: PPUSH
15202: CALL 7202 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15206: LD_INT 3
15208: PPUSH
15209: LD_INT 23
15211: PPUSH
15212: LD_EXP 46
15216: PPUSH
15217: LD_EXP 47
15221: PPUSH
15222: CALL 6614 0 4
// if baseReadyToBuild = 2 then
15226: LD_EXP 20
15230: PUSH
15231: LD_INT 2
15233: EQUAL
15234: IFFALSE 15269
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15236: LD_INT 6
15238: PPUSH
15239: LD_EXP 21
15243: PPUSH
15244: LD_INT 6
15246: PPUSH
15247: CALL 5637 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15251: LD_INT 6
15253: PPUSH
15254: LD_INT 9
15256: PPUSH
15257: LD_INT 6
15259: PPUSH
15260: LD_EXP 22
15264: PPUSH
15265: CALL 5958 0 4
// end ; end ;
15269: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15270: LD_EXP 15
15274: PPUSH
15275: CALL_OW 310
15279: NOT
15280: PUSH
15281: LD_INT 21
15283: PPUSH
15284: CALL_OW 302
15288: AND
15289: PUSH
15290: LD_INT 21
15292: PPUSH
15293: CALL_OW 255
15297: PUSH
15298: LD_INT 3
15300: EQUAL
15301: AND
15302: IFFALSE 15320
15304: GO 15306
15306: DISABLE
// begin enable ;
15307: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15308: LD_EXP 15
15312: PPUSH
15313: LD_INT 21
15315: PPUSH
15316: CALL_OW 120
// end ;
15320: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15321: LD_INT 22
15323: PUSH
15324: LD_INT 3
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 55
15343: PUSH
15344: EMPTY
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: PUSH
15357: LD_INT 0
15359: EQUAL
15360: PUSH
15361: LD_INT 1
15363: PPUSH
15364: CALL_OW 255
15368: PUSH
15369: LD_INT 3
15371: EQUAL
15372: AND
15373: PUSH
15374: LD_INT 21
15376: PPUSH
15377: CALL_OW 302
15381: AND
15382: PUSH
15383: LD_INT 21
15385: PPUSH
15386: CALL_OW 255
15390: PUSH
15391: LD_INT 3
15393: EQUAL
15394: AND
15395: PUSH
15396: LD_INT 21
15398: PPUSH
15399: CALL_OW 302
15403: AND
15404: IFFALSE 15609
15406: GO 15408
15408: DISABLE
// begin enable ;
15409: ENABLE
// if Difficulty = 1 then
15410: LD_OWVAR 67
15414: PUSH
15415: LD_INT 1
15417: EQUAL
15418: IFFALSE 15462
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15420: LD_INT 3
15422: PPUSH
15423: LD_INT 24
15425: PPUSH
15426: LD_OWVAR 67
15430: PUSH
15431: LD_INT 2
15433: PLUS
15434: PPUSH
15435: LD_INT 42
15437: PUSH
15438: LD_INT 42
15440: PUSH
15441: LD_INT 43
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: LIST
15448: PPUSH
15449: LD_INT 1
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: LD_INT 21
15457: PPUSH
15458: CALL 6502 0 7
// if Difficulty = 2 then
15462: LD_OWVAR 67
15466: PUSH
15467: LD_INT 2
15469: EQUAL
15470: IFFALSE 15537
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15472: LD_INT 3
15474: PPUSH
15475: LD_INT 24
15477: PPUSH
15478: LD_OWVAR 67
15482: PUSH
15483: LD_INT 2
15485: PLUS
15486: PPUSH
15487: LD_INT 42
15489: PUSH
15490: LD_INT 42
15492: PUSH
15493: LD_INT 43
15495: PUSH
15496: LD_INT 43
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: LD_INT 1
15510: PPUSH
15511: LD_INT 21
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 1
15523: PPUSH
15524: LD_INT 2
15526: PPUSH
15527: CALL_OW 12
15531: ARRAY
15532: PPUSH
15533: CALL 6502 0 7
// if Difficulty = 3 then
15537: LD_OWVAR 67
15541: PUSH
15542: LD_INT 3
15544: EQUAL
15545: IFFALSE 15609
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15547: LD_INT 3
15549: PPUSH
15550: LD_INT 24
15552: PPUSH
15553: LD_OWVAR 67
15557: PUSH
15558: LD_INT 2
15560: PPUSH
15561: LD_INT 3
15563: PPUSH
15564: CALL_OW 12
15568: PLUS
15569: PPUSH
15570: LD_INT 43
15572: PUSH
15573: LD_INT 43
15575: PUSH
15576: LD_INT 43
15578: PUSH
15579: LD_INT 43
15581: PUSH
15582: LD_INT 44
15584: PUSH
15585: LD_INT 44
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: LD_INT 1
15601: PPUSH
15602: LD_INT 22
15604: PPUSH
15605: CALL 6502 0 7
// end ;
15609: END
// every 0 0$1 do
15610: GO 15612
15612: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15613: LD_INT 3
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: LD_INT 3
15621: PPUSH
15622: CALL 5552 0 3
15626: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15627: LD_EXP 20
15631: PUSH
15632: LD_INT 1
15634: EQUAL
15635: IFFALSE 15782
15637: GO 15639
15639: DISABLE
15640: LD_INT 0
15642: PPUSH
15643: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15644: LD_ADDR_VAR 0 2
15648: PUSH
15649: LD_INT 22
15651: PUSH
15652: LD_INT 6
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 21
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 34
15671: PUSH
15672: LD_INT 51
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15689: LD_VAR 0 2
15693: PUSH
15694: LD_INT 1
15696: ARRAY
15697: PPUSH
15698: LD_EXP 21
15702: PPUSH
15703: CALL_OW 250
15707: PUSH
15708: LD_INT 5
15710: MINUS
15711: PPUSH
15712: LD_EXP 21
15716: PPUSH
15717: CALL_OW 251
15721: PUSH
15722: LD_INT 5
15724: MINUS
15725: PPUSH
15726: CALL_OW 111
// wait ( 0 0$5 ) ;
15730: LD_INT 175
15732: PPUSH
15733: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15737: LD_VAR 0 2
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PPUSH
15746: LD_INT 41
15748: PPUSH
15749: LD_INT 52
15751: PPUSH
15752: CALL_OW 177
// wait ( 0 0$40 ) ;
15756: LD_INT 1400
15758: PPUSH
15759: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15763: LD_VAR 0 2
15767: PUSH
15768: LD_INT 1
15770: ARRAY
15771: PPUSH
15772: LD_INT 41
15774: PPUSH
15775: LD_INT 44
15777: PPUSH
15778: CALL_OW 111
// end ;
15782: PPOPN 2
15784: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15785: LD_EXP 21
15789: PPUSH
15790: CALL_OW 274
15794: PPUSH
15795: LD_INT 1
15797: PPUSH
15798: CALL_OW 275
15802: PUSH
15803: LD_INT 100
15805: GREATEREQUAL
15806: IFFALSE 16034
15808: GO 15810
15810: DISABLE
15811: LD_INT 0
15813: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15814: LD_ADDR_VAR 0 1
15818: PUSH
15819: LD_INT 22
15821: PUSH
15822: LD_INT 6
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 21
15831: PUSH
15832: LD_INT 1
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 25
15841: PUSH
15842: LD_INT 2
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: LIST
15853: PPUSH
15854: CALL_OW 69
15858: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15859: LD_VAR 0 1
15863: PUSH
15864: LD_INT 1
15866: ARRAY
15867: PPUSH
15868: LD_INT 4
15870: PPUSH
15871: LD_INT 39
15873: PPUSH
15874: LD_INT 37
15876: PPUSH
15877: LD_INT 3
15879: PPUSH
15880: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15884: LD_VAR 0 1
15888: PUSH
15889: LD_INT 1
15891: ARRAY
15892: PPUSH
15893: LD_INT 29
15895: PPUSH
15896: LD_INT 42
15898: PPUSH
15899: LD_INT 54
15901: PPUSH
15902: LD_INT 3
15904: PPUSH
15905: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15909: LD_VAR 0 1
15913: PUSH
15914: LD_INT 1
15916: ARRAY
15917: PPUSH
15918: LD_INT 6
15920: PPUSH
15921: LD_INT 38
15923: PPUSH
15924: LD_INT 48
15926: PPUSH
15927: LD_INT 0
15929: PPUSH
15930: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15934: LD_VAR 0 1
15938: PUSH
15939: LD_INT 1
15941: ARRAY
15942: PPUSH
15943: LD_INT 2
15945: PPUSH
15946: LD_INT 32
15948: PPUSH
15949: LD_INT 38
15951: PPUSH
15952: LD_INT 2
15954: PPUSH
15955: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15959: LD_VAR 0 1
15963: PUSH
15964: LD_INT 1
15966: ARRAY
15967: PPUSH
15968: LD_INT 26
15970: PPUSH
15971: LD_INT 39
15973: PPUSH
15974: LD_INT 55
15976: PPUSH
15977: LD_INT 3
15979: PPUSH
15980: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15984: LD_VAR 0 1
15988: PUSH
15989: LD_INT 1
15991: ARRAY
15992: PPUSH
15993: LD_INT 32
15995: PPUSH
15996: LD_INT 31
15998: PPUSH
15999: LD_INT 31
16001: PPUSH
16002: LD_INT 3
16004: PPUSH
16005: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16009: LD_VAR 0 1
16013: PUSH
16014: LD_INT 1
16016: ARRAY
16017: PPUSH
16018: LD_INT 31
16020: PPUSH
16021: LD_INT 50
16023: PPUSH
16024: LD_INT 51
16026: PPUSH
16027: LD_INT 4
16029: PPUSH
16030: CALL_OW 205
// end ; end_of_file
16034: PPOPN 1
16036: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16037: LD_INT 0
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16046: LD_ADDR_VAR 0 3
16050: PUSH
16051: LD_INT 22
16053: PUSH
16054: LD_INT 6
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 21
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 25
16073: PUSH
16074: LD_INT 1
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 3
16083: PUSH
16084: LD_INT 54
16086: PUSH
16087: EMPTY
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16105: LD_ADDR_VAR 0 7
16109: PUSH
16110: LD_INT 22
16112: PUSH
16113: LD_INT 6
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 25
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 54
16142: PUSH
16143: EMPTY
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: PPUSH
16152: CALL_OW 69
16156: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16157: LD_ADDR_VAR 0 4
16161: PUSH
16162: LD_INT 22
16164: PUSH
16165: LD_INT 6
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 21
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 25
16184: PUSH
16185: LD_INT 2
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 69
16201: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16202: LD_ADDR_VAR 0 6
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 6
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 21
16219: PUSH
16220: LD_INT 1
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 25
16229: PUSH
16230: LD_INT 4
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 69
16246: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16247: LD_ADDR_VAR 0 8
16251: PUSH
16252: LD_INT 22
16254: PUSH
16255: LD_INT 6
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 21
16264: PUSH
16265: LD_INT 2
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 34
16274: PUSH
16275: LD_INT 51
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: PPUSH
16287: CALL_OW 69
16291: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 255
16301: PUSH
16302: LD_INT 6
16304: EQUAL
16305: PUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 266
16315: PUSH
16316: LD_INT 0
16318: EQUAL
16319: AND
16320: IFFALSE 16340
// begin ruPDepot = building ;
16322: LD_ADDR_EXP 21
16326: PUSH
16327: LD_VAR 0 1
16331: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16332: LD_ADDR_EXP 20
16336: PUSH
16337: LD_INT 1
16339: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16340: LD_VAR 0 1
16344: PPUSH
16345: CALL_OW 266
16349: PUSH
16350: LD_INT 4
16352: EQUAL
16353: PUSH
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 255
16363: PUSH
16364: LD_INT 6
16366: EQUAL
16367: AND
16368: IFFALSE 16401
// for i in tmpSold do
16370: LD_ADDR_VAR 0 2
16374: PUSH
16375: LD_VAR 0 3
16379: PUSH
16380: FOR_IN
16381: IFFALSE 16399
// ComEnterUnit ( i , building ) ;
16383: LD_VAR 0 2
16387: PPUSH
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 120
16397: GO 16380
16399: POP
16400: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 266
16410: PUSH
16411: LD_INT 6
16413: EQUAL
16414: PUSH
16415: LD_VAR 0 1
16419: PPUSH
16420: CALL_OW 255
16424: PUSH
16425: LD_INT 6
16427: EQUAL
16428: AND
16429: IFFALSE 16487
// begin for i in tmpSci do
16431: LD_ADDR_VAR 0 2
16435: PUSH
16436: LD_VAR 0 6
16440: PUSH
16441: FOR_IN
16442: IFFALSE 16460
// ComEnterUnit ( i , building ) ;
16444: LD_VAR 0 2
16448: PPUSH
16449: LD_VAR 0 1
16453: PPUSH
16454: CALL_OW 120
16458: GO 16441
16460: POP
16461: POP
// ResAllTechs ( 6 , building , 3 ) ;
16462: LD_INT 6
16464: PPUSH
16465: LD_VAR 0 1
16469: PPUSH
16470: LD_INT 3
16472: PPUSH
16473: CALL 5552 0 3
// ruPLab = building ;
16477: LD_ADDR_EXP 22
16481: PUSH
16482: LD_VAR 0 1
16486: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16487: LD_VAR 0 1
16491: PPUSH
16492: CALL_OW 266
16496: PUSH
16497: LD_INT 2
16499: EQUAL
16500: PUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 255
16510: PUSH
16511: LD_INT 6
16513: EQUAL
16514: AND
16515: IFFALSE 16566
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16517: LD_ADDR_VAR 0 5
16521: PUSH
16522: LD_VAR 0 8
16526: PUSH
16527: LD_INT 1
16529: ARRAY
16530: PPUSH
16531: CALL_OW 313
16535: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16536: LD_VAR 0 5
16540: PPUSH
16541: CALL_OW 121
// wait ( 0 0$1 ) ;
16545: LD_INT 35
16547: PPUSH
16548: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16552: LD_VAR 0 5
16556: PPUSH
16557: LD_VAR 0 1
16561: PPUSH
16562: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL_OW 266
16575: PUSH
16576: LD_INT 32
16578: EQUAL
16579: PUSH
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 255
16589: PUSH
16590: LD_INT 6
16592: EQUAL
16593: AND
16594: IFFALSE 16646
// begin ComPlaceWeapon ( building , 42 ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_INT 42
16603: PPUSH
16604: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16608: LD_VAR 0 7
16612: PUSH
16613: LD_INT 1
16615: ARRAY
16616: PPUSH
16617: CALL_OW 122
// wait ( 0 0$1 ) ;
16621: LD_INT 35
16623: PPUSH
16624: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16628: LD_VAR 0 7
16632: PUSH
16633: LD_INT 1
16635: ARRAY
16636: PPUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 266
16655: PUSH
16656: LD_INT 31
16658: EQUAL
16659: PUSH
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 255
16669: PUSH
16670: LD_INT 6
16672: EQUAL
16673: AND
16674: IFFALSE 16740
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16676: LD_VAR 0 7
16680: PUSH
16681: LD_INT 2
16683: ARRAY
16684: PPUSH
16685: CALL_OW 122
// wait ( 0 0$1 ) ;
16689: LD_INT 35
16691: PPUSH
16692: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16696: LD_VAR 0 7
16700: PUSH
16701: LD_INT 2
16703: ARRAY
16704: PPUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16714: LD_VAR 0 4
16718: PUSH
16719: LD_INT 1
16721: ARRAY
16722: PPUSH
16723: LD_EXP 21
16727: PPUSH
16728: CALL_OW 120
// baseReadyToBuild = 2 ;
16732: LD_ADDR_EXP 20
16736: PUSH
16737: LD_INT 2
16739: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16740: LD_VAR 0 1
16744: PPUSH
16745: CALL_OW 266
16749: PUSH
16750: LD_INT 32
16752: EQUAL
16753: PUSH
16754: LD_VAR 0 1
16758: PPUSH
16759: CALL_OW 255
16763: PUSH
16764: LD_INT 1
16766: EQUAL
16767: AND
16768: PUSH
16769: LD_EXP 32
16773: PUSH
16774: LD_INT 0
16776: EQUAL
16777: AND
16778: IFFALSE 17023
// begin bunkerDialog = 1 ;
16780: LD_ADDR_EXP 32
16784: PUSH
16785: LD_INT 1
16787: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16788: LD_EXP 11
16792: PPUSH
16793: CALL_OW 302
16797: IFFALSE 16813
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16799: LD_EXP 11
16803: PPUSH
16804: LD_STRING D11-Eng1-1
16806: PPUSH
16807: CALL_OW 88
// end else
16811: GO 17009
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16813: LD_INT 22
16815: PUSH
16816: LD_INT 1
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 21
16825: PUSH
16826: LD_INT 1
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 25
16835: PUSH
16836: LD_INT 3
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 26
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PPUSH
16859: CALL_OW 69
16863: PUSH
16864: LD_EXP 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: PUSH
16872: LD_INT 0
16874: GREATER
16875: DIFF
16876: IFFALSE 16950
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16878: LD_INT 22
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 21
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 25
16900: PUSH
16901: LD_INT 2
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 26
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: PPUSH
16924: CALL_OW 69
16928: PUSH
16929: LD_EXP 1
16933: PUSH
16934: EMPTY
16935: LIST
16936: DIFF
16937: PPUSH
16938: LD_STRING D11-Eng1-1
16940: PPUSH
16941: LD_STRING D11-Eng1-1
16943: PPUSH
16944: CALL 4113 0 3
// end else
16948: GO 17009
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16950: LD_INT 22
16952: PUSH
16953: LD_INT 1
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 21
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 26
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: PPUSH
16985: CALL_OW 69
16989: PUSH
16990: LD_EXP 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: DIFF
16998: PPUSH
16999: LD_STRING D11-Eng1-1
17001: PPUSH
17002: LD_STRING D11-Eng1-1
17004: PPUSH
17005: CALL 4113 0 3
// end ; end ; if energyVDialog = 0 then
17009: LD_EXP 33
17013: PUSH
17014: LD_INT 0
17016: EQUAL
17017: IFFALSE 17023
// EnergyDialog ;
17019: CALL 4604 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17023: LD_VAR 0 1
17027: PPUSH
17028: CALL_OW 266
17032: PUSH
17033: LD_INT 29
17035: EQUAL
17036: PUSH
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 255
17046: PUSH
17047: LD_INT 1
17049: EQUAL
17050: AND
17051: IFFALSE 17061
// buildOil = 1 ;
17053: LD_ADDR_EXP 34
17057: PUSH
17058: LD_INT 1
17060: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 266
17070: PUSH
17071: LD_INT 26
17073: EQUAL
17074: PUSH
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 255
17084: PUSH
17085: LD_INT 1
17087: EQUAL
17088: AND
17089: IFFALSE 17099
// buildPower = 1 ;
17091: LD_ADDR_EXP 35
17095: PUSH
17096: LD_INT 1
17098: ST_TO_ADDR
// end ;
17099: PPOPN 8
17101: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17102: LD_VAR 0 1
17106: PPUSH
17107: CALL_OW 266
17111: PUSH
17112: LD_INT 3
17114: EQUAL
17115: PUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 255
17125: PUSH
17126: LD_INT 1
17128: EQUAL
17129: AND
17130: PUSH
17131: LD_EXP 31
17135: PUSH
17136: LD_INT 0
17138: EQUAL
17139: AND
17140: IFFALSE 17456
// begin factoryDialog = 1 ;
17142: LD_ADDR_EXP 31
17146: PUSH
17147: LD_INT 1
17149: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17150: LD_INT 22
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 21
17162: PUSH
17163: LD_INT 3
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 30
17172: PUSH
17173: LD_INT 3
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 24
17182: PUSH
17183: LD_INT 1000
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: PPUSH
17196: CALL_OW 69
17200: PUSH
17201: LD_INT 1
17203: ARRAY
17204: PPUSH
17205: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17209: LD_EXP 1
17213: PPUSH
17214: LD_STRING D9a-JMM-1
17216: PPUSH
17217: CALL_OW 88
// if IsOK ( Campell ) then
17221: LD_EXP 12
17225: PPUSH
17226: CALL_OW 302
17230: IFFALSE 17246
// begin Say ( Campell , D9a-Mech1-1 ) ;
17232: LD_EXP 12
17236: PPUSH
17237: LD_STRING D9a-Mech1-1
17239: PPUSH
17240: CALL_OW 88
// end else
17244: GO 17442
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17246: LD_INT 22
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 21
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 25
17268: PUSH
17269: LD_INT 3
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 26
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: PUSH
17297: LD_EXP 1
17301: PUSH
17302: EMPTY
17303: LIST
17304: PUSH
17305: LD_INT 0
17307: GREATER
17308: DIFF
17309: IFFALSE 17383
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17311: LD_INT 22
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 21
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 25
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 26
17343: PUSH
17344: LD_INT 1
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: PPUSH
17357: CALL_OW 69
17361: PUSH
17362: LD_EXP 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: DIFF
17370: PPUSH
17371: LD_STRING D9a-Mech1-1
17373: PPUSH
17374: LD_STRING D9a-Mech1-1
17376: PPUSH
17377: CALL 4113 0 3
// end else
17381: GO 17442
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17383: LD_INT 22
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 21
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 26
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: PPUSH
17418: CALL_OW 69
17422: PUSH
17423: LD_EXP 1
17427: PUSH
17428: EMPTY
17429: LIST
17430: DIFF
17431: PPUSH
17432: LD_STRING D9a-Mech1-1
17434: PPUSH
17435: LD_STRING D9a-Mech1-1
17437: PPUSH
17438: CALL 4113 0 3
// end ; end ; if energyVDialog = 0 then
17442: LD_EXP 33
17446: PUSH
17447: LD_INT 0
17449: EQUAL
17450: IFFALSE 17456
// EnergyDialog ;
17452: CALL 4604 0 0
// end ; end ;
17456: PPOPN 1
17458: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 247
17468: PUSH
17469: LD_INT 1
17471: EQUAL
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 255
17482: PUSH
17483: LD_INT 1
17485: EQUAL
17486: AND
17487: IFFALSE 17503
// lostCounter = lostCounter + 1 ;
17489: LD_ADDR_EXP 38
17493: PUSH
17494: LD_EXP 38
17498: PUSH
17499: LD_INT 1
17501: PLUS
17502: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 257
17512: PUSH
17513: LD_INT 3
17515: EQUAL
17516: PUSH
17517: LD_VAR 0 1
17521: PPUSH
17522: CALL_OW 255
17526: PUSH
17527: LD_INT 3
17529: EQUAL
17530: AND
17531: PUSH
17532: LD_INT 24
17534: PPUSH
17535: CALL_OW 302
17539: AND
17540: PUSH
17541: LD_INT 24
17543: PPUSH
17544: CALL_OW 255
17548: PUSH
17549: LD_INT 3
17551: EQUAL
17552: AND
17553: IFFALSE 17621
// begin uc_side = 3 ;
17555: LD_ADDR_OWVAR 20
17559: PUSH
17560: LD_INT 3
17562: ST_TO_ADDR
// uc_nation = 3 ;
17563: LD_ADDR_OWVAR 21
17567: PUSH
17568: LD_INT 3
17570: ST_TO_ADDR
// hc_gallery :=  ;
17571: LD_ADDR_OWVAR 33
17575: PUSH
17576: LD_STRING 
17578: ST_TO_ADDR
// hc_name :=  ;
17579: LD_ADDR_OWVAR 26
17583: PUSH
17584: LD_STRING 
17586: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17587: LD_INT 0
17589: PPUSH
17590: LD_EXP 16
17594: PPUSH
17595: LD_EXP 17
17599: PPUSH
17600: CALL_OW 12
17604: PPUSH
17605: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17609: CALL_OW 44
17613: PPUSH
17614: LD_INT 24
17616: PPUSH
17617: CALL_OW 52
// end ; end ;
17621: PPOPN 1
17623: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17624: LD_INT 0
17626: PPUSH
17627: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17628: LD_ADDR_VAR 0 4
17632: PUSH
17633: LD_INT 22
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PPUSH
17643: CALL_OW 69
17647: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17648: LD_VAR 0 1
17652: PUSH
17653: LD_INT 1
17655: EQUAL
17656: PUSH
17657: LD_VAR 0 2
17661: PUSH
17662: LD_INT 6
17664: EQUAL
17665: AND
17666: PUSH
17667: LD_EXP 41
17671: PUSH
17672: LD_INT 1
17674: EQUAL
17675: AND
17676: IFFALSE 17731
// begin donaldsonCoopAttack = 0 ;
17678: LD_ADDR_EXP 41
17682: PUSH
17683: LD_INT 0
17685: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17686: LD_ADDR_VAR 0 3
17690: PUSH
17691: LD_INT 22
17693: PUSH
17694: LD_INT 4
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: EMPTY
17702: LIST
17703: PPUSH
17704: CALL_OW 69
17708: PUSH
17709: FOR_IN
17710: IFFALSE 17729
// ComAgressiveMove ( i , 52 , 64 ) ;
17712: LD_VAR 0 3
17716: PPUSH
17717: LD_INT 52
17719: PPUSH
17720: LD_INT 64
17722: PPUSH
17723: CALL_OW 114
17727: GO 17709
17729: POP
17730: POP
// end ; end ;
17731: PPOPN 4
17733: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 264
17743: PUSH
17744: LD_INT 53
17746: EQUAL
17747: IFFALSE 17832
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17749: LD_VAR 0 1
17753: PPUSH
17754: LD_INT 21
17756: PPUSH
17757: CALL 4820 0 2
// uc_side = 3 ;
17761: LD_ADDR_OWVAR 20
17765: PUSH
17766: LD_INT 3
17768: ST_TO_ADDR
// uc_nation = 3 ;
17769: LD_ADDR_OWVAR 21
17773: PUSH
17774: LD_INT 3
17776: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17777: LD_INT 0
17779: PPUSH
17780: LD_EXP 17
17784: PPUSH
17785: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17789: CALL_OW 44
17793: PPUSH
17794: LD_VAR 0 2
17798: PPUSH
17799: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17803: LD_VAR 0 1
17807: PPUSH
17808: LD_INT 6
17810: PPUSH
17811: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17815: LD_VAR 0 1
17819: PPUSH
17820: CALL_OW 313
17824: PPUSH
17825: LD_INT 6
17827: PPUSH
17828: CALL_OW 235
// end ; end ;
17832: PPOPN 2
17834: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17835: LD_INT 0
17837: PPUSH
17838: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 255
17848: PUSH
17849: LD_INT 3
17851: EQUAL
17852: PUSH
17853: LD_VAR 0 1
17857: PPUSH
17858: CALL_OW 247
17862: PUSH
17863: LD_INT 2
17865: EQUAL
17866: AND
17867: IFFALSE 17961
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 264
17878: PUSH
17879: LD_INT 42
17881: EQUAL
17882: PUSH
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 264
17892: PUSH
17893: LD_INT 43
17895: EQUAL
17896: OR
17897: PUSH
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL_OW 264
17907: PUSH
17908: LD_INT 44
17910: EQUAL
17911: OR
17912: IFFALSE 17961
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17914: LD_INT 24
17916: PPUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: CALL_OW 265
17926: PPUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 262
17936: PPUSH
17937: LD_VAR 0 1
17941: PPUSH
17942: CALL_OW 263
17946: PPUSH
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 264
17956: PPUSH
17957: CALL_OW 185
// end ;
17961: PPOPN 3
17963: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 255
17973: PUSH
17974: LD_INT 3
17976: EQUAL
17977: PUSH
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 255
17987: PUSH
17988: LD_INT 3
17990: EQUAL
17991: AND
17992: PUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 302
18002: AND
18003: IFFALSE 18045
// begin ComRepairVehicle ( human , vehicle ) ;
18005: LD_VAR 0 2
18009: PPUSH
18010: LD_VAR 0 1
18014: PPUSH
18015: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18019: LD_VAR 0 2
18023: PPUSH
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18033: LD_VAR 0 1
18037: PPUSH
18038: LD_INT 100
18040: PPUSH
18041: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18045: LD_VAR 0 1
18049: PPUSH
18050: CALL_OW 255
18054: PUSH
18055: LD_INT 3
18057: EQUAL
18058: PUSH
18059: LD_VAR 0 2
18063: PPUSH
18064: CALL_OW 255
18068: PUSH
18069: LD_INT 3
18071: EQUAL
18072: AND
18073: PUSH
18074: LD_INT 24
18076: PPUSH
18077: CALL_OW 302
18081: AND
18082: PUSH
18083: LD_VAR 0 1
18087: PPUSH
18088: CALL_OW 302
18092: NOT
18093: AND
18094: IFFALSE 18108
// ComEnterUnit ( human , rubfact0 ) ;
18096: LD_VAR 0 2
18100: PPUSH
18101: LD_INT 24
18103: PPUSH
18104: CALL_OW 120
// end ;
18108: PPOPN 2
18110: END
// on Command ( comandid ) do var i , j , tmp ;
18111: LD_INT 0
18113: PPUSH
18114: PPUSH
18115: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18116: LD_ADDR_VAR 0 2
18120: PUSH
18121: LD_INT 22
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: LD_INT 21
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 21
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: PUSH
18168: FOR_IN
18169: IFFALSE 18279
// begin if GetTaskList ( i ) > 0 then
18171: LD_VAR 0 2
18175: PPUSH
18176: CALL_OW 437
18180: PUSH
18181: LD_INT 0
18183: GREATER
18184: IFFALSE 18277
// begin for j = 1 to GetTaskList ( i ) do
18186: LD_ADDR_VAR 0 3
18190: PUSH
18191: DOUBLE
18192: LD_INT 1
18194: DEC
18195: ST_TO_ADDR
18196: LD_VAR 0 2
18200: PPUSH
18201: CALL_OW 437
18205: PUSH
18206: FOR_TO
18207: IFFALSE 18275
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18209: LD_ADDR_VAR 0 4
18213: PUSH
18214: LD_VAR 0 2
18218: PPUSH
18219: CALL_OW 437
18223: PUSH
18224: LD_VAR 0 3
18228: ARRAY
18229: PUSH
18230: LD_INT 4
18232: ARRAY
18233: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18234: LD_VAR 0 4
18238: PPUSH
18239: CALL_OW 255
18243: PUSH
18244: LD_INT 4
18246: EQUAL
18247: PUSH
18248: LD_VAR 0 4
18252: PPUSH
18253: CALL_OW 255
18257: PUSH
18258: LD_INT 0
18260: EQUAL
18261: OR
18262: IFFALSE 18273
// ComStop ( i ) ;
18264: LD_VAR 0 2
18268: PPUSH
18269: CALL_OW 141
// end ;
18273: GO 18206
18275: POP
18276: POP
// end ; end ;
18277: GO 18168
18279: POP
18280: POP
// end ; end_of_file
18281: PPOPN 4
18283: END
// every 10 10$0 do
18284: GO 18286
18286: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18287: LD_INT 5
18289: PPUSH
18290: LD_INT 3
18292: PPUSH
18293: LD_INT 2
18295: PPUSH
18296: LD_INT 5
18298: PPUSH
18299: CALL_OW 12
18303: PUSH
18304: LD_INT 2
18306: PUSH
18307: LD_INT 3
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: LD_OWVAR 67
18322: ARRAY
18323: PLUS
18324: PPUSH
18325: LD_INT 0
18327: PPUSH
18328: LD_INT 0
18330: PPUSH
18331: LD_INT 0
18333: PPUSH
18334: LD_INT 0
18336: PPUSH
18337: LD_EXP 16
18341: PPUSH
18342: LD_EXP 17
18346: PPUSH
18347: CALL_OW 12
18351: PPUSH
18352: LD_INT 4
18354: PPUSH
18355: LD_INT 14
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_INT 2
18363: PPUSH
18364: CALL 7405 0 12
// end ;
18368: END
// every 15 15$0 do
18369: GO 18371
18371: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18372: LD_INT 5
18374: PPUSH
18375: LD_INT 3
18377: PPUSH
18378: LD_INT 3
18380: PPUSH
18381: LD_INT 5
18383: PPUSH
18384: CALL_OW 12
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 3
18394: PUSH
18395: LD_INT 3
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: LIST
18402: PUSH
18403: LD_OWVAR 67
18407: ARRAY
18408: PLUS
18409: PPUSH
18410: LD_INT 0
18412: PPUSH
18413: LD_INT 0
18415: PPUSH
18416: LD_INT 0
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: LD_EXP 16
18426: PPUSH
18427: LD_EXP 17
18431: PPUSH
18432: CALL_OW 12
18436: PPUSH
18437: LD_INT 4
18439: PPUSH
18440: LD_INT 14
18442: PPUSH
18443: LD_INT 1
18445: PPUSH
18446: LD_INT 1
18448: PPUSH
18449: CALL 7405 0 12
// end ;
18453: END
// every 25 25$0 do
18454: GO 18456
18456: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18457: LD_INT 5
18459: PPUSH
18460: LD_INT 3
18462: PPUSH
18463: LD_INT 2
18465: PPUSH
18466: LD_INT 3
18468: PPUSH
18469: CALL_OW 12
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: LD_INT 3
18479: PUSH
18480: LD_INT 3
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: PUSH
18488: LD_OWVAR 67
18492: ARRAY
18493: PLUS
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 0
18500: PPUSH
18501: LD_INT 0
18503: PPUSH
18504: LD_INT 2
18506: PPUSH
18507: LD_EXP 16
18511: PPUSH
18512: LD_EXP 17
18516: PPUSH
18517: CALL_OW 12
18521: PPUSH
18522: LD_INT 4
18524: PPUSH
18525: LD_INT 14
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: LD_INT 1
18533: PPUSH
18534: CALL 7405 0 12
// end ;
18538: END
// every 26 26$0 do
18539: GO 18541
18541: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18542: LD_INT 5
18544: PPUSH
18545: LD_INT 3
18547: PPUSH
18548: LD_INT 1
18550: PPUSH
18551: LD_INT 3
18553: PPUSH
18554: CALL_OW 12
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: LD_OWVAR 67
18577: ARRAY
18578: PLUS
18579: PPUSH
18580: LD_INT 0
18582: PPUSH
18583: LD_INT 0
18585: PPUSH
18586: LD_INT 0
18588: PPUSH
18589: LD_INT 2
18591: PPUSH
18592: LD_EXP 16
18596: PPUSH
18597: LD_EXP 17
18601: PPUSH
18602: CALL_OW 12
18606: PPUSH
18607: LD_INT 4
18609: PPUSH
18610: LD_INT 14
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: LD_INT 2
18618: PPUSH
18619: CALL 7405 0 12
// end ;
18623: END
// every 25 25$0 do
18624: GO 18626
18626: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18627: LD_INT 4
18629: PPUSH
18630: LD_INT 5
18632: PPUSH
18633: LD_INT 3
18635: PUSH
18636: LD_INT 4
18638: PUSH
18639: LD_INT 5
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PUSH
18647: LD_OWVAR 67
18651: ARRAY
18652: PPUSH
18653: LD_EXP 16
18657: PPUSH
18658: LD_EXP 17
18662: PPUSH
18663: CALL_OW 12
18667: PPUSH
18668: LD_INT 3
18670: PPUSH
18671: LD_INT 1
18673: PPUSH
18674: LD_INT 1
18676: PPUSH
18677: LD_INT 42
18679: PUSH
18680: LD_INT 42
18682: PUSH
18683: LD_INT 43
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 42
18693: PUSH
18694: LD_INT 43
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 43
18703: PUSH
18704: LD_INT 43
18706: PUSH
18707: LD_INT 43
18709: PUSH
18710: LD_INT 44
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: PUSH
18724: LD_OWVAR 67
18728: ARRAY
18729: PPUSH
18730: EMPTY
18731: PPUSH
18732: EMPTY
18733: PPUSH
18734: LD_INT 1
18736: PPUSH
18737: CALL 9067 0 11
// end ; end_of_file
18741: END
// every 0 0$1 trigger startTimer = 1 do
18742: LD_EXP 30
18746: PUSH
18747: LD_INT 1
18749: EQUAL
18750: IFFALSE 18880
18752: GO 18754
18754: DISABLE
// begin enable ;
18755: ENABLE
// if timerStatus = 1 then
18756: LD_EXP 29
18760: PUSH
18761: LD_INT 1
18763: EQUAL
18764: IFFALSE 18797
// begin timeToSupport = timeToSupport - 0 0$01 ;
18766: LD_ADDR_EXP 28
18770: PUSH
18771: LD_EXP 28
18775: PUSH
18776: LD_INT 35
18778: MINUS
18779: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18780: LD_ADDR_OWVAR 47
18784: PUSH
18785: LD_STRING #Am04-1
18787: PUSH
18788: LD_EXP 28
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: ST_TO_ADDR
// end ; if timerStatus = 2 then
18797: LD_EXP 29
18801: PUSH
18802: LD_INT 2
18804: EQUAL
18805: IFFALSE 18838
// begin timeToSupport = timeToSupport - 0 0$01 ;
18807: LD_ADDR_EXP 28
18811: PUSH
18812: LD_EXP 28
18816: PUSH
18817: LD_INT 35
18819: MINUS
18820: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18821: LD_ADDR_OWVAR 47
18825: PUSH
18826: LD_STRING #Am04-2
18828: PUSH
18829: LD_EXP 28
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: ST_TO_ADDR
// end ; if timerStatus = 3 then
18838: LD_EXP 29
18842: PUSH
18843: LD_INT 3
18845: EQUAL
18846: IFFALSE 18862
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18848: LD_ADDR_EXP 27
18852: PUSH
18853: LD_EXP 27
18857: PUSH
18858: LD_INT 35
18860: MINUS
18861: ST_TO_ADDR
// end ; if timerStatus = 4 then
18862: LD_EXP 29
18866: PUSH
18867: LD_INT 4
18869: EQUAL
18870: IFFALSE 18880
// begin display_strings =  ;
18872: LD_ADDR_OWVAR 47
18876: PUSH
18877: LD_STRING 
18879: ST_TO_ADDR
// end ; end ; end_of_file
18880: END
// every 0 0$1 trigger IsDead ( JMM ) do
18881: LD_EXP 1
18885: PPUSH
18886: CALL_OW 301
18890: IFFALSE 18902
18892: GO 18894
18894: DISABLE
// YouLost ( JMM ) ;
18895: LD_STRING JMM
18897: PPUSH
18898: CALL_OW 104
18902: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18903: LD_INT 4
18905: PPUSH
18906: CALL_OW 301
18910: IFFALSE 18922
18912: GO 18914
18914: DISABLE
// YouLost ( Base ) ; end_of_file
18915: LD_STRING Base
18917: PPUSH
18918: CALL_OW 104
18922: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i , p ;
18923: LD_EXP 15
18927: PPUSH
18928: CALL_OW 301
18932: IFFALSE 19403
18934: GO 18936
18936: DISABLE
18937: LD_INT 0
18939: PPUSH
18940: PPUSH
// begin AIEnable = 0 ;
18941: LD_ADDR_EXP 37
18945: PUSH
18946: LD_INT 0
18948: ST_TO_ADDR
// escapeAvalaible = 1 ;
18949: LD_ADDR_EXP 40
18953: PUSH
18954: LD_INT 1
18956: ST_TO_ADDR
// InGameOn ;
18957: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18961: LD_INT 3
18963: PPUSH
18964: LD_INT 1
18966: PPUSH
18967: LD_INT 1
18969: PPUSH
18970: LD_INT 0
18972: PPUSH
18973: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18977: LD_INT 6
18979: PPUSH
18980: LD_INT 1
18982: PPUSH
18983: LD_INT 1
18985: PPUSH
18986: LD_INT 0
18988: PPUSH
18989: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18993: LD_INT 5
18995: PPUSH
18996: LD_INT 1
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: LD_INT 0
19004: PPUSH
19005: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19009: LD_INT 3
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19019: LD_INT 97
19021: PPUSH
19022: LD_INT 91
19024: PPUSH
19025: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19029: LD_INT 22
19031: PUSH
19032: LD_INT 3
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 21
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: CALL_OW 69
19057: PPUSH
19058: CALL_OW 121
// wait ( 0 0$01 ) ;
19062: LD_INT 35
19064: PPUSH
19065: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19069: LD_INT 22
19071: PUSH
19072: LD_INT 3
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 21
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PPUSH
19093: CALL_OW 69
19097: PPUSH
19098: LD_INT 124
19100: PPUSH
19101: LD_INT 98
19103: PPUSH
19104: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19108: LD_INT 22
19110: PUSH
19111: LD_INT 5
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 21
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: PPUSH
19137: CALL_OW 121
// wait ( 0 0$01 ) ;
19141: LD_INT 35
19143: PPUSH
19144: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19148: LD_INT 22
19150: PUSH
19151: LD_INT 5
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 21
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: PPUSH
19177: LD_INT 124
19179: PPUSH
19180: LD_INT 98
19182: PPUSH
19183: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19187: LD_INT 22
19189: PUSH
19190: LD_INT 6
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 21
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PPUSH
19211: CALL_OW 69
19215: PPUSH
19216: CALL_OW 121
// wait ( 0 0$01 ) ;
19220: LD_INT 35
19222: PPUSH
19223: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19227: LD_INT 22
19229: PUSH
19230: LD_INT 6
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 21
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 69
19255: PPUSH
19256: LD_INT 124
19258: PPUSH
19259: LD_INT 98
19261: PPUSH
19262: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19266: LD_INT 22
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 21
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PPUSH
19290: CALL_OW 69
19294: PPUSH
19295: LD_INT 124
19297: PPUSH
19298: LD_INT 98
19300: PPUSH
19301: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19305: LD_INT 124
19307: PPUSH
19308: LD_INT 98
19310: PPUSH
19311: CALL_OW 84
// p := 0 0$0 ;
19315: LD_ADDR_VAR 0 2
19319: PUSH
19320: LD_INT 0
19322: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19323: LD_INT 35
19325: PPUSH
19326: CALL_OW 67
// p := p + 0 0$1 ;
19330: LD_ADDR_VAR 0 2
19334: PUSH
19335: LD_VAR 0 2
19339: PUSH
19340: LD_INT 35
19342: PLUS
19343: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19344: LD_INT 23
19346: PUSH
19347: LD_INT 3
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 24
19366: PUSH
19367: LD_INT 250
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: PPUSH
19379: CALL_OW 69
19383: PUSH
19384: LD_INT 0
19386: EQUAL
19387: PUSH
19388: LD_VAR 0 2
19392: PUSH
19393: LD_INT 245
19395: GREATEREQUAL
19396: OR
19397: IFFALSE 19323
// FinishMission ;
19399: CALL 19576 0 0
// end ;
19403: PPOPN 2
19405: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19406: LD_EXP 40
19410: PUSH
19411: LD_INT 1
19413: EQUAL
19414: IFFALSE 19573
19416: GO 19418
19418: DISABLE
19419: LD_INT 0
19421: PPUSH
// begin enable ;
19422: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19423: LD_ADDR_VAR 0 1
19427: PUSH
19428: LD_INT 22
19430: PUSH
19431: LD_INT 3
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PPUSH
19438: CALL_OW 69
19442: PUSH
19443: FOR_IN
19444: IFFALSE 19471
// if IsInArea ( i , RussianEscape ) then
19446: LD_VAR 0 1
19450: PPUSH
19451: LD_INT 5
19453: PPUSH
19454: CALL_OW 308
19458: IFFALSE 19469
// RemoveUnit ( i ) ;
19460: LD_VAR 0 1
19464: PPUSH
19465: CALL_OW 64
19469: GO 19443
19471: POP
19472: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19473: LD_ADDR_VAR 0 1
19477: PUSH
19478: LD_INT 22
19480: PUSH
19481: LD_INT 5
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PPUSH
19488: CALL_OW 69
19492: PUSH
19493: FOR_IN
19494: IFFALSE 19521
// if IsInArea ( i , RussianEscape ) then
19496: LD_VAR 0 1
19500: PPUSH
19501: LD_INT 5
19503: PPUSH
19504: CALL_OW 308
19508: IFFALSE 19519
// RemoveUnit ( i ) ;
19510: LD_VAR 0 1
19514: PPUSH
19515: CALL_OW 64
19519: GO 19493
19521: POP
19522: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19523: LD_ADDR_VAR 0 1
19527: PUSH
19528: LD_INT 22
19530: PUSH
19531: LD_INT 6
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: PUSH
19543: FOR_IN
19544: IFFALSE 19571
// if IsInArea ( i , RussianEscape ) then
19546: LD_VAR 0 1
19550: PPUSH
19551: LD_INT 5
19553: PPUSH
19554: CALL_OW 308
19558: IFFALSE 19569
// RemoveUnit ( i ) ;
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 64
19569: GO 19543
19571: POP
19572: POP
// end ;
19573: PPOPN 1
19575: END
// export function FinishMission ; var tmp ; begin
19576: LD_INT 0
19578: PPUSH
19579: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19580: LD_INT 69
19582: PPUSH
19583: LD_INT 1
19585: PPUSH
19586: CALL_OW 321
19590: PPUSH
19591: LD_STRING GatlingInGamma
19593: PPUSH
19594: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19598: LD_EXP 34
19602: PUSH
19603: LD_INT 1
19605: EQUAL
19606: PUSH
19607: LD_EXP 35
19611: PUSH
19612: LD_INT 1
19614: EQUAL
19615: AND
19616: IFFALSE 19630
// begin AddMedal ( oil , 1 ) ;
19618: LD_STRING oil
19620: PPUSH
19621: LD_INT 1
19623: PPUSH
19624: CALL_OW 101
// end else
19628: GO 19723
// begin if buildOil = 1 and buildPower = 0 then
19630: LD_EXP 34
19634: PUSH
19635: LD_INT 1
19637: EQUAL
19638: PUSH
19639: LD_EXP 35
19643: PUSH
19644: LD_INT 0
19646: EQUAL
19647: AND
19648: IFFALSE 19661
// AddMedal ( oil , - 1 ) ;
19650: LD_STRING oil
19652: PPUSH
19653: LD_INT 1
19655: NEG
19656: PPUSH
19657: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19661: LD_EXP 34
19665: PUSH
19666: LD_INT 0
19668: EQUAL
19669: PUSH
19670: LD_EXP 35
19674: PUSH
19675: LD_INT 1
19677: EQUAL
19678: AND
19679: IFFALSE 19692
// AddMedal ( oil , - 2 ) ;
19681: LD_STRING oil
19683: PPUSH
19684: LD_INT 2
19686: NEG
19687: PPUSH
19688: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19692: LD_EXP 34
19696: PUSH
19697: LD_INT 0
19699: EQUAL
19700: PUSH
19701: LD_EXP 35
19705: PUSH
19706: LD_INT 0
19708: EQUAL
19709: AND
19710: IFFALSE 19723
// AddMedal ( oil , - 3 ) ;
19712: LD_STRING oil
19714: PPUSH
19715: LD_INT 3
19717: NEG
19718: PPUSH
19719: CALL_OW 101
// end ; if lostCounter > 3 then
19723: LD_EXP 38
19727: PUSH
19728: LD_INT 3
19730: GREATER
19731: IFFALSE 19746
// begin AddMedal ( deaths , - 1 ) ;
19733: LD_STRING deaths
19735: PPUSH
19736: LD_INT 1
19738: NEG
19739: PPUSH
19740: CALL_OW 101
// end else
19744: GO 19756
// begin AddMedal ( deaths , 1 ) ;
19746: LD_STRING deaths
19748: PPUSH
19749: LD_INT 1
19751: PPUSH
19752: CALL_OW 101
// end ; if honor = 1 then
19756: LD_EXP 39
19760: PUSH
19761: LD_INT 1
19763: EQUAL
19764: IFFALSE 19778
// begin AddMedal ( honour , 1 ) ;
19766: LD_STRING honour
19768: PPUSH
19769: LD_INT 1
19771: PPUSH
19772: CALL_OW 101
// end else
19776: GO 19789
// begin AddMedal ( honour , - 1 ) ;
19778: LD_STRING honour
19780: PPUSH
19781: LD_INT 1
19783: NEG
19784: PPUSH
19785: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19789: LD_STRING Main
19791: PPUSH
19792: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19796: LD_INT 22
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 23
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 21
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: LIST
19830: PPUSH
19831: CALL_OW 69
19835: PPUSH
19836: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19840: LD_EXP 1
19844: PPUSH
19845: LD_EXP 44
19849: PUSH
19850: LD_STRING JMM
19852: STR
19853: PPUSH
19854: CALL_OW 38
// if IsOK ( Bobby ) then
19858: LD_EXP 2
19862: PPUSH
19863: CALL_OW 302
19867: IFFALSE 19887
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19869: LD_EXP 2
19873: PPUSH
19874: LD_EXP 44
19878: PUSH
19879: LD_STRING Bobby
19881: STR
19882: PPUSH
19883: CALL_OW 38
// if IsOK ( Cyrus ) then
19887: LD_EXP 3
19891: PPUSH
19892: CALL_OW 302
19896: IFFALSE 19916
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19898: LD_EXP 3
19902: PPUSH
19903: LD_EXP 44
19907: PUSH
19908: LD_STRING Cyrus
19910: STR
19911: PPUSH
19912: CALL_OW 38
// if IsOK ( Lisa ) then
19916: LD_EXP 4
19920: PPUSH
19921: CALL_OW 302
19925: IFFALSE 19945
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19927: LD_EXP 4
19931: PPUSH
19932: LD_EXP 44
19936: PUSH
19937: LD_STRING Lisa
19939: STR
19940: PPUSH
19941: CALL_OW 38
// if IsOK ( Brown ) then
19945: LD_EXP 7
19949: PPUSH
19950: CALL_OW 302
19954: IFFALSE 19974
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19956: LD_EXP 7
19960: PPUSH
19961: LD_EXP 44
19965: PUSH
19966: LD_STRING Brown
19968: STR
19969: PPUSH
19970: CALL_OW 38
// if IsOK ( Donaldson ) then
19974: LD_EXP 13
19978: PPUSH
19979: CALL_OW 302
19983: IFFALSE 20003
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19985: LD_EXP 13
19989: PPUSH
19990: LD_EXP 44
19994: PUSH
19995: LD_STRING Donaldson
19997: STR
19998: PPUSH
19999: CALL_OW 38
// if IsOK ( Frank ) then
20003: LD_EXP 5
20007: PPUSH
20008: CALL_OW 302
20012: IFFALSE 20032
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20014: LD_EXP 5
20018: PPUSH
20019: LD_EXP 44
20023: PUSH
20024: LD_STRING Frank
20026: STR
20027: PPUSH
20028: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20032: LD_INT 50
20034: PUSH
20035: EMPTY
20036: LIST
20037: PUSH
20038: LD_INT 22
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: PUSH
20068: LD_EXP 1
20072: PUSH
20073: LD_EXP 2
20077: PUSH
20078: LD_EXP 3
20082: PUSH
20083: LD_EXP 4
20087: PUSH
20088: LD_EXP 7
20092: PUSH
20093: LD_EXP 13
20097: PUSH
20098: LD_EXP 5
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: DIFF
20112: PPUSH
20113: LD_STRING 04_other_survivors
20115: PPUSH
20116: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20120: LD_INT 22
20122: PPUSH
20123: CALL 20136 0 1
// YouWin ;
20127: CALL_OW 103
// end ;
20131: LD_VAR 0 1
20135: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20136: LD_INT 0
20138: PPUSH
20139: PPUSH
20140: PPUSH
20141: PPUSH
// gammaBase = [ ] ;
20142: LD_ADDR_VAR 0 4
20146: PUSH
20147: EMPTY
20148: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20149: LD_ADDR_VAR 0 5
20153: PUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: LD_INT 22
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 21
20171: PUSH
20172: LD_INT 3
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 50
20181: PUSH
20182: EMPTY
20183: LIST
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: LIST
20189: PPUSH
20190: CALL_OW 70
20194: ST_TO_ADDR
// for i in buildings do
20195: LD_ADDR_VAR 0 3
20199: PUSH
20200: LD_VAR 0 5
20204: PUSH
20205: FOR_IN
20206: IFFALSE 20543
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20208: LD_VAR 0 3
20212: PPUSH
20213: CALL_OW 266
20217: PUSH
20218: LD_INT 6
20220: PUSH
20221: LD_INT 7
20223: PUSH
20224: LD_INT 8
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: IN
20232: IFFALSE 20346
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20234: LD_ADDR_VAR 0 4
20238: PUSH
20239: LD_VAR 0 4
20243: PUSH
20244: LD_VAR 0 3
20248: PPUSH
20249: CALL_OW 266
20253: PUSH
20254: LD_VAR 0 3
20258: PPUSH
20259: CALL_OW 250
20263: PUSH
20264: LD_VAR 0 3
20268: PPUSH
20269: CALL_OW 251
20273: PUSH
20274: LD_VAR 0 3
20278: PPUSH
20279: CALL_OW 254
20283: PUSH
20284: LD_VAR 0 3
20288: PPUSH
20289: CALL_OW 267
20293: PUSH
20294: LD_VAR 0 3
20298: PPUSH
20299: CALL_OW 248
20303: PUSH
20304: LD_VAR 0 3
20308: PPUSH
20309: LD_INT 1
20311: PPUSH
20312: CALL_OW 268
20316: PUSH
20317: LD_VAR 0 3
20321: PPUSH
20322: LD_INT 2
20324: PPUSH
20325: CALL_OW 268
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: ADD
20343: ST_TO_ADDR
20344: GO 20541
// if GetBType ( i ) in [ b_bunker ] then
20346: LD_VAR 0 3
20350: PPUSH
20351: CALL_OW 266
20355: PUSH
20356: LD_INT 32
20358: PUSH
20359: EMPTY
20360: LIST
20361: IN
20362: IFFALSE 20459
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20364: LD_ADDR_VAR 0 4
20368: PUSH
20369: LD_VAR 0 4
20373: PUSH
20374: LD_VAR 0 3
20378: PPUSH
20379: CALL_OW 266
20383: PUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: CALL_OW 250
20393: PUSH
20394: LD_VAR 0 3
20398: PPUSH
20399: CALL_OW 251
20403: PUSH
20404: LD_VAR 0 3
20408: PPUSH
20409: CALL_OW 254
20413: PUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: CALL_OW 267
20423: PUSH
20424: LD_VAR 0 3
20428: PPUSH
20429: CALL_OW 248
20433: PUSH
20434: LD_VAR 0 3
20438: PPUSH
20439: CALL_OW 269
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: ADD
20456: ST_TO_ADDR
20457: GO 20541
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20459: LD_ADDR_VAR 0 4
20463: PUSH
20464: LD_VAR 0 4
20468: PUSH
20469: LD_VAR 0 3
20473: PPUSH
20474: CALL_OW 266
20478: PUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: CALL_OW 250
20488: PUSH
20489: LD_VAR 0 3
20493: PPUSH
20494: CALL_OW 251
20498: PUSH
20499: LD_VAR 0 3
20503: PPUSH
20504: CALL_OW 254
20508: PUSH
20509: LD_VAR 0 3
20513: PPUSH
20514: CALL_OW 267
20518: PUSH
20519: LD_VAR 0 3
20523: PPUSH
20524: CALL_OW 248
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: ADD
20540: ST_TO_ADDR
// end ;
20541: GO 20205
20543: POP
20544: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20545: LD_VAR 0 4
20549: PPUSH
20550: LD_STRING GammaBase
20552: PPUSH
20553: CALL_OW 39
// end ; end_of_file
20557: LD_VAR 0 2
20561: RET
// every 1 1$15 do
20562: GO 20564
20564: DISABLE
// begin if supply <= 13 and supply > 7 then
20565: LD_EXP 36
20569: PUSH
20570: LD_INT 13
20572: LESSEQUAL
20573: PUSH
20574: LD_EXP 36
20578: PUSH
20579: LD_INT 7
20581: GREATER
20582: AND
20583: IFFALSE 20606
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20585: LD_INT 3
20587: PPUSH
20588: LD_INT 5
20590: PPUSH
20591: CALL_OW 12
20595: PPUSH
20596: LD_INT 18
20598: PPUSH
20599: LD_INT 1
20601: PPUSH
20602: CALL_OW 55
// if supply <= 7 and supply > 4 then
20606: LD_EXP 36
20610: PUSH
20611: LD_INT 7
20613: LESSEQUAL
20614: PUSH
20615: LD_EXP 36
20619: PUSH
20620: LD_INT 4
20622: GREATER
20623: AND
20624: IFFALSE 20647
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20626: LD_INT 3
20628: PPUSH
20629: LD_INT 5
20631: PPUSH
20632: CALL_OW 12
20636: PPUSH
20637: LD_INT 19
20639: PPUSH
20640: LD_INT 1
20642: PPUSH
20643: CALL_OW 55
// if supply <= 4 and supply > 0 then
20647: LD_EXP 36
20651: PUSH
20652: LD_INT 4
20654: LESSEQUAL
20655: PUSH
20656: LD_EXP 36
20660: PUSH
20661: LD_INT 0
20663: GREATER
20664: AND
20665: IFFALSE 20688
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20667: LD_INT 3
20669: PPUSH
20670: LD_INT 5
20672: PPUSH
20673: CALL_OW 12
20677: PPUSH
20678: LD_INT 20
20680: PPUSH
20681: LD_INT 1
20683: PPUSH
20684: CALL_OW 55
// if supply > 0 then
20688: LD_EXP 36
20692: PUSH
20693: LD_INT 0
20695: GREATER
20696: IFFALSE 20713
// begin supply = supply - 1 ;
20698: LD_ADDR_EXP 36
20702: PUSH
20703: LD_EXP 36
20707: PUSH
20708: LD_INT 1
20710: MINUS
20711: ST_TO_ADDR
// enable ;
20712: ENABLE
// end ; end ;
20713: END
