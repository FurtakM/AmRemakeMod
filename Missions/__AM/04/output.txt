// export charactersList ; export JMM , Bobby , Cyrus , Lisa , Frank ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Brian , Jerry ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export donaldsonCoopAttack ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// ruSoldMinLevel = 0 ;
  12: LD_ADDR_EXP 18
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  20: LD_ADDR_EXP 19
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  28: LD_ADDR_EXP 20
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// debugMode = 0 ;
  36: LD_ADDR_EXP 40
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// firstRussianAttack = 0 ;
  44: LD_ADDR_EXP 22
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// saveDonaldson = 0 ;
  52: LD_ADDR_EXP 23
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// frankScoutBase = 0 ;
  60: LD_ADDR_EXP 24
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// harrAnswer = 0 ;
  68: LD_ADDR_EXP 25
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
  76: LD_ADDR_EXP 26
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
  84: LD_ADDR_EXP 27
  88: PUSH
  89: LD_INT 18900
  91: ST_TO_ADDR
// timerStatus = 0 ;
  92: LD_ADDR_EXP 28
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// startTimer = 0 ;
 100: LD_ADDR_EXP 29
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// factoryDialog = 0 ;
 108: LD_ADDR_EXP 30
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bunkerDialog = 0 ;
 116: LD_ADDR_EXP 31
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// energyVDialog = 0 ;
 124: LD_ADDR_EXP 32
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// buildOil = 0 ;
 132: LD_ADDR_EXP 33
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// buildPower = 0 ;
 140: LD_ADDR_EXP 34
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// supply = [ 11 , 12 , 14 ] [ Difficulty ] ;
 148: LD_ADDR_EXP 35
 152: PUSH
 153: LD_INT 11
 155: PUSH
 156: LD_INT 12
 158: PUSH
 159: LD_INT 14
 161: PUSH
 162: EMPTY
 163: LIST
 164: LIST
 165: LIST
 166: PUSH
 167: LD_OWVAR 67
 171: ARRAY
 172: ST_TO_ADDR
// AIEnable = 1 ;
 173: LD_ADDR_EXP 36
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 181: LD_ADDR_EXP 39
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lostCounter = 0 ;
 189: LD_ADDR_EXP 37
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// honor = 1 ;
 197: LD_ADDR_EXP 38
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// charactersList = [ JMM , Bobby , Cyrus , Lisa , Brian , Jerry , Frank , Brown , Dickens , Woodruff , Campell , Knight , Claptopn , Donaldson ] ;
 205: LD_ADDR_EXP 1
 209: PUSH
 210: LD_STRING JMM
 212: PUSH
 213: LD_STRING Bobby
 215: PUSH
 216: LD_STRING Cyrus
 218: PUSH
 219: LD_STRING Lisa
 221: PUSH
 222: LD_STRING Brian
 224: PUSH
 225: LD_STRING Jerry
 227: PUSH
 228: LD_STRING Frank
 230: PUSH
 231: LD_STRING Brown
 233: PUSH
 234: LD_STRING Dickens
 236: PUSH
 237: LD_STRING Woodruff
 239: PUSH
 240: LD_STRING Campell
 242: PUSH
 243: LD_STRING Knight
 245: PUSH
 246: LD_STRING Claptopn
 248: PUSH
 249: LD_STRING Donaldson
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: ST_TO_ADDR
// PrepareDifficulty ;
 268: CALL 3505 0 0
// PrepareRussianBase ;
 272: CALL 1832 0 0
// PrepareRussianCommander ;
 276: CALL 1783 0 0
// PrepareHeroes ;
 280: CALL 426 0 0
// SetBName ( ambdept0 , gamma ) ;
 284: LD_INT 4
 286: PPUSH
 287: LD_STRING gamma
 289: PPUSH
 290: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 294: LD_INT 21
 296: PPUSH
 297: LD_STRING fyodor
 299: PPUSH
 300: CALL_OW 500
// end ;
 304: END
// every 0 0$1 trigger debugMode = 1 do var i , c1 , c2 , c3 , c4 , c5 ;
 305: LD_EXP 40
 309: PUSH
 310: LD_INT 1
 312: EQUAL
 313: IFFALSE 423
 315: GO 317
 317: DISABLE
 318: LD_INT 0
 320: PPUSH
 321: PPUSH
 322: PPUSH
 323: PPUSH
 324: PPUSH
 325: PPUSH
// begin enable ;
 326: ENABLE
// fogoff ( true ) ;
 327: LD_INT 1
 329: PPUSH
 330: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 334: LD_ADDR_VAR 0 1
 338: PUSH
 339: LD_INT 22
 341: PUSH
 342: LD_INT 1
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PUSH
 349: LD_INT 21
 351: PUSH
 352: LD_INT 1
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PPUSH
 363: CALL_OW 69
 367: PUSH
 368: FOR_IN
 369: IFFALSE 385
// SetLives ( i , 1000 ) ;
 371: LD_VAR 0 1
 375: PPUSH
 376: LD_INT 1000
 378: PPUSH
 379: CALL_OW 234
 383: GO 368
 385: POP
 386: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 387: LD_INT 4
 389: PPUSH
 390: CALL_OW 274
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 9999
 400: PPUSH
 401: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 405: LD_INT 4
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 2
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
// end ; end_of_file
 423: PPOPN 6
 425: END
// export function PrepareHeroes ; var i ; begin
 426: LD_INT 0
 428: PPUSH
 429: PPUSH
// uc_side = 1 ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_INT 1
 437: ST_TO_ADDR
// uc_nation = 1 ;
 438: LD_ADDR_OWVAR 21
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 446: LD_ADDR_EXP 2
 450: PUSH
 451: LD_STRING JMM
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL 3046 0 2
 461: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 462: LD_ADDR_EXP 5
 466: PUSH
 467: LD_STRING Lisa
 469: PPUSH
 470: LD_INT 0
 472: PPUSH
 473: CALL 3046 0 2
 477: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 478: LD_ADDR_EXP 7
 482: PUSH
 483: LD_STRING Brown
 485: PPUSH
 486: LD_INT 0
 488: PPUSH
 489: CALL 3046 0 2
 493: ST_TO_ADDR
// Dickens = PrepareUnit ( JackDickens , false ) ;
 494: LD_ADDR_EXP 8
 498: PUSH
 499: LD_STRING JackDickens
 501: PPUSH
 502: LD_INT 0
 504: PPUSH
 505: CALL 3046 0 2
 509: ST_TO_ADDR
// Woodruff = PrepareUnit ( EveWoodruff , false ) ;
 510: LD_ADDR_EXP 9
 514: PUSH
 515: LD_STRING EveWoodruff
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL 3046 0 2
 525: ST_TO_ADDR
// Campell = PrepareUnit ( JackCampell , false ) ;
 526: LD_ADDR_EXP 12
 530: PUSH
 531: LD_STRING JackCampell
 533: PPUSH
 534: LD_INT 0
 536: PPUSH
 537: CALL 3046 0 2
 541: ST_TO_ADDR
// Knight = PrepareUnit ( GeorgeKnight , false ) ;
 542: LD_ADDR_EXP 10
 546: PUSH
 547: LD_STRING GeorgeKnight
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: CALL 3046 0 2
 557: ST_TO_ADDR
// Claptopn = PrepareUnit ( BillClaptopn , false ) ;
 558: LD_ADDR_EXP 11
 562: PUSH
 563: LD_STRING BillClaptopn
 565: PPUSH
 566: LD_INT 0
 568: PPUSH
 569: CALL 3046 0 2
 573: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 574: LD_ADDR_EXP 16
 578: PUSH
 579: LD_STRING Harisson
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL 3046 0 2
 589: ST_TO_ADDR
// uc_side = 4 ;
 590: LD_ADDR_OWVAR 20
 594: PUSH
 595: LD_INT 4
 597: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 598: LD_ADDR_EXP 13
 602: PUSH
 603: LD_STRING Donaldson
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL 3046 0 2
 613: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 614: LD_ADDR_EXP 6
 618: PUSH
 619: LD_STRING Frank
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL 3046 0 2
 629: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 630: LD_EXP 2
 634: PPUSH
 635: LD_INT 32
 637: PPUSH
 638: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 642: LD_EXP 7
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 657: LD_EXP 7
 661: PPUSH
 662: LD_INT 32
 664: PPUSH
 665: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 669: LD_EXP 8
 673: PPUSH
 674: LD_INT 2
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 684: LD_EXP 9
 688: PPUSH
 689: LD_INT 2
 691: PPUSH
 692: LD_INT 0
 694: PPUSH
 695: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 699: LD_EXP 12
 703: PPUSH
 704: LD_INT 2
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 714: LD_EXP 10
 718: PPUSH
 719: LD_INT 2
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 729: LD_EXP 11
 733: PPUSH
 734: LD_INT 2
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 744: LD_EXP 5
 748: PPUSH
 749: LD_INT 2
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 49
// end ;
 759: LD_VAR 0 1
 763: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 764: LD_INT 0
 766: PPUSH
 767: PPUSH
 768: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 769: LD_EXP 13
 773: PPUSH
 774: LD_INT 10
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 784: LD_EXP 6
 788: PPUSH
 789: LD_INT 10
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// uc_nation = 1 ;
 799: LD_ADDR_OWVAR 21
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// uc_side = 4 ;
 807: LD_ADDR_OWVAR 20
 811: PUSH
 812: LD_INT 4
 814: ST_TO_ADDR
// hc_class := 3 ;
 815: LD_ADDR_OWVAR 28
 819: PUSH
 820: LD_INT 3
 822: ST_TO_ADDR
// hc_sex := sex_male ;
 823: LD_ADDR_OWVAR 27
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 831: LD_ADDR_OWVAR 33
 835: PUSH
 836: LD_STRING SecondCharsGal
 838: ST_TO_ADDR
// hc_face_number := 53 ;
 839: LD_ADDR_OWVAR 34
 843: PUSH
 844: LD_INT 53
 846: ST_TO_ADDR
// hc_name := Freddie Warner ;
 847: LD_ADDR_OWVAR 26
 851: PUSH
 852: LD_STRING Freddie Warner
 854: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
 855: LD_ADDR_OWVAR 31
 859: PUSH
 860: LD_INT 1
 862: PUSH
 863: LD_INT 0
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: ST_TO_ADDR
// un = CreateHuman ;
 878: LD_ADDR_VAR 0 3
 882: PUSH
 883: CALL_OW 44
 887: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
 888: LD_VAR 0 3
 892: PPUSH
 893: LD_INT 10
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// hc_class := 1 ;
 903: LD_ADDR_OWVAR 28
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// hc_sex := sex_male ;
 911: LD_ADDR_OWVAR 27
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 919: LD_ADDR_OWVAR 33
 923: PUSH
 924: LD_STRING SecondCharsGal
 926: ST_TO_ADDR
// hc_face_number := 56 ;
 927: LD_ADDR_OWVAR 34
 931: PUSH
 932: LD_INT 56
 934: ST_TO_ADDR
// hc_name := Mel Brennan ;
 935: LD_ADDR_OWVAR 26
 939: PUSH
 940: LD_STRING Mel Brennan
 942: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
 943: LD_ADDR_OWVAR 31
 947: PUSH
 948: LD_INT 2
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: LD_INT 1
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: ST_TO_ADDR
// un = CreateHuman ;
 966: LD_ADDR_VAR 0 3
 970: PUSH
 971: CALL_OW 44
 975: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// for i := 1 to 1 do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_INT 1
1003: PUSH
1004: FOR_TO
1005: IFFALSE 1105
// begin hc_gallery =  ;
1007: LD_ADDR_OWVAR 33
1011: PUSH
1012: LD_STRING 
1014: ST_TO_ADDR
// hc_name =  ;
1015: LD_ADDR_OWVAR 26
1019: PUSH
1020: LD_STRING 
1022: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( [ 1 , 1 , 1 ] [ Difficulty ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ) ;
1023: LD_INT 1
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 1
1031: PUSH
1032: LD_INT 1
1034: PUSH
1035: LD_INT 1
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: LD_OWVAR 67
1047: ARRAY
1048: PPUSH
1049: LD_INT 3
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: LD_INT 2
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: PPUSH
1069: CALL_OW 12
1073: PPUSH
1074: CALL_OW 380
// un = CreateHuman ;
1078: LD_ADDR_VAR 0 3
1082: PUSH
1083: CALL_OW 44
1087: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1088: LD_VAR 0 3
1092: PPUSH
1093: LD_INT 10
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end ;
1103: GO 1004
1105: POP
1106: POP
// end ;
1107: LD_VAR 0 1
1111: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1112: LD_INT 0
1114: PPUSH
1115: PPUSH
1116: PPUSH
// uc_nation = 1 ;
1117: LD_ADDR_OWVAR 21
1121: PUSH
1122: LD_INT 1
1124: ST_TO_ADDR
// uc_side = 1 ;
1125: LD_ADDR_OWVAR 20
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// hc_class := 1 ;
1133: LD_ADDR_OWVAR 28
1137: PUSH
1138: LD_INT 1
1140: ST_TO_ADDR
// hc_sex := sex_male ;
1141: LD_ADDR_OWVAR 27
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1149: LD_ADDR_OWVAR 33
1153: PUSH
1154: LD_STRING SecondCharsGal
1156: ST_TO_ADDR
// hc_face_number := 59 ;
1157: LD_ADDR_OWVAR 34
1161: PUSH
1162: LD_INT 59
1164: ST_TO_ADDR
// hc_name := Max Gray ;
1165: LD_ADDR_OWVAR 26
1169: PUSH
1170: LD_STRING Max Gray
1172: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1173: LD_ADDR_OWVAR 31
1177: PUSH
1178: LD_INT 2
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: ST_TO_ADDR
// un = CreateHuman ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: CALL_OW 44
1205: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1206: LD_VAR 0 4
1210: PPUSH
1211: LD_INT 11
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 49
// hc_class := 1 ;
1221: LD_ADDR_OWVAR 28
1225: PUSH
1226: LD_INT 1
1228: ST_TO_ADDR
// hc_sex := sex_male ;
1229: LD_ADDR_OWVAR 27
1233: PUSH
1234: LD_INT 1
1236: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 54 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 54
1252: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1253: LD_ADDR_OWVAR 26
1257: PUSH
1258: LD_STRING Luigi Ghbellin
1260: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1261: LD_ADDR_OWVAR 31
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: ST_TO_ADDR
// un = CreateHuman ;
1284: LD_ADDR_VAR 0 4
1288: PUSH
1289: CALL_OW 44
1293: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1294: LD_VAR 0 4
1298: PPUSH
1299: LD_INT 11
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 49
// hc_class := 3 ;
1309: LD_ADDR_OWVAR 28
1313: PUSH
1314: LD_INT 3
1316: ST_TO_ADDR
// hc_sex := sex_male ;
1317: LD_ADDR_OWVAR 27
1321: PUSH
1322: LD_INT 1
1324: ST_TO_ADDR
// hc_gallery :=  ;
1325: LD_ADDR_OWVAR 33
1329: PUSH
1330: LD_STRING 
1332: ST_TO_ADDR
// hc_name :=  ;
1333: LD_ADDR_OWVAR 26
1337: PUSH
1338: LD_STRING 
1340: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1341: LD_ADDR_OWVAR 31
1345: PUSH
1346: LD_INT 0
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 3
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: ST_TO_ADDR
// un = CreateHuman ;
1364: LD_ADDR_VAR 0 4
1368: PUSH
1369: CALL_OW 44
1373: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1374: LD_VAR 0 4
1378: PPUSH
1379: LD_INT 11
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 49
// if count = 4 then
1389: LD_VAR 0 1
1393: PUSH
1394: LD_INT 4
1396: EQUAL
1397: IFFALSE 1487
// begin hc_class := 1 ;
1399: LD_ADDR_OWVAR 28
1403: PUSH
1404: LD_INT 1
1406: ST_TO_ADDR
// hc_sex := sex_male ;
1407: LD_ADDR_OWVAR 27
1411: PUSH
1412: LD_INT 1
1414: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1415: LD_ADDR_OWVAR 33
1419: PUSH
1420: LD_STRING SecondCharsGal
1422: ST_TO_ADDR
// hc_face_number := 34 ;
1423: LD_ADDR_OWVAR 34
1427: PUSH
1428: LD_INT 34
1430: ST_TO_ADDR
// hc_name :=  ;
1431: LD_ADDR_OWVAR 26
1435: PUSH
1436: LD_STRING 
1438: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1439: LD_ADDR_OWVAR 31
1443: PUSH
1444: LD_INT 2
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: LD_INT 1
1452: PUSH
1453: LD_INT 0
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: ST_TO_ADDR
// un = CreateHuman ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: CALL_OW 44
1471: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1472: LD_VAR 0 4
1476: PPUSH
1477: LD_INT 11
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: CALL_OW 49
// end ; if count = 5 then
1487: LD_VAR 0 1
1491: PUSH
1492: LD_INT 5
1494: EQUAL
1495: IFFALSE 1673
// begin hc_class := 1 ;
1497: LD_ADDR_OWVAR 28
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_sex := sex_male ;
1505: LD_ADDR_OWVAR 27
1509: PUSH
1510: LD_INT 1
1512: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1513: LD_ADDR_OWVAR 33
1517: PUSH
1518: LD_STRING SecondCharsGal
1520: ST_TO_ADDR
// hc_face_number := 34 ;
1521: LD_ADDR_OWVAR 34
1525: PUSH
1526: LD_INT 34
1528: ST_TO_ADDR
// hc_name :=  ;
1529: LD_ADDR_OWVAR 26
1533: PUSH
1534: LD_STRING 
1536: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1537: LD_ADDR_OWVAR 31
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 0
1547: PUSH
1548: LD_INT 1
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: ST_TO_ADDR
// un = CreateHuman ;
1560: LD_ADDR_VAR 0 4
1564: PUSH
1565: CALL_OW 44
1569: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1570: LD_VAR 0 4
1574: PPUSH
1575: LD_INT 11
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: CALL_OW 49
// hc_class := 1 ;
1585: LD_ADDR_OWVAR 28
1589: PUSH
1590: LD_INT 1
1592: ST_TO_ADDR
// hc_sex := sex_female ;
1593: LD_ADDR_OWVAR 27
1597: PUSH
1598: LD_INT 2
1600: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1601: LD_ADDR_OWVAR 33
1605: PUSH
1606: LD_STRING SecondCharsGal
1608: ST_TO_ADDR
// hc_face_number := 41 ;
1609: LD_ADDR_OWVAR 34
1613: PUSH
1614: LD_INT 41
1616: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
1617: LD_ADDR_OWVAR 26
1621: PUSH
1622: LD_STRING Kate Wadsworth
1624: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
1625: LD_ADDR_OWVAR 31
1629: PUSH
1630: LD_INT 2
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: LD_INT 0
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: ST_TO_ADDR
// un = CreateHuman ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: CALL_OW 44
1657: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1658: LD_VAR 0 4
1662: PPUSH
1663: LD_INT 11
1665: PPUSH
1666: LD_INT 0
1668: PPUSH
1669: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
1673: LD_INT 11
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 21
1688: PUSH
1689: LD_INT 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 26
1698: PUSH
1699: LD_INT 1
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: PPUSH
1711: CALL_OW 70
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
1724: LD_INT 11
1726: PPUSH
1727: LD_INT 22
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 1
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 26
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 70
1766: PUSH
1767: LD_INT 1
1769: ARRAY
1770: PPUSH
1771: LD_STRING D6-Sol3-1
1773: PPUSH
1774: CALL_OW 88
// end ; end_of_file
1778: LD_VAR 0 2
1782: RET
// export function PrepareRussianCommander ; begin
1783: LD_INT 0
1785: PPUSH
// uc_side = 3 ;
1786: LD_ADDR_OWVAR 20
1790: PUSH
1791: LD_INT 3
1793: ST_TO_ADDR
// uc_nation = 3 ;
1794: LD_ADDR_OWVAR 21
1798: PUSH
1799: LD_INT 3
1801: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
1802: LD_ADDR_EXP 17
1806: PUSH
1807: LD_STRING Stolypin
1809: PPUSH
1810: CALL_OW 25
1814: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
1815: LD_EXP 17
1819: PPUSH
1820: LD_INT 21
1822: PPUSH
1823: CALL_OW 52
// end ;
1827: LD_VAR 0 1
1831: RET
// export function PrepareRussianBase ; var i ; begin
1832: LD_INT 0
1834: PPUSH
1835: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
1836: LD_INT 3
1838: PPUSH
1839: LD_INT 3
1841: PPUSH
1842: LD_INT 22
1844: PPUSH
1845: LD_EXP 18
1849: PPUSH
1850: LD_EXP 19
1854: PPUSH
1855: CALL_OW 12
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 2
1865: PPUSH
1866: CALL 3103 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
1870: LD_INT 3
1872: PPUSH
1873: LD_INT 3
1875: PPUSH
1876: LD_INT 21
1878: PPUSH
1879: LD_EXP 18
1883: PPUSH
1884: LD_EXP 19
1888: PPUSH
1889: CALL_OW 12
1893: PPUSH
1894: LD_INT 2
1896: PPUSH
1897: LD_INT 3
1899: PPUSH
1900: CALL 3103 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
1904: LD_INT 3
1906: PPUSH
1907: LD_INT 3
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 18
1917: PPUSH
1918: LD_EXP 19
1922: PPUSH
1923: CALL_OW 12
1927: PPUSH
1928: LD_INT 4
1930: PPUSH
1931: LD_INT 2
1933: PPUSH
1934: CALL 3103 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
1938: LD_INT 3
1940: PPUSH
1941: LD_INT 3
1943: PPUSH
1944: LD_INT 24
1946: PPUSH
1947: LD_EXP 18
1951: PPUSH
1952: LD_EXP 19
1956: PPUSH
1957: CALL_OW 12
1961: PPUSH
1962: LD_INT 3
1964: PPUSH
1965: LD_INT 6
1967: PPUSH
1968: CALL 3103 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: LD_INT 22
1979: PUSH
1980: LD_INT 3
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: LD_INT 30
1989: PUSH
1990: LD_INT 32
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: PPUSH
2001: CALL_OW 69
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2047
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2009: LD_INT 3
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 18
2024: PPUSH
2025: LD_EXP 19
2029: PPUSH
2030: CALL_OW 12
2034: PPUSH
2035: LD_INT 1
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: CALL 3103 0 6
2045: GO 2006
2047: POP
2048: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2049: LD_ADDR_VAR 0 2
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 30
2066: PUSH
2067: LD_INT 31
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PPUSH
2078: CALL_OW 69
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2112
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2086: LD_EXP 18
2090: PPUSH
2091: LD_EXP 19
2095: PPUSH
2096: CALL_OW 12
2100: PPUSH
2101: LD_VAR 0 2
2105: PPUSH
2106: CALL 3213 0 2
2110: GO 2083
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
2124: PPUSH
// uc_side = 6 ;
2125: LD_ADDR_OWVAR 20
2129: PUSH
2130: LD_INT 6
2132: ST_TO_ADDR
// uc_nation = 3 ;
2133: LD_ADDR_OWVAR 21
2137: PUSH
2138: LD_INT 3
2140: ST_TO_ADDR
// for i := 1 to [ 2 , 1 , 1 ] [ Difficulty ] do
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: DOUBLE
2147: LD_INT 1
2149: DEC
2150: ST_TO_ADDR
2151: LD_INT 2
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: PUSH
2165: LD_OWVAR 67
2169: ARRAY
2170: PUSH
2171: FOR_TO
2172: IFFALSE 2332
// begin vc_engine = 1 ;
2174: LD_ADDR_OWVAR 39
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// vc_control = 1 ;
2182: LD_ADDR_OWVAR 38
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2190: LD_ADDR_OWVAR 40
2194: PUSH
2195: LD_INT 42
2197: PUSH
2198: LD_INT 42
2200: PUSH
2201: LD_INT 43
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_OWVAR 67
2213: ARRAY
2214: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2215: LD_ADDR_OWVAR 37
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 22
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_OWVAR 67
2238: ARRAY
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 3
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2250: LD_VAR 0 3
2254: PPUSH
2255: LD_INT 3
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: CALL_OW 49
// hc_gallery =  ;
2265: LD_ADDR_OWVAR 33
2269: PUSH
2270: LD_STRING 
2272: ST_TO_ADDR
// hc_name =  ;
2273: LD_ADDR_OWVAR 26
2277: PUSH
2278: LD_STRING 
2280: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2281: LD_INT 0
2283: PPUSH
2284: LD_INT 3
2286: PPUSH
2287: LD_EXP 18
2291: PPUSH
2292: LD_EXP 19
2296: PPUSH
2297: CALL_OW 12
2301: PPUSH
2302: CALL_OW 380
// un = CreateHuman ;
2306: LD_ADDR_VAR 0 4
2310: PUSH
2311: CALL_OW 44
2315: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2316: LD_VAR 0 4
2320: PPUSH
2321: LD_VAR 0 3
2325: PPUSH
2326: CALL_OW 52
// end ;
2330: GO 2171
2332: POP
2333: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2334: LD_INT 0
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: LD_EXP 18
2344: PPUSH
2345: LD_EXP 19
2349: PPUSH
2350: CALL_OW 12
2354: PUSH
2355: LD_INT 2
2357: PLUS
2358: PPUSH
2359: CALL_OW 380
// un = CreateHuman ;
2363: LD_ADDR_VAR 0 4
2367: PUSH
2368: CALL_OW 44
2372: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2373: LD_VAR 0 4
2377: PPUSH
2378: LD_INT 3
2380: PPUSH
2381: LD_INT 0
2383: PPUSH
2384: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2388: LD_INT 0
2390: PPUSH
2391: LD_INT 4
2393: PPUSH
2394: LD_EXP 18
2398: PPUSH
2399: LD_EXP 19
2403: PPUSH
2404: CALL_OW 12
2408: PUSH
2409: LD_INT 2
2411: PLUS
2412: PPUSH
2413: CALL_OW 380
// un = CreateHuman ;
2417: LD_ADDR_VAR 0 4
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: LD_INT 3
2434: PPUSH
2435: LD_INT 0
2437: PPUSH
2438: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
2442: LD_ADDR_VAR 0 2
2446: PUSH
2447: DOUBLE
2448: LD_INT 1
2450: DEC
2451: ST_TO_ADDR
2452: LD_INT 2
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: LD_INT 3
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: LD_OWVAR 67
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: PPUSH
2475: LD_INT 3
2477: PPUSH
2478: CALL_OW 12
2482: PLUS
2483: PUSH
2484: FOR_TO
2485: IFFALSE 2555
// begin hc_gallery =  ;
2487: LD_ADDR_OWVAR 33
2491: PUSH
2492: LD_STRING 
2494: ST_TO_ADDR
// hc_name =  ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING 
2502: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 1
2508: PPUSH
2509: LD_EXP 18
2513: PPUSH
2514: LD_EXP 19
2518: PPUSH
2519: CALL_OW 12
2523: PPUSH
2524: CALL_OW 380
// un = CreateHuman ;
2528: LD_ADDR_VAR 0 4
2532: PUSH
2533: CALL_OW 44
2537: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2538: LD_VAR 0 4
2542: PPUSH
2543: LD_INT 3
2545: PPUSH
2546: LD_INT 0
2548: PPUSH
2549: CALL_OW 49
// end ;
2553: GO 2484
2555: POP
2556: POP
// vc_engine = 1 ;
2557: LD_ADDR_OWVAR 39
2561: PUSH
2562: LD_INT 1
2564: ST_TO_ADDR
// vc_control = 1 ;
2565: LD_ADDR_OWVAR 38
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// vc_weapon = 51 ;
2573: LD_ADDR_OWVAR 40
2577: PUSH
2578: LD_INT 51
2580: ST_TO_ADDR
// vc_chassis = 22 ;
2581: LD_ADDR_OWVAR 37
2585: PUSH
2586: LD_INT 22
2588: ST_TO_ADDR
// veh = CreateVehicle ;
2589: LD_ADDR_VAR 0 3
2593: PUSH
2594: CALL_OW 45
2598: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2599: LD_VAR 0 3
2603: PPUSH
2604: LD_INT 3
2606: PPUSH
2607: LD_INT 0
2609: PPUSH
2610: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
2614: LD_VAR 0 3
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: LD_INT 100
2624: PPUSH
2625: CALL_OW 290
// hc_gallery =  ;
2629: LD_ADDR_OWVAR 33
2633: PUSH
2634: LD_STRING 
2636: ST_TO_ADDR
// hc_name =  ;
2637: LD_ADDR_OWVAR 26
2641: PUSH
2642: LD_STRING 
2644: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2645: LD_INT 0
2647: PPUSH
2648: LD_INT 3
2650: PPUSH
2651: LD_EXP 18
2655: PPUSH
2656: LD_EXP 19
2660: PPUSH
2661: CALL_OW 12
2665: PPUSH
2666: CALL_OW 380
// un = CreateHuman ;
2670: LD_ADDR_VAR 0 4
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2680: LD_VAR 0 4
2684: PPUSH
2685: LD_VAR 0 3
2689: PPUSH
2690: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 6
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 1
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: LD_INT 25
2717: PUSH
2718: LD_INT 2
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: LD_INT 25
2734: PUSH
2735: LD_INT 4
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PUSH
2760: FOR_IN
2761: IFFALSE 2780
// ComAgressiveMove ( i , 45 , 46 ) ;
2763: LD_VAR 0 2
2767: PPUSH
2768: LD_INT 45
2770: PPUSH
2771: LD_INT 46
2773: PPUSH
2774: CALL_OW 114
2778: GO 2760
2780: POP
2781: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
2782: LD_ADDR_VAR 0 2
2786: PUSH
2787: LD_INT 22
2789: PUSH
2790: LD_INT 6
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 25
2799: PUSH
2800: LD_INT 2
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PPUSH
2811: CALL_OW 69
2815: PUSH
2816: FOR_IN
2817: IFFALSE 2848
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
2819: LD_ADDR_EXP 21
2823: PUSH
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 0
2831: PPUSH
2832: LD_INT 48
2834: PPUSH
2835: LD_INT 55
2837: PPUSH
2838: LD_INT 5
2840: PPUSH
2841: CALL_OW 145
2845: ST_TO_ADDR
2846: GO 2816
2848: POP
2849: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
2850: LD_ADDR_VAR 0 2
2854: PUSH
2855: LD_INT 22
2857: PUSH
2858: LD_INT 6
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 25
2867: PUSH
2868: LD_INT 4
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: FOR_IN
2885: IFFALSE 2904
// ComMoveXY ( i , 39 , 55 ) ;
2887: LD_VAR 0 2
2891: PPUSH
2892: LD_INT 39
2894: PPUSH
2895: LD_INT 55
2897: PPUSH
2898: CALL_OW 111
2902: GO 2884
2904: POP
2905: POP
// end ;
2906: LD_VAR 0 1
2910: RET
// export function PrepareFirstAttack ; var i , un ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// uc_side = 5 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 5
2923: ST_TO_ADDR
// uc_nation = 3 ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 3
2931: ST_TO_ADDR
// for i := 1 to 4 do
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 4
2944: PUSH
2945: FOR_TO
2946: IFFALSE 3031
// begin hc_gallery =  ;
2948: LD_ADDR_OWVAR 33
2952: PUSH
2953: LD_STRING 
2955: ST_TO_ADDR
// hc_name =  ;
2956: LD_ADDR_OWVAR 26
2960: PUSH
2961: LD_STRING 
2963: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2964: LD_INT 0
2966: PPUSH
2967: LD_INT 1
2969: PPUSH
2970: LD_EXP 18
2974: PPUSH
2975: LD_EXP 19
2979: PPUSH
2980: CALL_OW 12
2984: PPUSH
2985: CALL_OW 380
// un = CreateHuman ;
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: CALL_OW 44
2998: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
2999: LD_VAR 0 3
3003: PPUSH
3004: LD_INT 4
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3014: LD_VAR 0 3
3018: PPUSH
3019: LD_INT 48
3021: PPUSH
3022: LD_INT 14
3024: PPUSH
3025: CALL_OW 114
// end ;
3029: GO 2945
3031: POP
3032: POP
// firstRussianAttack = 1 ;
3033: LD_ADDR_EXP 22
3037: PUSH
3038: LD_INT 1
3040: ST_TO_ADDR
// end ; end_of_file
3041: LD_VAR 0 1
3045: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3046: LD_INT 0
3048: PPUSH
3049: PPUSH
// if exist_mode then
3050: LD_VAR 0 2
3054: IFFALSE 3073
// begin unit := CreateCharacter ( ident ) ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: LD_VAR 0 1
3065: PPUSH
3066: CALL_OW 34
3070: ST_TO_ADDR
// end else
3071: GO 3088
// begin unit := NewCharacter ( ident ) ;
3073: LD_ADDR_VAR 0 4
3077: PUSH
3078: LD_VAR 0 1
3082: PPUSH
3083: CALL_OW 25
3087: ST_TO_ADDR
// end ; result := unit ;
3088: LD_ADDR_VAR 0 3
3092: PUSH
3093: LD_VAR 0 4
3097: ST_TO_ADDR
// end ;
3098: LD_VAR 0 3
3102: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
// for i = 1 to count do
3109: LD_ADDR_VAR 0 8
3113: PUSH
3114: DOUBLE
3115: LD_INT 1
3117: DEC
3118: ST_TO_ADDR
3119: LD_VAR 0 6
3123: PUSH
3124: FOR_TO
3125: IFFALSE 3206
// begin uc_side = side ;
3127: LD_ADDR_OWVAR 20
3131: PUSH
3132: LD_VAR 0 1
3136: ST_TO_ADDR
// uc_nation = nation ;
3137: LD_ADDR_OWVAR 21
3141: PUSH
3142: LD_VAR 0 2
3146: ST_TO_ADDR
// hc_gallery =  ;
3147: LD_ADDR_OWVAR 33
3151: PUSH
3152: LD_STRING 
3154: ST_TO_ADDR
// hc_name =  ;
3155: LD_ADDR_OWVAR 26
3159: PUSH
3160: LD_STRING 
3162: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3163: LD_INT 0
3165: PPUSH
3166: LD_VAR 0 5
3170: PPUSH
3171: LD_VAR 0 4
3175: PPUSH
3176: CALL_OW 380
// un = CreateHuman ;
3180: LD_ADDR_VAR 0 10
3184: PUSH
3185: CALL_OW 44
3189: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3190: LD_VAR 0 10
3194: PPUSH
3195: LD_VAR 0 3
3199: PPUSH
3200: CALL_OW 52
// end ;
3204: GO 3124
3206: POP
3207: POP
// end ;
3208: LD_VAR 0 7
3212: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3213: LD_INT 0
3215: PPUSH
3216: PPUSH
3217: PPUSH
// uc_side := GetSide ( b ) ;
3218: LD_ADDR_OWVAR 20
3222: PUSH
3223: LD_VAR 0 2
3227: PPUSH
3228: CALL_OW 255
3232: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3233: LD_ADDR_OWVAR 21
3237: PUSH
3238: LD_VAR 0 2
3242: PPUSH
3243: CALL_OW 248
3247: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3248: LD_INT 0
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: LD_VAR 0 1
3258: PPUSH
3259: CALL_OW 380
// un = CreateHuman ;
3263: LD_ADDR_VAR 0 4
3267: PUSH
3268: CALL_OW 44
3272: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3273: LD_ADDR_VAR 0 5
3277: PUSH
3278: LD_VAR 0 2
3282: PPUSH
3283: CALL_OW 254
3287: PUSH
3288: LD_INT 3
3290: MINUS
3291: ST_TO_ADDR
// if dir < 0 then
3292: LD_VAR 0 5
3296: PUSH
3297: LD_INT 0
3299: LESS
3300: IFFALSE 3316
// dir := 6 + dir ;
3302: LD_ADDR_VAR 0 5
3306: PUSH
3307: LD_INT 6
3309: PUSH
3310: LD_VAR 0 5
3314: PLUS
3315: ST_TO_ADDR
// SetDir ( un , dir ) ;
3316: LD_VAR 0 4
3320: PPUSH
3321: LD_VAR 0 5
3325: PPUSH
3326: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3330: LD_VAR 0 4
3334: PPUSH
3335: LD_VAR 0 2
3339: PPUSH
3340: CALL_OW 52
// end ;
3344: LD_VAR 0 3
3348: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3349: LD_INT 0
3351: PPUSH
3352: PPUSH
3353: PPUSH
// rnd = rand ( 1 , characters ) ;
3354: LD_ADDR_VAR 0 6
3358: PUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 12
3371: ST_TO_ADDR
// for i = 1 to characters do
3372: LD_ADDR_VAR 0 5
3376: PUSH
3377: DOUBLE
3378: LD_INT 1
3380: DEC
3381: ST_TO_ADDR
3382: LD_VAR 0 1
3386: PUSH
3387: FOR_TO
3388: IFFALSE 3498
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3390: LD_VAR 0 5
3394: PUSH
3395: LD_VAR 0 6
3399: EQUAL
3400: PUSH
3401: LD_VAR 0 1
3405: PUSH
3406: LD_VAR 0 5
3410: ARRAY
3411: PPUSH
3412: CALL_OW 258
3416: PUSH
3417: LD_INT 1
3419: EQUAL
3420: AND
3421: IFFALSE 3443
// Say ( characters [ i ] , dialogMID ) ;
3423: LD_VAR 0 1
3427: PUSH
3428: LD_VAR 0 5
3432: ARRAY
3433: PPUSH
3434: LD_VAR 0 2
3438: PPUSH
3439: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3443: LD_VAR 0 5
3447: PUSH
3448: LD_VAR 0 6
3452: EQUAL
3453: PUSH
3454: LD_VAR 0 1
3458: PUSH
3459: LD_VAR 0 5
3463: ARRAY
3464: PPUSH
3465: CALL_OW 258
3469: PUSH
3470: LD_INT 2
3472: EQUAL
3473: AND
3474: IFFALSE 3496
// Say ( characters [ i ] , dialogFID ) ;
3476: LD_VAR 0 1
3480: PUSH
3481: LD_VAR 0 5
3485: ARRAY
3486: PPUSH
3487: LD_VAR 0 3
3491: PPUSH
3492: CALL_OW 88
// end ;
3496: GO 3387
3498: POP
3499: POP
// end ;
3500: LD_VAR 0 4
3504: RET
// export function PrepareDifficulty ; begin
3505: LD_INT 0
3507: PPUSH
// if Difficulty = 1 then
3508: LD_OWVAR 67
3512: PUSH
3513: LD_INT 1
3515: EQUAL
3516: IFFALSE 3534
// begin RuSoldMinLevel = 0 ;
3518: LD_ADDR_EXP 18
3522: PUSH
3523: LD_INT 0
3525: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3526: LD_ADDR_EXP 19
3530: PUSH
3531: LD_INT 2
3533: ST_TO_ADDR
// end ; if Difficulty = 2 then
3534: LD_OWVAR 67
3538: PUSH
3539: LD_INT 2
3541: EQUAL
3542: IFFALSE 3580
// begin RuSoldMinLevel = 1 ;
3544: LD_ADDR_EXP 18
3548: PUSH
3549: LD_INT 1
3551: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3552: LD_ADDR_EXP 19
3556: PUSH
3557: LD_INT 2
3559: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
3560: LD_INT 14
3562: PPUSH
3563: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3567: LD_INT 51
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_INT 1
3575: PPUSH
3576: CALL_OW 322
// end ; if Difficulty = 3 then
3580: LD_OWVAR 67
3584: PUSH
3585: LD_INT 3
3587: EQUAL
3588: IFFALSE 3656
// begin RuSoldMinLevel = 1 ;
3590: LD_ADDR_EXP 18
3594: PUSH
3595: LD_INT 1
3597: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
3598: LD_ADDR_EXP 19
3602: PUSH
3603: LD_INT 3
3605: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
3606: LD_INT 13
3608: PPUSH
3609: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
3613: LD_INT 14
3615: PPUSH
3616: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3620: LD_INT 51
3622: PPUSH
3623: LD_INT 3
3625: PPUSH
3626: LD_INT 1
3628: PPUSH
3629: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
3633: LD_INT 52
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: LD_INT 1
3641: PPUSH
3642: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
3646: LD_INT 25
3648: PPUSH
3649: LD_INT 44
3651: PPUSH
3652: CALL_OW 431
// end ; end ;
3656: LD_VAR 0 1
3660: RET
// export function EnergyDialog ; begin
3661: LD_INT 0
3663: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
3664: LD_INT 46
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 321
3674: PUSH
3675: LD_INT 1
3677: EQUAL
3678: PUSH
3679: LD_INT 35
3681: PPUSH
3682: LD_INT 1
3684: PPUSH
3685: CALL_OW 321
3689: PUSH
3690: LD_INT 1
3692: EQUAL
3693: AND
3694: IFFALSE 3718
// begin Say ( JMM , D9c-JMM-1 ) ;
3696: LD_EXP 2
3700: PPUSH
3701: LD_STRING D9c-JMM-1
3703: PPUSH
3704: CALL_OW 88
// energyVDialog = 1 ;
3708: LD_ADDR_EXP 32
3712: PUSH
3713: LD_INT 1
3715: ST_TO_ADDR
// end else
3716: GO 3872
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
3718: LD_INT 35
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: CALL_OW 321
3728: PUSH
3729: LD_INT 2
3731: EQUAL
3732: PUSH
3733: LD_EXP 32
3737: PUSH
3738: LD_INT 0
3740: EQUAL
3741: AND
3742: IFFALSE 3764
// begin Say ( JMM , D9c-JMM-1a ) ;
3744: LD_EXP 2
3748: PPUSH
3749: LD_STRING D9c-JMM-1a
3751: PPUSH
3752: CALL_OW 88
// energyVDialog = 1 ;
3756: LD_ADDR_EXP 32
3760: PUSH
3761: LD_INT 1
3763: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
3764: LD_INT 46
3766: PPUSH
3767: LD_INT 1
3769: PPUSH
3770: CALL_OW 321
3774: PUSH
3775: LD_INT 2
3777: EQUAL
3778: PUSH
3779: LD_EXP 32
3783: PUSH
3784: LD_INT 0
3786: EQUAL
3787: AND
3788: IFFALSE 3810
// begin Say ( JMM , D9c-JMM-1b ) ;
3790: LD_EXP 2
3794: PPUSH
3795: LD_STRING D9c-JMM-1b
3797: PPUSH
3798: CALL_OW 88
// energyVDialog = 1 ;
3802: LD_ADDR_EXP 32
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
3810: LD_INT 46
3812: PPUSH
3813: LD_INT 1
3815: PPUSH
3816: CALL_OW 321
3820: PUSH
3821: LD_INT 2
3823: EQUAL
3824: PUSH
3825: LD_INT 21
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: CALL_OW 321
3835: PUSH
3836: LD_INT 2
3838: EQUAL
3839: AND
3840: PUSH
3841: LD_EXP 32
3845: PUSH
3846: LD_INT 0
3848: EQUAL
3849: AND
3850: IFFALSE 3872
// begin Say ( JMM , D9c-JMM-1c ) ;
3852: LD_EXP 2
3856: PPUSH
3857: LD_STRING D9c-JMM-1c
3859: PPUSH
3860: CALL_OW 88
// energyVDialog = 1 ;
3864: LD_ADDR_EXP 32
3868: PUSH
3869: LD_INT 1
3871: ST_TO_ADDR
// end ; end ; end ;
3872: LD_VAR 0 1
3876: RET
// export function FinishMission ; var tmp ; begin
3877: LD_INT 0
3879: PPUSH
3880: PPUSH
// if buildOil = 1 and buildPower = 1 then
3881: LD_EXP 33
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: PUSH
3890: LD_EXP 34
3894: PUSH
3895: LD_INT 1
3897: EQUAL
3898: AND
3899: IFFALSE 3913
// begin AddMedal ( oil , 1 ) ;
3901: LD_STRING oil
3903: PPUSH
3904: LD_INT 1
3906: PPUSH
3907: CALL_OW 101
// end else
3911: GO 4006
// begin if buildOil = 1 and buildPower = 0 then
3913: LD_EXP 33
3917: PUSH
3918: LD_INT 1
3920: EQUAL
3921: PUSH
3922: LD_EXP 34
3926: PUSH
3927: LD_INT 0
3929: EQUAL
3930: AND
3931: IFFALSE 3944
// AddMedal ( oil , - 1 ) ;
3933: LD_STRING oil
3935: PPUSH
3936: LD_INT 1
3938: NEG
3939: PPUSH
3940: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
3944: LD_EXP 33
3948: PUSH
3949: LD_INT 0
3951: EQUAL
3952: PUSH
3953: LD_EXP 34
3957: PUSH
3958: LD_INT 1
3960: EQUAL
3961: AND
3962: IFFALSE 3975
// AddMedal ( oil , - 2 ) ;
3964: LD_STRING oil
3966: PPUSH
3967: LD_INT 2
3969: NEG
3970: PPUSH
3971: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
3975: LD_EXP 33
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: PUSH
3984: LD_EXP 34
3988: PUSH
3989: LD_INT 0
3991: EQUAL
3992: AND
3993: IFFALSE 4006
// AddMedal ( oil , - 3 ) ;
3995: LD_STRING oil
3997: PPUSH
3998: LD_INT 3
4000: NEG
4001: PPUSH
4002: CALL_OW 101
// end ; if lostCounter < 3 then
4006: LD_EXP 37
4010: PUSH
4011: LD_INT 3
4013: LESS
4014: IFFALSE 4028
// begin AddMedal ( deaths , 1 ) ;
4016: LD_STRING deaths
4018: PPUSH
4019: LD_INT 1
4021: PPUSH
4022: CALL_OW 101
// end else
4026: GO 4039
// begin AddMedal ( deaths , - 1 ) ;
4028: LD_STRING deaths
4030: PPUSH
4031: LD_INT 1
4033: NEG
4034: PPUSH
4035: CALL_OW 101
// end ; if honor = 1 then
4039: LD_EXP 38
4043: PUSH
4044: LD_INT 1
4046: EQUAL
4047: IFFALSE 4061
// begin AddMedal ( honour , 1 ) ;
4049: LD_STRING honour
4051: PPUSH
4052: LD_INT 1
4054: PPUSH
4055: CALL_OW 101
// end else
4059: GO 4072
// begin AddMedal ( honour , - 1 ) ;
4061: LD_STRING honour
4063: PPUSH
4064: LD_INT 1
4066: NEG
4067: PPUSH
4068: CALL_OW 101
// end ; GiveMedals ( Main ) ;
4072: LD_STRING Main
4074: PPUSH
4075: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 23
4091: PUSH
4092: LD_INT 1
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 21
4101: PUSH
4102: LD_INT 1
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: PPUSH
4114: CALL_OW 69
4118: PPUSH
4119: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
4123: LD_EXP 2
4127: PPUSH
4128: LD_STRING JMM
4130: PPUSH
4131: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
4135: LD_EXP 3
4139: PPUSH
4140: LD_STRING Bobby
4142: PPUSH
4143: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
4147: LD_EXP 4
4151: PPUSH
4152: LD_STRING Cyrus
4154: PPUSH
4155: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
4159: LD_EXP 5
4163: PPUSH
4164: LD_STRING Lisa
4166: PPUSH
4167: CALL_OW 38
// SaveCharacters ( Brown , Brown ) ;
4171: LD_EXP 7
4175: PPUSH
4176: LD_STRING Brown
4178: PPUSH
4179: CALL_OW 38
// SaveCharacters ( Donaldson , Donaldson ) ;
4183: LD_EXP 13
4187: PPUSH
4188: LD_STRING Donaldson
4190: PPUSH
4191: CALL_OW 38
// SaveCharacters ( Frank , Frank ) ;
4195: LD_EXP 6
4199: PPUSH
4200: LD_STRING Frank
4202: PPUSH
4203: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
4207: LD_INT 50
4209: PUSH
4210: EMPTY
4211: LIST
4212: PUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_EXP 2
4247: PUSH
4248: LD_EXP 3
4252: PUSH
4253: LD_EXP 4
4257: PUSH
4258: LD_EXP 5
4262: PUSH
4263: LD_EXP 7
4267: PUSH
4268: LD_EXP 13
4272: PUSH
4273: LD_EXP 6
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: DIFF
4287: PPUSH
4288: LD_STRING 04_other_survivors
4290: PPUSH
4291: CALL_OW 38
// YouWin ;
4295: CALL_OW 103
// end ;
4299: LD_VAR 0 1
4303: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4304: LD_INT 0
4306: PPUSH
4307: PPUSH
4308: PPUSH
4309: PPUSH
4310: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4311: LD_VAR 0 1
4315: NOT
4316: PUSH
4317: LD_VAR 0 1
4321: PPUSH
4322: CALL_OW 256
4326: PUSH
4327: LD_INT 250
4329: LESS
4330: OR
4331: PUSH
4332: LD_VAR 0 1
4336: PPUSH
4337: CALL_OW 314
4341: PUSH
4342: LD_VAR 0 1
4346: PPUSH
4347: CALL_OW 261
4351: PUSH
4352: LD_INT 20
4354: GREATER
4355: AND
4356: OR
4357: IFFALSE 4361
// exit ;
4359: GO 4726
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL_OW 261
4370: PUSH
4371: LD_INT 20
4373: LESS
4374: PUSH
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 110
4384: PUSH
4385: LD_INT 21
4387: EQUAL
4388: NOT
4389: AND
4390: IFFALSE 4417
// begin ComStop ( bulldozer ) ;
4392: LD_VAR 0 1
4396: PPUSH
4397: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4401: LD_VAR 0 1
4405: PPUSH
4406: LD_INT 21
4408: PPUSH
4409: CALL_OW 109
// exit ;
4413: GO 4726
// end else
4415: GO 4444
// if GetFuel ( bulldozer ) > 20 then
4417: LD_VAR 0 1
4421: PPUSH
4422: CALL_OW 261
4426: PUSH
4427: LD_INT 20
4429: GREATER
4430: IFFALSE 4444
// SetTag ( bulldozer , 0 ) ;
4432: LD_VAR 0 1
4436: PPUSH
4437: LD_INT 0
4439: PPUSH
4440: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4444: LD_ADDR_VAR 0 5
4448: PUSH
4449: LD_VAR 0 2
4453: PPUSH
4454: CALL_OW 353
4458: ST_TO_ADDR
// tmp := [ ] ;
4459: LD_ADDR_VAR 0 6
4463: PUSH
4464: EMPTY
4465: ST_TO_ADDR
// for i = 1 to list do
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: DOUBLE
4472: LD_INT 1
4474: DEC
4475: ST_TO_ADDR
4476: LD_VAR 0 5
4480: PUSH
4481: FOR_TO
4482: IFFALSE 4580
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4484: LD_VAR 0 5
4488: PUSH
4489: LD_VAR 0 4
4493: ARRAY
4494: PUSH
4495: LD_INT 1
4497: ARRAY
4498: PPUSH
4499: LD_VAR 0 5
4503: PUSH
4504: LD_VAR 0 4
4508: ARRAY
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: PPUSH
4514: CALL_OW 554
4518: IFFALSE 4578
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4520: LD_ADDR_VAR 0 6
4524: PUSH
4525: LD_VAR 0 6
4529: PPUSH
4530: LD_VAR 0 6
4534: PUSH
4535: LD_INT 1
4537: PLUS
4538: PPUSH
4539: LD_VAR 0 5
4543: PUSH
4544: LD_VAR 0 4
4548: ARRAY
4549: PUSH
4550: LD_INT 1
4552: ARRAY
4553: PUSH
4554: LD_VAR 0 5
4558: PUSH
4559: LD_VAR 0 4
4563: ARRAY
4564: PUSH
4565: LD_INT 2
4567: ARRAY
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 1
4577: ST_TO_ADDR
// end ;
4578: GO 4481
4580: POP
4581: POP
// ComStop ( bulldozer ) ;
4582: LD_VAR 0 1
4586: PPUSH
4587: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
4591: LD_ADDR_VAR 0 7
4595: PUSH
4596: LD_VAR 0 1
4600: PPUSH
4601: CALL_OW 250
4605: PUSH
4606: LD_VAR 0 1
4610: PPUSH
4611: CALL_OW 251
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: ST_TO_ADDR
// for i = tmp downto 1 do
4620: LD_ADDR_VAR 0 4
4624: PUSH
4625: DOUBLE
4626: LD_VAR 0 6
4630: INC
4631: ST_TO_ADDR
4632: LD_INT 1
4634: PUSH
4635: FOR_DOWNTO
4636: IFFALSE 4724
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
4638: LD_ADDR_VAR 0 7
4642: PUSH
4643: LD_VAR 0 7
4647: PUSH
4648: LD_INT 1
4650: ARRAY
4651: PPUSH
4652: LD_VAR 0 7
4656: PUSH
4657: LD_INT 2
4659: ARRAY
4660: PPUSH
4661: LD_VAR 0 6
4665: PPUSH
4666: CALL 4827 0 3
4670: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
4671: LD_VAR 0 1
4675: PPUSH
4676: LD_VAR 0 7
4680: PUSH
4681: LD_INT 1
4683: ARRAY
4684: PPUSH
4685: LD_VAR 0 7
4689: PUSH
4690: LD_INT 2
4692: ARRAY
4693: PPUSH
4694: CALL 4731 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
4698: LD_ADDR_VAR 0 6
4702: PUSH
4703: LD_VAR 0 6
4707: PPUSH
4708: LD_VAR 0 7
4712: PUSH
4713: LD_INT 3
4715: ARRAY
4716: PPUSH
4717: CALL_OW 3
4721: ST_TO_ADDR
// end ;
4722: GO 4635
4724: POP
4725: POP
// end ;
4726: LD_VAR 0 3
4730: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
4731: LD_INT 0
4733: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_VAR 0 3
4743: PPUSH
4744: CALL_OW 351
4748: PUSH
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_VAR 0 3
4758: PPUSH
4759: CALL_OW 554
4763: AND
4764: PUSH
4765: LD_VAR 0 2
4769: PPUSH
4770: LD_VAR 0 3
4774: PPUSH
4775: CALL_OW 488
4779: AND
4780: PUSH
4781: LD_VAR 0 2
4785: PPUSH
4786: LD_VAR 0 3
4790: PPUSH
4791: CALL_OW 428
4795: PUSH
4796: LD_INT 1
4798: NEG
4799: EQUAL
4800: AND
4801: IFFALSE 4822
// AddComMoveXY ( bulldozer , x , y ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_VAR 0 2
4812: PPUSH
4813: LD_VAR 0 3
4817: PPUSH
4818: CALL_OW 171
// end ;
4822: LD_VAR 0 4
4826: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
4827: LD_INT 0
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
// dist := 99999 ;
4836: LD_ADDR_VAR 0 6
4840: PUSH
4841: LD_INT 99999
4843: ST_TO_ADDR
// for i = 1 to list do
4844: LD_ADDR_VAR 0 5
4848: PUSH
4849: DOUBLE
4850: LD_INT 1
4852: DEC
4853: ST_TO_ADDR
4854: LD_VAR 0 3
4858: PUSH
4859: FOR_TO
4860: IFFALSE 4998
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
4862: LD_ADDR_VAR 0 7
4866: PUSH
4867: LD_VAR 0 1
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 5
4886: ARRAY
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: PPUSH
4892: LD_VAR 0 3
4896: PUSH
4897: LD_VAR 0 5
4901: ARRAY
4902: PUSH
4903: LD_INT 2
4905: ARRAY
4906: PPUSH
4907: CALL_OW 298
4911: ST_TO_ADDR
// if d = 0 then
4912: LD_VAR 0 7
4916: PUSH
4917: LD_INT 0
4919: EQUAL
4920: IFFALSE 4924
// continue ;
4922: GO 4859
// if d < dist then
4924: LD_VAR 0 7
4928: PUSH
4929: LD_VAR 0 6
4933: LESS
4934: IFFALSE 4996
// begin _x := list [ i ] [ 1 ] ;
4936: LD_ADDR_VAR 0 8
4940: PUSH
4941: LD_VAR 0 3
4945: PUSH
4946: LD_VAR 0 5
4950: ARRAY
4951: PUSH
4952: LD_INT 1
4954: ARRAY
4955: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
4956: LD_ADDR_VAR 0 9
4960: PUSH
4961: LD_VAR 0 3
4965: PUSH
4966: LD_VAR 0 5
4970: ARRAY
4971: PUSH
4972: LD_INT 2
4974: ARRAY
4975: ST_TO_ADDR
// _i := i ;
4976: LD_ADDR_VAR 0 10
4980: PUSH
4981: LD_VAR 0 5
4985: ST_TO_ADDR
// dist := d ;
4986: LD_ADDR_VAR 0 6
4990: PUSH
4991: LD_VAR 0 7
4995: ST_TO_ADDR
// end ; end ;
4996: GO 4859
4998: POP
4999: POP
// result := [ _x , _y , _i , dist ] ;
5000: LD_ADDR_VAR 0 4
5004: PUSH
5005: LD_VAR 0 8
5009: PUSH
5010: LD_VAR 0 9
5014: PUSH
5015: LD_VAR 0 10
5019: PUSH
5020: LD_VAR 0 6
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: ST_TO_ADDR
// end ;
5031: LD_VAR 0 4
5035: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5036: LD_INT 0
5038: PPUSH
5039: PPUSH
5040: PPUSH
5041: PPUSH
// for i = 1 to 72 do
5042: LD_ADDR_VAR 0 5
5046: PUSH
5047: DOUBLE
5048: LD_INT 1
5050: DEC
5051: ST_TO_ADDR
5052: LD_INT 72
5054: PUSH
5055: FOR_TO
5056: IFFALSE 5114
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5058: LD_VAR 0 5
5062: PPUSH
5063: LD_VAR 0 1
5067: PPUSH
5068: CALL_OW 321
5072: PUSH
5073: LD_INT 1
5075: EQUAL
5076: PUSH
5077: LD_VAR 0 5
5081: PPUSH
5082: LD_VAR 0 3
5086: PPUSH
5087: CALL_OW 482
5091: PUSH
5092: LD_INT 1
5094: EQUAL
5095: AND
5096: IFFALSE 5112
// AddComResearch ( lab , i ) ;
5098: LD_VAR 0 2
5102: PPUSH
5103: LD_VAR 0 5
5107: PPUSH
5108: CALL_OW 184
5112: GO 5055
5114: POP
5115: POP
// end ;
5116: LD_VAR 0 4
5120: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5121: LD_INT 0
5123: PPUSH
5124: PPUSH
5125: PPUSH
5126: PPUSH
5127: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: LD_INT 22
5135: PUSH
5136: LD_VAR 0 1
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 25
5147: PUSH
5148: LD_INT 2
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: LD_INT 24
5157: PUSH
5158: LD_INT 1000
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PPUSH
5170: CALL_OW 69
5174: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5175: LD_ADDR_VAR 0 4
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_VAR 0 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 21
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: LD_INT 24
5207: PUSH
5208: LD_INT 1000
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: EMPTY
5225: LIST
5226: PPUSH
5227: CALL_OW 69
5231: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5232: LD_VAR 0 4
5236: PUSH
5237: LD_INT 0
5239: GREATER
5240: PUSH
5241: LD_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: GREATER
5249: AND
5250: IFFALSE 5316
// begin for i in engineerOk_list do
5252: LD_ADDR_VAR 0 5
5256: PUSH
5257: LD_VAR 0 6
5261: PUSH
5262: FOR_IN
5263: IFFALSE 5314
// begin for j in buildings_list do
5265: LD_ADDR_VAR 0 7
5269: PUSH
5270: LD_VAR 0 4
5274: PUSH
5275: FOR_IN
5276: IFFALSE 5310
// begin AddComExitBuilding ( i ) ;
5278: LD_VAR 0 5
5282: PPUSH
5283: CALL_OW 182
// wait ( 0 0$1 ) ;
5287: LD_INT 35
5289: PPUSH
5290: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5294: LD_VAR 0 5
5298: PPUSH
5299: LD_VAR 0 7
5303: PPUSH
5304: CALL_OW 190
// end ;
5308: GO 5275
5310: POP
5311: POP
// end ;
5312: GO 5262
5314: POP
5315: POP
// end ; if buildings_list = 0 then
5316: LD_VAR 0 4
5320: PUSH
5321: LD_INT 0
5323: EQUAL
5324: IFFALSE 5357
// begin for i in engineerOK_list do
5326: LD_ADDR_VAR 0 5
5330: PUSH
5331: LD_VAR 0 6
5335: PUSH
5336: FOR_IN
5337: IFFALSE 5355
// begin ComEnterUnit ( i , building ) ;
5339: LD_VAR 0 5
5343: PPUSH
5344: LD_VAR 0 2
5348: PPUSH
5349: CALL_OW 120
// end ;
5353: GO 5336
5355: POP
5356: POP
// end ; end ;
5357: LD_VAR 0 3
5361: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5362: LD_INT 0
5364: PPUSH
5365: PPUSH
5366: PPUSH
5367: PPUSH
5368: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5369: LD_ADDR_VAR 0 6
5373: PUSH
5374: LD_INT 22
5376: PUSH
5377: LD_VAR 0 1
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 25
5388: PUSH
5389: LD_INT 4
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PPUSH
5400: CALL_OW 69
5404: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5405: LD_ADDR_VAR 0 9
5409: PUSH
5410: LD_VAR 0 3
5414: PPUSH
5415: LD_INT 22
5417: PUSH
5418: LD_VAR 0 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 21
5429: PUSH
5430: LD_INT 1
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 3
5439: PUSH
5440: LD_INT 24
5442: PUSH
5443: LD_INT 750
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: CALL_OW 70
5463: ST_TO_ADDR
// if damageUnits > 0 then
5464: LD_VAR 0 9
5468: PUSH
5469: LD_INT 0
5471: GREATER
5472: IFFALSE 5605
// begin for i = 1 to damageUnits do
5474: LD_ADDR_VAR 0 7
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 9
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5514
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5492: LD_VAR 0 9
5496: PUSH
5497: LD_VAR 0 7
5501: ARRAY
5502: PPUSH
5503: LD_VAR 0 2
5507: PPUSH
5508: CALL_OW 113
5512: GO 5489
5514: POP
5515: POP
// for i in sci_list do
5516: LD_ADDR_VAR 0 7
5520: PUSH
5521: LD_VAR 0 6
5525: PUSH
5526: FOR_IN
5527: IFFALSE 5601
// begin ComExitBuilding ( sci_list [ i ] ) ;
5529: LD_VAR 0 6
5533: PUSH
5534: LD_VAR 0 7
5538: ARRAY
5539: PPUSH
5540: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5544: LD_ADDR_VAR 0 8
5548: PUSH
5549: LD_VAR 0 2
5553: PPUSH
5554: LD_INT 22
5556: PUSH
5557: LD_VAR 0 1
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PPUSH
5566: CALL_OW 70
5570: PUSH
5571: FOR_IN
5572: IFFALSE 5597
// begin AddComHeal ( i , j ) ;
5574: LD_VAR 0 7
5578: PPUSH
5579: LD_VAR 0 8
5583: PPUSH
5584: CALL_OW 188
// wait ( 1 1$0 ) ;
5588: LD_INT 2100
5590: PPUSH
5591: CALL_OW 67
// end ;
5595: GO 5571
5597: POP
5598: POP
// end ;
5599: GO 5526
5601: POP
5602: POP
// end else
5603: GO 5619
// begin AddComEnterUnit ( sci_list , build ) ;
5605: LD_VAR 0 6
5609: PPUSH
5610: LD_VAR 0 4
5614: PPUSH
5615: CALL_OW 180
// end ; end ;
5619: LD_VAR 0 5
5623: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5624: LD_INT 0
5626: PPUSH
5627: PPUSH
5628: PPUSH
5629: PPUSH
5630: PPUSH
5631: PPUSH
5632: PPUSH
5633: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5634: LD_INT 22
5636: PUSH
5637: LD_VAR 0 1
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 2
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: PUSH
5665: LD_VAR 0 3
5669: LESSEQUAL
5670: IFFALSE 5737
// begin for i = 1 to vehCount do
5672: LD_ADDR_VAR 0 10
5676: PUSH
5677: DOUBLE
5678: LD_INT 1
5680: DEC
5681: ST_TO_ADDR
5682: LD_VAR 0 3
5686: PUSH
5687: FOR_TO
5688: IFFALSE 5735
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5690: LD_VAR 0 2
5694: PPUSH
5695: LD_VAR 0 8
5699: PPUSH
5700: LD_VAR 0 6
5704: PPUSH
5705: LD_VAR 0 7
5709: PPUSH
5710: LD_VAR 0 5
5714: PUSH
5715: LD_INT 1
5717: PPUSH
5718: LD_VAR 0 5
5722: PPUSH
5723: CALL_OW 12
5727: ARRAY
5728: PPUSH
5729: CALL_OW 185
5733: GO 5687
5735: POP
5736: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5737: LD_INT 22
5739: PUSH
5740: LD_VAR 0 1
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 21
5751: PUSH
5752: LD_INT 2
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: PUSH
5759: LD_INT 24
5761: PUSH
5762: LD_INT 250
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: PPUSH
5774: CALL_OW 69
5778: PUSH
5779: LD_VAR 0 3
5783: GREATEREQUAL
5784: IFFALSE 6057
// begin repeat begin wait ( 0 0$1 ) ;
5786: LD_INT 35
5788: PPUSH
5789: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5793: LD_ADDR_VAR 0 10
5797: PUSH
5798: LD_INT 22
5800: PUSH
5801: LD_VAR 0 1
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 21
5812: PUSH
5813: LD_INT 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 24
5822: PUSH
5823: LD_INT 651
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: LIST
5834: PPUSH
5835: CALL_OW 69
5839: PUSH
5840: FOR_IN
5841: IFFALSE 6017
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5843: LD_ADDR_VAR 0 15
5847: PUSH
5848: LD_INT 22
5850: PUSH
5851: LD_VAR 0 4
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PPUSH
5860: CALL_OW 69
5864: PPUSH
5865: LD_VAR 0 10
5869: PPUSH
5870: CALL_OW 74
5874: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5875: LD_ADDR_VAR 0 16
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_VAR 0 4
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 2
5894: PUSH
5895: LD_INT 59
5897: PUSH
5898: EMPTY
5899: LIST
5900: PUSH
5901: LD_INT 21
5903: PUSH
5904: LD_INT 1
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 21
5913: PUSH
5914: LD_INT 2
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PUSH
5931: EMPTY
5932: LIST
5933: PPUSH
5934: CALL_OW 69
5938: PPUSH
5939: LD_VAR 0 10
5943: PPUSH
5944: CALL_OW 74
5948: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5949: LD_VAR 0 10
5953: PPUSH
5954: LD_VAR 0 15
5958: PPUSH
5959: CALL_OW 296
5963: PUSH
5964: LD_INT 8
5966: PLUS
5967: PUSH
5968: LD_VAR 0 10
5972: PPUSH
5973: LD_VAR 0 16
5977: PPUSH
5978: CALL_OW 296
5982: LESS
5983: IFFALSE 6001
// begin ComAttackUnit ( i , target1 ) ;
5985: LD_VAR 0 10
5989: PPUSH
5990: LD_VAR 0 15
5994: PPUSH
5995: CALL_OW 115
// end else
5999: GO 6015
// begin ComAttackUnit ( i , target2 ) ;
6001: LD_VAR 0 10
6005: PPUSH
6006: LD_VAR 0 16
6010: PPUSH
6011: CALL_OW 115
// end ; end ;
6015: GO 5840
6017: POP
6018: POP
// end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
6019: LD_INT 22
6021: PUSH
6022: LD_VAR 0 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 21
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL_OW 69
6049: PUSH
6050: LD_VAR 0 3
6054: LESSEQUAL
6055: IFFALSE 5786
// end ; end ;
6057: LD_VAR 0 9
6061: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6062: LD_INT 0
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
6068: PPUSH
6069: PPUSH
6070: PPUSH
6071: PPUSH
6072: PPUSH
6073: PPUSH
6074: PPUSH
// for i = 1 to medicCount do
6075: LD_ADDR_VAR 0 14
6079: PUSH
6080: DOUBLE
6081: LD_INT 1
6083: DEC
6084: ST_TO_ADDR
6085: LD_VAR 0 7
6089: PUSH
6090: FOR_TO
6091: IFFALSE 6173
// begin uc_side = side ;
6093: LD_ADDR_OWVAR 20
6097: PUSH
6098: LD_VAR 0 1
6102: ST_TO_ADDR
// uc_nation = nation ;
6103: LD_ADDR_OWVAR 21
6107: PUSH
6108: LD_VAR 0 2
6112: ST_TO_ADDR
// hc_name =  ;
6113: LD_ADDR_OWVAR 26
6117: PUSH
6118: LD_STRING 
6120: ST_TO_ADDR
// hc_gallery =  ;
6121: LD_ADDR_OWVAR 33
6125: PUSH
6126: LD_STRING 
6128: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6129: LD_INT 0
6131: PPUSH
6132: LD_INT 4
6134: PPUSH
6135: LD_VAR 0 8
6139: PPUSH
6140: CALL_OW 380
// un = CreateHuman ;
6144: LD_ADDR_VAR 0 16
6148: PUSH
6149: CALL_OW 44
6153: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6154: LD_VAR 0 16
6158: PPUSH
6159: LD_VAR 0 9
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 49
// end ;
6171: GO 6090
6173: POP
6174: POP
// for i = 1 to soldierCount do
6175: LD_ADDR_VAR 0 14
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 3
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6273
// begin uc_side = side ;
6193: LD_ADDR_OWVAR 20
6197: PUSH
6198: LD_VAR 0 1
6202: ST_TO_ADDR
// uc_nation = nation ;
6203: LD_ADDR_OWVAR 21
6207: PUSH
6208: LD_VAR 0 2
6212: ST_TO_ADDR
// hc_name =  ;
6213: LD_ADDR_OWVAR 26
6217: PUSH
6218: LD_STRING 
6220: ST_TO_ADDR
// hc_gallery =  ;
6221: LD_ADDR_OWVAR 33
6225: PUSH
6226: LD_STRING 
6228: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6229: LD_INT 0
6231: PPUSH
6232: LD_INT 1
6234: PPUSH
6235: LD_VAR 0 8
6239: PPUSH
6240: CALL_OW 380
// un = CreateHuman ;
6244: LD_ADDR_VAR 0 16
6248: PUSH
6249: CALL_OW 44
6253: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6254: LD_VAR 0 16
6258: PPUSH
6259: LD_VAR 0 9
6263: PPUSH
6264: LD_INT 0
6266: PPUSH
6267: CALL_OW 49
// end ;
6271: GO 6190
6273: POP
6274: POP
// for i = 1 to sniperCount do
6275: LD_ADDR_VAR 0 14
6279: PUSH
6280: DOUBLE
6281: LD_INT 1
6283: DEC
6284: ST_TO_ADDR
6285: LD_VAR 0 4
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6373
// begin uc_side = side ;
6293: LD_ADDR_OWVAR 20
6297: PUSH
6298: LD_VAR 0 1
6302: ST_TO_ADDR
// uc_nation = nation ;
6303: LD_ADDR_OWVAR 21
6307: PUSH
6308: LD_VAR 0 2
6312: ST_TO_ADDR
// hc_name =  ;
6313: LD_ADDR_OWVAR 26
6317: PUSH
6318: LD_STRING 
6320: ST_TO_ADDR
// hc_gallery =  ;
6321: LD_ADDR_OWVAR 33
6325: PUSH
6326: LD_STRING 
6328: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6329: LD_INT 0
6331: PPUSH
6332: LD_INT 5
6334: PPUSH
6335: LD_VAR 0 8
6339: PPUSH
6340: CALL_OW 380
// un = CreateHuman ;
6344: LD_ADDR_VAR 0 16
6348: PUSH
6349: CALL_OW 44
6353: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6354: LD_VAR 0 16
6358: PPUSH
6359: LD_VAR 0 9
6363: PPUSH
6364: LD_INT 0
6366: PPUSH
6367: CALL_OW 49
// end ;
6371: GO 6290
6373: POP
6374: POP
// for i = 1 to bazookCount do
6375: LD_ADDR_VAR 0 14
6379: PUSH
6380: DOUBLE
6381: LD_INT 1
6383: DEC
6384: ST_TO_ADDR
6385: LD_VAR 0 5
6389: PUSH
6390: FOR_TO
6391: IFFALSE 6473
// begin uc_side = side ;
6393: LD_ADDR_OWVAR 20
6397: PUSH
6398: LD_VAR 0 1
6402: ST_TO_ADDR
// uc_nation = nation ;
6403: LD_ADDR_OWVAR 21
6407: PUSH
6408: LD_VAR 0 2
6412: ST_TO_ADDR
// hc_name =  ;
6413: LD_ADDR_OWVAR 26
6417: PUSH
6418: LD_STRING 
6420: ST_TO_ADDR
// hc_gallery =  ;
6421: LD_ADDR_OWVAR 33
6425: PUSH
6426: LD_STRING 
6428: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6429: LD_INT 0
6431: PPUSH
6432: LD_INT 9
6434: PPUSH
6435: LD_VAR 0 8
6439: PPUSH
6440: CALL_OW 380
// un = CreateHuman ;
6444: LD_ADDR_VAR 0 16
6448: PUSH
6449: CALL_OW 44
6453: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6454: LD_VAR 0 16
6458: PPUSH
6459: LD_VAR 0 9
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 49
// end ;
6471: GO 6390
6473: POP
6474: POP
// for i = 1 to mortalCount do
6475: LD_ADDR_VAR 0 14
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 6
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6573
// begin uc_side = side ;
6493: LD_ADDR_OWVAR 20
6497: PUSH
6498: LD_VAR 0 1
6502: ST_TO_ADDR
// uc_nation = nation ;
6503: LD_ADDR_OWVAR 21
6507: PUSH
6508: LD_VAR 0 2
6512: ST_TO_ADDR
// hc_name =  ;
6513: LD_ADDR_OWVAR 26
6517: PUSH
6518: LD_STRING 
6520: ST_TO_ADDR
// hc_gallery =  ;
6521: LD_ADDR_OWVAR 33
6525: PUSH
6526: LD_STRING 
6528: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6529: LD_INT 0
6531: PPUSH
6532: LD_INT 8
6534: PPUSH
6535: LD_VAR 0 8
6539: PPUSH
6540: CALL_OW 380
// un = CreateHuman ;
6544: LD_ADDR_VAR 0 16
6548: PUSH
6549: CALL_OW 44
6553: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6554: LD_VAR 0 16
6558: PPUSH
6559: LD_VAR 0 9
6563: PPUSH
6564: LD_INT 0
6566: PPUSH
6567: CALL_OW 49
// end ;
6571: GO 6490
6573: POP
6574: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6575: LD_ADDR_VAR 0 19
6579: PUSH
6580: LD_INT 22
6582: PUSH
6583: LD_VAR 0 1
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: LD_INT 25
6597: PUSH
6598: LD_INT 1
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 25
6607: PUSH
6608: LD_INT 5
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 25
6617: PUSH
6618: LD_INT 8
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 25
6627: PUSH
6628: LD_INT 9
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PPUSH
6646: CALL_OW 69
6650: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6651: LD_ADDR_VAR 0 18
6655: PUSH
6656: LD_INT 22
6658: PUSH
6659: LD_VAR 0 1
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 25
6670: PUSH
6671: LD_INT 4
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: CALL_OW 69
6686: ST_TO_ADDR
// for i in medic_list do
6687: LD_ADDR_VAR 0 14
6691: PUSH
6692: LD_VAR 0 18
6696: PUSH
6697: FOR_IN
6698: IFFALSE 6716
// ComMoveToArea ( i , healArea ) ;
6700: LD_VAR 0 14
6704: PPUSH
6705: LD_VAR 0 10
6709: PPUSH
6710: CALL_OW 113
6714: GO 6697
6716: POP
6717: POP
// if strategy = 1 then
6718: LD_VAR 0 12
6722: PUSH
6723: LD_INT 1
6725: EQUAL
6726: IFFALSE 7461
// begin repeat wait ( 0 0$3 ) ;
6728: LD_INT 105
6730: PPUSH
6731: CALL_OW 67
// for i in soldiersOK_list do
6735: LD_ADDR_VAR 0 14
6739: PUSH
6740: LD_VAR 0 19
6744: PUSH
6745: FOR_IN
6746: IFFALSE 6810
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6748: LD_VAR 0 14
6752: PPUSH
6753: LD_INT 91
6755: PPUSH
6756: LD_INT 63
6758: PPUSH
6759: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
6763: LD_VAR 0 14
6767: PPUSH
6768: LD_INT 101
6770: PPUSH
6771: LD_INT 53
6773: PPUSH
6774: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
6778: LD_VAR 0 14
6782: PPUSH
6783: LD_INT 75
6785: PPUSH
6786: LD_INT 23
6788: PPUSH
6789: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
6793: LD_VAR 0 14
6797: PPUSH
6798: LD_INT 78
6800: PPUSH
6801: LD_INT 8
6803: PPUSH
6804: CALL_OW 174
// end ;
6808: GO 6745
6810: POP
6811: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 0 ;
6812: LD_INT 15
6814: PPUSH
6815: LD_INT 22
6817: PUSH
6818: LD_VAR 0 1
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 70
6831: PUSH
6832: LD_INT 0
6834: GREATER
6835: IFFALSE 6728
// repeat wait ( 0 0$1 ) ;
6837: LD_INT 35
6839: PPUSH
6840: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6844: LD_ADDR_VAR 0 17
6848: PUSH
6849: LD_INT 22
6851: PUSH
6852: LD_VAR 0 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 1
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: LD_INT 24
6869: PUSH
6870: LD_INT 550
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 24
6883: PUSH
6884: LD_INT 250
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PPUSH
6900: CALL_OW 69
6904: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6905: LD_ADDR_VAR 0 19
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_VAR 0 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 2
6924: PUSH
6925: LD_INT 25
6927: PUSH
6928: LD_INT 1
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 5
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 25
6947: PUSH
6948: LD_INT 8
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 25
6957: PUSH
6958: LD_INT 9
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 24
6974: PUSH
6975: LD_INT 1000
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: ST_TO_ADDR
// if medicCount > 0 then
6992: LD_VAR 0 7
6996: PUSH
6997: LD_INT 0
6999: GREATER
7000: IFFALSE 7074
// begin if damageUnit_list > 0 then
7002: LD_VAR 0 17
7006: PUSH
7007: LD_INT 0
7009: GREATER
7010: IFFALSE 7074
// begin for i in damageUnit_list do
7012: LD_ADDR_VAR 0 14
7016: PUSH
7017: LD_VAR 0 17
7021: PUSH
7022: FOR_IN
7023: IFFALSE 7072
// begin ComMoveToArea ( i , healArea ) ;
7025: LD_VAR 0 14
7029: PPUSH
7030: LD_VAR 0 10
7034: PPUSH
7035: CALL_OW 113
// for j in medic_list do
7039: LD_ADDR_VAR 0 15
7043: PUSH
7044: LD_VAR 0 18
7048: PUSH
7049: FOR_IN
7050: IFFALSE 7068
// AddComHeal ( j , i ) ;
7052: LD_VAR 0 15
7056: PPUSH
7057: LD_VAR 0 14
7061: PPUSH
7062: CALL_OW 188
7066: GO 7049
7068: POP
7069: POP
// end ;
7070: GO 7022
7072: POP
7073: POP
// end ; end ; for i in soldiersOK_list do
7074: LD_ADDR_VAR 0 14
7078: PUSH
7079: LD_VAR 0 19
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7261
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7087: LD_ADDR_VAR 0 22
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_VAR 0 11
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PPUSH
7109: LD_VAR 0 14
7113: PPUSH
7114: CALL_OW 74
7118: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7119: LD_ADDR_VAR 0 23
7123: PUSH
7124: LD_INT 22
7126: PUSH
7127: LD_VAR 0 11
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 59
7141: PUSH
7142: EMPTY
7143: LIST
7144: PUSH
7145: LD_INT 21
7147: PUSH
7148: LD_INT 1
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 21
7157: PUSH
7158: LD_INT 2
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 69
7182: PPUSH
7183: LD_VAR 0 14
7187: PPUSH
7188: CALL_OW 74
7192: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7193: LD_VAR 0 14
7197: PPUSH
7198: LD_VAR 0 22
7202: PPUSH
7203: CALL_OW 296
7207: PUSH
7208: LD_INT 8
7210: PLUS
7211: PUSH
7212: LD_VAR 0 14
7216: PPUSH
7217: LD_VAR 0 23
7221: PPUSH
7222: CALL_OW 296
7226: LESS
7227: IFFALSE 7245
// begin ComAttackUnit ( i , target1 ) ;
7229: LD_VAR 0 14
7233: PPUSH
7234: LD_VAR 0 22
7238: PPUSH
7239: CALL_OW 115
// end else
7243: GO 7259
// begin ComAttackUnit ( i , target2 ) ;
7245: LD_VAR 0 14
7249: PPUSH
7250: LD_VAR 0 23
7254: PPUSH
7255: CALL_OW 115
// end ; end ;
7259: GO 7084
7261: POP
7262: POP
// for i in soldiersOK_list do
7263: LD_ADDR_VAR 0 14
7267: PUSH
7268: LD_VAR 0 19
7272: PUSH
7273: FOR_IN
7274: IFFALSE 7450
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7276: LD_ADDR_VAR 0 22
7280: PUSH
7281: LD_INT 22
7283: PUSH
7284: LD_VAR 0 11
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PPUSH
7293: CALL_OW 69
7297: PPUSH
7298: LD_VAR 0 14
7302: PPUSH
7303: CALL_OW 74
7307: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7308: LD_ADDR_VAR 0 23
7312: PUSH
7313: LD_INT 22
7315: PUSH
7316: LD_VAR 0 11
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: LD_INT 59
7330: PUSH
7331: EMPTY
7332: LIST
7333: PUSH
7334: LD_INT 21
7336: PUSH
7337: LD_INT 1
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 21
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: PPUSH
7372: LD_VAR 0 14
7376: PPUSH
7377: CALL_OW 74
7381: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7382: LD_VAR 0 14
7386: PPUSH
7387: LD_VAR 0 22
7391: PPUSH
7392: CALL_OW 296
7396: PUSH
7397: LD_INT 8
7399: PLUS
7400: PUSH
7401: LD_VAR 0 14
7405: PPUSH
7406: LD_VAR 0 23
7410: PPUSH
7411: CALL_OW 296
7415: LESS
7416: IFFALSE 7434
// begin ComAttackUnit ( i , target1 ) ;
7418: LD_VAR 0 14
7422: PPUSH
7423: LD_VAR 0 22
7427: PPUSH
7428: CALL_OW 115
// end else
7432: GO 7448
// begin ComAttackUnit ( i , target2 ) ;
7434: LD_VAR 0 14
7438: PPUSH
7439: LD_VAR 0 23
7443: PPUSH
7444: CALL_OW 115
// end ; end ;
7448: GO 7273
7450: POP
7451: POP
// until soldiersOK_list = [ ] ;
7452: LD_VAR 0 19
7456: PUSH
7457: EMPTY
7458: EQUAL
7459: IFFALSE 6837
// end ; if strategy = 2 then
7461: LD_VAR 0 12
7465: PUSH
7466: LD_INT 2
7468: EQUAL
7469: IFFALSE 8174
// begin repeat wait ( 0 0$1 ) ;
7471: LD_INT 35
7473: PPUSH
7474: CALL_OW 67
// for i in soldiersOK_list do
7478: LD_ADDR_VAR 0 14
7482: PUSH
7483: LD_VAR 0 19
7487: PUSH
7488: FOR_IN
7489: IFFALSE 7523
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7491: LD_VAR 0 14
7495: PPUSH
7496: LD_INT 91
7498: PPUSH
7499: LD_INT 63
7501: PPUSH
7502: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7506: LD_VAR 0 14
7510: PPUSH
7511: LD_INT 75
7513: PPUSH
7514: LD_INT 33
7516: PPUSH
7517: CALL_OW 174
// end ;
7521: GO 7488
7523: POP
7524: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 0 ;
7525: LD_INT 16
7527: PPUSH
7528: LD_INT 22
7530: PUSH
7531: LD_VAR 0 1
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 70
7544: PUSH
7545: LD_INT 0
7547: GREATER
7548: IFFALSE 7471
// repeat wait ( 0 0$3 ) ;
7550: LD_INT 105
7552: PPUSH
7553: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7557: LD_ADDR_VAR 0 17
7561: PUSH
7562: LD_INT 22
7564: PUSH
7565: LD_VAR 0 1
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: LD_INT 24
7582: PUSH
7583: LD_INT 550
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 24
7596: PUSH
7597: LD_INT 250
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7618: LD_ADDR_VAR 0 19
7622: PUSH
7623: LD_INT 22
7625: PUSH
7626: LD_VAR 0 1
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: LD_INT 25
7640: PUSH
7641: LD_INT 1
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 25
7650: PUSH
7651: LD_INT 5
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 25
7660: PUSH
7661: LD_INT 8
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 25
7670: PUSH
7671: LD_INT 9
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 24
7687: PUSH
7688: LD_INT 1000
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 69
7704: ST_TO_ADDR
// if medicCount > 0 then
7705: LD_VAR 0 7
7709: PUSH
7710: LD_INT 0
7712: GREATER
7713: IFFALSE 7787
// begin if damageUnit_list > 0 then
7715: LD_VAR 0 17
7719: PUSH
7720: LD_INT 0
7722: GREATER
7723: IFFALSE 7787
// begin for i in damageUnit_list do
7725: LD_ADDR_VAR 0 14
7729: PUSH
7730: LD_VAR 0 17
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7785
// begin ComMoveToArea ( i , healArea ) ;
7738: LD_VAR 0 14
7742: PPUSH
7743: LD_VAR 0 10
7747: PPUSH
7748: CALL_OW 113
// for j in medic_list do
7752: LD_ADDR_VAR 0 15
7756: PUSH
7757: LD_VAR 0 18
7761: PUSH
7762: FOR_IN
7763: IFFALSE 7781
// AddComHeal ( j , i ) ;
7765: LD_VAR 0 15
7769: PPUSH
7770: LD_VAR 0 14
7774: PPUSH
7775: CALL_OW 188
7779: GO 7762
7781: POP
7782: POP
// end ;
7783: GO 7735
7785: POP
7786: POP
// end ; end ; for i in soldiersOK_list do
7787: LD_ADDR_VAR 0 14
7791: PUSH
7792: LD_VAR 0 19
7796: PUSH
7797: FOR_IN
7798: IFFALSE 7974
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7800: LD_ADDR_VAR 0 22
7804: PUSH
7805: LD_INT 22
7807: PUSH
7808: LD_VAR 0 11
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 69
7821: PPUSH
7822: LD_VAR 0 14
7826: PPUSH
7827: CALL_OW 74
7831: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7832: LD_ADDR_VAR 0 23
7836: PUSH
7837: LD_INT 22
7839: PUSH
7840: LD_VAR 0 11
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 2
7851: PUSH
7852: LD_INT 59
7854: PUSH
7855: EMPTY
7856: LIST
7857: PUSH
7858: LD_INT 21
7860: PUSH
7861: LD_INT 1
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 21
7870: PUSH
7871: LD_INT 2
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: PPUSH
7891: CALL_OW 69
7895: PPUSH
7896: LD_VAR 0 14
7900: PPUSH
7901: CALL_OW 74
7905: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7906: LD_VAR 0 14
7910: PPUSH
7911: LD_VAR 0 22
7915: PPUSH
7916: CALL_OW 296
7920: PUSH
7921: LD_INT 8
7923: PLUS
7924: PUSH
7925: LD_VAR 0 14
7929: PPUSH
7930: LD_VAR 0 23
7934: PPUSH
7935: CALL_OW 296
7939: LESS
7940: IFFALSE 7958
// begin ComAttackUnit ( i , target1 ) ;
7942: LD_VAR 0 14
7946: PPUSH
7947: LD_VAR 0 22
7951: PPUSH
7952: CALL_OW 115
// end else
7956: GO 7972
// begin ComAttackUnit ( i , target2 ) ;
7958: LD_VAR 0 14
7962: PPUSH
7963: LD_VAR 0 23
7967: PPUSH
7968: CALL_OW 115
// end ; end ;
7972: GO 7797
7974: POP
7975: POP
// for i in soldiersOK_list do
7976: LD_ADDR_VAR 0 14
7980: PUSH
7981: LD_VAR 0 19
7985: PUSH
7986: FOR_IN
7987: IFFALSE 8163
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7989: LD_ADDR_VAR 0 22
7993: PUSH
7994: LD_INT 22
7996: PUSH
7997: LD_VAR 0 11
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PPUSH
8006: CALL_OW 69
8010: PPUSH
8011: LD_VAR 0 14
8015: PPUSH
8016: CALL_OW 74
8020: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8021: LD_ADDR_VAR 0 23
8025: PUSH
8026: LD_INT 22
8028: PUSH
8029: LD_VAR 0 11
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: LD_INT 59
8043: PUSH
8044: EMPTY
8045: LIST
8046: PUSH
8047: LD_INT 21
8049: PUSH
8050: LD_INT 1
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: PPUSH
8080: CALL_OW 69
8084: PPUSH
8085: LD_VAR 0 14
8089: PPUSH
8090: CALL_OW 74
8094: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8095: LD_VAR 0 14
8099: PPUSH
8100: LD_VAR 0 22
8104: PPUSH
8105: CALL_OW 296
8109: PUSH
8110: LD_INT 8
8112: PLUS
8113: PUSH
8114: LD_VAR 0 14
8118: PPUSH
8119: LD_VAR 0 23
8123: PPUSH
8124: CALL_OW 296
8128: LESS
8129: IFFALSE 8147
// begin ComAttackUnit ( i , target1 ) ;
8131: LD_VAR 0 14
8135: PPUSH
8136: LD_VAR 0 22
8140: PPUSH
8141: CALL_OW 115
// end else
8145: GO 8161
// begin ComAttackUnit ( i , target2 ) ;
8147: LD_VAR 0 14
8151: PPUSH
8152: LD_VAR 0 23
8156: PPUSH
8157: CALL_OW 115
// end ; end ;
8161: GO 7986
8163: POP
8164: POP
// until soldiersOK_list = [ ] ;
8165: LD_VAR 0 19
8169: PUSH
8170: EMPTY
8171: EQUAL
8172: IFFALSE 7550
// end ; end ;
8174: LD_VAR 0 13
8178: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8179: LD_INT 0
8181: PPUSH
8182: PPUSH
8183: PPUSH
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
8188: PPUSH
8189: PPUSH
8190: PPUSH
8191: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8192: LD_ADDR_VAR 0 9
8196: PUSH
8197: LD_INT 22
8199: PUSH
8200: LD_VAR 0 1
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 24
8221: PUSH
8222: LD_INT 660
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: LD_INT 3
8231: PUSH
8232: LD_INT 58
8234: PUSH
8235: EMPTY
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: LD_INT 3
8244: PUSH
8245: LD_INT 34
8247: PUSH
8248: LD_INT 53
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: PPUSH
8266: CALL_OW 69
8270: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8271: LD_ADDR_VAR 0 10
8275: PUSH
8276: LD_INT 22
8278: PUSH
8279: LD_VAR 0 1
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: LD_INT 21
8290: PUSH
8291: LD_INT 2
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 3
8300: PUSH
8301: LD_INT 24
8303: PUSH
8304: LD_INT 660
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: PPUSH
8320: CALL_OW 69
8324: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8325: LD_ADDR_VAR 0 11
8329: PUSH
8330: LD_VAR 0 2
8334: PPUSH
8335: LD_INT 22
8337: PUSH
8338: LD_VAR 0 1
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: LD_INT 21
8349: PUSH
8350: LD_INT 2
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: LD_INT 24
8362: PUSH
8363: LD_INT 1000
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 70
8383: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8384: LD_ADDR_VAR 0 12
8388: PUSH
8389: LD_VAR 0 2
8393: PPUSH
8394: LD_INT 22
8396: PUSH
8397: LD_VAR 0 1
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: LD_INT 21
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_INT 24
8418: PUSH
8419: LD_INT 1000
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 58
8428: PUSH
8429: EMPTY
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 34
8437: PUSH
8438: LD_INT 53
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 70
8460: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8461: LD_ADDR_VAR 0 13
8465: PUSH
8466: EMPTY
8467: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8468: LD_ADDR_VAR 0 14
8472: PUSH
8473: LD_VAR 0 2
8477: PPUSH
8478: LD_INT 22
8480: PUSH
8481: LD_VAR 0 1
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 25
8492: PUSH
8493: LD_INT 3
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PPUSH
8504: CALL_OW 70
8508: ST_TO_ADDR
// if damageVehicle_list > 0 then
8509: LD_VAR 0 10
8513: PUSH
8514: LD_INT 0
8516: GREATER
8517: IFFALSE 8555
// begin for i in damageVehicle_list do
8519: LD_ADDR_VAR 0 7
8523: PUSH
8524: LD_VAR 0 10
8528: PUSH
8529: FOR_IN
8530: IFFALSE 8553
// begin ComMoveXY ( i , repX , repY ) ;
8532: LD_VAR 0 7
8536: PPUSH
8537: LD_VAR 0 3
8541: PPUSH
8542: LD_VAR 0 4
8546: PPUSH
8547: CALL_OW 111
// end ;
8551: GO 8529
8553: POP
8554: POP
// end ; if vehicleNeedRepair_list > 0 then
8555: LD_VAR 0 11
8559: PUSH
8560: LD_INT 0
8562: GREATER
8563: IFFALSE 8660
// begin for i in vehicleNeedRepair_list do
8565: LD_ADDR_VAR 0 7
8569: PUSH
8570: LD_VAR 0 11
8574: PUSH
8575: FOR_IN
8576: IFFALSE 8658
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8578: LD_ADDR_VAR 0 13
8582: PUSH
8583: LD_VAR 0 13
8587: PUSH
8588: LD_VAR 0 7
8592: PPUSH
8593: CALL_OW 313
8597: ADD
8598: ST_TO_ADDR
// Display_strings = mechanicInside_list ;
8599: LD_ADDR_OWVAR 47
8603: PUSH
8604: LD_VAR 0 13
8608: ST_TO_ADDR
// for j in mechanicInside_list do
8609: LD_ADDR_VAR 0 8
8613: PUSH
8614: LD_VAR 0 13
8618: PUSH
8619: FOR_IN
8620: IFFALSE 8654
// begin ComExitVehicle ( i ) ;
8622: LD_VAR 0 7
8626: PPUSH
8627: CALL_OW 121
// wait ( 0 0$1 ) ;
8631: LD_INT 35
8633: PPUSH
8634: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8638: LD_VAR 0 7
8642: PPUSH
8643: LD_VAR 0 8
8647: PPUSH
8648: CALL_OW 129
// end ;
8652: GO 8619
8654: POP
8655: POP
// end ;
8656: GO 8575
8658: POP
8659: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8660: LD_VAR 0 12
8664: PUSH
8665: LD_INT 0
8667: GREATER
8668: IFFALSE 8708
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8670: LD_VAR 0 14
8674: PUSH
8675: LD_INT 1
8677: ARRAY
8678: PPUSH
8679: LD_VAR 0 12
8683: PUSH
8684: LD_INT 1
8686: ARRAY
8687: PPUSH
8688: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8692: LD_VAR 0 12
8696: PUSH
8697: LD_INT 1
8699: ARRAY
8700: PPUSH
8701: LD_INT 100
8703: PPUSH
8704: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8708: LD_VAR 0 9
8712: PUSH
8713: LD_INT 0
8715: GREATER
8716: IFFALSE 8907
// begin for i in vehicleOK_list do
8718: LD_ADDR_VAR 0 7
8722: PUSH
8723: LD_VAR 0 9
8727: PUSH
8728: FOR_IN
8729: IFFALSE 8905
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8731: LD_ADDR_VAR 0 15
8735: PUSH
8736: LD_INT 22
8738: PUSH
8739: LD_VAR 0 5
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 69
8752: PPUSH
8753: LD_VAR 0 7
8757: PPUSH
8758: CALL_OW 74
8762: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8763: LD_ADDR_VAR 0 16
8767: PUSH
8768: LD_INT 22
8770: PUSH
8771: LD_VAR 0 5
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 2
8782: PUSH
8783: LD_INT 59
8785: PUSH
8786: EMPTY
8787: LIST
8788: PUSH
8789: LD_INT 21
8791: PUSH
8792: LD_INT 1
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 21
8801: PUSH
8802: LD_INT 2
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: PPUSH
8822: CALL_OW 69
8826: PPUSH
8827: LD_VAR 0 7
8831: PPUSH
8832: CALL_OW 74
8836: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8837: LD_VAR 0 7
8841: PPUSH
8842: LD_VAR 0 15
8846: PPUSH
8847: CALL_OW 296
8851: PUSH
8852: LD_INT 8
8854: PLUS
8855: PUSH
8856: LD_VAR 0 7
8860: PPUSH
8861: LD_VAR 0 16
8865: PPUSH
8866: CALL_OW 296
8870: LESS
8871: IFFALSE 8889
// begin ComAttackUnit ( i , target1 ) ;
8873: LD_VAR 0 7
8877: PPUSH
8878: LD_VAR 0 15
8882: PPUSH
8883: CALL_OW 115
// end else
8887: GO 8903
// begin ComAttackUnit ( i , target2 ) ;
8889: LD_VAR 0 7
8893: PPUSH
8894: LD_VAR 0 16
8898: PPUSH
8899: CALL_OW 115
// end ; end ;
8903: GO 8728
8905: POP
8906: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8907: LD_ADDR_VAR 0 7
8911: PUSH
8912: LD_VAR 0 2
8916: PPUSH
8917: LD_INT 22
8919: PUSH
8920: LD_VAR 0 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 25
8931: PUSH
8932: LD_INT 3
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 70
8947: NOT
8948: PUSH
8949: FOR_IN
8950: IFFALSE 8973
// ComMoveXY ( i , repX , repY ) ;
8952: LD_VAR 0 7
8956: PPUSH
8957: LD_VAR 0 3
8961: PPUSH
8962: LD_VAR 0 4
8966: PPUSH
8967: CALL_OW 111
8971: GO 8949
8973: POP
8974: POP
// end ;
8975: LD_VAR 0 6
8979: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8980: LD_INT 0
8982: PPUSH
8983: PPUSH
8984: PPUSH
8985: PPUSH
8986: PPUSH
8987: PPUSH
8988: PPUSH
8989: PPUSH
8990: PPUSH
8991: PPUSH
8992: PPUSH
// amChassisTab = [ ] ;
8993: LD_ADDR_VAR 0 19
8997: PUSH
8998: EMPTY
8999: ST_TO_ADDR
// arChassisTab = [ ] ;
9000: LD_ADDR_VAR 0 18
9004: PUSH
9005: EMPTY
9006: ST_TO_ADDR
// ruChassisTab = [ ] ;
9007: LD_ADDR_VAR 0 17
9011: PUSH
9012: EMPTY
9013: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9014: LD_INT 35
9016: PPUSH
9017: CALL_OW 67
// if nation = 1 then
9021: LD_VAR 0 5
9025: PUSH
9026: LD_INT 1
9028: EQUAL
9029: IFFALSE 9520
// begin uc_side = side ;
9031: LD_ADDR_OWVAR 20
9035: PUSH
9036: LD_VAR 0 2
9040: ST_TO_ADDR
// uc_nation = nation ;
9041: LD_ADDR_OWVAR 21
9045: PUSH
9046: LD_VAR 0 5
9050: ST_TO_ADDR
// vc_engine = vehengine ;
9051: LD_ADDR_OWVAR 39
9055: PUSH
9056: LD_VAR 0 6
9060: ST_TO_ADDR
// vc_control = vehcontrol ;
9061: LD_ADDR_OWVAR 38
9065: PUSH
9066: LD_VAR 0 7
9070: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9071: LD_ADDR_OWVAR 40
9075: PUSH
9076: LD_VAR 0 10
9080: PUSH
9081: LD_INT 1
9083: PPUSH
9084: LD_VAR 0 10
9088: PPUSH
9089: CALL_OW 12
9093: ARRAY
9094: ST_TO_ADDR
// for j = 1 to AMWeapon do
9095: LD_ADDR_VAR 0 14
9099: PUSH
9100: DOUBLE
9101: LD_INT 1
9103: DEC
9104: ST_TO_ADDR
9105: LD_VAR 0 10
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9412
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9113: LD_VAR 0 10
9117: PUSH
9118: LD_VAR 0 14
9122: ARRAY
9123: PUSH
9124: LD_INT 2
9126: EQUAL
9127: PUSH
9128: LD_VAR 0 10
9132: PUSH
9133: LD_VAR 0 14
9137: ARRAY
9138: PUSH
9139: LD_INT 3
9141: EQUAL
9142: OR
9143: IFFALSE 9196
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9145: LD_ADDR_VAR 0 19
9149: PUSH
9150: LD_INT 1
9152: PUSH
9153: LD_INT 2
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: LD_INT 4
9161: PUSH
9162: LD_INT 5
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9172: LD_ADDR_OWVAR 37
9176: PUSH
9177: LD_VAR 0 19
9181: PUSH
9182: LD_INT 1
9184: PPUSH
9185: LD_VAR 0 19
9189: PPUSH
9190: CALL_OW 12
9194: ARRAY
9195: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9196: LD_VAR 0 10
9200: PUSH
9201: LD_VAR 0 14
9205: ARRAY
9206: PUSH
9207: LD_INT 4
9209: EQUAL
9210: PUSH
9211: LD_VAR 0 10
9215: PUSH
9216: LD_VAR 0 14
9220: ARRAY
9221: PUSH
9222: LD_INT 5
9224: EQUAL
9225: OR
9226: PUSH
9227: LD_VAR 0 10
9231: PUSH
9232: LD_VAR 0 14
9236: ARRAY
9237: PUSH
9238: LD_INT 9
9240: EQUAL
9241: OR
9242: PUSH
9243: LD_VAR 0 10
9247: PUSH
9248: LD_VAR 0 14
9252: ARRAY
9253: PUSH
9254: LD_INT 11
9256: EQUAL
9257: OR
9258: PUSH
9259: LD_VAR 0 10
9263: PUSH
9264: LD_VAR 0 14
9268: ARRAY
9269: PUSH
9270: LD_INT 7
9272: EQUAL
9273: OR
9274: IFFALSE 9323
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9276: LD_ADDR_VAR 0 19
9280: PUSH
9281: LD_INT 2
9283: PUSH
9284: LD_INT 3
9286: PUSH
9287: LD_INT 4
9289: PUSH
9290: LD_INT 5
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9299: LD_ADDR_OWVAR 37
9303: PUSH
9304: LD_VAR 0 19
9308: PUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 19
9316: PPUSH
9317: CALL_OW 12
9321: ARRAY
9322: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9323: LD_VAR 0 10
9327: PUSH
9328: LD_VAR 0 14
9332: ARRAY
9333: PUSH
9334: LD_INT 8
9336: EQUAL
9337: PUSH
9338: LD_VAR 0 10
9342: PUSH
9343: LD_VAR 0 14
9347: ARRAY
9348: PUSH
9349: LD_INT 6
9351: EQUAL
9352: OR
9353: PUSH
9354: LD_VAR 0 10
9358: PUSH
9359: LD_VAR 0 14
9363: ARRAY
9364: PUSH
9365: LD_INT 10
9367: EQUAL
9368: OR
9369: IFFALSE 9410
// begin amChassisTab = [ 4 , 5 ] ;
9371: LD_ADDR_VAR 0 19
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9386: LD_ADDR_OWVAR 37
9390: PUSH
9391: LD_VAR 0 19
9395: PUSH
9396: LD_INT 1
9398: PPUSH
9399: LD_VAR 0 19
9403: PPUSH
9404: CALL_OW 12
9408: ARRAY
9409: ST_TO_ADDR
// end ; end ;
9410: GO 9110
9412: POP
9413: POP
// veh = CreateVehicle ;
9414: LD_ADDR_VAR 0 16
9418: PUSH
9419: CALL_OW 45
9423: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9424: LD_VAR 0 16
9428: PPUSH
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_INT 0
9436: PPUSH
9437: CALL_OW 49
// if vehControl = 1 then
9441: LD_VAR 0 7
9445: PUSH
9446: LD_INT 1
9448: EQUAL
9449: IFFALSE 9506
// begin hc_gallery =  ;
9451: LD_ADDR_OWVAR 33
9455: PUSH
9456: LD_STRING 
9458: ST_TO_ADDR
// hc_name =  ;
9459: LD_ADDR_OWVAR 26
9463: PUSH
9464: LD_STRING 
9466: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9467: LD_INT 0
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_VAR 0 4
9477: PPUSH
9478: CALL_OW 380
// un = CreateHuman ;
9482: LD_ADDR_VAR 0 15
9486: PUSH
9487: CALL_OW 44
9491: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9492: LD_VAR 0 15
9496: PPUSH
9497: LD_VAR 0 16
9501: PPUSH
9502: CALL_OW 52
// end ; i = i + 1 ;
9506: LD_ADDR_VAR 0 13
9510: PUSH
9511: LD_VAR 0 13
9515: PUSH
9516: LD_INT 1
9518: PLUS
9519: ST_TO_ADDR
// end ; if nation = 2 then
9520: LD_VAR 0 5
9524: PUSH
9525: LD_INT 2
9527: EQUAL
9528: IFFALSE 9952
// begin uc_side = side ;
9530: LD_ADDR_OWVAR 20
9534: PUSH
9535: LD_VAR 0 2
9539: ST_TO_ADDR
// uc_nation = nation ;
9540: LD_ADDR_OWVAR 21
9544: PUSH
9545: LD_VAR 0 5
9549: ST_TO_ADDR
// vc_engine = vehengine ;
9550: LD_ADDR_OWVAR 39
9554: PUSH
9555: LD_VAR 0 6
9559: ST_TO_ADDR
// vc_control = vehcontrol ;
9560: LD_ADDR_OWVAR 38
9564: PUSH
9565: LD_VAR 0 7
9569: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9570: LD_ADDR_OWVAR 40
9574: PUSH
9575: LD_VAR 0 9
9579: PUSH
9580: LD_INT 1
9582: PPUSH
9583: LD_VAR 0 9
9587: PPUSH
9588: CALL_OW 12
9592: ARRAY
9593: ST_TO_ADDR
// for j = 1 to ARWeapons do
9594: LD_ADDR_VAR 0 14
9598: PUSH
9599: DOUBLE
9600: LD_INT 1
9602: DEC
9603: ST_TO_ADDR
9604: LD_VAR 0 9
9608: PUSH
9609: FOR_TO
9610: IFFALSE 9844
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9612: LD_VAR 0 9
9616: PUSH
9617: LD_VAR 0 14
9621: ARRAY
9622: PUSH
9623: LD_INT 24
9625: EQUAL
9626: PUSH
9627: LD_VAR 0 9
9631: PUSH
9632: LD_VAR 0 14
9636: ARRAY
9637: PUSH
9638: LD_INT 22
9640: EQUAL
9641: OR
9642: PUSH
9643: LD_VAR 0 9
9647: PUSH
9648: LD_VAR 0 14
9652: ARRAY
9653: PUSH
9654: LD_INT 23
9656: EQUAL
9657: OR
9658: PUSH
9659: LD_VAR 0 9
9663: PUSH
9664: LD_VAR 0 14
9668: ARRAY
9669: PUSH
9670: LD_INT 30
9672: EQUAL
9673: OR
9674: IFFALSE 9723
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9676: LD_ADDR_VAR 0 18
9680: PUSH
9681: LD_INT 11
9683: PUSH
9684: LD_INT 12
9686: PUSH
9687: LD_INT 13
9689: PUSH
9690: LD_INT 14
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9699: LD_ADDR_OWVAR 37
9703: PUSH
9704: LD_VAR 0 18
9708: PUSH
9709: LD_INT 1
9711: PPUSH
9712: LD_VAR 0 18
9716: PPUSH
9717: CALL_OW 12
9721: ARRAY
9722: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9723: LD_VAR 0 9
9727: PUSH
9728: LD_VAR 0 14
9732: ARRAY
9733: PUSH
9734: LD_INT 29
9736: EQUAL
9737: PUSH
9738: LD_VAR 0 9
9742: PUSH
9743: LD_VAR 0 14
9747: ARRAY
9748: PUSH
9749: LD_INT 28
9751: EQUAL
9752: OR
9753: PUSH
9754: LD_VAR 0 9
9758: PUSH
9759: LD_VAR 0 14
9763: ARRAY
9764: PUSH
9765: LD_INT 27
9767: EQUAL
9768: OR
9769: PUSH
9770: LD_VAR 0 9
9774: PUSH
9775: LD_VAR 0 14
9779: ARRAY
9780: PUSH
9781: LD_INT 26
9783: EQUAL
9784: OR
9785: PUSH
9786: LD_VAR 0 9
9790: PUSH
9791: LD_VAR 0 14
9795: ARRAY
9796: PUSH
9797: LD_INT 25
9799: EQUAL
9800: OR
9801: IFFALSE 9842
// begin arChassisTab = [ 13 , 14 ] ;
9803: LD_ADDR_VAR 0 18
9807: PUSH
9808: LD_INT 13
9810: PUSH
9811: LD_INT 14
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9818: LD_ADDR_OWVAR 37
9822: PUSH
9823: LD_VAR 0 18
9827: PUSH
9828: LD_INT 1
9830: PPUSH
9831: LD_VAR 0 18
9835: PPUSH
9836: CALL_OW 12
9840: ARRAY
9841: ST_TO_ADDR
// end ; end ;
9842: GO 9609
9844: POP
9845: POP
// veh = CreateVehicle ;
9846: LD_ADDR_VAR 0 16
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9856: LD_VAR 0 16
9860: PPUSH
9861: LD_VAR 0 1
9865: PPUSH
9866: LD_INT 0
9868: PPUSH
9869: CALL_OW 49
// if vehcontrol = 1 then
9873: LD_VAR 0 7
9877: PUSH
9878: LD_INT 1
9880: EQUAL
9881: IFFALSE 9938
// begin hc_gallery =  ;
9883: LD_ADDR_OWVAR 33
9887: PUSH
9888: LD_STRING 
9890: ST_TO_ADDR
// hc_name =  ;
9891: LD_ADDR_OWVAR 26
9895: PUSH
9896: LD_STRING 
9898: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9899: LD_INT 0
9901: PPUSH
9902: LD_INT 3
9904: PPUSH
9905: LD_VAR 0 4
9909: PPUSH
9910: CALL_OW 380
// un = CreateHuman ;
9914: LD_ADDR_VAR 0 15
9918: PUSH
9919: CALL_OW 44
9923: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9924: LD_VAR 0 15
9928: PPUSH
9929: LD_VAR 0 16
9933: PPUSH
9934: CALL_OW 52
// end ; i = i + 1 ;
9938: LD_ADDR_VAR 0 13
9942: PUSH
9943: LD_VAR 0 13
9947: PUSH
9948: LD_INT 1
9950: PLUS
9951: ST_TO_ADDR
// end ; if nation = 3 then
9952: LD_VAR 0 5
9956: PUSH
9957: LD_INT 3
9959: EQUAL
9960: IFFALSE 10352
// begin uc_side = side ;
9962: LD_ADDR_OWVAR 20
9966: PUSH
9967: LD_VAR 0 2
9971: ST_TO_ADDR
// uc_nation = nation ;
9972: LD_ADDR_OWVAR 21
9976: PUSH
9977: LD_VAR 0 5
9981: ST_TO_ADDR
// vc_engine = vehengine ;
9982: LD_ADDR_OWVAR 39
9986: PUSH
9987: LD_VAR 0 6
9991: ST_TO_ADDR
// vc_control = vehcontrol ;
9992: LD_ADDR_OWVAR 38
9996: PUSH
9997: LD_VAR 0 7
10001: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10002: LD_ADDR_OWVAR 40
10006: PUSH
10007: LD_VAR 0 8
10011: PUSH
10012: LD_INT 1
10014: PPUSH
10015: LD_VAR 0 8
10019: PPUSH
10020: CALL_OW 12
10024: ARRAY
10025: ST_TO_ADDR
// for j = 1 to RuWeapons do
10026: LD_ADDR_VAR 0 14
10030: PUSH
10031: DOUBLE
10032: LD_INT 1
10034: DEC
10035: ST_TO_ADDR
10036: LD_VAR 0 8
10040: PUSH
10041: FOR_TO
10042: IFFALSE 10244
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10044: LD_VAR 0 8
10048: PUSH
10049: LD_VAR 0 14
10053: ARRAY
10054: PUSH
10055: LD_INT 42
10057: EQUAL
10058: PUSH
10059: LD_VAR 0 8
10063: PUSH
10064: LD_VAR 0 14
10068: ARRAY
10069: PUSH
10070: LD_INT 43
10072: EQUAL
10073: OR
10074: PUSH
10075: LD_VAR 0 8
10079: PUSH
10080: LD_VAR 0 14
10084: ARRAY
10085: PUSH
10086: LD_INT 44
10088: EQUAL
10089: OR
10090: PUSH
10091: LD_VAR 0 8
10095: PUSH
10096: LD_VAR 0 14
10100: ARRAY
10101: PUSH
10102: LD_INT 45
10104: EQUAL
10105: OR
10106: PUSH
10107: LD_VAR 0 8
10111: PUSH
10112: LD_VAR 0 14
10116: ARRAY
10117: PUSH
10118: LD_INT 49
10120: EQUAL
10121: OR
10122: IFFALSE 10171
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10124: LD_ADDR_VAR 0 17
10128: PUSH
10129: LD_INT 21
10131: PUSH
10132: LD_INT 22
10134: PUSH
10135: LD_INT 23
10137: PUSH
10138: LD_INT 24
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10147: LD_ADDR_OWVAR 37
10151: PUSH
10152: LD_VAR 0 17
10156: PUSH
10157: LD_INT 1
10159: PPUSH
10160: LD_VAR 0 17
10164: PPUSH
10165: CALL_OW 12
10169: ARRAY
10170: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10171: LD_VAR 0 8
10175: PUSH
10176: LD_VAR 0 14
10180: ARRAY
10181: PUSH
10182: LD_INT 46
10184: EQUAL
10185: PUSH
10186: LD_VAR 0 8
10190: PUSH
10191: LD_VAR 0 14
10195: ARRAY
10196: PUSH
10197: LD_INT 47
10199: EQUAL
10200: OR
10201: IFFALSE 10242
// begin ruChassisTab = [ 23 , 24 ] ;
10203: LD_ADDR_VAR 0 17
10207: PUSH
10208: LD_INT 23
10210: PUSH
10211: LD_INT 24
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10218: LD_ADDR_OWVAR 37
10222: PUSH
10223: LD_VAR 0 17
10227: PUSH
10228: LD_INT 1
10230: PPUSH
10231: LD_VAR 0 17
10235: PPUSH
10236: CALL_OW 12
10240: ARRAY
10241: ST_TO_ADDR
// end ; end ;
10242: GO 10041
10244: POP
10245: POP
// veh = CreateVehicle ;
10246: LD_ADDR_VAR 0 16
10250: PUSH
10251: CALL_OW 45
10255: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10256: LD_VAR 0 16
10260: PPUSH
10261: LD_VAR 0 1
10265: PPUSH
10266: LD_INT 0
10268: PPUSH
10269: CALL_OW 49
// if vehcontrol = 1 then
10273: LD_VAR 0 7
10277: PUSH
10278: LD_INT 1
10280: EQUAL
10281: IFFALSE 10338
// begin hc_gallery =  ;
10283: LD_ADDR_OWVAR 33
10287: PUSH
10288: LD_STRING 
10290: ST_TO_ADDR
// hc_name =  ;
10291: LD_ADDR_OWVAR 26
10295: PUSH
10296: LD_STRING 
10298: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10299: LD_INT 0
10301: PPUSH
10302: LD_INT 3
10304: PPUSH
10305: LD_VAR 0 4
10309: PPUSH
10310: CALL_OW 380
// un = CreateHuman ;
10314: LD_ADDR_VAR 0 15
10318: PUSH
10319: CALL_OW 44
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 15
10328: PPUSH
10329: LD_VAR 0 16
10333: PPUSH
10334: CALL_OW 52
// end ; i = i + 1 ;
10338: LD_ADDR_VAR 0 13
10342: PUSH
10343: LD_VAR 0 13
10347: PUSH
10348: LD_INT 1
10350: PLUS
10351: ST_TO_ADDR
// end ; until i = vehCount ;
10352: LD_VAR 0 13
10356: PUSH
10357: LD_VAR 0 3
10361: EQUAL
10362: IFFALSE 9014
// repeat wait ( 0 0$1 ) ;
10364: LD_INT 35
10366: PPUSH
10367: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10371: LD_ADDR_VAR 0 20
10375: PUSH
10376: LD_INT 22
10378: PUSH
10379: LD_VAR 0 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 2
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 24
10400: PUSH
10401: LD_INT 661
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: PPUSH
10413: CALL_OW 69
10417: ST_TO_ADDR
// if vehicleOK_list > 0 then
10418: LD_VAR 0 20
10422: PUSH
10423: LD_INT 0
10425: GREATER
10426: IFFALSE 10617
// begin for i in vehicleOK_list do
10428: LD_ADDR_VAR 0 13
10432: PUSH
10433: LD_VAR 0 20
10437: PUSH
10438: FOR_IN
10439: IFFALSE 10615
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10441: LD_ADDR_VAR 0 21
10445: PUSH
10446: LD_INT 22
10448: PUSH
10449: LD_VAR 0 11
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PPUSH
10458: CALL_OW 69
10462: PPUSH
10463: LD_VAR 0 13
10467: PPUSH
10468: CALL_OW 74
10472: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10473: LD_ADDR_VAR 0 22
10477: PUSH
10478: LD_INT 22
10480: PUSH
10481: LD_VAR 0 11
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: LD_INT 2
10492: PUSH
10493: LD_INT 59
10495: PUSH
10496: EMPTY
10497: LIST
10498: PUSH
10499: LD_INT 21
10501: PUSH
10502: LD_INT 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 21
10511: PUSH
10512: LD_INT 2
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: EMPTY
10530: LIST
10531: PPUSH
10532: CALL_OW 69
10536: PPUSH
10537: LD_VAR 0 13
10541: PPUSH
10542: CALL_OW 74
10546: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10547: LD_VAR 0 13
10551: PPUSH
10552: LD_VAR 0 21
10556: PPUSH
10557: CALL_OW 296
10561: PUSH
10562: LD_INT 8
10564: PLUS
10565: PUSH
10566: LD_VAR 0 13
10570: PPUSH
10571: LD_VAR 0 22
10575: PPUSH
10576: CALL_OW 296
10580: LESS
10581: IFFALSE 10599
// begin ComAttackUnit ( i , target1 ) ;
10583: LD_VAR 0 13
10587: PPUSH
10588: LD_VAR 0 21
10592: PPUSH
10593: CALL_OW 115
// end else
10597: GO 10613
// begin ComAttackUnit ( i , target2 ) ;
10599: LD_VAR 0 13
10603: PPUSH
10604: LD_VAR 0 22
10608: PPUSH
10609: CALL_OW 115
// end ; end ;
10613: GO 10438
10615: POP
10616: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10617: LD_INT 22
10619: PUSH
10620: LD_VAR 0 2
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: PUSH
10648: LD_INT 0
10650: EQUAL
10651: IFFALSE 10364
// end ; end_of_file
10653: LD_VAR 0 12
10657: RET
// every 1 do var i , gammaSquad , startX , startY ;
10658: GO 10660
10660: DISABLE
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10667: LD_ADDR_VAR 0 2
10671: PUSH
10672: LD_EXP 8
10676: PUSH
10677: LD_EXP 9
10681: PUSH
10682: LD_EXP 10
10686: PUSH
10687: LD_EXP 11
10691: PUSH
10692: LD_EXP 12
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_INT 46
10711: PUSH
10712: LD_INT 45
10714: PUSH
10715: LD_INT 44
10717: PUSH
10718: LD_INT 43
10720: PUSH
10721: LD_INT 42
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10731: LD_ADDR_VAR 0 4
10735: PUSH
10736: LD_INT 14
10738: PUSH
10739: LD_INT 12
10741: PUSH
10742: LD_INT 10
10744: PUSH
10745: LD_INT 8
10747: PUSH
10748: LD_INT 6
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10758: LD_INT 32
10760: PPUSH
10761: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10765: LD_INT 32
10767: PPUSH
10768: LD_INT 51
10770: PPUSH
10771: LD_INT 26
10773: PPUSH
10774: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10778: LD_INT 32
10780: PPUSH
10781: LD_INT 53
10783: PPUSH
10784: LD_INT 23
10786: PPUSH
10787: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10791: LD_INT 32
10793: PPUSH
10794: LD_INT 52
10796: PPUSH
10797: LD_INT 19
10799: PPUSH
10800: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10804: LD_INT 35
10806: PPUSH
10807: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10811: LD_INT 32
10813: PPUSH
10814: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10818: LD_INT 32
10820: PPUSH
10821: CALL_OW 250
10825: PUSH
10826: LD_INT 52
10828: EQUAL
10829: PUSH
10830: LD_INT 32
10832: PPUSH
10833: CALL_OW 251
10837: PUSH
10838: LD_INT 19
10840: EQUAL
10841: AND
10842: IFFALSE 10804
// ComExitVehicle ( JMM ) ;
10844: LD_EXP 2
10848: PPUSH
10849: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10853: LD_EXP 7
10857: PPUSH
10858: LD_EXP 2
10862: PPUSH
10863: CALL_OW 119
// wait ( 0 0$01 ) ;
10867: LD_INT 35
10869: PPUSH
10870: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10874: LD_EXP 2
10878: PPUSH
10879: LD_INT 46
10881: PPUSH
10882: LD_INT 10
10884: PPUSH
10885: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10889: LD_EXP 2
10893: PPUSH
10894: LD_EXP 7
10898: PPUSH
10899: CALL_OW 179
// wait ( 0 0$4 ) ;
10903: LD_INT 140
10905: PPUSH
10906: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10910: LD_EXP 2
10914: PPUSH
10915: LD_STRING D1-JMM-1
10917: PPUSH
10918: CALL_OW 88
// for i := 1 to gammaSquad do
10922: LD_ADDR_VAR 0 1
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_VAR 0 2
10936: PUSH
10937: FOR_TO
10938: IFFALSE 10999
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
10940: LD_VAR 0 2
10944: PUSH
10945: LD_VAR 0 1
10949: ARRAY
10950: PPUSH
10951: LD_VAR 0 3
10955: PUSH
10956: LD_VAR 0 1
10960: ARRAY
10961: PPUSH
10962: LD_VAR 0 4
10966: PUSH
10967: LD_VAR 0 1
10971: ARRAY
10972: PPUSH
10973: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
10977: LD_VAR 0 2
10981: PUSH
10982: LD_VAR 0 1
10986: ARRAY
10987: PPUSH
10988: LD_EXP 2
10992: PPUSH
10993: CALL_OW 179
// end ;
10997: GO 10937
10999: POP
11000: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11001: LD_EXP 5
11005: PPUSH
11006: LD_INT 41
11008: PPUSH
11009: LD_INT 4
11011: PPUSH
11012: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11016: LD_EXP 5
11020: PPUSH
11021: LD_EXP 2
11025: PPUSH
11026: CALL_OW 179
// Say ( Brown , D1-Brown-1 ) ;
11030: LD_EXP 7
11034: PPUSH
11035: LD_STRING D1-Brown-1
11037: PPUSH
11038: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11042: LD_EXP 2
11046: PPUSH
11047: LD_STRING D1-JMM-2
11049: PPUSH
11050: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11054: LD_EXP 7
11058: PPUSH
11059: LD_STRING D1-Brown-2
11061: PPUSH
11062: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11066: LD_EXP 2
11070: PPUSH
11071: LD_EXP 9
11075: PPUSH
11076: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11080: LD_EXP 9
11084: PPUSH
11085: LD_STRING D1-FSol1-2
11087: PPUSH
11088: CALL_OW 88
// ComTurnUnit ( JMM , Campell ) ;
11092: LD_EXP 2
11096: PPUSH
11097: LD_EXP 12
11101: PPUSH
11102: CALL_OW 119
// Say ( Campell , D1-Sol2-2 ) ;
11106: LD_EXP 12
11110: PPUSH
11111: LD_STRING D1-Sol2-2
11113: PPUSH
11114: CALL_OW 88
// if Lisa then
11118: LD_EXP 5
11122: IFFALSE 11150
// begin ComTurnUnit ( JMM , Lisa ) ;
11124: LD_EXP 2
11128: PPUSH
11129: LD_EXP 5
11133: PPUSH
11134: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11138: LD_EXP 5
11142: PPUSH
11143: LD_STRING D1-Lisa-2
11145: PPUSH
11146: CALL_OW 88
// end ; Say ( JMM , D1-JMM-3 ) ;
11150: LD_EXP 2
11154: PPUSH
11155: LD_STRING D1-JMM-3
11157: PPUSH
11158: CALL_OW 88
// ComTurnUnit ( JMM , Brown ) ;
11162: LD_EXP 2
11166: PPUSH
11167: LD_EXP 7
11171: PPUSH
11172: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11176: LD_EXP 2
11180: PPUSH
11181: LD_STRING D1-JMM-3a
11183: PPUSH
11184: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11188: LD_EXP 7
11192: PPUSH
11193: LD_INT 38
11195: PPUSH
11196: LD_INT 5
11198: PPUSH
11199: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11203: LD_EXP 7
11207: PPUSH
11208: LD_EXP 2
11212: PPUSH
11213: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11217: LD_EXP 2
11221: PPUSH
11222: LD_INT 40
11224: PPUSH
11225: LD_INT 7
11227: PPUSH
11228: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11232: LD_EXP 2
11236: PPUSH
11237: LD_EXP 7
11241: PPUSH
11242: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11246: LD_EXP 7
11250: PPUSH
11251: LD_STRING D1-Brown-3
11253: PPUSH
11254: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11258: LD_EXP 16
11262: PPUSH
11263: LD_STRING D1-Har-3
11265: PPUSH
11266: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11270: LD_EXP 2
11274: PPUSH
11275: LD_STRING D1-JMM-4
11277: PPUSH
11278: CALL_OW 88
// PrepareRussianConvoy ;
11282: CALL 2119 0 0
// SayRadio ( Harisson , D1-Har-4 ) ;
11286: LD_EXP 16
11290: PPUSH
11291: LD_STRING D1-Har-4
11293: PPUSH
11294: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11298: LD_EXP 2
11302: PPUSH
11303: LD_STRING D1-JMM-5
11305: PPUSH
11306: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11310: LD_EXP 16
11314: PPUSH
11315: LD_STRING D1-Har-5
11317: PPUSH
11318: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11322: LD_EXP 2
11326: PPUSH
11327: LD_STRING D1-JMM-6
11329: PPUSH
11330: CALL_OW 88
// InGameOff ;
11334: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
11338: LD_STRING M1
11340: PPUSH
11341: CALL_OW 337
// SaveForQuickRestart ;
11345: CALL_OW 22
// timerStatus = 1 ;
11349: LD_ADDR_EXP 28
11353: PUSH
11354: LD_INT 1
11356: ST_TO_ADDR
// startTimer = 1 ;
11357: LD_ADDR_EXP 29
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11365: LD_INT 105
11367: PPUSH
11368: CALL_OW 67
// DialogueOn ;
11372: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11376: LD_EXP 12
11380: PPUSH
11381: LD_STRING D9-Mech1-1
11383: PPUSH
11384: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11388: LD_EXP 2
11392: PPUSH
11393: LD_STRING D9-JMM-1
11395: PPUSH
11396: CALL_OW 88
// DialogueOff ;
11400: CALL_OW 7
// end ;
11404: PPOPN 4
11406: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11407: LD_INT 47
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: CALL_OW 321
11417: PUSH
11418: LD_INT 2
11420: EQUAL
11421: PUSH
11422: LD_INT 22
11424: PUSH
11425: LD_INT 1
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 21
11434: PUSH
11435: LD_INT 3
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 30
11444: PUSH
11445: LD_INT 3
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: PPUSH
11457: CALL_OW 69
11461: PUSH
11462: LD_INT 0
11464: GREATER
11465: AND
11466: IFFALSE 11696
11468: GO 11470
11470: DISABLE
// begin if IsOk ( Campell ) then
11471: LD_EXP 12
11475: PPUSH
11476: CALL_OW 302
11480: IFFALSE 11496
// begin Say ( Campell , D10-Mech1-1 ) ;
11482: LD_EXP 12
11486: PPUSH
11487: LD_STRING D10-Mech1-1
11489: PPUSH
11490: CALL_OW 88
// end else
11494: GO 11696
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11496: LD_INT 22
11498: PUSH
11499: LD_INT 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 21
11508: PUSH
11509: LD_INT 1
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 25
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 26
11528: PUSH
11529: LD_INT 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: PPUSH
11542: CALL_OW 69
11546: PUSH
11547: LD_EXP 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: PUSH
11555: LD_INT 0
11557: GREATER
11558: DIFF
11559: IFFALSE 11633
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11561: LD_INT 22
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 21
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 25
11583: PUSH
11584: LD_INT 3
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 26
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 69
11611: PUSH
11612: LD_EXP 2
11616: PUSH
11617: EMPTY
11618: LIST
11619: DIFF
11620: PPUSH
11621: LD_STRING D10-Mech1-1
11623: PPUSH
11624: LD_STRING D10-Mech1-1
11626: PPUSH
11627: CALL 3349 0 3
// end else
11631: GO 11696
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11633: LD_INT 22
11635: PUSH
11636: LD_INT 1
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: LD_INT 21
11645: PUSH
11646: LD_INT 1
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 1
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 1
11670: ARRAY
11671: PPUSH
11672: CALL_OW 69
11676: PUSH
11677: LD_EXP 2
11681: PUSH
11682: EMPTY
11683: LIST
11684: DIFF
11685: PPUSH
11686: LD_STRING D10-Mech1-1
11688: PPUSH
11689: LD_STRING D10-Mech1-1
11691: PPUSH
11692: CALL 3349 0 3
// end ; end ; end ;
11696: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
11697: LD_INT 22
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 30
11709: PUSH
11710: LD_INT 32
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PPUSH
11721: CALL_OW 69
11725: PUSH
11726: LD_INT 0
11728: GREATER
11729: PUSH
11730: LD_EXP 31
11734: PUSH
11735: LD_INT 0
11737: EQUAL
11738: AND
11739: IFFALSE 11987
11741: GO 11743
11743: DISABLE
// begin if IsOK ( Claptopn ) then
11744: LD_EXP 11
11748: PPUSH
11749: CALL_OW 302
11753: IFFALSE 11769
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
11755: LD_EXP 11
11759: PPUSH
11760: LD_STRING D9b-Eng1-1
11762: PPUSH
11763: CALL_OW 88
// end else
11767: GO 11965
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11769: LD_INT 22
11771: PUSH
11772: LD_INT 1
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 21
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 25
11791: PUSH
11792: LD_INT 3
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 26
11801: PUSH
11802: LD_INT 1
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: PUSH
11820: LD_EXP 2
11824: PUSH
11825: EMPTY
11826: LIST
11827: PUSH
11828: LD_INT 0
11830: GREATER
11831: DIFF
11832: IFFALSE 11906
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
11834: LD_INT 22
11836: PUSH
11837: LD_INT 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 21
11846: PUSH
11847: LD_INT 1
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 25
11856: PUSH
11857: LD_INT 2
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 26
11866: PUSH
11867: LD_INT 1
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 69
11884: PUSH
11885: LD_EXP 2
11889: PUSH
11890: EMPTY
11891: LIST
11892: DIFF
11893: PPUSH
11894: LD_STRING D9b-Eng1-1
11896: PPUSH
11897: LD_STRING D9b-Eng1-11
11899: PPUSH
11900: CALL 3349 0 3
// end else
11904: GO 11965
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
11906: LD_INT 22
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 21
11918: PUSH
11919: LD_INT 1
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 26
11928: PUSH
11929: LD_INT 1
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: PPUSH
11941: CALL_OW 69
11945: PUSH
11946: LD_EXP 2
11950: PUSH
11951: EMPTY
11952: LIST
11953: DIFF
11954: PPUSH
11955: LD_STRING D9b-Eng1-1
11957: PPUSH
11958: LD_STRING D9b-Eng1-1
11960: PPUSH
11961: CALL 3349 0 3
// end ; end ; if energyVDialog = 0 then
11965: LD_EXP 32
11969: PUSH
11970: LD_INT 0
11972: EQUAL
11973: IFFALSE 11979
// EnergyDialog ;
11975: CALL 3661 0 0
// bunkerDialog = 1 ;
11979: LD_ADDR_EXP 31
11983: PUSH
11984: LD_INT 1
11986: ST_TO_ADDR
// end ;
11987: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
11988: LD_EXP 33
11992: PUSH
11993: LD_INT 1
11995: EQUAL
11996: PUSH
11997: LD_EXP 34
12001: PUSH
12002: LD_INT 1
12004: EQUAL
12005: AND
12006: IFFALSE 12018
12008: GO 12010
12010: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12011: LD_STRING M1a
12013: PPUSH
12014: CALL_OW 337
12018: END
// every 3 3$0 do
12019: GO 12021
12021: DISABLE
// begin PrepareFirstAttack ;
12022: CALL 2911 0 0
// end ;
12026: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
12027: LD_INT 22
12029: PUSH
12030: LD_INT 5
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 21
12039: PUSH
12040: LD_INT 1
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: PUSH
12056: LD_INT 3
12058: LESSEQUAL
12059: PUSH
12060: LD_EXP 22
12064: PUSH
12065: LD_INT 1
12067: EQUAL
12068: AND
12069: IFFALSE 12387
12071: GO 12073
12073: DISABLE
12074: LD_INT 0
12076: PPUSH
// begin firstRussianAttack = 2 ;
12077: LD_ADDR_EXP 22
12081: PUSH
12082: LD_INT 2
12084: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12085: LD_ADDR_VAR 0 1
12089: PUSH
12090: LD_INT 22
12092: PUSH
12093: LD_INT 5
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 21
12102: PUSH
12103: LD_INT 1
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 69
12118: PUSH
12119: FOR_IN
12120: IFFALSE 12139
// ComMoveXY ( i , 125 , 98 ) ;
12122: LD_VAR 0 1
12126: PPUSH
12127: LD_INT 125
12129: PPUSH
12130: LD_INT 98
12132: PPUSH
12133: CALL_OW 111
12137: GO 12119
12139: POP
12140: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12141: LD_INT 22
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 21
12153: PUSH
12154: LD_INT 1
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: PUSH
12170: LD_EXP 2
12174: PUSH
12175: LD_EXP 7
12179: PUSH
12180: LD_EXP 5
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: DIFF
12190: PPUSH
12191: LD_STRING DAtt1-Sol1-1
12193: PPUSH
12194: LD_STRING DAtt1-FSol1-1
12196: PPUSH
12197: CALL 3349 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12201: LD_EXP 2
12205: PPUSH
12206: LD_STRING DAtt1-JMM-1
12208: PPUSH
12209: CALL_OW 88
// if Lisa then
12213: LD_EXP 5
12217: IFFALSE 12233
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12219: LD_EXP 5
12223: PPUSH
12224: LD_STRING DAtt1a-Lisa-1
12226: PPUSH
12227: CALL_OW 88
// end else
12231: GO 12304
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12233: LD_INT 22
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 21
12245: PUSH
12246: LD_INT 1
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 26
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: PPUSH
12268: CALL_OW 69
12272: PUSH
12273: LD_EXP 2
12277: PUSH
12278: LD_EXP 7
12282: PUSH
12283: LD_EXP 5
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: DIFF
12293: PPUSH
12294: LD_STRING DAtt1a-Sol1-1
12296: PPUSH
12297: LD_STRING DAtt1-FSol1-1
12299: PPUSH
12300: CALL 3349 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12304: LD_EXP 2
12308: PPUSH
12309: LD_STRING DAtt1a-JMM-1
12311: PPUSH
12312: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12316: LD_INT 22
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 21
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 26
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: PUSH
12356: LD_EXP 2
12360: PUSH
12361: LD_EXP 7
12365: PUSH
12366: LD_EXP 5
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: DIFF
12376: PPUSH
12377: LD_STRING DAtt1b-Sol1-1
12379: PPUSH
12380: LD_STRING DAtt1a-Sol1-1
12382: PPUSH
12383: CALL 3349 0 3
// end ;
12387: PPOPN 1
12389: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12390: LD_EXP 22
12394: PUSH
12395: LD_INT 2
12397: EQUAL
12398: IFFALSE 12460
12400: GO 12402
12402: DISABLE
12403: LD_INT 0
12405: PPUSH
// begin enable ;
12406: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12407: LD_ADDR_VAR 0 1
12411: PUSH
12412: LD_INT 5
12414: PPUSH
12415: LD_INT 22
12417: PUSH
12418: LD_INT 5
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 21
12427: PUSH
12428: LD_INT 1
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PPUSH
12439: CALL_OW 70
12443: PUSH
12444: FOR_IN
12445: IFFALSE 12458
// RemoveUnit ( i ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 64
12456: GO 12444
12458: POP
12459: POP
// end ;
12460: PPOPN 1
12462: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12463: LD_INT 22
12465: PUSH
12466: LD_INT 5
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: PPUSH
12476: CALL_OW 69
12480: PUSH
12481: LD_INT 0
12483: EQUAL
12484: PUSH
12485: LD_EXP 22
12489: PUSH
12490: LD_INT 2
12492: EQUAL
12493: AND
12494: IFFALSE 12507
12496: GO 12498
12498: DISABLE
// firstRussianAttack = 3 ;
12499: LD_ADDR_EXP 22
12503: PUSH
12504: LD_INT 3
12506: ST_TO_ADDR
12507: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12508: LD_EXP 27
12512: PUSH
12513: LD_INT 0
12515: EQUAL
12516: IFFALSE 12597
12518: GO 12520
12520: DISABLE
// begin timerStatus = 4 ;
12521: LD_ADDR_EXP 28
12525: PUSH
12526: LD_INT 4
12528: ST_TO_ADDR
// DialogueOn ;
12529: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12533: LD_EXP 13
12537: PPUSH
12538: LD_STRING D2-Don-1
12540: PPUSH
12541: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12545: LD_EXP 2
12549: PPUSH
12550: LD_STRING D2-JMM-1
12552: PPUSH
12553: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12557: LD_EXP 13
12561: PPUSH
12562: LD_STRING D2-Don-2
12564: PPUSH
12565: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12569: LD_EXP 2
12573: PPUSH
12574: LD_STRING D2-JMM-2
12576: PPUSH
12577: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12581: LD_EXP 13
12585: PPUSH
12586: LD_STRING D2-Don-3
12588: PPUSH
12589: CALL_OW 94
// DialogueOff ;
12593: CALL_OW 7
// end ;
12597: END
// every 12 12$0 do var tmp ;
12598: GO 12600
12600: DISABLE
12601: LD_INT 0
12603: PPUSH
// begin PrepareDonaldsonArmy ;
12604: CALL 764 0 0
// CenterNowOnUnits ( Donaldson ) ;
12608: LD_EXP 13
12612: PPUSH
12613: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
12617: LD_ADDR_VAR 0 1
12621: PUSH
12622: LD_INT 22
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 1
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 26
12644: PUSH
12645: LD_INT 1
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: PUSH
12662: LD_EXP 6
12666: PUSH
12667: EMPTY
12668: LIST
12669: DIFF
12670: ST_TO_ADDR
// DialogueOn ;
12671: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
12675: LD_VAR 0 1
12679: PPUSH
12680: LD_STRING D3-Sol1-1
12682: PPUSH
12683: LD_STRING D3-Sol1-1
12685: PPUSH
12686: CALL 3349 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
12690: LD_INT 22
12692: PUSH
12693: LD_INT 4
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 21
12702: PUSH
12703: LD_INT 1
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 26
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 25
12722: PUSH
12723: LD_INT 3
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: PPUSH
12741: LD_STRING D3-Sol2-1
12743: PPUSH
12744: LD_STRING D3-Sol2-1
12746: PPUSH
12747: CALL 3349 0 3
// if Frank then
12751: LD_EXP 6
12755: IFFALSE 12769
// Say ( Frank , D3-Frank-1 ) ;
12757: LD_EXP 6
12761: PPUSH
12762: LD_STRING D3-Frank-1
12764: PPUSH
12765: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
12769: LD_EXP 13
12773: PPUSH
12774: LD_STRING D3-Don-1
12776: PPUSH
12777: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
12781: LD_EXP 13
12785: PPUSH
12786: LD_STRING D3-Don-1a
12788: PPUSH
12789: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
12793: LD_EXP 2
12797: PPUSH
12798: LD_STRING D3-JMM-1
12800: PPUSH
12801: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
12805: LD_EXP 13
12809: PPUSH
12810: LD_STRING D3-Don-2
12812: PPUSH
12813: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
12817: LD_INT 22
12819: PUSH
12820: LD_INT 6
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 21
12829: PUSH
12830: LD_INT 1
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PPUSH
12841: CALL_OW 69
12845: PUSH
12846: LD_INT 0
12848: GREATER
12849: IFFALSE 12963
// begin Say ( JMM , D3-JMM-2 ) ;
12851: LD_EXP 2
12855: PPUSH
12856: LD_STRING D3-JMM-2
12858: PPUSH
12859: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
12863: LD_EXP 13
12867: PPUSH
12868: LD_STRING D3-Don-3
12870: PPUSH
12871: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
12875: LD_EXP 2
12879: PPUSH
12880: LD_STRING D3-JMM-3
12882: PPUSH
12883: CALL_OW 88
// if IsOK ( Frank ) then
12887: LD_EXP 6
12891: PPUSH
12892: CALL_OW 302
12896: IFFALSE 12910
// Say ( Frank , D3-Frank-3 ) ;
12898: LD_EXP 6
12902: PPUSH
12903: LD_STRING D3-Frank-3
12905: PPUSH
12906: CALL_OW 88
// DialogueOff ;
12910: CALL_OW 7
// if IsOK ( Frank ) then
12914: LD_EXP 6
12918: PPUSH
12919: CALL_OW 302
12923: IFFALSE 12961
// begin SetSide ( Frank , 0 ) ;
12925: LD_EXP 6
12929: PPUSH
12930: LD_INT 0
12932: PPUSH
12933: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
12937: LD_EXP 6
12941: PPUSH
12942: LD_INT 12
12944: PPUSH
12945: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
12949: LD_EXP 6
12953: PPUSH
12954: LD_STRING Frank
12956: PPUSH
12957: CALL_OW 38
// end ; end else
12961: GO 13026
// begin Say ( JMM , D3-JMM-4 ) ;
12963: LD_EXP 2
12967: PPUSH
12968: LD_STRING D3-JMM-4
12970: PPUSH
12971: CALL_OW 88
// DialogueOff ;
12975: CALL_OW 7
// if IsOK ( Frank ) then
12979: LD_EXP 6
12983: PPUSH
12984: CALL_OW 302
12988: IFFALSE 13026
// begin SetSide ( Frank , 0 ) ;
12990: LD_EXP 6
12994: PPUSH
12995: LD_INT 0
12997: PPUSH
12998: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13002: LD_EXP 6
13006: PPUSH
13007: LD_INT 12
13009: PPUSH
13010: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13014: LD_EXP 6
13018: PPUSH
13019: LD_STRING Frank
13021: PPUSH
13022: CALL_OW 38
// end ; end ; end ;
13026: PPOPN 1
13028: END
// every 0 0$1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
13029: LD_EXP 6
13033: PPUSH
13034: LD_INT 12
13036: PPUSH
13037: CALL_OW 308
13041: PUSH
13042: LD_EXP 6
13046: PPUSH
13047: CALL_OW 255
13051: PUSH
13052: LD_INT 0
13054: EQUAL
13055: AND
13056: IFFALSE 13078
13058: GO 13060
13060: DISABLE
// begin RemoveUnit ( Frank ) ;
13061: LD_EXP 6
13065: PPUSH
13066: CALL_OW 64
// frankScoutBase = 1 ;
13070: LD_ADDR_EXP 24
13074: PUSH
13075: LD_INT 1
13077: ST_TO_ADDR
// end ;
13078: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13079: LD_EXP 13
13083: PPUSH
13084: CALL_OW 255
13088: PUSH
13089: LD_INT 4
13091: EQUAL
13092: PUSH
13093: LD_EXP 13
13097: PPUSH
13098: CALL_OW 302
13102: AND
13103: IFFALSE 13128
13105: GO 13107
13107: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13108: LD_EXP 13
13112: PPUSH
13113: LD_STRING D3b-Don-1
13115: PPUSH
13116: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13120: LD_ADDR_EXP 39
13124: PUSH
13125: LD_INT 1
13127: ST_TO_ADDR
// end ;
13128: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13129: LD_EXP 23
13133: PUSH
13134: LD_INT 0
13136: EQUAL
13137: IFFALSE 13293
13139: GO 13141
13141: DISABLE
13142: LD_INT 0
13144: PPUSH
13145: PPUSH
// begin enable ;
13146: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13147: LD_ADDR_VAR 0 1
13151: PUSH
13152: LD_INT 22
13154: PUSH
13155: LD_INT 4
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 21
13164: PUSH
13165: LD_INT 1
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 69
13180: PUSH
13181: FOR_IN
13182: IFFALSE 13291
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13184: LD_ADDR_VAR 0 2
13188: PUSH
13189: LD_INT 22
13191: PUSH
13192: LD_INT 1
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 21
13201: PUSH
13202: LD_INT 1
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 69
13217: PUSH
13218: FOR_IN
13219: IFFALSE 13287
// begin if GetDistUnits ( i , j ) < 5 then
13221: LD_VAR 0 1
13225: PPUSH
13226: LD_VAR 0 2
13230: PPUSH
13231: CALL_OW 296
13235: PUSH
13236: LD_INT 5
13238: LESS
13239: IFFALSE 13285
// begin saveDonaldson = 1 ;
13241: LD_ADDR_EXP 23
13245: PUSH
13246: LD_INT 1
13248: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13249: LD_INT 22
13251: PUSH
13252: LD_INT 4
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 1
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 235
// end ; end ;
13285: GO 13218
13287: POP
13288: POP
// end ;
13289: GO 13181
13291: POP
13292: POP
// end ;
13293: PPOPN 2
13295: END
// every 2 2$0 trigger saveDonaldson = 1 do
13296: LD_EXP 23
13300: PUSH
13301: LD_INT 1
13303: EQUAL
13304: IFFALSE 13546
13306: GO 13308
13308: DISABLE
// begin uc_side = 4 ;
13309: LD_ADDR_OWVAR 20
13313: PUSH
13314: LD_INT 4
13316: ST_TO_ADDR
// uc_nation = 1 ;
13317: LD_ADDR_OWVAR 21
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13325: LD_ADDR_EXP 6
13329: PUSH
13330: LD_STRING Frank
13332: PPUSH
13333: CALL_OW 34
13337: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13338: LD_EXP 6
13342: PPUSH
13343: LD_INT 13
13345: PPUSH
13346: LD_INT 0
13348: PPUSH
13349: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13353: LD_INT 35
13355: PPUSH
13356: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
13360: LD_EXP 6
13364: PPUSH
13365: LD_INT 51
13367: PPUSH
13368: LD_INT 15
13370: PPUSH
13371: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
13375: LD_EXP 6
13379: PPUSH
13380: LD_EXP 2
13384: PPUSH
13385: CALL_OW 296
13389: PUSH
13390: LD_INT 6
13392: LESS
13393: IFFALSE 13353
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13395: LD_EXP 2
13399: PUSH
13400: LD_EXP 6
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 87
// DialogueOn ;
13413: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13417: LD_EXP 6
13421: PPUSH
13422: LD_STRING D3a-Frank-1
13424: PPUSH
13425: CALL_OW 88
// if Lisa then
13429: LD_EXP 5
13433: IFFALSE 13483
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13435: LD_EXP 5
13439: PPUSH
13440: LD_STRING D3a-Lisa-1
13442: PPUSH
13443: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13447: LD_EXP 6
13451: PPUSH
13452: LD_STRING D3a-Frank-2
13454: PPUSH
13455: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13459: LD_EXP 5
13463: PPUSH
13464: LD_STRING D3a-Lisa-2
13466: PPUSH
13467: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13471: LD_EXP 6
13475: PPUSH
13476: LD_STRING D3a-Frank-3
13478: PPUSH
13479: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13483: LD_EXP 2
13487: PPUSH
13488: LD_STRING D3a-JMM-3
13490: PPUSH
13491: CALL_OW 88
// DialogueOff ;
13495: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13499: LD_EXP 6
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: CALL_OW 235
// InGameOn ;
13511: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13515: LD_INT 1
13517: PPUSH
13518: LD_INT 7
13520: PPUSH
13521: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13525: LD_INT 93
13527: PPUSH
13528: LD_INT 91
13530: PPUSH
13531: CALL_OW 84
// wait ( 0 0$5 ) ;
13535: LD_INT 175
13537: PPUSH
13538: CALL_OW 67
// InGameOff ;
13542: CALL_OW 9
// end ;
13546: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13547: LD_OWVAR 67
13551: PUSH
13552: LD_INT 2
13554: EQUAL
13555: PUSH
13556: LD_OWVAR 67
13560: PUSH
13561: LD_INT 3
13563: EQUAL
13564: OR
13565: IFFALSE 13589
13567: GO 13569
13569: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
13570: LD_INT 24
13572: PPUSH
13573: LD_INT 24
13575: PPUSH
13576: LD_INT 1
13578: PPUSH
13579: LD_INT 1
13581: PPUSH
13582: LD_INT 53
13584: PPUSH
13585: CALL_OW 125
13589: END
// every 18 18$0 do
13590: GO 13592
13592: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
13593: LD_EXP 16
13597: PPUSH
13598: LD_STRING D4-Har-1
13600: PPUSH
13601: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
13605: LD_EXP 2
13609: PPUSH
13610: LD_STRING D4-JMM-1
13612: PPUSH
13613: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
13617: LD_EXP 16
13621: PPUSH
13622: LD_STRING D4-Har-2
13624: PPUSH
13625: CALL_OW 94
// case query ( Q1 ) of 1 :
13629: LD_STRING Q1
13631: PPUSH
13632: CALL_OW 97
13636: PUSH
13637: LD_INT 1
13639: DOUBLE
13640: EQUAL
13641: IFTRUE 13645
13643: GO 13704
13645: POP
// begin Say ( JMM , D5-JMM-1 ) ;
13646: LD_EXP 2
13650: PPUSH
13651: LD_STRING D5-JMM-1
13653: PPUSH
13654: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
13658: LD_EXP 16
13662: PPUSH
13663: LD_STRING D5-Har-1
13665: PPUSH
13666: CALL_OW 94
// timeToSupport = 10 10$0 ;
13670: LD_ADDR_EXP 27
13674: PUSH
13675: LD_INT 21000
13677: ST_TO_ADDR
// timerStatus = 2 ;
13678: LD_ADDR_EXP 28
13682: PUSH
13683: LD_INT 2
13685: ST_TO_ADDR
// startTimer = 1 ;
13686: LD_ADDR_EXP 29
13690: PUSH
13691: LD_INT 1
13693: ST_TO_ADDR
// harrAnswer = 1 ;
13694: LD_ADDR_EXP 25
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// end ; 2 :
13702: GO 13839
13704: LD_INT 2
13706: DOUBLE
13707: EQUAL
13708: IFTRUE 13712
13710: GO 13771
13712: POP
// begin Say ( JMM , D5-JMM-2 ) ;
13713: LD_EXP 2
13717: PPUSH
13718: LD_STRING D5-JMM-2
13720: PPUSH
13721: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
13725: LD_EXP 16
13729: PPUSH
13730: LD_STRING D5-Har-2
13732: PPUSH
13733: CALL_OW 94
// timeToSupport = 5 5$0 ;
13737: LD_ADDR_EXP 27
13741: PUSH
13742: LD_INT 10500
13744: ST_TO_ADDR
// timerStatus = 2 ;
13745: LD_ADDR_EXP 28
13749: PUSH
13750: LD_INT 2
13752: ST_TO_ADDR
// startTimer = 1 ;
13753: LD_ADDR_EXP 29
13757: PUSH
13758: LD_INT 1
13760: ST_TO_ADDR
// harrAnswer = 2 ;
13761: LD_ADDR_EXP 25
13765: PUSH
13766: LD_INT 2
13768: ST_TO_ADDR
// end ; 3 :
13769: GO 13839
13771: LD_INT 3
13773: DOUBLE
13774: EQUAL
13775: IFTRUE 13779
13777: GO 13838
13779: POP
// begin Say ( JMM , D5-JMM-3 ) ;
13780: LD_EXP 2
13784: PPUSH
13785: LD_STRING D5-JMM-3
13787: PPUSH
13788: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
13792: LD_EXP 16
13796: PPUSH
13797: LD_STRING D5-Har-3
13799: PPUSH
13800: CALL_OW 94
// timeToSupport = 5 5$0 ;
13804: LD_ADDR_EXP 27
13808: PUSH
13809: LD_INT 10500
13811: ST_TO_ADDR
// timerStatus = 2 ;
13812: LD_ADDR_EXP 28
13816: PUSH
13817: LD_INT 2
13819: ST_TO_ADDR
// startTimer = 1 ;
13820: LD_ADDR_EXP 29
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// harrAnswer = 3 ;
13828: LD_ADDR_EXP 25
13832: PUSH
13833: LD_INT 3
13835: ST_TO_ADDR
// end ; end ;
13836: GO 13839
13838: POP
// end ;
13839: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
13840: LD_EXP 28
13844: PUSH
13845: LD_INT 2
13847: EQUAL
13848: PUSH
13849: LD_EXP 27
13853: PUSH
13854: LD_INT 0
13856: EQUAL
13857: AND
13858: IFFALSE 14135
13860: GO 13862
13862: DISABLE
// begin timerStatus = 4 ;
13863: LD_ADDR_EXP 28
13867: PUSH
13868: LD_INT 4
13870: ST_TO_ADDR
// if harrAnswer = 1 then
13871: LD_EXP 25
13875: PUSH
13876: LD_INT 1
13878: EQUAL
13879: IFFALSE 13959
// begin PrepareHarrisonSupport ( 3 ) ;
13881: LD_INT 3
13883: PPUSH
13884: CALL 1112 0 1
// wait ( 1 1$0 ) ;
13888: LD_INT 2100
13890: PPUSH
13891: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13895: LD_EXP 16
13899: PPUSH
13900: LD_STRING D7-Har-1
13902: PPUSH
13903: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
13907: LD_STRING M2
13909: PPUSH
13910: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
13914: LD_ADDR_EXP 26
13918: PUSH
13919: LD_INT 31500
13921: PUSH
13922: LD_INT 10500
13924: PUSH
13925: LD_INT 8400
13927: PUSH
13928: LD_INT 6300
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: LD_OWVAR 67
13940: ARRAY
13941: PLUS
13942: ST_TO_ADDR
// startTimer = 1 ;
13943: LD_ADDR_EXP 29
13947: PUSH
13948: LD_INT 1
13950: ST_TO_ADDR
// timerStatus = 3 ;
13951: LD_ADDR_EXP 28
13955: PUSH
13956: LD_INT 3
13958: ST_TO_ADDR
// end ; if harrAnswer = 2 then
13959: LD_EXP 25
13963: PUSH
13964: LD_INT 2
13966: EQUAL
13967: IFFALSE 14047
// begin PrepareHarrisonSupport ( 4 ) ;
13969: LD_INT 4
13971: PPUSH
13972: CALL 1112 0 1
// wait ( 1 1$0 ) ;
13976: LD_INT 2100
13978: PPUSH
13979: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13983: LD_EXP 16
13987: PPUSH
13988: LD_STRING D7-Har-1
13990: PPUSH
13991: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
13995: LD_STRING M2
13997: PPUSH
13998: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14002: LD_ADDR_EXP 26
14006: PUSH
14007: LD_INT 27300
14009: PUSH
14010: LD_INT 8400
14012: PUSH
14013: LD_INT 8400
14015: PUSH
14016: LD_INT 6300
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: PUSH
14024: LD_OWVAR 67
14028: ARRAY
14029: PLUS
14030: ST_TO_ADDR
// startTimer = 1 ;
14031: LD_ADDR_EXP 29
14035: PUSH
14036: LD_INT 1
14038: ST_TO_ADDR
// timerStatus = 3 ;
14039: LD_ADDR_EXP 28
14043: PUSH
14044: LD_INT 3
14046: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14047: LD_EXP 25
14051: PUSH
14052: LD_INT 3
14054: EQUAL
14055: IFFALSE 14135
// begin PrepareHarrisonSupport ( 5 ) ;
14057: LD_INT 5
14059: PPUSH
14060: CALL 1112 0 1
// wait ( 1 1$0 ) ;
14064: LD_INT 2100
14066: PPUSH
14067: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14071: LD_EXP 16
14075: PPUSH
14076: LD_STRING D7-Har-1
14078: PPUSH
14079: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14083: LD_STRING M2
14085: PPUSH
14086: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14090: LD_ADDR_EXP 26
14094: PUSH
14095: LD_INT 21000
14097: PUSH
14098: LD_INT 8400
14100: PUSH
14101: LD_INT 6300
14103: PUSH
14104: LD_INT 4200
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PUSH
14112: LD_OWVAR 67
14116: ARRAY
14117: PLUS
14118: ST_TO_ADDR
// startTimer = 1 ;
14119: LD_ADDR_EXP 29
14123: PUSH
14124: LD_INT 1
14126: ST_TO_ADDR
// timerStatus = 3 ;
14127: LD_ADDR_EXP 28
14131: PUSH
14132: LD_INT 3
14134: ST_TO_ADDR
// end ; end ;
14135: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14136: LD_EXP 26
14140: PUSH
14141: LD_INT 8400
14143: LESSEQUAL
14144: PUSH
14145: LD_EXP 28
14149: PUSH
14150: LD_INT 3
14152: EQUAL
14153: AND
14154: IFFALSE 14186
14156: GO 14158
14158: DISABLE
// begin DialogueOn ;
14159: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14163: LD_EXP 16
14167: PPUSH
14168: LD_STRING D7a-Har-1
14170: PPUSH
14171: CALL_OW 94
// DialogueOff ;
14175: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14179: LD_STRING M2a
14181: PPUSH
14182: CALL_OW 337
// end ;
14186: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14187: LD_EXP 26
14191: PUSH
14192: LD_INT 0
14194: LESSEQUAL
14195: PUSH
14196: LD_EXP 28
14200: PUSH
14201: LD_INT 3
14203: EQUAL
14204: AND
14205: IFFALSE 14330
14207: GO 14209
14209: DISABLE
14210: LD_INT 0
14212: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14213: LD_ADDR_VAR 0 1
14217: PUSH
14218: LD_INT 22
14220: PUSH
14221: LD_INT 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: PUSH
14233: LD_EXP 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: DIFF
14241: ST_TO_ADDR
// saveDonaldson = 2 ;
14242: LD_ADDR_EXP 23
14246: PUSH
14247: LD_INT 2
14249: ST_TO_ADDR
// DialogueOn ;
14250: CALL_OW 6
// if IsOK ( Donaldson ) then
14254: LD_EXP 13
14258: PPUSH
14259: CALL_OW 302
14263: IFFALSE 14279
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14265: LD_EXP 16
14269: PPUSH
14270: LD_STRING D8-Har-1
14272: PPUSH
14273: CALL_OW 94
// end else
14277: GO 14291
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14279: LD_EXP 16
14283: PPUSH
14284: LD_STRING D8-Har-1a
14286: PPUSH
14287: CALL_OW 94
// end ; DialogueOff ;
14291: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14295: LD_VAR 0 1
14299: PPUSH
14300: LD_INT 4
14302: PPUSH
14303: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14307: LD_VAR 0 1
14311: PPUSH
14312: LD_INT 88
14314: PPUSH
14315: LD_INT 89
14317: PPUSH
14318: CALL_OW 114
// honor = 0 ;
14322: LD_ADDR_EXP 38
14326: PUSH
14327: LD_INT 0
14329: ST_TO_ADDR
// end ; end_of_file
14330: PPOPN 1
14332: END
// every 0 0$1 trigger AIEnable = 1 do
14333: LD_EXP 36
14337: PUSH
14338: LD_INT 1
14340: EQUAL
14341: IFFALSE 14469
14343: GO 14345
14345: DISABLE
// begin enable ;
14346: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
14347: LD_INT 3
14349: PPUSH
14350: LD_INT 21
14352: PPUSH
14353: CALL 5121 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
14357: LD_INT 3
14359: PPUSH
14360: LD_INT 8
14362: PPUSH
14363: LD_INT 7
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: CALL 5362 0 4
// if baseReadyToBuild = 2 then
14373: LD_EXP 20
14377: PUSH
14378: LD_INT 2
14380: EQUAL
14381: IFFALSE 14469
// begin RepairBuilding ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] [ 1 ] ) ) ;
14383: LD_INT 6
14385: PPUSH
14386: LD_INT 22
14388: PUSH
14389: LD_INT 6
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 30
14398: PUSH
14399: LD_INT 0
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 1
14412: ARRAY
14413: PPUSH
14414: CALL_OW 69
14418: PPUSH
14419: CALL 5121 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , 6 ] ] [ 1 ] ) ) ;
14423: LD_INT 6
14425: PPUSH
14426: LD_INT 9
14428: PPUSH
14429: LD_INT 6
14431: PPUSH
14432: LD_INT 22
14434: PUSH
14435: LD_INT 6
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 30
14444: PUSH
14445: LD_INT 6
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 1
14458: ARRAY
14459: PPUSH
14460: CALL_OW 69
14464: PPUSH
14465: CALL 5362 0 4
// end ; end ;
14469: END
// every 0 0$01 do
14470: GO 14472
14472: DISABLE
// begin enable ;
14473: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
14474: LD_INT 3
14476: PPUSH
14477: LD_INT 17
14479: PPUSH
14480: LD_INT 111
14482: PPUSH
14483: LD_INT 87
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL 8179 0 5
// end ;
14493: END
// every 0 0$01 do
14494: GO 14496
14496: DISABLE
// begin enable ;
14497: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
14498: LD_INT 5
14500: PPUSH
14501: LD_INT 17
14503: PPUSH
14504: LD_INT 111
14506: PPUSH
14507: LD_INT 87
14509: PPUSH
14510: LD_INT 1
14512: PPUSH
14513: CALL 8179 0 5
// end ;
14517: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
14518: LD_EXP 36
14522: PUSH
14523: LD_INT 1
14525: EQUAL
14526: IFFALSE 14700
14528: GO 14530
14530: DISABLE
// begin enable ;
14531: ENABLE
// if Difficulty = 1 then
14532: LD_OWVAR 67
14536: PUSH
14537: LD_INT 1
14539: EQUAL
14540: IFFALSE 14587
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
14542: LD_INT 3
14544: PPUSH
14545: LD_INT 24
14547: PPUSH
14548: LD_OWVAR 67
14552: PUSH
14553: LD_INT 1
14555: PLUS
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: LD_INT 42
14562: PUSH
14563: LD_INT 42
14565: PUSH
14566: LD_INT 43
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: PPUSH
14574: LD_INT 1
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: LD_INT 21
14582: PPUSH
14583: CALL 5624 0 8
// if Difficulty = 2 then
14587: LD_OWVAR 67
14591: PUSH
14592: LD_INT 2
14594: EQUAL
14595: IFFALSE 14645
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] ) ;
14597: LD_INT 3
14599: PPUSH
14600: LD_INT 24
14602: PPUSH
14603: LD_OWVAR 67
14607: PUSH
14608: LD_INT 1
14610: PLUS
14611: PPUSH
14612: LD_INT 1
14614: PPUSH
14615: LD_INT 42
14617: PUSH
14618: LD_INT 43
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: LD_INT 1
14627: PPUSH
14628: LD_INT 1
14630: PPUSH
14631: LD_INT 21
14633: PUSH
14634: LD_INT 22
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PPUSH
14641: CALL 5624 0 8
// if Difficulty = 3 then
14645: LD_OWVAR 67
14649: PUSH
14650: LD_INT 3
14652: EQUAL
14653: IFFALSE 14700
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
14655: LD_INT 3
14657: PPUSH
14658: LD_INT 24
14660: PPUSH
14661: LD_OWVAR 67
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: LD_INT 43
14671: PUSH
14672: LD_INT 43
14674: PUSH
14675: LD_INT 43
14677: PUSH
14678: LD_INT 44
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: LD_INT 1
14689: PPUSH
14690: LD_INT 1
14692: PPUSH
14693: LD_INT 22
14695: PPUSH
14696: CALL 5624 0 8
// end ;
14700: END
// every 0 0$1 do
14701: GO 14703
14703: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
14704: LD_INT 3
14706: PPUSH
14707: LD_INT 1
14709: PPUSH
14710: LD_INT 3
14712: PPUSH
14713: CALL 5036 0 3
14717: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
14718: LD_EXP 20
14722: PUSH
14723: LD_INT 1
14725: EQUAL
14726: IFFALSE 14847
14728: GO 14730
14730: DISABLE
14731: LD_INT 0
14733: PPUSH
14734: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14735: LD_ADDR_VAR 0 2
14739: PUSH
14740: LD_INT 22
14742: PUSH
14743: LD_INT 6
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 21
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 34
14762: PUSH
14763: LD_INT 51
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: PPUSH
14775: CALL_OW 69
14779: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
14780: LD_VAR 0 2
14784: PUSH
14785: LD_INT 1
14787: ARRAY
14788: PPUSH
14789: LD_EXP 21
14793: PPUSH
14794: CALL_OW 250
14798: PUSH
14799: LD_INT 5
14801: MINUS
14802: PPUSH
14803: LD_EXP 21
14807: PPUSH
14808: CALL_OW 251
14812: PUSH
14813: LD_INT 5
14815: MINUS
14816: PPUSH
14817: CALL_OW 111
// wait ( 0 0$5 ) ;
14821: LD_INT 175
14823: PPUSH
14824: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
14828: LD_VAR 0 2
14832: PUSH
14833: LD_INT 1
14835: ARRAY
14836: PPUSH
14837: LD_INT 41
14839: PPUSH
14840: LD_INT 52
14842: PPUSH
14843: CALL_OW 177
// end ;
14847: PPOPN 2
14849: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
14850: LD_EXP 21
14854: PPUSH
14855: CALL_OW 274
14859: PPUSH
14860: LD_INT 1
14862: PPUSH
14863: CALL_OW 275
14867: PUSH
14868: LD_INT 100
14870: GREATEREQUAL
14871: IFFALSE 15099
14873: GO 14875
14875: DISABLE
14876: LD_INT 0
14878: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14879: LD_ADDR_VAR 0 1
14883: PUSH
14884: LD_INT 22
14886: PUSH
14887: LD_INT 6
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 21
14896: PUSH
14897: LD_INT 1
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 25
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
14924: LD_VAR 0 1
14928: PUSH
14929: LD_INT 1
14931: ARRAY
14932: PPUSH
14933: LD_INT 4
14935: PPUSH
14936: LD_INT 39
14938: PPUSH
14939: LD_INT 37
14941: PPUSH
14942: LD_INT 3
14944: PPUSH
14945: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
14949: LD_VAR 0 1
14953: PUSH
14954: LD_INT 1
14956: ARRAY
14957: PPUSH
14958: LD_INT 29
14960: PPUSH
14961: LD_INT 42
14963: PPUSH
14964: LD_INT 54
14966: PPUSH
14967: LD_INT 3
14969: PPUSH
14970: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
14974: LD_VAR 0 1
14978: PUSH
14979: LD_INT 1
14981: ARRAY
14982: PPUSH
14983: LD_INT 6
14985: PPUSH
14986: LD_INT 38
14988: PPUSH
14989: LD_INT 48
14991: PPUSH
14992: LD_INT 0
14994: PPUSH
14995: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
14999: LD_VAR 0 1
15003: PUSH
15004: LD_INT 1
15006: ARRAY
15007: PPUSH
15008: LD_INT 2
15010: PPUSH
15011: LD_INT 32
15013: PPUSH
15014: LD_INT 38
15016: PPUSH
15017: LD_INT 2
15019: PPUSH
15020: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15024: LD_VAR 0 1
15028: PUSH
15029: LD_INT 1
15031: ARRAY
15032: PPUSH
15033: LD_INT 26
15035: PPUSH
15036: LD_INT 39
15038: PPUSH
15039: LD_INT 55
15041: PPUSH
15042: LD_INT 3
15044: PPUSH
15045: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15049: LD_VAR 0 1
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: PPUSH
15058: LD_INT 32
15060: PPUSH
15061: LD_INT 31
15063: PPUSH
15064: LD_INT 31
15066: PPUSH
15067: LD_INT 3
15069: PPUSH
15070: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15074: LD_VAR 0 1
15078: PUSH
15079: LD_INT 1
15081: ARRAY
15082: PPUSH
15083: LD_INT 31
15085: PPUSH
15086: LD_INT 50
15088: PPUSH
15089: LD_INT 51
15091: PPUSH
15092: LD_INT 4
15094: PPUSH
15095: CALL_OW 205
// end ; end_of_file
15099: PPOPN 1
15101: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15102: LD_INT 0
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15111: LD_ADDR_VAR 0 3
15115: PUSH
15116: LD_INT 22
15118: PUSH
15119: LD_INT 6
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 21
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 25
15138: PUSH
15139: LD_INT 1
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 3
15148: PUSH
15149: LD_INT 54
15151: PUSH
15152: EMPTY
15153: LIST
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 69
15169: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15170: LD_ADDR_VAR 0 7
15174: PUSH
15175: LD_INT 22
15177: PUSH
15178: LD_INT 6
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 21
15187: PUSH
15188: LD_INT 1
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 54
15207: PUSH
15208: EMPTY
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 69
15221: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15222: LD_ADDR_VAR 0 4
15226: PUSH
15227: LD_INT 22
15229: PUSH
15230: LD_INT 6
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 21
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 25
15249: PUSH
15250: LD_INT 2
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: LIST
15261: PPUSH
15262: CALL_OW 69
15266: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
15267: LD_ADDR_VAR 0 6
15271: PUSH
15272: LD_INT 22
15274: PUSH
15275: LD_INT 6
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: LD_INT 21
15284: PUSH
15285: LD_INT 1
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 25
15294: PUSH
15295: LD_INT 4
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 69
15311: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15312: LD_ADDR_VAR 0 8
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_INT 6
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 21
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 34
15339: PUSH
15340: LD_INT 51
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
15357: LD_VAR 0 1
15361: PPUSH
15362: CALL_OW 255
15366: PUSH
15367: LD_INT 6
15369: EQUAL
15370: PUSH
15371: LD_VAR 0 1
15375: PPUSH
15376: CALL_OW 266
15380: PUSH
15381: LD_INT 0
15383: EQUAL
15384: AND
15385: IFFALSE 15405
// begin building = ruPDepot ;
15387: LD_ADDR_VAR 0 1
15391: PUSH
15392: LD_EXP 21
15396: ST_TO_ADDR
// baseReadyToBuild = 1 ;
15397: LD_ADDR_EXP 20
15401: PUSH
15402: LD_INT 1
15404: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
15405: LD_VAR 0 1
15409: PPUSH
15410: CALL_OW 266
15414: PUSH
15415: LD_INT 4
15417: EQUAL
15418: PUSH
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL_OW 255
15428: PUSH
15429: LD_INT 6
15431: EQUAL
15432: AND
15433: IFFALSE 15466
// for i in tmpSold do
15435: LD_ADDR_VAR 0 2
15439: PUSH
15440: LD_VAR 0 3
15444: PUSH
15445: FOR_IN
15446: IFFALSE 15464
// ComEnterUnit ( i , building ) ;
15448: LD_VAR 0 2
15452: PPUSH
15453: LD_VAR 0 1
15457: PPUSH
15458: CALL_OW 120
15462: GO 15445
15464: POP
15465: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
15466: LD_VAR 0 1
15470: PPUSH
15471: CALL_OW 266
15475: PUSH
15476: LD_INT 6
15478: EQUAL
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 255
15489: PUSH
15490: LD_INT 6
15492: EQUAL
15493: AND
15494: IFFALSE 15542
// begin for i in tmpSci do
15496: LD_ADDR_VAR 0 2
15500: PUSH
15501: LD_VAR 0 6
15505: PUSH
15506: FOR_IN
15507: IFFALSE 15525
// ComEnterUnit ( i , building ) ;
15509: LD_VAR 0 2
15513: PPUSH
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 120
15523: GO 15506
15525: POP
15526: POP
// ResAllTechs ( 6 , building , 3 ) ;
15527: LD_INT 6
15529: PPUSH
15530: LD_VAR 0 1
15534: PPUSH
15535: LD_INT 3
15537: PPUSH
15538: CALL 5036 0 3
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL_OW 266
15551: PUSH
15552: LD_INT 2
15554: EQUAL
15555: PUSH
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 255
15565: PUSH
15566: LD_INT 6
15568: EQUAL
15569: AND
15570: IFFALSE 15621
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
15572: LD_ADDR_VAR 0 5
15576: PUSH
15577: LD_VAR 0 8
15581: PUSH
15582: LD_INT 1
15584: ARRAY
15585: PPUSH
15586: CALL_OW 313
15590: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
15591: LD_VAR 0 5
15595: PPUSH
15596: CALL_OW 121
// wait ( 0 0$1 ) ;
15600: LD_INT 35
15602: PPUSH
15603: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
15607: LD_VAR 0 5
15611: PPUSH
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
15621: LD_VAR 0 1
15625: PPUSH
15626: CALL_OW 266
15630: PUSH
15631: LD_INT 32
15633: EQUAL
15634: PUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 255
15644: PUSH
15645: LD_INT 6
15647: EQUAL
15648: AND
15649: IFFALSE 15701
// begin ComPlaceWeapon ( building , 42 ) ;
15651: LD_VAR 0 1
15655: PPUSH
15656: LD_INT 42
15658: PPUSH
15659: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
15663: LD_VAR 0 7
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: PPUSH
15672: CALL_OW 122
// wait ( 0 0$1 ) ;
15676: LD_INT 35
15678: PPUSH
15679: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
15683: LD_VAR 0 7
15687: PUSH
15688: LD_INT 1
15690: ARRAY
15691: PPUSH
15692: LD_VAR 0 1
15696: PPUSH
15697: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
15701: LD_VAR 0 1
15705: PPUSH
15706: CALL_OW 266
15710: PUSH
15711: LD_INT 31
15713: EQUAL
15714: PUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 255
15724: PUSH
15725: LD_INT 6
15727: EQUAL
15728: AND
15729: IFFALSE 15795
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
15731: LD_VAR 0 7
15735: PUSH
15736: LD_INT 2
15738: ARRAY
15739: PPUSH
15740: CALL_OW 122
// wait ( 0 0$1 ) ;
15744: LD_INT 35
15746: PPUSH
15747: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
15751: LD_VAR 0 7
15755: PUSH
15756: LD_INT 2
15758: ARRAY
15759: PPUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
15769: LD_VAR 0 4
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: PPUSH
15778: LD_EXP 21
15782: PPUSH
15783: CALL_OW 120
// baseReadyToBuild = 2 ;
15787: LD_ADDR_EXP 20
15791: PUSH
15792: LD_INT 2
15794: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
15795: LD_VAR 0 1
15799: PPUSH
15800: CALL_OW 266
15804: PUSH
15805: LD_INT 32
15807: EQUAL
15808: PUSH
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 255
15818: PUSH
15819: LD_INT 1
15821: EQUAL
15822: AND
15823: PUSH
15824: LD_EXP 31
15828: PUSH
15829: LD_INT 0
15831: EQUAL
15832: AND
15833: IFFALSE 16126
// begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and bunkerDialog = 0 then
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 266
15844: PUSH
15845: LD_INT 3
15847: EQUAL
15848: PUSH
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 255
15858: PUSH
15859: LD_INT 1
15861: EQUAL
15862: AND
15863: PUSH
15864: LD_EXP 31
15868: PUSH
15869: LD_INT 0
15871: EQUAL
15872: AND
15873: IFFALSE 16104
// begin bunkerDialog = 1 ;
15875: LD_ADDR_EXP 31
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15883: LD_EXP 11
15887: PPUSH
15888: CALL_OW 302
15892: IFFALSE 15908
// begin Say ( Claptopn , D11-Eng1-1 ) ;
15894: LD_EXP 11
15898: PPUSH
15899: LD_STRING D11-Eng1-1
15901: PPUSH
15902: CALL_OW 88
// end else
15906: GO 16104
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15908: LD_INT 22
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 21
15920: PUSH
15921: LD_INT 1
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 25
15930: PUSH
15931: LD_INT 3
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 26
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: PPUSH
15954: CALL_OW 69
15958: PUSH
15959: LD_EXP 2
15963: PUSH
15964: EMPTY
15965: LIST
15966: PUSH
15967: LD_INT 0
15969: GREATER
15970: DIFF
15971: IFFALSE 16045
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15973: LD_INT 22
15975: PUSH
15976: LD_INT 1
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 21
15985: PUSH
15986: LD_INT 1
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 25
15995: PUSH
15996: LD_INT 2
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 26
16005: PUSH
16006: LD_INT 1
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: PPUSH
16019: CALL_OW 69
16023: PUSH
16024: LD_EXP 2
16028: PUSH
16029: EMPTY
16030: LIST
16031: DIFF
16032: PPUSH
16033: LD_STRING D11-Eng1-1
16035: PPUSH
16036: LD_STRING D11-Eng1-1
16038: PPUSH
16039: CALL 3349 0 3
// end else
16043: GO 16104
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16045: LD_INT 22
16047: PUSH
16048: LD_INT 1
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 21
16057: PUSH
16058: LD_INT 1
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 26
16067: PUSH
16068: LD_INT 1
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 69
16084: PUSH
16085: LD_EXP 2
16089: PUSH
16090: EMPTY
16091: LIST
16092: DIFF
16093: PPUSH
16094: LD_STRING D11-Eng1-1
16096: PPUSH
16097: LD_STRING D11-Eng1-1
16099: PPUSH
16100: CALL 3349 0 3
// end ; end ; end ; if energyVDialog = 0 then
16104: LD_EXP 32
16108: PUSH
16109: LD_INT 0
16111: EQUAL
16112: IFFALSE 16118
// EnergyDialog ;
16114: CALL 3661 0 0
// bunkerDialog = 1 ;
16118: LD_ADDR_EXP 31
16122: PUSH
16123: LD_INT 1
16125: ST_TO_ADDR
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16126: LD_VAR 0 1
16130: PPUSH
16131: CALL_OW 266
16135: PUSH
16136: LD_INT 29
16138: EQUAL
16139: PUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 255
16149: PUSH
16150: LD_INT 1
16152: EQUAL
16153: AND
16154: IFFALSE 16164
// buildOil = 1 ;
16156: LD_ADDR_EXP 33
16160: PUSH
16161: LD_INT 1
16163: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 266
16173: PUSH
16174: LD_INT 26
16176: EQUAL
16177: PUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 255
16187: PUSH
16188: LD_INT 1
16190: EQUAL
16191: AND
16192: IFFALSE 16202
// buildPower = 1 ;
16194: LD_ADDR_EXP 34
16198: PUSH
16199: LD_INT 1
16201: ST_TO_ADDR
// end ;
16202: PPOPN 8
16204: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 266
16214: PUSH
16215: LD_INT 3
16217: EQUAL
16218: PUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: CALL_OW 255
16228: PUSH
16229: LD_INT 1
16231: EQUAL
16232: AND
16233: PUSH
16234: LD_EXP 30
16238: PUSH
16239: LD_INT 0
16241: EQUAL
16242: AND
16243: IFFALSE 16559
// begin factoryDialog = 1 ;
16245: LD_ADDR_EXP 30
16249: PUSH
16250: LD_INT 1
16252: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
16253: LD_INT 22
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 21
16265: PUSH
16266: LD_INT 3
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 30
16275: PUSH
16276: LD_INT 3
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 24
16285: PUSH
16286: LD_INT 1000
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: PPUSH
16299: CALL_OW 69
16303: PUSH
16304: LD_INT 1
16306: ARRAY
16307: PPUSH
16308: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
16312: LD_EXP 2
16316: PPUSH
16317: LD_STRING D9a-JMM-1
16319: PPUSH
16320: CALL_OW 88
// if IsOK ( Campell ) then
16324: LD_EXP 12
16328: PPUSH
16329: CALL_OW 302
16333: IFFALSE 16349
// begin Say ( Campell , D9a-Mech1-1 ) ;
16335: LD_EXP 12
16339: PPUSH
16340: LD_STRING D9a-Mech1-1
16342: PPUSH
16343: CALL_OW 88
// end else
16347: GO 16545
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16349: LD_INT 22
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 21
16361: PUSH
16362: LD_INT 1
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 25
16371: PUSH
16372: LD_INT 3
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 26
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: PPUSH
16395: CALL_OW 69
16399: PUSH
16400: LD_EXP 2
16404: PUSH
16405: EMPTY
16406: LIST
16407: PUSH
16408: LD_INT 0
16410: GREATER
16411: DIFF
16412: IFFALSE 16486
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16414: LD_INT 22
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 21
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 25
16436: PUSH
16437: LD_INT 3
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 26
16446: PUSH
16447: LD_INT 1
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PPUSH
16460: CALL_OW 69
16464: PUSH
16465: LD_EXP 2
16469: PUSH
16470: EMPTY
16471: LIST
16472: DIFF
16473: PPUSH
16474: LD_STRING D9a-Mech1-1
16476: PPUSH
16477: LD_STRING D9a-Mech1-1
16479: PPUSH
16480: CALL 3349 0 3
// end else
16484: GO 16545
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16486: LD_INT 22
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 21
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 26
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: PPUSH
16521: CALL_OW 69
16525: PUSH
16526: LD_EXP 2
16530: PUSH
16531: EMPTY
16532: LIST
16533: DIFF
16534: PPUSH
16535: LD_STRING D9a-Mech1-1
16537: PPUSH
16538: LD_STRING D9a-Mech1-1
16540: PPUSH
16541: CALL 3349 0 3
// end ; end ; if energyVDialog = 0 then
16545: LD_EXP 32
16549: PUSH
16550: LD_INT 0
16552: EQUAL
16553: IFFALSE 16559
// EnergyDialog ;
16555: CALL 3661 0 0
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 266
16568: PUSH
16569: LD_INT 32
16571: EQUAL
16572: PUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 255
16582: PUSH
16583: LD_INT 1
16585: EQUAL
16586: AND
16587: PUSH
16588: LD_EXP 31
16592: PUSH
16593: LD_INT 0
16595: EQUAL
16596: AND
16597: IFFALSE 16890
// begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and bunkerDialog = 0 then
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL_OW 266
16608: PUSH
16609: LD_INT 3
16611: EQUAL
16612: PUSH
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 255
16622: PUSH
16623: LD_INT 1
16625: EQUAL
16626: AND
16627: PUSH
16628: LD_EXP 31
16632: PUSH
16633: LD_INT 0
16635: EQUAL
16636: AND
16637: IFFALSE 16868
// begin bunkerDialog = 1 ;
16639: LD_ADDR_EXP 31
16643: PUSH
16644: LD_INT 1
16646: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16647: LD_EXP 11
16651: PPUSH
16652: CALL_OW 302
16656: IFFALSE 16672
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16658: LD_EXP 11
16662: PPUSH
16663: LD_STRING D11-Eng1-1
16665: PPUSH
16666: CALL_OW 88
// end else
16670: GO 16868
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16672: LD_INT 22
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 21
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 25
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 26
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: PPUSH
16718: CALL_OW 69
16722: PUSH
16723: LD_EXP 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: PUSH
16731: LD_INT 0
16733: GREATER
16734: DIFF
16735: IFFALSE 16809
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16737: LD_INT 22
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 21
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 25
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 26
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: PPUSH
16783: CALL_OW 69
16787: PUSH
16788: LD_EXP 2
16792: PUSH
16793: EMPTY
16794: LIST
16795: DIFF
16796: PPUSH
16797: LD_STRING D11-Eng1-1
16799: PPUSH
16800: LD_STRING D11-Eng1-1
16802: PPUSH
16803: CALL 3349 0 3
// end else
16807: GO 16868
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16809: LD_INT 22
16811: PUSH
16812: LD_INT 1
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 21
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 26
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: LIST
16843: PPUSH
16844: CALL_OW 69
16848: PUSH
16849: LD_EXP 2
16853: PUSH
16854: EMPTY
16855: LIST
16856: DIFF
16857: PPUSH
16858: LD_STRING D11-Eng1-1
16860: PPUSH
16861: LD_STRING D11-Eng1-1
16863: PPUSH
16864: CALL 3349 0 3
// end ; end ; end ; if energyVDialog = 0 then
16868: LD_EXP 32
16872: PUSH
16873: LD_INT 0
16875: EQUAL
16876: IFFALSE 16882
// EnergyDialog ;
16878: CALL 3661 0 0
// bunkerDialog = 1 ;
16882: LD_ADDR_EXP 31
16886: PUSH
16887: LD_INT 1
16889: ST_TO_ADDR
// end ; end ;
16890: PPOPN 1
16892: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 247
16902: PUSH
16903: LD_INT 1
16905: EQUAL
16906: PUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 255
16916: PUSH
16917: LD_INT 1
16919: EQUAL
16920: AND
16921: IFFALSE 16937
// lostCounter = lostCounter + 1 ;
16923: LD_ADDR_EXP 37
16927: PUSH
16928: LD_EXP 37
16932: PUSH
16933: LD_INT 1
16935: PLUS
16936: ST_TO_ADDR
// end ;
16937: PPOPN 1
16939: END
// on Contact ( side1 , side2 ) do var i ;
16940: LD_INT 0
16942: PPUSH
// begin if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
16943: LD_VAR 0 1
16947: PUSH
16948: LD_INT 1
16950: EQUAL
16951: PUSH
16952: LD_VAR 0 2
16956: PUSH
16957: LD_INT 6
16959: EQUAL
16960: AND
16961: PUSH
16962: LD_EXP 39
16966: PUSH
16967: LD_INT 1
16969: EQUAL
16970: AND
16971: IFFALSE 17026
// begin donaldsonCoopAttack = 0 ;
16973: LD_ADDR_EXP 39
16977: PUSH
16978: LD_INT 0
16980: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
16981: LD_ADDR_VAR 0 3
16985: PUSH
16986: LD_INT 22
16988: PUSH
16989: LD_INT 4
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: PPUSH
16999: CALL_OW 69
17003: PUSH
17004: FOR_IN
17005: IFFALSE 17024
// ComAgressiveMove ( i , 52 , 64 ) ;
17007: LD_VAR 0 3
17011: PPUSH
17012: LD_INT 52
17014: PPUSH
17015: LD_INT 64
17017: PPUSH
17018: CALL_OW 114
17022: GO 17004
17024: POP
17025: POP
// end ; end ;
17026: PPOPN 3
17028: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17029: LD_VAR 0 1
17033: PPUSH
17034: CALL_OW 264
17038: PUSH
17039: LD_INT 53
17041: EQUAL
17042: IFFALSE 17127
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17044: LD_VAR 0 1
17048: PPUSH
17049: LD_INT 21
17051: PPUSH
17052: CALL 4304 0 2
// uc_side = 3 ;
17056: LD_ADDR_OWVAR 20
17060: PUSH
17061: LD_INT 3
17063: ST_TO_ADDR
// uc_nation = 3 ;
17064: LD_ADDR_OWVAR 21
17068: PUSH
17069: LD_INT 3
17071: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17072: LD_INT 0
17074: PPUSH
17075: LD_EXP 19
17079: PPUSH
17080: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17084: CALL_OW 44
17088: PPUSH
17089: LD_VAR 0 2
17093: PPUSH
17094: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17098: LD_VAR 0 1
17102: PPUSH
17103: LD_INT 6
17105: PPUSH
17106: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 313
17119: PPUSH
17120: LD_INT 6
17122: PPUSH
17123: CALL_OW 235
// end ; end ; end_of_file
17127: PPOPN 2
17129: END
// every 10 10$0 do
17130: GO 17132
17132: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17133: LD_INT 5
17135: PPUSH
17136: LD_INT 3
17138: PPUSH
17139: LD_INT 2
17141: PPUSH
17142: LD_INT 5
17144: PPUSH
17145: CALL_OW 12
17149: PUSH
17150: LD_INT 2
17152: PUSH
17153: LD_INT 3
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: LIST
17163: PUSH
17164: LD_OWVAR 67
17168: ARRAY
17169: PLUS
17170: PPUSH
17171: LD_INT 0
17173: PPUSH
17174: LD_INT 0
17176: PPUSH
17177: LD_INT 0
17179: PPUSH
17180: LD_INT 1
17182: PUSH
17183: LD_INT 2
17185: PUSH
17186: LD_INT 3
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: LIST
17193: PUSH
17194: LD_OWVAR 67
17198: ARRAY
17199: PPUSH
17200: LD_EXP 18
17204: PPUSH
17205: LD_EXP 19
17209: PPUSH
17210: CALL_OW 12
17214: PPUSH
17215: LD_INT 4
17217: PPUSH
17218: LD_INT 14
17220: PPUSH
17221: LD_INT 1
17223: PPUSH
17224: LD_INT 2
17226: PPUSH
17227: CALL 6062 0 12
// end ;
17231: END
// every 15 15$0 do
17232: GO 17234
17234: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17235: LD_INT 5
17237: PPUSH
17238: LD_INT 3
17240: PPUSH
17241: LD_INT 3
17243: PPUSH
17244: LD_INT 5
17246: PPUSH
17247: CALL_OW 12
17251: PUSH
17252: LD_INT 2
17254: PUSH
17255: LD_INT 3
17257: PUSH
17258: LD_INT 3
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PUSH
17266: LD_OWVAR 67
17270: ARRAY
17271: PLUS
17272: PPUSH
17273: LD_INT 0
17275: PPUSH
17276: LD_INT 0
17278: PPUSH
17279: LD_INT 0
17281: PPUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 2
17287: PUSH
17288: LD_INT 3
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: LIST
17295: PUSH
17296: LD_OWVAR 67
17300: ARRAY
17301: PPUSH
17302: LD_EXP 18
17306: PPUSH
17307: LD_EXP 19
17311: PPUSH
17312: CALL_OW 12
17316: PPUSH
17317: LD_INT 4
17319: PPUSH
17320: LD_INT 14
17322: PPUSH
17323: LD_INT 1
17325: PPUSH
17326: LD_INT 1
17328: PPUSH
17329: CALL 6062 0 12
// end ;
17333: END
// every 25 25$0 do
17334: GO 17336
17336: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17337: LD_INT 5
17339: PPUSH
17340: LD_INT 3
17342: PPUSH
17343: LD_INT 2
17345: PPUSH
17346: LD_INT 3
17348: PPUSH
17349: CALL_OW 12
17353: PUSH
17354: LD_INT 2
17356: PUSH
17357: LD_INT 3
17359: PUSH
17360: LD_INT 3
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: LD_OWVAR 67
17372: ARRAY
17373: PLUS
17374: PPUSH
17375: LD_INT 0
17377: PPUSH
17378: LD_INT 0
17380: PPUSH
17381: LD_INT 0
17383: PPUSH
17384: LD_INT 1
17386: PUSH
17387: LD_INT 2
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_OWVAR 67
17402: ARRAY
17403: PPUSH
17404: LD_EXP 18
17408: PPUSH
17409: LD_EXP 19
17413: PPUSH
17414: CALL_OW 12
17418: PPUSH
17419: LD_INT 4
17421: PPUSH
17422: LD_INT 14
17424: PPUSH
17425: LD_INT 1
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: CALL 6062 0 12
// end ;
17435: END
// every 26 26$0 do
17436: GO 17438
17438: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17439: LD_INT 5
17441: PPUSH
17442: LD_INT 3
17444: PPUSH
17445: LD_INT 1
17447: PPUSH
17448: LD_INT 3
17450: PPUSH
17451: CALL_OW 12
17455: PUSH
17456: LD_INT 1
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: LD_OWVAR 67
17474: ARRAY
17475: PLUS
17476: PPUSH
17477: LD_INT 0
17479: PPUSH
17480: LD_INT 0
17482: PPUSH
17483: LD_INT 0
17485: PPUSH
17486: LD_INT 2
17488: PUSH
17489: LD_INT 2
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: LD_OWVAR 67
17504: ARRAY
17505: PPUSH
17506: LD_EXP 18
17510: PPUSH
17511: LD_EXP 19
17515: PPUSH
17516: CALL_OW 12
17520: PPUSH
17521: LD_INT 4
17523: PPUSH
17524: LD_INT 14
17526: PPUSH
17527: LD_INT 1
17529: PPUSH
17530: LD_INT 2
17532: PPUSH
17533: CALL 6062 0 12
// end ;
17537: END
// every 25 25$0 do
17538: GO 17540
17540: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
17541: LD_INT 4
17543: PPUSH
17544: LD_INT 5
17546: PPUSH
17547: LD_INT 3
17549: PUSH
17550: LD_INT 4
17552: PUSH
17553: LD_INT 5
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: PUSH
17561: LD_OWVAR 67
17565: ARRAY
17566: PPUSH
17567: LD_EXP 18
17571: PPUSH
17572: LD_EXP 19
17576: PPUSH
17577: CALL_OW 12
17581: PPUSH
17582: LD_INT 3
17584: PPUSH
17585: LD_INT 1
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: LD_INT 42
17593: PUSH
17594: LD_INT 42
17596: PUSH
17597: LD_INT 43
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 42
17607: PUSH
17608: LD_INT 43
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 43
17617: PUSH
17618: LD_INT 43
17620: PUSH
17621: LD_INT 43
17623: PUSH
17624: LD_INT 44
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: PUSH
17638: LD_OWVAR 67
17642: ARRAY
17643: PPUSH
17644: EMPTY
17645: PPUSH
17646: EMPTY
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: CALL 8980 0 11
// end ; end_of_file
17655: END
// every 0 0$1 trigger startTimer = 1 do
17656: LD_EXP 29
17660: PUSH
17661: LD_INT 1
17663: EQUAL
17664: IFFALSE 17794
17666: GO 17668
17668: DISABLE
// begin enable ;
17669: ENABLE
// if timerStatus = 1 then
17670: LD_EXP 28
17674: PUSH
17675: LD_INT 1
17677: EQUAL
17678: IFFALSE 17711
// begin timeToSupport = timeToSupport - 0 0$01 ;
17680: LD_ADDR_EXP 27
17684: PUSH
17685: LD_EXP 27
17689: PUSH
17690: LD_INT 35
17692: MINUS
17693: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17694: LD_ADDR_OWVAR 47
17698: PUSH
17699: LD_STRING #Am04-1
17701: PUSH
17702: LD_EXP 27
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: ST_TO_ADDR
// end ; if timerStatus = 2 then
17711: LD_EXP 28
17715: PUSH
17716: LD_INT 2
17718: EQUAL
17719: IFFALSE 17752
// begin timeToSupport = timeToSupport - 0 0$01 ;
17721: LD_ADDR_EXP 27
17725: PUSH
17726: LD_EXP 27
17730: PUSH
17731: LD_INT 35
17733: MINUS
17734: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17735: LD_ADDR_OWVAR 47
17739: PUSH
17740: LD_STRING #Am04-2
17742: PUSH
17743: LD_EXP 27
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: ST_TO_ADDR
// end ; if timerStatus = 3 then
17752: LD_EXP 28
17756: PUSH
17757: LD_INT 3
17759: EQUAL
17760: IFFALSE 17776
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17762: LD_ADDR_EXP 26
17766: PUSH
17767: LD_EXP 26
17771: PUSH
17772: LD_INT 35
17774: MINUS
17775: ST_TO_ADDR
// end ; if timerStatus = 4 then
17776: LD_EXP 28
17780: PUSH
17781: LD_INT 4
17783: EQUAL
17784: IFFALSE 17794
// begin display_strings =  ;
17786: LD_ADDR_OWVAR 47
17790: PUSH
17791: LD_STRING 
17793: ST_TO_ADDR
// end ; end ; end_of_file
17794: END
// every 0 0$1 trigger IsDead ( JMM ) do
17795: LD_EXP 2
17799: PPUSH
17800: CALL_OW 301
17804: IFFALSE 17816
17806: GO 17808
17808: DISABLE
// YouLost ( JMM ) ;
17809: LD_STRING JMM
17811: PPUSH
17812: CALL_OW 104
17816: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
17817: LD_INT 4
17819: PPUSH
17820: CALL_OW 301
17824: IFFALSE 17836
17826: GO 17828
17828: DISABLE
// YouLost ( Base ) ; end_of_file
17829: LD_STRING Base
17831: PPUSH
17832: CALL_OW 104
17836: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
17837: LD_EXP 17
17841: PPUSH
17842: CALL_OW 301
17846: IFFALSE 18127
17848: GO 17850
17850: DISABLE
17851: LD_INT 0
17853: PPUSH
// begin AIEnable = 0 ;
17854: LD_ADDR_EXP 36
17858: PUSH
17859: LD_INT 0
17861: ST_TO_ADDR
// InGameOn ;
17862: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17866: LD_INT 3
17868: PPUSH
17869: LD_INT 1
17871: PPUSH
17872: LD_INT 1
17874: PPUSH
17875: LD_INT 0
17877: PPUSH
17878: CALL_OW 80
// SetAttitude ( 1 , 6 , att_friend , true ) ;
17882: LD_INT 1
17884: PPUSH
17885: LD_INT 6
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: LD_INT 1
17893: PPUSH
17894: CALL_OW 80
// SetAttitude ( 1 , 5 , att_friend , true ) ;
17898: LD_INT 1
17900: PPUSH
17901: LD_INT 5
17903: PPUSH
17904: LD_INT 1
17906: PPUSH
17907: LD_INT 1
17909: PPUSH
17910: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17914: LD_INT 3
17916: PPUSH
17917: LD_INT 1
17919: PPUSH
17920: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17924: LD_INT 97
17926: PPUSH
17927: LD_INT 91
17929: PPUSH
17930: CALL_OW 84
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17934: LD_ADDR_VAR 0 1
17938: PUSH
17939: LD_INT 22
17941: PUSH
17942: LD_INT 3
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 21
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: PUSH
17968: FOR_IN
17969: IFFALSE 18020
// begin ComExitBuilding ( i ) ;
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 122
// wait ( 0 0$1 ) ;
17980: LD_INT 35
17982: PPUSH
17983: CALL_OW 67
// ComExitVehicle ( i ) ;
17987: LD_VAR 0 1
17991: PPUSH
17992: CALL_OW 121
// wait ( 0 0$1 ) ;
17996: LD_INT 35
17998: PPUSH
17999: CALL_OW 67
// ComMoveXY ( i , 124 , 98 ) ;
18003: LD_VAR 0 1
18007: PPUSH
18008: LD_INT 124
18010: PPUSH
18011: LD_INT 98
18013: PPUSH
18014: CALL_OW 111
// end ;
18018: GO 17968
18020: POP
18021: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
18022: LD_ADDR_VAR 0 1
18026: PUSH
18027: LD_INT 22
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 21
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PPUSH
18051: CALL_OW 69
18055: PUSH
18056: FOR_IN
18057: IFFALSE 18108
// begin ComExitBuilding ( i ) ;
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 122
// wait ( 0 0$1 ) ;
18068: LD_INT 35
18070: PPUSH
18071: CALL_OW 67
// ComExitVehicle ( i ) ;
18075: LD_VAR 0 1
18079: PPUSH
18080: CALL_OW 121
// wait ( 0 0$1 ) ;
18084: LD_INT 35
18086: PPUSH
18087: CALL_OW 67
// ComAgressiveMove ( i , 124 , 98 ) ;
18091: LD_VAR 0 1
18095: PPUSH
18096: LD_INT 124
18098: PPUSH
18099: LD_INT 98
18101: PPUSH
18102: CALL_OW 114
// end ;
18106: GO 18056
18108: POP
18109: POP
// wait ( 0 0$3 ) ;
18110: LD_INT 105
18112: PPUSH
18113: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
18117: LD_INT 124
18119: PPUSH
18120: LD_INT 98
18122: PPUSH
18123: CALL_OW 84
// end ;
18127: PPOPN 1
18129: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
18130: LD_INT 22
18132: PUSH
18133: LD_INT 3
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 21
18142: PUSH
18143: LD_INT 1
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 24
18152: PUSH
18153: LD_INT 250
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: PUSH
18170: LD_INT 0
18172: EQUAL
18173: IFFALSE 18182
18175: GO 18177
18177: DISABLE
// FinishMission ;
18178: CALL 3877 0 0
18182: END
// every 0 0$1 do var i ;
18183: GO 18185
18185: DISABLE
18186: LD_INT 0
18188: PPUSH
// begin enable ;
18189: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ f_side , 3 ] ) do
18190: LD_ADDR_VAR 0 1
18194: PUSH
18195: LD_INT 5
18197: PPUSH
18198: LD_INT 22
18200: PUSH
18201: LD_INT 3
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PPUSH
18208: CALL_OW 70
18212: PUSH
18213: FOR_IN
18214: IFFALSE 18227
// RemoveUnit ( i ) ;
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 64
18225: GO 18213
18227: POP
18228: POP
// end ; end_of_file
18229: PPOPN 1
18231: END
// every 1 1$15 do
18232: GO 18234
18234: DISABLE
// begin if supply <= 13 and supply > 7 then
18235: LD_EXP 35
18239: PUSH
18240: LD_INT 13
18242: LESSEQUAL
18243: PUSH
18244: LD_EXP 35
18248: PUSH
18249: LD_INT 7
18251: GREATER
18252: AND
18253: IFFALSE 18276
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
18255: LD_INT 3
18257: PPUSH
18258: LD_INT 5
18260: PPUSH
18261: CALL_OW 12
18265: PPUSH
18266: LD_INT 18
18268: PPUSH
18269: LD_INT 1
18271: PPUSH
18272: CALL_OW 55
// if supply <= 7 and supply > 4 then
18276: LD_EXP 35
18280: PUSH
18281: LD_INT 7
18283: LESSEQUAL
18284: PUSH
18285: LD_EXP 35
18289: PUSH
18290: LD_INT 4
18292: GREATER
18293: AND
18294: IFFALSE 18317
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
18296: LD_INT 3
18298: PPUSH
18299: LD_INT 5
18301: PPUSH
18302: CALL_OW 12
18306: PPUSH
18307: LD_INT 19
18309: PPUSH
18310: LD_INT 1
18312: PPUSH
18313: CALL_OW 55
// if supply <= 4 and supply > 0 then
18317: LD_EXP 35
18321: PUSH
18322: LD_INT 4
18324: LESSEQUAL
18325: PUSH
18326: LD_EXP 35
18330: PUSH
18331: LD_INT 0
18333: GREATER
18334: AND
18335: IFFALSE 18358
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
18337: LD_INT 3
18339: PPUSH
18340: LD_INT 5
18342: PPUSH
18343: CALL_OW 12
18347: PPUSH
18348: LD_INT 20
18350: PPUSH
18351: LD_INT 1
18353: PPUSH
18354: CALL_OW 55
// if supply > 0 then
18358: LD_EXP 35
18362: PUSH
18363: LD_INT 0
18365: GREATER
18366: IFFALSE 18383
// begin supply = supply - 1 ;
18368: LD_ADDR_EXP 35
18372: PUSH
18373: LD_EXP 35
18377: PUSH
18378: LD_INT 1
18380: MINUS
18381: ST_TO_ADDR
// enable ;
18382: ENABLE
// end ; end ;
18383: END
