// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// russianTanks = [ ] ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: EMPTY
  50: ST_TO_ADDR
// russianDamageTanks = [ ] ;
  51: LD_ADDR_EXP 19
  55: PUSH
  56: EMPTY
  57: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  58: LD_ADDR_EXP 20
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// debugMode = 0 ;
  66: LD_ADDR_EXP 43
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// bonusAvalaible = 0 ;
  74: LD_ADDR_EXP 42
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// firstRussianAttack = 0 ;
  82: LD_ADDR_EXP 23
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// saveDonaldson = 0 ;
  90: LD_ADDR_EXP 24
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// frankScoutBase = 0 ;
  98: LD_ADDR_EXP 25
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// harrAnswer = 0 ;
 106: LD_ADDR_EXP 26
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 114: LD_ADDR_EXP 27
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 122: LD_ADDR_EXP 28
 126: PUSH
 127: LD_INT 18900
 129: ST_TO_ADDR
// timerStatus = 0 ;
 130: LD_ADDR_EXP 29
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// startTimer = 0 ;
 138: LD_ADDR_EXP 30
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// factoryDialog = 0 ;
 146: LD_ADDR_EXP 31
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// bunkerDialog = 0 ;
 154: LD_ADDR_EXP 32
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// energyVDialog = 0 ;
 162: LD_ADDR_EXP 33
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// buildOil = 0 ;
 170: LD_ADDR_EXP 34
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// buildPower = 0 ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 186: LD_ADDR_EXP 36
 190: PUSH
 191: LD_INT 14
 193: PUSH
 194: LD_INT 12
 196: PUSH
 197: LD_INT 11
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: PUSH
 205: LD_OWVAR 67
 209: ARRAY
 210: ST_TO_ADDR
// AIEnable = 1 ;
 211: LD_ADDR_EXP 37
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 219: LD_ADDR_EXP 41
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// lostCounter = 0 ;
 227: LD_ADDR_EXP 38
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// honor = 1 ;
 235: LD_ADDR_EXP 39
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// escapeAvalaible = 0 ;
 243: LD_ADDR_EXP 40
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// PrepareDifficulty ;
 251: CALL 4206 0 0
// PrepareRussianBase ;
 255: CALL 2519 0 0
// PrepareRussianCommander ;
 259: CALL 2470 0 0
// PrepareHeroes ;
 263: CALL 404 0 0
// SetBName ( ambdept0 , gamma ) ;
 267: LD_INT 4
 269: PPUSH
 270: LD_STRING gamma
 272: PPUSH
 273: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 277: LD_INT 21
 279: PPUSH
 280: LD_STRING fyodor
 282: PPUSH
 283: CALL_OW 500
// end ;
 287: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 288: LD_EXP 43
 292: PUSH
 293: LD_INT 1
 295: EQUAL
 296: IFFALSE 401
 298: GO 300
 300: DISABLE
 301: LD_INT 0
 303: PPUSH
// begin enable ;
 304: ENABLE
// fogoff ( true ) ;
 305: LD_INT 1
 307: PPUSH
 308: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 312: LD_ADDR_VAR 0 1
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 21
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PPUSH
 341: CALL_OW 69
 345: PUSH
 346: FOR_IN
 347: IFFALSE 363
// SetLives ( i , 1000 ) ;
 349: LD_VAR 0 1
 353: PPUSH
 354: LD_INT 1000
 356: PPUSH
 357: CALL_OW 234
 361: GO 346
 363: POP
 364: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 365: LD_INT 4
 367: PPUSH
 368: CALL_OW 274
 372: PPUSH
 373: LD_INT 1
 375: PPUSH
 376: LD_INT 9999
 378: PPUSH
 379: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 383: LD_INT 4
 385: PPUSH
 386: CALL_OW 274
 390: PPUSH
 391: LD_INT 2
 393: PPUSH
 394: LD_INT 9999
 396: PPUSH
 397: CALL_OW 277
// end ; end_of_file
 401: PPOPN 1
 403: END
// export function PrepareHeroes ; var i , tmp ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
 408: PPUSH
// uc_side = 1 ;
 409: LD_ADDR_OWVAR 20
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// uc_nation = 1 ;
 417: LD_ADDR_OWVAR 21
 421: PUSH
 422: LD_INT 1
 424: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 425: LD_ADDR_EXP 1
 429: PUSH
 430: LD_STRING JMM
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: CALL 3741 0 2
 440: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 441: LD_ADDR_EXP 4
 445: PUSH
 446: LD_STRING Lisa
 448: PPUSH
 449: LD_INT 1
 451: PPUSH
 452: CALL 3741 0 2
 456: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 457: LD_ADDR_EXP 7
 461: PUSH
 462: LD_STRING Brown
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL 3741 0 2
 472: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 473: LD_ADDR_EXP 8
 477: PUSH
 478: LD_STRING Dickens
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL 3741 0 2
 488: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 489: LD_ADDR_EXP 9
 493: PUSH
 494: LD_STRING Woodruff
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 3741 0 2
 504: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 505: LD_ADDR_EXP 12
 509: PUSH
 510: LD_STRING Campell
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL 3741 0 2
 520: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 521: LD_ADDR_EXP 10
 525: PUSH
 526: LD_STRING Knight
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL 3741 0 2
 536: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 537: LD_ADDR_EXP 11
 541: PUSH
 542: LD_STRING Claptopn
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL 3741 0 2
 552: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 553: LD_ADDR_EXP 14
 557: PUSH
 558: LD_STRING Harisson
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL 3741 0 2
 568: ST_TO_ADDR
// if Lisa = false then
 569: LD_EXP 4
 573: PUSH
 574: LD_INT 0
 576: EQUAL
 577: IFFALSE 595
// Bobby = PrepareUnit ( Bobby , true ) ;
 579: LD_ADDR_EXP 2
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 3741 0 2
 594: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 595: LD_EXP 4
 599: PUSH
 600: LD_INT 0
 602: EQUAL
 603: PUSH
 604: LD_EXP 2
 608: PUSH
 609: LD_INT 0
 611: EQUAL
 612: AND
 613: IFFALSE 631
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 615: LD_ADDR_EXP 3
 619: PUSH
 620: LD_STRING Cyrus
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL 3741 0 2
 630: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 631: LD_EXP 4
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: PUSH
 640: LD_EXP 2
 644: PUSH
 645: LD_INT 0
 647: EQUAL
 648: AND
 649: PUSH
 650: LD_EXP 3
 654: PUSH
 655: LD_INT 0
 657: EQUAL
 658: AND
 659: IFFALSE 720
// begin tmp = CreateCharacterSet ( 03_others ) ;
 661: LD_ADDR_VAR 0 3
 665: PUSH
 666: LD_STRING 03_others
 668: PPUSH
 669: CALL_OW 31
 673: ST_TO_ADDR
// for i = 1 to tmp do
 674: LD_ADDR_VAR 0 2
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_VAR 0 3
 688: PUSH
 689: FOR_TO
 690: IFFALSE 718
// RandomBeforeMission = tmp [ Rand ( 1 , tmp ) ] ;
 692: LD_ADDR_EXP 6
 696: PUSH
 697: LD_VAR 0 3
 701: PUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_VAR 0 3
 709: PPUSH
 710: CALL_OW 12
 714: ARRAY
 715: ST_TO_ADDR
 716: GO 689
 718: POP
 719: POP
// end ; uc_side = 4 ;
 720: LD_ADDR_OWVAR 20
 724: PUSH
 725: LD_INT 4
 727: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 728: LD_ADDR_EXP 13
 732: PUSH
 733: LD_STRING Donaldson
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 3741 0 2
 743: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 744: LD_ADDR_EXP 5
 748: PUSH
 749: LD_STRING Frank
 751: PPUSH
 752: LD_INT 1
 754: PPUSH
 755: CALL 3741 0 2
 759: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 760: LD_EXP 1
 764: PPUSH
 765: LD_INT 32
 767: PPUSH
 768: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 772: LD_EXP 7
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: LD_INT 0
 782: PPUSH
 783: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 787: LD_EXP 7
 791: PPUSH
 792: LD_INT 32
 794: PPUSH
 795: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 799: LD_EXP 8
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 814: LD_EXP 9
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 829: LD_EXP 12
 833: PPUSH
 834: LD_INT 2
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 844: LD_EXP 10
 848: PPUSH
 849: LD_INT 2
 851: PPUSH
 852: LD_INT 0
 854: PPUSH
 855: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 859: LD_EXP 11
 863: PPUSH
 864: LD_INT 2
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 874: LD_EXP 4
 878: PPUSH
 879: LD_INT 2
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
// if Lisa = false then
 889: LD_EXP 4
 893: PUSH
 894: LD_INT 0
 896: EQUAL
 897: IFFALSE 914
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 899: LD_EXP 2
 903: PPUSH
 904: LD_INT 2
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// if Lisa = false and Bobby = false then
 914: LD_EXP 4
 918: PUSH
 919: LD_INT 0
 921: EQUAL
 922: PUSH
 923: LD_EXP 2
 927: PUSH
 928: LD_INT 0
 930: EQUAL
 931: AND
 932: IFFALSE 949
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 934: LD_EXP 3
 938: PPUSH
 939: LD_INT 2
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 949: LD_EXP 4
 953: PUSH
 954: LD_INT 0
 956: EQUAL
 957: PUSH
 958: LD_EXP 2
 962: PUSH
 963: LD_INT 0
 965: EQUAL
 966: AND
 967: PUSH
 968: LD_EXP 3
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 994
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 979: LD_EXP 6
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: LD_VAR 0 1
 998: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 999: LD_INT 0
1001: PPUSH
1002: PPUSH
1003: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1004: LD_EXP 13
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1019: LD_EXP 5
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// uc_nation = 1 ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// uc_side = 4 ;
1042: LD_ADDR_OWVAR 20
1046: PUSH
1047: LD_INT 4
1049: ST_TO_ADDR
// hc_class := 3 ;
1050: LD_ADDR_OWVAR 28
1054: PUSH
1055: LD_INT 3
1057: ST_TO_ADDR
// hc_sex := sex_male ;
1058: LD_ADDR_OWVAR 27
1062: PUSH
1063: LD_INT 1
1065: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1066: LD_ADDR_OWVAR 33
1070: PUSH
1071: LD_STRING SecondCharsGal
1073: ST_TO_ADDR
// hc_face_number := 53 ;
1074: LD_ADDR_OWVAR 34
1078: PUSH
1079: LD_INT 53
1081: ST_TO_ADDR
// hc_name := Freddie Warner ;
1082: LD_ADDR_OWVAR 26
1086: PUSH
1087: LD_STRING Freddie Warner
1089: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1090: LD_ADDR_OWVAR 29
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_INT 11
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1105: LD_ADDR_OWVAR 30
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 0
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: LD_INT 0
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: ST_TO_ADDR
// un = CreateHuman ;
1151: LD_ADDR_VAR 0 3
1155: PUSH
1156: CALL_OW 44
1160: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1161: LD_VAR 0 3
1165: PPUSH
1166: LD_INT 10
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: CALL_OW 49
// hc_class := 1 ;
1176: LD_ADDR_OWVAR 28
1180: PUSH
1181: LD_INT 1
1183: ST_TO_ADDR
// hc_sex := sex_male ;
1184: LD_ADDR_OWVAR 27
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1192: LD_ADDR_OWVAR 33
1196: PUSH
1197: LD_STRING SecondCharsGal
1199: ST_TO_ADDR
// hc_face_number := 56 ;
1200: LD_ADDR_OWVAR 34
1204: PUSH
1205: LD_INT 56
1207: ST_TO_ADDR
// hc_name := Mel Brennan ;
1208: LD_ADDR_OWVAR 26
1212: PUSH
1213: LD_STRING Mel Brennan
1215: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1216: LD_ADDR_OWVAR 29
1220: PUSH
1221: LD_INT 12
1223: PUSH
1224: LD_INT 11
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1231: LD_ADDR_OWVAR 30
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 0
1244: PUSH
1245: LD_INT 0
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1254: LD_ADDR_OWVAR 31
1258: PUSH
1259: LD_INT 2
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 1
1267: PUSH
1268: LD_INT 0
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: ST_TO_ADDR
// un = CreateHuman ;
1277: LD_ADDR_VAR 0 3
1281: PUSH
1282: CALL_OW 44
1286: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1287: LD_VAR 0 3
1291: PPUSH
1292: LD_INT 10
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: CALL_OW 49
// hc_class := 1 ;
1302: LD_ADDR_OWVAR 28
1306: PUSH
1307: LD_INT 1
1309: ST_TO_ADDR
// hc_sex := sex_male ;
1310: LD_ADDR_OWVAR 27
1314: PUSH
1315: LD_INT 1
1317: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1318: LD_ADDR_OWVAR 33
1322: PUSH
1323: LD_STRING AmGalRemake
1325: ST_TO_ADDR
// hc_face_number := 5 ;
1326: LD_ADDR_OWVAR 34
1330: PUSH
1331: LD_INT 5
1333: ST_TO_ADDR
// hc_name := Bob Joplin ;
1334: LD_ADDR_OWVAR 26
1338: PUSH
1339: LD_STRING Bob Joplin
1341: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1342: LD_ADDR_OWVAR 29
1346: PUSH
1347: LD_INT 10
1349: PUSH
1350: LD_INT 11
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1357: LD_ADDR_OWVAR 30
1361: PUSH
1362: LD_INT 0
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: LD_INT 0
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1380: LD_ADDR_OWVAR 31
1384: PUSH
1385: LD_INT 3
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// un = CreateHuman ;
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: CALL_OW 44
1412: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1413: LD_VAR 0 3
1417: PPUSH
1418: LD_INT 10
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
// hc_class := 3 ;
1428: LD_ADDR_OWVAR 28
1432: PUSH
1433: LD_INT 3
1435: ST_TO_ADDR
// hc_sex := sex_female ;
1436: LD_ADDR_OWVAR 27
1440: PUSH
1441: LD_INT 2
1443: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1444: LD_ADDR_OWVAR 33
1448: PUSH
1449: LD_STRING AmGalRemake
1451: ST_TO_ADDR
// hc_face_number := 4 ;
1452: LD_ADDR_OWVAR 34
1456: PUSH
1457: LD_INT 4
1459: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1460: LD_ADDR_OWVAR 26
1464: PUSH
1465: LD_STRING Elizabeth Whitney
1467: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1468: LD_ADDR_OWVAR 29
1472: PUSH
1473: LD_INT 9
1475: PUSH
1476: LD_INT 11
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1483: LD_ADDR_OWVAR 30
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 2
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1506: LD_ADDR_OWVAR 31
1510: PUSH
1511: LD_INT 2
1513: PUSH
1514: LD_INT 2
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: LD_INT 2
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: ST_TO_ADDR
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 3
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1539: LD_VAR 0 3
1543: PPUSH
1544: LD_INT 10
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL_OW 49
// InitHc ;
1554: CALL_OW 19
// end ;
1558: LD_VAR 0 1
1562: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1563: LD_INT 0
1565: PPUSH
1566: PPUSH
1567: PPUSH
// uc_nation = 1 ;
1568: LD_ADDR_OWVAR 21
1572: PUSH
1573: LD_INT 1
1575: ST_TO_ADDR
// uc_side = 1 ;
1576: LD_ADDR_OWVAR 20
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// hc_class := 1 ;
1584: LD_ADDR_OWVAR 28
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// hc_sex := sex_male ;
1592: LD_ADDR_OWVAR 27
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1600: LD_ADDR_OWVAR 33
1604: PUSH
1605: LD_STRING SecondCharsGal
1607: ST_TO_ADDR
// hc_face_number := 59 ;
1608: LD_ADDR_OWVAR 34
1612: PUSH
1613: LD_INT 59
1615: ST_TO_ADDR
// hc_name := Max Gray ;
1616: LD_ADDR_OWVAR 26
1620: PUSH
1621: LD_STRING Max Gray
1623: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1624: LD_ADDR_OWVAR 29
1628: PUSH
1629: LD_INT 9
1631: PUSH
1632: LD_INT 11
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1639: LD_ADDR_OWVAR 30
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1662: LD_ADDR_OWVAR 31
1666: PUSH
1667: LD_INT 2
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: LD_INT 1
1675: PUSH
1676: LD_INT 0
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// un = CreateHuman ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: CALL_OW 44
1694: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1695: LD_VAR 0 4
1699: PPUSH
1700: LD_INT 11
1702: PPUSH
1703: LD_INT 0
1705: PPUSH
1706: CALL_OW 49
// hc_class := 1 ;
1710: LD_ADDR_OWVAR 28
1714: PUSH
1715: LD_INT 1
1717: ST_TO_ADDR
// hc_sex := sex_male ;
1718: LD_ADDR_OWVAR 27
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1726: LD_ADDR_OWVAR 33
1730: PUSH
1731: LD_STRING SecondCharsGal
1733: ST_TO_ADDR
// hc_face_number := 54 ;
1734: LD_ADDR_OWVAR 34
1738: PUSH
1739: LD_INT 54
1741: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1742: LD_ADDR_OWVAR 26
1746: PUSH
1747: LD_STRING Luigi Ghbellin
1749: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1750: LD_ADDR_OWVAR 29
1754: PUSH
1755: LD_INT 11
1757: PUSH
1758: LD_INT 11
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1765: LD_ADDR_OWVAR 30
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 0
1775: PUSH
1776: LD_INT 0
1778: PUSH
1779: LD_INT 0
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1788: LD_ADDR_OWVAR 31
1792: PUSH
1793: LD_INT 1
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: ST_TO_ADDR
// un = CreateHuman ;
1811: LD_ADDR_VAR 0 4
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 11
1828: PPUSH
1829: LD_INT 0
1831: PPUSH
1832: CALL_OW 49
// hc_class := 3 ;
1836: LD_ADDR_OWVAR 28
1840: PUSH
1841: LD_INT 3
1843: ST_TO_ADDR
// hc_sex := sex_male ;
1844: LD_ADDR_OWVAR 27
1848: PUSH
1849: LD_INT 1
1851: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1852: LD_ADDR_OWVAR 33
1856: PUSH
1857: LD_STRING AmGalRemake
1859: ST_TO_ADDR
// hc_face_number := 6 ;
1860: LD_ADDR_OWVAR 34
1864: PUSH
1865: LD_INT 6
1867: ST_TO_ADDR
// hc_name := Leon Carter ;
1868: LD_ADDR_OWVAR 26
1872: PUSH
1873: LD_STRING Leon Carter
1875: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1876: LD_ADDR_OWVAR 29
1880: PUSH
1881: LD_INT 10
1883: PUSH
1884: LD_INT 9
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1891: LD_ADDR_OWVAR 30
1895: PUSH
1896: LD_INT 0
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 0
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1914: LD_ADDR_OWVAR 31
1918: PUSH
1919: LD_INT 0
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: LD_INT 3
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: ST_TO_ADDR
// un = CreateHuman ;
1937: LD_ADDR_VAR 0 4
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1947: LD_VAR 0 4
1951: PPUSH
1952: LD_INT 11
1954: PPUSH
1955: LD_INT 0
1957: PPUSH
1958: CALL_OW 49
// if count = 4 then
1962: LD_VAR 0 1
1966: PUSH
1967: LD_INT 4
1969: EQUAL
1970: IFFALSE 2098
// begin hc_class := 1 ;
1972: LD_ADDR_OWVAR 28
1976: PUSH
1977: LD_INT 1
1979: ST_TO_ADDR
// hc_sex := sex_male ;
1980: LD_ADDR_OWVAR 27
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1988: LD_ADDR_OWVAR 33
1992: PUSH
1993: LD_STRING SecondCharsGal
1995: ST_TO_ADDR
// hc_face_number := 34 ;
1996: LD_ADDR_OWVAR 34
2000: PUSH
2001: LD_INT 34
2003: ST_TO_ADDR
// hc_name := Ian Hill ;
2004: LD_ADDR_OWVAR 26
2008: PUSH
2009: LD_STRING Ian Hill
2011: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2012: LD_ADDR_OWVAR 29
2016: PUSH
2017: LD_INT 10
2019: PUSH
2020: LD_INT 12
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2027: LD_ADDR_OWVAR 30
2031: PUSH
2032: LD_INT 0
2034: PUSH
2035: LD_INT 0
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2050: LD_ADDR_OWVAR 31
2054: PUSH
2055: LD_INT 2
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 0
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: ST_TO_ADDR
// un = CreateHuman ;
2073: LD_ADDR_VAR 0 4
2077: PUSH
2078: CALL_OW 44
2082: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2083: LD_VAR 0 4
2087: PPUSH
2088: LD_INT 11
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
// end ; if count = 5 then
2098: LD_VAR 0 1
2102: PUSH
2103: LD_INT 5
2105: EQUAL
2106: IFFALSE 2360
// begin hc_class := 1 ;
2108: LD_ADDR_OWVAR 28
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// hc_sex := sex_male ;
2116: LD_ADDR_OWVAR 27
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2124: LD_ADDR_OWVAR 33
2128: PUSH
2129: LD_STRING SecondCharsGal
2131: ST_TO_ADDR
// hc_face_number := 34 ;
2132: LD_ADDR_OWVAR 34
2136: PUSH
2137: LD_INT 34
2139: ST_TO_ADDR
// hc_name := Ian Hill ;
2140: LD_ADDR_OWVAR 26
2144: PUSH
2145: LD_STRING Ian Hill
2147: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2148: LD_ADDR_OWVAR 29
2152: PUSH
2153: LD_INT 10
2155: PUSH
2156: LD_INT 12
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2163: LD_ADDR_OWVAR 30
2167: PUSH
2168: LD_INT 0
2170: PUSH
2171: LD_INT 0
2173: PUSH
2174: LD_INT 1
2176: PUSH
2177: LD_INT 0
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2186: LD_ADDR_OWVAR 31
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 0
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 0
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// un = CreateHuman ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: CALL_OW 44
2218: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2219: LD_VAR 0 4
2223: PPUSH
2224: LD_INT 11
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// hc_class := 1 ;
2234: LD_ADDR_OWVAR 28
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// hc_sex := sex_female ;
2242: LD_ADDR_OWVAR 27
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2250: LD_ADDR_OWVAR 33
2254: PUSH
2255: LD_STRING SecondCharsGal
2257: ST_TO_ADDR
// hc_face_number := 41 ;
2258: LD_ADDR_OWVAR 34
2262: PUSH
2263: LD_INT 41
2265: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2266: LD_ADDR_OWVAR 26
2270: PUSH
2271: LD_STRING Kate Wadsworth
2273: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2274: LD_ADDR_OWVAR 29
2278: PUSH
2279: LD_INT 9
2281: PUSH
2282: LD_INT 9
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2289: LD_ADDR_OWVAR 30
2293: PUSH
2294: LD_INT 0
2296: PUSH
2297: LD_INT 2
2299: PUSH
2300: LD_INT 0
2302: PUSH
2303: LD_INT 0
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2312: LD_ADDR_OWVAR 31
2316: PUSH
2317: LD_INT 2
2319: PUSH
2320: LD_INT 3
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// un = CreateHuman ;
2335: LD_ADDR_VAR 0 4
2339: PUSH
2340: CALL_OW 44
2344: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_INT 11
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2360: LD_INT 11
2362: PPUSH
2363: LD_INT 22
2365: PUSH
2366: LD_INT 1
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: LD_INT 21
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 26
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: PPUSH
2398: CALL_OW 70
2402: PUSH
2403: LD_INT 1
2405: ARRAY
2406: PPUSH
2407: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2411: LD_INT 11
2413: PPUSH
2414: LD_INT 22
2416: PUSH
2417: LD_INT 1
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 21
2426: PUSH
2427: LD_INT 1
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 26
2436: PUSH
2437: LD_INT 1
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: PUSH
2454: LD_INT 1
2456: ARRAY
2457: PPUSH
2458: LD_STRING D6-Sol3-1
2460: PPUSH
2461: CALL_OW 88
// end ; end_of_file
2465: LD_VAR 0 2
2469: RET
// export function PrepareRussianCommander ; begin
2470: LD_INT 0
2472: PPUSH
// uc_side = 3 ;
2473: LD_ADDR_OWVAR 20
2477: PUSH
2478: LD_INT 3
2480: ST_TO_ADDR
// uc_nation = 3 ;
2481: LD_ADDR_OWVAR 21
2485: PUSH
2486: LD_INT 3
2488: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2489: LD_ADDR_EXP 15
2493: PUSH
2494: LD_STRING Stolypin
2496: PPUSH
2497: CALL_OW 25
2501: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2502: LD_EXP 15
2506: PPUSH
2507: LD_INT 21
2509: PPUSH
2510: CALL_OW 52
// end ;
2514: LD_VAR 0 1
2518: RET
// export function PrepareRussianBase ; var i ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 22
2531: PPUSH
2532: LD_EXP 16
2536: PPUSH
2537: LD_EXP 17
2541: PPUSH
2542: CALL_OW 12
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2557: LD_INT 3
2559: PPUSH
2560: LD_INT 3
2562: PPUSH
2563: LD_INT 21
2565: PPUSH
2566: LD_EXP 16
2570: PPUSH
2571: LD_EXP 17
2575: PPUSH
2576: CALL_OW 12
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2591: LD_INT 3
2593: PPUSH
2594: LD_INT 3
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_EXP 16
2604: PPUSH
2605: LD_EXP 17
2609: PPUSH
2610: CALL_OW 12
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2625: LD_INT 3
2627: PPUSH
2628: LD_INT 3
2630: PPUSH
2631: LD_INT 24
2633: PPUSH
2634: LD_EXP 16
2638: PPUSH
2639: LD_EXP 17
2643: PPUSH
2644: CALL_OW 12
2648: PPUSH
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 6
2654: PPUSH
2655: CALL 3804 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: LD_INT 22
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: LD_INT 30
2676: PUSH
2677: LD_INT 32
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: PUSH
2693: FOR_IN
2694: IFFALSE 2734
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 3
2701: PPUSH
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_EXP 16
2711: PPUSH
2712: LD_EXP 17
2716: PPUSH
2717: CALL_OW 12
2721: PPUSH
2722: LD_INT 1
2724: PPUSH
2725: LD_INT 1
2727: PPUSH
2728: CALL 3804 0 6
2732: GO 2693
2734: POP
2735: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2736: LD_ADDR_VAR 0 2
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 30
2753: PUSH
2754: LD_INT 31
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: FOR_IN
2771: IFFALSE 2799
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_EXP 17
2782: PPUSH
2783: CALL_OW 12
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: CALL 3914 0 2
2797: GO 2770
2799: POP
2800: POP
// end ;
2801: LD_VAR 0 1
2805: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2806: LD_INT 0
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
// uc_side = 6 ;
2812: LD_ADDR_OWVAR 20
2816: PUSH
2817: LD_INT 6
2819: ST_TO_ADDR
// uc_nation = 3 ;
2820: LD_ADDR_OWVAR 21
2824: PUSH
2825: LD_INT 3
2827: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2828: LD_ADDR_VAR 0 2
2832: PUSH
2833: DOUBLE
2834: LD_INT 1
2836: DEC
2837: ST_TO_ADDR
2838: LD_INT 1
2840: PUSH
2841: LD_INT 2
2843: PUSH
2844: LD_INT 1
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 12
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PUSH
2866: FOR_TO
2867: IFFALSE 3027
// begin vc_engine = 1 ;
2869: LD_ADDR_OWVAR 39
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// vc_control = 1 ;
2877: LD_ADDR_OWVAR 38
2881: PUSH
2882: LD_INT 1
2884: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2885: LD_ADDR_OWVAR 40
2889: PUSH
2890: LD_INT 42
2892: PUSH
2893: LD_INT 42
2895: PUSH
2896: LD_INT 43
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: PUSH
2904: LD_OWVAR 67
2908: ARRAY
2909: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2910: LD_ADDR_OWVAR 37
2914: PUSH
2915: LD_INT 21
2917: PUSH
2918: LD_INT 22
2920: PUSH
2921: LD_INT 22
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PUSH
2929: LD_OWVAR 67
2933: ARRAY
2934: ST_TO_ADDR
// veh = CreateVehicle ;
2935: LD_ADDR_VAR 0 3
2939: PUSH
2940: CALL_OW 45
2944: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2945: LD_VAR 0 3
2949: PPUSH
2950: LD_INT 3
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 49
// hc_gallery =  ;
2960: LD_ADDR_OWVAR 33
2964: PUSH
2965: LD_STRING 
2967: ST_TO_ADDR
// hc_name =  ;
2968: LD_ADDR_OWVAR 26
2972: PUSH
2973: LD_STRING 
2975: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2976: LD_INT 0
2978: PPUSH
2979: LD_INT 3
2981: PPUSH
2982: LD_EXP 16
2986: PPUSH
2987: LD_EXP 17
2991: PPUSH
2992: CALL_OW 12
2996: PPUSH
2997: CALL_OW 380
// un = CreateHuman ;
3001: LD_ADDR_VAR 0 4
3005: PUSH
3006: CALL_OW 44
3010: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3011: LD_VAR 0 4
3015: PPUSH
3016: LD_VAR 0 3
3020: PPUSH
3021: CALL_OW 52
// end ;
3025: GO 2866
3027: POP
3028: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3029: LD_INT 0
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: LD_EXP 16
3039: PPUSH
3040: LD_EXP 17
3044: PPUSH
3045: CALL_OW 12
3049: PUSH
3050: LD_INT 2
3052: PLUS
3053: PPUSH
3054: CALL_OW 380
// un = CreateHuman ;
3058: LD_ADDR_VAR 0 4
3062: PUSH
3063: CALL_OW 44
3067: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3068: LD_VAR 0 4
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3083: LD_INT 0
3085: PPUSH
3086: LD_INT 4
3088: PPUSH
3089: LD_EXP 16
3093: PPUSH
3094: LD_EXP 17
3098: PPUSH
3099: CALL_OW 12
3103: PUSH
3104: LD_INT 2
3106: PLUS
3107: PPUSH
3108: CALL_OW 380
// un = CreateHuman ;
3112: LD_ADDR_VAR 0 4
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3122: LD_VAR 0 4
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3137: LD_ADDR_VAR 0 2
3141: PUSH
3142: DOUBLE
3143: LD_INT 1
3145: DEC
3146: ST_TO_ADDR
3147: LD_INT 2
3149: PUSH
3150: LD_INT 3
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: PUSH
3161: LD_OWVAR 67
3165: ARRAY
3166: PUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_INT 3
3172: PPUSH
3173: CALL_OW 12
3177: PLUS
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3250
// begin hc_gallery =  ;
3182: LD_ADDR_OWVAR 33
3186: PUSH
3187: LD_STRING 
3189: ST_TO_ADDR
// hc_name =  ;
3190: LD_ADDR_OWVAR 26
3194: PUSH
3195: LD_STRING 
3197: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 1
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: LD_EXP 17
3213: PPUSH
3214: CALL_OW 12
3218: PPUSH
3219: CALL_OW 380
// un = CreateHuman ;
3223: LD_ADDR_VAR 0 4
3227: PUSH
3228: CALL_OW 44
3232: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3233: LD_VAR 0 4
3237: PPUSH
3238: LD_INT 3
3240: PPUSH
3241: LD_INT 0
3243: PPUSH
3244: CALL_OW 49
// end ;
3248: GO 3179
3250: POP
3251: POP
// vc_engine = 1 ;
3252: LD_ADDR_OWVAR 39
3256: PUSH
3257: LD_INT 1
3259: ST_TO_ADDR
// vc_control = 1 ;
3260: LD_ADDR_OWVAR 38
3264: PUSH
3265: LD_INT 1
3267: ST_TO_ADDR
// vc_weapon = 51 ;
3268: LD_ADDR_OWVAR 40
3272: PUSH
3273: LD_INT 51
3275: ST_TO_ADDR
// vc_chassis = 22 ;
3276: LD_ADDR_OWVAR 37
3280: PUSH
3281: LD_INT 22
3283: ST_TO_ADDR
// veh = CreateVehicle ;
3284: LD_ADDR_VAR 0 3
3288: PUSH
3289: CALL_OW 45
3293: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3294: LD_VAR 0 3
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3309: LD_VAR 0 3
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 100
3319: PPUSH
3320: CALL_OW 290
// hc_gallery =  ;
3324: LD_ADDR_OWVAR 33
3328: PUSH
3329: LD_STRING 
3331: ST_TO_ADDR
// hc_name =  ;
3332: LD_ADDR_OWVAR 26
3336: PUSH
3337: LD_STRING 
3339: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3340: LD_INT 0
3342: PPUSH
3343: LD_INT 3
3345: PPUSH
3346: LD_EXP 16
3350: PPUSH
3351: LD_EXP 17
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: CALL_OW 380
// un = CreateHuman ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3375: LD_VAR 0 4
3379: PPUSH
3380: LD_VAR 0 3
3384: PPUSH
3385: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3389: LD_ADDR_VAR 0 2
3393: PUSH
3394: LD_INT 22
3396: PUSH
3397: LD_INT 6
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: LD_INT 3
3409: PUSH
3410: LD_INT 25
3412: PUSH
3413: LD_INT 2
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: LD_INT 25
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: LIST
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 69
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3475
// ComAgressiveMove ( i , 45 , 46 ) ;
3458: LD_VAR 0 2
3462: PPUSH
3463: LD_INT 45
3465: PPUSH
3466: LD_INT 46
3468: PPUSH
3469: CALL_OW 114
3473: GO 3455
3475: POP
3476: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_INT 22
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 25
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: PUSH
3511: FOR_IN
3512: IFFALSE 3543
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3514: LD_ADDR_EXP 21
3518: PUSH
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 48
3529: PPUSH
3530: LD_INT 55
3532: PPUSH
3533: LD_INT 5
3535: PPUSH
3536: CALL_OW 145
3540: ST_TO_ADDR
3541: GO 3511
3543: POP
3544: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: LD_INT 22
3552: PUSH
3553: LD_INT 6
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 25
3562: PUSH
3563: LD_INT 4
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PPUSH
3574: CALL_OW 69
3578: PUSH
3579: FOR_IN
3580: IFFALSE 3599
// ComMoveXY ( i , 39 , 55 ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_INT 39
3589: PPUSH
3590: LD_INT 55
3592: PPUSH
3593: CALL_OW 111
3597: GO 3579
3599: POP
3600: POP
// end ;
3601: LD_VAR 0 1
3605: RET
// export function PrepareFirstAttack ; var i , un ; begin
3606: LD_INT 0
3608: PPUSH
3609: PPUSH
3610: PPUSH
// uc_side = 5 ;
3611: LD_ADDR_OWVAR 20
3615: PUSH
3616: LD_INT 5
3618: ST_TO_ADDR
// uc_nation = 3 ;
3619: LD_ADDR_OWVAR 21
3623: PUSH
3624: LD_INT 3
3626: ST_TO_ADDR
// for i := 1 to 4 do
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: DOUBLE
3633: LD_INT 1
3635: DEC
3636: ST_TO_ADDR
3637: LD_INT 4
3639: PUSH
3640: FOR_TO
3641: IFFALSE 3726
// begin hc_gallery =  ;
3643: LD_ADDR_OWVAR 33
3647: PUSH
3648: LD_STRING 
3650: ST_TO_ADDR
// hc_name =  ;
3651: LD_ADDR_OWVAR 26
3655: PUSH
3656: LD_STRING 
3658: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3659: LD_INT 0
3661: PPUSH
3662: LD_INT 1
3664: PPUSH
3665: LD_EXP 16
3669: PPUSH
3670: LD_EXP 17
3674: PPUSH
3675: CALL_OW 12
3679: PPUSH
3680: CALL_OW 380
// un = CreateHuman ;
3684: LD_ADDR_VAR 0 3
3688: PUSH
3689: CALL_OW 44
3693: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_INT 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_INT 48
3716: PPUSH
3717: LD_INT 14
3719: PPUSH
3720: CALL_OW 114
// end ;
3724: GO 3640
3726: POP
3727: POP
// firstRussianAttack = 1 ;
3728: LD_ADDR_EXP 23
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// end ; end_of_file
3736: LD_VAR 0 1
3740: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
// if exist_mode then
3745: LD_VAR 0 2
3749: IFFALSE 3774
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_EXP 45
3760: PUSH
3761: LD_VAR 0 1
3765: STR
3766: PPUSH
3767: CALL_OW 34
3771: ST_TO_ADDR
// end else
3772: GO 3789
// begin unit := NewCharacter ( ident ) ;
3774: LD_ADDR_VAR 0 4
3778: PUSH
3779: LD_VAR 0 1
3783: PPUSH
3784: CALL_OW 25
3788: ST_TO_ADDR
// end ; result := unit ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_VAR 0 4
3798: ST_TO_ADDR
// end ;
3799: LD_VAR 0 3
3803: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
// for i = 1 to count do
3810: LD_ADDR_VAR 0 8
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_VAR 0 6
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3907
// begin uc_side = side ;
3828: LD_ADDR_OWVAR 20
3832: PUSH
3833: LD_VAR 0 1
3837: ST_TO_ADDR
// uc_nation = nation ;
3838: LD_ADDR_OWVAR 21
3842: PUSH
3843: LD_VAR 0 2
3847: ST_TO_ADDR
// hc_gallery =  ;
3848: LD_ADDR_OWVAR 33
3852: PUSH
3853: LD_STRING 
3855: ST_TO_ADDR
// hc_name =  ;
3856: LD_ADDR_OWVAR 26
3860: PUSH
3861: LD_STRING 
3863: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3864: LD_INT 0
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: CALL_OW 380
// un = CreateHuman ;
3881: LD_ADDR_VAR 0 10
3885: PUSH
3886: CALL_OW 44
3890: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3891: LD_VAR 0 10
3895: PPUSH
3896: LD_VAR 0 3
3900: PPUSH
3901: CALL_OW 52
// end ;
3905: GO 3825
3907: POP
3908: POP
// end ;
3909: LD_VAR 0 7
3913: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
// uc_side := GetSide ( b ) ;
3919: LD_ADDR_OWVAR 20
3923: PUSH
3924: LD_VAR 0 2
3928: PPUSH
3929: CALL_OW 255
3933: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3934: LD_ADDR_OWVAR 21
3938: PUSH
3939: LD_VAR 0 2
3943: PPUSH
3944: CALL_OW 248
3948: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3949: LD_INT 0
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 380
// un = CreateHuman ;
3964: LD_ADDR_VAR 0 4
3968: PUSH
3969: CALL_OW 44
3973: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3974: LD_ADDR_VAR 0 5
3978: PUSH
3979: LD_VAR 0 2
3983: PPUSH
3984: CALL_OW 254
3988: PUSH
3989: LD_INT 3
3991: MINUS
3992: ST_TO_ADDR
// if dir < 0 then
3993: LD_VAR 0 5
3997: PUSH
3998: LD_INT 0
4000: LESS
4001: IFFALSE 4017
// dir := 6 + dir ;
4003: LD_ADDR_VAR 0 5
4007: PUSH
4008: LD_INT 6
4010: PUSH
4011: LD_VAR 0 5
4015: PLUS
4016: ST_TO_ADDR
// SetDir ( un , dir ) ;
4017: LD_VAR 0 4
4021: PPUSH
4022: LD_VAR 0 5
4026: PPUSH
4027: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4031: LD_VAR 0 4
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: CALL_OW 52
// end ;
4045: LD_VAR 0 3
4049: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4050: LD_INT 0
4052: PPUSH
4053: PPUSH
4054: PPUSH
// rnd = rand ( 1 , characters ) ;
4055: LD_ADDR_VAR 0 6
4059: PUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 12
4072: ST_TO_ADDR
// for i = 1 to characters do
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: DOUBLE
4079: LD_INT 1
4081: DEC
4082: ST_TO_ADDR
4083: LD_VAR 0 1
4087: PUSH
4088: FOR_TO
4089: IFFALSE 4199
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4091: LD_VAR 0 5
4095: PUSH
4096: LD_VAR 0 6
4100: EQUAL
4101: PUSH
4102: LD_VAR 0 1
4106: PUSH
4107: LD_VAR 0 5
4111: ARRAY
4112: PPUSH
4113: CALL_OW 258
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4144
// Say ( characters [ i ] , dialogMID ) ;
4124: LD_VAR 0 1
4128: PUSH
4129: LD_VAR 0 5
4133: ARRAY
4134: PPUSH
4135: LD_VAR 0 2
4139: PPUSH
4140: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4144: LD_VAR 0 5
4148: PUSH
4149: LD_VAR 0 6
4153: EQUAL
4154: PUSH
4155: LD_VAR 0 1
4159: PUSH
4160: LD_VAR 0 5
4164: ARRAY
4165: PPUSH
4166: CALL_OW 258
4170: PUSH
4171: LD_INT 2
4173: EQUAL
4174: AND
4175: IFFALSE 4197
// Say ( characters [ i ] , dialogFID ) ;
4177: LD_VAR 0 1
4181: PUSH
4182: LD_VAR 0 5
4186: ARRAY
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: CALL_OW 88
// end ;
4197: GO 4088
4199: POP
4200: POP
// end ;
4201: LD_VAR 0 4
4205: RET
// export function PrepareDifficulty ; var tmp ; begin
4206: LD_INT 0
4208: PPUSH
4209: PPUSH
// if Difficulty = 1 then
4210: LD_OWVAR 67
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: IFFALSE 4236
// begin RuSoldMinLevel = 0 ;
4220: LD_ADDR_EXP 16
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4228: LD_ADDR_EXP 17
4232: PUSH
4233: LD_INT 2
4235: ST_TO_ADDR
// end ; if Difficulty = 2 then
4236: LD_OWVAR 67
4240: PUSH
4241: LD_INT 2
4243: EQUAL
4244: IFFALSE 4352
// begin RuSoldMinLevel = 1 ;
4246: LD_ADDR_EXP 16
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4254: LD_ADDR_EXP 17
4258: PUSH
4259: LD_INT 2
4261: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4262: LD_INT 14
4264: PPUSH
4265: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4269: LD_INT 23
4271: PPUSH
4272: CALL_OW 64
// uc_nation = 3 ;
4276: LD_ADDR_OWVAR 21
4280: PUSH
4281: LD_INT 3
4283: ST_TO_ADDR
// uc_side = 3 ;
4284: LD_ADDR_OWVAR 20
4288: PUSH
4289: LD_INT 3
4291: ST_TO_ADDR
// bc_level = 5 ;
4292: LD_ADDR_OWVAR 43
4296: PUSH
4297: LD_INT 5
4299: ST_TO_ADDR
// bc_type = 32 ;
4300: LD_ADDR_OWVAR 42
4304: PUSH
4305: LD_INT 32
4307: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4308: LD_ADDR_VAR 0 2
4312: PUSH
4313: LD_INT 76
4315: PPUSH
4316: LD_INT 91
4318: PPUSH
4319: LD_INT 2
4321: PPUSH
4322: CALL_OW 47
4326: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4327: LD_VAR 0 2
4331: PPUSH
4332: LD_INT 43
4334: PPUSH
4335: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4339: LD_INT 51
4341: PPUSH
4342: LD_INT 3
4344: PPUSH
4345: LD_INT 1
4347: PPUSH
4348: CALL_OW 322
// end ; if Difficulty = 3 then
4352: LD_OWVAR 67
4356: PUSH
4357: LD_INT 3
4359: EQUAL
4360: IFFALSE 4536
// begin RuSoldMinLevel = 1 ;
4362: LD_ADDR_EXP 16
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4370: LD_ADDR_EXP 17
4374: PUSH
4375: LD_INT 3
4377: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4378: LD_INT 13
4380: PPUSH
4381: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4385: LD_INT 14
4387: PPUSH
4388: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4392: LD_INT 26
4394: PPUSH
4395: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4399: LD_INT 23
4401: PPUSH
4402: CALL_OW 64
// uc_nation = 3 ;
4406: LD_ADDR_OWVAR 21
4410: PUSH
4411: LD_INT 3
4413: ST_TO_ADDR
// uc_side = 3 ;
4414: LD_ADDR_OWVAR 20
4418: PUSH
4419: LD_INT 3
4421: ST_TO_ADDR
// bc_level = 5 ;
4422: LD_ADDR_OWVAR 43
4426: PUSH
4427: LD_INT 5
4429: ST_TO_ADDR
// bc_type = 32 ;
4430: LD_ADDR_OWVAR 42
4434: PUSH
4435: LD_INT 32
4437: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: LD_INT 76
4445: PPUSH
4446: LD_INT 91
4448: PPUSH
4449: LD_INT 2
4451: PPUSH
4452: CALL_OW 47
4456: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4457: LD_VAR 0 2
4461: PPUSH
4462: LD_INT 44
4464: PPUSH
4465: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4469: LD_ADDR_VAR 0 2
4473: PUSH
4474: LD_INT 83
4476: PPUSH
4477: LD_INT 84
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: CALL_OW 47
4487: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 43
4495: PPUSH
4496: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4500: LD_INT 51
4502: PPUSH
4503: LD_INT 3
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4513: LD_INT 52
4515: PPUSH
4516: LD_INT 3
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4526: LD_INT 25
4528: PPUSH
4529: LD_INT 44
4531: PPUSH
4532: CALL_OW 431
// end ; end ;
4536: LD_VAR 0 1
4540: RET
// export function EnergyDialog ; begin
4541: LD_INT 0
4543: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4544: LD_INT 46
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: CALL_OW 321
4554: PUSH
4555: LD_INT 1
4557: EQUAL
4558: PUSH
4559: LD_INT 35
4561: PPUSH
4562: LD_INT 1
4564: PPUSH
4565: CALL_OW 321
4569: PUSH
4570: LD_INT 1
4572: EQUAL
4573: AND
4574: IFFALSE 4598
// begin Say ( JMM , D9c-JMM-1 ) ;
4576: LD_EXP 1
4580: PPUSH
4581: LD_STRING D9c-JMM-1
4583: PPUSH
4584: CALL_OW 88
// energyVDialog = 1 ;
4588: LD_ADDR_EXP 33
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// end else
4596: GO 4752
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4598: LD_INT 35
4600: PPUSH
4601: LD_INT 1
4603: PPUSH
4604: CALL_OW 321
4608: PUSH
4609: LD_INT 2
4611: EQUAL
4612: PUSH
4613: LD_EXP 33
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: AND
4622: IFFALSE 4644
// begin Say ( JMM , D9c-JMM-1a ) ;
4624: LD_EXP 1
4628: PPUSH
4629: LD_STRING D9c-JMM-1a
4631: PPUSH
4632: CALL_OW 88
// energyVDialog = 1 ;
4636: LD_ADDR_EXP 33
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4644: LD_INT 46
4646: PPUSH
4647: LD_INT 1
4649: PPUSH
4650: CALL_OW 321
4654: PUSH
4655: LD_INT 2
4657: EQUAL
4658: PUSH
4659: LD_EXP 33
4663: PUSH
4664: LD_INT 0
4666: EQUAL
4667: AND
4668: IFFALSE 4690
// begin Say ( JMM , D9c-JMM-1b ) ;
4670: LD_EXP 1
4674: PPUSH
4675: LD_STRING D9c-JMM-1b
4677: PPUSH
4678: CALL_OW 88
// energyVDialog = 1 ;
4682: LD_ADDR_EXP 33
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4690: LD_INT 46
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 321
4700: PUSH
4701: LD_INT 2
4703: EQUAL
4704: PUSH
4705: LD_INT 21
4707: PPUSH
4708: LD_INT 1
4710: PPUSH
4711: CALL_OW 321
4715: PUSH
4716: LD_INT 2
4718: EQUAL
4719: AND
4720: PUSH
4721: LD_EXP 33
4725: PUSH
4726: LD_INT 0
4728: EQUAL
4729: AND
4730: IFFALSE 4752
// begin Say ( JMM , D9c-JMM-1c ) ;
4732: LD_EXP 1
4736: PPUSH
4737: LD_STRING D9c-JMM-1c
4739: PPUSH
4740: CALL_OW 88
// energyVDialog = 1 ;
4744: LD_ADDR_EXP 33
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// end ; end ; end ;
4752: LD_VAR 0 1
4756: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4757: LD_INT 0
4759: PPUSH
4760: PPUSH
4761: PPUSH
4762: PPUSH
4763: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4764: LD_VAR 0 1
4768: NOT
4769: PUSH
4770: LD_VAR 0 1
4774: PPUSH
4775: CALL_OW 256
4779: PUSH
4780: LD_INT 250
4782: LESS
4783: OR
4784: PUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: CALL_OW 314
4794: PUSH
4795: LD_VAR 0 1
4799: PPUSH
4800: CALL_OW 261
4804: PUSH
4805: LD_INT 20
4807: GREATER
4808: AND
4809: OR
4810: IFFALSE 4814
// exit ;
4812: GO 5179
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4814: LD_VAR 0 1
4818: PPUSH
4819: CALL_OW 261
4823: PUSH
4824: LD_INT 20
4826: LESS
4827: PUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: CALL_OW 110
4837: PUSH
4838: LD_INT 21
4840: EQUAL
4841: NOT
4842: AND
4843: IFFALSE 4870
// begin ComStop ( bulldozer ) ;
4845: LD_VAR 0 1
4849: PPUSH
4850: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4854: LD_VAR 0 1
4858: PPUSH
4859: LD_INT 21
4861: PPUSH
4862: CALL_OW 109
// exit ;
4866: GO 5179
// end else
4868: GO 4897
// if GetFuel ( bulldozer ) > 20 then
4870: LD_VAR 0 1
4874: PPUSH
4875: CALL_OW 261
4879: PUSH
4880: LD_INT 20
4882: GREATER
4883: IFFALSE 4897
// SetTag ( bulldozer , 0 ) ;
4885: LD_VAR 0 1
4889: PPUSH
4890: LD_INT 0
4892: PPUSH
4893: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4897: LD_ADDR_VAR 0 5
4901: PUSH
4902: LD_VAR 0 2
4906: PPUSH
4907: CALL_OW 353
4911: ST_TO_ADDR
// tmp := [ ] ;
4912: LD_ADDR_VAR 0 6
4916: PUSH
4917: EMPTY
4918: ST_TO_ADDR
// for i = 1 to list do
4919: LD_ADDR_VAR 0 4
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_VAR 0 5
4933: PUSH
4934: FOR_TO
4935: IFFALSE 5033
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4937: LD_VAR 0 5
4941: PUSH
4942: LD_VAR 0 4
4946: ARRAY
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: LD_VAR 0 5
4956: PUSH
4957: LD_VAR 0 4
4961: ARRAY
4962: PUSH
4963: LD_INT 2
4965: ARRAY
4966: PPUSH
4967: CALL_OW 554
4971: IFFALSE 5031
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_VAR 0 6
4982: PPUSH
4983: LD_VAR 0 6
4987: PUSH
4988: LD_INT 1
4990: PLUS
4991: PPUSH
4992: LD_VAR 0 5
4996: PUSH
4997: LD_VAR 0 4
5001: ARRAY
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_VAR 0 5
5011: PUSH
5012: LD_VAR 0 4
5016: ARRAY
5017: PUSH
5018: LD_INT 2
5020: ARRAY
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 1
5030: ST_TO_ADDR
// end ;
5031: GO 4934
5033: POP
5034: POP
// ComStop ( bulldozer ) ;
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5044: LD_ADDR_VAR 0 7
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 250
5058: PUSH
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 251
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// for i = tmp downto 1 do
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: DOUBLE
5079: LD_VAR 0 6
5083: INC
5084: ST_TO_ADDR
5085: LD_INT 1
5087: PUSH
5088: FOR_DOWNTO
5089: IFFALSE 5177
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5091: LD_ADDR_VAR 0 7
5095: PUSH
5096: LD_VAR 0 7
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: LD_VAR 0 7
5109: PUSH
5110: LD_INT 2
5112: ARRAY
5113: PPUSH
5114: LD_VAR 0 6
5118: PPUSH
5119: CALL 5280 0 3
5123: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5124: LD_VAR 0 1
5128: PPUSH
5129: LD_VAR 0 7
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: CALL 5184 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5151: LD_ADDR_VAR 0 6
5155: PUSH
5156: LD_VAR 0 6
5160: PPUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_INT 3
5168: ARRAY
5169: PPUSH
5170: CALL_OW 3
5174: ST_TO_ADDR
// end ;
5175: GO 5088
5177: POP
5178: POP
// end ;
5179: LD_VAR 0 3
5183: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5184: LD_INT 0
5186: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_VAR 0 3
5196: PPUSH
5197: CALL_OW 351
5201: PUSH
5202: LD_VAR 0 2
5206: PPUSH
5207: LD_VAR 0 3
5211: PPUSH
5212: CALL_OW 554
5216: AND
5217: PUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 3
5227: PPUSH
5228: CALL_OW 488
5232: AND
5233: PUSH
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_VAR 0 3
5243: PPUSH
5244: CALL_OW 428
5248: PUSH
5249: LD_INT 1
5251: NEG
5252: EQUAL
5253: AND
5254: IFFALSE 5275
// AddComMoveXY ( bulldozer , x , y ) ;
5256: LD_VAR 0 1
5260: PPUSH
5261: LD_VAR 0 2
5265: PPUSH
5266: LD_VAR 0 3
5270: PPUSH
5271: CALL_OW 171
// end ;
5275: LD_VAR 0 4
5279: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
5288: PPUSH
// dist := 99999 ;
5289: LD_ADDR_VAR 0 6
5293: PUSH
5294: LD_INT 99999
5296: ST_TO_ADDR
// for i = 1 to list do
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: DOUBLE
5303: LD_INT 1
5305: DEC
5306: ST_TO_ADDR
5307: LD_VAR 0 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5451
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5315: LD_ADDR_VAR 0 7
5319: PUSH
5320: LD_VAR 0 1
5324: PPUSH
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PUSH
5341: LD_INT 1
5343: ARRAY
5344: PPUSH
5345: LD_VAR 0 3
5349: PUSH
5350: LD_VAR 0 5
5354: ARRAY
5355: PUSH
5356: LD_INT 2
5358: ARRAY
5359: PPUSH
5360: CALL_OW 298
5364: ST_TO_ADDR
// if d = 0 then
5365: LD_VAR 0 7
5369: PUSH
5370: LD_INT 0
5372: EQUAL
5373: IFFALSE 5377
// continue ;
5375: GO 5312
// if d < dist then
5377: LD_VAR 0 7
5381: PUSH
5382: LD_VAR 0 6
5386: LESS
5387: IFFALSE 5449
// begin _x := list [ i ] [ 1 ] ;
5389: LD_ADDR_VAR 0 8
5393: PUSH
5394: LD_VAR 0 3
5398: PUSH
5399: LD_VAR 0 5
5403: ARRAY
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5409: LD_ADDR_VAR 0 9
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: LD_VAR 0 5
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: ST_TO_ADDR
// _i := i ;
5429: LD_ADDR_VAR 0 10
5433: PUSH
5434: LD_VAR 0 5
5438: ST_TO_ADDR
// dist := d ;
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_VAR 0 7
5448: ST_TO_ADDR
// end ; end ;
5449: GO 5312
5451: POP
5452: POP
// result := [ _x , _y , _i , dist ] ;
5453: LD_ADDR_VAR 0 4
5457: PUSH
5458: LD_VAR 0 8
5462: PUSH
5463: LD_VAR 0 9
5467: PUSH
5468: LD_VAR 0 10
5472: PUSH
5473: LD_VAR 0 6
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: ST_TO_ADDR
// end ;
5484: LD_VAR 0 4
5488: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5489: LD_INT 0
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
// for i = 1 to 72 do
5495: LD_ADDR_VAR 0 5
5499: PUSH
5500: DOUBLE
5501: LD_INT 1
5503: DEC
5504: ST_TO_ADDR
5505: LD_INT 72
5507: PUSH
5508: FOR_TO
5509: IFFALSE 5567
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5511: LD_VAR 0 5
5515: PPUSH
5516: LD_VAR 0 1
5520: PPUSH
5521: CALL_OW 321
5525: PUSH
5526: LD_INT 1
5528: EQUAL
5529: PUSH
5530: LD_VAR 0 5
5534: PPUSH
5535: LD_VAR 0 3
5539: PPUSH
5540: CALL_OW 482
5544: PUSH
5545: LD_INT 1
5547: EQUAL
5548: AND
5549: IFFALSE 5565
// AddComResearch ( lab , i ) ;
5551: LD_VAR 0 2
5555: PPUSH
5556: LD_VAR 0 5
5560: PPUSH
5561: CALL_OW 184
5565: GO 5508
5567: POP
5568: POP
// end ;
5569: LD_VAR 0 4
5573: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5574: LD_INT 0
5576: PPUSH
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Stolypin ] ;
5582: LD_ADDR_VAR 0 7
5586: PUSH
5587: LD_VAR 0 2
5591: PPUSH
5592: CALL_OW 313
5596: PUSH
5597: LD_EXP 15
5601: PUSH
5602: EMPTY
5603: LIST
5604: DIFF
5605: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5606: LD_ADDR_VAR 0 8
5610: PUSH
5611: LD_VAR 0 3
5615: PPUSH
5616: LD_INT 22
5618: PUSH
5619: LD_VAR 0 1
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 25
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: LD_INT 1000
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 70
5657: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5658: LD_ADDR_VAR 0 5
5662: PUSH
5663: LD_VAR 0 3
5667: PPUSH
5668: LD_INT 22
5670: PUSH
5671: LD_VAR 0 1
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: LD_INT 3
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 3
5692: PUSH
5693: LD_INT 24
5695: PUSH
5696: LD_INT 1000
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: PPUSH
5715: CALL_OW 70
5719: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
5720: LD_VAR 0 5
5724: NOT
5725: PUSH
5726: LD_VAR 0 8
5730: NOT
5731: AND
5732: IFFALSE 5736
// exit ;
5734: GO 5895
// if buildings_list > 0 and engineerOkInside > 0 then
5736: LD_VAR 0 5
5740: PUSH
5741: LD_INT 0
5743: GREATER
5744: PUSH
5745: LD_VAR 0 7
5749: PUSH
5750: LD_INT 0
5752: GREATER
5753: AND
5754: IFFALSE 5782
// for i in engineerOkInside do
5756: LD_ADDR_VAR 0 6
5760: PUSH
5761: LD_VAR 0 7
5765: PUSH
5766: FOR_IN
5767: IFFALSE 5780
// ComExitBuilding ( i ) ;
5769: LD_VAR 0 6
5773: PPUSH
5774: CALL_OW 122
5778: GO 5766
5780: POP
5781: POP
// if engineerOkOutside > 0 then
5782: LD_VAR 0 8
5786: PUSH
5787: LD_INT 0
5789: GREATER
5790: IFFALSE 5844
// begin for i in engineerOkOutside do
5792: LD_ADDR_VAR 0 6
5796: PUSH
5797: LD_VAR 0 8
5801: PUSH
5802: FOR_IN
5803: IFFALSE 5842
// for j in buildings_list do
5805: LD_ADDR_VAR 0 9
5809: PUSH
5810: LD_VAR 0 5
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5838
// ComRepairBuilding ( i , j [ 1 ] ) ;
5818: LD_VAR 0 6
5822: PPUSH
5823: LD_VAR 0 9
5827: PUSH
5828: LD_INT 1
5830: ARRAY
5831: PPUSH
5832: CALL_OW 130
5836: GO 5815
5838: POP
5839: POP
5840: GO 5802
5842: POP
5843: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
5844: LD_VAR 0 5
5848: PUSH
5849: LD_INT 0
5851: EQUAL
5852: PUSH
5853: LD_VAR 0 8
5857: PUSH
5858: LD_INT 0
5860: GREATER
5861: AND
5862: IFFALSE 5895
// for i in engineerOkOutside do
5864: LD_ADDR_VAR 0 6
5868: PUSH
5869: LD_VAR 0 8
5873: PUSH
5874: FOR_IN
5875: IFFALSE 5893
// ComEnterUnit ( i , building ) ;
5877: LD_VAR 0 6
5881: PPUSH
5882: LD_VAR 0 2
5886: PPUSH
5887: CALL_OW 120
5891: GO 5874
5893: POP
5894: POP
// end ;
5895: LD_VAR 0 4
5899: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal ; begin
5900: LD_INT 0
5902: PPUSH
5903: PPUSH
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: LD_INT 22
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 25
5928: PUSH
5929: LD_INT 4
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 24
5938: PUSH
5939: LD_INT 251
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
5956: LD_ADDR_VAR 0 7
5960: PUSH
5961: LD_VAR 0 3
5965: PPUSH
5966: LD_INT 22
5968: PUSH
5969: LD_VAR 0 1
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 25
5980: PUSH
5981: LD_INT 4
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 50
5990: PUSH
5991: EMPTY
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 70
6003: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6004: LD_ADDR_VAR 0 10
6008: PUSH
6009: LD_VAR 0 3
6013: PPUSH
6014: LD_INT 22
6016: PUSH
6017: LD_VAR 0 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 1
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: LD_INT 24
6041: PUSH
6042: LD_INT 750
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: LIST
6057: PPUSH
6058: CALL_OW 70
6062: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6063: LD_ADDR_VAR 0 11
6067: PUSH
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 22
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 21
6087: PUSH
6088: LD_INT 1
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: LD_INT 24
6100: PUSH
6101: LD_INT 1000
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: PPUSH
6117: CALL_OW 70
6121: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
6122: LD_VAR 0 10
6126: NOT
6127: PUSH
6128: LD_VAR 0 7
6132: NOT
6133: AND
6134: PUSH
6135: LD_VAR 0 11
6139: NOT
6140: AND
6141: IFFALSE 6145
// exit ;
6143: GO 6334
// if damageUnits > 0 and sci_list > 0 then
6145: LD_VAR 0 10
6149: PUSH
6150: LD_INT 0
6152: GREATER
6153: PUSH
6154: LD_VAR 0 6
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: AND
6163: IFFALSE 6196
// for i in damageUnits do
6165: LD_ADDR_VAR 0 8
6169: PUSH
6170: LD_VAR 0 10
6174: PUSH
6175: FOR_IN
6176: IFFALSE 6194
// ComMoveToArea ( i , healArea ) ;
6178: LD_VAR 0 8
6182: PPUSH
6183: LD_VAR 0 2
6187: PPUSH
6188: CALL_OW 113
6192: GO 6175
6194: POP
6195: POP
// if unitsToHeal > 0 and sci_list > 0 then
6196: LD_VAR 0 11
6200: PUSH
6201: LD_INT 0
6203: GREATER
6204: PUSH
6205: LD_VAR 0 6
6209: PUSH
6210: LD_INT 0
6212: GREATER
6213: AND
6214: IFFALSE 6273
// begin for i in sci_list do
6216: LD_ADDR_VAR 0 8
6220: PUSH
6221: LD_VAR 0 6
6225: PUSH
6226: FOR_IN
6227: IFFALSE 6271
// begin ComExitBuilding ( i ) ;
6229: LD_VAR 0 8
6233: PPUSH
6234: CALL_OW 122
// for j in unitsToHeal do
6238: LD_ADDR_VAR 0 9
6242: PUSH
6243: LD_VAR 0 11
6247: PUSH
6248: FOR_IN
6249: IFFALSE 6267
// AddComHeal ( i , j ) ;
6251: LD_VAR 0 8
6255: PPUSH
6256: LD_VAR 0 9
6260: PPUSH
6261: CALL_OW 188
6265: GO 6248
6267: POP
6268: POP
// end ;
6269: GO 6226
6271: POP
6272: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6273: LD_VAR 0 10
6277: PUSH
6278: LD_INT 0
6280: EQUAL
6281: PUSH
6282: LD_VAR 0 11
6286: PUSH
6287: LD_INT 0
6289: EQUAL
6290: AND
6291: PUSH
6292: LD_VAR 0 7
6296: PUSH
6297: LD_INT 0
6299: GREATER
6300: AND
6301: IFFALSE 6334
// for i in sci_listOutside do
6303: LD_ADDR_VAR 0 8
6307: PUSH
6308: LD_VAR 0 7
6312: PUSH
6313: FOR_IN
6314: IFFALSE 6332
// ComEnterUnit ( i , build ) ;
6316: LD_VAR 0 8
6320: PPUSH
6321: LD_VAR 0 4
6325: PPUSH
6326: CALL_OW 120
6330: GO 6313
6332: POP
6333: POP
// end ;
6334: LD_VAR 0 5
6338: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6339: LD_INT 0
6341: PPUSH
6342: PPUSH
6343: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6344: LD_INT 22
6346: PUSH
6347: LD_VAR 0 1
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 21
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PPUSH
6370: CALL_OW 69
6374: PUSH
6375: LD_VAR 0 3
6379: LESSEQUAL
6380: IFFALSE 6488
// begin for i = 1 to vehCount do
6382: LD_ADDR_VAR 0 9
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_VAR 0 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6486
// begin weapon = weaponTab [ i ] ;
6400: LD_ADDR_VAR 0 10
6404: PUSH
6405: LD_VAR 0 4
6409: PUSH
6410: LD_VAR 0 9
6414: ARRAY
6415: ST_TO_ADDR
// if weapon = 46 then
6416: LD_VAR 0 10
6420: PUSH
6421: LD_INT 46
6423: EQUAL
6424: IFFALSE 6455
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6426: LD_VAR 0 2
6430: PPUSH
6431: LD_INT 24
6433: PPUSH
6434: LD_VAR 0 5
6438: PPUSH
6439: LD_VAR 0 6
6443: PPUSH
6444: LD_VAR 0 10
6448: PPUSH
6449: CALL_OW 185
// end else
6453: GO 6484
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6455: LD_VAR 0 2
6459: PPUSH
6460: LD_VAR 0 7
6464: PPUSH
6465: LD_VAR 0 5
6469: PPUSH
6470: LD_VAR 0 6
6474: PPUSH
6475: LD_VAR 0 10
6479: PPUSH
6480: CALL_OW 185
// end ; end ;
6484: GO 6397
6486: POP
6487: POP
// end ; end ;
6488: LD_VAR 0 8
6492: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6493: LD_INT 0
6495: PPUSH
6496: PPUSH
6497: PPUSH
6498: PPUSH
6499: PPUSH
// for i := 1 to russianTanks do
6500: LD_ADDR_VAR 0 4
6504: PUSH
6505: DOUBLE
6506: LD_INT 1
6508: DEC
6509: ST_TO_ADDR
6510: LD_EXP 18
6514: PUSH
6515: FOR_TO
6516: IFFALSE 6861
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6518: LD_VAR 0 4
6522: PUSH
6523: LD_INT 5
6525: PUSH
6526: LD_INT 6
6528: PUSH
6529: LD_INT 6
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: LD_OWVAR 67
6541: ARRAY
6542: EQUAL
6543: IFFALSE 6859
// begin repeat wait ( 0 0$1 ) ;
6545: LD_INT 35
6547: PPUSH
6548: CALL_OW 67
// for i in russianTanks do
6552: LD_ADDR_VAR 0 4
6556: PUSH
6557: LD_EXP 18
6561: PUSH
6562: FOR_IN
6563: IFFALSE 6847
// begin if GetLives ( i ) < 659 then
6565: LD_VAR 0 4
6569: PPUSH
6570: CALL_OW 256
6574: PUSH
6575: LD_INT 659
6577: LESS
6578: IFFALSE 6666
// begin tmp = i ;
6580: LD_ADDR_VAR 0 5
6584: PUSH
6585: LD_VAR 0 4
6589: ST_TO_ADDR
// for i := 1 to russianTanks do
6590: LD_ADDR_VAR 0 4
6594: PUSH
6595: DOUBLE
6596: LD_INT 1
6598: DEC
6599: ST_TO_ADDR
6600: LD_EXP 18
6604: PUSH
6605: FOR_TO
6606: IFFALSE 6664
// begin if tmp = russianTanks [ i ] then
6608: LD_VAR 0 5
6612: PUSH
6613: LD_EXP 18
6617: PUSH
6618: LD_VAR 0 4
6622: ARRAY
6623: EQUAL
6624: IFFALSE 6662
// begin russianTanks = Delete ( russianTanks , i ) ;
6626: LD_ADDR_EXP 18
6630: PUSH
6631: LD_EXP 18
6635: PPUSH
6636: LD_VAR 0 4
6640: PPUSH
6641: CALL_OW 3
6645: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6646: LD_ADDR_EXP 19
6650: PUSH
6651: LD_EXP 19
6655: PUSH
6656: LD_VAR 0 5
6660: ADD
6661: ST_TO_ADDR
// end ; end ;
6662: GO 6605
6664: POP
6665: POP
// end ; wait ( 0 0$1 ) ;
6666: LD_INT 35
6668: PPUSH
6669: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6673: LD_ADDR_VAR 0 6
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_VAR 0 2
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PPUSH
6690: CALL_OW 69
6694: PPUSH
6695: LD_VAR 0 4
6699: PPUSH
6700: CALL_OW 74
6704: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6705: LD_ADDR_VAR 0 7
6709: PUSH
6710: LD_INT 22
6712: PUSH
6713: LD_VAR 0 2
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: LD_INT 59
6727: PUSH
6728: EMPTY
6729: LIST
6730: PUSH
6731: LD_INT 21
6733: PUSH
6734: LD_INT 1
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 21
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: PPUSH
6764: CALL_OW 69
6768: PPUSH
6769: LD_VAR 0 4
6773: PPUSH
6774: CALL_OW 74
6778: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6779: LD_VAR 0 4
6783: PPUSH
6784: LD_VAR 0 6
6788: PPUSH
6789: CALL_OW 296
6793: PUSH
6794: LD_INT 8
6796: PLUS
6797: PUSH
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 7
6807: PPUSH
6808: CALL_OW 296
6812: LESS
6813: IFFALSE 6831
// begin ComAttackUnit ( i , target1 ) ;
6815: LD_VAR 0 4
6819: PPUSH
6820: LD_VAR 0 6
6824: PPUSH
6825: CALL_OW 115
// end else
6829: GO 6845
// begin ComAttackUnit ( i , target2 ) ;
6831: LD_VAR 0 4
6835: PPUSH
6836: LD_VAR 0 7
6840: PPUSH
6841: CALL_OW 115
// end ; end ;
6845: GO 6562
6847: POP
6848: POP
// until russianTanks = 0 ;
6849: LD_EXP 18
6853: PUSH
6854: LD_INT 0
6856: EQUAL
6857: IFFALSE 6545
// end ; end ;
6859: GO 6515
6861: POP
6862: POP
// end ;
6863: LD_VAR 0 3
6867: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6868: LD_INT 0
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
// for i = 1 to medicCount do
6881: LD_ADDR_VAR 0 14
6885: PUSH
6886: DOUBLE
6887: LD_INT 1
6889: DEC
6890: ST_TO_ADDR
6891: LD_VAR 0 7
6895: PUSH
6896: FOR_TO
6897: IFFALSE 6979
// begin uc_side = side ;
6899: LD_ADDR_OWVAR 20
6903: PUSH
6904: LD_VAR 0 1
6908: ST_TO_ADDR
// uc_nation = nation ;
6909: LD_ADDR_OWVAR 21
6913: PUSH
6914: LD_VAR 0 2
6918: ST_TO_ADDR
// hc_name =  ;
6919: LD_ADDR_OWVAR 26
6923: PUSH
6924: LD_STRING 
6926: ST_TO_ADDR
// hc_gallery =  ;
6927: LD_ADDR_OWVAR 33
6931: PUSH
6932: LD_STRING 
6934: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6935: LD_INT 0
6937: PPUSH
6938: LD_INT 4
6940: PPUSH
6941: LD_VAR 0 8
6945: PPUSH
6946: CALL_OW 380
// un = CreateHuman ;
6950: LD_ADDR_VAR 0 16
6954: PUSH
6955: CALL_OW 44
6959: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6960: LD_VAR 0 16
6964: PPUSH
6965: LD_VAR 0 9
6969: PPUSH
6970: LD_INT 0
6972: PPUSH
6973: CALL_OW 49
// end ;
6977: GO 6896
6979: POP
6980: POP
// for i = 1 to soldierCount do
6981: LD_ADDR_VAR 0 14
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_VAR 0 3
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7079
// begin uc_side = side ;
6999: LD_ADDR_OWVAR 20
7003: PUSH
7004: LD_VAR 0 1
7008: ST_TO_ADDR
// uc_nation = nation ;
7009: LD_ADDR_OWVAR 21
7013: PUSH
7014: LD_VAR 0 2
7018: ST_TO_ADDR
// hc_name =  ;
7019: LD_ADDR_OWVAR 26
7023: PUSH
7024: LD_STRING 
7026: ST_TO_ADDR
// hc_gallery =  ;
7027: LD_ADDR_OWVAR 33
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7035: LD_INT 0
7037: PPUSH
7038: LD_INT 1
7040: PPUSH
7041: LD_VAR 0 8
7045: PPUSH
7046: CALL_OW 380
// un = CreateHuman ;
7050: LD_ADDR_VAR 0 16
7054: PUSH
7055: CALL_OW 44
7059: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7060: LD_VAR 0 16
7064: PPUSH
7065: LD_VAR 0 9
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL_OW 49
// end ;
7077: GO 6996
7079: POP
7080: POP
// for i = 1 to sniperCount do
7081: LD_ADDR_VAR 0 14
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_VAR 0 4
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7179
// begin uc_side = side ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_VAR 0 1
7108: ST_TO_ADDR
// uc_nation = nation ;
7109: LD_ADDR_OWVAR 21
7113: PUSH
7114: LD_VAR 0 2
7118: ST_TO_ADDR
// hc_name =  ;
7119: LD_ADDR_OWVAR 26
7123: PUSH
7124: LD_STRING 
7126: ST_TO_ADDR
// hc_gallery =  ;
7127: LD_ADDR_OWVAR 33
7131: PUSH
7132: LD_STRING 
7134: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7135: LD_INT 0
7137: PPUSH
7138: LD_INT 5
7140: PPUSH
7141: LD_VAR 0 8
7145: PPUSH
7146: CALL_OW 380
// un = CreateHuman ;
7150: LD_ADDR_VAR 0 16
7154: PUSH
7155: CALL_OW 44
7159: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7160: LD_VAR 0 16
7164: PPUSH
7165: LD_VAR 0 9
7169: PPUSH
7170: LD_INT 0
7172: PPUSH
7173: CALL_OW 49
// end ;
7177: GO 7096
7179: POP
7180: POP
// for i = 1 to bazookCount do
7181: LD_ADDR_VAR 0 14
7185: PUSH
7186: DOUBLE
7187: LD_INT 1
7189: DEC
7190: ST_TO_ADDR
7191: LD_VAR 0 5
7195: PUSH
7196: FOR_TO
7197: IFFALSE 7279
// begin uc_side = side ;
7199: LD_ADDR_OWVAR 20
7203: PUSH
7204: LD_VAR 0 1
7208: ST_TO_ADDR
// uc_nation = nation ;
7209: LD_ADDR_OWVAR 21
7213: PUSH
7214: LD_VAR 0 2
7218: ST_TO_ADDR
// hc_name =  ;
7219: LD_ADDR_OWVAR 26
7223: PUSH
7224: LD_STRING 
7226: ST_TO_ADDR
// hc_gallery =  ;
7227: LD_ADDR_OWVAR 33
7231: PUSH
7232: LD_STRING 
7234: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7235: LD_INT 0
7237: PPUSH
7238: LD_INT 9
7240: PPUSH
7241: LD_VAR 0 8
7245: PPUSH
7246: CALL_OW 380
// un = CreateHuman ;
7250: LD_ADDR_VAR 0 16
7254: PUSH
7255: CALL_OW 44
7259: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7260: LD_VAR 0 16
7264: PPUSH
7265: LD_VAR 0 9
7269: PPUSH
7270: LD_INT 0
7272: PPUSH
7273: CALL_OW 49
// end ;
7277: GO 7196
7279: POP
7280: POP
// for i = 1 to mortalCount do
7281: LD_ADDR_VAR 0 14
7285: PUSH
7286: DOUBLE
7287: LD_INT 1
7289: DEC
7290: ST_TO_ADDR
7291: LD_VAR 0 6
7295: PUSH
7296: FOR_TO
7297: IFFALSE 7379
// begin uc_side = side ;
7299: LD_ADDR_OWVAR 20
7303: PUSH
7304: LD_VAR 0 1
7308: ST_TO_ADDR
// uc_nation = nation ;
7309: LD_ADDR_OWVAR 21
7313: PUSH
7314: LD_VAR 0 2
7318: ST_TO_ADDR
// hc_name =  ;
7319: LD_ADDR_OWVAR 26
7323: PUSH
7324: LD_STRING 
7326: ST_TO_ADDR
// hc_gallery =  ;
7327: LD_ADDR_OWVAR 33
7331: PUSH
7332: LD_STRING 
7334: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7335: LD_INT 0
7337: PPUSH
7338: LD_INT 8
7340: PPUSH
7341: LD_VAR 0 8
7345: PPUSH
7346: CALL_OW 380
// un = CreateHuman ;
7350: LD_ADDR_VAR 0 16
7354: PUSH
7355: CALL_OW 44
7359: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7360: LD_VAR 0 16
7364: PPUSH
7365: LD_VAR 0 9
7369: PPUSH
7370: LD_INT 0
7372: PPUSH
7373: CALL_OW 49
// end ;
7377: GO 7296
7379: POP
7380: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7381: LD_ADDR_VAR 0 19
7385: PUSH
7386: LD_INT 22
7388: PUSH
7389: LD_VAR 0 1
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 2
7400: PUSH
7401: LD_INT 25
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 5
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 25
7423: PUSH
7424: LD_INT 8
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 25
7433: PUSH
7434: LD_INT 9
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PPUSH
7452: CALL_OW 69
7456: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7457: LD_ADDR_VAR 0 18
7461: PUSH
7462: LD_INT 22
7464: PUSH
7465: LD_VAR 0 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 25
7476: PUSH
7477: LD_INT 4
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 69
7492: ST_TO_ADDR
// for i in medic_list do
7493: LD_ADDR_VAR 0 14
7497: PUSH
7498: LD_VAR 0 18
7502: PUSH
7503: FOR_IN
7504: IFFALSE 7522
// ComMoveToArea ( i , healArea ) ;
7506: LD_VAR 0 14
7510: PPUSH
7511: LD_VAR 0 10
7515: PPUSH
7516: CALL_OW 113
7520: GO 7503
7522: POP
7523: POP
// if strategy = 1 then
7524: LD_VAR 0 12
7528: PUSH
7529: LD_INT 1
7531: EQUAL
7532: IFFALSE 8267
// begin repeat wait ( 0 0$3 ) ;
7534: LD_INT 105
7536: PPUSH
7537: CALL_OW 67
// for i in soldiersOK_list do
7541: LD_ADDR_VAR 0 14
7545: PUSH
7546: LD_VAR 0 19
7550: PUSH
7551: FOR_IN
7552: IFFALSE 7616
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7554: LD_VAR 0 14
7558: PPUSH
7559: LD_INT 91
7561: PPUSH
7562: LD_INT 63
7564: PPUSH
7565: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7569: LD_VAR 0 14
7573: PPUSH
7574: LD_INT 101
7576: PPUSH
7577: LD_INT 53
7579: PPUSH
7580: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7584: LD_VAR 0 14
7588: PPUSH
7589: LD_INT 75
7591: PPUSH
7592: LD_INT 23
7594: PPUSH
7595: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7599: LD_VAR 0 14
7603: PPUSH
7604: LD_INT 78
7606: PPUSH
7607: LD_INT 8
7609: PPUSH
7610: CALL_OW 174
// end ;
7614: GO 7551
7616: POP
7617: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
7618: LD_INT 15
7620: PPUSH
7621: LD_INT 22
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PPUSH
7633: CALL_OW 70
7637: PUSH
7638: LD_INT 2
7640: GREATER
7641: IFFALSE 7534
// repeat wait ( 0 0$1 ) ;
7643: LD_INT 35
7645: PPUSH
7646: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7650: LD_ADDR_VAR 0 17
7654: PUSH
7655: LD_INT 22
7657: PUSH
7658: LD_VAR 0 1
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: LD_INT 3
7672: PUSH
7673: LD_INT 24
7675: PUSH
7676: LD_INT 550
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 24
7689: PUSH
7690: LD_INT 250
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PPUSH
7706: CALL_OW 69
7710: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7711: LD_ADDR_VAR 0 19
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_VAR 0 1
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: LD_INT 25
7733: PUSH
7734: LD_INT 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 25
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 25
7753: PUSH
7754: LD_INT 8
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 25
7763: PUSH
7764: LD_INT 9
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 24
7780: PUSH
7781: LD_INT 1000
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: PPUSH
7793: CALL_OW 69
7797: ST_TO_ADDR
// if medicCount > 0 then
7798: LD_VAR 0 7
7802: PUSH
7803: LD_INT 0
7805: GREATER
7806: IFFALSE 7880
// begin if damageUnit_list > 0 then
7808: LD_VAR 0 17
7812: PUSH
7813: LD_INT 0
7815: GREATER
7816: IFFALSE 7880
// begin for i in damageUnit_list do
7818: LD_ADDR_VAR 0 14
7822: PUSH
7823: LD_VAR 0 17
7827: PUSH
7828: FOR_IN
7829: IFFALSE 7878
// begin ComMoveToArea ( i , healArea ) ;
7831: LD_VAR 0 14
7835: PPUSH
7836: LD_VAR 0 10
7840: PPUSH
7841: CALL_OW 113
// for j in medic_list do
7845: LD_ADDR_VAR 0 15
7849: PUSH
7850: LD_VAR 0 18
7854: PUSH
7855: FOR_IN
7856: IFFALSE 7874
// AddComHeal ( j , i ) ;
7858: LD_VAR 0 15
7862: PPUSH
7863: LD_VAR 0 14
7867: PPUSH
7868: CALL_OW 188
7872: GO 7855
7874: POP
7875: POP
// end ;
7876: GO 7828
7878: POP
7879: POP
// end ; end ; for i in soldiersOK_list do
7880: LD_ADDR_VAR 0 14
7884: PUSH
7885: LD_VAR 0 19
7889: PUSH
7890: FOR_IN
7891: IFFALSE 8067
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7893: LD_ADDR_VAR 0 22
7897: PUSH
7898: LD_INT 22
7900: PUSH
7901: LD_VAR 0 11
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PPUSH
7910: CALL_OW 69
7914: PPUSH
7915: LD_VAR 0 14
7919: PPUSH
7920: CALL_OW 74
7924: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7925: LD_ADDR_VAR 0 23
7929: PUSH
7930: LD_INT 22
7932: PUSH
7933: LD_VAR 0 11
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 2
7944: PUSH
7945: LD_INT 59
7947: PUSH
7948: EMPTY
7949: LIST
7950: PUSH
7951: LD_INT 21
7953: PUSH
7954: LD_INT 1
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 21
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 14
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7999: LD_VAR 0 14
8003: PPUSH
8004: LD_VAR 0 22
8008: PPUSH
8009: CALL_OW 296
8013: PUSH
8014: LD_INT 8
8016: PLUS
8017: PUSH
8018: LD_VAR 0 14
8022: PPUSH
8023: LD_VAR 0 23
8027: PPUSH
8028: CALL_OW 296
8032: LESS
8033: IFFALSE 8051
// begin ComAttackUnit ( i , target1 ) ;
8035: LD_VAR 0 14
8039: PPUSH
8040: LD_VAR 0 22
8044: PPUSH
8045: CALL_OW 115
// end else
8049: GO 8065
// begin ComAttackUnit ( i , target2 ) ;
8051: LD_VAR 0 14
8055: PPUSH
8056: LD_VAR 0 23
8060: PPUSH
8061: CALL_OW 115
// end ; end ;
8065: GO 7890
8067: POP
8068: POP
// for i in soldiersOK_list do
8069: LD_ADDR_VAR 0 14
8073: PUSH
8074: LD_VAR 0 19
8078: PUSH
8079: FOR_IN
8080: IFFALSE 8256
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8082: LD_ADDR_VAR 0 22
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_VAR 0 11
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 69
8103: PPUSH
8104: LD_VAR 0 14
8108: PPUSH
8109: CALL_OW 74
8113: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8114: LD_ADDR_VAR 0 23
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_VAR 0 11
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 2
8133: PUSH
8134: LD_INT 59
8136: PUSH
8137: EMPTY
8138: LIST
8139: PUSH
8140: LD_INT 21
8142: PUSH
8143: LD_INT 1
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: LD_INT 21
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: EMPTY
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: PPUSH
8178: LD_VAR 0 14
8182: PPUSH
8183: CALL_OW 74
8187: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8188: LD_VAR 0 14
8192: PPUSH
8193: LD_VAR 0 22
8197: PPUSH
8198: CALL_OW 296
8202: PUSH
8203: LD_INT 8
8205: PLUS
8206: PUSH
8207: LD_VAR 0 14
8211: PPUSH
8212: LD_VAR 0 23
8216: PPUSH
8217: CALL_OW 296
8221: LESS
8222: IFFALSE 8240
// begin ComAttackUnit ( i , target1 ) ;
8224: LD_VAR 0 14
8228: PPUSH
8229: LD_VAR 0 22
8233: PPUSH
8234: CALL_OW 115
// end else
8238: GO 8254
// begin ComAttackUnit ( i , target2 ) ;
8240: LD_VAR 0 14
8244: PPUSH
8245: LD_VAR 0 23
8249: PPUSH
8250: CALL_OW 115
// end ; end ;
8254: GO 8079
8256: POP
8257: POP
// until soldiersOK_list = [ ] ;
8258: LD_VAR 0 19
8262: PUSH
8263: EMPTY
8264: EQUAL
8265: IFFALSE 7643
// end ; if strategy = 2 then
8267: LD_VAR 0 12
8271: PUSH
8272: LD_INT 2
8274: EQUAL
8275: IFFALSE 8980
// begin repeat wait ( 0 0$1 ) ;
8277: LD_INT 35
8279: PPUSH
8280: CALL_OW 67
// for i in soldiersOK_list do
8284: LD_ADDR_VAR 0 14
8288: PUSH
8289: LD_VAR 0 19
8293: PUSH
8294: FOR_IN
8295: IFFALSE 8329
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8297: LD_VAR 0 14
8301: PPUSH
8302: LD_INT 91
8304: PPUSH
8305: LD_INT 63
8307: PPUSH
8308: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8312: LD_VAR 0 14
8316: PPUSH
8317: LD_INT 75
8319: PPUSH
8320: LD_INT 33
8322: PPUSH
8323: CALL_OW 174
// end ;
8327: GO 8294
8329: POP
8330: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8331: LD_INT 16
8333: PPUSH
8334: LD_INT 22
8336: PUSH
8337: LD_VAR 0 1
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PPUSH
8346: CALL_OW 70
8350: PUSH
8351: LD_INT 2
8353: GREATER
8354: IFFALSE 8277
// repeat wait ( 0 0$3 ) ;
8356: LD_INT 105
8358: PPUSH
8359: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8363: LD_ADDR_VAR 0 17
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_VAR 0 1
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 1
8382: PUSH
8383: LD_INT 3
8385: PUSH
8386: LD_INT 24
8388: PUSH
8389: LD_INT 550
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 24
8402: PUSH
8403: LD_INT 250
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 69
8423: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8424: LD_ADDR_VAR 0 19
8428: PUSH
8429: LD_INT 22
8431: PUSH
8432: LD_VAR 0 1
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 2
8443: PUSH
8444: LD_INT 25
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 5
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 8
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 25
8476: PUSH
8477: LD_INT 9
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 24
8493: PUSH
8494: LD_INT 1000
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: LIST
8505: PPUSH
8506: CALL_OW 69
8510: ST_TO_ADDR
// if medicCount > 0 then
8511: LD_VAR 0 7
8515: PUSH
8516: LD_INT 0
8518: GREATER
8519: IFFALSE 8593
// begin if damageUnit_list > 0 then
8521: LD_VAR 0 17
8525: PUSH
8526: LD_INT 0
8528: GREATER
8529: IFFALSE 8593
// begin for i in damageUnit_list do
8531: LD_ADDR_VAR 0 14
8535: PUSH
8536: LD_VAR 0 17
8540: PUSH
8541: FOR_IN
8542: IFFALSE 8591
// begin ComMoveToArea ( i , healArea ) ;
8544: LD_VAR 0 14
8548: PPUSH
8549: LD_VAR 0 10
8553: PPUSH
8554: CALL_OW 113
// for j in medic_list do
8558: LD_ADDR_VAR 0 15
8562: PUSH
8563: LD_VAR 0 18
8567: PUSH
8568: FOR_IN
8569: IFFALSE 8587
// AddComHeal ( j , i ) ;
8571: LD_VAR 0 15
8575: PPUSH
8576: LD_VAR 0 14
8580: PPUSH
8581: CALL_OW 188
8585: GO 8568
8587: POP
8588: POP
// end ;
8589: GO 8541
8591: POP
8592: POP
// end ; end ; for i in soldiersOK_list do
8593: LD_ADDR_VAR 0 14
8597: PUSH
8598: LD_VAR 0 19
8602: PUSH
8603: FOR_IN
8604: IFFALSE 8780
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8606: LD_ADDR_VAR 0 22
8610: PUSH
8611: LD_INT 22
8613: PUSH
8614: LD_VAR 0 11
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PPUSH
8623: CALL_OW 69
8627: PPUSH
8628: LD_VAR 0 14
8632: PPUSH
8633: CALL_OW 74
8637: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8638: LD_ADDR_VAR 0 23
8642: PUSH
8643: LD_INT 22
8645: PUSH
8646: LD_VAR 0 11
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: LD_INT 59
8660: PUSH
8661: EMPTY
8662: LIST
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: PPUSH
8697: CALL_OW 69
8701: PPUSH
8702: LD_VAR 0 14
8706: PPUSH
8707: CALL_OW 74
8711: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8712: LD_VAR 0 14
8716: PPUSH
8717: LD_VAR 0 22
8721: PPUSH
8722: CALL_OW 296
8726: PUSH
8727: LD_INT 8
8729: PLUS
8730: PUSH
8731: LD_VAR 0 14
8735: PPUSH
8736: LD_VAR 0 23
8740: PPUSH
8741: CALL_OW 296
8745: LESS
8746: IFFALSE 8764
// begin ComAttackUnit ( i , target1 ) ;
8748: LD_VAR 0 14
8752: PPUSH
8753: LD_VAR 0 22
8757: PPUSH
8758: CALL_OW 115
// end else
8762: GO 8778
// begin ComAttackUnit ( i , target2 ) ;
8764: LD_VAR 0 14
8768: PPUSH
8769: LD_VAR 0 23
8773: PPUSH
8774: CALL_OW 115
// end ; end ;
8778: GO 8603
8780: POP
8781: POP
// for i in soldiersOK_list do
8782: LD_ADDR_VAR 0 14
8786: PUSH
8787: LD_VAR 0 19
8791: PUSH
8792: FOR_IN
8793: IFFALSE 8969
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8795: LD_ADDR_VAR 0 22
8799: PUSH
8800: LD_INT 22
8802: PUSH
8803: LD_VAR 0 11
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PPUSH
8812: CALL_OW 69
8816: PPUSH
8817: LD_VAR 0 14
8821: PPUSH
8822: CALL_OW 74
8826: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8827: LD_ADDR_VAR 0 23
8831: PUSH
8832: LD_INT 22
8834: PUSH
8835: LD_VAR 0 11
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 2
8846: PUSH
8847: LD_INT 59
8849: PUSH
8850: EMPTY
8851: LIST
8852: PUSH
8853: LD_INT 21
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 21
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: PPUSH
8886: CALL_OW 69
8890: PPUSH
8891: LD_VAR 0 14
8895: PPUSH
8896: CALL_OW 74
8900: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8901: LD_VAR 0 14
8905: PPUSH
8906: LD_VAR 0 22
8910: PPUSH
8911: CALL_OW 296
8915: PUSH
8916: LD_INT 8
8918: PLUS
8919: PUSH
8920: LD_VAR 0 14
8924: PPUSH
8925: LD_VAR 0 23
8929: PPUSH
8930: CALL_OW 296
8934: LESS
8935: IFFALSE 8953
// begin ComAttackUnit ( i , target1 ) ;
8937: LD_VAR 0 14
8941: PPUSH
8942: LD_VAR 0 22
8946: PPUSH
8947: CALL_OW 115
// end else
8951: GO 8967
// begin ComAttackUnit ( i , target2 ) ;
8953: LD_VAR 0 14
8957: PPUSH
8958: LD_VAR 0 23
8962: PPUSH
8963: CALL_OW 115
// end ; end ;
8967: GO 8792
8969: POP
8970: POP
// until soldiersOK_list = [ ] ;
8971: LD_VAR 0 19
8975: PUSH
8976: EMPTY
8977: EQUAL
8978: IFFALSE 8356
// end ; end ;
8980: LD_VAR 0 13
8984: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
8989: PPUSH
8990: PPUSH
8991: PPUSH
8992: PPUSH
8993: PPUSH
8994: PPUSH
8995: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8996: LD_ADDR_VAR 0 8
9000: PUSH
9001: LD_INT 22
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 21
9015: PUSH
9016: LD_INT 2
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 24
9025: PUSH
9026: LD_INT 660
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: LD_INT 58
9038: PUSH
9039: EMPTY
9040: LIST
9041: PUSH
9042: LD_INT 2
9044: PUSH
9045: LD_INT 34
9047: PUSH
9048: LD_INT 43
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: LD_INT 34
9057: PUSH
9058: LD_INT 44
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 34
9067: PUSH
9068: LD_INT 46
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
9097: LD_ADDR_VAR 0 9
9101: PUSH
9102: LD_INT 22
9104: PUSH
9105: LD_VAR 0 1
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 21
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: LD_INT 24
9129: PUSH
9130: LD_INT 660
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9151: LD_ADDR_VAR 0 10
9155: PUSH
9156: LD_VAR 0 2
9160: PPUSH
9161: LD_INT 22
9163: PUSH
9164: LD_VAR 0 1
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 21
9175: PUSH
9176: LD_INT 2
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_INT 3
9185: PUSH
9186: LD_INT 24
9188: PUSH
9189: LD_INT 1000
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: PPUSH
9205: CALL_OW 70
9209: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9210: LD_ADDR_VAR 0 11
9214: PUSH
9215: LD_VAR 0 2
9219: PPUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 58
9254: PUSH
9255: EMPTY
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: PPUSH
9264: CALL_OW 70
9268: ST_TO_ADDR
// mechanicInside_list = [ ] ;
9269: LD_ADDR_VAR 0 12
9273: PUSH
9274: EMPTY
9275: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9276: LD_ADDR_VAR 0 13
9280: PUSH
9281: LD_VAR 0 2
9285: PPUSH
9286: LD_INT 22
9288: PUSH
9289: LD_VAR 0 1
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 25
9300: PUSH
9301: LD_INT 3
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 70
9316: ST_TO_ADDR
// if damageVehicle_list = 0 and vehicleOK_list = 0 then
9317: LD_VAR 0 9
9321: PUSH
9322: LD_INT 0
9324: EQUAL
9325: PUSH
9326: LD_VAR 0 8
9330: PUSH
9331: LD_INT 0
9333: EQUAL
9334: AND
9335: IFFALSE 9339
// exit ;
9337: GO 9743
// if damageVehicle_list > 0 then
9339: LD_VAR 0 9
9343: PUSH
9344: LD_INT 0
9346: GREATER
9347: IFFALSE 9385
// for i in damageVehicle_list do
9349: LD_ADDR_VAR 0 6
9353: PUSH
9354: LD_VAR 0 9
9358: PUSH
9359: FOR_IN
9360: IFFALSE 9383
// ComMoveXY ( i , repX , repY ) ;
9362: LD_VAR 0 6
9366: PPUSH
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_VAR 0 4
9376: PPUSH
9377: CALL_OW 111
9381: GO 9359
9383: POP
9384: POP
// if vehicleNeedRepair_list > 0 then
9385: LD_VAR 0 10
9389: PUSH
9390: LD_INT 0
9392: GREATER
9393: IFFALSE 9494
// begin for i in vehicleNeedRepair_list do
9395: LD_ADDR_VAR 0 6
9399: PUSH
9400: LD_VAR 0 10
9404: PUSH
9405: FOR_IN
9406: IFFALSE 9492
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9408: LD_ADDR_VAR 0 12
9412: PUSH
9413: LD_VAR 0 12
9417: PUSH
9418: LD_VAR 0 6
9422: PPUSH
9423: CALL_OW 313
9427: ADD
9428: ST_TO_ADDR
// for j in mechanicInside_list do
9429: LD_ADDR_VAR 0 7
9433: PUSH
9434: LD_VAR 0 12
9438: PUSH
9439: FOR_IN
9440: IFFALSE 9488
// begin ComExitVehicle ( j ) ;
9442: LD_VAR 0 7
9446: PPUSH
9447: CALL_OW 121
// wait ( 0 0$1 ) ;
9451: LD_INT 35
9453: PPUSH
9454: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
9458: LD_VAR 0 7
9462: PPUSH
9463: LD_VAR 0 6
9467: PPUSH
9468: CALL_OW 189
// AddComEnterUnit ( j , i ) ;
9472: LD_VAR 0 7
9476: PPUSH
9477: LD_VAR 0 6
9481: PPUSH
9482: CALL_OW 180
// end ;
9486: GO 9439
9488: POP
9489: POP
// end ;
9490: GO 9405
9492: POP
9493: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9494: LD_VAR 0 11
9498: PUSH
9499: LD_INT 0
9501: GREATER
9502: IFFALSE 9526
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9504: LD_VAR 0 13
9508: PUSH
9509: LD_INT 1
9511: ARRAY
9512: PPUSH
9513: LD_VAR 0 11
9517: PUSH
9518: LD_INT 1
9520: ARRAY
9521: PPUSH
9522: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
9526: LD_VAR 0 8
9530: PUSH
9531: LD_INT 0
9533: GREATER
9534: PUSH
9535: LD_EXP 19
9539: PUSH
9540: LD_INT 0
9542: GREATER
9543: AND
9544: IFFALSE 9675
// begin for i := 1 to vehicleOK_list do
9546: LD_ADDR_VAR 0 6
9550: PUSH
9551: DOUBLE
9552: LD_INT 1
9554: DEC
9555: ST_TO_ADDR
9556: LD_VAR 0 8
9560: PUSH
9561: FOR_TO
9562: IFFALSE 9673
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
9564: LD_VAR 0 6
9568: PUSH
9569: LD_INT 5
9571: PUSH
9572: LD_INT 6
9574: PUSH
9575: LD_INT 6
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_OWVAR 67
9587: ARRAY
9588: EQUAL
9589: IFFALSE 9671
// begin for i in vehicleOk_list do
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: LD_VAR 0 8
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9634
// begin russianTanks = russianTanks ^ i ;
9604: LD_ADDR_EXP 18
9608: PUSH
9609: LD_EXP 18
9613: PUSH
9614: LD_VAR 0 6
9618: ADD
9619: ST_TO_ADDR
// SetFuel ( i , 100 ) ;
9620: LD_VAR 0 6
9624: PPUSH
9625: LD_INT 100
9627: PPUSH
9628: CALL_OW 240
// end ;
9632: GO 9601
9634: POP
9635: POP
// for i in russianDamageTanks do
9636: LD_ADDR_VAR 0 6
9640: PUSH
9641: LD_EXP 19
9645: PUSH
9646: FOR_IN
9647: IFFALSE 9667
// russianDamageTanks = russianDamageTanks diff i ;
9649: LD_ADDR_EXP 19
9653: PUSH
9654: LD_EXP 19
9658: PUSH
9659: LD_VAR 0 6
9663: DIFF
9664: ST_TO_ADDR
9665: GO 9646
9667: POP
9668: POP
// break ;
9669: GO 9673
// end ; end ;
9671: GO 9561
9673: POP
9674: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9675: LD_ADDR_VAR 0 6
9679: PUSH
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 22
9687: PUSH
9688: LD_VAR 0 1
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 25
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PPUSH
9711: CALL_OW 70
9715: NOT
9716: PUSH
9717: FOR_IN
9718: IFFALSE 9741
// ComMoveXY ( i , repX , repY ) ;
9720: LD_VAR 0 6
9724: PPUSH
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: CALL_OW 111
9739: GO 9717
9741: POP
9742: POP
// end ;
9743: LD_VAR 0 5
9747: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9748: LD_INT 0
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
9758: PPUSH
9759: PPUSH
9760: PPUSH
// amChassisTab = [ ] ;
9761: LD_ADDR_VAR 0 19
9765: PUSH
9766: EMPTY
9767: ST_TO_ADDR
// arChassisTab = [ ] ;
9768: LD_ADDR_VAR 0 18
9772: PUSH
9773: EMPTY
9774: ST_TO_ADDR
// ruChassisTab = [ ] ;
9775: LD_ADDR_VAR 0 17
9779: PUSH
9780: EMPTY
9781: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9782: LD_INT 35
9784: PPUSH
9785: CALL_OW 67
// if nation = 1 then
9789: LD_VAR 0 5
9793: PUSH
9794: LD_INT 1
9796: EQUAL
9797: IFFALSE 10288
// begin uc_side = side ;
9799: LD_ADDR_OWVAR 20
9803: PUSH
9804: LD_VAR 0 2
9808: ST_TO_ADDR
// uc_nation = nation ;
9809: LD_ADDR_OWVAR 21
9813: PUSH
9814: LD_VAR 0 5
9818: ST_TO_ADDR
// vc_engine = vehengine ;
9819: LD_ADDR_OWVAR 39
9823: PUSH
9824: LD_VAR 0 6
9828: ST_TO_ADDR
// vc_control = vehcontrol ;
9829: LD_ADDR_OWVAR 38
9833: PUSH
9834: LD_VAR 0 7
9838: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9839: LD_ADDR_OWVAR 40
9843: PUSH
9844: LD_VAR 0 10
9848: PUSH
9849: LD_INT 1
9851: PPUSH
9852: LD_VAR 0 10
9856: PPUSH
9857: CALL_OW 12
9861: ARRAY
9862: ST_TO_ADDR
// for j = 1 to AMWeapon do
9863: LD_ADDR_VAR 0 14
9867: PUSH
9868: DOUBLE
9869: LD_INT 1
9871: DEC
9872: ST_TO_ADDR
9873: LD_VAR 0 10
9877: PUSH
9878: FOR_TO
9879: IFFALSE 10180
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9881: LD_VAR 0 10
9885: PUSH
9886: LD_VAR 0 14
9890: ARRAY
9891: PUSH
9892: LD_INT 2
9894: EQUAL
9895: PUSH
9896: LD_VAR 0 10
9900: PUSH
9901: LD_VAR 0 14
9905: ARRAY
9906: PUSH
9907: LD_INT 3
9909: EQUAL
9910: OR
9911: IFFALSE 9964
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9913: LD_ADDR_VAR 0 19
9917: PUSH
9918: LD_INT 1
9920: PUSH
9921: LD_INT 2
9923: PUSH
9924: LD_INT 3
9926: PUSH
9927: LD_INT 4
9929: PUSH
9930: LD_INT 5
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9940: LD_ADDR_OWVAR 37
9944: PUSH
9945: LD_VAR 0 19
9949: PUSH
9950: LD_INT 1
9952: PPUSH
9953: LD_VAR 0 19
9957: PPUSH
9958: CALL_OW 12
9962: ARRAY
9963: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9964: LD_VAR 0 10
9968: PUSH
9969: LD_VAR 0 14
9973: ARRAY
9974: PUSH
9975: LD_INT 4
9977: EQUAL
9978: PUSH
9979: LD_VAR 0 10
9983: PUSH
9984: LD_VAR 0 14
9988: ARRAY
9989: PUSH
9990: LD_INT 5
9992: EQUAL
9993: OR
9994: PUSH
9995: LD_VAR 0 10
9999: PUSH
10000: LD_VAR 0 14
10004: ARRAY
10005: PUSH
10006: LD_INT 9
10008: EQUAL
10009: OR
10010: PUSH
10011: LD_VAR 0 10
10015: PUSH
10016: LD_VAR 0 14
10020: ARRAY
10021: PUSH
10022: LD_INT 11
10024: EQUAL
10025: OR
10026: PUSH
10027: LD_VAR 0 10
10031: PUSH
10032: LD_VAR 0 14
10036: ARRAY
10037: PUSH
10038: LD_INT 7
10040: EQUAL
10041: OR
10042: IFFALSE 10091
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
10044: LD_ADDR_VAR 0 19
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: LD_INT 3
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: LD_INT 5
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10067: LD_ADDR_OWVAR 37
10071: PUSH
10072: LD_VAR 0 19
10076: PUSH
10077: LD_INT 1
10079: PPUSH
10080: LD_VAR 0 19
10084: PPUSH
10085: CALL_OW 12
10089: ARRAY
10090: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10091: LD_VAR 0 10
10095: PUSH
10096: LD_VAR 0 14
10100: ARRAY
10101: PUSH
10102: LD_INT 8
10104: EQUAL
10105: PUSH
10106: LD_VAR 0 10
10110: PUSH
10111: LD_VAR 0 14
10115: ARRAY
10116: PUSH
10117: LD_INT 6
10119: EQUAL
10120: OR
10121: PUSH
10122: LD_VAR 0 10
10126: PUSH
10127: LD_VAR 0 14
10131: ARRAY
10132: PUSH
10133: LD_INT 10
10135: EQUAL
10136: OR
10137: IFFALSE 10178
// begin amChassisTab = [ 4 , 5 ] ;
10139: LD_ADDR_VAR 0 19
10143: PUSH
10144: LD_INT 4
10146: PUSH
10147: LD_INT 5
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10154: LD_ADDR_OWVAR 37
10158: PUSH
10159: LD_VAR 0 19
10163: PUSH
10164: LD_INT 1
10166: PPUSH
10167: LD_VAR 0 19
10171: PPUSH
10172: CALL_OW 12
10176: ARRAY
10177: ST_TO_ADDR
// end ; end ;
10178: GO 9878
10180: POP
10181: POP
// veh = CreateVehicle ;
10182: LD_ADDR_VAR 0 16
10186: PUSH
10187: CALL_OW 45
10191: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10192: LD_VAR 0 16
10196: PPUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: LD_INT 0
10204: PPUSH
10205: CALL_OW 49
// if vehControl = 1 then
10209: LD_VAR 0 7
10213: PUSH
10214: LD_INT 1
10216: EQUAL
10217: IFFALSE 10274
// begin hc_gallery =  ;
10219: LD_ADDR_OWVAR 33
10223: PUSH
10224: LD_STRING 
10226: ST_TO_ADDR
// hc_name =  ;
10227: LD_ADDR_OWVAR 26
10231: PUSH
10232: LD_STRING 
10234: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10235: LD_INT 0
10237: PPUSH
10238: LD_INT 3
10240: PPUSH
10241: LD_VAR 0 4
10245: PPUSH
10246: CALL_OW 380
// un = CreateHuman ;
10250: LD_ADDR_VAR 0 15
10254: PUSH
10255: CALL_OW 44
10259: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10260: LD_VAR 0 15
10264: PPUSH
10265: LD_VAR 0 16
10269: PPUSH
10270: CALL_OW 52
// end ; i = i + 1 ;
10274: LD_ADDR_VAR 0 13
10278: PUSH
10279: LD_VAR 0 13
10283: PUSH
10284: LD_INT 1
10286: PLUS
10287: ST_TO_ADDR
// end ; if nation = 2 then
10288: LD_VAR 0 5
10292: PUSH
10293: LD_INT 2
10295: EQUAL
10296: IFFALSE 10720
// begin uc_side = side ;
10298: LD_ADDR_OWVAR 20
10302: PUSH
10303: LD_VAR 0 2
10307: ST_TO_ADDR
// uc_nation = nation ;
10308: LD_ADDR_OWVAR 21
10312: PUSH
10313: LD_VAR 0 5
10317: ST_TO_ADDR
// vc_engine = vehengine ;
10318: LD_ADDR_OWVAR 39
10322: PUSH
10323: LD_VAR 0 6
10327: ST_TO_ADDR
// vc_control = vehcontrol ;
10328: LD_ADDR_OWVAR 38
10332: PUSH
10333: LD_VAR 0 7
10337: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10338: LD_ADDR_OWVAR 40
10342: PUSH
10343: LD_VAR 0 9
10347: PUSH
10348: LD_INT 1
10350: PPUSH
10351: LD_VAR 0 9
10355: PPUSH
10356: CALL_OW 12
10360: ARRAY
10361: ST_TO_ADDR
// for j = 1 to ARWeapons do
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: DOUBLE
10368: LD_INT 1
10370: DEC
10371: ST_TO_ADDR
10372: LD_VAR 0 9
10376: PUSH
10377: FOR_TO
10378: IFFALSE 10612
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10380: LD_VAR 0 9
10384: PUSH
10385: LD_VAR 0 14
10389: ARRAY
10390: PUSH
10391: LD_INT 24
10393: EQUAL
10394: PUSH
10395: LD_VAR 0 9
10399: PUSH
10400: LD_VAR 0 14
10404: ARRAY
10405: PUSH
10406: LD_INT 22
10408: EQUAL
10409: OR
10410: PUSH
10411: LD_VAR 0 9
10415: PUSH
10416: LD_VAR 0 14
10420: ARRAY
10421: PUSH
10422: LD_INT 23
10424: EQUAL
10425: OR
10426: PUSH
10427: LD_VAR 0 9
10431: PUSH
10432: LD_VAR 0 14
10436: ARRAY
10437: PUSH
10438: LD_INT 30
10440: EQUAL
10441: OR
10442: IFFALSE 10491
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10444: LD_ADDR_VAR 0 18
10448: PUSH
10449: LD_INT 11
10451: PUSH
10452: LD_INT 12
10454: PUSH
10455: LD_INT 13
10457: PUSH
10458: LD_INT 14
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10467: LD_ADDR_OWVAR 37
10471: PUSH
10472: LD_VAR 0 18
10476: PUSH
10477: LD_INT 1
10479: PPUSH
10480: LD_VAR 0 18
10484: PPUSH
10485: CALL_OW 12
10489: ARRAY
10490: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10491: LD_VAR 0 9
10495: PUSH
10496: LD_VAR 0 14
10500: ARRAY
10501: PUSH
10502: LD_INT 29
10504: EQUAL
10505: PUSH
10506: LD_VAR 0 9
10510: PUSH
10511: LD_VAR 0 14
10515: ARRAY
10516: PUSH
10517: LD_INT 28
10519: EQUAL
10520: OR
10521: PUSH
10522: LD_VAR 0 9
10526: PUSH
10527: LD_VAR 0 14
10531: ARRAY
10532: PUSH
10533: LD_INT 27
10535: EQUAL
10536: OR
10537: PUSH
10538: LD_VAR 0 9
10542: PUSH
10543: LD_VAR 0 14
10547: ARRAY
10548: PUSH
10549: LD_INT 26
10551: EQUAL
10552: OR
10553: PUSH
10554: LD_VAR 0 9
10558: PUSH
10559: LD_VAR 0 14
10563: ARRAY
10564: PUSH
10565: LD_INT 25
10567: EQUAL
10568: OR
10569: IFFALSE 10610
// begin arChassisTab = [ 13 , 14 ] ;
10571: LD_ADDR_VAR 0 18
10575: PUSH
10576: LD_INT 13
10578: PUSH
10579: LD_INT 14
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10586: LD_ADDR_OWVAR 37
10590: PUSH
10591: LD_VAR 0 18
10595: PUSH
10596: LD_INT 1
10598: PPUSH
10599: LD_VAR 0 18
10603: PPUSH
10604: CALL_OW 12
10608: ARRAY
10609: ST_TO_ADDR
// end ; end ;
10610: GO 10377
10612: POP
10613: POP
// veh = CreateVehicle ;
10614: LD_ADDR_VAR 0 16
10618: PUSH
10619: CALL_OW 45
10623: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10624: LD_VAR 0 16
10628: PPUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: LD_INT 0
10636: PPUSH
10637: CALL_OW 49
// if vehcontrol = 1 then
10641: LD_VAR 0 7
10645: PUSH
10646: LD_INT 1
10648: EQUAL
10649: IFFALSE 10706
// begin hc_gallery =  ;
10651: LD_ADDR_OWVAR 33
10655: PUSH
10656: LD_STRING 
10658: ST_TO_ADDR
// hc_name =  ;
10659: LD_ADDR_OWVAR 26
10663: PUSH
10664: LD_STRING 
10666: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10667: LD_INT 0
10669: PPUSH
10670: LD_INT 3
10672: PPUSH
10673: LD_VAR 0 4
10677: PPUSH
10678: CALL_OW 380
// un = CreateHuman ;
10682: LD_ADDR_VAR 0 15
10686: PUSH
10687: CALL_OW 44
10691: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10692: LD_VAR 0 15
10696: PPUSH
10697: LD_VAR 0 16
10701: PPUSH
10702: CALL_OW 52
// end ; i = i + 1 ;
10706: LD_ADDR_VAR 0 13
10710: PUSH
10711: LD_VAR 0 13
10715: PUSH
10716: LD_INT 1
10718: PLUS
10719: ST_TO_ADDR
// end ; if nation = 3 then
10720: LD_VAR 0 5
10724: PUSH
10725: LD_INT 3
10727: EQUAL
10728: IFFALSE 11120
// begin uc_side = side ;
10730: LD_ADDR_OWVAR 20
10734: PUSH
10735: LD_VAR 0 2
10739: ST_TO_ADDR
// uc_nation = nation ;
10740: LD_ADDR_OWVAR 21
10744: PUSH
10745: LD_VAR 0 5
10749: ST_TO_ADDR
// vc_engine = vehengine ;
10750: LD_ADDR_OWVAR 39
10754: PUSH
10755: LD_VAR 0 6
10759: ST_TO_ADDR
// vc_control = vehcontrol ;
10760: LD_ADDR_OWVAR 38
10764: PUSH
10765: LD_VAR 0 7
10769: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10770: LD_ADDR_OWVAR 40
10774: PUSH
10775: LD_VAR 0 8
10779: PUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_VAR 0 8
10787: PPUSH
10788: CALL_OW 12
10792: ARRAY
10793: ST_TO_ADDR
// for j = 1 to RuWeapons do
10794: LD_ADDR_VAR 0 14
10798: PUSH
10799: DOUBLE
10800: LD_INT 1
10802: DEC
10803: ST_TO_ADDR
10804: LD_VAR 0 8
10808: PUSH
10809: FOR_TO
10810: IFFALSE 11012
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10812: LD_VAR 0 8
10816: PUSH
10817: LD_VAR 0 14
10821: ARRAY
10822: PUSH
10823: LD_INT 42
10825: EQUAL
10826: PUSH
10827: LD_VAR 0 8
10831: PUSH
10832: LD_VAR 0 14
10836: ARRAY
10837: PUSH
10838: LD_INT 43
10840: EQUAL
10841: OR
10842: PUSH
10843: LD_VAR 0 8
10847: PUSH
10848: LD_VAR 0 14
10852: ARRAY
10853: PUSH
10854: LD_INT 44
10856: EQUAL
10857: OR
10858: PUSH
10859: LD_VAR 0 8
10863: PUSH
10864: LD_VAR 0 14
10868: ARRAY
10869: PUSH
10870: LD_INT 45
10872: EQUAL
10873: OR
10874: PUSH
10875: LD_VAR 0 8
10879: PUSH
10880: LD_VAR 0 14
10884: ARRAY
10885: PUSH
10886: LD_INT 49
10888: EQUAL
10889: OR
10890: IFFALSE 10939
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10892: LD_ADDR_VAR 0 17
10896: PUSH
10897: LD_INT 21
10899: PUSH
10900: LD_INT 22
10902: PUSH
10903: LD_INT 23
10905: PUSH
10906: LD_INT 24
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10915: LD_ADDR_OWVAR 37
10919: PUSH
10920: LD_VAR 0 17
10924: PUSH
10925: LD_INT 1
10927: PPUSH
10928: LD_VAR 0 17
10932: PPUSH
10933: CALL_OW 12
10937: ARRAY
10938: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10939: LD_VAR 0 8
10943: PUSH
10944: LD_VAR 0 14
10948: ARRAY
10949: PUSH
10950: LD_INT 46
10952: EQUAL
10953: PUSH
10954: LD_VAR 0 8
10958: PUSH
10959: LD_VAR 0 14
10963: ARRAY
10964: PUSH
10965: LD_INT 47
10967: EQUAL
10968: OR
10969: IFFALSE 11010
// begin ruChassisTab = [ 23 , 24 ] ;
10971: LD_ADDR_VAR 0 17
10975: PUSH
10976: LD_INT 23
10978: PUSH
10979: LD_INT 24
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10986: LD_ADDR_OWVAR 37
10990: PUSH
10991: LD_VAR 0 17
10995: PUSH
10996: LD_INT 1
10998: PPUSH
10999: LD_VAR 0 17
11003: PPUSH
11004: CALL_OW 12
11008: ARRAY
11009: ST_TO_ADDR
// end ; end ;
11010: GO 10809
11012: POP
11013: POP
// veh = CreateVehicle ;
11014: LD_ADDR_VAR 0 16
11018: PUSH
11019: CALL_OW 45
11023: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11024: LD_VAR 0 16
11028: PPUSH
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 49
// if vehcontrol = 1 then
11041: LD_VAR 0 7
11045: PUSH
11046: LD_INT 1
11048: EQUAL
11049: IFFALSE 11106
// begin hc_gallery =  ;
11051: LD_ADDR_OWVAR 33
11055: PUSH
11056: LD_STRING 
11058: ST_TO_ADDR
// hc_name =  ;
11059: LD_ADDR_OWVAR 26
11063: PUSH
11064: LD_STRING 
11066: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11067: LD_INT 0
11069: PPUSH
11070: LD_INT 3
11072: PPUSH
11073: LD_VAR 0 4
11077: PPUSH
11078: CALL_OW 380
// un = CreateHuman ;
11082: LD_ADDR_VAR 0 15
11086: PUSH
11087: CALL_OW 44
11091: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11092: LD_VAR 0 15
11096: PPUSH
11097: LD_VAR 0 16
11101: PPUSH
11102: CALL_OW 52
// end ; i = i + 1 ;
11106: LD_ADDR_VAR 0 13
11110: PUSH
11111: LD_VAR 0 13
11115: PUSH
11116: LD_INT 1
11118: PLUS
11119: ST_TO_ADDR
// end ; until i = vehCount ;
11120: LD_VAR 0 13
11124: PUSH
11125: LD_VAR 0 3
11129: EQUAL
11130: IFFALSE 9782
// repeat wait ( 0 0$1 ) ;
11132: LD_INT 35
11134: PPUSH
11135: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
11139: LD_ADDR_VAR 0 20
11143: PUSH
11144: LD_INT 22
11146: PUSH
11147: LD_VAR 0 2
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 21
11158: PUSH
11159: LD_INT 2
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 24
11168: PUSH
11169: LD_INT 661
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: ST_TO_ADDR
// if vehicleOK_list > 0 then
11186: LD_VAR 0 20
11190: PUSH
11191: LD_INT 0
11193: GREATER
11194: IFFALSE 11385
// begin for i in vehicleOK_list do
11196: LD_ADDR_VAR 0 13
11200: PUSH
11201: LD_VAR 0 20
11205: PUSH
11206: FOR_IN
11207: IFFALSE 11383
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11209: LD_ADDR_VAR 0 21
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 11
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 69
11230: PPUSH
11231: LD_VAR 0 13
11235: PPUSH
11236: CALL_OW 74
11240: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11241: LD_ADDR_VAR 0 22
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_VAR 0 11
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 2
11260: PUSH
11261: LD_INT 59
11263: PUSH
11264: EMPTY
11265: LIST
11266: PUSH
11267: LD_INT 21
11269: PUSH
11270: LD_INT 1
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 21
11279: PUSH
11280: LD_INT 2
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: PPUSH
11300: CALL_OW 69
11304: PPUSH
11305: LD_VAR 0 13
11309: PPUSH
11310: CALL_OW 74
11314: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11315: LD_VAR 0 13
11319: PPUSH
11320: LD_VAR 0 21
11324: PPUSH
11325: CALL_OW 296
11329: PUSH
11330: LD_INT 8
11332: PLUS
11333: PUSH
11334: LD_VAR 0 13
11338: PPUSH
11339: LD_VAR 0 22
11343: PPUSH
11344: CALL_OW 296
11348: LESS
11349: IFFALSE 11367
// begin ComAttackUnit ( i , target1 ) ;
11351: LD_VAR 0 13
11355: PPUSH
11356: LD_VAR 0 21
11360: PPUSH
11361: CALL_OW 115
// end else
11365: GO 11381
// begin ComAttackUnit ( i , target2 ) ;
11367: LD_VAR 0 13
11371: PPUSH
11372: LD_VAR 0 22
11376: PPUSH
11377: CALL_OW 115
// end ; end ;
11381: GO 11206
11383: POP
11384: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 ;
11385: LD_INT 22
11387: PUSH
11388: LD_VAR 0 2
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 21
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 69
11415: PUSH
11416: LD_INT 0
11418: EQUAL
11419: IFFALSE 11132
// end ; end_of_file
11421: LD_VAR 0 12
11425: RET
// every 1 do var i , gammaSquad , startX , startY ;
11426: GO 11428
11428: DISABLE
11429: LD_INT 0
11431: PPUSH
11432: PPUSH
11433: PPUSH
11434: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11435: LD_ADDR_VAR 0 2
11439: PUSH
11440: LD_EXP 8
11444: PUSH
11445: LD_EXP 9
11449: PUSH
11450: LD_EXP 10
11454: PUSH
11455: LD_EXP 11
11459: PUSH
11460: LD_EXP 12
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11472: LD_ADDR_VAR 0 3
11476: PUSH
11477: LD_INT 46
11479: PUSH
11480: LD_INT 45
11482: PUSH
11483: LD_INT 44
11485: PUSH
11486: LD_INT 43
11488: PUSH
11489: LD_INT 42
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11499: LD_ADDR_VAR 0 4
11503: PUSH
11504: LD_INT 14
11506: PUSH
11507: LD_INT 12
11509: PUSH
11510: LD_INT 10
11512: PUSH
11513: LD_INT 8
11515: PUSH
11516: LD_INT 6
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11526: LD_INT 32
11528: PPUSH
11529: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11533: LD_INT 32
11535: PPUSH
11536: LD_INT 51
11538: PPUSH
11539: LD_INT 26
11541: PPUSH
11542: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11546: LD_INT 32
11548: PPUSH
11549: LD_INT 53
11551: PPUSH
11552: LD_INT 23
11554: PPUSH
11555: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11559: LD_INT 32
11561: PPUSH
11562: LD_INT 52
11564: PPUSH
11565: LD_INT 19
11567: PPUSH
11568: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11572: LD_INT 35
11574: PPUSH
11575: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11579: LD_INT 32
11581: PPUSH
11582: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11586: LD_INT 32
11588: PPUSH
11589: CALL_OW 250
11593: PUSH
11594: LD_INT 52
11596: EQUAL
11597: PUSH
11598: LD_INT 32
11600: PPUSH
11601: CALL_OW 251
11605: PUSH
11606: LD_INT 19
11608: EQUAL
11609: AND
11610: IFFALSE 11572
// ComExitVehicle ( JMM ) ;
11612: LD_EXP 1
11616: PPUSH
11617: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11621: LD_EXP 7
11625: PPUSH
11626: LD_EXP 1
11630: PPUSH
11631: CALL_OW 119
// wait ( 0 0$01 ) ;
11635: LD_INT 35
11637: PPUSH
11638: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11642: LD_EXP 1
11646: PPUSH
11647: LD_INT 46
11649: PPUSH
11650: LD_INT 10
11652: PPUSH
11653: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11657: LD_EXP 1
11661: PPUSH
11662: LD_EXP 7
11666: PPUSH
11667: CALL_OW 179
// wait ( 0 0$4 ) ;
11671: LD_INT 140
11673: PPUSH
11674: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11678: LD_EXP 1
11682: PPUSH
11683: LD_STRING D1-JMM-1
11685: PPUSH
11686: CALL_OW 88
// if not dialogue_skipped then
11690: LD_OWVAR 59
11694: NOT
11695: IFFALSE 12352
// begin for i := 1 to gammaSquad do
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: DOUBLE
11703: LD_INT 1
11705: DEC
11706: ST_TO_ADDR
11707: LD_VAR 0 2
11711: PUSH
11712: FOR_TO
11713: IFFALSE 11774
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11715: LD_VAR 0 2
11719: PUSH
11720: LD_VAR 0 1
11724: ARRAY
11725: PPUSH
11726: LD_VAR 0 3
11730: PUSH
11731: LD_VAR 0 1
11735: ARRAY
11736: PPUSH
11737: LD_VAR 0 4
11741: PUSH
11742: LD_VAR 0 1
11746: ARRAY
11747: PPUSH
11748: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11752: LD_VAR 0 2
11756: PUSH
11757: LD_VAR 0 1
11761: ARRAY
11762: PPUSH
11763: LD_EXP 1
11767: PPUSH
11768: CALL_OW 179
// end ;
11772: GO 11712
11774: POP
11775: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11776: LD_EXP 4
11780: PPUSH
11781: LD_INT 41
11783: PPUSH
11784: LD_INT 4
11786: PPUSH
11787: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11791: LD_EXP 4
11795: PPUSH
11796: LD_EXP 1
11800: PPUSH
11801: CALL_OW 179
// if Lisa = false and Bobby then
11805: LD_EXP 4
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: PUSH
11814: LD_EXP 2
11818: AND
11819: IFFALSE 11850
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11821: LD_EXP 2
11825: PPUSH
11826: LD_INT 41
11828: PPUSH
11829: LD_INT 4
11831: PPUSH
11832: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11836: LD_EXP 2
11840: PPUSH
11841: LD_EXP 1
11845: PPUSH
11846: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11850: LD_EXP 4
11854: PUSH
11855: LD_INT 0
11857: EQUAL
11858: PUSH
11859: LD_EXP 2
11863: PUSH
11864: LD_INT 0
11866: EQUAL
11867: AND
11868: PUSH
11869: LD_EXP 3
11873: AND
11874: IFFALSE 11905
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11876: LD_EXP 3
11880: PPUSH
11881: LD_INT 41
11883: PPUSH
11884: LD_INT 4
11886: PPUSH
11887: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11891: LD_EXP 3
11895: PPUSH
11896: LD_EXP 1
11900: PPUSH
11901: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11905: LD_EXP 4
11909: PUSH
11910: LD_INT 0
11912: EQUAL
11913: PUSH
11914: LD_EXP 2
11918: PUSH
11919: LD_INT 0
11921: EQUAL
11922: AND
11923: PUSH
11924: LD_EXP 3
11928: PUSH
11929: LD_INT 0
11931: EQUAL
11932: AND
11933: IFFALSE 11964
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11935: LD_EXP 6
11939: PPUSH
11940: LD_INT 41
11942: PPUSH
11943: LD_INT 4
11945: PPUSH
11946: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11950: LD_EXP 6
11954: PPUSH
11955: LD_EXP 1
11959: PPUSH
11960: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11964: LD_EXP 7
11968: PPUSH
11969: LD_STRING D1-Brown-1
11971: PPUSH
11972: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11976: LD_EXP 1
11980: PPUSH
11981: LD_STRING D1-JMM-2
11983: PPUSH
11984: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11988: LD_EXP 7
11992: PPUSH
11993: LD_STRING D1-Brown-2
11995: PPUSH
11996: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12000: LD_EXP 1
12004: PPUSH
12005: LD_EXP 9
12009: PPUSH
12010: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12014: LD_EXP 9
12018: PPUSH
12019: LD_STRING D1-FSol1-2
12021: PPUSH
12022: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12026: LD_EXP 1
12030: PPUSH
12031: LD_EXP 8
12035: PPUSH
12036: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12040: LD_EXP 8
12044: PPUSH
12045: LD_STRING D1-Sol2-2
12047: PPUSH
12048: CALL_OW 88
// if Lisa then
12052: LD_EXP 4
12056: IFFALSE 12096
// begin ComTurnUnit ( JMM , Lisa ) ;
12058: LD_EXP 1
12062: PPUSH
12063: LD_EXP 4
12067: PPUSH
12068: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12072: LD_EXP 4
12076: PPUSH
12077: LD_STRING D1-Lisa-2
12079: PPUSH
12080: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12084: LD_EXP 1
12088: PPUSH
12089: LD_STRING D1-JMM-3
12091: PPUSH
12092: CALL_OW 88
// end ; if Bobby then
12096: LD_EXP 2
12100: IFFALSE 12140
// begin ComTurnUnit ( JMM , Bobby ) ;
12102: LD_EXP 1
12106: PPUSH
12107: LD_EXP 2
12111: PPUSH
12112: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12116: LD_EXP 2
12120: PPUSH
12121: LD_STRING D1-Bobby-2
12123: PPUSH
12124: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12128: LD_EXP 1
12132: PPUSH
12133: LD_STRING D1-JMM-3
12135: PPUSH
12136: CALL_OW 88
// end ; if Cyrus then
12140: LD_EXP 3
12144: IFFALSE 12184
// begin ComTurnUnit ( JMM , Cyrus ) ;
12146: LD_EXP 1
12150: PPUSH
12151: LD_EXP 3
12155: PPUSH
12156: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12160: LD_EXP 3
12164: PPUSH
12165: LD_STRING D1-Cyrus-2
12167: PPUSH
12168: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12172: LD_EXP 1
12176: PPUSH
12177: LD_STRING D1-JMM-3
12179: PPUSH
12180: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12184: LD_EXP 1
12188: PPUSH
12189: LD_EXP 7
12193: PPUSH
12194: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12198: LD_EXP 1
12202: PPUSH
12203: LD_STRING D1-JMM-3a
12205: PPUSH
12206: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12210: LD_EXP 7
12214: PPUSH
12215: LD_INT 38
12217: PPUSH
12218: LD_INT 5
12220: PPUSH
12221: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12225: LD_EXP 7
12229: PPUSH
12230: LD_EXP 1
12234: PPUSH
12235: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12239: LD_EXP 1
12243: PPUSH
12244: LD_INT 40
12246: PPUSH
12247: LD_INT 7
12249: PPUSH
12250: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12254: LD_EXP 1
12258: PPUSH
12259: LD_EXP 7
12263: PPUSH
12264: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12268: LD_EXP 7
12272: PPUSH
12273: LD_STRING D1-Brown-3
12275: PPUSH
12276: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12280: LD_EXP 14
12284: PPUSH
12285: LD_STRING D1-Har-3
12287: PPUSH
12288: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12292: LD_EXP 1
12296: PPUSH
12297: LD_STRING D1-JMM-4
12299: PPUSH
12300: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12304: LD_EXP 14
12308: PPUSH
12309: LD_STRING D1-Har-4
12311: PPUSH
12312: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12316: LD_EXP 1
12320: PPUSH
12321: LD_STRING D1-JMM-5
12323: PPUSH
12324: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12328: LD_EXP 14
12332: PPUSH
12333: LD_STRING D1-Har-5
12335: PPUSH
12336: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12340: LD_EXP 1
12344: PPUSH
12345: LD_STRING D1-JMM-6
12347: PPUSH
12348: CALL_OW 88
// end ; InGameOff ;
12352: CALL_OW 9
// PrepareRussianConvoy ;
12356: CALL 2806 0 0
// ChangeMissionObjectives ( M1 ) ;
12360: LD_STRING M1
12362: PPUSH
12363: CALL_OW 337
// SaveForQuickRestart ;
12367: CALL_OW 22
// timerStatus = 1 ;
12371: LD_ADDR_EXP 29
12375: PUSH
12376: LD_INT 1
12378: ST_TO_ADDR
// startTimer = 1 ;
12379: LD_ADDR_EXP 30
12383: PUSH
12384: LD_INT 1
12386: ST_TO_ADDR
// bonusAvalaible = 1 ;
12387: LD_ADDR_EXP 42
12391: PUSH
12392: LD_INT 1
12394: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12395: LD_INT 105
12397: PPUSH
12398: CALL_OW 67
// DialogueOn ;
12402: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12406: LD_EXP 12
12410: PPUSH
12411: LD_STRING D9-Mech1-1
12413: PPUSH
12414: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12418: LD_EXP 1
12422: PPUSH
12423: LD_STRING D9-JMM-1
12425: PPUSH
12426: CALL_OW 88
// DialogueOff ;
12430: CALL_OW 7
// end ;
12434: PPOPN 4
12436: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12437: LD_INT 47
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 321
12447: PUSH
12448: LD_INT 2
12450: EQUAL
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_INT 1
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 21
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 3
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: LIST
12486: PPUSH
12487: CALL_OW 69
12491: PUSH
12492: LD_INT 0
12494: GREATER
12495: AND
12496: IFFALSE 12726
12498: GO 12500
12500: DISABLE
// begin if IsOk ( Campell ) then
12501: LD_EXP 12
12505: PPUSH
12506: CALL_OW 302
12510: IFFALSE 12526
// begin Say ( Campell , D10-Mech1-1 ) ;
12512: LD_EXP 12
12516: PPUSH
12517: LD_STRING D10-Mech1-1
12519: PPUSH
12520: CALL_OW 88
// end else
12524: GO 12726
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12526: LD_INT 22
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 21
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 25
12548: PUSH
12549: LD_INT 3
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 26
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 69
12576: PUSH
12577: LD_EXP 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: PUSH
12585: LD_INT 0
12587: GREATER
12588: DIFF
12589: IFFALSE 12663
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12591: LD_INT 22
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 25
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 26
12623: PUSH
12624: LD_INT 1
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 69
12641: PUSH
12642: LD_EXP 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: DIFF
12650: PPUSH
12651: LD_STRING D10-Mech1-1
12653: PPUSH
12654: LD_STRING D10-Mech1-1
12656: PPUSH
12657: CALL 4050 0 3
// end else
12661: GO 12726
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12663: LD_INT 22
12665: PUSH
12666: LD_INT 1
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 21
12675: PUSH
12676: LD_INT 1
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 26
12685: PUSH
12686: LD_INT 1
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: CALL_OW 69
12706: PUSH
12707: LD_EXP 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: DIFF
12715: PPUSH
12716: LD_STRING D10-Mech1-1
12718: PPUSH
12719: LD_STRING D10-Mech1-1
12721: PPUSH
12722: CALL 4050 0 3
// end ; end ; end ;
12726: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12727: LD_INT 22
12729: PUSH
12730: LD_INT 1
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 32
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PPUSH
12751: CALL_OW 69
12755: PUSH
12756: LD_INT 0
12758: GREATER
12759: PUSH
12760: LD_EXP 32
12764: PUSH
12765: LD_INT 0
12767: EQUAL
12768: AND
12769: IFFALSE 13009
12771: GO 12773
12773: DISABLE
// begin if IsOK ( Claptopn ) then
12774: LD_EXP 11
12778: PPUSH
12779: CALL_OW 302
12783: IFFALSE 12799
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12785: LD_EXP 11
12789: PPUSH
12790: LD_STRING D9b-Eng1-1
12792: PPUSH
12793: CALL_OW 88
// end else
12797: GO 12995
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 21
12811: PUSH
12812: LD_INT 1
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 25
12821: PUSH
12822: LD_INT 3
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 26
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PPUSH
12845: CALL_OW 69
12849: PUSH
12850: LD_EXP 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: PUSH
12858: LD_INT 0
12860: GREATER
12861: DIFF
12862: IFFALSE 12936
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12864: LD_INT 22
12866: PUSH
12867: LD_INT 1
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 21
12876: PUSH
12877: LD_INT 1
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 25
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 26
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: PUSH
12915: LD_EXP 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: DIFF
12923: PPUSH
12924: LD_STRING D9b-Eng1-1
12926: PPUSH
12927: LD_STRING D9b-Eng1-11
12929: PPUSH
12930: CALL 4050 0 3
// end else
12934: GO 12995
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12936: LD_INT 22
12938: PUSH
12939: LD_INT 1
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 21
12948: PUSH
12949: LD_INT 1
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 26
12958: PUSH
12959: LD_INT 1
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PUSH
12976: LD_EXP 1
12980: PUSH
12981: EMPTY
12982: LIST
12983: DIFF
12984: PPUSH
12985: LD_STRING D9b-Eng1-1
12987: PPUSH
12988: LD_STRING D9b-Eng1-1
12990: PPUSH
12991: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
12995: LD_EXP 33
12999: PUSH
13000: LD_INT 0
13002: EQUAL
13003: IFFALSE 13009
// EnergyDialog ;
13005: CALL 4541 0 0
// end ;
13009: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13010: LD_EXP 34
13014: PUSH
13015: LD_INT 1
13017: EQUAL
13018: PUSH
13019: LD_EXP 35
13023: PUSH
13024: LD_INT 1
13026: EQUAL
13027: AND
13028: IFFALSE 13040
13030: GO 13032
13032: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13033: LD_STRING M1a
13035: PPUSH
13036: CALL_OW 337
13040: END
// every 3 3$0 do
13041: GO 13043
13043: DISABLE
// begin PrepareFirstAttack ;
13044: CALL 3606 0 0
// end ;
13048: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
13049: LD_INT 22
13051: PUSH
13052: LD_INT 5
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 21
13061: PUSH
13062: LD_INT 1
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PPUSH
13073: CALL_OW 69
13077: PUSH
13078: LD_INT 3
13080: LESSEQUAL
13081: PUSH
13082: LD_EXP 23
13086: PUSH
13087: LD_INT 1
13089: EQUAL
13090: AND
13091: IFFALSE 13409
13093: GO 13095
13095: DISABLE
13096: LD_INT 0
13098: PPUSH
// begin firstRussianAttack = 2 ;
13099: LD_ADDR_EXP 23
13103: PUSH
13104: LD_INT 2
13106: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13107: LD_ADDR_VAR 0 1
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 5
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 21
13124: PUSH
13125: LD_INT 1
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PPUSH
13136: CALL_OW 69
13140: PUSH
13141: FOR_IN
13142: IFFALSE 13161
// ComMoveXY ( i , 125 , 98 ) ;
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_INT 125
13151: PPUSH
13152: LD_INT 98
13154: PPUSH
13155: CALL_OW 111
13159: GO 13141
13161: POP
13162: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13163: LD_INT 22
13165: PUSH
13166: LD_INT 1
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 21
13175: PUSH
13176: LD_INT 1
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: PUSH
13192: LD_EXP 1
13196: PUSH
13197: LD_EXP 7
13201: PUSH
13202: LD_EXP 4
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: DIFF
13212: PPUSH
13213: LD_STRING DAtt1-Sol1-1
13215: PPUSH
13216: LD_STRING DAtt1-FSol1-1
13218: PPUSH
13219: CALL 4050 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13223: LD_EXP 1
13227: PPUSH
13228: LD_STRING DAtt1-JMM-1
13230: PPUSH
13231: CALL_OW 88
// if Lisa then
13235: LD_EXP 4
13239: IFFALSE 13255
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13241: LD_EXP 4
13245: PPUSH
13246: LD_STRING DAtt1a-Lisa-1
13248: PPUSH
13249: CALL_OW 88
// end else
13253: GO 13326
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13255: LD_INT 22
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 26
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 69
13294: PUSH
13295: LD_EXP 1
13299: PUSH
13300: LD_EXP 7
13304: PUSH
13305: LD_EXP 4
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: DIFF
13315: PPUSH
13316: LD_STRING DAtt1a-Sol1-1
13318: PPUSH
13319: LD_STRING DAtt1-FSol1-1
13321: PPUSH
13322: CALL 4050 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13326: LD_EXP 1
13330: PPUSH
13331: LD_STRING DAtt1a-JMM-1
13333: PPUSH
13334: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13338: LD_INT 22
13340: PUSH
13341: LD_INT 1
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 21
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 26
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: PUSH
13378: LD_EXP 1
13382: PUSH
13383: LD_EXP 7
13387: PUSH
13388: LD_EXP 4
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: DIFF
13398: PPUSH
13399: LD_STRING DAtt1b-Sol1-1
13401: PPUSH
13402: LD_STRING DAtt1a-Sol1-1
13404: PPUSH
13405: CALL 4050 0 3
// end ;
13409: PPOPN 1
13411: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13412: LD_EXP 23
13416: PUSH
13417: LD_INT 2
13419: EQUAL
13420: IFFALSE 13482
13422: GO 13424
13424: DISABLE
13425: LD_INT 0
13427: PPUSH
// begin enable ;
13428: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13429: LD_ADDR_VAR 0 1
13433: PUSH
13434: LD_INT 5
13436: PPUSH
13437: LD_INT 22
13439: PUSH
13440: LD_INT 5
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 21
13449: PUSH
13450: LD_INT 1
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PPUSH
13461: CALL_OW 70
13465: PUSH
13466: FOR_IN
13467: IFFALSE 13480
// RemoveUnit ( i ) ;
13469: LD_VAR 0 1
13473: PPUSH
13474: CALL_OW 64
13478: GO 13466
13480: POP
13481: POP
// end ;
13482: PPOPN 1
13484: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13485: LD_INT 22
13487: PUSH
13488: LD_INT 5
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PUSH
13503: LD_INT 0
13505: EQUAL
13506: PUSH
13507: LD_EXP 23
13511: PUSH
13512: LD_INT 2
13514: EQUAL
13515: AND
13516: IFFALSE 13529
13518: GO 13520
13520: DISABLE
// firstRussianAttack = 3 ;
13521: LD_ADDR_EXP 23
13525: PUSH
13526: LD_INT 3
13528: ST_TO_ADDR
13529: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13530: LD_EXP 28
13534: PUSH
13535: LD_INT 0
13537: EQUAL
13538: IFFALSE 13619
13540: GO 13542
13542: DISABLE
// begin timerStatus = 4 ;
13543: LD_ADDR_EXP 29
13547: PUSH
13548: LD_INT 4
13550: ST_TO_ADDR
// DialogueOn ;
13551: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13555: LD_EXP 13
13559: PPUSH
13560: LD_STRING D2-Don-1
13562: PPUSH
13563: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13567: LD_EXP 1
13571: PPUSH
13572: LD_STRING D2-JMM-1
13574: PPUSH
13575: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13579: LD_EXP 13
13583: PPUSH
13584: LD_STRING D2-Don-2
13586: PPUSH
13587: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13591: LD_EXP 1
13595: PPUSH
13596: LD_STRING D2-JMM-2
13598: PPUSH
13599: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13603: LD_EXP 13
13607: PPUSH
13608: LD_STRING D2-Don-3
13610: PPUSH
13611: CALL_OW 94
// DialogueOff ;
13615: CALL_OW 7
// end ;
13619: END
// every 12 12$0 do var tmp ;
13620: GO 13622
13622: DISABLE
13623: LD_INT 0
13625: PPUSH
// begin PrepareDonaldsonArmy ;
13626: CALL 999 0 0
// CenterNowOnUnits ( Donaldson ) ;
13630: LD_EXP 13
13634: PPUSH
13635: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13639: LD_ADDR_VAR 0 1
13643: PUSH
13644: LD_INT 22
13646: PUSH
13647: LD_INT 4
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 21
13656: PUSH
13657: LD_INT 1
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 26
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 25
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: PUSH
13695: LD_EXP 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: DIFF
13703: ST_TO_ADDR
// DialogueOn ;
13704: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13708: LD_VAR 0 1
13712: PPUSH
13713: LD_STRING D3-Sol1-1
13715: PPUSH
13716: LD_STRING D3-Sol1-1
13718: PPUSH
13719: CALL 4050 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13723: LD_INT 22
13725: PUSH
13726: LD_INT 4
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 1
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 26
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 25
13755: PUSH
13756: LD_INT 3
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: PPUSH
13774: LD_STRING D3-Sol2-1
13776: PPUSH
13777: LD_STRING D3-Sol2-1
13779: PPUSH
13780: CALL 4050 0 3
// if Frank then
13784: LD_EXP 5
13788: IFFALSE 13802
// Say ( Frank , D3-Frank-1 ) ;
13790: LD_EXP 5
13794: PPUSH
13795: LD_STRING D3-Frank-1
13797: PPUSH
13798: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13802: LD_EXP 13
13806: PPUSH
13807: LD_STRING D3-Don-1
13809: PPUSH
13810: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13814: LD_EXP 13
13818: PPUSH
13819: LD_STRING D3-Don-1a
13821: PPUSH
13822: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13826: LD_EXP 1
13830: PPUSH
13831: LD_STRING D3-JMM-1
13833: PPUSH
13834: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13838: LD_EXP 13
13842: PPUSH
13843: LD_STRING D3-Don-2
13845: PPUSH
13846: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13850: LD_INT 22
13852: PUSH
13853: LD_INT 6
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 21
13862: PUSH
13863: LD_INT 1
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: PUSH
13879: LD_INT 0
13881: GREATER
13882: IFFALSE 13996
// begin Say ( JMM , D3-JMM-2 ) ;
13884: LD_EXP 1
13888: PPUSH
13889: LD_STRING D3-JMM-2
13891: PPUSH
13892: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13896: LD_EXP 13
13900: PPUSH
13901: LD_STRING D3-Don-3
13903: PPUSH
13904: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13908: LD_EXP 1
13912: PPUSH
13913: LD_STRING D3-JMM-3
13915: PPUSH
13916: CALL_OW 88
// if IsOK ( Frank ) then
13920: LD_EXP 5
13924: PPUSH
13925: CALL_OW 302
13929: IFFALSE 13943
// Say ( Frank , D3-Frank-3 ) ;
13931: LD_EXP 5
13935: PPUSH
13936: LD_STRING D3-Frank-3
13938: PPUSH
13939: CALL_OW 88
// DialogueOff ;
13943: CALL_OW 7
// if IsOK ( Frank ) then
13947: LD_EXP 5
13951: PPUSH
13952: CALL_OW 302
13956: IFFALSE 13994
// begin SetSide ( Frank , 0 ) ;
13958: LD_EXP 5
13962: PPUSH
13963: LD_INT 0
13965: PPUSH
13966: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13970: LD_EXP 5
13974: PPUSH
13975: LD_INT 12
13977: PPUSH
13978: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13982: LD_EXP 5
13986: PPUSH
13987: LD_STRING Frank
13989: PPUSH
13990: CALL_OW 38
// end ; end else
13994: GO 14059
// begin Say ( JMM , D3-JMM-4 ) ;
13996: LD_EXP 1
14000: PPUSH
14001: LD_STRING D3-JMM-4
14003: PPUSH
14004: CALL_OW 88
// DialogueOff ;
14008: CALL_OW 7
// if IsOK ( Frank ) then
14012: LD_EXP 5
14016: PPUSH
14017: CALL_OW 302
14021: IFFALSE 14059
// begin SetSide ( Frank , 0 ) ;
14023: LD_EXP 5
14027: PPUSH
14028: LD_INT 0
14030: PPUSH
14031: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14035: LD_EXP 5
14039: PPUSH
14040: LD_INT 12
14042: PPUSH
14043: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
14047: LD_EXP 5
14051: PPUSH
14052: LD_STRING Frank
14054: PPUSH
14055: CALL_OW 38
// end ; end ; end ;
14059: PPOPN 1
14061: END
// every 1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
14062: LD_EXP 5
14066: PPUSH
14067: LD_INT 12
14069: PPUSH
14070: CALL_OW 308
14074: PUSH
14075: LD_EXP 5
14079: PPUSH
14080: CALL_OW 255
14084: PUSH
14085: LD_INT 0
14087: EQUAL
14088: AND
14089: IFFALSE 14111
14091: GO 14093
14093: DISABLE
// begin RemoveUnit ( Frank ) ;
14094: LD_EXP 5
14098: PPUSH
14099: CALL_OW 64
// frankScoutBase = 1 ;
14103: LD_ADDR_EXP 25
14107: PUSH
14108: LD_INT 1
14110: ST_TO_ADDR
// end ;
14111: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
14112: LD_EXP 13
14116: PPUSH
14117: CALL_OW 255
14121: PUSH
14122: LD_INT 4
14124: EQUAL
14125: PUSH
14126: LD_EXP 13
14130: PPUSH
14131: CALL_OW 302
14135: AND
14136: IFFALSE 14161
14138: GO 14140
14140: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14141: LD_EXP 13
14145: PPUSH
14146: LD_STRING D3b-Don-1
14148: PPUSH
14149: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14153: LD_ADDR_EXP 41
14157: PUSH
14158: LD_INT 1
14160: ST_TO_ADDR
// end ;
14161: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
14162: LD_EXP 24
14166: PUSH
14167: LD_INT 0
14169: EQUAL
14170: IFFALSE 14326
14172: GO 14174
14174: DISABLE
14175: LD_INT 0
14177: PPUSH
14178: PPUSH
// begin enable ;
14179: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
14180: LD_ADDR_VAR 0 1
14184: PUSH
14185: LD_INT 22
14187: PUSH
14188: LD_INT 4
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 21
14197: PUSH
14198: LD_INT 1
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PPUSH
14209: CALL_OW 69
14213: PUSH
14214: FOR_IN
14215: IFFALSE 14324
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
14217: LD_ADDR_VAR 0 2
14221: PUSH
14222: LD_INT 22
14224: PUSH
14225: LD_INT 1
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: LD_INT 21
14234: PUSH
14235: LD_INT 1
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PPUSH
14246: CALL_OW 69
14250: PUSH
14251: FOR_IN
14252: IFFALSE 14320
// begin if GetDistUnits ( i , j ) < 7 then
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_VAR 0 2
14263: PPUSH
14264: CALL_OW 296
14268: PUSH
14269: LD_INT 7
14271: LESS
14272: IFFALSE 14318
// begin saveDonaldson = 1 ;
14274: LD_ADDR_EXP 24
14278: PUSH
14279: LD_INT 1
14281: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14282: LD_INT 22
14284: PUSH
14285: LD_INT 4
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 69
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: CALL_OW 235
// end ; end ;
14318: GO 14251
14320: POP
14321: POP
// end ;
14322: GO 14214
14324: POP
14325: POP
// end ;
14326: PPOPN 2
14328: END
// every 2 2$0 trigger saveDonaldson = 1 do
14329: LD_EXP 24
14333: PUSH
14334: LD_INT 1
14336: EQUAL
14337: IFFALSE 14579
14339: GO 14341
14341: DISABLE
// begin uc_side = 4 ;
14342: LD_ADDR_OWVAR 20
14346: PUSH
14347: LD_INT 4
14349: ST_TO_ADDR
// uc_nation = 1 ;
14350: LD_ADDR_OWVAR 21
14354: PUSH
14355: LD_INT 1
14357: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
14358: LD_ADDR_EXP 5
14362: PUSH
14363: LD_STRING Frank
14365: PPUSH
14366: CALL_OW 34
14370: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14371: LD_EXP 5
14375: PPUSH
14376: LD_INT 13
14378: PPUSH
14379: LD_INT 0
14381: PPUSH
14382: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14386: LD_INT 35
14388: PPUSH
14389: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
14393: LD_EXP 5
14397: PPUSH
14398: LD_INT 51
14400: PPUSH
14401: LD_INT 15
14403: PPUSH
14404: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
14408: LD_EXP 5
14412: PPUSH
14413: LD_EXP 1
14417: PPUSH
14418: CALL_OW 296
14422: PUSH
14423: LD_INT 6
14425: LESS
14426: IFFALSE 14386
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14428: LD_EXP 1
14432: PUSH
14433: LD_EXP 5
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 87
// DialogueOn ;
14446: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14450: LD_EXP 5
14454: PPUSH
14455: LD_STRING D3a-Frank-1
14457: PPUSH
14458: CALL_OW 88
// if Lisa then
14462: LD_EXP 4
14466: IFFALSE 14516
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14468: LD_EXP 4
14472: PPUSH
14473: LD_STRING D3a-Lisa-1
14475: PPUSH
14476: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14480: LD_EXP 5
14484: PPUSH
14485: LD_STRING D3a-Frank-2
14487: PPUSH
14488: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14492: LD_EXP 4
14496: PPUSH
14497: LD_STRING D3a-Lisa-2
14499: PPUSH
14500: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14504: LD_EXP 5
14508: PPUSH
14509: LD_STRING D3a-Frank-3
14511: PPUSH
14512: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14516: LD_EXP 1
14520: PPUSH
14521: LD_STRING D3a-JMM-3
14523: PPUSH
14524: CALL_OW 88
// DialogueOff ;
14528: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14532: LD_EXP 5
14536: PPUSH
14537: LD_INT 1
14539: PPUSH
14540: CALL_OW 235
// InGameOn ;
14544: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14548: LD_INT 1
14550: PPUSH
14551: LD_INT 7
14553: PPUSH
14554: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14558: LD_INT 93
14560: PPUSH
14561: LD_INT 91
14563: PPUSH
14564: CALL_OW 84
// wait ( 0 0$5 ) ;
14568: LD_INT 175
14570: PPUSH
14571: CALL_OW 67
// InGameOff ;
14575: CALL_OW 9
// end ;
14579: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14580: LD_OWVAR 67
14584: PUSH
14585: LD_INT 2
14587: EQUAL
14588: PUSH
14589: LD_OWVAR 67
14593: PUSH
14594: LD_INT 3
14596: EQUAL
14597: OR
14598: IFFALSE 14622
14600: GO 14602
14602: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14603: LD_INT 24
14605: PPUSH
14606: LD_INT 24
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_INT 1
14614: PPUSH
14615: LD_INT 53
14617: PPUSH
14618: CALL_OW 125
14622: END
// every 18 18$0 do
14623: GO 14625
14625: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14626: LD_EXP 14
14630: PPUSH
14631: LD_STRING D4-Har-1
14633: PPUSH
14634: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14638: LD_EXP 1
14642: PPUSH
14643: LD_STRING D4-JMM-1
14645: PPUSH
14646: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14650: LD_EXP 14
14654: PPUSH
14655: LD_STRING D4-Har-2
14657: PPUSH
14658: CALL_OW 94
// case query ( Q1 ) of 1 :
14662: LD_STRING Q1
14664: PPUSH
14665: CALL_OW 97
14669: PUSH
14670: LD_INT 1
14672: DOUBLE
14673: EQUAL
14674: IFTRUE 14678
14676: GO 14737
14678: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14679: LD_EXP 1
14683: PPUSH
14684: LD_STRING D5-JMM-1
14686: PPUSH
14687: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14691: LD_EXP 14
14695: PPUSH
14696: LD_STRING D5-Har-1
14698: PPUSH
14699: CALL_OW 94
// timeToSupport = 10 10$0 ;
14703: LD_ADDR_EXP 28
14707: PUSH
14708: LD_INT 21000
14710: ST_TO_ADDR
// timerStatus = 2 ;
14711: LD_ADDR_EXP 29
14715: PUSH
14716: LD_INT 2
14718: ST_TO_ADDR
// startTimer = 1 ;
14719: LD_ADDR_EXP 30
14723: PUSH
14724: LD_INT 1
14726: ST_TO_ADDR
// harrAnswer = 1 ;
14727: LD_ADDR_EXP 26
14731: PUSH
14732: LD_INT 1
14734: ST_TO_ADDR
// end ; 2 :
14735: GO 14872
14737: LD_INT 2
14739: DOUBLE
14740: EQUAL
14741: IFTRUE 14745
14743: GO 14804
14745: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14746: LD_EXP 1
14750: PPUSH
14751: LD_STRING D5-JMM-2
14753: PPUSH
14754: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14758: LD_EXP 14
14762: PPUSH
14763: LD_STRING D5-Har-2
14765: PPUSH
14766: CALL_OW 94
// timeToSupport = 5 5$0 ;
14770: LD_ADDR_EXP 28
14774: PUSH
14775: LD_INT 10500
14777: ST_TO_ADDR
// timerStatus = 2 ;
14778: LD_ADDR_EXP 29
14782: PUSH
14783: LD_INT 2
14785: ST_TO_ADDR
// startTimer = 1 ;
14786: LD_ADDR_EXP 30
14790: PUSH
14791: LD_INT 1
14793: ST_TO_ADDR
// harrAnswer = 2 ;
14794: LD_ADDR_EXP 26
14798: PUSH
14799: LD_INT 2
14801: ST_TO_ADDR
// end ; 3 :
14802: GO 14872
14804: LD_INT 3
14806: DOUBLE
14807: EQUAL
14808: IFTRUE 14812
14810: GO 14871
14812: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14813: LD_EXP 1
14817: PPUSH
14818: LD_STRING D5-JMM-3
14820: PPUSH
14821: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14825: LD_EXP 14
14829: PPUSH
14830: LD_STRING D5-Har-3
14832: PPUSH
14833: CALL_OW 94
// timeToSupport = 5 5$0 ;
14837: LD_ADDR_EXP 28
14841: PUSH
14842: LD_INT 10500
14844: ST_TO_ADDR
// timerStatus = 2 ;
14845: LD_ADDR_EXP 29
14849: PUSH
14850: LD_INT 2
14852: ST_TO_ADDR
// startTimer = 1 ;
14853: LD_ADDR_EXP 30
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// harrAnswer = 3 ;
14861: LD_ADDR_EXP 26
14865: PUSH
14866: LD_INT 3
14868: ST_TO_ADDR
// end ; end ;
14869: GO 14872
14871: POP
// end ;
14872: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14873: LD_EXP 29
14877: PUSH
14878: LD_INT 2
14880: EQUAL
14881: PUSH
14882: LD_EXP 28
14886: PUSH
14887: LD_INT 0
14889: EQUAL
14890: AND
14891: IFFALSE 15168
14893: GO 14895
14895: DISABLE
// begin timerStatus = 4 ;
14896: LD_ADDR_EXP 29
14900: PUSH
14901: LD_INT 4
14903: ST_TO_ADDR
// if harrAnswer = 1 then
14904: LD_EXP 26
14908: PUSH
14909: LD_INT 1
14911: EQUAL
14912: IFFALSE 14992
// begin PrepareHarrisonSupport ( 3 ) ;
14914: LD_INT 3
14916: PPUSH
14917: CALL 1563 0 1
// wait ( 1 1$0 ) ;
14921: LD_INT 2100
14923: PPUSH
14924: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14928: LD_EXP 14
14932: PPUSH
14933: LD_STRING D7-Har-1
14935: PPUSH
14936: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14940: LD_STRING M2
14942: PPUSH
14943: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14947: LD_ADDR_EXP 27
14951: PUSH
14952: LD_INT 31500
14954: PUSH
14955: LD_INT 10500
14957: PUSH
14958: LD_INT 8400
14960: PUSH
14961: LD_INT 6300
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: PUSH
14969: LD_OWVAR 67
14973: ARRAY
14974: PLUS
14975: ST_TO_ADDR
// startTimer = 1 ;
14976: LD_ADDR_EXP 30
14980: PUSH
14981: LD_INT 1
14983: ST_TO_ADDR
// timerStatus = 3 ;
14984: LD_ADDR_EXP 29
14988: PUSH
14989: LD_INT 3
14991: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14992: LD_EXP 26
14996: PUSH
14997: LD_INT 2
14999: EQUAL
15000: IFFALSE 15080
// begin PrepareHarrisonSupport ( 4 ) ;
15002: LD_INT 4
15004: PPUSH
15005: CALL 1563 0 1
// wait ( 1 1$0 ) ;
15009: LD_INT 2100
15011: PPUSH
15012: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15016: LD_EXP 14
15020: PPUSH
15021: LD_STRING D7-Har-1
15023: PPUSH
15024: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15028: LD_STRING M2
15030: PPUSH
15031: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15035: LD_ADDR_EXP 27
15039: PUSH
15040: LD_INT 27300
15042: PUSH
15043: LD_INT 8400
15045: PUSH
15046: LD_INT 8400
15048: PUSH
15049: LD_INT 6300
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: PUSH
15057: LD_OWVAR 67
15061: ARRAY
15062: PLUS
15063: ST_TO_ADDR
// startTimer = 1 ;
15064: LD_ADDR_EXP 30
15068: PUSH
15069: LD_INT 1
15071: ST_TO_ADDR
// timerStatus = 3 ;
15072: LD_ADDR_EXP 29
15076: PUSH
15077: LD_INT 3
15079: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15080: LD_EXP 26
15084: PUSH
15085: LD_INT 3
15087: EQUAL
15088: IFFALSE 15168
// begin PrepareHarrisonSupport ( 5 ) ;
15090: LD_INT 5
15092: PPUSH
15093: CALL 1563 0 1
// wait ( 1 1$0 ) ;
15097: LD_INT 2100
15099: PPUSH
15100: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15104: LD_EXP 14
15108: PPUSH
15109: LD_STRING D7-Har-1
15111: PPUSH
15112: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15116: LD_STRING M2
15118: PPUSH
15119: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15123: LD_ADDR_EXP 27
15127: PUSH
15128: LD_INT 21000
15130: PUSH
15131: LD_INT 8400
15133: PUSH
15134: LD_INT 6300
15136: PUSH
15137: LD_INT 4200
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: PUSH
15145: LD_OWVAR 67
15149: ARRAY
15150: PLUS
15151: ST_TO_ADDR
// startTimer = 1 ;
15152: LD_ADDR_EXP 30
15156: PUSH
15157: LD_INT 1
15159: ST_TO_ADDR
// timerStatus = 3 ;
15160: LD_ADDR_EXP 29
15164: PUSH
15165: LD_INT 3
15167: ST_TO_ADDR
// end ; end ;
15168: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15169: LD_EXP 27
15173: PUSH
15174: LD_INT 8400
15176: LESSEQUAL
15177: PUSH
15178: LD_EXP 29
15182: PUSH
15183: LD_INT 3
15185: EQUAL
15186: AND
15187: IFFALSE 15219
15189: GO 15191
15191: DISABLE
// begin DialogueOn ;
15192: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15196: LD_EXP 14
15200: PPUSH
15201: LD_STRING D7a-Har-1
15203: PPUSH
15204: CALL_OW 94
// DialogueOff ;
15208: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15212: LD_STRING M2a
15214: PPUSH
15215: CALL_OW 337
// end ;
15219: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
15220: LD_EXP 27
15224: PUSH
15225: LD_INT 0
15227: LESSEQUAL
15228: PUSH
15229: LD_EXP 29
15233: PUSH
15234: LD_INT 3
15236: EQUAL
15237: AND
15238: IFFALSE 15363
15240: GO 15242
15242: DISABLE
15243: LD_INT 0
15245: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15246: LD_ADDR_VAR 0 1
15250: PUSH
15251: LD_INT 22
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: PUSH
15266: LD_EXP 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: DIFF
15274: ST_TO_ADDR
// saveDonaldson = 2 ;
15275: LD_ADDR_EXP 24
15279: PUSH
15280: LD_INT 2
15282: ST_TO_ADDR
// DialogueOn ;
15283: CALL_OW 6
// if IsOK ( Donaldson ) then
15287: LD_EXP 13
15291: PPUSH
15292: CALL_OW 302
15296: IFFALSE 15312
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15298: LD_EXP 14
15302: PPUSH
15303: LD_STRING D8-Har-1
15305: PPUSH
15306: CALL_OW 94
// end else
15310: GO 15324
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15312: LD_EXP 14
15316: PPUSH
15317: LD_STRING D8-Har-1a
15319: PPUSH
15320: CALL_OW 94
// end ; DialogueOff ;
15324: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15328: LD_VAR 0 1
15332: PPUSH
15333: LD_INT 4
15335: PPUSH
15336: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15340: LD_VAR 0 1
15344: PPUSH
15345: LD_INT 88
15347: PPUSH
15348: LD_INT 89
15350: PPUSH
15351: CALL_OW 114
// honor = 0 ;
15355: LD_ADDR_EXP 39
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// end ;
15363: PPOPN 1
15365: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15366: LD_INT 22
15368: PUSH
15369: LD_INT 6
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 21
15378: PUSH
15379: LD_INT 1
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PPUSH
15390: CALL_OW 69
15394: PUSH
15395: LD_INT 0
15397: EQUAL
15398: PUSH
15399: LD_EXP 20
15403: PUSH
15404: LD_INT 0
15406: EQUAL
15407: AND
15408: PUSH
15409: LD_EXP 42
15413: PUSH
15414: LD_INT 1
15416: EQUAL
15417: AND
15418: IFFALSE 15512
15420: GO 15422
15422: DISABLE
15423: LD_INT 0
15425: PPUSH
15426: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15427: LD_ADDR_VAR 0 2
15431: PUSH
15432: LD_INT 22
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 21
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 23
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 69
15471: ST_TO_ADDR
// for i in tmp do
15472: LD_ADDR_VAR 0 1
15476: PUSH
15477: LD_VAR 0 2
15481: PUSH
15482: FOR_IN
15483: IFFALSE 15510
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_INT 4
15495: PPUSH
15496: CALL_OW 12
15500: PPUSH
15501: LD_INT 500
15503: PPUSH
15504: CALL_OW 492
// end ;
15508: GO 15482
15510: POP
15511: POP
// end ; end_of_file
15512: PPOPN 2
15514: END
// every 0 0$1 trigger AIEnable = 1 do
15515: LD_EXP 37
15519: PUSH
15520: LD_INT 1
15522: EQUAL
15523: IFFALSE 15627
15525: GO 15527
15527: DISABLE
// begin enable ;
15528: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15529: LD_INT 3
15531: PPUSH
15532: LD_INT 21
15534: PPUSH
15535: LD_INT 7
15537: PPUSH
15538: CALL 5574 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15542: LD_INT 3
15544: PPUSH
15545: LD_INT 8
15547: PPUSH
15548: LD_INT 7
15550: PPUSH
15551: LD_INT 1
15553: PPUSH
15554: CALL 5900 0 4
// RepairVehicle ( 3 , RussianAttackRepair , 108 , 95 ) ;
15558: LD_INT 3
15560: PPUSH
15561: LD_INT 17
15563: PPUSH
15564: LD_INT 108
15566: PPUSH
15567: LD_INT 95
15569: PPUSH
15570: CALL 8985 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
15574: LD_INT 3
15576: PPUSH
15577: LD_INT 1
15579: PPUSH
15580: CALL 6493 0 2
// if baseReadyToBuild = 2 then
15584: LD_EXP 20
15588: PUSH
15589: LD_INT 2
15591: EQUAL
15592: IFFALSE 15627
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15594: LD_INT 6
15596: PPUSH
15597: LD_EXP 21
15601: PPUSH
15602: LD_INT 6
15604: PPUSH
15605: CALL 5574 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15609: LD_INT 6
15611: PPUSH
15612: LD_INT 9
15614: PPUSH
15615: LD_INT 6
15617: PPUSH
15618: LD_EXP 22
15622: PPUSH
15623: CALL 5900 0 4
// end ; end ;
15627: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15628: LD_INT 22
15630: PUSH
15631: LD_INT 3
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 2
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 55
15650: PUSH
15651: EMPTY
15652: LIST
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: LD_INT 34
15659: PUSH
15660: LD_INT 51
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PPUSH
15677: CALL_OW 69
15681: PUSH
15682: LD_INT 0
15684: EQUAL
15685: PUSH
15686: LD_INT 1
15688: PPUSH
15689: CALL_OW 255
15693: PUSH
15694: LD_INT 3
15696: EQUAL
15697: AND
15698: PUSH
15699: LD_INT 21
15701: PPUSH
15702: CALL_OW 302
15706: AND
15707: PUSH
15708: LD_INT 21
15710: PPUSH
15711: CALL_OW 255
15715: PUSH
15716: LD_INT 3
15718: EQUAL
15719: AND
15720: PUSH
15721: LD_INT 21
15723: PPUSH
15724: CALL_OW 302
15728: AND
15729: IFFALSE 15934
15731: GO 15733
15733: DISABLE
// begin enable ;
15734: ENABLE
// if Difficulty = 1 then
15735: LD_OWVAR 67
15739: PUSH
15740: LD_INT 1
15742: EQUAL
15743: IFFALSE 15787
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15745: LD_INT 3
15747: PPUSH
15748: LD_INT 24
15750: PPUSH
15751: LD_OWVAR 67
15755: PUSH
15756: LD_INT 2
15758: PLUS
15759: PPUSH
15760: LD_INT 42
15762: PUSH
15763: LD_INT 42
15765: PUSH
15766: LD_INT 43
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: LIST
15773: PPUSH
15774: LD_INT 1
15776: PPUSH
15777: LD_INT 1
15779: PPUSH
15780: LD_INT 21
15782: PPUSH
15783: CALL 6339 0 7
// if Difficulty = 2 then
15787: LD_OWVAR 67
15791: PUSH
15792: LD_INT 2
15794: EQUAL
15795: IFFALSE 15862
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15797: LD_INT 3
15799: PPUSH
15800: LD_INT 24
15802: PPUSH
15803: LD_OWVAR 67
15807: PUSH
15808: LD_INT 2
15810: PLUS
15811: PPUSH
15812: LD_INT 42
15814: PUSH
15815: LD_INT 42
15817: PUSH
15818: LD_INT 43
15820: PUSH
15821: LD_INT 43
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: PPUSH
15830: LD_INT 1
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: LD_INT 21
15838: PUSH
15839: LD_INT 22
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 1
15848: PPUSH
15849: LD_INT 2
15851: PPUSH
15852: CALL_OW 12
15856: ARRAY
15857: PPUSH
15858: CALL 6339 0 7
// if Difficulty = 3 then
15862: LD_OWVAR 67
15866: PUSH
15867: LD_INT 3
15869: EQUAL
15870: IFFALSE 15934
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15872: LD_INT 3
15874: PPUSH
15875: LD_INT 24
15877: PPUSH
15878: LD_OWVAR 67
15882: PUSH
15883: LD_INT 2
15885: PPUSH
15886: LD_INT 3
15888: PPUSH
15889: CALL_OW 12
15893: PLUS
15894: PPUSH
15895: LD_INT 43
15897: PUSH
15898: LD_INT 43
15900: PUSH
15901: LD_INT 43
15903: PUSH
15904: LD_INT 43
15906: PUSH
15907: LD_INT 44
15909: PUSH
15910: LD_INT 44
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: PPUSH
15921: LD_INT 1
15923: PPUSH
15924: LD_INT 1
15926: PPUSH
15927: LD_INT 22
15929: PPUSH
15930: CALL 6339 0 7
// end ;
15934: END
// every 0 0$1 do
15935: GO 15937
15937: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15938: LD_INT 3
15940: PPUSH
15941: LD_INT 1
15943: PPUSH
15944: LD_INT 3
15946: PPUSH
15947: CALL 5489 0 3
15951: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15952: LD_EXP 20
15956: PUSH
15957: LD_INT 1
15959: EQUAL
15960: IFFALSE 16107
15962: GO 15964
15964: DISABLE
15965: LD_INT 0
15967: PPUSH
15968: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15969: LD_ADDR_VAR 0 2
15973: PUSH
15974: LD_INT 22
15976: PUSH
15977: LD_INT 6
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 21
15986: PUSH
15987: LD_INT 2
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 34
15996: PUSH
15997: LD_INT 51
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16014: LD_VAR 0 2
16018: PUSH
16019: LD_INT 1
16021: ARRAY
16022: PPUSH
16023: LD_EXP 21
16027: PPUSH
16028: CALL_OW 250
16032: PUSH
16033: LD_INT 5
16035: MINUS
16036: PPUSH
16037: LD_EXP 21
16041: PPUSH
16042: CALL_OW 251
16046: PUSH
16047: LD_INT 5
16049: MINUS
16050: PPUSH
16051: CALL_OW 111
// wait ( 0 0$5 ) ;
16055: LD_INT 175
16057: PPUSH
16058: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16062: LD_VAR 0 2
16066: PUSH
16067: LD_INT 1
16069: ARRAY
16070: PPUSH
16071: LD_INT 41
16073: PPUSH
16074: LD_INT 52
16076: PPUSH
16077: CALL_OW 177
// wait ( 0 0$40 ) ;
16081: LD_INT 1400
16083: PPUSH
16084: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16088: LD_VAR 0 2
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: LD_INT 41
16099: PPUSH
16100: LD_INT 44
16102: PPUSH
16103: CALL_OW 111
// end ;
16107: PPOPN 2
16109: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16110: LD_EXP 21
16114: PPUSH
16115: CALL_OW 274
16119: PPUSH
16120: LD_INT 1
16122: PPUSH
16123: CALL_OW 275
16127: PUSH
16128: LD_INT 100
16130: GREATEREQUAL
16131: IFFALSE 16359
16133: GO 16135
16135: DISABLE
16136: LD_INT 0
16138: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16139: LD_ADDR_VAR 0 1
16143: PUSH
16144: LD_INT 22
16146: PUSH
16147: LD_INT 6
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 25
16166: PUSH
16167: LD_INT 2
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: PPUSH
16179: CALL_OW 69
16183: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PPUSH
16193: LD_INT 4
16195: PPUSH
16196: LD_INT 39
16198: PPUSH
16199: LD_INT 37
16201: PPUSH
16202: LD_INT 3
16204: PPUSH
16205: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16209: LD_VAR 0 1
16213: PUSH
16214: LD_INT 1
16216: ARRAY
16217: PPUSH
16218: LD_INT 29
16220: PPUSH
16221: LD_INT 42
16223: PPUSH
16224: LD_INT 54
16226: PPUSH
16227: LD_INT 3
16229: PPUSH
16230: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16234: LD_VAR 0 1
16238: PUSH
16239: LD_INT 1
16241: ARRAY
16242: PPUSH
16243: LD_INT 6
16245: PPUSH
16246: LD_INT 38
16248: PPUSH
16249: LD_INT 48
16251: PPUSH
16252: LD_INT 0
16254: PPUSH
16255: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16259: LD_VAR 0 1
16263: PUSH
16264: LD_INT 1
16266: ARRAY
16267: PPUSH
16268: LD_INT 2
16270: PPUSH
16271: LD_INT 32
16273: PPUSH
16274: LD_INT 38
16276: PPUSH
16277: LD_INT 2
16279: PPUSH
16280: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16284: LD_VAR 0 1
16288: PUSH
16289: LD_INT 1
16291: ARRAY
16292: PPUSH
16293: LD_INT 26
16295: PPUSH
16296: LD_INT 39
16298: PPUSH
16299: LD_INT 55
16301: PPUSH
16302: LD_INT 3
16304: PPUSH
16305: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16309: LD_VAR 0 1
16313: PUSH
16314: LD_INT 1
16316: ARRAY
16317: PPUSH
16318: LD_INT 32
16320: PPUSH
16321: LD_INT 31
16323: PPUSH
16324: LD_INT 31
16326: PPUSH
16327: LD_INT 3
16329: PPUSH
16330: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16334: LD_VAR 0 1
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 31
16345: PPUSH
16346: LD_INT 50
16348: PPUSH
16349: LD_INT 51
16351: PPUSH
16352: LD_INT 4
16354: PPUSH
16355: CALL_OW 205
// end ; end_of_file
16359: PPOPN 1
16361: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16362: LD_INT 0
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
16370: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16371: LD_ADDR_VAR 0 3
16375: PUSH
16376: LD_INT 22
16378: PUSH
16379: LD_INT 6
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 21
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 25
16398: PUSH
16399: LD_INT 1
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 3
16408: PUSH
16409: LD_INT 54
16411: PUSH
16412: EMPTY
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL_OW 69
16429: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16430: LD_ADDR_VAR 0 7
16434: PUSH
16435: LD_INT 22
16437: PUSH
16438: LD_INT 6
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 25
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 54
16467: PUSH
16468: EMPTY
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: PPUSH
16477: CALL_OW 69
16481: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16482: LD_ADDR_VAR 0 4
16486: PUSH
16487: LD_INT 22
16489: PUSH
16490: LD_INT 6
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 21
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 25
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL_OW 69
16526: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16527: LD_ADDR_VAR 0 6
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_INT 6
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 21
16544: PUSH
16545: LD_INT 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 25
16554: PUSH
16555: LD_INT 4
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: PPUSH
16567: CALL_OW 69
16571: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16572: LD_ADDR_VAR 0 8
16576: PUSH
16577: LD_INT 22
16579: PUSH
16580: LD_INT 6
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 34
16599: PUSH
16600: LD_INT 51
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 255
16626: PUSH
16627: LD_INT 6
16629: EQUAL
16630: PUSH
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL_OW 266
16640: PUSH
16641: LD_INT 0
16643: EQUAL
16644: AND
16645: IFFALSE 16665
// begin ruPDepot = building ;
16647: LD_ADDR_EXP 21
16651: PUSH
16652: LD_VAR 0 1
16656: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16657: LD_ADDR_EXP 20
16661: PUSH
16662: LD_INT 1
16664: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16665: LD_VAR 0 1
16669: PPUSH
16670: CALL_OW 266
16674: PUSH
16675: LD_INT 4
16677: EQUAL
16678: PUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 255
16688: PUSH
16689: LD_INT 6
16691: EQUAL
16692: AND
16693: IFFALSE 16726
// for i in tmpSold do
16695: LD_ADDR_VAR 0 2
16699: PUSH
16700: LD_VAR 0 3
16704: PUSH
16705: FOR_IN
16706: IFFALSE 16724
// ComEnterUnit ( i , building ) ;
16708: LD_VAR 0 2
16712: PPUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 120
16722: GO 16705
16724: POP
16725: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 266
16735: PUSH
16736: LD_INT 6
16738: EQUAL
16739: PUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: CALL_OW 255
16749: PUSH
16750: LD_INT 6
16752: EQUAL
16753: AND
16754: IFFALSE 16812
// begin for i in tmpSci do
16756: LD_ADDR_VAR 0 2
16760: PUSH
16761: LD_VAR 0 6
16765: PUSH
16766: FOR_IN
16767: IFFALSE 16785
// ComEnterUnit ( i , building ) ;
16769: LD_VAR 0 2
16773: PPUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 120
16783: GO 16766
16785: POP
16786: POP
// ResAllTechs ( 6 , building , 3 ) ;
16787: LD_INT 6
16789: PPUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: LD_INT 3
16797: PPUSH
16798: CALL 5489 0 3
// ruPLab = building ;
16802: LD_ADDR_EXP 22
16806: PUSH
16807: LD_VAR 0 1
16811: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 266
16821: PUSH
16822: LD_INT 2
16824: EQUAL
16825: PUSH
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 255
16835: PUSH
16836: LD_INT 6
16838: EQUAL
16839: AND
16840: IFFALSE 16891
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16842: LD_ADDR_VAR 0 5
16846: PUSH
16847: LD_VAR 0 8
16851: PUSH
16852: LD_INT 1
16854: ARRAY
16855: PPUSH
16856: CALL_OW 313
16860: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16861: LD_VAR 0 5
16865: PPUSH
16866: CALL_OW 121
// wait ( 0 0$1 ) ;
16870: LD_INT 35
16872: PPUSH
16873: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16877: LD_VAR 0 5
16881: PPUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16891: LD_VAR 0 1
16895: PPUSH
16896: CALL_OW 266
16900: PUSH
16901: LD_INT 32
16903: EQUAL
16904: PUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 255
16914: PUSH
16915: LD_INT 6
16917: EQUAL
16918: AND
16919: IFFALSE 16971
// begin ComPlaceWeapon ( building , 42 ) ;
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_INT 42
16928: PPUSH
16929: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16933: LD_VAR 0 7
16937: PUSH
16938: LD_INT 1
16940: ARRAY
16941: PPUSH
16942: CALL_OW 122
// wait ( 0 0$1 ) ;
16946: LD_INT 35
16948: PPUSH
16949: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16953: LD_VAR 0 7
16957: PUSH
16958: LD_INT 1
16960: ARRAY
16961: PPUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL_OW 266
16980: PUSH
16981: LD_INT 31
16983: EQUAL
16984: PUSH
16985: LD_VAR 0 1
16989: PPUSH
16990: CALL_OW 255
16994: PUSH
16995: LD_INT 6
16997: EQUAL
16998: AND
16999: IFFALSE 17065
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
17001: LD_VAR 0 7
17005: PUSH
17006: LD_INT 2
17008: ARRAY
17009: PPUSH
17010: CALL_OW 122
// wait ( 0 0$1 ) ;
17014: LD_INT 35
17016: PPUSH
17017: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17021: LD_VAR 0 7
17025: PUSH
17026: LD_INT 2
17028: ARRAY
17029: PPUSH
17030: LD_VAR 0 1
17034: PPUSH
17035: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17039: LD_VAR 0 4
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_EXP 21
17052: PPUSH
17053: CALL_OW 120
// baseReadyToBuild = 2 ;
17057: LD_ADDR_EXP 20
17061: PUSH
17062: LD_INT 2
17064: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 266
17074: PUSH
17075: LD_INT 32
17077: EQUAL
17078: PUSH
17079: LD_VAR 0 1
17083: PPUSH
17084: CALL_OW 255
17088: PUSH
17089: LD_INT 1
17091: EQUAL
17092: AND
17093: PUSH
17094: LD_EXP 32
17098: PUSH
17099: LD_INT 0
17101: EQUAL
17102: AND
17103: IFFALSE 17348
// begin bunkerDialog = 1 ;
17105: LD_ADDR_EXP 32
17109: PUSH
17110: LD_INT 1
17112: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17113: LD_EXP 11
17117: PPUSH
17118: CALL_OW 302
17122: IFFALSE 17138
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17124: LD_EXP 11
17128: PPUSH
17129: LD_STRING D11-Eng1-1
17131: PPUSH
17132: CALL_OW 88
// end else
17136: GO 17334
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17138: LD_INT 22
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 21
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 25
17160: PUSH
17161: LD_INT 3
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 26
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: PPUSH
17184: CALL_OW 69
17188: PUSH
17189: LD_EXP 1
17193: PUSH
17194: EMPTY
17195: LIST
17196: PUSH
17197: LD_INT 0
17199: GREATER
17200: DIFF
17201: IFFALSE 17275
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17203: LD_INT 22
17205: PUSH
17206: LD_INT 1
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 21
17215: PUSH
17216: LD_INT 1
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 25
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 26
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: PPUSH
17249: CALL_OW 69
17253: PUSH
17254: LD_EXP 1
17258: PUSH
17259: EMPTY
17260: LIST
17261: DIFF
17262: PPUSH
17263: LD_STRING D11-Eng1-1
17265: PPUSH
17266: LD_STRING D11-Eng1-1
17268: PPUSH
17269: CALL 4050 0 3
// end else
17273: GO 17334
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17275: LD_INT 22
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 21
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 26
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 69
17314: PUSH
17315: LD_EXP 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: DIFF
17323: PPUSH
17324: LD_STRING D11-Eng1-1
17326: PPUSH
17327: LD_STRING D11-Eng1-1
17329: PPUSH
17330: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
17334: LD_EXP 33
17338: PUSH
17339: LD_INT 0
17341: EQUAL
17342: IFFALSE 17348
// EnergyDialog ;
17344: CALL 4541 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 266
17357: PUSH
17358: LD_INT 29
17360: EQUAL
17361: PUSH
17362: LD_VAR 0 1
17366: PPUSH
17367: CALL_OW 255
17371: PUSH
17372: LD_INT 1
17374: EQUAL
17375: AND
17376: IFFALSE 17386
// buildOil = 1 ;
17378: LD_ADDR_EXP 34
17382: PUSH
17383: LD_INT 1
17385: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 266
17395: PUSH
17396: LD_INT 26
17398: EQUAL
17399: PUSH
17400: LD_VAR 0 1
17404: PPUSH
17405: CALL_OW 255
17409: PUSH
17410: LD_INT 1
17412: EQUAL
17413: AND
17414: IFFALSE 17424
// buildPower = 1 ;
17416: LD_ADDR_EXP 35
17420: PUSH
17421: LD_INT 1
17423: ST_TO_ADDR
// end ;
17424: PPOPN 8
17426: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 266
17436: PUSH
17437: LD_INT 3
17439: EQUAL
17440: PUSH
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 255
17450: PUSH
17451: LD_INT 1
17453: EQUAL
17454: AND
17455: PUSH
17456: LD_EXP 31
17460: PUSH
17461: LD_INT 0
17463: EQUAL
17464: AND
17465: IFFALSE 17781
// begin factoryDialog = 1 ;
17467: LD_ADDR_EXP 31
17471: PUSH
17472: LD_INT 1
17474: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17475: LD_INT 22
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 21
17487: PUSH
17488: LD_INT 3
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 30
17497: PUSH
17498: LD_INT 3
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 24
17507: PUSH
17508: LD_INT 1000
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: PPUSH
17521: CALL_OW 69
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17534: LD_EXP 1
17538: PPUSH
17539: LD_STRING D9a-JMM-1
17541: PPUSH
17542: CALL_OW 88
// if IsOK ( Campell ) then
17546: LD_EXP 12
17550: PPUSH
17551: CALL_OW 302
17555: IFFALSE 17571
// begin Say ( Campell , D9a-Mech1-1 ) ;
17557: LD_EXP 12
17561: PPUSH
17562: LD_STRING D9a-Mech1-1
17564: PPUSH
17565: CALL_OW 88
// end else
17569: GO 17767
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17571: LD_INT 22
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 21
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 25
17593: PUSH
17594: LD_INT 3
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 26
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: PPUSH
17617: CALL_OW 69
17621: PUSH
17622: LD_EXP 1
17626: PUSH
17627: EMPTY
17628: LIST
17629: PUSH
17630: LD_INT 0
17632: GREATER
17633: DIFF
17634: IFFALSE 17708
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17636: LD_INT 22
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 21
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 25
17658: PUSH
17659: LD_INT 3
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 26
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: PPUSH
17682: CALL_OW 69
17686: PUSH
17687: LD_EXP 1
17691: PUSH
17692: EMPTY
17693: LIST
17694: DIFF
17695: PPUSH
17696: LD_STRING D9a-Mech1-1
17698: PPUSH
17699: LD_STRING D9a-Mech1-1
17701: PPUSH
17702: CALL 4050 0 3
// end else
17706: GO 17767
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17708: LD_INT 22
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 26
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: PPUSH
17743: CALL_OW 69
17747: PUSH
17748: LD_EXP 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: DIFF
17756: PPUSH
17757: LD_STRING D9a-Mech1-1
17759: PPUSH
17760: LD_STRING D9a-Mech1-1
17762: PPUSH
17763: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
17767: LD_EXP 33
17771: PUSH
17772: LD_INT 0
17774: EQUAL
17775: IFFALSE 17781
// EnergyDialog ;
17777: CALL 4541 0 0
// end ; end ;
17781: PPOPN 1
17783: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17784: LD_VAR 0 1
17788: PPUSH
17789: CALL_OW 247
17793: PUSH
17794: LD_INT 1
17796: EQUAL
17797: PUSH
17798: LD_VAR 0 1
17802: PPUSH
17803: CALL_OW 255
17807: PUSH
17808: LD_INT 1
17810: EQUAL
17811: AND
17812: IFFALSE 17828
// lostCounter = lostCounter + 1 ;
17814: LD_ADDR_EXP 38
17818: PUSH
17819: LD_EXP 38
17823: PUSH
17824: LD_INT 1
17826: PLUS
17827: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17828: LD_VAR 0 1
17832: PPUSH
17833: CALL_OW 257
17837: PUSH
17838: LD_INT 3
17840: EQUAL
17841: PUSH
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL_OW 255
17851: PUSH
17852: LD_INT 3
17854: EQUAL
17855: AND
17856: PUSH
17857: LD_INT 24
17859: PPUSH
17860: CALL_OW 302
17864: AND
17865: PUSH
17866: LD_INT 24
17868: PPUSH
17869: CALL_OW 255
17873: PUSH
17874: LD_INT 3
17876: EQUAL
17877: AND
17878: IFFALSE 17946
// begin uc_side = 3 ;
17880: LD_ADDR_OWVAR 20
17884: PUSH
17885: LD_INT 3
17887: ST_TO_ADDR
// uc_nation = 3 ;
17888: LD_ADDR_OWVAR 21
17892: PUSH
17893: LD_INT 3
17895: ST_TO_ADDR
// hc_gallery :=  ;
17896: LD_ADDR_OWVAR 33
17900: PUSH
17901: LD_STRING 
17903: ST_TO_ADDR
// hc_name :=  ;
17904: LD_ADDR_OWVAR 26
17908: PUSH
17909: LD_STRING 
17911: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17912: LD_INT 0
17914: PPUSH
17915: LD_EXP 16
17919: PPUSH
17920: LD_EXP 17
17924: PPUSH
17925: CALL_OW 12
17929: PPUSH
17930: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17934: CALL_OW 44
17938: PPUSH
17939: LD_INT 24
17941: PPUSH
17942: CALL_OW 52
// end ; end ;
17946: PPOPN 1
17948: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17949: LD_INT 0
17951: PPUSH
17952: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17953: LD_ADDR_VAR 0 4
17957: PUSH
17958: LD_INT 22
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PPUSH
17968: CALL_OW 69
17972: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17973: LD_VAR 0 1
17977: PUSH
17978: LD_INT 1
17980: EQUAL
17981: PUSH
17982: LD_VAR 0 2
17986: PUSH
17987: LD_INT 6
17989: EQUAL
17990: AND
17991: PUSH
17992: LD_EXP 41
17996: PUSH
17997: LD_INT 1
17999: EQUAL
18000: AND
18001: IFFALSE 18056
// begin donaldsonCoopAttack = 0 ;
18003: LD_ADDR_EXP 41
18007: PUSH
18008: LD_INT 0
18010: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18011: LD_ADDR_VAR 0 3
18015: PUSH
18016: LD_INT 22
18018: PUSH
18019: LD_INT 4
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: PPUSH
18029: CALL_OW 69
18033: PUSH
18034: FOR_IN
18035: IFFALSE 18054
// ComAgressiveMove ( i , 52 , 64 ) ;
18037: LD_VAR 0 3
18041: PPUSH
18042: LD_INT 52
18044: PPUSH
18045: LD_INT 64
18047: PPUSH
18048: CALL_OW 114
18052: GO 18034
18054: POP
18055: POP
// end ; end ;
18056: PPOPN 4
18058: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 264
18068: PUSH
18069: LD_INT 53
18071: EQUAL
18072: IFFALSE 18157
// begin CutTreeInArea ( vehicle , TreesArea ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: LD_INT 21
18081: PPUSH
18082: CALL 4757 0 2
// uc_side = 3 ;
18086: LD_ADDR_OWVAR 20
18090: PUSH
18091: LD_INT 3
18093: ST_TO_ADDR
// uc_nation = 3 ;
18094: LD_ADDR_OWVAR 21
18098: PUSH
18099: LD_INT 3
18101: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
18102: LD_INT 0
18104: PPUSH
18105: LD_EXP 17
18109: PPUSH
18110: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
18114: CALL_OW 44
18118: PPUSH
18119: LD_VAR 0 2
18123: PPUSH
18124: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
18128: LD_VAR 0 1
18132: PPUSH
18133: LD_INT 6
18135: PPUSH
18136: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 313
18149: PPUSH
18150: LD_INT 6
18152: PPUSH
18153: CALL_OW 235
// end ; if building = rubfact0 and GetSide ( building ) = 3 then
18157: LD_VAR 0 2
18161: PUSH
18162: LD_INT 24
18164: EQUAL
18165: PUSH
18166: LD_VAR 0 2
18170: PPUSH
18171: CALL_OW 255
18175: PUSH
18176: LD_INT 3
18178: EQUAL
18179: AND
18180: IFFALSE 18243
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 264
18191: PUSH
18192: LD_INT 42
18194: EQUAL
18195: PUSH
18196: LD_VAR 0 1
18200: PPUSH
18201: CALL_OW 264
18205: PUSH
18206: LD_INT 43
18208: EQUAL
18209: OR
18210: PUSH
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 264
18220: PUSH
18221: LD_INT 44
18223: EQUAL
18224: OR
18225: IFFALSE 18243
// russianTanks = russianTanks ^ vehicle ;
18227: LD_ADDR_EXP 18
18231: PUSH
18232: LD_EXP 18
18236: PUSH
18237: LD_VAR 0 1
18241: ADD
18242: ST_TO_ADDR
// end ;
18243: PPOPN 2
18245: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18246: LD_INT 0
18248: PPUSH
18249: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 255
18259: PUSH
18260: LD_INT 3
18262: EQUAL
18263: PUSH
18264: LD_VAR 0 1
18268: PPUSH
18269: CALL_OW 247
18273: PUSH
18274: LD_INT 2
18276: EQUAL
18277: AND
18278: PUSH
18279: LD_VAR 0 1
18283: PPUSH
18284: CALL_OW 264
18288: PUSH
18289: LD_INT 42
18291: EQUAL
18292: PUSH
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 264
18302: PUSH
18303: LD_INT 43
18305: EQUAL
18306: OR
18307: PUSH
18308: LD_VAR 0 1
18312: PPUSH
18313: CALL_OW 264
18317: PUSH
18318: LD_INT 44
18320: EQUAL
18321: OR
18322: PUSH
18323: EMPTY
18324: LIST
18325: AND
18326: IFFALSE 18466
// begin AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18328: LD_INT 24
18330: PPUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 265
18340: PPUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 262
18350: PPUSH
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 263
18360: PPUSH
18361: LD_VAR 0 1
18365: PPUSH
18366: CALL_OW 264
18370: PPUSH
18371: CALL_OW 185
// for i in russianDamageTanks do
18375: LD_ADDR_VAR 0 2
18379: PUSH
18380: LD_EXP 19
18384: PUSH
18385: FOR_IN
18386: IFFALSE 18421
// if i = unit then
18388: LD_VAR 0 2
18392: PUSH
18393: LD_VAR 0 1
18397: EQUAL
18398: IFFALSE 18419
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
18400: LD_ADDR_EXP 19
18404: PUSH
18405: LD_EXP 19
18409: PUSH
18410: LD_VAR 0 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: DIFF
18418: ST_TO_ADDR
18419: GO 18385
18421: POP
18422: POP
// tmpMeh = UnitsInside ( unit ) ;
18423: LD_ADDR_VAR 0 3
18427: PUSH
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 313
18437: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
18438: LD_VAR 0 3
18442: PPUSH
18443: CALL_OW 121
// wait ( 0 0$01 ) ;
18447: LD_INT 35
18449: PPUSH
18450: CALL_OW 67
// ComEnterUnit ( tmpMeh , rubfact0 ) ;
18454: LD_VAR 0 3
18458: PPUSH
18459: LD_INT 24
18461: PPUSH
18462: CALL_OW 120
// end ; end ;
18466: PPOPN 3
18468: END
// on Command ( comandid ) do var i , j , tmp ;
18469: LD_INT 0
18471: PPUSH
18472: PPUSH
18473: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18474: LD_ADDR_VAR 0 2
18478: PUSH
18479: LD_INT 22
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: PUSH
18492: LD_INT 21
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 21
18504: PUSH
18505: LD_INT 2
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL_OW 69
18525: PUSH
18526: FOR_IN
18527: IFFALSE 18637
// begin if GetTaskList ( i ) > 0 then
18529: LD_VAR 0 2
18533: PPUSH
18534: CALL_OW 437
18538: PUSH
18539: LD_INT 0
18541: GREATER
18542: IFFALSE 18635
// begin for j = 1 to GetTaskList ( i ) do
18544: LD_ADDR_VAR 0 3
18548: PUSH
18549: DOUBLE
18550: LD_INT 1
18552: DEC
18553: ST_TO_ADDR
18554: LD_VAR 0 2
18558: PPUSH
18559: CALL_OW 437
18563: PUSH
18564: FOR_TO
18565: IFFALSE 18633
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18567: LD_ADDR_VAR 0 4
18571: PUSH
18572: LD_VAR 0 2
18576: PPUSH
18577: CALL_OW 437
18581: PUSH
18582: LD_VAR 0 3
18586: ARRAY
18587: PUSH
18588: LD_INT 4
18590: ARRAY
18591: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18592: LD_VAR 0 4
18596: PPUSH
18597: CALL_OW 255
18601: PUSH
18602: LD_INT 4
18604: EQUAL
18605: PUSH
18606: LD_VAR 0 4
18610: PPUSH
18611: CALL_OW 255
18615: PUSH
18616: LD_INT 0
18618: EQUAL
18619: OR
18620: IFFALSE 18631
// ComStop ( i ) ;
18622: LD_VAR 0 2
18626: PPUSH
18627: CALL_OW 141
// end ;
18631: GO 18564
18633: POP
18634: POP
// end ; end ;
18635: GO 18526
18637: POP
18638: POP
// end ; end_of_file
18639: PPOPN 4
18641: END
// every 10 10$0 do
18642: GO 18644
18644: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18645: LD_INT 5
18647: PPUSH
18648: LD_INT 3
18650: PPUSH
18651: LD_INT 2
18653: PPUSH
18654: LD_INT 5
18656: PPUSH
18657: CALL_OW 12
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 3
18667: PUSH
18668: LD_INT 3
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: LIST
18675: PUSH
18676: LD_OWVAR 67
18680: ARRAY
18681: PLUS
18682: PPUSH
18683: LD_INT 0
18685: PPUSH
18686: LD_INT 0
18688: PPUSH
18689: LD_INT 0
18691: PPUSH
18692: LD_INT 1
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 3
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: LIST
18705: PUSH
18706: LD_OWVAR 67
18710: ARRAY
18711: PPUSH
18712: LD_EXP 16
18716: PPUSH
18717: LD_EXP 17
18721: PPUSH
18722: CALL_OW 12
18726: PPUSH
18727: LD_INT 4
18729: PPUSH
18730: LD_INT 14
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: LD_INT 2
18738: PPUSH
18739: CALL 6868 0 12
// end ;
18743: END
// every 15 15$0 do
18744: GO 18746
18746: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18747: LD_INT 5
18749: PPUSH
18750: LD_INT 3
18752: PPUSH
18753: LD_INT 3
18755: PPUSH
18756: LD_INT 5
18758: PPUSH
18759: CALL_OW 12
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: LD_INT 3
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: PUSH
18778: LD_OWVAR 67
18782: ARRAY
18783: PLUS
18784: PPUSH
18785: LD_INT 0
18787: PPUSH
18788: LD_INT 0
18790: PPUSH
18791: LD_INT 0
18793: PPUSH
18794: LD_INT 2
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: LD_OWVAR 67
18812: ARRAY
18813: PPUSH
18814: LD_EXP 16
18818: PPUSH
18819: LD_EXP 17
18823: PPUSH
18824: CALL_OW 12
18828: PPUSH
18829: LD_INT 4
18831: PPUSH
18832: LD_INT 14
18834: PPUSH
18835: LD_INT 1
18837: PPUSH
18838: LD_INT 1
18840: PPUSH
18841: CALL 6868 0 12
// end ;
18845: END
// every 25 25$0 do
18846: GO 18848
18848: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18849: LD_INT 5
18851: PPUSH
18852: LD_INT 3
18854: PPUSH
18855: LD_INT 2
18857: PPUSH
18858: LD_INT 3
18860: PPUSH
18861: CALL_OW 12
18865: PUSH
18866: LD_INT 2
18868: PUSH
18869: LD_INT 3
18871: PUSH
18872: LD_INT 3
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: LIST
18879: PUSH
18880: LD_OWVAR 67
18884: ARRAY
18885: PLUS
18886: PPUSH
18887: LD_INT 0
18889: PPUSH
18890: LD_INT 0
18892: PPUSH
18893: LD_INT 0
18895: PPUSH
18896: LD_INT 1
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: LD_OWVAR 67
18914: ARRAY
18915: PPUSH
18916: LD_EXP 16
18920: PPUSH
18921: LD_EXP 17
18925: PPUSH
18926: CALL_OW 12
18930: PPUSH
18931: LD_INT 4
18933: PPUSH
18934: LD_INT 14
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: LD_INT 1
18942: PPUSH
18943: CALL 6868 0 12
// end ;
18947: END
// every 26 26$0 do
18948: GO 18950
18950: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18951: LD_INT 5
18953: PPUSH
18954: LD_INT 3
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: LD_INT 3
18962: PPUSH
18963: CALL_OW 12
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: PUSH
18982: LD_OWVAR 67
18986: ARRAY
18987: PLUS
18988: PPUSH
18989: LD_INT 0
18991: PPUSH
18992: LD_INT 0
18994: PPUSH
18995: LD_INT 0
18997: PPUSH
18998: LD_INT 2
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 3
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: PUSH
19012: LD_OWVAR 67
19016: ARRAY
19017: PPUSH
19018: LD_EXP 16
19022: PPUSH
19023: LD_EXP 17
19027: PPUSH
19028: CALL_OW 12
19032: PPUSH
19033: LD_INT 4
19035: PPUSH
19036: LD_INT 14
19038: PPUSH
19039: LD_INT 1
19041: PPUSH
19042: LD_INT 2
19044: PPUSH
19045: CALL 6868 0 12
// end ;
19049: END
// every 25 25$0 do
19050: GO 19052
19052: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19053: LD_INT 4
19055: PPUSH
19056: LD_INT 5
19058: PPUSH
19059: LD_INT 3
19061: PUSH
19062: LD_INT 4
19064: PUSH
19065: LD_INT 5
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: LIST
19072: PUSH
19073: LD_OWVAR 67
19077: ARRAY
19078: PPUSH
19079: LD_EXP 16
19083: PPUSH
19084: LD_EXP 17
19088: PPUSH
19089: CALL_OW 12
19093: PPUSH
19094: LD_INT 3
19096: PPUSH
19097: LD_INT 1
19099: PPUSH
19100: LD_INT 1
19102: PPUSH
19103: LD_INT 42
19105: PUSH
19106: LD_INT 42
19108: PUSH
19109: LD_INT 43
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 42
19119: PUSH
19120: LD_INT 43
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 43
19129: PUSH
19130: LD_INT 43
19132: PUSH
19133: LD_INT 43
19135: PUSH
19136: LD_INT 44
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: LD_OWVAR 67
19154: ARRAY
19155: PPUSH
19156: EMPTY
19157: PPUSH
19158: EMPTY
19159: PPUSH
19160: LD_INT 1
19162: PPUSH
19163: CALL 9748 0 11
// end ; end_of_file
19167: END
// every 0 0$1 trigger startTimer = 1 do
19168: LD_EXP 30
19172: PUSH
19173: LD_INT 1
19175: EQUAL
19176: IFFALSE 19306
19178: GO 19180
19180: DISABLE
// begin enable ;
19181: ENABLE
// if timerStatus = 1 then
19182: LD_EXP 29
19186: PUSH
19187: LD_INT 1
19189: EQUAL
19190: IFFALSE 19223
// begin timeToSupport = timeToSupport - 0 0$01 ;
19192: LD_ADDR_EXP 28
19196: PUSH
19197: LD_EXP 28
19201: PUSH
19202: LD_INT 35
19204: MINUS
19205: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19206: LD_ADDR_OWVAR 47
19210: PUSH
19211: LD_STRING #Am04-1
19213: PUSH
19214: LD_EXP 28
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: ST_TO_ADDR
// end ; if timerStatus = 2 then
19223: LD_EXP 29
19227: PUSH
19228: LD_INT 2
19230: EQUAL
19231: IFFALSE 19264
// begin timeToSupport = timeToSupport - 0 0$01 ;
19233: LD_ADDR_EXP 28
19237: PUSH
19238: LD_EXP 28
19242: PUSH
19243: LD_INT 35
19245: MINUS
19246: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19247: LD_ADDR_OWVAR 47
19251: PUSH
19252: LD_STRING #Am04-2
19254: PUSH
19255: LD_EXP 28
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: ST_TO_ADDR
// end ; if timerStatus = 3 then
19264: LD_EXP 29
19268: PUSH
19269: LD_INT 3
19271: EQUAL
19272: IFFALSE 19288
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19274: LD_ADDR_EXP 27
19278: PUSH
19279: LD_EXP 27
19283: PUSH
19284: LD_INT 35
19286: MINUS
19287: ST_TO_ADDR
// end ; if timerStatus = 4 then
19288: LD_EXP 29
19292: PUSH
19293: LD_INT 4
19295: EQUAL
19296: IFFALSE 19306
// begin display_strings =  ;
19298: LD_ADDR_OWVAR 47
19302: PUSH
19303: LD_STRING 
19305: ST_TO_ADDR
// end ; end ; end_of_file
19306: END
// every 0 0$1 trigger IsDead ( JMM ) do
19307: LD_EXP 1
19311: PPUSH
19312: CALL_OW 301
19316: IFFALSE 19328
19318: GO 19320
19320: DISABLE
// YouLost ( JMM ) ;
19321: LD_STRING JMM
19323: PPUSH
19324: CALL_OW 104
19328: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19329: LD_INT 4
19331: PPUSH
19332: CALL_OW 301
19336: IFFALSE 19348
19338: GO 19340
19340: DISABLE
// YouLost ( Base ) ; end_of_file
19341: LD_STRING Base
19343: PPUSH
19344: CALL_OW 104
19348: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
19349: LD_EXP 15
19353: PPUSH
19354: CALL_OW 301
19358: IFFALSE 19740
19360: GO 19362
19362: DISABLE
19363: LD_INT 0
19365: PPUSH
// begin AIEnable = 0 ;
19366: LD_ADDR_EXP 37
19370: PUSH
19371: LD_INT 0
19373: ST_TO_ADDR
// escapeAvalaible = 1 ;
19374: LD_ADDR_EXP 40
19378: PUSH
19379: LD_INT 1
19381: ST_TO_ADDR
// InGameOn ;
19382: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19386: LD_INT 3
19388: PPUSH
19389: LD_INT 1
19391: PPUSH
19392: LD_INT 1
19394: PPUSH
19395: LD_INT 0
19397: PPUSH
19398: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19402: LD_INT 6
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 0
19413: PPUSH
19414: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19418: LD_INT 5
19420: PPUSH
19421: LD_INT 1
19423: PPUSH
19424: LD_INT 1
19426: PPUSH
19427: LD_INT 0
19429: PPUSH
19430: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19434: LD_INT 3
19436: PPUSH
19437: LD_INT 1
19439: PPUSH
19440: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19444: LD_INT 97
19446: PPUSH
19447: LD_INT 91
19449: PPUSH
19450: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19454: LD_INT 22
19456: PUSH
19457: LD_INT 3
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 21
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PPUSH
19478: CALL_OW 69
19482: PPUSH
19483: CALL_OW 121
// wait ( 0 0$01 ) ;
19487: LD_INT 35
19489: PPUSH
19490: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19494: LD_INT 22
19496: PUSH
19497: LD_INT 3
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 21
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PPUSH
19518: CALL_OW 69
19522: PPUSH
19523: LD_INT 124
19525: PPUSH
19526: LD_INT 98
19528: PPUSH
19529: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19533: LD_INT 22
19535: PUSH
19536: LD_INT 5
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 21
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PPUSH
19557: CALL_OW 69
19561: PPUSH
19562: CALL_OW 121
// wait ( 0 0$01 ) ;
19566: LD_INT 35
19568: PPUSH
19569: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19573: LD_INT 22
19575: PUSH
19576: LD_INT 5
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 21
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PPUSH
19597: CALL_OW 69
19601: PPUSH
19602: LD_INT 124
19604: PPUSH
19605: LD_INT 98
19607: PPUSH
19608: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19612: LD_INT 22
19614: PUSH
19615: LD_INT 6
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 21
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PPUSH
19636: CALL_OW 69
19640: PPUSH
19641: CALL_OW 121
// wait ( 0 0$01 ) ;
19645: LD_INT 35
19647: PPUSH
19648: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19652: LD_INT 22
19654: PUSH
19655: LD_INT 6
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 21
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PPUSH
19676: CALL_OW 69
19680: PPUSH
19681: LD_INT 124
19683: PPUSH
19684: LD_INT 98
19686: PPUSH
19687: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19691: LD_INT 22
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 21
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: PPUSH
19720: LD_INT 124
19722: PPUSH
19723: LD_INT 98
19725: PPUSH
19726: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19730: LD_INT 124
19732: PPUSH
19733: LD_INT 98
19735: PPUSH
19736: CALL_OW 84
// end ;
19740: PPOPN 1
19742: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
19743: LD_INT 23
19745: PUSH
19746: LD_INT 3
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 24
19765: PUSH
19766: LD_INT 250
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: LIST
19777: PPUSH
19778: CALL_OW 69
19782: PUSH
19783: LD_INT 0
19785: EQUAL
19786: IFFALSE 19795
19788: GO 19790
19790: DISABLE
// FinishMission ;
19791: CALL 19966 0 0
19795: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19796: LD_EXP 40
19800: PUSH
19801: LD_INT 1
19803: EQUAL
19804: IFFALSE 19963
19806: GO 19808
19808: DISABLE
19809: LD_INT 0
19811: PPUSH
// begin enable ;
19812: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19813: LD_ADDR_VAR 0 1
19817: PUSH
19818: LD_INT 22
19820: PUSH
19821: LD_INT 3
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PPUSH
19828: CALL_OW 69
19832: PUSH
19833: FOR_IN
19834: IFFALSE 19861
// if IsInArea ( i , RussianEscape ) then
19836: LD_VAR 0 1
19840: PPUSH
19841: LD_INT 5
19843: PPUSH
19844: CALL_OW 308
19848: IFFALSE 19859
// RemoveUnit ( i ) ;
19850: LD_VAR 0 1
19854: PPUSH
19855: CALL_OW 64
19859: GO 19833
19861: POP
19862: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19863: LD_ADDR_VAR 0 1
19867: PUSH
19868: LD_INT 22
19870: PUSH
19871: LD_INT 5
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PPUSH
19878: CALL_OW 69
19882: PUSH
19883: FOR_IN
19884: IFFALSE 19911
// if IsInArea ( i , RussianEscape ) then
19886: LD_VAR 0 1
19890: PPUSH
19891: LD_INT 5
19893: PPUSH
19894: CALL_OW 308
19898: IFFALSE 19909
// RemoveUnit ( i ) ;
19900: LD_VAR 0 1
19904: PPUSH
19905: CALL_OW 64
19909: GO 19883
19911: POP
19912: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19913: LD_ADDR_VAR 0 1
19917: PUSH
19918: LD_INT 22
19920: PUSH
19921: LD_INT 6
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: PUSH
19933: FOR_IN
19934: IFFALSE 19961
// if IsInArea ( i , RussianEscape ) then
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_INT 5
19943: PPUSH
19944: CALL_OW 308
19948: IFFALSE 19959
// RemoveUnit ( i ) ;
19950: LD_VAR 0 1
19954: PPUSH
19955: CALL_OW 64
19959: GO 19933
19961: POP
19962: POP
// end ;
19963: PPOPN 1
19965: END
// export function FinishMission ; var tmp ; begin
19966: LD_INT 0
19968: PPUSH
19969: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19970: LD_INT 69
19972: PPUSH
19973: LD_INT 1
19975: PPUSH
19976: CALL_OW 321
19980: PPUSH
19981: LD_STRING GatlingInGamma
19983: PPUSH
19984: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19988: LD_EXP 34
19992: PUSH
19993: LD_INT 1
19995: EQUAL
19996: PUSH
19997: LD_EXP 35
20001: PUSH
20002: LD_INT 1
20004: EQUAL
20005: AND
20006: IFFALSE 20020
// begin AddMedal ( oil , 1 ) ;
20008: LD_STRING oil
20010: PPUSH
20011: LD_INT 1
20013: PPUSH
20014: CALL_OW 101
// end else
20018: GO 20113
// begin if buildOil = 1 and buildPower = 0 then
20020: LD_EXP 34
20024: PUSH
20025: LD_INT 1
20027: EQUAL
20028: PUSH
20029: LD_EXP 35
20033: PUSH
20034: LD_INT 0
20036: EQUAL
20037: AND
20038: IFFALSE 20051
// AddMedal ( oil , - 1 ) ;
20040: LD_STRING oil
20042: PPUSH
20043: LD_INT 1
20045: NEG
20046: PPUSH
20047: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
20051: LD_EXP 34
20055: PUSH
20056: LD_INT 0
20058: EQUAL
20059: PUSH
20060: LD_EXP 35
20064: PUSH
20065: LD_INT 1
20067: EQUAL
20068: AND
20069: IFFALSE 20082
// AddMedal ( oil , - 2 ) ;
20071: LD_STRING oil
20073: PPUSH
20074: LD_INT 2
20076: NEG
20077: PPUSH
20078: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
20082: LD_EXP 34
20086: PUSH
20087: LD_INT 0
20089: EQUAL
20090: PUSH
20091: LD_EXP 35
20095: PUSH
20096: LD_INT 0
20098: EQUAL
20099: AND
20100: IFFALSE 20113
// AddMedal ( oil , - 3 ) ;
20102: LD_STRING oil
20104: PPUSH
20105: LD_INT 3
20107: NEG
20108: PPUSH
20109: CALL_OW 101
// end ; if lostCounter > 3 then
20113: LD_EXP 38
20117: PUSH
20118: LD_INT 3
20120: GREATER
20121: IFFALSE 20136
// begin AddMedal ( deaths , - 1 ) ;
20123: LD_STRING deaths
20125: PPUSH
20126: LD_INT 1
20128: NEG
20129: PPUSH
20130: CALL_OW 101
// end else
20134: GO 20146
// begin AddMedal ( deaths , 1 ) ;
20136: LD_STRING deaths
20138: PPUSH
20139: LD_INT 1
20141: PPUSH
20142: CALL_OW 101
// end ; if honor = 1 then
20146: LD_EXP 39
20150: PUSH
20151: LD_INT 1
20153: EQUAL
20154: IFFALSE 20168
// begin AddMedal ( honour , 1 ) ;
20156: LD_STRING honour
20158: PPUSH
20159: LD_INT 1
20161: PPUSH
20162: CALL_OW 101
// end else
20166: GO 20179
// begin AddMedal ( honour , - 1 ) ;
20168: LD_STRING honour
20170: PPUSH
20171: LD_INT 1
20173: NEG
20174: PPUSH
20175: CALL_OW 101
// end ; GiveMedals ( Main ) ;
20179: LD_STRING Main
20181: PPUSH
20182: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20186: LD_INT 22
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 23
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 21
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: PPUSH
20221: CALL_OW 69
20225: PPUSH
20226: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20230: LD_EXP 1
20234: PPUSH
20235: LD_EXP 44
20239: PUSH
20240: LD_STRING JMM
20242: STR
20243: PPUSH
20244: CALL_OW 38
// if IsOK ( Bobby ) then
20248: LD_EXP 2
20252: PPUSH
20253: CALL_OW 302
20257: IFFALSE 20277
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20259: LD_EXP 2
20263: PPUSH
20264: LD_EXP 44
20268: PUSH
20269: LD_STRING Bobby
20271: STR
20272: PPUSH
20273: CALL_OW 38
// if IsOK ( Cyrus ) then
20277: LD_EXP 3
20281: PPUSH
20282: CALL_OW 302
20286: IFFALSE 20306
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20288: LD_EXP 3
20292: PPUSH
20293: LD_EXP 44
20297: PUSH
20298: LD_STRING Cyrus
20300: STR
20301: PPUSH
20302: CALL_OW 38
// if IsOK ( Lisa ) then
20306: LD_EXP 4
20310: PPUSH
20311: CALL_OW 302
20315: IFFALSE 20335
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20317: LD_EXP 4
20321: PPUSH
20322: LD_EXP 44
20326: PUSH
20327: LD_STRING Lisa
20329: STR
20330: PPUSH
20331: CALL_OW 38
// if IsOK ( Brown ) then
20335: LD_EXP 7
20339: PPUSH
20340: CALL_OW 302
20344: IFFALSE 20364
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20346: LD_EXP 7
20350: PPUSH
20351: LD_EXP 44
20355: PUSH
20356: LD_STRING Brown
20358: STR
20359: PPUSH
20360: CALL_OW 38
// if IsOK ( Donaldson ) then
20364: LD_EXP 13
20368: PPUSH
20369: CALL_OW 302
20373: IFFALSE 20393
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20375: LD_EXP 13
20379: PPUSH
20380: LD_EXP 44
20384: PUSH
20385: LD_STRING Donaldson
20387: STR
20388: PPUSH
20389: CALL_OW 38
// if IsOK ( Frank ) then
20393: LD_EXP 5
20397: PPUSH
20398: CALL_OW 302
20402: IFFALSE 20422
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20404: LD_EXP 5
20408: PPUSH
20409: LD_EXP 44
20413: PUSH
20414: LD_STRING Frank
20416: STR
20417: PPUSH
20418: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20422: LD_INT 50
20424: PUSH
20425: EMPTY
20426: LIST
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 21
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 69
20457: PUSH
20458: LD_EXP 1
20462: PUSH
20463: LD_EXP 2
20467: PUSH
20468: LD_EXP 3
20472: PUSH
20473: LD_EXP 4
20477: PUSH
20478: LD_EXP 7
20482: PUSH
20483: LD_EXP 13
20487: PUSH
20488: LD_EXP 5
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: DIFF
20502: PPUSH
20503: LD_STRING 04_other_survivors
20505: PPUSH
20506: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20510: LD_INT 22
20512: PPUSH
20513: CALL 20526 0 1
// YouWin ;
20517: CALL_OW 103
// end ;
20521: LD_VAR 0 1
20525: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20526: LD_INT 0
20528: PPUSH
20529: PPUSH
20530: PPUSH
20531: PPUSH
// gammaBase = [ ] ;
20532: LD_ADDR_VAR 0 4
20536: PUSH
20537: EMPTY
20538: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20539: LD_ADDR_VAR 0 5
20543: PUSH
20544: LD_VAR 0 1
20548: PPUSH
20549: LD_INT 22
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 21
20561: PUSH
20562: LD_INT 3
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 50
20571: PUSH
20572: EMPTY
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: LIST
20579: PPUSH
20580: CALL_OW 70
20584: ST_TO_ADDR
// for i in buildings do
20585: LD_ADDR_VAR 0 3
20589: PUSH
20590: LD_VAR 0 5
20594: PUSH
20595: FOR_IN
20596: IFFALSE 20933
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20598: LD_VAR 0 3
20602: PPUSH
20603: CALL_OW 266
20607: PUSH
20608: LD_INT 6
20610: PUSH
20611: LD_INT 7
20613: PUSH
20614: LD_INT 8
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: LIST
20621: IN
20622: IFFALSE 20736
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20624: LD_ADDR_VAR 0 4
20628: PUSH
20629: LD_VAR 0 4
20633: PUSH
20634: LD_VAR 0 3
20638: PPUSH
20639: CALL_OW 266
20643: PUSH
20644: LD_VAR 0 3
20648: PPUSH
20649: CALL_OW 250
20653: PUSH
20654: LD_VAR 0 3
20658: PPUSH
20659: CALL_OW 251
20663: PUSH
20664: LD_VAR 0 3
20668: PPUSH
20669: CALL_OW 254
20673: PUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: CALL_OW 267
20683: PUSH
20684: LD_VAR 0 3
20688: PPUSH
20689: CALL_OW 248
20693: PUSH
20694: LD_VAR 0 3
20698: PPUSH
20699: LD_INT 1
20701: PPUSH
20702: CALL_OW 268
20706: PUSH
20707: LD_VAR 0 3
20711: PPUSH
20712: LD_INT 2
20714: PPUSH
20715: CALL_OW 268
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: PUSH
20730: EMPTY
20731: LIST
20732: ADD
20733: ST_TO_ADDR
20734: GO 20931
// if GetBType ( i ) in [ b_bunker ] then
20736: LD_VAR 0 3
20740: PPUSH
20741: CALL_OW 266
20745: PUSH
20746: LD_INT 32
20748: PUSH
20749: EMPTY
20750: LIST
20751: IN
20752: IFFALSE 20849
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20754: LD_ADDR_VAR 0 4
20758: PUSH
20759: LD_VAR 0 4
20763: PUSH
20764: LD_VAR 0 3
20768: PPUSH
20769: CALL_OW 266
20773: PUSH
20774: LD_VAR 0 3
20778: PPUSH
20779: CALL_OW 250
20783: PUSH
20784: LD_VAR 0 3
20788: PPUSH
20789: CALL_OW 251
20793: PUSH
20794: LD_VAR 0 3
20798: PPUSH
20799: CALL_OW 254
20803: PUSH
20804: LD_VAR 0 3
20808: PPUSH
20809: CALL_OW 267
20813: PUSH
20814: LD_VAR 0 3
20818: PPUSH
20819: CALL_OW 248
20823: PUSH
20824: LD_VAR 0 3
20828: PPUSH
20829: CALL_OW 269
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: PUSH
20843: EMPTY
20844: LIST
20845: ADD
20846: ST_TO_ADDR
20847: GO 20931
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20849: LD_ADDR_VAR 0 4
20853: PUSH
20854: LD_VAR 0 4
20858: PUSH
20859: LD_VAR 0 3
20863: PPUSH
20864: CALL_OW 266
20868: PUSH
20869: LD_VAR 0 3
20873: PPUSH
20874: CALL_OW 250
20878: PUSH
20879: LD_VAR 0 3
20883: PPUSH
20884: CALL_OW 251
20888: PUSH
20889: LD_VAR 0 3
20893: PPUSH
20894: CALL_OW 254
20898: PUSH
20899: LD_VAR 0 3
20903: PPUSH
20904: CALL_OW 267
20908: PUSH
20909: LD_VAR 0 3
20913: PPUSH
20914: CALL_OW 248
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: ADD
20930: ST_TO_ADDR
// end ;
20931: GO 20595
20933: POP
20934: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20935: LD_VAR 0 4
20939: PPUSH
20940: LD_STRING GammaBase
20942: PPUSH
20943: CALL_OW 39
// end ; end_of_file
20947: LD_VAR 0 2
20951: RET
// every 1 1$15 do
20952: GO 20954
20954: DISABLE
// begin if supply <= 13 and supply > 7 then
20955: LD_EXP 36
20959: PUSH
20960: LD_INT 13
20962: LESSEQUAL
20963: PUSH
20964: LD_EXP 36
20968: PUSH
20969: LD_INT 7
20971: GREATER
20972: AND
20973: IFFALSE 20996
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20975: LD_INT 3
20977: PPUSH
20978: LD_INT 5
20980: PPUSH
20981: CALL_OW 12
20985: PPUSH
20986: LD_INT 18
20988: PPUSH
20989: LD_INT 1
20991: PPUSH
20992: CALL_OW 55
// if supply <= 7 and supply > 4 then
20996: LD_EXP 36
21000: PUSH
21001: LD_INT 7
21003: LESSEQUAL
21004: PUSH
21005: LD_EXP 36
21009: PUSH
21010: LD_INT 4
21012: GREATER
21013: AND
21014: IFFALSE 21037
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
21016: LD_INT 3
21018: PPUSH
21019: LD_INT 5
21021: PPUSH
21022: CALL_OW 12
21026: PPUSH
21027: LD_INT 19
21029: PPUSH
21030: LD_INT 1
21032: PPUSH
21033: CALL_OW 55
// if supply <= 4 and supply > 0 then
21037: LD_EXP 36
21041: PUSH
21042: LD_INT 4
21044: LESSEQUAL
21045: PUSH
21046: LD_EXP 36
21050: PUSH
21051: LD_INT 0
21053: GREATER
21054: AND
21055: IFFALSE 21078
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
21057: LD_INT 3
21059: PPUSH
21060: LD_INT 5
21062: PPUSH
21063: CALL_OW 12
21067: PPUSH
21068: LD_INT 20
21070: PPUSH
21071: LD_INT 1
21073: PPUSH
21074: CALL_OW 55
// if supply > 0 then
21078: LD_EXP 36
21082: PUSH
21083: LD_INT 0
21085: GREATER
21086: IFFALSE 21103
// begin supply = supply - 1 ;
21088: LD_ADDR_EXP 36
21092: PUSH
21093: LD_EXP 36
21097: PUSH
21098: LD_INT 1
21100: MINUS
21101: ST_TO_ADDR
// enable ;
21102: ENABLE
// end ; end ;
21103: END
