// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4355 0 0
// PrepareRussianBase ;
 241: CALL 2721 0 0
// PrepareRussianCommander ;
 245: CALL 2672 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3957 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3957 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3957 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3957 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3957 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3957 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3957 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3957 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3957 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3957 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3957 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3957 0 2
 767: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 768: LD_STRING 03_Frank
 770: PPUSH
 771: CALL_OW 28
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 823
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING 03_Frank
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 3957 0 2
 796: ST_TO_ADDR
// if Frank = 0 then
 797: LD_EXP 5
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: IFFALSE 823
// Frank = PrepareUnit ( Frank , false ) ;
 807: LD_ADDR_EXP 5
 811: PUSH
 812: LD_STRING Frank
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL 3957 0 2
 822: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 32
 830: PPUSH
 831: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 835: LD_EXP 7
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 850: LD_EXP 7
 854: PPUSH
 855: LD_INT 32
 857: PPUSH
 858: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 862: LD_EXP 8
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 877: LD_EXP 9
 881: PPUSH
 882: LD_INT 2
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 892: LD_EXP 12
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 907: LD_EXP 10
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 922: LD_EXP 11
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 937: LD_EXP 4
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// if Lisa = false then
 952: LD_EXP 4
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 977
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 962: LD_EXP 2
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 49
// if Lisa = false and Bobby = false then
 977: LD_EXP 4
 981: PUSH
 982: LD_INT 0
 984: EQUAL
 985: PUSH
 986: LD_EXP 2
 990: PUSH
 991: LD_INT 0
 993: EQUAL
 994: AND
 995: IFFALSE 1012
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 997: LD_EXP 3
1001: PPUSH
1002: LD_INT 2
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 0
1019: EQUAL
1020: PUSH
1021: LD_EXP 2
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: PUSH
1031: LD_EXP 3
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1057
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
1066: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1067: LD_EXP 13
1071: PPUSH
1072: LD_INT 10
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// if Frank then
1082: LD_EXP 5
1086: IFFALSE 1103
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1088: LD_EXP 5
1092: PPUSH
1093: LD_INT 10
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// uc_nation = 1 ;
1103: LD_ADDR_OWVAR 21
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// uc_side = 4 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 4
1118: ST_TO_ADDR
// hc_class := 3 ;
1119: LD_ADDR_OWVAR 28
1123: PUSH
1124: LD_INT 3
1126: ST_TO_ADDR
// hc_sex := sex_male ;
1127: LD_ADDR_OWVAR 27
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1135: LD_ADDR_OWVAR 33
1139: PUSH
1140: LD_STRING SecondCharsGal
1142: ST_TO_ADDR
// hc_face_number := 53 ;
1143: LD_ADDR_OWVAR 34
1147: PUSH
1148: LD_INT 53
1150: ST_TO_ADDR
// hc_name := Freddie Warner ;
1151: LD_ADDR_OWVAR 26
1155: PUSH
1156: LD_STRING Freddie Warner
1158: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1159: LD_ADDR_OWVAR 29
1163: PUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 11
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1174: LD_ADDR_OWVAR 30
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 0
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1197: LD_ADDR_OWVAR 31
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: LD_INT 0
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: ST_TO_ADDR
// un = CreateHuman ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: CALL_OW 44
1229: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1230: LD_VAR 0 3
1234: PPUSH
1235: LD_INT 10
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// hc_class := 1 ;
1245: LD_ADDR_OWVAR 28
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1261: LD_ADDR_OWVAR 33
1265: PUSH
1266: LD_STRING SecondCharsGal
1268: ST_TO_ADDR
// hc_face_number := 56 ;
1269: LD_ADDR_OWVAR 34
1273: PUSH
1274: LD_INT 56
1276: ST_TO_ADDR
// hc_name := Mel Brennan ;
1277: LD_ADDR_OWVAR 26
1281: PUSH
1282: LD_STRING Mel Brennan
1284: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1285: LD_ADDR_OWVAR 29
1289: PUSH
1290: LD_INT 12
1292: PUSH
1293: LD_INT 11
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1300: LD_ADDR_OWVAR 30
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: LD_INT 0
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1323: LD_ADDR_OWVAR 31
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 0
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: ST_TO_ADDR
// un = CreateHuman ;
1346: LD_ADDR_VAR 0 3
1350: PUSH
1351: CALL_OW 44
1355: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1356: LD_VAR 0 3
1360: PPUSH
1361: LD_INT 10
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 49
// hc_class := 1 ;
1371: LD_ADDR_OWVAR 28
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// hc_sex := sex_male ;
1379: LD_ADDR_OWVAR 27
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1387: LD_ADDR_OWVAR 33
1391: PUSH
1392: LD_STRING AmGalRemake
1394: ST_TO_ADDR
// hc_face_number := 5 ;
1395: LD_ADDR_OWVAR 34
1399: PUSH
1400: LD_INT 5
1402: ST_TO_ADDR
// hc_name := Bob Joplin ;
1403: LD_ADDR_OWVAR 26
1407: PUSH
1408: LD_STRING Bob Joplin
1410: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1411: LD_ADDR_OWVAR 29
1415: PUSH
1416: LD_INT 10
1418: PUSH
1419: LD_INT 11
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1426: LD_ADDR_OWVAR 30
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 0
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1449: LD_ADDR_OWVAR 31
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// un = CreateHuman ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: CALL_OW 44
1481: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1482: LD_VAR 0 3
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
// hc_class := 3 ;
1497: LD_ADDR_OWVAR 28
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// hc_sex := sex_female ;
1505: LD_ADDR_OWVAR 27
1509: PUSH
1510: LD_INT 2
1512: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1513: LD_ADDR_OWVAR 33
1517: PUSH
1518: LD_STRING AmGalRemake
1520: ST_TO_ADDR
// hc_face_number := 8 ;
1521: LD_ADDR_OWVAR 34
1525: PUSH
1526: LD_INT 8
1528: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1529: LD_ADDR_OWVAR 26
1533: PUSH
1534: LD_STRING Elizabeth Whitney
1536: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1537: LD_ADDR_OWVAR 29
1541: PUSH
1542: LD_INT 9
1544: PUSH
1545: LD_INT 11
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1552: LD_ADDR_OWVAR 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1575: LD_ADDR_OWVAR 31
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: LD_INT 2
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: ST_TO_ADDR
// un = CreateHuman ;
1598: LD_ADDR_VAR 0 3
1602: PUSH
1603: CALL_OW 44
1607: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1608: LD_VAR 0 3
1612: PPUSH
1613: LD_INT 10
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// InitHc ;
1623: CALL_OW 19
// end ;
1627: LD_VAR 0 1
1631: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
1636: PPUSH
1637: PPUSH
// uc_nation = 1 ;
1638: LD_ADDR_OWVAR 21
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// uc_side = 1 ;
1646: LD_ADDR_OWVAR 20
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1654: LD_ADDR_OWVAR 37
1658: PUSH
1659: LD_INT 2
1661: ST_TO_ADDR
// vc_engine := engine_combustion ;
1662: LD_ADDR_OWVAR 39
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// vc_control := control_manual ;
1670: LD_ADDR_OWVAR 38
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1678: LD_ADDR_OWVAR 41
1682: PUSH
1683: LD_INT 65
1685: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1686: LD_ADDR_OWVAR 40
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 3
1696: PUSH
1697: LD_INT 4
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_OWVAR 67
1709: ARRAY
1710: ST_TO_ADDR
// veh := CreateVehicle ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: CALL_OW 45
1720: ST_TO_ADDR
// if HexInfo ( 17 , 4 ) = 0 then
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 4
1726: PPUSH
1727: CALL_OW 428
1731: PUSH
1732: LD_INT 0
1734: EQUAL
1735: IFFALSE 1757
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1737: LD_VAR 0 5
1741: PPUSH
1742: LD_INT 17
1744: PPUSH
1745: LD_INT 4
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 48
1755: GO 1775
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1757: LD_VAR 0 5
1761: PPUSH
1762: LD_INT 23
1764: PPUSH
1765: LD_INT 10
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL_OW 48
// SetDir ( veh , 2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: LD_INT 2
1782: PPUSH
1783: CALL_OW 233
// hc_class := 1 ;
1787: LD_ADDR_OWVAR 28
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// hc_sex := sex_male ;
1795: LD_ADDR_OWVAR 27
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1803: LD_ADDR_OWVAR 33
1807: PUSH
1808: LD_STRING SecondCharsGal
1810: ST_TO_ADDR
// hc_face_number := 59 ;
1811: LD_ADDR_OWVAR 34
1815: PUSH
1816: LD_INT 59
1818: ST_TO_ADDR
// hc_name := Max Gray ;
1819: LD_ADDR_OWVAR 26
1823: PUSH
1824: LD_STRING Max Gray
1826: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1827: LD_ADDR_OWVAR 29
1831: PUSH
1832: LD_INT 9
1834: PUSH
1835: LD_INT 11
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1842: LD_ADDR_OWVAR 30
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1865: LD_ADDR_OWVAR 31
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: ST_TO_ADDR
// un = CreateHuman ;
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: CALL_OW 44
1897: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: LD_INT 11
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL_OW 49
// hc_class := 1 ;
1913: LD_ADDR_OWVAR 28
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// hc_sex := sex_male ;
1921: LD_ADDR_OWVAR 27
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1929: LD_ADDR_OWVAR 33
1933: PUSH
1934: LD_STRING SecondCharsGal
1936: ST_TO_ADDR
// hc_face_number := 54 ;
1937: LD_ADDR_OWVAR 34
1941: PUSH
1942: LD_INT 54
1944: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1945: LD_ADDR_OWVAR 26
1949: PUSH
1950: LD_STRING Luigi Ghbellin
1952: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1953: LD_ADDR_OWVAR 29
1957: PUSH
1958: LD_INT 11
1960: PUSH
1961: LD_INT 11
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1968: LD_ADDR_OWVAR 30
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1991: LD_ADDR_OWVAR 31
1995: PUSH
1996: LD_INT 1
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: ST_TO_ADDR
// un = CreateHuman ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 44
2023: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 11
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 49
// hc_class := 3 ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// hc_sex := sex_male ;
2047: LD_ADDR_OWVAR 27
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2055: LD_ADDR_OWVAR 33
2059: PUSH
2060: LD_STRING AmGalRemake
2062: ST_TO_ADDR
// hc_face_number := 6 ;
2063: LD_ADDR_OWVAR 34
2067: PUSH
2068: LD_INT 6
2070: ST_TO_ADDR
// hc_name := Leon Carter ;
2071: LD_ADDR_OWVAR 26
2075: PUSH
2076: LD_STRING Leon Carter
2078: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2079: LD_ADDR_OWVAR 29
2083: PUSH
2084: LD_INT 10
2086: PUSH
2087: LD_INT 9
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
2094: LD_ADDR_OWVAR 30
2098: PUSH
2099: LD_INT 0
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
2117: LD_ADDR_OWVAR 31
2121: PUSH
2122: LD_INT 0
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: ST_TO_ADDR
// un = CreateHuman ;
2140: LD_ADDR_VAR 0 4
2144: PUSH
2145: CALL_OW 44
2149: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2150: LD_VAR 0 4
2154: PPUSH
2155: LD_VAR 0 5
2159: PPUSH
2160: CALL_OW 52
// if count = 4 then
2164: LD_VAR 0 1
2168: PUSH
2169: LD_INT 4
2171: EQUAL
2172: IFFALSE 2300
// begin hc_class := 1 ;
2174: LD_ADDR_OWVAR 28
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// hc_sex := sex_male ;
2182: LD_ADDR_OWVAR 27
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2190: LD_ADDR_OWVAR 33
2194: PUSH
2195: LD_STRING SecondCharsGal
2197: ST_TO_ADDR
// hc_face_number := 34 ;
2198: LD_ADDR_OWVAR 34
2202: PUSH
2203: LD_INT 34
2205: ST_TO_ADDR
// hc_name := Ian Hill ;
2206: LD_ADDR_OWVAR 26
2210: PUSH
2211: LD_STRING Ian Hill
2213: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2214: LD_ADDR_OWVAR 29
2218: PUSH
2219: LD_INT 10
2221: PUSH
2222: LD_INT 12
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2229: LD_ADDR_OWVAR 30
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: LD_INT 0
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2252: LD_ADDR_OWVAR 31
2256: PUSH
2257: LD_INT 2
2259: PUSH
2260: LD_INT 0
2262: PUSH
2263: LD_INT 1
2265: PUSH
2266: LD_INT 0
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: ST_TO_ADDR
// un = CreateHuman ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: CALL_OW 44
2284: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2285: LD_VAR 0 4
2289: PPUSH
2290: LD_INT 11
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL_OW 49
// end ; if count = 5 then
2300: LD_VAR 0 1
2304: PUSH
2305: LD_INT 5
2307: EQUAL
2308: IFFALSE 2562
// begin hc_class := 1 ;
2310: LD_ADDR_OWVAR 28
2314: PUSH
2315: LD_INT 1
2317: ST_TO_ADDR
// hc_sex := sex_male ;
2318: LD_ADDR_OWVAR 27
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2326: LD_ADDR_OWVAR 33
2330: PUSH
2331: LD_STRING SecondCharsGal
2333: ST_TO_ADDR
// hc_face_number := 34 ;
2334: LD_ADDR_OWVAR 34
2338: PUSH
2339: LD_INT 34
2341: ST_TO_ADDR
// hc_name := Ian Hill ;
2342: LD_ADDR_OWVAR 26
2346: PUSH
2347: LD_STRING Ian Hill
2349: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2350: LD_ADDR_OWVAR 29
2354: PUSH
2355: LD_INT 10
2357: PUSH
2358: LD_INT 12
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2365: LD_ADDR_OWVAR 30
2369: PUSH
2370: LD_INT 0
2372: PUSH
2373: LD_INT 0
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 0
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2388: LD_ADDR_OWVAR 31
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: LD_INT 0
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: LD_INT 0
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: ST_TO_ADDR
// un = CreateHuman ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: LD_INT 11
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: CALL_OW 49
// hc_class := 1 ;
2436: LD_ADDR_OWVAR 28
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// hc_sex := sex_female ;
2444: LD_ADDR_OWVAR 27
2448: PUSH
2449: LD_INT 2
2451: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2452: LD_ADDR_OWVAR 33
2456: PUSH
2457: LD_STRING SecondCharsGal
2459: ST_TO_ADDR
// hc_face_number := 41 ;
2460: LD_ADDR_OWVAR 34
2464: PUSH
2465: LD_INT 41
2467: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2468: LD_ADDR_OWVAR 26
2472: PUSH
2473: LD_STRING Kate Wadsworth
2475: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2476: LD_ADDR_OWVAR 29
2480: PUSH
2481: LD_INT 9
2483: PUSH
2484: LD_INT 9
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2491: LD_ADDR_OWVAR 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: LD_INT 2
2501: PUSH
2502: LD_INT 0
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2514: LD_ADDR_OWVAR 31
2518: PUSH
2519: LD_INT 2
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: ST_TO_ADDR
// un = CreateHuman ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: CALL_OW 44
2546: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2547: LD_VAR 0 4
2551: PPUSH
2552: LD_INT 11
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2562: LD_INT 11
2564: PPUSH
2565: LD_INT 22
2567: PUSH
2568: LD_INT 1
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 21
2577: PUSH
2578: LD_INT 1
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 26
2587: PUSH
2588: LD_INT 1
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 70
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: PPUSH
2609: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2613: LD_INT 11
2615: PPUSH
2616: LD_INT 22
2618: PUSH
2619: LD_INT 1
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 21
2628: PUSH
2629: LD_INT 1
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 26
2638: PUSH
2639: LD_INT 1
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 70
2655: PUSH
2656: LD_INT 1
2658: ARRAY
2659: PPUSH
2660: LD_STRING D6-Sol3-1
2662: PPUSH
2663: CALL_OW 88
// end ; end_of_file
2667: LD_VAR 0 2
2671: RET
// export function PrepareRussianCommander ; begin
2672: LD_INT 0
2674: PPUSH
// uc_side = 3 ;
2675: LD_ADDR_OWVAR 20
2679: PUSH
2680: LD_INT 3
2682: ST_TO_ADDR
// uc_nation = 3 ;
2683: LD_ADDR_OWVAR 21
2687: PUSH
2688: LD_INT 3
2690: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2691: LD_ADDR_EXP 15
2695: PUSH
2696: LD_STRING Stolypin
2698: PPUSH
2699: CALL_OW 25
2703: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2704: LD_EXP 15
2708: PPUSH
2709: LD_INT 21
2711: PPUSH
2712: CALL_OW 52
// end ;
2716: LD_VAR 0 1
2720: RET
// export function PrepareRussianBase ; var i ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2725: LD_INT 3
2727: PPUSH
2728: LD_INT 3
2730: PPUSH
2731: LD_INT 22
2733: PPUSH
2734: LD_EXP 16
2738: PPUSH
2739: LD_EXP 17
2743: PPUSH
2744: CALL_OW 12
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 2
2754: PPUSH
2755: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2759: LD_INT 3
2761: PPUSH
2762: LD_INT 3
2764: PPUSH
2765: LD_INT 21
2767: PPUSH
2768: LD_EXP 16
2772: PPUSH
2773: LD_EXP 17
2777: PPUSH
2778: CALL_OW 12
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: LD_INT 3
2788: PPUSH
2789: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2793: LD_INT 3
2795: PPUSH
2796: LD_INT 3
2798: PPUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_EXP 16
2806: PPUSH
2807: LD_EXP 17
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: LD_INT 4
2819: PPUSH
2820: LD_INT 2
2822: PPUSH
2823: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 3
2832: PPUSH
2833: LD_INT 24
2835: PPUSH
2836: LD_EXP 16
2840: PPUSH
2841: LD_EXP 17
2845: PPUSH
2846: CALL_OW 12
2850: PPUSH
2851: LD_INT 3
2853: PPUSH
2854: LD_INT 6
2856: PPUSH
2857: CALL 4020 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2861: LD_ADDR_VAR 0 2
2865: PUSH
2866: LD_INT 22
2868: PUSH
2869: LD_INT 3
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: LD_INT 30
2878: PUSH
2879: LD_INT 32
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PPUSH
2890: CALL_OW 69
2894: PUSH
2895: FOR_IN
2896: IFFALSE 2936
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2898: LD_INT 3
2900: PPUSH
2901: LD_INT 3
2903: PPUSH
2904: LD_VAR 0 2
2908: PPUSH
2909: LD_EXP 16
2913: PPUSH
2914: LD_EXP 17
2918: PPUSH
2919: CALL_OW 12
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: LD_INT 1
2929: PPUSH
2930: CALL 4020 0 6
2934: GO 2895
2936: POP
2937: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 30
2955: PUSH
2956: LD_INT 31
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: PUSH
2972: FOR_IN
2973: IFFALSE 3001
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_EXP 17
2984: PPUSH
2985: CALL_OW 12
2989: PPUSH
2990: LD_VAR 0 2
2994: PPUSH
2995: CALL 4130 0 2
2999: GO 2972
3001: POP
3002: POP
// end ;
3003: LD_VAR 0 1
3007: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3008: LD_INT 0
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
// uc_side = 6 ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_INT 6
3021: ST_TO_ADDR
// uc_nation = 3 ;
3022: LD_ADDR_OWVAR 21
3026: PUSH
3027: LD_INT 3
3029: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3030: LD_ADDR_VAR 0 2
3034: PUSH
3035: DOUBLE
3036: LD_INT 1
3038: DEC
3039: ST_TO_ADDR
3040: LD_INT 1
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: CALL_OW 12
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: PUSH
3062: LD_OWVAR 67
3066: ARRAY
3067: PUSH
3068: FOR_TO
3069: IFFALSE 3229
// begin vc_engine = 1 ;
3071: LD_ADDR_OWVAR 39
3075: PUSH
3076: LD_INT 1
3078: ST_TO_ADDR
// vc_control = 1 ;
3079: LD_ADDR_OWVAR 38
3083: PUSH
3084: LD_INT 1
3086: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3087: LD_ADDR_OWVAR 40
3091: PUSH
3092: LD_INT 42
3094: PUSH
3095: LD_INT 42
3097: PUSH
3098: LD_INT 43
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: PUSH
3106: LD_OWVAR 67
3110: ARRAY
3111: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3112: LD_ADDR_OWVAR 37
3116: PUSH
3117: LD_INT 21
3119: PUSH
3120: LD_INT 22
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PUSH
3131: LD_OWVAR 67
3135: ARRAY
3136: ST_TO_ADDR
// veh = CreateVehicle ;
3137: LD_ADDR_VAR 0 3
3141: PUSH
3142: CALL_OW 45
3146: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3147: LD_VAR 0 3
3151: PPUSH
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 0
3157: PPUSH
3158: CALL_OW 49
// hc_gallery =  ;
3162: LD_ADDR_OWVAR 33
3166: PUSH
3167: LD_STRING 
3169: ST_TO_ADDR
// hc_name =  ;
3170: LD_ADDR_OWVAR 26
3174: PUSH
3175: LD_STRING 
3177: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3178: LD_INT 0
3180: PPUSH
3181: LD_INT 3
3183: PPUSH
3184: LD_EXP 16
3188: PPUSH
3189: LD_EXP 17
3193: PPUSH
3194: CALL_OW 12
3198: PPUSH
3199: CALL_OW 380
// un = CreateHuman ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_VAR 0 3
3222: PPUSH
3223: CALL_OW 52
// end ;
3227: GO 3068
3229: POP
3230: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3231: LD_INT 0
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: LD_EXP 16
3241: PPUSH
3242: LD_EXP 17
3246: PPUSH
3247: CALL_OW 12
3251: PUSH
3252: LD_INT 2
3254: PLUS
3255: PPUSH
3256: CALL_OW 380
// un = CreateHuman ;
3260: LD_ADDR_VAR 0 4
3264: PUSH
3265: CALL_OW 44
3269: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3270: LD_VAR 0 4
3274: PPUSH
3275: LD_INT 3
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 4
3290: PPUSH
3291: LD_EXP 16
3295: PPUSH
3296: LD_EXP 17
3300: PPUSH
3301: CALL_OW 12
3305: PUSH
3306: LD_INT 2
3308: PLUS
3309: PPUSH
3310: CALL_OW 380
// un = CreateHuman ;
3314: LD_ADDR_VAR 0 4
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: DOUBLE
3345: LD_INT 1
3347: DEC
3348: ST_TO_ADDR
3349: LD_INT 2
3351: PUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 3
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PUSH
3369: LD_INT 1
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: CALL_OW 12
3379: PLUS
3380: PUSH
3381: FOR_TO
3382: IFFALSE 3452
// begin hc_gallery =  ;
3384: LD_ADDR_OWVAR 33
3388: PUSH
3389: LD_STRING 
3391: ST_TO_ADDR
// hc_name =  ;
3392: LD_ADDR_OWVAR 26
3396: PUSH
3397: LD_STRING 
3399: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_EXP 16
3410: PPUSH
3411: LD_EXP 17
3415: PPUSH
3416: CALL_OW 12
3420: PPUSH
3421: CALL_OW 380
// un = CreateHuman ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3435: LD_VAR 0 4
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 0
3445: PPUSH
3446: CALL_OW 49
// end ;
3450: GO 3381
3452: POP
3453: POP
// vc_engine = 1 ;
3454: LD_ADDR_OWVAR 39
3458: PUSH
3459: LD_INT 1
3461: ST_TO_ADDR
// vc_control = 1 ;
3462: LD_ADDR_OWVAR 38
3466: PUSH
3467: LD_INT 1
3469: ST_TO_ADDR
// vc_weapon = 51 ;
3470: LD_ADDR_OWVAR 40
3474: PUSH
3475: LD_INT 51
3477: ST_TO_ADDR
// vc_chassis = 22 ;
3478: LD_ADDR_OWVAR 37
3482: PUSH
3483: LD_INT 22
3485: ST_TO_ADDR
// veh = CreateVehicle ;
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: CALL_OW 45
3495: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3496: LD_VAR 0 3
3500: PPUSH
3501: LD_INT 3
3503: PPUSH
3504: LD_INT 0
3506: PPUSH
3507: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 1
3518: PPUSH
3519: LD_INT 100
3521: PPUSH
3522: CALL_OW 290
// hc_gallery =  ;
3526: LD_ADDR_OWVAR 33
3530: PUSH
3531: LD_STRING 
3533: ST_TO_ADDR
// hc_name =  ;
3534: LD_ADDR_OWVAR 26
3538: PUSH
3539: LD_STRING 
3541: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3542: LD_INT 0
3544: PPUSH
3545: LD_INT 3
3547: PPUSH
3548: LD_EXP 16
3552: PPUSH
3553: LD_EXP 17
3557: PPUSH
3558: CALL_OW 12
3562: PPUSH
3563: CALL_OW 380
// un = CreateHuman ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 3
3586: PPUSH
3587: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: LD_INT 22
3598: PUSH
3599: LD_INT 6
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 1
3608: PUSH
3609: LD_INT 3
3611: PUSH
3612: LD_INT 25
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PPUSH
3652: CALL_OW 69
3656: PUSH
3657: FOR_IN
3658: IFFALSE 3677
// ComAgressiveMove ( i , 45 , 46 ) ;
3660: LD_VAR 0 2
3664: PPUSH
3665: LD_INT 45
3667: PPUSH
3668: LD_INT 46
3670: PPUSH
3671: CALL_OW 114
3675: GO 3657
3677: POP
3678: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3679: LD_ADDR_VAR 0 2
3683: PUSH
3684: LD_INT 22
3686: PUSH
3687: LD_INT 6
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 25
3696: PUSH
3697: LD_INT 2
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL_OW 69
3712: PUSH
3713: FOR_IN
3714: IFFALSE 3745
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3716: LD_ADDR_EXP 21
3720: PUSH
3721: LD_VAR 0 2
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: LD_INT 48
3731: PPUSH
3732: LD_INT 55
3734: PPUSH
3735: LD_INT 5
3737: PPUSH
3738: CALL_OW 145
3742: ST_TO_ADDR
3743: GO 3713
3745: POP
3746: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3747: LD_ADDR_VAR 0 2
3751: PUSH
3752: LD_INT 22
3754: PUSH
3755: LD_INT 6
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 25
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: PPUSH
3776: CALL_OW 69
3780: PUSH
3781: FOR_IN
3782: IFFALSE 3801
// ComMoveXY ( i , 39 , 55 ) ;
3784: LD_VAR 0 2
3788: PPUSH
3789: LD_INT 39
3791: PPUSH
3792: LD_INT 55
3794: PPUSH
3795: CALL_OW 111
3799: GO 3781
3801: POP
3802: POP
// end ;
3803: LD_VAR 0 1
3807: RET
// export function PrepareFirstAttack ; var i , un ; begin
3808: LD_INT 0
3810: PPUSH
3811: PPUSH
3812: PPUSH
// uc_side = 5 ;
3813: LD_ADDR_OWVAR 20
3817: PUSH
3818: LD_INT 5
3820: ST_TO_ADDR
// uc_nation = 3 ;
3821: LD_ADDR_OWVAR 21
3825: PUSH
3826: LD_INT 3
3828: ST_TO_ADDR
// for i := 1 to 4 do
3829: LD_ADDR_VAR 0 2
3833: PUSH
3834: DOUBLE
3835: LD_INT 1
3837: DEC
3838: ST_TO_ADDR
3839: LD_INT 4
3841: PUSH
3842: FOR_TO
3843: IFFALSE 3942
// begin hc_gallery =  ;
3845: LD_ADDR_OWVAR 33
3849: PUSH
3850: LD_STRING 
3852: ST_TO_ADDR
// hc_name =  ;
3853: LD_ADDR_OWVAR 26
3857: PUSH
3858: LD_STRING 
3860: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3861: LD_INT 0
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_EXP 16
3871: PPUSH
3872: LD_EXP 17
3876: PPUSH
3877: CALL_OW 12
3881: PPUSH
3882: CALL_OW 380
// un = CreateHuman ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: CALL_OW 44
3895: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_EXP 1
3920: PPUSH
3921: CALL_OW 250
3925: PPUSH
3926: LD_EXP 1
3930: PPUSH
3931: CALL_OW 251
3935: PPUSH
3936: CALL_OW 114
// end ;
3940: GO 3842
3942: POP
3943: POP
// firstRussianAttack = 1 ;
3944: LD_ADDR_EXP 23
3948: PUSH
3949: LD_INT 1
3951: ST_TO_ADDR
// end ; end_of_file
3952: LD_VAR 0 1
3956: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3957: LD_INT 0
3959: PPUSH
3960: PPUSH
// if exist_mode then
3961: LD_VAR 0 2
3965: IFFALSE 3990
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3967: LD_ADDR_VAR 0 4
3971: PUSH
3972: LD_EXP 45
3976: PUSH
3977: LD_VAR 0 1
3981: STR
3982: PPUSH
3983: CALL_OW 34
3987: ST_TO_ADDR
// end else
3988: GO 4005
// begin unit := NewCharacter ( ident ) ;
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 25
4004: ST_TO_ADDR
// end ; result := unit ;
4005: LD_ADDR_VAR 0 3
4009: PUSH
4010: LD_VAR 0 4
4014: ST_TO_ADDR
// end ;
4015: LD_VAR 0 3
4019: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4020: LD_INT 0
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
// for i = 1 to count do
4026: LD_ADDR_VAR 0 8
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_VAR 0 6
4040: PUSH
4041: FOR_TO
4042: IFFALSE 4123
// begin uc_side = side ;
4044: LD_ADDR_OWVAR 20
4048: PUSH
4049: LD_VAR 0 1
4053: ST_TO_ADDR
// uc_nation = nation ;
4054: LD_ADDR_OWVAR 21
4058: PUSH
4059: LD_VAR 0 2
4063: ST_TO_ADDR
// hc_gallery =  ;
4064: LD_ADDR_OWVAR 33
4068: PUSH
4069: LD_STRING 
4071: ST_TO_ADDR
// hc_name =  ;
4072: LD_ADDR_OWVAR 26
4076: PUSH
4077: LD_STRING 
4079: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4080: LD_INT 0
4082: PPUSH
4083: LD_VAR 0 5
4087: PPUSH
4088: LD_VAR 0 4
4092: PPUSH
4093: CALL_OW 380
// un = CreateHuman ;
4097: LD_ADDR_VAR 0 10
4101: PUSH
4102: CALL_OW 44
4106: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4107: LD_VAR 0 10
4111: PPUSH
4112: LD_VAR 0 3
4116: PPUSH
4117: CALL_OW 52
// end ;
4121: GO 4041
4123: POP
4124: POP
// end ;
4125: LD_VAR 0 7
4129: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4130: LD_INT 0
4132: PPUSH
4133: PPUSH
4134: PPUSH
// uc_side := GetSide ( b ) ;
4135: LD_ADDR_OWVAR 20
4139: PUSH
4140: LD_VAR 0 2
4144: PPUSH
4145: CALL_OW 255
4149: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_VAR 0 2
4159: PPUSH
4160: CALL_OW 248
4164: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4165: LD_INT 0
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: LD_VAR 0 1
4175: PPUSH
4176: CALL_OW 380
// un = CreateHuman ;
4180: LD_ADDR_VAR 0 4
4184: PUSH
4185: CALL_OW 44
4189: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4190: LD_ADDR_VAR 0 5
4194: PUSH
4195: LD_VAR 0 2
4199: PPUSH
4200: CALL_OW 254
4204: PUSH
4205: LD_INT 3
4207: MINUS
4208: ST_TO_ADDR
// if dir < 0 then
4209: LD_VAR 0 5
4213: PUSH
4214: LD_INT 0
4216: LESS
4217: IFFALSE 4233
// dir := 6 + dir ;
4219: LD_ADDR_VAR 0 5
4223: PUSH
4224: LD_INT 6
4226: PUSH
4227: LD_VAR 0 5
4231: PLUS
4232: ST_TO_ADDR
// SetDir ( un , dir ) ;
4233: LD_VAR 0 4
4237: PPUSH
4238: LD_VAR 0 5
4242: PPUSH
4243: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4247: LD_VAR 0 4
4251: PPUSH
4252: LD_VAR 0 2
4256: PPUSH
4257: CALL_OW 52
// end ;
4261: LD_VAR 0 3
4265: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4266: LD_INT 0
4268: PPUSH
4269: PPUSH
4270: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_VAR 0 1
4280: PUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 12
4293: ARRAY
4294: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4295: LD_VAR 0 6
4299: PPUSH
4300: CALL_OW 258
4304: PUSH
4305: LD_INT 1
4307: EQUAL
4308: IFFALSE 4326
// Say ( speaker , dialogMID ) else
4310: LD_VAR 0 6
4314: PPUSH
4315: LD_VAR 0 2
4319: PPUSH
4320: CALL_OW 88
4324: GO 4340
// Say ( speaker , dialogFID ) ;
4326: LD_VAR 0 6
4330: PPUSH
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 88
// result := speaker ;
4340: LD_ADDR_VAR 0 4
4344: PUSH
4345: LD_VAR 0 6
4349: ST_TO_ADDR
// end ;
4350: LD_VAR 0 4
4354: RET
// export function PrepareDifficulty ; var tmp ; begin
4355: LD_INT 0
4357: PPUSH
4358: PPUSH
// if Difficulty = 1 then
4359: LD_OWVAR 67
4363: PUSH
4364: LD_INT 1
4366: EQUAL
4367: IFFALSE 4385
// begin RuSoldMinLevel = 0 ;
4369: LD_ADDR_EXP 16
4373: PUSH
4374: LD_INT 0
4376: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4377: LD_ADDR_EXP 17
4381: PUSH
4382: LD_INT 2
4384: ST_TO_ADDR
// end ; if Difficulty = 2 then
4385: LD_OWVAR 67
4389: PUSH
4390: LD_INT 2
4392: EQUAL
4393: IFFALSE 4501
// begin RuSoldMinLevel = 1 ;
4395: LD_ADDR_EXP 16
4399: PUSH
4400: LD_INT 1
4402: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4403: LD_ADDR_EXP 17
4407: PUSH
4408: LD_INT 2
4410: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4411: LD_INT 14
4413: PPUSH
4414: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4418: LD_INT 23
4420: PPUSH
4421: CALL_OW 64
// uc_nation = 3 ;
4425: LD_ADDR_OWVAR 21
4429: PUSH
4430: LD_INT 3
4432: ST_TO_ADDR
// uc_side = 3 ;
4433: LD_ADDR_OWVAR 20
4437: PUSH
4438: LD_INT 3
4440: ST_TO_ADDR
// bc_level = 5 ;
4441: LD_ADDR_OWVAR 43
4445: PUSH
4446: LD_INT 5
4448: ST_TO_ADDR
// bc_type = 32 ;
4449: LD_ADDR_OWVAR 42
4453: PUSH
4454: LD_INT 32
4456: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: LD_INT 76
4464: PPUSH
4465: LD_INT 91
4467: PPUSH
4468: LD_INT 2
4470: PPUSH
4471: CALL_OW 47
4475: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4476: LD_VAR 0 2
4480: PPUSH
4481: LD_INT 43
4483: PPUSH
4484: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4488: LD_INT 51
4490: PPUSH
4491: LD_INT 3
4493: PPUSH
4494: LD_INT 1
4496: PPUSH
4497: CALL_OW 322
// end ; if Difficulty = 3 then
4501: LD_OWVAR 67
4505: PUSH
4506: LD_INT 3
4508: EQUAL
4509: IFFALSE 4685
// begin RuSoldMinLevel = 1 ;
4511: LD_ADDR_EXP 16
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4519: LD_ADDR_EXP 17
4523: PUSH
4524: LD_INT 3
4526: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4527: LD_INT 13
4529: PPUSH
4530: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4534: LD_INT 14
4536: PPUSH
4537: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4541: LD_INT 26
4543: PPUSH
4544: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4548: LD_INT 23
4550: PPUSH
4551: CALL_OW 64
// uc_nation = 3 ;
4555: LD_ADDR_OWVAR 21
4559: PUSH
4560: LD_INT 3
4562: ST_TO_ADDR
// uc_side = 3 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 3
4570: ST_TO_ADDR
// bc_level = 5 ;
4571: LD_ADDR_OWVAR 43
4575: PUSH
4576: LD_INT 5
4578: ST_TO_ADDR
// bc_type = 32 ;
4579: LD_ADDR_OWVAR 42
4583: PUSH
4584: LD_INT 32
4586: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4587: LD_ADDR_VAR 0 2
4591: PUSH
4592: LD_INT 76
4594: PPUSH
4595: LD_INT 91
4597: PPUSH
4598: LD_INT 2
4600: PPUSH
4601: CALL_OW 47
4605: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4606: LD_VAR 0 2
4610: PPUSH
4611: LD_INT 44
4613: PPUSH
4614: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 83
4625: PPUSH
4626: LD_INT 84
4628: PPUSH
4629: LD_INT 2
4631: PPUSH
4632: CALL_OW 47
4636: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_INT 43
4644: PPUSH
4645: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4649: LD_INT 51
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4662: LD_INT 52
4664: PPUSH
4665: LD_INT 3
4667: PPUSH
4668: LD_INT 1
4670: PPUSH
4671: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4675: LD_INT 25
4677: PPUSH
4678: LD_INT 44
4680: PPUSH
4681: CALL_OW 431
// end ; end ;
4685: LD_VAR 0 1
4689: RET
// export function EnergyDialog ; begin
4690: LD_INT 0
4692: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4693: LD_INT 46
4695: PPUSH
4696: LD_INT 1
4698: PPUSH
4699: CALL_OW 321
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: PUSH
4708: LD_INT 35
4710: PPUSH
4711: LD_INT 1
4713: PPUSH
4714: CALL_OW 321
4718: PUSH
4719: LD_INT 1
4721: EQUAL
4722: AND
4723: IFFALSE 4747
// begin Say ( JMM , D9c-JMM-1 ) ;
4725: LD_EXP 1
4729: PPUSH
4730: LD_STRING D9c-JMM-1
4732: PPUSH
4733: CALL_OW 88
// energyVDialog = 1 ;
4737: LD_ADDR_EXP 33
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// end else
4745: GO 4901
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4747: LD_INT 35
4749: PPUSH
4750: LD_INT 1
4752: PPUSH
4753: CALL_OW 321
4757: PUSH
4758: LD_INT 2
4760: EQUAL
4761: PUSH
4762: LD_EXP 33
4766: PUSH
4767: LD_INT 0
4769: EQUAL
4770: AND
4771: IFFALSE 4793
// begin Say ( JMM , D9c-JMM-1a ) ;
4773: LD_EXP 1
4777: PPUSH
4778: LD_STRING D9c-JMM-1a
4780: PPUSH
4781: CALL_OW 88
// energyVDialog = 1 ;
4785: LD_ADDR_EXP 33
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4793: LD_INT 46
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 321
4803: PUSH
4804: LD_INT 2
4806: EQUAL
4807: PUSH
4808: LD_EXP 33
4812: PUSH
4813: LD_INT 0
4815: EQUAL
4816: AND
4817: IFFALSE 4839
// begin Say ( JMM , D9c-JMM-1b ) ;
4819: LD_EXP 1
4823: PPUSH
4824: LD_STRING D9c-JMM-1b
4826: PPUSH
4827: CALL_OW 88
// energyVDialog = 1 ;
4831: LD_ADDR_EXP 33
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4839: LD_INT 46
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: CALL_OW 321
4849: PUSH
4850: LD_INT 2
4852: EQUAL
4853: PUSH
4854: LD_INT 21
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: CALL_OW 321
4864: PUSH
4865: LD_INT 2
4867: EQUAL
4868: AND
4869: PUSH
4870: LD_EXP 33
4874: PUSH
4875: LD_INT 0
4877: EQUAL
4878: AND
4879: IFFALSE 4901
// begin Say ( JMM , D9c-JMM-1c ) ;
4881: LD_EXP 1
4885: PPUSH
4886: LD_STRING D9c-JMM-1c
4888: PPUSH
4889: CALL_OW 88
// energyVDialog = 1 ;
4893: LD_ADDR_EXP 33
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// end ; end ; end ;
4901: LD_VAR 0 1
4905: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4906: LD_INT 0
4908: PPUSH
4909: PPUSH
4910: PPUSH
4911: PPUSH
4912: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4913: LD_VAR 0 1
4917: NOT
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 256
4928: PUSH
4929: LD_INT 250
4931: LESS
4932: OR
4933: PUSH
4934: LD_VAR 0 1
4938: PPUSH
4939: CALL_OW 314
4943: PUSH
4944: LD_VAR 0 1
4948: PPUSH
4949: CALL_OW 261
4953: PUSH
4954: LD_INT 20
4956: GREATER
4957: AND
4958: OR
4959: IFFALSE 4963
// exit ;
4961: GO 5328
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4963: LD_VAR 0 1
4967: PPUSH
4968: CALL_OW 261
4972: PUSH
4973: LD_INT 20
4975: LESS
4976: PUSH
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL_OW 110
4986: PUSH
4987: LD_INT 21
4989: EQUAL
4990: NOT
4991: AND
4992: IFFALSE 5019
// begin ComStop ( bulldozer ) ;
4994: LD_VAR 0 1
4998: PPUSH
4999: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5003: LD_VAR 0 1
5007: PPUSH
5008: LD_INT 21
5010: PPUSH
5011: CALL_OW 109
// exit ;
5015: GO 5328
// end else
5017: GO 5046
// if GetFuel ( bulldozer ) > 20 then
5019: LD_VAR 0 1
5023: PPUSH
5024: CALL_OW 261
5028: PUSH
5029: LD_INT 20
5031: GREATER
5032: IFFALSE 5046
// SetTag ( bulldozer , 0 ) ;
5034: LD_VAR 0 1
5038: PPUSH
5039: LD_INT 0
5041: PPUSH
5042: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5046: LD_ADDR_VAR 0 5
5050: PUSH
5051: LD_VAR 0 2
5055: PPUSH
5056: CALL_OW 353
5060: ST_TO_ADDR
// tmp := [ ] ;
5061: LD_ADDR_VAR 0 6
5065: PUSH
5066: EMPTY
5067: ST_TO_ADDR
// for i = 1 to list do
5068: LD_ADDR_VAR 0 4
5072: PUSH
5073: DOUBLE
5074: LD_INT 1
5076: DEC
5077: ST_TO_ADDR
5078: LD_VAR 0 5
5082: PUSH
5083: FOR_TO
5084: IFFALSE 5182
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5086: LD_VAR 0 5
5090: PUSH
5091: LD_VAR 0 4
5095: ARRAY
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PPUSH
5101: LD_VAR 0 5
5105: PUSH
5106: LD_VAR 0 4
5110: ARRAY
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 554
5120: IFFALSE 5180
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5122: LD_ADDR_VAR 0 6
5126: PUSH
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_VAR 0 6
5136: PUSH
5137: LD_INT 1
5139: PLUS
5140: PPUSH
5141: LD_VAR 0 5
5145: PUSH
5146: LD_VAR 0 4
5150: ARRAY
5151: PUSH
5152: LD_INT 1
5154: ARRAY
5155: PUSH
5156: LD_VAR 0 5
5160: PUSH
5161: LD_VAR 0 4
5165: ARRAY
5166: PUSH
5167: LD_INT 2
5169: ARRAY
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: CALL_OW 1
5179: ST_TO_ADDR
// end ;
5180: GO 5083
5182: POP
5183: POP
// ComStop ( bulldozer ) ;
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5193: LD_ADDR_VAR 0 7
5197: PUSH
5198: LD_VAR 0 1
5202: PPUSH
5203: CALL_OW 250
5207: PUSH
5208: LD_VAR 0 1
5212: PPUSH
5213: CALL_OW 251
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: ST_TO_ADDR
// for i = tmp downto 1 do
5222: LD_ADDR_VAR 0 4
5226: PUSH
5227: DOUBLE
5228: LD_VAR 0 6
5232: INC
5233: ST_TO_ADDR
5234: LD_INT 1
5236: PUSH
5237: FOR_DOWNTO
5238: IFFALSE 5326
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5240: LD_ADDR_VAR 0 7
5244: PUSH
5245: LD_VAR 0 7
5249: PUSH
5250: LD_INT 1
5252: ARRAY
5253: PPUSH
5254: LD_VAR 0 7
5258: PUSH
5259: LD_INT 2
5261: ARRAY
5262: PPUSH
5263: LD_VAR 0 6
5267: PPUSH
5268: CALL 5429 0 3
5272: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5273: LD_VAR 0 1
5277: PPUSH
5278: LD_VAR 0 7
5282: PUSH
5283: LD_INT 1
5285: ARRAY
5286: PPUSH
5287: LD_VAR 0 7
5291: PUSH
5292: LD_INT 2
5294: ARRAY
5295: PPUSH
5296: CALL 5333 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5300: LD_ADDR_VAR 0 6
5304: PUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_VAR 0 7
5314: PUSH
5315: LD_INT 3
5317: ARRAY
5318: PPUSH
5319: CALL_OW 3
5323: ST_TO_ADDR
// end ;
5324: GO 5237
5326: POP
5327: POP
// end ;
5328: LD_VAR 0 3
5332: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5333: LD_INT 0
5335: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5336: LD_VAR 0 2
5340: PPUSH
5341: LD_VAR 0 3
5345: PPUSH
5346: CALL_OW 351
5350: PUSH
5351: LD_VAR 0 2
5355: PPUSH
5356: LD_VAR 0 3
5360: PPUSH
5361: CALL_OW 554
5365: AND
5366: PUSH
5367: LD_VAR 0 2
5371: PPUSH
5372: LD_VAR 0 3
5376: PPUSH
5377: CALL_OW 488
5381: AND
5382: PUSH
5383: LD_VAR 0 2
5387: PPUSH
5388: LD_VAR 0 3
5392: PPUSH
5393: CALL_OW 428
5397: PUSH
5398: LD_INT 1
5400: NEG
5401: EQUAL
5402: AND
5403: IFFALSE 5424
// AddComMoveXY ( bulldozer , x , y ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_VAR 0 2
5414: PPUSH
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 171
// end ;
5424: LD_VAR 0 4
5428: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5429: LD_INT 0
5431: PPUSH
5432: PPUSH
5433: PPUSH
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
// dist := 99999 ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_INT 99999
5445: ST_TO_ADDR
// for i = 1 to list do
5446: LD_ADDR_VAR 0 5
5450: PUSH
5451: DOUBLE
5452: LD_INT 1
5454: DEC
5455: ST_TO_ADDR
5456: LD_VAR 0 3
5460: PUSH
5461: FOR_TO
5462: IFFALSE 5600
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5464: LD_ADDR_VAR 0 7
5468: PUSH
5469: LD_VAR 0 1
5473: PPUSH
5474: LD_VAR 0 2
5478: PPUSH
5479: LD_VAR 0 3
5483: PUSH
5484: LD_VAR 0 5
5488: ARRAY
5489: PUSH
5490: LD_INT 1
5492: ARRAY
5493: PPUSH
5494: LD_VAR 0 3
5498: PUSH
5499: LD_VAR 0 5
5503: ARRAY
5504: PUSH
5505: LD_INT 2
5507: ARRAY
5508: PPUSH
5509: CALL_OW 298
5513: ST_TO_ADDR
// if d = 0 then
5514: LD_VAR 0 7
5518: PUSH
5519: LD_INT 0
5521: EQUAL
5522: IFFALSE 5526
// continue ;
5524: GO 5461
// if d < dist then
5526: LD_VAR 0 7
5530: PUSH
5531: LD_VAR 0 6
5535: LESS
5536: IFFALSE 5598
// begin _x := list [ i ] [ 1 ] ;
5538: LD_ADDR_VAR 0 8
5542: PUSH
5543: LD_VAR 0 3
5547: PUSH
5548: LD_VAR 0 5
5552: ARRAY
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5558: LD_ADDR_VAR 0 9
5562: PUSH
5563: LD_VAR 0 3
5567: PUSH
5568: LD_VAR 0 5
5572: ARRAY
5573: PUSH
5574: LD_INT 2
5576: ARRAY
5577: ST_TO_ADDR
// _i := i ;
5578: LD_ADDR_VAR 0 10
5582: PUSH
5583: LD_VAR 0 5
5587: ST_TO_ADDR
// dist := d ;
5588: LD_ADDR_VAR 0 6
5592: PUSH
5593: LD_VAR 0 7
5597: ST_TO_ADDR
// end ; end ;
5598: GO 5461
5600: POP
5601: POP
// result := [ _x , _y , _i , dist ] ;
5602: LD_ADDR_VAR 0 4
5606: PUSH
5607: LD_VAR 0 8
5611: PUSH
5612: LD_VAR 0 9
5616: PUSH
5617: LD_VAR 0 10
5621: PUSH
5622: LD_VAR 0 6
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: ST_TO_ADDR
// end ;
5633: LD_VAR 0 4
5637: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5638: LD_INT 0
5640: PPUSH
5641: PPUSH
5642: PPUSH
5643: PPUSH
// for i = 1 to 72 do
5644: LD_ADDR_VAR 0 5
5648: PUSH
5649: DOUBLE
5650: LD_INT 1
5652: DEC
5653: ST_TO_ADDR
5654: LD_INT 72
5656: PUSH
5657: FOR_TO
5658: IFFALSE 5716
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5660: LD_VAR 0 5
5664: PPUSH
5665: LD_VAR 0 1
5669: PPUSH
5670: CALL_OW 321
5674: PUSH
5675: LD_INT 1
5677: EQUAL
5678: PUSH
5679: LD_VAR 0 5
5683: PPUSH
5684: LD_VAR 0 3
5688: PPUSH
5689: CALL_OW 482
5693: PUSH
5694: LD_INT 1
5696: EQUAL
5697: AND
5698: IFFALSE 5714
// AddComResearch ( lab , i ) ;
5700: LD_VAR 0 2
5704: PPUSH
5705: LD_VAR 0 5
5709: PPUSH
5710: CALL_OW 184
5714: GO 5657
5716: POP
5717: POP
// end ;
5718: LD_VAR 0 4
5722: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5731: LD_ADDR_VAR 0 7
5735: PUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: CALL_OW 313
5745: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5746: LD_ADDR_VAR 0 8
5750: PUSH
5751: LD_VAR 0 3
5755: PPUSH
5756: LD_INT 22
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 25
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 24
5780: PUSH
5781: LD_INT 750
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 3
5790: PUSH
5791: LD_INT 54
5793: PUSH
5794: EMPTY
5795: LIST
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: PPUSH
5807: CALL_OW 70
5811: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_VAR 0 3
5821: PPUSH
5822: LD_INT 22
5824: PUSH
5825: LD_VAR 0 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 21
5836: PUSH
5837: LD_INT 3
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 3
5846: PUSH
5847: LD_INT 24
5849: PUSH
5850: LD_INT 1000
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: PPUSH
5869: CALL_OW 70
5873: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5874: LD_VAR 0 5
5878: NOT
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_VAR 0 1
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 2
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 24
5904: PUSH
5905: LD_INT 250
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: PPUSH
5917: CALL_OW 69
5921: NOT
5922: AND
5923: IFFALSE 5927
// exit ;
5925: GO 6039
// if buildings_list > 0 and engineerOkInside then
5927: LD_VAR 0 5
5931: PUSH
5932: LD_INT 0
5934: GREATER
5935: PUSH
5936: LD_VAR 0 7
5940: AND
5941: IFFALSE 5967
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
5943: LD_VAR 0 7
5947: PPUSH
5948: LD_INT 25
5950: PUSH
5951: LD_INT 2
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PPUSH
5958: CALL_OW 72
5962: PPUSH
5963: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5967: LD_VAR 0 5
5971: PUSH
5972: LD_INT 0
5974: GREATER
5975: PUSH
5976: LD_VAR 0 8
5980: PUSH
5981: LD_INT 0
5983: GREATER
5984: AND
5985: IFFALSE 6005
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5987: LD_VAR 0 8
5991: PPUSH
5992: LD_VAR 0 5
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6005: LD_VAR 0 5
6009: PUSH
6010: LD_INT 0
6012: EQUAL
6013: PUSH
6014: LD_VAR 0 8
6018: PUSH
6019: LD_INT 0
6021: GREATER
6022: AND
6023: IFFALSE 6039
// ComEnterUnit ( engineerOkOutside , building ) ;
6025: LD_VAR 0 8
6029: PPUSH
6030: LD_VAR 0 2
6034: PPUSH
6035: CALL_OW 120
// end ;
6039: LD_VAR 0 4
6043: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6044: LD_INT 0
6046: PPUSH
6047: PPUSH
6048: PPUSH
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
6053: PPUSH
6054: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6055: LD_ADDR_VAR 0 6
6059: PUSH
6060: LD_INT 22
6062: PUSH
6063: LD_VAR 0 1
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 25
6074: PUSH
6075: LD_INT 4
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 23
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 24
6094: PUSH
6095: LD_INT 251
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: PPUSH
6108: CALL_OW 69
6112: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6113: LD_ADDR_VAR 0 7
6117: PUSH
6118: LD_VAR 0 3
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_VAR 0 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 23
6137: PUSH
6138: LD_INT 2
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 25
6147: PUSH
6148: LD_INT 4
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 50
6157: PUSH
6158: EMPTY
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 70
6171: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6172: LD_ADDR_VAR 0 10
6176: PUSH
6177: LD_VAR 0 3
6181: PPUSH
6182: LD_INT 22
6184: PUSH
6185: LD_VAR 0 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 21
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 3
6206: PUSH
6207: LD_INT 25
6209: PUSH
6210: LD_INT 3
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: LD_INT 24
6226: PUSH
6227: LD_INT 750
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: PPUSH
6244: CALL_OW 70
6248: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6249: LD_ADDR_VAR 0 11
6253: PUSH
6254: LD_VAR 0 2
6258: PPUSH
6259: LD_INT 22
6261: PUSH
6262: LD_VAR 0 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 21
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 3
6283: PUSH
6284: LD_INT 25
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 3
6300: PUSH
6301: LD_INT 24
6303: PUSH
6304: LD_INT 1000
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: PPUSH
6321: CALL_OW 70
6325: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6326: LD_VAR 0 10
6330: NOT
6331: PUSH
6332: LD_VAR 0 11
6336: NOT
6337: AND
6338: PUSH
6339: LD_VAR 0 6
6343: NOT
6344: AND
6345: IFFALSE 6349
// exit ;
6347: GO 6583
// if damageUnits > 0 and sci_list > 0 then
6349: LD_VAR 0 10
6353: PUSH
6354: LD_INT 0
6356: GREATER
6357: PUSH
6358: LD_VAR 0 6
6362: PUSH
6363: LD_INT 0
6365: GREATER
6366: AND
6367: IFFALSE 6383
// ComMoveToArea ( damageUnits , healArea ) ;
6369: LD_VAR 0 10
6373: PPUSH
6374: LD_VAR 0 2
6378: PPUSH
6379: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6383: LD_VAR 0 11
6387: PUSH
6388: LD_INT 0
6390: GREATER
6391: PUSH
6392: LD_VAR 0 6
6396: PUSH
6397: LD_INT 0
6399: GREATER
6400: AND
6401: IFFALSE 6412
// ComExitBuilding ( sci_list ) ;
6403: LD_VAR 0 6
6407: PPUSH
6408: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6412: LD_VAR 0 11
6416: PUSH
6417: LD_INT 0
6419: GREATER
6420: PUSH
6421: LD_VAR 0 7
6425: PUSH
6426: LD_INT 0
6428: GREATER
6429: AND
6430: IFFALSE 6450
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6432: LD_VAR 0 7
6436: PPUSH
6437: LD_VAR 0 11
6441: PUSH
6442: LD_INT 1
6444: ARRAY
6445: PPUSH
6446: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6450: LD_VAR 0 10
6454: PUSH
6455: LD_INT 0
6457: EQUAL
6458: PUSH
6459: LD_VAR 0 11
6463: PUSH
6464: LD_INT 0
6466: EQUAL
6467: AND
6468: PUSH
6469: LD_VAR 0 7
6473: PUSH
6474: LD_INT 0
6476: GREATER
6477: AND
6478: IFFALSE 6583
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6480: LD_ADDR_VAR 0 12
6484: PUSH
6485: LD_INT 22
6487: PUSH
6488: LD_VAR 0 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 21
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 30
6509: PUSH
6510: LD_INT 8
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: PPUSH
6522: CALL_OW 69
6526: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6527: LD_ADDR_VAR 0 13
6531: PUSH
6532: LD_INT 1
6534: PPUSH
6535: LD_VAR 0 12
6539: PPUSH
6540: CALL_OW 12
6544: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6545: LD_VAR 0 7
6549: PPUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 60
6555: PUSH
6556: EMPTY
6557: LIST
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PPUSH
6563: CALL_OW 72
6567: PPUSH
6568: LD_VAR 0 12
6572: PUSH
6573: LD_VAR 0 13
6577: ARRAY
6578: PPUSH
6579: CALL_OW 120
// end ; end ;
6583: LD_VAR 0 5
6587: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6588: LD_INT 0
6590: PPUSH
6591: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6592: LD_INT 22
6594: PUSH
6595: LD_VAR 0 1
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PPUSH
6618: CALL_OW 69
6622: PUSH
6623: LD_VAR 0 3
6627: LESSEQUAL
6628: IFFALSE 6695
// for i = 1 to vehCount do
6630: LD_ADDR_VAR 0 9
6634: PUSH
6635: DOUBLE
6636: LD_INT 1
6638: DEC
6639: ST_TO_ADDR
6640: LD_VAR 0 3
6644: PUSH
6645: FOR_TO
6646: IFFALSE 6693
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6648: LD_VAR 0 2
6652: PPUSH
6653: LD_VAR 0 7
6657: PPUSH
6658: LD_VAR 0 5
6662: PPUSH
6663: LD_VAR 0 6
6667: PPUSH
6668: LD_VAR 0 4
6672: PUSH
6673: LD_INT 1
6675: PPUSH
6676: LD_VAR 0 4
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
6691: GO 6645
6693: POP
6694: POP
// end ;
6695: LD_VAR 0 8
6699: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6700: LD_INT 0
6702: PPUSH
6703: PPUSH
6704: PPUSH
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6709: LD_ADDR_VAR 0 8
6713: PUSH
6714: LD_INT 22
6716: PUSH
6717: LD_VAR 0 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 21
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 3
6738: PUSH
6739: LD_INT 34
6741: PUSH
6742: LD_INT 51
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 34
6751: PUSH
6752: LD_INT 53
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 34
6761: PUSH
6762: LD_INT 52
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 24
6777: PUSH
6778: LD_INT 650
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6796: LD_INT 22
6798: PUSH
6799: LD_VAR 0 1
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: LD_INT 21
6810: PUSH
6811: LD_INT 2
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: LD_INT 24
6820: PUSH
6821: LD_INT 1000
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: LD_INT 4
6843: PUSH
6844: LD_INT 5
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: LD_OWVAR 67
6856: ARRAY
6857: GREATEREQUAL
6858: IFFALSE 7355
// repeat wait ( 0 0$1 ) ;
6860: LD_INT 35
6862: PPUSH
6863: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6867: LD_ADDR_VAR 0 8
6871: PUSH
6872: LD_INT 22
6874: PUSH
6875: LD_VAR 0 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 21
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 3
6896: PUSH
6897: LD_INT 34
6899: PUSH
6900: LD_INT 51
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 34
6909: PUSH
6910: LD_INT 53
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 34
6919: PUSH
6920: LD_INT 52
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 24
6935: PUSH
6936: LD_INT 650
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 69
6953: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6954: LD_INT 22
6956: PUSH
6957: LD_VAR 0 1
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 95
6968: PUSH
6969: LD_VAR 0 2
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 69
6986: NOT
6987: PUSH
6988: LD_VAR 0 11
6992: PUSH
6993: LD_INT 0
6995: EQUAL
6996: AND
6997: IFFALSE 7052
// for i := 1 to wayX do
6999: LD_ADDR_VAR 0 6
7003: PUSH
7004: DOUBLE
7005: LD_INT 1
7007: DEC
7008: ST_TO_ADDR
7009: LD_VAR 0 3
7013: PUSH
7014: FOR_TO
7015: IFFALSE 7050
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7017: LD_VAR 0 8
7021: PPUSH
7022: LD_VAR 0 3
7026: PUSH
7027: LD_VAR 0 6
7031: ARRAY
7032: PPUSH
7033: LD_VAR 0 4
7037: PUSH
7038: LD_VAR 0 6
7042: ARRAY
7043: PPUSH
7044: CALL_OW 174
7048: GO 7014
7050: POP
7051: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7052: LD_INT 22
7054: PUSH
7055: LD_VAR 0 1
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 95
7066: PUSH
7067: LD_VAR 0 2
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PPUSH
7080: CALL_OW 69
7084: IFFALSE 7308
// begin seeEnemy = 1 ;
7086: LD_ADDR_VAR 0 11
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// for j in vehiclesOK do
7094: LD_ADDR_VAR 0 7
7098: PUSH
7099: LD_VAR 0 8
7103: PUSH
7104: FOR_IN
7105: IFFALSE 7306
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7107: LD_ADDR_VAR 0 9
7111: PUSH
7112: LD_INT 81
7114: PUSH
7115: LD_VAR 0 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 101
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PPUSH
7138: CALL_OW 69
7142: PPUSH
7143: LD_VAR 0 7
7147: PPUSH
7148: CALL_OW 74
7152: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7153: LD_ADDR_VAR 0 10
7157: PUSH
7158: LD_INT 81
7160: PUSH
7161: LD_VAR 0 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 101
7172: PUSH
7173: LD_INT 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: LD_INT 59
7185: PUSH
7186: EMPTY
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 1
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 21
7201: PUSH
7202: LD_INT 2
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: PPUSH
7223: CALL_OW 69
7227: PPUSH
7228: LD_VAR 0 7
7232: PPUSH
7233: CALL_OW 74
7237: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7238: LD_VAR 0 7
7242: PPUSH
7243: LD_VAR 0 9
7247: PPUSH
7248: CALL_OW 296
7252: PUSH
7253: LD_INT 8
7255: PLUS
7256: PUSH
7257: LD_VAR 0 7
7261: PPUSH
7262: LD_VAR 0 10
7266: PPUSH
7267: CALL_OW 296
7271: LESS
7272: IFFALSE 7290
// ComAttackUnit ( j , target1 ) else
7274: LD_VAR 0 7
7278: PPUSH
7279: LD_VAR 0 9
7283: PPUSH
7284: CALL_OW 115
7288: GO 7304
// ComAttackUnit ( j , target2 ) ;
7290: LD_VAR 0 7
7294: PPUSH
7295: LD_VAR 0 10
7299: PPUSH
7300: CALL_OW 115
// end ;
7304: GO 7104
7306: POP
7307: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7308: LD_INT 22
7310: PUSH
7311: LD_VAR 0 1
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 2
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 24
7332: PUSH
7333: LD_INT 1000
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 69
7349: PUSH
7350: LD_INT 0
7352: EQUAL
7353: IFFALSE 6860
// seeEnemy = 0 ;
7355: LD_ADDR_VAR 0 11
7359: PUSH
7360: LD_INT 0
7362: ST_TO_ADDR
// end ;
7363: LD_VAR 0 5
7367: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7368: LD_INT 0
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7374: LD_ADDR_VAR 0 8
7378: PUSH
7379: LD_INT 22
7381: PUSH
7382: LD_VAR 0 1
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 21
7393: PUSH
7394: LD_INT 2
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 3
7403: PUSH
7404: LD_INT 34
7406: PUSH
7407: LD_INT 51
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 34
7416: PUSH
7417: LD_INT 53
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 34
7426: PUSH
7427: LD_INT 52
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 3
7442: PUSH
7443: LD_INT 24
7445: PUSH
7446: LD_INT 650
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 69
7467: ST_TO_ADDR
// if damageVehicles > 0 then
7468: LD_VAR 0 8
7472: PUSH
7473: LD_INT 0
7475: GREATER
7476: IFFALSE 7497
// ComMoveXY ( damageVehicles , repX , repY ) ;
7478: LD_VAR 0 8
7482: PPUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: LD_VAR 0 4
7492: PPUSH
7493: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7497: LD_VAR 0 8
7501: PPUSH
7502: LD_INT 95
7504: PUSH
7505: LD_VAR 0 2
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: LD_INT 58
7519: PUSH
7520: EMPTY
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 72
7535: PUSH
7536: LD_INT 0
7538: GREATER
7539: IFFALSE 7606
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7541: LD_ADDR_VAR 0 6
7545: PUSH
7546: LD_VAR 0 8
7550: PPUSH
7551: LD_INT 95
7553: PUSH
7554: LD_VAR 0 2
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 3
7565: PUSH
7566: LD_INT 58
7568: PUSH
7569: EMPTY
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PPUSH
7580: CALL_OW 72
7584: PUSH
7585: FOR_IN
7586: IFFALSE 7604
// ComExitVehicle ( UnitsInside ( i ) ) ;
7588: LD_VAR 0 6
7592: PPUSH
7593: CALL_OW 313
7597: PPUSH
7598: CALL_OW 121
7602: GO 7585
7604: POP
7605: POP
// end ;
7606: LD_VAR 0 5
7610: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
7615: PPUSH
7616: PPUSH
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
7622: PPUSH
7623: PPUSH
// for i = 1 to medicCount do
7624: LD_ADDR_VAR 0 14
7628: PUSH
7629: DOUBLE
7630: LD_INT 1
7632: DEC
7633: ST_TO_ADDR
7634: LD_VAR 0 7
7638: PUSH
7639: FOR_TO
7640: IFFALSE 7722
// begin uc_side = side ;
7642: LD_ADDR_OWVAR 20
7646: PUSH
7647: LD_VAR 0 1
7651: ST_TO_ADDR
// uc_nation = nation ;
7652: LD_ADDR_OWVAR 21
7656: PUSH
7657: LD_VAR 0 2
7661: ST_TO_ADDR
// hc_name =  ;
7662: LD_ADDR_OWVAR 26
7666: PUSH
7667: LD_STRING 
7669: ST_TO_ADDR
// hc_gallery =  ;
7670: LD_ADDR_OWVAR 33
7674: PUSH
7675: LD_STRING 
7677: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7678: LD_INT 0
7680: PPUSH
7681: LD_INT 4
7683: PPUSH
7684: LD_VAR 0 8
7688: PPUSH
7689: CALL_OW 380
// un = CreateHuman ;
7693: LD_ADDR_VAR 0 16
7697: PUSH
7698: CALL_OW 44
7702: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7703: LD_VAR 0 16
7707: PPUSH
7708: LD_VAR 0 9
7712: PPUSH
7713: LD_INT 0
7715: PPUSH
7716: CALL_OW 49
// end ;
7720: GO 7639
7722: POP
7723: POP
// for i = 1 to soldierCount do
7724: LD_ADDR_VAR 0 14
7728: PUSH
7729: DOUBLE
7730: LD_INT 1
7732: DEC
7733: ST_TO_ADDR
7734: LD_VAR 0 3
7738: PUSH
7739: FOR_TO
7740: IFFALSE 7822
// begin uc_side = side ;
7742: LD_ADDR_OWVAR 20
7746: PUSH
7747: LD_VAR 0 1
7751: ST_TO_ADDR
// uc_nation = nation ;
7752: LD_ADDR_OWVAR 21
7756: PUSH
7757: LD_VAR 0 2
7761: ST_TO_ADDR
// hc_name =  ;
7762: LD_ADDR_OWVAR 26
7766: PUSH
7767: LD_STRING 
7769: ST_TO_ADDR
// hc_gallery =  ;
7770: LD_ADDR_OWVAR 33
7774: PUSH
7775: LD_STRING 
7777: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7778: LD_INT 0
7780: PPUSH
7781: LD_INT 1
7783: PPUSH
7784: LD_VAR 0 8
7788: PPUSH
7789: CALL_OW 380
// un = CreateHuman ;
7793: LD_ADDR_VAR 0 16
7797: PUSH
7798: CALL_OW 44
7802: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7803: LD_VAR 0 16
7807: PPUSH
7808: LD_VAR 0 9
7812: PPUSH
7813: LD_INT 0
7815: PPUSH
7816: CALL_OW 49
// end ;
7820: GO 7739
7822: POP
7823: POP
// for i = 1 to sniperCount do
7824: LD_ADDR_VAR 0 14
7828: PUSH
7829: DOUBLE
7830: LD_INT 1
7832: DEC
7833: ST_TO_ADDR
7834: LD_VAR 0 4
7838: PUSH
7839: FOR_TO
7840: IFFALSE 7922
// begin uc_side = side ;
7842: LD_ADDR_OWVAR 20
7846: PUSH
7847: LD_VAR 0 1
7851: ST_TO_ADDR
// uc_nation = nation ;
7852: LD_ADDR_OWVAR 21
7856: PUSH
7857: LD_VAR 0 2
7861: ST_TO_ADDR
// hc_name =  ;
7862: LD_ADDR_OWVAR 26
7866: PUSH
7867: LD_STRING 
7869: ST_TO_ADDR
// hc_gallery =  ;
7870: LD_ADDR_OWVAR 33
7874: PUSH
7875: LD_STRING 
7877: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7878: LD_INT 0
7880: PPUSH
7881: LD_INT 5
7883: PPUSH
7884: LD_VAR 0 8
7888: PPUSH
7889: CALL_OW 380
// un = CreateHuman ;
7893: LD_ADDR_VAR 0 16
7897: PUSH
7898: CALL_OW 44
7902: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7903: LD_VAR 0 16
7907: PPUSH
7908: LD_VAR 0 9
7912: PPUSH
7913: LD_INT 0
7915: PPUSH
7916: CALL_OW 49
// end ;
7920: GO 7839
7922: POP
7923: POP
// for i = 1 to bazookCount do
7924: LD_ADDR_VAR 0 14
7928: PUSH
7929: DOUBLE
7930: LD_INT 1
7932: DEC
7933: ST_TO_ADDR
7934: LD_VAR 0 5
7938: PUSH
7939: FOR_TO
7940: IFFALSE 8022
// begin uc_side = side ;
7942: LD_ADDR_OWVAR 20
7946: PUSH
7947: LD_VAR 0 1
7951: ST_TO_ADDR
// uc_nation = nation ;
7952: LD_ADDR_OWVAR 21
7956: PUSH
7957: LD_VAR 0 2
7961: ST_TO_ADDR
// hc_name =  ;
7962: LD_ADDR_OWVAR 26
7966: PUSH
7967: LD_STRING 
7969: ST_TO_ADDR
// hc_gallery =  ;
7970: LD_ADDR_OWVAR 33
7974: PUSH
7975: LD_STRING 
7977: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7978: LD_INT 0
7980: PPUSH
7981: LD_INT 9
7983: PPUSH
7984: LD_VAR 0 8
7988: PPUSH
7989: CALL_OW 380
// un = CreateHuman ;
7993: LD_ADDR_VAR 0 16
7997: PUSH
7998: CALL_OW 44
8002: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8003: LD_VAR 0 16
8007: PPUSH
8008: LD_VAR 0 9
8012: PPUSH
8013: LD_INT 0
8015: PPUSH
8016: CALL_OW 49
// end ;
8020: GO 7939
8022: POP
8023: POP
// for i = 1 to mortalCount do
8024: LD_ADDR_VAR 0 14
8028: PUSH
8029: DOUBLE
8030: LD_INT 1
8032: DEC
8033: ST_TO_ADDR
8034: LD_VAR 0 6
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8122
// begin uc_side = side ;
8042: LD_ADDR_OWVAR 20
8046: PUSH
8047: LD_VAR 0 1
8051: ST_TO_ADDR
// uc_nation = nation ;
8052: LD_ADDR_OWVAR 21
8056: PUSH
8057: LD_VAR 0 2
8061: ST_TO_ADDR
// hc_name =  ;
8062: LD_ADDR_OWVAR 26
8066: PUSH
8067: LD_STRING 
8069: ST_TO_ADDR
// hc_gallery =  ;
8070: LD_ADDR_OWVAR 33
8074: PUSH
8075: LD_STRING 
8077: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8078: LD_INT 0
8080: PPUSH
8081: LD_INT 8
8083: PPUSH
8084: LD_VAR 0 8
8088: PPUSH
8089: CALL_OW 380
// un = CreateHuman ;
8093: LD_ADDR_VAR 0 16
8097: PUSH
8098: CALL_OW 44
8102: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8103: LD_VAR 0 16
8107: PPUSH
8108: LD_VAR 0 9
8112: PPUSH
8113: LD_INT 0
8115: PPUSH
8116: CALL_OW 49
// end ;
8120: GO 8039
8122: POP
8123: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8124: LD_ADDR_VAR 0 19
8128: PUSH
8129: LD_INT 22
8131: PUSH
8132: LD_VAR 0 1
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 2
8143: PUSH
8144: LD_INT 25
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 5
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 8
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 25
8176: PUSH
8177: LD_INT 9
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8200: LD_ADDR_VAR 0 18
8204: PUSH
8205: LD_INT 22
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 25
8219: PUSH
8220: LD_INT 4
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PPUSH
8231: CALL_OW 69
8235: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8236: LD_VAR 0 18
8240: PPUSH
8241: LD_VAR 0 10
8245: PPUSH
8246: CALL_OW 113
// if strategy = 1 then
8250: LD_VAR 0 12
8254: PUSH
8255: LD_INT 1
8257: EQUAL
8258: IFFALSE 8774
// begin repeat wait ( 0 0$3 ) ;
8260: LD_INT 105
8262: PPUSH
8263: CALL_OW 67
// for i in soldiersOK_list do
8267: LD_ADDR_VAR 0 14
8271: PUSH
8272: LD_VAR 0 19
8276: PUSH
8277: FOR_IN
8278: IFFALSE 8342
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8280: LD_VAR 0 14
8284: PPUSH
8285: LD_INT 91
8287: PPUSH
8288: LD_INT 63
8290: PPUSH
8291: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8295: LD_VAR 0 14
8299: PPUSH
8300: LD_INT 101
8302: PPUSH
8303: LD_INT 53
8305: PPUSH
8306: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8310: LD_VAR 0 14
8314: PPUSH
8315: LD_INT 75
8317: PPUSH
8318: LD_INT 23
8320: PPUSH
8321: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8325: LD_VAR 0 14
8329: PPUSH
8330: LD_INT 78
8332: PPUSH
8333: LD_INT 8
8335: PPUSH
8336: CALL_OW 174
// end ;
8340: GO 8277
8342: POP
8343: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8344: LD_INT 15
8346: PPUSH
8347: LD_INT 22
8349: PUSH
8350: LD_VAR 0 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PPUSH
8359: CALL_OW 70
8363: PUSH
8364: LD_INT 2
8366: GREATER
8367: IFFALSE 8260
// repeat wait ( 0 0$1 ) ;
8369: LD_INT 35
8371: PPUSH
8372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8376: LD_ADDR_VAR 0 17
8380: PUSH
8381: LD_INT 22
8383: PUSH
8384: LD_VAR 0 1
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 1
8395: PUSH
8396: LD_INT 3
8398: PUSH
8399: LD_INT 24
8401: PUSH
8402: LD_INT 550
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 24
8415: PUSH
8416: LD_INT 250
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PPUSH
8432: CALL_OW 69
8436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8437: LD_ADDR_VAR 0 19
8441: PUSH
8442: LD_INT 22
8444: PUSH
8445: LD_VAR 0 1
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 2
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 1
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 25
8469: PUSH
8470: LD_INT 5
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: LD_INT 25
8479: PUSH
8480: LD_INT 8
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 25
8489: PUSH
8490: LD_INT 9
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 24
8506: PUSH
8507: LD_INT 1000
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: PPUSH
8519: CALL_OW 69
8523: ST_TO_ADDR
// if medicCount > 0 then
8524: LD_VAR 0 7
8528: PUSH
8529: LD_INT 0
8531: GREATER
8532: IFFALSE 8576
// begin if damageUnit_list > 0 then
8534: LD_VAR 0 17
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8576
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8544: LD_VAR 0 17
8548: PPUSH
8549: LD_VAR 0 10
8553: PPUSH
8554: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8558: LD_VAR 0 7
8562: PPUSH
8563: LD_VAR 0 17
8567: PUSH
8568: LD_INT 1
8570: ARRAY
8571: PPUSH
8572: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8576: LD_ADDR_VAR 0 14
8580: PUSH
8581: LD_VAR 0 19
8585: PUSH
8586: FOR_IN
8587: IFFALSE 8763
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8589: LD_ADDR_VAR 0 22
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_VAR 0 11
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 69
8610: PPUSH
8611: LD_VAR 0 14
8615: PPUSH
8616: CALL_OW 74
8620: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8621: LD_ADDR_VAR 0 23
8625: PUSH
8626: LD_INT 22
8628: PUSH
8629: LD_VAR 0 11
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 2
8640: PUSH
8641: LD_INT 59
8643: PUSH
8644: EMPTY
8645: LIST
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 1
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 2
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: PPUSH
8685: LD_VAR 0 14
8689: PPUSH
8690: CALL_OW 74
8694: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8695: LD_VAR 0 14
8699: PPUSH
8700: LD_VAR 0 22
8704: PPUSH
8705: CALL_OW 296
8709: PUSH
8710: LD_INT 8
8712: PLUS
8713: PUSH
8714: LD_VAR 0 14
8718: PPUSH
8719: LD_VAR 0 23
8723: PPUSH
8724: CALL_OW 296
8728: LESS
8729: IFFALSE 8747
// begin ComAttackUnit ( i , target1 ) ;
8731: LD_VAR 0 14
8735: PPUSH
8736: LD_VAR 0 22
8740: PPUSH
8741: CALL_OW 115
// end else
8745: GO 8761
// begin ComAttackUnit ( i , target2 ) ;
8747: LD_VAR 0 14
8751: PPUSH
8752: LD_VAR 0 23
8756: PPUSH
8757: CALL_OW 115
// end ; end ;
8761: GO 8586
8763: POP
8764: POP
// until soldiersOK_list = [ ] ;
8765: LD_VAR 0 19
8769: PUSH
8770: EMPTY
8771: EQUAL
8772: IFFALSE 8369
// end ; if strategy = 2 then
8774: LD_VAR 0 12
8778: PUSH
8779: LD_INT 2
8781: EQUAL
8782: IFFALSE 9268
// begin repeat wait ( 0 0$1 ) ;
8784: LD_INT 35
8786: PPUSH
8787: CALL_OW 67
// for i in soldiersOK_list do
8791: LD_ADDR_VAR 0 14
8795: PUSH
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_IN
8802: IFFALSE 8836
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8804: LD_VAR 0 14
8808: PPUSH
8809: LD_INT 91
8811: PPUSH
8812: LD_INT 63
8814: PPUSH
8815: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8819: LD_VAR 0 14
8823: PPUSH
8824: LD_INT 75
8826: PPUSH
8827: LD_INT 33
8829: PPUSH
8830: CALL_OW 174
// end ;
8834: GO 8801
8836: POP
8837: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8838: LD_INT 16
8840: PPUSH
8841: LD_INT 22
8843: PUSH
8844: LD_VAR 0 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 70
8857: PUSH
8858: LD_INT 2
8860: GREATER
8861: IFFALSE 8784
// repeat wait ( 0 0$3 ) ;
8863: LD_INT 105
8865: PPUSH
8866: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8870: LD_ADDR_VAR 0 17
8874: PUSH
8875: LD_INT 22
8877: PUSH
8878: LD_VAR 0 1
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: LD_INT 24
8895: PUSH
8896: LD_INT 550
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 24
8909: PUSH
8910: LD_INT 250
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8931: LD_ADDR_VAR 0 19
8935: PUSH
8936: LD_INT 22
8938: PUSH
8939: LD_VAR 0 1
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 2
8950: PUSH
8951: LD_INT 25
8953: PUSH
8954: LD_INT 1
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 25
8963: PUSH
8964: LD_INT 5
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 25
8973: PUSH
8974: LD_INT 8
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 25
8983: PUSH
8984: LD_INT 9
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 24
9000: PUSH
9001: LD_INT 1000
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: PPUSH
9013: CALL_OW 69
9017: ST_TO_ADDR
// if medicCount > 0 then
9018: LD_VAR 0 7
9022: PUSH
9023: LD_INT 0
9025: GREATER
9026: IFFALSE 9070
// begin if damageUnit_list > 0 then
9028: LD_VAR 0 17
9032: PUSH
9033: LD_INT 0
9035: GREATER
9036: IFFALSE 9070
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9038: LD_VAR 0 17
9042: PPUSH
9043: LD_VAR 0 10
9047: PPUSH
9048: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9052: LD_VAR 0 7
9056: PPUSH
9057: LD_VAR 0 17
9061: PUSH
9062: LD_INT 1
9064: ARRAY
9065: PPUSH
9066: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9070: LD_ADDR_VAR 0 14
9074: PUSH
9075: LD_VAR 0 19
9079: PUSH
9080: FOR_IN
9081: IFFALSE 9257
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9083: LD_ADDR_VAR 0 22
9087: PUSH
9088: LD_INT 22
9090: PUSH
9091: LD_VAR 0 11
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: PPUSH
9105: LD_VAR 0 14
9109: PPUSH
9110: CALL_OW 74
9114: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9115: LD_ADDR_VAR 0 23
9119: PUSH
9120: LD_INT 22
9122: PUSH
9123: LD_VAR 0 11
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 2
9134: PUSH
9135: LD_INT 59
9137: PUSH
9138: EMPTY
9139: LIST
9140: PUSH
9141: LD_INT 21
9143: PUSH
9144: LD_INT 1
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 21
9153: PUSH
9154: LD_INT 2
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: PPUSH
9174: CALL_OW 69
9178: PPUSH
9179: LD_VAR 0 14
9183: PPUSH
9184: CALL_OW 74
9188: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9189: LD_VAR 0 14
9193: PPUSH
9194: LD_VAR 0 22
9198: PPUSH
9199: CALL_OW 296
9203: PUSH
9204: LD_INT 8
9206: PLUS
9207: PUSH
9208: LD_VAR 0 14
9212: PPUSH
9213: LD_VAR 0 23
9217: PPUSH
9218: CALL_OW 296
9222: LESS
9223: IFFALSE 9241
// begin ComAttackUnit ( i , target1 ) ;
9225: LD_VAR 0 14
9229: PPUSH
9230: LD_VAR 0 22
9234: PPUSH
9235: CALL_OW 115
// end else
9239: GO 9255
// begin ComAttackUnit ( i , target2 ) ;
9241: LD_VAR 0 14
9245: PPUSH
9246: LD_VAR 0 23
9250: PPUSH
9251: CALL_OW 115
// end ; end ;
9255: GO 9080
9257: POP
9258: POP
// until soldiersOK_list = [ ] ;
9259: LD_VAR 0 19
9263: PUSH
9264: EMPTY
9265: EQUAL
9266: IFFALSE 8863
// end ; if not soldiersOK_list and medic_list then
9268: LD_VAR 0 19
9272: NOT
9273: PUSH
9274: LD_VAR 0 18
9278: AND
9279: IFFALSE 9419
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9281: LD_ADDR_VAR 0 18
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_VAR 0 1
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 25
9300: PUSH
9301: LD_INT 4
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 50
9310: PUSH
9311: EMPTY
9312: LIST
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: PPUSH
9319: CALL_OW 69
9323: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9324: LD_INT 35
9326: PPUSH
9327: CALL_OW 67
// for i in medic_list do
9331: LD_ADDR_VAR 0 14
9335: PUSH
9336: LD_VAR 0 18
9340: PUSH
9341: FOR_IN
9342: IFFALSE 9410
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9344: LD_VAR 0 14
9348: PPUSH
9349: CALL_OW 314
9353: NOT
9354: PUSH
9355: LD_VAR 0 14
9359: PPUSH
9360: LD_INT 4
9362: PPUSH
9363: CALL_OW 308
9367: NOT
9368: AND
9369: IFFALSE 9385
// ComMoveToArea ( i , RussianAttack ) else
9371: LD_VAR 0 14
9375: PPUSH
9376: LD_INT 4
9378: PPUSH
9379: CALL_OW 113
9383: GO 9408
// if IsInArea ( i , RussianAttack ) then
9385: LD_VAR 0 14
9389: PPUSH
9390: LD_INT 4
9392: PPUSH
9393: CALL_OW 308
9397: IFFALSE 9408
// RemoveUnit ( i ) ;
9399: LD_VAR 0 14
9403: PPUSH
9404: CALL_OW 64
9408: GO 9341
9410: POP
9411: POP
// until not medic_list ;
9412: LD_VAR 0 18
9416: NOT
9417: IFFALSE 9281
// end ; end ;
9419: LD_VAR 0 13
9423: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9424: LD_INT 0
9426: PPUSH
9427: PPUSH
9428: PPUSH
9429: PPUSH
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// amChassisTab = [ ] ;
9437: LD_ADDR_VAR 0 19
9441: PUSH
9442: EMPTY
9443: ST_TO_ADDR
// arChassisTab = [ ] ;
9444: LD_ADDR_VAR 0 18
9448: PUSH
9449: EMPTY
9450: ST_TO_ADDR
// ruChassisTab = [ ] ;
9451: LD_ADDR_VAR 0 17
9455: PUSH
9456: EMPTY
9457: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9458: LD_INT 35
9460: PPUSH
9461: CALL_OW 67
// if nation = 1 then
9465: LD_VAR 0 5
9469: PUSH
9470: LD_INT 1
9472: EQUAL
9473: IFFALSE 9964
// begin uc_side = side ;
9475: LD_ADDR_OWVAR 20
9479: PUSH
9480: LD_VAR 0 2
9484: ST_TO_ADDR
// uc_nation = nation ;
9485: LD_ADDR_OWVAR 21
9489: PUSH
9490: LD_VAR 0 5
9494: ST_TO_ADDR
// vc_engine = vehengine ;
9495: LD_ADDR_OWVAR 39
9499: PUSH
9500: LD_VAR 0 6
9504: ST_TO_ADDR
// vc_control = vehcontrol ;
9505: LD_ADDR_OWVAR 38
9509: PUSH
9510: LD_VAR 0 7
9514: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9515: LD_ADDR_OWVAR 40
9519: PUSH
9520: LD_VAR 0 10
9524: PUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 10
9532: PPUSH
9533: CALL_OW 12
9537: ARRAY
9538: ST_TO_ADDR
// for j = 1 to AMWeapon do
9539: LD_ADDR_VAR 0 14
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_VAR 0 10
9553: PUSH
9554: FOR_TO
9555: IFFALSE 9856
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9557: LD_VAR 0 10
9561: PUSH
9562: LD_VAR 0 14
9566: ARRAY
9567: PUSH
9568: LD_INT 2
9570: EQUAL
9571: PUSH
9572: LD_VAR 0 10
9576: PUSH
9577: LD_VAR 0 14
9581: ARRAY
9582: PUSH
9583: LD_INT 3
9585: EQUAL
9586: OR
9587: IFFALSE 9640
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9589: LD_ADDR_VAR 0 19
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: LD_INT 4
9605: PUSH
9606: LD_INT 5
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9616: LD_ADDR_OWVAR 37
9620: PUSH
9621: LD_VAR 0 19
9625: PUSH
9626: LD_INT 1
9628: PPUSH
9629: LD_VAR 0 19
9633: PPUSH
9634: CALL_OW 12
9638: ARRAY
9639: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9640: LD_VAR 0 10
9644: PUSH
9645: LD_VAR 0 14
9649: ARRAY
9650: PUSH
9651: LD_INT 4
9653: EQUAL
9654: PUSH
9655: LD_VAR 0 10
9659: PUSH
9660: LD_VAR 0 14
9664: ARRAY
9665: PUSH
9666: LD_INT 5
9668: EQUAL
9669: OR
9670: PUSH
9671: LD_VAR 0 10
9675: PUSH
9676: LD_VAR 0 14
9680: ARRAY
9681: PUSH
9682: LD_INT 9
9684: EQUAL
9685: OR
9686: PUSH
9687: LD_VAR 0 10
9691: PUSH
9692: LD_VAR 0 14
9696: ARRAY
9697: PUSH
9698: LD_INT 11
9700: EQUAL
9701: OR
9702: PUSH
9703: LD_VAR 0 10
9707: PUSH
9708: LD_VAR 0 14
9712: ARRAY
9713: PUSH
9714: LD_INT 7
9716: EQUAL
9717: OR
9718: IFFALSE 9767
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9720: LD_ADDR_VAR 0 19
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: LD_INT 3
9730: PUSH
9731: LD_INT 4
9733: PUSH
9734: LD_INT 5
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9743: LD_ADDR_OWVAR 37
9747: PUSH
9748: LD_VAR 0 19
9752: PUSH
9753: LD_INT 1
9755: PPUSH
9756: LD_VAR 0 19
9760: PPUSH
9761: CALL_OW 12
9765: ARRAY
9766: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9767: LD_VAR 0 10
9771: PUSH
9772: LD_VAR 0 14
9776: ARRAY
9777: PUSH
9778: LD_INT 8
9780: EQUAL
9781: PUSH
9782: LD_VAR 0 10
9786: PUSH
9787: LD_VAR 0 14
9791: ARRAY
9792: PUSH
9793: LD_INT 6
9795: EQUAL
9796: OR
9797: PUSH
9798: LD_VAR 0 10
9802: PUSH
9803: LD_VAR 0 14
9807: ARRAY
9808: PUSH
9809: LD_INT 10
9811: EQUAL
9812: OR
9813: IFFALSE 9854
// begin amChassisTab = [ 4 , 5 ] ;
9815: LD_ADDR_VAR 0 19
9819: PUSH
9820: LD_INT 4
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9830: LD_ADDR_OWVAR 37
9834: PUSH
9835: LD_VAR 0 19
9839: PUSH
9840: LD_INT 1
9842: PPUSH
9843: LD_VAR 0 19
9847: PPUSH
9848: CALL_OW 12
9852: ARRAY
9853: ST_TO_ADDR
// end ; end ;
9854: GO 9554
9856: POP
9857: POP
// veh = CreateVehicle ;
9858: LD_ADDR_VAR 0 16
9862: PUSH
9863: CALL_OW 45
9867: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9868: LD_VAR 0 16
9872: PPUSH
9873: LD_VAR 0 1
9877: PPUSH
9878: LD_INT 0
9880: PPUSH
9881: CALL_OW 49
// if vehControl = 1 then
9885: LD_VAR 0 7
9889: PUSH
9890: LD_INT 1
9892: EQUAL
9893: IFFALSE 9950
// begin hc_gallery =  ;
9895: LD_ADDR_OWVAR 33
9899: PUSH
9900: LD_STRING 
9902: ST_TO_ADDR
// hc_name =  ;
9903: LD_ADDR_OWVAR 26
9907: PUSH
9908: LD_STRING 
9910: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 3
9916: PPUSH
9917: LD_VAR 0 4
9921: PPUSH
9922: CALL_OW 380
// un = CreateHuman ;
9926: LD_ADDR_VAR 0 15
9930: PUSH
9931: CALL_OW 44
9935: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9936: LD_VAR 0 15
9940: PPUSH
9941: LD_VAR 0 16
9945: PPUSH
9946: CALL_OW 52
// end ; i = i + 1 ;
9950: LD_ADDR_VAR 0 13
9954: PUSH
9955: LD_VAR 0 13
9959: PUSH
9960: LD_INT 1
9962: PLUS
9963: ST_TO_ADDR
// end ; if nation = 2 then
9964: LD_VAR 0 5
9968: PUSH
9969: LD_INT 2
9971: EQUAL
9972: IFFALSE 10396
// begin uc_side = side ;
9974: LD_ADDR_OWVAR 20
9978: PUSH
9979: LD_VAR 0 2
9983: ST_TO_ADDR
// uc_nation = nation ;
9984: LD_ADDR_OWVAR 21
9988: PUSH
9989: LD_VAR 0 5
9993: ST_TO_ADDR
// vc_engine = vehengine ;
9994: LD_ADDR_OWVAR 39
9998: PUSH
9999: LD_VAR 0 6
10003: ST_TO_ADDR
// vc_control = vehcontrol ;
10004: LD_ADDR_OWVAR 38
10008: PUSH
10009: LD_VAR 0 7
10013: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10014: LD_ADDR_OWVAR 40
10018: PUSH
10019: LD_VAR 0 9
10023: PUSH
10024: LD_INT 1
10026: PPUSH
10027: LD_VAR 0 9
10031: PPUSH
10032: CALL_OW 12
10036: ARRAY
10037: ST_TO_ADDR
// for j = 1 to ARWeapons do
10038: LD_ADDR_VAR 0 14
10042: PUSH
10043: DOUBLE
10044: LD_INT 1
10046: DEC
10047: ST_TO_ADDR
10048: LD_VAR 0 9
10052: PUSH
10053: FOR_TO
10054: IFFALSE 10288
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10056: LD_VAR 0 9
10060: PUSH
10061: LD_VAR 0 14
10065: ARRAY
10066: PUSH
10067: LD_INT 24
10069: EQUAL
10070: PUSH
10071: LD_VAR 0 9
10075: PUSH
10076: LD_VAR 0 14
10080: ARRAY
10081: PUSH
10082: LD_INT 22
10084: EQUAL
10085: OR
10086: PUSH
10087: LD_VAR 0 9
10091: PUSH
10092: LD_VAR 0 14
10096: ARRAY
10097: PUSH
10098: LD_INT 23
10100: EQUAL
10101: OR
10102: PUSH
10103: LD_VAR 0 9
10107: PUSH
10108: LD_VAR 0 14
10112: ARRAY
10113: PUSH
10114: LD_INT 30
10116: EQUAL
10117: OR
10118: IFFALSE 10167
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10120: LD_ADDR_VAR 0 18
10124: PUSH
10125: LD_INT 11
10127: PUSH
10128: LD_INT 12
10130: PUSH
10131: LD_INT 13
10133: PUSH
10134: LD_INT 14
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10143: LD_ADDR_OWVAR 37
10147: PUSH
10148: LD_VAR 0 18
10152: PUSH
10153: LD_INT 1
10155: PPUSH
10156: LD_VAR 0 18
10160: PPUSH
10161: CALL_OW 12
10165: ARRAY
10166: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10167: LD_VAR 0 9
10171: PUSH
10172: LD_VAR 0 14
10176: ARRAY
10177: PUSH
10178: LD_INT 29
10180: EQUAL
10181: PUSH
10182: LD_VAR 0 9
10186: PUSH
10187: LD_VAR 0 14
10191: ARRAY
10192: PUSH
10193: LD_INT 28
10195: EQUAL
10196: OR
10197: PUSH
10198: LD_VAR 0 9
10202: PUSH
10203: LD_VAR 0 14
10207: ARRAY
10208: PUSH
10209: LD_INT 27
10211: EQUAL
10212: OR
10213: PUSH
10214: LD_VAR 0 9
10218: PUSH
10219: LD_VAR 0 14
10223: ARRAY
10224: PUSH
10225: LD_INT 26
10227: EQUAL
10228: OR
10229: PUSH
10230: LD_VAR 0 9
10234: PUSH
10235: LD_VAR 0 14
10239: ARRAY
10240: PUSH
10241: LD_INT 25
10243: EQUAL
10244: OR
10245: IFFALSE 10286
// begin arChassisTab = [ 13 , 14 ] ;
10247: LD_ADDR_VAR 0 18
10251: PUSH
10252: LD_INT 13
10254: PUSH
10255: LD_INT 14
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10262: LD_ADDR_OWVAR 37
10266: PUSH
10267: LD_VAR 0 18
10271: PUSH
10272: LD_INT 1
10274: PPUSH
10275: LD_VAR 0 18
10279: PPUSH
10280: CALL_OW 12
10284: ARRAY
10285: ST_TO_ADDR
// end ; end ;
10286: GO 10053
10288: POP
10289: POP
// veh = CreateVehicle ;
10290: LD_ADDR_VAR 0 16
10294: PUSH
10295: CALL_OW 45
10299: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10300: LD_VAR 0 16
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// if vehcontrol = 1 then
10317: LD_VAR 0 7
10321: PUSH
10322: LD_INT 1
10324: EQUAL
10325: IFFALSE 10382
// begin hc_gallery =  ;
10327: LD_ADDR_OWVAR 33
10331: PUSH
10332: LD_STRING 
10334: ST_TO_ADDR
// hc_name =  ;
10335: LD_ADDR_OWVAR 26
10339: PUSH
10340: LD_STRING 
10342: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10343: LD_INT 0
10345: PPUSH
10346: LD_INT 3
10348: PPUSH
10349: LD_VAR 0 4
10353: PPUSH
10354: CALL_OW 380
// un = CreateHuman ;
10358: LD_ADDR_VAR 0 15
10362: PUSH
10363: CALL_OW 44
10367: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10368: LD_VAR 0 15
10372: PPUSH
10373: LD_VAR 0 16
10377: PPUSH
10378: CALL_OW 52
// end ; i = i + 1 ;
10382: LD_ADDR_VAR 0 13
10386: PUSH
10387: LD_VAR 0 13
10391: PUSH
10392: LD_INT 1
10394: PLUS
10395: ST_TO_ADDR
// end ; if nation = 3 then
10396: LD_VAR 0 5
10400: PUSH
10401: LD_INT 3
10403: EQUAL
10404: IFFALSE 10796
// begin uc_side = side ;
10406: LD_ADDR_OWVAR 20
10410: PUSH
10411: LD_VAR 0 2
10415: ST_TO_ADDR
// uc_nation = nation ;
10416: LD_ADDR_OWVAR 21
10420: PUSH
10421: LD_VAR 0 5
10425: ST_TO_ADDR
// vc_engine = vehengine ;
10426: LD_ADDR_OWVAR 39
10430: PUSH
10431: LD_VAR 0 6
10435: ST_TO_ADDR
// vc_control = vehcontrol ;
10436: LD_ADDR_OWVAR 38
10440: PUSH
10441: LD_VAR 0 7
10445: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10446: LD_ADDR_OWVAR 40
10450: PUSH
10451: LD_VAR 0 8
10455: PUSH
10456: LD_INT 1
10458: PPUSH
10459: LD_VAR 0 8
10463: PPUSH
10464: CALL_OW 12
10468: ARRAY
10469: ST_TO_ADDR
// for j = 1 to RuWeapons do
10470: LD_ADDR_VAR 0 14
10474: PUSH
10475: DOUBLE
10476: LD_INT 1
10478: DEC
10479: ST_TO_ADDR
10480: LD_VAR 0 8
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10688
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10488: LD_VAR 0 8
10492: PUSH
10493: LD_VAR 0 14
10497: ARRAY
10498: PUSH
10499: LD_INT 42
10501: EQUAL
10502: PUSH
10503: LD_VAR 0 8
10507: PUSH
10508: LD_VAR 0 14
10512: ARRAY
10513: PUSH
10514: LD_INT 43
10516: EQUAL
10517: OR
10518: PUSH
10519: LD_VAR 0 8
10523: PUSH
10524: LD_VAR 0 14
10528: ARRAY
10529: PUSH
10530: LD_INT 44
10532: EQUAL
10533: OR
10534: PUSH
10535: LD_VAR 0 8
10539: PUSH
10540: LD_VAR 0 14
10544: ARRAY
10545: PUSH
10546: LD_INT 45
10548: EQUAL
10549: OR
10550: PUSH
10551: LD_VAR 0 8
10555: PUSH
10556: LD_VAR 0 14
10560: ARRAY
10561: PUSH
10562: LD_INT 49
10564: EQUAL
10565: OR
10566: IFFALSE 10615
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10568: LD_ADDR_VAR 0 17
10572: PUSH
10573: LD_INT 21
10575: PUSH
10576: LD_INT 22
10578: PUSH
10579: LD_INT 23
10581: PUSH
10582: LD_INT 24
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10591: LD_ADDR_OWVAR 37
10595: PUSH
10596: LD_VAR 0 17
10600: PUSH
10601: LD_INT 1
10603: PPUSH
10604: LD_VAR 0 17
10608: PPUSH
10609: CALL_OW 12
10613: ARRAY
10614: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10615: LD_VAR 0 8
10619: PUSH
10620: LD_VAR 0 14
10624: ARRAY
10625: PUSH
10626: LD_INT 46
10628: EQUAL
10629: PUSH
10630: LD_VAR 0 8
10634: PUSH
10635: LD_VAR 0 14
10639: ARRAY
10640: PUSH
10641: LD_INT 47
10643: EQUAL
10644: OR
10645: IFFALSE 10686
// begin ruChassisTab = [ 23 , 24 ] ;
10647: LD_ADDR_VAR 0 17
10651: PUSH
10652: LD_INT 23
10654: PUSH
10655: LD_INT 24
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10662: LD_ADDR_OWVAR 37
10666: PUSH
10667: LD_VAR 0 17
10671: PUSH
10672: LD_INT 1
10674: PPUSH
10675: LD_VAR 0 17
10679: PPUSH
10680: CALL_OW 12
10684: ARRAY
10685: ST_TO_ADDR
// end ; end ;
10686: GO 10485
10688: POP
10689: POP
// veh = CreateVehicle ;
10690: LD_ADDR_VAR 0 16
10694: PUSH
10695: CALL_OW 45
10699: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10700: LD_VAR 0 16
10704: PPUSH
10705: LD_VAR 0 1
10709: PPUSH
10710: LD_INT 0
10712: PPUSH
10713: CALL_OW 49
// if vehcontrol = 1 then
10717: LD_VAR 0 7
10721: PUSH
10722: LD_INT 1
10724: EQUAL
10725: IFFALSE 10782
// begin hc_gallery =  ;
10727: LD_ADDR_OWVAR 33
10731: PUSH
10732: LD_STRING 
10734: ST_TO_ADDR
// hc_name =  ;
10735: LD_ADDR_OWVAR 26
10739: PUSH
10740: LD_STRING 
10742: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10743: LD_INT 0
10745: PPUSH
10746: LD_INT 3
10748: PPUSH
10749: LD_VAR 0 4
10753: PPUSH
10754: CALL_OW 380
// un = CreateHuman ;
10758: LD_ADDR_VAR 0 15
10762: PUSH
10763: CALL_OW 44
10767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10768: LD_VAR 0 15
10772: PPUSH
10773: LD_VAR 0 16
10777: PPUSH
10778: CALL_OW 52
// end ; i = i + 1 ;
10782: LD_ADDR_VAR 0 13
10786: PUSH
10787: LD_VAR 0 13
10791: PUSH
10792: LD_INT 1
10794: PLUS
10795: ST_TO_ADDR
// end ; until i = vehCount ;
10796: LD_VAR 0 13
10800: PUSH
10801: LD_VAR 0 3
10805: EQUAL
10806: IFFALSE 9458
// repeat wait ( 0 0$1 ) ;
10808: LD_INT 35
10810: PPUSH
10811: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10815: LD_INT 22
10817: PUSH
10818: LD_VAR 0 2
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 21
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 24
10839: PUSH
10840: LD_INT 250
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 3
10849: PUSH
10850: LD_INT 58
10852: PUSH
10853: EMPTY
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PPUSH
10866: CALL_OW 69
10870: PUSH
10871: LD_INT 0
10873: GREATER
10874: IFFALSE 11116
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10876: LD_ADDR_VAR 0 13
10880: PUSH
10881: LD_INT 22
10883: PUSH
10884: LD_VAR 0 2
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 21
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 24
10905: PUSH
10906: LD_INT 250
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: LD_INT 58
10918: PUSH
10919: EMPTY
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PPUSH
10932: CALL_OW 69
10936: PUSH
10937: FOR_IN
10938: IFFALSE 11114
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10940: LD_ADDR_VAR 0 21
10944: PUSH
10945: LD_INT 22
10947: PUSH
10948: LD_VAR 0 11
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PPUSH
10957: CALL_OW 69
10961: PPUSH
10962: LD_VAR 0 13
10966: PPUSH
10967: CALL_OW 74
10971: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10972: LD_ADDR_VAR 0 22
10976: PUSH
10977: LD_INT 22
10979: PUSH
10980: LD_VAR 0 11
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 59
10994: PUSH
10995: EMPTY
10996: LIST
10997: PUSH
10998: LD_INT 21
11000: PUSH
11001: LD_INT 1
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 21
11010: PUSH
11011: LD_INT 2
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: PPUSH
11031: CALL_OW 69
11035: PPUSH
11036: LD_VAR 0 13
11040: PPUSH
11041: CALL_OW 74
11045: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11046: LD_VAR 0 13
11050: PPUSH
11051: LD_VAR 0 21
11055: PPUSH
11056: CALL_OW 296
11060: PUSH
11061: LD_INT 8
11063: PLUS
11064: PUSH
11065: LD_VAR 0 13
11069: PPUSH
11070: LD_VAR 0 22
11074: PPUSH
11075: CALL_OW 296
11079: LESS
11080: IFFALSE 11098
// begin ComAttackUnit ( i , target1 ) ;
11082: LD_VAR 0 13
11086: PPUSH
11087: LD_VAR 0 21
11091: PPUSH
11092: CALL_OW 115
// end else
11096: GO 11112
// begin ComAttackUnit ( i , target2 ) ;
11098: LD_VAR 0 13
11102: PPUSH
11103: LD_VAR 0 22
11107: PPUSH
11108: CALL_OW 115
// end ; end ;
11112: GO 10937
11114: POP
11115: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11116: LD_INT 22
11118: PUSH
11119: LD_VAR 0 2
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 21
11130: PUSH
11131: LD_INT 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 24
11140: PUSH
11141: LD_INT 250
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 3
11150: PUSH
11151: LD_INT 58
11153: PUSH
11154: EMPTY
11155: LIST
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 69
11171: PUSH
11172: LD_INT 0
11174: EQUAL
11175: IFFALSE 10808
// end ; end_of_file
11177: LD_VAR 0 12
11181: RET
// every 1 do var i , gammaSquad , startX , startY ;
11182: GO 11184
11184: DISABLE
11185: LD_INT 0
11187: PPUSH
11188: PPUSH
11189: PPUSH
11190: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11191: LD_ADDR_VAR 0 2
11195: PUSH
11196: LD_EXP 8
11200: PUSH
11201: LD_EXP 9
11205: PUSH
11206: LD_EXP 10
11210: PUSH
11211: LD_EXP 11
11215: PUSH
11216: LD_EXP 12
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11228: LD_ADDR_VAR 0 3
11232: PUSH
11233: LD_INT 46
11235: PUSH
11236: LD_INT 45
11238: PUSH
11239: LD_INT 44
11241: PUSH
11242: LD_INT 43
11244: PUSH
11245: LD_INT 42
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11255: LD_ADDR_VAR 0 4
11259: PUSH
11260: LD_INT 14
11262: PUSH
11263: LD_INT 12
11265: PUSH
11266: LD_INT 10
11268: PUSH
11269: LD_INT 8
11271: PUSH
11272: LD_INT 6
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11282: LD_INT 32
11284: PPUSH
11285: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11289: LD_INT 32
11291: PPUSH
11292: LD_INT 51
11294: PPUSH
11295: LD_INT 26
11297: PPUSH
11298: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11302: LD_INT 32
11304: PPUSH
11305: LD_INT 53
11307: PPUSH
11308: LD_INT 23
11310: PPUSH
11311: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11315: LD_INT 32
11317: PPUSH
11318: LD_INT 52
11320: PPUSH
11321: LD_INT 19
11323: PPUSH
11324: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11328: LD_INT 35
11330: PPUSH
11331: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11335: LD_INT 32
11337: PPUSH
11338: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11342: LD_INT 32
11344: PPUSH
11345: CALL_OW 250
11349: PUSH
11350: LD_INT 52
11352: EQUAL
11353: PUSH
11354: LD_INT 32
11356: PPUSH
11357: CALL_OW 251
11361: PUSH
11362: LD_INT 19
11364: EQUAL
11365: AND
11366: IFFALSE 11328
// ComExitVehicle ( JMM ) ;
11368: LD_EXP 1
11372: PPUSH
11373: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11377: LD_EXP 7
11381: PPUSH
11382: LD_EXP 1
11386: PPUSH
11387: CALL_OW 119
// wait ( 0 0$01 ) ;
11391: LD_INT 35
11393: PPUSH
11394: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11398: LD_EXP 1
11402: PPUSH
11403: LD_INT 46
11405: PPUSH
11406: LD_INT 10
11408: PPUSH
11409: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11413: LD_EXP 1
11417: PPUSH
11418: LD_EXP 7
11422: PPUSH
11423: CALL_OW 179
// wait ( 0 0$4 ) ;
11427: LD_INT 140
11429: PPUSH
11430: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11434: LD_EXP 1
11438: PPUSH
11439: LD_STRING D1-JMM-1
11441: PPUSH
11442: CALL_OW 88
// if not dialogue_skipped then
11446: LD_OWVAR 59
11450: NOT
11451: IFFALSE 12108
// begin for i := 1 to gammaSquad do
11453: LD_ADDR_VAR 0 1
11457: PUSH
11458: DOUBLE
11459: LD_INT 1
11461: DEC
11462: ST_TO_ADDR
11463: LD_VAR 0 2
11467: PUSH
11468: FOR_TO
11469: IFFALSE 11530
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11471: LD_VAR 0 2
11475: PUSH
11476: LD_VAR 0 1
11480: ARRAY
11481: PPUSH
11482: LD_VAR 0 3
11486: PUSH
11487: LD_VAR 0 1
11491: ARRAY
11492: PPUSH
11493: LD_VAR 0 4
11497: PUSH
11498: LD_VAR 0 1
11502: ARRAY
11503: PPUSH
11504: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11508: LD_VAR 0 2
11512: PUSH
11513: LD_VAR 0 1
11517: ARRAY
11518: PPUSH
11519: LD_EXP 1
11523: PPUSH
11524: CALL_OW 179
// end ;
11528: GO 11468
11530: POP
11531: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11532: LD_EXP 4
11536: PPUSH
11537: LD_INT 41
11539: PPUSH
11540: LD_INT 4
11542: PPUSH
11543: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11547: LD_EXP 4
11551: PPUSH
11552: LD_EXP 1
11556: PPUSH
11557: CALL_OW 179
// if Lisa = false and Bobby then
11561: LD_EXP 4
11565: PUSH
11566: LD_INT 0
11568: EQUAL
11569: PUSH
11570: LD_EXP 2
11574: AND
11575: IFFALSE 11606
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11577: LD_EXP 2
11581: PPUSH
11582: LD_INT 41
11584: PPUSH
11585: LD_INT 4
11587: PPUSH
11588: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11592: LD_EXP 2
11596: PPUSH
11597: LD_EXP 1
11601: PPUSH
11602: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11606: LD_EXP 4
11610: PUSH
11611: LD_INT 0
11613: EQUAL
11614: PUSH
11615: LD_EXP 2
11619: PUSH
11620: LD_INT 0
11622: EQUAL
11623: AND
11624: PUSH
11625: LD_EXP 3
11629: AND
11630: IFFALSE 11661
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11632: LD_EXP 3
11636: PPUSH
11637: LD_INT 41
11639: PPUSH
11640: LD_INT 4
11642: PPUSH
11643: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11647: LD_EXP 3
11651: PPUSH
11652: LD_EXP 1
11656: PPUSH
11657: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11661: LD_EXP 4
11665: PUSH
11666: LD_INT 0
11668: EQUAL
11669: PUSH
11670: LD_EXP 2
11674: PUSH
11675: LD_INT 0
11677: EQUAL
11678: AND
11679: PUSH
11680: LD_EXP 3
11684: PUSH
11685: LD_INT 0
11687: EQUAL
11688: AND
11689: IFFALSE 11720
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11691: LD_EXP 6
11695: PPUSH
11696: LD_INT 41
11698: PPUSH
11699: LD_INT 4
11701: PPUSH
11702: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11706: LD_EXP 6
11710: PPUSH
11711: LD_EXP 1
11715: PPUSH
11716: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11720: LD_EXP 7
11724: PPUSH
11725: LD_STRING D1-Brown-1
11727: PPUSH
11728: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11732: LD_EXP 1
11736: PPUSH
11737: LD_STRING D1-JMM-2
11739: PPUSH
11740: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11744: LD_EXP 7
11748: PPUSH
11749: LD_STRING D1-Brown-2
11751: PPUSH
11752: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11756: LD_EXP 1
11760: PPUSH
11761: LD_EXP 9
11765: PPUSH
11766: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11770: LD_EXP 9
11774: PPUSH
11775: LD_STRING D1-FSol1-2
11777: PPUSH
11778: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11782: LD_EXP 1
11786: PPUSH
11787: LD_EXP 8
11791: PPUSH
11792: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11796: LD_EXP 8
11800: PPUSH
11801: LD_STRING D1-Sol2-2
11803: PPUSH
11804: CALL_OW 88
// if Lisa then
11808: LD_EXP 4
11812: IFFALSE 11852
// begin ComTurnUnit ( JMM , Lisa ) ;
11814: LD_EXP 1
11818: PPUSH
11819: LD_EXP 4
11823: PPUSH
11824: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11828: LD_EXP 4
11832: PPUSH
11833: LD_STRING D1-Lisa-2
11835: PPUSH
11836: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11840: LD_EXP 1
11844: PPUSH
11845: LD_STRING D1-JMM-3
11847: PPUSH
11848: CALL_OW 88
// end ; if Bobby then
11852: LD_EXP 2
11856: IFFALSE 11896
// begin ComTurnUnit ( JMM , Bobby ) ;
11858: LD_EXP 1
11862: PPUSH
11863: LD_EXP 2
11867: PPUSH
11868: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11872: LD_EXP 2
11876: PPUSH
11877: LD_STRING D1-Bobby-2
11879: PPUSH
11880: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11884: LD_EXP 1
11888: PPUSH
11889: LD_STRING D1-JMM-3
11891: PPUSH
11892: CALL_OW 88
// end ; if Cyrus then
11896: LD_EXP 3
11900: IFFALSE 11940
// begin ComTurnUnit ( JMM , Cyrus ) ;
11902: LD_EXP 1
11906: PPUSH
11907: LD_EXP 3
11911: PPUSH
11912: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11916: LD_EXP 3
11920: PPUSH
11921: LD_STRING D1-Cyrus-2
11923: PPUSH
11924: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11928: LD_EXP 1
11932: PPUSH
11933: LD_STRING D1-JMM-3
11935: PPUSH
11936: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11940: LD_EXP 1
11944: PPUSH
11945: LD_EXP 7
11949: PPUSH
11950: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11954: LD_EXP 1
11958: PPUSH
11959: LD_STRING D1-JMM-3a
11961: PPUSH
11962: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11966: LD_EXP 7
11970: PPUSH
11971: LD_INT 38
11973: PPUSH
11974: LD_INT 5
11976: PPUSH
11977: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11981: LD_EXP 7
11985: PPUSH
11986: LD_EXP 1
11990: PPUSH
11991: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11995: LD_EXP 1
11999: PPUSH
12000: LD_INT 40
12002: PPUSH
12003: LD_INT 7
12005: PPUSH
12006: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12010: LD_EXP 1
12014: PPUSH
12015: LD_EXP 7
12019: PPUSH
12020: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12024: LD_EXP 7
12028: PPUSH
12029: LD_STRING D1-Brown-3
12031: PPUSH
12032: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12036: LD_EXP 14
12040: PPUSH
12041: LD_STRING D1-Har-3
12043: PPUSH
12044: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12048: LD_EXP 1
12052: PPUSH
12053: LD_STRING D1-JMM-4
12055: PPUSH
12056: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12060: LD_EXP 14
12064: PPUSH
12065: LD_STRING D1-Har-4
12067: PPUSH
12068: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12072: LD_EXP 1
12076: PPUSH
12077: LD_STRING D1-JMM-5
12079: PPUSH
12080: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12084: LD_EXP 14
12088: PPUSH
12089: LD_STRING D1-Har-5
12091: PPUSH
12092: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12096: LD_EXP 1
12100: PPUSH
12101: LD_STRING D1-JMM-6
12103: PPUSH
12104: CALL_OW 88
// end ; InGameOff ;
12108: CALL_OW 9
// PrepareRussianConvoy ;
12112: CALL 3008 0 0
// ChangeMissionObjectives ( M1 ) ;
12116: LD_STRING M1
12118: PPUSH
12119: CALL_OW 337
// SaveForQuickRestart ;
12123: CALL_OW 22
// timerStatus = 1 ;
12127: LD_ADDR_EXP 29
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// startTimer = 1 ;
12135: LD_ADDR_EXP 30
12139: PUSH
12140: LD_INT 1
12142: ST_TO_ADDR
// bonusAvalaible = 1 ;
12143: LD_ADDR_EXP 42
12147: PUSH
12148: LD_INT 1
12150: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12151: LD_INT 105
12153: PPUSH
12154: CALL_OW 67
// DialogueOn ;
12158: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12162: LD_EXP 12
12166: PPUSH
12167: LD_STRING D9-Mech1-1
12169: PPUSH
12170: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12174: LD_EXP 1
12178: PPUSH
12179: LD_STRING D9-JMM-1
12181: PPUSH
12182: CALL_OW 88
// DialogueOff ;
12186: CALL_OW 7
// end ;
12190: PPOPN 4
12192: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12193: LD_INT 47
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 321
12203: PUSH
12204: LD_INT 2
12206: EQUAL
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 3
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 30
12230: PUSH
12231: LD_INT 3
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 69
12247: PUSH
12248: LD_INT 0
12250: GREATER
12251: AND
12252: IFFALSE 12482
12254: GO 12256
12256: DISABLE
// begin if IsOk ( Campell ) then
12257: LD_EXP 12
12261: PPUSH
12262: CALL_OW 302
12266: IFFALSE 12282
// begin Say ( Campell , D10-Mech1-1 ) ;
12268: LD_EXP 12
12272: PPUSH
12273: LD_STRING D10-Mech1-1
12275: PPUSH
12276: CALL_OW 88
// end else
12280: GO 12482
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12282: LD_INT 22
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 21
12294: PUSH
12295: LD_INT 1
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 25
12304: PUSH
12305: LD_INT 3
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 26
12314: PUSH
12315: LD_INT 1
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PPUSH
12328: CALL_OW 69
12332: PUSH
12333: LD_EXP 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: PUSH
12341: LD_INT 0
12343: GREATER
12344: DIFF
12345: IFFALSE 12419
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12347: LD_INT 22
12349: PUSH
12350: LD_INT 1
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 21
12359: PUSH
12360: LD_INT 1
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 26
12379: PUSH
12380: LD_INT 1
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PPUSH
12393: CALL_OW 69
12397: PUSH
12398: LD_EXP 1
12402: PUSH
12403: EMPTY
12404: LIST
12405: DIFF
12406: PPUSH
12407: LD_STRING D10-Mech1-1
12409: PPUSH
12410: LD_STRING D10-Mech1-1
12412: PPUSH
12413: CALL 4266 0 3
// end else
12417: GO 12482
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12419: LD_INT 22
12421: PUSH
12422: LD_INT 1
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 21
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 26
12441: PUSH
12442: LD_INT 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 1
12456: ARRAY
12457: PPUSH
12458: CALL_OW 69
12462: PUSH
12463: LD_EXP 1
12467: PUSH
12468: EMPTY
12469: LIST
12470: DIFF
12471: PPUSH
12472: LD_STRING D10-Mech1-1
12474: PPUSH
12475: LD_STRING D10-Mech1-1
12477: PPUSH
12478: CALL 4266 0 3
// end ; end ; end ;
12482: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12483: LD_INT 22
12485: PUSH
12486: LD_INT 1
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: LD_INT 32
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: PUSH
12512: LD_INT 0
12514: GREATER
12515: PUSH
12516: LD_EXP 32
12520: PUSH
12521: LD_INT 0
12523: EQUAL
12524: AND
12525: IFFALSE 12765
12527: GO 12529
12529: DISABLE
// begin if IsOK ( Claptopn ) then
12530: LD_EXP 11
12534: PPUSH
12535: CALL_OW 302
12539: IFFALSE 12555
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12541: LD_EXP 11
12545: PPUSH
12546: LD_STRING D9b-Eng1-1
12548: PPUSH
12549: CALL_OW 88
// end else
12553: GO 12751
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12555: LD_INT 22
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 21
12567: PUSH
12568: LD_INT 1
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 25
12577: PUSH
12578: LD_INT 3
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: LD_INT 26
12587: PUSH
12588: LD_INT 1
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 69
12605: PUSH
12606: LD_EXP 1
12610: PUSH
12611: EMPTY
12612: LIST
12613: PUSH
12614: LD_INT 0
12616: GREATER
12617: DIFF
12618: IFFALSE 12692
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12620: LD_INT 22
12622: PUSH
12623: LD_INT 1
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 21
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 25
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 26
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: PUSH
12671: LD_EXP 1
12675: PUSH
12676: EMPTY
12677: LIST
12678: DIFF
12679: PPUSH
12680: LD_STRING D9b-Eng1-1
12682: PPUSH
12683: LD_STRING D9b-Eng1-11
12685: PPUSH
12686: CALL 4266 0 3
// end else
12690: GO 12751
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12692: LD_INT 22
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 21
12704: PUSH
12705: LD_INT 1
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 26
12714: PUSH
12715: LD_INT 1
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 69
12731: PUSH
12732: LD_EXP 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: DIFF
12740: PPUSH
12741: LD_STRING D9b-Eng1-1
12743: PPUSH
12744: LD_STRING D9b-Eng1-1
12746: PPUSH
12747: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
12751: LD_EXP 33
12755: PUSH
12756: LD_INT 0
12758: EQUAL
12759: IFFALSE 12765
// EnergyDialog ;
12761: CALL 4690 0 0
// end ;
12765: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12766: LD_EXP 34
12770: PUSH
12771: LD_INT 1
12773: EQUAL
12774: PUSH
12775: LD_EXP 35
12779: PUSH
12780: LD_INT 1
12782: EQUAL
12783: AND
12784: IFFALSE 12796
12786: GO 12788
12788: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12789: LD_STRING M1a
12791: PPUSH
12792: CALL_OW 337
12796: END
// every 3 3$0 do
12797: GO 12799
12799: DISABLE
// begin PrepareFirstAttack ;
12800: CALL 3808 0 0
// end ;
12804: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12805: LD_INT 22
12807: PUSH
12808: LD_INT 5
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 1
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 3
12827: PUSH
12828: LD_INT 24
12830: PUSH
12831: LD_INT 250
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: PPUSH
12847: CALL_OW 69
12851: PUSH
12852: LD_INT 0
12854: GREATER
12855: PUSH
12856: LD_EXP 23
12860: PUSH
12861: LD_INT 1
12863: EQUAL
12864: AND
12865: IFFALSE 13166
12867: GO 12869
12869: DISABLE
12870: LD_INT 0
12872: PPUSH
// begin firstRussianAttack = 2 ;
12873: LD_ADDR_EXP 23
12877: PUSH
12878: LD_INT 2
12880: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12881: LD_INT 22
12883: PUSH
12884: LD_INT 5
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 69
12909: PPUSH
12910: LD_INT 125
12912: PPUSH
12913: LD_INT 98
12915: PPUSH
12916: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12920: LD_INT 22
12922: PUSH
12923: LD_INT 1
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: PUSH
12949: LD_EXP 1
12953: PUSH
12954: LD_EXP 7
12958: PUSH
12959: LD_EXP 4
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: DIFF
12969: PPUSH
12970: LD_STRING DAtt1-Sol1-1
12972: PPUSH
12973: LD_STRING DAtt1-FSol1-1
12975: PPUSH
12976: CALL 4266 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12980: LD_EXP 1
12984: PPUSH
12985: LD_STRING DAtt1-JMM-1
12987: PPUSH
12988: CALL_OW 88
// if Lisa then
12992: LD_EXP 4
12996: IFFALSE 13012
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12998: LD_EXP 4
13002: PPUSH
13003: LD_STRING DAtt1a-Lisa-1
13005: PPUSH
13006: CALL_OW 88
// end else
13010: GO 13083
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13012: LD_INT 22
13014: PUSH
13015: LD_INT 1
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 21
13024: PUSH
13025: LD_INT 1
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 26
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 69
13051: PUSH
13052: LD_EXP 1
13056: PUSH
13057: LD_EXP 7
13061: PUSH
13062: LD_EXP 4
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: DIFF
13072: PPUSH
13073: LD_STRING DAtt1a-Sol1-1
13075: PPUSH
13076: LD_STRING DAtt1-FSol1-1
13078: PPUSH
13079: CALL 4266 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13083: LD_EXP 1
13087: PPUSH
13088: LD_STRING DAtt1a-JMM-1
13090: PPUSH
13091: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13095: LD_INT 22
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 21
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 26
13117: PUSH
13118: LD_INT 1
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PUSH
13135: LD_EXP 1
13139: PUSH
13140: LD_EXP 7
13144: PUSH
13145: LD_EXP 4
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: DIFF
13155: PPUSH
13156: LD_STRING DAtt1b-Sol1-1
13158: PPUSH
13159: LD_STRING DAtt1a-Sol1-1
13161: PPUSH
13162: CALL 4266 0 3
// end ;
13166: PPOPN 1
13168: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13169: LD_EXP 23
13173: PUSH
13174: LD_INT 2
13176: EQUAL
13177: IFFALSE 13239
13179: GO 13181
13181: DISABLE
13182: LD_INT 0
13184: PPUSH
// begin enable ;
13185: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13186: LD_ADDR_VAR 0 1
13190: PUSH
13191: LD_INT 5
13193: PPUSH
13194: LD_INT 22
13196: PUSH
13197: LD_INT 5
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 1
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PPUSH
13218: CALL_OW 70
13222: PUSH
13223: FOR_IN
13224: IFFALSE 13237
// RemoveUnit ( i ) ;
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 64
13235: GO 13223
13237: POP
13238: POP
// end ;
13239: PPOPN 1
13241: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13242: LD_INT 22
13244: PUSH
13245: LD_INT 5
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: PPUSH
13255: CALL_OW 69
13259: PUSH
13260: LD_INT 0
13262: EQUAL
13263: PUSH
13264: LD_EXP 23
13268: PUSH
13269: LD_INT 2
13271: EQUAL
13272: AND
13273: IFFALSE 13286
13275: GO 13277
13277: DISABLE
// firstRussianAttack = 3 ;
13278: LD_ADDR_EXP 23
13282: PUSH
13283: LD_INT 3
13285: ST_TO_ADDR
13286: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13287: LD_EXP 28
13291: PUSH
13292: LD_INT 0
13294: EQUAL
13295: IFFALSE 13376
13297: GO 13299
13299: DISABLE
// begin timerStatus = 4 ;
13300: LD_ADDR_EXP 29
13304: PUSH
13305: LD_INT 4
13307: ST_TO_ADDR
// DialogueOn ;
13308: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13312: LD_EXP 13
13316: PPUSH
13317: LD_STRING D2-Don-1
13319: PPUSH
13320: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13324: LD_EXP 1
13328: PPUSH
13329: LD_STRING D2-JMM-1
13331: PPUSH
13332: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13336: LD_EXP 13
13340: PPUSH
13341: LD_STRING D2-Don-2
13343: PPUSH
13344: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13348: LD_EXP 1
13352: PPUSH
13353: LD_STRING D2-JMM-2
13355: PPUSH
13356: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13360: LD_EXP 13
13364: PPUSH
13365: LD_STRING D2-Don-3
13367: PPUSH
13368: CALL_OW 94
// DialogueOff ;
13372: CALL_OW 7
// end ;
13376: END
// every 12 12$0 do var tmp ;
13377: GO 13379
13379: DISABLE
13380: LD_INT 0
13382: PPUSH
// begin PrepareDonaldsonArmy ;
13383: CALL 1062 0 0
// CenterNowOnUnits ( Donaldson ) ;
13387: LD_EXP 13
13391: PPUSH
13392: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13396: LD_ADDR_VAR 0 1
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_INT 4
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 21
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 26
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 25
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: PUSH
13452: LD_EXP 5
13456: PUSH
13457: EMPTY
13458: LIST
13459: DIFF
13460: ST_TO_ADDR
// DialogueOn ;
13461: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13465: LD_VAR 0 1
13469: PPUSH
13470: LD_STRING D3-Sol1-1
13472: PPUSH
13473: LD_STRING D3-Sol1-1
13475: PPUSH
13476: CALL 4266 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13480: LD_INT 22
13482: PUSH
13483: LD_INT 4
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 26
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 25
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PPUSH
13526: CALL_OW 69
13530: PPUSH
13531: LD_STRING D3-Sol2-1
13533: PPUSH
13534: LD_STRING D3-Sol2-1
13536: PPUSH
13537: CALL 4266 0 3
// if Frank then
13541: LD_EXP 5
13545: IFFALSE 13559
// Say ( Frank , D3-Frank-1 ) ;
13547: LD_EXP 5
13551: PPUSH
13552: LD_STRING D3-Frank-1
13554: PPUSH
13555: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13559: LD_EXP 13
13563: PPUSH
13564: LD_STRING D3-Don-1
13566: PPUSH
13567: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13571: LD_EXP 13
13575: PPUSH
13576: LD_STRING D3-Don-1a
13578: PPUSH
13579: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13583: LD_EXP 1
13587: PPUSH
13588: LD_STRING D3-JMM-1
13590: PPUSH
13591: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13595: LD_EXP 13
13599: PPUSH
13600: LD_STRING D3-Don-2
13602: PPUSH
13603: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13607: LD_INT 22
13609: PUSH
13610: LD_INT 6
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 21
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 69
13635: PUSH
13636: LD_INT 0
13638: GREATER
13639: IFFALSE 13777
// begin Say ( JMM , D3-JMM-2 ) ;
13641: LD_EXP 1
13645: PPUSH
13646: LD_STRING D3-JMM-2
13648: PPUSH
13649: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13653: LD_EXP 13
13657: PPUSH
13658: LD_STRING D3-Don-3
13660: PPUSH
13661: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13665: LD_EXP 1
13669: PPUSH
13670: LD_STRING D3-JMM-3
13672: PPUSH
13673: CALL_OW 88
// if IsOK ( Frank ) then
13677: LD_EXP 5
13681: PPUSH
13682: CALL_OW 302
13686: IFFALSE 13700
// Say ( Frank , D3-Frank-3 ) ;
13688: LD_EXP 5
13692: PPUSH
13693: LD_STRING D3-Frank-3
13695: PPUSH
13696: CALL_OW 88
// DialogueOff ;
13700: CALL_OW 7
// if IsOK ( Frank ) then
13704: LD_EXP 5
13708: PPUSH
13709: CALL_OW 302
13713: IFFALSE 13775
// begin SetSide ( Frank , 0 ) ;
13715: LD_EXP 5
13719: PPUSH
13720: LD_INT 0
13722: PPUSH
13723: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13727: LD_EXP 5
13731: PPUSH
13732: LD_INT 12
13734: PPUSH
13735: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13739: LD_EXP 5
13743: PPUSH
13744: LD_STRING 04t_Frank
13746: PPUSH
13747: CALL_OW 38
// Wait ( 0 0$3 ) ;
13751: LD_INT 105
13753: PPUSH
13754: CALL_OW 67
// frankScoutBase = 1 ;
13758: LD_ADDR_EXP 25
13762: PUSH
13763: LD_INT 1
13765: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13766: LD_EXP 5
13770: PPUSH
13771: CALL_OW 64
// end ; end else
13775: GO 13864
// begin Say ( JMM , D3-JMM-4 ) ;
13777: LD_EXP 1
13781: PPUSH
13782: LD_STRING D3-JMM-4
13784: PPUSH
13785: CALL_OW 88
// DialogueOff ;
13789: CALL_OW 7
// if IsOK ( Frank ) then
13793: LD_EXP 5
13797: PPUSH
13798: CALL_OW 302
13802: IFFALSE 13864
// begin SetSide ( Frank , 0 ) ;
13804: LD_EXP 5
13808: PPUSH
13809: LD_INT 0
13811: PPUSH
13812: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13816: LD_EXP 5
13820: PPUSH
13821: LD_INT 12
13823: PPUSH
13824: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13828: LD_EXP 5
13832: PPUSH
13833: LD_STRING 04t_Frank
13835: PPUSH
13836: CALL_OW 38
// Wait ( 0 0$3 ) ;
13840: LD_INT 105
13842: PPUSH
13843: CALL_OW 67
// frankScoutBase = 1 ;
13847: LD_ADDR_EXP 25
13851: PUSH
13852: LD_INT 1
13854: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13855: LD_EXP 5
13859: PPUSH
13860: CALL_OW 64
// end ; end ; end ;
13864: PPOPN 1
13866: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13867: LD_EXP 13
13871: PPUSH
13872: CALL_OW 255
13876: PUSH
13877: LD_INT 4
13879: EQUAL
13880: PUSH
13881: LD_EXP 13
13885: PPUSH
13886: CALL_OW 302
13890: AND
13891: IFFALSE 13916
13893: GO 13895
13895: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13896: LD_EXP 13
13900: PPUSH
13901: LD_STRING D3b-Don-1
13903: PPUSH
13904: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13908: LD_ADDR_EXP 41
13912: PUSH
13913: LD_INT 1
13915: ST_TO_ADDR
// end ;
13916: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13917: LD_EXP 24
13921: PUSH
13922: LD_INT 0
13924: EQUAL
13925: IFFALSE 14081
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
// begin enable ;
13934: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_INT 22
13942: PUSH
13943: LD_INT 4
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: LD_INT 21
13952: PUSH
13953: LD_INT 1
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PPUSH
13964: CALL_OW 69
13968: PUSH
13969: FOR_IN
13970: IFFALSE 14079
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13972: LD_ADDR_VAR 0 2
13976: PUSH
13977: LD_INT 22
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 21
13989: PUSH
13990: LD_INT 1
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: PUSH
14006: FOR_IN
14007: IFFALSE 14075
// begin if GetDistUnits ( i , j ) < 7 then
14009: LD_VAR 0 1
14013: PPUSH
14014: LD_VAR 0 2
14018: PPUSH
14019: CALL_OW 296
14023: PUSH
14024: LD_INT 7
14026: LESS
14027: IFFALSE 14073
// begin saveDonaldson = 1 ;
14029: LD_ADDR_EXP 24
14033: PUSH
14034: LD_INT 1
14036: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14037: LD_INT 22
14039: PUSH
14040: LD_INT 4
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 21
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 69
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: CALL_OW 235
// end ; end ;
14073: GO 14006
14075: POP
14076: POP
// end ;
14077: GO 13969
14079: POP
14080: POP
// end ;
14081: PPOPN 2
14083: END
// every 0 0$1 trigger frankScoutBase do
14084: LD_EXP 25
14088: IFFALSE 14407
14090: GO 14092
14092: DISABLE
// begin wait ( 2 2$30 ) ;
14093: LD_INT 5250
14095: PPUSH
14096: CALL_OW 67
// uc_side = 4 ;
14100: LD_ADDR_OWVAR 20
14104: PUSH
14105: LD_INT 4
14107: ST_TO_ADDR
// uc_nation = 1 ;
14108: LD_ADDR_OWVAR 21
14112: PUSH
14113: LD_INT 1
14115: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14116: LD_ADDR_EXP 5
14120: PUSH
14121: LD_STRING 04t_Frank
14123: PPUSH
14124: CALL_OW 34
14128: ST_TO_ADDR
// if not Frank then
14129: LD_EXP 5
14133: NOT
14134: IFFALSE 14138
// exit ;
14136: GO 14407
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14138: LD_EXP 5
14142: PPUSH
14143: LD_INT 13
14145: PPUSH
14146: LD_INT 0
14148: PPUSH
14149: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14153: LD_INT 35
14155: PPUSH
14156: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14160: LD_EXP 1
14164: PPUSH
14165: CALL_OW 310
14169: NOT
14170: PUSH
14171: LD_EXP 1
14175: PPUSH
14176: LD_INT 4
14178: PPUSH
14179: CALL_OW 296
14183: PUSH
14184: LD_INT 20
14186: LESS
14187: AND
14188: IFFALSE 14221
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14190: LD_EXP 5
14194: PPUSH
14195: LD_EXP 1
14199: PPUSH
14200: CALL_OW 250
14204: PPUSH
14205: LD_EXP 1
14209: PPUSH
14210: CALL_OW 251
14214: PPUSH
14215: CALL_OW 111
14219: GO 14236
// ComMoveXY ( Frank , 51 , 15 ) ;
14221: LD_EXP 5
14225: PPUSH
14226: LD_INT 51
14228: PPUSH
14229: LD_INT 15
14231: PPUSH
14232: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14236: LD_EXP 5
14240: PPUSH
14241: LD_EXP 1
14245: PPUSH
14246: CALL_OW 296
14250: PUSH
14251: LD_INT 10
14253: LESS
14254: IFFALSE 14153
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14256: LD_EXP 1
14260: PUSH
14261: LD_EXP 5
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PPUSH
14270: CALL_OW 87
// DialogueOn ;
14274: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14278: LD_EXP 5
14282: PPUSH
14283: LD_STRING D3a-Frank-1
14285: PPUSH
14286: CALL_OW 88
// if Lisa then
14290: LD_EXP 4
14294: IFFALSE 14344
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14296: LD_EXP 4
14300: PPUSH
14301: LD_STRING D3a-Lisa-1
14303: PPUSH
14304: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14308: LD_EXP 5
14312: PPUSH
14313: LD_STRING D3a-Frank-2
14315: PPUSH
14316: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14320: LD_EXP 4
14324: PPUSH
14325: LD_STRING D3a-Lisa-2
14327: PPUSH
14328: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14332: LD_EXP 5
14336: PPUSH
14337: LD_STRING D3a-Frank-3
14339: PPUSH
14340: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14344: LD_EXP 1
14348: PPUSH
14349: LD_STRING D3a-JMM-3
14351: PPUSH
14352: CALL_OW 88
// DialogueOff ;
14356: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14360: LD_EXP 5
14364: PPUSH
14365: LD_INT 1
14367: PPUSH
14368: CALL_OW 235
// InGameOn ;
14372: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14376: LD_INT 1
14378: PPUSH
14379: LD_INT 7
14381: PPUSH
14382: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14386: LD_INT 93
14388: PPUSH
14389: LD_INT 91
14391: PPUSH
14392: CALL_OW 84
// wait ( 0 0$5 ) ;
14396: LD_INT 175
14398: PPUSH
14399: CALL_OW 67
// InGameOff ;
14403: CALL_OW 9
// end ;
14407: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14408: LD_OWVAR 67
14412: PUSH
14413: LD_INT 2
14415: EQUAL
14416: PUSH
14417: LD_OWVAR 67
14421: PUSH
14422: LD_INT 3
14424: EQUAL
14425: OR
14426: IFFALSE 14450
14428: GO 14430
14430: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14431: LD_INT 24
14433: PPUSH
14434: LD_INT 24
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 53
14445: PPUSH
14446: CALL_OW 125
14450: END
// every 18 18$0 do
14451: GO 14453
14453: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14454: LD_EXP 14
14458: PPUSH
14459: LD_STRING D4-Har-1
14461: PPUSH
14462: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14466: LD_EXP 1
14470: PPUSH
14471: LD_STRING D4-JMM-1
14473: PPUSH
14474: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14478: LD_EXP 14
14482: PPUSH
14483: LD_STRING D4-Har-2
14485: PPUSH
14486: CALL_OW 94
// case query ( Q1 ) of 1 :
14490: LD_STRING Q1
14492: PPUSH
14493: CALL_OW 97
14497: PUSH
14498: LD_INT 1
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14565
14506: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14507: LD_EXP 1
14511: PPUSH
14512: LD_STRING D5-JMM-1
14514: PPUSH
14515: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14519: LD_EXP 14
14523: PPUSH
14524: LD_STRING D5-Har-1
14526: PPUSH
14527: CALL_OW 94
// timeToSupport = 10 10$0 ;
14531: LD_ADDR_EXP 28
14535: PUSH
14536: LD_INT 21000
14538: ST_TO_ADDR
// timerStatus = 2 ;
14539: LD_ADDR_EXP 29
14543: PUSH
14544: LD_INT 2
14546: ST_TO_ADDR
// startTimer = 1 ;
14547: LD_ADDR_EXP 30
14551: PUSH
14552: LD_INT 1
14554: ST_TO_ADDR
// harrAnswer = 1 ;
14555: LD_ADDR_EXP 26
14559: PUSH
14560: LD_INT 1
14562: ST_TO_ADDR
// end ; 2 :
14563: GO 14700
14565: LD_INT 2
14567: DOUBLE
14568: EQUAL
14569: IFTRUE 14573
14571: GO 14632
14573: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14574: LD_EXP 1
14578: PPUSH
14579: LD_STRING D5-JMM-2
14581: PPUSH
14582: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14586: LD_EXP 14
14590: PPUSH
14591: LD_STRING D5-Har-2
14593: PPUSH
14594: CALL_OW 94
// timeToSupport = 5 5$0 ;
14598: LD_ADDR_EXP 28
14602: PUSH
14603: LD_INT 10500
14605: ST_TO_ADDR
// timerStatus = 2 ;
14606: LD_ADDR_EXP 29
14610: PUSH
14611: LD_INT 2
14613: ST_TO_ADDR
// startTimer = 1 ;
14614: LD_ADDR_EXP 30
14618: PUSH
14619: LD_INT 1
14621: ST_TO_ADDR
// harrAnswer = 2 ;
14622: LD_ADDR_EXP 26
14626: PUSH
14627: LD_INT 2
14629: ST_TO_ADDR
// end ; 3 :
14630: GO 14700
14632: LD_INT 3
14634: DOUBLE
14635: EQUAL
14636: IFTRUE 14640
14638: GO 14699
14640: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14641: LD_EXP 1
14645: PPUSH
14646: LD_STRING D5-JMM-3
14648: PPUSH
14649: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14653: LD_EXP 14
14657: PPUSH
14658: LD_STRING D5-Har-3
14660: PPUSH
14661: CALL_OW 94
// timeToSupport = 5 5$0 ;
14665: LD_ADDR_EXP 28
14669: PUSH
14670: LD_INT 10500
14672: ST_TO_ADDR
// timerStatus = 2 ;
14673: LD_ADDR_EXP 29
14677: PUSH
14678: LD_INT 2
14680: ST_TO_ADDR
// startTimer = 1 ;
14681: LD_ADDR_EXP 30
14685: PUSH
14686: LD_INT 1
14688: ST_TO_ADDR
// harrAnswer = 3 ;
14689: LD_ADDR_EXP 26
14693: PUSH
14694: LD_INT 3
14696: ST_TO_ADDR
// end ; end ;
14697: GO 14700
14699: POP
// end ;
14700: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14701: LD_EXP 29
14705: PUSH
14706: LD_INT 2
14708: EQUAL
14709: PUSH
14710: LD_EXP 28
14714: PUSH
14715: LD_INT 0
14717: EQUAL
14718: AND
14719: IFFALSE 14996
14721: GO 14723
14723: DISABLE
// begin timerStatus = 4 ;
14724: LD_ADDR_EXP 29
14728: PUSH
14729: LD_INT 4
14731: ST_TO_ADDR
// if harrAnswer = 1 then
14732: LD_EXP 26
14736: PUSH
14737: LD_INT 1
14739: EQUAL
14740: IFFALSE 14820
// begin PrepareHarrisonSupport ( 3 ) ;
14742: LD_INT 3
14744: PPUSH
14745: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14749: LD_INT 2100
14751: PPUSH
14752: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14756: LD_EXP 14
14760: PPUSH
14761: LD_STRING D7-Har-1
14763: PPUSH
14764: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14768: LD_STRING M2
14770: PPUSH
14771: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14775: LD_ADDR_EXP 27
14779: PUSH
14780: LD_INT 31500
14782: PUSH
14783: LD_INT 10500
14785: PUSH
14786: LD_INT 8400
14788: PUSH
14789: LD_INT 6300
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: PUSH
14797: LD_OWVAR 67
14801: ARRAY
14802: PLUS
14803: ST_TO_ADDR
// startTimer = 1 ;
14804: LD_ADDR_EXP 30
14808: PUSH
14809: LD_INT 1
14811: ST_TO_ADDR
// timerStatus = 3 ;
14812: LD_ADDR_EXP 29
14816: PUSH
14817: LD_INT 3
14819: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14820: LD_EXP 26
14824: PUSH
14825: LD_INT 2
14827: EQUAL
14828: IFFALSE 14908
// begin PrepareHarrisonSupport ( 4 ) ;
14830: LD_INT 4
14832: PPUSH
14833: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14837: LD_INT 2100
14839: PPUSH
14840: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14844: LD_EXP 14
14848: PPUSH
14849: LD_STRING D7-Har-1
14851: PPUSH
14852: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14856: LD_STRING M2
14858: PPUSH
14859: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14863: LD_ADDR_EXP 27
14867: PUSH
14868: LD_INT 27300
14870: PUSH
14871: LD_INT 8400
14873: PUSH
14874: LD_INT 8400
14876: PUSH
14877: LD_INT 6300
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: PUSH
14885: LD_OWVAR 67
14889: ARRAY
14890: PLUS
14891: ST_TO_ADDR
// startTimer = 1 ;
14892: LD_ADDR_EXP 30
14896: PUSH
14897: LD_INT 1
14899: ST_TO_ADDR
// timerStatus = 3 ;
14900: LD_ADDR_EXP 29
14904: PUSH
14905: LD_INT 3
14907: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14908: LD_EXP 26
14912: PUSH
14913: LD_INT 3
14915: EQUAL
14916: IFFALSE 14996
// begin PrepareHarrisonSupport ( 5 ) ;
14918: LD_INT 5
14920: PPUSH
14921: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14925: LD_INT 2100
14927: PPUSH
14928: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14932: LD_EXP 14
14936: PPUSH
14937: LD_STRING D7-Har-1
14939: PPUSH
14940: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14944: LD_STRING M2
14946: PPUSH
14947: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14951: LD_ADDR_EXP 27
14955: PUSH
14956: LD_INT 21000
14958: PUSH
14959: LD_INT 8400
14961: PUSH
14962: LD_INT 6300
14964: PUSH
14965: LD_INT 4200
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: LD_OWVAR 67
14977: ARRAY
14978: PLUS
14979: ST_TO_ADDR
// startTimer = 1 ;
14980: LD_ADDR_EXP 30
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// timerStatus = 3 ;
14988: LD_ADDR_EXP 29
14992: PUSH
14993: LD_INT 3
14995: ST_TO_ADDR
// end ; end ;
14996: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14997: LD_EXP 27
15001: PUSH
15002: LD_INT 8400
15004: LESSEQUAL
15005: PUSH
15006: LD_EXP 29
15010: PUSH
15011: LD_INT 3
15013: EQUAL
15014: AND
15015: IFFALSE 15047
15017: GO 15019
15019: DISABLE
// begin DialogueOn ;
15020: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15024: LD_EXP 14
15028: PPUSH
15029: LD_STRING D7a-Har-1
15031: PPUSH
15032: CALL_OW 94
// DialogueOff ;
15036: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15040: LD_STRING M2a
15042: PPUSH
15043: CALL_OW 337
// end ;
15047: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15048: LD_EXP 27
15052: PUSH
15053: LD_INT 0
15055: LESSEQUAL
15056: PUSH
15057: LD_EXP 29
15061: PUSH
15062: LD_INT 3
15064: EQUAL
15065: AND
15066: PUSH
15067: LD_EXP 40
15071: NOT
15072: AND
15073: IFFALSE 15212
15075: GO 15077
15077: DISABLE
15078: LD_INT 0
15080: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15081: LD_ADDR_VAR 0 1
15085: PUSH
15086: LD_INT 22
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PPUSH
15096: CALL_OW 69
15100: PUSH
15101: LD_EXP 1
15105: PUSH
15106: EMPTY
15107: LIST
15108: DIFF
15109: ST_TO_ADDR
// saveDonaldson = 2 ;
15110: LD_ADDR_EXP 24
15114: PUSH
15115: LD_INT 2
15117: ST_TO_ADDR
// DialogueOn ;
15118: CALL_OW 6
// if IsOK ( Donaldson ) then
15122: LD_EXP 13
15126: PPUSH
15127: CALL_OW 302
15131: IFFALSE 15147
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15133: LD_EXP 14
15137: PPUSH
15138: LD_STRING D8-Har-1
15140: PPUSH
15141: CALL_OW 94
// end else
15145: GO 15159
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15147: LD_EXP 14
15151: PPUSH
15152: LD_STRING D8-Har-1a
15154: PPUSH
15155: CALL_OW 94
// end ; DialogueOff ;
15159: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 4
15170: PPUSH
15171: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15175: LD_VAR 0 1
15179: PPUSH
15180: LD_INT 88
15182: PPUSH
15183: LD_INT 89
15185: PPUSH
15186: CALL_OW 114
// honor = 0 ;
15190: LD_ADDR_EXP 39
15194: PUSH
15195: LD_INT 0
15197: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15198: LD_INT 350
15200: PPUSH
15201: CALL_OW 67
// YouLost ( LostCommand ) ;
15205: LD_STRING LostCommand
15207: PPUSH
15208: CALL_OW 104
// end ;
15212: PPOPN 1
15214: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15215: LD_INT 22
15217: PUSH
15218: LD_INT 6
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 21
15227: PUSH
15228: LD_INT 1
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PPUSH
15239: CALL_OW 69
15243: PUSH
15244: LD_INT 0
15246: EQUAL
15247: PUSH
15248: LD_EXP 20
15252: PUSH
15253: LD_INT 0
15255: EQUAL
15256: AND
15257: PUSH
15258: LD_EXP 42
15262: PUSH
15263: LD_INT 1
15265: EQUAL
15266: AND
15267: IFFALSE 15361
15269: GO 15271
15271: DISABLE
15272: LD_INT 0
15274: PPUSH
15275: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15276: LD_ADDR_VAR 0 2
15280: PUSH
15281: LD_INT 22
15283: PUSH
15284: LD_INT 1
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 21
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 23
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: PPUSH
15316: CALL_OW 69
15320: ST_TO_ADDR
// for i in tmp do
15321: LD_ADDR_VAR 0 1
15325: PUSH
15326: LD_VAR 0 2
15330: PUSH
15331: FOR_IN
15332: IFFALSE 15359
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15334: LD_VAR 0 1
15338: PPUSH
15339: LD_INT 1
15341: PPUSH
15342: LD_INT 4
15344: PPUSH
15345: CALL_OW 12
15349: PPUSH
15350: LD_INT 500
15352: PPUSH
15353: CALL_OW 492
// end ;
15357: GO 15331
15359: POP
15360: POP
// end ; end_of_file
15361: PPOPN 2
15363: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15364: GO 15366
15366: DISABLE
15367: LD_INT 0
15369: PPUSH
// begin enemyWayX = [ ] ;
15370: LD_ADDR_EXP 46
15374: PUSH
15375: EMPTY
15376: ST_TO_ADDR
// enemyWayY = [ ] ;
15377: LD_ADDR_EXP 47
15381: PUSH
15382: EMPTY
15383: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15384: LD_ADDR_VAR 0 1
15388: PUSH
15389: LD_INT 1
15391: PPUSH
15392: LD_INT 3
15394: PPUSH
15395: CALL_OW 12
15399: ST_TO_ADDR
// if rnd = 1 then
15400: LD_VAR 0 1
15404: PUSH
15405: LD_INT 1
15407: EQUAL
15408: IFFALSE 15448
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15410: LD_ADDR_EXP 46
15414: PUSH
15415: LD_INT 73
15417: PUSH
15418: LD_INT 46
15420: PUSH
15421: LD_INT 29
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: LIST
15428: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15429: LD_ADDR_EXP 47
15433: PUSH
15434: LD_INT 71
15436: PUSH
15437: LD_INT 43
15439: PUSH
15440: LD_INT 29
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: LIST
15447: ST_TO_ADDR
// end ; if rnd = 2 then
15448: LD_VAR 0 1
15452: PUSH
15453: LD_INT 2
15455: EQUAL
15456: IFFALSE 15480
// begin enemyWayX = [ 64 ] ;
15458: LD_ADDR_EXP 46
15462: PUSH
15463: LD_INT 64
15465: PUSH
15466: EMPTY
15467: LIST
15468: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15469: LD_ADDR_EXP 47
15473: PUSH
15474: LD_INT 43
15476: PUSH
15477: EMPTY
15478: LIST
15479: ST_TO_ADDR
// end ; if rnd = 3 then
15480: LD_VAR 0 1
15484: PUSH
15485: LD_INT 3
15487: EQUAL
15488: IFFALSE 15512
// begin enemyWayX = [ 80 ] ;
15490: LD_ADDR_EXP 46
15494: PUSH
15495: LD_INT 80
15497: PUSH
15498: EMPTY
15499: LIST
15500: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15501: LD_ADDR_EXP 47
15505: PUSH
15506: LD_INT 28
15508: PUSH
15509: EMPTY
15510: LIST
15511: ST_TO_ADDR
// end ; enable ;
15512: ENABLE
// end ;
15513: PPOPN 1
15515: END
// every 0 0$1 trigger AIEnable = 1 do
15516: LD_EXP 37
15520: PUSH
15521: LD_INT 1
15523: EQUAL
15524: IFFALSE 15638
15526: GO 15528
15528: DISABLE
// begin enable ;
15529: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15530: LD_INT 3
15532: PPUSH
15533: LD_INT 21
15535: PPUSH
15536: LD_INT 7
15538: PPUSH
15539: CALL 5723 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15543: LD_INT 3
15545: PPUSH
15546: LD_INT 8
15548: PPUSH
15549: LD_INT 7
15551: PPUSH
15552: LD_INT 1
15554: PPUSH
15555: CALL 6044 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15559: LD_INT 3
15561: PPUSH
15562: LD_INT 17
15564: PPUSH
15565: LD_INT 108
15567: PPUSH
15568: LD_INT 95
15570: PPUSH
15571: CALL 7368 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15575: LD_INT 3
15577: PPUSH
15578: LD_INT 23
15580: PPUSH
15581: LD_EXP 46
15585: PPUSH
15586: LD_EXP 47
15590: PPUSH
15591: CALL 6700 0 4
// if baseReadyToBuild = 2 then
15595: LD_EXP 20
15599: PUSH
15600: LD_INT 2
15602: EQUAL
15603: IFFALSE 15638
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15605: LD_INT 6
15607: PPUSH
15608: LD_EXP 21
15612: PPUSH
15613: LD_INT 6
15615: PPUSH
15616: CALL 5723 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15620: LD_INT 6
15622: PPUSH
15623: LD_INT 9
15625: PPUSH
15626: LD_INT 6
15628: PPUSH
15629: LD_EXP 22
15633: PPUSH
15634: CALL 6044 0 4
// end ; end ;
15638: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15639: LD_EXP 15
15643: PPUSH
15644: CALL_OW 310
15648: NOT
15649: PUSH
15650: LD_INT 21
15652: PPUSH
15653: CALL_OW 302
15657: AND
15658: PUSH
15659: LD_INT 21
15661: PPUSH
15662: CALL_OW 255
15666: PUSH
15667: LD_INT 3
15669: EQUAL
15670: AND
15671: IFFALSE 15689
15673: GO 15675
15675: DISABLE
// begin enable ;
15676: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15677: LD_EXP 15
15681: PPUSH
15682: LD_INT 21
15684: PPUSH
15685: CALL_OW 120
// end ;
15689: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15690: LD_INT 22
15692: PUSH
15693: LD_INT 3
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 21
15702: PUSH
15703: LD_INT 2
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 55
15712: PUSH
15713: EMPTY
15714: LIST
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: PUSH
15726: LD_INT 0
15728: EQUAL
15729: PUSH
15730: LD_INT 1
15732: PPUSH
15733: CALL_OW 255
15737: PUSH
15738: LD_INT 3
15740: EQUAL
15741: AND
15742: PUSH
15743: LD_INT 21
15745: PPUSH
15746: CALL_OW 302
15750: AND
15751: PUSH
15752: LD_INT 21
15754: PPUSH
15755: CALL_OW 255
15759: PUSH
15760: LD_INT 3
15762: EQUAL
15763: AND
15764: PUSH
15765: LD_INT 21
15767: PPUSH
15768: CALL_OW 302
15772: AND
15773: IFFALSE 15978
15775: GO 15777
15777: DISABLE
// begin enable ;
15778: ENABLE
// if Difficulty = 1 then
15779: LD_OWVAR 67
15783: PUSH
15784: LD_INT 1
15786: EQUAL
15787: IFFALSE 15831
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15789: LD_INT 3
15791: PPUSH
15792: LD_INT 24
15794: PPUSH
15795: LD_OWVAR 67
15799: PUSH
15800: LD_INT 2
15802: PLUS
15803: PPUSH
15804: LD_INT 42
15806: PUSH
15807: LD_INT 42
15809: PUSH
15810: LD_INT 43
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: PPUSH
15818: LD_INT 1
15820: PPUSH
15821: LD_INT 1
15823: PPUSH
15824: LD_INT 21
15826: PPUSH
15827: CALL 6588 0 7
// if Difficulty = 2 then
15831: LD_OWVAR 67
15835: PUSH
15836: LD_INT 2
15838: EQUAL
15839: IFFALSE 15906
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15841: LD_INT 3
15843: PPUSH
15844: LD_INT 24
15846: PPUSH
15847: LD_OWVAR 67
15851: PUSH
15852: LD_INT 2
15854: PLUS
15855: PPUSH
15856: LD_INT 42
15858: PUSH
15859: LD_INT 42
15861: PUSH
15862: LD_INT 43
15864: PUSH
15865: LD_INT 43
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: LD_INT 21
15882: PUSH
15883: LD_INT 22
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 1
15892: PPUSH
15893: LD_INT 2
15895: PPUSH
15896: CALL_OW 12
15900: ARRAY
15901: PPUSH
15902: CALL 6588 0 7
// if Difficulty = 3 then
15906: LD_OWVAR 67
15910: PUSH
15911: LD_INT 3
15913: EQUAL
15914: IFFALSE 15978
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15916: LD_INT 3
15918: PPUSH
15919: LD_INT 24
15921: PPUSH
15922: LD_OWVAR 67
15926: PUSH
15927: LD_INT 2
15929: PPUSH
15930: LD_INT 3
15932: PPUSH
15933: CALL_OW 12
15937: PLUS
15938: PPUSH
15939: LD_INT 43
15941: PUSH
15942: LD_INT 43
15944: PUSH
15945: LD_INT 43
15947: PUSH
15948: LD_INT 43
15950: PUSH
15951: LD_INT 44
15953: PUSH
15954: LD_INT 44
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: PPUSH
15965: LD_INT 1
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: LD_INT 22
15973: PPUSH
15974: CALL 6588 0 7
// end ;
15978: END
// every 0 0$1 do
15979: GO 15981
15981: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15982: LD_INT 3
15984: PPUSH
15985: LD_INT 1
15987: PPUSH
15988: LD_INT 3
15990: PPUSH
15991: CALL 5638 0 3
15995: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15996: LD_EXP 20
16000: PUSH
16001: LD_INT 1
16003: EQUAL
16004: IFFALSE 16151
16006: GO 16008
16008: DISABLE
16009: LD_INT 0
16011: PPUSH
16012: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16013: LD_ADDR_VAR 0 2
16017: PUSH
16018: LD_INT 22
16020: PUSH
16021: LD_INT 6
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 21
16030: PUSH
16031: LD_INT 2
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 34
16040: PUSH
16041: LD_INT 51
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16058: LD_VAR 0 2
16062: PUSH
16063: LD_INT 1
16065: ARRAY
16066: PPUSH
16067: LD_EXP 21
16071: PPUSH
16072: CALL_OW 250
16076: PUSH
16077: LD_INT 5
16079: MINUS
16080: PPUSH
16081: LD_EXP 21
16085: PPUSH
16086: CALL_OW 251
16090: PUSH
16091: LD_INT 5
16093: MINUS
16094: PPUSH
16095: CALL_OW 111
// wait ( 0 0$5 ) ;
16099: LD_INT 175
16101: PPUSH
16102: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16106: LD_VAR 0 2
16110: PUSH
16111: LD_INT 1
16113: ARRAY
16114: PPUSH
16115: LD_INT 41
16117: PPUSH
16118: LD_INT 52
16120: PPUSH
16121: CALL_OW 177
// wait ( 0 0$40 ) ;
16125: LD_INT 1400
16127: PPUSH
16128: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16132: LD_VAR 0 2
16136: PUSH
16137: LD_INT 1
16139: ARRAY
16140: PPUSH
16141: LD_INT 41
16143: PPUSH
16144: LD_INT 44
16146: PPUSH
16147: CALL_OW 111
// end ;
16151: PPOPN 2
16153: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16154: LD_EXP 21
16158: PPUSH
16159: CALL_OW 274
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: CALL_OW 275
16171: PUSH
16172: LD_INT 100
16174: GREATEREQUAL
16175: IFFALSE 16403
16177: GO 16179
16179: DISABLE
16180: LD_INT 0
16182: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16183: LD_ADDR_VAR 0 1
16187: PUSH
16188: LD_INT 22
16190: PUSH
16191: LD_INT 6
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 21
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 25
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16228: LD_VAR 0 1
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: PPUSH
16237: LD_INT 4
16239: PPUSH
16240: LD_INT 39
16242: PPUSH
16243: LD_INT 37
16245: PPUSH
16246: LD_INT 3
16248: PPUSH
16249: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16253: LD_VAR 0 1
16257: PUSH
16258: LD_INT 1
16260: ARRAY
16261: PPUSH
16262: LD_INT 29
16264: PPUSH
16265: LD_INT 42
16267: PPUSH
16268: LD_INT 54
16270: PPUSH
16271: LD_INT 3
16273: PPUSH
16274: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16278: LD_VAR 0 1
16282: PUSH
16283: LD_INT 1
16285: ARRAY
16286: PPUSH
16287: LD_INT 6
16289: PPUSH
16290: LD_INT 38
16292: PPUSH
16293: LD_INT 48
16295: PPUSH
16296: LD_INT 0
16298: PPUSH
16299: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16303: LD_VAR 0 1
16307: PUSH
16308: LD_INT 1
16310: ARRAY
16311: PPUSH
16312: LD_INT 2
16314: PPUSH
16315: LD_INT 32
16317: PPUSH
16318: LD_INT 38
16320: PPUSH
16321: LD_INT 2
16323: PPUSH
16324: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 1
16335: ARRAY
16336: PPUSH
16337: LD_INT 26
16339: PPUSH
16340: LD_INT 39
16342: PPUSH
16343: LD_INT 55
16345: PPUSH
16346: LD_INT 3
16348: PPUSH
16349: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16353: LD_VAR 0 1
16357: PUSH
16358: LD_INT 1
16360: ARRAY
16361: PPUSH
16362: LD_INT 32
16364: PPUSH
16365: LD_INT 31
16367: PPUSH
16368: LD_INT 31
16370: PPUSH
16371: LD_INT 3
16373: PPUSH
16374: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16378: LD_VAR 0 1
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: LD_INT 31
16389: PPUSH
16390: LD_INT 50
16392: PPUSH
16393: LD_INT 51
16395: PPUSH
16396: LD_INT 4
16398: PPUSH
16399: CALL_OW 205
// end ; end_of_file
16403: PPOPN 1
16405: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16406: LD_INT 0
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16415: LD_ADDR_VAR 0 3
16419: PUSH
16420: LD_INT 22
16422: PUSH
16423: LD_INT 6
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 21
16432: PUSH
16433: LD_INT 1
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 25
16442: PUSH
16443: LD_INT 1
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 3
16452: PUSH
16453: LD_INT 54
16455: PUSH
16456: EMPTY
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16474: LD_ADDR_VAR 0 7
16478: PUSH
16479: LD_INT 22
16481: PUSH
16482: LD_INT 6
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 21
16491: PUSH
16492: LD_INT 1
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 25
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 54
16511: PUSH
16512: EMPTY
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: PPUSH
16521: CALL_OW 69
16525: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16526: LD_ADDR_VAR 0 4
16530: PUSH
16531: LD_INT 22
16533: PUSH
16534: LD_INT 6
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 25
16553: PUSH
16554: LD_INT 2
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: PPUSH
16566: CALL_OW 69
16570: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16571: LD_ADDR_VAR 0 6
16575: PUSH
16576: LD_INT 22
16578: PUSH
16579: LD_INT 6
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 21
16588: PUSH
16589: LD_INT 1
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 25
16598: PUSH
16599: LD_INT 4
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: PPUSH
16611: CALL_OW 69
16615: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16616: LD_ADDR_VAR 0 8
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_INT 6
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 21
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 34
16643: PUSH
16644: LD_INT 51
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: PPUSH
16656: CALL_OW 69
16660: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 255
16670: PUSH
16671: LD_INT 6
16673: EQUAL
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 266
16684: PUSH
16685: LD_INT 0
16687: EQUAL
16688: AND
16689: IFFALSE 16709
// begin ruPDepot = building ;
16691: LD_ADDR_EXP 21
16695: PUSH
16696: LD_VAR 0 1
16700: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16701: LD_ADDR_EXP 20
16705: PUSH
16706: LD_INT 1
16708: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 266
16718: PUSH
16719: LD_INT 4
16721: EQUAL
16722: PUSH
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 255
16732: PUSH
16733: LD_INT 6
16735: EQUAL
16736: AND
16737: IFFALSE 16770
// for i in tmpSold do
16739: LD_ADDR_VAR 0 2
16743: PUSH
16744: LD_VAR 0 3
16748: PUSH
16749: FOR_IN
16750: IFFALSE 16768
// ComEnterUnit ( i , building ) ;
16752: LD_VAR 0 2
16756: PPUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 120
16766: GO 16749
16768: POP
16769: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 266
16779: PUSH
16780: LD_INT 6
16782: EQUAL
16783: PUSH
16784: LD_VAR 0 1
16788: PPUSH
16789: CALL_OW 255
16793: PUSH
16794: LD_INT 6
16796: EQUAL
16797: AND
16798: IFFALSE 16856
// begin for i in tmpSci do
16800: LD_ADDR_VAR 0 2
16804: PUSH
16805: LD_VAR 0 6
16809: PUSH
16810: FOR_IN
16811: IFFALSE 16829
// ComEnterUnit ( i , building ) ;
16813: LD_VAR 0 2
16817: PPUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 120
16827: GO 16810
16829: POP
16830: POP
// ResAllTechs ( 6 , building , 3 ) ;
16831: LD_INT 6
16833: PPUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: LD_INT 3
16841: PPUSH
16842: CALL 5638 0 3
// ruPLab = building ;
16846: LD_ADDR_EXP 22
16850: PUSH
16851: LD_VAR 0 1
16855: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 266
16865: PUSH
16866: LD_INT 2
16868: EQUAL
16869: PUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 255
16879: PUSH
16880: LD_INT 6
16882: EQUAL
16883: AND
16884: IFFALSE 16935
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16886: LD_ADDR_VAR 0 5
16890: PUSH
16891: LD_VAR 0 8
16895: PUSH
16896: LD_INT 1
16898: ARRAY
16899: PPUSH
16900: CALL_OW 313
16904: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16905: LD_VAR 0 5
16909: PPUSH
16910: CALL_OW 121
// wait ( 0 0$1 ) ;
16914: LD_INT 35
16916: PPUSH
16917: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16921: LD_VAR 0 5
16925: PPUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 266
16944: PUSH
16945: LD_INT 32
16947: EQUAL
16948: PUSH
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL_OW 255
16958: PUSH
16959: LD_INT 6
16961: EQUAL
16962: AND
16963: IFFALSE 17015
// begin ComPlaceWeapon ( building , 42 ) ;
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_INT 42
16972: PPUSH
16973: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16977: LD_VAR 0 7
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PPUSH
16986: CALL_OW 122
// wait ( 0 0$1 ) ;
16990: LD_INT 35
16992: PPUSH
16993: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16997: LD_VAR 0 7
17001: PUSH
17002: LD_INT 1
17004: ARRAY
17005: PPUSH
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17015: LD_VAR 0 1
17019: PPUSH
17020: CALL_OW 266
17024: PUSH
17025: LD_INT 31
17027: EQUAL
17028: PUSH
17029: LD_VAR 0 1
17033: PPUSH
17034: CALL_OW 255
17038: PUSH
17039: LD_INT 6
17041: EQUAL
17042: AND
17043: IFFALSE 17109
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
17045: LD_VAR 0 7
17049: PUSH
17050: LD_INT 2
17052: ARRAY
17053: PPUSH
17054: CALL_OW 122
// wait ( 0 0$1 ) ;
17058: LD_INT 35
17060: PPUSH
17061: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17065: LD_VAR 0 7
17069: PUSH
17070: LD_INT 2
17072: ARRAY
17073: PPUSH
17074: LD_VAR 0 1
17078: PPUSH
17079: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17083: LD_VAR 0 4
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PPUSH
17092: LD_EXP 21
17096: PPUSH
17097: CALL_OW 120
// baseReadyToBuild = 2 ;
17101: LD_ADDR_EXP 20
17105: PUSH
17106: LD_INT 2
17108: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 266
17118: PUSH
17119: LD_INT 32
17121: EQUAL
17122: PUSH
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 255
17132: PUSH
17133: LD_INT 1
17135: EQUAL
17136: AND
17137: PUSH
17138: LD_EXP 32
17142: PUSH
17143: LD_INT 0
17145: EQUAL
17146: AND
17147: IFFALSE 17392
// begin bunkerDialog = 1 ;
17149: LD_ADDR_EXP 32
17153: PUSH
17154: LD_INT 1
17156: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17157: LD_EXP 11
17161: PPUSH
17162: CALL_OW 302
17166: IFFALSE 17182
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17168: LD_EXP 11
17172: PPUSH
17173: LD_STRING D11-Eng1-1
17175: PPUSH
17176: CALL_OW 88
// end else
17180: GO 17378
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17182: LD_INT 22
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 21
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 25
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 26
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: PUSH
17233: LD_EXP 1
17237: PUSH
17238: EMPTY
17239: LIST
17240: PUSH
17241: LD_INT 0
17243: GREATER
17244: DIFF
17245: IFFALSE 17319
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17247: LD_INT 22
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 21
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 25
17269: PUSH
17270: LD_INT 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 26
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: PPUSH
17293: CALL_OW 69
17297: PUSH
17298: LD_EXP 1
17302: PUSH
17303: EMPTY
17304: LIST
17305: DIFF
17306: PPUSH
17307: LD_STRING D11-Eng1-1
17309: PPUSH
17310: LD_STRING D11-Eng1-1
17312: PPUSH
17313: CALL 4266 0 3
// end else
17317: GO 17378
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17319: LD_INT 22
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 21
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 26
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: PUSH
17359: LD_EXP 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: DIFF
17367: PPUSH
17368: LD_STRING D11-Eng1-1
17370: PPUSH
17371: LD_STRING D11-Eng1-1
17373: PPUSH
17374: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
17378: LD_EXP 33
17382: PUSH
17383: LD_INT 0
17385: EQUAL
17386: IFFALSE 17392
// EnergyDialog ;
17388: CALL 4690 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 29
17404: EQUAL
17405: PUSH
17406: LD_VAR 0 1
17410: PPUSH
17411: CALL_OW 255
17415: PUSH
17416: LD_INT 1
17418: EQUAL
17419: AND
17420: IFFALSE 17430
// buildOil = 1 ;
17422: LD_ADDR_EXP 34
17426: PUSH
17427: LD_INT 1
17429: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17430: LD_VAR 0 1
17434: PPUSH
17435: CALL_OW 266
17439: PUSH
17440: LD_INT 26
17442: EQUAL
17443: PUSH
17444: LD_VAR 0 1
17448: PPUSH
17449: CALL_OW 255
17453: PUSH
17454: LD_INT 1
17456: EQUAL
17457: AND
17458: IFFALSE 17468
// buildPower = 1 ;
17460: LD_ADDR_EXP 35
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
// end ;
17468: PPOPN 8
17470: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 266
17480: PUSH
17481: LD_INT 3
17483: EQUAL
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: CALL_OW 255
17494: PUSH
17495: LD_INT 1
17497: EQUAL
17498: AND
17499: PUSH
17500: LD_EXP 31
17504: PUSH
17505: LD_INT 0
17507: EQUAL
17508: AND
17509: IFFALSE 17857
// begin factoryDialog = 1 ;
17511: LD_ADDR_EXP 31
17515: PUSH
17516: LD_INT 1
17518: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17519: LD_INT 22
17521: PUSH
17522: LD_INT 1
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 21
17531: PUSH
17532: LD_INT 3
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 24
17551: PUSH
17552: LD_INT 1000
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: PPUSH
17565: CALL_OW 69
17569: PUSH
17570: LD_INT 1
17572: ARRAY
17573: PPUSH
17574: CALL_OW 87
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
17578: LD_INT 47
17580: PPUSH
17581: LD_INT 1
17583: PPUSH
17584: CALL_OW 321
17588: PUSH
17589: LD_INT 1
17591: EQUAL
17592: PUSH
17593: LD_INT 45
17595: PPUSH
17596: LD_INT 1
17598: PPUSH
17599: CALL_OW 321
17603: PUSH
17604: LD_INT 1
17606: EQUAL
17607: AND
17608: IFFALSE 17857
// begin Say ( JMM , D9a-JMM-1 ) ;
17610: LD_EXP 1
17614: PPUSH
17615: LD_STRING D9a-JMM-1
17617: PPUSH
17618: CALL_OW 88
// if IsOK ( Campell ) then
17622: LD_EXP 12
17626: PPUSH
17627: CALL_OW 302
17631: IFFALSE 17647
// begin Say ( Campell , D9a-Mech1-1 ) ;
17633: LD_EXP 12
17637: PPUSH
17638: LD_STRING D9a-Mech1-1
17640: PPUSH
17641: CALL_OW 88
// end else
17645: GO 17843
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17647: LD_INT 22
17649: PUSH
17650: LD_INT 1
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 21
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 25
17669: PUSH
17670: LD_INT 3
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 26
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: PPUSH
17693: CALL_OW 69
17697: PUSH
17698: LD_EXP 1
17702: PUSH
17703: EMPTY
17704: LIST
17705: PUSH
17706: LD_INT 0
17708: GREATER
17709: DIFF
17710: IFFALSE 17784
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17712: LD_INT 22
17714: PUSH
17715: LD_INT 1
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 21
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 25
17734: PUSH
17735: LD_INT 3
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 26
17744: PUSH
17745: LD_INT 1
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 69
17762: PUSH
17763: LD_EXP 1
17767: PUSH
17768: EMPTY
17769: LIST
17770: DIFF
17771: PPUSH
17772: LD_STRING D9a-Mech1-1
17774: PPUSH
17775: LD_STRING D9a-Mech1-1
17777: PPUSH
17778: CALL 4266 0 3
// end else
17782: GO 17843
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17784: LD_INT 22
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 21
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 26
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: PUSH
17824: LD_EXP 1
17828: PUSH
17829: EMPTY
17830: LIST
17831: DIFF
17832: PPUSH
17833: LD_STRING D9a-Mech1-1
17835: PPUSH
17836: LD_STRING D9a-Mech1-1
17838: PPUSH
17839: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
17843: LD_EXP 33
17847: PUSH
17848: LD_INT 0
17850: EQUAL
17851: IFFALSE 17857
// EnergyDialog ;
17853: CALL 4690 0 0
// end ; end ; end ;
17857: PPOPN 1
17859: END
// on UnitDestroyed ( unit ) do var mech ;
17860: LD_INT 0
17862: PPUSH
// begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17863: LD_VAR 0 1
17867: PPUSH
17868: CALL_OW 247
17872: PUSH
17873: LD_INT 1
17875: EQUAL
17876: PUSH
17877: LD_VAR 0 1
17881: PPUSH
17882: CALL_OW 255
17886: PUSH
17887: LD_INT 1
17889: EQUAL
17890: AND
17891: IFFALSE 17907
// lostCounter = lostCounter + 1 ;
17893: LD_ADDR_EXP 38
17897: PUSH
17898: LD_EXP 38
17902: PUSH
17903: LD_INT 1
17905: PLUS
17906: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17907: LD_VAR 0 1
17911: PPUSH
17912: CALL_OW 257
17916: PUSH
17917: LD_INT 3
17919: EQUAL
17920: PUSH
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 255
17930: PUSH
17931: LD_INT 3
17933: EQUAL
17934: AND
17935: PUSH
17936: LD_INT 24
17938: PPUSH
17939: CALL_OW 302
17943: AND
17944: PUSH
17945: LD_INT 24
17947: PPUSH
17948: CALL_OW 255
17952: PUSH
17953: LD_INT 3
17955: EQUAL
17956: AND
17957: IFFALSE 18056
// begin uc_side = 3 ;
17959: LD_ADDR_OWVAR 20
17963: PUSH
17964: LD_INT 3
17966: ST_TO_ADDR
// uc_nation = 3 ;
17967: LD_ADDR_OWVAR 21
17971: PUSH
17972: LD_INT 3
17974: ST_TO_ADDR
// hc_gallery :=  ;
17975: LD_ADDR_OWVAR 33
17979: PUSH
17980: LD_STRING 
17982: ST_TO_ADDR
// hc_name :=  ;
17983: LD_ADDR_OWVAR 26
17987: PUSH
17988: LD_STRING 
17990: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17991: LD_INT 0
17993: PPUSH
17994: LD_EXP 16
17998: PPUSH
17999: LD_EXP 17
18003: PPUSH
18004: CALL_OW 12
18008: PPUSH
18009: CALL_OW 383
// mech := CreateHuman ;
18013: LD_ADDR_VAR 0 2
18017: PUSH
18018: CALL_OW 44
18022: ST_TO_ADDR
// PlaceUnitXYR ( mech , 124 , 97 , 3 , false ) ;
18023: LD_VAR 0 2
18027: PPUSH
18028: LD_INT 124
18030: PPUSH
18031: LD_INT 97
18033: PPUSH
18034: LD_INT 3
18036: PPUSH
18037: LD_INT 0
18039: PPUSH
18040: CALL_OW 50
// ComEnterUnit ( mech , rubfact0 ) ;
18044: LD_VAR 0 2
18048: PPUSH
18049: LD_INT 24
18051: PPUSH
18052: CALL_OW 120
// end ; end ;
18056: PPOPN 2
18058: END
// on Contact ( side1 , side2 ) do var i , tmp ;
18059: LD_INT 0
18061: PPUSH
18062: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
18063: LD_ADDR_VAR 0 4
18067: PUSH
18068: LD_INT 22
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PPUSH
18078: CALL_OW 69
18082: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
18083: LD_VAR 0 1
18087: PUSH
18088: LD_INT 1
18090: EQUAL
18091: PUSH
18092: LD_VAR 0 2
18096: PUSH
18097: LD_INT 6
18099: EQUAL
18100: AND
18101: PUSH
18102: LD_EXP 41
18106: PUSH
18107: LD_INT 1
18109: EQUAL
18110: AND
18111: IFFALSE 18166
// begin donaldsonCoopAttack = 0 ;
18113: LD_ADDR_EXP 41
18117: PUSH
18118: LD_INT 0
18120: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18121: LD_ADDR_VAR 0 3
18125: PUSH
18126: LD_INT 22
18128: PUSH
18129: LD_INT 4
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: PUSH
18144: FOR_IN
18145: IFFALSE 18164
// ComAgressiveMove ( i , 52 , 64 ) ;
18147: LD_VAR 0 3
18151: PPUSH
18152: LD_INT 52
18154: PPUSH
18155: LD_INT 64
18157: PPUSH
18158: CALL_OW 114
18162: GO 18144
18164: POP
18165: POP
// end ; end ;
18166: PPOPN 4
18168: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
18169: LD_INT 0
18171: PPUSH
// begin if GetWeapon ( vehicle ) = 53 then
18172: LD_VAR 0 1
18176: PPUSH
18177: CALL_OW 264
18181: PUSH
18182: LD_INT 53
18184: EQUAL
18185: IFFALSE 18317
// begin uc_side = 3 ;
18187: LD_ADDR_OWVAR 20
18191: PUSH
18192: LD_INT 3
18194: ST_TO_ADDR
// uc_nation = 3 ;
18195: LD_ADDR_OWVAR 21
18199: PUSH
18200: LD_INT 3
18202: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
18203: LD_INT 0
18205: PPUSH
18206: LD_EXP 17
18210: PPUSH
18211: CALL_OW 383
// driver := CreateHuman ;
18215: LD_ADDR_VAR 0 3
18219: PUSH
18220: CALL_OW 44
18224: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
18225: LD_VAR 0 3
18229: PPUSH
18230: LD_VAR 0 2
18234: PPUSH
18235: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
18239: LD_VAR 0 1
18243: PPUSH
18244: LD_INT 21
18246: PPUSH
18247: CALL 4906 0 2
// AddComMoveXY ( vehicle , 104 , 73 ) ;
18251: LD_VAR 0 1
18255: PPUSH
18256: LD_INT 104
18258: PPUSH
18259: LD_INT 73
18261: PPUSH
18262: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18266: LD_VAR 0 3
18270: PPUSH
18271: CALL_OW 181
// AddComEnterUnit ( driver , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
18275: LD_VAR 0 3
18279: PPUSH
18280: LD_INT 22
18282: PUSH
18283: LD_INT 3
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 30
18292: PUSH
18293: LD_INT 3
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PPUSH
18304: CALL_OW 69
18308: PUSH
18309: LD_INT 1
18311: ARRAY
18312: PPUSH
18313: CALL_OW 180
// end ; end ;
18317: PPOPN 3
18319: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18320: LD_INT 0
18322: PPUSH
18323: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 255
18333: PUSH
18334: LD_INT 3
18336: EQUAL
18337: PUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 247
18347: PUSH
18348: LD_INT 2
18350: EQUAL
18351: AND
18352: IFFALSE 18446
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
18354: LD_VAR 0 1
18358: PPUSH
18359: CALL_OW 264
18363: PUSH
18364: LD_INT 42
18366: EQUAL
18367: PUSH
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 264
18377: PUSH
18378: LD_INT 43
18380: EQUAL
18381: OR
18382: PUSH
18383: LD_VAR 0 1
18387: PPUSH
18388: CALL_OW 264
18392: PUSH
18393: LD_INT 44
18395: EQUAL
18396: OR
18397: IFFALSE 18446
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18399: LD_INT 24
18401: PPUSH
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL_OW 265
18411: PPUSH
18412: LD_VAR 0 1
18416: PPUSH
18417: CALL_OW 262
18421: PPUSH
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 263
18431: PPUSH
18432: LD_VAR 0 1
18436: PPUSH
18437: CALL_OW 264
18441: PPUSH
18442: CALL_OW 185
// end ;
18446: PPOPN 3
18448: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 255
18458: PUSH
18459: LD_INT 3
18461: EQUAL
18462: PUSH
18463: LD_VAR 0 2
18467: PPUSH
18468: CALL_OW 255
18472: PUSH
18473: LD_INT 3
18475: EQUAL
18476: AND
18477: PUSH
18478: LD_VAR 0 1
18482: PPUSH
18483: CALL_OW 302
18487: AND
18488: IFFALSE 18530
// begin ComRepairVehicle ( human , vehicle ) ;
18490: LD_VAR 0 2
18494: PPUSH
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18504: LD_VAR 0 2
18508: PPUSH
18509: LD_VAR 0 1
18513: PPUSH
18514: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18518: LD_VAR 0 1
18522: PPUSH
18523: LD_INT 100
18525: PPUSH
18526: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18530: LD_VAR 0 1
18534: PPUSH
18535: CALL_OW 255
18539: PUSH
18540: LD_INT 3
18542: EQUAL
18543: PUSH
18544: LD_VAR 0 2
18548: PPUSH
18549: CALL_OW 255
18553: PUSH
18554: LD_INT 3
18556: EQUAL
18557: AND
18558: PUSH
18559: LD_INT 24
18561: PPUSH
18562: CALL_OW 302
18566: AND
18567: PUSH
18568: LD_VAR 0 1
18572: PPUSH
18573: CALL_OW 302
18577: NOT
18578: AND
18579: IFFALSE 18593
// ComEnterUnit ( human , rubfact0 ) ;
18581: LD_VAR 0 2
18585: PPUSH
18586: LD_INT 24
18588: PPUSH
18589: CALL_OW 120
// end ;
18593: PPOPN 2
18595: END
// on Command ( comandid ) do var i , j , tmp ;
18596: LD_INT 0
18598: PPUSH
18599: PPUSH
18600: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18601: LD_ADDR_VAR 0 2
18605: PUSH
18606: LD_INT 22
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: LD_INT 21
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 21
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PPUSH
18648: CALL_OW 69
18652: PUSH
18653: FOR_IN
18654: IFFALSE 18764
// begin if GetTaskList ( i ) > 0 then
18656: LD_VAR 0 2
18660: PPUSH
18661: CALL_OW 437
18665: PUSH
18666: LD_INT 0
18668: GREATER
18669: IFFALSE 18762
// begin for j = 1 to GetTaskList ( i ) do
18671: LD_ADDR_VAR 0 3
18675: PUSH
18676: DOUBLE
18677: LD_INT 1
18679: DEC
18680: ST_TO_ADDR
18681: LD_VAR 0 2
18685: PPUSH
18686: CALL_OW 437
18690: PUSH
18691: FOR_TO
18692: IFFALSE 18760
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18694: LD_ADDR_VAR 0 4
18698: PUSH
18699: LD_VAR 0 2
18703: PPUSH
18704: CALL_OW 437
18708: PUSH
18709: LD_VAR 0 3
18713: ARRAY
18714: PUSH
18715: LD_INT 4
18717: ARRAY
18718: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18719: LD_VAR 0 4
18723: PPUSH
18724: CALL_OW 255
18728: PUSH
18729: LD_INT 4
18731: EQUAL
18732: PUSH
18733: LD_VAR 0 4
18737: PPUSH
18738: CALL_OW 255
18742: PUSH
18743: LD_INT 0
18745: EQUAL
18746: OR
18747: IFFALSE 18758
// ComStop ( i ) ;
18749: LD_VAR 0 2
18753: PPUSH
18754: CALL_OW 141
// end ;
18758: GO 18691
18760: POP
18761: POP
// end ; end ;
18762: GO 18653
18764: POP
18765: POP
// end ; end_of_file
18766: PPOPN 4
18768: END
// every 10 10$0 do
18769: GO 18771
18771: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 1 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18772: LD_INT 5
18774: PPUSH
18775: LD_INT 3
18777: PPUSH
18778: LD_INT 1
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: LD_INT 4
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: LIST
18794: PUSH
18795: LD_OWVAR 67
18799: ARRAY
18800: PLUS
18801: PPUSH
18802: LD_INT 0
18804: PPUSH
18805: LD_INT 0
18807: PPUSH
18808: LD_INT 0
18810: PPUSH
18811: LD_INT 0
18813: PPUSH
18814: LD_EXP 16
18818: PPUSH
18819: LD_EXP 17
18823: PPUSH
18824: CALL_OW 12
18828: PPUSH
18829: LD_INT 4
18831: PPUSH
18832: LD_INT 14
18834: PPUSH
18835: LD_INT 1
18837: PPUSH
18838: LD_INT 2
18840: PPUSH
18841: CALL 7611 0 12
// end ;
18845: END
// every 20 20$0 do
18846: GO 18848
18848: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18849: LD_INT 5
18851: PPUSH
18852: LD_INT 3
18854: PPUSH
18855: LD_INT 3
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: LD_INT 3
18863: PUSH
18864: LD_INT 4
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: LD_OWVAR 67
18876: ARRAY
18877: PLUS
18878: PPUSH
18879: LD_INT 0
18881: PPUSH
18882: LD_INT 0
18884: PPUSH
18885: LD_INT 0
18887: PPUSH
18888: LD_INT 2
18890: PPUSH
18891: LD_EXP 16
18895: PPUSH
18896: LD_EXP 17
18900: PPUSH
18901: CALL_OW 12
18905: PPUSH
18906: LD_INT 4
18908: PPUSH
18909: LD_INT 14
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: LD_INT 1
18917: PPUSH
18918: CALL 7611 0 12
// end ;
18922: END
// every 25 25$0 do
18923: GO 18925
18925: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18926: LD_INT 4
18928: PPUSH
18929: LD_INT 5
18931: PPUSH
18932: LD_INT 3
18934: PUSH
18935: LD_INT 4
18937: PUSH
18938: LD_INT 5
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: PUSH
18946: LD_OWVAR 67
18950: ARRAY
18951: PPUSH
18952: LD_EXP 16
18956: PPUSH
18957: LD_EXP 17
18961: PPUSH
18962: CALL_OW 12
18966: PPUSH
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 1
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: LD_INT 42
18978: PUSH
18979: LD_INT 42
18981: PUSH
18982: LD_INT 43
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 42
18992: PUSH
18993: LD_INT 43
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 43
19002: PUSH
19003: LD_INT 43
19005: PUSH
19006: LD_INT 43
19008: PUSH
19009: LD_INT 44
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: LIST
19022: PUSH
19023: LD_OWVAR 67
19027: ARRAY
19028: PPUSH
19029: EMPTY
19030: PPUSH
19031: EMPTY
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL 9424 0 11
// end ; end_of_file
19040: END
// every 0 0$1 trigger startTimer = 1 do
19041: LD_EXP 30
19045: PUSH
19046: LD_INT 1
19048: EQUAL
19049: IFFALSE 19179
19051: GO 19053
19053: DISABLE
// begin enable ;
19054: ENABLE
// if timerStatus = 1 then
19055: LD_EXP 29
19059: PUSH
19060: LD_INT 1
19062: EQUAL
19063: IFFALSE 19096
// begin timeToSupport = timeToSupport - 0 0$01 ;
19065: LD_ADDR_EXP 28
19069: PUSH
19070: LD_EXP 28
19074: PUSH
19075: LD_INT 35
19077: MINUS
19078: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19079: LD_ADDR_OWVAR 47
19083: PUSH
19084: LD_STRING #Am04-1
19086: PUSH
19087: LD_EXP 28
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: ST_TO_ADDR
// end ; if timerStatus = 2 then
19096: LD_EXP 29
19100: PUSH
19101: LD_INT 2
19103: EQUAL
19104: IFFALSE 19137
// begin timeToSupport = timeToSupport - 0 0$01 ;
19106: LD_ADDR_EXP 28
19110: PUSH
19111: LD_EXP 28
19115: PUSH
19116: LD_INT 35
19118: MINUS
19119: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19120: LD_ADDR_OWVAR 47
19124: PUSH
19125: LD_STRING #Am04-2
19127: PUSH
19128: LD_EXP 28
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: ST_TO_ADDR
// end ; if timerStatus = 3 then
19137: LD_EXP 29
19141: PUSH
19142: LD_INT 3
19144: EQUAL
19145: IFFALSE 19161
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19147: LD_ADDR_EXP 27
19151: PUSH
19152: LD_EXP 27
19156: PUSH
19157: LD_INT 35
19159: MINUS
19160: ST_TO_ADDR
// end ; if timerStatus = 4 then
19161: LD_EXP 29
19165: PUSH
19166: LD_INT 4
19168: EQUAL
19169: IFFALSE 19179
// begin display_strings =  ;
19171: LD_ADDR_OWVAR 47
19175: PUSH
19176: LD_STRING 
19178: ST_TO_ADDR
// end ; end ; end_of_file
19179: END
// every 0 0$1 trigger IsDead ( JMM ) do
19180: LD_EXP 1
19184: PPUSH
19185: CALL_OW 301
19189: IFFALSE 19201
19191: GO 19193
19193: DISABLE
// YouLost ( JMM ) ;
19194: LD_STRING JMM
19196: PPUSH
19197: CALL_OW 104
19201: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19202: LD_INT 4
19204: PPUSH
19205: CALL_OW 301
19209: IFFALSE 19221
19211: GO 19213
19213: DISABLE
// YouLost ( Base ) ; end_of_file
19214: LD_STRING Base
19216: PPUSH
19217: CALL_OW 104
19221: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
19222: LD_EXP 15
19226: PPUSH
19227: CALL_OW 301
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 3
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 21
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PPUSH
19256: CALL_OW 69
19260: PUSH
19261: LD_INT 14
19263: PUSH
19264: LD_INT 13
19266: PUSH
19267: LD_INT 12
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: PUSH
19275: LD_OWVAR 67
19279: ARRAY
19280: LESS
19281: AND
19282: IFFALSE 19753
19284: GO 19286
19286: DISABLE
19287: LD_INT 0
19289: PPUSH
19290: PPUSH
// begin AIEnable = 0 ;
19291: LD_ADDR_EXP 37
19295: PUSH
19296: LD_INT 0
19298: ST_TO_ADDR
// escapeAvalaible = 1 ;
19299: LD_ADDR_EXP 40
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// InGameOn ;
19307: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19311: LD_INT 3
19313: PPUSH
19314: LD_INT 1
19316: PPUSH
19317: LD_INT 1
19319: PPUSH
19320: LD_INT 0
19322: PPUSH
19323: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19327: LD_INT 6
19329: PPUSH
19330: LD_INT 1
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: LD_INT 0
19338: PPUSH
19339: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19343: LD_INT 5
19345: PPUSH
19346: LD_INT 1
19348: PPUSH
19349: LD_INT 1
19351: PPUSH
19352: LD_INT 0
19354: PPUSH
19355: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19359: LD_INT 3
19361: PPUSH
19362: LD_INT 1
19364: PPUSH
19365: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19369: LD_INT 97
19371: PPUSH
19372: LD_INT 91
19374: PPUSH
19375: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19379: LD_INT 22
19381: PUSH
19382: LD_INT 3
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 21
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 69
19407: PPUSH
19408: CALL_OW 121
// wait ( 0 0$01 ) ;
19412: LD_INT 35
19414: PPUSH
19415: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19419: LD_INT 22
19421: PUSH
19422: LD_INT 3
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 21
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PPUSH
19443: CALL_OW 69
19447: PPUSH
19448: LD_INT 124
19450: PPUSH
19451: LD_INT 98
19453: PPUSH
19454: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19458: LD_INT 22
19460: PUSH
19461: LD_INT 5
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 21
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PPUSH
19482: CALL_OW 69
19486: PPUSH
19487: CALL_OW 121
// wait ( 0 0$01 ) ;
19491: LD_INT 35
19493: PPUSH
19494: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19498: LD_INT 22
19500: PUSH
19501: LD_INT 5
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 21
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 69
19526: PPUSH
19527: LD_INT 124
19529: PPUSH
19530: LD_INT 98
19532: PPUSH
19533: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19537: LD_INT 22
19539: PUSH
19540: LD_INT 6
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 21
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PPUSH
19561: CALL_OW 69
19565: PPUSH
19566: CALL_OW 121
// wait ( 0 0$01 ) ;
19570: LD_INT 35
19572: PPUSH
19573: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19577: LD_INT 22
19579: PUSH
19580: LD_INT 6
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 21
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 69
19605: PPUSH
19606: LD_INT 124
19608: PPUSH
19609: LD_INT 98
19611: PPUSH
19612: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19616: LD_INT 22
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 21
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 69
19644: PPUSH
19645: LD_INT 124
19647: PPUSH
19648: LD_INT 98
19650: PPUSH
19651: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19655: LD_INT 124
19657: PPUSH
19658: LD_INT 98
19660: PPUSH
19661: CALL_OW 84
// p := 0 0$0 ;
19665: LD_ADDR_VAR 0 2
19669: PUSH
19670: LD_INT 0
19672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19673: LD_INT 35
19675: PPUSH
19676: CALL_OW 67
// p := p + 0 0$1 ;
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: LD_VAR 0 2
19689: PUSH
19690: LD_INT 35
19692: PLUS
19693: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19694: LD_INT 23
19696: PUSH
19697: LD_INT 3
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 21
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 24
19716: PUSH
19717: LD_INT 250
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: PPUSH
19729: CALL_OW 69
19733: PUSH
19734: LD_INT 0
19736: EQUAL
19737: PUSH
19738: LD_VAR 0 2
19742: PUSH
19743: LD_INT 245
19745: GREATEREQUAL
19746: OR
19747: IFFALSE 19673
// FinishMission ;
19749: CALL 19926 0 0
// end ;
19753: PPOPN 2
19755: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19756: LD_EXP 40
19760: PUSH
19761: LD_INT 1
19763: EQUAL
19764: IFFALSE 19923
19766: GO 19768
19768: DISABLE
19769: LD_INT 0
19771: PPUSH
// begin enable ;
19772: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19773: LD_ADDR_VAR 0 1
19777: PUSH
19778: LD_INT 22
19780: PUSH
19781: LD_INT 3
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PPUSH
19788: CALL_OW 69
19792: PUSH
19793: FOR_IN
19794: IFFALSE 19821
// if IsInArea ( i , RussianEscape ) then
19796: LD_VAR 0 1
19800: PPUSH
19801: LD_INT 5
19803: PPUSH
19804: CALL_OW 308
19808: IFFALSE 19819
// RemoveUnit ( i ) ;
19810: LD_VAR 0 1
19814: PPUSH
19815: CALL_OW 64
19819: GO 19793
19821: POP
19822: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19823: LD_ADDR_VAR 0 1
19827: PUSH
19828: LD_INT 22
19830: PUSH
19831: LD_INT 5
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PPUSH
19838: CALL_OW 69
19842: PUSH
19843: FOR_IN
19844: IFFALSE 19871
// if IsInArea ( i , RussianEscape ) then
19846: LD_VAR 0 1
19850: PPUSH
19851: LD_INT 5
19853: PPUSH
19854: CALL_OW 308
19858: IFFALSE 19869
// RemoveUnit ( i ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL_OW 64
19869: GO 19843
19871: POP
19872: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19873: LD_ADDR_VAR 0 1
19877: PUSH
19878: LD_INT 22
19880: PUSH
19881: LD_INT 6
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PPUSH
19888: CALL_OW 69
19892: PUSH
19893: FOR_IN
19894: IFFALSE 19921
// if IsInArea ( i , RussianEscape ) then
19896: LD_VAR 0 1
19900: PPUSH
19901: LD_INT 5
19903: PPUSH
19904: CALL_OW 308
19908: IFFALSE 19919
// RemoveUnit ( i ) ;
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 64
19919: GO 19893
19921: POP
19922: POP
// end ;
19923: PPOPN 1
19925: END
// export function FinishMission ; var tmp ; begin
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
// SaveBase ( GammBaseArea ) ;
19930: LD_INT 22
19932: PPUSH
19933: CALL 20486 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19937: LD_INT 69
19939: PPUSH
19940: LD_INT 1
19942: PPUSH
19943: CALL_OW 321
19947: PPUSH
19948: LD_STRING GatlingInGamma
19950: PPUSH
19951: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19955: LD_EXP 34
19959: PUSH
19960: LD_INT 1
19962: EQUAL
19963: PUSH
19964: LD_EXP 35
19968: PUSH
19969: LD_INT 1
19971: EQUAL
19972: AND
19973: IFFALSE 19987
// begin AddMedal ( oil , 1 ) ;
19975: LD_STRING oil
19977: PPUSH
19978: LD_INT 1
19980: PPUSH
19981: CALL_OW 101
// end else
19985: GO 20080
// begin if buildOil = 1 and buildPower = 0 then
19987: LD_EXP 34
19991: PUSH
19992: LD_INT 1
19994: EQUAL
19995: PUSH
19996: LD_EXP 35
20000: PUSH
20001: LD_INT 0
20003: EQUAL
20004: AND
20005: IFFALSE 20018
// AddMedal ( oil , - 1 ) ;
20007: LD_STRING oil
20009: PPUSH
20010: LD_INT 1
20012: NEG
20013: PPUSH
20014: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
20018: LD_EXP 34
20022: PUSH
20023: LD_INT 0
20025: EQUAL
20026: PUSH
20027: LD_EXP 35
20031: PUSH
20032: LD_INT 1
20034: EQUAL
20035: AND
20036: IFFALSE 20049
// AddMedal ( oil , - 2 ) ;
20038: LD_STRING oil
20040: PPUSH
20041: LD_INT 2
20043: NEG
20044: PPUSH
20045: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
20049: LD_EXP 34
20053: PUSH
20054: LD_INT 0
20056: EQUAL
20057: PUSH
20058: LD_EXP 35
20062: PUSH
20063: LD_INT 0
20065: EQUAL
20066: AND
20067: IFFALSE 20080
// AddMedal ( oil , - 3 ) ;
20069: LD_STRING oil
20071: PPUSH
20072: LD_INT 3
20074: NEG
20075: PPUSH
20076: CALL_OW 101
// end ; if lostCounter > 3 then
20080: LD_EXP 38
20084: PUSH
20085: LD_INT 3
20087: GREATER
20088: IFFALSE 20103
// begin AddMedal ( deaths , - 1 ) ;
20090: LD_STRING deaths
20092: PPUSH
20093: LD_INT 1
20095: NEG
20096: PPUSH
20097: CALL_OW 101
// end else
20101: GO 20113
// begin AddMedal ( deaths , 1 ) ;
20103: LD_STRING deaths
20105: PPUSH
20106: LD_INT 1
20108: PPUSH
20109: CALL_OW 101
// end ; if honor = 1 then
20113: LD_EXP 39
20117: PUSH
20118: LD_INT 1
20120: EQUAL
20121: IFFALSE 20135
// begin AddMedal ( honour , 1 ) ;
20123: LD_STRING honour
20125: PPUSH
20126: LD_INT 1
20128: PPUSH
20129: CALL_OW 101
// end else
20133: GO 20146
// begin AddMedal ( honour , - 1 ) ;
20135: LD_STRING honour
20137: PPUSH
20138: LD_INT 1
20140: NEG
20141: PPUSH
20142: CALL_OW 101
// end ; GiveMedals ( Main ) ;
20146: LD_STRING Main
20148: PPUSH
20149: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20153: LD_INT 22
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 23
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 21
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: LIST
20187: PPUSH
20188: CALL_OW 69
20192: PPUSH
20193: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20197: LD_EXP 1
20201: PPUSH
20202: LD_EXP 44
20206: PUSH
20207: LD_STRING JMM
20209: STR
20210: PPUSH
20211: CALL_OW 38
// if IsOK ( Bobby ) then
20215: LD_EXP 2
20219: PPUSH
20220: CALL_OW 302
20224: IFFALSE 20244
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20226: LD_EXP 2
20230: PPUSH
20231: LD_EXP 44
20235: PUSH
20236: LD_STRING Bobby
20238: STR
20239: PPUSH
20240: CALL_OW 38
// if IsOK ( Cyrus ) then
20244: LD_EXP 3
20248: PPUSH
20249: CALL_OW 302
20253: IFFALSE 20273
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20255: LD_EXP 3
20259: PPUSH
20260: LD_EXP 44
20264: PUSH
20265: LD_STRING Cyrus
20267: STR
20268: PPUSH
20269: CALL_OW 38
// if IsOK ( Lisa ) then
20273: LD_EXP 4
20277: PPUSH
20278: CALL_OW 302
20282: IFFALSE 20302
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20284: LD_EXP 4
20288: PPUSH
20289: LD_EXP 44
20293: PUSH
20294: LD_STRING Lisa
20296: STR
20297: PPUSH
20298: CALL_OW 38
// if IsOK ( Brown ) then
20302: LD_EXP 7
20306: PPUSH
20307: CALL_OW 302
20311: IFFALSE 20331
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20313: LD_EXP 7
20317: PPUSH
20318: LD_EXP 44
20322: PUSH
20323: LD_STRING Brown
20325: STR
20326: PPUSH
20327: CALL_OW 38
// if IsOK ( Donaldson ) then
20331: LD_EXP 13
20335: PPUSH
20336: CALL_OW 302
20340: IFFALSE 20360
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20342: LD_EXP 13
20346: PPUSH
20347: LD_EXP 44
20351: PUSH
20352: LD_STRING Donaldson
20354: STR
20355: PPUSH
20356: CALL_OW 38
// if IsOK ( Frank ) then
20360: LD_EXP 5
20364: PPUSH
20365: CALL_OW 302
20369: IFFALSE 20389
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20371: LD_EXP 5
20375: PPUSH
20376: LD_EXP 44
20380: PUSH
20381: LD_STRING Frank
20383: STR
20384: PPUSH
20385: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20389: LD_INT 50
20391: PUSH
20392: EMPTY
20393: LIST
20394: PUSH
20395: LD_INT 22
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 21
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: PPUSH
20420: CALL_OW 69
20424: PUSH
20425: LD_EXP 1
20429: PUSH
20430: LD_EXP 2
20434: PUSH
20435: LD_EXP 3
20439: PUSH
20440: LD_EXP 4
20444: PUSH
20445: LD_EXP 7
20449: PUSH
20450: LD_EXP 13
20454: PUSH
20455: LD_EXP 5
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: DIFF
20469: PPUSH
20470: LD_STRING 04_other_survivors
20472: PPUSH
20473: CALL_OW 38
// YouWin ;
20477: CALL_OW 103
// end ;
20481: LD_VAR 0 1
20485: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20486: LD_INT 0
20488: PPUSH
20489: PPUSH
20490: PPUSH
20491: PPUSH
// gammaBase = [ ] ;
20492: LD_ADDR_VAR 0 4
20496: PUSH
20497: EMPTY
20498: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
20499: LD_ADDR_VAR 0 5
20503: PUSH
20504: LD_VAR 0 1
20508: PPUSH
20509: LD_INT 22
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 21
20521: PUSH
20522: LD_INT 3
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PPUSH
20533: CALL_OW 70
20537: ST_TO_ADDR
// for i in buildings do
20538: LD_ADDR_VAR 0 3
20542: PUSH
20543: LD_VAR 0 5
20547: PUSH
20548: FOR_IN
20549: IFFALSE 20886
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20551: LD_VAR 0 3
20555: PPUSH
20556: CALL_OW 266
20560: PUSH
20561: LD_INT 6
20563: PUSH
20564: LD_INT 7
20566: PUSH
20567: LD_INT 8
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: LIST
20574: IN
20575: IFFALSE 20689
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20577: LD_ADDR_VAR 0 4
20581: PUSH
20582: LD_VAR 0 4
20586: PUSH
20587: LD_VAR 0 3
20591: PPUSH
20592: CALL_OW 266
20596: PUSH
20597: LD_VAR 0 3
20601: PPUSH
20602: CALL_OW 250
20606: PUSH
20607: LD_VAR 0 3
20611: PPUSH
20612: CALL_OW 251
20616: PUSH
20617: LD_VAR 0 3
20621: PPUSH
20622: CALL_OW 254
20626: PUSH
20627: LD_VAR 0 3
20631: PPUSH
20632: CALL_OW 267
20636: PUSH
20637: LD_VAR 0 3
20641: PPUSH
20642: CALL_OW 248
20646: PUSH
20647: LD_VAR 0 3
20651: PPUSH
20652: LD_INT 1
20654: PPUSH
20655: CALL_OW 268
20659: PUSH
20660: LD_VAR 0 3
20664: PPUSH
20665: LD_INT 2
20667: PPUSH
20668: CALL_OW 268
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: PUSH
20683: EMPTY
20684: LIST
20685: ADD
20686: ST_TO_ADDR
20687: GO 20884
// if GetBType ( i ) in [ b_bunker ] then
20689: LD_VAR 0 3
20693: PPUSH
20694: CALL_OW 266
20698: PUSH
20699: LD_INT 32
20701: PUSH
20702: EMPTY
20703: LIST
20704: IN
20705: IFFALSE 20802
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20707: LD_ADDR_VAR 0 4
20711: PUSH
20712: LD_VAR 0 4
20716: PUSH
20717: LD_VAR 0 3
20721: PPUSH
20722: CALL_OW 266
20726: PUSH
20727: LD_VAR 0 3
20731: PPUSH
20732: CALL_OW 250
20736: PUSH
20737: LD_VAR 0 3
20741: PPUSH
20742: CALL_OW 251
20746: PUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: CALL_OW 254
20756: PUSH
20757: LD_VAR 0 3
20761: PPUSH
20762: CALL_OW 267
20766: PUSH
20767: LD_VAR 0 3
20771: PPUSH
20772: CALL_OW 248
20776: PUSH
20777: LD_VAR 0 3
20781: PPUSH
20782: CALL_OW 269
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: PUSH
20796: EMPTY
20797: LIST
20798: ADD
20799: ST_TO_ADDR
20800: GO 20884
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20802: LD_ADDR_VAR 0 4
20806: PUSH
20807: LD_VAR 0 4
20811: PUSH
20812: LD_VAR 0 3
20816: PPUSH
20817: CALL_OW 266
20821: PUSH
20822: LD_VAR 0 3
20826: PPUSH
20827: CALL_OW 250
20831: PUSH
20832: LD_VAR 0 3
20836: PPUSH
20837: CALL_OW 251
20841: PUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: CALL_OW 254
20851: PUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: CALL_OW 267
20861: PUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: CALL_OW 248
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: PUSH
20880: EMPTY
20881: LIST
20882: ADD
20883: ST_TO_ADDR
// end ;
20884: GO 20548
20886: POP
20887: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20888: LD_VAR 0 4
20892: PPUSH
20893: LD_STRING GammaBase
20895: PPUSH
20896: CALL_OW 39
// end ; end_of_file
20900: LD_VAR 0 2
20904: RET
// every 1 1$15 do
20905: GO 20907
20907: DISABLE
// begin if supply <= 13 and supply > 7 then
20908: LD_EXP 36
20912: PUSH
20913: LD_INT 13
20915: LESSEQUAL
20916: PUSH
20917: LD_EXP 36
20921: PUSH
20922: LD_INT 7
20924: GREATER
20925: AND
20926: IFFALSE 20949
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20928: LD_INT 3
20930: PPUSH
20931: LD_INT 5
20933: PPUSH
20934: CALL_OW 12
20938: PPUSH
20939: LD_INT 18
20941: PPUSH
20942: LD_INT 1
20944: PPUSH
20945: CALL_OW 55
// if supply <= 7 and supply > 4 then
20949: LD_EXP 36
20953: PUSH
20954: LD_INT 7
20956: LESSEQUAL
20957: PUSH
20958: LD_EXP 36
20962: PUSH
20963: LD_INT 4
20965: GREATER
20966: AND
20967: IFFALSE 20990
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20969: LD_INT 3
20971: PPUSH
20972: LD_INT 5
20974: PPUSH
20975: CALL_OW 12
20979: PPUSH
20980: LD_INT 19
20982: PPUSH
20983: LD_INT 1
20985: PPUSH
20986: CALL_OW 55
// if supply <= 4 and supply > 0 then
20990: LD_EXP 36
20994: PUSH
20995: LD_INT 4
20997: LESSEQUAL
20998: PUSH
20999: LD_EXP 36
21003: PUSH
21004: LD_INT 0
21006: GREATER
21007: AND
21008: IFFALSE 21031
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
21010: LD_INT 3
21012: PPUSH
21013: LD_INT 5
21015: PPUSH
21016: CALL_OW 12
21020: PPUSH
21021: LD_INT 20
21023: PPUSH
21024: LD_INT 1
21026: PPUSH
21027: CALL_OW 55
// if supply > 0 then
21031: LD_EXP 36
21035: PUSH
21036: LD_INT 0
21038: GREATER
21039: IFFALSE 21056
// begin supply = supply - 1 ;
21041: LD_ADDR_EXP 36
21045: PUSH
21046: LD_EXP 36
21050: PUSH
21051: LD_INT 1
21053: MINUS
21054: ST_TO_ADDR
// enable ;
21055: ENABLE
// end ; end ;
21056: END
