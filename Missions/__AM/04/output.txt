// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4283 0 0
// PrepareRussianBase ;
 241: CALL 2582 0 0
// PrepareRussianCommander ;
 245: CALL 2533 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3818 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3818 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3818 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3818 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3818 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3818 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3818 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3818 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3818 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3818 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3818 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3818 0 2
 767: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 768: LD_STRING 03_Frank
 770: PPUSH
 771: CALL_OW 28
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 823
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING 03_Frank
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 3818 0 2
 796: ST_TO_ADDR
// if Frank = 0 then
 797: LD_EXP 5
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: IFFALSE 823
// Frank = PrepareUnit ( Frank , false ) ;
 807: LD_ADDR_EXP 5
 811: PUSH
 812: LD_STRING Frank
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL 3818 0 2
 822: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 32
 830: PPUSH
 831: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 835: LD_EXP 7
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 850: LD_EXP 7
 854: PPUSH
 855: LD_INT 32
 857: PPUSH
 858: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 862: LD_EXP 8
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 877: LD_EXP 9
 881: PPUSH
 882: LD_INT 2
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 892: LD_EXP 12
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 907: LD_EXP 10
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 922: LD_EXP 11
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 937: LD_EXP 4
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// if Lisa = false then
 952: LD_EXP 4
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 977
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 962: LD_EXP 2
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 49
// if Lisa = false and Bobby = false then
 977: LD_EXP 4
 981: PUSH
 982: LD_INT 0
 984: EQUAL
 985: PUSH
 986: LD_EXP 2
 990: PUSH
 991: LD_INT 0
 993: EQUAL
 994: AND
 995: IFFALSE 1012
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 997: LD_EXP 3
1001: PPUSH
1002: LD_INT 2
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 0
1019: EQUAL
1020: PUSH
1021: LD_EXP 2
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: PUSH
1031: LD_EXP 3
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1057
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
1066: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1067: LD_EXP 13
1071: PPUSH
1072: LD_INT 10
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1082: LD_EXP 5
1086: PPUSH
1087: LD_INT 10
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// uc_nation = 1 ;
1097: LD_ADDR_OWVAR 21
1101: PUSH
1102: LD_INT 1
1104: ST_TO_ADDR
// uc_side = 4 ;
1105: LD_ADDR_OWVAR 20
1109: PUSH
1110: LD_INT 4
1112: ST_TO_ADDR
// hc_class := 3 ;
1113: LD_ADDR_OWVAR 28
1117: PUSH
1118: LD_INT 3
1120: ST_TO_ADDR
// hc_sex := sex_male ;
1121: LD_ADDR_OWVAR 27
1125: PUSH
1126: LD_INT 1
1128: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1129: LD_ADDR_OWVAR 33
1133: PUSH
1134: LD_STRING SecondCharsGal
1136: ST_TO_ADDR
// hc_face_number := 53 ;
1137: LD_ADDR_OWVAR 34
1141: PUSH
1142: LD_INT 53
1144: ST_TO_ADDR
// hc_name := Freddie Warner ;
1145: LD_ADDR_OWVAR 26
1149: PUSH
1150: LD_STRING Freddie Warner
1152: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1153: LD_ADDR_OWVAR 29
1157: PUSH
1158: LD_INT 8
1160: PUSH
1161: LD_INT 11
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1168: LD_ADDR_OWVAR 30
1172: PUSH
1173: LD_INT 0
1175: PUSH
1176: LD_INT 0
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 0
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1191: LD_ADDR_OWVAR 31
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 0
1201: PUSH
1202: LD_INT 3
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// un = CreateHuman ;
1214: LD_ADDR_VAR 0 3
1218: PUSH
1219: CALL_OW 44
1223: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_INT 10
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 49
// hc_class := 1 ;
1239: LD_ADDR_OWVAR 28
1243: PUSH
1244: LD_INT 1
1246: ST_TO_ADDR
// hc_sex := sex_male ;
1247: LD_ADDR_OWVAR 27
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1255: LD_ADDR_OWVAR 33
1259: PUSH
1260: LD_STRING SecondCharsGal
1262: ST_TO_ADDR
// hc_face_number := 56 ;
1263: LD_ADDR_OWVAR 34
1267: PUSH
1268: LD_INT 56
1270: ST_TO_ADDR
// hc_name := Mel Brennan ;
1271: LD_ADDR_OWVAR 26
1275: PUSH
1276: LD_STRING Mel Brennan
1278: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1279: LD_ADDR_OWVAR 29
1283: PUSH
1284: LD_INT 12
1286: PUSH
1287: LD_INT 11
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1294: LD_ADDR_OWVAR 30
1298: PUSH
1299: LD_INT 1
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 0
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1317: LD_ADDR_OWVAR 31
1321: PUSH
1322: LD_INT 2
1324: PUSH
1325: LD_INT 1
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: LD_INT 0
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: ST_TO_ADDR
// un = CreateHuman ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1350: LD_VAR 0 3
1354: PPUSH
1355: LD_INT 10
1357: PPUSH
1358: LD_INT 0
1360: PPUSH
1361: CALL_OW 49
// hc_class := 1 ;
1365: LD_ADDR_OWVAR 28
1369: PUSH
1370: LD_INT 1
1372: ST_TO_ADDR
// hc_sex := sex_male ;
1373: LD_ADDR_OWVAR 27
1377: PUSH
1378: LD_INT 1
1380: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1381: LD_ADDR_OWVAR 33
1385: PUSH
1386: LD_STRING AmGalRemake
1388: ST_TO_ADDR
// hc_face_number := 5 ;
1389: LD_ADDR_OWVAR 34
1393: PUSH
1394: LD_INT 5
1396: ST_TO_ADDR
// hc_name := Bob Joplin ;
1397: LD_ADDR_OWVAR 26
1401: PUSH
1402: LD_STRING Bob Joplin
1404: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1405: LD_ADDR_OWVAR 29
1409: PUSH
1410: LD_INT 10
1412: PUSH
1413: LD_INT 11
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1420: LD_ADDR_OWVAR 30
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1443: LD_ADDR_OWVAR 31
1447: PUSH
1448: LD_INT 3
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: ST_TO_ADDR
// un = CreateHuman ;
1466: LD_ADDR_VAR 0 3
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1476: LD_VAR 0 3
1480: PPUSH
1481: LD_INT 10
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// hc_class := 3 ;
1491: LD_ADDR_OWVAR 28
1495: PUSH
1496: LD_INT 3
1498: ST_TO_ADDR
// hc_sex := sex_female ;
1499: LD_ADDR_OWVAR 27
1503: PUSH
1504: LD_INT 2
1506: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1507: LD_ADDR_OWVAR 33
1511: PUSH
1512: LD_STRING AmGalRemake
1514: ST_TO_ADDR
// hc_face_number := 8 ;
1515: LD_ADDR_OWVAR 34
1519: PUSH
1520: LD_INT 8
1522: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1523: LD_ADDR_OWVAR 26
1527: PUSH
1528: LD_STRING Elizabeth Whitney
1530: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1531: LD_ADDR_OWVAR 29
1535: PUSH
1536: LD_INT 9
1538: PUSH
1539: LD_INT 11
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1546: LD_ADDR_OWVAR 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: LD_INT 2
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1569: LD_ADDR_OWVAR 31
1573: PUSH
1574: LD_INT 2
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 4
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// un = CreateHuman ;
1592: LD_ADDR_VAR 0 3
1596: PUSH
1597: CALL_OW 44
1601: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1602: LD_VAR 0 3
1606: PPUSH
1607: LD_INT 10
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL_OW 49
// InitHc ;
1617: CALL_OW 19
// end ;
1621: LD_VAR 0 1
1625: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1626: LD_INT 0
1628: PPUSH
1629: PPUSH
1630: PPUSH
// uc_nation = 1 ;
1631: LD_ADDR_OWVAR 21
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// uc_side = 1 ;
1639: LD_ADDR_OWVAR 20
1643: PUSH
1644: LD_INT 1
1646: ST_TO_ADDR
// hc_class := 1 ;
1647: LD_ADDR_OWVAR 28
1651: PUSH
1652: LD_INT 1
1654: ST_TO_ADDR
// hc_sex := sex_male ;
1655: LD_ADDR_OWVAR 27
1659: PUSH
1660: LD_INT 1
1662: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1663: LD_ADDR_OWVAR 33
1667: PUSH
1668: LD_STRING SecondCharsGal
1670: ST_TO_ADDR
// hc_face_number := 59 ;
1671: LD_ADDR_OWVAR 34
1675: PUSH
1676: LD_INT 59
1678: ST_TO_ADDR
// hc_name := Max Gray ;
1679: LD_ADDR_OWVAR 26
1683: PUSH
1684: LD_STRING Max Gray
1686: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1687: LD_ADDR_OWVAR 29
1691: PUSH
1692: LD_INT 9
1694: PUSH
1695: LD_INT 11
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1702: LD_ADDR_OWVAR 30
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: LD_INT 0
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1725: LD_ADDR_OWVAR 31
1729: PUSH
1730: LD_INT 2
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: ST_TO_ADDR
// un = CreateHuman ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: CALL_OW 44
1757: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1758: LD_VAR 0 4
1762: PPUSH
1763: LD_INT 11
1765: PPUSH
1766: LD_INT 0
1768: PPUSH
1769: CALL_OW 49
// hc_class := 1 ;
1773: LD_ADDR_OWVAR 28
1777: PUSH
1778: LD_INT 1
1780: ST_TO_ADDR
// hc_sex := sex_male ;
1781: LD_ADDR_OWVAR 27
1785: PUSH
1786: LD_INT 1
1788: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1789: LD_ADDR_OWVAR 33
1793: PUSH
1794: LD_STRING SecondCharsGal
1796: ST_TO_ADDR
// hc_face_number := 54 ;
1797: LD_ADDR_OWVAR 34
1801: PUSH
1802: LD_INT 54
1804: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1805: LD_ADDR_OWVAR 26
1809: PUSH
1810: LD_STRING Luigi Ghbellin
1812: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1813: LD_ADDR_OWVAR 29
1817: PUSH
1818: LD_INT 11
1820: PUSH
1821: LD_INT 11
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1828: LD_ADDR_OWVAR 30
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1851: LD_ADDR_OWVAR 31
1855: PUSH
1856: LD_INT 1
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: LD_INT 1
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: ST_TO_ADDR
// un = CreateHuman ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: CALL_OW 44
1883: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 11
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 49
// hc_class := 3 ;
1899: LD_ADDR_OWVAR 28
1903: PUSH
1904: LD_INT 3
1906: ST_TO_ADDR
// hc_sex := sex_male ;
1907: LD_ADDR_OWVAR 27
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1915: LD_ADDR_OWVAR 33
1919: PUSH
1920: LD_STRING AmGalRemake
1922: ST_TO_ADDR
// hc_face_number := 6 ;
1923: LD_ADDR_OWVAR 34
1927: PUSH
1928: LD_INT 6
1930: ST_TO_ADDR
// hc_name := Leon Carter ;
1931: LD_ADDR_OWVAR 26
1935: PUSH
1936: LD_STRING Leon Carter
1938: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1939: LD_ADDR_OWVAR 29
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: LD_INT 9
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1954: LD_ADDR_OWVAR 30
1958: PUSH
1959: LD_INT 0
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 1
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1977: LD_ADDR_OWVAR 31
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: ST_TO_ADDR
// un = CreateHuman ;
2000: LD_ADDR_VAR 0 4
2004: PUSH
2005: CALL_OW 44
2009: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2010: LD_VAR 0 4
2014: PPUSH
2015: LD_INT 11
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// if count = 4 then
2025: LD_VAR 0 1
2029: PUSH
2030: LD_INT 4
2032: EQUAL
2033: IFFALSE 2161
// begin hc_class := 1 ;
2035: LD_ADDR_OWVAR 28
2039: PUSH
2040: LD_INT 1
2042: ST_TO_ADDR
// hc_sex := sex_male ;
2043: LD_ADDR_OWVAR 27
2047: PUSH
2048: LD_INT 1
2050: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2051: LD_ADDR_OWVAR 33
2055: PUSH
2056: LD_STRING SecondCharsGal
2058: ST_TO_ADDR
// hc_face_number := 34 ;
2059: LD_ADDR_OWVAR 34
2063: PUSH
2064: LD_INT 34
2066: ST_TO_ADDR
// hc_name := Ian Hill ;
2067: LD_ADDR_OWVAR 26
2071: PUSH
2072: LD_STRING Ian Hill
2074: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2075: LD_ADDR_OWVAR 29
2079: PUSH
2080: LD_INT 10
2082: PUSH
2083: LD_INT 12
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2090: LD_ADDR_OWVAR 30
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 0
2100: PUSH
2101: LD_INT 1
2103: PUSH
2104: LD_INT 0
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2113: LD_ADDR_OWVAR 31
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: LD_INT 0
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: LD_INT 0
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: ST_TO_ADDR
// un = CreateHuman ;
2136: LD_ADDR_VAR 0 4
2140: PUSH
2141: CALL_OW 44
2145: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2146: LD_VAR 0 4
2150: PPUSH
2151: LD_INT 11
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 49
// end ; if count = 5 then
2161: LD_VAR 0 1
2165: PUSH
2166: LD_INT 5
2168: EQUAL
2169: IFFALSE 2423
// begin hc_class := 1 ;
2171: LD_ADDR_OWVAR 28
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// hc_sex := sex_male ;
2179: LD_ADDR_OWVAR 27
2183: PUSH
2184: LD_INT 1
2186: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2187: LD_ADDR_OWVAR 33
2191: PUSH
2192: LD_STRING SecondCharsGal
2194: ST_TO_ADDR
// hc_face_number := 34 ;
2195: LD_ADDR_OWVAR 34
2199: PUSH
2200: LD_INT 34
2202: ST_TO_ADDR
// hc_name := Ian Hill ;
2203: LD_ADDR_OWVAR 26
2207: PUSH
2208: LD_STRING Ian Hill
2210: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2211: LD_ADDR_OWVAR 29
2215: PUSH
2216: LD_INT 10
2218: PUSH
2219: LD_INT 12
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2226: LD_ADDR_OWVAR 30
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 0
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2249: LD_ADDR_OWVAR 31
2253: PUSH
2254: LD_INT 2
2256: PUSH
2257: LD_INT 0
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: LD_INT 0
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: ST_TO_ADDR
// un = CreateHuman ;
2272: LD_ADDR_VAR 0 4
2276: PUSH
2277: CALL_OW 44
2281: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2282: LD_VAR 0 4
2286: PPUSH
2287: LD_INT 11
2289: PPUSH
2290: LD_INT 0
2292: PPUSH
2293: CALL_OW 49
// hc_class := 1 ;
2297: LD_ADDR_OWVAR 28
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// hc_sex := sex_female ;
2305: LD_ADDR_OWVAR 27
2309: PUSH
2310: LD_INT 2
2312: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING SecondCharsGal
2320: ST_TO_ADDR
// hc_face_number := 41 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 41
2328: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Kate Wadsworth
2336: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2337: LD_ADDR_OWVAR 29
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2352: LD_ADDR_OWVAR 30
2356: PUSH
2357: LD_INT 0
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 0
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2375: LD_ADDR_OWVAR 31
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// un = CreateHuman ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: CALL_OW 44
2407: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2408: LD_VAR 0 4
2412: PPUSH
2413: LD_INT 11
2415: PPUSH
2416: LD_INT 0
2418: PPUSH
2419: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2423: LD_INT 11
2425: PPUSH
2426: LD_INT 22
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 21
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 26
2448: PUSH
2449: LD_INT 1
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PPUSH
2461: CALL_OW 70
2465: PUSH
2466: LD_INT 1
2468: ARRAY
2469: PPUSH
2470: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2474: LD_INT 11
2476: PPUSH
2477: LD_INT 22
2479: PUSH
2480: LD_INT 1
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 21
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 26
2499: PUSH
2500: LD_INT 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PPUSH
2512: CALL_OW 70
2516: PUSH
2517: LD_INT 1
2519: ARRAY
2520: PPUSH
2521: LD_STRING D6-Sol3-1
2523: PPUSH
2524: CALL_OW 88
// end ; end_of_file
2528: LD_VAR 0 2
2532: RET
// export function PrepareRussianCommander ; begin
2533: LD_INT 0
2535: PPUSH
// uc_side = 3 ;
2536: LD_ADDR_OWVAR 20
2540: PUSH
2541: LD_INT 3
2543: ST_TO_ADDR
// uc_nation = 3 ;
2544: LD_ADDR_OWVAR 21
2548: PUSH
2549: LD_INT 3
2551: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2552: LD_ADDR_EXP 15
2556: PUSH
2557: LD_STRING Stolypin
2559: PPUSH
2560: CALL_OW 25
2564: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2565: LD_EXP 15
2569: PPUSH
2570: LD_INT 21
2572: PPUSH
2573: CALL_OW 52
// end ;
2577: LD_VAR 0 1
2581: RET
// export function PrepareRussianBase ; var i ; begin
2582: LD_INT 0
2584: PPUSH
2585: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 3
2591: PPUSH
2592: LD_INT 22
2594: PPUSH
2595: LD_EXP 16
2599: PPUSH
2600: LD_EXP 17
2604: PPUSH
2605: CALL_OW 12
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: LD_INT 2
2615: PPUSH
2616: CALL 3881 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2620: LD_INT 3
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 21
2628: PPUSH
2629: LD_EXP 16
2633: PPUSH
2634: LD_EXP 17
2638: PPUSH
2639: CALL_OW 12
2643: PPUSH
2644: LD_INT 2
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: CALL 3881 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 3
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_EXP 16
2667: PPUSH
2668: LD_EXP 17
2672: PPUSH
2673: CALL_OW 12
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: CALL 3881 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2688: LD_INT 3
2690: PPUSH
2691: LD_INT 3
2693: PPUSH
2694: LD_INT 24
2696: PPUSH
2697: LD_EXP 16
2701: PPUSH
2702: LD_EXP 17
2706: PPUSH
2707: CALL_OW 12
2711: PPUSH
2712: LD_INT 3
2714: PPUSH
2715: LD_INT 6
2717: PPUSH
2718: CALL 3881 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2722: LD_ADDR_VAR 0 2
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 30
2739: PUSH
2740: LD_INT 32
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: FOR_IN
2757: IFFALSE 2797
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2759: LD_INT 3
2761: PPUSH
2762: LD_INT 3
2764: PPUSH
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_EXP 16
2774: PPUSH
2775: LD_EXP 17
2779: PPUSH
2780: CALL_OW 12
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: CALL 3881 0 6
2795: GO 2756
2797: POP
2798: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: LD_INT 22
2806: PUSH
2807: LD_INT 3
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 30
2816: PUSH
2817: LD_INT 31
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PPUSH
2828: CALL_OW 69
2832: PUSH
2833: FOR_IN
2834: IFFALSE 2862
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2836: LD_EXP 16
2840: PPUSH
2841: LD_EXP 17
2845: PPUSH
2846: CALL_OW 12
2850: PPUSH
2851: LD_VAR 0 2
2855: PPUSH
2856: CALL 3991 0 2
2860: GO 2833
2862: POP
2863: POP
// end ;
2864: LD_VAR 0 1
2868: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2869: LD_INT 0
2871: PPUSH
2872: PPUSH
2873: PPUSH
2874: PPUSH
// uc_side = 6 ;
2875: LD_ADDR_OWVAR 20
2879: PUSH
2880: LD_INT 6
2882: ST_TO_ADDR
// uc_nation = 3 ;
2883: LD_ADDR_OWVAR 21
2887: PUSH
2888: LD_INT 3
2890: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2891: LD_ADDR_VAR 0 2
2895: PUSH
2896: DOUBLE
2897: LD_INT 1
2899: DEC
2900: ST_TO_ADDR
2901: LD_INT 1
2903: PUSH
2904: LD_INT 2
2906: PUSH
2907: LD_INT 1
2909: PPUSH
2910: LD_INT 2
2912: PPUSH
2913: CALL_OW 12
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_OWVAR 67
2927: ARRAY
2928: PUSH
2929: FOR_TO
2930: IFFALSE 3090
// begin vc_engine = 1 ;
2932: LD_ADDR_OWVAR 39
2936: PUSH
2937: LD_INT 1
2939: ST_TO_ADDR
// vc_control = 1 ;
2940: LD_ADDR_OWVAR 38
2944: PUSH
2945: LD_INT 1
2947: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2948: LD_ADDR_OWVAR 40
2952: PUSH
2953: LD_INT 42
2955: PUSH
2956: LD_INT 42
2958: PUSH
2959: LD_INT 43
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: PUSH
2967: LD_OWVAR 67
2971: ARRAY
2972: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2973: LD_ADDR_OWVAR 37
2977: PUSH
2978: LD_INT 21
2980: PUSH
2981: LD_INT 22
2983: PUSH
2984: LD_INT 22
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: PUSH
2992: LD_OWVAR 67
2996: ARRAY
2997: ST_TO_ADDR
// veh = CreateVehicle ;
2998: LD_ADDR_VAR 0 3
3002: PUSH
3003: CALL_OW 45
3007: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 3
3015: PPUSH
3016: LD_INT 0
3018: PPUSH
3019: CALL_OW 49
// hc_gallery =  ;
3023: LD_ADDR_OWVAR 33
3027: PUSH
3028: LD_STRING 
3030: ST_TO_ADDR
// hc_name =  ;
3031: LD_ADDR_OWVAR 26
3035: PUSH
3036: LD_STRING 
3038: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_EXP 16
3049: PPUSH
3050: LD_EXP 17
3054: PPUSH
3055: CALL_OW 12
3059: PPUSH
3060: CALL_OW 380
// un = CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_VAR 0 3
3083: PPUSH
3084: CALL_OW 52
// end ;
3088: GO 2929
3090: POP
3091: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3092: LD_INT 0
3094: PPUSH
3095: LD_INT 2
3097: PPUSH
3098: LD_EXP 16
3102: PPUSH
3103: LD_EXP 17
3107: PPUSH
3108: CALL_OW 12
3112: PUSH
3113: LD_INT 2
3115: PLUS
3116: PPUSH
3117: CALL_OW 380
// un = CreateHuman ;
3121: LD_ADDR_VAR 0 4
3125: PUSH
3126: CALL_OW 44
3130: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3131: LD_VAR 0 4
3135: PPUSH
3136: LD_INT 3
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3146: LD_INT 0
3148: PPUSH
3149: LD_INT 4
3151: PPUSH
3152: LD_EXP 16
3156: PPUSH
3157: LD_EXP 17
3161: PPUSH
3162: CALL_OW 12
3166: PUSH
3167: LD_INT 2
3169: PLUS
3170: PPUSH
3171: CALL_OW 380
// un = CreateHuman ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: CALL_OW 44
3184: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3185: LD_VAR 0 4
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: DOUBLE
3206: LD_INT 1
3208: DEC
3209: ST_TO_ADDR
3210: LD_INT 2
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_OWVAR 67
3228: ARRAY
3229: PUSH
3230: LD_INT 1
3232: PPUSH
3233: LD_INT 3
3235: PPUSH
3236: CALL_OW 12
3240: PLUS
3241: PUSH
3242: FOR_TO
3243: IFFALSE 3313
// begin hc_gallery =  ;
3245: LD_ADDR_OWVAR 33
3249: PUSH
3250: LD_STRING 
3252: ST_TO_ADDR
// hc_name =  ;
3253: LD_ADDR_OWVAR 26
3257: PUSH
3258: LD_STRING 
3260: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3261: LD_INT 0
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: LD_EXP 16
3271: PPUSH
3272: LD_EXP 17
3276: PPUSH
3277: CALL_OW 12
3281: PPUSH
3282: CALL_OW 380
// un = CreateHuman ;
3286: LD_ADDR_VAR 0 4
3290: PUSH
3291: CALL_OW 44
3295: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: CALL_OW 49
// end ;
3311: GO 3242
3313: POP
3314: POP
// vc_engine = 1 ;
3315: LD_ADDR_OWVAR 39
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// vc_control = 1 ;
3323: LD_ADDR_OWVAR 38
3327: PUSH
3328: LD_INT 1
3330: ST_TO_ADDR
// vc_weapon = 51 ;
3331: LD_ADDR_OWVAR 40
3335: PUSH
3336: LD_INT 51
3338: ST_TO_ADDR
// vc_chassis = 22 ;
3339: LD_ADDR_OWVAR 37
3343: PUSH
3344: LD_INT 22
3346: ST_TO_ADDR
// veh = CreateVehicle ;
3347: LD_ADDR_VAR 0 3
3351: PUSH
3352: CALL_OW 45
3356: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3357: LD_VAR 0 3
3361: PPUSH
3362: LD_INT 3
3364: PPUSH
3365: LD_INT 0
3367: PPUSH
3368: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3372: LD_VAR 0 3
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 100
3382: PPUSH
3383: CALL_OW 290
// hc_gallery =  ;
3387: LD_ADDR_OWVAR 33
3391: PUSH
3392: LD_STRING 
3394: ST_TO_ADDR
// hc_name =  ;
3395: LD_ADDR_OWVAR 26
3399: PUSH
3400: LD_STRING 
3402: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_EXP 16
3413: PPUSH
3414: LD_EXP 17
3418: PPUSH
3419: CALL_OW 12
3423: PPUSH
3424: CALL_OW 380
// un = CreateHuman ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: CALL_OW 44
3437: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3438: LD_VAR 0 4
3442: PPUSH
3443: LD_VAR 0 3
3447: PPUSH
3448: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: LD_INT 22
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 1
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: LD_INT 25
3475: PUSH
3476: LD_INT 2
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 25
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: PUSH
3518: FOR_IN
3519: IFFALSE 3538
// ComAgressiveMove ( i , 45 , 46 ) ;
3521: LD_VAR 0 2
3525: PPUSH
3526: LD_INT 45
3528: PPUSH
3529: LD_INT 46
3531: PPUSH
3532: CALL_OW 114
3536: GO 3518
3538: POP
3539: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3540: LD_ADDR_VAR 0 2
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 25
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 69
3573: PUSH
3574: FOR_IN
3575: IFFALSE 3606
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3577: LD_ADDR_EXP 21
3581: PUSH
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_INT 0
3589: PPUSH
3590: LD_INT 48
3592: PPUSH
3593: LD_INT 55
3595: PPUSH
3596: LD_INT 5
3598: PPUSH
3599: CALL_OW 145
3603: ST_TO_ADDR
3604: GO 3574
3606: POP
3607: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: LD_INT 22
3615: PUSH
3616: LD_INT 6
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: LD_INT 25
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: PUSH
3642: FOR_IN
3643: IFFALSE 3662
// ComMoveXY ( i , 39 , 55 ) ;
3645: LD_VAR 0 2
3649: PPUSH
3650: LD_INT 39
3652: PPUSH
3653: LD_INT 55
3655: PPUSH
3656: CALL_OW 111
3660: GO 3642
3662: POP
3663: POP
// end ;
3664: LD_VAR 0 1
3668: RET
// export function PrepareFirstAttack ; var i , un ; begin
3669: LD_INT 0
3671: PPUSH
3672: PPUSH
3673: PPUSH
// uc_side = 5 ;
3674: LD_ADDR_OWVAR 20
3678: PUSH
3679: LD_INT 5
3681: ST_TO_ADDR
// uc_nation = 3 ;
3682: LD_ADDR_OWVAR 21
3686: PUSH
3687: LD_INT 3
3689: ST_TO_ADDR
// for i := 1 to 4 do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_INT 4
3702: PUSH
3703: FOR_TO
3704: IFFALSE 3803
// begin hc_gallery =  ;
3706: LD_ADDR_OWVAR 33
3710: PUSH
3711: LD_STRING 
3713: ST_TO_ADDR
// hc_name =  ;
3714: LD_ADDR_OWVAR 26
3718: PUSH
3719: LD_STRING 
3721: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_EXP 16
3732: PPUSH
3733: LD_EXP 17
3737: PPUSH
3738: CALL_OW 12
3742: PPUSH
3743: CALL_OW 380
// un = CreateHuman ;
3747: LD_ADDR_VAR 0 3
3751: PUSH
3752: CALL_OW 44
3756: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3757: LD_VAR 0 3
3761: PPUSH
3762: LD_INT 4
3764: PPUSH
3765: LD_INT 0
3767: PPUSH
3768: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_EXP 1
3781: PPUSH
3782: CALL_OW 250
3786: PPUSH
3787: LD_EXP 1
3791: PPUSH
3792: CALL_OW 251
3796: PPUSH
3797: CALL_OW 114
// end ;
3801: GO 3703
3803: POP
3804: POP
// firstRussianAttack = 1 ;
3805: LD_ADDR_EXP 23
3809: PUSH
3810: LD_INT 1
3812: ST_TO_ADDR
// end ; end_of_file
3813: LD_VAR 0 1
3817: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// if exist_mode then
3822: LD_VAR 0 2
3826: IFFALSE 3851
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3828: LD_ADDR_VAR 0 4
3832: PUSH
3833: LD_EXP 45
3837: PUSH
3838: LD_VAR 0 1
3842: STR
3843: PPUSH
3844: CALL_OW 34
3848: ST_TO_ADDR
// end else
3849: GO 3866
// begin unit := NewCharacter ( ident ) ;
3851: LD_ADDR_VAR 0 4
3855: PUSH
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 25
3865: ST_TO_ADDR
// end ; result := unit ;
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: LD_VAR 0 4
3875: ST_TO_ADDR
// end ;
3876: LD_VAR 0 3
3880: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3881: LD_INT 0
3883: PPUSH
3884: PPUSH
3885: PPUSH
3886: PPUSH
// for i = 1 to count do
3887: LD_ADDR_VAR 0 8
3891: PUSH
3892: DOUBLE
3893: LD_INT 1
3895: DEC
3896: ST_TO_ADDR
3897: LD_VAR 0 6
3901: PUSH
3902: FOR_TO
3903: IFFALSE 3984
// begin uc_side = side ;
3905: LD_ADDR_OWVAR 20
3909: PUSH
3910: LD_VAR 0 1
3914: ST_TO_ADDR
// uc_nation = nation ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_VAR 0 2
3924: ST_TO_ADDR
// hc_gallery =  ;
3925: LD_ADDR_OWVAR 33
3929: PUSH
3930: LD_STRING 
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3941: LD_INT 0
3943: PPUSH
3944: LD_VAR 0 5
3948: PPUSH
3949: LD_VAR 0 4
3953: PPUSH
3954: CALL_OW 380
// un = CreateHuman ;
3958: LD_ADDR_VAR 0 10
3962: PUSH
3963: CALL_OW 44
3967: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3968: LD_VAR 0 10
3972: PPUSH
3973: LD_VAR 0 3
3977: PPUSH
3978: CALL_OW 52
// end ;
3982: GO 3902
3984: POP
3985: POP
// end ;
3986: LD_VAR 0 7
3990: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3991: LD_INT 0
3993: PPUSH
3994: PPUSH
3995: PPUSH
// uc_side := GetSide ( b ) ;
3996: LD_ADDR_OWVAR 20
4000: PUSH
4001: LD_VAR 0 2
4005: PPUSH
4006: CALL_OW 255
4010: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4011: LD_ADDR_OWVAR 21
4015: PUSH
4016: LD_VAR 0 2
4020: PPUSH
4021: CALL_OW 248
4025: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 380
// un = CreateHuman ;
4041: LD_ADDR_VAR 0 4
4045: PUSH
4046: CALL_OW 44
4050: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 2
4060: PPUSH
4061: CALL_OW 254
4065: PUSH
4066: LD_INT 3
4068: MINUS
4069: ST_TO_ADDR
// if dir < 0 then
4070: LD_VAR 0 5
4074: PUSH
4075: LD_INT 0
4077: LESS
4078: IFFALSE 4094
// dir := 6 + dir ;
4080: LD_ADDR_VAR 0 5
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: LD_VAR 0 5
4092: PLUS
4093: ST_TO_ADDR
// SetDir ( un , dir ) ;
4094: LD_VAR 0 4
4098: PPUSH
4099: LD_VAR 0 5
4103: PPUSH
4104: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4108: LD_VAR 0 4
4112: PPUSH
4113: LD_VAR 0 2
4117: PPUSH
4118: CALL_OW 52
// end ;
4122: LD_VAR 0 3
4126: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4127: LD_INT 0
4129: PPUSH
4130: PPUSH
4131: PPUSH
// rnd = rand ( 1 , characters ) ;
4132: LD_ADDR_VAR 0 6
4136: PUSH
4137: LD_INT 1
4139: PPUSH
4140: LD_VAR 0 1
4144: PPUSH
4145: CALL_OW 12
4149: ST_TO_ADDR
// for i = 1 to characters do
4150: LD_ADDR_VAR 0 5
4154: PUSH
4155: DOUBLE
4156: LD_INT 1
4158: DEC
4159: ST_TO_ADDR
4160: LD_VAR 0 1
4164: PUSH
4165: FOR_TO
4166: IFFALSE 4276
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4168: LD_VAR 0 5
4172: PUSH
4173: LD_VAR 0 6
4177: EQUAL
4178: PUSH
4179: LD_VAR 0 1
4183: PUSH
4184: LD_VAR 0 5
4188: ARRAY
4189: PPUSH
4190: CALL_OW 258
4194: PUSH
4195: LD_INT 1
4197: EQUAL
4198: AND
4199: IFFALSE 4221
// Say ( characters [ i ] , dialogMID ) ;
4201: LD_VAR 0 1
4205: PUSH
4206: LD_VAR 0 5
4210: ARRAY
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4221: LD_VAR 0 5
4225: PUSH
4226: LD_VAR 0 6
4230: EQUAL
4231: PUSH
4232: LD_VAR 0 1
4236: PUSH
4237: LD_VAR 0 5
4241: ARRAY
4242: PPUSH
4243: CALL_OW 258
4247: PUSH
4248: LD_INT 2
4250: EQUAL
4251: AND
4252: IFFALSE 4274
// Say ( characters [ i ] , dialogFID ) ;
4254: LD_VAR 0 1
4258: PUSH
4259: LD_VAR 0 5
4263: ARRAY
4264: PPUSH
4265: LD_VAR 0 3
4269: PPUSH
4270: CALL_OW 88
// end ;
4274: GO 4165
4276: POP
4277: POP
// end ;
4278: LD_VAR 0 4
4282: RET
// export function PrepareDifficulty ; var tmp ; begin
4283: LD_INT 0
4285: PPUSH
4286: PPUSH
// if Difficulty = 1 then
4287: LD_OWVAR 67
4291: PUSH
4292: LD_INT 1
4294: EQUAL
4295: IFFALSE 4313
// begin RuSoldMinLevel = 0 ;
4297: LD_ADDR_EXP 16
4301: PUSH
4302: LD_INT 0
4304: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4305: LD_ADDR_EXP 17
4309: PUSH
4310: LD_INT 2
4312: ST_TO_ADDR
// end ; if Difficulty = 2 then
4313: LD_OWVAR 67
4317: PUSH
4318: LD_INT 2
4320: EQUAL
4321: IFFALSE 4429
// begin RuSoldMinLevel = 1 ;
4323: LD_ADDR_EXP 16
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4331: LD_ADDR_EXP 17
4335: PUSH
4336: LD_INT 2
4338: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4339: LD_INT 14
4341: PPUSH
4342: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4346: LD_INT 23
4348: PPUSH
4349: CALL_OW 64
// uc_nation = 3 ;
4353: LD_ADDR_OWVAR 21
4357: PUSH
4358: LD_INT 3
4360: ST_TO_ADDR
// uc_side = 3 ;
4361: LD_ADDR_OWVAR 20
4365: PUSH
4366: LD_INT 3
4368: ST_TO_ADDR
// bc_level = 5 ;
4369: LD_ADDR_OWVAR 43
4373: PUSH
4374: LD_INT 5
4376: ST_TO_ADDR
// bc_type = 32 ;
4377: LD_ADDR_OWVAR 42
4381: PUSH
4382: LD_INT 32
4384: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4385: LD_ADDR_VAR 0 2
4389: PUSH
4390: LD_INT 76
4392: PPUSH
4393: LD_INT 91
4395: PPUSH
4396: LD_INT 2
4398: PPUSH
4399: CALL_OW 47
4403: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4404: LD_VAR 0 2
4408: PPUSH
4409: LD_INT 43
4411: PPUSH
4412: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4416: LD_INT 51
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: LD_INT 1
4424: PPUSH
4425: CALL_OW 322
// end ; if Difficulty = 3 then
4429: LD_OWVAR 67
4433: PUSH
4434: LD_INT 3
4436: EQUAL
4437: IFFALSE 4613
// begin RuSoldMinLevel = 1 ;
4439: LD_ADDR_EXP 16
4443: PUSH
4444: LD_INT 1
4446: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4447: LD_ADDR_EXP 17
4451: PUSH
4452: LD_INT 3
4454: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4455: LD_INT 13
4457: PPUSH
4458: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4462: LD_INT 14
4464: PPUSH
4465: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4469: LD_INT 26
4471: PPUSH
4472: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4476: LD_INT 23
4478: PPUSH
4479: CALL_OW 64
// uc_nation = 3 ;
4483: LD_ADDR_OWVAR 21
4487: PUSH
4488: LD_INT 3
4490: ST_TO_ADDR
// uc_side = 3 ;
4491: LD_ADDR_OWVAR 20
4495: PUSH
4496: LD_INT 3
4498: ST_TO_ADDR
// bc_level = 5 ;
4499: LD_ADDR_OWVAR 43
4503: PUSH
4504: LD_INT 5
4506: ST_TO_ADDR
// bc_type = 32 ;
4507: LD_ADDR_OWVAR 42
4511: PUSH
4512: LD_INT 32
4514: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_INT 76
4522: PPUSH
4523: LD_INT 91
4525: PPUSH
4526: LD_INT 2
4528: PPUSH
4529: CALL_OW 47
4533: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 44
4541: PPUSH
4542: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4546: LD_ADDR_VAR 0 2
4550: PUSH
4551: LD_INT 83
4553: PPUSH
4554: LD_INT 84
4556: PPUSH
4557: LD_INT 2
4559: PPUSH
4560: CALL_OW 47
4564: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4565: LD_VAR 0 2
4569: PPUSH
4570: LD_INT 43
4572: PPUSH
4573: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4577: LD_INT 51
4579: PPUSH
4580: LD_INT 3
4582: PPUSH
4583: LD_INT 1
4585: PPUSH
4586: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4590: LD_INT 52
4592: PPUSH
4593: LD_INT 3
4595: PPUSH
4596: LD_INT 1
4598: PPUSH
4599: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4603: LD_INT 25
4605: PPUSH
4606: LD_INT 44
4608: PPUSH
4609: CALL_OW 431
// end ; end ;
4613: LD_VAR 0 1
4617: RET
// export function EnergyDialog ; begin
4618: LD_INT 0
4620: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4621: LD_INT 46
4623: PPUSH
4624: LD_INT 1
4626: PPUSH
4627: CALL_OW 321
4631: PUSH
4632: LD_INT 1
4634: EQUAL
4635: PUSH
4636: LD_INT 35
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 321
4646: PUSH
4647: LD_INT 1
4649: EQUAL
4650: AND
4651: IFFALSE 4675
// begin Say ( JMM , D9c-JMM-1 ) ;
4653: LD_EXP 1
4657: PPUSH
4658: LD_STRING D9c-JMM-1
4660: PPUSH
4661: CALL_OW 88
// energyVDialog = 1 ;
4665: LD_ADDR_EXP 33
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4829
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4675: LD_INT 35
4677: PPUSH
4678: LD_INT 1
4680: PPUSH
4681: CALL_OW 321
4685: PUSH
4686: LD_INT 2
4688: EQUAL
4689: PUSH
4690: LD_EXP 33
4694: PUSH
4695: LD_INT 0
4697: EQUAL
4698: AND
4699: IFFALSE 4721
// begin Say ( JMM , D9c-JMM-1a ) ;
4701: LD_EXP 1
4705: PPUSH
4706: LD_STRING D9c-JMM-1a
4708: PPUSH
4709: CALL_OW 88
// energyVDialog = 1 ;
4713: LD_ADDR_EXP 33
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4721: LD_INT 46
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: CALL_OW 321
4731: PUSH
4732: LD_INT 2
4734: EQUAL
4735: PUSH
4736: LD_EXP 33
4740: PUSH
4741: LD_INT 0
4743: EQUAL
4744: AND
4745: IFFALSE 4767
// begin Say ( JMM , D9c-JMM-1b ) ;
4747: LD_EXP 1
4751: PPUSH
4752: LD_STRING D9c-JMM-1b
4754: PPUSH
4755: CALL_OW 88
// energyVDialog = 1 ;
4759: LD_ADDR_EXP 33
4763: PUSH
4764: LD_INT 1
4766: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4767: LD_INT 46
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 321
4777: PUSH
4778: LD_INT 2
4780: EQUAL
4781: PUSH
4782: LD_INT 21
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 321
4792: PUSH
4793: LD_INT 2
4795: EQUAL
4796: AND
4797: PUSH
4798: LD_EXP 33
4802: PUSH
4803: LD_INT 0
4805: EQUAL
4806: AND
4807: IFFALSE 4829
// begin Say ( JMM , D9c-JMM-1c ) ;
4809: LD_EXP 1
4813: PPUSH
4814: LD_STRING D9c-JMM-1c
4816: PPUSH
4817: CALL_OW 88
// energyVDialog = 1 ;
4821: LD_ADDR_EXP 33
4825: PUSH
4826: LD_INT 1
4828: ST_TO_ADDR
// end ; end ; end ;
4829: LD_VAR 0 1
4833: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4834: LD_INT 0
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4841: LD_VAR 0 1
4845: NOT
4846: PUSH
4847: LD_VAR 0 1
4851: PPUSH
4852: CALL_OW 256
4856: PUSH
4857: LD_INT 250
4859: LESS
4860: OR
4861: PUSH
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL_OW 314
4871: PUSH
4872: LD_VAR 0 1
4876: PPUSH
4877: CALL_OW 261
4881: PUSH
4882: LD_INT 20
4884: GREATER
4885: AND
4886: OR
4887: IFFALSE 4891
// exit ;
4889: GO 5256
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4891: LD_VAR 0 1
4895: PPUSH
4896: CALL_OW 261
4900: PUSH
4901: LD_INT 20
4903: LESS
4904: PUSH
4905: LD_VAR 0 1
4909: PPUSH
4910: CALL_OW 110
4914: PUSH
4915: LD_INT 21
4917: EQUAL
4918: NOT
4919: AND
4920: IFFALSE 4947
// begin ComStop ( bulldozer ) ;
4922: LD_VAR 0 1
4926: PPUSH
4927: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4931: LD_VAR 0 1
4935: PPUSH
4936: LD_INT 21
4938: PPUSH
4939: CALL_OW 109
// exit ;
4943: GO 5256
// end else
4945: GO 4974
// if GetFuel ( bulldozer ) > 20 then
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 261
4956: PUSH
4957: LD_INT 20
4959: GREATER
4960: IFFALSE 4974
// SetTag ( bulldozer , 0 ) ;
4962: LD_VAR 0 1
4966: PPUSH
4967: LD_INT 0
4969: PPUSH
4970: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4974: LD_ADDR_VAR 0 5
4978: PUSH
4979: LD_VAR 0 2
4983: PPUSH
4984: CALL_OW 353
4988: ST_TO_ADDR
// tmp := [ ] ;
4989: LD_ADDR_VAR 0 6
4993: PUSH
4994: EMPTY
4995: ST_TO_ADDR
// for i = 1 to list do
4996: LD_ADDR_VAR 0 4
5000: PUSH
5001: DOUBLE
5002: LD_INT 1
5004: DEC
5005: ST_TO_ADDR
5006: LD_VAR 0 5
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5110
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5014: LD_VAR 0 5
5018: PUSH
5019: LD_VAR 0 4
5023: ARRAY
5024: PUSH
5025: LD_INT 1
5027: ARRAY
5028: PPUSH
5029: LD_VAR 0 5
5033: PUSH
5034: LD_VAR 0 4
5038: ARRAY
5039: PUSH
5040: LD_INT 2
5042: ARRAY
5043: PPUSH
5044: CALL_OW 554
5048: IFFALSE 5108
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5050: LD_ADDR_VAR 0 6
5054: PUSH
5055: LD_VAR 0 6
5059: PPUSH
5060: LD_VAR 0 6
5064: PUSH
5065: LD_INT 1
5067: PLUS
5068: PPUSH
5069: LD_VAR 0 5
5073: PUSH
5074: LD_VAR 0 4
5078: ARRAY
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PUSH
5084: LD_VAR 0 5
5088: PUSH
5089: LD_VAR 0 4
5093: ARRAY
5094: PUSH
5095: LD_INT 2
5097: ARRAY
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PPUSH
5103: CALL_OW 1
5107: ST_TO_ADDR
// end ;
5108: GO 5011
5110: POP
5111: POP
// ComStop ( bulldozer ) ;
5112: LD_VAR 0 1
5116: PPUSH
5117: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_VAR 0 1
5130: PPUSH
5131: CALL_OW 250
5135: PUSH
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 251
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: ST_TO_ADDR
// for i = tmp downto 1 do
5150: LD_ADDR_VAR 0 4
5154: PUSH
5155: DOUBLE
5156: LD_VAR 0 6
5160: INC
5161: ST_TO_ADDR
5162: LD_INT 1
5164: PUSH
5165: FOR_DOWNTO
5166: IFFALSE 5254
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5168: LD_ADDR_VAR 0 7
5172: PUSH
5173: LD_VAR 0 7
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: PPUSH
5182: LD_VAR 0 7
5186: PUSH
5187: LD_INT 2
5189: ARRAY
5190: PPUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: CALL 5357 0 3
5200: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5201: LD_VAR 0 1
5205: PPUSH
5206: LD_VAR 0 7
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_VAR 0 7
5219: PUSH
5220: LD_INT 2
5222: ARRAY
5223: PPUSH
5224: CALL 5261 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5228: LD_ADDR_VAR 0 6
5232: PUSH
5233: LD_VAR 0 6
5237: PPUSH
5238: LD_VAR 0 7
5242: PUSH
5243: LD_INT 3
5245: ARRAY
5246: PPUSH
5247: CALL_OW 3
5251: ST_TO_ADDR
// end ;
5252: GO 5165
5254: POP
5255: POP
// end ;
5256: LD_VAR 0 3
5260: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5261: LD_INT 0
5263: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5264: LD_VAR 0 2
5268: PPUSH
5269: LD_VAR 0 3
5273: PPUSH
5274: CALL_OW 351
5278: PUSH
5279: LD_VAR 0 2
5283: PPUSH
5284: LD_VAR 0 3
5288: PPUSH
5289: CALL_OW 554
5293: AND
5294: PUSH
5295: LD_VAR 0 2
5299: PPUSH
5300: LD_VAR 0 3
5304: PPUSH
5305: CALL_OW 488
5309: AND
5310: PUSH
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: CALL_OW 428
5325: PUSH
5326: LD_INT 1
5328: NEG
5329: EQUAL
5330: AND
5331: IFFALSE 5352
// AddComMoveXY ( bulldozer , x , y ) ;
5333: LD_VAR 0 1
5337: PPUSH
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_VAR 0 3
5347: PPUSH
5348: CALL_OW 171
// end ;
5352: LD_VAR 0 4
5356: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5357: LD_INT 0
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
5363: PPUSH
5364: PPUSH
5365: PPUSH
// dist := 99999 ;
5366: LD_ADDR_VAR 0 6
5370: PUSH
5371: LD_INT 99999
5373: ST_TO_ADDR
// for i = 1 to list do
5374: LD_ADDR_VAR 0 5
5378: PUSH
5379: DOUBLE
5380: LD_INT 1
5382: DEC
5383: ST_TO_ADDR
5384: LD_VAR 0 3
5388: PUSH
5389: FOR_TO
5390: IFFALSE 5528
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5392: LD_ADDR_VAR 0 7
5396: PUSH
5397: LD_VAR 0 1
5401: PPUSH
5402: LD_VAR 0 2
5406: PPUSH
5407: LD_VAR 0 3
5411: PUSH
5412: LD_VAR 0 5
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PPUSH
5422: LD_VAR 0 3
5426: PUSH
5427: LD_VAR 0 5
5431: ARRAY
5432: PUSH
5433: LD_INT 2
5435: ARRAY
5436: PPUSH
5437: CALL_OW 298
5441: ST_TO_ADDR
// if d = 0 then
5442: LD_VAR 0 7
5446: PUSH
5447: LD_INT 0
5449: EQUAL
5450: IFFALSE 5454
// continue ;
5452: GO 5389
// if d < dist then
5454: LD_VAR 0 7
5458: PUSH
5459: LD_VAR 0 6
5463: LESS
5464: IFFALSE 5526
// begin _x := list [ i ] [ 1 ] ;
5466: LD_ADDR_VAR 0 8
5470: PUSH
5471: LD_VAR 0 3
5475: PUSH
5476: LD_VAR 0 5
5480: ARRAY
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5486: LD_ADDR_VAR 0 9
5490: PUSH
5491: LD_VAR 0 3
5495: PUSH
5496: LD_VAR 0 5
5500: ARRAY
5501: PUSH
5502: LD_INT 2
5504: ARRAY
5505: ST_TO_ADDR
// _i := i ;
5506: LD_ADDR_VAR 0 10
5510: PUSH
5511: LD_VAR 0 5
5515: ST_TO_ADDR
// dist := d ;
5516: LD_ADDR_VAR 0 6
5520: PUSH
5521: LD_VAR 0 7
5525: ST_TO_ADDR
// end ; end ;
5526: GO 5389
5528: POP
5529: POP
// result := [ _x , _y , _i , dist ] ;
5530: LD_ADDR_VAR 0 4
5534: PUSH
5535: LD_VAR 0 8
5539: PUSH
5540: LD_VAR 0 9
5544: PUSH
5545: LD_VAR 0 10
5549: PUSH
5550: LD_VAR 0 6
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: ST_TO_ADDR
// end ;
5561: LD_VAR 0 4
5565: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
5570: PPUSH
5571: PPUSH
// for i = 1 to 72 do
5572: LD_ADDR_VAR 0 5
5576: PUSH
5577: DOUBLE
5578: LD_INT 1
5580: DEC
5581: ST_TO_ADDR
5582: LD_INT 72
5584: PUSH
5585: FOR_TO
5586: IFFALSE 5644
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5588: LD_VAR 0 5
5592: PPUSH
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 321
5602: PUSH
5603: LD_INT 1
5605: EQUAL
5606: PUSH
5607: LD_VAR 0 5
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 482
5621: PUSH
5622: LD_INT 1
5624: EQUAL
5625: AND
5626: IFFALSE 5642
// AddComResearch ( lab , i ) ;
5628: LD_VAR 0 2
5632: PPUSH
5633: LD_VAR 0 5
5637: PPUSH
5638: CALL_OW 184
5642: GO 5585
5644: POP
5645: POP
// end ;
5646: LD_VAR 0 4
5650: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5651: LD_INT 0
5653: PPUSH
5654: PPUSH
5655: PPUSH
5656: PPUSH
5657: PPUSH
5658: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5659: LD_ADDR_VAR 0 7
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: CALL_OW 313
5673: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5674: LD_ADDR_VAR 0 8
5678: PUSH
5679: LD_VAR 0 3
5683: PPUSH
5684: LD_INT 22
5686: PUSH
5687: LD_VAR 0 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PUSH
5696: LD_INT 25
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 24
5708: PUSH
5709: LD_INT 750
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 3
5718: PUSH
5719: LD_INT 54
5721: PUSH
5722: EMPTY
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: PPUSH
5735: CALL_OW 70
5739: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5740: LD_ADDR_VAR 0 5
5744: PUSH
5745: LD_VAR 0 3
5749: PPUSH
5750: LD_INT 22
5752: PUSH
5753: LD_VAR 0 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: LD_INT 1000
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: EMPTY
5795: LIST
5796: PPUSH
5797: CALL_OW 70
5801: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5802: LD_VAR 0 5
5806: NOT
5807: PUSH
5808: LD_INT 22
5810: PUSH
5811: LD_VAR 0 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 25
5822: PUSH
5823: LD_INT 2
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 24
5832: PUSH
5833: LD_INT 250
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 69
5849: NOT
5850: AND
5851: IFFALSE 5855
// exit ;
5853: GO 5967
// if buildings_list > 0 and engineerOkInside then
5855: LD_VAR 0 5
5859: PUSH
5860: LD_INT 0
5862: GREATER
5863: PUSH
5864: LD_VAR 0 7
5868: AND
5869: IFFALSE 5895
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
5871: LD_VAR 0 7
5875: PPUSH
5876: LD_INT 25
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 72
5890: PPUSH
5891: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5895: LD_VAR 0 5
5899: PUSH
5900: LD_INT 0
5902: GREATER
5903: PUSH
5904: LD_VAR 0 8
5908: PUSH
5909: LD_INT 0
5911: GREATER
5912: AND
5913: IFFALSE 5933
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5915: LD_VAR 0 8
5919: PPUSH
5920: LD_VAR 0 5
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
5933: LD_VAR 0 5
5937: PUSH
5938: LD_INT 0
5940: EQUAL
5941: PUSH
5942: LD_VAR 0 8
5946: PUSH
5947: LD_INT 0
5949: GREATER
5950: AND
5951: IFFALSE 5967
// ComEnterUnit ( engineerOkOutside , building ) ;
5953: LD_VAR 0 8
5957: PPUSH
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 120
// end ;
5967: LD_VAR 0 4
5971: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
5972: LD_INT 0
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
5979: PPUSH
5980: PPUSH
5981: PPUSH
5982: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
5983: LD_ADDR_VAR 0 6
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_VAR 0 1
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: LD_INT 25
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: LD_INT 23
6012: PUSH
6013: LD_INT 2
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 24
6022: PUSH
6023: LD_INT 251
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PPUSH
6036: CALL_OW 69
6040: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6041: LD_ADDR_VAR 0 7
6045: PUSH
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_INT 22
6053: PUSH
6054: LD_VAR 0 1
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 23
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 4
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 50
6085: PUSH
6086: EMPTY
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PPUSH
6095: CALL_OW 70
6099: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6100: LD_ADDR_VAR 0 10
6104: PUSH
6105: LD_VAR 0 3
6109: PPUSH
6110: LD_INT 22
6112: PUSH
6113: LD_VAR 0 1
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 21
6124: PUSH
6125: LD_INT 1
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 3
6134: PUSH
6135: LD_INT 25
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: LD_INT 24
6154: PUSH
6155: LD_INT 750
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: PPUSH
6172: CALL_OW 70
6176: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6177: LD_ADDR_VAR 0 11
6181: PUSH
6182: LD_VAR 0 2
6186: PPUSH
6187: LD_INT 22
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 21
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 3
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 24
6231: PUSH
6232: LD_INT 1000
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: PPUSH
6249: CALL_OW 70
6253: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6254: LD_VAR 0 10
6258: NOT
6259: PUSH
6260: LD_VAR 0 11
6264: NOT
6265: AND
6266: PUSH
6267: LD_VAR 0 6
6271: NOT
6272: AND
6273: IFFALSE 6277
// exit ;
6275: GO 6511
// if damageUnits > 0 and sci_list > 0 then
6277: LD_VAR 0 10
6281: PUSH
6282: LD_INT 0
6284: GREATER
6285: PUSH
6286: LD_VAR 0 6
6290: PUSH
6291: LD_INT 0
6293: GREATER
6294: AND
6295: IFFALSE 6311
// ComMoveToArea ( damageUnits , healArea ) ;
6297: LD_VAR 0 10
6301: PPUSH
6302: LD_VAR 0 2
6306: PPUSH
6307: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6311: LD_VAR 0 11
6315: PUSH
6316: LD_INT 0
6318: GREATER
6319: PUSH
6320: LD_VAR 0 6
6324: PUSH
6325: LD_INT 0
6327: GREATER
6328: AND
6329: IFFALSE 6340
// ComExitBuilding ( sci_list ) ;
6331: LD_VAR 0 6
6335: PPUSH
6336: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6340: LD_VAR 0 11
6344: PUSH
6345: LD_INT 0
6347: GREATER
6348: PUSH
6349: LD_VAR 0 7
6353: PUSH
6354: LD_INT 0
6356: GREATER
6357: AND
6358: IFFALSE 6378
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6360: LD_VAR 0 7
6364: PPUSH
6365: LD_VAR 0 11
6369: PUSH
6370: LD_INT 1
6372: ARRAY
6373: PPUSH
6374: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6378: LD_VAR 0 10
6382: PUSH
6383: LD_INT 0
6385: EQUAL
6386: PUSH
6387: LD_VAR 0 11
6391: PUSH
6392: LD_INT 0
6394: EQUAL
6395: AND
6396: PUSH
6397: LD_VAR 0 7
6401: PUSH
6402: LD_INT 0
6404: GREATER
6405: AND
6406: IFFALSE 6511
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6408: LD_ADDR_VAR 0 12
6412: PUSH
6413: LD_INT 22
6415: PUSH
6416: LD_VAR 0 1
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 21
6427: PUSH
6428: LD_INT 3
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 30
6437: PUSH
6438: LD_INT 8
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: LIST
6449: PPUSH
6450: CALL_OW 69
6454: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6455: LD_ADDR_VAR 0 13
6459: PUSH
6460: LD_INT 1
6462: PPUSH
6463: LD_VAR 0 12
6467: PPUSH
6468: CALL_OW 12
6472: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6473: LD_VAR 0 7
6477: PPUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 60
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 72
6495: PPUSH
6496: LD_VAR 0 12
6500: PUSH
6501: LD_VAR 0 13
6505: ARRAY
6506: PPUSH
6507: CALL_OW 120
// end ; end ;
6511: LD_VAR 0 5
6515: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6516: LD_INT 0
6518: PPUSH
6519: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6520: LD_INT 22
6522: PUSH
6523: LD_VAR 0 1
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: LD_INT 21
6534: PUSH
6535: LD_INT 2
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PPUSH
6546: CALL_OW 69
6550: PUSH
6551: LD_VAR 0 3
6555: LESSEQUAL
6556: IFFALSE 6623
// for i = 1 to vehCount do
6558: LD_ADDR_VAR 0 9
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 3
6572: PUSH
6573: FOR_TO
6574: IFFALSE 6621
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6576: LD_VAR 0 2
6580: PPUSH
6581: LD_VAR 0 7
6585: PPUSH
6586: LD_VAR 0 5
6590: PPUSH
6591: LD_VAR 0 6
6595: PPUSH
6596: LD_VAR 0 4
6600: PUSH
6601: LD_INT 1
6603: PPUSH
6604: LD_VAR 0 4
6608: PPUSH
6609: CALL_OW 12
6613: ARRAY
6614: PPUSH
6615: CALL_OW 185
6619: GO 6573
6621: POP
6622: POP
// end ;
6623: LD_VAR 0 8
6627: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6628: LD_INT 0
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
6636: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6637: LD_ADDR_VAR 0 8
6641: PUSH
6642: LD_INT 22
6644: PUSH
6645: LD_VAR 0 1
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 21
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 24
6666: PUSH
6667: LD_INT 650
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 69
6683: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6684: LD_INT 22
6686: PUSH
6687: LD_VAR 0 1
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 21
6698: PUSH
6699: LD_INT 2
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 24
6708: PUSH
6709: LD_INT 1000
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: LD_INT 4
6731: PUSH
6732: LD_INT 5
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: PUSH
6740: LD_OWVAR 67
6744: ARRAY
6745: GREATEREQUAL
6746: IFFALSE 7203
// repeat wait ( 0 0$1 ) ;
6748: LD_INT 35
6750: PPUSH
6751: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6755: LD_ADDR_VAR 0 8
6759: PUSH
6760: LD_INT 22
6762: PUSH
6763: LD_VAR 0 1
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 21
6774: PUSH
6775: LD_INT 2
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 24
6784: PUSH
6785: LD_INT 650
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6802: LD_INT 22
6804: PUSH
6805: LD_VAR 0 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 95
6816: PUSH
6817: LD_VAR 0 2
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PPUSH
6830: CALL_OW 69
6834: NOT
6835: PUSH
6836: LD_VAR 0 11
6840: PUSH
6841: LD_INT 0
6843: EQUAL
6844: AND
6845: IFFALSE 6900
// for i := 1 to wayX do
6847: LD_ADDR_VAR 0 6
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 3
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6898
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6865: LD_VAR 0 8
6869: PPUSH
6870: LD_VAR 0 3
6874: PUSH
6875: LD_VAR 0 6
6879: ARRAY
6880: PPUSH
6881: LD_VAR 0 4
6885: PUSH
6886: LD_VAR 0 6
6890: ARRAY
6891: PPUSH
6892: CALL_OW 174
6896: GO 6862
6898: POP
6899: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6900: LD_INT 22
6902: PUSH
6903: LD_VAR 0 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 95
6914: PUSH
6915: LD_VAR 0 2
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PPUSH
6928: CALL_OW 69
6932: IFFALSE 7156
// begin seeEnemy = 1 ;
6934: LD_ADDR_VAR 0 11
6938: PUSH
6939: LD_INT 1
6941: ST_TO_ADDR
// for j in vehiclesOK do
6942: LD_ADDR_VAR 0 7
6946: PUSH
6947: LD_VAR 0 8
6951: PUSH
6952: FOR_IN
6953: IFFALSE 7154
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6955: LD_ADDR_VAR 0 9
6959: PUSH
6960: LD_INT 81
6962: PUSH
6963: LD_VAR 0 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 101
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: PPUSH
6991: LD_VAR 0 7
6995: PPUSH
6996: CALL_OW 74
7000: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7001: LD_ADDR_VAR 0 10
7005: PUSH
7006: LD_INT 81
7008: PUSH
7009: LD_VAR 0 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 101
7020: PUSH
7021: LD_INT 1
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: LD_INT 59
7033: PUSH
7034: EMPTY
7035: LIST
7036: PUSH
7037: LD_INT 21
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 21
7049: PUSH
7050: LD_INT 2
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: PPUSH
7071: CALL_OW 69
7075: PPUSH
7076: LD_VAR 0 7
7080: PPUSH
7081: CALL_OW 74
7085: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7086: LD_VAR 0 7
7090: PPUSH
7091: LD_VAR 0 9
7095: PPUSH
7096: CALL_OW 296
7100: PUSH
7101: LD_INT 8
7103: PLUS
7104: PUSH
7105: LD_VAR 0 7
7109: PPUSH
7110: LD_VAR 0 10
7114: PPUSH
7115: CALL_OW 296
7119: LESS
7120: IFFALSE 7138
// ComAttackUnit ( j , target1 ) else
7122: LD_VAR 0 7
7126: PPUSH
7127: LD_VAR 0 9
7131: PPUSH
7132: CALL_OW 115
7136: GO 7152
// ComAttackUnit ( j , target2 ) ;
7138: LD_VAR 0 7
7142: PPUSH
7143: LD_VAR 0 10
7147: PPUSH
7148: CALL_OW 115
// end ;
7152: GO 6952
7154: POP
7155: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7156: LD_INT 22
7158: PUSH
7159: LD_VAR 0 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 21
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 24
7180: PUSH
7181: LD_INT 1000
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 69
7197: PUSH
7198: LD_INT 0
7200: EQUAL
7201: IFFALSE 6748
// seeEnemy = 0 ;
7203: LD_ADDR_VAR 0 11
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// end ;
7211: LD_VAR 0 5
7215: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7216: LD_INT 0
7218: PPUSH
7219: PPUSH
7220: PPUSH
7221: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7222: LD_ADDR_VAR 0 8
7226: PUSH
7227: LD_INT 22
7229: PUSH
7230: LD_VAR 0 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 21
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: LD_INT 24
7254: PUSH
7255: LD_INT 650
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: ST_TO_ADDR
// if damageVehicles > 0 then
7276: LD_VAR 0 8
7280: PUSH
7281: LD_INT 0
7283: GREATER
7284: IFFALSE 7305
// ComMoveXY ( damageVehicles , repX , repY ) ;
7286: LD_VAR 0 8
7290: PPUSH
7291: LD_VAR 0 3
7295: PPUSH
7296: LD_VAR 0 4
7300: PPUSH
7301: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7305: LD_VAR 0 8
7309: PPUSH
7310: LD_INT 95
7312: PUSH
7313: LD_VAR 0 2
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: LD_INT 58
7327: PUSH
7328: EMPTY
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PPUSH
7339: CALL_OW 72
7343: PUSH
7344: LD_INT 0
7346: GREATER
7347: IFFALSE 7414
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7349: LD_ADDR_VAR 0 6
7353: PUSH
7354: LD_VAR 0 8
7358: PPUSH
7359: LD_INT 95
7361: PUSH
7362: LD_VAR 0 2
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: LD_INT 58
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PPUSH
7388: CALL_OW 72
7392: PUSH
7393: FOR_IN
7394: IFFALSE 7412
// ComExitVehicle ( UnitsInside ( i ) ) ;
7396: LD_VAR 0 6
7400: PPUSH
7401: CALL_OW 313
7405: PPUSH
7406: CALL_OW 121
7410: GO 7393
7412: POP
7413: POP
// end ;
7414: LD_VAR 0 5
7418: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7419: LD_INT 0
7421: PPUSH
7422: PPUSH
7423: PPUSH
7424: PPUSH
7425: PPUSH
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
// for i = 1 to medicCount do
7432: LD_ADDR_VAR 0 14
7436: PUSH
7437: DOUBLE
7438: LD_INT 1
7440: DEC
7441: ST_TO_ADDR
7442: LD_VAR 0 7
7446: PUSH
7447: FOR_TO
7448: IFFALSE 7530
// begin uc_side = side ;
7450: LD_ADDR_OWVAR 20
7454: PUSH
7455: LD_VAR 0 1
7459: ST_TO_ADDR
// uc_nation = nation ;
7460: LD_ADDR_OWVAR 21
7464: PUSH
7465: LD_VAR 0 2
7469: ST_TO_ADDR
// hc_name =  ;
7470: LD_ADDR_OWVAR 26
7474: PUSH
7475: LD_STRING 
7477: ST_TO_ADDR
// hc_gallery =  ;
7478: LD_ADDR_OWVAR 33
7482: PUSH
7483: LD_STRING 
7485: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7486: LD_INT 0
7488: PPUSH
7489: LD_INT 4
7491: PPUSH
7492: LD_VAR 0 8
7496: PPUSH
7497: CALL_OW 380
// un = CreateHuman ;
7501: LD_ADDR_VAR 0 16
7505: PUSH
7506: CALL_OW 44
7510: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7511: LD_VAR 0 16
7515: PPUSH
7516: LD_VAR 0 9
7520: PPUSH
7521: LD_INT 0
7523: PPUSH
7524: CALL_OW 49
// end ;
7528: GO 7447
7530: POP
7531: POP
// for i = 1 to soldierCount do
7532: LD_ADDR_VAR 0 14
7536: PUSH
7537: DOUBLE
7538: LD_INT 1
7540: DEC
7541: ST_TO_ADDR
7542: LD_VAR 0 3
7546: PUSH
7547: FOR_TO
7548: IFFALSE 7630
// begin uc_side = side ;
7550: LD_ADDR_OWVAR 20
7554: PUSH
7555: LD_VAR 0 1
7559: ST_TO_ADDR
// uc_nation = nation ;
7560: LD_ADDR_OWVAR 21
7564: PUSH
7565: LD_VAR 0 2
7569: ST_TO_ADDR
// hc_name =  ;
7570: LD_ADDR_OWVAR 26
7574: PUSH
7575: LD_STRING 
7577: ST_TO_ADDR
// hc_gallery =  ;
7578: LD_ADDR_OWVAR 33
7582: PUSH
7583: LD_STRING 
7585: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7586: LD_INT 0
7588: PPUSH
7589: LD_INT 1
7591: PPUSH
7592: LD_VAR 0 8
7596: PPUSH
7597: CALL_OW 380
// un = CreateHuman ;
7601: LD_ADDR_VAR 0 16
7605: PUSH
7606: CALL_OW 44
7610: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7611: LD_VAR 0 16
7615: PPUSH
7616: LD_VAR 0 9
7620: PPUSH
7621: LD_INT 0
7623: PPUSH
7624: CALL_OW 49
// end ;
7628: GO 7547
7630: POP
7631: POP
// for i = 1 to sniperCount do
7632: LD_ADDR_VAR 0 14
7636: PUSH
7637: DOUBLE
7638: LD_INT 1
7640: DEC
7641: ST_TO_ADDR
7642: LD_VAR 0 4
7646: PUSH
7647: FOR_TO
7648: IFFALSE 7730
// begin uc_side = side ;
7650: LD_ADDR_OWVAR 20
7654: PUSH
7655: LD_VAR 0 1
7659: ST_TO_ADDR
// uc_nation = nation ;
7660: LD_ADDR_OWVAR 21
7664: PUSH
7665: LD_VAR 0 2
7669: ST_TO_ADDR
// hc_name =  ;
7670: LD_ADDR_OWVAR 26
7674: PUSH
7675: LD_STRING 
7677: ST_TO_ADDR
// hc_gallery =  ;
7678: LD_ADDR_OWVAR 33
7682: PUSH
7683: LD_STRING 
7685: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7686: LD_INT 0
7688: PPUSH
7689: LD_INT 5
7691: PPUSH
7692: LD_VAR 0 8
7696: PPUSH
7697: CALL_OW 380
// un = CreateHuman ;
7701: LD_ADDR_VAR 0 16
7705: PUSH
7706: CALL_OW 44
7710: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7711: LD_VAR 0 16
7715: PPUSH
7716: LD_VAR 0 9
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 49
// end ;
7728: GO 7647
7730: POP
7731: POP
// for i = 1 to bazookCount do
7732: LD_ADDR_VAR 0 14
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 5
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7830
// begin uc_side = side ;
7750: LD_ADDR_OWVAR 20
7754: PUSH
7755: LD_VAR 0 1
7759: ST_TO_ADDR
// uc_nation = nation ;
7760: LD_ADDR_OWVAR 21
7764: PUSH
7765: LD_VAR 0 2
7769: ST_TO_ADDR
// hc_name =  ;
7770: LD_ADDR_OWVAR 26
7774: PUSH
7775: LD_STRING 
7777: ST_TO_ADDR
// hc_gallery =  ;
7778: LD_ADDR_OWVAR 33
7782: PUSH
7783: LD_STRING 
7785: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7786: LD_INT 0
7788: PPUSH
7789: LD_INT 9
7791: PPUSH
7792: LD_VAR 0 8
7796: PPUSH
7797: CALL_OW 380
// un = CreateHuman ;
7801: LD_ADDR_VAR 0 16
7805: PUSH
7806: CALL_OW 44
7810: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7811: LD_VAR 0 16
7815: PPUSH
7816: LD_VAR 0 9
7820: PPUSH
7821: LD_INT 0
7823: PPUSH
7824: CALL_OW 49
// end ;
7828: GO 7747
7830: POP
7831: POP
// for i = 1 to mortalCount do
7832: LD_ADDR_VAR 0 14
7836: PUSH
7837: DOUBLE
7838: LD_INT 1
7840: DEC
7841: ST_TO_ADDR
7842: LD_VAR 0 6
7846: PUSH
7847: FOR_TO
7848: IFFALSE 7930
// begin uc_side = side ;
7850: LD_ADDR_OWVAR 20
7854: PUSH
7855: LD_VAR 0 1
7859: ST_TO_ADDR
// uc_nation = nation ;
7860: LD_ADDR_OWVAR 21
7864: PUSH
7865: LD_VAR 0 2
7869: ST_TO_ADDR
// hc_name =  ;
7870: LD_ADDR_OWVAR 26
7874: PUSH
7875: LD_STRING 
7877: ST_TO_ADDR
// hc_gallery =  ;
7878: LD_ADDR_OWVAR 33
7882: PUSH
7883: LD_STRING 
7885: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7886: LD_INT 0
7888: PPUSH
7889: LD_INT 8
7891: PPUSH
7892: LD_VAR 0 8
7896: PPUSH
7897: CALL_OW 380
// un = CreateHuman ;
7901: LD_ADDR_VAR 0 16
7905: PUSH
7906: CALL_OW 44
7910: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7911: LD_VAR 0 16
7915: PPUSH
7916: LD_VAR 0 9
7920: PPUSH
7921: LD_INT 0
7923: PPUSH
7924: CALL_OW 49
// end ;
7928: GO 7847
7930: POP
7931: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7932: LD_ADDR_VAR 0 19
7936: PUSH
7937: LD_INT 22
7939: PUSH
7940: LD_VAR 0 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 2
7951: PUSH
7952: LD_INT 25
7954: PUSH
7955: LD_INT 1
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 25
7964: PUSH
7965: LD_INT 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 25
7974: PUSH
7975: LD_INT 8
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 25
7984: PUSH
7985: LD_INT 9
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PPUSH
8003: CALL_OW 69
8007: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8008: LD_ADDR_VAR 0 18
8012: PUSH
8013: LD_INT 22
8015: PUSH
8016: LD_VAR 0 1
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 25
8027: PUSH
8028: LD_INT 4
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8044: LD_VAR 0 18
8048: PPUSH
8049: LD_VAR 0 10
8053: PPUSH
8054: CALL_OW 113
// if strategy = 1 then
8058: LD_VAR 0 12
8062: PUSH
8063: LD_INT 1
8065: EQUAL
8066: IFFALSE 8582
// begin repeat wait ( 0 0$3 ) ;
8068: LD_INT 105
8070: PPUSH
8071: CALL_OW 67
// for i in soldiersOK_list do
8075: LD_ADDR_VAR 0 14
8079: PUSH
8080: LD_VAR 0 19
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8150
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8088: LD_VAR 0 14
8092: PPUSH
8093: LD_INT 91
8095: PPUSH
8096: LD_INT 63
8098: PPUSH
8099: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8103: LD_VAR 0 14
8107: PPUSH
8108: LD_INT 101
8110: PPUSH
8111: LD_INT 53
8113: PPUSH
8114: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8118: LD_VAR 0 14
8122: PPUSH
8123: LD_INT 75
8125: PPUSH
8126: LD_INT 23
8128: PPUSH
8129: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8133: LD_VAR 0 14
8137: PPUSH
8138: LD_INT 78
8140: PPUSH
8141: LD_INT 8
8143: PPUSH
8144: CALL_OW 174
// end ;
8148: GO 8085
8150: POP
8151: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8152: LD_INT 15
8154: PPUSH
8155: LD_INT 22
8157: PUSH
8158: LD_VAR 0 1
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 70
8171: PUSH
8172: LD_INT 2
8174: GREATER
8175: IFFALSE 8068
// repeat wait ( 0 0$1 ) ;
8177: LD_INT 35
8179: PPUSH
8180: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8184: LD_ADDR_VAR 0 17
8188: PUSH
8189: LD_INT 22
8191: PUSH
8192: LD_VAR 0 1
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 1
8203: PUSH
8204: LD_INT 3
8206: PUSH
8207: LD_INT 24
8209: PUSH
8210: LD_INT 550
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 24
8223: PUSH
8224: LD_INT 250
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8245: LD_ADDR_VAR 0 19
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_VAR 0 1
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 2
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 1
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 25
8277: PUSH
8278: LD_INT 5
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 25
8287: PUSH
8288: LD_INT 8
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 9
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 24
8314: PUSH
8315: LD_INT 1000
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: PPUSH
8327: CALL_OW 69
8331: ST_TO_ADDR
// if medicCount > 0 then
8332: LD_VAR 0 7
8336: PUSH
8337: LD_INT 0
8339: GREATER
8340: IFFALSE 8384
// begin if damageUnit_list > 0 then
8342: LD_VAR 0 17
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: IFFALSE 8384
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8352: LD_VAR 0 17
8356: PPUSH
8357: LD_VAR 0 10
8361: PPUSH
8362: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8366: LD_VAR 0 7
8370: PPUSH
8371: LD_VAR 0 17
8375: PUSH
8376: LD_INT 1
8378: ARRAY
8379: PPUSH
8380: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8384: LD_ADDR_VAR 0 14
8388: PUSH
8389: LD_VAR 0 19
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8571
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8397: LD_ADDR_VAR 0 22
8401: PUSH
8402: LD_INT 22
8404: PUSH
8405: LD_VAR 0 11
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PPUSH
8414: CALL_OW 69
8418: PPUSH
8419: LD_VAR 0 14
8423: PPUSH
8424: CALL_OW 74
8428: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8429: LD_ADDR_VAR 0 23
8433: PUSH
8434: LD_INT 22
8436: PUSH
8437: LD_VAR 0 11
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 2
8448: PUSH
8449: LD_INT 59
8451: PUSH
8452: EMPTY
8453: LIST
8454: PUSH
8455: LD_INT 21
8457: PUSH
8458: LD_INT 1
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 21
8467: PUSH
8468: LD_INT 2
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: PPUSH
8488: CALL_OW 69
8492: PPUSH
8493: LD_VAR 0 14
8497: PPUSH
8498: CALL_OW 74
8502: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8503: LD_VAR 0 14
8507: PPUSH
8508: LD_VAR 0 22
8512: PPUSH
8513: CALL_OW 296
8517: PUSH
8518: LD_INT 8
8520: PLUS
8521: PUSH
8522: LD_VAR 0 14
8526: PPUSH
8527: LD_VAR 0 23
8531: PPUSH
8532: CALL_OW 296
8536: LESS
8537: IFFALSE 8555
// begin ComAttackUnit ( i , target1 ) ;
8539: LD_VAR 0 14
8543: PPUSH
8544: LD_VAR 0 22
8548: PPUSH
8549: CALL_OW 115
// end else
8553: GO 8569
// begin ComAttackUnit ( i , target2 ) ;
8555: LD_VAR 0 14
8559: PPUSH
8560: LD_VAR 0 23
8564: PPUSH
8565: CALL_OW 115
// end ; end ;
8569: GO 8394
8571: POP
8572: POP
// until soldiersOK_list = [ ] ;
8573: LD_VAR 0 19
8577: PUSH
8578: EMPTY
8579: EQUAL
8580: IFFALSE 8177
// end ; if strategy = 2 then
8582: LD_VAR 0 12
8586: PUSH
8587: LD_INT 2
8589: EQUAL
8590: IFFALSE 9076
// begin repeat wait ( 0 0$1 ) ;
8592: LD_INT 35
8594: PPUSH
8595: CALL_OW 67
// for i in soldiersOK_list do
8599: LD_ADDR_VAR 0 14
8603: PUSH
8604: LD_VAR 0 19
8608: PUSH
8609: FOR_IN
8610: IFFALSE 8644
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8612: LD_VAR 0 14
8616: PPUSH
8617: LD_INT 91
8619: PPUSH
8620: LD_INT 63
8622: PPUSH
8623: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8627: LD_VAR 0 14
8631: PPUSH
8632: LD_INT 75
8634: PPUSH
8635: LD_INT 33
8637: PPUSH
8638: CALL_OW 174
// end ;
8642: GO 8609
8644: POP
8645: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8646: LD_INT 16
8648: PPUSH
8649: LD_INT 22
8651: PUSH
8652: LD_VAR 0 1
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 70
8665: PUSH
8666: LD_INT 2
8668: GREATER
8669: IFFALSE 8592
// repeat wait ( 0 0$3 ) ;
8671: LD_INT 105
8673: PPUSH
8674: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8678: LD_ADDR_VAR 0 17
8682: PUSH
8683: LD_INT 22
8685: PUSH
8686: LD_VAR 0 1
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: LD_INT 3
8700: PUSH
8701: LD_INT 24
8703: PUSH
8704: LD_INT 550
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: LD_INT 24
8717: PUSH
8718: LD_INT 250
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8739: LD_ADDR_VAR 0 19
8743: PUSH
8744: LD_INT 22
8746: PUSH
8747: LD_VAR 0 1
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 2
8758: PUSH
8759: LD_INT 25
8761: PUSH
8762: LD_INT 1
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: LD_INT 25
8771: PUSH
8772: LD_INT 5
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 25
8781: PUSH
8782: LD_INT 8
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 25
8791: PUSH
8792: LD_INT 9
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 24
8808: PUSH
8809: LD_INT 1000
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: ST_TO_ADDR
// if medicCount > 0 then
8826: LD_VAR 0 7
8830: PUSH
8831: LD_INT 0
8833: GREATER
8834: IFFALSE 8878
// begin if damageUnit_list > 0 then
8836: LD_VAR 0 17
8840: PUSH
8841: LD_INT 0
8843: GREATER
8844: IFFALSE 8878
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8846: LD_VAR 0 17
8850: PPUSH
8851: LD_VAR 0 10
8855: PPUSH
8856: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8860: LD_VAR 0 7
8864: PPUSH
8865: LD_VAR 0 17
8869: PUSH
8870: LD_INT 1
8872: ARRAY
8873: PPUSH
8874: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8878: LD_ADDR_VAR 0 14
8882: PUSH
8883: LD_VAR 0 19
8887: PUSH
8888: FOR_IN
8889: IFFALSE 9065
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8891: LD_ADDR_VAR 0 22
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_VAR 0 11
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PPUSH
8908: CALL_OW 69
8912: PPUSH
8913: LD_VAR 0 14
8917: PPUSH
8918: CALL_OW 74
8922: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8923: LD_ADDR_VAR 0 23
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_VAR 0 11
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 2
8942: PUSH
8943: LD_INT 59
8945: PUSH
8946: EMPTY
8947: LIST
8948: PUSH
8949: LD_INT 21
8951: PUSH
8952: LD_INT 1
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 2
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: PPUSH
8982: CALL_OW 69
8986: PPUSH
8987: LD_VAR 0 14
8991: PPUSH
8992: CALL_OW 74
8996: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8997: LD_VAR 0 14
9001: PPUSH
9002: LD_VAR 0 22
9006: PPUSH
9007: CALL_OW 296
9011: PUSH
9012: LD_INT 8
9014: PLUS
9015: PUSH
9016: LD_VAR 0 14
9020: PPUSH
9021: LD_VAR 0 23
9025: PPUSH
9026: CALL_OW 296
9030: LESS
9031: IFFALSE 9049
// begin ComAttackUnit ( i , target1 ) ;
9033: LD_VAR 0 14
9037: PPUSH
9038: LD_VAR 0 22
9042: PPUSH
9043: CALL_OW 115
// end else
9047: GO 9063
// begin ComAttackUnit ( i , target2 ) ;
9049: LD_VAR 0 14
9053: PPUSH
9054: LD_VAR 0 23
9058: PPUSH
9059: CALL_OW 115
// end ; end ;
9063: GO 8888
9065: POP
9066: POP
// until soldiersOK_list = [ ] ;
9067: LD_VAR 0 19
9071: PUSH
9072: EMPTY
9073: EQUAL
9074: IFFALSE 8671
// end ; end ;
9076: LD_VAR 0 13
9080: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9081: LD_INT 0
9083: PPUSH
9084: PPUSH
9085: PPUSH
9086: PPUSH
9087: PPUSH
9088: PPUSH
9089: PPUSH
9090: PPUSH
9091: PPUSH
9092: PPUSH
9093: PPUSH
// amChassisTab = [ ] ;
9094: LD_ADDR_VAR 0 19
9098: PUSH
9099: EMPTY
9100: ST_TO_ADDR
// arChassisTab = [ ] ;
9101: LD_ADDR_VAR 0 18
9105: PUSH
9106: EMPTY
9107: ST_TO_ADDR
// ruChassisTab = [ ] ;
9108: LD_ADDR_VAR 0 17
9112: PUSH
9113: EMPTY
9114: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9115: LD_INT 35
9117: PPUSH
9118: CALL_OW 67
// if nation = 1 then
9122: LD_VAR 0 5
9126: PUSH
9127: LD_INT 1
9129: EQUAL
9130: IFFALSE 9621
// begin uc_side = side ;
9132: LD_ADDR_OWVAR 20
9136: PUSH
9137: LD_VAR 0 2
9141: ST_TO_ADDR
// uc_nation = nation ;
9142: LD_ADDR_OWVAR 21
9146: PUSH
9147: LD_VAR 0 5
9151: ST_TO_ADDR
// vc_engine = vehengine ;
9152: LD_ADDR_OWVAR 39
9156: PUSH
9157: LD_VAR 0 6
9161: ST_TO_ADDR
// vc_control = vehcontrol ;
9162: LD_ADDR_OWVAR 38
9166: PUSH
9167: LD_VAR 0 7
9171: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9172: LD_ADDR_OWVAR 40
9176: PUSH
9177: LD_VAR 0 10
9181: PUSH
9182: LD_INT 1
9184: PPUSH
9185: LD_VAR 0 10
9189: PPUSH
9190: CALL_OW 12
9194: ARRAY
9195: ST_TO_ADDR
// for j = 1 to AMWeapon do
9196: LD_ADDR_VAR 0 14
9200: PUSH
9201: DOUBLE
9202: LD_INT 1
9204: DEC
9205: ST_TO_ADDR
9206: LD_VAR 0 10
9210: PUSH
9211: FOR_TO
9212: IFFALSE 9513
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9214: LD_VAR 0 10
9218: PUSH
9219: LD_VAR 0 14
9223: ARRAY
9224: PUSH
9225: LD_INT 2
9227: EQUAL
9228: PUSH
9229: LD_VAR 0 10
9233: PUSH
9234: LD_VAR 0 14
9238: ARRAY
9239: PUSH
9240: LD_INT 3
9242: EQUAL
9243: OR
9244: IFFALSE 9297
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9246: LD_ADDR_VAR 0 19
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: LD_INT 2
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: LD_INT 4
9262: PUSH
9263: LD_INT 5
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9273: LD_ADDR_OWVAR 37
9277: PUSH
9278: LD_VAR 0 19
9282: PUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_VAR 0 19
9290: PPUSH
9291: CALL_OW 12
9295: ARRAY
9296: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9297: LD_VAR 0 10
9301: PUSH
9302: LD_VAR 0 14
9306: ARRAY
9307: PUSH
9308: LD_INT 4
9310: EQUAL
9311: PUSH
9312: LD_VAR 0 10
9316: PUSH
9317: LD_VAR 0 14
9321: ARRAY
9322: PUSH
9323: LD_INT 5
9325: EQUAL
9326: OR
9327: PUSH
9328: LD_VAR 0 10
9332: PUSH
9333: LD_VAR 0 14
9337: ARRAY
9338: PUSH
9339: LD_INT 9
9341: EQUAL
9342: OR
9343: PUSH
9344: LD_VAR 0 10
9348: PUSH
9349: LD_VAR 0 14
9353: ARRAY
9354: PUSH
9355: LD_INT 11
9357: EQUAL
9358: OR
9359: PUSH
9360: LD_VAR 0 10
9364: PUSH
9365: LD_VAR 0 14
9369: ARRAY
9370: PUSH
9371: LD_INT 7
9373: EQUAL
9374: OR
9375: IFFALSE 9424
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9377: LD_ADDR_VAR 0 19
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: LD_INT 3
9387: PUSH
9388: LD_INT 4
9390: PUSH
9391: LD_INT 5
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9400: LD_ADDR_OWVAR 37
9404: PUSH
9405: LD_VAR 0 19
9409: PUSH
9410: LD_INT 1
9412: PPUSH
9413: LD_VAR 0 19
9417: PPUSH
9418: CALL_OW 12
9422: ARRAY
9423: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9424: LD_VAR 0 10
9428: PUSH
9429: LD_VAR 0 14
9433: ARRAY
9434: PUSH
9435: LD_INT 8
9437: EQUAL
9438: PUSH
9439: LD_VAR 0 10
9443: PUSH
9444: LD_VAR 0 14
9448: ARRAY
9449: PUSH
9450: LD_INT 6
9452: EQUAL
9453: OR
9454: PUSH
9455: LD_VAR 0 10
9459: PUSH
9460: LD_VAR 0 14
9464: ARRAY
9465: PUSH
9466: LD_INT 10
9468: EQUAL
9469: OR
9470: IFFALSE 9511
// begin amChassisTab = [ 4 , 5 ] ;
9472: LD_ADDR_VAR 0 19
9476: PUSH
9477: LD_INT 4
9479: PUSH
9480: LD_INT 5
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9487: LD_ADDR_OWVAR 37
9491: PUSH
9492: LD_VAR 0 19
9496: PUSH
9497: LD_INT 1
9499: PPUSH
9500: LD_VAR 0 19
9504: PPUSH
9505: CALL_OW 12
9509: ARRAY
9510: ST_TO_ADDR
// end ; end ;
9511: GO 9211
9513: POP
9514: POP
// veh = CreateVehicle ;
9515: LD_ADDR_VAR 0 16
9519: PUSH
9520: CALL_OW 45
9524: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9525: LD_VAR 0 16
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: LD_INT 0
9537: PPUSH
9538: CALL_OW 49
// if vehControl = 1 then
9542: LD_VAR 0 7
9546: PUSH
9547: LD_INT 1
9549: EQUAL
9550: IFFALSE 9607
// begin hc_gallery =  ;
9552: LD_ADDR_OWVAR 33
9556: PUSH
9557: LD_STRING 
9559: ST_TO_ADDR
// hc_name =  ;
9560: LD_ADDR_OWVAR 26
9564: PUSH
9565: LD_STRING 
9567: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9568: LD_INT 0
9570: PPUSH
9571: LD_INT 3
9573: PPUSH
9574: LD_VAR 0 4
9578: PPUSH
9579: CALL_OW 380
// un = CreateHuman ;
9583: LD_ADDR_VAR 0 15
9587: PUSH
9588: CALL_OW 44
9592: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9593: LD_VAR 0 15
9597: PPUSH
9598: LD_VAR 0 16
9602: PPUSH
9603: CALL_OW 52
// end ; i = i + 1 ;
9607: LD_ADDR_VAR 0 13
9611: PUSH
9612: LD_VAR 0 13
9616: PUSH
9617: LD_INT 1
9619: PLUS
9620: ST_TO_ADDR
// end ; if nation = 2 then
9621: LD_VAR 0 5
9625: PUSH
9626: LD_INT 2
9628: EQUAL
9629: IFFALSE 10053
// begin uc_side = side ;
9631: LD_ADDR_OWVAR 20
9635: PUSH
9636: LD_VAR 0 2
9640: ST_TO_ADDR
// uc_nation = nation ;
9641: LD_ADDR_OWVAR 21
9645: PUSH
9646: LD_VAR 0 5
9650: ST_TO_ADDR
// vc_engine = vehengine ;
9651: LD_ADDR_OWVAR 39
9655: PUSH
9656: LD_VAR 0 6
9660: ST_TO_ADDR
// vc_control = vehcontrol ;
9661: LD_ADDR_OWVAR 38
9665: PUSH
9666: LD_VAR 0 7
9670: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9671: LD_ADDR_OWVAR 40
9675: PUSH
9676: LD_VAR 0 9
9680: PUSH
9681: LD_INT 1
9683: PPUSH
9684: LD_VAR 0 9
9688: PPUSH
9689: CALL_OW 12
9693: ARRAY
9694: ST_TO_ADDR
// for j = 1 to ARWeapons do
9695: LD_ADDR_VAR 0 14
9699: PUSH
9700: DOUBLE
9701: LD_INT 1
9703: DEC
9704: ST_TO_ADDR
9705: LD_VAR 0 9
9709: PUSH
9710: FOR_TO
9711: IFFALSE 9945
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9713: LD_VAR 0 9
9717: PUSH
9718: LD_VAR 0 14
9722: ARRAY
9723: PUSH
9724: LD_INT 24
9726: EQUAL
9727: PUSH
9728: LD_VAR 0 9
9732: PUSH
9733: LD_VAR 0 14
9737: ARRAY
9738: PUSH
9739: LD_INT 22
9741: EQUAL
9742: OR
9743: PUSH
9744: LD_VAR 0 9
9748: PUSH
9749: LD_VAR 0 14
9753: ARRAY
9754: PUSH
9755: LD_INT 23
9757: EQUAL
9758: OR
9759: PUSH
9760: LD_VAR 0 9
9764: PUSH
9765: LD_VAR 0 14
9769: ARRAY
9770: PUSH
9771: LD_INT 30
9773: EQUAL
9774: OR
9775: IFFALSE 9824
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9777: LD_ADDR_VAR 0 18
9781: PUSH
9782: LD_INT 11
9784: PUSH
9785: LD_INT 12
9787: PUSH
9788: LD_INT 13
9790: PUSH
9791: LD_INT 14
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9800: LD_ADDR_OWVAR 37
9804: PUSH
9805: LD_VAR 0 18
9809: PUSH
9810: LD_INT 1
9812: PPUSH
9813: LD_VAR 0 18
9817: PPUSH
9818: CALL_OW 12
9822: ARRAY
9823: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9824: LD_VAR 0 9
9828: PUSH
9829: LD_VAR 0 14
9833: ARRAY
9834: PUSH
9835: LD_INT 29
9837: EQUAL
9838: PUSH
9839: LD_VAR 0 9
9843: PUSH
9844: LD_VAR 0 14
9848: ARRAY
9849: PUSH
9850: LD_INT 28
9852: EQUAL
9853: OR
9854: PUSH
9855: LD_VAR 0 9
9859: PUSH
9860: LD_VAR 0 14
9864: ARRAY
9865: PUSH
9866: LD_INT 27
9868: EQUAL
9869: OR
9870: PUSH
9871: LD_VAR 0 9
9875: PUSH
9876: LD_VAR 0 14
9880: ARRAY
9881: PUSH
9882: LD_INT 26
9884: EQUAL
9885: OR
9886: PUSH
9887: LD_VAR 0 9
9891: PUSH
9892: LD_VAR 0 14
9896: ARRAY
9897: PUSH
9898: LD_INT 25
9900: EQUAL
9901: OR
9902: IFFALSE 9943
// begin arChassisTab = [ 13 , 14 ] ;
9904: LD_ADDR_VAR 0 18
9908: PUSH
9909: LD_INT 13
9911: PUSH
9912: LD_INT 14
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9919: LD_ADDR_OWVAR 37
9923: PUSH
9924: LD_VAR 0 18
9928: PUSH
9929: LD_INT 1
9931: PPUSH
9932: LD_VAR 0 18
9936: PPUSH
9937: CALL_OW 12
9941: ARRAY
9942: ST_TO_ADDR
// end ; end ;
9943: GO 9710
9945: POP
9946: POP
// veh = CreateVehicle ;
9947: LD_ADDR_VAR 0 16
9951: PUSH
9952: CALL_OW 45
9956: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9957: LD_VAR 0 16
9961: PPUSH
9962: LD_VAR 0 1
9966: PPUSH
9967: LD_INT 0
9969: PPUSH
9970: CALL_OW 49
// if vehcontrol = 1 then
9974: LD_VAR 0 7
9978: PUSH
9979: LD_INT 1
9981: EQUAL
9982: IFFALSE 10039
// begin hc_gallery =  ;
9984: LD_ADDR_OWVAR 33
9988: PUSH
9989: LD_STRING 
9991: ST_TO_ADDR
// hc_name =  ;
9992: LD_ADDR_OWVAR 26
9996: PUSH
9997: LD_STRING 
9999: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10000: LD_INT 0
10002: PPUSH
10003: LD_INT 3
10005: PPUSH
10006: LD_VAR 0 4
10010: PPUSH
10011: CALL_OW 380
// un = CreateHuman ;
10015: LD_ADDR_VAR 0 15
10019: PUSH
10020: CALL_OW 44
10024: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10025: LD_VAR 0 15
10029: PPUSH
10030: LD_VAR 0 16
10034: PPUSH
10035: CALL_OW 52
// end ; i = i + 1 ;
10039: LD_ADDR_VAR 0 13
10043: PUSH
10044: LD_VAR 0 13
10048: PUSH
10049: LD_INT 1
10051: PLUS
10052: ST_TO_ADDR
// end ; if nation = 3 then
10053: LD_VAR 0 5
10057: PUSH
10058: LD_INT 3
10060: EQUAL
10061: IFFALSE 10453
// begin uc_side = side ;
10063: LD_ADDR_OWVAR 20
10067: PUSH
10068: LD_VAR 0 2
10072: ST_TO_ADDR
// uc_nation = nation ;
10073: LD_ADDR_OWVAR 21
10077: PUSH
10078: LD_VAR 0 5
10082: ST_TO_ADDR
// vc_engine = vehengine ;
10083: LD_ADDR_OWVAR 39
10087: PUSH
10088: LD_VAR 0 6
10092: ST_TO_ADDR
// vc_control = vehcontrol ;
10093: LD_ADDR_OWVAR 38
10097: PUSH
10098: LD_VAR 0 7
10102: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10103: LD_ADDR_OWVAR 40
10107: PUSH
10108: LD_VAR 0 8
10112: PUSH
10113: LD_INT 1
10115: PPUSH
10116: LD_VAR 0 8
10120: PPUSH
10121: CALL_OW 12
10125: ARRAY
10126: ST_TO_ADDR
// for j = 1 to RuWeapons do
10127: LD_ADDR_VAR 0 14
10131: PUSH
10132: DOUBLE
10133: LD_INT 1
10135: DEC
10136: ST_TO_ADDR
10137: LD_VAR 0 8
10141: PUSH
10142: FOR_TO
10143: IFFALSE 10345
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10145: LD_VAR 0 8
10149: PUSH
10150: LD_VAR 0 14
10154: ARRAY
10155: PUSH
10156: LD_INT 42
10158: EQUAL
10159: PUSH
10160: LD_VAR 0 8
10164: PUSH
10165: LD_VAR 0 14
10169: ARRAY
10170: PUSH
10171: LD_INT 43
10173: EQUAL
10174: OR
10175: PUSH
10176: LD_VAR 0 8
10180: PUSH
10181: LD_VAR 0 14
10185: ARRAY
10186: PUSH
10187: LD_INT 44
10189: EQUAL
10190: OR
10191: PUSH
10192: LD_VAR 0 8
10196: PUSH
10197: LD_VAR 0 14
10201: ARRAY
10202: PUSH
10203: LD_INT 45
10205: EQUAL
10206: OR
10207: PUSH
10208: LD_VAR 0 8
10212: PUSH
10213: LD_VAR 0 14
10217: ARRAY
10218: PUSH
10219: LD_INT 49
10221: EQUAL
10222: OR
10223: IFFALSE 10272
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10225: LD_ADDR_VAR 0 17
10229: PUSH
10230: LD_INT 21
10232: PUSH
10233: LD_INT 22
10235: PUSH
10236: LD_INT 23
10238: PUSH
10239: LD_INT 24
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10248: LD_ADDR_OWVAR 37
10252: PUSH
10253: LD_VAR 0 17
10257: PUSH
10258: LD_INT 1
10260: PPUSH
10261: LD_VAR 0 17
10265: PPUSH
10266: CALL_OW 12
10270: ARRAY
10271: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10272: LD_VAR 0 8
10276: PUSH
10277: LD_VAR 0 14
10281: ARRAY
10282: PUSH
10283: LD_INT 46
10285: EQUAL
10286: PUSH
10287: LD_VAR 0 8
10291: PUSH
10292: LD_VAR 0 14
10296: ARRAY
10297: PUSH
10298: LD_INT 47
10300: EQUAL
10301: OR
10302: IFFALSE 10343
// begin ruChassisTab = [ 23 , 24 ] ;
10304: LD_ADDR_VAR 0 17
10308: PUSH
10309: LD_INT 23
10311: PUSH
10312: LD_INT 24
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10319: LD_ADDR_OWVAR 37
10323: PUSH
10324: LD_VAR 0 17
10328: PUSH
10329: LD_INT 1
10331: PPUSH
10332: LD_VAR 0 17
10336: PPUSH
10337: CALL_OW 12
10341: ARRAY
10342: ST_TO_ADDR
// end ; end ;
10343: GO 10142
10345: POP
10346: POP
// veh = CreateVehicle ;
10347: LD_ADDR_VAR 0 16
10351: PUSH
10352: CALL_OW 45
10356: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10357: LD_VAR 0 16
10361: PPUSH
10362: LD_VAR 0 1
10366: PPUSH
10367: LD_INT 0
10369: PPUSH
10370: CALL_OW 49
// if vehcontrol = 1 then
10374: LD_VAR 0 7
10378: PUSH
10379: LD_INT 1
10381: EQUAL
10382: IFFALSE 10439
// begin hc_gallery =  ;
10384: LD_ADDR_OWVAR 33
10388: PUSH
10389: LD_STRING 
10391: ST_TO_ADDR
// hc_name =  ;
10392: LD_ADDR_OWVAR 26
10396: PUSH
10397: LD_STRING 
10399: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10400: LD_INT 0
10402: PPUSH
10403: LD_INT 3
10405: PPUSH
10406: LD_VAR 0 4
10410: PPUSH
10411: CALL_OW 380
// un = CreateHuman ;
10415: LD_ADDR_VAR 0 15
10419: PUSH
10420: CALL_OW 44
10424: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10425: LD_VAR 0 15
10429: PPUSH
10430: LD_VAR 0 16
10434: PPUSH
10435: CALL_OW 52
// end ; i = i + 1 ;
10439: LD_ADDR_VAR 0 13
10443: PUSH
10444: LD_VAR 0 13
10448: PUSH
10449: LD_INT 1
10451: PLUS
10452: ST_TO_ADDR
// end ; until i = vehCount ;
10453: LD_VAR 0 13
10457: PUSH
10458: LD_VAR 0 3
10462: EQUAL
10463: IFFALSE 9115
// repeat wait ( 0 0$1 ) ;
10465: LD_INT 35
10467: PPUSH
10468: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10472: LD_INT 22
10474: PUSH
10475: LD_VAR 0 2
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 21
10486: PUSH
10487: LD_INT 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 24
10496: PUSH
10497: LD_INT 250
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 3
10506: PUSH
10507: LD_INT 58
10509: PUSH
10510: EMPTY
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: PPUSH
10523: CALL_OW 69
10527: PUSH
10528: LD_INT 0
10530: GREATER
10531: IFFALSE 10773
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10533: LD_ADDR_VAR 0 13
10537: PUSH
10538: LD_INT 22
10540: PUSH
10541: LD_VAR 0 2
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 21
10552: PUSH
10553: LD_INT 2
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 24
10562: PUSH
10563: LD_INT 250
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 3
10572: PUSH
10573: LD_INT 58
10575: PUSH
10576: EMPTY
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: PUSH
10594: FOR_IN
10595: IFFALSE 10771
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10597: LD_ADDR_VAR 0 21
10601: PUSH
10602: LD_INT 22
10604: PUSH
10605: LD_VAR 0 11
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: PPUSH
10619: LD_VAR 0 13
10623: PPUSH
10624: CALL_OW 74
10628: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10629: LD_ADDR_VAR 0 22
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_VAR 0 11
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 2
10648: PUSH
10649: LD_INT 59
10651: PUSH
10652: EMPTY
10653: LIST
10654: PUSH
10655: LD_INT 21
10657: PUSH
10658: LD_INT 1
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 21
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: EMPTY
10686: LIST
10687: PPUSH
10688: CALL_OW 69
10692: PPUSH
10693: LD_VAR 0 13
10697: PPUSH
10698: CALL_OW 74
10702: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10703: LD_VAR 0 13
10707: PPUSH
10708: LD_VAR 0 21
10712: PPUSH
10713: CALL_OW 296
10717: PUSH
10718: LD_INT 8
10720: PLUS
10721: PUSH
10722: LD_VAR 0 13
10726: PPUSH
10727: LD_VAR 0 22
10731: PPUSH
10732: CALL_OW 296
10736: LESS
10737: IFFALSE 10755
// begin ComAttackUnit ( i , target1 ) ;
10739: LD_VAR 0 13
10743: PPUSH
10744: LD_VAR 0 21
10748: PPUSH
10749: CALL_OW 115
// end else
10753: GO 10769
// begin ComAttackUnit ( i , target2 ) ;
10755: LD_VAR 0 13
10759: PPUSH
10760: LD_VAR 0 22
10764: PPUSH
10765: CALL_OW 115
// end ; end ;
10769: GO 10594
10771: POP
10772: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10773: LD_INT 22
10775: PUSH
10776: LD_VAR 0 2
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 21
10787: PUSH
10788: LD_INT 2
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 24
10797: PUSH
10798: LD_INT 250
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 58
10810: PUSH
10811: EMPTY
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PPUSH
10824: CALL_OW 69
10828: PUSH
10829: LD_INT 0
10831: EQUAL
10832: IFFALSE 10465
// end ; end_of_file
10834: LD_VAR 0 12
10838: RET
// every 1 do var i , gammaSquad , startX , startY ;
10839: GO 10841
10841: DISABLE
10842: LD_INT 0
10844: PPUSH
10845: PPUSH
10846: PPUSH
10847: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_EXP 8
10857: PUSH
10858: LD_EXP 9
10862: PUSH
10863: LD_EXP 10
10867: PUSH
10868: LD_EXP 11
10872: PUSH
10873: LD_EXP 12
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_INT 46
10892: PUSH
10893: LD_INT 45
10895: PUSH
10896: LD_INT 44
10898: PUSH
10899: LD_INT 43
10901: PUSH
10902: LD_INT 42
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10912: LD_ADDR_VAR 0 4
10916: PUSH
10917: LD_INT 14
10919: PUSH
10920: LD_INT 12
10922: PUSH
10923: LD_INT 10
10925: PUSH
10926: LD_INT 8
10928: PUSH
10929: LD_INT 6
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10939: LD_INT 32
10941: PPUSH
10942: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10946: LD_INT 32
10948: PPUSH
10949: LD_INT 51
10951: PPUSH
10952: LD_INT 26
10954: PPUSH
10955: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10959: LD_INT 32
10961: PPUSH
10962: LD_INT 53
10964: PPUSH
10965: LD_INT 23
10967: PPUSH
10968: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10972: LD_INT 32
10974: PPUSH
10975: LD_INT 52
10977: PPUSH
10978: LD_INT 19
10980: PPUSH
10981: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10985: LD_INT 35
10987: PPUSH
10988: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10992: LD_INT 32
10994: PPUSH
10995: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10999: LD_INT 32
11001: PPUSH
11002: CALL_OW 250
11006: PUSH
11007: LD_INT 52
11009: EQUAL
11010: PUSH
11011: LD_INT 32
11013: PPUSH
11014: CALL_OW 251
11018: PUSH
11019: LD_INT 19
11021: EQUAL
11022: AND
11023: IFFALSE 10985
// ComExitVehicle ( JMM ) ;
11025: LD_EXP 1
11029: PPUSH
11030: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11034: LD_EXP 7
11038: PPUSH
11039: LD_EXP 1
11043: PPUSH
11044: CALL_OW 119
// wait ( 0 0$01 ) ;
11048: LD_INT 35
11050: PPUSH
11051: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11055: LD_EXP 1
11059: PPUSH
11060: LD_INT 46
11062: PPUSH
11063: LD_INT 10
11065: PPUSH
11066: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11070: LD_EXP 1
11074: PPUSH
11075: LD_EXP 7
11079: PPUSH
11080: CALL_OW 179
// wait ( 0 0$4 ) ;
11084: LD_INT 140
11086: PPUSH
11087: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11091: LD_EXP 1
11095: PPUSH
11096: LD_STRING D1-JMM-1
11098: PPUSH
11099: CALL_OW 88
// if not dialogue_skipped then
11103: LD_OWVAR 59
11107: NOT
11108: IFFALSE 11765
// begin for i := 1 to gammaSquad do
11110: LD_ADDR_VAR 0 1
11114: PUSH
11115: DOUBLE
11116: LD_INT 1
11118: DEC
11119: ST_TO_ADDR
11120: LD_VAR 0 2
11124: PUSH
11125: FOR_TO
11126: IFFALSE 11187
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11128: LD_VAR 0 2
11132: PUSH
11133: LD_VAR 0 1
11137: ARRAY
11138: PPUSH
11139: LD_VAR 0 3
11143: PUSH
11144: LD_VAR 0 1
11148: ARRAY
11149: PPUSH
11150: LD_VAR 0 4
11154: PUSH
11155: LD_VAR 0 1
11159: ARRAY
11160: PPUSH
11161: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11165: LD_VAR 0 2
11169: PUSH
11170: LD_VAR 0 1
11174: ARRAY
11175: PPUSH
11176: LD_EXP 1
11180: PPUSH
11181: CALL_OW 179
// end ;
11185: GO 11125
11187: POP
11188: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11189: LD_EXP 4
11193: PPUSH
11194: LD_INT 41
11196: PPUSH
11197: LD_INT 4
11199: PPUSH
11200: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11204: LD_EXP 4
11208: PPUSH
11209: LD_EXP 1
11213: PPUSH
11214: CALL_OW 179
// if Lisa = false and Bobby then
11218: LD_EXP 4
11222: PUSH
11223: LD_INT 0
11225: EQUAL
11226: PUSH
11227: LD_EXP 2
11231: AND
11232: IFFALSE 11263
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11234: LD_EXP 2
11238: PPUSH
11239: LD_INT 41
11241: PPUSH
11242: LD_INT 4
11244: PPUSH
11245: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11249: LD_EXP 2
11253: PPUSH
11254: LD_EXP 1
11258: PPUSH
11259: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11263: LD_EXP 4
11267: PUSH
11268: LD_INT 0
11270: EQUAL
11271: PUSH
11272: LD_EXP 2
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: PUSH
11282: LD_EXP 3
11286: AND
11287: IFFALSE 11318
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11289: LD_EXP 3
11293: PPUSH
11294: LD_INT 41
11296: PPUSH
11297: LD_INT 4
11299: PPUSH
11300: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11304: LD_EXP 3
11308: PPUSH
11309: LD_EXP 1
11313: PPUSH
11314: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11318: LD_EXP 4
11322: PUSH
11323: LD_INT 0
11325: EQUAL
11326: PUSH
11327: LD_EXP 2
11331: PUSH
11332: LD_INT 0
11334: EQUAL
11335: AND
11336: PUSH
11337: LD_EXP 3
11341: PUSH
11342: LD_INT 0
11344: EQUAL
11345: AND
11346: IFFALSE 11377
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11348: LD_EXP 6
11352: PPUSH
11353: LD_INT 41
11355: PPUSH
11356: LD_INT 4
11358: PPUSH
11359: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11363: LD_EXP 6
11367: PPUSH
11368: LD_EXP 1
11372: PPUSH
11373: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11377: LD_EXP 7
11381: PPUSH
11382: LD_STRING D1-Brown-1
11384: PPUSH
11385: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11389: LD_EXP 1
11393: PPUSH
11394: LD_STRING D1-JMM-2
11396: PPUSH
11397: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11401: LD_EXP 7
11405: PPUSH
11406: LD_STRING D1-Brown-2
11408: PPUSH
11409: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11413: LD_EXP 1
11417: PPUSH
11418: LD_EXP 9
11422: PPUSH
11423: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11427: LD_EXP 9
11431: PPUSH
11432: LD_STRING D1-FSol1-2
11434: PPUSH
11435: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11439: LD_EXP 1
11443: PPUSH
11444: LD_EXP 8
11448: PPUSH
11449: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11453: LD_EXP 8
11457: PPUSH
11458: LD_STRING D1-Sol2-2
11460: PPUSH
11461: CALL_OW 88
// if Lisa then
11465: LD_EXP 4
11469: IFFALSE 11509
// begin ComTurnUnit ( JMM , Lisa ) ;
11471: LD_EXP 1
11475: PPUSH
11476: LD_EXP 4
11480: PPUSH
11481: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11485: LD_EXP 4
11489: PPUSH
11490: LD_STRING D1-Lisa-2
11492: PPUSH
11493: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11497: LD_EXP 1
11501: PPUSH
11502: LD_STRING D1-JMM-3
11504: PPUSH
11505: CALL_OW 88
// end ; if Bobby then
11509: LD_EXP 2
11513: IFFALSE 11553
// begin ComTurnUnit ( JMM , Bobby ) ;
11515: LD_EXP 1
11519: PPUSH
11520: LD_EXP 2
11524: PPUSH
11525: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11529: LD_EXP 2
11533: PPUSH
11534: LD_STRING D1-Bobby-2
11536: PPUSH
11537: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11541: LD_EXP 1
11545: PPUSH
11546: LD_STRING D1-JMM-3
11548: PPUSH
11549: CALL_OW 88
// end ; if Cyrus then
11553: LD_EXP 3
11557: IFFALSE 11597
// begin ComTurnUnit ( JMM , Cyrus ) ;
11559: LD_EXP 1
11563: PPUSH
11564: LD_EXP 3
11568: PPUSH
11569: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11573: LD_EXP 3
11577: PPUSH
11578: LD_STRING D1-Cyrus-2
11580: PPUSH
11581: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11585: LD_EXP 1
11589: PPUSH
11590: LD_STRING D1-JMM-3
11592: PPUSH
11593: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11597: LD_EXP 1
11601: PPUSH
11602: LD_EXP 7
11606: PPUSH
11607: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11611: LD_EXP 1
11615: PPUSH
11616: LD_STRING D1-JMM-3a
11618: PPUSH
11619: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11623: LD_EXP 7
11627: PPUSH
11628: LD_INT 38
11630: PPUSH
11631: LD_INT 5
11633: PPUSH
11634: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11638: LD_EXP 7
11642: PPUSH
11643: LD_EXP 1
11647: PPUSH
11648: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11652: LD_EXP 1
11656: PPUSH
11657: LD_INT 40
11659: PPUSH
11660: LD_INT 7
11662: PPUSH
11663: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11667: LD_EXP 1
11671: PPUSH
11672: LD_EXP 7
11676: PPUSH
11677: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11681: LD_EXP 7
11685: PPUSH
11686: LD_STRING D1-Brown-3
11688: PPUSH
11689: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11693: LD_EXP 14
11697: PPUSH
11698: LD_STRING D1-Har-3
11700: PPUSH
11701: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11705: LD_EXP 1
11709: PPUSH
11710: LD_STRING D1-JMM-4
11712: PPUSH
11713: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11717: LD_EXP 14
11721: PPUSH
11722: LD_STRING D1-Har-4
11724: PPUSH
11725: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11729: LD_EXP 1
11733: PPUSH
11734: LD_STRING D1-JMM-5
11736: PPUSH
11737: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11741: LD_EXP 14
11745: PPUSH
11746: LD_STRING D1-Har-5
11748: PPUSH
11749: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11753: LD_EXP 1
11757: PPUSH
11758: LD_STRING D1-JMM-6
11760: PPUSH
11761: CALL_OW 88
// end ; InGameOff ;
11765: CALL_OW 9
// PrepareRussianConvoy ;
11769: CALL 2869 0 0
// ChangeMissionObjectives ( M1 ) ;
11773: LD_STRING M1
11775: PPUSH
11776: CALL_OW 337
// SaveForQuickRestart ;
11780: CALL_OW 22
// timerStatus = 1 ;
11784: LD_ADDR_EXP 29
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// startTimer = 1 ;
11792: LD_ADDR_EXP 30
11796: PUSH
11797: LD_INT 1
11799: ST_TO_ADDR
// bonusAvalaible = 1 ;
11800: LD_ADDR_EXP 42
11804: PUSH
11805: LD_INT 1
11807: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11808: LD_INT 105
11810: PPUSH
11811: CALL_OW 67
// DialogueOn ;
11815: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11819: LD_EXP 12
11823: PPUSH
11824: LD_STRING D9-Mech1-1
11826: PPUSH
11827: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11831: LD_EXP 1
11835: PPUSH
11836: LD_STRING D9-JMM-1
11838: PPUSH
11839: CALL_OW 88
// DialogueOff ;
11843: CALL_OW 7
// end ;
11847: PPOPN 4
11849: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11850: LD_INT 47
11852: PPUSH
11853: LD_INT 1
11855: PPUSH
11856: CALL_OW 321
11860: PUSH
11861: LD_INT 2
11863: EQUAL
11864: PUSH
11865: LD_INT 22
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 21
11877: PUSH
11878: LD_INT 3
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 30
11887: PUSH
11888: LD_INT 3
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: PUSH
11905: LD_INT 0
11907: GREATER
11908: AND
11909: IFFALSE 12139
11911: GO 11913
11913: DISABLE
// begin if IsOk ( Campell ) then
11914: LD_EXP 12
11918: PPUSH
11919: CALL_OW 302
11923: IFFALSE 11939
// begin Say ( Campell , D10-Mech1-1 ) ;
11925: LD_EXP 12
11929: PPUSH
11930: LD_STRING D10-Mech1-1
11932: PPUSH
11933: CALL_OW 88
// end else
11937: GO 12139
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11939: LD_INT 22
11941: PUSH
11942: LD_INT 1
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 21
11951: PUSH
11952: LD_INT 1
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 25
11961: PUSH
11962: LD_INT 3
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 26
11971: PUSH
11972: LD_INT 1
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 69
11989: PUSH
11990: LD_EXP 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: PUSH
11998: LD_INT 0
12000: GREATER
12001: DIFF
12002: IFFALSE 12076
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12004: LD_INT 22
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 3
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 26
12036: PUSH
12037: LD_INT 1
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 69
12054: PUSH
12055: LD_EXP 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: DIFF
12063: PPUSH
12064: LD_STRING D10-Mech1-1
12066: PPUSH
12067: LD_STRING D10-Mech1-1
12069: PPUSH
12070: CALL 4127 0 3
// end else
12074: GO 12139
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12076: LD_INT 22
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 21
12088: PUSH
12089: LD_INT 1
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 26
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 1
12113: ARRAY
12114: PPUSH
12115: CALL_OW 69
12119: PUSH
12120: LD_EXP 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: DIFF
12128: PPUSH
12129: LD_STRING D10-Mech1-1
12131: PPUSH
12132: LD_STRING D10-Mech1-1
12134: PPUSH
12135: CALL 4127 0 3
// end ; end ; end ;
12139: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12140: LD_INT 22
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 30
12152: PUSH
12153: LD_INT 32
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 69
12168: PUSH
12169: LD_INT 0
12171: GREATER
12172: PUSH
12173: LD_EXP 32
12177: PUSH
12178: LD_INT 0
12180: EQUAL
12181: AND
12182: IFFALSE 12422
12184: GO 12186
12186: DISABLE
// begin if IsOK ( Claptopn ) then
12187: LD_EXP 11
12191: PPUSH
12192: CALL_OW 302
12196: IFFALSE 12212
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12198: LD_EXP 11
12202: PPUSH
12203: LD_STRING D9b-Eng1-1
12205: PPUSH
12206: CALL_OW 88
// end else
12210: GO 12408
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12212: LD_INT 22
12214: PUSH
12215: LD_INT 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 21
12224: PUSH
12225: LD_INT 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 25
12234: PUSH
12235: LD_INT 3
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 26
12244: PUSH
12245: LD_INT 1
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PPUSH
12258: CALL_OW 69
12262: PUSH
12263: LD_EXP 1
12267: PUSH
12268: EMPTY
12269: LIST
12270: PUSH
12271: LD_INT 0
12273: GREATER
12274: DIFF
12275: IFFALSE 12349
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12277: LD_INT 22
12279: PUSH
12280: LD_INT 1
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 21
12289: PUSH
12290: LD_INT 1
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 25
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 26
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: PUSH
12328: LD_EXP 1
12332: PUSH
12333: EMPTY
12334: LIST
12335: DIFF
12336: PPUSH
12337: LD_STRING D9b-Eng1-1
12339: PPUSH
12340: LD_STRING D9b-Eng1-11
12342: PPUSH
12343: CALL 4127 0 3
// end else
12347: GO 12408
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12349: LD_INT 22
12351: PUSH
12352: LD_INT 1
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 21
12361: PUSH
12362: LD_INT 1
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 26
12371: PUSH
12372: LD_INT 1
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: PPUSH
12384: CALL_OW 69
12388: PUSH
12389: LD_EXP 1
12393: PUSH
12394: EMPTY
12395: LIST
12396: DIFF
12397: PPUSH
12398: LD_STRING D9b-Eng1-1
12400: PPUSH
12401: LD_STRING D9b-Eng1-1
12403: PPUSH
12404: CALL 4127 0 3
// end ; end ; if energyVDialog = 0 then
12408: LD_EXP 33
12412: PUSH
12413: LD_INT 0
12415: EQUAL
12416: IFFALSE 12422
// EnergyDialog ;
12418: CALL 4618 0 0
// end ;
12422: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12423: LD_EXP 34
12427: PUSH
12428: LD_INT 1
12430: EQUAL
12431: PUSH
12432: LD_EXP 35
12436: PUSH
12437: LD_INT 1
12439: EQUAL
12440: AND
12441: IFFALSE 12453
12443: GO 12445
12445: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12446: LD_STRING M1a
12448: PPUSH
12449: CALL_OW 337
12453: END
// every 3 3$0 do
12454: GO 12456
12456: DISABLE
// begin PrepareFirstAttack ;
12457: CALL 3669 0 0
// end ;
12461: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12462: LD_INT 22
12464: PUSH
12465: LD_INT 5
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 21
12474: PUSH
12475: LD_INT 1
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 3
12484: PUSH
12485: LD_INT 24
12487: PUSH
12488: LD_INT 250
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: PUSH
12509: LD_INT 0
12511: GREATER
12512: PUSH
12513: LD_EXP 23
12517: PUSH
12518: LD_INT 1
12520: EQUAL
12521: AND
12522: IFFALSE 12823
12524: GO 12526
12526: DISABLE
12527: LD_INT 0
12529: PPUSH
// begin firstRussianAttack = 2 ;
12530: LD_ADDR_EXP 23
12534: PUSH
12535: LD_INT 2
12537: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12538: LD_INT 22
12540: PUSH
12541: LD_INT 5
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 21
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PPUSH
12562: CALL_OW 69
12566: PPUSH
12567: LD_INT 125
12569: PPUSH
12570: LD_INT 98
12572: PPUSH
12573: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12577: LD_INT 22
12579: PUSH
12580: LD_INT 1
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 21
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 69
12605: PUSH
12606: LD_EXP 1
12610: PUSH
12611: LD_EXP 7
12615: PUSH
12616: LD_EXP 4
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: DIFF
12626: PPUSH
12627: LD_STRING DAtt1-Sol1-1
12629: PPUSH
12630: LD_STRING DAtt1-FSol1-1
12632: PPUSH
12633: CALL 4127 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12637: LD_EXP 1
12641: PPUSH
12642: LD_STRING DAtt1-JMM-1
12644: PPUSH
12645: CALL_OW 88
// if Lisa then
12649: LD_EXP 4
12653: IFFALSE 12669
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12655: LD_EXP 4
12659: PPUSH
12660: LD_STRING DAtt1a-Lisa-1
12662: PPUSH
12663: CALL_OW 88
// end else
12667: GO 12740
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12669: LD_INT 22
12671: PUSH
12672: LD_INT 1
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 21
12681: PUSH
12682: LD_INT 1
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: LD_INT 26
12691: PUSH
12692: LD_INT 1
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: PPUSH
12704: CALL_OW 69
12708: PUSH
12709: LD_EXP 1
12713: PUSH
12714: LD_EXP 7
12718: PUSH
12719: LD_EXP 4
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: LIST
12728: DIFF
12729: PPUSH
12730: LD_STRING DAtt1a-Sol1-1
12732: PPUSH
12733: LD_STRING DAtt1-FSol1-1
12735: PPUSH
12736: CALL 4127 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12740: LD_EXP 1
12744: PPUSH
12745: LD_STRING DAtt1a-JMM-1
12747: PPUSH
12748: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12752: LD_INT 22
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 21
12764: PUSH
12765: LD_INT 1
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 26
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: PUSH
12792: LD_EXP 1
12796: PUSH
12797: LD_EXP 7
12801: PUSH
12802: LD_EXP 4
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: DIFF
12812: PPUSH
12813: LD_STRING DAtt1b-Sol1-1
12815: PPUSH
12816: LD_STRING DAtt1a-Sol1-1
12818: PPUSH
12819: CALL 4127 0 3
// end ;
12823: PPOPN 1
12825: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12826: LD_EXP 23
12830: PUSH
12831: LD_INT 2
12833: EQUAL
12834: IFFALSE 12896
12836: GO 12838
12838: DISABLE
12839: LD_INT 0
12841: PPUSH
// begin enable ;
12842: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12843: LD_ADDR_VAR 0 1
12847: PUSH
12848: LD_INT 5
12850: PPUSH
12851: LD_INT 22
12853: PUSH
12854: LD_INT 5
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 21
12863: PUSH
12864: LD_INT 1
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PPUSH
12875: CALL_OW 70
12879: PUSH
12880: FOR_IN
12881: IFFALSE 12894
// RemoveUnit ( i ) ;
12883: LD_VAR 0 1
12887: PPUSH
12888: CALL_OW 64
12892: GO 12880
12894: POP
12895: POP
// end ;
12896: PPOPN 1
12898: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12899: LD_INT 22
12901: PUSH
12902: LD_INT 5
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: PPUSH
12912: CALL_OW 69
12916: PUSH
12917: LD_INT 0
12919: EQUAL
12920: PUSH
12921: LD_EXP 23
12925: PUSH
12926: LD_INT 2
12928: EQUAL
12929: AND
12930: IFFALSE 12943
12932: GO 12934
12934: DISABLE
// firstRussianAttack = 3 ;
12935: LD_ADDR_EXP 23
12939: PUSH
12940: LD_INT 3
12942: ST_TO_ADDR
12943: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12944: LD_EXP 28
12948: PUSH
12949: LD_INT 0
12951: EQUAL
12952: IFFALSE 13033
12954: GO 12956
12956: DISABLE
// begin timerStatus = 4 ;
12957: LD_ADDR_EXP 29
12961: PUSH
12962: LD_INT 4
12964: ST_TO_ADDR
// DialogueOn ;
12965: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12969: LD_EXP 13
12973: PPUSH
12974: LD_STRING D2-Don-1
12976: PPUSH
12977: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12981: LD_EXP 1
12985: PPUSH
12986: LD_STRING D2-JMM-1
12988: PPUSH
12989: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12993: LD_EXP 13
12997: PPUSH
12998: LD_STRING D2-Don-2
13000: PPUSH
13001: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13005: LD_EXP 1
13009: PPUSH
13010: LD_STRING D2-JMM-2
13012: PPUSH
13013: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13017: LD_EXP 13
13021: PPUSH
13022: LD_STRING D2-Don-3
13024: PPUSH
13025: CALL_OW 94
// DialogueOff ;
13029: CALL_OW 7
// end ;
13033: END
// every 12 12$0 do var tmp ;
13034: GO 13036
13036: DISABLE
13037: LD_INT 0
13039: PPUSH
// begin PrepareDonaldsonArmy ;
13040: CALL 1062 0 0
// CenterNowOnUnits ( Donaldson ) ;
13044: LD_EXP 13
13048: PPUSH
13049: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13053: LD_ADDR_VAR 0 1
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_INT 4
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 1
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 26
13080: PUSH
13081: LD_INT 1
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 25
13090: PUSH
13091: LD_INT 1
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 69
13108: PUSH
13109: LD_EXP 5
13113: PUSH
13114: EMPTY
13115: LIST
13116: DIFF
13117: ST_TO_ADDR
// DialogueOn ;
13118: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13122: LD_VAR 0 1
13126: PPUSH
13127: LD_STRING D3-Sol1-1
13129: PPUSH
13130: LD_STRING D3-Sol1-1
13132: PPUSH
13133: CALL 4127 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13137: LD_INT 22
13139: PUSH
13140: LD_INT 4
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 21
13149: PUSH
13150: LD_INT 1
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 26
13159: PUSH
13160: LD_INT 1
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 25
13169: PUSH
13170: LD_INT 3
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: PPUSH
13183: CALL_OW 69
13187: PPUSH
13188: LD_STRING D3-Sol2-1
13190: PPUSH
13191: LD_STRING D3-Sol2-1
13193: PPUSH
13194: CALL 4127 0 3
// if Frank then
13198: LD_EXP 5
13202: IFFALSE 13216
// Say ( Frank , D3-Frank-1 ) ;
13204: LD_EXP 5
13208: PPUSH
13209: LD_STRING D3-Frank-1
13211: PPUSH
13212: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13216: LD_EXP 13
13220: PPUSH
13221: LD_STRING D3-Don-1
13223: PPUSH
13224: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13228: LD_EXP 13
13232: PPUSH
13233: LD_STRING D3-Don-1a
13235: PPUSH
13236: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13240: LD_EXP 1
13244: PPUSH
13245: LD_STRING D3-JMM-1
13247: PPUSH
13248: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13252: LD_EXP 13
13256: PPUSH
13257: LD_STRING D3-Don-2
13259: PPUSH
13260: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13264: LD_INT 22
13266: PUSH
13267: LD_INT 6
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 21
13276: PUSH
13277: LD_INT 1
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PPUSH
13288: CALL_OW 69
13292: PUSH
13293: LD_INT 0
13295: GREATER
13296: IFFALSE 13434
// begin Say ( JMM , D3-JMM-2 ) ;
13298: LD_EXP 1
13302: PPUSH
13303: LD_STRING D3-JMM-2
13305: PPUSH
13306: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13310: LD_EXP 13
13314: PPUSH
13315: LD_STRING D3-Don-3
13317: PPUSH
13318: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13322: LD_EXP 1
13326: PPUSH
13327: LD_STRING D3-JMM-3
13329: PPUSH
13330: CALL_OW 88
// if IsOK ( Frank ) then
13334: LD_EXP 5
13338: PPUSH
13339: CALL_OW 302
13343: IFFALSE 13357
// Say ( Frank , D3-Frank-3 ) ;
13345: LD_EXP 5
13349: PPUSH
13350: LD_STRING D3-Frank-3
13352: PPUSH
13353: CALL_OW 88
// DialogueOff ;
13357: CALL_OW 7
// if IsOK ( Frank ) then
13361: LD_EXP 5
13365: PPUSH
13366: CALL_OW 302
13370: IFFALSE 13432
// begin SetSide ( Frank , 0 ) ;
13372: LD_EXP 5
13376: PPUSH
13377: LD_INT 0
13379: PPUSH
13380: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13384: LD_EXP 5
13388: PPUSH
13389: LD_INT 12
13391: PPUSH
13392: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13396: LD_EXP 5
13400: PPUSH
13401: LD_STRING Frank
13403: PPUSH
13404: CALL_OW 38
// Wait ( 0 0$3 ) ;
13408: LD_INT 105
13410: PPUSH
13411: CALL_OW 67
// frankScoutBase = 1 ;
13415: LD_ADDR_EXP 25
13419: PUSH
13420: LD_INT 1
13422: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13423: LD_EXP 5
13427: PPUSH
13428: CALL_OW 64
// end ; end else
13432: GO 13521
// begin Say ( JMM , D3-JMM-4 ) ;
13434: LD_EXP 1
13438: PPUSH
13439: LD_STRING D3-JMM-4
13441: PPUSH
13442: CALL_OW 88
// DialogueOff ;
13446: CALL_OW 7
// if IsOK ( Frank ) then
13450: LD_EXP 5
13454: PPUSH
13455: CALL_OW 302
13459: IFFALSE 13521
// begin SetSide ( Frank , 0 ) ;
13461: LD_EXP 5
13465: PPUSH
13466: LD_INT 0
13468: PPUSH
13469: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13473: LD_EXP 5
13477: PPUSH
13478: LD_INT 12
13480: PPUSH
13481: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13485: LD_EXP 5
13489: PPUSH
13490: LD_STRING 04t_Frank
13492: PPUSH
13493: CALL_OW 38
// Wait ( 0 0$3 ) ;
13497: LD_INT 105
13499: PPUSH
13500: CALL_OW 67
// frankScoutBase = 1 ;
13504: LD_ADDR_EXP 25
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13512: LD_EXP 5
13516: PPUSH
13517: CALL_OW 64
// end ; end ; end ;
13521: PPOPN 1
13523: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13524: LD_EXP 13
13528: PPUSH
13529: CALL_OW 255
13533: PUSH
13534: LD_INT 4
13536: EQUAL
13537: PUSH
13538: LD_EXP 13
13542: PPUSH
13543: CALL_OW 302
13547: AND
13548: IFFALSE 13573
13550: GO 13552
13552: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13553: LD_EXP 13
13557: PPUSH
13558: LD_STRING D3b-Don-1
13560: PPUSH
13561: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13565: LD_ADDR_EXP 41
13569: PUSH
13570: LD_INT 1
13572: ST_TO_ADDR
// end ;
13573: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13574: LD_EXP 24
13578: PUSH
13579: LD_INT 0
13581: EQUAL
13582: IFFALSE 13738
13584: GO 13586
13586: DISABLE
13587: LD_INT 0
13589: PPUSH
13590: PPUSH
// begin enable ;
13591: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13592: LD_ADDR_VAR 0 1
13596: PUSH
13597: LD_INT 22
13599: PUSH
13600: LD_INT 4
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 21
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: PUSH
13626: FOR_IN
13627: IFFALSE 13736
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13629: LD_ADDR_VAR 0 2
13633: PUSH
13634: LD_INT 22
13636: PUSH
13637: LD_INT 1
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 21
13646: PUSH
13647: LD_INT 1
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PPUSH
13658: CALL_OW 69
13662: PUSH
13663: FOR_IN
13664: IFFALSE 13732
// begin if GetDistUnits ( i , j ) < 7 then
13666: LD_VAR 0 1
13670: PPUSH
13671: LD_VAR 0 2
13675: PPUSH
13676: CALL_OW 296
13680: PUSH
13681: LD_INT 7
13683: LESS
13684: IFFALSE 13730
// begin saveDonaldson = 1 ;
13686: LD_ADDR_EXP 24
13690: PUSH
13691: LD_INT 1
13693: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13694: LD_INT 22
13696: PUSH
13697: LD_INT 4
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 21
13706: PUSH
13707: LD_INT 1
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 69
13722: PPUSH
13723: LD_INT 1
13725: PPUSH
13726: CALL_OW 235
// end ; end ;
13730: GO 13663
13732: POP
13733: POP
// end ;
13734: GO 13626
13736: POP
13737: POP
// end ;
13738: PPOPN 2
13740: END
// every 2 2$0 trigger saveDonaldson = 1 do
13741: LD_EXP 24
13745: PUSH
13746: LD_INT 1
13748: EQUAL
13749: IFFALSE 14052
13751: GO 13753
13753: DISABLE
// begin uc_side = 4 ;
13754: LD_ADDR_OWVAR 20
13758: PUSH
13759: LD_INT 4
13761: ST_TO_ADDR
// uc_nation = 1 ;
13762: LD_ADDR_OWVAR 21
13766: PUSH
13767: LD_INT 1
13769: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
13770: LD_ADDR_EXP 5
13774: PUSH
13775: LD_STRING 04t_Frank
13777: PPUSH
13778: CALL_OW 34
13782: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13783: LD_EXP 5
13787: PPUSH
13788: LD_INT 13
13790: PPUSH
13791: LD_INT 0
13793: PPUSH
13794: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13798: LD_INT 35
13800: PPUSH
13801: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
13805: LD_EXP 1
13809: PPUSH
13810: CALL_OW 310
13814: NOT
13815: PUSH
13816: LD_EXP 1
13820: PPUSH
13821: LD_INT 4
13823: PPUSH
13824: CALL_OW 296
13828: PUSH
13829: LD_INT 20
13831: LESS
13832: AND
13833: IFFALSE 13866
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
13835: LD_EXP 5
13839: PPUSH
13840: LD_EXP 1
13844: PPUSH
13845: CALL_OW 250
13849: PPUSH
13850: LD_EXP 1
13854: PPUSH
13855: CALL_OW 251
13859: PPUSH
13860: CALL_OW 111
13864: GO 13881
// ComMoveXY ( Frank , 51 , 15 ) ;
13866: LD_EXP 5
13870: PPUSH
13871: LD_INT 51
13873: PPUSH
13874: LD_INT 15
13876: PPUSH
13877: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
13881: LD_EXP 5
13885: PPUSH
13886: LD_EXP 1
13890: PPUSH
13891: CALL_OW 296
13895: PUSH
13896: LD_INT 10
13898: LESS
13899: IFFALSE 13798
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13901: LD_EXP 1
13905: PUSH
13906: LD_EXP 5
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 87
// DialogueOn ;
13919: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13923: LD_EXP 5
13927: PPUSH
13928: LD_STRING D3a-Frank-1
13930: PPUSH
13931: CALL_OW 88
// if Lisa then
13935: LD_EXP 4
13939: IFFALSE 13989
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13941: LD_EXP 4
13945: PPUSH
13946: LD_STRING D3a-Lisa-1
13948: PPUSH
13949: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13953: LD_EXP 5
13957: PPUSH
13958: LD_STRING D3a-Frank-2
13960: PPUSH
13961: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13965: LD_EXP 4
13969: PPUSH
13970: LD_STRING D3a-Lisa-2
13972: PPUSH
13973: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13977: LD_EXP 5
13981: PPUSH
13982: LD_STRING D3a-Frank-3
13984: PPUSH
13985: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13989: LD_EXP 1
13993: PPUSH
13994: LD_STRING D3a-JMM-3
13996: PPUSH
13997: CALL_OW 88
// DialogueOff ;
14001: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14005: LD_EXP 5
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 235
// InGameOn ;
14017: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14021: LD_INT 1
14023: PPUSH
14024: LD_INT 7
14026: PPUSH
14027: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14031: LD_INT 93
14033: PPUSH
14034: LD_INT 91
14036: PPUSH
14037: CALL_OW 84
// wait ( 0 0$5 ) ;
14041: LD_INT 175
14043: PPUSH
14044: CALL_OW 67
// InGameOff ;
14048: CALL_OW 9
// end ;
14052: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14053: LD_OWVAR 67
14057: PUSH
14058: LD_INT 2
14060: EQUAL
14061: PUSH
14062: LD_OWVAR 67
14066: PUSH
14067: LD_INT 3
14069: EQUAL
14070: OR
14071: IFFALSE 14095
14073: GO 14075
14075: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14076: LD_INT 24
14078: PPUSH
14079: LD_INT 24
14081: PPUSH
14082: LD_INT 1
14084: PPUSH
14085: LD_INT 1
14087: PPUSH
14088: LD_INT 53
14090: PPUSH
14091: CALL_OW 125
14095: END
// every 18 18$0 do
14096: GO 14098
14098: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14099: LD_EXP 14
14103: PPUSH
14104: LD_STRING D4-Har-1
14106: PPUSH
14107: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14111: LD_EXP 1
14115: PPUSH
14116: LD_STRING D4-JMM-1
14118: PPUSH
14119: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14123: LD_EXP 14
14127: PPUSH
14128: LD_STRING D4-Har-2
14130: PPUSH
14131: CALL_OW 94
// case query ( Q1 ) of 1 :
14135: LD_STRING Q1
14137: PPUSH
14138: CALL_OW 97
14142: PUSH
14143: LD_INT 1
14145: DOUBLE
14146: EQUAL
14147: IFTRUE 14151
14149: GO 14210
14151: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14152: LD_EXP 1
14156: PPUSH
14157: LD_STRING D5-JMM-1
14159: PPUSH
14160: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14164: LD_EXP 14
14168: PPUSH
14169: LD_STRING D5-Har-1
14171: PPUSH
14172: CALL_OW 94
// timeToSupport = 10 10$0 ;
14176: LD_ADDR_EXP 28
14180: PUSH
14181: LD_INT 21000
14183: ST_TO_ADDR
// timerStatus = 2 ;
14184: LD_ADDR_EXP 29
14188: PUSH
14189: LD_INT 2
14191: ST_TO_ADDR
// startTimer = 1 ;
14192: LD_ADDR_EXP 30
14196: PUSH
14197: LD_INT 1
14199: ST_TO_ADDR
// harrAnswer = 1 ;
14200: LD_ADDR_EXP 26
14204: PUSH
14205: LD_INT 1
14207: ST_TO_ADDR
// end ; 2 :
14208: GO 14345
14210: LD_INT 2
14212: DOUBLE
14213: EQUAL
14214: IFTRUE 14218
14216: GO 14277
14218: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14219: LD_EXP 1
14223: PPUSH
14224: LD_STRING D5-JMM-2
14226: PPUSH
14227: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14231: LD_EXP 14
14235: PPUSH
14236: LD_STRING D5-Har-2
14238: PPUSH
14239: CALL_OW 94
// timeToSupport = 5 5$0 ;
14243: LD_ADDR_EXP 28
14247: PUSH
14248: LD_INT 10500
14250: ST_TO_ADDR
// timerStatus = 2 ;
14251: LD_ADDR_EXP 29
14255: PUSH
14256: LD_INT 2
14258: ST_TO_ADDR
// startTimer = 1 ;
14259: LD_ADDR_EXP 30
14263: PUSH
14264: LD_INT 1
14266: ST_TO_ADDR
// harrAnswer = 2 ;
14267: LD_ADDR_EXP 26
14271: PUSH
14272: LD_INT 2
14274: ST_TO_ADDR
// end ; 3 :
14275: GO 14345
14277: LD_INT 3
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14344
14285: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14286: LD_EXP 1
14290: PPUSH
14291: LD_STRING D5-JMM-3
14293: PPUSH
14294: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14298: LD_EXP 14
14302: PPUSH
14303: LD_STRING D5-Har-3
14305: PPUSH
14306: CALL_OW 94
// timeToSupport = 5 5$0 ;
14310: LD_ADDR_EXP 28
14314: PUSH
14315: LD_INT 10500
14317: ST_TO_ADDR
// timerStatus = 2 ;
14318: LD_ADDR_EXP 29
14322: PUSH
14323: LD_INT 2
14325: ST_TO_ADDR
// startTimer = 1 ;
14326: LD_ADDR_EXP 30
14330: PUSH
14331: LD_INT 1
14333: ST_TO_ADDR
// harrAnswer = 3 ;
14334: LD_ADDR_EXP 26
14338: PUSH
14339: LD_INT 3
14341: ST_TO_ADDR
// end ; end ;
14342: GO 14345
14344: POP
// end ;
14345: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14346: LD_EXP 29
14350: PUSH
14351: LD_INT 2
14353: EQUAL
14354: PUSH
14355: LD_EXP 28
14359: PUSH
14360: LD_INT 0
14362: EQUAL
14363: AND
14364: IFFALSE 14641
14366: GO 14368
14368: DISABLE
// begin timerStatus = 4 ;
14369: LD_ADDR_EXP 29
14373: PUSH
14374: LD_INT 4
14376: ST_TO_ADDR
// if harrAnswer = 1 then
14377: LD_EXP 26
14381: PUSH
14382: LD_INT 1
14384: EQUAL
14385: IFFALSE 14465
// begin PrepareHarrisonSupport ( 3 ) ;
14387: LD_INT 3
14389: PPUSH
14390: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14394: LD_INT 2100
14396: PPUSH
14397: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14401: LD_EXP 14
14405: PPUSH
14406: LD_STRING D7-Har-1
14408: PPUSH
14409: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14413: LD_STRING M2
14415: PPUSH
14416: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14420: LD_ADDR_EXP 27
14424: PUSH
14425: LD_INT 31500
14427: PUSH
14428: LD_INT 10500
14430: PUSH
14431: LD_INT 8400
14433: PUSH
14434: LD_INT 6300
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: LD_OWVAR 67
14446: ARRAY
14447: PLUS
14448: ST_TO_ADDR
// startTimer = 1 ;
14449: LD_ADDR_EXP 30
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// timerStatus = 3 ;
14457: LD_ADDR_EXP 29
14461: PUSH
14462: LD_INT 3
14464: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14465: LD_EXP 26
14469: PUSH
14470: LD_INT 2
14472: EQUAL
14473: IFFALSE 14553
// begin PrepareHarrisonSupport ( 4 ) ;
14475: LD_INT 4
14477: PPUSH
14478: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14482: LD_INT 2100
14484: PPUSH
14485: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14489: LD_EXP 14
14493: PPUSH
14494: LD_STRING D7-Har-1
14496: PPUSH
14497: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14501: LD_STRING M2
14503: PPUSH
14504: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14508: LD_ADDR_EXP 27
14512: PUSH
14513: LD_INT 27300
14515: PUSH
14516: LD_INT 8400
14518: PUSH
14519: LD_INT 8400
14521: PUSH
14522: LD_INT 6300
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: PUSH
14530: LD_OWVAR 67
14534: ARRAY
14535: PLUS
14536: ST_TO_ADDR
// startTimer = 1 ;
14537: LD_ADDR_EXP 30
14541: PUSH
14542: LD_INT 1
14544: ST_TO_ADDR
// timerStatus = 3 ;
14545: LD_ADDR_EXP 29
14549: PUSH
14550: LD_INT 3
14552: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14553: LD_EXP 26
14557: PUSH
14558: LD_INT 3
14560: EQUAL
14561: IFFALSE 14641
// begin PrepareHarrisonSupport ( 5 ) ;
14563: LD_INT 5
14565: PPUSH
14566: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14570: LD_INT 2100
14572: PPUSH
14573: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14577: LD_EXP 14
14581: PPUSH
14582: LD_STRING D7-Har-1
14584: PPUSH
14585: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14589: LD_STRING M2
14591: PPUSH
14592: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14596: LD_ADDR_EXP 27
14600: PUSH
14601: LD_INT 21000
14603: PUSH
14604: LD_INT 8400
14606: PUSH
14607: LD_INT 6300
14609: PUSH
14610: LD_INT 4200
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: PUSH
14618: LD_OWVAR 67
14622: ARRAY
14623: PLUS
14624: ST_TO_ADDR
// startTimer = 1 ;
14625: LD_ADDR_EXP 30
14629: PUSH
14630: LD_INT 1
14632: ST_TO_ADDR
// timerStatus = 3 ;
14633: LD_ADDR_EXP 29
14637: PUSH
14638: LD_INT 3
14640: ST_TO_ADDR
// end ; end ;
14641: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14642: LD_EXP 27
14646: PUSH
14647: LD_INT 8400
14649: LESSEQUAL
14650: PUSH
14651: LD_EXP 29
14655: PUSH
14656: LD_INT 3
14658: EQUAL
14659: AND
14660: IFFALSE 14692
14662: GO 14664
14664: DISABLE
// begin DialogueOn ;
14665: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14669: LD_EXP 14
14673: PPUSH
14674: LD_STRING D7a-Har-1
14676: PPUSH
14677: CALL_OW 94
// DialogueOff ;
14681: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14685: LD_STRING M2a
14687: PPUSH
14688: CALL_OW 337
// end ;
14692: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
14693: LD_EXP 27
14697: PUSH
14698: LD_INT 0
14700: LESSEQUAL
14701: PUSH
14702: LD_EXP 29
14706: PUSH
14707: LD_INT 3
14709: EQUAL
14710: AND
14711: PUSH
14712: LD_EXP 40
14716: NOT
14717: AND
14718: IFFALSE 14857
14720: GO 14722
14722: DISABLE
14723: LD_INT 0
14725: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14726: LD_ADDR_VAR 0 1
14730: PUSH
14731: LD_INT 22
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PPUSH
14741: CALL_OW 69
14745: PUSH
14746: LD_EXP 1
14750: PUSH
14751: EMPTY
14752: LIST
14753: DIFF
14754: ST_TO_ADDR
// saveDonaldson = 2 ;
14755: LD_ADDR_EXP 24
14759: PUSH
14760: LD_INT 2
14762: ST_TO_ADDR
// DialogueOn ;
14763: CALL_OW 6
// if IsOK ( Donaldson ) then
14767: LD_EXP 13
14771: PPUSH
14772: CALL_OW 302
14776: IFFALSE 14792
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14778: LD_EXP 14
14782: PPUSH
14783: LD_STRING D8-Har-1
14785: PPUSH
14786: CALL_OW 94
// end else
14790: GO 14804
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14792: LD_EXP 14
14796: PPUSH
14797: LD_STRING D8-Har-1a
14799: PPUSH
14800: CALL_OW 94
// end ; DialogueOff ;
14804: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14808: LD_VAR 0 1
14812: PPUSH
14813: LD_INT 4
14815: PPUSH
14816: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14820: LD_VAR 0 1
14824: PPUSH
14825: LD_INT 88
14827: PPUSH
14828: LD_INT 89
14830: PPUSH
14831: CALL_OW 114
// honor = 0 ;
14835: LD_ADDR_EXP 39
14839: PUSH
14840: LD_INT 0
14842: ST_TO_ADDR
// wait ( 0 0$10 ) ;
14843: LD_INT 350
14845: PPUSH
14846: CALL_OW 67
// YouLost ( LostCommand ) ;
14850: LD_STRING LostCommand
14852: PPUSH
14853: CALL_OW 104
// end ;
14857: PPOPN 1
14859: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14860: LD_INT 22
14862: PUSH
14863: LD_INT 6
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 1
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: PUSH
14889: LD_INT 0
14891: EQUAL
14892: PUSH
14893: LD_EXP 20
14897: PUSH
14898: LD_INT 0
14900: EQUAL
14901: AND
14902: PUSH
14903: LD_EXP 42
14907: PUSH
14908: LD_INT 1
14910: EQUAL
14911: AND
14912: IFFALSE 15006
14914: GO 14916
14916: DISABLE
14917: LD_INT 0
14919: PPUSH
14920: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14921: LD_ADDR_VAR 0 2
14925: PUSH
14926: LD_INT 22
14928: PUSH
14929: LD_INT 1
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 1
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 23
14948: PUSH
14949: LD_INT 1
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: ST_TO_ADDR
// for i in tmp do
14966: LD_ADDR_VAR 0 1
14970: PUSH
14971: LD_VAR 0 2
14975: PUSH
14976: FOR_IN
14977: IFFALSE 15004
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14979: LD_VAR 0 1
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: LD_INT 4
14989: PPUSH
14990: CALL_OW 12
14994: PPUSH
14995: LD_INT 500
14997: PPUSH
14998: CALL_OW 492
// end ;
15002: GO 14976
15004: POP
15005: POP
// end ; end_of_file
15006: PPOPN 2
15008: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15009: GO 15011
15011: DISABLE
15012: LD_INT 0
15014: PPUSH
// begin enemyWayX = [ ] ;
15015: LD_ADDR_EXP 46
15019: PUSH
15020: EMPTY
15021: ST_TO_ADDR
// enemyWayY = [ ] ;
15022: LD_ADDR_EXP 47
15026: PUSH
15027: EMPTY
15028: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15029: LD_ADDR_VAR 0 1
15033: PUSH
15034: LD_INT 1
15036: PPUSH
15037: LD_INT 3
15039: PPUSH
15040: CALL_OW 12
15044: ST_TO_ADDR
// if rnd = 1 then
15045: LD_VAR 0 1
15049: PUSH
15050: LD_INT 1
15052: EQUAL
15053: IFFALSE 15093
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15055: LD_ADDR_EXP 46
15059: PUSH
15060: LD_INT 73
15062: PUSH
15063: LD_INT 46
15065: PUSH
15066: LD_INT 29
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15074: LD_ADDR_EXP 47
15078: PUSH
15079: LD_INT 71
15081: PUSH
15082: LD_INT 43
15084: PUSH
15085: LD_INT 29
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: ST_TO_ADDR
// end ; if rnd = 2 then
15093: LD_VAR 0 1
15097: PUSH
15098: LD_INT 2
15100: EQUAL
15101: IFFALSE 15125
// begin enemyWayX = [ 64 ] ;
15103: LD_ADDR_EXP 46
15107: PUSH
15108: LD_INT 64
15110: PUSH
15111: EMPTY
15112: LIST
15113: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15114: LD_ADDR_EXP 47
15118: PUSH
15119: LD_INT 43
15121: PUSH
15122: EMPTY
15123: LIST
15124: ST_TO_ADDR
// end ; if rnd = 3 then
15125: LD_VAR 0 1
15129: PUSH
15130: LD_INT 3
15132: EQUAL
15133: IFFALSE 15157
// begin enemyWayX = [ 80 ] ;
15135: LD_ADDR_EXP 46
15139: PUSH
15140: LD_INT 80
15142: PUSH
15143: EMPTY
15144: LIST
15145: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15146: LD_ADDR_EXP 47
15150: PUSH
15151: LD_INT 28
15153: PUSH
15154: EMPTY
15155: LIST
15156: ST_TO_ADDR
// end ; enable ;
15157: ENABLE
// end ;
15158: PPOPN 1
15160: END
// every 0 0$1 trigger AIEnable = 1 do
15161: LD_EXP 37
15165: PUSH
15166: LD_INT 1
15168: EQUAL
15169: IFFALSE 15283
15171: GO 15173
15173: DISABLE
// begin enable ;
15174: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15175: LD_INT 3
15177: PPUSH
15178: LD_INT 21
15180: PPUSH
15181: LD_INT 7
15183: PPUSH
15184: CALL 5651 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15188: LD_INT 3
15190: PPUSH
15191: LD_INT 8
15193: PPUSH
15194: LD_INT 7
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL 5972 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15204: LD_INT 3
15206: PPUSH
15207: LD_INT 17
15209: PPUSH
15210: LD_INT 108
15212: PPUSH
15213: LD_INT 95
15215: PPUSH
15216: CALL 7216 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15220: LD_INT 3
15222: PPUSH
15223: LD_INT 23
15225: PPUSH
15226: LD_EXP 46
15230: PPUSH
15231: LD_EXP 47
15235: PPUSH
15236: CALL 6628 0 4
// if baseReadyToBuild = 2 then
15240: LD_EXP 20
15244: PUSH
15245: LD_INT 2
15247: EQUAL
15248: IFFALSE 15283
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15250: LD_INT 6
15252: PPUSH
15253: LD_EXP 21
15257: PPUSH
15258: LD_INT 6
15260: PPUSH
15261: CALL 5651 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15265: LD_INT 6
15267: PPUSH
15268: LD_INT 9
15270: PPUSH
15271: LD_INT 6
15273: PPUSH
15274: LD_EXP 22
15278: PPUSH
15279: CALL 5972 0 4
// end ; end ;
15283: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15284: LD_EXP 15
15288: PPUSH
15289: CALL_OW 310
15293: NOT
15294: PUSH
15295: LD_INT 21
15297: PPUSH
15298: CALL_OW 302
15302: AND
15303: PUSH
15304: LD_INT 21
15306: PPUSH
15307: CALL_OW 255
15311: PUSH
15312: LD_INT 3
15314: EQUAL
15315: AND
15316: IFFALSE 15334
15318: GO 15320
15320: DISABLE
// begin enable ;
15321: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15322: LD_EXP 15
15326: PPUSH
15327: LD_INT 21
15329: PPUSH
15330: CALL_OW 120
// end ;
15334: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15335: LD_INT 22
15337: PUSH
15338: LD_INT 3
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 21
15347: PUSH
15348: LD_INT 2
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 55
15357: PUSH
15358: EMPTY
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: PPUSH
15366: CALL_OW 69
15370: PUSH
15371: LD_INT 0
15373: EQUAL
15374: PUSH
15375: LD_INT 1
15377: PPUSH
15378: CALL_OW 255
15382: PUSH
15383: LD_INT 3
15385: EQUAL
15386: AND
15387: PUSH
15388: LD_INT 21
15390: PPUSH
15391: CALL_OW 302
15395: AND
15396: PUSH
15397: LD_INT 21
15399: PPUSH
15400: CALL_OW 255
15404: PUSH
15405: LD_INT 3
15407: EQUAL
15408: AND
15409: PUSH
15410: LD_INT 21
15412: PPUSH
15413: CALL_OW 302
15417: AND
15418: IFFALSE 15623
15420: GO 15422
15422: DISABLE
// begin enable ;
15423: ENABLE
// if Difficulty = 1 then
15424: LD_OWVAR 67
15428: PUSH
15429: LD_INT 1
15431: EQUAL
15432: IFFALSE 15476
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15434: LD_INT 3
15436: PPUSH
15437: LD_INT 24
15439: PPUSH
15440: LD_OWVAR 67
15444: PUSH
15445: LD_INT 2
15447: PLUS
15448: PPUSH
15449: LD_INT 42
15451: PUSH
15452: LD_INT 42
15454: PUSH
15455: LD_INT 43
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: LIST
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: LD_INT 21
15471: PPUSH
15472: CALL 6516 0 7
// if Difficulty = 2 then
15476: LD_OWVAR 67
15480: PUSH
15481: LD_INT 2
15483: EQUAL
15484: IFFALSE 15551
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15486: LD_INT 3
15488: PPUSH
15489: LD_INT 24
15491: PPUSH
15492: LD_OWVAR 67
15496: PUSH
15497: LD_INT 2
15499: PLUS
15500: PPUSH
15501: LD_INT 42
15503: PUSH
15504: LD_INT 42
15506: PUSH
15507: LD_INT 43
15509: PUSH
15510: LD_INT 43
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: PPUSH
15519: LD_INT 1
15521: PPUSH
15522: LD_INT 1
15524: PPUSH
15525: LD_INT 21
15527: PUSH
15528: LD_INT 22
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 1
15537: PPUSH
15538: LD_INT 2
15540: PPUSH
15541: CALL_OW 12
15545: ARRAY
15546: PPUSH
15547: CALL 6516 0 7
// if Difficulty = 3 then
15551: LD_OWVAR 67
15555: PUSH
15556: LD_INT 3
15558: EQUAL
15559: IFFALSE 15623
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15561: LD_INT 3
15563: PPUSH
15564: LD_INT 24
15566: PPUSH
15567: LD_OWVAR 67
15571: PUSH
15572: LD_INT 2
15574: PPUSH
15575: LD_INT 3
15577: PPUSH
15578: CALL_OW 12
15582: PLUS
15583: PPUSH
15584: LD_INT 43
15586: PUSH
15587: LD_INT 43
15589: PUSH
15590: LD_INT 43
15592: PUSH
15593: LD_INT 43
15595: PUSH
15596: LD_INT 44
15598: PUSH
15599: LD_INT 44
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: PPUSH
15610: LD_INT 1
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: LD_INT 22
15618: PPUSH
15619: CALL 6516 0 7
// end ;
15623: END
// every 0 0$1 do
15624: GO 15626
15626: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15627: LD_INT 3
15629: PPUSH
15630: LD_INT 1
15632: PPUSH
15633: LD_INT 3
15635: PPUSH
15636: CALL 5566 0 3
15640: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15641: LD_EXP 20
15645: PUSH
15646: LD_INT 1
15648: EQUAL
15649: IFFALSE 15796
15651: GO 15653
15653: DISABLE
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 2
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 34
15685: PUSH
15686: LD_INT 51
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 1
15710: ARRAY
15711: PPUSH
15712: LD_EXP 21
15716: PPUSH
15717: CALL_OW 250
15721: PUSH
15722: LD_INT 5
15724: MINUS
15725: PPUSH
15726: LD_EXP 21
15730: PPUSH
15731: CALL_OW 251
15735: PUSH
15736: LD_INT 5
15738: MINUS
15739: PPUSH
15740: CALL_OW 111
// wait ( 0 0$5 ) ;
15744: LD_INT 175
15746: PPUSH
15747: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15751: LD_VAR 0 2
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: LD_INT 41
15762: PPUSH
15763: LD_INT 52
15765: PPUSH
15766: CALL_OW 177
// wait ( 0 0$40 ) ;
15770: LD_INT 1400
15772: PPUSH
15773: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15777: LD_VAR 0 2
15781: PUSH
15782: LD_INT 1
15784: ARRAY
15785: PPUSH
15786: LD_INT 41
15788: PPUSH
15789: LD_INT 44
15791: PPUSH
15792: CALL_OW 111
// end ;
15796: PPOPN 2
15798: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15799: LD_EXP 21
15803: PPUSH
15804: CALL_OW 274
15808: PPUSH
15809: LD_INT 1
15811: PPUSH
15812: CALL_OW 275
15816: PUSH
15817: LD_INT 100
15819: GREATEREQUAL
15820: IFFALSE 16048
15822: GO 15824
15824: DISABLE
15825: LD_INT 0
15827: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15828: LD_ADDR_VAR 0 1
15832: PUSH
15833: LD_INT 22
15835: PUSH
15836: LD_INT 6
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 21
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 25
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: PPUSH
15868: CALL_OW 69
15872: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15873: LD_VAR 0 1
15877: PUSH
15878: LD_INT 1
15880: ARRAY
15881: PPUSH
15882: LD_INT 4
15884: PPUSH
15885: LD_INT 39
15887: PPUSH
15888: LD_INT 37
15890: PPUSH
15891: LD_INT 3
15893: PPUSH
15894: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15898: LD_VAR 0 1
15902: PUSH
15903: LD_INT 1
15905: ARRAY
15906: PPUSH
15907: LD_INT 29
15909: PPUSH
15910: LD_INT 42
15912: PPUSH
15913: LD_INT 54
15915: PPUSH
15916: LD_INT 3
15918: PPUSH
15919: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15923: LD_VAR 0 1
15927: PUSH
15928: LD_INT 1
15930: ARRAY
15931: PPUSH
15932: LD_INT 6
15934: PPUSH
15935: LD_INT 38
15937: PPUSH
15938: LD_INT 48
15940: PPUSH
15941: LD_INT 0
15943: PPUSH
15944: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15948: LD_VAR 0 1
15952: PUSH
15953: LD_INT 1
15955: ARRAY
15956: PPUSH
15957: LD_INT 2
15959: PPUSH
15960: LD_INT 32
15962: PPUSH
15963: LD_INT 38
15965: PPUSH
15966: LD_INT 2
15968: PPUSH
15969: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15973: LD_VAR 0 1
15977: PUSH
15978: LD_INT 1
15980: ARRAY
15981: PPUSH
15982: LD_INT 26
15984: PPUSH
15985: LD_INT 39
15987: PPUSH
15988: LD_INT 55
15990: PPUSH
15991: LD_INT 3
15993: PPUSH
15994: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15998: LD_VAR 0 1
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: PPUSH
16007: LD_INT 32
16009: PPUSH
16010: LD_INT 31
16012: PPUSH
16013: LD_INT 31
16015: PPUSH
16016: LD_INT 3
16018: PPUSH
16019: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16023: LD_VAR 0 1
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: PPUSH
16032: LD_INT 31
16034: PPUSH
16035: LD_INT 50
16037: PPUSH
16038: LD_INT 51
16040: PPUSH
16041: LD_INT 4
16043: PPUSH
16044: CALL_OW 205
// end ; end_of_file
16048: PPOPN 1
16050: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16060: LD_ADDR_VAR 0 3
16064: PUSH
16065: LD_INT 22
16067: PUSH
16068: LD_INT 6
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 21
16077: PUSH
16078: LD_INT 1
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 25
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 3
16097: PUSH
16098: LD_INT 54
16100: PUSH
16101: EMPTY
16102: LIST
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: PPUSH
16114: CALL_OW 69
16118: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16119: LD_ADDR_VAR 0 7
16123: PUSH
16124: LD_INT 22
16126: PUSH
16127: LD_INT 6
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 21
16136: PUSH
16137: LD_INT 1
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 25
16146: PUSH
16147: LD_INT 1
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 54
16156: PUSH
16157: EMPTY
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: PPUSH
16166: CALL_OW 69
16170: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16171: LD_ADDR_VAR 0 4
16175: PUSH
16176: LD_INT 22
16178: PUSH
16179: LD_INT 6
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 21
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 25
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: LIST
16210: PPUSH
16211: CALL_OW 69
16215: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16216: LD_ADDR_VAR 0 6
16220: PUSH
16221: LD_INT 22
16223: PUSH
16224: LD_INT 6
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 21
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 25
16243: PUSH
16244: LD_INT 4
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: PPUSH
16256: CALL_OW 69
16260: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16261: LD_ADDR_VAR 0 8
16265: PUSH
16266: LD_INT 22
16268: PUSH
16269: LD_INT 6
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 34
16288: PUSH
16289: LD_INT 51
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: PPUSH
16301: CALL_OW 69
16305: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 255
16315: PUSH
16316: LD_INT 6
16318: EQUAL
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 266
16329: PUSH
16330: LD_INT 0
16332: EQUAL
16333: AND
16334: IFFALSE 16354
// begin ruPDepot = building ;
16336: LD_ADDR_EXP 21
16340: PUSH
16341: LD_VAR 0 1
16345: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16346: LD_ADDR_EXP 20
16350: PUSH
16351: LD_INT 1
16353: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 266
16363: PUSH
16364: LD_INT 4
16366: EQUAL
16367: PUSH
16368: LD_VAR 0 1
16372: PPUSH
16373: CALL_OW 255
16377: PUSH
16378: LD_INT 6
16380: EQUAL
16381: AND
16382: IFFALSE 16415
// for i in tmpSold do
16384: LD_ADDR_VAR 0 2
16388: PUSH
16389: LD_VAR 0 3
16393: PUSH
16394: FOR_IN
16395: IFFALSE 16413
// ComEnterUnit ( i , building ) ;
16397: LD_VAR 0 2
16401: PPUSH
16402: LD_VAR 0 1
16406: PPUSH
16407: CALL_OW 120
16411: GO 16394
16413: POP
16414: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16415: LD_VAR 0 1
16419: PPUSH
16420: CALL_OW 266
16424: PUSH
16425: LD_INT 6
16427: EQUAL
16428: PUSH
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 255
16438: PUSH
16439: LD_INT 6
16441: EQUAL
16442: AND
16443: IFFALSE 16501
// begin for i in tmpSci do
16445: LD_ADDR_VAR 0 2
16449: PUSH
16450: LD_VAR 0 6
16454: PUSH
16455: FOR_IN
16456: IFFALSE 16474
// ComEnterUnit ( i , building ) ;
16458: LD_VAR 0 2
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 120
16472: GO 16455
16474: POP
16475: POP
// ResAllTechs ( 6 , building , 3 ) ;
16476: LD_INT 6
16478: PPUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 3
16486: PPUSH
16487: CALL 5566 0 3
// ruPLab = building ;
16491: LD_ADDR_EXP 22
16495: PUSH
16496: LD_VAR 0 1
16500: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 266
16510: PUSH
16511: LD_INT 2
16513: EQUAL
16514: PUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 255
16524: PUSH
16525: LD_INT 6
16527: EQUAL
16528: AND
16529: IFFALSE 16580
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16531: LD_ADDR_VAR 0 5
16535: PUSH
16536: LD_VAR 0 8
16540: PUSH
16541: LD_INT 1
16543: ARRAY
16544: PPUSH
16545: CALL_OW 313
16549: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16550: LD_VAR 0 5
16554: PPUSH
16555: CALL_OW 121
// wait ( 0 0$1 ) ;
16559: LD_INT 35
16561: PPUSH
16562: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16566: LD_VAR 0 5
16570: PPUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 266
16589: PUSH
16590: LD_INT 32
16592: EQUAL
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 255
16603: PUSH
16604: LD_INT 6
16606: EQUAL
16607: AND
16608: IFFALSE 16660
// begin ComPlaceWeapon ( building , 42 ) ;
16610: LD_VAR 0 1
16614: PPUSH
16615: LD_INT 42
16617: PPUSH
16618: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16622: LD_VAR 0 7
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PPUSH
16631: CALL_OW 122
// wait ( 0 0$1 ) ;
16635: LD_INT 35
16637: PPUSH
16638: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16642: LD_VAR 0 7
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PPUSH
16651: LD_VAR 0 1
16655: PPUSH
16656: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 266
16669: PUSH
16670: LD_INT 31
16672: EQUAL
16673: PUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 255
16683: PUSH
16684: LD_INT 6
16686: EQUAL
16687: AND
16688: IFFALSE 16754
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16690: LD_VAR 0 7
16694: PUSH
16695: LD_INT 2
16697: ARRAY
16698: PPUSH
16699: CALL_OW 122
// wait ( 0 0$1 ) ;
16703: LD_INT 35
16705: PPUSH
16706: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16710: LD_VAR 0 7
16714: PUSH
16715: LD_INT 2
16717: ARRAY
16718: PPUSH
16719: LD_VAR 0 1
16723: PPUSH
16724: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16728: LD_VAR 0 4
16732: PUSH
16733: LD_INT 1
16735: ARRAY
16736: PPUSH
16737: LD_EXP 21
16741: PPUSH
16742: CALL_OW 120
// baseReadyToBuild = 2 ;
16746: LD_ADDR_EXP 20
16750: PUSH
16751: LD_INT 2
16753: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16754: LD_VAR 0 1
16758: PPUSH
16759: CALL_OW 266
16763: PUSH
16764: LD_INT 32
16766: EQUAL
16767: PUSH
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 255
16777: PUSH
16778: LD_INT 1
16780: EQUAL
16781: AND
16782: PUSH
16783: LD_EXP 32
16787: PUSH
16788: LD_INT 0
16790: EQUAL
16791: AND
16792: IFFALSE 17037
// begin bunkerDialog = 1 ;
16794: LD_ADDR_EXP 32
16798: PUSH
16799: LD_INT 1
16801: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16802: LD_EXP 11
16806: PPUSH
16807: CALL_OW 302
16811: IFFALSE 16827
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16813: LD_EXP 11
16817: PPUSH
16818: LD_STRING D11-Eng1-1
16820: PPUSH
16821: CALL_OW 88
// end else
16825: GO 17023
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16827: LD_INT 22
16829: PUSH
16830: LD_INT 1
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 21
16839: PUSH
16840: LD_INT 1
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 25
16849: PUSH
16850: LD_INT 3
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 26
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: PPUSH
16873: CALL_OW 69
16877: PUSH
16878: LD_EXP 1
16882: PUSH
16883: EMPTY
16884: LIST
16885: PUSH
16886: LD_INT 0
16888: GREATER
16889: DIFF
16890: IFFALSE 16964
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16892: LD_INT 22
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 21
16904: PUSH
16905: LD_INT 1
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 25
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 26
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: CALL_OW 69
16942: PUSH
16943: LD_EXP 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: DIFF
16951: PPUSH
16952: LD_STRING D11-Eng1-1
16954: PPUSH
16955: LD_STRING D11-Eng1-1
16957: PPUSH
16958: CALL 4127 0 3
// end else
16962: GO 17023
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16964: LD_INT 22
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 21
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 26
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: PPUSH
16999: CALL_OW 69
17003: PUSH
17004: LD_EXP 1
17008: PUSH
17009: EMPTY
17010: LIST
17011: DIFF
17012: PPUSH
17013: LD_STRING D11-Eng1-1
17015: PPUSH
17016: LD_STRING D11-Eng1-1
17018: PPUSH
17019: CALL 4127 0 3
// end ; end ; if energyVDialog = 0 then
17023: LD_EXP 33
17027: PUSH
17028: LD_INT 0
17030: EQUAL
17031: IFFALSE 17037
// EnergyDialog ;
17033: CALL 4618 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 266
17046: PUSH
17047: LD_INT 29
17049: EQUAL
17050: PUSH
17051: LD_VAR 0 1
17055: PPUSH
17056: CALL_OW 255
17060: PUSH
17061: LD_INT 1
17063: EQUAL
17064: AND
17065: IFFALSE 17075
// buildOil = 1 ;
17067: LD_ADDR_EXP 34
17071: PUSH
17072: LD_INT 1
17074: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 266
17084: PUSH
17085: LD_INT 26
17087: EQUAL
17088: PUSH
17089: LD_VAR 0 1
17093: PPUSH
17094: CALL_OW 255
17098: PUSH
17099: LD_INT 1
17101: EQUAL
17102: AND
17103: IFFALSE 17113
// buildPower = 1 ;
17105: LD_ADDR_EXP 35
17109: PUSH
17110: LD_INT 1
17112: ST_TO_ADDR
// end ;
17113: PPOPN 8
17115: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 266
17125: PUSH
17126: LD_INT 3
17128: EQUAL
17129: PUSH
17130: LD_VAR 0 1
17134: PPUSH
17135: CALL_OW 255
17139: PUSH
17140: LD_INT 1
17142: EQUAL
17143: AND
17144: PUSH
17145: LD_EXP 31
17149: PUSH
17150: LD_INT 0
17152: EQUAL
17153: AND
17154: IFFALSE 17502
// begin factoryDialog = 1 ;
17156: LD_ADDR_EXP 31
17160: PUSH
17161: LD_INT 1
17163: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17164: LD_INT 22
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 21
17176: PUSH
17177: LD_INT 3
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 30
17186: PUSH
17187: LD_INT 3
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 24
17196: PUSH
17197: LD_INT 1000
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: PUSH
17215: LD_INT 1
17217: ARRAY
17218: PPUSH
17219: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17223: LD_EXP 1
17227: PPUSH
17228: LD_STRING D9a-JMM-1
17230: PPUSH
17231: CALL_OW 88
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
17235: LD_INT 47
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL_OW 321
17245: PUSH
17246: LD_INT 1
17248: EQUAL
17249: PUSH
17250: LD_INT 45
17252: PPUSH
17253: LD_INT 1
17255: PPUSH
17256: CALL_OW 321
17260: PUSH
17261: LD_INT 1
17263: EQUAL
17264: AND
17265: IFFALSE 17502
// begin if IsOK ( Campell ) then
17267: LD_EXP 12
17271: PPUSH
17272: CALL_OW 302
17276: IFFALSE 17292
// begin Say ( Campell , D9a-Mech1-1 ) ;
17278: LD_EXP 12
17282: PPUSH
17283: LD_STRING D9a-Mech1-1
17285: PPUSH
17286: CALL_OW 88
// end else
17290: GO 17488
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17292: LD_INT 22
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 21
17304: PUSH
17305: LD_INT 1
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 25
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 26
17324: PUSH
17325: LD_INT 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: PPUSH
17338: CALL_OW 69
17342: PUSH
17343: LD_EXP 1
17347: PUSH
17348: EMPTY
17349: LIST
17350: PUSH
17351: LD_INT 0
17353: GREATER
17354: DIFF
17355: IFFALSE 17429
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17357: LD_INT 22
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 21
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 25
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 26
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PPUSH
17403: CALL_OW 69
17407: PUSH
17408: LD_EXP 1
17412: PUSH
17413: EMPTY
17414: LIST
17415: DIFF
17416: PPUSH
17417: LD_STRING D9a-Mech1-1
17419: PPUSH
17420: LD_STRING D9a-Mech1-1
17422: PPUSH
17423: CALL 4127 0 3
// end else
17427: GO 17488
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17429: LD_INT 22
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 21
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 26
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: PPUSH
17464: CALL_OW 69
17468: PUSH
17469: LD_EXP 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: DIFF
17477: PPUSH
17478: LD_STRING D9a-Mech1-1
17480: PPUSH
17481: LD_STRING D9a-Mech1-1
17483: PPUSH
17484: CALL 4127 0 3
// end ; end ; if energyVDialog = 0 then
17488: LD_EXP 33
17492: PUSH
17493: LD_INT 0
17495: EQUAL
17496: IFFALSE 17502
// EnergyDialog ;
17498: CALL 4618 0 0
// end ; end ; end ;
17502: PPOPN 1
17504: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 247
17514: PUSH
17515: LD_INT 1
17517: EQUAL
17518: PUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 255
17528: PUSH
17529: LD_INT 1
17531: EQUAL
17532: AND
17533: IFFALSE 17549
// lostCounter = lostCounter + 1 ;
17535: LD_ADDR_EXP 38
17539: PUSH
17540: LD_EXP 38
17544: PUSH
17545: LD_INT 1
17547: PLUS
17548: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 257
17558: PUSH
17559: LD_INT 3
17561: EQUAL
17562: PUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 255
17572: PUSH
17573: LD_INT 3
17575: EQUAL
17576: AND
17577: PUSH
17578: LD_INT 24
17580: PPUSH
17581: CALL_OW 302
17585: AND
17586: PUSH
17587: LD_INT 24
17589: PPUSH
17590: CALL_OW 255
17594: PUSH
17595: LD_INT 3
17597: EQUAL
17598: AND
17599: IFFALSE 17667
// begin uc_side = 3 ;
17601: LD_ADDR_OWVAR 20
17605: PUSH
17606: LD_INT 3
17608: ST_TO_ADDR
// uc_nation = 3 ;
17609: LD_ADDR_OWVAR 21
17613: PUSH
17614: LD_INT 3
17616: ST_TO_ADDR
// hc_gallery :=  ;
17617: LD_ADDR_OWVAR 33
17621: PUSH
17622: LD_STRING 
17624: ST_TO_ADDR
// hc_name :=  ;
17625: LD_ADDR_OWVAR 26
17629: PUSH
17630: LD_STRING 
17632: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17633: LD_INT 0
17635: PPUSH
17636: LD_EXP 16
17640: PPUSH
17641: LD_EXP 17
17645: PPUSH
17646: CALL_OW 12
17650: PPUSH
17651: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17655: CALL_OW 44
17659: PPUSH
17660: LD_INT 24
17662: PPUSH
17663: CALL_OW 52
// end ; end ;
17667: PPOPN 1
17669: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17670: LD_INT 0
17672: PPUSH
17673: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17674: LD_ADDR_VAR 0 4
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PPUSH
17689: CALL_OW 69
17693: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17694: LD_VAR 0 1
17698: PUSH
17699: LD_INT 1
17701: EQUAL
17702: PUSH
17703: LD_VAR 0 2
17707: PUSH
17708: LD_INT 6
17710: EQUAL
17711: AND
17712: PUSH
17713: LD_EXP 41
17717: PUSH
17718: LD_INT 1
17720: EQUAL
17721: AND
17722: IFFALSE 17777
// begin donaldsonCoopAttack = 0 ;
17724: LD_ADDR_EXP 41
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17732: LD_ADDR_VAR 0 3
17736: PUSH
17737: LD_INT 22
17739: PUSH
17740: LD_INT 4
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: EMPTY
17748: LIST
17749: PPUSH
17750: CALL_OW 69
17754: PUSH
17755: FOR_IN
17756: IFFALSE 17775
// ComAgressiveMove ( i , 52 , 64 ) ;
17758: LD_VAR 0 3
17762: PPUSH
17763: LD_INT 52
17765: PPUSH
17766: LD_INT 64
17768: PPUSH
17769: CALL_OW 114
17773: GO 17755
17775: POP
17776: POP
// end ; end ;
17777: PPOPN 4
17779: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 264
17789: PUSH
17790: LD_INT 53
17792: EQUAL
17793: IFFALSE 17878
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17795: LD_VAR 0 1
17799: PPUSH
17800: LD_INT 21
17802: PPUSH
17803: CALL 4834 0 2
// uc_side = 3 ;
17807: LD_ADDR_OWVAR 20
17811: PUSH
17812: LD_INT 3
17814: ST_TO_ADDR
// uc_nation = 3 ;
17815: LD_ADDR_OWVAR 21
17819: PUSH
17820: LD_INT 3
17822: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17823: LD_INT 0
17825: PPUSH
17826: LD_EXP 17
17830: PPUSH
17831: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17835: CALL_OW 44
17839: PPUSH
17840: LD_VAR 0 2
17844: PPUSH
17845: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: LD_INT 6
17856: PPUSH
17857: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 313
17870: PPUSH
17871: LD_INT 6
17873: PPUSH
17874: CALL_OW 235
// end ; end ;
17878: PPOPN 2
17880: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17881: LD_INT 0
17883: PPUSH
17884: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 255
17894: PUSH
17895: LD_INT 3
17897: EQUAL
17898: PUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 247
17908: PUSH
17909: LD_INT 2
17911: EQUAL
17912: AND
17913: IFFALSE 18007
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 264
17924: PUSH
17925: LD_INT 42
17927: EQUAL
17928: PUSH
17929: LD_VAR 0 1
17933: PPUSH
17934: CALL_OW 264
17938: PUSH
17939: LD_INT 43
17941: EQUAL
17942: OR
17943: PUSH
17944: LD_VAR 0 1
17948: PPUSH
17949: CALL_OW 264
17953: PUSH
17954: LD_INT 44
17956: EQUAL
17957: OR
17958: IFFALSE 18007
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17960: LD_INT 24
17962: PPUSH
17963: LD_VAR 0 1
17967: PPUSH
17968: CALL_OW 265
17972: PPUSH
17973: LD_VAR 0 1
17977: PPUSH
17978: CALL_OW 262
17982: PPUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 263
17992: PPUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 264
18002: PPUSH
18003: CALL_OW 185
// end ;
18007: PPOPN 3
18009: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18010: LD_VAR 0 1
18014: PPUSH
18015: CALL_OW 255
18019: PUSH
18020: LD_INT 3
18022: EQUAL
18023: PUSH
18024: LD_VAR 0 2
18028: PPUSH
18029: CALL_OW 255
18033: PUSH
18034: LD_INT 3
18036: EQUAL
18037: AND
18038: PUSH
18039: LD_VAR 0 1
18043: PPUSH
18044: CALL_OW 302
18048: AND
18049: IFFALSE 18091
// begin ComRepairVehicle ( human , vehicle ) ;
18051: LD_VAR 0 2
18055: PPUSH
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18065: LD_VAR 0 2
18069: PPUSH
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18079: LD_VAR 0 1
18083: PPUSH
18084: LD_INT 100
18086: PPUSH
18087: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 255
18100: PUSH
18101: LD_INT 3
18103: EQUAL
18104: PUSH
18105: LD_VAR 0 2
18109: PPUSH
18110: CALL_OW 255
18114: PUSH
18115: LD_INT 3
18117: EQUAL
18118: AND
18119: PUSH
18120: LD_INT 24
18122: PPUSH
18123: CALL_OW 302
18127: AND
18128: PUSH
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 302
18138: NOT
18139: AND
18140: IFFALSE 18154
// ComEnterUnit ( human , rubfact0 ) ;
18142: LD_VAR 0 2
18146: PPUSH
18147: LD_INT 24
18149: PPUSH
18150: CALL_OW 120
// end ;
18154: PPOPN 2
18156: END
// on Command ( comandid ) do var i , j , tmp ;
18157: LD_INT 0
18159: PPUSH
18160: PPUSH
18161: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18162: LD_ADDR_VAR 0 2
18166: PUSH
18167: LD_INT 22
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: LD_INT 21
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 21
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PPUSH
18209: CALL_OW 69
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18325
// begin if GetTaskList ( i ) > 0 then
18217: LD_VAR 0 2
18221: PPUSH
18222: CALL_OW 437
18226: PUSH
18227: LD_INT 0
18229: GREATER
18230: IFFALSE 18323
// begin for j = 1 to GetTaskList ( i ) do
18232: LD_ADDR_VAR 0 3
18236: PUSH
18237: DOUBLE
18238: LD_INT 1
18240: DEC
18241: ST_TO_ADDR
18242: LD_VAR 0 2
18246: PPUSH
18247: CALL_OW 437
18251: PUSH
18252: FOR_TO
18253: IFFALSE 18321
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18255: LD_ADDR_VAR 0 4
18259: PUSH
18260: LD_VAR 0 2
18264: PPUSH
18265: CALL_OW 437
18269: PUSH
18270: LD_VAR 0 3
18274: ARRAY
18275: PUSH
18276: LD_INT 4
18278: ARRAY
18279: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18280: LD_VAR 0 4
18284: PPUSH
18285: CALL_OW 255
18289: PUSH
18290: LD_INT 4
18292: EQUAL
18293: PUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: CALL_OW 255
18303: PUSH
18304: LD_INT 0
18306: EQUAL
18307: OR
18308: IFFALSE 18319
// ComStop ( i ) ;
18310: LD_VAR 0 2
18314: PPUSH
18315: CALL_OW 141
// end ;
18319: GO 18252
18321: POP
18322: POP
// end ; end ;
18323: GO 18214
18325: POP
18326: POP
// end ; end_of_file
18327: PPOPN 4
18329: END
// every 10 10$0 do
18330: GO 18332
18332: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18333: LD_INT 5
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: LD_INT 2
18341: PPUSH
18342: LD_INT 5
18344: PPUSH
18345: CALL_OW 12
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 3
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: LD_OWVAR 67
18368: ARRAY
18369: PLUS
18370: PPUSH
18371: LD_INT 0
18373: PPUSH
18374: LD_INT 0
18376: PPUSH
18377: LD_INT 0
18379: PPUSH
18380: LD_INT 0
18382: PPUSH
18383: LD_EXP 16
18387: PPUSH
18388: LD_EXP 17
18392: PPUSH
18393: CALL_OW 12
18397: PPUSH
18398: LD_INT 4
18400: PPUSH
18401: LD_INT 14
18403: PPUSH
18404: LD_INT 1
18406: PPUSH
18407: LD_INT 2
18409: PPUSH
18410: CALL 7419 0 12
// end ;
18414: END
// every 15 15$0 do
18415: GO 18417
18417: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18418: LD_INT 5
18420: PPUSH
18421: LD_INT 3
18423: PPUSH
18424: LD_INT 3
18426: PPUSH
18427: LD_INT 5
18429: PPUSH
18430: CALL_OW 12
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 3
18440: PUSH
18441: LD_INT 3
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: PUSH
18449: LD_OWVAR 67
18453: ARRAY
18454: PLUS
18455: PPUSH
18456: LD_INT 0
18458: PPUSH
18459: LD_INT 0
18461: PPUSH
18462: LD_INT 0
18464: PPUSH
18465: LD_INT 1
18467: PPUSH
18468: LD_EXP 16
18472: PPUSH
18473: LD_EXP 17
18477: PPUSH
18478: CALL_OW 12
18482: PPUSH
18483: LD_INT 4
18485: PPUSH
18486: LD_INT 14
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: LD_INT 1
18494: PPUSH
18495: CALL 7419 0 12
// end ;
18499: END
// every 25 25$0 do
18500: GO 18502
18502: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18503: LD_INT 5
18505: PPUSH
18506: LD_INT 3
18508: PPUSH
18509: LD_INT 2
18511: PPUSH
18512: LD_INT 3
18514: PPUSH
18515: CALL_OW 12
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: LD_INT 3
18525: PUSH
18526: LD_INT 3
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: LIST
18533: PUSH
18534: LD_OWVAR 67
18538: ARRAY
18539: PLUS
18540: PPUSH
18541: LD_INT 0
18543: PPUSH
18544: LD_INT 0
18546: PPUSH
18547: LD_INT 0
18549: PPUSH
18550: LD_INT 2
18552: PPUSH
18553: LD_EXP 16
18557: PPUSH
18558: LD_EXP 17
18562: PPUSH
18563: CALL_OW 12
18567: PPUSH
18568: LD_INT 4
18570: PPUSH
18571: LD_INT 14
18573: PPUSH
18574: LD_INT 1
18576: PPUSH
18577: LD_INT 1
18579: PPUSH
18580: CALL 7419 0 12
// end ;
18584: END
// every 26 26$0 do
18585: GO 18587
18587: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18588: LD_INT 5
18590: PPUSH
18591: LD_INT 3
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: LD_INT 3
18599: PPUSH
18600: CALL_OW 12
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: PUSH
18619: LD_OWVAR 67
18623: ARRAY
18624: PLUS
18625: PPUSH
18626: LD_INT 0
18628: PPUSH
18629: LD_INT 0
18631: PPUSH
18632: LD_INT 0
18634: PPUSH
18635: LD_INT 2
18637: PPUSH
18638: LD_EXP 16
18642: PPUSH
18643: LD_EXP 17
18647: PPUSH
18648: CALL_OW 12
18652: PPUSH
18653: LD_INT 4
18655: PPUSH
18656: LD_INT 14
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: LD_INT 2
18664: PPUSH
18665: CALL 7419 0 12
// end ;
18669: END
// every 25 25$0 do
18670: GO 18672
18672: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18673: LD_INT 4
18675: PPUSH
18676: LD_INT 5
18678: PPUSH
18679: LD_INT 3
18681: PUSH
18682: LD_INT 4
18684: PUSH
18685: LD_INT 5
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: PUSH
18693: LD_OWVAR 67
18697: ARRAY
18698: PPUSH
18699: LD_EXP 16
18703: PPUSH
18704: LD_EXP 17
18708: PPUSH
18709: CALL_OW 12
18713: PPUSH
18714: LD_INT 3
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: LD_INT 1
18722: PPUSH
18723: LD_INT 42
18725: PUSH
18726: LD_INT 42
18728: PUSH
18729: LD_INT 43
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 42
18739: PUSH
18740: LD_INT 43
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 43
18749: PUSH
18750: LD_INT 43
18752: PUSH
18753: LD_INT 43
18755: PUSH
18756: LD_INT 44
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: PUSH
18770: LD_OWVAR 67
18774: ARRAY
18775: PPUSH
18776: EMPTY
18777: PPUSH
18778: EMPTY
18779: PPUSH
18780: LD_INT 1
18782: PPUSH
18783: CALL 9081 0 11
// end ; end_of_file
18787: END
// every 0 0$1 trigger startTimer = 1 do
18788: LD_EXP 30
18792: PUSH
18793: LD_INT 1
18795: EQUAL
18796: IFFALSE 18926
18798: GO 18800
18800: DISABLE
// begin enable ;
18801: ENABLE
// if timerStatus = 1 then
18802: LD_EXP 29
18806: PUSH
18807: LD_INT 1
18809: EQUAL
18810: IFFALSE 18843
// begin timeToSupport = timeToSupport - 0 0$01 ;
18812: LD_ADDR_EXP 28
18816: PUSH
18817: LD_EXP 28
18821: PUSH
18822: LD_INT 35
18824: MINUS
18825: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18826: LD_ADDR_OWVAR 47
18830: PUSH
18831: LD_STRING #Am04-1
18833: PUSH
18834: LD_EXP 28
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: ST_TO_ADDR
// end ; if timerStatus = 2 then
18843: LD_EXP 29
18847: PUSH
18848: LD_INT 2
18850: EQUAL
18851: IFFALSE 18884
// begin timeToSupport = timeToSupport - 0 0$01 ;
18853: LD_ADDR_EXP 28
18857: PUSH
18858: LD_EXP 28
18862: PUSH
18863: LD_INT 35
18865: MINUS
18866: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18867: LD_ADDR_OWVAR 47
18871: PUSH
18872: LD_STRING #Am04-2
18874: PUSH
18875: LD_EXP 28
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: ST_TO_ADDR
// end ; if timerStatus = 3 then
18884: LD_EXP 29
18888: PUSH
18889: LD_INT 3
18891: EQUAL
18892: IFFALSE 18908
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18894: LD_ADDR_EXP 27
18898: PUSH
18899: LD_EXP 27
18903: PUSH
18904: LD_INT 35
18906: MINUS
18907: ST_TO_ADDR
// end ; if timerStatus = 4 then
18908: LD_EXP 29
18912: PUSH
18913: LD_INT 4
18915: EQUAL
18916: IFFALSE 18926
// begin display_strings =  ;
18918: LD_ADDR_OWVAR 47
18922: PUSH
18923: LD_STRING 
18925: ST_TO_ADDR
// end ; end ; end_of_file
18926: END
// every 0 0$1 trigger IsDead ( JMM ) do
18927: LD_EXP 1
18931: PPUSH
18932: CALL_OW 301
18936: IFFALSE 18948
18938: GO 18940
18940: DISABLE
// YouLost ( JMM ) ;
18941: LD_STRING JMM
18943: PPUSH
18944: CALL_OW 104
18948: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18949: LD_INT 4
18951: PPUSH
18952: CALL_OW 301
18956: IFFALSE 18968
18958: GO 18960
18960: DISABLE
// YouLost ( Base ) ; end_of_file
18961: LD_STRING Base
18963: PPUSH
18964: CALL_OW 104
18968: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
18969: LD_EXP 15
18973: PPUSH
18974: CALL_OW 301
18978: PUSH
18979: LD_INT 22
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 21
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: PUSH
19008: LD_INT 14
19010: PUSH
19011: LD_INT 13
19013: PUSH
19014: LD_INT 12
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: LD_OWVAR 67
19026: ARRAY
19027: LESS
19028: AND
19029: IFFALSE 19500
19031: GO 19033
19033: DISABLE
19034: LD_INT 0
19036: PPUSH
19037: PPUSH
// begin AIEnable = 0 ;
19038: LD_ADDR_EXP 37
19042: PUSH
19043: LD_INT 0
19045: ST_TO_ADDR
// escapeAvalaible = 1 ;
19046: LD_ADDR_EXP 40
19050: PUSH
19051: LD_INT 1
19053: ST_TO_ADDR
// InGameOn ;
19054: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19058: LD_INT 3
19060: PPUSH
19061: LD_INT 1
19063: PPUSH
19064: LD_INT 1
19066: PPUSH
19067: LD_INT 0
19069: PPUSH
19070: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19074: LD_INT 6
19076: PPUSH
19077: LD_INT 1
19079: PPUSH
19080: LD_INT 1
19082: PPUSH
19083: LD_INT 0
19085: PPUSH
19086: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19090: LD_INT 5
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: LD_INT 1
19098: PPUSH
19099: LD_INT 0
19101: PPUSH
19102: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19106: LD_INT 3
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19116: LD_INT 97
19118: PPUSH
19119: LD_INT 91
19121: PPUSH
19122: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19126: LD_INT 22
19128: PUSH
19129: LD_INT 3
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 69
19154: PPUSH
19155: CALL_OW 121
// wait ( 0 0$01 ) ;
19159: LD_INT 35
19161: PPUSH
19162: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19166: LD_INT 22
19168: PUSH
19169: LD_INT 3
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 21
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PPUSH
19190: CALL_OW 69
19194: PPUSH
19195: LD_INT 124
19197: PPUSH
19198: LD_INT 98
19200: PPUSH
19201: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19205: LD_INT 22
19207: PUSH
19208: LD_INT 5
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 21
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PPUSH
19229: CALL_OW 69
19233: PPUSH
19234: CALL_OW 121
// wait ( 0 0$01 ) ;
19238: LD_INT 35
19240: PPUSH
19241: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19245: LD_INT 22
19247: PUSH
19248: LD_INT 5
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PPUSH
19269: CALL_OW 69
19273: PPUSH
19274: LD_INT 124
19276: PPUSH
19277: LD_INT 98
19279: PPUSH
19280: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19284: LD_INT 22
19286: PUSH
19287: LD_INT 6
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 21
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PPUSH
19308: CALL_OW 69
19312: PPUSH
19313: CALL_OW 121
// wait ( 0 0$01 ) ;
19317: LD_INT 35
19319: PPUSH
19320: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19324: LD_INT 22
19326: PUSH
19327: LD_INT 6
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 69
19352: PPUSH
19353: LD_INT 124
19355: PPUSH
19356: LD_INT 98
19358: PPUSH
19359: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19363: LD_INT 22
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 21
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 69
19391: PPUSH
19392: LD_INT 124
19394: PPUSH
19395: LD_INT 98
19397: PPUSH
19398: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19402: LD_INT 124
19404: PPUSH
19405: LD_INT 98
19407: PPUSH
19408: CALL_OW 84
// p := 0 0$0 ;
19412: LD_ADDR_VAR 0 2
19416: PUSH
19417: LD_INT 0
19419: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19420: LD_INT 35
19422: PPUSH
19423: CALL_OW 67
// p := p + 0 0$1 ;
19427: LD_ADDR_VAR 0 2
19431: PUSH
19432: LD_VAR 0 2
19436: PUSH
19437: LD_INT 35
19439: PLUS
19440: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19441: LD_INT 23
19443: PUSH
19444: LD_INT 3
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 21
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 24
19463: PUSH
19464: LD_INT 250
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: PPUSH
19476: CALL_OW 69
19480: PUSH
19481: LD_INT 0
19483: EQUAL
19484: PUSH
19485: LD_VAR 0 2
19489: PUSH
19490: LD_INT 245
19492: GREATEREQUAL
19493: OR
19494: IFFALSE 19420
// FinishMission ;
19496: CALL 19673 0 0
// end ;
19500: PPOPN 2
19502: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19503: LD_EXP 40
19507: PUSH
19508: LD_INT 1
19510: EQUAL
19511: IFFALSE 19670
19513: GO 19515
19515: DISABLE
19516: LD_INT 0
19518: PPUSH
// begin enable ;
19519: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19520: LD_ADDR_VAR 0 1
19524: PUSH
19525: LD_INT 22
19527: PUSH
19528: LD_INT 3
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PPUSH
19535: CALL_OW 69
19539: PUSH
19540: FOR_IN
19541: IFFALSE 19568
// if IsInArea ( i , RussianEscape ) then
19543: LD_VAR 0 1
19547: PPUSH
19548: LD_INT 5
19550: PPUSH
19551: CALL_OW 308
19555: IFFALSE 19566
// RemoveUnit ( i ) ;
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 64
19566: GO 19540
19568: POP
19569: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19570: LD_ADDR_VAR 0 1
19574: PUSH
19575: LD_INT 22
19577: PUSH
19578: LD_INT 5
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PPUSH
19585: CALL_OW 69
19589: PUSH
19590: FOR_IN
19591: IFFALSE 19618
// if IsInArea ( i , RussianEscape ) then
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_INT 5
19600: PPUSH
19601: CALL_OW 308
19605: IFFALSE 19616
// RemoveUnit ( i ) ;
19607: LD_VAR 0 1
19611: PPUSH
19612: CALL_OW 64
19616: GO 19590
19618: POP
19619: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19620: LD_ADDR_VAR 0 1
19624: PUSH
19625: LD_INT 22
19627: PUSH
19628: LD_INT 6
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PPUSH
19635: CALL_OW 69
19639: PUSH
19640: FOR_IN
19641: IFFALSE 19668
// if IsInArea ( i , RussianEscape ) then
19643: LD_VAR 0 1
19647: PPUSH
19648: LD_INT 5
19650: PPUSH
19651: CALL_OW 308
19655: IFFALSE 19666
// RemoveUnit ( i ) ;
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 64
19666: GO 19640
19668: POP
19669: POP
// end ;
19670: PPOPN 1
19672: END
// export function FinishMission ; var tmp ; begin
19673: LD_INT 0
19675: PPUSH
19676: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19677: LD_INT 69
19679: PPUSH
19680: LD_INT 1
19682: PPUSH
19683: CALL_OW 321
19687: PPUSH
19688: LD_STRING GatlingInGamma
19690: PPUSH
19691: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19695: LD_EXP 34
19699: PUSH
19700: LD_INT 1
19702: EQUAL
19703: PUSH
19704: LD_EXP 35
19708: PUSH
19709: LD_INT 1
19711: EQUAL
19712: AND
19713: IFFALSE 19727
// begin AddMedal ( oil , 1 ) ;
19715: LD_STRING oil
19717: PPUSH
19718: LD_INT 1
19720: PPUSH
19721: CALL_OW 101
// end else
19725: GO 19820
// begin if buildOil = 1 and buildPower = 0 then
19727: LD_EXP 34
19731: PUSH
19732: LD_INT 1
19734: EQUAL
19735: PUSH
19736: LD_EXP 35
19740: PUSH
19741: LD_INT 0
19743: EQUAL
19744: AND
19745: IFFALSE 19758
// AddMedal ( oil , - 1 ) ;
19747: LD_STRING oil
19749: PPUSH
19750: LD_INT 1
19752: NEG
19753: PPUSH
19754: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19758: LD_EXP 34
19762: PUSH
19763: LD_INT 0
19765: EQUAL
19766: PUSH
19767: LD_EXP 35
19771: PUSH
19772: LD_INT 1
19774: EQUAL
19775: AND
19776: IFFALSE 19789
// AddMedal ( oil , - 2 ) ;
19778: LD_STRING oil
19780: PPUSH
19781: LD_INT 2
19783: NEG
19784: PPUSH
19785: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19789: LD_EXP 34
19793: PUSH
19794: LD_INT 0
19796: EQUAL
19797: PUSH
19798: LD_EXP 35
19802: PUSH
19803: LD_INT 0
19805: EQUAL
19806: AND
19807: IFFALSE 19820
// AddMedal ( oil , - 3 ) ;
19809: LD_STRING oil
19811: PPUSH
19812: LD_INT 3
19814: NEG
19815: PPUSH
19816: CALL_OW 101
// end ; if lostCounter > 3 then
19820: LD_EXP 38
19824: PUSH
19825: LD_INT 3
19827: GREATER
19828: IFFALSE 19843
// begin AddMedal ( deaths , - 1 ) ;
19830: LD_STRING deaths
19832: PPUSH
19833: LD_INT 1
19835: NEG
19836: PPUSH
19837: CALL_OW 101
// end else
19841: GO 19853
// begin AddMedal ( deaths , 1 ) ;
19843: LD_STRING deaths
19845: PPUSH
19846: LD_INT 1
19848: PPUSH
19849: CALL_OW 101
// end ; if honor = 1 then
19853: LD_EXP 39
19857: PUSH
19858: LD_INT 1
19860: EQUAL
19861: IFFALSE 19875
// begin AddMedal ( honour , 1 ) ;
19863: LD_STRING honour
19865: PPUSH
19866: LD_INT 1
19868: PPUSH
19869: CALL_OW 101
// end else
19873: GO 19886
// begin AddMedal ( honour , - 1 ) ;
19875: LD_STRING honour
19877: PPUSH
19878: LD_INT 1
19880: NEG
19881: PPUSH
19882: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19886: LD_STRING Main
19888: PPUSH
19889: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19893: LD_INT 22
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 23
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: PPUSH
19933: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19937: LD_EXP 1
19941: PPUSH
19942: LD_EXP 44
19946: PUSH
19947: LD_STRING JMM
19949: STR
19950: PPUSH
19951: CALL_OW 38
// if IsOK ( Bobby ) then
19955: LD_EXP 2
19959: PPUSH
19960: CALL_OW 302
19964: IFFALSE 19984
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19966: LD_EXP 2
19970: PPUSH
19971: LD_EXP 44
19975: PUSH
19976: LD_STRING Bobby
19978: STR
19979: PPUSH
19980: CALL_OW 38
// if IsOK ( Cyrus ) then
19984: LD_EXP 3
19988: PPUSH
19989: CALL_OW 302
19993: IFFALSE 20013
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19995: LD_EXP 3
19999: PPUSH
20000: LD_EXP 44
20004: PUSH
20005: LD_STRING Cyrus
20007: STR
20008: PPUSH
20009: CALL_OW 38
// if IsOK ( Lisa ) then
20013: LD_EXP 4
20017: PPUSH
20018: CALL_OW 302
20022: IFFALSE 20042
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20024: LD_EXP 4
20028: PPUSH
20029: LD_EXP 44
20033: PUSH
20034: LD_STRING Lisa
20036: STR
20037: PPUSH
20038: CALL_OW 38
// if IsOK ( Brown ) then
20042: LD_EXP 7
20046: PPUSH
20047: CALL_OW 302
20051: IFFALSE 20071
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20053: LD_EXP 7
20057: PPUSH
20058: LD_EXP 44
20062: PUSH
20063: LD_STRING Brown
20065: STR
20066: PPUSH
20067: CALL_OW 38
// if IsOK ( Donaldson ) then
20071: LD_EXP 13
20075: PPUSH
20076: CALL_OW 302
20080: IFFALSE 20100
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20082: LD_EXP 13
20086: PPUSH
20087: LD_EXP 44
20091: PUSH
20092: LD_STRING Donaldson
20094: STR
20095: PPUSH
20096: CALL_OW 38
// if IsOK ( Frank ) then
20100: LD_EXP 5
20104: PPUSH
20105: CALL_OW 302
20109: IFFALSE 20129
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20111: LD_EXP 5
20115: PPUSH
20116: LD_EXP 44
20120: PUSH
20121: LD_STRING Frank
20123: STR
20124: PPUSH
20125: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20129: LD_INT 50
20131: PUSH
20132: EMPTY
20133: LIST
20134: PUSH
20135: LD_INT 22
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 21
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: PPUSH
20160: CALL_OW 69
20164: PUSH
20165: LD_EXP 1
20169: PUSH
20170: LD_EXP 2
20174: PUSH
20175: LD_EXP 3
20179: PUSH
20180: LD_EXP 4
20184: PUSH
20185: LD_EXP 7
20189: PUSH
20190: LD_EXP 13
20194: PUSH
20195: LD_EXP 5
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: DIFF
20209: PPUSH
20210: LD_STRING 04_other_survivors
20212: PPUSH
20213: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20217: LD_INT 22
20219: PPUSH
20220: CALL 20233 0 1
// YouWin ;
20224: CALL_OW 103
// end ;
20228: LD_VAR 0 1
20232: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20233: LD_INT 0
20235: PPUSH
20236: PPUSH
20237: PPUSH
20238: PPUSH
// gammaBase = [ ] ;
20239: LD_ADDR_VAR 0 4
20243: PUSH
20244: EMPTY
20245: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20246: LD_ADDR_VAR 0 5
20250: PUSH
20251: LD_VAR 0 1
20255: PPUSH
20256: LD_INT 22
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 21
20268: PUSH
20269: LD_INT 3
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 50
20278: PUSH
20279: EMPTY
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: PPUSH
20287: CALL_OW 70
20291: ST_TO_ADDR
// for i in buildings do
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_VAR 0 5
20301: PUSH
20302: FOR_IN
20303: IFFALSE 20640
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20305: LD_VAR 0 3
20309: PPUSH
20310: CALL_OW 266
20314: PUSH
20315: LD_INT 6
20317: PUSH
20318: LD_INT 7
20320: PUSH
20321: LD_INT 8
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: LIST
20328: IN
20329: IFFALSE 20443
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20331: LD_ADDR_VAR 0 4
20335: PUSH
20336: LD_VAR 0 4
20340: PUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: CALL_OW 266
20350: PUSH
20351: LD_VAR 0 3
20355: PPUSH
20356: CALL_OW 250
20360: PUSH
20361: LD_VAR 0 3
20365: PPUSH
20366: CALL_OW 251
20370: PUSH
20371: LD_VAR 0 3
20375: PPUSH
20376: CALL_OW 254
20380: PUSH
20381: LD_VAR 0 3
20385: PPUSH
20386: CALL_OW 267
20390: PUSH
20391: LD_VAR 0 3
20395: PPUSH
20396: CALL_OW 248
20400: PUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: LD_INT 1
20408: PPUSH
20409: CALL_OW 268
20413: PUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: LD_INT 2
20421: PPUSH
20422: CALL_OW 268
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: ADD
20440: ST_TO_ADDR
20441: GO 20638
// if GetBType ( i ) in [ b_bunker ] then
20443: LD_VAR 0 3
20447: PPUSH
20448: CALL_OW 266
20452: PUSH
20453: LD_INT 32
20455: PUSH
20456: EMPTY
20457: LIST
20458: IN
20459: IFFALSE 20556
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20461: LD_ADDR_VAR 0 4
20465: PUSH
20466: LD_VAR 0 4
20470: PUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: CALL_OW 266
20480: PUSH
20481: LD_VAR 0 3
20485: PPUSH
20486: CALL_OW 250
20490: PUSH
20491: LD_VAR 0 3
20495: PPUSH
20496: CALL_OW 251
20500: PUSH
20501: LD_VAR 0 3
20505: PPUSH
20506: CALL_OW 254
20510: PUSH
20511: LD_VAR 0 3
20515: PPUSH
20516: CALL_OW 267
20520: PUSH
20521: LD_VAR 0 3
20525: PPUSH
20526: CALL_OW 248
20530: PUSH
20531: LD_VAR 0 3
20535: PPUSH
20536: CALL_OW 269
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: ADD
20553: ST_TO_ADDR
20554: GO 20638
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20556: LD_ADDR_VAR 0 4
20560: PUSH
20561: LD_VAR 0 4
20565: PUSH
20566: LD_VAR 0 3
20570: PPUSH
20571: CALL_OW 266
20575: PUSH
20576: LD_VAR 0 3
20580: PPUSH
20581: CALL_OW 250
20585: PUSH
20586: LD_VAR 0 3
20590: PPUSH
20591: CALL_OW 251
20595: PUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: CALL_OW 254
20605: PUSH
20606: LD_VAR 0 3
20610: PPUSH
20611: CALL_OW 267
20615: PUSH
20616: LD_VAR 0 3
20620: PPUSH
20621: CALL_OW 248
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: PUSH
20634: EMPTY
20635: LIST
20636: ADD
20637: ST_TO_ADDR
// end ;
20638: GO 20302
20640: POP
20641: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20642: LD_VAR 0 4
20646: PPUSH
20647: LD_STRING GammaBase
20649: PPUSH
20650: CALL_OW 39
// end ; end_of_file
20654: LD_VAR 0 2
20658: RET
// every 1 1$15 do
20659: GO 20661
20661: DISABLE
// begin if supply <= 13 and supply > 7 then
20662: LD_EXP 36
20666: PUSH
20667: LD_INT 13
20669: LESSEQUAL
20670: PUSH
20671: LD_EXP 36
20675: PUSH
20676: LD_INT 7
20678: GREATER
20679: AND
20680: IFFALSE 20703
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20682: LD_INT 3
20684: PPUSH
20685: LD_INT 5
20687: PPUSH
20688: CALL_OW 12
20692: PPUSH
20693: LD_INT 18
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: CALL_OW 55
// if supply <= 7 and supply > 4 then
20703: LD_EXP 36
20707: PUSH
20708: LD_INT 7
20710: LESSEQUAL
20711: PUSH
20712: LD_EXP 36
20716: PUSH
20717: LD_INT 4
20719: GREATER
20720: AND
20721: IFFALSE 20744
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20723: LD_INT 3
20725: PPUSH
20726: LD_INT 5
20728: PPUSH
20729: CALL_OW 12
20733: PPUSH
20734: LD_INT 19
20736: PPUSH
20737: LD_INT 1
20739: PPUSH
20740: CALL_OW 55
// if supply <= 4 and supply > 0 then
20744: LD_EXP 36
20748: PUSH
20749: LD_INT 4
20751: LESSEQUAL
20752: PUSH
20753: LD_EXP 36
20757: PUSH
20758: LD_INT 0
20760: GREATER
20761: AND
20762: IFFALSE 20785
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20764: LD_INT 3
20766: PPUSH
20767: LD_INT 5
20769: PPUSH
20770: CALL_OW 12
20774: PPUSH
20775: LD_INT 20
20777: PPUSH
20778: LD_INT 1
20780: PPUSH
20781: CALL_OW 55
// if supply > 0 then
20785: LD_EXP 36
20789: PUSH
20790: LD_INT 0
20792: GREATER
20793: IFFALSE 20810
// begin supply = supply - 1 ;
20795: LD_ADDR_EXP 36
20799: PUSH
20800: LD_EXP 36
20804: PUSH
20805: LD_INT 1
20807: MINUS
20808: ST_TO_ADDR
// enable ;
20809: ENABLE
// end ; end ;
20810: END
