// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4422 0 0
// PrepareRussianBase ;
 241: CALL 2721 0 0
// PrepareRussianCommander ;
 245: CALL 2672 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3957 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3957 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3957 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3957 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3957 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3957 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3957 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3957 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3957 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3957 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3957 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3957 0 2
 767: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 768: LD_STRING 03_Frank
 770: PPUSH
 771: CALL_OW 28
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 823
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING 03_Frank
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 3957 0 2
 796: ST_TO_ADDR
// if Frank = 0 then
 797: LD_EXP 5
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: IFFALSE 823
// Frank = PrepareUnit ( Frank , false ) ;
 807: LD_ADDR_EXP 5
 811: PUSH
 812: LD_STRING Frank
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL 3957 0 2
 822: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 32
 830: PPUSH
 831: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 835: LD_EXP 7
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 850: LD_EXP 7
 854: PPUSH
 855: LD_INT 32
 857: PPUSH
 858: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 862: LD_EXP 8
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 877: LD_EXP 9
 881: PPUSH
 882: LD_INT 2
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 892: LD_EXP 12
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 907: LD_EXP 10
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 922: LD_EXP 11
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 937: LD_EXP 4
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// if Lisa = false then
 952: LD_EXP 4
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 977
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 962: LD_EXP 2
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 49
// if Lisa = false and Bobby = false then
 977: LD_EXP 4
 981: PUSH
 982: LD_INT 0
 984: EQUAL
 985: PUSH
 986: LD_EXP 2
 990: PUSH
 991: LD_INT 0
 993: EQUAL
 994: AND
 995: IFFALSE 1012
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 997: LD_EXP 3
1001: PPUSH
1002: LD_INT 2
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 0
1019: EQUAL
1020: PUSH
1021: LD_EXP 2
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: PUSH
1031: LD_EXP 3
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1057
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
1066: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1067: LD_EXP 13
1071: PPUSH
1072: LD_INT 10
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// if Frank then
1082: LD_EXP 5
1086: IFFALSE 1103
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1088: LD_EXP 5
1092: PPUSH
1093: LD_INT 10
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// uc_nation = 1 ;
1103: LD_ADDR_OWVAR 21
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// uc_side = 4 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 4
1118: ST_TO_ADDR
// hc_class := 3 ;
1119: LD_ADDR_OWVAR 28
1123: PUSH
1124: LD_INT 3
1126: ST_TO_ADDR
// hc_sex := sex_male ;
1127: LD_ADDR_OWVAR 27
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1135: LD_ADDR_OWVAR 33
1139: PUSH
1140: LD_STRING SecondCharsGal
1142: ST_TO_ADDR
// hc_face_number := 53 ;
1143: LD_ADDR_OWVAR 34
1147: PUSH
1148: LD_INT 53
1150: ST_TO_ADDR
// hc_name := Freddie Warner ;
1151: LD_ADDR_OWVAR 26
1155: PUSH
1156: LD_STRING Freddie Warner
1158: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1159: LD_ADDR_OWVAR 29
1163: PUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 11
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1174: LD_ADDR_OWVAR 30
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 0
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1197: LD_ADDR_OWVAR 31
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: LD_INT 0
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: ST_TO_ADDR
// un = CreateHuman ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: CALL_OW 44
1229: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1230: LD_VAR 0 3
1234: PPUSH
1235: LD_INT 10
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// hc_class := 1 ;
1245: LD_ADDR_OWVAR 28
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1261: LD_ADDR_OWVAR 33
1265: PUSH
1266: LD_STRING SecondCharsGal
1268: ST_TO_ADDR
// hc_face_number := 56 ;
1269: LD_ADDR_OWVAR 34
1273: PUSH
1274: LD_INT 56
1276: ST_TO_ADDR
// hc_name := Mel Brennan ;
1277: LD_ADDR_OWVAR 26
1281: PUSH
1282: LD_STRING Mel Brennan
1284: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1285: LD_ADDR_OWVAR 29
1289: PUSH
1290: LD_INT 12
1292: PUSH
1293: LD_INT 11
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1300: LD_ADDR_OWVAR 30
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: LD_INT 0
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1323: LD_ADDR_OWVAR 31
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 0
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: ST_TO_ADDR
// un = CreateHuman ;
1346: LD_ADDR_VAR 0 3
1350: PUSH
1351: CALL_OW 44
1355: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1356: LD_VAR 0 3
1360: PPUSH
1361: LD_INT 10
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 49
// hc_class := 1 ;
1371: LD_ADDR_OWVAR 28
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// hc_sex := sex_male ;
1379: LD_ADDR_OWVAR 27
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1387: LD_ADDR_OWVAR 33
1391: PUSH
1392: LD_STRING AmGalRemake
1394: ST_TO_ADDR
// hc_face_number := 5 ;
1395: LD_ADDR_OWVAR 34
1399: PUSH
1400: LD_INT 5
1402: ST_TO_ADDR
// hc_name := Bob Joplin ;
1403: LD_ADDR_OWVAR 26
1407: PUSH
1408: LD_STRING Bob Joplin
1410: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1411: LD_ADDR_OWVAR 29
1415: PUSH
1416: LD_INT 10
1418: PUSH
1419: LD_INT 11
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1426: LD_ADDR_OWVAR 30
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 0
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1449: LD_ADDR_OWVAR 31
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// un = CreateHuman ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: CALL_OW 44
1481: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1482: LD_VAR 0 3
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
// hc_class := 3 ;
1497: LD_ADDR_OWVAR 28
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// hc_sex := sex_female ;
1505: LD_ADDR_OWVAR 27
1509: PUSH
1510: LD_INT 2
1512: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1513: LD_ADDR_OWVAR 33
1517: PUSH
1518: LD_STRING AmGalRemake
1520: ST_TO_ADDR
// hc_face_number := 8 ;
1521: LD_ADDR_OWVAR 34
1525: PUSH
1526: LD_INT 8
1528: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1529: LD_ADDR_OWVAR 26
1533: PUSH
1534: LD_STRING Elizabeth Whitney
1536: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1537: LD_ADDR_OWVAR 29
1541: PUSH
1542: LD_INT 9
1544: PUSH
1545: LD_INT 11
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1552: LD_ADDR_OWVAR 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1575: LD_ADDR_OWVAR 31
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: LD_INT 2
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: ST_TO_ADDR
// un = CreateHuman ;
1598: LD_ADDR_VAR 0 3
1602: PUSH
1603: CALL_OW 44
1607: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1608: LD_VAR 0 3
1612: PPUSH
1613: LD_INT 10
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// InitHc ;
1623: CALL_OW 19
// end ;
1627: LD_VAR 0 1
1631: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
1636: PPUSH
1637: PPUSH
// uc_nation = 1 ;
1638: LD_ADDR_OWVAR 21
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// uc_side = 1 ;
1646: LD_ADDR_OWVAR 20
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1654: LD_ADDR_OWVAR 37
1658: PUSH
1659: LD_INT 2
1661: ST_TO_ADDR
// vc_engine := engine_combustion ;
1662: LD_ADDR_OWVAR 39
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// vc_control := control_manual ;
1670: LD_ADDR_OWVAR 38
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1678: LD_ADDR_OWVAR 41
1682: PUSH
1683: LD_INT 65
1685: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1686: LD_ADDR_OWVAR 40
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 3
1696: PUSH
1697: LD_INT 4
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_OWVAR 67
1709: ARRAY
1710: ST_TO_ADDR
// veh := CreateVehicle ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: CALL_OW 45
1720: ST_TO_ADDR
// if HexInfo ( 17 , 4 ) = 0 then
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 4
1726: PPUSH
1727: CALL_OW 428
1731: PUSH
1732: LD_INT 0
1734: EQUAL
1735: IFFALSE 1757
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1737: LD_VAR 0 5
1741: PPUSH
1742: LD_INT 17
1744: PPUSH
1745: LD_INT 4
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 48
1755: GO 1775
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1757: LD_VAR 0 5
1761: PPUSH
1762: LD_INT 23
1764: PPUSH
1765: LD_INT 10
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL_OW 48
// SetDir ( veh , 2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: LD_INT 2
1782: PPUSH
1783: CALL_OW 233
// hc_class := 1 ;
1787: LD_ADDR_OWVAR 28
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// hc_sex := sex_male ;
1795: LD_ADDR_OWVAR 27
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1803: LD_ADDR_OWVAR 33
1807: PUSH
1808: LD_STRING SecondCharsGal
1810: ST_TO_ADDR
// hc_face_number := 59 ;
1811: LD_ADDR_OWVAR 34
1815: PUSH
1816: LD_INT 59
1818: ST_TO_ADDR
// hc_name := Max Gray ;
1819: LD_ADDR_OWVAR 26
1823: PUSH
1824: LD_STRING Max Gray
1826: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1827: LD_ADDR_OWVAR 29
1831: PUSH
1832: LD_INT 9
1834: PUSH
1835: LD_INT 11
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1842: LD_ADDR_OWVAR 30
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1865: LD_ADDR_OWVAR 31
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: ST_TO_ADDR
// un = CreateHuman ;
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: CALL_OW 44
1897: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: LD_INT 11
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL_OW 49
// hc_class := 1 ;
1913: LD_ADDR_OWVAR 28
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// hc_sex := sex_male ;
1921: LD_ADDR_OWVAR 27
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1929: LD_ADDR_OWVAR 33
1933: PUSH
1934: LD_STRING SecondCharsGal
1936: ST_TO_ADDR
// hc_face_number := 54 ;
1937: LD_ADDR_OWVAR 34
1941: PUSH
1942: LD_INT 54
1944: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1945: LD_ADDR_OWVAR 26
1949: PUSH
1950: LD_STRING Luigi Ghbellin
1952: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1953: LD_ADDR_OWVAR 29
1957: PUSH
1958: LD_INT 11
1960: PUSH
1961: LD_INT 11
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1968: LD_ADDR_OWVAR 30
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1991: LD_ADDR_OWVAR 31
1995: PUSH
1996: LD_INT 1
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: ST_TO_ADDR
// un = CreateHuman ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 44
2023: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 11
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 49
// hc_class := 3 ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// hc_sex := sex_male ;
2047: LD_ADDR_OWVAR 27
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2055: LD_ADDR_OWVAR 33
2059: PUSH
2060: LD_STRING AmGalRemake
2062: ST_TO_ADDR
// hc_face_number := 6 ;
2063: LD_ADDR_OWVAR 34
2067: PUSH
2068: LD_INT 6
2070: ST_TO_ADDR
// hc_name := Leon Carter ;
2071: LD_ADDR_OWVAR 26
2075: PUSH
2076: LD_STRING Leon Carter
2078: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2079: LD_ADDR_OWVAR 29
2083: PUSH
2084: LD_INT 10
2086: PUSH
2087: LD_INT 9
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
2094: LD_ADDR_OWVAR 30
2098: PUSH
2099: LD_INT 0
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
2117: LD_ADDR_OWVAR 31
2121: PUSH
2122: LD_INT 0
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: ST_TO_ADDR
// un = CreateHuman ;
2140: LD_ADDR_VAR 0 4
2144: PUSH
2145: CALL_OW 44
2149: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2150: LD_VAR 0 4
2154: PPUSH
2155: LD_VAR 0 5
2159: PPUSH
2160: CALL_OW 52
// if count = 4 then
2164: LD_VAR 0 1
2168: PUSH
2169: LD_INT 4
2171: EQUAL
2172: IFFALSE 2300
// begin hc_class := 1 ;
2174: LD_ADDR_OWVAR 28
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// hc_sex := sex_male ;
2182: LD_ADDR_OWVAR 27
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2190: LD_ADDR_OWVAR 33
2194: PUSH
2195: LD_STRING SecondCharsGal
2197: ST_TO_ADDR
// hc_face_number := 34 ;
2198: LD_ADDR_OWVAR 34
2202: PUSH
2203: LD_INT 34
2205: ST_TO_ADDR
// hc_name := Ian Hill ;
2206: LD_ADDR_OWVAR 26
2210: PUSH
2211: LD_STRING Ian Hill
2213: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2214: LD_ADDR_OWVAR 29
2218: PUSH
2219: LD_INT 10
2221: PUSH
2222: LD_INT 12
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2229: LD_ADDR_OWVAR 30
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: LD_INT 0
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2252: LD_ADDR_OWVAR 31
2256: PUSH
2257: LD_INT 2
2259: PUSH
2260: LD_INT 0
2262: PUSH
2263: LD_INT 1
2265: PUSH
2266: LD_INT 0
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: ST_TO_ADDR
// un = CreateHuman ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: CALL_OW 44
2284: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2285: LD_VAR 0 4
2289: PPUSH
2290: LD_INT 11
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL_OW 49
// end ; if count = 5 then
2300: LD_VAR 0 1
2304: PUSH
2305: LD_INT 5
2307: EQUAL
2308: IFFALSE 2562
// begin hc_class := 1 ;
2310: LD_ADDR_OWVAR 28
2314: PUSH
2315: LD_INT 1
2317: ST_TO_ADDR
// hc_sex := sex_male ;
2318: LD_ADDR_OWVAR 27
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2326: LD_ADDR_OWVAR 33
2330: PUSH
2331: LD_STRING SecondCharsGal
2333: ST_TO_ADDR
// hc_face_number := 34 ;
2334: LD_ADDR_OWVAR 34
2338: PUSH
2339: LD_INT 34
2341: ST_TO_ADDR
// hc_name := Ian Hill ;
2342: LD_ADDR_OWVAR 26
2346: PUSH
2347: LD_STRING Ian Hill
2349: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2350: LD_ADDR_OWVAR 29
2354: PUSH
2355: LD_INT 10
2357: PUSH
2358: LD_INT 12
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2365: LD_ADDR_OWVAR 30
2369: PUSH
2370: LD_INT 0
2372: PUSH
2373: LD_INT 0
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 0
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2388: LD_ADDR_OWVAR 31
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: LD_INT 0
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: LD_INT 0
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: ST_TO_ADDR
// un = CreateHuman ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: LD_INT 11
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: CALL_OW 49
// hc_class := 1 ;
2436: LD_ADDR_OWVAR 28
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// hc_sex := sex_female ;
2444: LD_ADDR_OWVAR 27
2448: PUSH
2449: LD_INT 2
2451: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2452: LD_ADDR_OWVAR 33
2456: PUSH
2457: LD_STRING SecondCharsGal
2459: ST_TO_ADDR
// hc_face_number := 41 ;
2460: LD_ADDR_OWVAR 34
2464: PUSH
2465: LD_INT 41
2467: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2468: LD_ADDR_OWVAR 26
2472: PUSH
2473: LD_STRING Kate Wadsworth
2475: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2476: LD_ADDR_OWVAR 29
2480: PUSH
2481: LD_INT 9
2483: PUSH
2484: LD_INT 9
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2491: LD_ADDR_OWVAR 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: LD_INT 2
2501: PUSH
2502: LD_INT 0
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2514: LD_ADDR_OWVAR 31
2518: PUSH
2519: LD_INT 2
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: ST_TO_ADDR
// un = CreateHuman ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: CALL_OW 44
2546: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2547: LD_VAR 0 4
2551: PPUSH
2552: LD_INT 11
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2562: LD_INT 11
2564: PPUSH
2565: LD_INT 22
2567: PUSH
2568: LD_INT 1
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 21
2577: PUSH
2578: LD_INT 1
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 26
2587: PUSH
2588: LD_INT 1
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 70
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: PPUSH
2609: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2613: LD_INT 11
2615: PPUSH
2616: LD_INT 22
2618: PUSH
2619: LD_INT 1
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 21
2628: PUSH
2629: LD_INT 1
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 26
2638: PUSH
2639: LD_INT 1
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 70
2655: PUSH
2656: LD_INT 1
2658: ARRAY
2659: PPUSH
2660: LD_STRING D6-Sol3-1
2662: PPUSH
2663: CALL_OW 88
// end ; end_of_file
2667: LD_VAR 0 2
2671: RET
// export function PrepareRussianCommander ; begin
2672: LD_INT 0
2674: PPUSH
// uc_side = 3 ;
2675: LD_ADDR_OWVAR 20
2679: PUSH
2680: LD_INT 3
2682: ST_TO_ADDR
// uc_nation = 3 ;
2683: LD_ADDR_OWVAR 21
2687: PUSH
2688: LD_INT 3
2690: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2691: LD_ADDR_EXP 15
2695: PUSH
2696: LD_STRING Stolypin
2698: PPUSH
2699: CALL_OW 25
2703: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2704: LD_EXP 15
2708: PPUSH
2709: LD_INT 21
2711: PPUSH
2712: CALL_OW 52
// end ;
2716: LD_VAR 0 1
2720: RET
// export function PrepareRussianBase ; var i ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2725: LD_INT 3
2727: PPUSH
2728: LD_INT 3
2730: PPUSH
2731: LD_INT 22
2733: PPUSH
2734: LD_EXP 16
2738: PPUSH
2739: LD_EXP 17
2743: PPUSH
2744: CALL_OW 12
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 2
2754: PPUSH
2755: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2759: LD_INT 3
2761: PPUSH
2762: LD_INT 3
2764: PPUSH
2765: LD_INT 21
2767: PPUSH
2768: LD_EXP 16
2772: PPUSH
2773: LD_EXP 17
2777: PPUSH
2778: CALL_OW 12
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: LD_INT 3
2788: PPUSH
2789: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2793: LD_INT 3
2795: PPUSH
2796: LD_INT 3
2798: PPUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_EXP 16
2806: PPUSH
2807: LD_EXP 17
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: LD_INT 4
2819: PPUSH
2820: LD_INT 2
2822: PPUSH
2823: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 3
2832: PPUSH
2833: LD_INT 24
2835: PPUSH
2836: LD_EXP 16
2840: PPUSH
2841: LD_EXP 17
2845: PPUSH
2846: CALL_OW 12
2850: PPUSH
2851: LD_INT 3
2853: PPUSH
2854: LD_INT 6
2856: PPUSH
2857: CALL 4020 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2861: LD_ADDR_VAR 0 2
2865: PUSH
2866: LD_INT 22
2868: PUSH
2869: LD_INT 3
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: LD_INT 30
2878: PUSH
2879: LD_INT 32
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PPUSH
2890: CALL_OW 69
2894: PUSH
2895: FOR_IN
2896: IFFALSE 2936
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2898: LD_INT 3
2900: PPUSH
2901: LD_INT 3
2903: PPUSH
2904: LD_VAR 0 2
2908: PPUSH
2909: LD_EXP 16
2913: PPUSH
2914: LD_EXP 17
2918: PPUSH
2919: CALL_OW 12
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: LD_INT 1
2929: PPUSH
2930: CALL 4020 0 6
2934: GO 2895
2936: POP
2937: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 30
2955: PUSH
2956: LD_INT 31
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: PUSH
2972: FOR_IN
2973: IFFALSE 3001
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_EXP 17
2984: PPUSH
2985: CALL_OW 12
2989: PPUSH
2990: LD_VAR 0 2
2994: PPUSH
2995: CALL 4130 0 2
2999: GO 2972
3001: POP
3002: POP
// end ;
3003: LD_VAR 0 1
3007: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3008: LD_INT 0
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
// uc_side = 6 ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_INT 6
3021: ST_TO_ADDR
// uc_nation = 3 ;
3022: LD_ADDR_OWVAR 21
3026: PUSH
3027: LD_INT 3
3029: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3030: LD_ADDR_VAR 0 2
3034: PUSH
3035: DOUBLE
3036: LD_INT 1
3038: DEC
3039: ST_TO_ADDR
3040: LD_INT 1
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: CALL_OW 12
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: PUSH
3062: LD_OWVAR 67
3066: ARRAY
3067: PUSH
3068: FOR_TO
3069: IFFALSE 3229
// begin vc_engine = 1 ;
3071: LD_ADDR_OWVAR 39
3075: PUSH
3076: LD_INT 1
3078: ST_TO_ADDR
// vc_control = 1 ;
3079: LD_ADDR_OWVAR 38
3083: PUSH
3084: LD_INT 1
3086: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3087: LD_ADDR_OWVAR 40
3091: PUSH
3092: LD_INT 42
3094: PUSH
3095: LD_INT 42
3097: PUSH
3098: LD_INT 43
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: PUSH
3106: LD_OWVAR 67
3110: ARRAY
3111: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3112: LD_ADDR_OWVAR 37
3116: PUSH
3117: LD_INT 21
3119: PUSH
3120: LD_INT 22
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PUSH
3131: LD_OWVAR 67
3135: ARRAY
3136: ST_TO_ADDR
// veh = CreateVehicle ;
3137: LD_ADDR_VAR 0 3
3141: PUSH
3142: CALL_OW 45
3146: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3147: LD_VAR 0 3
3151: PPUSH
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 0
3157: PPUSH
3158: CALL_OW 49
// hc_gallery =  ;
3162: LD_ADDR_OWVAR 33
3166: PUSH
3167: LD_STRING 
3169: ST_TO_ADDR
// hc_name =  ;
3170: LD_ADDR_OWVAR 26
3174: PUSH
3175: LD_STRING 
3177: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3178: LD_INT 0
3180: PPUSH
3181: LD_INT 3
3183: PPUSH
3184: LD_EXP 16
3188: PPUSH
3189: LD_EXP 17
3193: PPUSH
3194: CALL_OW 12
3198: PPUSH
3199: CALL_OW 380
// un = CreateHuman ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_VAR 0 3
3222: PPUSH
3223: CALL_OW 52
// end ;
3227: GO 3068
3229: POP
3230: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3231: LD_INT 0
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: LD_EXP 16
3241: PPUSH
3242: LD_EXP 17
3246: PPUSH
3247: CALL_OW 12
3251: PUSH
3252: LD_INT 2
3254: PLUS
3255: PPUSH
3256: CALL_OW 380
// un = CreateHuman ;
3260: LD_ADDR_VAR 0 4
3264: PUSH
3265: CALL_OW 44
3269: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3270: LD_VAR 0 4
3274: PPUSH
3275: LD_INT 3
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 4
3290: PPUSH
3291: LD_EXP 16
3295: PPUSH
3296: LD_EXP 17
3300: PPUSH
3301: CALL_OW 12
3305: PUSH
3306: LD_INT 2
3308: PLUS
3309: PPUSH
3310: CALL_OW 380
// un = CreateHuman ;
3314: LD_ADDR_VAR 0 4
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: DOUBLE
3345: LD_INT 1
3347: DEC
3348: ST_TO_ADDR
3349: LD_INT 2
3351: PUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 3
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PUSH
3369: LD_INT 1
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: CALL_OW 12
3379: PLUS
3380: PUSH
3381: FOR_TO
3382: IFFALSE 3452
// begin hc_gallery =  ;
3384: LD_ADDR_OWVAR 33
3388: PUSH
3389: LD_STRING 
3391: ST_TO_ADDR
// hc_name =  ;
3392: LD_ADDR_OWVAR 26
3396: PUSH
3397: LD_STRING 
3399: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_EXP 16
3410: PPUSH
3411: LD_EXP 17
3415: PPUSH
3416: CALL_OW 12
3420: PPUSH
3421: CALL_OW 380
// un = CreateHuman ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3435: LD_VAR 0 4
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 0
3445: PPUSH
3446: CALL_OW 49
// end ;
3450: GO 3381
3452: POP
3453: POP
// vc_engine = 1 ;
3454: LD_ADDR_OWVAR 39
3458: PUSH
3459: LD_INT 1
3461: ST_TO_ADDR
// vc_control = 1 ;
3462: LD_ADDR_OWVAR 38
3466: PUSH
3467: LD_INT 1
3469: ST_TO_ADDR
// vc_weapon = 51 ;
3470: LD_ADDR_OWVAR 40
3474: PUSH
3475: LD_INT 51
3477: ST_TO_ADDR
// vc_chassis = 22 ;
3478: LD_ADDR_OWVAR 37
3482: PUSH
3483: LD_INT 22
3485: ST_TO_ADDR
// veh = CreateVehicle ;
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: CALL_OW 45
3495: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3496: LD_VAR 0 3
3500: PPUSH
3501: LD_INT 3
3503: PPUSH
3504: LD_INT 0
3506: PPUSH
3507: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 1
3518: PPUSH
3519: LD_INT 100
3521: PPUSH
3522: CALL_OW 290
// hc_gallery =  ;
3526: LD_ADDR_OWVAR 33
3530: PUSH
3531: LD_STRING 
3533: ST_TO_ADDR
// hc_name =  ;
3534: LD_ADDR_OWVAR 26
3538: PUSH
3539: LD_STRING 
3541: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3542: LD_INT 0
3544: PPUSH
3545: LD_INT 3
3547: PPUSH
3548: LD_EXP 16
3552: PPUSH
3553: LD_EXP 17
3557: PPUSH
3558: CALL_OW 12
3562: PPUSH
3563: CALL_OW 380
// un = CreateHuman ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 3
3586: PPUSH
3587: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: LD_INT 22
3598: PUSH
3599: LD_INT 6
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 1
3608: PUSH
3609: LD_INT 3
3611: PUSH
3612: LD_INT 25
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PPUSH
3652: CALL_OW 69
3656: PUSH
3657: FOR_IN
3658: IFFALSE 3677
// ComAgressiveMove ( i , 45 , 46 ) ;
3660: LD_VAR 0 2
3664: PPUSH
3665: LD_INT 45
3667: PPUSH
3668: LD_INT 46
3670: PPUSH
3671: CALL_OW 114
3675: GO 3657
3677: POP
3678: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3679: LD_ADDR_VAR 0 2
3683: PUSH
3684: LD_INT 22
3686: PUSH
3687: LD_INT 6
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 25
3696: PUSH
3697: LD_INT 2
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL_OW 69
3712: PUSH
3713: FOR_IN
3714: IFFALSE 3745
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3716: LD_ADDR_EXP 21
3720: PUSH
3721: LD_VAR 0 2
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: LD_INT 48
3731: PPUSH
3732: LD_INT 55
3734: PPUSH
3735: LD_INT 5
3737: PPUSH
3738: CALL_OW 145
3742: ST_TO_ADDR
3743: GO 3713
3745: POP
3746: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3747: LD_ADDR_VAR 0 2
3751: PUSH
3752: LD_INT 22
3754: PUSH
3755: LD_INT 6
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 25
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: PPUSH
3776: CALL_OW 69
3780: PUSH
3781: FOR_IN
3782: IFFALSE 3801
// ComMoveXY ( i , 39 , 55 ) ;
3784: LD_VAR 0 2
3788: PPUSH
3789: LD_INT 39
3791: PPUSH
3792: LD_INT 55
3794: PPUSH
3795: CALL_OW 111
3799: GO 3781
3801: POP
3802: POP
// end ;
3803: LD_VAR 0 1
3807: RET
// export function PrepareFirstAttack ; var i , un ; begin
3808: LD_INT 0
3810: PPUSH
3811: PPUSH
3812: PPUSH
// uc_side = 5 ;
3813: LD_ADDR_OWVAR 20
3817: PUSH
3818: LD_INT 5
3820: ST_TO_ADDR
// uc_nation = 3 ;
3821: LD_ADDR_OWVAR 21
3825: PUSH
3826: LD_INT 3
3828: ST_TO_ADDR
// for i := 1 to 4 do
3829: LD_ADDR_VAR 0 2
3833: PUSH
3834: DOUBLE
3835: LD_INT 1
3837: DEC
3838: ST_TO_ADDR
3839: LD_INT 4
3841: PUSH
3842: FOR_TO
3843: IFFALSE 3942
// begin hc_gallery =  ;
3845: LD_ADDR_OWVAR 33
3849: PUSH
3850: LD_STRING 
3852: ST_TO_ADDR
// hc_name =  ;
3853: LD_ADDR_OWVAR 26
3857: PUSH
3858: LD_STRING 
3860: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3861: LD_INT 0
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_EXP 16
3871: PPUSH
3872: LD_EXP 17
3876: PPUSH
3877: CALL_OW 12
3881: PPUSH
3882: CALL_OW 380
// un = CreateHuman ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: CALL_OW 44
3895: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_EXP 1
3920: PPUSH
3921: CALL_OW 250
3925: PPUSH
3926: LD_EXP 1
3930: PPUSH
3931: CALL_OW 251
3935: PPUSH
3936: CALL_OW 114
// end ;
3940: GO 3842
3942: POP
3943: POP
// firstRussianAttack = 1 ;
3944: LD_ADDR_EXP 23
3948: PUSH
3949: LD_INT 1
3951: ST_TO_ADDR
// end ; end_of_file
3952: LD_VAR 0 1
3956: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3957: LD_INT 0
3959: PPUSH
3960: PPUSH
// if exist_mode then
3961: LD_VAR 0 2
3965: IFFALSE 3990
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3967: LD_ADDR_VAR 0 4
3971: PUSH
3972: LD_EXP 45
3976: PUSH
3977: LD_VAR 0 1
3981: STR
3982: PPUSH
3983: CALL_OW 34
3987: ST_TO_ADDR
// end else
3988: GO 4005
// begin unit := NewCharacter ( ident ) ;
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 25
4004: ST_TO_ADDR
// end ; result := unit ;
4005: LD_ADDR_VAR 0 3
4009: PUSH
4010: LD_VAR 0 4
4014: ST_TO_ADDR
// end ;
4015: LD_VAR 0 3
4019: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4020: LD_INT 0
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
// for i = 1 to count do
4026: LD_ADDR_VAR 0 8
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_VAR 0 6
4040: PUSH
4041: FOR_TO
4042: IFFALSE 4123
// begin uc_side = side ;
4044: LD_ADDR_OWVAR 20
4048: PUSH
4049: LD_VAR 0 1
4053: ST_TO_ADDR
// uc_nation = nation ;
4054: LD_ADDR_OWVAR 21
4058: PUSH
4059: LD_VAR 0 2
4063: ST_TO_ADDR
// hc_gallery =  ;
4064: LD_ADDR_OWVAR 33
4068: PUSH
4069: LD_STRING 
4071: ST_TO_ADDR
// hc_name =  ;
4072: LD_ADDR_OWVAR 26
4076: PUSH
4077: LD_STRING 
4079: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4080: LD_INT 0
4082: PPUSH
4083: LD_VAR 0 5
4087: PPUSH
4088: LD_VAR 0 4
4092: PPUSH
4093: CALL_OW 380
// un = CreateHuman ;
4097: LD_ADDR_VAR 0 10
4101: PUSH
4102: CALL_OW 44
4106: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4107: LD_VAR 0 10
4111: PPUSH
4112: LD_VAR 0 3
4116: PPUSH
4117: CALL_OW 52
// end ;
4121: GO 4041
4123: POP
4124: POP
// end ;
4125: LD_VAR 0 7
4129: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4130: LD_INT 0
4132: PPUSH
4133: PPUSH
4134: PPUSH
// uc_side := GetSide ( b ) ;
4135: LD_ADDR_OWVAR 20
4139: PUSH
4140: LD_VAR 0 2
4144: PPUSH
4145: CALL_OW 255
4149: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_VAR 0 2
4159: PPUSH
4160: CALL_OW 248
4164: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4165: LD_INT 0
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: LD_VAR 0 1
4175: PPUSH
4176: CALL_OW 380
// un = CreateHuman ;
4180: LD_ADDR_VAR 0 4
4184: PUSH
4185: CALL_OW 44
4189: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4190: LD_ADDR_VAR 0 5
4194: PUSH
4195: LD_VAR 0 2
4199: PPUSH
4200: CALL_OW 254
4204: PUSH
4205: LD_INT 3
4207: MINUS
4208: ST_TO_ADDR
// if dir < 0 then
4209: LD_VAR 0 5
4213: PUSH
4214: LD_INT 0
4216: LESS
4217: IFFALSE 4233
// dir := 6 + dir ;
4219: LD_ADDR_VAR 0 5
4223: PUSH
4224: LD_INT 6
4226: PUSH
4227: LD_VAR 0 5
4231: PLUS
4232: ST_TO_ADDR
// SetDir ( un , dir ) ;
4233: LD_VAR 0 4
4237: PPUSH
4238: LD_VAR 0 5
4242: PPUSH
4243: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4247: LD_VAR 0 4
4251: PPUSH
4252: LD_VAR 0 2
4256: PPUSH
4257: CALL_OW 52
// end ;
4261: LD_VAR 0 3
4265: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4266: LD_INT 0
4268: PPUSH
4269: PPUSH
4270: PPUSH
// rnd = rand ( 1 , characters ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 1
4278: PPUSH
4279: LD_VAR 0 1
4283: PPUSH
4284: CALL_OW 12
4288: ST_TO_ADDR
// for i = 1 to characters do
4289: LD_ADDR_VAR 0 5
4293: PUSH
4294: DOUBLE
4295: LD_INT 1
4297: DEC
4298: ST_TO_ADDR
4299: LD_VAR 0 1
4303: PUSH
4304: FOR_TO
4305: IFFALSE 4415
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4307: LD_VAR 0 5
4311: PUSH
4312: LD_VAR 0 6
4316: EQUAL
4317: PUSH
4318: LD_VAR 0 1
4322: PUSH
4323: LD_VAR 0 5
4327: ARRAY
4328: PPUSH
4329: CALL_OW 258
4333: PUSH
4334: LD_INT 1
4336: EQUAL
4337: AND
4338: IFFALSE 4360
// Say ( characters [ i ] , dialogMID ) ;
4340: LD_VAR 0 1
4344: PUSH
4345: LD_VAR 0 5
4349: ARRAY
4350: PPUSH
4351: LD_VAR 0 2
4355: PPUSH
4356: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 6
4369: EQUAL
4370: PUSH
4371: LD_VAR 0 1
4375: PUSH
4376: LD_VAR 0 5
4380: ARRAY
4381: PPUSH
4382: CALL_OW 258
4386: PUSH
4387: LD_INT 2
4389: EQUAL
4390: AND
4391: IFFALSE 4413
// Say ( characters [ i ] , dialogFID ) ;
4393: LD_VAR 0 1
4397: PUSH
4398: LD_VAR 0 5
4402: ARRAY
4403: PPUSH
4404: LD_VAR 0 3
4408: PPUSH
4409: CALL_OW 88
// end ;
4413: GO 4304
4415: POP
4416: POP
// end ;
4417: LD_VAR 0 4
4421: RET
// export function PrepareDifficulty ; var tmp ; begin
4422: LD_INT 0
4424: PPUSH
4425: PPUSH
// if Difficulty = 1 then
4426: LD_OWVAR 67
4430: PUSH
4431: LD_INT 1
4433: EQUAL
4434: IFFALSE 4452
// begin RuSoldMinLevel = 0 ;
4436: LD_ADDR_EXP 16
4440: PUSH
4441: LD_INT 0
4443: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4444: LD_ADDR_EXP 17
4448: PUSH
4449: LD_INT 2
4451: ST_TO_ADDR
// end ; if Difficulty = 2 then
4452: LD_OWVAR 67
4456: PUSH
4457: LD_INT 2
4459: EQUAL
4460: IFFALSE 4568
// begin RuSoldMinLevel = 1 ;
4462: LD_ADDR_EXP 16
4466: PUSH
4467: LD_INT 1
4469: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4470: LD_ADDR_EXP 17
4474: PUSH
4475: LD_INT 2
4477: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4478: LD_INT 14
4480: PPUSH
4481: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4485: LD_INT 23
4487: PPUSH
4488: CALL_OW 64
// uc_nation = 3 ;
4492: LD_ADDR_OWVAR 21
4496: PUSH
4497: LD_INT 3
4499: ST_TO_ADDR
// uc_side = 3 ;
4500: LD_ADDR_OWVAR 20
4504: PUSH
4505: LD_INT 3
4507: ST_TO_ADDR
// bc_level = 5 ;
4508: LD_ADDR_OWVAR 43
4512: PUSH
4513: LD_INT 5
4515: ST_TO_ADDR
// bc_type = 32 ;
4516: LD_ADDR_OWVAR 42
4520: PUSH
4521: LD_INT 32
4523: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4524: LD_ADDR_VAR 0 2
4528: PUSH
4529: LD_INT 76
4531: PPUSH
4532: LD_INT 91
4534: PPUSH
4535: LD_INT 2
4537: PPUSH
4538: CALL_OW 47
4542: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4543: LD_VAR 0 2
4547: PPUSH
4548: LD_INT 43
4550: PPUSH
4551: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4555: LD_INT 51
4557: PPUSH
4558: LD_INT 3
4560: PPUSH
4561: LD_INT 1
4563: PPUSH
4564: CALL_OW 322
// end ; if Difficulty = 3 then
4568: LD_OWVAR 67
4572: PUSH
4573: LD_INT 3
4575: EQUAL
4576: IFFALSE 4752
// begin RuSoldMinLevel = 1 ;
4578: LD_ADDR_EXP 16
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4586: LD_ADDR_EXP 17
4590: PUSH
4591: LD_INT 3
4593: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4594: LD_INT 13
4596: PPUSH
4597: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4601: LD_INT 14
4603: PPUSH
4604: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4608: LD_INT 26
4610: PPUSH
4611: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 64
// uc_nation = 3 ;
4622: LD_ADDR_OWVAR 21
4626: PUSH
4627: LD_INT 3
4629: ST_TO_ADDR
// uc_side = 3 ;
4630: LD_ADDR_OWVAR 20
4634: PUSH
4635: LD_INT 3
4637: ST_TO_ADDR
// bc_level = 5 ;
4638: LD_ADDR_OWVAR 43
4642: PUSH
4643: LD_INT 5
4645: ST_TO_ADDR
// bc_type = 32 ;
4646: LD_ADDR_OWVAR 42
4650: PUSH
4651: LD_INT 32
4653: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4654: LD_ADDR_VAR 0 2
4658: PUSH
4659: LD_INT 76
4661: PPUSH
4662: LD_INT 91
4664: PPUSH
4665: LD_INT 2
4667: PPUSH
4668: CALL_OW 47
4672: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4673: LD_VAR 0 2
4677: PPUSH
4678: LD_INT 44
4680: PPUSH
4681: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4685: LD_ADDR_VAR 0 2
4689: PUSH
4690: LD_INT 83
4692: PPUSH
4693: LD_INT 84
4695: PPUSH
4696: LD_INT 2
4698: PPUSH
4699: CALL_OW 47
4703: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4704: LD_VAR 0 2
4708: PPUSH
4709: LD_INT 43
4711: PPUSH
4712: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4716: LD_INT 51
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: LD_INT 1
4724: PPUSH
4725: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4729: LD_INT 52
4731: PPUSH
4732: LD_INT 3
4734: PPUSH
4735: LD_INT 1
4737: PPUSH
4738: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4742: LD_INT 25
4744: PPUSH
4745: LD_INT 44
4747: PPUSH
4748: CALL_OW 431
// end ; end ;
4752: LD_VAR 0 1
4756: RET
// export function EnergyDialog ; begin
4757: LD_INT 0
4759: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4760: LD_INT 46
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 321
4770: PUSH
4771: LD_INT 1
4773: EQUAL
4774: PUSH
4775: LD_INT 35
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 321
4785: PUSH
4786: LD_INT 1
4788: EQUAL
4789: AND
4790: IFFALSE 4814
// begin Say ( JMM , D9c-JMM-1 ) ;
4792: LD_EXP 1
4796: PPUSH
4797: LD_STRING D9c-JMM-1
4799: PPUSH
4800: CALL_OW 88
// energyVDialog = 1 ;
4804: LD_ADDR_EXP 33
4808: PUSH
4809: LD_INT 1
4811: ST_TO_ADDR
// end else
4812: GO 4968
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4814: LD_INT 35
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 321
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 33
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4860
// begin Say ( JMM , D9c-JMM-1a ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING D9c-JMM-1a
4847: PPUSH
4848: CALL_OW 88
// energyVDialog = 1 ;
4852: LD_ADDR_EXP 33
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4860: LD_INT 46
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 321
4870: PUSH
4871: LD_INT 2
4873: EQUAL
4874: PUSH
4875: LD_EXP 33
4879: PUSH
4880: LD_INT 0
4882: EQUAL
4883: AND
4884: IFFALSE 4906
// begin Say ( JMM , D9c-JMM-1b ) ;
4886: LD_EXP 1
4890: PPUSH
4891: LD_STRING D9c-JMM-1b
4893: PPUSH
4894: CALL_OW 88
// energyVDialog = 1 ;
4898: LD_ADDR_EXP 33
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4906: LD_INT 46
4908: PPUSH
4909: LD_INT 1
4911: PPUSH
4912: CALL_OW 321
4916: PUSH
4917: LD_INT 2
4919: EQUAL
4920: PUSH
4921: LD_INT 21
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: CALL_OW 321
4931: PUSH
4932: LD_INT 2
4934: EQUAL
4935: AND
4936: PUSH
4937: LD_EXP 33
4941: PUSH
4942: LD_INT 0
4944: EQUAL
4945: AND
4946: IFFALSE 4968
// begin Say ( JMM , D9c-JMM-1c ) ;
4948: LD_EXP 1
4952: PPUSH
4953: LD_STRING D9c-JMM-1c
4955: PPUSH
4956: CALL_OW 88
// energyVDialog = 1 ;
4960: LD_ADDR_EXP 33
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// end ; end ; end ;
4968: LD_VAR 0 1
4972: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
4978: PPUSH
4979: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4980: LD_VAR 0 1
4984: NOT
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 256
4995: PUSH
4996: LD_INT 250
4998: LESS
4999: OR
5000: PUSH
5001: LD_VAR 0 1
5005: PPUSH
5006: CALL_OW 314
5010: PUSH
5011: LD_VAR 0 1
5015: PPUSH
5016: CALL_OW 261
5020: PUSH
5021: LD_INT 20
5023: GREATER
5024: AND
5025: OR
5026: IFFALSE 5030
// exit ;
5028: GO 5395
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5030: LD_VAR 0 1
5034: PPUSH
5035: CALL_OW 261
5039: PUSH
5040: LD_INT 20
5042: LESS
5043: PUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL_OW 110
5053: PUSH
5054: LD_INT 21
5056: EQUAL
5057: NOT
5058: AND
5059: IFFALSE 5086
// begin ComStop ( bulldozer ) ;
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5070: LD_VAR 0 1
5074: PPUSH
5075: LD_INT 21
5077: PPUSH
5078: CALL_OW 109
// exit ;
5082: GO 5395
// end else
5084: GO 5113
// if GetFuel ( bulldozer ) > 20 then
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 261
5095: PUSH
5096: LD_INT 20
5098: GREATER
5099: IFFALSE 5113
// SetTag ( bulldozer , 0 ) ;
5101: LD_VAR 0 1
5105: PPUSH
5106: LD_INT 0
5108: PPUSH
5109: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5113: LD_ADDR_VAR 0 5
5117: PUSH
5118: LD_VAR 0 2
5122: PPUSH
5123: CALL_OW 353
5127: ST_TO_ADDR
// tmp := [ ] ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: EMPTY
5134: ST_TO_ADDR
// for i = 1 to list do
5135: LD_ADDR_VAR 0 4
5139: PUSH
5140: DOUBLE
5141: LD_INT 1
5143: DEC
5144: ST_TO_ADDR
5145: LD_VAR 0 5
5149: PUSH
5150: FOR_TO
5151: IFFALSE 5249
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5153: LD_VAR 0 5
5157: PUSH
5158: LD_VAR 0 4
5162: ARRAY
5163: PUSH
5164: LD_INT 1
5166: ARRAY
5167: PPUSH
5168: LD_VAR 0 5
5172: PUSH
5173: LD_VAR 0 4
5177: ARRAY
5178: PUSH
5179: LD_INT 2
5181: ARRAY
5182: PPUSH
5183: CALL_OW 554
5187: IFFALSE 5247
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5189: LD_ADDR_VAR 0 6
5193: PUSH
5194: LD_VAR 0 6
5198: PPUSH
5199: LD_VAR 0 6
5203: PUSH
5204: LD_INT 1
5206: PLUS
5207: PPUSH
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 4
5217: ARRAY
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PUSH
5223: LD_VAR 0 5
5227: PUSH
5228: LD_VAR 0 4
5232: ARRAY
5233: PUSH
5234: LD_INT 2
5236: ARRAY
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PPUSH
5242: CALL_OW 1
5246: ST_TO_ADDR
// end ;
5247: GO 5150
5249: POP
5250: POP
// ComStop ( bulldozer ) ;
5251: LD_VAR 0 1
5255: PPUSH
5256: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5260: LD_ADDR_VAR 0 7
5264: PUSH
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 250
5274: PUSH
5275: LD_VAR 0 1
5279: PPUSH
5280: CALL_OW 251
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: ST_TO_ADDR
// for i = tmp downto 1 do
5289: LD_ADDR_VAR 0 4
5293: PUSH
5294: DOUBLE
5295: LD_VAR 0 6
5299: INC
5300: ST_TO_ADDR
5301: LD_INT 1
5303: PUSH
5304: FOR_DOWNTO
5305: IFFALSE 5393
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5307: LD_ADDR_VAR 0 7
5311: PUSH
5312: LD_VAR 0 7
5316: PUSH
5317: LD_INT 1
5319: ARRAY
5320: PPUSH
5321: LD_VAR 0 7
5325: PUSH
5326: LD_INT 2
5328: ARRAY
5329: PPUSH
5330: LD_VAR 0 6
5334: PPUSH
5335: CALL 5496 0 3
5339: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5340: LD_VAR 0 1
5344: PPUSH
5345: LD_VAR 0 7
5349: PUSH
5350: LD_INT 1
5352: ARRAY
5353: PPUSH
5354: LD_VAR 0 7
5358: PUSH
5359: LD_INT 2
5361: ARRAY
5362: PPUSH
5363: CALL 5400 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5367: LD_ADDR_VAR 0 6
5371: PUSH
5372: LD_VAR 0 6
5376: PPUSH
5377: LD_VAR 0 7
5381: PUSH
5382: LD_INT 3
5384: ARRAY
5385: PPUSH
5386: CALL_OW 3
5390: ST_TO_ADDR
// end ;
5391: GO 5304
5393: POP
5394: POP
// end ;
5395: LD_VAR 0 3
5399: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5400: LD_INT 0
5402: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5403: LD_VAR 0 2
5407: PPUSH
5408: LD_VAR 0 3
5412: PPUSH
5413: CALL_OW 351
5417: PUSH
5418: LD_VAR 0 2
5422: PPUSH
5423: LD_VAR 0 3
5427: PPUSH
5428: CALL_OW 554
5432: AND
5433: PUSH
5434: LD_VAR 0 2
5438: PPUSH
5439: LD_VAR 0 3
5443: PPUSH
5444: CALL_OW 488
5448: AND
5449: PUSH
5450: LD_VAR 0 2
5454: PPUSH
5455: LD_VAR 0 3
5459: PPUSH
5460: CALL_OW 428
5464: PUSH
5465: LD_INT 1
5467: NEG
5468: EQUAL
5469: AND
5470: IFFALSE 5491
// AddComMoveXY ( bulldozer , x , y ) ;
5472: LD_VAR 0 1
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 171
// end ;
5491: LD_VAR 0 4
5495: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5496: LD_INT 0
5498: PPUSH
5499: PPUSH
5500: PPUSH
5501: PPUSH
5502: PPUSH
5503: PPUSH
5504: PPUSH
// dist := 99999 ;
5505: LD_ADDR_VAR 0 6
5509: PUSH
5510: LD_INT 99999
5512: ST_TO_ADDR
// for i = 1 to list do
5513: LD_ADDR_VAR 0 5
5517: PUSH
5518: DOUBLE
5519: LD_INT 1
5521: DEC
5522: ST_TO_ADDR
5523: LD_VAR 0 3
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5667
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5531: LD_ADDR_VAR 0 7
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_VAR 0 3
5550: PUSH
5551: LD_VAR 0 5
5555: ARRAY
5556: PUSH
5557: LD_INT 1
5559: ARRAY
5560: PPUSH
5561: LD_VAR 0 3
5565: PUSH
5566: LD_VAR 0 5
5570: ARRAY
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: CALL_OW 298
5580: ST_TO_ADDR
// if d = 0 then
5581: LD_VAR 0 7
5585: PUSH
5586: LD_INT 0
5588: EQUAL
5589: IFFALSE 5593
// continue ;
5591: GO 5528
// if d < dist then
5593: LD_VAR 0 7
5597: PUSH
5598: LD_VAR 0 6
5602: LESS
5603: IFFALSE 5665
// begin _x := list [ i ] [ 1 ] ;
5605: LD_ADDR_VAR 0 8
5609: PUSH
5610: LD_VAR 0 3
5614: PUSH
5615: LD_VAR 0 5
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5625: LD_ADDR_VAR 0 9
5629: PUSH
5630: LD_VAR 0 3
5634: PUSH
5635: LD_VAR 0 5
5639: ARRAY
5640: PUSH
5641: LD_INT 2
5643: ARRAY
5644: ST_TO_ADDR
// _i := i ;
5645: LD_ADDR_VAR 0 10
5649: PUSH
5650: LD_VAR 0 5
5654: ST_TO_ADDR
// dist := d ;
5655: LD_ADDR_VAR 0 6
5659: PUSH
5660: LD_VAR 0 7
5664: ST_TO_ADDR
// end ; end ;
5665: GO 5528
5667: POP
5668: POP
// result := [ _x , _y , _i , dist ] ;
5669: LD_ADDR_VAR 0 4
5673: PUSH
5674: LD_VAR 0 8
5678: PUSH
5679: LD_VAR 0 9
5683: PUSH
5684: LD_VAR 0 10
5688: PUSH
5689: LD_VAR 0 6
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: ST_TO_ADDR
// end ;
5700: LD_VAR 0 4
5704: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
5709: PPUSH
5710: PPUSH
// for i = 1 to 72 do
5711: LD_ADDR_VAR 0 5
5715: PUSH
5716: DOUBLE
5717: LD_INT 1
5719: DEC
5720: ST_TO_ADDR
5721: LD_INT 72
5723: PUSH
5724: FOR_TO
5725: IFFALSE 5783
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5727: LD_VAR 0 5
5731: PPUSH
5732: LD_VAR 0 1
5736: PPUSH
5737: CALL_OW 321
5741: PUSH
5742: LD_INT 1
5744: EQUAL
5745: PUSH
5746: LD_VAR 0 5
5750: PPUSH
5751: LD_VAR 0 3
5755: PPUSH
5756: CALL_OW 482
5760: PUSH
5761: LD_INT 1
5763: EQUAL
5764: AND
5765: IFFALSE 5781
// AddComResearch ( lab , i ) ;
5767: LD_VAR 0 2
5771: PPUSH
5772: LD_VAR 0 5
5776: PPUSH
5777: CALL_OW 184
5781: GO 5724
5783: POP
5784: POP
// end ;
5785: LD_VAR 0 4
5789: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5790: LD_INT 0
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5798: LD_ADDR_VAR 0 7
5802: PUSH
5803: LD_VAR 0 2
5807: PPUSH
5808: CALL_OW 313
5812: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5813: LD_ADDR_VAR 0 8
5817: PUSH
5818: LD_VAR 0 3
5822: PPUSH
5823: LD_INT 22
5825: PUSH
5826: LD_VAR 0 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 24
5847: PUSH
5848: LD_INT 750
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: LD_INT 3
5857: PUSH
5858: LD_INT 54
5860: PUSH
5861: EMPTY
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 70
5878: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5879: LD_ADDR_VAR 0 5
5883: PUSH
5884: LD_VAR 0 3
5888: PPUSH
5889: LD_INT 22
5891: PUSH
5892: LD_VAR 0 1
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 21
5903: PUSH
5904: LD_INT 3
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 3
5913: PUSH
5914: LD_INT 24
5916: PUSH
5917: LD_INT 1000
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: PPUSH
5936: CALL_OW 70
5940: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5941: LD_VAR 0 5
5945: NOT
5946: PUSH
5947: LD_INT 22
5949: PUSH
5950: LD_VAR 0 1
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 25
5961: PUSH
5962: LD_INT 2
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 24
5971: PUSH
5972: LD_INT 250
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: PPUSH
5984: CALL_OW 69
5988: NOT
5989: AND
5990: IFFALSE 5994
// exit ;
5992: GO 6106
// if buildings_list > 0 and engineerOkInside then
5994: LD_VAR 0 5
5998: PUSH
5999: LD_INT 0
6001: GREATER
6002: PUSH
6003: LD_VAR 0 7
6007: AND
6008: IFFALSE 6034
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6010: LD_VAR 0 7
6014: PPUSH
6015: LD_INT 25
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: PPUSH
6030: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6034: LD_VAR 0 5
6038: PUSH
6039: LD_INT 0
6041: GREATER
6042: PUSH
6043: LD_VAR 0 8
6047: PUSH
6048: LD_INT 0
6050: GREATER
6051: AND
6052: IFFALSE 6072
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6054: LD_VAR 0 8
6058: PPUSH
6059: LD_VAR 0 5
6063: PUSH
6064: LD_INT 1
6066: ARRAY
6067: PPUSH
6068: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6072: LD_VAR 0 5
6076: PUSH
6077: LD_INT 0
6079: EQUAL
6080: PUSH
6081: LD_VAR 0 8
6085: PUSH
6086: LD_INT 0
6088: GREATER
6089: AND
6090: IFFALSE 6106
// ComEnterUnit ( engineerOkOutside , building ) ;
6092: LD_VAR 0 8
6096: PPUSH
6097: LD_VAR 0 2
6101: PPUSH
6102: CALL_OW 120
// end ;
6106: LD_VAR 0 4
6110: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6111: LD_INT 0
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
6117: PPUSH
6118: PPUSH
6119: PPUSH
6120: PPUSH
6121: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6122: LD_ADDR_VAR 0 6
6126: PUSH
6127: LD_INT 22
6129: PUSH
6130: LD_VAR 0 1
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 25
6141: PUSH
6142: LD_INT 4
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 23
6151: PUSH
6152: LD_INT 2
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 24
6161: PUSH
6162: LD_INT 251
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6180: LD_ADDR_VAR 0 7
6184: PUSH
6185: LD_VAR 0 3
6189: PPUSH
6190: LD_INT 22
6192: PUSH
6193: LD_VAR 0 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 23
6204: PUSH
6205: LD_INT 2
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 50
6224: PUSH
6225: EMPTY
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 70
6238: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6239: LD_ADDR_VAR 0 10
6243: PUSH
6244: LD_VAR 0 3
6248: PPUSH
6249: LD_INT 22
6251: PUSH
6252: LD_VAR 0 1
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 21
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: LD_INT 25
6276: PUSH
6277: LD_INT 3
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 3
6290: PUSH
6291: LD_INT 24
6293: PUSH
6294: LD_INT 750
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 70
6315: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6316: LD_ADDR_VAR 0 11
6320: PUSH
6321: LD_VAR 0 2
6325: PPUSH
6326: LD_INT 22
6328: PUSH
6329: LD_VAR 0 1
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 21
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 3
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 3
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 1000
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: PPUSH
6388: CALL_OW 70
6392: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6393: LD_VAR 0 10
6397: NOT
6398: PUSH
6399: LD_VAR 0 11
6403: NOT
6404: AND
6405: PUSH
6406: LD_VAR 0 6
6410: NOT
6411: AND
6412: IFFALSE 6416
// exit ;
6414: GO 6650
// if damageUnits > 0 and sci_list > 0 then
6416: LD_VAR 0 10
6420: PUSH
6421: LD_INT 0
6423: GREATER
6424: PUSH
6425: LD_VAR 0 6
6429: PUSH
6430: LD_INT 0
6432: GREATER
6433: AND
6434: IFFALSE 6450
// ComMoveToArea ( damageUnits , healArea ) ;
6436: LD_VAR 0 10
6440: PPUSH
6441: LD_VAR 0 2
6445: PPUSH
6446: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6450: LD_VAR 0 11
6454: PUSH
6455: LD_INT 0
6457: GREATER
6458: PUSH
6459: LD_VAR 0 6
6463: PUSH
6464: LD_INT 0
6466: GREATER
6467: AND
6468: IFFALSE 6479
// ComExitBuilding ( sci_list ) ;
6470: LD_VAR 0 6
6474: PPUSH
6475: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6479: LD_VAR 0 11
6483: PUSH
6484: LD_INT 0
6486: GREATER
6487: PUSH
6488: LD_VAR 0 7
6492: PUSH
6493: LD_INT 0
6495: GREATER
6496: AND
6497: IFFALSE 6517
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6499: LD_VAR 0 7
6503: PPUSH
6504: LD_VAR 0 11
6508: PUSH
6509: LD_INT 1
6511: ARRAY
6512: PPUSH
6513: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6517: LD_VAR 0 10
6521: PUSH
6522: LD_INT 0
6524: EQUAL
6525: PUSH
6526: LD_VAR 0 11
6530: PUSH
6531: LD_INT 0
6533: EQUAL
6534: AND
6535: PUSH
6536: LD_VAR 0 7
6540: PUSH
6541: LD_INT 0
6543: GREATER
6544: AND
6545: IFFALSE 6650
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6547: LD_ADDR_VAR 0 12
6551: PUSH
6552: LD_INT 22
6554: PUSH
6555: LD_VAR 0 1
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 21
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 30
6576: PUSH
6577: LD_INT 8
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: PPUSH
6589: CALL_OW 69
6593: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6594: LD_ADDR_VAR 0 13
6598: PUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_VAR 0 12
6606: PPUSH
6607: CALL_OW 12
6611: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6612: LD_VAR 0 7
6616: PPUSH
6617: LD_INT 3
6619: PUSH
6620: LD_INT 60
6622: PUSH
6623: EMPTY
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PPUSH
6630: CALL_OW 72
6634: PPUSH
6635: LD_VAR 0 12
6639: PUSH
6640: LD_VAR 0 13
6644: ARRAY
6645: PPUSH
6646: CALL_OW 120
// end ; end ;
6650: LD_VAR 0 5
6654: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6655: LD_INT 0
6657: PPUSH
6658: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6659: LD_INT 22
6661: PUSH
6662: LD_VAR 0 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 21
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: PUSH
6690: LD_VAR 0 3
6694: LESSEQUAL
6695: IFFALSE 6762
// for i = 1 to vehCount do
6697: LD_ADDR_VAR 0 9
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_VAR 0 3
6711: PUSH
6712: FOR_TO
6713: IFFALSE 6760
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6715: LD_VAR 0 2
6719: PPUSH
6720: LD_VAR 0 7
6724: PPUSH
6725: LD_VAR 0 5
6729: PPUSH
6730: LD_VAR 0 6
6734: PPUSH
6735: LD_VAR 0 4
6739: PUSH
6740: LD_INT 1
6742: PPUSH
6743: LD_VAR 0 4
6747: PPUSH
6748: CALL_OW 12
6752: ARRAY
6753: PPUSH
6754: CALL_OW 185
6758: GO 6712
6760: POP
6761: POP
// end ;
6762: LD_VAR 0 8
6766: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
6771: PPUSH
6772: PPUSH
6773: PPUSH
6774: PPUSH
6775: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6776: LD_ADDR_VAR 0 8
6780: PUSH
6781: LD_INT 22
6783: PUSH
6784: LD_VAR 0 1
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 21
6795: PUSH
6796: LD_INT 2
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 24
6805: PUSH
6806: LD_INT 650
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: LIST
6817: PPUSH
6818: CALL_OW 69
6822: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6823: LD_INT 22
6825: PUSH
6826: LD_VAR 0 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 21
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 24
6847: PUSH
6848: LD_INT 1000
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: PPUSH
6860: CALL_OW 69
6864: PUSH
6865: LD_INT 3
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: PUSH
6879: LD_OWVAR 67
6883: ARRAY
6884: GREATEREQUAL
6885: IFFALSE 7342
// repeat wait ( 0 0$1 ) ;
6887: LD_INT 35
6889: PPUSH
6890: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6894: LD_ADDR_VAR 0 8
6898: PUSH
6899: LD_INT 22
6901: PUSH
6902: LD_VAR 0 1
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 21
6913: PUSH
6914: LD_INT 2
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 24
6923: PUSH
6924: LD_INT 650
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 69
6940: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6941: LD_INT 22
6943: PUSH
6944: LD_VAR 0 1
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 95
6955: PUSH
6956: LD_VAR 0 2
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PPUSH
6969: CALL_OW 69
6973: NOT
6974: PUSH
6975: LD_VAR 0 11
6979: PUSH
6980: LD_INT 0
6982: EQUAL
6983: AND
6984: IFFALSE 7039
// for i := 1 to wayX do
6986: LD_ADDR_VAR 0 6
6990: PUSH
6991: DOUBLE
6992: LD_INT 1
6994: DEC
6995: ST_TO_ADDR
6996: LD_VAR 0 3
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7037
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7004: LD_VAR 0 8
7008: PPUSH
7009: LD_VAR 0 3
7013: PUSH
7014: LD_VAR 0 6
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 4
7024: PUSH
7025: LD_VAR 0 6
7029: ARRAY
7030: PPUSH
7031: CALL_OW 174
7035: GO 7001
7037: POP
7038: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7039: LD_INT 22
7041: PUSH
7042: LD_VAR 0 1
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 95
7053: PUSH
7054: LD_VAR 0 2
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 69
7071: IFFALSE 7295
// begin seeEnemy = 1 ;
7073: LD_ADDR_VAR 0 11
7077: PUSH
7078: LD_INT 1
7080: ST_TO_ADDR
// for j in vehiclesOK do
7081: LD_ADDR_VAR 0 7
7085: PUSH
7086: LD_VAR 0 8
7090: PUSH
7091: FOR_IN
7092: IFFALSE 7293
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7094: LD_ADDR_VAR 0 9
7098: PUSH
7099: LD_INT 81
7101: PUSH
7102: LD_VAR 0 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 101
7113: PUSH
7114: LD_INT 1
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PPUSH
7130: LD_VAR 0 7
7134: PPUSH
7135: CALL_OW 74
7139: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7140: LD_ADDR_VAR 0 10
7144: PUSH
7145: LD_INT 81
7147: PUSH
7148: LD_VAR 0 1
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 101
7159: PUSH
7160: LD_INT 1
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 2
7169: PUSH
7170: LD_INT 59
7172: PUSH
7173: EMPTY
7174: LIST
7175: PUSH
7176: LD_INT 21
7178: PUSH
7179: LD_INT 1
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 21
7188: PUSH
7189: LD_INT 2
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: PPUSH
7210: CALL_OW 69
7214: PPUSH
7215: LD_VAR 0 7
7219: PPUSH
7220: CALL_OW 74
7224: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7225: LD_VAR 0 7
7229: PPUSH
7230: LD_VAR 0 9
7234: PPUSH
7235: CALL_OW 296
7239: PUSH
7240: LD_INT 8
7242: PLUS
7243: PUSH
7244: LD_VAR 0 7
7248: PPUSH
7249: LD_VAR 0 10
7253: PPUSH
7254: CALL_OW 296
7258: LESS
7259: IFFALSE 7277
// ComAttackUnit ( j , target1 ) else
7261: LD_VAR 0 7
7265: PPUSH
7266: LD_VAR 0 9
7270: PPUSH
7271: CALL_OW 115
7275: GO 7291
// ComAttackUnit ( j , target2 ) ;
7277: LD_VAR 0 7
7281: PPUSH
7282: LD_VAR 0 10
7286: PPUSH
7287: CALL_OW 115
// end ;
7291: GO 7091
7293: POP
7294: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7295: LD_INT 22
7297: PUSH
7298: LD_VAR 0 1
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 21
7309: PUSH
7310: LD_INT 2
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 24
7319: PUSH
7320: LD_INT 1000
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 69
7336: PUSH
7337: LD_INT 0
7339: EQUAL
7340: IFFALSE 6887
// seeEnemy = 0 ;
7342: LD_ADDR_VAR 0 11
7346: PUSH
7347: LD_INT 0
7349: ST_TO_ADDR
// end ;
7350: LD_VAR 0 5
7354: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7355: LD_INT 0
7357: PPUSH
7358: PPUSH
7359: PPUSH
7360: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7361: LD_ADDR_VAR 0 8
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_VAR 0 1
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 21
7380: PUSH
7381: LD_INT 2
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: LD_INT 24
7393: PUSH
7394: LD_INT 650
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: PPUSH
7410: CALL_OW 69
7414: ST_TO_ADDR
// if damageVehicles > 0 then
7415: LD_VAR 0 8
7419: PUSH
7420: LD_INT 0
7422: GREATER
7423: IFFALSE 7444
// ComMoveXY ( damageVehicles , repX , repY ) ;
7425: LD_VAR 0 8
7429: PPUSH
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_VAR 0 4
7439: PPUSH
7440: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7444: LD_VAR 0 8
7448: PPUSH
7449: LD_INT 95
7451: PUSH
7452: LD_VAR 0 2
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 3
7463: PUSH
7464: LD_INT 58
7466: PUSH
7467: EMPTY
7468: LIST
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 72
7482: PUSH
7483: LD_INT 0
7485: GREATER
7486: IFFALSE 7553
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7488: LD_ADDR_VAR 0 6
7492: PUSH
7493: LD_VAR 0 8
7497: PPUSH
7498: LD_INT 95
7500: PUSH
7501: LD_VAR 0 2
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 3
7512: PUSH
7513: LD_INT 58
7515: PUSH
7516: EMPTY
7517: LIST
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PPUSH
7527: CALL_OW 72
7531: PUSH
7532: FOR_IN
7533: IFFALSE 7551
// ComExitVehicle ( UnitsInside ( i ) ) ;
7535: LD_VAR 0 6
7539: PPUSH
7540: CALL_OW 313
7544: PPUSH
7545: CALL_OW 121
7549: GO 7532
7551: POP
7552: POP
// end ;
7553: LD_VAR 0 5
7557: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7558: LD_INT 0
7560: PPUSH
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
// for i = 1 to medicCount do
7571: LD_ADDR_VAR 0 14
7575: PUSH
7576: DOUBLE
7577: LD_INT 1
7579: DEC
7580: ST_TO_ADDR
7581: LD_VAR 0 7
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7669
// begin uc_side = side ;
7589: LD_ADDR_OWVAR 20
7593: PUSH
7594: LD_VAR 0 1
7598: ST_TO_ADDR
// uc_nation = nation ;
7599: LD_ADDR_OWVAR 21
7603: PUSH
7604: LD_VAR 0 2
7608: ST_TO_ADDR
// hc_name =  ;
7609: LD_ADDR_OWVAR 26
7613: PUSH
7614: LD_STRING 
7616: ST_TO_ADDR
// hc_gallery =  ;
7617: LD_ADDR_OWVAR 33
7621: PUSH
7622: LD_STRING 
7624: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7625: LD_INT 0
7627: PPUSH
7628: LD_INT 4
7630: PPUSH
7631: LD_VAR 0 8
7635: PPUSH
7636: CALL_OW 380
// un = CreateHuman ;
7640: LD_ADDR_VAR 0 16
7644: PUSH
7645: CALL_OW 44
7649: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7650: LD_VAR 0 16
7654: PPUSH
7655: LD_VAR 0 9
7659: PPUSH
7660: LD_INT 0
7662: PPUSH
7663: CALL_OW 49
// end ;
7667: GO 7586
7669: POP
7670: POP
// for i = 1 to soldierCount do
7671: LD_ADDR_VAR 0 14
7675: PUSH
7676: DOUBLE
7677: LD_INT 1
7679: DEC
7680: ST_TO_ADDR
7681: LD_VAR 0 3
7685: PUSH
7686: FOR_TO
7687: IFFALSE 7769
// begin uc_side = side ;
7689: LD_ADDR_OWVAR 20
7693: PUSH
7694: LD_VAR 0 1
7698: ST_TO_ADDR
// uc_nation = nation ;
7699: LD_ADDR_OWVAR 21
7703: PUSH
7704: LD_VAR 0 2
7708: ST_TO_ADDR
// hc_name =  ;
7709: LD_ADDR_OWVAR 26
7713: PUSH
7714: LD_STRING 
7716: ST_TO_ADDR
// hc_gallery =  ;
7717: LD_ADDR_OWVAR 33
7721: PUSH
7722: LD_STRING 
7724: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7725: LD_INT 0
7727: PPUSH
7728: LD_INT 1
7730: PPUSH
7731: LD_VAR 0 8
7735: PPUSH
7736: CALL_OW 380
// un = CreateHuman ;
7740: LD_ADDR_VAR 0 16
7744: PUSH
7745: CALL_OW 44
7749: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7750: LD_VAR 0 16
7754: PPUSH
7755: LD_VAR 0 9
7759: PPUSH
7760: LD_INT 0
7762: PPUSH
7763: CALL_OW 49
// end ;
7767: GO 7686
7769: POP
7770: POP
// for i = 1 to sniperCount do
7771: LD_ADDR_VAR 0 14
7775: PUSH
7776: DOUBLE
7777: LD_INT 1
7779: DEC
7780: ST_TO_ADDR
7781: LD_VAR 0 4
7785: PUSH
7786: FOR_TO
7787: IFFALSE 7869
// begin uc_side = side ;
7789: LD_ADDR_OWVAR 20
7793: PUSH
7794: LD_VAR 0 1
7798: ST_TO_ADDR
// uc_nation = nation ;
7799: LD_ADDR_OWVAR 21
7803: PUSH
7804: LD_VAR 0 2
7808: ST_TO_ADDR
// hc_name =  ;
7809: LD_ADDR_OWVAR 26
7813: PUSH
7814: LD_STRING 
7816: ST_TO_ADDR
// hc_gallery =  ;
7817: LD_ADDR_OWVAR 33
7821: PUSH
7822: LD_STRING 
7824: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7825: LD_INT 0
7827: PPUSH
7828: LD_INT 5
7830: PPUSH
7831: LD_VAR 0 8
7835: PPUSH
7836: CALL_OW 380
// un = CreateHuman ;
7840: LD_ADDR_VAR 0 16
7844: PUSH
7845: CALL_OW 44
7849: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7850: LD_VAR 0 16
7854: PPUSH
7855: LD_VAR 0 9
7859: PPUSH
7860: LD_INT 0
7862: PPUSH
7863: CALL_OW 49
// end ;
7867: GO 7786
7869: POP
7870: POP
// for i = 1 to bazookCount do
7871: LD_ADDR_VAR 0 14
7875: PUSH
7876: DOUBLE
7877: LD_INT 1
7879: DEC
7880: ST_TO_ADDR
7881: LD_VAR 0 5
7885: PUSH
7886: FOR_TO
7887: IFFALSE 7969
// begin uc_side = side ;
7889: LD_ADDR_OWVAR 20
7893: PUSH
7894: LD_VAR 0 1
7898: ST_TO_ADDR
// uc_nation = nation ;
7899: LD_ADDR_OWVAR 21
7903: PUSH
7904: LD_VAR 0 2
7908: ST_TO_ADDR
// hc_name =  ;
7909: LD_ADDR_OWVAR 26
7913: PUSH
7914: LD_STRING 
7916: ST_TO_ADDR
// hc_gallery =  ;
7917: LD_ADDR_OWVAR 33
7921: PUSH
7922: LD_STRING 
7924: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7925: LD_INT 0
7927: PPUSH
7928: LD_INT 9
7930: PPUSH
7931: LD_VAR 0 8
7935: PPUSH
7936: CALL_OW 380
// un = CreateHuman ;
7940: LD_ADDR_VAR 0 16
7944: PUSH
7945: CALL_OW 44
7949: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7950: LD_VAR 0 16
7954: PPUSH
7955: LD_VAR 0 9
7959: PPUSH
7960: LD_INT 0
7962: PPUSH
7963: CALL_OW 49
// end ;
7967: GO 7886
7969: POP
7970: POP
// for i = 1 to mortalCount do
7971: LD_ADDR_VAR 0 14
7975: PUSH
7976: DOUBLE
7977: LD_INT 1
7979: DEC
7980: ST_TO_ADDR
7981: LD_VAR 0 6
7985: PUSH
7986: FOR_TO
7987: IFFALSE 8069
// begin uc_side = side ;
7989: LD_ADDR_OWVAR 20
7993: PUSH
7994: LD_VAR 0 1
7998: ST_TO_ADDR
// uc_nation = nation ;
7999: LD_ADDR_OWVAR 21
8003: PUSH
8004: LD_VAR 0 2
8008: ST_TO_ADDR
// hc_name =  ;
8009: LD_ADDR_OWVAR 26
8013: PUSH
8014: LD_STRING 
8016: ST_TO_ADDR
// hc_gallery =  ;
8017: LD_ADDR_OWVAR 33
8021: PUSH
8022: LD_STRING 
8024: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8025: LD_INT 0
8027: PPUSH
8028: LD_INT 8
8030: PPUSH
8031: LD_VAR 0 8
8035: PPUSH
8036: CALL_OW 380
// un = CreateHuman ;
8040: LD_ADDR_VAR 0 16
8044: PUSH
8045: CALL_OW 44
8049: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8050: LD_VAR 0 16
8054: PPUSH
8055: LD_VAR 0 9
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 49
// end ;
8067: GO 7986
8069: POP
8070: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8071: LD_ADDR_VAR 0 19
8075: PUSH
8076: LD_INT 22
8078: PUSH
8079: LD_VAR 0 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 2
8090: PUSH
8091: LD_INT 25
8093: PUSH
8094: LD_INT 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 25
8103: PUSH
8104: LD_INT 5
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 25
8113: PUSH
8114: LD_INT 8
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 25
8123: PUSH
8124: LD_INT 9
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PPUSH
8142: CALL_OW 69
8146: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8147: LD_ADDR_VAR 0 18
8151: PUSH
8152: LD_INT 22
8154: PUSH
8155: LD_VAR 0 1
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 4
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PPUSH
8178: CALL_OW 69
8182: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8183: LD_VAR 0 18
8187: PPUSH
8188: LD_VAR 0 10
8192: PPUSH
8193: CALL_OW 113
// if strategy = 1 then
8197: LD_VAR 0 12
8201: PUSH
8202: LD_INT 1
8204: EQUAL
8205: IFFALSE 8721
// begin repeat wait ( 0 0$3 ) ;
8207: LD_INT 105
8209: PPUSH
8210: CALL_OW 67
// for i in soldiersOK_list do
8214: LD_ADDR_VAR 0 14
8218: PUSH
8219: LD_VAR 0 19
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8289
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8227: LD_VAR 0 14
8231: PPUSH
8232: LD_INT 91
8234: PPUSH
8235: LD_INT 63
8237: PPUSH
8238: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8242: LD_VAR 0 14
8246: PPUSH
8247: LD_INT 101
8249: PPUSH
8250: LD_INT 53
8252: PPUSH
8253: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8257: LD_VAR 0 14
8261: PPUSH
8262: LD_INT 75
8264: PPUSH
8265: LD_INT 23
8267: PPUSH
8268: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8272: LD_VAR 0 14
8276: PPUSH
8277: LD_INT 78
8279: PPUSH
8280: LD_INT 8
8282: PPUSH
8283: CALL_OW 174
// end ;
8287: GO 8224
8289: POP
8290: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8291: LD_INT 15
8293: PPUSH
8294: LD_INT 22
8296: PUSH
8297: LD_VAR 0 1
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PPUSH
8306: CALL_OW 70
8310: PUSH
8311: LD_INT 2
8313: GREATER
8314: IFFALSE 8207
// repeat wait ( 0 0$1 ) ;
8316: LD_INT 35
8318: PPUSH
8319: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8323: LD_ADDR_VAR 0 17
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_VAR 0 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 1
8342: PUSH
8343: LD_INT 3
8345: PUSH
8346: LD_INT 24
8348: PUSH
8349: LD_INT 550
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: LD_INT 24
8362: PUSH
8363: LD_INT 250
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 69
8383: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8384: LD_ADDR_VAR 0 19
8388: PUSH
8389: LD_INT 22
8391: PUSH
8392: LD_VAR 0 1
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: LD_INT 25
8406: PUSH
8407: LD_INT 1
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 25
8416: PUSH
8417: LD_INT 5
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 25
8426: PUSH
8427: LD_INT 8
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 25
8436: PUSH
8437: LD_INT 9
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 24
8453: PUSH
8454: LD_INT 1000
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL_OW 69
8470: ST_TO_ADDR
// if medicCount > 0 then
8471: LD_VAR 0 7
8475: PUSH
8476: LD_INT 0
8478: GREATER
8479: IFFALSE 8523
// begin if damageUnit_list > 0 then
8481: LD_VAR 0 17
8485: PUSH
8486: LD_INT 0
8488: GREATER
8489: IFFALSE 8523
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8491: LD_VAR 0 17
8495: PPUSH
8496: LD_VAR 0 10
8500: PPUSH
8501: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8505: LD_VAR 0 7
8509: PPUSH
8510: LD_VAR 0 17
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8523: LD_ADDR_VAR 0 14
8527: PUSH
8528: LD_VAR 0 19
8532: PUSH
8533: FOR_IN
8534: IFFALSE 8710
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8536: LD_ADDR_VAR 0 22
8540: PUSH
8541: LD_INT 22
8543: PUSH
8544: LD_VAR 0 11
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: PPUSH
8558: LD_VAR 0 14
8562: PPUSH
8563: CALL_OW 74
8567: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8568: LD_ADDR_VAR 0 23
8572: PUSH
8573: LD_INT 22
8575: PUSH
8576: LD_VAR 0 11
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 2
8587: PUSH
8588: LD_INT 59
8590: PUSH
8591: EMPTY
8592: LIST
8593: PUSH
8594: LD_INT 21
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: PPUSH
8627: CALL_OW 69
8631: PPUSH
8632: LD_VAR 0 14
8636: PPUSH
8637: CALL_OW 74
8641: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8642: LD_VAR 0 14
8646: PPUSH
8647: LD_VAR 0 22
8651: PPUSH
8652: CALL_OW 296
8656: PUSH
8657: LD_INT 8
8659: PLUS
8660: PUSH
8661: LD_VAR 0 14
8665: PPUSH
8666: LD_VAR 0 23
8670: PPUSH
8671: CALL_OW 296
8675: LESS
8676: IFFALSE 8694
// begin ComAttackUnit ( i , target1 ) ;
8678: LD_VAR 0 14
8682: PPUSH
8683: LD_VAR 0 22
8687: PPUSH
8688: CALL_OW 115
// end else
8692: GO 8708
// begin ComAttackUnit ( i , target2 ) ;
8694: LD_VAR 0 14
8698: PPUSH
8699: LD_VAR 0 23
8703: PPUSH
8704: CALL_OW 115
// end ; end ;
8708: GO 8533
8710: POP
8711: POP
// until soldiersOK_list = [ ] ;
8712: LD_VAR 0 19
8716: PUSH
8717: EMPTY
8718: EQUAL
8719: IFFALSE 8316
// end ; if strategy = 2 then
8721: LD_VAR 0 12
8725: PUSH
8726: LD_INT 2
8728: EQUAL
8729: IFFALSE 9215
// begin repeat wait ( 0 0$1 ) ;
8731: LD_INT 35
8733: PPUSH
8734: CALL_OW 67
// for i in soldiersOK_list do
8738: LD_ADDR_VAR 0 14
8742: PUSH
8743: LD_VAR 0 19
8747: PUSH
8748: FOR_IN
8749: IFFALSE 8783
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8751: LD_VAR 0 14
8755: PPUSH
8756: LD_INT 91
8758: PPUSH
8759: LD_INT 63
8761: PPUSH
8762: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8766: LD_VAR 0 14
8770: PPUSH
8771: LD_INT 75
8773: PPUSH
8774: LD_INT 33
8776: PPUSH
8777: CALL_OW 174
// end ;
8781: GO 8748
8783: POP
8784: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8785: LD_INT 16
8787: PPUSH
8788: LD_INT 22
8790: PUSH
8791: LD_VAR 0 1
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 70
8804: PUSH
8805: LD_INT 2
8807: GREATER
8808: IFFALSE 8731
// repeat wait ( 0 0$3 ) ;
8810: LD_INT 105
8812: PPUSH
8813: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8817: LD_ADDR_VAR 0 17
8821: PUSH
8822: LD_INT 22
8824: PUSH
8825: LD_VAR 0 1
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: LD_INT 3
8839: PUSH
8840: LD_INT 24
8842: PUSH
8843: LD_INT 550
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 24
8856: PUSH
8857: LD_INT 250
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 69
8877: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8878: LD_ADDR_VAR 0 19
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_VAR 0 1
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: LD_INT 25
8900: PUSH
8901: LD_INT 1
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 25
8910: PUSH
8911: LD_INT 5
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 25
8920: PUSH
8921: LD_INT 8
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 25
8930: PUSH
8931: LD_INT 9
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 24
8947: PUSH
8948: LD_INT 1000
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 69
8964: ST_TO_ADDR
// if medicCount > 0 then
8965: LD_VAR 0 7
8969: PUSH
8970: LD_INT 0
8972: GREATER
8973: IFFALSE 9017
// begin if damageUnit_list > 0 then
8975: LD_VAR 0 17
8979: PUSH
8980: LD_INT 0
8982: GREATER
8983: IFFALSE 9017
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8985: LD_VAR 0 17
8989: PPUSH
8990: LD_VAR 0 10
8994: PPUSH
8995: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8999: LD_VAR 0 7
9003: PPUSH
9004: LD_VAR 0 17
9008: PUSH
9009: LD_INT 1
9011: ARRAY
9012: PPUSH
9013: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9017: LD_ADDR_VAR 0 14
9021: PUSH
9022: LD_VAR 0 19
9026: PUSH
9027: FOR_IN
9028: IFFALSE 9204
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9030: LD_ADDR_VAR 0 22
9034: PUSH
9035: LD_INT 22
9037: PUSH
9038: LD_VAR 0 11
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 69
9051: PPUSH
9052: LD_VAR 0 14
9056: PPUSH
9057: CALL_OW 74
9061: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9062: LD_ADDR_VAR 0 23
9066: PUSH
9067: LD_INT 22
9069: PUSH
9070: LD_VAR 0 11
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 2
9081: PUSH
9082: LD_INT 59
9084: PUSH
9085: EMPTY
9086: LIST
9087: PUSH
9088: LD_INT 21
9090: PUSH
9091: LD_INT 1
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 21
9100: PUSH
9101: LD_INT 2
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PPUSH
9126: LD_VAR 0 14
9130: PPUSH
9131: CALL_OW 74
9135: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9136: LD_VAR 0 14
9140: PPUSH
9141: LD_VAR 0 22
9145: PPUSH
9146: CALL_OW 296
9150: PUSH
9151: LD_INT 8
9153: PLUS
9154: PUSH
9155: LD_VAR 0 14
9159: PPUSH
9160: LD_VAR 0 23
9164: PPUSH
9165: CALL_OW 296
9169: LESS
9170: IFFALSE 9188
// begin ComAttackUnit ( i , target1 ) ;
9172: LD_VAR 0 14
9176: PPUSH
9177: LD_VAR 0 22
9181: PPUSH
9182: CALL_OW 115
// end else
9186: GO 9202
// begin ComAttackUnit ( i , target2 ) ;
9188: LD_VAR 0 14
9192: PPUSH
9193: LD_VAR 0 23
9197: PPUSH
9198: CALL_OW 115
// end ; end ;
9202: GO 9027
9204: POP
9205: POP
// until soldiersOK_list = [ ] ;
9206: LD_VAR 0 19
9210: PUSH
9211: EMPTY
9212: EQUAL
9213: IFFALSE 8810
// end ; if not soldiersOK_list and medic_list then
9215: LD_VAR 0 19
9219: NOT
9220: PUSH
9221: LD_VAR 0 18
9225: AND
9226: IFFALSE 9366
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9228: LD_ADDR_VAR 0 18
9232: PUSH
9233: LD_INT 22
9235: PUSH
9236: LD_VAR 0 1
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 4
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 50
9257: PUSH
9258: EMPTY
9259: LIST
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: PPUSH
9266: CALL_OW 69
9270: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9271: LD_INT 35
9273: PPUSH
9274: CALL_OW 67
// for i in medic_list do
9278: LD_ADDR_VAR 0 14
9282: PUSH
9283: LD_VAR 0 18
9287: PUSH
9288: FOR_IN
9289: IFFALSE 9357
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9291: LD_VAR 0 14
9295: PPUSH
9296: CALL_OW 314
9300: NOT
9301: PUSH
9302: LD_VAR 0 14
9306: PPUSH
9307: LD_INT 4
9309: PPUSH
9310: CALL_OW 308
9314: NOT
9315: AND
9316: IFFALSE 9332
// ComMoveToArea ( i , RussianAttack ) else
9318: LD_VAR 0 14
9322: PPUSH
9323: LD_INT 4
9325: PPUSH
9326: CALL_OW 113
9330: GO 9355
// if IsInArea ( i , RussianAttack ) then
9332: LD_VAR 0 14
9336: PPUSH
9337: LD_INT 4
9339: PPUSH
9340: CALL_OW 308
9344: IFFALSE 9355
// RemoveUnit ( i ) ;
9346: LD_VAR 0 14
9350: PPUSH
9351: CALL_OW 64
9355: GO 9288
9357: POP
9358: POP
// until not medic_list ;
9359: LD_VAR 0 18
9363: NOT
9364: IFFALSE 9228
// end ; end ;
9366: LD_VAR 0 13
9370: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9371: LD_INT 0
9373: PPUSH
9374: PPUSH
9375: PPUSH
9376: PPUSH
9377: PPUSH
9378: PPUSH
9379: PPUSH
9380: PPUSH
9381: PPUSH
9382: PPUSH
9383: PPUSH
// amChassisTab = [ ] ;
9384: LD_ADDR_VAR 0 19
9388: PUSH
9389: EMPTY
9390: ST_TO_ADDR
// arChassisTab = [ ] ;
9391: LD_ADDR_VAR 0 18
9395: PUSH
9396: EMPTY
9397: ST_TO_ADDR
// ruChassisTab = [ ] ;
9398: LD_ADDR_VAR 0 17
9402: PUSH
9403: EMPTY
9404: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9405: LD_INT 35
9407: PPUSH
9408: CALL_OW 67
// if nation = 1 then
9412: LD_VAR 0 5
9416: PUSH
9417: LD_INT 1
9419: EQUAL
9420: IFFALSE 9911
// begin uc_side = side ;
9422: LD_ADDR_OWVAR 20
9426: PUSH
9427: LD_VAR 0 2
9431: ST_TO_ADDR
// uc_nation = nation ;
9432: LD_ADDR_OWVAR 21
9436: PUSH
9437: LD_VAR 0 5
9441: ST_TO_ADDR
// vc_engine = vehengine ;
9442: LD_ADDR_OWVAR 39
9446: PUSH
9447: LD_VAR 0 6
9451: ST_TO_ADDR
// vc_control = vehcontrol ;
9452: LD_ADDR_OWVAR 38
9456: PUSH
9457: LD_VAR 0 7
9461: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9462: LD_ADDR_OWVAR 40
9466: PUSH
9467: LD_VAR 0 10
9471: PUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_VAR 0 10
9479: PPUSH
9480: CALL_OW 12
9484: ARRAY
9485: ST_TO_ADDR
// for j = 1 to AMWeapon do
9486: LD_ADDR_VAR 0 14
9490: PUSH
9491: DOUBLE
9492: LD_INT 1
9494: DEC
9495: ST_TO_ADDR
9496: LD_VAR 0 10
9500: PUSH
9501: FOR_TO
9502: IFFALSE 9803
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9504: LD_VAR 0 10
9508: PUSH
9509: LD_VAR 0 14
9513: ARRAY
9514: PUSH
9515: LD_INT 2
9517: EQUAL
9518: PUSH
9519: LD_VAR 0 10
9523: PUSH
9524: LD_VAR 0 14
9528: ARRAY
9529: PUSH
9530: LD_INT 3
9532: EQUAL
9533: OR
9534: IFFALSE 9587
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9536: LD_ADDR_VAR 0 19
9540: PUSH
9541: LD_INT 1
9543: PUSH
9544: LD_INT 2
9546: PUSH
9547: LD_INT 3
9549: PUSH
9550: LD_INT 4
9552: PUSH
9553: LD_INT 5
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9563: LD_ADDR_OWVAR 37
9567: PUSH
9568: LD_VAR 0 19
9572: PUSH
9573: LD_INT 1
9575: PPUSH
9576: LD_VAR 0 19
9580: PPUSH
9581: CALL_OW 12
9585: ARRAY
9586: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9587: LD_VAR 0 10
9591: PUSH
9592: LD_VAR 0 14
9596: ARRAY
9597: PUSH
9598: LD_INT 4
9600: EQUAL
9601: PUSH
9602: LD_VAR 0 10
9606: PUSH
9607: LD_VAR 0 14
9611: ARRAY
9612: PUSH
9613: LD_INT 5
9615: EQUAL
9616: OR
9617: PUSH
9618: LD_VAR 0 10
9622: PUSH
9623: LD_VAR 0 14
9627: ARRAY
9628: PUSH
9629: LD_INT 9
9631: EQUAL
9632: OR
9633: PUSH
9634: LD_VAR 0 10
9638: PUSH
9639: LD_VAR 0 14
9643: ARRAY
9644: PUSH
9645: LD_INT 11
9647: EQUAL
9648: OR
9649: PUSH
9650: LD_VAR 0 10
9654: PUSH
9655: LD_VAR 0 14
9659: ARRAY
9660: PUSH
9661: LD_INT 7
9663: EQUAL
9664: OR
9665: IFFALSE 9714
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9667: LD_ADDR_VAR 0 19
9671: PUSH
9672: LD_INT 2
9674: PUSH
9675: LD_INT 3
9677: PUSH
9678: LD_INT 4
9680: PUSH
9681: LD_INT 5
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9690: LD_ADDR_OWVAR 37
9694: PUSH
9695: LD_VAR 0 19
9699: PUSH
9700: LD_INT 1
9702: PPUSH
9703: LD_VAR 0 19
9707: PPUSH
9708: CALL_OW 12
9712: ARRAY
9713: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9714: LD_VAR 0 10
9718: PUSH
9719: LD_VAR 0 14
9723: ARRAY
9724: PUSH
9725: LD_INT 8
9727: EQUAL
9728: PUSH
9729: LD_VAR 0 10
9733: PUSH
9734: LD_VAR 0 14
9738: ARRAY
9739: PUSH
9740: LD_INT 6
9742: EQUAL
9743: OR
9744: PUSH
9745: LD_VAR 0 10
9749: PUSH
9750: LD_VAR 0 14
9754: ARRAY
9755: PUSH
9756: LD_INT 10
9758: EQUAL
9759: OR
9760: IFFALSE 9801
// begin amChassisTab = [ 4 , 5 ] ;
9762: LD_ADDR_VAR 0 19
9766: PUSH
9767: LD_INT 4
9769: PUSH
9770: LD_INT 5
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9777: LD_ADDR_OWVAR 37
9781: PUSH
9782: LD_VAR 0 19
9786: PUSH
9787: LD_INT 1
9789: PPUSH
9790: LD_VAR 0 19
9794: PPUSH
9795: CALL_OW 12
9799: ARRAY
9800: ST_TO_ADDR
// end ; end ;
9801: GO 9501
9803: POP
9804: POP
// veh = CreateVehicle ;
9805: LD_ADDR_VAR 0 16
9809: PUSH
9810: CALL_OW 45
9814: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9815: LD_VAR 0 16
9819: PPUSH
9820: LD_VAR 0 1
9824: PPUSH
9825: LD_INT 0
9827: PPUSH
9828: CALL_OW 49
// if vehControl = 1 then
9832: LD_VAR 0 7
9836: PUSH
9837: LD_INT 1
9839: EQUAL
9840: IFFALSE 9897
// begin hc_gallery =  ;
9842: LD_ADDR_OWVAR 33
9846: PUSH
9847: LD_STRING 
9849: ST_TO_ADDR
// hc_name =  ;
9850: LD_ADDR_OWVAR 26
9854: PUSH
9855: LD_STRING 
9857: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9858: LD_INT 0
9860: PPUSH
9861: LD_INT 3
9863: PPUSH
9864: LD_VAR 0 4
9868: PPUSH
9869: CALL_OW 380
// un = CreateHuman ;
9873: LD_ADDR_VAR 0 15
9877: PUSH
9878: CALL_OW 44
9882: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9883: LD_VAR 0 15
9887: PPUSH
9888: LD_VAR 0 16
9892: PPUSH
9893: CALL_OW 52
// end ; i = i + 1 ;
9897: LD_ADDR_VAR 0 13
9901: PUSH
9902: LD_VAR 0 13
9906: PUSH
9907: LD_INT 1
9909: PLUS
9910: ST_TO_ADDR
// end ; if nation = 2 then
9911: LD_VAR 0 5
9915: PUSH
9916: LD_INT 2
9918: EQUAL
9919: IFFALSE 10343
// begin uc_side = side ;
9921: LD_ADDR_OWVAR 20
9925: PUSH
9926: LD_VAR 0 2
9930: ST_TO_ADDR
// uc_nation = nation ;
9931: LD_ADDR_OWVAR 21
9935: PUSH
9936: LD_VAR 0 5
9940: ST_TO_ADDR
// vc_engine = vehengine ;
9941: LD_ADDR_OWVAR 39
9945: PUSH
9946: LD_VAR 0 6
9950: ST_TO_ADDR
// vc_control = vehcontrol ;
9951: LD_ADDR_OWVAR 38
9955: PUSH
9956: LD_VAR 0 7
9960: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9961: LD_ADDR_OWVAR 40
9965: PUSH
9966: LD_VAR 0 9
9970: PUSH
9971: LD_INT 1
9973: PPUSH
9974: LD_VAR 0 9
9978: PPUSH
9979: CALL_OW 12
9983: ARRAY
9984: ST_TO_ADDR
// for j = 1 to ARWeapons do
9985: LD_ADDR_VAR 0 14
9989: PUSH
9990: DOUBLE
9991: LD_INT 1
9993: DEC
9994: ST_TO_ADDR
9995: LD_VAR 0 9
9999: PUSH
10000: FOR_TO
10001: IFFALSE 10235
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10003: LD_VAR 0 9
10007: PUSH
10008: LD_VAR 0 14
10012: ARRAY
10013: PUSH
10014: LD_INT 24
10016: EQUAL
10017: PUSH
10018: LD_VAR 0 9
10022: PUSH
10023: LD_VAR 0 14
10027: ARRAY
10028: PUSH
10029: LD_INT 22
10031: EQUAL
10032: OR
10033: PUSH
10034: LD_VAR 0 9
10038: PUSH
10039: LD_VAR 0 14
10043: ARRAY
10044: PUSH
10045: LD_INT 23
10047: EQUAL
10048: OR
10049: PUSH
10050: LD_VAR 0 9
10054: PUSH
10055: LD_VAR 0 14
10059: ARRAY
10060: PUSH
10061: LD_INT 30
10063: EQUAL
10064: OR
10065: IFFALSE 10114
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10067: LD_ADDR_VAR 0 18
10071: PUSH
10072: LD_INT 11
10074: PUSH
10075: LD_INT 12
10077: PUSH
10078: LD_INT 13
10080: PUSH
10081: LD_INT 14
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10090: LD_ADDR_OWVAR 37
10094: PUSH
10095: LD_VAR 0 18
10099: PUSH
10100: LD_INT 1
10102: PPUSH
10103: LD_VAR 0 18
10107: PPUSH
10108: CALL_OW 12
10112: ARRAY
10113: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10114: LD_VAR 0 9
10118: PUSH
10119: LD_VAR 0 14
10123: ARRAY
10124: PUSH
10125: LD_INT 29
10127: EQUAL
10128: PUSH
10129: LD_VAR 0 9
10133: PUSH
10134: LD_VAR 0 14
10138: ARRAY
10139: PUSH
10140: LD_INT 28
10142: EQUAL
10143: OR
10144: PUSH
10145: LD_VAR 0 9
10149: PUSH
10150: LD_VAR 0 14
10154: ARRAY
10155: PUSH
10156: LD_INT 27
10158: EQUAL
10159: OR
10160: PUSH
10161: LD_VAR 0 9
10165: PUSH
10166: LD_VAR 0 14
10170: ARRAY
10171: PUSH
10172: LD_INT 26
10174: EQUAL
10175: OR
10176: PUSH
10177: LD_VAR 0 9
10181: PUSH
10182: LD_VAR 0 14
10186: ARRAY
10187: PUSH
10188: LD_INT 25
10190: EQUAL
10191: OR
10192: IFFALSE 10233
// begin arChassisTab = [ 13 , 14 ] ;
10194: LD_ADDR_VAR 0 18
10198: PUSH
10199: LD_INT 13
10201: PUSH
10202: LD_INT 14
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10209: LD_ADDR_OWVAR 37
10213: PUSH
10214: LD_VAR 0 18
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_VAR 0 18
10226: PPUSH
10227: CALL_OW 12
10231: ARRAY
10232: ST_TO_ADDR
// end ; end ;
10233: GO 10000
10235: POP
10236: POP
// veh = CreateVehicle ;
10237: LD_ADDR_VAR 0 16
10241: PUSH
10242: CALL_OW 45
10246: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10247: LD_VAR 0 16
10251: PPUSH
10252: LD_VAR 0 1
10256: PPUSH
10257: LD_INT 0
10259: PPUSH
10260: CALL_OW 49
// if vehcontrol = 1 then
10264: LD_VAR 0 7
10268: PUSH
10269: LD_INT 1
10271: EQUAL
10272: IFFALSE 10329
// begin hc_gallery =  ;
10274: LD_ADDR_OWVAR 33
10278: PUSH
10279: LD_STRING 
10281: ST_TO_ADDR
// hc_name =  ;
10282: LD_ADDR_OWVAR 26
10286: PUSH
10287: LD_STRING 
10289: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10290: LD_INT 0
10292: PPUSH
10293: LD_INT 3
10295: PPUSH
10296: LD_VAR 0 4
10300: PPUSH
10301: CALL_OW 380
// un = CreateHuman ;
10305: LD_ADDR_VAR 0 15
10309: PUSH
10310: CALL_OW 44
10314: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10315: LD_VAR 0 15
10319: PPUSH
10320: LD_VAR 0 16
10324: PPUSH
10325: CALL_OW 52
// end ; i = i + 1 ;
10329: LD_ADDR_VAR 0 13
10333: PUSH
10334: LD_VAR 0 13
10338: PUSH
10339: LD_INT 1
10341: PLUS
10342: ST_TO_ADDR
// end ; if nation = 3 then
10343: LD_VAR 0 5
10347: PUSH
10348: LD_INT 3
10350: EQUAL
10351: IFFALSE 10743
// begin uc_side = side ;
10353: LD_ADDR_OWVAR 20
10357: PUSH
10358: LD_VAR 0 2
10362: ST_TO_ADDR
// uc_nation = nation ;
10363: LD_ADDR_OWVAR 21
10367: PUSH
10368: LD_VAR 0 5
10372: ST_TO_ADDR
// vc_engine = vehengine ;
10373: LD_ADDR_OWVAR 39
10377: PUSH
10378: LD_VAR 0 6
10382: ST_TO_ADDR
// vc_control = vehcontrol ;
10383: LD_ADDR_OWVAR 38
10387: PUSH
10388: LD_VAR 0 7
10392: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10393: LD_ADDR_OWVAR 40
10397: PUSH
10398: LD_VAR 0 8
10402: PUSH
10403: LD_INT 1
10405: PPUSH
10406: LD_VAR 0 8
10410: PPUSH
10411: CALL_OW 12
10415: ARRAY
10416: ST_TO_ADDR
// for j = 1 to RuWeapons do
10417: LD_ADDR_VAR 0 14
10421: PUSH
10422: DOUBLE
10423: LD_INT 1
10425: DEC
10426: ST_TO_ADDR
10427: LD_VAR 0 8
10431: PUSH
10432: FOR_TO
10433: IFFALSE 10635
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10435: LD_VAR 0 8
10439: PUSH
10440: LD_VAR 0 14
10444: ARRAY
10445: PUSH
10446: LD_INT 42
10448: EQUAL
10449: PUSH
10450: LD_VAR 0 8
10454: PUSH
10455: LD_VAR 0 14
10459: ARRAY
10460: PUSH
10461: LD_INT 43
10463: EQUAL
10464: OR
10465: PUSH
10466: LD_VAR 0 8
10470: PUSH
10471: LD_VAR 0 14
10475: ARRAY
10476: PUSH
10477: LD_INT 44
10479: EQUAL
10480: OR
10481: PUSH
10482: LD_VAR 0 8
10486: PUSH
10487: LD_VAR 0 14
10491: ARRAY
10492: PUSH
10493: LD_INT 45
10495: EQUAL
10496: OR
10497: PUSH
10498: LD_VAR 0 8
10502: PUSH
10503: LD_VAR 0 14
10507: ARRAY
10508: PUSH
10509: LD_INT 49
10511: EQUAL
10512: OR
10513: IFFALSE 10562
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10515: LD_ADDR_VAR 0 17
10519: PUSH
10520: LD_INT 21
10522: PUSH
10523: LD_INT 22
10525: PUSH
10526: LD_INT 23
10528: PUSH
10529: LD_INT 24
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10538: LD_ADDR_OWVAR 37
10542: PUSH
10543: LD_VAR 0 17
10547: PUSH
10548: LD_INT 1
10550: PPUSH
10551: LD_VAR 0 17
10555: PPUSH
10556: CALL_OW 12
10560: ARRAY
10561: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10562: LD_VAR 0 8
10566: PUSH
10567: LD_VAR 0 14
10571: ARRAY
10572: PUSH
10573: LD_INT 46
10575: EQUAL
10576: PUSH
10577: LD_VAR 0 8
10581: PUSH
10582: LD_VAR 0 14
10586: ARRAY
10587: PUSH
10588: LD_INT 47
10590: EQUAL
10591: OR
10592: IFFALSE 10633
// begin ruChassisTab = [ 23 , 24 ] ;
10594: LD_ADDR_VAR 0 17
10598: PUSH
10599: LD_INT 23
10601: PUSH
10602: LD_INT 24
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10609: LD_ADDR_OWVAR 37
10613: PUSH
10614: LD_VAR 0 17
10618: PUSH
10619: LD_INT 1
10621: PPUSH
10622: LD_VAR 0 17
10626: PPUSH
10627: CALL_OW 12
10631: ARRAY
10632: ST_TO_ADDR
// end ; end ;
10633: GO 10432
10635: POP
10636: POP
// veh = CreateVehicle ;
10637: LD_ADDR_VAR 0 16
10641: PUSH
10642: CALL_OW 45
10646: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10647: LD_VAR 0 16
10651: PPUSH
10652: LD_VAR 0 1
10656: PPUSH
10657: LD_INT 0
10659: PPUSH
10660: CALL_OW 49
// if vehcontrol = 1 then
10664: LD_VAR 0 7
10668: PUSH
10669: LD_INT 1
10671: EQUAL
10672: IFFALSE 10729
// begin hc_gallery =  ;
10674: LD_ADDR_OWVAR 33
10678: PUSH
10679: LD_STRING 
10681: ST_TO_ADDR
// hc_name =  ;
10682: LD_ADDR_OWVAR 26
10686: PUSH
10687: LD_STRING 
10689: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10690: LD_INT 0
10692: PPUSH
10693: LD_INT 3
10695: PPUSH
10696: LD_VAR 0 4
10700: PPUSH
10701: CALL_OW 380
// un = CreateHuman ;
10705: LD_ADDR_VAR 0 15
10709: PUSH
10710: CALL_OW 44
10714: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10715: LD_VAR 0 15
10719: PPUSH
10720: LD_VAR 0 16
10724: PPUSH
10725: CALL_OW 52
// end ; i = i + 1 ;
10729: LD_ADDR_VAR 0 13
10733: PUSH
10734: LD_VAR 0 13
10738: PUSH
10739: LD_INT 1
10741: PLUS
10742: ST_TO_ADDR
// end ; until i = vehCount ;
10743: LD_VAR 0 13
10747: PUSH
10748: LD_VAR 0 3
10752: EQUAL
10753: IFFALSE 9405
// repeat wait ( 0 0$1 ) ;
10755: LD_INT 35
10757: PPUSH
10758: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10762: LD_INT 22
10764: PUSH
10765: LD_VAR 0 2
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 21
10776: PUSH
10777: LD_INT 2
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 24
10786: PUSH
10787: LD_INT 250
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 3
10796: PUSH
10797: LD_INT 58
10799: PUSH
10800: EMPTY
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 69
10817: PUSH
10818: LD_INT 0
10820: GREATER
10821: IFFALSE 11063
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10823: LD_ADDR_VAR 0 13
10827: PUSH
10828: LD_INT 22
10830: PUSH
10831: LD_VAR 0 2
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 21
10842: PUSH
10843: LD_INT 2
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 24
10852: PUSH
10853: LD_INT 250
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 3
10862: PUSH
10863: LD_INT 58
10865: PUSH
10866: EMPTY
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: PPUSH
10879: CALL_OW 69
10883: PUSH
10884: FOR_IN
10885: IFFALSE 11061
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10887: LD_ADDR_VAR 0 21
10891: PUSH
10892: LD_INT 22
10894: PUSH
10895: LD_VAR 0 11
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 13
10913: PPUSH
10914: CALL_OW 74
10918: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10919: LD_ADDR_VAR 0 22
10923: PUSH
10924: LD_INT 22
10926: PUSH
10927: LD_VAR 0 11
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: LD_INT 59
10941: PUSH
10942: EMPTY
10943: LIST
10944: PUSH
10945: LD_INT 21
10947: PUSH
10948: LD_INT 1
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PUSH
10955: LD_INT 21
10957: PUSH
10958: LD_INT 2
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: EMPTY
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: PPUSH
10983: LD_VAR 0 13
10987: PPUSH
10988: CALL_OW 74
10992: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10993: LD_VAR 0 13
10997: PPUSH
10998: LD_VAR 0 21
11002: PPUSH
11003: CALL_OW 296
11007: PUSH
11008: LD_INT 8
11010: PLUS
11011: PUSH
11012: LD_VAR 0 13
11016: PPUSH
11017: LD_VAR 0 22
11021: PPUSH
11022: CALL_OW 296
11026: LESS
11027: IFFALSE 11045
// begin ComAttackUnit ( i , target1 ) ;
11029: LD_VAR 0 13
11033: PPUSH
11034: LD_VAR 0 21
11038: PPUSH
11039: CALL_OW 115
// end else
11043: GO 11059
// begin ComAttackUnit ( i , target2 ) ;
11045: LD_VAR 0 13
11049: PPUSH
11050: LD_VAR 0 22
11054: PPUSH
11055: CALL_OW 115
// end ; end ;
11059: GO 10884
11061: POP
11062: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11063: LD_INT 22
11065: PUSH
11066: LD_VAR 0 2
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 21
11077: PUSH
11078: LD_INT 2
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 24
11087: PUSH
11088: LD_INT 250
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: LD_INT 58
11100: PUSH
11101: EMPTY
11102: LIST
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10755
// end ; end_of_file
11124: LD_VAR 0 12
11128: RET
// every 1 do var i , gammaSquad , startX , startY ;
11129: GO 11131
11131: DISABLE
11132: LD_INT 0
11134: PPUSH
11135: PPUSH
11136: PPUSH
11137: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11138: LD_ADDR_VAR 0 2
11142: PUSH
11143: LD_EXP 8
11147: PUSH
11148: LD_EXP 9
11152: PUSH
11153: LD_EXP 10
11157: PUSH
11158: LD_EXP 11
11162: PUSH
11163: LD_EXP 12
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11175: LD_ADDR_VAR 0 3
11179: PUSH
11180: LD_INT 46
11182: PUSH
11183: LD_INT 45
11185: PUSH
11186: LD_INT 44
11188: PUSH
11189: LD_INT 43
11191: PUSH
11192: LD_INT 42
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11202: LD_ADDR_VAR 0 4
11206: PUSH
11207: LD_INT 14
11209: PUSH
11210: LD_INT 12
11212: PUSH
11213: LD_INT 10
11215: PUSH
11216: LD_INT 8
11218: PUSH
11219: LD_INT 6
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11229: LD_INT 32
11231: PPUSH
11232: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11236: LD_INT 32
11238: PPUSH
11239: LD_INT 51
11241: PPUSH
11242: LD_INT 26
11244: PPUSH
11245: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11249: LD_INT 32
11251: PPUSH
11252: LD_INT 53
11254: PPUSH
11255: LD_INT 23
11257: PPUSH
11258: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11262: LD_INT 32
11264: PPUSH
11265: LD_INT 52
11267: PPUSH
11268: LD_INT 19
11270: PPUSH
11271: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11275: LD_INT 35
11277: PPUSH
11278: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11282: LD_INT 32
11284: PPUSH
11285: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11289: LD_INT 32
11291: PPUSH
11292: CALL_OW 250
11296: PUSH
11297: LD_INT 52
11299: EQUAL
11300: PUSH
11301: LD_INT 32
11303: PPUSH
11304: CALL_OW 251
11308: PUSH
11309: LD_INT 19
11311: EQUAL
11312: AND
11313: IFFALSE 11275
// ComExitVehicle ( JMM ) ;
11315: LD_EXP 1
11319: PPUSH
11320: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11324: LD_EXP 7
11328: PPUSH
11329: LD_EXP 1
11333: PPUSH
11334: CALL_OW 119
// wait ( 0 0$01 ) ;
11338: LD_INT 35
11340: PPUSH
11341: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11345: LD_EXP 1
11349: PPUSH
11350: LD_INT 46
11352: PPUSH
11353: LD_INT 10
11355: PPUSH
11356: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11360: LD_EXP 1
11364: PPUSH
11365: LD_EXP 7
11369: PPUSH
11370: CALL_OW 179
// wait ( 0 0$4 ) ;
11374: LD_INT 140
11376: PPUSH
11377: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11381: LD_EXP 1
11385: PPUSH
11386: LD_STRING D1-JMM-1
11388: PPUSH
11389: CALL_OW 88
// if not dialogue_skipped then
11393: LD_OWVAR 59
11397: NOT
11398: IFFALSE 12055
// begin for i := 1 to gammaSquad do
11400: LD_ADDR_VAR 0 1
11404: PUSH
11405: DOUBLE
11406: LD_INT 1
11408: DEC
11409: ST_TO_ADDR
11410: LD_VAR 0 2
11414: PUSH
11415: FOR_TO
11416: IFFALSE 11477
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11418: LD_VAR 0 2
11422: PUSH
11423: LD_VAR 0 1
11427: ARRAY
11428: PPUSH
11429: LD_VAR 0 3
11433: PUSH
11434: LD_VAR 0 1
11438: ARRAY
11439: PPUSH
11440: LD_VAR 0 4
11444: PUSH
11445: LD_VAR 0 1
11449: ARRAY
11450: PPUSH
11451: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11455: LD_VAR 0 2
11459: PUSH
11460: LD_VAR 0 1
11464: ARRAY
11465: PPUSH
11466: LD_EXP 1
11470: PPUSH
11471: CALL_OW 179
// end ;
11475: GO 11415
11477: POP
11478: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11479: LD_EXP 4
11483: PPUSH
11484: LD_INT 41
11486: PPUSH
11487: LD_INT 4
11489: PPUSH
11490: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11494: LD_EXP 4
11498: PPUSH
11499: LD_EXP 1
11503: PPUSH
11504: CALL_OW 179
// if Lisa = false and Bobby then
11508: LD_EXP 4
11512: PUSH
11513: LD_INT 0
11515: EQUAL
11516: PUSH
11517: LD_EXP 2
11521: AND
11522: IFFALSE 11553
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11524: LD_EXP 2
11528: PPUSH
11529: LD_INT 41
11531: PPUSH
11532: LD_INT 4
11534: PPUSH
11535: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11539: LD_EXP 2
11543: PPUSH
11544: LD_EXP 1
11548: PPUSH
11549: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11553: LD_EXP 4
11557: PUSH
11558: LD_INT 0
11560: EQUAL
11561: PUSH
11562: LD_EXP 2
11566: PUSH
11567: LD_INT 0
11569: EQUAL
11570: AND
11571: PUSH
11572: LD_EXP 3
11576: AND
11577: IFFALSE 11608
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11579: LD_EXP 3
11583: PPUSH
11584: LD_INT 41
11586: PPUSH
11587: LD_INT 4
11589: PPUSH
11590: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11594: LD_EXP 3
11598: PPUSH
11599: LD_EXP 1
11603: PPUSH
11604: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11608: LD_EXP 4
11612: PUSH
11613: LD_INT 0
11615: EQUAL
11616: PUSH
11617: LD_EXP 2
11621: PUSH
11622: LD_INT 0
11624: EQUAL
11625: AND
11626: PUSH
11627: LD_EXP 3
11631: PUSH
11632: LD_INT 0
11634: EQUAL
11635: AND
11636: IFFALSE 11667
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11638: LD_EXP 6
11642: PPUSH
11643: LD_INT 41
11645: PPUSH
11646: LD_INT 4
11648: PPUSH
11649: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11653: LD_EXP 6
11657: PPUSH
11658: LD_EXP 1
11662: PPUSH
11663: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11667: LD_EXP 7
11671: PPUSH
11672: LD_STRING D1-Brown-1
11674: PPUSH
11675: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11679: LD_EXP 1
11683: PPUSH
11684: LD_STRING D1-JMM-2
11686: PPUSH
11687: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11691: LD_EXP 7
11695: PPUSH
11696: LD_STRING D1-Brown-2
11698: PPUSH
11699: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11703: LD_EXP 1
11707: PPUSH
11708: LD_EXP 9
11712: PPUSH
11713: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11717: LD_EXP 9
11721: PPUSH
11722: LD_STRING D1-FSol1-2
11724: PPUSH
11725: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11729: LD_EXP 1
11733: PPUSH
11734: LD_EXP 8
11738: PPUSH
11739: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11743: LD_EXP 8
11747: PPUSH
11748: LD_STRING D1-Sol2-2
11750: PPUSH
11751: CALL_OW 88
// if Lisa then
11755: LD_EXP 4
11759: IFFALSE 11799
// begin ComTurnUnit ( JMM , Lisa ) ;
11761: LD_EXP 1
11765: PPUSH
11766: LD_EXP 4
11770: PPUSH
11771: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11775: LD_EXP 4
11779: PPUSH
11780: LD_STRING D1-Lisa-2
11782: PPUSH
11783: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11787: LD_EXP 1
11791: PPUSH
11792: LD_STRING D1-JMM-3
11794: PPUSH
11795: CALL_OW 88
// end ; if Bobby then
11799: LD_EXP 2
11803: IFFALSE 11843
// begin ComTurnUnit ( JMM , Bobby ) ;
11805: LD_EXP 1
11809: PPUSH
11810: LD_EXP 2
11814: PPUSH
11815: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11819: LD_EXP 2
11823: PPUSH
11824: LD_STRING D1-Bobby-2
11826: PPUSH
11827: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11831: LD_EXP 1
11835: PPUSH
11836: LD_STRING D1-JMM-3
11838: PPUSH
11839: CALL_OW 88
// end ; if Cyrus then
11843: LD_EXP 3
11847: IFFALSE 11887
// begin ComTurnUnit ( JMM , Cyrus ) ;
11849: LD_EXP 1
11853: PPUSH
11854: LD_EXP 3
11858: PPUSH
11859: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11863: LD_EXP 3
11867: PPUSH
11868: LD_STRING D1-Cyrus-2
11870: PPUSH
11871: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11875: LD_EXP 1
11879: PPUSH
11880: LD_STRING D1-JMM-3
11882: PPUSH
11883: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11887: LD_EXP 1
11891: PPUSH
11892: LD_EXP 7
11896: PPUSH
11897: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11901: LD_EXP 1
11905: PPUSH
11906: LD_STRING D1-JMM-3a
11908: PPUSH
11909: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11913: LD_EXP 7
11917: PPUSH
11918: LD_INT 38
11920: PPUSH
11921: LD_INT 5
11923: PPUSH
11924: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11928: LD_EXP 7
11932: PPUSH
11933: LD_EXP 1
11937: PPUSH
11938: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11942: LD_EXP 1
11946: PPUSH
11947: LD_INT 40
11949: PPUSH
11950: LD_INT 7
11952: PPUSH
11953: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11957: LD_EXP 1
11961: PPUSH
11962: LD_EXP 7
11966: PPUSH
11967: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11971: LD_EXP 7
11975: PPUSH
11976: LD_STRING D1-Brown-3
11978: PPUSH
11979: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11983: LD_EXP 14
11987: PPUSH
11988: LD_STRING D1-Har-3
11990: PPUSH
11991: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11995: LD_EXP 1
11999: PPUSH
12000: LD_STRING D1-JMM-4
12002: PPUSH
12003: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12007: LD_EXP 14
12011: PPUSH
12012: LD_STRING D1-Har-4
12014: PPUSH
12015: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12019: LD_EXP 1
12023: PPUSH
12024: LD_STRING D1-JMM-5
12026: PPUSH
12027: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12031: LD_EXP 14
12035: PPUSH
12036: LD_STRING D1-Har-5
12038: PPUSH
12039: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12043: LD_EXP 1
12047: PPUSH
12048: LD_STRING D1-JMM-6
12050: PPUSH
12051: CALL_OW 88
// end ; InGameOff ;
12055: CALL_OW 9
// PrepareRussianConvoy ;
12059: CALL 3008 0 0
// ChangeMissionObjectives ( M1 ) ;
12063: LD_STRING M1
12065: PPUSH
12066: CALL_OW 337
// SaveForQuickRestart ;
12070: CALL_OW 22
// timerStatus = 1 ;
12074: LD_ADDR_EXP 29
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// startTimer = 1 ;
12082: LD_ADDR_EXP 30
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// bonusAvalaible = 1 ;
12090: LD_ADDR_EXP 42
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12098: LD_INT 105
12100: PPUSH
12101: CALL_OW 67
// DialogueOn ;
12105: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12109: LD_EXP 12
12113: PPUSH
12114: LD_STRING D9-Mech1-1
12116: PPUSH
12117: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12121: LD_EXP 1
12125: PPUSH
12126: LD_STRING D9-JMM-1
12128: PPUSH
12129: CALL_OW 88
// DialogueOff ;
12133: CALL_OW 7
// end ;
12137: PPOPN 4
12139: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12140: LD_INT 47
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 321
12150: PUSH
12151: LD_INT 2
12153: EQUAL
12154: PUSH
12155: LD_INT 22
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 21
12167: PUSH
12168: LD_INT 3
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 30
12177: PUSH
12178: LD_INT 3
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 69
12194: PUSH
12195: LD_INT 0
12197: GREATER
12198: AND
12199: IFFALSE 12429
12201: GO 12203
12203: DISABLE
// begin if IsOk ( Campell ) then
12204: LD_EXP 12
12208: PPUSH
12209: CALL_OW 302
12213: IFFALSE 12229
// begin Say ( Campell , D10-Mech1-1 ) ;
12215: LD_EXP 12
12219: PPUSH
12220: LD_STRING D10-Mech1-1
12222: PPUSH
12223: CALL_OW 88
// end else
12227: GO 12429
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12229: LD_INT 22
12231: PUSH
12232: LD_INT 1
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 21
12241: PUSH
12242: LD_INT 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 25
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 26
12261: PUSH
12262: LD_INT 1
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: PUSH
12280: LD_EXP 1
12284: PUSH
12285: EMPTY
12286: LIST
12287: PUSH
12288: LD_INT 0
12290: GREATER
12291: DIFF
12292: IFFALSE 12366
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12294: LD_INT 22
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 21
12306: PUSH
12307: LD_INT 1
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 25
12316: PUSH
12317: LD_INT 3
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 26
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: PPUSH
12340: CALL_OW 69
12344: PUSH
12345: LD_EXP 1
12349: PUSH
12350: EMPTY
12351: LIST
12352: DIFF
12353: PPUSH
12354: LD_STRING D10-Mech1-1
12356: PPUSH
12357: LD_STRING D10-Mech1-1
12359: PPUSH
12360: CALL 4266 0 3
// end else
12364: GO 12429
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12366: LD_INT 22
12368: PUSH
12369: LD_INT 1
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 21
12378: PUSH
12379: LD_INT 1
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 26
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 1
12403: ARRAY
12404: PPUSH
12405: CALL_OW 69
12409: PUSH
12410: LD_EXP 1
12414: PUSH
12415: EMPTY
12416: LIST
12417: DIFF
12418: PPUSH
12419: LD_STRING D10-Mech1-1
12421: PPUSH
12422: LD_STRING D10-Mech1-1
12424: PPUSH
12425: CALL 4266 0 3
// end ; end ; end ;
12429: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12430: LD_INT 22
12432: PUSH
12433: LD_INT 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: LD_INT 32
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL_OW 69
12458: PUSH
12459: LD_INT 0
12461: GREATER
12462: PUSH
12463: LD_EXP 32
12467: PUSH
12468: LD_INT 0
12470: EQUAL
12471: AND
12472: IFFALSE 12712
12474: GO 12476
12476: DISABLE
// begin if IsOK ( Claptopn ) then
12477: LD_EXP 11
12481: PPUSH
12482: CALL_OW 302
12486: IFFALSE 12502
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12488: LD_EXP 11
12492: PPUSH
12493: LD_STRING D9b-Eng1-1
12495: PPUSH
12496: CALL_OW 88
// end else
12500: GO 12698
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12502: LD_INT 22
12504: PUSH
12505: LD_INT 1
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 21
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 25
12524: PUSH
12525: LD_INT 3
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 26
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PPUSH
12548: CALL_OW 69
12552: PUSH
12553: LD_EXP 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: PUSH
12561: LD_INT 0
12563: GREATER
12564: DIFF
12565: IFFALSE 12639
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12567: LD_INT 22
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 21
12579: PUSH
12580: LD_INT 1
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 2
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 26
12599: PUSH
12600: LD_INT 1
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PUSH
12618: LD_EXP 1
12622: PUSH
12623: EMPTY
12624: LIST
12625: DIFF
12626: PPUSH
12627: LD_STRING D9b-Eng1-1
12629: PPUSH
12630: LD_STRING D9b-Eng1-11
12632: PPUSH
12633: CALL 4266 0 3
// end else
12637: GO 12698
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12639: LD_INT 22
12641: PUSH
12642: LD_INT 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 21
12651: PUSH
12652: LD_INT 1
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 26
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 69
12678: PUSH
12679: LD_EXP 1
12683: PUSH
12684: EMPTY
12685: LIST
12686: DIFF
12687: PPUSH
12688: LD_STRING D9b-Eng1-1
12690: PPUSH
12691: LD_STRING D9b-Eng1-1
12693: PPUSH
12694: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
12698: LD_EXP 33
12702: PUSH
12703: LD_INT 0
12705: EQUAL
12706: IFFALSE 12712
// EnergyDialog ;
12708: CALL 4757 0 0
// end ;
12712: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12713: LD_EXP 34
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: PUSH
12722: LD_EXP 35
12726: PUSH
12727: LD_INT 1
12729: EQUAL
12730: AND
12731: IFFALSE 12743
12733: GO 12735
12735: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12736: LD_STRING M1a
12738: PPUSH
12739: CALL_OW 337
12743: END
// every 3 3$0 do
12744: GO 12746
12746: DISABLE
// begin PrepareFirstAttack ;
12747: CALL 3808 0 0
// end ;
12751: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12752: LD_INT 22
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 21
12764: PUSH
12765: LD_INT 1
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 3
12774: PUSH
12775: LD_INT 24
12777: PUSH
12778: LD_INT 250
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: PPUSH
12794: CALL_OW 69
12798: PUSH
12799: LD_INT 0
12801: GREATER
12802: PUSH
12803: LD_EXP 23
12807: PUSH
12808: LD_INT 1
12810: EQUAL
12811: AND
12812: IFFALSE 13113
12814: GO 12816
12816: DISABLE
12817: LD_INT 0
12819: PPUSH
// begin firstRussianAttack = 2 ;
12820: LD_ADDR_EXP 23
12824: PUSH
12825: LD_INT 2
12827: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12828: LD_INT 22
12830: PUSH
12831: LD_INT 5
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 21
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PPUSH
12852: CALL_OW 69
12856: PPUSH
12857: LD_INT 125
12859: PPUSH
12860: LD_INT 98
12862: PPUSH
12863: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12867: LD_INT 22
12869: PUSH
12870: LD_INT 1
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 21
12879: PUSH
12880: LD_INT 1
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 69
12895: PUSH
12896: LD_EXP 1
12900: PUSH
12901: LD_EXP 7
12905: PUSH
12906: LD_EXP 4
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: DIFF
12916: PPUSH
12917: LD_STRING DAtt1-Sol1-1
12919: PPUSH
12920: LD_STRING DAtt1-FSol1-1
12922: PPUSH
12923: CALL 4266 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12927: LD_EXP 1
12931: PPUSH
12932: LD_STRING DAtt1-JMM-1
12934: PPUSH
12935: CALL_OW 88
// if Lisa then
12939: LD_EXP 4
12943: IFFALSE 12959
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12945: LD_EXP 4
12949: PPUSH
12950: LD_STRING DAtt1a-Lisa-1
12952: PPUSH
12953: CALL_OW 88
// end else
12957: GO 13030
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12959: LD_INT 22
12961: PUSH
12962: LD_INT 1
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 21
12971: PUSH
12972: LD_INT 1
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 26
12981: PUSH
12982: LD_INT 1
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: PUSH
12999: LD_EXP 1
13003: PUSH
13004: LD_EXP 7
13008: PUSH
13009: LD_EXP 4
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: LIST
13018: DIFF
13019: PPUSH
13020: LD_STRING DAtt1a-Sol1-1
13022: PPUSH
13023: LD_STRING DAtt1-FSol1-1
13025: PPUSH
13026: CALL 4266 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13030: LD_EXP 1
13034: PPUSH
13035: LD_STRING DAtt1a-JMM-1
13037: PPUSH
13038: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13042: LD_INT 22
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 21
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 26
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: PPUSH
13077: CALL_OW 69
13081: PUSH
13082: LD_EXP 1
13086: PUSH
13087: LD_EXP 7
13091: PUSH
13092: LD_EXP 4
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: DIFF
13102: PPUSH
13103: LD_STRING DAtt1b-Sol1-1
13105: PPUSH
13106: LD_STRING DAtt1a-Sol1-1
13108: PPUSH
13109: CALL 4266 0 3
// end ;
13113: PPOPN 1
13115: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13116: LD_EXP 23
13120: PUSH
13121: LD_INT 2
13123: EQUAL
13124: IFFALSE 13186
13126: GO 13128
13128: DISABLE
13129: LD_INT 0
13131: PPUSH
// begin enable ;
13132: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13133: LD_ADDR_VAR 0 1
13137: PUSH
13138: LD_INT 5
13140: PPUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 5
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 1
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PPUSH
13165: CALL_OW 70
13169: PUSH
13170: FOR_IN
13171: IFFALSE 13184
// RemoveUnit ( i ) ;
13173: LD_VAR 0 1
13177: PPUSH
13178: CALL_OW 64
13182: GO 13170
13184: POP
13185: POP
// end ;
13186: PPOPN 1
13188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13189: LD_INT 22
13191: PUSH
13192: LD_INT 5
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: PUSH
13207: LD_INT 0
13209: EQUAL
13210: PUSH
13211: LD_EXP 23
13215: PUSH
13216: LD_INT 2
13218: EQUAL
13219: AND
13220: IFFALSE 13233
13222: GO 13224
13224: DISABLE
// firstRussianAttack = 3 ;
13225: LD_ADDR_EXP 23
13229: PUSH
13230: LD_INT 3
13232: ST_TO_ADDR
13233: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13234: LD_EXP 28
13238: PUSH
13239: LD_INT 0
13241: EQUAL
13242: IFFALSE 13323
13244: GO 13246
13246: DISABLE
// begin timerStatus = 4 ;
13247: LD_ADDR_EXP 29
13251: PUSH
13252: LD_INT 4
13254: ST_TO_ADDR
// DialogueOn ;
13255: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13259: LD_EXP 13
13263: PPUSH
13264: LD_STRING D2-Don-1
13266: PPUSH
13267: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13271: LD_EXP 1
13275: PPUSH
13276: LD_STRING D2-JMM-1
13278: PPUSH
13279: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13283: LD_EXP 13
13287: PPUSH
13288: LD_STRING D2-Don-2
13290: PPUSH
13291: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13295: LD_EXP 1
13299: PPUSH
13300: LD_STRING D2-JMM-2
13302: PPUSH
13303: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13307: LD_EXP 13
13311: PPUSH
13312: LD_STRING D2-Don-3
13314: PPUSH
13315: CALL_OW 94
// DialogueOff ;
13319: CALL_OW 7
// end ;
13323: END
// every 12 12$0 do var tmp ;
13324: GO 13326
13326: DISABLE
13327: LD_INT 0
13329: PPUSH
// begin PrepareDonaldsonArmy ;
13330: CALL 1062 0 0
// CenterNowOnUnits ( Donaldson ) ;
13334: LD_EXP 13
13338: PPUSH
13339: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13343: LD_ADDR_VAR 0 1
13347: PUSH
13348: LD_INT 22
13350: PUSH
13351: LD_INT 4
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 21
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 26
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 1
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PPUSH
13394: CALL_OW 69
13398: PUSH
13399: LD_EXP 5
13403: PUSH
13404: EMPTY
13405: LIST
13406: DIFF
13407: ST_TO_ADDR
// DialogueOn ;
13408: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13412: LD_VAR 0 1
13416: PPUSH
13417: LD_STRING D3-Sol1-1
13419: PPUSH
13420: LD_STRING D3-Sol1-1
13422: PPUSH
13423: CALL 4266 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13427: LD_INT 22
13429: PUSH
13430: LD_INT 4
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 1
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 26
13449: PUSH
13450: LD_INT 1
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 25
13459: PUSH
13460: LD_INT 3
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL_OW 69
13477: PPUSH
13478: LD_STRING D3-Sol2-1
13480: PPUSH
13481: LD_STRING D3-Sol2-1
13483: PPUSH
13484: CALL 4266 0 3
// if Frank then
13488: LD_EXP 5
13492: IFFALSE 13506
// Say ( Frank , D3-Frank-1 ) ;
13494: LD_EXP 5
13498: PPUSH
13499: LD_STRING D3-Frank-1
13501: PPUSH
13502: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13506: LD_EXP 13
13510: PPUSH
13511: LD_STRING D3-Don-1
13513: PPUSH
13514: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13518: LD_EXP 13
13522: PPUSH
13523: LD_STRING D3-Don-1a
13525: PPUSH
13526: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13530: LD_EXP 1
13534: PPUSH
13535: LD_STRING D3-JMM-1
13537: PPUSH
13538: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13542: LD_EXP 13
13546: PPUSH
13547: LD_STRING D3-Don-2
13549: PPUSH
13550: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13554: LD_INT 22
13556: PUSH
13557: LD_INT 6
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 21
13566: PUSH
13567: LD_INT 1
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PPUSH
13578: CALL_OW 69
13582: PUSH
13583: LD_INT 0
13585: GREATER
13586: IFFALSE 13724
// begin Say ( JMM , D3-JMM-2 ) ;
13588: LD_EXP 1
13592: PPUSH
13593: LD_STRING D3-JMM-2
13595: PPUSH
13596: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13600: LD_EXP 13
13604: PPUSH
13605: LD_STRING D3-Don-3
13607: PPUSH
13608: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13612: LD_EXP 1
13616: PPUSH
13617: LD_STRING D3-JMM-3
13619: PPUSH
13620: CALL_OW 88
// if IsOK ( Frank ) then
13624: LD_EXP 5
13628: PPUSH
13629: CALL_OW 302
13633: IFFALSE 13647
// Say ( Frank , D3-Frank-3 ) ;
13635: LD_EXP 5
13639: PPUSH
13640: LD_STRING D3-Frank-3
13642: PPUSH
13643: CALL_OW 88
// DialogueOff ;
13647: CALL_OW 7
// if IsOK ( Frank ) then
13651: LD_EXP 5
13655: PPUSH
13656: CALL_OW 302
13660: IFFALSE 13722
// begin SetSide ( Frank , 0 ) ;
13662: LD_EXP 5
13666: PPUSH
13667: LD_INT 0
13669: PPUSH
13670: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13674: LD_EXP 5
13678: PPUSH
13679: LD_INT 12
13681: PPUSH
13682: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13686: LD_EXP 5
13690: PPUSH
13691: LD_STRING 04t_Frank
13693: PPUSH
13694: CALL_OW 38
// Wait ( 0 0$3 ) ;
13698: LD_INT 105
13700: PPUSH
13701: CALL_OW 67
// frankScoutBase = 1 ;
13705: LD_ADDR_EXP 25
13709: PUSH
13710: LD_INT 1
13712: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13713: LD_EXP 5
13717: PPUSH
13718: CALL_OW 64
// end ; end else
13722: GO 13811
// begin Say ( JMM , D3-JMM-4 ) ;
13724: LD_EXP 1
13728: PPUSH
13729: LD_STRING D3-JMM-4
13731: PPUSH
13732: CALL_OW 88
// DialogueOff ;
13736: CALL_OW 7
// if IsOK ( Frank ) then
13740: LD_EXP 5
13744: PPUSH
13745: CALL_OW 302
13749: IFFALSE 13811
// begin SetSide ( Frank , 0 ) ;
13751: LD_EXP 5
13755: PPUSH
13756: LD_INT 0
13758: PPUSH
13759: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13763: LD_EXP 5
13767: PPUSH
13768: LD_INT 12
13770: PPUSH
13771: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13775: LD_EXP 5
13779: PPUSH
13780: LD_STRING 04t_Frank
13782: PPUSH
13783: CALL_OW 38
// Wait ( 0 0$3 ) ;
13787: LD_INT 105
13789: PPUSH
13790: CALL_OW 67
// frankScoutBase = 1 ;
13794: LD_ADDR_EXP 25
13798: PUSH
13799: LD_INT 1
13801: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13802: LD_EXP 5
13806: PPUSH
13807: CALL_OW 64
// end ; end ; end ;
13811: PPOPN 1
13813: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13814: LD_EXP 13
13818: PPUSH
13819: CALL_OW 255
13823: PUSH
13824: LD_INT 4
13826: EQUAL
13827: PUSH
13828: LD_EXP 13
13832: PPUSH
13833: CALL_OW 302
13837: AND
13838: IFFALSE 13863
13840: GO 13842
13842: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13843: LD_EXP 13
13847: PPUSH
13848: LD_STRING D3b-Don-1
13850: PPUSH
13851: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13855: LD_ADDR_EXP 41
13859: PUSH
13860: LD_INT 1
13862: ST_TO_ADDR
// end ;
13863: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13864: LD_EXP 24
13868: PUSH
13869: LD_INT 0
13871: EQUAL
13872: IFFALSE 14028
13874: GO 13876
13876: DISABLE
13877: LD_INT 0
13879: PPUSH
13880: PPUSH
// begin enable ;
13881: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13882: LD_ADDR_VAR 0 1
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_INT 4
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 21
13899: PUSH
13900: LD_INT 1
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PPUSH
13911: CALL_OW 69
13915: PUSH
13916: FOR_IN
13917: IFFALSE 14026
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13919: LD_ADDR_VAR 0 2
13923: PUSH
13924: LD_INT 22
13926: PUSH
13927: LD_INT 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 21
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 69
13952: PUSH
13953: FOR_IN
13954: IFFALSE 14022
// begin if GetDistUnits ( i , j ) < 7 then
13956: LD_VAR 0 1
13960: PPUSH
13961: LD_VAR 0 2
13965: PPUSH
13966: CALL_OW 296
13970: PUSH
13971: LD_INT 7
13973: LESS
13974: IFFALSE 14020
// begin saveDonaldson = 1 ;
13976: LD_ADDR_EXP 24
13980: PUSH
13981: LD_INT 1
13983: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13984: LD_INT 22
13986: PUSH
13987: LD_INT 4
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 21
13996: PUSH
13997: LD_INT 1
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PPUSH
14008: CALL_OW 69
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: CALL_OW 235
// end ; end ;
14020: GO 13953
14022: POP
14023: POP
// end ;
14024: GO 13916
14026: POP
14027: POP
// end ;
14028: PPOPN 2
14030: END
// every 0 0$1 trigger frankScoutBase do
14031: LD_EXP 25
14035: IFFALSE 14354
14037: GO 14039
14039: DISABLE
// begin wait ( 2 2$30 ) ;
14040: LD_INT 5250
14042: PPUSH
14043: CALL_OW 67
// uc_side = 4 ;
14047: LD_ADDR_OWVAR 20
14051: PUSH
14052: LD_INT 4
14054: ST_TO_ADDR
// uc_nation = 1 ;
14055: LD_ADDR_OWVAR 21
14059: PUSH
14060: LD_INT 1
14062: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14063: LD_ADDR_EXP 5
14067: PUSH
14068: LD_STRING 04t_Frank
14070: PPUSH
14071: CALL_OW 34
14075: ST_TO_ADDR
// if not Frank then
14076: LD_EXP 5
14080: NOT
14081: IFFALSE 14085
// exit ;
14083: GO 14354
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14085: LD_EXP 5
14089: PPUSH
14090: LD_INT 13
14092: PPUSH
14093: LD_INT 0
14095: PPUSH
14096: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14100: LD_INT 35
14102: PPUSH
14103: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14107: LD_EXP 1
14111: PPUSH
14112: CALL_OW 310
14116: NOT
14117: PUSH
14118: LD_EXP 1
14122: PPUSH
14123: LD_INT 4
14125: PPUSH
14126: CALL_OW 296
14130: PUSH
14131: LD_INT 20
14133: LESS
14134: AND
14135: IFFALSE 14168
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14137: LD_EXP 5
14141: PPUSH
14142: LD_EXP 1
14146: PPUSH
14147: CALL_OW 250
14151: PPUSH
14152: LD_EXP 1
14156: PPUSH
14157: CALL_OW 251
14161: PPUSH
14162: CALL_OW 111
14166: GO 14183
// ComMoveXY ( Frank , 51 , 15 ) ;
14168: LD_EXP 5
14172: PPUSH
14173: LD_INT 51
14175: PPUSH
14176: LD_INT 15
14178: PPUSH
14179: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14183: LD_EXP 5
14187: PPUSH
14188: LD_EXP 1
14192: PPUSH
14193: CALL_OW 296
14197: PUSH
14198: LD_INT 10
14200: LESS
14201: IFFALSE 14100
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14203: LD_EXP 1
14207: PUSH
14208: LD_EXP 5
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 87
// DialogueOn ;
14221: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14225: LD_EXP 5
14229: PPUSH
14230: LD_STRING D3a-Frank-1
14232: PPUSH
14233: CALL_OW 88
// if Lisa then
14237: LD_EXP 4
14241: IFFALSE 14291
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14243: LD_EXP 4
14247: PPUSH
14248: LD_STRING D3a-Lisa-1
14250: PPUSH
14251: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14255: LD_EXP 5
14259: PPUSH
14260: LD_STRING D3a-Frank-2
14262: PPUSH
14263: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14267: LD_EXP 4
14271: PPUSH
14272: LD_STRING D3a-Lisa-2
14274: PPUSH
14275: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14279: LD_EXP 5
14283: PPUSH
14284: LD_STRING D3a-Frank-3
14286: PPUSH
14287: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14291: LD_EXP 1
14295: PPUSH
14296: LD_STRING D3a-JMM-3
14298: PPUSH
14299: CALL_OW 88
// DialogueOff ;
14303: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14307: LD_EXP 5
14311: PPUSH
14312: LD_INT 1
14314: PPUSH
14315: CALL_OW 235
// InGameOn ;
14319: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14323: LD_INT 1
14325: PPUSH
14326: LD_INT 7
14328: PPUSH
14329: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14333: LD_INT 93
14335: PPUSH
14336: LD_INT 91
14338: PPUSH
14339: CALL_OW 84
// wait ( 0 0$5 ) ;
14343: LD_INT 175
14345: PPUSH
14346: CALL_OW 67
// InGameOff ;
14350: CALL_OW 9
// end ;
14354: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14355: LD_OWVAR 67
14359: PUSH
14360: LD_INT 2
14362: EQUAL
14363: PUSH
14364: LD_OWVAR 67
14368: PUSH
14369: LD_INT 3
14371: EQUAL
14372: OR
14373: IFFALSE 14397
14375: GO 14377
14377: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14378: LD_INT 24
14380: PPUSH
14381: LD_INT 24
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: LD_INT 1
14389: PPUSH
14390: LD_INT 53
14392: PPUSH
14393: CALL_OW 125
14397: END
// every 18 18$0 do
14398: GO 14400
14400: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14401: LD_EXP 14
14405: PPUSH
14406: LD_STRING D4-Har-1
14408: PPUSH
14409: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14413: LD_EXP 1
14417: PPUSH
14418: LD_STRING D4-JMM-1
14420: PPUSH
14421: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14425: LD_EXP 14
14429: PPUSH
14430: LD_STRING D4-Har-2
14432: PPUSH
14433: CALL_OW 94
// case query ( Q1 ) of 1 :
14437: LD_STRING Q1
14439: PPUSH
14440: CALL_OW 97
14444: PUSH
14445: LD_INT 1
14447: DOUBLE
14448: EQUAL
14449: IFTRUE 14453
14451: GO 14512
14453: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14454: LD_EXP 1
14458: PPUSH
14459: LD_STRING D5-JMM-1
14461: PPUSH
14462: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14466: LD_EXP 14
14470: PPUSH
14471: LD_STRING D5-Har-1
14473: PPUSH
14474: CALL_OW 94
// timeToSupport = 10 10$0 ;
14478: LD_ADDR_EXP 28
14482: PUSH
14483: LD_INT 21000
14485: ST_TO_ADDR
// timerStatus = 2 ;
14486: LD_ADDR_EXP 29
14490: PUSH
14491: LD_INT 2
14493: ST_TO_ADDR
// startTimer = 1 ;
14494: LD_ADDR_EXP 30
14498: PUSH
14499: LD_INT 1
14501: ST_TO_ADDR
// harrAnswer = 1 ;
14502: LD_ADDR_EXP 26
14506: PUSH
14507: LD_INT 1
14509: ST_TO_ADDR
// end ; 2 :
14510: GO 14647
14512: LD_INT 2
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14520
14518: GO 14579
14520: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14521: LD_EXP 1
14525: PPUSH
14526: LD_STRING D5-JMM-2
14528: PPUSH
14529: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14533: LD_EXP 14
14537: PPUSH
14538: LD_STRING D5-Har-2
14540: PPUSH
14541: CALL_OW 94
// timeToSupport = 5 5$0 ;
14545: LD_ADDR_EXP 28
14549: PUSH
14550: LD_INT 10500
14552: ST_TO_ADDR
// timerStatus = 2 ;
14553: LD_ADDR_EXP 29
14557: PUSH
14558: LD_INT 2
14560: ST_TO_ADDR
// startTimer = 1 ;
14561: LD_ADDR_EXP 30
14565: PUSH
14566: LD_INT 1
14568: ST_TO_ADDR
// harrAnswer = 2 ;
14569: LD_ADDR_EXP 26
14573: PUSH
14574: LD_INT 2
14576: ST_TO_ADDR
// end ; 3 :
14577: GO 14647
14579: LD_INT 3
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14646
14587: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14588: LD_EXP 1
14592: PPUSH
14593: LD_STRING D5-JMM-3
14595: PPUSH
14596: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14600: LD_EXP 14
14604: PPUSH
14605: LD_STRING D5-Har-3
14607: PPUSH
14608: CALL_OW 94
// timeToSupport = 5 5$0 ;
14612: LD_ADDR_EXP 28
14616: PUSH
14617: LD_INT 10500
14619: ST_TO_ADDR
// timerStatus = 2 ;
14620: LD_ADDR_EXP 29
14624: PUSH
14625: LD_INT 2
14627: ST_TO_ADDR
// startTimer = 1 ;
14628: LD_ADDR_EXP 30
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// harrAnswer = 3 ;
14636: LD_ADDR_EXP 26
14640: PUSH
14641: LD_INT 3
14643: ST_TO_ADDR
// end ; end ;
14644: GO 14647
14646: POP
// end ;
14647: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14648: LD_EXP 29
14652: PUSH
14653: LD_INT 2
14655: EQUAL
14656: PUSH
14657: LD_EXP 28
14661: PUSH
14662: LD_INT 0
14664: EQUAL
14665: AND
14666: IFFALSE 14943
14668: GO 14670
14670: DISABLE
// begin timerStatus = 4 ;
14671: LD_ADDR_EXP 29
14675: PUSH
14676: LD_INT 4
14678: ST_TO_ADDR
// if harrAnswer = 1 then
14679: LD_EXP 26
14683: PUSH
14684: LD_INT 1
14686: EQUAL
14687: IFFALSE 14767
// begin PrepareHarrisonSupport ( 3 ) ;
14689: LD_INT 3
14691: PPUSH
14692: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14696: LD_INT 2100
14698: PPUSH
14699: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14703: LD_EXP 14
14707: PPUSH
14708: LD_STRING D7-Har-1
14710: PPUSH
14711: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14715: LD_STRING M2
14717: PPUSH
14718: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14722: LD_ADDR_EXP 27
14726: PUSH
14727: LD_INT 31500
14729: PUSH
14730: LD_INT 10500
14732: PUSH
14733: LD_INT 8400
14735: PUSH
14736: LD_INT 6300
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: PUSH
14744: LD_OWVAR 67
14748: ARRAY
14749: PLUS
14750: ST_TO_ADDR
// startTimer = 1 ;
14751: LD_ADDR_EXP 30
14755: PUSH
14756: LD_INT 1
14758: ST_TO_ADDR
// timerStatus = 3 ;
14759: LD_ADDR_EXP 29
14763: PUSH
14764: LD_INT 3
14766: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14767: LD_EXP 26
14771: PUSH
14772: LD_INT 2
14774: EQUAL
14775: IFFALSE 14855
// begin PrepareHarrisonSupport ( 4 ) ;
14777: LD_INT 4
14779: PPUSH
14780: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14784: LD_INT 2100
14786: PPUSH
14787: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14791: LD_EXP 14
14795: PPUSH
14796: LD_STRING D7-Har-1
14798: PPUSH
14799: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14803: LD_STRING M2
14805: PPUSH
14806: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14810: LD_ADDR_EXP 27
14814: PUSH
14815: LD_INT 27300
14817: PUSH
14818: LD_INT 8400
14820: PUSH
14821: LD_INT 8400
14823: PUSH
14824: LD_INT 6300
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: LD_OWVAR 67
14836: ARRAY
14837: PLUS
14838: ST_TO_ADDR
// startTimer = 1 ;
14839: LD_ADDR_EXP 30
14843: PUSH
14844: LD_INT 1
14846: ST_TO_ADDR
// timerStatus = 3 ;
14847: LD_ADDR_EXP 29
14851: PUSH
14852: LD_INT 3
14854: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14855: LD_EXP 26
14859: PUSH
14860: LD_INT 3
14862: EQUAL
14863: IFFALSE 14943
// begin PrepareHarrisonSupport ( 5 ) ;
14865: LD_INT 5
14867: PPUSH
14868: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14872: LD_INT 2100
14874: PPUSH
14875: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14879: LD_EXP 14
14883: PPUSH
14884: LD_STRING D7-Har-1
14886: PPUSH
14887: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14891: LD_STRING M2
14893: PPUSH
14894: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14898: LD_ADDR_EXP 27
14902: PUSH
14903: LD_INT 21000
14905: PUSH
14906: LD_INT 8400
14908: PUSH
14909: LD_INT 6300
14911: PUSH
14912: LD_INT 4200
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: PUSH
14920: LD_OWVAR 67
14924: ARRAY
14925: PLUS
14926: ST_TO_ADDR
// startTimer = 1 ;
14927: LD_ADDR_EXP 30
14931: PUSH
14932: LD_INT 1
14934: ST_TO_ADDR
// timerStatus = 3 ;
14935: LD_ADDR_EXP 29
14939: PUSH
14940: LD_INT 3
14942: ST_TO_ADDR
// end ; end ;
14943: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14944: LD_EXP 27
14948: PUSH
14949: LD_INT 8400
14951: LESSEQUAL
14952: PUSH
14953: LD_EXP 29
14957: PUSH
14958: LD_INT 3
14960: EQUAL
14961: AND
14962: IFFALSE 14994
14964: GO 14966
14966: DISABLE
// begin DialogueOn ;
14967: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14971: LD_EXP 14
14975: PPUSH
14976: LD_STRING D7a-Har-1
14978: PPUSH
14979: CALL_OW 94
// DialogueOff ;
14983: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14987: LD_STRING M2a
14989: PPUSH
14990: CALL_OW 337
// end ;
14994: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
14995: LD_EXP 27
14999: PUSH
15000: LD_INT 0
15002: LESSEQUAL
15003: PUSH
15004: LD_EXP 29
15008: PUSH
15009: LD_INT 3
15011: EQUAL
15012: AND
15013: PUSH
15014: LD_EXP 40
15018: NOT
15019: AND
15020: IFFALSE 15159
15022: GO 15024
15024: DISABLE
15025: LD_INT 0
15027: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15028: LD_ADDR_VAR 0 1
15032: PUSH
15033: LD_INT 22
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PPUSH
15043: CALL_OW 69
15047: PUSH
15048: LD_EXP 1
15052: PUSH
15053: EMPTY
15054: LIST
15055: DIFF
15056: ST_TO_ADDR
// saveDonaldson = 2 ;
15057: LD_ADDR_EXP 24
15061: PUSH
15062: LD_INT 2
15064: ST_TO_ADDR
// DialogueOn ;
15065: CALL_OW 6
// if IsOK ( Donaldson ) then
15069: LD_EXP 13
15073: PPUSH
15074: CALL_OW 302
15078: IFFALSE 15094
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15080: LD_EXP 14
15084: PPUSH
15085: LD_STRING D8-Har-1
15087: PPUSH
15088: CALL_OW 94
// end else
15092: GO 15106
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15094: LD_EXP 14
15098: PPUSH
15099: LD_STRING D8-Har-1a
15101: PPUSH
15102: CALL_OW 94
// end ; DialogueOff ;
15106: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15110: LD_VAR 0 1
15114: PPUSH
15115: LD_INT 4
15117: PPUSH
15118: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15122: LD_VAR 0 1
15126: PPUSH
15127: LD_INT 88
15129: PPUSH
15130: LD_INT 89
15132: PPUSH
15133: CALL_OW 114
// honor = 0 ;
15137: LD_ADDR_EXP 39
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15145: LD_INT 350
15147: PPUSH
15148: CALL_OW 67
// YouLost ( LostCommand ) ;
15152: LD_STRING LostCommand
15154: PPUSH
15155: CALL_OW 104
// end ;
15159: PPOPN 1
15161: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15162: LD_INT 22
15164: PUSH
15165: LD_INT 6
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 21
15174: PUSH
15175: LD_INT 1
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PUSH
15191: LD_INT 0
15193: EQUAL
15194: PUSH
15195: LD_EXP 20
15199: PUSH
15200: LD_INT 0
15202: EQUAL
15203: AND
15204: PUSH
15205: LD_EXP 42
15209: PUSH
15210: LD_INT 1
15212: EQUAL
15213: AND
15214: IFFALSE 15308
15216: GO 15218
15218: DISABLE
15219: LD_INT 0
15221: PPUSH
15222: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_INT 22
15230: PUSH
15231: LD_INT 1
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 21
15240: PUSH
15241: LD_INT 1
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 23
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: PPUSH
15263: CALL_OW 69
15267: ST_TO_ADDR
// for i in tmp do
15268: LD_ADDR_VAR 0 1
15272: PUSH
15273: LD_VAR 0 2
15277: PUSH
15278: FOR_IN
15279: IFFALSE 15306
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: LD_INT 1
15288: PPUSH
15289: LD_INT 4
15291: PPUSH
15292: CALL_OW 12
15296: PPUSH
15297: LD_INT 500
15299: PPUSH
15300: CALL_OW 492
// end ;
15304: GO 15278
15306: POP
15307: POP
// end ; end_of_file
15308: PPOPN 2
15310: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15311: GO 15313
15313: DISABLE
15314: LD_INT 0
15316: PPUSH
// begin enemyWayX = [ ] ;
15317: LD_ADDR_EXP 46
15321: PUSH
15322: EMPTY
15323: ST_TO_ADDR
// enemyWayY = [ ] ;
15324: LD_ADDR_EXP 47
15328: PUSH
15329: EMPTY
15330: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15331: LD_ADDR_VAR 0 1
15335: PUSH
15336: LD_INT 1
15338: PPUSH
15339: LD_INT 3
15341: PPUSH
15342: CALL_OW 12
15346: ST_TO_ADDR
// if rnd = 1 then
15347: LD_VAR 0 1
15351: PUSH
15352: LD_INT 1
15354: EQUAL
15355: IFFALSE 15395
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15357: LD_ADDR_EXP 46
15361: PUSH
15362: LD_INT 73
15364: PUSH
15365: LD_INT 46
15367: PUSH
15368: LD_INT 29
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15376: LD_ADDR_EXP 47
15380: PUSH
15381: LD_INT 71
15383: PUSH
15384: LD_INT 43
15386: PUSH
15387: LD_INT 29
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: ST_TO_ADDR
// end ; if rnd = 2 then
15395: LD_VAR 0 1
15399: PUSH
15400: LD_INT 2
15402: EQUAL
15403: IFFALSE 15427
// begin enemyWayX = [ 64 ] ;
15405: LD_ADDR_EXP 46
15409: PUSH
15410: LD_INT 64
15412: PUSH
15413: EMPTY
15414: LIST
15415: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15416: LD_ADDR_EXP 47
15420: PUSH
15421: LD_INT 43
15423: PUSH
15424: EMPTY
15425: LIST
15426: ST_TO_ADDR
// end ; if rnd = 3 then
15427: LD_VAR 0 1
15431: PUSH
15432: LD_INT 3
15434: EQUAL
15435: IFFALSE 15459
// begin enemyWayX = [ 80 ] ;
15437: LD_ADDR_EXP 46
15441: PUSH
15442: LD_INT 80
15444: PUSH
15445: EMPTY
15446: LIST
15447: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15448: LD_ADDR_EXP 47
15452: PUSH
15453: LD_INT 28
15455: PUSH
15456: EMPTY
15457: LIST
15458: ST_TO_ADDR
// end ; enable ;
15459: ENABLE
// end ;
15460: PPOPN 1
15462: END
// every 0 0$1 trigger AIEnable = 1 do
15463: LD_EXP 37
15467: PUSH
15468: LD_INT 1
15470: EQUAL
15471: IFFALSE 15585
15473: GO 15475
15475: DISABLE
// begin enable ;
15476: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15477: LD_INT 3
15479: PPUSH
15480: LD_INT 21
15482: PPUSH
15483: LD_INT 7
15485: PPUSH
15486: CALL 5790 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15490: LD_INT 3
15492: PPUSH
15493: LD_INT 8
15495: PPUSH
15496: LD_INT 7
15498: PPUSH
15499: LD_INT 1
15501: PPUSH
15502: CALL 6111 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15506: LD_INT 3
15508: PPUSH
15509: LD_INT 17
15511: PPUSH
15512: LD_INT 108
15514: PPUSH
15515: LD_INT 95
15517: PPUSH
15518: CALL 7355 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15522: LD_INT 3
15524: PPUSH
15525: LD_INT 23
15527: PPUSH
15528: LD_EXP 46
15532: PPUSH
15533: LD_EXP 47
15537: PPUSH
15538: CALL 6767 0 4
// if baseReadyToBuild = 2 then
15542: LD_EXP 20
15546: PUSH
15547: LD_INT 2
15549: EQUAL
15550: IFFALSE 15585
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15552: LD_INT 6
15554: PPUSH
15555: LD_EXP 21
15559: PPUSH
15560: LD_INT 6
15562: PPUSH
15563: CALL 5790 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15567: LD_INT 6
15569: PPUSH
15570: LD_INT 9
15572: PPUSH
15573: LD_INT 6
15575: PPUSH
15576: LD_EXP 22
15580: PPUSH
15581: CALL 6111 0 4
// end ; end ;
15585: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15586: LD_EXP 15
15590: PPUSH
15591: CALL_OW 310
15595: NOT
15596: PUSH
15597: LD_INT 21
15599: PPUSH
15600: CALL_OW 302
15604: AND
15605: PUSH
15606: LD_INT 21
15608: PPUSH
15609: CALL_OW 255
15613: PUSH
15614: LD_INT 3
15616: EQUAL
15617: AND
15618: IFFALSE 15636
15620: GO 15622
15622: DISABLE
// begin enable ;
15623: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15624: LD_EXP 15
15628: PPUSH
15629: LD_INT 21
15631: PPUSH
15632: CALL_OW 120
// end ;
15636: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15637: LD_INT 22
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 21
15649: PUSH
15650: LD_INT 2
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 55
15659: PUSH
15660: EMPTY
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 69
15672: PUSH
15673: LD_INT 0
15675: EQUAL
15676: PUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 255
15684: PUSH
15685: LD_INT 3
15687: EQUAL
15688: AND
15689: PUSH
15690: LD_INT 21
15692: PPUSH
15693: CALL_OW 302
15697: AND
15698: PUSH
15699: LD_INT 21
15701: PPUSH
15702: CALL_OW 255
15706: PUSH
15707: LD_INT 3
15709: EQUAL
15710: AND
15711: PUSH
15712: LD_INT 21
15714: PPUSH
15715: CALL_OW 302
15719: AND
15720: IFFALSE 15925
15722: GO 15724
15724: DISABLE
// begin enable ;
15725: ENABLE
// if Difficulty = 1 then
15726: LD_OWVAR 67
15730: PUSH
15731: LD_INT 1
15733: EQUAL
15734: IFFALSE 15778
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15736: LD_INT 3
15738: PPUSH
15739: LD_INT 24
15741: PPUSH
15742: LD_OWVAR 67
15746: PUSH
15747: LD_INT 2
15749: PLUS
15750: PPUSH
15751: LD_INT 42
15753: PUSH
15754: LD_INT 42
15756: PUSH
15757: LD_INT 43
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: PPUSH
15765: LD_INT 1
15767: PPUSH
15768: LD_INT 1
15770: PPUSH
15771: LD_INT 21
15773: PPUSH
15774: CALL 6655 0 7
// if Difficulty = 2 then
15778: LD_OWVAR 67
15782: PUSH
15783: LD_INT 2
15785: EQUAL
15786: IFFALSE 15853
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15788: LD_INT 3
15790: PPUSH
15791: LD_INT 24
15793: PPUSH
15794: LD_OWVAR 67
15798: PUSH
15799: LD_INT 2
15801: PLUS
15802: PPUSH
15803: LD_INT 42
15805: PUSH
15806: LD_INT 42
15808: PUSH
15809: LD_INT 43
15811: PUSH
15812: LD_INT 43
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: PPUSH
15821: LD_INT 1
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: LD_INT 21
15829: PUSH
15830: LD_INT 22
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 1
15839: PPUSH
15840: LD_INT 2
15842: PPUSH
15843: CALL_OW 12
15847: ARRAY
15848: PPUSH
15849: CALL 6655 0 7
// if Difficulty = 3 then
15853: LD_OWVAR 67
15857: PUSH
15858: LD_INT 3
15860: EQUAL
15861: IFFALSE 15925
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15863: LD_INT 3
15865: PPUSH
15866: LD_INT 24
15868: PPUSH
15869: LD_OWVAR 67
15873: PUSH
15874: LD_INT 2
15876: PPUSH
15877: LD_INT 3
15879: PPUSH
15880: CALL_OW 12
15884: PLUS
15885: PPUSH
15886: LD_INT 43
15888: PUSH
15889: LD_INT 43
15891: PUSH
15892: LD_INT 43
15894: PUSH
15895: LD_INT 43
15897: PUSH
15898: LD_INT 44
15900: PUSH
15901: LD_INT 44
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: PPUSH
15912: LD_INT 1
15914: PPUSH
15915: LD_INT 1
15917: PPUSH
15918: LD_INT 22
15920: PPUSH
15921: CALL 6655 0 7
// end ;
15925: END
// every 0 0$1 do
15926: GO 15928
15928: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15929: LD_INT 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: LD_INT 3
15937: PPUSH
15938: CALL 5705 0 3
15942: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15943: LD_EXP 20
15947: PUSH
15948: LD_INT 1
15950: EQUAL
15951: IFFALSE 16098
15953: GO 15955
15955: DISABLE
15956: LD_INT 0
15958: PPUSH
15959: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15960: LD_ADDR_VAR 0 2
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_INT 6
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 21
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 34
15987: PUSH
15988: LD_INT 51
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: LIST
15999: PPUSH
16000: CALL_OW 69
16004: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16005: LD_VAR 0 2
16009: PUSH
16010: LD_INT 1
16012: ARRAY
16013: PPUSH
16014: LD_EXP 21
16018: PPUSH
16019: CALL_OW 250
16023: PUSH
16024: LD_INT 5
16026: MINUS
16027: PPUSH
16028: LD_EXP 21
16032: PPUSH
16033: CALL_OW 251
16037: PUSH
16038: LD_INT 5
16040: MINUS
16041: PPUSH
16042: CALL_OW 111
// wait ( 0 0$5 ) ;
16046: LD_INT 175
16048: PPUSH
16049: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16053: LD_VAR 0 2
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: PPUSH
16062: LD_INT 41
16064: PPUSH
16065: LD_INT 52
16067: PPUSH
16068: CALL_OW 177
// wait ( 0 0$40 ) ;
16072: LD_INT 1400
16074: PPUSH
16075: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16079: LD_VAR 0 2
16083: PUSH
16084: LD_INT 1
16086: ARRAY
16087: PPUSH
16088: LD_INT 41
16090: PPUSH
16091: LD_INT 44
16093: PPUSH
16094: CALL_OW 111
// end ;
16098: PPOPN 2
16100: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16101: LD_EXP 21
16105: PPUSH
16106: CALL_OW 274
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: CALL_OW 275
16118: PUSH
16119: LD_INT 100
16121: GREATEREQUAL
16122: IFFALSE 16350
16124: GO 16126
16126: DISABLE
16127: LD_INT 0
16129: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16130: LD_ADDR_VAR 0 1
16134: PUSH
16135: LD_INT 22
16137: PUSH
16138: LD_INT 6
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 21
16147: PUSH
16148: LD_INT 1
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 25
16157: PUSH
16158: LD_INT 2
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 69
16174: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16175: LD_VAR 0 1
16179: PUSH
16180: LD_INT 1
16182: ARRAY
16183: PPUSH
16184: LD_INT 4
16186: PPUSH
16187: LD_INT 39
16189: PPUSH
16190: LD_INT 37
16192: PPUSH
16193: LD_INT 3
16195: PPUSH
16196: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16200: LD_VAR 0 1
16204: PUSH
16205: LD_INT 1
16207: ARRAY
16208: PPUSH
16209: LD_INT 29
16211: PPUSH
16212: LD_INT 42
16214: PPUSH
16215: LD_INT 54
16217: PPUSH
16218: LD_INT 3
16220: PPUSH
16221: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16225: LD_VAR 0 1
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: LD_INT 6
16236: PPUSH
16237: LD_INT 38
16239: PPUSH
16240: LD_INT 48
16242: PPUSH
16243: LD_INT 0
16245: PPUSH
16246: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16250: LD_VAR 0 1
16254: PUSH
16255: LD_INT 1
16257: ARRAY
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: LD_INT 32
16264: PPUSH
16265: LD_INT 38
16267: PPUSH
16268: LD_INT 2
16270: PPUSH
16271: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16275: LD_VAR 0 1
16279: PUSH
16280: LD_INT 1
16282: ARRAY
16283: PPUSH
16284: LD_INT 26
16286: PPUSH
16287: LD_INT 39
16289: PPUSH
16290: LD_INT 55
16292: PPUSH
16293: LD_INT 3
16295: PPUSH
16296: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16300: LD_VAR 0 1
16304: PUSH
16305: LD_INT 1
16307: ARRAY
16308: PPUSH
16309: LD_INT 32
16311: PPUSH
16312: LD_INT 31
16314: PPUSH
16315: LD_INT 31
16317: PPUSH
16318: LD_INT 3
16320: PPUSH
16321: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16325: LD_VAR 0 1
16329: PUSH
16330: LD_INT 1
16332: ARRAY
16333: PPUSH
16334: LD_INT 31
16336: PPUSH
16337: LD_INT 50
16339: PPUSH
16340: LD_INT 51
16342: PPUSH
16343: LD_INT 4
16345: PPUSH
16346: CALL_OW 205
// end ; end_of_file
16350: PPOPN 1
16352: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16353: LD_INT 0
16355: PPUSH
16356: PPUSH
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
16361: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16362: LD_ADDR_VAR 0 3
16366: PUSH
16367: LD_INT 22
16369: PUSH
16370: LD_INT 6
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 21
16379: PUSH
16380: LD_INT 1
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 25
16389: PUSH
16390: LD_INT 1
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 3
16399: PUSH
16400: LD_INT 54
16402: PUSH
16403: EMPTY
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16421: LD_ADDR_VAR 0 7
16425: PUSH
16426: LD_INT 22
16428: PUSH
16429: LD_INT 6
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 21
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 25
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 54
16458: PUSH
16459: EMPTY
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16473: LD_ADDR_VAR 0 4
16477: PUSH
16478: LD_INT 22
16480: PUSH
16481: LD_INT 6
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 21
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 25
16500: PUSH
16501: LD_INT 2
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16518: LD_ADDR_VAR 0 6
16522: PUSH
16523: LD_INT 22
16525: PUSH
16526: LD_INT 6
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 21
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 25
16545: PUSH
16546: LD_INT 4
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: PPUSH
16558: CALL_OW 69
16562: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16563: LD_ADDR_VAR 0 8
16567: PUSH
16568: LD_INT 22
16570: PUSH
16571: LD_INT 6
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 21
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 34
16590: PUSH
16591: LD_INT 51
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 69
16607: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 255
16617: PUSH
16618: LD_INT 6
16620: EQUAL
16621: PUSH
16622: LD_VAR 0 1
16626: PPUSH
16627: CALL_OW 266
16631: PUSH
16632: LD_INT 0
16634: EQUAL
16635: AND
16636: IFFALSE 16656
// begin ruPDepot = building ;
16638: LD_ADDR_EXP 21
16642: PUSH
16643: LD_VAR 0 1
16647: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16648: LD_ADDR_EXP 20
16652: PUSH
16653: LD_INT 1
16655: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 266
16665: PUSH
16666: LD_INT 4
16668: EQUAL
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 255
16679: PUSH
16680: LD_INT 6
16682: EQUAL
16683: AND
16684: IFFALSE 16717
// for i in tmpSold do
16686: LD_ADDR_VAR 0 2
16690: PUSH
16691: LD_VAR 0 3
16695: PUSH
16696: FOR_IN
16697: IFFALSE 16715
// ComEnterUnit ( i , building ) ;
16699: LD_VAR 0 2
16703: PPUSH
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 120
16713: GO 16696
16715: POP
16716: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16717: LD_VAR 0 1
16721: PPUSH
16722: CALL_OW 266
16726: PUSH
16727: LD_INT 6
16729: EQUAL
16730: PUSH
16731: LD_VAR 0 1
16735: PPUSH
16736: CALL_OW 255
16740: PUSH
16741: LD_INT 6
16743: EQUAL
16744: AND
16745: IFFALSE 16803
// begin for i in tmpSci do
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: LD_VAR 0 6
16756: PUSH
16757: FOR_IN
16758: IFFALSE 16776
// ComEnterUnit ( i , building ) ;
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 120
16774: GO 16757
16776: POP
16777: POP
// ResAllTechs ( 6 , building , 3 ) ;
16778: LD_INT 6
16780: PPUSH
16781: LD_VAR 0 1
16785: PPUSH
16786: LD_INT 3
16788: PPUSH
16789: CALL 5705 0 3
// ruPLab = building ;
16793: LD_ADDR_EXP 22
16797: PUSH
16798: LD_VAR 0 1
16802: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 266
16812: PUSH
16813: LD_INT 2
16815: EQUAL
16816: PUSH
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 255
16826: PUSH
16827: LD_INT 6
16829: EQUAL
16830: AND
16831: IFFALSE 16882
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16833: LD_ADDR_VAR 0 5
16837: PUSH
16838: LD_VAR 0 8
16842: PUSH
16843: LD_INT 1
16845: ARRAY
16846: PPUSH
16847: CALL_OW 313
16851: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16852: LD_VAR 0 5
16856: PPUSH
16857: CALL_OW 121
// wait ( 0 0$1 ) ;
16861: LD_INT 35
16863: PPUSH
16864: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16868: LD_VAR 0 5
16872: PPUSH
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 266
16891: PUSH
16892: LD_INT 32
16894: EQUAL
16895: PUSH
16896: LD_VAR 0 1
16900: PPUSH
16901: CALL_OW 255
16905: PUSH
16906: LD_INT 6
16908: EQUAL
16909: AND
16910: IFFALSE 16962
// begin ComPlaceWeapon ( building , 42 ) ;
16912: LD_VAR 0 1
16916: PPUSH
16917: LD_INT 42
16919: PPUSH
16920: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16924: LD_VAR 0 7
16928: PUSH
16929: LD_INT 1
16931: ARRAY
16932: PPUSH
16933: CALL_OW 122
// wait ( 0 0$1 ) ;
16937: LD_INT 35
16939: PPUSH
16940: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16944: LD_VAR 0 7
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_VAR 0 1
16957: PPUSH
16958: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 266
16971: PUSH
16972: LD_INT 31
16974: EQUAL
16975: PUSH
16976: LD_VAR 0 1
16980: PPUSH
16981: CALL_OW 255
16985: PUSH
16986: LD_INT 6
16988: EQUAL
16989: AND
16990: IFFALSE 17056
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16992: LD_VAR 0 7
16996: PUSH
16997: LD_INT 2
16999: ARRAY
17000: PPUSH
17001: CALL_OW 122
// wait ( 0 0$1 ) ;
17005: LD_INT 35
17007: PPUSH
17008: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17012: LD_VAR 0 7
17016: PUSH
17017: LD_INT 2
17019: ARRAY
17020: PPUSH
17021: LD_VAR 0 1
17025: PPUSH
17026: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17030: LD_VAR 0 4
17034: PUSH
17035: LD_INT 1
17037: ARRAY
17038: PPUSH
17039: LD_EXP 21
17043: PPUSH
17044: CALL_OW 120
// baseReadyToBuild = 2 ;
17048: LD_ADDR_EXP 20
17052: PUSH
17053: LD_INT 2
17055: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 266
17065: PUSH
17066: LD_INT 32
17068: EQUAL
17069: PUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 255
17079: PUSH
17080: LD_INT 1
17082: EQUAL
17083: AND
17084: PUSH
17085: LD_EXP 32
17089: PUSH
17090: LD_INT 0
17092: EQUAL
17093: AND
17094: IFFALSE 17339
// begin bunkerDialog = 1 ;
17096: LD_ADDR_EXP 32
17100: PUSH
17101: LD_INT 1
17103: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17104: LD_EXP 11
17108: PPUSH
17109: CALL_OW 302
17113: IFFALSE 17129
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17115: LD_EXP 11
17119: PPUSH
17120: LD_STRING D11-Eng1-1
17122: PPUSH
17123: CALL_OW 88
// end else
17127: GO 17325
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17129: LD_INT 22
17131: PUSH
17132: LD_INT 1
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 21
17141: PUSH
17142: LD_INT 1
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 25
17151: PUSH
17152: LD_INT 3
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 26
17161: PUSH
17162: LD_INT 1
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: PPUSH
17175: CALL_OW 69
17179: PUSH
17180: LD_EXP 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: PUSH
17188: LD_INT 0
17190: GREATER
17191: DIFF
17192: IFFALSE 17266
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17194: LD_INT 22
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 21
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 25
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 26
17226: PUSH
17227: LD_INT 1
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: PUSH
17245: LD_EXP 1
17249: PUSH
17250: EMPTY
17251: LIST
17252: DIFF
17253: PPUSH
17254: LD_STRING D11-Eng1-1
17256: PPUSH
17257: LD_STRING D11-Eng1-1
17259: PPUSH
17260: CALL 4266 0 3
// end else
17264: GO 17325
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17266: LD_INT 22
17268: PUSH
17269: LD_INT 1
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 21
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 26
17288: PUSH
17289: LD_INT 1
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: PUSH
17306: LD_EXP 1
17310: PUSH
17311: EMPTY
17312: LIST
17313: DIFF
17314: PPUSH
17315: LD_STRING D11-Eng1-1
17317: PPUSH
17318: LD_STRING D11-Eng1-1
17320: PPUSH
17321: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
17325: LD_EXP 33
17329: PUSH
17330: LD_INT 0
17332: EQUAL
17333: IFFALSE 17339
// EnergyDialog ;
17335: CALL 4757 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17339: LD_VAR 0 1
17343: PPUSH
17344: CALL_OW 266
17348: PUSH
17349: LD_INT 29
17351: EQUAL
17352: PUSH
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 255
17362: PUSH
17363: LD_INT 1
17365: EQUAL
17366: AND
17367: IFFALSE 17377
// buildOil = 1 ;
17369: LD_ADDR_EXP 34
17373: PUSH
17374: LD_INT 1
17376: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 266
17386: PUSH
17387: LD_INT 26
17389: EQUAL
17390: PUSH
17391: LD_VAR 0 1
17395: PPUSH
17396: CALL_OW 255
17400: PUSH
17401: LD_INT 1
17403: EQUAL
17404: AND
17405: IFFALSE 17415
// buildPower = 1 ;
17407: LD_ADDR_EXP 35
17411: PUSH
17412: LD_INT 1
17414: ST_TO_ADDR
// end ;
17415: PPOPN 8
17417: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17418: LD_VAR 0 1
17422: PPUSH
17423: CALL_OW 266
17427: PUSH
17428: LD_INT 3
17430: EQUAL
17431: PUSH
17432: LD_VAR 0 1
17436: PPUSH
17437: CALL_OW 255
17441: PUSH
17442: LD_INT 1
17444: EQUAL
17445: AND
17446: PUSH
17447: LD_EXP 31
17451: PUSH
17452: LD_INT 0
17454: EQUAL
17455: AND
17456: IFFALSE 17804
// begin factoryDialog = 1 ;
17458: LD_ADDR_EXP 31
17462: PUSH
17463: LD_INT 1
17465: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17466: LD_INT 22
17468: PUSH
17469: LD_INT 1
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 30
17488: PUSH
17489: LD_INT 3
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 24
17498: PUSH
17499: LD_INT 1000
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PPUSH
17512: CALL_OW 69
17516: PUSH
17517: LD_INT 1
17519: ARRAY
17520: PPUSH
17521: CALL_OW 87
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
17525: LD_INT 47
17527: PPUSH
17528: LD_INT 1
17530: PPUSH
17531: CALL_OW 321
17535: PUSH
17536: LD_INT 1
17538: EQUAL
17539: PUSH
17540: LD_INT 45
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: CALL_OW 321
17550: PUSH
17551: LD_INT 1
17553: EQUAL
17554: AND
17555: IFFALSE 17804
// begin Say ( JMM , D9a-JMM-1 ) ;
17557: LD_EXP 1
17561: PPUSH
17562: LD_STRING D9a-JMM-1
17564: PPUSH
17565: CALL_OW 88
// if IsOK ( Campell ) then
17569: LD_EXP 12
17573: PPUSH
17574: CALL_OW 302
17578: IFFALSE 17594
// begin Say ( Campell , D9a-Mech1-1 ) ;
17580: LD_EXP 12
17584: PPUSH
17585: LD_STRING D9a-Mech1-1
17587: PPUSH
17588: CALL_OW 88
// end else
17592: GO 17790
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17594: LD_INT 22
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 21
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 25
17616: PUSH
17617: LD_INT 3
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 26
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: PUSH
17645: LD_EXP 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: PUSH
17653: LD_INT 0
17655: GREATER
17656: DIFF
17657: IFFALSE 17731
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17659: LD_INT 22
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 21
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 25
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 26
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: PPUSH
17705: CALL_OW 69
17709: PUSH
17710: LD_EXP 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: DIFF
17718: PPUSH
17719: LD_STRING D9a-Mech1-1
17721: PPUSH
17722: LD_STRING D9a-Mech1-1
17724: PPUSH
17725: CALL 4266 0 3
// end else
17729: GO 17790
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17731: LD_INT 22
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 26
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: PPUSH
17766: CALL_OW 69
17770: PUSH
17771: LD_EXP 1
17775: PUSH
17776: EMPTY
17777: LIST
17778: DIFF
17779: PPUSH
17780: LD_STRING D9a-Mech1-1
17782: PPUSH
17783: LD_STRING D9a-Mech1-1
17785: PPUSH
17786: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
17790: LD_EXP 33
17794: PUSH
17795: LD_INT 0
17797: EQUAL
17798: IFFALSE 17804
// EnergyDialog ;
17800: CALL 4757 0 0
// end ; end ; end ;
17804: PPOPN 1
17806: END
// on UnitDestroyed ( unit ) do var mech ;
17807: LD_INT 0
17809: PPUSH
// begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17810: LD_VAR 0 1
17814: PPUSH
17815: CALL_OW 247
17819: PUSH
17820: LD_INT 1
17822: EQUAL
17823: PUSH
17824: LD_VAR 0 1
17828: PPUSH
17829: CALL_OW 255
17833: PUSH
17834: LD_INT 1
17836: EQUAL
17837: AND
17838: IFFALSE 17854
// lostCounter = lostCounter + 1 ;
17840: LD_ADDR_EXP 38
17844: PUSH
17845: LD_EXP 38
17849: PUSH
17850: LD_INT 1
17852: PLUS
17853: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17854: LD_VAR 0 1
17858: PPUSH
17859: CALL_OW 257
17863: PUSH
17864: LD_INT 3
17866: EQUAL
17867: PUSH
17868: LD_VAR 0 1
17872: PPUSH
17873: CALL_OW 255
17877: PUSH
17878: LD_INT 3
17880: EQUAL
17881: AND
17882: PUSH
17883: LD_INT 24
17885: PPUSH
17886: CALL_OW 302
17890: AND
17891: PUSH
17892: LD_INT 24
17894: PPUSH
17895: CALL_OW 255
17899: PUSH
17900: LD_INT 3
17902: EQUAL
17903: AND
17904: IFFALSE 18003
// begin uc_side = 3 ;
17906: LD_ADDR_OWVAR 20
17910: PUSH
17911: LD_INT 3
17913: ST_TO_ADDR
// uc_nation = 3 ;
17914: LD_ADDR_OWVAR 21
17918: PUSH
17919: LD_INT 3
17921: ST_TO_ADDR
// hc_gallery :=  ;
17922: LD_ADDR_OWVAR 33
17926: PUSH
17927: LD_STRING 
17929: ST_TO_ADDR
// hc_name :=  ;
17930: LD_ADDR_OWVAR 26
17934: PUSH
17935: LD_STRING 
17937: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17938: LD_INT 0
17940: PPUSH
17941: LD_EXP 16
17945: PPUSH
17946: LD_EXP 17
17950: PPUSH
17951: CALL_OW 12
17955: PPUSH
17956: CALL_OW 383
// mech := CreateHuman ;
17960: LD_ADDR_VAR 0 2
17964: PUSH
17965: CALL_OW 44
17969: ST_TO_ADDR
// PlaceUnitXYR ( mech , 124 , 97 , 3 , false ) ;
17970: LD_VAR 0 2
17974: PPUSH
17975: LD_INT 124
17977: PPUSH
17978: LD_INT 97
17980: PPUSH
17981: LD_INT 3
17983: PPUSH
17984: LD_INT 0
17986: PPUSH
17987: CALL_OW 50
// ComEnterUnit ( mech , rubfact0 ) ;
17991: LD_VAR 0 2
17995: PPUSH
17996: LD_INT 24
17998: PPUSH
17999: CALL_OW 120
// end ; end ;
18003: PPOPN 2
18005: END
// on Contact ( side1 , side2 ) do var i , tmp ;
18006: LD_INT 0
18008: PPUSH
18009: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_INT 22
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 69
18029: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
18030: LD_VAR 0 1
18034: PUSH
18035: LD_INT 1
18037: EQUAL
18038: PUSH
18039: LD_VAR 0 2
18043: PUSH
18044: LD_INT 6
18046: EQUAL
18047: AND
18048: PUSH
18049: LD_EXP 41
18053: PUSH
18054: LD_INT 1
18056: EQUAL
18057: AND
18058: IFFALSE 18113
// begin donaldsonCoopAttack = 0 ;
18060: LD_ADDR_EXP 41
18064: PUSH
18065: LD_INT 0
18067: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18068: LD_ADDR_VAR 0 3
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_INT 4
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: PUSH
18091: FOR_IN
18092: IFFALSE 18111
// ComAgressiveMove ( i , 52 , 64 ) ;
18094: LD_VAR 0 3
18098: PPUSH
18099: LD_INT 52
18101: PPUSH
18102: LD_INT 64
18104: PPUSH
18105: CALL_OW 114
18109: GO 18091
18111: POP
18112: POP
// end ; end ;
18113: PPOPN 4
18115: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
18116: LD_INT 0
18118: PPUSH
// begin if GetWeapon ( vehicle ) = 53 then
18119: LD_VAR 0 1
18123: PPUSH
18124: CALL_OW 264
18128: PUSH
18129: LD_INT 53
18131: EQUAL
18132: IFFALSE 18264
// begin uc_side = 3 ;
18134: LD_ADDR_OWVAR 20
18138: PUSH
18139: LD_INT 3
18141: ST_TO_ADDR
// uc_nation = 3 ;
18142: LD_ADDR_OWVAR 21
18146: PUSH
18147: LD_INT 3
18149: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
18150: LD_INT 0
18152: PPUSH
18153: LD_EXP 17
18157: PPUSH
18158: CALL_OW 383
// driver := CreateHuman ;
18162: LD_ADDR_VAR 0 3
18166: PUSH
18167: CALL_OW 44
18171: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
18172: LD_VAR 0 3
18176: PPUSH
18177: LD_VAR 0 2
18181: PPUSH
18182: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
18186: LD_VAR 0 1
18190: PPUSH
18191: LD_INT 21
18193: PPUSH
18194: CALL 4973 0 2
// AddComMoveXY ( vehicle , 104 , 73 ) ;
18198: LD_VAR 0 1
18202: PPUSH
18203: LD_INT 104
18205: PPUSH
18206: LD_INT 73
18208: PPUSH
18209: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18213: LD_VAR 0 3
18217: PPUSH
18218: CALL_OW 181
// AddComEnterUnit ( driver , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
18222: LD_VAR 0 3
18226: PPUSH
18227: LD_INT 22
18229: PUSH
18230: LD_INT 3
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 30
18239: PUSH
18240: LD_INT 3
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PPUSH
18251: CALL_OW 69
18255: PUSH
18256: LD_INT 1
18258: ARRAY
18259: PPUSH
18260: CALL_OW 180
// end ; end ;
18264: PPOPN 3
18266: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18267: LD_INT 0
18269: PPUSH
18270: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18271: LD_VAR 0 1
18275: PPUSH
18276: CALL_OW 255
18280: PUSH
18281: LD_INT 3
18283: EQUAL
18284: PUSH
18285: LD_VAR 0 1
18289: PPUSH
18290: CALL_OW 247
18294: PUSH
18295: LD_INT 2
18297: EQUAL
18298: AND
18299: IFFALSE 18393
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
18301: LD_VAR 0 1
18305: PPUSH
18306: CALL_OW 264
18310: PUSH
18311: LD_INT 42
18313: EQUAL
18314: PUSH
18315: LD_VAR 0 1
18319: PPUSH
18320: CALL_OW 264
18324: PUSH
18325: LD_INT 43
18327: EQUAL
18328: OR
18329: PUSH
18330: LD_VAR 0 1
18334: PPUSH
18335: CALL_OW 264
18339: PUSH
18340: LD_INT 44
18342: EQUAL
18343: OR
18344: IFFALSE 18393
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18346: LD_INT 24
18348: PPUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 265
18358: PPUSH
18359: LD_VAR 0 1
18363: PPUSH
18364: CALL_OW 262
18368: PPUSH
18369: LD_VAR 0 1
18373: PPUSH
18374: CALL_OW 263
18378: PPUSH
18379: LD_VAR 0 1
18383: PPUSH
18384: CALL_OW 264
18388: PPUSH
18389: CALL_OW 185
// end ;
18393: PPOPN 3
18395: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18396: LD_VAR 0 1
18400: PPUSH
18401: CALL_OW 255
18405: PUSH
18406: LD_INT 3
18408: EQUAL
18409: PUSH
18410: LD_VAR 0 2
18414: PPUSH
18415: CALL_OW 255
18419: PUSH
18420: LD_INT 3
18422: EQUAL
18423: AND
18424: PUSH
18425: LD_VAR 0 1
18429: PPUSH
18430: CALL_OW 302
18434: AND
18435: IFFALSE 18477
// begin ComRepairVehicle ( human , vehicle ) ;
18437: LD_VAR 0 2
18441: PPUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18451: LD_VAR 0 2
18455: PPUSH
18456: LD_VAR 0 1
18460: PPUSH
18461: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18465: LD_VAR 0 1
18469: PPUSH
18470: LD_INT 100
18472: PPUSH
18473: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 3
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 2
18495: PPUSH
18496: CALL_OW 255
18500: PUSH
18501: LD_INT 3
18503: EQUAL
18504: AND
18505: PUSH
18506: LD_INT 24
18508: PPUSH
18509: CALL_OW 302
18513: AND
18514: PUSH
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 302
18524: NOT
18525: AND
18526: IFFALSE 18540
// ComEnterUnit ( human , rubfact0 ) ;
18528: LD_VAR 0 2
18532: PPUSH
18533: LD_INT 24
18535: PPUSH
18536: CALL_OW 120
// end ;
18540: PPOPN 2
18542: END
// on Command ( comandid ) do var i , j , tmp ;
18543: LD_INT 0
18545: PPUSH
18546: PPUSH
18547: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18548: LD_ADDR_VAR 0 2
18552: PUSH
18553: LD_INT 22
18555: PUSH
18556: LD_INT 1
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: LD_INT 21
18568: PUSH
18569: LD_INT 1
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 21
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: PUSH
18600: FOR_IN
18601: IFFALSE 18711
// begin if GetTaskList ( i ) > 0 then
18603: LD_VAR 0 2
18607: PPUSH
18608: CALL_OW 437
18612: PUSH
18613: LD_INT 0
18615: GREATER
18616: IFFALSE 18709
// begin for j = 1 to GetTaskList ( i ) do
18618: LD_ADDR_VAR 0 3
18622: PUSH
18623: DOUBLE
18624: LD_INT 1
18626: DEC
18627: ST_TO_ADDR
18628: LD_VAR 0 2
18632: PPUSH
18633: CALL_OW 437
18637: PUSH
18638: FOR_TO
18639: IFFALSE 18707
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18641: LD_ADDR_VAR 0 4
18645: PUSH
18646: LD_VAR 0 2
18650: PPUSH
18651: CALL_OW 437
18655: PUSH
18656: LD_VAR 0 3
18660: ARRAY
18661: PUSH
18662: LD_INT 4
18664: ARRAY
18665: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18666: LD_VAR 0 4
18670: PPUSH
18671: CALL_OW 255
18675: PUSH
18676: LD_INT 4
18678: EQUAL
18679: PUSH
18680: LD_VAR 0 4
18684: PPUSH
18685: CALL_OW 255
18689: PUSH
18690: LD_INT 0
18692: EQUAL
18693: OR
18694: IFFALSE 18705
// ComStop ( i ) ;
18696: LD_VAR 0 2
18700: PPUSH
18701: CALL_OW 141
// end ;
18705: GO 18638
18707: POP
18708: POP
// end ; end ;
18709: GO 18600
18711: POP
18712: POP
// end ; end_of_file
18713: PPOPN 4
18715: END
// every 10 10$0 do
18716: GO 18718
18718: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 1 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18719: LD_INT 5
18721: PPUSH
18722: LD_INT 3
18724: PPUSH
18725: LD_INT 1
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 3
18733: PUSH
18734: LD_INT 4
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: LIST
18741: PUSH
18742: LD_OWVAR 67
18746: ARRAY
18747: PLUS
18748: PPUSH
18749: LD_INT 0
18751: PPUSH
18752: LD_INT 0
18754: PPUSH
18755: LD_INT 0
18757: PPUSH
18758: LD_INT 0
18760: PPUSH
18761: LD_EXP 16
18765: PPUSH
18766: LD_EXP 17
18770: PPUSH
18771: CALL_OW 12
18775: PPUSH
18776: LD_INT 4
18778: PPUSH
18779: LD_INT 14
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: LD_INT 2
18787: PPUSH
18788: CALL 7558 0 12
// end ;
18792: END
// every 20 20$0 do
18793: GO 18795
18795: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18796: LD_INT 5
18798: PPUSH
18799: LD_INT 3
18801: PPUSH
18802: LD_INT 3
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 4
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: LIST
18818: PUSH
18819: LD_OWVAR 67
18823: ARRAY
18824: PLUS
18825: PPUSH
18826: LD_INT 0
18828: PPUSH
18829: LD_INT 0
18831: PPUSH
18832: LD_INT 0
18834: PPUSH
18835: LD_INT 2
18837: PPUSH
18838: LD_EXP 16
18842: PPUSH
18843: LD_EXP 17
18847: PPUSH
18848: CALL_OW 12
18852: PPUSH
18853: LD_INT 4
18855: PPUSH
18856: LD_INT 14
18858: PPUSH
18859: LD_INT 1
18861: PPUSH
18862: LD_INT 1
18864: PPUSH
18865: CALL 7558 0 12
// end ;
18869: END
// every 25 25$0 do
18870: GO 18872
18872: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18873: LD_INT 4
18875: PPUSH
18876: LD_INT 5
18878: PPUSH
18879: LD_INT 3
18881: PUSH
18882: LD_INT 4
18884: PUSH
18885: LD_INT 5
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: PUSH
18893: LD_OWVAR 67
18897: ARRAY
18898: PPUSH
18899: LD_EXP 16
18903: PPUSH
18904: LD_EXP 17
18908: PPUSH
18909: CALL_OW 12
18913: PPUSH
18914: LD_INT 3
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: LD_INT 1
18922: PPUSH
18923: LD_INT 42
18925: PUSH
18926: LD_INT 42
18928: PUSH
18929: LD_INT 43
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 42
18939: PUSH
18940: LD_INT 43
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 43
18949: PUSH
18950: LD_INT 43
18952: PUSH
18953: LD_INT 43
18955: PUSH
18956: LD_INT 44
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: PUSH
18970: LD_OWVAR 67
18974: ARRAY
18975: PPUSH
18976: EMPTY
18977: PPUSH
18978: EMPTY
18979: PPUSH
18980: LD_INT 1
18982: PPUSH
18983: CALL 9371 0 11
// end ; end_of_file
18987: END
// every 0 0$1 trigger startTimer = 1 do
18988: LD_EXP 30
18992: PUSH
18993: LD_INT 1
18995: EQUAL
18996: IFFALSE 19126
18998: GO 19000
19000: DISABLE
// begin enable ;
19001: ENABLE
// if timerStatus = 1 then
19002: LD_EXP 29
19006: PUSH
19007: LD_INT 1
19009: EQUAL
19010: IFFALSE 19043
// begin timeToSupport = timeToSupport - 0 0$01 ;
19012: LD_ADDR_EXP 28
19016: PUSH
19017: LD_EXP 28
19021: PUSH
19022: LD_INT 35
19024: MINUS
19025: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19026: LD_ADDR_OWVAR 47
19030: PUSH
19031: LD_STRING #Am04-1
19033: PUSH
19034: LD_EXP 28
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: ST_TO_ADDR
// end ; if timerStatus = 2 then
19043: LD_EXP 29
19047: PUSH
19048: LD_INT 2
19050: EQUAL
19051: IFFALSE 19084
// begin timeToSupport = timeToSupport - 0 0$01 ;
19053: LD_ADDR_EXP 28
19057: PUSH
19058: LD_EXP 28
19062: PUSH
19063: LD_INT 35
19065: MINUS
19066: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19067: LD_ADDR_OWVAR 47
19071: PUSH
19072: LD_STRING #Am04-2
19074: PUSH
19075: LD_EXP 28
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: ST_TO_ADDR
// end ; if timerStatus = 3 then
19084: LD_EXP 29
19088: PUSH
19089: LD_INT 3
19091: EQUAL
19092: IFFALSE 19108
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19094: LD_ADDR_EXP 27
19098: PUSH
19099: LD_EXP 27
19103: PUSH
19104: LD_INT 35
19106: MINUS
19107: ST_TO_ADDR
// end ; if timerStatus = 4 then
19108: LD_EXP 29
19112: PUSH
19113: LD_INT 4
19115: EQUAL
19116: IFFALSE 19126
// begin display_strings =  ;
19118: LD_ADDR_OWVAR 47
19122: PUSH
19123: LD_STRING 
19125: ST_TO_ADDR
// end ; end ; end_of_file
19126: END
// every 0 0$1 trigger IsDead ( JMM ) do
19127: LD_EXP 1
19131: PPUSH
19132: CALL_OW 301
19136: IFFALSE 19148
19138: GO 19140
19140: DISABLE
// YouLost ( JMM ) ;
19141: LD_STRING JMM
19143: PPUSH
19144: CALL_OW 104
19148: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19149: LD_INT 4
19151: PPUSH
19152: CALL_OW 301
19156: IFFALSE 19168
19158: GO 19160
19160: DISABLE
// YouLost ( Base ) ; end_of_file
19161: LD_STRING Base
19163: PPUSH
19164: CALL_OW 104
19168: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
19169: LD_EXP 15
19173: PPUSH
19174: CALL_OW 301
19178: PUSH
19179: LD_INT 22
19181: PUSH
19182: LD_INT 3
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 21
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PPUSH
19203: CALL_OW 69
19207: PUSH
19208: LD_INT 14
19210: PUSH
19211: LD_INT 13
19213: PUSH
19214: LD_INT 12
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: PUSH
19222: LD_OWVAR 67
19226: ARRAY
19227: LESS
19228: AND
19229: IFFALSE 19700
19231: GO 19233
19233: DISABLE
19234: LD_INT 0
19236: PPUSH
19237: PPUSH
// begin AIEnable = 0 ;
19238: LD_ADDR_EXP 37
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// escapeAvalaible = 1 ;
19246: LD_ADDR_EXP 40
19250: PUSH
19251: LD_INT 1
19253: ST_TO_ADDR
// InGameOn ;
19254: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19258: LD_INT 3
19260: PPUSH
19261: LD_INT 1
19263: PPUSH
19264: LD_INT 1
19266: PPUSH
19267: LD_INT 0
19269: PPUSH
19270: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19274: LD_INT 6
19276: PPUSH
19277: LD_INT 1
19279: PPUSH
19280: LD_INT 1
19282: PPUSH
19283: LD_INT 0
19285: PPUSH
19286: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19290: LD_INT 5
19292: PPUSH
19293: LD_INT 1
19295: PPUSH
19296: LD_INT 1
19298: PPUSH
19299: LD_INT 0
19301: PPUSH
19302: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19306: LD_INT 3
19308: PPUSH
19309: LD_INT 1
19311: PPUSH
19312: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19316: LD_INT 97
19318: PPUSH
19319: LD_INT 91
19321: PPUSH
19322: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19326: LD_INT 22
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 21
19338: PUSH
19339: LD_INT 1
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PPUSH
19350: CALL_OW 69
19354: PPUSH
19355: CALL_OW 121
// wait ( 0 0$01 ) ;
19359: LD_INT 35
19361: PPUSH
19362: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19366: LD_INT 22
19368: PUSH
19369: LD_INT 3
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 21
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PPUSH
19390: CALL_OW 69
19394: PPUSH
19395: LD_INT 124
19397: PPUSH
19398: LD_INT 98
19400: PPUSH
19401: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19405: LD_INT 22
19407: PUSH
19408: LD_INT 5
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 21
19417: PUSH
19418: LD_INT 1
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PPUSH
19429: CALL_OW 69
19433: PPUSH
19434: CALL_OW 121
// wait ( 0 0$01 ) ;
19438: LD_INT 35
19440: PPUSH
19441: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19445: LD_INT 22
19447: PUSH
19448: LD_INT 5
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 21
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PPUSH
19469: CALL_OW 69
19473: PPUSH
19474: LD_INT 124
19476: PPUSH
19477: LD_INT 98
19479: PPUSH
19480: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19484: LD_INT 22
19486: PUSH
19487: LD_INT 6
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL_OW 69
19512: PPUSH
19513: CALL_OW 121
// wait ( 0 0$01 ) ;
19517: LD_INT 35
19519: PPUSH
19520: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19524: LD_INT 22
19526: PUSH
19527: LD_INT 6
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 21
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PPUSH
19548: CALL_OW 69
19552: PPUSH
19553: LD_INT 124
19555: PPUSH
19556: LD_INT 98
19558: PPUSH
19559: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19563: LD_INT 22
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 21
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 69
19591: PPUSH
19592: LD_INT 124
19594: PPUSH
19595: LD_INT 98
19597: PPUSH
19598: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19602: LD_INT 124
19604: PPUSH
19605: LD_INT 98
19607: PPUSH
19608: CALL_OW 84
// p := 0 0$0 ;
19612: LD_ADDR_VAR 0 2
19616: PUSH
19617: LD_INT 0
19619: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19620: LD_INT 35
19622: PPUSH
19623: CALL_OW 67
// p := p + 0 0$1 ;
19627: LD_ADDR_VAR 0 2
19631: PUSH
19632: LD_VAR 0 2
19636: PUSH
19637: LD_INT 35
19639: PLUS
19640: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19641: LD_INT 23
19643: PUSH
19644: LD_INT 3
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 21
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 24
19663: PUSH
19664: LD_INT 250
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: PPUSH
19676: CALL_OW 69
19680: PUSH
19681: LD_INT 0
19683: EQUAL
19684: PUSH
19685: LD_VAR 0 2
19689: PUSH
19690: LD_INT 245
19692: GREATEREQUAL
19693: OR
19694: IFFALSE 19620
// FinishMission ;
19696: CALL 19873 0 0
// end ;
19700: PPOPN 2
19702: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19703: LD_EXP 40
19707: PUSH
19708: LD_INT 1
19710: EQUAL
19711: IFFALSE 19870
19713: GO 19715
19715: DISABLE
19716: LD_INT 0
19718: PPUSH
// begin enable ;
19719: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19720: LD_ADDR_VAR 0 1
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PPUSH
19735: CALL_OW 69
19739: PUSH
19740: FOR_IN
19741: IFFALSE 19768
// if IsInArea ( i , RussianEscape ) then
19743: LD_VAR 0 1
19747: PPUSH
19748: LD_INT 5
19750: PPUSH
19751: CALL_OW 308
19755: IFFALSE 19766
// RemoveUnit ( i ) ;
19757: LD_VAR 0 1
19761: PPUSH
19762: CALL_OW 64
19766: GO 19740
19768: POP
19769: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19770: LD_ADDR_VAR 0 1
19774: PUSH
19775: LD_INT 22
19777: PUSH
19778: LD_INT 5
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: PUSH
19790: FOR_IN
19791: IFFALSE 19818
// if IsInArea ( i , RussianEscape ) then
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_INT 5
19800: PPUSH
19801: CALL_OW 308
19805: IFFALSE 19816
// RemoveUnit ( i ) ;
19807: LD_VAR 0 1
19811: PPUSH
19812: CALL_OW 64
19816: GO 19790
19818: POP
19819: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19820: LD_ADDR_VAR 0 1
19824: PUSH
19825: LD_INT 22
19827: PUSH
19828: LD_INT 6
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PPUSH
19835: CALL_OW 69
19839: PUSH
19840: FOR_IN
19841: IFFALSE 19868
// if IsInArea ( i , RussianEscape ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_INT 5
19850: PPUSH
19851: CALL_OW 308
19855: IFFALSE 19866
// RemoveUnit ( i ) ;
19857: LD_VAR 0 1
19861: PPUSH
19862: CALL_OW 64
19866: GO 19840
19868: POP
19869: POP
// end ;
19870: PPOPN 1
19872: END
// export function FinishMission ; var tmp ; begin
19873: LD_INT 0
19875: PPUSH
19876: PPUSH
// SaveBase ( GammBaseArea ) ;
19877: LD_INT 22
19879: PPUSH
19880: CALL 20433 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19884: LD_INT 69
19886: PPUSH
19887: LD_INT 1
19889: PPUSH
19890: CALL_OW 321
19894: PPUSH
19895: LD_STRING GatlingInGamma
19897: PPUSH
19898: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19902: LD_EXP 34
19906: PUSH
19907: LD_INT 1
19909: EQUAL
19910: PUSH
19911: LD_EXP 35
19915: PUSH
19916: LD_INT 1
19918: EQUAL
19919: AND
19920: IFFALSE 19934
// begin AddMedal ( oil , 1 ) ;
19922: LD_STRING oil
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 101
// end else
19932: GO 20027
// begin if buildOil = 1 and buildPower = 0 then
19934: LD_EXP 34
19938: PUSH
19939: LD_INT 1
19941: EQUAL
19942: PUSH
19943: LD_EXP 35
19947: PUSH
19948: LD_INT 0
19950: EQUAL
19951: AND
19952: IFFALSE 19965
// AddMedal ( oil , - 1 ) ;
19954: LD_STRING oil
19956: PPUSH
19957: LD_INT 1
19959: NEG
19960: PPUSH
19961: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19965: LD_EXP 34
19969: PUSH
19970: LD_INT 0
19972: EQUAL
19973: PUSH
19974: LD_EXP 35
19978: PUSH
19979: LD_INT 1
19981: EQUAL
19982: AND
19983: IFFALSE 19996
// AddMedal ( oil , - 2 ) ;
19985: LD_STRING oil
19987: PPUSH
19988: LD_INT 2
19990: NEG
19991: PPUSH
19992: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19996: LD_EXP 34
20000: PUSH
20001: LD_INT 0
20003: EQUAL
20004: PUSH
20005: LD_EXP 35
20009: PUSH
20010: LD_INT 0
20012: EQUAL
20013: AND
20014: IFFALSE 20027
// AddMedal ( oil , - 3 ) ;
20016: LD_STRING oil
20018: PPUSH
20019: LD_INT 3
20021: NEG
20022: PPUSH
20023: CALL_OW 101
// end ; if lostCounter > 3 then
20027: LD_EXP 38
20031: PUSH
20032: LD_INT 3
20034: GREATER
20035: IFFALSE 20050
// begin AddMedal ( deaths , - 1 ) ;
20037: LD_STRING deaths
20039: PPUSH
20040: LD_INT 1
20042: NEG
20043: PPUSH
20044: CALL_OW 101
// end else
20048: GO 20060
// begin AddMedal ( deaths , 1 ) ;
20050: LD_STRING deaths
20052: PPUSH
20053: LD_INT 1
20055: PPUSH
20056: CALL_OW 101
// end ; if honor = 1 then
20060: LD_EXP 39
20064: PUSH
20065: LD_INT 1
20067: EQUAL
20068: IFFALSE 20082
// begin AddMedal ( honour , 1 ) ;
20070: LD_STRING honour
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: CALL_OW 101
// end else
20080: GO 20093
// begin AddMedal ( honour , - 1 ) ;
20082: LD_STRING honour
20084: PPUSH
20085: LD_INT 1
20087: NEG
20088: PPUSH
20089: CALL_OW 101
// end ; GiveMedals ( Main ) ;
20093: LD_STRING Main
20095: PPUSH
20096: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20100: LD_INT 22
20102: PUSH
20103: LD_INT 1
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 23
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 21
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: PPUSH
20135: CALL_OW 69
20139: PPUSH
20140: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20144: LD_EXP 1
20148: PPUSH
20149: LD_EXP 44
20153: PUSH
20154: LD_STRING JMM
20156: STR
20157: PPUSH
20158: CALL_OW 38
// if IsOK ( Bobby ) then
20162: LD_EXP 2
20166: PPUSH
20167: CALL_OW 302
20171: IFFALSE 20191
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20173: LD_EXP 2
20177: PPUSH
20178: LD_EXP 44
20182: PUSH
20183: LD_STRING Bobby
20185: STR
20186: PPUSH
20187: CALL_OW 38
// if IsOK ( Cyrus ) then
20191: LD_EXP 3
20195: PPUSH
20196: CALL_OW 302
20200: IFFALSE 20220
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20202: LD_EXP 3
20206: PPUSH
20207: LD_EXP 44
20211: PUSH
20212: LD_STRING Cyrus
20214: STR
20215: PPUSH
20216: CALL_OW 38
// if IsOK ( Lisa ) then
20220: LD_EXP 4
20224: PPUSH
20225: CALL_OW 302
20229: IFFALSE 20249
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20231: LD_EXP 4
20235: PPUSH
20236: LD_EXP 44
20240: PUSH
20241: LD_STRING Lisa
20243: STR
20244: PPUSH
20245: CALL_OW 38
// if IsOK ( Brown ) then
20249: LD_EXP 7
20253: PPUSH
20254: CALL_OW 302
20258: IFFALSE 20278
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20260: LD_EXP 7
20264: PPUSH
20265: LD_EXP 44
20269: PUSH
20270: LD_STRING Brown
20272: STR
20273: PPUSH
20274: CALL_OW 38
// if IsOK ( Donaldson ) then
20278: LD_EXP 13
20282: PPUSH
20283: CALL_OW 302
20287: IFFALSE 20307
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20289: LD_EXP 13
20293: PPUSH
20294: LD_EXP 44
20298: PUSH
20299: LD_STRING Donaldson
20301: STR
20302: PPUSH
20303: CALL_OW 38
// if IsOK ( Frank ) then
20307: LD_EXP 5
20311: PPUSH
20312: CALL_OW 302
20316: IFFALSE 20336
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20318: LD_EXP 5
20322: PPUSH
20323: LD_EXP 44
20327: PUSH
20328: LD_STRING Frank
20330: STR
20331: PPUSH
20332: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20336: LD_INT 50
20338: PUSH
20339: EMPTY
20340: LIST
20341: PUSH
20342: LD_INT 22
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 21
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: PPUSH
20367: CALL_OW 69
20371: PUSH
20372: LD_EXP 1
20376: PUSH
20377: LD_EXP 2
20381: PUSH
20382: LD_EXP 3
20386: PUSH
20387: LD_EXP 4
20391: PUSH
20392: LD_EXP 7
20396: PUSH
20397: LD_EXP 13
20401: PUSH
20402: LD_EXP 5
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: DIFF
20416: PPUSH
20417: LD_STRING 04_other_survivors
20419: PPUSH
20420: CALL_OW 38
// YouWin ;
20424: CALL_OW 103
// end ;
20428: LD_VAR 0 1
20432: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20433: LD_INT 0
20435: PPUSH
20436: PPUSH
20437: PPUSH
20438: PPUSH
// gammaBase = [ ] ;
20439: LD_ADDR_VAR 0 4
20443: PUSH
20444: EMPTY
20445: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
20446: LD_ADDR_VAR 0 5
20450: PUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: LD_INT 22
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 21
20468: PUSH
20469: LD_INT 3
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PPUSH
20480: CALL_OW 70
20484: ST_TO_ADDR
// for i in buildings do
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_VAR 0 5
20494: PUSH
20495: FOR_IN
20496: IFFALSE 20833
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20498: LD_VAR 0 3
20502: PPUSH
20503: CALL_OW 266
20507: PUSH
20508: LD_INT 6
20510: PUSH
20511: LD_INT 7
20513: PUSH
20514: LD_INT 8
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: IN
20522: IFFALSE 20636
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20524: LD_ADDR_VAR 0 4
20528: PUSH
20529: LD_VAR 0 4
20533: PUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 266
20543: PUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: CALL_OW 250
20553: PUSH
20554: LD_VAR 0 3
20558: PPUSH
20559: CALL_OW 251
20563: PUSH
20564: LD_VAR 0 3
20568: PPUSH
20569: CALL_OW 254
20573: PUSH
20574: LD_VAR 0 3
20578: PPUSH
20579: CALL_OW 267
20583: PUSH
20584: LD_VAR 0 3
20588: PPUSH
20589: CALL_OW 248
20593: PUSH
20594: LD_VAR 0 3
20598: PPUSH
20599: LD_INT 1
20601: PPUSH
20602: CALL_OW 268
20606: PUSH
20607: LD_VAR 0 3
20611: PPUSH
20612: LD_INT 2
20614: PPUSH
20615: CALL_OW 268
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: ADD
20633: ST_TO_ADDR
20634: GO 20831
// if GetBType ( i ) in [ b_bunker ] then
20636: LD_VAR 0 3
20640: PPUSH
20641: CALL_OW 266
20645: PUSH
20646: LD_INT 32
20648: PUSH
20649: EMPTY
20650: LIST
20651: IN
20652: IFFALSE 20749
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20654: LD_ADDR_VAR 0 4
20658: PUSH
20659: LD_VAR 0 4
20663: PUSH
20664: LD_VAR 0 3
20668: PPUSH
20669: CALL_OW 266
20673: PUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: CALL_OW 250
20683: PUSH
20684: LD_VAR 0 3
20688: PPUSH
20689: CALL_OW 251
20693: PUSH
20694: LD_VAR 0 3
20698: PPUSH
20699: CALL_OW 254
20703: PUSH
20704: LD_VAR 0 3
20708: PPUSH
20709: CALL_OW 267
20713: PUSH
20714: LD_VAR 0 3
20718: PPUSH
20719: CALL_OW 248
20723: PUSH
20724: LD_VAR 0 3
20728: PPUSH
20729: CALL_OW 269
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: ADD
20746: ST_TO_ADDR
20747: GO 20831
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20749: LD_ADDR_VAR 0 4
20753: PUSH
20754: LD_VAR 0 4
20758: PUSH
20759: LD_VAR 0 3
20763: PPUSH
20764: CALL_OW 266
20768: PUSH
20769: LD_VAR 0 3
20773: PPUSH
20774: CALL_OW 250
20778: PUSH
20779: LD_VAR 0 3
20783: PPUSH
20784: CALL_OW 251
20788: PUSH
20789: LD_VAR 0 3
20793: PPUSH
20794: CALL_OW 254
20798: PUSH
20799: LD_VAR 0 3
20803: PPUSH
20804: CALL_OW 267
20808: PUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: CALL_OW 248
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: ADD
20830: ST_TO_ADDR
// end ;
20831: GO 20495
20833: POP
20834: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20835: LD_VAR 0 4
20839: PPUSH
20840: LD_STRING GammaBase
20842: PPUSH
20843: CALL_OW 39
// end ; end_of_file
20847: LD_VAR 0 2
20851: RET
// every 1 1$15 do
20852: GO 20854
20854: DISABLE
// begin if supply <= 13 and supply > 7 then
20855: LD_EXP 36
20859: PUSH
20860: LD_INT 13
20862: LESSEQUAL
20863: PUSH
20864: LD_EXP 36
20868: PUSH
20869: LD_INT 7
20871: GREATER
20872: AND
20873: IFFALSE 20896
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20875: LD_INT 3
20877: PPUSH
20878: LD_INT 5
20880: PPUSH
20881: CALL_OW 12
20885: PPUSH
20886: LD_INT 18
20888: PPUSH
20889: LD_INT 1
20891: PPUSH
20892: CALL_OW 55
// if supply <= 7 and supply > 4 then
20896: LD_EXP 36
20900: PUSH
20901: LD_INT 7
20903: LESSEQUAL
20904: PUSH
20905: LD_EXP 36
20909: PUSH
20910: LD_INT 4
20912: GREATER
20913: AND
20914: IFFALSE 20937
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20916: LD_INT 3
20918: PPUSH
20919: LD_INT 5
20921: PPUSH
20922: CALL_OW 12
20926: PPUSH
20927: LD_INT 19
20929: PPUSH
20930: LD_INT 1
20932: PPUSH
20933: CALL_OW 55
// if supply <= 4 and supply > 0 then
20937: LD_EXP 36
20941: PUSH
20942: LD_INT 4
20944: LESSEQUAL
20945: PUSH
20946: LD_EXP 36
20950: PUSH
20951: LD_INT 0
20953: GREATER
20954: AND
20955: IFFALSE 20978
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20957: LD_INT 3
20959: PPUSH
20960: LD_INT 5
20962: PPUSH
20963: CALL_OW 12
20967: PPUSH
20968: LD_INT 20
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: CALL_OW 55
// if supply > 0 then
20978: LD_EXP 36
20982: PUSH
20983: LD_INT 0
20985: GREATER
20986: IFFALSE 21003
// begin supply = supply - 1 ;
20988: LD_ADDR_EXP 36
20992: PUSH
20993: LD_EXP 36
20997: PUSH
20998: LD_INT 1
21000: MINUS
21001: ST_TO_ADDR
// enable ;
21002: ENABLE
// end ; end ;
21003: END
