// export charactersList ; export JMM , Bobby , Cyrus , Lisa , Frank ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Brian , Jerry ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export donaldsonCoopAttack ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// ruSoldMinLevel = 0 ;
  12: LD_ADDR_EXP 18
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  20: LD_ADDR_EXP 19
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  28: LD_ADDR_EXP 20
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// debugMode = 0 ;
  36: LD_ADDR_EXP 40
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// firstRussianAttack = 0 ;
  44: LD_ADDR_EXP 22
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// saveDonaldson = 0 ;
  52: LD_ADDR_EXP 23
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// frankScoutBase = 0 ;
  60: LD_ADDR_EXP 24
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// harrAnswer = 0 ;
  68: LD_ADDR_EXP 25
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
  76: LD_ADDR_EXP 26
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
  84: LD_ADDR_EXP 27
  88: PUSH
  89: LD_INT 18900
  91: ST_TO_ADDR
// timerStatus = 0 ;
  92: LD_ADDR_EXP 28
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// startTimer = 0 ;
 100: LD_ADDR_EXP 29
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// factoryDialog = 0 ;
 108: LD_ADDR_EXP 30
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bunkerDialog = 0 ;
 116: LD_ADDR_EXP 31
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// energyVDialog = 0 ;
 124: LD_ADDR_EXP 32
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// buildOil = 0 ;
 132: LD_ADDR_EXP 33
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// buildPower = 0 ;
 140: LD_ADDR_EXP 34
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// supply = [ 13 , 12 , 11 ] [ Difficulty ] ;
 148: LD_ADDR_EXP 35
 152: PUSH
 153: LD_INT 13
 155: PUSH
 156: LD_INT 12
 158: PUSH
 159: LD_INT 11
 161: PUSH
 162: EMPTY
 163: LIST
 164: LIST
 165: LIST
 166: PUSH
 167: LD_OWVAR 67
 171: ARRAY
 172: ST_TO_ADDR
// AIEnable = 1 ;
 173: LD_ADDR_EXP 36
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 181: LD_ADDR_EXP 39
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lostCounter = 0 ;
 189: LD_ADDR_EXP 37
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// honor = 1 ;
 197: LD_ADDR_EXP 38
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// charactersList = [ JMM , Bobby , Cyrus , Lisa , Brian , Jerry , Frank , Brown , Dickens , Woodruff , Campell , Knight , Claptopn , Donaldson ] ;
 205: LD_ADDR_EXP 1
 209: PUSH
 210: LD_STRING JMM
 212: PUSH
 213: LD_STRING Bobby
 215: PUSH
 216: LD_STRING Cyrus
 218: PUSH
 219: LD_STRING Lisa
 221: PUSH
 222: LD_STRING Brian
 224: PUSH
 225: LD_STRING Jerry
 227: PUSH
 228: LD_STRING Frank
 230: PUSH
 231: LD_STRING Brown
 233: PUSH
 234: LD_STRING Dickens
 236: PUSH
 237: LD_STRING Woodruff
 239: PUSH
 240: LD_STRING Campell
 242: PUSH
 243: LD_STRING Knight
 245: PUSH
 246: LD_STRING Claptopn
 248: PUSH
 249: LD_STRING Donaldson
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: ST_TO_ADDR
// PrepareDifficulty ;
 268: CALL 3433 0 0
// PrepareRussianBase ;
 272: CALL 1744 0 0
// PrepareRussianCommander ;
 276: CALL 1695 0 0
// PrepareHeroes ;
 280: CALL 426 0 0
// SetBName ( ambdept0 , gamma ) ;
 284: LD_INT 4
 286: PPUSH
 287: LD_STRING gamma
 289: PPUSH
 290: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 294: LD_INT 21
 296: PPUSH
 297: LD_STRING fyodor
 299: PPUSH
 300: CALL_OW 500
// end ;
 304: END
// every 0 0$1 trigger debugMode = 1 do var i , c1 , c2 , c3 , c4 , c5 ;
 305: LD_EXP 40
 309: PUSH
 310: LD_INT 1
 312: EQUAL
 313: IFFALSE 423
 315: GO 317
 317: DISABLE
 318: LD_INT 0
 320: PPUSH
 321: PPUSH
 322: PPUSH
 323: PPUSH
 324: PPUSH
 325: PPUSH
// begin enable ;
 326: ENABLE
// fogoff ( true ) ;
 327: LD_INT 1
 329: PPUSH
 330: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 334: LD_ADDR_VAR 0 1
 338: PUSH
 339: LD_INT 22
 341: PUSH
 342: LD_INT 1
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PUSH
 349: LD_INT 21
 351: PUSH
 352: LD_INT 1
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PPUSH
 363: CALL_OW 69
 367: PUSH
 368: FOR_IN
 369: IFFALSE 385
// SetLives ( i , 1000 ) ;
 371: LD_VAR 0 1
 375: PPUSH
 376: LD_INT 1000
 378: PPUSH
 379: CALL_OW 234
 383: GO 368
 385: POP
 386: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 387: LD_INT 4
 389: PPUSH
 390: CALL_OW 274
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 9999
 400: PPUSH
 401: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 405: LD_INT 4
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 2
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
// end ; end_of_file
 423: PPOPN 6
 425: END
// export function PrepareHeroes ; var i ; begin
 426: LD_INT 0
 428: PPUSH
 429: PPUSH
// uc_side = 1 ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_INT 1
 437: ST_TO_ADDR
// uc_nation = 1 ;
 438: LD_ADDR_OWVAR 21
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 446: LD_ADDR_EXP 2
 450: PUSH
 451: LD_STRING JMM
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL 2974 0 2
 461: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 462: LD_ADDR_EXP 5
 466: PUSH
 467: LD_STRING Lisa
 469: PPUSH
 470: LD_INT 0
 472: PPUSH
 473: CALL 2974 0 2
 477: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 478: LD_ADDR_EXP 7
 482: PUSH
 483: LD_STRING Brown
 485: PPUSH
 486: LD_INT 0
 488: PPUSH
 489: CALL 2974 0 2
 493: ST_TO_ADDR
// Dickens = PrepareUnit ( JackDickens , false ) ;
 494: LD_ADDR_EXP 8
 498: PUSH
 499: LD_STRING JackDickens
 501: PPUSH
 502: LD_INT 0
 504: PPUSH
 505: CALL 2974 0 2
 509: ST_TO_ADDR
// Woodruff = PrepareUnit ( EveWoodruff , false ) ;
 510: LD_ADDR_EXP 9
 514: PUSH
 515: LD_STRING EveWoodruff
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL 2974 0 2
 525: ST_TO_ADDR
// Campell = PrepareUnit ( JackCampell , false ) ;
 526: LD_ADDR_EXP 12
 530: PUSH
 531: LD_STRING JackCampell
 533: PPUSH
 534: LD_INT 0
 536: PPUSH
 537: CALL 2974 0 2
 541: ST_TO_ADDR
// Knight = PrepareUnit ( GeorgeKnight , false ) ;
 542: LD_ADDR_EXP 10
 546: PUSH
 547: LD_STRING GeorgeKnight
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: CALL 2974 0 2
 557: ST_TO_ADDR
// Claptopn = PrepareUnit ( BillClaptopn , false ) ;
 558: LD_ADDR_EXP 11
 562: PUSH
 563: LD_STRING BillClaptopn
 565: PPUSH
 566: LD_INT 0
 568: PPUSH
 569: CALL 2974 0 2
 573: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 574: LD_ADDR_EXP 16
 578: PUSH
 579: LD_STRING Harisson
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL 2974 0 2
 589: ST_TO_ADDR
// uc_side = 4 ;
 590: LD_ADDR_OWVAR 20
 594: PUSH
 595: LD_INT 4
 597: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 598: LD_ADDR_EXP 13
 602: PUSH
 603: LD_STRING Donaldson
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL 2974 0 2
 613: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 614: LD_ADDR_EXP 6
 618: PUSH
 619: LD_STRING Frank
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL 2974 0 2
 629: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 630: LD_EXP 2
 634: PPUSH
 635: LD_INT 32
 637: PPUSH
 638: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 642: LD_EXP 7
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 657: LD_EXP 7
 661: PPUSH
 662: LD_INT 32
 664: PPUSH
 665: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 669: LD_EXP 8
 673: PPUSH
 674: LD_INT 2
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 684: LD_EXP 9
 688: PPUSH
 689: LD_INT 2
 691: PPUSH
 692: LD_INT 0
 694: PPUSH
 695: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 699: LD_EXP 12
 703: PPUSH
 704: LD_INT 2
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 714: LD_EXP 10
 718: PPUSH
 719: LD_INT 2
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 729: LD_EXP 11
 733: PPUSH
 734: LD_INT 2
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 744: LD_EXP 5
 748: PPUSH
 749: LD_INT 2
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 49
// end ;
 759: LD_VAR 0 1
 763: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 764: LD_INT 0
 766: PPUSH
 767: PPUSH
 768: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 769: LD_EXP 13
 773: PPUSH
 774: LD_INT 10
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 784: LD_EXP 6
 788: PPUSH
 789: LD_INT 10
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// uc_nation = 1 ;
 799: LD_ADDR_OWVAR 21
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// uc_side = 4 ;
 807: LD_ADDR_OWVAR 20
 811: PUSH
 812: LD_INT 4
 814: ST_TO_ADDR
// hc_class := 3 ;
 815: LD_ADDR_OWVAR 28
 819: PUSH
 820: LD_INT 3
 822: ST_TO_ADDR
// hc_sex := sex_male ;
 823: LD_ADDR_OWVAR 27
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 831: LD_ADDR_OWVAR 33
 835: PUSH
 836: LD_STRING SecondCharsGal
 838: ST_TO_ADDR
// hc_face_number := 53 ;
 839: LD_ADDR_OWVAR 34
 843: PUSH
 844: LD_INT 53
 846: ST_TO_ADDR
// hc_name :=  ;
 847: LD_ADDR_OWVAR 26
 851: PUSH
 852: LD_STRING 
 854: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 2 , 0 ] ;
 855: LD_ADDR_OWVAR 31
 859: PUSH
 860: LD_INT 1
 862: PUSH
 863: LD_INT 0
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: ST_TO_ADDR
// un = CreateHuman ;
 878: LD_ADDR_VAR 0 3
 882: PUSH
 883: CALL_OW 44
 887: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
 888: LD_VAR 0 3
 892: PPUSH
 893: LD_INT 10
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// hc_class := 1 ;
 903: LD_ADDR_OWVAR 28
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// hc_sex := sex_male ;
 911: LD_ADDR_OWVAR 27
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 919: LD_ADDR_OWVAR 33
 923: PUSH
 924: LD_STRING SecondCharsGal
 926: ST_TO_ADDR
// hc_face_number := 56 ;
 927: LD_ADDR_OWVAR 34
 931: PUSH
 932: LD_INT 56
 934: ST_TO_ADDR
// hc_name :=  ;
 935: LD_ADDR_OWVAR 26
 939: PUSH
 940: LD_STRING 
 942: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
 943: LD_ADDR_OWVAR 31
 947: PUSH
 948: LD_INT 2
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: LD_INT 1
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: ST_TO_ADDR
// un = CreateHuman ;
 966: LD_ADDR_VAR 0 3
 970: PUSH
 971: CALL_OW 44
 975: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// for i := 1 to 1 do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_INT 1
1003: PUSH
1004: FOR_TO
1005: IFFALSE 1105
// begin hc_gallery =  ;
1007: LD_ADDR_OWVAR 33
1011: PUSH
1012: LD_STRING 
1014: ST_TO_ADDR
// hc_name =  ;
1015: LD_ADDR_OWVAR 26
1019: PUSH
1020: LD_STRING 
1022: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( [ 1 , 1 , 1 ] [ Difficulty ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ) ;
1023: LD_INT 1
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 1
1031: PUSH
1032: LD_INT 1
1034: PUSH
1035: LD_INT 1
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: LD_OWVAR 67
1047: ARRAY
1048: PPUSH
1049: LD_INT 3
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: LD_INT 2
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: PPUSH
1069: CALL_OW 12
1073: PPUSH
1074: CALL_OW 380
// un = CreateHuman ;
1078: LD_ADDR_VAR 0 3
1082: PUSH
1083: CALL_OW 44
1087: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1088: LD_VAR 0 3
1092: PPUSH
1093: LD_INT 10
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end ;
1103: GO 1004
1105: POP
1106: POP
// end ;
1107: LD_VAR 0 1
1111: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1112: LD_INT 0
1114: PPUSH
1115: PPUSH
1116: PPUSH
// uc_nation = 1 ;
1117: LD_ADDR_OWVAR 21
1121: PUSH
1122: LD_INT 1
1124: ST_TO_ADDR
// uc_side = 1 ;
1125: LD_ADDR_OWVAR 20
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// hc_class := 1 ;
1133: LD_ADDR_OWVAR 28
1137: PUSH
1138: LD_INT 1
1140: ST_TO_ADDR
// hc_sex := sex_male ;
1141: LD_ADDR_OWVAR 27
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1149: LD_ADDR_OWVAR 33
1153: PUSH
1154: LD_STRING SecondCharsGal
1156: ST_TO_ADDR
// hc_face_number := 59 ;
1157: LD_ADDR_OWVAR 34
1161: PUSH
1162: LD_INT 59
1164: ST_TO_ADDR
// hc_name :=  ;
1165: LD_ADDR_OWVAR 26
1169: PUSH
1170: LD_STRING 
1172: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1173: LD_ADDR_OWVAR 31
1177: PUSH
1178: LD_INT 2
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: ST_TO_ADDR
// un = CreateHuman ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: CALL_OW 44
1205: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1206: LD_VAR 0 4
1210: PPUSH
1211: LD_INT 11
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 49
// hc_class := 1 ;
1221: LD_ADDR_OWVAR 28
1225: PUSH
1226: LD_INT 1
1228: ST_TO_ADDR
// hc_sex := sex_male ;
1229: LD_ADDR_OWVAR 27
1233: PUSH
1234: LD_INT 1
1236: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1237: LD_ADDR_OWVAR 33
1241: PUSH
1242: LD_STRING SecondCharsGal
1244: ST_TO_ADDR
// hc_face_number := 54 ;
1245: LD_ADDR_OWVAR 34
1249: PUSH
1250: LD_INT 54
1252: ST_TO_ADDR
// hc_name :=  ;
1253: LD_ADDR_OWVAR 26
1257: PUSH
1258: LD_STRING 
1260: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1261: LD_ADDR_OWVAR 31
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: ST_TO_ADDR
// un = CreateHuman ;
1284: LD_ADDR_VAR 0 4
1288: PUSH
1289: CALL_OW 44
1293: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1294: LD_VAR 0 4
1298: PPUSH
1299: LD_INT 11
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 49
// hc_class := 3 ;
1309: LD_ADDR_OWVAR 28
1313: PUSH
1314: LD_INT 3
1316: ST_TO_ADDR
// hc_sex := sex_male ;
1317: LD_ADDR_OWVAR 27
1321: PUSH
1322: LD_INT 1
1324: ST_TO_ADDR
// hc_gallery :=  ;
1325: LD_ADDR_OWVAR 33
1329: PUSH
1330: LD_STRING 
1332: ST_TO_ADDR
// hc_name :=  ;
1333: LD_ADDR_OWVAR 26
1337: PUSH
1338: LD_STRING 
1340: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1341: LD_ADDR_OWVAR 31
1345: PUSH
1346: LD_INT 0
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 3
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: ST_TO_ADDR
// un = CreateHuman ;
1364: LD_ADDR_VAR 0 4
1368: PUSH
1369: CALL_OW 44
1373: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1374: LD_VAR 0 4
1378: PPUSH
1379: LD_INT 11
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 49
// if count = 4 then
1389: LD_VAR 0 1
1393: PUSH
1394: LD_INT 4
1396: EQUAL
1397: IFFALSE 1487
// begin hc_class := 1 ;
1399: LD_ADDR_OWVAR 28
1403: PUSH
1404: LD_INT 1
1406: ST_TO_ADDR
// hc_sex := sex_male ;
1407: LD_ADDR_OWVAR 27
1411: PUSH
1412: LD_INT 1
1414: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1415: LD_ADDR_OWVAR 33
1419: PUSH
1420: LD_STRING SecondCharsGal
1422: ST_TO_ADDR
// hc_face_number := 34 ;
1423: LD_ADDR_OWVAR 34
1427: PUSH
1428: LD_INT 34
1430: ST_TO_ADDR
// hc_name :=  ;
1431: LD_ADDR_OWVAR 26
1435: PUSH
1436: LD_STRING 
1438: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1439: LD_ADDR_OWVAR 31
1443: PUSH
1444: LD_INT 2
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: LD_INT 1
1452: PUSH
1453: LD_INT 0
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: ST_TO_ADDR
// un = CreateHuman ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: CALL_OW 44
1471: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1472: LD_VAR 0 4
1476: PPUSH
1477: LD_INT 11
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: CALL_OW 49
// end ; if count = 5 then
1487: LD_VAR 0 1
1491: PUSH
1492: LD_INT 5
1494: EQUAL
1495: IFFALSE 1585
// begin hc_class := 1 ;
1497: LD_ADDR_OWVAR 28
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// hc_sex := sex_female ;
1505: LD_ADDR_OWVAR 27
1509: PUSH
1510: LD_INT 2
1512: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1513: LD_ADDR_OWVAR 33
1517: PUSH
1518: LD_STRING SecondCharsGal
1520: ST_TO_ADDR
// hc_face_number := 41 ;
1521: LD_ADDR_OWVAR 34
1525: PUSH
1526: LD_INT 41
1528: ST_TO_ADDR
// hc_name :=  ;
1529: LD_ADDR_OWVAR 26
1533: PUSH
1534: LD_STRING 
1536: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
1537: LD_ADDR_OWVAR 31
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 3
1547: PUSH
1548: LD_INT 1
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: ST_TO_ADDR
// un = CreateHuman ;
1560: LD_ADDR_VAR 0 4
1564: PUSH
1565: CALL_OW 44
1569: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1570: LD_VAR 0 4
1574: PPUSH
1575: LD_INT 11
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
1585: LD_INT 11
1587: PPUSH
1588: LD_INT 22
1590: PUSH
1591: LD_INT 1
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 21
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: LD_INT 26
1610: PUSH
1611: LD_INT 1
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: PPUSH
1623: CALL_OW 70
1627: PUSH
1628: LD_INT 1
1630: ARRAY
1631: PPUSH
1632: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
1636: LD_INT 11
1638: PPUSH
1639: LD_INT 22
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 21
1651: PUSH
1652: LD_INT 1
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 26
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: PPUSH
1674: CALL_OW 70
1678: PUSH
1679: LD_INT 1
1681: ARRAY
1682: PPUSH
1683: LD_STRING D6-Sol3-1
1685: PPUSH
1686: CALL_OW 88
// end ; end_of_file
1690: LD_VAR 0 2
1694: RET
// export function PrepareRussianCommander ; begin
1695: LD_INT 0
1697: PPUSH
// uc_side = 3 ;
1698: LD_ADDR_OWVAR 20
1702: PUSH
1703: LD_INT 3
1705: ST_TO_ADDR
// uc_nation = 3 ;
1706: LD_ADDR_OWVAR 21
1710: PUSH
1711: LD_INT 3
1713: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
1714: LD_ADDR_EXP 17
1718: PUSH
1719: LD_STRING Stolypin
1721: PPUSH
1722: CALL_OW 25
1726: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
1727: LD_EXP 17
1731: PPUSH
1732: LD_INT 21
1734: PPUSH
1735: CALL_OW 52
// end ;
1739: LD_VAR 0 1
1743: RET
// export function PrepareRussianBase ; var i ; begin
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
1748: LD_INT 3
1750: PPUSH
1751: LD_INT 3
1753: PPUSH
1754: LD_INT 22
1756: PPUSH
1757: LD_EXP 18
1761: PPUSH
1762: LD_EXP 19
1766: PPUSH
1767: CALL_OW 12
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: LD_INT 2
1777: PPUSH
1778: CALL 3031 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
1782: LD_INT 3
1784: PPUSH
1785: LD_INT 3
1787: PPUSH
1788: LD_INT 21
1790: PPUSH
1791: LD_EXP 18
1795: PPUSH
1796: LD_EXP 19
1800: PPUSH
1801: CALL_OW 12
1805: PPUSH
1806: LD_INT 2
1808: PPUSH
1809: LD_INT 3
1811: PPUSH
1812: CALL 3031 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
1816: LD_INT 3
1818: PPUSH
1819: LD_INT 3
1821: PPUSH
1822: LD_INT 1
1824: PPUSH
1825: LD_EXP 18
1829: PPUSH
1830: LD_EXP 19
1834: PPUSH
1835: CALL_OW 12
1839: PPUSH
1840: LD_INT 4
1842: PPUSH
1843: LD_INT 2
1845: PPUSH
1846: CALL 3031 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
1850: LD_INT 3
1852: PPUSH
1853: LD_INT 3
1855: PPUSH
1856: LD_INT 24
1858: PPUSH
1859: LD_EXP 18
1863: PPUSH
1864: LD_EXP 19
1868: PPUSH
1869: CALL_OW 12
1873: PPUSH
1874: LD_INT 3
1876: PPUSH
1877: LD_INT 6
1879: PPUSH
1880: CALL 3031 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1884: LD_ADDR_VAR 0 2
1888: PUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 3
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 30
1901: PUSH
1902: LD_INT 32
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 69
1917: PUSH
1918: FOR_IN
1919: IFFALSE 1959
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
1921: LD_INT 3
1923: PPUSH
1924: LD_INT 3
1926: PPUSH
1927: LD_VAR 0 2
1931: PPUSH
1932: LD_EXP 18
1936: PPUSH
1937: LD_EXP 19
1941: PPUSH
1942: CALL_OW 12
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL 3031 0 6
1957: GO 1918
1959: POP
1960: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: LD_INT 22
1968: PUSH
1969: LD_INT 3
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 30
1978: PUSH
1979: LD_INT 31
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PPUSH
1990: CALL_OW 69
1994: PUSH
1995: FOR_IN
1996: IFFALSE 2024
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
1998: LD_EXP 18
2002: PPUSH
2003: LD_EXP 19
2007: PPUSH
2008: CALL_OW 12
2012: PPUSH
2013: LD_VAR 0 2
2017: PPUSH
2018: CALL 3141 0 2
2022: GO 1995
2024: POP
2025: POP
// end ;
2026: LD_VAR 0 1
2030: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2031: LD_INT 0
2033: PPUSH
2034: PPUSH
2035: PPUSH
2036: PPUSH
// uc_side = 6 ;
2037: LD_ADDR_OWVAR 20
2041: PUSH
2042: LD_INT 6
2044: ST_TO_ADDR
// uc_nation = 3 ;
2045: LD_ADDR_OWVAR 21
2049: PUSH
2050: LD_INT 3
2052: ST_TO_ADDR
// for i := 1 to rand ( 0 , 2 ) + [ 2 , 2 , 1 ] [ Difficulty ] do
2053: LD_ADDR_VAR 0 2
2057: PUSH
2058: DOUBLE
2059: LD_INT 1
2061: DEC
2062: ST_TO_ADDR
2063: LD_INT 0
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: CALL_OW 12
2073: PUSH
2074: LD_INT 2
2076: PUSH
2077: LD_INT 2
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: PUSH
2088: LD_OWVAR 67
2092: ARRAY
2093: PLUS
2094: PUSH
2095: FOR_TO
2096: IFFALSE 2256
// begin vc_engine = 1 ;
2098: LD_ADDR_OWVAR 39
2102: PUSH
2103: LD_INT 1
2105: ST_TO_ADDR
// vc_control = 1 ;
2106: LD_ADDR_OWVAR 38
2110: PUSH
2111: LD_INT 1
2113: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2114: LD_ADDR_OWVAR 40
2118: PUSH
2119: LD_INT 42
2121: PUSH
2122: LD_INT 42
2124: PUSH
2125: LD_INT 43
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: LD_OWVAR 67
2137: ARRAY
2138: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2139: LD_ADDR_OWVAR 37
2143: PUSH
2144: LD_INT 21
2146: PUSH
2147: LD_INT 22
2149: PUSH
2150: LD_INT 22
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_OWVAR 67
2162: ARRAY
2163: ST_TO_ADDR
// veh = CreateVehicle ;
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: CALL_OW 45
2173: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2174: LD_VAR 0 3
2178: PPUSH
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// hc_gallery =  ;
2189: LD_ADDR_OWVAR 33
2193: PUSH
2194: LD_STRING 
2196: ST_TO_ADDR
// hc_name =  ;
2197: LD_ADDR_OWVAR 26
2201: PUSH
2202: LD_STRING 
2204: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2205: LD_INT 0
2207: PPUSH
2208: LD_INT 3
2210: PPUSH
2211: LD_EXP 18
2215: PPUSH
2216: LD_EXP 19
2220: PPUSH
2221: CALL_OW 12
2225: PPUSH
2226: CALL_OW 380
// un = CreateHuman ;
2230: LD_ADDR_VAR 0 4
2234: PUSH
2235: CALL_OW 44
2239: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2240: LD_VAR 0 4
2244: PPUSH
2245: LD_VAR 0 3
2249: PPUSH
2250: CALL_OW 52
// end ;
2254: GO 2095
2256: POP
2257: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2258: LD_INT 0
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_EXP 18
2268: PPUSH
2269: LD_EXP 19
2273: PPUSH
2274: CALL_OW 12
2278: PUSH
2279: LD_INT 2
2281: PLUS
2282: PPUSH
2283: CALL_OW 380
// un = CreateHuman ;
2287: LD_ADDR_VAR 0 4
2291: PUSH
2292: CALL_OW 44
2296: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2297: LD_VAR 0 4
2301: PPUSH
2302: LD_INT 3
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2312: LD_INT 0
2314: PPUSH
2315: LD_INT 4
2317: PPUSH
2318: LD_EXP 18
2322: PPUSH
2323: LD_EXP 19
2327: PPUSH
2328: CALL_OW 12
2332: PUSH
2333: LD_INT 2
2335: PLUS
2336: PPUSH
2337: CALL_OW 380
// un = CreateHuman ;
2341: LD_ADDR_VAR 0 4
2345: PUSH
2346: CALL_OW 44
2350: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2351: LD_VAR 0 4
2355: PPUSH
2356: LD_INT 3
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) + 2 do
2366: LD_ADDR_VAR 0 2
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 2
2378: PUSH
2379: LD_INT 3
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: LD_OWVAR 67
2394: ARRAY
2395: PUSH
2396: LD_INT 1
2398: PPUSH
2399: LD_INT 3
2401: PPUSH
2402: CALL_OW 12
2406: PLUS
2407: PUSH
2408: LD_INT 2
2410: PLUS
2411: PUSH
2412: FOR_TO
2413: IFFALSE 2483
// begin hc_gallery =  ;
2415: LD_ADDR_OWVAR 33
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// hc_name =  ;
2423: LD_ADDR_OWVAR 26
2427: PUSH
2428: LD_STRING 
2430: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2431: LD_INT 0
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: LD_EXP 18
2441: PPUSH
2442: LD_EXP 19
2446: PPUSH
2447: CALL_OW 12
2451: PPUSH
2452: CALL_OW 380
// un = CreateHuman ;
2456: LD_ADDR_VAR 0 4
2460: PUSH
2461: CALL_OW 44
2465: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2466: LD_VAR 0 4
2470: PPUSH
2471: LD_INT 3
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: CALL_OW 49
// end ;
2481: GO 2412
2483: POP
2484: POP
// vc_engine = 1 ;
2485: LD_ADDR_OWVAR 39
2489: PUSH
2490: LD_INT 1
2492: ST_TO_ADDR
// vc_control = 1 ;
2493: LD_ADDR_OWVAR 38
2497: PUSH
2498: LD_INT 1
2500: ST_TO_ADDR
// vc_weapon = 51 ;
2501: LD_ADDR_OWVAR 40
2505: PUSH
2506: LD_INT 51
2508: ST_TO_ADDR
// vc_chassis = 22 ;
2509: LD_ADDR_OWVAR 37
2513: PUSH
2514: LD_INT 22
2516: ST_TO_ADDR
// veh = CreateVehicle ;
2517: LD_ADDR_VAR 0 3
2521: PUSH
2522: CALL_OW 45
2526: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2527: LD_VAR 0 3
2531: PPUSH
2532: LD_INT 3
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
2542: LD_VAR 0 3
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 100
2552: PPUSH
2553: CALL_OW 290
// hc_gallery =  ;
2557: LD_ADDR_OWVAR 33
2561: PUSH
2562: LD_STRING 
2564: ST_TO_ADDR
// hc_name =  ;
2565: LD_ADDR_OWVAR 26
2569: PUSH
2570: LD_STRING 
2572: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2573: LD_INT 0
2575: PPUSH
2576: LD_INT 3
2578: PPUSH
2579: LD_EXP 18
2583: PPUSH
2584: LD_EXP 19
2588: PPUSH
2589: CALL_OW 12
2593: PPUSH
2594: CALL_OW 380
// un = CreateHuman ;
2598: LD_ADDR_VAR 0 4
2602: PUSH
2603: CALL_OW 44
2607: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2608: LD_VAR 0 4
2612: PPUSH
2613: LD_VAR 0 3
2617: PPUSH
2618: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
2622: LD_ADDR_VAR 0 2
2626: PUSH
2627: LD_INT 22
2629: PUSH
2630: LD_INT 6
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 1
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 25
2645: PUSH
2646: LD_INT 2
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 3
2659: PUSH
2660: LD_INT 25
2662: PUSH
2663: LD_INT 4
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: LIST
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PPUSH
2683: CALL_OW 69
2687: PUSH
2688: FOR_IN
2689: IFFALSE 2708
// ComAgressiveMove ( i , 45 , 46 ) ;
2691: LD_VAR 0 2
2695: PPUSH
2696: LD_INT 45
2698: PPUSH
2699: LD_INT 46
2701: PPUSH
2702: CALL_OW 114
2706: GO 2688
2708: POP
2709: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
2710: LD_ADDR_VAR 0 2
2714: PUSH
2715: LD_INT 22
2717: PUSH
2718: LD_INT 6
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 25
2727: PUSH
2728: LD_INT 2
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PPUSH
2739: CALL_OW 69
2743: PUSH
2744: FOR_IN
2745: IFFALSE 2776
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
2747: LD_ADDR_EXP 21
2751: PUSH
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: LD_INT 48
2762: PPUSH
2763: LD_INT 55
2765: PPUSH
2766: LD_INT 5
2768: PPUSH
2769: CALL_OW 145
2773: ST_TO_ADDR
2774: GO 2744
2776: POP
2777: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
2778: LD_ADDR_VAR 0 2
2782: PUSH
2783: LD_INT 22
2785: PUSH
2786: LD_INT 6
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 25
2795: PUSH
2796: LD_INT 4
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PPUSH
2807: CALL_OW 69
2811: PUSH
2812: FOR_IN
2813: IFFALSE 2832
// ComMoveXY ( i , 39 , 55 ) ;
2815: LD_VAR 0 2
2819: PPUSH
2820: LD_INT 39
2822: PPUSH
2823: LD_INT 55
2825: PPUSH
2826: CALL_OW 111
2830: GO 2812
2832: POP
2833: POP
// end ;
2834: LD_VAR 0 1
2838: RET
// export function PrepareFirstAttack ; var i , un ; begin
2839: LD_INT 0
2841: PPUSH
2842: PPUSH
2843: PPUSH
// uc_side = 5 ;
2844: LD_ADDR_OWVAR 20
2848: PUSH
2849: LD_INT 5
2851: ST_TO_ADDR
// uc_nation = 3 ;
2852: LD_ADDR_OWVAR 21
2856: PUSH
2857: LD_INT 3
2859: ST_TO_ADDR
// for i := 1 to 4 do
2860: LD_ADDR_VAR 0 2
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_INT 4
2872: PUSH
2873: FOR_TO
2874: IFFALSE 2959
// begin hc_gallery =  ;
2876: LD_ADDR_OWVAR 33
2880: PUSH
2881: LD_STRING 
2883: ST_TO_ADDR
// hc_name =  ;
2884: LD_ADDR_OWVAR 26
2888: PUSH
2889: LD_STRING 
2891: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2892: LD_INT 0
2894: PPUSH
2895: LD_INT 1
2897: PPUSH
2898: LD_EXP 18
2902: PPUSH
2903: LD_EXP 19
2907: PPUSH
2908: CALL_OW 12
2912: PPUSH
2913: CALL_OW 380
// un = CreateHuman ;
2917: LD_ADDR_VAR 0 3
2921: PUSH
2922: CALL_OW 44
2926: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
2927: LD_VAR 0 3
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
2942: LD_VAR 0 3
2946: PPUSH
2947: LD_INT 48
2949: PPUSH
2950: LD_INT 14
2952: PPUSH
2953: CALL_OW 114
// end ;
2957: GO 2873
2959: POP
2960: POP
// firstRussianAttack = 1 ;
2961: LD_ADDR_EXP 22
2965: PUSH
2966: LD_INT 1
2968: ST_TO_ADDR
// end ; end_of_file
2969: LD_VAR 0 1
2973: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2974: LD_INT 0
2976: PPUSH
2977: PPUSH
// if exist_mode then
2978: LD_VAR 0 2
2982: IFFALSE 3001
// begin unit := CreateCharacter ( ident ) ;
2984: LD_ADDR_VAR 0 4
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 34
2998: ST_TO_ADDR
// end else
2999: GO 3016
// begin unit := NewCharacter ( ident ) ;
3001: LD_ADDR_VAR 0 4
3005: PUSH
3006: LD_VAR 0 1
3010: PPUSH
3011: CALL_OW 25
3015: ST_TO_ADDR
// end ; result := unit ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_VAR 0 4
3025: ST_TO_ADDR
// end ;
3026: LD_VAR 0 3
3030: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
3035: PPUSH
3036: PPUSH
// for i = 1 to count do
3037: LD_ADDR_VAR 0 8
3041: PUSH
3042: DOUBLE
3043: LD_INT 1
3045: DEC
3046: ST_TO_ADDR
3047: LD_VAR 0 6
3051: PUSH
3052: FOR_TO
3053: IFFALSE 3134
// begin uc_side = side ;
3055: LD_ADDR_OWVAR 20
3059: PUSH
3060: LD_VAR 0 1
3064: ST_TO_ADDR
// uc_nation = nation ;
3065: LD_ADDR_OWVAR 21
3069: PUSH
3070: LD_VAR 0 2
3074: ST_TO_ADDR
// hc_gallery =  ;
3075: LD_ADDR_OWVAR 33
3079: PUSH
3080: LD_STRING 
3082: ST_TO_ADDR
// hc_name =  ;
3083: LD_ADDR_OWVAR 26
3087: PUSH
3088: LD_STRING 
3090: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3091: LD_INT 0
3093: PPUSH
3094: LD_VAR 0 5
3098: PPUSH
3099: LD_VAR 0 4
3103: PPUSH
3104: CALL_OW 380
// un = CreateHuman ;
3108: LD_ADDR_VAR 0 10
3112: PUSH
3113: CALL_OW 44
3117: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3118: LD_VAR 0 10
3122: PPUSH
3123: LD_VAR 0 3
3127: PPUSH
3128: CALL_OW 52
// end ;
3132: GO 3052
3134: POP
3135: POP
// end ;
3136: LD_VAR 0 7
3140: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3141: LD_INT 0
3143: PPUSH
3144: PPUSH
3145: PPUSH
// uc_side := GetSide ( b ) ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_VAR 0 2
3155: PPUSH
3156: CALL_OW 255
3160: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3161: LD_ADDR_OWVAR 21
3165: PUSH
3166: LD_VAR 0 2
3170: PPUSH
3171: CALL_OW 248
3175: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3176: LD_INT 0
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_VAR 0 1
3186: PPUSH
3187: CALL_OW 380
// un = CreateHuman ;
3191: LD_ADDR_VAR 0 4
3195: PUSH
3196: CALL_OW 44
3200: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3201: LD_ADDR_VAR 0 5
3205: PUSH
3206: LD_VAR 0 2
3210: PPUSH
3211: CALL_OW 254
3215: PUSH
3216: LD_INT 3
3218: MINUS
3219: ST_TO_ADDR
// if dir < 0 then
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 0
3227: LESS
3228: IFFALSE 3244
// dir := 6 + dir ;
3230: LD_ADDR_VAR 0 5
3234: PUSH
3235: LD_INT 6
3237: PUSH
3238: LD_VAR 0 5
3242: PLUS
3243: ST_TO_ADDR
// SetDir ( un , dir ) ;
3244: LD_VAR 0 4
3248: PPUSH
3249: LD_VAR 0 5
3253: PPUSH
3254: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3258: LD_VAR 0 4
3262: PPUSH
3263: LD_VAR 0 2
3267: PPUSH
3268: CALL_OW 52
// end ;
3272: LD_VAR 0 3
3276: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3277: LD_INT 0
3279: PPUSH
3280: PPUSH
3281: PPUSH
// rnd = rand ( 1 , characters ) ;
3282: LD_ADDR_VAR 0 6
3286: PUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 12
3299: ST_TO_ADDR
// for i = 1 to characters do
3300: LD_ADDR_VAR 0 5
3304: PUSH
3305: DOUBLE
3306: LD_INT 1
3308: DEC
3309: ST_TO_ADDR
3310: LD_VAR 0 1
3314: PUSH
3315: FOR_TO
3316: IFFALSE 3426
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3318: LD_VAR 0 5
3322: PUSH
3323: LD_VAR 0 6
3327: EQUAL
3328: PUSH
3329: LD_VAR 0 1
3333: PUSH
3334: LD_VAR 0 5
3338: ARRAY
3339: PPUSH
3340: CALL_OW 258
3344: PUSH
3345: LD_INT 1
3347: EQUAL
3348: AND
3349: IFFALSE 3371
// Say ( characters [ i ] , dialogMID ) ;
3351: LD_VAR 0 1
3355: PUSH
3356: LD_VAR 0 5
3360: ARRAY
3361: PPUSH
3362: LD_VAR 0 2
3366: PPUSH
3367: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3371: LD_VAR 0 5
3375: PUSH
3376: LD_VAR 0 6
3380: EQUAL
3381: PUSH
3382: LD_VAR 0 1
3386: PUSH
3387: LD_VAR 0 5
3391: ARRAY
3392: PPUSH
3393: CALL_OW 258
3397: PUSH
3398: LD_INT 2
3400: EQUAL
3401: AND
3402: IFFALSE 3424
// Say ( characters [ i ] , dialogFID ) ;
3404: LD_VAR 0 1
3408: PUSH
3409: LD_VAR 0 5
3413: ARRAY
3414: PPUSH
3415: LD_VAR 0 3
3419: PPUSH
3420: CALL_OW 88
// end ;
3424: GO 3315
3426: POP
3427: POP
// end ;
3428: LD_VAR 0 4
3432: RET
// export function PrepareDifficulty ; begin
3433: LD_INT 0
3435: PPUSH
// if Difficulty = 1 then
3436: LD_OWVAR 67
3440: PUSH
3441: LD_INT 1
3443: EQUAL
3444: IFFALSE 3462
// begin RuSoldMinLevel = 0 ;
3446: LD_ADDR_EXP 18
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3454: LD_ADDR_EXP 19
3458: PUSH
3459: LD_INT 2
3461: ST_TO_ADDR
// end ; if Difficulty = 2 then
3462: LD_OWVAR 67
3466: PUSH
3467: LD_INT 2
3469: EQUAL
3470: IFFALSE 3508
// begin RuSoldMinLevel = 1 ;
3472: LD_ADDR_EXP 18
3476: PUSH
3477: LD_INT 1
3479: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3480: LD_ADDR_EXP 19
3484: PUSH
3485: LD_INT 2
3487: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
3488: LD_INT 14
3490: PPUSH
3491: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3495: LD_INT 51
3497: PPUSH
3498: LD_INT 3
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 322
// end ; if Difficulty = 3 then
3508: LD_OWVAR 67
3512: PUSH
3513: LD_INT 3
3515: EQUAL
3516: IFFALSE 3584
// begin RuSoldMinLevel = 1 ;
3518: LD_ADDR_EXP 18
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
3526: LD_ADDR_EXP 19
3530: PUSH
3531: LD_INT 3
3533: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
3534: LD_INT 13
3536: PPUSH
3537: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
3541: LD_INT 14
3543: PPUSH
3544: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3548: LD_INT 51
3550: PPUSH
3551: LD_INT 3
3553: PPUSH
3554: LD_INT 1
3556: PPUSH
3557: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
3561: LD_INT 52
3563: PPUSH
3564: LD_INT 3
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
3574: LD_INT 25
3576: PPUSH
3577: LD_INT 44
3579: PPUSH
3580: CALL_OW 431
// end ; end ;
3584: LD_VAR 0 1
3588: RET
// export function EnergyDialog ; begin
3589: LD_INT 0
3591: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
3592: LD_INT 46
3594: PPUSH
3595: LD_INT 1
3597: PPUSH
3598: CALL_OW 321
3602: PUSH
3603: LD_INT 1
3605: EQUAL
3606: PUSH
3607: LD_INT 35
3609: PPUSH
3610: LD_INT 1
3612: PPUSH
3613: CALL_OW 321
3617: PUSH
3618: LD_INT 1
3620: EQUAL
3621: AND
3622: IFFALSE 3646
// begin Say ( JMM , D9c-JMM-1 ) ;
3624: LD_EXP 2
3628: PPUSH
3629: LD_STRING D9c-JMM-1
3631: PPUSH
3632: CALL_OW 88
// energyVDialog = 1 ;
3636: LD_ADDR_EXP 32
3640: PUSH
3641: LD_INT 1
3643: ST_TO_ADDR
// end else
3644: GO 3800
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
3646: LD_INT 35
3648: PPUSH
3649: LD_INT 1
3651: PPUSH
3652: CALL_OW 321
3656: PUSH
3657: LD_INT 2
3659: EQUAL
3660: PUSH
3661: LD_EXP 32
3665: PUSH
3666: LD_INT 0
3668: EQUAL
3669: AND
3670: IFFALSE 3692
// begin Say ( JMM , D9c-JMM-1a ) ;
3672: LD_EXP 2
3676: PPUSH
3677: LD_STRING D9c-JMM-1a
3679: PPUSH
3680: CALL_OW 88
// energyVDialog = 1 ;
3684: LD_ADDR_EXP 32
3688: PUSH
3689: LD_INT 1
3691: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
3692: LD_INT 46
3694: PPUSH
3695: LD_INT 1
3697: PPUSH
3698: CALL_OW 321
3702: PUSH
3703: LD_INT 2
3705: EQUAL
3706: PUSH
3707: LD_EXP 32
3711: PUSH
3712: LD_INT 0
3714: EQUAL
3715: AND
3716: IFFALSE 3738
// begin Say ( JMM , D9c-JMM-1b ) ;
3718: LD_EXP 2
3722: PPUSH
3723: LD_STRING D9c-JMM-1b
3725: PPUSH
3726: CALL_OW 88
// energyVDialog = 1 ;
3730: LD_ADDR_EXP 32
3734: PUSH
3735: LD_INT 1
3737: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
3738: LD_INT 46
3740: PPUSH
3741: LD_INT 1
3743: PPUSH
3744: CALL_OW 321
3748: PUSH
3749: LD_INT 2
3751: EQUAL
3752: PUSH
3753: LD_INT 21
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: CALL_OW 321
3763: PUSH
3764: LD_INT 2
3766: EQUAL
3767: AND
3768: PUSH
3769: LD_EXP 32
3773: PUSH
3774: LD_INT 0
3776: EQUAL
3777: AND
3778: IFFALSE 3800
// begin Say ( JMM , D9c-JMM-1c ) ;
3780: LD_EXP 2
3784: PPUSH
3785: LD_STRING D9c-JMM-1c
3787: PPUSH
3788: CALL_OW 88
// energyVDialog = 1 ;
3792: LD_ADDR_EXP 32
3796: PUSH
3797: LD_INT 1
3799: ST_TO_ADDR
// end ; end ; end ;
3800: LD_VAR 0 1
3804: RET
// export function FinishMission ; var tmp ; begin
3805: LD_INT 0
3807: PPUSH
3808: PPUSH
// if buildOil = 1 and buildPower = 1 then
3809: LD_EXP 33
3813: PUSH
3814: LD_INT 1
3816: EQUAL
3817: PUSH
3818: LD_EXP 34
3822: PUSH
3823: LD_INT 1
3825: EQUAL
3826: AND
3827: IFFALSE 3841
// begin AddMedal ( oil , 1 ) ;
3829: LD_STRING oil
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: CALL_OW 101
// end else
3839: GO 3934
// begin if buildOil = 1 and buildPower = 0 then
3841: LD_EXP 33
3845: PUSH
3846: LD_INT 1
3848: EQUAL
3849: PUSH
3850: LD_EXP 34
3854: PUSH
3855: LD_INT 0
3857: EQUAL
3858: AND
3859: IFFALSE 3872
// AddMedal ( oil , - 1 ) ;
3861: LD_STRING oil
3863: PPUSH
3864: LD_INT 1
3866: NEG
3867: PPUSH
3868: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
3872: LD_EXP 33
3876: PUSH
3877: LD_INT 0
3879: EQUAL
3880: PUSH
3881: LD_EXP 34
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: AND
3890: IFFALSE 3903
// AddMedal ( oil , - 2 ) ;
3892: LD_STRING oil
3894: PPUSH
3895: LD_INT 2
3897: NEG
3898: PPUSH
3899: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
3903: LD_EXP 33
3907: PUSH
3908: LD_INT 0
3910: EQUAL
3911: PUSH
3912: LD_EXP 34
3916: PUSH
3917: LD_INT 0
3919: EQUAL
3920: AND
3921: IFFALSE 3934
// AddMedal ( oil , - 3 ) ;
3923: LD_STRING oil
3925: PPUSH
3926: LD_INT 3
3928: NEG
3929: PPUSH
3930: CALL_OW 101
// end ; if lostCounter < 3 then
3934: LD_EXP 37
3938: PUSH
3939: LD_INT 3
3941: LESS
3942: IFFALSE 3956
// begin AddMedal ( deaths , 1 ) ;
3944: LD_STRING deaths
3946: PPUSH
3947: LD_INT 1
3949: PPUSH
3950: CALL_OW 101
// end else
3954: GO 3967
// begin AddMedal ( deaths , - 1 ) ;
3956: LD_STRING deaths
3958: PPUSH
3959: LD_INT 1
3961: NEG
3962: PPUSH
3963: CALL_OW 101
// end ; if honor = 1 then
3967: LD_EXP 38
3971: PUSH
3972: LD_INT 1
3974: EQUAL
3975: IFFALSE 3989
// begin AddMedal ( honour , 1 ) ;
3977: LD_STRING honour
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: CALL_OW 101
// end else
3987: GO 4000
// begin AddMedal ( honour , - 1 ) ;
3989: LD_STRING honour
3991: PPUSH
3992: LD_INT 1
3994: NEG
3995: PPUSH
3996: CALL_OW 101
// end ; GiveMedals ( Main ) ;
4000: LD_STRING Main
4002: PPUSH
4003: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
4007: LD_INT 22
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: LD_INT 23
4019: PUSH
4020: LD_INT 1
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PUSH
4027: LD_INT 21
4029: PUSH
4030: LD_INT 1
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: PPUSH
4042: CALL_OW 69
4046: PPUSH
4047: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
4051: LD_EXP 2
4055: PPUSH
4056: LD_STRING JMM
4058: PPUSH
4059: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
4063: LD_EXP 3
4067: PPUSH
4068: LD_STRING Bobby
4070: PPUSH
4071: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
4075: LD_EXP 4
4079: PPUSH
4080: LD_STRING Cyrus
4082: PPUSH
4083: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
4087: LD_EXP 5
4091: PPUSH
4092: LD_STRING Lisa
4094: PPUSH
4095: CALL_OW 38
// SaveCharacters ( Brown , Brown ) ;
4099: LD_EXP 7
4103: PPUSH
4104: LD_STRING Brown
4106: PPUSH
4107: CALL_OW 38
// SaveCharacters ( Donaldson , Donaldson ) ;
4111: LD_EXP 13
4115: PPUSH
4116: LD_STRING Donaldson
4118: PPUSH
4119: CALL_OW 38
// SaveCharacters ( Frank , Frank ) ;
4123: LD_EXP 6
4127: PPUSH
4128: LD_STRING Frank
4130: PPUSH
4131: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
4135: LD_INT 50
4137: PUSH
4138: EMPTY
4139: LIST
4140: PUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 21
4153: PUSH
4154: LD_INT 1
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: LIST
4165: PPUSH
4166: CALL_OW 69
4170: PUSH
4171: LD_EXP 2
4175: PUSH
4176: LD_EXP 3
4180: PUSH
4181: LD_EXP 4
4185: PUSH
4186: LD_EXP 5
4190: PUSH
4191: LD_EXP 7
4195: PUSH
4196: LD_EXP 13
4200: PUSH
4201: LD_EXP 6
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: DIFF
4215: PPUSH
4216: LD_STRING 04_other_survivors
4218: PPUSH
4219: CALL_OW 38
// YouWin ;
4223: CALL_OW 103
// end ;
4227: LD_VAR 0 1
4231: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4232: LD_INT 0
4234: PPUSH
4235: PPUSH
4236: PPUSH
4237: PPUSH
// for i = 1 to 72 do
4238: LD_ADDR_VAR 0 5
4242: PUSH
4243: DOUBLE
4244: LD_INT 1
4246: DEC
4247: ST_TO_ADDR
4248: LD_INT 72
4250: PUSH
4251: FOR_TO
4252: IFFALSE 4310
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4254: LD_VAR 0 5
4258: PPUSH
4259: LD_VAR 0 1
4263: PPUSH
4264: CALL_OW 321
4268: PUSH
4269: LD_INT 1
4271: EQUAL
4272: PUSH
4273: LD_VAR 0 5
4277: PPUSH
4278: LD_VAR 0 3
4282: PPUSH
4283: CALL_OW 482
4287: PUSH
4288: LD_INT 1
4290: EQUAL
4291: AND
4292: IFFALSE 4308
// AddComResearch ( lab , i ) ;
4294: LD_VAR 0 2
4298: PPUSH
4299: LD_VAR 0 5
4303: PPUSH
4304: CALL_OW 184
4308: GO 4251
4310: POP
4311: POP
// end ;
4312: LD_VAR 0 4
4316: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4317: LD_INT 0
4319: PPUSH
4320: PPUSH
4321: PPUSH
4322: PPUSH
4323: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4324: LD_ADDR_VAR 0 6
4328: PUSH
4329: LD_INT 22
4331: PUSH
4332: LD_VAR 0 1
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 25
4343: PUSH
4344: LD_INT 2
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: LD_INT 24
4353: PUSH
4354: LD_INT 1000
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: PPUSH
4366: CALL_OW 69
4370: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4371: LD_ADDR_VAR 0 4
4375: PUSH
4376: LD_INT 22
4378: PUSH
4379: LD_VAR 0 1
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 21
4390: PUSH
4391: LD_INT 3
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: LD_INT 24
4403: PUSH
4404: LD_INT 1000
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: EMPTY
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
4428: LD_VAR 0 4
4432: PUSH
4433: LD_INT 0
4435: GREATER
4436: PUSH
4437: LD_VAR 0 6
4441: PUSH
4442: LD_INT 0
4444: GREATER
4445: AND
4446: IFFALSE 4512
// begin for i in engineerOk_list do
4448: LD_ADDR_VAR 0 5
4452: PUSH
4453: LD_VAR 0 6
4457: PUSH
4458: FOR_IN
4459: IFFALSE 4510
// begin for j in buildings_list do
4461: LD_ADDR_VAR 0 7
4465: PUSH
4466: LD_VAR 0 4
4470: PUSH
4471: FOR_IN
4472: IFFALSE 4506
// begin AddComExitBuilding ( i ) ;
4474: LD_VAR 0 5
4478: PPUSH
4479: CALL_OW 182
// wait ( 0 0$1 ) ;
4483: LD_INT 35
4485: PPUSH
4486: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
4490: LD_VAR 0 5
4494: PPUSH
4495: LD_VAR 0 7
4499: PPUSH
4500: CALL_OW 190
// end ;
4504: GO 4471
4506: POP
4507: POP
// end ;
4508: GO 4458
4510: POP
4511: POP
// end ; if buildings_list = 0 then
4512: LD_VAR 0 4
4516: PUSH
4517: LD_INT 0
4519: EQUAL
4520: IFFALSE 4553
// begin for i in engineerOK_list do
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 6
4531: PUSH
4532: FOR_IN
4533: IFFALSE 4551
// begin ComEnterUnit ( i , building ) ;
4535: LD_VAR 0 5
4539: PPUSH
4540: LD_VAR 0 2
4544: PPUSH
4545: CALL_OW 120
// end ;
4549: GO 4532
4551: POP
4552: POP
// end ; end ;
4553: LD_VAR 0 3
4557: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
4558: LD_INT 0
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4565: LD_ADDR_VAR 0 6
4569: PUSH
4570: LD_INT 22
4572: PUSH
4573: LD_VAR 0 1
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 25
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4601: LD_ADDR_VAR 0 9
4605: PUSH
4606: LD_VAR 0 3
4610: PPUSH
4611: LD_INT 22
4613: PUSH
4614: LD_VAR 0 1
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: PUSH
4623: LD_INT 21
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 3
4635: PUSH
4636: LD_INT 24
4638: PUSH
4639: LD_INT 750
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: PPUSH
4655: CALL_OW 70
4659: ST_TO_ADDR
// if damageUnits > 0 then
4660: LD_VAR 0 9
4664: PUSH
4665: LD_INT 0
4667: GREATER
4668: IFFALSE 4818
// begin for i = 1 to damageUnits do
4670: LD_ADDR_VAR 0 7
4674: PUSH
4675: DOUBLE
4676: LD_INT 1
4678: DEC
4679: ST_TO_ADDR
4680: LD_VAR 0 9
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4710
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
4688: LD_VAR 0 9
4692: PUSH
4693: LD_VAR 0 7
4697: ARRAY
4698: PPUSH
4699: LD_VAR 0 2
4703: PPUSH
4704: CALL_OW 113
4708: GO 4685
4710: POP
4711: POP
// for i = 1 to sci_list do
4712: LD_ADDR_VAR 0 7
4716: PUSH
4717: DOUBLE
4718: LD_INT 1
4720: DEC
4721: ST_TO_ADDR
4722: LD_VAR 0 6
4726: PUSH
4727: FOR_TO
4728: IFFALSE 4814
// begin ComExitBuilding ( sci_list [ i ] ) ;
4730: LD_VAR 0 6
4734: PUSH
4735: LD_VAR 0 7
4739: ARRAY
4740: PPUSH
4741: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
4745: LD_ADDR_VAR 0 8
4749: PUSH
4750: LD_VAR 0 2
4754: PPUSH
4755: LD_INT 22
4757: PUSH
4758: LD_VAR 0 1
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 70
4771: PUSH
4772: FOR_IN
4773: IFFALSE 4810
// begin AddComHeal ( sci_list [ i ] , j [ j ] ) ;
4775: LD_VAR 0 6
4779: PUSH
4780: LD_VAR 0 7
4784: ARRAY
4785: PPUSH
4786: LD_VAR 0 8
4790: PUSH
4791: LD_VAR 0 8
4795: ARRAY
4796: PPUSH
4797: CALL_OW 188
// wait ( 1 1$0 ) ;
4801: LD_INT 2100
4803: PPUSH
4804: CALL_OW 67
// end ;
4808: GO 4772
4810: POP
4811: POP
// end ;
4812: GO 4727
4814: POP
4815: POP
// end else
4816: GO 4832
// begin AddComEnterUnit ( sci_list , build ) ;
4818: LD_VAR 0 6
4822: PPUSH
4823: LD_VAR 0 4
4827: PPUSH
4828: CALL_OW 180
// end ; end ;
4832: LD_VAR 0 5
4836: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
4847: LD_INT 22
4849: PUSH
4850: LD_VAR 0 1
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 21
4861: PUSH
4862: LD_INT 2
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: PUSH
4878: LD_VAR 0 3
4882: LESSEQUAL
4883: IFFALSE 4950
// begin for i = 1 to vehCount do
4885: LD_ADDR_VAR 0 10
4889: PUSH
4890: DOUBLE
4891: LD_INT 1
4893: DEC
4894: ST_TO_ADDR
4895: LD_VAR 0 3
4899: PUSH
4900: FOR_TO
4901: IFFALSE 4948
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
4903: LD_VAR 0 2
4907: PPUSH
4908: LD_VAR 0 8
4912: PPUSH
4913: LD_VAR 0 6
4917: PPUSH
4918: LD_VAR 0 7
4922: PPUSH
4923: LD_VAR 0 5
4927: PUSH
4928: LD_INT 1
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: CALL_OW 12
4940: ARRAY
4941: PPUSH
4942: CALL_OW 185
4946: GO 4900
4948: POP
4949: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
4950: LD_INT 22
4952: PUSH
4953: LD_VAR 0 1
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 21
4964: PUSH
4965: LD_INT 2
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 24
4974: PUSH
4975: LD_INT 250
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: PUSH
4992: LD_VAR 0 3
4996: GREATEREQUAL
4997: IFFALSE 5270
// begin repeat begin wait ( 0 0$1 ) ;
4999: LD_INT 35
5001: PPUSH
5002: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5006: LD_ADDR_VAR 0 10
5010: PUSH
5011: LD_INT 22
5013: PUSH
5014: LD_VAR 0 1
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: LD_INT 21
5025: PUSH
5026: LD_INT 2
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PUSH
5033: LD_INT 24
5035: PUSH
5036: LD_INT 651
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: LIST
5047: PPUSH
5048: CALL_OW 69
5052: PUSH
5053: FOR_IN
5054: IFFALSE 5230
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5056: LD_ADDR_VAR 0 15
5060: PUSH
5061: LD_INT 22
5063: PUSH
5064: LD_VAR 0 4
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: PPUSH
5078: LD_VAR 0 10
5082: PPUSH
5083: CALL_OW 74
5087: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5088: LD_ADDR_VAR 0 16
5092: PUSH
5093: LD_INT 22
5095: PUSH
5096: LD_VAR 0 4
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: PUSH
5105: LD_INT 2
5107: PUSH
5108: LD_INT 59
5110: PUSH
5111: EMPTY
5112: LIST
5113: PUSH
5114: LD_INT 21
5116: PUSH
5117: LD_INT 1
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 2
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: PPUSH
5147: CALL_OW 69
5151: PPUSH
5152: LD_VAR 0 10
5156: PPUSH
5157: CALL_OW 74
5161: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5162: LD_VAR 0 10
5166: PPUSH
5167: LD_VAR 0 15
5171: PPUSH
5172: CALL_OW 296
5176: PUSH
5177: LD_INT 8
5179: PLUS
5180: PUSH
5181: LD_VAR 0 10
5185: PPUSH
5186: LD_VAR 0 16
5190: PPUSH
5191: CALL_OW 296
5195: LESS
5196: IFFALSE 5214
// begin ComAttackUnit ( i , target1 ) ;
5198: LD_VAR 0 10
5202: PPUSH
5203: LD_VAR 0 15
5207: PPUSH
5208: CALL_OW 115
// end else
5212: GO 5228
// begin ComAttackUnit ( i , target2 ) ;
5214: LD_VAR 0 10
5218: PPUSH
5219: LD_VAR 0 16
5223: PPUSH
5224: CALL_OW 115
// end ; end ;
5228: GO 5053
5230: POP
5231: POP
// end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
5232: LD_INT 22
5234: PUSH
5235: LD_VAR 0 1
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 21
5246: PUSH
5247: LD_INT 2
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 69
5262: PUSH
5263: LD_VAR 0 3
5267: LESSEQUAL
5268: IFFALSE 4999
// end ; end ;
5270: LD_VAR 0 9
5274: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
5275: LD_INT 0
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// for i = 1 to medicCount do
5288: LD_ADDR_VAR 0 14
5292: PUSH
5293: DOUBLE
5294: LD_INT 1
5296: DEC
5297: ST_TO_ADDR
5298: LD_VAR 0 7
5302: PUSH
5303: FOR_TO
5304: IFFALSE 5386
// begin uc_side = side ;
5306: LD_ADDR_OWVAR 20
5310: PUSH
5311: LD_VAR 0 1
5315: ST_TO_ADDR
// uc_nation = nation ;
5316: LD_ADDR_OWVAR 21
5320: PUSH
5321: LD_VAR 0 2
5325: ST_TO_ADDR
// hc_name =  ;
5326: LD_ADDR_OWVAR 26
5330: PUSH
5331: LD_STRING 
5333: ST_TO_ADDR
// hc_gallery =  ;
5334: LD_ADDR_OWVAR 33
5338: PUSH
5339: LD_STRING 
5341: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5342: LD_INT 0
5344: PPUSH
5345: LD_INT 4
5347: PPUSH
5348: LD_VAR 0 8
5352: PPUSH
5353: CALL_OW 380
// un = CreateHuman ;
5357: LD_ADDR_VAR 0 16
5361: PUSH
5362: CALL_OW 44
5366: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5367: LD_VAR 0 16
5371: PPUSH
5372: LD_VAR 0 9
5376: PPUSH
5377: LD_INT 0
5379: PPUSH
5380: CALL_OW 49
// end ;
5384: GO 5303
5386: POP
5387: POP
// for i = 1 to soldierCount do
5388: LD_ADDR_VAR 0 14
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_VAR 0 3
5402: PUSH
5403: FOR_TO
5404: IFFALSE 5486
// begin uc_side = side ;
5406: LD_ADDR_OWVAR 20
5410: PUSH
5411: LD_VAR 0 1
5415: ST_TO_ADDR
// uc_nation = nation ;
5416: LD_ADDR_OWVAR 21
5420: PUSH
5421: LD_VAR 0 2
5425: ST_TO_ADDR
// hc_name =  ;
5426: LD_ADDR_OWVAR 26
5430: PUSH
5431: LD_STRING 
5433: ST_TO_ADDR
// hc_gallery =  ;
5434: LD_ADDR_OWVAR 33
5438: PUSH
5439: LD_STRING 
5441: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
5442: LD_INT 0
5444: PPUSH
5445: LD_INT 1
5447: PPUSH
5448: LD_VAR 0 8
5452: PPUSH
5453: CALL_OW 380
// un = CreateHuman ;
5457: LD_ADDR_VAR 0 16
5461: PUSH
5462: CALL_OW 44
5466: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5467: LD_VAR 0 16
5471: PPUSH
5472: LD_VAR 0 9
5476: PPUSH
5477: LD_INT 0
5479: PPUSH
5480: CALL_OW 49
// end ;
5484: GO 5403
5486: POP
5487: POP
// for i = 1 to sniperCount do
5488: LD_ADDR_VAR 0 14
5492: PUSH
5493: DOUBLE
5494: LD_INT 1
5496: DEC
5497: ST_TO_ADDR
5498: LD_VAR 0 4
5502: PUSH
5503: FOR_TO
5504: IFFALSE 5586
// begin uc_side = side ;
5506: LD_ADDR_OWVAR 20
5510: PUSH
5511: LD_VAR 0 1
5515: ST_TO_ADDR
// uc_nation = nation ;
5516: LD_ADDR_OWVAR 21
5520: PUSH
5521: LD_VAR 0 2
5525: ST_TO_ADDR
// hc_name =  ;
5526: LD_ADDR_OWVAR 26
5530: PUSH
5531: LD_STRING 
5533: ST_TO_ADDR
// hc_gallery =  ;
5534: LD_ADDR_OWVAR 33
5538: PUSH
5539: LD_STRING 
5541: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
5542: LD_INT 0
5544: PPUSH
5545: LD_INT 5
5547: PPUSH
5548: LD_VAR 0 8
5552: PPUSH
5553: CALL_OW 380
// un = CreateHuman ;
5557: LD_ADDR_VAR 0 16
5561: PUSH
5562: CALL_OW 44
5566: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5567: LD_VAR 0 16
5571: PPUSH
5572: LD_VAR 0 9
5576: PPUSH
5577: LD_INT 0
5579: PPUSH
5580: CALL_OW 49
// end ;
5584: GO 5503
5586: POP
5587: POP
// for i = 1 to bazookCount do
5588: LD_ADDR_VAR 0 14
5592: PUSH
5593: DOUBLE
5594: LD_INT 1
5596: DEC
5597: ST_TO_ADDR
5598: LD_VAR 0 5
5602: PUSH
5603: FOR_TO
5604: IFFALSE 5686
// begin uc_side = side ;
5606: LD_ADDR_OWVAR 20
5610: PUSH
5611: LD_VAR 0 1
5615: ST_TO_ADDR
// uc_nation = nation ;
5616: LD_ADDR_OWVAR 21
5620: PUSH
5621: LD_VAR 0 2
5625: ST_TO_ADDR
// hc_name =  ;
5626: LD_ADDR_OWVAR 26
5630: PUSH
5631: LD_STRING 
5633: ST_TO_ADDR
// hc_gallery =  ;
5634: LD_ADDR_OWVAR 33
5638: PUSH
5639: LD_STRING 
5641: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
5642: LD_INT 0
5644: PPUSH
5645: LD_INT 9
5647: PPUSH
5648: LD_VAR 0 8
5652: PPUSH
5653: CALL_OW 380
// un = CreateHuman ;
5657: LD_ADDR_VAR 0 16
5661: PUSH
5662: CALL_OW 44
5666: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5667: LD_VAR 0 16
5671: PPUSH
5672: LD_VAR 0 9
5676: PPUSH
5677: LD_INT 0
5679: PPUSH
5680: CALL_OW 49
// end ;
5684: GO 5603
5686: POP
5687: POP
// for i = 1 to mortalCount do
5688: LD_ADDR_VAR 0 14
5692: PUSH
5693: DOUBLE
5694: LD_INT 1
5696: DEC
5697: ST_TO_ADDR
5698: LD_VAR 0 6
5702: PUSH
5703: FOR_TO
5704: IFFALSE 5786
// begin uc_side = side ;
5706: LD_ADDR_OWVAR 20
5710: PUSH
5711: LD_VAR 0 1
5715: ST_TO_ADDR
// uc_nation = nation ;
5716: LD_ADDR_OWVAR 21
5720: PUSH
5721: LD_VAR 0 2
5725: ST_TO_ADDR
// hc_name =  ;
5726: LD_ADDR_OWVAR 26
5730: PUSH
5731: LD_STRING 
5733: ST_TO_ADDR
// hc_gallery =  ;
5734: LD_ADDR_OWVAR 33
5738: PUSH
5739: LD_STRING 
5741: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
5742: LD_INT 0
5744: PPUSH
5745: LD_INT 8
5747: PPUSH
5748: LD_VAR 0 8
5752: PPUSH
5753: CALL_OW 380
// un = CreateHuman ;
5757: LD_ADDR_VAR 0 16
5761: PUSH
5762: CALL_OW 44
5766: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5767: LD_VAR 0 16
5771: PPUSH
5772: LD_VAR 0 9
5776: PPUSH
5777: LD_INT 0
5779: PPUSH
5780: CALL_OW 49
// end ;
5784: GO 5703
5786: POP
5787: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
5788: LD_ADDR_VAR 0 19
5792: PUSH
5793: LD_INT 22
5795: PUSH
5796: LD_VAR 0 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 2
5807: PUSH
5808: LD_INT 25
5810: PUSH
5811: LD_INT 1
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 25
5820: PUSH
5821: LD_INT 5
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 25
5830: PUSH
5831: LD_INT 8
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PUSH
5838: LD_INT 25
5840: PUSH
5841: LD_INT 9
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: CALL_OW 69
5863: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5864: LD_ADDR_VAR 0 18
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_VAR 0 1
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 25
5883: PUSH
5884: LD_INT 4
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: ST_TO_ADDR
// for i in medic_list do
5900: LD_ADDR_VAR 0 14
5904: PUSH
5905: LD_VAR 0 18
5909: PUSH
5910: FOR_IN
5911: IFFALSE 5929
// ComMoveToArea ( i , healArea ) ;
5913: LD_VAR 0 14
5917: PPUSH
5918: LD_VAR 0 10
5922: PPUSH
5923: CALL_OW 113
5927: GO 5910
5929: POP
5930: POP
// if strategy = 1 then
5931: LD_VAR 0 12
5935: PUSH
5936: LD_INT 1
5938: EQUAL
5939: IFFALSE 6674
// begin repeat wait ( 0 0$3 ) ;
5941: LD_INT 105
5943: PPUSH
5944: CALL_OW 67
// for i in soldiersOK_list do
5948: LD_ADDR_VAR 0 14
5952: PUSH
5953: LD_VAR 0 19
5957: PUSH
5958: FOR_IN
5959: IFFALSE 6023
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
5961: LD_VAR 0 14
5965: PPUSH
5966: LD_INT 91
5968: PPUSH
5969: LD_INT 63
5971: PPUSH
5972: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
5976: LD_VAR 0 14
5980: PPUSH
5981: LD_INT 101
5983: PPUSH
5984: LD_INT 53
5986: PPUSH
5987: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
5991: LD_VAR 0 14
5995: PPUSH
5996: LD_INT 75
5998: PPUSH
5999: LD_INT 23
6001: PPUSH
6002: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
6006: LD_VAR 0 14
6010: PPUSH
6011: LD_INT 78
6013: PPUSH
6014: LD_INT 8
6016: PPUSH
6017: CALL_OW 174
// end ;
6021: GO 5958
6023: POP
6024: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 0 ;
6025: LD_INT 15
6027: PPUSH
6028: LD_INT 22
6030: PUSH
6031: LD_VAR 0 1
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 70
6044: PUSH
6045: LD_INT 0
6047: GREATER
6048: IFFALSE 5941
// repeat wait ( 0 0$1 ) ;
6050: LD_INT 35
6052: PPUSH
6053: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6057: LD_ADDR_VAR 0 17
6061: PUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 1
6076: PUSH
6077: LD_INT 3
6079: PUSH
6080: LD_INT 24
6082: PUSH
6083: LD_INT 550
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 24
6096: PUSH
6097: LD_INT 250
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 69
6117: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6118: LD_ADDR_VAR 0 19
6122: PUSH
6123: LD_INT 22
6125: PUSH
6126: LD_VAR 0 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 2
6137: PUSH
6138: LD_INT 25
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 25
6150: PUSH
6151: LD_INT 5
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 8
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 25
6170: PUSH
6171: LD_INT 9
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 24
6187: PUSH
6188: LD_INT 1000
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: ST_TO_ADDR
// if medicCount > 0 then
6205: LD_VAR 0 7
6209: PUSH
6210: LD_INT 0
6212: GREATER
6213: IFFALSE 6287
// begin if damageUnit_list > 0 then
6215: LD_VAR 0 17
6219: PUSH
6220: LD_INT 0
6222: GREATER
6223: IFFALSE 6287
// begin for i in damageUnit_list do
6225: LD_ADDR_VAR 0 14
6229: PUSH
6230: LD_VAR 0 17
6234: PUSH
6235: FOR_IN
6236: IFFALSE 6285
// begin ComMoveToArea ( i , healArea ) ;
6238: LD_VAR 0 14
6242: PPUSH
6243: LD_VAR 0 10
6247: PPUSH
6248: CALL_OW 113
// for j in medic_list do
6252: LD_ADDR_VAR 0 15
6256: PUSH
6257: LD_VAR 0 18
6261: PUSH
6262: FOR_IN
6263: IFFALSE 6281
// AddComHeal ( j , i ) ;
6265: LD_VAR 0 15
6269: PPUSH
6270: LD_VAR 0 14
6274: PPUSH
6275: CALL_OW 188
6279: GO 6262
6281: POP
6282: POP
// end ;
6283: GO 6235
6285: POP
6286: POP
// end ; end ; for i in soldiersOK_list do
6287: LD_ADDR_VAR 0 14
6291: PUSH
6292: LD_VAR 0 19
6296: PUSH
6297: FOR_IN
6298: IFFALSE 6474
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6300: LD_ADDR_VAR 0 22
6304: PUSH
6305: LD_INT 22
6307: PUSH
6308: LD_VAR 0 11
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PPUSH
6317: CALL_OW 69
6321: PPUSH
6322: LD_VAR 0 14
6326: PPUSH
6327: CALL_OW 74
6331: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6332: LD_ADDR_VAR 0 23
6336: PUSH
6337: LD_INT 22
6339: PUSH
6340: LD_VAR 0 11
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 59
6354: PUSH
6355: EMPTY
6356: LIST
6357: PUSH
6358: LD_INT 21
6360: PUSH
6361: LD_INT 1
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 21
6370: PUSH
6371: LD_INT 2
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: EMPTY
6389: LIST
6390: PPUSH
6391: CALL_OW 69
6395: PPUSH
6396: LD_VAR 0 14
6400: PPUSH
6401: CALL_OW 74
6405: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6406: LD_VAR 0 14
6410: PPUSH
6411: LD_VAR 0 22
6415: PPUSH
6416: CALL_OW 296
6420: PUSH
6421: LD_INT 8
6423: PLUS
6424: PUSH
6425: LD_VAR 0 14
6429: PPUSH
6430: LD_VAR 0 23
6434: PPUSH
6435: CALL_OW 296
6439: LESS
6440: IFFALSE 6458
// begin ComAttackUnit ( i , target1 ) ;
6442: LD_VAR 0 14
6446: PPUSH
6447: LD_VAR 0 22
6451: PPUSH
6452: CALL_OW 115
// end else
6456: GO 6472
// begin ComAttackUnit ( i , target2 ) ;
6458: LD_VAR 0 14
6462: PPUSH
6463: LD_VAR 0 23
6467: PPUSH
6468: CALL_OW 115
// end ; end ;
6472: GO 6297
6474: POP
6475: POP
// for i in soldiersOK_list do
6476: LD_ADDR_VAR 0 14
6480: PUSH
6481: LD_VAR 0 19
6485: PUSH
6486: FOR_IN
6487: IFFALSE 6663
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6489: LD_ADDR_VAR 0 22
6493: PUSH
6494: LD_INT 22
6496: PUSH
6497: LD_VAR 0 11
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PPUSH
6506: CALL_OW 69
6510: PPUSH
6511: LD_VAR 0 14
6515: PPUSH
6516: CALL_OW 74
6520: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6521: LD_ADDR_VAR 0 23
6525: PUSH
6526: LD_INT 22
6528: PUSH
6529: LD_VAR 0 11
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 2
6540: PUSH
6541: LD_INT 59
6543: PUSH
6544: EMPTY
6545: LIST
6546: PUSH
6547: LD_INT 21
6549: PUSH
6550: LD_INT 1
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 21
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: PPUSH
6580: CALL_OW 69
6584: PPUSH
6585: LD_VAR 0 14
6589: PPUSH
6590: CALL_OW 74
6594: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6595: LD_VAR 0 14
6599: PPUSH
6600: LD_VAR 0 22
6604: PPUSH
6605: CALL_OW 296
6609: PUSH
6610: LD_INT 8
6612: PLUS
6613: PUSH
6614: LD_VAR 0 14
6618: PPUSH
6619: LD_VAR 0 23
6623: PPUSH
6624: CALL_OW 296
6628: LESS
6629: IFFALSE 6647
// begin ComAttackUnit ( i , target1 ) ;
6631: LD_VAR 0 14
6635: PPUSH
6636: LD_VAR 0 22
6640: PPUSH
6641: CALL_OW 115
// end else
6645: GO 6661
// begin ComAttackUnit ( i , target2 ) ;
6647: LD_VAR 0 14
6651: PPUSH
6652: LD_VAR 0 23
6656: PPUSH
6657: CALL_OW 115
// end ; end ;
6661: GO 6486
6663: POP
6664: POP
// until soldiersOK_list = [ ] ;
6665: LD_VAR 0 19
6669: PUSH
6670: EMPTY
6671: EQUAL
6672: IFFALSE 6050
// end ; if strategy = 2 then
6674: LD_VAR 0 12
6678: PUSH
6679: LD_INT 2
6681: EQUAL
6682: IFFALSE 7387
// begin repeat wait ( 0 0$1 ) ;
6684: LD_INT 35
6686: PPUSH
6687: CALL_OW 67
// for i in soldiersOK_list do
6691: LD_ADDR_VAR 0 14
6695: PUSH
6696: LD_VAR 0 19
6700: PUSH
6701: FOR_IN
6702: IFFALSE 6736
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6704: LD_VAR 0 14
6708: PPUSH
6709: LD_INT 91
6711: PPUSH
6712: LD_INT 63
6714: PPUSH
6715: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
6719: LD_VAR 0 14
6723: PPUSH
6724: LD_INT 75
6726: PPUSH
6727: LD_INT 33
6729: PPUSH
6730: CALL_OW 174
// end ;
6734: GO 6701
6736: POP
6737: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 0 ;
6738: LD_INT 16
6740: PPUSH
6741: LD_INT 22
6743: PUSH
6744: LD_VAR 0 1
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PPUSH
6753: CALL_OW 70
6757: PUSH
6758: LD_INT 0
6760: GREATER
6761: IFFALSE 6684
// repeat wait ( 0 0$3 ) ;
6763: LD_INT 105
6765: PPUSH
6766: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6770: LD_ADDR_VAR 0 17
6774: PUSH
6775: LD_INT 22
6777: PUSH
6778: LD_VAR 0 1
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 1
6789: PUSH
6790: LD_INT 3
6792: PUSH
6793: LD_INT 24
6795: PUSH
6796: LD_INT 550
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 24
6809: PUSH
6810: LD_INT 250
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PPUSH
6826: CALL_OW 69
6830: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6831: LD_ADDR_VAR 0 19
6835: PUSH
6836: LD_INT 22
6838: PUSH
6839: LD_VAR 0 1
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 2
6850: PUSH
6851: LD_INT 25
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 25
6863: PUSH
6864: LD_INT 5
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 25
6873: PUSH
6874: LD_INT 8
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 25
6883: PUSH
6884: LD_INT 9
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 24
6900: PUSH
6901: LD_INT 1000
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: PPUSH
6913: CALL_OW 69
6917: ST_TO_ADDR
// if medicCount > 0 then
6918: LD_VAR 0 7
6922: PUSH
6923: LD_INT 0
6925: GREATER
6926: IFFALSE 7000
// begin if damageUnit_list > 0 then
6928: LD_VAR 0 17
6932: PUSH
6933: LD_INT 0
6935: GREATER
6936: IFFALSE 7000
// begin for i in damageUnit_list do
6938: LD_ADDR_VAR 0 14
6942: PUSH
6943: LD_VAR 0 17
6947: PUSH
6948: FOR_IN
6949: IFFALSE 6998
// begin ComMoveToArea ( i , healArea ) ;
6951: LD_VAR 0 14
6955: PPUSH
6956: LD_VAR 0 10
6960: PPUSH
6961: CALL_OW 113
// for j in medic_list do
6965: LD_ADDR_VAR 0 15
6969: PUSH
6970: LD_VAR 0 18
6974: PUSH
6975: FOR_IN
6976: IFFALSE 6994
// AddComHeal ( j , i ) ;
6978: LD_VAR 0 15
6982: PPUSH
6983: LD_VAR 0 14
6987: PPUSH
6988: CALL_OW 188
6992: GO 6975
6994: POP
6995: POP
// end ;
6996: GO 6948
6998: POP
6999: POP
// end ; end ; for i in soldiersOK_list do
7000: LD_ADDR_VAR 0 14
7004: PUSH
7005: LD_VAR 0 19
7009: PUSH
7010: FOR_IN
7011: IFFALSE 7187
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7013: LD_ADDR_VAR 0 22
7017: PUSH
7018: LD_INT 22
7020: PUSH
7021: LD_VAR 0 11
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: PPUSH
7035: LD_VAR 0 14
7039: PPUSH
7040: CALL_OW 74
7044: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7045: LD_ADDR_VAR 0 23
7049: PUSH
7050: LD_INT 22
7052: PUSH
7053: LD_VAR 0 11
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 2
7064: PUSH
7065: LD_INT 59
7067: PUSH
7068: EMPTY
7069: LIST
7070: PUSH
7071: LD_INT 21
7073: PUSH
7074: LD_INT 1
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 21
7083: PUSH
7084: LD_INT 2
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PPUSH
7109: LD_VAR 0 14
7113: PPUSH
7114: CALL_OW 74
7118: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7119: LD_VAR 0 14
7123: PPUSH
7124: LD_VAR 0 22
7128: PPUSH
7129: CALL_OW 296
7133: PUSH
7134: LD_INT 8
7136: PLUS
7137: PUSH
7138: LD_VAR 0 14
7142: PPUSH
7143: LD_VAR 0 23
7147: PPUSH
7148: CALL_OW 296
7152: LESS
7153: IFFALSE 7171
// begin ComAttackUnit ( i , target1 ) ;
7155: LD_VAR 0 14
7159: PPUSH
7160: LD_VAR 0 22
7164: PPUSH
7165: CALL_OW 115
// end else
7169: GO 7185
// begin ComAttackUnit ( i , target2 ) ;
7171: LD_VAR 0 14
7175: PPUSH
7176: LD_VAR 0 23
7180: PPUSH
7181: CALL_OW 115
// end ; end ;
7185: GO 7010
7187: POP
7188: POP
// for i in soldiersOK_list do
7189: LD_ADDR_VAR 0 14
7193: PUSH
7194: LD_VAR 0 19
7198: PUSH
7199: FOR_IN
7200: IFFALSE 7376
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7202: LD_ADDR_VAR 0 22
7206: PUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 11
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: PPUSH
7224: LD_VAR 0 14
7228: PPUSH
7229: CALL_OW 74
7233: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7234: LD_ADDR_VAR 0 23
7238: PUSH
7239: LD_INT 22
7241: PUSH
7242: LD_VAR 0 11
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 59
7256: PUSH
7257: EMPTY
7258: LIST
7259: PUSH
7260: LD_INT 21
7262: PUSH
7263: LD_INT 1
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: LD_INT 21
7272: PUSH
7273: LD_INT 2
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: EMPTY
7291: LIST
7292: PPUSH
7293: CALL_OW 69
7297: PPUSH
7298: LD_VAR 0 14
7302: PPUSH
7303: CALL_OW 74
7307: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7308: LD_VAR 0 14
7312: PPUSH
7313: LD_VAR 0 22
7317: PPUSH
7318: CALL_OW 296
7322: PUSH
7323: LD_INT 8
7325: PLUS
7326: PUSH
7327: LD_VAR 0 14
7331: PPUSH
7332: LD_VAR 0 23
7336: PPUSH
7337: CALL_OW 296
7341: LESS
7342: IFFALSE 7360
// begin ComAttackUnit ( i , target1 ) ;
7344: LD_VAR 0 14
7348: PPUSH
7349: LD_VAR 0 22
7353: PPUSH
7354: CALL_OW 115
// end else
7358: GO 7374
// begin ComAttackUnit ( i , target2 ) ;
7360: LD_VAR 0 14
7364: PPUSH
7365: LD_VAR 0 23
7369: PPUSH
7370: CALL_OW 115
// end ; end ;
7374: GO 7199
7376: POP
7377: POP
// until soldiersOK_list = [ ] ;
7378: LD_VAR 0 19
7382: PUSH
7383: EMPTY
7384: EQUAL
7385: IFFALSE 6763
// end ; end ;
7387: LD_VAR 0 13
7391: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
7392: LD_INT 0
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
7401: PPUSH
7402: PPUSH
7403: PPUSH
7404: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7405: LD_ADDR_VAR 0 9
7409: PUSH
7410: LD_INT 22
7412: PUSH
7413: LD_VAR 0 1
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 21
7424: PUSH
7425: LD_INT 2
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 24
7434: PUSH
7435: LD_INT 660
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 3
7444: PUSH
7445: LD_INT 58
7447: PUSH
7448: EMPTY
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: LD_INT 34
7460: PUSH
7461: LD_INT 53
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7484: LD_ADDR_VAR 0 10
7488: PUSH
7489: LD_INT 22
7491: PUSH
7492: LD_VAR 0 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 21
7503: PUSH
7504: LD_INT 2
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 3
7513: PUSH
7514: LD_INT 24
7516: PUSH
7517: LD_INT 660
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7538: LD_ADDR_VAR 0 11
7542: PUSH
7543: LD_VAR 0 2
7547: PPUSH
7548: LD_INT 22
7550: PUSH
7551: LD_VAR 0 1
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PUSH
7560: LD_INT 21
7562: PUSH
7563: LD_INT 2
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 24
7575: PUSH
7576: LD_INT 1000
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: PPUSH
7592: CALL_OW 70
7596: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7597: LD_ADDR_VAR 0 12
7601: PUSH
7602: LD_VAR 0 2
7606: PPUSH
7607: LD_INT 22
7609: PUSH
7610: LD_VAR 0 1
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 21
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: LD_INT 24
7631: PUSH
7632: LD_INT 1000
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 58
7641: PUSH
7642: EMPTY
7643: LIST
7644: PUSH
7645: LD_INT 3
7647: PUSH
7648: LD_INT 34
7650: PUSH
7651: LD_INT 53
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: PPUSH
7669: CALL_OW 70
7673: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7674: LD_ADDR_VAR 0 13
7678: PUSH
7679: EMPTY
7680: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7681: LD_ADDR_VAR 0 14
7685: PUSH
7686: LD_VAR 0 2
7690: PPUSH
7691: LD_INT 22
7693: PUSH
7694: LD_VAR 0 1
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 25
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PPUSH
7717: CALL_OW 70
7721: ST_TO_ADDR
// if damageVehicle_list > 0 then
7722: LD_VAR 0 10
7726: PUSH
7727: LD_INT 0
7729: GREATER
7730: IFFALSE 7789
// begin for i in damageVehicle_list do
7732: LD_ADDR_VAR 0 7
7736: PUSH
7737: LD_VAR 0 10
7741: PUSH
7742: FOR_IN
7743: IFFALSE 7787
// begin ComMoveXY ( i , repX , repY ) ;
7745: LD_VAR 0 7
7749: PPUSH
7750: LD_VAR 0 3
7754: PPUSH
7755: LD_VAR 0 4
7759: PPUSH
7760: CALL_OW 111
// mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7764: LD_ADDR_VAR 0 13
7768: PUSH
7769: LD_VAR 0 13
7773: PUSH
7774: LD_VAR 0 7
7778: PPUSH
7779: CALL_OW 313
7783: ADD
7784: ST_TO_ADDR
// end ;
7785: GO 7742
7787: POP
7788: POP
// end ; if vehicleNeedRepair_list > 0 then
7789: LD_VAR 0 11
7793: PUSH
7794: LD_INT 0
7796: GREATER
7797: IFFALSE 7863
// begin for i in mechanicInside_list do
7799: LD_ADDR_VAR 0 7
7803: PUSH
7804: LD_VAR 0 13
7808: PUSH
7809: FOR_IN
7810: IFFALSE 7861
// begin for j in vehicleNeedRepair_list do
7812: LD_ADDR_VAR 0 8
7816: PUSH
7817: LD_VAR 0 11
7821: PUSH
7822: FOR_IN
7823: IFFALSE 7857
// begin ComExitVehicle ( i ) ;
7825: LD_VAR 0 7
7829: PPUSH
7830: CALL_OW 121
// wait ( 0 0$1 ) ;
7834: LD_INT 35
7836: PPUSH
7837: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
7841: LD_VAR 0 7
7845: PPUSH
7846: LD_VAR 0 8
7850: PPUSH
7851: CALL_OW 129
// end ;
7855: GO 7822
7857: POP
7858: POP
// end ;
7859: GO 7809
7861: POP
7862: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7863: LD_VAR 0 12
7867: PUSH
7868: LD_INT 0
7870: GREATER
7871: IFFALSE 7895
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7873: LD_VAR 0 14
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: LD_VAR 0 12
7886: PUSH
7887: LD_INT 1
7889: ARRAY
7890: PPUSH
7891: CALL_OW 120
// end ; if vehicleOK_list > 0 then
7895: LD_VAR 0 9
7899: PUSH
7900: LD_INT 0
7902: GREATER
7903: IFFALSE 8094
// begin for i in vehicleOK_list do
7905: LD_ADDR_VAR 0 7
7909: PUSH
7910: LD_VAR 0 9
7914: PUSH
7915: FOR_IN
7916: IFFALSE 8092
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7918: LD_ADDR_VAR 0 15
7922: PUSH
7923: LD_INT 22
7925: PUSH
7926: LD_VAR 0 5
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 69
7939: PPUSH
7940: LD_VAR 0 7
7944: PPUSH
7945: CALL_OW 74
7949: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7950: LD_ADDR_VAR 0 16
7954: PUSH
7955: LD_INT 22
7957: PUSH
7958: LD_VAR 0 5
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 2
7969: PUSH
7970: LD_INT 59
7972: PUSH
7973: EMPTY
7974: LIST
7975: PUSH
7976: LD_INT 21
7978: PUSH
7979: LD_INT 1
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 21
7988: PUSH
7989: LD_INT 2
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: PPUSH
8009: CALL_OW 69
8013: PPUSH
8014: LD_VAR 0 7
8018: PPUSH
8019: CALL_OW 74
8023: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8024: LD_VAR 0 7
8028: PPUSH
8029: LD_VAR 0 15
8033: PPUSH
8034: CALL_OW 296
8038: PUSH
8039: LD_INT 8
8041: PLUS
8042: PUSH
8043: LD_VAR 0 7
8047: PPUSH
8048: LD_VAR 0 16
8052: PPUSH
8053: CALL_OW 296
8057: LESS
8058: IFFALSE 8076
// begin ComAttackUnit ( i , target1 ) ;
8060: LD_VAR 0 7
8064: PPUSH
8065: LD_VAR 0 15
8069: PPUSH
8070: CALL_OW 115
// end else
8074: GO 8090
// begin ComAttackUnit ( i , target2 ) ;
8076: LD_VAR 0 7
8080: PPUSH
8081: LD_VAR 0 16
8085: PPUSH
8086: CALL_OW 115
// end ; end ;
8090: GO 7915
8092: POP
8093: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8094: LD_ADDR_VAR 0 7
8098: PUSH
8099: LD_VAR 0 2
8103: PPUSH
8104: LD_INT 22
8106: PUSH
8107: LD_VAR 0 1
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PUSH
8116: LD_INT 25
8118: PUSH
8119: LD_INT 3
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PPUSH
8130: CALL_OW 70
8134: NOT
8135: PUSH
8136: FOR_IN
8137: IFFALSE 8160
// ComMoveXY ( i , repX , repY ) ;
8139: LD_VAR 0 7
8143: PPUSH
8144: LD_VAR 0 3
8148: PPUSH
8149: LD_VAR 0 4
8153: PPUSH
8154: CALL_OW 111
8158: GO 8136
8160: POP
8161: POP
// end ;
8162: LD_VAR 0 6
8166: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8167: LD_INT 0
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
// amChassisTab = [ ] ;
8180: LD_ADDR_VAR 0 19
8184: PUSH
8185: EMPTY
8186: ST_TO_ADDR
// arChassisTab = [ ] ;
8187: LD_ADDR_VAR 0 18
8191: PUSH
8192: EMPTY
8193: ST_TO_ADDR
// ruChassisTab = [ ] ;
8194: LD_ADDR_VAR 0 17
8198: PUSH
8199: EMPTY
8200: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// if nation = 1 then
8208: LD_VAR 0 5
8212: PUSH
8213: LD_INT 1
8215: EQUAL
8216: IFFALSE 8707
// begin uc_side = side ;
8218: LD_ADDR_OWVAR 20
8222: PUSH
8223: LD_VAR 0 2
8227: ST_TO_ADDR
// uc_nation = nation ;
8228: LD_ADDR_OWVAR 21
8232: PUSH
8233: LD_VAR 0 5
8237: ST_TO_ADDR
// vc_engine = vehengine ;
8238: LD_ADDR_OWVAR 39
8242: PUSH
8243: LD_VAR 0 6
8247: ST_TO_ADDR
// vc_control = vehcontrol ;
8248: LD_ADDR_OWVAR 38
8252: PUSH
8253: LD_VAR 0 7
8257: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8258: LD_ADDR_OWVAR 40
8262: PUSH
8263: LD_VAR 0 10
8267: PUSH
8268: LD_INT 1
8270: PPUSH
8271: LD_VAR 0 10
8275: PPUSH
8276: CALL_OW 12
8280: ARRAY
8281: ST_TO_ADDR
// for j = 1 to AMWeapon do
8282: LD_ADDR_VAR 0 14
8286: PUSH
8287: DOUBLE
8288: LD_INT 1
8290: DEC
8291: ST_TO_ADDR
8292: LD_VAR 0 10
8296: PUSH
8297: FOR_TO
8298: IFFALSE 8599
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8300: LD_VAR 0 10
8304: PUSH
8305: LD_VAR 0 14
8309: ARRAY
8310: PUSH
8311: LD_INT 2
8313: EQUAL
8314: PUSH
8315: LD_VAR 0 10
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PUSH
8326: LD_INT 3
8328: EQUAL
8329: OR
8330: IFFALSE 8383
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8332: LD_ADDR_VAR 0 19
8336: PUSH
8337: LD_INT 1
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: LD_INT 3
8345: PUSH
8346: LD_INT 4
8348: PUSH
8349: LD_INT 5
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8359: LD_ADDR_OWVAR 37
8363: PUSH
8364: LD_VAR 0 19
8368: PUSH
8369: LD_INT 1
8371: PPUSH
8372: LD_VAR 0 19
8376: PPUSH
8377: CALL_OW 12
8381: ARRAY
8382: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8383: LD_VAR 0 10
8387: PUSH
8388: LD_VAR 0 14
8392: ARRAY
8393: PUSH
8394: LD_INT 4
8396: EQUAL
8397: PUSH
8398: LD_VAR 0 10
8402: PUSH
8403: LD_VAR 0 14
8407: ARRAY
8408: PUSH
8409: LD_INT 5
8411: EQUAL
8412: OR
8413: PUSH
8414: LD_VAR 0 10
8418: PUSH
8419: LD_VAR 0 14
8423: ARRAY
8424: PUSH
8425: LD_INT 9
8427: EQUAL
8428: OR
8429: PUSH
8430: LD_VAR 0 10
8434: PUSH
8435: LD_VAR 0 14
8439: ARRAY
8440: PUSH
8441: LD_INT 11
8443: EQUAL
8444: OR
8445: PUSH
8446: LD_VAR 0 10
8450: PUSH
8451: LD_VAR 0 14
8455: ARRAY
8456: PUSH
8457: LD_INT 7
8459: EQUAL
8460: OR
8461: IFFALSE 8510
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8463: LD_ADDR_VAR 0 19
8467: PUSH
8468: LD_INT 2
8470: PUSH
8471: LD_INT 3
8473: PUSH
8474: LD_INT 4
8476: PUSH
8477: LD_INT 5
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8486: LD_ADDR_OWVAR 37
8490: PUSH
8491: LD_VAR 0 19
8495: PUSH
8496: LD_INT 1
8498: PPUSH
8499: LD_VAR 0 19
8503: PPUSH
8504: CALL_OW 12
8508: ARRAY
8509: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8510: LD_VAR 0 10
8514: PUSH
8515: LD_VAR 0 14
8519: ARRAY
8520: PUSH
8521: LD_INT 8
8523: EQUAL
8524: PUSH
8525: LD_VAR 0 10
8529: PUSH
8530: LD_VAR 0 14
8534: ARRAY
8535: PUSH
8536: LD_INT 6
8538: EQUAL
8539: OR
8540: PUSH
8541: LD_VAR 0 10
8545: PUSH
8546: LD_VAR 0 14
8550: ARRAY
8551: PUSH
8552: LD_INT 10
8554: EQUAL
8555: OR
8556: IFFALSE 8597
// begin amChassisTab = [ 4 , 5 ] ;
8558: LD_ADDR_VAR 0 19
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: LD_INT 5
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8573: LD_ADDR_OWVAR 37
8577: PUSH
8578: LD_VAR 0 19
8582: PUSH
8583: LD_INT 1
8585: PPUSH
8586: LD_VAR 0 19
8590: PPUSH
8591: CALL_OW 12
8595: ARRAY
8596: ST_TO_ADDR
// end ; end ;
8597: GO 8297
8599: POP
8600: POP
// veh = CreateVehicle ;
8601: LD_ADDR_VAR 0 16
8605: PUSH
8606: CALL_OW 45
8610: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8611: LD_VAR 0 16
8615: PPUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: LD_INT 0
8623: PPUSH
8624: CALL_OW 49
// if vehControl = 1 then
8628: LD_VAR 0 7
8632: PUSH
8633: LD_INT 1
8635: EQUAL
8636: IFFALSE 8693
// begin hc_gallery =  ;
8638: LD_ADDR_OWVAR 33
8642: PUSH
8643: LD_STRING 
8645: ST_TO_ADDR
// hc_name =  ;
8646: LD_ADDR_OWVAR 26
8650: PUSH
8651: LD_STRING 
8653: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8654: LD_INT 0
8656: PPUSH
8657: LD_INT 3
8659: PPUSH
8660: LD_VAR 0 4
8664: PPUSH
8665: CALL_OW 380
// un = CreateHuman ;
8669: LD_ADDR_VAR 0 15
8673: PUSH
8674: CALL_OW 44
8678: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8679: LD_VAR 0 15
8683: PPUSH
8684: LD_VAR 0 16
8688: PPUSH
8689: CALL_OW 52
// end ; i = i + 1 ;
8693: LD_ADDR_VAR 0 13
8697: PUSH
8698: LD_VAR 0 13
8702: PUSH
8703: LD_INT 1
8705: PLUS
8706: ST_TO_ADDR
// end ; if nation = 2 then
8707: LD_VAR 0 5
8711: PUSH
8712: LD_INT 2
8714: EQUAL
8715: IFFALSE 9139
// begin uc_side = side ;
8717: LD_ADDR_OWVAR 20
8721: PUSH
8722: LD_VAR 0 2
8726: ST_TO_ADDR
// uc_nation = nation ;
8727: LD_ADDR_OWVAR 21
8731: PUSH
8732: LD_VAR 0 5
8736: ST_TO_ADDR
// vc_engine = vehengine ;
8737: LD_ADDR_OWVAR 39
8741: PUSH
8742: LD_VAR 0 6
8746: ST_TO_ADDR
// vc_control = vehcontrol ;
8747: LD_ADDR_OWVAR 38
8751: PUSH
8752: LD_VAR 0 7
8756: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8757: LD_ADDR_OWVAR 40
8761: PUSH
8762: LD_VAR 0 9
8766: PUSH
8767: LD_INT 1
8769: PPUSH
8770: LD_VAR 0 9
8774: PPUSH
8775: CALL_OW 12
8779: ARRAY
8780: ST_TO_ADDR
// for j = 1 to ARWeapons do
8781: LD_ADDR_VAR 0 14
8785: PUSH
8786: DOUBLE
8787: LD_INT 1
8789: DEC
8790: ST_TO_ADDR
8791: LD_VAR 0 9
8795: PUSH
8796: FOR_TO
8797: IFFALSE 9031
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8799: LD_VAR 0 9
8803: PUSH
8804: LD_VAR 0 14
8808: ARRAY
8809: PUSH
8810: LD_INT 24
8812: EQUAL
8813: PUSH
8814: LD_VAR 0 9
8818: PUSH
8819: LD_VAR 0 14
8823: ARRAY
8824: PUSH
8825: LD_INT 22
8827: EQUAL
8828: OR
8829: PUSH
8830: LD_VAR 0 9
8834: PUSH
8835: LD_VAR 0 14
8839: ARRAY
8840: PUSH
8841: LD_INT 23
8843: EQUAL
8844: OR
8845: PUSH
8846: LD_VAR 0 9
8850: PUSH
8851: LD_VAR 0 14
8855: ARRAY
8856: PUSH
8857: LD_INT 30
8859: EQUAL
8860: OR
8861: IFFALSE 8910
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8863: LD_ADDR_VAR 0 18
8867: PUSH
8868: LD_INT 11
8870: PUSH
8871: LD_INT 12
8873: PUSH
8874: LD_INT 13
8876: PUSH
8877: LD_INT 14
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8886: LD_ADDR_OWVAR 37
8890: PUSH
8891: LD_VAR 0 18
8895: PUSH
8896: LD_INT 1
8898: PPUSH
8899: LD_VAR 0 18
8903: PPUSH
8904: CALL_OW 12
8908: ARRAY
8909: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8910: LD_VAR 0 9
8914: PUSH
8915: LD_VAR 0 14
8919: ARRAY
8920: PUSH
8921: LD_INT 29
8923: EQUAL
8924: PUSH
8925: LD_VAR 0 9
8929: PUSH
8930: LD_VAR 0 14
8934: ARRAY
8935: PUSH
8936: LD_INT 28
8938: EQUAL
8939: OR
8940: PUSH
8941: LD_VAR 0 9
8945: PUSH
8946: LD_VAR 0 14
8950: ARRAY
8951: PUSH
8952: LD_INT 27
8954: EQUAL
8955: OR
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: LD_VAR 0 14
8966: ARRAY
8967: PUSH
8968: LD_INT 26
8970: EQUAL
8971: OR
8972: PUSH
8973: LD_VAR 0 9
8977: PUSH
8978: LD_VAR 0 14
8982: ARRAY
8983: PUSH
8984: LD_INT 25
8986: EQUAL
8987: OR
8988: IFFALSE 9029
// begin arChassisTab = [ 13 , 14 ] ;
8990: LD_ADDR_VAR 0 18
8994: PUSH
8995: LD_INT 13
8997: PUSH
8998: LD_INT 14
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9005: LD_ADDR_OWVAR 37
9009: PUSH
9010: LD_VAR 0 18
9014: PUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_VAR 0 18
9022: PPUSH
9023: CALL_OW 12
9027: ARRAY
9028: ST_TO_ADDR
// end ; end ;
9029: GO 8796
9031: POP
9032: POP
// veh = CreateVehicle ;
9033: LD_ADDR_VAR 0 16
9037: PUSH
9038: CALL_OW 45
9042: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9043: LD_VAR 0 16
9047: PPUSH
9048: LD_VAR 0 1
9052: PPUSH
9053: LD_INT 0
9055: PPUSH
9056: CALL_OW 49
// if vehcontrol = 1 then
9060: LD_VAR 0 7
9064: PUSH
9065: LD_INT 1
9067: EQUAL
9068: IFFALSE 9125
// begin hc_gallery =  ;
9070: LD_ADDR_OWVAR 33
9074: PUSH
9075: LD_STRING 
9077: ST_TO_ADDR
// hc_name =  ;
9078: LD_ADDR_OWVAR 26
9082: PUSH
9083: LD_STRING 
9085: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9086: LD_INT 0
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: LD_VAR 0 4
9096: PPUSH
9097: CALL_OW 380
// un = CreateHuman ;
9101: LD_ADDR_VAR 0 15
9105: PUSH
9106: CALL_OW 44
9110: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9111: LD_VAR 0 15
9115: PPUSH
9116: LD_VAR 0 16
9120: PPUSH
9121: CALL_OW 52
// end ; i = i + 1 ;
9125: LD_ADDR_VAR 0 13
9129: PUSH
9130: LD_VAR 0 13
9134: PUSH
9135: LD_INT 1
9137: PLUS
9138: ST_TO_ADDR
// end ; if nation = 3 then
9139: LD_VAR 0 5
9143: PUSH
9144: LD_INT 3
9146: EQUAL
9147: IFFALSE 9539
// begin uc_side = side ;
9149: LD_ADDR_OWVAR 20
9153: PUSH
9154: LD_VAR 0 2
9158: ST_TO_ADDR
// uc_nation = nation ;
9159: LD_ADDR_OWVAR 21
9163: PUSH
9164: LD_VAR 0 5
9168: ST_TO_ADDR
// vc_engine = vehengine ;
9169: LD_ADDR_OWVAR 39
9173: PUSH
9174: LD_VAR 0 6
9178: ST_TO_ADDR
// vc_control = vehcontrol ;
9179: LD_ADDR_OWVAR 38
9183: PUSH
9184: LD_VAR 0 7
9188: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9189: LD_ADDR_OWVAR 40
9193: PUSH
9194: LD_VAR 0 8
9198: PUSH
9199: LD_INT 1
9201: PPUSH
9202: LD_VAR 0 8
9206: PPUSH
9207: CALL_OW 12
9211: ARRAY
9212: ST_TO_ADDR
// for j = 1 to RuWeapons do
9213: LD_ADDR_VAR 0 14
9217: PUSH
9218: DOUBLE
9219: LD_INT 1
9221: DEC
9222: ST_TO_ADDR
9223: LD_VAR 0 8
9227: PUSH
9228: FOR_TO
9229: IFFALSE 9431
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9231: LD_VAR 0 8
9235: PUSH
9236: LD_VAR 0 14
9240: ARRAY
9241: PUSH
9242: LD_INT 42
9244: EQUAL
9245: PUSH
9246: LD_VAR 0 8
9250: PUSH
9251: LD_VAR 0 14
9255: ARRAY
9256: PUSH
9257: LD_INT 43
9259: EQUAL
9260: OR
9261: PUSH
9262: LD_VAR 0 8
9266: PUSH
9267: LD_VAR 0 14
9271: ARRAY
9272: PUSH
9273: LD_INT 44
9275: EQUAL
9276: OR
9277: PUSH
9278: LD_VAR 0 8
9282: PUSH
9283: LD_VAR 0 14
9287: ARRAY
9288: PUSH
9289: LD_INT 45
9291: EQUAL
9292: OR
9293: PUSH
9294: LD_VAR 0 8
9298: PUSH
9299: LD_VAR 0 14
9303: ARRAY
9304: PUSH
9305: LD_INT 49
9307: EQUAL
9308: OR
9309: IFFALSE 9358
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
9311: LD_ADDR_VAR 0 17
9315: PUSH
9316: LD_INT 21
9318: PUSH
9319: LD_INT 22
9321: PUSH
9322: LD_INT 23
9324: PUSH
9325: LD_INT 24
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9334: LD_ADDR_OWVAR 37
9338: PUSH
9339: LD_VAR 0 17
9343: PUSH
9344: LD_INT 1
9346: PPUSH
9347: LD_VAR 0 17
9351: PPUSH
9352: CALL_OW 12
9356: ARRAY
9357: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9358: LD_VAR 0 8
9362: PUSH
9363: LD_VAR 0 14
9367: ARRAY
9368: PUSH
9369: LD_INT 46
9371: EQUAL
9372: PUSH
9373: LD_VAR 0 8
9377: PUSH
9378: LD_VAR 0 14
9382: ARRAY
9383: PUSH
9384: LD_INT 47
9386: EQUAL
9387: OR
9388: IFFALSE 9429
// begin ruChassisTab = [ 23 , 24 ] ;
9390: LD_ADDR_VAR 0 17
9394: PUSH
9395: LD_INT 23
9397: PUSH
9398: LD_INT 24
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9405: LD_ADDR_OWVAR 37
9409: PUSH
9410: LD_VAR 0 17
9414: PUSH
9415: LD_INT 1
9417: PPUSH
9418: LD_VAR 0 17
9422: PPUSH
9423: CALL_OW 12
9427: ARRAY
9428: ST_TO_ADDR
// end ; end ;
9429: GO 9228
9431: POP
9432: POP
// veh = CreateVehicle ;
9433: LD_ADDR_VAR 0 16
9437: PUSH
9438: CALL_OW 45
9442: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9443: LD_VAR 0 16
9447: PPUSH
9448: LD_VAR 0 1
9452: PPUSH
9453: LD_INT 0
9455: PPUSH
9456: CALL_OW 49
// if vehcontrol = 1 then
9460: LD_VAR 0 7
9464: PUSH
9465: LD_INT 1
9467: EQUAL
9468: IFFALSE 9525
// begin hc_gallery =  ;
9470: LD_ADDR_OWVAR 33
9474: PUSH
9475: LD_STRING 
9477: ST_TO_ADDR
// hc_name =  ;
9478: LD_ADDR_OWVAR 26
9482: PUSH
9483: LD_STRING 
9485: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9486: LD_INT 0
9488: PPUSH
9489: LD_INT 3
9491: PPUSH
9492: LD_VAR 0 4
9496: PPUSH
9497: CALL_OW 380
// un = CreateHuman ;
9501: LD_ADDR_VAR 0 15
9505: PUSH
9506: CALL_OW 44
9510: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9511: LD_VAR 0 15
9515: PPUSH
9516: LD_VAR 0 16
9520: PPUSH
9521: CALL_OW 52
// end ; i = i + 1 ;
9525: LD_ADDR_VAR 0 13
9529: PUSH
9530: LD_VAR 0 13
9534: PUSH
9535: LD_INT 1
9537: PLUS
9538: ST_TO_ADDR
// end ; until i = vehCount ;
9539: LD_VAR 0 13
9543: PUSH
9544: LD_VAR 0 3
9548: EQUAL
9549: IFFALSE 8201
// repeat wait ( 0 0$1 ) ;
9551: LD_INT 35
9553: PPUSH
9554: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
9558: LD_ADDR_VAR 0 20
9562: PUSH
9563: LD_INT 22
9565: PUSH
9566: LD_VAR 0 2
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 21
9577: PUSH
9578: LD_INT 2
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: LD_INT 24
9587: PUSH
9588: LD_INT 661
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: LIST
9599: PPUSH
9600: CALL_OW 69
9604: ST_TO_ADDR
// if vehicleOK_list > 0 then
9605: LD_VAR 0 20
9609: PUSH
9610: LD_INT 0
9612: GREATER
9613: IFFALSE 9804
// begin for i in vehicleOK_list do
9615: LD_ADDR_VAR 0 13
9619: PUSH
9620: LD_VAR 0 20
9624: PUSH
9625: FOR_IN
9626: IFFALSE 9802
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9628: LD_ADDR_VAR 0 21
9632: PUSH
9633: LD_INT 22
9635: PUSH
9636: LD_VAR 0 11
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PPUSH
9645: CALL_OW 69
9649: PPUSH
9650: LD_VAR 0 13
9654: PPUSH
9655: CALL_OW 74
9659: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9660: LD_ADDR_VAR 0 22
9664: PUSH
9665: LD_INT 22
9667: PUSH
9668: LD_VAR 0 11
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PUSH
9677: LD_INT 2
9679: PUSH
9680: LD_INT 59
9682: PUSH
9683: EMPTY
9684: LIST
9685: PUSH
9686: LD_INT 21
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: PPUSH
9719: CALL_OW 69
9723: PPUSH
9724: LD_VAR 0 13
9728: PPUSH
9729: CALL_OW 74
9733: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9734: LD_VAR 0 13
9738: PPUSH
9739: LD_VAR 0 21
9743: PPUSH
9744: CALL_OW 296
9748: PUSH
9749: LD_INT 8
9751: PLUS
9752: PUSH
9753: LD_VAR 0 13
9757: PPUSH
9758: LD_VAR 0 22
9762: PPUSH
9763: CALL_OW 296
9767: LESS
9768: IFFALSE 9786
// begin ComAttackUnit ( i , target1 ) ;
9770: LD_VAR 0 13
9774: PPUSH
9775: LD_VAR 0 21
9779: PPUSH
9780: CALL_OW 115
// end else
9784: GO 9800
// begin ComAttackUnit ( i , target2 ) ;
9786: LD_VAR 0 13
9790: PPUSH
9791: LD_VAR 0 22
9795: PPUSH
9796: CALL_OW 115
// end ; end ;
9800: GO 9625
9802: POP
9803: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
9804: LD_INT 22
9806: PUSH
9807: LD_VAR 0 2
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 21
9818: PUSH
9819: LD_INT 2
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PPUSH
9830: CALL_OW 69
9834: PUSH
9835: LD_INT 0
9837: EQUAL
9838: IFFALSE 9551
// end ; end_of_file
9840: LD_VAR 0 12
9844: RET
// every 1 do var i , gammaSquad , startX , startY ;
9845: GO 9847
9847: DISABLE
9848: LD_INT 0
9850: PPUSH
9851: PPUSH
9852: PPUSH
9853: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_EXP 8
9863: PUSH
9864: LD_EXP 9
9868: PUSH
9869: LD_EXP 10
9873: PUSH
9874: LD_EXP 11
9878: PUSH
9879: LD_EXP 12
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
9891: LD_ADDR_VAR 0 3
9895: PUSH
9896: LD_INT 46
9898: PUSH
9899: LD_INT 45
9901: PUSH
9902: LD_INT 44
9904: PUSH
9905: LD_INT 43
9907: PUSH
9908: LD_INT 42
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
9918: LD_ADDR_VAR 0 4
9922: PUSH
9923: LD_INT 14
9925: PUSH
9926: LD_INT 12
9928: PUSH
9929: LD_INT 10
9931: PUSH
9932: LD_INT 8
9934: PUSH
9935: LD_INT 6
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
9945: LD_INT 32
9947: PPUSH
9948: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
9952: LD_INT 32
9954: PPUSH
9955: LD_INT 51
9957: PPUSH
9958: LD_INT 26
9960: PPUSH
9961: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
9965: LD_INT 32
9967: PPUSH
9968: LD_INT 53
9970: PPUSH
9971: LD_INT 23
9973: PPUSH
9974: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
9978: LD_INT 32
9980: PPUSH
9981: LD_INT 52
9983: PPUSH
9984: LD_INT 19
9986: PPUSH
9987: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9991: LD_INT 35
9993: PPUSH
9994: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
9998: LD_INT 32
10000: PPUSH
10001: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10005: LD_INT 32
10007: PPUSH
10008: CALL_OW 250
10012: PUSH
10013: LD_INT 52
10015: EQUAL
10016: PUSH
10017: LD_INT 32
10019: PPUSH
10020: CALL_OW 251
10024: PUSH
10025: LD_INT 19
10027: EQUAL
10028: AND
10029: IFFALSE 9991
// ComExitVehicle ( JMM ) ;
10031: LD_EXP 2
10035: PPUSH
10036: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10040: LD_EXP 7
10044: PPUSH
10045: LD_EXP 2
10049: PPUSH
10050: CALL_OW 119
// wait ( 0 0$01 ) ;
10054: LD_INT 35
10056: PPUSH
10057: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10061: LD_EXP 2
10065: PPUSH
10066: LD_INT 46
10068: PPUSH
10069: LD_INT 10
10071: PPUSH
10072: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10076: LD_EXP 2
10080: PPUSH
10081: LD_EXP 7
10085: PPUSH
10086: CALL_OW 179
// wait ( 0 0$4 ) ;
10090: LD_INT 140
10092: PPUSH
10093: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10097: LD_EXP 2
10101: PPUSH
10102: LD_STRING D1-JMM-1
10104: PPUSH
10105: CALL_OW 88
// for i := 1 to gammaSquad do
10109: LD_ADDR_VAR 0 1
10113: PUSH
10114: DOUBLE
10115: LD_INT 1
10117: DEC
10118: ST_TO_ADDR
10119: LD_VAR 0 2
10123: PUSH
10124: FOR_TO
10125: IFFALSE 10186
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
10127: LD_VAR 0 2
10131: PUSH
10132: LD_VAR 0 1
10136: ARRAY
10137: PPUSH
10138: LD_VAR 0 3
10142: PUSH
10143: LD_VAR 0 1
10147: ARRAY
10148: PPUSH
10149: LD_VAR 0 4
10153: PUSH
10154: LD_VAR 0 1
10158: ARRAY
10159: PPUSH
10160: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
10164: LD_VAR 0 2
10168: PUSH
10169: LD_VAR 0 1
10173: ARRAY
10174: PPUSH
10175: LD_EXP 2
10179: PPUSH
10180: CALL_OW 179
// end ;
10184: GO 10124
10186: POP
10187: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
10188: LD_EXP 5
10192: PPUSH
10193: LD_INT 41
10195: PPUSH
10196: LD_INT 4
10198: PPUSH
10199: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
10203: LD_EXP 5
10207: PPUSH
10208: LD_EXP 2
10212: PPUSH
10213: CALL_OW 179
// Say ( Brown , D1-Brown-1 ) ;
10217: LD_EXP 7
10221: PPUSH
10222: LD_STRING D1-Brown-1
10224: PPUSH
10225: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
10229: LD_EXP 2
10233: PPUSH
10234: LD_STRING D1-JMM-2
10236: PPUSH
10237: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
10241: LD_EXP 7
10245: PPUSH
10246: LD_STRING D1-Brown-2
10248: PPUSH
10249: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
10253: LD_EXP 2
10257: PPUSH
10258: LD_EXP 9
10262: PPUSH
10263: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
10267: LD_EXP 9
10271: PPUSH
10272: LD_STRING D1-FSol1-2
10274: PPUSH
10275: CALL_OW 88
// ComTurnUnit ( JMM , Campell ) ;
10279: LD_EXP 2
10283: PPUSH
10284: LD_EXP 12
10288: PPUSH
10289: CALL_OW 119
// Say ( Campell , D1-Sol2-2 ) ;
10293: LD_EXP 12
10297: PPUSH
10298: LD_STRING D1-Sol2-2
10300: PPUSH
10301: CALL_OW 88
// if Lisa then
10305: LD_EXP 5
10309: IFFALSE 10337
// begin ComTurnUnit ( JMM , Lisa ) ;
10311: LD_EXP 2
10315: PPUSH
10316: LD_EXP 5
10320: PPUSH
10321: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
10325: LD_EXP 5
10329: PPUSH
10330: LD_STRING D1-Lisa-2
10332: PPUSH
10333: CALL_OW 88
// end ; Say ( JMM , D1-JMM-3 ) ;
10337: LD_EXP 2
10341: PPUSH
10342: LD_STRING D1-JMM-3
10344: PPUSH
10345: CALL_OW 88
// ComTurnUnit ( JMM , Brown ) ;
10349: LD_EXP 2
10353: PPUSH
10354: LD_EXP 7
10358: PPUSH
10359: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
10363: LD_EXP 2
10367: PPUSH
10368: LD_STRING D1-JMM-3a
10370: PPUSH
10371: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
10375: LD_EXP 7
10379: PPUSH
10380: LD_INT 38
10382: PPUSH
10383: LD_INT 5
10385: PPUSH
10386: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
10390: LD_EXP 7
10394: PPUSH
10395: LD_EXP 2
10399: PPUSH
10400: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
10404: LD_EXP 2
10408: PPUSH
10409: LD_INT 40
10411: PPUSH
10412: LD_INT 7
10414: PPUSH
10415: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10419: LD_EXP 2
10423: PPUSH
10424: LD_EXP 7
10428: PPUSH
10429: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
10433: LD_EXP 7
10437: PPUSH
10438: LD_STRING D1-Brown-3
10440: PPUSH
10441: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
10445: LD_EXP 16
10449: PPUSH
10450: LD_STRING D1-Har-3
10452: PPUSH
10453: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
10457: LD_EXP 2
10461: PPUSH
10462: LD_STRING D1-JMM-4
10464: PPUSH
10465: CALL_OW 88
// PrepareRussianConvoy ;
10469: CALL 2031 0 0
// SayRadio ( Harisson , D1-Har-4 ) ;
10473: LD_EXP 16
10477: PPUSH
10478: LD_STRING D1-Har-4
10480: PPUSH
10481: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
10485: LD_EXP 2
10489: PPUSH
10490: LD_STRING D1-JMM-5
10492: PPUSH
10493: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
10497: LD_EXP 16
10501: PPUSH
10502: LD_STRING D1-Har-5
10504: PPUSH
10505: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
10509: LD_EXP 2
10513: PPUSH
10514: LD_STRING D1-JMM-6
10516: PPUSH
10517: CALL_OW 88
// InGameOff ;
10521: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10525: LD_STRING M1
10527: PPUSH
10528: CALL_OW 337
// SaveForQuickRestart ;
10532: CALL_OW 22
// timerStatus = 1 ;
10536: LD_ADDR_EXP 28
10540: PUSH
10541: LD_INT 1
10543: ST_TO_ADDR
// startTimer = 1 ;
10544: LD_ADDR_EXP 29
10548: PUSH
10549: LD_INT 1
10551: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10552: LD_INT 105
10554: PPUSH
10555: CALL_OW 67
// DialogueOn ;
10559: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
10563: LD_EXP 12
10567: PPUSH
10568: LD_STRING D9-Mech1-1
10570: PPUSH
10571: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
10575: LD_EXP 2
10579: PPUSH
10580: LD_STRING D9-JMM-1
10582: PPUSH
10583: CALL_OW 88
// DialogueOff ;
10587: CALL_OW 7
// end ;
10591: PPOPN 4
10593: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
10594: LD_INT 47
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 321
10604: PUSH
10605: LD_INT 2
10607: EQUAL
10608: PUSH
10609: LD_INT 22
10611: PUSH
10612: LD_INT 1
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 21
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 30
10631: PUSH
10632: LD_INT 3
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: PPUSH
10644: CALL_OW 69
10648: PUSH
10649: LD_INT 0
10651: GREATER
10652: AND
10653: IFFALSE 10883
10655: GO 10657
10657: DISABLE
// begin if IsOk ( Campell ) then
10658: LD_EXP 12
10662: PPUSH
10663: CALL_OW 302
10667: IFFALSE 10683
// begin Say ( Campell , D10-Mech1-1 ) ;
10669: LD_EXP 12
10673: PPUSH
10674: LD_STRING D10-Mech1-1
10676: PPUSH
10677: CALL_OW 88
// end else
10681: GO 10883
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
10683: LD_INT 22
10685: PUSH
10686: LD_INT 1
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 21
10695: PUSH
10696: LD_INT 1
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 25
10705: PUSH
10706: LD_INT 3
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 26
10715: PUSH
10716: LD_INT 1
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: PUSH
10734: LD_EXP 2
10738: PUSH
10739: EMPTY
10740: LIST
10741: PUSH
10742: LD_INT 0
10744: GREATER
10745: DIFF
10746: IFFALSE 10820
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 21
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 25
10770: PUSH
10771: LD_INT 3
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PPUSH
10794: CALL_OW 69
10798: PUSH
10799: LD_EXP 2
10803: PUSH
10804: EMPTY
10805: LIST
10806: DIFF
10807: PPUSH
10808: LD_STRING D10-Mech1-1
10810: PPUSH
10811: LD_STRING D10-Mech1-1
10813: PPUSH
10814: CALL 3277 0 3
// end else
10818: GO 10883
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
10820: LD_INT 22
10822: PUSH
10823: LD_INT 1
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 21
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 26
10842: PUSH
10843: LD_INT 1
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 1
10857: ARRAY
10858: PPUSH
10859: CALL_OW 69
10863: PUSH
10864: LD_EXP 2
10868: PUSH
10869: EMPTY
10870: LIST
10871: DIFF
10872: PPUSH
10873: LD_STRING D10-Mech1-1
10875: PPUSH
10876: LD_STRING D10-Mech1-1
10878: PPUSH
10879: CALL 3277 0 3
// end ; end ; end ;
10883: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
10884: LD_INT 22
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 30
10896: PUSH
10897: LD_INT 32
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PPUSH
10908: CALL_OW 69
10912: PUSH
10913: LD_INT 0
10915: GREATER
10916: PUSH
10917: LD_EXP 31
10921: PUSH
10922: LD_INT 0
10924: EQUAL
10925: AND
10926: IFFALSE 11174
10928: GO 10930
10930: DISABLE
// begin if IsOK ( Claptopn ) then
10931: LD_EXP 11
10935: PPUSH
10936: CALL_OW 302
10940: IFFALSE 10956
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
10942: LD_EXP 11
10946: PPUSH
10947: LD_STRING D9b-Eng1-1
10949: PPUSH
10950: CALL_OW 88
// end else
10954: GO 11152
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
10956: LD_INT 22
10958: PUSH
10959: LD_INT 1
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: LD_INT 21
10968: PUSH
10969: LD_INT 1
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 25
10978: PUSH
10979: LD_INT 3
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 26
10988: PUSH
10989: LD_INT 1
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: PPUSH
11002: CALL_OW 69
11006: PUSH
11007: LD_EXP 2
11011: PUSH
11012: EMPTY
11013: LIST
11014: PUSH
11015: LD_INT 0
11017: GREATER
11018: DIFF
11019: IFFALSE 11093
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
11021: LD_INT 22
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 21
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 25
11043: PUSH
11044: LD_INT 2
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 26
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 69
11071: PUSH
11072: LD_EXP 2
11076: PUSH
11077: EMPTY
11078: LIST
11079: DIFF
11080: PPUSH
11081: LD_STRING D9b-Eng1-1
11083: PPUSH
11084: LD_STRING D9b-Eng1-11
11086: PPUSH
11087: CALL 3277 0 3
// end else
11091: GO 11152
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
11093: LD_INT 22
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 21
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 26
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: PPUSH
11128: CALL_OW 69
11132: PUSH
11133: LD_EXP 2
11137: PUSH
11138: EMPTY
11139: LIST
11140: DIFF
11141: PPUSH
11142: LD_STRING D9b-Eng1-1
11144: PPUSH
11145: LD_STRING D9b-Eng1-1
11147: PPUSH
11148: CALL 3277 0 3
// end ; end ; if energyVDialog = 0 then
11152: LD_EXP 32
11156: PUSH
11157: LD_INT 0
11159: EQUAL
11160: IFFALSE 11166
// EnergyDialog ;
11162: CALL 3589 0 0
// bunkerDialog = 1 ;
11166: LD_ADDR_EXP 31
11170: PUSH
11171: LD_INT 1
11173: ST_TO_ADDR
// end ;
11174: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
11175: LD_EXP 33
11179: PUSH
11180: LD_INT 1
11182: EQUAL
11183: PUSH
11184: LD_EXP 34
11188: PUSH
11189: LD_INT 1
11191: EQUAL
11192: AND
11193: IFFALSE 11205
11195: GO 11197
11197: DISABLE
// ChangeMissionObjectives ( M1a ) ;
11198: LD_STRING M1a
11200: PPUSH
11201: CALL_OW 337
11205: END
// every 3 3$0 do
11206: GO 11208
11208: DISABLE
// begin PrepareFirstAttack ;
11209: CALL 2839 0 0
// end ;
11213: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
11214: LD_INT 22
11216: PUSH
11217: LD_INT 5
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 21
11226: PUSH
11227: LD_INT 1
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 3
11245: LESSEQUAL
11246: PUSH
11247: LD_EXP 22
11251: PUSH
11252: LD_INT 1
11254: EQUAL
11255: AND
11256: IFFALSE 11574
11258: GO 11260
11260: DISABLE
11261: LD_INT 0
11263: PPUSH
// begin firstRussianAttack = 2 ;
11264: LD_ADDR_EXP 22
11268: PUSH
11269: LD_INT 2
11271: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
11272: LD_ADDR_VAR 0 1
11276: PUSH
11277: LD_INT 22
11279: PUSH
11280: LD_INT 5
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 21
11289: PUSH
11290: LD_INT 1
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PPUSH
11301: CALL_OW 69
11305: PUSH
11306: FOR_IN
11307: IFFALSE 11326
// ComMoveXY ( i , 125 , 98 ) ;
11309: LD_VAR 0 1
11313: PPUSH
11314: LD_INT 125
11316: PPUSH
11317: LD_INT 98
11319: PPUSH
11320: CALL_OW 111
11324: GO 11306
11326: POP
11327: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
11328: LD_INT 22
11330: PUSH
11331: LD_INT 1
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 21
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 69
11356: PUSH
11357: LD_EXP 2
11361: PUSH
11362: LD_EXP 7
11366: PUSH
11367: LD_EXP 5
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: DIFF
11377: PPUSH
11378: LD_STRING DAtt1-Sol1-1
11380: PPUSH
11381: LD_STRING DAtt1-FSol1-1
11383: PPUSH
11384: CALL 3277 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
11388: LD_EXP 2
11392: PPUSH
11393: LD_STRING DAtt1-JMM-1
11395: PPUSH
11396: CALL_OW 88
// if Lisa then
11400: LD_EXP 5
11404: IFFALSE 11420
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
11406: LD_EXP 5
11410: PPUSH
11411: LD_STRING DAtt1a-Lisa-1
11413: PPUSH
11414: CALL_OW 88
// end else
11418: GO 11491
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
11420: LD_INT 22
11422: PUSH
11423: LD_INT 1
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 21
11432: PUSH
11433: LD_INT 1
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 26
11442: PUSH
11443: LD_INT 1
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: PPUSH
11455: CALL_OW 69
11459: PUSH
11460: LD_EXP 2
11464: PUSH
11465: LD_EXP 7
11469: PUSH
11470: LD_EXP 5
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: DIFF
11480: PPUSH
11481: LD_STRING DAtt1a-Sol1-1
11483: PPUSH
11484: LD_STRING DAtt1-FSol1-1
11486: PPUSH
11487: CALL 3277 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
11491: LD_EXP 2
11495: PPUSH
11496: LD_STRING DAtt1a-JMM-1
11498: PPUSH
11499: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
11503: LD_INT 22
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 21
11515: PUSH
11516: LD_INT 1
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 26
11525: PUSH
11526: LD_INT 1
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 69
11542: PUSH
11543: LD_EXP 2
11547: PUSH
11548: LD_EXP 7
11552: PUSH
11553: LD_EXP 5
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: DIFF
11563: PPUSH
11564: LD_STRING DAtt1b-Sol1-1
11566: PPUSH
11567: LD_STRING DAtt1a-Sol1-1
11569: PPUSH
11570: CALL 3277 0 3
// end ;
11574: PPOPN 1
11576: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
11577: LD_EXP 22
11581: PUSH
11582: LD_INT 2
11584: EQUAL
11585: IFFALSE 11647
11587: GO 11589
11589: DISABLE
11590: LD_INT 0
11592: PPUSH
// begin enable ;
11593: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
11594: LD_ADDR_VAR 0 1
11598: PUSH
11599: LD_INT 5
11601: PPUSH
11602: LD_INT 22
11604: PUSH
11605: LD_INT 5
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 21
11614: PUSH
11615: LD_INT 1
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PPUSH
11626: CALL_OW 70
11630: PUSH
11631: FOR_IN
11632: IFFALSE 11645
// RemoveUnit ( i ) ;
11634: LD_VAR 0 1
11638: PPUSH
11639: CALL_OW 64
11643: GO 11631
11645: POP
11646: POP
// end ;
11647: PPOPN 1
11649: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
11650: LD_INT 22
11652: PUSH
11653: LD_INT 5
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: PPUSH
11663: CALL_OW 69
11667: PUSH
11668: LD_INT 0
11670: EQUAL
11671: PUSH
11672: LD_EXP 22
11676: PUSH
11677: LD_INT 2
11679: EQUAL
11680: AND
11681: IFFALSE 11694
11683: GO 11685
11685: DISABLE
// firstRussianAttack = 3 ;
11686: LD_ADDR_EXP 22
11690: PUSH
11691: LD_INT 3
11693: ST_TO_ADDR
11694: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
11695: LD_EXP 27
11699: PUSH
11700: LD_INT 0
11702: EQUAL
11703: IFFALSE 11784
11705: GO 11707
11707: DISABLE
// begin startTimer = 0 ;
11708: LD_ADDR_EXP 29
11712: PUSH
11713: LD_INT 0
11715: ST_TO_ADDR
// timerStatus = 0 ;
11716: LD_ADDR_EXP 28
11720: PUSH
11721: LD_INT 0
11723: ST_TO_ADDR
// SayRadio ( Donaldson , D2-Don-1 ) ;
11724: LD_EXP 13
11728: PPUSH
11729: LD_STRING D2-Don-1
11731: PPUSH
11732: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
11736: LD_EXP 2
11740: PPUSH
11741: LD_STRING D2-JMM-1
11743: PPUSH
11744: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
11748: LD_EXP 13
11752: PPUSH
11753: LD_STRING D2-Don-2
11755: PPUSH
11756: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
11760: LD_EXP 2
11764: PPUSH
11765: LD_STRING D2-JMM-2
11767: PPUSH
11768: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
11772: LD_EXP 13
11776: PPUSH
11777: LD_STRING D2-Don-3
11779: PPUSH
11780: CALL_OW 94
// end ;
11784: END
// every 12 12$0 do var tmp ;
11785: GO 11787
11787: DISABLE
11788: LD_INT 0
11790: PPUSH
// begin PrepareDonaldsonArmy ;
11791: CALL 764 0 0
// CenterNowOnUnits ( Donaldson ) ;
11795: LD_EXP 13
11799: PPUSH
11800: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
11804: LD_ADDR_VAR 0 1
11808: PUSH
11809: LD_INT 22
11811: PUSH
11812: LD_INT 4
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 21
11821: PUSH
11822: LD_INT 1
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 26
11831: PUSH
11832: LD_INT 1
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: PPUSH
11844: CALL_OW 69
11848: PUSH
11849: LD_EXP 6
11853: PUSH
11854: EMPTY
11855: LIST
11856: DIFF
11857: ST_TO_ADDR
// DialogueOn ;
11858: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
11862: LD_VAR 0 1
11866: PPUSH
11867: LD_STRING D3-Sol1-1
11869: PPUSH
11870: LD_STRING D3-Sol1-1
11872: PPUSH
11873: CALL 3277 0 3
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
11877: LD_VAR 0 1
11881: PPUSH
11882: LD_STRING D3-Sol2-1
11884: PPUSH
11885: LD_STRING D3-Sol2-1
11887: PPUSH
11888: CALL 3277 0 3
// if Frank then
11892: LD_EXP 6
11896: IFFALSE 11910
// Say ( Frank , D3-Frank-1 ) ;
11898: LD_EXP 6
11902: PPUSH
11903: LD_STRING D3-Frank-1
11905: PPUSH
11906: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
11910: LD_EXP 13
11914: PPUSH
11915: LD_STRING D3-Don-1
11917: PPUSH
11918: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
11922: LD_EXP 13
11926: PPUSH
11927: LD_STRING D3-Don-1a
11929: PPUSH
11930: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
11934: LD_EXP 2
11938: PPUSH
11939: LD_STRING D3-JMM-1
11941: PPUSH
11942: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
11946: LD_EXP 13
11950: PPUSH
11951: LD_STRING D3-Don-2
11953: PPUSH
11954: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
11958: LD_INT 22
11960: PUSH
11961: LD_INT 6
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 21
11970: PUSH
11971: LD_INT 1
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 69
11986: PUSH
11987: LD_INT 0
11989: GREATER
11990: IFFALSE 12094
// begin Say ( JMM , D3-JMM-2 ) ;
11992: LD_EXP 2
11996: PPUSH
11997: LD_STRING D3-JMM-2
11999: PPUSH
12000: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
12004: LD_EXP 13
12008: PPUSH
12009: LD_STRING D3-Don-3
12011: PPUSH
12012: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
12016: LD_EXP 2
12020: PPUSH
12021: LD_STRING D3-JMM-3
12023: PPUSH
12024: CALL_OW 88
// if Frank then
12028: LD_EXP 6
12032: IFFALSE 12046
// Say ( Frank , D3-Frank-2 ) ;
12034: LD_EXP 6
12038: PPUSH
12039: LD_STRING D3-Frank-2
12041: PPUSH
12042: CALL_OW 88
// DialogueOff ;
12046: CALL_OW 7
// if Frank then
12050: LD_EXP 6
12054: IFFALSE 12092
// begin SetSide ( Frank , 0 ) ;
12056: LD_EXP 6
12060: PPUSH
12061: LD_INT 0
12063: PPUSH
12064: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
12068: LD_EXP 6
12072: PPUSH
12073: LD_INT 12
12075: PPUSH
12076: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
12080: LD_EXP 6
12084: PPUSH
12085: LD_STRING Frank
12087: PPUSH
12088: CALL_OW 38
// end ; end else
12092: GO 12152
// begin Say ( JMM , D3-JMM-4 ) ;
12094: LD_EXP 2
12098: PPUSH
12099: LD_STRING D3-JMM-4
12101: PPUSH
12102: CALL_OW 88
// DialogueOff ;
12106: CALL_OW 7
// if Frank then
12110: LD_EXP 6
12114: IFFALSE 12152
// begin SetSide ( Frank , 0 ) ;
12116: LD_EXP 6
12120: PPUSH
12121: LD_INT 0
12123: PPUSH
12124: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
12128: LD_EXP 6
12132: PPUSH
12133: LD_INT 12
12135: PPUSH
12136: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
12140: LD_EXP 6
12144: PPUSH
12145: LD_STRING Frank
12147: PPUSH
12148: CALL_OW 38
// end ; end ; end ;
12152: PPOPN 1
12154: END
// every 0 0$1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
12155: LD_EXP 6
12159: PPUSH
12160: LD_INT 12
12162: PPUSH
12163: CALL_OW 308
12167: PUSH
12168: LD_EXP 6
12172: PPUSH
12173: CALL_OW 255
12177: PUSH
12178: LD_INT 0
12180: EQUAL
12181: AND
12182: IFFALSE 12204
12184: GO 12186
12186: DISABLE
// begin RemoveUnit ( Frank ) ;
12187: LD_EXP 6
12191: PPUSH
12192: CALL_OW 64
// frankScoutBase = 1 ;
12196: LD_ADDR_EXP 24
12200: PUSH
12201: LD_INT 1
12203: ST_TO_ADDR
// end ;
12204: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
12205: LD_EXP 13
12209: PPUSH
12210: CALL_OW 255
12214: PUSH
12215: LD_INT 4
12217: EQUAL
12218: PUSH
12219: LD_EXP 13
12223: PPUSH
12224: CALL_OW 302
12228: AND
12229: IFFALSE 12254
12231: GO 12233
12233: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
12234: LD_EXP 13
12238: PPUSH
12239: LD_STRING D3b-Don-1
12241: PPUSH
12242: CALL_OW 94
// donaldsonCoopAttack = 1 ;
12246: LD_ADDR_EXP 39
12250: PUSH
12251: LD_INT 1
12253: ST_TO_ADDR
// end ;
12254: END
// every 0 0$1 trigger FilterUnitsInArea ( DonaldsonArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 do
12255: LD_INT 10
12257: PPUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 70
12286: PUSH
12287: LD_INT 0
12289: GREATER
12290: IFFALSE 12339
12292: GO 12294
12294: DISABLE
// begin saveDonaldson = 1 ;
12295: LD_ADDR_EXP 23
12299: PUSH
12300: LD_INT 1
12302: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
12303: LD_INT 22
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 21
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 69
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 235
// end ;
12339: END
// every 2 2$0 trigger saveDonaldson = 1 do
12340: LD_EXP 23
12344: PUSH
12345: LD_INT 1
12347: EQUAL
12348: IFFALSE 12590
12350: GO 12352
12352: DISABLE
// begin uc_side = 4 ;
12353: LD_ADDR_OWVAR 20
12357: PUSH
12358: LD_INT 4
12360: ST_TO_ADDR
// uc_nation = 1 ;
12361: LD_ADDR_OWVAR 21
12365: PUSH
12366: LD_INT 1
12368: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
12369: LD_ADDR_EXP 6
12373: PUSH
12374: LD_STRING Frank
12376: PPUSH
12377: CALL_OW 34
12381: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
12382: LD_EXP 6
12386: PPUSH
12387: LD_INT 13
12389: PPUSH
12390: LD_INT 0
12392: PPUSH
12393: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
12397: LD_INT 35
12399: PPUSH
12400: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
12404: LD_EXP 6
12408: PPUSH
12409: LD_INT 51
12411: PPUSH
12412: LD_INT 15
12414: PPUSH
12415: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
12419: LD_EXP 6
12423: PPUSH
12424: LD_EXP 2
12428: PPUSH
12429: CALL_OW 296
12433: PUSH
12434: LD_INT 6
12436: LESS
12437: IFFALSE 12397
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
12439: LD_EXP 2
12443: PUSH
12444: LD_EXP 6
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 87
// DialogueOn ;
12457: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
12461: LD_EXP 6
12465: PPUSH
12466: LD_STRING D3a-Frank-1
12468: PPUSH
12469: CALL_OW 88
// if Lisa then
12473: LD_EXP 5
12477: IFFALSE 12527
// begin Say ( Lisa , D3a-Lisa-1 ) ;
12479: LD_EXP 5
12483: PPUSH
12484: LD_STRING D3a-Lisa-1
12486: PPUSH
12487: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
12491: LD_EXP 6
12495: PPUSH
12496: LD_STRING D3a-Frank-2
12498: PPUSH
12499: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
12503: LD_EXP 5
12507: PPUSH
12508: LD_STRING D3a-Lisa-2
12510: PPUSH
12511: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
12515: LD_EXP 6
12519: PPUSH
12520: LD_STRING D3a-Frank-3
12522: PPUSH
12523: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
12527: LD_EXP 2
12531: PPUSH
12532: LD_STRING D3a-JMM-3
12534: PPUSH
12535: CALL_OW 88
// DialogueOff ;
12539: CALL_OW 7
// SetSide ( Frank , 1 ) ;
12543: LD_EXP 6
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: CALL_OW 235
// InGameOn ;
12555: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
12559: LD_INT 1
12561: PPUSH
12562: LD_INT 7
12564: PPUSH
12565: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
12569: LD_INT 93
12571: PPUSH
12572: LD_INT 91
12574: PPUSH
12575: CALL_OW 84
// wait ( 0 0$5 ) ;
12579: LD_INT 175
12581: PPUSH
12582: CALL_OW 67
// InGameOff ;
12586: CALL_OW 9
// end ;
12590: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
12591: LD_OWVAR 67
12595: PUSH
12596: LD_INT 2
12598: EQUAL
12599: PUSH
12600: LD_OWVAR 67
12604: PUSH
12605: LD_INT 3
12607: EQUAL
12608: OR
12609: IFFALSE 12633
12611: GO 12613
12613: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
12614: LD_INT 24
12616: PPUSH
12617: LD_INT 24
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: LD_INT 53
12628: PPUSH
12629: CALL_OW 125
12633: END
// every 18 18$0 do
12634: GO 12636
12636: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
12637: LD_EXP 16
12641: PPUSH
12642: LD_STRING D4-Har-1
12644: PPUSH
12645: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
12649: LD_EXP 2
12653: PPUSH
12654: LD_STRING D4-JMM-1
12656: PPUSH
12657: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
12661: LD_EXP 16
12665: PPUSH
12666: LD_STRING D4-Har-2
12668: PPUSH
12669: CALL_OW 94
// case query ( Q1 ) of 1 :
12673: LD_STRING Q1
12675: PPUSH
12676: CALL_OW 97
12680: PUSH
12681: LD_INT 1
12683: DOUBLE
12684: EQUAL
12685: IFTRUE 12689
12687: GO 12748
12689: POP
// begin Say ( JMM , D5-JMM-1 ) ;
12690: LD_EXP 2
12694: PPUSH
12695: LD_STRING D5-JMM-1
12697: PPUSH
12698: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
12702: LD_EXP 16
12706: PPUSH
12707: LD_STRING D5-Har-1
12709: PPUSH
12710: CALL_OW 94
// timeToSupport = 10 10$0 ;
12714: LD_ADDR_EXP 27
12718: PUSH
12719: LD_INT 21000
12721: ST_TO_ADDR
// timerStatus = 2 ;
12722: LD_ADDR_EXP 28
12726: PUSH
12727: LD_INT 2
12729: ST_TO_ADDR
// startTimer = 1 ;
12730: LD_ADDR_EXP 29
12734: PUSH
12735: LD_INT 1
12737: ST_TO_ADDR
// harrAnswer = 1 ;
12738: LD_ADDR_EXP 25
12742: PUSH
12743: LD_INT 1
12745: ST_TO_ADDR
// end ; 2 :
12746: GO 12883
12748: LD_INT 2
12750: DOUBLE
12751: EQUAL
12752: IFTRUE 12756
12754: GO 12815
12756: POP
// begin Say ( JMM , D5-JMM-2 ) ;
12757: LD_EXP 2
12761: PPUSH
12762: LD_STRING D5-JMM-2
12764: PPUSH
12765: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
12769: LD_EXP 16
12773: PPUSH
12774: LD_STRING D5-Har-2
12776: PPUSH
12777: CALL_OW 94
// timeToSupport = 5 5$0 ;
12781: LD_ADDR_EXP 27
12785: PUSH
12786: LD_INT 10500
12788: ST_TO_ADDR
// timerStatus = 2 ;
12789: LD_ADDR_EXP 28
12793: PUSH
12794: LD_INT 2
12796: ST_TO_ADDR
// startTimer = 1 ;
12797: LD_ADDR_EXP 29
12801: PUSH
12802: LD_INT 1
12804: ST_TO_ADDR
// harrAnswer = 2 ;
12805: LD_ADDR_EXP 25
12809: PUSH
12810: LD_INT 2
12812: ST_TO_ADDR
// end ; 3 :
12813: GO 12883
12815: LD_INT 3
12817: DOUBLE
12818: EQUAL
12819: IFTRUE 12823
12821: GO 12882
12823: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12824: LD_EXP 2
12828: PPUSH
12829: LD_STRING D5-JMM-3
12831: PPUSH
12832: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12836: LD_EXP 16
12840: PPUSH
12841: LD_STRING D5-Har-3
12843: PPUSH
12844: CALL_OW 94
// timeToSupport = 5 5$0 ;
12848: LD_ADDR_EXP 27
12852: PUSH
12853: LD_INT 10500
12855: ST_TO_ADDR
// timerStatus = 2 ;
12856: LD_ADDR_EXP 28
12860: PUSH
12861: LD_INT 2
12863: ST_TO_ADDR
// startTimer = 1 ;
12864: LD_ADDR_EXP 29
12868: PUSH
12869: LD_INT 1
12871: ST_TO_ADDR
// harrAnswer = 3 ;
12872: LD_ADDR_EXP 25
12876: PUSH
12877: LD_INT 3
12879: ST_TO_ADDR
// end ; end ;
12880: GO 12883
12882: POP
// end ;
12883: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12884: LD_EXP 28
12888: PUSH
12889: LD_INT 2
12891: EQUAL
12892: PUSH
12893: LD_EXP 27
12897: PUSH
12898: LD_INT 0
12900: EQUAL
12901: AND
12902: IFFALSE 13187
12904: GO 12906
12906: DISABLE
// begin startTimer = 0 ;
12907: LD_ADDR_EXP 29
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// timerStatus = 0 ;
12915: LD_ADDR_EXP 28
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// if harrAnswer = 1 then
12923: LD_EXP 25
12927: PUSH
12928: LD_INT 1
12930: EQUAL
12931: IFFALSE 13011
// begin PrepareHarrisonSupport ( 3 ) ;
12933: LD_INT 3
12935: PPUSH
12936: CALL 1112 0 1
// wait ( 1 1$0 ) ;
12940: LD_INT 2100
12942: PPUSH
12943: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12947: LD_EXP 16
12951: PPUSH
12952: LD_STRING D7-Har-1
12954: PPUSH
12955: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12959: LD_STRING M2
12961: PPUSH
12962: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
12966: LD_ADDR_EXP 26
12970: PUSH
12971: LD_INT 31500
12973: PUSH
12974: LD_INT 10500
12976: PUSH
12977: LD_INT 8400
12979: PUSH
12980: LD_INT 6300
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: PUSH
12988: LD_OWVAR 67
12992: ARRAY
12993: PLUS
12994: ST_TO_ADDR
// startTimer = 1 ;
12995: LD_ADDR_EXP 29
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// timerStatus = 3 ;
13003: LD_ADDR_EXP 28
13007: PUSH
13008: LD_INT 3
13010: ST_TO_ADDR
// end ; if harrAnswer = 2 then
13011: LD_EXP 25
13015: PUSH
13016: LD_INT 2
13018: EQUAL
13019: IFFALSE 13099
// begin PrepareHarrisonSupport ( 4 ) ;
13021: LD_INT 4
13023: PPUSH
13024: CALL 1112 0 1
// wait ( 1 1$0 ) ;
13028: LD_INT 2100
13030: PPUSH
13031: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13035: LD_EXP 16
13039: PPUSH
13040: LD_STRING D7-Har-1
13042: PPUSH
13043: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
13047: LD_STRING M2
13049: PPUSH
13050: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
13054: LD_ADDR_EXP 26
13058: PUSH
13059: LD_INT 27300
13061: PUSH
13062: LD_INT 8400
13064: PUSH
13065: LD_INT 8400
13067: PUSH
13068: LD_INT 6300
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: PUSH
13076: LD_OWVAR 67
13080: ARRAY
13081: PLUS
13082: ST_TO_ADDR
// startTimer = 1 ;
13083: LD_ADDR_EXP 29
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
// timerStatus = 3 ;
13091: LD_ADDR_EXP 28
13095: PUSH
13096: LD_INT 3
13098: ST_TO_ADDR
// end ; if harrAnswer = 3 then
13099: LD_EXP 25
13103: PUSH
13104: LD_INT 3
13106: EQUAL
13107: IFFALSE 13187
// begin PrepareHarrisonSupport ( 5 ) ;
13109: LD_INT 5
13111: PPUSH
13112: CALL 1112 0 1
// wait ( 1 1$0 ) ;
13116: LD_INT 2100
13118: PPUSH
13119: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13123: LD_EXP 16
13127: PPUSH
13128: LD_STRING D7-Har-1
13130: PPUSH
13131: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
13135: LD_STRING M2
13137: PPUSH
13138: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
13142: LD_ADDR_EXP 26
13146: PUSH
13147: LD_INT 21000
13149: PUSH
13150: LD_INT 8400
13152: PUSH
13153: LD_INT 6300
13155: PUSH
13156: LD_INT 4200
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: PUSH
13164: LD_OWVAR 67
13168: ARRAY
13169: PLUS
13170: ST_TO_ADDR
// startTimer = 1 ;
13171: LD_ADDR_EXP 29
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// timerStatus = 3 ;
13179: LD_ADDR_EXP 28
13183: PUSH
13184: LD_INT 3
13186: ST_TO_ADDR
// end ; end ;
13187: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
13188: LD_EXP 26
13192: PUSH
13193: LD_INT 8400
13195: LESSEQUAL
13196: PUSH
13197: LD_EXP 28
13201: PUSH
13202: LD_INT 3
13204: EQUAL
13205: AND
13206: IFFALSE 13238
13208: GO 13210
13210: DISABLE
// begin DialogueOn ;
13211: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
13215: LD_EXP 16
13219: PPUSH
13220: LD_STRING D7a-Har-1
13222: PPUSH
13223: CALL_OW 94
// DialogueOff ;
13227: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
13231: LD_STRING M2a
13233: PPUSH
13234: CALL_OW 337
// end ;
13238: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
13239: LD_EXP 26
13243: PUSH
13244: LD_INT 0
13246: LESSEQUAL
13247: PUSH
13248: LD_EXP 28
13252: PUSH
13253: LD_INT 3
13255: EQUAL
13256: AND
13257: IFFALSE 13374
13259: GO 13261
13261: DISABLE
13262: LD_INT 0
13264: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
13265: LD_ADDR_VAR 0 1
13269: PUSH
13270: LD_INT 22
13272: PUSH
13273: LD_INT 1
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: PUSH
13285: LD_EXP 2
13289: PUSH
13290: EMPTY
13291: LIST
13292: DIFF
13293: ST_TO_ADDR
// DialogueOn ;
13294: CALL_OW 6
// if IsOK ( Donaldson ) then
13298: LD_EXP 13
13302: PPUSH
13303: CALL_OW 302
13307: IFFALSE 13323
// begin SayRadio ( Harisson , D8-Har-1 ) ;
13309: LD_EXP 16
13313: PPUSH
13314: LD_STRING D8-Har-1
13316: PPUSH
13317: CALL_OW 94
// end else
13321: GO 13335
// begin SayRadio ( Harisson , D8-Har-1a ) ;
13323: LD_EXP 16
13327: PPUSH
13328: LD_STRING D8-Har-1a
13330: PPUSH
13331: CALL_OW 94
// end ; DialogueOff ;
13335: CALL_OW 7
// SetSide ( tmp , 4 ) ;
13339: LD_VAR 0 1
13343: PPUSH
13344: LD_INT 4
13346: PPUSH
13347: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_INT 88
13358: PPUSH
13359: LD_INT 89
13361: PPUSH
13362: CALL_OW 114
// honor = 0 ;
13366: LD_ADDR_EXP 38
13370: PUSH
13371: LD_INT 0
13373: ST_TO_ADDR
// end ; end_of_file
13374: PPOPN 1
13376: END
// every 0 0$1 trigger AIEnable = 1 do
13377: LD_EXP 36
13381: PUSH
13382: LD_INT 1
13384: EQUAL
13385: IFFALSE 13513
13387: GO 13389
13389: DISABLE
// begin enable ;
13390: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
13391: LD_INT 3
13393: PPUSH
13394: LD_INT 21
13396: PPUSH
13397: CALL 4317 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
13401: LD_INT 3
13403: PPUSH
13404: LD_INT 8
13406: PPUSH
13407: LD_INT 7
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL 4558 0 4
// if baseReadyToBuild = 2 then
13417: LD_EXP 20
13421: PUSH
13422: LD_INT 2
13424: EQUAL
13425: IFFALSE 13513
// begin RepairBuilding ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] [ 1 ] ) ) ;
13427: LD_INT 6
13429: PPUSH
13430: LD_INT 22
13432: PUSH
13433: LD_INT 6
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 30
13442: PUSH
13443: LD_INT 0
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 1
13456: ARRAY
13457: PPUSH
13458: CALL_OW 69
13462: PPUSH
13463: CALL 4317 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , 6 ] ] [ 1 ] ) ) ;
13467: LD_INT 6
13469: PPUSH
13470: LD_INT 9
13472: PPUSH
13473: LD_INT 6
13475: PPUSH
13476: LD_INT 22
13478: PUSH
13479: LD_INT 6
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 30
13488: PUSH
13489: LD_INT 6
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 1
13502: ARRAY
13503: PPUSH
13504: CALL_OW 69
13508: PPUSH
13509: CALL 4558 0 4
// end ; end ;
13513: END
// every 0 0$01 do
13514: GO 13516
13516: DISABLE
// begin enable ;
13517: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
13518: LD_INT 3
13520: PPUSH
13521: LD_INT 17
13523: PPUSH
13524: LD_INT 111
13526: PPUSH
13527: LD_INT 87
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: CALL 7392 0 5
// end ;
13537: END
// every 0 0$01 do
13538: GO 13540
13540: DISABLE
// begin enable ;
13541: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
13542: LD_INT 5
13544: PPUSH
13545: LD_INT 17
13547: PPUSH
13548: LD_INT 111
13550: PPUSH
13551: LD_INT 87
13553: PPUSH
13554: LD_INT 1
13556: PPUSH
13557: CALL 7392 0 5
// end ;
13561: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
13562: LD_EXP 36
13566: PUSH
13567: LD_INT 1
13569: EQUAL
13570: IFFALSE 13744
13572: GO 13574
13574: DISABLE
// begin enable ;
13575: ENABLE
// if Difficulty = 1 then
13576: LD_OWVAR 67
13580: PUSH
13581: LD_INT 1
13583: EQUAL
13584: IFFALSE 13631
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
13586: LD_INT 3
13588: PPUSH
13589: LD_INT 24
13591: PPUSH
13592: LD_OWVAR 67
13596: PUSH
13597: LD_INT 1
13599: PLUS
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: LD_INT 42
13606: PUSH
13607: LD_INT 42
13609: PUSH
13610: LD_INT 43
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: PPUSH
13618: LD_INT 1
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: LD_INT 21
13626: PPUSH
13627: CALL 4837 0 8
// if Difficulty = 2 then
13631: LD_OWVAR 67
13635: PUSH
13636: LD_INT 2
13638: EQUAL
13639: IFFALSE 13689
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] ) ;
13641: LD_INT 3
13643: PPUSH
13644: LD_INT 24
13646: PPUSH
13647: LD_OWVAR 67
13651: PUSH
13652: LD_INT 1
13654: PLUS
13655: PPUSH
13656: LD_INT 1
13658: PPUSH
13659: LD_INT 42
13661: PUSH
13662: LD_INT 43
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: LD_INT 21
13677: PUSH
13678: LD_INT 22
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL 4837 0 8
// if Difficulty = 3 then
13689: LD_OWVAR 67
13693: PUSH
13694: LD_INT 3
13696: EQUAL
13697: IFFALSE 13744
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
13699: LD_INT 3
13701: PPUSH
13702: LD_INT 24
13704: PPUSH
13705: LD_OWVAR 67
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: LD_INT 43
13715: PUSH
13716: LD_INT 43
13718: PUSH
13719: LD_INT 43
13721: PUSH
13722: LD_INT 44
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: PPUSH
13731: LD_INT 1
13733: PPUSH
13734: LD_INT 1
13736: PPUSH
13737: LD_INT 22
13739: PPUSH
13740: CALL 4837 0 8
// end ;
13744: END
// every 0 0$1 do
13745: GO 13747
13747: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13748: LD_INT 3
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: LD_INT 3
13756: PPUSH
13757: CALL 4232 0 3
13761: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13762: LD_EXP 20
13766: PUSH
13767: LD_INT 1
13769: EQUAL
13770: IFFALSE 13891
13772: GO 13774
13774: DISABLE
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13779: LD_ADDR_VAR 0 2
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: LD_INT 6
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 21
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 34
13806: PUSH
13807: LD_INT 51
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: PPUSH
13819: CALL_OW 69
13823: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13824: LD_VAR 0 2
13828: PUSH
13829: LD_INT 1
13831: ARRAY
13832: PPUSH
13833: LD_EXP 21
13837: PPUSH
13838: CALL_OW 250
13842: PUSH
13843: LD_INT 5
13845: MINUS
13846: PPUSH
13847: LD_EXP 21
13851: PPUSH
13852: CALL_OW 251
13856: PUSH
13857: LD_INT 5
13859: MINUS
13860: PPUSH
13861: CALL_OW 111
// wait ( 0 0$5 ) ;
13865: LD_INT 175
13867: PPUSH
13868: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13872: LD_VAR 0 2
13876: PUSH
13877: LD_INT 1
13879: ARRAY
13880: PPUSH
13881: LD_INT 41
13883: PPUSH
13884: LD_INT 52
13886: PPUSH
13887: CALL_OW 177
// end ;
13891: PPOPN 2
13893: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13894: LD_EXP 21
13898: PPUSH
13899: CALL_OW 274
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: CALL_OW 275
13911: PUSH
13912: LD_INT 100
13914: GREATEREQUAL
13915: IFFALSE 14143
13917: GO 13919
13919: DISABLE
13920: LD_INT 0
13922: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13923: LD_ADDR_VAR 0 1
13927: PUSH
13928: LD_INT 22
13930: PUSH
13931: LD_INT 6
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 21
13940: PUSH
13941: LD_INT 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 25
13950: PUSH
13951: LD_INT 2
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: PPUSH
13963: CALL_OW 69
13967: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13968: LD_VAR 0 1
13972: PUSH
13973: LD_INT 1
13975: ARRAY
13976: PPUSH
13977: LD_INT 4
13979: PPUSH
13980: LD_INT 39
13982: PPUSH
13983: LD_INT 37
13985: PPUSH
13986: LD_INT 3
13988: PPUSH
13989: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13993: LD_VAR 0 1
13997: PUSH
13998: LD_INT 1
14000: ARRAY
14001: PPUSH
14002: LD_INT 29
14004: PPUSH
14005: LD_INT 42
14007: PPUSH
14008: LD_INT 54
14010: PPUSH
14011: LD_INT 3
14013: PPUSH
14014: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
14018: LD_VAR 0 1
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: LD_INT 6
14029: PPUSH
14030: LD_INT 38
14032: PPUSH
14033: LD_INT 48
14035: PPUSH
14036: LD_INT 0
14038: PPUSH
14039: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
14043: LD_VAR 0 1
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: PPUSH
14052: LD_INT 2
14054: PPUSH
14055: LD_INT 32
14057: PPUSH
14058: LD_INT 38
14060: PPUSH
14061: LD_INT 2
14063: PPUSH
14064: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
14068: LD_VAR 0 1
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: PPUSH
14077: LD_INT 26
14079: PPUSH
14080: LD_INT 39
14082: PPUSH
14083: LD_INT 55
14085: PPUSH
14086: LD_INT 3
14088: PPUSH
14089: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
14093: LD_VAR 0 1
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: PPUSH
14102: LD_INT 32
14104: PPUSH
14105: LD_INT 31
14107: PPUSH
14108: LD_INT 31
14110: PPUSH
14111: LD_INT 3
14113: PPUSH
14114: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
14118: LD_VAR 0 1
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: LD_INT 31
14129: PPUSH
14130: LD_INT 50
14132: PPUSH
14133: LD_INT 51
14135: PPUSH
14136: LD_INT 4
14138: PPUSH
14139: CALL_OW 205
// end ; end_of_file
14143: PPOPN 1
14145: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14146: LD_INT 0
14148: PPUSH
14149: PPUSH
14150: PPUSH
14151: PPUSH
14152: PPUSH
14153: PPUSH
14154: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14155: LD_ADDR_VAR 0 3
14159: PUSH
14160: LD_INT 22
14162: PUSH
14163: LD_INT 6
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 21
14172: PUSH
14173: LD_INT 1
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 25
14182: PUSH
14183: LD_INT 1
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 3
14192: PUSH
14193: LD_INT 54
14195: PUSH
14196: EMPTY
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: PPUSH
14209: CALL_OW 69
14213: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14214: LD_ADDR_VAR 0 7
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_INT 6
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 25
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 54
14251: PUSH
14252: EMPTY
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14266: LD_ADDR_VAR 0 4
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 6
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: LD_INT 21
14283: PUSH
14284: LD_INT 1
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 25
14293: PUSH
14294: LD_INT 2
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 69
14310: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14311: LD_ADDR_VAR 0 6
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_INT 6
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 21
14328: PUSH
14329: LD_INT 1
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 25
14338: PUSH
14339: LD_INT 4
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PPUSH
14351: CALL_OW 69
14355: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14356: LD_ADDR_VAR 0 8
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_INT 6
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 21
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 34
14383: PUSH
14384: LD_INT 51
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 69
14400: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 255
14410: PUSH
14411: LD_INT 6
14413: EQUAL
14414: PUSH
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 266
14424: PUSH
14425: LD_INT 0
14427: EQUAL
14428: AND
14429: IFFALSE 14449
// begin building = ruPDepot ;
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_EXP 21
14440: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14441: LD_ADDR_EXP 20
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14449: LD_VAR 0 1
14453: PPUSH
14454: CALL_OW 266
14458: PUSH
14459: LD_INT 4
14461: EQUAL
14462: PUSH
14463: LD_VAR 0 1
14467: PPUSH
14468: CALL_OW 255
14472: PUSH
14473: LD_INT 6
14475: EQUAL
14476: AND
14477: IFFALSE 14510
// for i in tmpSold do
14479: LD_ADDR_VAR 0 2
14483: PUSH
14484: LD_VAR 0 3
14488: PUSH
14489: FOR_IN
14490: IFFALSE 14508
// ComEnterUnit ( i , building ) ;
14492: LD_VAR 0 2
14496: PPUSH
14497: LD_VAR 0 1
14501: PPUSH
14502: CALL_OW 120
14506: GO 14489
14508: POP
14509: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL_OW 266
14519: PUSH
14520: LD_INT 6
14522: EQUAL
14523: PUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 255
14533: PUSH
14534: LD_INT 6
14536: EQUAL
14537: AND
14538: IFFALSE 14586
// begin for i in tmpSci do
14540: LD_ADDR_VAR 0 2
14544: PUSH
14545: LD_VAR 0 6
14549: PUSH
14550: FOR_IN
14551: IFFALSE 14569
// ComEnterUnit ( i , building ) ;
14553: LD_VAR 0 2
14557: PPUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 120
14567: GO 14550
14569: POP
14570: POP
// ResAllTechs ( 6 , building , 3 ) ;
14571: LD_INT 6
14573: PPUSH
14574: LD_VAR 0 1
14578: PPUSH
14579: LD_INT 3
14581: PPUSH
14582: CALL 4232 0 3
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14586: LD_VAR 0 1
14590: PPUSH
14591: CALL_OW 266
14595: PUSH
14596: LD_INT 2
14598: EQUAL
14599: PUSH
14600: LD_VAR 0 1
14604: PPUSH
14605: CALL_OW 255
14609: PUSH
14610: LD_INT 6
14612: EQUAL
14613: AND
14614: IFFALSE 14665
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14616: LD_ADDR_VAR 0 5
14620: PUSH
14621: LD_VAR 0 8
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PPUSH
14630: CALL_OW 313
14634: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14635: LD_VAR 0 5
14639: PPUSH
14640: CALL_OW 121
// wait ( 0 0$1 ) ;
14644: LD_INT 35
14646: PPUSH
14647: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14651: LD_VAR 0 5
14655: PPUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 266
14674: PUSH
14675: LD_INT 32
14677: EQUAL
14678: PUSH
14679: LD_VAR 0 1
14683: PPUSH
14684: CALL_OW 255
14688: PUSH
14689: LD_INT 6
14691: EQUAL
14692: AND
14693: IFFALSE 14745
// begin ComPlaceWeapon ( building , 42 ) ;
14695: LD_VAR 0 1
14699: PPUSH
14700: LD_INT 42
14702: PPUSH
14703: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14707: LD_VAR 0 7
14711: PUSH
14712: LD_INT 1
14714: ARRAY
14715: PPUSH
14716: CALL_OW 122
// wait ( 0 0$1 ) ;
14720: LD_INT 35
14722: PPUSH
14723: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14727: LD_VAR 0 7
14731: PUSH
14732: LD_INT 1
14734: ARRAY
14735: PPUSH
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 266
14754: PUSH
14755: LD_INT 31
14757: EQUAL
14758: PUSH
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 255
14768: PUSH
14769: LD_INT 6
14771: EQUAL
14772: AND
14773: IFFALSE 14839
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14775: LD_VAR 0 7
14779: PUSH
14780: LD_INT 2
14782: ARRAY
14783: PPUSH
14784: CALL_OW 122
// wait ( 0 0$1 ) ;
14788: LD_INT 35
14790: PPUSH
14791: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14795: LD_VAR 0 7
14799: PUSH
14800: LD_INT 2
14802: ARRAY
14803: PPUSH
14804: LD_VAR 0 1
14808: PPUSH
14809: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14813: LD_VAR 0 4
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: LD_EXP 21
14826: PPUSH
14827: CALL_OW 120
// baseReadyToBuild = 2 ;
14831: LD_ADDR_EXP 20
14835: PUSH
14836: LD_INT 2
14838: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14839: LD_VAR 0 1
14843: PPUSH
14844: CALL_OW 266
14848: PUSH
14849: LD_INT 32
14851: EQUAL
14852: PUSH
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 255
14862: PUSH
14863: LD_INT 1
14865: EQUAL
14866: AND
14867: PUSH
14868: LD_EXP 31
14872: PUSH
14873: LD_INT 0
14875: EQUAL
14876: AND
14877: IFFALSE 15170
// begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and bunkerDialog = 0 then
14879: LD_VAR 0 1
14883: PPUSH
14884: CALL_OW 266
14888: PUSH
14889: LD_INT 3
14891: EQUAL
14892: PUSH
14893: LD_VAR 0 1
14897: PPUSH
14898: CALL_OW 255
14902: PUSH
14903: LD_INT 1
14905: EQUAL
14906: AND
14907: PUSH
14908: LD_EXP 31
14912: PUSH
14913: LD_INT 0
14915: EQUAL
14916: AND
14917: IFFALSE 15148
// begin bunkerDialog = 1 ;
14919: LD_ADDR_EXP 31
14923: PUSH
14924: LD_INT 1
14926: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14927: LD_EXP 11
14931: PPUSH
14932: CALL_OW 302
14936: IFFALSE 14952
// begin Say ( Claptopn , D11-Eng1-1 ) ;
14938: LD_EXP 11
14942: PPUSH
14943: LD_STRING D11-Eng1-1
14945: PPUSH
14946: CALL_OW 88
// end else
14950: GO 15148
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14952: LD_INT 22
14954: PUSH
14955: LD_INT 1
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 21
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 25
14974: PUSH
14975: LD_INT 3
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 26
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: PPUSH
14998: CALL_OW 69
15002: PUSH
15003: LD_EXP 2
15007: PUSH
15008: EMPTY
15009: LIST
15010: PUSH
15011: LD_INT 0
15013: GREATER
15014: DIFF
15015: IFFALSE 15089
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15017: LD_INT 22
15019: PUSH
15020: LD_INT 1
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 21
15029: PUSH
15030: LD_INT 1
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 25
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 26
15049: PUSH
15050: LD_INT 1
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 69
15067: PUSH
15068: LD_EXP 2
15072: PUSH
15073: EMPTY
15074: LIST
15075: DIFF
15076: PPUSH
15077: LD_STRING D11-Eng1-1
15079: PPUSH
15080: LD_STRING D11-Eng1-1
15082: PPUSH
15083: CALL 3277 0 3
// end else
15087: GO 15148
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15089: LD_INT 22
15091: PUSH
15092: LD_INT 1
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 21
15101: PUSH
15102: LD_INT 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 26
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: PPUSH
15124: CALL_OW 69
15128: PUSH
15129: LD_EXP 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: DIFF
15137: PPUSH
15138: LD_STRING D11-Eng1-1
15140: PPUSH
15141: LD_STRING D11-Eng1-1
15143: PPUSH
15144: CALL 3277 0 3
// end ; end ; end ; if energyVDialog = 0 then
15148: LD_EXP 32
15152: PUSH
15153: LD_INT 0
15155: EQUAL
15156: IFFALSE 15162
// EnergyDialog ;
15158: CALL 3589 0 0
// bunkerDialog = 1 ;
15162: LD_ADDR_EXP 31
15166: PUSH
15167: LD_INT 1
15169: ST_TO_ADDR
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 266
15179: PUSH
15180: LD_INT 29
15182: EQUAL
15183: PUSH
15184: LD_VAR 0 1
15188: PPUSH
15189: CALL_OW 255
15193: PUSH
15194: LD_INT 1
15196: EQUAL
15197: AND
15198: IFFALSE 15208
// buildOil = 1 ;
15200: LD_ADDR_EXP 33
15204: PUSH
15205: LD_INT 1
15207: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15208: LD_VAR 0 1
15212: PPUSH
15213: CALL_OW 266
15217: PUSH
15218: LD_INT 26
15220: EQUAL
15221: PUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 255
15231: PUSH
15232: LD_INT 1
15234: EQUAL
15235: AND
15236: IFFALSE 15246
// buildPower = 1 ;
15238: LD_ADDR_EXP 34
15242: PUSH
15243: LD_INT 1
15245: ST_TO_ADDR
// end ;
15246: PPOPN 8
15248: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15249: LD_VAR 0 1
15253: PPUSH
15254: CALL_OW 266
15258: PUSH
15259: LD_INT 3
15261: EQUAL
15262: PUSH
15263: LD_VAR 0 1
15267: PPUSH
15268: CALL_OW 255
15272: PUSH
15273: LD_INT 1
15275: EQUAL
15276: AND
15277: PUSH
15278: LD_EXP 30
15282: PUSH
15283: LD_INT 0
15285: EQUAL
15286: AND
15287: IFFALSE 15603
// begin factoryDialog = 1 ;
15289: LD_ADDR_EXP 30
15293: PUSH
15294: LD_INT 1
15296: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15297: LD_INT 22
15299: PUSH
15300: LD_INT 1
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 21
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 30
15319: PUSH
15320: LD_INT 3
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 24
15329: PUSH
15330: LD_INT 1000
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: PPUSH
15343: CALL_OW 69
15347: PUSH
15348: LD_INT 1
15350: ARRAY
15351: PPUSH
15352: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15356: LD_EXP 2
15360: PPUSH
15361: LD_STRING D9a-JMM-1
15363: PPUSH
15364: CALL_OW 88
// if IsOK ( Campell ) then
15368: LD_EXP 12
15372: PPUSH
15373: CALL_OW 302
15377: IFFALSE 15393
// begin Say ( Campell , D9a-Mech1-1 ) ;
15379: LD_EXP 12
15383: PPUSH
15384: LD_STRING D9a-Mech1-1
15386: PPUSH
15387: CALL_OW 88
// end else
15391: GO 15589
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15393: LD_INT 22
15395: PUSH
15396: LD_INT 1
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 21
15405: PUSH
15406: LD_INT 1
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 25
15415: PUSH
15416: LD_INT 3
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 26
15425: PUSH
15426: LD_INT 1
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PPUSH
15439: CALL_OW 69
15443: PUSH
15444: LD_EXP 2
15448: PUSH
15449: EMPTY
15450: LIST
15451: PUSH
15452: LD_INT 0
15454: GREATER
15455: DIFF
15456: IFFALSE 15530
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15458: LD_INT 22
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 21
15470: PUSH
15471: LD_INT 1
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 25
15480: PUSH
15481: LD_INT 3
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 26
15490: PUSH
15491: LD_INT 1
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: PUSH
15509: LD_EXP 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: DIFF
15517: PPUSH
15518: LD_STRING D9a-Mech1-1
15520: PPUSH
15521: LD_STRING D9a-Mech1-1
15523: PPUSH
15524: CALL 3277 0 3
// end else
15528: GO 15589
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15530: LD_INT 22
15532: PUSH
15533: LD_INT 1
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: LD_INT 21
15542: PUSH
15543: LD_INT 1
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 26
15552: PUSH
15553: LD_INT 1
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: LIST
15564: PPUSH
15565: CALL_OW 69
15569: PUSH
15570: LD_EXP 2
15574: PUSH
15575: EMPTY
15576: LIST
15577: DIFF
15578: PPUSH
15579: LD_STRING D9a-Mech1-1
15581: PPUSH
15582: LD_STRING D9a-Mech1-1
15584: PPUSH
15585: CALL 3277 0 3
// end ; end ; if energyVDialog = 0 then
15589: LD_EXP 32
15593: PUSH
15594: LD_INT 0
15596: EQUAL
15597: IFFALSE 15603
// EnergyDialog ;
15599: CALL 3589 0 0
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
15603: LD_VAR 0 1
15607: PPUSH
15608: CALL_OW 266
15612: PUSH
15613: LD_INT 32
15615: EQUAL
15616: PUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 255
15626: PUSH
15627: LD_INT 1
15629: EQUAL
15630: AND
15631: PUSH
15632: LD_EXP 31
15636: PUSH
15637: LD_INT 0
15639: EQUAL
15640: AND
15641: IFFALSE 15934
// begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and bunkerDialog = 0 then
15643: LD_VAR 0 1
15647: PPUSH
15648: CALL_OW 266
15652: PUSH
15653: LD_INT 3
15655: EQUAL
15656: PUSH
15657: LD_VAR 0 1
15661: PPUSH
15662: CALL_OW 255
15666: PUSH
15667: LD_INT 1
15669: EQUAL
15670: AND
15671: PUSH
15672: LD_EXP 31
15676: PUSH
15677: LD_INT 0
15679: EQUAL
15680: AND
15681: IFFALSE 15912
// begin bunkerDialog = 1 ;
15683: LD_ADDR_EXP 31
15687: PUSH
15688: LD_INT 1
15690: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15691: LD_EXP 11
15695: PPUSH
15696: CALL_OW 302
15700: IFFALSE 15716
// begin Say ( Claptopn , D11-Eng1-1 ) ;
15702: LD_EXP 11
15706: PPUSH
15707: LD_STRING D11-Eng1-1
15709: PPUSH
15710: CALL_OW 88
// end else
15714: GO 15912
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15716: LD_INT 22
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 21
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 25
15738: PUSH
15739: LD_INT 3
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 26
15748: PUSH
15749: LD_INT 1
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: PPUSH
15762: CALL_OW 69
15766: PUSH
15767: LD_EXP 2
15771: PUSH
15772: EMPTY
15773: LIST
15774: PUSH
15775: LD_INT 0
15777: GREATER
15778: DIFF
15779: IFFALSE 15853
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15781: LD_INT 22
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 21
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 25
15803: PUSH
15804: LD_INT 2
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 26
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: PPUSH
15827: CALL_OW 69
15831: PUSH
15832: LD_EXP 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: DIFF
15840: PPUSH
15841: LD_STRING D11-Eng1-1
15843: PPUSH
15844: LD_STRING D11-Eng1-1
15846: PPUSH
15847: CALL 3277 0 3
// end else
15851: GO 15912
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15853: LD_INT 22
15855: PUSH
15856: LD_INT 1
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 21
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 26
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: LIST
15887: PPUSH
15888: CALL_OW 69
15892: PUSH
15893: LD_EXP 2
15897: PUSH
15898: EMPTY
15899: LIST
15900: DIFF
15901: PPUSH
15902: LD_STRING D11-Eng1-1
15904: PPUSH
15905: LD_STRING D11-Eng1-1
15907: PPUSH
15908: CALL 3277 0 3
// end ; end ; end ; if energyVDialog = 0 then
15912: LD_EXP 32
15916: PUSH
15917: LD_INT 0
15919: EQUAL
15920: IFFALSE 15926
// EnergyDialog ;
15922: CALL 3589 0 0
// bunkerDialog = 1 ;
15926: LD_ADDR_EXP 31
15930: PUSH
15931: LD_INT 1
15933: ST_TO_ADDR
// end ; end ;
15934: PPOPN 1
15936: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 247
15946: PUSH
15947: LD_INT 1
15949: EQUAL
15950: PUSH
15951: LD_VAR 0 1
15955: PPUSH
15956: CALL_OW 255
15960: PUSH
15961: LD_INT 1
15963: EQUAL
15964: AND
15965: IFFALSE 15981
// lostCounter = lostCounter + 1 ;
15967: LD_ADDR_EXP 37
15971: PUSH
15972: LD_EXP 37
15976: PUSH
15977: LD_INT 1
15979: PLUS
15980: ST_TO_ADDR
// end ;
15981: PPOPN 1
15983: END
// on Contact ( side1 , side2 ) do var i ;
15984: LD_INT 0
15986: PPUSH
// begin if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 1
15994: EQUAL
15995: PUSH
15996: LD_VAR 0 2
16000: PUSH
16001: LD_INT 6
16003: EQUAL
16004: AND
16005: PUSH
16006: LD_EXP 39
16010: PUSH
16011: LD_INT 1
16013: EQUAL
16014: AND
16015: IFFALSE 16070
// begin donaldsonCoopAttack = 0 ;
16017: LD_ADDR_EXP 39
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
16025: LD_ADDR_VAR 0 3
16029: PUSH
16030: LD_INT 22
16032: PUSH
16033: LD_INT 4
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: PPUSH
16043: CALL_OW 69
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16068
// ComAgressiveMove ( i , 52 , 64 ) ;
16051: LD_VAR 0 3
16055: PPUSH
16056: LD_INT 52
16058: PPUSH
16059: LD_INT 64
16061: PPUSH
16062: CALL_OW 114
16066: GO 16048
16068: POP
16069: POP
// end ; end ;
16070: PPOPN 3
16072: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
16073: LD_VAR 0 1
16077: PPUSH
16078: CALL_OW 264
16082: PUSH
16083: LD_INT 53
16085: EQUAL
16086: IFFALSE 16218
// begin ComMoveXY ( vehicle , 91 , 73 ) ;
16088: LD_VAR 0 1
16092: PPUSH
16093: LD_INT 91
16095: PPUSH
16096: LD_INT 73
16098: PPUSH
16099: CALL_OW 111
// AddComMoveXY ( vehicle , 84 , 61 ) ;
16103: LD_VAR 0 1
16107: PPUSH
16108: LD_INT 84
16110: PPUSH
16111: LD_INT 61
16113: PPUSH
16114: CALL_OW 171
// AddComMoveXY ( vehicle , 78 , 51 ) ;
16118: LD_VAR 0 1
16122: PPUSH
16123: LD_INT 78
16125: PPUSH
16126: LD_INT 51
16128: PPUSH
16129: CALL_OW 171
// AddComMoveXY ( vehicle , 73 , 41 ) ;
16133: LD_VAR 0 1
16137: PPUSH
16138: LD_INT 73
16140: PPUSH
16141: LD_INT 41
16143: PPUSH
16144: CALL_OW 171
// AddComMoveXY ( vehicle , 91 , 75 ) ;
16148: LD_VAR 0 1
16152: PPUSH
16153: LD_INT 91
16155: PPUSH
16156: LD_INT 75
16158: PPUSH
16159: CALL_OW 171
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16163: LD_INT 0
16165: PPUSH
16166: LD_EXP 19
16170: PPUSH
16171: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
16175: CALL_OW 44
16179: PPUSH
16180: LD_VAR 0 2
16184: PPUSH
16185: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
16189: LD_VAR 0 1
16193: PPUSH
16194: LD_INT 6
16196: PPUSH
16197: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
16201: LD_VAR 0 1
16205: PPUSH
16206: CALL_OW 313
16210: PPUSH
16211: LD_INT 6
16213: PPUSH
16214: CALL_OW 235
// end ; end ; end_of_file
16218: PPOPN 2
16220: END
// every 10 10$0 do
16221: GO 16223
16223: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16224: LD_INT 5
16226: PPUSH
16227: LD_INT 3
16229: PPUSH
16230: LD_INT 2
16232: PPUSH
16233: LD_INT 5
16235: PPUSH
16236: CALL_OW 12
16240: PUSH
16241: LD_INT 2
16243: PUSH
16244: LD_INT 3
16246: PUSH
16247: LD_INT 3
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: PUSH
16255: LD_OWVAR 67
16259: ARRAY
16260: PLUS
16261: PPUSH
16262: LD_INT 0
16264: PPUSH
16265: LD_INT 0
16267: PPUSH
16268: LD_INT 0
16270: PPUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: LD_OWVAR 67
16289: ARRAY
16290: PPUSH
16291: LD_EXP 18
16295: PPUSH
16296: LD_EXP 19
16300: PPUSH
16301: CALL_OW 12
16305: PPUSH
16306: LD_INT 4
16308: PPUSH
16309: LD_INT 14
16311: PPUSH
16312: LD_INT 1
16314: PPUSH
16315: LD_INT 2
16317: PPUSH
16318: CALL 5275 0 12
// end ;
16322: END
// every 15 15$0 do
16323: GO 16325
16325: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16326: LD_INT 5
16328: PPUSH
16329: LD_INT 3
16331: PPUSH
16332: LD_INT 3
16334: PPUSH
16335: LD_INT 5
16337: PPUSH
16338: CALL_OW 12
16342: PUSH
16343: LD_INT 2
16345: PUSH
16346: LD_INT 3
16348: PUSH
16349: LD_INT 3
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: LIST
16356: PUSH
16357: LD_OWVAR 67
16361: ARRAY
16362: PLUS
16363: PPUSH
16364: LD_INT 0
16366: PPUSH
16367: LD_INT 0
16369: PPUSH
16370: LD_INT 0
16372: PPUSH
16373: LD_INT 2
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 3
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: PUSH
16387: LD_OWVAR 67
16391: ARRAY
16392: PPUSH
16393: LD_EXP 18
16397: PPUSH
16398: LD_EXP 19
16402: PPUSH
16403: CALL_OW 12
16407: PPUSH
16408: LD_INT 4
16410: PPUSH
16411: LD_INT 14
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL 5275 0 12
// end ;
16424: END
// every 25 25$0 do
16425: GO 16427
16427: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16428: LD_INT 5
16430: PPUSH
16431: LD_INT 3
16433: PPUSH
16434: LD_INT 2
16436: PPUSH
16437: LD_INT 5
16439: PPUSH
16440: CALL_OW 12
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: LD_INT 3
16450: PUSH
16451: LD_INT 3
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: PUSH
16459: LD_OWVAR 67
16463: ARRAY
16464: PLUS
16465: PPUSH
16466: LD_INT 0
16468: PPUSH
16469: LD_INT 0
16471: PPUSH
16472: LD_INT 0
16474: PPUSH
16475: LD_INT 1
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: LIST
16488: PUSH
16489: LD_OWVAR 67
16493: ARRAY
16494: PPUSH
16495: LD_EXP 18
16499: PPUSH
16500: LD_EXP 19
16504: PPUSH
16505: CALL_OW 12
16509: PPUSH
16510: LD_INT 4
16512: PPUSH
16513: LD_INT 14
16515: PPUSH
16516: LD_INT 1
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL 5275 0 12
// end ;
16526: END
// every 26 26$0 do
16527: GO 16529
16529: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16530: LD_INT 5
16532: PPUSH
16533: LD_INT 3
16535: PPUSH
16536: LD_INT 3
16538: PPUSH
16539: LD_INT 5
16541: PPUSH
16542: CALL_OW 12
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 3
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PUSH
16561: LD_OWVAR 67
16565: ARRAY
16566: PLUS
16567: PPUSH
16568: LD_INT 0
16570: PPUSH
16571: LD_INT 0
16573: PPUSH
16574: LD_INT 0
16576: PPUSH
16577: LD_INT 2
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: LD_INT 3
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: PUSH
16591: LD_OWVAR 67
16595: ARRAY
16596: PPUSH
16597: LD_EXP 18
16601: PPUSH
16602: LD_EXP 19
16606: PPUSH
16607: CALL_OW 12
16611: PPUSH
16612: LD_INT 4
16614: PPUSH
16615: LD_INT 14
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: LD_INT 2
16623: PPUSH
16624: CALL 5275 0 12
// end ;
16628: END
// every 25 25$0 do
16629: GO 16631
16631: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
16632: LD_INT 4
16634: PPUSH
16635: LD_INT 5
16637: PPUSH
16638: LD_INT 3
16640: PUSH
16641: LD_INT 4
16643: PUSH
16644: LD_INT 5
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: PUSH
16652: LD_OWVAR 67
16656: ARRAY
16657: PPUSH
16658: LD_EXP 18
16662: PPUSH
16663: LD_EXP 19
16667: PPUSH
16668: CALL_OW 12
16672: PPUSH
16673: LD_INT 3
16675: PPUSH
16676: LD_INT 1
16678: PPUSH
16679: LD_INT 1
16681: PPUSH
16682: LD_INT 42
16684: PUSH
16685: LD_INT 42
16687: PUSH
16688: LD_INT 43
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 42
16698: PUSH
16699: LD_INT 43
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 43
16708: PUSH
16709: LD_INT 43
16711: PUSH
16712: LD_INT 43
16714: PUSH
16715: LD_INT 44
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PUSH
16729: LD_OWVAR 67
16733: ARRAY
16734: PPUSH
16735: EMPTY
16736: PPUSH
16737: EMPTY
16738: PPUSH
16739: LD_INT 1
16741: PPUSH
16742: CALL 8167 0 11
// end ; end_of_file
16746: END
// every 0 0$1 trigger startTimer = 1 do
16747: LD_EXP 29
16751: PUSH
16752: LD_INT 1
16754: EQUAL
16755: IFFALSE 16867
16757: GO 16759
16759: DISABLE
// begin enable ;
16760: ENABLE
// if timerStatus = 1 then
16761: LD_EXP 28
16765: PUSH
16766: LD_INT 1
16768: EQUAL
16769: IFFALSE 16802
// begin timeToSupport = timeToSupport - 0 0$01 ;
16771: LD_ADDR_EXP 27
16775: PUSH
16776: LD_EXP 27
16780: PUSH
16781: LD_INT 35
16783: MINUS
16784: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
16785: LD_ADDR_OWVAR 47
16789: PUSH
16790: LD_STRING #Am04-1
16792: PUSH
16793: LD_EXP 27
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: ST_TO_ADDR
// end ; if timerStatus = 2 then
16802: LD_EXP 28
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: IFFALSE 16843
// begin timeToSupport = timeToSupport - 0 0$01 ;
16812: LD_ADDR_EXP 27
16816: PUSH
16817: LD_EXP 27
16821: PUSH
16822: LD_INT 35
16824: MINUS
16825: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
16826: LD_ADDR_OWVAR 47
16830: PUSH
16831: LD_STRING #Am04-2
16833: PUSH
16834: LD_EXP 27
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: ST_TO_ADDR
// end ; if timerStatus = 3 then
16843: LD_EXP 28
16847: PUSH
16848: LD_INT 3
16850: EQUAL
16851: IFFALSE 16867
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
16853: LD_ADDR_EXP 26
16857: PUSH
16858: LD_EXP 26
16862: PUSH
16863: LD_INT 35
16865: MINUS
16866: ST_TO_ADDR
// end ; end ; end_of_file
16867: END
// every 0 0$1 trigger IsDead ( JMM ) do
16868: LD_EXP 2
16872: PPUSH
16873: CALL_OW 301
16877: IFFALSE 16889
16879: GO 16881
16881: DISABLE
// YouLost ( JMM ) ;
16882: LD_STRING JMM
16884: PPUSH
16885: CALL_OW 104
16889: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
16890: LD_INT 4
16892: PPUSH
16893: CALL_OW 301
16897: IFFALSE 16909
16899: GO 16901
16901: DISABLE
// YouLost ( Base ) ; end_of_file
16902: LD_STRING Base
16904: PPUSH
16905: CALL_OW 104
16909: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
16910: LD_EXP 17
16914: PPUSH
16915: CALL_OW 301
16919: IFFALSE 17200
16921: GO 16923
16923: DISABLE
16924: LD_INT 0
16926: PPUSH
// begin AIEnable = 0 ;
16927: LD_ADDR_EXP 36
16931: PUSH
16932: LD_INT 0
16934: ST_TO_ADDR
// InGameOn ;
16935: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
16939: LD_INT 3
16941: PPUSH
16942: LD_INT 1
16944: PPUSH
16945: LD_INT 1
16947: PPUSH
16948: LD_INT 0
16950: PPUSH
16951: CALL_OW 80
// SetAttitude ( 1 , 6 , att_friend , true ) ;
16955: LD_INT 1
16957: PPUSH
16958: LD_INT 6
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_INT 1
16966: PPUSH
16967: CALL_OW 80
// SetAttitude ( 1 , 5 , att_friend , true ) ;
16971: LD_INT 1
16973: PPUSH
16974: LD_INT 5
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
16987: LD_INT 3
16989: PPUSH
16990: LD_INT 1
16992: PPUSH
16993: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
16997: LD_INT 97
16999: PPUSH
17000: LD_INT 91
17002: PPUSH
17003: CALL_OW 84
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17007: LD_ADDR_VAR 0 1
17011: PUSH
17012: LD_INT 22
17014: PUSH
17015: LD_INT 3
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 21
17024: PUSH
17025: LD_INT 1
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PPUSH
17036: CALL_OW 69
17040: PUSH
17041: FOR_IN
17042: IFFALSE 17093
// begin ComExitBuilding ( i ) ;
17044: LD_VAR 0 1
17048: PPUSH
17049: CALL_OW 122
// wait ( 0 0$1 ) ;
17053: LD_INT 35
17055: PPUSH
17056: CALL_OW 67
// ComExitVehicle ( i ) ;
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 121
// wait ( 0 0$1 ) ;
17069: LD_INT 35
17071: PPUSH
17072: CALL_OW 67
// ComMoveXY ( i , 124 , 98 ) ;
17076: LD_VAR 0 1
17080: PPUSH
17081: LD_INT 124
17083: PPUSH
17084: LD_INT 98
17086: PPUSH
17087: CALL_OW 111
// end ;
17091: GO 17041
17093: POP
17094: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
17095: LD_ADDR_VAR 0 1
17099: PUSH
17100: LD_INT 22
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 21
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 69
17128: PUSH
17129: FOR_IN
17130: IFFALSE 17181
// begin ComExitBuilding ( i ) ;
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 122
// wait ( 0 0$1 ) ;
17141: LD_INT 35
17143: PPUSH
17144: CALL_OW 67
// ComExitVehicle ( i ) ;
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 121
// wait ( 0 0$1 ) ;
17157: LD_INT 35
17159: PPUSH
17160: CALL_OW 67
// ComAgressiveMove ( i , 124 , 98 ) ;
17164: LD_VAR 0 1
17168: PPUSH
17169: LD_INT 124
17171: PPUSH
17172: LD_INT 98
17174: PPUSH
17175: CALL_OW 114
// end ;
17179: GO 17129
17181: POP
17182: POP
// wait ( 0 0$3 ) ;
17183: LD_INT 105
17185: PPUSH
17186: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
17190: LD_INT 124
17192: PPUSH
17193: LD_INT 98
17195: PPUSH
17196: CALL_OW 84
// end ;
17200: PPOPN 1
17202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
17203: LD_INT 22
17205: PUSH
17206: LD_INT 3
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 21
17215: PUSH
17216: LD_INT 1
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 24
17225: PUSH
17226: LD_INT 250
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: PPUSH
17238: CALL_OW 69
17242: PUSH
17243: LD_INT 0
17245: EQUAL
17246: IFFALSE 17255
17248: GO 17250
17250: DISABLE
// FinishMission ;
17251: CALL 3805 0 0
17255: END
// every 0 0$1 do var i ;
17256: GO 17258
17258: DISABLE
17259: LD_INT 0
17261: PPUSH
// begin enable ;
17262: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ f_side , 3 ] ) do
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_INT 5
17270: PPUSH
17271: LD_INT 22
17273: PUSH
17274: LD_INT 3
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PPUSH
17281: CALL_OW 70
17285: PUSH
17286: FOR_IN
17287: IFFALSE 17300
// RemoveUnit ( i ) ;
17289: LD_VAR 0 1
17293: PPUSH
17294: CALL_OW 64
17298: GO 17286
17300: POP
17301: POP
// end ; end_of_file
17302: PPOPN 1
17304: END
// every 2 2$0 + 0 0$15 do
17305: GO 17307
17307: DISABLE
// begin if supply <= 13 and supply > 7 then
17308: LD_EXP 35
17312: PUSH
17313: LD_INT 13
17315: LESSEQUAL
17316: PUSH
17317: LD_EXP 35
17321: PUSH
17322: LD_INT 7
17324: GREATER
17325: AND
17326: IFFALSE 17349
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
17328: LD_INT 3
17330: PPUSH
17331: LD_INT 5
17333: PPUSH
17334: CALL_OW 12
17338: PPUSH
17339: LD_INT 18
17341: PPUSH
17342: LD_INT 1
17344: PPUSH
17345: CALL_OW 55
// if supply <= 7 and supply > 4 then
17349: LD_EXP 35
17353: PUSH
17354: LD_INT 7
17356: LESSEQUAL
17357: PUSH
17358: LD_EXP 35
17362: PUSH
17363: LD_INT 4
17365: GREATER
17366: AND
17367: IFFALSE 17390
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 5
17374: PPUSH
17375: CALL_OW 12
17379: PPUSH
17380: LD_INT 19
17382: PPUSH
17383: LD_INT 1
17385: PPUSH
17386: CALL_OW 55
// if supply <= 4 and supply > 0 then
17390: LD_EXP 35
17394: PUSH
17395: LD_INT 4
17397: LESSEQUAL
17398: PUSH
17399: LD_EXP 35
17403: PUSH
17404: LD_INT 0
17406: GREATER
17407: AND
17408: IFFALSE 17431
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
17410: LD_INT 3
17412: PPUSH
17413: LD_INT 5
17415: PPUSH
17416: CALL_OW 12
17420: PPUSH
17421: LD_INT 20
17423: PPUSH
17424: LD_INT 1
17426: PPUSH
17427: CALL_OW 55
// if supply > 0 then
17431: LD_EXP 35
17435: PUSH
17436: LD_INT 0
17438: GREATER
17439: IFFALSE 17456
// begin supply = supply - 1 ;
17441: LD_ADDR_EXP 35
17445: PUSH
17446: LD_EXP 35
17450: PUSH
17451: LD_INT 1
17453: MINUS
17454: ST_TO_ADDR
// enable ;
17455: ENABLE
// end ; end ;
17456: END
