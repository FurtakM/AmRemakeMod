// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// russianTanks = [ ] ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: EMPTY
  50: ST_TO_ADDR
// russianDamageTanks = [ ] ;
  51: LD_ADDR_EXP 19
  55: PUSH
  56: EMPTY
  57: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  58: LD_ADDR_EXP 20
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// debugMode = 0 ;
  66: LD_ADDR_EXP 43
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// bonusAvalaible = 0 ;
  74: LD_ADDR_EXP 42
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// firstRussianAttack = 0 ;
  82: LD_ADDR_EXP 23
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// saveDonaldson = 0 ;
  90: LD_ADDR_EXP 24
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// frankScoutBase = 0 ;
  98: LD_ADDR_EXP 25
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// harrAnswer = 0 ;
 106: LD_ADDR_EXP 26
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 114: LD_ADDR_EXP 27
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 122: LD_ADDR_EXP 28
 126: PUSH
 127: LD_INT 18900
 129: ST_TO_ADDR
// timerStatus = 0 ;
 130: LD_ADDR_EXP 29
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// startTimer = 0 ;
 138: LD_ADDR_EXP 30
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// factoryDialog = 0 ;
 146: LD_ADDR_EXP 31
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// bunkerDialog = 0 ;
 154: LD_ADDR_EXP 32
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// energyVDialog = 0 ;
 162: LD_ADDR_EXP 33
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// buildOil = 0 ;
 170: LD_ADDR_EXP 34
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// buildPower = 0 ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 186: LD_ADDR_EXP 36
 190: PUSH
 191: LD_INT 14
 193: PUSH
 194: LD_INT 12
 196: PUSH
 197: LD_INT 11
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: PUSH
 205: LD_OWVAR 67
 209: ARRAY
 210: ST_TO_ADDR
// AIEnable = 1 ;
 211: LD_ADDR_EXP 37
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 219: LD_ADDR_EXP 41
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// lostCounter = 0 ;
 227: LD_ADDR_EXP 38
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// honor = 1 ;
 235: LD_ADDR_EXP 39
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// escapeAvalaible = 0 ;
 243: LD_ADDR_EXP 40
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// PrepareDifficulty ;
 251: CALL 4206 0 0
// PrepareRussianBase ;
 255: CALL 2519 0 0
// PrepareRussianCommander ;
 259: CALL 2470 0 0
// PrepareHeroes ;
 263: CALL 404 0 0
// SetBName ( ambdept0 , gamma ) ;
 267: LD_INT 4
 269: PPUSH
 270: LD_STRING gamma
 272: PPUSH
 273: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 277: LD_INT 21
 279: PPUSH
 280: LD_STRING fyodor
 282: PPUSH
 283: CALL_OW 500
// end ;
 287: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 288: LD_EXP 43
 292: PUSH
 293: LD_INT 1
 295: EQUAL
 296: IFFALSE 401
 298: GO 300
 300: DISABLE
 301: LD_INT 0
 303: PPUSH
// begin enable ;
 304: ENABLE
// fogoff ( true ) ;
 305: LD_INT 1
 307: PPUSH
 308: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 312: LD_ADDR_VAR 0 1
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 21
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PPUSH
 341: CALL_OW 69
 345: PUSH
 346: FOR_IN
 347: IFFALSE 363
// SetLives ( i , 1000 ) ;
 349: LD_VAR 0 1
 353: PPUSH
 354: LD_INT 1000
 356: PPUSH
 357: CALL_OW 234
 361: GO 346
 363: POP
 364: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 365: LD_INT 4
 367: PPUSH
 368: CALL_OW 274
 372: PPUSH
 373: LD_INT 1
 375: PPUSH
 376: LD_INT 9999
 378: PPUSH
 379: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 383: LD_INT 4
 385: PPUSH
 386: CALL_OW 274
 390: PPUSH
 391: LD_INT 2
 393: PPUSH
 394: LD_INT 9999
 396: PPUSH
 397: CALL_OW 277
// end ; end_of_file
 401: PPOPN 1
 403: END
// export function PrepareHeroes ; var i , tmp ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
 408: PPUSH
// uc_side = 1 ;
 409: LD_ADDR_OWVAR 20
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// uc_nation = 1 ;
 417: LD_ADDR_OWVAR 21
 421: PUSH
 422: LD_INT 1
 424: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 425: LD_ADDR_EXP 1
 429: PUSH
 430: LD_STRING JMM
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: CALL 3741 0 2
 440: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 441: LD_ADDR_EXP 4
 445: PUSH
 446: LD_STRING Lisa
 448: PPUSH
 449: LD_INT 1
 451: PPUSH
 452: CALL 3741 0 2
 456: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 457: LD_ADDR_EXP 7
 461: PUSH
 462: LD_STRING Brown
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL 3741 0 2
 472: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 473: LD_ADDR_EXP 8
 477: PUSH
 478: LD_STRING Dickens
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL 3741 0 2
 488: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 489: LD_ADDR_EXP 9
 493: PUSH
 494: LD_STRING Woodruff
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 3741 0 2
 504: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 505: LD_ADDR_EXP 12
 509: PUSH
 510: LD_STRING Campell
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL 3741 0 2
 520: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 521: LD_ADDR_EXP 10
 525: PUSH
 526: LD_STRING Knight
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL 3741 0 2
 536: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 537: LD_ADDR_EXP 11
 541: PUSH
 542: LD_STRING Claptopn
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL 3741 0 2
 552: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 553: LD_ADDR_EXP 14
 557: PUSH
 558: LD_STRING Harisson
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL 3741 0 2
 568: ST_TO_ADDR
// if Lisa = false then
 569: LD_EXP 4
 573: PUSH
 574: LD_INT 0
 576: EQUAL
 577: IFFALSE 595
// Bobby = PrepareUnit ( Bobby , true ) ;
 579: LD_ADDR_EXP 2
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 3741 0 2
 594: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 595: LD_EXP 4
 599: PUSH
 600: LD_INT 0
 602: EQUAL
 603: PUSH
 604: LD_EXP 2
 608: PUSH
 609: LD_INT 0
 611: EQUAL
 612: AND
 613: IFFALSE 631
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 615: LD_ADDR_EXP 3
 619: PUSH
 620: LD_STRING Cyrus
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL 3741 0 2
 630: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 631: LD_EXP 4
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: PUSH
 640: LD_EXP 2
 644: PUSH
 645: LD_INT 0
 647: EQUAL
 648: AND
 649: PUSH
 650: LD_EXP 3
 654: PUSH
 655: LD_INT 0
 657: EQUAL
 658: AND
 659: IFFALSE 720
// begin tmp = CreateCharacterSet ( 03_others ) ;
 661: LD_ADDR_VAR 0 3
 665: PUSH
 666: LD_STRING 03_others
 668: PPUSH
 669: CALL_OW 31
 673: ST_TO_ADDR
// for i = 1 to tmp do
 674: LD_ADDR_VAR 0 2
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_VAR 0 3
 688: PUSH
 689: FOR_TO
 690: IFFALSE 718
// RandomBeforeMission = tmp [ Rand ( 1 , tmp ) ] ;
 692: LD_ADDR_EXP 6
 696: PUSH
 697: LD_VAR 0 3
 701: PUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_VAR 0 3
 709: PPUSH
 710: CALL_OW 12
 714: ARRAY
 715: ST_TO_ADDR
 716: GO 689
 718: POP
 719: POP
// end ; uc_side = 4 ;
 720: LD_ADDR_OWVAR 20
 724: PUSH
 725: LD_INT 4
 727: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 728: LD_ADDR_EXP 13
 732: PUSH
 733: LD_STRING Donaldson
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 3741 0 2
 743: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 744: LD_ADDR_EXP 5
 748: PUSH
 749: LD_STRING Frank
 751: PPUSH
 752: LD_INT 1
 754: PPUSH
 755: CALL 3741 0 2
 759: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 760: LD_EXP 1
 764: PPUSH
 765: LD_INT 32
 767: PPUSH
 768: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 772: LD_EXP 7
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: LD_INT 0
 782: PPUSH
 783: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 787: LD_EXP 7
 791: PPUSH
 792: LD_INT 32
 794: PPUSH
 795: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 799: LD_EXP 8
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 814: LD_EXP 9
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 829: LD_EXP 12
 833: PPUSH
 834: LD_INT 2
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 844: LD_EXP 10
 848: PPUSH
 849: LD_INT 2
 851: PPUSH
 852: LD_INT 0
 854: PPUSH
 855: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 859: LD_EXP 11
 863: PPUSH
 864: LD_INT 2
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 874: LD_EXP 4
 878: PPUSH
 879: LD_INT 2
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
// if Lisa = false then
 889: LD_EXP 4
 893: PUSH
 894: LD_INT 0
 896: EQUAL
 897: IFFALSE 914
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 899: LD_EXP 2
 903: PPUSH
 904: LD_INT 2
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// if Lisa = false and Bobby = false then
 914: LD_EXP 4
 918: PUSH
 919: LD_INT 0
 921: EQUAL
 922: PUSH
 923: LD_EXP 2
 927: PUSH
 928: LD_INT 0
 930: EQUAL
 931: AND
 932: IFFALSE 949
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 934: LD_EXP 3
 938: PPUSH
 939: LD_INT 2
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 949: LD_EXP 4
 953: PUSH
 954: LD_INT 0
 956: EQUAL
 957: PUSH
 958: LD_EXP 2
 962: PUSH
 963: LD_INT 0
 965: EQUAL
 966: AND
 967: PUSH
 968: LD_EXP 3
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 994
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 979: LD_EXP 6
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: LD_VAR 0 1
 998: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 999: LD_INT 0
1001: PPUSH
1002: PPUSH
1003: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1004: LD_EXP 13
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1019: LD_EXP 5
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// uc_nation = 1 ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// uc_side = 4 ;
1042: LD_ADDR_OWVAR 20
1046: PUSH
1047: LD_INT 4
1049: ST_TO_ADDR
// hc_class := 3 ;
1050: LD_ADDR_OWVAR 28
1054: PUSH
1055: LD_INT 3
1057: ST_TO_ADDR
// hc_sex := sex_male ;
1058: LD_ADDR_OWVAR 27
1062: PUSH
1063: LD_INT 1
1065: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1066: LD_ADDR_OWVAR 33
1070: PUSH
1071: LD_STRING SecondCharsGal
1073: ST_TO_ADDR
// hc_face_number := 53 ;
1074: LD_ADDR_OWVAR 34
1078: PUSH
1079: LD_INT 53
1081: ST_TO_ADDR
// hc_name := Freddie Warner ;
1082: LD_ADDR_OWVAR 26
1086: PUSH
1087: LD_STRING Freddie Warner
1089: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1090: LD_ADDR_OWVAR 29
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_INT 11
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1105: LD_ADDR_OWVAR 30
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 0
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: LD_INT 0
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: ST_TO_ADDR
// un = CreateHuman ;
1151: LD_ADDR_VAR 0 3
1155: PUSH
1156: CALL_OW 44
1160: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1161: LD_VAR 0 3
1165: PPUSH
1166: LD_INT 10
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: CALL_OW 49
// hc_class := 1 ;
1176: LD_ADDR_OWVAR 28
1180: PUSH
1181: LD_INT 1
1183: ST_TO_ADDR
// hc_sex := sex_male ;
1184: LD_ADDR_OWVAR 27
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1192: LD_ADDR_OWVAR 33
1196: PUSH
1197: LD_STRING SecondCharsGal
1199: ST_TO_ADDR
// hc_face_number := 56 ;
1200: LD_ADDR_OWVAR 34
1204: PUSH
1205: LD_INT 56
1207: ST_TO_ADDR
// hc_name := Mel Brennan ;
1208: LD_ADDR_OWVAR 26
1212: PUSH
1213: LD_STRING Mel Brennan
1215: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1216: LD_ADDR_OWVAR 29
1220: PUSH
1221: LD_INT 12
1223: PUSH
1224: LD_INT 11
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1231: LD_ADDR_OWVAR 30
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 0
1244: PUSH
1245: LD_INT 0
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1254: LD_ADDR_OWVAR 31
1258: PUSH
1259: LD_INT 2
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 1
1267: PUSH
1268: LD_INT 0
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: ST_TO_ADDR
// un = CreateHuman ;
1277: LD_ADDR_VAR 0 3
1281: PUSH
1282: CALL_OW 44
1286: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1287: LD_VAR 0 3
1291: PPUSH
1292: LD_INT 10
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: CALL_OW 49
// hc_class := 1 ;
1302: LD_ADDR_OWVAR 28
1306: PUSH
1307: LD_INT 1
1309: ST_TO_ADDR
// hc_sex := sex_male ;
1310: LD_ADDR_OWVAR 27
1314: PUSH
1315: LD_INT 1
1317: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1318: LD_ADDR_OWVAR 33
1322: PUSH
1323: LD_STRING AmGalRemake
1325: ST_TO_ADDR
// hc_face_number := 5 ;
1326: LD_ADDR_OWVAR 34
1330: PUSH
1331: LD_INT 5
1333: ST_TO_ADDR
// hc_name := Bob Joplin ;
1334: LD_ADDR_OWVAR 26
1338: PUSH
1339: LD_STRING Bob Joplin
1341: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1342: LD_ADDR_OWVAR 29
1346: PUSH
1347: LD_INT 10
1349: PUSH
1350: LD_INT 11
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1357: LD_ADDR_OWVAR 30
1361: PUSH
1362: LD_INT 0
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: LD_INT 0
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1380: LD_ADDR_OWVAR 31
1384: PUSH
1385: LD_INT 3
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// un = CreateHuman ;
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: CALL_OW 44
1412: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1413: LD_VAR 0 3
1417: PPUSH
1418: LD_INT 10
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
// hc_class := 3 ;
1428: LD_ADDR_OWVAR 28
1432: PUSH
1433: LD_INT 3
1435: ST_TO_ADDR
// hc_sex := sex_female ;
1436: LD_ADDR_OWVAR 27
1440: PUSH
1441: LD_INT 2
1443: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1444: LD_ADDR_OWVAR 33
1448: PUSH
1449: LD_STRING AmGalRemake
1451: ST_TO_ADDR
// hc_face_number := 4 ;
1452: LD_ADDR_OWVAR 34
1456: PUSH
1457: LD_INT 4
1459: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1460: LD_ADDR_OWVAR 26
1464: PUSH
1465: LD_STRING Elizabeth Whitney
1467: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1468: LD_ADDR_OWVAR 29
1472: PUSH
1473: LD_INT 9
1475: PUSH
1476: LD_INT 11
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1483: LD_ADDR_OWVAR 30
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 2
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1506: LD_ADDR_OWVAR 31
1510: PUSH
1511: LD_INT 2
1513: PUSH
1514: LD_INT 2
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: LD_INT 2
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: ST_TO_ADDR
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 3
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1539: LD_VAR 0 3
1543: PPUSH
1544: LD_INT 10
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL_OW 49
// InitHc ;
1554: CALL_OW 19
// end ;
1558: LD_VAR 0 1
1562: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1563: LD_INT 0
1565: PPUSH
1566: PPUSH
1567: PPUSH
// uc_nation = 1 ;
1568: LD_ADDR_OWVAR 21
1572: PUSH
1573: LD_INT 1
1575: ST_TO_ADDR
// uc_side = 1 ;
1576: LD_ADDR_OWVAR 20
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// hc_class := 1 ;
1584: LD_ADDR_OWVAR 28
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// hc_sex := sex_male ;
1592: LD_ADDR_OWVAR 27
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1600: LD_ADDR_OWVAR 33
1604: PUSH
1605: LD_STRING SecondCharsGal
1607: ST_TO_ADDR
// hc_face_number := 59 ;
1608: LD_ADDR_OWVAR 34
1612: PUSH
1613: LD_INT 59
1615: ST_TO_ADDR
// hc_name := Max Gray ;
1616: LD_ADDR_OWVAR 26
1620: PUSH
1621: LD_STRING Max Gray
1623: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1624: LD_ADDR_OWVAR 29
1628: PUSH
1629: LD_INT 9
1631: PUSH
1632: LD_INT 11
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1639: LD_ADDR_OWVAR 30
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1662: LD_ADDR_OWVAR 31
1666: PUSH
1667: LD_INT 2
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: LD_INT 1
1675: PUSH
1676: LD_INT 0
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// un = CreateHuman ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: CALL_OW 44
1694: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1695: LD_VAR 0 4
1699: PPUSH
1700: LD_INT 11
1702: PPUSH
1703: LD_INT 0
1705: PPUSH
1706: CALL_OW 49
// hc_class := 1 ;
1710: LD_ADDR_OWVAR 28
1714: PUSH
1715: LD_INT 1
1717: ST_TO_ADDR
// hc_sex := sex_male ;
1718: LD_ADDR_OWVAR 27
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1726: LD_ADDR_OWVAR 33
1730: PUSH
1731: LD_STRING SecondCharsGal
1733: ST_TO_ADDR
// hc_face_number := 54 ;
1734: LD_ADDR_OWVAR 34
1738: PUSH
1739: LD_INT 54
1741: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1742: LD_ADDR_OWVAR 26
1746: PUSH
1747: LD_STRING Luigi Ghbellin
1749: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1750: LD_ADDR_OWVAR 29
1754: PUSH
1755: LD_INT 11
1757: PUSH
1758: LD_INT 11
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1765: LD_ADDR_OWVAR 30
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 0
1775: PUSH
1776: LD_INT 0
1778: PUSH
1779: LD_INT 0
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1788: LD_ADDR_OWVAR 31
1792: PUSH
1793: LD_INT 1
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: ST_TO_ADDR
// un = CreateHuman ;
1811: LD_ADDR_VAR 0 4
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 11
1828: PPUSH
1829: LD_INT 0
1831: PPUSH
1832: CALL_OW 49
// hc_class := 3 ;
1836: LD_ADDR_OWVAR 28
1840: PUSH
1841: LD_INT 3
1843: ST_TO_ADDR
// hc_sex := sex_male ;
1844: LD_ADDR_OWVAR 27
1848: PUSH
1849: LD_INT 1
1851: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1852: LD_ADDR_OWVAR 33
1856: PUSH
1857: LD_STRING AmGalRemake
1859: ST_TO_ADDR
// hc_face_number := 6 ;
1860: LD_ADDR_OWVAR 34
1864: PUSH
1865: LD_INT 6
1867: ST_TO_ADDR
// hc_name := Leon Carter ;
1868: LD_ADDR_OWVAR 26
1872: PUSH
1873: LD_STRING Leon Carter
1875: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1876: LD_ADDR_OWVAR 29
1880: PUSH
1881: LD_INT 10
1883: PUSH
1884: LD_INT 9
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1891: LD_ADDR_OWVAR 30
1895: PUSH
1896: LD_INT 0
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 0
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1914: LD_ADDR_OWVAR 31
1918: PUSH
1919: LD_INT 0
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: LD_INT 3
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: ST_TO_ADDR
// un = CreateHuman ;
1937: LD_ADDR_VAR 0 4
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1947: LD_VAR 0 4
1951: PPUSH
1952: LD_INT 11
1954: PPUSH
1955: LD_INT 0
1957: PPUSH
1958: CALL_OW 49
// if count = 4 then
1962: LD_VAR 0 1
1966: PUSH
1967: LD_INT 4
1969: EQUAL
1970: IFFALSE 2098
// begin hc_class := 1 ;
1972: LD_ADDR_OWVAR 28
1976: PUSH
1977: LD_INT 1
1979: ST_TO_ADDR
// hc_sex := sex_male ;
1980: LD_ADDR_OWVAR 27
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1988: LD_ADDR_OWVAR 33
1992: PUSH
1993: LD_STRING SecondCharsGal
1995: ST_TO_ADDR
// hc_face_number := 34 ;
1996: LD_ADDR_OWVAR 34
2000: PUSH
2001: LD_INT 34
2003: ST_TO_ADDR
// hc_name := Ian Hill ;
2004: LD_ADDR_OWVAR 26
2008: PUSH
2009: LD_STRING Ian Hill
2011: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2012: LD_ADDR_OWVAR 29
2016: PUSH
2017: LD_INT 10
2019: PUSH
2020: LD_INT 12
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2027: LD_ADDR_OWVAR 30
2031: PUSH
2032: LD_INT 0
2034: PUSH
2035: LD_INT 0
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2050: LD_ADDR_OWVAR 31
2054: PUSH
2055: LD_INT 2
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 0
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: ST_TO_ADDR
// un = CreateHuman ;
2073: LD_ADDR_VAR 0 4
2077: PUSH
2078: CALL_OW 44
2082: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2083: LD_VAR 0 4
2087: PPUSH
2088: LD_INT 11
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
// end ; if count = 5 then
2098: LD_VAR 0 1
2102: PUSH
2103: LD_INT 5
2105: EQUAL
2106: IFFALSE 2360
// begin hc_class := 1 ;
2108: LD_ADDR_OWVAR 28
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// hc_sex := sex_male ;
2116: LD_ADDR_OWVAR 27
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2124: LD_ADDR_OWVAR 33
2128: PUSH
2129: LD_STRING SecondCharsGal
2131: ST_TO_ADDR
// hc_face_number := 34 ;
2132: LD_ADDR_OWVAR 34
2136: PUSH
2137: LD_INT 34
2139: ST_TO_ADDR
// hc_name := Ian Hill ;
2140: LD_ADDR_OWVAR 26
2144: PUSH
2145: LD_STRING Ian Hill
2147: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2148: LD_ADDR_OWVAR 29
2152: PUSH
2153: LD_INT 10
2155: PUSH
2156: LD_INT 12
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2163: LD_ADDR_OWVAR 30
2167: PUSH
2168: LD_INT 0
2170: PUSH
2171: LD_INT 0
2173: PUSH
2174: LD_INT 1
2176: PUSH
2177: LD_INT 0
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2186: LD_ADDR_OWVAR 31
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 0
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 0
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// un = CreateHuman ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: CALL_OW 44
2218: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2219: LD_VAR 0 4
2223: PPUSH
2224: LD_INT 11
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// hc_class := 1 ;
2234: LD_ADDR_OWVAR 28
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// hc_sex := sex_female ;
2242: LD_ADDR_OWVAR 27
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2250: LD_ADDR_OWVAR 33
2254: PUSH
2255: LD_STRING SecondCharsGal
2257: ST_TO_ADDR
// hc_face_number := 41 ;
2258: LD_ADDR_OWVAR 34
2262: PUSH
2263: LD_INT 41
2265: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2266: LD_ADDR_OWVAR 26
2270: PUSH
2271: LD_STRING Kate Wadsworth
2273: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2274: LD_ADDR_OWVAR 29
2278: PUSH
2279: LD_INT 9
2281: PUSH
2282: LD_INT 9
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2289: LD_ADDR_OWVAR 30
2293: PUSH
2294: LD_INT 0
2296: PUSH
2297: LD_INT 2
2299: PUSH
2300: LD_INT 0
2302: PUSH
2303: LD_INT 0
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2312: LD_ADDR_OWVAR 31
2316: PUSH
2317: LD_INT 2
2319: PUSH
2320: LD_INT 3
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// un = CreateHuman ;
2335: LD_ADDR_VAR 0 4
2339: PUSH
2340: CALL_OW 44
2344: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_INT 11
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2360: LD_INT 11
2362: PPUSH
2363: LD_INT 22
2365: PUSH
2366: LD_INT 1
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: LD_INT 21
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 26
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: PPUSH
2398: CALL_OW 70
2402: PUSH
2403: LD_INT 1
2405: ARRAY
2406: PPUSH
2407: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2411: LD_INT 11
2413: PPUSH
2414: LD_INT 22
2416: PUSH
2417: LD_INT 1
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 21
2426: PUSH
2427: LD_INT 1
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 26
2436: PUSH
2437: LD_INT 1
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: PUSH
2454: LD_INT 1
2456: ARRAY
2457: PPUSH
2458: LD_STRING D6-Sol3-1
2460: PPUSH
2461: CALL_OW 88
// end ; end_of_file
2465: LD_VAR 0 2
2469: RET
// export function PrepareRussianCommander ; begin
2470: LD_INT 0
2472: PPUSH
// uc_side = 3 ;
2473: LD_ADDR_OWVAR 20
2477: PUSH
2478: LD_INT 3
2480: ST_TO_ADDR
// uc_nation = 3 ;
2481: LD_ADDR_OWVAR 21
2485: PUSH
2486: LD_INT 3
2488: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2489: LD_ADDR_EXP 15
2493: PUSH
2494: LD_STRING Stolypin
2496: PPUSH
2497: CALL_OW 25
2501: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2502: LD_EXP 15
2506: PPUSH
2507: LD_INT 21
2509: PPUSH
2510: CALL_OW 52
// end ;
2514: LD_VAR 0 1
2518: RET
// export function PrepareRussianBase ; var i ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 22
2531: PPUSH
2532: LD_EXP 16
2536: PPUSH
2537: LD_EXP 17
2541: PPUSH
2542: CALL_OW 12
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2557: LD_INT 3
2559: PPUSH
2560: LD_INT 3
2562: PPUSH
2563: LD_INT 21
2565: PPUSH
2566: LD_EXP 16
2570: PPUSH
2571: LD_EXP 17
2575: PPUSH
2576: CALL_OW 12
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2591: LD_INT 3
2593: PPUSH
2594: LD_INT 3
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_EXP 16
2604: PPUSH
2605: LD_EXP 17
2609: PPUSH
2610: CALL_OW 12
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2625: LD_INT 3
2627: PPUSH
2628: LD_INT 3
2630: PPUSH
2631: LD_INT 24
2633: PPUSH
2634: LD_EXP 16
2638: PPUSH
2639: LD_EXP 17
2643: PPUSH
2644: CALL_OW 12
2648: PPUSH
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 6
2654: PPUSH
2655: CALL 3804 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: LD_INT 22
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: LD_INT 30
2676: PUSH
2677: LD_INT 32
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: PUSH
2693: FOR_IN
2694: IFFALSE 2734
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 3
2701: PPUSH
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_EXP 16
2711: PPUSH
2712: LD_EXP 17
2716: PPUSH
2717: CALL_OW 12
2721: PPUSH
2722: LD_INT 1
2724: PPUSH
2725: LD_INT 1
2727: PPUSH
2728: CALL 3804 0 6
2732: GO 2693
2734: POP
2735: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2736: LD_ADDR_VAR 0 2
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 30
2753: PUSH
2754: LD_INT 31
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: FOR_IN
2771: IFFALSE 2799
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_EXP 17
2782: PPUSH
2783: CALL_OW 12
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: CALL 3914 0 2
2797: GO 2770
2799: POP
2800: POP
// end ;
2801: LD_VAR 0 1
2805: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2806: LD_INT 0
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
// uc_side = 6 ;
2812: LD_ADDR_OWVAR 20
2816: PUSH
2817: LD_INT 6
2819: ST_TO_ADDR
// uc_nation = 3 ;
2820: LD_ADDR_OWVAR 21
2824: PUSH
2825: LD_INT 3
2827: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2828: LD_ADDR_VAR 0 2
2832: PUSH
2833: DOUBLE
2834: LD_INT 1
2836: DEC
2837: ST_TO_ADDR
2838: LD_INT 1
2840: PUSH
2841: LD_INT 2
2843: PUSH
2844: LD_INT 1
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 12
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PUSH
2866: FOR_TO
2867: IFFALSE 3027
// begin vc_engine = 1 ;
2869: LD_ADDR_OWVAR 39
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// vc_control = 1 ;
2877: LD_ADDR_OWVAR 38
2881: PUSH
2882: LD_INT 1
2884: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2885: LD_ADDR_OWVAR 40
2889: PUSH
2890: LD_INT 42
2892: PUSH
2893: LD_INT 42
2895: PUSH
2896: LD_INT 43
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: PUSH
2904: LD_OWVAR 67
2908: ARRAY
2909: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2910: LD_ADDR_OWVAR 37
2914: PUSH
2915: LD_INT 21
2917: PUSH
2918: LD_INT 22
2920: PUSH
2921: LD_INT 22
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PUSH
2929: LD_OWVAR 67
2933: ARRAY
2934: ST_TO_ADDR
// veh = CreateVehicle ;
2935: LD_ADDR_VAR 0 3
2939: PUSH
2940: CALL_OW 45
2944: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2945: LD_VAR 0 3
2949: PPUSH
2950: LD_INT 3
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 49
// hc_gallery =  ;
2960: LD_ADDR_OWVAR 33
2964: PUSH
2965: LD_STRING 
2967: ST_TO_ADDR
// hc_name =  ;
2968: LD_ADDR_OWVAR 26
2972: PUSH
2973: LD_STRING 
2975: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2976: LD_INT 0
2978: PPUSH
2979: LD_INT 3
2981: PPUSH
2982: LD_EXP 16
2986: PPUSH
2987: LD_EXP 17
2991: PPUSH
2992: CALL_OW 12
2996: PPUSH
2997: CALL_OW 380
// un = CreateHuman ;
3001: LD_ADDR_VAR 0 4
3005: PUSH
3006: CALL_OW 44
3010: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3011: LD_VAR 0 4
3015: PPUSH
3016: LD_VAR 0 3
3020: PPUSH
3021: CALL_OW 52
// end ;
3025: GO 2866
3027: POP
3028: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3029: LD_INT 0
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: LD_EXP 16
3039: PPUSH
3040: LD_EXP 17
3044: PPUSH
3045: CALL_OW 12
3049: PUSH
3050: LD_INT 2
3052: PLUS
3053: PPUSH
3054: CALL_OW 380
// un = CreateHuman ;
3058: LD_ADDR_VAR 0 4
3062: PUSH
3063: CALL_OW 44
3067: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3068: LD_VAR 0 4
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3083: LD_INT 0
3085: PPUSH
3086: LD_INT 4
3088: PPUSH
3089: LD_EXP 16
3093: PPUSH
3094: LD_EXP 17
3098: PPUSH
3099: CALL_OW 12
3103: PUSH
3104: LD_INT 2
3106: PLUS
3107: PPUSH
3108: CALL_OW 380
// un = CreateHuman ;
3112: LD_ADDR_VAR 0 4
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3122: LD_VAR 0 4
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3137: LD_ADDR_VAR 0 2
3141: PUSH
3142: DOUBLE
3143: LD_INT 1
3145: DEC
3146: ST_TO_ADDR
3147: LD_INT 2
3149: PUSH
3150: LD_INT 3
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: PUSH
3161: LD_OWVAR 67
3165: ARRAY
3166: PUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_INT 3
3172: PPUSH
3173: CALL_OW 12
3177: PLUS
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3250
// begin hc_gallery =  ;
3182: LD_ADDR_OWVAR 33
3186: PUSH
3187: LD_STRING 
3189: ST_TO_ADDR
// hc_name =  ;
3190: LD_ADDR_OWVAR 26
3194: PUSH
3195: LD_STRING 
3197: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 1
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: LD_EXP 17
3213: PPUSH
3214: CALL_OW 12
3218: PPUSH
3219: CALL_OW 380
// un = CreateHuman ;
3223: LD_ADDR_VAR 0 4
3227: PUSH
3228: CALL_OW 44
3232: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3233: LD_VAR 0 4
3237: PPUSH
3238: LD_INT 3
3240: PPUSH
3241: LD_INT 0
3243: PPUSH
3244: CALL_OW 49
// end ;
3248: GO 3179
3250: POP
3251: POP
// vc_engine = 1 ;
3252: LD_ADDR_OWVAR 39
3256: PUSH
3257: LD_INT 1
3259: ST_TO_ADDR
// vc_control = 1 ;
3260: LD_ADDR_OWVAR 38
3264: PUSH
3265: LD_INT 1
3267: ST_TO_ADDR
// vc_weapon = 51 ;
3268: LD_ADDR_OWVAR 40
3272: PUSH
3273: LD_INT 51
3275: ST_TO_ADDR
// vc_chassis = 22 ;
3276: LD_ADDR_OWVAR 37
3280: PUSH
3281: LD_INT 22
3283: ST_TO_ADDR
// veh = CreateVehicle ;
3284: LD_ADDR_VAR 0 3
3288: PUSH
3289: CALL_OW 45
3293: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3294: LD_VAR 0 3
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3309: LD_VAR 0 3
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 100
3319: PPUSH
3320: CALL_OW 290
// hc_gallery =  ;
3324: LD_ADDR_OWVAR 33
3328: PUSH
3329: LD_STRING 
3331: ST_TO_ADDR
// hc_name =  ;
3332: LD_ADDR_OWVAR 26
3336: PUSH
3337: LD_STRING 
3339: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3340: LD_INT 0
3342: PPUSH
3343: LD_INT 3
3345: PPUSH
3346: LD_EXP 16
3350: PPUSH
3351: LD_EXP 17
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: CALL_OW 380
// un = CreateHuman ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3375: LD_VAR 0 4
3379: PPUSH
3380: LD_VAR 0 3
3384: PPUSH
3385: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3389: LD_ADDR_VAR 0 2
3393: PUSH
3394: LD_INT 22
3396: PUSH
3397: LD_INT 6
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: LD_INT 3
3409: PUSH
3410: LD_INT 25
3412: PUSH
3413: LD_INT 2
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: LD_INT 25
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: LIST
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 69
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3475
// ComAgressiveMove ( i , 45 , 46 ) ;
3458: LD_VAR 0 2
3462: PPUSH
3463: LD_INT 45
3465: PPUSH
3466: LD_INT 46
3468: PPUSH
3469: CALL_OW 114
3473: GO 3455
3475: POP
3476: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_INT 22
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 25
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: PUSH
3511: FOR_IN
3512: IFFALSE 3543
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3514: LD_ADDR_EXP 21
3518: PUSH
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 48
3529: PPUSH
3530: LD_INT 55
3532: PPUSH
3533: LD_INT 5
3535: PPUSH
3536: CALL_OW 145
3540: ST_TO_ADDR
3541: GO 3511
3543: POP
3544: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: LD_INT 22
3552: PUSH
3553: LD_INT 6
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 25
3562: PUSH
3563: LD_INT 4
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PPUSH
3574: CALL_OW 69
3578: PUSH
3579: FOR_IN
3580: IFFALSE 3599
// ComMoveXY ( i , 39 , 55 ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_INT 39
3589: PPUSH
3590: LD_INT 55
3592: PPUSH
3593: CALL_OW 111
3597: GO 3579
3599: POP
3600: POP
// end ;
3601: LD_VAR 0 1
3605: RET
// export function PrepareFirstAttack ; var i , un ; begin
3606: LD_INT 0
3608: PPUSH
3609: PPUSH
3610: PPUSH
// uc_side = 5 ;
3611: LD_ADDR_OWVAR 20
3615: PUSH
3616: LD_INT 5
3618: ST_TO_ADDR
// uc_nation = 3 ;
3619: LD_ADDR_OWVAR 21
3623: PUSH
3624: LD_INT 3
3626: ST_TO_ADDR
// for i := 1 to 4 do
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: DOUBLE
3633: LD_INT 1
3635: DEC
3636: ST_TO_ADDR
3637: LD_INT 4
3639: PUSH
3640: FOR_TO
3641: IFFALSE 3726
// begin hc_gallery =  ;
3643: LD_ADDR_OWVAR 33
3647: PUSH
3648: LD_STRING 
3650: ST_TO_ADDR
// hc_name =  ;
3651: LD_ADDR_OWVAR 26
3655: PUSH
3656: LD_STRING 
3658: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3659: LD_INT 0
3661: PPUSH
3662: LD_INT 1
3664: PPUSH
3665: LD_EXP 16
3669: PPUSH
3670: LD_EXP 17
3674: PPUSH
3675: CALL_OW 12
3679: PPUSH
3680: CALL_OW 380
// un = CreateHuman ;
3684: LD_ADDR_VAR 0 3
3688: PUSH
3689: CALL_OW 44
3693: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_INT 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_INT 48
3716: PPUSH
3717: LD_INT 14
3719: PPUSH
3720: CALL_OW 114
// end ;
3724: GO 3640
3726: POP
3727: POP
// firstRussianAttack = 1 ;
3728: LD_ADDR_EXP 23
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// end ; end_of_file
3736: LD_VAR 0 1
3740: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
// if exist_mode then
3745: LD_VAR 0 2
3749: IFFALSE 3774
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_EXP 45
3760: PUSH
3761: LD_VAR 0 1
3765: STR
3766: PPUSH
3767: CALL_OW 34
3771: ST_TO_ADDR
// end else
3772: GO 3789
// begin unit := NewCharacter ( ident ) ;
3774: LD_ADDR_VAR 0 4
3778: PUSH
3779: LD_VAR 0 1
3783: PPUSH
3784: CALL_OW 25
3788: ST_TO_ADDR
// end ; result := unit ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_VAR 0 4
3798: ST_TO_ADDR
// end ;
3799: LD_VAR 0 3
3803: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
// for i = 1 to count do
3810: LD_ADDR_VAR 0 8
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_VAR 0 6
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3907
// begin uc_side = side ;
3828: LD_ADDR_OWVAR 20
3832: PUSH
3833: LD_VAR 0 1
3837: ST_TO_ADDR
// uc_nation = nation ;
3838: LD_ADDR_OWVAR 21
3842: PUSH
3843: LD_VAR 0 2
3847: ST_TO_ADDR
// hc_gallery =  ;
3848: LD_ADDR_OWVAR 33
3852: PUSH
3853: LD_STRING 
3855: ST_TO_ADDR
// hc_name =  ;
3856: LD_ADDR_OWVAR 26
3860: PUSH
3861: LD_STRING 
3863: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3864: LD_INT 0
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: CALL_OW 380
// un = CreateHuman ;
3881: LD_ADDR_VAR 0 10
3885: PUSH
3886: CALL_OW 44
3890: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3891: LD_VAR 0 10
3895: PPUSH
3896: LD_VAR 0 3
3900: PPUSH
3901: CALL_OW 52
// end ;
3905: GO 3825
3907: POP
3908: POP
// end ;
3909: LD_VAR 0 7
3913: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
// uc_side := GetSide ( b ) ;
3919: LD_ADDR_OWVAR 20
3923: PUSH
3924: LD_VAR 0 2
3928: PPUSH
3929: CALL_OW 255
3933: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3934: LD_ADDR_OWVAR 21
3938: PUSH
3939: LD_VAR 0 2
3943: PPUSH
3944: CALL_OW 248
3948: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3949: LD_INT 0
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 380
// un = CreateHuman ;
3964: LD_ADDR_VAR 0 4
3968: PUSH
3969: CALL_OW 44
3973: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3974: LD_ADDR_VAR 0 5
3978: PUSH
3979: LD_VAR 0 2
3983: PPUSH
3984: CALL_OW 254
3988: PUSH
3989: LD_INT 3
3991: MINUS
3992: ST_TO_ADDR
// if dir < 0 then
3993: LD_VAR 0 5
3997: PUSH
3998: LD_INT 0
4000: LESS
4001: IFFALSE 4017
// dir := 6 + dir ;
4003: LD_ADDR_VAR 0 5
4007: PUSH
4008: LD_INT 6
4010: PUSH
4011: LD_VAR 0 5
4015: PLUS
4016: ST_TO_ADDR
// SetDir ( un , dir ) ;
4017: LD_VAR 0 4
4021: PPUSH
4022: LD_VAR 0 5
4026: PPUSH
4027: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4031: LD_VAR 0 4
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: CALL_OW 52
// end ;
4045: LD_VAR 0 3
4049: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4050: LD_INT 0
4052: PPUSH
4053: PPUSH
4054: PPUSH
// rnd = rand ( 1 , characters ) ;
4055: LD_ADDR_VAR 0 6
4059: PUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 12
4072: ST_TO_ADDR
// for i = 1 to characters do
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: DOUBLE
4079: LD_INT 1
4081: DEC
4082: ST_TO_ADDR
4083: LD_VAR 0 1
4087: PUSH
4088: FOR_TO
4089: IFFALSE 4199
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4091: LD_VAR 0 5
4095: PUSH
4096: LD_VAR 0 6
4100: EQUAL
4101: PUSH
4102: LD_VAR 0 1
4106: PUSH
4107: LD_VAR 0 5
4111: ARRAY
4112: PPUSH
4113: CALL_OW 258
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4144
// Say ( characters [ i ] , dialogMID ) ;
4124: LD_VAR 0 1
4128: PUSH
4129: LD_VAR 0 5
4133: ARRAY
4134: PPUSH
4135: LD_VAR 0 2
4139: PPUSH
4140: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4144: LD_VAR 0 5
4148: PUSH
4149: LD_VAR 0 6
4153: EQUAL
4154: PUSH
4155: LD_VAR 0 1
4159: PUSH
4160: LD_VAR 0 5
4164: ARRAY
4165: PPUSH
4166: CALL_OW 258
4170: PUSH
4171: LD_INT 2
4173: EQUAL
4174: AND
4175: IFFALSE 4197
// Say ( characters [ i ] , dialogFID ) ;
4177: LD_VAR 0 1
4181: PUSH
4182: LD_VAR 0 5
4186: ARRAY
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: CALL_OW 88
// end ;
4197: GO 4088
4199: POP
4200: POP
// end ;
4201: LD_VAR 0 4
4205: RET
// export function PrepareDifficulty ; var tmp ; begin
4206: LD_INT 0
4208: PPUSH
4209: PPUSH
// if Difficulty = 1 then
4210: LD_OWVAR 67
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: IFFALSE 4236
// begin RuSoldMinLevel = 0 ;
4220: LD_ADDR_EXP 16
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4228: LD_ADDR_EXP 17
4232: PUSH
4233: LD_INT 2
4235: ST_TO_ADDR
// end ; if Difficulty = 2 then
4236: LD_OWVAR 67
4240: PUSH
4241: LD_INT 2
4243: EQUAL
4244: IFFALSE 4352
// begin RuSoldMinLevel = 1 ;
4246: LD_ADDR_EXP 16
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4254: LD_ADDR_EXP 17
4258: PUSH
4259: LD_INT 2
4261: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4262: LD_INT 14
4264: PPUSH
4265: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4269: LD_INT 23
4271: PPUSH
4272: CALL_OW 64
// uc_nation = 3 ;
4276: LD_ADDR_OWVAR 21
4280: PUSH
4281: LD_INT 3
4283: ST_TO_ADDR
// uc_side = 3 ;
4284: LD_ADDR_OWVAR 20
4288: PUSH
4289: LD_INT 3
4291: ST_TO_ADDR
// bc_level = 5 ;
4292: LD_ADDR_OWVAR 43
4296: PUSH
4297: LD_INT 5
4299: ST_TO_ADDR
// bc_type = 32 ;
4300: LD_ADDR_OWVAR 42
4304: PUSH
4305: LD_INT 32
4307: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4308: LD_ADDR_VAR 0 2
4312: PUSH
4313: LD_INT 76
4315: PPUSH
4316: LD_INT 91
4318: PPUSH
4319: LD_INT 2
4321: PPUSH
4322: CALL_OW 47
4326: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4327: LD_VAR 0 2
4331: PPUSH
4332: LD_INT 43
4334: PPUSH
4335: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4339: LD_INT 51
4341: PPUSH
4342: LD_INT 3
4344: PPUSH
4345: LD_INT 1
4347: PPUSH
4348: CALL_OW 322
// end ; if Difficulty = 3 then
4352: LD_OWVAR 67
4356: PUSH
4357: LD_INT 3
4359: EQUAL
4360: IFFALSE 4536
// begin RuSoldMinLevel = 1 ;
4362: LD_ADDR_EXP 16
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4370: LD_ADDR_EXP 17
4374: PUSH
4375: LD_INT 3
4377: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4378: LD_INT 13
4380: PPUSH
4381: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4385: LD_INT 14
4387: PPUSH
4388: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4392: LD_INT 26
4394: PPUSH
4395: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4399: LD_INT 23
4401: PPUSH
4402: CALL_OW 64
// uc_nation = 3 ;
4406: LD_ADDR_OWVAR 21
4410: PUSH
4411: LD_INT 3
4413: ST_TO_ADDR
// uc_side = 3 ;
4414: LD_ADDR_OWVAR 20
4418: PUSH
4419: LD_INT 3
4421: ST_TO_ADDR
// bc_level = 5 ;
4422: LD_ADDR_OWVAR 43
4426: PUSH
4427: LD_INT 5
4429: ST_TO_ADDR
// bc_type = 32 ;
4430: LD_ADDR_OWVAR 42
4434: PUSH
4435: LD_INT 32
4437: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: LD_INT 76
4445: PPUSH
4446: LD_INT 91
4448: PPUSH
4449: LD_INT 2
4451: PPUSH
4452: CALL_OW 47
4456: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4457: LD_VAR 0 2
4461: PPUSH
4462: LD_INT 44
4464: PPUSH
4465: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4469: LD_ADDR_VAR 0 2
4473: PUSH
4474: LD_INT 83
4476: PPUSH
4477: LD_INT 84
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: CALL_OW 47
4487: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 43
4495: PPUSH
4496: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4500: LD_INT 51
4502: PPUSH
4503: LD_INT 3
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4513: LD_INT 52
4515: PPUSH
4516: LD_INT 3
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4526: LD_INT 25
4528: PPUSH
4529: LD_INT 44
4531: PPUSH
4532: CALL_OW 431
// end ; end ;
4536: LD_VAR 0 1
4540: RET
// export function EnergyDialog ; begin
4541: LD_INT 0
4543: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4544: LD_INT 46
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: CALL_OW 321
4554: PUSH
4555: LD_INT 1
4557: EQUAL
4558: PUSH
4559: LD_INT 35
4561: PPUSH
4562: LD_INT 1
4564: PPUSH
4565: CALL_OW 321
4569: PUSH
4570: LD_INT 1
4572: EQUAL
4573: AND
4574: IFFALSE 4598
// begin Say ( JMM , D9c-JMM-1 ) ;
4576: LD_EXP 1
4580: PPUSH
4581: LD_STRING D9c-JMM-1
4583: PPUSH
4584: CALL_OW 88
// energyVDialog = 1 ;
4588: LD_ADDR_EXP 33
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// end else
4596: GO 4752
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4598: LD_INT 35
4600: PPUSH
4601: LD_INT 1
4603: PPUSH
4604: CALL_OW 321
4608: PUSH
4609: LD_INT 2
4611: EQUAL
4612: PUSH
4613: LD_EXP 33
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: AND
4622: IFFALSE 4644
// begin Say ( JMM , D9c-JMM-1a ) ;
4624: LD_EXP 1
4628: PPUSH
4629: LD_STRING D9c-JMM-1a
4631: PPUSH
4632: CALL_OW 88
// energyVDialog = 1 ;
4636: LD_ADDR_EXP 33
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4644: LD_INT 46
4646: PPUSH
4647: LD_INT 1
4649: PPUSH
4650: CALL_OW 321
4654: PUSH
4655: LD_INT 2
4657: EQUAL
4658: PUSH
4659: LD_EXP 33
4663: PUSH
4664: LD_INT 0
4666: EQUAL
4667: AND
4668: IFFALSE 4690
// begin Say ( JMM , D9c-JMM-1b ) ;
4670: LD_EXP 1
4674: PPUSH
4675: LD_STRING D9c-JMM-1b
4677: PPUSH
4678: CALL_OW 88
// energyVDialog = 1 ;
4682: LD_ADDR_EXP 33
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4690: LD_INT 46
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 321
4700: PUSH
4701: LD_INT 2
4703: EQUAL
4704: PUSH
4705: LD_INT 21
4707: PPUSH
4708: LD_INT 1
4710: PPUSH
4711: CALL_OW 321
4715: PUSH
4716: LD_INT 2
4718: EQUAL
4719: AND
4720: PUSH
4721: LD_EXP 33
4725: PUSH
4726: LD_INT 0
4728: EQUAL
4729: AND
4730: IFFALSE 4752
// begin Say ( JMM , D9c-JMM-1c ) ;
4732: LD_EXP 1
4736: PPUSH
4737: LD_STRING D9c-JMM-1c
4739: PPUSH
4740: CALL_OW 88
// energyVDialog = 1 ;
4744: LD_ADDR_EXP 33
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// end ; end ; end ;
4752: LD_VAR 0 1
4756: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4757: LD_INT 0
4759: PPUSH
4760: PPUSH
4761: PPUSH
4762: PPUSH
4763: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4764: LD_VAR 0 1
4768: NOT
4769: PUSH
4770: LD_VAR 0 1
4774: PPUSH
4775: CALL_OW 256
4779: PUSH
4780: LD_INT 250
4782: LESS
4783: OR
4784: PUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: CALL_OW 314
4794: PUSH
4795: LD_VAR 0 1
4799: PPUSH
4800: CALL_OW 261
4804: PUSH
4805: LD_INT 20
4807: GREATER
4808: AND
4809: OR
4810: IFFALSE 4814
// exit ;
4812: GO 5179
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4814: LD_VAR 0 1
4818: PPUSH
4819: CALL_OW 261
4823: PUSH
4824: LD_INT 20
4826: LESS
4827: PUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: CALL_OW 110
4837: PUSH
4838: LD_INT 21
4840: EQUAL
4841: NOT
4842: AND
4843: IFFALSE 4870
// begin ComStop ( bulldozer ) ;
4845: LD_VAR 0 1
4849: PPUSH
4850: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4854: LD_VAR 0 1
4858: PPUSH
4859: LD_INT 21
4861: PPUSH
4862: CALL_OW 109
// exit ;
4866: GO 5179
// end else
4868: GO 4897
// if GetFuel ( bulldozer ) > 20 then
4870: LD_VAR 0 1
4874: PPUSH
4875: CALL_OW 261
4879: PUSH
4880: LD_INT 20
4882: GREATER
4883: IFFALSE 4897
// SetTag ( bulldozer , 0 ) ;
4885: LD_VAR 0 1
4889: PPUSH
4890: LD_INT 0
4892: PPUSH
4893: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4897: LD_ADDR_VAR 0 5
4901: PUSH
4902: LD_VAR 0 2
4906: PPUSH
4907: CALL_OW 353
4911: ST_TO_ADDR
// tmp := [ ] ;
4912: LD_ADDR_VAR 0 6
4916: PUSH
4917: EMPTY
4918: ST_TO_ADDR
// for i = 1 to list do
4919: LD_ADDR_VAR 0 4
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_VAR 0 5
4933: PUSH
4934: FOR_TO
4935: IFFALSE 5033
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4937: LD_VAR 0 5
4941: PUSH
4942: LD_VAR 0 4
4946: ARRAY
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: LD_VAR 0 5
4956: PUSH
4957: LD_VAR 0 4
4961: ARRAY
4962: PUSH
4963: LD_INT 2
4965: ARRAY
4966: PPUSH
4967: CALL_OW 554
4971: IFFALSE 5031
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_VAR 0 6
4982: PPUSH
4983: LD_VAR 0 6
4987: PUSH
4988: LD_INT 1
4990: PLUS
4991: PPUSH
4992: LD_VAR 0 5
4996: PUSH
4997: LD_VAR 0 4
5001: ARRAY
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_VAR 0 5
5011: PUSH
5012: LD_VAR 0 4
5016: ARRAY
5017: PUSH
5018: LD_INT 2
5020: ARRAY
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 1
5030: ST_TO_ADDR
// end ;
5031: GO 4934
5033: POP
5034: POP
// ComStop ( bulldozer ) ;
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5044: LD_ADDR_VAR 0 7
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 250
5058: PUSH
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 251
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// for i = tmp downto 1 do
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: DOUBLE
5079: LD_VAR 0 6
5083: INC
5084: ST_TO_ADDR
5085: LD_INT 1
5087: PUSH
5088: FOR_DOWNTO
5089: IFFALSE 5177
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5091: LD_ADDR_VAR 0 7
5095: PUSH
5096: LD_VAR 0 7
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: LD_VAR 0 7
5109: PUSH
5110: LD_INT 2
5112: ARRAY
5113: PPUSH
5114: LD_VAR 0 6
5118: PPUSH
5119: CALL 5280 0 3
5123: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5124: LD_VAR 0 1
5128: PPUSH
5129: LD_VAR 0 7
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: CALL 5184 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5151: LD_ADDR_VAR 0 6
5155: PUSH
5156: LD_VAR 0 6
5160: PPUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_INT 3
5168: ARRAY
5169: PPUSH
5170: CALL_OW 3
5174: ST_TO_ADDR
// end ;
5175: GO 5088
5177: POP
5178: POP
// end ;
5179: LD_VAR 0 3
5183: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5184: LD_INT 0
5186: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_VAR 0 3
5196: PPUSH
5197: CALL_OW 351
5201: PUSH
5202: LD_VAR 0 2
5206: PPUSH
5207: LD_VAR 0 3
5211: PPUSH
5212: CALL_OW 554
5216: AND
5217: PUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 3
5227: PPUSH
5228: CALL_OW 488
5232: AND
5233: PUSH
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_VAR 0 3
5243: PPUSH
5244: CALL_OW 428
5248: PUSH
5249: LD_INT 1
5251: NEG
5252: EQUAL
5253: AND
5254: IFFALSE 5275
// AddComMoveXY ( bulldozer , x , y ) ;
5256: LD_VAR 0 1
5260: PPUSH
5261: LD_VAR 0 2
5265: PPUSH
5266: LD_VAR 0 3
5270: PPUSH
5271: CALL_OW 171
// end ;
5275: LD_VAR 0 4
5279: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
5288: PPUSH
// dist := 99999 ;
5289: LD_ADDR_VAR 0 6
5293: PUSH
5294: LD_INT 99999
5296: ST_TO_ADDR
// for i = 1 to list do
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: DOUBLE
5303: LD_INT 1
5305: DEC
5306: ST_TO_ADDR
5307: LD_VAR 0 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5451
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5315: LD_ADDR_VAR 0 7
5319: PUSH
5320: LD_VAR 0 1
5324: PPUSH
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PUSH
5341: LD_INT 1
5343: ARRAY
5344: PPUSH
5345: LD_VAR 0 3
5349: PUSH
5350: LD_VAR 0 5
5354: ARRAY
5355: PUSH
5356: LD_INT 2
5358: ARRAY
5359: PPUSH
5360: CALL_OW 298
5364: ST_TO_ADDR
// if d = 0 then
5365: LD_VAR 0 7
5369: PUSH
5370: LD_INT 0
5372: EQUAL
5373: IFFALSE 5377
// continue ;
5375: GO 5312
// if d < dist then
5377: LD_VAR 0 7
5381: PUSH
5382: LD_VAR 0 6
5386: LESS
5387: IFFALSE 5449
// begin _x := list [ i ] [ 1 ] ;
5389: LD_ADDR_VAR 0 8
5393: PUSH
5394: LD_VAR 0 3
5398: PUSH
5399: LD_VAR 0 5
5403: ARRAY
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5409: LD_ADDR_VAR 0 9
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: LD_VAR 0 5
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: ST_TO_ADDR
// _i := i ;
5429: LD_ADDR_VAR 0 10
5433: PUSH
5434: LD_VAR 0 5
5438: ST_TO_ADDR
// dist := d ;
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_VAR 0 7
5448: ST_TO_ADDR
// end ; end ;
5449: GO 5312
5451: POP
5452: POP
// result := [ _x , _y , _i , dist ] ;
5453: LD_ADDR_VAR 0 4
5457: PUSH
5458: LD_VAR 0 8
5462: PUSH
5463: LD_VAR 0 9
5467: PUSH
5468: LD_VAR 0 10
5472: PUSH
5473: LD_VAR 0 6
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: ST_TO_ADDR
// end ;
5484: LD_VAR 0 4
5488: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5489: LD_INT 0
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
// for i = 1 to 72 do
5495: LD_ADDR_VAR 0 5
5499: PUSH
5500: DOUBLE
5501: LD_INT 1
5503: DEC
5504: ST_TO_ADDR
5505: LD_INT 72
5507: PUSH
5508: FOR_TO
5509: IFFALSE 5567
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5511: LD_VAR 0 5
5515: PPUSH
5516: LD_VAR 0 1
5520: PPUSH
5521: CALL_OW 321
5525: PUSH
5526: LD_INT 1
5528: EQUAL
5529: PUSH
5530: LD_VAR 0 5
5534: PPUSH
5535: LD_VAR 0 3
5539: PPUSH
5540: CALL_OW 482
5544: PUSH
5545: LD_INT 1
5547: EQUAL
5548: AND
5549: IFFALSE 5565
// AddComResearch ( lab , i ) ;
5551: LD_VAR 0 2
5555: PPUSH
5556: LD_VAR 0 5
5560: PPUSH
5561: CALL_OW 184
5565: GO 5508
5567: POP
5568: POP
// end ;
5569: LD_VAR 0 4
5573: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5574: LD_INT 0
5576: PPUSH
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5581: LD_ADDR_VAR 0 6
5585: PUSH
5586: LD_INT 22
5588: PUSH
5589: LD_VAR 0 1
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PUSH
5598: LD_INT 25
5600: PUSH
5601: LD_INT 2
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 24
5610: PUSH
5611: LD_INT 1000
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: PPUSH
5623: CALL_OW 69
5627: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5628: LD_ADDR_VAR 0 4
5632: PUSH
5633: LD_INT 22
5635: PUSH
5636: LD_VAR 0 1
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 21
5647: PUSH
5648: LD_INT 3
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: PUSH
5655: LD_INT 3
5657: PUSH
5658: LD_INT 24
5660: PUSH
5661: LD_INT 1000
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: PUSH
5677: EMPTY
5678: LIST
5679: PPUSH
5680: CALL_OW 69
5684: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5685: LD_VAR 0 4
5689: PUSH
5690: LD_INT 0
5692: GREATER
5693: PUSH
5694: LD_VAR 0 6
5698: PUSH
5699: LD_INT 0
5701: GREATER
5702: AND
5703: IFFALSE 5769
// begin for i in engineerOk_list do
5705: LD_ADDR_VAR 0 5
5709: PUSH
5710: LD_VAR 0 6
5714: PUSH
5715: FOR_IN
5716: IFFALSE 5767
// begin for j in buildings_list do
5718: LD_ADDR_VAR 0 7
5722: PUSH
5723: LD_VAR 0 4
5727: PUSH
5728: FOR_IN
5729: IFFALSE 5763
// begin AddComExitBuilding ( i ) ;
5731: LD_VAR 0 5
5735: PPUSH
5736: CALL_OW 182
// wait ( 0 0$1 ) ;
5740: LD_INT 35
5742: PPUSH
5743: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5747: LD_VAR 0 5
5751: PPUSH
5752: LD_VAR 0 7
5756: PPUSH
5757: CALL_OW 190
// end ;
5761: GO 5728
5763: POP
5764: POP
// end ;
5765: GO 5715
5767: POP
5768: POP
// end ; if buildings_list = 0 then
5769: LD_VAR 0 4
5773: PUSH
5774: LD_INT 0
5776: EQUAL
5777: IFFALSE 5810
// begin for i in engineerOK_list do
5779: LD_ADDR_VAR 0 5
5783: PUSH
5784: LD_VAR 0 6
5788: PUSH
5789: FOR_IN
5790: IFFALSE 5808
// begin ComEnterUnit ( i , building ) ;
5792: LD_VAR 0 5
5796: PPUSH
5797: LD_VAR 0 2
5801: PPUSH
5802: CALL_OW 120
// end ;
5806: GO 5789
5808: POP
5809: POP
// end ; end ;
5810: LD_VAR 0 3
5814: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5815: LD_INT 0
5817: PPUSH
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
5822: LD_ADDR_VAR 0 6
5826: PUSH
5827: LD_INT 22
5829: PUSH
5830: LD_VAR 0 1
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 25
5841: PUSH
5842: LD_INT 4
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PUSH
5849: LD_INT 24
5851: PUSH
5852: LD_INT 250
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 69
5868: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5869: LD_ADDR_VAR 0 9
5873: PUSH
5874: LD_VAR 0 3
5878: PPUSH
5879: LD_INT 22
5881: PUSH
5882: LD_VAR 0 1
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 21
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 3
5903: PUSH
5904: LD_INT 24
5906: PUSH
5907: LD_INT 750
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 70
5927: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5928: LD_VAR 0 9
5932: PUSH
5933: LD_INT 0
5935: GREATER
5936: PUSH
5937: LD_VAR 0 6
5941: PUSH
5942: LD_INT 0
5944: GREATER
5945: AND
5946: IFFALSE 6073
// begin for i = 1 to damageUnits do
5948: LD_ADDR_VAR 0 7
5952: PUSH
5953: DOUBLE
5954: LD_INT 1
5956: DEC
5957: ST_TO_ADDR
5958: LD_VAR 0 9
5962: PUSH
5963: FOR_TO
5964: IFFALSE 5988
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5966: LD_VAR 0 9
5970: PUSH
5971: LD_VAR 0 7
5975: ARRAY
5976: PPUSH
5977: LD_VAR 0 2
5981: PPUSH
5982: CALL_OW 113
5986: GO 5963
5988: POP
5989: POP
// for i in sci_list do
5990: LD_ADDR_VAR 0 7
5994: PUSH
5995: LD_VAR 0 6
5999: PUSH
6000: FOR_IN
6001: IFFALSE 6069
// begin ComExitBuilding ( i ) ;
6003: LD_VAR 0 7
6007: PPUSH
6008: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6012: LD_ADDR_VAR 0 8
6016: PUSH
6017: LD_VAR 0 2
6021: PPUSH
6022: LD_INT 22
6024: PUSH
6025: LD_VAR 0 1
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PPUSH
6034: CALL_OW 70
6038: PUSH
6039: FOR_IN
6040: IFFALSE 6065
// begin AddComHeal ( i , j ) ;
6042: LD_VAR 0 7
6046: PPUSH
6047: LD_VAR 0 8
6051: PPUSH
6052: CALL_OW 188
// wait ( 1 1$0 ) ;
6056: LD_INT 2100
6058: PPUSH
6059: CALL_OW 67
// end ;
6063: GO 6039
6065: POP
6066: POP
// end ;
6067: GO 6000
6069: POP
6070: POP
// end else
6071: GO 6087
// begin AddComEnterUnit ( sci_list , build ) ;
6073: LD_VAR 0 6
6077: PPUSH
6078: LD_VAR 0 4
6082: PPUSH
6083: CALL_OW 180
// end ; end ;
6087: LD_VAR 0 5
6091: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6092: LD_INT 0
6094: PPUSH
6095: PPUSH
6096: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6097: LD_INT 22
6099: PUSH
6100: LD_VAR 0 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 21
6111: PUSH
6112: LD_INT 2
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: CALL_OW 69
6127: PUSH
6128: LD_VAR 0 3
6132: LESSEQUAL
6133: IFFALSE 6241
// begin for i = 1 to vehCount do
6135: LD_ADDR_VAR 0 9
6139: PUSH
6140: DOUBLE
6141: LD_INT 1
6143: DEC
6144: ST_TO_ADDR
6145: LD_VAR 0 3
6149: PUSH
6150: FOR_TO
6151: IFFALSE 6239
// begin weapon = weaponTab [ i ] ;
6153: LD_ADDR_VAR 0 10
6157: PUSH
6158: LD_VAR 0 4
6162: PUSH
6163: LD_VAR 0 9
6167: ARRAY
6168: ST_TO_ADDR
// if weapon = 46 then
6169: LD_VAR 0 10
6173: PUSH
6174: LD_INT 46
6176: EQUAL
6177: IFFALSE 6208
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6179: LD_VAR 0 2
6183: PPUSH
6184: LD_INT 24
6186: PPUSH
6187: LD_VAR 0 5
6191: PPUSH
6192: LD_VAR 0 6
6196: PPUSH
6197: LD_VAR 0 10
6201: PPUSH
6202: CALL_OW 185
// end else
6206: GO 6237
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6208: LD_VAR 0 2
6212: PPUSH
6213: LD_VAR 0 7
6217: PPUSH
6218: LD_VAR 0 5
6222: PPUSH
6223: LD_VAR 0 6
6227: PPUSH
6228: LD_VAR 0 10
6232: PPUSH
6233: CALL_OW 185
// end ; end ;
6237: GO 6150
6239: POP
6240: POP
// end ; end ;
6241: LD_VAR 0 8
6245: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6246: LD_INT 0
6248: PPUSH
6249: PPUSH
6250: PPUSH
6251: PPUSH
6252: PPUSH
// for i := 1 to russianTanks do
6253: LD_ADDR_VAR 0 4
6257: PUSH
6258: DOUBLE
6259: LD_INT 1
6261: DEC
6262: ST_TO_ADDR
6263: LD_EXP 18
6267: PUSH
6268: FOR_TO
6269: IFFALSE 6614
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6271: LD_VAR 0 4
6275: PUSH
6276: LD_INT 5
6278: PUSH
6279: LD_INT 6
6281: PUSH
6282: LD_INT 6
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: PUSH
6290: LD_OWVAR 67
6294: ARRAY
6295: EQUAL
6296: IFFALSE 6612
// begin repeat wait ( 0 0$1 ) ;
6298: LD_INT 35
6300: PPUSH
6301: CALL_OW 67
// for i in russianTanks do
6305: LD_ADDR_VAR 0 4
6309: PUSH
6310: LD_EXP 18
6314: PUSH
6315: FOR_IN
6316: IFFALSE 6600
// begin if GetLives ( i ) < 659 then
6318: LD_VAR 0 4
6322: PPUSH
6323: CALL_OW 256
6327: PUSH
6328: LD_INT 659
6330: LESS
6331: IFFALSE 6419
// begin tmp = i ;
6333: LD_ADDR_VAR 0 5
6337: PUSH
6338: LD_VAR 0 4
6342: ST_TO_ADDR
// for i := 1 to russianTanks do
6343: LD_ADDR_VAR 0 4
6347: PUSH
6348: DOUBLE
6349: LD_INT 1
6351: DEC
6352: ST_TO_ADDR
6353: LD_EXP 18
6357: PUSH
6358: FOR_TO
6359: IFFALSE 6417
// begin if tmp = russianTanks [ i ] then
6361: LD_VAR 0 5
6365: PUSH
6366: LD_EXP 18
6370: PUSH
6371: LD_VAR 0 4
6375: ARRAY
6376: EQUAL
6377: IFFALSE 6415
// begin russianTanks = Delete ( russianTanks , i ) ;
6379: LD_ADDR_EXP 18
6383: PUSH
6384: LD_EXP 18
6388: PPUSH
6389: LD_VAR 0 4
6393: PPUSH
6394: CALL_OW 3
6398: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6399: LD_ADDR_EXP 19
6403: PUSH
6404: LD_EXP 19
6408: PUSH
6409: LD_VAR 0 5
6413: ADD
6414: ST_TO_ADDR
// end ; end ;
6415: GO 6358
6417: POP
6418: POP
// end ; wait ( 0 0$1 ) ;
6419: LD_INT 35
6421: PPUSH
6422: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6426: LD_ADDR_VAR 0 6
6430: PUSH
6431: LD_INT 22
6433: PUSH
6434: LD_VAR 0 2
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PPUSH
6443: CALL_OW 69
6447: PPUSH
6448: LD_VAR 0 4
6452: PPUSH
6453: CALL_OW 74
6457: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6458: LD_ADDR_VAR 0 7
6462: PUSH
6463: LD_INT 22
6465: PUSH
6466: LD_VAR 0 2
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: LD_INT 59
6480: PUSH
6481: EMPTY
6482: LIST
6483: PUSH
6484: LD_INT 21
6486: PUSH
6487: LD_INT 1
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 21
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: PPUSH
6517: CALL_OW 69
6521: PPUSH
6522: LD_VAR 0 4
6526: PPUSH
6527: CALL_OW 74
6531: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6532: LD_VAR 0 4
6536: PPUSH
6537: LD_VAR 0 6
6541: PPUSH
6542: CALL_OW 296
6546: PUSH
6547: LD_INT 8
6549: PLUS
6550: PUSH
6551: LD_VAR 0 4
6555: PPUSH
6556: LD_VAR 0 7
6560: PPUSH
6561: CALL_OW 296
6565: LESS
6566: IFFALSE 6584
// begin ComAttackUnit ( i , target1 ) ;
6568: LD_VAR 0 4
6572: PPUSH
6573: LD_VAR 0 6
6577: PPUSH
6578: CALL_OW 115
// end else
6582: GO 6598
// begin ComAttackUnit ( i , target2 ) ;
6584: LD_VAR 0 4
6588: PPUSH
6589: LD_VAR 0 7
6593: PPUSH
6594: CALL_OW 115
// end ; end ;
6598: GO 6315
6600: POP
6601: POP
// until russianTanks = 0 ;
6602: LD_EXP 18
6606: PUSH
6607: LD_INT 0
6609: EQUAL
6610: IFFALSE 6298
// end ; end ;
6612: GO 6268
6614: POP
6615: POP
// end ;
6616: LD_VAR 0 3
6620: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6621: LD_INT 0
6623: PPUSH
6624: PPUSH
6625: PPUSH
6626: PPUSH
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
// for i = 1 to medicCount do
6634: LD_ADDR_VAR 0 14
6638: PUSH
6639: DOUBLE
6640: LD_INT 1
6642: DEC
6643: ST_TO_ADDR
6644: LD_VAR 0 7
6648: PUSH
6649: FOR_TO
6650: IFFALSE 6732
// begin uc_side = side ;
6652: LD_ADDR_OWVAR 20
6656: PUSH
6657: LD_VAR 0 1
6661: ST_TO_ADDR
// uc_nation = nation ;
6662: LD_ADDR_OWVAR 21
6666: PUSH
6667: LD_VAR 0 2
6671: ST_TO_ADDR
// hc_name =  ;
6672: LD_ADDR_OWVAR 26
6676: PUSH
6677: LD_STRING 
6679: ST_TO_ADDR
// hc_gallery =  ;
6680: LD_ADDR_OWVAR 33
6684: PUSH
6685: LD_STRING 
6687: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6688: LD_INT 0
6690: PPUSH
6691: LD_INT 4
6693: PPUSH
6694: LD_VAR 0 8
6698: PPUSH
6699: CALL_OW 380
// un = CreateHuman ;
6703: LD_ADDR_VAR 0 16
6707: PUSH
6708: CALL_OW 44
6712: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6713: LD_VAR 0 16
6717: PPUSH
6718: LD_VAR 0 9
6722: PPUSH
6723: LD_INT 0
6725: PPUSH
6726: CALL_OW 49
// end ;
6730: GO 6649
6732: POP
6733: POP
// for i = 1 to soldierCount do
6734: LD_ADDR_VAR 0 14
6738: PUSH
6739: DOUBLE
6740: LD_INT 1
6742: DEC
6743: ST_TO_ADDR
6744: LD_VAR 0 3
6748: PUSH
6749: FOR_TO
6750: IFFALSE 6832
// begin uc_side = side ;
6752: LD_ADDR_OWVAR 20
6756: PUSH
6757: LD_VAR 0 1
6761: ST_TO_ADDR
// uc_nation = nation ;
6762: LD_ADDR_OWVAR 21
6766: PUSH
6767: LD_VAR 0 2
6771: ST_TO_ADDR
// hc_name =  ;
6772: LD_ADDR_OWVAR 26
6776: PUSH
6777: LD_STRING 
6779: ST_TO_ADDR
// hc_gallery =  ;
6780: LD_ADDR_OWVAR 33
6784: PUSH
6785: LD_STRING 
6787: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6788: LD_INT 0
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_VAR 0 8
6798: PPUSH
6799: CALL_OW 380
// un = CreateHuman ;
6803: LD_ADDR_VAR 0 16
6807: PUSH
6808: CALL_OW 44
6812: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6813: LD_VAR 0 16
6817: PPUSH
6818: LD_VAR 0 9
6822: PPUSH
6823: LD_INT 0
6825: PPUSH
6826: CALL_OW 49
// end ;
6830: GO 6749
6832: POP
6833: POP
// for i = 1 to sniperCount do
6834: LD_ADDR_VAR 0 14
6838: PUSH
6839: DOUBLE
6840: LD_INT 1
6842: DEC
6843: ST_TO_ADDR
6844: LD_VAR 0 4
6848: PUSH
6849: FOR_TO
6850: IFFALSE 6932
// begin uc_side = side ;
6852: LD_ADDR_OWVAR 20
6856: PUSH
6857: LD_VAR 0 1
6861: ST_TO_ADDR
// uc_nation = nation ;
6862: LD_ADDR_OWVAR 21
6866: PUSH
6867: LD_VAR 0 2
6871: ST_TO_ADDR
// hc_name =  ;
6872: LD_ADDR_OWVAR 26
6876: PUSH
6877: LD_STRING 
6879: ST_TO_ADDR
// hc_gallery =  ;
6880: LD_ADDR_OWVAR 33
6884: PUSH
6885: LD_STRING 
6887: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6888: LD_INT 0
6890: PPUSH
6891: LD_INT 5
6893: PPUSH
6894: LD_VAR 0 8
6898: PPUSH
6899: CALL_OW 380
// un = CreateHuman ;
6903: LD_ADDR_VAR 0 16
6907: PUSH
6908: CALL_OW 44
6912: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6913: LD_VAR 0 16
6917: PPUSH
6918: LD_VAR 0 9
6922: PPUSH
6923: LD_INT 0
6925: PPUSH
6926: CALL_OW 49
// end ;
6930: GO 6849
6932: POP
6933: POP
// for i = 1 to bazookCount do
6934: LD_ADDR_VAR 0 14
6938: PUSH
6939: DOUBLE
6940: LD_INT 1
6942: DEC
6943: ST_TO_ADDR
6944: LD_VAR 0 5
6948: PUSH
6949: FOR_TO
6950: IFFALSE 7032
// begin uc_side = side ;
6952: LD_ADDR_OWVAR 20
6956: PUSH
6957: LD_VAR 0 1
6961: ST_TO_ADDR
// uc_nation = nation ;
6962: LD_ADDR_OWVAR 21
6966: PUSH
6967: LD_VAR 0 2
6971: ST_TO_ADDR
// hc_name =  ;
6972: LD_ADDR_OWVAR 26
6976: PUSH
6977: LD_STRING 
6979: ST_TO_ADDR
// hc_gallery =  ;
6980: LD_ADDR_OWVAR 33
6984: PUSH
6985: LD_STRING 
6987: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6988: LD_INT 0
6990: PPUSH
6991: LD_INT 9
6993: PPUSH
6994: LD_VAR 0 8
6998: PPUSH
6999: CALL_OW 380
// un = CreateHuman ;
7003: LD_ADDR_VAR 0 16
7007: PUSH
7008: CALL_OW 44
7012: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7013: LD_VAR 0 16
7017: PPUSH
7018: LD_VAR 0 9
7022: PPUSH
7023: LD_INT 0
7025: PPUSH
7026: CALL_OW 49
// end ;
7030: GO 6949
7032: POP
7033: POP
// for i = 1 to mortalCount do
7034: LD_ADDR_VAR 0 14
7038: PUSH
7039: DOUBLE
7040: LD_INT 1
7042: DEC
7043: ST_TO_ADDR
7044: LD_VAR 0 6
7048: PUSH
7049: FOR_TO
7050: IFFALSE 7132
// begin uc_side = side ;
7052: LD_ADDR_OWVAR 20
7056: PUSH
7057: LD_VAR 0 1
7061: ST_TO_ADDR
// uc_nation = nation ;
7062: LD_ADDR_OWVAR 21
7066: PUSH
7067: LD_VAR 0 2
7071: ST_TO_ADDR
// hc_name =  ;
7072: LD_ADDR_OWVAR 26
7076: PUSH
7077: LD_STRING 
7079: ST_TO_ADDR
// hc_gallery =  ;
7080: LD_ADDR_OWVAR 33
7084: PUSH
7085: LD_STRING 
7087: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7088: LD_INT 0
7090: PPUSH
7091: LD_INT 8
7093: PPUSH
7094: LD_VAR 0 8
7098: PPUSH
7099: CALL_OW 380
// un = CreateHuman ;
7103: LD_ADDR_VAR 0 16
7107: PUSH
7108: CALL_OW 44
7112: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7113: LD_VAR 0 16
7117: PPUSH
7118: LD_VAR 0 9
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
// end ;
7130: GO 7049
7132: POP
7133: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7134: LD_ADDR_VAR 0 19
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 2
7153: PUSH
7154: LD_INT 25
7156: PUSH
7157: LD_INT 1
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 25
7166: PUSH
7167: LD_INT 5
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 25
7176: PUSH
7177: LD_INT 8
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 25
7186: PUSH
7187: LD_INT 9
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7210: LD_ADDR_VAR 0 18
7214: PUSH
7215: LD_INT 22
7217: PUSH
7218: LD_VAR 0 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 25
7229: PUSH
7230: LD_INT 4
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PPUSH
7241: CALL_OW 69
7245: ST_TO_ADDR
// for i in medic_list do
7246: LD_ADDR_VAR 0 14
7250: PUSH
7251: LD_VAR 0 18
7255: PUSH
7256: FOR_IN
7257: IFFALSE 7275
// ComMoveToArea ( i , healArea ) ;
7259: LD_VAR 0 14
7263: PPUSH
7264: LD_VAR 0 10
7268: PPUSH
7269: CALL_OW 113
7273: GO 7256
7275: POP
7276: POP
// if strategy = 1 then
7277: LD_VAR 0 12
7281: PUSH
7282: LD_INT 1
7284: EQUAL
7285: IFFALSE 8020
// begin repeat wait ( 0 0$3 ) ;
7287: LD_INT 105
7289: PPUSH
7290: CALL_OW 67
// for i in soldiersOK_list do
7294: LD_ADDR_VAR 0 14
7298: PUSH
7299: LD_VAR 0 19
7303: PUSH
7304: FOR_IN
7305: IFFALSE 7369
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7307: LD_VAR 0 14
7311: PPUSH
7312: LD_INT 91
7314: PPUSH
7315: LD_INT 63
7317: PPUSH
7318: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7322: LD_VAR 0 14
7326: PPUSH
7327: LD_INT 101
7329: PPUSH
7330: LD_INT 53
7332: PPUSH
7333: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7337: LD_VAR 0 14
7341: PPUSH
7342: LD_INT 75
7344: PPUSH
7345: LD_INT 23
7347: PPUSH
7348: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7352: LD_VAR 0 14
7356: PPUSH
7357: LD_INT 78
7359: PPUSH
7360: LD_INT 8
7362: PPUSH
7363: CALL_OW 174
// end ;
7367: GO 7304
7369: POP
7370: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
7371: LD_INT 15
7373: PPUSH
7374: LD_INT 22
7376: PUSH
7377: LD_VAR 0 1
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 70
7390: PUSH
7391: LD_INT 2
7393: GREATER
7394: IFFALSE 7287
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7403: LD_ADDR_VAR 0 17
7407: PUSH
7408: LD_INT 22
7410: PUSH
7411: LD_VAR 0 1
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 1
7422: PUSH
7423: LD_INT 3
7425: PUSH
7426: LD_INT 24
7428: PUSH
7429: LD_INT 550
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 24
7442: PUSH
7443: LD_INT 250
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7464: LD_ADDR_VAR 0 19
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_VAR 0 1
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: LD_INT 25
7486: PUSH
7487: LD_INT 1
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 25
7496: PUSH
7497: LD_INT 5
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 25
7506: PUSH
7507: LD_INT 8
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 25
7516: PUSH
7517: LD_INT 9
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 24
7533: PUSH
7534: LD_INT 1000
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: PPUSH
7546: CALL_OW 69
7550: ST_TO_ADDR
// if medicCount > 0 then
7551: LD_VAR 0 7
7555: PUSH
7556: LD_INT 0
7558: GREATER
7559: IFFALSE 7633
// begin if damageUnit_list > 0 then
7561: LD_VAR 0 17
7565: PUSH
7566: LD_INT 0
7568: GREATER
7569: IFFALSE 7633
// begin for i in damageUnit_list do
7571: LD_ADDR_VAR 0 14
7575: PUSH
7576: LD_VAR 0 17
7580: PUSH
7581: FOR_IN
7582: IFFALSE 7631
// begin ComMoveToArea ( i , healArea ) ;
7584: LD_VAR 0 14
7588: PPUSH
7589: LD_VAR 0 10
7593: PPUSH
7594: CALL_OW 113
// for j in medic_list do
7598: LD_ADDR_VAR 0 15
7602: PUSH
7603: LD_VAR 0 18
7607: PUSH
7608: FOR_IN
7609: IFFALSE 7627
// AddComHeal ( j , i ) ;
7611: LD_VAR 0 15
7615: PPUSH
7616: LD_VAR 0 14
7620: PPUSH
7621: CALL_OW 188
7625: GO 7608
7627: POP
7628: POP
// end ;
7629: GO 7581
7631: POP
7632: POP
// end ; end ; for i in soldiersOK_list do
7633: LD_ADDR_VAR 0 14
7637: PUSH
7638: LD_VAR 0 19
7642: PUSH
7643: FOR_IN
7644: IFFALSE 7820
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7646: LD_ADDR_VAR 0 22
7650: PUSH
7651: LD_INT 22
7653: PUSH
7654: LD_VAR 0 11
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 69
7667: PPUSH
7668: LD_VAR 0 14
7672: PPUSH
7673: CALL_OW 74
7677: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7678: LD_ADDR_VAR 0 23
7682: PUSH
7683: LD_INT 22
7685: PUSH
7686: LD_VAR 0 11
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 59
7700: PUSH
7701: EMPTY
7702: LIST
7703: PUSH
7704: LD_INT 21
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 21
7716: PUSH
7717: LD_INT 2
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: PPUSH
7737: CALL_OW 69
7741: PPUSH
7742: LD_VAR 0 14
7746: PPUSH
7747: CALL_OW 74
7751: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7752: LD_VAR 0 14
7756: PPUSH
7757: LD_VAR 0 22
7761: PPUSH
7762: CALL_OW 296
7766: PUSH
7767: LD_INT 8
7769: PLUS
7770: PUSH
7771: LD_VAR 0 14
7775: PPUSH
7776: LD_VAR 0 23
7780: PPUSH
7781: CALL_OW 296
7785: LESS
7786: IFFALSE 7804
// begin ComAttackUnit ( i , target1 ) ;
7788: LD_VAR 0 14
7792: PPUSH
7793: LD_VAR 0 22
7797: PPUSH
7798: CALL_OW 115
// end else
7802: GO 7818
// begin ComAttackUnit ( i , target2 ) ;
7804: LD_VAR 0 14
7808: PPUSH
7809: LD_VAR 0 23
7813: PPUSH
7814: CALL_OW 115
// end ; end ;
7818: GO 7643
7820: POP
7821: POP
// for i in soldiersOK_list do
7822: LD_ADDR_VAR 0 14
7826: PUSH
7827: LD_VAR 0 19
7831: PUSH
7832: FOR_IN
7833: IFFALSE 8009
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7835: LD_ADDR_VAR 0 22
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_VAR 0 11
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 69
7856: PPUSH
7857: LD_VAR 0 14
7861: PPUSH
7862: CALL_OW 74
7866: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7867: LD_ADDR_VAR 0 23
7871: PUSH
7872: LD_INT 22
7874: PUSH
7875: LD_VAR 0 11
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 2
7886: PUSH
7887: LD_INT 59
7889: PUSH
7890: EMPTY
7891: LIST
7892: PUSH
7893: LD_INT 21
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 21
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: PPUSH
7926: CALL_OW 69
7930: PPUSH
7931: LD_VAR 0 14
7935: PPUSH
7936: CALL_OW 74
7940: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7941: LD_VAR 0 14
7945: PPUSH
7946: LD_VAR 0 22
7950: PPUSH
7951: CALL_OW 296
7955: PUSH
7956: LD_INT 8
7958: PLUS
7959: PUSH
7960: LD_VAR 0 14
7964: PPUSH
7965: LD_VAR 0 23
7969: PPUSH
7970: CALL_OW 296
7974: LESS
7975: IFFALSE 7993
// begin ComAttackUnit ( i , target1 ) ;
7977: LD_VAR 0 14
7981: PPUSH
7982: LD_VAR 0 22
7986: PPUSH
7987: CALL_OW 115
// end else
7991: GO 8007
// begin ComAttackUnit ( i , target2 ) ;
7993: LD_VAR 0 14
7997: PPUSH
7998: LD_VAR 0 23
8002: PPUSH
8003: CALL_OW 115
// end ; end ;
8007: GO 7832
8009: POP
8010: POP
// until soldiersOK_list = [ ] ;
8011: LD_VAR 0 19
8015: PUSH
8016: EMPTY
8017: EQUAL
8018: IFFALSE 7396
// end ; if strategy = 2 then
8020: LD_VAR 0 12
8024: PUSH
8025: LD_INT 2
8027: EQUAL
8028: IFFALSE 8733
// begin repeat wait ( 0 0$1 ) ;
8030: LD_INT 35
8032: PPUSH
8033: CALL_OW 67
// for i in soldiersOK_list do
8037: LD_ADDR_VAR 0 14
8041: PUSH
8042: LD_VAR 0 19
8046: PUSH
8047: FOR_IN
8048: IFFALSE 8082
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8050: LD_VAR 0 14
8054: PPUSH
8055: LD_INT 91
8057: PPUSH
8058: LD_INT 63
8060: PPUSH
8061: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8065: LD_VAR 0 14
8069: PPUSH
8070: LD_INT 75
8072: PPUSH
8073: LD_INT 33
8075: PPUSH
8076: CALL_OW 174
// end ;
8080: GO 8047
8082: POP
8083: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8084: LD_INT 16
8086: PPUSH
8087: LD_INT 22
8089: PUSH
8090: LD_VAR 0 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 70
8103: PUSH
8104: LD_INT 2
8106: GREATER
8107: IFFALSE 8030
// repeat wait ( 0 0$3 ) ;
8109: LD_INT 105
8111: PPUSH
8112: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8116: LD_ADDR_VAR 0 17
8120: PUSH
8121: LD_INT 22
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 1
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: LD_INT 24
8141: PUSH
8142: LD_INT 550
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 24
8155: PUSH
8156: LD_INT 250
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 69
8176: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8177: LD_ADDR_VAR 0 19
8181: PUSH
8182: LD_INT 22
8184: PUSH
8185: LD_VAR 0 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: LD_INT 25
8199: PUSH
8200: LD_INT 1
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 25
8209: PUSH
8210: LD_INT 5
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 25
8219: PUSH
8220: LD_INT 8
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 25
8229: PUSH
8230: LD_INT 9
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 24
8246: PUSH
8247: LD_INT 1000
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 69
8263: ST_TO_ADDR
// if medicCount > 0 then
8264: LD_VAR 0 7
8268: PUSH
8269: LD_INT 0
8271: GREATER
8272: IFFALSE 8346
// begin if damageUnit_list > 0 then
8274: LD_VAR 0 17
8278: PUSH
8279: LD_INT 0
8281: GREATER
8282: IFFALSE 8346
// begin for i in damageUnit_list do
8284: LD_ADDR_VAR 0 14
8288: PUSH
8289: LD_VAR 0 17
8293: PUSH
8294: FOR_IN
8295: IFFALSE 8344
// begin ComMoveToArea ( i , healArea ) ;
8297: LD_VAR 0 14
8301: PPUSH
8302: LD_VAR 0 10
8306: PPUSH
8307: CALL_OW 113
// for j in medic_list do
8311: LD_ADDR_VAR 0 15
8315: PUSH
8316: LD_VAR 0 18
8320: PUSH
8321: FOR_IN
8322: IFFALSE 8340
// AddComHeal ( j , i ) ;
8324: LD_VAR 0 15
8328: PPUSH
8329: LD_VAR 0 14
8333: PPUSH
8334: CALL_OW 188
8338: GO 8321
8340: POP
8341: POP
// end ;
8342: GO 8294
8344: POP
8345: POP
// end ; end ; for i in soldiersOK_list do
8346: LD_ADDR_VAR 0 14
8350: PUSH
8351: LD_VAR 0 19
8355: PUSH
8356: FOR_IN
8357: IFFALSE 8533
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8359: LD_ADDR_VAR 0 22
8363: PUSH
8364: LD_INT 22
8366: PUSH
8367: LD_VAR 0 11
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 69
8380: PPUSH
8381: LD_VAR 0 14
8385: PPUSH
8386: CALL_OW 74
8390: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8391: LD_ADDR_VAR 0 23
8395: PUSH
8396: LD_INT 22
8398: PUSH
8399: LD_VAR 0 11
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: LD_INT 59
8413: PUSH
8414: EMPTY
8415: LIST
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 21
8429: PUSH
8430: LD_INT 2
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: PPUSH
8455: LD_VAR 0 14
8459: PPUSH
8460: CALL_OW 74
8464: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8465: LD_VAR 0 14
8469: PPUSH
8470: LD_VAR 0 22
8474: PPUSH
8475: CALL_OW 296
8479: PUSH
8480: LD_INT 8
8482: PLUS
8483: PUSH
8484: LD_VAR 0 14
8488: PPUSH
8489: LD_VAR 0 23
8493: PPUSH
8494: CALL_OW 296
8498: LESS
8499: IFFALSE 8517
// begin ComAttackUnit ( i , target1 ) ;
8501: LD_VAR 0 14
8505: PPUSH
8506: LD_VAR 0 22
8510: PPUSH
8511: CALL_OW 115
// end else
8515: GO 8531
// begin ComAttackUnit ( i , target2 ) ;
8517: LD_VAR 0 14
8521: PPUSH
8522: LD_VAR 0 23
8526: PPUSH
8527: CALL_OW 115
// end ; end ;
8531: GO 8356
8533: POP
8534: POP
// for i in soldiersOK_list do
8535: LD_ADDR_VAR 0 14
8539: PUSH
8540: LD_VAR 0 19
8544: PUSH
8545: FOR_IN
8546: IFFALSE 8722
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8548: LD_ADDR_VAR 0 22
8552: PUSH
8553: LD_INT 22
8555: PUSH
8556: LD_VAR 0 11
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PPUSH
8565: CALL_OW 69
8569: PPUSH
8570: LD_VAR 0 14
8574: PPUSH
8575: CALL_OW 74
8579: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8580: LD_ADDR_VAR 0 23
8584: PUSH
8585: LD_INT 22
8587: PUSH
8588: LD_VAR 0 11
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 2
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: EMPTY
8604: LIST
8605: PUSH
8606: LD_INT 21
8608: PUSH
8609: LD_INT 1
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: LD_INT 21
8618: PUSH
8619: LD_INT 2
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: PPUSH
8639: CALL_OW 69
8643: PPUSH
8644: LD_VAR 0 14
8648: PPUSH
8649: CALL_OW 74
8653: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8654: LD_VAR 0 14
8658: PPUSH
8659: LD_VAR 0 22
8663: PPUSH
8664: CALL_OW 296
8668: PUSH
8669: LD_INT 8
8671: PLUS
8672: PUSH
8673: LD_VAR 0 14
8677: PPUSH
8678: LD_VAR 0 23
8682: PPUSH
8683: CALL_OW 296
8687: LESS
8688: IFFALSE 8706
// begin ComAttackUnit ( i , target1 ) ;
8690: LD_VAR 0 14
8694: PPUSH
8695: LD_VAR 0 22
8699: PPUSH
8700: CALL_OW 115
// end else
8704: GO 8720
// begin ComAttackUnit ( i , target2 ) ;
8706: LD_VAR 0 14
8710: PPUSH
8711: LD_VAR 0 23
8715: PPUSH
8716: CALL_OW 115
// end ; end ;
8720: GO 8545
8722: POP
8723: POP
// until soldiersOK_list = [ ] ;
8724: LD_VAR 0 19
8728: PUSH
8729: EMPTY
8730: EQUAL
8731: IFFALSE 8109
// end ; end ;
8733: LD_VAR 0 13
8737: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
8738: LD_INT 0
8740: PPUSH
8741: PPUSH
8742: PPUSH
8743: PPUSH
8744: PPUSH
8745: PPUSH
8746: PPUSH
8747: PPUSH
8748: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8749: LD_ADDR_VAR 0 8
8753: PUSH
8754: LD_INT 22
8756: PUSH
8757: LD_VAR 0 1
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 21
8768: PUSH
8769: LD_INT 2
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 24
8778: PUSH
8779: LD_INT 660
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 3
8788: PUSH
8789: LD_INT 58
8791: PUSH
8792: EMPTY
8793: LIST
8794: PUSH
8795: LD_INT 2
8797: PUSH
8798: LD_INT 34
8800: PUSH
8801: LD_INT 43
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 34
8810: PUSH
8811: LD_INT 44
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 34
8820: PUSH
8821: LD_INT 46
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: PPUSH
8845: CALL_OW 69
8849: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8850: LD_ADDR_VAR 0 9
8854: PUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 660
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 69
8903: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8904: LD_ADDR_VAR 0 10
8908: PUSH
8909: LD_VAR 0 2
8913: PPUSH
8914: LD_INT 22
8916: PUSH
8917: LD_VAR 0 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 3
8938: PUSH
8939: LD_INT 24
8941: PUSH
8942: LD_INT 1000
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: PPUSH
8958: CALL_OW 70
8962: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
8963: LD_ADDR_VAR 0 11
8967: PUSH
8968: LD_VAR 0 2
8972: PPUSH
8973: LD_INT 22
8975: PUSH
8976: LD_VAR 0 1
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: LD_INT 21
8987: PUSH
8988: LD_INT 2
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 24
8997: PUSH
8998: LD_INT 1000
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: LD_INT 58
9007: PUSH
9008: EMPTY
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 70
9021: ST_TO_ADDR
// mechanicInside_list = [ ] ;
9022: LD_ADDR_VAR 0 12
9026: PUSH
9027: EMPTY
9028: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9029: LD_ADDR_VAR 0 13
9033: PUSH
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_INT 22
9041: PUSH
9042: LD_VAR 0 1
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PUSH
9051: LD_INT 25
9053: PUSH
9054: LD_INT 3
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PPUSH
9065: CALL_OW 70
9069: ST_TO_ADDR
// if damageVehicle_list > 0 then
9070: LD_VAR 0 9
9074: PUSH
9075: LD_INT 0
9077: GREATER
9078: IFFALSE 9116
// for i in damageVehicle_list do
9080: LD_ADDR_VAR 0 6
9084: PUSH
9085: LD_VAR 0 9
9089: PUSH
9090: FOR_IN
9091: IFFALSE 9114
// ComMoveXY ( i , repX , repY ) ;
9093: LD_VAR 0 6
9097: PPUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: LD_VAR 0 4
9107: PPUSH
9108: CALL_OW 111
9112: GO 9090
9114: POP
9115: POP
// if vehicleNeedRepair_list > 0 then
9116: LD_VAR 0 10
9120: PUSH
9121: LD_INT 0
9123: GREATER
9124: IFFALSE 9211
// begin for i in vehicleNeedRepair_list do
9126: LD_ADDR_VAR 0 6
9130: PUSH
9131: LD_VAR 0 10
9135: PUSH
9136: FOR_IN
9137: IFFALSE 9209
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9139: LD_ADDR_VAR 0 12
9143: PUSH
9144: LD_VAR 0 12
9148: PUSH
9149: LD_VAR 0 6
9153: PPUSH
9154: CALL_OW 313
9158: ADD
9159: ST_TO_ADDR
// for j in mechanicInside_list do
9160: LD_ADDR_VAR 0 7
9164: PUSH
9165: LD_VAR 0 12
9169: PUSH
9170: FOR_IN
9171: IFFALSE 9205
// begin ComExitVehicle ( j ) ;
9173: LD_VAR 0 7
9177: PPUSH
9178: CALL_OW 121
// wait ( 0 0$1 ) ;
9182: LD_INT 35
9184: PPUSH
9185: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
9189: LD_VAR 0 7
9193: PPUSH
9194: LD_VAR 0 6
9198: PPUSH
9199: CALL_OW 189
// end ;
9203: GO 9170
9205: POP
9206: POP
// end ;
9207: GO 9136
9209: POP
9210: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9211: LD_VAR 0 11
9215: PUSH
9216: LD_INT 0
9218: GREATER
9219: IFFALSE 9243
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9221: LD_VAR 0 13
9225: PUSH
9226: LD_INT 1
9228: ARRAY
9229: PPUSH
9230: LD_VAR 0 11
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
9243: LD_VAR 0 8
9247: PUSH
9248: LD_INT 0
9250: GREATER
9251: PUSH
9252: LD_EXP 19
9256: PUSH
9257: LD_INT 0
9259: GREATER
9260: AND
9261: IFFALSE 9504
// begin for i := 1 to vehicleOK_list do
9263: LD_ADDR_VAR 0 6
9267: PUSH
9268: DOUBLE
9269: LD_INT 1
9271: DEC
9272: ST_TO_ADDR
9273: LD_VAR 0 8
9277: PUSH
9278: FOR_TO
9279: IFFALSE 9502
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
9281: LD_VAR 0 6
9285: PUSH
9286: LD_INT 5
9288: PUSH
9289: LD_INT 6
9291: PUSH
9292: LD_INT 6
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: LD_OWVAR 67
9304: ARRAY
9305: EQUAL
9306: IFFALSE 9500
// begin for i in vehicleOk_list do
9308: LD_ADDR_VAR 0 6
9312: PUSH
9313: LD_VAR 0 8
9317: PUSH
9318: FOR_IN
9319: IFFALSE 9339
// russianTanks = russianTanks ^ i ;
9321: LD_ADDR_EXP 18
9325: PUSH
9326: LD_EXP 18
9330: PUSH
9331: LD_VAR 0 6
9335: ADD
9336: ST_TO_ADDR
9337: GO 9318
9339: POP
9340: POP
// for i in vehicleOK_list do
9341: LD_ADDR_VAR 0 6
9345: PUSH
9346: LD_VAR 0 8
9350: PUSH
9351: FOR_IN
9352: IFFALSE 9368
// SetFuel ( i , 100 ) ;
9354: LD_VAR 0 6
9358: PPUSH
9359: LD_INT 100
9361: PPUSH
9362: CALL_OW 240
9366: GO 9351
9368: POP
9369: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9370: LD_ADDR_EXP 19
9374: PUSH
9375: LD_EXP 19
9379: PPUSH
9380: LD_INT 1
9382: PPUSH
9383: CALL_OW 3
9387: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9388: LD_ADDR_EXP 19
9392: PUSH
9393: LD_EXP 19
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 3
9405: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9406: LD_ADDR_EXP 19
9410: PUSH
9411: LD_EXP 19
9415: PPUSH
9416: LD_INT 1
9418: PPUSH
9419: CALL_OW 3
9423: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9424: LD_ADDR_EXP 19
9428: PUSH
9429: LD_EXP 19
9433: PPUSH
9434: LD_INT 1
9436: PPUSH
9437: CALL_OW 3
9441: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9442: LD_ADDR_EXP 19
9446: PUSH
9447: LD_EXP 19
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: CALL_OW 3
9459: ST_TO_ADDR
// if Difficulty = 2 or Difficulty = 3 then
9460: LD_OWVAR 67
9464: PUSH
9465: LD_INT 2
9467: EQUAL
9468: PUSH
9469: LD_OWVAR 67
9473: PUSH
9474: LD_INT 3
9476: EQUAL
9477: OR
9478: IFFALSE 9498
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9480: LD_ADDR_EXP 19
9484: PUSH
9485: LD_EXP 19
9489: PPUSH
9490: LD_INT 1
9492: PPUSH
9493: CALL_OW 3
9497: ST_TO_ADDR
// break ;
9498: GO 9502
// end ; end ;
9500: GO 9278
9502: POP
9503: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9504: LD_ADDR_VAR 0 6
9508: PUSH
9509: LD_VAR 0 2
9513: PPUSH
9514: LD_INT 22
9516: PUSH
9517: LD_VAR 0 1
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 25
9528: PUSH
9529: LD_INT 3
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 70
9544: NOT
9545: PUSH
9546: FOR_IN
9547: IFFALSE 9570
// ComMoveXY ( i , repX , repY ) ;
9549: LD_VAR 0 6
9553: PPUSH
9554: LD_VAR 0 3
9558: PPUSH
9559: LD_VAR 0 4
9563: PPUSH
9564: CALL_OW 111
9568: GO 9546
9570: POP
9571: POP
// end ;
9572: LD_VAR 0 5
9576: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9577: LD_INT 0
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
// amChassisTab = [ ] ;
9590: LD_ADDR_VAR 0 19
9594: PUSH
9595: EMPTY
9596: ST_TO_ADDR
// arChassisTab = [ ] ;
9597: LD_ADDR_VAR 0 18
9601: PUSH
9602: EMPTY
9603: ST_TO_ADDR
// ruChassisTab = [ ] ;
9604: LD_ADDR_VAR 0 17
9608: PUSH
9609: EMPTY
9610: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9611: LD_INT 35
9613: PPUSH
9614: CALL_OW 67
// if nation = 1 then
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: EQUAL
9626: IFFALSE 10117
// begin uc_side = side ;
9628: LD_ADDR_OWVAR 20
9632: PUSH
9633: LD_VAR 0 2
9637: ST_TO_ADDR
// uc_nation = nation ;
9638: LD_ADDR_OWVAR 21
9642: PUSH
9643: LD_VAR 0 5
9647: ST_TO_ADDR
// vc_engine = vehengine ;
9648: LD_ADDR_OWVAR 39
9652: PUSH
9653: LD_VAR 0 6
9657: ST_TO_ADDR
// vc_control = vehcontrol ;
9658: LD_ADDR_OWVAR 38
9662: PUSH
9663: LD_VAR 0 7
9667: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9668: LD_ADDR_OWVAR 40
9672: PUSH
9673: LD_VAR 0 10
9677: PUSH
9678: LD_INT 1
9680: PPUSH
9681: LD_VAR 0 10
9685: PPUSH
9686: CALL_OW 12
9690: ARRAY
9691: ST_TO_ADDR
// for j = 1 to AMWeapon do
9692: LD_ADDR_VAR 0 14
9696: PUSH
9697: DOUBLE
9698: LD_INT 1
9700: DEC
9701: ST_TO_ADDR
9702: LD_VAR 0 10
9706: PUSH
9707: FOR_TO
9708: IFFALSE 10009
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9710: LD_VAR 0 10
9714: PUSH
9715: LD_VAR 0 14
9719: ARRAY
9720: PUSH
9721: LD_INT 2
9723: EQUAL
9724: PUSH
9725: LD_VAR 0 10
9729: PUSH
9730: LD_VAR 0 14
9734: ARRAY
9735: PUSH
9736: LD_INT 3
9738: EQUAL
9739: OR
9740: IFFALSE 9793
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9742: LD_ADDR_VAR 0 19
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: LD_INT 2
9752: PUSH
9753: LD_INT 3
9755: PUSH
9756: LD_INT 4
9758: PUSH
9759: LD_INT 5
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9769: LD_ADDR_OWVAR 37
9773: PUSH
9774: LD_VAR 0 19
9778: PUSH
9779: LD_INT 1
9781: PPUSH
9782: LD_VAR 0 19
9786: PPUSH
9787: CALL_OW 12
9791: ARRAY
9792: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9793: LD_VAR 0 10
9797: PUSH
9798: LD_VAR 0 14
9802: ARRAY
9803: PUSH
9804: LD_INT 4
9806: EQUAL
9807: PUSH
9808: LD_VAR 0 10
9812: PUSH
9813: LD_VAR 0 14
9817: ARRAY
9818: PUSH
9819: LD_INT 5
9821: EQUAL
9822: OR
9823: PUSH
9824: LD_VAR 0 10
9828: PUSH
9829: LD_VAR 0 14
9833: ARRAY
9834: PUSH
9835: LD_INT 9
9837: EQUAL
9838: OR
9839: PUSH
9840: LD_VAR 0 10
9844: PUSH
9845: LD_VAR 0 14
9849: ARRAY
9850: PUSH
9851: LD_INT 11
9853: EQUAL
9854: OR
9855: PUSH
9856: LD_VAR 0 10
9860: PUSH
9861: LD_VAR 0 14
9865: ARRAY
9866: PUSH
9867: LD_INT 7
9869: EQUAL
9870: OR
9871: IFFALSE 9920
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9873: LD_ADDR_VAR 0 19
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: LD_INT 3
9883: PUSH
9884: LD_INT 4
9886: PUSH
9887: LD_INT 5
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9896: LD_ADDR_OWVAR 37
9900: PUSH
9901: LD_VAR 0 19
9905: PUSH
9906: LD_INT 1
9908: PPUSH
9909: LD_VAR 0 19
9913: PPUSH
9914: CALL_OW 12
9918: ARRAY
9919: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9920: LD_VAR 0 10
9924: PUSH
9925: LD_VAR 0 14
9929: ARRAY
9930: PUSH
9931: LD_INT 8
9933: EQUAL
9934: PUSH
9935: LD_VAR 0 10
9939: PUSH
9940: LD_VAR 0 14
9944: ARRAY
9945: PUSH
9946: LD_INT 6
9948: EQUAL
9949: OR
9950: PUSH
9951: LD_VAR 0 10
9955: PUSH
9956: LD_VAR 0 14
9960: ARRAY
9961: PUSH
9962: LD_INT 10
9964: EQUAL
9965: OR
9966: IFFALSE 10007
// begin amChassisTab = [ 4 , 5 ] ;
9968: LD_ADDR_VAR 0 19
9972: PUSH
9973: LD_INT 4
9975: PUSH
9976: LD_INT 5
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9983: LD_ADDR_OWVAR 37
9987: PUSH
9988: LD_VAR 0 19
9992: PUSH
9993: LD_INT 1
9995: PPUSH
9996: LD_VAR 0 19
10000: PPUSH
10001: CALL_OW 12
10005: ARRAY
10006: ST_TO_ADDR
// end ; end ;
10007: GO 9707
10009: POP
10010: POP
// veh = CreateVehicle ;
10011: LD_ADDR_VAR 0 16
10015: PUSH
10016: CALL_OW 45
10020: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10021: LD_VAR 0 16
10025: PPUSH
10026: LD_VAR 0 1
10030: PPUSH
10031: LD_INT 0
10033: PPUSH
10034: CALL_OW 49
// if vehControl = 1 then
10038: LD_VAR 0 7
10042: PUSH
10043: LD_INT 1
10045: EQUAL
10046: IFFALSE 10103
// begin hc_gallery =  ;
10048: LD_ADDR_OWVAR 33
10052: PUSH
10053: LD_STRING 
10055: ST_TO_ADDR
// hc_name =  ;
10056: LD_ADDR_OWVAR 26
10060: PUSH
10061: LD_STRING 
10063: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10064: LD_INT 0
10066: PPUSH
10067: LD_INT 3
10069: PPUSH
10070: LD_VAR 0 4
10074: PPUSH
10075: CALL_OW 380
// un = CreateHuman ;
10079: LD_ADDR_VAR 0 15
10083: PUSH
10084: CALL_OW 44
10088: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10089: LD_VAR 0 15
10093: PPUSH
10094: LD_VAR 0 16
10098: PPUSH
10099: CALL_OW 52
// end ; i = i + 1 ;
10103: LD_ADDR_VAR 0 13
10107: PUSH
10108: LD_VAR 0 13
10112: PUSH
10113: LD_INT 1
10115: PLUS
10116: ST_TO_ADDR
// end ; if nation = 2 then
10117: LD_VAR 0 5
10121: PUSH
10122: LD_INT 2
10124: EQUAL
10125: IFFALSE 10549
// begin uc_side = side ;
10127: LD_ADDR_OWVAR 20
10131: PUSH
10132: LD_VAR 0 2
10136: ST_TO_ADDR
// uc_nation = nation ;
10137: LD_ADDR_OWVAR 21
10141: PUSH
10142: LD_VAR 0 5
10146: ST_TO_ADDR
// vc_engine = vehengine ;
10147: LD_ADDR_OWVAR 39
10151: PUSH
10152: LD_VAR 0 6
10156: ST_TO_ADDR
// vc_control = vehcontrol ;
10157: LD_ADDR_OWVAR 38
10161: PUSH
10162: LD_VAR 0 7
10166: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10167: LD_ADDR_OWVAR 40
10171: PUSH
10172: LD_VAR 0 9
10176: PUSH
10177: LD_INT 1
10179: PPUSH
10180: LD_VAR 0 9
10184: PPUSH
10185: CALL_OW 12
10189: ARRAY
10190: ST_TO_ADDR
// for j = 1 to ARWeapons do
10191: LD_ADDR_VAR 0 14
10195: PUSH
10196: DOUBLE
10197: LD_INT 1
10199: DEC
10200: ST_TO_ADDR
10201: LD_VAR 0 9
10205: PUSH
10206: FOR_TO
10207: IFFALSE 10441
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10209: LD_VAR 0 9
10213: PUSH
10214: LD_VAR 0 14
10218: ARRAY
10219: PUSH
10220: LD_INT 24
10222: EQUAL
10223: PUSH
10224: LD_VAR 0 9
10228: PUSH
10229: LD_VAR 0 14
10233: ARRAY
10234: PUSH
10235: LD_INT 22
10237: EQUAL
10238: OR
10239: PUSH
10240: LD_VAR 0 9
10244: PUSH
10245: LD_VAR 0 14
10249: ARRAY
10250: PUSH
10251: LD_INT 23
10253: EQUAL
10254: OR
10255: PUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_VAR 0 14
10265: ARRAY
10266: PUSH
10267: LD_INT 30
10269: EQUAL
10270: OR
10271: IFFALSE 10320
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10273: LD_ADDR_VAR 0 18
10277: PUSH
10278: LD_INT 11
10280: PUSH
10281: LD_INT 12
10283: PUSH
10284: LD_INT 13
10286: PUSH
10287: LD_INT 14
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10296: LD_ADDR_OWVAR 37
10300: PUSH
10301: LD_VAR 0 18
10305: PUSH
10306: LD_INT 1
10308: PPUSH
10309: LD_VAR 0 18
10313: PPUSH
10314: CALL_OW 12
10318: ARRAY
10319: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10320: LD_VAR 0 9
10324: PUSH
10325: LD_VAR 0 14
10329: ARRAY
10330: PUSH
10331: LD_INT 29
10333: EQUAL
10334: PUSH
10335: LD_VAR 0 9
10339: PUSH
10340: LD_VAR 0 14
10344: ARRAY
10345: PUSH
10346: LD_INT 28
10348: EQUAL
10349: OR
10350: PUSH
10351: LD_VAR 0 9
10355: PUSH
10356: LD_VAR 0 14
10360: ARRAY
10361: PUSH
10362: LD_INT 27
10364: EQUAL
10365: OR
10366: PUSH
10367: LD_VAR 0 9
10371: PUSH
10372: LD_VAR 0 14
10376: ARRAY
10377: PUSH
10378: LD_INT 26
10380: EQUAL
10381: OR
10382: PUSH
10383: LD_VAR 0 9
10387: PUSH
10388: LD_VAR 0 14
10392: ARRAY
10393: PUSH
10394: LD_INT 25
10396: EQUAL
10397: OR
10398: IFFALSE 10439
// begin arChassisTab = [ 13 , 14 ] ;
10400: LD_ADDR_VAR 0 18
10404: PUSH
10405: LD_INT 13
10407: PUSH
10408: LD_INT 14
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10415: LD_ADDR_OWVAR 37
10419: PUSH
10420: LD_VAR 0 18
10424: PUSH
10425: LD_INT 1
10427: PPUSH
10428: LD_VAR 0 18
10432: PPUSH
10433: CALL_OW 12
10437: ARRAY
10438: ST_TO_ADDR
// end ; end ;
10439: GO 10206
10441: POP
10442: POP
// veh = CreateVehicle ;
10443: LD_ADDR_VAR 0 16
10447: PUSH
10448: CALL_OW 45
10452: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10453: LD_VAR 0 16
10457: PPUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: LD_INT 0
10465: PPUSH
10466: CALL_OW 49
// if vehcontrol = 1 then
10470: LD_VAR 0 7
10474: PUSH
10475: LD_INT 1
10477: EQUAL
10478: IFFALSE 10535
// begin hc_gallery =  ;
10480: LD_ADDR_OWVAR 33
10484: PUSH
10485: LD_STRING 
10487: ST_TO_ADDR
// hc_name =  ;
10488: LD_ADDR_OWVAR 26
10492: PUSH
10493: LD_STRING 
10495: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10496: LD_INT 0
10498: PPUSH
10499: LD_INT 3
10501: PPUSH
10502: LD_VAR 0 4
10506: PPUSH
10507: CALL_OW 380
// un = CreateHuman ;
10511: LD_ADDR_VAR 0 15
10515: PUSH
10516: CALL_OW 44
10520: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10521: LD_VAR 0 15
10525: PPUSH
10526: LD_VAR 0 16
10530: PPUSH
10531: CALL_OW 52
// end ; i = i + 1 ;
10535: LD_ADDR_VAR 0 13
10539: PUSH
10540: LD_VAR 0 13
10544: PUSH
10545: LD_INT 1
10547: PLUS
10548: ST_TO_ADDR
// end ; if nation = 3 then
10549: LD_VAR 0 5
10553: PUSH
10554: LD_INT 3
10556: EQUAL
10557: IFFALSE 10949
// begin uc_side = side ;
10559: LD_ADDR_OWVAR 20
10563: PUSH
10564: LD_VAR 0 2
10568: ST_TO_ADDR
// uc_nation = nation ;
10569: LD_ADDR_OWVAR 21
10573: PUSH
10574: LD_VAR 0 5
10578: ST_TO_ADDR
// vc_engine = vehengine ;
10579: LD_ADDR_OWVAR 39
10583: PUSH
10584: LD_VAR 0 6
10588: ST_TO_ADDR
// vc_control = vehcontrol ;
10589: LD_ADDR_OWVAR 38
10593: PUSH
10594: LD_VAR 0 7
10598: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10599: LD_ADDR_OWVAR 40
10603: PUSH
10604: LD_VAR 0 8
10608: PUSH
10609: LD_INT 1
10611: PPUSH
10612: LD_VAR 0 8
10616: PPUSH
10617: CALL_OW 12
10621: ARRAY
10622: ST_TO_ADDR
// for j = 1 to RuWeapons do
10623: LD_ADDR_VAR 0 14
10627: PUSH
10628: DOUBLE
10629: LD_INT 1
10631: DEC
10632: ST_TO_ADDR
10633: LD_VAR 0 8
10637: PUSH
10638: FOR_TO
10639: IFFALSE 10841
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10641: LD_VAR 0 8
10645: PUSH
10646: LD_VAR 0 14
10650: ARRAY
10651: PUSH
10652: LD_INT 42
10654: EQUAL
10655: PUSH
10656: LD_VAR 0 8
10660: PUSH
10661: LD_VAR 0 14
10665: ARRAY
10666: PUSH
10667: LD_INT 43
10669: EQUAL
10670: OR
10671: PUSH
10672: LD_VAR 0 8
10676: PUSH
10677: LD_VAR 0 14
10681: ARRAY
10682: PUSH
10683: LD_INT 44
10685: EQUAL
10686: OR
10687: PUSH
10688: LD_VAR 0 8
10692: PUSH
10693: LD_VAR 0 14
10697: ARRAY
10698: PUSH
10699: LD_INT 45
10701: EQUAL
10702: OR
10703: PUSH
10704: LD_VAR 0 8
10708: PUSH
10709: LD_VAR 0 14
10713: ARRAY
10714: PUSH
10715: LD_INT 49
10717: EQUAL
10718: OR
10719: IFFALSE 10768
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10721: LD_ADDR_VAR 0 17
10725: PUSH
10726: LD_INT 21
10728: PUSH
10729: LD_INT 22
10731: PUSH
10732: LD_INT 23
10734: PUSH
10735: LD_INT 24
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10744: LD_ADDR_OWVAR 37
10748: PUSH
10749: LD_VAR 0 17
10753: PUSH
10754: LD_INT 1
10756: PPUSH
10757: LD_VAR 0 17
10761: PPUSH
10762: CALL_OW 12
10766: ARRAY
10767: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10768: LD_VAR 0 8
10772: PUSH
10773: LD_VAR 0 14
10777: ARRAY
10778: PUSH
10779: LD_INT 46
10781: EQUAL
10782: PUSH
10783: LD_VAR 0 8
10787: PUSH
10788: LD_VAR 0 14
10792: ARRAY
10793: PUSH
10794: LD_INT 47
10796: EQUAL
10797: OR
10798: IFFALSE 10839
// begin ruChassisTab = [ 23 , 24 ] ;
10800: LD_ADDR_VAR 0 17
10804: PUSH
10805: LD_INT 23
10807: PUSH
10808: LD_INT 24
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10815: LD_ADDR_OWVAR 37
10819: PUSH
10820: LD_VAR 0 17
10824: PUSH
10825: LD_INT 1
10827: PPUSH
10828: LD_VAR 0 17
10832: PPUSH
10833: CALL_OW 12
10837: ARRAY
10838: ST_TO_ADDR
// end ; end ;
10839: GO 10638
10841: POP
10842: POP
// veh = CreateVehicle ;
10843: LD_ADDR_VAR 0 16
10847: PUSH
10848: CALL_OW 45
10852: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10853: LD_VAR 0 16
10857: PPUSH
10858: LD_VAR 0 1
10862: PPUSH
10863: LD_INT 0
10865: PPUSH
10866: CALL_OW 49
// if vehcontrol = 1 then
10870: LD_VAR 0 7
10874: PUSH
10875: LD_INT 1
10877: EQUAL
10878: IFFALSE 10935
// begin hc_gallery =  ;
10880: LD_ADDR_OWVAR 33
10884: PUSH
10885: LD_STRING 
10887: ST_TO_ADDR
// hc_name =  ;
10888: LD_ADDR_OWVAR 26
10892: PUSH
10893: LD_STRING 
10895: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10896: LD_INT 0
10898: PPUSH
10899: LD_INT 3
10901: PPUSH
10902: LD_VAR 0 4
10906: PPUSH
10907: CALL_OW 380
// un = CreateHuman ;
10911: LD_ADDR_VAR 0 15
10915: PUSH
10916: CALL_OW 44
10920: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10921: LD_VAR 0 15
10925: PPUSH
10926: LD_VAR 0 16
10930: PPUSH
10931: CALL_OW 52
// end ; i = i + 1 ;
10935: LD_ADDR_VAR 0 13
10939: PUSH
10940: LD_VAR 0 13
10944: PUSH
10945: LD_INT 1
10947: PLUS
10948: ST_TO_ADDR
// end ; until i = vehCount ;
10949: LD_VAR 0 13
10953: PUSH
10954: LD_VAR 0 3
10958: EQUAL
10959: IFFALSE 9611
// repeat wait ( 0 0$1 ) ;
10961: LD_INT 35
10963: PPUSH
10964: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10968: LD_ADDR_VAR 0 20
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_VAR 0 2
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 21
10987: PUSH
10988: LD_INT 2
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 24
10997: PUSH
10998: LD_INT 661
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: PPUSH
11010: CALL_OW 69
11014: ST_TO_ADDR
// if vehicleOK_list > 0 then
11015: LD_VAR 0 20
11019: PUSH
11020: LD_INT 0
11022: GREATER
11023: IFFALSE 11214
// begin for i in vehicleOK_list do
11025: LD_ADDR_VAR 0 13
11029: PUSH
11030: LD_VAR 0 20
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11212
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11038: LD_ADDR_VAR 0 21
11042: PUSH
11043: LD_INT 22
11045: PUSH
11046: LD_VAR 0 11
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 69
11059: PPUSH
11060: LD_VAR 0 13
11064: PPUSH
11065: CALL_OW 74
11069: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11070: LD_ADDR_VAR 0 22
11074: PUSH
11075: LD_INT 22
11077: PUSH
11078: LD_VAR 0 11
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: LD_INT 59
11092: PUSH
11093: EMPTY
11094: LIST
11095: PUSH
11096: LD_INT 21
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: PPUSH
11129: CALL_OW 69
11133: PPUSH
11134: LD_VAR 0 13
11138: PPUSH
11139: CALL_OW 74
11143: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11144: LD_VAR 0 13
11148: PPUSH
11149: LD_VAR 0 21
11153: PPUSH
11154: CALL_OW 296
11158: PUSH
11159: LD_INT 8
11161: PLUS
11162: PUSH
11163: LD_VAR 0 13
11167: PPUSH
11168: LD_VAR 0 22
11172: PPUSH
11173: CALL_OW 296
11177: LESS
11178: IFFALSE 11196
// begin ComAttackUnit ( i , target1 ) ;
11180: LD_VAR 0 13
11184: PPUSH
11185: LD_VAR 0 21
11189: PPUSH
11190: CALL_OW 115
// end else
11194: GO 11210
// begin ComAttackUnit ( i , target2 ) ;
11196: LD_VAR 0 13
11200: PPUSH
11201: LD_VAR 0 22
11205: PPUSH
11206: CALL_OW 115
// end ; end ;
11210: GO 11035
11212: POP
11213: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 2
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 21
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PPUSH
11240: CALL_OW 69
11244: PUSH
11245: LD_INT 0
11247: EQUAL
11248: IFFALSE 10961
// end ; end_of_file
11250: LD_VAR 0 12
11254: RET
// every 1 do var i , gammaSquad , startX , startY ;
11255: GO 11257
11257: DISABLE
11258: LD_INT 0
11260: PPUSH
11261: PPUSH
11262: PPUSH
11263: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11264: LD_ADDR_VAR 0 2
11268: PUSH
11269: LD_EXP 8
11273: PUSH
11274: LD_EXP 9
11278: PUSH
11279: LD_EXP 10
11283: PUSH
11284: LD_EXP 11
11288: PUSH
11289: LD_EXP 12
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11301: LD_ADDR_VAR 0 3
11305: PUSH
11306: LD_INT 46
11308: PUSH
11309: LD_INT 45
11311: PUSH
11312: LD_INT 44
11314: PUSH
11315: LD_INT 43
11317: PUSH
11318: LD_INT 42
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11328: LD_ADDR_VAR 0 4
11332: PUSH
11333: LD_INT 14
11335: PUSH
11336: LD_INT 12
11338: PUSH
11339: LD_INT 10
11341: PUSH
11342: LD_INT 8
11344: PUSH
11345: LD_INT 6
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11355: LD_INT 32
11357: PPUSH
11358: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11362: LD_INT 32
11364: PPUSH
11365: LD_INT 51
11367: PPUSH
11368: LD_INT 26
11370: PPUSH
11371: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11375: LD_INT 32
11377: PPUSH
11378: LD_INT 53
11380: PPUSH
11381: LD_INT 23
11383: PPUSH
11384: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11388: LD_INT 32
11390: PPUSH
11391: LD_INT 52
11393: PPUSH
11394: LD_INT 19
11396: PPUSH
11397: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11401: LD_INT 35
11403: PPUSH
11404: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11408: LD_INT 32
11410: PPUSH
11411: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11415: LD_INT 32
11417: PPUSH
11418: CALL_OW 250
11422: PUSH
11423: LD_INT 52
11425: EQUAL
11426: PUSH
11427: LD_INT 32
11429: PPUSH
11430: CALL_OW 251
11434: PUSH
11435: LD_INT 19
11437: EQUAL
11438: AND
11439: IFFALSE 11401
// ComExitVehicle ( JMM ) ;
11441: LD_EXP 1
11445: PPUSH
11446: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11450: LD_EXP 7
11454: PPUSH
11455: LD_EXP 1
11459: PPUSH
11460: CALL_OW 119
// wait ( 0 0$01 ) ;
11464: LD_INT 35
11466: PPUSH
11467: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11471: LD_EXP 1
11475: PPUSH
11476: LD_INT 46
11478: PPUSH
11479: LD_INT 10
11481: PPUSH
11482: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11486: LD_EXP 1
11490: PPUSH
11491: LD_EXP 7
11495: PPUSH
11496: CALL_OW 179
// wait ( 0 0$4 ) ;
11500: LD_INT 140
11502: PPUSH
11503: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11507: LD_EXP 1
11511: PPUSH
11512: LD_STRING D1-JMM-1
11514: PPUSH
11515: CALL_OW 88
// if not dialogue_skipped then
11519: LD_OWVAR 59
11523: NOT
11524: IFFALSE 12181
// begin for i := 1 to gammaSquad do
11526: LD_ADDR_VAR 0 1
11530: PUSH
11531: DOUBLE
11532: LD_INT 1
11534: DEC
11535: ST_TO_ADDR
11536: LD_VAR 0 2
11540: PUSH
11541: FOR_TO
11542: IFFALSE 11603
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11544: LD_VAR 0 2
11548: PUSH
11549: LD_VAR 0 1
11553: ARRAY
11554: PPUSH
11555: LD_VAR 0 3
11559: PUSH
11560: LD_VAR 0 1
11564: ARRAY
11565: PPUSH
11566: LD_VAR 0 4
11570: PUSH
11571: LD_VAR 0 1
11575: ARRAY
11576: PPUSH
11577: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11581: LD_VAR 0 2
11585: PUSH
11586: LD_VAR 0 1
11590: ARRAY
11591: PPUSH
11592: LD_EXP 1
11596: PPUSH
11597: CALL_OW 179
// end ;
11601: GO 11541
11603: POP
11604: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11605: LD_EXP 4
11609: PPUSH
11610: LD_INT 41
11612: PPUSH
11613: LD_INT 4
11615: PPUSH
11616: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11620: LD_EXP 4
11624: PPUSH
11625: LD_EXP 1
11629: PPUSH
11630: CALL_OW 179
// if Lisa = false and Bobby then
11634: LD_EXP 4
11638: PUSH
11639: LD_INT 0
11641: EQUAL
11642: PUSH
11643: LD_EXP 2
11647: AND
11648: IFFALSE 11679
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11650: LD_EXP 2
11654: PPUSH
11655: LD_INT 41
11657: PPUSH
11658: LD_INT 4
11660: PPUSH
11661: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11665: LD_EXP 2
11669: PPUSH
11670: LD_EXP 1
11674: PPUSH
11675: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11679: LD_EXP 4
11683: PUSH
11684: LD_INT 0
11686: EQUAL
11687: PUSH
11688: LD_EXP 2
11692: PUSH
11693: LD_INT 0
11695: EQUAL
11696: AND
11697: PUSH
11698: LD_EXP 3
11702: AND
11703: IFFALSE 11734
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11705: LD_EXP 3
11709: PPUSH
11710: LD_INT 41
11712: PPUSH
11713: LD_INT 4
11715: PPUSH
11716: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11720: LD_EXP 3
11724: PPUSH
11725: LD_EXP 1
11729: PPUSH
11730: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11734: LD_EXP 4
11738: PUSH
11739: LD_INT 0
11741: EQUAL
11742: PUSH
11743: LD_EXP 2
11747: PUSH
11748: LD_INT 0
11750: EQUAL
11751: AND
11752: PUSH
11753: LD_EXP 3
11757: PUSH
11758: LD_INT 0
11760: EQUAL
11761: AND
11762: IFFALSE 11793
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11764: LD_EXP 6
11768: PPUSH
11769: LD_INT 41
11771: PPUSH
11772: LD_INT 4
11774: PPUSH
11775: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11779: LD_EXP 6
11783: PPUSH
11784: LD_EXP 1
11788: PPUSH
11789: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11793: LD_EXP 7
11797: PPUSH
11798: LD_STRING D1-Brown-1
11800: PPUSH
11801: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11805: LD_EXP 1
11809: PPUSH
11810: LD_STRING D1-JMM-2
11812: PPUSH
11813: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11817: LD_EXP 7
11821: PPUSH
11822: LD_STRING D1-Brown-2
11824: PPUSH
11825: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11829: LD_EXP 1
11833: PPUSH
11834: LD_EXP 9
11838: PPUSH
11839: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11843: LD_EXP 9
11847: PPUSH
11848: LD_STRING D1-FSol1-2
11850: PPUSH
11851: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11855: LD_EXP 1
11859: PPUSH
11860: LD_EXP 8
11864: PPUSH
11865: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11869: LD_EXP 8
11873: PPUSH
11874: LD_STRING D1-Sol2-2
11876: PPUSH
11877: CALL_OW 88
// if Lisa then
11881: LD_EXP 4
11885: IFFALSE 11925
// begin ComTurnUnit ( JMM , Lisa ) ;
11887: LD_EXP 1
11891: PPUSH
11892: LD_EXP 4
11896: PPUSH
11897: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11901: LD_EXP 4
11905: PPUSH
11906: LD_STRING D1-Lisa-2
11908: PPUSH
11909: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11913: LD_EXP 1
11917: PPUSH
11918: LD_STRING D1-JMM-3
11920: PPUSH
11921: CALL_OW 88
// end ; if Bobby then
11925: LD_EXP 2
11929: IFFALSE 11969
// begin ComTurnUnit ( JMM , Bobby ) ;
11931: LD_EXP 1
11935: PPUSH
11936: LD_EXP 2
11940: PPUSH
11941: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11945: LD_EXP 2
11949: PPUSH
11950: LD_STRING D1-Bobby-2
11952: PPUSH
11953: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11957: LD_EXP 1
11961: PPUSH
11962: LD_STRING D1-JMM-3
11964: PPUSH
11965: CALL_OW 88
// end ; if Cyrus then
11969: LD_EXP 3
11973: IFFALSE 12013
// begin ComTurnUnit ( JMM , Cyrus ) ;
11975: LD_EXP 1
11979: PPUSH
11980: LD_EXP 3
11984: PPUSH
11985: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11989: LD_EXP 3
11993: PPUSH
11994: LD_STRING D1-Cyrus-2
11996: PPUSH
11997: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12001: LD_EXP 1
12005: PPUSH
12006: LD_STRING D1-JMM-3
12008: PPUSH
12009: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12013: LD_EXP 1
12017: PPUSH
12018: LD_EXP 7
12022: PPUSH
12023: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12027: LD_EXP 1
12031: PPUSH
12032: LD_STRING D1-JMM-3a
12034: PPUSH
12035: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12039: LD_EXP 7
12043: PPUSH
12044: LD_INT 38
12046: PPUSH
12047: LD_INT 5
12049: PPUSH
12050: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12054: LD_EXP 7
12058: PPUSH
12059: LD_EXP 1
12063: PPUSH
12064: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12068: LD_EXP 1
12072: PPUSH
12073: LD_INT 40
12075: PPUSH
12076: LD_INT 7
12078: PPUSH
12079: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12083: LD_EXP 1
12087: PPUSH
12088: LD_EXP 7
12092: PPUSH
12093: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12097: LD_EXP 7
12101: PPUSH
12102: LD_STRING D1-Brown-3
12104: PPUSH
12105: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12109: LD_EXP 14
12113: PPUSH
12114: LD_STRING D1-Har-3
12116: PPUSH
12117: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12121: LD_EXP 1
12125: PPUSH
12126: LD_STRING D1-JMM-4
12128: PPUSH
12129: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12133: LD_EXP 14
12137: PPUSH
12138: LD_STRING D1-Har-4
12140: PPUSH
12141: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12145: LD_EXP 1
12149: PPUSH
12150: LD_STRING D1-JMM-5
12152: PPUSH
12153: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12157: LD_EXP 14
12161: PPUSH
12162: LD_STRING D1-Har-5
12164: PPUSH
12165: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12169: LD_EXP 1
12173: PPUSH
12174: LD_STRING D1-JMM-6
12176: PPUSH
12177: CALL_OW 88
// end ; InGameOff ;
12181: CALL_OW 9
// PrepareRussianConvoy ;
12185: CALL 2806 0 0
// ChangeMissionObjectives ( M1 ) ;
12189: LD_STRING M1
12191: PPUSH
12192: CALL_OW 337
// SaveForQuickRestart ;
12196: CALL_OW 22
// timerStatus = 1 ;
12200: LD_ADDR_EXP 29
12204: PUSH
12205: LD_INT 1
12207: ST_TO_ADDR
// startTimer = 1 ;
12208: LD_ADDR_EXP 30
12212: PUSH
12213: LD_INT 1
12215: ST_TO_ADDR
// bonusAvalaible = 1 ;
12216: LD_ADDR_EXP 42
12220: PUSH
12221: LD_INT 1
12223: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12224: LD_INT 105
12226: PPUSH
12227: CALL_OW 67
// DialogueOn ;
12231: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12235: LD_EXP 12
12239: PPUSH
12240: LD_STRING D9-Mech1-1
12242: PPUSH
12243: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12247: LD_EXP 1
12251: PPUSH
12252: LD_STRING D9-JMM-1
12254: PPUSH
12255: CALL_OW 88
// DialogueOff ;
12259: CALL_OW 7
// end ;
12263: PPOPN 4
12265: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12266: LD_INT 47
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 321
12276: PUSH
12277: LD_INT 2
12279: EQUAL
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 21
12293: PUSH
12294: LD_INT 3
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 3
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: PPUSH
12316: CALL_OW 69
12320: PUSH
12321: LD_INT 0
12323: GREATER
12324: AND
12325: IFFALSE 12555
12327: GO 12329
12329: DISABLE
// begin if IsOk ( Campell ) then
12330: LD_EXP 12
12334: PPUSH
12335: CALL_OW 302
12339: IFFALSE 12355
// begin Say ( Campell , D10-Mech1-1 ) ;
12341: LD_EXP 12
12345: PPUSH
12346: LD_STRING D10-Mech1-1
12348: PPUSH
12349: CALL_OW 88
// end else
12353: GO 12555
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12355: LD_INT 22
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 21
12367: PUSH
12368: LD_INT 1
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 25
12377: PUSH
12378: LD_INT 3
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 26
12387: PUSH
12388: LD_INT 1
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: PUSH
12406: LD_EXP 1
12410: PUSH
12411: EMPTY
12412: LIST
12413: PUSH
12414: LD_INT 0
12416: GREATER
12417: DIFF
12418: IFFALSE 12492
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12420: LD_INT 22
12422: PUSH
12423: LD_INT 1
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 21
12432: PUSH
12433: LD_INT 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 3
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 26
12452: PUSH
12453: LD_INT 1
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PPUSH
12466: CALL_OW 69
12470: PUSH
12471: LD_EXP 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: DIFF
12479: PPUSH
12480: LD_STRING D10-Mech1-1
12482: PPUSH
12483: LD_STRING D10-Mech1-1
12485: PPUSH
12486: CALL 4050 0 3
// end else
12490: GO 12555
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12492: LD_INT 22
12494: PUSH
12495: LD_INT 1
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 21
12504: PUSH
12505: LD_INT 1
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 26
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 1
12529: ARRAY
12530: PPUSH
12531: CALL_OW 69
12535: PUSH
12536: LD_EXP 1
12540: PUSH
12541: EMPTY
12542: LIST
12543: DIFF
12544: PPUSH
12545: LD_STRING D10-Mech1-1
12547: PPUSH
12548: LD_STRING D10-Mech1-1
12550: PPUSH
12551: CALL 4050 0 3
// end ; end ; end ;
12555: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12556: LD_INT 22
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 30
12568: PUSH
12569: LD_INT 32
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 69
12584: PUSH
12585: LD_INT 0
12587: GREATER
12588: PUSH
12589: LD_EXP 32
12593: PUSH
12594: LD_INT 0
12596: EQUAL
12597: AND
12598: IFFALSE 12838
12600: GO 12602
12602: DISABLE
// begin if IsOK ( Claptopn ) then
12603: LD_EXP 11
12607: PPUSH
12608: CALL_OW 302
12612: IFFALSE 12628
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12614: LD_EXP 11
12618: PPUSH
12619: LD_STRING D9b-Eng1-1
12621: PPUSH
12622: CALL_OW 88
// end else
12626: GO 12824
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12628: LD_INT 22
12630: PUSH
12631: LD_INT 1
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 21
12640: PUSH
12641: LD_INT 1
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: LD_INT 25
12650: PUSH
12651: LD_INT 3
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 26
12660: PUSH
12661: LD_INT 1
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 69
12678: PUSH
12679: LD_EXP 1
12683: PUSH
12684: EMPTY
12685: LIST
12686: PUSH
12687: LD_INT 0
12689: GREATER
12690: DIFF
12691: IFFALSE 12765
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12693: LD_INT 22
12695: PUSH
12696: LD_INT 1
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 21
12705: PUSH
12706: LD_INT 1
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 25
12715: PUSH
12716: LD_INT 2
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 26
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: PUSH
12744: LD_EXP 1
12748: PUSH
12749: EMPTY
12750: LIST
12751: DIFF
12752: PPUSH
12753: LD_STRING D9b-Eng1-1
12755: PPUSH
12756: LD_STRING D9b-Eng1-11
12758: PPUSH
12759: CALL 4050 0 3
// end else
12763: GO 12824
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12765: LD_INT 22
12767: PUSH
12768: LD_INT 1
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 21
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 26
12787: PUSH
12788: LD_INT 1
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: LIST
12799: PPUSH
12800: CALL_OW 69
12804: PUSH
12805: LD_EXP 1
12809: PUSH
12810: EMPTY
12811: LIST
12812: DIFF
12813: PPUSH
12814: LD_STRING D9b-Eng1-1
12816: PPUSH
12817: LD_STRING D9b-Eng1-1
12819: PPUSH
12820: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
12824: LD_EXP 33
12828: PUSH
12829: LD_INT 0
12831: EQUAL
12832: IFFALSE 12838
// EnergyDialog ;
12834: CALL 4541 0 0
// end ;
12838: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12839: LD_EXP 34
12843: PUSH
12844: LD_INT 1
12846: EQUAL
12847: PUSH
12848: LD_EXP 35
12852: PUSH
12853: LD_INT 1
12855: EQUAL
12856: AND
12857: IFFALSE 12869
12859: GO 12861
12861: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12862: LD_STRING M1a
12864: PPUSH
12865: CALL_OW 337
12869: END
// every 3 3$0 do
12870: GO 12872
12872: DISABLE
// begin PrepareFirstAttack ;
12873: CALL 3606 0 0
// end ;
12877: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
12878: LD_INT 22
12880: PUSH
12881: LD_INT 5
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 21
12890: PUSH
12891: LD_INT 1
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PPUSH
12902: CALL_OW 69
12906: PUSH
12907: LD_INT 3
12909: LESSEQUAL
12910: PUSH
12911: LD_EXP 23
12915: PUSH
12916: LD_INT 1
12918: EQUAL
12919: AND
12920: IFFALSE 13238
12922: GO 12924
12924: DISABLE
12925: LD_INT 0
12927: PPUSH
// begin firstRussianAttack = 2 ;
12928: LD_ADDR_EXP 23
12932: PUSH
12933: LD_INT 2
12935: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12936: LD_ADDR_VAR 0 1
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_INT 5
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 21
12953: PUSH
12954: LD_INT 1
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: PUSH
12970: FOR_IN
12971: IFFALSE 12990
// ComMoveXY ( i , 125 , 98 ) ;
12973: LD_VAR 0 1
12977: PPUSH
12978: LD_INT 125
12980: PPUSH
12981: LD_INT 98
12983: PPUSH
12984: CALL_OW 111
12988: GO 12970
12990: POP
12991: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12992: LD_INT 22
12994: PUSH
12995: LD_INT 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 21
13004: PUSH
13005: LD_INT 1
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PPUSH
13016: CALL_OW 69
13020: PUSH
13021: LD_EXP 1
13025: PUSH
13026: LD_EXP 7
13030: PUSH
13031: LD_EXP 4
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: DIFF
13041: PPUSH
13042: LD_STRING DAtt1-Sol1-1
13044: PPUSH
13045: LD_STRING DAtt1-FSol1-1
13047: PPUSH
13048: CALL 4050 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13052: LD_EXP 1
13056: PPUSH
13057: LD_STRING DAtt1-JMM-1
13059: PPUSH
13060: CALL_OW 88
// if Lisa then
13064: LD_EXP 4
13068: IFFALSE 13084
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13070: LD_EXP 4
13074: PPUSH
13075: LD_STRING DAtt1a-Lisa-1
13077: PPUSH
13078: CALL_OW 88
// end else
13082: GO 13155
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13084: LD_INT 22
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 21
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 69
13123: PUSH
13124: LD_EXP 1
13128: PUSH
13129: LD_EXP 7
13133: PUSH
13134: LD_EXP 4
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: DIFF
13144: PPUSH
13145: LD_STRING DAtt1a-Sol1-1
13147: PPUSH
13148: LD_STRING DAtt1-FSol1-1
13150: PPUSH
13151: CALL 4050 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13155: LD_EXP 1
13159: PPUSH
13160: LD_STRING DAtt1a-JMM-1
13162: PPUSH
13163: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13167: LD_INT 22
13169: PUSH
13170: LD_INT 1
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 1
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 26
13189: PUSH
13190: LD_INT 1
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: PUSH
13207: LD_EXP 1
13211: PUSH
13212: LD_EXP 7
13216: PUSH
13217: LD_EXP 4
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: DIFF
13227: PPUSH
13228: LD_STRING DAtt1b-Sol1-1
13230: PPUSH
13231: LD_STRING DAtt1a-Sol1-1
13233: PPUSH
13234: CALL 4050 0 3
// end ;
13238: PPOPN 1
13240: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13241: LD_EXP 23
13245: PUSH
13246: LD_INT 2
13248: EQUAL
13249: IFFALSE 13311
13251: GO 13253
13253: DISABLE
13254: LD_INT 0
13256: PPUSH
// begin enable ;
13257: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: LD_INT 5
13265: PPUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 5
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 1
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 70
13294: PUSH
13295: FOR_IN
13296: IFFALSE 13309
// RemoveUnit ( i ) ;
13298: LD_VAR 0 1
13302: PPUSH
13303: CALL_OW 64
13307: GO 13295
13309: POP
13310: POP
// end ;
13311: PPOPN 1
13313: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13314: LD_INT 22
13316: PUSH
13317: LD_INT 5
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: EMPTY
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: PUSH
13332: LD_INT 0
13334: EQUAL
13335: PUSH
13336: LD_EXP 23
13340: PUSH
13341: LD_INT 2
13343: EQUAL
13344: AND
13345: IFFALSE 13358
13347: GO 13349
13349: DISABLE
// firstRussianAttack = 3 ;
13350: LD_ADDR_EXP 23
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
13358: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13359: LD_EXP 28
13363: PUSH
13364: LD_INT 0
13366: EQUAL
13367: IFFALSE 13448
13369: GO 13371
13371: DISABLE
// begin timerStatus = 4 ;
13372: LD_ADDR_EXP 29
13376: PUSH
13377: LD_INT 4
13379: ST_TO_ADDR
// DialogueOn ;
13380: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13384: LD_EXP 13
13388: PPUSH
13389: LD_STRING D2-Don-1
13391: PPUSH
13392: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13396: LD_EXP 1
13400: PPUSH
13401: LD_STRING D2-JMM-1
13403: PPUSH
13404: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13408: LD_EXP 13
13412: PPUSH
13413: LD_STRING D2-Don-2
13415: PPUSH
13416: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13420: LD_EXP 1
13424: PPUSH
13425: LD_STRING D2-JMM-2
13427: PPUSH
13428: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13432: LD_EXP 13
13436: PPUSH
13437: LD_STRING D2-Don-3
13439: PPUSH
13440: CALL_OW 94
// DialogueOff ;
13444: CALL_OW 7
// end ;
13448: END
// every 12 12$0 do var tmp ;
13449: GO 13451
13451: DISABLE
13452: LD_INT 0
13454: PPUSH
// begin PrepareDonaldsonArmy ;
13455: CALL 999 0 0
// CenterNowOnUnits ( Donaldson ) ;
13459: LD_EXP 13
13463: PPUSH
13464: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13468: LD_ADDR_VAR 0 1
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_INT 4
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 21
13485: PUSH
13486: LD_INT 1
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 26
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 25
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PPUSH
13519: CALL_OW 69
13523: PUSH
13524: LD_EXP 5
13528: PUSH
13529: EMPTY
13530: LIST
13531: DIFF
13532: ST_TO_ADDR
// DialogueOn ;
13533: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13537: LD_VAR 0 1
13541: PPUSH
13542: LD_STRING D3-Sol1-1
13544: PPUSH
13545: LD_STRING D3-Sol1-1
13547: PPUSH
13548: CALL 4050 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13552: LD_INT 22
13554: PUSH
13555: LD_INT 4
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 21
13564: PUSH
13565: LD_INT 1
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 26
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 25
13584: PUSH
13585: LD_INT 3
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PPUSH
13598: CALL_OW 69
13602: PPUSH
13603: LD_STRING D3-Sol2-1
13605: PPUSH
13606: LD_STRING D3-Sol2-1
13608: PPUSH
13609: CALL 4050 0 3
// if Frank then
13613: LD_EXP 5
13617: IFFALSE 13631
// Say ( Frank , D3-Frank-1 ) ;
13619: LD_EXP 5
13623: PPUSH
13624: LD_STRING D3-Frank-1
13626: PPUSH
13627: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13631: LD_EXP 13
13635: PPUSH
13636: LD_STRING D3-Don-1
13638: PPUSH
13639: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13643: LD_EXP 13
13647: PPUSH
13648: LD_STRING D3-Don-1a
13650: PPUSH
13651: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13655: LD_EXP 1
13659: PPUSH
13660: LD_STRING D3-JMM-1
13662: PPUSH
13663: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13667: LD_EXP 13
13671: PPUSH
13672: LD_STRING D3-Don-2
13674: PPUSH
13675: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13679: LD_INT 22
13681: PUSH
13682: LD_INT 6
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 21
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PPUSH
13703: CALL_OW 69
13707: PUSH
13708: LD_INT 0
13710: GREATER
13711: IFFALSE 13825
// begin Say ( JMM , D3-JMM-2 ) ;
13713: LD_EXP 1
13717: PPUSH
13718: LD_STRING D3-JMM-2
13720: PPUSH
13721: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13725: LD_EXP 13
13729: PPUSH
13730: LD_STRING D3-Don-3
13732: PPUSH
13733: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13737: LD_EXP 1
13741: PPUSH
13742: LD_STRING D3-JMM-3
13744: PPUSH
13745: CALL_OW 88
// if IsOK ( Frank ) then
13749: LD_EXP 5
13753: PPUSH
13754: CALL_OW 302
13758: IFFALSE 13772
// Say ( Frank , D3-Frank-3 ) ;
13760: LD_EXP 5
13764: PPUSH
13765: LD_STRING D3-Frank-3
13767: PPUSH
13768: CALL_OW 88
// DialogueOff ;
13772: CALL_OW 7
// if IsOK ( Frank ) then
13776: LD_EXP 5
13780: PPUSH
13781: CALL_OW 302
13785: IFFALSE 13823
// begin SetSide ( Frank , 0 ) ;
13787: LD_EXP 5
13791: PPUSH
13792: LD_INT 0
13794: PPUSH
13795: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13799: LD_EXP 5
13803: PPUSH
13804: LD_INT 12
13806: PPUSH
13807: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13811: LD_EXP 5
13815: PPUSH
13816: LD_STRING Frank
13818: PPUSH
13819: CALL_OW 38
// end ; end else
13823: GO 13888
// begin Say ( JMM , D3-JMM-4 ) ;
13825: LD_EXP 1
13829: PPUSH
13830: LD_STRING D3-JMM-4
13832: PPUSH
13833: CALL_OW 88
// DialogueOff ;
13837: CALL_OW 7
// if IsOK ( Frank ) then
13841: LD_EXP 5
13845: PPUSH
13846: CALL_OW 302
13850: IFFALSE 13888
// begin SetSide ( Frank , 0 ) ;
13852: LD_EXP 5
13856: PPUSH
13857: LD_INT 0
13859: PPUSH
13860: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13864: LD_EXP 5
13868: PPUSH
13869: LD_INT 12
13871: PPUSH
13872: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13876: LD_EXP 5
13880: PPUSH
13881: LD_STRING Frank
13883: PPUSH
13884: CALL_OW 38
// end ; end ; end ;
13888: PPOPN 1
13890: END
// every 1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
13891: LD_EXP 5
13895: PPUSH
13896: LD_INT 12
13898: PPUSH
13899: CALL_OW 308
13903: PUSH
13904: LD_EXP 5
13908: PPUSH
13909: CALL_OW 255
13913: PUSH
13914: LD_INT 0
13916: EQUAL
13917: AND
13918: IFFALSE 13940
13920: GO 13922
13922: DISABLE
// begin RemoveUnit ( Frank ) ;
13923: LD_EXP 5
13927: PPUSH
13928: CALL_OW 64
// frankScoutBase = 1 ;
13932: LD_ADDR_EXP 25
13936: PUSH
13937: LD_INT 1
13939: ST_TO_ADDR
// end ;
13940: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13941: LD_EXP 13
13945: PPUSH
13946: CALL_OW 255
13950: PUSH
13951: LD_INT 4
13953: EQUAL
13954: PUSH
13955: LD_EXP 13
13959: PPUSH
13960: CALL_OW 302
13964: AND
13965: IFFALSE 13990
13967: GO 13969
13969: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13970: LD_EXP 13
13974: PPUSH
13975: LD_STRING D3b-Don-1
13977: PPUSH
13978: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13982: LD_ADDR_EXP 41
13986: PUSH
13987: LD_INT 1
13989: ST_TO_ADDR
// end ;
13990: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13991: LD_EXP 24
13995: PUSH
13996: LD_INT 0
13998: EQUAL
13999: IFFALSE 14155
14001: GO 14003
14003: DISABLE
14004: LD_INT 0
14006: PPUSH
14007: PPUSH
// begin enable ;
14008: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
14009: LD_ADDR_VAR 0 1
14013: PUSH
14014: LD_INT 22
14016: PUSH
14017: LD_INT 4
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: LD_INT 21
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PPUSH
14038: CALL_OW 69
14042: PUSH
14043: FOR_IN
14044: IFFALSE 14153
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: LD_INT 22
14053: PUSH
14054: LD_INT 1
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 21
14063: PUSH
14064: LD_INT 1
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PPUSH
14075: CALL_OW 69
14079: PUSH
14080: FOR_IN
14081: IFFALSE 14149
// begin if GetDistUnits ( i , j ) < 7 then
14083: LD_VAR 0 1
14087: PPUSH
14088: LD_VAR 0 2
14092: PPUSH
14093: CALL_OW 296
14097: PUSH
14098: LD_INT 7
14100: LESS
14101: IFFALSE 14147
// begin saveDonaldson = 1 ;
14103: LD_ADDR_EXP 24
14107: PUSH
14108: LD_INT 1
14110: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14111: LD_INT 22
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 21
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 235
// end ; end ;
14147: GO 14080
14149: POP
14150: POP
// end ;
14151: GO 14043
14153: POP
14154: POP
// end ;
14155: PPOPN 2
14157: END
// every 2 2$0 trigger saveDonaldson = 1 do
14158: LD_EXP 24
14162: PUSH
14163: LD_INT 1
14165: EQUAL
14166: IFFALSE 14408
14168: GO 14170
14170: DISABLE
// begin uc_side = 4 ;
14171: LD_ADDR_OWVAR 20
14175: PUSH
14176: LD_INT 4
14178: ST_TO_ADDR
// uc_nation = 1 ;
14179: LD_ADDR_OWVAR 21
14183: PUSH
14184: LD_INT 1
14186: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
14187: LD_ADDR_EXP 5
14191: PUSH
14192: LD_STRING Frank
14194: PPUSH
14195: CALL_OW 34
14199: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14200: LD_EXP 5
14204: PPUSH
14205: LD_INT 13
14207: PPUSH
14208: LD_INT 0
14210: PPUSH
14211: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14215: LD_INT 35
14217: PPUSH
14218: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
14222: LD_EXP 5
14226: PPUSH
14227: LD_INT 51
14229: PPUSH
14230: LD_INT 15
14232: PPUSH
14233: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
14237: LD_EXP 5
14241: PPUSH
14242: LD_EXP 1
14246: PPUSH
14247: CALL_OW 296
14251: PUSH
14252: LD_INT 6
14254: LESS
14255: IFFALSE 14215
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14257: LD_EXP 1
14261: PUSH
14262: LD_EXP 5
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PPUSH
14271: CALL_OW 87
// DialogueOn ;
14275: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14279: LD_EXP 5
14283: PPUSH
14284: LD_STRING D3a-Frank-1
14286: PPUSH
14287: CALL_OW 88
// if Lisa then
14291: LD_EXP 4
14295: IFFALSE 14345
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14297: LD_EXP 4
14301: PPUSH
14302: LD_STRING D3a-Lisa-1
14304: PPUSH
14305: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14309: LD_EXP 5
14313: PPUSH
14314: LD_STRING D3a-Frank-2
14316: PPUSH
14317: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14321: LD_EXP 4
14325: PPUSH
14326: LD_STRING D3a-Lisa-2
14328: PPUSH
14329: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14333: LD_EXP 5
14337: PPUSH
14338: LD_STRING D3a-Frank-3
14340: PPUSH
14341: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14345: LD_EXP 1
14349: PPUSH
14350: LD_STRING D3a-JMM-3
14352: PPUSH
14353: CALL_OW 88
// DialogueOff ;
14357: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14361: LD_EXP 5
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: CALL_OW 235
// InGameOn ;
14373: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14377: LD_INT 1
14379: PPUSH
14380: LD_INT 7
14382: PPUSH
14383: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14387: LD_INT 93
14389: PPUSH
14390: LD_INT 91
14392: PPUSH
14393: CALL_OW 84
// wait ( 0 0$5 ) ;
14397: LD_INT 175
14399: PPUSH
14400: CALL_OW 67
// InGameOff ;
14404: CALL_OW 9
// end ;
14408: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14409: LD_OWVAR 67
14413: PUSH
14414: LD_INT 2
14416: EQUAL
14417: PUSH
14418: LD_OWVAR 67
14422: PUSH
14423: LD_INT 3
14425: EQUAL
14426: OR
14427: IFFALSE 14451
14429: GO 14431
14431: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14432: LD_INT 24
14434: PPUSH
14435: LD_INT 24
14437: PPUSH
14438: LD_INT 1
14440: PPUSH
14441: LD_INT 1
14443: PPUSH
14444: LD_INT 53
14446: PPUSH
14447: CALL_OW 125
14451: END
// every 18 18$0 do
14452: GO 14454
14454: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14455: LD_EXP 14
14459: PPUSH
14460: LD_STRING D4-Har-1
14462: PPUSH
14463: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14467: LD_EXP 1
14471: PPUSH
14472: LD_STRING D4-JMM-1
14474: PPUSH
14475: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14479: LD_EXP 14
14483: PPUSH
14484: LD_STRING D4-Har-2
14486: PPUSH
14487: CALL_OW 94
// case query ( Q1 ) of 1 :
14491: LD_STRING Q1
14493: PPUSH
14494: CALL_OW 97
14498: PUSH
14499: LD_INT 1
14501: DOUBLE
14502: EQUAL
14503: IFTRUE 14507
14505: GO 14566
14507: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14508: LD_EXP 1
14512: PPUSH
14513: LD_STRING D5-JMM-1
14515: PPUSH
14516: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14520: LD_EXP 14
14524: PPUSH
14525: LD_STRING D5-Har-1
14527: PPUSH
14528: CALL_OW 94
// timeToSupport = 10 10$0 ;
14532: LD_ADDR_EXP 28
14536: PUSH
14537: LD_INT 21000
14539: ST_TO_ADDR
// timerStatus = 2 ;
14540: LD_ADDR_EXP 29
14544: PUSH
14545: LD_INT 2
14547: ST_TO_ADDR
// startTimer = 1 ;
14548: LD_ADDR_EXP 30
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// harrAnswer = 1 ;
14556: LD_ADDR_EXP 26
14560: PUSH
14561: LD_INT 1
14563: ST_TO_ADDR
// end ; 2 :
14564: GO 14701
14566: LD_INT 2
14568: DOUBLE
14569: EQUAL
14570: IFTRUE 14574
14572: GO 14633
14574: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14575: LD_EXP 1
14579: PPUSH
14580: LD_STRING D5-JMM-2
14582: PPUSH
14583: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14587: LD_EXP 14
14591: PPUSH
14592: LD_STRING D5-Har-2
14594: PPUSH
14595: CALL_OW 94
// timeToSupport = 5 5$0 ;
14599: LD_ADDR_EXP 28
14603: PUSH
14604: LD_INT 10500
14606: ST_TO_ADDR
// timerStatus = 2 ;
14607: LD_ADDR_EXP 29
14611: PUSH
14612: LD_INT 2
14614: ST_TO_ADDR
// startTimer = 1 ;
14615: LD_ADDR_EXP 30
14619: PUSH
14620: LD_INT 1
14622: ST_TO_ADDR
// harrAnswer = 2 ;
14623: LD_ADDR_EXP 26
14627: PUSH
14628: LD_INT 2
14630: ST_TO_ADDR
// end ; 3 :
14631: GO 14701
14633: LD_INT 3
14635: DOUBLE
14636: EQUAL
14637: IFTRUE 14641
14639: GO 14700
14641: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14642: LD_EXP 1
14646: PPUSH
14647: LD_STRING D5-JMM-3
14649: PPUSH
14650: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14654: LD_EXP 14
14658: PPUSH
14659: LD_STRING D5-Har-3
14661: PPUSH
14662: CALL_OW 94
// timeToSupport = 5 5$0 ;
14666: LD_ADDR_EXP 28
14670: PUSH
14671: LD_INT 10500
14673: ST_TO_ADDR
// timerStatus = 2 ;
14674: LD_ADDR_EXP 29
14678: PUSH
14679: LD_INT 2
14681: ST_TO_ADDR
// startTimer = 1 ;
14682: LD_ADDR_EXP 30
14686: PUSH
14687: LD_INT 1
14689: ST_TO_ADDR
// harrAnswer = 3 ;
14690: LD_ADDR_EXP 26
14694: PUSH
14695: LD_INT 3
14697: ST_TO_ADDR
// end ; end ;
14698: GO 14701
14700: POP
// end ;
14701: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14702: LD_EXP 29
14706: PUSH
14707: LD_INT 2
14709: EQUAL
14710: PUSH
14711: LD_EXP 28
14715: PUSH
14716: LD_INT 0
14718: EQUAL
14719: AND
14720: IFFALSE 14997
14722: GO 14724
14724: DISABLE
// begin timerStatus = 4 ;
14725: LD_ADDR_EXP 29
14729: PUSH
14730: LD_INT 4
14732: ST_TO_ADDR
// if harrAnswer = 1 then
14733: LD_EXP 26
14737: PUSH
14738: LD_INT 1
14740: EQUAL
14741: IFFALSE 14821
// begin PrepareHarrisonSupport ( 3 ) ;
14743: LD_INT 3
14745: PPUSH
14746: CALL 1563 0 1
// wait ( 1 1$0 ) ;
14750: LD_INT 2100
14752: PPUSH
14753: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14757: LD_EXP 14
14761: PPUSH
14762: LD_STRING D7-Har-1
14764: PPUSH
14765: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14769: LD_STRING M2
14771: PPUSH
14772: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14776: LD_ADDR_EXP 27
14780: PUSH
14781: LD_INT 31500
14783: PUSH
14784: LD_INT 10500
14786: PUSH
14787: LD_INT 8400
14789: PUSH
14790: LD_INT 6300
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: LIST
14797: PUSH
14798: LD_OWVAR 67
14802: ARRAY
14803: PLUS
14804: ST_TO_ADDR
// startTimer = 1 ;
14805: LD_ADDR_EXP 30
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// timerStatus = 3 ;
14813: LD_ADDR_EXP 29
14817: PUSH
14818: LD_INT 3
14820: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14821: LD_EXP 26
14825: PUSH
14826: LD_INT 2
14828: EQUAL
14829: IFFALSE 14909
// begin PrepareHarrisonSupport ( 4 ) ;
14831: LD_INT 4
14833: PPUSH
14834: CALL 1563 0 1
// wait ( 1 1$0 ) ;
14838: LD_INT 2100
14840: PPUSH
14841: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14845: LD_EXP 14
14849: PPUSH
14850: LD_STRING D7-Har-1
14852: PPUSH
14853: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14857: LD_STRING M2
14859: PPUSH
14860: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14864: LD_ADDR_EXP 27
14868: PUSH
14869: LD_INT 27300
14871: PUSH
14872: LD_INT 8400
14874: PUSH
14875: LD_INT 8400
14877: PUSH
14878: LD_INT 6300
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: PUSH
14886: LD_OWVAR 67
14890: ARRAY
14891: PLUS
14892: ST_TO_ADDR
// startTimer = 1 ;
14893: LD_ADDR_EXP 30
14897: PUSH
14898: LD_INT 1
14900: ST_TO_ADDR
// timerStatus = 3 ;
14901: LD_ADDR_EXP 29
14905: PUSH
14906: LD_INT 3
14908: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14909: LD_EXP 26
14913: PUSH
14914: LD_INT 3
14916: EQUAL
14917: IFFALSE 14997
// begin PrepareHarrisonSupport ( 5 ) ;
14919: LD_INT 5
14921: PPUSH
14922: CALL 1563 0 1
// wait ( 1 1$0 ) ;
14926: LD_INT 2100
14928: PPUSH
14929: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14933: LD_EXP 14
14937: PPUSH
14938: LD_STRING D7-Har-1
14940: PPUSH
14941: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14945: LD_STRING M2
14947: PPUSH
14948: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14952: LD_ADDR_EXP 27
14956: PUSH
14957: LD_INT 21000
14959: PUSH
14960: LD_INT 8400
14962: PUSH
14963: LD_INT 6300
14965: PUSH
14966: LD_INT 4200
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_OWVAR 67
14978: ARRAY
14979: PLUS
14980: ST_TO_ADDR
// startTimer = 1 ;
14981: LD_ADDR_EXP 30
14985: PUSH
14986: LD_INT 1
14988: ST_TO_ADDR
// timerStatus = 3 ;
14989: LD_ADDR_EXP 29
14993: PUSH
14994: LD_INT 3
14996: ST_TO_ADDR
// end ; end ;
14997: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14998: LD_EXP 27
15002: PUSH
15003: LD_INT 8400
15005: LESSEQUAL
15006: PUSH
15007: LD_EXP 29
15011: PUSH
15012: LD_INT 3
15014: EQUAL
15015: AND
15016: IFFALSE 15048
15018: GO 15020
15020: DISABLE
// begin DialogueOn ;
15021: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15025: LD_EXP 14
15029: PPUSH
15030: LD_STRING D7a-Har-1
15032: PPUSH
15033: CALL_OW 94
// DialogueOff ;
15037: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15041: LD_STRING M2a
15043: PPUSH
15044: CALL_OW 337
// end ;
15048: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
15049: LD_EXP 27
15053: PUSH
15054: LD_INT 0
15056: LESSEQUAL
15057: PUSH
15058: LD_EXP 29
15062: PUSH
15063: LD_INT 3
15065: EQUAL
15066: AND
15067: IFFALSE 15192
15069: GO 15071
15071: DISABLE
15072: LD_INT 0
15074: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15075: LD_ADDR_VAR 0 1
15079: PUSH
15080: LD_INT 22
15082: PUSH
15083: LD_INT 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PUSH
15095: LD_EXP 1
15099: PUSH
15100: EMPTY
15101: LIST
15102: DIFF
15103: ST_TO_ADDR
// saveDonaldson = 2 ;
15104: LD_ADDR_EXP 24
15108: PUSH
15109: LD_INT 2
15111: ST_TO_ADDR
// DialogueOn ;
15112: CALL_OW 6
// if IsOK ( Donaldson ) then
15116: LD_EXP 13
15120: PPUSH
15121: CALL_OW 302
15125: IFFALSE 15141
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15127: LD_EXP 14
15131: PPUSH
15132: LD_STRING D8-Har-1
15134: PPUSH
15135: CALL_OW 94
// end else
15139: GO 15153
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15141: LD_EXP 14
15145: PPUSH
15146: LD_STRING D8-Har-1a
15148: PPUSH
15149: CALL_OW 94
// end ; DialogueOff ;
15153: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15157: LD_VAR 0 1
15161: PPUSH
15162: LD_INT 4
15164: PPUSH
15165: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15169: LD_VAR 0 1
15173: PPUSH
15174: LD_INT 88
15176: PPUSH
15177: LD_INT 89
15179: PPUSH
15180: CALL_OW 114
// honor = 0 ;
15184: LD_ADDR_EXP 39
15188: PUSH
15189: LD_INT 0
15191: ST_TO_ADDR
// end ;
15192: PPOPN 1
15194: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15195: LD_INT 22
15197: PUSH
15198: LD_INT 6
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 21
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: PUSH
15224: LD_INT 0
15226: EQUAL
15227: PUSH
15228: LD_EXP 20
15232: PUSH
15233: LD_INT 0
15235: EQUAL
15236: AND
15237: PUSH
15238: LD_EXP 42
15242: PUSH
15243: LD_INT 1
15245: EQUAL
15246: AND
15247: IFFALSE 15341
15249: GO 15251
15251: DISABLE
15252: LD_INT 0
15254: PPUSH
15255: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15256: LD_ADDR_VAR 0 2
15260: PUSH
15261: LD_INT 22
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 21
15273: PUSH
15274: LD_INT 1
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 23
15283: PUSH
15284: LD_INT 1
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: PPUSH
15296: CALL_OW 69
15300: ST_TO_ADDR
// for i in tmp do
15301: LD_ADDR_VAR 0 1
15305: PUSH
15306: LD_VAR 0 2
15310: PUSH
15311: FOR_IN
15312: IFFALSE 15339
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15314: LD_VAR 0 1
15318: PPUSH
15319: LD_INT 1
15321: PPUSH
15322: LD_INT 4
15324: PPUSH
15325: CALL_OW 12
15329: PPUSH
15330: LD_INT 500
15332: PPUSH
15333: CALL_OW 492
// end ;
15337: GO 15311
15339: POP
15340: POP
// end ; end_of_file
15341: PPOPN 2
15343: END
// every 0 0$1 trigger AIEnable = 1 do
15344: LD_EXP 37
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: IFFALSE 15466
15354: GO 15356
15356: DISABLE
// begin enable ;
15357: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
15358: LD_INT 3
15360: PPUSH
15361: LD_INT 21
15363: PPUSH
15364: CALL 5574 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15368: LD_INT 3
15370: PPUSH
15371: LD_INT 8
15373: PPUSH
15374: LD_INT 7
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL 5815 0 4
// RepairVehicle ( 3 , RussianAttackRepair , 108 , 95 ) ;
15384: LD_INT 3
15386: PPUSH
15387: LD_INT 17
15389: PPUSH
15390: LD_INT 108
15392: PPUSH
15393: LD_INT 95
15395: PPUSH
15396: CALL 8738 0 4
// RepairVehicle ( 5 , RussianAttackRepair , 108 , 95 ) ;
15400: LD_INT 5
15402: PPUSH
15403: LD_INT 17
15405: PPUSH
15406: LD_INT 108
15408: PPUSH
15409: LD_INT 95
15411: PPUSH
15412: CALL 8738 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
15416: LD_INT 3
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: CALL 6246 0 2
// if baseReadyToBuild = 2 then
15426: LD_EXP 20
15430: PUSH
15431: LD_INT 2
15433: EQUAL
15434: IFFALSE 15466
// begin RepairBuilding ( 6 , ruPDepot ) ;
15436: LD_INT 6
15438: PPUSH
15439: LD_EXP 21
15443: PPUSH
15444: CALL 5574 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15448: LD_INT 6
15450: PPUSH
15451: LD_INT 9
15453: PPUSH
15454: LD_INT 6
15456: PPUSH
15457: LD_EXP 22
15461: PPUSH
15462: CALL 5815 0 4
// end ; end ;
15466: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15467: LD_INT 22
15469: PUSH
15470: LD_INT 3
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 2
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 55
15489: PUSH
15490: EMPTY
15491: LIST
15492: PUSH
15493: LD_INT 3
15495: PUSH
15496: LD_INT 34
15498: PUSH
15499: LD_INT 51
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: PPUSH
15516: CALL_OW 69
15520: PUSH
15521: LD_INT 0
15523: EQUAL
15524: PUSH
15525: LD_INT 1
15527: PPUSH
15528: CALL_OW 255
15532: PUSH
15533: LD_INT 3
15535: EQUAL
15536: AND
15537: PUSH
15538: LD_INT 21
15540: PPUSH
15541: CALL_OW 302
15545: AND
15546: PUSH
15547: LD_INT 21
15549: PPUSH
15550: CALL_OW 255
15554: PUSH
15555: LD_INT 3
15557: EQUAL
15558: AND
15559: PUSH
15560: LD_INT 21
15562: PPUSH
15563: CALL_OW 302
15567: AND
15568: IFFALSE 15773
15570: GO 15572
15572: DISABLE
// begin enable ;
15573: ENABLE
// if Difficulty = 1 then
15574: LD_OWVAR 67
15578: PUSH
15579: LD_INT 1
15581: EQUAL
15582: IFFALSE 15626
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15584: LD_INT 3
15586: PPUSH
15587: LD_INT 24
15589: PPUSH
15590: LD_OWVAR 67
15594: PUSH
15595: LD_INT 2
15597: PLUS
15598: PPUSH
15599: LD_INT 42
15601: PUSH
15602: LD_INT 42
15604: PUSH
15605: LD_INT 43
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: LD_INT 21
15621: PPUSH
15622: CALL 6092 0 7
// if Difficulty = 2 then
15626: LD_OWVAR 67
15630: PUSH
15631: LD_INT 2
15633: EQUAL
15634: IFFALSE 15701
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15636: LD_INT 3
15638: PPUSH
15639: LD_INT 24
15641: PPUSH
15642: LD_OWVAR 67
15646: PUSH
15647: LD_INT 2
15649: PLUS
15650: PPUSH
15651: LD_INT 42
15653: PUSH
15654: LD_INT 42
15656: PUSH
15657: LD_INT 43
15659: PUSH
15660: LD_INT 43
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: PPUSH
15669: LD_INT 1
15671: PPUSH
15672: LD_INT 1
15674: PPUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 1
15687: PPUSH
15688: LD_INT 2
15690: PPUSH
15691: CALL_OW 12
15695: ARRAY
15696: PPUSH
15697: CALL 6092 0 7
// if Difficulty = 3 then
15701: LD_OWVAR 67
15705: PUSH
15706: LD_INT 3
15708: EQUAL
15709: IFFALSE 15773
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15711: LD_INT 3
15713: PPUSH
15714: LD_INT 24
15716: PPUSH
15717: LD_OWVAR 67
15721: PUSH
15722: LD_INT 2
15724: PPUSH
15725: LD_INT 3
15727: PPUSH
15728: CALL_OW 12
15732: PLUS
15733: PPUSH
15734: LD_INT 43
15736: PUSH
15737: LD_INT 43
15739: PUSH
15740: LD_INT 43
15742: PUSH
15743: LD_INT 43
15745: PUSH
15746: LD_INT 44
15748: PUSH
15749: LD_INT 44
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: PPUSH
15760: LD_INT 1
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: LD_INT 22
15768: PPUSH
15769: CALL 6092 0 7
// end ;
15773: END
// every 0 0$1 do
15774: GO 15776
15776: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15777: LD_INT 3
15779: PPUSH
15780: LD_INT 1
15782: PPUSH
15783: LD_INT 3
15785: PPUSH
15786: CALL 5489 0 3
15790: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15791: LD_EXP 20
15795: PUSH
15796: LD_INT 1
15798: EQUAL
15799: IFFALSE 15946
15801: GO 15803
15803: DISABLE
15804: LD_INT 0
15806: PPUSH
15807: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15808: LD_ADDR_VAR 0 2
15812: PUSH
15813: LD_INT 22
15815: PUSH
15816: LD_INT 6
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 21
15825: PUSH
15826: LD_INT 2
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 34
15835: PUSH
15836: LD_INT 51
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: PPUSH
15848: CALL_OW 69
15852: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15853: LD_VAR 0 2
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PPUSH
15862: LD_EXP 21
15866: PPUSH
15867: CALL_OW 250
15871: PUSH
15872: LD_INT 5
15874: MINUS
15875: PPUSH
15876: LD_EXP 21
15880: PPUSH
15881: CALL_OW 251
15885: PUSH
15886: LD_INT 5
15888: MINUS
15889: PPUSH
15890: CALL_OW 111
// wait ( 0 0$5 ) ;
15894: LD_INT 175
15896: PPUSH
15897: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15901: LD_VAR 0 2
15905: PUSH
15906: LD_INT 1
15908: ARRAY
15909: PPUSH
15910: LD_INT 41
15912: PPUSH
15913: LD_INT 52
15915: PPUSH
15916: CALL_OW 177
// wait ( 0 0$40 ) ;
15920: LD_INT 1400
15922: PPUSH
15923: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15927: LD_VAR 0 2
15931: PUSH
15932: LD_INT 1
15934: ARRAY
15935: PPUSH
15936: LD_INT 41
15938: PPUSH
15939: LD_INT 44
15941: PPUSH
15942: CALL_OW 111
// end ;
15946: PPOPN 2
15948: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15949: LD_EXP 21
15953: PPUSH
15954: CALL_OW 274
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 275
15966: PUSH
15967: LD_INT 100
15969: GREATEREQUAL
15970: IFFALSE 16198
15972: GO 15974
15974: DISABLE
15975: LD_INT 0
15977: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15978: LD_ADDR_VAR 0 1
15982: PUSH
15983: LD_INT 22
15985: PUSH
15986: LD_INT 6
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 21
15995: PUSH
15996: LD_INT 1
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 25
16005: PUSH
16006: LD_INT 2
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: PPUSH
16018: CALL_OW 69
16022: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16023: LD_VAR 0 1
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: PPUSH
16032: LD_INT 4
16034: PPUSH
16035: LD_INT 39
16037: PPUSH
16038: LD_INT 37
16040: PPUSH
16041: LD_INT 3
16043: PPUSH
16044: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16048: LD_VAR 0 1
16052: PUSH
16053: LD_INT 1
16055: ARRAY
16056: PPUSH
16057: LD_INT 29
16059: PPUSH
16060: LD_INT 42
16062: PPUSH
16063: LD_INT 54
16065: PPUSH
16066: LD_INT 3
16068: PPUSH
16069: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16073: LD_VAR 0 1
16077: PUSH
16078: LD_INT 1
16080: ARRAY
16081: PPUSH
16082: LD_INT 6
16084: PPUSH
16085: LD_INT 38
16087: PPUSH
16088: LD_INT 48
16090: PPUSH
16091: LD_INT 0
16093: PPUSH
16094: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16098: LD_VAR 0 1
16102: PUSH
16103: LD_INT 1
16105: ARRAY
16106: PPUSH
16107: LD_INT 2
16109: PPUSH
16110: LD_INT 32
16112: PPUSH
16113: LD_INT 38
16115: PPUSH
16116: LD_INT 2
16118: PPUSH
16119: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16123: LD_VAR 0 1
16127: PUSH
16128: LD_INT 1
16130: ARRAY
16131: PPUSH
16132: LD_INT 26
16134: PPUSH
16135: LD_INT 39
16137: PPUSH
16138: LD_INT 55
16140: PPUSH
16141: LD_INT 3
16143: PPUSH
16144: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16148: LD_VAR 0 1
16152: PUSH
16153: LD_INT 1
16155: ARRAY
16156: PPUSH
16157: LD_INT 32
16159: PPUSH
16160: LD_INT 31
16162: PPUSH
16163: LD_INT 31
16165: PPUSH
16166: LD_INT 3
16168: PPUSH
16169: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16173: LD_VAR 0 1
16177: PUSH
16178: LD_INT 1
16180: ARRAY
16181: PPUSH
16182: LD_INT 31
16184: PPUSH
16185: LD_INT 50
16187: PPUSH
16188: LD_INT 51
16190: PPUSH
16191: LD_INT 4
16193: PPUSH
16194: CALL_OW 205
// end ; end_of_file
16198: PPOPN 1
16200: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16201: LD_INT 0
16203: PPUSH
16204: PPUSH
16205: PPUSH
16206: PPUSH
16207: PPUSH
16208: PPUSH
16209: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16210: LD_ADDR_VAR 0 3
16214: PUSH
16215: LD_INT 22
16217: PUSH
16218: LD_INT 6
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 21
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 25
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: LD_INT 54
16250: PUSH
16251: EMPTY
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: PPUSH
16264: CALL_OW 69
16268: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16269: LD_ADDR_VAR 0 7
16273: PUSH
16274: LD_INT 22
16276: PUSH
16277: LD_INT 6
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 21
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 25
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 54
16306: PUSH
16307: EMPTY
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16321: LD_ADDR_VAR 0 4
16325: PUSH
16326: LD_INT 22
16328: PUSH
16329: LD_INT 6
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 21
16338: PUSH
16339: LD_INT 1
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 25
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: PPUSH
16361: CALL_OW 69
16365: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16366: LD_ADDR_VAR 0 6
16370: PUSH
16371: LD_INT 22
16373: PUSH
16374: LD_INT 6
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 21
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 25
16393: PUSH
16394: LD_INT 4
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: PPUSH
16406: CALL_OW 69
16410: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16411: LD_ADDR_VAR 0 8
16415: PUSH
16416: LD_INT 22
16418: PUSH
16419: LD_INT 6
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 21
16428: PUSH
16429: LD_INT 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 34
16438: PUSH
16439: LD_INT 51
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: LIST
16450: PPUSH
16451: CALL_OW 69
16455: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 255
16465: PUSH
16466: LD_INT 6
16468: EQUAL
16469: PUSH
16470: LD_VAR 0 1
16474: PPUSH
16475: CALL_OW 266
16479: PUSH
16480: LD_INT 0
16482: EQUAL
16483: AND
16484: IFFALSE 16504
// begin ruPDepot = building ;
16486: LD_ADDR_EXP 21
16490: PUSH
16491: LD_VAR 0 1
16495: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16496: LD_ADDR_EXP 20
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 266
16513: PUSH
16514: LD_INT 4
16516: EQUAL
16517: PUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 255
16527: PUSH
16528: LD_INT 6
16530: EQUAL
16531: AND
16532: IFFALSE 16565
// for i in tmpSold do
16534: LD_ADDR_VAR 0 2
16538: PUSH
16539: LD_VAR 0 3
16543: PUSH
16544: FOR_IN
16545: IFFALSE 16563
// ComEnterUnit ( i , building ) ;
16547: LD_VAR 0 2
16551: PPUSH
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL_OW 120
16561: GO 16544
16563: POP
16564: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 266
16574: PUSH
16575: LD_INT 6
16577: EQUAL
16578: PUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 255
16588: PUSH
16589: LD_INT 6
16591: EQUAL
16592: AND
16593: IFFALSE 16651
// begin for i in tmpSci do
16595: LD_ADDR_VAR 0 2
16599: PUSH
16600: LD_VAR 0 6
16604: PUSH
16605: FOR_IN
16606: IFFALSE 16624
// ComEnterUnit ( i , building ) ;
16608: LD_VAR 0 2
16612: PPUSH
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 120
16622: GO 16605
16624: POP
16625: POP
// ResAllTechs ( 6 , building , 3 ) ;
16626: LD_INT 6
16628: PPUSH
16629: LD_VAR 0 1
16633: PPUSH
16634: LD_INT 3
16636: PPUSH
16637: CALL 5489 0 3
// ruPLab = building ;
16641: LD_ADDR_EXP 22
16645: PUSH
16646: LD_VAR 0 1
16650: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16651: LD_VAR 0 1
16655: PPUSH
16656: CALL_OW 266
16660: PUSH
16661: LD_INT 2
16663: EQUAL
16664: PUSH
16665: LD_VAR 0 1
16669: PPUSH
16670: CALL_OW 255
16674: PUSH
16675: LD_INT 6
16677: EQUAL
16678: AND
16679: IFFALSE 16730
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16681: LD_ADDR_VAR 0 5
16685: PUSH
16686: LD_VAR 0 8
16690: PUSH
16691: LD_INT 1
16693: ARRAY
16694: PPUSH
16695: CALL_OW 313
16699: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16700: LD_VAR 0 5
16704: PPUSH
16705: CALL_OW 121
// wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16716: LD_VAR 0 5
16720: PPUSH
16721: LD_VAR 0 1
16725: PPUSH
16726: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16730: LD_VAR 0 1
16734: PPUSH
16735: CALL_OW 266
16739: PUSH
16740: LD_INT 32
16742: EQUAL
16743: PUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: CALL_OW 255
16753: PUSH
16754: LD_INT 6
16756: EQUAL
16757: AND
16758: IFFALSE 16810
// begin ComPlaceWeapon ( building , 42 ) ;
16760: LD_VAR 0 1
16764: PPUSH
16765: LD_INT 42
16767: PPUSH
16768: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16772: LD_VAR 0 7
16776: PUSH
16777: LD_INT 1
16779: ARRAY
16780: PPUSH
16781: CALL_OW 122
// wait ( 0 0$1 ) ;
16785: LD_INT 35
16787: PPUSH
16788: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16792: LD_VAR 0 7
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: LD_VAR 0 1
16805: PPUSH
16806: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16810: LD_VAR 0 1
16814: PPUSH
16815: CALL_OW 266
16819: PUSH
16820: LD_INT 31
16822: EQUAL
16823: PUSH
16824: LD_VAR 0 1
16828: PPUSH
16829: CALL_OW 255
16833: PUSH
16834: LD_INT 6
16836: EQUAL
16837: AND
16838: IFFALSE 16904
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16840: LD_VAR 0 7
16844: PUSH
16845: LD_INT 2
16847: ARRAY
16848: PPUSH
16849: CALL_OW 122
// wait ( 0 0$1 ) ;
16853: LD_INT 35
16855: PPUSH
16856: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16860: LD_VAR 0 7
16864: PUSH
16865: LD_INT 2
16867: ARRAY
16868: PPUSH
16869: LD_VAR 0 1
16873: PPUSH
16874: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16878: LD_VAR 0 4
16882: PUSH
16883: LD_INT 1
16885: ARRAY
16886: PPUSH
16887: LD_EXP 21
16891: PPUSH
16892: CALL_OW 120
// baseReadyToBuild = 2 ;
16896: LD_ADDR_EXP 20
16900: PUSH
16901: LD_INT 2
16903: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 266
16913: PUSH
16914: LD_INT 32
16916: EQUAL
16917: PUSH
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 255
16927: PUSH
16928: LD_INT 1
16930: EQUAL
16931: AND
16932: PUSH
16933: LD_EXP 32
16937: PUSH
16938: LD_INT 0
16940: EQUAL
16941: AND
16942: IFFALSE 17187
// begin bunkerDialog = 1 ;
16944: LD_ADDR_EXP 32
16948: PUSH
16949: LD_INT 1
16951: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16952: LD_EXP 11
16956: PPUSH
16957: CALL_OW 302
16961: IFFALSE 16977
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16963: LD_EXP 11
16967: PPUSH
16968: LD_STRING D11-Eng1-1
16970: PPUSH
16971: CALL_OW 88
// end else
16975: GO 17173
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16977: LD_INT 22
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 21
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 25
16999: PUSH
17000: LD_INT 3
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 26
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: PPUSH
17023: CALL_OW 69
17027: PUSH
17028: LD_EXP 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: PUSH
17036: LD_INT 0
17038: GREATER
17039: DIFF
17040: IFFALSE 17114
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17042: LD_INT 22
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 21
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 25
17064: PUSH
17065: LD_INT 2
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 26
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_EXP 1
17097: PUSH
17098: EMPTY
17099: LIST
17100: DIFF
17101: PPUSH
17102: LD_STRING D11-Eng1-1
17104: PPUSH
17105: LD_STRING D11-Eng1-1
17107: PPUSH
17108: CALL 4050 0 3
// end else
17112: GO 17173
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17114: LD_INT 22
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 21
17126: PUSH
17127: LD_INT 1
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 26
17136: PUSH
17137: LD_INT 1
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: PPUSH
17149: CALL_OW 69
17153: PUSH
17154: LD_EXP 1
17158: PUSH
17159: EMPTY
17160: LIST
17161: DIFF
17162: PPUSH
17163: LD_STRING D11-Eng1-1
17165: PPUSH
17166: LD_STRING D11-Eng1-1
17168: PPUSH
17169: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
17173: LD_EXP 33
17177: PUSH
17178: LD_INT 0
17180: EQUAL
17181: IFFALSE 17187
// EnergyDialog ;
17183: CALL 4541 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 266
17196: PUSH
17197: LD_INT 29
17199: EQUAL
17200: PUSH
17201: LD_VAR 0 1
17205: PPUSH
17206: CALL_OW 255
17210: PUSH
17211: LD_INT 1
17213: EQUAL
17214: AND
17215: IFFALSE 17225
// buildOil = 1 ;
17217: LD_ADDR_EXP 34
17221: PUSH
17222: LD_INT 1
17224: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL_OW 266
17234: PUSH
17235: LD_INT 26
17237: EQUAL
17238: PUSH
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 255
17248: PUSH
17249: LD_INT 1
17251: EQUAL
17252: AND
17253: IFFALSE 17263
// buildPower = 1 ;
17255: LD_ADDR_EXP 35
17259: PUSH
17260: LD_INT 1
17262: ST_TO_ADDR
// end ;
17263: PPOPN 8
17265: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17266: LD_VAR 0 1
17270: PPUSH
17271: CALL_OW 266
17275: PUSH
17276: LD_INT 3
17278: EQUAL
17279: PUSH
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 255
17289: PUSH
17290: LD_INT 1
17292: EQUAL
17293: AND
17294: PUSH
17295: LD_EXP 31
17299: PUSH
17300: LD_INT 0
17302: EQUAL
17303: AND
17304: IFFALSE 17620
// begin factoryDialog = 1 ;
17306: LD_ADDR_EXP 31
17310: PUSH
17311: LD_INT 1
17313: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17314: LD_INT 22
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 21
17326: PUSH
17327: LD_INT 3
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 30
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 24
17346: PUSH
17347: LD_INT 1000
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 69
17364: PUSH
17365: LD_INT 1
17367: ARRAY
17368: PPUSH
17369: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17373: LD_EXP 1
17377: PPUSH
17378: LD_STRING D9a-JMM-1
17380: PPUSH
17381: CALL_OW 88
// if IsOK ( Campell ) then
17385: LD_EXP 12
17389: PPUSH
17390: CALL_OW 302
17394: IFFALSE 17410
// begin Say ( Campell , D9a-Mech1-1 ) ;
17396: LD_EXP 12
17400: PPUSH
17401: LD_STRING D9a-Mech1-1
17403: PPUSH
17404: CALL_OW 88
// end else
17408: GO 17606
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17410: LD_INT 22
17412: PUSH
17413: LD_INT 1
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 21
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 25
17432: PUSH
17433: LD_INT 3
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 26
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PPUSH
17456: CALL_OW 69
17460: PUSH
17461: LD_EXP 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: PUSH
17469: LD_INT 0
17471: GREATER
17472: DIFF
17473: IFFALSE 17547
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17475: LD_INT 22
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 21
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 25
17497: PUSH
17498: LD_INT 3
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 26
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: PPUSH
17521: CALL_OW 69
17525: PUSH
17526: LD_EXP 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: DIFF
17534: PPUSH
17535: LD_STRING D9a-Mech1-1
17537: PPUSH
17538: LD_STRING D9a-Mech1-1
17540: PPUSH
17541: CALL 4050 0 3
// end else
17545: GO 17606
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17547: LD_INT 22
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 21
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 26
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 69
17586: PUSH
17587: LD_EXP 1
17591: PUSH
17592: EMPTY
17593: LIST
17594: DIFF
17595: PPUSH
17596: LD_STRING D9a-Mech1-1
17598: PPUSH
17599: LD_STRING D9a-Mech1-1
17601: PPUSH
17602: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
17606: LD_EXP 33
17610: PUSH
17611: LD_INT 0
17613: EQUAL
17614: IFFALSE 17620
// EnergyDialog ;
17616: CALL 4541 0 0
// end ; end ;
17620: PPOPN 1
17622: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17623: LD_VAR 0 1
17627: PPUSH
17628: CALL_OW 247
17632: PUSH
17633: LD_INT 1
17635: EQUAL
17636: PUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 255
17646: PUSH
17647: LD_INT 1
17649: EQUAL
17650: AND
17651: IFFALSE 17667
// lostCounter = lostCounter + 1 ;
17653: LD_ADDR_EXP 38
17657: PUSH
17658: LD_EXP 38
17662: PUSH
17663: LD_INT 1
17665: PLUS
17666: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17667: LD_VAR 0 1
17671: PPUSH
17672: CALL_OW 257
17676: PUSH
17677: LD_INT 3
17679: EQUAL
17680: PUSH
17681: LD_VAR 0 1
17685: PPUSH
17686: CALL_OW 255
17690: PUSH
17691: LD_INT 3
17693: EQUAL
17694: AND
17695: PUSH
17696: LD_INT 24
17698: PPUSH
17699: CALL_OW 302
17703: AND
17704: PUSH
17705: LD_INT 24
17707: PPUSH
17708: CALL_OW 255
17712: PUSH
17713: LD_INT 3
17715: EQUAL
17716: AND
17717: IFFALSE 17785
// begin uc_side = 3 ;
17719: LD_ADDR_OWVAR 20
17723: PUSH
17724: LD_INT 3
17726: ST_TO_ADDR
// uc_nation = 3 ;
17727: LD_ADDR_OWVAR 21
17731: PUSH
17732: LD_INT 3
17734: ST_TO_ADDR
// hc_gallery :=  ;
17735: LD_ADDR_OWVAR 33
17739: PUSH
17740: LD_STRING 
17742: ST_TO_ADDR
// hc_name :=  ;
17743: LD_ADDR_OWVAR 26
17747: PUSH
17748: LD_STRING 
17750: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17751: LD_INT 0
17753: PPUSH
17754: LD_EXP 16
17758: PPUSH
17759: LD_EXP 17
17763: PPUSH
17764: CALL_OW 12
17768: PPUSH
17769: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17773: CALL_OW 44
17777: PPUSH
17778: LD_INT 24
17780: PPUSH
17781: CALL_OW 52
// end ; end ;
17785: PPOPN 1
17787: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17792: LD_ADDR_VAR 0 4
17796: PUSH
17797: LD_INT 22
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 69
17811: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17812: LD_VAR 0 1
17816: PUSH
17817: LD_INT 1
17819: EQUAL
17820: PUSH
17821: LD_VAR 0 2
17825: PUSH
17826: LD_INT 6
17828: EQUAL
17829: AND
17830: PUSH
17831: LD_EXP 41
17835: PUSH
17836: LD_INT 1
17838: EQUAL
17839: AND
17840: IFFALSE 17895
// begin donaldsonCoopAttack = 0 ;
17842: LD_ADDR_EXP 41
17846: PUSH
17847: LD_INT 0
17849: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17850: LD_ADDR_VAR 0 3
17854: PUSH
17855: LD_INT 22
17857: PUSH
17858: LD_INT 4
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: EMPTY
17866: LIST
17867: PPUSH
17868: CALL_OW 69
17872: PUSH
17873: FOR_IN
17874: IFFALSE 17893
// ComAgressiveMove ( i , 52 , 64 ) ;
17876: LD_VAR 0 3
17880: PPUSH
17881: LD_INT 52
17883: PPUSH
17884: LD_INT 64
17886: PPUSH
17887: CALL_OW 114
17891: GO 17873
17893: POP
17894: POP
// end ; end ;
17895: PPOPN 4
17897: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL_OW 264
17907: PUSH
17908: LD_INT 53
17910: EQUAL
17911: IFFALSE 17996
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17913: LD_VAR 0 1
17917: PPUSH
17918: LD_INT 21
17920: PPUSH
17921: CALL 4757 0 2
// uc_side = 3 ;
17925: LD_ADDR_OWVAR 20
17929: PUSH
17930: LD_INT 3
17932: ST_TO_ADDR
// uc_nation = 3 ;
17933: LD_ADDR_OWVAR 21
17937: PUSH
17938: LD_INT 3
17940: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17941: LD_INT 0
17943: PPUSH
17944: LD_EXP 17
17948: PPUSH
17949: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17953: CALL_OW 44
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17967: LD_VAR 0 1
17971: PPUSH
17972: LD_INT 6
17974: PPUSH
17975: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: CALL_OW 313
17988: PPUSH
17989: LD_INT 6
17991: PPUSH
17992: CALL_OW 235
// end ; if building = rubfact0 and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
17996: LD_VAR 0 2
18000: PUSH
18001: LD_INT 24
18003: EQUAL
18004: PUSH
18005: LD_VAR 0 2
18009: PPUSH
18010: CALL_OW 255
18014: PUSH
18015: LD_INT 3
18017: EQUAL
18018: AND
18019: PUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: CALL_OW 264
18029: PUSH
18030: LD_INT 42
18032: EQUAL
18033: PUSH
18034: LD_VAR 0 1
18038: PPUSH
18039: CALL_OW 264
18043: PUSH
18044: LD_INT 43
18046: EQUAL
18047: OR
18048: PUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 264
18058: PUSH
18059: LD_INT 44
18061: EQUAL
18062: OR
18063: PUSH
18064: EMPTY
18065: LIST
18066: AND
18067: IFFALSE 18085
// russianTanks = russianTanks ^ vehicle ;
18069: LD_ADDR_EXP 18
18073: PUSH
18074: LD_EXP 18
18078: PUSH
18079: LD_VAR 0 1
18083: ADD
18084: ST_TO_ADDR
// end ;
18085: PPOPN 2
18087: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18088: LD_INT 0
18090: PPUSH
18091: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL_OW 255
18101: PUSH
18102: LD_INT 3
18104: EQUAL
18105: PUSH
18106: LD_VAR 0 1
18110: PPUSH
18111: CALL_OW 247
18115: PUSH
18116: LD_INT 2
18118: EQUAL
18119: AND
18120: PUSH
18121: LD_VAR 0 1
18125: PPUSH
18126: CALL_OW 264
18130: PUSH
18131: LD_INT 42
18133: EQUAL
18134: PUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 264
18144: PUSH
18145: LD_INT 43
18147: EQUAL
18148: OR
18149: PUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 264
18159: PUSH
18160: LD_INT 44
18162: EQUAL
18163: OR
18164: PUSH
18165: EMPTY
18166: LIST
18167: AND
18168: IFFALSE 18308
// begin AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18170: LD_INT 24
18172: PPUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 265
18182: PPUSH
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 262
18192: PPUSH
18193: LD_VAR 0 1
18197: PPUSH
18198: CALL_OW 263
18202: PPUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: CALL_OW 264
18212: PPUSH
18213: CALL_OW 185
// for i in russianDamageTanks do
18217: LD_ADDR_VAR 0 2
18221: PUSH
18222: LD_EXP 19
18226: PUSH
18227: FOR_IN
18228: IFFALSE 18263
// if i = unit then
18230: LD_VAR 0 2
18234: PUSH
18235: LD_VAR 0 1
18239: EQUAL
18240: IFFALSE 18261
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
18242: LD_ADDR_EXP 19
18246: PUSH
18247: LD_EXP 19
18251: PUSH
18252: LD_VAR 0 1
18256: PUSH
18257: EMPTY
18258: LIST
18259: DIFF
18260: ST_TO_ADDR
18261: GO 18227
18263: POP
18264: POP
// tmpMeh = UnitsInside ( unit ) ;
18265: LD_ADDR_VAR 0 3
18269: PUSH
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 313
18279: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
18280: LD_VAR 0 3
18284: PPUSH
18285: CALL_OW 121
// wait ( 0 0$01 ) ;
18289: LD_INT 35
18291: PPUSH
18292: CALL_OW 67
// ComEnterUnit ( tmpMeh , rubfact0 ) ;
18296: LD_VAR 0 3
18300: PPUSH
18301: LD_INT 24
18303: PPUSH
18304: CALL_OW 120
// end ; end ;
18308: PPOPN 3
18310: END
// on Command ( comandid ) do var i , j , tmp ;
18311: LD_INT 0
18313: PPUSH
18314: PPUSH
18315: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18316: LD_ADDR_VAR 0 2
18320: PUSH
18321: LD_INT 22
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: LD_INT 21
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 21
18346: PUSH
18347: LD_INT 2
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PPUSH
18363: CALL_OW 69
18367: PUSH
18368: FOR_IN
18369: IFFALSE 18479
// begin if GetTaskList ( i ) > 0 then
18371: LD_VAR 0 2
18375: PPUSH
18376: CALL_OW 437
18380: PUSH
18381: LD_INT 0
18383: GREATER
18384: IFFALSE 18477
// begin for j = 1 to GetTaskList ( i ) do
18386: LD_ADDR_VAR 0 3
18390: PUSH
18391: DOUBLE
18392: LD_INT 1
18394: DEC
18395: ST_TO_ADDR
18396: LD_VAR 0 2
18400: PPUSH
18401: CALL_OW 437
18405: PUSH
18406: FOR_TO
18407: IFFALSE 18475
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18409: LD_ADDR_VAR 0 4
18413: PUSH
18414: LD_VAR 0 2
18418: PPUSH
18419: CALL_OW 437
18423: PUSH
18424: LD_VAR 0 3
18428: ARRAY
18429: PUSH
18430: LD_INT 4
18432: ARRAY
18433: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18434: LD_VAR 0 4
18438: PPUSH
18439: CALL_OW 255
18443: PUSH
18444: LD_INT 4
18446: EQUAL
18447: PUSH
18448: LD_VAR 0 4
18452: PPUSH
18453: CALL_OW 255
18457: PUSH
18458: LD_INT 0
18460: EQUAL
18461: OR
18462: IFFALSE 18473
// ComStop ( i ) ;
18464: LD_VAR 0 2
18468: PPUSH
18469: CALL_OW 141
// end ;
18473: GO 18406
18475: POP
18476: POP
// end ; end ;
18477: GO 18368
18479: POP
18480: POP
// end ; end_of_file
18481: PPOPN 4
18483: END
// every 10 10$0 do
18484: GO 18486
18486: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18487: LD_INT 5
18489: PPUSH
18490: LD_INT 3
18492: PPUSH
18493: LD_INT 2
18495: PPUSH
18496: LD_INT 5
18498: PPUSH
18499: CALL_OW 12
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: LD_INT 3
18509: PUSH
18510: LD_INT 3
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: LIST
18517: PUSH
18518: LD_OWVAR 67
18522: ARRAY
18523: PLUS
18524: PPUSH
18525: LD_INT 0
18527: PPUSH
18528: LD_INT 0
18530: PPUSH
18531: LD_INT 0
18533: PPUSH
18534: LD_INT 1
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: LD_INT 3
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: PUSH
18548: LD_OWVAR 67
18552: ARRAY
18553: PPUSH
18554: LD_EXP 16
18558: PPUSH
18559: LD_EXP 17
18563: PPUSH
18564: CALL_OW 12
18568: PPUSH
18569: LD_INT 4
18571: PPUSH
18572: LD_INT 14
18574: PPUSH
18575: LD_INT 1
18577: PPUSH
18578: LD_INT 2
18580: PPUSH
18581: CALL 6621 0 12
// end ;
18585: END
// every 15 15$0 do
18586: GO 18588
18588: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18589: LD_INT 5
18591: PPUSH
18592: LD_INT 3
18594: PPUSH
18595: LD_INT 3
18597: PPUSH
18598: LD_INT 5
18600: PPUSH
18601: CALL_OW 12
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: LD_INT 3
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: PUSH
18620: LD_OWVAR 67
18624: ARRAY
18625: PLUS
18626: PPUSH
18627: LD_INT 0
18629: PPUSH
18630: LD_INT 0
18632: PPUSH
18633: LD_INT 0
18635: PPUSH
18636: LD_INT 2
18638: PUSH
18639: LD_INT 2
18641: PUSH
18642: LD_INT 3
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: PUSH
18650: LD_OWVAR 67
18654: ARRAY
18655: PPUSH
18656: LD_EXP 16
18660: PPUSH
18661: LD_EXP 17
18665: PPUSH
18666: CALL_OW 12
18670: PPUSH
18671: LD_INT 4
18673: PPUSH
18674: LD_INT 14
18676: PPUSH
18677: LD_INT 1
18679: PPUSH
18680: LD_INT 1
18682: PPUSH
18683: CALL 6621 0 12
// end ;
18687: END
// every 25 25$0 do
18688: GO 18690
18690: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18691: LD_INT 5
18693: PPUSH
18694: LD_INT 3
18696: PPUSH
18697: LD_INT 2
18699: PPUSH
18700: LD_INT 3
18702: PPUSH
18703: CALL_OW 12
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 3
18713: PUSH
18714: LD_INT 3
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: LD_OWVAR 67
18726: ARRAY
18727: PLUS
18728: PPUSH
18729: LD_INT 0
18731: PPUSH
18732: LD_INT 0
18734: PPUSH
18735: LD_INT 0
18737: PPUSH
18738: LD_INT 1
18740: PUSH
18741: LD_INT 2
18743: PUSH
18744: LD_INT 3
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: PUSH
18752: LD_OWVAR 67
18756: ARRAY
18757: PPUSH
18758: LD_EXP 16
18762: PPUSH
18763: LD_EXP 17
18767: PPUSH
18768: CALL_OW 12
18772: PPUSH
18773: LD_INT 4
18775: PPUSH
18776: LD_INT 14
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: CALL 6621 0 12
// end ;
18789: END
// every 26 26$0 do
18790: GO 18792
18792: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18793: LD_INT 5
18795: PPUSH
18796: LD_INT 3
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_INT 3
18804: PPUSH
18805: CALL_OW 12
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: PUSH
18824: LD_OWVAR 67
18828: ARRAY
18829: PLUS
18830: PPUSH
18831: LD_INT 0
18833: PPUSH
18834: LD_INT 0
18836: PPUSH
18837: LD_INT 0
18839: PPUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: LD_INT 3
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: PUSH
18854: LD_OWVAR 67
18858: ARRAY
18859: PPUSH
18860: LD_EXP 16
18864: PPUSH
18865: LD_EXP 17
18869: PPUSH
18870: CALL_OW 12
18874: PPUSH
18875: LD_INT 4
18877: PPUSH
18878: LD_INT 14
18880: PPUSH
18881: LD_INT 1
18883: PPUSH
18884: LD_INT 2
18886: PPUSH
18887: CALL 6621 0 12
// end ;
18891: END
// every 25 25$0 do
18892: GO 18894
18894: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18895: LD_INT 4
18897: PPUSH
18898: LD_INT 5
18900: PPUSH
18901: LD_INT 3
18903: PUSH
18904: LD_INT 4
18906: PUSH
18907: LD_INT 5
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: LD_OWVAR 67
18919: ARRAY
18920: PPUSH
18921: LD_EXP 16
18925: PPUSH
18926: LD_EXP 17
18930: PPUSH
18931: CALL_OW 12
18935: PPUSH
18936: LD_INT 3
18938: PPUSH
18939: LD_INT 1
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: LD_INT 42
18947: PUSH
18948: LD_INT 42
18950: PUSH
18951: LD_INT 43
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 42
18961: PUSH
18962: LD_INT 43
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 43
18971: PUSH
18972: LD_INT 43
18974: PUSH
18975: LD_INT 43
18977: PUSH
18978: LD_INT 44
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: PUSH
18992: LD_OWVAR 67
18996: ARRAY
18997: PPUSH
18998: EMPTY
18999: PPUSH
19000: EMPTY
19001: PPUSH
19002: LD_INT 1
19004: PPUSH
19005: CALL 9577 0 11
// end ; end_of_file
19009: END
// every 0 0$1 trigger startTimer = 1 do
19010: LD_EXP 30
19014: PUSH
19015: LD_INT 1
19017: EQUAL
19018: IFFALSE 19148
19020: GO 19022
19022: DISABLE
// begin enable ;
19023: ENABLE
// if timerStatus = 1 then
19024: LD_EXP 29
19028: PUSH
19029: LD_INT 1
19031: EQUAL
19032: IFFALSE 19065
// begin timeToSupport = timeToSupport - 0 0$01 ;
19034: LD_ADDR_EXP 28
19038: PUSH
19039: LD_EXP 28
19043: PUSH
19044: LD_INT 35
19046: MINUS
19047: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19048: LD_ADDR_OWVAR 47
19052: PUSH
19053: LD_STRING #Am04-1
19055: PUSH
19056: LD_EXP 28
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: ST_TO_ADDR
// end ; if timerStatus = 2 then
19065: LD_EXP 29
19069: PUSH
19070: LD_INT 2
19072: EQUAL
19073: IFFALSE 19106
// begin timeToSupport = timeToSupport - 0 0$01 ;
19075: LD_ADDR_EXP 28
19079: PUSH
19080: LD_EXP 28
19084: PUSH
19085: LD_INT 35
19087: MINUS
19088: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19089: LD_ADDR_OWVAR 47
19093: PUSH
19094: LD_STRING #Am04-2
19096: PUSH
19097: LD_EXP 28
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: ST_TO_ADDR
// end ; if timerStatus = 3 then
19106: LD_EXP 29
19110: PUSH
19111: LD_INT 3
19113: EQUAL
19114: IFFALSE 19130
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19116: LD_ADDR_EXP 27
19120: PUSH
19121: LD_EXP 27
19125: PUSH
19126: LD_INT 35
19128: MINUS
19129: ST_TO_ADDR
// end ; if timerStatus = 4 then
19130: LD_EXP 29
19134: PUSH
19135: LD_INT 4
19137: EQUAL
19138: IFFALSE 19148
// begin display_strings =  ;
19140: LD_ADDR_OWVAR 47
19144: PUSH
19145: LD_STRING 
19147: ST_TO_ADDR
// end ; end ; end_of_file
19148: END
// every 0 0$1 trigger IsDead ( JMM ) do
19149: LD_EXP 1
19153: PPUSH
19154: CALL_OW 301
19158: IFFALSE 19170
19160: GO 19162
19162: DISABLE
// YouLost ( JMM ) ;
19163: LD_STRING JMM
19165: PPUSH
19166: CALL_OW 104
19170: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19171: LD_INT 4
19173: PPUSH
19174: CALL_OW 301
19178: IFFALSE 19190
19180: GO 19182
19182: DISABLE
// YouLost ( Base ) ; end_of_file
19183: LD_STRING Base
19185: PPUSH
19186: CALL_OW 104
19190: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
19191: LD_EXP 15
19195: PPUSH
19196: CALL_OW 301
19200: IFFALSE 19582
19202: GO 19204
19204: DISABLE
19205: LD_INT 0
19207: PPUSH
// begin AIEnable = 0 ;
19208: LD_ADDR_EXP 37
19212: PUSH
19213: LD_INT 0
19215: ST_TO_ADDR
// escapeAvalaible = 1 ;
19216: LD_ADDR_EXP 40
19220: PUSH
19221: LD_INT 1
19223: ST_TO_ADDR
// InGameOn ;
19224: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19228: LD_INT 3
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: LD_INT 1
19236: PPUSH
19237: LD_INT 0
19239: PPUSH
19240: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19244: LD_INT 6
19246: PPUSH
19247: LD_INT 1
19249: PPUSH
19250: LD_INT 1
19252: PPUSH
19253: LD_INT 0
19255: PPUSH
19256: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19260: LD_INT 5
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: LD_INT 1
19268: PPUSH
19269: LD_INT 0
19271: PPUSH
19272: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19276: LD_INT 3
19278: PPUSH
19279: LD_INT 1
19281: PPUSH
19282: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19286: LD_INT 97
19288: PPUSH
19289: LD_INT 91
19291: PPUSH
19292: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19296: LD_INT 22
19298: PUSH
19299: LD_INT 3
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 21
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PPUSH
19320: CALL_OW 69
19324: PPUSH
19325: CALL_OW 121
// wait ( 0 0$01 ) ;
19329: LD_INT 35
19331: PPUSH
19332: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19336: LD_INT 22
19338: PUSH
19339: LD_INT 3
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 21
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 69
19364: PPUSH
19365: LD_INT 124
19367: PPUSH
19368: LD_INT 98
19370: PPUSH
19371: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19375: LD_INT 22
19377: PUSH
19378: LD_INT 5
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 21
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PPUSH
19399: CALL_OW 69
19403: PPUSH
19404: CALL_OW 121
// wait ( 0 0$01 ) ;
19408: LD_INT 35
19410: PPUSH
19411: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19415: LD_INT 22
19417: PUSH
19418: LD_INT 5
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 21
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PPUSH
19439: CALL_OW 69
19443: PPUSH
19444: LD_INT 124
19446: PPUSH
19447: LD_INT 98
19449: PPUSH
19450: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19454: LD_INT 22
19456: PUSH
19457: LD_INT 6
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 21
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PPUSH
19478: CALL_OW 69
19482: PPUSH
19483: CALL_OW 121
// wait ( 0 0$01 ) ;
19487: LD_INT 35
19489: PPUSH
19490: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19494: LD_INT 22
19496: PUSH
19497: LD_INT 6
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 21
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PPUSH
19518: CALL_OW 69
19522: PPUSH
19523: LD_INT 124
19525: PPUSH
19526: LD_INT 98
19528: PPUSH
19529: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19533: LD_INT 22
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 21
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PPUSH
19557: CALL_OW 69
19561: PPUSH
19562: LD_INT 124
19564: PPUSH
19565: LD_INT 98
19567: PPUSH
19568: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19572: LD_INT 124
19574: PPUSH
19575: LD_INT 98
19577: PPUSH
19578: CALL_OW 84
// end ;
19582: PPOPN 1
19584: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
19585: LD_INT 23
19587: PUSH
19588: LD_INT 3
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 21
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 24
19607: PUSH
19608: LD_INT 250
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: LIST
19619: PPUSH
19620: CALL_OW 69
19624: PUSH
19625: LD_INT 0
19627: EQUAL
19628: IFFALSE 19637
19630: GO 19632
19632: DISABLE
// FinishMission ;
19633: CALL 19808 0 0
19637: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19638: LD_EXP 40
19642: PUSH
19643: LD_INT 1
19645: EQUAL
19646: IFFALSE 19805
19648: GO 19650
19650: DISABLE
19651: LD_INT 0
19653: PPUSH
// begin enable ;
19654: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19655: LD_ADDR_VAR 0 1
19659: PUSH
19660: LD_INT 22
19662: PUSH
19663: LD_INT 3
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PPUSH
19670: CALL_OW 69
19674: PUSH
19675: FOR_IN
19676: IFFALSE 19703
// if IsInArea ( i , RussianEscape ) then
19678: LD_VAR 0 1
19682: PPUSH
19683: LD_INT 5
19685: PPUSH
19686: CALL_OW 308
19690: IFFALSE 19701
// RemoveUnit ( i ) ;
19692: LD_VAR 0 1
19696: PPUSH
19697: CALL_OW 64
19701: GO 19675
19703: POP
19704: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19705: LD_ADDR_VAR 0 1
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_INT 5
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: PUSH
19725: FOR_IN
19726: IFFALSE 19753
// if IsInArea ( i , RussianEscape ) then
19728: LD_VAR 0 1
19732: PPUSH
19733: LD_INT 5
19735: PPUSH
19736: CALL_OW 308
19740: IFFALSE 19751
// RemoveUnit ( i ) ;
19742: LD_VAR 0 1
19746: PPUSH
19747: CALL_OW 64
19751: GO 19725
19753: POP
19754: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_INT 22
19762: PUSH
19763: LD_INT 6
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 69
19774: PUSH
19775: FOR_IN
19776: IFFALSE 19803
// if IsInArea ( i , RussianEscape ) then
19778: LD_VAR 0 1
19782: PPUSH
19783: LD_INT 5
19785: PPUSH
19786: CALL_OW 308
19790: IFFALSE 19801
// RemoveUnit ( i ) ;
19792: LD_VAR 0 1
19796: PPUSH
19797: CALL_OW 64
19801: GO 19775
19803: POP
19804: POP
// end ;
19805: PPOPN 1
19807: END
// export function FinishMission ; var tmp ; begin
19808: LD_INT 0
19810: PPUSH
19811: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19812: LD_INT 69
19814: PPUSH
19815: LD_INT 1
19817: PPUSH
19818: CALL_OW 321
19822: PPUSH
19823: LD_STRING GatlingInGamma
19825: PPUSH
19826: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19830: LD_EXP 34
19834: PUSH
19835: LD_INT 1
19837: EQUAL
19838: PUSH
19839: LD_EXP 35
19843: PUSH
19844: LD_INT 1
19846: EQUAL
19847: AND
19848: IFFALSE 19862
// begin AddMedal ( oil , 1 ) ;
19850: LD_STRING oil
19852: PPUSH
19853: LD_INT 1
19855: PPUSH
19856: CALL_OW 101
// end else
19860: GO 19955
// begin if buildOil = 1 and buildPower = 0 then
19862: LD_EXP 34
19866: PUSH
19867: LD_INT 1
19869: EQUAL
19870: PUSH
19871: LD_EXP 35
19875: PUSH
19876: LD_INT 0
19878: EQUAL
19879: AND
19880: IFFALSE 19893
// AddMedal ( oil , - 1 ) ;
19882: LD_STRING oil
19884: PPUSH
19885: LD_INT 1
19887: NEG
19888: PPUSH
19889: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19893: LD_EXP 34
19897: PUSH
19898: LD_INT 0
19900: EQUAL
19901: PUSH
19902: LD_EXP 35
19906: PUSH
19907: LD_INT 1
19909: EQUAL
19910: AND
19911: IFFALSE 19924
// AddMedal ( oil , - 2 ) ;
19913: LD_STRING oil
19915: PPUSH
19916: LD_INT 2
19918: NEG
19919: PPUSH
19920: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19924: LD_EXP 34
19928: PUSH
19929: LD_INT 0
19931: EQUAL
19932: PUSH
19933: LD_EXP 35
19937: PUSH
19938: LD_INT 0
19940: EQUAL
19941: AND
19942: IFFALSE 19955
// AddMedal ( oil , - 3 ) ;
19944: LD_STRING oil
19946: PPUSH
19947: LD_INT 3
19949: NEG
19950: PPUSH
19951: CALL_OW 101
// end ; if lostCounter > 3 then
19955: LD_EXP 38
19959: PUSH
19960: LD_INT 3
19962: GREATER
19963: IFFALSE 19978
// begin AddMedal ( deaths , - 1 ) ;
19965: LD_STRING deaths
19967: PPUSH
19968: LD_INT 1
19970: NEG
19971: PPUSH
19972: CALL_OW 101
// end else
19976: GO 19988
// begin AddMedal ( deaths , 1 ) ;
19978: LD_STRING deaths
19980: PPUSH
19981: LD_INT 1
19983: PPUSH
19984: CALL_OW 101
// end ; if honor = 1 then
19988: LD_EXP 39
19992: PUSH
19993: LD_INT 1
19995: EQUAL
19996: IFFALSE 20010
// begin AddMedal ( honour , 1 ) ;
19998: LD_STRING honour
20000: PPUSH
20001: LD_INT 1
20003: PPUSH
20004: CALL_OW 101
// end else
20008: GO 20021
// begin AddMedal ( honour , - 1 ) ;
20010: LD_STRING honour
20012: PPUSH
20013: LD_INT 1
20015: NEG
20016: PPUSH
20017: CALL_OW 101
// end ; GiveMedals ( Main ) ;
20021: LD_STRING Main
20023: PPUSH
20024: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20028: LD_INT 22
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 23
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: PPUSH
20068: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20072: LD_EXP 1
20076: PPUSH
20077: LD_EXP 44
20081: PUSH
20082: LD_STRING JMM
20084: STR
20085: PPUSH
20086: CALL_OW 38
// if IsOK ( Bobby ) then
20090: LD_EXP 2
20094: PPUSH
20095: CALL_OW 302
20099: IFFALSE 20119
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20101: LD_EXP 2
20105: PPUSH
20106: LD_EXP 44
20110: PUSH
20111: LD_STRING Bobby
20113: STR
20114: PPUSH
20115: CALL_OW 38
// if IsOK ( Cyrus ) then
20119: LD_EXP 3
20123: PPUSH
20124: CALL_OW 302
20128: IFFALSE 20148
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20130: LD_EXP 3
20134: PPUSH
20135: LD_EXP 44
20139: PUSH
20140: LD_STRING Cyrus
20142: STR
20143: PPUSH
20144: CALL_OW 38
// if IsOK ( Lisa ) then
20148: LD_EXP 4
20152: PPUSH
20153: CALL_OW 302
20157: IFFALSE 20177
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20159: LD_EXP 4
20163: PPUSH
20164: LD_EXP 44
20168: PUSH
20169: LD_STRING Lisa
20171: STR
20172: PPUSH
20173: CALL_OW 38
// if IsOK ( Brown ) then
20177: LD_EXP 7
20181: PPUSH
20182: CALL_OW 302
20186: IFFALSE 20206
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20188: LD_EXP 7
20192: PPUSH
20193: LD_EXP 44
20197: PUSH
20198: LD_STRING Brown
20200: STR
20201: PPUSH
20202: CALL_OW 38
// if IsOK ( Donaldson ) then
20206: LD_EXP 13
20210: PPUSH
20211: CALL_OW 302
20215: IFFALSE 20235
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20217: LD_EXP 13
20221: PPUSH
20222: LD_EXP 44
20226: PUSH
20227: LD_STRING Donaldson
20229: STR
20230: PPUSH
20231: CALL_OW 38
// if IsOK ( Frank ) then
20235: LD_EXP 5
20239: PPUSH
20240: CALL_OW 302
20244: IFFALSE 20264
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20246: LD_EXP 5
20250: PPUSH
20251: LD_EXP 44
20255: PUSH
20256: LD_STRING Frank
20258: STR
20259: PPUSH
20260: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20264: LD_INT 50
20266: PUSH
20267: EMPTY
20268: LIST
20269: PUSH
20270: LD_INT 22
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: LIST
20294: PPUSH
20295: CALL_OW 69
20299: PUSH
20300: LD_EXP 1
20304: PUSH
20305: LD_EXP 2
20309: PUSH
20310: LD_EXP 3
20314: PUSH
20315: LD_EXP 4
20319: PUSH
20320: LD_EXP 7
20324: PUSH
20325: LD_EXP 13
20329: PUSH
20330: LD_EXP 5
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: DIFF
20344: PPUSH
20345: LD_STRING 04_other_survivors
20347: PPUSH
20348: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20352: LD_INT 22
20354: PPUSH
20355: CALL 20368 0 1
// YouWin ;
20359: CALL_OW 103
// end ;
20363: LD_VAR 0 1
20367: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20368: LD_INT 0
20370: PPUSH
20371: PPUSH
20372: PPUSH
20373: PPUSH
// gammaBase = [ ] ;
20374: LD_ADDR_VAR 0 4
20378: PUSH
20379: EMPTY
20380: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20381: LD_ADDR_VAR 0 5
20385: PUSH
20386: LD_VAR 0 1
20390: PPUSH
20391: LD_INT 22
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 21
20403: PUSH
20404: LD_INT 3
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 50
20413: PUSH
20414: EMPTY
20415: LIST
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: LIST
20421: PPUSH
20422: CALL_OW 70
20426: ST_TO_ADDR
// for i in buildings do
20427: LD_ADDR_VAR 0 3
20431: PUSH
20432: LD_VAR 0 5
20436: PUSH
20437: FOR_IN
20438: IFFALSE 20775
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20440: LD_VAR 0 3
20444: PPUSH
20445: CALL_OW 266
20449: PUSH
20450: LD_INT 6
20452: PUSH
20453: LD_INT 7
20455: PUSH
20456: LD_INT 8
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: IN
20464: IFFALSE 20578
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20466: LD_ADDR_VAR 0 4
20470: PUSH
20471: LD_VAR 0 4
20475: PUSH
20476: LD_VAR 0 3
20480: PPUSH
20481: CALL_OW 266
20485: PUSH
20486: LD_VAR 0 3
20490: PPUSH
20491: CALL_OW 250
20495: PUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: CALL_OW 251
20505: PUSH
20506: LD_VAR 0 3
20510: PPUSH
20511: CALL_OW 254
20515: PUSH
20516: LD_VAR 0 3
20520: PPUSH
20521: CALL_OW 267
20525: PUSH
20526: LD_VAR 0 3
20530: PPUSH
20531: CALL_OW 248
20535: PUSH
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 1
20543: PPUSH
20544: CALL_OW 268
20548: PUSH
20549: LD_VAR 0 3
20553: PPUSH
20554: LD_INT 2
20556: PPUSH
20557: CALL_OW 268
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: PUSH
20572: EMPTY
20573: LIST
20574: ADD
20575: ST_TO_ADDR
20576: GO 20773
// if GetBType ( i ) in [ b_bunker ] then
20578: LD_VAR 0 3
20582: PPUSH
20583: CALL_OW 266
20587: PUSH
20588: LD_INT 32
20590: PUSH
20591: EMPTY
20592: LIST
20593: IN
20594: IFFALSE 20691
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20596: LD_ADDR_VAR 0 4
20600: PUSH
20601: LD_VAR 0 4
20605: PUSH
20606: LD_VAR 0 3
20610: PPUSH
20611: CALL_OW 266
20615: PUSH
20616: LD_VAR 0 3
20620: PPUSH
20621: CALL_OW 250
20625: PUSH
20626: LD_VAR 0 3
20630: PPUSH
20631: CALL_OW 251
20635: PUSH
20636: LD_VAR 0 3
20640: PPUSH
20641: CALL_OW 254
20645: PUSH
20646: LD_VAR 0 3
20650: PPUSH
20651: CALL_OW 267
20655: PUSH
20656: LD_VAR 0 3
20660: PPUSH
20661: CALL_OW 248
20665: PUSH
20666: LD_VAR 0 3
20670: PPUSH
20671: CALL_OW 269
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: ADD
20688: ST_TO_ADDR
20689: GO 20773
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20691: LD_ADDR_VAR 0 4
20695: PUSH
20696: LD_VAR 0 4
20700: PUSH
20701: LD_VAR 0 3
20705: PPUSH
20706: CALL_OW 266
20710: PUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: CALL_OW 250
20720: PUSH
20721: LD_VAR 0 3
20725: PPUSH
20726: CALL_OW 251
20730: PUSH
20731: LD_VAR 0 3
20735: PPUSH
20736: CALL_OW 254
20740: PUSH
20741: LD_VAR 0 3
20745: PPUSH
20746: CALL_OW 267
20750: PUSH
20751: LD_VAR 0 3
20755: PPUSH
20756: CALL_OW 248
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: ADD
20772: ST_TO_ADDR
// end ;
20773: GO 20437
20775: POP
20776: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20777: LD_VAR 0 4
20781: PPUSH
20782: LD_STRING GammaBase
20784: PPUSH
20785: CALL_OW 39
// end ; end_of_file
20789: LD_VAR 0 2
20793: RET
// every 1 1$15 do
20794: GO 20796
20796: DISABLE
// begin if supply <= 13 and supply > 7 then
20797: LD_EXP 36
20801: PUSH
20802: LD_INT 13
20804: LESSEQUAL
20805: PUSH
20806: LD_EXP 36
20810: PUSH
20811: LD_INT 7
20813: GREATER
20814: AND
20815: IFFALSE 20838
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20817: LD_INT 3
20819: PPUSH
20820: LD_INT 5
20822: PPUSH
20823: CALL_OW 12
20827: PPUSH
20828: LD_INT 18
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 55
// if supply <= 7 and supply > 4 then
20838: LD_EXP 36
20842: PUSH
20843: LD_INT 7
20845: LESSEQUAL
20846: PUSH
20847: LD_EXP 36
20851: PUSH
20852: LD_INT 4
20854: GREATER
20855: AND
20856: IFFALSE 20879
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20858: LD_INT 3
20860: PPUSH
20861: LD_INT 5
20863: PPUSH
20864: CALL_OW 12
20868: PPUSH
20869: LD_INT 19
20871: PPUSH
20872: LD_INT 1
20874: PPUSH
20875: CALL_OW 55
// if supply <= 4 and supply > 0 then
20879: LD_EXP 36
20883: PUSH
20884: LD_INT 4
20886: LESSEQUAL
20887: PUSH
20888: LD_EXP 36
20892: PUSH
20893: LD_INT 0
20895: GREATER
20896: AND
20897: IFFALSE 20920
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20899: LD_INT 3
20901: PPUSH
20902: LD_INT 5
20904: PPUSH
20905: CALL_OW 12
20909: PPUSH
20910: LD_INT 20
20912: PPUSH
20913: LD_INT 1
20915: PPUSH
20916: CALL_OW 55
// if supply > 0 then
20920: LD_EXP 36
20924: PUSH
20925: LD_INT 0
20927: GREATER
20928: IFFALSE 20945
// begin supply = supply - 1 ;
20930: LD_ADDR_EXP 36
20934: PUSH
20935: LD_EXP 36
20939: PUSH
20940: LD_INT 1
20942: MINUS
20943: ST_TO_ADDR
// enable ;
20944: ENABLE
// end ; end ;
20945: END
