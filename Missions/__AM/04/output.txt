// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 42
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 43
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 41
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 40
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 22
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 23
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 24
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 26
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 27
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 28
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 29
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 30
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 31
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 32
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 33
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 34
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 35
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 39
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 36
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 37
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 38
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4184 0 0
// PrepareRussianBase ;
 241: CALL 2505 0 0
// PrepareRussianCommander ;
 245: CALL 2456 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 41
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3719 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3719 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3719 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3719 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3719 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3719 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3719 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3719 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3719 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3719 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3719 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 706
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// for i = 1 to tmp do
 660: LD_ADDR_VAR 0 2
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_VAR 0 3
 674: PUSH
 675: FOR_TO
 676: IFFALSE 704
// RandomBeforeMission = tmp [ Rand ( 1 , tmp ) ] ;
 678: LD_ADDR_EXP 6
 682: PUSH
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_VAR 0 3
 695: PPUSH
 696: CALL_OW 12
 700: ARRAY
 701: ST_TO_ADDR
 702: GO 675
 704: POP
 705: POP
// end ; uc_side = 4 ;
 706: LD_ADDR_OWVAR 20
 710: PUSH
 711: LD_INT 4
 713: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 714: LD_ADDR_EXP 13
 718: PUSH
 719: LD_STRING Donaldson
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL 3719 0 2
 729: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 730: LD_ADDR_EXP 5
 734: PUSH
 735: LD_STRING Frank
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: CALL 3719 0 2
 745: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 746: LD_EXP 1
 750: PPUSH
 751: LD_INT 32
 753: PPUSH
 754: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 758: LD_EXP 7
 762: PPUSH
 763: LD_INT 1
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 773: LD_EXP 7
 777: PPUSH
 778: LD_INT 32
 780: PPUSH
 781: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 785: LD_EXP 8
 789: PPUSH
 790: LD_INT 2
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 800: LD_EXP 9
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 815: LD_EXP 12
 819: PPUSH
 820: LD_INT 2
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 830: LD_EXP 10
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 845: LD_EXP 11
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 860: LD_EXP 4
 864: PPUSH
 865: LD_INT 2
 867: PPUSH
 868: LD_INT 0
 870: PPUSH
 871: CALL_OW 49
// if Lisa = false then
 875: LD_EXP 4
 879: PUSH
 880: LD_INT 0
 882: EQUAL
 883: IFFALSE 900
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// if Lisa = false and Bobby = false then
 900: LD_EXP 4
 904: PUSH
 905: LD_INT 0
 907: EQUAL
 908: PUSH
 909: LD_EXP 2
 913: PUSH
 914: LD_INT 0
 916: EQUAL
 917: AND
 918: IFFALSE 935
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 920: LD_EXP 3
 924: PPUSH
 925: LD_INT 2
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 935: LD_EXP 4
 939: PUSH
 940: LD_INT 0
 942: EQUAL
 943: PUSH
 944: LD_EXP 2
 948: PUSH
 949: LD_INT 0
 951: EQUAL
 952: AND
 953: PUSH
 954: LD_EXP 3
 958: PUSH
 959: LD_INT 0
 961: EQUAL
 962: AND
 963: IFFALSE 980
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 965: LD_EXP 6
 969: PPUSH
 970: LD_INT 2
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 49
// end ;
 980: LD_VAR 0 1
 984: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 985: LD_INT 0
 987: PPUSH
 988: PPUSH
 989: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 990: LD_EXP 13
 994: PPUSH
 995: LD_INT 10
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1005: LD_EXP 5
1009: PPUSH
1010: LD_INT 10
1012: PPUSH
1013: LD_INT 0
1015: PPUSH
1016: CALL_OW 49
// uc_nation = 1 ;
1020: LD_ADDR_OWVAR 21
1024: PUSH
1025: LD_INT 1
1027: ST_TO_ADDR
// uc_side = 4 ;
1028: LD_ADDR_OWVAR 20
1032: PUSH
1033: LD_INT 4
1035: ST_TO_ADDR
// hc_class := 3 ;
1036: LD_ADDR_OWVAR 28
1040: PUSH
1041: LD_INT 3
1043: ST_TO_ADDR
// hc_sex := sex_male ;
1044: LD_ADDR_OWVAR 27
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1052: LD_ADDR_OWVAR 33
1056: PUSH
1057: LD_STRING SecondCharsGal
1059: ST_TO_ADDR
// hc_face_number := 53 ;
1060: LD_ADDR_OWVAR 34
1064: PUSH
1065: LD_INT 53
1067: ST_TO_ADDR
// hc_name := Freddie Warner ;
1068: LD_ADDR_OWVAR 26
1072: PUSH
1073: LD_STRING Freddie Warner
1075: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1076: LD_ADDR_OWVAR 29
1080: PUSH
1081: LD_INT 8
1083: PUSH
1084: LD_INT 11
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1091: LD_ADDR_OWVAR 30
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 0
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 0
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1114: LD_ADDR_OWVAR 31
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: LD_INT 3
1127: PUSH
1128: LD_INT 0
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: ST_TO_ADDR
// un = CreateHuman ;
1137: LD_ADDR_VAR 0 3
1141: PUSH
1142: CALL_OW 44
1146: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1147: LD_VAR 0 3
1151: PPUSH
1152: LD_INT 10
1154: PPUSH
1155: LD_INT 0
1157: PPUSH
1158: CALL_OW 49
// hc_class := 1 ;
1162: LD_ADDR_OWVAR 28
1166: PUSH
1167: LD_INT 1
1169: ST_TO_ADDR
// hc_sex := sex_male ;
1170: LD_ADDR_OWVAR 27
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1178: LD_ADDR_OWVAR 33
1182: PUSH
1183: LD_STRING SecondCharsGal
1185: ST_TO_ADDR
// hc_face_number := 56 ;
1186: LD_ADDR_OWVAR 34
1190: PUSH
1191: LD_INT 56
1193: ST_TO_ADDR
// hc_name := Mel Brennan ;
1194: LD_ADDR_OWVAR 26
1198: PUSH
1199: LD_STRING Mel Brennan
1201: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1202: LD_ADDR_OWVAR 29
1206: PUSH
1207: LD_INT 12
1209: PUSH
1210: LD_INT 11
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1217: LD_ADDR_OWVAR 30
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1240: LD_ADDR_OWVAR 31
1244: PUSH
1245: LD_INT 2
1247: PUSH
1248: LD_INT 1
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// un = CreateHuman ;
1263: LD_ADDR_VAR 0 3
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1273: LD_VAR 0 3
1277: PPUSH
1278: LD_INT 10
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: CALL_OW 49
// hc_class := 1 ;
1288: LD_ADDR_OWVAR 28
1292: PUSH
1293: LD_INT 1
1295: ST_TO_ADDR
// hc_sex := sex_male ;
1296: LD_ADDR_OWVAR 27
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1304: LD_ADDR_OWVAR 33
1308: PUSH
1309: LD_STRING AmGalRemake
1311: ST_TO_ADDR
// hc_face_number := 5 ;
1312: LD_ADDR_OWVAR 34
1316: PUSH
1317: LD_INT 5
1319: ST_TO_ADDR
// hc_name := Bob Joplin ;
1320: LD_ADDR_OWVAR 26
1324: PUSH
1325: LD_STRING Bob Joplin
1327: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1328: LD_ADDR_OWVAR 29
1332: PUSH
1333: LD_INT 10
1335: PUSH
1336: LD_INT 11
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1343: LD_ADDR_OWVAR 30
1347: PUSH
1348: LD_INT 0
1350: PUSH
1351: LD_INT 1
1353: PUSH
1354: LD_INT 1
1356: PUSH
1357: LD_INT 0
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1366: LD_ADDR_OWVAR 31
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 1
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un = CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1399: LD_VAR 0 3
1403: PPUSH
1404: LD_INT 10
1406: PPUSH
1407: LD_INT 0
1409: PPUSH
1410: CALL_OW 49
// hc_class := 3 ;
1414: LD_ADDR_OWVAR 28
1418: PUSH
1419: LD_INT 3
1421: ST_TO_ADDR
// hc_sex := sex_female ;
1422: LD_ADDR_OWVAR 27
1426: PUSH
1427: LD_INT 2
1429: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1430: LD_ADDR_OWVAR 33
1434: PUSH
1435: LD_STRING AmGalRemake
1437: ST_TO_ADDR
// hc_face_number := 4 ;
1438: LD_ADDR_OWVAR 34
1442: PUSH
1443: LD_INT 4
1445: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1446: LD_ADDR_OWVAR 26
1450: PUSH
1451: LD_STRING Elizabeth Whitney
1453: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1454: LD_ADDR_OWVAR 29
1458: PUSH
1459: LD_INT 9
1461: PUSH
1462: LD_INT 11
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1469: LD_ADDR_OWVAR 30
1473: PUSH
1474: LD_INT 0
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 2
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1492: LD_ADDR_OWVAR 31
1496: PUSH
1497: LD_INT 2
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 2
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// un = CreateHuman ;
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: CALL_OW 44
1524: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1525: LD_VAR 0 3
1529: PPUSH
1530: LD_INT 10
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: CALL_OW 49
// InitHc ;
1540: CALL_OW 19
// end ;
1544: LD_VAR 0 1
1548: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1549: LD_INT 0
1551: PPUSH
1552: PPUSH
1553: PPUSH
// uc_nation = 1 ;
1554: LD_ADDR_OWVAR 21
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// uc_side = 1 ;
1562: LD_ADDR_OWVAR 20
1566: PUSH
1567: LD_INT 1
1569: ST_TO_ADDR
// hc_class := 1 ;
1570: LD_ADDR_OWVAR 28
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// hc_sex := sex_male ;
1578: LD_ADDR_OWVAR 27
1582: PUSH
1583: LD_INT 1
1585: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1586: LD_ADDR_OWVAR 33
1590: PUSH
1591: LD_STRING SecondCharsGal
1593: ST_TO_ADDR
// hc_face_number := 59 ;
1594: LD_ADDR_OWVAR 34
1598: PUSH
1599: LD_INT 59
1601: ST_TO_ADDR
// hc_name := Max Gray ;
1602: LD_ADDR_OWVAR 26
1606: PUSH
1607: LD_STRING Max Gray
1609: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1610: LD_ADDR_OWVAR 29
1614: PUSH
1615: LD_INT 9
1617: PUSH
1618: LD_INT 11
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1625: LD_ADDR_OWVAR 30
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 0
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: LD_INT 0
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1648: LD_ADDR_OWVAR 31
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: LD_INT 1
1661: PUSH
1662: LD_INT 0
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// un = CreateHuman ;
1671: LD_ADDR_VAR 0 4
1675: PUSH
1676: CALL_OW 44
1680: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1681: LD_VAR 0 4
1685: PPUSH
1686: LD_INT 11
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// hc_class := 1 ;
1696: LD_ADDR_OWVAR 28
1700: PUSH
1701: LD_INT 1
1703: ST_TO_ADDR
// hc_sex := sex_male ;
1704: LD_ADDR_OWVAR 27
1708: PUSH
1709: LD_INT 1
1711: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1712: LD_ADDR_OWVAR 33
1716: PUSH
1717: LD_STRING SecondCharsGal
1719: ST_TO_ADDR
// hc_face_number := 54 ;
1720: LD_ADDR_OWVAR 34
1724: PUSH
1725: LD_INT 54
1727: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1728: LD_ADDR_OWVAR 26
1732: PUSH
1733: LD_STRING Luigi Ghbellin
1735: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1736: LD_ADDR_OWVAR 29
1740: PUSH
1741: LD_INT 11
1743: PUSH
1744: LD_INT 11
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1751: LD_ADDR_OWVAR 30
1755: PUSH
1756: LD_INT 1
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1774: LD_ADDR_OWVAR 31
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: LD_INT 1
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: ST_TO_ADDR
// un = CreateHuman ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: CALL_OW 44
1806: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1807: LD_VAR 0 4
1811: PPUSH
1812: LD_INT 11
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 49
// hc_class := 3 ;
1822: LD_ADDR_OWVAR 28
1826: PUSH
1827: LD_INT 3
1829: ST_TO_ADDR
// hc_sex := sex_male ;
1830: LD_ADDR_OWVAR 27
1834: PUSH
1835: LD_INT 1
1837: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING AmGalRemake
1845: ST_TO_ADDR
// hc_face_number := 6 ;
1846: LD_ADDR_OWVAR 34
1850: PUSH
1851: LD_INT 6
1853: ST_TO_ADDR
// hc_name := Leon Carter ;
1854: LD_ADDR_OWVAR 26
1858: PUSH
1859: LD_STRING Leon Carter
1861: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1862: LD_ADDR_OWVAR 29
1866: PUSH
1867: LD_INT 10
1869: PUSH
1870: LD_INT 9
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1877: LD_ADDR_OWVAR 30
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: LD_INT 1
1887: PUSH
1888: LD_INT 1
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1900: LD_ADDR_OWVAR 31
1904: PUSH
1905: LD_INT 0
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 3
1913: PUSH
1914: LD_INT 0
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: ST_TO_ADDR
// un = CreateHuman ;
1923: LD_ADDR_VAR 0 4
1927: PUSH
1928: CALL_OW 44
1932: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1933: LD_VAR 0 4
1937: PPUSH
1938: LD_INT 11
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: CALL_OW 49
// if count = 4 then
1948: LD_VAR 0 1
1952: PUSH
1953: LD_INT 4
1955: EQUAL
1956: IFFALSE 2084
// begin hc_class := 1 ;
1958: LD_ADDR_OWVAR 28
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// hc_sex := sex_male ;
1966: LD_ADDR_OWVAR 27
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1974: LD_ADDR_OWVAR 33
1978: PUSH
1979: LD_STRING SecondCharsGal
1981: ST_TO_ADDR
// hc_face_number := 34 ;
1982: LD_ADDR_OWVAR 34
1986: PUSH
1987: LD_INT 34
1989: ST_TO_ADDR
// hc_name := Ian Hill ;
1990: LD_ADDR_OWVAR 26
1994: PUSH
1995: LD_STRING Ian Hill
1997: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
1998: LD_ADDR_OWVAR 29
2002: PUSH
2003: LD_INT 10
2005: PUSH
2006: LD_INT 12
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2013: LD_ADDR_OWVAR 30
2017: PUSH
2018: LD_INT 0
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 0
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2036: LD_ADDR_OWVAR 31
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: LD_INT 0
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: ST_TO_ADDR
// un = CreateHuman ;
2059: LD_ADDR_VAR 0 4
2063: PUSH
2064: CALL_OW 44
2068: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2069: LD_VAR 0 4
2073: PPUSH
2074: LD_INT 11
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 49
// end ; if count = 5 then
2084: LD_VAR 0 1
2088: PUSH
2089: LD_INT 5
2091: EQUAL
2092: IFFALSE 2346
// begin hc_class := 1 ;
2094: LD_ADDR_OWVAR 28
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// hc_sex := sex_male ;
2102: LD_ADDR_OWVAR 27
2106: PUSH
2107: LD_INT 1
2109: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2110: LD_ADDR_OWVAR 33
2114: PUSH
2115: LD_STRING SecondCharsGal
2117: ST_TO_ADDR
// hc_face_number := 34 ;
2118: LD_ADDR_OWVAR 34
2122: PUSH
2123: LD_INT 34
2125: ST_TO_ADDR
// hc_name := Ian Hill ;
2126: LD_ADDR_OWVAR 26
2130: PUSH
2131: LD_STRING Ian Hill
2133: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2134: LD_ADDR_OWVAR 29
2138: PUSH
2139: LD_INT 10
2141: PUSH
2142: LD_INT 12
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2149: LD_ADDR_OWVAR 30
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 0
2159: PUSH
2160: LD_INT 1
2162: PUSH
2163: LD_INT 0
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2172: LD_ADDR_OWVAR 31
2176: PUSH
2177: LD_INT 2
2179: PUSH
2180: LD_INT 0
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 0
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: ST_TO_ADDR
// un = CreateHuman ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: CALL_OW 44
2204: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2205: LD_VAR 0 4
2209: PPUSH
2210: LD_INT 11
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 49
// hc_class := 1 ;
2220: LD_ADDR_OWVAR 28
2224: PUSH
2225: LD_INT 1
2227: ST_TO_ADDR
// hc_sex := sex_female ;
2228: LD_ADDR_OWVAR 27
2232: PUSH
2233: LD_INT 2
2235: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2236: LD_ADDR_OWVAR 33
2240: PUSH
2241: LD_STRING SecondCharsGal
2243: ST_TO_ADDR
// hc_face_number := 41 ;
2244: LD_ADDR_OWVAR 34
2248: PUSH
2249: LD_INT 41
2251: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2252: LD_ADDR_OWVAR 26
2256: PUSH
2257: LD_STRING Kate Wadsworth
2259: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2260: LD_ADDR_OWVAR 29
2264: PUSH
2265: LD_INT 9
2267: PUSH
2268: LD_INT 9
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2275: LD_ADDR_OWVAR 30
2279: PUSH
2280: LD_INT 0
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: LD_INT 0
2288: PUSH
2289: LD_INT 0
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2298: LD_ADDR_OWVAR 31
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: LD_INT 0
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// un = CreateHuman ;
2321: LD_ADDR_VAR 0 4
2325: PUSH
2326: CALL_OW 44
2330: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2331: LD_VAR 0 4
2335: PPUSH
2336: LD_INT 11
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2346: LD_INT 11
2348: PPUSH
2349: LD_INT 22
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 21
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 26
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: LIST
2383: PPUSH
2384: CALL_OW 70
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PPUSH
2393: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2397: LD_INT 11
2399: PPUSH
2400: LD_INT 22
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 21
2412: PUSH
2413: LD_INT 1
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 26
2422: PUSH
2423: LD_INT 1
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PPUSH
2435: CALL_OW 70
2439: PUSH
2440: LD_INT 1
2442: ARRAY
2443: PPUSH
2444: LD_STRING D6-Sol3-1
2446: PPUSH
2447: CALL_OW 88
// end ; end_of_file
2451: LD_VAR 0 2
2455: RET
// export function PrepareRussianCommander ; begin
2456: LD_INT 0
2458: PPUSH
// uc_side = 3 ;
2459: LD_ADDR_OWVAR 20
2463: PUSH
2464: LD_INT 3
2466: ST_TO_ADDR
// uc_nation = 3 ;
2467: LD_ADDR_OWVAR 21
2471: PUSH
2472: LD_INT 3
2474: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2475: LD_ADDR_EXP 15
2479: PUSH
2480: LD_STRING Stolypin
2482: PPUSH
2483: CALL_OW 25
2487: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2488: LD_EXP 15
2492: PPUSH
2493: LD_INT 21
2495: PPUSH
2496: CALL_OW 52
// end ;
2500: LD_VAR 0 1
2504: RET
// export function PrepareRussianBase ; var i ; begin
2505: LD_INT 0
2507: PPUSH
2508: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 22
2517: PPUSH
2518: LD_EXP 16
2522: PPUSH
2523: LD_EXP 17
2527: PPUSH
2528: CALL_OW 12
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL 3782 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2543: LD_INT 3
2545: PPUSH
2546: LD_INT 3
2548: PPUSH
2549: LD_INT 21
2551: PPUSH
2552: LD_EXP 16
2556: PPUSH
2557: LD_EXP 17
2561: PPUSH
2562: CALL_OW 12
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_INT 3
2572: PPUSH
2573: CALL 3782 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2577: LD_INT 3
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: LD_INT 1
2585: PPUSH
2586: LD_EXP 16
2590: PPUSH
2591: LD_EXP 17
2595: PPUSH
2596: CALL_OW 12
2600: PPUSH
2601: LD_INT 4
2603: PPUSH
2604: LD_INT 2
2606: PPUSH
2607: CALL 3782 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2611: LD_INT 3
2613: PPUSH
2614: LD_INT 3
2616: PPUSH
2617: LD_INT 24
2619: PPUSH
2620: LD_EXP 16
2624: PPUSH
2625: LD_EXP 17
2629: PPUSH
2630: CALL_OW 12
2634: PPUSH
2635: LD_INT 3
2637: PPUSH
2638: LD_INT 6
2640: PPUSH
2641: CALL 3782 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2645: LD_ADDR_VAR 0 2
2649: PUSH
2650: LD_INT 22
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 30
2662: PUSH
2663: LD_INT 32
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: PUSH
2679: FOR_IN
2680: IFFALSE 2720
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2682: LD_INT 3
2684: PPUSH
2685: LD_INT 3
2687: PPUSH
2688: LD_VAR 0 2
2692: PPUSH
2693: LD_EXP 16
2697: PPUSH
2698: LD_EXP 17
2702: PPUSH
2703: CALL_OW 12
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: CALL 3782 0 6
2718: GO 2679
2720: POP
2721: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2722: LD_ADDR_VAR 0 2
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 30
2739: PUSH
2740: LD_INT 31
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: FOR_IN
2757: IFFALSE 2785
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2759: LD_EXP 16
2763: PPUSH
2764: LD_EXP 17
2768: PPUSH
2769: CALL_OW 12
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 3892 0 2
2783: GO 2756
2785: POP
2786: POP
// end ;
2787: LD_VAR 0 1
2791: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2792: LD_INT 0
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// uc_side = 6 ;
2798: LD_ADDR_OWVAR 20
2802: PUSH
2803: LD_INT 6
2805: ST_TO_ADDR
// uc_nation = 3 ;
2806: LD_ADDR_OWVAR 21
2810: PUSH
2811: LD_INT 3
2813: ST_TO_ADDR
// for i := 1 to [ 2 , 1 , 1 ] [ Difficulty ] do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_INT 2
2826: PUSH
2827: LD_INT 1
2829: PUSH
2830: LD_INT 1
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: LIST
2837: PUSH
2838: LD_OWVAR 67
2842: ARRAY
2843: PUSH
2844: FOR_TO
2845: IFFALSE 3005
// begin vc_engine = 1 ;
2847: LD_ADDR_OWVAR 39
2851: PUSH
2852: LD_INT 1
2854: ST_TO_ADDR
// vc_control = 1 ;
2855: LD_ADDR_OWVAR 38
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2863: LD_ADDR_OWVAR 40
2867: PUSH
2868: LD_INT 42
2870: PUSH
2871: LD_INT 42
2873: PUSH
2874: LD_INT 43
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_OWVAR 67
2886: ARRAY
2887: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2888: LD_ADDR_OWVAR 37
2892: PUSH
2893: LD_INT 21
2895: PUSH
2896: LD_INT 22
2898: PUSH
2899: LD_INT 22
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: LIST
2906: PUSH
2907: LD_OWVAR 67
2911: ARRAY
2912: ST_TO_ADDR
// veh = CreateVehicle ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2923: LD_VAR 0 3
2927: PPUSH
2928: LD_INT 3
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: CALL_OW 49
// hc_gallery =  ;
2938: LD_ADDR_OWVAR 33
2942: PUSH
2943: LD_STRING 
2945: ST_TO_ADDR
// hc_name =  ;
2946: LD_ADDR_OWVAR 26
2950: PUSH
2951: LD_STRING 
2953: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2954: LD_INT 0
2956: PPUSH
2957: LD_INT 3
2959: PPUSH
2960: LD_EXP 16
2964: PPUSH
2965: LD_EXP 17
2969: PPUSH
2970: CALL_OW 12
2974: PPUSH
2975: CALL_OW 380
// un = CreateHuman ;
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: CALL_OW 44
2988: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2989: LD_VAR 0 4
2993: PPUSH
2994: LD_VAR 0 3
2998: PPUSH
2999: CALL_OW 52
// end ;
3003: GO 2844
3005: POP
3006: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3007: LD_INT 0
3009: PPUSH
3010: LD_INT 2
3012: PPUSH
3013: LD_EXP 16
3017: PPUSH
3018: LD_EXP 17
3022: PPUSH
3023: CALL_OW 12
3027: PUSH
3028: LD_INT 2
3030: PLUS
3031: PPUSH
3032: CALL_OW 380
// un = CreateHuman ;
3036: LD_ADDR_VAR 0 4
3040: PUSH
3041: CALL_OW 44
3045: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3046: LD_VAR 0 4
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 4
3066: PPUSH
3067: LD_EXP 16
3071: PPUSH
3072: LD_EXP 17
3076: PPUSH
3077: CALL_OW 12
3081: PUSH
3082: LD_INT 2
3084: PLUS
3085: PPUSH
3086: CALL_OW 380
// un = CreateHuman ;
3090: LD_ADDR_VAR 0 4
3094: PUSH
3095: CALL_OW 44
3099: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3100: LD_VAR 0 4
3104: PPUSH
3105: LD_INT 3
3107: PPUSH
3108: LD_INT 0
3110: PPUSH
3111: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3115: LD_ADDR_VAR 0 2
3119: PUSH
3120: DOUBLE
3121: LD_INT 1
3123: DEC
3124: ST_TO_ADDR
3125: LD_INT 2
3127: PUSH
3128: LD_INT 3
3130: PUSH
3131: LD_INT 3
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PUSH
3139: LD_OWVAR 67
3143: ARRAY
3144: PUSH
3145: LD_INT 1
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: CALL_OW 12
3155: PLUS
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3228
// begin hc_gallery =  ;
3160: LD_ADDR_OWVAR 33
3164: PUSH
3165: LD_STRING 
3167: ST_TO_ADDR
// hc_name =  ;
3168: LD_ADDR_OWVAR 26
3172: PUSH
3173: LD_STRING 
3175: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3176: LD_INT 0
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_EXP 16
3186: PPUSH
3187: LD_EXP 17
3191: PPUSH
3192: CALL_OW 12
3196: PPUSH
3197: CALL_OW 380
// un = CreateHuman ;
3201: LD_ADDR_VAR 0 4
3205: PUSH
3206: CALL_OW 44
3210: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3211: LD_VAR 0 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: LD_INT 0
3221: PPUSH
3222: CALL_OW 49
// end ;
3226: GO 3157
3228: POP
3229: POP
// vc_engine = 1 ;
3230: LD_ADDR_OWVAR 39
3234: PUSH
3235: LD_INT 1
3237: ST_TO_ADDR
// vc_control = 1 ;
3238: LD_ADDR_OWVAR 38
3242: PUSH
3243: LD_INT 1
3245: ST_TO_ADDR
// vc_weapon = 51 ;
3246: LD_ADDR_OWVAR 40
3250: PUSH
3251: LD_INT 51
3253: ST_TO_ADDR
// vc_chassis = 22 ;
3254: LD_ADDR_OWVAR 37
3258: PUSH
3259: LD_INT 22
3261: ST_TO_ADDR
// veh = CreateVehicle ;
3262: LD_ADDR_VAR 0 3
3266: PUSH
3267: CALL_OW 45
3271: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3272: LD_VAR 0 3
3276: PPUSH
3277: LD_INT 3
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3287: LD_VAR 0 3
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 100
3297: PPUSH
3298: CALL_OW 290
// hc_gallery =  ;
3302: LD_ADDR_OWVAR 33
3306: PUSH
3307: LD_STRING 
3309: ST_TO_ADDR
// hc_name =  ;
3310: LD_ADDR_OWVAR 26
3314: PUSH
3315: LD_STRING 
3317: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3318: LD_INT 0
3320: PPUSH
3321: LD_INT 3
3323: PPUSH
3324: LD_EXP 16
3328: PPUSH
3329: LD_EXP 17
3333: PPUSH
3334: CALL_OW 12
3338: PPUSH
3339: CALL_OW 380
// un = CreateHuman ;
3343: LD_ADDR_VAR 0 4
3347: PUSH
3348: CALL_OW 44
3352: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3353: LD_VAR 0 4
3357: PPUSH
3358: LD_VAR 0 3
3362: PPUSH
3363: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: LD_INT 22
3374: PUSH
3375: LD_INT 6
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: LD_INT 1
3384: PUSH
3385: LD_INT 3
3387: PUSH
3388: LD_INT 25
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 3
3404: PUSH
3405: LD_INT 25
3407: PUSH
3408: LD_INT 4
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PPUSH
3428: CALL_OW 69
3432: PUSH
3433: FOR_IN
3434: IFFALSE 3453
// ComAgressiveMove ( i , 45 , 46 ) ;
3436: LD_VAR 0 2
3440: PPUSH
3441: LD_INT 45
3443: PPUSH
3444: LD_INT 46
3446: PPUSH
3447: CALL_OW 114
3451: GO 3433
3453: POP
3454: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3455: LD_ADDR_VAR 0 2
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 6
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_INT 25
3472: PUSH
3473: LD_INT 2
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PPUSH
3484: CALL_OW 69
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3521
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3492: LD_ADDR_EXP 19
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_INT 0
3504: PPUSH
3505: LD_INT 48
3507: PPUSH
3508: LD_INT 55
3510: PPUSH
3511: LD_INT 5
3513: PPUSH
3514: CALL_OW 145
3518: ST_TO_ADDR
3519: GO 3489
3521: POP
3522: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: LD_INT 22
3530: PUSH
3531: LD_INT 6
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: LD_INT 25
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PPUSH
3552: CALL_OW 69
3556: PUSH
3557: FOR_IN
3558: IFFALSE 3577
// ComMoveXY ( i , 39 , 55 ) ;
3560: LD_VAR 0 2
3564: PPUSH
3565: LD_INT 39
3567: PPUSH
3568: LD_INT 55
3570: PPUSH
3571: CALL_OW 111
3575: GO 3557
3577: POP
3578: POP
// end ;
3579: LD_VAR 0 1
3583: RET
// export function PrepareFirstAttack ; var i , un ; begin
3584: LD_INT 0
3586: PPUSH
3587: PPUSH
3588: PPUSH
// uc_side = 5 ;
3589: LD_ADDR_OWVAR 20
3593: PUSH
3594: LD_INT 5
3596: ST_TO_ADDR
// uc_nation = 3 ;
3597: LD_ADDR_OWVAR 21
3601: PUSH
3602: LD_INT 3
3604: ST_TO_ADDR
// for i := 1 to 4 do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: DOUBLE
3611: LD_INT 1
3613: DEC
3614: ST_TO_ADDR
3615: LD_INT 4
3617: PUSH
3618: FOR_TO
3619: IFFALSE 3704
// begin hc_gallery =  ;
3621: LD_ADDR_OWVAR 33
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// hc_name =  ;
3629: LD_ADDR_OWVAR 26
3633: PUSH
3634: LD_STRING 
3636: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3637: LD_INT 0
3639: PPUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_EXP 16
3647: PPUSH
3648: LD_EXP 17
3652: PPUSH
3653: CALL_OW 12
3657: PPUSH
3658: CALL_OW 380
// un = CreateHuman ;
3662: LD_ADDR_VAR 0 3
3666: PUSH
3667: CALL_OW 44
3671: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3672: LD_VAR 0 3
3676: PPUSH
3677: LD_INT 4
3679: PPUSH
3680: LD_INT 0
3682: PPUSH
3683: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3687: LD_VAR 0 3
3691: PPUSH
3692: LD_INT 48
3694: PPUSH
3695: LD_INT 14
3697: PPUSH
3698: CALL_OW 114
// end ;
3702: GO 3618
3704: POP
3705: POP
// firstRussianAttack = 1 ;
3706: LD_ADDR_EXP 21
3710: PUSH
3711: LD_INT 1
3713: ST_TO_ADDR
// end ; end_of_file
3714: LD_VAR 0 1
3718: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3719: LD_INT 0
3721: PPUSH
3722: PPUSH
// if exist_mode then
3723: LD_VAR 0 2
3727: IFFALSE 3752
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3729: LD_ADDR_VAR 0 4
3733: PUSH
3734: LD_EXP 43
3738: PUSH
3739: LD_VAR 0 1
3743: STR
3744: PPUSH
3745: CALL_OW 34
3749: ST_TO_ADDR
// end else
3750: GO 3767
// begin unit := NewCharacter ( ident ) ;
3752: LD_ADDR_VAR 0 4
3756: PUSH
3757: LD_VAR 0 1
3761: PPUSH
3762: CALL_OW 25
3766: ST_TO_ADDR
// end ; result := unit ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: LD_VAR 0 4
3776: ST_TO_ADDR
// end ;
3777: LD_VAR 0 3
3781: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
3787: PPUSH
// for i = 1 to count do
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 6
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3885
// begin uc_side = side ;
3806: LD_ADDR_OWVAR 20
3810: PUSH
3811: LD_VAR 0 1
3815: ST_TO_ADDR
// uc_nation = nation ;
3816: LD_ADDR_OWVAR 21
3820: PUSH
3821: LD_VAR 0 2
3825: ST_TO_ADDR
// hc_gallery =  ;
3826: LD_ADDR_OWVAR 33
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// hc_name =  ;
3834: LD_ADDR_OWVAR 26
3838: PUSH
3839: LD_STRING 
3841: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3842: LD_INT 0
3844: PPUSH
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_VAR 0 4
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 10
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3869: LD_VAR 0 10
3873: PPUSH
3874: LD_VAR 0 3
3878: PPUSH
3879: CALL_OW 52
// end ;
3883: GO 3803
3885: POP
3886: POP
// end ;
3887: LD_VAR 0 7
3891: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3892: LD_INT 0
3894: PPUSH
3895: PPUSH
3896: PPUSH
// uc_side := GetSide ( b ) ;
3897: LD_ADDR_OWVAR 20
3901: PUSH
3902: LD_VAR 0 2
3906: PPUSH
3907: CALL_OW 255
3911: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3912: LD_ADDR_OWVAR 21
3916: PUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: CALL_OW 248
3926: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 1
3937: PPUSH
3938: CALL_OW 380
// un = CreateHuman ;
3942: LD_ADDR_VAR 0 4
3946: PUSH
3947: CALL_OW 44
3951: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3952: LD_ADDR_VAR 0 5
3956: PUSH
3957: LD_VAR 0 2
3961: PPUSH
3962: CALL_OW 254
3966: PUSH
3967: LD_INT 3
3969: MINUS
3970: ST_TO_ADDR
// if dir < 0 then
3971: LD_VAR 0 5
3975: PUSH
3976: LD_INT 0
3978: LESS
3979: IFFALSE 3995
// dir := 6 + dir ;
3981: LD_ADDR_VAR 0 5
3985: PUSH
3986: LD_INT 6
3988: PUSH
3989: LD_VAR 0 5
3993: PLUS
3994: ST_TO_ADDR
// SetDir ( un , dir ) ;
3995: LD_VAR 0 4
3999: PPUSH
4000: LD_VAR 0 5
4004: PPUSH
4005: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4009: LD_VAR 0 4
4013: PPUSH
4014: LD_VAR 0 2
4018: PPUSH
4019: CALL_OW 52
// end ;
4023: LD_VAR 0 3
4027: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4028: LD_INT 0
4030: PPUSH
4031: PPUSH
4032: PPUSH
// rnd = rand ( 1 , characters ) ;
4033: LD_ADDR_VAR 0 6
4037: PUSH
4038: LD_INT 1
4040: PPUSH
4041: LD_VAR 0 1
4045: PPUSH
4046: CALL_OW 12
4050: ST_TO_ADDR
// for i = 1 to characters do
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: DOUBLE
4057: LD_INT 1
4059: DEC
4060: ST_TO_ADDR
4061: LD_VAR 0 1
4065: PUSH
4066: FOR_TO
4067: IFFALSE 4177
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4069: LD_VAR 0 5
4073: PUSH
4074: LD_VAR 0 6
4078: EQUAL
4079: PUSH
4080: LD_VAR 0 1
4084: PUSH
4085: LD_VAR 0 5
4089: ARRAY
4090: PPUSH
4091: CALL_OW 258
4095: PUSH
4096: LD_INT 1
4098: EQUAL
4099: AND
4100: IFFALSE 4122
// Say ( characters [ i ] , dialogMID ) ;
4102: LD_VAR 0 1
4106: PUSH
4107: LD_VAR 0 5
4111: ARRAY
4112: PPUSH
4113: LD_VAR 0 2
4117: PPUSH
4118: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4122: LD_VAR 0 5
4126: PUSH
4127: LD_VAR 0 6
4131: EQUAL
4132: PUSH
4133: LD_VAR 0 1
4137: PUSH
4138: LD_VAR 0 5
4142: ARRAY
4143: PPUSH
4144: CALL_OW 258
4148: PUSH
4149: LD_INT 2
4151: EQUAL
4152: AND
4153: IFFALSE 4175
// Say ( characters [ i ] , dialogFID ) ;
4155: LD_VAR 0 1
4159: PUSH
4160: LD_VAR 0 5
4164: ARRAY
4165: PPUSH
4166: LD_VAR 0 3
4170: PPUSH
4171: CALL_OW 88
// end ;
4175: GO 4066
4177: POP
4178: POP
// end ;
4179: LD_VAR 0 4
4183: RET
// export function PrepareDifficulty ; begin
4184: LD_INT 0
4186: PPUSH
// if Difficulty = 1 then
4187: LD_OWVAR 67
4191: PUSH
4192: LD_INT 1
4194: EQUAL
4195: IFFALSE 4213
// begin RuSoldMinLevel = 0 ;
4197: LD_ADDR_EXP 16
4201: PUSH
4202: LD_INT 0
4204: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4205: LD_ADDR_EXP 17
4209: PUSH
4210: LD_INT 2
4212: ST_TO_ADDR
// end ; if Difficulty = 2 then
4213: LD_OWVAR 67
4217: PUSH
4218: LD_INT 2
4220: EQUAL
4221: IFFALSE 4259
// begin RuSoldMinLevel = 1 ;
4223: LD_ADDR_EXP 16
4227: PUSH
4228: LD_INT 1
4230: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4231: LD_ADDR_EXP 17
4235: PUSH
4236: LD_INT 2
4238: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4239: LD_INT 14
4241: PPUSH
4242: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
4246: LD_INT 51
4248: PPUSH
4249: LD_INT 3
4251: PPUSH
4252: LD_INT 1
4254: PPUSH
4255: CALL_OW 322
// end ; if Difficulty = 3 then
4259: LD_OWVAR 67
4263: PUSH
4264: LD_INT 3
4266: EQUAL
4267: IFFALSE 4335
// begin RuSoldMinLevel = 1 ;
4269: LD_ADDR_EXP 16
4273: PUSH
4274: LD_INT 1
4276: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4277: LD_ADDR_EXP 17
4281: PUSH
4282: LD_INT 3
4284: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4285: LD_INT 13
4287: PPUSH
4288: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4292: LD_INT 14
4294: PPUSH
4295: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
4299: LD_INT 51
4301: PPUSH
4302: LD_INT 3
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4312: LD_INT 52
4314: PPUSH
4315: LD_INT 3
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4325: LD_INT 25
4327: PPUSH
4328: LD_INT 44
4330: PPUSH
4331: CALL_OW 431
// end ; end ;
4335: LD_VAR 0 1
4339: RET
// export function EnergyDialog ; begin
4340: LD_INT 0
4342: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4343: LD_INT 46
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: CALL_OW 321
4353: PUSH
4354: LD_INT 1
4356: EQUAL
4357: PUSH
4358: LD_INT 35
4360: PPUSH
4361: LD_INT 1
4363: PPUSH
4364: CALL_OW 321
4368: PUSH
4369: LD_INT 1
4371: EQUAL
4372: AND
4373: IFFALSE 4397
// begin Say ( JMM , D9c-JMM-1 ) ;
4375: LD_EXP 1
4379: PPUSH
4380: LD_STRING D9c-JMM-1
4382: PPUSH
4383: CALL_OW 88
// energyVDialog = 1 ;
4387: LD_ADDR_EXP 31
4391: PUSH
4392: LD_INT 1
4394: ST_TO_ADDR
// end else
4395: GO 4551
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4397: LD_INT 35
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: CALL_OW 321
4407: PUSH
4408: LD_INT 2
4410: EQUAL
4411: PUSH
4412: LD_EXP 31
4416: PUSH
4417: LD_INT 0
4419: EQUAL
4420: AND
4421: IFFALSE 4443
// begin Say ( JMM , D9c-JMM-1a ) ;
4423: LD_EXP 1
4427: PPUSH
4428: LD_STRING D9c-JMM-1a
4430: PPUSH
4431: CALL_OW 88
// energyVDialog = 1 ;
4435: LD_ADDR_EXP 31
4439: PUSH
4440: LD_INT 1
4442: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4443: LD_INT 46
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: CALL_OW 321
4453: PUSH
4454: LD_INT 2
4456: EQUAL
4457: PUSH
4458: LD_EXP 31
4462: PUSH
4463: LD_INT 0
4465: EQUAL
4466: AND
4467: IFFALSE 4489
// begin Say ( JMM , D9c-JMM-1b ) ;
4469: LD_EXP 1
4473: PPUSH
4474: LD_STRING D9c-JMM-1b
4476: PPUSH
4477: CALL_OW 88
// energyVDialog = 1 ;
4481: LD_ADDR_EXP 31
4485: PUSH
4486: LD_INT 1
4488: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4489: LD_INT 46
4491: PPUSH
4492: LD_INT 1
4494: PPUSH
4495: CALL_OW 321
4499: PUSH
4500: LD_INT 2
4502: EQUAL
4503: PUSH
4504: LD_INT 21
4506: PPUSH
4507: LD_INT 1
4509: PPUSH
4510: CALL_OW 321
4514: PUSH
4515: LD_INT 2
4517: EQUAL
4518: AND
4519: PUSH
4520: LD_EXP 31
4524: PUSH
4525: LD_INT 0
4527: EQUAL
4528: AND
4529: IFFALSE 4551
// begin Say ( JMM , D9c-JMM-1c ) ;
4531: LD_EXP 1
4535: PPUSH
4536: LD_STRING D9c-JMM-1c
4538: PPUSH
4539: CALL_OW 88
// energyVDialog = 1 ;
4543: LD_ADDR_EXP 31
4547: PUSH
4548: LD_INT 1
4550: ST_TO_ADDR
// end ; end ; end ;
4551: LD_VAR 0 1
4555: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4556: LD_INT 0
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4563: LD_VAR 0 1
4567: NOT
4568: PUSH
4569: LD_VAR 0 1
4573: PPUSH
4574: CALL_OW 256
4578: PUSH
4579: LD_INT 250
4581: LESS
4582: OR
4583: PUSH
4584: LD_VAR 0 1
4588: PPUSH
4589: CALL_OW 314
4593: PUSH
4594: LD_VAR 0 1
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 20
4606: GREATER
4607: AND
4608: OR
4609: IFFALSE 4613
// exit ;
4611: GO 4978
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4613: LD_VAR 0 1
4617: PPUSH
4618: CALL_OW 261
4622: PUSH
4623: LD_INT 20
4625: LESS
4626: PUSH
4627: LD_VAR 0 1
4631: PPUSH
4632: CALL_OW 110
4636: PUSH
4637: LD_INT 21
4639: EQUAL
4640: NOT
4641: AND
4642: IFFALSE 4669
// begin ComStop ( bulldozer ) ;
4644: LD_VAR 0 1
4648: PPUSH
4649: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4653: LD_VAR 0 1
4657: PPUSH
4658: LD_INT 21
4660: PPUSH
4661: CALL_OW 109
// exit ;
4665: GO 4978
// end else
4667: GO 4696
// if GetFuel ( bulldozer ) > 20 then
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 261
4678: PUSH
4679: LD_INT 20
4681: GREATER
4682: IFFALSE 4696
// SetTag ( bulldozer , 0 ) ;
4684: LD_VAR 0 1
4688: PPUSH
4689: LD_INT 0
4691: PPUSH
4692: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4696: LD_ADDR_VAR 0 5
4700: PUSH
4701: LD_VAR 0 2
4705: PPUSH
4706: CALL_OW 353
4710: ST_TO_ADDR
// tmp := [ ] ;
4711: LD_ADDR_VAR 0 6
4715: PUSH
4716: EMPTY
4717: ST_TO_ADDR
// for i = 1 to list do
4718: LD_ADDR_VAR 0 4
4722: PUSH
4723: DOUBLE
4724: LD_INT 1
4726: DEC
4727: ST_TO_ADDR
4728: LD_VAR 0 5
4732: PUSH
4733: FOR_TO
4734: IFFALSE 4832
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4736: LD_VAR 0 5
4740: PUSH
4741: LD_VAR 0 4
4745: ARRAY
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: LD_VAR 0 5
4755: PUSH
4756: LD_VAR 0 4
4760: ARRAY
4761: PUSH
4762: LD_INT 2
4764: ARRAY
4765: PPUSH
4766: CALL_OW 554
4770: IFFALSE 4830
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4772: LD_ADDR_VAR 0 6
4776: PUSH
4777: LD_VAR 0 6
4781: PPUSH
4782: LD_VAR 0 6
4786: PUSH
4787: LD_INT 1
4789: PLUS
4790: PPUSH
4791: LD_VAR 0 5
4795: PUSH
4796: LD_VAR 0 4
4800: ARRAY
4801: PUSH
4802: LD_INT 1
4804: ARRAY
4805: PUSH
4806: LD_VAR 0 5
4810: PUSH
4811: LD_VAR 0 4
4815: ARRAY
4816: PUSH
4817: LD_INT 2
4819: ARRAY
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PPUSH
4825: CALL_OW 1
4829: ST_TO_ADDR
// end ;
4830: GO 4733
4832: POP
4833: POP
// ComStop ( bulldozer ) ;
4834: LD_VAR 0 1
4838: PPUSH
4839: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
4843: LD_ADDR_VAR 0 7
4847: PUSH
4848: LD_VAR 0 1
4852: PPUSH
4853: CALL_OW 250
4857: PUSH
4858: LD_VAR 0 1
4862: PPUSH
4863: CALL_OW 251
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: ST_TO_ADDR
// for i = tmp downto 1 do
4872: LD_ADDR_VAR 0 4
4876: PUSH
4877: DOUBLE
4878: LD_VAR 0 6
4882: INC
4883: ST_TO_ADDR
4884: LD_INT 1
4886: PUSH
4887: FOR_DOWNTO
4888: IFFALSE 4976
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
4890: LD_ADDR_VAR 0 7
4894: PUSH
4895: LD_VAR 0 7
4899: PUSH
4900: LD_INT 1
4902: ARRAY
4903: PPUSH
4904: LD_VAR 0 7
4908: PUSH
4909: LD_INT 2
4911: ARRAY
4912: PPUSH
4913: LD_VAR 0 6
4917: PPUSH
4918: CALL 5079 0 3
4922: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
4923: LD_VAR 0 1
4927: PPUSH
4928: LD_VAR 0 7
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_VAR 0 7
4941: PUSH
4942: LD_INT 2
4944: ARRAY
4945: PPUSH
4946: CALL 4983 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
4950: LD_ADDR_VAR 0 6
4954: PUSH
4955: LD_VAR 0 6
4959: PPUSH
4960: LD_VAR 0 7
4964: PUSH
4965: LD_INT 3
4967: ARRAY
4968: PPUSH
4969: CALL_OW 3
4973: ST_TO_ADDR
// end ;
4974: GO 4887
4976: POP
4977: POP
// end ;
4978: LD_VAR 0 3
4982: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
4983: LD_INT 0
4985: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
4986: LD_VAR 0 2
4990: PPUSH
4991: LD_VAR 0 3
4995: PPUSH
4996: CALL_OW 351
5000: PUSH
5001: LD_VAR 0 2
5005: PPUSH
5006: LD_VAR 0 3
5010: PPUSH
5011: CALL_OW 554
5015: AND
5016: PUSH
5017: LD_VAR 0 2
5021: PPUSH
5022: LD_VAR 0 3
5026: PPUSH
5027: CALL_OW 488
5031: AND
5032: PUSH
5033: LD_VAR 0 2
5037: PPUSH
5038: LD_VAR 0 3
5042: PPUSH
5043: CALL_OW 428
5047: PUSH
5048: LD_INT 1
5050: NEG
5051: EQUAL
5052: AND
5053: IFFALSE 5074
// AddComMoveXY ( bulldozer , x , y ) ;
5055: LD_VAR 0 1
5059: PPUSH
5060: LD_VAR 0 2
5064: PPUSH
5065: LD_VAR 0 3
5069: PPUSH
5070: CALL_OW 171
// end ;
5074: LD_VAR 0 4
5078: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5079: LD_INT 0
5081: PPUSH
5082: PPUSH
5083: PPUSH
5084: PPUSH
5085: PPUSH
5086: PPUSH
5087: PPUSH
// dist := 99999 ;
5088: LD_ADDR_VAR 0 6
5092: PUSH
5093: LD_INT 99999
5095: ST_TO_ADDR
// for i = 1 to list do
5096: LD_ADDR_VAR 0 5
5100: PUSH
5101: DOUBLE
5102: LD_INT 1
5104: DEC
5105: ST_TO_ADDR
5106: LD_VAR 0 3
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5250
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5114: LD_ADDR_VAR 0 7
5118: PUSH
5119: LD_VAR 0 1
5123: PPUSH
5124: LD_VAR 0 2
5128: PPUSH
5129: LD_VAR 0 3
5133: PUSH
5134: LD_VAR 0 5
5138: ARRAY
5139: PUSH
5140: LD_INT 1
5142: ARRAY
5143: PPUSH
5144: LD_VAR 0 3
5148: PUSH
5149: LD_VAR 0 5
5153: ARRAY
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: CALL_OW 298
5163: ST_TO_ADDR
// if d = 0 then
5164: LD_VAR 0 7
5168: PUSH
5169: LD_INT 0
5171: EQUAL
5172: IFFALSE 5176
// continue ;
5174: GO 5111
// if d < dist then
5176: LD_VAR 0 7
5180: PUSH
5181: LD_VAR 0 6
5185: LESS
5186: IFFALSE 5248
// begin _x := list [ i ] [ 1 ] ;
5188: LD_ADDR_VAR 0 8
5192: PUSH
5193: LD_VAR 0 3
5197: PUSH
5198: LD_VAR 0 5
5202: ARRAY
5203: PUSH
5204: LD_INT 1
5206: ARRAY
5207: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5208: LD_ADDR_VAR 0 9
5212: PUSH
5213: LD_VAR 0 3
5217: PUSH
5218: LD_VAR 0 5
5222: ARRAY
5223: PUSH
5224: LD_INT 2
5226: ARRAY
5227: ST_TO_ADDR
// _i := i ;
5228: LD_ADDR_VAR 0 10
5232: PUSH
5233: LD_VAR 0 5
5237: ST_TO_ADDR
// dist := d ;
5238: LD_ADDR_VAR 0 6
5242: PUSH
5243: LD_VAR 0 7
5247: ST_TO_ADDR
// end ; end ;
5248: GO 5111
5250: POP
5251: POP
// result := [ _x , _y , _i , dist ] ;
5252: LD_ADDR_VAR 0 4
5256: PUSH
5257: LD_VAR 0 8
5261: PUSH
5262: LD_VAR 0 9
5266: PUSH
5267: LD_VAR 0 10
5271: PUSH
5272: LD_VAR 0 6
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: ST_TO_ADDR
// end ;
5283: LD_VAR 0 4
5287: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5288: LD_INT 0
5290: PPUSH
5291: PPUSH
5292: PPUSH
5293: PPUSH
// for i = 1 to 72 do
5294: LD_ADDR_VAR 0 5
5298: PUSH
5299: DOUBLE
5300: LD_INT 1
5302: DEC
5303: ST_TO_ADDR
5304: LD_INT 72
5306: PUSH
5307: FOR_TO
5308: IFFALSE 5366
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5310: LD_VAR 0 5
5314: PPUSH
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 321
5324: PUSH
5325: LD_INT 1
5327: EQUAL
5328: PUSH
5329: LD_VAR 0 5
5333: PPUSH
5334: LD_VAR 0 3
5338: PPUSH
5339: CALL_OW 482
5343: PUSH
5344: LD_INT 1
5346: EQUAL
5347: AND
5348: IFFALSE 5364
// AddComResearch ( lab , i ) ;
5350: LD_VAR 0 2
5354: PPUSH
5355: LD_VAR 0 5
5359: PPUSH
5360: CALL_OW 184
5364: GO 5307
5366: POP
5367: POP
// end ;
5368: LD_VAR 0 4
5372: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
5377: PPUSH
5378: PPUSH
5379: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5380: LD_ADDR_VAR 0 6
5384: PUSH
5385: LD_INT 22
5387: PUSH
5388: LD_VAR 0 1
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: LD_INT 25
5399: PUSH
5400: LD_INT 2
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 24
5409: PUSH
5410: LD_INT 1000
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: PPUSH
5422: CALL_OW 69
5426: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5427: LD_ADDR_VAR 0 4
5431: PUSH
5432: LD_INT 22
5434: PUSH
5435: LD_VAR 0 1
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: LD_INT 24
5459: PUSH
5460: LD_INT 1000
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: PPUSH
5479: CALL_OW 69
5483: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5484: LD_VAR 0 4
5488: PUSH
5489: LD_INT 0
5491: GREATER
5492: PUSH
5493: LD_VAR 0 6
5497: PUSH
5498: LD_INT 0
5500: GREATER
5501: AND
5502: IFFALSE 5568
// begin for i in engineerOk_list do
5504: LD_ADDR_VAR 0 5
5508: PUSH
5509: LD_VAR 0 6
5513: PUSH
5514: FOR_IN
5515: IFFALSE 5566
// begin for j in buildings_list do
5517: LD_ADDR_VAR 0 7
5521: PUSH
5522: LD_VAR 0 4
5526: PUSH
5527: FOR_IN
5528: IFFALSE 5562
// begin AddComExitBuilding ( i ) ;
5530: LD_VAR 0 5
5534: PPUSH
5535: CALL_OW 182
// wait ( 0 0$1 ) ;
5539: LD_INT 35
5541: PPUSH
5542: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5546: LD_VAR 0 5
5550: PPUSH
5551: LD_VAR 0 7
5555: PPUSH
5556: CALL_OW 190
// end ;
5560: GO 5527
5562: POP
5563: POP
// end ;
5564: GO 5514
5566: POP
5567: POP
// end ; if buildings_list = 0 then
5568: LD_VAR 0 4
5572: PUSH
5573: LD_INT 0
5575: EQUAL
5576: IFFALSE 5609
// begin for i in engineerOK_list do
5578: LD_ADDR_VAR 0 5
5582: PUSH
5583: LD_VAR 0 6
5587: PUSH
5588: FOR_IN
5589: IFFALSE 5607
// begin ComEnterUnit ( i , building ) ;
5591: LD_VAR 0 5
5595: PPUSH
5596: LD_VAR 0 2
5600: PPUSH
5601: CALL_OW 120
// end ;
5605: GO 5588
5607: POP
5608: POP
// end ; end ;
5609: LD_VAR 0 3
5613: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5614: LD_INT 0
5616: PPUSH
5617: PPUSH
5618: PPUSH
5619: PPUSH
5620: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5621: LD_ADDR_VAR 0 6
5625: PUSH
5626: LD_INT 22
5628: PUSH
5629: LD_VAR 0 1
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 25
5640: PUSH
5641: LD_INT 4
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PPUSH
5652: CALL_OW 69
5656: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5657: LD_ADDR_VAR 0 9
5661: PUSH
5662: LD_VAR 0 3
5666: PPUSH
5667: LD_INT 22
5669: PUSH
5670: LD_VAR 0 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 21
5681: PUSH
5682: LD_INT 1
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 3
5691: PUSH
5692: LD_INT 24
5694: PUSH
5695: LD_INT 750
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: LIST
5710: PPUSH
5711: CALL_OW 70
5715: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5716: LD_VAR 0 9
5720: PUSH
5721: LD_INT 0
5723: GREATER
5724: PUSH
5725: LD_VAR 0 6
5729: PUSH
5730: LD_INT 0
5732: GREATER
5733: AND
5734: IFFALSE 5861
// begin for i = 1 to damageUnits do
5736: LD_ADDR_VAR 0 7
5740: PUSH
5741: DOUBLE
5742: LD_INT 1
5744: DEC
5745: ST_TO_ADDR
5746: LD_VAR 0 9
5750: PUSH
5751: FOR_TO
5752: IFFALSE 5776
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5754: LD_VAR 0 9
5758: PUSH
5759: LD_VAR 0 7
5763: ARRAY
5764: PPUSH
5765: LD_VAR 0 2
5769: PPUSH
5770: CALL_OW 113
5774: GO 5751
5776: POP
5777: POP
// for i in sci_list do
5778: LD_ADDR_VAR 0 7
5782: PUSH
5783: LD_VAR 0 6
5787: PUSH
5788: FOR_IN
5789: IFFALSE 5857
// begin ComExitBuilding ( i ) ;
5791: LD_VAR 0 7
5795: PPUSH
5796: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5800: LD_ADDR_VAR 0 8
5804: PUSH
5805: LD_VAR 0 2
5809: PPUSH
5810: LD_INT 22
5812: PUSH
5813: LD_VAR 0 1
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PPUSH
5822: CALL_OW 70
5826: PUSH
5827: FOR_IN
5828: IFFALSE 5853
// begin AddComHeal ( i , j ) ;
5830: LD_VAR 0 7
5834: PPUSH
5835: LD_VAR 0 8
5839: PPUSH
5840: CALL_OW 188
// wait ( 1 1$0 ) ;
5844: LD_INT 2100
5846: PPUSH
5847: CALL_OW 67
// end ;
5851: GO 5827
5853: POP
5854: POP
// end ;
5855: GO 5788
5857: POP
5858: POP
// end else
5859: GO 5875
// begin AddComEnterUnit ( sci_list , build ) ;
5861: LD_VAR 0 6
5865: PPUSH
5866: LD_VAR 0 4
5870: PPUSH
5871: CALL_OW 180
// end ; end ;
5875: LD_VAR 0 5
5879: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
5887: PPUSH
5888: PPUSH
5889: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5890: LD_INT 22
5892: PUSH
5893: LD_VAR 0 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 21
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 69
5920: PUSH
5921: LD_VAR 0 3
5925: LESSEQUAL
5926: IFFALSE 5993
// begin for i = 1 to vehCount do
5928: LD_ADDR_VAR 0 10
5932: PUSH
5933: DOUBLE
5934: LD_INT 1
5936: DEC
5937: ST_TO_ADDR
5938: LD_VAR 0 3
5942: PUSH
5943: FOR_TO
5944: IFFALSE 5991
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5946: LD_VAR 0 2
5950: PPUSH
5951: LD_VAR 0 8
5955: PPUSH
5956: LD_VAR 0 6
5960: PPUSH
5961: LD_VAR 0 7
5965: PPUSH
5966: LD_VAR 0 5
5970: PUSH
5971: LD_INT 1
5973: PPUSH
5974: LD_VAR 0 5
5978: PPUSH
5979: CALL_OW 12
5983: ARRAY
5984: PPUSH
5985: CALL_OW 185
5989: GO 5943
5991: POP
5992: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5993: LD_INT 22
5995: PUSH
5996: LD_VAR 0 1
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 21
6007: PUSH
6008: LD_INT 2
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 24
6017: PUSH
6018: LD_INT 250
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: PPUSH
6030: CALL_OW 69
6034: PUSH
6035: LD_VAR 0 3
6039: GREATEREQUAL
6040: IFFALSE 6360
// begin repeat begin wait ( 0 0$1 ) ;
6042: LD_INT 35
6044: PPUSH
6045: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
6049: LD_INT 22
6051: PUSH
6052: LD_VAR 0 1
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: LD_INT 21
6063: PUSH
6064: LD_INT 2
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PUSH
6071: LD_INT 24
6073: PUSH
6074: LD_INT 651
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: PPUSH
6086: CALL_OW 69
6090: PUSH
6091: LD_INT 0
6093: GREATER
6094: IFFALSE 6322
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
6096: LD_ADDR_VAR 0 10
6100: PUSH
6101: LD_INT 22
6103: PUSH
6104: LD_VAR 0 1
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: LD_INT 21
6115: PUSH
6116: LD_INT 2
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 24
6125: PUSH
6126: LD_INT 651
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 69
6142: PUSH
6143: FOR_IN
6144: IFFALSE 6320
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6146: LD_ADDR_VAR 0 15
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_VAR 0 4
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL_OW 69
6167: PPUSH
6168: LD_VAR 0 10
6172: PPUSH
6173: CALL_OW 74
6177: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6178: LD_ADDR_VAR 0 16
6182: PUSH
6183: LD_INT 22
6185: PUSH
6186: LD_VAR 0 4
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 2
6197: PUSH
6198: LD_INT 59
6200: PUSH
6201: EMPTY
6202: LIST
6203: PUSH
6204: LD_INT 21
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 21
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: PPUSH
6237: CALL_OW 69
6241: PPUSH
6242: LD_VAR 0 10
6246: PPUSH
6247: CALL_OW 74
6251: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6252: LD_VAR 0 10
6256: PPUSH
6257: LD_VAR 0 15
6261: PPUSH
6262: CALL_OW 296
6266: PUSH
6267: LD_INT 8
6269: PLUS
6270: PUSH
6271: LD_VAR 0 10
6275: PPUSH
6276: LD_VAR 0 16
6280: PPUSH
6281: CALL_OW 296
6285: LESS
6286: IFFALSE 6304
// begin ComAttackUnit ( i , target1 ) ;
6288: LD_VAR 0 10
6292: PPUSH
6293: LD_VAR 0 15
6297: PPUSH
6298: CALL_OW 115
// end else
6302: GO 6318
// begin ComAttackUnit ( i , target2 ) ;
6304: LD_VAR 0 10
6308: PPUSH
6309: LD_VAR 0 16
6313: PPUSH
6314: CALL_OW 115
// end ; end ;
6318: GO 6143
6320: POP
6321: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
6322: LD_INT 22
6324: PUSH
6325: LD_VAR 0 1
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 2
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: PUSH
6353: LD_VAR 0 3
6357: LESSEQUAL
6358: IFFALSE 6042
// end ; end ;
6360: LD_VAR 0 9
6364: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
6376: PPUSH
6377: PPUSH
// for i = 1 to medicCount do
6378: LD_ADDR_VAR 0 14
6382: PUSH
6383: DOUBLE
6384: LD_INT 1
6386: DEC
6387: ST_TO_ADDR
6388: LD_VAR 0 7
6392: PUSH
6393: FOR_TO
6394: IFFALSE 6476
// begin uc_side = side ;
6396: LD_ADDR_OWVAR 20
6400: PUSH
6401: LD_VAR 0 1
6405: ST_TO_ADDR
// uc_nation = nation ;
6406: LD_ADDR_OWVAR 21
6410: PUSH
6411: LD_VAR 0 2
6415: ST_TO_ADDR
// hc_name =  ;
6416: LD_ADDR_OWVAR 26
6420: PUSH
6421: LD_STRING 
6423: ST_TO_ADDR
// hc_gallery =  ;
6424: LD_ADDR_OWVAR 33
6428: PUSH
6429: LD_STRING 
6431: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6432: LD_INT 0
6434: PPUSH
6435: LD_INT 4
6437: PPUSH
6438: LD_VAR 0 8
6442: PPUSH
6443: CALL_OW 380
// un = CreateHuman ;
6447: LD_ADDR_VAR 0 16
6451: PUSH
6452: CALL_OW 44
6456: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6457: LD_VAR 0 16
6461: PPUSH
6462: LD_VAR 0 9
6466: PPUSH
6467: LD_INT 0
6469: PPUSH
6470: CALL_OW 49
// end ;
6474: GO 6393
6476: POP
6477: POP
// for i = 1 to soldierCount do
6478: LD_ADDR_VAR 0 14
6482: PUSH
6483: DOUBLE
6484: LD_INT 1
6486: DEC
6487: ST_TO_ADDR
6488: LD_VAR 0 3
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6576
// begin uc_side = side ;
6496: LD_ADDR_OWVAR 20
6500: PUSH
6501: LD_VAR 0 1
6505: ST_TO_ADDR
// uc_nation = nation ;
6506: LD_ADDR_OWVAR 21
6510: PUSH
6511: LD_VAR 0 2
6515: ST_TO_ADDR
// hc_name =  ;
6516: LD_ADDR_OWVAR 26
6520: PUSH
6521: LD_STRING 
6523: ST_TO_ADDR
// hc_gallery =  ;
6524: LD_ADDR_OWVAR 33
6528: PUSH
6529: LD_STRING 
6531: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6532: LD_INT 0
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: LD_VAR 0 8
6542: PPUSH
6543: CALL_OW 380
// un = CreateHuman ;
6547: LD_ADDR_VAR 0 16
6551: PUSH
6552: CALL_OW 44
6556: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6557: LD_VAR 0 16
6561: PPUSH
6562: LD_VAR 0 9
6566: PPUSH
6567: LD_INT 0
6569: PPUSH
6570: CALL_OW 49
// end ;
6574: GO 6493
6576: POP
6577: POP
// for i = 1 to sniperCount do
6578: LD_ADDR_VAR 0 14
6582: PUSH
6583: DOUBLE
6584: LD_INT 1
6586: DEC
6587: ST_TO_ADDR
6588: LD_VAR 0 4
6592: PUSH
6593: FOR_TO
6594: IFFALSE 6676
// begin uc_side = side ;
6596: LD_ADDR_OWVAR 20
6600: PUSH
6601: LD_VAR 0 1
6605: ST_TO_ADDR
// uc_nation = nation ;
6606: LD_ADDR_OWVAR 21
6610: PUSH
6611: LD_VAR 0 2
6615: ST_TO_ADDR
// hc_name =  ;
6616: LD_ADDR_OWVAR 26
6620: PUSH
6621: LD_STRING 
6623: ST_TO_ADDR
// hc_gallery =  ;
6624: LD_ADDR_OWVAR 33
6628: PUSH
6629: LD_STRING 
6631: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6632: LD_INT 0
6634: PPUSH
6635: LD_INT 5
6637: PPUSH
6638: LD_VAR 0 8
6642: PPUSH
6643: CALL_OW 380
// un = CreateHuman ;
6647: LD_ADDR_VAR 0 16
6651: PUSH
6652: CALL_OW 44
6656: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6657: LD_VAR 0 16
6661: PPUSH
6662: LD_VAR 0 9
6666: PPUSH
6667: LD_INT 0
6669: PPUSH
6670: CALL_OW 49
// end ;
6674: GO 6593
6676: POP
6677: POP
// for i = 1 to bazookCount do
6678: LD_ADDR_VAR 0 14
6682: PUSH
6683: DOUBLE
6684: LD_INT 1
6686: DEC
6687: ST_TO_ADDR
6688: LD_VAR 0 5
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6776
// begin uc_side = side ;
6696: LD_ADDR_OWVAR 20
6700: PUSH
6701: LD_VAR 0 1
6705: ST_TO_ADDR
// uc_nation = nation ;
6706: LD_ADDR_OWVAR 21
6710: PUSH
6711: LD_VAR 0 2
6715: ST_TO_ADDR
// hc_name =  ;
6716: LD_ADDR_OWVAR 26
6720: PUSH
6721: LD_STRING 
6723: ST_TO_ADDR
// hc_gallery =  ;
6724: LD_ADDR_OWVAR 33
6728: PUSH
6729: LD_STRING 
6731: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6732: LD_INT 0
6734: PPUSH
6735: LD_INT 9
6737: PPUSH
6738: LD_VAR 0 8
6742: PPUSH
6743: CALL_OW 380
// un = CreateHuman ;
6747: LD_ADDR_VAR 0 16
6751: PUSH
6752: CALL_OW 44
6756: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6757: LD_VAR 0 16
6761: PPUSH
6762: LD_VAR 0 9
6766: PPUSH
6767: LD_INT 0
6769: PPUSH
6770: CALL_OW 49
// end ;
6774: GO 6693
6776: POP
6777: POP
// for i = 1 to mortalCount do
6778: LD_ADDR_VAR 0 14
6782: PUSH
6783: DOUBLE
6784: LD_INT 1
6786: DEC
6787: ST_TO_ADDR
6788: LD_VAR 0 6
6792: PUSH
6793: FOR_TO
6794: IFFALSE 6876
// begin uc_side = side ;
6796: LD_ADDR_OWVAR 20
6800: PUSH
6801: LD_VAR 0 1
6805: ST_TO_ADDR
// uc_nation = nation ;
6806: LD_ADDR_OWVAR 21
6810: PUSH
6811: LD_VAR 0 2
6815: ST_TO_ADDR
// hc_name =  ;
6816: LD_ADDR_OWVAR 26
6820: PUSH
6821: LD_STRING 
6823: ST_TO_ADDR
// hc_gallery =  ;
6824: LD_ADDR_OWVAR 33
6828: PUSH
6829: LD_STRING 
6831: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6832: LD_INT 0
6834: PPUSH
6835: LD_INT 8
6837: PPUSH
6838: LD_VAR 0 8
6842: PPUSH
6843: CALL_OW 380
// un = CreateHuman ;
6847: LD_ADDR_VAR 0 16
6851: PUSH
6852: CALL_OW 44
6856: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6857: LD_VAR 0 16
6861: PPUSH
6862: LD_VAR 0 9
6866: PPUSH
6867: LD_INT 0
6869: PPUSH
6870: CALL_OW 49
// end ;
6874: GO 6793
6876: POP
6877: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6878: LD_ADDR_VAR 0 19
6882: PUSH
6883: LD_INT 22
6885: PUSH
6886: LD_VAR 0 1
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 2
6897: PUSH
6898: LD_INT 25
6900: PUSH
6901: LD_INT 1
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: LD_INT 25
6910: PUSH
6911: LD_INT 5
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 25
6920: PUSH
6921: LD_INT 8
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: LD_INT 25
6930: PUSH
6931: LD_INT 9
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 69
6953: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6954: LD_ADDR_VAR 0 18
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 1
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 25
6973: PUSH
6974: LD_INT 4
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// for i in medic_list do
6990: LD_ADDR_VAR 0 14
6994: PUSH
6995: LD_VAR 0 18
6999: PUSH
7000: FOR_IN
7001: IFFALSE 7019
// ComMoveToArea ( i , healArea ) ;
7003: LD_VAR 0 14
7007: PPUSH
7008: LD_VAR 0 10
7012: PPUSH
7013: CALL_OW 113
7017: GO 7000
7019: POP
7020: POP
// if strategy = 1 then
7021: LD_VAR 0 12
7025: PUSH
7026: LD_INT 1
7028: EQUAL
7029: IFFALSE 7764
// begin repeat wait ( 0 0$3 ) ;
7031: LD_INT 105
7033: PPUSH
7034: CALL_OW 67
// for i in soldiersOK_list do
7038: LD_ADDR_VAR 0 14
7042: PUSH
7043: LD_VAR 0 19
7047: PUSH
7048: FOR_IN
7049: IFFALSE 7113
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7051: LD_VAR 0 14
7055: PPUSH
7056: LD_INT 91
7058: PPUSH
7059: LD_INT 63
7061: PPUSH
7062: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7066: LD_VAR 0 14
7070: PPUSH
7071: LD_INT 101
7073: PPUSH
7074: LD_INT 53
7076: PPUSH
7077: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7081: LD_VAR 0 14
7085: PPUSH
7086: LD_INT 75
7088: PPUSH
7089: LD_INT 23
7091: PPUSH
7092: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7096: LD_VAR 0 14
7100: PPUSH
7101: LD_INT 78
7103: PPUSH
7104: LD_INT 8
7106: PPUSH
7107: CALL_OW 174
// end ;
7111: GO 7048
7113: POP
7114: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
7115: LD_INT 15
7117: PPUSH
7118: LD_INT 22
7120: PUSH
7121: LD_VAR 0 1
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PPUSH
7130: CALL_OW 70
7134: PUSH
7135: LD_INT 2
7137: GREATER
7138: IFFALSE 7031
// repeat wait ( 0 0$1 ) ;
7140: LD_INT 35
7142: PPUSH
7143: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7147: LD_ADDR_VAR 0 17
7151: PUSH
7152: LD_INT 22
7154: PUSH
7155: LD_VAR 0 1
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 1
7166: PUSH
7167: LD_INT 3
7169: PUSH
7170: LD_INT 24
7172: PUSH
7173: LD_INT 550
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 24
7186: PUSH
7187: LD_INT 250
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7208: LD_ADDR_VAR 0 19
7212: PUSH
7213: LD_INT 22
7215: PUSH
7216: LD_VAR 0 1
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 2
7227: PUSH
7228: LD_INT 25
7230: PUSH
7231: LD_INT 1
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 25
7240: PUSH
7241: LD_INT 5
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 25
7250: PUSH
7251: LD_INT 8
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 25
7260: PUSH
7261: LD_INT 9
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 24
7277: PUSH
7278: LD_INT 1000
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: PPUSH
7290: CALL_OW 69
7294: ST_TO_ADDR
// if medicCount > 0 then
7295: LD_VAR 0 7
7299: PUSH
7300: LD_INT 0
7302: GREATER
7303: IFFALSE 7377
// begin if damageUnit_list > 0 then
7305: LD_VAR 0 17
7309: PUSH
7310: LD_INT 0
7312: GREATER
7313: IFFALSE 7377
// begin for i in damageUnit_list do
7315: LD_ADDR_VAR 0 14
7319: PUSH
7320: LD_VAR 0 17
7324: PUSH
7325: FOR_IN
7326: IFFALSE 7375
// begin ComMoveToArea ( i , healArea ) ;
7328: LD_VAR 0 14
7332: PPUSH
7333: LD_VAR 0 10
7337: PPUSH
7338: CALL_OW 113
// for j in medic_list do
7342: LD_ADDR_VAR 0 15
7346: PUSH
7347: LD_VAR 0 18
7351: PUSH
7352: FOR_IN
7353: IFFALSE 7371
// AddComHeal ( j , i ) ;
7355: LD_VAR 0 15
7359: PPUSH
7360: LD_VAR 0 14
7364: PPUSH
7365: CALL_OW 188
7369: GO 7352
7371: POP
7372: POP
// end ;
7373: GO 7325
7375: POP
7376: POP
// end ; end ; for i in soldiersOK_list do
7377: LD_ADDR_VAR 0 14
7381: PUSH
7382: LD_VAR 0 19
7386: PUSH
7387: FOR_IN
7388: IFFALSE 7564
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7390: LD_ADDR_VAR 0 22
7394: PUSH
7395: LD_INT 22
7397: PUSH
7398: LD_VAR 0 11
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PPUSH
7407: CALL_OW 69
7411: PPUSH
7412: LD_VAR 0 14
7416: PPUSH
7417: CALL_OW 74
7421: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7422: LD_ADDR_VAR 0 23
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_VAR 0 11
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 2
7441: PUSH
7442: LD_INT 59
7444: PUSH
7445: EMPTY
7446: LIST
7447: PUSH
7448: LD_INT 21
7450: PUSH
7451: LD_INT 1
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 21
7460: PUSH
7461: LD_INT 2
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: EMPTY
7479: LIST
7480: PPUSH
7481: CALL_OW 69
7485: PPUSH
7486: LD_VAR 0 14
7490: PPUSH
7491: CALL_OW 74
7495: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 22
7505: PPUSH
7506: CALL_OW 296
7510: PUSH
7511: LD_INT 8
7513: PLUS
7514: PUSH
7515: LD_VAR 0 14
7519: PPUSH
7520: LD_VAR 0 23
7524: PPUSH
7525: CALL_OW 296
7529: LESS
7530: IFFALSE 7548
// begin ComAttackUnit ( i , target1 ) ;
7532: LD_VAR 0 14
7536: PPUSH
7537: LD_VAR 0 22
7541: PPUSH
7542: CALL_OW 115
// end else
7546: GO 7562
// begin ComAttackUnit ( i , target2 ) ;
7548: LD_VAR 0 14
7552: PPUSH
7553: LD_VAR 0 23
7557: PPUSH
7558: CALL_OW 115
// end ; end ;
7562: GO 7387
7564: POP
7565: POP
// for i in soldiersOK_list do
7566: LD_ADDR_VAR 0 14
7570: PUSH
7571: LD_VAR 0 19
7575: PUSH
7576: FOR_IN
7577: IFFALSE 7753
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7579: LD_ADDR_VAR 0 22
7583: PUSH
7584: LD_INT 22
7586: PUSH
7587: LD_VAR 0 11
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PPUSH
7596: CALL_OW 69
7600: PPUSH
7601: LD_VAR 0 14
7605: PPUSH
7606: CALL_OW 74
7610: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7611: LD_ADDR_VAR 0 23
7615: PUSH
7616: LD_INT 22
7618: PUSH
7619: LD_VAR 0 11
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: LD_INT 59
7633: PUSH
7634: EMPTY
7635: LIST
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 1
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 21
7649: PUSH
7650: LD_INT 2
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: PPUSH
7675: LD_VAR 0 14
7679: PPUSH
7680: CALL_OW 74
7684: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7685: LD_VAR 0 14
7689: PPUSH
7690: LD_VAR 0 22
7694: PPUSH
7695: CALL_OW 296
7699: PUSH
7700: LD_INT 8
7702: PLUS
7703: PUSH
7704: LD_VAR 0 14
7708: PPUSH
7709: LD_VAR 0 23
7713: PPUSH
7714: CALL_OW 296
7718: LESS
7719: IFFALSE 7737
// begin ComAttackUnit ( i , target1 ) ;
7721: LD_VAR 0 14
7725: PPUSH
7726: LD_VAR 0 22
7730: PPUSH
7731: CALL_OW 115
// end else
7735: GO 7751
// begin ComAttackUnit ( i , target2 ) ;
7737: LD_VAR 0 14
7741: PPUSH
7742: LD_VAR 0 23
7746: PPUSH
7747: CALL_OW 115
// end ; end ;
7751: GO 7576
7753: POP
7754: POP
// until soldiersOK_list = [ ] ;
7755: LD_VAR 0 19
7759: PUSH
7760: EMPTY
7761: EQUAL
7762: IFFALSE 7140
// end ; if strategy = 2 then
7764: LD_VAR 0 12
7768: PUSH
7769: LD_INT 2
7771: EQUAL
7772: IFFALSE 8477
// begin repeat wait ( 0 0$1 ) ;
7774: LD_INT 35
7776: PPUSH
7777: CALL_OW 67
// for i in soldiersOK_list do
7781: LD_ADDR_VAR 0 14
7785: PUSH
7786: LD_VAR 0 19
7790: PUSH
7791: FOR_IN
7792: IFFALSE 7826
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7794: LD_VAR 0 14
7798: PPUSH
7799: LD_INT 91
7801: PPUSH
7802: LD_INT 63
7804: PPUSH
7805: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7809: LD_VAR 0 14
7813: PPUSH
7814: LD_INT 75
7816: PPUSH
7817: LD_INT 33
7819: PPUSH
7820: CALL_OW 174
// end ;
7824: GO 7791
7826: POP
7827: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
7828: LD_INT 16
7830: PPUSH
7831: LD_INT 22
7833: PUSH
7834: LD_VAR 0 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 70
7847: PUSH
7848: LD_INT 2
7850: GREATER
7851: IFFALSE 7774
// repeat wait ( 0 0$3 ) ;
7853: LD_INT 105
7855: PPUSH
7856: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7860: LD_ADDR_VAR 0 17
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: LD_INT 24
7885: PUSH
7886: LD_INT 550
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 24
7899: PUSH
7900: LD_INT 250
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PPUSH
7916: CALL_OW 69
7920: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7921: LD_ADDR_VAR 0 19
7925: PUSH
7926: LD_INT 22
7928: PUSH
7929: LD_VAR 0 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: LD_INT 25
7943: PUSH
7944: LD_INT 1
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: LD_INT 25
7953: PUSH
7954: LD_INT 5
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 25
7963: PUSH
7964: LD_INT 8
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 25
7973: PUSH
7974: LD_INT 9
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 24
7990: PUSH
7991: LD_INT 1000
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: PPUSH
8003: CALL_OW 69
8007: ST_TO_ADDR
// if medicCount > 0 then
8008: LD_VAR 0 7
8012: PUSH
8013: LD_INT 0
8015: GREATER
8016: IFFALSE 8090
// begin if damageUnit_list > 0 then
8018: LD_VAR 0 17
8022: PUSH
8023: LD_INT 0
8025: GREATER
8026: IFFALSE 8090
// begin for i in damageUnit_list do
8028: LD_ADDR_VAR 0 14
8032: PUSH
8033: LD_VAR 0 17
8037: PUSH
8038: FOR_IN
8039: IFFALSE 8088
// begin ComMoveToArea ( i , healArea ) ;
8041: LD_VAR 0 14
8045: PPUSH
8046: LD_VAR 0 10
8050: PPUSH
8051: CALL_OW 113
// for j in medic_list do
8055: LD_ADDR_VAR 0 15
8059: PUSH
8060: LD_VAR 0 18
8064: PUSH
8065: FOR_IN
8066: IFFALSE 8084
// AddComHeal ( j , i ) ;
8068: LD_VAR 0 15
8072: PPUSH
8073: LD_VAR 0 14
8077: PPUSH
8078: CALL_OW 188
8082: GO 8065
8084: POP
8085: POP
// end ;
8086: GO 8038
8088: POP
8089: POP
// end ; end ; for i in soldiersOK_list do
8090: LD_ADDR_VAR 0 14
8094: PUSH
8095: LD_VAR 0 19
8099: PUSH
8100: FOR_IN
8101: IFFALSE 8277
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8103: LD_ADDR_VAR 0 22
8107: PUSH
8108: LD_INT 22
8110: PUSH
8111: LD_VAR 0 11
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PPUSH
8120: CALL_OW 69
8124: PPUSH
8125: LD_VAR 0 14
8129: PPUSH
8130: CALL_OW 74
8134: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8135: LD_ADDR_VAR 0 23
8139: PUSH
8140: LD_INT 22
8142: PUSH
8143: LD_VAR 0 11
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 2
8154: PUSH
8155: LD_INT 59
8157: PUSH
8158: EMPTY
8159: LIST
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 1
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 21
8173: PUSH
8174: LD_INT 2
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: PPUSH
8194: CALL_OW 69
8198: PPUSH
8199: LD_VAR 0 14
8203: PPUSH
8204: CALL_OW 74
8208: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8209: LD_VAR 0 14
8213: PPUSH
8214: LD_VAR 0 22
8218: PPUSH
8219: CALL_OW 296
8223: PUSH
8224: LD_INT 8
8226: PLUS
8227: PUSH
8228: LD_VAR 0 14
8232: PPUSH
8233: LD_VAR 0 23
8237: PPUSH
8238: CALL_OW 296
8242: LESS
8243: IFFALSE 8261
// begin ComAttackUnit ( i , target1 ) ;
8245: LD_VAR 0 14
8249: PPUSH
8250: LD_VAR 0 22
8254: PPUSH
8255: CALL_OW 115
// end else
8259: GO 8275
// begin ComAttackUnit ( i , target2 ) ;
8261: LD_VAR 0 14
8265: PPUSH
8266: LD_VAR 0 23
8270: PPUSH
8271: CALL_OW 115
// end ; end ;
8275: GO 8100
8277: POP
8278: POP
// for i in soldiersOK_list do
8279: LD_ADDR_VAR 0 14
8283: PUSH
8284: LD_VAR 0 19
8288: PUSH
8289: FOR_IN
8290: IFFALSE 8466
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8292: LD_ADDR_VAR 0 22
8296: PUSH
8297: LD_INT 22
8299: PUSH
8300: LD_VAR 0 11
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PPUSH
8309: CALL_OW 69
8313: PPUSH
8314: LD_VAR 0 14
8318: PPUSH
8319: CALL_OW 74
8323: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8324: LD_ADDR_VAR 0 23
8328: PUSH
8329: LD_INT 22
8331: PUSH
8332: LD_VAR 0 11
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: LD_INT 59
8346: PUSH
8347: EMPTY
8348: LIST
8349: PUSH
8350: LD_INT 21
8352: PUSH
8353: LD_INT 1
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: LD_INT 21
8362: PUSH
8363: LD_INT 2
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: EMPTY
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: PPUSH
8388: LD_VAR 0 14
8392: PPUSH
8393: CALL_OW 74
8397: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8398: LD_VAR 0 14
8402: PPUSH
8403: LD_VAR 0 22
8407: PPUSH
8408: CALL_OW 296
8412: PUSH
8413: LD_INT 8
8415: PLUS
8416: PUSH
8417: LD_VAR 0 14
8421: PPUSH
8422: LD_VAR 0 23
8426: PPUSH
8427: CALL_OW 296
8431: LESS
8432: IFFALSE 8450
// begin ComAttackUnit ( i , target1 ) ;
8434: LD_VAR 0 14
8438: PPUSH
8439: LD_VAR 0 22
8443: PPUSH
8444: CALL_OW 115
// end else
8448: GO 8464
// begin ComAttackUnit ( i , target2 ) ;
8450: LD_VAR 0 14
8454: PPUSH
8455: LD_VAR 0 23
8459: PPUSH
8460: CALL_OW 115
// end ; end ;
8464: GO 8289
8466: POP
8467: POP
// until soldiersOK_list = [ ] ;
8468: LD_VAR 0 19
8472: PUSH
8473: EMPTY
8474: EQUAL
8475: IFFALSE 7853
// end ; end ;
8477: LD_VAR 0 13
8481: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8482: LD_INT 0
8484: PPUSH
8485: PPUSH
8486: PPUSH
8487: PPUSH
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
8493: PPUSH
8494: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8495: LD_ADDR_VAR 0 9
8499: PUSH
8500: LD_INT 22
8502: PUSH
8503: LD_VAR 0 1
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 21
8514: PUSH
8515: LD_INT 2
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_INT 24
8524: PUSH
8525: LD_INT 660
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: LD_INT 58
8537: PUSH
8538: EMPTY
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 3
8547: PUSH
8548: LD_INT 34
8550: PUSH
8551: LD_INT 53
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 69
8573: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8574: LD_ADDR_VAR 0 10
8578: PUSH
8579: LD_INT 22
8581: PUSH
8582: LD_VAR 0 1
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 21
8593: PUSH
8594: LD_INT 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 3
8603: PUSH
8604: LD_INT 24
8606: PUSH
8607: LD_INT 660
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: PPUSH
8623: CALL_OW 69
8627: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8628: LD_ADDR_VAR 0 11
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 21
8652: PUSH
8653: LD_INT 2
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: LD_INT 3
8662: PUSH
8663: LD_INT 24
8665: PUSH
8666: LD_INT 1000
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 70
8686: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8687: LD_ADDR_VAR 0 12
8691: PUSH
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 22
8699: PUSH
8700: LD_VAR 0 1
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 21
8711: PUSH
8712: LD_INT 2
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 24
8721: PUSH
8722: LD_INT 1000
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: LD_INT 58
8731: PUSH
8732: EMPTY
8733: LIST
8734: PUSH
8735: LD_INT 3
8737: PUSH
8738: LD_INT 34
8740: PUSH
8741: LD_INT 53
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 70
8763: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8764: LD_ADDR_VAR 0 13
8768: PUSH
8769: EMPTY
8770: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8771: LD_ADDR_VAR 0 14
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: LD_INT 22
8783: PUSH
8784: LD_VAR 0 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 25
8795: PUSH
8796: LD_INT 3
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 70
8811: ST_TO_ADDR
// if damageVehicle_list > 0 then
8812: LD_VAR 0 10
8816: PUSH
8817: LD_INT 0
8819: GREATER
8820: IFFALSE 8858
// begin for i in damageVehicle_list do
8822: LD_ADDR_VAR 0 7
8826: PUSH
8827: LD_VAR 0 10
8831: PUSH
8832: FOR_IN
8833: IFFALSE 8856
// begin ComMoveXY ( i , repX , repY ) ;
8835: LD_VAR 0 7
8839: PPUSH
8840: LD_VAR 0 3
8844: PPUSH
8845: LD_VAR 0 4
8849: PPUSH
8850: CALL_OW 111
// end ;
8854: GO 8832
8856: POP
8857: POP
// end ; if vehicleNeedRepair_list > 0 then
8858: LD_VAR 0 11
8862: PUSH
8863: LD_INT 0
8865: GREATER
8866: IFFALSE 8953
// begin for i in vehicleNeedRepair_list do
8868: LD_ADDR_VAR 0 7
8872: PUSH
8873: LD_VAR 0 11
8877: PUSH
8878: FOR_IN
8879: IFFALSE 8951
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8881: LD_ADDR_VAR 0 13
8885: PUSH
8886: LD_VAR 0 13
8890: PUSH
8891: LD_VAR 0 7
8895: PPUSH
8896: CALL_OW 313
8900: ADD
8901: ST_TO_ADDR
// for j in mechanicInside_list do
8902: LD_ADDR_VAR 0 8
8906: PUSH
8907: LD_VAR 0 13
8911: PUSH
8912: FOR_IN
8913: IFFALSE 8947
// begin ComExitVehicle ( i ) ;
8915: LD_VAR 0 7
8919: PPUSH
8920: CALL_OW 121
// wait ( 0 0$1 ) ;
8924: LD_INT 35
8926: PPUSH
8927: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8931: LD_VAR 0 7
8935: PPUSH
8936: LD_VAR 0 8
8940: PPUSH
8941: CALL_OW 129
// end ;
8945: GO 8912
8947: POP
8948: POP
// end ;
8949: GO 8878
8951: POP
8952: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8953: LD_VAR 0 12
8957: PUSH
8958: LD_INT 0
8960: GREATER
8961: IFFALSE 9001
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8963: LD_VAR 0 14
8967: PUSH
8968: LD_INT 1
8970: ARRAY
8971: PPUSH
8972: LD_VAR 0 12
8976: PUSH
8977: LD_INT 1
8979: ARRAY
8980: PPUSH
8981: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8985: LD_VAR 0 12
8989: PUSH
8990: LD_INT 1
8992: ARRAY
8993: PPUSH
8994: LD_INT 100
8996: PPUSH
8997: CALL_OW 240
// end ; if vehicleOK_list > 0 then
9001: LD_VAR 0 9
9005: PUSH
9006: LD_INT 0
9008: GREATER
9009: IFFALSE 9200
// begin for i in vehicleOK_list do
9011: LD_ADDR_VAR 0 7
9015: PUSH
9016: LD_VAR 0 9
9020: PUSH
9021: FOR_IN
9022: IFFALSE 9198
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9024: LD_ADDR_VAR 0 15
9028: PUSH
9029: LD_INT 22
9031: PUSH
9032: LD_VAR 0 5
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PPUSH
9041: CALL_OW 69
9045: PPUSH
9046: LD_VAR 0 7
9050: PPUSH
9051: CALL_OW 74
9055: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9056: LD_ADDR_VAR 0 16
9060: PUSH
9061: LD_INT 22
9063: PUSH
9064: LD_VAR 0 5
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 2
9075: PUSH
9076: LD_INT 59
9078: PUSH
9079: EMPTY
9080: LIST
9081: PUSH
9082: LD_INT 21
9084: PUSH
9085: LD_INT 1
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 21
9094: PUSH
9095: LD_INT 2
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: EMPTY
9113: LIST
9114: PPUSH
9115: CALL_OW 69
9119: PPUSH
9120: LD_VAR 0 7
9124: PPUSH
9125: CALL_OW 74
9129: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9130: LD_VAR 0 7
9134: PPUSH
9135: LD_VAR 0 15
9139: PPUSH
9140: CALL_OW 296
9144: PUSH
9145: LD_INT 8
9147: PLUS
9148: PUSH
9149: LD_VAR 0 7
9153: PPUSH
9154: LD_VAR 0 16
9158: PPUSH
9159: CALL_OW 296
9163: LESS
9164: IFFALSE 9182
// begin ComAttackUnit ( i , target1 ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: LD_VAR 0 15
9175: PPUSH
9176: CALL_OW 115
// end else
9180: GO 9196
// begin ComAttackUnit ( i , target2 ) ;
9182: LD_VAR 0 7
9186: PPUSH
9187: LD_VAR 0 16
9191: PPUSH
9192: CALL_OW 115
// end ; end ;
9196: GO 9021
9198: POP
9199: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9200: LD_ADDR_VAR 0 7
9204: PUSH
9205: LD_VAR 0 2
9209: PPUSH
9210: LD_INT 22
9212: PUSH
9213: LD_VAR 0 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 25
9224: PUSH
9225: LD_INT 3
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PPUSH
9236: CALL_OW 70
9240: NOT
9241: PUSH
9242: FOR_IN
9243: IFFALSE 9266
// ComMoveXY ( i , repX , repY ) ;
9245: LD_VAR 0 7
9249: PPUSH
9250: LD_VAR 0 3
9254: PPUSH
9255: LD_VAR 0 4
9259: PPUSH
9260: CALL_OW 111
9264: GO 9242
9266: POP
9267: POP
// end ;
9268: LD_VAR 0 6
9272: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9273: LD_INT 0
9275: PPUSH
9276: PPUSH
9277: PPUSH
9278: PPUSH
9279: PPUSH
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
// amChassisTab = [ ] ;
9286: LD_ADDR_VAR 0 19
9290: PUSH
9291: EMPTY
9292: ST_TO_ADDR
// arChassisTab = [ ] ;
9293: LD_ADDR_VAR 0 18
9297: PUSH
9298: EMPTY
9299: ST_TO_ADDR
// ruChassisTab = [ ] ;
9300: LD_ADDR_VAR 0 17
9304: PUSH
9305: EMPTY
9306: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9307: LD_INT 35
9309: PPUSH
9310: CALL_OW 67
// if nation = 1 then
9314: LD_VAR 0 5
9318: PUSH
9319: LD_INT 1
9321: EQUAL
9322: IFFALSE 9813
// begin uc_side = side ;
9324: LD_ADDR_OWVAR 20
9328: PUSH
9329: LD_VAR 0 2
9333: ST_TO_ADDR
// uc_nation = nation ;
9334: LD_ADDR_OWVAR 21
9338: PUSH
9339: LD_VAR 0 5
9343: ST_TO_ADDR
// vc_engine = vehengine ;
9344: LD_ADDR_OWVAR 39
9348: PUSH
9349: LD_VAR 0 6
9353: ST_TO_ADDR
// vc_control = vehcontrol ;
9354: LD_ADDR_OWVAR 38
9358: PUSH
9359: LD_VAR 0 7
9363: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9364: LD_ADDR_OWVAR 40
9368: PUSH
9369: LD_VAR 0 10
9373: PUSH
9374: LD_INT 1
9376: PPUSH
9377: LD_VAR 0 10
9381: PPUSH
9382: CALL_OW 12
9386: ARRAY
9387: ST_TO_ADDR
// for j = 1 to AMWeapon do
9388: LD_ADDR_VAR 0 14
9392: PUSH
9393: DOUBLE
9394: LD_INT 1
9396: DEC
9397: ST_TO_ADDR
9398: LD_VAR 0 10
9402: PUSH
9403: FOR_TO
9404: IFFALSE 9705
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9406: LD_VAR 0 10
9410: PUSH
9411: LD_VAR 0 14
9415: ARRAY
9416: PUSH
9417: LD_INT 2
9419: EQUAL
9420: PUSH
9421: LD_VAR 0 10
9425: PUSH
9426: LD_VAR 0 14
9430: ARRAY
9431: PUSH
9432: LD_INT 3
9434: EQUAL
9435: OR
9436: IFFALSE 9489
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9438: LD_ADDR_VAR 0 19
9442: PUSH
9443: LD_INT 1
9445: PUSH
9446: LD_INT 2
9448: PUSH
9449: LD_INT 3
9451: PUSH
9452: LD_INT 4
9454: PUSH
9455: LD_INT 5
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9465: LD_ADDR_OWVAR 37
9469: PUSH
9470: LD_VAR 0 19
9474: PUSH
9475: LD_INT 1
9477: PPUSH
9478: LD_VAR 0 19
9482: PPUSH
9483: CALL_OW 12
9487: ARRAY
9488: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9489: LD_VAR 0 10
9493: PUSH
9494: LD_VAR 0 14
9498: ARRAY
9499: PUSH
9500: LD_INT 4
9502: EQUAL
9503: PUSH
9504: LD_VAR 0 10
9508: PUSH
9509: LD_VAR 0 14
9513: ARRAY
9514: PUSH
9515: LD_INT 5
9517: EQUAL
9518: OR
9519: PUSH
9520: LD_VAR 0 10
9524: PUSH
9525: LD_VAR 0 14
9529: ARRAY
9530: PUSH
9531: LD_INT 9
9533: EQUAL
9534: OR
9535: PUSH
9536: LD_VAR 0 10
9540: PUSH
9541: LD_VAR 0 14
9545: ARRAY
9546: PUSH
9547: LD_INT 11
9549: EQUAL
9550: OR
9551: PUSH
9552: LD_VAR 0 10
9556: PUSH
9557: LD_VAR 0 14
9561: ARRAY
9562: PUSH
9563: LD_INT 7
9565: EQUAL
9566: OR
9567: IFFALSE 9616
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9569: LD_ADDR_VAR 0 19
9573: PUSH
9574: LD_INT 2
9576: PUSH
9577: LD_INT 3
9579: PUSH
9580: LD_INT 4
9582: PUSH
9583: LD_INT 5
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9592: LD_ADDR_OWVAR 37
9596: PUSH
9597: LD_VAR 0 19
9601: PUSH
9602: LD_INT 1
9604: PPUSH
9605: LD_VAR 0 19
9609: PPUSH
9610: CALL_OW 12
9614: ARRAY
9615: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9616: LD_VAR 0 10
9620: PUSH
9621: LD_VAR 0 14
9625: ARRAY
9626: PUSH
9627: LD_INT 8
9629: EQUAL
9630: PUSH
9631: LD_VAR 0 10
9635: PUSH
9636: LD_VAR 0 14
9640: ARRAY
9641: PUSH
9642: LD_INT 6
9644: EQUAL
9645: OR
9646: PUSH
9647: LD_VAR 0 10
9651: PUSH
9652: LD_VAR 0 14
9656: ARRAY
9657: PUSH
9658: LD_INT 10
9660: EQUAL
9661: OR
9662: IFFALSE 9703
// begin amChassisTab = [ 4 , 5 ] ;
9664: LD_ADDR_VAR 0 19
9668: PUSH
9669: LD_INT 4
9671: PUSH
9672: LD_INT 5
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9679: LD_ADDR_OWVAR 37
9683: PUSH
9684: LD_VAR 0 19
9688: PUSH
9689: LD_INT 1
9691: PPUSH
9692: LD_VAR 0 19
9696: PPUSH
9697: CALL_OW 12
9701: ARRAY
9702: ST_TO_ADDR
// end ; end ;
9703: GO 9403
9705: POP
9706: POP
// veh = CreateVehicle ;
9707: LD_ADDR_VAR 0 16
9711: PUSH
9712: CALL_OW 45
9716: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9717: LD_VAR 0 16
9721: PPUSH
9722: LD_VAR 0 1
9726: PPUSH
9727: LD_INT 0
9729: PPUSH
9730: CALL_OW 49
// if vehControl = 1 then
9734: LD_VAR 0 7
9738: PUSH
9739: LD_INT 1
9741: EQUAL
9742: IFFALSE 9799
// begin hc_gallery =  ;
9744: LD_ADDR_OWVAR 33
9748: PUSH
9749: LD_STRING 
9751: ST_TO_ADDR
// hc_name =  ;
9752: LD_ADDR_OWVAR 26
9756: PUSH
9757: LD_STRING 
9759: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9760: LD_INT 0
9762: PPUSH
9763: LD_INT 3
9765: PPUSH
9766: LD_VAR 0 4
9770: PPUSH
9771: CALL_OW 380
// un = CreateHuman ;
9775: LD_ADDR_VAR 0 15
9779: PUSH
9780: CALL_OW 44
9784: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9785: LD_VAR 0 15
9789: PPUSH
9790: LD_VAR 0 16
9794: PPUSH
9795: CALL_OW 52
// end ; i = i + 1 ;
9799: LD_ADDR_VAR 0 13
9803: PUSH
9804: LD_VAR 0 13
9808: PUSH
9809: LD_INT 1
9811: PLUS
9812: ST_TO_ADDR
// end ; if nation = 2 then
9813: LD_VAR 0 5
9817: PUSH
9818: LD_INT 2
9820: EQUAL
9821: IFFALSE 10245
// begin uc_side = side ;
9823: LD_ADDR_OWVAR 20
9827: PUSH
9828: LD_VAR 0 2
9832: ST_TO_ADDR
// uc_nation = nation ;
9833: LD_ADDR_OWVAR 21
9837: PUSH
9838: LD_VAR 0 5
9842: ST_TO_ADDR
// vc_engine = vehengine ;
9843: LD_ADDR_OWVAR 39
9847: PUSH
9848: LD_VAR 0 6
9852: ST_TO_ADDR
// vc_control = vehcontrol ;
9853: LD_ADDR_OWVAR 38
9857: PUSH
9858: LD_VAR 0 7
9862: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9863: LD_ADDR_OWVAR 40
9867: PUSH
9868: LD_VAR 0 9
9872: PUSH
9873: LD_INT 1
9875: PPUSH
9876: LD_VAR 0 9
9880: PPUSH
9881: CALL_OW 12
9885: ARRAY
9886: ST_TO_ADDR
// for j = 1 to ARWeapons do
9887: LD_ADDR_VAR 0 14
9891: PUSH
9892: DOUBLE
9893: LD_INT 1
9895: DEC
9896: ST_TO_ADDR
9897: LD_VAR 0 9
9901: PUSH
9902: FOR_TO
9903: IFFALSE 10137
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9905: LD_VAR 0 9
9909: PUSH
9910: LD_VAR 0 14
9914: ARRAY
9915: PUSH
9916: LD_INT 24
9918: EQUAL
9919: PUSH
9920: LD_VAR 0 9
9924: PUSH
9925: LD_VAR 0 14
9929: ARRAY
9930: PUSH
9931: LD_INT 22
9933: EQUAL
9934: OR
9935: PUSH
9936: LD_VAR 0 9
9940: PUSH
9941: LD_VAR 0 14
9945: ARRAY
9946: PUSH
9947: LD_INT 23
9949: EQUAL
9950: OR
9951: PUSH
9952: LD_VAR 0 9
9956: PUSH
9957: LD_VAR 0 14
9961: ARRAY
9962: PUSH
9963: LD_INT 30
9965: EQUAL
9966: OR
9967: IFFALSE 10016
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9969: LD_ADDR_VAR 0 18
9973: PUSH
9974: LD_INT 11
9976: PUSH
9977: LD_INT 12
9979: PUSH
9980: LD_INT 13
9982: PUSH
9983: LD_INT 14
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9992: LD_ADDR_OWVAR 37
9996: PUSH
9997: LD_VAR 0 18
10001: PUSH
10002: LD_INT 1
10004: PPUSH
10005: LD_VAR 0 18
10009: PPUSH
10010: CALL_OW 12
10014: ARRAY
10015: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10016: LD_VAR 0 9
10020: PUSH
10021: LD_VAR 0 14
10025: ARRAY
10026: PUSH
10027: LD_INT 29
10029: EQUAL
10030: PUSH
10031: LD_VAR 0 9
10035: PUSH
10036: LD_VAR 0 14
10040: ARRAY
10041: PUSH
10042: LD_INT 28
10044: EQUAL
10045: OR
10046: PUSH
10047: LD_VAR 0 9
10051: PUSH
10052: LD_VAR 0 14
10056: ARRAY
10057: PUSH
10058: LD_INT 27
10060: EQUAL
10061: OR
10062: PUSH
10063: LD_VAR 0 9
10067: PUSH
10068: LD_VAR 0 14
10072: ARRAY
10073: PUSH
10074: LD_INT 26
10076: EQUAL
10077: OR
10078: PUSH
10079: LD_VAR 0 9
10083: PUSH
10084: LD_VAR 0 14
10088: ARRAY
10089: PUSH
10090: LD_INT 25
10092: EQUAL
10093: OR
10094: IFFALSE 10135
// begin arChassisTab = [ 13 , 14 ] ;
10096: LD_ADDR_VAR 0 18
10100: PUSH
10101: LD_INT 13
10103: PUSH
10104: LD_INT 14
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10111: LD_ADDR_OWVAR 37
10115: PUSH
10116: LD_VAR 0 18
10120: PUSH
10121: LD_INT 1
10123: PPUSH
10124: LD_VAR 0 18
10128: PPUSH
10129: CALL_OW 12
10133: ARRAY
10134: ST_TO_ADDR
// end ; end ;
10135: GO 9902
10137: POP
10138: POP
// veh = CreateVehicle ;
10139: LD_ADDR_VAR 0 16
10143: PUSH
10144: CALL_OW 45
10148: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10149: LD_VAR 0 16
10153: PPUSH
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 0
10161: PPUSH
10162: CALL_OW 49
// if vehcontrol = 1 then
10166: LD_VAR 0 7
10170: PUSH
10171: LD_INT 1
10173: EQUAL
10174: IFFALSE 10231
// begin hc_gallery =  ;
10176: LD_ADDR_OWVAR 33
10180: PUSH
10181: LD_STRING 
10183: ST_TO_ADDR
// hc_name =  ;
10184: LD_ADDR_OWVAR 26
10188: PUSH
10189: LD_STRING 
10191: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10192: LD_INT 0
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: LD_VAR 0 4
10202: PPUSH
10203: CALL_OW 380
// un = CreateHuman ;
10207: LD_ADDR_VAR 0 15
10211: PUSH
10212: CALL_OW 44
10216: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10217: LD_VAR 0 15
10221: PPUSH
10222: LD_VAR 0 16
10226: PPUSH
10227: CALL_OW 52
// end ; i = i + 1 ;
10231: LD_ADDR_VAR 0 13
10235: PUSH
10236: LD_VAR 0 13
10240: PUSH
10241: LD_INT 1
10243: PLUS
10244: ST_TO_ADDR
// end ; if nation = 3 then
10245: LD_VAR 0 5
10249: PUSH
10250: LD_INT 3
10252: EQUAL
10253: IFFALSE 10645
// begin uc_side = side ;
10255: LD_ADDR_OWVAR 20
10259: PUSH
10260: LD_VAR 0 2
10264: ST_TO_ADDR
// uc_nation = nation ;
10265: LD_ADDR_OWVAR 21
10269: PUSH
10270: LD_VAR 0 5
10274: ST_TO_ADDR
// vc_engine = vehengine ;
10275: LD_ADDR_OWVAR 39
10279: PUSH
10280: LD_VAR 0 6
10284: ST_TO_ADDR
// vc_control = vehcontrol ;
10285: LD_ADDR_OWVAR 38
10289: PUSH
10290: LD_VAR 0 7
10294: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10295: LD_ADDR_OWVAR 40
10299: PUSH
10300: LD_VAR 0 8
10304: PUSH
10305: LD_INT 1
10307: PPUSH
10308: LD_VAR 0 8
10312: PPUSH
10313: CALL_OW 12
10317: ARRAY
10318: ST_TO_ADDR
// for j = 1 to RuWeapons do
10319: LD_ADDR_VAR 0 14
10323: PUSH
10324: DOUBLE
10325: LD_INT 1
10327: DEC
10328: ST_TO_ADDR
10329: LD_VAR 0 8
10333: PUSH
10334: FOR_TO
10335: IFFALSE 10537
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10337: LD_VAR 0 8
10341: PUSH
10342: LD_VAR 0 14
10346: ARRAY
10347: PUSH
10348: LD_INT 42
10350: EQUAL
10351: PUSH
10352: LD_VAR 0 8
10356: PUSH
10357: LD_VAR 0 14
10361: ARRAY
10362: PUSH
10363: LD_INT 43
10365: EQUAL
10366: OR
10367: PUSH
10368: LD_VAR 0 8
10372: PUSH
10373: LD_VAR 0 14
10377: ARRAY
10378: PUSH
10379: LD_INT 44
10381: EQUAL
10382: OR
10383: PUSH
10384: LD_VAR 0 8
10388: PUSH
10389: LD_VAR 0 14
10393: ARRAY
10394: PUSH
10395: LD_INT 45
10397: EQUAL
10398: OR
10399: PUSH
10400: LD_VAR 0 8
10404: PUSH
10405: LD_VAR 0 14
10409: ARRAY
10410: PUSH
10411: LD_INT 49
10413: EQUAL
10414: OR
10415: IFFALSE 10464
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10417: LD_ADDR_VAR 0 17
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 22
10427: PUSH
10428: LD_INT 23
10430: PUSH
10431: LD_INT 24
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10440: LD_ADDR_OWVAR 37
10444: PUSH
10445: LD_VAR 0 17
10449: PUSH
10450: LD_INT 1
10452: PPUSH
10453: LD_VAR 0 17
10457: PPUSH
10458: CALL_OW 12
10462: ARRAY
10463: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10464: LD_VAR 0 8
10468: PUSH
10469: LD_VAR 0 14
10473: ARRAY
10474: PUSH
10475: LD_INT 46
10477: EQUAL
10478: PUSH
10479: LD_VAR 0 8
10483: PUSH
10484: LD_VAR 0 14
10488: ARRAY
10489: PUSH
10490: LD_INT 47
10492: EQUAL
10493: OR
10494: IFFALSE 10535
// begin ruChassisTab = [ 23 , 24 ] ;
10496: LD_ADDR_VAR 0 17
10500: PUSH
10501: LD_INT 23
10503: PUSH
10504: LD_INT 24
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10511: LD_ADDR_OWVAR 37
10515: PUSH
10516: LD_VAR 0 17
10520: PUSH
10521: LD_INT 1
10523: PPUSH
10524: LD_VAR 0 17
10528: PPUSH
10529: CALL_OW 12
10533: ARRAY
10534: ST_TO_ADDR
// end ; end ;
10535: GO 10334
10537: POP
10538: POP
// veh = CreateVehicle ;
10539: LD_ADDR_VAR 0 16
10543: PUSH
10544: CALL_OW 45
10548: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10549: LD_VAR 0 16
10553: PPUSH
10554: LD_VAR 0 1
10558: PPUSH
10559: LD_INT 0
10561: PPUSH
10562: CALL_OW 49
// if vehcontrol = 1 then
10566: LD_VAR 0 7
10570: PUSH
10571: LD_INT 1
10573: EQUAL
10574: IFFALSE 10631
// begin hc_gallery =  ;
10576: LD_ADDR_OWVAR 33
10580: PUSH
10581: LD_STRING 
10583: ST_TO_ADDR
// hc_name =  ;
10584: LD_ADDR_OWVAR 26
10588: PUSH
10589: LD_STRING 
10591: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10592: LD_INT 0
10594: PPUSH
10595: LD_INT 3
10597: PPUSH
10598: LD_VAR 0 4
10602: PPUSH
10603: CALL_OW 380
// un = CreateHuman ;
10607: LD_ADDR_VAR 0 15
10611: PUSH
10612: CALL_OW 44
10616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10617: LD_VAR 0 15
10621: PPUSH
10622: LD_VAR 0 16
10626: PPUSH
10627: CALL_OW 52
// end ; i = i + 1 ;
10631: LD_ADDR_VAR 0 13
10635: PUSH
10636: LD_VAR 0 13
10640: PUSH
10641: LD_INT 1
10643: PLUS
10644: ST_TO_ADDR
// end ; until i = vehCount ;
10645: LD_VAR 0 13
10649: PUSH
10650: LD_VAR 0 3
10654: EQUAL
10655: IFFALSE 9307
// repeat wait ( 0 0$1 ) ;
10657: LD_INT 35
10659: PPUSH
10660: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10664: LD_ADDR_VAR 0 20
10668: PUSH
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 2
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 21
10683: PUSH
10684: LD_INT 2
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 24
10693: PUSH
10694: LD_INT 661
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 69
10710: ST_TO_ADDR
// if vehicleOK_list > 0 then
10711: LD_VAR 0 20
10715: PUSH
10716: LD_INT 0
10718: GREATER
10719: IFFALSE 10910
// begin for i in vehicleOK_list do
10721: LD_ADDR_VAR 0 13
10725: PUSH
10726: LD_VAR 0 20
10730: PUSH
10731: FOR_IN
10732: IFFALSE 10908
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10734: LD_ADDR_VAR 0 21
10738: PUSH
10739: LD_INT 22
10741: PUSH
10742: LD_VAR 0 11
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 69
10755: PPUSH
10756: LD_VAR 0 13
10760: PPUSH
10761: CALL_OW 74
10765: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10766: LD_ADDR_VAR 0 22
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_VAR 0 11
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 59
10788: PUSH
10789: EMPTY
10790: LIST
10791: PUSH
10792: LD_INT 21
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 21
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: PPUSH
10825: CALL_OW 69
10829: PPUSH
10830: LD_VAR 0 13
10834: PPUSH
10835: CALL_OW 74
10839: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10840: LD_VAR 0 13
10844: PPUSH
10845: LD_VAR 0 21
10849: PPUSH
10850: CALL_OW 296
10854: PUSH
10855: LD_INT 8
10857: PLUS
10858: PUSH
10859: LD_VAR 0 13
10863: PPUSH
10864: LD_VAR 0 22
10868: PPUSH
10869: CALL_OW 296
10873: LESS
10874: IFFALSE 10892
// begin ComAttackUnit ( i , target1 ) ;
10876: LD_VAR 0 13
10880: PPUSH
10881: LD_VAR 0 21
10885: PPUSH
10886: CALL_OW 115
// end else
10890: GO 10906
// begin ComAttackUnit ( i , target2 ) ;
10892: LD_VAR 0 13
10896: PPUSH
10897: LD_VAR 0 22
10901: PPUSH
10902: CALL_OW 115
// end ; end ;
10906: GO 10731
10908: POP
10909: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10910: LD_INT 22
10912: PUSH
10913: LD_VAR 0 2
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 69
10940: PUSH
10941: LD_INT 0
10943: EQUAL
10944: IFFALSE 10657
// end ; end_of_file
10946: LD_VAR 0 12
10950: RET
// every 1 do var i , gammaSquad , startX , startY ;
10951: GO 10953
10953: DISABLE
10954: LD_INT 0
10956: PPUSH
10957: PPUSH
10958: PPUSH
10959: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10960: LD_ADDR_VAR 0 2
10964: PUSH
10965: LD_EXP 8
10969: PUSH
10970: LD_EXP 9
10974: PUSH
10975: LD_EXP 10
10979: PUSH
10980: LD_EXP 11
10984: PUSH
10985: LD_EXP 12
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10997: LD_ADDR_VAR 0 3
11001: PUSH
11002: LD_INT 46
11004: PUSH
11005: LD_INT 45
11007: PUSH
11008: LD_INT 44
11010: PUSH
11011: LD_INT 43
11013: PUSH
11014: LD_INT 42
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11024: LD_ADDR_VAR 0 4
11028: PUSH
11029: LD_INT 14
11031: PUSH
11032: LD_INT 12
11034: PUSH
11035: LD_INT 10
11037: PUSH
11038: LD_INT 8
11040: PUSH
11041: LD_INT 6
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11051: LD_INT 32
11053: PPUSH
11054: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11058: LD_INT 32
11060: PPUSH
11061: LD_INT 51
11063: PPUSH
11064: LD_INT 26
11066: PPUSH
11067: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11071: LD_INT 32
11073: PPUSH
11074: LD_INT 53
11076: PPUSH
11077: LD_INT 23
11079: PPUSH
11080: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11084: LD_INT 32
11086: PPUSH
11087: LD_INT 52
11089: PPUSH
11090: LD_INT 19
11092: PPUSH
11093: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11097: LD_INT 35
11099: PPUSH
11100: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11104: LD_INT 32
11106: PPUSH
11107: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11111: LD_INT 32
11113: PPUSH
11114: CALL_OW 250
11118: PUSH
11119: LD_INT 52
11121: EQUAL
11122: PUSH
11123: LD_INT 32
11125: PPUSH
11126: CALL_OW 251
11130: PUSH
11131: LD_INT 19
11133: EQUAL
11134: AND
11135: IFFALSE 11097
// ComExitVehicle ( JMM ) ;
11137: LD_EXP 1
11141: PPUSH
11142: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11146: LD_EXP 7
11150: PPUSH
11151: LD_EXP 1
11155: PPUSH
11156: CALL_OW 119
// wait ( 0 0$01 ) ;
11160: LD_INT 35
11162: PPUSH
11163: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11167: LD_EXP 1
11171: PPUSH
11172: LD_INT 46
11174: PPUSH
11175: LD_INT 10
11177: PPUSH
11178: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11182: LD_EXP 1
11186: PPUSH
11187: LD_EXP 7
11191: PPUSH
11192: CALL_OW 179
// wait ( 0 0$4 ) ;
11196: LD_INT 140
11198: PPUSH
11199: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11203: LD_EXP 1
11207: PPUSH
11208: LD_STRING D1-JMM-1
11210: PPUSH
11211: CALL_OW 88
// if not dialogue_skipped then
11215: LD_OWVAR 59
11219: NOT
11220: IFFALSE 11877
// begin for i := 1 to gammaSquad do
11222: LD_ADDR_VAR 0 1
11226: PUSH
11227: DOUBLE
11228: LD_INT 1
11230: DEC
11231: ST_TO_ADDR
11232: LD_VAR 0 2
11236: PUSH
11237: FOR_TO
11238: IFFALSE 11299
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11240: LD_VAR 0 2
11244: PUSH
11245: LD_VAR 0 1
11249: ARRAY
11250: PPUSH
11251: LD_VAR 0 3
11255: PUSH
11256: LD_VAR 0 1
11260: ARRAY
11261: PPUSH
11262: LD_VAR 0 4
11266: PUSH
11267: LD_VAR 0 1
11271: ARRAY
11272: PPUSH
11273: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11277: LD_VAR 0 2
11281: PUSH
11282: LD_VAR 0 1
11286: ARRAY
11287: PPUSH
11288: LD_EXP 1
11292: PPUSH
11293: CALL_OW 179
// end ;
11297: GO 11237
11299: POP
11300: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11301: LD_EXP 4
11305: PPUSH
11306: LD_INT 41
11308: PPUSH
11309: LD_INT 4
11311: PPUSH
11312: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11316: LD_EXP 4
11320: PPUSH
11321: LD_EXP 1
11325: PPUSH
11326: CALL_OW 179
// if Lisa = false and Bobby then
11330: LD_EXP 4
11334: PUSH
11335: LD_INT 0
11337: EQUAL
11338: PUSH
11339: LD_EXP 2
11343: AND
11344: IFFALSE 11375
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11346: LD_EXP 2
11350: PPUSH
11351: LD_INT 41
11353: PPUSH
11354: LD_INT 4
11356: PPUSH
11357: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11361: LD_EXP 2
11365: PPUSH
11366: LD_EXP 1
11370: PPUSH
11371: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11375: LD_EXP 4
11379: PUSH
11380: LD_INT 0
11382: EQUAL
11383: PUSH
11384: LD_EXP 2
11388: PUSH
11389: LD_INT 0
11391: EQUAL
11392: AND
11393: PUSH
11394: LD_EXP 3
11398: AND
11399: IFFALSE 11430
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11401: LD_EXP 3
11405: PPUSH
11406: LD_INT 41
11408: PPUSH
11409: LD_INT 4
11411: PPUSH
11412: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11416: LD_EXP 3
11420: PPUSH
11421: LD_EXP 1
11425: PPUSH
11426: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11430: LD_EXP 4
11434: PUSH
11435: LD_INT 0
11437: EQUAL
11438: PUSH
11439: LD_EXP 2
11443: PUSH
11444: LD_INT 0
11446: EQUAL
11447: AND
11448: PUSH
11449: LD_EXP 3
11453: PUSH
11454: LD_INT 0
11456: EQUAL
11457: AND
11458: IFFALSE 11489
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11460: LD_EXP 6
11464: PPUSH
11465: LD_INT 41
11467: PPUSH
11468: LD_INT 4
11470: PPUSH
11471: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11475: LD_EXP 6
11479: PPUSH
11480: LD_EXP 1
11484: PPUSH
11485: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11489: LD_EXP 7
11493: PPUSH
11494: LD_STRING D1-Brown-1
11496: PPUSH
11497: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11501: LD_EXP 1
11505: PPUSH
11506: LD_STRING D1-JMM-2
11508: PPUSH
11509: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11513: LD_EXP 7
11517: PPUSH
11518: LD_STRING D1-Brown-2
11520: PPUSH
11521: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11525: LD_EXP 1
11529: PPUSH
11530: LD_EXP 9
11534: PPUSH
11535: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11539: LD_EXP 9
11543: PPUSH
11544: LD_STRING D1-FSol1-2
11546: PPUSH
11547: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11551: LD_EXP 1
11555: PPUSH
11556: LD_EXP 8
11560: PPUSH
11561: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11565: LD_EXP 8
11569: PPUSH
11570: LD_STRING D1-Sol2-2
11572: PPUSH
11573: CALL_OW 88
// if Lisa then
11577: LD_EXP 4
11581: IFFALSE 11621
// begin ComTurnUnit ( JMM , Lisa ) ;
11583: LD_EXP 1
11587: PPUSH
11588: LD_EXP 4
11592: PPUSH
11593: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11597: LD_EXP 4
11601: PPUSH
11602: LD_STRING D1-Lisa-2
11604: PPUSH
11605: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11609: LD_EXP 1
11613: PPUSH
11614: LD_STRING D1-JMM-3
11616: PPUSH
11617: CALL_OW 88
// end ; if Bobby then
11621: LD_EXP 2
11625: IFFALSE 11665
// begin ComTurnUnit ( JMM , Bobby ) ;
11627: LD_EXP 1
11631: PPUSH
11632: LD_EXP 2
11636: PPUSH
11637: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11641: LD_EXP 2
11645: PPUSH
11646: LD_STRING D1-Bobby-2
11648: PPUSH
11649: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11653: LD_EXP 1
11657: PPUSH
11658: LD_STRING D1-JMM-3
11660: PPUSH
11661: CALL_OW 88
// end ; if Cyrus then
11665: LD_EXP 3
11669: IFFALSE 11709
// begin ComTurnUnit ( JMM , Cyrus ) ;
11671: LD_EXP 1
11675: PPUSH
11676: LD_EXP 3
11680: PPUSH
11681: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11685: LD_EXP 3
11689: PPUSH
11690: LD_STRING D1-Cyrus-2
11692: PPUSH
11693: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11697: LD_EXP 1
11701: PPUSH
11702: LD_STRING D1-JMM-3
11704: PPUSH
11705: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11709: LD_EXP 1
11713: PPUSH
11714: LD_EXP 7
11718: PPUSH
11719: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11723: LD_EXP 1
11727: PPUSH
11728: LD_STRING D1-JMM-3a
11730: PPUSH
11731: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11735: LD_EXP 7
11739: PPUSH
11740: LD_INT 38
11742: PPUSH
11743: LD_INT 5
11745: PPUSH
11746: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11750: LD_EXP 7
11754: PPUSH
11755: LD_EXP 1
11759: PPUSH
11760: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11764: LD_EXP 1
11768: PPUSH
11769: LD_INT 40
11771: PPUSH
11772: LD_INT 7
11774: PPUSH
11775: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11779: LD_EXP 1
11783: PPUSH
11784: LD_EXP 7
11788: PPUSH
11789: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11793: LD_EXP 7
11797: PPUSH
11798: LD_STRING D1-Brown-3
11800: PPUSH
11801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11805: LD_EXP 14
11809: PPUSH
11810: LD_STRING D1-Har-3
11812: PPUSH
11813: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11817: LD_EXP 1
11821: PPUSH
11822: LD_STRING D1-JMM-4
11824: PPUSH
11825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11829: LD_EXP 14
11833: PPUSH
11834: LD_STRING D1-Har-4
11836: PPUSH
11837: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11841: LD_EXP 1
11845: PPUSH
11846: LD_STRING D1-JMM-5
11848: PPUSH
11849: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11853: LD_EXP 14
11857: PPUSH
11858: LD_STRING D1-Har-5
11860: PPUSH
11861: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11865: LD_EXP 1
11869: PPUSH
11870: LD_STRING D1-JMM-6
11872: PPUSH
11873: CALL_OW 88
// end ; InGameOff ;
11877: CALL_OW 9
// PrepareRussianConvoy ;
11881: CALL 2792 0 0
// ChangeMissionObjectives ( M1 ) ;
11885: LD_STRING M1
11887: PPUSH
11888: CALL_OW 337
// SaveForQuickRestart ;
11892: CALL_OW 22
// timerStatus = 1 ;
11896: LD_ADDR_EXP 27
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// startTimer = 1 ;
11904: LD_ADDR_EXP 28
11908: PUSH
11909: LD_INT 1
11911: ST_TO_ADDR
// bonusAvalaible = 1 ;
11912: LD_ADDR_EXP 40
11916: PUSH
11917: LD_INT 1
11919: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11920: LD_INT 105
11922: PPUSH
11923: CALL_OW 67
// DialogueOn ;
11927: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11931: LD_EXP 12
11935: PPUSH
11936: LD_STRING D9-Mech1-1
11938: PPUSH
11939: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11943: LD_EXP 1
11947: PPUSH
11948: LD_STRING D9-JMM-1
11950: PPUSH
11951: CALL_OW 88
// DialogueOff ;
11955: CALL_OW 7
// end ;
11959: PPOPN 4
11961: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11962: LD_INT 47
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 321
11972: PUSH
11973: LD_INT 2
11975: EQUAL
11976: PUSH
11977: LD_INT 22
11979: PUSH
11980: LD_INT 1
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 21
11989: PUSH
11990: LD_INT 3
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 30
11999: PUSH
12000: LD_INT 3
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: PPUSH
12012: CALL_OW 69
12016: PUSH
12017: LD_INT 0
12019: GREATER
12020: AND
12021: IFFALSE 12251
12023: GO 12025
12025: DISABLE
// begin if IsOk ( Campell ) then
12026: LD_EXP 12
12030: PPUSH
12031: CALL_OW 302
12035: IFFALSE 12051
// begin Say ( Campell , D10-Mech1-1 ) ;
12037: LD_EXP 12
12041: PPUSH
12042: LD_STRING D10-Mech1-1
12044: PPUSH
12045: CALL_OW 88
// end else
12049: GO 12251
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12051: LD_INT 22
12053: PUSH
12054: LD_INT 1
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 21
12063: PUSH
12064: LD_INT 1
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 25
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 26
12083: PUSH
12084: LD_INT 1
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: PUSH
12102: LD_EXP 1
12106: PUSH
12107: EMPTY
12108: LIST
12109: PUSH
12110: LD_INT 0
12112: GREATER
12113: DIFF
12114: IFFALSE 12188
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12116: LD_INT 22
12118: PUSH
12119: LD_INT 1
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 25
12138: PUSH
12139: LD_INT 3
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 26
12148: PUSH
12149: LD_INT 1
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: PPUSH
12162: CALL_OW 69
12166: PUSH
12167: LD_EXP 1
12171: PUSH
12172: EMPTY
12173: LIST
12174: DIFF
12175: PPUSH
12176: LD_STRING D10-Mech1-1
12178: PPUSH
12179: LD_STRING D10-Mech1-1
12181: PPUSH
12182: CALL 4028 0 3
// end else
12186: GO 12251
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12188: LD_INT 22
12190: PUSH
12191: LD_INT 1
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 21
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 26
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 1
12225: ARRAY
12226: PPUSH
12227: CALL_OW 69
12231: PUSH
12232: LD_EXP 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: DIFF
12240: PPUSH
12241: LD_STRING D10-Mech1-1
12243: PPUSH
12244: LD_STRING D10-Mech1-1
12246: PPUSH
12247: CALL 4028 0 3
// end ; end ; end ;
12251: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 30
12264: PUSH
12265: LD_INT 32
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PPUSH
12276: CALL_OW 69
12280: PUSH
12281: LD_INT 0
12283: GREATER
12284: PUSH
12285: LD_EXP 30
12289: PUSH
12290: LD_INT 0
12292: EQUAL
12293: AND
12294: IFFALSE 12534
12296: GO 12298
12298: DISABLE
// begin if IsOK ( Claptopn ) then
12299: LD_EXP 11
12303: PPUSH
12304: CALL_OW 302
12308: IFFALSE 12324
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12310: LD_EXP 11
12314: PPUSH
12315: LD_STRING D9b-Eng1-1
12317: PPUSH
12318: CALL_OW 88
// end else
12322: GO 12520
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12324: LD_INT 22
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 21
12336: PUSH
12337: LD_INT 1
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 25
12346: PUSH
12347: LD_INT 3
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 26
12356: PUSH
12357: LD_INT 1
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 69
12374: PUSH
12375: LD_EXP 1
12379: PUSH
12380: EMPTY
12381: LIST
12382: PUSH
12383: LD_INT 0
12385: GREATER
12386: DIFF
12387: IFFALSE 12461
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12389: LD_INT 22
12391: PUSH
12392: LD_INT 1
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 21
12401: PUSH
12402: LD_INT 1
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 25
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 26
12421: PUSH
12422: LD_INT 1
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: PPUSH
12435: CALL_OW 69
12439: PUSH
12440: LD_EXP 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: DIFF
12448: PPUSH
12449: LD_STRING D9b-Eng1-1
12451: PPUSH
12452: LD_STRING D9b-Eng1-11
12454: PPUSH
12455: CALL 4028 0 3
// end else
12459: GO 12520
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12461: LD_INT 22
12463: PUSH
12464: LD_INT 1
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 21
12473: PUSH
12474: LD_INT 1
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 26
12483: PUSH
12484: LD_INT 1
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 69
12500: PUSH
12501: LD_EXP 1
12505: PUSH
12506: EMPTY
12507: LIST
12508: DIFF
12509: PPUSH
12510: LD_STRING D9b-Eng1-1
12512: PPUSH
12513: LD_STRING D9b-Eng1-1
12515: PPUSH
12516: CALL 4028 0 3
// end ; end ; if energyVDialog = 0 then
12520: LD_EXP 31
12524: PUSH
12525: LD_INT 0
12527: EQUAL
12528: IFFALSE 12534
// EnergyDialog ;
12530: CALL 4340 0 0
// end ;
12534: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12535: LD_EXP 32
12539: PUSH
12540: LD_INT 1
12542: EQUAL
12543: PUSH
12544: LD_EXP 33
12548: PUSH
12549: LD_INT 1
12551: EQUAL
12552: AND
12553: IFFALSE 12565
12555: GO 12557
12557: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12558: LD_STRING M1a
12560: PPUSH
12561: CALL_OW 337
12565: END
// every 3 3$0 do
12566: GO 12568
12568: DISABLE
// begin PrepareFirstAttack ;
12569: CALL 3584 0 0
// end ;
12573: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
12574: LD_INT 22
12576: PUSH
12577: LD_INT 5
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 21
12586: PUSH
12587: LD_INT 1
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PPUSH
12598: CALL_OW 69
12602: PUSH
12603: LD_INT 3
12605: LESSEQUAL
12606: PUSH
12607: LD_EXP 21
12611: PUSH
12612: LD_INT 1
12614: EQUAL
12615: AND
12616: IFFALSE 12934
12618: GO 12620
12620: DISABLE
12621: LD_INT 0
12623: PPUSH
// begin firstRussianAttack = 2 ;
12624: LD_ADDR_EXP 21
12628: PUSH
12629: LD_INT 2
12631: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12632: LD_ADDR_VAR 0 1
12636: PUSH
12637: LD_INT 22
12639: PUSH
12640: LD_INT 5
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 21
12649: PUSH
12650: LD_INT 1
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 69
12665: PUSH
12666: FOR_IN
12667: IFFALSE 12686
// ComMoveXY ( i , 125 , 98 ) ;
12669: LD_VAR 0 1
12673: PPUSH
12674: LD_INT 125
12676: PPUSH
12677: LD_INT 98
12679: PPUSH
12680: CALL_OW 111
12684: GO 12666
12686: POP
12687: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12688: LD_INT 22
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 21
12700: PUSH
12701: LD_INT 1
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PPUSH
12712: CALL_OW 69
12716: PUSH
12717: LD_EXP 1
12721: PUSH
12722: LD_EXP 7
12726: PUSH
12727: LD_EXP 4
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: DIFF
12737: PPUSH
12738: LD_STRING DAtt1-Sol1-1
12740: PPUSH
12741: LD_STRING DAtt1-FSol1-1
12743: PPUSH
12744: CALL 4028 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12748: LD_EXP 1
12752: PPUSH
12753: LD_STRING DAtt1-JMM-1
12755: PPUSH
12756: CALL_OW 88
// if Lisa then
12760: LD_EXP 4
12764: IFFALSE 12780
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12766: LD_EXP 4
12770: PPUSH
12771: LD_STRING DAtt1a-Lisa-1
12773: PPUSH
12774: CALL_OW 88
// end else
12778: GO 12851
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12780: LD_INT 22
12782: PUSH
12783: LD_INT 1
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 21
12792: PUSH
12793: LD_INT 1
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 26
12802: PUSH
12803: LD_INT 1
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: PPUSH
12815: CALL_OW 69
12819: PUSH
12820: LD_EXP 1
12824: PUSH
12825: LD_EXP 7
12829: PUSH
12830: LD_EXP 4
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: DIFF
12840: PPUSH
12841: LD_STRING DAtt1a-Sol1-1
12843: PPUSH
12844: LD_STRING DAtt1-FSol1-1
12846: PPUSH
12847: CALL 4028 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12851: LD_EXP 1
12855: PPUSH
12856: LD_STRING DAtt1a-JMM-1
12858: PPUSH
12859: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12863: LD_INT 22
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 21
12875: PUSH
12876: LD_INT 1
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 26
12885: PUSH
12886: LD_INT 1
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 69
12902: PUSH
12903: LD_EXP 1
12907: PUSH
12908: LD_EXP 7
12912: PUSH
12913: LD_EXP 4
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: DIFF
12923: PPUSH
12924: LD_STRING DAtt1b-Sol1-1
12926: PPUSH
12927: LD_STRING DAtt1a-Sol1-1
12929: PPUSH
12930: CALL 4028 0 3
// end ;
12934: PPOPN 1
12936: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12937: LD_EXP 21
12941: PUSH
12942: LD_INT 2
12944: EQUAL
12945: IFFALSE 13007
12947: GO 12949
12949: DISABLE
12950: LD_INT 0
12952: PPUSH
// begin enable ;
12953: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12954: LD_ADDR_VAR 0 1
12958: PUSH
12959: LD_INT 5
12961: PPUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 5
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 21
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 70
12990: PUSH
12991: FOR_IN
12992: IFFALSE 13005
// RemoveUnit ( i ) ;
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 64
13003: GO 12991
13005: POP
13006: POP
// end ;
13007: PPOPN 1
13009: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13010: LD_INT 22
13012: PUSH
13013: LD_INT 5
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: PPUSH
13023: CALL_OW 69
13027: PUSH
13028: LD_INT 0
13030: EQUAL
13031: PUSH
13032: LD_EXP 21
13036: PUSH
13037: LD_INT 2
13039: EQUAL
13040: AND
13041: IFFALSE 13054
13043: GO 13045
13045: DISABLE
// firstRussianAttack = 3 ;
13046: LD_ADDR_EXP 21
13050: PUSH
13051: LD_INT 3
13053: ST_TO_ADDR
13054: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13055: LD_EXP 26
13059: PUSH
13060: LD_INT 0
13062: EQUAL
13063: IFFALSE 13144
13065: GO 13067
13067: DISABLE
// begin timerStatus = 4 ;
13068: LD_ADDR_EXP 27
13072: PUSH
13073: LD_INT 4
13075: ST_TO_ADDR
// DialogueOn ;
13076: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13080: LD_EXP 13
13084: PPUSH
13085: LD_STRING D2-Don-1
13087: PPUSH
13088: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13092: LD_EXP 1
13096: PPUSH
13097: LD_STRING D2-JMM-1
13099: PPUSH
13100: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13104: LD_EXP 13
13108: PPUSH
13109: LD_STRING D2-Don-2
13111: PPUSH
13112: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13116: LD_EXP 1
13120: PPUSH
13121: LD_STRING D2-JMM-2
13123: PPUSH
13124: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13128: LD_EXP 13
13132: PPUSH
13133: LD_STRING D2-Don-3
13135: PPUSH
13136: CALL_OW 94
// DialogueOff ;
13140: CALL_OW 7
// end ;
13144: END
// every 12 12$0 do var tmp ;
13145: GO 13147
13147: DISABLE
13148: LD_INT 0
13150: PPUSH
// begin PrepareDonaldsonArmy ;
13151: CALL 985 0 0
// CenterNowOnUnits ( Donaldson ) ;
13155: LD_EXP 13
13159: PPUSH
13160: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: LD_INT 22
13171: PUSH
13172: LD_INT 4
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 21
13181: PUSH
13182: LD_INT 1
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 26
13191: PUSH
13192: LD_INT 1
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 25
13201: PUSH
13202: LD_INT 1
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: PPUSH
13215: CALL_OW 69
13219: PUSH
13220: LD_EXP 5
13224: PUSH
13225: EMPTY
13226: LIST
13227: DIFF
13228: ST_TO_ADDR
// DialogueOn ;
13229: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13233: LD_VAR 0 1
13237: PPUSH
13238: LD_STRING D3-Sol1-1
13240: PPUSH
13241: LD_STRING D3-Sol1-1
13243: PPUSH
13244: CALL 4028 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13248: LD_INT 22
13250: PUSH
13251: LD_INT 4
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 21
13260: PUSH
13261: LD_INT 1
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 26
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 25
13280: PUSH
13281: LD_INT 3
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: PPUSH
13299: LD_STRING D3-Sol2-1
13301: PPUSH
13302: LD_STRING D3-Sol2-1
13304: PPUSH
13305: CALL 4028 0 3
// if Frank then
13309: LD_EXP 5
13313: IFFALSE 13327
// Say ( Frank , D3-Frank-1 ) ;
13315: LD_EXP 5
13319: PPUSH
13320: LD_STRING D3-Frank-1
13322: PPUSH
13323: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13327: LD_EXP 13
13331: PPUSH
13332: LD_STRING D3-Don-1
13334: PPUSH
13335: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13339: LD_EXP 13
13343: PPUSH
13344: LD_STRING D3-Don-1a
13346: PPUSH
13347: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13351: LD_EXP 1
13355: PPUSH
13356: LD_STRING D3-JMM-1
13358: PPUSH
13359: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13363: LD_EXP 13
13367: PPUSH
13368: LD_STRING D3-Don-2
13370: PPUSH
13371: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13375: LD_INT 22
13377: PUSH
13378: LD_INT 6
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: PUSH
13404: LD_INT 0
13406: GREATER
13407: IFFALSE 13521
// begin Say ( JMM , D3-JMM-2 ) ;
13409: LD_EXP 1
13413: PPUSH
13414: LD_STRING D3-JMM-2
13416: PPUSH
13417: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13421: LD_EXP 13
13425: PPUSH
13426: LD_STRING D3-Don-3
13428: PPUSH
13429: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13433: LD_EXP 1
13437: PPUSH
13438: LD_STRING D3-JMM-3
13440: PPUSH
13441: CALL_OW 88
// if IsOK ( Frank ) then
13445: LD_EXP 5
13449: PPUSH
13450: CALL_OW 302
13454: IFFALSE 13468
// Say ( Frank , D3-Frank-3 ) ;
13456: LD_EXP 5
13460: PPUSH
13461: LD_STRING D3-Frank-3
13463: PPUSH
13464: CALL_OW 88
// DialogueOff ;
13468: CALL_OW 7
// if IsOK ( Frank ) then
13472: LD_EXP 5
13476: PPUSH
13477: CALL_OW 302
13481: IFFALSE 13519
// begin SetSide ( Frank , 0 ) ;
13483: LD_EXP 5
13487: PPUSH
13488: LD_INT 0
13490: PPUSH
13491: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13495: LD_EXP 5
13499: PPUSH
13500: LD_INT 12
13502: PPUSH
13503: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13507: LD_EXP 5
13511: PPUSH
13512: LD_STRING Frank
13514: PPUSH
13515: CALL_OW 38
// end ; end else
13519: GO 13584
// begin Say ( JMM , D3-JMM-4 ) ;
13521: LD_EXP 1
13525: PPUSH
13526: LD_STRING D3-JMM-4
13528: PPUSH
13529: CALL_OW 88
// DialogueOff ;
13533: CALL_OW 7
// if IsOK ( Frank ) then
13537: LD_EXP 5
13541: PPUSH
13542: CALL_OW 302
13546: IFFALSE 13584
// begin SetSide ( Frank , 0 ) ;
13548: LD_EXP 5
13552: PPUSH
13553: LD_INT 0
13555: PPUSH
13556: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13560: LD_EXP 5
13564: PPUSH
13565: LD_INT 12
13567: PPUSH
13568: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13572: LD_EXP 5
13576: PPUSH
13577: LD_STRING Frank
13579: PPUSH
13580: CALL_OW 38
// end ; end ; end ;
13584: PPOPN 1
13586: END
// every 1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
13587: LD_EXP 5
13591: PPUSH
13592: LD_INT 12
13594: PPUSH
13595: CALL_OW 308
13599: PUSH
13600: LD_EXP 5
13604: PPUSH
13605: CALL_OW 255
13609: PUSH
13610: LD_INT 0
13612: EQUAL
13613: AND
13614: IFFALSE 13636
13616: GO 13618
13618: DISABLE
// begin RemoveUnit ( Frank ) ;
13619: LD_EXP 5
13623: PPUSH
13624: CALL_OW 64
// frankScoutBase = 1 ;
13628: LD_ADDR_EXP 23
13632: PUSH
13633: LD_INT 1
13635: ST_TO_ADDR
// end ;
13636: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13637: LD_EXP 13
13641: PPUSH
13642: CALL_OW 255
13646: PUSH
13647: LD_INT 4
13649: EQUAL
13650: PUSH
13651: LD_EXP 13
13655: PPUSH
13656: CALL_OW 302
13660: AND
13661: IFFALSE 13686
13663: GO 13665
13665: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13666: LD_EXP 13
13670: PPUSH
13671: LD_STRING D3b-Don-1
13673: PPUSH
13674: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13678: LD_ADDR_EXP 39
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// end ;
13686: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13687: LD_EXP 22
13691: PUSH
13692: LD_INT 0
13694: EQUAL
13695: IFFALSE 13851
13697: GO 13699
13699: DISABLE
13700: LD_INT 0
13702: PPUSH
13703: PPUSH
// begin enable ;
13704: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13705: LD_ADDR_VAR 0 1
13709: PUSH
13710: LD_INT 22
13712: PUSH
13713: LD_INT 4
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 21
13722: PUSH
13723: LD_INT 1
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 69
13738: PUSH
13739: FOR_IN
13740: IFFALSE 13849
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13742: LD_ADDR_VAR 0 2
13746: PUSH
13747: LD_INT 22
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 21
13759: PUSH
13760: LD_INT 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PPUSH
13771: CALL_OW 69
13775: PUSH
13776: FOR_IN
13777: IFFALSE 13845
// begin if GetDistUnits ( i , j ) < 7 then
13779: LD_VAR 0 1
13783: PPUSH
13784: LD_VAR 0 2
13788: PPUSH
13789: CALL_OW 296
13793: PUSH
13794: LD_INT 7
13796: LESS
13797: IFFALSE 13843
// begin saveDonaldson = 1 ;
13799: LD_ADDR_EXP 22
13803: PUSH
13804: LD_INT 1
13806: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13807: LD_INT 22
13809: PUSH
13810: LD_INT 4
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 21
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PPUSH
13831: CALL_OW 69
13835: PPUSH
13836: LD_INT 1
13838: PPUSH
13839: CALL_OW 235
// end ; end ;
13843: GO 13776
13845: POP
13846: POP
// end ;
13847: GO 13739
13849: POP
13850: POP
// end ;
13851: PPOPN 2
13853: END
// every 2 2$0 trigger saveDonaldson = 1 do
13854: LD_EXP 22
13858: PUSH
13859: LD_INT 1
13861: EQUAL
13862: IFFALSE 14104
13864: GO 13866
13866: DISABLE
// begin uc_side = 4 ;
13867: LD_ADDR_OWVAR 20
13871: PUSH
13872: LD_INT 4
13874: ST_TO_ADDR
// uc_nation = 1 ;
13875: LD_ADDR_OWVAR 21
13879: PUSH
13880: LD_INT 1
13882: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13883: LD_ADDR_EXP 5
13887: PUSH
13888: LD_STRING Frank
13890: PPUSH
13891: CALL_OW 34
13895: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13896: LD_EXP 5
13900: PPUSH
13901: LD_INT 13
13903: PPUSH
13904: LD_INT 0
13906: PPUSH
13907: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13911: LD_INT 35
13913: PPUSH
13914: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
13918: LD_EXP 5
13922: PPUSH
13923: LD_INT 51
13925: PPUSH
13926: LD_INT 15
13928: PPUSH
13929: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
13933: LD_EXP 5
13937: PPUSH
13938: LD_EXP 1
13942: PPUSH
13943: CALL_OW 296
13947: PUSH
13948: LD_INT 6
13950: LESS
13951: IFFALSE 13911
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13953: LD_EXP 1
13957: PUSH
13958: LD_EXP 5
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 87
// DialogueOn ;
13971: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13975: LD_EXP 5
13979: PPUSH
13980: LD_STRING D3a-Frank-1
13982: PPUSH
13983: CALL_OW 88
// if Lisa then
13987: LD_EXP 4
13991: IFFALSE 14041
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13993: LD_EXP 4
13997: PPUSH
13998: LD_STRING D3a-Lisa-1
14000: PPUSH
14001: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14005: LD_EXP 5
14009: PPUSH
14010: LD_STRING D3a-Frank-2
14012: PPUSH
14013: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14017: LD_EXP 4
14021: PPUSH
14022: LD_STRING D3a-Lisa-2
14024: PPUSH
14025: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14029: LD_EXP 5
14033: PPUSH
14034: LD_STRING D3a-Frank-3
14036: PPUSH
14037: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14041: LD_EXP 1
14045: PPUSH
14046: LD_STRING D3a-JMM-3
14048: PPUSH
14049: CALL_OW 88
// DialogueOff ;
14053: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14057: LD_EXP 5
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 235
// InGameOn ;
14069: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14073: LD_INT 1
14075: PPUSH
14076: LD_INT 7
14078: PPUSH
14079: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14083: LD_INT 93
14085: PPUSH
14086: LD_INT 91
14088: PPUSH
14089: CALL_OW 84
// wait ( 0 0$5 ) ;
14093: LD_INT 175
14095: PPUSH
14096: CALL_OW 67
// InGameOff ;
14100: CALL_OW 9
// end ;
14104: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14105: LD_OWVAR 67
14109: PUSH
14110: LD_INT 2
14112: EQUAL
14113: PUSH
14114: LD_OWVAR 67
14118: PUSH
14119: LD_INT 3
14121: EQUAL
14122: OR
14123: IFFALSE 14147
14125: GO 14127
14127: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14128: LD_INT 24
14130: PPUSH
14131: LD_INT 24
14133: PPUSH
14134: LD_INT 1
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: LD_INT 53
14142: PPUSH
14143: CALL_OW 125
14147: END
// every 18 18$0 do
14148: GO 14150
14150: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14151: LD_EXP 14
14155: PPUSH
14156: LD_STRING D4-Har-1
14158: PPUSH
14159: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14163: LD_EXP 1
14167: PPUSH
14168: LD_STRING D4-JMM-1
14170: PPUSH
14171: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14175: LD_EXP 14
14179: PPUSH
14180: LD_STRING D4-Har-2
14182: PPUSH
14183: CALL_OW 94
// case query ( Q1 ) of 1 :
14187: LD_STRING Q1
14189: PPUSH
14190: CALL_OW 97
14194: PUSH
14195: LD_INT 1
14197: DOUBLE
14198: EQUAL
14199: IFTRUE 14203
14201: GO 14262
14203: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14204: LD_EXP 1
14208: PPUSH
14209: LD_STRING D5-JMM-1
14211: PPUSH
14212: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14216: LD_EXP 14
14220: PPUSH
14221: LD_STRING D5-Har-1
14223: PPUSH
14224: CALL_OW 94
// timeToSupport = 10 10$0 ;
14228: LD_ADDR_EXP 26
14232: PUSH
14233: LD_INT 21000
14235: ST_TO_ADDR
// timerStatus = 2 ;
14236: LD_ADDR_EXP 27
14240: PUSH
14241: LD_INT 2
14243: ST_TO_ADDR
// startTimer = 1 ;
14244: LD_ADDR_EXP 28
14248: PUSH
14249: LD_INT 1
14251: ST_TO_ADDR
// harrAnswer = 1 ;
14252: LD_ADDR_EXP 24
14256: PUSH
14257: LD_INT 1
14259: ST_TO_ADDR
// end ; 2 :
14260: GO 14397
14262: LD_INT 2
14264: DOUBLE
14265: EQUAL
14266: IFTRUE 14270
14268: GO 14329
14270: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14271: LD_EXP 1
14275: PPUSH
14276: LD_STRING D5-JMM-2
14278: PPUSH
14279: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14283: LD_EXP 14
14287: PPUSH
14288: LD_STRING D5-Har-2
14290: PPUSH
14291: CALL_OW 94
// timeToSupport = 5 5$0 ;
14295: LD_ADDR_EXP 26
14299: PUSH
14300: LD_INT 10500
14302: ST_TO_ADDR
// timerStatus = 2 ;
14303: LD_ADDR_EXP 27
14307: PUSH
14308: LD_INT 2
14310: ST_TO_ADDR
// startTimer = 1 ;
14311: LD_ADDR_EXP 28
14315: PUSH
14316: LD_INT 1
14318: ST_TO_ADDR
// harrAnswer = 2 ;
14319: LD_ADDR_EXP 24
14323: PUSH
14324: LD_INT 2
14326: ST_TO_ADDR
// end ; 3 :
14327: GO 14397
14329: LD_INT 3
14331: DOUBLE
14332: EQUAL
14333: IFTRUE 14337
14335: GO 14396
14337: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14338: LD_EXP 1
14342: PPUSH
14343: LD_STRING D5-JMM-3
14345: PPUSH
14346: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14350: LD_EXP 14
14354: PPUSH
14355: LD_STRING D5-Har-3
14357: PPUSH
14358: CALL_OW 94
// timeToSupport = 5 5$0 ;
14362: LD_ADDR_EXP 26
14366: PUSH
14367: LD_INT 10500
14369: ST_TO_ADDR
// timerStatus = 2 ;
14370: LD_ADDR_EXP 27
14374: PUSH
14375: LD_INT 2
14377: ST_TO_ADDR
// startTimer = 1 ;
14378: LD_ADDR_EXP 28
14382: PUSH
14383: LD_INT 1
14385: ST_TO_ADDR
// harrAnswer = 3 ;
14386: LD_ADDR_EXP 24
14390: PUSH
14391: LD_INT 3
14393: ST_TO_ADDR
// end ; end ;
14394: GO 14397
14396: POP
// end ;
14397: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14398: LD_EXP 27
14402: PUSH
14403: LD_INT 2
14405: EQUAL
14406: PUSH
14407: LD_EXP 26
14411: PUSH
14412: LD_INT 0
14414: EQUAL
14415: AND
14416: IFFALSE 14693
14418: GO 14420
14420: DISABLE
// begin timerStatus = 4 ;
14421: LD_ADDR_EXP 27
14425: PUSH
14426: LD_INT 4
14428: ST_TO_ADDR
// if harrAnswer = 1 then
14429: LD_EXP 24
14433: PUSH
14434: LD_INT 1
14436: EQUAL
14437: IFFALSE 14517
// begin PrepareHarrisonSupport ( 3 ) ;
14439: LD_INT 3
14441: PPUSH
14442: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14446: LD_INT 2100
14448: PPUSH
14449: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14453: LD_EXP 14
14457: PPUSH
14458: LD_STRING D7-Har-1
14460: PPUSH
14461: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14465: LD_STRING M2
14467: PPUSH
14468: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14472: LD_ADDR_EXP 25
14476: PUSH
14477: LD_INT 31500
14479: PUSH
14480: LD_INT 10500
14482: PUSH
14483: LD_INT 8400
14485: PUSH
14486: LD_INT 6300
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: LIST
14493: PUSH
14494: LD_OWVAR 67
14498: ARRAY
14499: PLUS
14500: ST_TO_ADDR
// startTimer = 1 ;
14501: LD_ADDR_EXP 28
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// timerStatus = 3 ;
14509: LD_ADDR_EXP 27
14513: PUSH
14514: LD_INT 3
14516: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14517: LD_EXP 24
14521: PUSH
14522: LD_INT 2
14524: EQUAL
14525: IFFALSE 14605
// begin PrepareHarrisonSupport ( 4 ) ;
14527: LD_INT 4
14529: PPUSH
14530: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14534: LD_INT 2100
14536: PPUSH
14537: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14541: LD_EXP 14
14545: PPUSH
14546: LD_STRING D7-Har-1
14548: PPUSH
14549: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14553: LD_STRING M2
14555: PPUSH
14556: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14560: LD_ADDR_EXP 25
14564: PUSH
14565: LD_INT 27300
14567: PUSH
14568: LD_INT 8400
14570: PUSH
14571: LD_INT 8400
14573: PUSH
14574: LD_INT 6300
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: PUSH
14582: LD_OWVAR 67
14586: ARRAY
14587: PLUS
14588: ST_TO_ADDR
// startTimer = 1 ;
14589: LD_ADDR_EXP 28
14593: PUSH
14594: LD_INT 1
14596: ST_TO_ADDR
// timerStatus = 3 ;
14597: LD_ADDR_EXP 27
14601: PUSH
14602: LD_INT 3
14604: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14605: LD_EXP 24
14609: PUSH
14610: LD_INT 3
14612: EQUAL
14613: IFFALSE 14693
// begin PrepareHarrisonSupport ( 5 ) ;
14615: LD_INT 5
14617: PPUSH
14618: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14622: LD_INT 2100
14624: PPUSH
14625: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14629: LD_EXP 14
14633: PPUSH
14634: LD_STRING D7-Har-1
14636: PPUSH
14637: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14648: LD_ADDR_EXP 25
14652: PUSH
14653: LD_INT 21000
14655: PUSH
14656: LD_INT 8400
14658: PUSH
14659: LD_INT 6300
14661: PUSH
14662: LD_INT 4200
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: PUSH
14670: LD_OWVAR 67
14674: ARRAY
14675: PLUS
14676: ST_TO_ADDR
// startTimer = 1 ;
14677: LD_ADDR_EXP 28
14681: PUSH
14682: LD_INT 1
14684: ST_TO_ADDR
// timerStatus = 3 ;
14685: LD_ADDR_EXP 27
14689: PUSH
14690: LD_INT 3
14692: ST_TO_ADDR
// end ; end ;
14693: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14694: LD_EXP 25
14698: PUSH
14699: LD_INT 8400
14701: LESSEQUAL
14702: PUSH
14703: LD_EXP 27
14707: PUSH
14708: LD_INT 3
14710: EQUAL
14711: AND
14712: IFFALSE 14744
14714: GO 14716
14716: DISABLE
// begin DialogueOn ;
14717: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14721: LD_EXP 14
14725: PPUSH
14726: LD_STRING D7a-Har-1
14728: PPUSH
14729: CALL_OW 94
// DialogueOff ;
14733: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14737: LD_STRING M2a
14739: PPUSH
14740: CALL_OW 337
// end ;
14744: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14745: LD_EXP 25
14749: PUSH
14750: LD_INT 0
14752: LESSEQUAL
14753: PUSH
14754: LD_EXP 27
14758: PUSH
14759: LD_INT 3
14761: EQUAL
14762: AND
14763: IFFALSE 14888
14765: GO 14767
14767: DISABLE
14768: LD_INT 0
14770: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14771: LD_ADDR_VAR 0 1
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_INT 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: PUSH
14791: LD_EXP 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: DIFF
14799: ST_TO_ADDR
// saveDonaldson = 2 ;
14800: LD_ADDR_EXP 22
14804: PUSH
14805: LD_INT 2
14807: ST_TO_ADDR
// DialogueOn ;
14808: CALL_OW 6
// if IsOK ( Donaldson ) then
14812: LD_EXP 13
14816: PPUSH
14817: CALL_OW 302
14821: IFFALSE 14837
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14823: LD_EXP 14
14827: PPUSH
14828: LD_STRING D8-Har-1
14830: PPUSH
14831: CALL_OW 94
// end else
14835: GO 14849
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14837: LD_EXP 14
14841: PPUSH
14842: LD_STRING D8-Har-1a
14844: PPUSH
14845: CALL_OW 94
// end ; DialogueOff ;
14849: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14853: LD_VAR 0 1
14857: PPUSH
14858: LD_INT 4
14860: PPUSH
14861: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14865: LD_VAR 0 1
14869: PPUSH
14870: LD_INT 88
14872: PPUSH
14873: LD_INT 89
14875: PPUSH
14876: CALL_OW 114
// honor = 0 ;
14880: LD_ADDR_EXP 37
14884: PUSH
14885: LD_INT 0
14887: ST_TO_ADDR
// end ;
14888: PPOPN 1
14890: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14891: LD_INT 22
14893: PUSH
14894: LD_INT 6
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 21
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: PUSH
14920: LD_INT 0
14922: EQUAL
14923: PUSH
14924: LD_EXP 18
14928: PUSH
14929: LD_INT 0
14931: EQUAL
14932: AND
14933: PUSH
14934: LD_EXP 40
14938: PUSH
14939: LD_INT 1
14941: EQUAL
14942: AND
14943: IFFALSE 15037
14945: GO 14947
14947: DISABLE
14948: LD_INT 0
14950: PPUSH
14951: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 1
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 23
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: PPUSH
14992: CALL_OW 69
14996: ST_TO_ADDR
// for i in tmp do
14997: LD_ADDR_VAR 0 1
15001: PUSH
15002: LD_VAR 0 2
15006: PUSH
15007: FOR_IN
15008: IFFALSE 15035
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15010: LD_VAR 0 1
15014: PPUSH
15015: LD_INT 1
15017: PPUSH
15018: LD_INT 4
15020: PPUSH
15021: CALL_OW 12
15025: PPUSH
15026: LD_INT 500
15028: PPUSH
15029: CALL_OW 492
// end ;
15033: GO 15007
15035: POP
15036: POP
// end ; end_of_file
15037: PPOPN 2
15039: END
// every 0 0$1 trigger AIEnable = 1 do
15040: LD_EXP 35
15044: PUSH
15045: LD_INT 1
15047: EQUAL
15048: IFFALSE 15120
15050: GO 15052
15052: DISABLE
// begin enable ;
15053: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
15054: LD_INT 3
15056: PPUSH
15057: LD_INT 21
15059: PPUSH
15060: CALL 5373 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15064: LD_INT 3
15066: PPUSH
15067: LD_INT 8
15069: PPUSH
15070: LD_INT 7
15072: PPUSH
15073: LD_INT 1
15075: PPUSH
15076: CALL 5614 0 4
// if baseReadyToBuild = 2 then
15080: LD_EXP 18
15084: PUSH
15085: LD_INT 2
15087: EQUAL
15088: IFFALSE 15120
// begin RepairBuilding ( 6 , ruPDepot ) ;
15090: LD_INT 6
15092: PPUSH
15093: LD_EXP 19
15097: PPUSH
15098: CALL 5373 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15102: LD_INT 6
15104: PPUSH
15105: LD_INT 9
15107: PPUSH
15108: LD_INT 6
15110: PPUSH
15111: LD_EXP 20
15115: PPUSH
15116: CALL 5614 0 4
// end ; end ;
15120: END
// every 0 0$01 do
15121: GO 15123
15123: DISABLE
// begin enable ;
15124: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
15125: LD_INT 3
15127: PPUSH
15128: LD_INT 17
15130: PPUSH
15131: LD_INT 111
15133: PPUSH
15134: LD_INT 87
15136: PPUSH
15137: LD_INT 1
15139: PPUSH
15140: CALL 8482 0 5
// end ;
15144: END
// every 0 0$01 do
15145: GO 15147
15147: DISABLE
// begin enable ;
15148: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
15149: LD_INT 5
15151: PPUSH
15152: LD_INT 17
15154: PPUSH
15155: LD_INT 111
15157: PPUSH
15158: LD_INT 87
15160: PPUSH
15161: LD_INT 1
15163: PPUSH
15164: CALL 8482 0 5
// end ;
15168: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
15169: LD_EXP 35
15173: PUSH
15174: LD_INT 1
15176: EQUAL
15177: IFFALSE 15363
15179: GO 15181
15181: DISABLE
// begin enable ;
15182: ENABLE
// if Difficulty = 1 then
15183: LD_OWVAR 67
15187: PUSH
15188: LD_INT 1
15190: EQUAL
15191: IFFALSE 15238
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15193: LD_INT 3
15195: PPUSH
15196: LD_INT 24
15198: PPUSH
15199: LD_OWVAR 67
15203: PUSH
15204: LD_INT 1
15206: PLUS
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: LD_INT 42
15213: PUSH
15214: LD_INT 42
15216: PUSH
15217: LD_INT 43
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: LIST
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: LD_INT 21
15233: PPUSH
15234: CALL 5880 0 8
// if Difficulty = 2 then
15238: LD_OWVAR 67
15242: PUSH
15243: LD_INT 2
15245: EQUAL
15246: IFFALSE 15308
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15248: LD_INT 3
15250: PPUSH
15251: LD_INT 24
15253: PPUSH
15254: LD_OWVAR 67
15258: PUSH
15259: LD_INT 1
15261: PLUS
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: LD_INT 42
15268: PUSH
15269: LD_INT 43
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PPUSH
15276: LD_INT 1
15278: PPUSH
15279: LD_INT 1
15281: PPUSH
15282: LD_INT 21
15284: PUSH
15285: LD_INT 22
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 1
15294: PPUSH
15295: LD_INT 2
15297: PPUSH
15298: CALL_OW 12
15302: ARRAY
15303: PPUSH
15304: CALL 5880 0 8
// if Difficulty = 3 then
15308: LD_OWVAR 67
15312: PUSH
15313: LD_INT 3
15315: EQUAL
15316: IFFALSE 15363
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
15318: LD_INT 3
15320: PPUSH
15321: LD_INT 24
15323: PPUSH
15324: LD_OWVAR 67
15328: PPUSH
15329: LD_INT 1
15331: PPUSH
15332: LD_INT 43
15334: PUSH
15335: LD_INT 43
15337: PUSH
15338: LD_INT 43
15340: PUSH
15341: LD_INT 44
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: PPUSH
15350: LD_INT 1
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: LD_INT 22
15358: PPUSH
15359: CALL 5880 0 8
// end ;
15363: END
// every 0 0$1 do
15364: GO 15366
15366: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15367: LD_INT 3
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_INT 3
15375: PPUSH
15376: CALL 5288 0 3
15380: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15381: LD_EXP 18
15385: PUSH
15386: LD_INT 1
15388: EQUAL
15389: IFFALSE 15536
15391: GO 15393
15393: DISABLE
15394: LD_INT 0
15396: PPUSH
15397: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15398: LD_ADDR_VAR 0 2
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_INT 6
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 21
15415: PUSH
15416: LD_INT 2
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 34
15425: PUSH
15426: LD_INT 51
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: PPUSH
15438: CALL_OW 69
15442: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15443: LD_VAR 0 2
15447: PUSH
15448: LD_INT 1
15450: ARRAY
15451: PPUSH
15452: LD_EXP 19
15456: PPUSH
15457: CALL_OW 250
15461: PUSH
15462: LD_INT 5
15464: MINUS
15465: PPUSH
15466: LD_EXP 19
15470: PPUSH
15471: CALL_OW 251
15475: PUSH
15476: LD_INT 5
15478: MINUS
15479: PPUSH
15480: CALL_OW 111
// wait ( 0 0$5 ) ;
15484: LD_INT 175
15486: PPUSH
15487: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15491: LD_VAR 0 2
15495: PUSH
15496: LD_INT 1
15498: ARRAY
15499: PPUSH
15500: LD_INT 41
15502: PPUSH
15503: LD_INT 52
15505: PPUSH
15506: CALL_OW 177
// wait ( 0 0$40 ) ;
15510: LD_INT 1400
15512: PPUSH
15513: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15517: LD_VAR 0 2
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: LD_INT 41
15528: PPUSH
15529: LD_INT 44
15531: PPUSH
15532: CALL_OW 111
// end ;
15536: PPOPN 2
15538: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15539: LD_EXP 19
15543: PPUSH
15544: CALL_OW 274
15548: PPUSH
15549: LD_INT 1
15551: PPUSH
15552: CALL_OW 275
15556: PUSH
15557: LD_INT 100
15559: GREATEREQUAL
15560: IFFALSE 15788
15562: GO 15564
15564: DISABLE
15565: LD_INT 0
15567: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15568: LD_ADDR_VAR 0 1
15572: PUSH
15573: LD_INT 22
15575: PUSH
15576: LD_INT 6
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 21
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 25
15595: PUSH
15596: LD_INT 2
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: LIST
15607: PPUSH
15608: CALL_OW 69
15612: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15613: LD_VAR 0 1
15617: PUSH
15618: LD_INT 1
15620: ARRAY
15621: PPUSH
15622: LD_INT 4
15624: PPUSH
15625: LD_INT 39
15627: PPUSH
15628: LD_INT 37
15630: PPUSH
15631: LD_INT 3
15633: PPUSH
15634: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15638: LD_VAR 0 1
15642: PUSH
15643: LD_INT 1
15645: ARRAY
15646: PPUSH
15647: LD_INT 29
15649: PPUSH
15650: LD_INT 42
15652: PPUSH
15653: LD_INT 54
15655: PPUSH
15656: LD_INT 3
15658: PPUSH
15659: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15663: LD_VAR 0 1
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: PPUSH
15672: LD_INT 6
15674: PPUSH
15675: LD_INT 38
15677: PPUSH
15678: LD_INT 48
15680: PPUSH
15681: LD_INT 0
15683: PPUSH
15684: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15688: LD_VAR 0 1
15692: PUSH
15693: LD_INT 1
15695: ARRAY
15696: PPUSH
15697: LD_INT 2
15699: PPUSH
15700: LD_INT 32
15702: PPUSH
15703: LD_INT 38
15705: PPUSH
15706: LD_INT 2
15708: PPUSH
15709: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15713: LD_VAR 0 1
15717: PUSH
15718: LD_INT 1
15720: ARRAY
15721: PPUSH
15722: LD_INT 26
15724: PPUSH
15725: LD_INT 39
15727: PPUSH
15728: LD_INT 55
15730: PPUSH
15731: LD_INT 3
15733: PPUSH
15734: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15738: LD_VAR 0 1
15742: PUSH
15743: LD_INT 1
15745: ARRAY
15746: PPUSH
15747: LD_INT 32
15749: PPUSH
15750: LD_INT 31
15752: PPUSH
15753: LD_INT 31
15755: PPUSH
15756: LD_INT 3
15758: PPUSH
15759: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15763: LD_VAR 0 1
15767: PUSH
15768: LD_INT 1
15770: ARRAY
15771: PPUSH
15772: LD_INT 31
15774: PPUSH
15775: LD_INT 50
15777: PPUSH
15778: LD_INT 51
15780: PPUSH
15781: LD_INT 4
15783: PPUSH
15784: CALL_OW 205
// end ; end_of_file
15788: PPOPN 1
15790: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15791: LD_INT 0
15793: PPUSH
15794: PPUSH
15795: PPUSH
15796: PPUSH
15797: PPUSH
15798: PPUSH
15799: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15800: LD_ADDR_VAR 0 3
15804: PUSH
15805: LD_INT 22
15807: PUSH
15808: LD_INT 6
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 21
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 25
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: LD_INT 54
15840: PUSH
15841: EMPTY
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: PPUSH
15854: CALL_OW 69
15858: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15859: LD_ADDR_VAR 0 7
15863: PUSH
15864: LD_INT 22
15866: PUSH
15867: LD_INT 6
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 1
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 25
15886: PUSH
15887: LD_INT 1
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 54
15896: PUSH
15897: EMPTY
15898: LIST
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15911: LD_ADDR_VAR 0 4
15915: PUSH
15916: LD_INT 22
15918: PUSH
15919: LD_INT 6
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 21
15928: PUSH
15929: LD_INT 1
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 25
15938: PUSH
15939: LD_INT 2
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 69
15955: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
15956: LD_ADDR_VAR 0 6
15960: PUSH
15961: LD_INT 22
15963: PUSH
15964: LD_INT 6
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 21
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 25
15983: PUSH
15984: LD_INT 4
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 69
16000: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16001: LD_ADDR_VAR 0 8
16005: PUSH
16006: LD_INT 22
16008: PUSH
16009: LD_INT 6
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 21
16018: PUSH
16019: LD_INT 2
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 34
16028: PUSH
16029: LD_INT 51
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 255
16055: PUSH
16056: LD_INT 6
16058: EQUAL
16059: PUSH
16060: LD_VAR 0 1
16064: PPUSH
16065: CALL_OW 266
16069: PUSH
16070: LD_INT 0
16072: EQUAL
16073: AND
16074: IFFALSE 16094
// begin ruPDepot = building ;
16076: LD_ADDR_EXP 19
16080: PUSH
16081: LD_VAR 0 1
16085: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16086: LD_ADDR_EXP 18
16090: PUSH
16091: LD_INT 1
16093: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 266
16103: PUSH
16104: LD_INT 4
16106: EQUAL
16107: PUSH
16108: LD_VAR 0 1
16112: PPUSH
16113: CALL_OW 255
16117: PUSH
16118: LD_INT 6
16120: EQUAL
16121: AND
16122: IFFALSE 16155
// for i in tmpSold do
16124: LD_ADDR_VAR 0 2
16128: PUSH
16129: LD_VAR 0 3
16133: PUSH
16134: FOR_IN
16135: IFFALSE 16153
// ComEnterUnit ( i , building ) ;
16137: LD_VAR 0 2
16141: PPUSH
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 120
16151: GO 16134
16153: POP
16154: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16155: LD_VAR 0 1
16159: PPUSH
16160: CALL_OW 266
16164: PUSH
16165: LD_INT 6
16167: EQUAL
16168: PUSH
16169: LD_VAR 0 1
16173: PPUSH
16174: CALL_OW 255
16178: PUSH
16179: LD_INT 6
16181: EQUAL
16182: AND
16183: IFFALSE 16241
// begin for i in tmpSci do
16185: LD_ADDR_VAR 0 2
16189: PUSH
16190: LD_VAR 0 6
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16214
// ComEnterUnit ( i , building ) ;
16198: LD_VAR 0 2
16202: PPUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 120
16212: GO 16195
16214: POP
16215: POP
// ResAllTechs ( 6 , building , 3 ) ;
16216: LD_INT 6
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 3
16226: PPUSH
16227: CALL 5288 0 3
// ruPLab = building ;
16231: LD_ADDR_EXP 20
16235: PUSH
16236: LD_VAR 0 1
16240: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL_OW 266
16250: PUSH
16251: LD_INT 2
16253: EQUAL
16254: PUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: CALL_OW 255
16264: PUSH
16265: LD_INT 6
16267: EQUAL
16268: AND
16269: IFFALSE 16320
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16271: LD_ADDR_VAR 0 5
16275: PUSH
16276: LD_VAR 0 8
16280: PUSH
16281: LD_INT 1
16283: ARRAY
16284: PPUSH
16285: CALL_OW 313
16289: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16290: LD_VAR 0 5
16294: PPUSH
16295: CALL_OW 121
// wait ( 0 0$1 ) ;
16299: LD_INT 35
16301: PPUSH
16302: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16306: LD_VAR 0 5
16310: PPUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 266
16329: PUSH
16330: LD_INT 32
16332: EQUAL
16333: PUSH
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 255
16343: PUSH
16344: LD_INT 6
16346: EQUAL
16347: AND
16348: IFFALSE 16400
// begin ComPlaceWeapon ( building , 42 ) ;
16350: LD_VAR 0 1
16354: PPUSH
16355: LD_INT 42
16357: PPUSH
16358: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16362: LD_VAR 0 7
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: CALL_OW 122
// wait ( 0 0$1 ) ;
16375: LD_INT 35
16377: PPUSH
16378: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16382: LD_VAR 0 7
16386: PUSH
16387: LD_INT 1
16389: ARRAY
16390: PPUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 266
16409: PUSH
16410: LD_INT 31
16412: EQUAL
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 255
16423: PUSH
16424: LD_INT 6
16426: EQUAL
16427: AND
16428: IFFALSE 16494
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16430: LD_VAR 0 7
16434: PUSH
16435: LD_INT 2
16437: ARRAY
16438: PPUSH
16439: CALL_OW 122
// wait ( 0 0$1 ) ;
16443: LD_INT 35
16445: PPUSH
16446: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16450: LD_VAR 0 7
16454: PUSH
16455: LD_INT 2
16457: ARRAY
16458: PPUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16468: LD_VAR 0 4
16472: PUSH
16473: LD_INT 1
16475: ARRAY
16476: PPUSH
16477: LD_EXP 19
16481: PPUSH
16482: CALL_OW 120
// baseReadyToBuild = 2 ;
16486: LD_ADDR_EXP 18
16490: PUSH
16491: LD_INT 2
16493: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16494: LD_VAR 0 1
16498: PPUSH
16499: CALL_OW 266
16503: PUSH
16504: LD_INT 32
16506: EQUAL
16507: PUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 255
16517: PUSH
16518: LD_INT 1
16520: EQUAL
16521: AND
16522: PUSH
16523: LD_EXP 30
16527: PUSH
16528: LD_INT 0
16530: EQUAL
16531: AND
16532: IFFALSE 16777
// begin bunkerDialog = 1 ;
16534: LD_ADDR_EXP 30
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16542: LD_EXP 11
16546: PPUSH
16547: CALL_OW 302
16551: IFFALSE 16567
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16553: LD_EXP 11
16557: PPUSH
16558: LD_STRING D11-Eng1-1
16560: PPUSH
16561: CALL_OW 88
// end else
16565: GO 16763
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16567: LD_INT 22
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 21
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 25
16589: PUSH
16590: LD_INT 3
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 26
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: PPUSH
16613: CALL_OW 69
16617: PUSH
16618: LD_EXP 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: PUSH
16626: LD_INT 0
16628: GREATER
16629: DIFF
16630: IFFALSE 16704
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16632: LD_INT 22
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 21
16644: PUSH
16645: LD_INT 1
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 25
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 26
16664: PUSH
16665: LD_INT 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: PUSH
16683: LD_EXP 1
16687: PUSH
16688: EMPTY
16689: LIST
16690: DIFF
16691: PPUSH
16692: LD_STRING D11-Eng1-1
16694: PPUSH
16695: LD_STRING D11-Eng1-1
16697: PPUSH
16698: CALL 4028 0 3
// end else
16702: GO 16763
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16704: LD_INT 22
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 26
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: PPUSH
16739: CALL_OW 69
16743: PUSH
16744: LD_EXP 1
16748: PUSH
16749: EMPTY
16750: LIST
16751: DIFF
16752: PPUSH
16753: LD_STRING D11-Eng1-1
16755: PPUSH
16756: LD_STRING D11-Eng1-1
16758: PPUSH
16759: CALL 4028 0 3
// end ; end ; if energyVDialog = 0 then
16763: LD_EXP 31
16767: PUSH
16768: LD_INT 0
16770: EQUAL
16771: IFFALSE 16777
// EnergyDialog ;
16773: CALL 4340 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16777: LD_VAR 0 1
16781: PPUSH
16782: CALL_OW 266
16786: PUSH
16787: LD_INT 29
16789: EQUAL
16790: PUSH
16791: LD_VAR 0 1
16795: PPUSH
16796: CALL_OW 255
16800: PUSH
16801: LD_INT 1
16803: EQUAL
16804: AND
16805: IFFALSE 16815
// buildOil = 1 ;
16807: LD_ADDR_EXP 32
16811: PUSH
16812: LD_INT 1
16814: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 266
16824: PUSH
16825: LD_INT 26
16827: EQUAL
16828: PUSH
16829: LD_VAR 0 1
16833: PPUSH
16834: CALL_OW 255
16838: PUSH
16839: LD_INT 1
16841: EQUAL
16842: AND
16843: IFFALSE 16853
// buildPower = 1 ;
16845: LD_ADDR_EXP 33
16849: PUSH
16850: LD_INT 1
16852: ST_TO_ADDR
// end ;
16853: PPOPN 8
16855: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 266
16865: PUSH
16866: LD_INT 3
16868: EQUAL
16869: PUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 255
16879: PUSH
16880: LD_INT 1
16882: EQUAL
16883: AND
16884: PUSH
16885: LD_EXP 29
16889: PUSH
16890: LD_INT 0
16892: EQUAL
16893: AND
16894: IFFALSE 17210
// begin factoryDialog = 1 ;
16896: LD_ADDR_EXP 29
16900: PUSH
16901: LD_INT 1
16903: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
16904: LD_INT 22
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 21
16916: PUSH
16917: LD_INT 3
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 30
16926: PUSH
16927: LD_INT 3
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 24
16936: PUSH
16937: LD_INT 1000
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: PPUSH
16950: CALL_OW 69
16954: PUSH
16955: LD_INT 1
16957: ARRAY
16958: PPUSH
16959: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
16963: LD_EXP 1
16967: PPUSH
16968: LD_STRING D9a-JMM-1
16970: PPUSH
16971: CALL_OW 88
// if IsOK ( Campell ) then
16975: LD_EXP 12
16979: PPUSH
16980: CALL_OW 302
16984: IFFALSE 17000
// begin Say ( Campell , D9a-Mech1-1 ) ;
16986: LD_EXP 12
16990: PPUSH
16991: LD_STRING D9a-Mech1-1
16993: PPUSH
16994: CALL_OW 88
// end else
16998: GO 17196
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17000: LD_INT 22
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 21
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 25
17022: PUSH
17023: LD_INT 3
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 26
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 69
17050: PUSH
17051: LD_EXP 1
17055: PUSH
17056: EMPTY
17057: LIST
17058: PUSH
17059: LD_INT 0
17061: GREATER
17062: DIFF
17063: IFFALSE 17137
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17065: LD_INT 22
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 21
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 25
17087: PUSH
17088: LD_INT 3
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 26
17097: PUSH
17098: LD_INT 1
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: PPUSH
17111: CALL_OW 69
17115: PUSH
17116: LD_EXP 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: DIFF
17124: PPUSH
17125: LD_STRING D9a-Mech1-1
17127: PPUSH
17128: LD_STRING D9a-Mech1-1
17130: PPUSH
17131: CALL 4028 0 3
// end else
17135: GO 17196
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17137: LD_INT 22
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 21
17149: PUSH
17150: LD_INT 1
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 26
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: PUSH
17177: LD_EXP 1
17181: PUSH
17182: EMPTY
17183: LIST
17184: DIFF
17185: PPUSH
17186: LD_STRING D9a-Mech1-1
17188: PPUSH
17189: LD_STRING D9a-Mech1-1
17191: PPUSH
17192: CALL 4028 0 3
// end ; end ; if energyVDialog = 0 then
17196: LD_EXP 31
17200: PUSH
17201: LD_INT 0
17203: EQUAL
17204: IFFALSE 17210
// EnergyDialog ;
17206: CALL 4340 0 0
// end ; end ;
17210: PPOPN 1
17212: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17213: LD_VAR 0 1
17217: PPUSH
17218: CALL_OW 247
17222: PUSH
17223: LD_INT 1
17225: EQUAL
17226: PUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 255
17236: PUSH
17237: LD_INT 1
17239: EQUAL
17240: AND
17241: IFFALSE 17257
// lostCounter = lostCounter + 1 ;
17243: LD_ADDR_EXP 36
17247: PUSH
17248: LD_EXP 36
17252: PUSH
17253: LD_INT 1
17255: PLUS
17256: ST_TO_ADDR
// end ;
17257: PPOPN 1
17259: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17260: LD_INT 0
17262: PPUSH
17263: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17264: LD_ADDR_VAR 0 4
17268: PUSH
17269: LD_INT 22
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL_OW 69
17283: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17284: LD_VAR 0 1
17288: PUSH
17289: LD_INT 1
17291: EQUAL
17292: PUSH
17293: LD_VAR 0 2
17297: PUSH
17298: LD_INT 6
17300: EQUAL
17301: AND
17302: PUSH
17303: LD_EXP 39
17307: PUSH
17308: LD_INT 1
17310: EQUAL
17311: AND
17312: IFFALSE 17367
// begin donaldsonCoopAttack = 0 ;
17314: LD_ADDR_EXP 39
17318: PUSH
17319: LD_INT 0
17321: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17322: LD_ADDR_VAR 0 3
17326: PUSH
17327: LD_INT 22
17329: PUSH
17330: LD_INT 4
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: EMPTY
17338: LIST
17339: PPUSH
17340: CALL_OW 69
17344: PUSH
17345: FOR_IN
17346: IFFALSE 17365
// ComAgressiveMove ( i , 52 , 64 ) ;
17348: LD_VAR 0 3
17352: PPUSH
17353: LD_INT 52
17355: PPUSH
17356: LD_INT 64
17358: PPUSH
17359: CALL_OW 114
17363: GO 17345
17365: POP
17366: POP
// end ; end ;
17367: PPOPN 4
17369: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 264
17379: PUSH
17380: LD_INT 53
17382: EQUAL
17383: IFFALSE 17468
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17385: LD_VAR 0 1
17389: PPUSH
17390: LD_INT 21
17392: PPUSH
17393: CALL 4556 0 2
// uc_side = 3 ;
17397: LD_ADDR_OWVAR 20
17401: PUSH
17402: LD_INT 3
17404: ST_TO_ADDR
// uc_nation = 3 ;
17405: LD_ADDR_OWVAR 21
17409: PUSH
17410: LD_INT 3
17412: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17413: LD_INT 0
17415: PPUSH
17416: LD_EXP 17
17420: PPUSH
17421: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17425: CALL_OW 44
17429: PPUSH
17430: LD_VAR 0 2
17434: PPUSH
17435: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17439: LD_VAR 0 1
17443: PPUSH
17444: LD_INT 6
17446: PPUSH
17447: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17451: LD_VAR 0 1
17455: PPUSH
17456: CALL_OW 313
17460: PPUSH
17461: LD_INT 6
17463: PPUSH
17464: CALL_OW 235
// end ; end ;
17468: PPOPN 2
17470: END
// on Command ( comandid ) do var i , j , tmp ;
17471: LD_INT 0
17473: PPUSH
17474: PPUSH
17475: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
17476: LD_ADDR_VAR 0 2
17480: PUSH
17481: LD_INT 22
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 2
17493: PUSH
17494: LD_INT 21
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 21
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PPUSH
17523: CALL_OW 69
17527: PUSH
17528: FOR_IN
17529: IFFALSE 17639
// begin if GetTaskList ( i ) > 0 then
17531: LD_VAR 0 2
17535: PPUSH
17536: CALL_OW 437
17540: PUSH
17541: LD_INT 0
17543: GREATER
17544: IFFALSE 17637
// begin for j = 1 to GetTaskList ( i ) do
17546: LD_ADDR_VAR 0 3
17550: PUSH
17551: DOUBLE
17552: LD_INT 1
17554: DEC
17555: ST_TO_ADDR
17556: LD_VAR 0 2
17560: PPUSH
17561: CALL_OW 437
17565: PUSH
17566: FOR_TO
17567: IFFALSE 17635
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
17569: LD_ADDR_VAR 0 4
17573: PUSH
17574: LD_VAR 0 2
17578: PPUSH
17579: CALL_OW 437
17583: PUSH
17584: LD_VAR 0 3
17588: ARRAY
17589: PUSH
17590: LD_INT 4
17592: ARRAY
17593: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
17594: LD_VAR 0 4
17598: PPUSH
17599: CALL_OW 255
17603: PUSH
17604: LD_INT 4
17606: EQUAL
17607: PUSH
17608: LD_VAR 0 4
17612: PPUSH
17613: CALL_OW 255
17617: PUSH
17618: LD_INT 0
17620: EQUAL
17621: OR
17622: IFFALSE 17633
// ComStop ( i ) ;
17624: LD_VAR 0 2
17628: PPUSH
17629: CALL_OW 141
// end ;
17633: GO 17566
17635: POP
17636: POP
// end ; end ;
17637: GO 17528
17639: POP
17640: POP
// end ; end_of_file
17641: PPOPN 4
17643: END
// every 10 10$0 do
17644: GO 17646
17646: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17647: LD_INT 5
17649: PPUSH
17650: LD_INT 3
17652: PPUSH
17653: LD_INT 2
17655: PPUSH
17656: LD_INT 5
17658: PPUSH
17659: CALL_OW 12
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: LD_INT 3
17669: PUSH
17670: LD_INT 3
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: PUSH
17678: LD_OWVAR 67
17682: ARRAY
17683: PLUS
17684: PPUSH
17685: LD_INT 0
17687: PPUSH
17688: LD_INT 0
17690: PPUSH
17691: LD_INT 0
17693: PPUSH
17694: LD_INT 1
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: PUSH
17708: LD_OWVAR 67
17712: ARRAY
17713: PPUSH
17714: LD_EXP 16
17718: PPUSH
17719: LD_EXP 17
17723: PPUSH
17724: CALL_OW 12
17728: PPUSH
17729: LD_INT 4
17731: PPUSH
17732: LD_INT 14
17734: PPUSH
17735: LD_INT 1
17737: PPUSH
17738: LD_INT 2
17740: PPUSH
17741: CALL 6365 0 12
// end ;
17745: END
// every 15 15$0 do
17746: GO 17748
17748: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17749: LD_INT 5
17751: PPUSH
17752: LD_INT 3
17754: PPUSH
17755: LD_INT 3
17757: PPUSH
17758: LD_INT 5
17760: PPUSH
17761: CALL_OW 12
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 3
17771: PUSH
17772: LD_INT 3
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: PUSH
17780: LD_OWVAR 67
17784: ARRAY
17785: PLUS
17786: PPUSH
17787: LD_INT 0
17789: PPUSH
17790: LD_INT 0
17792: PPUSH
17793: LD_INT 0
17795: PPUSH
17796: LD_INT 2
17798: PUSH
17799: LD_INT 2
17801: PUSH
17802: LD_INT 3
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: PUSH
17810: LD_OWVAR 67
17814: ARRAY
17815: PPUSH
17816: LD_EXP 16
17820: PPUSH
17821: LD_EXP 17
17825: PPUSH
17826: CALL_OW 12
17830: PPUSH
17831: LD_INT 4
17833: PPUSH
17834: LD_INT 14
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: LD_INT 1
17842: PPUSH
17843: CALL 6365 0 12
// end ;
17847: END
// every 25 25$0 do
17848: GO 17850
17850: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17851: LD_INT 5
17853: PPUSH
17854: LD_INT 3
17856: PPUSH
17857: LD_INT 2
17859: PPUSH
17860: LD_INT 3
17862: PPUSH
17863: CALL_OW 12
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: LD_INT 3
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: PUSH
17882: LD_OWVAR 67
17886: ARRAY
17887: PLUS
17888: PPUSH
17889: LD_INT 0
17891: PPUSH
17892: LD_INT 0
17894: PPUSH
17895: LD_INT 0
17897: PPUSH
17898: LD_INT 1
17900: PUSH
17901: LD_INT 2
17903: PUSH
17904: LD_INT 3
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: PUSH
17912: LD_OWVAR 67
17916: ARRAY
17917: PPUSH
17918: LD_EXP 16
17922: PPUSH
17923: LD_EXP 17
17927: PPUSH
17928: CALL_OW 12
17932: PPUSH
17933: LD_INT 4
17935: PPUSH
17936: LD_INT 14
17938: PPUSH
17939: LD_INT 1
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: CALL 6365 0 12
// end ;
17949: END
// every 26 26$0 do
17950: GO 17952
17952: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17953: LD_INT 5
17955: PPUSH
17956: LD_INT 3
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: CALL_OW 12
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: LIST
17983: PUSH
17984: LD_OWVAR 67
17988: ARRAY
17989: PLUS
17990: PPUSH
17991: LD_INT 0
17993: PPUSH
17994: LD_INT 0
17996: PPUSH
17997: LD_INT 0
17999: PPUSH
18000: LD_INT 2
18002: PUSH
18003: LD_INT 2
18005: PUSH
18006: LD_INT 3
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: LIST
18013: PUSH
18014: LD_OWVAR 67
18018: ARRAY
18019: PPUSH
18020: LD_EXP 16
18024: PPUSH
18025: LD_EXP 17
18029: PPUSH
18030: CALL_OW 12
18034: PPUSH
18035: LD_INT 4
18037: PPUSH
18038: LD_INT 14
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: LD_INT 2
18046: PPUSH
18047: CALL 6365 0 12
// end ;
18051: END
// every 25 25$0 do
18052: GO 18054
18054: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18055: LD_INT 4
18057: PPUSH
18058: LD_INT 5
18060: PPUSH
18061: LD_INT 3
18063: PUSH
18064: LD_INT 4
18066: PUSH
18067: LD_INT 5
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: PUSH
18075: LD_OWVAR 67
18079: ARRAY
18080: PPUSH
18081: LD_EXP 16
18085: PPUSH
18086: LD_EXP 17
18090: PPUSH
18091: CALL_OW 12
18095: PPUSH
18096: LD_INT 3
18098: PPUSH
18099: LD_INT 1
18101: PPUSH
18102: LD_INT 1
18104: PPUSH
18105: LD_INT 42
18107: PUSH
18108: LD_INT 42
18110: PUSH
18111: LD_INT 43
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 42
18121: PUSH
18122: LD_INT 43
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 43
18131: PUSH
18132: LD_INT 43
18134: PUSH
18135: LD_INT 43
18137: PUSH
18138: LD_INT 44
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: LIST
18151: PUSH
18152: LD_OWVAR 67
18156: ARRAY
18157: PPUSH
18158: EMPTY
18159: PPUSH
18160: EMPTY
18161: PPUSH
18162: LD_INT 1
18164: PPUSH
18165: CALL 9273 0 11
// end ; end_of_file
18169: END
// every 0 0$1 trigger startTimer = 1 do
18170: LD_EXP 28
18174: PUSH
18175: LD_INT 1
18177: EQUAL
18178: IFFALSE 18308
18180: GO 18182
18182: DISABLE
// begin enable ;
18183: ENABLE
// if timerStatus = 1 then
18184: LD_EXP 27
18188: PUSH
18189: LD_INT 1
18191: EQUAL
18192: IFFALSE 18225
// begin timeToSupport = timeToSupport - 0 0$01 ;
18194: LD_ADDR_EXP 26
18198: PUSH
18199: LD_EXP 26
18203: PUSH
18204: LD_INT 35
18206: MINUS
18207: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18208: LD_ADDR_OWVAR 47
18212: PUSH
18213: LD_STRING #Am04-1
18215: PUSH
18216: LD_EXP 26
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: ST_TO_ADDR
// end ; if timerStatus = 2 then
18225: LD_EXP 27
18229: PUSH
18230: LD_INT 2
18232: EQUAL
18233: IFFALSE 18266
// begin timeToSupport = timeToSupport - 0 0$01 ;
18235: LD_ADDR_EXP 26
18239: PUSH
18240: LD_EXP 26
18244: PUSH
18245: LD_INT 35
18247: MINUS
18248: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18249: LD_ADDR_OWVAR 47
18253: PUSH
18254: LD_STRING #Am04-2
18256: PUSH
18257: LD_EXP 26
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: ST_TO_ADDR
// end ; if timerStatus = 3 then
18266: LD_EXP 27
18270: PUSH
18271: LD_INT 3
18273: EQUAL
18274: IFFALSE 18290
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18276: LD_ADDR_EXP 25
18280: PUSH
18281: LD_EXP 25
18285: PUSH
18286: LD_INT 35
18288: MINUS
18289: ST_TO_ADDR
// end ; if timerStatus = 4 then
18290: LD_EXP 27
18294: PUSH
18295: LD_INT 4
18297: EQUAL
18298: IFFALSE 18308
// begin display_strings =  ;
18300: LD_ADDR_OWVAR 47
18304: PUSH
18305: LD_STRING 
18307: ST_TO_ADDR
// end ; end ; end_of_file
18308: END
// every 0 0$1 trigger IsDead ( JMM ) do
18309: LD_EXP 1
18313: PPUSH
18314: CALL_OW 301
18318: IFFALSE 18330
18320: GO 18322
18322: DISABLE
// YouLost ( JMM ) ;
18323: LD_STRING JMM
18325: PPUSH
18326: CALL_OW 104
18330: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18331: LD_INT 4
18333: PPUSH
18334: CALL_OW 301
18338: IFFALSE 18350
18340: GO 18342
18342: DISABLE
// YouLost ( Base ) ; end_of_file
18343: LD_STRING Base
18345: PPUSH
18346: CALL_OW 104
18350: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
18351: LD_EXP 15
18355: PPUSH
18356: CALL_OW 301
18360: IFFALSE 18742
18362: GO 18364
18364: DISABLE
18365: LD_INT 0
18367: PPUSH
// begin AIEnable = 0 ;
18368: LD_ADDR_EXP 35
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// escapeAvalaible = 1 ;
18376: LD_ADDR_EXP 38
18380: PUSH
18381: LD_INT 1
18383: ST_TO_ADDR
// InGameOn ;
18384: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18388: LD_INT 3
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: LD_INT 0
18399: PPUSH
18400: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18404: LD_INT 6
18406: PPUSH
18407: LD_INT 1
18409: PPUSH
18410: LD_INT 1
18412: PPUSH
18413: LD_INT 0
18415: PPUSH
18416: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18420: LD_INT 5
18422: PPUSH
18423: LD_INT 1
18425: PPUSH
18426: LD_INT 1
18428: PPUSH
18429: LD_INT 0
18431: PPUSH
18432: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18436: LD_INT 3
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18446: LD_INT 97
18448: PPUSH
18449: LD_INT 91
18451: PPUSH
18452: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18456: LD_INT 22
18458: PUSH
18459: LD_INT 3
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 21
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PPUSH
18480: CALL_OW 69
18484: PPUSH
18485: CALL_OW 121
// wait ( 0 0$01 ) ;
18489: LD_INT 35
18491: PPUSH
18492: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18496: LD_INT 22
18498: PUSH
18499: LD_INT 3
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 21
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: PPUSH
18525: LD_INT 124
18527: PPUSH
18528: LD_INT 98
18530: PPUSH
18531: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18535: LD_INT 22
18537: PUSH
18538: LD_INT 5
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 21
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 69
18563: PPUSH
18564: CALL_OW 121
// wait ( 0 0$01 ) ;
18568: LD_INT 35
18570: PPUSH
18571: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18575: LD_INT 22
18577: PUSH
18578: LD_INT 5
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 21
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PPUSH
18599: CALL_OW 69
18603: PPUSH
18604: LD_INT 124
18606: PPUSH
18607: LD_INT 98
18609: PPUSH
18610: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18614: LD_INT 22
18616: PUSH
18617: LD_INT 6
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 21
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PPUSH
18638: CALL_OW 69
18642: PPUSH
18643: CALL_OW 121
// wait ( 0 0$01 ) ;
18647: LD_INT 35
18649: PPUSH
18650: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18654: LD_INT 22
18656: PUSH
18657: LD_INT 6
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 21
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 69
18682: PPUSH
18683: LD_INT 124
18685: PPUSH
18686: LD_INT 98
18688: PPUSH
18689: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18693: LD_INT 22
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PPUSH
18717: CALL_OW 69
18721: PPUSH
18722: LD_INT 124
18724: PPUSH
18725: LD_INT 98
18727: PPUSH
18728: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
18732: LD_INT 124
18734: PPUSH
18735: LD_INT 98
18737: PPUSH
18738: CALL_OW 84
// end ;
18742: PPOPN 1
18744: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
18745: LD_INT 23
18747: PUSH
18748: LD_INT 3
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 24
18767: PUSH
18768: LD_INT 250
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: PPUSH
18780: CALL_OW 69
18784: PUSH
18785: LD_INT 0
18787: EQUAL
18788: IFFALSE 18797
18790: GO 18792
18792: DISABLE
// FinishMission ;
18793: CALL 18968 0 0
18797: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18798: LD_EXP 38
18802: PUSH
18803: LD_INT 1
18805: EQUAL
18806: IFFALSE 18965
18808: GO 18810
18810: DISABLE
18811: LD_INT 0
18813: PPUSH
// begin enable ;
18814: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18815: LD_ADDR_VAR 0 1
18819: PUSH
18820: LD_INT 22
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PPUSH
18830: CALL_OW 69
18834: PUSH
18835: FOR_IN
18836: IFFALSE 18863
// if IsInArea ( i , RussianEscape ) then
18838: LD_VAR 0 1
18842: PPUSH
18843: LD_INT 5
18845: PPUSH
18846: CALL_OW 308
18850: IFFALSE 18861
// RemoveUnit ( i ) ;
18852: LD_VAR 0 1
18856: PPUSH
18857: CALL_OW 64
18861: GO 18835
18863: POP
18864: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
18865: LD_ADDR_VAR 0 1
18869: PUSH
18870: LD_INT 22
18872: PUSH
18873: LD_INT 5
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PPUSH
18880: CALL_OW 69
18884: PUSH
18885: FOR_IN
18886: IFFALSE 18913
// if IsInArea ( i , RussianEscape ) then
18888: LD_VAR 0 1
18892: PPUSH
18893: LD_INT 5
18895: PPUSH
18896: CALL_OW 308
18900: IFFALSE 18911
// RemoveUnit ( i ) ;
18902: LD_VAR 0 1
18906: PPUSH
18907: CALL_OW 64
18911: GO 18885
18913: POP
18914: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18915: LD_ADDR_VAR 0 1
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: LD_INT 6
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: PUSH
18935: FOR_IN
18936: IFFALSE 18963
// if IsInArea ( i , RussianEscape ) then
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_INT 5
18945: PPUSH
18946: CALL_OW 308
18950: IFFALSE 18961
// RemoveUnit ( i ) ;
18952: LD_VAR 0 1
18956: PPUSH
18957: CALL_OW 64
18961: GO 18935
18963: POP
18964: POP
// end ;
18965: PPOPN 1
18967: END
// export function FinishMission ; var tmp ; begin
18968: LD_INT 0
18970: PPUSH
18971: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18972: LD_INT 69
18974: PPUSH
18975: LD_INT 1
18977: PPUSH
18978: CALL_OW 321
18982: PPUSH
18983: LD_STRING GatlingInGamma
18985: PPUSH
18986: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
18990: LD_EXP 32
18994: PUSH
18995: LD_INT 1
18997: EQUAL
18998: PUSH
18999: LD_EXP 33
19003: PUSH
19004: LD_INT 1
19006: EQUAL
19007: AND
19008: IFFALSE 19022
// begin AddMedal ( oil , 1 ) ;
19010: LD_STRING oil
19012: PPUSH
19013: LD_INT 1
19015: PPUSH
19016: CALL_OW 101
// end else
19020: GO 19115
// begin if buildOil = 1 and buildPower = 0 then
19022: LD_EXP 32
19026: PUSH
19027: LD_INT 1
19029: EQUAL
19030: PUSH
19031: LD_EXP 33
19035: PUSH
19036: LD_INT 0
19038: EQUAL
19039: AND
19040: IFFALSE 19053
// AddMedal ( oil , - 1 ) ;
19042: LD_STRING oil
19044: PPUSH
19045: LD_INT 1
19047: NEG
19048: PPUSH
19049: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19053: LD_EXP 32
19057: PUSH
19058: LD_INT 0
19060: EQUAL
19061: PUSH
19062: LD_EXP 33
19066: PUSH
19067: LD_INT 1
19069: EQUAL
19070: AND
19071: IFFALSE 19084
// AddMedal ( oil , - 2 ) ;
19073: LD_STRING oil
19075: PPUSH
19076: LD_INT 2
19078: NEG
19079: PPUSH
19080: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19084: LD_EXP 32
19088: PUSH
19089: LD_INT 0
19091: EQUAL
19092: PUSH
19093: LD_EXP 33
19097: PUSH
19098: LD_INT 0
19100: EQUAL
19101: AND
19102: IFFALSE 19115
// AddMedal ( oil , - 3 ) ;
19104: LD_STRING oil
19106: PPUSH
19107: LD_INT 3
19109: NEG
19110: PPUSH
19111: CALL_OW 101
// end ; if lostCounter > 3 then
19115: LD_EXP 36
19119: PUSH
19120: LD_INT 3
19122: GREATER
19123: IFFALSE 19138
// begin AddMedal ( deaths , - 1 ) ;
19125: LD_STRING deaths
19127: PPUSH
19128: LD_INT 1
19130: NEG
19131: PPUSH
19132: CALL_OW 101
// end else
19136: GO 19148
// begin AddMedal ( deaths , 1 ) ;
19138: LD_STRING deaths
19140: PPUSH
19141: LD_INT 1
19143: PPUSH
19144: CALL_OW 101
// end ; if honor = 1 then
19148: LD_EXP 37
19152: PUSH
19153: LD_INT 1
19155: EQUAL
19156: IFFALSE 19170
// begin AddMedal ( honour , 1 ) ;
19158: LD_STRING honour
19160: PPUSH
19161: LD_INT 1
19163: PPUSH
19164: CALL_OW 101
// end else
19168: GO 19181
// begin AddMedal ( honour , - 1 ) ;
19170: LD_STRING honour
19172: PPUSH
19173: LD_INT 1
19175: NEG
19176: PPUSH
19177: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19181: LD_STRING Main
19183: PPUSH
19184: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19188: LD_INT 22
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 23
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 21
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: PPUSH
19223: CALL_OW 69
19227: PPUSH
19228: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19232: LD_EXP 1
19236: PPUSH
19237: LD_EXP 42
19241: PUSH
19242: LD_STRING JMM
19244: STR
19245: PPUSH
19246: CALL_OW 38
// if IsOK ( Bobby ) then
19250: LD_EXP 2
19254: PPUSH
19255: CALL_OW 302
19259: IFFALSE 19279
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19261: LD_EXP 2
19265: PPUSH
19266: LD_EXP 42
19270: PUSH
19271: LD_STRING Bobby
19273: STR
19274: PPUSH
19275: CALL_OW 38
// if IsOK ( Cyrus ) then
19279: LD_EXP 3
19283: PPUSH
19284: CALL_OW 302
19288: IFFALSE 19308
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19290: LD_EXP 3
19294: PPUSH
19295: LD_EXP 42
19299: PUSH
19300: LD_STRING Cyrus
19302: STR
19303: PPUSH
19304: CALL_OW 38
// if IsOK ( Lisa ) then
19308: LD_EXP 4
19312: PPUSH
19313: CALL_OW 302
19317: IFFALSE 19337
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19319: LD_EXP 4
19323: PPUSH
19324: LD_EXP 42
19328: PUSH
19329: LD_STRING Lisa
19331: STR
19332: PPUSH
19333: CALL_OW 38
// if IsOK ( Brown ) then
19337: LD_EXP 7
19341: PPUSH
19342: CALL_OW 302
19346: IFFALSE 19366
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19348: LD_EXP 7
19352: PPUSH
19353: LD_EXP 42
19357: PUSH
19358: LD_STRING Brown
19360: STR
19361: PPUSH
19362: CALL_OW 38
// if IsOK ( Donaldson ) then
19366: LD_EXP 13
19370: PPUSH
19371: CALL_OW 302
19375: IFFALSE 19395
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19377: LD_EXP 13
19381: PPUSH
19382: LD_EXP 42
19386: PUSH
19387: LD_STRING Donaldson
19389: STR
19390: PPUSH
19391: CALL_OW 38
// if IsOK ( Frank ) then
19395: LD_EXP 5
19399: PPUSH
19400: CALL_OW 302
19404: IFFALSE 19424
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19406: LD_EXP 5
19410: PPUSH
19411: LD_EXP 42
19415: PUSH
19416: LD_STRING Frank
19418: STR
19419: PPUSH
19420: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19424: LD_INT 50
19426: PUSH
19427: EMPTY
19428: LIST
19429: PUSH
19430: LD_INT 22
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 21
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: LIST
19454: PPUSH
19455: CALL_OW 69
19459: PUSH
19460: LD_EXP 1
19464: PUSH
19465: LD_EXP 2
19469: PUSH
19470: LD_EXP 3
19474: PUSH
19475: LD_EXP 4
19479: PUSH
19480: LD_EXP 7
19484: PUSH
19485: LD_EXP 13
19489: PUSH
19490: LD_EXP 5
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: DIFF
19504: PPUSH
19505: LD_STRING 04_other_survivors
19507: PPUSH
19508: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
19512: LD_INT 22
19514: PPUSH
19515: CALL 19528 0 1
// YouWin ;
19519: CALL_OW 103
// end ;
19523: LD_VAR 0 1
19527: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19528: LD_INT 0
19530: PPUSH
19531: PPUSH
19532: PPUSH
19533: PPUSH
// gammaBase = [ ] ;
19534: LD_ADDR_VAR 0 4
19538: PUSH
19539: EMPTY
19540: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
19541: LD_ADDR_VAR 0 5
19545: PUSH
19546: LD_VAR 0 1
19550: PPUSH
19551: LD_INT 22
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 21
19563: PUSH
19564: LD_INT 3
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 50
19573: PUSH
19574: EMPTY
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: PPUSH
19582: CALL_OW 70
19586: ST_TO_ADDR
// for i in buildings do
19587: LD_ADDR_VAR 0 3
19591: PUSH
19592: LD_VAR 0 5
19596: PUSH
19597: FOR_IN
19598: IFFALSE 19935
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19600: LD_VAR 0 3
19604: PPUSH
19605: CALL_OW 266
19609: PUSH
19610: LD_INT 6
19612: PUSH
19613: LD_INT 7
19615: PUSH
19616: LD_INT 8
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: LIST
19623: IN
19624: IFFALSE 19738
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19626: LD_ADDR_VAR 0 4
19630: PUSH
19631: LD_VAR 0 4
19635: PUSH
19636: LD_VAR 0 3
19640: PPUSH
19641: CALL_OW 266
19645: PUSH
19646: LD_VAR 0 3
19650: PPUSH
19651: CALL_OW 250
19655: PUSH
19656: LD_VAR 0 3
19660: PPUSH
19661: CALL_OW 251
19665: PUSH
19666: LD_VAR 0 3
19670: PPUSH
19671: CALL_OW 254
19675: PUSH
19676: LD_VAR 0 3
19680: PPUSH
19681: CALL_OW 267
19685: PUSH
19686: LD_VAR 0 3
19690: PPUSH
19691: CALL_OW 248
19695: PUSH
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 1
19703: PPUSH
19704: CALL_OW 268
19708: PUSH
19709: LD_VAR 0 3
19713: PPUSH
19714: LD_INT 2
19716: PPUSH
19717: CALL_OW 268
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: PUSH
19732: EMPTY
19733: LIST
19734: ADD
19735: ST_TO_ADDR
19736: GO 19933
// if GetBType ( i ) in [ b_bunker ] then
19738: LD_VAR 0 3
19742: PPUSH
19743: CALL_OW 266
19747: PUSH
19748: LD_INT 32
19750: PUSH
19751: EMPTY
19752: LIST
19753: IN
19754: IFFALSE 19851
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19756: LD_ADDR_VAR 0 4
19760: PUSH
19761: LD_VAR 0 4
19765: PUSH
19766: LD_VAR 0 3
19770: PPUSH
19771: CALL_OW 266
19775: PUSH
19776: LD_VAR 0 3
19780: PPUSH
19781: CALL_OW 250
19785: PUSH
19786: LD_VAR 0 3
19790: PPUSH
19791: CALL_OW 251
19795: PUSH
19796: LD_VAR 0 3
19800: PPUSH
19801: CALL_OW 254
19805: PUSH
19806: LD_VAR 0 3
19810: PPUSH
19811: CALL_OW 267
19815: PUSH
19816: LD_VAR 0 3
19820: PPUSH
19821: CALL_OW 248
19825: PUSH
19826: LD_VAR 0 3
19830: PPUSH
19831: CALL_OW 269
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: PUSH
19845: EMPTY
19846: LIST
19847: ADD
19848: ST_TO_ADDR
19849: GO 19933
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19851: LD_ADDR_VAR 0 4
19855: PUSH
19856: LD_VAR 0 4
19860: PUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: CALL_OW 266
19870: PUSH
19871: LD_VAR 0 3
19875: PPUSH
19876: CALL_OW 250
19880: PUSH
19881: LD_VAR 0 3
19885: PPUSH
19886: CALL_OW 251
19890: PUSH
19891: LD_VAR 0 3
19895: PPUSH
19896: CALL_OW 254
19900: PUSH
19901: LD_VAR 0 3
19905: PPUSH
19906: CALL_OW 267
19910: PUSH
19911: LD_VAR 0 3
19915: PPUSH
19916: CALL_OW 248
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: ADD
19932: ST_TO_ADDR
// end ;
19933: GO 19597
19935: POP
19936: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19937: LD_VAR 0 4
19941: PPUSH
19942: LD_STRING GammaBase
19944: PPUSH
19945: CALL_OW 39
// end ; end_of_file
19949: LD_VAR 0 2
19953: RET
// every 1 1$15 do
19954: GO 19956
19956: DISABLE
// begin if supply <= 13 and supply > 7 then
19957: LD_EXP 34
19961: PUSH
19962: LD_INT 13
19964: LESSEQUAL
19965: PUSH
19966: LD_EXP 34
19970: PUSH
19971: LD_INT 7
19973: GREATER
19974: AND
19975: IFFALSE 19998
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19977: LD_INT 3
19979: PPUSH
19980: LD_INT 5
19982: PPUSH
19983: CALL_OW 12
19987: PPUSH
19988: LD_INT 18
19990: PPUSH
19991: LD_INT 1
19993: PPUSH
19994: CALL_OW 55
// if supply <= 7 and supply > 4 then
19998: LD_EXP 34
20002: PUSH
20003: LD_INT 7
20005: LESSEQUAL
20006: PUSH
20007: LD_EXP 34
20011: PUSH
20012: LD_INT 4
20014: GREATER
20015: AND
20016: IFFALSE 20039
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20018: LD_INT 3
20020: PPUSH
20021: LD_INT 5
20023: PPUSH
20024: CALL_OW 12
20028: PPUSH
20029: LD_INT 19
20031: PPUSH
20032: LD_INT 1
20034: PPUSH
20035: CALL_OW 55
// if supply <= 4 and supply > 0 then
20039: LD_EXP 34
20043: PUSH
20044: LD_INT 4
20046: LESSEQUAL
20047: PUSH
20048: LD_EXP 34
20052: PUSH
20053: LD_INT 0
20055: GREATER
20056: AND
20057: IFFALSE 20080
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20059: LD_INT 3
20061: PPUSH
20062: LD_INT 5
20064: PPUSH
20065: CALL_OW 12
20069: PPUSH
20070: LD_INT 20
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: CALL_OW 55
// if supply > 0 then
20080: LD_EXP 34
20084: PUSH
20085: LD_INT 0
20087: GREATER
20088: IFFALSE 20105
// begin supply = supply - 1 ;
20090: LD_ADDR_EXP 34
20094: PUSH
20095: LD_EXP 34
20099: PUSH
20100: LD_INT 1
20102: MINUS
20103: ST_TO_ADDR
// enable ;
20104: ENABLE
// end ; end ;
20105: END
