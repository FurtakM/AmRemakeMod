// export charactersList ; export JMM , Bobby , Cyrus , Lisa , Frank ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Brian , Jerry ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// ruSoldMinLevel = 0 ;
  12: LD_ADDR_EXP 18
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  20: LD_ADDR_EXP 19
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  28: LD_ADDR_EXP 20
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// debugMode = 0 ;
  36: LD_ADDR_EXP 42
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// firstRussianAttack = 0 ;
  44: LD_ADDR_EXP 23
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// saveDonaldson = 0 ;
  52: LD_ADDR_EXP 24
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// frankScoutBase = 0 ;
  60: LD_ADDR_EXP 25
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// harrAnswer = 0 ;
  68: LD_ADDR_EXP 26
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
  76: LD_ADDR_EXP 27
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
  84: LD_ADDR_EXP 28
  88: PUSH
  89: LD_INT 18900
  91: ST_TO_ADDR
// timerStatus = 0 ;
  92: LD_ADDR_EXP 29
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// startTimer = 0 ;
 100: LD_ADDR_EXP 30
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// factoryDialog = 0 ;
 108: LD_ADDR_EXP 31
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bunkerDialog = 0 ;
 116: LD_ADDR_EXP 32
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// energyVDialog = 0 ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// buildOil = 0 ;
 132: LD_ADDR_EXP 34
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// buildPower = 0 ;
 140: LD_ADDR_EXP 35
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// supply = [ 11 , 12 , 14 ] [ Difficulty ] ;
 148: LD_ADDR_EXP 36
 152: PUSH
 153: LD_INT 11
 155: PUSH
 156: LD_INT 12
 158: PUSH
 159: LD_INT 14
 161: PUSH
 162: EMPTY
 163: LIST
 164: LIST
 165: LIST
 166: PUSH
 167: LD_OWVAR 67
 171: ARRAY
 172: ST_TO_ADDR
// AIEnable = 1 ;
 173: LD_ADDR_EXP 37
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 181: LD_ADDR_EXP 41
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lostCounter = 0 ;
 189: LD_ADDR_EXP 38
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// honor = 1 ;
 197: LD_ADDR_EXP 39
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// escapeAvalaible = 0 ;
 205: LD_ADDR_EXP 40
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// charactersList = [ JMM , Bobby , Cyrus , Lisa , Brian , Jerry , Frank , Brown , Dickens , Woodruff , Campell , Knight , Claptopn , Donaldson ] ;
 213: LD_ADDR_EXP 1
 217: PUSH
 218: LD_STRING JMM
 220: PUSH
 221: LD_STRING Bobby
 223: PUSH
 224: LD_STRING Cyrus
 226: PUSH
 227: LD_STRING Lisa
 229: PUSH
 230: LD_STRING Brian
 232: PUSH
 233: LD_STRING Jerry
 235: PUSH
 236: LD_STRING Frank
 238: PUSH
 239: LD_STRING Brown
 241: PUSH
 242: LD_STRING Dickens
 244: PUSH
 245: LD_STRING Woodruff
 247: PUSH
 248: LD_STRING Campell
 250: PUSH
 251: LD_STRING Knight
 253: PUSH
 254: LD_STRING Claptopn
 256: PUSH
 257: LD_STRING Donaldson
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: LIST
 275: ST_TO_ADDR
// PrepareDifficulty ;
 276: CALL 3513 0 0
// PrepareRussianBase ;
 280: CALL 1840 0 0
// PrepareRussianCommander ;
 284: CALL 1791 0 0
// PrepareHeroes ;
 288: CALL 434 0 0
// SetBName ( ambdept0 , gamma ) ;
 292: LD_INT 4
 294: PPUSH
 295: LD_STRING gamma
 297: PPUSH
 298: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 302: LD_INT 21
 304: PPUSH
 305: LD_STRING fyodor
 307: PPUSH
 308: CALL_OW 500
// end ;
 312: END
// every 0 0$1 trigger debugMode = 1 do var i , c1 , c2 , c3 , c4 , c5 ;
 313: LD_EXP 42
 317: PUSH
 318: LD_INT 1
 320: EQUAL
 321: IFFALSE 431
 323: GO 325
 325: DISABLE
 326: LD_INT 0
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
 333: PPUSH
// begin enable ;
 334: ENABLE
// fogoff ( true ) ;
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 342: LD_ADDR_VAR 0 1
 346: PUSH
 347: LD_INT 22
 349: PUSH
 350: LD_INT 1
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PUSH
 357: LD_INT 21
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PPUSH
 371: CALL_OW 69
 375: PUSH
 376: FOR_IN
 377: IFFALSE 393
// SetLives ( i , 1000 ) ;
 379: LD_VAR 0 1
 383: PPUSH
 384: LD_INT 1000
 386: PPUSH
 387: CALL_OW 234
 391: GO 376
 393: POP
 394: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 395: LD_INT 4
 397: PPUSH
 398: CALL_OW 274
 402: PPUSH
 403: LD_INT 1
 405: PPUSH
 406: LD_INT 9999
 408: PPUSH
 409: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 413: LD_INT 4
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
// end ; end_of_file
 431: PPOPN 6
 433: END
// export function PrepareHeroes ; var i ; begin
 434: LD_INT 0
 436: PPUSH
 437: PPUSH
// uc_side = 1 ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// uc_nation = 1 ;
 446: LD_ADDR_OWVAR 21
 450: PUSH
 451: LD_INT 1
 453: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 454: LD_ADDR_EXP 2
 458: PUSH
 459: LD_STRING JMM
 461: PPUSH
 462: LD_INT 0
 464: PPUSH
 465: CALL 3054 0 2
 469: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 470: LD_ADDR_EXP 5
 474: PUSH
 475: LD_STRING Lisa
 477: PPUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL 3054 0 2
 485: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 486: LD_ADDR_EXP 7
 490: PUSH
 491: LD_STRING Brown
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: CALL 3054 0 2
 501: ST_TO_ADDR
// Dickens = PrepareUnit ( JackDickens , false ) ;
 502: LD_ADDR_EXP 8
 506: PUSH
 507: LD_STRING JackDickens
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL 3054 0 2
 517: ST_TO_ADDR
// Woodruff = PrepareUnit ( EveWoodruff , false ) ;
 518: LD_ADDR_EXP 9
 522: PUSH
 523: LD_STRING EveWoodruff
 525: PPUSH
 526: LD_INT 0
 528: PPUSH
 529: CALL 3054 0 2
 533: ST_TO_ADDR
// Campell = PrepareUnit ( JackCampell , false ) ;
 534: LD_ADDR_EXP 12
 538: PUSH
 539: LD_STRING JackCampell
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL 3054 0 2
 549: ST_TO_ADDR
// Knight = PrepareUnit ( GeorgeKnight , false ) ;
 550: LD_ADDR_EXP 10
 554: PUSH
 555: LD_STRING GeorgeKnight
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: CALL 3054 0 2
 565: ST_TO_ADDR
// Claptopn = PrepareUnit ( BillClaptopn , false ) ;
 566: LD_ADDR_EXP 11
 570: PUSH
 571: LD_STRING BillClaptopn
 573: PPUSH
 574: LD_INT 0
 576: PPUSH
 577: CALL 3054 0 2
 581: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 582: LD_ADDR_EXP 16
 586: PUSH
 587: LD_STRING Harisson
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL 3054 0 2
 597: ST_TO_ADDR
// uc_side = 4 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 4
 605: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 606: LD_ADDR_EXP 13
 610: PUSH
 611: LD_STRING Donaldson
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL 3054 0 2
 621: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_STRING Frank
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL 3054 0 2
 637: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 638: LD_EXP 2
 642: PPUSH
 643: LD_INT 32
 645: PPUSH
 646: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 650: LD_EXP 7
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 665: LD_EXP 7
 669: PPUSH
 670: LD_INT 32
 672: PPUSH
 673: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 677: LD_EXP 8
 681: PPUSH
 682: LD_INT 2
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 692: LD_EXP 9
 696: PPUSH
 697: LD_INT 2
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 707: LD_EXP 12
 711: PPUSH
 712: LD_INT 2
 714: PPUSH
 715: LD_INT 0
 717: PPUSH
 718: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 722: LD_EXP 10
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 737: LD_EXP 11
 741: PPUSH
 742: LD_INT 2
 744: PPUSH
 745: LD_INT 0
 747: PPUSH
 748: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 752: LD_EXP 5
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL_OW 49
// end ;
 767: LD_VAR 0 1
 771: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 772: LD_INT 0
 774: PPUSH
 775: PPUSH
 776: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 777: LD_EXP 13
 781: PPUSH
 782: LD_INT 10
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 792: LD_EXP 6
 796: PPUSH
 797: LD_INT 10
 799: PPUSH
 800: LD_INT 0
 802: PPUSH
 803: CALL_OW 49
// uc_nation = 1 ;
 807: LD_ADDR_OWVAR 21
 811: PUSH
 812: LD_INT 1
 814: ST_TO_ADDR
// uc_side = 4 ;
 815: LD_ADDR_OWVAR 20
 819: PUSH
 820: LD_INT 4
 822: ST_TO_ADDR
// hc_class := 3 ;
 823: LD_ADDR_OWVAR 28
 827: PUSH
 828: LD_INT 3
 830: ST_TO_ADDR
// hc_sex := sex_male ;
 831: LD_ADDR_OWVAR 27
 835: PUSH
 836: LD_INT 1
 838: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 839: LD_ADDR_OWVAR 33
 843: PUSH
 844: LD_STRING SecondCharsGal
 846: ST_TO_ADDR
// hc_face_number := 53 ;
 847: LD_ADDR_OWVAR 34
 851: PUSH
 852: LD_INT 53
 854: ST_TO_ADDR
// hc_name := Freddie Warner ;
 855: LD_ADDR_OWVAR 26
 859: PUSH
 860: LD_STRING Freddie Warner
 862: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
 863: LD_ADDR_OWVAR 31
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: LD_INT 0
 873: PUSH
 874: LD_INT 3
 876: PUSH
 877: LD_INT 0
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: ST_TO_ADDR
// un = CreateHuman ;
 886: LD_ADDR_VAR 0 3
 890: PUSH
 891: CALL_OW 44
 895: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
 896: LD_VAR 0 3
 900: PPUSH
 901: LD_INT 10
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL_OW 49
// hc_class := 1 ;
 911: LD_ADDR_OWVAR 28
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// hc_sex := sex_male ;
 919: LD_ADDR_OWVAR 27
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 927: LD_ADDR_OWVAR 33
 931: PUSH
 932: LD_STRING SecondCharsGal
 934: ST_TO_ADDR
// hc_face_number := 56 ;
 935: LD_ADDR_OWVAR 34
 939: PUSH
 940: LD_INT 56
 942: ST_TO_ADDR
// hc_name := Mel Brennan ;
 943: LD_ADDR_OWVAR 26
 947: PUSH
 948: LD_STRING Mel Brennan
 950: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
 951: LD_ADDR_OWVAR 31
 955: PUSH
 956: LD_INT 2
 958: PUSH
 959: LD_INT 1
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: ST_TO_ADDR
// un = CreateHuman ;
 974: LD_ADDR_VAR 0 3
 978: PUSH
 979: CALL_OW 44
 983: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
 984: LD_VAR 0 3
 988: PPUSH
 989: LD_INT 10
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 49
// for i := 1 to 1 do
 999: LD_ADDR_VAR 0 2
1003: PUSH
1004: DOUBLE
1005: LD_INT 1
1007: DEC
1008: ST_TO_ADDR
1009: LD_INT 1
1011: PUSH
1012: FOR_TO
1013: IFFALSE 1113
// begin hc_gallery =  ;
1015: LD_ADDR_OWVAR 33
1019: PUSH
1020: LD_STRING 
1022: ST_TO_ADDR
// hc_name =  ;
1023: LD_ADDR_OWVAR 26
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( [ 1 , 1 , 1 ] [ Difficulty ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 1
1039: PUSH
1040: LD_INT 1
1042: PUSH
1043: LD_INT 1
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: PUSH
1051: LD_OWVAR 67
1055: ARRAY
1056: PPUSH
1057: LD_INT 3
1059: PUSH
1060: LD_INT 2
1062: PUSH
1063: LD_INT 2
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_OWVAR 67
1075: ARRAY
1076: PPUSH
1077: CALL_OW 12
1081: PPUSH
1082: CALL_OW 380
// un = CreateHuman ;
1086: LD_ADDR_VAR 0 3
1090: PUSH
1091: CALL_OW 44
1095: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1096: LD_VAR 0 3
1100: PPUSH
1101: LD_INT 10
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL_OW 49
// end ;
1111: GO 1012
1113: POP
1114: POP
// end ;
1115: LD_VAR 0 1
1119: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1120: LD_INT 0
1122: PPUSH
1123: PPUSH
1124: PPUSH
// uc_nation = 1 ;
1125: LD_ADDR_OWVAR 21
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// uc_side = 1 ;
1133: LD_ADDR_OWVAR 20
1137: PUSH
1138: LD_INT 1
1140: ST_TO_ADDR
// hc_class := 1 ;
1141: LD_ADDR_OWVAR 28
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// hc_sex := sex_male ;
1149: LD_ADDR_OWVAR 27
1153: PUSH
1154: LD_INT 1
1156: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1157: LD_ADDR_OWVAR 33
1161: PUSH
1162: LD_STRING SecondCharsGal
1164: ST_TO_ADDR
// hc_face_number := 59 ;
1165: LD_ADDR_OWVAR 34
1169: PUSH
1170: LD_INT 59
1172: ST_TO_ADDR
// hc_name := Max Gray ;
1173: LD_ADDR_OWVAR 26
1177: PUSH
1178: LD_STRING Max Gray
1180: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1181: LD_ADDR_OWVAR 31
1185: PUSH
1186: LD_INT 2
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: LD_INT 0
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: ST_TO_ADDR
// un = CreateHuman ;
1204: LD_ADDR_VAR 0 4
1208: PUSH
1209: CALL_OW 44
1213: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1214: LD_VAR 0 4
1218: PPUSH
1219: LD_INT 11
1221: PPUSH
1222: LD_INT 0
1224: PPUSH
1225: CALL_OW 49
// hc_class := 1 ;
1229: LD_ADDR_OWVAR 28
1233: PUSH
1234: LD_INT 1
1236: ST_TO_ADDR
// hc_sex := sex_male ;
1237: LD_ADDR_OWVAR 27
1241: PUSH
1242: LD_INT 1
1244: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1245: LD_ADDR_OWVAR 33
1249: PUSH
1250: LD_STRING SecondCharsGal
1252: ST_TO_ADDR
// hc_face_number := 54 ;
1253: LD_ADDR_OWVAR 34
1257: PUSH
1258: LD_INT 54
1260: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1261: LD_ADDR_OWVAR 26
1265: PUSH
1266: LD_STRING Luigi Ghbellin
1268: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1269: LD_ADDR_OWVAR 31
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 0
1279: PUSH
1280: LD_INT 0
1282: PUSH
1283: LD_INT 1
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: ST_TO_ADDR
// un = CreateHuman ;
1292: LD_ADDR_VAR 0 4
1296: PUSH
1297: CALL_OW 44
1301: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1302: LD_VAR 0 4
1306: PPUSH
1307: LD_INT 11
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// hc_class := 3 ;
1317: LD_ADDR_OWVAR 28
1321: PUSH
1322: LD_INT 3
1324: ST_TO_ADDR
// hc_sex := sex_male ;
1325: LD_ADDR_OWVAR 27
1329: PUSH
1330: LD_INT 1
1332: ST_TO_ADDR
// hc_gallery :=  ;
1333: LD_ADDR_OWVAR 33
1337: PUSH
1338: LD_STRING 
1340: ST_TO_ADDR
// hc_name :=  ;
1341: LD_ADDR_OWVAR 26
1345: PUSH
1346: LD_STRING 
1348: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1349: LD_ADDR_OWVAR 31
1353: PUSH
1354: LD_INT 0
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 3
1362: PUSH
1363: LD_INT 0
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: ST_TO_ADDR
// un = CreateHuman ;
1372: LD_ADDR_VAR 0 4
1376: PUSH
1377: CALL_OW 44
1381: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1382: LD_VAR 0 4
1386: PPUSH
1387: LD_INT 11
1389: PPUSH
1390: LD_INT 0
1392: PPUSH
1393: CALL_OW 49
// if count = 4 then
1397: LD_VAR 0 1
1401: PUSH
1402: LD_INT 4
1404: EQUAL
1405: IFFALSE 1495
// begin hc_class := 1 ;
1407: LD_ADDR_OWVAR 28
1411: PUSH
1412: LD_INT 1
1414: ST_TO_ADDR
// hc_sex := sex_male ;
1415: LD_ADDR_OWVAR 27
1419: PUSH
1420: LD_INT 1
1422: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1423: LD_ADDR_OWVAR 33
1427: PUSH
1428: LD_STRING SecondCharsGal
1430: ST_TO_ADDR
// hc_face_number := 34 ;
1431: LD_ADDR_OWVAR 34
1435: PUSH
1436: LD_INT 34
1438: ST_TO_ADDR
// hc_name :=  ;
1439: LD_ADDR_OWVAR 26
1443: PUSH
1444: LD_STRING 
1446: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1447: LD_ADDR_OWVAR 31
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: LD_INT 0
1457: PUSH
1458: LD_INT 1
1460: PUSH
1461: LD_INT 0
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: ST_TO_ADDR
// un = CreateHuman ;
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: CALL_OW 44
1479: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1480: LD_VAR 0 4
1484: PPUSH
1485: LD_INT 11
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL_OW 49
// end ; if count = 5 then
1495: LD_VAR 0 1
1499: PUSH
1500: LD_INT 5
1502: EQUAL
1503: IFFALSE 1681
// begin hc_class := 1 ;
1505: LD_ADDR_OWVAR 28
1509: PUSH
1510: LD_INT 1
1512: ST_TO_ADDR
// hc_sex := sex_male ;
1513: LD_ADDR_OWVAR 27
1517: PUSH
1518: LD_INT 1
1520: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1521: LD_ADDR_OWVAR 33
1525: PUSH
1526: LD_STRING SecondCharsGal
1528: ST_TO_ADDR
// hc_face_number := 34 ;
1529: LD_ADDR_OWVAR 34
1533: PUSH
1534: LD_INT 34
1536: ST_TO_ADDR
// hc_name :=  ;
1537: LD_ADDR_OWVAR 26
1541: PUSH
1542: LD_STRING 
1544: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1545: LD_ADDR_OWVAR 31
1549: PUSH
1550: LD_INT 2
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: LD_INT 1
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: ST_TO_ADDR
// un = CreateHuman ;
1568: LD_ADDR_VAR 0 4
1572: PUSH
1573: CALL_OW 44
1577: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1578: LD_VAR 0 4
1582: PPUSH
1583: LD_INT 11
1585: PPUSH
1586: LD_INT 0
1588: PPUSH
1589: CALL_OW 49
// hc_class := 1 ;
1593: LD_ADDR_OWVAR 28
1597: PUSH
1598: LD_INT 1
1600: ST_TO_ADDR
// hc_sex := sex_female ;
1601: LD_ADDR_OWVAR 27
1605: PUSH
1606: LD_INT 2
1608: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1609: LD_ADDR_OWVAR 33
1613: PUSH
1614: LD_STRING SecondCharsGal
1616: ST_TO_ADDR
// hc_face_number := 41 ;
1617: LD_ADDR_OWVAR 34
1621: PUSH
1622: LD_INT 41
1624: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
1625: LD_ADDR_OWVAR 26
1629: PUSH
1630: LD_STRING Kate Wadsworth
1632: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
1633: LD_ADDR_OWVAR 31
1637: PUSH
1638: LD_INT 2
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: ST_TO_ADDR
// un = CreateHuman ;
1656: LD_ADDR_VAR 0 4
1660: PUSH
1661: CALL_OW 44
1665: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1666: LD_VAR 0 4
1670: PPUSH
1671: LD_INT 11
1673: PPUSH
1674: LD_INT 0
1676: PPUSH
1677: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
1681: LD_INT 11
1683: PPUSH
1684: LD_INT 22
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 21
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 26
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 70
1723: PUSH
1724: LD_INT 1
1726: ARRAY
1727: PPUSH
1728: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
1732: LD_INT 11
1734: PPUSH
1735: LD_INT 22
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 21
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 26
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 70
1774: PUSH
1775: LD_INT 1
1777: ARRAY
1778: PPUSH
1779: LD_STRING D6-Sol3-1
1781: PPUSH
1782: CALL_OW 88
// end ; end_of_file
1786: LD_VAR 0 2
1790: RET
// export function PrepareRussianCommander ; begin
1791: LD_INT 0
1793: PPUSH
// uc_side = 3 ;
1794: LD_ADDR_OWVAR 20
1798: PUSH
1799: LD_INT 3
1801: ST_TO_ADDR
// uc_nation = 3 ;
1802: LD_ADDR_OWVAR 21
1806: PUSH
1807: LD_INT 3
1809: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
1810: LD_ADDR_EXP 17
1814: PUSH
1815: LD_STRING Stolypin
1817: PPUSH
1818: CALL_OW 25
1822: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
1823: LD_EXP 17
1827: PPUSH
1828: LD_INT 21
1830: PPUSH
1831: CALL_OW 52
// end ;
1835: LD_VAR 0 1
1839: RET
// export function PrepareRussianBase ; var i ; begin
1840: LD_INT 0
1842: PPUSH
1843: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
1844: LD_INT 3
1846: PPUSH
1847: LD_INT 3
1849: PPUSH
1850: LD_INT 22
1852: PPUSH
1853: LD_EXP 18
1857: PPUSH
1858: LD_EXP 19
1862: PPUSH
1863: CALL_OW 12
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: LD_INT 2
1873: PPUSH
1874: CALL 3111 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
1878: LD_INT 3
1880: PPUSH
1881: LD_INT 3
1883: PPUSH
1884: LD_INT 21
1886: PPUSH
1887: LD_EXP 18
1891: PPUSH
1892: LD_EXP 19
1896: PPUSH
1897: CALL_OW 12
1901: PPUSH
1902: LD_INT 2
1904: PPUSH
1905: LD_INT 3
1907: PPUSH
1908: CALL 3111 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
1912: LD_INT 3
1914: PPUSH
1915: LD_INT 3
1917: PPUSH
1918: LD_INT 1
1920: PPUSH
1921: LD_EXP 18
1925: PPUSH
1926: LD_EXP 19
1930: PPUSH
1931: CALL_OW 12
1935: PPUSH
1936: LD_INT 4
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL 3111 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
1946: LD_INT 3
1948: PPUSH
1949: LD_INT 3
1951: PPUSH
1952: LD_INT 24
1954: PPUSH
1955: LD_EXP 18
1959: PPUSH
1960: LD_EXP 19
1964: PPUSH
1965: CALL_OW 12
1969: PPUSH
1970: LD_INT 3
1972: PPUSH
1973: LD_INT 6
1975: PPUSH
1976: CALL 3111 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1980: LD_ADDR_VAR 0 2
1984: PUSH
1985: LD_INT 22
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 30
1997: PUSH
1998: LD_INT 32
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: PUSH
2014: FOR_IN
2015: IFFALSE 2055
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2017: LD_INT 3
2019: PPUSH
2020: LD_INT 3
2022: PPUSH
2023: LD_VAR 0 2
2027: PPUSH
2028: LD_EXP 18
2032: PPUSH
2033: LD_EXP 19
2037: PPUSH
2038: CALL_OW 12
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: CALL 3111 0 6
2053: GO 2014
2055: POP
2056: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2057: LD_ADDR_VAR 0 2
2061: PUSH
2062: LD_INT 22
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2120
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2094: LD_EXP 18
2098: PPUSH
2099: LD_EXP 19
2103: PPUSH
2104: CALL_OW 12
2108: PPUSH
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL 3221 0 2
2118: GO 2091
2120: POP
2121: POP
// end ;
2122: LD_VAR 0 1
2126: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2127: LD_INT 0
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// uc_side = 6 ;
2133: LD_ADDR_OWVAR 20
2137: PUSH
2138: LD_INT 6
2140: ST_TO_ADDR
// uc_nation = 3 ;
2141: LD_ADDR_OWVAR 21
2145: PUSH
2146: LD_INT 3
2148: ST_TO_ADDR
// for i := 1 to [ 2 , 1 , 1 ] [ Difficulty ] do
2149: LD_ADDR_VAR 0 2
2153: PUSH
2154: DOUBLE
2155: LD_INT 1
2157: DEC
2158: ST_TO_ADDR
2159: LD_INT 2
2161: PUSH
2162: LD_INT 1
2164: PUSH
2165: LD_INT 1
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: FOR_TO
2180: IFFALSE 2340
// begin vc_engine = 1 ;
2182: LD_ADDR_OWVAR 39
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// vc_control = 1 ;
2190: LD_ADDR_OWVAR 38
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2198: LD_ADDR_OWVAR 40
2202: PUSH
2203: LD_INT 42
2205: PUSH
2206: LD_INT 42
2208: PUSH
2209: LD_INT 43
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_OWVAR 67
2221: ARRAY
2222: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2223: LD_ADDR_OWVAR 37
2227: PUSH
2228: LD_INT 21
2230: PUSH
2231: LD_INT 22
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: LD_OWVAR 67
2246: ARRAY
2247: ST_TO_ADDR
// veh = CreateVehicle ;
2248: LD_ADDR_VAR 0 3
2252: PUSH
2253: CALL_OW 45
2257: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_INT 3
2265: PPUSH
2266: LD_INT 0
2268: PPUSH
2269: CALL_OW 49
// hc_gallery =  ;
2273: LD_ADDR_OWVAR 33
2277: PUSH
2278: LD_STRING 
2280: ST_TO_ADDR
// hc_name =  ;
2281: LD_ADDR_OWVAR 26
2285: PUSH
2286: LD_STRING 
2288: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2289: LD_INT 0
2291: PPUSH
2292: LD_INT 3
2294: PPUSH
2295: LD_EXP 18
2299: PPUSH
2300: LD_EXP 19
2304: PPUSH
2305: CALL_OW 12
2309: PPUSH
2310: CALL_OW 380
// un = CreateHuman ;
2314: LD_ADDR_VAR 0 4
2318: PUSH
2319: CALL_OW 44
2323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2324: LD_VAR 0 4
2328: PPUSH
2329: LD_VAR 0 3
2333: PPUSH
2334: CALL_OW 52
// end ;
2338: GO 2179
2340: POP
2341: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2342: LD_INT 0
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: LD_EXP 18
2352: PPUSH
2353: LD_EXP 19
2357: PPUSH
2358: CALL_OW 12
2362: PUSH
2363: LD_INT 2
2365: PLUS
2366: PPUSH
2367: CALL_OW 380
// un = CreateHuman ;
2371: LD_ADDR_VAR 0 4
2375: PUSH
2376: CALL_OW 44
2380: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2381: LD_VAR 0 4
2385: PPUSH
2386: LD_INT 3
2388: PPUSH
2389: LD_INT 0
2391: PPUSH
2392: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2396: LD_INT 0
2398: PPUSH
2399: LD_INT 4
2401: PPUSH
2402: LD_EXP 18
2406: PPUSH
2407: LD_EXP 19
2411: PPUSH
2412: CALL_OW 12
2416: PUSH
2417: LD_INT 2
2419: PLUS
2420: PPUSH
2421: CALL_OW 380
// un = CreateHuman ;
2425: LD_ADDR_VAR 0 4
2429: PUSH
2430: CALL_OW 44
2434: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_INT 3
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
2450: LD_ADDR_VAR 0 2
2454: PUSH
2455: DOUBLE
2456: LD_INT 1
2458: DEC
2459: ST_TO_ADDR
2460: LD_INT 2
2462: PUSH
2463: LD_INT 3
2465: PUSH
2466: LD_INT 3
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: PUSH
2474: LD_OWVAR 67
2478: ARRAY
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 3
2485: PPUSH
2486: CALL_OW 12
2490: PLUS
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2563
// begin hc_gallery =  ;
2495: LD_ADDR_OWVAR 33
2499: PUSH
2500: LD_STRING 
2502: ST_TO_ADDR
// hc_name =  ;
2503: LD_ADDR_OWVAR 26
2507: PUSH
2508: LD_STRING 
2510: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2511: LD_INT 0
2513: PPUSH
2514: LD_INT 1
2516: PPUSH
2517: LD_EXP 18
2521: PPUSH
2522: LD_EXP 19
2526: PPUSH
2527: CALL_OW 12
2531: PPUSH
2532: CALL_OW 380
// un = CreateHuman ;
2536: LD_ADDR_VAR 0 4
2540: PUSH
2541: CALL_OW 44
2545: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2546: LD_VAR 0 4
2550: PPUSH
2551: LD_INT 3
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 49
// end ;
2561: GO 2492
2563: POP
2564: POP
// vc_engine = 1 ;
2565: LD_ADDR_OWVAR 39
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// vc_control = 1 ;
2573: LD_ADDR_OWVAR 38
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// vc_weapon = 51 ;
2581: LD_ADDR_OWVAR 40
2585: PUSH
2586: LD_INT 51
2588: ST_TO_ADDR
// vc_chassis = 22 ;
2589: LD_ADDR_OWVAR 37
2593: PUSH
2594: LD_INT 22
2596: ST_TO_ADDR
// veh = CreateVehicle ;
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: CALL_OW 45
2606: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2607: LD_VAR 0 3
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
2622: LD_VAR 0 3
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: LD_INT 100
2632: PPUSH
2633: CALL_OW 290
// hc_gallery =  ;
2637: LD_ADDR_OWVAR 33
2641: PUSH
2642: LD_STRING 
2644: ST_TO_ADDR
// hc_name =  ;
2645: LD_ADDR_OWVAR 26
2649: PUSH
2650: LD_STRING 
2652: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2653: LD_INT 0
2655: PPUSH
2656: LD_INT 3
2658: PPUSH
2659: LD_EXP 18
2663: PPUSH
2664: LD_EXP 19
2668: PPUSH
2669: CALL_OW 12
2673: PPUSH
2674: CALL_OW 380
// un = CreateHuman ;
2678: LD_ADDR_VAR 0 4
2682: PUSH
2683: CALL_OW 44
2687: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2688: LD_VAR 0 4
2692: PPUSH
2693: LD_VAR 0 3
2697: PPUSH
2698: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
2702: LD_ADDR_VAR 0 2
2706: PUSH
2707: LD_INT 22
2709: PUSH
2710: LD_INT 6
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 1
2719: PUSH
2720: LD_INT 3
2722: PUSH
2723: LD_INT 25
2725: PUSH
2726: LD_INT 2
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 25
2742: PUSH
2743: LD_INT 4
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 69
2767: PUSH
2768: FOR_IN
2769: IFFALSE 2788
// ComAgressiveMove ( i , 45 , 46 ) ;
2771: LD_VAR 0 2
2775: PPUSH
2776: LD_INT 45
2778: PPUSH
2779: LD_INT 46
2781: PPUSH
2782: CALL_OW 114
2786: GO 2768
2788: POP
2789: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
2790: LD_ADDR_VAR 0 2
2794: PUSH
2795: LD_INT 22
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 25
2807: PUSH
2808: LD_INT 2
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PPUSH
2819: CALL_OW 69
2823: PUSH
2824: FOR_IN
2825: IFFALSE 2856
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
2827: LD_ADDR_EXP 21
2831: PUSH
2832: LD_VAR 0 2
2836: PPUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 48
2842: PPUSH
2843: LD_INT 55
2845: PPUSH
2846: LD_INT 5
2848: PPUSH
2849: CALL_OW 145
2853: ST_TO_ADDR
2854: GO 2824
2856: POP
2857: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: LD_INT 22
2865: PUSH
2866: LD_INT 6
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: LD_INT 25
2875: PUSH
2876: LD_INT 4
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PPUSH
2887: CALL_OW 69
2891: PUSH
2892: FOR_IN
2893: IFFALSE 2912
// ComMoveXY ( i , 39 , 55 ) ;
2895: LD_VAR 0 2
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 55
2905: PPUSH
2906: CALL_OW 111
2910: GO 2892
2912: POP
2913: POP
// end ;
2914: LD_VAR 0 1
2918: RET
// export function PrepareFirstAttack ; var i , un ; begin
2919: LD_INT 0
2921: PPUSH
2922: PPUSH
2923: PPUSH
// uc_side = 5 ;
2924: LD_ADDR_OWVAR 20
2928: PUSH
2929: LD_INT 5
2931: ST_TO_ADDR
// uc_nation = 3 ;
2932: LD_ADDR_OWVAR 21
2936: PUSH
2937: LD_INT 3
2939: ST_TO_ADDR
// for i := 1 to 4 do
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: DOUBLE
2946: LD_INT 1
2948: DEC
2949: ST_TO_ADDR
2950: LD_INT 4
2952: PUSH
2953: FOR_TO
2954: IFFALSE 3039
// begin hc_gallery =  ;
2956: LD_ADDR_OWVAR 33
2960: PUSH
2961: LD_STRING 
2963: ST_TO_ADDR
// hc_name =  ;
2964: LD_ADDR_OWVAR 26
2968: PUSH
2969: LD_STRING 
2971: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2972: LD_INT 0
2974: PPUSH
2975: LD_INT 1
2977: PPUSH
2978: LD_EXP 18
2982: PPUSH
2983: LD_EXP 19
2987: PPUSH
2988: CALL_OW 12
2992: PPUSH
2993: CALL_OW 380
// un = CreateHuman ;
2997: LD_ADDR_VAR 0 3
3001: PUSH
3002: CALL_OW 44
3006: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3007: LD_VAR 0 3
3011: PPUSH
3012: LD_INT 4
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3022: LD_VAR 0 3
3026: PPUSH
3027: LD_INT 48
3029: PPUSH
3030: LD_INT 14
3032: PPUSH
3033: CALL_OW 114
// end ;
3037: GO 2953
3039: POP
3040: POP
// firstRussianAttack = 1 ;
3041: LD_ADDR_EXP 23
3045: PUSH
3046: LD_INT 1
3048: ST_TO_ADDR
// end ; end_of_file
3049: LD_VAR 0 1
3053: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3054: LD_INT 0
3056: PPUSH
3057: PPUSH
// if exist_mode then
3058: LD_VAR 0 2
3062: IFFALSE 3081
// begin unit := CreateCharacter ( ident ) ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 34
3078: ST_TO_ADDR
// end else
3079: GO 3096
// begin unit := NewCharacter ( ident ) ;
3081: LD_ADDR_VAR 0 4
3085: PUSH
3086: LD_VAR 0 1
3090: PPUSH
3091: CALL_OW 25
3095: ST_TO_ADDR
// end ; result := unit ;
3096: LD_ADDR_VAR 0 3
3100: PUSH
3101: LD_VAR 0 4
3105: ST_TO_ADDR
// end ;
3106: LD_VAR 0 3
3110: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3111: LD_INT 0
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
// for i = 1 to count do
3117: LD_ADDR_VAR 0 8
3121: PUSH
3122: DOUBLE
3123: LD_INT 1
3125: DEC
3126: ST_TO_ADDR
3127: LD_VAR 0 6
3131: PUSH
3132: FOR_TO
3133: IFFALSE 3214
// begin uc_side = side ;
3135: LD_ADDR_OWVAR 20
3139: PUSH
3140: LD_VAR 0 1
3144: ST_TO_ADDR
// uc_nation = nation ;
3145: LD_ADDR_OWVAR 21
3149: PUSH
3150: LD_VAR 0 2
3154: ST_TO_ADDR
// hc_gallery =  ;
3155: LD_ADDR_OWVAR 33
3159: PUSH
3160: LD_STRING 
3162: ST_TO_ADDR
// hc_name =  ;
3163: LD_ADDR_OWVAR 26
3167: PUSH
3168: LD_STRING 
3170: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3171: LD_INT 0
3173: PPUSH
3174: LD_VAR 0 5
3178: PPUSH
3179: LD_VAR 0 4
3183: PPUSH
3184: CALL_OW 380
// un = CreateHuman ;
3188: LD_ADDR_VAR 0 10
3192: PUSH
3193: CALL_OW 44
3197: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3198: LD_VAR 0 10
3202: PPUSH
3203: LD_VAR 0 3
3207: PPUSH
3208: CALL_OW 52
// end ;
3212: GO 3132
3214: POP
3215: POP
// end ;
3216: LD_VAR 0 7
3220: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
// uc_side := GetSide ( b ) ;
3226: LD_ADDR_OWVAR 20
3230: PUSH
3231: LD_VAR 0 2
3235: PPUSH
3236: CALL_OW 255
3240: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3241: LD_ADDR_OWVAR 21
3245: PUSH
3246: LD_VAR 0 2
3250: PPUSH
3251: CALL_OW 248
3255: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3256: LD_INT 0
3258: PPUSH
3259: LD_INT 1
3261: PPUSH
3262: LD_VAR 0 1
3266: PPUSH
3267: CALL_OW 380
// un = CreateHuman ;
3271: LD_ADDR_VAR 0 4
3275: PUSH
3276: CALL_OW 44
3280: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3281: LD_ADDR_VAR 0 5
3285: PUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: CALL_OW 254
3295: PUSH
3296: LD_INT 3
3298: MINUS
3299: ST_TO_ADDR
// if dir < 0 then
3300: LD_VAR 0 5
3304: PUSH
3305: LD_INT 0
3307: LESS
3308: IFFALSE 3324
// dir := 6 + dir ;
3310: LD_ADDR_VAR 0 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: LD_VAR 0 5
3322: PLUS
3323: ST_TO_ADDR
// SetDir ( un , dir ) ;
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_VAR 0 5
3333: PPUSH
3334: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_VAR 0 2
3347: PPUSH
3348: CALL_OW 52
// end ;
3352: LD_VAR 0 3
3356: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3357: LD_INT 0
3359: PPUSH
3360: PPUSH
3361: PPUSH
// rnd = rand ( 1 , characters ) ;
3362: LD_ADDR_VAR 0 6
3366: PUSH
3367: LD_INT 1
3369: PPUSH
3370: LD_VAR 0 1
3374: PPUSH
3375: CALL_OW 12
3379: ST_TO_ADDR
// for i = 1 to characters do
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: DOUBLE
3386: LD_INT 1
3388: DEC
3389: ST_TO_ADDR
3390: LD_VAR 0 1
3394: PUSH
3395: FOR_TO
3396: IFFALSE 3506
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3398: LD_VAR 0 5
3402: PUSH
3403: LD_VAR 0 6
3407: EQUAL
3408: PUSH
3409: LD_VAR 0 1
3413: PUSH
3414: LD_VAR 0 5
3418: ARRAY
3419: PPUSH
3420: CALL_OW 258
3424: PUSH
3425: LD_INT 1
3427: EQUAL
3428: AND
3429: IFFALSE 3451
// Say ( characters [ i ] , dialogMID ) ;
3431: LD_VAR 0 1
3435: PUSH
3436: LD_VAR 0 5
3440: ARRAY
3441: PPUSH
3442: LD_VAR 0 2
3446: PPUSH
3447: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3451: LD_VAR 0 5
3455: PUSH
3456: LD_VAR 0 6
3460: EQUAL
3461: PUSH
3462: LD_VAR 0 1
3466: PUSH
3467: LD_VAR 0 5
3471: ARRAY
3472: PPUSH
3473: CALL_OW 258
3477: PUSH
3478: LD_INT 2
3480: EQUAL
3481: AND
3482: IFFALSE 3504
// Say ( characters [ i ] , dialogFID ) ;
3484: LD_VAR 0 1
3488: PUSH
3489: LD_VAR 0 5
3493: ARRAY
3494: PPUSH
3495: LD_VAR 0 3
3499: PPUSH
3500: CALL_OW 88
// end ;
3504: GO 3395
3506: POP
3507: POP
// end ;
3508: LD_VAR 0 4
3512: RET
// export function PrepareDifficulty ; begin
3513: LD_INT 0
3515: PPUSH
// if Difficulty = 1 then
3516: LD_OWVAR 67
3520: PUSH
3521: LD_INT 1
3523: EQUAL
3524: IFFALSE 3542
// begin RuSoldMinLevel = 0 ;
3526: LD_ADDR_EXP 18
3530: PUSH
3531: LD_INT 0
3533: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3534: LD_ADDR_EXP 19
3538: PUSH
3539: LD_INT 2
3541: ST_TO_ADDR
// end ; if Difficulty = 2 then
3542: LD_OWVAR 67
3546: PUSH
3547: LD_INT 2
3549: EQUAL
3550: IFFALSE 3588
// begin RuSoldMinLevel = 1 ;
3552: LD_ADDR_EXP 18
3556: PUSH
3557: LD_INT 1
3559: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3560: LD_ADDR_EXP 19
3564: PUSH
3565: LD_INT 2
3567: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
3568: LD_INT 14
3570: PPUSH
3571: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3575: LD_INT 51
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: LD_INT 1
3583: PPUSH
3584: CALL_OW 322
// end ; if Difficulty = 3 then
3588: LD_OWVAR 67
3592: PUSH
3593: LD_INT 3
3595: EQUAL
3596: IFFALSE 3664
// begin RuSoldMinLevel = 1 ;
3598: LD_ADDR_EXP 18
3602: PUSH
3603: LD_INT 1
3605: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
3606: LD_ADDR_EXP 19
3610: PUSH
3611: LD_INT 3
3613: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
3614: LD_INT 13
3616: PPUSH
3617: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
3621: LD_INT 14
3623: PPUSH
3624: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3628: LD_INT 51
3630: PPUSH
3631: LD_INT 3
3633: PPUSH
3634: LD_INT 1
3636: PPUSH
3637: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
3641: LD_INT 52
3643: PPUSH
3644: LD_INT 3
3646: PPUSH
3647: LD_INT 1
3649: PPUSH
3650: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
3654: LD_INT 25
3656: PPUSH
3657: LD_INT 44
3659: PPUSH
3660: CALL_OW 431
// end ; end ;
3664: LD_VAR 0 1
3668: RET
// export function EnergyDialog ; begin
3669: LD_INT 0
3671: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
3672: LD_INT 46
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL_OW 321
3682: PUSH
3683: LD_INT 1
3685: EQUAL
3686: PUSH
3687: LD_INT 35
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: CALL_OW 321
3697: PUSH
3698: LD_INT 1
3700: EQUAL
3701: AND
3702: IFFALSE 3726
// begin Say ( JMM , D9c-JMM-1 ) ;
3704: LD_EXP 2
3708: PPUSH
3709: LD_STRING D9c-JMM-1
3711: PPUSH
3712: CALL_OW 88
// energyVDialog = 1 ;
3716: LD_ADDR_EXP 33
3720: PUSH
3721: LD_INT 1
3723: ST_TO_ADDR
// end else
3724: GO 3880
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
3726: LD_INT 35
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 321
3736: PUSH
3737: LD_INT 2
3739: EQUAL
3740: PUSH
3741: LD_EXP 33
3745: PUSH
3746: LD_INT 0
3748: EQUAL
3749: AND
3750: IFFALSE 3772
// begin Say ( JMM , D9c-JMM-1a ) ;
3752: LD_EXP 2
3756: PPUSH
3757: LD_STRING D9c-JMM-1a
3759: PPUSH
3760: CALL_OW 88
// energyVDialog = 1 ;
3764: LD_ADDR_EXP 33
3768: PUSH
3769: LD_INT 1
3771: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
3772: LD_INT 46
3774: PPUSH
3775: LD_INT 1
3777: PPUSH
3778: CALL_OW 321
3782: PUSH
3783: LD_INT 2
3785: EQUAL
3786: PUSH
3787: LD_EXP 33
3791: PUSH
3792: LD_INT 0
3794: EQUAL
3795: AND
3796: IFFALSE 3818
// begin Say ( JMM , D9c-JMM-1b ) ;
3798: LD_EXP 2
3802: PPUSH
3803: LD_STRING D9c-JMM-1b
3805: PPUSH
3806: CALL_OW 88
// energyVDialog = 1 ;
3810: LD_ADDR_EXP 33
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
3818: LD_INT 46
3820: PPUSH
3821: LD_INT 1
3823: PPUSH
3824: CALL_OW 321
3828: PUSH
3829: LD_INT 2
3831: EQUAL
3832: PUSH
3833: LD_INT 21
3835: PPUSH
3836: LD_INT 1
3838: PPUSH
3839: CALL_OW 321
3843: PUSH
3844: LD_INT 2
3846: EQUAL
3847: AND
3848: PUSH
3849: LD_EXP 33
3853: PUSH
3854: LD_INT 0
3856: EQUAL
3857: AND
3858: IFFALSE 3880
// begin Say ( JMM , D9c-JMM-1c ) ;
3860: LD_EXP 2
3864: PPUSH
3865: LD_STRING D9c-JMM-1c
3867: PPUSH
3868: CALL_OW 88
// energyVDialog = 1 ;
3872: LD_ADDR_EXP 33
3876: PUSH
3877: LD_INT 1
3879: ST_TO_ADDR
// end ; end ; end ;
3880: LD_VAR 0 1
3884: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
3885: LD_INT 0
3887: PPUSH
3888: PPUSH
3889: PPUSH
3890: PPUSH
3891: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
3892: LD_VAR 0 1
3896: NOT
3897: PUSH
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 256
3907: PUSH
3908: LD_INT 250
3910: LESS
3911: OR
3912: PUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 314
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: CALL_OW 261
3932: PUSH
3933: LD_INT 20
3935: GREATER
3936: AND
3937: OR
3938: IFFALSE 3942
// exit ;
3940: GO 4307
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 261
3951: PUSH
3952: LD_INT 20
3954: LESS
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 110
3965: PUSH
3966: LD_INT 21
3968: EQUAL
3969: NOT
3970: AND
3971: IFFALSE 3998
// begin ComStop ( bulldozer ) ;
3973: LD_VAR 0 1
3977: PPUSH
3978: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
3982: LD_VAR 0 1
3986: PPUSH
3987: LD_INT 21
3989: PPUSH
3990: CALL_OW 109
// exit ;
3994: GO 4307
// end else
3996: GO 4025
// if GetFuel ( bulldozer ) > 20 then
3998: LD_VAR 0 1
4002: PPUSH
4003: CALL_OW 261
4007: PUSH
4008: LD_INT 20
4010: GREATER
4011: IFFALSE 4025
// SetTag ( bulldozer , 0 ) ;
4013: LD_VAR 0 1
4017: PPUSH
4018: LD_INT 0
4020: PPUSH
4021: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4025: LD_ADDR_VAR 0 5
4029: PUSH
4030: LD_VAR 0 2
4034: PPUSH
4035: CALL_OW 353
4039: ST_TO_ADDR
// tmp := [ ] ;
4040: LD_ADDR_VAR 0 6
4044: PUSH
4045: EMPTY
4046: ST_TO_ADDR
// for i = 1 to list do
4047: LD_ADDR_VAR 0 4
4051: PUSH
4052: DOUBLE
4053: LD_INT 1
4055: DEC
4056: ST_TO_ADDR
4057: LD_VAR 0 5
4061: PUSH
4062: FOR_TO
4063: IFFALSE 4161
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4065: LD_VAR 0 5
4069: PUSH
4070: LD_VAR 0 4
4074: ARRAY
4075: PUSH
4076: LD_INT 1
4078: ARRAY
4079: PPUSH
4080: LD_VAR 0 5
4084: PUSH
4085: LD_VAR 0 4
4089: ARRAY
4090: PUSH
4091: LD_INT 2
4093: ARRAY
4094: PPUSH
4095: CALL_OW 554
4099: IFFALSE 4159
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4101: LD_ADDR_VAR 0 6
4105: PUSH
4106: LD_VAR 0 6
4110: PPUSH
4111: LD_VAR 0 6
4115: PUSH
4116: LD_INT 1
4118: PLUS
4119: PPUSH
4120: LD_VAR 0 5
4124: PUSH
4125: LD_VAR 0 4
4129: ARRAY
4130: PUSH
4131: LD_INT 1
4133: ARRAY
4134: PUSH
4135: LD_VAR 0 5
4139: PUSH
4140: LD_VAR 0 4
4144: ARRAY
4145: PUSH
4146: LD_INT 2
4148: ARRAY
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PPUSH
4154: CALL_OW 1
4158: ST_TO_ADDR
// end ;
4159: GO 4062
4161: POP
4162: POP
// ComStop ( bulldozer ) ;
4163: LD_VAR 0 1
4167: PPUSH
4168: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
4172: LD_ADDR_VAR 0 7
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 250
4186: PUSH
4187: LD_VAR 0 1
4191: PPUSH
4192: CALL_OW 251
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: ST_TO_ADDR
// for i = tmp downto 1 do
4201: LD_ADDR_VAR 0 4
4205: PUSH
4206: DOUBLE
4207: LD_VAR 0 6
4211: INC
4212: ST_TO_ADDR
4213: LD_INT 1
4215: PUSH
4216: FOR_DOWNTO
4217: IFFALSE 4305
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
4219: LD_ADDR_VAR 0 7
4223: PUSH
4224: LD_VAR 0 7
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: PPUSH
4233: LD_VAR 0 7
4237: PUSH
4238: LD_INT 2
4240: ARRAY
4241: PPUSH
4242: LD_VAR 0 6
4246: PPUSH
4247: CALL 4408 0 3
4251: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 7
4261: PUSH
4262: LD_INT 1
4264: ARRAY
4265: PPUSH
4266: LD_VAR 0 7
4270: PUSH
4271: LD_INT 2
4273: ARRAY
4274: PPUSH
4275: CALL 4312 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
4279: LD_ADDR_VAR 0 6
4283: PUSH
4284: LD_VAR 0 6
4288: PPUSH
4289: LD_VAR 0 7
4293: PUSH
4294: LD_INT 3
4296: ARRAY
4297: PPUSH
4298: CALL_OW 3
4302: ST_TO_ADDR
// end ;
4303: GO 4216
4305: POP
4306: POP
// end ;
4307: LD_VAR 0 3
4311: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
4312: LD_INT 0
4314: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
4315: LD_VAR 0 2
4319: PPUSH
4320: LD_VAR 0 3
4324: PPUSH
4325: CALL_OW 351
4329: PUSH
4330: LD_VAR 0 2
4334: PPUSH
4335: LD_VAR 0 3
4339: PPUSH
4340: CALL_OW 554
4344: AND
4345: PUSH
4346: LD_VAR 0 2
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 488
4360: AND
4361: PUSH
4362: LD_VAR 0 2
4366: PPUSH
4367: LD_VAR 0 3
4371: PPUSH
4372: CALL_OW 428
4376: PUSH
4377: LD_INT 1
4379: NEG
4380: EQUAL
4381: AND
4382: IFFALSE 4403
// AddComMoveXY ( bulldozer , x , y ) ;
4384: LD_VAR 0 1
4388: PPUSH
4389: LD_VAR 0 2
4393: PPUSH
4394: LD_VAR 0 3
4398: PPUSH
4399: CALL_OW 171
// end ;
4403: LD_VAR 0 4
4407: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
4408: LD_INT 0
4410: PPUSH
4411: PPUSH
4412: PPUSH
4413: PPUSH
4414: PPUSH
4415: PPUSH
4416: PPUSH
// dist := 99999 ;
4417: LD_ADDR_VAR 0 6
4421: PUSH
4422: LD_INT 99999
4424: ST_TO_ADDR
// for i = 1 to list do
4425: LD_ADDR_VAR 0 5
4429: PUSH
4430: DOUBLE
4431: LD_INT 1
4433: DEC
4434: ST_TO_ADDR
4435: LD_VAR 0 3
4439: PUSH
4440: FOR_TO
4441: IFFALSE 4579
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
4443: LD_ADDR_VAR 0 7
4447: PUSH
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_VAR 0 2
4457: PPUSH
4458: LD_VAR 0 3
4462: PUSH
4463: LD_VAR 0 5
4467: ARRAY
4468: PUSH
4469: LD_INT 1
4471: ARRAY
4472: PPUSH
4473: LD_VAR 0 3
4477: PUSH
4478: LD_VAR 0 5
4482: ARRAY
4483: PUSH
4484: LD_INT 2
4486: ARRAY
4487: PPUSH
4488: CALL_OW 298
4492: ST_TO_ADDR
// if d = 0 then
4493: LD_VAR 0 7
4497: PUSH
4498: LD_INT 0
4500: EQUAL
4501: IFFALSE 4505
// continue ;
4503: GO 4440
// if d < dist then
4505: LD_VAR 0 7
4509: PUSH
4510: LD_VAR 0 6
4514: LESS
4515: IFFALSE 4577
// begin _x := list [ i ] [ 1 ] ;
4517: LD_ADDR_VAR 0 8
4521: PUSH
4522: LD_VAR 0 3
4526: PUSH
4527: LD_VAR 0 5
4531: ARRAY
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
4537: LD_ADDR_VAR 0 9
4541: PUSH
4542: LD_VAR 0 3
4546: PUSH
4547: LD_VAR 0 5
4551: ARRAY
4552: PUSH
4553: LD_INT 2
4555: ARRAY
4556: ST_TO_ADDR
// _i := i ;
4557: LD_ADDR_VAR 0 10
4561: PUSH
4562: LD_VAR 0 5
4566: ST_TO_ADDR
// dist := d ;
4567: LD_ADDR_VAR 0 6
4571: PUSH
4572: LD_VAR 0 7
4576: ST_TO_ADDR
// end ; end ;
4577: GO 4440
4579: POP
4580: POP
// result := [ _x , _y , _i , dist ] ;
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: LD_VAR 0 8
4590: PUSH
4591: LD_VAR 0 9
4595: PUSH
4596: LD_VAR 0 10
4600: PUSH
4601: LD_VAR 0 6
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: ST_TO_ADDR
// end ;
4612: LD_VAR 0 4
4616: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4617: LD_INT 0
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
// for i = 1 to 72 do
4623: LD_ADDR_VAR 0 5
4627: PUSH
4628: DOUBLE
4629: LD_INT 1
4631: DEC
4632: ST_TO_ADDR
4633: LD_INT 72
4635: PUSH
4636: FOR_TO
4637: IFFALSE 4695
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4639: LD_VAR 0 5
4643: PPUSH
4644: LD_VAR 0 1
4648: PPUSH
4649: CALL_OW 321
4653: PUSH
4654: LD_INT 1
4656: EQUAL
4657: PUSH
4658: LD_VAR 0 5
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 482
4672: PUSH
4673: LD_INT 1
4675: EQUAL
4676: AND
4677: IFFALSE 4693
// AddComResearch ( lab , i ) ;
4679: LD_VAR 0 2
4683: PPUSH
4684: LD_VAR 0 5
4688: PPUSH
4689: CALL_OW 184
4693: GO 4636
4695: POP
4696: POP
// end ;
4697: LD_VAR 0 4
4701: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4702: LD_INT 0
4704: PPUSH
4705: PPUSH
4706: PPUSH
4707: PPUSH
4708: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4709: LD_ADDR_VAR 0 6
4713: PUSH
4714: LD_INT 22
4716: PUSH
4717: LD_VAR 0 1
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 25
4728: PUSH
4729: LD_INT 2
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 24
4738: PUSH
4739: LD_INT 1000
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: PPUSH
4751: CALL_OW 69
4755: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4756: LD_ADDR_VAR 0 4
4760: PUSH
4761: LD_INT 22
4763: PUSH
4764: LD_VAR 0 1
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 21
4775: PUSH
4776: LD_INT 3
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 24
4788: PUSH
4789: LD_INT 1000
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: LIST
4804: PUSH
4805: EMPTY
4806: LIST
4807: PPUSH
4808: CALL_OW 69
4812: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
4813: LD_VAR 0 4
4817: PUSH
4818: LD_INT 0
4820: GREATER
4821: PUSH
4822: LD_VAR 0 6
4826: PUSH
4827: LD_INT 0
4829: GREATER
4830: AND
4831: IFFALSE 4897
// begin for i in engineerOk_list do
4833: LD_ADDR_VAR 0 5
4837: PUSH
4838: LD_VAR 0 6
4842: PUSH
4843: FOR_IN
4844: IFFALSE 4895
// begin for j in buildings_list do
4846: LD_ADDR_VAR 0 7
4850: PUSH
4851: LD_VAR 0 4
4855: PUSH
4856: FOR_IN
4857: IFFALSE 4891
// begin AddComExitBuilding ( i ) ;
4859: LD_VAR 0 5
4863: PPUSH
4864: CALL_OW 182
// wait ( 0 0$1 ) ;
4868: LD_INT 35
4870: PPUSH
4871: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
4875: LD_VAR 0 5
4879: PPUSH
4880: LD_VAR 0 7
4884: PPUSH
4885: CALL_OW 190
// end ;
4889: GO 4856
4891: POP
4892: POP
// end ;
4893: GO 4843
4895: POP
4896: POP
// end ; if buildings_list = 0 then
4897: LD_VAR 0 4
4901: PUSH
4902: LD_INT 0
4904: EQUAL
4905: IFFALSE 4938
// begin for i in engineerOK_list do
4907: LD_ADDR_VAR 0 5
4911: PUSH
4912: LD_VAR 0 6
4916: PUSH
4917: FOR_IN
4918: IFFALSE 4936
// begin ComEnterUnit ( i , building ) ;
4920: LD_VAR 0 5
4924: PPUSH
4925: LD_VAR 0 2
4929: PPUSH
4930: CALL_OW 120
// end ;
4934: GO 4917
4936: POP
4937: POP
// end ; end ;
4938: LD_VAR 0 3
4942: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
4943: LD_INT 0
4945: PPUSH
4946: PPUSH
4947: PPUSH
4948: PPUSH
4949: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4950: LD_ADDR_VAR 0 6
4954: PUSH
4955: LD_INT 22
4957: PUSH
4958: LD_VAR 0 1
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 25
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4986: LD_ADDR_VAR 0 9
4990: PUSH
4991: LD_VAR 0 3
4995: PPUSH
4996: LD_INT 22
4998: PUSH
4999: LD_VAR 0 1
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 21
5010: PUSH
5011: LD_INT 1
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: LD_INT 3
5020: PUSH
5021: LD_INT 24
5023: PUSH
5024: LD_INT 750
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 70
5044: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5045: LD_VAR 0 9
5049: PUSH
5050: LD_INT 0
5052: GREATER
5053: PUSH
5054: LD_VAR 0 6
5058: PUSH
5059: LD_INT 0
5061: GREATER
5062: AND
5063: IFFALSE 5190
// begin for i = 1 to damageUnits do
5065: LD_ADDR_VAR 0 7
5069: PUSH
5070: DOUBLE
5071: LD_INT 1
5073: DEC
5074: ST_TO_ADDR
5075: LD_VAR 0 9
5079: PUSH
5080: FOR_TO
5081: IFFALSE 5105
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5083: LD_VAR 0 9
5087: PUSH
5088: LD_VAR 0 7
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 2
5098: PPUSH
5099: CALL_OW 113
5103: GO 5080
5105: POP
5106: POP
// for i in sci_list do
5107: LD_ADDR_VAR 0 7
5111: PUSH
5112: LD_VAR 0 6
5116: PUSH
5117: FOR_IN
5118: IFFALSE 5186
// begin ComExitBuilding ( i ) ;
5120: LD_VAR 0 7
5124: PPUSH
5125: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5129: LD_ADDR_VAR 0 8
5133: PUSH
5134: LD_VAR 0 2
5138: PPUSH
5139: LD_INT 22
5141: PUSH
5142: LD_VAR 0 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PPUSH
5151: CALL_OW 70
5155: PUSH
5156: FOR_IN
5157: IFFALSE 5182
// begin AddComHeal ( i , j ) ;
5159: LD_VAR 0 7
5163: PPUSH
5164: LD_VAR 0 8
5168: PPUSH
5169: CALL_OW 188
// wait ( 1 1$0 ) ;
5173: LD_INT 2100
5175: PPUSH
5176: CALL_OW 67
// end ;
5180: GO 5156
5182: POP
5183: POP
// end ;
5184: GO 5117
5186: POP
5187: POP
// end else
5188: GO 5204
// begin AddComEnterUnit ( sci_list , build ) ;
5190: LD_VAR 0 6
5194: PPUSH
5195: LD_VAR 0 4
5199: PPUSH
5200: CALL_OW 180
// end ; end ;
5204: LD_VAR 0 5
5208: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5209: LD_INT 0
5211: PPUSH
5212: PPUSH
5213: PPUSH
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5219: LD_INT 22
5221: PUSH
5222: LD_VAR 0 1
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 21
5233: PUSH
5234: LD_INT 2
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL_OW 69
5249: PUSH
5250: LD_VAR 0 3
5254: LESSEQUAL
5255: IFFALSE 5322
// begin for i = 1 to vehCount do
5257: LD_ADDR_VAR 0 10
5261: PUSH
5262: DOUBLE
5263: LD_INT 1
5265: DEC
5266: ST_TO_ADDR
5267: LD_VAR 0 3
5271: PUSH
5272: FOR_TO
5273: IFFALSE 5320
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5275: LD_VAR 0 2
5279: PPUSH
5280: LD_VAR 0 8
5284: PPUSH
5285: LD_VAR 0 6
5289: PPUSH
5290: LD_VAR 0 7
5294: PPUSH
5295: LD_VAR 0 5
5299: PUSH
5300: LD_INT 1
5302: PPUSH
5303: LD_VAR 0 5
5307: PPUSH
5308: CALL_OW 12
5312: ARRAY
5313: PPUSH
5314: CALL_OW 185
5318: GO 5272
5320: POP
5321: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5322: LD_INT 22
5324: PUSH
5325: LD_VAR 0 1
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: LD_INT 21
5336: PUSH
5337: LD_INT 2
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: LD_INT 24
5346: PUSH
5347: LD_INT 250
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: PPUSH
5359: CALL_OW 69
5363: PUSH
5364: LD_VAR 0 3
5368: GREATEREQUAL
5369: IFFALSE 5689
// begin repeat begin wait ( 0 0$1 ) ;
5371: LD_INT 35
5373: PPUSH
5374: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
5378: LD_INT 22
5380: PUSH
5381: LD_VAR 0 1
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: PUSH
5390: LD_INT 21
5392: PUSH
5393: LD_INT 2
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 24
5402: PUSH
5403: LD_INT 651
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: LIST
5414: PPUSH
5415: CALL_OW 69
5419: PUSH
5420: LD_INT 0
5422: GREATER
5423: IFFALSE 5651
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5425: LD_ADDR_VAR 0 10
5429: PUSH
5430: LD_INT 22
5432: PUSH
5433: LD_VAR 0 1
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: LD_INT 21
5444: PUSH
5445: LD_INT 2
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 24
5454: PUSH
5455: LD_INT 651
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5649
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5475: LD_ADDR_VAR 0 15
5479: PUSH
5480: LD_INT 22
5482: PUSH
5483: LD_VAR 0 4
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL_OW 69
5496: PPUSH
5497: LD_VAR 0 10
5501: PPUSH
5502: CALL_OW 74
5506: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5507: LD_ADDR_VAR 0 16
5511: PUSH
5512: LD_INT 22
5514: PUSH
5515: LD_VAR 0 4
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: LD_INT 59
5529: PUSH
5530: EMPTY
5531: LIST
5532: PUSH
5533: LD_INT 21
5535: PUSH
5536: LD_INT 1
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 21
5545: PUSH
5546: LD_INT 2
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: PPUSH
5566: CALL_OW 69
5570: PPUSH
5571: LD_VAR 0 10
5575: PPUSH
5576: CALL_OW 74
5580: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5581: LD_VAR 0 10
5585: PPUSH
5586: LD_VAR 0 15
5590: PPUSH
5591: CALL_OW 296
5595: PUSH
5596: LD_INT 8
5598: PLUS
5599: PUSH
5600: LD_VAR 0 10
5604: PPUSH
5605: LD_VAR 0 16
5609: PPUSH
5610: CALL_OW 296
5614: LESS
5615: IFFALSE 5633
// begin ComAttackUnit ( i , target1 ) ;
5617: LD_VAR 0 10
5621: PPUSH
5622: LD_VAR 0 15
5626: PPUSH
5627: CALL_OW 115
// end else
5631: GO 5647
// begin ComAttackUnit ( i , target2 ) ;
5633: LD_VAR 0 10
5637: PPUSH
5638: LD_VAR 0 16
5642: PPUSH
5643: CALL_OW 115
// end ; end ;
5647: GO 5472
5649: POP
5650: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
5651: LD_INT 22
5653: PUSH
5654: LD_VAR 0 1
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 21
5665: PUSH
5666: LD_INT 2
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PPUSH
5677: CALL_OW 69
5681: PUSH
5682: LD_VAR 0 3
5686: LESSEQUAL
5687: IFFALSE 5371
// end ; end ;
5689: LD_VAR 0 9
5693: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
5704: PPUSH
5705: PPUSH
5706: PPUSH
// for i = 1 to medicCount do
5707: LD_ADDR_VAR 0 14
5711: PUSH
5712: DOUBLE
5713: LD_INT 1
5715: DEC
5716: ST_TO_ADDR
5717: LD_VAR 0 7
5721: PUSH
5722: FOR_TO
5723: IFFALSE 5805
// begin uc_side = side ;
5725: LD_ADDR_OWVAR 20
5729: PUSH
5730: LD_VAR 0 1
5734: ST_TO_ADDR
// uc_nation = nation ;
5735: LD_ADDR_OWVAR 21
5739: PUSH
5740: LD_VAR 0 2
5744: ST_TO_ADDR
// hc_name =  ;
5745: LD_ADDR_OWVAR 26
5749: PUSH
5750: LD_STRING 
5752: ST_TO_ADDR
// hc_gallery =  ;
5753: LD_ADDR_OWVAR 33
5757: PUSH
5758: LD_STRING 
5760: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5761: LD_INT 0
5763: PPUSH
5764: LD_INT 4
5766: PPUSH
5767: LD_VAR 0 8
5771: PPUSH
5772: CALL_OW 380
// un = CreateHuman ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: CALL_OW 44
5785: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5786: LD_VAR 0 16
5790: PPUSH
5791: LD_VAR 0 9
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 49
// end ;
5803: GO 5722
5805: POP
5806: POP
// for i = 1 to soldierCount do
5807: LD_ADDR_VAR 0 14
5811: PUSH
5812: DOUBLE
5813: LD_INT 1
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 3
5821: PUSH
5822: FOR_TO
5823: IFFALSE 5905
// begin uc_side = side ;
5825: LD_ADDR_OWVAR 20
5829: PUSH
5830: LD_VAR 0 1
5834: ST_TO_ADDR
// uc_nation = nation ;
5835: LD_ADDR_OWVAR 21
5839: PUSH
5840: LD_VAR 0 2
5844: ST_TO_ADDR
// hc_name =  ;
5845: LD_ADDR_OWVAR 26
5849: PUSH
5850: LD_STRING 
5852: ST_TO_ADDR
// hc_gallery =  ;
5853: LD_ADDR_OWVAR 33
5857: PUSH
5858: LD_STRING 
5860: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
5861: LD_INT 0
5863: PPUSH
5864: LD_INT 1
5866: PPUSH
5867: LD_VAR 0 8
5871: PPUSH
5872: CALL_OW 380
// un = CreateHuman ;
5876: LD_ADDR_VAR 0 16
5880: PUSH
5881: CALL_OW 44
5885: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5886: LD_VAR 0 16
5890: PPUSH
5891: LD_VAR 0 9
5895: PPUSH
5896: LD_INT 0
5898: PPUSH
5899: CALL_OW 49
// end ;
5903: GO 5822
5905: POP
5906: POP
// for i = 1 to sniperCount do
5907: LD_ADDR_VAR 0 14
5911: PUSH
5912: DOUBLE
5913: LD_INT 1
5915: DEC
5916: ST_TO_ADDR
5917: LD_VAR 0 4
5921: PUSH
5922: FOR_TO
5923: IFFALSE 6005
// begin uc_side = side ;
5925: LD_ADDR_OWVAR 20
5929: PUSH
5930: LD_VAR 0 1
5934: ST_TO_ADDR
// uc_nation = nation ;
5935: LD_ADDR_OWVAR 21
5939: PUSH
5940: LD_VAR 0 2
5944: ST_TO_ADDR
// hc_name =  ;
5945: LD_ADDR_OWVAR 26
5949: PUSH
5950: LD_STRING 
5952: ST_TO_ADDR
// hc_gallery =  ;
5953: LD_ADDR_OWVAR 33
5957: PUSH
5958: LD_STRING 
5960: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
5961: LD_INT 0
5963: PPUSH
5964: LD_INT 5
5966: PPUSH
5967: LD_VAR 0 8
5971: PPUSH
5972: CALL_OW 380
// un = CreateHuman ;
5976: LD_ADDR_VAR 0 16
5980: PUSH
5981: CALL_OW 44
5985: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5986: LD_VAR 0 16
5990: PPUSH
5991: LD_VAR 0 9
5995: PPUSH
5996: LD_INT 0
5998: PPUSH
5999: CALL_OW 49
// end ;
6003: GO 5922
6005: POP
6006: POP
// for i = 1 to bazookCount do
6007: LD_ADDR_VAR 0 14
6011: PUSH
6012: DOUBLE
6013: LD_INT 1
6015: DEC
6016: ST_TO_ADDR
6017: LD_VAR 0 5
6021: PUSH
6022: FOR_TO
6023: IFFALSE 6105
// begin uc_side = side ;
6025: LD_ADDR_OWVAR 20
6029: PUSH
6030: LD_VAR 0 1
6034: ST_TO_ADDR
// uc_nation = nation ;
6035: LD_ADDR_OWVAR 21
6039: PUSH
6040: LD_VAR 0 2
6044: ST_TO_ADDR
// hc_name =  ;
6045: LD_ADDR_OWVAR 26
6049: PUSH
6050: LD_STRING 
6052: ST_TO_ADDR
// hc_gallery =  ;
6053: LD_ADDR_OWVAR 33
6057: PUSH
6058: LD_STRING 
6060: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6061: LD_INT 0
6063: PPUSH
6064: LD_INT 9
6066: PPUSH
6067: LD_VAR 0 8
6071: PPUSH
6072: CALL_OW 380
// un = CreateHuman ;
6076: LD_ADDR_VAR 0 16
6080: PUSH
6081: CALL_OW 44
6085: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6086: LD_VAR 0 16
6090: PPUSH
6091: LD_VAR 0 9
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 49
// end ;
6103: GO 6022
6105: POP
6106: POP
// for i = 1 to mortalCount do
6107: LD_ADDR_VAR 0 14
6111: PUSH
6112: DOUBLE
6113: LD_INT 1
6115: DEC
6116: ST_TO_ADDR
6117: LD_VAR 0 6
6121: PUSH
6122: FOR_TO
6123: IFFALSE 6205
// begin uc_side = side ;
6125: LD_ADDR_OWVAR 20
6129: PUSH
6130: LD_VAR 0 1
6134: ST_TO_ADDR
// uc_nation = nation ;
6135: LD_ADDR_OWVAR 21
6139: PUSH
6140: LD_VAR 0 2
6144: ST_TO_ADDR
// hc_name =  ;
6145: LD_ADDR_OWVAR 26
6149: PUSH
6150: LD_STRING 
6152: ST_TO_ADDR
// hc_gallery =  ;
6153: LD_ADDR_OWVAR 33
6157: PUSH
6158: LD_STRING 
6160: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6161: LD_INT 0
6163: PPUSH
6164: LD_INT 8
6166: PPUSH
6167: LD_VAR 0 8
6171: PPUSH
6172: CALL_OW 380
// un = CreateHuman ;
6176: LD_ADDR_VAR 0 16
6180: PUSH
6181: CALL_OW 44
6185: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6186: LD_VAR 0 16
6190: PPUSH
6191: LD_VAR 0 9
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: CALL_OW 49
// end ;
6203: GO 6122
6205: POP
6206: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6207: LD_ADDR_VAR 0 19
6211: PUSH
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 25
6229: PUSH
6230: LD_INT 1
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 25
6239: PUSH
6240: LD_INT 5
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 25
6249: PUSH
6250: LD_INT 8
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 9
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 69
6282: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6283: LD_ADDR_VAR 0 18
6287: PUSH
6288: LD_INT 22
6290: PUSH
6291: LD_VAR 0 1
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 25
6302: PUSH
6303: LD_INT 4
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: PPUSH
6314: CALL_OW 69
6318: ST_TO_ADDR
// for i in medic_list do
6319: LD_ADDR_VAR 0 14
6323: PUSH
6324: LD_VAR 0 18
6328: PUSH
6329: FOR_IN
6330: IFFALSE 6348
// ComMoveToArea ( i , healArea ) ;
6332: LD_VAR 0 14
6336: PPUSH
6337: LD_VAR 0 10
6341: PPUSH
6342: CALL_OW 113
6346: GO 6329
6348: POP
6349: POP
// if strategy = 1 then
6350: LD_VAR 0 12
6354: PUSH
6355: LD_INT 1
6357: EQUAL
6358: IFFALSE 7093
// begin repeat wait ( 0 0$3 ) ;
6360: LD_INT 105
6362: PPUSH
6363: CALL_OW 67
// for i in soldiersOK_list do
6367: LD_ADDR_VAR 0 14
6371: PUSH
6372: LD_VAR 0 19
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6442
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6380: LD_VAR 0 14
6384: PPUSH
6385: LD_INT 91
6387: PPUSH
6388: LD_INT 63
6390: PPUSH
6391: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
6395: LD_VAR 0 14
6399: PPUSH
6400: LD_INT 101
6402: PPUSH
6403: LD_INT 53
6405: PPUSH
6406: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
6410: LD_VAR 0 14
6414: PPUSH
6415: LD_INT 75
6417: PPUSH
6418: LD_INT 23
6420: PPUSH
6421: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
6425: LD_VAR 0 14
6429: PPUSH
6430: LD_INT 78
6432: PPUSH
6433: LD_INT 8
6435: PPUSH
6436: CALL_OW 174
// end ;
6440: GO 6377
6442: POP
6443: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 0 ;
6444: LD_INT 15
6446: PPUSH
6447: LD_INT 22
6449: PUSH
6450: LD_VAR 0 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: CALL_OW 70
6463: PUSH
6464: LD_INT 0
6466: GREATER
6467: IFFALSE 6360
// repeat wait ( 0 0$1 ) ;
6469: LD_INT 35
6471: PPUSH
6472: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6476: LD_ADDR_VAR 0 17
6480: PUSH
6481: LD_INT 22
6483: PUSH
6484: LD_VAR 0 1
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: LD_INT 3
6498: PUSH
6499: LD_INT 24
6501: PUSH
6502: LD_INT 550
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 24
6515: PUSH
6516: LD_INT 250
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 69
6536: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6537: LD_ADDR_VAR 0 19
6541: PUSH
6542: LD_INT 22
6544: PUSH
6545: LD_VAR 0 1
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: LD_INT 25
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 25
6569: PUSH
6570: LD_INT 5
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 25
6579: PUSH
6580: LD_INT 8
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 25
6589: PUSH
6590: LD_INT 9
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 24
6606: PUSH
6607: LD_INT 1000
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PPUSH
6619: CALL_OW 69
6623: ST_TO_ADDR
// if medicCount > 0 then
6624: LD_VAR 0 7
6628: PUSH
6629: LD_INT 0
6631: GREATER
6632: IFFALSE 6706
// begin if damageUnit_list > 0 then
6634: LD_VAR 0 17
6638: PUSH
6639: LD_INT 0
6641: GREATER
6642: IFFALSE 6706
// begin for i in damageUnit_list do
6644: LD_ADDR_VAR 0 14
6648: PUSH
6649: LD_VAR 0 17
6653: PUSH
6654: FOR_IN
6655: IFFALSE 6704
// begin ComMoveToArea ( i , healArea ) ;
6657: LD_VAR 0 14
6661: PPUSH
6662: LD_VAR 0 10
6666: PPUSH
6667: CALL_OW 113
// for j in medic_list do
6671: LD_ADDR_VAR 0 15
6675: PUSH
6676: LD_VAR 0 18
6680: PUSH
6681: FOR_IN
6682: IFFALSE 6700
// AddComHeal ( j , i ) ;
6684: LD_VAR 0 15
6688: PPUSH
6689: LD_VAR 0 14
6693: PPUSH
6694: CALL_OW 188
6698: GO 6681
6700: POP
6701: POP
// end ;
6702: GO 6654
6704: POP
6705: POP
// end ; end ; for i in soldiersOK_list do
6706: LD_ADDR_VAR 0 14
6710: PUSH
6711: LD_VAR 0 19
6715: PUSH
6716: FOR_IN
6717: IFFALSE 6893
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6719: LD_ADDR_VAR 0 22
6723: PUSH
6724: LD_INT 22
6726: PUSH
6727: LD_VAR 0 11
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 69
6740: PPUSH
6741: LD_VAR 0 14
6745: PPUSH
6746: CALL_OW 74
6750: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6751: LD_ADDR_VAR 0 23
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_VAR 0 11
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 2
6770: PUSH
6771: LD_INT 59
6773: PUSH
6774: EMPTY
6775: LIST
6776: PUSH
6777: LD_INT 21
6779: PUSH
6780: LD_INT 1
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 21
6789: PUSH
6790: LD_INT 2
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: PPUSH
6810: CALL_OW 69
6814: PPUSH
6815: LD_VAR 0 14
6819: PPUSH
6820: CALL_OW 74
6824: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6825: LD_VAR 0 14
6829: PPUSH
6830: LD_VAR 0 22
6834: PPUSH
6835: CALL_OW 296
6839: PUSH
6840: LD_INT 8
6842: PLUS
6843: PUSH
6844: LD_VAR 0 14
6848: PPUSH
6849: LD_VAR 0 23
6853: PPUSH
6854: CALL_OW 296
6858: LESS
6859: IFFALSE 6877
// begin ComAttackUnit ( i , target1 ) ;
6861: LD_VAR 0 14
6865: PPUSH
6866: LD_VAR 0 22
6870: PPUSH
6871: CALL_OW 115
// end else
6875: GO 6891
// begin ComAttackUnit ( i , target2 ) ;
6877: LD_VAR 0 14
6881: PPUSH
6882: LD_VAR 0 23
6886: PPUSH
6887: CALL_OW 115
// end ; end ;
6891: GO 6716
6893: POP
6894: POP
// for i in soldiersOK_list do
6895: LD_ADDR_VAR 0 14
6899: PUSH
6900: LD_VAR 0 19
6904: PUSH
6905: FOR_IN
6906: IFFALSE 7082
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6908: LD_ADDR_VAR 0 22
6912: PUSH
6913: LD_INT 22
6915: PUSH
6916: LD_VAR 0 11
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PPUSH
6925: CALL_OW 69
6929: PPUSH
6930: LD_VAR 0 14
6934: PPUSH
6935: CALL_OW 74
6939: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6940: LD_ADDR_VAR 0 23
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_VAR 0 11
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 59
6962: PUSH
6963: EMPTY
6964: LIST
6965: PUSH
6966: LD_INT 21
6968: PUSH
6969: LD_INT 1
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 21
6978: PUSH
6979: LD_INT 2
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: PPUSH
6999: CALL_OW 69
7003: PPUSH
7004: LD_VAR 0 14
7008: PPUSH
7009: CALL_OW 74
7013: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7014: LD_VAR 0 14
7018: PPUSH
7019: LD_VAR 0 22
7023: PPUSH
7024: CALL_OW 296
7028: PUSH
7029: LD_INT 8
7031: PLUS
7032: PUSH
7033: LD_VAR 0 14
7037: PPUSH
7038: LD_VAR 0 23
7042: PPUSH
7043: CALL_OW 296
7047: LESS
7048: IFFALSE 7066
// begin ComAttackUnit ( i , target1 ) ;
7050: LD_VAR 0 14
7054: PPUSH
7055: LD_VAR 0 22
7059: PPUSH
7060: CALL_OW 115
// end else
7064: GO 7080
// begin ComAttackUnit ( i , target2 ) ;
7066: LD_VAR 0 14
7070: PPUSH
7071: LD_VAR 0 23
7075: PPUSH
7076: CALL_OW 115
// end ; end ;
7080: GO 6905
7082: POP
7083: POP
// until soldiersOK_list = [ ] ;
7084: LD_VAR 0 19
7088: PUSH
7089: EMPTY
7090: EQUAL
7091: IFFALSE 6469
// end ; if strategy = 2 then
7093: LD_VAR 0 12
7097: PUSH
7098: LD_INT 2
7100: EQUAL
7101: IFFALSE 7806
// begin repeat wait ( 0 0$1 ) ;
7103: LD_INT 35
7105: PPUSH
7106: CALL_OW 67
// for i in soldiersOK_list do
7110: LD_ADDR_VAR 0 14
7114: PUSH
7115: LD_VAR 0 19
7119: PUSH
7120: FOR_IN
7121: IFFALSE 7155
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7123: LD_VAR 0 14
7127: PPUSH
7128: LD_INT 91
7130: PPUSH
7131: LD_INT 63
7133: PPUSH
7134: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7138: LD_VAR 0 14
7142: PPUSH
7143: LD_INT 75
7145: PPUSH
7146: LD_INT 33
7148: PPUSH
7149: CALL_OW 174
// end ;
7153: GO 7120
7155: POP
7156: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 0 ;
7157: LD_INT 16
7159: PPUSH
7160: LD_INT 22
7162: PUSH
7163: LD_VAR 0 1
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 70
7176: PUSH
7177: LD_INT 0
7179: GREATER
7180: IFFALSE 7103
// repeat wait ( 0 0$3 ) ;
7182: LD_INT 105
7184: PPUSH
7185: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7189: LD_ADDR_VAR 0 17
7193: PUSH
7194: LD_INT 22
7196: PUSH
7197: LD_VAR 0 1
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: LD_INT 3
7211: PUSH
7212: LD_INT 24
7214: PUSH
7215: LD_INT 550
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 24
7228: PUSH
7229: LD_INT 250
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PPUSH
7245: CALL_OW 69
7249: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7250: LD_ADDR_VAR 0 19
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_VAR 0 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: LD_INT 25
7272: PUSH
7273: LD_INT 1
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 5
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 8
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 25
7302: PUSH
7303: LD_INT 9
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 24
7319: PUSH
7320: LD_INT 1000
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 69
7336: ST_TO_ADDR
// if medicCount > 0 then
7337: LD_VAR 0 7
7341: PUSH
7342: LD_INT 0
7344: GREATER
7345: IFFALSE 7419
// begin if damageUnit_list > 0 then
7347: LD_VAR 0 17
7351: PUSH
7352: LD_INT 0
7354: GREATER
7355: IFFALSE 7419
// begin for i in damageUnit_list do
7357: LD_ADDR_VAR 0 14
7361: PUSH
7362: LD_VAR 0 17
7366: PUSH
7367: FOR_IN
7368: IFFALSE 7417
// begin ComMoveToArea ( i , healArea ) ;
7370: LD_VAR 0 14
7374: PPUSH
7375: LD_VAR 0 10
7379: PPUSH
7380: CALL_OW 113
// for j in medic_list do
7384: LD_ADDR_VAR 0 15
7388: PUSH
7389: LD_VAR 0 18
7393: PUSH
7394: FOR_IN
7395: IFFALSE 7413
// AddComHeal ( j , i ) ;
7397: LD_VAR 0 15
7401: PPUSH
7402: LD_VAR 0 14
7406: PPUSH
7407: CALL_OW 188
7411: GO 7394
7413: POP
7414: POP
// end ;
7415: GO 7367
7417: POP
7418: POP
// end ; end ; for i in soldiersOK_list do
7419: LD_ADDR_VAR 0 14
7423: PUSH
7424: LD_VAR 0 19
7428: PUSH
7429: FOR_IN
7430: IFFALSE 7606
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7432: LD_ADDR_VAR 0 22
7436: PUSH
7437: LD_INT 22
7439: PUSH
7440: LD_VAR 0 11
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PPUSH
7449: CALL_OW 69
7453: PPUSH
7454: LD_VAR 0 14
7458: PPUSH
7459: CALL_OW 74
7463: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7464: LD_ADDR_VAR 0 23
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_VAR 0 11
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: LD_INT 59
7486: PUSH
7487: EMPTY
7488: LIST
7489: PUSH
7490: LD_INT 21
7492: PUSH
7493: LD_INT 1
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 21
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: EMPTY
7521: LIST
7522: PPUSH
7523: CALL_OW 69
7527: PPUSH
7528: LD_VAR 0 14
7532: PPUSH
7533: CALL_OW 74
7537: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7538: LD_VAR 0 14
7542: PPUSH
7543: LD_VAR 0 22
7547: PPUSH
7548: CALL_OW 296
7552: PUSH
7553: LD_INT 8
7555: PLUS
7556: PUSH
7557: LD_VAR 0 14
7561: PPUSH
7562: LD_VAR 0 23
7566: PPUSH
7567: CALL_OW 296
7571: LESS
7572: IFFALSE 7590
// begin ComAttackUnit ( i , target1 ) ;
7574: LD_VAR 0 14
7578: PPUSH
7579: LD_VAR 0 22
7583: PPUSH
7584: CALL_OW 115
// end else
7588: GO 7604
// begin ComAttackUnit ( i , target2 ) ;
7590: LD_VAR 0 14
7594: PPUSH
7595: LD_VAR 0 23
7599: PPUSH
7600: CALL_OW 115
// end ; end ;
7604: GO 7429
7606: POP
7607: POP
// for i in soldiersOK_list do
7608: LD_ADDR_VAR 0 14
7612: PUSH
7613: LD_VAR 0 19
7617: PUSH
7618: FOR_IN
7619: IFFALSE 7795
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7621: LD_ADDR_VAR 0 22
7625: PUSH
7626: LD_INT 22
7628: PUSH
7629: LD_VAR 0 11
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 69
7642: PPUSH
7643: LD_VAR 0 14
7647: PPUSH
7648: CALL_OW 74
7652: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7653: LD_ADDR_VAR 0 23
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_VAR 0 11
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 59
7675: PUSH
7676: EMPTY
7677: LIST
7678: PUSH
7679: LD_INT 21
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 21
7691: PUSH
7692: LD_INT 2
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: PPUSH
7712: CALL_OW 69
7716: PPUSH
7717: LD_VAR 0 14
7721: PPUSH
7722: CALL_OW 74
7726: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7727: LD_VAR 0 14
7731: PPUSH
7732: LD_VAR 0 22
7736: PPUSH
7737: CALL_OW 296
7741: PUSH
7742: LD_INT 8
7744: PLUS
7745: PUSH
7746: LD_VAR 0 14
7750: PPUSH
7751: LD_VAR 0 23
7755: PPUSH
7756: CALL_OW 296
7760: LESS
7761: IFFALSE 7779
// begin ComAttackUnit ( i , target1 ) ;
7763: LD_VAR 0 14
7767: PPUSH
7768: LD_VAR 0 22
7772: PPUSH
7773: CALL_OW 115
// end else
7777: GO 7793
// begin ComAttackUnit ( i , target2 ) ;
7779: LD_VAR 0 14
7783: PPUSH
7784: LD_VAR 0 23
7788: PPUSH
7789: CALL_OW 115
// end ; end ;
7793: GO 7618
7795: POP
7796: POP
// until soldiersOK_list = [ ] ;
7797: LD_VAR 0 19
7801: PUSH
7802: EMPTY
7803: EQUAL
7804: IFFALSE 7182
// end ; end ;
7806: LD_VAR 0 13
7810: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
7811: LD_INT 0
7813: PPUSH
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
7818: PPUSH
7819: PPUSH
7820: PPUSH
7821: PPUSH
7822: PPUSH
7823: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
7824: LD_ADDR_VAR 0 9
7828: PUSH
7829: LD_INT 22
7831: PUSH
7832: LD_VAR 0 1
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 21
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 24
7853: PUSH
7854: LD_INT 660
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: LD_INT 58
7866: PUSH
7867: EMPTY
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: LD_INT 34
7879: PUSH
7880: LD_INT 53
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7903: LD_ADDR_VAR 0 10
7907: PUSH
7908: LD_INT 22
7910: PUSH
7911: LD_VAR 0 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 3
7932: PUSH
7933: LD_INT 24
7935: PUSH
7936: LD_INT 660
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: LIST
7951: PPUSH
7952: CALL_OW 69
7956: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7957: LD_ADDR_VAR 0 11
7961: PUSH
7962: LD_VAR 0 2
7966: PPUSH
7967: LD_INT 22
7969: PUSH
7970: LD_VAR 0 1
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 2
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 3
7991: PUSH
7992: LD_INT 24
7994: PUSH
7995: LD_INT 1000
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: PPUSH
8011: CALL_OW 70
8015: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8016: LD_ADDR_VAR 0 12
8020: PUSH
8021: LD_VAR 0 2
8025: PPUSH
8026: LD_INT 22
8028: PUSH
8029: LD_VAR 0 1
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 21
8040: PUSH
8041: LD_INT 2
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 24
8050: PUSH
8051: LD_INT 1000
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: LD_INT 58
8060: PUSH
8061: EMPTY
8062: LIST
8063: PUSH
8064: LD_INT 3
8066: PUSH
8067: LD_INT 34
8069: PUSH
8070: LD_INT 53
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 70
8092: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8093: LD_ADDR_VAR 0 13
8097: PUSH
8098: EMPTY
8099: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8100: LD_ADDR_VAR 0 14
8104: PUSH
8105: LD_VAR 0 2
8109: PPUSH
8110: LD_INT 22
8112: PUSH
8113: LD_VAR 0 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 25
8124: PUSH
8125: LD_INT 3
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PPUSH
8136: CALL_OW 70
8140: ST_TO_ADDR
// if damageVehicle_list > 0 then
8141: LD_VAR 0 10
8145: PUSH
8146: LD_INT 0
8148: GREATER
8149: IFFALSE 8187
// begin for i in damageVehicle_list do
8151: LD_ADDR_VAR 0 7
8155: PUSH
8156: LD_VAR 0 10
8160: PUSH
8161: FOR_IN
8162: IFFALSE 8185
// begin ComMoveXY ( i , repX , repY ) ;
8164: LD_VAR 0 7
8168: PPUSH
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_VAR 0 4
8178: PPUSH
8179: CALL_OW 111
// end ;
8183: GO 8161
8185: POP
8186: POP
// end ; if vehicleNeedRepair_list > 0 then
8187: LD_VAR 0 11
8191: PUSH
8192: LD_INT 0
8194: GREATER
8195: IFFALSE 8282
// begin for i in vehicleNeedRepair_list do
8197: LD_ADDR_VAR 0 7
8201: PUSH
8202: LD_VAR 0 11
8206: PUSH
8207: FOR_IN
8208: IFFALSE 8280
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8210: LD_ADDR_VAR 0 13
8214: PUSH
8215: LD_VAR 0 13
8219: PUSH
8220: LD_VAR 0 7
8224: PPUSH
8225: CALL_OW 313
8229: ADD
8230: ST_TO_ADDR
// for j in mechanicInside_list do
8231: LD_ADDR_VAR 0 8
8235: PUSH
8236: LD_VAR 0 13
8240: PUSH
8241: FOR_IN
8242: IFFALSE 8276
// begin ComExitVehicle ( i ) ;
8244: LD_VAR 0 7
8248: PPUSH
8249: CALL_OW 121
// wait ( 0 0$1 ) ;
8253: LD_INT 35
8255: PPUSH
8256: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8260: LD_VAR 0 7
8264: PPUSH
8265: LD_VAR 0 8
8269: PPUSH
8270: CALL_OW 129
// end ;
8274: GO 8241
8276: POP
8277: POP
// end ;
8278: GO 8207
8280: POP
8281: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8282: LD_VAR 0 12
8286: PUSH
8287: LD_INT 0
8289: GREATER
8290: IFFALSE 8330
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8292: LD_VAR 0 14
8296: PUSH
8297: LD_INT 1
8299: ARRAY
8300: PPUSH
8301: LD_VAR 0 12
8305: PUSH
8306: LD_INT 1
8308: ARRAY
8309: PPUSH
8310: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8314: LD_VAR 0 12
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: LD_INT 100
8325: PPUSH
8326: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8330: LD_VAR 0 9
8334: PUSH
8335: LD_INT 0
8337: GREATER
8338: IFFALSE 8529
// begin for i in vehicleOK_list do
8340: LD_ADDR_VAR 0 7
8344: PUSH
8345: LD_VAR 0 9
8349: PUSH
8350: FOR_IN
8351: IFFALSE 8527
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8353: LD_ADDR_VAR 0 15
8357: PUSH
8358: LD_INT 22
8360: PUSH
8361: LD_VAR 0 5
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 69
8374: PPUSH
8375: LD_VAR 0 7
8379: PPUSH
8380: CALL_OW 74
8384: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8385: LD_ADDR_VAR 0 16
8389: PUSH
8390: LD_INT 22
8392: PUSH
8393: LD_VAR 0 5
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: LD_INT 59
8407: PUSH
8408: EMPTY
8409: LIST
8410: PUSH
8411: LD_INT 21
8413: PUSH
8414: LD_INT 1
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: LD_INT 21
8423: PUSH
8424: LD_INT 2
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: PPUSH
8444: CALL_OW 69
8448: PPUSH
8449: LD_VAR 0 7
8453: PPUSH
8454: CALL_OW 74
8458: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8459: LD_VAR 0 7
8463: PPUSH
8464: LD_VAR 0 15
8468: PPUSH
8469: CALL_OW 296
8473: PUSH
8474: LD_INT 8
8476: PLUS
8477: PUSH
8478: LD_VAR 0 7
8482: PPUSH
8483: LD_VAR 0 16
8487: PPUSH
8488: CALL_OW 296
8492: LESS
8493: IFFALSE 8511
// begin ComAttackUnit ( i , target1 ) ;
8495: LD_VAR 0 7
8499: PPUSH
8500: LD_VAR 0 15
8504: PPUSH
8505: CALL_OW 115
// end else
8509: GO 8525
// begin ComAttackUnit ( i , target2 ) ;
8511: LD_VAR 0 7
8515: PPUSH
8516: LD_VAR 0 16
8520: PPUSH
8521: CALL_OW 115
// end ; end ;
8525: GO 8350
8527: POP
8528: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8529: LD_ADDR_VAR 0 7
8533: PUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 25
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PPUSH
8565: CALL_OW 70
8569: NOT
8570: PUSH
8571: FOR_IN
8572: IFFALSE 8595
// ComMoveXY ( i , repX , repY ) ;
8574: LD_VAR 0 7
8578: PPUSH
8579: LD_VAR 0 3
8583: PPUSH
8584: LD_VAR 0 4
8588: PPUSH
8589: CALL_OW 111
8593: GO 8571
8595: POP
8596: POP
// end ;
8597: LD_VAR 0 6
8601: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
8606: PPUSH
8607: PPUSH
8608: PPUSH
8609: PPUSH
8610: PPUSH
8611: PPUSH
8612: PPUSH
8613: PPUSH
8614: PPUSH
// amChassisTab = [ ] ;
8615: LD_ADDR_VAR 0 19
8619: PUSH
8620: EMPTY
8621: ST_TO_ADDR
// arChassisTab = [ ] ;
8622: LD_ADDR_VAR 0 18
8626: PUSH
8627: EMPTY
8628: ST_TO_ADDR
// ruChassisTab = [ ] ;
8629: LD_ADDR_VAR 0 17
8633: PUSH
8634: EMPTY
8635: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// if nation = 1 then
8643: LD_VAR 0 5
8647: PUSH
8648: LD_INT 1
8650: EQUAL
8651: IFFALSE 9142
// begin uc_side = side ;
8653: LD_ADDR_OWVAR 20
8657: PUSH
8658: LD_VAR 0 2
8662: ST_TO_ADDR
// uc_nation = nation ;
8663: LD_ADDR_OWVAR 21
8667: PUSH
8668: LD_VAR 0 5
8672: ST_TO_ADDR
// vc_engine = vehengine ;
8673: LD_ADDR_OWVAR 39
8677: PUSH
8678: LD_VAR 0 6
8682: ST_TO_ADDR
// vc_control = vehcontrol ;
8683: LD_ADDR_OWVAR 38
8687: PUSH
8688: LD_VAR 0 7
8692: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8693: LD_ADDR_OWVAR 40
8697: PUSH
8698: LD_VAR 0 10
8702: PUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_VAR 0 10
8710: PPUSH
8711: CALL_OW 12
8715: ARRAY
8716: ST_TO_ADDR
// for j = 1 to AMWeapon do
8717: LD_ADDR_VAR 0 14
8721: PUSH
8722: DOUBLE
8723: LD_INT 1
8725: DEC
8726: ST_TO_ADDR
8727: LD_VAR 0 10
8731: PUSH
8732: FOR_TO
8733: IFFALSE 9034
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8735: LD_VAR 0 10
8739: PUSH
8740: LD_VAR 0 14
8744: ARRAY
8745: PUSH
8746: LD_INT 2
8748: EQUAL
8749: PUSH
8750: LD_VAR 0 10
8754: PUSH
8755: LD_VAR 0 14
8759: ARRAY
8760: PUSH
8761: LD_INT 3
8763: EQUAL
8764: OR
8765: IFFALSE 8818
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8767: LD_ADDR_VAR 0 19
8771: PUSH
8772: LD_INT 1
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: LD_INT 3
8780: PUSH
8781: LD_INT 4
8783: PUSH
8784: LD_INT 5
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8794: LD_ADDR_OWVAR 37
8798: PUSH
8799: LD_VAR 0 19
8803: PUSH
8804: LD_INT 1
8806: PPUSH
8807: LD_VAR 0 19
8811: PPUSH
8812: CALL_OW 12
8816: ARRAY
8817: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8818: LD_VAR 0 10
8822: PUSH
8823: LD_VAR 0 14
8827: ARRAY
8828: PUSH
8829: LD_INT 4
8831: EQUAL
8832: PUSH
8833: LD_VAR 0 10
8837: PUSH
8838: LD_VAR 0 14
8842: ARRAY
8843: PUSH
8844: LD_INT 5
8846: EQUAL
8847: OR
8848: PUSH
8849: LD_VAR 0 10
8853: PUSH
8854: LD_VAR 0 14
8858: ARRAY
8859: PUSH
8860: LD_INT 9
8862: EQUAL
8863: OR
8864: PUSH
8865: LD_VAR 0 10
8869: PUSH
8870: LD_VAR 0 14
8874: ARRAY
8875: PUSH
8876: LD_INT 11
8878: EQUAL
8879: OR
8880: PUSH
8881: LD_VAR 0 10
8885: PUSH
8886: LD_VAR 0 14
8890: ARRAY
8891: PUSH
8892: LD_INT 7
8894: EQUAL
8895: OR
8896: IFFALSE 8945
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8898: LD_ADDR_VAR 0 19
8902: PUSH
8903: LD_INT 2
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: LD_INT 4
8911: PUSH
8912: LD_INT 5
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8921: LD_ADDR_OWVAR 37
8925: PUSH
8926: LD_VAR 0 19
8930: PUSH
8931: LD_INT 1
8933: PPUSH
8934: LD_VAR 0 19
8938: PPUSH
8939: CALL_OW 12
8943: ARRAY
8944: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8945: LD_VAR 0 10
8949: PUSH
8950: LD_VAR 0 14
8954: ARRAY
8955: PUSH
8956: LD_INT 8
8958: EQUAL
8959: PUSH
8960: LD_VAR 0 10
8964: PUSH
8965: LD_VAR 0 14
8969: ARRAY
8970: PUSH
8971: LD_INT 6
8973: EQUAL
8974: OR
8975: PUSH
8976: LD_VAR 0 10
8980: PUSH
8981: LD_VAR 0 14
8985: ARRAY
8986: PUSH
8987: LD_INT 10
8989: EQUAL
8990: OR
8991: IFFALSE 9032
// begin amChassisTab = [ 4 , 5 ] ;
8993: LD_ADDR_VAR 0 19
8997: PUSH
8998: LD_INT 4
9000: PUSH
9001: LD_INT 5
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9008: LD_ADDR_OWVAR 37
9012: PUSH
9013: LD_VAR 0 19
9017: PUSH
9018: LD_INT 1
9020: PPUSH
9021: LD_VAR 0 19
9025: PPUSH
9026: CALL_OW 12
9030: ARRAY
9031: ST_TO_ADDR
// end ; end ;
9032: GO 8732
9034: POP
9035: POP
// veh = CreateVehicle ;
9036: LD_ADDR_VAR 0 16
9040: PUSH
9041: CALL_OW 45
9045: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9046: LD_VAR 0 16
9050: PPUSH
9051: LD_VAR 0 1
9055: PPUSH
9056: LD_INT 0
9058: PPUSH
9059: CALL_OW 49
// if vehControl = 1 then
9063: LD_VAR 0 7
9067: PUSH
9068: LD_INT 1
9070: EQUAL
9071: IFFALSE 9128
// begin hc_gallery =  ;
9073: LD_ADDR_OWVAR 33
9077: PUSH
9078: LD_STRING 
9080: ST_TO_ADDR
// hc_name =  ;
9081: LD_ADDR_OWVAR 26
9085: PUSH
9086: LD_STRING 
9088: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9089: LD_INT 0
9091: PPUSH
9092: LD_INT 3
9094: PPUSH
9095: LD_VAR 0 4
9099: PPUSH
9100: CALL_OW 380
// un = CreateHuman ;
9104: LD_ADDR_VAR 0 15
9108: PUSH
9109: CALL_OW 44
9113: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9114: LD_VAR 0 15
9118: PPUSH
9119: LD_VAR 0 16
9123: PPUSH
9124: CALL_OW 52
// end ; i = i + 1 ;
9128: LD_ADDR_VAR 0 13
9132: PUSH
9133: LD_VAR 0 13
9137: PUSH
9138: LD_INT 1
9140: PLUS
9141: ST_TO_ADDR
// end ; if nation = 2 then
9142: LD_VAR 0 5
9146: PUSH
9147: LD_INT 2
9149: EQUAL
9150: IFFALSE 9574
// begin uc_side = side ;
9152: LD_ADDR_OWVAR 20
9156: PUSH
9157: LD_VAR 0 2
9161: ST_TO_ADDR
// uc_nation = nation ;
9162: LD_ADDR_OWVAR 21
9166: PUSH
9167: LD_VAR 0 5
9171: ST_TO_ADDR
// vc_engine = vehengine ;
9172: LD_ADDR_OWVAR 39
9176: PUSH
9177: LD_VAR 0 6
9181: ST_TO_ADDR
// vc_control = vehcontrol ;
9182: LD_ADDR_OWVAR 38
9186: PUSH
9187: LD_VAR 0 7
9191: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9192: LD_ADDR_OWVAR 40
9196: PUSH
9197: LD_VAR 0 9
9201: PUSH
9202: LD_INT 1
9204: PPUSH
9205: LD_VAR 0 9
9209: PPUSH
9210: CALL_OW 12
9214: ARRAY
9215: ST_TO_ADDR
// for j = 1 to ARWeapons do
9216: LD_ADDR_VAR 0 14
9220: PUSH
9221: DOUBLE
9222: LD_INT 1
9224: DEC
9225: ST_TO_ADDR
9226: LD_VAR 0 9
9230: PUSH
9231: FOR_TO
9232: IFFALSE 9466
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9234: LD_VAR 0 9
9238: PUSH
9239: LD_VAR 0 14
9243: ARRAY
9244: PUSH
9245: LD_INT 24
9247: EQUAL
9248: PUSH
9249: LD_VAR 0 9
9253: PUSH
9254: LD_VAR 0 14
9258: ARRAY
9259: PUSH
9260: LD_INT 22
9262: EQUAL
9263: OR
9264: PUSH
9265: LD_VAR 0 9
9269: PUSH
9270: LD_VAR 0 14
9274: ARRAY
9275: PUSH
9276: LD_INT 23
9278: EQUAL
9279: OR
9280: PUSH
9281: LD_VAR 0 9
9285: PUSH
9286: LD_VAR 0 14
9290: ARRAY
9291: PUSH
9292: LD_INT 30
9294: EQUAL
9295: OR
9296: IFFALSE 9345
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9298: LD_ADDR_VAR 0 18
9302: PUSH
9303: LD_INT 11
9305: PUSH
9306: LD_INT 12
9308: PUSH
9309: LD_INT 13
9311: PUSH
9312: LD_INT 14
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9321: LD_ADDR_OWVAR 37
9325: PUSH
9326: LD_VAR 0 18
9330: PUSH
9331: LD_INT 1
9333: PPUSH
9334: LD_VAR 0 18
9338: PPUSH
9339: CALL_OW 12
9343: ARRAY
9344: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9345: LD_VAR 0 9
9349: PUSH
9350: LD_VAR 0 14
9354: ARRAY
9355: PUSH
9356: LD_INT 29
9358: EQUAL
9359: PUSH
9360: LD_VAR 0 9
9364: PUSH
9365: LD_VAR 0 14
9369: ARRAY
9370: PUSH
9371: LD_INT 28
9373: EQUAL
9374: OR
9375: PUSH
9376: LD_VAR 0 9
9380: PUSH
9381: LD_VAR 0 14
9385: ARRAY
9386: PUSH
9387: LD_INT 27
9389: EQUAL
9390: OR
9391: PUSH
9392: LD_VAR 0 9
9396: PUSH
9397: LD_VAR 0 14
9401: ARRAY
9402: PUSH
9403: LD_INT 26
9405: EQUAL
9406: OR
9407: PUSH
9408: LD_VAR 0 9
9412: PUSH
9413: LD_VAR 0 14
9417: ARRAY
9418: PUSH
9419: LD_INT 25
9421: EQUAL
9422: OR
9423: IFFALSE 9464
// begin arChassisTab = [ 13 , 14 ] ;
9425: LD_ADDR_VAR 0 18
9429: PUSH
9430: LD_INT 13
9432: PUSH
9433: LD_INT 14
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9440: LD_ADDR_OWVAR 37
9444: PUSH
9445: LD_VAR 0 18
9449: PUSH
9450: LD_INT 1
9452: PPUSH
9453: LD_VAR 0 18
9457: PPUSH
9458: CALL_OW 12
9462: ARRAY
9463: ST_TO_ADDR
// end ; end ;
9464: GO 9231
9466: POP
9467: POP
// veh = CreateVehicle ;
9468: LD_ADDR_VAR 0 16
9472: PUSH
9473: CALL_OW 45
9477: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9478: LD_VAR 0 16
9482: PPUSH
9483: LD_VAR 0 1
9487: PPUSH
9488: LD_INT 0
9490: PPUSH
9491: CALL_OW 49
// if vehcontrol = 1 then
9495: LD_VAR 0 7
9499: PUSH
9500: LD_INT 1
9502: EQUAL
9503: IFFALSE 9560
// begin hc_gallery =  ;
9505: LD_ADDR_OWVAR 33
9509: PUSH
9510: LD_STRING 
9512: ST_TO_ADDR
// hc_name =  ;
9513: LD_ADDR_OWVAR 26
9517: PUSH
9518: LD_STRING 
9520: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9521: LD_INT 0
9523: PPUSH
9524: LD_INT 3
9526: PPUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL_OW 380
// un = CreateHuman ;
9536: LD_ADDR_VAR 0 15
9540: PUSH
9541: CALL_OW 44
9545: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9546: LD_VAR 0 15
9550: PPUSH
9551: LD_VAR 0 16
9555: PPUSH
9556: CALL_OW 52
// end ; i = i + 1 ;
9560: LD_ADDR_VAR 0 13
9564: PUSH
9565: LD_VAR 0 13
9569: PUSH
9570: LD_INT 1
9572: PLUS
9573: ST_TO_ADDR
// end ; if nation = 3 then
9574: LD_VAR 0 5
9578: PUSH
9579: LD_INT 3
9581: EQUAL
9582: IFFALSE 9974
// begin uc_side = side ;
9584: LD_ADDR_OWVAR 20
9588: PUSH
9589: LD_VAR 0 2
9593: ST_TO_ADDR
// uc_nation = nation ;
9594: LD_ADDR_OWVAR 21
9598: PUSH
9599: LD_VAR 0 5
9603: ST_TO_ADDR
// vc_engine = vehengine ;
9604: LD_ADDR_OWVAR 39
9608: PUSH
9609: LD_VAR 0 6
9613: ST_TO_ADDR
// vc_control = vehcontrol ;
9614: LD_ADDR_OWVAR 38
9618: PUSH
9619: LD_VAR 0 7
9623: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9624: LD_ADDR_OWVAR 40
9628: PUSH
9629: LD_VAR 0 8
9633: PUSH
9634: LD_INT 1
9636: PPUSH
9637: LD_VAR 0 8
9641: PPUSH
9642: CALL_OW 12
9646: ARRAY
9647: ST_TO_ADDR
// for j = 1 to RuWeapons do
9648: LD_ADDR_VAR 0 14
9652: PUSH
9653: DOUBLE
9654: LD_INT 1
9656: DEC
9657: ST_TO_ADDR
9658: LD_VAR 0 8
9662: PUSH
9663: FOR_TO
9664: IFFALSE 9866
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9666: LD_VAR 0 8
9670: PUSH
9671: LD_VAR 0 14
9675: ARRAY
9676: PUSH
9677: LD_INT 42
9679: EQUAL
9680: PUSH
9681: LD_VAR 0 8
9685: PUSH
9686: LD_VAR 0 14
9690: ARRAY
9691: PUSH
9692: LD_INT 43
9694: EQUAL
9695: OR
9696: PUSH
9697: LD_VAR 0 8
9701: PUSH
9702: LD_VAR 0 14
9706: ARRAY
9707: PUSH
9708: LD_INT 44
9710: EQUAL
9711: OR
9712: PUSH
9713: LD_VAR 0 8
9717: PUSH
9718: LD_VAR 0 14
9722: ARRAY
9723: PUSH
9724: LD_INT 45
9726: EQUAL
9727: OR
9728: PUSH
9729: LD_VAR 0 8
9733: PUSH
9734: LD_VAR 0 14
9738: ARRAY
9739: PUSH
9740: LD_INT 49
9742: EQUAL
9743: OR
9744: IFFALSE 9793
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
9746: LD_ADDR_VAR 0 17
9750: PUSH
9751: LD_INT 21
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_INT 23
9759: PUSH
9760: LD_INT 24
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9769: LD_ADDR_OWVAR 37
9773: PUSH
9774: LD_VAR 0 17
9778: PUSH
9779: LD_INT 1
9781: PPUSH
9782: LD_VAR 0 17
9786: PPUSH
9787: CALL_OW 12
9791: ARRAY
9792: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9793: LD_VAR 0 8
9797: PUSH
9798: LD_VAR 0 14
9802: ARRAY
9803: PUSH
9804: LD_INT 46
9806: EQUAL
9807: PUSH
9808: LD_VAR 0 8
9812: PUSH
9813: LD_VAR 0 14
9817: ARRAY
9818: PUSH
9819: LD_INT 47
9821: EQUAL
9822: OR
9823: IFFALSE 9864
// begin ruChassisTab = [ 23 , 24 ] ;
9825: LD_ADDR_VAR 0 17
9829: PUSH
9830: LD_INT 23
9832: PUSH
9833: LD_INT 24
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9840: LD_ADDR_OWVAR 37
9844: PUSH
9845: LD_VAR 0 17
9849: PUSH
9850: LD_INT 1
9852: PPUSH
9853: LD_VAR 0 17
9857: PPUSH
9858: CALL_OW 12
9862: ARRAY
9863: ST_TO_ADDR
// end ; end ;
9864: GO 9663
9866: POP
9867: POP
// veh = CreateVehicle ;
9868: LD_ADDR_VAR 0 16
9872: PUSH
9873: CALL_OW 45
9877: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9878: LD_VAR 0 16
9882: PPUSH
9883: LD_VAR 0 1
9887: PPUSH
9888: LD_INT 0
9890: PPUSH
9891: CALL_OW 49
// if vehcontrol = 1 then
9895: LD_VAR 0 7
9899: PUSH
9900: LD_INT 1
9902: EQUAL
9903: IFFALSE 9960
// begin hc_gallery =  ;
9905: LD_ADDR_OWVAR 33
9909: PUSH
9910: LD_STRING 
9912: ST_TO_ADDR
// hc_name =  ;
9913: LD_ADDR_OWVAR 26
9917: PUSH
9918: LD_STRING 
9920: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9921: LD_INT 0
9923: PPUSH
9924: LD_INT 3
9926: PPUSH
9927: LD_VAR 0 4
9931: PPUSH
9932: CALL_OW 380
// un = CreateHuman ;
9936: LD_ADDR_VAR 0 15
9940: PUSH
9941: CALL_OW 44
9945: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9946: LD_VAR 0 15
9950: PPUSH
9951: LD_VAR 0 16
9955: PPUSH
9956: CALL_OW 52
// end ; i = i + 1 ;
9960: LD_ADDR_VAR 0 13
9964: PUSH
9965: LD_VAR 0 13
9969: PUSH
9970: LD_INT 1
9972: PLUS
9973: ST_TO_ADDR
// end ; until i = vehCount ;
9974: LD_VAR 0 13
9978: PUSH
9979: LD_VAR 0 3
9983: EQUAL
9984: IFFALSE 8636
// repeat wait ( 0 0$1 ) ;
9986: LD_INT 35
9988: PPUSH
9989: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
9993: LD_ADDR_VAR 0 20
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_VAR 0 2
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 21
10012: PUSH
10013: LD_INT 2
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 24
10022: PUSH
10023: LD_INT 661
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: PPUSH
10035: CALL_OW 69
10039: ST_TO_ADDR
// if vehicleOK_list > 0 then
10040: LD_VAR 0 20
10044: PUSH
10045: LD_INT 0
10047: GREATER
10048: IFFALSE 10239
// begin for i in vehicleOK_list do
10050: LD_ADDR_VAR 0 13
10054: PUSH
10055: LD_VAR 0 20
10059: PUSH
10060: FOR_IN
10061: IFFALSE 10237
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10063: LD_ADDR_VAR 0 21
10067: PUSH
10068: LD_INT 22
10070: PUSH
10071: LD_VAR 0 11
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: PPUSH
10085: LD_VAR 0 13
10089: PPUSH
10090: CALL_OW 74
10094: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10095: LD_ADDR_VAR 0 22
10099: PUSH
10100: LD_INT 22
10102: PUSH
10103: LD_VAR 0 11
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 2
10114: PUSH
10115: LD_INT 59
10117: PUSH
10118: EMPTY
10119: LIST
10120: PUSH
10121: LD_INT 21
10123: PUSH
10124: LD_INT 1
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 21
10133: PUSH
10134: LD_INT 2
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: PPUSH
10154: CALL_OW 69
10158: PPUSH
10159: LD_VAR 0 13
10163: PPUSH
10164: CALL_OW 74
10168: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10169: LD_VAR 0 13
10173: PPUSH
10174: LD_VAR 0 21
10178: PPUSH
10179: CALL_OW 296
10183: PUSH
10184: LD_INT 8
10186: PLUS
10187: PUSH
10188: LD_VAR 0 13
10192: PPUSH
10193: LD_VAR 0 22
10197: PPUSH
10198: CALL_OW 296
10202: LESS
10203: IFFALSE 10221
// begin ComAttackUnit ( i , target1 ) ;
10205: LD_VAR 0 13
10209: PPUSH
10210: LD_VAR 0 21
10214: PPUSH
10215: CALL_OW 115
// end else
10219: GO 10235
// begin ComAttackUnit ( i , target2 ) ;
10221: LD_VAR 0 13
10225: PPUSH
10226: LD_VAR 0 22
10230: PPUSH
10231: CALL_OW 115
// end ; end ;
10235: GO 10060
10237: POP
10238: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10239: LD_INT 22
10241: PUSH
10242: LD_VAR 0 2
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 21
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: PUSH
10270: LD_INT 0
10272: EQUAL
10273: IFFALSE 9986
// end ; end_of_file
10275: LD_VAR 0 12
10279: RET
// every 1 do var i , gammaSquad , startX , startY ;
10280: GO 10282
10282: DISABLE
10283: LD_INT 0
10285: PPUSH
10286: PPUSH
10287: PPUSH
10288: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10289: LD_ADDR_VAR 0 2
10293: PUSH
10294: LD_EXP 8
10298: PUSH
10299: LD_EXP 9
10303: PUSH
10304: LD_EXP 10
10308: PUSH
10309: LD_EXP 11
10313: PUSH
10314: LD_EXP 12
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10326: LD_ADDR_VAR 0 3
10330: PUSH
10331: LD_INT 46
10333: PUSH
10334: LD_INT 45
10336: PUSH
10337: LD_INT 44
10339: PUSH
10340: LD_INT 43
10342: PUSH
10343: LD_INT 42
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10353: LD_ADDR_VAR 0 4
10357: PUSH
10358: LD_INT 14
10360: PUSH
10361: LD_INT 12
10363: PUSH
10364: LD_INT 10
10366: PUSH
10367: LD_INT 8
10369: PUSH
10370: LD_INT 6
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10380: LD_INT 32
10382: PPUSH
10383: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10387: LD_INT 32
10389: PPUSH
10390: LD_INT 51
10392: PPUSH
10393: LD_INT 26
10395: PPUSH
10396: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10400: LD_INT 32
10402: PPUSH
10403: LD_INT 53
10405: PPUSH
10406: LD_INT 23
10408: PPUSH
10409: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10413: LD_INT 32
10415: PPUSH
10416: LD_INT 52
10418: PPUSH
10419: LD_INT 19
10421: PPUSH
10422: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10426: LD_INT 35
10428: PPUSH
10429: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10433: LD_INT 32
10435: PPUSH
10436: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10440: LD_INT 32
10442: PPUSH
10443: CALL_OW 250
10447: PUSH
10448: LD_INT 52
10450: EQUAL
10451: PUSH
10452: LD_INT 32
10454: PPUSH
10455: CALL_OW 251
10459: PUSH
10460: LD_INT 19
10462: EQUAL
10463: AND
10464: IFFALSE 10426
// ComExitVehicle ( JMM ) ;
10466: LD_EXP 2
10470: PPUSH
10471: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10475: LD_EXP 7
10479: PPUSH
10480: LD_EXP 2
10484: PPUSH
10485: CALL_OW 119
// wait ( 0 0$01 ) ;
10489: LD_INT 35
10491: PPUSH
10492: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10496: LD_EXP 2
10500: PPUSH
10501: LD_INT 46
10503: PPUSH
10504: LD_INT 10
10506: PPUSH
10507: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10511: LD_EXP 2
10515: PPUSH
10516: LD_EXP 7
10520: PPUSH
10521: CALL_OW 179
// wait ( 0 0$4 ) ;
10525: LD_INT 140
10527: PPUSH
10528: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10532: LD_EXP 2
10536: PPUSH
10537: LD_STRING D1-JMM-1
10539: PPUSH
10540: CALL_OW 88
// for i := 1 to gammaSquad do
10544: LD_ADDR_VAR 0 1
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_VAR 0 2
10558: PUSH
10559: FOR_TO
10560: IFFALSE 10621
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
10562: LD_VAR 0 2
10566: PUSH
10567: LD_VAR 0 1
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 3
10577: PUSH
10578: LD_VAR 0 1
10582: ARRAY
10583: PPUSH
10584: LD_VAR 0 4
10588: PUSH
10589: LD_VAR 0 1
10593: ARRAY
10594: PPUSH
10595: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
10599: LD_VAR 0 2
10603: PUSH
10604: LD_VAR 0 1
10608: ARRAY
10609: PPUSH
10610: LD_EXP 2
10614: PPUSH
10615: CALL_OW 179
// end ;
10619: GO 10559
10621: POP
10622: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
10623: LD_EXP 5
10627: PPUSH
10628: LD_INT 41
10630: PPUSH
10631: LD_INT 4
10633: PPUSH
10634: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
10638: LD_EXP 5
10642: PPUSH
10643: LD_EXP 2
10647: PPUSH
10648: CALL_OW 179
// Say ( Brown , D1-Brown-1 ) ;
10652: LD_EXP 7
10656: PPUSH
10657: LD_STRING D1-Brown-1
10659: PPUSH
10660: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
10664: LD_EXP 2
10668: PPUSH
10669: LD_STRING D1-JMM-2
10671: PPUSH
10672: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
10676: LD_EXP 7
10680: PPUSH
10681: LD_STRING D1-Brown-2
10683: PPUSH
10684: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
10688: LD_EXP 2
10692: PPUSH
10693: LD_EXP 9
10697: PPUSH
10698: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
10702: LD_EXP 9
10706: PPUSH
10707: LD_STRING D1-FSol1-2
10709: PPUSH
10710: CALL_OW 88
// ComTurnUnit ( JMM , Campell ) ;
10714: LD_EXP 2
10718: PPUSH
10719: LD_EXP 12
10723: PPUSH
10724: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
10728: LD_EXP 8
10732: PPUSH
10733: LD_STRING D1-Sol2-2
10735: PPUSH
10736: CALL_OW 88
// if Lisa then
10740: LD_EXP 5
10744: IFFALSE 10772
// begin ComTurnUnit ( JMM , Lisa ) ;
10746: LD_EXP 2
10750: PPUSH
10751: LD_EXP 5
10755: PPUSH
10756: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
10760: LD_EXP 5
10764: PPUSH
10765: LD_STRING D1-Lisa-2
10767: PPUSH
10768: CALL_OW 88
// end ; Say ( JMM , D1-JMM-3 ) ;
10772: LD_EXP 2
10776: PPUSH
10777: LD_STRING D1-JMM-3
10779: PPUSH
10780: CALL_OW 88
// ComTurnUnit ( JMM , Brown ) ;
10784: LD_EXP 2
10788: PPUSH
10789: LD_EXP 7
10793: PPUSH
10794: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
10798: LD_EXP 2
10802: PPUSH
10803: LD_STRING D1-JMM-3a
10805: PPUSH
10806: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
10810: LD_EXP 7
10814: PPUSH
10815: LD_INT 38
10817: PPUSH
10818: LD_INT 5
10820: PPUSH
10821: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
10825: LD_EXP 7
10829: PPUSH
10830: LD_EXP 2
10834: PPUSH
10835: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
10839: LD_EXP 2
10843: PPUSH
10844: LD_INT 40
10846: PPUSH
10847: LD_INT 7
10849: PPUSH
10850: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10854: LD_EXP 2
10858: PPUSH
10859: LD_EXP 7
10863: PPUSH
10864: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
10868: LD_EXP 7
10872: PPUSH
10873: LD_STRING D1-Brown-3
10875: PPUSH
10876: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
10880: LD_EXP 16
10884: PPUSH
10885: LD_STRING D1-Har-3
10887: PPUSH
10888: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
10892: LD_EXP 2
10896: PPUSH
10897: LD_STRING D1-JMM-4
10899: PPUSH
10900: CALL_OW 88
// PrepareRussianConvoy ;
10904: CALL 2127 0 0
// SayRadio ( Harisson , D1-Har-4 ) ;
10908: LD_EXP 16
10912: PPUSH
10913: LD_STRING D1-Har-4
10915: PPUSH
10916: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
10920: LD_EXP 2
10924: PPUSH
10925: LD_STRING D1-JMM-5
10927: PPUSH
10928: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
10932: LD_EXP 16
10936: PPUSH
10937: LD_STRING D1-Har-5
10939: PPUSH
10940: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
10944: LD_EXP 2
10948: PPUSH
10949: LD_STRING D1-JMM-6
10951: PPUSH
10952: CALL_OW 88
// InGameOff ;
10956: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10960: LD_STRING M1
10962: PPUSH
10963: CALL_OW 337
// SaveForQuickRestart ;
10967: CALL_OW 22
// timerStatus = 1 ;
10971: LD_ADDR_EXP 29
10975: PUSH
10976: LD_INT 1
10978: ST_TO_ADDR
// startTimer = 1 ;
10979: LD_ADDR_EXP 30
10983: PUSH
10984: LD_INT 1
10986: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10987: LD_INT 105
10989: PPUSH
10990: CALL_OW 67
// DialogueOn ;
10994: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
10998: LD_EXP 12
11002: PPUSH
11003: LD_STRING D9-Mech1-1
11005: PPUSH
11006: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11010: LD_EXP 2
11014: PPUSH
11015: LD_STRING D9-JMM-1
11017: PPUSH
11018: CALL_OW 88
// DialogueOff ;
11022: CALL_OW 7
// end ;
11026: PPOPN 4
11028: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11029: LD_INT 47
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: CALL_OW 321
11039: PUSH
11040: LD_INT 2
11042: EQUAL
11043: PUSH
11044: LD_INT 22
11046: PUSH
11047: LD_INT 1
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 21
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 30
11066: PUSH
11067: LD_INT 3
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 69
11083: PUSH
11084: LD_INT 0
11086: GREATER
11087: AND
11088: IFFALSE 11318
11090: GO 11092
11092: DISABLE
// begin if IsOk ( Campell ) then
11093: LD_EXP 12
11097: PPUSH
11098: CALL_OW 302
11102: IFFALSE 11118
// begin Say ( Campell , D10-Mech1-1 ) ;
11104: LD_EXP 12
11108: PPUSH
11109: LD_STRING D10-Mech1-1
11111: PPUSH
11112: CALL_OW 88
// end else
11116: GO 11318
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11118: LD_INT 22
11120: PUSH
11121: LD_INT 1
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 21
11130: PUSH
11131: LD_INT 1
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 25
11140: PUSH
11141: LD_INT 3
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 26
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 69
11168: PUSH
11169: LD_EXP 2
11173: PUSH
11174: EMPTY
11175: LIST
11176: PUSH
11177: LD_INT 0
11179: GREATER
11180: DIFF
11181: IFFALSE 11255
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11183: LD_INT 22
11185: PUSH
11186: LD_INT 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 21
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 25
11205: PUSH
11206: LD_INT 3
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 26
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: PPUSH
11229: CALL_OW 69
11233: PUSH
11234: LD_EXP 2
11238: PUSH
11239: EMPTY
11240: LIST
11241: DIFF
11242: PPUSH
11243: LD_STRING D10-Mech1-1
11245: PPUSH
11246: LD_STRING D10-Mech1-1
11248: PPUSH
11249: CALL 3357 0 3
// end else
11253: GO 11318
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11255: LD_INT 22
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 21
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 26
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 1
11292: ARRAY
11293: PPUSH
11294: CALL_OW 69
11298: PUSH
11299: LD_EXP 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: DIFF
11307: PPUSH
11308: LD_STRING D10-Mech1-1
11310: PPUSH
11311: LD_STRING D10-Mech1-1
11313: PPUSH
11314: CALL 3357 0 3
// end ; end ; end ;
11318: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
11319: LD_INT 22
11321: PUSH
11322: LD_INT 1
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 32
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PPUSH
11343: CALL_OW 69
11347: PUSH
11348: LD_INT 0
11350: GREATER
11351: PUSH
11352: LD_EXP 32
11356: PUSH
11357: LD_INT 0
11359: EQUAL
11360: AND
11361: IFFALSE 11609
11363: GO 11365
11365: DISABLE
// begin if IsOK ( Claptopn ) then
11366: LD_EXP 11
11370: PPUSH
11371: CALL_OW 302
11375: IFFALSE 11391
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
11377: LD_EXP 11
11381: PPUSH
11382: LD_STRING D9b-Eng1-1
11384: PPUSH
11385: CALL_OW 88
// end else
11389: GO 11587
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11391: LD_INT 22
11393: PUSH
11394: LD_INT 1
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 21
11403: PUSH
11404: LD_INT 1
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 25
11413: PUSH
11414: LD_INT 3
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 26
11423: PUSH
11424: LD_INT 1
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 69
11441: PUSH
11442: LD_EXP 2
11446: PUSH
11447: EMPTY
11448: LIST
11449: PUSH
11450: LD_INT 0
11452: GREATER
11453: DIFF
11454: IFFALSE 11528
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
11456: LD_INT 22
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 25
11478: PUSH
11479: LD_INT 2
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 26
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 69
11506: PUSH
11507: LD_EXP 2
11511: PUSH
11512: EMPTY
11513: LIST
11514: DIFF
11515: PPUSH
11516: LD_STRING D9b-Eng1-1
11518: PPUSH
11519: LD_STRING D9b-Eng1-11
11521: PPUSH
11522: CALL 3357 0 3
// end else
11526: GO 11587
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
11528: LD_INT 22
11530: PUSH
11531: LD_INT 1
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 21
11540: PUSH
11541: LD_INT 1
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: LD_INT 26
11550: PUSH
11551: LD_INT 1
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: PPUSH
11563: CALL_OW 69
11567: PUSH
11568: LD_EXP 2
11572: PUSH
11573: EMPTY
11574: LIST
11575: DIFF
11576: PPUSH
11577: LD_STRING D9b-Eng1-1
11579: PPUSH
11580: LD_STRING D9b-Eng1-1
11582: PPUSH
11583: CALL 3357 0 3
// end ; end ; if energyVDialog = 0 then
11587: LD_EXP 33
11591: PUSH
11592: LD_INT 0
11594: EQUAL
11595: IFFALSE 11601
// EnergyDialog ;
11597: CALL 3669 0 0
// bunkerDialog = 1 ;
11601: LD_ADDR_EXP 32
11605: PUSH
11606: LD_INT 1
11608: ST_TO_ADDR
// end ;
11609: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
11610: LD_EXP 34
11614: PUSH
11615: LD_INT 1
11617: EQUAL
11618: PUSH
11619: LD_EXP 35
11623: PUSH
11624: LD_INT 1
11626: EQUAL
11627: AND
11628: IFFALSE 11640
11630: GO 11632
11632: DISABLE
// ChangeMissionObjectives ( M1a ) ;
11633: LD_STRING M1a
11635: PPUSH
11636: CALL_OW 337
11640: END
// every 3 3$0 do
11641: GO 11643
11643: DISABLE
// begin PrepareFirstAttack ;
11644: CALL 2919 0 0
// end ;
11648: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
11649: LD_INT 22
11651: PUSH
11652: LD_INT 5
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 21
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 69
11677: PUSH
11678: LD_INT 3
11680: LESSEQUAL
11681: PUSH
11682: LD_EXP 23
11686: PUSH
11687: LD_INT 1
11689: EQUAL
11690: AND
11691: IFFALSE 12009
11693: GO 11695
11695: DISABLE
11696: LD_INT 0
11698: PPUSH
// begin firstRussianAttack = 2 ;
11699: LD_ADDR_EXP 23
11703: PUSH
11704: LD_INT 2
11706: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
11707: LD_ADDR_VAR 0 1
11711: PUSH
11712: LD_INT 22
11714: PUSH
11715: LD_INT 5
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 21
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PPUSH
11736: CALL_OW 69
11740: PUSH
11741: FOR_IN
11742: IFFALSE 11761
// ComMoveXY ( i , 125 , 98 ) ;
11744: LD_VAR 0 1
11748: PPUSH
11749: LD_INT 125
11751: PPUSH
11752: LD_INT 98
11754: PPUSH
11755: CALL_OW 111
11759: GO 11741
11761: POP
11762: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
11763: LD_INT 22
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 21
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PPUSH
11787: CALL_OW 69
11791: PUSH
11792: LD_EXP 2
11796: PUSH
11797: LD_EXP 7
11801: PUSH
11802: LD_EXP 5
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: DIFF
11812: PPUSH
11813: LD_STRING DAtt1-Sol1-1
11815: PPUSH
11816: LD_STRING DAtt1-FSol1-1
11818: PPUSH
11819: CALL 3357 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
11823: LD_EXP 2
11827: PPUSH
11828: LD_STRING DAtt1-JMM-1
11830: PPUSH
11831: CALL_OW 88
// if Lisa then
11835: LD_EXP 5
11839: IFFALSE 11855
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
11841: LD_EXP 5
11845: PPUSH
11846: LD_STRING DAtt1a-Lisa-1
11848: PPUSH
11849: CALL_OW 88
// end else
11853: GO 11926
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
11855: LD_INT 22
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PUSH
11895: LD_EXP 2
11899: PUSH
11900: LD_EXP 7
11904: PUSH
11905: LD_EXP 5
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: DIFF
11915: PPUSH
11916: LD_STRING DAtt1a-Sol1-1
11918: PPUSH
11919: LD_STRING DAtt1-FSol1-1
11921: PPUSH
11922: CALL 3357 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
11926: LD_EXP 2
11930: PPUSH
11931: LD_STRING DAtt1a-JMM-1
11933: PPUSH
11934: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
11938: LD_INT 22
11940: PUSH
11941: LD_INT 1
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 21
11950: PUSH
11951: LD_INT 1
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 26
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: PPUSH
11973: CALL_OW 69
11977: PUSH
11978: LD_EXP 2
11982: PUSH
11983: LD_EXP 7
11987: PUSH
11988: LD_EXP 5
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: DIFF
11998: PPUSH
11999: LD_STRING DAtt1b-Sol1-1
12001: PPUSH
12002: LD_STRING DAtt1a-Sol1-1
12004: PPUSH
12005: CALL 3357 0 3
// end ;
12009: PPOPN 1
12011: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12012: LD_EXP 23
12016: PUSH
12017: LD_INT 2
12019: EQUAL
12020: IFFALSE 12082
12022: GO 12024
12024: DISABLE
12025: LD_INT 0
12027: PPUSH
// begin enable ;
12028: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12029: LD_ADDR_VAR 0 1
12033: PUSH
12034: LD_INT 5
12036: PPUSH
12037: LD_INT 22
12039: PUSH
12040: LD_INT 5
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 21
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 70
12065: PUSH
12066: FOR_IN
12067: IFFALSE 12080
// RemoveUnit ( i ) ;
12069: LD_VAR 0 1
12073: PPUSH
12074: CALL_OW 64
12078: GO 12066
12080: POP
12081: POP
// end ;
12082: PPOPN 1
12084: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12085: LD_INT 22
12087: PUSH
12088: LD_INT 5
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: PPUSH
12098: CALL_OW 69
12102: PUSH
12103: LD_INT 0
12105: EQUAL
12106: PUSH
12107: LD_EXP 23
12111: PUSH
12112: LD_INT 2
12114: EQUAL
12115: AND
12116: IFFALSE 12129
12118: GO 12120
12120: DISABLE
// firstRussianAttack = 3 ;
12121: LD_ADDR_EXP 23
12125: PUSH
12126: LD_INT 3
12128: ST_TO_ADDR
12129: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12130: LD_EXP 28
12134: PUSH
12135: LD_INT 0
12137: EQUAL
12138: IFFALSE 12219
12140: GO 12142
12142: DISABLE
// begin timerStatus = 4 ;
12143: LD_ADDR_EXP 29
12147: PUSH
12148: LD_INT 4
12150: ST_TO_ADDR
// DialogueOn ;
12151: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12155: LD_EXP 13
12159: PPUSH
12160: LD_STRING D2-Don-1
12162: PPUSH
12163: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12167: LD_EXP 2
12171: PPUSH
12172: LD_STRING D2-JMM-1
12174: PPUSH
12175: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12179: LD_EXP 13
12183: PPUSH
12184: LD_STRING D2-Don-2
12186: PPUSH
12187: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12191: LD_EXP 2
12195: PPUSH
12196: LD_STRING D2-JMM-2
12198: PPUSH
12199: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12203: LD_EXP 13
12207: PPUSH
12208: LD_STRING D2-Don-3
12210: PPUSH
12211: CALL_OW 94
// DialogueOff ;
12215: CALL_OW 7
// end ;
12219: END
// every 12 12$0 do var tmp ;
12220: GO 12222
12222: DISABLE
12223: LD_INT 0
12225: PPUSH
// begin PrepareDonaldsonArmy ;
12226: CALL 772 0 0
// CenterNowOnUnits ( Donaldson ) ;
12230: LD_EXP 13
12234: PPUSH
12235: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
12239: LD_ADDR_VAR 0 1
12243: PUSH
12244: LD_INT 22
12246: PUSH
12247: LD_INT 4
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 21
12256: PUSH
12257: LD_INT 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 26
12266: PUSH
12267: LD_INT 1
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 69
12283: PUSH
12284: LD_EXP 6
12288: PUSH
12289: EMPTY
12290: LIST
12291: DIFF
12292: ST_TO_ADDR
// DialogueOn ;
12293: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
12297: LD_VAR 0 1
12301: PPUSH
12302: LD_STRING D3-Sol1-1
12304: PPUSH
12305: LD_STRING D3-Sol1-1
12307: PPUSH
12308: CALL 3357 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
12312: LD_INT 22
12314: PUSH
12315: LD_INT 4
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 21
12324: PUSH
12325: LD_INT 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 26
12334: PUSH
12335: LD_INT 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 25
12344: PUSH
12345: LD_INT 3
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: PPUSH
12363: LD_STRING D3-Sol2-1
12365: PPUSH
12366: LD_STRING D3-Sol2-1
12368: PPUSH
12369: CALL 3357 0 3
// if Frank then
12373: LD_EXP 6
12377: IFFALSE 12391
// Say ( Frank , D3-Frank-1 ) ;
12379: LD_EXP 6
12383: PPUSH
12384: LD_STRING D3-Frank-1
12386: PPUSH
12387: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
12391: LD_EXP 13
12395: PPUSH
12396: LD_STRING D3-Don-1
12398: PPUSH
12399: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
12403: LD_EXP 13
12407: PPUSH
12408: LD_STRING D3-Don-1a
12410: PPUSH
12411: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
12415: LD_EXP 2
12419: PPUSH
12420: LD_STRING D3-JMM-1
12422: PPUSH
12423: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
12427: LD_EXP 13
12431: PPUSH
12432: LD_STRING D3-Don-2
12434: PPUSH
12435: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
12439: LD_INT 22
12441: PUSH
12442: LD_INT 6
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 21
12451: PUSH
12452: LD_INT 1
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PPUSH
12463: CALL_OW 69
12467: PUSH
12468: LD_INT 0
12470: GREATER
12471: IFFALSE 12585
// begin Say ( JMM , D3-JMM-2 ) ;
12473: LD_EXP 2
12477: PPUSH
12478: LD_STRING D3-JMM-2
12480: PPUSH
12481: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
12485: LD_EXP 13
12489: PPUSH
12490: LD_STRING D3-Don-3
12492: PPUSH
12493: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
12497: LD_EXP 2
12501: PPUSH
12502: LD_STRING D3-JMM-3
12504: PPUSH
12505: CALL_OW 88
// if IsOK ( Frank ) then
12509: LD_EXP 6
12513: PPUSH
12514: CALL_OW 302
12518: IFFALSE 12532
// Say ( Frank , D3-Frank-3 ) ;
12520: LD_EXP 6
12524: PPUSH
12525: LD_STRING D3-Frank-3
12527: PPUSH
12528: CALL_OW 88
// DialogueOff ;
12532: CALL_OW 7
// if IsOK ( Frank ) then
12536: LD_EXP 6
12540: PPUSH
12541: CALL_OW 302
12545: IFFALSE 12583
// begin SetSide ( Frank , 0 ) ;
12547: LD_EXP 6
12551: PPUSH
12552: LD_INT 0
12554: PPUSH
12555: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
12559: LD_EXP 6
12563: PPUSH
12564: LD_INT 12
12566: PPUSH
12567: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
12571: LD_EXP 6
12575: PPUSH
12576: LD_STRING Frank
12578: PPUSH
12579: CALL_OW 38
// end ; end else
12583: GO 12648
// begin Say ( JMM , D3-JMM-4 ) ;
12585: LD_EXP 2
12589: PPUSH
12590: LD_STRING D3-JMM-4
12592: PPUSH
12593: CALL_OW 88
// DialogueOff ;
12597: CALL_OW 7
// if IsOK ( Frank ) then
12601: LD_EXP 6
12605: PPUSH
12606: CALL_OW 302
12610: IFFALSE 12648
// begin SetSide ( Frank , 0 ) ;
12612: LD_EXP 6
12616: PPUSH
12617: LD_INT 0
12619: PPUSH
12620: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
12624: LD_EXP 6
12628: PPUSH
12629: LD_INT 12
12631: PPUSH
12632: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
12636: LD_EXP 6
12640: PPUSH
12641: LD_STRING Frank
12643: PPUSH
12644: CALL_OW 38
// end ; end ; end ;
12648: PPOPN 1
12650: END
// every 0 0$1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
12651: LD_EXP 6
12655: PPUSH
12656: LD_INT 12
12658: PPUSH
12659: CALL_OW 308
12663: PUSH
12664: LD_EXP 6
12668: PPUSH
12669: CALL_OW 255
12673: PUSH
12674: LD_INT 0
12676: EQUAL
12677: AND
12678: IFFALSE 12700
12680: GO 12682
12682: DISABLE
// begin RemoveUnit ( Frank ) ;
12683: LD_EXP 6
12687: PPUSH
12688: CALL_OW 64
// frankScoutBase = 1 ;
12692: LD_ADDR_EXP 25
12696: PUSH
12697: LD_INT 1
12699: ST_TO_ADDR
// end ;
12700: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
12701: LD_EXP 13
12705: PPUSH
12706: CALL_OW 255
12710: PUSH
12711: LD_INT 4
12713: EQUAL
12714: PUSH
12715: LD_EXP 13
12719: PPUSH
12720: CALL_OW 302
12724: AND
12725: IFFALSE 12750
12727: GO 12729
12729: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
12730: LD_EXP 13
12734: PPUSH
12735: LD_STRING D3b-Don-1
12737: PPUSH
12738: CALL_OW 94
// donaldsonCoopAttack = 1 ;
12742: LD_ADDR_EXP 41
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// end ;
12750: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
12751: LD_EXP 24
12755: PUSH
12756: LD_INT 0
12758: EQUAL
12759: IFFALSE 12915
12761: GO 12763
12763: DISABLE
12764: LD_INT 0
12766: PPUSH
12767: PPUSH
// begin enable ;
12768: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
12769: LD_ADDR_VAR 0 1
12773: PUSH
12774: LD_INT 22
12776: PUSH
12777: LD_INT 4
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 21
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: PUSH
12803: FOR_IN
12804: IFFALSE 12913
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
12806: LD_ADDR_VAR 0 2
12810: PUSH
12811: LD_INT 22
12813: PUSH
12814: LD_INT 1
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 1
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: PUSH
12840: FOR_IN
12841: IFFALSE 12909
// begin if GetDistUnits ( i , j ) < 5 then
12843: LD_VAR 0 1
12847: PPUSH
12848: LD_VAR 0 2
12852: PPUSH
12853: CALL_OW 296
12857: PUSH
12858: LD_INT 5
12860: LESS
12861: IFFALSE 12907
// begin saveDonaldson = 1 ;
12863: LD_ADDR_EXP 24
12867: PUSH
12868: LD_INT 1
12870: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
12871: LD_INT 22
12873: PUSH
12874: LD_INT 4
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 21
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: PPUSH
12900: LD_INT 1
12902: PPUSH
12903: CALL_OW 235
// end ; end ;
12907: GO 12840
12909: POP
12910: POP
// end ;
12911: GO 12803
12913: POP
12914: POP
// end ;
12915: PPOPN 2
12917: END
// every 2 2$0 trigger saveDonaldson = 1 do
12918: LD_EXP 24
12922: PUSH
12923: LD_INT 1
12925: EQUAL
12926: IFFALSE 13168
12928: GO 12930
12930: DISABLE
// begin uc_side = 4 ;
12931: LD_ADDR_OWVAR 20
12935: PUSH
12936: LD_INT 4
12938: ST_TO_ADDR
// uc_nation = 1 ;
12939: LD_ADDR_OWVAR 21
12943: PUSH
12944: LD_INT 1
12946: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
12947: LD_ADDR_EXP 6
12951: PUSH
12952: LD_STRING Frank
12954: PPUSH
12955: CALL_OW 34
12959: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
12960: LD_EXP 6
12964: PPUSH
12965: LD_INT 13
12967: PPUSH
12968: LD_INT 0
12970: PPUSH
12971: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
12975: LD_INT 35
12977: PPUSH
12978: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
12982: LD_EXP 6
12986: PPUSH
12987: LD_INT 51
12989: PPUSH
12990: LD_INT 15
12992: PPUSH
12993: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
12997: LD_EXP 6
13001: PPUSH
13002: LD_EXP 2
13006: PPUSH
13007: CALL_OW 296
13011: PUSH
13012: LD_INT 6
13014: LESS
13015: IFFALSE 12975
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13017: LD_EXP 2
13021: PUSH
13022: LD_EXP 6
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 87
// DialogueOn ;
13035: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13039: LD_EXP 6
13043: PPUSH
13044: LD_STRING D3a-Frank-1
13046: PPUSH
13047: CALL_OW 88
// if Lisa then
13051: LD_EXP 5
13055: IFFALSE 13105
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13057: LD_EXP 5
13061: PPUSH
13062: LD_STRING D3a-Lisa-1
13064: PPUSH
13065: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13069: LD_EXP 6
13073: PPUSH
13074: LD_STRING D3a-Frank-2
13076: PPUSH
13077: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13081: LD_EXP 5
13085: PPUSH
13086: LD_STRING D3a-Lisa-2
13088: PPUSH
13089: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13093: LD_EXP 6
13097: PPUSH
13098: LD_STRING D3a-Frank-3
13100: PPUSH
13101: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13105: LD_EXP 2
13109: PPUSH
13110: LD_STRING D3a-JMM-3
13112: PPUSH
13113: CALL_OW 88
// DialogueOff ;
13117: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13121: LD_EXP 6
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 235
// InGameOn ;
13133: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13137: LD_INT 1
13139: PPUSH
13140: LD_INT 7
13142: PPUSH
13143: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13147: LD_INT 93
13149: PPUSH
13150: LD_INT 91
13152: PPUSH
13153: CALL_OW 84
// wait ( 0 0$5 ) ;
13157: LD_INT 175
13159: PPUSH
13160: CALL_OW 67
// InGameOff ;
13164: CALL_OW 9
// end ;
13168: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13169: LD_OWVAR 67
13173: PUSH
13174: LD_INT 2
13176: EQUAL
13177: PUSH
13178: LD_OWVAR 67
13182: PUSH
13183: LD_INT 3
13185: EQUAL
13186: OR
13187: IFFALSE 13211
13189: GO 13191
13191: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
13192: LD_INT 24
13194: PPUSH
13195: LD_INT 24
13197: PPUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: LD_INT 53
13206: PPUSH
13207: CALL_OW 125
13211: END
// every 18 18$0 do
13212: GO 13214
13214: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
13215: LD_EXP 16
13219: PPUSH
13220: LD_STRING D4-Har-1
13222: PPUSH
13223: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
13227: LD_EXP 2
13231: PPUSH
13232: LD_STRING D4-JMM-1
13234: PPUSH
13235: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
13239: LD_EXP 16
13243: PPUSH
13244: LD_STRING D4-Har-2
13246: PPUSH
13247: CALL_OW 94
// case query ( Q1 ) of 1 :
13251: LD_STRING Q1
13253: PPUSH
13254: CALL_OW 97
13258: PUSH
13259: LD_INT 1
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13267
13265: GO 13326
13267: POP
// begin Say ( JMM , D5-JMM-1 ) ;
13268: LD_EXP 2
13272: PPUSH
13273: LD_STRING D5-JMM-1
13275: PPUSH
13276: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
13280: LD_EXP 16
13284: PPUSH
13285: LD_STRING D5-Har-1
13287: PPUSH
13288: CALL_OW 94
// timeToSupport = 10 10$0 ;
13292: LD_ADDR_EXP 28
13296: PUSH
13297: LD_INT 21000
13299: ST_TO_ADDR
// timerStatus = 2 ;
13300: LD_ADDR_EXP 29
13304: PUSH
13305: LD_INT 2
13307: ST_TO_ADDR
// startTimer = 1 ;
13308: LD_ADDR_EXP 30
13312: PUSH
13313: LD_INT 1
13315: ST_TO_ADDR
// harrAnswer = 1 ;
13316: LD_ADDR_EXP 26
13320: PUSH
13321: LD_INT 1
13323: ST_TO_ADDR
// end ; 2 :
13324: GO 13461
13326: LD_INT 2
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13393
13334: POP
// begin Say ( JMM , D5-JMM-2 ) ;
13335: LD_EXP 2
13339: PPUSH
13340: LD_STRING D5-JMM-2
13342: PPUSH
13343: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
13347: LD_EXP 16
13351: PPUSH
13352: LD_STRING D5-Har-2
13354: PPUSH
13355: CALL_OW 94
// timeToSupport = 5 5$0 ;
13359: LD_ADDR_EXP 28
13363: PUSH
13364: LD_INT 10500
13366: ST_TO_ADDR
// timerStatus = 2 ;
13367: LD_ADDR_EXP 29
13371: PUSH
13372: LD_INT 2
13374: ST_TO_ADDR
// startTimer = 1 ;
13375: LD_ADDR_EXP 30
13379: PUSH
13380: LD_INT 1
13382: ST_TO_ADDR
// harrAnswer = 2 ;
13383: LD_ADDR_EXP 26
13387: PUSH
13388: LD_INT 2
13390: ST_TO_ADDR
// end ; 3 :
13391: GO 13461
13393: LD_INT 3
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13460
13401: POP
// begin Say ( JMM , D5-JMM-3 ) ;
13402: LD_EXP 2
13406: PPUSH
13407: LD_STRING D5-JMM-3
13409: PPUSH
13410: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
13414: LD_EXP 16
13418: PPUSH
13419: LD_STRING D5-Har-3
13421: PPUSH
13422: CALL_OW 94
// timeToSupport = 5 5$0 ;
13426: LD_ADDR_EXP 28
13430: PUSH
13431: LD_INT 10500
13433: ST_TO_ADDR
// timerStatus = 2 ;
13434: LD_ADDR_EXP 29
13438: PUSH
13439: LD_INT 2
13441: ST_TO_ADDR
// startTimer = 1 ;
13442: LD_ADDR_EXP 30
13446: PUSH
13447: LD_INT 1
13449: ST_TO_ADDR
// harrAnswer = 3 ;
13450: LD_ADDR_EXP 26
13454: PUSH
13455: LD_INT 3
13457: ST_TO_ADDR
// end ; end ;
13458: GO 13461
13460: POP
// end ;
13461: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
13462: LD_EXP 29
13466: PUSH
13467: LD_INT 2
13469: EQUAL
13470: PUSH
13471: LD_EXP 28
13475: PUSH
13476: LD_INT 0
13478: EQUAL
13479: AND
13480: IFFALSE 13757
13482: GO 13484
13484: DISABLE
// begin timerStatus = 4 ;
13485: LD_ADDR_EXP 29
13489: PUSH
13490: LD_INT 4
13492: ST_TO_ADDR
// if harrAnswer = 1 then
13493: LD_EXP 26
13497: PUSH
13498: LD_INT 1
13500: EQUAL
13501: IFFALSE 13581
// begin PrepareHarrisonSupport ( 3 ) ;
13503: LD_INT 3
13505: PPUSH
13506: CALL 1120 0 1
// wait ( 1 1$0 ) ;
13510: LD_INT 2100
13512: PPUSH
13513: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13517: LD_EXP 16
13521: PPUSH
13522: LD_STRING D7-Har-1
13524: PPUSH
13525: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
13529: LD_STRING M2
13531: PPUSH
13532: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
13536: LD_ADDR_EXP 27
13540: PUSH
13541: LD_INT 31500
13543: PUSH
13544: LD_INT 10500
13546: PUSH
13547: LD_INT 8400
13549: PUSH
13550: LD_INT 6300
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: LD_OWVAR 67
13562: ARRAY
13563: PLUS
13564: ST_TO_ADDR
// startTimer = 1 ;
13565: LD_ADDR_EXP 30
13569: PUSH
13570: LD_INT 1
13572: ST_TO_ADDR
// timerStatus = 3 ;
13573: LD_ADDR_EXP 29
13577: PUSH
13578: LD_INT 3
13580: ST_TO_ADDR
// end ; if harrAnswer = 2 then
13581: LD_EXP 26
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: IFFALSE 13669
// begin PrepareHarrisonSupport ( 4 ) ;
13591: LD_INT 4
13593: PPUSH
13594: CALL 1120 0 1
// wait ( 1 1$0 ) ;
13598: LD_INT 2100
13600: PPUSH
13601: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13605: LD_EXP 16
13609: PPUSH
13610: LD_STRING D7-Har-1
13612: PPUSH
13613: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
13617: LD_STRING M2
13619: PPUSH
13620: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
13624: LD_ADDR_EXP 27
13628: PUSH
13629: LD_INT 27300
13631: PUSH
13632: LD_INT 8400
13634: PUSH
13635: LD_INT 8400
13637: PUSH
13638: LD_INT 6300
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: LD_OWVAR 67
13650: ARRAY
13651: PLUS
13652: ST_TO_ADDR
// startTimer = 1 ;
13653: LD_ADDR_EXP 30
13657: PUSH
13658: LD_INT 1
13660: ST_TO_ADDR
// timerStatus = 3 ;
13661: LD_ADDR_EXP 29
13665: PUSH
13666: LD_INT 3
13668: ST_TO_ADDR
// end ; if harrAnswer = 3 then
13669: LD_EXP 26
13673: PUSH
13674: LD_INT 3
13676: EQUAL
13677: IFFALSE 13757
// begin PrepareHarrisonSupport ( 5 ) ;
13679: LD_INT 5
13681: PPUSH
13682: CALL 1120 0 1
// wait ( 1 1$0 ) ;
13686: LD_INT 2100
13688: PPUSH
13689: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13693: LD_EXP 16
13697: PPUSH
13698: LD_STRING D7-Har-1
13700: PPUSH
13701: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
13705: LD_STRING M2
13707: PPUSH
13708: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
13712: LD_ADDR_EXP 27
13716: PUSH
13717: LD_INT 21000
13719: PUSH
13720: LD_INT 8400
13722: PUSH
13723: LD_INT 6300
13725: PUSH
13726: LD_INT 4200
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_OWVAR 67
13738: ARRAY
13739: PLUS
13740: ST_TO_ADDR
// startTimer = 1 ;
13741: LD_ADDR_EXP 30
13745: PUSH
13746: LD_INT 1
13748: ST_TO_ADDR
// timerStatus = 3 ;
13749: LD_ADDR_EXP 29
13753: PUSH
13754: LD_INT 3
13756: ST_TO_ADDR
// end ; end ;
13757: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
13758: LD_EXP 27
13762: PUSH
13763: LD_INT 8400
13765: LESSEQUAL
13766: PUSH
13767: LD_EXP 29
13771: PUSH
13772: LD_INT 3
13774: EQUAL
13775: AND
13776: IFFALSE 13808
13778: GO 13780
13780: DISABLE
// begin DialogueOn ;
13781: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
13785: LD_EXP 16
13789: PPUSH
13790: LD_STRING D7a-Har-1
13792: PPUSH
13793: CALL_OW 94
// DialogueOff ;
13797: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
13801: LD_STRING M2a
13803: PPUSH
13804: CALL_OW 337
// end ;
13808: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
13809: LD_EXP 27
13813: PUSH
13814: LD_INT 0
13816: LESSEQUAL
13817: PUSH
13818: LD_EXP 29
13822: PUSH
13823: LD_INT 3
13825: EQUAL
13826: AND
13827: IFFALSE 13952
13829: GO 13831
13831: DISABLE
13832: LD_INT 0
13834: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
13835: LD_ADDR_VAR 0 1
13839: PUSH
13840: LD_INT 22
13842: PUSH
13843: LD_INT 1
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PPUSH
13850: CALL_OW 69
13854: PUSH
13855: LD_EXP 2
13859: PUSH
13860: EMPTY
13861: LIST
13862: DIFF
13863: ST_TO_ADDR
// saveDonaldson = 2 ;
13864: LD_ADDR_EXP 24
13868: PUSH
13869: LD_INT 2
13871: ST_TO_ADDR
// DialogueOn ;
13872: CALL_OW 6
// if IsOK ( Donaldson ) then
13876: LD_EXP 13
13880: PPUSH
13881: CALL_OW 302
13885: IFFALSE 13901
// begin SayRadio ( Harisson , D8-Har-1 ) ;
13887: LD_EXP 16
13891: PPUSH
13892: LD_STRING D8-Har-1
13894: PPUSH
13895: CALL_OW 94
// end else
13899: GO 13913
// begin SayRadio ( Harisson , D8-Har-1a ) ;
13901: LD_EXP 16
13905: PPUSH
13906: LD_STRING D8-Har-1a
13908: PPUSH
13909: CALL_OW 94
// end ; DialogueOff ;
13913: CALL_OW 7
// SetSide ( tmp , 4 ) ;
13917: LD_VAR 0 1
13921: PPUSH
13922: LD_INT 4
13924: PPUSH
13925: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
13929: LD_VAR 0 1
13933: PPUSH
13934: LD_INT 88
13936: PPUSH
13937: LD_INT 89
13939: PPUSH
13940: CALL_OW 114
// honor = 0 ;
13944: LD_ADDR_EXP 39
13948: PUSH
13949: LD_INT 0
13951: ST_TO_ADDR
// end ; end_of_file
13952: PPOPN 1
13954: END
// every 0 0$1 trigger AIEnable = 1 do
13955: LD_EXP 37
13959: PUSH
13960: LD_INT 1
13962: EQUAL
13963: IFFALSE 14035
13965: GO 13967
13967: DISABLE
// begin enable ;
13968: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
13969: LD_INT 3
13971: PPUSH
13972: LD_INT 21
13974: PPUSH
13975: CALL 4702 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
13979: LD_INT 3
13981: PPUSH
13982: LD_INT 8
13984: PPUSH
13985: LD_INT 7
13987: PPUSH
13988: LD_INT 1
13990: PPUSH
13991: CALL 4943 0 4
// if baseReadyToBuild = 2 then
13995: LD_EXP 20
13999: PUSH
14000: LD_INT 2
14002: EQUAL
14003: IFFALSE 14035
// begin RepairBuilding ( 6 , ruPDepot ) ;
14005: LD_INT 6
14007: PPUSH
14008: LD_EXP 21
14012: PPUSH
14013: CALL 4702 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
14017: LD_INT 6
14019: PPUSH
14020: LD_INT 9
14022: PPUSH
14023: LD_INT 6
14025: PPUSH
14026: LD_EXP 22
14030: PPUSH
14031: CALL 4943 0 4
// end ; end ;
14035: END
// every 0 0$01 do
14036: GO 14038
14038: DISABLE
// begin enable ;
14039: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
14040: LD_INT 3
14042: PPUSH
14043: LD_INT 17
14045: PPUSH
14046: LD_INT 111
14048: PPUSH
14049: LD_INT 87
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: CALL 7811 0 5
// end ;
14059: END
// every 0 0$01 do
14060: GO 14062
14062: DISABLE
// begin enable ;
14063: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
14064: LD_INT 5
14066: PPUSH
14067: LD_INT 17
14069: PPUSH
14070: LD_INT 111
14072: PPUSH
14073: LD_INT 87
14075: PPUSH
14076: LD_INT 1
14078: PPUSH
14079: CALL 7811 0 5
// end ;
14083: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
14084: LD_EXP 37
14088: PUSH
14089: LD_INT 1
14091: EQUAL
14092: IFFALSE 14266
14094: GO 14096
14096: DISABLE
// begin enable ;
14097: ENABLE
// if Difficulty = 1 then
14098: LD_OWVAR 67
14102: PUSH
14103: LD_INT 1
14105: EQUAL
14106: IFFALSE 14153
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
14108: LD_INT 3
14110: PPUSH
14111: LD_INT 24
14113: PPUSH
14114: LD_OWVAR 67
14118: PUSH
14119: LD_INT 1
14121: PLUS
14122: PPUSH
14123: LD_INT 1
14125: PPUSH
14126: LD_INT 42
14128: PUSH
14129: LD_INT 42
14131: PUSH
14132: LD_INT 43
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: LD_INT 1
14145: PPUSH
14146: LD_INT 21
14148: PPUSH
14149: CALL 5209 0 8
// if Difficulty = 2 then
14153: LD_OWVAR 67
14157: PUSH
14158: LD_INT 2
14160: EQUAL
14161: IFFALSE 14211
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] ) ;
14163: LD_INT 3
14165: PPUSH
14166: LD_INT 24
14168: PPUSH
14169: LD_OWVAR 67
14173: PUSH
14174: LD_INT 1
14176: PLUS
14177: PPUSH
14178: LD_INT 1
14180: PPUSH
14181: LD_INT 42
14183: PUSH
14184: LD_INT 43
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: LD_INT 21
14199: PUSH
14200: LD_INT 22
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PPUSH
14207: CALL 5209 0 8
// if Difficulty = 3 then
14211: LD_OWVAR 67
14215: PUSH
14216: LD_INT 3
14218: EQUAL
14219: IFFALSE 14266
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
14221: LD_INT 3
14223: PPUSH
14224: LD_INT 24
14226: PPUSH
14227: LD_OWVAR 67
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: LD_INT 43
14237: PUSH
14238: LD_INT 43
14240: PUSH
14241: LD_INT 43
14243: PUSH
14244: LD_INT 44
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: LD_INT 22
14261: PPUSH
14262: CALL 5209 0 8
// end ;
14266: END
// every 0 0$1 do
14267: GO 14269
14269: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
14270: LD_INT 3
14272: PPUSH
14273: LD_INT 1
14275: PPUSH
14276: LD_INT 3
14278: PPUSH
14279: CALL 4617 0 3
14283: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
14284: LD_EXP 20
14288: PUSH
14289: LD_INT 1
14291: EQUAL
14292: IFFALSE 14439
14294: GO 14296
14296: DISABLE
14297: LD_INT 0
14299: PPUSH
14300: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14301: LD_ADDR_VAR 0 2
14305: PUSH
14306: LD_INT 22
14308: PUSH
14309: LD_INT 6
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 2
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 34
14328: PUSH
14329: LD_INT 51
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
14346: LD_VAR 0 2
14350: PUSH
14351: LD_INT 1
14353: ARRAY
14354: PPUSH
14355: LD_EXP 21
14359: PPUSH
14360: CALL_OW 250
14364: PUSH
14365: LD_INT 5
14367: MINUS
14368: PPUSH
14369: LD_EXP 21
14373: PPUSH
14374: CALL_OW 251
14378: PUSH
14379: LD_INT 5
14381: MINUS
14382: PPUSH
14383: CALL_OW 111
// wait ( 0 0$5 ) ;
14387: LD_INT 175
14389: PPUSH
14390: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
14394: LD_VAR 0 2
14398: PUSH
14399: LD_INT 1
14401: ARRAY
14402: PPUSH
14403: LD_INT 41
14405: PPUSH
14406: LD_INT 52
14408: PPUSH
14409: CALL_OW 177
// wait ( 0 0$40 ) ;
14413: LD_INT 1400
14415: PPUSH
14416: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
14420: LD_VAR 0 2
14424: PUSH
14425: LD_INT 1
14427: ARRAY
14428: PPUSH
14429: LD_INT 41
14431: PPUSH
14432: LD_INT 44
14434: PPUSH
14435: CALL_OW 111
// end ;
14439: PPOPN 2
14441: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
14442: LD_EXP 21
14446: PPUSH
14447: CALL_OW 274
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 275
14459: PUSH
14460: LD_INT 100
14462: GREATEREQUAL
14463: IFFALSE 14691
14465: GO 14467
14467: DISABLE
14468: LD_INT 0
14470: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14471: LD_ADDR_VAR 0 1
14475: PUSH
14476: LD_INT 22
14478: PUSH
14479: LD_INT 6
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 21
14488: PUSH
14489: LD_INT 1
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 25
14498: PUSH
14499: LD_INT 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 69
14515: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
14516: LD_VAR 0 1
14520: PUSH
14521: LD_INT 1
14523: ARRAY
14524: PPUSH
14525: LD_INT 4
14527: PPUSH
14528: LD_INT 39
14530: PPUSH
14531: LD_INT 37
14533: PPUSH
14534: LD_INT 3
14536: PPUSH
14537: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
14541: LD_VAR 0 1
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PPUSH
14550: LD_INT 29
14552: PPUSH
14553: LD_INT 42
14555: PPUSH
14556: LD_INT 54
14558: PPUSH
14559: LD_INT 3
14561: PPUSH
14562: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
14566: LD_VAR 0 1
14570: PUSH
14571: LD_INT 1
14573: ARRAY
14574: PPUSH
14575: LD_INT 6
14577: PPUSH
14578: LD_INT 38
14580: PPUSH
14581: LD_INT 48
14583: PPUSH
14584: LD_INT 0
14586: PPUSH
14587: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
14591: LD_VAR 0 1
14595: PUSH
14596: LD_INT 1
14598: ARRAY
14599: PPUSH
14600: LD_INT 2
14602: PPUSH
14603: LD_INT 32
14605: PPUSH
14606: LD_INT 38
14608: PPUSH
14609: LD_INT 2
14611: PPUSH
14612: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
14616: LD_VAR 0 1
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PPUSH
14625: LD_INT 26
14627: PPUSH
14628: LD_INT 39
14630: PPUSH
14631: LD_INT 55
14633: PPUSH
14634: LD_INT 3
14636: PPUSH
14637: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
14641: LD_VAR 0 1
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: PPUSH
14650: LD_INT 32
14652: PPUSH
14653: LD_INT 31
14655: PPUSH
14656: LD_INT 31
14658: PPUSH
14659: LD_INT 3
14661: PPUSH
14662: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
14666: LD_VAR 0 1
14670: PUSH
14671: LD_INT 1
14673: ARRAY
14674: PPUSH
14675: LD_INT 31
14677: PPUSH
14678: LD_INT 50
14680: PPUSH
14681: LD_INT 51
14683: PPUSH
14684: LD_INT 4
14686: PPUSH
14687: CALL_OW 205
// end ; end_of_file
14691: PPOPN 1
14693: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14694: LD_INT 0
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
14700: PPUSH
14701: PPUSH
14702: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14703: LD_ADDR_VAR 0 3
14707: PUSH
14708: LD_INT 22
14710: PUSH
14711: LD_INT 6
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 21
14720: PUSH
14721: LD_INT 1
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 25
14730: PUSH
14731: LD_INT 1
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 3
14740: PUSH
14741: LD_INT 54
14743: PUSH
14744: EMPTY
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14762: LD_ADDR_VAR 0 7
14766: PUSH
14767: LD_INT 22
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 21
14779: PUSH
14780: LD_INT 1
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 25
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 54
14799: PUSH
14800: EMPTY
14801: LIST
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: PPUSH
14809: CALL_OW 69
14813: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14814: LD_ADDR_VAR 0 4
14818: PUSH
14819: LD_INT 22
14821: PUSH
14822: LD_INT 6
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 21
14831: PUSH
14832: LD_INT 1
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 25
14841: PUSH
14842: LD_INT 2
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14859: LD_ADDR_VAR 0 6
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_INT 6
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 1
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 25
14886: PUSH
14887: LD_INT 4
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14904: LD_ADDR_VAR 0 8
14908: PUSH
14909: LD_INT 22
14911: PUSH
14912: LD_INT 6
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 21
14921: PUSH
14922: LD_INT 2
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 34
14931: PUSH
14932: LD_INT 51
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: PPUSH
14944: CALL_OW 69
14948: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 255
14958: PUSH
14959: LD_INT 6
14961: EQUAL
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 266
14972: PUSH
14973: LD_INT 0
14975: EQUAL
14976: AND
14977: IFFALSE 14997
// begin ruPDepot = building ;
14979: LD_ADDR_EXP 21
14983: PUSH
14984: LD_VAR 0 1
14988: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14989: LD_ADDR_EXP 20
14993: PUSH
14994: LD_INT 1
14996: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL_OW 266
15006: PUSH
15007: LD_INT 4
15009: EQUAL
15010: PUSH
15011: LD_VAR 0 1
15015: PPUSH
15016: CALL_OW 255
15020: PUSH
15021: LD_INT 6
15023: EQUAL
15024: AND
15025: IFFALSE 15058
// for i in tmpSold do
15027: LD_ADDR_VAR 0 2
15031: PUSH
15032: LD_VAR 0 3
15036: PUSH
15037: FOR_IN
15038: IFFALSE 15056
// ComEnterUnit ( i , building ) ;
15040: LD_VAR 0 2
15044: PPUSH
15045: LD_VAR 0 1
15049: PPUSH
15050: CALL_OW 120
15054: GO 15037
15056: POP
15057: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL_OW 266
15067: PUSH
15068: LD_INT 6
15070: EQUAL
15071: PUSH
15072: LD_VAR 0 1
15076: PPUSH
15077: CALL_OW 255
15081: PUSH
15082: LD_INT 6
15084: EQUAL
15085: AND
15086: IFFALSE 15144
// begin for i in tmpSci do
15088: LD_ADDR_VAR 0 2
15092: PUSH
15093: LD_VAR 0 6
15097: PUSH
15098: FOR_IN
15099: IFFALSE 15117
// ComEnterUnit ( i , building ) ;
15101: LD_VAR 0 2
15105: PPUSH
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 120
15115: GO 15098
15117: POP
15118: POP
// ResAllTechs ( 6 , building , 3 ) ;
15119: LD_INT 6
15121: PPUSH
15122: LD_VAR 0 1
15126: PPUSH
15127: LD_INT 3
15129: PPUSH
15130: CALL 4617 0 3
// ruPLab = building ;
15134: LD_ADDR_EXP 22
15138: PUSH
15139: LD_VAR 0 1
15143: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
15144: LD_VAR 0 1
15148: PPUSH
15149: CALL_OW 266
15153: PUSH
15154: LD_INT 2
15156: EQUAL
15157: PUSH
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 255
15167: PUSH
15168: LD_INT 6
15170: EQUAL
15171: AND
15172: IFFALSE 15223
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
15174: LD_ADDR_VAR 0 5
15178: PUSH
15179: LD_VAR 0 8
15183: PUSH
15184: LD_INT 1
15186: ARRAY
15187: PPUSH
15188: CALL_OW 313
15192: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
15193: LD_VAR 0 5
15197: PPUSH
15198: CALL_OW 121
// wait ( 0 0$1 ) ;
15202: LD_INT 35
15204: PPUSH
15205: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
15209: LD_VAR 0 5
15213: PPUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL_OW 266
15232: PUSH
15233: LD_INT 32
15235: EQUAL
15236: PUSH
15237: LD_VAR 0 1
15241: PPUSH
15242: CALL_OW 255
15246: PUSH
15247: LD_INT 6
15249: EQUAL
15250: AND
15251: IFFALSE 15303
// begin ComPlaceWeapon ( building , 42 ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: LD_INT 42
15260: PPUSH
15261: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
15265: LD_VAR 0 7
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 122
// wait ( 0 0$1 ) ;
15278: LD_INT 35
15280: PPUSH
15281: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
15285: LD_VAR 0 7
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: PPUSH
15294: LD_VAR 0 1
15298: PPUSH
15299: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 266
15312: PUSH
15313: LD_INT 31
15315: EQUAL
15316: PUSH
15317: LD_VAR 0 1
15321: PPUSH
15322: CALL_OW 255
15326: PUSH
15327: LD_INT 6
15329: EQUAL
15330: AND
15331: IFFALSE 15397
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
15333: LD_VAR 0 7
15337: PUSH
15338: LD_INT 2
15340: ARRAY
15341: PPUSH
15342: CALL_OW 122
// wait ( 0 0$1 ) ;
15346: LD_INT 35
15348: PPUSH
15349: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
15353: LD_VAR 0 7
15357: PUSH
15358: LD_INT 2
15360: ARRAY
15361: PPUSH
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
15371: LD_VAR 0 4
15375: PUSH
15376: LD_INT 1
15378: ARRAY
15379: PPUSH
15380: LD_EXP 21
15384: PPUSH
15385: CALL_OW 120
// baseReadyToBuild = 2 ;
15389: LD_ADDR_EXP 20
15393: PUSH
15394: LD_INT 2
15396: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 266
15406: PUSH
15407: LD_INT 32
15409: EQUAL
15410: PUSH
15411: LD_VAR 0 1
15415: PPUSH
15416: CALL_OW 255
15420: PUSH
15421: LD_INT 1
15423: EQUAL
15424: AND
15425: PUSH
15426: LD_EXP 32
15430: PUSH
15431: LD_INT 0
15433: EQUAL
15434: AND
15435: IFFALSE 15728
// begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and bunkerDialog = 0 then
15437: LD_VAR 0 1
15441: PPUSH
15442: CALL_OW 266
15446: PUSH
15447: LD_INT 3
15449: EQUAL
15450: PUSH
15451: LD_VAR 0 1
15455: PPUSH
15456: CALL_OW 255
15460: PUSH
15461: LD_INT 1
15463: EQUAL
15464: AND
15465: PUSH
15466: LD_EXP 32
15470: PUSH
15471: LD_INT 0
15473: EQUAL
15474: AND
15475: IFFALSE 15706
// begin bunkerDialog = 1 ;
15477: LD_ADDR_EXP 32
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15485: LD_EXP 11
15489: PPUSH
15490: CALL_OW 302
15494: IFFALSE 15510
// begin Say ( Claptopn , D11-Eng1-1 ) ;
15496: LD_EXP 11
15500: PPUSH
15501: LD_STRING D11-Eng1-1
15503: PPUSH
15504: CALL_OW 88
// end else
15508: GO 15706
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15510: LD_INT 22
15512: PUSH
15513: LD_INT 1
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 21
15522: PUSH
15523: LD_INT 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 25
15532: PUSH
15533: LD_INT 3
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: LD_INT 26
15542: PUSH
15543: LD_INT 1
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: PPUSH
15556: CALL_OW 69
15560: PUSH
15561: LD_EXP 2
15565: PUSH
15566: EMPTY
15567: LIST
15568: PUSH
15569: LD_INT 0
15571: GREATER
15572: DIFF
15573: IFFALSE 15647
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15575: LD_INT 22
15577: PUSH
15578: LD_INT 1
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: LD_INT 21
15587: PUSH
15588: LD_INT 1
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 25
15597: PUSH
15598: LD_INT 2
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 26
15607: PUSH
15608: LD_INT 1
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 69
15625: PUSH
15626: LD_EXP 2
15630: PUSH
15631: EMPTY
15632: LIST
15633: DIFF
15634: PPUSH
15635: LD_STRING D11-Eng1-1
15637: PPUSH
15638: LD_STRING D11-Eng1-1
15640: PPUSH
15641: CALL 3357 0 3
// end else
15645: GO 15706
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15647: LD_INT 22
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 21
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 26
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: PPUSH
15682: CALL_OW 69
15686: PUSH
15687: LD_EXP 2
15691: PUSH
15692: EMPTY
15693: LIST
15694: DIFF
15695: PPUSH
15696: LD_STRING D11-Eng1-1
15698: PPUSH
15699: LD_STRING D11-Eng1-1
15701: PPUSH
15702: CALL 3357 0 3
// end ; end ; end ; if energyVDialog = 0 then
15706: LD_EXP 33
15710: PUSH
15711: LD_INT 0
15713: EQUAL
15714: IFFALSE 15720
// EnergyDialog ;
15716: CALL 3669 0 0
// bunkerDialog = 1 ;
15720: LD_ADDR_EXP 32
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15728: LD_VAR 0 1
15732: PPUSH
15733: CALL_OW 266
15737: PUSH
15738: LD_INT 29
15740: EQUAL
15741: PUSH
15742: LD_VAR 0 1
15746: PPUSH
15747: CALL_OW 255
15751: PUSH
15752: LD_INT 1
15754: EQUAL
15755: AND
15756: IFFALSE 15766
// buildOil = 1 ;
15758: LD_ADDR_EXP 34
15762: PUSH
15763: LD_INT 1
15765: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15766: LD_VAR 0 1
15770: PPUSH
15771: CALL_OW 266
15775: PUSH
15776: LD_INT 26
15778: EQUAL
15779: PUSH
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 255
15789: PUSH
15790: LD_INT 1
15792: EQUAL
15793: AND
15794: IFFALSE 15804
// buildPower = 1 ;
15796: LD_ADDR_EXP 35
15800: PUSH
15801: LD_INT 1
15803: ST_TO_ADDR
// end ;
15804: PPOPN 8
15806: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15807: LD_VAR 0 1
15811: PPUSH
15812: CALL_OW 266
15816: PUSH
15817: LD_INT 3
15819: EQUAL
15820: PUSH
15821: LD_VAR 0 1
15825: PPUSH
15826: CALL_OW 255
15830: PUSH
15831: LD_INT 1
15833: EQUAL
15834: AND
15835: PUSH
15836: LD_EXP 31
15840: PUSH
15841: LD_INT 0
15843: EQUAL
15844: AND
15845: IFFALSE 16161
// begin factoryDialog = 1 ;
15847: LD_ADDR_EXP 31
15851: PUSH
15852: LD_INT 1
15854: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15855: LD_INT 22
15857: PUSH
15858: LD_INT 1
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 30
15877: PUSH
15878: LD_INT 3
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: LD_INT 24
15887: PUSH
15888: LD_INT 1000
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: PPUSH
15901: CALL_OW 69
15905: PUSH
15906: LD_INT 1
15908: ARRAY
15909: PPUSH
15910: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15914: LD_EXP 2
15918: PPUSH
15919: LD_STRING D9a-JMM-1
15921: PPUSH
15922: CALL_OW 88
// if IsOK ( Campell ) then
15926: LD_EXP 12
15930: PPUSH
15931: CALL_OW 302
15935: IFFALSE 15951
// begin Say ( Campell , D9a-Mech1-1 ) ;
15937: LD_EXP 12
15941: PPUSH
15942: LD_STRING D9a-Mech1-1
15944: PPUSH
15945: CALL_OW 88
// end else
15949: GO 16147
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15951: LD_INT 22
15953: PUSH
15954: LD_INT 1
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 21
15963: PUSH
15964: LD_INT 1
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 25
15973: PUSH
15974: LD_INT 3
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 26
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: PUSH
16002: LD_EXP 2
16006: PUSH
16007: EMPTY
16008: LIST
16009: PUSH
16010: LD_INT 0
16012: GREATER
16013: DIFF
16014: IFFALSE 16088
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16016: LD_INT 22
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 21
16028: PUSH
16029: LD_INT 1
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 25
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 26
16048: PUSH
16049: LD_INT 1
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: PUSH
16067: LD_EXP 2
16071: PUSH
16072: EMPTY
16073: LIST
16074: DIFF
16075: PPUSH
16076: LD_STRING D9a-Mech1-1
16078: PPUSH
16079: LD_STRING D9a-Mech1-1
16081: PPUSH
16082: CALL 3357 0 3
// end else
16086: GO 16147
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16088: LD_INT 22
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 21
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 26
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: LIST
16122: PPUSH
16123: CALL_OW 69
16127: PUSH
16128: LD_EXP 2
16132: PUSH
16133: EMPTY
16134: LIST
16135: DIFF
16136: PPUSH
16137: LD_STRING D9a-Mech1-1
16139: PPUSH
16140: LD_STRING D9a-Mech1-1
16142: PPUSH
16143: CALL 3357 0 3
// end ; end ; if energyVDialog = 0 then
16147: LD_EXP 33
16151: PUSH
16152: LD_INT 0
16154: EQUAL
16155: IFFALSE 16161
// EnergyDialog ;
16157: CALL 3669 0 0
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16161: LD_VAR 0 1
16165: PPUSH
16166: CALL_OW 266
16170: PUSH
16171: LD_INT 32
16173: EQUAL
16174: PUSH
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL_OW 255
16184: PUSH
16185: LD_INT 1
16187: EQUAL
16188: AND
16189: PUSH
16190: LD_EXP 32
16194: PUSH
16195: LD_INT 0
16197: EQUAL
16198: AND
16199: IFFALSE 16492
// begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and bunkerDialog = 0 then
16201: LD_VAR 0 1
16205: PPUSH
16206: CALL_OW 266
16210: PUSH
16211: LD_INT 3
16213: EQUAL
16214: PUSH
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 255
16224: PUSH
16225: LD_INT 1
16227: EQUAL
16228: AND
16229: PUSH
16230: LD_EXP 32
16234: PUSH
16235: LD_INT 0
16237: EQUAL
16238: AND
16239: IFFALSE 16470
// begin bunkerDialog = 1 ;
16241: LD_ADDR_EXP 32
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16249: LD_EXP 11
16253: PPUSH
16254: CALL_OW 302
16258: IFFALSE 16274
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16260: LD_EXP 11
16264: PPUSH
16265: LD_STRING D11-Eng1-1
16267: PPUSH
16268: CALL_OW 88
// end else
16272: GO 16470
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16274: LD_INT 22
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 21
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 25
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 26
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: PPUSH
16320: CALL_OW 69
16324: PUSH
16325: LD_EXP 2
16329: PUSH
16330: EMPTY
16331: LIST
16332: PUSH
16333: LD_INT 0
16335: GREATER
16336: DIFF
16337: IFFALSE 16411
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16339: LD_INT 22
16341: PUSH
16342: LD_INT 1
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 21
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 25
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 26
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: PPUSH
16385: CALL_OW 69
16389: PUSH
16390: LD_EXP 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: DIFF
16398: PPUSH
16399: LD_STRING D11-Eng1-1
16401: PPUSH
16402: LD_STRING D11-Eng1-1
16404: PPUSH
16405: CALL 3357 0 3
// end else
16409: GO 16470
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16411: LD_INT 22
16413: PUSH
16414: LD_INT 1
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 21
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 26
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: LIST
16445: PPUSH
16446: CALL_OW 69
16450: PUSH
16451: LD_EXP 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: DIFF
16459: PPUSH
16460: LD_STRING D11-Eng1-1
16462: PPUSH
16463: LD_STRING D11-Eng1-1
16465: PPUSH
16466: CALL 3357 0 3
// end ; end ; end ; if energyVDialog = 0 then
16470: LD_EXP 33
16474: PUSH
16475: LD_INT 0
16477: EQUAL
16478: IFFALSE 16484
// EnergyDialog ;
16480: CALL 3669 0 0
// bunkerDialog = 1 ;
16484: LD_ADDR_EXP 32
16488: PUSH
16489: LD_INT 1
16491: ST_TO_ADDR
// end ; end ;
16492: PPOPN 1
16494: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 247
16504: PUSH
16505: LD_INT 1
16507: EQUAL
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 255
16518: PUSH
16519: LD_INT 1
16521: EQUAL
16522: AND
16523: IFFALSE 16539
// lostCounter = lostCounter + 1 ;
16525: LD_ADDR_EXP 38
16529: PUSH
16530: LD_EXP 38
16534: PUSH
16535: LD_INT 1
16537: PLUS
16538: ST_TO_ADDR
// end ;
16539: PPOPN 1
16541: END
// on Contact ( side1 , side2 ) do var i ;
16542: LD_INT 0
16544: PPUSH
// begin if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
16545: LD_VAR 0 1
16549: PUSH
16550: LD_INT 1
16552: EQUAL
16553: PUSH
16554: LD_VAR 0 2
16558: PUSH
16559: LD_INT 6
16561: EQUAL
16562: AND
16563: PUSH
16564: LD_EXP 41
16568: PUSH
16569: LD_INT 1
16571: EQUAL
16572: AND
16573: IFFALSE 16628
// begin donaldsonCoopAttack = 0 ;
16575: LD_ADDR_EXP 41
16579: PUSH
16580: LD_INT 0
16582: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_INT 22
16590: PUSH
16591: LD_INT 4
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: PPUSH
16601: CALL_OW 69
16605: PUSH
16606: FOR_IN
16607: IFFALSE 16626
// ComAgressiveMove ( i , 52 , 64 ) ;
16609: LD_VAR 0 3
16613: PPUSH
16614: LD_INT 52
16616: PPUSH
16617: LD_INT 64
16619: PPUSH
16620: CALL_OW 114
16624: GO 16606
16626: POP
16627: POP
// end ; end ;
16628: PPOPN 3
16630: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL_OW 264
16640: PUSH
16641: LD_INT 53
16643: EQUAL
16644: IFFALSE 16729
// begin CutTreeInArea ( vehicle , TreesArea ) ;
16646: LD_VAR 0 1
16650: PPUSH
16651: LD_INT 21
16653: PPUSH
16654: CALL 3885 0 2
// uc_side = 3 ;
16658: LD_ADDR_OWVAR 20
16662: PUSH
16663: LD_INT 3
16665: ST_TO_ADDR
// uc_nation = 3 ;
16666: LD_ADDR_OWVAR 21
16670: PUSH
16671: LD_INT 3
16673: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16674: LD_INT 0
16676: PPUSH
16677: LD_EXP 19
16681: PPUSH
16682: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
16686: CALL_OW 44
16690: PPUSH
16691: LD_VAR 0 2
16695: PPUSH
16696: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_INT 6
16707: PPUSH
16708: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL_OW 313
16721: PPUSH
16722: LD_INT 6
16724: PPUSH
16725: CALL_OW 235
// end ; end ; end_of_file
16729: PPOPN 2
16731: END
// every 10 10$0 do
16732: GO 16734
16734: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16735: LD_INT 5
16737: PPUSH
16738: LD_INT 3
16740: PPUSH
16741: LD_INT 2
16743: PPUSH
16744: LD_INT 5
16746: PPUSH
16747: CALL_OW 12
16751: PUSH
16752: LD_INT 2
16754: PUSH
16755: LD_INT 3
16757: PUSH
16758: LD_INT 3
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: LD_OWVAR 67
16770: ARRAY
16771: PLUS
16772: PPUSH
16773: LD_INT 0
16775: PPUSH
16776: LD_INT 0
16778: PPUSH
16779: LD_INT 0
16781: PPUSH
16782: LD_INT 1
16784: PUSH
16785: LD_INT 2
16787: PUSH
16788: LD_INT 3
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: LIST
16795: PUSH
16796: LD_OWVAR 67
16800: ARRAY
16801: PPUSH
16802: LD_EXP 18
16806: PPUSH
16807: LD_EXP 19
16811: PPUSH
16812: CALL_OW 12
16816: PPUSH
16817: LD_INT 4
16819: PPUSH
16820: LD_INT 14
16822: PPUSH
16823: LD_INT 1
16825: PPUSH
16826: LD_INT 2
16828: PPUSH
16829: CALL 5694 0 12
// end ;
16833: END
// every 15 15$0 do
16834: GO 16836
16836: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16837: LD_INT 5
16839: PPUSH
16840: LD_INT 3
16842: PPUSH
16843: LD_INT 3
16845: PPUSH
16846: LD_INT 5
16848: PPUSH
16849: CALL_OW 12
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: LD_INT 3
16859: PUSH
16860: LD_INT 3
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: LD_OWVAR 67
16872: ARRAY
16873: PLUS
16874: PPUSH
16875: LD_INT 0
16877: PPUSH
16878: LD_INT 0
16880: PPUSH
16881: LD_INT 0
16883: PPUSH
16884: LD_INT 2
16886: PUSH
16887: LD_INT 2
16889: PUSH
16890: LD_INT 3
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: PUSH
16898: LD_OWVAR 67
16902: ARRAY
16903: PPUSH
16904: LD_EXP 18
16908: PPUSH
16909: LD_EXP 19
16913: PPUSH
16914: CALL_OW 12
16918: PPUSH
16919: LD_INT 4
16921: PPUSH
16922: LD_INT 14
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: LD_INT 1
16930: PPUSH
16931: CALL 5694 0 12
// end ;
16935: END
// every 25 25$0 do
16936: GO 16938
16938: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16939: LD_INT 5
16941: PPUSH
16942: LD_INT 3
16944: PPUSH
16945: LD_INT 2
16947: PPUSH
16948: LD_INT 3
16950: PPUSH
16951: CALL_OW 12
16955: PUSH
16956: LD_INT 2
16958: PUSH
16959: LD_INT 3
16961: PUSH
16962: LD_INT 3
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: LIST
16969: PUSH
16970: LD_OWVAR 67
16974: ARRAY
16975: PLUS
16976: PPUSH
16977: LD_INT 0
16979: PPUSH
16980: LD_INT 0
16982: PPUSH
16983: LD_INT 0
16985: PPUSH
16986: LD_INT 1
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 3
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: LIST
16999: PUSH
17000: LD_OWVAR 67
17004: ARRAY
17005: PPUSH
17006: LD_EXP 18
17010: PPUSH
17011: LD_EXP 19
17015: PPUSH
17016: CALL_OW 12
17020: PPUSH
17021: LD_INT 4
17023: PPUSH
17024: LD_INT 14
17026: PPUSH
17027: LD_INT 1
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL 5694 0 12
// end ;
17037: END
// every 26 26$0 do
17038: GO 17040
17040: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17041: LD_INT 5
17043: PPUSH
17044: LD_INT 3
17046: PPUSH
17047: LD_INT 1
17049: PPUSH
17050: LD_INT 3
17052: PPUSH
17053: CALL_OW 12
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 2
17063: PUSH
17064: LD_INT 2
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: PUSH
17072: LD_OWVAR 67
17076: ARRAY
17077: PLUS
17078: PPUSH
17079: LD_INT 0
17081: PPUSH
17082: LD_INT 0
17084: PPUSH
17085: LD_INT 0
17087: PPUSH
17088: LD_INT 2
17090: PUSH
17091: LD_INT 2
17093: PUSH
17094: LD_INT 3
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: LD_OWVAR 67
17106: ARRAY
17107: PPUSH
17108: LD_EXP 18
17112: PPUSH
17113: LD_EXP 19
17117: PPUSH
17118: CALL_OW 12
17122: PPUSH
17123: LD_INT 4
17125: PPUSH
17126: LD_INT 14
17128: PPUSH
17129: LD_INT 1
17131: PPUSH
17132: LD_INT 2
17134: PPUSH
17135: CALL 5694 0 12
// end ;
17139: END
// every 25 25$0 do
17140: GO 17142
17142: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
17143: LD_INT 4
17145: PPUSH
17146: LD_INT 5
17148: PPUSH
17149: LD_INT 3
17151: PUSH
17152: LD_INT 4
17154: PUSH
17155: LD_INT 5
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: PUSH
17163: LD_OWVAR 67
17167: ARRAY
17168: PPUSH
17169: LD_EXP 18
17173: PPUSH
17174: LD_EXP 19
17178: PPUSH
17179: CALL_OW 12
17183: PPUSH
17184: LD_INT 3
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: LD_INT 42
17195: PUSH
17196: LD_INT 42
17198: PUSH
17199: LD_INT 43
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 42
17209: PUSH
17210: LD_INT 43
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 43
17219: PUSH
17220: LD_INT 43
17222: PUSH
17223: LD_INT 43
17225: PUSH
17226: LD_INT 44
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: LD_OWVAR 67
17244: ARRAY
17245: PPUSH
17246: EMPTY
17247: PPUSH
17248: EMPTY
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: CALL 8602 0 11
// end ; end_of_file
17257: END
// every 0 0$1 trigger startTimer = 1 do
17258: LD_EXP 30
17262: PUSH
17263: LD_INT 1
17265: EQUAL
17266: IFFALSE 17396
17268: GO 17270
17270: DISABLE
// begin enable ;
17271: ENABLE
// if timerStatus = 1 then
17272: LD_EXP 29
17276: PUSH
17277: LD_INT 1
17279: EQUAL
17280: IFFALSE 17313
// begin timeToSupport = timeToSupport - 0 0$01 ;
17282: LD_ADDR_EXP 28
17286: PUSH
17287: LD_EXP 28
17291: PUSH
17292: LD_INT 35
17294: MINUS
17295: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17296: LD_ADDR_OWVAR 47
17300: PUSH
17301: LD_STRING #Am04-1
17303: PUSH
17304: LD_EXP 28
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: ST_TO_ADDR
// end ; if timerStatus = 2 then
17313: LD_EXP 29
17317: PUSH
17318: LD_INT 2
17320: EQUAL
17321: IFFALSE 17354
// begin timeToSupport = timeToSupport - 0 0$01 ;
17323: LD_ADDR_EXP 28
17327: PUSH
17328: LD_EXP 28
17332: PUSH
17333: LD_INT 35
17335: MINUS
17336: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17337: LD_ADDR_OWVAR 47
17341: PUSH
17342: LD_STRING #Am04-2
17344: PUSH
17345: LD_EXP 28
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: ST_TO_ADDR
// end ; if timerStatus = 3 then
17354: LD_EXP 29
17358: PUSH
17359: LD_INT 3
17361: EQUAL
17362: IFFALSE 17378
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17364: LD_ADDR_EXP 27
17368: PUSH
17369: LD_EXP 27
17373: PUSH
17374: LD_INT 35
17376: MINUS
17377: ST_TO_ADDR
// end ; if timerStatus = 4 then
17378: LD_EXP 29
17382: PUSH
17383: LD_INT 4
17385: EQUAL
17386: IFFALSE 17396
// begin display_strings =  ;
17388: LD_ADDR_OWVAR 47
17392: PUSH
17393: LD_STRING 
17395: ST_TO_ADDR
// end ; end ; end_of_file
17396: END
// every 0 0$1 trigger IsDead ( JMM ) do
17397: LD_EXP 2
17401: PPUSH
17402: CALL_OW 301
17406: IFFALSE 17418
17408: GO 17410
17410: DISABLE
// YouLost ( JMM ) ;
17411: LD_STRING JMM
17413: PPUSH
17414: CALL_OW 104
17418: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
17419: LD_INT 4
17421: PPUSH
17422: CALL_OW 301
17426: IFFALSE 17438
17428: GO 17430
17430: DISABLE
// YouLost ( Base ) ; end_of_file
17431: LD_STRING Base
17433: PPUSH
17434: CALL_OW 104
17438: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
17439: LD_EXP 17
17443: PPUSH
17444: CALL_OW 301
17448: IFFALSE 17830
17450: GO 17452
17452: DISABLE
17453: LD_INT 0
17455: PPUSH
// begin AIEnable = 0 ;
17456: LD_ADDR_EXP 37
17460: PUSH
17461: LD_INT 0
17463: ST_TO_ADDR
// escapeAvalaible = 1 ;
17464: LD_ADDR_EXP 40
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// InGameOn ;
17472: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17476: LD_INT 3
17478: PPUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_INT 1
17484: PPUSH
17485: LD_INT 0
17487: PPUSH
17488: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17492: LD_INT 6
17494: PPUSH
17495: LD_INT 1
17497: PPUSH
17498: LD_INT 1
17500: PPUSH
17501: LD_INT 0
17503: PPUSH
17504: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17508: LD_INT 5
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: LD_INT 1
17516: PPUSH
17517: LD_INT 0
17519: PPUSH
17520: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17524: LD_INT 3
17526: PPUSH
17527: LD_INT 1
17529: PPUSH
17530: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17534: LD_INT 97
17536: PPUSH
17537: LD_INT 91
17539: PPUSH
17540: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17544: LD_INT 22
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 21
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 69
17572: PPUSH
17573: CALL_OW 121
// wait ( 0 0$01 ) ;
17577: LD_INT 35
17579: PPUSH
17580: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17584: LD_INT 22
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 21
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PPUSH
17608: CALL_OW 69
17612: PPUSH
17613: LD_INT 124
17615: PPUSH
17616: LD_INT 98
17618: PPUSH
17619: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
17623: LD_INT 22
17625: PUSH
17626: LD_INT 5
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 21
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PPUSH
17647: CALL_OW 69
17651: PPUSH
17652: CALL_OW 121
// wait ( 0 0$01 ) ;
17656: LD_INT 35
17658: PPUSH
17659: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17663: LD_INT 22
17665: PUSH
17666: LD_INT 5
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 21
17675: PUSH
17676: LD_INT 1
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PPUSH
17687: CALL_OW 69
17691: PPUSH
17692: LD_INT 124
17694: PPUSH
17695: LD_INT 98
17697: PPUSH
17698: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
17702: LD_INT 22
17704: PUSH
17705: LD_INT 6
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 21
17714: PUSH
17715: LD_INT 1
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 69
17730: PPUSH
17731: CALL_OW 121
// wait ( 0 0$01 ) ;
17735: LD_INT 35
17737: PPUSH
17738: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17742: LD_INT 22
17744: PUSH
17745: LD_INT 6
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 1
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PPUSH
17766: CALL_OW 69
17770: PPUSH
17771: LD_INT 124
17773: PPUSH
17774: LD_INT 98
17776: PPUSH
17777: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17781: LD_INT 22
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 21
17793: PUSH
17794: LD_INT 1
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PPUSH
17805: CALL_OW 69
17809: PPUSH
17810: LD_INT 124
17812: PPUSH
17813: LD_INT 98
17815: PPUSH
17816: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
17820: LD_INT 124
17822: PPUSH
17823: LD_INT 98
17825: PPUSH
17826: CALL_OW 84
// end ;
17830: PPOPN 1
17832: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
17833: LD_INT 23
17835: PUSH
17836: LD_INT 3
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 24
17855: PUSH
17856: LD_INT 250
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: PPUSH
17868: CALL_OW 69
17872: PUSH
17873: LD_INT 0
17875: EQUAL
17876: IFFALSE 17885
17878: GO 17880
17880: DISABLE
// FinishMission ;
17881: CALL 18056 0 0
17885: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
17886: LD_EXP 40
17890: PUSH
17891: LD_INT 1
17893: EQUAL
17894: IFFALSE 18053
17896: GO 17898
17898: DISABLE
17899: LD_INT 0
17901: PPUSH
// begin enable ;
17902: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
17903: LD_ADDR_VAR 0 1
17907: PUSH
17908: LD_INT 22
17910: PUSH
17911: LD_INT 3
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PPUSH
17918: CALL_OW 69
17922: PUSH
17923: FOR_IN
17924: IFFALSE 17951
// if IsInArea ( i , RussianEscape ) then
17926: LD_VAR 0 1
17930: PPUSH
17931: LD_INT 5
17933: PPUSH
17934: CALL_OW 308
17938: IFFALSE 17949
// RemoveUnit ( i ) ;
17940: LD_VAR 0 1
17944: PPUSH
17945: CALL_OW 64
17949: GO 17923
17951: POP
17952: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
17953: LD_ADDR_VAR 0 1
17957: PUSH
17958: LD_INT 22
17960: PUSH
17961: LD_INT 5
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PPUSH
17968: CALL_OW 69
17972: PUSH
17973: FOR_IN
17974: IFFALSE 18001
// if IsInArea ( i , RussianEscape ) then
17976: LD_VAR 0 1
17980: PPUSH
17981: LD_INT 5
17983: PPUSH
17984: CALL_OW 308
17988: IFFALSE 17999
// RemoveUnit ( i ) ;
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 64
17999: GO 17973
18001: POP
18002: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_INT 6
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: PUSH
18023: FOR_IN
18024: IFFALSE 18051
// if IsInArea ( i , RussianEscape ) then
18026: LD_VAR 0 1
18030: PPUSH
18031: LD_INT 5
18033: PPUSH
18034: CALL_OW 308
18038: IFFALSE 18049
// RemoveUnit ( i ) ;
18040: LD_VAR 0 1
18044: PPUSH
18045: CALL_OW 64
18049: GO 18023
18051: POP
18052: POP
// end ;
18053: PPOPN 1
18055: END
// export function FinishMission ; var tmp ; begin
18056: LD_INT 0
18058: PPUSH
18059: PPUSH
// if buildOil = 1 and buildPower = 1 then
18060: LD_EXP 34
18064: PUSH
18065: LD_INT 1
18067: EQUAL
18068: PUSH
18069: LD_EXP 35
18073: PUSH
18074: LD_INT 1
18076: EQUAL
18077: AND
18078: IFFALSE 18092
// begin AddMedal ( oil , 1 ) ;
18080: LD_STRING oil
18082: PPUSH
18083: LD_INT 1
18085: PPUSH
18086: CALL_OW 101
// end else
18090: GO 18185
// begin if buildOil = 1 and buildPower = 0 then
18092: LD_EXP 34
18096: PUSH
18097: LD_INT 1
18099: EQUAL
18100: PUSH
18101: LD_EXP 35
18105: PUSH
18106: LD_INT 0
18108: EQUAL
18109: AND
18110: IFFALSE 18123
// AddMedal ( oil , - 1 ) ;
18112: LD_STRING oil
18114: PPUSH
18115: LD_INT 1
18117: NEG
18118: PPUSH
18119: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18123: LD_EXP 34
18127: PUSH
18128: LD_INT 0
18130: EQUAL
18131: PUSH
18132: LD_EXP 35
18136: PUSH
18137: LD_INT 1
18139: EQUAL
18140: AND
18141: IFFALSE 18154
// AddMedal ( oil , - 2 ) ;
18143: LD_STRING oil
18145: PPUSH
18146: LD_INT 2
18148: NEG
18149: PPUSH
18150: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18154: LD_EXP 34
18158: PUSH
18159: LD_INT 0
18161: EQUAL
18162: PUSH
18163: LD_EXP 35
18167: PUSH
18168: LD_INT 0
18170: EQUAL
18171: AND
18172: IFFALSE 18185
// AddMedal ( oil , - 3 ) ;
18174: LD_STRING oil
18176: PPUSH
18177: LD_INT 3
18179: NEG
18180: PPUSH
18181: CALL_OW 101
// end ; if lostCounter < 3 then
18185: LD_EXP 38
18189: PUSH
18190: LD_INT 3
18192: LESS
18193: IFFALSE 18207
// begin AddMedal ( deaths , 1 ) ;
18195: LD_STRING deaths
18197: PPUSH
18198: LD_INT 1
18200: PPUSH
18201: CALL_OW 101
// end else
18205: GO 18218
// begin AddMedal ( deaths , - 1 ) ;
18207: LD_STRING deaths
18209: PPUSH
18210: LD_INT 1
18212: NEG
18213: PPUSH
18214: CALL_OW 101
// end ; if honor = 1 then
18218: LD_EXP 39
18222: PUSH
18223: LD_INT 1
18225: EQUAL
18226: IFFALSE 18240
// begin AddMedal ( honour , 1 ) ;
18228: LD_STRING honour
18230: PPUSH
18231: LD_INT 1
18233: PPUSH
18234: CALL_OW 101
// end else
18238: GO 18251
// begin AddMedal ( honour , - 1 ) ;
18240: LD_STRING honour
18242: PPUSH
18243: LD_INT 1
18245: NEG
18246: PPUSH
18247: CALL_OW 101
// end ; GiveMedals ( Main ) ;
18251: LD_STRING Main
18253: PPUSH
18254: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18258: LD_INT 22
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 23
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 21
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: PPUSH
18293: CALL_OW 69
18297: PPUSH
18298: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
18302: LD_EXP 2
18306: PPUSH
18307: LD_STRING JMM
18309: PPUSH
18310: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
18314: LD_EXP 3
18318: PPUSH
18319: LD_STRING Bobby
18321: PPUSH
18322: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
18326: LD_EXP 4
18330: PPUSH
18331: LD_STRING Cyrus
18333: PPUSH
18334: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
18338: LD_EXP 5
18342: PPUSH
18343: LD_STRING Lisa
18345: PPUSH
18346: CALL_OW 38
// SaveCharacters ( Brown , Brown ) ;
18350: LD_EXP 7
18354: PPUSH
18355: LD_STRING Brown
18357: PPUSH
18358: CALL_OW 38
// SaveCharacters ( Donaldson , Donaldson ) ;
18362: LD_EXP 13
18366: PPUSH
18367: LD_STRING Donaldson
18369: PPUSH
18370: CALL_OW 38
// SaveCharacters ( Frank , Frank ) ;
18374: LD_EXP 6
18378: PPUSH
18379: LD_STRING Frank
18381: PPUSH
18382: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
18386: LD_INT 50
18388: PUSH
18389: EMPTY
18390: LIST
18391: PUSH
18392: LD_INT 22
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 21
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: PUSH
18422: LD_EXP 2
18426: PUSH
18427: LD_EXP 3
18431: PUSH
18432: LD_EXP 4
18436: PUSH
18437: LD_EXP 5
18441: PUSH
18442: LD_EXP 7
18446: PUSH
18447: LD_EXP 13
18451: PUSH
18452: LD_EXP 6
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: DIFF
18466: PPUSH
18467: LD_STRING 04_other_survivors
18469: PPUSH
18470: CALL_OW 38
// YouWin ;
18474: CALL_OW 103
// end ; end_of_file
18478: LD_VAR 0 1
18482: RET
// every 1 1$15 do
18483: GO 18485
18485: DISABLE
// begin if supply <= 13 and supply > 7 then
18486: LD_EXP 36
18490: PUSH
18491: LD_INT 13
18493: LESSEQUAL
18494: PUSH
18495: LD_EXP 36
18499: PUSH
18500: LD_INT 7
18502: GREATER
18503: AND
18504: IFFALSE 18527
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
18506: LD_INT 3
18508: PPUSH
18509: LD_INT 5
18511: PPUSH
18512: CALL_OW 12
18516: PPUSH
18517: LD_INT 18
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: CALL_OW 55
// if supply <= 7 and supply > 4 then
18527: LD_EXP 36
18531: PUSH
18532: LD_INT 7
18534: LESSEQUAL
18535: PUSH
18536: LD_EXP 36
18540: PUSH
18541: LD_INT 4
18543: GREATER
18544: AND
18545: IFFALSE 18568
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
18547: LD_INT 3
18549: PPUSH
18550: LD_INT 5
18552: PPUSH
18553: CALL_OW 12
18557: PPUSH
18558: LD_INT 19
18560: PPUSH
18561: LD_INT 1
18563: PPUSH
18564: CALL_OW 55
// if supply <= 4 and supply > 0 then
18568: LD_EXP 36
18572: PUSH
18573: LD_INT 4
18575: LESSEQUAL
18576: PUSH
18577: LD_EXP 36
18581: PUSH
18582: LD_INT 0
18584: GREATER
18585: AND
18586: IFFALSE 18609
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
18588: LD_INT 3
18590: PPUSH
18591: LD_INT 5
18593: PPUSH
18594: CALL_OW 12
18598: PPUSH
18599: LD_INT 20
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: CALL_OW 55
// if supply > 0 then
18609: LD_EXP 36
18613: PUSH
18614: LD_INT 0
18616: GREATER
18617: IFFALSE 18634
// begin supply = supply - 1 ;
18619: LD_ADDR_EXP 36
18623: PUSH
18624: LD_EXP 36
18628: PUSH
18629: LD_INT 1
18631: MINUS
18632: ST_TO_ADDR
// enable ;
18633: ENABLE
// end ; end ;
18634: END
