// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// russianTanks = [ ] ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: EMPTY
  50: ST_TO_ADDR
// russianDamageTanks = [ ] ;
  51: LD_ADDR_EXP 19
  55: PUSH
  56: EMPTY
  57: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  58: LD_ADDR_EXP 20
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// debugMode = 0 ;
  66: LD_ADDR_EXP 43
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// bonusAvalaible = 0 ;
  74: LD_ADDR_EXP 42
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// firstRussianAttack = 0 ;
  82: LD_ADDR_EXP 23
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// saveDonaldson = 0 ;
  90: LD_ADDR_EXP 24
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// frankScoutBase = 0 ;
  98: LD_ADDR_EXP 25
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// harrAnswer = 0 ;
 106: LD_ADDR_EXP 26
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 114: LD_ADDR_EXP 27
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 122: LD_ADDR_EXP 28
 126: PUSH
 127: LD_INT 18900
 129: ST_TO_ADDR
// timerStatus = 0 ;
 130: LD_ADDR_EXP 29
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// startTimer = 0 ;
 138: LD_ADDR_EXP 30
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// factoryDialog = 0 ;
 146: LD_ADDR_EXP 31
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// bunkerDialog = 0 ;
 154: LD_ADDR_EXP 32
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// energyVDialog = 0 ;
 162: LD_ADDR_EXP 33
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// buildOil = 0 ;
 170: LD_ADDR_EXP 34
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// buildPower = 0 ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 186: LD_ADDR_EXP 36
 190: PUSH
 191: LD_INT 14
 193: PUSH
 194: LD_INT 12
 196: PUSH
 197: LD_INT 11
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: PUSH
 205: LD_OWVAR 67
 209: ARRAY
 210: ST_TO_ADDR
// AIEnable = 1 ;
 211: LD_ADDR_EXP 37
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 219: LD_ADDR_EXP 41
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// lostCounter = 0 ;
 227: LD_ADDR_EXP 38
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// honor = 1 ;
 235: LD_ADDR_EXP 39
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// escapeAvalaible = 0 ;
 243: LD_ADDR_EXP 40
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// PrepareDifficulty ;
 251: CALL 4206 0 0
// PrepareRussianBase ;
 255: CALL 2519 0 0
// PrepareRussianCommander ;
 259: CALL 2470 0 0
// PrepareHeroes ;
 263: CALL 404 0 0
// SetBName ( ambdept0 , gamma ) ;
 267: LD_INT 4
 269: PPUSH
 270: LD_STRING gamma
 272: PPUSH
 273: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 277: LD_INT 21
 279: PPUSH
 280: LD_STRING fyodor
 282: PPUSH
 283: CALL_OW 500
// end ;
 287: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 288: LD_EXP 43
 292: PUSH
 293: LD_INT 1
 295: EQUAL
 296: IFFALSE 401
 298: GO 300
 300: DISABLE
 301: LD_INT 0
 303: PPUSH
// begin enable ;
 304: ENABLE
// fogoff ( true ) ;
 305: LD_INT 1
 307: PPUSH
 308: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 312: LD_ADDR_VAR 0 1
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 21
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PPUSH
 341: CALL_OW 69
 345: PUSH
 346: FOR_IN
 347: IFFALSE 363
// SetLives ( i , 1000 ) ;
 349: LD_VAR 0 1
 353: PPUSH
 354: LD_INT 1000
 356: PPUSH
 357: CALL_OW 234
 361: GO 346
 363: POP
 364: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 365: LD_INT 4
 367: PPUSH
 368: CALL_OW 274
 372: PPUSH
 373: LD_INT 1
 375: PPUSH
 376: LD_INT 9999
 378: PPUSH
 379: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 383: LD_INT 4
 385: PPUSH
 386: CALL_OW 274
 390: PPUSH
 391: LD_INT 2
 393: PPUSH
 394: LD_INT 9999
 396: PPUSH
 397: CALL_OW 277
// end ; end_of_file
 401: PPOPN 1
 403: END
// export function PrepareHeroes ; var i , tmp ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
 408: PPUSH
// uc_side = 1 ;
 409: LD_ADDR_OWVAR 20
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// uc_nation = 1 ;
 417: LD_ADDR_OWVAR 21
 421: PUSH
 422: LD_INT 1
 424: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 425: LD_ADDR_EXP 1
 429: PUSH
 430: LD_STRING JMM
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: CALL 3741 0 2
 440: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 441: LD_ADDR_EXP 4
 445: PUSH
 446: LD_STRING Lisa
 448: PPUSH
 449: LD_INT 1
 451: PPUSH
 452: CALL 3741 0 2
 456: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 457: LD_ADDR_EXP 7
 461: PUSH
 462: LD_STRING Brown
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL 3741 0 2
 472: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 473: LD_ADDR_EXP 8
 477: PUSH
 478: LD_STRING Dickens
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL 3741 0 2
 488: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 489: LD_ADDR_EXP 9
 493: PUSH
 494: LD_STRING Woodruff
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 3741 0 2
 504: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 505: LD_ADDR_EXP 12
 509: PUSH
 510: LD_STRING Campell
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL 3741 0 2
 520: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 521: LD_ADDR_EXP 10
 525: PUSH
 526: LD_STRING Knight
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL 3741 0 2
 536: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 537: LD_ADDR_EXP 11
 541: PUSH
 542: LD_STRING Claptopn
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL 3741 0 2
 552: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 553: LD_ADDR_EXP 14
 557: PUSH
 558: LD_STRING Harisson
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL 3741 0 2
 568: ST_TO_ADDR
// if Lisa = false then
 569: LD_EXP 4
 573: PUSH
 574: LD_INT 0
 576: EQUAL
 577: IFFALSE 595
// Bobby = PrepareUnit ( Bobby , true ) ;
 579: LD_ADDR_EXP 2
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 3741 0 2
 594: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 595: LD_EXP 4
 599: PUSH
 600: LD_INT 0
 602: EQUAL
 603: PUSH
 604: LD_EXP 2
 608: PUSH
 609: LD_INT 0
 611: EQUAL
 612: AND
 613: IFFALSE 631
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 615: LD_ADDR_EXP 3
 619: PUSH
 620: LD_STRING Cyrus
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL 3741 0 2
 630: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 631: LD_EXP 4
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: PUSH
 640: LD_EXP 2
 644: PUSH
 645: LD_INT 0
 647: EQUAL
 648: AND
 649: PUSH
 650: LD_EXP 3
 654: PUSH
 655: LD_INT 0
 657: EQUAL
 658: AND
 659: IFFALSE 720
// begin tmp = CreateCharacterSet ( 03_others ) ;
 661: LD_ADDR_VAR 0 3
 665: PUSH
 666: LD_STRING 03_others
 668: PPUSH
 669: CALL_OW 31
 673: ST_TO_ADDR
// for i = 1 to tmp do
 674: LD_ADDR_VAR 0 2
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_VAR 0 3
 688: PUSH
 689: FOR_TO
 690: IFFALSE 718
// RandomBeforeMission = tmp [ Rand ( 1 , tmp ) ] ;
 692: LD_ADDR_EXP 6
 696: PUSH
 697: LD_VAR 0 3
 701: PUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_VAR 0 3
 709: PPUSH
 710: CALL_OW 12
 714: ARRAY
 715: ST_TO_ADDR
 716: GO 689
 718: POP
 719: POP
// end ; uc_side = 4 ;
 720: LD_ADDR_OWVAR 20
 724: PUSH
 725: LD_INT 4
 727: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 728: LD_ADDR_EXP 13
 732: PUSH
 733: LD_STRING Donaldson
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 3741 0 2
 743: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 744: LD_ADDR_EXP 5
 748: PUSH
 749: LD_STRING Frank
 751: PPUSH
 752: LD_INT 1
 754: PPUSH
 755: CALL 3741 0 2
 759: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 760: LD_EXP 1
 764: PPUSH
 765: LD_INT 32
 767: PPUSH
 768: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 772: LD_EXP 7
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: LD_INT 0
 782: PPUSH
 783: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 787: LD_EXP 7
 791: PPUSH
 792: LD_INT 32
 794: PPUSH
 795: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 799: LD_EXP 8
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 814: LD_EXP 9
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 829: LD_EXP 12
 833: PPUSH
 834: LD_INT 2
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 844: LD_EXP 10
 848: PPUSH
 849: LD_INT 2
 851: PPUSH
 852: LD_INT 0
 854: PPUSH
 855: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 859: LD_EXP 11
 863: PPUSH
 864: LD_INT 2
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 874: LD_EXP 4
 878: PPUSH
 879: LD_INT 2
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
// if Lisa = false then
 889: LD_EXP 4
 893: PUSH
 894: LD_INT 0
 896: EQUAL
 897: IFFALSE 914
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 899: LD_EXP 2
 903: PPUSH
 904: LD_INT 2
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// if Lisa = false and Bobby = false then
 914: LD_EXP 4
 918: PUSH
 919: LD_INT 0
 921: EQUAL
 922: PUSH
 923: LD_EXP 2
 927: PUSH
 928: LD_INT 0
 930: EQUAL
 931: AND
 932: IFFALSE 949
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 934: LD_EXP 3
 938: PPUSH
 939: LD_INT 2
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 949: LD_EXP 4
 953: PUSH
 954: LD_INT 0
 956: EQUAL
 957: PUSH
 958: LD_EXP 2
 962: PUSH
 963: LD_INT 0
 965: EQUAL
 966: AND
 967: PUSH
 968: LD_EXP 3
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 994
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 979: LD_EXP 6
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: LD_VAR 0 1
 998: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 999: LD_INT 0
1001: PPUSH
1002: PPUSH
1003: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1004: LD_EXP 13
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1019: LD_EXP 5
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// uc_nation = 1 ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// uc_side = 4 ;
1042: LD_ADDR_OWVAR 20
1046: PUSH
1047: LD_INT 4
1049: ST_TO_ADDR
// hc_class := 3 ;
1050: LD_ADDR_OWVAR 28
1054: PUSH
1055: LD_INT 3
1057: ST_TO_ADDR
// hc_sex := sex_male ;
1058: LD_ADDR_OWVAR 27
1062: PUSH
1063: LD_INT 1
1065: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1066: LD_ADDR_OWVAR 33
1070: PUSH
1071: LD_STRING SecondCharsGal
1073: ST_TO_ADDR
// hc_face_number := 53 ;
1074: LD_ADDR_OWVAR 34
1078: PUSH
1079: LD_INT 53
1081: ST_TO_ADDR
// hc_name := Freddie Warner ;
1082: LD_ADDR_OWVAR 26
1086: PUSH
1087: LD_STRING Freddie Warner
1089: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1090: LD_ADDR_OWVAR 29
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_INT 11
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1105: LD_ADDR_OWVAR 30
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 0
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: LD_INT 0
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: ST_TO_ADDR
// un = CreateHuman ;
1151: LD_ADDR_VAR 0 3
1155: PUSH
1156: CALL_OW 44
1160: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1161: LD_VAR 0 3
1165: PPUSH
1166: LD_INT 10
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: CALL_OW 49
// hc_class := 1 ;
1176: LD_ADDR_OWVAR 28
1180: PUSH
1181: LD_INT 1
1183: ST_TO_ADDR
// hc_sex := sex_male ;
1184: LD_ADDR_OWVAR 27
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1192: LD_ADDR_OWVAR 33
1196: PUSH
1197: LD_STRING SecondCharsGal
1199: ST_TO_ADDR
// hc_face_number := 56 ;
1200: LD_ADDR_OWVAR 34
1204: PUSH
1205: LD_INT 56
1207: ST_TO_ADDR
// hc_name := Mel Brennan ;
1208: LD_ADDR_OWVAR 26
1212: PUSH
1213: LD_STRING Mel Brennan
1215: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1216: LD_ADDR_OWVAR 29
1220: PUSH
1221: LD_INT 12
1223: PUSH
1224: LD_INT 11
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1231: LD_ADDR_OWVAR 30
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 0
1244: PUSH
1245: LD_INT 0
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1254: LD_ADDR_OWVAR 31
1258: PUSH
1259: LD_INT 2
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 1
1267: PUSH
1268: LD_INT 0
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: ST_TO_ADDR
// un = CreateHuman ;
1277: LD_ADDR_VAR 0 3
1281: PUSH
1282: CALL_OW 44
1286: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1287: LD_VAR 0 3
1291: PPUSH
1292: LD_INT 10
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: CALL_OW 49
// hc_class := 1 ;
1302: LD_ADDR_OWVAR 28
1306: PUSH
1307: LD_INT 1
1309: ST_TO_ADDR
// hc_sex := sex_male ;
1310: LD_ADDR_OWVAR 27
1314: PUSH
1315: LD_INT 1
1317: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1318: LD_ADDR_OWVAR 33
1322: PUSH
1323: LD_STRING AmGalRemake
1325: ST_TO_ADDR
// hc_face_number := 5 ;
1326: LD_ADDR_OWVAR 34
1330: PUSH
1331: LD_INT 5
1333: ST_TO_ADDR
// hc_name := Bob Joplin ;
1334: LD_ADDR_OWVAR 26
1338: PUSH
1339: LD_STRING Bob Joplin
1341: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1342: LD_ADDR_OWVAR 29
1346: PUSH
1347: LD_INT 10
1349: PUSH
1350: LD_INT 11
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1357: LD_ADDR_OWVAR 30
1361: PUSH
1362: LD_INT 0
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: LD_INT 0
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1380: LD_ADDR_OWVAR 31
1384: PUSH
1385: LD_INT 3
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// un = CreateHuman ;
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: CALL_OW 44
1412: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1413: LD_VAR 0 3
1417: PPUSH
1418: LD_INT 10
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
// hc_class := 3 ;
1428: LD_ADDR_OWVAR 28
1432: PUSH
1433: LD_INT 3
1435: ST_TO_ADDR
// hc_sex := sex_female ;
1436: LD_ADDR_OWVAR 27
1440: PUSH
1441: LD_INT 2
1443: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1444: LD_ADDR_OWVAR 33
1448: PUSH
1449: LD_STRING AmGalRemake
1451: ST_TO_ADDR
// hc_face_number := 4 ;
1452: LD_ADDR_OWVAR 34
1456: PUSH
1457: LD_INT 4
1459: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1460: LD_ADDR_OWVAR 26
1464: PUSH
1465: LD_STRING Elizabeth Whitney
1467: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1468: LD_ADDR_OWVAR 29
1472: PUSH
1473: LD_INT 9
1475: PUSH
1476: LD_INT 11
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1483: LD_ADDR_OWVAR 30
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 2
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1506: LD_ADDR_OWVAR 31
1510: PUSH
1511: LD_INT 2
1513: PUSH
1514: LD_INT 2
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: LD_INT 2
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: ST_TO_ADDR
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 3
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1539: LD_VAR 0 3
1543: PPUSH
1544: LD_INT 10
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL_OW 49
// InitHc ;
1554: CALL_OW 19
// end ;
1558: LD_VAR 0 1
1562: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1563: LD_INT 0
1565: PPUSH
1566: PPUSH
1567: PPUSH
// uc_nation = 1 ;
1568: LD_ADDR_OWVAR 21
1572: PUSH
1573: LD_INT 1
1575: ST_TO_ADDR
// uc_side = 1 ;
1576: LD_ADDR_OWVAR 20
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// hc_class := 1 ;
1584: LD_ADDR_OWVAR 28
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// hc_sex := sex_male ;
1592: LD_ADDR_OWVAR 27
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1600: LD_ADDR_OWVAR 33
1604: PUSH
1605: LD_STRING SecondCharsGal
1607: ST_TO_ADDR
// hc_face_number := 59 ;
1608: LD_ADDR_OWVAR 34
1612: PUSH
1613: LD_INT 59
1615: ST_TO_ADDR
// hc_name := Max Gray ;
1616: LD_ADDR_OWVAR 26
1620: PUSH
1621: LD_STRING Max Gray
1623: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1624: LD_ADDR_OWVAR 29
1628: PUSH
1629: LD_INT 9
1631: PUSH
1632: LD_INT 11
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1639: LD_ADDR_OWVAR 30
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1662: LD_ADDR_OWVAR 31
1666: PUSH
1667: LD_INT 2
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: LD_INT 1
1675: PUSH
1676: LD_INT 0
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// un = CreateHuman ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: CALL_OW 44
1694: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1695: LD_VAR 0 4
1699: PPUSH
1700: LD_INT 11
1702: PPUSH
1703: LD_INT 0
1705: PPUSH
1706: CALL_OW 49
// hc_class := 1 ;
1710: LD_ADDR_OWVAR 28
1714: PUSH
1715: LD_INT 1
1717: ST_TO_ADDR
// hc_sex := sex_male ;
1718: LD_ADDR_OWVAR 27
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1726: LD_ADDR_OWVAR 33
1730: PUSH
1731: LD_STRING SecondCharsGal
1733: ST_TO_ADDR
// hc_face_number := 54 ;
1734: LD_ADDR_OWVAR 34
1738: PUSH
1739: LD_INT 54
1741: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1742: LD_ADDR_OWVAR 26
1746: PUSH
1747: LD_STRING Luigi Ghbellin
1749: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1750: LD_ADDR_OWVAR 29
1754: PUSH
1755: LD_INT 11
1757: PUSH
1758: LD_INT 11
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1765: LD_ADDR_OWVAR 30
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 0
1775: PUSH
1776: LD_INT 0
1778: PUSH
1779: LD_INT 0
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1788: LD_ADDR_OWVAR 31
1792: PUSH
1793: LD_INT 1
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: ST_TO_ADDR
// un = CreateHuman ;
1811: LD_ADDR_VAR 0 4
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 11
1828: PPUSH
1829: LD_INT 0
1831: PPUSH
1832: CALL_OW 49
// hc_class := 3 ;
1836: LD_ADDR_OWVAR 28
1840: PUSH
1841: LD_INT 3
1843: ST_TO_ADDR
// hc_sex := sex_male ;
1844: LD_ADDR_OWVAR 27
1848: PUSH
1849: LD_INT 1
1851: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1852: LD_ADDR_OWVAR 33
1856: PUSH
1857: LD_STRING AmGalRemake
1859: ST_TO_ADDR
// hc_face_number := 6 ;
1860: LD_ADDR_OWVAR 34
1864: PUSH
1865: LD_INT 6
1867: ST_TO_ADDR
// hc_name := Leon Carter ;
1868: LD_ADDR_OWVAR 26
1872: PUSH
1873: LD_STRING Leon Carter
1875: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1876: LD_ADDR_OWVAR 29
1880: PUSH
1881: LD_INT 10
1883: PUSH
1884: LD_INT 9
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1891: LD_ADDR_OWVAR 30
1895: PUSH
1896: LD_INT 0
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 0
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1914: LD_ADDR_OWVAR 31
1918: PUSH
1919: LD_INT 0
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: LD_INT 3
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: ST_TO_ADDR
// un = CreateHuman ;
1937: LD_ADDR_VAR 0 4
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1947: LD_VAR 0 4
1951: PPUSH
1952: LD_INT 11
1954: PPUSH
1955: LD_INT 0
1957: PPUSH
1958: CALL_OW 49
// if count = 4 then
1962: LD_VAR 0 1
1966: PUSH
1967: LD_INT 4
1969: EQUAL
1970: IFFALSE 2098
// begin hc_class := 1 ;
1972: LD_ADDR_OWVAR 28
1976: PUSH
1977: LD_INT 1
1979: ST_TO_ADDR
// hc_sex := sex_male ;
1980: LD_ADDR_OWVAR 27
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1988: LD_ADDR_OWVAR 33
1992: PUSH
1993: LD_STRING SecondCharsGal
1995: ST_TO_ADDR
// hc_face_number := 34 ;
1996: LD_ADDR_OWVAR 34
2000: PUSH
2001: LD_INT 34
2003: ST_TO_ADDR
// hc_name := Ian Hill ;
2004: LD_ADDR_OWVAR 26
2008: PUSH
2009: LD_STRING Ian Hill
2011: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2012: LD_ADDR_OWVAR 29
2016: PUSH
2017: LD_INT 10
2019: PUSH
2020: LD_INT 12
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2027: LD_ADDR_OWVAR 30
2031: PUSH
2032: LD_INT 0
2034: PUSH
2035: LD_INT 0
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2050: LD_ADDR_OWVAR 31
2054: PUSH
2055: LD_INT 2
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 0
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: ST_TO_ADDR
// un = CreateHuman ;
2073: LD_ADDR_VAR 0 4
2077: PUSH
2078: CALL_OW 44
2082: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2083: LD_VAR 0 4
2087: PPUSH
2088: LD_INT 11
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
// end ; if count = 5 then
2098: LD_VAR 0 1
2102: PUSH
2103: LD_INT 5
2105: EQUAL
2106: IFFALSE 2360
// begin hc_class := 1 ;
2108: LD_ADDR_OWVAR 28
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// hc_sex := sex_male ;
2116: LD_ADDR_OWVAR 27
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2124: LD_ADDR_OWVAR 33
2128: PUSH
2129: LD_STRING SecondCharsGal
2131: ST_TO_ADDR
// hc_face_number := 34 ;
2132: LD_ADDR_OWVAR 34
2136: PUSH
2137: LD_INT 34
2139: ST_TO_ADDR
// hc_name := Ian Hill ;
2140: LD_ADDR_OWVAR 26
2144: PUSH
2145: LD_STRING Ian Hill
2147: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2148: LD_ADDR_OWVAR 29
2152: PUSH
2153: LD_INT 10
2155: PUSH
2156: LD_INT 12
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2163: LD_ADDR_OWVAR 30
2167: PUSH
2168: LD_INT 0
2170: PUSH
2171: LD_INT 0
2173: PUSH
2174: LD_INT 1
2176: PUSH
2177: LD_INT 0
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2186: LD_ADDR_OWVAR 31
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 0
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 0
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// un = CreateHuman ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: CALL_OW 44
2218: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2219: LD_VAR 0 4
2223: PPUSH
2224: LD_INT 11
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// hc_class := 1 ;
2234: LD_ADDR_OWVAR 28
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// hc_sex := sex_female ;
2242: LD_ADDR_OWVAR 27
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2250: LD_ADDR_OWVAR 33
2254: PUSH
2255: LD_STRING SecondCharsGal
2257: ST_TO_ADDR
// hc_face_number := 41 ;
2258: LD_ADDR_OWVAR 34
2262: PUSH
2263: LD_INT 41
2265: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2266: LD_ADDR_OWVAR 26
2270: PUSH
2271: LD_STRING Kate Wadsworth
2273: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2274: LD_ADDR_OWVAR 29
2278: PUSH
2279: LD_INT 9
2281: PUSH
2282: LD_INT 9
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2289: LD_ADDR_OWVAR 30
2293: PUSH
2294: LD_INT 0
2296: PUSH
2297: LD_INT 2
2299: PUSH
2300: LD_INT 0
2302: PUSH
2303: LD_INT 0
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2312: LD_ADDR_OWVAR 31
2316: PUSH
2317: LD_INT 2
2319: PUSH
2320: LD_INT 3
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// un = CreateHuman ;
2335: LD_ADDR_VAR 0 4
2339: PUSH
2340: CALL_OW 44
2344: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_INT 11
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2360: LD_INT 11
2362: PPUSH
2363: LD_INT 22
2365: PUSH
2366: LD_INT 1
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: LD_INT 21
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 26
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: PPUSH
2398: CALL_OW 70
2402: PUSH
2403: LD_INT 1
2405: ARRAY
2406: PPUSH
2407: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2411: LD_INT 11
2413: PPUSH
2414: LD_INT 22
2416: PUSH
2417: LD_INT 1
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 21
2426: PUSH
2427: LD_INT 1
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 26
2436: PUSH
2437: LD_INT 1
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: PUSH
2454: LD_INT 1
2456: ARRAY
2457: PPUSH
2458: LD_STRING D6-Sol3-1
2460: PPUSH
2461: CALL_OW 88
// end ; end_of_file
2465: LD_VAR 0 2
2469: RET
// export function PrepareRussianCommander ; begin
2470: LD_INT 0
2472: PPUSH
// uc_side = 3 ;
2473: LD_ADDR_OWVAR 20
2477: PUSH
2478: LD_INT 3
2480: ST_TO_ADDR
// uc_nation = 3 ;
2481: LD_ADDR_OWVAR 21
2485: PUSH
2486: LD_INT 3
2488: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2489: LD_ADDR_EXP 15
2493: PUSH
2494: LD_STRING Stolypin
2496: PPUSH
2497: CALL_OW 25
2501: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2502: LD_EXP 15
2506: PPUSH
2507: LD_INT 21
2509: PPUSH
2510: CALL_OW 52
// end ;
2514: LD_VAR 0 1
2518: RET
// export function PrepareRussianBase ; var i ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 22
2531: PPUSH
2532: LD_EXP 16
2536: PPUSH
2537: LD_EXP 17
2541: PPUSH
2542: CALL_OW 12
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2557: LD_INT 3
2559: PPUSH
2560: LD_INT 3
2562: PPUSH
2563: LD_INT 21
2565: PPUSH
2566: LD_EXP 16
2570: PPUSH
2571: LD_EXP 17
2575: PPUSH
2576: CALL_OW 12
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2591: LD_INT 3
2593: PPUSH
2594: LD_INT 3
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_EXP 16
2604: PPUSH
2605: LD_EXP 17
2609: PPUSH
2610: CALL_OW 12
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2625: LD_INT 3
2627: PPUSH
2628: LD_INT 3
2630: PPUSH
2631: LD_INT 24
2633: PPUSH
2634: LD_EXP 16
2638: PPUSH
2639: LD_EXP 17
2643: PPUSH
2644: CALL_OW 12
2648: PPUSH
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 6
2654: PPUSH
2655: CALL 3804 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: LD_INT 22
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: LD_INT 30
2676: PUSH
2677: LD_INT 32
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: PUSH
2693: FOR_IN
2694: IFFALSE 2734
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 3
2701: PPUSH
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_EXP 16
2711: PPUSH
2712: LD_EXP 17
2716: PPUSH
2717: CALL_OW 12
2721: PPUSH
2722: LD_INT 1
2724: PPUSH
2725: LD_INT 1
2727: PPUSH
2728: CALL 3804 0 6
2732: GO 2693
2734: POP
2735: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2736: LD_ADDR_VAR 0 2
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 30
2753: PUSH
2754: LD_INT 31
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: FOR_IN
2771: IFFALSE 2799
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_EXP 17
2782: PPUSH
2783: CALL_OW 12
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: CALL 3914 0 2
2797: GO 2770
2799: POP
2800: POP
// end ;
2801: LD_VAR 0 1
2805: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2806: LD_INT 0
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
// uc_side = 6 ;
2812: LD_ADDR_OWVAR 20
2816: PUSH
2817: LD_INT 6
2819: ST_TO_ADDR
// uc_nation = 3 ;
2820: LD_ADDR_OWVAR 21
2824: PUSH
2825: LD_INT 3
2827: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2828: LD_ADDR_VAR 0 2
2832: PUSH
2833: DOUBLE
2834: LD_INT 1
2836: DEC
2837: ST_TO_ADDR
2838: LD_INT 1
2840: PUSH
2841: LD_INT 2
2843: PUSH
2844: LD_INT 1
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 12
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PUSH
2866: FOR_TO
2867: IFFALSE 3027
// begin vc_engine = 1 ;
2869: LD_ADDR_OWVAR 39
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// vc_control = 1 ;
2877: LD_ADDR_OWVAR 38
2881: PUSH
2882: LD_INT 1
2884: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2885: LD_ADDR_OWVAR 40
2889: PUSH
2890: LD_INT 42
2892: PUSH
2893: LD_INT 42
2895: PUSH
2896: LD_INT 43
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: PUSH
2904: LD_OWVAR 67
2908: ARRAY
2909: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2910: LD_ADDR_OWVAR 37
2914: PUSH
2915: LD_INT 21
2917: PUSH
2918: LD_INT 22
2920: PUSH
2921: LD_INT 22
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PUSH
2929: LD_OWVAR 67
2933: ARRAY
2934: ST_TO_ADDR
// veh = CreateVehicle ;
2935: LD_ADDR_VAR 0 3
2939: PUSH
2940: CALL_OW 45
2944: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2945: LD_VAR 0 3
2949: PPUSH
2950: LD_INT 3
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 49
// hc_gallery =  ;
2960: LD_ADDR_OWVAR 33
2964: PUSH
2965: LD_STRING 
2967: ST_TO_ADDR
// hc_name =  ;
2968: LD_ADDR_OWVAR 26
2972: PUSH
2973: LD_STRING 
2975: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2976: LD_INT 0
2978: PPUSH
2979: LD_INT 3
2981: PPUSH
2982: LD_EXP 16
2986: PPUSH
2987: LD_EXP 17
2991: PPUSH
2992: CALL_OW 12
2996: PPUSH
2997: CALL_OW 380
// un = CreateHuman ;
3001: LD_ADDR_VAR 0 4
3005: PUSH
3006: CALL_OW 44
3010: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3011: LD_VAR 0 4
3015: PPUSH
3016: LD_VAR 0 3
3020: PPUSH
3021: CALL_OW 52
// end ;
3025: GO 2866
3027: POP
3028: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3029: LD_INT 0
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: LD_EXP 16
3039: PPUSH
3040: LD_EXP 17
3044: PPUSH
3045: CALL_OW 12
3049: PUSH
3050: LD_INT 2
3052: PLUS
3053: PPUSH
3054: CALL_OW 380
// un = CreateHuman ;
3058: LD_ADDR_VAR 0 4
3062: PUSH
3063: CALL_OW 44
3067: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3068: LD_VAR 0 4
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3083: LD_INT 0
3085: PPUSH
3086: LD_INT 4
3088: PPUSH
3089: LD_EXP 16
3093: PPUSH
3094: LD_EXP 17
3098: PPUSH
3099: CALL_OW 12
3103: PUSH
3104: LD_INT 2
3106: PLUS
3107: PPUSH
3108: CALL_OW 380
// un = CreateHuman ;
3112: LD_ADDR_VAR 0 4
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3122: LD_VAR 0 4
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3137: LD_ADDR_VAR 0 2
3141: PUSH
3142: DOUBLE
3143: LD_INT 1
3145: DEC
3146: ST_TO_ADDR
3147: LD_INT 2
3149: PUSH
3150: LD_INT 3
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: PUSH
3161: LD_OWVAR 67
3165: ARRAY
3166: PUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_INT 3
3172: PPUSH
3173: CALL_OW 12
3177: PLUS
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3250
// begin hc_gallery =  ;
3182: LD_ADDR_OWVAR 33
3186: PUSH
3187: LD_STRING 
3189: ST_TO_ADDR
// hc_name =  ;
3190: LD_ADDR_OWVAR 26
3194: PUSH
3195: LD_STRING 
3197: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 1
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: LD_EXP 17
3213: PPUSH
3214: CALL_OW 12
3218: PPUSH
3219: CALL_OW 380
// un = CreateHuman ;
3223: LD_ADDR_VAR 0 4
3227: PUSH
3228: CALL_OW 44
3232: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3233: LD_VAR 0 4
3237: PPUSH
3238: LD_INT 3
3240: PPUSH
3241: LD_INT 0
3243: PPUSH
3244: CALL_OW 49
// end ;
3248: GO 3179
3250: POP
3251: POP
// vc_engine = 1 ;
3252: LD_ADDR_OWVAR 39
3256: PUSH
3257: LD_INT 1
3259: ST_TO_ADDR
// vc_control = 1 ;
3260: LD_ADDR_OWVAR 38
3264: PUSH
3265: LD_INT 1
3267: ST_TO_ADDR
// vc_weapon = 51 ;
3268: LD_ADDR_OWVAR 40
3272: PUSH
3273: LD_INT 51
3275: ST_TO_ADDR
// vc_chassis = 22 ;
3276: LD_ADDR_OWVAR 37
3280: PUSH
3281: LD_INT 22
3283: ST_TO_ADDR
// veh = CreateVehicle ;
3284: LD_ADDR_VAR 0 3
3288: PUSH
3289: CALL_OW 45
3293: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3294: LD_VAR 0 3
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3309: LD_VAR 0 3
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 100
3319: PPUSH
3320: CALL_OW 290
// hc_gallery =  ;
3324: LD_ADDR_OWVAR 33
3328: PUSH
3329: LD_STRING 
3331: ST_TO_ADDR
// hc_name =  ;
3332: LD_ADDR_OWVAR 26
3336: PUSH
3337: LD_STRING 
3339: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3340: LD_INT 0
3342: PPUSH
3343: LD_INT 3
3345: PPUSH
3346: LD_EXP 16
3350: PPUSH
3351: LD_EXP 17
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: CALL_OW 380
// un = CreateHuman ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3375: LD_VAR 0 4
3379: PPUSH
3380: LD_VAR 0 3
3384: PPUSH
3385: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3389: LD_ADDR_VAR 0 2
3393: PUSH
3394: LD_INT 22
3396: PUSH
3397: LD_INT 6
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: LD_INT 3
3409: PUSH
3410: LD_INT 25
3412: PUSH
3413: LD_INT 2
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: LD_INT 25
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: LIST
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 69
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3475
// ComAgressiveMove ( i , 45 , 46 ) ;
3458: LD_VAR 0 2
3462: PPUSH
3463: LD_INT 45
3465: PPUSH
3466: LD_INT 46
3468: PPUSH
3469: CALL_OW 114
3473: GO 3455
3475: POP
3476: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_INT 22
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 25
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: PUSH
3511: FOR_IN
3512: IFFALSE 3543
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3514: LD_ADDR_EXP 21
3518: PUSH
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 48
3529: PPUSH
3530: LD_INT 55
3532: PPUSH
3533: LD_INT 5
3535: PPUSH
3536: CALL_OW 145
3540: ST_TO_ADDR
3541: GO 3511
3543: POP
3544: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: LD_INT 22
3552: PUSH
3553: LD_INT 6
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 25
3562: PUSH
3563: LD_INT 4
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PPUSH
3574: CALL_OW 69
3578: PUSH
3579: FOR_IN
3580: IFFALSE 3599
// ComMoveXY ( i , 39 , 55 ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_INT 39
3589: PPUSH
3590: LD_INT 55
3592: PPUSH
3593: CALL_OW 111
3597: GO 3579
3599: POP
3600: POP
// end ;
3601: LD_VAR 0 1
3605: RET
// export function PrepareFirstAttack ; var i , un ; begin
3606: LD_INT 0
3608: PPUSH
3609: PPUSH
3610: PPUSH
// uc_side = 5 ;
3611: LD_ADDR_OWVAR 20
3615: PUSH
3616: LD_INT 5
3618: ST_TO_ADDR
// uc_nation = 3 ;
3619: LD_ADDR_OWVAR 21
3623: PUSH
3624: LD_INT 3
3626: ST_TO_ADDR
// for i := 1 to 4 do
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: DOUBLE
3633: LD_INT 1
3635: DEC
3636: ST_TO_ADDR
3637: LD_INT 4
3639: PUSH
3640: FOR_TO
3641: IFFALSE 3726
// begin hc_gallery =  ;
3643: LD_ADDR_OWVAR 33
3647: PUSH
3648: LD_STRING 
3650: ST_TO_ADDR
// hc_name =  ;
3651: LD_ADDR_OWVAR 26
3655: PUSH
3656: LD_STRING 
3658: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3659: LD_INT 0
3661: PPUSH
3662: LD_INT 1
3664: PPUSH
3665: LD_EXP 16
3669: PPUSH
3670: LD_EXP 17
3674: PPUSH
3675: CALL_OW 12
3679: PPUSH
3680: CALL_OW 380
// un = CreateHuman ;
3684: LD_ADDR_VAR 0 3
3688: PUSH
3689: CALL_OW 44
3693: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_INT 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_INT 48
3716: PPUSH
3717: LD_INT 14
3719: PPUSH
3720: CALL_OW 114
// end ;
3724: GO 3640
3726: POP
3727: POP
// firstRussianAttack = 1 ;
3728: LD_ADDR_EXP 23
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// end ; end_of_file
3736: LD_VAR 0 1
3740: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
// if exist_mode then
3745: LD_VAR 0 2
3749: IFFALSE 3774
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_EXP 45
3760: PUSH
3761: LD_VAR 0 1
3765: STR
3766: PPUSH
3767: CALL_OW 34
3771: ST_TO_ADDR
// end else
3772: GO 3789
// begin unit := NewCharacter ( ident ) ;
3774: LD_ADDR_VAR 0 4
3778: PUSH
3779: LD_VAR 0 1
3783: PPUSH
3784: CALL_OW 25
3788: ST_TO_ADDR
// end ; result := unit ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_VAR 0 4
3798: ST_TO_ADDR
// end ;
3799: LD_VAR 0 3
3803: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
// for i = 1 to count do
3810: LD_ADDR_VAR 0 8
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_VAR 0 6
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3907
// begin uc_side = side ;
3828: LD_ADDR_OWVAR 20
3832: PUSH
3833: LD_VAR 0 1
3837: ST_TO_ADDR
// uc_nation = nation ;
3838: LD_ADDR_OWVAR 21
3842: PUSH
3843: LD_VAR 0 2
3847: ST_TO_ADDR
// hc_gallery =  ;
3848: LD_ADDR_OWVAR 33
3852: PUSH
3853: LD_STRING 
3855: ST_TO_ADDR
// hc_name =  ;
3856: LD_ADDR_OWVAR 26
3860: PUSH
3861: LD_STRING 
3863: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3864: LD_INT 0
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: CALL_OW 380
// un = CreateHuman ;
3881: LD_ADDR_VAR 0 10
3885: PUSH
3886: CALL_OW 44
3890: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3891: LD_VAR 0 10
3895: PPUSH
3896: LD_VAR 0 3
3900: PPUSH
3901: CALL_OW 52
// end ;
3905: GO 3825
3907: POP
3908: POP
// end ;
3909: LD_VAR 0 7
3913: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
// uc_side := GetSide ( b ) ;
3919: LD_ADDR_OWVAR 20
3923: PUSH
3924: LD_VAR 0 2
3928: PPUSH
3929: CALL_OW 255
3933: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3934: LD_ADDR_OWVAR 21
3938: PUSH
3939: LD_VAR 0 2
3943: PPUSH
3944: CALL_OW 248
3948: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3949: LD_INT 0
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 380
// un = CreateHuman ;
3964: LD_ADDR_VAR 0 4
3968: PUSH
3969: CALL_OW 44
3973: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3974: LD_ADDR_VAR 0 5
3978: PUSH
3979: LD_VAR 0 2
3983: PPUSH
3984: CALL_OW 254
3988: PUSH
3989: LD_INT 3
3991: MINUS
3992: ST_TO_ADDR
// if dir < 0 then
3993: LD_VAR 0 5
3997: PUSH
3998: LD_INT 0
4000: LESS
4001: IFFALSE 4017
// dir := 6 + dir ;
4003: LD_ADDR_VAR 0 5
4007: PUSH
4008: LD_INT 6
4010: PUSH
4011: LD_VAR 0 5
4015: PLUS
4016: ST_TO_ADDR
// SetDir ( un , dir ) ;
4017: LD_VAR 0 4
4021: PPUSH
4022: LD_VAR 0 5
4026: PPUSH
4027: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4031: LD_VAR 0 4
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: CALL_OW 52
// end ;
4045: LD_VAR 0 3
4049: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4050: LD_INT 0
4052: PPUSH
4053: PPUSH
4054: PPUSH
// rnd = rand ( 1 , characters ) ;
4055: LD_ADDR_VAR 0 6
4059: PUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 12
4072: ST_TO_ADDR
// for i = 1 to characters do
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: DOUBLE
4079: LD_INT 1
4081: DEC
4082: ST_TO_ADDR
4083: LD_VAR 0 1
4087: PUSH
4088: FOR_TO
4089: IFFALSE 4199
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4091: LD_VAR 0 5
4095: PUSH
4096: LD_VAR 0 6
4100: EQUAL
4101: PUSH
4102: LD_VAR 0 1
4106: PUSH
4107: LD_VAR 0 5
4111: ARRAY
4112: PPUSH
4113: CALL_OW 258
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4144
// Say ( characters [ i ] , dialogMID ) ;
4124: LD_VAR 0 1
4128: PUSH
4129: LD_VAR 0 5
4133: ARRAY
4134: PPUSH
4135: LD_VAR 0 2
4139: PPUSH
4140: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4144: LD_VAR 0 5
4148: PUSH
4149: LD_VAR 0 6
4153: EQUAL
4154: PUSH
4155: LD_VAR 0 1
4159: PUSH
4160: LD_VAR 0 5
4164: ARRAY
4165: PPUSH
4166: CALL_OW 258
4170: PUSH
4171: LD_INT 2
4173: EQUAL
4174: AND
4175: IFFALSE 4197
// Say ( characters [ i ] , dialogFID ) ;
4177: LD_VAR 0 1
4181: PUSH
4182: LD_VAR 0 5
4186: ARRAY
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: CALL_OW 88
// end ;
4197: GO 4088
4199: POP
4200: POP
// end ;
4201: LD_VAR 0 4
4205: RET
// export function PrepareDifficulty ; var tmp ; begin
4206: LD_INT 0
4208: PPUSH
4209: PPUSH
// if Difficulty = 1 then
4210: LD_OWVAR 67
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: IFFALSE 4236
// begin RuSoldMinLevel = 0 ;
4220: LD_ADDR_EXP 16
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4228: LD_ADDR_EXP 17
4232: PUSH
4233: LD_INT 2
4235: ST_TO_ADDR
// end ; if Difficulty = 2 then
4236: LD_OWVAR 67
4240: PUSH
4241: LD_INT 2
4243: EQUAL
4244: IFFALSE 4352
// begin RuSoldMinLevel = 1 ;
4246: LD_ADDR_EXP 16
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4254: LD_ADDR_EXP 17
4258: PUSH
4259: LD_INT 2
4261: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4262: LD_INT 14
4264: PPUSH
4265: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4269: LD_INT 23
4271: PPUSH
4272: CALL_OW 64
// uc_nation = 3 ;
4276: LD_ADDR_OWVAR 21
4280: PUSH
4281: LD_INT 3
4283: ST_TO_ADDR
// uc_side = 3 ;
4284: LD_ADDR_OWVAR 20
4288: PUSH
4289: LD_INT 3
4291: ST_TO_ADDR
// bc_level = 5 ;
4292: LD_ADDR_OWVAR 43
4296: PUSH
4297: LD_INT 5
4299: ST_TO_ADDR
// bc_type = 32 ;
4300: LD_ADDR_OWVAR 42
4304: PUSH
4305: LD_INT 32
4307: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4308: LD_ADDR_VAR 0 2
4312: PUSH
4313: LD_INT 76
4315: PPUSH
4316: LD_INT 91
4318: PPUSH
4319: LD_INT 2
4321: PPUSH
4322: CALL_OW 47
4326: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4327: LD_VAR 0 2
4331: PPUSH
4332: LD_INT 43
4334: PPUSH
4335: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4339: LD_INT 51
4341: PPUSH
4342: LD_INT 3
4344: PPUSH
4345: LD_INT 1
4347: PPUSH
4348: CALL_OW 322
// end ; if Difficulty = 3 then
4352: LD_OWVAR 67
4356: PUSH
4357: LD_INT 3
4359: EQUAL
4360: IFFALSE 4536
// begin RuSoldMinLevel = 1 ;
4362: LD_ADDR_EXP 16
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4370: LD_ADDR_EXP 17
4374: PUSH
4375: LD_INT 3
4377: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4378: LD_INT 13
4380: PPUSH
4381: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4385: LD_INT 14
4387: PPUSH
4388: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4392: LD_INT 26
4394: PPUSH
4395: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4399: LD_INT 23
4401: PPUSH
4402: CALL_OW 64
// uc_nation = 3 ;
4406: LD_ADDR_OWVAR 21
4410: PUSH
4411: LD_INT 3
4413: ST_TO_ADDR
// uc_side = 3 ;
4414: LD_ADDR_OWVAR 20
4418: PUSH
4419: LD_INT 3
4421: ST_TO_ADDR
// bc_level = 5 ;
4422: LD_ADDR_OWVAR 43
4426: PUSH
4427: LD_INT 5
4429: ST_TO_ADDR
// bc_type = 32 ;
4430: LD_ADDR_OWVAR 42
4434: PUSH
4435: LD_INT 32
4437: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: LD_INT 76
4445: PPUSH
4446: LD_INT 91
4448: PPUSH
4449: LD_INT 2
4451: PPUSH
4452: CALL_OW 47
4456: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4457: LD_VAR 0 2
4461: PPUSH
4462: LD_INT 44
4464: PPUSH
4465: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4469: LD_ADDR_VAR 0 2
4473: PUSH
4474: LD_INT 83
4476: PPUSH
4477: LD_INT 84
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: CALL_OW 47
4487: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 43
4495: PPUSH
4496: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4500: LD_INT 51
4502: PPUSH
4503: LD_INT 3
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4513: LD_INT 52
4515: PPUSH
4516: LD_INT 3
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4526: LD_INT 25
4528: PPUSH
4529: LD_INT 44
4531: PPUSH
4532: CALL_OW 431
// end ; end ;
4536: LD_VAR 0 1
4540: RET
// export function EnergyDialog ; begin
4541: LD_INT 0
4543: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4544: LD_INT 46
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: CALL_OW 321
4554: PUSH
4555: LD_INT 1
4557: EQUAL
4558: PUSH
4559: LD_INT 35
4561: PPUSH
4562: LD_INT 1
4564: PPUSH
4565: CALL_OW 321
4569: PUSH
4570: LD_INT 1
4572: EQUAL
4573: AND
4574: IFFALSE 4598
// begin Say ( JMM , D9c-JMM-1 ) ;
4576: LD_EXP 1
4580: PPUSH
4581: LD_STRING D9c-JMM-1
4583: PPUSH
4584: CALL_OW 88
// energyVDialog = 1 ;
4588: LD_ADDR_EXP 33
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// end else
4596: GO 4752
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4598: LD_INT 35
4600: PPUSH
4601: LD_INT 1
4603: PPUSH
4604: CALL_OW 321
4608: PUSH
4609: LD_INT 2
4611: EQUAL
4612: PUSH
4613: LD_EXP 33
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: AND
4622: IFFALSE 4644
// begin Say ( JMM , D9c-JMM-1a ) ;
4624: LD_EXP 1
4628: PPUSH
4629: LD_STRING D9c-JMM-1a
4631: PPUSH
4632: CALL_OW 88
// energyVDialog = 1 ;
4636: LD_ADDR_EXP 33
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4644: LD_INT 46
4646: PPUSH
4647: LD_INT 1
4649: PPUSH
4650: CALL_OW 321
4654: PUSH
4655: LD_INT 2
4657: EQUAL
4658: PUSH
4659: LD_EXP 33
4663: PUSH
4664: LD_INT 0
4666: EQUAL
4667: AND
4668: IFFALSE 4690
// begin Say ( JMM , D9c-JMM-1b ) ;
4670: LD_EXP 1
4674: PPUSH
4675: LD_STRING D9c-JMM-1b
4677: PPUSH
4678: CALL_OW 88
// energyVDialog = 1 ;
4682: LD_ADDR_EXP 33
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4690: LD_INT 46
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 321
4700: PUSH
4701: LD_INT 2
4703: EQUAL
4704: PUSH
4705: LD_INT 21
4707: PPUSH
4708: LD_INT 1
4710: PPUSH
4711: CALL_OW 321
4715: PUSH
4716: LD_INT 2
4718: EQUAL
4719: AND
4720: PUSH
4721: LD_EXP 33
4725: PUSH
4726: LD_INT 0
4728: EQUAL
4729: AND
4730: IFFALSE 4752
// begin Say ( JMM , D9c-JMM-1c ) ;
4732: LD_EXP 1
4736: PPUSH
4737: LD_STRING D9c-JMM-1c
4739: PPUSH
4740: CALL_OW 88
// energyVDialog = 1 ;
4744: LD_ADDR_EXP 33
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// end ; end ; end ;
4752: LD_VAR 0 1
4756: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4757: LD_INT 0
4759: PPUSH
4760: PPUSH
4761: PPUSH
4762: PPUSH
4763: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4764: LD_VAR 0 1
4768: NOT
4769: PUSH
4770: LD_VAR 0 1
4774: PPUSH
4775: CALL_OW 256
4779: PUSH
4780: LD_INT 250
4782: LESS
4783: OR
4784: PUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: CALL_OW 314
4794: PUSH
4795: LD_VAR 0 1
4799: PPUSH
4800: CALL_OW 261
4804: PUSH
4805: LD_INT 20
4807: GREATER
4808: AND
4809: OR
4810: IFFALSE 4814
// exit ;
4812: GO 5179
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4814: LD_VAR 0 1
4818: PPUSH
4819: CALL_OW 261
4823: PUSH
4824: LD_INT 20
4826: LESS
4827: PUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: CALL_OW 110
4837: PUSH
4838: LD_INT 21
4840: EQUAL
4841: NOT
4842: AND
4843: IFFALSE 4870
// begin ComStop ( bulldozer ) ;
4845: LD_VAR 0 1
4849: PPUSH
4850: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4854: LD_VAR 0 1
4858: PPUSH
4859: LD_INT 21
4861: PPUSH
4862: CALL_OW 109
// exit ;
4866: GO 5179
// end else
4868: GO 4897
// if GetFuel ( bulldozer ) > 20 then
4870: LD_VAR 0 1
4874: PPUSH
4875: CALL_OW 261
4879: PUSH
4880: LD_INT 20
4882: GREATER
4883: IFFALSE 4897
// SetTag ( bulldozer , 0 ) ;
4885: LD_VAR 0 1
4889: PPUSH
4890: LD_INT 0
4892: PPUSH
4893: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4897: LD_ADDR_VAR 0 5
4901: PUSH
4902: LD_VAR 0 2
4906: PPUSH
4907: CALL_OW 353
4911: ST_TO_ADDR
// tmp := [ ] ;
4912: LD_ADDR_VAR 0 6
4916: PUSH
4917: EMPTY
4918: ST_TO_ADDR
// for i = 1 to list do
4919: LD_ADDR_VAR 0 4
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_VAR 0 5
4933: PUSH
4934: FOR_TO
4935: IFFALSE 5033
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4937: LD_VAR 0 5
4941: PUSH
4942: LD_VAR 0 4
4946: ARRAY
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: LD_VAR 0 5
4956: PUSH
4957: LD_VAR 0 4
4961: ARRAY
4962: PUSH
4963: LD_INT 2
4965: ARRAY
4966: PPUSH
4967: CALL_OW 554
4971: IFFALSE 5031
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_VAR 0 6
4982: PPUSH
4983: LD_VAR 0 6
4987: PUSH
4988: LD_INT 1
4990: PLUS
4991: PPUSH
4992: LD_VAR 0 5
4996: PUSH
4997: LD_VAR 0 4
5001: ARRAY
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_VAR 0 5
5011: PUSH
5012: LD_VAR 0 4
5016: ARRAY
5017: PUSH
5018: LD_INT 2
5020: ARRAY
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 1
5030: ST_TO_ADDR
// end ;
5031: GO 4934
5033: POP
5034: POP
// ComStop ( bulldozer ) ;
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5044: LD_ADDR_VAR 0 7
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 250
5058: PUSH
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 251
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// for i = tmp downto 1 do
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: DOUBLE
5079: LD_VAR 0 6
5083: INC
5084: ST_TO_ADDR
5085: LD_INT 1
5087: PUSH
5088: FOR_DOWNTO
5089: IFFALSE 5177
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5091: LD_ADDR_VAR 0 7
5095: PUSH
5096: LD_VAR 0 7
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: LD_VAR 0 7
5109: PUSH
5110: LD_INT 2
5112: ARRAY
5113: PPUSH
5114: LD_VAR 0 6
5118: PPUSH
5119: CALL 5280 0 3
5123: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5124: LD_VAR 0 1
5128: PPUSH
5129: LD_VAR 0 7
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: CALL 5184 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5151: LD_ADDR_VAR 0 6
5155: PUSH
5156: LD_VAR 0 6
5160: PPUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_INT 3
5168: ARRAY
5169: PPUSH
5170: CALL_OW 3
5174: ST_TO_ADDR
// end ;
5175: GO 5088
5177: POP
5178: POP
// end ;
5179: LD_VAR 0 3
5183: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5184: LD_INT 0
5186: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_VAR 0 3
5196: PPUSH
5197: CALL_OW 351
5201: PUSH
5202: LD_VAR 0 2
5206: PPUSH
5207: LD_VAR 0 3
5211: PPUSH
5212: CALL_OW 554
5216: AND
5217: PUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 3
5227: PPUSH
5228: CALL_OW 488
5232: AND
5233: PUSH
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_VAR 0 3
5243: PPUSH
5244: CALL_OW 428
5248: PUSH
5249: LD_INT 1
5251: NEG
5252: EQUAL
5253: AND
5254: IFFALSE 5275
// AddComMoveXY ( bulldozer , x , y ) ;
5256: LD_VAR 0 1
5260: PPUSH
5261: LD_VAR 0 2
5265: PPUSH
5266: LD_VAR 0 3
5270: PPUSH
5271: CALL_OW 171
// end ;
5275: LD_VAR 0 4
5279: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
5288: PPUSH
// dist := 99999 ;
5289: LD_ADDR_VAR 0 6
5293: PUSH
5294: LD_INT 99999
5296: ST_TO_ADDR
// for i = 1 to list do
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: DOUBLE
5303: LD_INT 1
5305: DEC
5306: ST_TO_ADDR
5307: LD_VAR 0 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5451
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5315: LD_ADDR_VAR 0 7
5319: PUSH
5320: LD_VAR 0 1
5324: PPUSH
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PUSH
5341: LD_INT 1
5343: ARRAY
5344: PPUSH
5345: LD_VAR 0 3
5349: PUSH
5350: LD_VAR 0 5
5354: ARRAY
5355: PUSH
5356: LD_INT 2
5358: ARRAY
5359: PPUSH
5360: CALL_OW 298
5364: ST_TO_ADDR
// if d = 0 then
5365: LD_VAR 0 7
5369: PUSH
5370: LD_INT 0
5372: EQUAL
5373: IFFALSE 5377
// continue ;
5375: GO 5312
// if d < dist then
5377: LD_VAR 0 7
5381: PUSH
5382: LD_VAR 0 6
5386: LESS
5387: IFFALSE 5449
// begin _x := list [ i ] [ 1 ] ;
5389: LD_ADDR_VAR 0 8
5393: PUSH
5394: LD_VAR 0 3
5398: PUSH
5399: LD_VAR 0 5
5403: ARRAY
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5409: LD_ADDR_VAR 0 9
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: LD_VAR 0 5
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: ST_TO_ADDR
// _i := i ;
5429: LD_ADDR_VAR 0 10
5433: PUSH
5434: LD_VAR 0 5
5438: ST_TO_ADDR
// dist := d ;
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_VAR 0 7
5448: ST_TO_ADDR
// end ; end ;
5449: GO 5312
5451: POP
5452: POP
// result := [ _x , _y , _i , dist ] ;
5453: LD_ADDR_VAR 0 4
5457: PUSH
5458: LD_VAR 0 8
5462: PUSH
5463: LD_VAR 0 9
5467: PUSH
5468: LD_VAR 0 10
5472: PUSH
5473: LD_VAR 0 6
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: ST_TO_ADDR
// end ;
5484: LD_VAR 0 4
5488: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5489: LD_INT 0
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
// for i = 1 to 72 do
5495: LD_ADDR_VAR 0 5
5499: PUSH
5500: DOUBLE
5501: LD_INT 1
5503: DEC
5504: ST_TO_ADDR
5505: LD_INT 72
5507: PUSH
5508: FOR_TO
5509: IFFALSE 5567
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5511: LD_VAR 0 5
5515: PPUSH
5516: LD_VAR 0 1
5520: PPUSH
5521: CALL_OW 321
5525: PUSH
5526: LD_INT 1
5528: EQUAL
5529: PUSH
5530: LD_VAR 0 5
5534: PPUSH
5535: LD_VAR 0 3
5539: PPUSH
5540: CALL_OW 482
5544: PUSH
5545: LD_INT 1
5547: EQUAL
5548: AND
5549: IFFALSE 5565
// AddComResearch ( lab , i ) ;
5551: LD_VAR 0 2
5555: PPUSH
5556: LD_VAR 0 5
5560: PPUSH
5561: CALL_OW 184
5565: GO 5508
5567: POP
5568: POP
// end ;
5569: LD_VAR 0 4
5573: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5574: LD_INT 0
5576: PPUSH
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Stolypin ] ;
5582: LD_ADDR_VAR 0 7
5586: PUSH
5587: LD_VAR 0 2
5591: PPUSH
5592: CALL_OW 313
5596: PUSH
5597: LD_EXP 15
5601: PUSH
5602: EMPTY
5603: LIST
5604: DIFF
5605: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5606: LD_ADDR_VAR 0 8
5610: PUSH
5611: LD_VAR 0 3
5615: PPUSH
5616: LD_INT 22
5618: PUSH
5619: LD_VAR 0 1
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 25
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: LD_INT 1000
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 70
5657: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5658: LD_ADDR_VAR 0 5
5662: PUSH
5663: LD_VAR 0 3
5667: PPUSH
5668: LD_INT 22
5670: PUSH
5671: LD_VAR 0 1
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: LD_INT 3
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 3
5692: PUSH
5693: LD_INT 24
5695: PUSH
5696: LD_INT 1000
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: PPUSH
5715: CALL_OW 70
5719: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
5720: LD_VAR 0 5
5724: NOT
5725: PUSH
5726: LD_VAR 0 8
5730: NOT
5731: AND
5732: IFFALSE 5736
// exit ;
5734: GO 5895
// if buildings_list > 0 and engineerOkInside > 0 then
5736: LD_VAR 0 5
5740: PUSH
5741: LD_INT 0
5743: GREATER
5744: PUSH
5745: LD_VAR 0 7
5749: PUSH
5750: LD_INT 0
5752: GREATER
5753: AND
5754: IFFALSE 5782
// for i in engineerOkInside do
5756: LD_ADDR_VAR 0 6
5760: PUSH
5761: LD_VAR 0 7
5765: PUSH
5766: FOR_IN
5767: IFFALSE 5780
// ComExitBuilding ( i ) ;
5769: LD_VAR 0 6
5773: PPUSH
5774: CALL_OW 122
5778: GO 5766
5780: POP
5781: POP
// if engineerOkOutside > 0 then
5782: LD_VAR 0 8
5786: PUSH
5787: LD_INT 0
5789: GREATER
5790: IFFALSE 5844
// begin for i in engineerOkOutside do
5792: LD_ADDR_VAR 0 6
5796: PUSH
5797: LD_VAR 0 8
5801: PUSH
5802: FOR_IN
5803: IFFALSE 5842
// for j in buildings_list do
5805: LD_ADDR_VAR 0 9
5809: PUSH
5810: LD_VAR 0 5
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5838
// ComRepairBuilding ( i , j [ 1 ] ) ;
5818: LD_VAR 0 6
5822: PPUSH
5823: LD_VAR 0 9
5827: PUSH
5828: LD_INT 1
5830: ARRAY
5831: PPUSH
5832: CALL_OW 130
5836: GO 5815
5838: POP
5839: POP
5840: GO 5802
5842: POP
5843: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
5844: LD_VAR 0 5
5848: PUSH
5849: LD_INT 0
5851: EQUAL
5852: PUSH
5853: LD_VAR 0 8
5857: PUSH
5858: LD_INT 0
5860: GREATER
5861: AND
5862: IFFALSE 5895
// for i in engineerOkOutside do
5864: LD_ADDR_VAR 0 6
5868: PUSH
5869: LD_VAR 0 8
5873: PUSH
5874: FOR_IN
5875: IFFALSE 5893
// ComEnterUnit ( i , building ) ;
5877: LD_VAR 0 6
5881: PPUSH
5882: LD_VAR 0 2
5886: PPUSH
5887: CALL_OW 120
5891: GO 5874
5893: POP
5894: POP
// end ;
5895: LD_VAR 0 4
5899: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal ; begin
5900: LD_INT 0
5902: PPUSH
5903: PPUSH
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: LD_INT 22
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 25
5928: PUSH
5929: LD_INT 4
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 24
5938: PUSH
5939: LD_INT 251
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
5956: LD_ADDR_VAR 0 7
5960: PUSH
5961: LD_VAR 0 3
5965: PPUSH
5966: LD_INT 22
5968: PUSH
5969: LD_VAR 0 1
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 25
5980: PUSH
5981: LD_INT 4
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 50
5990: PUSH
5991: EMPTY
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 70
6003: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6004: LD_ADDR_VAR 0 10
6008: PUSH
6009: LD_VAR 0 3
6013: PPUSH
6014: LD_INT 22
6016: PUSH
6017: LD_VAR 0 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 1
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: LD_INT 24
6041: PUSH
6042: LD_INT 750
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: LIST
6057: PPUSH
6058: CALL_OW 70
6062: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6063: LD_ADDR_VAR 0 11
6067: PUSH
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 22
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 21
6087: PUSH
6088: LD_INT 1
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: LD_INT 24
6100: PUSH
6101: LD_INT 1000
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: PPUSH
6117: CALL_OW 70
6121: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
6122: LD_VAR 0 10
6126: NOT
6127: PUSH
6128: LD_VAR 0 7
6132: NOT
6133: AND
6134: PUSH
6135: LD_VAR 0 11
6139: NOT
6140: AND
6141: IFFALSE 6145
// exit ;
6143: GO 6334
// if damageUnits > 0 and sci_list > 0 then
6145: LD_VAR 0 10
6149: PUSH
6150: LD_INT 0
6152: GREATER
6153: PUSH
6154: LD_VAR 0 6
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: AND
6163: IFFALSE 6196
// for i in damageUnits do
6165: LD_ADDR_VAR 0 8
6169: PUSH
6170: LD_VAR 0 10
6174: PUSH
6175: FOR_IN
6176: IFFALSE 6194
// ComMoveToArea ( i , healArea ) ;
6178: LD_VAR 0 8
6182: PPUSH
6183: LD_VAR 0 2
6187: PPUSH
6188: CALL_OW 113
6192: GO 6175
6194: POP
6195: POP
// if unitsToHeal > 0 and sci_list > 0 then
6196: LD_VAR 0 11
6200: PUSH
6201: LD_INT 0
6203: GREATER
6204: PUSH
6205: LD_VAR 0 6
6209: PUSH
6210: LD_INT 0
6212: GREATER
6213: AND
6214: IFFALSE 6273
// begin for i in sci_list do
6216: LD_ADDR_VAR 0 8
6220: PUSH
6221: LD_VAR 0 6
6225: PUSH
6226: FOR_IN
6227: IFFALSE 6271
// begin ComExitBuilding ( i ) ;
6229: LD_VAR 0 8
6233: PPUSH
6234: CALL_OW 122
// for j in unitsToHeal do
6238: LD_ADDR_VAR 0 9
6242: PUSH
6243: LD_VAR 0 11
6247: PUSH
6248: FOR_IN
6249: IFFALSE 6267
// AddComHeal ( i , j ) ;
6251: LD_VAR 0 8
6255: PPUSH
6256: LD_VAR 0 9
6260: PPUSH
6261: CALL_OW 188
6265: GO 6248
6267: POP
6268: POP
// end ;
6269: GO 6226
6271: POP
6272: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6273: LD_VAR 0 10
6277: PUSH
6278: LD_INT 0
6280: EQUAL
6281: PUSH
6282: LD_VAR 0 11
6286: PUSH
6287: LD_INT 0
6289: EQUAL
6290: AND
6291: PUSH
6292: LD_VAR 0 7
6296: PUSH
6297: LD_INT 0
6299: GREATER
6300: AND
6301: IFFALSE 6334
// for i in sci_listOutside do
6303: LD_ADDR_VAR 0 8
6307: PUSH
6308: LD_VAR 0 7
6312: PUSH
6313: FOR_IN
6314: IFFALSE 6332
// ComEnterUnit ( i , build ) ;
6316: LD_VAR 0 8
6320: PPUSH
6321: LD_VAR 0 4
6325: PPUSH
6326: CALL_OW 120
6330: GO 6313
6332: POP
6333: POP
// end ;
6334: LD_VAR 0 5
6338: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6339: LD_INT 0
6341: PPUSH
6342: PPUSH
6343: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6344: LD_INT 22
6346: PUSH
6347: LD_VAR 0 1
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 21
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PPUSH
6370: CALL_OW 69
6374: PUSH
6375: LD_VAR 0 3
6379: LESSEQUAL
6380: IFFALSE 6488
// begin for i = 1 to vehCount do
6382: LD_ADDR_VAR 0 9
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_VAR 0 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6486
// begin weapon = weaponTab [ i ] ;
6400: LD_ADDR_VAR 0 10
6404: PUSH
6405: LD_VAR 0 4
6409: PUSH
6410: LD_VAR 0 9
6414: ARRAY
6415: ST_TO_ADDR
// if weapon = 46 then
6416: LD_VAR 0 10
6420: PUSH
6421: LD_INT 46
6423: EQUAL
6424: IFFALSE 6455
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6426: LD_VAR 0 2
6430: PPUSH
6431: LD_INT 24
6433: PPUSH
6434: LD_VAR 0 5
6438: PPUSH
6439: LD_VAR 0 6
6443: PPUSH
6444: LD_VAR 0 10
6448: PPUSH
6449: CALL_OW 185
// end else
6453: GO 6484
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6455: LD_VAR 0 2
6459: PPUSH
6460: LD_VAR 0 7
6464: PPUSH
6465: LD_VAR 0 5
6469: PPUSH
6470: LD_VAR 0 6
6474: PPUSH
6475: LD_VAR 0 10
6479: PPUSH
6480: CALL_OW 185
// end ; end ;
6484: GO 6397
6486: POP
6487: POP
// end ; end ;
6488: LD_VAR 0 8
6492: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6493: LD_INT 0
6495: PPUSH
6496: PPUSH
6497: PPUSH
6498: PPUSH
6499: PPUSH
// for i := 1 to russianTanks do
6500: LD_ADDR_VAR 0 4
6504: PUSH
6505: DOUBLE
6506: LD_INT 1
6508: DEC
6509: ST_TO_ADDR
6510: LD_EXP 18
6514: PUSH
6515: FOR_TO
6516: IFFALSE 6861
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6518: LD_VAR 0 4
6522: PUSH
6523: LD_INT 5
6525: PUSH
6526: LD_INT 6
6528: PUSH
6529: LD_INT 6
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: LD_OWVAR 67
6541: ARRAY
6542: EQUAL
6543: IFFALSE 6859
// begin repeat wait ( 0 0$1 ) ;
6545: LD_INT 35
6547: PPUSH
6548: CALL_OW 67
// for i in russianTanks do
6552: LD_ADDR_VAR 0 4
6556: PUSH
6557: LD_EXP 18
6561: PUSH
6562: FOR_IN
6563: IFFALSE 6847
// begin if GetLives ( i ) < 659 then
6565: LD_VAR 0 4
6569: PPUSH
6570: CALL_OW 256
6574: PUSH
6575: LD_INT 659
6577: LESS
6578: IFFALSE 6666
// begin tmp = i ;
6580: LD_ADDR_VAR 0 5
6584: PUSH
6585: LD_VAR 0 4
6589: ST_TO_ADDR
// for i := 1 to russianTanks do
6590: LD_ADDR_VAR 0 4
6594: PUSH
6595: DOUBLE
6596: LD_INT 1
6598: DEC
6599: ST_TO_ADDR
6600: LD_EXP 18
6604: PUSH
6605: FOR_TO
6606: IFFALSE 6664
// begin if tmp = russianTanks [ i ] then
6608: LD_VAR 0 5
6612: PUSH
6613: LD_EXP 18
6617: PUSH
6618: LD_VAR 0 4
6622: ARRAY
6623: EQUAL
6624: IFFALSE 6662
// begin russianTanks = Delete ( russianTanks , i ) ;
6626: LD_ADDR_EXP 18
6630: PUSH
6631: LD_EXP 18
6635: PPUSH
6636: LD_VAR 0 4
6640: PPUSH
6641: CALL_OW 3
6645: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6646: LD_ADDR_EXP 19
6650: PUSH
6651: LD_EXP 19
6655: PUSH
6656: LD_VAR 0 5
6660: ADD
6661: ST_TO_ADDR
// end ; end ;
6662: GO 6605
6664: POP
6665: POP
// end ; wait ( 0 0$1 ) ;
6666: LD_INT 35
6668: PPUSH
6669: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6673: LD_ADDR_VAR 0 6
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_VAR 0 2
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PPUSH
6690: CALL_OW 69
6694: PPUSH
6695: LD_VAR 0 4
6699: PPUSH
6700: CALL_OW 74
6704: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6705: LD_ADDR_VAR 0 7
6709: PUSH
6710: LD_INT 22
6712: PUSH
6713: LD_VAR 0 2
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: LD_INT 59
6727: PUSH
6728: EMPTY
6729: LIST
6730: PUSH
6731: LD_INT 21
6733: PUSH
6734: LD_INT 1
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 21
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: PPUSH
6764: CALL_OW 69
6768: PPUSH
6769: LD_VAR 0 4
6773: PPUSH
6774: CALL_OW 74
6778: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6779: LD_VAR 0 4
6783: PPUSH
6784: LD_VAR 0 6
6788: PPUSH
6789: CALL_OW 296
6793: PUSH
6794: LD_INT 8
6796: PLUS
6797: PUSH
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 7
6807: PPUSH
6808: CALL_OW 296
6812: LESS
6813: IFFALSE 6831
// begin ComAttackUnit ( i , target1 ) ;
6815: LD_VAR 0 4
6819: PPUSH
6820: LD_VAR 0 6
6824: PPUSH
6825: CALL_OW 115
// end else
6829: GO 6845
// begin ComAttackUnit ( i , target2 ) ;
6831: LD_VAR 0 4
6835: PPUSH
6836: LD_VAR 0 7
6840: PPUSH
6841: CALL_OW 115
// end ; end ;
6845: GO 6562
6847: POP
6848: POP
// until russianTanks = 0 ;
6849: LD_EXP 18
6853: PUSH
6854: LD_INT 0
6856: EQUAL
6857: IFFALSE 6545
// end ; end ;
6859: GO 6515
6861: POP
6862: POP
// end ;
6863: LD_VAR 0 3
6867: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6868: LD_INT 0
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
// for i = 1 to medicCount do
6881: LD_ADDR_VAR 0 14
6885: PUSH
6886: DOUBLE
6887: LD_INT 1
6889: DEC
6890: ST_TO_ADDR
6891: LD_VAR 0 7
6895: PUSH
6896: FOR_TO
6897: IFFALSE 6979
// begin uc_side = side ;
6899: LD_ADDR_OWVAR 20
6903: PUSH
6904: LD_VAR 0 1
6908: ST_TO_ADDR
// uc_nation = nation ;
6909: LD_ADDR_OWVAR 21
6913: PUSH
6914: LD_VAR 0 2
6918: ST_TO_ADDR
// hc_name =  ;
6919: LD_ADDR_OWVAR 26
6923: PUSH
6924: LD_STRING 
6926: ST_TO_ADDR
// hc_gallery =  ;
6927: LD_ADDR_OWVAR 33
6931: PUSH
6932: LD_STRING 
6934: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6935: LD_INT 0
6937: PPUSH
6938: LD_INT 4
6940: PPUSH
6941: LD_VAR 0 8
6945: PPUSH
6946: CALL_OW 380
// un = CreateHuman ;
6950: LD_ADDR_VAR 0 16
6954: PUSH
6955: CALL_OW 44
6959: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6960: LD_VAR 0 16
6964: PPUSH
6965: LD_VAR 0 9
6969: PPUSH
6970: LD_INT 0
6972: PPUSH
6973: CALL_OW 49
// end ;
6977: GO 6896
6979: POP
6980: POP
// for i = 1 to soldierCount do
6981: LD_ADDR_VAR 0 14
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_VAR 0 3
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7079
// begin uc_side = side ;
6999: LD_ADDR_OWVAR 20
7003: PUSH
7004: LD_VAR 0 1
7008: ST_TO_ADDR
// uc_nation = nation ;
7009: LD_ADDR_OWVAR 21
7013: PUSH
7014: LD_VAR 0 2
7018: ST_TO_ADDR
// hc_name =  ;
7019: LD_ADDR_OWVAR 26
7023: PUSH
7024: LD_STRING 
7026: ST_TO_ADDR
// hc_gallery =  ;
7027: LD_ADDR_OWVAR 33
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7035: LD_INT 0
7037: PPUSH
7038: LD_INT 1
7040: PPUSH
7041: LD_VAR 0 8
7045: PPUSH
7046: CALL_OW 380
// un = CreateHuman ;
7050: LD_ADDR_VAR 0 16
7054: PUSH
7055: CALL_OW 44
7059: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7060: LD_VAR 0 16
7064: PPUSH
7065: LD_VAR 0 9
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL_OW 49
// end ;
7077: GO 6996
7079: POP
7080: POP
// for i = 1 to sniperCount do
7081: LD_ADDR_VAR 0 14
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_VAR 0 4
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7179
// begin uc_side = side ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_VAR 0 1
7108: ST_TO_ADDR
// uc_nation = nation ;
7109: LD_ADDR_OWVAR 21
7113: PUSH
7114: LD_VAR 0 2
7118: ST_TO_ADDR
// hc_name =  ;
7119: LD_ADDR_OWVAR 26
7123: PUSH
7124: LD_STRING 
7126: ST_TO_ADDR
// hc_gallery =  ;
7127: LD_ADDR_OWVAR 33
7131: PUSH
7132: LD_STRING 
7134: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7135: LD_INT 0
7137: PPUSH
7138: LD_INT 5
7140: PPUSH
7141: LD_VAR 0 8
7145: PPUSH
7146: CALL_OW 380
// un = CreateHuman ;
7150: LD_ADDR_VAR 0 16
7154: PUSH
7155: CALL_OW 44
7159: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7160: LD_VAR 0 16
7164: PPUSH
7165: LD_VAR 0 9
7169: PPUSH
7170: LD_INT 0
7172: PPUSH
7173: CALL_OW 49
// end ;
7177: GO 7096
7179: POP
7180: POP
// for i = 1 to bazookCount do
7181: LD_ADDR_VAR 0 14
7185: PUSH
7186: DOUBLE
7187: LD_INT 1
7189: DEC
7190: ST_TO_ADDR
7191: LD_VAR 0 5
7195: PUSH
7196: FOR_TO
7197: IFFALSE 7279
// begin uc_side = side ;
7199: LD_ADDR_OWVAR 20
7203: PUSH
7204: LD_VAR 0 1
7208: ST_TO_ADDR
// uc_nation = nation ;
7209: LD_ADDR_OWVAR 21
7213: PUSH
7214: LD_VAR 0 2
7218: ST_TO_ADDR
// hc_name =  ;
7219: LD_ADDR_OWVAR 26
7223: PUSH
7224: LD_STRING 
7226: ST_TO_ADDR
// hc_gallery =  ;
7227: LD_ADDR_OWVAR 33
7231: PUSH
7232: LD_STRING 
7234: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7235: LD_INT 0
7237: PPUSH
7238: LD_INT 9
7240: PPUSH
7241: LD_VAR 0 8
7245: PPUSH
7246: CALL_OW 380
// un = CreateHuman ;
7250: LD_ADDR_VAR 0 16
7254: PUSH
7255: CALL_OW 44
7259: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7260: LD_VAR 0 16
7264: PPUSH
7265: LD_VAR 0 9
7269: PPUSH
7270: LD_INT 0
7272: PPUSH
7273: CALL_OW 49
// end ;
7277: GO 7196
7279: POP
7280: POP
// for i = 1 to mortalCount do
7281: LD_ADDR_VAR 0 14
7285: PUSH
7286: DOUBLE
7287: LD_INT 1
7289: DEC
7290: ST_TO_ADDR
7291: LD_VAR 0 6
7295: PUSH
7296: FOR_TO
7297: IFFALSE 7379
// begin uc_side = side ;
7299: LD_ADDR_OWVAR 20
7303: PUSH
7304: LD_VAR 0 1
7308: ST_TO_ADDR
// uc_nation = nation ;
7309: LD_ADDR_OWVAR 21
7313: PUSH
7314: LD_VAR 0 2
7318: ST_TO_ADDR
// hc_name =  ;
7319: LD_ADDR_OWVAR 26
7323: PUSH
7324: LD_STRING 
7326: ST_TO_ADDR
// hc_gallery =  ;
7327: LD_ADDR_OWVAR 33
7331: PUSH
7332: LD_STRING 
7334: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7335: LD_INT 0
7337: PPUSH
7338: LD_INT 8
7340: PPUSH
7341: LD_VAR 0 8
7345: PPUSH
7346: CALL_OW 380
// un = CreateHuman ;
7350: LD_ADDR_VAR 0 16
7354: PUSH
7355: CALL_OW 44
7359: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7360: LD_VAR 0 16
7364: PPUSH
7365: LD_VAR 0 9
7369: PPUSH
7370: LD_INT 0
7372: PPUSH
7373: CALL_OW 49
// end ;
7377: GO 7296
7379: POP
7380: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7381: LD_ADDR_VAR 0 19
7385: PUSH
7386: LD_INT 22
7388: PUSH
7389: LD_VAR 0 1
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 2
7400: PUSH
7401: LD_INT 25
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 5
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 25
7423: PUSH
7424: LD_INT 8
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 25
7433: PUSH
7434: LD_INT 9
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PPUSH
7452: CALL_OW 69
7456: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7457: LD_ADDR_VAR 0 18
7461: PUSH
7462: LD_INT 22
7464: PUSH
7465: LD_VAR 0 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 25
7476: PUSH
7477: LD_INT 4
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 69
7492: ST_TO_ADDR
// for i in medic_list do
7493: LD_ADDR_VAR 0 14
7497: PUSH
7498: LD_VAR 0 18
7502: PUSH
7503: FOR_IN
7504: IFFALSE 7522
// ComMoveToArea ( i , healArea ) ;
7506: LD_VAR 0 14
7510: PPUSH
7511: LD_VAR 0 10
7515: PPUSH
7516: CALL_OW 113
7520: GO 7503
7522: POP
7523: POP
// if strategy = 1 then
7524: LD_VAR 0 12
7528: PUSH
7529: LD_INT 1
7531: EQUAL
7532: IFFALSE 8267
// begin repeat wait ( 0 0$3 ) ;
7534: LD_INT 105
7536: PPUSH
7537: CALL_OW 67
// for i in soldiersOK_list do
7541: LD_ADDR_VAR 0 14
7545: PUSH
7546: LD_VAR 0 19
7550: PUSH
7551: FOR_IN
7552: IFFALSE 7616
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7554: LD_VAR 0 14
7558: PPUSH
7559: LD_INT 91
7561: PPUSH
7562: LD_INT 63
7564: PPUSH
7565: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7569: LD_VAR 0 14
7573: PPUSH
7574: LD_INT 101
7576: PPUSH
7577: LD_INT 53
7579: PPUSH
7580: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7584: LD_VAR 0 14
7588: PPUSH
7589: LD_INT 75
7591: PPUSH
7592: LD_INT 23
7594: PPUSH
7595: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7599: LD_VAR 0 14
7603: PPUSH
7604: LD_INT 78
7606: PPUSH
7607: LD_INT 8
7609: PPUSH
7610: CALL_OW 174
// end ;
7614: GO 7551
7616: POP
7617: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
7618: LD_INT 15
7620: PPUSH
7621: LD_INT 22
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PPUSH
7633: CALL_OW 70
7637: PUSH
7638: LD_INT 2
7640: GREATER
7641: IFFALSE 7534
// repeat wait ( 0 0$1 ) ;
7643: LD_INT 35
7645: PPUSH
7646: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7650: LD_ADDR_VAR 0 17
7654: PUSH
7655: LD_INT 22
7657: PUSH
7658: LD_VAR 0 1
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: LD_INT 3
7672: PUSH
7673: LD_INT 24
7675: PUSH
7676: LD_INT 550
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 24
7689: PUSH
7690: LD_INT 250
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PPUSH
7706: CALL_OW 69
7710: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7711: LD_ADDR_VAR 0 19
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_VAR 0 1
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: LD_INT 25
7733: PUSH
7734: LD_INT 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 25
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 25
7753: PUSH
7754: LD_INT 8
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 25
7763: PUSH
7764: LD_INT 9
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 24
7780: PUSH
7781: LD_INT 1000
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: PPUSH
7793: CALL_OW 69
7797: ST_TO_ADDR
// if medicCount > 0 then
7798: LD_VAR 0 7
7802: PUSH
7803: LD_INT 0
7805: GREATER
7806: IFFALSE 7880
// begin if damageUnit_list > 0 then
7808: LD_VAR 0 17
7812: PUSH
7813: LD_INT 0
7815: GREATER
7816: IFFALSE 7880
// begin for i in damageUnit_list do
7818: LD_ADDR_VAR 0 14
7822: PUSH
7823: LD_VAR 0 17
7827: PUSH
7828: FOR_IN
7829: IFFALSE 7878
// begin ComMoveToArea ( i , healArea ) ;
7831: LD_VAR 0 14
7835: PPUSH
7836: LD_VAR 0 10
7840: PPUSH
7841: CALL_OW 113
// for j in medic_list do
7845: LD_ADDR_VAR 0 15
7849: PUSH
7850: LD_VAR 0 18
7854: PUSH
7855: FOR_IN
7856: IFFALSE 7874
// AddComHeal ( j , i ) ;
7858: LD_VAR 0 15
7862: PPUSH
7863: LD_VAR 0 14
7867: PPUSH
7868: CALL_OW 188
7872: GO 7855
7874: POP
7875: POP
// end ;
7876: GO 7828
7878: POP
7879: POP
// end ; end ; for i in soldiersOK_list do
7880: LD_ADDR_VAR 0 14
7884: PUSH
7885: LD_VAR 0 19
7889: PUSH
7890: FOR_IN
7891: IFFALSE 8067
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7893: LD_ADDR_VAR 0 22
7897: PUSH
7898: LD_INT 22
7900: PUSH
7901: LD_VAR 0 11
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PPUSH
7910: CALL_OW 69
7914: PPUSH
7915: LD_VAR 0 14
7919: PPUSH
7920: CALL_OW 74
7924: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7925: LD_ADDR_VAR 0 23
7929: PUSH
7930: LD_INT 22
7932: PUSH
7933: LD_VAR 0 11
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 2
7944: PUSH
7945: LD_INT 59
7947: PUSH
7948: EMPTY
7949: LIST
7950: PUSH
7951: LD_INT 21
7953: PUSH
7954: LD_INT 1
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 21
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 14
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7999: LD_VAR 0 14
8003: PPUSH
8004: LD_VAR 0 22
8008: PPUSH
8009: CALL_OW 296
8013: PUSH
8014: LD_INT 8
8016: PLUS
8017: PUSH
8018: LD_VAR 0 14
8022: PPUSH
8023: LD_VAR 0 23
8027: PPUSH
8028: CALL_OW 296
8032: LESS
8033: IFFALSE 8051
// begin ComAttackUnit ( i , target1 ) ;
8035: LD_VAR 0 14
8039: PPUSH
8040: LD_VAR 0 22
8044: PPUSH
8045: CALL_OW 115
// end else
8049: GO 8065
// begin ComAttackUnit ( i , target2 ) ;
8051: LD_VAR 0 14
8055: PPUSH
8056: LD_VAR 0 23
8060: PPUSH
8061: CALL_OW 115
// end ; end ;
8065: GO 7890
8067: POP
8068: POP
// for i in soldiersOK_list do
8069: LD_ADDR_VAR 0 14
8073: PUSH
8074: LD_VAR 0 19
8078: PUSH
8079: FOR_IN
8080: IFFALSE 8256
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8082: LD_ADDR_VAR 0 22
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_VAR 0 11
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 69
8103: PPUSH
8104: LD_VAR 0 14
8108: PPUSH
8109: CALL_OW 74
8113: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8114: LD_ADDR_VAR 0 23
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_VAR 0 11
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 2
8133: PUSH
8134: LD_INT 59
8136: PUSH
8137: EMPTY
8138: LIST
8139: PUSH
8140: LD_INT 21
8142: PUSH
8143: LD_INT 1
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: LD_INT 21
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: EMPTY
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: PPUSH
8178: LD_VAR 0 14
8182: PPUSH
8183: CALL_OW 74
8187: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8188: LD_VAR 0 14
8192: PPUSH
8193: LD_VAR 0 22
8197: PPUSH
8198: CALL_OW 296
8202: PUSH
8203: LD_INT 8
8205: PLUS
8206: PUSH
8207: LD_VAR 0 14
8211: PPUSH
8212: LD_VAR 0 23
8216: PPUSH
8217: CALL_OW 296
8221: LESS
8222: IFFALSE 8240
// begin ComAttackUnit ( i , target1 ) ;
8224: LD_VAR 0 14
8228: PPUSH
8229: LD_VAR 0 22
8233: PPUSH
8234: CALL_OW 115
// end else
8238: GO 8254
// begin ComAttackUnit ( i , target2 ) ;
8240: LD_VAR 0 14
8244: PPUSH
8245: LD_VAR 0 23
8249: PPUSH
8250: CALL_OW 115
// end ; end ;
8254: GO 8079
8256: POP
8257: POP
// until soldiersOK_list = [ ] ;
8258: LD_VAR 0 19
8262: PUSH
8263: EMPTY
8264: EQUAL
8265: IFFALSE 7643
// end ; if strategy = 2 then
8267: LD_VAR 0 12
8271: PUSH
8272: LD_INT 2
8274: EQUAL
8275: IFFALSE 8980
// begin repeat wait ( 0 0$1 ) ;
8277: LD_INT 35
8279: PPUSH
8280: CALL_OW 67
// for i in soldiersOK_list do
8284: LD_ADDR_VAR 0 14
8288: PUSH
8289: LD_VAR 0 19
8293: PUSH
8294: FOR_IN
8295: IFFALSE 8329
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8297: LD_VAR 0 14
8301: PPUSH
8302: LD_INT 91
8304: PPUSH
8305: LD_INT 63
8307: PPUSH
8308: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8312: LD_VAR 0 14
8316: PPUSH
8317: LD_INT 75
8319: PPUSH
8320: LD_INT 33
8322: PPUSH
8323: CALL_OW 174
// end ;
8327: GO 8294
8329: POP
8330: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8331: LD_INT 16
8333: PPUSH
8334: LD_INT 22
8336: PUSH
8337: LD_VAR 0 1
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PPUSH
8346: CALL_OW 70
8350: PUSH
8351: LD_INT 2
8353: GREATER
8354: IFFALSE 8277
// repeat wait ( 0 0$3 ) ;
8356: LD_INT 105
8358: PPUSH
8359: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8363: LD_ADDR_VAR 0 17
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_VAR 0 1
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 1
8382: PUSH
8383: LD_INT 3
8385: PUSH
8386: LD_INT 24
8388: PUSH
8389: LD_INT 550
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 24
8402: PUSH
8403: LD_INT 250
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 69
8423: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8424: LD_ADDR_VAR 0 19
8428: PUSH
8429: LD_INT 22
8431: PUSH
8432: LD_VAR 0 1
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 2
8443: PUSH
8444: LD_INT 25
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 5
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 8
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 25
8476: PUSH
8477: LD_INT 9
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 24
8493: PUSH
8494: LD_INT 1000
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: LIST
8505: PPUSH
8506: CALL_OW 69
8510: ST_TO_ADDR
// if medicCount > 0 then
8511: LD_VAR 0 7
8515: PUSH
8516: LD_INT 0
8518: GREATER
8519: IFFALSE 8593
// begin if damageUnit_list > 0 then
8521: LD_VAR 0 17
8525: PUSH
8526: LD_INT 0
8528: GREATER
8529: IFFALSE 8593
// begin for i in damageUnit_list do
8531: LD_ADDR_VAR 0 14
8535: PUSH
8536: LD_VAR 0 17
8540: PUSH
8541: FOR_IN
8542: IFFALSE 8591
// begin ComMoveToArea ( i , healArea ) ;
8544: LD_VAR 0 14
8548: PPUSH
8549: LD_VAR 0 10
8553: PPUSH
8554: CALL_OW 113
// for j in medic_list do
8558: LD_ADDR_VAR 0 15
8562: PUSH
8563: LD_VAR 0 18
8567: PUSH
8568: FOR_IN
8569: IFFALSE 8587
// AddComHeal ( j , i ) ;
8571: LD_VAR 0 15
8575: PPUSH
8576: LD_VAR 0 14
8580: PPUSH
8581: CALL_OW 188
8585: GO 8568
8587: POP
8588: POP
// end ;
8589: GO 8541
8591: POP
8592: POP
// end ; end ; for i in soldiersOK_list do
8593: LD_ADDR_VAR 0 14
8597: PUSH
8598: LD_VAR 0 19
8602: PUSH
8603: FOR_IN
8604: IFFALSE 8780
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8606: LD_ADDR_VAR 0 22
8610: PUSH
8611: LD_INT 22
8613: PUSH
8614: LD_VAR 0 11
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PPUSH
8623: CALL_OW 69
8627: PPUSH
8628: LD_VAR 0 14
8632: PPUSH
8633: CALL_OW 74
8637: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8638: LD_ADDR_VAR 0 23
8642: PUSH
8643: LD_INT 22
8645: PUSH
8646: LD_VAR 0 11
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: LD_INT 59
8660: PUSH
8661: EMPTY
8662: LIST
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: PPUSH
8697: CALL_OW 69
8701: PPUSH
8702: LD_VAR 0 14
8706: PPUSH
8707: CALL_OW 74
8711: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8712: LD_VAR 0 14
8716: PPUSH
8717: LD_VAR 0 22
8721: PPUSH
8722: CALL_OW 296
8726: PUSH
8727: LD_INT 8
8729: PLUS
8730: PUSH
8731: LD_VAR 0 14
8735: PPUSH
8736: LD_VAR 0 23
8740: PPUSH
8741: CALL_OW 296
8745: LESS
8746: IFFALSE 8764
// begin ComAttackUnit ( i , target1 ) ;
8748: LD_VAR 0 14
8752: PPUSH
8753: LD_VAR 0 22
8757: PPUSH
8758: CALL_OW 115
// end else
8762: GO 8778
// begin ComAttackUnit ( i , target2 ) ;
8764: LD_VAR 0 14
8768: PPUSH
8769: LD_VAR 0 23
8773: PPUSH
8774: CALL_OW 115
// end ; end ;
8778: GO 8603
8780: POP
8781: POP
// for i in soldiersOK_list do
8782: LD_ADDR_VAR 0 14
8786: PUSH
8787: LD_VAR 0 19
8791: PUSH
8792: FOR_IN
8793: IFFALSE 8969
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8795: LD_ADDR_VAR 0 22
8799: PUSH
8800: LD_INT 22
8802: PUSH
8803: LD_VAR 0 11
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PPUSH
8812: CALL_OW 69
8816: PPUSH
8817: LD_VAR 0 14
8821: PPUSH
8822: CALL_OW 74
8826: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8827: LD_ADDR_VAR 0 23
8831: PUSH
8832: LD_INT 22
8834: PUSH
8835: LD_VAR 0 11
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 2
8846: PUSH
8847: LD_INT 59
8849: PUSH
8850: EMPTY
8851: LIST
8852: PUSH
8853: LD_INT 21
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 21
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: PPUSH
8886: CALL_OW 69
8890: PPUSH
8891: LD_VAR 0 14
8895: PPUSH
8896: CALL_OW 74
8900: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8901: LD_VAR 0 14
8905: PPUSH
8906: LD_VAR 0 22
8910: PPUSH
8911: CALL_OW 296
8915: PUSH
8916: LD_INT 8
8918: PLUS
8919: PUSH
8920: LD_VAR 0 14
8924: PPUSH
8925: LD_VAR 0 23
8929: PPUSH
8930: CALL_OW 296
8934: LESS
8935: IFFALSE 8953
// begin ComAttackUnit ( i , target1 ) ;
8937: LD_VAR 0 14
8941: PPUSH
8942: LD_VAR 0 22
8946: PPUSH
8947: CALL_OW 115
// end else
8951: GO 8967
// begin ComAttackUnit ( i , target2 ) ;
8953: LD_VAR 0 14
8957: PPUSH
8958: LD_VAR 0 23
8962: PPUSH
8963: CALL_OW 115
// end ; end ;
8967: GO 8792
8969: POP
8970: POP
// until soldiersOK_list = [ ] ;
8971: LD_VAR 0 19
8975: PUSH
8976: EMPTY
8977: EQUAL
8978: IFFALSE 8356
// end ; end ;
8980: LD_VAR 0 13
8984: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
8989: PPUSH
8990: PPUSH
8991: PPUSH
8992: PPUSH
8993: PPUSH
8994: PPUSH
8995: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8996: LD_ADDR_VAR 0 8
9000: PUSH
9001: LD_INT 22
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 21
9015: PUSH
9016: LD_INT 2
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 24
9025: PUSH
9026: LD_INT 660
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: LD_INT 58
9038: PUSH
9039: EMPTY
9040: LIST
9041: PUSH
9042: LD_INT 2
9044: PUSH
9045: LD_INT 34
9047: PUSH
9048: LD_INT 43
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: LD_INT 34
9057: PUSH
9058: LD_INT 44
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 34
9067: PUSH
9068: LD_INT 46
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
9097: LD_ADDR_VAR 0 9
9101: PUSH
9102: LD_INT 22
9104: PUSH
9105: LD_VAR 0 1
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 21
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: LD_INT 24
9129: PUSH
9130: LD_INT 660
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 69
9150: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9151: LD_ADDR_VAR 0 10
9155: PUSH
9156: LD_VAR 0 2
9160: PPUSH
9161: LD_INT 22
9163: PUSH
9164: LD_VAR 0 1
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 21
9175: PUSH
9176: LD_INT 2
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_INT 3
9185: PUSH
9186: LD_INT 24
9188: PUSH
9189: LD_INT 1000
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: PPUSH
9205: CALL_OW 70
9209: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9210: LD_ADDR_VAR 0 11
9214: PUSH
9215: LD_VAR 0 2
9219: PPUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 58
9254: PUSH
9255: EMPTY
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: PPUSH
9264: CALL_OW 70
9268: ST_TO_ADDR
// mechanicInside_list = [ ] ;
9269: LD_ADDR_VAR 0 12
9273: PUSH
9274: EMPTY
9275: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9276: LD_ADDR_VAR 0 13
9280: PUSH
9281: LD_VAR 0 2
9285: PPUSH
9286: LD_INT 22
9288: PUSH
9289: LD_VAR 0 1
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 25
9300: PUSH
9301: LD_INT 3
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 70
9316: ST_TO_ADDR
// if damageVehicle_list = 0 and vehicleOK_list = 0 then
9317: LD_VAR 0 9
9321: PUSH
9322: LD_INT 0
9324: EQUAL
9325: PUSH
9326: LD_VAR 0 8
9330: PUSH
9331: LD_INT 0
9333: EQUAL
9334: AND
9335: IFFALSE 9339
// exit ;
9337: GO 9743
// if damageVehicle_list > 0 then
9339: LD_VAR 0 9
9343: PUSH
9344: LD_INT 0
9346: GREATER
9347: IFFALSE 9385
// for i in damageVehicle_list do
9349: LD_ADDR_VAR 0 6
9353: PUSH
9354: LD_VAR 0 9
9358: PUSH
9359: FOR_IN
9360: IFFALSE 9383
// ComMoveXY ( i , repX , repY ) ;
9362: LD_VAR 0 6
9366: PPUSH
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_VAR 0 4
9376: PPUSH
9377: CALL_OW 111
9381: GO 9359
9383: POP
9384: POP
// if vehicleNeedRepair_list > 0 then
9385: LD_VAR 0 10
9389: PUSH
9390: LD_INT 0
9392: GREATER
9393: IFFALSE 9494
// begin for i in vehicleNeedRepair_list do
9395: LD_ADDR_VAR 0 6
9399: PUSH
9400: LD_VAR 0 10
9404: PUSH
9405: FOR_IN
9406: IFFALSE 9492
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9408: LD_ADDR_VAR 0 12
9412: PUSH
9413: LD_VAR 0 12
9417: PUSH
9418: LD_VAR 0 6
9422: PPUSH
9423: CALL_OW 313
9427: ADD
9428: ST_TO_ADDR
// for j in mechanicInside_list do
9429: LD_ADDR_VAR 0 7
9433: PUSH
9434: LD_VAR 0 12
9438: PUSH
9439: FOR_IN
9440: IFFALSE 9488
// begin ComExitVehicle ( j ) ;
9442: LD_VAR 0 7
9446: PPUSH
9447: CALL_OW 121
// wait ( 0 0$1 ) ;
9451: LD_INT 35
9453: PPUSH
9454: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
9458: LD_VAR 0 7
9462: PPUSH
9463: LD_VAR 0 6
9467: PPUSH
9468: CALL_OW 189
// AddComEnterUnit ( j , i ) ;
9472: LD_VAR 0 7
9476: PPUSH
9477: LD_VAR 0 6
9481: PPUSH
9482: CALL_OW 180
// end ;
9486: GO 9439
9488: POP
9489: POP
// end ;
9490: GO 9405
9492: POP
9493: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9494: LD_VAR 0 11
9498: PUSH
9499: LD_INT 0
9501: GREATER
9502: IFFALSE 9526
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9504: LD_VAR 0 13
9508: PUSH
9509: LD_INT 1
9511: ARRAY
9512: PPUSH
9513: LD_VAR 0 11
9517: PUSH
9518: LD_INT 1
9520: ARRAY
9521: PPUSH
9522: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
9526: LD_VAR 0 8
9530: PUSH
9531: LD_INT 0
9533: GREATER
9534: PUSH
9535: LD_EXP 19
9539: PUSH
9540: LD_INT 0
9542: GREATER
9543: AND
9544: IFFALSE 9675
// begin for i := 1 to vehicleOK_list do
9546: LD_ADDR_VAR 0 6
9550: PUSH
9551: DOUBLE
9552: LD_INT 1
9554: DEC
9555: ST_TO_ADDR
9556: LD_VAR 0 8
9560: PUSH
9561: FOR_TO
9562: IFFALSE 9673
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
9564: LD_VAR 0 6
9568: PUSH
9569: LD_INT 5
9571: PUSH
9572: LD_INT 6
9574: PUSH
9575: LD_INT 6
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_OWVAR 67
9587: ARRAY
9588: EQUAL
9589: IFFALSE 9671
// begin for i in vehicleOk_list do
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: LD_VAR 0 8
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9634
// begin russianTanks = russianTanks ^ i ;
9604: LD_ADDR_EXP 18
9608: PUSH
9609: LD_EXP 18
9613: PUSH
9614: LD_VAR 0 6
9618: ADD
9619: ST_TO_ADDR
// SetFuel ( i , 100 ) ;
9620: LD_VAR 0 6
9624: PPUSH
9625: LD_INT 100
9627: PPUSH
9628: CALL_OW 240
// end ;
9632: GO 9601
9634: POP
9635: POP
// for i in russianDamageTanks do
9636: LD_ADDR_VAR 0 6
9640: PUSH
9641: LD_EXP 19
9645: PUSH
9646: FOR_IN
9647: IFFALSE 9667
// russianDamageTanks = russianDamageTanks diff i ;
9649: LD_ADDR_EXP 19
9653: PUSH
9654: LD_EXP 19
9658: PUSH
9659: LD_VAR 0 6
9663: DIFF
9664: ST_TO_ADDR
9665: GO 9646
9667: POP
9668: POP
// break ;
9669: GO 9673
// end ; end ;
9671: GO 9561
9673: POP
9674: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9675: LD_ADDR_VAR 0 6
9679: PUSH
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 22
9687: PUSH
9688: LD_VAR 0 1
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 25
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PPUSH
9711: CALL_OW 70
9715: NOT
9716: PUSH
9717: FOR_IN
9718: IFFALSE 9741
// ComMoveXY ( i , repX , repY ) ;
9720: LD_VAR 0 6
9724: PPUSH
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: CALL_OW 111
9739: GO 9717
9741: POP
9742: POP
// end ;
9743: LD_VAR 0 5
9747: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9748: LD_INT 0
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
9758: PPUSH
9759: PPUSH
9760: PPUSH
// amChassisTab = [ ] ;
9761: LD_ADDR_VAR 0 19
9765: PUSH
9766: EMPTY
9767: ST_TO_ADDR
// arChassisTab = [ ] ;
9768: LD_ADDR_VAR 0 18
9772: PUSH
9773: EMPTY
9774: ST_TO_ADDR
// ruChassisTab = [ ] ;
9775: LD_ADDR_VAR 0 17
9779: PUSH
9780: EMPTY
9781: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9782: LD_INT 35
9784: PPUSH
9785: CALL_OW 67
// if nation = 1 then
9789: LD_VAR 0 5
9793: PUSH
9794: LD_INT 1
9796: EQUAL
9797: IFFALSE 10288
// begin uc_side = side ;
9799: LD_ADDR_OWVAR 20
9803: PUSH
9804: LD_VAR 0 2
9808: ST_TO_ADDR
// uc_nation = nation ;
9809: LD_ADDR_OWVAR 21
9813: PUSH
9814: LD_VAR 0 5
9818: ST_TO_ADDR
// vc_engine = vehengine ;
9819: LD_ADDR_OWVAR 39
9823: PUSH
9824: LD_VAR 0 6
9828: ST_TO_ADDR
// vc_control = vehcontrol ;
9829: LD_ADDR_OWVAR 38
9833: PUSH
9834: LD_VAR 0 7
9838: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9839: LD_ADDR_OWVAR 40
9843: PUSH
9844: LD_VAR 0 10
9848: PUSH
9849: LD_INT 1
9851: PPUSH
9852: LD_VAR 0 10
9856: PPUSH
9857: CALL_OW 12
9861: ARRAY
9862: ST_TO_ADDR
// for j = 1 to AMWeapon do
9863: LD_ADDR_VAR 0 14
9867: PUSH
9868: DOUBLE
9869: LD_INT 1
9871: DEC
9872: ST_TO_ADDR
9873: LD_VAR 0 10
9877: PUSH
9878: FOR_TO
9879: IFFALSE 10180
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9881: LD_VAR 0 10
9885: PUSH
9886: LD_VAR 0 14
9890: ARRAY
9891: PUSH
9892: LD_INT 2
9894: EQUAL
9895: PUSH
9896: LD_VAR 0 10
9900: PUSH
9901: LD_VAR 0 14
9905: ARRAY
9906: PUSH
9907: LD_INT 3
9909: EQUAL
9910: OR
9911: IFFALSE 9964
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9913: LD_ADDR_VAR 0 19
9917: PUSH
9918: LD_INT 1
9920: PUSH
9921: LD_INT 2
9923: PUSH
9924: LD_INT 3
9926: PUSH
9927: LD_INT 4
9929: PUSH
9930: LD_INT 5
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9940: LD_ADDR_OWVAR 37
9944: PUSH
9945: LD_VAR 0 19
9949: PUSH
9950: LD_INT 1
9952: PPUSH
9953: LD_VAR 0 19
9957: PPUSH
9958: CALL_OW 12
9962: ARRAY
9963: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9964: LD_VAR 0 10
9968: PUSH
9969: LD_VAR 0 14
9973: ARRAY
9974: PUSH
9975: LD_INT 4
9977: EQUAL
9978: PUSH
9979: LD_VAR 0 10
9983: PUSH
9984: LD_VAR 0 14
9988: ARRAY
9989: PUSH
9990: LD_INT 5
9992: EQUAL
9993: OR
9994: PUSH
9995: LD_VAR 0 10
9999: PUSH
10000: LD_VAR 0 14
10004: ARRAY
10005: PUSH
10006: LD_INT 9
10008: EQUAL
10009: OR
10010: PUSH
10011: LD_VAR 0 10
10015: PUSH
10016: LD_VAR 0 14
10020: ARRAY
10021: PUSH
10022: LD_INT 11
10024: EQUAL
10025: OR
10026: PUSH
10027: LD_VAR 0 10
10031: PUSH
10032: LD_VAR 0 14
10036: ARRAY
10037: PUSH
10038: LD_INT 7
10040: EQUAL
10041: OR
10042: IFFALSE 10091
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
10044: LD_ADDR_VAR 0 19
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: LD_INT 3
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: LD_INT 5
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10067: LD_ADDR_OWVAR 37
10071: PUSH
10072: LD_VAR 0 19
10076: PUSH
10077: LD_INT 1
10079: PPUSH
10080: LD_VAR 0 19
10084: PPUSH
10085: CALL_OW 12
10089: ARRAY
10090: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10091: LD_VAR 0 10
10095: PUSH
10096: LD_VAR 0 14
10100: ARRAY
10101: PUSH
10102: LD_INT 8
10104: EQUAL
10105: PUSH
10106: LD_VAR 0 10
10110: PUSH
10111: LD_VAR 0 14
10115: ARRAY
10116: PUSH
10117: LD_INT 6
10119: EQUAL
10120: OR
10121: PUSH
10122: LD_VAR 0 10
10126: PUSH
10127: LD_VAR 0 14
10131: ARRAY
10132: PUSH
10133: LD_INT 10
10135: EQUAL
10136: OR
10137: IFFALSE 10178
// begin amChassisTab = [ 4 , 5 ] ;
10139: LD_ADDR_VAR 0 19
10143: PUSH
10144: LD_INT 4
10146: PUSH
10147: LD_INT 5
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10154: LD_ADDR_OWVAR 37
10158: PUSH
10159: LD_VAR 0 19
10163: PUSH
10164: LD_INT 1
10166: PPUSH
10167: LD_VAR 0 19
10171: PPUSH
10172: CALL_OW 12
10176: ARRAY
10177: ST_TO_ADDR
// end ; end ;
10178: GO 9878
10180: POP
10181: POP
// veh = CreateVehicle ;
10182: LD_ADDR_VAR 0 16
10186: PUSH
10187: CALL_OW 45
10191: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10192: LD_VAR 0 16
10196: PPUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: LD_INT 0
10204: PPUSH
10205: CALL_OW 49
// if vehControl = 1 then
10209: LD_VAR 0 7
10213: PUSH
10214: LD_INT 1
10216: EQUAL
10217: IFFALSE 10274
// begin hc_gallery =  ;
10219: LD_ADDR_OWVAR 33
10223: PUSH
10224: LD_STRING 
10226: ST_TO_ADDR
// hc_name =  ;
10227: LD_ADDR_OWVAR 26
10231: PUSH
10232: LD_STRING 
10234: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10235: LD_INT 0
10237: PPUSH
10238: LD_INT 3
10240: PPUSH
10241: LD_VAR 0 4
10245: PPUSH
10246: CALL_OW 380
// un = CreateHuman ;
10250: LD_ADDR_VAR 0 15
10254: PUSH
10255: CALL_OW 44
10259: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10260: LD_VAR 0 15
10264: PPUSH
10265: LD_VAR 0 16
10269: PPUSH
10270: CALL_OW 52
// end ; i = i + 1 ;
10274: LD_ADDR_VAR 0 13
10278: PUSH
10279: LD_VAR 0 13
10283: PUSH
10284: LD_INT 1
10286: PLUS
10287: ST_TO_ADDR
// end ; if nation = 2 then
10288: LD_VAR 0 5
10292: PUSH
10293: LD_INT 2
10295: EQUAL
10296: IFFALSE 10720
// begin uc_side = side ;
10298: LD_ADDR_OWVAR 20
10302: PUSH
10303: LD_VAR 0 2
10307: ST_TO_ADDR
// uc_nation = nation ;
10308: LD_ADDR_OWVAR 21
10312: PUSH
10313: LD_VAR 0 5
10317: ST_TO_ADDR
// vc_engine = vehengine ;
10318: LD_ADDR_OWVAR 39
10322: PUSH
10323: LD_VAR 0 6
10327: ST_TO_ADDR
// vc_control = vehcontrol ;
10328: LD_ADDR_OWVAR 38
10332: PUSH
10333: LD_VAR 0 7
10337: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10338: LD_ADDR_OWVAR 40
10342: PUSH
10343: LD_VAR 0 9
10347: PUSH
10348: LD_INT 1
10350: PPUSH
10351: LD_VAR 0 9
10355: PPUSH
10356: CALL_OW 12
10360: ARRAY
10361: ST_TO_ADDR
// for j = 1 to ARWeapons do
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: DOUBLE
10368: LD_INT 1
10370: DEC
10371: ST_TO_ADDR
10372: LD_VAR 0 9
10376: PUSH
10377: FOR_TO
10378: IFFALSE 10612
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10380: LD_VAR 0 9
10384: PUSH
10385: LD_VAR 0 14
10389: ARRAY
10390: PUSH
10391: LD_INT 24
10393: EQUAL
10394: PUSH
10395: LD_VAR 0 9
10399: PUSH
10400: LD_VAR 0 14
10404: ARRAY
10405: PUSH
10406: LD_INT 22
10408: EQUAL
10409: OR
10410: PUSH
10411: LD_VAR 0 9
10415: PUSH
10416: LD_VAR 0 14
10420: ARRAY
10421: PUSH
10422: LD_INT 23
10424: EQUAL
10425: OR
10426: PUSH
10427: LD_VAR 0 9
10431: PUSH
10432: LD_VAR 0 14
10436: ARRAY
10437: PUSH
10438: LD_INT 30
10440: EQUAL
10441: OR
10442: IFFALSE 10491
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10444: LD_ADDR_VAR 0 18
10448: PUSH
10449: LD_INT 11
10451: PUSH
10452: LD_INT 12
10454: PUSH
10455: LD_INT 13
10457: PUSH
10458: LD_INT 14
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10467: LD_ADDR_OWVAR 37
10471: PUSH
10472: LD_VAR 0 18
10476: PUSH
10477: LD_INT 1
10479: PPUSH
10480: LD_VAR 0 18
10484: PPUSH
10485: CALL_OW 12
10489: ARRAY
10490: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10491: LD_VAR 0 9
10495: PUSH
10496: LD_VAR 0 14
10500: ARRAY
10501: PUSH
10502: LD_INT 29
10504: EQUAL
10505: PUSH
10506: LD_VAR 0 9
10510: PUSH
10511: LD_VAR 0 14
10515: ARRAY
10516: PUSH
10517: LD_INT 28
10519: EQUAL
10520: OR
10521: PUSH
10522: LD_VAR 0 9
10526: PUSH
10527: LD_VAR 0 14
10531: ARRAY
10532: PUSH
10533: LD_INT 27
10535: EQUAL
10536: OR
10537: PUSH
10538: LD_VAR 0 9
10542: PUSH
10543: LD_VAR 0 14
10547: ARRAY
10548: PUSH
10549: LD_INT 26
10551: EQUAL
10552: OR
10553: PUSH
10554: LD_VAR 0 9
10558: PUSH
10559: LD_VAR 0 14
10563: ARRAY
10564: PUSH
10565: LD_INT 25
10567: EQUAL
10568: OR
10569: IFFALSE 10610
// begin arChassisTab = [ 13 , 14 ] ;
10571: LD_ADDR_VAR 0 18
10575: PUSH
10576: LD_INT 13
10578: PUSH
10579: LD_INT 14
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10586: LD_ADDR_OWVAR 37
10590: PUSH
10591: LD_VAR 0 18
10595: PUSH
10596: LD_INT 1
10598: PPUSH
10599: LD_VAR 0 18
10603: PPUSH
10604: CALL_OW 12
10608: ARRAY
10609: ST_TO_ADDR
// end ; end ;
10610: GO 10377
10612: POP
10613: POP
// veh = CreateVehicle ;
10614: LD_ADDR_VAR 0 16
10618: PUSH
10619: CALL_OW 45
10623: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10624: LD_VAR 0 16
10628: PPUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: LD_INT 0
10636: PPUSH
10637: CALL_OW 49
// if vehcontrol = 1 then
10641: LD_VAR 0 7
10645: PUSH
10646: LD_INT 1
10648: EQUAL
10649: IFFALSE 10706
// begin hc_gallery =  ;
10651: LD_ADDR_OWVAR 33
10655: PUSH
10656: LD_STRING 
10658: ST_TO_ADDR
// hc_name =  ;
10659: LD_ADDR_OWVAR 26
10663: PUSH
10664: LD_STRING 
10666: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10667: LD_INT 0
10669: PPUSH
10670: LD_INT 3
10672: PPUSH
10673: LD_VAR 0 4
10677: PPUSH
10678: CALL_OW 380
// un = CreateHuman ;
10682: LD_ADDR_VAR 0 15
10686: PUSH
10687: CALL_OW 44
10691: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10692: LD_VAR 0 15
10696: PPUSH
10697: LD_VAR 0 16
10701: PPUSH
10702: CALL_OW 52
// end ; i = i + 1 ;
10706: LD_ADDR_VAR 0 13
10710: PUSH
10711: LD_VAR 0 13
10715: PUSH
10716: LD_INT 1
10718: PLUS
10719: ST_TO_ADDR
// end ; if nation = 3 then
10720: LD_VAR 0 5
10724: PUSH
10725: LD_INT 3
10727: EQUAL
10728: IFFALSE 11120
// begin uc_side = side ;
10730: LD_ADDR_OWVAR 20
10734: PUSH
10735: LD_VAR 0 2
10739: ST_TO_ADDR
// uc_nation = nation ;
10740: LD_ADDR_OWVAR 21
10744: PUSH
10745: LD_VAR 0 5
10749: ST_TO_ADDR
// vc_engine = vehengine ;
10750: LD_ADDR_OWVAR 39
10754: PUSH
10755: LD_VAR 0 6
10759: ST_TO_ADDR
// vc_control = vehcontrol ;
10760: LD_ADDR_OWVAR 38
10764: PUSH
10765: LD_VAR 0 7
10769: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10770: LD_ADDR_OWVAR 40
10774: PUSH
10775: LD_VAR 0 8
10779: PUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_VAR 0 8
10787: PPUSH
10788: CALL_OW 12
10792: ARRAY
10793: ST_TO_ADDR
// for j = 1 to RuWeapons do
10794: LD_ADDR_VAR 0 14
10798: PUSH
10799: DOUBLE
10800: LD_INT 1
10802: DEC
10803: ST_TO_ADDR
10804: LD_VAR 0 8
10808: PUSH
10809: FOR_TO
10810: IFFALSE 11012
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10812: LD_VAR 0 8
10816: PUSH
10817: LD_VAR 0 14
10821: ARRAY
10822: PUSH
10823: LD_INT 42
10825: EQUAL
10826: PUSH
10827: LD_VAR 0 8
10831: PUSH
10832: LD_VAR 0 14
10836: ARRAY
10837: PUSH
10838: LD_INT 43
10840: EQUAL
10841: OR
10842: PUSH
10843: LD_VAR 0 8
10847: PUSH
10848: LD_VAR 0 14
10852: ARRAY
10853: PUSH
10854: LD_INT 44
10856: EQUAL
10857: OR
10858: PUSH
10859: LD_VAR 0 8
10863: PUSH
10864: LD_VAR 0 14
10868: ARRAY
10869: PUSH
10870: LD_INT 45
10872: EQUAL
10873: OR
10874: PUSH
10875: LD_VAR 0 8
10879: PUSH
10880: LD_VAR 0 14
10884: ARRAY
10885: PUSH
10886: LD_INT 49
10888: EQUAL
10889: OR
10890: IFFALSE 10939
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10892: LD_ADDR_VAR 0 17
10896: PUSH
10897: LD_INT 21
10899: PUSH
10900: LD_INT 22
10902: PUSH
10903: LD_INT 23
10905: PUSH
10906: LD_INT 24
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10915: LD_ADDR_OWVAR 37
10919: PUSH
10920: LD_VAR 0 17
10924: PUSH
10925: LD_INT 1
10927: PPUSH
10928: LD_VAR 0 17
10932: PPUSH
10933: CALL_OW 12
10937: ARRAY
10938: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10939: LD_VAR 0 8
10943: PUSH
10944: LD_VAR 0 14
10948: ARRAY
10949: PUSH
10950: LD_INT 46
10952: EQUAL
10953: PUSH
10954: LD_VAR 0 8
10958: PUSH
10959: LD_VAR 0 14
10963: ARRAY
10964: PUSH
10965: LD_INT 47
10967: EQUAL
10968: OR
10969: IFFALSE 11010
// begin ruChassisTab = [ 23 , 24 ] ;
10971: LD_ADDR_VAR 0 17
10975: PUSH
10976: LD_INT 23
10978: PUSH
10979: LD_INT 24
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10986: LD_ADDR_OWVAR 37
10990: PUSH
10991: LD_VAR 0 17
10995: PUSH
10996: LD_INT 1
10998: PPUSH
10999: LD_VAR 0 17
11003: PPUSH
11004: CALL_OW 12
11008: ARRAY
11009: ST_TO_ADDR
// end ; end ;
11010: GO 10809
11012: POP
11013: POP
// veh = CreateVehicle ;
11014: LD_ADDR_VAR 0 16
11018: PUSH
11019: CALL_OW 45
11023: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11024: LD_VAR 0 16
11028: PPUSH
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 49
// if vehcontrol = 1 then
11041: LD_VAR 0 7
11045: PUSH
11046: LD_INT 1
11048: EQUAL
11049: IFFALSE 11106
// begin hc_gallery =  ;
11051: LD_ADDR_OWVAR 33
11055: PUSH
11056: LD_STRING 
11058: ST_TO_ADDR
// hc_name =  ;
11059: LD_ADDR_OWVAR 26
11063: PUSH
11064: LD_STRING 
11066: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11067: LD_INT 0
11069: PPUSH
11070: LD_INT 3
11072: PPUSH
11073: LD_VAR 0 4
11077: PPUSH
11078: CALL_OW 380
// un = CreateHuman ;
11082: LD_ADDR_VAR 0 15
11086: PUSH
11087: CALL_OW 44
11091: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11092: LD_VAR 0 15
11096: PPUSH
11097: LD_VAR 0 16
11101: PPUSH
11102: CALL_OW 52
// end ; i = i + 1 ;
11106: LD_ADDR_VAR 0 13
11110: PUSH
11111: LD_VAR 0 13
11115: PUSH
11116: LD_INT 1
11118: PLUS
11119: ST_TO_ADDR
// end ; until i = vehCount ;
11120: LD_VAR 0 13
11124: PUSH
11125: LD_VAR 0 3
11129: EQUAL
11130: IFFALSE 9782
// repeat wait ( 0 0$1 ) ;
11132: LD_INT 35
11134: PPUSH
11135: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
11139: LD_ADDR_VAR 0 20
11143: PUSH
11144: LD_INT 22
11146: PUSH
11147: LD_VAR 0 2
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 21
11158: PUSH
11159: LD_INT 2
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 24
11168: PUSH
11169: LD_INT 661
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: ST_TO_ADDR
// if vehicleOK_list > 0 then
11186: LD_VAR 0 20
11190: PUSH
11191: LD_INT 0
11193: GREATER
11194: IFFALSE 11385
// begin for i in vehicleOK_list do
11196: LD_ADDR_VAR 0 13
11200: PUSH
11201: LD_VAR 0 20
11205: PUSH
11206: FOR_IN
11207: IFFALSE 11383
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11209: LD_ADDR_VAR 0 21
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 11
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 69
11230: PPUSH
11231: LD_VAR 0 13
11235: PPUSH
11236: CALL_OW 74
11240: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11241: LD_ADDR_VAR 0 22
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_VAR 0 11
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 2
11260: PUSH
11261: LD_INT 59
11263: PUSH
11264: EMPTY
11265: LIST
11266: PUSH
11267: LD_INT 21
11269: PUSH
11270: LD_INT 1
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 21
11279: PUSH
11280: LD_INT 2
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: PPUSH
11300: CALL_OW 69
11304: PPUSH
11305: LD_VAR 0 13
11309: PPUSH
11310: CALL_OW 74
11314: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11315: LD_VAR 0 13
11319: PPUSH
11320: LD_VAR 0 21
11324: PPUSH
11325: CALL_OW 296
11329: PUSH
11330: LD_INT 8
11332: PLUS
11333: PUSH
11334: LD_VAR 0 13
11338: PPUSH
11339: LD_VAR 0 22
11343: PPUSH
11344: CALL_OW 296
11348: LESS
11349: IFFALSE 11367
// begin ComAttackUnit ( i , target1 ) ;
11351: LD_VAR 0 13
11355: PPUSH
11356: LD_VAR 0 21
11360: PPUSH
11361: CALL_OW 115
// end else
11365: GO 11381
// begin ComAttackUnit ( i , target2 ) ;
11367: LD_VAR 0 13
11371: PPUSH
11372: LD_VAR 0 22
11376: PPUSH
11377: CALL_OW 115
// end ; end ;
11381: GO 11206
11383: POP
11384: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 ;
11385: LD_INT 22
11387: PUSH
11388: LD_VAR 0 2
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 21
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 69
11415: PUSH
11416: LD_INT 0
11418: EQUAL
11419: IFFALSE 11132
// end ; end_of_file
11421: LD_VAR 0 12
11425: RET
// every 1 do var i , gammaSquad , startX , startY ;
11426: GO 11428
11428: DISABLE
11429: LD_INT 0
11431: PPUSH
11432: PPUSH
11433: PPUSH
11434: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11435: LD_ADDR_VAR 0 2
11439: PUSH
11440: LD_EXP 8
11444: PUSH
11445: LD_EXP 9
11449: PUSH
11450: LD_EXP 10
11454: PUSH
11455: LD_EXP 11
11459: PUSH
11460: LD_EXP 12
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11472: LD_ADDR_VAR 0 3
11476: PUSH
11477: LD_INT 46
11479: PUSH
11480: LD_INT 45
11482: PUSH
11483: LD_INT 44
11485: PUSH
11486: LD_INT 43
11488: PUSH
11489: LD_INT 42
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11499: LD_ADDR_VAR 0 4
11503: PUSH
11504: LD_INT 14
11506: PUSH
11507: LD_INT 12
11509: PUSH
11510: LD_INT 10
11512: PUSH
11513: LD_INT 8
11515: PUSH
11516: LD_INT 6
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11526: LD_INT 32
11528: PPUSH
11529: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11533: LD_INT 32
11535: PPUSH
11536: LD_INT 51
11538: PPUSH
11539: LD_INT 26
11541: PPUSH
11542: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11546: LD_INT 32
11548: PPUSH
11549: LD_INT 53
11551: PPUSH
11552: LD_INT 23
11554: PPUSH
11555: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11559: LD_INT 32
11561: PPUSH
11562: LD_INT 52
11564: PPUSH
11565: LD_INT 19
11567: PPUSH
11568: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11572: LD_INT 35
11574: PPUSH
11575: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11579: LD_INT 32
11581: PPUSH
11582: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11586: LD_INT 32
11588: PPUSH
11589: CALL_OW 250
11593: PUSH
11594: LD_INT 52
11596: EQUAL
11597: PUSH
11598: LD_INT 32
11600: PPUSH
11601: CALL_OW 251
11605: PUSH
11606: LD_INT 19
11608: EQUAL
11609: AND
11610: IFFALSE 11572
// ComExitVehicle ( JMM ) ;
11612: LD_EXP 1
11616: PPUSH
11617: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11621: LD_EXP 7
11625: PPUSH
11626: LD_EXP 1
11630: PPUSH
11631: CALL_OW 119
// wait ( 0 0$01 ) ;
11635: LD_INT 35
11637: PPUSH
11638: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11642: LD_EXP 1
11646: PPUSH
11647: LD_INT 46
11649: PPUSH
11650: LD_INT 10
11652: PPUSH
11653: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11657: LD_EXP 1
11661: PPUSH
11662: LD_EXP 7
11666: PPUSH
11667: CALL_OW 179
// wait ( 0 0$4 ) ;
11671: LD_INT 140
11673: PPUSH
11674: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11678: LD_EXP 1
11682: PPUSH
11683: LD_STRING D1-JMM-1
11685: PPUSH
11686: CALL_OW 88
// if not dialogue_skipped then
11690: LD_OWVAR 59
11694: NOT
11695: IFFALSE 12352
// begin for i := 1 to gammaSquad do
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: DOUBLE
11703: LD_INT 1
11705: DEC
11706: ST_TO_ADDR
11707: LD_VAR 0 2
11711: PUSH
11712: FOR_TO
11713: IFFALSE 11774
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11715: LD_VAR 0 2
11719: PUSH
11720: LD_VAR 0 1
11724: ARRAY
11725: PPUSH
11726: LD_VAR 0 3
11730: PUSH
11731: LD_VAR 0 1
11735: ARRAY
11736: PPUSH
11737: LD_VAR 0 4
11741: PUSH
11742: LD_VAR 0 1
11746: ARRAY
11747: PPUSH
11748: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11752: LD_VAR 0 2
11756: PUSH
11757: LD_VAR 0 1
11761: ARRAY
11762: PPUSH
11763: LD_EXP 1
11767: PPUSH
11768: CALL_OW 179
// end ;
11772: GO 11712
11774: POP
11775: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11776: LD_EXP 4
11780: PPUSH
11781: LD_INT 41
11783: PPUSH
11784: LD_INT 4
11786: PPUSH
11787: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11791: LD_EXP 4
11795: PPUSH
11796: LD_EXP 1
11800: PPUSH
11801: CALL_OW 179
// if Lisa = false and Bobby then
11805: LD_EXP 4
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: PUSH
11814: LD_EXP 2
11818: AND
11819: IFFALSE 11850
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11821: LD_EXP 2
11825: PPUSH
11826: LD_INT 41
11828: PPUSH
11829: LD_INT 4
11831: PPUSH
11832: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11836: LD_EXP 2
11840: PPUSH
11841: LD_EXP 1
11845: PPUSH
11846: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11850: LD_EXP 4
11854: PUSH
11855: LD_INT 0
11857: EQUAL
11858: PUSH
11859: LD_EXP 2
11863: PUSH
11864: LD_INT 0
11866: EQUAL
11867: AND
11868: PUSH
11869: LD_EXP 3
11873: AND
11874: IFFALSE 11905
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11876: LD_EXP 3
11880: PPUSH
11881: LD_INT 41
11883: PPUSH
11884: LD_INT 4
11886: PPUSH
11887: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11891: LD_EXP 3
11895: PPUSH
11896: LD_EXP 1
11900: PPUSH
11901: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11905: LD_EXP 4
11909: PUSH
11910: LD_INT 0
11912: EQUAL
11913: PUSH
11914: LD_EXP 2
11918: PUSH
11919: LD_INT 0
11921: EQUAL
11922: AND
11923: PUSH
11924: LD_EXP 3
11928: PUSH
11929: LD_INT 0
11931: EQUAL
11932: AND
11933: IFFALSE 11964
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11935: LD_EXP 6
11939: PPUSH
11940: LD_INT 41
11942: PPUSH
11943: LD_INT 4
11945: PPUSH
11946: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11950: LD_EXP 6
11954: PPUSH
11955: LD_EXP 1
11959: PPUSH
11960: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11964: LD_EXP 7
11968: PPUSH
11969: LD_STRING D1-Brown-1
11971: PPUSH
11972: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11976: LD_EXP 1
11980: PPUSH
11981: LD_STRING D1-JMM-2
11983: PPUSH
11984: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11988: LD_EXP 7
11992: PPUSH
11993: LD_STRING D1-Brown-2
11995: PPUSH
11996: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12000: LD_EXP 1
12004: PPUSH
12005: LD_EXP 9
12009: PPUSH
12010: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12014: LD_EXP 9
12018: PPUSH
12019: LD_STRING D1-FSol1-2
12021: PPUSH
12022: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12026: LD_EXP 1
12030: PPUSH
12031: LD_EXP 8
12035: PPUSH
12036: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12040: LD_EXP 8
12044: PPUSH
12045: LD_STRING D1-Sol2-2
12047: PPUSH
12048: CALL_OW 88
// if Lisa then
12052: LD_EXP 4
12056: IFFALSE 12096
// begin ComTurnUnit ( JMM , Lisa ) ;
12058: LD_EXP 1
12062: PPUSH
12063: LD_EXP 4
12067: PPUSH
12068: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12072: LD_EXP 4
12076: PPUSH
12077: LD_STRING D1-Lisa-2
12079: PPUSH
12080: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12084: LD_EXP 1
12088: PPUSH
12089: LD_STRING D1-JMM-3
12091: PPUSH
12092: CALL_OW 88
// end ; if Bobby then
12096: LD_EXP 2
12100: IFFALSE 12140
// begin ComTurnUnit ( JMM , Bobby ) ;
12102: LD_EXP 1
12106: PPUSH
12107: LD_EXP 2
12111: PPUSH
12112: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12116: LD_EXP 2
12120: PPUSH
12121: LD_STRING D1-Bobby-2
12123: PPUSH
12124: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12128: LD_EXP 1
12132: PPUSH
12133: LD_STRING D1-JMM-3
12135: PPUSH
12136: CALL_OW 88
// end ; if Cyrus then
12140: LD_EXP 3
12144: IFFALSE 12184
// begin ComTurnUnit ( JMM , Cyrus ) ;
12146: LD_EXP 1
12150: PPUSH
12151: LD_EXP 3
12155: PPUSH
12156: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12160: LD_EXP 3
12164: PPUSH
12165: LD_STRING D1-Cyrus-2
12167: PPUSH
12168: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12172: LD_EXP 1
12176: PPUSH
12177: LD_STRING D1-JMM-3
12179: PPUSH
12180: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12184: LD_EXP 1
12188: PPUSH
12189: LD_EXP 7
12193: PPUSH
12194: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12198: LD_EXP 1
12202: PPUSH
12203: LD_STRING D1-JMM-3a
12205: PPUSH
12206: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12210: LD_EXP 7
12214: PPUSH
12215: LD_INT 38
12217: PPUSH
12218: LD_INT 5
12220: PPUSH
12221: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12225: LD_EXP 7
12229: PPUSH
12230: LD_EXP 1
12234: PPUSH
12235: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12239: LD_EXP 1
12243: PPUSH
12244: LD_INT 40
12246: PPUSH
12247: LD_INT 7
12249: PPUSH
12250: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12254: LD_EXP 1
12258: PPUSH
12259: LD_EXP 7
12263: PPUSH
12264: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12268: LD_EXP 7
12272: PPUSH
12273: LD_STRING D1-Brown-3
12275: PPUSH
12276: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12280: LD_EXP 14
12284: PPUSH
12285: LD_STRING D1-Har-3
12287: PPUSH
12288: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12292: LD_EXP 1
12296: PPUSH
12297: LD_STRING D1-JMM-4
12299: PPUSH
12300: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12304: LD_EXP 14
12308: PPUSH
12309: LD_STRING D1-Har-4
12311: PPUSH
12312: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12316: LD_EXP 1
12320: PPUSH
12321: LD_STRING D1-JMM-5
12323: PPUSH
12324: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12328: LD_EXP 14
12332: PPUSH
12333: LD_STRING D1-Har-5
12335: PPUSH
12336: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12340: LD_EXP 1
12344: PPUSH
12345: LD_STRING D1-JMM-6
12347: PPUSH
12348: CALL_OW 88
// end ; InGameOff ;
12352: CALL_OW 9
// PrepareRussianConvoy ;
12356: CALL 2806 0 0
// ChangeMissionObjectives ( M1 ) ;
12360: LD_STRING M1
12362: PPUSH
12363: CALL_OW 337
// SaveForQuickRestart ;
12367: CALL_OW 22
// timerStatus = 1 ;
12371: LD_ADDR_EXP 29
12375: PUSH
12376: LD_INT 1
12378: ST_TO_ADDR
// startTimer = 1 ;
12379: LD_ADDR_EXP 30
12383: PUSH
12384: LD_INT 1
12386: ST_TO_ADDR
// bonusAvalaible = 1 ;
12387: LD_ADDR_EXP 42
12391: PUSH
12392: LD_INT 1
12394: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12395: LD_INT 105
12397: PPUSH
12398: CALL_OW 67
// DialogueOn ;
12402: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12406: LD_EXP 12
12410: PPUSH
12411: LD_STRING D9-Mech1-1
12413: PPUSH
12414: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12418: LD_EXP 1
12422: PPUSH
12423: LD_STRING D9-JMM-1
12425: PPUSH
12426: CALL_OW 88
// DialogueOff ;
12430: CALL_OW 7
// end ;
12434: PPOPN 4
12436: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12437: LD_INT 47
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 321
12447: PUSH
12448: LD_INT 2
12450: EQUAL
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_INT 1
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 21
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 3
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: LIST
12486: PPUSH
12487: CALL_OW 69
12491: PUSH
12492: LD_INT 0
12494: GREATER
12495: AND
12496: IFFALSE 12726
12498: GO 12500
12500: DISABLE
// begin if IsOk ( Campell ) then
12501: LD_EXP 12
12505: PPUSH
12506: CALL_OW 302
12510: IFFALSE 12526
// begin Say ( Campell , D10-Mech1-1 ) ;
12512: LD_EXP 12
12516: PPUSH
12517: LD_STRING D10-Mech1-1
12519: PPUSH
12520: CALL_OW 88
// end else
12524: GO 12726
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12526: LD_INT 22
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 21
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 25
12548: PUSH
12549: LD_INT 3
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 26
12558: PUSH
12559: LD_INT 1
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 69
12576: PUSH
12577: LD_EXP 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: PUSH
12585: LD_INT 0
12587: GREATER
12588: DIFF
12589: IFFALSE 12663
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12591: LD_INT 22
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 25
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 26
12623: PUSH
12624: LD_INT 1
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 69
12641: PUSH
12642: LD_EXP 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: DIFF
12650: PPUSH
12651: LD_STRING D10-Mech1-1
12653: PPUSH
12654: LD_STRING D10-Mech1-1
12656: PPUSH
12657: CALL 4050 0 3
// end else
12661: GO 12726
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12663: LD_INT 22
12665: PUSH
12666: LD_INT 1
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 21
12675: PUSH
12676: LD_INT 1
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 26
12685: PUSH
12686: LD_INT 1
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: CALL_OW 69
12706: PUSH
12707: LD_EXP 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: DIFF
12715: PPUSH
12716: LD_STRING D10-Mech1-1
12718: PPUSH
12719: LD_STRING D10-Mech1-1
12721: PPUSH
12722: CALL 4050 0 3
// end ; end ; end ;
12726: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12727: LD_INT 22
12729: PUSH
12730: LD_INT 1
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 32
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PPUSH
12751: CALL_OW 69
12755: PUSH
12756: LD_INT 0
12758: GREATER
12759: PUSH
12760: LD_EXP 32
12764: PUSH
12765: LD_INT 0
12767: EQUAL
12768: AND
12769: IFFALSE 13009
12771: GO 12773
12773: DISABLE
// begin if IsOK ( Claptopn ) then
12774: LD_EXP 11
12778: PPUSH
12779: CALL_OW 302
12783: IFFALSE 12799
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12785: LD_EXP 11
12789: PPUSH
12790: LD_STRING D9b-Eng1-1
12792: PPUSH
12793: CALL_OW 88
// end else
12797: GO 12995
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 21
12811: PUSH
12812: LD_INT 1
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 25
12821: PUSH
12822: LD_INT 3
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 26
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PPUSH
12845: CALL_OW 69
12849: PUSH
12850: LD_EXP 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: PUSH
12858: LD_INT 0
12860: GREATER
12861: DIFF
12862: IFFALSE 12936
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12864: LD_INT 22
12866: PUSH
12867: LD_INT 1
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 21
12876: PUSH
12877: LD_INT 1
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 25
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 26
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: PUSH
12915: LD_EXP 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: DIFF
12923: PPUSH
12924: LD_STRING D9b-Eng1-1
12926: PPUSH
12927: LD_STRING D9b-Eng1-11
12929: PPUSH
12930: CALL 4050 0 3
// end else
12934: GO 12995
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12936: LD_INT 22
12938: PUSH
12939: LD_INT 1
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 21
12948: PUSH
12949: LD_INT 1
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 26
12958: PUSH
12959: LD_INT 1
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PUSH
12976: LD_EXP 1
12980: PUSH
12981: EMPTY
12982: LIST
12983: DIFF
12984: PPUSH
12985: LD_STRING D9b-Eng1-1
12987: PPUSH
12988: LD_STRING D9b-Eng1-1
12990: PPUSH
12991: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
12995: LD_EXP 33
12999: PUSH
13000: LD_INT 0
13002: EQUAL
13003: IFFALSE 13009
// EnergyDialog ;
13005: CALL 4541 0 0
// end ;
13009: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13010: LD_EXP 34
13014: PUSH
13015: LD_INT 1
13017: EQUAL
13018: PUSH
13019: LD_EXP 35
13023: PUSH
13024: LD_INT 1
13026: EQUAL
13027: AND
13028: IFFALSE 13040
13030: GO 13032
13032: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13033: LD_STRING M1a
13035: PPUSH
13036: CALL_OW 337
13040: END
// every 3 3$0 do
13041: GO 13043
13043: DISABLE
// begin PrepareFirstAttack ;
13044: CALL 3606 0 0
// end ;
13048: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
13049: LD_INT 22
13051: PUSH
13052: LD_INT 5
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 21
13061: PUSH
13062: LD_INT 1
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PPUSH
13073: CALL_OW 69
13077: PUSH
13078: LD_INT 3
13080: LESSEQUAL
13081: PUSH
13082: LD_EXP 23
13086: PUSH
13087: LD_INT 1
13089: EQUAL
13090: AND
13091: IFFALSE 13409
13093: GO 13095
13095: DISABLE
13096: LD_INT 0
13098: PPUSH
// begin firstRussianAttack = 2 ;
13099: LD_ADDR_EXP 23
13103: PUSH
13104: LD_INT 2
13106: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13107: LD_ADDR_VAR 0 1
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 5
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 21
13124: PUSH
13125: LD_INT 1
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PPUSH
13136: CALL_OW 69
13140: PUSH
13141: FOR_IN
13142: IFFALSE 13161
// ComMoveXY ( i , 125 , 98 ) ;
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_INT 125
13151: PPUSH
13152: LD_INT 98
13154: PPUSH
13155: CALL_OW 111
13159: GO 13141
13161: POP
13162: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13163: LD_INT 22
13165: PUSH
13166: LD_INT 1
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 21
13175: PUSH
13176: LD_INT 1
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: PUSH
13192: LD_EXP 1
13196: PUSH
13197: LD_EXP 7
13201: PUSH
13202: LD_EXP 4
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: DIFF
13212: PPUSH
13213: LD_STRING DAtt1-Sol1-1
13215: PPUSH
13216: LD_STRING DAtt1-FSol1-1
13218: PPUSH
13219: CALL 4050 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13223: LD_EXP 1
13227: PPUSH
13228: LD_STRING DAtt1-JMM-1
13230: PPUSH
13231: CALL_OW 88
// if Lisa then
13235: LD_EXP 4
13239: IFFALSE 13255
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13241: LD_EXP 4
13245: PPUSH
13246: LD_STRING DAtt1a-Lisa-1
13248: PPUSH
13249: CALL_OW 88
// end else
13253: GO 13326
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13255: LD_INT 22
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 26
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 69
13294: PUSH
13295: LD_EXP 1
13299: PUSH
13300: LD_EXP 7
13304: PUSH
13305: LD_EXP 4
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: DIFF
13315: PPUSH
13316: LD_STRING DAtt1a-Sol1-1
13318: PPUSH
13319: LD_STRING DAtt1-FSol1-1
13321: PPUSH
13322: CALL 4050 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13326: LD_EXP 1
13330: PPUSH
13331: LD_STRING DAtt1a-JMM-1
13333: PPUSH
13334: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13338: LD_INT 22
13340: PUSH
13341: LD_INT 1
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 21
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 26
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: PUSH
13378: LD_EXP 1
13382: PUSH
13383: LD_EXP 7
13387: PUSH
13388: LD_EXP 4
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: DIFF
13398: PPUSH
13399: LD_STRING DAtt1b-Sol1-1
13401: PPUSH
13402: LD_STRING DAtt1a-Sol1-1
13404: PPUSH
13405: CALL 4050 0 3
// end ;
13409: PPOPN 1
13411: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13412: LD_EXP 23
13416: PUSH
13417: LD_INT 2
13419: EQUAL
13420: IFFALSE 13482
13422: GO 13424
13424: DISABLE
13425: LD_INT 0
13427: PPUSH
// begin enable ;
13428: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13429: LD_ADDR_VAR 0 1
13433: PUSH
13434: LD_INT 5
13436: PPUSH
13437: LD_INT 22
13439: PUSH
13440: LD_INT 5
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 21
13449: PUSH
13450: LD_INT 1
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PPUSH
13461: CALL_OW 70
13465: PUSH
13466: FOR_IN
13467: IFFALSE 13480
// RemoveUnit ( i ) ;
13469: LD_VAR 0 1
13473: PPUSH
13474: CALL_OW 64
13478: GO 13466
13480: POP
13481: POP
// end ;
13482: PPOPN 1
13484: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13485: LD_INT 22
13487: PUSH
13488: LD_INT 5
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PUSH
13503: LD_INT 0
13505: EQUAL
13506: PUSH
13507: LD_EXP 23
13511: PUSH
13512: LD_INT 2
13514: EQUAL
13515: AND
13516: IFFALSE 13529
13518: GO 13520
13520: DISABLE
// firstRussianAttack = 3 ;
13521: LD_ADDR_EXP 23
13525: PUSH
13526: LD_INT 3
13528: ST_TO_ADDR
13529: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13530: LD_EXP 28
13534: PUSH
13535: LD_INT 0
13537: EQUAL
13538: IFFALSE 13619
13540: GO 13542
13542: DISABLE
// begin timerStatus = 4 ;
13543: LD_ADDR_EXP 29
13547: PUSH
13548: LD_INT 4
13550: ST_TO_ADDR
// DialogueOn ;
13551: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13555: LD_EXP 13
13559: PPUSH
13560: LD_STRING D2-Don-1
13562: PPUSH
13563: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13567: LD_EXP 1
13571: PPUSH
13572: LD_STRING D2-JMM-1
13574: PPUSH
13575: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13579: LD_EXP 13
13583: PPUSH
13584: LD_STRING D2-Don-2
13586: PPUSH
13587: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13591: LD_EXP 1
13595: PPUSH
13596: LD_STRING D2-JMM-2
13598: PPUSH
13599: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13603: LD_EXP 13
13607: PPUSH
13608: LD_STRING D2-Don-3
13610: PPUSH
13611: CALL_OW 94
// DialogueOff ;
13615: CALL_OW 7
// end ;
13619: END
// every 12 12$0 do var tmp ;
13620: GO 13622
13622: DISABLE
13623: LD_INT 0
13625: PPUSH
// begin PrepareDonaldsonArmy ;
13626: CALL 999 0 0
// CenterNowOnUnits ( Donaldson ) ;
13630: LD_EXP 13
13634: PPUSH
13635: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13639: LD_ADDR_VAR 0 1
13643: PUSH
13644: LD_INT 22
13646: PUSH
13647: LD_INT 4
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 21
13656: PUSH
13657: LD_INT 1
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 26
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 25
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: PUSH
13695: LD_EXP 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: DIFF
13703: ST_TO_ADDR
// DialogueOn ;
13704: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13708: LD_VAR 0 1
13712: PPUSH
13713: LD_STRING D3-Sol1-1
13715: PPUSH
13716: LD_STRING D3-Sol1-1
13718: PPUSH
13719: CALL 4050 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13723: LD_INT 22
13725: PUSH
13726: LD_INT 4
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 1
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 26
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 25
13755: PUSH
13756: LD_INT 3
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: PPUSH
13774: LD_STRING D3-Sol2-1
13776: PPUSH
13777: LD_STRING D3-Sol2-1
13779: PPUSH
13780: CALL 4050 0 3
// if Frank then
13784: LD_EXP 5
13788: IFFALSE 13802
// Say ( Frank , D3-Frank-1 ) ;
13790: LD_EXP 5
13794: PPUSH
13795: LD_STRING D3-Frank-1
13797: PPUSH
13798: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13802: LD_EXP 13
13806: PPUSH
13807: LD_STRING D3-Don-1
13809: PPUSH
13810: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13814: LD_EXP 13
13818: PPUSH
13819: LD_STRING D3-Don-1a
13821: PPUSH
13822: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13826: LD_EXP 1
13830: PPUSH
13831: LD_STRING D3-JMM-1
13833: PPUSH
13834: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13838: LD_EXP 13
13842: PPUSH
13843: LD_STRING D3-Don-2
13845: PPUSH
13846: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13850: LD_INT 22
13852: PUSH
13853: LD_INT 6
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 21
13862: PUSH
13863: LD_INT 1
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: PUSH
13879: LD_INT 0
13881: GREATER
13882: IFFALSE 14020
// begin Say ( JMM , D3-JMM-2 ) ;
13884: LD_EXP 1
13888: PPUSH
13889: LD_STRING D3-JMM-2
13891: PPUSH
13892: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13896: LD_EXP 13
13900: PPUSH
13901: LD_STRING D3-Don-3
13903: PPUSH
13904: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13908: LD_EXP 1
13912: PPUSH
13913: LD_STRING D3-JMM-3
13915: PPUSH
13916: CALL_OW 88
// if IsOK ( Frank ) then
13920: LD_EXP 5
13924: PPUSH
13925: CALL_OW 302
13929: IFFALSE 13943
// Say ( Frank , D3-Frank-3 ) ;
13931: LD_EXP 5
13935: PPUSH
13936: LD_STRING D3-Frank-3
13938: PPUSH
13939: CALL_OW 88
// DialogueOff ;
13943: CALL_OW 7
// if IsOK ( Frank ) then
13947: LD_EXP 5
13951: PPUSH
13952: CALL_OW 302
13956: IFFALSE 14018
// begin SetSide ( Frank , 0 ) ;
13958: LD_EXP 5
13962: PPUSH
13963: LD_INT 0
13965: PPUSH
13966: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13970: LD_EXP 5
13974: PPUSH
13975: LD_INT 12
13977: PPUSH
13978: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13982: LD_EXP 5
13986: PPUSH
13987: LD_STRING Frank
13989: PPUSH
13990: CALL_OW 38
// Wait ( 0 0$3 ) ;
13994: LD_INT 105
13996: PPUSH
13997: CALL_OW 67
// frankScoutBase = 1 ;
14001: LD_ADDR_EXP 25
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14009: LD_EXP 5
14013: PPUSH
14014: CALL_OW 64
// end ; end else
14018: GO 14107
// begin Say ( JMM , D3-JMM-4 ) ;
14020: LD_EXP 1
14024: PPUSH
14025: LD_STRING D3-JMM-4
14027: PPUSH
14028: CALL_OW 88
// DialogueOff ;
14032: CALL_OW 7
// if IsOK ( Frank ) then
14036: LD_EXP 5
14040: PPUSH
14041: CALL_OW 302
14045: IFFALSE 14107
// begin SetSide ( Frank , 0 ) ;
14047: LD_EXP 5
14051: PPUSH
14052: LD_INT 0
14054: PPUSH
14055: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14059: LD_EXP 5
14063: PPUSH
14064: LD_INT 12
14066: PPUSH
14067: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
14071: LD_EXP 5
14075: PPUSH
14076: LD_STRING Frank
14078: PPUSH
14079: CALL_OW 38
// Wait ( 0 0$3 ) ;
14083: LD_INT 105
14085: PPUSH
14086: CALL_OW 67
// frankScoutBase = 1 ;
14090: LD_ADDR_EXP 25
14094: PUSH
14095: LD_INT 1
14097: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14098: LD_EXP 5
14102: PPUSH
14103: CALL_OW 64
// end ; end ; end ;
14107: PPOPN 1
14109: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
14110: LD_EXP 13
14114: PPUSH
14115: CALL_OW 255
14119: PUSH
14120: LD_INT 4
14122: EQUAL
14123: PUSH
14124: LD_EXP 13
14128: PPUSH
14129: CALL_OW 302
14133: AND
14134: IFFALSE 14159
14136: GO 14138
14138: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14139: LD_EXP 13
14143: PPUSH
14144: LD_STRING D3b-Don-1
14146: PPUSH
14147: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14151: LD_ADDR_EXP 41
14155: PUSH
14156: LD_INT 1
14158: ST_TO_ADDR
// end ;
14159: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
14160: LD_EXP 24
14164: PUSH
14165: LD_INT 0
14167: EQUAL
14168: IFFALSE 14324
14170: GO 14172
14172: DISABLE
14173: LD_INT 0
14175: PPUSH
14176: PPUSH
// begin enable ;
14177: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
14178: LD_ADDR_VAR 0 1
14182: PUSH
14183: LD_INT 22
14185: PUSH
14186: LD_INT 4
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PPUSH
14207: CALL_OW 69
14211: PUSH
14212: FOR_IN
14213: IFFALSE 14322
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: LD_INT 22
14222: PUSH
14223: LD_INT 1
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 21
14232: PUSH
14233: LD_INT 1
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: PUSH
14249: FOR_IN
14250: IFFALSE 14318
// begin if GetDistUnits ( i , j ) < 7 then
14252: LD_VAR 0 1
14256: PPUSH
14257: LD_VAR 0 2
14261: PPUSH
14262: CALL_OW 296
14266: PUSH
14267: LD_INT 7
14269: LESS
14270: IFFALSE 14316
// begin saveDonaldson = 1 ;
14272: LD_ADDR_EXP 24
14276: PUSH
14277: LD_INT 1
14279: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14280: LD_INT 22
14282: PUSH
14283: LD_INT 4
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 21
14292: PUSH
14293: LD_INT 1
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PPUSH
14304: CALL_OW 69
14308: PPUSH
14309: LD_INT 1
14311: PPUSH
14312: CALL_OW 235
// end ; end ;
14316: GO 14249
14318: POP
14319: POP
// end ;
14320: GO 14212
14322: POP
14323: POP
// end ;
14324: PPOPN 2
14326: END
// every 2 2$0 trigger saveDonaldson = 1 do
14327: LD_EXP 24
14331: PUSH
14332: LD_INT 1
14334: EQUAL
14335: IFFALSE 14638
14337: GO 14339
14339: DISABLE
// begin uc_side = 4 ;
14340: LD_ADDR_OWVAR 20
14344: PUSH
14345: LD_INT 4
14347: ST_TO_ADDR
// uc_nation = 1 ;
14348: LD_ADDR_OWVAR 21
14352: PUSH
14353: LD_INT 1
14355: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
14356: LD_ADDR_EXP 5
14360: PUSH
14361: LD_STRING Frank
14363: PPUSH
14364: CALL_OW 34
14368: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14369: LD_EXP 5
14373: PPUSH
14374: LD_INT 13
14376: PPUSH
14377: LD_INT 0
14379: PPUSH
14380: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14384: LD_INT 35
14386: PPUSH
14387: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14391: LD_EXP 1
14395: PPUSH
14396: CALL_OW 310
14400: NOT
14401: PUSH
14402: LD_EXP 1
14406: PPUSH
14407: LD_INT 4
14409: PPUSH
14410: CALL_OW 296
14414: PUSH
14415: LD_INT 20
14417: LESS
14418: AND
14419: IFFALSE 14452
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14421: LD_EXP 5
14425: PPUSH
14426: LD_EXP 1
14430: PPUSH
14431: CALL_OW 250
14435: PPUSH
14436: LD_EXP 1
14440: PPUSH
14441: CALL_OW 251
14445: PPUSH
14446: CALL_OW 111
14450: GO 14467
// ComMoveXY ( Frank , 51 , 15 ) ;
14452: LD_EXP 5
14456: PPUSH
14457: LD_INT 51
14459: PPUSH
14460: LD_INT 15
14462: PPUSH
14463: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14467: LD_EXP 5
14471: PPUSH
14472: LD_EXP 1
14476: PPUSH
14477: CALL_OW 296
14481: PUSH
14482: LD_INT 10
14484: LESS
14485: IFFALSE 14384
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14487: LD_EXP 1
14491: PUSH
14492: LD_EXP 5
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PPUSH
14501: CALL_OW 87
// DialogueOn ;
14505: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14509: LD_EXP 5
14513: PPUSH
14514: LD_STRING D3a-Frank-1
14516: PPUSH
14517: CALL_OW 88
// if Lisa then
14521: LD_EXP 4
14525: IFFALSE 14575
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14527: LD_EXP 4
14531: PPUSH
14532: LD_STRING D3a-Lisa-1
14534: PPUSH
14535: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14539: LD_EXP 5
14543: PPUSH
14544: LD_STRING D3a-Frank-2
14546: PPUSH
14547: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14551: LD_EXP 4
14555: PPUSH
14556: LD_STRING D3a-Lisa-2
14558: PPUSH
14559: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14563: LD_EXP 5
14567: PPUSH
14568: LD_STRING D3a-Frank-3
14570: PPUSH
14571: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14575: LD_EXP 1
14579: PPUSH
14580: LD_STRING D3a-JMM-3
14582: PPUSH
14583: CALL_OW 88
// DialogueOff ;
14587: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14591: LD_EXP 5
14595: PPUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 235
// InGameOn ;
14603: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14607: LD_INT 1
14609: PPUSH
14610: LD_INT 7
14612: PPUSH
14613: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14617: LD_INT 93
14619: PPUSH
14620: LD_INT 91
14622: PPUSH
14623: CALL_OW 84
// wait ( 0 0$5 ) ;
14627: LD_INT 175
14629: PPUSH
14630: CALL_OW 67
// InGameOff ;
14634: CALL_OW 9
// end ;
14638: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14639: LD_OWVAR 67
14643: PUSH
14644: LD_INT 2
14646: EQUAL
14647: PUSH
14648: LD_OWVAR 67
14652: PUSH
14653: LD_INT 3
14655: EQUAL
14656: OR
14657: IFFALSE 14681
14659: GO 14661
14661: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14662: LD_INT 24
14664: PPUSH
14665: LD_INT 24
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: LD_INT 1
14673: PPUSH
14674: LD_INT 53
14676: PPUSH
14677: CALL_OW 125
14681: END
// every 18 18$0 do
14682: GO 14684
14684: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14685: LD_EXP 14
14689: PPUSH
14690: LD_STRING D4-Har-1
14692: PPUSH
14693: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14697: LD_EXP 1
14701: PPUSH
14702: LD_STRING D4-JMM-1
14704: PPUSH
14705: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14709: LD_EXP 14
14713: PPUSH
14714: LD_STRING D4-Har-2
14716: PPUSH
14717: CALL_OW 94
// case query ( Q1 ) of 1 :
14721: LD_STRING Q1
14723: PPUSH
14724: CALL_OW 97
14728: PUSH
14729: LD_INT 1
14731: DOUBLE
14732: EQUAL
14733: IFTRUE 14737
14735: GO 14796
14737: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14738: LD_EXP 1
14742: PPUSH
14743: LD_STRING D5-JMM-1
14745: PPUSH
14746: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14750: LD_EXP 14
14754: PPUSH
14755: LD_STRING D5-Har-1
14757: PPUSH
14758: CALL_OW 94
// timeToSupport = 10 10$0 ;
14762: LD_ADDR_EXP 28
14766: PUSH
14767: LD_INT 21000
14769: ST_TO_ADDR
// timerStatus = 2 ;
14770: LD_ADDR_EXP 29
14774: PUSH
14775: LD_INT 2
14777: ST_TO_ADDR
// startTimer = 1 ;
14778: LD_ADDR_EXP 30
14782: PUSH
14783: LD_INT 1
14785: ST_TO_ADDR
// harrAnswer = 1 ;
14786: LD_ADDR_EXP 26
14790: PUSH
14791: LD_INT 1
14793: ST_TO_ADDR
// end ; 2 :
14794: GO 14931
14796: LD_INT 2
14798: DOUBLE
14799: EQUAL
14800: IFTRUE 14804
14802: GO 14863
14804: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14805: LD_EXP 1
14809: PPUSH
14810: LD_STRING D5-JMM-2
14812: PPUSH
14813: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14817: LD_EXP 14
14821: PPUSH
14822: LD_STRING D5-Har-2
14824: PPUSH
14825: CALL_OW 94
// timeToSupport = 5 5$0 ;
14829: LD_ADDR_EXP 28
14833: PUSH
14834: LD_INT 10500
14836: ST_TO_ADDR
// timerStatus = 2 ;
14837: LD_ADDR_EXP 29
14841: PUSH
14842: LD_INT 2
14844: ST_TO_ADDR
// startTimer = 1 ;
14845: LD_ADDR_EXP 30
14849: PUSH
14850: LD_INT 1
14852: ST_TO_ADDR
// harrAnswer = 2 ;
14853: LD_ADDR_EXP 26
14857: PUSH
14858: LD_INT 2
14860: ST_TO_ADDR
// end ; 3 :
14861: GO 14931
14863: LD_INT 3
14865: DOUBLE
14866: EQUAL
14867: IFTRUE 14871
14869: GO 14930
14871: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14872: LD_EXP 1
14876: PPUSH
14877: LD_STRING D5-JMM-3
14879: PPUSH
14880: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14884: LD_EXP 14
14888: PPUSH
14889: LD_STRING D5-Har-3
14891: PPUSH
14892: CALL_OW 94
// timeToSupport = 5 5$0 ;
14896: LD_ADDR_EXP 28
14900: PUSH
14901: LD_INT 10500
14903: ST_TO_ADDR
// timerStatus = 2 ;
14904: LD_ADDR_EXP 29
14908: PUSH
14909: LD_INT 2
14911: ST_TO_ADDR
// startTimer = 1 ;
14912: LD_ADDR_EXP 30
14916: PUSH
14917: LD_INT 1
14919: ST_TO_ADDR
// harrAnswer = 3 ;
14920: LD_ADDR_EXP 26
14924: PUSH
14925: LD_INT 3
14927: ST_TO_ADDR
// end ; end ;
14928: GO 14931
14930: POP
// end ;
14931: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14932: LD_EXP 29
14936: PUSH
14937: LD_INT 2
14939: EQUAL
14940: PUSH
14941: LD_EXP 28
14945: PUSH
14946: LD_INT 0
14948: EQUAL
14949: AND
14950: IFFALSE 15227
14952: GO 14954
14954: DISABLE
// begin timerStatus = 4 ;
14955: LD_ADDR_EXP 29
14959: PUSH
14960: LD_INT 4
14962: ST_TO_ADDR
// if harrAnswer = 1 then
14963: LD_EXP 26
14967: PUSH
14968: LD_INT 1
14970: EQUAL
14971: IFFALSE 15051
// begin PrepareHarrisonSupport ( 3 ) ;
14973: LD_INT 3
14975: PPUSH
14976: CALL 1563 0 1
// wait ( 1 1$0 ) ;
14980: LD_INT 2100
14982: PPUSH
14983: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14987: LD_EXP 14
14991: PPUSH
14992: LD_STRING D7-Har-1
14994: PPUSH
14995: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14999: LD_STRING M2
15001: PPUSH
15002: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15006: LD_ADDR_EXP 27
15010: PUSH
15011: LD_INT 31500
15013: PUSH
15014: LD_INT 10500
15016: PUSH
15017: LD_INT 8400
15019: PUSH
15020: LD_INT 6300
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: PUSH
15028: LD_OWVAR 67
15032: ARRAY
15033: PLUS
15034: ST_TO_ADDR
// startTimer = 1 ;
15035: LD_ADDR_EXP 30
15039: PUSH
15040: LD_INT 1
15042: ST_TO_ADDR
// timerStatus = 3 ;
15043: LD_ADDR_EXP 29
15047: PUSH
15048: LD_INT 3
15050: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15051: LD_EXP 26
15055: PUSH
15056: LD_INT 2
15058: EQUAL
15059: IFFALSE 15139
// begin PrepareHarrisonSupport ( 4 ) ;
15061: LD_INT 4
15063: PPUSH
15064: CALL 1563 0 1
// wait ( 1 1$0 ) ;
15068: LD_INT 2100
15070: PPUSH
15071: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15075: LD_EXP 14
15079: PPUSH
15080: LD_STRING D7-Har-1
15082: PPUSH
15083: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15087: LD_STRING M2
15089: PPUSH
15090: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15094: LD_ADDR_EXP 27
15098: PUSH
15099: LD_INT 27300
15101: PUSH
15102: LD_INT 8400
15104: PUSH
15105: LD_INT 8400
15107: PUSH
15108: LD_INT 6300
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: PUSH
15116: LD_OWVAR 67
15120: ARRAY
15121: PLUS
15122: ST_TO_ADDR
// startTimer = 1 ;
15123: LD_ADDR_EXP 30
15127: PUSH
15128: LD_INT 1
15130: ST_TO_ADDR
// timerStatus = 3 ;
15131: LD_ADDR_EXP 29
15135: PUSH
15136: LD_INT 3
15138: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15139: LD_EXP 26
15143: PUSH
15144: LD_INT 3
15146: EQUAL
15147: IFFALSE 15227
// begin PrepareHarrisonSupport ( 5 ) ;
15149: LD_INT 5
15151: PPUSH
15152: CALL 1563 0 1
// wait ( 1 1$0 ) ;
15156: LD_INT 2100
15158: PPUSH
15159: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15163: LD_EXP 14
15167: PPUSH
15168: LD_STRING D7-Har-1
15170: PPUSH
15171: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15175: LD_STRING M2
15177: PPUSH
15178: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15182: LD_ADDR_EXP 27
15186: PUSH
15187: LD_INT 21000
15189: PUSH
15190: LD_INT 8400
15192: PUSH
15193: LD_INT 6300
15195: PUSH
15196: LD_INT 4200
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: LD_OWVAR 67
15208: ARRAY
15209: PLUS
15210: ST_TO_ADDR
// startTimer = 1 ;
15211: LD_ADDR_EXP 30
15215: PUSH
15216: LD_INT 1
15218: ST_TO_ADDR
// timerStatus = 3 ;
15219: LD_ADDR_EXP 29
15223: PUSH
15224: LD_INT 3
15226: ST_TO_ADDR
// end ; end ;
15227: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15228: LD_EXP 27
15232: PUSH
15233: LD_INT 8400
15235: LESSEQUAL
15236: PUSH
15237: LD_EXP 29
15241: PUSH
15242: LD_INT 3
15244: EQUAL
15245: AND
15246: IFFALSE 15278
15248: GO 15250
15250: DISABLE
// begin DialogueOn ;
15251: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15255: LD_EXP 14
15259: PPUSH
15260: LD_STRING D7a-Har-1
15262: PPUSH
15263: CALL_OW 94
// DialogueOff ;
15267: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15271: LD_STRING M2a
15273: PPUSH
15274: CALL_OW 337
// end ;
15278: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
15279: LD_EXP 27
15283: PUSH
15284: LD_INT 0
15286: LESSEQUAL
15287: PUSH
15288: LD_EXP 29
15292: PUSH
15293: LD_INT 3
15295: EQUAL
15296: AND
15297: IFFALSE 15436
15299: GO 15301
15301: DISABLE
15302: LD_INT 0
15304: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15305: LD_ADDR_VAR 0 1
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_INT 1
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PPUSH
15320: CALL_OW 69
15324: PUSH
15325: LD_EXP 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: DIFF
15333: ST_TO_ADDR
// saveDonaldson = 2 ;
15334: LD_ADDR_EXP 24
15338: PUSH
15339: LD_INT 2
15341: ST_TO_ADDR
// DialogueOn ;
15342: CALL_OW 6
// if IsOK ( Donaldson ) then
15346: LD_EXP 13
15350: PPUSH
15351: CALL_OW 302
15355: IFFALSE 15371
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15357: LD_EXP 14
15361: PPUSH
15362: LD_STRING D8-Har-1
15364: PPUSH
15365: CALL_OW 94
// end else
15369: GO 15383
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15371: LD_EXP 14
15375: PPUSH
15376: LD_STRING D8-Har-1a
15378: PPUSH
15379: CALL_OW 94
// end ; DialogueOff ;
15383: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 4
15394: PPUSH
15395: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15399: LD_VAR 0 1
15403: PPUSH
15404: LD_INT 88
15406: PPUSH
15407: LD_INT 89
15409: PPUSH
15410: CALL_OW 114
// honor = 0 ;
15414: LD_ADDR_EXP 39
15418: PUSH
15419: LD_INT 0
15421: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15422: LD_INT 350
15424: PPUSH
15425: CALL_OW 67
// YouLost ( LostCommand ) ;
15429: LD_STRING LostCommand
15431: PPUSH
15432: CALL_OW 104
// end ;
15436: PPOPN 1
15438: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15439: LD_INT 22
15441: PUSH
15442: LD_INT 6
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PPUSH
15463: CALL_OW 69
15467: PUSH
15468: LD_INT 0
15470: EQUAL
15471: PUSH
15472: LD_EXP 20
15476: PUSH
15477: LD_INT 0
15479: EQUAL
15480: AND
15481: PUSH
15482: LD_EXP 42
15486: PUSH
15487: LD_INT 1
15489: EQUAL
15490: AND
15491: IFFALSE 15585
15493: GO 15495
15495: DISABLE
15496: LD_INT 0
15498: PPUSH
15499: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: LD_INT 22
15507: PUSH
15508: LD_INT 1
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 21
15517: PUSH
15518: LD_INT 1
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: LD_INT 23
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: ST_TO_ADDR
// for i in tmp do
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: LD_VAR 0 2
15554: PUSH
15555: FOR_IN
15556: IFFALSE 15583
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15558: LD_VAR 0 1
15562: PPUSH
15563: LD_INT 1
15565: PPUSH
15566: LD_INT 4
15568: PPUSH
15569: CALL_OW 12
15573: PPUSH
15574: LD_INT 500
15576: PPUSH
15577: CALL_OW 492
// end ;
15581: GO 15555
15583: POP
15584: POP
// end ; end_of_file
15585: PPOPN 2
15587: END
// every 0 0$1 trigger AIEnable = 1 do
15588: LD_EXP 37
15592: PUSH
15593: LD_INT 1
15595: EQUAL
15596: IFFALSE 15700
15598: GO 15600
15600: DISABLE
// begin enable ;
15601: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15602: LD_INT 3
15604: PPUSH
15605: LD_INT 21
15607: PPUSH
15608: LD_INT 7
15610: PPUSH
15611: CALL 5574 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15615: LD_INT 3
15617: PPUSH
15618: LD_INT 8
15620: PPUSH
15621: LD_INT 7
15623: PPUSH
15624: LD_INT 1
15626: PPUSH
15627: CALL 5900 0 4
// RepairVehicle ( 3 , RussianAttackRepair , 108 , 95 ) ;
15631: LD_INT 3
15633: PPUSH
15634: LD_INT 17
15636: PPUSH
15637: LD_INT 108
15639: PPUSH
15640: LD_INT 95
15642: PPUSH
15643: CALL 8985 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
15647: LD_INT 3
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL 6493 0 2
// if baseReadyToBuild = 2 then
15657: LD_EXP 20
15661: PUSH
15662: LD_INT 2
15664: EQUAL
15665: IFFALSE 15700
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15667: LD_INT 6
15669: PPUSH
15670: LD_EXP 21
15674: PPUSH
15675: LD_INT 6
15677: PPUSH
15678: CALL 5574 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15682: LD_INT 6
15684: PPUSH
15685: LD_INT 9
15687: PPUSH
15688: LD_INT 6
15690: PPUSH
15691: LD_EXP 22
15695: PPUSH
15696: CALL 5900 0 4
// end ; end ;
15700: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15701: LD_INT 22
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 21
15713: PUSH
15714: LD_INT 2
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 55
15723: PUSH
15724: EMPTY
15725: LIST
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: LD_INT 34
15732: PUSH
15733: LD_INT 51
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: PUSH
15755: LD_INT 0
15757: EQUAL
15758: PUSH
15759: LD_INT 1
15761: PPUSH
15762: CALL_OW 255
15766: PUSH
15767: LD_INT 3
15769: EQUAL
15770: AND
15771: PUSH
15772: LD_INT 21
15774: PPUSH
15775: CALL_OW 302
15779: AND
15780: PUSH
15781: LD_INT 21
15783: PPUSH
15784: CALL_OW 255
15788: PUSH
15789: LD_INT 3
15791: EQUAL
15792: AND
15793: PUSH
15794: LD_INT 21
15796: PPUSH
15797: CALL_OW 302
15801: AND
15802: IFFALSE 16007
15804: GO 15806
15806: DISABLE
// begin enable ;
15807: ENABLE
// if Difficulty = 1 then
15808: LD_OWVAR 67
15812: PUSH
15813: LD_INT 1
15815: EQUAL
15816: IFFALSE 15860
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15818: LD_INT 3
15820: PPUSH
15821: LD_INT 24
15823: PPUSH
15824: LD_OWVAR 67
15828: PUSH
15829: LD_INT 2
15831: PLUS
15832: PPUSH
15833: LD_INT 42
15835: PUSH
15836: LD_INT 42
15838: PUSH
15839: LD_INT 43
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: LD_INT 1
15852: PPUSH
15853: LD_INT 21
15855: PPUSH
15856: CALL 6339 0 7
// if Difficulty = 2 then
15860: LD_OWVAR 67
15864: PUSH
15865: LD_INT 2
15867: EQUAL
15868: IFFALSE 15935
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15870: LD_INT 3
15872: PPUSH
15873: LD_INT 24
15875: PPUSH
15876: LD_OWVAR 67
15880: PUSH
15881: LD_INT 2
15883: PLUS
15884: PPUSH
15885: LD_INT 42
15887: PUSH
15888: LD_INT 42
15890: PUSH
15891: LD_INT 43
15893: PUSH
15894: LD_INT 43
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: PPUSH
15903: LD_INT 1
15905: PPUSH
15906: LD_INT 1
15908: PPUSH
15909: LD_INT 21
15911: PUSH
15912: LD_INT 22
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 1
15921: PPUSH
15922: LD_INT 2
15924: PPUSH
15925: CALL_OW 12
15929: ARRAY
15930: PPUSH
15931: CALL 6339 0 7
// if Difficulty = 3 then
15935: LD_OWVAR 67
15939: PUSH
15940: LD_INT 3
15942: EQUAL
15943: IFFALSE 16007
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15945: LD_INT 3
15947: PPUSH
15948: LD_INT 24
15950: PPUSH
15951: LD_OWVAR 67
15955: PUSH
15956: LD_INT 2
15958: PPUSH
15959: LD_INT 3
15961: PPUSH
15962: CALL_OW 12
15966: PLUS
15967: PPUSH
15968: LD_INT 43
15970: PUSH
15971: LD_INT 43
15973: PUSH
15974: LD_INT 43
15976: PUSH
15977: LD_INT 43
15979: PUSH
15980: LD_INT 44
15982: PUSH
15983: LD_INT 44
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: PPUSH
15994: LD_INT 1
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: LD_INT 22
16002: PPUSH
16003: CALL 6339 0 7
// end ;
16007: END
// every 0 0$1 do
16008: GO 16010
16010: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16011: LD_INT 3
16013: PPUSH
16014: LD_INT 1
16016: PPUSH
16017: LD_INT 3
16019: PPUSH
16020: CALL 5489 0 3
16024: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16025: LD_EXP 20
16029: PUSH
16030: LD_INT 1
16032: EQUAL
16033: IFFALSE 16180
16035: GO 16037
16037: DISABLE
16038: LD_INT 0
16040: PPUSH
16041: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16042: LD_ADDR_VAR 0 2
16046: PUSH
16047: LD_INT 22
16049: PUSH
16050: LD_INT 6
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 21
16059: PUSH
16060: LD_INT 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 34
16069: PUSH
16070: LD_INT 51
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: LIST
16081: PPUSH
16082: CALL_OW 69
16086: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16087: LD_VAR 0 2
16091: PUSH
16092: LD_INT 1
16094: ARRAY
16095: PPUSH
16096: LD_EXP 21
16100: PPUSH
16101: CALL_OW 250
16105: PUSH
16106: LD_INT 5
16108: MINUS
16109: PPUSH
16110: LD_EXP 21
16114: PPUSH
16115: CALL_OW 251
16119: PUSH
16120: LD_INT 5
16122: MINUS
16123: PPUSH
16124: CALL_OW 111
// wait ( 0 0$5 ) ;
16128: LD_INT 175
16130: PPUSH
16131: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16135: LD_VAR 0 2
16139: PUSH
16140: LD_INT 1
16142: ARRAY
16143: PPUSH
16144: LD_INT 41
16146: PPUSH
16147: LD_INT 52
16149: PPUSH
16150: CALL_OW 177
// wait ( 0 0$40 ) ;
16154: LD_INT 1400
16156: PPUSH
16157: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16161: LD_VAR 0 2
16165: PUSH
16166: LD_INT 1
16168: ARRAY
16169: PPUSH
16170: LD_INT 41
16172: PPUSH
16173: LD_INT 44
16175: PPUSH
16176: CALL_OW 111
// end ;
16180: PPOPN 2
16182: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16183: LD_EXP 21
16187: PPUSH
16188: CALL_OW 274
16192: PPUSH
16193: LD_INT 1
16195: PPUSH
16196: CALL_OW 275
16200: PUSH
16201: LD_INT 100
16203: GREATEREQUAL
16204: IFFALSE 16432
16206: GO 16208
16208: DISABLE
16209: LD_INT 0
16211: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16212: LD_ADDR_VAR 0 1
16216: PUSH
16217: LD_INT 22
16219: PUSH
16220: LD_INT 6
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 21
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 25
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16257: LD_VAR 0 1
16261: PUSH
16262: LD_INT 1
16264: ARRAY
16265: PPUSH
16266: LD_INT 4
16268: PPUSH
16269: LD_INT 39
16271: PPUSH
16272: LD_INT 37
16274: PPUSH
16275: LD_INT 3
16277: PPUSH
16278: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16282: LD_VAR 0 1
16286: PUSH
16287: LD_INT 1
16289: ARRAY
16290: PPUSH
16291: LD_INT 29
16293: PPUSH
16294: LD_INT 42
16296: PPUSH
16297: LD_INT 54
16299: PPUSH
16300: LD_INT 3
16302: PPUSH
16303: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16307: LD_VAR 0 1
16311: PUSH
16312: LD_INT 1
16314: ARRAY
16315: PPUSH
16316: LD_INT 6
16318: PPUSH
16319: LD_INT 38
16321: PPUSH
16322: LD_INT 48
16324: PPUSH
16325: LD_INT 0
16327: PPUSH
16328: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16332: LD_VAR 0 1
16336: PUSH
16337: LD_INT 1
16339: ARRAY
16340: PPUSH
16341: LD_INT 2
16343: PPUSH
16344: LD_INT 32
16346: PPUSH
16347: LD_INT 38
16349: PPUSH
16350: LD_INT 2
16352: PPUSH
16353: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16357: LD_VAR 0 1
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: LD_INT 26
16368: PPUSH
16369: LD_INT 39
16371: PPUSH
16372: LD_INT 55
16374: PPUSH
16375: LD_INT 3
16377: PPUSH
16378: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16382: LD_VAR 0 1
16386: PUSH
16387: LD_INT 1
16389: ARRAY
16390: PPUSH
16391: LD_INT 32
16393: PPUSH
16394: LD_INT 31
16396: PPUSH
16397: LD_INT 31
16399: PPUSH
16400: LD_INT 3
16402: PPUSH
16403: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16407: LD_VAR 0 1
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: PPUSH
16416: LD_INT 31
16418: PPUSH
16419: LD_INT 50
16421: PPUSH
16422: LD_INT 51
16424: PPUSH
16425: LD_INT 4
16427: PPUSH
16428: CALL_OW 205
// end ; end_of_file
16432: PPOPN 1
16434: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16435: LD_INT 0
16437: PPUSH
16438: PPUSH
16439: PPUSH
16440: PPUSH
16441: PPUSH
16442: PPUSH
16443: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16444: LD_ADDR_VAR 0 3
16448: PUSH
16449: LD_INT 22
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 21
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 25
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: LD_INT 54
16484: PUSH
16485: EMPTY
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: PPUSH
16498: CALL_OW 69
16502: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16503: LD_ADDR_VAR 0 7
16507: PUSH
16508: LD_INT 22
16510: PUSH
16511: LD_INT 6
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 21
16520: PUSH
16521: LD_INT 1
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 25
16530: PUSH
16531: LD_INT 1
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 54
16540: PUSH
16541: EMPTY
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: PPUSH
16550: CALL_OW 69
16554: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16555: LD_ADDR_VAR 0 4
16559: PUSH
16560: LD_INT 22
16562: PUSH
16563: LD_INT 6
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 21
16572: PUSH
16573: LD_INT 1
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 25
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: PPUSH
16595: CALL_OW 69
16599: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16600: LD_ADDR_VAR 0 6
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 6
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 1
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 25
16627: PUSH
16628: LD_INT 4
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: PPUSH
16640: CALL_OW 69
16644: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16645: LD_ADDR_VAR 0 8
16649: PUSH
16650: LD_INT 22
16652: PUSH
16653: LD_INT 6
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 21
16662: PUSH
16663: LD_INT 2
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 34
16672: PUSH
16673: LD_INT 51
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: LIST
16684: PPUSH
16685: CALL_OW 69
16689: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 255
16699: PUSH
16700: LD_INT 6
16702: EQUAL
16703: PUSH
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 266
16713: PUSH
16714: LD_INT 0
16716: EQUAL
16717: AND
16718: IFFALSE 16738
// begin ruPDepot = building ;
16720: LD_ADDR_EXP 21
16724: PUSH
16725: LD_VAR 0 1
16729: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16730: LD_ADDR_EXP 20
16734: PUSH
16735: LD_INT 1
16737: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 266
16747: PUSH
16748: LD_INT 4
16750: EQUAL
16751: PUSH
16752: LD_VAR 0 1
16756: PPUSH
16757: CALL_OW 255
16761: PUSH
16762: LD_INT 6
16764: EQUAL
16765: AND
16766: IFFALSE 16799
// for i in tmpSold do
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: LD_VAR 0 3
16777: PUSH
16778: FOR_IN
16779: IFFALSE 16797
// ComEnterUnit ( i , building ) ;
16781: LD_VAR 0 2
16785: PPUSH
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 120
16795: GO 16778
16797: POP
16798: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 266
16808: PUSH
16809: LD_INT 6
16811: EQUAL
16812: PUSH
16813: LD_VAR 0 1
16817: PPUSH
16818: CALL_OW 255
16822: PUSH
16823: LD_INT 6
16825: EQUAL
16826: AND
16827: IFFALSE 16885
// begin for i in tmpSci do
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_VAR 0 6
16838: PUSH
16839: FOR_IN
16840: IFFALSE 16858
// ComEnterUnit ( i , building ) ;
16842: LD_VAR 0 2
16846: PPUSH
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 120
16856: GO 16839
16858: POP
16859: POP
// ResAllTechs ( 6 , building , 3 ) ;
16860: LD_INT 6
16862: PPUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: LD_INT 3
16870: PPUSH
16871: CALL 5489 0 3
// ruPLab = building ;
16875: LD_ADDR_EXP 22
16879: PUSH
16880: LD_VAR 0 1
16884: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 266
16894: PUSH
16895: LD_INT 2
16897: EQUAL
16898: PUSH
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 255
16908: PUSH
16909: LD_INT 6
16911: EQUAL
16912: AND
16913: IFFALSE 16964
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16915: LD_ADDR_VAR 0 5
16919: PUSH
16920: LD_VAR 0 8
16924: PUSH
16925: LD_INT 1
16927: ARRAY
16928: PPUSH
16929: CALL_OW 313
16933: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16934: LD_VAR 0 5
16938: PPUSH
16939: CALL_OW 121
// wait ( 0 0$1 ) ;
16943: LD_INT 35
16945: PPUSH
16946: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16950: LD_VAR 0 5
16954: PPUSH
16955: LD_VAR 0 1
16959: PPUSH
16960: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 266
16973: PUSH
16974: LD_INT 32
16976: EQUAL
16977: PUSH
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL_OW 255
16987: PUSH
16988: LD_INT 6
16990: EQUAL
16991: AND
16992: IFFALSE 17044
// begin ComPlaceWeapon ( building , 42 ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_INT 42
17001: PPUSH
17002: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17006: LD_VAR 0 7
17010: PUSH
17011: LD_INT 1
17013: ARRAY
17014: PPUSH
17015: CALL_OW 122
// wait ( 0 0$1 ) ;
17019: LD_INT 35
17021: PPUSH
17022: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17026: LD_VAR 0 7
17030: PUSH
17031: LD_INT 1
17033: ARRAY
17034: PPUSH
17035: LD_VAR 0 1
17039: PPUSH
17040: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17044: LD_VAR 0 1
17048: PPUSH
17049: CALL_OW 266
17053: PUSH
17054: LD_INT 31
17056: EQUAL
17057: PUSH
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 255
17067: PUSH
17068: LD_INT 6
17070: EQUAL
17071: AND
17072: IFFALSE 17138
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
17074: LD_VAR 0 7
17078: PUSH
17079: LD_INT 2
17081: ARRAY
17082: PPUSH
17083: CALL_OW 122
// wait ( 0 0$1 ) ;
17087: LD_INT 35
17089: PPUSH
17090: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17094: LD_VAR 0 7
17098: PUSH
17099: LD_INT 2
17101: ARRAY
17102: PPUSH
17103: LD_VAR 0 1
17107: PPUSH
17108: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17112: LD_VAR 0 4
17116: PUSH
17117: LD_INT 1
17119: ARRAY
17120: PPUSH
17121: LD_EXP 21
17125: PPUSH
17126: CALL_OW 120
// baseReadyToBuild = 2 ;
17130: LD_ADDR_EXP 20
17134: PUSH
17135: LD_INT 2
17137: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17138: LD_VAR 0 1
17142: PPUSH
17143: CALL_OW 266
17147: PUSH
17148: LD_INT 32
17150: EQUAL
17151: PUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 255
17161: PUSH
17162: LD_INT 1
17164: EQUAL
17165: AND
17166: PUSH
17167: LD_EXP 32
17171: PUSH
17172: LD_INT 0
17174: EQUAL
17175: AND
17176: IFFALSE 17421
// begin bunkerDialog = 1 ;
17178: LD_ADDR_EXP 32
17182: PUSH
17183: LD_INT 1
17185: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17186: LD_EXP 11
17190: PPUSH
17191: CALL_OW 302
17195: IFFALSE 17211
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17197: LD_EXP 11
17201: PPUSH
17202: LD_STRING D11-Eng1-1
17204: PPUSH
17205: CALL_OW 88
// end else
17209: GO 17407
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17211: LD_INT 22
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 21
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 25
17233: PUSH
17234: LD_INT 3
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 26
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 69
17261: PUSH
17262: LD_EXP 1
17266: PUSH
17267: EMPTY
17268: LIST
17269: PUSH
17270: LD_INT 0
17272: GREATER
17273: DIFF
17274: IFFALSE 17348
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17276: LD_INT 22
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 21
17288: PUSH
17289: LD_INT 1
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 25
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 26
17308: PUSH
17309: LD_INT 1
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: PPUSH
17322: CALL_OW 69
17326: PUSH
17327: LD_EXP 1
17331: PUSH
17332: EMPTY
17333: LIST
17334: DIFF
17335: PPUSH
17336: LD_STRING D11-Eng1-1
17338: PPUSH
17339: LD_STRING D11-Eng1-1
17341: PPUSH
17342: CALL 4050 0 3
// end else
17346: GO 17407
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17348: LD_INT 22
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 21
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 26
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 69
17387: PUSH
17388: LD_EXP 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: DIFF
17396: PPUSH
17397: LD_STRING D11-Eng1-1
17399: PPUSH
17400: LD_STRING D11-Eng1-1
17402: PPUSH
17403: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
17407: LD_EXP 33
17411: PUSH
17412: LD_INT 0
17414: EQUAL
17415: IFFALSE 17421
// EnergyDialog ;
17417: CALL 4541 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17421: LD_VAR 0 1
17425: PPUSH
17426: CALL_OW 266
17430: PUSH
17431: LD_INT 29
17433: EQUAL
17434: PUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 255
17444: PUSH
17445: LD_INT 1
17447: EQUAL
17448: AND
17449: IFFALSE 17459
// buildOil = 1 ;
17451: LD_ADDR_EXP 34
17455: PUSH
17456: LD_INT 1
17458: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 266
17468: PUSH
17469: LD_INT 26
17471: EQUAL
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 255
17482: PUSH
17483: LD_INT 1
17485: EQUAL
17486: AND
17487: IFFALSE 17497
// buildPower = 1 ;
17489: LD_ADDR_EXP 35
17493: PUSH
17494: LD_INT 1
17496: ST_TO_ADDR
// end ;
17497: PPOPN 8
17499: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 266
17509: PUSH
17510: LD_INT 3
17512: EQUAL
17513: PUSH
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL_OW 255
17523: PUSH
17524: LD_INT 1
17526: EQUAL
17527: AND
17528: PUSH
17529: LD_EXP 31
17533: PUSH
17534: LD_INT 0
17536: EQUAL
17537: AND
17538: IFFALSE 17854
// begin factoryDialog = 1 ;
17540: LD_ADDR_EXP 31
17544: PUSH
17545: LD_INT 1
17547: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17548: LD_INT 22
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 21
17560: PUSH
17561: LD_INT 3
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 30
17570: PUSH
17571: LD_INT 3
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 24
17580: PUSH
17581: LD_INT 1000
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: PPUSH
17594: CALL_OW 69
17598: PUSH
17599: LD_INT 1
17601: ARRAY
17602: PPUSH
17603: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17607: LD_EXP 1
17611: PPUSH
17612: LD_STRING D9a-JMM-1
17614: PPUSH
17615: CALL_OW 88
// if IsOK ( Campell ) then
17619: LD_EXP 12
17623: PPUSH
17624: CALL_OW 302
17628: IFFALSE 17644
// begin Say ( Campell , D9a-Mech1-1 ) ;
17630: LD_EXP 12
17634: PPUSH
17635: LD_STRING D9a-Mech1-1
17637: PPUSH
17638: CALL_OW 88
// end else
17642: GO 17840
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17644: LD_INT 22
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 21
17656: PUSH
17657: LD_INT 1
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 25
17666: PUSH
17667: LD_INT 3
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 26
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: PPUSH
17690: CALL_OW 69
17694: PUSH
17695: LD_EXP 1
17699: PUSH
17700: EMPTY
17701: LIST
17702: PUSH
17703: LD_INT 0
17705: GREATER
17706: DIFF
17707: IFFALSE 17781
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17709: LD_INT 22
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 21
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 25
17731: PUSH
17732: LD_INT 3
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 26
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 69
17759: PUSH
17760: LD_EXP 1
17764: PUSH
17765: EMPTY
17766: LIST
17767: DIFF
17768: PPUSH
17769: LD_STRING D9a-Mech1-1
17771: PPUSH
17772: LD_STRING D9a-Mech1-1
17774: PPUSH
17775: CALL 4050 0 3
// end else
17779: GO 17840
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17781: LD_INT 22
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 21
17793: PUSH
17794: LD_INT 1
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 26
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 69
17820: PUSH
17821: LD_EXP 1
17825: PUSH
17826: EMPTY
17827: LIST
17828: DIFF
17829: PPUSH
17830: LD_STRING D9a-Mech1-1
17832: PPUSH
17833: LD_STRING D9a-Mech1-1
17835: PPUSH
17836: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
17840: LD_EXP 33
17844: PUSH
17845: LD_INT 0
17847: EQUAL
17848: IFFALSE 17854
// EnergyDialog ;
17850: CALL 4541 0 0
// end ; end ;
17854: PPOPN 1
17856: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17857: LD_VAR 0 1
17861: PPUSH
17862: CALL_OW 247
17866: PUSH
17867: LD_INT 1
17869: EQUAL
17870: PUSH
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 255
17880: PUSH
17881: LD_INT 1
17883: EQUAL
17884: AND
17885: IFFALSE 17901
// lostCounter = lostCounter + 1 ;
17887: LD_ADDR_EXP 38
17891: PUSH
17892: LD_EXP 38
17896: PUSH
17897: LD_INT 1
17899: PLUS
17900: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17901: LD_VAR 0 1
17905: PPUSH
17906: CALL_OW 257
17910: PUSH
17911: LD_INT 3
17913: EQUAL
17914: PUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 255
17924: PUSH
17925: LD_INT 3
17927: EQUAL
17928: AND
17929: PUSH
17930: LD_INT 24
17932: PPUSH
17933: CALL_OW 302
17937: AND
17938: PUSH
17939: LD_INT 24
17941: PPUSH
17942: CALL_OW 255
17946: PUSH
17947: LD_INT 3
17949: EQUAL
17950: AND
17951: IFFALSE 18019
// begin uc_side = 3 ;
17953: LD_ADDR_OWVAR 20
17957: PUSH
17958: LD_INT 3
17960: ST_TO_ADDR
// uc_nation = 3 ;
17961: LD_ADDR_OWVAR 21
17965: PUSH
17966: LD_INT 3
17968: ST_TO_ADDR
// hc_gallery :=  ;
17969: LD_ADDR_OWVAR 33
17973: PUSH
17974: LD_STRING 
17976: ST_TO_ADDR
// hc_name :=  ;
17977: LD_ADDR_OWVAR 26
17981: PUSH
17982: LD_STRING 
17984: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17985: LD_INT 0
17987: PPUSH
17988: LD_EXP 16
17992: PPUSH
17993: LD_EXP 17
17997: PPUSH
17998: CALL_OW 12
18002: PPUSH
18003: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
18007: CALL_OW 44
18011: PPUSH
18012: LD_INT 24
18014: PPUSH
18015: CALL_OW 52
// end ; end ;
18019: PPOPN 1
18021: END
// on Contact ( side1 , side2 ) do var i , tmp ;
18022: LD_INT 0
18024: PPUSH
18025: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
18026: LD_ADDR_VAR 0 4
18030: PUSH
18031: LD_INT 22
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PPUSH
18041: CALL_OW 69
18045: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
18046: LD_VAR 0 1
18050: PUSH
18051: LD_INT 1
18053: EQUAL
18054: PUSH
18055: LD_VAR 0 2
18059: PUSH
18060: LD_INT 6
18062: EQUAL
18063: AND
18064: PUSH
18065: LD_EXP 41
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: AND
18074: IFFALSE 18129
// begin donaldsonCoopAttack = 0 ;
18076: LD_ADDR_EXP 41
18080: PUSH
18081: LD_INT 0
18083: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18084: LD_ADDR_VAR 0 3
18088: PUSH
18089: LD_INT 22
18091: PUSH
18092: LD_INT 4
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: EMPTY
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: PUSH
18107: FOR_IN
18108: IFFALSE 18127
// ComAgressiveMove ( i , 52 , 64 ) ;
18110: LD_VAR 0 3
18114: PPUSH
18115: LD_INT 52
18117: PPUSH
18118: LD_INT 64
18120: PPUSH
18121: CALL_OW 114
18125: GO 18107
18127: POP
18128: POP
// end ; end ;
18129: PPOPN 4
18131: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 264
18141: PUSH
18142: LD_INT 53
18144: EQUAL
18145: IFFALSE 18230
// begin CutTreeInArea ( vehicle , TreesArea ) ;
18147: LD_VAR 0 1
18151: PPUSH
18152: LD_INT 21
18154: PPUSH
18155: CALL 4757 0 2
// uc_side = 3 ;
18159: LD_ADDR_OWVAR 20
18163: PUSH
18164: LD_INT 3
18166: ST_TO_ADDR
// uc_nation = 3 ;
18167: LD_ADDR_OWVAR 21
18171: PUSH
18172: LD_INT 3
18174: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
18175: LD_INT 0
18177: PPUSH
18178: LD_EXP 17
18182: PPUSH
18183: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
18187: CALL_OW 44
18191: PPUSH
18192: LD_VAR 0 2
18196: PPUSH
18197: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
18201: LD_VAR 0 1
18205: PPUSH
18206: LD_INT 6
18208: PPUSH
18209: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
18213: LD_VAR 0 1
18217: PPUSH
18218: CALL_OW 313
18222: PPUSH
18223: LD_INT 6
18225: PPUSH
18226: CALL_OW 235
// end ; if building = rubfact0 and GetSide ( building ) = 3 then
18230: LD_VAR 0 2
18234: PUSH
18235: LD_INT 24
18237: EQUAL
18238: PUSH
18239: LD_VAR 0 2
18243: PPUSH
18244: CALL_OW 255
18248: PUSH
18249: LD_INT 3
18251: EQUAL
18252: AND
18253: IFFALSE 18316
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 264
18264: PUSH
18265: LD_INT 42
18267: EQUAL
18268: PUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: CALL_OW 264
18278: PUSH
18279: LD_INT 43
18281: EQUAL
18282: OR
18283: PUSH
18284: LD_VAR 0 1
18288: PPUSH
18289: CALL_OW 264
18293: PUSH
18294: LD_INT 44
18296: EQUAL
18297: OR
18298: IFFALSE 18316
// russianTanks = russianTanks ^ vehicle ;
18300: LD_ADDR_EXP 18
18304: PUSH
18305: LD_EXP 18
18309: PUSH
18310: LD_VAR 0 1
18314: ADD
18315: ST_TO_ADDR
// end ;
18316: PPOPN 2
18318: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18319: LD_INT 0
18321: PPUSH
18322: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
18323: LD_VAR 0 1
18327: PPUSH
18328: CALL_OW 255
18332: PUSH
18333: LD_INT 3
18335: EQUAL
18336: PUSH
18337: LD_VAR 0 1
18341: PPUSH
18342: CALL_OW 247
18346: PUSH
18347: LD_INT 2
18349: EQUAL
18350: AND
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 264
18361: PUSH
18362: LD_INT 42
18364: EQUAL
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 264
18375: PUSH
18376: LD_INT 43
18378: EQUAL
18379: OR
18380: PUSH
18381: LD_VAR 0 1
18385: PPUSH
18386: CALL_OW 264
18390: PUSH
18391: LD_INT 44
18393: EQUAL
18394: OR
18395: PUSH
18396: EMPTY
18397: LIST
18398: AND
18399: IFFALSE 18539
// begin AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18401: LD_INT 24
18403: PPUSH
18404: LD_VAR 0 1
18408: PPUSH
18409: CALL_OW 265
18413: PPUSH
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 262
18423: PPUSH
18424: LD_VAR 0 1
18428: PPUSH
18429: CALL_OW 263
18433: PPUSH
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 264
18443: PPUSH
18444: CALL_OW 185
// for i in russianDamageTanks do
18448: LD_ADDR_VAR 0 2
18452: PUSH
18453: LD_EXP 19
18457: PUSH
18458: FOR_IN
18459: IFFALSE 18494
// if i = unit then
18461: LD_VAR 0 2
18465: PUSH
18466: LD_VAR 0 1
18470: EQUAL
18471: IFFALSE 18492
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
18473: LD_ADDR_EXP 19
18477: PUSH
18478: LD_EXP 19
18482: PUSH
18483: LD_VAR 0 1
18487: PUSH
18488: EMPTY
18489: LIST
18490: DIFF
18491: ST_TO_ADDR
18492: GO 18458
18494: POP
18495: POP
// tmpMeh = UnitsInside ( unit ) ;
18496: LD_ADDR_VAR 0 3
18500: PUSH
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 313
18510: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
18511: LD_VAR 0 3
18515: PPUSH
18516: CALL_OW 121
// wait ( 0 0$01 ) ;
18520: LD_INT 35
18522: PPUSH
18523: CALL_OW 67
// ComEnterUnit ( tmpMeh , rubfact0 ) ;
18527: LD_VAR 0 3
18531: PPUSH
18532: LD_INT 24
18534: PPUSH
18535: CALL_OW 120
// end ; end ;
18539: PPOPN 3
18541: END
// on Command ( comandid ) do var i , j , tmp ;
18542: LD_INT 0
18544: PPUSH
18545: PPUSH
18546: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18547: LD_ADDR_VAR 0 2
18551: PUSH
18552: LD_INT 22
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 21
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 21
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PPUSH
18594: CALL_OW 69
18598: PUSH
18599: FOR_IN
18600: IFFALSE 18710
// begin if GetTaskList ( i ) > 0 then
18602: LD_VAR 0 2
18606: PPUSH
18607: CALL_OW 437
18611: PUSH
18612: LD_INT 0
18614: GREATER
18615: IFFALSE 18708
// begin for j = 1 to GetTaskList ( i ) do
18617: LD_ADDR_VAR 0 3
18621: PUSH
18622: DOUBLE
18623: LD_INT 1
18625: DEC
18626: ST_TO_ADDR
18627: LD_VAR 0 2
18631: PPUSH
18632: CALL_OW 437
18636: PUSH
18637: FOR_TO
18638: IFFALSE 18706
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18640: LD_ADDR_VAR 0 4
18644: PUSH
18645: LD_VAR 0 2
18649: PPUSH
18650: CALL_OW 437
18654: PUSH
18655: LD_VAR 0 3
18659: ARRAY
18660: PUSH
18661: LD_INT 4
18663: ARRAY
18664: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18665: LD_VAR 0 4
18669: PPUSH
18670: CALL_OW 255
18674: PUSH
18675: LD_INT 4
18677: EQUAL
18678: PUSH
18679: LD_VAR 0 4
18683: PPUSH
18684: CALL_OW 255
18688: PUSH
18689: LD_INT 0
18691: EQUAL
18692: OR
18693: IFFALSE 18704
// ComStop ( i ) ;
18695: LD_VAR 0 2
18699: PPUSH
18700: CALL_OW 141
// end ;
18704: GO 18637
18706: POP
18707: POP
// end ; end ;
18708: GO 18599
18710: POP
18711: POP
// end ; end_of_file
18712: PPOPN 4
18714: END
// every 10 10$0 do
18715: GO 18717
18717: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18718: LD_INT 5
18720: PPUSH
18721: LD_INT 3
18723: PPUSH
18724: LD_INT 2
18726: PPUSH
18727: LD_INT 5
18729: PPUSH
18730: CALL_OW 12
18734: PUSH
18735: LD_INT 2
18737: PUSH
18738: LD_INT 3
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: PUSH
18749: LD_OWVAR 67
18753: ARRAY
18754: PLUS
18755: PPUSH
18756: LD_INT 0
18758: PPUSH
18759: LD_INT 0
18761: PPUSH
18762: LD_INT 0
18764: PPUSH
18765: LD_INT 0
18767: PPUSH
18768: LD_EXP 16
18772: PPUSH
18773: LD_EXP 17
18777: PPUSH
18778: CALL_OW 12
18782: PPUSH
18783: LD_INT 4
18785: PPUSH
18786: LD_INT 14
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: LD_INT 2
18794: PPUSH
18795: CALL 6868 0 12
// end ;
18799: END
// every 15 15$0 do
18800: GO 18802
18802: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18803: LD_INT 5
18805: PPUSH
18806: LD_INT 3
18808: PPUSH
18809: LD_INT 3
18811: PPUSH
18812: LD_INT 5
18814: PPUSH
18815: CALL_OW 12
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: LD_INT 3
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: PUSH
18834: LD_OWVAR 67
18838: ARRAY
18839: PLUS
18840: PPUSH
18841: LD_INT 0
18843: PPUSH
18844: LD_INT 0
18846: PPUSH
18847: LD_INT 0
18849: PPUSH
18850: LD_INT 1
18852: PPUSH
18853: LD_EXP 16
18857: PPUSH
18858: LD_EXP 17
18862: PPUSH
18863: CALL_OW 12
18867: PPUSH
18868: LD_INT 4
18870: PPUSH
18871: LD_INT 14
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL 6868 0 12
// end ;
18884: END
// every 25 25$0 do
18885: GO 18887
18887: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18888: LD_INT 5
18890: PPUSH
18891: LD_INT 3
18893: PPUSH
18894: LD_INT 2
18896: PPUSH
18897: LD_INT 3
18899: PPUSH
18900: CALL_OW 12
18904: PUSH
18905: LD_INT 2
18907: PUSH
18908: LD_INT 3
18910: PUSH
18911: LD_INT 3
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: PUSH
18919: LD_OWVAR 67
18923: ARRAY
18924: PLUS
18925: PPUSH
18926: LD_INT 0
18928: PPUSH
18929: LD_INT 0
18931: PPUSH
18932: LD_INT 0
18934: PPUSH
18935: LD_INT 2
18937: PPUSH
18938: LD_EXP 16
18942: PPUSH
18943: LD_EXP 17
18947: PPUSH
18948: CALL_OW 12
18952: PPUSH
18953: LD_INT 4
18955: PPUSH
18956: LD_INT 14
18958: PPUSH
18959: LD_INT 1
18961: PPUSH
18962: LD_INT 1
18964: PPUSH
18965: CALL 6868 0 12
// end ;
18969: END
// every 26 26$0 do
18970: GO 18972
18972: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18973: LD_INT 5
18975: PPUSH
18976: LD_INT 3
18978: PPUSH
18979: LD_INT 1
18981: PPUSH
18982: LD_INT 3
18984: PPUSH
18985: CALL_OW 12
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: LIST
19003: PUSH
19004: LD_OWVAR 67
19008: ARRAY
19009: PLUS
19010: PPUSH
19011: LD_INT 0
19013: PPUSH
19014: LD_INT 0
19016: PPUSH
19017: LD_INT 0
19019: PPUSH
19020: LD_INT 2
19022: PPUSH
19023: LD_EXP 16
19027: PPUSH
19028: LD_EXP 17
19032: PPUSH
19033: CALL_OW 12
19037: PPUSH
19038: LD_INT 4
19040: PPUSH
19041: LD_INT 14
19043: PPUSH
19044: LD_INT 1
19046: PPUSH
19047: LD_INT 2
19049: PPUSH
19050: CALL 6868 0 12
// end ;
19054: END
// every 25 25$0 do
19055: GO 19057
19057: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19058: LD_INT 4
19060: PPUSH
19061: LD_INT 5
19063: PPUSH
19064: LD_INT 3
19066: PUSH
19067: LD_INT 4
19069: PUSH
19070: LD_INT 5
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: PUSH
19078: LD_OWVAR 67
19082: ARRAY
19083: PPUSH
19084: LD_EXP 16
19088: PPUSH
19089: LD_EXP 17
19093: PPUSH
19094: CALL_OW 12
19098: PPUSH
19099: LD_INT 3
19101: PPUSH
19102: LD_INT 1
19104: PPUSH
19105: LD_INT 1
19107: PPUSH
19108: LD_INT 42
19110: PUSH
19111: LD_INT 42
19113: PUSH
19114: LD_INT 43
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 42
19124: PUSH
19125: LD_INT 43
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 43
19134: PUSH
19135: LD_INT 43
19137: PUSH
19138: LD_INT 43
19140: PUSH
19141: LD_INT 44
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: PUSH
19155: LD_OWVAR 67
19159: ARRAY
19160: PPUSH
19161: EMPTY
19162: PPUSH
19163: EMPTY
19164: PPUSH
19165: LD_INT 1
19167: PPUSH
19168: CALL 9748 0 11
// end ; end_of_file
19172: END
// every 0 0$1 trigger startTimer = 1 do
19173: LD_EXP 30
19177: PUSH
19178: LD_INT 1
19180: EQUAL
19181: IFFALSE 19311
19183: GO 19185
19185: DISABLE
// begin enable ;
19186: ENABLE
// if timerStatus = 1 then
19187: LD_EXP 29
19191: PUSH
19192: LD_INT 1
19194: EQUAL
19195: IFFALSE 19228
// begin timeToSupport = timeToSupport - 0 0$01 ;
19197: LD_ADDR_EXP 28
19201: PUSH
19202: LD_EXP 28
19206: PUSH
19207: LD_INT 35
19209: MINUS
19210: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19211: LD_ADDR_OWVAR 47
19215: PUSH
19216: LD_STRING #Am04-1
19218: PUSH
19219: LD_EXP 28
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: ST_TO_ADDR
// end ; if timerStatus = 2 then
19228: LD_EXP 29
19232: PUSH
19233: LD_INT 2
19235: EQUAL
19236: IFFALSE 19269
// begin timeToSupport = timeToSupport - 0 0$01 ;
19238: LD_ADDR_EXP 28
19242: PUSH
19243: LD_EXP 28
19247: PUSH
19248: LD_INT 35
19250: MINUS
19251: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19252: LD_ADDR_OWVAR 47
19256: PUSH
19257: LD_STRING #Am04-2
19259: PUSH
19260: LD_EXP 28
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: ST_TO_ADDR
// end ; if timerStatus = 3 then
19269: LD_EXP 29
19273: PUSH
19274: LD_INT 3
19276: EQUAL
19277: IFFALSE 19293
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19279: LD_ADDR_EXP 27
19283: PUSH
19284: LD_EXP 27
19288: PUSH
19289: LD_INT 35
19291: MINUS
19292: ST_TO_ADDR
// end ; if timerStatus = 4 then
19293: LD_EXP 29
19297: PUSH
19298: LD_INT 4
19300: EQUAL
19301: IFFALSE 19311
// begin display_strings =  ;
19303: LD_ADDR_OWVAR 47
19307: PUSH
19308: LD_STRING 
19310: ST_TO_ADDR
// end ; end ; end_of_file
19311: END
// every 0 0$1 trigger IsDead ( JMM ) do
19312: LD_EXP 1
19316: PPUSH
19317: CALL_OW 301
19321: IFFALSE 19333
19323: GO 19325
19325: DISABLE
// YouLost ( JMM ) ;
19326: LD_STRING JMM
19328: PPUSH
19329: CALL_OW 104
19333: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19334: LD_INT 4
19336: PPUSH
19337: CALL_OW 301
19341: IFFALSE 19353
19343: GO 19345
19345: DISABLE
// YouLost ( Base ) ; end_of_file
19346: LD_STRING Base
19348: PPUSH
19349: CALL_OW 104
19353: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
19354: LD_EXP 15
19358: PPUSH
19359: CALL_OW 301
19363: IFFALSE 19745
19365: GO 19367
19367: DISABLE
19368: LD_INT 0
19370: PPUSH
// begin AIEnable = 0 ;
19371: LD_ADDR_EXP 37
19375: PUSH
19376: LD_INT 0
19378: ST_TO_ADDR
// escapeAvalaible = 1 ;
19379: LD_ADDR_EXP 40
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// InGameOn ;
19387: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19391: LD_INT 3
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: LD_INT 0
19402: PPUSH
19403: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19407: LD_INT 6
19409: PPUSH
19410: LD_INT 1
19412: PPUSH
19413: LD_INT 1
19415: PPUSH
19416: LD_INT 0
19418: PPUSH
19419: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19423: LD_INT 5
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: LD_INT 1
19431: PPUSH
19432: LD_INT 0
19434: PPUSH
19435: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19439: LD_INT 3
19441: PPUSH
19442: LD_INT 1
19444: PPUSH
19445: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19449: LD_INT 97
19451: PPUSH
19452: LD_INT 91
19454: PPUSH
19455: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19459: LD_INT 22
19461: PUSH
19462: LD_INT 3
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 21
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PPUSH
19483: CALL_OW 69
19487: PPUSH
19488: CALL_OW 121
// wait ( 0 0$01 ) ;
19492: LD_INT 35
19494: PPUSH
19495: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19499: LD_INT 22
19501: PUSH
19502: LD_INT 3
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 21
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PPUSH
19523: CALL_OW 69
19527: PPUSH
19528: LD_INT 124
19530: PPUSH
19531: LD_INT 98
19533: PPUSH
19534: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19538: LD_INT 22
19540: PUSH
19541: LD_INT 5
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 1
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PPUSH
19562: CALL_OW 69
19566: PPUSH
19567: CALL_OW 121
// wait ( 0 0$01 ) ;
19571: LD_INT 35
19573: PPUSH
19574: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19578: LD_INT 22
19580: PUSH
19581: LD_INT 5
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PPUSH
19602: CALL_OW 69
19606: PPUSH
19607: LD_INT 124
19609: PPUSH
19610: LD_INT 98
19612: PPUSH
19613: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19617: LD_INT 22
19619: PUSH
19620: LD_INT 6
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 21
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PPUSH
19641: CALL_OW 69
19645: PPUSH
19646: CALL_OW 121
// wait ( 0 0$01 ) ;
19650: LD_INT 35
19652: PPUSH
19653: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19657: LD_INT 22
19659: PUSH
19660: LD_INT 6
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 21
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PPUSH
19681: CALL_OW 69
19685: PPUSH
19686: LD_INT 124
19688: PPUSH
19689: LD_INT 98
19691: PPUSH
19692: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19696: LD_INT 22
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: PPUSH
19725: LD_INT 124
19727: PPUSH
19728: LD_INT 98
19730: PPUSH
19731: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19735: LD_INT 124
19737: PPUSH
19738: LD_INT 98
19740: PPUSH
19741: CALL_OW 84
// end ;
19745: PPOPN 1
19747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
19748: LD_INT 23
19750: PUSH
19751: LD_INT 3
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 21
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 24
19770: PUSH
19771: LD_INT 250
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: PPUSH
19783: CALL_OW 69
19787: PUSH
19788: LD_INT 0
19790: EQUAL
19791: IFFALSE 19800
19793: GO 19795
19795: DISABLE
// FinishMission ;
19796: CALL 19971 0 0
19800: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19801: LD_EXP 40
19805: PUSH
19806: LD_INT 1
19808: EQUAL
19809: IFFALSE 19968
19811: GO 19813
19813: DISABLE
19814: LD_INT 0
19816: PPUSH
// begin enable ;
19817: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19818: LD_ADDR_VAR 0 1
19822: PUSH
19823: LD_INT 22
19825: PUSH
19826: LD_INT 3
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PPUSH
19833: CALL_OW 69
19837: PUSH
19838: FOR_IN
19839: IFFALSE 19866
// if IsInArea ( i , RussianEscape ) then
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_INT 5
19848: PPUSH
19849: CALL_OW 308
19853: IFFALSE 19864
// RemoveUnit ( i ) ;
19855: LD_VAR 0 1
19859: PPUSH
19860: CALL_OW 64
19864: GO 19838
19866: POP
19867: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19868: LD_ADDR_VAR 0 1
19872: PUSH
19873: LD_INT 22
19875: PUSH
19876: LD_INT 5
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PPUSH
19883: CALL_OW 69
19887: PUSH
19888: FOR_IN
19889: IFFALSE 19916
// if IsInArea ( i , RussianEscape ) then
19891: LD_VAR 0 1
19895: PPUSH
19896: LD_INT 5
19898: PPUSH
19899: CALL_OW 308
19903: IFFALSE 19914
// RemoveUnit ( i ) ;
19905: LD_VAR 0 1
19909: PPUSH
19910: CALL_OW 64
19914: GO 19888
19916: POP
19917: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19918: LD_ADDR_VAR 0 1
19922: PUSH
19923: LD_INT 22
19925: PUSH
19926: LD_INT 6
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: PUSH
19938: FOR_IN
19939: IFFALSE 19966
// if IsInArea ( i , RussianEscape ) then
19941: LD_VAR 0 1
19945: PPUSH
19946: LD_INT 5
19948: PPUSH
19949: CALL_OW 308
19953: IFFALSE 19964
// RemoveUnit ( i ) ;
19955: LD_VAR 0 1
19959: PPUSH
19960: CALL_OW 64
19964: GO 19938
19966: POP
19967: POP
// end ;
19968: PPOPN 1
19970: END
// export function FinishMission ; var tmp ; begin
19971: LD_INT 0
19973: PPUSH
19974: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19975: LD_INT 69
19977: PPUSH
19978: LD_INT 1
19980: PPUSH
19981: CALL_OW 321
19985: PPUSH
19986: LD_STRING GatlingInGamma
19988: PPUSH
19989: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19993: LD_EXP 34
19997: PUSH
19998: LD_INT 1
20000: EQUAL
20001: PUSH
20002: LD_EXP 35
20006: PUSH
20007: LD_INT 1
20009: EQUAL
20010: AND
20011: IFFALSE 20025
// begin AddMedal ( oil , 1 ) ;
20013: LD_STRING oil
20015: PPUSH
20016: LD_INT 1
20018: PPUSH
20019: CALL_OW 101
// end else
20023: GO 20118
// begin if buildOil = 1 and buildPower = 0 then
20025: LD_EXP 34
20029: PUSH
20030: LD_INT 1
20032: EQUAL
20033: PUSH
20034: LD_EXP 35
20038: PUSH
20039: LD_INT 0
20041: EQUAL
20042: AND
20043: IFFALSE 20056
// AddMedal ( oil , - 1 ) ;
20045: LD_STRING oil
20047: PPUSH
20048: LD_INT 1
20050: NEG
20051: PPUSH
20052: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
20056: LD_EXP 34
20060: PUSH
20061: LD_INT 0
20063: EQUAL
20064: PUSH
20065: LD_EXP 35
20069: PUSH
20070: LD_INT 1
20072: EQUAL
20073: AND
20074: IFFALSE 20087
// AddMedal ( oil , - 2 ) ;
20076: LD_STRING oil
20078: PPUSH
20079: LD_INT 2
20081: NEG
20082: PPUSH
20083: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
20087: LD_EXP 34
20091: PUSH
20092: LD_INT 0
20094: EQUAL
20095: PUSH
20096: LD_EXP 35
20100: PUSH
20101: LD_INT 0
20103: EQUAL
20104: AND
20105: IFFALSE 20118
// AddMedal ( oil , - 3 ) ;
20107: LD_STRING oil
20109: PPUSH
20110: LD_INT 3
20112: NEG
20113: PPUSH
20114: CALL_OW 101
// end ; if lostCounter > 3 then
20118: LD_EXP 38
20122: PUSH
20123: LD_INT 3
20125: GREATER
20126: IFFALSE 20141
// begin AddMedal ( deaths , - 1 ) ;
20128: LD_STRING deaths
20130: PPUSH
20131: LD_INT 1
20133: NEG
20134: PPUSH
20135: CALL_OW 101
// end else
20139: GO 20151
// begin AddMedal ( deaths , 1 ) ;
20141: LD_STRING deaths
20143: PPUSH
20144: LD_INT 1
20146: PPUSH
20147: CALL_OW 101
// end ; if honor = 1 then
20151: LD_EXP 39
20155: PUSH
20156: LD_INT 1
20158: EQUAL
20159: IFFALSE 20173
// begin AddMedal ( honour , 1 ) ;
20161: LD_STRING honour
20163: PPUSH
20164: LD_INT 1
20166: PPUSH
20167: CALL_OW 101
// end else
20171: GO 20184
// begin AddMedal ( honour , - 1 ) ;
20173: LD_STRING honour
20175: PPUSH
20176: LD_INT 1
20178: NEG
20179: PPUSH
20180: CALL_OW 101
// end ; GiveMedals ( Main ) ;
20184: LD_STRING Main
20186: PPUSH
20187: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20191: LD_INT 22
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 23
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 21
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: PPUSH
20226: CALL_OW 69
20230: PPUSH
20231: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20235: LD_EXP 1
20239: PPUSH
20240: LD_EXP 44
20244: PUSH
20245: LD_STRING JMM
20247: STR
20248: PPUSH
20249: CALL_OW 38
// if IsOK ( Bobby ) then
20253: LD_EXP 2
20257: PPUSH
20258: CALL_OW 302
20262: IFFALSE 20282
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20264: LD_EXP 2
20268: PPUSH
20269: LD_EXP 44
20273: PUSH
20274: LD_STRING Bobby
20276: STR
20277: PPUSH
20278: CALL_OW 38
// if IsOK ( Cyrus ) then
20282: LD_EXP 3
20286: PPUSH
20287: CALL_OW 302
20291: IFFALSE 20311
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20293: LD_EXP 3
20297: PPUSH
20298: LD_EXP 44
20302: PUSH
20303: LD_STRING Cyrus
20305: STR
20306: PPUSH
20307: CALL_OW 38
// if IsOK ( Lisa ) then
20311: LD_EXP 4
20315: PPUSH
20316: CALL_OW 302
20320: IFFALSE 20340
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20322: LD_EXP 4
20326: PPUSH
20327: LD_EXP 44
20331: PUSH
20332: LD_STRING Lisa
20334: STR
20335: PPUSH
20336: CALL_OW 38
// if IsOK ( Brown ) then
20340: LD_EXP 7
20344: PPUSH
20345: CALL_OW 302
20349: IFFALSE 20369
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20351: LD_EXP 7
20355: PPUSH
20356: LD_EXP 44
20360: PUSH
20361: LD_STRING Brown
20363: STR
20364: PPUSH
20365: CALL_OW 38
// if IsOK ( Donaldson ) then
20369: LD_EXP 13
20373: PPUSH
20374: CALL_OW 302
20378: IFFALSE 20398
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20380: LD_EXP 13
20384: PPUSH
20385: LD_EXP 44
20389: PUSH
20390: LD_STRING Donaldson
20392: STR
20393: PPUSH
20394: CALL_OW 38
// if IsOK ( Frank ) then
20398: LD_EXP 5
20402: PPUSH
20403: CALL_OW 302
20407: IFFALSE 20427
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20409: LD_EXP 5
20413: PPUSH
20414: LD_EXP 44
20418: PUSH
20419: LD_STRING Frank
20421: STR
20422: PPUSH
20423: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20427: LD_INT 50
20429: PUSH
20430: EMPTY
20431: LIST
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 21
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: PPUSH
20458: CALL_OW 69
20462: PUSH
20463: LD_EXP 1
20467: PUSH
20468: LD_EXP 2
20472: PUSH
20473: LD_EXP 3
20477: PUSH
20478: LD_EXP 4
20482: PUSH
20483: LD_EXP 7
20487: PUSH
20488: LD_EXP 13
20492: PUSH
20493: LD_EXP 5
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: DIFF
20507: PPUSH
20508: LD_STRING 04_other_survivors
20510: PPUSH
20511: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20515: LD_INT 22
20517: PPUSH
20518: CALL 20531 0 1
// YouWin ;
20522: CALL_OW 103
// end ;
20526: LD_VAR 0 1
20530: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20531: LD_INT 0
20533: PPUSH
20534: PPUSH
20535: PPUSH
20536: PPUSH
// gammaBase = [ ] ;
20537: LD_ADDR_VAR 0 4
20541: PUSH
20542: EMPTY
20543: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20544: LD_ADDR_VAR 0 5
20548: PUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: LD_INT 22
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 21
20566: PUSH
20567: LD_INT 3
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 50
20576: PUSH
20577: EMPTY
20578: LIST
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: LIST
20584: PPUSH
20585: CALL_OW 70
20589: ST_TO_ADDR
// for i in buildings do
20590: LD_ADDR_VAR 0 3
20594: PUSH
20595: LD_VAR 0 5
20599: PUSH
20600: FOR_IN
20601: IFFALSE 20938
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20603: LD_VAR 0 3
20607: PPUSH
20608: CALL_OW 266
20612: PUSH
20613: LD_INT 6
20615: PUSH
20616: LD_INT 7
20618: PUSH
20619: LD_INT 8
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: LIST
20626: IN
20627: IFFALSE 20741
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20629: LD_ADDR_VAR 0 4
20633: PUSH
20634: LD_VAR 0 4
20638: PUSH
20639: LD_VAR 0 3
20643: PPUSH
20644: CALL_OW 266
20648: PUSH
20649: LD_VAR 0 3
20653: PPUSH
20654: CALL_OW 250
20658: PUSH
20659: LD_VAR 0 3
20663: PPUSH
20664: CALL_OW 251
20668: PUSH
20669: LD_VAR 0 3
20673: PPUSH
20674: CALL_OW 254
20678: PUSH
20679: LD_VAR 0 3
20683: PPUSH
20684: CALL_OW 267
20688: PUSH
20689: LD_VAR 0 3
20693: PPUSH
20694: CALL_OW 248
20698: PUSH
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: CALL_OW 268
20711: PUSH
20712: LD_VAR 0 3
20716: PPUSH
20717: LD_INT 2
20719: PPUSH
20720: CALL_OW 268
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: PUSH
20735: EMPTY
20736: LIST
20737: ADD
20738: ST_TO_ADDR
20739: GO 20936
// if GetBType ( i ) in [ b_bunker ] then
20741: LD_VAR 0 3
20745: PPUSH
20746: CALL_OW 266
20750: PUSH
20751: LD_INT 32
20753: PUSH
20754: EMPTY
20755: LIST
20756: IN
20757: IFFALSE 20854
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20759: LD_ADDR_VAR 0 4
20763: PUSH
20764: LD_VAR 0 4
20768: PUSH
20769: LD_VAR 0 3
20773: PPUSH
20774: CALL_OW 266
20778: PUSH
20779: LD_VAR 0 3
20783: PPUSH
20784: CALL_OW 250
20788: PUSH
20789: LD_VAR 0 3
20793: PPUSH
20794: CALL_OW 251
20798: PUSH
20799: LD_VAR 0 3
20803: PPUSH
20804: CALL_OW 254
20808: PUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: CALL_OW 267
20818: PUSH
20819: LD_VAR 0 3
20823: PPUSH
20824: CALL_OW 248
20828: PUSH
20829: LD_VAR 0 3
20833: PPUSH
20834: CALL_OW 269
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: ADD
20851: ST_TO_ADDR
20852: GO 20936
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20854: LD_ADDR_VAR 0 4
20858: PUSH
20859: LD_VAR 0 4
20863: PUSH
20864: LD_VAR 0 3
20868: PPUSH
20869: CALL_OW 266
20873: PUSH
20874: LD_VAR 0 3
20878: PPUSH
20879: CALL_OW 250
20883: PUSH
20884: LD_VAR 0 3
20888: PPUSH
20889: CALL_OW 251
20893: PUSH
20894: LD_VAR 0 3
20898: PPUSH
20899: CALL_OW 254
20903: PUSH
20904: LD_VAR 0 3
20908: PPUSH
20909: CALL_OW 267
20913: PUSH
20914: LD_VAR 0 3
20918: PPUSH
20919: CALL_OW 248
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: PUSH
20932: EMPTY
20933: LIST
20934: ADD
20935: ST_TO_ADDR
// end ;
20936: GO 20600
20938: POP
20939: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20940: LD_VAR 0 4
20944: PPUSH
20945: LD_STRING GammaBase
20947: PPUSH
20948: CALL_OW 39
// end ; end_of_file
20952: LD_VAR 0 2
20956: RET
// every 1 1$15 do
20957: GO 20959
20959: DISABLE
// begin if supply <= 13 and supply > 7 then
20960: LD_EXP 36
20964: PUSH
20965: LD_INT 13
20967: LESSEQUAL
20968: PUSH
20969: LD_EXP 36
20973: PUSH
20974: LD_INT 7
20976: GREATER
20977: AND
20978: IFFALSE 21001
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20980: LD_INT 3
20982: PPUSH
20983: LD_INT 5
20985: PPUSH
20986: CALL_OW 12
20990: PPUSH
20991: LD_INT 18
20993: PPUSH
20994: LD_INT 1
20996: PPUSH
20997: CALL_OW 55
// if supply <= 7 and supply > 4 then
21001: LD_EXP 36
21005: PUSH
21006: LD_INT 7
21008: LESSEQUAL
21009: PUSH
21010: LD_EXP 36
21014: PUSH
21015: LD_INT 4
21017: GREATER
21018: AND
21019: IFFALSE 21042
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
21021: LD_INT 3
21023: PPUSH
21024: LD_INT 5
21026: PPUSH
21027: CALL_OW 12
21031: PPUSH
21032: LD_INT 19
21034: PPUSH
21035: LD_INT 1
21037: PPUSH
21038: CALL_OW 55
// if supply <= 4 and supply > 0 then
21042: LD_EXP 36
21046: PUSH
21047: LD_INT 4
21049: LESSEQUAL
21050: PUSH
21051: LD_EXP 36
21055: PUSH
21056: LD_INT 0
21058: GREATER
21059: AND
21060: IFFALSE 21083
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
21062: LD_INT 3
21064: PPUSH
21065: LD_INT 5
21067: PPUSH
21068: CALL_OW 12
21072: PPUSH
21073: LD_INT 20
21075: PPUSH
21076: LD_INT 1
21078: PPUSH
21079: CALL_OW 55
// if supply > 0 then
21083: LD_EXP 36
21087: PUSH
21088: LD_INT 0
21090: GREATER
21091: IFFALSE 21108
// begin supply = supply - 1 ;
21093: LD_ADDR_EXP 36
21097: PUSH
21098: LD_EXP 36
21102: PUSH
21103: LD_INT 1
21105: MINUS
21106: ST_TO_ADDR
// enable ;
21107: ENABLE
// end ; end ;
21108: END
