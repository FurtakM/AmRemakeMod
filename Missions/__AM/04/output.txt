// export charactersList ; export JMM , Bobby , Cyrus , Lisa , Frank ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Brian , Jerry ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export donaldsonCoopAttack ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// ruSoldMinLevel = 0 ;
  12: LD_ADDR_EXP 18
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  20: LD_ADDR_EXP 19
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  28: LD_ADDR_EXP 20
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// debugMode = 1 ;
  36: LD_ADDR_EXP 40
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// firstRussianAttack = 0 ;
  44: LD_ADDR_EXP 22
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// saveDonaldson = 0 ;
  52: LD_ADDR_EXP 23
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// frankScoutBase = 0 ;
  60: LD_ADDR_EXP 24
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// harrAnswer = 0 ;
  68: LD_ADDR_EXP 25
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
  76: LD_ADDR_EXP 26
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
  84: LD_ADDR_EXP 27
  88: PUSH
  89: LD_INT 18900
  91: ST_TO_ADDR
// timerStatus = 0 ;
  92: LD_ADDR_EXP 28
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// startTimer = 0 ;
 100: LD_ADDR_EXP 29
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// factoryDialog = 0 ;
 108: LD_ADDR_EXP 30
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bunkerDialog = 0 ;
 116: LD_ADDR_EXP 31
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// energyVDialog = 0 ;
 124: LD_ADDR_EXP 32
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// buildOil = 0 ;
 132: LD_ADDR_EXP 33
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// buildPower = 0 ;
 140: LD_ADDR_EXP 34
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// supply = [ 13 , 12 , 11 ] [ Difficulty ] ;
 148: LD_ADDR_EXP 35
 152: PUSH
 153: LD_INT 13
 155: PUSH
 156: LD_INT 12
 158: PUSH
 159: LD_INT 11
 161: PUSH
 162: EMPTY
 163: LIST
 164: LIST
 165: LIST
 166: PUSH
 167: LD_OWVAR 67
 171: ARRAY
 172: ST_TO_ADDR
// AIEnable = 1 ;
 173: LD_ADDR_EXP 36
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 181: LD_ADDR_EXP 39
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lostCounter = 0 ;
 189: LD_ADDR_EXP 37
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// honor = 1 ;
 197: LD_ADDR_EXP 38
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// charactersList = [ JMM , Bobby , Cyrus , Lisa , Brian , Jerry , Frank , Brown , Dickens , Woodruff , Campell , Knight , Claptopn , Donaldson ] ;
 205: LD_ADDR_EXP 1
 209: PUSH
 210: LD_STRING JMM
 212: PUSH
 213: LD_STRING Bobby
 215: PUSH
 216: LD_STRING Cyrus
 218: PUSH
 219: LD_STRING Lisa
 221: PUSH
 222: LD_STRING Brian
 224: PUSH
 225: LD_STRING Jerry
 227: PUSH
 228: LD_STRING Frank
 230: PUSH
 231: LD_STRING Brown
 233: PUSH
 234: LD_STRING Dickens
 236: PUSH
 237: LD_STRING Woodruff
 239: PUSH
 240: LD_STRING Campell
 242: PUSH
 243: LD_STRING Knight
 245: PUSH
 246: LD_STRING Claptopn
 248: PUSH
 249: LD_STRING Donaldson
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: ST_TO_ADDR
// PrepareDifficulty ;
 268: CALL 2948 0 0
// PrepareRussianBase ;
 272: CALL 1267 0 0
// PrepareRussianCommander ;
 276: CALL 1218 0 0
// PrepareHeroes ;
 280: CALL 421 0 0
// SetBName ( ambdept0 , gamma ) ;
 284: LD_INT 4
 286: PPUSH
 287: LD_STRING gamma
 289: PPUSH
 290: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 294: LD_INT 21
 296: PPUSH
 297: LD_STRING fyodor
 299: PPUSH
 300: CALL_OW 500
// end ;
 304: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 305: LD_EXP 40
 309: PUSH
 310: LD_INT 1
 312: EQUAL
 313: IFFALSE 418
 315: GO 317
 317: DISABLE
 318: LD_INT 0
 320: PPUSH
// begin enable ;
 321: ENABLE
// fogoff ( true ) ;
 322: LD_INT 1
 324: PPUSH
 325: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 329: LD_ADDR_VAR 0 1
 333: PUSH
 334: LD_INT 22
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: LD_INT 21
 346: PUSH
 347: LD_INT 1
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PPUSH
 358: CALL_OW 69
 362: PUSH
 363: FOR_IN
 364: IFFALSE 380
// SetLives ( i , 1000 ) ;
 366: LD_VAR 0 1
 370: PPUSH
 371: LD_INT 1000
 373: PPUSH
 374: CALL_OW 234
 378: GO 363
 380: POP
 381: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 382: LD_INT 4
 384: PPUSH
 385: CALL_OW 274
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: LD_INT 9999
 395: PPUSH
 396: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 400: LD_INT 4
 402: PPUSH
 403: CALL_OW 274
 407: PPUSH
 408: LD_INT 2
 410: PPUSH
 411: LD_INT 9999
 413: PPUSH
 414: CALL_OW 277
// end ; end_of_file
 418: PPOPN 1
 420: END
// export function PrepareHeroes ; var i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
// uc_side = 1 ;
 425: LD_ADDR_OWVAR 20
 429: PUSH
 430: LD_INT 1
 432: ST_TO_ADDR
// uc_nation = 1 ;
 433: LD_ADDR_OWVAR 21
 437: PUSH
 438: LD_INT 1
 440: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 441: LD_ADDR_EXP 2
 445: PUSH
 446: LD_STRING JMM
 448: PPUSH
 449: LD_INT 0
 451: PPUSH
 452: CALL 2489 0 2
 456: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: LD_STRING Lisa
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL 2489 0 2
 472: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_STRING Brown
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL 2489 0 2
 488: ST_TO_ADDR
// Dickens = PrepareUnit ( JackDickens , false ) ;
 489: LD_ADDR_EXP 8
 493: PUSH
 494: LD_STRING JackDickens
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 2489 0 2
 504: ST_TO_ADDR
// Woodruff = PrepareUnit ( EveWoodruff , false ) ;
 505: LD_ADDR_EXP 9
 509: PUSH
 510: LD_STRING EveWoodruff
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL 2489 0 2
 520: ST_TO_ADDR
// Campell = PrepareUnit ( JackCampell , false ) ;
 521: LD_ADDR_EXP 12
 525: PUSH
 526: LD_STRING JackCampell
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL 2489 0 2
 536: ST_TO_ADDR
// Knight = PrepareUnit ( GeorgeKnight , false ) ;
 537: LD_ADDR_EXP 10
 541: PUSH
 542: LD_STRING GeorgeKnight
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL 2489 0 2
 552: ST_TO_ADDR
// Claptopn = PrepareUnit ( BillClaptopn , false ) ;
 553: LD_ADDR_EXP 11
 557: PUSH
 558: LD_STRING BillClaptopn
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL 2489 0 2
 568: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 569: LD_ADDR_EXP 16
 573: PUSH
 574: LD_STRING Harisson
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL 2489 0 2
 584: ST_TO_ADDR
// uc_side = 4 ;
 585: LD_ADDR_OWVAR 20
 589: PUSH
 590: LD_INT 4
 592: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 593: LD_ADDR_EXP 13
 597: PUSH
 598: LD_STRING Donaldson
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL 2489 0 2
 608: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 609: LD_ADDR_EXP 6
 613: PUSH
 614: LD_STRING Frank
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL 2489 0 2
 624: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 625: LD_EXP 2
 629: PPUSH
 630: LD_INT 32
 632: PPUSH
 633: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 637: LD_EXP 7
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 652: LD_EXP 7
 656: PPUSH
 657: LD_INT 32
 659: PPUSH
 660: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 664: LD_EXP 8
 668: PPUSH
 669: LD_INT 2
 671: PPUSH
 672: LD_INT 0
 674: PPUSH
 675: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 679: LD_EXP 9
 683: PPUSH
 684: LD_INT 2
 686: PPUSH
 687: LD_INT 0
 689: PPUSH
 690: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 694: LD_EXP 12
 698: PPUSH
 699: LD_INT 2
 701: PPUSH
 702: LD_INT 0
 704: PPUSH
 705: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 709: LD_EXP 10
 713: PPUSH
 714: LD_INT 2
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 724: LD_EXP 11
 728: PPUSH
 729: LD_INT 2
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 739: LD_EXP 5
 743: PPUSH
 744: LD_INT 2
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL_OW 49
// end ;
 754: LD_VAR 0 1
 758: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 759: LD_INT 0
 761: PPUSH
 762: PPUSH
 763: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 764: LD_EXP 13
 768: PPUSH
 769: LD_INT 10
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 779: LD_EXP 6
 783: PPUSH
 784: LD_INT 10
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 49
// uc_nation = 1 ;
 794: LD_ADDR_OWVAR 21
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// uc_side = 4 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 4
 809: ST_TO_ADDR
// for i := 1 to 4 do
 810: LD_ADDR_VAR 0 2
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 4
 822: PUSH
 823: FOR_TO
 824: IFFALSE 943
// begin hc_gallery =  ;
 826: LD_ADDR_OWVAR 33
 830: PUSH
 831: LD_STRING 
 833: ST_TO_ADDR
// hc_name =  ;
 834: LD_ADDR_OWVAR 26
 838: PUSH
 839: LD_STRING 
 841: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , rand ( [ 1 , 1 , 1 ] [ Difficulty ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ) ;
 842: LD_INT 0
 844: PPUSH
 845: LD_INT 1
 847: PUSH
 848: LD_INT 3
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 1
 857: PPUSH
 858: LD_INT 2
 860: PPUSH
 861: CALL_OW 12
 865: ARRAY
 866: PPUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 1
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: PPUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 2
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: LIST
 900: PUSH
 901: LD_OWVAR 67
 905: ARRAY
 906: PPUSH
 907: CALL_OW 12
 911: PPUSH
 912: CALL_OW 380
// un = CreateHuman ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: CALL_OW 44
 925: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
 926: LD_VAR 0 3
 930: PPUSH
 931: LD_INT 10
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: CALL_OW 49
// end ;
 941: GO 823
 943: POP
 944: POP
// end ;
 945: LD_VAR 0 1
 949: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
 950: LD_INT 0
 952: PPUSH
 953: PPUSH
 954: PPUSH
// uc_nation = 1 ;
 955: LD_ADDR_OWVAR 21
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// uc_side = 1 ;
 963: LD_ADDR_OWVAR 20
 967: PUSH
 968: LD_INT 1
 970: ST_TO_ADDR
// for i := 1 to count do
 971: LD_ADDR_VAR 0 3
 975: PUSH
 976: DOUBLE
 977: LD_INT 1
 979: DEC
 980: ST_TO_ADDR
 981: LD_VAR 0 1
 985: PUSH
 986: FOR_TO
 987: IFFALSE 1106
// begin hc_gallery =  ;
 989: LD_ADDR_OWVAR 33
 993: PUSH
 994: LD_STRING 
 996: ST_TO_ADDR
// hc_name =  ;
 997: LD_ADDR_OWVAR 26
1001: PUSH
1002: LD_STRING 
1004: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , rand ( [ 1 , 1 , 1 ] [ Difficulty ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ) ;
1005: LD_INT 0
1007: PPUSH
1008: LD_INT 1
1010: PUSH
1011: LD_INT 3
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 1
1020: PPUSH
1021: LD_INT 2
1023: PPUSH
1024: CALL_OW 12
1028: ARRAY
1029: PPUSH
1030: LD_INT 1
1032: PUSH
1033: LD_INT 1
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_OWVAR 67
1048: ARRAY
1049: PPUSH
1050: LD_INT 3
1052: PUSH
1053: LD_INT 2
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_OWVAR 67
1068: ARRAY
1069: PPUSH
1070: CALL_OW 12
1074: PPUSH
1075: CALL_OW 380
// un = CreateHuman ;
1079: LD_ADDR_VAR 0 4
1083: PUSH
1084: CALL_OW 44
1088: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1089: LD_VAR 0 4
1093: PPUSH
1094: LD_INT 11
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 49
// end ;
1104: GO 986
1106: POP
1107: POP
// CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
1108: LD_INT 11
1110: PPUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 21
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 26
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PPUSH
1146: CALL_OW 70
1150: PUSH
1151: LD_INT 1
1153: ARRAY
1154: PPUSH
1155: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
1159: LD_INT 11
1161: PPUSH
1162: LD_INT 22
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: PUSH
1172: LD_INT 21
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 26
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: PPUSH
1197: CALL_OW 70
1201: PUSH
1202: LD_INT 1
1204: ARRAY
1205: PPUSH
1206: LD_STRING D6-Sol3-1
1208: PPUSH
1209: CALL_OW 88
// end ; end_of_file
1213: LD_VAR 0 2
1217: RET
// export function PrepareRussianCommander ; begin
1218: LD_INT 0
1220: PPUSH
// uc_side = 3 ;
1221: LD_ADDR_OWVAR 20
1225: PUSH
1226: LD_INT 3
1228: ST_TO_ADDR
// uc_nation = 3 ;
1229: LD_ADDR_OWVAR 21
1233: PUSH
1234: LD_INT 3
1236: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
1237: LD_ADDR_EXP 17
1241: PUSH
1242: LD_STRING Stolypin
1244: PPUSH
1245: CALL_OW 25
1249: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
1250: LD_EXP 17
1254: PPUSH
1255: LD_INT 21
1257: PPUSH
1258: CALL_OW 52
// end ;
1262: LD_VAR 0 1
1266: RET
// export function PrepareRussianBase ; var i ; begin
1267: LD_INT 0
1269: PPUSH
1270: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
1271: LD_INT 3
1273: PPUSH
1274: LD_INT 3
1276: PPUSH
1277: LD_INT 22
1279: PPUSH
1280: LD_EXP 18
1284: PPUSH
1285: LD_EXP 19
1289: PPUSH
1290: CALL_OW 12
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: LD_INT 2
1300: PPUSH
1301: CALL 2546 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
1305: LD_INT 3
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: LD_INT 21
1313: PPUSH
1314: LD_EXP 18
1318: PPUSH
1319: LD_EXP 19
1323: PPUSH
1324: CALL_OW 12
1328: PPUSH
1329: LD_INT 2
1331: PPUSH
1332: LD_INT 3
1334: PPUSH
1335: CALL 2546 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
1339: LD_INT 3
1341: PPUSH
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 1
1347: PPUSH
1348: LD_EXP 18
1352: PPUSH
1353: LD_EXP 19
1357: PPUSH
1358: CALL_OW 12
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 2
1368: PPUSH
1369: CALL 2546 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 4 ) ;
1373: LD_INT 3
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 24
1381: PPUSH
1382: LD_EXP 18
1386: PPUSH
1387: LD_EXP 19
1391: PPUSH
1392: CALL_OW 12
1396: PPUSH
1397: LD_INT 3
1399: PPUSH
1400: LD_INT 4
1402: PPUSH
1403: CALL 2546 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 30
1424: PUSH
1425: LD_INT 32
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: PUSH
1441: FOR_IN
1442: IFFALSE 1482
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
1444: LD_INT 3
1446: PPUSH
1447: LD_INT 3
1449: PPUSH
1450: LD_VAR 0 2
1454: PPUSH
1455: LD_EXP 18
1459: PPUSH
1460: LD_EXP 19
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL 2546 0 6
1480: GO 1441
1482: POP
1483: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: LD_INT 22
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 30
1501: PUSH
1502: LD_INT 31
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: CALL_OW 69
1517: PUSH
1518: FOR_IN
1519: IFFALSE 1547
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
1521: LD_EXP 18
1525: PPUSH
1526: LD_EXP 19
1530: PPUSH
1531: CALL_OW 12
1535: PPUSH
1536: LD_VAR 0 2
1540: PPUSH
1541: CALL 2656 0 2
1545: GO 1518
1547: POP
1548: POP
// end ;
1549: LD_VAR 0 1
1553: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
1554: LD_INT 0
1556: PPUSH
1557: PPUSH
1558: PPUSH
1559: PPUSH
// uc_side = 6 ;
1560: LD_ADDR_OWVAR 20
1564: PUSH
1565: LD_INT 6
1567: ST_TO_ADDR
// uc_nation = 3 ;
1568: LD_ADDR_OWVAR 21
1572: PUSH
1573: LD_INT 3
1575: ST_TO_ADDR
// for i := 1 to 0 + [ 2 , 2 , 1 ] [ Difficulty ] do
1576: LD_ADDR_VAR 0 2
1580: PUSH
1581: DOUBLE
1582: LD_INT 1
1584: DEC
1585: ST_TO_ADDR
1586: LD_INT 0
1588: PUSH
1589: LD_INT 2
1591: PUSH
1592: LD_INT 2
1594: PUSH
1595: LD_INT 1
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_OWVAR 67
1607: ARRAY
1608: PLUS
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1771
// begin vc_engine = 1 ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_INT 1
1620: ST_TO_ADDR
// vc_control = 1 ;
1621: LD_ADDR_OWVAR 38
1625: PUSH
1626: LD_INT 1
1628: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
1629: LD_ADDR_OWVAR 40
1633: PUSH
1634: LD_INT 42
1636: PUSH
1637: LD_INT 42
1639: PUSH
1640: LD_INT 43
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: PUSH
1648: LD_OWVAR 67
1652: ARRAY
1653: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
1654: LD_ADDR_OWVAR 37
1658: PUSH
1659: LD_INT 21
1661: PUSH
1662: LD_INT 22
1664: PUSH
1665: LD_INT 22
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_OWVAR 67
1677: ARRAY
1678: ST_TO_ADDR
// veh = CreateVehicle ;
1679: LD_ADDR_VAR 0 3
1683: PUSH
1684: CALL_OW 45
1688: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
1689: LD_VAR 0 3
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL_OW 49
// hc_gallery =  ;
1704: LD_ADDR_OWVAR 33
1708: PUSH
1709: LD_STRING 
1711: ST_TO_ADDR
// hc_name =  ;
1712: LD_ADDR_OWVAR 26
1716: PUSH
1717: LD_STRING 
1719: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
1720: LD_INT 0
1722: PPUSH
1723: LD_INT 3
1725: PPUSH
1726: LD_EXP 18
1730: PPUSH
1731: LD_EXP 19
1735: PPUSH
1736: CALL_OW 12
1740: PPUSH
1741: CALL_OW 380
// un = CreateHuman ;
1745: LD_ADDR_VAR 0 4
1749: PUSH
1750: CALL_OW 44
1754: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1755: LD_VAR 0 4
1759: PPUSH
1760: LD_VAR 0 3
1764: PPUSH
1765: CALL_OW 52
// end ;
1769: GO 1610
1771: POP
1772: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
1773: LD_INT 0
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_EXP 18
1783: PPUSH
1784: LD_EXP 19
1788: PPUSH
1789: CALL_OW 12
1793: PUSH
1794: LD_INT 2
1796: PLUS
1797: PPUSH
1798: CALL_OW 380
// un = CreateHuman ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 44
1811: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
1827: LD_INT 0
1829: PPUSH
1830: LD_INT 4
1832: PPUSH
1833: LD_EXP 18
1837: PPUSH
1838: LD_EXP 19
1842: PPUSH
1843: CALL_OW 12
1847: PUSH
1848: LD_INT 2
1850: PLUS
1851: PPUSH
1852: CALL_OW 380
// un = CreateHuman ;
1856: LD_ADDR_VAR 0 4
1860: PUSH
1861: CALL_OW 44
1865: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
1866: LD_VAR 0 4
1870: PPUSH
1871: LD_INT 3
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) + 2 do
1881: LD_ADDR_VAR 0 2
1885: PUSH
1886: DOUBLE
1887: LD_INT 1
1889: DEC
1890: ST_TO_ADDR
1891: LD_INT 2
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 3
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_OWVAR 67
1909: ARRAY
1910: PUSH
1911: LD_INT 1
1913: PPUSH
1914: LD_INT 3
1916: PPUSH
1917: CALL_OW 12
1921: PLUS
1922: PUSH
1923: LD_INT 2
1925: PLUS
1926: PUSH
1927: FOR_TO
1928: IFFALSE 1998
// begin hc_gallery =  ;
1930: LD_ADDR_OWVAR 33
1934: PUSH
1935: LD_STRING 
1937: ST_TO_ADDR
// hc_name =  ;
1938: LD_ADDR_OWVAR 26
1942: PUSH
1943: LD_STRING 
1945: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
1946: LD_INT 0
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_EXP 18
1956: PPUSH
1957: LD_EXP 19
1961: PPUSH
1962: CALL_OW 12
1966: PPUSH
1967: CALL_OW 380
// un = CreateHuman ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
1981: LD_VAR 0 4
1985: PPUSH
1986: LD_INT 3
1988: PPUSH
1989: LD_INT 0
1991: PPUSH
1992: CALL_OW 49
// end ;
1996: GO 1927
1998: POP
1999: POP
// vc_engine = 1 ;
2000: LD_ADDR_OWVAR 39
2004: PUSH
2005: LD_INT 1
2007: ST_TO_ADDR
// vc_control = 1 ;
2008: LD_ADDR_OWVAR 38
2012: PUSH
2013: LD_INT 1
2015: ST_TO_ADDR
// vc_weapon = 51 ;
2016: LD_ADDR_OWVAR 40
2020: PUSH
2021: LD_INT 51
2023: ST_TO_ADDR
// vc_chassis = 22 ;
2024: LD_ADDR_OWVAR 37
2028: PUSH
2029: LD_INT 22
2031: ST_TO_ADDR
// veh = CreateVehicle ;
2032: LD_ADDR_VAR 0 3
2036: PUSH
2037: CALL_OW 45
2041: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2042: LD_VAR 0 3
2046: PPUSH
2047: LD_INT 3
2049: PPUSH
2050: LD_INT 0
2052: PPUSH
2053: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: LD_INT 100
2067: PPUSH
2068: CALL_OW 290
// hc_gallery =  ;
2072: LD_ADDR_OWVAR 33
2076: PUSH
2077: LD_STRING 
2079: ST_TO_ADDR
// hc_name =  ;
2080: LD_ADDR_OWVAR 26
2084: PUSH
2085: LD_STRING 
2087: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2088: LD_INT 0
2090: PPUSH
2091: LD_INT 3
2093: PPUSH
2094: LD_EXP 18
2098: PPUSH
2099: LD_EXP 19
2103: PPUSH
2104: CALL_OW 12
2108: PPUSH
2109: CALL_OW 380
// un = CreateHuman ;
2113: LD_ADDR_VAR 0 4
2117: PUSH
2118: CALL_OW 44
2122: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2123: LD_VAR 0 4
2127: PPUSH
2128: LD_VAR 0 3
2132: PPUSH
2133: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
2137: LD_ADDR_VAR 0 2
2141: PUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 6
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 1
2154: PUSH
2155: LD_INT 3
2157: PUSH
2158: LD_INT 25
2160: PUSH
2161: LD_INT 2
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 3
2174: PUSH
2175: LD_INT 25
2177: PUSH
2178: LD_INT 4
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: PPUSH
2198: CALL_OW 69
2202: PUSH
2203: FOR_IN
2204: IFFALSE 2223
// ComAgressiveMove ( i , 45 , 46 ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 45
2213: PPUSH
2214: LD_INT 46
2216: PPUSH
2217: CALL_OW 114
2221: GO 2203
2223: POP
2224: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
2225: LD_ADDR_VAR 0 2
2229: PUSH
2230: LD_INT 22
2232: PUSH
2233: LD_INT 6
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 25
2242: PUSH
2243: LD_INT 2
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PPUSH
2254: CALL_OW 69
2258: PUSH
2259: FOR_IN
2260: IFFALSE 2291
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
2262: LD_ADDR_EXP 21
2266: PUSH
2267: LD_VAR 0 2
2271: PPUSH
2272: LD_INT 0
2274: PPUSH
2275: LD_INT 48
2277: PPUSH
2278: LD_INT 55
2280: PPUSH
2281: LD_INT 5
2283: PPUSH
2284: CALL_OW 145
2288: ST_TO_ADDR
2289: GO 2259
2291: POP
2292: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
2293: LD_ADDR_VAR 0 2
2297: PUSH
2298: LD_INT 22
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PUSH
2308: LD_INT 25
2310: PUSH
2311: LD_INT 4
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PPUSH
2322: CALL_OW 69
2326: PUSH
2327: FOR_IN
2328: IFFALSE 2347
// ComMoveXY ( i , 39 , 55 ) ;
2330: LD_VAR 0 2
2334: PPUSH
2335: LD_INT 39
2337: PPUSH
2338: LD_INT 55
2340: PPUSH
2341: CALL_OW 111
2345: GO 2327
2347: POP
2348: POP
// end ;
2349: LD_VAR 0 1
2353: RET
// export function PrepareFirstAttack ; var i , un ; begin
2354: LD_INT 0
2356: PPUSH
2357: PPUSH
2358: PPUSH
// uc_side = 5 ;
2359: LD_ADDR_OWVAR 20
2363: PUSH
2364: LD_INT 5
2366: ST_TO_ADDR
// uc_nation = 3 ;
2367: LD_ADDR_OWVAR 21
2371: PUSH
2372: LD_INT 3
2374: ST_TO_ADDR
// for i := 1 to 4 do
2375: LD_ADDR_VAR 0 2
2379: PUSH
2380: DOUBLE
2381: LD_INT 1
2383: DEC
2384: ST_TO_ADDR
2385: LD_INT 4
2387: PUSH
2388: FOR_TO
2389: IFFALSE 2474
// begin hc_gallery =  ;
2391: LD_ADDR_OWVAR 33
2395: PUSH
2396: LD_STRING 
2398: ST_TO_ADDR
// hc_name =  ;
2399: LD_ADDR_OWVAR 26
2403: PUSH
2404: LD_STRING 
2406: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2407: LD_INT 0
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_EXP 18
2417: PPUSH
2418: LD_EXP 19
2422: PPUSH
2423: CALL_OW 12
2427: PPUSH
2428: CALL_OW 380
// un = CreateHuman ;
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: CALL_OW 44
2441: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
2442: LD_VAR 0 3
2446: PPUSH
2447: LD_INT 4
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
2457: LD_VAR 0 3
2461: PPUSH
2462: LD_INT 48
2464: PPUSH
2465: LD_INT 14
2467: PPUSH
2468: CALL_OW 114
// end ;
2472: GO 2388
2474: POP
2475: POP
// firstRussianAttack = 1 ;
2476: LD_ADDR_EXP 22
2480: PUSH
2481: LD_INT 1
2483: ST_TO_ADDR
// end ; end_of_file
2484: LD_VAR 0 1
2488: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2489: LD_INT 0
2491: PPUSH
2492: PPUSH
// if exist_mode then
2493: LD_VAR 0 2
2497: IFFALSE 2516
// begin unit := CreateCharacter ( ident ) ;
2499: LD_ADDR_VAR 0 4
2503: PUSH
2504: LD_VAR 0 1
2508: PPUSH
2509: CALL_OW 34
2513: ST_TO_ADDR
// end else
2514: GO 2531
// begin unit := NewCharacter ( ident ) ;
2516: LD_ADDR_VAR 0 4
2520: PUSH
2521: LD_VAR 0 1
2525: PPUSH
2526: CALL_OW 25
2530: ST_TO_ADDR
// end ; result := unit ;
2531: LD_ADDR_VAR 0 3
2535: PUSH
2536: LD_VAR 0 4
2540: ST_TO_ADDR
// end ;
2541: LD_VAR 0 3
2545: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
2546: LD_INT 0
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
// for i = 1 to count do
2552: LD_ADDR_VAR 0 8
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_VAR 0 6
2566: PUSH
2567: FOR_TO
2568: IFFALSE 2649
// begin uc_side = side ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_VAR 0 1
2579: ST_TO_ADDR
// uc_nation = nation ;
2580: LD_ADDR_OWVAR 21
2584: PUSH
2585: LD_VAR 0 2
2589: ST_TO_ADDR
// hc_gallery =  ;
2590: LD_ADDR_OWVAR 33
2594: PUSH
2595: LD_STRING 
2597: ST_TO_ADDR
// hc_name =  ;
2598: LD_ADDR_OWVAR 26
2602: PUSH
2603: LD_STRING 
2605: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
2606: LD_INT 0
2608: PPUSH
2609: LD_VAR 0 5
2613: PPUSH
2614: LD_VAR 0 4
2618: PPUSH
2619: CALL_OW 380
// un = CreateHuman ;
2623: LD_ADDR_VAR 0 10
2627: PUSH
2628: CALL_OW 44
2632: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
2633: LD_VAR 0 10
2637: PPUSH
2638: LD_VAR 0 3
2642: PPUSH
2643: CALL_OW 52
// end ;
2647: GO 2567
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 7
2655: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
// uc_side := GetSide ( b ) ;
2661: LD_ADDR_OWVAR 20
2665: PUSH
2666: LD_VAR 0 2
2670: PPUSH
2671: CALL_OW 255
2675: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
2676: LD_ADDR_OWVAR 21
2680: PUSH
2681: LD_VAR 0 2
2685: PPUSH
2686: CALL_OW 248
2690: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2691: LD_INT 0
2693: PPUSH
2694: LD_INT 1
2696: PPUSH
2697: LD_VAR 0 1
2701: PPUSH
2702: CALL_OW 380
// un = CreateHuman ;
2706: LD_ADDR_VAR 0 4
2710: PUSH
2711: CALL_OW 44
2715: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
2716: LD_ADDR_VAR 0 5
2720: PUSH
2721: LD_VAR 0 2
2725: PPUSH
2726: CALL_OW 254
2730: PUSH
2731: LD_INT 3
2733: MINUS
2734: ST_TO_ADDR
// if dir < 0 then
2735: LD_VAR 0 5
2739: PUSH
2740: LD_INT 0
2742: LESS
2743: IFFALSE 2759
// dir := 6 + dir ;
2745: LD_ADDR_VAR 0 5
2749: PUSH
2750: LD_INT 6
2752: PUSH
2753: LD_VAR 0 5
2757: PLUS
2758: ST_TO_ADDR
// SetDir ( un , dir ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_VAR 0 5
2768: PPUSH
2769: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2773: LD_VAR 0 4
2777: PPUSH
2778: LD_VAR 0 2
2782: PPUSH
2783: CALL_OW 52
// end ;
2787: LD_VAR 0 3
2791: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
2792: LD_INT 0
2794: PPUSH
2795: PPUSH
2796: PPUSH
// rnd = rand ( 1 , characters ) ;
2797: LD_ADDR_VAR 0 6
2801: PUSH
2802: LD_INT 1
2804: PPUSH
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL_OW 12
2814: ST_TO_ADDR
// for i = 1 to characters do
2815: LD_ADDR_VAR 0 5
2819: PUSH
2820: DOUBLE
2821: LD_INT 1
2823: DEC
2824: ST_TO_ADDR
2825: LD_VAR 0 1
2829: PUSH
2830: FOR_TO
2831: IFFALSE 2941
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
2833: LD_VAR 0 5
2837: PUSH
2838: LD_VAR 0 6
2842: EQUAL
2843: PUSH
2844: LD_VAR 0 1
2848: PUSH
2849: LD_VAR 0 5
2853: ARRAY
2854: PPUSH
2855: CALL_OW 258
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: IFFALSE 2886
// Say ( characters [ i ] , dialogMID ) ;
2866: LD_VAR 0 1
2870: PUSH
2871: LD_VAR 0 5
2875: ARRAY
2876: PPUSH
2877: LD_VAR 0 2
2881: PPUSH
2882: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
2886: LD_VAR 0 5
2890: PUSH
2891: LD_VAR 0 6
2895: EQUAL
2896: PUSH
2897: LD_VAR 0 1
2901: PUSH
2902: LD_VAR 0 5
2906: ARRAY
2907: PPUSH
2908: CALL_OW 258
2912: PUSH
2913: LD_INT 2
2915: EQUAL
2916: AND
2917: IFFALSE 2939
// Say ( characters [ i ] , dialogFID ) ;
2919: LD_VAR 0 1
2923: PUSH
2924: LD_VAR 0 5
2928: ARRAY
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 88
// end ;
2939: GO 2830
2941: POP
2942: POP
// end ;
2943: LD_VAR 0 4
2947: RET
// export function PrepareDifficulty ; begin
2948: LD_INT 0
2950: PPUSH
// if Difficulty = 1 then
2951: LD_OWVAR 67
2955: PUSH
2956: LD_INT 1
2958: EQUAL
2959: IFFALSE 2977
// begin RuSoldMinLevel = 0 ;
2961: LD_ADDR_EXP 18
2965: PUSH
2966: LD_INT 0
2968: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
2969: LD_ADDR_EXP 19
2973: PUSH
2974: LD_INT 2
2976: ST_TO_ADDR
// end ; if Difficulty = 2 then
2977: LD_OWVAR 67
2981: PUSH
2982: LD_INT 2
2984: EQUAL
2985: IFFALSE 3023
// begin RuSoldMinLevel = 1 ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: LD_INT 1
2994: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
2995: LD_ADDR_EXP 19
2999: PUSH
3000: LD_INT 2
3002: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
3003: LD_INT 14
3005: PPUSH
3006: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3010: LD_INT 51
3012: PPUSH
3013: LD_INT 3
3015: PPUSH
3016: LD_INT 1
3018: PPUSH
3019: CALL_OW 322
// end ; if Difficulty = 3 then
3023: LD_OWVAR 67
3027: PUSH
3028: LD_INT 3
3030: EQUAL
3031: IFFALSE 3099
// begin RuSoldMinLevel = 1 ;
3033: LD_ADDR_EXP 18
3037: PUSH
3038: LD_INT 1
3040: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
3041: LD_ADDR_EXP 19
3045: PUSH
3046: LD_INT 3
3048: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
3049: LD_INT 13
3051: PPUSH
3052: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
3056: LD_INT 14
3058: PPUSH
3059: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3063: LD_INT 51
3065: PPUSH
3066: LD_INT 3
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
3076: LD_INT 52
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: LD_INT 1
3084: PPUSH
3085: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
3089: LD_INT 25
3091: PPUSH
3092: LD_INT 44
3094: PPUSH
3095: CALL_OW 431
// end ; end ;
3099: LD_VAR 0 1
3103: RET
// export function EnergyDialog ; begin
3104: LD_INT 0
3106: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
3107: LD_INT 46
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: CALL_OW 321
3117: PUSH
3118: LD_INT 1
3120: EQUAL
3121: PUSH
3122: LD_INT 35
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: CALL_OW 321
3132: PUSH
3133: LD_INT 1
3135: EQUAL
3136: AND
3137: IFFALSE 3169
// begin Say ( JMM , D9c-JMM-1 ) ;
3139: LD_EXP 2
3143: PPUSH
3144: LD_STRING D9c-JMM-1
3146: PPUSH
3147: CALL_OW 88
// energyVDialog = 1 ;
3151: LD_ADDR_EXP 32
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// display_strings = tsi ;
3159: LD_ADDR_OWVAR 47
3163: PUSH
3164: LD_STRING tsi
3166: ST_TO_ADDR
// end else
3167: GO 3323
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
3169: LD_INT 35
3171: PPUSH
3172: LD_INT 1
3174: PPUSH
3175: CALL_OW 321
3179: PUSH
3180: LD_INT 2
3182: EQUAL
3183: PUSH
3184: LD_EXP 32
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: AND
3193: IFFALSE 3215
// begin Say ( JMM , D9c-JMM-1a ) ;
3195: LD_EXP 2
3199: PPUSH
3200: LD_STRING D9c-JMM-1a
3202: PPUSH
3203: CALL_OW 88
// energyVDialog = 1 ;
3207: LD_ADDR_EXP 32
3211: PUSH
3212: LD_INT 1
3214: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
3215: LD_INT 46
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: CALL_OW 321
3225: PUSH
3226: LD_INT 2
3228: EQUAL
3229: PUSH
3230: LD_EXP 32
3234: PUSH
3235: LD_INT 0
3237: EQUAL
3238: AND
3239: IFFALSE 3261
// begin Say ( JMM , D9c-JMM-1b ) ;
3241: LD_EXP 2
3245: PPUSH
3246: LD_STRING D9c-JMM-1b
3248: PPUSH
3249: CALL_OW 88
// energyVDialog = 1 ;
3253: LD_ADDR_EXP 32
3257: PUSH
3258: LD_INT 1
3260: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
3261: LD_INT 46
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: CALL_OW 321
3271: PUSH
3272: LD_INT 2
3274: EQUAL
3275: PUSH
3276: LD_INT 21
3278: PPUSH
3279: LD_INT 1
3281: PPUSH
3282: CALL_OW 321
3286: PUSH
3287: LD_INT 2
3289: EQUAL
3290: AND
3291: PUSH
3292: LD_EXP 32
3296: PUSH
3297: LD_INT 0
3299: EQUAL
3300: AND
3301: IFFALSE 3323
// begin Say ( JMM , D9c-JMM-1c ) ;
3303: LD_EXP 2
3307: PPUSH
3308: LD_STRING D9c-JMM-1c
3310: PPUSH
3311: CALL_OW 88
// energyVDialog = 1 ;
3315: LD_ADDR_EXP 32
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// end ; end ; end ;
3323: LD_VAR 0 1
3327: RET
// export function FinishMission ; var tmp ; begin
3328: LD_INT 0
3330: PPUSH
3331: PPUSH
// if buildOil = 1 and buildPower = 1 then
3332: LD_EXP 33
3336: PUSH
3337: LD_INT 1
3339: EQUAL
3340: PUSH
3341: LD_EXP 34
3345: PUSH
3346: LD_INT 1
3348: EQUAL
3349: AND
3350: IFFALSE 3364
// begin AddMedal ( oil , 1 ) ;
3352: LD_STRING oil
3354: PPUSH
3355: LD_INT 1
3357: PPUSH
3358: CALL_OW 101
// end else
3362: GO 3457
// begin if buildOil = 1 and buildPower = 0 then
3364: LD_EXP 33
3368: PUSH
3369: LD_INT 1
3371: EQUAL
3372: PUSH
3373: LD_EXP 34
3377: PUSH
3378: LD_INT 0
3380: EQUAL
3381: AND
3382: IFFALSE 3395
// AddMedal ( oil , - 1 ) ;
3384: LD_STRING oil
3386: PPUSH
3387: LD_INT 1
3389: NEG
3390: PPUSH
3391: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
3395: LD_EXP 33
3399: PUSH
3400: LD_INT 0
3402: EQUAL
3403: PUSH
3404: LD_EXP 34
3408: PUSH
3409: LD_INT 1
3411: EQUAL
3412: AND
3413: IFFALSE 3426
// AddMedal ( oil , - 2 ) ;
3415: LD_STRING oil
3417: PPUSH
3418: LD_INT 2
3420: NEG
3421: PPUSH
3422: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
3426: LD_EXP 33
3430: PUSH
3431: LD_INT 0
3433: EQUAL
3434: PUSH
3435: LD_EXP 34
3439: PUSH
3440: LD_INT 0
3442: EQUAL
3443: AND
3444: IFFALSE 3457
// AddMedal ( oil , - 3 ) ;
3446: LD_STRING oil
3448: PPUSH
3449: LD_INT 3
3451: NEG
3452: PPUSH
3453: CALL_OW 101
// end ; if lostCounter < 3 then
3457: LD_EXP 37
3461: PUSH
3462: LD_INT 3
3464: LESS
3465: IFFALSE 3479
// begin AddMedal ( deaths , 1 ) ;
3467: LD_STRING deaths
3469: PPUSH
3470: LD_INT 1
3472: PPUSH
3473: CALL_OW 101
// end else
3477: GO 3490
// begin AddMedal ( deaths , - 1 ) ;
3479: LD_STRING deaths
3481: PPUSH
3482: LD_INT 1
3484: NEG
3485: PPUSH
3486: CALL_OW 101
// end ; if honor = 1 then
3490: LD_EXP 38
3494: PUSH
3495: LD_INT 1
3497: EQUAL
3498: IFFALSE 3512
// begin AddMedal ( honour , 1 ) ;
3500: LD_STRING honour
3502: PPUSH
3503: LD_INT 1
3505: PPUSH
3506: CALL_OW 101
// end else
3510: GO 3523
// begin AddMedal ( honour , - 1 ) ;
3512: LD_STRING honour
3514: PPUSH
3515: LD_INT 1
3517: NEG
3518: PPUSH
3519: CALL_OW 101
// end ; GiveMedals ( Main ) ;
3523: LD_STRING Main
3525: PPUSH
3526: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
3530: LD_INT 22
3532: PUSH
3533: LD_INT 1
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: LD_INT 23
3542: PUSH
3543: LD_INT 1
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 21
3552: PUSH
3553: LD_INT 1
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PPUSH
3565: CALL_OW 69
3569: PPUSH
3570: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
3574: LD_EXP 2
3578: PPUSH
3579: LD_STRING JMM
3581: PPUSH
3582: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
3586: LD_EXP 3
3590: PPUSH
3591: LD_STRING Bobby
3593: PPUSH
3594: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
3598: LD_EXP 4
3602: PPUSH
3603: LD_STRING Cyrus
3605: PPUSH
3606: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
3610: LD_EXP 5
3614: PPUSH
3615: LD_STRING Lisa
3617: PPUSH
3618: CALL_OW 38
// SaveCharacters ( Brown , Brown ) ;
3622: LD_EXP 7
3626: PPUSH
3627: LD_STRING Brown
3629: PPUSH
3630: CALL_OW 38
// SaveCharacters ( Donaldson , Donaldson ) ;
3634: LD_EXP 13
3638: PPUSH
3639: LD_STRING Donaldson
3641: PPUSH
3642: CALL_OW 38
// SaveCharacters ( Frank , Frank ) ;
3646: LD_EXP 6
3650: PPUSH
3651: LD_STRING Frank
3653: PPUSH
3654: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
3658: LD_INT 50
3660: PUSH
3661: EMPTY
3662: LIST
3663: PUSH
3664: LD_INT 22
3666: PUSH
3667: LD_INT 1
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 21
3676: PUSH
3677: LD_INT 1
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: PPUSH
3689: CALL_OW 69
3693: PUSH
3694: LD_EXP 2
3698: PUSH
3699: LD_EXP 3
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_EXP 5
3713: PUSH
3714: LD_EXP 7
3718: PUSH
3719: LD_EXP 13
3723: PUSH
3724: LD_EXP 6
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: DIFF
3738: PPUSH
3739: LD_STRING 04_other_survivors
3741: PPUSH
3742: CALL_OW 38
// YouWin ;
3746: CALL_OW 103
// end ;
3750: LD_VAR 0 1
3754: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
3755: LD_INT 0
3757: PPUSH
3758: PPUSH
3759: PPUSH
3760: PPUSH
// for i = 1 to 72 do
3761: LD_ADDR_VAR 0 5
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 72
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3833
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
3777: LD_VAR 0 5
3781: PPUSH
3782: LD_VAR 0 1
3786: PPUSH
3787: CALL_OW 321
3791: PUSH
3792: LD_INT 1
3794: EQUAL
3795: PUSH
3796: LD_VAR 0 5
3800: PPUSH
3801: LD_VAR 0 3
3805: PPUSH
3806: CALL_OW 482
3810: PUSH
3811: LD_INT 1
3813: EQUAL
3814: AND
3815: IFFALSE 3831
// AddComResearch ( lab , i ) ;
3817: LD_VAR 0 2
3821: PPUSH
3822: LD_VAR 0 5
3826: PPUSH
3827: CALL_OW 184
3831: GO 3774
3833: POP
3834: POP
// end ;
3835: LD_VAR 0 4
3839: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
3840: LD_INT 0
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
3847: LD_ADDR_VAR 0 6
3851: PUSH
3852: LD_INT 22
3854: PUSH
3855: LD_VAR 0 1
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: LD_INT 25
3866: PUSH
3867: LD_INT 2
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 24
3876: PUSH
3877: LD_INT 1000
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3894: LD_ADDR_VAR 0 4
3898: PUSH
3899: LD_INT 22
3901: PUSH
3902: LD_VAR 0 1
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: PUSH
3911: LD_INT 21
3913: PUSH
3914: LD_INT 3
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PUSH
3921: LD_INT 3
3923: PUSH
3924: LD_INT 24
3926: PUSH
3927: LD_INT 1000
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: EMPTY
3944: LIST
3945: PPUSH
3946: CALL_OW 69
3950: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
3951: LD_VAR 0 4
3955: PUSH
3956: LD_INT 0
3958: GREATER
3959: PUSH
3960: LD_VAR 0 6
3964: PUSH
3965: LD_INT 0
3967: GREATER
3968: AND
3969: IFFALSE 4035
// begin for i in engineerOk_list do
3971: LD_ADDR_VAR 0 5
3975: PUSH
3976: LD_VAR 0 6
3980: PUSH
3981: FOR_IN
3982: IFFALSE 4033
// begin for j in buildings_list do
3984: LD_ADDR_VAR 0 7
3988: PUSH
3989: LD_VAR 0 4
3993: PUSH
3994: FOR_IN
3995: IFFALSE 4029
// begin AddComExitBuilding ( i ) ;
3997: LD_VAR 0 5
4001: PPUSH
4002: CALL_OW 182
// wait ( 0 0$1 ) ;
4006: LD_INT 35
4008: PPUSH
4009: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
4013: LD_VAR 0 5
4017: PPUSH
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 190
// end ;
4027: GO 3994
4029: POP
4030: POP
// end ;
4031: GO 3981
4033: POP
4034: POP
// end ; if buildings_list = 0 then
4035: LD_VAR 0 4
4039: PUSH
4040: LD_INT 0
4042: EQUAL
4043: IFFALSE 4076
// begin for i in engineerOK_list do
4045: LD_ADDR_VAR 0 5
4049: PUSH
4050: LD_VAR 0 6
4054: PUSH
4055: FOR_IN
4056: IFFALSE 4074
// begin ComEnterUnit ( i , building ) ;
4058: LD_VAR 0 5
4062: PPUSH
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 120
// end ;
4072: GO 4055
4074: POP
4075: POP
// end ; end ;
4076: LD_VAR 0 3
4080: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
4081: LD_INT 0
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4088: LD_ADDR_VAR 0 6
4092: PUSH
4093: LD_INT 22
4095: PUSH
4096: LD_VAR 0 1
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: LD_INT 25
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4124: LD_ADDR_VAR 0 9
4128: PUSH
4129: LD_VAR 0 3
4133: PPUSH
4134: LD_INT 22
4136: PUSH
4137: LD_VAR 0 1
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PUSH
4146: LD_INT 21
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 3
4158: PUSH
4159: LD_INT 24
4161: PUSH
4162: LD_INT 750
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 70
4182: ST_TO_ADDR
// if damageUnits > 0 then
4183: LD_VAR 0 9
4187: PUSH
4188: LD_INT 0
4190: GREATER
4191: IFFALSE 4341
// begin for i = 1 to damageUnits do
4193: LD_ADDR_VAR 0 7
4197: PUSH
4198: DOUBLE
4199: LD_INT 1
4201: DEC
4202: ST_TO_ADDR
4203: LD_VAR 0 9
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4233
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
4211: LD_VAR 0 9
4215: PUSH
4216: LD_VAR 0 7
4220: ARRAY
4221: PPUSH
4222: LD_VAR 0 2
4226: PPUSH
4227: CALL_OW 113
4231: GO 4208
4233: POP
4234: POP
// for i = 1 to sci_list do
4235: LD_ADDR_VAR 0 7
4239: PUSH
4240: DOUBLE
4241: LD_INT 1
4243: DEC
4244: ST_TO_ADDR
4245: LD_VAR 0 6
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4337
// begin ComExitBuilding ( sci_list [ i ] ) ;
4253: LD_VAR 0 6
4257: PUSH
4258: LD_VAR 0 7
4262: ARRAY
4263: PPUSH
4264: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
4268: LD_ADDR_VAR 0 8
4272: PUSH
4273: LD_VAR 0 2
4277: PPUSH
4278: LD_INT 22
4280: PUSH
4281: LD_VAR 0 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PPUSH
4290: CALL_OW 70
4294: PUSH
4295: FOR_IN
4296: IFFALSE 4333
// begin AddComHeal ( sci_list [ i ] , j [ j ] ) ;
4298: LD_VAR 0 6
4302: PUSH
4303: LD_VAR 0 7
4307: ARRAY
4308: PPUSH
4309: LD_VAR 0 8
4313: PUSH
4314: LD_VAR 0 8
4318: ARRAY
4319: PPUSH
4320: CALL_OW 188
// wait ( 1 1$0 ) ;
4324: LD_INT 2100
4326: PPUSH
4327: CALL_OW 67
// end ;
4331: GO 4295
4333: POP
4334: POP
// end ;
4335: GO 4250
4337: POP
4338: POP
// end else
4339: GO 4355
// begin AddComEnterUnit ( sci_list , build ) ;
4341: LD_VAR 0 6
4345: PPUSH
4346: LD_VAR 0 4
4350: PPUSH
4351: CALL_OW 180
// end ; end ;
4355: LD_VAR 0 5
4359: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
4360: LD_INT 0
4362: PPUSH
4363: PPUSH
4364: PPUSH
4365: PPUSH
4366: PPUSH
4367: PPUSH
4368: PPUSH
4369: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
4370: LD_INT 22
4372: PUSH
4373: LD_VAR 0 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 21
4384: PUSH
4385: LD_INT 2
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PUSH
4401: LD_VAR 0 3
4405: LESSEQUAL
4406: IFFALSE 4473
// begin for i = 1 to vehCount do
4408: LD_ADDR_VAR 0 10
4412: PUSH
4413: DOUBLE
4414: LD_INT 1
4416: DEC
4417: ST_TO_ADDR
4418: LD_VAR 0 3
4422: PUSH
4423: FOR_TO
4424: IFFALSE 4471
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
4426: LD_VAR 0 2
4430: PPUSH
4431: LD_VAR 0 8
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: LD_VAR 0 7
4445: PPUSH
4446: LD_VAR 0 5
4450: PUSH
4451: LD_INT 1
4453: PPUSH
4454: LD_VAR 0 5
4458: PPUSH
4459: CALL_OW 12
4463: ARRAY
4464: PPUSH
4465: CALL_OW 185
4469: GO 4423
4471: POP
4472: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
4473: LD_INT 22
4475: PUSH
4476: LD_VAR 0 1
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: LD_INT 21
4487: PUSH
4488: LD_INT 2
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: LD_INT 24
4497: PUSH
4498: LD_INT 250
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_VAR 0 3
4519: GREATEREQUAL
4520: IFFALSE 4793
// begin repeat begin wait ( 0 0$1 ) ;
4522: LD_INT 35
4524: PPUSH
4525: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) do
4529: LD_ADDR_VAR 0 10
4533: PUSH
4534: LD_INT 22
4536: PUSH
4537: LD_VAR 0 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 21
4548: PUSH
4549: LD_INT 2
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 24
4558: PUSH
4559: LD_INT 250
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 69
4575: PUSH
4576: FOR_IN
4577: IFFALSE 4753
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
4579: LD_ADDR_VAR 0 15
4583: PUSH
4584: LD_INT 22
4586: PUSH
4587: LD_VAR 0 4
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PPUSH
4601: LD_VAR 0 10
4605: PPUSH
4606: CALL_OW 74
4610: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4611: LD_ADDR_VAR 0 16
4615: PUSH
4616: LD_INT 22
4618: PUSH
4619: LD_VAR 0 4
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 59
4633: PUSH
4634: EMPTY
4635: LIST
4636: PUSH
4637: LD_INT 21
4639: PUSH
4640: LD_INT 1
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PUSH
4647: LD_INT 21
4649: PUSH
4650: LD_INT 2
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: PPUSH
4670: CALL_OW 69
4674: PPUSH
4675: LD_VAR 0 10
4679: PPUSH
4680: CALL_OW 74
4684: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4685: LD_VAR 0 10
4689: PPUSH
4690: LD_VAR 0 15
4694: PPUSH
4695: CALL_OW 296
4699: PUSH
4700: LD_INT 8
4702: PLUS
4703: PUSH
4704: LD_VAR 0 10
4708: PPUSH
4709: LD_VAR 0 16
4713: PPUSH
4714: CALL_OW 296
4718: LESS
4719: IFFALSE 4737
// begin ComAttackUnit ( i , target1 ) ;
4721: LD_VAR 0 10
4725: PPUSH
4726: LD_VAR 0 15
4730: PPUSH
4731: CALL_OW 115
// end else
4735: GO 4751
// begin ComAttackUnit ( i , target2 ) ;
4737: LD_VAR 0 10
4741: PPUSH
4742: LD_VAR 0 16
4746: PPUSH
4747: CALL_OW 115
// end ; end ;
4751: GO 4576
4753: POP
4754: POP
// end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
4755: LD_INT 22
4757: PUSH
4758: LD_VAR 0 1
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 21
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PPUSH
4781: CALL_OW 69
4785: PUSH
4786: LD_VAR 0 3
4790: LESSEQUAL
4791: IFFALSE 4522
// end ; end ;
4793: LD_VAR 0 9
4797: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
4798: LD_INT 0
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
4806: PPUSH
4807: PPUSH
4808: PPUSH
4809: PPUSH
4810: PPUSH
// for i = 1 to medicCount do
4811: LD_ADDR_VAR 0 14
4815: PUSH
4816: DOUBLE
4817: LD_INT 1
4819: DEC
4820: ST_TO_ADDR
4821: LD_VAR 0 7
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4909
// begin uc_side = side ;
4829: LD_ADDR_OWVAR 20
4833: PUSH
4834: LD_VAR 0 1
4838: ST_TO_ADDR
// uc_nation = nation ;
4839: LD_ADDR_OWVAR 21
4843: PUSH
4844: LD_VAR 0 2
4848: ST_TO_ADDR
// hc_name =  ;
4849: LD_ADDR_OWVAR 26
4853: PUSH
4854: LD_STRING 
4856: ST_TO_ADDR
// hc_gallery =  ;
4857: LD_ADDR_OWVAR 33
4861: PUSH
4862: LD_STRING 
4864: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
4865: LD_INT 0
4867: PPUSH
4868: LD_INT 4
4870: PPUSH
4871: LD_VAR 0 8
4875: PPUSH
4876: CALL_OW 380
// un = CreateHuman ;
4880: LD_ADDR_VAR 0 16
4884: PUSH
4885: CALL_OW 44
4889: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4890: LD_VAR 0 16
4894: PPUSH
4895: LD_VAR 0 9
4899: PPUSH
4900: LD_INT 0
4902: PPUSH
4903: CALL_OW 49
// end ;
4907: GO 4826
4909: POP
4910: POP
// for i = 1 to soldierCount do
4911: LD_ADDR_VAR 0 14
4915: PUSH
4916: DOUBLE
4917: LD_INT 1
4919: DEC
4920: ST_TO_ADDR
4921: LD_VAR 0 3
4925: PUSH
4926: FOR_TO
4927: IFFALSE 5009
// begin uc_side = side ;
4929: LD_ADDR_OWVAR 20
4933: PUSH
4934: LD_VAR 0 1
4938: ST_TO_ADDR
// uc_nation = nation ;
4939: LD_ADDR_OWVAR 21
4943: PUSH
4944: LD_VAR 0 2
4948: ST_TO_ADDR
// hc_name =  ;
4949: LD_ADDR_OWVAR 26
4953: PUSH
4954: LD_STRING 
4956: ST_TO_ADDR
// hc_gallery =  ;
4957: LD_ADDR_OWVAR 33
4961: PUSH
4962: LD_STRING 
4964: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
4965: LD_INT 0
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: LD_VAR 0 8
4975: PPUSH
4976: CALL_OW 380
// un = CreateHuman ;
4980: LD_ADDR_VAR 0 16
4984: PUSH
4985: CALL_OW 44
4989: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
4990: LD_VAR 0 16
4994: PPUSH
4995: LD_VAR 0 9
4999: PPUSH
5000: LD_INT 0
5002: PPUSH
5003: CALL_OW 49
// end ;
5007: GO 4926
5009: POP
5010: POP
// for i = 1 to sniperCount do
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: DOUBLE
5017: LD_INT 1
5019: DEC
5020: ST_TO_ADDR
5021: LD_VAR 0 4
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5109
// begin uc_side = side ;
5029: LD_ADDR_OWVAR 20
5033: PUSH
5034: LD_VAR 0 1
5038: ST_TO_ADDR
// uc_nation = nation ;
5039: LD_ADDR_OWVAR 21
5043: PUSH
5044: LD_VAR 0 2
5048: ST_TO_ADDR
// hc_name =  ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING 
5056: ST_TO_ADDR
// hc_gallery =  ;
5057: LD_ADDR_OWVAR 33
5061: PUSH
5062: LD_STRING 
5064: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
5065: LD_INT 0
5067: PPUSH
5068: LD_INT 5
5070: PPUSH
5071: LD_VAR 0 8
5075: PPUSH
5076: CALL_OW 380
// un = CreateHuman ;
5080: LD_ADDR_VAR 0 16
5084: PUSH
5085: CALL_OW 44
5089: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5090: LD_VAR 0 16
5094: PPUSH
5095: LD_VAR 0 9
5099: PPUSH
5100: LD_INT 0
5102: PPUSH
5103: CALL_OW 49
// end ;
5107: GO 5026
5109: POP
5110: POP
// for i = 1 to bazookCount do
5111: LD_ADDR_VAR 0 14
5115: PUSH
5116: DOUBLE
5117: LD_INT 1
5119: DEC
5120: ST_TO_ADDR
5121: LD_VAR 0 5
5125: PUSH
5126: FOR_TO
5127: IFFALSE 5209
// begin uc_side = side ;
5129: LD_ADDR_OWVAR 20
5133: PUSH
5134: LD_VAR 0 1
5138: ST_TO_ADDR
// uc_nation = nation ;
5139: LD_ADDR_OWVAR 21
5143: PUSH
5144: LD_VAR 0 2
5148: ST_TO_ADDR
// hc_name =  ;
5149: LD_ADDR_OWVAR 26
5153: PUSH
5154: LD_STRING 
5156: ST_TO_ADDR
// hc_gallery =  ;
5157: LD_ADDR_OWVAR 33
5161: PUSH
5162: LD_STRING 
5164: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
5165: LD_INT 0
5167: PPUSH
5168: LD_INT 9
5170: PPUSH
5171: LD_VAR 0 8
5175: PPUSH
5176: CALL_OW 380
// un = CreateHuman ;
5180: LD_ADDR_VAR 0 16
5184: PUSH
5185: CALL_OW 44
5189: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5190: LD_VAR 0 16
5194: PPUSH
5195: LD_VAR 0 9
5199: PPUSH
5200: LD_INT 0
5202: PPUSH
5203: CALL_OW 49
// end ;
5207: GO 5126
5209: POP
5210: POP
// for i = 1 to mortalCount do
5211: LD_ADDR_VAR 0 14
5215: PUSH
5216: DOUBLE
5217: LD_INT 1
5219: DEC
5220: ST_TO_ADDR
5221: LD_VAR 0 6
5225: PUSH
5226: FOR_TO
5227: IFFALSE 5309
// begin uc_side = side ;
5229: LD_ADDR_OWVAR 20
5233: PUSH
5234: LD_VAR 0 1
5238: ST_TO_ADDR
// uc_nation = nation ;
5239: LD_ADDR_OWVAR 21
5243: PUSH
5244: LD_VAR 0 2
5248: ST_TO_ADDR
// hc_name =  ;
5249: LD_ADDR_OWVAR 26
5253: PUSH
5254: LD_STRING 
5256: ST_TO_ADDR
// hc_gallery =  ;
5257: LD_ADDR_OWVAR 33
5261: PUSH
5262: LD_STRING 
5264: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
5265: LD_INT 0
5267: PPUSH
5268: LD_INT 8
5270: PPUSH
5271: LD_VAR 0 8
5275: PPUSH
5276: CALL_OW 380
// un = CreateHuman ;
5280: LD_ADDR_VAR 0 16
5284: PUSH
5285: CALL_OW 44
5289: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5290: LD_VAR 0 16
5294: PPUSH
5295: LD_VAR 0 9
5299: PPUSH
5300: LD_INT 0
5302: PPUSH
5303: CALL_OW 49
// end ;
5307: GO 5226
5309: POP
5310: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
5311: LD_ADDR_VAR 0 19
5315: PUSH
5316: LD_INT 22
5318: PUSH
5319: LD_VAR 0 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 2
5330: PUSH
5331: LD_INT 25
5333: PUSH
5334: LD_INT 1
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: LD_INT 25
5343: PUSH
5344: LD_INT 5
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 25
5353: PUSH
5354: LD_INT 8
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 25
5363: PUSH
5364: LD_INT 9
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PPUSH
5382: CALL_OW 69
5386: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5387: LD_ADDR_VAR 0 18
5391: PUSH
5392: LD_INT 22
5394: PUSH
5395: LD_VAR 0 1
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: PUSH
5404: LD_INT 25
5406: PUSH
5407: LD_INT 4
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: PPUSH
5418: CALL_OW 69
5422: ST_TO_ADDR
// for i in medic_list do
5423: LD_ADDR_VAR 0 14
5427: PUSH
5428: LD_VAR 0 18
5432: PUSH
5433: FOR_IN
5434: IFFALSE 5452
// ComMoveToArea ( i , healArea ) ;
5436: LD_VAR 0 14
5440: PPUSH
5441: LD_VAR 0 10
5445: PPUSH
5446: CALL_OW 113
5450: GO 5433
5452: POP
5453: POP
// if strategy = 1 then
5454: LD_VAR 0 12
5458: PUSH
5459: LD_INT 1
5461: EQUAL
5462: IFFALSE 6213
// begin repeat wait ( 0 0$3 ) ;
5464: LD_INT 105
5466: PPUSH
5467: CALL_OW 67
// for i in soldiersOK_list do
5471: LD_ADDR_VAR 0 14
5475: PUSH
5476: LD_VAR 0 19
5480: PUSH
5481: FOR_IN
5482: IFFALSE 5546
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
5484: LD_VAR 0 14
5488: PPUSH
5489: LD_INT 91
5491: PPUSH
5492: LD_INT 63
5494: PPUSH
5495: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
5499: LD_VAR 0 14
5503: PPUSH
5504: LD_INT 101
5506: PPUSH
5507: LD_INT 53
5509: PPUSH
5510: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
5514: LD_VAR 0 14
5518: PPUSH
5519: LD_INT 75
5521: PPUSH
5522: LD_INT 23
5524: PPUSH
5525: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
5529: LD_VAR 0 14
5533: PPUSH
5534: LD_INT 78
5536: PPUSH
5537: LD_INT 8
5539: PPUSH
5540: CALL_OW 174
// end ;
5544: GO 5481
5546: POP
5547: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , 5 ] ) > 0 ;
5548: LD_INT 15
5550: PPUSH
5551: LD_INT 22
5553: PUSH
5554: LD_INT 5
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 70
5565: PUSH
5566: LD_INT 0
5568: GREATER
5569: IFFALSE 5464
// repeat begin wait ( 0 0$3 ) ;
5571: LD_INT 105
5573: PPUSH
5574: CALL_OW 67
// for i in soldiersOK_list do
5578: LD_ADDR_VAR 0 14
5582: PUSH
5583: LD_VAR 0 19
5587: PUSH
5588: FOR_IN
5589: IFFALSE 5765
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5591: LD_ADDR_VAR 0 22
5595: PUSH
5596: LD_INT 22
5598: PUSH
5599: LD_VAR 0 11
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 69
5612: PPUSH
5613: LD_VAR 0 14
5617: PPUSH
5618: CALL_OW 74
5622: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5623: LD_ADDR_VAR 0 23
5627: PUSH
5628: LD_INT 22
5630: PUSH
5631: LD_VAR 0 11
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 2
5642: PUSH
5643: LD_INT 59
5645: PUSH
5646: EMPTY
5647: LIST
5648: PUSH
5649: LD_INT 21
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 21
5661: PUSH
5662: LD_INT 2
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: EMPTY
5680: LIST
5681: PPUSH
5682: CALL_OW 69
5686: PPUSH
5687: LD_VAR 0 14
5691: PPUSH
5692: CALL_OW 74
5696: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5697: LD_VAR 0 14
5701: PPUSH
5702: LD_VAR 0 22
5706: PPUSH
5707: CALL_OW 296
5711: PUSH
5712: LD_INT 8
5714: PLUS
5715: PUSH
5716: LD_VAR 0 14
5720: PPUSH
5721: LD_VAR 0 23
5725: PPUSH
5726: CALL_OW 296
5730: LESS
5731: IFFALSE 5749
// begin ComAttackUnit ( i , target1 ) ;
5733: LD_VAR 0 14
5737: PPUSH
5738: LD_VAR 0 22
5742: PPUSH
5743: CALL_OW 115
// end else
5747: GO 5763
// begin ComAttackUnit ( i , target2 ) ;
5749: LD_VAR 0 14
5753: PPUSH
5754: LD_VAR 0 23
5758: PPUSH
5759: CALL_OW 115
// end ; end ;
5763: GO 5588
5765: POP
5766: POP
// if medicCount > 0 then
5767: LD_VAR 0 7
5771: PUSH
5772: LD_INT 0
5774: GREATER
5775: IFFALSE 6203
// begin repeat wait ( 0 0$1 ) ;
5777: LD_INT 35
5779: PPUSH
5780: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
5784: LD_ADDR_VAR 0 17
5788: PUSH
5789: LD_INT 22
5791: PUSH
5792: LD_VAR 0 1
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_INT 1
5803: PUSH
5804: LD_INT 3
5806: PUSH
5807: LD_INT 24
5809: PUSH
5810: LD_INT 550
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 24
5823: PUSH
5824: LD_INT 250
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: LIST
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PPUSH
5840: CALL_OW 69
5844: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
5845: LD_ADDR_VAR 0 19
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_VAR 0 1
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: LD_INT 2
5864: PUSH
5865: LD_INT 25
5867: PUSH
5868: LD_INT 1
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 25
5877: PUSH
5878: LD_INT 5
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 8
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 25
5897: PUSH
5898: LD_INT 9
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 24
5914: PUSH
5915: LD_INT 1000
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: ST_TO_ADDR
// if damageUnit_list > 0 then
5932: LD_VAR 0 17
5936: PUSH
5937: LD_INT 0
5939: GREATER
5940: IFFALSE 6004
// begin for i in damageUnit_list do
5942: LD_ADDR_VAR 0 14
5946: PUSH
5947: LD_VAR 0 17
5951: PUSH
5952: FOR_IN
5953: IFFALSE 6002
// begin ComMoveToArea ( i , healArea ) ;
5955: LD_VAR 0 14
5959: PPUSH
5960: LD_VAR 0 10
5964: PPUSH
5965: CALL_OW 113
// for j in medic_list do
5969: LD_ADDR_VAR 0 15
5973: PUSH
5974: LD_VAR 0 18
5978: PUSH
5979: FOR_IN
5980: IFFALSE 5998
// AddComHeal ( j , i ) ;
5982: LD_VAR 0 15
5986: PPUSH
5987: LD_VAR 0 14
5991: PPUSH
5992: CALL_OW 188
5996: GO 5979
5998: POP
5999: POP
// end ;
6000: GO 5952
6002: POP
6003: POP
// end ; for i in soldiersOK_list do
6004: LD_ADDR_VAR 0 14
6008: PUSH
6009: LD_VAR 0 19
6013: PUSH
6014: FOR_IN
6015: IFFALSE 6191
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6017: LD_ADDR_VAR 0 22
6021: PUSH
6022: LD_INT 22
6024: PUSH
6025: LD_VAR 0 11
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PPUSH
6034: CALL_OW 69
6038: PPUSH
6039: LD_VAR 0 14
6043: PPUSH
6044: CALL_OW 74
6048: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6049: LD_ADDR_VAR 0 23
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 11
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 59
6071: PUSH
6072: EMPTY
6073: LIST
6074: PUSH
6075: LD_INT 21
6077: PUSH
6078: LD_INT 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 21
6087: PUSH
6088: LD_INT 2
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: PPUSH
6108: CALL_OW 69
6112: PPUSH
6113: LD_VAR 0 14
6117: PPUSH
6118: CALL_OW 74
6122: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6123: LD_VAR 0 14
6127: PPUSH
6128: LD_VAR 0 22
6132: PPUSH
6133: CALL_OW 296
6137: PUSH
6138: LD_INT 8
6140: PLUS
6141: PUSH
6142: LD_VAR 0 14
6146: PPUSH
6147: LD_VAR 0 23
6151: PPUSH
6152: CALL_OW 296
6156: LESS
6157: IFFALSE 6175
// begin ComAttackUnit ( i , target1 ) ;
6159: LD_VAR 0 14
6163: PPUSH
6164: LD_VAR 0 22
6168: PPUSH
6169: CALL_OW 115
// end else
6173: GO 6189
// begin ComAttackUnit ( i , target2 ) ;
6175: LD_VAR 0 14
6179: PPUSH
6180: LD_VAR 0 23
6184: PPUSH
6185: CALL_OW 115
// end ; end ;
6189: GO 6014
6191: POP
6192: POP
// until medicCount = 0 ;
6193: LD_VAR 0 7
6197: PUSH
6198: LD_INT 0
6200: EQUAL
6201: IFFALSE 5777
// end ; end until soldiersOK_list = 0 ;
6203: LD_VAR 0 19
6207: PUSH
6208: LD_INT 0
6210: EQUAL
6211: IFFALSE 5571
// end ; if strategy = 2 then
6213: LD_VAR 0 12
6217: PUSH
6218: LD_INT 2
6220: EQUAL
6221: IFFALSE 6942
// begin repeat wait ( 0 0$3 ) ;
6223: LD_INT 105
6225: PPUSH
6226: CALL_OW 67
// for i in soldiersOK_list do
6230: LD_ADDR_VAR 0 14
6234: PUSH
6235: LD_VAR 0 19
6239: PUSH
6240: FOR_IN
6241: IFFALSE 6275
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6243: LD_VAR 0 14
6247: PPUSH
6248: LD_INT 91
6250: PPUSH
6251: LD_INT 63
6253: PPUSH
6254: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
6258: LD_VAR 0 14
6262: PPUSH
6263: LD_INT 75
6265: PPUSH
6266: LD_INT 33
6268: PPUSH
6269: CALL_OW 174
// end ;
6273: GO 6240
6275: POP
6276: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , 5 ] ) > 0 ;
6277: LD_INT 16
6279: PPUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 5
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PPUSH
6290: CALL_OW 70
6294: PUSH
6295: LD_INT 0
6297: GREATER
6298: IFFALSE 6223
// repeat begin wait ( 0 0$3 ) ;
6300: LD_INT 105
6302: PPUSH
6303: CALL_OW 67
// for i in soldiersOK_list do
6307: LD_ADDR_VAR 0 14
6311: PUSH
6312: LD_VAR 0 19
6316: PUSH
6317: FOR_IN
6318: IFFALSE 6494
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6320: LD_ADDR_VAR 0 22
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_VAR 0 11
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PPUSH
6337: CALL_OW 69
6341: PPUSH
6342: LD_VAR 0 14
6346: PPUSH
6347: CALL_OW 74
6351: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6352: LD_ADDR_VAR 0 23
6356: PUSH
6357: LD_INT 22
6359: PUSH
6360: LD_VAR 0 11
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 2
6371: PUSH
6372: LD_INT 59
6374: PUSH
6375: EMPTY
6376: LIST
6377: PUSH
6378: LD_INT 21
6380: PUSH
6381: LD_INT 1
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 21
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: PPUSH
6411: CALL_OW 69
6415: PPUSH
6416: LD_VAR 0 14
6420: PPUSH
6421: CALL_OW 74
6425: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6426: LD_VAR 0 14
6430: PPUSH
6431: LD_VAR 0 22
6435: PPUSH
6436: CALL_OW 296
6440: PUSH
6441: LD_INT 8
6443: PLUS
6444: PUSH
6445: LD_VAR 0 14
6449: PPUSH
6450: LD_VAR 0 23
6454: PPUSH
6455: CALL_OW 296
6459: LESS
6460: IFFALSE 6478
// begin ComAttackUnit ( i , target1 ) ;
6462: LD_VAR 0 14
6466: PPUSH
6467: LD_VAR 0 22
6471: PPUSH
6472: CALL_OW 115
// end else
6476: GO 6492
// begin ComAttackUnit ( i , target2 ) ;
6478: LD_VAR 0 14
6482: PPUSH
6483: LD_VAR 0 23
6487: PPUSH
6488: CALL_OW 115
// end ; end ;
6492: GO 6317
6494: POP
6495: POP
// if medicCount > 0 then
6496: LD_VAR 0 7
6500: PUSH
6501: LD_INT 0
6503: GREATER
6504: IFFALSE 6932
// begin repeat wait ( 0 0$1 ) ;
6506: LD_INT 35
6508: PPUSH
6509: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6513: LD_ADDR_VAR 0 17
6517: PUSH
6518: LD_INT 22
6520: PUSH
6521: LD_VAR 0 1
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 1
6532: PUSH
6533: LD_INT 3
6535: PUSH
6536: LD_INT 24
6538: PUSH
6539: LD_INT 550
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 24
6552: PUSH
6553: LD_INT 250
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PPUSH
6569: CALL_OW 69
6573: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6574: LD_ADDR_VAR 0 19
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_VAR 0 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 2
6593: PUSH
6594: LD_INT 25
6596: PUSH
6597: LD_INT 1
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 25
6606: PUSH
6607: LD_INT 5
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 8
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 9
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 24
6643: PUSH
6644: LD_INT 1000
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: PPUSH
6656: CALL_OW 69
6660: ST_TO_ADDR
// if damageUnit_list > 0 then
6661: LD_VAR 0 17
6665: PUSH
6666: LD_INT 0
6668: GREATER
6669: IFFALSE 6733
// begin for i in damageUnit_list do
6671: LD_ADDR_VAR 0 14
6675: PUSH
6676: LD_VAR 0 17
6680: PUSH
6681: FOR_IN
6682: IFFALSE 6731
// begin ComMoveToArea ( i , healArea ) ;
6684: LD_VAR 0 14
6688: PPUSH
6689: LD_VAR 0 10
6693: PPUSH
6694: CALL_OW 113
// for j in medic_list do
6698: LD_ADDR_VAR 0 15
6702: PUSH
6703: LD_VAR 0 18
6707: PUSH
6708: FOR_IN
6709: IFFALSE 6727
// AddComHeal ( j , i ) ;
6711: LD_VAR 0 15
6715: PPUSH
6716: LD_VAR 0 14
6720: PPUSH
6721: CALL_OW 188
6725: GO 6708
6727: POP
6728: POP
// end ;
6729: GO 6681
6731: POP
6732: POP
// end ; for i in soldiersOK_list do
6733: LD_ADDR_VAR 0 14
6737: PUSH
6738: LD_VAR 0 19
6742: PUSH
6743: FOR_IN
6744: IFFALSE 6920
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6746: LD_ADDR_VAR 0 22
6750: PUSH
6751: LD_INT 22
6753: PUSH
6754: LD_VAR 0 11
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: PPUSH
6768: LD_VAR 0 14
6772: PPUSH
6773: CALL_OW 74
6777: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6778: LD_ADDR_VAR 0 23
6782: PUSH
6783: LD_INT 22
6785: PUSH
6786: LD_VAR 0 11
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 2
6797: PUSH
6798: LD_INT 59
6800: PUSH
6801: EMPTY
6802: LIST
6803: PUSH
6804: LD_INT 21
6806: PUSH
6807: LD_INT 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 21
6816: PUSH
6817: LD_INT 2
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: EMPTY
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: PPUSH
6842: LD_VAR 0 14
6846: PPUSH
6847: CALL_OW 74
6851: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6852: LD_VAR 0 14
6856: PPUSH
6857: LD_VAR 0 22
6861: PPUSH
6862: CALL_OW 296
6866: PUSH
6867: LD_INT 8
6869: PLUS
6870: PUSH
6871: LD_VAR 0 14
6875: PPUSH
6876: LD_VAR 0 23
6880: PPUSH
6881: CALL_OW 296
6885: LESS
6886: IFFALSE 6904
// begin ComAttackUnit ( i , target1 ) ;
6888: LD_VAR 0 14
6892: PPUSH
6893: LD_VAR 0 22
6897: PPUSH
6898: CALL_OW 115
// end else
6902: GO 6918
// begin ComAttackUnit ( i , target2 ) ;
6904: LD_VAR 0 14
6908: PPUSH
6909: LD_VAR 0 23
6913: PPUSH
6914: CALL_OW 115
// end ; end ;
6918: GO 6743
6920: POP
6921: POP
// until medicCount = 0 ;
6922: LD_VAR 0 7
6926: PUSH
6927: LD_INT 0
6929: EQUAL
6930: IFFALSE 6506
// end ; end until soldiersOK_list = 0 ;
6932: LD_VAR 0 19
6936: PUSH
6937: LD_INT 0
6939: EQUAL
6940: IFFALSE 6300
// end ; end ;
6942: LD_VAR 0 13
6946: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehengine , vehcontrol , Ruenableweapon , ArenableWeapon , amEnableWeapon , repairArea , targetSide ) ; var i , j , rutemp , artemp , amtemp , target1 , target2 , lastIndex1 , lastIndex2 , lastIndex3 , veh , tempTable , ruWeaponTab , arWeaponTab , amWeaponTab , ruChassisTab , arChassisTab , amChassisTab , Vehicle_list , VehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
// ruWeaponTab = ruenableweapon ;
6974: LD_ADDR_VAR 0 26
6978: PUSH
6979: LD_VAR 0 8
6983: ST_TO_ADDR
// ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
6984: LD_ADDR_VAR 0 29
6988: PUSH
6989: LD_INT 21
6991: PUSH
6992: LD_INT 22
6994: PUSH
6995: LD_INT 23
6997: PUSH
6998: LD_INT 24
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: ST_TO_ADDR
// arWeaponTab = arenableweapon ;
7007: LD_ADDR_VAR 0 27
7011: PUSH
7012: LD_VAR 0 9
7016: ST_TO_ADDR
// arChassisTab = [ 11 , 12 , 13 , 14 ] ;
7017: LD_ADDR_VAR 0 30
7021: PUSH
7022: LD_INT 11
7024: PUSH
7025: LD_INT 12
7027: PUSH
7028: LD_INT 13
7030: PUSH
7031: LD_INT 14
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: ST_TO_ADDR
// amWeaponTab = amenableweapon ;
7040: LD_ADDR_VAR 0 28
7044: PUSH
7045: LD_VAR 0 10
7049: ST_TO_ADDR
// amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
7050: LD_ADDR_VAR 0 31
7054: PUSH
7055: LD_INT 1
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 3
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: LD_INT 5
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// amtemp = amWeaponTab ;
7077: LD_ADDR_VAR 0 18
7081: PUSH
7082: LD_VAR 0 28
7086: ST_TO_ADDR
// artemp = arWeaponTab ;
7087: LD_ADDR_VAR 0 17
7091: PUSH
7092: LD_VAR 0 27
7096: ST_TO_ADDR
// rutemp = ruWeaponTab ;
7097: LD_ADDR_VAR 0 16
7101: PUSH
7102: LD_VAR 0 26
7106: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7107: LD_INT 35
7109: PPUSH
7110: CALL_OW 67
// if nation = 1 then
7114: LD_VAR 0 5
7118: PUSH
7119: LD_INT 1
7121: EQUAL
7122: IFFALSE 7640
// begin uc_side = side ;
7124: LD_ADDR_OWVAR 20
7128: PUSH
7129: LD_VAR 0 2
7133: ST_TO_ADDR
// uc_nation = nation ;
7134: LD_ADDR_OWVAR 21
7138: PUSH
7139: LD_VAR 0 5
7143: ST_TO_ADDR
// vc_engine = vehengine ;
7144: LD_ADDR_OWVAR 39
7148: PUSH
7149: LD_VAR 0 6
7153: ST_TO_ADDR
// vc_control = vehcontrol ;
7154: LD_ADDR_OWVAR 38
7158: PUSH
7159: LD_VAR 0 7
7163: ST_TO_ADDR
// vc_weapon = amWeaponTab [ Rand ( 1 , lastIndex1 ) ] ;
7164: LD_ADDR_OWVAR 40
7168: PUSH
7169: LD_VAR 0 28
7173: PUSH
7174: LD_INT 1
7176: PPUSH
7177: LD_VAR 0 21
7181: PPUSH
7182: CALL_OW 12
7186: ARRAY
7187: ST_TO_ADDR
// for j = 1 to amWeaponTab do
7188: LD_ADDR_VAR 0 15
7192: PUSH
7193: DOUBLE
7194: LD_INT 1
7196: DEC
7197: ST_TO_ADDR
7198: LD_VAR 0 28
7202: PUSH
7203: FOR_TO
7204: IFFALSE 7499
// begin if amWeaponTab [ j ] = 2 or amWeaponTab [ j ] = 3 then
7206: LD_VAR 0 28
7210: PUSH
7211: LD_VAR 0 15
7215: ARRAY
7216: PUSH
7217: LD_INT 2
7219: EQUAL
7220: PUSH
7221: LD_VAR 0 28
7225: PUSH
7226: LD_VAR 0 15
7230: ARRAY
7231: PUSH
7232: LD_INT 3
7234: EQUAL
7235: OR
7236: IFFALSE 7287
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
7238: LD_ADDR_VAR 0 31
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: LD_INT 2
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: LD_INT 4
7254: PUSH
7255: LD_INT 5
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , 5 ) ] ;
7265: LD_ADDR_OWVAR 37
7269: PUSH
7270: LD_VAR 0 31
7274: PUSH
7275: LD_INT 1
7277: PPUSH
7278: LD_INT 5
7280: PPUSH
7281: CALL_OW 12
7285: ARRAY
7286: ST_TO_ADDR
// end ; if amWeaponTab [ j ] = 4 or amWeaponTab [ j ] = 5 or amWeaponTab [ j ] = 9 or amWeaponTab [ j ] = 11 or amWeaponTab [ j ] = 7 then
7287: LD_VAR 0 28
7291: PUSH
7292: LD_VAR 0 15
7296: ARRAY
7297: PUSH
7298: LD_INT 4
7300: EQUAL
7301: PUSH
7302: LD_VAR 0 28
7306: PUSH
7307: LD_VAR 0 15
7311: ARRAY
7312: PUSH
7313: LD_INT 5
7315: EQUAL
7316: OR
7317: PUSH
7318: LD_VAR 0 28
7322: PUSH
7323: LD_VAR 0 15
7327: ARRAY
7328: PUSH
7329: LD_INT 9
7331: EQUAL
7332: OR
7333: PUSH
7334: LD_VAR 0 28
7338: PUSH
7339: LD_VAR 0 15
7343: ARRAY
7344: PUSH
7345: LD_INT 11
7347: EQUAL
7348: OR
7349: PUSH
7350: LD_VAR 0 28
7354: PUSH
7355: LD_VAR 0 15
7359: ARRAY
7360: PUSH
7361: LD_INT 7
7363: EQUAL
7364: OR
7365: IFFALSE 7412
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
7367: LD_ADDR_VAR 0 31
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: LD_INT 4
7380: PUSH
7381: LD_INT 5
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , 4 ) ] ;
7390: LD_ADDR_OWVAR 37
7394: PUSH
7395: LD_VAR 0 31
7399: PUSH
7400: LD_INT 1
7402: PPUSH
7403: LD_INT 4
7405: PPUSH
7406: CALL_OW 12
7410: ARRAY
7411: ST_TO_ADDR
// end ; if amWeaponTab [ j ] = 8 or amWeaponTab [ j ] = 6 or amWeaponTab [ j ] = 10 then
7412: LD_VAR 0 28
7416: PUSH
7417: LD_VAR 0 15
7421: ARRAY
7422: PUSH
7423: LD_INT 8
7425: EQUAL
7426: PUSH
7427: LD_VAR 0 28
7431: PUSH
7432: LD_VAR 0 15
7436: ARRAY
7437: PUSH
7438: LD_INT 6
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 28
7447: PUSH
7448: LD_VAR 0 15
7452: ARRAY
7453: PUSH
7454: LD_INT 10
7456: EQUAL
7457: OR
7458: IFFALSE 7497
// begin amChassisTab = [ 4 , 5 ] ;
7460: LD_ADDR_VAR 0 31
7464: PUSH
7465: LD_INT 4
7467: PUSH
7468: LD_INT 5
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , 2 ) ] ;
7475: LD_ADDR_OWVAR 37
7479: PUSH
7480: LD_VAR 0 31
7484: PUSH
7485: LD_INT 1
7487: PPUSH
7488: LD_INT 2
7490: PPUSH
7491: CALL_OW 12
7495: ARRAY
7496: ST_TO_ADDR
// end ; end ;
7497: GO 7203
7499: POP
7500: POP
// veh = CreateVehicle ;
7501: LD_ADDR_VAR 0 24
7505: PUSH
7506: CALL_OW 45
7510: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7511: LD_VAR 0 24
7515: PPUSH
7516: LD_VAR 0 1
7520: PPUSH
7521: LD_INT 0
7523: PPUSH
7524: CALL_OW 49
// if vehcontrol = 1 then
7528: LD_VAR 0 7
7532: PUSH
7533: LD_INT 1
7535: EQUAL
7536: IFFALSE 7626
// begin hc_class = 3 ;
7538: LD_ADDR_OWVAR 28
7542: PUSH
7543: LD_INT 3
7545: ST_TO_ADDR
// hc_name =  ;
7546: LD_ADDR_OWVAR 26
7550: PUSH
7551: LD_STRING 
7553: ST_TO_ADDR
// hc_gallery =  ;
7554: LD_ADDR_OWVAR 33
7558: PUSH
7559: LD_STRING 
7561: ST_TO_ADDR
// hc_sex = [ Rand ( sex_female , sex_male ) ] ;
7562: LD_ADDR_OWVAR 27
7566: PUSH
7567: LD_INT 2
7569: PPUSH
7570: LD_INT 1
7572: PPUSH
7573: CALL_OW 12
7577: PUSH
7578: EMPTY
7579: LIST
7580: ST_TO_ADDR
// hc_skills = [ mehskill , mehskill , mehskill , mehskill ] ;
7581: LD_ADDR_OWVAR 31
7585: PUSH
7586: LD_VAR 0 4
7590: PUSH
7591: LD_VAR 0 4
7595: PUSH
7596: LD_VAR 0 4
7600: PUSH
7601: LD_VAR 0 4
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7612: CALL_OW 44
7616: PPUSH
7617: LD_VAR 0 24
7621: PPUSH
7622: CALL_OW 52
// end ; i = i + 1 ;
7626: LD_ADDR_VAR 0 14
7630: PUSH
7631: LD_VAR 0 14
7635: PUSH
7636: LD_INT 1
7638: PLUS
7639: ST_TO_ADDR
// end ; if nation = 2 then
7640: LD_VAR 0 5
7644: PUSH
7645: LD_INT 2
7647: EQUAL
7648: IFFALSE 8148
// begin uc_side = side ;
7650: LD_ADDR_OWVAR 20
7654: PUSH
7655: LD_VAR 0 2
7659: ST_TO_ADDR
// uc_nation = nation ;
7660: LD_ADDR_OWVAR 21
7664: PUSH
7665: LD_VAR 0 5
7669: ST_TO_ADDR
// vc_engine = vehengine ;
7670: LD_ADDR_OWVAR 39
7674: PUSH
7675: LD_VAR 0 6
7679: ST_TO_ADDR
// vc_control = vehcontrol ;
7680: LD_ADDR_OWVAR 38
7684: PUSH
7685: LD_VAR 0 7
7689: ST_TO_ADDR
// vc_weapon = arWeaponTab [ Rand ( 1 , lastIndex2 ) ] ;
7690: LD_ADDR_OWVAR 40
7694: PUSH
7695: LD_VAR 0 27
7699: PUSH
7700: LD_INT 1
7702: PPUSH
7703: LD_VAR 0 22
7707: PPUSH
7708: CALL_OW 12
7712: ARRAY
7713: ST_TO_ADDR
// for j = 1 to arWeaponTab do
7714: LD_ADDR_VAR 0 15
7718: PUSH
7719: DOUBLE
7720: LD_INT 1
7722: DEC
7723: ST_TO_ADDR
7724: LD_VAR 0 27
7728: PUSH
7729: FOR_TO
7730: IFFALSE 7983
// begin if arWeaponTab [ j ] = 24 or arWeaponTab [ j ] = 22 or arWeaponTab [ j ] = 23 or arWeaponTab [ j ] = 30 then
7732: LD_VAR 0 27
7736: PUSH
7737: LD_VAR 0 15
7741: ARRAY
7742: PUSH
7743: LD_INT 24
7745: EQUAL
7746: PUSH
7747: LD_VAR 0 27
7751: PUSH
7752: LD_VAR 0 15
7756: ARRAY
7757: PUSH
7758: LD_INT 22
7760: EQUAL
7761: OR
7762: PUSH
7763: LD_VAR 0 27
7767: PUSH
7768: LD_VAR 0 15
7772: ARRAY
7773: PUSH
7774: LD_INT 23
7776: EQUAL
7777: OR
7778: PUSH
7779: LD_VAR 0 27
7783: PUSH
7784: LD_VAR 0 15
7788: ARRAY
7789: PUSH
7790: LD_INT 30
7792: EQUAL
7793: OR
7794: IFFALSE 7841
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
7796: LD_ADDR_VAR 0 30
7800: PUSH
7801: LD_INT 11
7803: PUSH
7804: LD_INT 12
7806: PUSH
7807: LD_INT 13
7809: PUSH
7810: LD_INT 14
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , 4 ) ] ;
7819: LD_ADDR_OWVAR 37
7823: PUSH
7824: LD_VAR 0 30
7828: PUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 4
7834: PPUSH
7835: CALL_OW 12
7839: ARRAY
7840: ST_TO_ADDR
// end ; if arWeaponTab [ j ] = 29 or arWeaponTab [ j ] = 28 or arWeaponTab [ j ] = 27 or arWeaponTab [ j ] = 26 or arWeaponTab [ j ] = 25 then
7841: LD_VAR 0 27
7845: PUSH
7846: LD_VAR 0 15
7850: ARRAY
7851: PUSH
7852: LD_INT 29
7854: EQUAL
7855: PUSH
7856: LD_VAR 0 27
7860: PUSH
7861: LD_VAR 0 15
7865: ARRAY
7866: PUSH
7867: LD_INT 28
7869: EQUAL
7870: OR
7871: PUSH
7872: LD_VAR 0 27
7876: PUSH
7877: LD_VAR 0 15
7881: ARRAY
7882: PUSH
7883: LD_INT 27
7885: EQUAL
7886: OR
7887: PUSH
7888: LD_VAR 0 27
7892: PUSH
7893: LD_VAR 0 15
7897: ARRAY
7898: PUSH
7899: LD_INT 26
7901: EQUAL
7902: OR
7903: PUSH
7904: LD_VAR 0 27
7908: PUSH
7909: LD_VAR 0 15
7913: ARRAY
7914: PUSH
7915: LD_INT 25
7917: EQUAL
7918: OR
7919: IFFALSE 7958
// begin arChassisTab = [ 13 , 14 ] ;
7921: LD_ADDR_VAR 0 30
7925: PUSH
7926: LD_INT 13
7928: PUSH
7929: LD_INT 14
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , 2 ) ] ;
7936: LD_ADDR_OWVAR 37
7940: PUSH
7941: LD_VAR 0 30
7945: PUSH
7946: LD_INT 1
7948: PPUSH
7949: LD_INT 2
7951: PPUSH
7952: CALL_OW 12
7956: ARRAY
7957: ST_TO_ADDR
// end ; arChassisTab = [ 11 , 12 , 13 , 14 ] ;
7958: LD_ADDR_VAR 0 30
7962: PUSH
7963: LD_INT 11
7965: PUSH
7966: LD_INT 12
7968: PUSH
7969: LD_INT 13
7971: PUSH
7972: LD_INT 14
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: ST_TO_ADDR
// end ;
7981: GO 7729
7983: POP
7984: POP
// veh = CreateVehicle ;
7985: LD_ADDR_VAR 0 24
7989: PUSH
7990: CALL_OW 45
7994: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7995: LD_VAR 0 24
7999: PPUSH
8000: LD_VAR 0 1
8004: PPUSH
8005: LD_INT 0
8007: PPUSH
8008: CALL_OW 49
// if vehcontrol = 1 then
8012: LD_VAR 0 7
8016: PUSH
8017: LD_INT 1
8019: EQUAL
8020: IFFALSE 8134
// begin hc_class = 3 ;
8022: LD_ADDR_OWVAR 28
8026: PUSH
8027: LD_INT 3
8029: ST_TO_ADDR
// hc_name =  ;
8030: LD_ADDR_OWVAR 26
8034: PUSH
8035: LD_STRING 
8037: ST_TO_ADDR
// hc_gallery =  ;
8038: LD_ADDR_OWVAR 33
8042: PUSH
8043: LD_STRING 
8045: ST_TO_ADDR
// hc_sex = [ Rand ( sex_female , sex_male ) ] ;
8046: LD_ADDR_OWVAR 27
8050: PUSH
8051: LD_INT 2
8053: PPUSH
8054: LD_INT 1
8056: PPUSH
8057: CALL_OW 12
8061: PUSH
8062: EMPTY
8063: LIST
8064: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , mehskill ) , Rand ( 0 , mehskill ) , mehskill , Rand ( 0 , mehskill ) ] ;
8065: LD_ADDR_OWVAR 31
8069: PUSH
8070: LD_INT 0
8072: PPUSH
8073: LD_VAR 0 4
8077: PPUSH
8078: CALL_OW 12
8082: PUSH
8083: LD_INT 0
8085: PPUSH
8086: LD_VAR 0 4
8090: PPUSH
8091: CALL_OW 12
8095: PUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_INT 0
8103: PPUSH
8104: LD_VAR 0 4
8108: PPUSH
8109: CALL_OW 12
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8120: CALL_OW 44
8124: PPUSH
8125: LD_VAR 0 24
8129: PPUSH
8130: CALL_OW 52
// end ; i = i + 1 ;
8134: LD_ADDR_VAR 0 14
8138: PUSH
8139: LD_VAR 0 14
8143: PUSH
8144: LD_INT 1
8146: PLUS
8147: ST_TO_ADDR
// end ; if nation = 3 then
8148: LD_VAR 0 5
8152: PUSH
8153: LD_INT 3
8155: EQUAL
8156: IFFALSE 8647
// begin uc_side = side ;
8158: LD_ADDR_OWVAR 20
8162: PUSH
8163: LD_VAR 0 2
8167: ST_TO_ADDR
// uc_nation = nation ;
8168: LD_ADDR_OWVAR 21
8172: PUSH
8173: LD_VAR 0 5
8177: ST_TO_ADDR
// ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
8178: LD_ADDR_VAR 0 29
8182: PUSH
8183: LD_INT 21
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 23
8191: PUSH
8192: LD_INT 24
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: ST_TO_ADDR
// vc_engine = vehengine ;
8201: LD_ADDR_OWVAR 39
8205: PUSH
8206: LD_VAR 0 6
8210: ST_TO_ADDR
// vc_control = vehcontrol ;
8211: LD_ADDR_OWVAR 38
8215: PUSH
8216: LD_VAR 0 7
8220: ST_TO_ADDR
// vc_weapon = ruWeaponTab [ Rand ( 1 , lastIndex3 ) ] ;
8221: LD_ADDR_OWVAR 40
8225: PUSH
8226: LD_VAR 0 26
8230: PUSH
8231: LD_INT 1
8233: PPUSH
8234: LD_VAR 0 23
8238: PPUSH
8239: CALL_OW 12
8243: ARRAY
8244: ST_TO_ADDR
// for j = 1 to ruWeaponTab do
8245: LD_ADDR_VAR 0 15
8249: PUSH
8250: DOUBLE
8251: LD_INT 1
8253: DEC
8254: ST_TO_ADDR
8255: LD_VAR 0 26
8259: PUSH
8260: FOR_TO
8261: IFFALSE 8482
// begin if ruWeaponTab [ j ] = 42 or ruWeaponTab [ j ] = 43 or ruWeaponTab [ j ] = 44 or ruWeaponTab [ j ] = 45 or ruWeaponTab [ j ] = 49 then
8263: LD_VAR 0 26
8267: PUSH
8268: LD_VAR 0 15
8272: ARRAY
8273: PUSH
8274: LD_INT 42
8276: EQUAL
8277: PUSH
8278: LD_VAR 0 26
8282: PUSH
8283: LD_VAR 0 15
8287: ARRAY
8288: PUSH
8289: LD_INT 43
8291: EQUAL
8292: OR
8293: PUSH
8294: LD_VAR 0 26
8298: PUSH
8299: LD_VAR 0 15
8303: ARRAY
8304: PUSH
8305: LD_INT 44
8307: EQUAL
8308: OR
8309: PUSH
8310: LD_VAR 0 26
8314: PUSH
8315: LD_VAR 0 15
8319: ARRAY
8320: PUSH
8321: LD_INT 45
8323: EQUAL
8324: OR
8325: PUSH
8326: LD_VAR 0 26
8330: PUSH
8331: LD_VAR 0 15
8335: ARRAY
8336: PUSH
8337: LD_INT 49
8339: EQUAL
8340: OR
8341: IFFALSE 8388
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
8343: LD_ADDR_VAR 0 29
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 22
8353: PUSH
8354: LD_INT 23
8356: PUSH
8357: LD_INT 24
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , 4 ) ] ;
8366: LD_ADDR_OWVAR 37
8370: PUSH
8371: LD_VAR 0 29
8375: PUSH
8376: LD_INT 1
8378: PPUSH
8379: LD_INT 4
8381: PPUSH
8382: CALL_OW 12
8386: ARRAY
8387: ST_TO_ADDR
// end ; if ruWeaponTab [ j ] = 46 or ruWeaponTab [ j ] = 47 then
8388: LD_VAR 0 26
8392: PUSH
8393: LD_VAR 0 15
8397: ARRAY
8398: PUSH
8399: LD_INT 46
8401: EQUAL
8402: PUSH
8403: LD_VAR 0 26
8407: PUSH
8408: LD_VAR 0 15
8412: ARRAY
8413: PUSH
8414: LD_INT 47
8416: EQUAL
8417: OR
8418: IFFALSE 8457
// begin ruChassisTab = [ 23 , 24 ] ;
8420: LD_ADDR_VAR 0 29
8424: PUSH
8425: LD_INT 23
8427: PUSH
8428: LD_INT 24
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , 2 ) ] ;
8435: LD_ADDR_OWVAR 37
8439: PUSH
8440: LD_VAR 0 29
8444: PUSH
8445: LD_INT 1
8447: PPUSH
8448: LD_INT 2
8450: PPUSH
8451: CALL_OW 12
8455: ARRAY
8456: ST_TO_ADDR
// end ; ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
8457: LD_ADDR_VAR 0 29
8461: PUSH
8462: LD_INT 21
8464: PUSH
8465: LD_INT 22
8467: PUSH
8468: LD_INT 23
8470: PUSH
8471: LD_INT 24
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: ST_TO_ADDR
// end ;
8480: GO 8260
8482: POP
8483: POP
// veh = CreateVehicle ;
8484: LD_ADDR_VAR 0 24
8488: PUSH
8489: CALL_OW 45
8493: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8494: LD_VAR 0 24
8498: PPUSH
8499: LD_VAR 0 1
8503: PPUSH
8504: LD_INT 0
8506: PPUSH
8507: CALL_OW 49
// if vehcontrol = 1 then
8511: LD_VAR 0 7
8515: PUSH
8516: LD_INT 1
8518: EQUAL
8519: IFFALSE 8633
// begin hc_class = 3 ;
8521: LD_ADDR_OWVAR 28
8525: PUSH
8526: LD_INT 3
8528: ST_TO_ADDR
// hc_name =  ;
8529: LD_ADDR_OWVAR 26
8533: PUSH
8534: LD_STRING 
8536: ST_TO_ADDR
// hc_gallery =  ;
8537: LD_ADDR_OWVAR 33
8541: PUSH
8542: LD_STRING 
8544: ST_TO_ADDR
// hc_sex = [ Rand ( sex_female , sex_male ) ] ;
8545: LD_ADDR_OWVAR 27
8549: PUSH
8550: LD_INT 2
8552: PPUSH
8553: LD_INT 1
8555: PPUSH
8556: CALL_OW 12
8560: PUSH
8561: EMPTY
8562: LIST
8563: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , mehskill ) , Rand ( 0 , mehskill ) , mehskill , Rand ( 0 , mehskill ) ] ;
8564: LD_ADDR_OWVAR 31
8568: PUSH
8569: LD_INT 0
8571: PPUSH
8572: LD_VAR 0 4
8576: PPUSH
8577: CALL_OW 12
8581: PUSH
8582: LD_INT 0
8584: PPUSH
8585: LD_VAR 0 4
8589: PPUSH
8590: CALL_OW 12
8594: PUSH
8595: LD_VAR 0 4
8599: PUSH
8600: LD_INT 0
8602: PPUSH
8603: LD_VAR 0 4
8607: PPUSH
8608: CALL_OW 12
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8619: CALL_OW 44
8623: PPUSH
8624: LD_VAR 0 24
8628: PPUSH
8629: CALL_OW 52
// end ; i = i + 1 ;
8633: LD_ADDR_VAR 0 14
8637: PUSH
8638: LD_VAR 0 14
8642: PUSH
8643: LD_INT 1
8645: PLUS
8646: ST_TO_ADDR
// end ; until i = vehCount ;
8647: LD_VAR 0 14
8651: PUSH
8652: LD_VAR 0 3
8656: EQUAL
8657: IFFALSE 7107
// repeat wait ( 0 0$3 ) ;
8659: LD_INT 105
8661: PPUSH
8662: CALL_OW 67
// VehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] ] ) ;
8666: LD_ADDR_VAR 0 33
8670: PUSH
8671: LD_INT 22
8673: PUSH
8674: LD_VAR 0 2
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 2
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 24
8695: PUSH
8696: LD_INT 550
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
8713: LD_ADDR_VAR 0 34
8717: PUSH
8718: LD_INT 22
8720: PUSH
8721: LD_VAR 0 2
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 21
8732: PUSH
8733: LD_INT 2
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 3
8742: PUSH
8743: LD_INT 24
8745: PUSH
8746: LD_INT 550
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: PPUSH
8762: CALL_OW 69
8766: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
8767: LD_ADDR_VAR 0 35
8771: PUSH
8772: LD_VAR 0 11
8776: PPUSH
8777: LD_INT 22
8779: PUSH
8780: LD_VAR 0 2
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 21
8791: PUSH
8792: LD_INT 2
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 24
8801: PUSH
8802: LD_INT 1000
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 58
8811: PUSH
8812: EMPTY
8813: LIST
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 70
8825: ST_TO_ADDR
// for i in damageVehicle_list do
8826: LD_ADDR_VAR 0 14
8830: PUSH
8831: LD_VAR 0 34
8835: PUSH
8836: FOR_IN
8837: IFFALSE 8856
// begin mechanicInside_list = UnitsInside ( i ) ;
8839: LD_ADDR_VAR 0 36
8843: PUSH
8844: LD_VAR 0 14
8848: PPUSH
8849: CALL_OW 313
8853: ST_TO_ADDR
// end ;
8854: GO 8836
8856: POP
8857: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8858: LD_ADDR_VAR 0 37
8862: PUSH
8863: LD_VAR 0 11
8867: PPUSH
8868: LD_INT 22
8870: PUSH
8871: LD_VAR 0 2
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 25
8882: PUSH
8883: LD_INT 3
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 70
8898: ST_TO_ADDR
// if damageVehicle_list > 0 then
8899: LD_VAR 0 34
8903: PUSH
8904: LD_INT 0
8906: GREATER
8907: IFFALSE 8980
// begin for i in damageVehicle_list do
8909: LD_ADDR_VAR 0 14
8913: PUSH
8914: LD_VAR 0 34
8918: PUSH
8919: FOR_IN
8920: IFFALSE 8978
// begin for j in mechanicInside_list do
8922: LD_ADDR_VAR 0 15
8926: PUSH
8927: LD_VAR 0 36
8931: PUSH
8932: FOR_IN
8933: IFFALSE 8974
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
8935: LD_VAR 0 34
8939: PPUSH
8940: LD_VAR 0 11
8944: PPUSH
8945: CALL_OW 113
// AddComExitVehicle ( j ) ;
8949: LD_VAR 0 15
8953: PPUSH
8954: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
8958: LD_VAR 0 15
8962: PPUSH
8963: LD_VAR 0 14
8967: PPUSH
8968: CALL_OW 189
// end ;
8972: GO 8932
8974: POP
8975: POP
// end ;
8976: GO 8919
8978: POP
8979: POP
// end ; if emptyVehicle_list > 0 then
8980: LD_VAR 0 35
8984: PUSH
8985: LD_INT 0
8987: GREATER
8988: IFFALSE 9038
// begin for i in emptyVehicle_list do
8990: LD_ADDR_VAR 0 14
8994: PUSH
8995: LD_VAR 0 35
8999: PUSH
9000: FOR_IN
9001: IFFALSE 9036
// begin for j in mechanicOutside_list do
9003: LD_ADDR_VAR 0 15
9007: PUSH
9008: LD_VAR 0 37
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9032
// begin AddComEnterUnit ( j , i ) ;
9016: LD_VAR 0 15
9020: PPUSH
9021: LD_VAR 0 14
9025: PPUSH
9026: CALL_OW 180
// end ;
9030: GO 9013
9032: POP
9033: POP
// end ;
9034: GO 9000
9036: POP
9037: POP
// end ; if VehicleOK_list > 0 then
9038: LD_VAR 0 33
9042: PUSH
9043: LD_INT 0
9045: GREATER
9046: IFFALSE 9237
// begin for i in VehicleOK_list do
9048: LD_ADDR_VAR 0 14
9052: PUSH
9053: LD_VAR 0 33
9057: PUSH
9058: FOR_IN
9059: IFFALSE 9235
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9061: LD_ADDR_VAR 0 19
9065: PUSH
9066: LD_INT 22
9068: PUSH
9069: LD_VAR 0 12
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PPUSH
9078: CALL_OW 69
9082: PPUSH
9083: LD_VAR 0 14
9087: PPUSH
9088: CALL_OW 74
9092: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9093: LD_ADDR_VAR 0 20
9097: PUSH
9098: LD_INT 22
9100: PUSH
9101: LD_VAR 0 12
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 2
9112: PUSH
9113: LD_INT 59
9115: PUSH
9116: EMPTY
9117: LIST
9118: PUSH
9119: LD_INT 21
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 21
9131: PUSH
9132: LD_INT 2
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: PPUSH
9152: CALL_OW 69
9156: PPUSH
9157: LD_VAR 0 14
9161: PPUSH
9162: CALL_OW 74
9166: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9167: LD_VAR 0 14
9171: PPUSH
9172: LD_VAR 0 19
9176: PPUSH
9177: CALL_OW 296
9181: PUSH
9182: LD_INT 8
9184: PLUS
9185: PUSH
9186: LD_VAR 0 14
9190: PPUSH
9191: LD_VAR 0 20
9195: PPUSH
9196: CALL_OW 296
9200: LESS
9201: IFFALSE 9219
// begin ComAttackUnit ( i , target1 ) ;
9203: LD_VAR 0 14
9207: PPUSH
9208: LD_VAR 0 19
9212: PPUSH
9213: CALL_OW 115
// end else
9217: GO 9233
// begin ComAttackUnit ( i , target2 ) ;
9219: LD_VAR 0 14
9223: PPUSH
9224: LD_VAR 0 20
9228: PPUSH
9229: CALL_OW 115
// end ; end ;
9233: GO 9058
9235: POP
9236: POP
// end ; until VehicleOK_list = 0 and damageVehicle_list = 0 ;
9237: LD_VAR 0 33
9241: PUSH
9242: LD_INT 0
9244: EQUAL
9245: PUSH
9246: LD_VAR 0 34
9250: PUSH
9251: LD_INT 0
9253: EQUAL
9254: AND
9255: IFFALSE 8659
// end ; end_of_file
9257: LD_VAR 0 13
9261: RET
// every 1 do var i , gammaSquad , startX , startY ;
9262: GO 9264
9264: DISABLE
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
9271: LD_ADDR_VAR 0 2
9275: PUSH
9276: LD_EXP 8
9280: PUSH
9281: LD_EXP 9
9285: PUSH
9286: LD_EXP 10
9290: PUSH
9291: LD_EXP 11
9295: PUSH
9296: LD_EXP 12
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
9308: LD_ADDR_VAR 0 3
9312: PUSH
9313: LD_INT 46
9315: PUSH
9316: LD_INT 45
9318: PUSH
9319: LD_INT 44
9321: PUSH
9322: LD_INT 43
9324: PUSH
9325: LD_INT 42
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
9335: LD_ADDR_VAR 0 4
9339: PUSH
9340: LD_INT 14
9342: PUSH
9343: LD_INT 12
9345: PUSH
9346: LD_INT 10
9348: PUSH
9349: LD_INT 8
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
9362: LD_INT 32
9364: PPUSH
9365: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
9369: LD_INT 32
9371: PPUSH
9372: LD_INT 51
9374: PPUSH
9375: LD_INT 26
9377: PPUSH
9378: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
9382: LD_INT 32
9384: PPUSH
9385: LD_INT 53
9387: PPUSH
9388: LD_INT 23
9390: PPUSH
9391: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
9395: LD_INT 32
9397: PPUSH
9398: LD_INT 52
9400: PPUSH
9401: LD_INT 19
9403: PPUSH
9404: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9408: LD_INT 35
9410: PPUSH
9411: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
9415: LD_INT 32
9417: PPUSH
9418: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
9422: LD_INT 32
9424: PPUSH
9425: CALL_OW 250
9429: PUSH
9430: LD_INT 52
9432: EQUAL
9433: PUSH
9434: LD_INT 32
9436: PPUSH
9437: CALL_OW 251
9441: PUSH
9442: LD_INT 19
9444: EQUAL
9445: AND
9446: IFFALSE 9408
// ComExitVehicle ( JMM ) ;
9448: LD_EXP 2
9452: PPUSH
9453: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
9457: LD_EXP 7
9461: PPUSH
9462: LD_EXP 2
9466: PPUSH
9467: CALL_OW 119
// wait ( 0 0$01 ) ;
9471: LD_INT 35
9473: PPUSH
9474: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
9478: LD_EXP 2
9482: PPUSH
9483: LD_INT 46
9485: PPUSH
9486: LD_INT 10
9488: PPUSH
9489: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9493: LD_EXP 2
9497: PPUSH
9498: LD_EXP 7
9502: PPUSH
9503: CALL_OW 179
// wait ( 0 0$4 ) ;
9507: LD_INT 140
9509: PPUSH
9510: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
9514: LD_EXP 2
9518: PPUSH
9519: LD_STRING D1-JMM-1
9521: PPUSH
9522: CALL_OW 88
// for i := 1 to gammaSquad do
9526: LD_ADDR_VAR 0 1
9530: PUSH
9531: DOUBLE
9532: LD_INT 1
9534: DEC
9535: ST_TO_ADDR
9536: LD_VAR 0 2
9540: PUSH
9541: FOR_TO
9542: IFFALSE 9603
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
9544: LD_VAR 0 2
9548: PUSH
9549: LD_VAR 0 1
9553: ARRAY
9554: PPUSH
9555: LD_VAR 0 3
9559: PUSH
9560: LD_VAR 0 1
9564: ARRAY
9565: PPUSH
9566: LD_VAR 0 4
9570: PUSH
9571: LD_VAR 0 1
9575: ARRAY
9576: PPUSH
9577: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
9581: LD_VAR 0 2
9585: PUSH
9586: LD_VAR 0 1
9590: ARRAY
9591: PPUSH
9592: LD_EXP 2
9596: PPUSH
9597: CALL_OW 179
// end ;
9601: GO 9541
9603: POP
9604: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
9605: LD_EXP 5
9609: PPUSH
9610: LD_INT 41
9612: PPUSH
9613: LD_INT 4
9615: PPUSH
9616: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
9620: LD_EXP 5
9624: PPUSH
9625: LD_EXP 2
9629: PPUSH
9630: CALL_OW 179
// Say ( Brown , D1-Brown-1 ) ;
9634: LD_EXP 7
9638: PPUSH
9639: LD_STRING D1-Brown-1
9641: PPUSH
9642: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9646: LD_EXP 2
9650: PPUSH
9651: LD_STRING D1-JMM-2
9653: PPUSH
9654: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
9658: LD_EXP 7
9662: PPUSH
9663: LD_STRING D1-Brown-2
9665: PPUSH
9666: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
9670: LD_EXP 2
9674: PPUSH
9675: LD_EXP 9
9679: PPUSH
9680: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
9684: LD_EXP 9
9688: PPUSH
9689: LD_STRING D1-FSol1-2
9691: PPUSH
9692: CALL_OW 88
// ComTurnUnit ( JMM , Campell ) ;
9696: LD_EXP 2
9700: PPUSH
9701: LD_EXP 12
9705: PPUSH
9706: CALL_OW 119
// Say ( Campell , D1-Sol2-2 ) ;
9710: LD_EXP 12
9714: PPUSH
9715: LD_STRING D1-Sol2-2
9717: PPUSH
9718: CALL_OW 88
// if Lisa then
9722: LD_EXP 5
9726: IFFALSE 9754
// begin ComTurnUnit ( JMM , Lisa ) ;
9728: LD_EXP 2
9732: PPUSH
9733: LD_EXP 5
9737: PPUSH
9738: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
9742: LD_EXP 5
9746: PPUSH
9747: LD_STRING D1-Lisa-2
9749: PPUSH
9750: CALL_OW 88
// end ; Say ( JMM , D1-JMM-3 ) ;
9754: LD_EXP 2
9758: PPUSH
9759: LD_STRING D1-JMM-3
9761: PPUSH
9762: CALL_OW 88
// ComTurnUnit ( JMM , Brown ) ;
9766: LD_EXP 2
9770: PPUSH
9771: LD_EXP 7
9775: PPUSH
9776: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9780: LD_EXP 2
9784: PPUSH
9785: LD_STRING D1-JMM-3a
9787: PPUSH
9788: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9792: LD_EXP 7
9796: PPUSH
9797: LD_INT 38
9799: PPUSH
9800: LD_INT 5
9802: PPUSH
9803: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9807: LD_EXP 7
9811: PPUSH
9812: LD_EXP 2
9816: PPUSH
9817: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9821: LD_EXP 2
9825: PPUSH
9826: LD_INT 40
9828: PPUSH
9829: LD_INT 7
9831: PPUSH
9832: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9836: LD_EXP 2
9840: PPUSH
9841: LD_EXP 7
9845: PPUSH
9846: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9850: LD_EXP 7
9854: PPUSH
9855: LD_STRING D1-Brown-3
9857: PPUSH
9858: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9862: LD_EXP 16
9866: PPUSH
9867: LD_STRING D1-Har-3
9869: PPUSH
9870: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9874: LD_EXP 2
9878: PPUSH
9879: LD_STRING D1-JMM-4
9881: PPUSH
9882: CALL_OW 88
// PrepareRussianConvoy ;
9886: CALL 1554 0 0
// SayRadio ( Harisson , D1-Har-4 ) ;
9890: LD_EXP 16
9894: PPUSH
9895: LD_STRING D1-Har-4
9897: PPUSH
9898: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9902: LD_EXP 2
9906: PPUSH
9907: LD_STRING D1-JMM-5
9909: PPUSH
9910: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9914: LD_EXP 16
9918: PPUSH
9919: LD_STRING D1-Har-5
9921: PPUSH
9922: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9926: LD_EXP 2
9930: PPUSH
9931: LD_STRING D1-JMM-6
9933: PPUSH
9934: CALL_OW 88
// InGameOff ;
9938: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
9942: LD_STRING M1
9944: PPUSH
9945: CALL_OW 337
// SaveForQuickRestart ;
9949: CALL_OW 22
// timerStatus = 1 ;
9953: LD_ADDR_EXP 28
9957: PUSH
9958: LD_INT 1
9960: ST_TO_ADDR
// startTimer = 1 ;
9961: LD_ADDR_EXP 29
9965: PUSH
9966: LD_INT 1
9968: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9969: LD_INT 105
9971: PPUSH
9972: CALL_OW 67
// DialogueOn ;
9976: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9980: LD_EXP 12
9984: PPUSH
9985: LD_STRING D9-Mech1-1
9987: PPUSH
9988: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9992: LD_EXP 2
9996: PPUSH
9997: LD_STRING D9-JMM-1
9999: PPUSH
10000: CALL_OW 88
// DialogueOff ;
10004: CALL_OW 7
// end ;
10008: PPOPN 4
10010: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
10011: LD_INT 47
10013: PPUSH
10014: LD_INT 1
10016: PPUSH
10017: CALL_OW 321
10021: PUSH
10022: LD_INT 2
10024: EQUAL
10025: PUSH
10026: LD_INT 22
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 21
10038: PUSH
10039: LD_INT 3
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 30
10048: PUSH
10049: LD_INT 3
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: PPUSH
10061: CALL_OW 69
10065: PUSH
10066: LD_INT 0
10068: GREATER
10069: AND
10070: IFFALSE 10300
10072: GO 10074
10074: DISABLE
// begin if IsOk ( Campell ) then
10075: LD_EXP 12
10079: PPUSH
10080: CALL_OW 302
10084: IFFALSE 10100
// begin Say ( Campell , D10-Mech1-1 ) ;
10086: LD_EXP 12
10090: PPUSH
10091: LD_STRING D10-Mech1-1
10093: PPUSH
10094: CALL_OW 88
// end else
10098: GO 10300
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
10100: LD_INT 22
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 21
10112: PUSH
10113: LD_INT 1
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 25
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 26
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 69
10150: PUSH
10151: LD_EXP 2
10155: PUSH
10156: EMPTY
10157: LIST
10158: PUSH
10159: LD_INT 0
10161: GREATER
10162: DIFF
10163: IFFALSE 10237
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
10165: LD_INT 22
10167: PUSH
10168: LD_INT 1
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: LD_INT 21
10177: PUSH
10178: LD_INT 1
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 25
10187: PUSH
10188: LD_INT 3
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 26
10197: PUSH
10198: LD_INT 1
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: PPUSH
10211: CALL_OW 69
10215: PUSH
10216: LD_EXP 2
10220: PUSH
10221: EMPTY
10222: LIST
10223: DIFF
10224: PPUSH
10225: LD_STRING D10-Mech1-1
10227: PPUSH
10228: LD_STRING D10-Mech1-1
10230: PPUSH
10231: CALL 2792 0 3
// end else
10235: GO 10300
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
10237: LD_INT 22
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 26
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 1
10274: ARRAY
10275: PPUSH
10276: CALL_OW 69
10280: PUSH
10281: LD_EXP 2
10285: PUSH
10286: EMPTY
10287: LIST
10288: DIFF
10289: PPUSH
10290: LD_STRING D10-Mech1-1
10292: PPUSH
10293: LD_STRING D10-Mech1-1
10295: PPUSH
10296: CALL 2792 0 3
// end ; end ; end ;
10300: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
10301: LD_INT 22
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 30
10313: PUSH
10314: LD_INT 32
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PPUSH
10325: CALL_OW 69
10329: PUSH
10330: LD_INT 0
10332: GREATER
10333: PUSH
10334: LD_EXP 31
10338: PUSH
10339: LD_INT 0
10341: EQUAL
10342: AND
10343: IFFALSE 10591
10345: GO 10347
10347: DISABLE
// begin if IsOK ( Claptopn ) then
10348: LD_EXP 11
10352: PPUSH
10353: CALL_OW 302
10357: IFFALSE 10373
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
10359: LD_EXP 11
10363: PPUSH
10364: LD_STRING D9b-Eng1-1
10366: PPUSH
10367: CALL_OW 88
// end else
10371: GO 10569
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
10373: LD_INT 22
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 21
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 25
10395: PUSH
10396: LD_INT 3
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 26
10405: PUSH
10406: LD_INT 1
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: PPUSH
10419: CALL_OW 69
10423: PUSH
10424: LD_EXP 2
10428: PUSH
10429: EMPTY
10430: LIST
10431: PUSH
10432: LD_INT 0
10434: GREATER
10435: DIFF
10436: IFFALSE 10510
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
10438: LD_INT 22
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 1
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 25
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 26
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 69
10488: PUSH
10489: LD_EXP 2
10493: PUSH
10494: EMPTY
10495: LIST
10496: DIFF
10497: PPUSH
10498: LD_STRING D9b-Eng1-1
10500: PPUSH
10501: LD_STRING D9b-Eng1-11
10503: PPUSH
10504: CALL 2792 0 3
// end else
10508: GO 10569
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
10510: LD_INT 22
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 21
10522: PUSH
10523: LD_INT 1
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 26
10532: PUSH
10533: LD_INT 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 69
10549: PUSH
10550: LD_EXP 2
10554: PUSH
10555: EMPTY
10556: LIST
10557: DIFF
10558: PPUSH
10559: LD_STRING D9b-Eng1-1
10561: PPUSH
10562: LD_STRING D9b-Eng1-1
10564: PPUSH
10565: CALL 2792 0 3
// end ; end ; if energyVDialog = 0 then
10569: LD_EXP 32
10573: PUSH
10574: LD_INT 0
10576: EQUAL
10577: IFFALSE 10583
// EnergyDialog ;
10579: CALL 3104 0 0
// bunkerDialog = 1 ;
10583: LD_ADDR_EXP 31
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
10592: LD_EXP 33
10596: PUSH
10597: LD_INT 1
10599: EQUAL
10600: PUSH
10601: LD_EXP 34
10605: PUSH
10606: LD_INT 1
10608: EQUAL
10609: AND
10610: IFFALSE 10622
10612: GO 10614
10614: DISABLE
// ChangeMissionObjectives ( M1a ) ;
10615: LD_STRING M1a
10617: PPUSH
10618: CALL_OW 337
10622: END
// every 3 3$0 do
10623: GO 10625
10625: DISABLE
// begin PrepareFirstAttack ;
10626: CALL 2354 0 0
// end ;
10630: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
10631: LD_INT 22
10633: PUSH
10634: LD_INT 5
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 21
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PPUSH
10655: CALL_OW 69
10659: PUSH
10660: LD_INT 3
10662: LESSEQUAL
10663: PUSH
10664: LD_EXP 22
10668: PUSH
10669: LD_INT 1
10671: EQUAL
10672: AND
10673: IFFALSE 10991
10675: GO 10677
10677: DISABLE
10678: LD_INT 0
10680: PPUSH
// begin firstRussianAttack = 2 ;
10681: LD_ADDR_EXP 22
10685: PUSH
10686: LD_INT 2
10688: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10689: LD_ADDR_VAR 0 1
10693: PUSH
10694: LD_INT 22
10696: PUSH
10697: LD_INT 5
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 21
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10743
// ComMoveXY ( i , 125 , 98 ) ;
10726: LD_VAR 0 1
10730: PPUSH
10731: LD_INT 125
10733: PPUSH
10734: LD_INT 98
10736: PPUSH
10737: CALL_OW 111
10741: GO 10723
10743: POP
10744: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10745: LD_INT 22
10747: PUSH
10748: LD_INT 1
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 21
10757: PUSH
10758: LD_INT 1
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 69
10773: PUSH
10774: LD_EXP 2
10778: PUSH
10779: LD_EXP 7
10783: PUSH
10784: LD_EXP 5
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: DIFF
10794: PPUSH
10795: LD_STRING DAtt1-Sol1-1
10797: PPUSH
10798: LD_STRING DAtt1-FSol1-1
10800: PPUSH
10801: CALL 2792 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10805: LD_EXP 2
10809: PPUSH
10810: LD_STRING DAtt1-JMM-1
10812: PPUSH
10813: CALL_OW 88
// if Lisa then
10817: LD_EXP 5
10821: IFFALSE 10837
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
10823: LD_EXP 5
10827: PPUSH
10828: LD_STRING DAtt1a-Lisa-1
10830: PPUSH
10831: CALL_OW 88
// end else
10835: GO 10908
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10837: LD_INT 22
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 21
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 26
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: PPUSH
10872: CALL_OW 69
10876: PUSH
10877: LD_EXP 2
10881: PUSH
10882: LD_EXP 7
10886: PUSH
10887: LD_EXP 5
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: LIST
10896: DIFF
10897: PPUSH
10898: LD_STRING DAtt1a-Sol1-1
10900: PPUSH
10901: LD_STRING DAtt1-FSol1-1
10903: PPUSH
10904: CALL 2792 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
10908: LD_EXP 2
10912: PPUSH
10913: LD_STRING DAtt1a-JMM-1
10915: PPUSH
10916: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10920: LD_INT 22
10922: PUSH
10923: LD_INT 1
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 21
10932: PUSH
10933: LD_INT 1
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 26
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PPUSH
10955: CALL_OW 69
10959: PUSH
10960: LD_EXP 2
10964: PUSH
10965: LD_EXP 7
10969: PUSH
10970: LD_EXP 5
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: DIFF
10980: PPUSH
10981: LD_STRING DAtt1b-Sol1-1
10983: PPUSH
10984: LD_STRING DAtt1a-Sol1-1
10986: PPUSH
10987: CALL 2792 0 3
// end ;
10991: PPOPN 1
10993: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
10994: LD_EXP 22
10998: PUSH
10999: LD_INT 2
11001: EQUAL
11002: IFFALSE 11064
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
// begin enable ;
11010: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
11011: LD_ADDR_VAR 0 1
11015: PUSH
11016: LD_INT 5
11018: PPUSH
11019: LD_INT 22
11021: PUSH
11022: LD_INT 5
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 21
11031: PUSH
11032: LD_INT 1
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PPUSH
11043: CALL_OW 70
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11062
// RemoveUnit ( i ) ;
11051: LD_VAR 0 1
11055: PPUSH
11056: CALL_OW 64
11060: GO 11048
11062: POP
11063: POP
// end ;
11064: PPOPN 1
11066: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
11067: LD_INT 22
11069: PUSH
11070: LD_INT 5
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: EMPTY
11078: LIST
11079: PPUSH
11080: CALL_OW 69
11084: PUSH
11085: LD_INT 0
11087: EQUAL
11088: PUSH
11089: LD_EXP 22
11093: PUSH
11094: LD_INT 2
11096: EQUAL
11097: AND
11098: IFFALSE 11111
11100: GO 11102
11102: DISABLE
// firstRussianAttack = 3 ;
11103: LD_ADDR_EXP 22
11107: PUSH
11108: LD_INT 3
11110: ST_TO_ADDR
11111: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
11112: LD_EXP 27
11116: PUSH
11117: LD_INT 0
11119: EQUAL
11120: IFFALSE 11201
11122: GO 11124
11124: DISABLE
// begin startTimer = 0 ;
11125: LD_ADDR_EXP 29
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// timerStatus = 0 ;
11133: LD_ADDR_EXP 28
11137: PUSH
11138: LD_INT 0
11140: ST_TO_ADDR
// SayRadio ( Donaldson , D2-Don-1 ) ;
11141: LD_EXP 13
11145: PPUSH
11146: LD_STRING D2-Don-1
11148: PPUSH
11149: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
11153: LD_EXP 2
11157: PPUSH
11158: LD_STRING D2-JMM-1
11160: PPUSH
11161: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
11165: LD_EXP 13
11169: PPUSH
11170: LD_STRING D2-Don-2
11172: PPUSH
11173: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
11177: LD_EXP 2
11181: PPUSH
11182: LD_STRING D2-JMM-2
11184: PPUSH
11185: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
11189: LD_EXP 13
11193: PPUSH
11194: LD_STRING D2-Don-3
11196: PPUSH
11197: CALL_OW 94
// end ;
11201: END
// every 12 12$0 do var tmp ;
11202: GO 11204
11204: DISABLE
11205: LD_INT 0
11207: PPUSH
// begin PrepareDonaldsonArmy ;
11208: CALL 759 0 0
// CenterNowOnUnits ( Donaldson ) ;
11212: LD_EXP 13
11216: PPUSH
11217: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
11221: LD_ADDR_VAR 0 1
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 4
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 21
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 26
11248: PUSH
11249: LD_INT 1
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: PUSH
11266: LD_EXP 6
11270: PUSH
11271: EMPTY
11272: LIST
11273: DIFF
11274: ST_TO_ADDR
// DialogueOn ;
11275: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
11279: LD_VAR 0 1
11283: PPUSH
11284: LD_STRING D3-Sol1-1
11286: PPUSH
11287: LD_STRING D3-Sol1-1
11289: PPUSH
11290: CALL 2792 0 3
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
11294: LD_VAR 0 1
11298: PPUSH
11299: LD_STRING D3-Sol2-1
11301: PPUSH
11302: LD_STRING D3-Sol2-1
11304: PPUSH
11305: CALL 2792 0 3
// if Frank then
11309: LD_EXP 6
11313: IFFALSE 11327
// Say ( Frank , D3-Frank-1 ) ;
11315: LD_EXP 6
11319: PPUSH
11320: LD_STRING D3-Frank-1
11322: PPUSH
11323: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
11327: LD_EXP 13
11331: PPUSH
11332: LD_STRING D3-Don-1
11334: PPUSH
11335: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
11339: LD_EXP 13
11343: PPUSH
11344: LD_STRING D3-Don-1a
11346: PPUSH
11347: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
11351: LD_EXP 2
11355: PPUSH
11356: LD_STRING D3-JMM-1
11358: PPUSH
11359: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
11363: LD_EXP 13
11367: PPUSH
11368: LD_STRING D3-Don-2
11370: PPUSH
11371: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
11375: LD_INT 22
11377: PUSH
11378: LD_INT 6
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 21
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PPUSH
11399: CALL_OW 69
11403: PUSH
11404: LD_INT 0
11406: GREATER
11407: IFFALSE 11511
// begin Say ( JMM , D3-JMM-2 ) ;
11409: LD_EXP 2
11413: PPUSH
11414: LD_STRING D3-JMM-2
11416: PPUSH
11417: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
11421: LD_EXP 13
11425: PPUSH
11426: LD_STRING D3-Don-3
11428: PPUSH
11429: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
11433: LD_EXP 2
11437: PPUSH
11438: LD_STRING D3-JMM-3
11440: PPUSH
11441: CALL_OW 88
// if Frank then
11445: LD_EXP 6
11449: IFFALSE 11463
// Say ( Frank , D3-Frank-4 ) ;
11451: LD_EXP 6
11455: PPUSH
11456: LD_STRING D3-Frank-4
11458: PPUSH
11459: CALL_OW 88
// DialogueOff ;
11463: CALL_OW 7
// if Frank then
11467: LD_EXP 6
11471: IFFALSE 11509
// begin SetSide ( Frank , 0 ) ;
11473: LD_EXP 6
11477: PPUSH
11478: LD_INT 0
11480: PPUSH
11481: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11485: LD_EXP 6
11489: PPUSH
11490: LD_INT 12
11492: PPUSH
11493: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
11497: LD_EXP 6
11501: PPUSH
11502: LD_STRING Frank
11504: PPUSH
11505: CALL_OW 38
// end ; end else
11509: GO 11569
// begin Say ( JMM , D3-JMM-4 ) ;
11511: LD_EXP 2
11515: PPUSH
11516: LD_STRING D3-JMM-4
11518: PPUSH
11519: CALL_OW 88
// DialogueOff ;
11523: CALL_OW 7
// if Frank then
11527: LD_EXP 6
11531: IFFALSE 11569
// begin SetSide ( Frank , 0 ) ;
11533: LD_EXP 6
11537: PPUSH
11538: LD_INT 0
11540: PPUSH
11541: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11545: LD_EXP 6
11549: PPUSH
11550: LD_INT 12
11552: PPUSH
11553: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
11557: LD_EXP 6
11561: PPUSH
11562: LD_STRING Frank
11564: PPUSH
11565: CALL_OW 38
// end ; end ; end ;
11569: PPOPN 1
11571: END
// every 0 0$1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
11572: LD_EXP 6
11576: PPUSH
11577: LD_INT 12
11579: PPUSH
11580: CALL_OW 308
11584: PUSH
11585: LD_EXP 6
11589: PPUSH
11590: CALL_OW 255
11594: PUSH
11595: LD_INT 0
11597: EQUAL
11598: AND
11599: IFFALSE 11621
11601: GO 11603
11603: DISABLE
// begin RemoveUnit ( Frank ) ;
11604: LD_EXP 6
11608: PPUSH
11609: CALL_OW 64
// frankScoutBase = 1 ;
11613: LD_ADDR_EXP 24
11617: PUSH
11618: LD_INT 1
11620: ST_TO_ADDR
// end ;
11621: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
11622: LD_EXP 13
11626: PPUSH
11627: CALL_OW 255
11631: PUSH
11632: LD_INT 4
11634: EQUAL
11635: PUSH
11636: LD_EXP 13
11640: PPUSH
11641: CALL_OW 302
11645: AND
11646: IFFALSE 11671
11648: GO 11650
11650: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
11651: LD_EXP 13
11655: PPUSH
11656: LD_STRING D3b-Don-1
11658: PPUSH
11659: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11663: LD_ADDR_EXP 39
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// end ;
11671: END
// every 0 0$1 trigger FilterUnitsInArea ( DonaldsonArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 do
11672: LD_INT 10
11674: PPUSH
11675: LD_INT 22
11677: PUSH
11678: LD_INT 1
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 21
11687: PUSH
11688: LD_INT 1
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PPUSH
11699: CALL_OW 70
11703: PUSH
11704: LD_INT 0
11706: GREATER
11707: IFFALSE 11756
11709: GO 11711
11711: DISABLE
// begin saveDonaldson = 1 ;
11712: LD_ADDR_EXP 23
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
11720: LD_INT 22
11722: PUSH
11723: LD_INT 4
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 21
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 69
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 235
// end ;
11756: END
// every 2 2$0 trigger saveDonaldson = 1 do
11757: LD_EXP 23
11761: PUSH
11762: LD_INT 1
11764: EQUAL
11765: IFFALSE 12007
11767: GO 11769
11769: DISABLE
// begin uc_side = 4 ;
11770: LD_ADDR_OWVAR 20
11774: PUSH
11775: LD_INT 4
11777: ST_TO_ADDR
// uc_nation = 1 ;
11778: LD_ADDR_OWVAR 21
11782: PUSH
11783: LD_INT 1
11785: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
11786: LD_ADDR_EXP 6
11790: PUSH
11791: LD_STRING Frank
11793: PPUSH
11794: CALL_OW 34
11798: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11799: LD_EXP 6
11803: PPUSH
11804: LD_INT 13
11806: PPUSH
11807: LD_INT 0
11809: PPUSH
11810: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11814: LD_INT 35
11816: PPUSH
11817: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
11821: LD_EXP 6
11825: PPUSH
11826: LD_INT 51
11828: PPUSH
11829: LD_INT 15
11831: PPUSH
11832: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
11836: LD_EXP 6
11840: PPUSH
11841: LD_EXP 2
11845: PPUSH
11846: CALL_OW 296
11850: PUSH
11851: LD_INT 6
11853: LESS
11854: IFFALSE 11814
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11856: LD_EXP 2
11860: PUSH
11861: LD_EXP 6
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 87
// DialogueOn ;
11874: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11878: LD_EXP 6
11882: PPUSH
11883: LD_STRING D3a-Frank-1
11885: PPUSH
11886: CALL_OW 88
// if Lisa then
11890: LD_EXP 5
11894: IFFALSE 11944
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11896: LD_EXP 5
11900: PPUSH
11901: LD_STRING D3a-Lisa-1
11903: PPUSH
11904: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11908: LD_EXP 6
11912: PPUSH
11913: LD_STRING D3a-Frank-2
11915: PPUSH
11916: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11920: LD_EXP 5
11924: PPUSH
11925: LD_STRING D3a-Lisa-2
11927: PPUSH
11928: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11932: LD_EXP 6
11936: PPUSH
11937: LD_STRING D3a-Frank-3
11939: PPUSH
11940: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11944: LD_EXP 2
11948: PPUSH
11949: LD_STRING D3a-JMM-3
11951: PPUSH
11952: CALL_OW 88
// DialogueOff ;
11956: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11960: LD_EXP 6
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 235
// InGameOn ;
11972: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11976: LD_INT 1
11978: PPUSH
11979: LD_INT 7
11981: PPUSH
11982: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11986: LD_INT 93
11988: PPUSH
11989: LD_INT 91
11991: PPUSH
11992: CALL_OW 84
// wait ( 0 0$5 ) ;
11996: LD_INT 175
11998: PPUSH
11999: CALL_OW 67
// InGameOff ;
12003: CALL_OW 9
// end ;
12007: END
// every 18 18$0 do
12008: GO 12010
12010: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
12011: LD_EXP 16
12015: PPUSH
12016: LD_STRING D4-Har-1
12018: PPUSH
12019: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
12023: LD_EXP 2
12027: PPUSH
12028: LD_STRING D4-JMM-1
12030: PPUSH
12031: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
12035: LD_EXP 16
12039: PPUSH
12040: LD_STRING D4-Har-2
12042: PPUSH
12043: CALL_OW 94
// case query ( Q1 ) of 1 :
12047: LD_STRING Q1
12049: PPUSH
12050: CALL_OW 97
12054: PUSH
12055: LD_INT 1
12057: DOUBLE
12058: EQUAL
12059: IFTRUE 12063
12061: GO 12122
12063: POP
// begin Say ( JMM , D5-JMM-1 ) ;
12064: LD_EXP 2
12068: PPUSH
12069: LD_STRING D5-JMM-1
12071: PPUSH
12072: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
12076: LD_EXP 16
12080: PPUSH
12081: LD_STRING D5-Har-1
12083: PPUSH
12084: CALL_OW 94
// timeToSupport = 10 10$0 ;
12088: LD_ADDR_EXP 27
12092: PUSH
12093: LD_INT 21000
12095: ST_TO_ADDR
// timerStatus = 2 ;
12096: LD_ADDR_EXP 28
12100: PUSH
12101: LD_INT 2
12103: ST_TO_ADDR
// startTimer = 1 ;
12104: LD_ADDR_EXP 29
12108: PUSH
12109: LD_INT 1
12111: ST_TO_ADDR
// harrAnswer = 1 ;
12112: LD_ADDR_EXP 25
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// end ; 2 :
12120: GO 12257
12122: LD_INT 2
12124: DOUBLE
12125: EQUAL
12126: IFTRUE 12130
12128: GO 12189
12130: POP
// begin Say ( JMM , D5-JMM-2 ) ;
12131: LD_EXP 2
12135: PPUSH
12136: LD_STRING D5-JMM-2
12138: PPUSH
12139: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
12143: LD_EXP 16
12147: PPUSH
12148: LD_STRING D5-Har-2
12150: PPUSH
12151: CALL_OW 94
// timeToSupport = 5 5$0 ;
12155: LD_ADDR_EXP 27
12159: PUSH
12160: LD_INT 10500
12162: ST_TO_ADDR
// timerStatus = 2 ;
12163: LD_ADDR_EXP 28
12167: PUSH
12168: LD_INT 2
12170: ST_TO_ADDR
// startTimer = 1 ;
12171: LD_ADDR_EXP 29
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// harrAnswer = 2 ;
12179: LD_ADDR_EXP 25
12183: PUSH
12184: LD_INT 2
12186: ST_TO_ADDR
// end ; 3 :
12187: GO 12257
12189: LD_INT 3
12191: DOUBLE
12192: EQUAL
12193: IFTRUE 12197
12195: GO 12256
12197: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12198: LD_EXP 2
12202: PPUSH
12203: LD_STRING D5-JMM-3
12205: PPUSH
12206: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12210: LD_EXP 16
12214: PPUSH
12215: LD_STRING D5-Har-3
12217: PPUSH
12218: CALL_OW 94
// timeToSupport = 5 5$0 ;
12222: LD_ADDR_EXP 27
12226: PUSH
12227: LD_INT 10500
12229: ST_TO_ADDR
// timerStatus = 2 ;
12230: LD_ADDR_EXP 28
12234: PUSH
12235: LD_INT 2
12237: ST_TO_ADDR
// startTimer = 1 ;
12238: LD_ADDR_EXP 29
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// harrAnswer = 3 ;
12246: LD_ADDR_EXP 25
12250: PUSH
12251: LD_INT 3
12253: ST_TO_ADDR
// end ; end ;
12254: GO 12257
12256: POP
// end ;
12257: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12258: LD_EXP 28
12262: PUSH
12263: LD_INT 2
12265: EQUAL
12266: PUSH
12267: LD_EXP 27
12271: PUSH
12272: LD_INT 0
12274: EQUAL
12275: AND
12276: IFFALSE 12561
12278: GO 12280
12280: DISABLE
// begin startTimer = 0 ;
12281: LD_ADDR_EXP 29
12285: PUSH
12286: LD_INT 0
12288: ST_TO_ADDR
// timerStatus = 0 ;
12289: LD_ADDR_EXP 28
12293: PUSH
12294: LD_INT 0
12296: ST_TO_ADDR
// if harrAnswer = 1 then
12297: LD_EXP 25
12301: PUSH
12302: LD_INT 1
12304: EQUAL
12305: IFFALSE 12385
// begin PrepareHarrisonSupport ( 3 ) ;
12307: LD_INT 3
12309: PPUSH
12310: CALL 950 0 1
// wait ( 1 1$0 ) ;
12314: LD_INT 2100
12316: PPUSH
12317: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12321: LD_EXP 16
12325: PPUSH
12326: LD_STRING D7-Har-1
12328: PPUSH
12329: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12333: LD_STRING M2
12335: PPUSH
12336: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
12340: LD_ADDR_EXP 26
12344: PUSH
12345: LD_INT 31500
12347: PUSH
12348: LD_INT 10500
12350: PUSH
12351: LD_INT 8400
12353: PUSH
12354: LD_INT 6300
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: PUSH
12362: LD_OWVAR 67
12366: ARRAY
12367: PLUS
12368: ST_TO_ADDR
// startTimer = 1 ;
12369: LD_ADDR_EXP 29
12373: PUSH
12374: LD_INT 1
12376: ST_TO_ADDR
// timerStatus = 3 ;
12377: LD_ADDR_EXP 28
12381: PUSH
12382: LD_INT 3
12384: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12385: LD_EXP 25
12389: PUSH
12390: LD_INT 2
12392: EQUAL
12393: IFFALSE 12473
// begin PrepareHarrisonSupport ( 4 ) ;
12395: LD_INT 4
12397: PPUSH
12398: CALL 950 0 1
// wait ( 1 1$0 ) ;
12402: LD_INT 2100
12404: PPUSH
12405: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12409: LD_EXP 16
12413: PPUSH
12414: LD_STRING D7-Har-1
12416: PPUSH
12417: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12421: LD_STRING M2
12423: PPUSH
12424: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
12428: LD_ADDR_EXP 26
12432: PUSH
12433: LD_INT 27300
12435: PUSH
12436: LD_INT 8400
12438: PUSH
12439: LD_INT 8400
12441: PUSH
12442: LD_INT 6300
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: PUSH
12450: LD_OWVAR 67
12454: ARRAY
12455: PLUS
12456: ST_TO_ADDR
// startTimer = 1 ;
12457: LD_ADDR_EXP 29
12461: PUSH
12462: LD_INT 1
12464: ST_TO_ADDR
// timerStatus = 3 ;
12465: LD_ADDR_EXP 28
12469: PUSH
12470: LD_INT 3
12472: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12473: LD_EXP 25
12477: PUSH
12478: LD_INT 3
12480: EQUAL
12481: IFFALSE 12561
// begin PrepareHarrisonSupport ( 5 ) ;
12483: LD_INT 5
12485: PPUSH
12486: CALL 950 0 1
// wait ( 1 1$0 ) ;
12490: LD_INT 2100
12492: PPUSH
12493: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12497: LD_EXP 16
12501: PPUSH
12502: LD_STRING D7-Har-1
12504: PPUSH
12505: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12509: LD_STRING M2
12511: PPUSH
12512: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
12516: LD_ADDR_EXP 26
12520: PUSH
12521: LD_INT 21000
12523: PUSH
12524: LD_INT 8400
12526: PUSH
12527: LD_INT 6300
12529: PUSH
12530: LD_INT 4200
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: LD_OWVAR 67
12542: ARRAY
12543: PLUS
12544: ST_TO_ADDR
// startTimer = 1 ;
12545: LD_ADDR_EXP 29
12549: PUSH
12550: LD_INT 1
12552: ST_TO_ADDR
// timerStatus = 3 ;
12553: LD_ADDR_EXP 28
12557: PUSH
12558: LD_INT 3
12560: ST_TO_ADDR
// end ; end ;
12561: END
// every 0 0$1 trigger timeToDestroyRuBase <= timeToDestroyRuBase / 2 and timerStatus = 3 do
12562: LD_EXP 26
12566: PUSH
12567: LD_EXP 26
12571: PUSH
12572: LD_INT 2
12574: DIVREAL
12575: LESSEQUAL
12576: PUSH
12577: LD_EXP 28
12581: PUSH
12582: LD_INT 3
12584: EQUAL
12585: AND
12586: IFFALSE 12618
12588: GO 12590
12590: DISABLE
// begin DialogueOn ;
12591: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12595: LD_EXP 16
12599: PPUSH
12600: LD_STRING D7a-Har-1
12602: PPUSH
12603: CALL_OW 94
// DialogueOff ;
12607: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12611: LD_STRING M2a
12613: PPUSH
12614: CALL_OW 337
// end ;
12618: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
12619: LD_EXP 26
12623: PUSH
12624: LD_INT 0
12626: LESSEQUAL
12627: PUSH
12628: LD_EXP 28
12632: PUSH
12633: LD_INT 3
12635: EQUAL
12636: AND
12637: IFFALSE 12746
12639: GO 12641
12641: DISABLE
12642: LD_INT 0
12644: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12645: LD_ADDR_VAR 0 1
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 69
12664: PUSH
12665: LD_EXP 2
12669: PUSH
12670: EMPTY
12671: LIST
12672: DIFF
12673: ST_TO_ADDR
// DialogueOn ;
12674: CALL_OW 6
// if IsOK ( Donaldson ) then
12678: LD_EXP 13
12682: PPUSH
12683: CALL_OW 302
12687: IFFALSE 12703
// begin SayRadio ( Harisson , D8-Har-1 ) ;
12689: LD_EXP 16
12693: PPUSH
12694: LD_STRING D8-Har-1
12696: PPUSH
12697: CALL_OW 94
// end else
12701: GO 12715
// begin SayRadio ( Harisson , D8-Har-1a ) ;
12703: LD_EXP 16
12707: PPUSH
12708: LD_STRING D8-Har-1a
12710: PPUSH
12711: CALL_OW 94
// end ; DialogueOff ;
12715: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12719: LD_VAR 0 1
12723: PPUSH
12724: LD_INT 4
12726: PPUSH
12727: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12731: LD_VAR 0 1
12735: PPUSH
12736: LD_INT 88
12738: PPUSH
12739: LD_INT 89
12741: PPUSH
12742: CALL_OW 114
// end ; end_of_file
12746: PPOPN 1
12748: END
// every 0 0$1 trigger AIEnable = 1 do
12749: LD_EXP 36
12753: PUSH
12754: LD_INT 1
12756: EQUAL
12757: IFFALSE 12885
12759: GO 12761
12761: DISABLE
// begin enable ;
12762: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
12763: LD_INT 3
12765: PPUSH
12766: LD_INT 21
12768: PPUSH
12769: CALL 3840 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 8
12778: PPUSH
12779: LD_INT 7
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL 4081 0 4
// if baseReadyToBuild = 2 then
12789: LD_EXP 20
12793: PUSH
12794: LD_INT 2
12796: EQUAL
12797: IFFALSE 12885
// begin RepairBuilding ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] [ 1 ] ) ) ;
12799: LD_INT 6
12801: PPUSH
12802: LD_INT 22
12804: PUSH
12805: LD_INT 6
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 30
12814: PUSH
12815: LD_INT 0
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 1
12828: ARRAY
12829: PPUSH
12830: CALL_OW 69
12834: PPUSH
12835: CALL 3840 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , 6 ] ] [ 1 ] ) ) ;
12839: LD_INT 6
12841: PPUSH
12842: LD_INT 9
12844: PPUSH
12845: LD_INT 6
12847: PPUSH
12848: LD_INT 22
12850: PUSH
12851: LD_INT 6
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 30
12860: PUSH
12861: LD_INT 6
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PPUSH
12876: CALL_OW 69
12880: PPUSH
12881: CALL 4081 0 4
// end ; end ;
12885: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
12886: LD_EXP 36
12890: PUSH
12891: LD_INT 1
12893: EQUAL
12894: IFFALSE 12937
12896: GO 12898
12898: DISABLE
// begin enable ;
12899: ENABLE
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 42 , 43 ] , 1 , 1 , 22 ) ;
12900: LD_INT 3
12902: PPUSH
12903: LD_INT 24
12905: PPUSH
12906: LD_OWVAR 67
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: LD_INT 42
12916: PUSH
12917: LD_INT 43
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: LD_INT 1
12929: PPUSH
12930: LD_INT 22
12932: PPUSH
12933: CALL 4360 0 8
// end ;
12937: END
// every 0 0$1 do
12938: GO 12940
12940: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
12941: LD_INT 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: LD_INT 3
12949: PPUSH
12950: CALL 3755 0 3
12954: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
12955: LD_EXP 20
12959: PUSH
12960: LD_INT 1
12962: EQUAL
12963: IFFALSE 13084
12965: GO 12967
12967: DISABLE
12968: LD_INT 0
12970: PPUSH
12971: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
12972: LD_ADDR_VAR 0 2
12976: PUSH
12977: LD_INT 22
12979: PUSH
12980: LD_INT 6
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 21
12989: PUSH
12990: LD_INT 2
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 34
12999: PUSH
13000: LD_INT 51
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 69
13016: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13017: LD_VAR 0 2
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PPUSH
13026: LD_EXP 21
13030: PPUSH
13031: CALL_OW 250
13035: PUSH
13036: LD_INT 5
13038: MINUS
13039: PPUSH
13040: LD_EXP 21
13044: PPUSH
13045: CALL_OW 251
13049: PUSH
13050: LD_INT 5
13052: MINUS
13053: PPUSH
13054: CALL_OW 111
// wait ( 0 0$5 ) ;
13058: LD_INT 175
13060: PPUSH
13061: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13065: LD_VAR 0 2
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: LD_INT 41
13076: PPUSH
13077: LD_INT 52
13079: PPUSH
13080: CALL_OW 177
// end ;
13084: PPOPN 2
13086: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13087: LD_EXP 21
13091: PPUSH
13092: CALL_OW 274
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: CALL_OW 275
13104: PUSH
13105: LD_INT 100
13107: GREATEREQUAL
13108: IFFALSE 13336
13110: GO 13112
13112: DISABLE
13113: LD_INT 0
13115: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13116: LD_ADDR_VAR 0 1
13120: PUSH
13121: LD_INT 22
13123: PUSH
13124: LD_INT 6
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 21
13133: PUSH
13134: LD_INT 1
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 25
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: PPUSH
13156: CALL_OW 69
13160: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13161: LD_VAR 0 1
13165: PUSH
13166: LD_INT 1
13168: ARRAY
13169: PPUSH
13170: LD_INT 4
13172: PPUSH
13173: LD_INT 39
13175: PPUSH
13176: LD_INT 37
13178: PPUSH
13179: LD_INT 3
13181: PPUSH
13182: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13186: LD_VAR 0 1
13190: PUSH
13191: LD_INT 1
13193: ARRAY
13194: PPUSH
13195: LD_INT 29
13197: PPUSH
13198: LD_INT 42
13200: PPUSH
13201: LD_INT 54
13203: PPUSH
13204: LD_INT 3
13206: PPUSH
13207: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13211: LD_VAR 0 1
13215: PUSH
13216: LD_INT 1
13218: ARRAY
13219: PPUSH
13220: LD_INT 6
13222: PPUSH
13223: LD_INT 38
13225: PPUSH
13226: LD_INT 48
13228: PPUSH
13229: LD_INT 0
13231: PPUSH
13232: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13236: LD_VAR 0 1
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: LD_INT 2
13247: PPUSH
13248: LD_INT 32
13250: PPUSH
13251: LD_INT 38
13253: PPUSH
13254: LD_INT 2
13256: PPUSH
13257: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13261: LD_VAR 0 1
13265: PUSH
13266: LD_INT 1
13268: ARRAY
13269: PPUSH
13270: LD_INT 26
13272: PPUSH
13273: LD_INT 39
13275: PPUSH
13276: LD_INT 55
13278: PPUSH
13279: LD_INT 3
13281: PPUSH
13282: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13286: LD_VAR 0 1
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: LD_INT 32
13297: PPUSH
13298: LD_INT 31
13300: PPUSH
13301: LD_INT 31
13303: PPUSH
13304: LD_INT 3
13306: PPUSH
13307: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13311: LD_VAR 0 1
13315: PUSH
13316: LD_INT 1
13318: ARRAY
13319: PPUSH
13320: LD_INT 31
13322: PPUSH
13323: LD_INT 50
13325: PPUSH
13326: LD_INT 51
13328: PPUSH
13329: LD_INT 4
13331: PPUSH
13332: CALL_OW 205
// end ; end_of_file
13336: PPOPN 1
13338: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
13339: LD_INT 0
13341: PPUSH
13342: PPUSH
13343: PPUSH
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
13348: LD_ADDR_VAR 0 3
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_INT 6
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 21
13365: PUSH
13366: LD_INT 1
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 25
13375: PUSH
13376: LD_INT 1
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 3
13385: PUSH
13386: LD_INT 54
13388: PUSH
13389: EMPTY
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 69
13406: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
13407: LD_ADDR_VAR 0 7
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 6
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 21
13424: PUSH
13425: LD_INT 1
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 25
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 54
13444: PUSH
13445: EMPTY
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: PPUSH
13454: CALL_OW 69
13458: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13459: LD_ADDR_VAR 0 4
13463: PUSH
13464: LD_INT 22
13466: PUSH
13467: LD_INT 6
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 21
13476: PUSH
13477: LD_INT 1
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 25
13486: PUSH
13487: LD_INT 2
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: PPUSH
13499: CALL_OW 69
13503: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
13504: LD_ADDR_VAR 0 6
13508: PUSH
13509: LD_INT 22
13511: PUSH
13512: LD_INT 6
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 21
13521: PUSH
13522: LD_INT 1
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 4
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: PPUSH
13544: CALL_OW 69
13548: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13549: LD_ADDR_VAR 0 8
13553: PUSH
13554: LD_INT 22
13556: PUSH
13557: LD_INT 6
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 21
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 34
13576: PUSH
13577: LD_INT 51
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: PPUSH
13589: CALL_OW 69
13593: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
13594: LD_VAR 0 1
13598: PPUSH
13599: CALL_OW 255
13603: PUSH
13604: LD_INT 6
13606: EQUAL
13607: PUSH
13608: LD_VAR 0 1
13612: PPUSH
13613: CALL_OW 266
13617: PUSH
13618: LD_INT 0
13620: EQUAL
13621: AND
13622: IFFALSE 13642
// begin building = ruPDepot ;
13624: LD_ADDR_VAR 0 1
13628: PUSH
13629: LD_EXP 21
13633: ST_TO_ADDR
// baseReadyToBuild = 1 ;
13634: LD_ADDR_EXP 20
13638: PUSH
13639: LD_INT 1
13641: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 266
13651: PUSH
13652: LD_INT 4
13654: EQUAL
13655: PUSH
13656: LD_VAR 0 1
13660: PPUSH
13661: CALL_OW 255
13665: PUSH
13666: LD_INT 6
13668: EQUAL
13669: AND
13670: IFFALSE 13703
// for i in tmpSold do
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_VAR 0 3
13681: PUSH
13682: FOR_IN
13683: IFFALSE 13701
// ComEnterUnit ( i , building ) ;
13685: LD_VAR 0 2
13689: PPUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 120
13699: GO 13682
13701: POP
13702: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
13703: LD_VAR 0 1
13707: PPUSH
13708: CALL_OW 266
13712: PUSH
13713: LD_INT 6
13715: EQUAL
13716: PUSH
13717: LD_VAR 0 1
13721: PPUSH
13722: CALL_OW 255
13726: PUSH
13727: LD_INT 6
13729: EQUAL
13730: AND
13731: IFFALSE 13779
// begin for i in tmpSci do
13733: LD_ADDR_VAR 0 2
13737: PUSH
13738: LD_VAR 0 6
13742: PUSH
13743: FOR_IN
13744: IFFALSE 13762
// ComEnterUnit ( i , building ) ;
13746: LD_VAR 0 2
13750: PPUSH
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 120
13760: GO 13743
13762: POP
13763: POP
// ResAllTechs ( 6 , building , 3 ) ;
13764: LD_INT 6
13766: PPUSH
13767: LD_VAR 0 1
13771: PPUSH
13772: LD_INT 3
13774: PPUSH
13775: CALL 3755 0 3
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 266
13788: PUSH
13789: LD_INT 2
13791: EQUAL
13792: PUSH
13793: LD_VAR 0 1
13797: PPUSH
13798: CALL_OW 255
13802: PUSH
13803: LD_INT 6
13805: EQUAL
13806: AND
13807: IFFALSE 13858
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
13809: LD_ADDR_VAR 0 5
13813: PUSH
13814: LD_VAR 0 8
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: CALL_OW 313
13827: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
13828: LD_VAR 0 5
13832: PPUSH
13833: CALL_OW 121
// wait ( 0 0$1 ) ;
13837: LD_INT 35
13839: PPUSH
13840: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
13844: LD_VAR 0 5
13848: PPUSH
13849: LD_VAR 0 1
13853: PPUSH
13854: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
13858: LD_VAR 0 1
13862: PPUSH
13863: CALL_OW 266
13867: PUSH
13868: LD_INT 32
13870: EQUAL
13871: PUSH
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 255
13881: PUSH
13882: LD_INT 6
13884: EQUAL
13885: AND
13886: IFFALSE 13938
// begin ComPlaceWeapon ( building , 42 ) ;
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_INT 42
13895: PPUSH
13896: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
13900: LD_VAR 0 7
13904: PUSH
13905: LD_INT 1
13907: ARRAY
13908: PPUSH
13909: CALL_OW 122
// wait ( 0 0$1 ) ;
13913: LD_INT 35
13915: PPUSH
13916: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
13920: LD_VAR 0 7
13924: PUSH
13925: LD_INT 1
13927: ARRAY
13928: PPUSH
13929: LD_VAR 0 1
13933: PPUSH
13934: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 266
13947: PUSH
13948: LD_INT 31
13950: EQUAL
13951: PUSH
13952: LD_VAR 0 1
13956: PPUSH
13957: CALL_OW 255
13961: PUSH
13962: LD_INT 6
13964: EQUAL
13965: AND
13966: IFFALSE 14032
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
13968: LD_VAR 0 7
13972: PUSH
13973: LD_INT 2
13975: ARRAY
13976: PPUSH
13977: CALL_OW 122
// wait ( 0 0$1 ) ;
13981: LD_INT 35
13983: PPUSH
13984: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
13988: LD_VAR 0 7
13992: PUSH
13993: LD_INT 2
13995: ARRAY
13996: PPUSH
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14006: LD_VAR 0 4
14010: PUSH
14011: LD_INT 1
14013: ARRAY
14014: PPUSH
14015: LD_EXP 21
14019: PPUSH
14020: CALL_OW 120
// baseReadyToBuild = 2 ;
14024: LD_ADDR_EXP 20
14028: PUSH
14029: LD_INT 2
14031: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14032: LD_VAR 0 1
14036: PPUSH
14037: CALL_OW 266
14041: PUSH
14042: LD_INT 32
14044: EQUAL
14045: PUSH
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 255
14055: PUSH
14056: LD_INT 1
14058: EQUAL
14059: AND
14060: PUSH
14061: LD_EXP 31
14065: PUSH
14066: LD_INT 0
14068: EQUAL
14069: AND
14070: IFFALSE 14363
// begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and bunkerDialog = 0 then
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 266
14081: PUSH
14082: LD_INT 3
14084: EQUAL
14085: PUSH
14086: LD_VAR 0 1
14090: PPUSH
14091: CALL_OW 255
14095: PUSH
14096: LD_INT 1
14098: EQUAL
14099: AND
14100: PUSH
14101: LD_EXP 31
14105: PUSH
14106: LD_INT 0
14108: EQUAL
14109: AND
14110: IFFALSE 14341
// begin bunkerDialog = 1 ;
14112: LD_ADDR_EXP 31
14116: PUSH
14117: LD_INT 1
14119: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14120: LD_EXP 11
14124: PPUSH
14125: CALL_OW 302
14129: IFFALSE 14145
// begin Say ( Claptopn , D11-Eng1-1 ) ;
14131: LD_EXP 11
14135: PPUSH
14136: LD_STRING D11-Eng1-1
14138: PPUSH
14139: CALL_OW 88
// end else
14143: GO 14341
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14145: LD_INT 22
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 1
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: LD_INT 25
14167: PUSH
14168: LD_INT 3
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 26
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PPUSH
14191: CALL_OW 69
14195: PUSH
14196: LD_EXP 2
14200: PUSH
14201: EMPTY
14202: LIST
14203: PUSH
14204: LD_INT 0
14206: GREATER
14207: DIFF
14208: IFFALSE 14282
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
14210: LD_INT 22
14212: PUSH
14213: LD_INT 1
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 21
14222: PUSH
14223: LD_INT 1
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 25
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 26
14242: PUSH
14243: LD_INT 1
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: PUSH
14261: LD_EXP 2
14265: PUSH
14266: EMPTY
14267: LIST
14268: DIFF
14269: PPUSH
14270: LD_STRING D11-Eng1-1
14272: PPUSH
14273: LD_STRING D11-Eng1-1
14275: PPUSH
14276: CALL 2792 0 3
// end else
14280: GO 14341
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
14282: LD_INT 22
14284: PUSH
14285: LD_INT 1
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 26
14304: PUSH
14305: LD_INT 1
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 69
14321: PUSH
14322: LD_EXP 2
14326: PUSH
14327: EMPTY
14328: LIST
14329: DIFF
14330: PPUSH
14331: LD_STRING D11-Eng1-1
14333: PPUSH
14334: LD_STRING D11-Eng1-1
14336: PPUSH
14337: CALL 2792 0 3
// end ; end ; end ; if energyVDialog = 0 then
14341: LD_EXP 32
14345: PUSH
14346: LD_INT 0
14348: EQUAL
14349: IFFALSE 14355
// EnergyDialog ;
14351: CALL 3104 0 0
// bunkerDialog = 1 ;
14355: LD_ADDR_EXP 31
14359: PUSH
14360: LD_INT 1
14362: ST_TO_ADDR
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 266
14372: PUSH
14373: LD_INT 29
14375: EQUAL
14376: PUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 255
14386: PUSH
14387: LD_INT 1
14389: EQUAL
14390: AND
14391: IFFALSE 14401
// buildOil = 1 ;
14393: LD_ADDR_EXP 33
14397: PUSH
14398: LD_INT 1
14400: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 266
14410: PUSH
14411: LD_INT 26
14413: EQUAL
14414: PUSH
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 255
14424: PUSH
14425: LD_INT 1
14427: EQUAL
14428: AND
14429: IFFALSE 14439
// buildPower = 1 ;
14431: LD_ADDR_EXP 34
14435: PUSH
14436: LD_INT 1
14438: ST_TO_ADDR
// end ;
14439: PPOPN 8
14441: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 266
14451: PUSH
14452: LD_INT 3
14454: EQUAL
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 255
14465: PUSH
14466: LD_INT 1
14468: EQUAL
14469: AND
14470: PUSH
14471: LD_EXP 30
14475: PUSH
14476: LD_INT 0
14478: EQUAL
14479: AND
14480: IFFALSE 14796
// begin factoryDialog = 1 ;
14482: LD_ADDR_EXP 30
14486: PUSH
14487: LD_INT 1
14489: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
14490: LD_INT 22
14492: PUSH
14493: LD_INT 1
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 21
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 30
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 24
14522: PUSH
14523: LD_INT 1000
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: PPUSH
14536: CALL_OW 69
14540: PUSH
14541: LD_INT 1
14543: ARRAY
14544: PPUSH
14545: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
14549: LD_EXP 2
14553: PPUSH
14554: LD_STRING D9a-JMM-1
14556: PPUSH
14557: CALL_OW 88
// if IsOK ( Campell ) then
14561: LD_EXP 12
14565: PPUSH
14566: CALL_OW 302
14570: IFFALSE 14586
// begin Say ( Campell , D9a-Mech1-1 ) ;
14572: LD_EXP 12
14576: PPUSH
14577: LD_STRING D9a-Mech1-1
14579: PPUSH
14580: CALL_OW 88
// end else
14584: GO 14782
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14586: LD_INT 22
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 21
14598: PUSH
14599: LD_INT 1
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 3
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 26
14618: PUSH
14619: LD_INT 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: PPUSH
14632: CALL_OW 69
14636: PUSH
14637: LD_EXP 2
14641: PUSH
14642: EMPTY
14643: LIST
14644: PUSH
14645: LD_INT 0
14647: GREATER
14648: DIFF
14649: IFFALSE 14723
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
14651: LD_INT 22
14653: PUSH
14654: LD_INT 1
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: LD_INT 1
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 25
14673: PUSH
14674: LD_INT 3
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 26
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: PPUSH
14697: CALL_OW 69
14701: PUSH
14702: LD_EXP 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: DIFF
14710: PPUSH
14711: LD_STRING D9a-Mech1-1
14713: PPUSH
14714: LD_STRING D9a-Mech1-1
14716: PPUSH
14717: CALL 2792 0 3
// end else
14721: GO 14782
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
14723: LD_INT 22
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 21
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 26
14745: PUSH
14746: LD_INT 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 69
14762: PUSH
14763: LD_EXP 2
14767: PUSH
14768: EMPTY
14769: LIST
14770: DIFF
14771: PPUSH
14772: LD_STRING D9a-Mech1-1
14774: PPUSH
14775: LD_STRING D9a-Mech1-1
14777: PPUSH
14778: CALL 2792 0 3
// end ; end ; if energyVDialog = 0 then
14782: LD_EXP 32
14786: PUSH
14787: LD_INT 0
14789: EQUAL
14790: IFFALSE 14796
// EnergyDialog ;
14792: CALL 3104 0 0
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 266
14805: PUSH
14806: LD_INT 32
14808: EQUAL
14809: PUSH
14810: LD_VAR 0 1
14814: PPUSH
14815: CALL_OW 255
14819: PUSH
14820: LD_INT 1
14822: EQUAL
14823: AND
14824: PUSH
14825: LD_EXP 31
14829: PUSH
14830: LD_INT 0
14832: EQUAL
14833: AND
14834: IFFALSE 15127
// begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and bunkerDialog = 0 then
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 266
14845: PUSH
14846: LD_INT 3
14848: EQUAL
14849: PUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 255
14859: PUSH
14860: LD_INT 1
14862: EQUAL
14863: AND
14864: PUSH
14865: LD_EXP 31
14869: PUSH
14870: LD_INT 0
14872: EQUAL
14873: AND
14874: IFFALSE 15105
// begin bunkerDialog = 1 ;
14876: LD_ADDR_EXP 31
14880: PUSH
14881: LD_INT 1
14883: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14884: LD_EXP 11
14888: PPUSH
14889: CALL_OW 302
14893: IFFALSE 14909
// begin Say ( Claptopn , D11-Eng1-1 ) ;
14895: LD_EXP 11
14899: PPUSH
14900: LD_STRING D11-Eng1-1
14902: PPUSH
14903: CALL_OW 88
// end else
14907: GO 15105
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14909: LD_INT 22
14911: PUSH
14912: LD_INT 1
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 21
14921: PUSH
14922: LD_INT 1
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 25
14931: PUSH
14932: LD_INT 3
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: LD_INT 26
14941: PUSH
14942: LD_INT 1
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: PUSH
14960: LD_EXP 2
14964: PUSH
14965: EMPTY
14966: LIST
14967: PUSH
14968: LD_INT 0
14970: GREATER
14971: DIFF
14972: IFFALSE 15046
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
14974: LD_INT 22
14976: PUSH
14977: LD_INT 1
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 21
14986: PUSH
14987: LD_INT 1
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 25
14996: PUSH
14997: LD_INT 2
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 26
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: PUSH
15025: LD_EXP 2
15029: PUSH
15030: EMPTY
15031: LIST
15032: DIFF
15033: PPUSH
15034: LD_STRING D11-Eng1-1
15036: PPUSH
15037: LD_STRING D11-Eng1-1
15039: PPUSH
15040: CALL 2792 0 3
// end else
15044: GO 15105
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15046: LD_INT 22
15048: PUSH
15049: LD_INT 1
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 21
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 26
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: LIST
15080: PPUSH
15081: CALL_OW 69
15085: PUSH
15086: LD_EXP 2
15090: PUSH
15091: EMPTY
15092: LIST
15093: DIFF
15094: PPUSH
15095: LD_STRING D11-Eng1-1
15097: PPUSH
15098: LD_STRING D11-Eng1-1
15100: PPUSH
15101: CALL 2792 0 3
// end ; end ; end ; if energyVDialog = 0 then
15105: LD_EXP 32
15109: PUSH
15110: LD_INT 0
15112: EQUAL
15113: IFFALSE 15119
// EnergyDialog ;
15115: CALL 3104 0 0
// bunkerDialog = 1 ;
15119: LD_ADDR_EXP 31
15123: PUSH
15124: LD_INT 1
15126: ST_TO_ADDR
// end ; end ;
15127: PPOPN 1
15129: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 247
15139: PUSH
15140: LD_INT 1
15142: EQUAL
15143: PUSH
15144: LD_VAR 0 1
15148: PPUSH
15149: CALL_OW 255
15153: PUSH
15154: LD_INT 1
15156: EQUAL
15157: AND
15158: IFFALSE 15174
// lostCounter = lostCounter + 1 ;
15160: LD_ADDR_EXP 37
15164: PUSH
15165: LD_EXP 37
15169: PUSH
15170: LD_INT 1
15172: PLUS
15173: ST_TO_ADDR
// end ;
15174: PPOPN 1
15176: END
// on Contact ( side1 , side2 ) do var i ;
15177: LD_INT 0
15179: PPUSH
// begin if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
15180: LD_VAR 0 1
15184: PUSH
15185: LD_INT 1
15187: EQUAL
15188: PUSH
15189: LD_VAR 0 2
15193: PUSH
15194: LD_INT 6
15196: EQUAL
15197: AND
15198: PUSH
15199: LD_EXP 39
15203: PUSH
15204: LD_INT 1
15206: EQUAL
15207: AND
15208: IFFALSE 15263
// begin donaldsonCoopAttack = 0 ;
15210: LD_ADDR_EXP 39
15214: PUSH
15215: LD_INT 0
15217: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
15218: LD_ADDR_VAR 0 3
15222: PUSH
15223: LD_INT 22
15225: PUSH
15226: LD_INT 4
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: PPUSH
15236: CALL_OW 69
15240: PUSH
15241: FOR_IN
15242: IFFALSE 15261
// ComAgressiveMove ( i , 52 , 64 ) ;
15244: LD_VAR 0 3
15248: PPUSH
15249: LD_INT 52
15251: PPUSH
15252: LD_INT 64
15254: PPUSH
15255: CALL_OW 114
15259: GO 15241
15261: POP
15262: POP
// end ; end ; end_of_file
15263: PPOPN 3
15265: END
// every 10 10$0 do
15266: GO 15268
15268: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
15269: LD_INT 5
15271: PPUSH
15272: LD_INT 3
15274: PPUSH
15275: LD_INT 2
15277: PPUSH
15278: LD_INT 5
15280: PPUSH
15281: CALL_OW 12
15285: PUSH
15286: LD_INT 2
15288: PUSH
15289: LD_INT 3
15291: PUSH
15292: LD_INT 3
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PUSH
15300: LD_OWVAR 67
15304: ARRAY
15305: PLUS
15306: PPUSH
15307: LD_INT 0
15309: PPUSH
15310: LD_INT 0
15312: PPUSH
15313: LD_INT 0
15315: PPUSH
15316: LD_INT 1
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 3
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: PUSH
15330: LD_OWVAR 67
15334: ARRAY
15335: PPUSH
15336: LD_EXP 18
15340: PPUSH
15341: LD_EXP 19
15345: PPUSH
15346: CALL_OW 12
15350: PPUSH
15351: LD_INT 4
15353: PPUSH
15354: LD_INT 14
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: LD_INT 2
15362: PPUSH
15363: CALL 4798 0 12
// end ;
15367: END
// every 15 15$0 do
15368: GO 15370
15370: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
15371: LD_INT 5
15373: PPUSH
15374: LD_INT 3
15376: PPUSH
15377: LD_INT 3
15379: PPUSH
15380: LD_INT 5
15382: PPUSH
15383: CALL_OW 12
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: PUSH
15402: LD_OWVAR 67
15406: ARRAY
15407: PLUS
15408: PPUSH
15409: LD_INT 0
15411: PPUSH
15412: LD_INT 0
15414: PPUSH
15415: LD_INT 0
15417: PPUSH
15418: LD_INT 2
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: LD_INT 3
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: PUSH
15432: LD_OWVAR 67
15436: ARRAY
15437: PPUSH
15438: LD_EXP 18
15442: PPUSH
15443: LD_EXP 19
15447: PPUSH
15448: CALL_OW 12
15452: PPUSH
15453: LD_INT 4
15455: PPUSH
15456: LD_INT 14
15458: PPUSH
15459: LD_INT 1
15461: PPUSH
15462: LD_INT 1
15464: PPUSH
15465: CALL 4798 0 12
// end ;
15469: END
// every 25 25$0 do
15470: GO 15472
15472: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
15473: LD_INT 5
15475: PPUSH
15476: LD_INT 3
15478: PPUSH
15479: LD_INT 2
15481: PPUSH
15482: LD_INT 5
15484: PPUSH
15485: CALL_OW 12
15489: PUSH
15490: LD_INT 2
15492: PUSH
15493: LD_INT 3
15495: PUSH
15496: LD_INT 3
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: PUSH
15504: LD_OWVAR 67
15508: ARRAY
15509: PLUS
15510: PPUSH
15511: LD_INT 0
15513: PPUSH
15514: LD_INT 0
15516: PPUSH
15517: LD_INT 0
15519: PPUSH
15520: LD_INT 1
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: LD_INT 3
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: PUSH
15534: LD_OWVAR 67
15538: ARRAY
15539: PPUSH
15540: LD_EXP 18
15544: PPUSH
15545: LD_EXP 19
15549: PPUSH
15550: CALL_OW 12
15554: PPUSH
15555: LD_INT 4
15557: PPUSH
15558: LD_INT 14
15560: PPUSH
15561: LD_INT 1
15563: PPUSH
15564: LD_INT 1
15566: PPUSH
15567: CALL 4798 0 12
// end ;
15571: END
// every 26 26$0 do
15572: GO 15574
15574: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
15575: LD_INT 5
15577: PPUSH
15578: LD_INT 3
15580: PPUSH
15581: LD_INT 3
15583: PPUSH
15584: LD_INT 5
15586: PPUSH
15587: CALL_OW 12
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: LD_INT 3
15597: PUSH
15598: LD_INT 3
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: LD_OWVAR 67
15610: ARRAY
15611: PLUS
15612: PPUSH
15613: LD_INT 0
15615: PPUSH
15616: LD_INT 0
15618: PPUSH
15619: LD_INT 0
15621: PPUSH
15622: LD_INT 2
15624: PUSH
15625: LD_INT 2
15627: PUSH
15628: LD_INT 3
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: PUSH
15636: LD_OWVAR 67
15640: ARRAY
15641: PPUSH
15642: LD_EXP 18
15646: PPUSH
15647: LD_EXP 19
15651: PPUSH
15652: CALL_OW 12
15656: PPUSH
15657: LD_INT 4
15659: PPUSH
15660: LD_INT 14
15662: PPUSH
15663: LD_INT 1
15665: PPUSH
15666: LD_INT 2
15668: PPUSH
15669: CALL 4798 0 12
// end ;
15673: END
// every 25 25$0 do
15674: GO 15676
15676: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ 42 , 43 , 44 ] , [ ] , [ ] , RussianAttackRepair , 1 ) ;
15677: LD_INT 4
15679: PPUSH
15680: LD_INT 5
15682: PPUSH
15683: LD_INT 3
15685: PUSH
15686: LD_INT 4
15688: PUSH
15689: LD_INT 5
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: PUSH
15697: LD_OWVAR 67
15701: ARRAY
15702: PPUSH
15703: LD_EXP 18
15707: PPUSH
15708: LD_EXP 19
15712: PPUSH
15713: CALL_OW 12
15717: PPUSH
15718: LD_INT 3
15720: PPUSH
15721: LD_INT 1
15723: PPUSH
15724: LD_INT 1
15726: PPUSH
15727: LD_INT 42
15729: PUSH
15730: LD_INT 43
15732: PUSH
15733: LD_INT 44
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: PPUSH
15741: EMPTY
15742: PPUSH
15743: EMPTY
15744: PPUSH
15745: LD_INT 17
15747: PPUSH
15748: LD_INT 1
15750: PPUSH
15751: CALL 6947 0 12
// end ; end_of_file
15755: END
// every 0 0$1 trigger startTimer = 1 do
15756: LD_EXP 29
15760: PUSH
15761: LD_INT 1
15763: EQUAL
15764: IFFALSE 15893
15766: GO 15768
15768: DISABLE
// begin enable ;
15769: ENABLE
// if timerStatus = 1 then
15770: LD_EXP 28
15774: PUSH
15775: LD_INT 1
15777: EQUAL
15778: IFFALSE 15811
// begin timeToSupport = timeToSupport - 0 0$01 ;
15780: LD_ADDR_EXP 27
15784: PUSH
15785: LD_EXP 27
15789: PUSH
15790: LD_INT 35
15792: MINUS
15793: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
15794: LD_ADDR_OWVAR 47
15798: PUSH
15799: LD_STRING #Am04-1
15801: PUSH
15802: LD_EXP 27
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: ST_TO_ADDR
// end ; if timerStatus = 2 then
15811: LD_EXP 28
15815: PUSH
15816: LD_INT 2
15818: EQUAL
15819: IFFALSE 15852
// begin timeToSupport = timeToSupport - 0 0$01 ;
15821: LD_ADDR_EXP 27
15825: PUSH
15826: LD_EXP 27
15830: PUSH
15831: LD_INT 35
15833: MINUS
15834: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
15835: LD_ADDR_OWVAR 47
15839: PUSH
15840: LD_STRING #Am04-2
15842: PUSH
15843: LD_EXP 27
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: ST_TO_ADDR
// end ; if timerStatus = 3 then
15852: LD_EXP 28
15856: PUSH
15857: LD_INT 3
15859: EQUAL
15860: IFFALSE 15893
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
15862: LD_ADDR_EXP 26
15866: PUSH
15867: LD_EXP 26
15871: PUSH
15872: LD_INT 35
15874: MINUS
15875: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToDestroyRuBase ] ;
15876: LD_ADDR_OWVAR 47
15880: PUSH
15881: LD_STRING #Am04-2
15883: PUSH
15884: LD_EXP 26
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: ST_TO_ADDR
// end ; end ; end_of_file
15893: END
// every 0 0$1 trigger IsDead ( JMM ) do
15894: LD_EXP 2
15898: PPUSH
15899: CALL_OW 301
15903: IFFALSE 15915
15905: GO 15907
15907: DISABLE
// YouLost ( JMM ) ;
15908: LD_STRING JMM
15910: PPUSH
15911: CALL_OW 104
15915: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
15916: LD_INT 4
15918: PPUSH
15919: CALL_OW 301
15923: IFFALSE 15935
15925: GO 15927
15927: DISABLE
// YouLost ( Base ) ; end_of_file
15928: LD_STRING Base
15930: PPUSH
15931: CALL_OW 104
15935: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
15936: LD_EXP 17
15940: PPUSH
15941: CALL_OW 301
15945: IFFALSE 16226
15947: GO 15949
15949: DISABLE
15950: LD_INT 0
15952: PPUSH
// begin AIEnable = 0 ;
15953: LD_ADDR_EXP 36
15957: PUSH
15958: LD_INT 0
15960: ST_TO_ADDR
// InGameOn ;
15961: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
15965: LD_INT 3
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: LD_INT 1
15973: PPUSH
15974: LD_INT 0
15976: PPUSH
15977: CALL_OW 80
// SetAttitude ( 1 , 6 , att_friend , true ) ;
15981: LD_INT 1
15983: PPUSH
15984: LD_INT 6
15986: PPUSH
15987: LD_INT 1
15989: PPUSH
15990: LD_INT 1
15992: PPUSH
15993: CALL_OW 80
// SetAttitude ( 1 , 5 , att_friend , true ) ;
15997: LD_INT 1
15999: PPUSH
16000: LD_INT 5
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: LD_INT 1
16008: PPUSH
16009: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
16013: LD_INT 3
16015: PPUSH
16016: LD_INT 1
16018: PPUSH
16019: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
16023: LD_INT 97
16025: PPUSH
16026: LD_INT 91
16028: PPUSH
16029: CALL_OW 84
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: LD_INT 22
16040: PUSH
16041: LD_INT 3
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 21
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: PUSH
16067: FOR_IN
16068: IFFALSE 16119
// begin ComExitBuilding ( i ) ;
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 122
// wait ( 0 0$1 ) ;
16079: LD_INT 35
16081: PPUSH
16082: CALL_OW 67
// ComExitVehicle ( i ) ;
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 121
// wait ( 0 0$1 ) ;
16095: LD_INT 35
16097: PPUSH
16098: CALL_OW 67
// ComMoveXY ( i , 124 , 98 ) ;
16102: LD_VAR 0 1
16106: PPUSH
16107: LD_INT 124
16109: PPUSH
16110: LD_INT 98
16112: PPUSH
16113: CALL_OW 111
// end ;
16117: GO 16067
16119: POP
16120: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
16121: LD_ADDR_VAR 0 1
16125: PUSH
16126: LD_INT 22
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 21
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PPUSH
16150: CALL_OW 69
16154: PUSH
16155: FOR_IN
16156: IFFALSE 16207
// begin ComExitBuilding ( i ) ;
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 122
// wait ( 0 0$1 ) ;
16167: LD_INT 35
16169: PPUSH
16170: CALL_OW 67
// ComExitVehicle ( i ) ;
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 121
// wait ( 0 0$1 ) ;
16183: LD_INT 35
16185: PPUSH
16186: CALL_OW 67
// ComAgressiveMove ( i , 124 , 98 ) ;
16190: LD_VAR 0 1
16194: PPUSH
16195: LD_INT 124
16197: PPUSH
16198: LD_INT 98
16200: PPUSH
16201: CALL_OW 114
// end ;
16205: GO 16155
16207: POP
16208: POP
// wait ( 0 0$3 ) ;
16209: LD_INT 105
16211: PPUSH
16212: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
16216: LD_INT 124
16218: PPUSH
16219: LD_INT 98
16221: PPUSH
16222: CALL_OW 84
// end ;
16226: PPOPN 1
16228: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
16229: LD_INT 22
16231: PUSH
16232: LD_INT 3
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 21
16241: PUSH
16242: LD_INT 1
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 24
16251: PUSH
16252: LD_INT 250
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: PPUSH
16264: CALL_OW 69
16268: PUSH
16269: LD_INT 0
16271: EQUAL
16272: IFFALSE 16281
16274: GO 16276
16276: DISABLE
// FinishMission ;
16277: CALL 3328 0 0
16281: END
// every 0 0$1 do var i ;
16282: GO 16284
16284: DISABLE
16285: LD_INT 0
16287: PPUSH
// begin enable ;
16288: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ f_side , 3 ] ) do
16289: LD_ADDR_VAR 0 1
16293: PUSH
16294: LD_INT 5
16296: PPUSH
16297: LD_INT 22
16299: PUSH
16300: LD_INT 3
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PPUSH
16307: CALL_OW 70
16311: PUSH
16312: FOR_IN
16313: IFFALSE 16326
// RemoveUnit ( i ) ;
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 64
16324: GO 16312
16326: POP
16327: POP
// end ; end_of_file
16328: PPOPN 1
16330: END
// every 2 2$0 + 0 0$15 do
16331: GO 16333
16333: DISABLE
// begin if supply <= 13 and supply > 7 then
16334: LD_EXP 35
16338: PUSH
16339: LD_INT 13
16341: LESSEQUAL
16342: PUSH
16343: LD_EXP 35
16347: PUSH
16348: LD_INT 7
16350: GREATER
16351: AND
16352: IFFALSE 16375
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
16354: LD_INT 3
16356: PPUSH
16357: LD_INT 5
16359: PPUSH
16360: CALL_OW 12
16364: PPUSH
16365: LD_INT 18
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 55
// if supply <= 7 and supply > 4 then
16375: LD_EXP 35
16379: PUSH
16380: LD_INT 7
16382: LESSEQUAL
16383: PUSH
16384: LD_EXP 35
16388: PUSH
16389: LD_INT 4
16391: GREATER
16392: AND
16393: IFFALSE 16416
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
16395: LD_INT 3
16397: PPUSH
16398: LD_INT 5
16400: PPUSH
16401: CALL_OW 12
16405: PPUSH
16406: LD_INT 19
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: CALL_OW 55
// if supply <= 4 and supply > 0 then
16416: LD_EXP 35
16420: PUSH
16421: LD_INT 4
16423: LESSEQUAL
16424: PUSH
16425: LD_EXP 35
16429: PUSH
16430: LD_INT 0
16432: GREATER
16433: AND
16434: IFFALSE 16457
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
16436: LD_INT 3
16438: PPUSH
16439: LD_INT 5
16441: PPUSH
16442: CALL_OW 12
16446: PPUSH
16447: LD_INT 20
16449: PPUSH
16450: LD_INT 1
16452: PPUSH
16453: CALL_OW 55
// if supply > 0 then
16457: LD_EXP 35
16461: PUSH
16462: LD_INT 0
16464: GREATER
16465: IFFALSE 16482
// begin supply = supply - 1 ;
16467: LD_ADDR_EXP 35
16471: PUSH
16472: LD_EXP 35
16476: PUSH
16477: LD_INT 1
16479: MINUS
16480: ST_TO_ADDR
// enable ;
16481: ENABLE
// end ; end ;
16482: END
