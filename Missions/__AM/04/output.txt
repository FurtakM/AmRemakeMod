// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4422 0 0
// PrepareRussianBase ;
 241: CALL 2721 0 0
// PrepareRussianCommander ;
 245: CALL 2672 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3957 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3957 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3957 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3957 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3957 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3957 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3957 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3957 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3957 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3957 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3957 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3957 0 2
 767: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 768: LD_STRING 03_Frank
 770: PPUSH
 771: CALL_OW 28
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 823
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING 03_Frank
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 3957 0 2
 796: ST_TO_ADDR
// if Frank = 0 then
 797: LD_EXP 5
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: IFFALSE 823
// Frank = PrepareUnit ( Frank , false ) ;
 807: LD_ADDR_EXP 5
 811: PUSH
 812: LD_STRING Frank
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL 3957 0 2
 822: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 32
 830: PPUSH
 831: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 835: LD_EXP 7
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 850: LD_EXP 7
 854: PPUSH
 855: LD_INT 32
 857: PPUSH
 858: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 862: LD_EXP 8
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 877: LD_EXP 9
 881: PPUSH
 882: LD_INT 2
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 892: LD_EXP 12
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 907: LD_EXP 10
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 922: LD_EXP 11
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 937: LD_EXP 4
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// if Lisa = false then
 952: LD_EXP 4
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 977
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 962: LD_EXP 2
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 49
// if Lisa = false and Bobby = false then
 977: LD_EXP 4
 981: PUSH
 982: LD_INT 0
 984: EQUAL
 985: PUSH
 986: LD_EXP 2
 990: PUSH
 991: LD_INT 0
 993: EQUAL
 994: AND
 995: IFFALSE 1012
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 997: LD_EXP 3
1001: PPUSH
1002: LD_INT 2
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 0
1019: EQUAL
1020: PUSH
1021: LD_EXP 2
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: PUSH
1031: LD_EXP 3
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1057
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
1066: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1067: LD_EXP 13
1071: PPUSH
1072: LD_INT 10
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// if Frank then
1082: LD_EXP 5
1086: IFFALSE 1103
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1088: LD_EXP 5
1092: PPUSH
1093: LD_INT 10
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// uc_nation = 1 ;
1103: LD_ADDR_OWVAR 21
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// uc_side = 4 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 4
1118: ST_TO_ADDR
// hc_class := 3 ;
1119: LD_ADDR_OWVAR 28
1123: PUSH
1124: LD_INT 3
1126: ST_TO_ADDR
// hc_sex := sex_male ;
1127: LD_ADDR_OWVAR 27
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1135: LD_ADDR_OWVAR 33
1139: PUSH
1140: LD_STRING SecondCharsGal
1142: ST_TO_ADDR
// hc_face_number := 53 ;
1143: LD_ADDR_OWVAR 34
1147: PUSH
1148: LD_INT 53
1150: ST_TO_ADDR
// hc_name := Freddie Warner ;
1151: LD_ADDR_OWVAR 26
1155: PUSH
1156: LD_STRING Freddie Warner
1158: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1159: LD_ADDR_OWVAR 29
1163: PUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 11
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1174: LD_ADDR_OWVAR 30
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 0
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1197: LD_ADDR_OWVAR 31
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: LD_INT 0
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: ST_TO_ADDR
// un = CreateHuman ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: CALL_OW 44
1229: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1230: LD_VAR 0 3
1234: PPUSH
1235: LD_INT 10
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// hc_class := 1 ;
1245: LD_ADDR_OWVAR 28
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1261: LD_ADDR_OWVAR 33
1265: PUSH
1266: LD_STRING SecondCharsGal
1268: ST_TO_ADDR
// hc_face_number := 56 ;
1269: LD_ADDR_OWVAR 34
1273: PUSH
1274: LD_INT 56
1276: ST_TO_ADDR
// hc_name := Mel Brennan ;
1277: LD_ADDR_OWVAR 26
1281: PUSH
1282: LD_STRING Mel Brennan
1284: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1285: LD_ADDR_OWVAR 29
1289: PUSH
1290: LD_INT 12
1292: PUSH
1293: LD_INT 11
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1300: LD_ADDR_OWVAR 30
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: LD_INT 0
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1323: LD_ADDR_OWVAR 31
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 0
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: ST_TO_ADDR
// un = CreateHuman ;
1346: LD_ADDR_VAR 0 3
1350: PUSH
1351: CALL_OW 44
1355: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1356: LD_VAR 0 3
1360: PPUSH
1361: LD_INT 10
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 49
// hc_class := 1 ;
1371: LD_ADDR_OWVAR 28
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// hc_sex := sex_male ;
1379: LD_ADDR_OWVAR 27
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1387: LD_ADDR_OWVAR 33
1391: PUSH
1392: LD_STRING AmGalRemake
1394: ST_TO_ADDR
// hc_face_number := 5 ;
1395: LD_ADDR_OWVAR 34
1399: PUSH
1400: LD_INT 5
1402: ST_TO_ADDR
// hc_name := Bob Joplin ;
1403: LD_ADDR_OWVAR 26
1407: PUSH
1408: LD_STRING Bob Joplin
1410: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1411: LD_ADDR_OWVAR 29
1415: PUSH
1416: LD_INT 10
1418: PUSH
1419: LD_INT 11
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1426: LD_ADDR_OWVAR 30
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 0
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1449: LD_ADDR_OWVAR 31
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// un = CreateHuman ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: CALL_OW 44
1481: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1482: LD_VAR 0 3
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
// hc_class := 3 ;
1497: LD_ADDR_OWVAR 28
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// hc_sex := sex_female ;
1505: LD_ADDR_OWVAR 27
1509: PUSH
1510: LD_INT 2
1512: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1513: LD_ADDR_OWVAR 33
1517: PUSH
1518: LD_STRING AmGalRemake
1520: ST_TO_ADDR
// hc_face_number := 8 ;
1521: LD_ADDR_OWVAR 34
1525: PUSH
1526: LD_INT 8
1528: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1529: LD_ADDR_OWVAR 26
1533: PUSH
1534: LD_STRING Elizabeth Whitney
1536: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1537: LD_ADDR_OWVAR 29
1541: PUSH
1542: LD_INT 9
1544: PUSH
1545: LD_INT 11
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1552: LD_ADDR_OWVAR 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1575: LD_ADDR_OWVAR 31
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: LD_INT 2
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: ST_TO_ADDR
// un = CreateHuman ;
1598: LD_ADDR_VAR 0 3
1602: PUSH
1603: CALL_OW 44
1607: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1608: LD_VAR 0 3
1612: PPUSH
1613: LD_INT 10
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// InitHc ;
1623: CALL_OW 19
// end ;
1627: LD_VAR 0 1
1631: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
1636: PPUSH
1637: PPUSH
// uc_nation = 1 ;
1638: LD_ADDR_OWVAR 21
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// uc_side = 1 ;
1646: LD_ADDR_OWVAR 20
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1654: LD_ADDR_OWVAR 37
1658: PUSH
1659: LD_INT 2
1661: ST_TO_ADDR
// vc_engine := engine_combustion ;
1662: LD_ADDR_OWVAR 39
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// vc_control := control_manual ;
1670: LD_ADDR_OWVAR 38
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1678: LD_ADDR_OWVAR 41
1682: PUSH
1683: LD_INT 65
1685: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1686: LD_ADDR_OWVAR 40
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 3
1696: PUSH
1697: LD_INT 4
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_OWVAR 67
1709: ARRAY
1710: ST_TO_ADDR
// veh := CreateVehicle ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: CALL_OW 45
1720: ST_TO_ADDR
// if HexInfo ( 17 , 4 ) = 0 then
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 4
1726: PPUSH
1727: CALL_OW 428
1731: PUSH
1732: LD_INT 0
1734: EQUAL
1735: IFFALSE 1757
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1737: LD_VAR 0 5
1741: PPUSH
1742: LD_INT 17
1744: PPUSH
1745: LD_INT 4
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 48
1755: GO 1775
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1757: LD_VAR 0 5
1761: PPUSH
1762: LD_INT 23
1764: PPUSH
1765: LD_INT 10
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL_OW 48
// SetDir ( veh , 2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: LD_INT 2
1782: PPUSH
1783: CALL_OW 233
// hc_class := 1 ;
1787: LD_ADDR_OWVAR 28
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// hc_sex := sex_male ;
1795: LD_ADDR_OWVAR 27
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1803: LD_ADDR_OWVAR 33
1807: PUSH
1808: LD_STRING SecondCharsGal
1810: ST_TO_ADDR
// hc_face_number := 59 ;
1811: LD_ADDR_OWVAR 34
1815: PUSH
1816: LD_INT 59
1818: ST_TO_ADDR
// hc_name := Max Gray ;
1819: LD_ADDR_OWVAR 26
1823: PUSH
1824: LD_STRING Max Gray
1826: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1827: LD_ADDR_OWVAR 29
1831: PUSH
1832: LD_INT 9
1834: PUSH
1835: LD_INT 11
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1842: LD_ADDR_OWVAR 30
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1865: LD_ADDR_OWVAR 31
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: ST_TO_ADDR
// un = CreateHuman ;
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: CALL_OW 44
1897: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: LD_INT 11
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL_OW 49
// hc_class := 1 ;
1913: LD_ADDR_OWVAR 28
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// hc_sex := sex_male ;
1921: LD_ADDR_OWVAR 27
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1929: LD_ADDR_OWVAR 33
1933: PUSH
1934: LD_STRING SecondCharsGal
1936: ST_TO_ADDR
// hc_face_number := 54 ;
1937: LD_ADDR_OWVAR 34
1941: PUSH
1942: LD_INT 54
1944: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1945: LD_ADDR_OWVAR 26
1949: PUSH
1950: LD_STRING Luigi Ghbellin
1952: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1953: LD_ADDR_OWVAR 29
1957: PUSH
1958: LD_INT 11
1960: PUSH
1961: LD_INT 11
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1968: LD_ADDR_OWVAR 30
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1991: LD_ADDR_OWVAR 31
1995: PUSH
1996: LD_INT 1
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: ST_TO_ADDR
// un = CreateHuman ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 44
2023: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 11
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 49
// hc_class := 3 ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// hc_sex := sex_male ;
2047: LD_ADDR_OWVAR 27
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2055: LD_ADDR_OWVAR 33
2059: PUSH
2060: LD_STRING AmGalRemake
2062: ST_TO_ADDR
// hc_face_number := 6 ;
2063: LD_ADDR_OWVAR 34
2067: PUSH
2068: LD_INT 6
2070: ST_TO_ADDR
// hc_name := Leon Carter ;
2071: LD_ADDR_OWVAR 26
2075: PUSH
2076: LD_STRING Leon Carter
2078: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2079: LD_ADDR_OWVAR 29
2083: PUSH
2084: LD_INT 10
2086: PUSH
2087: LD_INT 9
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
2094: LD_ADDR_OWVAR 30
2098: PUSH
2099: LD_INT 0
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
2117: LD_ADDR_OWVAR 31
2121: PUSH
2122: LD_INT 0
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: ST_TO_ADDR
// un = CreateHuman ;
2140: LD_ADDR_VAR 0 4
2144: PUSH
2145: CALL_OW 44
2149: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2150: LD_VAR 0 4
2154: PPUSH
2155: LD_VAR 0 5
2159: PPUSH
2160: CALL_OW 52
// if count = 4 then
2164: LD_VAR 0 1
2168: PUSH
2169: LD_INT 4
2171: EQUAL
2172: IFFALSE 2300
// begin hc_class := 1 ;
2174: LD_ADDR_OWVAR 28
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// hc_sex := sex_male ;
2182: LD_ADDR_OWVAR 27
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2190: LD_ADDR_OWVAR 33
2194: PUSH
2195: LD_STRING SecondCharsGal
2197: ST_TO_ADDR
// hc_face_number := 34 ;
2198: LD_ADDR_OWVAR 34
2202: PUSH
2203: LD_INT 34
2205: ST_TO_ADDR
// hc_name := Ian Hill ;
2206: LD_ADDR_OWVAR 26
2210: PUSH
2211: LD_STRING Ian Hill
2213: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2214: LD_ADDR_OWVAR 29
2218: PUSH
2219: LD_INT 10
2221: PUSH
2222: LD_INT 12
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2229: LD_ADDR_OWVAR 30
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: LD_INT 0
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2252: LD_ADDR_OWVAR 31
2256: PUSH
2257: LD_INT 2
2259: PUSH
2260: LD_INT 0
2262: PUSH
2263: LD_INT 1
2265: PUSH
2266: LD_INT 0
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: ST_TO_ADDR
// un = CreateHuman ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: CALL_OW 44
2284: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2285: LD_VAR 0 4
2289: PPUSH
2290: LD_INT 11
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL_OW 49
// end ; if count = 5 then
2300: LD_VAR 0 1
2304: PUSH
2305: LD_INT 5
2307: EQUAL
2308: IFFALSE 2562
// begin hc_class := 1 ;
2310: LD_ADDR_OWVAR 28
2314: PUSH
2315: LD_INT 1
2317: ST_TO_ADDR
// hc_sex := sex_male ;
2318: LD_ADDR_OWVAR 27
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2326: LD_ADDR_OWVAR 33
2330: PUSH
2331: LD_STRING SecondCharsGal
2333: ST_TO_ADDR
// hc_face_number := 34 ;
2334: LD_ADDR_OWVAR 34
2338: PUSH
2339: LD_INT 34
2341: ST_TO_ADDR
// hc_name := Ian Hill ;
2342: LD_ADDR_OWVAR 26
2346: PUSH
2347: LD_STRING Ian Hill
2349: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2350: LD_ADDR_OWVAR 29
2354: PUSH
2355: LD_INT 10
2357: PUSH
2358: LD_INT 12
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2365: LD_ADDR_OWVAR 30
2369: PUSH
2370: LD_INT 0
2372: PUSH
2373: LD_INT 0
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 0
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2388: LD_ADDR_OWVAR 31
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: LD_INT 0
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: LD_INT 0
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: ST_TO_ADDR
// un = CreateHuman ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: LD_INT 11
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: CALL_OW 49
// hc_class := 1 ;
2436: LD_ADDR_OWVAR 28
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// hc_sex := sex_female ;
2444: LD_ADDR_OWVAR 27
2448: PUSH
2449: LD_INT 2
2451: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2452: LD_ADDR_OWVAR 33
2456: PUSH
2457: LD_STRING SecondCharsGal
2459: ST_TO_ADDR
// hc_face_number := 41 ;
2460: LD_ADDR_OWVAR 34
2464: PUSH
2465: LD_INT 41
2467: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2468: LD_ADDR_OWVAR 26
2472: PUSH
2473: LD_STRING Kate Wadsworth
2475: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2476: LD_ADDR_OWVAR 29
2480: PUSH
2481: LD_INT 9
2483: PUSH
2484: LD_INT 9
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2491: LD_ADDR_OWVAR 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: LD_INT 2
2501: PUSH
2502: LD_INT 0
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2514: LD_ADDR_OWVAR 31
2518: PUSH
2519: LD_INT 2
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: ST_TO_ADDR
// un = CreateHuman ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: CALL_OW 44
2546: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2547: LD_VAR 0 4
2551: PPUSH
2552: LD_INT 11
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2562: LD_INT 11
2564: PPUSH
2565: LD_INT 22
2567: PUSH
2568: LD_INT 1
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 21
2577: PUSH
2578: LD_INT 1
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 26
2587: PUSH
2588: LD_INT 1
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 70
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: PPUSH
2609: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2613: LD_INT 11
2615: PPUSH
2616: LD_INT 22
2618: PUSH
2619: LD_INT 1
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 21
2628: PUSH
2629: LD_INT 1
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 26
2638: PUSH
2639: LD_INT 1
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 70
2655: PUSH
2656: LD_INT 1
2658: ARRAY
2659: PPUSH
2660: LD_STRING D6-Sol3-1
2662: PPUSH
2663: CALL_OW 88
// end ; end_of_file
2667: LD_VAR 0 2
2671: RET
// export function PrepareRussianCommander ; begin
2672: LD_INT 0
2674: PPUSH
// uc_side = 3 ;
2675: LD_ADDR_OWVAR 20
2679: PUSH
2680: LD_INT 3
2682: ST_TO_ADDR
// uc_nation = 3 ;
2683: LD_ADDR_OWVAR 21
2687: PUSH
2688: LD_INT 3
2690: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2691: LD_ADDR_EXP 15
2695: PUSH
2696: LD_STRING Stolypin
2698: PPUSH
2699: CALL_OW 25
2703: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2704: LD_EXP 15
2708: PPUSH
2709: LD_INT 21
2711: PPUSH
2712: CALL_OW 52
// end ;
2716: LD_VAR 0 1
2720: RET
// export function PrepareRussianBase ; var i ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2725: LD_INT 3
2727: PPUSH
2728: LD_INT 3
2730: PPUSH
2731: LD_INT 22
2733: PPUSH
2734: LD_EXP 16
2738: PPUSH
2739: LD_EXP 17
2743: PPUSH
2744: CALL_OW 12
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 2
2754: PPUSH
2755: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2759: LD_INT 3
2761: PPUSH
2762: LD_INT 3
2764: PPUSH
2765: LD_INT 21
2767: PPUSH
2768: LD_EXP 16
2772: PPUSH
2773: LD_EXP 17
2777: PPUSH
2778: CALL_OW 12
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: LD_INT 3
2788: PPUSH
2789: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2793: LD_INT 3
2795: PPUSH
2796: LD_INT 3
2798: PPUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_EXP 16
2806: PPUSH
2807: LD_EXP 17
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: LD_INT 4
2819: PPUSH
2820: LD_INT 2
2822: PPUSH
2823: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 3
2832: PPUSH
2833: LD_INT 24
2835: PPUSH
2836: LD_EXP 16
2840: PPUSH
2841: LD_EXP 17
2845: PPUSH
2846: CALL_OW 12
2850: PPUSH
2851: LD_INT 3
2853: PPUSH
2854: LD_INT 6
2856: PPUSH
2857: CALL 4020 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2861: LD_ADDR_VAR 0 2
2865: PUSH
2866: LD_INT 22
2868: PUSH
2869: LD_INT 3
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: LD_INT 30
2878: PUSH
2879: LD_INT 32
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PPUSH
2890: CALL_OW 69
2894: PUSH
2895: FOR_IN
2896: IFFALSE 2936
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2898: LD_INT 3
2900: PPUSH
2901: LD_INT 3
2903: PPUSH
2904: LD_VAR 0 2
2908: PPUSH
2909: LD_EXP 16
2913: PPUSH
2914: LD_EXP 17
2918: PPUSH
2919: CALL_OW 12
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: LD_INT 1
2929: PPUSH
2930: CALL 4020 0 6
2934: GO 2895
2936: POP
2937: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 30
2955: PUSH
2956: LD_INT 31
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: PUSH
2972: FOR_IN
2973: IFFALSE 3001
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_EXP 17
2984: PPUSH
2985: CALL_OW 12
2989: PPUSH
2990: LD_VAR 0 2
2994: PPUSH
2995: CALL 4130 0 2
2999: GO 2972
3001: POP
3002: POP
// end ;
3003: LD_VAR 0 1
3007: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3008: LD_INT 0
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
// uc_side = 6 ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_INT 6
3021: ST_TO_ADDR
// uc_nation = 3 ;
3022: LD_ADDR_OWVAR 21
3026: PUSH
3027: LD_INT 3
3029: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3030: LD_ADDR_VAR 0 2
3034: PUSH
3035: DOUBLE
3036: LD_INT 1
3038: DEC
3039: ST_TO_ADDR
3040: LD_INT 1
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: CALL_OW 12
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: PUSH
3062: LD_OWVAR 67
3066: ARRAY
3067: PUSH
3068: FOR_TO
3069: IFFALSE 3229
// begin vc_engine = 1 ;
3071: LD_ADDR_OWVAR 39
3075: PUSH
3076: LD_INT 1
3078: ST_TO_ADDR
// vc_control = 1 ;
3079: LD_ADDR_OWVAR 38
3083: PUSH
3084: LD_INT 1
3086: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3087: LD_ADDR_OWVAR 40
3091: PUSH
3092: LD_INT 42
3094: PUSH
3095: LD_INT 42
3097: PUSH
3098: LD_INT 43
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: PUSH
3106: LD_OWVAR 67
3110: ARRAY
3111: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3112: LD_ADDR_OWVAR 37
3116: PUSH
3117: LD_INT 21
3119: PUSH
3120: LD_INT 22
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PUSH
3131: LD_OWVAR 67
3135: ARRAY
3136: ST_TO_ADDR
// veh = CreateVehicle ;
3137: LD_ADDR_VAR 0 3
3141: PUSH
3142: CALL_OW 45
3146: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3147: LD_VAR 0 3
3151: PPUSH
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 0
3157: PPUSH
3158: CALL_OW 49
// hc_gallery =  ;
3162: LD_ADDR_OWVAR 33
3166: PUSH
3167: LD_STRING 
3169: ST_TO_ADDR
// hc_name =  ;
3170: LD_ADDR_OWVAR 26
3174: PUSH
3175: LD_STRING 
3177: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3178: LD_INT 0
3180: PPUSH
3181: LD_INT 3
3183: PPUSH
3184: LD_EXP 16
3188: PPUSH
3189: LD_EXP 17
3193: PPUSH
3194: CALL_OW 12
3198: PPUSH
3199: CALL_OW 380
// un = CreateHuman ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_VAR 0 3
3222: PPUSH
3223: CALL_OW 52
// end ;
3227: GO 3068
3229: POP
3230: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3231: LD_INT 0
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: LD_EXP 16
3241: PPUSH
3242: LD_EXP 17
3246: PPUSH
3247: CALL_OW 12
3251: PUSH
3252: LD_INT 2
3254: PLUS
3255: PPUSH
3256: CALL_OW 380
// un = CreateHuman ;
3260: LD_ADDR_VAR 0 4
3264: PUSH
3265: CALL_OW 44
3269: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3270: LD_VAR 0 4
3274: PPUSH
3275: LD_INT 3
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 4
3290: PPUSH
3291: LD_EXP 16
3295: PPUSH
3296: LD_EXP 17
3300: PPUSH
3301: CALL_OW 12
3305: PUSH
3306: LD_INT 2
3308: PLUS
3309: PPUSH
3310: CALL_OW 380
// un = CreateHuman ;
3314: LD_ADDR_VAR 0 4
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: DOUBLE
3345: LD_INT 1
3347: DEC
3348: ST_TO_ADDR
3349: LD_INT 2
3351: PUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 3
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PUSH
3369: LD_INT 1
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: CALL_OW 12
3379: PLUS
3380: PUSH
3381: FOR_TO
3382: IFFALSE 3452
// begin hc_gallery =  ;
3384: LD_ADDR_OWVAR 33
3388: PUSH
3389: LD_STRING 
3391: ST_TO_ADDR
// hc_name =  ;
3392: LD_ADDR_OWVAR 26
3396: PUSH
3397: LD_STRING 
3399: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_EXP 16
3410: PPUSH
3411: LD_EXP 17
3415: PPUSH
3416: CALL_OW 12
3420: PPUSH
3421: CALL_OW 380
// un = CreateHuman ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3435: LD_VAR 0 4
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 0
3445: PPUSH
3446: CALL_OW 49
// end ;
3450: GO 3381
3452: POP
3453: POP
// vc_engine = 1 ;
3454: LD_ADDR_OWVAR 39
3458: PUSH
3459: LD_INT 1
3461: ST_TO_ADDR
// vc_control = 1 ;
3462: LD_ADDR_OWVAR 38
3466: PUSH
3467: LD_INT 1
3469: ST_TO_ADDR
// vc_weapon = 51 ;
3470: LD_ADDR_OWVAR 40
3474: PUSH
3475: LD_INT 51
3477: ST_TO_ADDR
// vc_chassis = 22 ;
3478: LD_ADDR_OWVAR 37
3482: PUSH
3483: LD_INT 22
3485: ST_TO_ADDR
// veh = CreateVehicle ;
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: CALL_OW 45
3495: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3496: LD_VAR 0 3
3500: PPUSH
3501: LD_INT 3
3503: PPUSH
3504: LD_INT 0
3506: PPUSH
3507: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 1
3518: PPUSH
3519: LD_INT 100
3521: PPUSH
3522: CALL_OW 290
// hc_gallery =  ;
3526: LD_ADDR_OWVAR 33
3530: PUSH
3531: LD_STRING 
3533: ST_TO_ADDR
// hc_name =  ;
3534: LD_ADDR_OWVAR 26
3538: PUSH
3539: LD_STRING 
3541: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3542: LD_INT 0
3544: PPUSH
3545: LD_INT 3
3547: PPUSH
3548: LD_EXP 16
3552: PPUSH
3553: LD_EXP 17
3557: PPUSH
3558: CALL_OW 12
3562: PPUSH
3563: CALL_OW 380
// un = CreateHuman ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 3
3586: PPUSH
3587: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: LD_INT 22
3598: PUSH
3599: LD_INT 6
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 1
3608: PUSH
3609: LD_INT 3
3611: PUSH
3612: LD_INT 25
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PPUSH
3652: CALL_OW 69
3656: PUSH
3657: FOR_IN
3658: IFFALSE 3677
// ComAgressiveMove ( i , 45 , 46 ) ;
3660: LD_VAR 0 2
3664: PPUSH
3665: LD_INT 45
3667: PPUSH
3668: LD_INT 46
3670: PPUSH
3671: CALL_OW 114
3675: GO 3657
3677: POP
3678: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3679: LD_ADDR_VAR 0 2
3683: PUSH
3684: LD_INT 22
3686: PUSH
3687: LD_INT 6
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 25
3696: PUSH
3697: LD_INT 2
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL_OW 69
3712: PUSH
3713: FOR_IN
3714: IFFALSE 3745
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3716: LD_ADDR_EXP 21
3720: PUSH
3721: LD_VAR 0 2
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: LD_INT 48
3731: PPUSH
3732: LD_INT 55
3734: PPUSH
3735: LD_INT 5
3737: PPUSH
3738: CALL_OW 145
3742: ST_TO_ADDR
3743: GO 3713
3745: POP
3746: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3747: LD_ADDR_VAR 0 2
3751: PUSH
3752: LD_INT 22
3754: PUSH
3755: LD_INT 6
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 25
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: PPUSH
3776: CALL_OW 69
3780: PUSH
3781: FOR_IN
3782: IFFALSE 3801
// ComMoveXY ( i , 39 , 55 ) ;
3784: LD_VAR 0 2
3788: PPUSH
3789: LD_INT 39
3791: PPUSH
3792: LD_INT 55
3794: PPUSH
3795: CALL_OW 111
3799: GO 3781
3801: POP
3802: POP
// end ;
3803: LD_VAR 0 1
3807: RET
// export function PrepareFirstAttack ; var i , un ; begin
3808: LD_INT 0
3810: PPUSH
3811: PPUSH
3812: PPUSH
// uc_side = 5 ;
3813: LD_ADDR_OWVAR 20
3817: PUSH
3818: LD_INT 5
3820: ST_TO_ADDR
// uc_nation = 3 ;
3821: LD_ADDR_OWVAR 21
3825: PUSH
3826: LD_INT 3
3828: ST_TO_ADDR
// for i := 1 to 4 do
3829: LD_ADDR_VAR 0 2
3833: PUSH
3834: DOUBLE
3835: LD_INT 1
3837: DEC
3838: ST_TO_ADDR
3839: LD_INT 4
3841: PUSH
3842: FOR_TO
3843: IFFALSE 3942
// begin hc_gallery =  ;
3845: LD_ADDR_OWVAR 33
3849: PUSH
3850: LD_STRING 
3852: ST_TO_ADDR
// hc_name =  ;
3853: LD_ADDR_OWVAR 26
3857: PUSH
3858: LD_STRING 
3860: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3861: LD_INT 0
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_EXP 16
3871: PPUSH
3872: LD_EXP 17
3876: PPUSH
3877: CALL_OW 12
3881: PPUSH
3882: CALL_OW 380
// un = CreateHuman ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: CALL_OW 44
3895: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_EXP 1
3920: PPUSH
3921: CALL_OW 250
3925: PPUSH
3926: LD_EXP 1
3930: PPUSH
3931: CALL_OW 251
3935: PPUSH
3936: CALL_OW 114
// end ;
3940: GO 3842
3942: POP
3943: POP
// firstRussianAttack = 1 ;
3944: LD_ADDR_EXP 23
3948: PUSH
3949: LD_INT 1
3951: ST_TO_ADDR
// end ; end_of_file
3952: LD_VAR 0 1
3956: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3957: LD_INT 0
3959: PPUSH
3960: PPUSH
// if exist_mode then
3961: LD_VAR 0 2
3965: IFFALSE 3990
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3967: LD_ADDR_VAR 0 4
3971: PUSH
3972: LD_EXP 45
3976: PUSH
3977: LD_VAR 0 1
3981: STR
3982: PPUSH
3983: CALL_OW 34
3987: ST_TO_ADDR
// end else
3988: GO 4005
// begin unit := NewCharacter ( ident ) ;
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 25
4004: ST_TO_ADDR
// end ; result := unit ;
4005: LD_ADDR_VAR 0 3
4009: PUSH
4010: LD_VAR 0 4
4014: ST_TO_ADDR
// end ;
4015: LD_VAR 0 3
4019: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4020: LD_INT 0
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
// for i = 1 to count do
4026: LD_ADDR_VAR 0 8
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_VAR 0 6
4040: PUSH
4041: FOR_TO
4042: IFFALSE 4123
// begin uc_side = side ;
4044: LD_ADDR_OWVAR 20
4048: PUSH
4049: LD_VAR 0 1
4053: ST_TO_ADDR
// uc_nation = nation ;
4054: LD_ADDR_OWVAR 21
4058: PUSH
4059: LD_VAR 0 2
4063: ST_TO_ADDR
// hc_gallery =  ;
4064: LD_ADDR_OWVAR 33
4068: PUSH
4069: LD_STRING 
4071: ST_TO_ADDR
// hc_name =  ;
4072: LD_ADDR_OWVAR 26
4076: PUSH
4077: LD_STRING 
4079: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4080: LD_INT 0
4082: PPUSH
4083: LD_VAR 0 5
4087: PPUSH
4088: LD_VAR 0 4
4092: PPUSH
4093: CALL_OW 380
// un = CreateHuman ;
4097: LD_ADDR_VAR 0 10
4101: PUSH
4102: CALL_OW 44
4106: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4107: LD_VAR 0 10
4111: PPUSH
4112: LD_VAR 0 3
4116: PPUSH
4117: CALL_OW 52
// end ;
4121: GO 4041
4123: POP
4124: POP
// end ;
4125: LD_VAR 0 7
4129: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4130: LD_INT 0
4132: PPUSH
4133: PPUSH
4134: PPUSH
// uc_side := GetSide ( b ) ;
4135: LD_ADDR_OWVAR 20
4139: PUSH
4140: LD_VAR 0 2
4144: PPUSH
4145: CALL_OW 255
4149: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_VAR 0 2
4159: PPUSH
4160: CALL_OW 248
4164: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4165: LD_INT 0
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: LD_VAR 0 1
4175: PPUSH
4176: CALL_OW 380
// un = CreateHuman ;
4180: LD_ADDR_VAR 0 4
4184: PUSH
4185: CALL_OW 44
4189: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4190: LD_ADDR_VAR 0 5
4194: PUSH
4195: LD_VAR 0 2
4199: PPUSH
4200: CALL_OW 254
4204: PUSH
4205: LD_INT 3
4207: MINUS
4208: ST_TO_ADDR
// if dir < 0 then
4209: LD_VAR 0 5
4213: PUSH
4214: LD_INT 0
4216: LESS
4217: IFFALSE 4233
// dir := 6 + dir ;
4219: LD_ADDR_VAR 0 5
4223: PUSH
4224: LD_INT 6
4226: PUSH
4227: LD_VAR 0 5
4231: PLUS
4232: ST_TO_ADDR
// SetDir ( un , dir ) ;
4233: LD_VAR 0 4
4237: PPUSH
4238: LD_VAR 0 5
4242: PPUSH
4243: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4247: LD_VAR 0 4
4251: PPUSH
4252: LD_VAR 0 2
4256: PPUSH
4257: CALL_OW 52
// end ;
4261: LD_VAR 0 3
4265: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4266: LD_INT 0
4268: PPUSH
4269: PPUSH
4270: PPUSH
// rnd = rand ( 1 , characters ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 1
4278: PPUSH
4279: LD_VAR 0 1
4283: PPUSH
4284: CALL_OW 12
4288: ST_TO_ADDR
// for i = 1 to characters do
4289: LD_ADDR_VAR 0 5
4293: PUSH
4294: DOUBLE
4295: LD_INT 1
4297: DEC
4298: ST_TO_ADDR
4299: LD_VAR 0 1
4303: PUSH
4304: FOR_TO
4305: IFFALSE 4415
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4307: LD_VAR 0 5
4311: PUSH
4312: LD_VAR 0 6
4316: EQUAL
4317: PUSH
4318: LD_VAR 0 1
4322: PUSH
4323: LD_VAR 0 5
4327: ARRAY
4328: PPUSH
4329: CALL_OW 258
4333: PUSH
4334: LD_INT 1
4336: EQUAL
4337: AND
4338: IFFALSE 4360
// Say ( characters [ i ] , dialogMID ) ;
4340: LD_VAR 0 1
4344: PUSH
4345: LD_VAR 0 5
4349: ARRAY
4350: PPUSH
4351: LD_VAR 0 2
4355: PPUSH
4356: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 6
4369: EQUAL
4370: PUSH
4371: LD_VAR 0 1
4375: PUSH
4376: LD_VAR 0 5
4380: ARRAY
4381: PPUSH
4382: CALL_OW 258
4386: PUSH
4387: LD_INT 2
4389: EQUAL
4390: AND
4391: IFFALSE 4413
// Say ( characters [ i ] , dialogFID ) ;
4393: LD_VAR 0 1
4397: PUSH
4398: LD_VAR 0 5
4402: ARRAY
4403: PPUSH
4404: LD_VAR 0 3
4408: PPUSH
4409: CALL_OW 88
// end ;
4413: GO 4304
4415: POP
4416: POP
// end ;
4417: LD_VAR 0 4
4421: RET
// export function PrepareDifficulty ; var tmp ; begin
4422: LD_INT 0
4424: PPUSH
4425: PPUSH
// if Difficulty = 1 then
4426: LD_OWVAR 67
4430: PUSH
4431: LD_INT 1
4433: EQUAL
4434: IFFALSE 4452
// begin RuSoldMinLevel = 0 ;
4436: LD_ADDR_EXP 16
4440: PUSH
4441: LD_INT 0
4443: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4444: LD_ADDR_EXP 17
4448: PUSH
4449: LD_INT 2
4451: ST_TO_ADDR
// end ; if Difficulty = 2 then
4452: LD_OWVAR 67
4456: PUSH
4457: LD_INT 2
4459: EQUAL
4460: IFFALSE 4568
// begin RuSoldMinLevel = 1 ;
4462: LD_ADDR_EXP 16
4466: PUSH
4467: LD_INT 1
4469: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4470: LD_ADDR_EXP 17
4474: PUSH
4475: LD_INT 2
4477: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4478: LD_INT 14
4480: PPUSH
4481: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4485: LD_INT 23
4487: PPUSH
4488: CALL_OW 64
// uc_nation = 3 ;
4492: LD_ADDR_OWVAR 21
4496: PUSH
4497: LD_INT 3
4499: ST_TO_ADDR
// uc_side = 3 ;
4500: LD_ADDR_OWVAR 20
4504: PUSH
4505: LD_INT 3
4507: ST_TO_ADDR
// bc_level = 5 ;
4508: LD_ADDR_OWVAR 43
4512: PUSH
4513: LD_INT 5
4515: ST_TO_ADDR
// bc_type = 32 ;
4516: LD_ADDR_OWVAR 42
4520: PUSH
4521: LD_INT 32
4523: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4524: LD_ADDR_VAR 0 2
4528: PUSH
4529: LD_INT 76
4531: PPUSH
4532: LD_INT 91
4534: PPUSH
4535: LD_INT 2
4537: PPUSH
4538: CALL_OW 47
4542: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4543: LD_VAR 0 2
4547: PPUSH
4548: LD_INT 43
4550: PPUSH
4551: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4555: LD_INT 51
4557: PPUSH
4558: LD_INT 3
4560: PPUSH
4561: LD_INT 1
4563: PPUSH
4564: CALL_OW 322
// end ; if Difficulty = 3 then
4568: LD_OWVAR 67
4572: PUSH
4573: LD_INT 3
4575: EQUAL
4576: IFFALSE 4752
// begin RuSoldMinLevel = 1 ;
4578: LD_ADDR_EXP 16
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4586: LD_ADDR_EXP 17
4590: PUSH
4591: LD_INT 3
4593: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4594: LD_INT 13
4596: PPUSH
4597: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4601: LD_INT 14
4603: PPUSH
4604: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4608: LD_INT 26
4610: PPUSH
4611: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 64
// uc_nation = 3 ;
4622: LD_ADDR_OWVAR 21
4626: PUSH
4627: LD_INT 3
4629: ST_TO_ADDR
// uc_side = 3 ;
4630: LD_ADDR_OWVAR 20
4634: PUSH
4635: LD_INT 3
4637: ST_TO_ADDR
// bc_level = 5 ;
4638: LD_ADDR_OWVAR 43
4642: PUSH
4643: LD_INT 5
4645: ST_TO_ADDR
// bc_type = 32 ;
4646: LD_ADDR_OWVAR 42
4650: PUSH
4651: LD_INT 32
4653: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4654: LD_ADDR_VAR 0 2
4658: PUSH
4659: LD_INT 76
4661: PPUSH
4662: LD_INT 91
4664: PPUSH
4665: LD_INT 2
4667: PPUSH
4668: CALL_OW 47
4672: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4673: LD_VAR 0 2
4677: PPUSH
4678: LD_INT 44
4680: PPUSH
4681: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4685: LD_ADDR_VAR 0 2
4689: PUSH
4690: LD_INT 83
4692: PPUSH
4693: LD_INT 84
4695: PPUSH
4696: LD_INT 2
4698: PPUSH
4699: CALL_OW 47
4703: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4704: LD_VAR 0 2
4708: PPUSH
4709: LD_INT 43
4711: PPUSH
4712: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4716: LD_INT 51
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: LD_INT 1
4724: PPUSH
4725: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4729: LD_INT 52
4731: PPUSH
4732: LD_INT 3
4734: PPUSH
4735: LD_INT 1
4737: PPUSH
4738: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4742: LD_INT 25
4744: PPUSH
4745: LD_INT 44
4747: PPUSH
4748: CALL_OW 431
// end ; end ;
4752: LD_VAR 0 1
4756: RET
// export function EnergyDialog ; begin
4757: LD_INT 0
4759: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4760: LD_INT 46
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 321
4770: PUSH
4771: LD_INT 1
4773: EQUAL
4774: PUSH
4775: LD_INT 35
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 321
4785: PUSH
4786: LD_INT 1
4788: EQUAL
4789: AND
4790: IFFALSE 4814
// begin Say ( JMM , D9c-JMM-1 ) ;
4792: LD_EXP 1
4796: PPUSH
4797: LD_STRING D9c-JMM-1
4799: PPUSH
4800: CALL_OW 88
// energyVDialog = 1 ;
4804: LD_ADDR_EXP 33
4808: PUSH
4809: LD_INT 1
4811: ST_TO_ADDR
// end else
4812: GO 4968
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4814: LD_INT 35
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 321
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 33
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4860
// begin Say ( JMM , D9c-JMM-1a ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING D9c-JMM-1a
4847: PPUSH
4848: CALL_OW 88
// energyVDialog = 1 ;
4852: LD_ADDR_EXP 33
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4860: LD_INT 46
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 321
4870: PUSH
4871: LD_INT 2
4873: EQUAL
4874: PUSH
4875: LD_EXP 33
4879: PUSH
4880: LD_INT 0
4882: EQUAL
4883: AND
4884: IFFALSE 4906
// begin Say ( JMM , D9c-JMM-1b ) ;
4886: LD_EXP 1
4890: PPUSH
4891: LD_STRING D9c-JMM-1b
4893: PPUSH
4894: CALL_OW 88
// energyVDialog = 1 ;
4898: LD_ADDR_EXP 33
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4906: LD_INT 46
4908: PPUSH
4909: LD_INT 1
4911: PPUSH
4912: CALL_OW 321
4916: PUSH
4917: LD_INT 2
4919: EQUAL
4920: PUSH
4921: LD_INT 21
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: CALL_OW 321
4931: PUSH
4932: LD_INT 2
4934: EQUAL
4935: AND
4936: PUSH
4937: LD_EXP 33
4941: PUSH
4942: LD_INT 0
4944: EQUAL
4945: AND
4946: IFFALSE 4968
// begin Say ( JMM , D9c-JMM-1c ) ;
4948: LD_EXP 1
4952: PPUSH
4953: LD_STRING D9c-JMM-1c
4955: PPUSH
4956: CALL_OW 88
// energyVDialog = 1 ;
4960: LD_ADDR_EXP 33
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// end ; end ; end ;
4968: LD_VAR 0 1
4972: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
4978: PPUSH
4979: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4980: LD_VAR 0 1
4984: NOT
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 256
4995: PUSH
4996: LD_INT 250
4998: LESS
4999: OR
5000: PUSH
5001: LD_VAR 0 1
5005: PPUSH
5006: CALL_OW 314
5010: PUSH
5011: LD_VAR 0 1
5015: PPUSH
5016: CALL_OW 261
5020: PUSH
5021: LD_INT 20
5023: GREATER
5024: AND
5025: OR
5026: IFFALSE 5030
// exit ;
5028: GO 5395
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5030: LD_VAR 0 1
5034: PPUSH
5035: CALL_OW 261
5039: PUSH
5040: LD_INT 20
5042: LESS
5043: PUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL_OW 110
5053: PUSH
5054: LD_INT 21
5056: EQUAL
5057: NOT
5058: AND
5059: IFFALSE 5086
// begin ComStop ( bulldozer ) ;
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5070: LD_VAR 0 1
5074: PPUSH
5075: LD_INT 21
5077: PPUSH
5078: CALL_OW 109
// exit ;
5082: GO 5395
// end else
5084: GO 5113
// if GetFuel ( bulldozer ) > 20 then
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 261
5095: PUSH
5096: LD_INT 20
5098: GREATER
5099: IFFALSE 5113
// SetTag ( bulldozer , 0 ) ;
5101: LD_VAR 0 1
5105: PPUSH
5106: LD_INT 0
5108: PPUSH
5109: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5113: LD_ADDR_VAR 0 5
5117: PUSH
5118: LD_VAR 0 2
5122: PPUSH
5123: CALL_OW 353
5127: ST_TO_ADDR
// tmp := [ ] ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: EMPTY
5134: ST_TO_ADDR
// for i = 1 to list do
5135: LD_ADDR_VAR 0 4
5139: PUSH
5140: DOUBLE
5141: LD_INT 1
5143: DEC
5144: ST_TO_ADDR
5145: LD_VAR 0 5
5149: PUSH
5150: FOR_TO
5151: IFFALSE 5249
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5153: LD_VAR 0 5
5157: PUSH
5158: LD_VAR 0 4
5162: ARRAY
5163: PUSH
5164: LD_INT 1
5166: ARRAY
5167: PPUSH
5168: LD_VAR 0 5
5172: PUSH
5173: LD_VAR 0 4
5177: ARRAY
5178: PUSH
5179: LD_INT 2
5181: ARRAY
5182: PPUSH
5183: CALL_OW 554
5187: IFFALSE 5247
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5189: LD_ADDR_VAR 0 6
5193: PUSH
5194: LD_VAR 0 6
5198: PPUSH
5199: LD_VAR 0 6
5203: PUSH
5204: LD_INT 1
5206: PLUS
5207: PPUSH
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 4
5217: ARRAY
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PUSH
5223: LD_VAR 0 5
5227: PUSH
5228: LD_VAR 0 4
5232: ARRAY
5233: PUSH
5234: LD_INT 2
5236: ARRAY
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PPUSH
5242: CALL_OW 1
5246: ST_TO_ADDR
// end ;
5247: GO 5150
5249: POP
5250: POP
// ComStop ( bulldozer ) ;
5251: LD_VAR 0 1
5255: PPUSH
5256: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5260: LD_ADDR_VAR 0 7
5264: PUSH
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 250
5274: PUSH
5275: LD_VAR 0 1
5279: PPUSH
5280: CALL_OW 251
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: ST_TO_ADDR
// for i = tmp downto 1 do
5289: LD_ADDR_VAR 0 4
5293: PUSH
5294: DOUBLE
5295: LD_VAR 0 6
5299: INC
5300: ST_TO_ADDR
5301: LD_INT 1
5303: PUSH
5304: FOR_DOWNTO
5305: IFFALSE 5393
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5307: LD_ADDR_VAR 0 7
5311: PUSH
5312: LD_VAR 0 7
5316: PUSH
5317: LD_INT 1
5319: ARRAY
5320: PPUSH
5321: LD_VAR 0 7
5325: PUSH
5326: LD_INT 2
5328: ARRAY
5329: PPUSH
5330: LD_VAR 0 6
5334: PPUSH
5335: CALL 5496 0 3
5339: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5340: LD_VAR 0 1
5344: PPUSH
5345: LD_VAR 0 7
5349: PUSH
5350: LD_INT 1
5352: ARRAY
5353: PPUSH
5354: LD_VAR 0 7
5358: PUSH
5359: LD_INT 2
5361: ARRAY
5362: PPUSH
5363: CALL 5400 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5367: LD_ADDR_VAR 0 6
5371: PUSH
5372: LD_VAR 0 6
5376: PPUSH
5377: LD_VAR 0 7
5381: PUSH
5382: LD_INT 3
5384: ARRAY
5385: PPUSH
5386: CALL_OW 3
5390: ST_TO_ADDR
// end ;
5391: GO 5304
5393: POP
5394: POP
// end ;
5395: LD_VAR 0 3
5399: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5400: LD_INT 0
5402: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5403: LD_VAR 0 2
5407: PPUSH
5408: LD_VAR 0 3
5412: PPUSH
5413: CALL_OW 351
5417: PUSH
5418: LD_VAR 0 2
5422: PPUSH
5423: LD_VAR 0 3
5427: PPUSH
5428: CALL_OW 554
5432: AND
5433: PUSH
5434: LD_VAR 0 2
5438: PPUSH
5439: LD_VAR 0 3
5443: PPUSH
5444: CALL_OW 488
5448: AND
5449: PUSH
5450: LD_VAR 0 2
5454: PPUSH
5455: LD_VAR 0 3
5459: PPUSH
5460: CALL_OW 428
5464: PUSH
5465: LD_INT 1
5467: NEG
5468: EQUAL
5469: AND
5470: IFFALSE 5491
// AddComMoveXY ( bulldozer , x , y ) ;
5472: LD_VAR 0 1
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 171
// end ;
5491: LD_VAR 0 4
5495: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5496: LD_INT 0
5498: PPUSH
5499: PPUSH
5500: PPUSH
5501: PPUSH
5502: PPUSH
5503: PPUSH
5504: PPUSH
// dist := 99999 ;
5505: LD_ADDR_VAR 0 6
5509: PUSH
5510: LD_INT 99999
5512: ST_TO_ADDR
// for i = 1 to list do
5513: LD_ADDR_VAR 0 5
5517: PUSH
5518: DOUBLE
5519: LD_INT 1
5521: DEC
5522: ST_TO_ADDR
5523: LD_VAR 0 3
5527: PUSH
5528: FOR_TO
5529: IFFALSE 5667
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5531: LD_ADDR_VAR 0 7
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_VAR 0 3
5550: PUSH
5551: LD_VAR 0 5
5555: ARRAY
5556: PUSH
5557: LD_INT 1
5559: ARRAY
5560: PPUSH
5561: LD_VAR 0 3
5565: PUSH
5566: LD_VAR 0 5
5570: ARRAY
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: CALL_OW 298
5580: ST_TO_ADDR
// if d = 0 then
5581: LD_VAR 0 7
5585: PUSH
5586: LD_INT 0
5588: EQUAL
5589: IFFALSE 5593
// continue ;
5591: GO 5528
// if d < dist then
5593: LD_VAR 0 7
5597: PUSH
5598: LD_VAR 0 6
5602: LESS
5603: IFFALSE 5665
// begin _x := list [ i ] [ 1 ] ;
5605: LD_ADDR_VAR 0 8
5609: PUSH
5610: LD_VAR 0 3
5614: PUSH
5615: LD_VAR 0 5
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5625: LD_ADDR_VAR 0 9
5629: PUSH
5630: LD_VAR 0 3
5634: PUSH
5635: LD_VAR 0 5
5639: ARRAY
5640: PUSH
5641: LD_INT 2
5643: ARRAY
5644: ST_TO_ADDR
// _i := i ;
5645: LD_ADDR_VAR 0 10
5649: PUSH
5650: LD_VAR 0 5
5654: ST_TO_ADDR
// dist := d ;
5655: LD_ADDR_VAR 0 6
5659: PUSH
5660: LD_VAR 0 7
5664: ST_TO_ADDR
// end ; end ;
5665: GO 5528
5667: POP
5668: POP
// result := [ _x , _y , _i , dist ] ;
5669: LD_ADDR_VAR 0 4
5673: PUSH
5674: LD_VAR 0 8
5678: PUSH
5679: LD_VAR 0 9
5683: PUSH
5684: LD_VAR 0 10
5688: PUSH
5689: LD_VAR 0 6
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: ST_TO_ADDR
// end ;
5700: LD_VAR 0 4
5704: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
5709: PPUSH
5710: PPUSH
// for i = 1 to 72 do
5711: LD_ADDR_VAR 0 5
5715: PUSH
5716: DOUBLE
5717: LD_INT 1
5719: DEC
5720: ST_TO_ADDR
5721: LD_INT 72
5723: PUSH
5724: FOR_TO
5725: IFFALSE 5783
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5727: LD_VAR 0 5
5731: PPUSH
5732: LD_VAR 0 1
5736: PPUSH
5737: CALL_OW 321
5741: PUSH
5742: LD_INT 1
5744: EQUAL
5745: PUSH
5746: LD_VAR 0 5
5750: PPUSH
5751: LD_VAR 0 3
5755: PPUSH
5756: CALL_OW 482
5760: PUSH
5761: LD_INT 1
5763: EQUAL
5764: AND
5765: IFFALSE 5781
// AddComResearch ( lab , i ) ;
5767: LD_VAR 0 2
5771: PPUSH
5772: LD_VAR 0 5
5776: PPUSH
5777: CALL_OW 184
5781: GO 5724
5783: POP
5784: POP
// end ;
5785: LD_VAR 0 4
5789: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5790: LD_INT 0
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5798: LD_ADDR_VAR 0 7
5802: PUSH
5803: LD_VAR 0 2
5807: PPUSH
5808: CALL_OW 313
5812: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5813: LD_ADDR_VAR 0 8
5817: PUSH
5818: LD_VAR 0 3
5822: PPUSH
5823: LD_INT 22
5825: PUSH
5826: LD_VAR 0 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 24
5847: PUSH
5848: LD_INT 750
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: LD_INT 3
5857: PUSH
5858: LD_INT 54
5860: PUSH
5861: EMPTY
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 70
5878: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5879: LD_ADDR_VAR 0 5
5883: PUSH
5884: LD_VAR 0 3
5888: PPUSH
5889: LD_INT 22
5891: PUSH
5892: LD_VAR 0 1
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 21
5903: PUSH
5904: LD_INT 3
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 3
5913: PUSH
5914: LD_INT 24
5916: PUSH
5917: LD_INT 1000
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: PPUSH
5936: CALL_OW 70
5940: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5941: LD_VAR 0 5
5945: NOT
5946: PUSH
5947: LD_INT 22
5949: PUSH
5950: LD_VAR 0 1
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 25
5961: PUSH
5962: LD_INT 2
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 24
5971: PUSH
5972: LD_INT 250
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: PPUSH
5984: CALL_OW 69
5988: NOT
5989: AND
5990: IFFALSE 5994
// exit ;
5992: GO 6106
// if buildings_list > 0 and engineerOkInside then
5994: LD_VAR 0 5
5998: PUSH
5999: LD_INT 0
6001: GREATER
6002: PUSH
6003: LD_VAR 0 7
6007: AND
6008: IFFALSE 6034
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6010: LD_VAR 0 7
6014: PPUSH
6015: LD_INT 25
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: PPUSH
6030: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6034: LD_VAR 0 5
6038: PUSH
6039: LD_INT 0
6041: GREATER
6042: PUSH
6043: LD_VAR 0 8
6047: PUSH
6048: LD_INT 0
6050: GREATER
6051: AND
6052: IFFALSE 6072
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6054: LD_VAR 0 8
6058: PPUSH
6059: LD_VAR 0 5
6063: PUSH
6064: LD_INT 1
6066: ARRAY
6067: PPUSH
6068: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6072: LD_VAR 0 5
6076: PUSH
6077: LD_INT 0
6079: EQUAL
6080: PUSH
6081: LD_VAR 0 8
6085: PUSH
6086: LD_INT 0
6088: GREATER
6089: AND
6090: IFFALSE 6106
// ComEnterUnit ( engineerOkOutside , building ) ;
6092: LD_VAR 0 8
6096: PPUSH
6097: LD_VAR 0 2
6101: PPUSH
6102: CALL_OW 120
// end ;
6106: LD_VAR 0 4
6110: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6111: LD_INT 0
6113: PPUSH
6114: PPUSH
6115: PPUSH
6116: PPUSH
6117: PPUSH
6118: PPUSH
6119: PPUSH
6120: PPUSH
6121: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6122: LD_ADDR_VAR 0 6
6126: PUSH
6127: LD_INT 22
6129: PUSH
6130: LD_VAR 0 1
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 25
6141: PUSH
6142: LD_INT 4
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 23
6151: PUSH
6152: LD_INT 2
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 24
6161: PUSH
6162: LD_INT 251
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6180: LD_ADDR_VAR 0 7
6184: PUSH
6185: LD_VAR 0 3
6189: PPUSH
6190: LD_INT 22
6192: PUSH
6193: LD_VAR 0 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 23
6204: PUSH
6205: LD_INT 2
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 50
6224: PUSH
6225: EMPTY
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 70
6238: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6239: LD_ADDR_VAR 0 10
6243: PUSH
6244: LD_VAR 0 3
6248: PPUSH
6249: LD_INT 22
6251: PUSH
6252: LD_VAR 0 1
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 21
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: LD_INT 25
6276: PUSH
6277: LD_INT 3
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 3
6290: PUSH
6291: LD_INT 24
6293: PUSH
6294: LD_INT 750
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 70
6315: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6316: LD_ADDR_VAR 0 11
6320: PUSH
6321: LD_VAR 0 2
6325: PPUSH
6326: LD_INT 22
6328: PUSH
6329: LD_VAR 0 1
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 21
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 3
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 3
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 1000
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: PPUSH
6388: CALL_OW 70
6392: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6393: LD_VAR 0 10
6397: NOT
6398: PUSH
6399: LD_VAR 0 11
6403: NOT
6404: AND
6405: PUSH
6406: LD_VAR 0 6
6410: NOT
6411: AND
6412: IFFALSE 6416
// exit ;
6414: GO 6650
// if damageUnits > 0 and sci_list > 0 then
6416: LD_VAR 0 10
6420: PUSH
6421: LD_INT 0
6423: GREATER
6424: PUSH
6425: LD_VAR 0 6
6429: PUSH
6430: LD_INT 0
6432: GREATER
6433: AND
6434: IFFALSE 6450
// ComMoveToArea ( damageUnits , healArea ) ;
6436: LD_VAR 0 10
6440: PPUSH
6441: LD_VAR 0 2
6445: PPUSH
6446: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6450: LD_VAR 0 11
6454: PUSH
6455: LD_INT 0
6457: GREATER
6458: PUSH
6459: LD_VAR 0 6
6463: PUSH
6464: LD_INT 0
6466: GREATER
6467: AND
6468: IFFALSE 6479
// ComExitBuilding ( sci_list ) ;
6470: LD_VAR 0 6
6474: PPUSH
6475: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6479: LD_VAR 0 11
6483: PUSH
6484: LD_INT 0
6486: GREATER
6487: PUSH
6488: LD_VAR 0 7
6492: PUSH
6493: LD_INT 0
6495: GREATER
6496: AND
6497: IFFALSE 6517
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6499: LD_VAR 0 7
6503: PPUSH
6504: LD_VAR 0 11
6508: PUSH
6509: LD_INT 1
6511: ARRAY
6512: PPUSH
6513: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6517: LD_VAR 0 10
6521: PUSH
6522: LD_INT 0
6524: EQUAL
6525: PUSH
6526: LD_VAR 0 11
6530: PUSH
6531: LD_INT 0
6533: EQUAL
6534: AND
6535: PUSH
6536: LD_VAR 0 7
6540: PUSH
6541: LD_INT 0
6543: GREATER
6544: AND
6545: IFFALSE 6650
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6547: LD_ADDR_VAR 0 12
6551: PUSH
6552: LD_INT 22
6554: PUSH
6555: LD_VAR 0 1
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 21
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 30
6576: PUSH
6577: LD_INT 8
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: PPUSH
6589: CALL_OW 69
6593: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6594: LD_ADDR_VAR 0 13
6598: PUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_VAR 0 12
6606: PPUSH
6607: CALL_OW 12
6611: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6612: LD_VAR 0 7
6616: PPUSH
6617: LD_INT 3
6619: PUSH
6620: LD_INT 60
6622: PUSH
6623: EMPTY
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PPUSH
6630: CALL_OW 72
6634: PPUSH
6635: LD_VAR 0 12
6639: PUSH
6640: LD_VAR 0 13
6644: ARRAY
6645: PPUSH
6646: CALL_OW 120
// end ; end ;
6650: LD_VAR 0 5
6654: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6655: LD_INT 0
6657: PPUSH
6658: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6659: LD_INT 22
6661: PUSH
6662: LD_VAR 0 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 21
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: PUSH
6690: LD_VAR 0 3
6694: LESSEQUAL
6695: IFFALSE 6762
// for i = 1 to vehCount do
6697: LD_ADDR_VAR 0 9
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_VAR 0 3
6711: PUSH
6712: FOR_TO
6713: IFFALSE 6760
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6715: LD_VAR 0 2
6719: PPUSH
6720: LD_VAR 0 7
6724: PPUSH
6725: LD_VAR 0 5
6729: PPUSH
6730: LD_VAR 0 6
6734: PPUSH
6735: LD_VAR 0 4
6739: PUSH
6740: LD_INT 1
6742: PPUSH
6743: LD_VAR 0 4
6747: PPUSH
6748: CALL_OW 12
6752: ARRAY
6753: PPUSH
6754: CALL_OW 185
6758: GO 6712
6760: POP
6761: POP
// end ;
6762: LD_VAR 0 8
6766: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
6771: PPUSH
6772: PPUSH
6773: PPUSH
6774: PPUSH
6775: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6776: LD_ADDR_VAR 0 8
6780: PUSH
6781: LD_INT 22
6783: PUSH
6784: LD_VAR 0 1
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 21
6795: PUSH
6796: LD_INT 2
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 3
6805: PUSH
6806: LD_INT 34
6808: PUSH
6809: LD_INT 51
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 34
6818: PUSH
6819: LD_INT 53
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 34
6828: PUSH
6829: LD_INT 52
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 24
6844: PUSH
6845: LD_INT 650
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 69
6862: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6863: LD_INT 22
6865: PUSH
6866: LD_VAR 0 1
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 21
6877: PUSH
6878: LD_INT 2
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 24
6887: PUSH
6888: LD_INT 1000
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: LIST
6899: PPUSH
6900: CALL_OW 69
6904: PUSH
6905: LD_INT 3
6907: PUSH
6908: LD_INT 4
6910: PUSH
6911: LD_INT 5
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: PUSH
6919: LD_OWVAR 67
6923: ARRAY
6924: GREATEREQUAL
6925: IFFALSE 7422
// repeat wait ( 0 0$1 ) ;
6927: LD_INT 35
6929: PPUSH
6930: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6934: LD_ADDR_VAR 0 8
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_VAR 0 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 21
6953: PUSH
6954: LD_INT 2
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 3
6963: PUSH
6964: LD_INT 34
6966: PUSH
6967: LD_INT 51
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 34
6976: PUSH
6977: LD_INT 53
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 34
6986: PUSH
6987: LD_INT 52
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 24
7002: PUSH
7003: LD_INT 650
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 69
7020: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 95
7035: PUSH
7036: LD_VAR 0 2
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PPUSH
7049: CALL_OW 69
7053: NOT
7054: PUSH
7055: LD_VAR 0 11
7059: PUSH
7060: LD_INT 0
7062: EQUAL
7063: AND
7064: IFFALSE 7119
// for i := 1 to wayX do
7066: LD_ADDR_VAR 0 6
7070: PUSH
7071: DOUBLE
7072: LD_INT 1
7074: DEC
7075: ST_TO_ADDR
7076: LD_VAR 0 3
7080: PUSH
7081: FOR_TO
7082: IFFALSE 7117
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7084: LD_VAR 0 8
7088: PPUSH
7089: LD_VAR 0 3
7093: PUSH
7094: LD_VAR 0 6
7098: ARRAY
7099: PPUSH
7100: LD_VAR 0 4
7104: PUSH
7105: LD_VAR 0 6
7109: ARRAY
7110: PPUSH
7111: CALL_OW 174
7115: GO 7081
7117: POP
7118: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7119: LD_INT 22
7121: PUSH
7122: LD_VAR 0 1
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 95
7133: PUSH
7134: LD_VAR 0 2
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: IFFALSE 7375
// begin seeEnemy = 1 ;
7153: LD_ADDR_VAR 0 11
7157: PUSH
7158: LD_INT 1
7160: ST_TO_ADDR
// for j in vehiclesOK do
7161: LD_ADDR_VAR 0 7
7165: PUSH
7166: LD_VAR 0 8
7170: PUSH
7171: FOR_IN
7172: IFFALSE 7373
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7174: LD_ADDR_VAR 0 9
7178: PUSH
7179: LD_INT 81
7181: PUSH
7182: LD_VAR 0 1
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 101
7193: PUSH
7194: LD_INT 1
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PPUSH
7210: LD_VAR 0 7
7214: PPUSH
7215: CALL_OW 74
7219: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7220: LD_ADDR_VAR 0 10
7224: PUSH
7225: LD_INT 81
7227: PUSH
7228: LD_VAR 0 1
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 101
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 2
7249: PUSH
7250: LD_INT 59
7252: PUSH
7253: EMPTY
7254: LIST
7255: PUSH
7256: LD_INT 21
7258: PUSH
7259: LD_INT 1
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 2
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: PPUSH
7290: CALL_OW 69
7294: PPUSH
7295: LD_VAR 0 7
7299: PPUSH
7300: CALL_OW 74
7304: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7305: LD_VAR 0 7
7309: PPUSH
7310: LD_VAR 0 9
7314: PPUSH
7315: CALL_OW 296
7319: PUSH
7320: LD_INT 8
7322: PLUS
7323: PUSH
7324: LD_VAR 0 7
7328: PPUSH
7329: LD_VAR 0 10
7333: PPUSH
7334: CALL_OW 296
7338: LESS
7339: IFFALSE 7357
// ComAttackUnit ( j , target1 ) else
7341: LD_VAR 0 7
7345: PPUSH
7346: LD_VAR 0 9
7350: PPUSH
7351: CALL_OW 115
7355: GO 7371
// ComAttackUnit ( j , target2 ) ;
7357: LD_VAR 0 7
7361: PPUSH
7362: LD_VAR 0 10
7366: PPUSH
7367: CALL_OW 115
// end ;
7371: GO 7171
7373: POP
7374: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7375: LD_INT 22
7377: PUSH
7378: LD_VAR 0 1
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 21
7389: PUSH
7390: LD_INT 2
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 24
7399: PUSH
7400: LD_INT 1000
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL_OW 69
7416: PUSH
7417: LD_INT 0
7419: EQUAL
7420: IFFALSE 6927
// seeEnemy = 0 ;
7422: LD_ADDR_VAR 0 11
7426: PUSH
7427: LD_INT 0
7429: ST_TO_ADDR
// end ;
7430: LD_VAR 0 5
7434: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7435: LD_INT 0
7437: PPUSH
7438: PPUSH
7439: PPUSH
7440: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7441: LD_ADDR_VAR 0 8
7445: PUSH
7446: LD_INT 22
7448: PUSH
7449: LD_VAR 0 1
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 21
7460: PUSH
7461: LD_INT 2
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: LD_INT 34
7473: PUSH
7474: LD_INT 51
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 34
7483: PUSH
7484: LD_INT 53
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 34
7493: PUSH
7494: LD_INT 52
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 3
7509: PUSH
7510: LD_INT 24
7512: PUSH
7513: LD_INT 650
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: ST_TO_ADDR
// if damageVehicles > 0 then
7535: LD_VAR 0 8
7539: PUSH
7540: LD_INT 0
7542: GREATER
7543: IFFALSE 7564
// ComMoveXY ( damageVehicles , repX , repY ) ;
7545: LD_VAR 0 8
7549: PPUSH
7550: LD_VAR 0 3
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7564: LD_VAR 0 8
7568: PPUSH
7569: LD_INT 95
7571: PUSH
7572: LD_VAR 0 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 3
7583: PUSH
7584: LD_INT 58
7586: PUSH
7587: EMPTY
7588: LIST
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 72
7602: PUSH
7603: LD_INT 0
7605: GREATER
7606: IFFALSE 7673
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7608: LD_ADDR_VAR 0 6
7612: PUSH
7613: LD_VAR 0 8
7617: PPUSH
7618: LD_INT 95
7620: PUSH
7621: LD_VAR 0 2
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 3
7632: PUSH
7633: LD_INT 58
7635: PUSH
7636: EMPTY
7637: LIST
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 72
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7671
// ComExitVehicle ( UnitsInside ( i ) ) ;
7655: LD_VAR 0 6
7659: PPUSH
7660: CALL_OW 313
7664: PPUSH
7665: CALL_OW 121
7669: GO 7652
7671: POP
7672: POP
// end ;
7673: LD_VAR 0 5
7677: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7678: LD_INT 0
7680: PPUSH
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
// for i = 1 to medicCount do
7691: LD_ADDR_VAR 0 14
7695: PUSH
7696: DOUBLE
7697: LD_INT 1
7699: DEC
7700: ST_TO_ADDR
7701: LD_VAR 0 7
7705: PUSH
7706: FOR_TO
7707: IFFALSE 7789
// begin uc_side = side ;
7709: LD_ADDR_OWVAR 20
7713: PUSH
7714: LD_VAR 0 1
7718: ST_TO_ADDR
// uc_nation = nation ;
7719: LD_ADDR_OWVAR 21
7723: PUSH
7724: LD_VAR 0 2
7728: ST_TO_ADDR
// hc_name =  ;
7729: LD_ADDR_OWVAR 26
7733: PUSH
7734: LD_STRING 
7736: ST_TO_ADDR
// hc_gallery =  ;
7737: LD_ADDR_OWVAR 33
7741: PUSH
7742: LD_STRING 
7744: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7745: LD_INT 0
7747: PPUSH
7748: LD_INT 4
7750: PPUSH
7751: LD_VAR 0 8
7755: PPUSH
7756: CALL_OW 380
// un = CreateHuman ;
7760: LD_ADDR_VAR 0 16
7764: PUSH
7765: CALL_OW 44
7769: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7770: LD_VAR 0 16
7774: PPUSH
7775: LD_VAR 0 9
7779: PPUSH
7780: LD_INT 0
7782: PPUSH
7783: CALL_OW 49
// end ;
7787: GO 7706
7789: POP
7790: POP
// for i = 1 to soldierCount do
7791: LD_ADDR_VAR 0 14
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 3
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7889
// begin uc_side = side ;
7809: LD_ADDR_OWVAR 20
7813: PUSH
7814: LD_VAR 0 1
7818: ST_TO_ADDR
// uc_nation = nation ;
7819: LD_ADDR_OWVAR 21
7823: PUSH
7824: LD_VAR 0 2
7828: ST_TO_ADDR
// hc_name =  ;
7829: LD_ADDR_OWVAR 26
7833: PUSH
7834: LD_STRING 
7836: ST_TO_ADDR
// hc_gallery =  ;
7837: LD_ADDR_OWVAR 33
7841: PUSH
7842: LD_STRING 
7844: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7845: LD_INT 0
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_VAR 0 8
7855: PPUSH
7856: CALL_OW 380
// un = CreateHuman ;
7860: LD_ADDR_VAR 0 16
7864: PUSH
7865: CALL_OW 44
7869: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7870: LD_VAR 0 16
7874: PPUSH
7875: LD_VAR 0 9
7879: PPUSH
7880: LD_INT 0
7882: PPUSH
7883: CALL_OW 49
// end ;
7887: GO 7806
7889: POP
7890: POP
// for i = 1 to sniperCount do
7891: LD_ADDR_VAR 0 14
7895: PUSH
7896: DOUBLE
7897: LD_INT 1
7899: DEC
7900: ST_TO_ADDR
7901: LD_VAR 0 4
7905: PUSH
7906: FOR_TO
7907: IFFALSE 7989
// begin uc_side = side ;
7909: LD_ADDR_OWVAR 20
7913: PUSH
7914: LD_VAR 0 1
7918: ST_TO_ADDR
// uc_nation = nation ;
7919: LD_ADDR_OWVAR 21
7923: PUSH
7924: LD_VAR 0 2
7928: ST_TO_ADDR
// hc_name =  ;
7929: LD_ADDR_OWVAR 26
7933: PUSH
7934: LD_STRING 
7936: ST_TO_ADDR
// hc_gallery =  ;
7937: LD_ADDR_OWVAR 33
7941: PUSH
7942: LD_STRING 
7944: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7945: LD_INT 0
7947: PPUSH
7948: LD_INT 5
7950: PPUSH
7951: LD_VAR 0 8
7955: PPUSH
7956: CALL_OW 380
// un = CreateHuman ;
7960: LD_ADDR_VAR 0 16
7964: PUSH
7965: CALL_OW 44
7969: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7970: LD_VAR 0 16
7974: PPUSH
7975: LD_VAR 0 9
7979: PPUSH
7980: LD_INT 0
7982: PPUSH
7983: CALL_OW 49
// end ;
7987: GO 7906
7989: POP
7990: POP
// for i = 1 to bazookCount do
7991: LD_ADDR_VAR 0 14
7995: PUSH
7996: DOUBLE
7997: LD_INT 1
7999: DEC
8000: ST_TO_ADDR
8001: LD_VAR 0 5
8005: PUSH
8006: FOR_TO
8007: IFFALSE 8089
// begin uc_side = side ;
8009: LD_ADDR_OWVAR 20
8013: PUSH
8014: LD_VAR 0 1
8018: ST_TO_ADDR
// uc_nation = nation ;
8019: LD_ADDR_OWVAR 21
8023: PUSH
8024: LD_VAR 0 2
8028: ST_TO_ADDR
// hc_name =  ;
8029: LD_ADDR_OWVAR 26
8033: PUSH
8034: LD_STRING 
8036: ST_TO_ADDR
// hc_gallery =  ;
8037: LD_ADDR_OWVAR 33
8041: PUSH
8042: LD_STRING 
8044: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8045: LD_INT 0
8047: PPUSH
8048: LD_INT 9
8050: PPUSH
8051: LD_VAR 0 8
8055: PPUSH
8056: CALL_OW 380
// un = CreateHuman ;
8060: LD_ADDR_VAR 0 16
8064: PUSH
8065: CALL_OW 44
8069: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8070: LD_VAR 0 16
8074: PPUSH
8075: LD_VAR 0 9
8079: PPUSH
8080: LD_INT 0
8082: PPUSH
8083: CALL_OW 49
// end ;
8087: GO 8006
8089: POP
8090: POP
// for i = 1 to mortalCount do
8091: LD_ADDR_VAR 0 14
8095: PUSH
8096: DOUBLE
8097: LD_INT 1
8099: DEC
8100: ST_TO_ADDR
8101: LD_VAR 0 6
8105: PUSH
8106: FOR_TO
8107: IFFALSE 8189
// begin uc_side = side ;
8109: LD_ADDR_OWVAR 20
8113: PUSH
8114: LD_VAR 0 1
8118: ST_TO_ADDR
// uc_nation = nation ;
8119: LD_ADDR_OWVAR 21
8123: PUSH
8124: LD_VAR 0 2
8128: ST_TO_ADDR
// hc_name =  ;
8129: LD_ADDR_OWVAR 26
8133: PUSH
8134: LD_STRING 
8136: ST_TO_ADDR
// hc_gallery =  ;
8137: LD_ADDR_OWVAR 33
8141: PUSH
8142: LD_STRING 
8144: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8145: LD_INT 0
8147: PPUSH
8148: LD_INT 8
8150: PPUSH
8151: LD_VAR 0 8
8155: PPUSH
8156: CALL_OW 380
// un = CreateHuman ;
8160: LD_ADDR_VAR 0 16
8164: PUSH
8165: CALL_OW 44
8169: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8170: LD_VAR 0 16
8174: PPUSH
8175: LD_VAR 0 9
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 49
// end ;
8187: GO 8106
8189: POP
8190: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8191: LD_ADDR_VAR 0 19
8195: PUSH
8196: LD_INT 22
8198: PUSH
8199: LD_VAR 0 1
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_INT 2
8210: PUSH
8211: LD_INT 25
8213: PUSH
8214: LD_INT 1
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 25
8223: PUSH
8224: LD_INT 5
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 25
8233: PUSH
8234: LD_INT 8
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 25
8243: PUSH
8244: LD_INT 9
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8267: LD_ADDR_VAR 0 18
8271: PUSH
8272: LD_INT 22
8274: PUSH
8275: LD_VAR 0 1
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 25
8286: PUSH
8287: LD_INT 4
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PPUSH
8298: CALL_OW 69
8302: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8303: LD_VAR 0 18
8307: PPUSH
8308: LD_VAR 0 10
8312: PPUSH
8313: CALL_OW 113
// if strategy = 1 then
8317: LD_VAR 0 12
8321: PUSH
8322: LD_INT 1
8324: EQUAL
8325: IFFALSE 8841
// begin repeat wait ( 0 0$3 ) ;
8327: LD_INT 105
8329: PPUSH
8330: CALL_OW 67
// for i in soldiersOK_list do
8334: LD_ADDR_VAR 0 14
8338: PUSH
8339: LD_VAR 0 19
8343: PUSH
8344: FOR_IN
8345: IFFALSE 8409
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8347: LD_VAR 0 14
8351: PPUSH
8352: LD_INT 91
8354: PPUSH
8355: LD_INT 63
8357: PPUSH
8358: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8362: LD_VAR 0 14
8366: PPUSH
8367: LD_INT 101
8369: PPUSH
8370: LD_INT 53
8372: PPUSH
8373: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8377: LD_VAR 0 14
8381: PPUSH
8382: LD_INT 75
8384: PPUSH
8385: LD_INT 23
8387: PPUSH
8388: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8392: LD_VAR 0 14
8396: PPUSH
8397: LD_INT 78
8399: PPUSH
8400: LD_INT 8
8402: PPUSH
8403: CALL_OW 174
// end ;
8407: GO 8344
8409: POP
8410: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8411: LD_INT 15
8413: PPUSH
8414: LD_INT 22
8416: PUSH
8417: LD_VAR 0 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PPUSH
8426: CALL_OW 70
8430: PUSH
8431: LD_INT 2
8433: GREATER
8434: IFFALSE 8327
// repeat wait ( 0 0$1 ) ;
8436: LD_INT 35
8438: PPUSH
8439: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8443: LD_ADDR_VAR 0 17
8447: PUSH
8448: LD_INT 22
8450: PUSH
8451: LD_VAR 0 1
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 1
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: LD_INT 24
8468: PUSH
8469: LD_INT 550
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 24
8482: PUSH
8483: LD_INT 250
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 69
8503: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8504: LD_ADDR_VAR 0 19
8508: PUSH
8509: LD_INT 22
8511: PUSH
8512: LD_VAR 0 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 2
8523: PUSH
8524: LD_INT 25
8526: PUSH
8527: LD_INT 1
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 25
8536: PUSH
8537: LD_INT 5
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 25
8546: PUSH
8547: LD_INT 8
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: LD_INT 25
8556: PUSH
8557: LD_INT 9
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 24
8573: PUSH
8574: LD_INT 1000
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: ST_TO_ADDR
// if medicCount > 0 then
8591: LD_VAR 0 7
8595: PUSH
8596: LD_INT 0
8598: GREATER
8599: IFFALSE 8643
// begin if damageUnit_list > 0 then
8601: LD_VAR 0 17
8605: PUSH
8606: LD_INT 0
8608: GREATER
8609: IFFALSE 8643
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8611: LD_VAR 0 17
8615: PPUSH
8616: LD_VAR 0 10
8620: PPUSH
8621: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8625: LD_VAR 0 7
8629: PPUSH
8630: LD_VAR 0 17
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8643: LD_ADDR_VAR 0 14
8647: PUSH
8648: LD_VAR 0 19
8652: PUSH
8653: FOR_IN
8654: IFFALSE 8830
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8656: LD_ADDR_VAR 0 22
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_VAR 0 11
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PPUSH
8673: CALL_OW 69
8677: PPUSH
8678: LD_VAR 0 14
8682: PPUSH
8683: CALL_OW 74
8687: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8688: LD_ADDR_VAR 0 23
8692: PUSH
8693: LD_INT 22
8695: PUSH
8696: LD_VAR 0 11
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: LD_INT 2
8707: PUSH
8708: LD_INT 59
8710: PUSH
8711: EMPTY
8712: LIST
8713: PUSH
8714: LD_INT 21
8716: PUSH
8717: LD_INT 1
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 21
8726: PUSH
8727: LD_INT 2
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: PPUSH
8747: CALL_OW 69
8751: PPUSH
8752: LD_VAR 0 14
8756: PPUSH
8757: CALL_OW 74
8761: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8762: LD_VAR 0 14
8766: PPUSH
8767: LD_VAR 0 22
8771: PPUSH
8772: CALL_OW 296
8776: PUSH
8777: LD_INT 8
8779: PLUS
8780: PUSH
8781: LD_VAR 0 14
8785: PPUSH
8786: LD_VAR 0 23
8790: PPUSH
8791: CALL_OW 296
8795: LESS
8796: IFFALSE 8814
// begin ComAttackUnit ( i , target1 ) ;
8798: LD_VAR 0 14
8802: PPUSH
8803: LD_VAR 0 22
8807: PPUSH
8808: CALL_OW 115
// end else
8812: GO 8828
// begin ComAttackUnit ( i , target2 ) ;
8814: LD_VAR 0 14
8818: PPUSH
8819: LD_VAR 0 23
8823: PPUSH
8824: CALL_OW 115
// end ; end ;
8828: GO 8653
8830: POP
8831: POP
// until soldiersOK_list = [ ] ;
8832: LD_VAR 0 19
8836: PUSH
8837: EMPTY
8838: EQUAL
8839: IFFALSE 8436
// end ; if strategy = 2 then
8841: LD_VAR 0 12
8845: PUSH
8846: LD_INT 2
8848: EQUAL
8849: IFFALSE 9335
// begin repeat wait ( 0 0$1 ) ;
8851: LD_INT 35
8853: PPUSH
8854: CALL_OW 67
// for i in soldiersOK_list do
8858: LD_ADDR_VAR 0 14
8862: PUSH
8863: LD_VAR 0 19
8867: PUSH
8868: FOR_IN
8869: IFFALSE 8903
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8871: LD_VAR 0 14
8875: PPUSH
8876: LD_INT 91
8878: PPUSH
8879: LD_INT 63
8881: PPUSH
8882: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8886: LD_VAR 0 14
8890: PPUSH
8891: LD_INT 75
8893: PPUSH
8894: LD_INT 33
8896: PPUSH
8897: CALL_OW 174
// end ;
8901: GO 8868
8903: POP
8904: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8905: LD_INT 16
8907: PPUSH
8908: LD_INT 22
8910: PUSH
8911: LD_VAR 0 1
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 70
8924: PUSH
8925: LD_INT 2
8927: GREATER
8928: IFFALSE 8851
// repeat wait ( 0 0$3 ) ;
8930: LD_INT 105
8932: PPUSH
8933: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8937: LD_ADDR_VAR 0 17
8941: PUSH
8942: LD_INT 22
8944: PUSH
8945: LD_VAR 0 1
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 1
8956: PUSH
8957: LD_INT 3
8959: PUSH
8960: LD_INT 24
8962: PUSH
8963: LD_INT 550
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 24
8976: PUSH
8977: LD_INT 250
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PPUSH
8993: CALL_OW 69
8997: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8998: LD_ADDR_VAR 0 19
9002: PUSH
9003: LD_INT 22
9005: PUSH
9006: LD_VAR 0 1
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 2
9017: PUSH
9018: LD_INT 25
9020: PUSH
9021: LD_INT 1
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 25
9030: PUSH
9031: LD_INT 5
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 25
9040: PUSH
9041: LD_INT 8
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 25
9050: PUSH
9051: LD_INT 9
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 24
9067: PUSH
9068: LD_INT 1000
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: PPUSH
9080: CALL_OW 69
9084: ST_TO_ADDR
// if medicCount > 0 then
9085: LD_VAR 0 7
9089: PUSH
9090: LD_INT 0
9092: GREATER
9093: IFFALSE 9137
// begin if damageUnit_list > 0 then
9095: LD_VAR 0 17
9099: PUSH
9100: LD_INT 0
9102: GREATER
9103: IFFALSE 9137
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9105: LD_VAR 0 17
9109: PPUSH
9110: LD_VAR 0 10
9114: PPUSH
9115: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9119: LD_VAR 0 7
9123: PPUSH
9124: LD_VAR 0 17
9128: PUSH
9129: LD_INT 1
9131: ARRAY
9132: PPUSH
9133: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9137: LD_ADDR_VAR 0 14
9141: PUSH
9142: LD_VAR 0 19
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9324
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9150: LD_ADDR_VAR 0 22
9154: PUSH
9155: LD_INT 22
9157: PUSH
9158: LD_VAR 0 11
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PPUSH
9167: CALL_OW 69
9171: PPUSH
9172: LD_VAR 0 14
9176: PPUSH
9177: CALL_OW 74
9181: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9182: LD_ADDR_VAR 0 23
9186: PUSH
9187: LD_INT 22
9189: PUSH
9190: LD_VAR 0 11
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 2
9201: PUSH
9202: LD_INT 59
9204: PUSH
9205: EMPTY
9206: LIST
9207: PUSH
9208: LD_INT 21
9210: PUSH
9211: LD_INT 1
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 21
9220: PUSH
9221: LD_INT 2
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PUSH
9238: EMPTY
9239: LIST
9240: PPUSH
9241: CALL_OW 69
9245: PPUSH
9246: LD_VAR 0 14
9250: PPUSH
9251: CALL_OW 74
9255: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9256: LD_VAR 0 14
9260: PPUSH
9261: LD_VAR 0 22
9265: PPUSH
9266: CALL_OW 296
9270: PUSH
9271: LD_INT 8
9273: PLUS
9274: PUSH
9275: LD_VAR 0 14
9279: PPUSH
9280: LD_VAR 0 23
9284: PPUSH
9285: CALL_OW 296
9289: LESS
9290: IFFALSE 9308
// begin ComAttackUnit ( i , target1 ) ;
9292: LD_VAR 0 14
9296: PPUSH
9297: LD_VAR 0 22
9301: PPUSH
9302: CALL_OW 115
// end else
9306: GO 9322
// begin ComAttackUnit ( i , target2 ) ;
9308: LD_VAR 0 14
9312: PPUSH
9313: LD_VAR 0 23
9317: PPUSH
9318: CALL_OW 115
// end ; end ;
9322: GO 9147
9324: POP
9325: POP
// until soldiersOK_list = [ ] ;
9326: LD_VAR 0 19
9330: PUSH
9331: EMPTY
9332: EQUAL
9333: IFFALSE 8930
// end ; if not soldiersOK_list and medic_list then
9335: LD_VAR 0 19
9339: NOT
9340: PUSH
9341: LD_VAR 0 18
9345: AND
9346: IFFALSE 9486
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9348: LD_ADDR_VAR 0 18
9352: PUSH
9353: LD_INT 22
9355: PUSH
9356: LD_VAR 0 1
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: LD_INT 25
9367: PUSH
9368: LD_INT 4
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 50
9377: PUSH
9378: EMPTY
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: PPUSH
9386: CALL_OW 69
9390: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9391: LD_INT 35
9393: PPUSH
9394: CALL_OW 67
// for i in medic_list do
9398: LD_ADDR_VAR 0 14
9402: PUSH
9403: LD_VAR 0 18
9407: PUSH
9408: FOR_IN
9409: IFFALSE 9477
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9411: LD_VAR 0 14
9415: PPUSH
9416: CALL_OW 314
9420: NOT
9421: PUSH
9422: LD_VAR 0 14
9426: PPUSH
9427: LD_INT 4
9429: PPUSH
9430: CALL_OW 308
9434: NOT
9435: AND
9436: IFFALSE 9452
// ComMoveToArea ( i , RussianAttack ) else
9438: LD_VAR 0 14
9442: PPUSH
9443: LD_INT 4
9445: PPUSH
9446: CALL_OW 113
9450: GO 9475
// if IsInArea ( i , RussianAttack ) then
9452: LD_VAR 0 14
9456: PPUSH
9457: LD_INT 4
9459: PPUSH
9460: CALL_OW 308
9464: IFFALSE 9475
// RemoveUnit ( i ) ;
9466: LD_VAR 0 14
9470: PPUSH
9471: CALL_OW 64
9475: GO 9408
9477: POP
9478: POP
// until not medic_list ;
9479: LD_VAR 0 18
9483: NOT
9484: IFFALSE 9348
// end ; end ;
9486: LD_VAR 0 13
9490: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9491: LD_INT 0
9493: PPUSH
9494: PPUSH
9495: PPUSH
9496: PPUSH
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
9502: PPUSH
9503: PPUSH
// amChassisTab = [ ] ;
9504: LD_ADDR_VAR 0 19
9508: PUSH
9509: EMPTY
9510: ST_TO_ADDR
// arChassisTab = [ ] ;
9511: LD_ADDR_VAR 0 18
9515: PUSH
9516: EMPTY
9517: ST_TO_ADDR
// ruChassisTab = [ ] ;
9518: LD_ADDR_VAR 0 17
9522: PUSH
9523: EMPTY
9524: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9525: LD_INT 35
9527: PPUSH
9528: CALL_OW 67
// if nation = 1 then
9532: LD_VAR 0 5
9536: PUSH
9537: LD_INT 1
9539: EQUAL
9540: IFFALSE 10031
// begin uc_side = side ;
9542: LD_ADDR_OWVAR 20
9546: PUSH
9547: LD_VAR 0 2
9551: ST_TO_ADDR
// uc_nation = nation ;
9552: LD_ADDR_OWVAR 21
9556: PUSH
9557: LD_VAR 0 5
9561: ST_TO_ADDR
// vc_engine = vehengine ;
9562: LD_ADDR_OWVAR 39
9566: PUSH
9567: LD_VAR 0 6
9571: ST_TO_ADDR
// vc_control = vehcontrol ;
9572: LD_ADDR_OWVAR 38
9576: PUSH
9577: LD_VAR 0 7
9581: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9582: LD_ADDR_OWVAR 40
9586: PUSH
9587: LD_VAR 0 10
9591: PUSH
9592: LD_INT 1
9594: PPUSH
9595: LD_VAR 0 10
9599: PPUSH
9600: CALL_OW 12
9604: ARRAY
9605: ST_TO_ADDR
// for j = 1 to AMWeapon do
9606: LD_ADDR_VAR 0 14
9610: PUSH
9611: DOUBLE
9612: LD_INT 1
9614: DEC
9615: ST_TO_ADDR
9616: LD_VAR 0 10
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9923
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9624: LD_VAR 0 10
9628: PUSH
9629: LD_VAR 0 14
9633: ARRAY
9634: PUSH
9635: LD_INT 2
9637: EQUAL
9638: PUSH
9639: LD_VAR 0 10
9643: PUSH
9644: LD_VAR 0 14
9648: ARRAY
9649: PUSH
9650: LD_INT 3
9652: EQUAL
9653: OR
9654: IFFALSE 9707
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9656: LD_ADDR_VAR 0 19
9660: PUSH
9661: LD_INT 1
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 3
9669: PUSH
9670: LD_INT 4
9672: PUSH
9673: LD_INT 5
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9683: LD_ADDR_OWVAR 37
9687: PUSH
9688: LD_VAR 0 19
9692: PUSH
9693: LD_INT 1
9695: PPUSH
9696: LD_VAR 0 19
9700: PPUSH
9701: CALL_OW 12
9705: ARRAY
9706: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9707: LD_VAR 0 10
9711: PUSH
9712: LD_VAR 0 14
9716: ARRAY
9717: PUSH
9718: LD_INT 4
9720: EQUAL
9721: PUSH
9722: LD_VAR 0 10
9726: PUSH
9727: LD_VAR 0 14
9731: ARRAY
9732: PUSH
9733: LD_INT 5
9735: EQUAL
9736: OR
9737: PUSH
9738: LD_VAR 0 10
9742: PUSH
9743: LD_VAR 0 14
9747: ARRAY
9748: PUSH
9749: LD_INT 9
9751: EQUAL
9752: OR
9753: PUSH
9754: LD_VAR 0 10
9758: PUSH
9759: LD_VAR 0 14
9763: ARRAY
9764: PUSH
9765: LD_INT 11
9767: EQUAL
9768: OR
9769: PUSH
9770: LD_VAR 0 10
9774: PUSH
9775: LD_VAR 0 14
9779: ARRAY
9780: PUSH
9781: LD_INT 7
9783: EQUAL
9784: OR
9785: IFFALSE 9834
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9787: LD_ADDR_VAR 0 19
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: LD_INT 3
9797: PUSH
9798: LD_INT 4
9800: PUSH
9801: LD_INT 5
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9810: LD_ADDR_OWVAR 37
9814: PUSH
9815: LD_VAR 0 19
9819: PUSH
9820: LD_INT 1
9822: PPUSH
9823: LD_VAR 0 19
9827: PPUSH
9828: CALL_OW 12
9832: ARRAY
9833: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9834: LD_VAR 0 10
9838: PUSH
9839: LD_VAR 0 14
9843: ARRAY
9844: PUSH
9845: LD_INT 8
9847: EQUAL
9848: PUSH
9849: LD_VAR 0 10
9853: PUSH
9854: LD_VAR 0 14
9858: ARRAY
9859: PUSH
9860: LD_INT 6
9862: EQUAL
9863: OR
9864: PUSH
9865: LD_VAR 0 10
9869: PUSH
9870: LD_VAR 0 14
9874: ARRAY
9875: PUSH
9876: LD_INT 10
9878: EQUAL
9879: OR
9880: IFFALSE 9921
// begin amChassisTab = [ 4 , 5 ] ;
9882: LD_ADDR_VAR 0 19
9886: PUSH
9887: LD_INT 4
9889: PUSH
9890: LD_INT 5
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9897: LD_ADDR_OWVAR 37
9901: PUSH
9902: LD_VAR 0 19
9906: PUSH
9907: LD_INT 1
9909: PPUSH
9910: LD_VAR 0 19
9914: PPUSH
9915: CALL_OW 12
9919: ARRAY
9920: ST_TO_ADDR
// end ; end ;
9921: GO 9621
9923: POP
9924: POP
// veh = CreateVehicle ;
9925: LD_ADDR_VAR 0 16
9929: PUSH
9930: CALL_OW 45
9934: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9935: LD_VAR 0 16
9939: PPUSH
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_INT 0
9947: PPUSH
9948: CALL_OW 49
// if vehControl = 1 then
9952: LD_VAR 0 7
9956: PUSH
9957: LD_INT 1
9959: EQUAL
9960: IFFALSE 10017
// begin hc_gallery =  ;
9962: LD_ADDR_OWVAR 33
9966: PUSH
9967: LD_STRING 
9969: ST_TO_ADDR
// hc_name =  ;
9970: LD_ADDR_OWVAR 26
9974: PUSH
9975: LD_STRING 
9977: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9978: LD_INT 0
9980: PPUSH
9981: LD_INT 3
9983: PPUSH
9984: LD_VAR 0 4
9988: PPUSH
9989: CALL_OW 380
// un = CreateHuman ;
9993: LD_ADDR_VAR 0 15
9997: PUSH
9998: CALL_OW 44
10002: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10003: LD_VAR 0 15
10007: PPUSH
10008: LD_VAR 0 16
10012: PPUSH
10013: CALL_OW 52
// end ; i = i + 1 ;
10017: LD_ADDR_VAR 0 13
10021: PUSH
10022: LD_VAR 0 13
10026: PUSH
10027: LD_INT 1
10029: PLUS
10030: ST_TO_ADDR
// end ; if nation = 2 then
10031: LD_VAR 0 5
10035: PUSH
10036: LD_INT 2
10038: EQUAL
10039: IFFALSE 10463
// begin uc_side = side ;
10041: LD_ADDR_OWVAR 20
10045: PUSH
10046: LD_VAR 0 2
10050: ST_TO_ADDR
// uc_nation = nation ;
10051: LD_ADDR_OWVAR 21
10055: PUSH
10056: LD_VAR 0 5
10060: ST_TO_ADDR
// vc_engine = vehengine ;
10061: LD_ADDR_OWVAR 39
10065: PUSH
10066: LD_VAR 0 6
10070: ST_TO_ADDR
// vc_control = vehcontrol ;
10071: LD_ADDR_OWVAR 38
10075: PUSH
10076: LD_VAR 0 7
10080: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10081: LD_ADDR_OWVAR 40
10085: PUSH
10086: LD_VAR 0 9
10090: PUSH
10091: LD_INT 1
10093: PPUSH
10094: LD_VAR 0 9
10098: PPUSH
10099: CALL_OW 12
10103: ARRAY
10104: ST_TO_ADDR
// for j = 1 to ARWeapons do
10105: LD_ADDR_VAR 0 14
10109: PUSH
10110: DOUBLE
10111: LD_INT 1
10113: DEC
10114: ST_TO_ADDR
10115: LD_VAR 0 9
10119: PUSH
10120: FOR_TO
10121: IFFALSE 10355
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10123: LD_VAR 0 9
10127: PUSH
10128: LD_VAR 0 14
10132: ARRAY
10133: PUSH
10134: LD_INT 24
10136: EQUAL
10137: PUSH
10138: LD_VAR 0 9
10142: PUSH
10143: LD_VAR 0 14
10147: ARRAY
10148: PUSH
10149: LD_INT 22
10151: EQUAL
10152: OR
10153: PUSH
10154: LD_VAR 0 9
10158: PUSH
10159: LD_VAR 0 14
10163: ARRAY
10164: PUSH
10165: LD_INT 23
10167: EQUAL
10168: OR
10169: PUSH
10170: LD_VAR 0 9
10174: PUSH
10175: LD_VAR 0 14
10179: ARRAY
10180: PUSH
10181: LD_INT 30
10183: EQUAL
10184: OR
10185: IFFALSE 10234
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10187: LD_ADDR_VAR 0 18
10191: PUSH
10192: LD_INT 11
10194: PUSH
10195: LD_INT 12
10197: PUSH
10198: LD_INT 13
10200: PUSH
10201: LD_INT 14
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10210: LD_ADDR_OWVAR 37
10214: PUSH
10215: LD_VAR 0 18
10219: PUSH
10220: LD_INT 1
10222: PPUSH
10223: LD_VAR 0 18
10227: PPUSH
10228: CALL_OW 12
10232: ARRAY
10233: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10234: LD_VAR 0 9
10238: PUSH
10239: LD_VAR 0 14
10243: ARRAY
10244: PUSH
10245: LD_INT 29
10247: EQUAL
10248: PUSH
10249: LD_VAR 0 9
10253: PUSH
10254: LD_VAR 0 14
10258: ARRAY
10259: PUSH
10260: LD_INT 28
10262: EQUAL
10263: OR
10264: PUSH
10265: LD_VAR 0 9
10269: PUSH
10270: LD_VAR 0 14
10274: ARRAY
10275: PUSH
10276: LD_INT 27
10278: EQUAL
10279: OR
10280: PUSH
10281: LD_VAR 0 9
10285: PUSH
10286: LD_VAR 0 14
10290: ARRAY
10291: PUSH
10292: LD_INT 26
10294: EQUAL
10295: OR
10296: PUSH
10297: LD_VAR 0 9
10301: PUSH
10302: LD_VAR 0 14
10306: ARRAY
10307: PUSH
10308: LD_INT 25
10310: EQUAL
10311: OR
10312: IFFALSE 10353
// begin arChassisTab = [ 13 , 14 ] ;
10314: LD_ADDR_VAR 0 18
10318: PUSH
10319: LD_INT 13
10321: PUSH
10322: LD_INT 14
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10329: LD_ADDR_OWVAR 37
10333: PUSH
10334: LD_VAR 0 18
10338: PUSH
10339: LD_INT 1
10341: PPUSH
10342: LD_VAR 0 18
10346: PPUSH
10347: CALL_OW 12
10351: ARRAY
10352: ST_TO_ADDR
// end ; end ;
10353: GO 10120
10355: POP
10356: POP
// veh = CreateVehicle ;
10357: LD_ADDR_VAR 0 16
10361: PUSH
10362: CALL_OW 45
10366: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10367: LD_VAR 0 16
10371: PPUSH
10372: LD_VAR 0 1
10376: PPUSH
10377: LD_INT 0
10379: PPUSH
10380: CALL_OW 49
// if vehcontrol = 1 then
10384: LD_VAR 0 7
10388: PUSH
10389: LD_INT 1
10391: EQUAL
10392: IFFALSE 10449
// begin hc_gallery =  ;
10394: LD_ADDR_OWVAR 33
10398: PUSH
10399: LD_STRING 
10401: ST_TO_ADDR
// hc_name =  ;
10402: LD_ADDR_OWVAR 26
10406: PUSH
10407: LD_STRING 
10409: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10410: LD_INT 0
10412: PPUSH
10413: LD_INT 3
10415: PPUSH
10416: LD_VAR 0 4
10420: PPUSH
10421: CALL_OW 380
// un = CreateHuman ;
10425: LD_ADDR_VAR 0 15
10429: PUSH
10430: CALL_OW 44
10434: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10435: LD_VAR 0 15
10439: PPUSH
10440: LD_VAR 0 16
10444: PPUSH
10445: CALL_OW 52
// end ; i = i + 1 ;
10449: LD_ADDR_VAR 0 13
10453: PUSH
10454: LD_VAR 0 13
10458: PUSH
10459: LD_INT 1
10461: PLUS
10462: ST_TO_ADDR
// end ; if nation = 3 then
10463: LD_VAR 0 5
10467: PUSH
10468: LD_INT 3
10470: EQUAL
10471: IFFALSE 10863
// begin uc_side = side ;
10473: LD_ADDR_OWVAR 20
10477: PUSH
10478: LD_VAR 0 2
10482: ST_TO_ADDR
// uc_nation = nation ;
10483: LD_ADDR_OWVAR 21
10487: PUSH
10488: LD_VAR 0 5
10492: ST_TO_ADDR
// vc_engine = vehengine ;
10493: LD_ADDR_OWVAR 39
10497: PUSH
10498: LD_VAR 0 6
10502: ST_TO_ADDR
// vc_control = vehcontrol ;
10503: LD_ADDR_OWVAR 38
10507: PUSH
10508: LD_VAR 0 7
10512: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10513: LD_ADDR_OWVAR 40
10517: PUSH
10518: LD_VAR 0 8
10522: PUSH
10523: LD_INT 1
10525: PPUSH
10526: LD_VAR 0 8
10530: PPUSH
10531: CALL_OW 12
10535: ARRAY
10536: ST_TO_ADDR
// for j = 1 to RuWeapons do
10537: LD_ADDR_VAR 0 14
10541: PUSH
10542: DOUBLE
10543: LD_INT 1
10545: DEC
10546: ST_TO_ADDR
10547: LD_VAR 0 8
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10755
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10555: LD_VAR 0 8
10559: PUSH
10560: LD_VAR 0 14
10564: ARRAY
10565: PUSH
10566: LD_INT 42
10568: EQUAL
10569: PUSH
10570: LD_VAR 0 8
10574: PUSH
10575: LD_VAR 0 14
10579: ARRAY
10580: PUSH
10581: LD_INT 43
10583: EQUAL
10584: OR
10585: PUSH
10586: LD_VAR 0 8
10590: PUSH
10591: LD_VAR 0 14
10595: ARRAY
10596: PUSH
10597: LD_INT 44
10599: EQUAL
10600: OR
10601: PUSH
10602: LD_VAR 0 8
10606: PUSH
10607: LD_VAR 0 14
10611: ARRAY
10612: PUSH
10613: LD_INT 45
10615: EQUAL
10616: OR
10617: PUSH
10618: LD_VAR 0 8
10622: PUSH
10623: LD_VAR 0 14
10627: ARRAY
10628: PUSH
10629: LD_INT 49
10631: EQUAL
10632: OR
10633: IFFALSE 10682
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10635: LD_ADDR_VAR 0 17
10639: PUSH
10640: LD_INT 21
10642: PUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 23
10648: PUSH
10649: LD_INT 24
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10658: LD_ADDR_OWVAR 37
10662: PUSH
10663: LD_VAR 0 17
10667: PUSH
10668: LD_INT 1
10670: PPUSH
10671: LD_VAR 0 17
10675: PPUSH
10676: CALL_OW 12
10680: ARRAY
10681: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10682: LD_VAR 0 8
10686: PUSH
10687: LD_VAR 0 14
10691: ARRAY
10692: PUSH
10693: LD_INT 46
10695: EQUAL
10696: PUSH
10697: LD_VAR 0 8
10701: PUSH
10702: LD_VAR 0 14
10706: ARRAY
10707: PUSH
10708: LD_INT 47
10710: EQUAL
10711: OR
10712: IFFALSE 10753
// begin ruChassisTab = [ 23 , 24 ] ;
10714: LD_ADDR_VAR 0 17
10718: PUSH
10719: LD_INT 23
10721: PUSH
10722: LD_INT 24
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10729: LD_ADDR_OWVAR 37
10733: PUSH
10734: LD_VAR 0 17
10738: PUSH
10739: LD_INT 1
10741: PPUSH
10742: LD_VAR 0 17
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// end ; end ;
10753: GO 10552
10755: POP
10756: POP
// veh = CreateVehicle ;
10757: LD_ADDR_VAR 0 16
10761: PUSH
10762: CALL_OW 45
10766: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10767: LD_VAR 0 16
10771: PPUSH
10772: LD_VAR 0 1
10776: PPUSH
10777: LD_INT 0
10779: PPUSH
10780: CALL_OW 49
// if vehcontrol = 1 then
10784: LD_VAR 0 7
10788: PUSH
10789: LD_INT 1
10791: EQUAL
10792: IFFALSE 10849
// begin hc_gallery =  ;
10794: LD_ADDR_OWVAR 33
10798: PUSH
10799: LD_STRING 
10801: ST_TO_ADDR
// hc_name =  ;
10802: LD_ADDR_OWVAR 26
10806: PUSH
10807: LD_STRING 
10809: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10810: LD_INT 0
10812: PPUSH
10813: LD_INT 3
10815: PPUSH
10816: LD_VAR 0 4
10820: PPUSH
10821: CALL_OW 380
// un = CreateHuman ;
10825: LD_ADDR_VAR 0 15
10829: PUSH
10830: CALL_OW 44
10834: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10835: LD_VAR 0 15
10839: PPUSH
10840: LD_VAR 0 16
10844: PPUSH
10845: CALL_OW 52
// end ; i = i + 1 ;
10849: LD_ADDR_VAR 0 13
10853: PUSH
10854: LD_VAR 0 13
10858: PUSH
10859: LD_INT 1
10861: PLUS
10862: ST_TO_ADDR
// end ; until i = vehCount ;
10863: LD_VAR 0 13
10867: PUSH
10868: LD_VAR 0 3
10872: EQUAL
10873: IFFALSE 9525
// repeat wait ( 0 0$1 ) ;
10875: LD_INT 35
10877: PPUSH
10878: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10882: LD_INT 22
10884: PUSH
10885: LD_VAR 0 2
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 21
10896: PUSH
10897: LD_INT 2
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 24
10906: PUSH
10907: LD_INT 250
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 3
10916: PUSH
10917: LD_INT 58
10919: PUSH
10920: EMPTY
10921: LIST
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PPUSH
10933: CALL_OW 69
10937: PUSH
10938: LD_INT 0
10940: GREATER
10941: IFFALSE 11183
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10943: LD_ADDR_VAR 0 13
10947: PUSH
10948: LD_INT 22
10950: PUSH
10951: LD_VAR 0 2
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 21
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 24
10972: PUSH
10973: LD_INT 250
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 3
10982: PUSH
10983: LD_INT 58
10985: PUSH
10986: EMPTY
10987: LIST
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 69
11003: PUSH
11004: FOR_IN
11005: IFFALSE 11181
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11007: LD_ADDR_VAR 0 21
11011: PUSH
11012: LD_INT 22
11014: PUSH
11015: LD_VAR 0 11
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PPUSH
11024: CALL_OW 69
11028: PPUSH
11029: LD_VAR 0 13
11033: PPUSH
11034: CALL_OW 74
11038: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11039: LD_ADDR_VAR 0 22
11043: PUSH
11044: LD_INT 22
11046: PUSH
11047: LD_VAR 0 11
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: LD_INT 59
11061: PUSH
11062: EMPTY
11063: LIST
11064: PUSH
11065: LD_INT 21
11067: PUSH
11068: LD_INT 1
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 21
11077: PUSH
11078: LD_INT 2
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: PPUSH
11098: CALL_OW 69
11102: PPUSH
11103: LD_VAR 0 13
11107: PPUSH
11108: CALL_OW 74
11112: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11113: LD_VAR 0 13
11117: PPUSH
11118: LD_VAR 0 21
11122: PPUSH
11123: CALL_OW 296
11127: PUSH
11128: LD_INT 8
11130: PLUS
11131: PUSH
11132: LD_VAR 0 13
11136: PPUSH
11137: LD_VAR 0 22
11141: PPUSH
11142: CALL_OW 296
11146: LESS
11147: IFFALSE 11165
// begin ComAttackUnit ( i , target1 ) ;
11149: LD_VAR 0 13
11153: PPUSH
11154: LD_VAR 0 21
11158: PPUSH
11159: CALL_OW 115
// end else
11163: GO 11179
// begin ComAttackUnit ( i , target2 ) ;
11165: LD_VAR 0 13
11169: PPUSH
11170: LD_VAR 0 22
11174: PPUSH
11175: CALL_OW 115
// end ; end ;
11179: GO 11004
11181: POP
11182: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11183: LD_INT 22
11185: PUSH
11186: LD_VAR 0 2
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 21
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 24
11207: PUSH
11208: LD_INT 250
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: LD_INT 58
11220: PUSH
11221: EMPTY
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PPUSH
11234: CALL_OW 69
11238: PUSH
11239: LD_INT 0
11241: EQUAL
11242: IFFALSE 10875
// end ; end_of_file
11244: LD_VAR 0 12
11248: RET
// every 1 do var i , gammaSquad , startX , startY ;
11249: GO 11251
11251: DISABLE
11252: LD_INT 0
11254: PPUSH
11255: PPUSH
11256: PPUSH
11257: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11258: LD_ADDR_VAR 0 2
11262: PUSH
11263: LD_EXP 8
11267: PUSH
11268: LD_EXP 9
11272: PUSH
11273: LD_EXP 10
11277: PUSH
11278: LD_EXP 11
11282: PUSH
11283: LD_EXP 12
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11295: LD_ADDR_VAR 0 3
11299: PUSH
11300: LD_INT 46
11302: PUSH
11303: LD_INT 45
11305: PUSH
11306: LD_INT 44
11308: PUSH
11309: LD_INT 43
11311: PUSH
11312: LD_INT 42
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11322: LD_ADDR_VAR 0 4
11326: PUSH
11327: LD_INT 14
11329: PUSH
11330: LD_INT 12
11332: PUSH
11333: LD_INT 10
11335: PUSH
11336: LD_INT 8
11338: PUSH
11339: LD_INT 6
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11349: LD_INT 32
11351: PPUSH
11352: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11356: LD_INT 32
11358: PPUSH
11359: LD_INT 51
11361: PPUSH
11362: LD_INT 26
11364: PPUSH
11365: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11369: LD_INT 32
11371: PPUSH
11372: LD_INT 53
11374: PPUSH
11375: LD_INT 23
11377: PPUSH
11378: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11382: LD_INT 32
11384: PPUSH
11385: LD_INT 52
11387: PPUSH
11388: LD_INT 19
11390: PPUSH
11391: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11395: LD_INT 35
11397: PPUSH
11398: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11402: LD_INT 32
11404: PPUSH
11405: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11409: LD_INT 32
11411: PPUSH
11412: CALL_OW 250
11416: PUSH
11417: LD_INT 52
11419: EQUAL
11420: PUSH
11421: LD_INT 32
11423: PPUSH
11424: CALL_OW 251
11428: PUSH
11429: LD_INT 19
11431: EQUAL
11432: AND
11433: IFFALSE 11395
// ComExitVehicle ( JMM ) ;
11435: LD_EXP 1
11439: PPUSH
11440: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11444: LD_EXP 7
11448: PPUSH
11449: LD_EXP 1
11453: PPUSH
11454: CALL_OW 119
// wait ( 0 0$01 ) ;
11458: LD_INT 35
11460: PPUSH
11461: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11465: LD_EXP 1
11469: PPUSH
11470: LD_INT 46
11472: PPUSH
11473: LD_INT 10
11475: PPUSH
11476: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11480: LD_EXP 1
11484: PPUSH
11485: LD_EXP 7
11489: PPUSH
11490: CALL_OW 179
// wait ( 0 0$4 ) ;
11494: LD_INT 140
11496: PPUSH
11497: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11501: LD_EXP 1
11505: PPUSH
11506: LD_STRING D1-JMM-1
11508: PPUSH
11509: CALL_OW 88
// if not dialogue_skipped then
11513: LD_OWVAR 59
11517: NOT
11518: IFFALSE 12175
// begin for i := 1 to gammaSquad do
11520: LD_ADDR_VAR 0 1
11524: PUSH
11525: DOUBLE
11526: LD_INT 1
11528: DEC
11529: ST_TO_ADDR
11530: LD_VAR 0 2
11534: PUSH
11535: FOR_TO
11536: IFFALSE 11597
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11538: LD_VAR 0 2
11542: PUSH
11543: LD_VAR 0 1
11547: ARRAY
11548: PPUSH
11549: LD_VAR 0 3
11553: PUSH
11554: LD_VAR 0 1
11558: ARRAY
11559: PPUSH
11560: LD_VAR 0 4
11564: PUSH
11565: LD_VAR 0 1
11569: ARRAY
11570: PPUSH
11571: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11575: LD_VAR 0 2
11579: PUSH
11580: LD_VAR 0 1
11584: ARRAY
11585: PPUSH
11586: LD_EXP 1
11590: PPUSH
11591: CALL_OW 179
// end ;
11595: GO 11535
11597: POP
11598: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11599: LD_EXP 4
11603: PPUSH
11604: LD_INT 41
11606: PPUSH
11607: LD_INT 4
11609: PPUSH
11610: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11614: LD_EXP 4
11618: PPUSH
11619: LD_EXP 1
11623: PPUSH
11624: CALL_OW 179
// if Lisa = false and Bobby then
11628: LD_EXP 4
11632: PUSH
11633: LD_INT 0
11635: EQUAL
11636: PUSH
11637: LD_EXP 2
11641: AND
11642: IFFALSE 11673
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11644: LD_EXP 2
11648: PPUSH
11649: LD_INT 41
11651: PPUSH
11652: LD_INT 4
11654: PPUSH
11655: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11659: LD_EXP 2
11663: PPUSH
11664: LD_EXP 1
11668: PPUSH
11669: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11673: LD_EXP 4
11677: PUSH
11678: LD_INT 0
11680: EQUAL
11681: PUSH
11682: LD_EXP 2
11686: PUSH
11687: LD_INT 0
11689: EQUAL
11690: AND
11691: PUSH
11692: LD_EXP 3
11696: AND
11697: IFFALSE 11728
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11699: LD_EXP 3
11703: PPUSH
11704: LD_INT 41
11706: PPUSH
11707: LD_INT 4
11709: PPUSH
11710: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11714: LD_EXP 3
11718: PPUSH
11719: LD_EXP 1
11723: PPUSH
11724: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11728: LD_EXP 4
11732: PUSH
11733: LD_INT 0
11735: EQUAL
11736: PUSH
11737: LD_EXP 2
11741: PUSH
11742: LD_INT 0
11744: EQUAL
11745: AND
11746: PUSH
11747: LD_EXP 3
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: AND
11756: IFFALSE 11787
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11758: LD_EXP 6
11762: PPUSH
11763: LD_INT 41
11765: PPUSH
11766: LD_INT 4
11768: PPUSH
11769: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11773: LD_EXP 6
11777: PPUSH
11778: LD_EXP 1
11782: PPUSH
11783: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11787: LD_EXP 7
11791: PPUSH
11792: LD_STRING D1-Brown-1
11794: PPUSH
11795: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11799: LD_EXP 1
11803: PPUSH
11804: LD_STRING D1-JMM-2
11806: PPUSH
11807: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11811: LD_EXP 7
11815: PPUSH
11816: LD_STRING D1-Brown-2
11818: PPUSH
11819: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11823: LD_EXP 1
11827: PPUSH
11828: LD_EXP 9
11832: PPUSH
11833: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11837: LD_EXP 9
11841: PPUSH
11842: LD_STRING D1-FSol1-2
11844: PPUSH
11845: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11849: LD_EXP 1
11853: PPUSH
11854: LD_EXP 8
11858: PPUSH
11859: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11863: LD_EXP 8
11867: PPUSH
11868: LD_STRING D1-Sol2-2
11870: PPUSH
11871: CALL_OW 88
// if Lisa then
11875: LD_EXP 4
11879: IFFALSE 11919
// begin ComTurnUnit ( JMM , Lisa ) ;
11881: LD_EXP 1
11885: PPUSH
11886: LD_EXP 4
11890: PPUSH
11891: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11895: LD_EXP 4
11899: PPUSH
11900: LD_STRING D1-Lisa-2
11902: PPUSH
11903: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11907: LD_EXP 1
11911: PPUSH
11912: LD_STRING D1-JMM-3
11914: PPUSH
11915: CALL_OW 88
// end ; if Bobby then
11919: LD_EXP 2
11923: IFFALSE 11963
// begin ComTurnUnit ( JMM , Bobby ) ;
11925: LD_EXP 1
11929: PPUSH
11930: LD_EXP 2
11934: PPUSH
11935: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11939: LD_EXP 2
11943: PPUSH
11944: LD_STRING D1-Bobby-2
11946: PPUSH
11947: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11951: LD_EXP 1
11955: PPUSH
11956: LD_STRING D1-JMM-3
11958: PPUSH
11959: CALL_OW 88
// end ; if Cyrus then
11963: LD_EXP 3
11967: IFFALSE 12007
// begin ComTurnUnit ( JMM , Cyrus ) ;
11969: LD_EXP 1
11973: PPUSH
11974: LD_EXP 3
11978: PPUSH
11979: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11983: LD_EXP 3
11987: PPUSH
11988: LD_STRING D1-Cyrus-2
11990: PPUSH
11991: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11995: LD_EXP 1
11999: PPUSH
12000: LD_STRING D1-JMM-3
12002: PPUSH
12003: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12007: LD_EXP 1
12011: PPUSH
12012: LD_EXP 7
12016: PPUSH
12017: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12021: LD_EXP 1
12025: PPUSH
12026: LD_STRING D1-JMM-3a
12028: PPUSH
12029: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12033: LD_EXP 7
12037: PPUSH
12038: LD_INT 38
12040: PPUSH
12041: LD_INT 5
12043: PPUSH
12044: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12048: LD_EXP 7
12052: PPUSH
12053: LD_EXP 1
12057: PPUSH
12058: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12062: LD_EXP 1
12066: PPUSH
12067: LD_INT 40
12069: PPUSH
12070: LD_INT 7
12072: PPUSH
12073: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12077: LD_EXP 1
12081: PPUSH
12082: LD_EXP 7
12086: PPUSH
12087: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12091: LD_EXP 7
12095: PPUSH
12096: LD_STRING D1-Brown-3
12098: PPUSH
12099: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12103: LD_EXP 14
12107: PPUSH
12108: LD_STRING D1-Har-3
12110: PPUSH
12111: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12115: LD_EXP 1
12119: PPUSH
12120: LD_STRING D1-JMM-4
12122: PPUSH
12123: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12127: LD_EXP 14
12131: PPUSH
12132: LD_STRING D1-Har-4
12134: PPUSH
12135: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12139: LD_EXP 1
12143: PPUSH
12144: LD_STRING D1-JMM-5
12146: PPUSH
12147: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12151: LD_EXP 14
12155: PPUSH
12156: LD_STRING D1-Har-5
12158: PPUSH
12159: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12163: LD_EXP 1
12167: PPUSH
12168: LD_STRING D1-JMM-6
12170: PPUSH
12171: CALL_OW 88
// end ; InGameOff ;
12175: CALL_OW 9
// PrepareRussianConvoy ;
12179: CALL 3008 0 0
// ChangeMissionObjectives ( M1 ) ;
12183: LD_STRING M1
12185: PPUSH
12186: CALL_OW 337
// SaveForQuickRestart ;
12190: CALL_OW 22
// timerStatus = 1 ;
12194: LD_ADDR_EXP 29
12198: PUSH
12199: LD_INT 1
12201: ST_TO_ADDR
// startTimer = 1 ;
12202: LD_ADDR_EXP 30
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// bonusAvalaible = 1 ;
12210: LD_ADDR_EXP 42
12214: PUSH
12215: LD_INT 1
12217: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12218: LD_INT 105
12220: PPUSH
12221: CALL_OW 67
// DialogueOn ;
12225: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12229: LD_EXP 12
12233: PPUSH
12234: LD_STRING D9-Mech1-1
12236: PPUSH
12237: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12241: LD_EXP 1
12245: PPUSH
12246: LD_STRING D9-JMM-1
12248: PPUSH
12249: CALL_OW 88
// DialogueOff ;
12253: CALL_OW 7
// end ;
12257: PPOPN 4
12259: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12260: LD_INT 47
12262: PPUSH
12263: LD_INT 1
12265: PPUSH
12266: CALL_OW 321
12270: PUSH
12271: LD_INT 2
12273: EQUAL
12274: PUSH
12275: LD_INT 22
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 21
12287: PUSH
12288: LD_INT 3
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 30
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: LIST
12309: PPUSH
12310: CALL_OW 69
12314: PUSH
12315: LD_INT 0
12317: GREATER
12318: AND
12319: IFFALSE 12549
12321: GO 12323
12323: DISABLE
// begin if IsOk ( Campell ) then
12324: LD_EXP 12
12328: PPUSH
12329: CALL_OW 302
12333: IFFALSE 12349
// begin Say ( Campell , D10-Mech1-1 ) ;
12335: LD_EXP 12
12339: PPUSH
12340: LD_STRING D10-Mech1-1
12342: PPUSH
12343: CALL_OW 88
// end else
12347: GO 12549
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12349: LD_INT 22
12351: PUSH
12352: LD_INT 1
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 21
12361: PUSH
12362: LD_INT 1
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 25
12371: PUSH
12372: LD_INT 3
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 26
12381: PUSH
12382: LD_INT 1
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PPUSH
12395: CALL_OW 69
12399: PUSH
12400: LD_EXP 1
12404: PUSH
12405: EMPTY
12406: LIST
12407: PUSH
12408: LD_INT 0
12410: GREATER
12411: DIFF
12412: IFFALSE 12486
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12414: LD_INT 22
12416: PUSH
12417: LD_INT 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 21
12426: PUSH
12427: LD_INT 1
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 25
12436: PUSH
12437: LD_INT 3
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 26
12446: PUSH
12447: LD_INT 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: PPUSH
12460: CALL_OW 69
12464: PUSH
12465: LD_EXP 1
12469: PUSH
12470: EMPTY
12471: LIST
12472: DIFF
12473: PPUSH
12474: LD_STRING D10-Mech1-1
12476: PPUSH
12477: LD_STRING D10-Mech1-1
12479: PPUSH
12480: CALL 4266 0 3
// end else
12484: GO 12549
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12486: LD_INT 22
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 21
12498: PUSH
12499: LD_INT 1
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 26
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 1
12523: ARRAY
12524: PPUSH
12525: CALL_OW 69
12529: PUSH
12530: LD_EXP 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: DIFF
12538: PPUSH
12539: LD_STRING D10-Mech1-1
12541: PPUSH
12542: LD_STRING D10-Mech1-1
12544: PPUSH
12545: CALL 4266 0 3
// end ; end ; end ;
12549: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12550: LD_INT 22
12552: PUSH
12553: LD_INT 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 30
12562: PUSH
12563: LD_INT 32
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PPUSH
12574: CALL_OW 69
12578: PUSH
12579: LD_INT 0
12581: GREATER
12582: PUSH
12583: LD_EXP 32
12587: PUSH
12588: LD_INT 0
12590: EQUAL
12591: AND
12592: IFFALSE 12832
12594: GO 12596
12596: DISABLE
// begin if IsOK ( Claptopn ) then
12597: LD_EXP 11
12601: PPUSH
12602: CALL_OW 302
12606: IFFALSE 12622
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12608: LD_EXP 11
12612: PPUSH
12613: LD_STRING D9b-Eng1-1
12615: PPUSH
12616: CALL_OW 88
// end else
12620: GO 12818
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12622: LD_INT 22
12624: PUSH
12625: LD_INT 1
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 1
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 25
12644: PUSH
12645: LD_INT 3
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 26
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PPUSH
12668: CALL_OW 69
12672: PUSH
12673: LD_EXP 1
12677: PUSH
12678: EMPTY
12679: LIST
12680: PUSH
12681: LD_INT 0
12683: GREATER
12684: DIFF
12685: IFFALSE 12759
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12687: LD_INT 22
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 21
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 25
12709: PUSH
12710: LD_INT 2
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 26
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: PUSH
12738: LD_EXP 1
12742: PUSH
12743: EMPTY
12744: LIST
12745: DIFF
12746: PPUSH
12747: LD_STRING D9b-Eng1-1
12749: PPUSH
12750: LD_STRING D9b-Eng1-11
12752: PPUSH
12753: CALL 4266 0 3
// end else
12757: GO 12818
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12759: LD_INT 22
12761: PUSH
12762: LD_INT 1
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 21
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 26
12781: PUSH
12782: LD_INT 1
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: PPUSH
12794: CALL_OW 69
12798: PUSH
12799: LD_EXP 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: DIFF
12807: PPUSH
12808: LD_STRING D9b-Eng1-1
12810: PPUSH
12811: LD_STRING D9b-Eng1-1
12813: PPUSH
12814: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
12818: LD_EXP 33
12822: PUSH
12823: LD_INT 0
12825: EQUAL
12826: IFFALSE 12832
// EnergyDialog ;
12828: CALL 4757 0 0
// end ;
12832: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12833: LD_EXP 34
12837: PUSH
12838: LD_INT 1
12840: EQUAL
12841: PUSH
12842: LD_EXP 35
12846: PUSH
12847: LD_INT 1
12849: EQUAL
12850: AND
12851: IFFALSE 12863
12853: GO 12855
12855: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12856: LD_STRING M1a
12858: PPUSH
12859: CALL_OW 337
12863: END
// every 3 3$0 do
12864: GO 12866
12866: DISABLE
// begin PrepareFirstAttack ;
12867: CALL 3808 0 0
// end ;
12871: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12872: LD_INT 22
12874: PUSH
12875: LD_INT 5
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: LD_INT 24
12897: PUSH
12898: LD_INT 250
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 69
12918: PUSH
12919: LD_INT 0
12921: GREATER
12922: PUSH
12923: LD_EXP 23
12927: PUSH
12928: LD_INT 1
12930: EQUAL
12931: AND
12932: IFFALSE 13233
12934: GO 12936
12936: DISABLE
12937: LD_INT 0
12939: PPUSH
// begin firstRussianAttack = 2 ;
12940: LD_ADDR_EXP 23
12944: PUSH
12945: LD_INT 2
12947: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12948: LD_INT 22
12950: PUSH
12951: LD_INT 5
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 1
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 69
12976: PPUSH
12977: LD_INT 125
12979: PPUSH
12980: LD_INT 98
12982: PPUSH
12983: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12987: LD_INT 22
12989: PUSH
12990: LD_INT 1
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 21
12999: PUSH
13000: LD_INT 1
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PPUSH
13011: CALL_OW 69
13015: PUSH
13016: LD_EXP 1
13020: PUSH
13021: LD_EXP 7
13025: PUSH
13026: LD_EXP 4
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: DIFF
13036: PPUSH
13037: LD_STRING DAtt1-Sol1-1
13039: PPUSH
13040: LD_STRING DAtt1-FSol1-1
13042: PPUSH
13043: CALL 4266 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13047: LD_EXP 1
13051: PPUSH
13052: LD_STRING DAtt1-JMM-1
13054: PPUSH
13055: CALL_OW 88
// if Lisa then
13059: LD_EXP 4
13063: IFFALSE 13079
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13065: LD_EXP 4
13069: PPUSH
13070: LD_STRING DAtt1a-Lisa-1
13072: PPUSH
13073: CALL_OW 88
// end else
13077: GO 13150
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13079: LD_INT 22
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 26
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: PPUSH
13114: CALL_OW 69
13118: PUSH
13119: LD_EXP 1
13123: PUSH
13124: LD_EXP 7
13128: PUSH
13129: LD_EXP 4
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: DIFF
13139: PPUSH
13140: LD_STRING DAtt1a-Sol1-1
13142: PPUSH
13143: LD_STRING DAtt1-FSol1-1
13145: PPUSH
13146: CALL 4266 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13150: LD_EXP 1
13154: PPUSH
13155: LD_STRING DAtt1a-JMM-1
13157: PPUSH
13158: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13162: LD_INT 22
13164: PUSH
13165: LD_INT 1
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 21
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 26
13184: PUSH
13185: LD_INT 1
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: PUSH
13202: LD_EXP 1
13206: PUSH
13207: LD_EXP 7
13211: PUSH
13212: LD_EXP 4
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: DIFF
13222: PPUSH
13223: LD_STRING DAtt1b-Sol1-1
13225: PPUSH
13226: LD_STRING DAtt1a-Sol1-1
13228: PPUSH
13229: CALL 4266 0 3
// end ;
13233: PPOPN 1
13235: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13236: LD_EXP 23
13240: PUSH
13241: LD_INT 2
13243: EQUAL
13244: IFFALSE 13306
13246: GO 13248
13248: DISABLE
13249: LD_INT 0
13251: PPUSH
// begin enable ;
13252: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13253: LD_ADDR_VAR 0 1
13257: PUSH
13258: LD_INT 5
13260: PPUSH
13261: LD_INT 22
13263: PUSH
13264: LD_INT 5
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 21
13273: PUSH
13274: LD_INT 1
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PPUSH
13285: CALL_OW 70
13289: PUSH
13290: FOR_IN
13291: IFFALSE 13304
// RemoveUnit ( i ) ;
13293: LD_VAR 0 1
13297: PPUSH
13298: CALL_OW 64
13302: GO 13290
13304: POP
13305: POP
// end ;
13306: PPOPN 1
13308: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13309: LD_INT 22
13311: PUSH
13312: LD_INT 5
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: EMPTY
13320: LIST
13321: PPUSH
13322: CALL_OW 69
13326: PUSH
13327: LD_INT 0
13329: EQUAL
13330: PUSH
13331: LD_EXP 23
13335: PUSH
13336: LD_INT 2
13338: EQUAL
13339: AND
13340: IFFALSE 13353
13342: GO 13344
13344: DISABLE
// firstRussianAttack = 3 ;
13345: LD_ADDR_EXP 23
13349: PUSH
13350: LD_INT 3
13352: ST_TO_ADDR
13353: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13354: LD_EXP 28
13358: PUSH
13359: LD_INT 0
13361: EQUAL
13362: IFFALSE 13443
13364: GO 13366
13366: DISABLE
// begin timerStatus = 4 ;
13367: LD_ADDR_EXP 29
13371: PUSH
13372: LD_INT 4
13374: ST_TO_ADDR
// DialogueOn ;
13375: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13379: LD_EXP 13
13383: PPUSH
13384: LD_STRING D2-Don-1
13386: PPUSH
13387: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13391: LD_EXP 1
13395: PPUSH
13396: LD_STRING D2-JMM-1
13398: PPUSH
13399: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13403: LD_EXP 13
13407: PPUSH
13408: LD_STRING D2-Don-2
13410: PPUSH
13411: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13415: LD_EXP 1
13419: PPUSH
13420: LD_STRING D2-JMM-2
13422: PPUSH
13423: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13427: LD_EXP 13
13431: PPUSH
13432: LD_STRING D2-Don-3
13434: PPUSH
13435: CALL_OW 94
// DialogueOff ;
13439: CALL_OW 7
// end ;
13443: END
// every 12 12$0 do var tmp ;
13444: GO 13446
13446: DISABLE
13447: LD_INT 0
13449: PPUSH
// begin PrepareDonaldsonArmy ;
13450: CALL 1062 0 0
// CenterNowOnUnits ( Donaldson ) ;
13454: LD_EXP 13
13458: PPUSH
13459: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 4
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 26
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 25
13500: PUSH
13501: LD_INT 1
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: PPUSH
13514: CALL_OW 69
13518: PUSH
13519: LD_EXP 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: DIFF
13527: ST_TO_ADDR
// DialogueOn ;
13528: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13532: LD_VAR 0 1
13536: PPUSH
13537: LD_STRING D3-Sol1-1
13539: PPUSH
13540: LD_STRING D3-Sol1-1
13542: PPUSH
13543: CALL 4266 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13547: LD_INT 22
13549: PUSH
13550: LD_INT 4
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 21
13559: PUSH
13560: LD_INT 1
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 26
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 25
13579: PUSH
13580: LD_INT 3
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: PPUSH
13593: CALL_OW 69
13597: PPUSH
13598: LD_STRING D3-Sol2-1
13600: PPUSH
13601: LD_STRING D3-Sol2-1
13603: PPUSH
13604: CALL 4266 0 3
// if Frank then
13608: LD_EXP 5
13612: IFFALSE 13626
// Say ( Frank , D3-Frank-1 ) ;
13614: LD_EXP 5
13618: PPUSH
13619: LD_STRING D3-Frank-1
13621: PPUSH
13622: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13626: LD_EXP 13
13630: PPUSH
13631: LD_STRING D3-Don-1
13633: PPUSH
13634: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13638: LD_EXP 13
13642: PPUSH
13643: LD_STRING D3-Don-1a
13645: PPUSH
13646: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13650: LD_EXP 1
13654: PPUSH
13655: LD_STRING D3-JMM-1
13657: PPUSH
13658: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13662: LD_EXP 13
13666: PPUSH
13667: LD_STRING D3-Don-2
13669: PPUSH
13670: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13674: LD_INT 22
13676: PUSH
13677: LD_INT 6
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 21
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 69
13702: PUSH
13703: LD_INT 0
13705: GREATER
13706: IFFALSE 13844
// begin Say ( JMM , D3-JMM-2 ) ;
13708: LD_EXP 1
13712: PPUSH
13713: LD_STRING D3-JMM-2
13715: PPUSH
13716: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13720: LD_EXP 13
13724: PPUSH
13725: LD_STRING D3-Don-3
13727: PPUSH
13728: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13732: LD_EXP 1
13736: PPUSH
13737: LD_STRING D3-JMM-3
13739: PPUSH
13740: CALL_OW 88
// if IsOK ( Frank ) then
13744: LD_EXP 5
13748: PPUSH
13749: CALL_OW 302
13753: IFFALSE 13767
// Say ( Frank , D3-Frank-3 ) ;
13755: LD_EXP 5
13759: PPUSH
13760: LD_STRING D3-Frank-3
13762: PPUSH
13763: CALL_OW 88
// DialogueOff ;
13767: CALL_OW 7
// if IsOK ( Frank ) then
13771: LD_EXP 5
13775: PPUSH
13776: CALL_OW 302
13780: IFFALSE 13842
// begin SetSide ( Frank , 0 ) ;
13782: LD_EXP 5
13786: PPUSH
13787: LD_INT 0
13789: PPUSH
13790: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13794: LD_EXP 5
13798: PPUSH
13799: LD_INT 12
13801: PPUSH
13802: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13806: LD_EXP 5
13810: PPUSH
13811: LD_STRING 04t_Frank
13813: PPUSH
13814: CALL_OW 38
// Wait ( 0 0$3 ) ;
13818: LD_INT 105
13820: PPUSH
13821: CALL_OW 67
// frankScoutBase = 1 ;
13825: LD_ADDR_EXP 25
13829: PUSH
13830: LD_INT 1
13832: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13833: LD_EXP 5
13837: PPUSH
13838: CALL_OW 64
// end ; end else
13842: GO 13931
// begin Say ( JMM , D3-JMM-4 ) ;
13844: LD_EXP 1
13848: PPUSH
13849: LD_STRING D3-JMM-4
13851: PPUSH
13852: CALL_OW 88
// DialogueOff ;
13856: CALL_OW 7
// if IsOK ( Frank ) then
13860: LD_EXP 5
13864: PPUSH
13865: CALL_OW 302
13869: IFFALSE 13931
// begin SetSide ( Frank , 0 ) ;
13871: LD_EXP 5
13875: PPUSH
13876: LD_INT 0
13878: PPUSH
13879: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13883: LD_EXP 5
13887: PPUSH
13888: LD_INT 12
13890: PPUSH
13891: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13895: LD_EXP 5
13899: PPUSH
13900: LD_STRING 04t_Frank
13902: PPUSH
13903: CALL_OW 38
// Wait ( 0 0$3 ) ;
13907: LD_INT 105
13909: PPUSH
13910: CALL_OW 67
// frankScoutBase = 1 ;
13914: LD_ADDR_EXP 25
13918: PUSH
13919: LD_INT 1
13921: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13922: LD_EXP 5
13926: PPUSH
13927: CALL_OW 64
// end ; end ; end ;
13931: PPOPN 1
13933: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13934: LD_EXP 13
13938: PPUSH
13939: CALL_OW 255
13943: PUSH
13944: LD_INT 4
13946: EQUAL
13947: PUSH
13948: LD_EXP 13
13952: PPUSH
13953: CALL_OW 302
13957: AND
13958: IFFALSE 13983
13960: GO 13962
13962: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13963: LD_EXP 13
13967: PPUSH
13968: LD_STRING D3b-Don-1
13970: PPUSH
13971: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13975: LD_ADDR_EXP 41
13979: PUSH
13980: LD_INT 1
13982: ST_TO_ADDR
// end ;
13983: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13984: LD_EXP 24
13988: PUSH
13989: LD_INT 0
13991: EQUAL
13992: IFFALSE 14148
13994: GO 13996
13996: DISABLE
13997: LD_INT 0
13999: PPUSH
14000: PPUSH
// begin enable ;
14001: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
14002: LD_ADDR_VAR 0 1
14006: PUSH
14007: LD_INT 22
14009: PUSH
14010: LD_INT 4
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 69
14035: PUSH
14036: FOR_IN
14037: IFFALSE 14146
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
14039: LD_ADDR_VAR 0 2
14043: PUSH
14044: LD_INT 22
14046: PUSH
14047: LD_INT 1
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 21
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PPUSH
14068: CALL_OW 69
14072: PUSH
14073: FOR_IN
14074: IFFALSE 14142
// begin if GetDistUnits ( i , j ) < 7 then
14076: LD_VAR 0 1
14080: PPUSH
14081: LD_VAR 0 2
14085: PPUSH
14086: CALL_OW 296
14090: PUSH
14091: LD_INT 7
14093: LESS
14094: IFFALSE 14140
// begin saveDonaldson = 1 ;
14096: LD_ADDR_EXP 24
14100: PUSH
14101: LD_INT 1
14103: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14104: LD_INT 22
14106: PUSH
14107: LD_INT 4
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 69
14132: PPUSH
14133: LD_INT 1
14135: PPUSH
14136: CALL_OW 235
// end ; end ;
14140: GO 14073
14142: POP
14143: POP
// end ;
14144: GO 14036
14146: POP
14147: POP
// end ;
14148: PPOPN 2
14150: END
// every 0 0$1 trigger frankScoutBase do
14151: LD_EXP 25
14155: IFFALSE 14474
14157: GO 14159
14159: DISABLE
// begin wait ( 2 2$30 ) ;
14160: LD_INT 5250
14162: PPUSH
14163: CALL_OW 67
// uc_side = 4 ;
14167: LD_ADDR_OWVAR 20
14171: PUSH
14172: LD_INT 4
14174: ST_TO_ADDR
// uc_nation = 1 ;
14175: LD_ADDR_OWVAR 21
14179: PUSH
14180: LD_INT 1
14182: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14183: LD_ADDR_EXP 5
14187: PUSH
14188: LD_STRING 04t_Frank
14190: PPUSH
14191: CALL_OW 34
14195: ST_TO_ADDR
// if not Frank then
14196: LD_EXP 5
14200: NOT
14201: IFFALSE 14205
// exit ;
14203: GO 14474
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14205: LD_EXP 5
14209: PPUSH
14210: LD_INT 13
14212: PPUSH
14213: LD_INT 0
14215: PPUSH
14216: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14220: LD_INT 35
14222: PPUSH
14223: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14227: LD_EXP 1
14231: PPUSH
14232: CALL_OW 310
14236: NOT
14237: PUSH
14238: LD_EXP 1
14242: PPUSH
14243: LD_INT 4
14245: PPUSH
14246: CALL_OW 296
14250: PUSH
14251: LD_INT 20
14253: LESS
14254: AND
14255: IFFALSE 14288
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14257: LD_EXP 5
14261: PPUSH
14262: LD_EXP 1
14266: PPUSH
14267: CALL_OW 250
14271: PPUSH
14272: LD_EXP 1
14276: PPUSH
14277: CALL_OW 251
14281: PPUSH
14282: CALL_OW 111
14286: GO 14303
// ComMoveXY ( Frank , 51 , 15 ) ;
14288: LD_EXP 5
14292: PPUSH
14293: LD_INT 51
14295: PPUSH
14296: LD_INT 15
14298: PPUSH
14299: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14303: LD_EXP 5
14307: PPUSH
14308: LD_EXP 1
14312: PPUSH
14313: CALL_OW 296
14317: PUSH
14318: LD_INT 10
14320: LESS
14321: IFFALSE 14220
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14323: LD_EXP 1
14327: PUSH
14328: LD_EXP 5
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PPUSH
14337: CALL_OW 87
// DialogueOn ;
14341: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14345: LD_EXP 5
14349: PPUSH
14350: LD_STRING D3a-Frank-1
14352: PPUSH
14353: CALL_OW 88
// if Lisa then
14357: LD_EXP 4
14361: IFFALSE 14411
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14363: LD_EXP 4
14367: PPUSH
14368: LD_STRING D3a-Lisa-1
14370: PPUSH
14371: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14375: LD_EXP 5
14379: PPUSH
14380: LD_STRING D3a-Frank-2
14382: PPUSH
14383: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14387: LD_EXP 4
14391: PPUSH
14392: LD_STRING D3a-Lisa-2
14394: PPUSH
14395: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14399: LD_EXP 5
14403: PPUSH
14404: LD_STRING D3a-Frank-3
14406: PPUSH
14407: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14411: LD_EXP 1
14415: PPUSH
14416: LD_STRING D3a-JMM-3
14418: PPUSH
14419: CALL_OW 88
// DialogueOff ;
14423: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14427: LD_EXP 5
14431: PPUSH
14432: LD_INT 1
14434: PPUSH
14435: CALL_OW 235
// InGameOn ;
14439: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14443: LD_INT 1
14445: PPUSH
14446: LD_INT 7
14448: PPUSH
14449: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14453: LD_INT 93
14455: PPUSH
14456: LD_INT 91
14458: PPUSH
14459: CALL_OW 84
// wait ( 0 0$5 ) ;
14463: LD_INT 175
14465: PPUSH
14466: CALL_OW 67
// InGameOff ;
14470: CALL_OW 9
// end ;
14474: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14475: LD_OWVAR 67
14479: PUSH
14480: LD_INT 2
14482: EQUAL
14483: PUSH
14484: LD_OWVAR 67
14488: PUSH
14489: LD_INT 3
14491: EQUAL
14492: OR
14493: IFFALSE 14517
14495: GO 14497
14497: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14498: LD_INT 24
14500: PPUSH
14501: LD_INT 24
14503: PPUSH
14504: LD_INT 1
14506: PPUSH
14507: LD_INT 1
14509: PPUSH
14510: LD_INT 53
14512: PPUSH
14513: CALL_OW 125
14517: END
// every 18 18$0 do
14518: GO 14520
14520: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14521: LD_EXP 14
14525: PPUSH
14526: LD_STRING D4-Har-1
14528: PPUSH
14529: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14533: LD_EXP 1
14537: PPUSH
14538: LD_STRING D4-JMM-1
14540: PPUSH
14541: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14545: LD_EXP 14
14549: PPUSH
14550: LD_STRING D4-Har-2
14552: PPUSH
14553: CALL_OW 94
// case query ( Q1 ) of 1 :
14557: LD_STRING Q1
14559: PPUSH
14560: CALL_OW 97
14564: PUSH
14565: LD_INT 1
14567: DOUBLE
14568: EQUAL
14569: IFTRUE 14573
14571: GO 14632
14573: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14574: LD_EXP 1
14578: PPUSH
14579: LD_STRING D5-JMM-1
14581: PPUSH
14582: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14586: LD_EXP 14
14590: PPUSH
14591: LD_STRING D5-Har-1
14593: PPUSH
14594: CALL_OW 94
// timeToSupport = 10 10$0 ;
14598: LD_ADDR_EXP 28
14602: PUSH
14603: LD_INT 21000
14605: ST_TO_ADDR
// timerStatus = 2 ;
14606: LD_ADDR_EXP 29
14610: PUSH
14611: LD_INT 2
14613: ST_TO_ADDR
// startTimer = 1 ;
14614: LD_ADDR_EXP 30
14618: PUSH
14619: LD_INT 1
14621: ST_TO_ADDR
// harrAnswer = 1 ;
14622: LD_ADDR_EXP 26
14626: PUSH
14627: LD_INT 1
14629: ST_TO_ADDR
// end ; 2 :
14630: GO 14767
14632: LD_INT 2
14634: DOUBLE
14635: EQUAL
14636: IFTRUE 14640
14638: GO 14699
14640: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14641: LD_EXP 1
14645: PPUSH
14646: LD_STRING D5-JMM-2
14648: PPUSH
14649: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14653: LD_EXP 14
14657: PPUSH
14658: LD_STRING D5-Har-2
14660: PPUSH
14661: CALL_OW 94
// timeToSupport = 5 5$0 ;
14665: LD_ADDR_EXP 28
14669: PUSH
14670: LD_INT 10500
14672: ST_TO_ADDR
// timerStatus = 2 ;
14673: LD_ADDR_EXP 29
14677: PUSH
14678: LD_INT 2
14680: ST_TO_ADDR
// startTimer = 1 ;
14681: LD_ADDR_EXP 30
14685: PUSH
14686: LD_INT 1
14688: ST_TO_ADDR
// harrAnswer = 2 ;
14689: LD_ADDR_EXP 26
14693: PUSH
14694: LD_INT 2
14696: ST_TO_ADDR
// end ; 3 :
14697: GO 14767
14699: LD_INT 3
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14766
14707: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14708: LD_EXP 1
14712: PPUSH
14713: LD_STRING D5-JMM-3
14715: PPUSH
14716: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14720: LD_EXP 14
14724: PPUSH
14725: LD_STRING D5-Har-3
14727: PPUSH
14728: CALL_OW 94
// timeToSupport = 5 5$0 ;
14732: LD_ADDR_EXP 28
14736: PUSH
14737: LD_INT 10500
14739: ST_TO_ADDR
// timerStatus = 2 ;
14740: LD_ADDR_EXP 29
14744: PUSH
14745: LD_INT 2
14747: ST_TO_ADDR
// startTimer = 1 ;
14748: LD_ADDR_EXP 30
14752: PUSH
14753: LD_INT 1
14755: ST_TO_ADDR
// harrAnswer = 3 ;
14756: LD_ADDR_EXP 26
14760: PUSH
14761: LD_INT 3
14763: ST_TO_ADDR
// end ; end ;
14764: GO 14767
14766: POP
// end ;
14767: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14768: LD_EXP 29
14772: PUSH
14773: LD_INT 2
14775: EQUAL
14776: PUSH
14777: LD_EXP 28
14781: PUSH
14782: LD_INT 0
14784: EQUAL
14785: AND
14786: IFFALSE 15063
14788: GO 14790
14790: DISABLE
// begin timerStatus = 4 ;
14791: LD_ADDR_EXP 29
14795: PUSH
14796: LD_INT 4
14798: ST_TO_ADDR
// if harrAnswer = 1 then
14799: LD_EXP 26
14803: PUSH
14804: LD_INT 1
14806: EQUAL
14807: IFFALSE 14887
// begin PrepareHarrisonSupport ( 3 ) ;
14809: LD_INT 3
14811: PPUSH
14812: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14816: LD_INT 2100
14818: PPUSH
14819: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14823: LD_EXP 14
14827: PPUSH
14828: LD_STRING D7-Har-1
14830: PPUSH
14831: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14835: LD_STRING M2
14837: PPUSH
14838: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14842: LD_ADDR_EXP 27
14846: PUSH
14847: LD_INT 31500
14849: PUSH
14850: LD_INT 10500
14852: PUSH
14853: LD_INT 8400
14855: PUSH
14856: LD_INT 6300
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: PUSH
14864: LD_OWVAR 67
14868: ARRAY
14869: PLUS
14870: ST_TO_ADDR
// startTimer = 1 ;
14871: LD_ADDR_EXP 30
14875: PUSH
14876: LD_INT 1
14878: ST_TO_ADDR
// timerStatus = 3 ;
14879: LD_ADDR_EXP 29
14883: PUSH
14884: LD_INT 3
14886: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14887: LD_EXP 26
14891: PUSH
14892: LD_INT 2
14894: EQUAL
14895: IFFALSE 14975
// begin PrepareHarrisonSupport ( 4 ) ;
14897: LD_INT 4
14899: PPUSH
14900: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14904: LD_INT 2100
14906: PPUSH
14907: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14911: LD_EXP 14
14915: PPUSH
14916: LD_STRING D7-Har-1
14918: PPUSH
14919: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14923: LD_STRING M2
14925: PPUSH
14926: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14930: LD_ADDR_EXP 27
14934: PUSH
14935: LD_INT 27300
14937: PUSH
14938: LD_INT 8400
14940: PUSH
14941: LD_INT 8400
14943: PUSH
14944: LD_INT 6300
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: PUSH
14952: LD_OWVAR 67
14956: ARRAY
14957: PLUS
14958: ST_TO_ADDR
// startTimer = 1 ;
14959: LD_ADDR_EXP 30
14963: PUSH
14964: LD_INT 1
14966: ST_TO_ADDR
// timerStatus = 3 ;
14967: LD_ADDR_EXP 29
14971: PUSH
14972: LD_INT 3
14974: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14975: LD_EXP 26
14979: PUSH
14980: LD_INT 3
14982: EQUAL
14983: IFFALSE 15063
// begin PrepareHarrisonSupport ( 5 ) ;
14985: LD_INT 5
14987: PPUSH
14988: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14992: LD_INT 2100
14994: PPUSH
14995: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14999: LD_EXP 14
15003: PPUSH
15004: LD_STRING D7-Har-1
15006: PPUSH
15007: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15011: LD_STRING M2
15013: PPUSH
15014: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15018: LD_ADDR_EXP 27
15022: PUSH
15023: LD_INT 21000
15025: PUSH
15026: LD_INT 8400
15028: PUSH
15029: LD_INT 6300
15031: PUSH
15032: LD_INT 4200
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: LD_OWVAR 67
15044: ARRAY
15045: PLUS
15046: ST_TO_ADDR
// startTimer = 1 ;
15047: LD_ADDR_EXP 30
15051: PUSH
15052: LD_INT 1
15054: ST_TO_ADDR
// timerStatus = 3 ;
15055: LD_ADDR_EXP 29
15059: PUSH
15060: LD_INT 3
15062: ST_TO_ADDR
// end ; end ;
15063: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15064: LD_EXP 27
15068: PUSH
15069: LD_INT 8400
15071: LESSEQUAL
15072: PUSH
15073: LD_EXP 29
15077: PUSH
15078: LD_INT 3
15080: EQUAL
15081: AND
15082: IFFALSE 15114
15084: GO 15086
15086: DISABLE
// begin DialogueOn ;
15087: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15091: LD_EXP 14
15095: PPUSH
15096: LD_STRING D7a-Har-1
15098: PPUSH
15099: CALL_OW 94
// DialogueOff ;
15103: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15107: LD_STRING M2a
15109: PPUSH
15110: CALL_OW 337
// end ;
15114: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15115: LD_EXP 27
15119: PUSH
15120: LD_INT 0
15122: LESSEQUAL
15123: PUSH
15124: LD_EXP 29
15128: PUSH
15129: LD_INT 3
15131: EQUAL
15132: AND
15133: PUSH
15134: LD_EXP 40
15138: NOT
15139: AND
15140: IFFALSE 15279
15142: GO 15144
15144: DISABLE
15145: LD_INT 0
15147: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15148: LD_ADDR_VAR 0 1
15152: PUSH
15153: LD_INT 22
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PPUSH
15163: CALL_OW 69
15167: PUSH
15168: LD_EXP 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: DIFF
15176: ST_TO_ADDR
// saveDonaldson = 2 ;
15177: LD_ADDR_EXP 24
15181: PUSH
15182: LD_INT 2
15184: ST_TO_ADDR
// DialogueOn ;
15185: CALL_OW 6
// if IsOK ( Donaldson ) then
15189: LD_EXP 13
15193: PPUSH
15194: CALL_OW 302
15198: IFFALSE 15214
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15200: LD_EXP 14
15204: PPUSH
15205: LD_STRING D8-Har-1
15207: PPUSH
15208: CALL_OW 94
// end else
15212: GO 15226
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15214: LD_EXP 14
15218: PPUSH
15219: LD_STRING D8-Har-1a
15221: PPUSH
15222: CALL_OW 94
// end ; DialogueOff ;
15226: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15230: LD_VAR 0 1
15234: PPUSH
15235: LD_INT 4
15237: PPUSH
15238: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15242: LD_VAR 0 1
15246: PPUSH
15247: LD_INT 88
15249: PPUSH
15250: LD_INT 89
15252: PPUSH
15253: CALL_OW 114
// honor = 0 ;
15257: LD_ADDR_EXP 39
15261: PUSH
15262: LD_INT 0
15264: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15265: LD_INT 350
15267: PPUSH
15268: CALL_OW 67
// YouLost ( LostCommand ) ;
15272: LD_STRING LostCommand
15274: PPUSH
15275: CALL_OW 104
// end ;
15279: PPOPN 1
15281: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15282: LD_INT 22
15284: PUSH
15285: LD_INT 6
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 21
15294: PUSH
15295: LD_INT 1
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PPUSH
15306: CALL_OW 69
15310: PUSH
15311: LD_INT 0
15313: EQUAL
15314: PUSH
15315: LD_EXP 20
15319: PUSH
15320: LD_INT 0
15322: EQUAL
15323: AND
15324: PUSH
15325: LD_EXP 42
15329: PUSH
15330: LD_INT 1
15332: EQUAL
15333: AND
15334: IFFALSE 15428
15336: GO 15338
15338: DISABLE
15339: LD_INT 0
15341: PPUSH
15342: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15343: LD_ADDR_VAR 0 2
15347: PUSH
15348: LD_INT 22
15350: PUSH
15351: LD_INT 1
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 21
15360: PUSH
15361: LD_INT 1
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 23
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: ST_TO_ADDR
// for i in tmp do
15388: LD_ADDR_VAR 0 1
15392: PUSH
15393: LD_VAR 0 2
15397: PUSH
15398: FOR_IN
15399: IFFALSE 15426
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: LD_INT 4
15411: PPUSH
15412: CALL_OW 12
15416: PPUSH
15417: LD_INT 500
15419: PPUSH
15420: CALL_OW 492
// end ;
15424: GO 15398
15426: POP
15427: POP
// end ; end_of_file
15428: PPOPN 2
15430: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15431: GO 15433
15433: DISABLE
15434: LD_INT 0
15436: PPUSH
// begin enemyWayX = [ ] ;
15437: LD_ADDR_EXP 46
15441: PUSH
15442: EMPTY
15443: ST_TO_ADDR
// enemyWayY = [ ] ;
15444: LD_ADDR_EXP 47
15448: PUSH
15449: EMPTY
15450: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15451: LD_ADDR_VAR 0 1
15455: PUSH
15456: LD_INT 1
15458: PPUSH
15459: LD_INT 3
15461: PPUSH
15462: CALL_OW 12
15466: ST_TO_ADDR
// if rnd = 1 then
15467: LD_VAR 0 1
15471: PUSH
15472: LD_INT 1
15474: EQUAL
15475: IFFALSE 15515
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15477: LD_ADDR_EXP 46
15481: PUSH
15482: LD_INT 73
15484: PUSH
15485: LD_INT 46
15487: PUSH
15488: LD_INT 29
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15496: LD_ADDR_EXP 47
15500: PUSH
15501: LD_INT 71
15503: PUSH
15504: LD_INT 43
15506: PUSH
15507: LD_INT 29
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: ST_TO_ADDR
// end ; if rnd = 2 then
15515: LD_VAR 0 1
15519: PUSH
15520: LD_INT 2
15522: EQUAL
15523: IFFALSE 15547
// begin enemyWayX = [ 64 ] ;
15525: LD_ADDR_EXP 46
15529: PUSH
15530: LD_INT 64
15532: PUSH
15533: EMPTY
15534: LIST
15535: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15536: LD_ADDR_EXP 47
15540: PUSH
15541: LD_INT 43
15543: PUSH
15544: EMPTY
15545: LIST
15546: ST_TO_ADDR
// end ; if rnd = 3 then
15547: LD_VAR 0 1
15551: PUSH
15552: LD_INT 3
15554: EQUAL
15555: IFFALSE 15579
// begin enemyWayX = [ 80 ] ;
15557: LD_ADDR_EXP 46
15561: PUSH
15562: LD_INT 80
15564: PUSH
15565: EMPTY
15566: LIST
15567: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15568: LD_ADDR_EXP 47
15572: PUSH
15573: LD_INT 28
15575: PUSH
15576: EMPTY
15577: LIST
15578: ST_TO_ADDR
// end ; enable ;
15579: ENABLE
// end ;
15580: PPOPN 1
15582: END
// every 0 0$1 trigger AIEnable = 1 do
15583: LD_EXP 37
15587: PUSH
15588: LD_INT 1
15590: EQUAL
15591: IFFALSE 15705
15593: GO 15595
15595: DISABLE
// begin enable ;
15596: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15597: LD_INT 3
15599: PPUSH
15600: LD_INT 21
15602: PPUSH
15603: LD_INT 7
15605: PPUSH
15606: CALL 5790 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15610: LD_INT 3
15612: PPUSH
15613: LD_INT 8
15615: PPUSH
15616: LD_INT 7
15618: PPUSH
15619: LD_INT 1
15621: PPUSH
15622: CALL 6111 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15626: LD_INT 3
15628: PPUSH
15629: LD_INT 17
15631: PPUSH
15632: LD_INT 108
15634: PPUSH
15635: LD_INT 95
15637: PPUSH
15638: CALL 7435 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15642: LD_INT 3
15644: PPUSH
15645: LD_INT 23
15647: PPUSH
15648: LD_EXP 46
15652: PPUSH
15653: LD_EXP 47
15657: PPUSH
15658: CALL 6767 0 4
// if baseReadyToBuild = 2 then
15662: LD_EXP 20
15666: PUSH
15667: LD_INT 2
15669: EQUAL
15670: IFFALSE 15705
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15672: LD_INT 6
15674: PPUSH
15675: LD_EXP 21
15679: PPUSH
15680: LD_INT 6
15682: PPUSH
15683: CALL 5790 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15687: LD_INT 6
15689: PPUSH
15690: LD_INT 9
15692: PPUSH
15693: LD_INT 6
15695: PPUSH
15696: LD_EXP 22
15700: PPUSH
15701: CALL 6111 0 4
// end ; end ;
15705: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15706: LD_EXP 15
15710: PPUSH
15711: CALL_OW 310
15715: NOT
15716: PUSH
15717: LD_INT 21
15719: PPUSH
15720: CALL_OW 302
15724: AND
15725: PUSH
15726: LD_INT 21
15728: PPUSH
15729: CALL_OW 255
15733: PUSH
15734: LD_INT 3
15736: EQUAL
15737: AND
15738: IFFALSE 15756
15740: GO 15742
15742: DISABLE
// begin enable ;
15743: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15744: LD_EXP 15
15748: PPUSH
15749: LD_INT 21
15751: PPUSH
15752: CALL_OW 120
// end ;
15756: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15757: LD_INT 22
15759: PUSH
15760: LD_INT 3
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 21
15769: PUSH
15770: LD_INT 2
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 55
15779: PUSH
15780: EMPTY
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 69
15792: PUSH
15793: LD_INT 0
15795: EQUAL
15796: PUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 255
15804: PUSH
15805: LD_INT 3
15807: EQUAL
15808: AND
15809: PUSH
15810: LD_INT 21
15812: PPUSH
15813: CALL_OW 302
15817: AND
15818: PUSH
15819: LD_INT 21
15821: PPUSH
15822: CALL_OW 255
15826: PUSH
15827: LD_INT 3
15829: EQUAL
15830: AND
15831: PUSH
15832: LD_INT 21
15834: PPUSH
15835: CALL_OW 302
15839: AND
15840: IFFALSE 16045
15842: GO 15844
15844: DISABLE
// begin enable ;
15845: ENABLE
// if Difficulty = 1 then
15846: LD_OWVAR 67
15850: PUSH
15851: LD_INT 1
15853: EQUAL
15854: IFFALSE 15898
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15856: LD_INT 3
15858: PPUSH
15859: LD_INT 24
15861: PPUSH
15862: LD_OWVAR 67
15866: PUSH
15867: LD_INT 2
15869: PLUS
15870: PPUSH
15871: LD_INT 42
15873: PUSH
15874: LD_INT 42
15876: PUSH
15877: LD_INT 43
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: PPUSH
15885: LD_INT 1
15887: PPUSH
15888: LD_INT 1
15890: PPUSH
15891: LD_INT 21
15893: PPUSH
15894: CALL 6655 0 7
// if Difficulty = 2 then
15898: LD_OWVAR 67
15902: PUSH
15903: LD_INT 2
15905: EQUAL
15906: IFFALSE 15973
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15908: LD_INT 3
15910: PPUSH
15911: LD_INT 24
15913: PPUSH
15914: LD_OWVAR 67
15918: PUSH
15919: LD_INT 2
15921: PLUS
15922: PPUSH
15923: LD_INT 42
15925: PUSH
15926: LD_INT 42
15928: PUSH
15929: LD_INT 43
15931: PUSH
15932: LD_INT 43
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: PPUSH
15941: LD_INT 1
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: LD_INT 21
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 1
15959: PPUSH
15960: LD_INT 2
15962: PPUSH
15963: CALL_OW 12
15967: ARRAY
15968: PPUSH
15969: CALL 6655 0 7
// if Difficulty = 3 then
15973: LD_OWVAR 67
15977: PUSH
15978: LD_INT 3
15980: EQUAL
15981: IFFALSE 16045
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15983: LD_INT 3
15985: PPUSH
15986: LD_INT 24
15988: PPUSH
15989: LD_OWVAR 67
15993: PUSH
15994: LD_INT 2
15996: PPUSH
15997: LD_INT 3
15999: PPUSH
16000: CALL_OW 12
16004: PLUS
16005: PPUSH
16006: LD_INT 43
16008: PUSH
16009: LD_INT 43
16011: PUSH
16012: LD_INT 43
16014: PUSH
16015: LD_INT 43
16017: PUSH
16018: LD_INT 44
16020: PUSH
16021: LD_INT 44
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: PPUSH
16032: LD_INT 1
16034: PPUSH
16035: LD_INT 1
16037: PPUSH
16038: LD_INT 22
16040: PPUSH
16041: CALL 6655 0 7
// end ;
16045: END
// every 0 0$1 do
16046: GO 16048
16048: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16049: LD_INT 3
16051: PPUSH
16052: LD_INT 1
16054: PPUSH
16055: LD_INT 3
16057: PPUSH
16058: CALL 5705 0 3
16062: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16063: LD_EXP 20
16067: PUSH
16068: LD_INT 1
16070: EQUAL
16071: IFFALSE 16218
16073: GO 16075
16075: DISABLE
16076: LD_INT 0
16078: PPUSH
16079: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_INT 22
16087: PUSH
16088: LD_INT 6
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 21
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 34
16107: PUSH
16108: LD_INT 51
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: PPUSH
16120: CALL_OW 69
16124: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16125: LD_VAR 0 2
16129: PUSH
16130: LD_INT 1
16132: ARRAY
16133: PPUSH
16134: LD_EXP 21
16138: PPUSH
16139: CALL_OW 250
16143: PUSH
16144: LD_INT 5
16146: MINUS
16147: PPUSH
16148: LD_EXP 21
16152: PPUSH
16153: CALL_OW 251
16157: PUSH
16158: LD_INT 5
16160: MINUS
16161: PPUSH
16162: CALL_OW 111
// wait ( 0 0$5 ) ;
16166: LD_INT 175
16168: PPUSH
16169: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16173: LD_VAR 0 2
16177: PUSH
16178: LD_INT 1
16180: ARRAY
16181: PPUSH
16182: LD_INT 41
16184: PPUSH
16185: LD_INT 52
16187: PPUSH
16188: CALL_OW 177
// wait ( 0 0$40 ) ;
16192: LD_INT 1400
16194: PPUSH
16195: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16199: LD_VAR 0 2
16203: PUSH
16204: LD_INT 1
16206: ARRAY
16207: PPUSH
16208: LD_INT 41
16210: PPUSH
16211: LD_INT 44
16213: PPUSH
16214: CALL_OW 111
// end ;
16218: PPOPN 2
16220: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16221: LD_EXP 21
16225: PPUSH
16226: CALL_OW 274
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 275
16238: PUSH
16239: LD_INT 100
16241: GREATEREQUAL
16242: IFFALSE 16470
16244: GO 16246
16246: DISABLE
16247: LD_INT 0
16249: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16250: LD_ADDR_VAR 0 1
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_INT 6
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 21
16267: PUSH
16268: LD_INT 1
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 25
16277: PUSH
16278: LD_INT 2
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PPUSH
16290: CALL_OW 69
16294: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16295: LD_VAR 0 1
16299: PUSH
16300: LD_INT 1
16302: ARRAY
16303: PPUSH
16304: LD_INT 4
16306: PPUSH
16307: LD_INT 39
16309: PPUSH
16310: LD_INT 37
16312: PPUSH
16313: LD_INT 3
16315: PPUSH
16316: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16320: LD_VAR 0 1
16324: PUSH
16325: LD_INT 1
16327: ARRAY
16328: PPUSH
16329: LD_INT 29
16331: PPUSH
16332: LD_INT 42
16334: PPUSH
16335: LD_INT 54
16337: PPUSH
16338: LD_INT 3
16340: PPUSH
16341: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16345: LD_VAR 0 1
16349: PUSH
16350: LD_INT 1
16352: ARRAY
16353: PPUSH
16354: LD_INT 6
16356: PPUSH
16357: LD_INT 38
16359: PPUSH
16360: LD_INT 48
16362: PPUSH
16363: LD_INT 0
16365: PPUSH
16366: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16370: LD_VAR 0 1
16374: PUSH
16375: LD_INT 1
16377: ARRAY
16378: PPUSH
16379: LD_INT 2
16381: PPUSH
16382: LD_INT 32
16384: PPUSH
16385: LD_INT 38
16387: PPUSH
16388: LD_INT 2
16390: PPUSH
16391: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16395: LD_VAR 0 1
16399: PUSH
16400: LD_INT 1
16402: ARRAY
16403: PPUSH
16404: LD_INT 26
16406: PPUSH
16407: LD_INT 39
16409: PPUSH
16410: LD_INT 55
16412: PPUSH
16413: LD_INT 3
16415: PPUSH
16416: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16420: LD_VAR 0 1
16424: PUSH
16425: LD_INT 1
16427: ARRAY
16428: PPUSH
16429: LD_INT 32
16431: PPUSH
16432: LD_INT 31
16434: PPUSH
16435: LD_INT 31
16437: PPUSH
16438: LD_INT 3
16440: PPUSH
16441: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16445: LD_VAR 0 1
16449: PUSH
16450: LD_INT 1
16452: ARRAY
16453: PPUSH
16454: LD_INT 31
16456: PPUSH
16457: LD_INT 50
16459: PPUSH
16460: LD_INT 51
16462: PPUSH
16463: LD_INT 4
16465: PPUSH
16466: CALL_OW 205
// end ; end_of_file
16470: PPOPN 1
16472: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16473: LD_INT 0
16475: PPUSH
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
16480: PPUSH
16481: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16482: LD_ADDR_VAR 0 3
16486: PUSH
16487: LD_INT 22
16489: PUSH
16490: LD_INT 6
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 21
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 25
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: LD_INT 54
16522: PUSH
16523: EMPTY
16524: LIST
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: PPUSH
16536: CALL_OW 69
16540: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16541: LD_ADDR_VAR 0 7
16545: PUSH
16546: LD_INT 22
16548: PUSH
16549: LD_INT 6
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 21
16558: PUSH
16559: LD_INT 1
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 25
16568: PUSH
16569: LD_INT 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 54
16578: PUSH
16579: EMPTY
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: PPUSH
16588: CALL_OW 69
16592: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16593: LD_ADDR_VAR 0 4
16597: PUSH
16598: LD_INT 22
16600: PUSH
16601: LD_INT 6
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 21
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 25
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16638: LD_ADDR_VAR 0 6
16642: PUSH
16643: LD_INT 22
16645: PUSH
16646: LD_INT 6
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 21
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 25
16665: PUSH
16666: LD_INT 4
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16683: LD_ADDR_VAR 0 8
16687: PUSH
16688: LD_INT 22
16690: PUSH
16691: LD_INT 6
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 21
16700: PUSH
16701: LD_INT 2
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 34
16710: PUSH
16711: LD_INT 51
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16728: LD_VAR 0 1
16732: PPUSH
16733: CALL_OW 255
16737: PUSH
16738: LD_INT 6
16740: EQUAL
16741: PUSH
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 266
16751: PUSH
16752: LD_INT 0
16754: EQUAL
16755: AND
16756: IFFALSE 16776
// begin ruPDepot = building ;
16758: LD_ADDR_EXP 21
16762: PUSH
16763: LD_VAR 0 1
16767: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16768: LD_ADDR_EXP 20
16772: PUSH
16773: LD_INT 1
16775: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16776: LD_VAR 0 1
16780: PPUSH
16781: CALL_OW 266
16785: PUSH
16786: LD_INT 4
16788: EQUAL
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 255
16799: PUSH
16800: LD_INT 6
16802: EQUAL
16803: AND
16804: IFFALSE 16837
// for i in tmpSold do
16806: LD_ADDR_VAR 0 2
16810: PUSH
16811: LD_VAR 0 3
16815: PUSH
16816: FOR_IN
16817: IFFALSE 16835
// ComEnterUnit ( i , building ) ;
16819: LD_VAR 0 2
16823: PPUSH
16824: LD_VAR 0 1
16828: PPUSH
16829: CALL_OW 120
16833: GO 16816
16835: POP
16836: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16837: LD_VAR 0 1
16841: PPUSH
16842: CALL_OW 266
16846: PUSH
16847: LD_INT 6
16849: EQUAL
16850: PUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL_OW 255
16860: PUSH
16861: LD_INT 6
16863: EQUAL
16864: AND
16865: IFFALSE 16923
// begin for i in tmpSci do
16867: LD_ADDR_VAR 0 2
16871: PUSH
16872: LD_VAR 0 6
16876: PUSH
16877: FOR_IN
16878: IFFALSE 16896
// ComEnterUnit ( i , building ) ;
16880: LD_VAR 0 2
16884: PPUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 120
16894: GO 16877
16896: POP
16897: POP
// ResAllTechs ( 6 , building , 3 ) ;
16898: LD_INT 6
16900: PPUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: CALL 5705 0 3
// ruPLab = building ;
16913: LD_ADDR_EXP 22
16917: PUSH
16918: LD_VAR 0 1
16922: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 266
16932: PUSH
16933: LD_INT 2
16935: EQUAL
16936: PUSH
16937: LD_VAR 0 1
16941: PPUSH
16942: CALL_OW 255
16946: PUSH
16947: LD_INT 6
16949: EQUAL
16950: AND
16951: IFFALSE 17002
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16953: LD_ADDR_VAR 0 5
16957: PUSH
16958: LD_VAR 0 8
16962: PUSH
16963: LD_INT 1
16965: ARRAY
16966: PPUSH
16967: CALL_OW 313
16971: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16972: LD_VAR 0 5
16976: PPUSH
16977: CALL_OW 121
// wait ( 0 0$1 ) ;
16981: LD_INT 35
16983: PPUSH
16984: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16988: LD_VAR 0 5
16992: PPUSH
16993: LD_VAR 0 1
16997: PPUSH
16998: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 266
17011: PUSH
17012: LD_INT 32
17014: EQUAL
17015: PUSH
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 255
17025: PUSH
17026: LD_INT 6
17028: EQUAL
17029: AND
17030: IFFALSE 17082
// begin ComPlaceWeapon ( building , 42 ) ;
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_INT 42
17039: PPUSH
17040: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17044: LD_VAR 0 7
17048: PUSH
17049: LD_INT 1
17051: ARRAY
17052: PPUSH
17053: CALL_OW 122
// wait ( 0 0$1 ) ;
17057: LD_INT 35
17059: PPUSH
17060: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17064: LD_VAR 0 7
17068: PUSH
17069: LD_INT 1
17071: ARRAY
17072: PPUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 266
17091: PUSH
17092: LD_INT 31
17094: EQUAL
17095: PUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 255
17105: PUSH
17106: LD_INT 6
17108: EQUAL
17109: AND
17110: IFFALSE 17176
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
17112: LD_VAR 0 7
17116: PUSH
17117: LD_INT 2
17119: ARRAY
17120: PPUSH
17121: CALL_OW 122
// wait ( 0 0$1 ) ;
17125: LD_INT 35
17127: PPUSH
17128: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17132: LD_VAR 0 7
17136: PUSH
17137: LD_INT 2
17139: ARRAY
17140: PPUSH
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17150: LD_VAR 0 4
17154: PUSH
17155: LD_INT 1
17157: ARRAY
17158: PPUSH
17159: LD_EXP 21
17163: PPUSH
17164: CALL_OW 120
// baseReadyToBuild = 2 ;
17168: LD_ADDR_EXP 20
17172: PUSH
17173: LD_INT 2
17175: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17176: LD_VAR 0 1
17180: PPUSH
17181: CALL_OW 266
17185: PUSH
17186: LD_INT 32
17188: EQUAL
17189: PUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 255
17199: PUSH
17200: LD_INT 1
17202: EQUAL
17203: AND
17204: PUSH
17205: LD_EXP 32
17209: PUSH
17210: LD_INT 0
17212: EQUAL
17213: AND
17214: IFFALSE 17459
// begin bunkerDialog = 1 ;
17216: LD_ADDR_EXP 32
17220: PUSH
17221: LD_INT 1
17223: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17224: LD_EXP 11
17228: PPUSH
17229: CALL_OW 302
17233: IFFALSE 17249
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17235: LD_EXP 11
17239: PPUSH
17240: LD_STRING D11-Eng1-1
17242: PPUSH
17243: CALL_OW 88
// end else
17247: GO 17445
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17249: LD_INT 22
17251: PUSH
17252: LD_INT 1
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 21
17261: PUSH
17262: LD_INT 1
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 25
17271: PUSH
17272: LD_INT 3
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 26
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: PPUSH
17295: CALL_OW 69
17299: PUSH
17300: LD_EXP 1
17304: PUSH
17305: EMPTY
17306: LIST
17307: PUSH
17308: LD_INT 0
17310: GREATER
17311: DIFF
17312: IFFALSE 17386
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17314: LD_INT 22
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 21
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 25
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 26
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: PPUSH
17360: CALL_OW 69
17364: PUSH
17365: LD_EXP 1
17369: PUSH
17370: EMPTY
17371: LIST
17372: DIFF
17373: PPUSH
17374: LD_STRING D11-Eng1-1
17376: PPUSH
17377: LD_STRING D11-Eng1-1
17379: PPUSH
17380: CALL 4266 0 3
// end else
17384: GO 17445
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17386: LD_INT 22
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 21
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 26
17408: PUSH
17409: LD_INT 1
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: PPUSH
17421: CALL_OW 69
17425: PUSH
17426: LD_EXP 1
17430: PUSH
17431: EMPTY
17432: LIST
17433: DIFF
17434: PPUSH
17435: LD_STRING D11-Eng1-1
17437: PPUSH
17438: LD_STRING D11-Eng1-1
17440: PPUSH
17441: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
17445: LD_EXP 33
17449: PUSH
17450: LD_INT 0
17452: EQUAL
17453: IFFALSE 17459
// EnergyDialog ;
17455: CALL 4757 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 266
17468: PUSH
17469: LD_INT 29
17471: EQUAL
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 255
17482: PUSH
17483: LD_INT 1
17485: EQUAL
17486: AND
17487: IFFALSE 17497
// buildOil = 1 ;
17489: LD_ADDR_EXP 34
17493: PUSH
17494: LD_INT 1
17496: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 266
17506: PUSH
17507: LD_INT 26
17509: EQUAL
17510: PUSH
17511: LD_VAR 0 1
17515: PPUSH
17516: CALL_OW 255
17520: PUSH
17521: LD_INT 1
17523: EQUAL
17524: AND
17525: IFFALSE 17535
// buildPower = 1 ;
17527: LD_ADDR_EXP 35
17531: PUSH
17532: LD_INT 1
17534: ST_TO_ADDR
// end ;
17535: PPOPN 8
17537: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17538: LD_VAR 0 1
17542: PPUSH
17543: CALL_OW 266
17547: PUSH
17548: LD_INT 3
17550: EQUAL
17551: PUSH
17552: LD_VAR 0 1
17556: PPUSH
17557: CALL_OW 255
17561: PUSH
17562: LD_INT 1
17564: EQUAL
17565: AND
17566: PUSH
17567: LD_EXP 31
17571: PUSH
17572: LD_INT 0
17574: EQUAL
17575: AND
17576: IFFALSE 17924
// begin factoryDialog = 1 ;
17578: LD_ADDR_EXP 31
17582: PUSH
17583: LD_INT 1
17585: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17586: LD_INT 22
17588: PUSH
17589: LD_INT 1
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 21
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 30
17608: PUSH
17609: LD_INT 3
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 24
17618: PUSH
17619: LD_INT 1000
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: PPUSH
17632: CALL_OW 69
17636: PUSH
17637: LD_INT 1
17639: ARRAY
17640: PPUSH
17641: CALL_OW 87
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
17645: LD_INT 47
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: CALL_OW 321
17655: PUSH
17656: LD_INT 1
17658: EQUAL
17659: PUSH
17660: LD_INT 45
17662: PPUSH
17663: LD_INT 1
17665: PPUSH
17666: CALL_OW 321
17670: PUSH
17671: LD_INT 1
17673: EQUAL
17674: AND
17675: IFFALSE 17924
// begin Say ( JMM , D9a-JMM-1 ) ;
17677: LD_EXP 1
17681: PPUSH
17682: LD_STRING D9a-JMM-1
17684: PPUSH
17685: CALL_OW 88
// if IsOK ( Campell ) then
17689: LD_EXP 12
17693: PPUSH
17694: CALL_OW 302
17698: IFFALSE 17714
// begin Say ( Campell , D9a-Mech1-1 ) ;
17700: LD_EXP 12
17704: PPUSH
17705: LD_STRING D9a-Mech1-1
17707: PPUSH
17708: CALL_OW 88
// end else
17712: GO 17910
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17714: LD_INT 22
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 21
17726: PUSH
17727: LD_INT 1
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 25
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 26
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL_OW 69
17764: PUSH
17765: LD_EXP 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: PUSH
17773: LD_INT 0
17775: GREATER
17776: DIFF
17777: IFFALSE 17851
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17779: LD_INT 22
17781: PUSH
17782: LD_INT 1
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 21
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 25
17801: PUSH
17802: LD_INT 3
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 26
17811: PUSH
17812: LD_INT 1
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: PUSH
17830: LD_EXP 1
17834: PUSH
17835: EMPTY
17836: LIST
17837: DIFF
17838: PPUSH
17839: LD_STRING D9a-Mech1-1
17841: PPUSH
17842: LD_STRING D9a-Mech1-1
17844: PPUSH
17845: CALL 4266 0 3
// end else
17849: GO 17910
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17851: LD_INT 22
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 21
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 26
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: LIST
17885: PPUSH
17886: CALL_OW 69
17890: PUSH
17891: LD_EXP 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: DIFF
17899: PPUSH
17900: LD_STRING D9a-Mech1-1
17902: PPUSH
17903: LD_STRING D9a-Mech1-1
17905: PPUSH
17906: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
17910: LD_EXP 33
17914: PUSH
17915: LD_INT 0
17917: EQUAL
17918: IFFALSE 17924
// EnergyDialog ;
17920: CALL 4757 0 0
// end ; end ; end ;
17924: PPOPN 1
17926: END
// on UnitDestroyed ( unit ) do var mech ;
17927: LD_INT 0
17929: PPUSH
// begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 247
17939: PUSH
17940: LD_INT 1
17942: EQUAL
17943: PUSH
17944: LD_VAR 0 1
17948: PPUSH
17949: CALL_OW 255
17953: PUSH
17954: LD_INT 1
17956: EQUAL
17957: AND
17958: IFFALSE 17974
// lostCounter = lostCounter + 1 ;
17960: LD_ADDR_EXP 38
17964: PUSH
17965: LD_EXP 38
17969: PUSH
17970: LD_INT 1
17972: PLUS
17973: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 257
17983: PUSH
17984: LD_INT 3
17986: EQUAL
17987: PUSH
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 255
17997: PUSH
17998: LD_INT 3
18000: EQUAL
18001: AND
18002: PUSH
18003: LD_INT 24
18005: PPUSH
18006: CALL_OW 302
18010: AND
18011: PUSH
18012: LD_INT 24
18014: PPUSH
18015: CALL_OW 255
18019: PUSH
18020: LD_INT 3
18022: EQUAL
18023: AND
18024: IFFALSE 18123
// begin uc_side = 3 ;
18026: LD_ADDR_OWVAR 20
18030: PUSH
18031: LD_INT 3
18033: ST_TO_ADDR
// uc_nation = 3 ;
18034: LD_ADDR_OWVAR 21
18038: PUSH
18039: LD_INT 3
18041: ST_TO_ADDR
// hc_gallery :=  ;
18042: LD_ADDR_OWVAR 33
18046: PUSH
18047: LD_STRING 
18049: ST_TO_ADDR
// hc_name :=  ;
18050: LD_ADDR_OWVAR 26
18054: PUSH
18055: LD_STRING 
18057: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
18058: LD_INT 0
18060: PPUSH
18061: LD_EXP 16
18065: PPUSH
18066: LD_EXP 17
18070: PPUSH
18071: CALL_OW 12
18075: PPUSH
18076: CALL_OW 383
// mech := CreateHuman ;
18080: LD_ADDR_VAR 0 2
18084: PUSH
18085: CALL_OW 44
18089: ST_TO_ADDR
// PlaceUnitXYR ( mech , 124 , 97 , 3 , false ) ;
18090: LD_VAR 0 2
18094: PPUSH
18095: LD_INT 124
18097: PPUSH
18098: LD_INT 97
18100: PPUSH
18101: LD_INT 3
18103: PPUSH
18104: LD_INT 0
18106: PPUSH
18107: CALL_OW 50
// ComEnterUnit ( mech , rubfact0 ) ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_INT 24
18118: PPUSH
18119: CALL_OW 120
// end ; end ;
18123: PPOPN 2
18125: END
// on Contact ( side1 , side2 ) do var i , tmp ;
18126: LD_INT 0
18128: PPUSH
18129: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
18130: LD_ADDR_VAR 0 4
18134: PUSH
18135: LD_INT 22
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
18150: LD_VAR 0 1
18154: PUSH
18155: LD_INT 1
18157: EQUAL
18158: PUSH
18159: LD_VAR 0 2
18163: PUSH
18164: LD_INT 6
18166: EQUAL
18167: AND
18168: PUSH
18169: LD_EXP 41
18173: PUSH
18174: LD_INT 1
18176: EQUAL
18177: AND
18178: IFFALSE 18233
// begin donaldsonCoopAttack = 0 ;
18180: LD_ADDR_EXP 41
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18188: LD_ADDR_VAR 0 3
18192: PUSH
18193: LD_INT 22
18195: PUSH
18196: LD_INT 4
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: PUSH
18211: FOR_IN
18212: IFFALSE 18231
// ComAgressiveMove ( i , 52 , 64 ) ;
18214: LD_VAR 0 3
18218: PPUSH
18219: LD_INT 52
18221: PPUSH
18222: LD_INT 64
18224: PPUSH
18225: CALL_OW 114
18229: GO 18211
18231: POP
18232: POP
// end ; end ;
18233: PPOPN 4
18235: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
18236: LD_INT 0
18238: PPUSH
// begin if GetWeapon ( vehicle ) = 53 then
18239: LD_VAR 0 1
18243: PPUSH
18244: CALL_OW 264
18248: PUSH
18249: LD_INT 53
18251: EQUAL
18252: IFFALSE 18384
// begin uc_side = 3 ;
18254: LD_ADDR_OWVAR 20
18258: PUSH
18259: LD_INT 3
18261: ST_TO_ADDR
// uc_nation = 3 ;
18262: LD_ADDR_OWVAR 21
18266: PUSH
18267: LD_INT 3
18269: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
18270: LD_INT 0
18272: PPUSH
18273: LD_EXP 17
18277: PPUSH
18278: CALL_OW 383
// driver := CreateHuman ;
18282: LD_ADDR_VAR 0 3
18286: PUSH
18287: CALL_OW 44
18291: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
18292: LD_VAR 0 3
18296: PPUSH
18297: LD_VAR 0 2
18301: PPUSH
18302: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
18306: LD_VAR 0 1
18310: PPUSH
18311: LD_INT 21
18313: PPUSH
18314: CALL 4973 0 2
// AddComMoveXY ( vehicle , 104 , 73 ) ;
18318: LD_VAR 0 1
18322: PPUSH
18323: LD_INT 104
18325: PPUSH
18326: LD_INT 73
18328: PPUSH
18329: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18333: LD_VAR 0 3
18337: PPUSH
18338: CALL_OW 181
// AddComEnterUnit ( driver , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
18342: LD_VAR 0 3
18346: PPUSH
18347: LD_INT 22
18349: PUSH
18350: LD_INT 3
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 30
18359: PUSH
18360: LD_INT 3
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL_OW 69
18375: PUSH
18376: LD_INT 1
18378: ARRAY
18379: PPUSH
18380: CALL_OW 180
// end ; end ;
18384: PPOPN 3
18386: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18387: LD_INT 0
18389: PPUSH
18390: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18391: LD_VAR 0 1
18395: PPUSH
18396: CALL_OW 255
18400: PUSH
18401: LD_INT 3
18403: EQUAL
18404: PUSH
18405: LD_VAR 0 1
18409: PPUSH
18410: CALL_OW 247
18414: PUSH
18415: LD_INT 2
18417: EQUAL
18418: AND
18419: IFFALSE 18513
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 264
18430: PUSH
18431: LD_INT 42
18433: EQUAL
18434: PUSH
18435: LD_VAR 0 1
18439: PPUSH
18440: CALL_OW 264
18444: PUSH
18445: LD_INT 43
18447: EQUAL
18448: OR
18449: PUSH
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 264
18459: PUSH
18460: LD_INT 44
18462: EQUAL
18463: OR
18464: IFFALSE 18513
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18466: LD_INT 24
18468: PPUSH
18469: LD_VAR 0 1
18473: PPUSH
18474: CALL_OW 265
18478: PPUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 262
18488: PPUSH
18489: LD_VAR 0 1
18493: PPUSH
18494: CALL_OW 263
18498: PPUSH
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL_OW 264
18508: PPUSH
18509: CALL_OW 185
// end ;
18513: PPOPN 3
18515: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18516: LD_VAR 0 1
18520: PPUSH
18521: CALL_OW 255
18525: PUSH
18526: LD_INT 3
18528: EQUAL
18529: PUSH
18530: LD_VAR 0 2
18534: PPUSH
18535: CALL_OW 255
18539: PUSH
18540: LD_INT 3
18542: EQUAL
18543: AND
18544: PUSH
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 302
18554: AND
18555: IFFALSE 18597
// begin ComRepairVehicle ( human , vehicle ) ;
18557: LD_VAR 0 2
18561: PPUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18571: LD_VAR 0 2
18575: PPUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18585: LD_VAR 0 1
18589: PPUSH
18590: LD_INT 100
18592: PPUSH
18593: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL_OW 255
18606: PUSH
18607: LD_INT 3
18609: EQUAL
18610: PUSH
18611: LD_VAR 0 2
18615: PPUSH
18616: CALL_OW 255
18620: PUSH
18621: LD_INT 3
18623: EQUAL
18624: AND
18625: PUSH
18626: LD_INT 24
18628: PPUSH
18629: CALL_OW 302
18633: AND
18634: PUSH
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 302
18644: NOT
18645: AND
18646: IFFALSE 18660
// ComEnterUnit ( human , rubfact0 ) ;
18648: LD_VAR 0 2
18652: PPUSH
18653: LD_INT 24
18655: PPUSH
18656: CALL_OW 120
// end ;
18660: PPOPN 2
18662: END
// on Command ( comandid ) do var i , j , tmp ;
18663: LD_INT 0
18665: PPUSH
18666: PPUSH
18667: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18668: LD_ADDR_VAR 0 2
18672: PUSH
18673: LD_INT 22
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: LD_INT 21
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 21
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 69
18719: PUSH
18720: FOR_IN
18721: IFFALSE 18831
// begin if GetTaskList ( i ) > 0 then
18723: LD_VAR 0 2
18727: PPUSH
18728: CALL_OW 437
18732: PUSH
18733: LD_INT 0
18735: GREATER
18736: IFFALSE 18829
// begin for j = 1 to GetTaskList ( i ) do
18738: LD_ADDR_VAR 0 3
18742: PUSH
18743: DOUBLE
18744: LD_INT 1
18746: DEC
18747: ST_TO_ADDR
18748: LD_VAR 0 2
18752: PPUSH
18753: CALL_OW 437
18757: PUSH
18758: FOR_TO
18759: IFFALSE 18827
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18761: LD_ADDR_VAR 0 4
18765: PUSH
18766: LD_VAR 0 2
18770: PPUSH
18771: CALL_OW 437
18775: PUSH
18776: LD_VAR 0 3
18780: ARRAY
18781: PUSH
18782: LD_INT 4
18784: ARRAY
18785: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18786: LD_VAR 0 4
18790: PPUSH
18791: CALL_OW 255
18795: PUSH
18796: LD_INT 4
18798: EQUAL
18799: PUSH
18800: LD_VAR 0 4
18804: PPUSH
18805: CALL_OW 255
18809: PUSH
18810: LD_INT 0
18812: EQUAL
18813: OR
18814: IFFALSE 18825
// ComStop ( i ) ;
18816: LD_VAR 0 2
18820: PPUSH
18821: CALL_OW 141
// end ;
18825: GO 18758
18827: POP
18828: POP
// end ; end ;
18829: GO 18720
18831: POP
18832: POP
// end ; end_of_file
18833: PPOPN 4
18835: END
// every 10 10$0 do
18836: GO 18838
18838: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 1 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18839: LD_INT 5
18841: PPUSH
18842: LD_INT 3
18844: PPUSH
18845: LD_INT 1
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: LD_INT 3
18853: PUSH
18854: LD_INT 4
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: PUSH
18862: LD_OWVAR 67
18866: ARRAY
18867: PLUS
18868: PPUSH
18869: LD_INT 0
18871: PPUSH
18872: LD_INT 0
18874: PPUSH
18875: LD_INT 0
18877: PPUSH
18878: LD_INT 0
18880: PPUSH
18881: LD_EXP 16
18885: PPUSH
18886: LD_EXP 17
18890: PPUSH
18891: CALL_OW 12
18895: PPUSH
18896: LD_INT 4
18898: PPUSH
18899: LD_INT 14
18901: PPUSH
18902: LD_INT 1
18904: PPUSH
18905: LD_INT 2
18907: PPUSH
18908: CALL 7678 0 12
// end ;
18912: END
// every 20 20$0 do
18913: GO 18915
18915: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18916: LD_INT 5
18918: PPUSH
18919: LD_INT 3
18921: PPUSH
18922: LD_INT 3
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: LD_INT 3
18930: PUSH
18931: LD_INT 4
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: PUSH
18939: LD_OWVAR 67
18943: ARRAY
18944: PLUS
18945: PPUSH
18946: LD_INT 0
18948: PPUSH
18949: LD_INT 0
18951: PPUSH
18952: LD_INT 0
18954: PPUSH
18955: LD_INT 2
18957: PPUSH
18958: LD_EXP 16
18962: PPUSH
18963: LD_EXP 17
18967: PPUSH
18968: CALL_OW 12
18972: PPUSH
18973: LD_INT 4
18975: PPUSH
18976: LD_INT 14
18978: PPUSH
18979: LD_INT 1
18981: PPUSH
18982: LD_INT 1
18984: PPUSH
18985: CALL 7678 0 12
// end ;
18989: END
// every 25 25$0 do
18990: GO 18992
18992: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18993: LD_INT 4
18995: PPUSH
18996: LD_INT 5
18998: PPUSH
18999: LD_INT 3
19001: PUSH
19002: LD_INT 4
19004: PUSH
19005: LD_INT 5
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: PUSH
19013: LD_OWVAR 67
19017: ARRAY
19018: PPUSH
19019: LD_EXP 16
19023: PPUSH
19024: LD_EXP 17
19028: PPUSH
19029: CALL_OW 12
19033: PPUSH
19034: LD_INT 3
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_INT 42
19045: PUSH
19046: LD_INT 42
19048: PUSH
19049: LD_INT 43
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 42
19059: PUSH
19060: LD_INT 43
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 43
19069: PUSH
19070: LD_INT 43
19072: PUSH
19073: LD_INT 43
19075: PUSH
19076: LD_INT 44
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: PUSH
19090: LD_OWVAR 67
19094: ARRAY
19095: PPUSH
19096: EMPTY
19097: PPUSH
19098: EMPTY
19099: PPUSH
19100: LD_INT 1
19102: PPUSH
19103: CALL 9491 0 11
// end ; end_of_file
19107: END
// every 0 0$1 trigger startTimer = 1 do
19108: LD_EXP 30
19112: PUSH
19113: LD_INT 1
19115: EQUAL
19116: IFFALSE 19246
19118: GO 19120
19120: DISABLE
// begin enable ;
19121: ENABLE
// if timerStatus = 1 then
19122: LD_EXP 29
19126: PUSH
19127: LD_INT 1
19129: EQUAL
19130: IFFALSE 19163
// begin timeToSupport = timeToSupport - 0 0$01 ;
19132: LD_ADDR_EXP 28
19136: PUSH
19137: LD_EXP 28
19141: PUSH
19142: LD_INT 35
19144: MINUS
19145: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19146: LD_ADDR_OWVAR 47
19150: PUSH
19151: LD_STRING #Am04-1
19153: PUSH
19154: LD_EXP 28
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: ST_TO_ADDR
// end ; if timerStatus = 2 then
19163: LD_EXP 29
19167: PUSH
19168: LD_INT 2
19170: EQUAL
19171: IFFALSE 19204
// begin timeToSupport = timeToSupport - 0 0$01 ;
19173: LD_ADDR_EXP 28
19177: PUSH
19178: LD_EXP 28
19182: PUSH
19183: LD_INT 35
19185: MINUS
19186: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19187: LD_ADDR_OWVAR 47
19191: PUSH
19192: LD_STRING #Am04-2
19194: PUSH
19195: LD_EXP 28
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: ST_TO_ADDR
// end ; if timerStatus = 3 then
19204: LD_EXP 29
19208: PUSH
19209: LD_INT 3
19211: EQUAL
19212: IFFALSE 19228
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19214: LD_ADDR_EXP 27
19218: PUSH
19219: LD_EXP 27
19223: PUSH
19224: LD_INT 35
19226: MINUS
19227: ST_TO_ADDR
// end ; if timerStatus = 4 then
19228: LD_EXP 29
19232: PUSH
19233: LD_INT 4
19235: EQUAL
19236: IFFALSE 19246
// begin display_strings =  ;
19238: LD_ADDR_OWVAR 47
19242: PUSH
19243: LD_STRING 
19245: ST_TO_ADDR
// end ; end ; end_of_file
19246: END
// every 0 0$1 trigger IsDead ( JMM ) do
19247: LD_EXP 1
19251: PPUSH
19252: CALL_OW 301
19256: IFFALSE 19268
19258: GO 19260
19260: DISABLE
// YouLost ( JMM ) ;
19261: LD_STRING JMM
19263: PPUSH
19264: CALL_OW 104
19268: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19269: LD_INT 4
19271: PPUSH
19272: CALL_OW 301
19276: IFFALSE 19288
19278: GO 19280
19280: DISABLE
// YouLost ( Base ) ; end_of_file
19281: LD_STRING Base
19283: PPUSH
19284: CALL_OW 104
19288: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
19289: LD_EXP 15
19293: PPUSH
19294: CALL_OW 301
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_INT 3
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 21
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PPUSH
19323: CALL_OW 69
19327: PUSH
19328: LD_INT 14
19330: PUSH
19331: LD_INT 13
19333: PUSH
19334: LD_INT 12
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: LIST
19341: PUSH
19342: LD_OWVAR 67
19346: ARRAY
19347: LESS
19348: AND
19349: IFFALSE 19820
19351: GO 19353
19353: DISABLE
19354: LD_INT 0
19356: PPUSH
19357: PPUSH
// begin AIEnable = 0 ;
19358: LD_ADDR_EXP 37
19362: PUSH
19363: LD_INT 0
19365: ST_TO_ADDR
// escapeAvalaible = 1 ;
19366: LD_ADDR_EXP 40
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// InGameOn ;
19374: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19378: LD_INT 3
19380: PPUSH
19381: LD_INT 1
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: LD_INT 0
19389: PPUSH
19390: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19394: LD_INT 6
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: LD_INT 0
19405: PPUSH
19406: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19410: LD_INT 5
19412: PPUSH
19413: LD_INT 1
19415: PPUSH
19416: LD_INT 1
19418: PPUSH
19419: LD_INT 0
19421: PPUSH
19422: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19426: LD_INT 3
19428: PPUSH
19429: LD_INT 1
19431: PPUSH
19432: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19436: LD_INT 97
19438: PPUSH
19439: LD_INT 91
19441: PPUSH
19442: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19446: LD_INT 22
19448: PUSH
19449: LD_INT 3
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 21
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PPUSH
19470: CALL_OW 69
19474: PPUSH
19475: CALL_OW 121
// wait ( 0 0$01 ) ;
19479: LD_INT 35
19481: PPUSH
19482: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19486: LD_INT 22
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 21
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PPUSH
19510: CALL_OW 69
19514: PPUSH
19515: LD_INT 124
19517: PPUSH
19518: LD_INT 98
19520: PPUSH
19521: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19525: LD_INT 22
19527: PUSH
19528: LD_INT 5
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 21
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PPUSH
19549: CALL_OW 69
19553: PPUSH
19554: CALL_OW 121
// wait ( 0 0$01 ) ;
19558: LD_INT 35
19560: PPUSH
19561: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19565: LD_INT 22
19567: PUSH
19568: LD_INT 5
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 21
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PPUSH
19589: CALL_OW 69
19593: PPUSH
19594: LD_INT 124
19596: PPUSH
19597: LD_INT 98
19599: PPUSH
19600: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19604: LD_INT 22
19606: PUSH
19607: LD_INT 6
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 21
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PPUSH
19628: CALL_OW 69
19632: PPUSH
19633: CALL_OW 121
// wait ( 0 0$01 ) ;
19637: LD_INT 35
19639: PPUSH
19640: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19644: LD_INT 22
19646: PUSH
19647: LD_INT 6
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 21
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PPUSH
19668: CALL_OW 69
19672: PPUSH
19673: LD_INT 124
19675: PPUSH
19676: LD_INT 98
19678: PPUSH
19679: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19683: LD_INT 22
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 21
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PPUSH
19707: CALL_OW 69
19711: PPUSH
19712: LD_INT 124
19714: PPUSH
19715: LD_INT 98
19717: PPUSH
19718: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19722: LD_INT 124
19724: PPUSH
19725: LD_INT 98
19727: PPUSH
19728: CALL_OW 84
// p := 0 0$0 ;
19732: LD_ADDR_VAR 0 2
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19740: LD_INT 35
19742: PPUSH
19743: CALL_OW 67
// p := p + 0 0$1 ;
19747: LD_ADDR_VAR 0 2
19751: PUSH
19752: LD_VAR 0 2
19756: PUSH
19757: LD_INT 35
19759: PLUS
19760: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19761: LD_INT 23
19763: PUSH
19764: LD_INT 3
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 24
19783: PUSH
19784: LD_INT 250
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: LIST
19795: PPUSH
19796: CALL_OW 69
19800: PUSH
19801: LD_INT 0
19803: EQUAL
19804: PUSH
19805: LD_VAR 0 2
19809: PUSH
19810: LD_INT 245
19812: GREATEREQUAL
19813: OR
19814: IFFALSE 19740
// FinishMission ;
19816: CALL 19993 0 0
// end ;
19820: PPOPN 2
19822: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19823: LD_EXP 40
19827: PUSH
19828: LD_INT 1
19830: EQUAL
19831: IFFALSE 19990
19833: GO 19835
19835: DISABLE
19836: LD_INT 0
19838: PPUSH
// begin enable ;
19839: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19840: LD_ADDR_VAR 0 1
19844: PUSH
19845: LD_INT 22
19847: PUSH
19848: LD_INT 3
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PPUSH
19855: CALL_OW 69
19859: PUSH
19860: FOR_IN
19861: IFFALSE 19888
// if IsInArea ( i , RussianEscape ) then
19863: LD_VAR 0 1
19867: PPUSH
19868: LD_INT 5
19870: PPUSH
19871: CALL_OW 308
19875: IFFALSE 19886
// RemoveUnit ( i ) ;
19877: LD_VAR 0 1
19881: PPUSH
19882: CALL_OW 64
19886: GO 19860
19888: POP
19889: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19890: LD_ADDR_VAR 0 1
19894: PUSH
19895: LD_INT 22
19897: PUSH
19898: LD_INT 5
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PPUSH
19905: CALL_OW 69
19909: PUSH
19910: FOR_IN
19911: IFFALSE 19938
// if IsInArea ( i , RussianEscape ) then
19913: LD_VAR 0 1
19917: PPUSH
19918: LD_INT 5
19920: PPUSH
19921: CALL_OW 308
19925: IFFALSE 19936
// RemoveUnit ( i ) ;
19927: LD_VAR 0 1
19931: PPUSH
19932: CALL_OW 64
19936: GO 19910
19938: POP
19939: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19940: LD_ADDR_VAR 0 1
19944: PUSH
19945: LD_INT 22
19947: PUSH
19948: LD_INT 6
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PPUSH
19955: CALL_OW 69
19959: PUSH
19960: FOR_IN
19961: IFFALSE 19988
// if IsInArea ( i , RussianEscape ) then
19963: LD_VAR 0 1
19967: PPUSH
19968: LD_INT 5
19970: PPUSH
19971: CALL_OW 308
19975: IFFALSE 19986
// RemoveUnit ( i ) ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 64
19986: GO 19960
19988: POP
19989: POP
// end ;
19990: PPOPN 1
19992: END
// export function FinishMission ; var tmp ; begin
19993: LD_INT 0
19995: PPUSH
19996: PPUSH
// SaveBase ( GammBaseArea ) ;
19997: LD_INT 22
19999: PPUSH
20000: CALL 20553 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
20004: LD_INT 69
20006: PPUSH
20007: LD_INT 1
20009: PPUSH
20010: CALL_OW 321
20014: PPUSH
20015: LD_STRING GatlingInGamma
20017: PPUSH
20018: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
20022: LD_EXP 34
20026: PUSH
20027: LD_INT 1
20029: EQUAL
20030: PUSH
20031: LD_EXP 35
20035: PUSH
20036: LD_INT 1
20038: EQUAL
20039: AND
20040: IFFALSE 20054
// begin AddMedal ( oil , 1 ) ;
20042: LD_STRING oil
20044: PPUSH
20045: LD_INT 1
20047: PPUSH
20048: CALL_OW 101
// end else
20052: GO 20147
// begin if buildOil = 1 and buildPower = 0 then
20054: LD_EXP 34
20058: PUSH
20059: LD_INT 1
20061: EQUAL
20062: PUSH
20063: LD_EXP 35
20067: PUSH
20068: LD_INT 0
20070: EQUAL
20071: AND
20072: IFFALSE 20085
// AddMedal ( oil , - 1 ) ;
20074: LD_STRING oil
20076: PPUSH
20077: LD_INT 1
20079: NEG
20080: PPUSH
20081: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
20085: LD_EXP 34
20089: PUSH
20090: LD_INT 0
20092: EQUAL
20093: PUSH
20094: LD_EXP 35
20098: PUSH
20099: LD_INT 1
20101: EQUAL
20102: AND
20103: IFFALSE 20116
// AddMedal ( oil , - 2 ) ;
20105: LD_STRING oil
20107: PPUSH
20108: LD_INT 2
20110: NEG
20111: PPUSH
20112: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
20116: LD_EXP 34
20120: PUSH
20121: LD_INT 0
20123: EQUAL
20124: PUSH
20125: LD_EXP 35
20129: PUSH
20130: LD_INT 0
20132: EQUAL
20133: AND
20134: IFFALSE 20147
// AddMedal ( oil , - 3 ) ;
20136: LD_STRING oil
20138: PPUSH
20139: LD_INT 3
20141: NEG
20142: PPUSH
20143: CALL_OW 101
// end ; if lostCounter > 3 then
20147: LD_EXP 38
20151: PUSH
20152: LD_INT 3
20154: GREATER
20155: IFFALSE 20170
// begin AddMedal ( deaths , - 1 ) ;
20157: LD_STRING deaths
20159: PPUSH
20160: LD_INT 1
20162: NEG
20163: PPUSH
20164: CALL_OW 101
// end else
20168: GO 20180
// begin AddMedal ( deaths , 1 ) ;
20170: LD_STRING deaths
20172: PPUSH
20173: LD_INT 1
20175: PPUSH
20176: CALL_OW 101
// end ; if honor = 1 then
20180: LD_EXP 39
20184: PUSH
20185: LD_INT 1
20187: EQUAL
20188: IFFALSE 20202
// begin AddMedal ( honour , 1 ) ;
20190: LD_STRING honour
20192: PPUSH
20193: LD_INT 1
20195: PPUSH
20196: CALL_OW 101
// end else
20200: GO 20213
// begin AddMedal ( honour , - 1 ) ;
20202: LD_STRING honour
20204: PPUSH
20205: LD_INT 1
20207: NEG
20208: PPUSH
20209: CALL_OW 101
// end ; GiveMedals ( Main ) ;
20213: LD_STRING Main
20215: PPUSH
20216: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20220: LD_INT 22
20222: PUSH
20223: LD_INT 1
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 23
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 21
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: PPUSH
20255: CALL_OW 69
20259: PPUSH
20260: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20264: LD_EXP 1
20268: PPUSH
20269: LD_EXP 44
20273: PUSH
20274: LD_STRING JMM
20276: STR
20277: PPUSH
20278: CALL_OW 38
// if IsOK ( Bobby ) then
20282: LD_EXP 2
20286: PPUSH
20287: CALL_OW 302
20291: IFFALSE 20311
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20293: LD_EXP 2
20297: PPUSH
20298: LD_EXP 44
20302: PUSH
20303: LD_STRING Bobby
20305: STR
20306: PPUSH
20307: CALL_OW 38
// if IsOK ( Cyrus ) then
20311: LD_EXP 3
20315: PPUSH
20316: CALL_OW 302
20320: IFFALSE 20340
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20322: LD_EXP 3
20326: PPUSH
20327: LD_EXP 44
20331: PUSH
20332: LD_STRING Cyrus
20334: STR
20335: PPUSH
20336: CALL_OW 38
// if IsOK ( Lisa ) then
20340: LD_EXP 4
20344: PPUSH
20345: CALL_OW 302
20349: IFFALSE 20369
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20351: LD_EXP 4
20355: PPUSH
20356: LD_EXP 44
20360: PUSH
20361: LD_STRING Lisa
20363: STR
20364: PPUSH
20365: CALL_OW 38
// if IsOK ( Brown ) then
20369: LD_EXP 7
20373: PPUSH
20374: CALL_OW 302
20378: IFFALSE 20398
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20380: LD_EXP 7
20384: PPUSH
20385: LD_EXP 44
20389: PUSH
20390: LD_STRING Brown
20392: STR
20393: PPUSH
20394: CALL_OW 38
// if IsOK ( Donaldson ) then
20398: LD_EXP 13
20402: PPUSH
20403: CALL_OW 302
20407: IFFALSE 20427
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20409: LD_EXP 13
20413: PPUSH
20414: LD_EXP 44
20418: PUSH
20419: LD_STRING Donaldson
20421: STR
20422: PPUSH
20423: CALL_OW 38
// if IsOK ( Frank ) then
20427: LD_EXP 5
20431: PPUSH
20432: CALL_OW 302
20436: IFFALSE 20456
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20438: LD_EXP 5
20442: PPUSH
20443: LD_EXP 44
20447: PUSH
20448: LD_STRING Frank
20450: STR
20451: PPUSH
20452: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20456: LD_INT 50
20458: PUSH
20459: EMPTY
20460: LIST
20461: PUSH
20462: LD_INT 22
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 21
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: LIST
20486: PPUSH
20487: CALL_OW 69
20491: PUSH
20492: LD_EXP 1
20496: PUSH
20497: LD_EXP 2
20501: PUSH
20502: LD_EXP 3
20506: PUSH
20507: LD_EXP 4
20511: PUSH
20512: LD_EXP 7
20516: PUSH
20517: LD_EXP 13
20521: PUSH
20522: LD_EXP 5
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: DIFF
20536: PPUSH
20537: LD_STRING 04_other_survivors
20539: PPUSH
20540: CALL_OW 38
// YouWin ;
20544: CALL_OW 103
// end ;
20548: LD_VAR 0 1
20552: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20553: LD_INT 0
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
// gammaBase = [ ] ;
20559: LD_ADDR_VAR 0 4
20563: PUSH
20564: EMPTY
20565: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
20566: LD_ADDR_VAR 0 5
20570: PUSH
20571: LD_VAR 0 1
20575: PPUSH
20576: LD_INT 22
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 21
20588: PUSH
20589: LD_INT 3
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PPUSH
20600: CALL_OW 70
20604: ST_TO_ADDR
// for i in buildings do
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: LD_VAR 0 5
20614: PUSH
20615: FOR_IN
20616: IFFALSE 20953
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20618: LD_VAR 0 3
20622: PPUSH
20623: CALL_OW 266
20627: PUSH
20628: LD_INT 6
20630: PUSH
20631: LD_INT 7
20633: PUSH
20634: LD_INT 8
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: IN
20642: IFFALSE 20756
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20644: LD_ADDR_VAR 0 4
20648: PUSH
20649: LD_VAR 0 4
20653: PUSH
20654: LD_VAR 0 3
20658: PPUSH
20659: CALL_OW 266
20663: PUSH
20664: LD_VAR 0 3
20668: PPUSH
20669: CALL_OW 250
20673: PUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: CALL_OW 251
20683: PUSH
20684: LD_VAR 0 3
20688: PPUSH
20689: CALL_OW 254
20693: PUSH
20694: LD_VAR 0 3
20698: PPUSH
20699: CALL_OW 267
20703: PUSH
20704: LD_VAR 0 3
20708: PPUSH
20709: CALL_OW 248
20713: PUSH
20714: LD_VAR 0 3
20718: PPUSH
20719: LD_INT 1
20721: PPUSH
20722: CALL_OW 268
20726: PUSH
20727: LD_VAR 0 3
20731: PPUSH
20732: LD_INT 2
20734: PPUSH
20735: CALL_OW 268
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: ADD
20753: ST_TO_ADDR
20754: GO 20951
// if GetBType ( i ) in [ b_bunker ] then
20756: LD_VAR 0 3
20760: PPUSH
20761: CALL_OW 266
20765: PUSH
20766: LD_INT 32
20768: PUSH
20769: EMPTY
20770: LIST
20771: IN
20772: IFFALSE 20869
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20774: LD_ADDR_VAR 0 4
20778: PUSH
20779: LD_VAR 0 4
20783: PUSH
20784: LD_VAR 0 3
20788: PPUSH
20789: CALL_OW 266
20793: PUSH
20794: LD_VAR 0 3
20798: PPUSH
20799: CALL_OW 250
20803: PUSH
20804: LD_VAR 0 3
20808: PPUSH
20809: CALL_OW 251
20813: PUSH
20814: LD_VAR 0 3
20818: PPUSH
20819: CALL_OW 254
20823: PUSH
20824: LD_VAR 0 3
20828: PPUSH
20829: CALL_OW 267
20833: PUSH
20834: LD_VAR 0 3
20838: PPUSH
20839: CALL_OW 248
20843: PUSH
20844: LD_VAR 0 3
20848: PPUSH
20849: CALL_OW 269
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: PUSH
20863: EMPTY
20864: LIST
20865: ADD
20866: ST_TO_ADDR
20867: GO 20951
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20869: LD_ADDR_VAR 0 4
20873: PUSH
20874: LD_VAR 0 4
20878: PUSH
20879: LD_VAR 0 3
20883: PPUSH
20884: CALL_OW 266
20888: PUSH
20889: LD_VAR 0 3
20893: PPUSH
20894: CALL_OW 250
20898: PUSH
20899: LD_VAR 0 3
20903: PPUSH
20904: CALL_OW 251
20908: PUSH
20909: LD_VAR 0 3
20913: PPUSH
20914: CALL_OW 254
20918: PUSH
20919: LD_VAR 0 3
20923: PPUSH
20924: CALL_OW 267
20928: PUSH
20929: LD_VAR 0 3
20933: PPUSH
20934: CALL_OW 248
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: PUSH
20947: EMPTY
20948: LIST
20949: ADD
20950: ST_TO_ADDR
// end ;
20951: GO 20615
20953: POP
20954: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20955: LD_VAR 0 4
20959: PPUSH
20960: LD_STRING GammaBase
20962: PPUSH
20963: CALL_OW 39
// end ; end_of_file
20967: LD_VAR 0 2
20971: RET
// every 1 1$15 do
20972: GO 20974
20974: DISABLE
// begin if supply <= 13 and supply > 7 then
20975: LD_EXP 36
20979: PUSH
20980: LD_INT 13
20982: LESSEQUAL
20983: PUSH
20984: LD_EXP 36
20988: PUSH
20989: LD_INT 7
20991: GREATER
20992: AND
20993: IFFALSE 21016
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20995: LD_INT 3
20997: PPUSH
20998: LD_INT 5
21000: PPUSH
21001: CALL_OW 12
21005: PPUSH
21006: LD_INT 18
21008: PPUSH
21009: LD_INT 1
21011: PPUSH
21012: CALL_OW 55
// if supply <= 7 and supply > 4 then
21016: LD_EXP 36
21020: PUSH
21021: LD_INT 7
21023: LESSEQUAL
21024: PUSH
21025: LD_EXP 36
21029: PUSH
21030: LD_INT 4
21032: GREATER
21033: AND
21034: IFFALSE 21057
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
21036: LD_INT 3
21038: PPUSH
21039: LD_INT 5
21041: PPUSH
21042: CALL_OW 12
21046: PPUSH
21047: LD_INT 19
21049: PPUSH
21050: LD_INT 1
21052: PPUSH
21053: CALL_OW 55
// if supply <= 4 and supply > 0 then
21057: LD_EXP 36
21061: PUSH
21062: LD_INT 4
21064: LESSEQUAL
21065: PUSH
21066: LD_EXP 36
21070: PUSH
21071: LD_INT 0
21073: GREATER
21074: AND
21075: IFFALSE 21098
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
21077: LD_INT 3
21079: PPUSH
21080: LD_INT 5
21082: PPUSH
21083: CALL_OW 12
21087: PPUSH
21088: LD_INT 20
21090: PPUSH
21091: LD_INT 1
21093: PPUSH
21094: CALL_OW 55
// if supply > 0 then
21098: LD_EXP 36
21102: PUSH
21103: LD_INT 0
21105: GREATER
21106: IFFALSE 21123
// begin supply = supply - 1 ;
21108: LD_ADDR_EXP 36
21112: PUSH
21113: LD_EXP 36
21117: PUSH
21118: LD_INT 1
21120: MINUS
21121: ST_TO_ADDR
// enable ;
21122: ENABLE
// end ; end ;
21123: END
