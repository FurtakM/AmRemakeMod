Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

if exist_mode then
   unit := CreateCharacter(ident)
  else
   unit := NewCharacter(ident);

result := unit;
End;

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, rnd;
begin
    rnd = rand(1, characters);  

    for i = 1 to characters do
    begin

       if i = rnd AND GetSex(characters[i]) = 1 then Say(characters[i], dialogMID);
       if i = rnd AND GetSex(characters[i]) = 2 then Say(characters[i], dialogFID);

    end;
  
end;

Export function PrepareDifficulty;
var tmp;
begin
    if Difficulty = 1 then
    begin
        RuSolMinLevel = 8;
        RuSolMaxLevel = 10;
    end;   

    if Difficulty = 2 then
    begin
        RuSolMinLevel = 9;
        RuSolMaxLevel = 10;

        uc_nation = 3;
        uc_side = 3;

        bc_level = 10;
        bc_type = b_turret;
        tmp = CreateAndPlaceBuildingXYD(86, 34, 2);
        PlaceWeaponTurret(tmp, 49);
    end; 

    if Difficulty = 3 then
    begin
        RuSolMinLevel = 10;
        RuSolMaxLevel = 10;

        uc_nation = 3;
        uc_side = 3;

        bc_level = 10;
        bc_type = b_turret;
        tmp = CreateAndPlaceBuildingXYD(86, 34, 2);
        PlaceWeaponTurret(tmp, 49);
        tmp = CreateAndPlaceBuildingXYD(93, 31, 2);
        PlaceWeaponTurret(tmp, 49);
    end;
end;

Export function ShowQuery1;
begin
    case query('Q1') of
        1: result = 1;
        2: result = 2;
        3: result = 3;
    end;
end;

Export function ShowQuery2;
begin
    case query('Q1a') of
        1: result = 1;
        2: result = 2;
        3: result = 3;
    end;
end;

Export function ShowQuery3;
begin
    case query('Q2') of
        1: result = 1;
        2: result = 2;
        3: result = 3;
        4: result = 4;
    end;
end;

Export function ShowQuery4;
begin
    case query('Q2K') of
        1: result = 1;
        2: result = 2;
        3: result = 3;
        4: result = 4;
    end;
end;

Export function ShowQuery5;
begin
    case query('Q2a') of
        1: result = 1;
        2: result = 2;
        3: result = 3;
        4: result = 4;
    end;
end;
Export function ShowQuery6;
begin
    case query('Q2aK') of
        1: result = 1;
        2: result = 2;
        3: result = 3;
        4: result = 4;
    end;
end;
Export function ShowQuery7;
begin
    case query('Q2b') of
        1: result = 1;
        2: result = 2;
        3: result = 3;
    end;
end;
Export function ShowQuery8;
begin
    case query('Q2c') of
        1: result = 1;
        2: result = 2;
    end;
end;
Export function ShowQuery9;
begin
    case query('Q2cK') of
        1: result = 1;
        2: result = 2;
    end;
end;


Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un, tmp;
begin

   for i = 1 to count do
   begin

      uc_side = side;
      uc_nation = nation;

      hc_gallery = '';
      hc_name = '';
      PrepareHuman(false, class, skill);

      un = CreateHuman;
      PlaceHumanInUnit(un,build);

   end;

END;

Export function ResAllTechs(side, lab, nation);
var i, tech, cout;
begin

  For i = 1 to 72 do
    If GetTech(i, side) = state_enabled and TechNationAvailable(i, nation) = true then AddComResearch(lab, i);

end;

Export function RepairAndRebuildBase(side, building, area, destroyedBuildings);
var buildings_list, i,engineerOkInside, engineerOkOutside, j;
begin

  engineerOkInside = UnitsInside(building);
  engineerOkOutside = FilterUnitsInArea(area,[[f_side, side], [f_class, 2], [f_lives, 750], [f_not, [f_inside]]]);
  buildings_list = FilterUnitsInArea(area,[[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

  if not buildings_list and not FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 250]]) then exit;

  if buildings_list > 0 and engineerOkInside then ComExitBuilding(engineerOkInside);

  if buildings_list > 0  and engineerOkOutside > 0 then ComRepairBuilding(engineerOkOutside, buildings_list[1]);

  if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then ComEnterUnit(engineerOkOutside, building);

  if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0  then ComBuild(engineerOkOutside, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);


END;

Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list, sci_listOutside,  i, j, damageUnits, unitsToHeal, tmp, rnd;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_nation ,2], [f_lives, 251]]);
  sci_listOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_nation, 2], [f_class, 4], [f_ok]]);
  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 750]]]);
  unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_lives, 1000]]]);

  if not damageUnits and not unitsToHeal and not sci_list then exit;

  if damageUnits > 0 and sci_list > 0 then ComMoveToArea(damageUnits, healArea);

  if unitsToHeal > 0 and sci_list > 0 then ComExitBuilding(sci_list);

  if unitsToHeal > 0 and sci_listOutside > 0 then ComHeal(sci_listOutside, unitsToHeal[1]);

  if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
  begin
          tmp = FilterAllUnits([[f_side, side], [f_type, unit_building], [f_btype, b_lab_full]]);
          rnd = rand(1, tmp);
          ComEnterUnit(UnitFilter(sci_listOutside, [f_not, [f_hastask]]), tmp[rnd]);
  end;

END;

Export function BuildingVehicle(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i;
begin

    if FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) diff FilterUnitsInArea(RussianOutsideVehs, [[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
        for i = 1 to vehCount do AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);

END;

Export function AttackVehicles(side);
var i, j, vehiclesOK, target1, target2;
begin
    vehiclesOK = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 650]]) diff FilterUnitsInArea(RussianOutsideVehs, [[f_side, side], [f_type, unit_vehicle]]);

    if FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 1000]]) diff FilterUnitsInArea(RussianOutsideVehs, [[f_side, side], [f_type, unit_vehicle]]) >= [6, 8, 8][Difficulty] then
        repeat
            wait(0$1);

            vehiclesOK = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 650]]) diff FilterUnitsInArea(RussianOutsideVehs, [[f_side, side], [f_type, unit_vehicle]]);
                for j in vehiclesOK do
                begin
                    target1 := NearestUnitToUnit(FilterAllUnits([[f_enemy, side], [f_see, 1]]), j);
                    target2 := NearestUnitToUnit(FilterAllUnits([[[f_enemy, side], [f_see, 1], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), j);

                    If GetDistUnits(j, target1)+8 < GetDistUnits(j, target2) then ComAttackUnit(j, target1)
                    else ComAttackUnit(j, target2);
                end;

        until FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 1000]]) diff FilterUnitsInArea(RussianOutsideVehs, [[f_side, side], [f_type, unit_vehicle]]) = 0;
end;
