// export JMM , Donaldson , Lisa , Cyrus , Denis , Frank , Cornell , Campell ; export Brown , Gary , amCargo1 , amCargo2 ; export Bobby , amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export secondPass ; export RuScientists ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// RuScientists = [ ] ;
   8: LD_ADDR_EXP 24
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// secondPass = 0 ;
  15: LD_ADDR_EXP 23
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// PrepareAmericanHeroes ;
  23: CALL 44 0 0
// PrepareRussianCommander ;
  27: CALL 1315 0 0
// PrepareWestBase ;
  31: CALL 1619 0 0
// PrepareEastBase ;
  35: CALL 1375 0 0
// PrepareOtherRussians ;
  39: CALL 1695 0 0
// end ; end_of_file
  43: END
// export function PrepareAmericanHeroes ; begin
  44: LD_INT 0
  46: PPUSH
// uc_side = 1 ;
  47: LD_ADDR_OWVAR 20
  51: PUSH
  52: LD_INT 1
  54: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_STRING JMM
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: CALL 3426 0 2
  70: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
  71: LD_ADDR_EXP 2
  75: PUSH
  76: LD_STRING Donaldson
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL 3426 0 2
  86: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
  87: LD_ADDR_EXP 3
  91: PUSH
  92: LD_STRING Lisa
  94: PPUSH
  95: LD_INT 0
  97: PPUSH
  98: CALL 3426 0 2
 102: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 103: LD_ADDR_EXP 4
 107: PUSH
 108: LD_STRING Cyrus
 110: PPUSH
 111: LD_INT 0
 113: PPUSH
 114: CALL 3426 0 2
 118: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_STRING Denis
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: CALL 3426 0 2
 134: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 135: LD_ADDR_EXP 6
 139: PUSH
 140: LD_STRING Frank
 142: PPUSH
 143: LD_INT 0
 145: PPUSH
 146: CALL 3426 0 2
 150: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornell , false ) ;
 151: LD_ADDR_EXP 7
 155: PUSH
 156: LD_STRING Cornell
 158: PPUSH
 159: LD_INT 0
 161: PPUSH
 162: CALL 3426 0 2
 166: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_STRING Powell
 174: PPUSH
 175: LD_INT 0
 177: PPUSH
 178: CALL 3426 0 2
 182: ST_TO_ADDR
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 183: LD_EXP 1
 187: PPUSH
 188: LD_INT 4
 190: PPUSH
 191: LD_INT 0
 193: PPUSH
 194: CALL_OW 49
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 198: LD_EXP 2
 202: PPUSH
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: CALL_OW 49
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 213: LD_EXP 3
 217: PPUSH
 218: LD_INT 4
 220: PPUSH
 221: LD_INT 0
 223: PPUSH
 224: CALL_OW 49
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 228: LD_EXP 4
 232: PPUSH
 233: LD_INT 4
 235: PPUSH
 236: LD_INT 0
 238: PPUSH
 239: CALL_OW 49
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 243: LD_EXP 5
 247: PPUSH
 248: LD_INT 4
 250: PPUSH
 251: LD_INT 0
 253: PPUSH
 254: CALL_OW 49
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 258: LD_EXP 6
 262: PPUSH
 263: LD_INT 4
 265: PPUSH
 266: LD_INT 0
 268: PPUSH
 269: CALL_OW 49
// PlaceUnitArea ( Cornell , PlayerSpawn , false ) ;
 273: LD_EXP 7
 277: PPUSH
 278: LD_INT 4
 280: PPUSH
 281: LD_INT 0
 283: PPUSH
 284: CALL_OW 49
// end ;
 288: LD_VAR 0 1
 292: RET
// export function PowellSupport1 ; var veh , un ; begin
 293: LD_INT 0
 295: PPUSH
 296: PPUSH
 297: PPUSH
// uc_side = 1 ;
 298: LD_ADDR_OWVAR 20
 302: PUSH
 303: LD_INT 1
 305: ST_TO_ADDR
// uc_nation = 1 ;
 306: LD_ADDR_OWVAR 21
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 314: LD_ADDR_EXP 9
 318: PUSH
 319: LD_STRING Brown
 321: PPUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL 3426 0 2
 329: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
 330: LD_ADDR_EXP 10
 334: PUSH
 335: LD_STRING Gary
 337: PPUSH
 338: LD_INT 0
 340: PPUSH
 341: CALL 3426 0 2
 345: ST_TO_ADDR
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
 346: LD_EXP 9
 350: PPUSH
 351: LD_INT 4
 353: PPUSH
 354: LD_INT 0
 356: PPUSH
 357: CALL_OW 49
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
 361: LD_EXP 10
 365: PPUSH
 366: LD_INT 4
 368: PPUSH
 369: LD_INT 0
 371: PPUSH
 372: CALL_OW 49
// SetClass ( Brown , 2 ) ;
 376: LD_EXP 9
 380: PPUSH
 381: LD_INT 2
 383: PPUSH
 384: CALL_OW 336
// hc_gallery =  ;
 388: LD_ADDR_OWVAR 33
 392: PUSH
 393: LD_STRING 
 395: ST_TO_ADDR
// hc_name =  ;
 396: LD_ADDR_OWVAR 26
 400: PUSH
 401: LD_STRING 
 403: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
 404: LD_ADDR_OWVAR 37
 408: PUSH
 409: LD_INT 3
 411: ST_TO_ADDR
// vc_engine = 3 ;
 412: LD_ADDR_OWVAR 39
 416: PUSH
 417: LD_INT 3
 419: ST_TO_ADDR
// vc_control = 1 ;
 420: LD_ADDR_OWVAR 38
 424: PUSH
 425: LD_INT 1
 427: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 428: LD_ADDR_OWVAR 40
 432: PUSH
 433: LD_INT 4
 435: ST_TO_ADDR
// veh = CreateVehicle ;
 436: LD_ADDR_VAR 0 2
 440: PUSH
 441: CALL_OW 45
 445: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 446: LD_VAR 0 2
 450: PPUSH
 451: LD_INT 4
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL_OW 49
// SetDir ( veh , 4 ) ;
 461: LD_VAR 0 2
 465: PPUSH
 466: LD_INT 4
 468: PPUSH
 469: CALL_OW 233
// PrepareHuman ( false , 4 , 10 ) ;
 473: LD_INT 0
 475: PPUSH
 476: LD_INT 4
 478: PPUSH
 479: LD_INT 10
 481: PPUSH
 482: CALL_OW 380
// un = CreateHuman ;
 486: LD_ADDR_VAR 0 3
 490: PUSH
 491: CALL_OW 44
 495: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 496: LD_VAR 0 3
 500: PPUSH
 501: LD_VAR 0 2
 505: PPUSH
 506: CALL_OW 52
// vc_chassis = us_medium_wheeled ;
 510: LD_ADDR_OWVAR 37
 514: PUSH
 515: LD_INT 2
 517: ST_TO_ADDR
// vc_weapon = us_double_gun ;
 518: LD_ADDR_OWVAR 40
 522: PUSH
 523: LD_INT 5
 525: ST_TO_ADDR
// veh = CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 4
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL_OW 49
// SetDir ( veh , 4 ) ;
 551: LD_VAR 0 2
 555: PPUSH
 556: LD_INT 4
 558: PPUSH
 559: CALL_OW 233
// PrepareHuman ( false , 4 , 10 ) ;
 563: LD_INT 0
 565: PPUSH
 566: LD_INT 4
 568: PPUSH
 569: LD_INT 10
 571: PPUSH
 572: CALL_OW 380
// un = CreateHuman ;
 576: LD_ADDR_VAR 0 3
 580: PUSH
 581: CALL_OW 44
 585: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 586: LD_VAR 0 3
 590: PPUSH
 591: LD_VAR 0 2
 595: PPUSH
 596: CALL_OW 52
// vc_control = 3 ;
 600: LD_ADDR_OWVAR 38
 604: PUSH
 605: LD_INT 3
 607: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
 608: LD_ADDR_OWVAR 40
 612: PUSH
 613: LD_INT 12
 615: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
 616: LD_ADDR_EXP 11
 620: PUSH
 621: CALL_OW 45
 625: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
 626: LD_ADDR_EXP 12
 630: PUSH
 631: CALL_OW 45
 635: ST_TO_ADDR
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
 636: LD_EXP 11
 640: PPUSH
 641: LD_INT 4
 643: PPUSH
 644: LD_INT 0
 646: PPUSH
 647: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
 651: LD_EXP 12
 655: PPUSH
 656: LD_INT 4
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// SetDir ( amCargo1 , 4 ) ;
 666: LD_EXP 11
 670: PPUSH
 671: LD_INT 4
 673: PPUSH
 674: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
 678: LD_EXP 12
 682: PPUSH
 683: LD_INT 4
 685: PPUSH
 686: CALL_OW 233
// AddCargo ( amCargo1 , 3 , 100 ) ;
 690: LD_EXP 11
 694: PPUSH
 695: LD_INT 3
 697: PPUSH
 698: LD_INT 100
 700: PPUSH
 701: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
 705: LD_EXP 12
 709: PPUSH
 710: LD_INT 1
 712: PPUSH
 713: LD_INT 80
 715: PPUSH
 716: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
 720: LD_EXP 12
 724: PPUSH
 725: LD_INT 3
 727: PPUSH
 728: LD_INT 20
 730: PPUSH
 731: CALL_OW 291
// end ;
 735: LD_VAR 0 1
 739: RET
// export function PowellSupport2 ; var veh , un ; begin
 740: LD_INT 0
 742: PPUSH
 743: PPUSH
 744: PPUSH
// uc_side = 1 ;
 745: LD_ADDR_OWVAR 20
 749: PUSH
 750: LD_INT 1
 752: ST_TO_ADDR
// uc_nation = 1 ;
 753: LD_ADDR_OWVAR 21
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
 761: LD_ADDR_EXP 13
 765: PUSH
 766: LD_STRING Bobby
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL 3426 0 2
 776: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 777: LD_ADDR_EXP 8
 781: PUSH
 782: LD_STRING Campell
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL 3426 0 2
 792: ST_TO_ADDR
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 793: LD_EXP 13
 797: PPUSH
 798: LD_INT 4
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
// hc_gallery =  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// hc_name =  ;
 816: LD_ADDR_OWVAR 26
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
 824: LD_ADDR_OWVAR 37
 828: PUSH
 829: LD_INT 2
 831: ST_TO_ADDR
// vc_engine = 3 ;
 832: LD_ADDR_OWVAR 39
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_control = 1 ;
 840: LD_ADDR_OWVAR 38
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_weapon = us_light_gun ;
 848: LD_ADDR_OWVAR 40
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// veh = CreateVehicle ;
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: CALL_OW 45
 865: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 866: LD_VAR 0 2
 870: PPUSH
 871: LD_INT 4
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: CALL_OW 49
// SetDir ( veh , 4 ) ;
 881: LD_VAR 0 2
 885: PPUSH
 886: LD_INT 4
 888: PPUSH
 889: CALL_OW 233
// PlaceHumanInUnit ( Campell , veh ) ;
 893: LD_EXP 8
 897: PPUSH
 898: LD_VAR 0 2
 902: PPUSH
 903: CALL_OW 52
// vc_control = 3 ;
 907: LD_ADDR_OWVAR 38
 911: PUSH
 912: LD_INT 3
 914: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
 915: LD_ADDR_OWVAR 40
 919: PUSH
 920: LD_INT 12
 922: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
 923: LD_ADDR_EXP 14
 927: PUSH
 928: CALL_OW 45
 932: ST_TO_ADDR
// amCargo4 = CreateVehicle ;
 933: LD_ADDR_EXP 15
 937: PUSH
 938: CALL_OW 45
 942: ST_TO_ADDR
// amCargo5 = CreateVehicle ;
 943: LD_ADDR_EXP 16
 947: PUSH
 948: CALL_OW 45
 952: ST_TO_ADDR
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
 953: LD_EXP 14
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
 968: LD_EXP 15
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
 983: LD_EXP 16
 987: PPUSH
 988: LD_INT 4
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL_OW 49
// SetDir ( amCargo3 , 4 ) ;
 998: LD_EXP 14
1002: PPUSH
1003: LD_INT 4
1005: PPUSH
1006: CALL_OW 233
// SetDir ( amCargo4 , 4 ) ;
1010: LD_EXP 15
1014: PPUSH
1015: LD_INT 4
1017: PPUSH
1018: CALL_OW 233
// SetDir ( amCargo5 , 4 ) ;
1022: LD_EXP 16
1026: PPUSH
1027: LD_INT 4
1029: PPUSH
1030: CALL_OW 233
// AddCargo ( amCargo3 , 1 , 100 ) ;
1034: LD_EXP 14
1038: PPUSH
1039: LD_INT 1
1041: PPUSH
1042: LD_INT 100
1044: PPUSH
1045: CALL_OW 291
// AddCargo ( amCargo4 , 2 , 100 ) ;
1049: LD_EXP 15
1053: PPUSH
1054: LD_INT 2
1056: PPUSH
1057: LD_INT 100
1059: PPUSH
1060: CALL_OW 291
// AddCargo ( amCargo5 , 1 , 50 ) ;
1064: LD_EXP 16
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: LD_INT 50
1074: PPUSH
1075: CALL_OW 291
// AddCargo ( amCargo5 , 2 , 50 ) ;
1079: LD_EXP 16
1083: PPUSH
1084: LD_INT 2
1086: PPUSH
1087: LD_INT 50
1089: PPUSH
1090: CALL_OW 291
// end ;
1094: LD_VAR 0 1
1098: RET
// export function PowellSupport3 ; var veh , un ; begin
1099: LD_INT 0
1101: PPUSH
1102: PPUSH
1103: PPUSH
// uc_side = 1 ;
1104: LD_ADDR_OWVAR 20
1108: PUSH
1109: LD_INT 1
1111: ST_TO_ADDR
// uc_nation = 1 ;
1112: LD_ADDR_OWVAR 21
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// hc_gallery =  ;
1120: LD_ADDR_OWVAR 33
1124: PUSH
1125: LD_STRING 
1127: ST_TO_ADDR
// hc_name =  ;
1128: LD_ADDR_OWVAR 26
1132: PUSH
1133: LD_STRING 
1135: ST_TO_ADDR
// PrepareHuman ( false , 1 , 10 ) ;
1136: LD_INT 0
1138: PPUSH
1139: LD_INT 1
1141: PPUSH
1142: LD_INT 10
1144: PPUSH
1145: CALL_OW 380
// un = CreateHuman ;
1149: LD_ADDR_VAR 0 3
1153: PUSH
1154: CALL_OW 44
1158: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_INT 4
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// vc_chassis = us_medium_wheeled ;
1174: LD_ADDR_OWVAR 37
1178: PUSH
1179: LD_INT 2
1181: ST_TO_ADDR
// vc_engine = 3 ;
1182: LD_ADDR_OWVAR 39
1186: PUSH
1187: LD_INT 3
1189: ST_TO_ADDR
// vc_control = 3 ;
1190: LD_ADDR_OWVAR 38
1194: PUSH
1195: LD_INT 3
1197: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1198: LD_ADDR_OWVAR 40
1202: PUSH
1203: LD_INT 12
1205: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
1206: LD_ADDR_EXP 17
1210: PUSH
1211: CALL_OW 45
1215: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
1216: LD_ADDR_EXP 18
1220: PUSH
1221: CALL_OW 45
1225: ST_TO_ADDR
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
1226: LD_EXP 17
1230: PPUSH
1231: LD_INT 4
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
1241: LD_EXP 18
1245: PPUSH
1246: LD_INT 4
1248: PPUSH
1249: LD_INT 0
1251: PPUSH
1252: CALL_OW 49
// SetDir ( amCargo6 , 4 ) ;
1256: LD_EXP 17
1260: PPUSH
1261: LD_INT 4
1263: PPUSH
1264: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
1268: LD_EXP 18
1272: PPUSH
1273: LD_INT 4
1275: PPUSH
1276: CALL_OW 233
// AddCargo ( amCargo6 , 1 , 100 ) ;
1280: LD_EXP 17
1284: PPUSH
1285: LD_INT 1
1287: PPUSH
1288: LD_INT 100
1290: PPUSH
1291: CALL_OW 291
// AddCargo ( amCargo7 , 2 , 100 ) ;
1295: LD_EXP 18
1299: PPUSH
1300: LD_INT 2
1302: PPUSH
1303: LD_INT 100
1305: PPUSH
1306: CALL_OW 291
// end ; end_of_file
1310: LD_VAR 0 1
1314: RET
// export function PrepareRussianCommander ; begin
1315: LD_INT 0
1317: PPUSH
// uc_side = 3 ;
1318: LD_ADDR_OWVAR 20
1322: PUSH
1323: LD_INT 3
1325: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Davidov
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL 3426 0 2
1341: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
1342: LD_EXP 20
1346: PPUSH
1347: LD_INT 3
1349: PPUSH
1350: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
1354: LD_ADDR_EXP 24
1358: PUSH
1359: LD_EXP 24
1363: PUSH
1364: LD_EXP 20
1368: ADD
1369: ST_TO_ADDR
// end ;
1370: LD_VAR 0 1
1374: RET
// export function PrepareEastBase ; var i , un ; begin
1375: LD_INT 0
1377: PPUSH
1378: PPUSH
1379: PPUSH
// RespawnInside ( 3 , 3 , rueastdepot , 10 , 2 , 6 ) ;
1380: LD_INT 3
1382: PPUSH
1383: LD_INT 3
1385: PPUSH
1386: LD_INT 4
1388: PPUSH
1389: LD_INT 10
1391: PPUSH
1392: LD_INT 2
1394: PPUSH
1395: LD_INT 6
1397: PPUSH
1398: CALL 4343 0 6
// RespawnInside ( 3 , 3 , rulab2 , 10 , 4 , 6 ) ;
1402: LD_INT 3
1404: PPUSH
1405: LD_INT 3
1407: PPUSH
1408: LD_INT 47
1410: PPUSH
1411: LD_INT 10
1413: PPUSH
1414: LD_INT 4
1416: PPUSH
1417: LD_INT 6
1419: PPUSH
1420: CALL 4343 0 6
// RespawnInside ( 3 , 3 , rulab3 , 10 , 4 , 6 ) ;
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: LD_INT 44
1432: PPUSH
1433: LD_INT 10
1435: PPUSH
1436: LD_INT 4
1438: PPUSH
1439: LD_INT 6
1441: PPUSH
1442: CALL 4343 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1446: LD_ADDR_VAR 0 2
1450: PUSH
1451: LD_INT 22
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: LD_INT 30
1463: PUSH
1464: LD_INT 32
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: PPUSH
1475: CALL_OW 69
1479: PUSH
1480: FOR_IN
1481: IFFALSE 1509
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
1483: LD_INT 3
1485: PPUSH
1486: LD_INT 3
1488: PPUSH
1489: LD_VAR 0 2
1493: PPUSH
1494: LD_INT 10
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_INT 1
1502: PPUSH
1503: CALL 4343 0 6
1507: GO 1480
1509: POP
1510: POP
// for i = 1 to 5 do
1511: LD_ADDR_VAR 0 2
1515: PUSH
1516: DOUBLE
1517: LD_INT 1
1519: DEC
1520: ST_TO_ADDR
1521: LD_INT 5
1523: PUSH
1524: FOR_TO
1525: IFFALSE 1612
// begin uc_side = 3 ;
1527: LD_ADDR_OWVAR 20
1531: PUSH
1532: LD_INT 3
1534: ST_TO_ADDR
// uc_nation = 3 ;
1535: LD_ADDR_OWVAR 21
1539: PUSH
1540: LD_INT 3
1542: ST_TO_ADDR
// hc_gallery =  ;
1543: LD_ADDR_OWVAR 33
1547: PUSH
1548: LD_STRING 
1550: ST_TO_ADDR
// hc_name =  ;
1551: LD_ADDR_OWVAR 26
1555: PUSH
1556: LD_STRING 
1558: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
1559: LD_INT 0
1561: PPUSH
1562: LD_INT 4
1564: PPUSH
1565: LD_INT 10
1567: PPUSH
1568: CALL_OW 380
// un = CreateHuman ;
1572: LD_ADDR_VAR 0 3
1576: PUSH
1577: CALL_OW 44
1581: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
1582: LD_VAR 0 3
1586: PPUSH
1587: LD_INT 3
1589: PPUSH
1590: CALL_OW 52
// RuScientists = RuScientists ^ un ;
1594: LD_ADDR_EXP 24
1598: PUSH
1599: LD_EXP 24
1603: PUSH
1604: LD_VAR 0 3
1608: ADD
1609: ST_TO_ADDR
// end ;
1610: GO 1524
1612: POP
1613: POP
// end ;
1614: LD_VAR 0 1
1618: RET
// export function PrepareWestBase ; var i , un ; begin
1619: LD_INT 0
1621: PPUSH
1622: PPUSH
1623: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , 10 , 2 , 6 ) ;
1624: LD_INT 3
1626: PPUSH
1627: LD_INT 3
1629: PPUSH
1630: LD_INT 6
1632: PPUSH
1633: LD_INT 10
1635: PPUSH
1636: LD_INT 2
1638: PPUSH
1639: LD_INT 6
1641: PPUSH
1642: CALL 4343 0 6
// RespawnInside ( 3 , 3 , rulab1 , 10 , 4 , 6 ) ;
1646: LD_INT 3
1648: PPUSH
1649: LD_INT 3
1651: PPUSH
1652: LD_INT 91
1654: PPUSH
1655: LD_INT 10
1657: PPUSH
1658: LD_INT 4
1660: PPUSH
1661: LD_INT 6
1663: PPUSH
1664: CALL 4343 0 6
// RespawnInside ( 3 , 3 , ru_fact , 10 , 3 , 6 ) ;
1668: LD_INT 3
1670: PPUSH
1671: LD_INT 3
1673: PPUSH
1674: LD_INT 21
1676: PPUSH
1677: LD_INT 10
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_INT 6
1685: PPUSH
1686: CALL 4343 0 6
// end ;
1690: LD_VAR 0 1
1694: RET
// export function PrepareOtherRussians ; var i , un ; begin
1695: LD_INT 0
1697: PPUSH
1698: PPUSH
1699: PPUSH
// uc_side = 3 ;
1700: LD_ADDR_OWVAR 20
1704: PUSH
1705: LD_INT 3
1707: ST_TO_ADDR
// uc_nation = 3 ;
1708: LD_ADDR_OWVAR 21
1712: PUSH
1713: LD_INT 3
1715: ST_TO_ADDR
// for i = 1 to 5 do
1716: LD_ADDR_VAR 0 2
1720: PUSH
1721: DOUBLE
1722: LD_INT 1
1724: DEC
1725: ST_TO_ADDR
1726: LD_INT 5
1728: PUSH
1729: FOR_TO
1730: IFFALSE 1788
// begin hc_gallery =  ;
1732: LD_ADDR_OWVAR 33
1736: PUSH
1737: LD_STRING 
1739: ST_TO_ADDR
// hc_name =  ;
1740: LD_ADDR_OWVAR 26
1744: PUSH
1745: LD_STRING 
1747: ST_TO_ADDR
// PrepareHuman ( false , 9 , 10 ) ;
1748: LD_INT 0
1750: PPUSH
1751: LD_INT 9
1753: PPUSH
1754: LD_INT 10
1756: PPUSH
1757: CALL_OW 380
// un = CreateHuman ;
1761: LD_ADDR_VAR 0 3
1765: PUSH
1766: CALL_OW 44
1770: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
1771: LD_VAR 0 3
1775: PPUSH
1776: LD_INT 8
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: CALL_OW 49
// end ;
1786: GO 1729
1788: POP
1789: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: DOUBLE
1796: LD_INT 1
1798: DEC
1799: ST_TO_ADDR
1800: LD_INT 2
1802: PUSH
1803: LD_INT 3
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_OWVAR 67
1818: ARRAY
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1879
// begin hc_gallery =  ;
1823: LD_ADDR_OWVAR 33
1827: PUSH
1828: LD_STRING 
1830: ST_TO_ADDR
// hc_name =  ;
1831: LD_ADDR_OWVAR 26
1835: PUSH
1836: LD_STRING 
1838: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 4
1844: PPUSH
1845: LD_INT 10
1847: PPUSH
1848: CALL_OW 380
// un = CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
1862: LD_VAR 0 3
1866: PPUSH
1867: LD_INT 8
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 49
// end ;
1877: GO 1820
1879: POP
1880: POP
// end ; end_of_file
1881: LD_VAR 0 1
1885: RET
// export function PrepareKurt ; begin
1886: LD_INT 0
1888: PPUSH
// uc_side = 8 ;
1889: LD_ADDR_OWVAR 20
1893: PUSH
1894: LD_INT 8
1896: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
1897: LD_ADDR_EXP 21
1901: PUSH
1902: LD_STRING Kurt
1904: PPUSH
1905: LD_INT 0
1907: PPUSH
1908: CALL 3426 0 2
1912: ST_TO_ADDR
// PlaceUnitArea ( Kurt , PlayerSpawn , false ) ;
1913: LD_EXP 21
1917: PPUSH
1918: LD_INT 4
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL_OW 49
// end ; end_of_file
1928: LD_VAR 0 1
1932: RET
// every 1 do var i ;
1933: GO 1935
1935: DISABLE
1936: LD_INT 0
1938: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
1939: LD_EXP 1
1943: PPUSH
1944: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
1948: LD_EXP 1
1952: PPUSH
1953: LD_STRING D1-JMM-1
1955: PPUSH
1956: CALL_OW 88
// Say ( Donaldson , D1-Don-1 ) ;
1960: LD_EXP 2
1964: PPUSH
1965: LD_STRING D1-Don-1
1967: PPUSH
1968: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1972: LD_EXP 1
1976: PPUSH
1977: LD_STRING D1-JMM-2
1979: PPUSH
1980: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
1984: LD_EXP 2
1988: PPUSH
1989: LD_STRING D1-Don-2
1991: PPUSH
1992: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
1996: LD_ADDR_VAR 0 1
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2066
// begin ComMoveXY ( i , 129 , 89 ) ;
2019: LD_VAR 0 1
2023: PPUSH
2024: LD_INT 129
2026: PPUSH
2027: LD_INT 89
2029: PPUSH
2030: CALL_OW 111
// AddComMoveXY ( i , 114 , 83 ) ;
2034: LD_VAR 0 1
2038: PPUSH
2039: LD_INT 114
2041: PPUSH
2042: LD_INT 83
2044: PPUSH
2045: CALL_OW 171
// AddComMoveXY ( i , 99 , 82 ) ;
2049: LD_VAR 0 1
2053: PPUSH
2054: LD_INT 99
2056: PPUSH
2057: LD_INT 82
2059: PPUSH
2060: CALL_OW 171
// end ;
2064: GO 2016
2066: POP
2067: POP
// end ;
2068: PPOPN 1
2070: END
// every 0 0$1 trigger SeeXY ( 1 , 93 , 75 ) do var i ;
2071: LD_INT 1
2073: PPUSH
2074: LD_INT 93
2076: PPUSH
2077: LD_INT 75
2079: PPUSH
2080: CALL_OW 293
2084: IFFALSE 2201
2086: GO 2088
2088: DISABLE
2089: LD_INT 0
2091: PPUSH
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D1-Sol1-2 ,  ) ;
2092: LD_INT 22
2094: PUSH
2095: LD_INT 1
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 26
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: LD_EXP 1
2120: PUSH
2121: EMPTY
2122: LIST
2123: DIFF
2124: PPUSH
2125: CALL_OW 69
2129: PPUSH
2130: LD_STRING D1-Sol1-2
2132: PPUSH
2133: LD_STRING 
2135: PPUSH
2136: CALL 3483 0 3
// Say ( JMM , D1-JMM-3 ) ;
2140: LD_EXP 1
2144: PPUSH
2145: LD_STRING D1-JMM-3
2147: PPUSH
2148: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
2152: LD_STRING M1
2154: PPUSH
2155: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
2159: LD_ADDR_VAR 0 1
2163: PUSH
2164: LD_INT 22
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2199
// ComMoveXY ( i , 87 , 68 ) ;
2182: LD_VAR 0 1
2186: PPUSH
2187: LD_INT 87
2189: PPUSH
2190: LD_INT 68
2192: PPUSH
2193: CALL_OW 111
2197: GO 2179
2199: POP
2200: POP
// end ;
2201: PPOPN 1
2203: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
2204: GO 2206
2206: DISABLE
2207: LD_INT 0
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 8
2220: PPUSH
2221: LD_INT 22
2223: PUSH
2224: LD_INT 3
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PUSH
2231: LD_INT 25
2233: PUSH
2234: LD_INT 9
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PPUSH
2245: CALL_OW 70
2249: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
2250: LD_ADDR_VAR 0 3
2254: PUSH
2255: LD_INT 22
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: EMPTY
2266: LIST
2267: PPUSH
2268: CALL_OW 69
2272: ST_TO_ADDR
// enable ;
2273: ENABLE
// for i in your_units do
2274: LD_ADDR_VAR 0 1
2278: PUSH
2279: LD_VAR 0 3
2283: PUSH
2284: FOR_IN
2285: IFFALSE 2796
// begin if See ( 3 , i ) then
2287: LD_INT 3
2289: PPUSH
2290: LD_VAR 0 1
2294: PPUSH
2295: CALL_OW 292
2299: IFFALSE 2794
// begin disable ;
2301: DISABLE
// ComTimeShift ( bazook_list , 87 , 68 ) ;
2302: LD_VAR 0 2
2306: PPUSH
2307: LD_INT 87
2309: PPUSH
2310: LD_INT 68
2312: PPUSH
2313: CALL_OW 154
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_INT 87
2324: PPUSH
2325: LD_INT 68
2327: PPUSH
2328: CALL_OW 214
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
2332: LD_VAR 0 2
2336: PPUSH
2337: LD_INT 87
2339: PPUSH
2340: LD_INT 68
2342: PPUSH
2343: CALL_OW 214
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
2347: LD_VAR 0 2
2351: PPUSH
2352: LD_INT 87
2354: PPUSH
2355: LD_INT 68
2357: PPUSH
2358: CALL_OW 214
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_INT 87
2369: PPUSH
2370: LD_INT 68
2372: PPUSH
2373: CALL_OW 214
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
2377: LD_VAR 0 2
2381: PPUSH
2382: LD_INT 87
2384: PPUSH
2385: LD_INT 68
2387: PPUSH
2388: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
2392: LD_EXP 1
2396: PPUSH
2397: LD_STRING D1a-JMM-1
2399: PPUSH
2400: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
2404: LD_EXP 2
2408: PPUSH
2409: LD_STRING D1a-Don-1
2411: PPUSH
2412: CALL_OW 88
// ComMoveXY ( i , 87 , 68 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_INT 87
2423: PPUSH
2424: LD_INT 68
2426: PPUSH
2427: CALL_OW 111
// Say ( JMM , D1a-JMM-2 ) ;
2431: LD_EXP 1
2435: PPUSH
2436: LD_STRING D1a-JMM-2
2438: PPUSH
2439: CALL_OW 88
// wait ( 0 0$10 ) ;
2443: LD_INT 350
2445: PPUSH
2446: CALL_OW 67
// Say ( Donaldson , D1b-Don-1 ) ;
2450: LD_EXP 2
2454: PPUSH
2455: LD_STRING D1b-Don-1
2457: PPUSH
2458: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
2462: LD_EXP 1
2466: PPUSH
2467: LD_STRING D1b-JMM-1
2469: PPUSH
2470: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 26
2486: PUSH
2487: LD_INT 1
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: LD_EXP 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: DIFF
2506: PPUSH
2507: CALL_OW 69
2511: PPUSH
2512: LD_STRING D1b-Sol1-1
2514: PPUSH
2515: LD_STRING 
2517: PPUSH
2518: CALL 3483 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
2522: LD_EXP 2
2526: PPUSH
2527: LD_STRING D1b-Don-2
2529: PPUSH
2530: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
2534: LD_EXP 1
2538: PPUSH
2539: LD_STRING D1b-JMM-2
2541: PPUSH
2542: CALL_OW 88
// dec = ShowQuery1 ;
2546: LD_ADDR_VAR 0 4
2550: PUSH
2551: CALL 3639 0 0
2555: ST_TO_ADDR
// if dec = 1 then
2556: LD_VAR 0 4
2560: PUSH
2561: LD_INT 1
2563: EQUAL
2564: IFFALSE 2670
// begin Say ( JMM , D2-JMM-1 ) ;
2566: LD_EXP 1
2570: PPUSH
2571: LD_STRING D2-JMM-1
2573: PPUSH
2574: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
2578: LD_EXP 19
2582: PPUSH
2583: LD_STRING D2-Pow-1
2585: PPUSH
2586: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
2590: LD_EXP 1
2594: PPUSH
2595: LD_STRING D2a-JMM-1
2597: PPUSH
2598: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
2602: LD_EXP 19
2606: PPUSH
2607: LD_STRING D2a-Pow-1
2609: PPUSH
2610: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
2614: LD_EXP 1
2618: PPUSH
2619: LD_STRING D2a-JMM-2
2621: PPUSH
2622: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
2626: LD_EXP 19
2630: PPUSH
2631: LD_STRING D2a-Pow-2
2633: PPUSH
2634: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
2638: LD_EXP 1
2642: PPUSH
2643: LD_STRING D2a-JMM-3
2645: PPUSH
2646: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
2650: LD_EXP 19
2654: PPUSH
2655: LD_STRING D2a-Pow-3
2657: PPUSH
2658: CALL_OW 94
// secondPass = 2 ;
2662: LD_ADDR_EXP 23
2666: PUSH
2667: LD_INT 2
2669: ST_TO_ADDR
// end ; if dec = 2 then
2670: LD_VAR 0 4
2674: PUSH
2675: LD_INT 2
2677: EQUAL
2678: IFFALSE 2772
// begin Say ( JMM , D2-JMM-1 ) ;
2680: LD_EXP 1
2684: PPUSH
2685: LD_STRING D2-JMM-1
2687: PPUSH
2688: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
2692: LD_EXP 19
2696: PPUSH
2697: LD_STRING D2-Pow-1
2699: PPUSH
2700: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
2704: LD_EXP 1
2708: PPUSH
2709: LD_STRING D2b-JMM-1
2711: PPUSH
2712: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
2716: LD_EXP 19
2720: PPUSH
2721: LD_STRING D2b-Pow-1
2723: PPUSH
2724: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
2728: LD_EXP 1
2732: PPUSH
2733: LD_STRING D2c-JMM-1
2735: PPUSH
2736: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
2740: LD_EXP 19
2744: PPUSH
2745: LD_STRING D2c-Pow-1
2747: PPUSH
2748: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
2752: LD_EXP 1
2756: PPUSH
2757: LD_STRING D2c-JMM-2
2759: PPUSH
2760: CALL_OW 88
// secondPass = 2 ;
2764: LD_ADDR_EXP 23
2768: PUSH
2769: LD_INT 2
2771: ST_TO_ADDR
// end ; if dec = 3 then
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 3
2779: EQUAL
2780: IFFALSE 2790
// secondPass = 1 ;
2782: LD_ADDR_EXP 23
2786: PUSH
2787: LD_INT 1
2789: ST_TO_ADDR
// InGameOff ;
2790: CALL_OW 9
// end ; end ;
2794: GO 2284
2796: POP
2797: POP
// end ;
2798: PPOPN 4
2800: END
// every 1 1$0 trigger secondPass = 2 do
2801: LD_EXP 23
2805: PUSH
2806: LD_INT 2
2808: EQUAL
2809: IFFALSE 2912
2811: GO 2813
2813: DISABLE
// begin PowellSupport1 ;
2814: CALL 293 0 0
// Say ( JMM , DC1-JMM-1 ) ;
2818: LD_EXP 1
2822: PPUSH
2823: LD_STRING DC1-JMM-1
2825: PPUSH
2826: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
2830: LD_EXP 19
2834: PPUSH
2835: LD_STRING DC1-Pow-1
2837: PPUSH
2838: CALL_OW 94
// wait ( 3 3$0 ) ;
2842: LD_INT 6300
2844: PPUSH
2845: CALL_OW 67
// PowellSupport2 ;
2849: CALL 740 0 0
// Say ( JMM , DC2-JMM-1 ) ;
2853: LD_EXP 1
2857: PPUSH
2858: LD_STRING DC2-JMM-1
2860: PPUSH
2861: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
2865: LD_EXP 19
2869: PPUSH
2870: LD_STRING DC2-Pow-1
2872: PPUSH
2873: CALL_OW 94
// wait ( 6 6$0 ) ;
2877: LD_INT 12600
2879: PPUSH
2880: CALL_OW 67
// PowellSupport3 ;
2884: CALL 1099 0 0
// SayRadio ( Powell , DC3-Pow-1 ) ;
2888: LD_EXP 19
2892: PPUSH
2893: LD_STRING DC3-Pow-1
2895: PPUSH
2896: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
2900: LD_EXP 1
2904: PPUSH
2905: LD_STRING DC3-JMM-1
2907: PPUSH
2908: CALL_OW 88
// end ;
2912: END
// every 4 4$30 trigger secondPass = 2 do var dec1 , dec2 ;
2913: LD_EXP 23
2917: PUSH
2918: LD_INT 2
2920: EQUAL
2921: IFFALSE 3423
2923: GO 2925
2925: DISABLE
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// begin PrepareKurt ;
2930: CALL 1886 0 0
// Say ( Kurt , D3-Kurt-1 ) ;
2934: LD_EXP 21
2938: PPUSH
2939: LD_STRING D3-Kurt-1
2941: PPUSH
2942: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2946: LD_EXP 1
2950: PPUSH
2951: LD_STRING D3-JMM-1
2953: PPUSH
2954: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
2958: LD_EXP 21
2962: PPUSH
2963: LD_STRING D3-Kurt-2
2965: PPUSH
2966: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2970: LD_EXP 1
2974: PPUSH
2975: LD_STRING D3-JMM-2
2977: PPUSH
2978: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
2982: LD_EXP 21
2986: PPUSH
2987: LD_STRING D3-Kurt-4
2989: PPUSH
2990: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
2994: LD_EXP 1
2998: PPUSH
2999: LD_STRING D3-JMM-4
3001: PPUSH
3002: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
3006: LD_EXP 21
3010: PPUSH
3011: LD_STRING D3-Kurt-5
3013: PPUSH
3014: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
3018: LD_EXP 21
3022: PPUSH
3023: LD_STRING D3-Kurt-5a
3025: PPUSH
3026: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
3030: LD_EXP 21
3034: PPUSH
3035: LD_STRING D3-Kurt-5b
3037: PPUSH
3038: CALL_OW 88
// dec1 = ShowQuery4 ;
3042: LD_ADDR_VAR 0 1
3046: PUSH
3047: CALL 3880 0 0
3051: ST_TO_ADDR
// if dec1 = 1 then
3052: LD_VAR 0 1
3056: PUSH
3057: LD_INT 1
3059: EQUAL
3060: IFFALSE 3086
// begin Say ( JMM , D3Ka-JMM-1 ) ;
3062: LD_EXP 1
3066: PPUSH
3067: LD_STRING D3Ka-JMM-1
3069: PPUSH
3070: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
3074: LD_EXP 21
3078: PPUSH
3079: LD_STRING D3Ka-Kurt-1
3081: PPUSH
3082: CALL_OW 88
// end ; if dec1 = 2 then
3086: LD_VAR 0 1
3090: PUSH
3091: LD_INT 2
3093: EQUAL
3094: IFFALSE 3120
// begin Say ( JMM , D3Kb-JMM-1 ) ;
3096: LD_EXP 1
3100: PPUSH
3101: LD_STRING D3Kb-JMM-1
3103: PPUSH
3104: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
3108: LD_EXP 21
3112: PPUSH
3113: LD_STRING D3Kb-Kurt-1
3115: PPUSH
3116: CALL_OW 88
// end ; if dec1 = 3 then
3120: LD_VAR 0 1
3124: PUSH
3125: LD_INT 3
3127: EQUAL
3128: IFFALSE 3314
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_STRING D3Kc1-JMM-1
3137: PPUSH
3138: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
3142: LD_EXP 21
3146: PPUSH
3147: LD_STRING D3Kc1-Kurt-1
3149: PPUSH
3150: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
3154: LD_EXP 1
3158: PPUSH
3159: LD_STRING D3Kc1-JMM-2
3161: PPUSH
3162: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
3166: LD_EXP 21
3170: PPUSH
3171: LD_STRING D3Kc1-Kurt-2
3173: PPUSH
3174: CALL_OW 88
// dec2 = ShowQuery7 ;
3178: LD_ADDR_VAR 0 2
3182: PUSH
3183: CALL 4159 0 0
3187: ST_TO_ADDR
// if dec2 = 1 then
3188: LD_VAR 0 2
3192: PUSH
3193: LD_INT 1
3195: EQUAL
3196: IFFALSE 3222
// begin Say ( JMM , D4a-JMM-1 ) ;
3198: LD_EXP 1
3202: PPUSH
3203: LD_STRING D4a-JMM-1
3205: PPUSH
3206: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
3210: LD_EXP 21
3214: PPUSH
3215: LD_STRING D4b-Kurt-1
3217: PPUSH
3218: CALL_OW 88
// end ; if dec2 = 2 then
3222: LD_VAR 0 2
3226: PUSH
3227: LD_INT 2
3229: EQUAL
3230: IFFALSE 3256
// begin Say ( JMM , D4b-JMM-1 ) ;
3232: LD_EXP 1
3236: PPUSH
3237: LD_STRING D4b-JMM-1
3239: PPUSH
3240: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
3244: LD_EXP 21
3248: PPUSH
3249: LD_STRING D4b-Kurt-1
3251: PPUSH
3252: CALL_OW 88
// end ; if dec2 = 3 then
3256: LD_VAR 0 2
3260: PUSH
3261: LD_INT 3
3263: EQUAL
3264: IFFALSE 3314
// begin Say ( JMM , D4c-JMM-1 ) ;
3266: LD_EXP 1
3270: PPUSH
3271: LD_STRING D4c-JMM-1
3273: PPUSH
3274: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
3278: LD_EXP 21
3282: PPUSH
3283: LD_STRING D4c-Kurt-1
3285: PPUSH
3286: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
3290: LD_EXP 1
3294: PPUSH
3295: LD_STRING D4c-JMM-2
3297: PPUSH
3298: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
3302: LD_EXP 21
3306: PPUSH
3307: LD_STRING D4c-Kurt-2
3309: PPUSH
3310: CALL_OW 88
// end ; end ; if dec1 = 4 then
3314: LD_VAR 0 1
3318: PUSH
3319: LD_INT 4
3321: EQUAL
3322: IFFALSE 3414
// begin Say ( Kurt , D3Kd-JMM-1 ) ;
3324: LD_EXP 21
3328: PPUSH
3329: LD_STRING D3Kd-JMM-1
3331: PPUSH
3332: CALL_OW 88
// dec2 = ShowQuery8 ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: CALL 4233 0 0
3345: ST_TO_ADDR
// if dec2 = 1 then
3346: LD_VAR 0 2
3350: PUSH
3351: LD_INT 1
3353: EQUAL
3354: IFFALSE 3380
// begin Say ( JMM , D3Ke-JMM-1 ) ;
3356: LD_EXP 1
3360: PPUSH
3361: LD_STRING D3Ke-JMM-1
3363: PPUSH
3364: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
3368: LD_EXP 21
3372: PPUSH
3373: LD_STRING D3Ke-Kurt-1
3375: PPUSH
3376: CALL_OW 88
// end ; if dec2 = 2 then
3380: LD_VAR 0 2
3384: PUSH
3385: LD_INT 2
3387: EQUAL
3388: IFFALSE 3414
// begin Say ( JMM , D5Ka-JMM-1 ) ;
3390: LD_EXP 1
3394: PPUSH
3395: LD_STRING D5Ka-JMM-1
3397: PPUSH
3398: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
3402: LD_EXP 21
3406: PPUSH
3407: LD_STRING D3Ke-Kurt-1
3409: PPUSH
3410: CALL_OW 88
// end ; end ; RemoveUnit ( Kurt ) ;
3414: LD_EXP 21
3418: PPUSH
3419: CALL_OW 64
// end ; end_of_file
3423: PPOPN 2
3425: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3426: LD_INT 0
3428: PPUSH
3429: PPUSH
// if exist_mode then
3430: LD_VAR 0 2
3434: IFFALSE 3453
// unit := CreateCharacter ( ident ) else
3436: LD_ADDR_VAR 0 4
3440: PUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 34
3450: ST_TO_ADDR
3451: GO 3468
// unit := NewCharacter ( ident ) ;
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: PPUSH
3463: CALL_OW 25
3467: ST_TO_ADDR
// result := unit ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: LD_VAR 0 4
3477: ST_TO_ADDR
// end ;
3478: LD_VAR 0 3
3482: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3483: LD_INT 0
3485: PPUSH
3486: PPUSH
3487: PPUSH
// rnd = rand ( 1 , characters ) ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: LD_INT 1
3495: PPUSH
3496: LD_VAR 0 1
3500: PPUSH
3501: CALL_OW 12
3505: ST_TO_ADDR
// for i = 1 to characters do
3506: LD_ADDR_VAR 0 5
3510: PUSH
3511: DOUBLE
3512: LD_INT 1
3514: DEC
3515: ST_TO_ADDR
3516: LD_VAR 0 1
3520: PUSH
3521: FOR_TO
3522: IFFALSE 3632
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3524: LD_VAR 0 5
3528: PUSH
3529: LD_VAR 0 6
3533: EQUAL
3534: PUSH
3535: LD_VAR 0 1
3539: PUSH
3540: LD_VAR 0 5
3544: ARRAY
3545: PPUSH
3546: CALL_OW 258
3550: PUSH
3551: LD_INT 1
3553: EQUAL
3554: AND
3555: IFFALSE 3577
// Say ( characters [ i ] , dialogMID ) ;
3557: LD_VAR 0 1
3561: PUSH
3562: LD_VAR 0 5
3566: ARRAY
3567: PPUSH
3568: LD_VAR 0 2
3572: PPUSH
3573: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3577: LD_VAR 0 5
3581: PUSH
3582: LD_VAR 0 6
3586: EQUAL
3587: PUSH
3588: LD_VAR 0 1
3592: PUSH
3593: LD_VAR 0 5
3597: ARRAY
3598: PPUSH
3599: CALL_OW 258
3603: PUSH
3604: LD_INT 2
3606: EQUAL
3607: AND
3608: IFFALSE 3630
// Say ( characters [ i ] , dialogFID ) ;
3610: LD_VAR 0 1
3614: PUSH
3615: LD_VAR 0 5
3619: ARRAY
3620: PPUSH
3621: LD_VAR 0 3
3625: PPUSH
3626: CALL_OW 88
// end ;
3630: GO 3521
3632: POP
3633: POP
// end ;
3634: LD_VAR 0 4
3638: RET
// export function ShowQuery1 ; begin
3639: LD_INT 0
3641: PPUSH
// case query ( Q1 ) of 1 :
3642: LD_STRING Q1
3644: PPUSH
3645: CALL_OW 97
3649: PUSH
3650: LD_INT 1
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3658
3656: GO 3669
3658: POP
// result = 1 ; 2 :
3659: LD_ADDR_VAR 0 1
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
3667: GO 3708
3669: LD_INT 2
3671: DOUBLE
3672: EQUAL
3673: IFTRUE 3677
3675: GO 3688
3677: POP
// result = 2 ; 3 :
3678: LD_ADDR_VAR 0 1
3682: PUSH
3683: LD_INT 2
3685: ST_TO_ADDR
3686: GO 3708
3688: LD_INT 3
3690: DOUBLE
3691: EQUAL
3692: IFTRUE 3696
3694: GO 3707
3696: POP
// result = 3 ; end ;
3697: LD_ADDR_VAR 0 1
3701: PUSH
3702: LD_INT 3
3704: ST_TO_ADDR
3705: GO 3708
3707: POP
// end ;
3708: LD_VAR 0 1
3712: RET
// export function ShowQuery2 ; begin
3713: LD_INT 0
3715: PPUSH
// case query ( Q1a ) of 1 :
3716: LD_STRING Q1a
3718: PPUSH
3719: CALL_OW 97
3723: PUSH
3724: LD_INT 1
3726: DOUBLE
3727: EQUAL
3728: IFTRUE 3732
3730: GO 3743
3732: POP
// result = 1 ; 2 :
3733: LD_ADDR_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: ST_TO_ADDR
3741: GO 3782
3743: LD_INT 2
3745: DOUBLE
3746: EQUAL
3747: IFTRUE 3751
3749: GO 3762
3751: POP
// result = 2 ; 3 :
3752: LD_ADDR_VAR 0 1
3756: PUSH
3757: LD_INT 2
3759: ST_TO_ADDR
3760: GO 3782
3762: LD_INT 3
3764: DOUBLE
3765: EQUAL
3766: IFTRUE 3770
3768: GO 3781
3770: POP
// result = 3 ; end ;
3771: LD_ADDR_VAR 0 1
3775: PUSH
3776: LD_INT 3
3778: ST_TO_ADDR
3779: GO 3782
3781: POP
// end ;
3782: LD_VAR 0 1
3786: RET
// export function ShowQuery3 ; begin
3787: LD_INT 0
3789: PPUSH
// case query ( Q2 ) of 1 :
3790: LD_STRING Q2
3792: PPUSH
3793: CALL_OW 97
3797: PUSH
3798: LD_INT 1
3800: DOUBLE
3801: EQUAL
3802: IFTRUE 3806
3804: GO 3817
3806: POP
// result = 1 ; 2 :
3807: LD_ADDR_VAR 0 1
3811: PUSH
3812: LD_INT 1
3814: ST_TO_ADDR
3815: GO 3875
3817: LD_INT 2
3819: DOUBLE
3820: EQUAL
3821: IFTRUE 3825
3823: GO 3836
3825: POP
// result = 2 ; 3 :
3826: LD_ADDR_VAR 0 1
3830: PUSH
3831: LD_INT 2
3833: ST_TO_ADDR
3834: GO 3875
3836: LD_INT 3
3838: DOUBLE
3839: EQUAL
3840: IFTRUE 3844
3842: GO 3855
3844: POP
// result = 3 ; 4 :
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 3
3852: ST_TO_ADDR
3853: GO 3875
3855: LD_INT 4
3857: DOUBLE
3858: EQUAL
3859: IFTRUE 3863
3861: GO 3874
3863: POP
// result = 4 ; end ;
3864: LD_ADDR_VAR 0 1
3868: PUSH
3869: LD_INT 4
3871: ST_TO_ADDR
3872: GO 3875
3874: POP
// end ;
3875: LD_VAR 0 1
3879: RET
// export function ShowQuery4 ; begin
3880: LD_INT 0
3882: PPUSH
// case query ( Q2K ) of 1 :
3883: LD_STRING Q2K
3885: PPUSH
3886: CALL_OW 97
3890: PUSH
3891: LD_INT 1
3893: DOUBLE
3894: EQUAL
3895: IFTRUE 3899
3897: GO 3910
3899: POP
// result = 1 ; 2 :
3900: LD_ADDR_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: ST_TO_ADDR
3908: GO 3968
3910: LD_INT 2
3912: DOUBLE
3913: EQUAL
3914: IFTRUE 3918
3916: GO 3929
3918: POP
// result = 2 ; 3 :
3919: LD_ADDR_VAR 0 1
3923: PUSH
3924: LD_INT 2
3926: ST_TO_ADDR
3927: GO 3968
3929: LD_INT 3
3931: DOUBLE
3932: EQUAL
3933: IFTRUE 3937
3935: GO 3948
3937: POP
// result = 3 ; 4 :
3938: LD_ADDR_VAR 0 1
3942: PUSH
3943: LD_INT 3
3945: ST_TO_ADDR
3946: GO 3968
3948: LD_INT 4
3950: DOUBLE
3951: EQUAL
3952: IFTRUE 3956
3954: GO 3967
3956: POP
// result = 4 ; end ;
3957: LD_ADDR_VAR 0 1
3961: PUSH
3962: LD_INT 4
3964: ST_TO_ADDR
3965: GO 3968
3967: POP
// end ;
3968: LD_VAR 0 1
3972: RET
// export function ShowQuery5 ; begin
3973: LD_INT 0
3975: PPUSH
// case query ( Q2a ) of 1 :
3976: LD_STRING Q2a
3978: PPUSH
3979: CALL_OW 97
3983: PUSH
3984: LD_INT 1
3986: DOUBLE
3987: EQUAL
3988: IFTRUE 3992
3990: GO 4003
3992: POP
// result = 1 ; 2 :
3993: LD_ADDR_VAR 0 1
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
4001: GO 4061
4003: LD_INT 2
4005: DOUBLE
4006: EQUAL
4007: IFTRUE 4011
4009: GO 4022
4011: POP
// result = 2 ; 3 :
4012: LD_ADDR_VAR 0 1
4016: PUSH
4017: LD_INT 2
4019: ST_TO_ADDR
4020: GO 4061
4022: LD_INT 3
4024: DOUBLE
4025: EQUAL
4026: IFTRUE 4030
4028: GO 4041
4030: POP
// result = 3 ; 4 :
4031: LD_ADDR_VAR 0 1
4035: PUSH
4036: LD_INT 3
4038: ST_TO_ADDR
4039: GO 4061
4041: LD_INT 4
4043: DOUBLE
4044: EQUAL
4045: IFTRUE 4049
4047: GO 4060
4049: POP
// result = 4 ; end ;
4050: LD_ADDR_VAR 0 1
4054: PUSH
4055: LD_INT 4
4057: ST_TO_ADDR
4058: GO 4061
4060: POP
// end ;
4061: LD_VAR 0 1
4065: RET
// export function ShowQuery6 ; begin
4066: LD_INT 0
4068: PPUSH
// case query ( Q2aK ) of 1 :
4069: LD_STRING Q2aK
4071: PPUSH
4072: CALL_OW 97
4076: PUSH
4077: LD_INT 1
4079: DOUBLE
4080: EQUAL
4081: IFTRUE 4085
4083: GO 4096
4085: POP
// result = 1 ; 2 :
4086: LD_ADDR_VAR 0 1
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
4094: GO 4154
4096: LD_INT 2
4098: DOUBLE
4099: EQUAL
4100: IFTRUE 4104
4102: GO 4115
4104: POP
// result = 2 ; 3 :
4105: LD_ADDR_VAR 0 1
4109: PUSH
4110: LD_INT 2
4112: ST_TO_ADDR
4113: GO 4154
4115: LD_INT 3
4117: DOUBLE
4118: EQUAL
4119: IFTRUE 4123
4121: GO 4134
4123: POP
// result = 3 ; 4 :
4124: LD_ADDR_VAR 0 1
4128: PUSH
4129: LD_INT 3
4131: ST_TO_ADDR
4132: GO 4154
4134: LD_INT 4
4136: DOUBLE
4137: EQUAL
4138: IFTRUE 4142
4140: GO 4153
4142: POP
// result = 4 ; end ;
4143: LD_ADDR_VAR 0 1
4147: PUSH
4148: LD_INT 4
4150: ST_TO_ADDR
4151: GO 4154
4153: POP
// end ;
4154: LD_VAR 0 1
4158: RET
// export function ShowQuery7 ; begin
4159: LD_INT 0
4161: PPUSH
// case query ( Q2b ) of 1 :
4162: LD_STRING Q2b
4164: PPUSH
4165: CALL_OW 97
4169: PUSH
4170: LD_INT 1
4172: DOUBLE
4173: EQUAL
4174: IFTRUE 4178
4176: GO 4189
4178: POP
// result = 1 ; 2 :
4179: LD_ADDR_VAR 0 1
4183: PUSH
4184: LD_INT 1
4186: ST_TO_ADDR
4187: GO 4228
4189: LD_INT 2
4191: DOUBLE
4192: EQUAL
4193: IFTRUE 4197
4195: GO 4208
4197: POP
// result = 2 ; 3 :
4198: LD_ADDR_VAR 0 1
4202: PUSH
4203: LD_INT 2
4205: ST_TO_ADDR
4206: GO 4228
4208: LD_INT 3
4210: DOUBLE
4211: EQUAL
4212: IFTRUE 4216
4214: GO 4227
4216: POP
// result = 3 ; end ;
4217: LD_ADDR_VAR 0 1
4221: PUSH
4222: LD_INT 3
4224: ST_TO_ADDR
4225: GO 4228
4227: POP
// end ;
4228: LD_VAR 0 1
4232: RET
// export function ShowQuery8 ; begin
4233: LD_INT 0
4235: PPUSH
// case query ( Q2c ) of 1 :
4236: LD_STRING Q2c
4238: PPUSH
4239: CALL_OW 97
4243: PUSH
4244: LD_INT 1
4246: DOUBLE
4247: EQUAL
4248: IFTRUE 4252
4250: GO 4263
4252: POP
// result = 1 ; 2 :
4253: LD_ADDR_VAR 0 1
4257: PUSH
4258: LD_INT 1
4260: ST_TO_ADDR
4261: GO 4283
4263: LD_INT 2
4265: DOUBLE
4266: EQUAL
4267: IFTRUE 4271
4269: GO 4282
4271: POP
// result = 2 ; end ;
4272: LD_ADDR_VAR 0 1
4276: PUSH
4277: LD_INT 2
4279: ST_TO_ADDR
4280: GO 4283
4282: POP
// end ;
4283: LD_VAR 0 1
4287: RET
// export function ShowQuery9 ; begin
4288: LD_INT 0
4290: PPUSH
// case query ( Q2cK ) of 1 :
4291: LD_STRING Q2cK
4293: PPUSH
4294: CALL_OW 97
4298: PUSH
4299: LD_INT 1
4301: DOUBLE
4302: EQUAL
4303: IFTRUE 4307
4305: GO 4318
4307: POP
// result = 1 ; 2 :
4308: LD_ADDR_VAR 0 1
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
4316: GO 4338
4318: LD_INT 2
4320: DOUBLE
4321: EQUAL
4322: IFTRUE 4326
4324: GO 4337
4326: POP
// result = 2 ; end ;
4327: LD_ADDR_VAR 0 1
4331: PUSH
4332: LD_INT 2
4334: ST_TO_ADDR
4335: GO 4338
4337: POP
// end ;
4338: LD_VAR 0 1
4342: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
4343: LD_INT 0
4345: PPUSH
4346: PPUSH
4347: PPUSH
4348: PPUSH
4349: PPUSH
// for i = 1 to count do
4350: LD_ADDR_VAR 0 8
4354: PUSH
4355: DOUBLE
4356: LD_INT 1
4358: DEC
4359: ST_TO_ADDR
4360: LD_VAR 0 6
4364: PUSH
4365: FOR_TO
4366: IFFALSE 4447
// begin uc_side = side ;
4368: LD_ADDR_OWVAR 20
4372: PUSH
4373: LD_VAR 0 1
4377: ST_TO_ADDR
// uc_nation = nation ;
4378: LD_ADDR_OWVAR 21
4382: PUSH
4383: LD_VAR 0 2
4387: ST_TO_ADDR
// hc_gallery =  ;
4388: LD_ADDR_OWVAR 33
4392: PUSH
4393: LD_STRING 
4395: ST_TO_ADDR
// hc_name =  ;
4396: LD_ADDR_OWVAR 26
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4404: LD_INT 0
4406: PPUSH
4407: LD_VAR 0 5
4411: PPUSH
4412: LD_VAR 0 4
4416: PPUSH
4417: CALL_OW 380
// un = CreateHuman ;
4421: LD_ADDR_VAR 0 10
4425: PUSH
4426: CALL_OW 44
4430: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4431: LD_VAR 0 10
4435: PPUSH
4436: LD_VAR 0 3
4440: PPUSH
4441: CALL_OW 52
// end ;
4445: GO 4365
4447: POP
4448: POP
// end ;
4449: LD_VAR 0 7
4453: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4454: LD_INT 0
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
// for i = 1 to 72 do
4460: LD_ADDR_VAR 0 5
4464: PUSH
4465: DOUBLE
4466: LD_INT 1
4468: DEC
4469: ST_TO_ADDR
4470: LD_INT 72
4472: PUSH
4473: FOR_TO
4474: IFFALSE 4532
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4476: LD_VAR 0 5
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 321
4490: PUSH
4491: LD_INT 1
4493: EQUAL
4494: PUSH
4495: LD_VAR 0 5
4499: PPUSH
4500: LD_VAR 0 3
4504: PPUSH
4505: CALL_OW 482
4509: PUSH
4510: LD_INT 1
4512: EQUAL
4513: AND
4514: IFFALSE 4530
// AddComResearch ( lab , i ) ;
4516: LD_VAR 0 2
4520: PPUSH
4521: LD_VAR 0 5
4525: PPUSH
4526: CALL_OW 184
4530: GO 4473
4532: POP
4533: POP
// end ;
4534: LD_VAR 0 4
4538: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
4547: LD_ADDR_VAR 0 7
4551: PUSH
4552: LD_VAR 0 2
4556: PPUSH
4557: CALL_OW 313
4561: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4562: LD_ADDR_VAR 0 8
4566: PUSH
4567: LD_VAR 0 3
4571: PPUSH
4572: LD_INT 22
4574: PUSH
4575: LD_VAR 0 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 25
4586: PUSH
4587: LD_INT 2
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 24
4596: PUSH
4597: LD_INT 1000
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 70
4613: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4614: LD_ADDR_VAR 0 5
4618: PUSH
4619: LD_VAR 0 3
4623: PPUSH
4624: LD_INT 22
4626: PUSH
4627: LD_VAR 0 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 21
4638: PUSH
4639: LD_INT 3
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 3
4648: PUSH
4649: LD_INT 24
4651: PUSH
4652: LD_INT 1000
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: PPUSH
4671: CALL_OW 70
4675: ST_TO_ADDR
// if buildings_list > 0 and engineerOkInside > 0 then
4676: LD_VAR 0 5
4680: PUSH
4681: LD_INT 0
4683: GREATER
4684: PUSH
4685: LD_VAR 0 7
4689: PUSH
4690: LD_INT 0
4692: GREATER
4693: AND
4694: IFFALSE 4722
// for i in engineerOkInside do
4696: LD_ADDR_VAR 0 6
4700: PUSH
4701: LD_VAR 0 7
4705: PUSH
4706: FOR_IN
4707: IFFALSE 4720
// ComExitBuilding ( i ) ;
4709: LD_VAR 0 6
4713: PPUSH
4714: CALL_OW 122
4718: GO 4706
4720: POP
4721: POP
// if engineerOkOutside > 0 then
4722: LD_VAR 0 8
4726: PUSH
4727: LD_INT 0
4729: GREATER
4730: IFFALSE 4784
// begin for i in engineerOkOutside do
4732: LD_ADDR_VAR 0 6
4736: PUSH
4737: LD_VAR 0 8
4741: PUSH
4742: FOR_IN
4743: IFFALSE 4782
// for j in buildings_list do
4745: LD_ADDR_VAR 0 9
4749: PUSH
4750: LD_VAR 0 5
4754: PUSH
4755: FOR_IN
4756: IFFALSE 4778
// ComRepairBuilding ( i , j [ 1 ] ) ;
4758: LD_VAR 0 6
4762: PPUSH
4763: LD_VAR 0 9
4767: PUSH
4768: LD_INT 1
4770: ARRAY
4771: PPUSH
4772: CALL_OW 130
4776: GO 4755
4778: POP
4779: POP
4780: GO 4742
4782: POP
4783: POP
// end ; if buildings_list = 0 then
4784: LD_VAR 0 5
4788: PUSH
4789: LD_INT 0
4791: EQUAL
4792: IFFALSE 4825
// for i in engineerOkOutside do
4794: LD_ADDR_VAR 0 6
4798: PUSH
4799: LD_VAR 0 8
4803: PUSH
4804: FOR_IN
4805: IFFALSE 4823
// ComEnterUnit ( i , building ) ;
4807: LD_VAR 0 6
4811: PPUSH
4812: LD_VAR 0 2
4816: PPUSH
4817: CALL_OW 120
4821: GO 4804
4823: POP
4824: POP
// end ; end_of_file
4825: LD_VAR 0 4
4829: RET
// on UnitDestroyed ( unit ) do var i ;
4830: LD_INT 0
4832: PPUSH
// begin for i := 1 to RuScientists do
4833: LD_ADDR_VAR 0 2
4837: PUSH
4838: DOUBLE
4839: LD_INT 1
4841: DEC
4842: ST_TO_ADDR
4843: LD_EXP 24
4847: PUSH
4848: FOR_TO
4849: IFFALSE 4891
// if RuScientists [ i ] = unit then
4851: LD_EXP 24
4855: PUSH
4856: LD_VAR 0 2
4860: ARRAY
4861: PUSH
4862: LD_VAR 0 1
4866: EQUAL
4867: IFFALSE 4889
// RuScientists = Delete ( RuScientists , i ) ;
4869: LD_ADDR_EXP 24
4873: PUSH
4874: LD_EXP 24
4878: PPUSH
4879: LD_VAR 0 2
4883: PPUSH
4884: CALL_OW 3
4888: ST_TO_ADDR
4889: GO 4848
4891: POP
4892: POP
// end ; end_of_file
4893: PPOPN 2
4895: END
// every 0 0$1 do
4896: GO 4898
4898: DISABLE
// begin enable ;
4899: ENABLE
// RepairBuilding ( 3 , ruwestdepot , RuWestBase ) ;
4900: LD_INT 3
4902: PPUSH
4903: LD_INT 6
4905: PPUSH
4906: LD_INT 9
4908: PPUSH
4909: CALL 4539 0 3
// RepairBuilding ( 3 , rueastdepot , RuEastBase ) ;
4913: LD_INT 3
4915: PPUSH
4916: LD_INT 4
4918: PPUSH
4919: LD_INT 10
4921: PPUSH
4922: CALL 4539 0 3
// end ;
4926: END
// every 0 0$1 do
4927: GO 4929
4929: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
4930: LD_INT 3
4932: PPUSH
4933: LD_INT 91
4935: PPUSH
4936: LD_INT 3
4938: PPUSH
4939: CALL 4454 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
4943: LD_INT 3
4945: PPUSH
4946: LD_INT 47
4948: PPUSH
4949: LD_INT 3
4951: PPUSH
4952: CALL 4454 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 44
4961: PPUSH
4962: LD_INT 3
4964: PPUSH
4965: CALL 4454 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
4969: LD_INT 3
4971: PPUSH
4972: LD_INT 3
4974: PPUSH
4975: LD_INT 3
4977: PPUSH
4978: CALL 4454 0 3
// end ;
4982: END
