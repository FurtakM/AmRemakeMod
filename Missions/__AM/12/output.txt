// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17249 0 0
// PrepareDifficulty ;
 195: CALL 13663 0 0
// PrepareVehicles ;
 199: CALL 1658 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1232 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 3034 0 0
// PrepareWestBase ;
 227: CALL 3546 0 0
// PrepareEastBase ;
 231: CALL 3106 0 0
// PrepareOtherRussians ;
 235: CALL 3658 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 557: LD_INT 0
 559: PPUSH
 560: PPUSH
 561: PPUSH
// uc_side = 1 ;
 562: LD_ADDR_OWVAR 20
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 570: LD_ADDR_EXP 14
 574: PUSH
 575: LD_STRING 11c_others
 577: PPUSH
 578: CALL_OW 31
 582: PUSH
 583: LD_STRING 11_others
 585: PPUSH
 586: CALL_OW 31
 590: UNION
 591: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_STRING 11_JMM
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL 13380 0 2
 607: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 608: LD_EXP 1
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 22
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 21
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 58
 647: PUSH
 648: EMPTY
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: PPUSH
 656: CALL_OW 69
 660: PUSH
 661: LD_INT 1
 663: ARRAY
 664: PPUSH
 665: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 669: LD_STRING 11_Lisa
 671: PPUSH
 672: CALL_OW 28
 676: PUSH
 677: LD_INT 1
 679: EQUAL
 680: IFFALSE 727
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 682: LD_ADDR_EXP 2
 686: PUSH
 687: LD_STRING 11_Lisa
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 13380 0 2
 697: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 698: LD_EXP 2
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 710: LD_EXP 2
 714: PPUSH
 715: LD_INT 4
 717: PPUSH
 718: LD_INT 0
 720: PPUSH
 721: CALL_OW 49
// end else
 725: GO 743
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 727: LD_INT 4
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 1232 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 743: LD_STRING 11_Donaldson
 745: PPUSH
 746: CALL_OW 28
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: IFFALSE 801
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 756: LD_ADDR_EXP 3
 760: PUSH
 761: LD_STRING 11_Donaldson
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: CALL 13380 0 2
 771: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 784: LD_EXP 3
 788: PPUSH
 789: LD_INT 4
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// end else
 799: GO 817
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 801: LD_INT 4
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL 1232 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 817: LD_STRING 11_Cyrus
 819: PPUSH
 820: CALL_OW 28
 824: PUSH
 825: LD_INT 1
 827: EQUAL
 828: IFFALSE 875
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 830: LD_ADDR_EXP 5
 834: PUSH
 835: LD_STRING 11_Cyrus
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL 13380 0 2
 845: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 846: LD_EXP 5
 850: PPUSH
 851: LD_INT 1
 853: PPUSH
 854: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 858: LD_EXP 5
 862: PPUSH
 863: LD_INT 4
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
// end else
 873: GO 891
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 875: LD_INT 4
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL 1232 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 891: LD_STRING 11_Denis
 893: PPUSH
 894: CALL_OW 28
 898: PUSH
 899: LD_INT 1
 901: EQUAL
 902: IFFALSE 949
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 904: LD_ADDR_EXP 6
 908: PUSH
 909: LD_STRING 11_Denis
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 13380 0 2
 919: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 920: LD_EXP 6
 924: PPUSH
 925: LD_INT 4
 927: PPUSH
 928: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 932: LD_EXP 6
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// end else
 947: GO 965
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 949: LD_INT 4
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL 1232 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 965: LD_STRING 11_Frank
 967: PPUSH
 968: CALL_OW 28
 972: PUSH
 973: LD_INT 1
 975: EQUAL
 976: IFFALSE 1023
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 978: LD_ADDR_EXP 12
 982: PUSH
 983: LD_STRING 11_Frank
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL 13380 0 2
 993: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 994: LD_EXP 12
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1006: LD_EXP 12
1010: PPUSH
1011: LD_INT 4
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 49
// end else
1021: GO 1039
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1023: LD_INT 4
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL 1232 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1039: LD_STRING 11_Cornell
1041: PPUSH
1042: CALL_OW 28
1046: PUSH
1047: LD_INT 1
1049: EQUAL
1050: IFFALSE 1097
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: LD_STRING 11_Cornell
1059: PPUSH
1060: LD_INT 1
1062: PPUSH
1063: CALL 13380 0 2
1067: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1068: LD_EXP 10
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1080: LD_EXP 10
1084: PPUSH
1085: LD_INT 4
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 49
// end else
1095: GO 1113
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1097: LD_INT 4
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 1
1105: PPUSH
1106: LD_INT 0
1108: PPUSH
1109: CALL 1232 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1113: LD_ADDR_VAR 0 2
1117: PUSH
1118: LD_EXP 14
1122: PPUSH
1123: LD_INT 26
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 72
1137: ST_TO_ADDR
// if not tmp then
1138: LD_VAR 0 2
1142: NOT
1143: IFFALSE 1172
// begin PrepareSoldier ( sex_male , 8 ) ;
1145: LD_INT 1
1147: PPUSH
1148: LD_INT 8
1150: PPUSH
1151: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1155: CALL_OW 44
1159: PPUSH
1160: LD_INT 4
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 49
// end else
1170: GO 1211
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: LD_INT 4
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1191: LD_ADDR_EXP 14
1195: PUSH
1196: LD_EXP 14
1200: PUSH
1201: LD_VAR 0 2
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: DIFF
1210: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1211: LD_ADDR_EXP 22
1215: PUSH
1216: LD_STRING Powell
1218: PPUSH
1219: LD_INT 0
1221: PPUSH
1222: CALL 13380 0 2
1226: ST_TO_ADDR
// end ;
1227: LD_VAR 0 1
1231: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1232: LD_INT 0
1234: PPUSH
1235: PPUSH
1236: PPUSH
1237: PPUSH
1238: PPUSH
// if mech = 1 then
1239: LD_VAR 0 4
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1484
// begin if others11 > 0 then
1249: LD_EXP 14
1253: PUSH
1254: LD_INT 0
1256: GREATER
1257: IFFALSE 1424
// begin for i := 1 to others11 - 1 do
1259: LD_ADDR_VAR 0 6
1263: PUSH
1264: DOUBLE
1265: LD_INT 1
1267: DEC
1268: ST_TO_ADDR
1269: LD_EXP 14
1273: PUSH
1274: LD_INT 1
1276: MINUS
1277: PUSH
1278: FOR_TO
1279: IFFALSE 1361
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1281: LD_EXP 14
1285: PUSH
1286: LD_VAR 0 6
1290: ARRAY
1291: PPUSH
1292: LD_INT 3
1294: PPUSH
1295: CALL_OW 259
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 6
1309: PUSH
1310: LD_INT 1
1312: PLUS
1313: ARRAY
1314: PPUSH
1315: LD_INT 3
1317: PPUSH
1318: CALL_OW 259
1322: LESS
1323: IFFALSE 1359
// begin mecha = others11 [ i + 1 ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_EXP 14
1334: PUSH
1335: LD_VAR 0 6
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1345: LD_VAR 0 9
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: CALL_OW 336
// break ;
1357: GO 1361
// end ; end ;
1359: GO 1278
1361: POP
1362: POP
// if spawnMode = 1 then
1363: LD_VAR 0 3
1367: PUSH
1368: LD_INT 1
1370: EQUAL
1371: IFFALSE 1392
// PlaceUnitArea ( mecha , area , false ) else
1373: LD_VAR 0 9
1377: PPUSH
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 49
1390: GO 1406
// PlaceHumanInUnit ( mecha , veh ) ;
1392: LD_VAR 0 9
1396: PPUSH
1397: LD_VAR 0 2
1401: PPUSH
1402: CALL_OW 52
// others11 = others11 diff mecha ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_EXP 14
1415: PUSH
1416: LD_VAR 0 9
1420: DIFF
1421: ST_TO_ADDR
// end else
1422: GO 1482
// begin hc_name =  ;
1424: LD_ADDR_OWVAR 26
1428: PUSH
1429: LD_STRING 
1431: ST_TO_ADDR
// hc_gallery =  ;
1432: LD_ADDR_OWVAR 33
1436: PUSH
1437: LD_STRING 
1439: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1440: LD_INT 0
1442: PPUSH
1443: LD_INT 7
1445: PPUSH
1446: LD_INT 9
1448: PPUSH
1449: CALL_OW 12
1453: PPUSH
1454: CALL_OW 383
// un = CreateHuman ;
1458: LD_ADDR_VAR 0 7
1462: PUSH
1463: CALL_OW 44
1467: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1468: LD_VAR 0 7
1472: PPUSH
1473: LD_VAR 0 2
1477: PPUSH
1478: CALL_OW 52
// end ; end else
1482: GO 1653
// begin if others11 > 0 then
1484: LD_EXP 14
1488: PUSH
1489: LD_INT 0
1491: GREATER
1492: IFFALSE 1565
// begin if spawnMode = 1 then
1494: LD_VAR 0 3
1498: PUSH
1499: LD_INT 1
1501: EQUAL
1502: IFFALSE 1527
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1504: LD_EXP 14
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: LD_VAR 0 1
1517: PPUSH
1518: LD_INT 0
1520: PPUSH
1521: CALL_OW 49
1525: GO 1545
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1527: LD_EXP 14
1531: PUSH
1532: LD_INT 1
1534: ARRAY
1535: PPUSH
1536: LD_VAR 0 2
1540: PPUSH
1541: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1545: LD_ADDR_EXP 14
1549: PUSH
1550: LD_EXP 14
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 3
1562: ST_TO_ADDR
// end else
1563: GO 1653
// begin hc_name =  ;
1565: LD_ADDR_OWVAR 26
1569: PUSH
1570: LD_STRING 
1572: ST_TO_ADDR
// hc_gallery =  ;
1573: LD_ADDR_OWVAR 33
1577: PUSH
1578: LD_STRING 
1580: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1581: LD_INT 0
1583: PPUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 3
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 12
1612: ARRAY
1613: PPUSH
1614: LD_INT 7
1616: PPUSH
1617: LD_INT 9
1619: PPUSH
1620: CALL_OW 12
1624: PPUSH
1625: CALL_OW 380
// un = CreateHuman ;
1629: LD_ADDR_VAR 0 7
1633: PUSH
1634: CALL_OW 44
1638: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1639: LD_VAR 0 7
1643: PPUSH
1644: LD_VAR 0 2
1648: PPUSH
1649: CALL_OW 52
// end ; end ; end ;
1653: LD_VAR 0 5
1657: RET
// export function PrepareVehicles ; var veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
// uc_side = 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// uc_nation = 1 ;
1670: LD_ADDR_OWVAR 21
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1678: LD_ADDR_OWVAR 37
1682: PUSH
1683: LD_INT 3
1685: ST_TO_ADDR
// vc_engine = 3 ;
1686: LD_ADDR_OWVAR 39
1690: PUSH
1691: LD_INT 3
1693: ST_TO_ADDR
// vc_control = 3 ;
1694: LD_ADDR_OWVAR 38
1698: PUSH
1699: LD_INT 3
1701: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1702: LD_ADDR_OWVAR 40
1706: PUSH
1707: LD_INT 4
1709: ST_TO_ADDR
// veh = CreateVehicle ;
1710: LD_ADDR_VAR 0 2
1714: PUSH
1715: CALL_OW 45
1719: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1720: LD_VAR 0 2
1724: PPUSH
1725: LD_INT 4
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 49
// vc_weapon = us_double_gun ;
1735: LD_ADDR_OWVAR 40
1739: PUSH
1740: LD_INT 5
1742: ST_TO_ADDR
// vc_control = 1 ;
1743: LD_ADDR_OWVAR 38
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// veh = CreateVehicle ;
1751: LD_ADDR_VAR 0 2
1755: PUSH
1756: CALL_OW 45
1760: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1761: LD_VAR 0 2
1765: PPUSH
1766: LD_INT 4
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 49
// vc_weapon = us_light_gun ;
1776: LD_ADDR_OWVAR 40
1780: PUSH
1781: LD_INT 3
1783: ST_TO_ADDR
// vc_control = 3 ;
1784: LD_ADDR_OWVAR 38
1788: PUSH
1789: LD_INT 3
1791: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1792: LD_ADDR_OWVAR 37
1796: PUSH
1797: LD_INT 2
1799: ST_TO_ADDR
// veh = CreateVehicle ;
1800: LD_ADDR_VAR 0 2
1804: PUSH
1805: CALL_OW 45
1809: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1810: LD_VAR 0 2
1814: PPUSH
1815: LD_INT 4
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1825: LD_ADDR_OWVAR 40
1829: PUSH
1830: LD_INT 4
1832: ST_TO_ADDR
// veh = CreateVehicle ;
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: CALL_OW 45
1842: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1843: LD_VAR 0 2
1847: PPUSH
1848: LD_INT 4
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 49
// end ;
1858: LD_VAR 0 1
1862: RET
// export function PowellSupport1 ; var veh , un ; begin
1863: LD_INT 0
1865: PPUSH
1866: PPUSH
1867: PPUSH
// uc_side = 1 ;
1868: LD_ADDR_OWVAR 20
1872: PUSH
1873: LD_INT 1
1875: ST_TO_ADDR
// uc_nation = 1 ;
1876: LD_ADDR_OWVAR 21
1880: PUSH
1881: LD_INT 1
1883: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1884: LD_STRING 11_Brown
1886: PPUSH
1887: CALL_OW 28
1891: PUSH
1892: LD_INT 1
1894: EQUAL
1895: IFFALSE 1942
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1897: LD_ADDR_EXP 7
1901: PUSH
1902: LD_STRING 11_Brown
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: CALL 13380 0 2
1912: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1913: LD_EXP 7
1917: PPUSH
1918: LD_INT 2
1920: PPUSH
1921: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1925: LD_EXP 7
1929: PPUSH
1930: LD_INT 4
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 49
// end else
1940: GO 1958
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1942: LD_INT 4
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL 1232 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1958: LD_STRING 11_Gary
1960: PPUSH
1961: CALL_OW 28
1965: PUSH
1966: LD_INT 1
1968: EQUAL
1969: IFFALSE 2016
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1971: LD_ADDR_EXP 11
1975: PUSH
1976: LD_STRING 11_Gary
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 13380 0 2
1986: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1987: LD_EXP 11
1991: PPUSH
1992: LD_INT 2
1994: PPUSH
1995: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1999: LD_EXP 11
2003: PPUSH
2004: LD_INT 4
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
// end else
2014: GO 2032
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2016: LD_INT 4
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: LD_INT 0
2027: PPUSH
2028: CALL 1232 0 4
// end ; vc_chassis = us_medium_tracked ;
2032: LD_ADDR_OWVAR 37
2036: PUSH
2037: LD_INT 3
2039: ST_TO_ADDR
// vc_engine = 3 ;
2040: LD_ADDR_OWVAR 39
2044: PUSH
2045: LD_INT 3
2047: ST_TO_ADDR
// vc_control = 1 ;
2048: LD_ADDR_OWVAR 38
2052: PUSH
2053: LD_INT 1
2055: ST_TO_ADDR
// vc_weapon = us_crane ;
2056: LD_ADDR_OWVAR 40
2060: PUSH
2061: LD_INT 13
2063: ST_TO_ADDR
// veh = CreateVehicle ;
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2074: LD_VAR 0 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 2
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: CALL 1232 0 4
// vc_weapon = 9 ;
2119: LD_ADDR_OWVAR 40
2123: PUSH
2124: LD_INT 9
2126: ST_TO_ADDR
// veh = CreateVehicle ;
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2137: LD_VAR 0 2
2141: PPUSH
2142: LD_INT 4
2144: PPUSH
2145: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2149: LD_VAR 0 2
2153: PPUSH
2154: LD_INT 4
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2164: LD_INT 4
2166: PPUSH
2167: LD_VAR 0 2
2171: PPUSH
2172: LD_INT 2
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: CALL 1232 0 4
// vc_control = 3 ;
2182: LD_ADDR_OWVAR 38
2186: PUSH
2187: LD_INT 3
2189: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2190: LD_ADDR_OWVAR 40
2194: PUSH
2195: LD_INT 12
2197: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2198: LD_ADDR_EXP 15
2202: PUSH
2203: CALL_OW 45
2207: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2208: LD_ADDR_EXP 16
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2218: LD_EXP 15
2222: PPUSH
2223: LD_INT 4
2225: PPUSH
2226: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2230: LD_EXP 16
2234: PPUSH
2235: LD_INT 4
2237: PPUSH
2238: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2242: LD_EXP 15
2246: PPUSH
2247: LD_INT 4
2249: PPUSH
2250: LD_INT 0
2252: PPUSH
2253: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2257: LD_EXP 16
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2272: LD_EXP 15
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2287: LD_EXP 16
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: LD_INT 80
2297: PPUSH
2298: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2302: LD_EXP 16
2306: PPUSH
2307: LD_INT 3
2309: PPUSH
2310: LD_INT 20
2312: PPUSH
2313: CALL_OW 291
// end ;
2317: LD_VAR 0 1
2321: RET
// export function PowellSupport2 ; var veh , un ; begin
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
// uc_side = 1 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// uc_nation = 1 ;
2335: LD_ADDR_OWVAR 21
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2343: LD_ADDR_OWVAR 37
2347: PUSH
2348: LD_INT 2
2350: ST_TO_ADDR
// vc_engine = 3 ;
2351: LD_ADDR_OWVAR 39
2355: PUSH
2356: LD_INT 3
2358: ST_TO_ADDR
// vc_control = 3 ;
2359: LD_ADDR_OWVAR 38
2363: PUSH
2364: LD_INT 3
2366: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2367: LD_ADDR_OWVAR 40
2371: PUSH
2372: LD_INT 3
2374: ST_TO_ADDR
// veh = CreateVehicle ;
2375: LD_ADDR_VAR 0 2
2379: PUSH
2380: CALL_OW 45
2384: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2385: LD_VAR 0 2
2389: PPUSH
2390: LD_INT 4
2392: PPUSH
2393: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_INT 4
2404: PPUSH
2405: LD_INT 0
2407: PPUSH
2408: CALL_OW 49
// vc_control = 1 ;
2412: LD_ADDR_OWVAR 38
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2420: LD_ADDR_OWVAR 37
2424: PUSH
2425: LD_INT 2
2427: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 5
2435: ST_TO_ADDR
// veh = CreateVehicle ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: CALL_OW 45
2445: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 4
2453: PPUSH
2454: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_INT 4
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2473: LD_STRING 11_Bobby
2475: PPUSH
2476: CALL_OW 28
2480: PUSH
2481: LD_INT 1
2483: EQUAL
2484: IFFALSE 2530
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2486: LD_ADDR_EXP 4
2490: PUSH
2491: LD_STRING 11_Bobby
2493: PPUSH
2494: LD_INT 1
2496: PPUSH
2497: CALL 13380 0 2
2501: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2502: LD_EXP 4
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2514: LD_EXP 4
2518: PPUSH
2519: LD_VAR 0 2
2523: PPUSH
2524: CALL_OW 52
// end else
2528: GO 2548
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2530: LD_INT 0
2532: PPUSH
2533: LD_VAR 0 2
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: CALL 1232 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2548: LD_STRING 11_Houten
2550: PPUSH
2551: CALL_OW 28
2555: PUSH
2556: LD_INT 1
2558: EQUAL
2559: IFFALSE 2606
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2561: LD_ADDR_EXP 9
2565: PUSH
2566: LD_STRING 11_Houten
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL 13380 0 2
2576: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2577: LD_EXP 9
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2589: LD_EXP 9
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// end else
2604: GO 2622
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: LD_INT 1
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL 1232 0 4
// end ; vc_control = 3 ;
2622: LD_ADDR_OWVAR 38
2626: PUSH
2627: LD_INT 3
2629: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2630: LD_ADDR_OWVAR 40
2634: PUSH
2635: LD_INT 12
2637: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2638: LD_ADDR_EXP 17
2642: PUSH
2643: CALL_OW 45
2647: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2648: LD_EXP 17
2652: PPUSH
2653: LD_INT 4
2655: PPUSH
2656: CALL_OW 233
// amCargo4 = CreateVehicle ;
2660: LD_ADDR_EXP 18
2664: PUSH
2665: CALL_OW 45
2669: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2670: LD_EXP 18
2674: PPUSH
2675: LD_INT 4
2677: PPUSH
2678: CALL_OW 233
// amCargo5 = CreateVehicle ;
2682: LD_ADDR_EXP 19
2686: PUSH
2687: CALL_OW 45
2691: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2692: LD_EXP 19
2696: PPUSH
2697: LD_INT 4
2699: PPUSH
2700: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2704: LD_EXP 17
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2719: LD_EXP 18
2723: PPUSH
2724: LD_INT 4
2726: PPUSH
2727: LD_INT 0
2729: PPUSH
2730: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_INT 4
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// if kurtStatus > 0 then
2749: LD_EXP 27
2753: PUSH
2754: LD_INT 0
2756: GREATER
2757: IFFALSE 2806
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2759: LD_EXP 17
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2774: LD_EXP 18
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: LD_INT 100
2784: PPUSH
2785: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2789: LD_EXP 19
2793: PPUSH
2794: LD_INT 3
2796: PPUSH
2797: LD_INT 80
2799: PPUSH
2800: CALL_OW 291
// end else
2804: GO 2851
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2806: LD_EXP 17
2810: PPUSH
2811: LD_INT 1
2813: PPUSH
2814: LD_INT 100
2816: PPUSH
2817: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2821: LD_EXP 18
2825: PPUSH
2826: LD_INT 3
2828: PPUSH
2829: LD_INT 60
2831: PPUSH
2832: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2836: LD_EXP 19
2840: PPUSH
2841: LD_INT 3
2843: PPUSH
2844: LD_INT 100
2846: PPUSH
2847: CALL_OW 291
// end ; end ;
2851: LD_VAR 0 1
2855: RET
// export function PowellSupport3 ; var veh , un ; begin
2856: LD_INT 0
2858: PPUSH
2859: PPUSH
2860: PPUSH
// uc_side = 1 ;
2861: LD_ADDR_OWVAR 20
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// uc_nation = 1 ;
2869: LD_ADDR_OWVAR 21
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2877: LD_INT 4
2879: PPUSH
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: CALL 1232 0 4
// vc_chassis = us_medium_wheeled ;
2893: LD_ADDR_OWVAR 37
2897: PUSH
2898: LD_INT 2
2900: ST_TO_ADDR
// vc_engine = 3 ;
2901: LD_ADDR_OWVAR 39
2905: PUSH
2906: LD_INT 3
2908: ST_TO_ADDR
// vc_control = 3 ;
2909: LD_ADDR_OWVAR 38
2913: PUSH
2914: LD_INT 3
2916: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2917: LD_ADDR_OWVAR 40
2921: PUSH
2922: LD_INT 12
2924: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2925: LD_ADDR_EXP 20
2929: PUSH
2930: CALL_OW 45
2934: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2935: LD_ADDR_EXP 21
2939: PUSH
2940: CALL_OW 45
2944: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2945: LD_EXP 20
2949: PPUSH
2950: LD_INT 4
2952: PPUSH
2953: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2957: LD_EXP 21
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2969: LD_EXP 20
2973: PPUSH
2974: LD_INT 4
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2984: LD_EXP 21
2988: PPUSH
2989: LD_INT 4
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2999: LD_EXP 20
3003: PPUSH
3004: LD_INT 1
3006: PPUSH
3007: LD_INT 100
3009: PPUSH
3010: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3014: LD_EXP 21
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 100
3024: PPUSH
3025: CALL_OW 291
// end ; end_of_file
3029: LD_VAR 0 1
3033: RET
// export function PrepareRussianCommander ; begin
3034: LD_INT 0
3036: PPUSH
// uc_side = 3 ;
3037: LD_ADDR_OWVAR 20
3041: PUSH
3042: LD_INT 3
3044: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3045: LD_ADDR_EXP 23
3049: PUSH
3050: LD_STRING Davidov
3052: PPUSH
3053: LD_INT 0
3055: PPUSH
3056: CALL 13380 0 2
3060: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3061: LD_EXP 23
3065: PPUSH
3066: LD_INT 3
3068: PPUSH
3069: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3073: LD_ADDR_EXP 35
3077: PUSH
3078: LD_EXP 35
3082: PUSH
3083: LD_EXP 23
3087: ADD
3088: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3089: LD_EXP 35
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: CALL_OW 336
// end ;
3101: LD_VAR 0 1
3105: RET
// export function PrepareEastBase ; var i , un ; begin
3106: LD_INT 0
3108: PPUSH
3109: PPUSH
3110: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3111: LD_INT 3
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 121
3119: PPUSH
3120: LD_EXP 37
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 12
3134: PPUSH
3135: LD_INT 1
3137: PPUSH
3138: LD_INT 3
3140: PPUSH
3141: CALL 14094 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3145: LD_INT 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 121
3153: PPUSH
3154: LD_EXP 37
3158: PPUSH
3159: LD_EXP 38
3163: PPUSH
3164: CALL_OW 12
3168: PPUSH
3169: LD_INT 9
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: CALL 14094 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_EXP 37
3192: PPUSH
3193: LD_EXP 38
3197: PPUSH
3198: CALL_OW 12
3202: PPUSH
3203: LD_INT 2
3205: PPUSH
3206: LD_INT 6
3208: PPUSH
3209: CALL 14094 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: LD_INT 112
3221: PPUSH
3222: LD_EXP 37
3226: PPUSH
3227: LD_EXP 38
3231: PPUSH
3232: CALL_OW 12
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 6
3242: PPUSH
3243: CALL 14094 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 3
3252: PPUSH
3253: LD_INT 47
3255: PPUSH
3256: LD_EXP 37
3260: PPUSH
3261: LD_EXP 38
3265: PPUSH
3266: CALL_OW 12
3270: PPUSH
3271: LD_INT 4
3273: PPUSH
3274: LD_INT 6
3276: PPUSH
3277: CALL 14094 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3281: LD_INT 3
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 129
3289: PPUSH
3290: LD_EXP 37
3294: PPUSH
3295: LD_EXP 38
3299: PPUSH
3300: CALL_OW 12
3304: PPUSH
3305: LD_INT 4
3307: PPUSH
3308: LD_INT 6
3310: PPUSH
3311: CALL 14094 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3315: LD_INT 3
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: LD_INT 135
3323: PPUSH
3324: LD_EXP 37
3328: PPUSH
3329: LD_EXP 38
3333: PPUSH
3334: CALL_OW 12
3338: PPUSH
3339: LD_INT 4
3341: PPUSH
3342: LD_INT 6
3344: PPUSH
3345: CALL 14094 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 3
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 30
3366: PUSH
3367: LD_INT 32
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 69
3382: PUSH
3383: FOR_IN
3384: IFFALSE 3424
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3386: LD_INT 3
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: LD_VAR 0 2
3396: PPUSH
3397: LD_EXP 37
3401: PPUSH
3402: LD_EXP 38
3406: PPUSH
3407: CALL_OW 12
3411: PPUSH
3412: LD_INT 1
3414: PPUSH
3415: LD_INT 1
3417: PPUSH
3418: CALL 14094 0 6
3422: GO 3383
3424: POP
3425: POP
// for i = 1 to 5 do
3426: LD_ADDR_VAR 0 2
3430: PUSH
3431: DOUBLE
3432: LD_INT 1
3434: DEC
3435: ST_TO_ADDR
3436: LD_INT 5
3438: PUSH
3439: FOR_TO
3440: IFFALSE 3539
// begin uc_side = 3 ;
3442: LD_ADDR_OWVAR 20
3446: PUSH
3447: LD_INT 3
3449: ST_TO_ADDR
// uc_nation = 3 ;
3450: LD_ADDR_OWVAR 21
3454: PUSH
3455: LD_INT 3
3457: ST_TO_ADDR
// hc_gallery =  ;
3458: LD_ADDR_OWVAR 33
3462: PUSH
3463: LD_STRING 
3465: ST_TO_ADDR
// hc_name =  ;
3466: LD_ADDR_OWVAR 26
3470: PUSH
3471: LD_STRING 
3473: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 4
3479: PPUSH
3480: LD_EXP 37
3484: PPUSH
3485: LD_EXP 38
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 380
// un = CreateHuman ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3509: LD_VAR 0 3
3513: PPUSH
3514: LD_INT 3
3516: PPUSH
3517: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3521: LD_ADDR_EXP 35
3525: PUSH
3526: LD_EXP 35
3530: PUSH
3531: LD_VAR 0 3
3535: ADD
3536: ST_TO_ADDR
// end ;
3537: GO 3439
3539: POP
3540: POP
// end ;
3541: LD_VAR 0 1
3545: RET
// export function PrepareWestBase ; var i , un ; begin
3546: LD_INT 0
3548: PPUSH
3549: PPUSH
3550: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3551: LD_INT 3
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 6
3559: PPUSH
3560: LD_EXP 37
3564: PPUSH
3565: LD_EXP 38
3569: PPUSH
3570: CALL_OW 12
3574: PPUSH
3575: LD_INT 2
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: CALL 14094 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3585: LD_INT 3
3587: PPUSH
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 91
3593: PPUSH
3594: LD_EXP 37
3598: PPUSH
3599: LD_EXP 38
3603: PPUSH
3604: CALL_OW 12
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: LD_INT 3
3614: PPUSH
3615: CALL 14094 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3619: LD_INT 3
3621: PPUSH
3622: LD_INT 3
3624: PPUSH
3625: LD_INT 21
3627: PPUSH
3628: LD_EXP 37
3632: PPUSH
3633: LD_EXP 38
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: LD_INT 6
3648: PPUSH
3649: CALL 14094 0 6
// end ;
3653: LD_VAR 0 1
3657: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3658: LD_INT 0
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
// uc_side = 3 ;
3664: LD_ADDR_OWVAR 20
3668: PUSH
3669: LD_INT 3
3671: ST_TO_ADDR
// uc_nation = 3 ;
3672: LD_ADDR_OWVAR 21
3676: PUSH
3677: LD_INT 3
3679: ST_TO_ADDR
// for i = 1 to 5 do
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: DOUBLE
3686: LD_INT 1
3688: DEC
3689: ST_TO_ADDR
3690: LD_INT 5
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3764
// begin hc_gallery =  ;
3696: LD_ADDR_OWVAR 33
3700: PUSH
3701: LD_STRING 
3703: ST_TO_ADDR
// hc_name =  ;
3704: LD_ADDR_OWVAR 26
3708: PUSH
3709: LD_STRING 
3711: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3712: LD_INT 0
3714: PPUSH
3715: LD_INT 9
3717: PPUSH
3718: LD_EXP 37
3722: PPUSH
3723: LD_EXP 38
3727: PPUSH
3728: CALL_OW 12
3732: PPUSH
3733: CALL_OW 380
// un = CreateHuman ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: CALL_OW 44
3746: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3747: LD_VAR 0 3
3751: PPUSH
3752: LD_INT 8
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: CALL_OW 49
// end ;
3762: GO 3693
3764: POP
3765: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3766: LD_ADDR_VAR 0 2
3770: PUSH
3771: DOUBLE
3772: LD_INT 1
3774: DEC
3775: ST_TO_ADDR
3776: LD_INT 2
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_OWVAR 67
3794: ARRAY
3795: PUSH
3796: FOR_TO
3797: IFFALSE 3867
// begin hc_gallery =  ;
3799: LD_ADDR_OWVAR 33
3803: PUSH
3804: LD_STRING 
3806: ST_TO_ADDR
// hc_name =  ;
3807: LD_ADDR_OWVAR 26
3811: PUSH
3812: LD_STRING 
3814: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3815: LD_INT 0
3817: PPUSH
3818: LD_INT 4
3820: PPUSH
3821: LD_EXP 37
3825: PPUSH
3826: LD_EXP 38
3830: PPUSH
3831: CALL_OW 12
3835: PPUSH
3836: CALL_OW 380
// un = CreateHuman ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: CALL_OW 44
3849: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: LD_INT 8
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 49
// end ;
3865: GO 3796
3867: POP
3868: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: PUSH
3893: LD_OWVAR 67
3897: ARRAY
3898: PUSH
3899: FOR_TO
3900: IFFALSE 4096
// begin vc_engine = 3 ;
3902: LD_ADDR_OWVAR 39
3906: PUSH
3907: LD_INT 3
3909: ST_TO_ADDR
// vc_control = 1 ;
3910: LD_ADDR_OWVAR 38
3914: PUSH
3915: LD_INT 1
3917: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3918: LD_ADDR_OWVAR 40
3922: PUSH
3923: LD_INT 42
3925: PUSH
3926: LD_INT 43
3928: PUSH
3929: LD_INT 44
3931: PUSH
3932: LD_INT 45
3934: PUSH
3935: LD_INT 46
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: CALL_OW 12
3955: ARRAY
3956: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3957: LD_OWVAR 40
3961: PUSH
3962: LD_INT 46
3964: EQUAL
3965: IFFALSE 3977
// vc_chassis = ru_heavy_tracked else
3967: LD_ADDR_OWVAR 37
3971: PUSH
3972: LD_INT 24
3974: ST_TO_ADDR
3975: GO 4004
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3977: LD_ADDR_OWVAR 37
3981: PUSH
3982: LD_INT 22
3984: PUSH
3985: LD_INT 21
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ARRAY
4003: ST_TO_ADDR
// veh = CreateVehicle ;
4004: LD_ADDR_VAR 0 4
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4026: LD_VAR 0 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 49
// hc_gallery =  ;
4041: LD_ADDR_OWVAR 33
4045: PUSH
4046: LD_STRING 
4048: ST_TO_ADDR
// hc_name =  ;
4049: LD_ADDR_OWVAR 26
4053: PUSH
4054: LD_STRING 
4056: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 380
// un = CreateHuman ;
4070: LD_ADDR_VAR 0 3
4074: PUSH
4075: CALL_OW 44
4079: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_VAR 0 4
4089: PPUSH
4090: CALL_OW 52
// end ;
4094: GO 3899
4096: POP
4097: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4098: LD_ADDR_VAR 0 2
4102: PUSH
4103: DOUBLE
4104: LD_INT 1
4106: DEC
4107: ST_TO_ADDR
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_OWVAR 67
4126: ARRAY
4127: PUSH
4128: FOR_TO
4129: IFFALSE 4276
// begin vc_engine = 3 ;
4131: LD_ADDR_OWVAR 39
4135: PUSH
4136: LD_INT 3
4138: ST_TO_ADDR
// vc_control = 3 ;
4139: LD_ADDR_OWVAR 38
4143: PUSH
4144: LD_INT 3
4146: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4147: LD_ADDR_OWVAR 40
4151: PUSH
4152: LD_INT 42
4154: PUSH
4155: LD_INT 43
4157: PUSH
4158: LD_INT 44
4160: PUSH
4161: LD_INT 45
4163: PUSH
4164: LD_INT 46
4166: PUSH
4167: LD_INT 49
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 5
4183: PPUSH
4184: CALL_OW 12
4188: ARRAY
4189: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4190: LD_OWVAR 40
4194: PUSH
4195: LD_INT 46
4197: EQUAL
4198: IFFALSE 4210
// vc_chassis = ru_heavy_tracked else
4200: LD_ADDR_OWVAR 37
4204: PUSH
4205: LD_INT 24
4207: ST_TO_ADDR
4208: GO 4237
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4210: LD_ADDR_OWVAR 37
4214: PUSH
4215: LD_INT 22
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: CALL_OW 12
4235: ARRAY
4236: ST_TO_ADDR
// veh = CreateVehicle ;
4237: LD_ADDR_VAR 0 4
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4247: LD_VAR 0 4
4251: PPUSH
4252: LD_INT 3
4254: PPUSH
4255: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_INT 6
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 49
// end ;
4274: GO 4128
4276: POP
4277: POP
// end ; end_of_file
4278: LD_VAR 0 1
4282: RET
// export function PrepareKurt ; begin
4283: LD_INT 0
4285: PPUSH
// uc_side = 8 ;
4286: LD_ADDR_OWVAR 20
4290: PUSH
4291: LD_INT 8
4293: ST_TO_ADDR
// uc_nation = 2 ;
4294: LD_ADDR_OWVAR 21
4298: PUSH
4299: LD_INT 2
4301: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4302: LD_ADDR_OWVAR 37
4306: PUSH
4307: LD_INT 13
4309: ST_TO_ADDR
// vc_engine = 1 ;
4310: LD_ADDR_OWVAR 39
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// vc_control = 1 ;
4318: LD_ADDR_OWVAR 38
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// vc_weapon = 24 ;
4326: LD_ADDR_OWVAR 40
4330: PUSH
4331: LD_INT 24
4333: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4334: LD_ADDR_EXP 26
4338: PUSH
4339: CALL_OW 45
4343: ST_TO_ADDR
// if kurtStatus > 0 then
4344: LD_EXP 27
4348: PUSH
4349: LD_INT 0
4351: GREATER
4352: IFFALSE 4401
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4354: LD_ADDR_EXP 24
4358: PUSH
4359: LD_STRING Kurt
4361: PPUSH
4362: LD_INT 0
4364: PPUSH
4365: CALL 13380 0 2
4369: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4370: LD_EXP 26
4374: PPUSH
4375: LD_INT 4
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4385: LD_EXP 24
4389: PPUSH
4390: LD_EXP 26
4394: PPUSH
4395: CALL_OW 52
// end else
4399: GO 4478
// begin hc_name =  ;
4401: LD_ADDR_OWVAR 26
4405: PUSH
4406: LD_STRING 
4408: ST_TO_ADDR
// hc_gallery =  ;
4409: LD_ADDR_OWVAR 33
4413: PUSH
4414: LD_STRING 
4416: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4417: LD_INT 1
4419: PPUSH
4420: LD_INT 10
4422: PPUSH
4423: CALL_OW 381
// otherKurt = CreateHuman ;
4427: LD_ADDR_EXP 25
4431: PUSH
4432: CALL_OW 44
4436: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4437: LD_EXP 26
4441: PPUSH
4442: LD_INT 4
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4452: LD_EXP 25
4456: PPUSH
4457: LD_EXP 26
4461: PPUSH
4462: CALL_OW 52
// SaveCharacters ( otherKurt , AltKurt ) ;
4466: LD_EXP 25
4470: PPUSH
4471: LD_STRING AltKurt
4473: PPUSH
4474: CALL_OW 38
// end ; end ;
4478: LD_VAR 0 1
4482: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4483: LD_INT 0
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// for i = 1 to 3 do
4489: LD_ADDR_VAR 0 2
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_INT 3
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4624
// begin uc_side = 1 ;
4505: LD_ADDR_OWVAR 20
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// uc_nation = 2 ;
4513: LD_ADDR_OWVAR 21
4517: PUSH
4518: LD_INT 2
4520: ST_TO_ADDR
// hc_gallery =  ;
4521: LD_ADDR_OWVAR 33
4525: PUSH
4526: LD_STRING 
4528: ST_TO_ADDR
// hc_name =  ;
4529: LD_ADDR_OWVAR 26
4533: PUSH
4534: LD_STRING 
4536: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4537: LD_EXP 27
4541: PUSH
4542: LD_INT 0
4544: EQUAL
4545: PUSH
4546: LD_EXP 27
4550: PUSH
4551: LD_INT 2
4553: EQUAL
4554: OR
4555: IFFALSE 4572
// PrepareHuman ( false , 1 , 6 ) else
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_INT 6
4565: PPUSH
4566: CALL_OW 380
4570: GO 4585
// PrepareHuman ( false , 1 , 8 ) ;
4572: LD_INT 0
4574: PPUSH
4575: LD_INT 1
4577: PPUSH
4578: LD_INT 8
4580: PPUSH
4581: CALL_OW 380
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 4
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: CALL_OW 49
// end ;
4622: GO 4502
4624: POP
4625: POP
// vc_chassis = 14 ;
4626: LD_ADDR_OWVAR 37
4630: PUSH
4631: LD_INT 14
4633: ST_TO_ADDR
// vc_engine = 3 ;
4634: LD_ADDR_OWVAR 39
4638: PUSH
4639: LD_INT 3
4641: ST_TO_ADDR
// vc_control = 1 ;
4642: LD_ADDR_OWVAR 38
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4650: LD_ADDR_OWVAR 40
4654: PUSH
4655: LD_INT 27
4657: PUSH
4658: LD_INT 26
4660: PUSH
4661: LD_INT 28
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_INT 3
4674: PPUSH
4675: CALL_OW 12
4679: ARRAY
4680: ST_TO_ADDR
// veh = CreateVehicle ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: CALL_OW 45
4690: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4691: LD_VAR 0 4
4695: PPUSH
4696: LD_INT 4
4698: PPUSH
4699: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4718: LD_EXP 27
4722: PUSH
4723: LD_INT 0
4725: EQUAL
4726: PUSH
4727: LD_EXP 27
4731: PUSH
4732: LD_INT 2
4734: EQUAL
4735: OR
4736: IFFALSE 4753
// PrepareHuman ( false , 3 , 6 ) else
4738: LD_INT 0
4740: PPUSH
4741: LD_INT 3
4743: PPUSH
4744: LD_INT 6
4746: PPUSH
4747: CALL_OW 380
4751: GO 4766
// PrepareHuman ( false , 3 , 8 ) ;
4753: LD_INT 0
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: LD_INT 8
4761: PPUSH
4762: CALL_OW 380
// un = CreateHuman ;
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: CALL_OW 44
4775: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4776: LD_VAR 0 3
4780: PPUSH
4781: LD_VAR 0 4
4785: PPUSH
4786: CALL_OW 52
// vc_chassis = 14 ;
4790: LD_ADDR_OWVAR 37
4794: PUSH
4795: LD_INT 14
4797: ST_TO_ADDR
// vc_engine = 3 ;
4798: LD_ADDR_OWVAR 39
4802: PUSH
4803: LD_INT 3
4805: ST_TO_ADDR
// vc_control = 1 ;
4806: LD_ADDR_OWVAR 38
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4814: LD_ADDR_OWVAR 40
4818: PUSH
4819: LD_INT 27
4821: PUSH
4822: LD_INT 26
4824: PUSH
4825: LD_INT 28
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: CALL_OW 12
4843: ARRAY
4844: ST_TO_ADDR
// veh = CreateVehicle ;
4845: LD_ADDR_VAR 0 4
4849: PUSH
4850: CALL_OW 45
4854: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4855: LD_VAR 0 4
4859: PPUSH
4860: LD_INT 4
4862: PPUSH
4863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4867: LD_VAR 0 4
4871: PPUSH
4872: LD_INT 4
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 0
4889: EQUAL
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 2
4898: EQUAL
4899: OR
4900: IFFALSE 4917
// PrepareHuman ( false , 4 , 6 ) else
4902: LD_INT 0
4904: PPUSH
4905: LD_INT 4
4907: PPUSH
4908: LD_INT 6
4910: PPUSH
4911: CALL_OW 380
4915: GO 4930
// PrepareHuman ( false , 4 , 8 ) ;
4917: LD_INT 0
4919: PPUSH
4920: LD_INT 4
4922: PPUSH
4923: LD_INT 8
4925: PPUSH
4926: CALL_OW 380
// un = CreateHuman ;
4930: LD_ADDR_VAR 0 3
4934: PUSH
4935: CALL_OW 44
4939: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4940: LD_VAR 0 3
4944: PPUSH
4945: LD_INT 4
4947: PPUSH
4948: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4952: LD_VAR 0 3
4956: PPUSH
4957: LD_VAR 0 4
4961: PPUSH
4962: CALL_OW 52
// vc_chassis = 14 ;
4966: LD_ADDR_OWVAR 37
4970: PUSH
4971: LD_INT 14
4973: ST_TO_ADDR
// vc_engine = 3 ;
4974: LD_ADDR_OWVAR 39
4978: PUSH
4979: LD_INT 3
4981: ST_TO_ADDR
// vc_control = 1 ;
4982: LD_ADDR_OWVAR 38
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4990: LD_ADDR_OWVAR 40
4994: PUSH
4995: LD_INT 27
4997: PUSH
4998: LD_INT 26
5000: PUSH
5001: LD_INT 28
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: PUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: CALL_OW 12
5019: ARRAY
5020: ST_TO_ADDR
// veh = CreateVehicle ;
5021: LD_ADDR_VAR 0 4
5025: PUSH
5026: CALL_OW 45
5030: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5031: LD_VAR 0 4
5035: PPUSH
5036: LD_INT 4
5038: PPUSH
5039: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5043: LD_VAR 0 4
5047: PPUSH
5048: LD_INT 4
5050: PPUSH
5051: LD_INT 0
5053: PPUSH
5054: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5058: LD_EXP 27
5062: PUSH
5063: LD_INT 0
5065: EQUAL
5066: PUSH
5067: LD_EXP 27
5071: PUSH
5072: LD_INT 2
5074: EQUAL
5075: OR
5076: IFFALSE 5093
// PrepareHuman ( false , 2 , 4 ) else
5078: LD_INT 0
5080: PPUSH
5081: LD_INT 2
5083: PPUSH
5084: LD_INT 4
5086: PPUSH
5087: CALL_OW 380
5091: GO 5106
// PrepareHuman ( false , 2 , 8 ) ;
5093: LD_INT 0
5095: PPUSH
5096: LD_INT 2
5098: PPUSH
5099: LD_INT 8
5101: PPUSH
5102: CALL_OW 380
// un = CreateHuman ;
5106: LD_ADDR_VAR 0 3
5110: PUSH
5111: CALL_OW 44
5115: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5116: LD_VAR 0 3
5120: PPUSH
5121: LD_INT 4
5123: PPUSH
5124: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_VAR 0 4
5137: PPUSH
5138: CALL_OW 52
// end ;
5142: LD_VAR 0 1
5146: RET
// export function PrepareAttackLegion ; var i , un ; begin
5147: LD_INT 0
5149: PPUSH
5150: PPUSH
5151: PPUSH
// for i = 1 to 4 do
5152: LD_ADDR_VAR 0 2
5156: PUSH
5157: DOUBLE
5158: LD_INT 1
5160: DEC
5161: ST_TO_ADDR
5162: LD_INT 4
5164: PUSH
5165: FOR_TO
5166: IFFALSE 5276
// begin uc_side = 8 ;
5168: LD_ADDR_OWVAR 20
5172: PUSH
5173: LD_INT 8
5175: ST_TO_ADDR
// uc_nation = 2 ;
5176: LD_ADDR_OWVAR 21
5180: PUSH
5181: LD_INT 2
5183: ST_TO_ADDR
// hc_gallery =  ;
5184: LD_ADDR_OWVAR 33
5188: PUSH
5189: LD_STRING 
5191: ST_TO_ADDR
// hc_name =  ;
5192: LD_ADDR_OWVAR 26
5196: PUSH
5197: LD_STRING 
5199: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5200: LD_INT 0
5202: PPUSH
5203: LD_INT 1
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: LD_INT 1
5215: PPUSH
5216: LD_INT 2
5218: PPUSH
5219: CALL_OW 12
5223: ARRAY
5224: PPUSH
5225: LD_INT 6
5227: PPUSH
5228: LD_INT 8
5230: PPUSH
5231: CALL_OW 12
5235: PPUSH
5236: CALL_OW 380
// un = CreateHuman ;
5240: LD_ADDR_VAR 0 3
5244: PUSH
5245: CALL_OW 44
5249: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_INT 19
5257: PPUSH
5258: LD_INT 0
5260: PPUSH
5261: CALL_OW 49
// ComCrawl ( un ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: CALL_OW 137
// end ;
5274: GO 5165
5276: POP
5277: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5278: LD_INT 1
5280: PPUSH
5281: LD_INT 8
5283: PPUSH
5284: LD_INT 2
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5294: LD_INT 20
5296: PPUSH
5297: LD_INT 3
5299: PPUSH
5300: CALL 16761 0 2
// end ; end_of_file
5304: LD_VAR 0 1
5308: RET
// every 1 do var i ;
5309: GO 5311
5311: DISABLE
5312: LD_INT 0
5314: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5315: LD_INT 10
5317: PPUSH
5318: LD_INT 122
5320: PPUSH
5321: LD_INT 145
5323: PPUSH
5324: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5328: LD_INT 137
5330: PPUSH
5331: LD_INT 84
5333: PPUSH
5334: LD_INT 61
5336: PPUSH
5337: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5341: LD_EXP 1
5345: PPUSH
5346: CALL_OW 310
5350: PPUSH
5351: CALL_OW 87
// InGameOn ;
5355: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5359: LD_INT 22
5361: PUSH
5362: LD_INT 1
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 69
5373: PPUSH
5374: LD_INT 130
5376: PPUSH
5377: LD_INT 103
5379: PPUSH
5380: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_INT 114
5391: PPUSH
5392: LD_INT 102
5394: PPUSH
5395: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5399: LD_EXP 1
5403: PPUSH
5404: LD_STRING D1-JMM-1
5406: PPUSH
5407: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5411: LD_EXP 1
5415: PPUSH
5416: CALL_OW 310
5420: PPUSH
5421: CALL_OW 87
// if IsOk ( Donaldson ) then
5425: LD_EXP 3
5429: PPUSH
5430: CALL_OW 302
5434: IFFALSE 5514
// begin Say ( Donaldson , D1-Don-1 ) ;
5436: LD_EXP 3
5440: PPUSH
5441: LD_STRING D1-Don-1
5443: PPUSH
5444: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5448: LD_EXP 1
5452: PPUSH
5453: CALL_OW 310
5457: PPUSH
5458: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5462: LD_EXP 1
5466: PPUSH
5467: LD_STRING D1-JMM-2
5469: PPUSH
5470: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5474: LD_EXP 1
5478: PPUSH
5479: CALL_OW 310
5483: PPUSH
5484: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5488: LD_EXP 3
5492: PPUSH
5493: LD_STRING D1-Don-2
5495: PPUSH
5496: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5500: LD_EXP 1
5504: PPUSH
5505: CALL_OW 310
5509: PPUSH
5510: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5514: LD_INT 22
5516: PUSH
5517: LD_INT 1
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 69
5528: PPUSH
5529: LD_INT 110
5531: PPUSH
5532: LD_INT 101
5534: PPUSH
5535: CALL_OW 171
// wait ( 0 0$1 ) ;
5539: LD_INT 35
5541: PPUSH
5542: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5546: LD_EXP 1
5550: PPUSH
5551: CALL_OW 310
5555: PPUSH
5556: CALL_OW 87
// wait ( 0 0$1 ) ;
5560: LD_INT 35
5562: PPUSH
5563: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5567: LD_EXP 1
5571: PPUSH
5572: CALL_OW 310
5576: PPUSH
5577: CALL_OW 87
// wait ( 0 0$1 ) ;
5581: LD_INT 35
5583: PPUSH
5584: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5588: LD_EXP 1
5592: PPUSH
5593: CALL_OW 310
5597: PPUSH
5598: CALL_OW 87
// wait ( 0 0$1 ) ;
5602: LD_INT 35
5604: PPUSH
5605: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5609: LD_EXP 1
5613: PPUSH
5614: CALL_OW 310
5618: PPUSH
5619: CALL_OW 87
// end ;
5623: PPOPN 1
5625: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 102
5631: PPUSH
5632: LD_INT 94
5634: PPUSH
5635: CALL_OW 293
5639: IFFALSE 5830
5641: GO 5643
5643: DISABLE
5644: LD_INT 0
5646: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5647: LD_INT 102
5649: PPUSH
5650: LD_INT 94
5652: PPUSH
5653: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5657: LD_INT 22
5659: PUSH
5660: LD_INT 1
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 26
5669: PUSH
5670: LD_INT 1
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 2
5679: PUSH
5680: LD_INT 25
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 25
5692: PUSH
5693: LD_INT 2
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 25
5702: PUSH
5703: LD_INT 3
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: LD_INT 25
5712: PUSH
5713: LD_INT 4
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 25
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 25
5732: PUSH
5733: LD_INT 8
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: PPUSH
5759: LD_STRING D1-Sol1-2
5761: PPUSH
5762: LD_STRING 
5764: PPUSH
5765: CALL 13477 0 3
// Say ( JMM , D1-JMM-3 ) ;
5769: LD_EXP 1
5773: PPUSH
5774: LD_STRING D1-JMM-3
5776: PPUSH
5777: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5781: LD_STRING M1
5783: PPUSH
5784: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 22
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PPUSH
5803: CALL_OW 69
5807: PUSH
5808: FOR_IN
5809: IFFALSE 5828
// ComMoveXY ( i , 95 , 84 ) ;
5811: LD_VAR 0 1
5815: PPUSH
5816: LD_INT 95
5818: PPUSH
5819: LD_INT 84
5821: PPUSH
5822: CALL_OW 111
5826: GO 5808
5828: POP
5829: POP
// end ;
5830: PPOPN 1
5832: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5833: GO 5835
5835: DISABLE
5836: LD_INT 0
5838: PPUSH
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5842: LD_ADDR_VAR 0 2
5846: PUSH
5847: LD_INT 8
5849: PPUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 3
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 9
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 70
5878: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5879: LD_ADDR_VAR 0 3
5883: PUSH
5884: LD_INT 22
5886: PUSH
5887: LD_INT 1
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: EMPTY
5895: LIST
5896: PPUSH
5897: CALL_OW 69
5901: ST_TO_ADDR
// enable ;
5902: ENABLE
// for i in your_units do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: FOR_IN
5914: IFFALSE 6569
// begin if See ( 3 , i ) then
5916: LD_INT 3
5918: PPUSH
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 292
5928: IFFALSE 6567
// begin disable ;
5930: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5931: LD_VAR 0 2
5935: PPUSH
5936: LD_INT 96
5938: PPUSH
5939: LD_INT 85
5941: PPUSH
5942: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5946: LD_VAR 0 2
5950: PPUSH
5951: LD_INT 96
5953: PPUSH
5954: LD_INT 85
5956: PPUSH
5957: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5961: LD_VAR 0 2
5965: PPUSH
5966: LD_INT 96
5968: PPUSH
5969: LD_INT 85
5971: PPUSH
5972: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_INT 96
5983: PPUSH
5984: LD_INT 85
5986: PPUSH
5987: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 96
5998: PPUSH
5999: LD_INT 85
6001: PPUSH
6002: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
// wait ( 0 0$2 ) ;
6021: LD_INT 70
6023: PPUSH
6024: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6028: LD_EXP 1
6032: PPUSH
6033: LD_STRING D1a-JMM-1
6035: PPUSH
6036: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6040: LD_EXP 3
6044: PPUSH
6045: LD_STRING D1a-Don-1
6047: PPUSH
6048: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6052: LD_ADDR_VAR 0 1
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 1
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 69
6071: PUSH
6072: FOR_IN
6073: IFFALSE 6092
// ComMoveXY ( i , 109 , 102 ) ;
6075: LD_VAR 0 1
6079: PPUSH
6080: LD_INT 109
6082: PPUSH
6083: LD_INT 102
6085: PPUSH
6086: CALL_OW 111
6090: GO 6072
6092: POP
6093: POP
// Say ( JMM , D1a-JMM-2 ) ;
6094: LD_EXP 1
6098: PPUSH
6099: LD_STRING D1a-JMM-2
6101: PPUSH
6102: CALL_OW 88
// wait ( 0 0$10 ) ;
6106: LD_INT 350
6108: PPUSH
6109: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6113: LD_EXP 1
6117: PPUSH
6118: CALL_OW 310
6122: PPUSH
6123: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6127: LD_EXP 3
6131: PPUSH
6132: LD_STRING D1b-Don-1
6134: PPUSH
6135: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6139: LD_EXP 1
6143: PPUSH
6144: LD_STRING D1b-JMM-1
6146: PPUSH
6147: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 26
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 2
6173: PUSH
6174: LD_INT 25
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 2
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 25
6206: PUSH
6207: LD_INT 4
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 25
6216: PUSH
6217: LD_INT 5
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 25
6226: PUSH
6227: LD_INT 8
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: PPUSH
6253: LD_STRING D1b-Sol1-1
6255: PPUSH
6256: LD_STRING 
6258: PPUSH
6259: CALL 13477 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6263: LD_EXP 3
6267: PPUSH
6268: LD_STRING D1b-Don-2
6270: PPUSH
6271: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D1b-JMM-2
6282: PPUSH
6283: CALL_OW 88
// dec = ShowQuery1 ;
6287: LD_ADDR_VAR 0 4
6291: PUSH
6292: CALL 13946 0 0
6296: ST_TO_ADDR
// if dec = 1 then
6297: LD_VAR 0 4
6301: PUSH
6302: LD_INT 1
6304: EQUAL
6305: IFFALSE 6411
// begin Say ( JMM , D2-JMM-1 ) ;
6307: LD_EXP 1
6311: PPUSH
6312: LD_STRING D2-JMM-1
6314: PPUSH
6315: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6319: LD_EXP 22
6323: PPUSH
6324: LD_STRING D2-Pow-1
6326: PPUSH
6327: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6331: LD_EXP 1
6335: PPUSH
6336: LD_STRING D2a-JMM-1
6338: PPUSH
6339: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6343: LD_EXP 22
6347: PPUSH
6348: LD_STRING D2a-Pow-1
6350: PPUSH
6351: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6355: LD_EXP 1
6359: PPUSH
6360: LD_STRING D2a-JMM-2
6362: PPUSH
6363: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6367: LD_EXP 22
6371: PPUSH
6372: LD_STRING D2a-Pow-2
6374: PPUSH
6375: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6379: LD_EXP 1
6383: PPUSH
6384: LD_STRING D2a-JMM-3
6386: PPUSH
6387: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6391: LD_EXP 22
6395: PPUSH
6396: LD_STRING D2a-Pow-3
6398: PPUSH
6399: CALL_OW 94
// secondPass = 2 ;
6403: LD_ADDR_EXP 28
6407: PUSH
6408: LD_INT 2
6410: ST_TO_ADDR
// end ; if dec = 2 then
6411: LD_VAR 0 4
6415: PUSH
6416: LD_INT 2
6418: EQUAL
6419: IFFALSE 6513
// begin Say ( JMM , D2-JMM-1 ) ;
6421: LD_EXP 1
6425: PPUSH
6426: LD_STRING D2-JMM-1
6428: PPUSH
6429: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6433: LD_EXP 22
6437: PPUSH
6438: LD_STRING D2-Pow-1
6440: PPUSH
6441: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6445: LD_EXP 1
6449: PPUSH
6450: LD_STRING D2b-JMM-1
6452: PPUSH
6453: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6457: LD_EXP 22
6461: PPUSH
6462: LD_STRING D2b-Pow-1
6464: PPUSH
6465: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6469: LD_EXP 1
6473: PPUSH
6474: LD_STRING D2c-JMM-1
6476: PPUSH
6477: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6481: LD_EXP 22
6485: PPUSH
6486: LD_STRING D2c-Pow-1
6488: PPUSH
6489: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6493: LD_EXP 1
6497: PPUSH
6498: LD_STRING D2c-JMM-2
6500: PPUSH
6501: CALL_OW 88
// secondPass = 2 ;
6505: LD_ADDR_EXP 28
6509: PUSH
6510: LD_INT 2
6512: ST_TO_ADDR
// end ; if dec = 3 then
6513: LD_VAR 0 4
6517: PUSH
6518: LD_INT 3
6520: EQUAL
6521: IFFALSE 6531
// secondPass = 1 ;
6523: LD_ADDR_EXP 28
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// InGameOff ;
6531: CALL_OW 9
// ruAI = 1 ;
6535: LD_ADDR_EXP 42
6539: PUSH
6540: LD_INT 1
6542: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6543: LD_INT 1
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 1
6554: PPUSH
6555: CALL_OW 80
// SaveForQuickRestart ;
6559: CALL_OW 22
// exit ;
6563: POP
6564: POP
6565: GO 6571
// end ; end ;
6567: GO 5913
6569: POP
6570: POP
// end ;
6571: PPOPN 4
6573: END
// every 1 1$0 trigger secondPass = 2 do
6574: LD_EXP 28
6578: PUSH
6579: LD_INT 2
6581: EQUAL
6582: IFFALSE 6802
6584: GO 6586
6586: DISABLE
// begin PowellSupport1 ;
6587: CALL 1863 0 0
// DialogueOn ;
6591: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6595: LD_EXP 1
6599: PPUSH
6600: LD_STRING DC1-JMM-1
6602: PPUSH
6603: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6607: LD_EXP 22
6611: PPUSH
6612: LD_STRING DC1-Pow-1
6614: PPUSH
6615: CALL_OW 94
// DialogueOff ;
6619: CALL_OW 7
// wait ( 3 3$0 ) ;
6623: LD_INT 6300
6625: PPUSH
6626: CALL_OW 67
// PowellSupport2 ;
6630: CALL 2322 0 0
// DialogueOn ;
6634: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6638: LD_EXP 1
6642: PPUSH
6643: LD_STRING DC2-JMM-1
6645: PPUSH
6646: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6650: LD_EXP 22
6654: PPUSH
6655: LD_STRING DC2-Pow-1
6657: PPUSH
6658: CALL_OW 94
// DialogueOff ;
6662: CALL_OW 7
// wait ( 3 3$00 ) ;
6666: LD_INT 6300
6668: PPUSH
6669: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6680: LD_INT 22
6682: PUSH
6683: LD_INT 1
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 2
6692: PUSH
6693: LD_INT 30
6695: PUSH
6696: LD_INT 0
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 30
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PPUSH
6722: CALL_OW 69
6726: PUSH
6727: LD_INT 11
6729: PPUSH
6730: LD_INT 22
6732: PUSH
6733: LD_INT 3
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 70
6744: NOT
6745: AND
6746: IFFALSE 6673
// wait ( 0 0$10 ) ;
6748: LD_INT 350
6750: PPUSH
6751: CALL_OW 67
// Legion ;
6755: CALL 6803 0 0
// wait ( 6 6$0 ) ;
6759: LD_INT 12600
6761: PPUSH
6762: CALL_OW 67
// PowellSupport3 ;
6766: CALL 2856 0 0
// DialogueOn ;
6770: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6774: LD_EXP 22
6778: PPUSH
6779: LD_STRING DC3-Pow-1
6781: PPUSH
6782: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6786: LD_EXP 1
6790: PPUSH
6791: LD_STRING DC3-JMM-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// end ;
6802: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb ; begin
6803: LD_INT 0
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6817: LD_ADDR_VAR 0 5
6821: PUSH
6822: LD_INT 22
6824: PUSH
6825: LD_INT 1
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 21
6834: PUSH
6835: LD_INT 3
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 0
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 30
6857: PUSH
6858: LD_INT 1
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: PPUSH
6875: CALL_OW 69
6879: ST_TO_ADDR
// for i in tmp do
6880: LD_ADDR_VAR 0 2
6884: PUSH
6885: LD_VAR 0 5
6889: PUSH
6890: FOR_IN
6891: IFFALSE 6924
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6893: LD_ADDR_VAR 0 8
6897: PUSH
6898: LD_VAR 0 8
6902: PUSH
6903: LD_VAR 0 2
6907: PPUSH
6908: CALL_OW 274
6912: PPUSH
6913: LD_INT 1
6915: PPUSH
6916: CALL_OW 275
6920: PLUS
6921: ST_TO_ADDR
6922: GO 6890
6924: POP
6925: POP
// for i in tmp do
6926: LD_ADDR_VAR 0 2
6930: PUSH
6931: LD_VAR 0 5
6935: PUSH
6936: FOR_IN
6937: IFFALSE 6970
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6939: LD_ADDR_VAR 0 9
6943: PUSH
6944: LD_VAR 0 9
6948: PUSH
6949: LD_VAR 0 2
6953: PPUSH
6954: CALL_OW 274
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 275
6966: PLUS
6967: ST_TO_ADDR
6968: GO 6936
6970: POP
6971: POP
// for i in tmp do
6972: LD_ADDR_VAR 0 2
6976: PUSH
6977: LD_VAR 0 5
6981: PUSH
6982: FOR_IN
6983: IFFALSE 7016
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6985: LD_ADDR_VAR 0 10
6989: PUSH
6990: LD_VAR 0 10
6994: PUSH
6995: LD_VAR 0 2
6999: PPUSH
7000: CALL_OW 274
7004: PPUSH
7005: LD_INT 3
7007: PPUSH
7008: CALL_OW 275
7012: PLUS
7013: ST_TO_ADDR
7014: GO 6982
7016: POP
7017: POP
// PrepareKurt ;
7018: CALL 4283 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7022: LD_EXP 26
7026: PPUSH
7027: LD_INT 144
7029: PPUSH
7030: LD_INT 111
7032: PPUSH
7033: CALL_OW 111
// wait ( 0 0$2 ) ;
7037: LD_INT 70
7039: PPUSH
7040: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
7044: LD_INT 8
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 343
// if kurtStatus > 0 then
7054: LD_EXP 27
7058: PUSH
7059: LD_INT 0
7061: GREATER
7062: IFFALSE 8740
// begin ComExitVehicle ( Kurt ) ;
7064: LD_EXP 24
7068: PPUSH
7069: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7073: LD_EXP 24
7077: PPUSH
7078: CALL_OW 87
// wait ( 0 0$1 ) ;
7082: LD_INT 35
7084: PPUSH
7085: CALL_OW 67
// DialogueOn ;
7089: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7093: LD_INT 22
7095: PUSH
7096: LD_INT 1
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 26
7105: PUSH
7106: LD_INT 1
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 2
7115: PUSH
7116: LD_INT 25
7118: PUSH
7119: LD_INT 1
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 25
7128: PUSH
7129: LD_INT 2
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 4
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 25
7158: PUSH
7159: LD_INT 5
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 25
7168: PUSH
7169: LD_INT 8
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: PPUSH
7190: CALL_OW 69
7194: PPUSH
7195: LD_STRING D3-Sol1-1
7197: PPUSH
7198: LD_STRING 
7200: PPUSH
7201: CALL 13477 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7205: LD_EXP 24
7209: PPUSH
7210: LD_STRING D3-Kurt-1
7212: PPUSH
7213: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7217: LD_EXP 1
7221: PPUSH
7222: LD_STRING D3-JMM-1
7224: PPUSH
7225: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7229: LD_EXP 24
7233: PPUSH
7234: LD_STRING D3-Kurt-2
7236: PPUSH
7237: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7241: LD_EXP 1
7245: PPUSH
7246: LD_STRING D3-JMM-2
7248: PPUSH
7249: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7253: LD_EXP 24
7257: PPUSH
7258: LD_STRING D3-Kurt-4
7260: PPUSH
7261: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7265: LD_EXP 1
7269: PPUSH
7270: LD_STRING D3-JMM-4
7272: PPUSH
7273: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7277: LD_EXP 24
7281: PPUSH
7282: LD_STRING D3-Kurt-5
7284: PPUSH
7285: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7289: LD_EXP 24
7293: PPUSH
7294: LD_STRING D3-Kurt-5a
7296: PPUSH
7297: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7301: LD_VAR 0 8
7305: PUSH
7306: LD_INT 60
7308: GREATEREQUAL
7309: PUSH
7310: LD_VAR 0 10
7314: PUSH
7315: LD_INT 60
7317: GREATEREQUAL
7318: AND
7319: IFFALSE 7354
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7321: LD_ADDR_VAR 0 3
7325: PUSH
7326: LD_STRING Q2K
7328: PPUSH
7329: LD_INT 1
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: LD_INT 4
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: PPUSH
7347: CALL_OW 98
7351: ST_TO_ADDR
7352: GO 7377
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7354: LD_ADDR_VAR 0 3
7358: PUSH
7359: LD_STRING Q2K
7361: PPUSH
7362: LD_INT 3
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PPUSH
7372: CALL_OW 98
7376: ST_TO_ADDR
// if dec1 = 1 then
7377: LD_VAR 0 3
7381: PUSH
7382: LD_INT 1
7384: EQUAL
7385: IFFALSE 7419
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7387: LD_EXP 1
7391: PPUSH
7392: LD_STRING D3Ka-JMM-1
7394: PPUSH
7395: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7399: LD_EXP 24
7403: PPUSH
7404: LD_STRING D3Ka-Kurt-1
7406: PPUSH
7407: CALL_OW 88
// warWithLegion = 1 ;
7411: LD_ADDR_EXP 31
7415: PUSH
7416: LD_INT 1
7418: ST_TO_ADDR
// end ; if dec1 = 2 then
7419: LD_VAR 0 3
7423: PUSH
7424: LD_INT 2
7426: EQUAL
7427: IFFALSE 7768
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7429: LD_EXP 1
7433: PPUSH
7434: LD_STRING D3Kb-JMM-1
7436: PPUSH
7437: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7441: LD_EXP 24
7445: PPUSH
7446: LD_STRING D3Kb-Kurt-1
7448: PPUSH
7449: CALL_OW 88
// cr := 60 ;
7453: LD_ADDR_VAR 0 11
7457: PUSH
7458: LD_INT 60
7460: ST_TO_ADDR
// sb := 60 ;
7461: LD_ADDR_VAR 0 12
7465: PUSH
7466: LD_INT 60
7468: ST_TO_ADDR
// for i in tmp do
7469: LD_ADDR_VAR 0 2
7473: PUSH
7474: LD_VAR 0 5
7478: PUSH
7479: FOR_IN
7480: IFFALSE 7766
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
7482: LD_ADDR_VAR 0 6
7486: PUSH
7487: LD_VAR 0 2
7491: PPUSH
7492: CALL_OW 274
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: CALL_OW 275
7504: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
7505: LD_ADDR_VAR 0 7
7509: PUSH
7510: LD_VAR 0 2
7514: PPUSH
7515: CALL_OW 274
7519: PPUSH
7520: LD_INT 3
7522: PPUSH
7523: CALL_OW 275
7527: ST_TO_ADDR
// if cr then
7528: LD_VAR 0 11
7532: IFFALSE 7646
// begin if tmp2 and tmp2 < cr then
7534: LD_VAR 0 6
7538: PUSH
7539: LD_VAR 0 6
7543: PUSH
7544: LD_VAR 0 11
7548: LESS
7549: AND
7550: IFFALSE 7598
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
7552: LD_VAR 0 2
7556: PPUSH
7557: CALL_OW 274
7561: PPUSH
7562: LD_INT 1
7564: PPUSH
7565: LD_VAR 0 11
7569: PUSH
7570: LD_VAR 0 6
7574: MINUS
7575: PPUSH
7576: CALL_OW 277
// cr := cr - tmp2 ;
7580: LD_ADDR_VAR 0 11
7584: PUSH
7585: LD_VAR 0 11
7589: PUSH
7590: LD_VAR 0 6
7594: MINUS
7595: ST_TO_ADDR
// end else
7596: GO 7646
// if tmp2 > cr then
7598: LD_VAR 0 6
7602: PUSH
7603: LD_VAR 0 11
7607: GREATER
7608: IFFALSE 7646
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
7610: LD_VAR 0 2
7614: PPUSH
7615: CALL_OW 274
7619: PPUSH
7620: LD_INT 1
7622: PPUSH
7623: LD_VAR 0 6
7627: PUSH
7628: LD_VAR 0 11
7632: MINUS
7633: PPUSH
7634: CALL_OW 277
// cr := 0 ;
7638: LD_ADDR_VAR 0 11
7642: PUSH
7643: LD_INT 0
7645: ST_TO_ADDR
// end ; end ; if sb then
7646: LD_VAR 0 12
7650: IFFALSE 7764
// begin if tmp2 and tmp2 < sb then
7652: LD_VAR 0 6
7656: PUSH
7657: LD_VAR 0 6
7661: PUSH
7662: LD_VAR 0 12
7666: LESS
7667: AND
7668: IFFALSE 7716
// begin SetResourceType ( GetBase ( i ) , 1 , sb - tmp2 ) ;
7670: LD_VAR 0 2
7674: PPUSH
7675: CALL_OW 274
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 12
7687: PUSH
7688: LD_VAR 0 6
7692: MINUS
7693: PPUSH
7694: CALL_OW 277
// sb := sb - tmp2 ;
7698: LD_ADDR_VAR 0 12
7702: PUSH
7703: LD_VAR 0 12
7707: PUSH
7708: LD_VAR 0 6
7712: MINUS
7713: ST_TO_ADDR
// end else
7714: GO 7764
// if tmp2 > sb then
7716: LD_VAR 0 6
7720: PUSH
7721: LD_VAR 0 12
7725: GREATER
7726: IFFALSE 7764
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - sb ) ;
7728: LD_VAR 0 2
7732: PPUSH
7733: CALL_OW 274
7737: PPUSH
7738: LD_INT 1
7740: PPUSH
7741: LD_VAR 0 6
7745: PUSH
7746: LD_VAR 0 12
7750: MINUS
7751: PPUSH
7752: CALL_OW 277
// cr := 0 ;
7756: LD_ADDR_VAR 0 11
7760: PUSH
7761: LD_INT 0
7763: ST_TO_ADDR
// end ; end ; end ;
7764: GO 7479
7766: POP
7767: POP
// end ; if dec1 = 3 then
7768: LD_VAR 0 3
7772: PUSH
7773: LD_INT 3
7775: EQUAL
7776: IFFALSE 8011
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7778: LD_EXP 1
7782: PPUSH
7783: LD_STRING D3Kc1-JMM-1
7785: PPUSH
7786: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7790: LD_EXP 24
7794: PPUSH
7795: LD_STRING D3Kc1-Kurt-1
7797: PPUSH
7798: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7802: LD_EXP 1
7806: PPUSH
7807: LD_STRING D3Kc1-JMM-2
7809: PPUSH
7810: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7814: LD_EXP 24
7818: PPUSH
7819: LD_STRING D3Kc1-Kurt-2
7821: PPUSH
7822: CALL_OW 88
// askSiberite = 1 ;
7826: LD_ADDR_EXP 33
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7834: LD_ADDR_VAR 0 3
7838: PUSH
7839: LD_STRING Q2b
7841: PPUSH
7842: LD_INT 1
7844: PUSH
7845: LD_INT 2
7847: PUSH
7848: LD_INT 3
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 98
7860: ST_TO_ADDR
// if dec2 = 1 then
7861: LD_VAR 0 4
7865: PUSH
7866: LD_INT 1
7868: EQUAL
7869: IFFALSE 7903
// begin Say ( JMM , D4a-JMM-1 ) ;
7871: LD_EXP 1
7875: PPUSH
7876: LD_STRING D4a-JMM-1
7878: PPUSH
7879: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7883: LD_EXP 24
7887: PPUSH
7888: LD_STRING D4b-Kurt-1
7890: PPUSH
7891: CALL_OW 88
// warWithLegion = 1 ;
7895: LD_ADDR_EXP 31
7899: PUSH
7900: LD_INT 1
7902: ST_TO_ADDR
// end ; if dec2 = 2 then
7903: LD_VAR 0 4
7907: PUSH
7908: LD_INT 2
7910: EQUAL
7911: IFFALSE 7945
// begin Say ( JMM , D4b-JMM-1 ) ;
7913: LD_EXP 1
7917: PPUSH
7918: LD_STRING D4b-JMM-1
7920: PPUSH
7921: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7925: LD_EXP 24
7929: PPUSH
7930: LD_STRING D4b-Kurt-1
7932: PPUSH
7933: CALL_OW 88
// warWithLegion = 1 ;
7937: LD_ADDR_EXP 31
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// end ; if dec2 = 3 then
7945: LD_VAR 0 4
7949: PUSH
7950: LD_INT 3
7952: EQUAL
7953: IFFALSE 8011
// begin Say ( JMM , D4c-JMM-1 ) ;
7955: LD_EXP 1
7959: PPUSH
7960: LD_STRING D4c-JMM-1
7962: PPUSH
7963: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7967: LD_EXP 24
7971: PPUSH
7972: LD_STRING D4c-Kurt-1
7974: PPUSH
7975: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7979: LD_EXP 1
7983: PPUSH
7984: LD_STRING D4c-JMM-2
7986: PPUSH
7987: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7991: LD_EXP 24
7995: PPUSH
7996: LD_STRING D4c-Kurt-2
7998: PPUSH
7999: CALL_OW 88
// fakeInfo = 1 ;
8003: LD_ADDR_EXP 32
8007: PUSH
8008: LD_INT 1
8010: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8011: LD_VAR 0 3
8015: PUSH
8016: LD_INT 4
8018: EQUAL
8019: IFFALSE 8676
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8021: LD_EXP 1
8025: PPUSH
8026: LD_STRING D3Kd-JMM-1
8028: PPUSH
8029: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
8033: LD_VAR 0 8
8037: PUSH
8038: LD_INT 120
8040: GREATEREQUAL
8041: PUSH
8042: LD_VAR 0 10
8046: PUSH
8047: LD_INT 120
8049: GREATEREQUAL
8050: AND
8051: IFFALSE 8086
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
8053: LD_ADDR_VAR 0 4
8057: PUSH
8058: LD_STRING Q2aK
8060: PPUSH
8061: LD_INT 1
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: LD_INT 3
8069: PUSH
8070: LD_INT 4
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 98
8083: ST_TO_ADDR
8084: GO 8109
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
8086: LD_ADDR_VAR 0 4
8090: PUSH
8091: LD_STRING Q2K
8093: PPUSH
8094: LD_INT 1
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 98
8108: ST_TO_ADDR
// if dec2 = 1 then
8109: LD_VAR 0 4
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: IFFALSE 8151
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8119: LD_EXP 1
8123: PPUSH
8124: LD_STRING D5Ka-JMM-1
8126: PPUSH
8127: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8131: LD_EXP 24
8135: PPUSH
8136: LD_STRING D5Ka-Kurt-1
8138: PPUSH
8139: CALL_OW 88
// warWithLegion = 1 ;
8143: LD_ADDR_EXP 31
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// end ; if dec2 = 2 then
8151: LD_VAR 0 4
8155: PUSH
8156: LD_INT 2
8158: EQUAL
8159: IFFALSE 8185
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8161: LD_EXP 1
8165: PPUSH
8166: LD_STRING D3Kb-JMM-1
8168: PPUSH
8169: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8173: LD_EXP 24
8177: PPUSH
8178: LD_STRING D3Kb-Kurt-1
8180: PPUSH
8181: CALL_OW 88
// end ; if dec2 = 3 then
8185: LD_VAR 0 4
8189: PUSH
8190: LD_INT 3
8192: EQUAL
8193: IFFALSE 8423
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8195: LD_EXP 1
8199: PPUSH
8200: LD_STRING D3Ke-JMM-1
8202: PPUSH
8203: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8207: LD_EXP 24
8211: PPUSH
8212: LD_STRING D3Ke-Kurt-1
8214: PPUSH
8215: CALL_OW 88
// PrepareLegionForPlayer ;
8219: CALL 4483 0 0
// for i in tmp do
8223: LD_ADDR_VAR 0 2
8227: PUSH
8228: LD_VAR 0 5
8232: PUSH
8233: FOR_IN
8234: IFFALSE 8321
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8236: LD_ADDR_VAR 0 6
8240: PUSH
8241: LD_VAR 0 2
8245: PPUSH
8246: CALL_OW 274
8250: PPUSH
8251: LD_INT 1
8253: PPUSH
8254: CALL_OW 275
8258: ST_TO_ADDR
// if tmp2 >= 120 then
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 120
8266: GREATEREQUAL
8267: IFFALSE 8299
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: CALL_OW 274
8278: PPUSH
8279: LD_INT 1
8281: PPUSH
8282: LD_VAR 0 6
8286: PUSH
8287: LD_INT 120
8289: MINUS
8290: PPUSH
8291: CALL_OW 277
// break ;
8295: GO 8321
// end else
8297: GO 8319
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8299: LD_VAR 0 2
8303: PPUSH
8304: CALL_OW 274
8308: PPUSH
8309: LD_INT 1
8311: PPUSH
8312: LD_INT 0
8314: PPUSH
8315: CALL_OW 277
// end ; end ;
8319: GO 8233
8321: POP
8322: POP
// for i in tmp do
8323: LD_ADDR_VAR 0 2
8327: PUSH
8328: LD_VAR 0 5
8332: PUSH
8333: FOR_IN
8334: IFFALSE 8421
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8336: LD_ADDR_VAR 0 6
8340: PUSH
8341: LD_VAR 0 2
8345: PPUSH
8346: CALL_OW 274
8350: PPUSH
8351: LD_INT 3
8353: PPUSH
8354: CALL_OW 275
8358: ST_TO_ADDR
// if tmp2 >= 120 then
8359: LD_VAR 0 6
8363: PUSH
8364: LD_INT 120
8366: GREATEREQUAL
8367: IFFALSE 8399
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8369: LD_VAR 0 2
8373: PPUSH
8374: CALL_OW 274
8378: PPUSH
8379: LD_INT 3
8381: PPUSH
8382: LD_VAR 0 6
8386: PUSH
8387: LD_INT 120
8389: MINUS
8390: PPUSH
8391: CALL_OW 277
// break ;
8395: GO 8421
// end else
8397: GO 8419
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8399: LD_VAR 0 2
8403: PPUSH
8404: CALL_OW 274
8408: PPUSH
8409: LD_INT 3
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 277
// end ; end ;
8419: GO 8333
8421: POP
8422: POP
// end ; if dec2 = 4 then
8423: LD_VAR 0 4
8427: PUSH
8428: LD_INT 4
8430: EQUAL
8431: IFFALSE 8676
// begin if dec1 = 3 then
8433: LD_VAR 0 3
8437: PUSH
8438: LD_INT 3
8440: EQUAL
8441: IFFALSE 8676
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8443: LD_EXP 1
8447: PPUSH
8448: LD_STRING D3Kc1-JMM-1
8450: PPUSH
8451: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8455: LD_EXP 24
8459: PPUSH
8460: LD_STRING D3Kc1-Kurt-1
8462: PPUSH
8463: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8467: LD_EXP 1
8471: PPUSH
8472: LD_STRING D3Kc1-JMM-2
8474: PPUSH
8475: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8479: LD_EXP 24
8483: PPUSH
8484: LD_STRING D3Kc1-Kurt-2
8486: PPUSH
8487: CALL_OW 88
// askSiberite = 1 ;
8491: LD_ADDR_EXP 33
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8499: LD_ADDR_VAR 0 3
8503: PUSH
8504: LD_STRING Q2b
8506: PPUSH
8507: LD_INT 1
8509: PUSH
8510: LD_INT 2
8512: PUSH
8513: LD_INT 3
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 98
8525: ST_TO_ADDR
// if dec2 = 1 then
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 1
8533: EQUAL
8534: IFFALSE 8568
// begin Say ( JMM , D4a-JMM-1 ) ;
8536: LD_EXP 1
8540: PPUSH
8541: LD_STRING D4a-JMM-1
8543: PPUSH
8544: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8548: LD_EXP 24
8552: PPUSH
8553: LD_STRING D4b-Kurt-1
8555: PPUSH
8556: CALL_OW 88
// warWithLegion = 1 ;
8560: LD_ADDR_EXP 31
8564: PUSH
8565: LD_INT 1
8567: ST_TO_ADDR
// end ; if dec2 = 2 then
8568: LD_VAR 0 4
8572: PUSH
8573: LD_INT 2
8575: EQUAL
8576: IFFALSE 8610
// begin Say ( JMM , D4b-JMM-1 ) ;
8578: LD_EXP 1
8582: PPUSH
8583: LD_STRING D4b-JMM-1
8585: PPUSH
8586: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8590: LD_EXP 24
8594: PPUSH
8595: LD_STRING D4b-Kurt-1
8597: PPUSH
8598: CALL_OW 88
// warWithLegion = 1 ;
8602: LD_ADDR_EXP 31
8606: PUSH
8607: LD_INT 1
8609: ST_TO_ADDR
// end ; if dec2 = 3 then
8610: LD_VAR 0 4
8614: PUSH
8615: LD_INT 3
8617: EQUAL
8618: IFFALSE 8676
// begin Say ( JMM , D4c-JMM-1 ) ;
8620: LD_EXP 1
8624: PPUSH
8625: LD_STRING D4c-JMM-1
8627: PPUSH
8628: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8632: LD_EXP 24
8636: PPUSH
8637: LD_STRING D4c-Kurt-1
8639: PPUSH
8640: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8644: LD_EXP 1
8648: PPUSH
8649: LD_STRING D4c-JMM-2
8651: PPUSH
8652: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8656: LD_EXP 24
8660: PPUSH
8661: LD_STRING D4c-Kurt-2
8663: PPUSH
8664: CALL_OW 88
// fakeInfo = 1 ;
8668: LD_ADDR_EXP 32
8672: PUSH
8673: LD_INT 1
8675: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8676: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8680: LD_EXP 24
8684: PPUSH
8685: LD_EXP 26
8689: PPUSH
8690: CALL_OW 120
// wait ( 0 0$1 ) ;
8694: LD_INT 35
8696: PPUSH
8697: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8701: LD_EXP 26
8705: PPUSH
8706: LD_INT 4
8708: PPUSH
8709: CALL_OW 113
// wait ( 0 0$3 ) ;
8713: LD_INT 105
8715: PPUSH
8716: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8720: LD_EXP 24
8724: PPUSH
8725: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8729: LD_EXP 26
8733: PPUSH
8734: CALL_OW 64
// end else
8738: GO 10400
// begin ComExitVehicle ( otherKurt ) ;
8740: LD_EXP 25
8744: PPUSH
8745: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8749: LD_EXP 25
8753: PPUSH
8754: CALL_OW 87
// wait ( 0 0$1 ) ;
8758: LD_INT 35
8760: PPUSH
8761: CALL_OW 67
// DialogueOn ;
8765: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8769: LD_INT 22
8771: PUSH
8772: LD_INT 1
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 26
8781: PUSH
8782: LD_INT 1
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 2
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 25
8804: PUSH
8805: LD_INT 2
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 25
8814: PUSH
8815: LD_INT 3
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 25
8824: PUSH
8825: LD_INT 4
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 25
8834: PUSH
8835: LD_INT 5
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: LD_INT 25
8844: PUSH
8845: LD_INT 8
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: PPUSH
8866: CALL_OW 69
8870: PPUSH
8871: LD_STRING D3-Sol1-1
8873: PPUSH
8874: LD_STRING 
8876: PPUSH
8877: CALL 13477 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8881: LD_EXP 25
8885: PPUSH
8886: LD_STRING D3-Kurt-1
8888: PPUSH
8889: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8893: LD_EXP 1
8897: PPUSH
8898: LD_STRING D3-JMM-1
8900: PPUSH
8901: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8905: LD_EXP 25
8909: PPUSH
8910: LD_STRING D3-Kurt-3
8912: PPUSH
8913: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8917: LD_EXP 1
8921: PPUSH
8922: LD_STRING D3-JMM-3
8924: PPUSH
8925: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8929: LD_EXP 25
8933: PPUSH
8934: LD_STRING D3-Kurt-5
8936: PPUSH
8937: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8941: LD_EXP 25
8945: PPUSH
8946: LD_STRING D3-Kurt-5b
8948: PPUSH
8949: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8953: LD_VAR 0 8
8957: PUSH
8958: LD_INT 100
8960: GREATEREQUAL
8961: PUSH
8962: LD_VAR 0 10
8966: PUSH
8967: LD_INT 100
8969: GREATEREQUAL
8970: AND
8971: IFFALSE 9006
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_STRING Q2
8980: PPUSH
8981: LD_INT 1
8983: PUSH
8984: LD_INT 2
8986: PUSH
8987: LD_INT 3
8989: PUSH
8990: LD_INT 4
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 98
9003: ST_TO_ADDR
9004: GO 9029
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
9006: LD_ADDR_VAR 0 3
9010: PUSH
9011: LD_STRING Q2
9013: PPUSH
9014: LD_INT 3
9016: PUSH
9017: LD_INT 4
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PPUSH
9024: CALL_OW 98
9028: ST_TO_ADDR
// if dec1 = 1 then
9029: LD_VAR 0 3
9033: PUSH
9034: LD_INT 1
9036: EQUAL
9037: IFFALSE 9071
// begin Say ( JMM , D3Ka-JMM-1 ) ;
9039: LD_EXP 1
9043: PPUSH
9044: LD_STRING D3Ka-JMM-1
9046: PPUSH
9047: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
9051: LD_EXP 25
9055: PPUSH
9056: LD_STRING D3Ka-Kurt-1
9058: PPUSH
9059: CALL_OW 88
// warWithLegion = 1 ;
9063: LD_ADDR_EXP 31
9067: PUSH
9068: LD_INT 1
9070: ST_TO_ADDR
// end ; if dec1 = 2 then
9071: LD_VAR 0 3
9075: PUSH
9076: LD_INT 2
9078: EQUAL
9079: IFFALSE 9420
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9081: LD_EXP 1
9085: PPUSH
9086: LD_STRING D3Kb-JMM-1
9088: PPUSH
9089: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9093: LD_EXP 25
9097: PPUSH
9098: LD_STRING D3Kb-Kurt-1
9100: PPUSH
9101: CALL_OW 88
// cr := 120 ;
9105: LD_ADDR_VAR 0 11
9109: PUSH
9110: LD_INT 120
9112: ST_TO_ADDR
// sb := 120 ;
9113: LD_ADDR_VAR 0 12
9117: PUSH
9118: LD_INT 120
9120: ST_TO_ADDR
// for i in tmp do
9121: LD_ADDR_VAR 0 2
9125: PUSH
9126: LD_VAR 0 5
9130: PUSH
9131: FOR_IN
9132: IFFALSE 9418
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9134: LD_ADDR_VAR 0 6
9138: PUSH
9139: LD_VAR 0 2
9143: PPUSH
9144: CALL_OW 274
9148: PPUSH
9149: LD_INT 1
9151: PPUSH
9152: CALL_OW 275
9156: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9157: LD_ADDR_VAR 0 7
9161: PUSH
9162: LD_VAR 0 2
9166: PPUSH
9167: CALL_OW 274
9171: PPUSH
9172: LD_INT 3
9174: PPUSH
9175: CALL_OW 275
9179: ST_TO_ADDR
// if cr then
9180: LD_VAR 0 11
9184: IFFALSE 9298
// begin if tmp2 and tmp2 < cr then
9186: LD_VAR 0 6
9190: PUSH
9191: LD_VAR 0 6
9195: PUSH
9196: LD_VAR 0 11
9200: LESS
9201: AND
9202: IFFALSE 9250
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9204: LD_VAR 0 2
9208: PPUSH
9209: CALL_OW 274
9213: PPUSH
9214: LD_INT 1
9216: PPUSH
9217: LD_VAR 0 11
9221: PUSH
9222: LD_VAR 0 6
9226: MINUS
9227: PPUSH
9228: CALL_OW 277
// cr := cr - tmp2 ;
9232: LD_ADDR_VAR 0 11
9236: PUSH
9237: LD_VAR 0 11
9241: PUSH
9242: LD_VAR 0 6
9246: MINUS
9247: ST_TO_ADDR
// end else
9248: GO 9298
// if tmp2 > cr then
9250: LD_VAR 0 6
9254: PUSH
9255: LD_VAR 0 11
9259: GREATER
9260: IFFALSE 9298
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9262: LD_VAR 0 2
9266: PPUSH
9267: CALL_OW 274
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: LD_VAR 0 6
9279: PUSH
9280: LD_VAR 0 11
9284: MINUS
9285: PPUSH
9286: CALL_OW 277
// cr := 0 ;
9290: LD_ADDR_VAR 0 11
9294: PUSH
9295: LD_INT 0
9297: ST_TO_ADDR
// end ; end ; if sb then
9298: LD_VAR 0 12
9302: IFFALSE 9416
// begin if tmp2 and tmp2 < sb then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 6
9313: PUSH
9314: LD_VAR 0 12
9318: LESS
9319: AND
9320: IFFALSE 9368
// begin SetResourceType ( GetBase ( i ) , 1 , sb - tmp2 ) ;
9322: LD_VAR 0 2
9326: PPUSH
9327: CALL_OW 274
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: LD_VAR 0 12
9339: PUSH
9340: LD_VAR 0 6
9344: MINUS
9345: PPUSH
9346: CALL_OW 277
// sb := sb - tmp2 ;
9350: LD_ADDR_VAR 0 12
9354: PUSH
9355: LD_VAR 0 12
9359: PUSH
9360: LD_VAR 0 6
9364: MINUS
9365: ST_TO_ADDR
// end else
9366: GO 9416
// if tmp2 > sb then
9368: LD_VAR 0 6
9372: PUSH
9373: LD_VAR 0 12
9377: GREATER
9378: IFFALSE 9416
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - sb ) ;
9380: LD_VAR 0 2
9384: PPUSH
9385: CALL_OW 274
9389: PPUSH
9390: LD_INT 1
9392: PPUSH
9393: LD_VAR 0 6
9397: PUSH
9398: LD_VAR 0 12
9402: MINUS
9403: PPUSH
9404: CALL_OW 277
// cr := 0 ;
9408: LD_ADDR_VAR 0 11
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// end ; end ; end ;
9416: GO 9131
9418: POP
9419: POP
// end ; if dec1 = 3 then
9420: LD_VAR 0 3
9424: PUSH
9425: LD_INT 3
9427: EQUAL
9428: IFFALSE 9663
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9430: LD_EXP 1
9434: PPUSH
9435: LD_STRING D3Kc1-JMM-1
9437: PPUSH
9438: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9442: LD_EXP 25
9446: PPUSH
9447: LD_STRING D3Kc1-Kurt-1
9449: PPUSH
9450: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9454: LD_EXP 1
9458: PPUSH
9459: LD_STRING D3Kc1-JMM-2
9461: PPUSH
9462: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9466: LD_EXP 25
9470: PPUSH
9471: LD_STRING D3Kc1-Kurt-2
9473: PPUSH
9474: CALL_OW 88
// askSiberite = 1 ;
9478: LD_ADDR_EXP 33
9482: PUSH
9483: LD_INT 1
9485: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9486: LD_ADDR_VAR 0 3
9490: PUSH
9491: LD_STRING Q2b
9493: PPUSH
9494: LD_INT 1
9496: PUSH
9497: LD_INT 2
9499: PUSH
9500: LD_INT 3
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: PPUSH
9508: CALL_OW 98
9512: ST_TO_ADDR
// if dec2 = 1 then
9513: LD_VAR 0 4
9517: PUSH
9518: LD_INT 1
9520: EQUAL
9521: IFFALSE 9555
// begin Say ( JMM , D4a-JMM-1 ) ;
9523: LD_EXP 1
9527: PPUSH
9528: LD_STRING D4a-JMM-1
9530: PPUSH
9531: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9535: LD_EXP 25
9539: PPUSH
9540: LD_STRING D4b-Kurt-1
9542: PPUSH
9543: CALL_OW 88
// warWithLegion = 1 ;
9547: LD_ADDR_EXP 31
9551: PUSH
9552: LD_INT 1
9554: ST_TO_ADDR
// end ; if dec2 = 2 then
9555: LD_VAR 0 4
9559: PUSH
9560: LD_INT 2
9562: EQUAL
9563: IFFALSE 9597
// begin Say ( JMM , D4b-JMM-1 ) ;
9565: LD_EXP 1
9569: PPUSH
9570: LD_STRING D4b-JMM-1
9572: PPUSH
9573: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9577: LD_EXP 25
9581: PPUSH
9582: LD_STRING D4b-Kurt-1
9584: PPUSH
9585: CALL_OW 88
// warWithLegion = 1 ;
9589: LD_ADDR_EXP 31
9593: PUSH
9594: LD_INT 1
9596: ST_TO_ADDR
// end ; if dec2 = 3 then
9597: LD_VAR 0 4
9601: PUSH
9602: LD_INT 3
9604: EQUAL
9605: IFFALSE 9663
// begin Say ( JMM , D4c-JMM-1 ) ;
9607: LD_EXP 1
9611: PPUSH
9612: LD_STRING D4c-JMM-1
9614: PPUSH
9615: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9619: LD_EXP 25
9623: PPUSH
9624: LD_STRING D4c-Kurt-1
9626: PPUSH
9627: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9631: LD_EXP 1
9635: PPUSH
9636: LD_STRING D4c-JMM-2
9638: PPUSH
9639: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9643: LD_EXP 25
9647: PPUSH
9648: LD_STRING D4c-Kurt-2
9650: PPUSH
9651: CALL_OW 88
// fakeInfo = 1 ;
9655: LD_ADDR_EXP 32
9659: PUSH
9660: LD_INT 1
9662: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9663: LD_VAR 0 3
9667: PUSH
9668: LD_INT 4
9670: EQUAL
9671: IFFALSE 10328
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9673: LD_EXP 1
9677: PPUSH
9678: LD_STRING D3Kd-JMM-1
9680: PPUSH
9681: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9685: LD_VAR 0 8
9689: PUSH
9690: LD_INT 200
9692: GREATEREQUAL
9693: PUSH
9694: LD_VAR 0 10
9698: PUSH
9699: LD_INT 200
9701: GREATEREQUAL
9702: AND
9703: IFFALSE 9738
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9705: LD_ADDR_VAR 0 4
9709: PUSH
9710: LD_STRING Q2a
9712: PPUSH
9713: LD_INT 1
9715: PUSH
9716: LD_INT 2
9718: PUSH
9719: LD_INT 3
9721: PUSH
9722: LD_INT 4
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: PPUSH
9731: CALL_OW 98
9735: ST_TO_ADDR
9736: GO 9761
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9738: LD_ADDR_VAR 0 4
9742: PUSH
9743: LD_STRING Q2a
9745: PPUSH
9746: LD_INT 1
9748: PUSH
9749: LD_INT 4
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PPUSH
9756: CALL_OW 98
9760: ST_TO_ADDR
// if dec2 = 1 then
9761: LD_VAR 0 4
9765: PUSH
9766: LD_INT 1
9768: EQUAL
9769: IFFALSE 9803
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9771: LD_EXP 1
9775: PPUSH
9776: LD_STRING D5Ka-JMM-1
9778: PPUSH
9779: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9783: LD_EXP 25
9787: PPUSH
9788: LD_STRING D5Ka-Kurt-1
9790: PPUSH
9791: CALL_OW 88
// warWithLegion = 1 ;
9795: LD_ADDR_EXP 31
9799: PUSH
9800: LD_INT 1
9802: ST_TO_ADDR
// end ; if dec2 = 2 then
9803: LD_VAR 0 4
9807: PUSH
9808: LD_INT 2
9810: EQUAL
9811: IFFALSE 9837
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9813: LD_EXP 1
9817: PPUSH
9818: LD_STRING D3Kb-JMM-1
9820: PPUSH
9821: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9825: LD_EXP 25
9829: PPUSH
9830: LD_STRING D3Kb-Kurt-1
9832: PPUSH
9833: CALL_OW 88
// end ; if dec2 = 3 then
9837: LD_VAR 0 4
9841: PUSH
9842: LD_INT 3
9844: EQUAL
9845: IFFALSE 10075
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9847: LD_EXP 1
9851: PPUSH
9852: LD_STRING D3Ke-JMM-1
9854: PPUSH
9855: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9859: LD_EXP 25
9863: PPUSH
9864: LD_STRING D3Ke-Kurt-1
9866: PPUSH
9867: CALL_OW 88
// PrepareLegionForPlayer ;
9871: CALL 4483 0 0
// for i in tmp do
9875: LD_ADDR_VAR 0 2
9879: PUSH
9880: LD_VAR 0 5
9884: PUSH
9885: FOR_IN
9886: IFFALSE 9973
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9888: LD_ADDR_VAR 0 6
9892: PUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 274
9902: PPUSH
9903: LD_INT 1
9905: PPUSH
9906: CALL_OW 275
9910: ST_TO_ADDR
// if tmp2 >= 200 then
9911: LD_VAR 0 6
9915: PUSH
9916: LD_INT 200
9918: GREATEREQUAL
9919: IFFALSE 9951
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9921: LD_VAR 0 2
9925: PPUSH
9926: CALL_OW 274
9930: PPUSH
9931: LD_INT 1
9933: PPUSH
9934: LD_VAR 0 6
9938: PUSH
9939: LD_INT 200
9941: MINUS
9942: PPUSH
9943: CALL_OW 277
// break ;
9947: GO 9973
// end else
9949: GO 9971
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9951: LD_VAR 0 2
9955: PPUSH
9956: CALL_OW 274
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_INT 0
9966: PPUSH
9967: CALL_OW 277
// end ; end ;
9971: GO 9885
9973: POP
9974: POP
// for i in tmp do
9975: LD_ADDR_VAR 0 2
9979: PUSH
9980: LD_VAR 0 5
9984: PUSH
9985: FOR_IN
9986: IFFALSE 10073
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9988: LD_ADDR_VAR 0 6
9992: PUSH
9993: LD_VAR 0 2
9997: PPUSH
9998: CALL_OW 274
10002: PPUSH
10003: LD_INT 3
10005: PPUSH
10006: CALL_OW 275
10010: ST_TO_ADDR
// if tmp2 >= 200 then
10011: LD_VAR 0 6
10015: PUSH
10016: LD_INT 200
10018: GREATEREQUAL
10019: IFFALSE 10051
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
10021: LD_VAR 0 2
10025: PPUSH
10026: CALL_OW 274
10030: PPUSH
10031: LD_INT 3
10033: PPUSH
10034: LD_VAR 0 6
10038: PUSH
10039: LD_INT 200
10041: MINUS
10042: PPUSH
10043: CALL_OW 277
// break ;
10047: GO 10073
// end else
10049: GO 10071
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
10051: LD_VAR 0 2
10055: PPUSH
10056: CALL_OW 274
10060: PPUSH
10061: LD_INT 3
10063: PPUSH
10064: LD_INT 0
10066: PPUSH
10067: CALL_OW 277
// end ; end ;
10071: GO 9985
10073: POP
10074: POP
// end ; if dec2 = 4 then
10075: LD_VAR 0 4
10079: PUSH
10080: LD_INT 4
10082: EQUAL
10083: IFFALSE 10328
// begin if dec1 = 3 then
10085: LD_VAR 0 3
10089: PUSH
10090: LD_INT 3
10092: EQUAL
10093: IFFALSE 10328
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
10095: LD_EXP 1
10099: PPUSH
10100: LD_STRING D3Kc1-JMM-1
10102: PPUSH
10103: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
10107: LD_EXP 25
10111: PPUSH
10112: LD_STRING D3Kc1-Kurt-1
10114: PPUSH
10115: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
10119: LD_EXP 1
10123: PPUSH
10124: LD_STRING D3Kc1-JMM-2
10126: PPUSH
10127: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
10131: LD_EXP 25
10135: PPUSH
10136: LD_STRING D3Kc1-Kurt-2
10138: PPUSH
10139: CALL_OW 88
// askSiberite = 1 ;
10143: LD_ADDR_EXP 33
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
10151: LD_ADDR_VAR 0 3
10155: PUSH
10156: LD_STRING Q2b
10158: PPUSH
10159: LD_INT 1
10161: PUSH
10162: LD_INT 2
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: PPUSH
10173: CALL_OW 98
10177: ST_TO_ADDR
// if dec2 = 1 then
10178: LD_VAR 0 4
10182: PUSH
10183: LD_INT 1
10185: EQUAL
10186: IFFALSE 10220
// begin Say ( JMM , D4a-JMM-1 ) ;
10188: LD_EXP 1
10192: PPUSH
10193: LD_STRING D4a-JMM-1
10195: PPUSH
10196: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
10200: LD_EXP 25
10204: PPUSH
10205: LD_STRING D4b-Kurt-1
10207: PPUSH
10208: CALL_OW 88
// warWithLegion = 1 ;
10212: LD_ADDR_EXP 31
10216: PUSH
10217: LD_INT 1
10219: ST_TO_ADDR
// end ; if dec2 = 2 then
10220: LD_VAR 0 4
10224: PUSH
10225: LD_INT 2
10227: EQUAL
10228: IFFALSE 10262
// begin Say ( JMM , D4b-JMM-1 ) ;
10230: LD_EXP 1
10234: PPUSH
10235: LD_STRING D4b-JMM-1
10237: PPUSH
10238: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
10242: LD_EXP 25
10246: PPUSH
10247: LD_STRING D4b-Kurt-1
10249: PPUSH
10250: CALL_OW 88
// warWithLegion = 1 ;
10254: LD_ADDR_EXP 31
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// end ; if dec2 = 3 then
10262: LD_VAR 0 4
10266: PUSH
10267: LD_INT 3
10269: EQUAL
10270: IFFALSE 10328
// begin Say ( JMM , D4c-JMM-1 ) ;
10272: LD_EXP 1
10276: PPUSH
10277: LD_STRING D4c-JMM-1
10279: PPUSH
10280: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
10284: LD_EXP 25
10288: PPUSH
10289: LD_STRING D4c-Kurt-1
10291: PPUSH
10292: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
10296: LD_EXP 1
10300: PPUSH
10301: LD_STRING D4c-JMM-2
10303: PPUSH
10304: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
10308: LD_EXP 25
10312: PPUSH
10313: LD_STRING D4c-Kurt-2
10315: PPUSH
10316: CALL_OW 88
// fakeInfo = 1 ;
10320: LD_ADDR_EXP 32
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
10328: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
10332: LD_INT 8
10334: PPUSH
10335: LD_INT 8
10337: PPUSH
10338: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
10342: LD_EXP 25
10346: PPUSH
10347: LD_EXP 26
10351: PPUSH
10352: CALL_OW 120
// wait ( 0 0$1 ) ;
10356: LD_INT 35
10358: PPUSH
10359: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
10363: LD_EXP 26
10367: PPUSH
10368: LD_INT 4
10370: PPUSH
10371: CALL_OW 113
// wait ( 0 0$6 ) ;
10375: LD_INT 210
10377: PPUSH
10378: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10382: LD_EXP 25
10386: PPUSH
10387: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10391: LD_EXP 26
10395: PPUSH
10396: CALL_OW 64
// end ; end ;
10400: LD_VAR 0 1
10404: RET
// every 0 0$10 trigger warWithLegion = 1 do
10405: LD_EXP 31
10409: PUSH
10410: LD_INT 1
10412: EQUAL
10413: IFFALSE 10422
10415: GO 10417
10417: DISABLE
// PrepareAttackLegion ;
10418: CALL 5147 0 0
10422: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10423: LD_EXP 15
10427: PPUSH
10428: CALL_OW 305
10432: PUSH
10433: LD_EXP 15
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 289
10445: NOT
10446: AND
10447: PUSH
10448: LD_EXP 15
10452: PPUSH
10453: LD_INT 2
10455: PPUSH
10456: CALL_OW 289
10460: NOT
10461: AND
10462: PUSH
10463: LD_EXP 15
10467: PPUSH
10468: LD_INT 3
10470: PPUSH
10471: CALL_OW 289
10475: NOT
10476: AND
10477: IFFALSE 10494
10479: GO 10481
10481: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10482: LD_EXP 15
10486: PPUSH
10487: LD_INT 4
10489: PPUSH
10490: CALL_OW 235
10494: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10495: LD_EXP 16
10499: PPUSH
10500: CALL_OW 305
10504: PUSH
10505: LD_EXP 16
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL_OW 289
10517: NOT
10518: AND
10519: PUSH
10520: LD_EXP 16
10524: PPUSH
10525: LD_INT 2
10527: PPUSH
10528: CALL_OW 289
10532: NOT
10533: AND
10534: PUSH
10535: LD_EXP 16
10539: PPUSH
10540: LD_INT 3
10542: PPUSH
10543: CALL_OW 289
10547: NOT
10548: AND
10549: IFFALSE 10566
10551: GO 10553
10553: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10554: LD_EXP 16
10558: PPUSH
10559: LD_INT 4
10561: PPUSH
10562: CALL_OW 235
10566: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10567: LD_EXP 17
10571: PPUSH
10572: CALL_OW 305
10576: PUSH
10577: LD_EXP 17
10581: PPUSH
10582: LD_INT 1
10584: PPUSH
10585: CALL_OW 289
10589: NOT
10590: AND
10591: PUSH
10592: LD_EXP 17
10596: PPUSH
10597: LD_INT 2
10599: PPUSH
10600: CALL_OW 289
10604: NOT
10605: AND
10606: PUSH
10607: LD_EXP 17
10611: PPUSH
10612: LD_INT 3
10614: PPUSH
10615: CALL_OW 289
10619: NOT
10620: AND
10621: IFFALSE 10638
10623: GO 10625
10625: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10626: LD_EXP 17
10630: PPUSH
10631: LD_INT 4
10633: PPUSH
10634: CALL_OW 235
10638: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10639: LD_EXP 18
10643: PPUSH
10644: CALL_OW 305
10648: PUSH
10649: LD_EXP 18
10653: PPUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL_OW 289
10661: NOT
10662: AND
10663: PUSH
10664: LD_EXP 18
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: CALL_OW 289
10676: NOT
10677: AND
10678: PUSH
10679: LD_EXP 18
10683: PPUSH
10684: LD_INT 3
10686: PPUSH
10687: CALL_OW 289
10691: NOT
10692: AND
10693: IFFALSE 10710
10695: GO 10697
10697: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10698: LD_EXP 18
10702: PPUSH
10703: LD_INT 4
10705: PPUSH
10706: CALL_OW 235
10710: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10711: LD_EXP 19
10715: PPUSH
10716: CALL_OW 305
10720: PUSH
10721: LD_EXP 19
10725: PPUSH
10726: LD_INT 1
10728: PPUSH
10729: CALL_OW 289
10733: NOT
10734: AND
10735: PUSH
10736: LD_EXP 19
10740: PPUSH
10741: LD_INT 2
10743: PPUSH
10744: CALL_OW 289
10748: NOT
10749: AND
10750: PUSH
10751: LD_EXP 19
10755: PPUSH
10756: LD_INT 3
10758: PPUSH
10759: CALL_OW 289
10763: NOT
10764: AND
10765: PUSH
10766: LD_EXP 19
10770: PPUSH
10771: LD_INT 2
10773: PPUSH
10774: CALL_OW 289
10778: NOT
10779: AND
10780: IFFALSE 10797
10782: GO 10784
10784: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10785: LD_EXP 19
10789: PPUSH
10790: LD_INT 4
10792: PPUSH
10793: CALL_OW 235
10797: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10798: LD_EXP 20
10802: PPUSH
10803: CALL_OW 305
10807: PUSH
10808: LD_EXP 20
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 289
10820: NOT
10821: AND
10822: PUSH
10823: LD_EXP 20
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 289
10835: NOT
10836: AND
10837: PUSH
10838: LD_EXP 20
10842: PPUSH
10843: LD_INT 3
10845: PPUSH
10846: CALL_OW 289
10850: NOT
10851: AND
10852: IFFALSE 10869
10854: GO 10856
10856: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10857: LD_EXP 20
10861: PPUSH
10862: LD_INT 4
10864: PPUSH
10865: CALL_OW 235
10869: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10870: LD_EXP 21
10874: PPUSH
10875: CALL_OW 305
10879: PUSH
10880: LD_EXP 21
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 289
10892: NOT
10893: AND
10894: PUSH
10895: LD_EXP 21
10899: PPUSH
10900: LD_INT 2
10902: PPUSH
10903: CALL_OW 289
10907: NOT
10908: AND
10909: PUSH
10910: LD_EXP 21
10914: PPUSH
10915: LD_INT 3
10917: PPUSH
10918: CALL_OW 289
10922: NOT
10923: AND
10924: IFFALSE 10941
10926: GO 10928
10928: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10929: LD_EXP 21
10933: PPUSH
10934: LD_INT 4
10936: PPUSH
10937: CALL_OW 235
10941: END
// every 0 0$1 do var i ;
10942: GO 10944
10944: DISABLE
10945: LD_INT 0
10947: PPUSH
// begin enable ;
10948: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10949: LD_ADDR_VAR 0 1
10953: PUSH
10954: LD_INT 22
10956: PUSH
10957: LD_INT 4
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PPUSH
10964: CALL_OW 69
10968: PUSH
10969: FOR_IN
10970: IFFALSE 11009
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10972: LD_VAR 0 1
10976: PPUSH
10977: LD_INT 4
10979: PPUSH
10980: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10984: LD_VAR 0 1
10988: PPUSH
10989: LD_INT 4
10991: PPUSH
10992: CALL_OW 308
10996: IFFALSE 11007
// RemoveUnit ( i ) ;
10998: LD_VAR 0 1
11002: PPUSH
11003: CALL_OW 64
// end ;
11007: GO 10969
11009: POP
11010: POP
// end ;
11011: PPOPN 1
11013: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
11014: LD_EXP 28
11018: PUSH
11019: LD_INT 1
11021: EQUAL
11022: IFFALSE 11461
11024: GO 11026
11026: DISABLE
11027: LD_INT 0
11029: PPUSH
11030: PPUSH
11031: PPUSH
// begin enable ;
11032: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
11033: LD_ADDR_VAR 0 2
11037: PUSH
11038: LD_INT 12
11040: PPUSH
11041: LD_INT 22
11043: PUSH
11044: LD_INT 3
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 21
11053: PUSH
11054: LD_INT 2
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL_OW 70
11069: ST_TO_ADDR
// for i in enemyVehs do
11070: LD_ADDR_VAR 0 1
11074: PUSH
11075: LD_VAR 0 2
11079: PUSH
11080: FOR_IN
11081: IFFALSE 11459
// begin if See ( 1 , i ) then
11083: LD_INT 1
11085: PPUSH
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 292
11095: IFFALSE 11457
// begin disable ;
11097: DISABLE
// DialogueOn ;
11098: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11102: LD_VAR 0 1
11106: PPUSH
11107: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11111: LD_INT 22
11113: PUSH
11114: LD_INT 1
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 26
11123: PUSH
11124: LD_INT 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 2
11133: PUSH
11134: LD_INT 25
11136: PUSH
11137: LD_INT 1
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 25
11146: PUSH
11147: LD_INT 2
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 25
11156: PUSH
11157: LD_INT 3
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 25
11166: PUSH
11167: LD_INT 4
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 25
11176: PUSH
11177: LD_INT 5
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 25
11186: PUSH
11187: LD_INT 8
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 69
11212: PPUSH
11213: LD_STRING DT1-Sol1-1
11215: PPUSH
11216: LD_STRING DT1-FSol1-1
11218: PPUSH
11219: CALL 13477 0 3
// dec = ShowQuery2 ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: CALL 14020 0 0
11232: ST_TO_ADDR
// if dec = 1 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 1
11240: EQUAL
11241: IFFALSE 11347
// begin Say ( JMM , D2-JMM-1 ) ;
11243: LD_EXP 1
11247: PPUSH
11248: LD_STRING D2-JMM-1
11250: PPUSH
11251: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11255: LD_EXP 22
11259: PPUSH
11260: LD_STRING D2-Pow-1
11262: PPUSH
11263: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
11267: LD_EXP 1
11271: PPUSH
11272: LD_STRING D2a-JMM-1
11274: PPUSH
11275: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
11279: LD_EXP 22
11283: PPUSH
11284: LD_STRING D2a-Pow-1
11286: PPUSH
11287: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
11291: LD_EXP 1
11295: PPUSH
11296: LD_STRING D2a-JMM-2
11298: PPUSH
11299: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
11303: LD_EXP 22
11307: PPUSH
11308: LD_STRING D2a-Pow-2
11310: PPUSH
11311: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
11315: LD_EXP 1
11319: PPUSH
11320: LD_STRING D2a-JMM-3
11322: PPUSH
11323: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
11327: LD_EXP 22
11331: PPUSH
11332: LD_STRING D2a-Pow-3
11334: PPUSH
11335: CALL_OW 94
// secondPass = 2 ;
11339: LD_ADDR_EXP 28
11343: PUSH
11344: LD_INT 2
11346: ST_TO_ADDR
// end ; if dec = 2 then
11347: LD_VAR 0 3
11351: PUSH
11352: LD_INT 2
11354: EQUAL
11355: IFFALSE 11449
// begin Say ( JMM , D2-JMM-1 ) ;
11357: LD_EXP 1
11361: PPUSH
11362: LD_STRING D2-JMM-1
11364: PPUSH
11365: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11369: LD_EXP 22
11373: PPUSH
11374: LD_STRING D2-Pow-1
11376: PPUSH
11377: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11381: LD_EXP 1
11385: PPUSH
11386: LD_STRING D2b-JMM-1
11388: PPUSH
11389: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11393: LD_EXP 22
11397: PPUSH
11398: LD_STRING D2b-Pow-1
11400: PPUSH
11401: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11405: LD_EXP 1
11409: PPUSH
11410: LD_STRING D2c-JMM-1
11412: PPUSH
11413: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11417: LD_EXP 22
11421: PPUSH
11422: LD_STRING D2c-Pow-1
11424: PPUSH
11425: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11429: LD_EXP 1
11433: PPUSH
11434: LD_STRING D2c-JMM-2
11436: PPUSH
11437: CALL_OW 88
// secondPass = 2 ;
11441: LD_ADDR_EXP 28
11445: PUSH
11446: LD_INT 2
11448: ST_TO_ADDR
// end ; DialogueOff ;
11449: CALL_OW 7
// exit ;
11453: POP
11454: POP
11455: GO 11461
// end ; end ;
11457: GO 11080
11459: POP
11460: POP
// end ;
11461: PPOPN 3
11463: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11464: LD_EXP 29
11468: PUSH
11469: LD_INT 1
11471: EQUAL
11472: IFFALSE 11705
11474: GO 11476
11476: DISABLE
11477: LD_INT 0
11479: PPUSH
11480: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11481: LD_ADDR_VAR 0 2
11485: PUSH
11486: LD_INT 11
11488: PPUSH
11489: LD_INT 22
11491: PUSH
11492: LD_INT 3
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 24
11501: PUSH
11502: LD_INT 250
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 70
11517: ST_TO_ADDR
// enable ;
11518: ENABLE
// for i in vehicles do
11519: LD_ADDR_VAR 0 1
11523: PUSH
11524: LD_VAR 0 2
11528: PUSH
11529: FOR_IN
11530: IFFALSE 11703
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11532: LD_INT 1
11534: PPUSH
11535: LD_VAR 0 1
11539: PPUSH
11540: CALL_OW 292
11544: PUSH
11545: LD_EXP 29
11549: PUSH
11550: LD_INT 1
11552: EQUAL
11553: AND
11554: PUSH
11555: LD_EXP 30
11559: PUSH
11560: LD_INT 4
11562: LESSEQUAL
11563: AND
11564: IFFALSE 11701
// begin disable ;
11566: DISABLE
// DialogueOn ;
11567: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11571: LD_INT 22
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: LD_INT 25
11596: PUSH
11597: LD_INT 1
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 25
11606: PUSH
11607: LD_INT 2
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 25
11626: PUSH
11627: LD_INT 4
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 5
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 25
11646: PUSH
11647: LD_INT 8
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 69
11672: PPUSH
11673: LD_STRING DT1-Sol1-1
11675: PPUSH
11676: LD_STRING DT1-FSol1-1
11678: PPUSH
11679: CALL 13477 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11683: LD_EXP 1
11687: PPUSH
11688: LD_STRING DT1-JMM-1
11690: PPUSH
11691: CALL_OW 88
// DialogueOff ;
11695: CALL_OW 7
// break ;
11699: GO 11703
// end ; end ;
11701: GO 11529
11703: POP
11704: POP
// end ;
11705: PPOPN 2
11707: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
11708: LD_EXP 29
11712: PUSH
11713: LD_INT 1
11715: EQUAL
11716: PUSH
11717: LD_INT 11
11719: PPUSH
11720: LD_INT 22
11722: PUSH
11723: LD_INT 3
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 24
11732: PUSH
11733: LD_INT 251
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 21
11745: PUSH
11746: LD_INT 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 21
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 70
11777: PUSH
11778: LD_INT 0
11780: EQUAL
11781: AND
11782: PUSH
11783: LD_EXP 30
11787: AND
11788: IFFALSE 11945
11790: GO 11792
11792: DISABLE
// begin vehicleTeleported = 2 ;
11793: LD_ADDR_EXP 29
11797: PUSH
11798: LD_INT 2
11800: ST_TO_ADDR
// DialogueOn ;
11801: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11805: LD_EXP 1
11809: PPUSH
11810: LD_STRING DT1a-JMM-1
11812: PPUSH
11813: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11817: LD_INT 22
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 26
11829: PUSH
11830: LD_INT 1
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 2
11839: PUSH
11840: LD_INT 25
11842: PUSH
11843: LD_INT 1
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 25
11852: PUSH
11853: LD_INT 2
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 25
11862: PUSH
11863: LD_INT 3
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 25
11872: PUSH
11873: LD_INT 4
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 25
11882: PUSH
11883: LD_INT 5
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 25
11892: PUSH
11893: LD_INT 8
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: PPUSH
11914: CALL_OW 69
11918: PPUSH
11919: LD_STRING DT1a-Sol1-1
11921: PPUSH
11922: LD_STRING DT1a-FSol1-1
11924: PPUSH
11925: CALL 13477 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11929: LD_EXP 1
11933: PPUSH
11934: LD_STRING DT1a-JMM-2
11936: PPUSH
11937: CALL_OW 88
// DialogueOff ;
11941: CALL_OW 7
// end ;
11945: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
11946: LD_EXP 29
11950: PUSH
11951: LD_INT 3
11953: EQUAL
11954: PUSH
11955: LD_INT 11
11957: PPUSH
11958: LD_INT 22
11960: PUSH
11961: LD_INT 3
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 101
11970: PUSH
11971: LD_INT 1
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 70
11986: AND
11987: IFFALSE 12268
11989: GO 11991
11991: DISABLE
11992: LD_INT 0
11994: PPUSH
11995: PPUSH
11996: PPUSH
// begin wait ( 0 0$0.3 ) ;
11997: LD_INT 10
11999: PPUSH
12000: CALL_OW 67
// DialogueOn ;
12004: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
12008: LD_ADDR_VAR 0 3
12012: PUSH
12013: LD_INT 22
12015: PUSH
12016: LD_INT 1
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 26
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 25
12038: PUSH
12039: LD_INT 1
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 25
12048: PUSH
12049: LD_INT 2
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 25
12058: PUSH
12059: LD_INT 3
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 25
12068: PUSH
12069: LD_INT 4
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 25
12078: PUSH
12079: LD_INT 5
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 25
12088: PUSH
12089: LD_INT 8
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 69
12114: PPUSH
12115: LD_STRING DT2-Sol1-1
12117: PPUSH
12118: LD_STRING DT2-FSol1-1
12120: PPUSH
12121: CALL 13477 0 3
12125: ST_TO_ADDR
// DialogueOff ;
12126: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
12130: LD_INT 35
12132: PPUSH
12133: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) = 0 ;
12137: LD_INT 11
12139: PPUSH
12140: LD_INT 22
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 24
12152: PUSH
12153: LD_INT 250
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 70
12168: PUSH
12169: LD_INT 0
12171: EQUAL
12172: IFFALSE 12130
// wait ( 0 0$2 ) ;
12174: LD_INT 70
12176: PPUSH
12177: CALL_OW 67
// vehicleTeleported = 4 ;
12181: LD_ADDR_EXP 29
12185: PUSH
12186: LD_INT 4
12188: ST_TO_ADDR
// DialogueOn ;
12189: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
12193: LD_EXP 1
12197: PPUSH
12198: LD_STRING DT2a-JMM-1
12200: PPUSH
12201: CALL_OW 88
// if speaker then
12205: LD_VAR 0 3
12209: IFFALSE 12252
// if GetSex ( speaker ) = 1 then
12211: LD_VAR 0 3
12215: PPUSH
12216: CALL_OW 258
12220: PUSH
12221: LD_INT 1
12223: EQUAL
12224: IFFALSE 12240
// Say ( speaker , DT2a-Sol1-1 ) else
12226: LD_VAR 0 3
12230: PPUSH
12231: LD_STRING DT2a-Sol1-1
12233: PPUSH
12234: CALL_OW 88
12238: GO 12252
// Say ( speaker , DT2a-FSol1-1 ) ;
12240: LD_VAR 0 3
12244: PPUSH
12245: LD_STRING DT2a-FSol1-1
12247: PPUSH
12248: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
12252: LD_EXP 3
12256: PPUSH
12257: LD_STRING DT2a-Don-1
12259: PPUSH
12260: CALL_OW 88
// DialogueOff ;
12264: CALL_OW 7
// end ;
12268: PPOPN 3
12270: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12271: LD_INT 1
12273: PPUSH
12274: LD_INT 45
12276: PPUSH
12277: LD_INT 74
12279: PPUSH
12280: CALL_OW 293
12284: IFFALSE 12452
12286: GO 12288
12288: DISABLE
// begin DialogueOn ;
12289: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12293: LD_INT 36
12295: PPUSH
12296: LD_INT 55
12298: PPUSH
12299: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12303: LD_INT 22
12305: PUSH
12306: LD_INT 1
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 26
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 2
12325: PUSH
12326: LD_INT 25
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 25
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 25
12348: PUSH
12349: LD_INT 3
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 25
12358: PUSH
12359: LD_INT 4
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 25
12368: PUSH
12369: LD_INT 5
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 8
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: PPUSH
12400: CALL_OW 69
12404: PPUSH
12405: LD_STRING D5-Sol1-1
12407: PPUSH
12408: LD_STRING D5-FSol1-
12410: PPUSH
12411: CALL 13477 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12415: LD_EXP 31
12419: PUSH
12420: LD_INT 1
12422: EQUAL
12423: PUSH
12424: LD_EXP 3
12428: PPUSH
12429: CALL_OW 300
12433: AND
12434: IFFALSE 12448
// Say ( Donaldson , D5-Don-1 ) ;
12436: LD_EXP 3
12440: PPUSH
12441: LD_STRING D5-Don-1
12443: PPUSH
12444: CALL_OW 88
// DialogueOff ;
12448: CALL_OW 7
// end ;
12452: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12453: LD_INT 1
12455: PPUSH
12456: LD_INT 10
12458: PPUSH
12459: CALL_OW 292
12463: PUSH
12464: LD_INT 1
12466: PPUSH
12467: LD_INT 137
12469: PPUSH
12470: CALL_OW 292
12474: OR
12475: IFFALSE 12619
12477: GO 12479
12479: DISABLE
// begin DialogueOn ;
12480: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12484: LD_INT 22
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 26
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 2
12506: PUSH
12507: LD_INT 25
12509: PUSH
12510: LD_INT 1
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 25
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 25
12529: PUSH
12530: LD_INT 3
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 25
12539: PUSH
12540: LD_INT 4
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 25
12549: PUSH
12550: LD_INT 5
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 25
12559: PUSH
12560: LD_INT 8
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 69
12585: PPUSH
12586: LD_STRING DT3-Sol1-1
12588: PPUSH
12589: LD_STRING DT3-FSol1-1
12591: PPUSH
12592: CALL 13477 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12596: LD_EXP 1
12600: PPUSH
12601: LD_STRING DT3-JMM-1
12603: PPUSH
12604: CALL_OW 88
// DialogueOff ;
12608: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12612: LD_STRING M2
12614: PPUSH
12615: CALL_OW 337
// end ;
12619: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12620: LD_EXP 43
12624: PUSH
12625: LD_INT 0
12627: EQUAL
12628: IFFALSE 12711
12630: GO 12632
12632: DISABLE
12633: LD_INT 0
12635: PPUSH
// begin enable ;
12636: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12637: LD_ADDR_VAR 0 1
12641: PUSH
12642: LD_INT 10
12644: PPUSH
12645: LD_INT 22
12647: PUSH
12648: LD_INT 3
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 21
12657: PUSH
12658: LD_INT 2
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 58
12667: PUSH
12668: EMPTY
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: PPUSH
12676: CALL_OW 70
12680: PUSH
12681: FOR_IN
12682: IFFALSE 12709
// if GetLives ( i ) < 1000 then
12684: LD_VAR 0 1
12688: PPUSH
12689: CALL_OW 256
12693: PUSH
12694: LD_INT 1000
12696: LESS
12697: IFFALSE 12707
// ruEscape = 1 ;
12699: LD_ADDR_EXP 43
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
12707: GO 12681
12709: POP
12710: POP
// end ;
12711: PPOPN 1
12713: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12714: LD_INT 3
12716: PPUSH
12717: CALL_OW 303
12721: PUSH
12722: LD_INT 4
12724: PPUSH
12725: CALL_OW 303
12729: OR
12730: PUSH
12731: LD_INT 22
12733: PPUSH
12734: LD_INT 22
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 70
12748: PUSH
12749: LD_INT 0
12751: GREATER
12752: OR
12753: PUSH
12754: LD_EXP 43
12758: PUSH
12759: LD_INT 1
12761: EQUAL
12762: OR
12763: IFFALSE 12994
12765: GO 12767
12767: DISABLE
12768: LD_INT 0
12770: PPUSH
12771: PPUSH
12772: PPUSH
// begin ruAI = 0 ;
12773: LD_ADDR_EXP 42
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12781: LD_ADDR_VAR 0 3
12785: PUSH
12786: LD_INT 10
12788: PPUSH
12789: LD_INT 22
12791: PUSH
12792: LD_INT 3
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: LD_INT 21
12801: PUSH
12802: LD_INT 2
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 58
12811: PUSH
12812: EMPTY
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: LIST
12819: PPUSH
12820: CALL_OW 70
12824: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12825: LD_EXP 35
12829: PPUSH
12830: CALL_OW 122
// wait ( 0 0$1 ) ;
12834: LD_INT 35
12836: PPUSH
12837: CALL_OW 67
// DialogueOn ;
12841: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12845: LD_EXP 1
12849: PPUSH
12850: LD_STRING D6-JMM-1
12852: PPUSH
12853: CALL_OW 88
// DialogueOff ;
12857: CALL_OW 7
// if vehs > 0 then
12861: LD_VAR 0 3
12865: PUSH
12866: LD_INT 0
12868: GREATER
12869: IFFALSE 12939
// for i := 1 to RuScientists do
12871: LD_ADDR_VAR 0 1
12875: PUSH
12876: DOUBLE
12877: LD_INT 1
12879: DEC
12880: ST_TO_ADDR
12881: LD_EXP 35
12885: PUSH
12886: FOR_TO
12887: IFFALSE 12935
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12889: LD_EXP 35
12893: PUSH
12894: LD_VAR 0 1
12898: ARRAY
12899: PPUSH
12900: LD_INT 3
12902: PUSH
12903: LD_INT 60
12905: PUSH
12906: EMPTY
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PPUSH
12913: CALL_OW 72
12917: PPUSH
12918: LD_VAR 0 3
12922: PUSH
12923: LD_VAR 0 1
12927: ARRAY
12928: PPUSH
12929: CALL_OW 120
12933: GO 12886
12935: POP
12936: POP
12937: GO 12994
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12939: LD_EXP 35
12943: PUSH
12944: LD_VAR 0 1
12948: ARRAY
12949: PPUSH
12950: LD_INT 3
12952: PUSH
12953: LD_INT 60
12955: PUSH
12956: EMPTY
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 72
12967: PPUSH
12968: LD_INT 13
12970: PUSH
12971: LD_INT 14
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_INT 2
12983: PPUSH
12984: CALL_OW 12
12988: ARRAY
12989: PPUSH
12990: CALL_OW 113
// end ;
12994: PPOPN 3
12996: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
12997: LD_EXP 42
13001: PUSH
13002: LD_INT 0
13004: EQUAL
13005: IFFALSE 13377
13007: GO 13009
13009: DISABLE
13010: LD_INT 0
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
// begin enable ;
13016: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
13017: LD_EXP 35
13021: PPUSH
13022: LD_INT 2
13024: PUSH
13025: LD_INT 95
13027: PUSH
13028: LD_INT 13
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 95
13037: PUSH
13038: LD_INT 14
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 72
13054: PUSH
13055: LD_INT 33
13057: PUSH
13058: LD_INT 1
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 23
13067: PUSH
13068: LD_INT 3
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 2
13077: PUSH
13078: LD_INT 95
13080: PUSH
13081: LD_INT 13
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 95
13090: PUSH
13091: LD_INT 14
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: PPUSH
13108: CALL_OW 69
13112: OR
13113: IFFALSE 13302
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
13115: LD_ADDR_VAR 0 2
13119: PUSH
13120: LD_EXP 35
13124: PPUSH
13125: LD_INT 2
13127: PUSH
13128: LD_INT 95
13130: PUSH
13131: LD_INT 13
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 95
13140: PUSH
13141: LD_INT 14
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: PPUSH
13153: CALL_OW 72
13157: PUSH
13158: LD_INT 1
13160: ARRAY
13161: ST_TO_ADDR
// if not unit then
13162: LD_VAR 0 2
13166: NOT
13167: IFFALSE 13302
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
13169: LD_ADDR_VAR 0 4
13173: PUSH
13174: LD_INT 2
13176: PUSH
13177: LD_INT 95
13179: PUSH
13180: LD_INT 13
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 95
13189: PUSH
13190: LD_INT 14
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 33
13204: PUSH
13205: LD_INT 1
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 23
13214: PUSH
13215: LD_INT 3
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: ST_TO_ADDR
// if not tmp then
13232: LD_VAR 0 4
13236: NOT
13237: IFFALSE 13241
// exit ;
13239: GO 13377
// for i in tmp do
13241: LD_ADDR_VAR 0 1
13245: PUSH
13246: LD_VAR 0 4
13250: PUSH
13251: FOR_IN
13252: IFFALSE 13300
// if IsDrivenBy ( i ) in RuScientists then
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 311
13263: PUSH
13264: LD_EXP 35
13268: IN
13269: IFFALSE 13298
// begin unit := IsDrivenBy ( i ) ;
13271: LD_ADDR_VAR 0 2
13275: PUSH
13276: LD_VAR 0 1
13280: PPUSH
13281: CALL_OW 311
13285: ST_TO_ADDR
// veh := i ;
13286: LD_ADDR_VAR 0 3
13290: PUSH
13291: LD_VAR 0 1
13295: ST_TO_ADDR
// break ;
13296: GO 13300
// end ;
13298: GO 13251
13300: POP
13301: POP
// end ; end ; if not unit then
13302: LD_VAR 0 2
13306: NOT
13307: IFFALSE 13311
// exit ;
13309: GO 13377
// RuScientists = RuScientists diff unit ;
13311: LD_ADDR_EXP 35
13315: PUSH
13316: LD_EXP 35
13320: PUSH
13321: LD_VAR 0 2
13325: DIFF
13326: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13327: LD_VAR 0 2
13331: PPUSH
13332: CALL_OW 64
// if veh then
13336: LD_VAR 0 3
13340: IFFALSE 13377
// begin if GetWeapon ( veh ) = 49 then
13342: LD_VAR 0 3
13346: PPUSH
13347: CALL_OW 264
13351: PUSH
13352: LD_INT 49
13354: EQUAL
13355: IFFALSE 13368
// KillUnit ( veh ) else
13357: LD_VAR 0 3
13361: PPUSH
13362: CALL_OW 66
13366: GO 13377
// RemoveUnit ( veh ) ;
13368: LD_VAR 0 3
13372: PPUSH
13373: CALL_OW 64
// end ; end ; end_of_file
13377: PPOPN 4
13379: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13380: LD_INT 0
13382: PPUSH
13383: PPUSH
// if exist_mode then
13384: LD_VAR 0 2
13388: IFFALSE 13407
// unit := CreateCharacter ( ident ) else
13390: LD_ADDR_VAR 0 4
13394: PUSH
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 34
13404: ST_TO_ADDR
13405: GO 13422
// unit := NewCharacter ( ident ) ;
13407: LD_ADDR_VAR 0 4
13411: PUSH
13412: LD_VAR 0 1
13416: PPUSH
13417: CALL_OW 25
13421: ST_TO_ADDR
// result := unit ;
13422: LD_ADDR_VAR 0 3
13426: PUSH
13427: LD_VAR 0 4
13431: ST_TO_ADDR
// end ;
13432: LD_VAR 0 3
13436: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13437: LD_INT 0
13439: PPUSH
13440: PPUSH
// for i in charactersList do
13441: LD_ADDR_VAR 0 4
13445: PUSH
13446: LD_VAR 0 1
13450: PUSH
13451: FOR_IN
13452: IFFALSE 13470
// SaveCharacters ( i , ident ) ;
13454: LD_VAR 0 4
13458: PPUSH
13459: LD_VAR 0 2
13463: PPUSH
13464: CALL_OW 38
13468: GO 13451
13470: POP
13471: POP
// end ;
13472: LD_VAR 0 3
13476: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
13477: LD_INT 0
13479: PPUSH
13480: PPUSH
13481: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13482: LD_ADDR_VAR 0 1
13486: PUSH
13487: LD_VAR 0 1
13491: PUSH
13492: LD_EXP 1
13496: PUSH
13497: LD_EXP 7
13501: PUSH
13502: LD_EXP 3
13506: PUSH
13507: LD_EXP 4
13511: PUSH
13512: LD_EXP 5
13516: PUSH
13517: LD_EXP 2
13521: PUSH
13522: LD_EXP 12
13526: PUSH
13527: LD_EXP 13
13531: PUSH
13532: LD_EXP 9
13536: PUSH
13537: LD_EXP 11
13541: PUSH
13542: LD_EXP 6
13546: PUSH
13547: LD_EXP 8
13551: PUSH
13552: LD_EXP 10
13556: PUSH
13557: LD_EXP 22
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: DIFF
13578: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
13579: LD_ADDR_VAR 0 6
13583: PUSH
13584: LD_VAR 0 1
13588: PUSH
13589: LD_INT 1
13591: PPUSH
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 12
13601: ARRAY
13602: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
13603: LD_VAR 0 6
13607: PPUSH
13608: CALL_OW 258
13612: PUSH
13613: LD_INT 1
13615: EQUAL
13616: IFFALSE 13634
// Say ( speaker , dialogMID ) else
13618: LD_VAR 0 6
13622: PPUSH
13623: LD_VAR 0 2
13627: PPUSH
13628: CALL_OW 88
13632: GO 13648
// Say ( speaker , dialogFID ) ;
13634: LD_VAR 0 6
13638: PPUSH
13639: LD_VAR 0 3
13643: PPUSH
13644: CALL_OW 88
// result := speaker ;
13648: LD_ADDR_VAR 0 4
13652: PUSH
13653: LD_VAR 0 6
13657: ST_TO_ADDR
// end ;
13658: LD_VAR 0 4
13662: RET
// export function PrepareDifficulty ; var tmp ; begin
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
// if Difficulty = 1 then
13667: LD_OWVAR 67
13671: PUSH
13672: LD_INT 1
13674: EQUAL
13675: IFFALSE 13693
// begin RuSolMinLevel = 8 ;
13677: LD_ADDR_EXP 37
13681: PUSH
13682: LD_INT 8
13684: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13685: LD_ADDR_EXP 38
13689: PUSH
13690: LD_INT 10
13692: ST_TO_ADDR
// end ; if Difficulty = 2 then
13693: LD_OWVAR 67
13697: PUSH
13698: LD_INT 2
13700: EQUAL
13701: IFFALSE 13795
// begin RuSolMinLevel = 9 ;
13703: LD_ADDR_EXP 37
13707: PUSH
13708: LD_INT 9
13710: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13711: LD_ADDR_EXP 38
13715: PUSH
13716: LD_INT 10
13718: ST_TO_ADDR
// uc_nation = 3 ;
13719: LD_ADDR_OWVAR 21
13723: PUSH
13724: LD_INT 3
13726: ST_TO_ADDR
// uc_side = 3 ;
13727: LD_ADDR_OWVAR 20
13731: PUSH
13732: LD_INT 3
13734: ST_TO_ADDR
// bc_level = 10 ;
13735: LD_ADDR_OWVAR 43
13739: PUSH
13740: LD_INT 10
13742: ST_TO_ADDR
// bc_type = b_turret ;
13743: LD_ADDR_OWVAR 42
13747: PUSH
13748: LD_INT 33
13750: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13751: LD_ADDR_VAR 0 2
13755: PUSH
13756: LD_INT 86
13758: PPUSH
13759: LD_INT 34
13761: PPUSH
13762: LD_INT 2
13764: PPUSH
13765: CALL_OW 47
13769: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13770: LD_VAR 0 2
13774: PPUSH
13775: LD_INT 49
13777: PPUSH
13778: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13782: LD_INT 64
13784: PPUSH
13785: LD_INT 3
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 322
// end ; if Difficulty = 3 then
13795: LD_OWVAR 67
13799: PUSH
13800: LD_INT 3
13802: EQUAL
13803: IFFALSE 13941
// begin RuSolMinLevel = 10 ;
13805: LD_ADDR_EXP 37
13809: PUSH
13810: LD_INT 10
13812: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13813: LD_ADDR_EXP 38
13817: PUSH
13818: LD_INT 10
13820: ST_TO_ADDR
// uc_nation = 3 ;
13821: LD_ADDR_OWVAR 21
13825: PUSH
13826: LD_INT 3
13828: ST_TO_ADDR
// uc_side = 3 ;
13829: LD_ADDR_OWVAR 20
13833: PUSH
13834: LD_INT 3
13836: ST_TO_ADDR
// bc_level = 10 ;
13837: LD_ADDR_OWVAR 43
13841: PUSH
13842: LD_INT 10
13844: ST_TO_ADDR
// bc_type = b_turret ;
13845: LD_ADDR_OWVAR 42
13849: PUSH
13850: LD_INT 33
13852: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13853: LD_ADDR_VAR 0 2
13857: PUSH
13858: LD_INT 86
13860: PPUSH
13861: LD_INT 34
13863: PPUSH
13864: LD_INT 2
13866: PPUSH
13867: CALL_OW 47
13871: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13872: LD_VAR 0 2
13876: PPUSH
13877: LD_INT 49
13879: PPUSH
13880: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13884: LD_ADDR_VAR 0 2
13888: PUSH
13889: LD_INT 93
13891: PPUSH
13892: LD_INT 31
13894: PPUSH
13895: LD_INT 2
13897: PPUSH
13898: CALL_OW 47
13902: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13903: LD_VAR 0 2
13907: PPUSH
13908: LD_INT 49
13910: PPUSH
13911: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13915: LD_INT 64
13917: PPUSH
13918: LD_INT 3
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13928: LD_INT 65
13930: PPUSH
13931: LD_INT 3
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: CALL_OW 322
// end ; end ;
13941: LD_VAR 0 1
13945: RET
// export function ShowQuery1 ; begin
13946: LD_INT 0
13948: PPUSH
// case query ( Q1 ) of 1 :
13949: LD_STRING Q1
13951: PPUSH
13952: CALL_OW 97
13956: PUSH
13957: LD_INT 1
13959: DOUBLE
13960: EQUAL
13961: IFTRUE 13965
13963: GO 13976
13965: POP
// result = 1 ; 2 :
13966: LD_ADDR_VAR 0 1
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
13974: GO 14015
13976: LD_INT 2
13978: DOUBLE
13979: EQUAL
13980: IFTRUE 13984
13982: GO 13995
13984: POP
// result = 2 ; 3 :
13985: LD_ADDR_VAR 0 1
13989: PUSH
13990: LD_INT 2
13992: ST_TO_ADDR
13993: GO 14015
13995: LD_INT 3
13997: DOUBLE
13998: EQUAL
13999: IFTRUE 14003
14001: GO 14014
14003: POP
// result = 3 ; end ;
14004: LD_ADDR_VAR 0 1
14008: PUSH
14009: LD_INT 3
14011: ST_TO_ADDR
14012: GO 14015
14014: POP
// end ;
14015: LD_VAR 0 1
14019: RET
// export function ShowQuery2 ; begin
14020: LD_INT 0
14022: PPUSH
// case query ( Q1a ) of 1 :
14023: LD_STRING Q1a
14025: PPUSH
14026: CALL_OW 97
14030: PUSH
14031: LD_INT 1
14033: DOUBLE
14034: EQUAL
14035: IFTRUE 14039
14037: GO 14050
14039: POP
// result = 1 ; 2 :
14040: LD_ADDR_VAR 0 1
14044: PUSH
14045: LD_INT 1
14047: ST_TO_ADDR
14048: GO 14089
14050: LD_INT 2
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14069
14058: POP
// result = 2 ; 3 :
14059: LD_ADDR_VAR 0 1
14063: PUSH
14064: LD_INT 2
14066: ST_TO_ADDR
14067: GO 14089
14069: LD_INT 3
14071: DOUBLE
14072: EQUAL
14073: IFTRUE 14077
14075: GO 14088
14077: POP
// result = 3 ; end ;
14078: LD_ADDR_VAR 0 1
14082: PUSH
14083: LD_INT 3
14085: ST_TO_ADDR
14086: GO 14089
14088: POP
// end ;
14089: LD_VAR 0 1
14093: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
14094: LD_INT 0
14096: PPUSH
14097: PPUSH
14098: PPUSH
14099: PPUSH
14100: PPUSH
// for i = 1 to count do
14101: LD_ADDR_VAR 0 8
14105: PUSH
14106: DOUBLE
14107: LD_INT 1
14109: DEC
14110: ST_TO_ADDR
14111: LD_VAR 0 6
14115: PUSH
14116: FOR_TO
14117: IFFALSE 14198
// begin uc_side = side ;
14119: LD_ADDR_OWVAR 20
14123: PUSH
14124: LD_VAR 0 1
14128: ST_TO_ADDR
// uc_nation = nation ;
14129: LD_ADDR_OWVAR 21
14133: PUSH
14134: LD_VAR 0 2
14138: ST_TO_ADDR
// hc_gallery =  ;
14139: LD_ADDR_OWVAR 33
14143: PUSH
14144: LD_STRING 
14146: ST_TO_ADDR
// hc_name =  ;
14147: LD_ADDR_OWVAR 26
14151: PUSH
14152: LD_STRING 
14154: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14155: LD_INT 0
14157: PPUSH
14158: LD_VAR 0 5
14162: PPUSH
14163: LD_VAR 0 4
14167: PPUSH
14168: CALL_OW 380
// un = CreateHuman ;
14172: LD_ADDR_VAR 0 10
14176: PUSH
14177: CALL_OW 44
14181: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14182: LD_VAR 0 10
14186: PPUSH
14187: LD_VAR 0 3
14191: PPUSH
14192: CALL_OW 52
// end ;
14196: GO 14116
14198: POP
14199: POP
// end ;
14200: LD_VAR 0 7
14204: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14205: LD_INT 0
14207: PPUSH
14208: PPUSH
14209: PPUSH
14210: PPUSH
14211: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14212: LD_ADDR_VAR 0 8
14216: PUSH
14217: LD_INT 48
14219: PUSH
14220: LD_INT 49
14222: PUSH
14223: LD_INT 50
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: LD_INT 51
14234: PUSH
14235: LD_INT 52
14237: PUSH
14238: LD_INT 69
14240: PUSH
14241: LD_INT 39
14243: PUSH
14244: LD_INT 34
14246: PUSH
14247: LD_INT 40
14249: PUSH
14250: LD_INT 53
14252: PUSH
14253: LD_INT 71
14255: PUSH
14256: LD_INT 57
14258: PUSH
14259: LD_INT 58
14261: PUSH
14262: LD_INT 44
14264: PUSH
14265: LD_INT 32
14267: PUSH
14268: LD_INT 27
14270: PUSH
14271: LD_INT 23
14273: PUSH
14274: LD_INT 33
14276: PUSH
14277: LD_INT 59
14279: PUSH
14280: LD_INT 54
14282: PUSH
14283: LD_INT 55
14285: PUSH
14286: LD_INT 56
14288: PUSH
14289: LD_INT 63
14291: PUSH
14292: LD_INT 64
14294: PUSH
14295: LD_INT 65
14297: PUSH
14298: LD_INT 30
14300: PUSH
14301: LD_INT 31
14303: PUSH
14304: LD_INT 21
14306: PUSH
14307: LD_INT 22
14309: PUSH
14310: LD_INT 25
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14347: LD_ADDR_VAR 0 5
14351: PUSH
14352: DOUBLE
14353: LD_INT 1
14355: DEC
14356: ST_TO_ADDR
14357: LD_VAR 0 8
14361: PUSH
14362: FOR_TO
14363: IFFALSE 14439
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14365: LD_VAR 0 8
14369: PUSH
14370: LD_VAR 0 5
14374: ARRAY
14375: PPUSH
14376: LD_VAR 0 1
14380: PPUSH
14381: CALL_OW 321
14385: PUSH
14386: LD_INT 1
14388: EQUAL
14389: PUSH
14390: LD_VAR 0 8
14394: PUSH
14395: LD_VAR 0 5
14399: ARRAY
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: CALL_OW 482
14410: PUSH
14411: LD_INT 1
14413: EQUAL
14414: AND
14415: IFFALSE 14437
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14417: LD_VAR 0 2
14421: PPUSH
14422: LD_VAR 0 8
14426: PUSH
14427: LD_VAR 0 5
14431: ARRAY
14432: PPUSH
14433: CALL_OW 184
14437: GO 14362
14439: POP
14440: POP
// end ;
14441: LD_VAR 0 4
14445: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14446: LD_INT 0
14448: PPUSH
14449: PPUSH
14450: PPUSH
14451: PPUSH
14452: PPUSH
14453: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14454: LD_ADDR_VAR 0 8
14458: PUSH
14459: LD_VAR 0 2
14463: PPUSH
14464: CALL_OW 313
14468: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14469: LD_ADDR_VAR 0 9
14473: PUSH
14474: LD_VAR 0 3
14478: PPUSH
14479: LD_INT 22
14481: PUSH
14482: LD_VAR 0 1
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 2
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 24
14503: PUSH
14504: LD_INT 750
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 3
14513: PUSH
14514: LD_INT 54
14516: PUSH
14517: EMPTY
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: PPUSH
14530: CALL_OW 70
14534: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14535: LD_ADDR_VAR 0 6
14539: PUSH
14540: LD_VAR 0 3
14544: PPUSH
14545: LD_INT 22
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 3
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 3
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 1000
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: PUSH
14589: EMPTY
14590: LIST
14591: PPUSH
14592: CALL_OW 70
14596: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14597: LD_VAR 0 6
14601: NOT
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_VAR 0 1
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 25
14617: PUSH
14618: LD_INT 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 24
14627: PUSH
14628: LD_INT 250
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: PPUSH
14640: CALL_OW 69
14644: NOT
14645: AND
14646: IFFALSE 14650
// exit ;
14648: GO 14832
// if buildings_list > 0 and engineerOkInside then
14650: LD_VAR 0 6
14654: PUSH
14655: LD_INT 0
14657: GREATER
14658: PUSH
14659: LD_VAR 0 8
14663: AND
14664: IFFALSE 14675
// ComExitBuilding ( engineerOkInside ) ;
14666: LD_VAR 0 8
14670: PPUSH
14671: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14675: LD_VAR 0 6
14679: PUSH
14680: LD_INT 0
14682: GREATER
14683: PUSH
14684: LD_VAR 0 9
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: AND
14693: IFFALSE 14713
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14695: LD_VAR 0 9
14699: PPUSH
14700: LD_VAR 0 6
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14713: LD_VAR 0 6
14717: PUSH
14718: LD_INT 0
14720: EQUAL
14721: PUSH
14722: LD_VAR 0 4
14726: PUSH
14727: LD_INT 0
14729: EQUAL
14730: AND
14731: PUSH
14732: LD_VAR 0 9
14736: PUSH
14737: LD_INT 0
14739: GREATER
14740: AND
14741: IFFALSE 14757
// ComEnterUnit ( engineerOkOutside , building ) ;
14743: LD_VAR 0 9
14747: PPUSH
14748: LD_VAR 0 2
14752: PPUSH
14753: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14757: LD_VAR 0 9
14761: PUSH
14762: LD_INT 0
14764: GREATER
14765: PUSH
14766: LD_VAR 0 6
14770: PUSH
14771: LD_INT 0
14773: EQUAL
14774: AND
14775: PUSH
14776: LD_VAR 0 4
14780: PUSH
14781: LD_INT 0
14783: GREATER
14784: AND
14785: IFFALSE 14832
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14787: LD_VAR 0 9
14791: PPUSH
14792: LD_VAR 0 4
14796: PUSH
14797: LD_INT 1
14799: ARRAY
14800: PPUSH
14801: LD_VAR 0 4
14805: PUSH
14806: LD_INT 2
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 4
14814: PUSH
14815: LD_INT 3
14817: ARRAY
14818: PPUSH
14819: LD_VAR 0 4
14823: PUSH
14824: LD_INT 4
14826: ARRAY
14827: PPUSH
14828: CALL_OW 145
// end ;
14832: LD_VAR 0 5
14836: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14837: LD_INT 0
14839: PPUSH
14840: PPUSH
14841: PPUSH
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
14846: PPUSH
14847: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14848: LD_ADDR_VAR 0 6
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_VAR 0 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 25
14867: PUSH
14868: LD_INT 4
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 24
14877: PUSH
14878: LD_INT 251
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: PUSH
14895: LD_EXP 35
14899: PUSH
14900: EMPTY
14901: LIST
14902: DIFF
14903: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14904: LD_ADDR_VAR 0 7
14908: PUSH
14909: LD_VAR 0 3
14913: PPUSH
14914: LD_INT 22
14916: PUSH
14917: LD_VAR 0 1
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 25
14928: PUSH
14929: LD_INT 4
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 50
14938: PUSH
14939: EMPTY
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: PPUSH
14947: CALL_OW 70
14951: PUSH
14952: LD_EXP 35
14956: PUSH
14957: EMPTY
14958: LIST
14959: DIFF
14960: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14961: LD_ADDR_VAR 0 10
14965: PUSH
14966: LD_VAR 0 3
14970: PPUSH
14971: LD_INT 22
14973: PUSH
14974: LD_VAR 0 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 1
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 24
14998: PUSH
14999: LD_INT 750
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PPUSH
15015: CALL_OW 70
15019: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15020: LD_ADDR_VAR 0 11
15024: PUSH
15025: LD_VAR 0 2
15029: PPUSH
15030: LD_INT 22
15032: PUSH
15033: LD_VAR 0 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 21
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 3
15054: PUSH
15055: LD_INT 24
15057: PUSH
15058: LD_INT 1000
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 70
15078: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
15079: LD_VAR 0 10
15083: PUSH
15084: LD_INT 0
15086: GREATER
15087: PUSH
15088: LD_VAR 0 6
15092: PUSH
15093: LD_INT 0
15095: GREATER
15096: AND
15097: IFFALSE 15113
// ComMoveToArea ( damageUnits , healArea ) ;
15099: LD_VAR 0 10
15103: PPUSH
15104: LD_VAR 0 2
15108: PPUSH
15109: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
15113: LD_VAR 0 11
15117: PUSH
15118: LD_INT 0
15120: GREATER
15121: PUSH
15122: LD_VAR 0 7
15126: PUSH
15127: LD_INT 0
15129: GREATER
15130: AND
15131: IFFALSE 15151
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15133: LD_VAR 0 7
15137: PPUSH
15138: LD_VAR 0 11
15142: PUSH
15143: LD_INT 1
15145: ARRAY
15146: PPUSH
15147: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15151: LD_VAR 0 10
15155: PUSH
15156: LD_INT 0
15158: EQUAL
15159: PUSH
15160: LD_VAR 0 11
15164: PUSH
15165: LD_INT 0
15167: EQUAL
15168: AND
15169: PUSH
15170: LD_VAR 0 7
15174: PUSH
15175: LD_INT 0
15177: GREATER
15178: AND
15179: IFFALSE 15284
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15181: LD_ADDR_VAR 0 12
15185: PUSH
15186: LD_INT 22
15188: PUSH
15189: LD_VAR 0 1
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 21
15200: PUSH
15201: LD_INT 3
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 30
15210: PUSH
15211: LD_INT 8
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15228: LD_ADDR_VAR 0 13
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_VAR 0 12
15240: PPUSH
15241: CALL_OW 12
15245: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15246: LD_VAR 0 7
15250: PPUSH
15251: LD_INT 3
15253: PUSH
15254: LD_INT 60
15256: PUSH
15257: EMPTY
15258: LIST
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PPUSH
15264: CALL_OW 72
15268: PPUSH
15269: LD_VAR 0 12
15273: PUSH
15274: LD_VAR 0 13
15278: ARRAY
15279: PPUSH
15280: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15284: LD_VAR 0 3
15288: PPUSH
15289: LD_INT 22
15291: PUSH
15292: LD_VAR 0 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 25
15303: PUSH
15304: LD_INT 3
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 24
15313: PUSH
15314: LD_INT 751
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 70
15330: PUSH
15331: LD_INT 0
15333: GREATER
15334: PUSH
15335: LD_INT 21
15337: PPUSH
15338: CALL_OW 302
15342: AND
15343: PUSH
15344: LD_INT 21
15346: PPUSH
15347: CALL_OW 255
15351: PUSH
15352: LD_INT 3
15354: EQUAL
15355: AND
15356: IFFALSE 15412
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15358: LD_VAR 0 3
15362: PPUSH
15363: LD_INT 22
15365: PUSH
15366: LD_VAR 0 1
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 25
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 24
15387: PUSH
15388: LD_INT 751
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 70
15404: PPUSH
15405: LD_INT 21
15407: PPUSH
15408: CALL_OW 120
// end ;
15412: LD_VAR 0 5
15416: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15417: LD_INT 0
15419: PPUSH
15420: PPUSH
15421: PPUSH
15422: PPUSH
15423: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15424: LD_ADDR_VAR 0 6
15428: PUSH
15429: LD_INT 22
15431: PUSH
15432: LD_VAR 0 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 30
15446: PUSH
15447: LD_INT 31
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 30
15456: PUSH
15457: LD_INT 32
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 30
15466: PUSH
15467: LD_INT 33
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 30
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 30
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15511: LD_ADDR_VAR 0 7
15515: PUSH
15516: LD_INT 22
15518: PUSH
15519: LD_VAR 0 2
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 3
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 58
15540: PUSH
15541: EMPTY
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: PPUSH
15549: CALL_OW 69
15553: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15554: LD_VAR 0 6
15558: PUSH
15559: LD_INT 0
15561: GREATER
15562: PUSH
15563: LD_VAR 0 7
15567: PUSH
15568: LD_INT 0
15570: GREATER
15571: AND
15572: IFFALSE 15642
// begin for i in turretsList do
15574: LD_ADDR_VAR 0 4
15578: PUSH
15579: LD_VAR 0 6
15583: PUSH
15584: FOR_IN
15585: IFFALSE 15640
// begin for j in enemyBuildings do
15587: LD_ADDR_VAR 0 5
15591: PUSH
15592: LD_VAR 0 7
15596: PUSH
15597: FOR_IN
15598: IFFALSE 15636
// begin if GetDistUnits ( i , j ) < 20 then
15600: LD_VAR 0 4
15604: PPUSH
15605: LD_VAR 0 5
15609: PPUSH
15610: CALL_OW 296
15614: PUSH
15615: LD_INT 20
15617: LESS
15618: IFFALSE 15634
// begin ComAttackUnit ( i , j ) ;
15620: LD_VAR 0 4
15624: PPUSH
15625: LD_VAR 0 5
15629: PPUSH
15630: CALL_OW 115
// end ; end ;
15634: GO 15597
15636: POP
15637: POP
// end ;
15638: GO 15584
15640: POP
15641: POP
// end ; end ;
15642: LD_VAR 0 3
15646: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15647: LD_INT 0
15649: PPUSH
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
15654: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15655: LD_ADDR_VAR 0 7
15659: PUSH
15660: LD_VAR 0 2
15664: PPUSH
15665: LD_INT 22
15667: PUSH
15668: LD_VAR 0 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 21
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 34
15689: PUSH
15690: LD_INT 52
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 70
15706: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15707: LD_ADDR_VAR 0 8
15711: PUSH
15712: LD_VAR 0 2
15716: PPUSH
15717: LD_INT 22
15719: PUSH
15720: LD_VAR 0 1
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 21
15731: PUSH
15732: LD_INT 3
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 3
15741: PUSH
15742: LD_INT 24
15744: PUSH
15745: LD_INT 1000
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: PPUSH
15764: CALL_OW 70
15768: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15769: LD_VAR 0 8
15773: PUSH
15774: LD_INT 0
15776: GREATER
15777: PUSH
15778: LD_VAR 0 7
15782: PPUSH
15783: LD_INT 24
15785: PUSH
15786: LD_INT 750
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 72
15797: PUSH
15798: LD_INT 0
15800: GREATER
15801: AND
15802: IFFALSE 15822
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15804: LD_VAR 0 7
15808: PPUSH
15809: LD_VAR 0 8
15813: PUSH
15814: LD_INT 1
15816: ARRAY
15817: PPUSH
15818: CALL_OW 130
// end ;
15822: LD_VAR 0 3
15826: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15827: LD_INT 0
15829: PPUSH
15830: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15831: LD_INT 22
15833: PUSH
15834: LD_VAR 0 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 21
15845: PUSH
15846: LD_INT 2
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 69
15861: PUSH
15862: LD_INT 18
15864: PPUSH
15865: LD_INT 22
15867: PUSH
15868: LD_VAR 0 1
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 21
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PPUSH
15891: CALL_OW 70
15895: PUSH
15896: LD_VAR 0 3
15900: LESSEQUAL
15901: DIFF
15902: IFFALSE 15969
// for i = 1 to vehCount do
15904: LD_ADDR_VAR 0 9
15908: PUSH
15909: DOUBLE
15910: LD_INT 1
15912: DEC
15913: ST_TO_ADDR
15914: LD_VAR 0 3
15918: PUSH
15919: FOR_TO
15920: IFFALSE 15967
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15922: LD_VAR 0 2
15926: PPUSH
15927: LD_VAR 0 7
15931: PPUSH
15932: LD_VAR 0 5
15936: PPUSH
15937: LD_VAR 0 6
15941: PPUSH
15942: LD_VAR 0 4
15946: PUSH
15947: LD_INT 1
15949: PPUSH
15950: LD_VAR 0 4
15954: PPUSH
15955: CALL_OW 12
15959: ARRAY
15960: PPUSH
15961: CALL_OW 185
15965: GO 15919
15967: POP
15968: POP
// end ;
15969: LD_VAR 0 8
15973: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15974: LD_INT 0
15976: PPUSH
15977: PPUSH
15978: PPUSH
15979: PPUSH
15980: PPUSH
15981: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15982: LD_EXP 40
15986: PUSH
15987: LD_INT 3
15989: PUSH
15990: LD_INT 4
15992: PUSH
15993: LD_INT 4
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: PUSH
16001: LD_OWVAR 67
16005: ARRAY
16006: GREATEREQUAL
16007: PUSH
16008: LD_EXP 41
16012: PUSH
16013: LD_INT 1
16015: PUSH
16016: LD_INT 2
16018: PUSH
16019: LD_INT 2
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: PUSH
16027: LD_OWVAR 67
16031: ARRAY
16032: GREATEREQUAL
16033: AND
16034: IFFALSE 16267
// begin repeat wait ( 0 0$3 ) ;
16036: LD_INT 105
16038: PPUSH
16039: CALL_OW 67
// for j in russianTanks do
16043: LD_ADDR_VAR 0 4
16047: PUSH
16048: LD_EXP 40
16052: PUSH
16053: FOR_IN
16054: IFFALSE 16255
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
16056: LD_ADDR_VAR 0 6
16060: PUSH
16061: LD_INT 81
16063: PUSH
16064: LD_VAR 0 1
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 101
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PPUSH
16087: CALL_OW 69
16091: PPUSH
16092: LD_VAR 0 4
16096: PPUSH
16097: CALL_OW 74
16101: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
16102: LD_ADDR_VAR 0 7
16106: PUSH
16107: LD_INT 81
16109: PUSH
16110: LD_VAR 0 1
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 101
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 2
16131: PUSH
16132: LD_INT 59
16134: PUSH
16135: EMPTY
16136: LIST
16137: PUSH
16138: LD_INT 21
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 21
16150: PUSH
16151: LD_INT 2
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: PPUSH
16172: CALL_OW 69
16176: PPUSH
16177: LD_VAR 0 4
16181: PPUSH
16182: CALL_OW 74
16186: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16187: LD_VAR 0 4
16191: PPUSH
16192: LD_VAR 0 6
16196: PPUSH
16197: CALL_OW 296
16201: PUSH
16202: LD_INT 8
16204: PLUS
16205: PUSH
16206: LD_VAR 0 4
16210: PPUSH
16211: LD_VAR 0 7
16215: PPUSH
16216: CALL_OW 296
16220: LESS
16221: IFFALSE 16239
// ComAttackUnit ( j , target1 ) else
16223: LD_VAR 0 4
16227: PPUSH
16228: LD_VAR 0 6
16232: PPUSH
16233: CALL_OW 115
16237: GO 16253
// ComAttackUnit ( j , target2 ) ;
16239: LD_VAR 0 4
16243: PPUSH
16244: LD_VAR 0 7
16248: PPUSH
16249: CALL_OW 115
// end ;
16253: GO 16053
16255: POP
16256: POP
// until russianTanks = 0 ;
16257: LD_EXP 40
16261: PUSH
16262: LD_INT 0
16264: EQUAL
16265: IFFALSE 16036
// end ; end ;
16267: LD_VAR 0 2
16271: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16272: LD_INT 0
16274: PPUSH
16275: PPUSH
16276: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16277: LD_EXP 40
16281: PUSH
16282: LD_INT 1
16284: GREATEREQUAL
16285: PUSH
16286: LD_EXP 41
16290: PUSH
16291: LD_INT 1
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: LD_INT 2
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: PUSH
16305: LD_OWVAR 67
16309: ARRAY
16310: GREATEREQUAL
16311: AND
16312: IFFALSE 16428
// repeat wait ( 0 0$3 ) ;
16314: LD_INT 105
16316: PPUSH
16317: CALL_OW 67
// if russianTimeLapsers > 0 then
16321: LD_EXP 41
16325: PUSH
16326: LD_INT 0
16328: GREATER
16329: IFFALSE 16418
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16331: LD_ADDR_VAR 0 3
16335: PUSH
16336: LD_EXP 41
16340: PPUSH
16341: LD_INT 3
16343: PUSH
16344: LD_INT 60
16346: PUSH
16347: EMPTY
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PPUSH
16354: CALL_OW 72
16358: PUSH
16359: FOR_IN
16360: IFFALSE 16416
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , j ) ;
16362: LD_ADDR_VAR 0 4
16366: PUSH
16367: LD_INT 81
16369: PUSH
16370: LD_VAR 0 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PPUSH
16379: CALL_OW 69
16383: PPUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: CALL_OW 74
16393: ST_TO_ADDR
// if nearUnit then
16394: LD_VAR 0 4
16398: IFFALSE 16414
// ComMoveUnit ( j , nearUnit ) ;
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_VAR 0 4
16409: PPUSH
16410: CALL_OW 112
// end ;
16414: GO 16359
16416: POP
16417: POP
// until russianTimeLapsers = 0 ;
16418: LD_EXP 41
16422: PUSH
16423: LD_INT 0
16425: EQUAL
16426: IFFALSE 16314
// end ;
16428: LD_VAR 0 2
16432: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16433: LD_INT 0
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
16439: PPUSH
16440: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16441: LD_ADDR_VAR 0 6
16445: PUSH
16446: LD_INT 22
16448: PUSH
16449: LD_VAR 0 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 25
16460: PUSH
16461: LD_INT 9
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PPUSH
16472: CALL_OW 69
16476: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16477: LD_ADDR_VAR 0 7
16481: PUSH
16482: LD_INT 81
16484: PUSH
16485: LD_VAR 0 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 3
16496: PUSH
16497: LD_INT 21
16499: PUSH
16500: LD_INT 3
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 69
16519: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16520: LD_ADDR_VAR 0 4
16524: PUSH
16525: LD_INT 1
16527: PPUSH
16528: LD_INT 3
16530: PPUSH
16531: CALL_OW 12
16535: ST_TO_ADDR
// for i = 1 to list do
16536: LD_ADDR_VAR 0 5
16540: PUSH
16541: DOUBLE
16542: LD_INT 1
16544: DEC
16545: ST_TO_ADDR
16546: LD_VAR 0 6
16550: PUSH
16551: FOR_TO
16552: IFFALSE 16754
// for ta in filter do
16554: LD_ADDR_VAR 0 3
16558: PUSH
16559: LD_VAR 0 7
16563: PUSH
16564: FOR_IN
16565: IFFALSE 16750
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16567: LD_VAR 0 6
16571: PUSH
16572: LD_VAR 0 5
16576: ARRAY
16577: PPUSH
16578: LD_VAR 0 3
16582: PPUSH
16583: CALL_OW 296
16587: PUSH
16588: LD_INT 15
16590: LESSEQUAL
16591: IFFALSE 16748
// begin case c of 1 :
16593: LD_VAR 0 4
16597: PUSH
16598: LD_INT 1
16600: DOUBLE
16601: EQUAL
16602: IFTRUE 16606
16604: GO 16644
16606: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16607: LD_VAR 0 6
16611: PUSH
16612: LD_VAR 0 5
16616: ARRAY
16617: PPUSH
16618: LD_VAR 0 3
16622: PPUSH
16623: CALL_OW 250
16627: PPUSH
16628: LD_VAR 0 3
16632: PPUSH
16633: CALL_OW 251
16637: PPUSH
16638: CALL_OW 154
16642: GO 16748
16644: LD_INT 2
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16716
16652: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16653: LD_VAR 0 6
16657: PUSH
16658: LD_VAR 0 5
16662: ARRAY
16663: PPUSH
16664: LD_VAR 0 3
16668: PPUSH
16669: CALL_OW 250
16673: PUSH
16674: LD_INT 1
16676: NEG
16677: PPUSH
16678: LD_INT 1
16680: PPUSH
16681: CALL_OW 12
16685: PLUS
16686: PPUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: CALL_OW 251
16696: PUSH
16697: LD_INT 1
16699: NEG
16700: PPUSH
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 12
16708: PLUS
16709: PPUSH
16710: CALL_OW 153
16714: GO 16748
16716: LD_INT 3
16718: DOUBLE
16719: EQUAL
16720: IFTRUE 16724
16722: GO 16747
16724: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16725: LD_VAR 0 6
16729: PUSH
16730: LD_VAR 0 5
16734: ARRAY
16735: PPUSH
16736: LD_VAR 0 3
16740: PPUSH
16741: CALL_OW 115
16745: GO 16748
16747: POP
// end ; end ;
16748: GO 16564
16750: POP
16751: POP
16752: GO 16551
16754: POP
16755: POP
// end ;
16756: LD_VAR 0 2
16760: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16761: LD_INT 0
16763: PPUSH
16764: PPUSH
16765: PPUSH
16766: PPUSH
// r := 100 ;
16767: LD_ADDR_VAR 0 5
16771: PUSH
16772: LD_INT 100
16774: ST_TO_ADDR
// x := 0 ;
16775: LD_ADDR_VAR 0 6
16779: PUSH
16780: LD_INT 0
16782: ST_TO_ADDR
// while ( x < n ) do
16783: LD_VAR 0 6
16787: PUSH
16788: LD_VAR 0 2
16792: LESS
16793: IFFALSE 17080
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16795: LD_ADDR_VAR 0 4
16799: PUSH
16800: DOUBLE
16801: LD_INT 1
16803: DEC
16804: ST_TO_ADDR
16805: LD_VAR 0 1
16809: PPUSH
16810: LD_INT 0
16812: PPUSH
16813: CALL_OW 517
16817: PUSH
16818: LD_INT 1
16820: ARRAY
16821: PUSH
16822: FOR_TO
16823: IFFALSE 17076
// begin if r > 50 then
16825: LD_VAR 0 5
16829: PUSH
16830: LD_INT 50
16832: GREATER
16833: IFFALSE 17052
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16835: LD_VAR 0 1
16839: PPUSH
16840: LD_INT 0
16842: PPUSH
16843: CALL_OW 517
16847: PUSH
16848: LD_INT 1
16850: ARRAY
16851: PUSH
16852: LD_VAR 0 4
16856: ARRAY
16857: PPUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: LD_INT 0
16865: PPUSH
16866: CALL_OW 517
16870: PUSH
16871: LD_INT 2
16873: ARRAY
16874: PUSH
16875: LD_VAR 0 4
16879: ARRAY
16880: PPUSH
16881: CALL_OW 458
16885: NOT
16886: IFFALSE 17036
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 0
16895: PPUSH
16896: CALL_OW 517
16900: PUSH
16901: LD_INT 1
16903: ARRAY
16904: PUSH
16905: LD_VAR 0 4
16909: ARRAY
16910: PPUSH
16911: LD_VAR 0 1
16915: PPUSH
16916: LD_INT 0
16918: PPUSH
16919: CALL_OW 517
16923: PUSH
16924: LD_INT 2
16926: ARRAY
16927: PUSH
16928: LD_VAR 0 4
16932: ARRAY
16933: PPUSH
16934: LD_INT 8
16936: PPUSH
16937: LD_INT 0
16939: PPUSH
16940: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16944: LD_ADDR_EXP 45
16948: PUSH
16949: LD_EXP 45
16953: PPUSH
16954: LD_INT 1
16956: PPUSH
16957: LD_VAR 0 1
16961: PPUSH
16962: LD_INT 0
16964: PPUSH
16965: CALL_OW 517
16969: PUSH
16970: LD_INT 1
16972: ARRAY
16973: PUSH
16974: LD_VAR 0 4
16978: ARRAY
16979: PUSH
16980: LD_VAR 0 1
16984: PPUSH
16985: LD_INT 0
16987: PPUSH
16988: CALL_OW 517
16992: PUSH
16993: LD_INT 2
16995: ARRAY
16996: PUSH
16997: LD_VAR 0 4
17001: ARRAY
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PPUSH
17007: CALL_OW 2
17011: ST_TO_ADDR
// r := 0 ;
17012: LD_ADDR_VAR 0 5
17016: PUSH
17017: LD_INT 0
17019: ST_TO_ADDR
// x := x + 1 ;
17020: LD_ADDR_VAR 0 6
17024: PUSH
17025: LD_VAR 0 6
17029: PUSH
17030: LD_INT 1
17032: PLUS
17033: ST_TO_ADDR
// end else
17034: GO 17050
// r := r + 35 ;
17036: LD_ADDR_VAR 0 5
17040: PUSH
17041: LD_VAR 0 5
17045: PUSH
17046: LD_INT 35
17048: PLUS
17049: ST_TO_ADDR
// end else
17050: GO 17074
// r := r + rand ( 10 , 25 ) ;
17052: LD_ADDR_VAR 0 5
17056: PUSH
17057: LD_VAR 0 5
17061: PUSH
17062: LD_INT 10
17064: PPUSH
17065: LD_INT 25
17067: PPUSH
17068: CALL_OW 12
17072: PLUS
17073: ST_TO_ADDR
// end ;
17074: GO 16822
17076: POP
17077: POP
17078: GO 16783
// end ;
17080: LD_VAR 0 3
17084: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17085: LD_INT 0
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
// tmpTab = [ ] ;
17091: LD_ADDR_VAR 0 6
17095: PUSH
17096: EMPTY
17097: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17098: LD_INT 22
17100: PUSH
17101: LD_VAR 0 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 30
17112: PUSH
17113: LD_INT 32
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 69
17128: PUSH
17129: LD_INT 0
17131: GREATER
17132: IFFALSE 17215
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17134: LD_ADDR_VAR 0 4
17138: PUSH
17139: LD_INT 22
17141: PUSH
17142: LD_VAR 0 1
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 30
17153: PUSH
17154: LD_INT 32
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: PUSH
17170: FOR_IN
17171: IFFALSE 17213
// begin for j in UnitsInside ( i ) do
17173: LD_ADDR_VAR 0 5
17177: PUSH
17178: LD_VAR 0 4
17182: PPUSH
17183: CALL_OW 313
17187: PUSH
17188: FOR_IN
17189: IFFALSE 17209
// tmpTab = tmpTab ^ j ;
17191: LD_ADDR_VAR 0 6
17195: PUSH
17196: LD_VAR 0 6
17200: PUSH
17201: LD_VAR 0 5
17205: ADD
17206: ST_TO_ADDR
17207: GO 17188
17209: POP
17210: POP
// end ;
17211: GO 17170
17213: POP
17214: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17215: LD_VAR 0 6
17219: PPUSH
17220: LD_VAR 0 2
17224: PPUSH
17225: CALL_OW 250
17229: PPUSH
17230: LD_VAR 0 2
17234: PPUSH
17235: CALL_OW 251
17239: PPUSH
17240: CALL_OW 114
// end ;
17244: LD_VAR 0 3
17248: RET
// export function PrepareNature ; var i , un ; begin
17249: LD_INT 0
17251: PPUSH
17252: PPUSH
17253: PPUSH
// uc_side := 0 ;
17254: LD_ADDR_OWVAR 20
17258: PUSH
17259: LD_INT 0
17261: ST_TO_ADDR
// uc_nation := 0 ;
17262: LD_ADDR_OWVAR 21
17266: PUSH
17267: LD_INT 0
17269: ST_TO_ADDR
// InitHc ;
17270: CALL_OW 19
// hc_class := class_fish ;
17274: LD_ADDR_OWVAR 28
17278: PUSH
17279: LD_INT 20
17281: ST_TO_ADDR
// for i = 1 to 6 do
17282: LD_ADDR_VAR 0 2
17286: PUSH
17287: DOUBLE
17288: LD_INT 1
17290: DEC
17291: ST_TO_ADDR
17292: LD_INT 6
17294: PUSH
17295: FOR_TO
17296: IFFALSE 17315
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17298: CALL_OW 44
17302: PPUSH
17303: LD_INT 23
17305: PPUSH
17306: LD_INT 0
17308: PPUSH
17309: CALL_OW 49
17313: GO 17295
17315: POP
17316: POP
// for i = 1 to Difficulty + 2 do
17317: LD_ADDR_VAR 0 2
17321: PUSH
17322: DOUBLE
17323: LD_INT 1
17325: DEC
17326: ST_TO_ADDR
17327: LD_OWVAR 67
17331: PUSH
17332: LD_INT 2
17334: PLUS
17335: PUSH
17336: FOR_TO
17337: IFFALSE 17446
// begin hc_sex = sex_male ;
17339: LD_ADDR_OWVAR 27
17343: PUSH
17344: LD_INT 1
17346: ST_TO_ADDR
// uc_side = 0 ;
17347: LD_ADDR_OWVAR 20
17351: PUSH
17352: LD_INT 0
17354: ST_TO_ADDR
// uc_nation = nation_nature ;
17355: LD_ADDR_OWVAR 21
17359: PUSH
17360: LD_INT 0
17362: ST_TO_ADDR
// hc_class = class_tiger ;
17363: LD_ADDR_OWVAR 28
17367: PUSH
17368: LD_INT 14
17370: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17371: LD_ADDR_OWVAR 31
17375: PUSH
17376: LD_EXP 38
17380: PUSH
17381: LD_INT 0
17383: PUSH
17384: LD_INT 0
17386: PUSH
17387: LD_INT 0
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17396: LD_ADDR_OWVAR 35
17400: PUSH
17401: LD_INT 5
17403: NEG
17404: PPUSH
17405: LD_INT 5
17407: PPUSH
17408: CALL_OW 12
17412: PUSH
17413: LD_OWVAR 67
17417: MUL
17418: ST_TO_ADDR
// un = CreateHuman ;
17419: LD_ADDR_VAR 0 3
17423: PUSH
17424: CALL_OW 44
17428: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17429: LD_VAR 0 3
17433: PPUSH
17434: LD_INT 24
17436: PPUSH
17437: LD_INT 0
17439: PPUSH
17440: CALL_OW 49
// end ;
17444: GO 17336
17446: POP
17447: POP
// for i = 1 to rand ( 3 , 4 ) do
17448: LD_ADDR_VAR 0 2
17452: PUSH
17453: DOUBLE
17454: LD_INT 1
17456: DEC
17457: ST_TO_ADDR
17458: LD_INT 3
17460: PPUSH
17461: LD_INT 4
17463: PPUSH
17464: CALL_OW 12
17468: PUSH
17469: FOR_TO
17470: IFFALSE 17562
// begin hc_sex = sex_male ;
17472: LD_ADDR_OWVAR 27
17476: PUSH
17477: LD_INT 1
17479: ST_TO_ADDR
// uc_side = 0 ;
17480: LD_ADDR_OWVAR 20
17484: PUSH
17485: LD_INT 0
17487: ST_TO_ADDR
// uc_nation = nation_nature ;
17488: LD_ADDR_OWVAR 21
17492: PUSH
17493: LD_INT 0
17495: ST_TO_ADDR
// hc_class = 18 ;
17496: LD_ADDR_OWVAR 28
17500: PUSH
17501: LD_INT 18
17503: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17504: LD_ADDR_OWVAR 31
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: LD_INT 0
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: ST_TO_ADDR
// hc_agressivity = 0 ;
17527: LD_ADDR_OWVAR 35
17531: PUSH
17532: LD_INT 0
17534: ST_TO_ADDR
// un = CreateHuman ;
17535: LD_ADDR_VAR 0 3
17539: PUSH
17540: CALL_OW 44
17544: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17545: LD_VAR 0 3
17549: PPUSH
17550: LD_INT 24
17552: PPUSH
17553: LD_INT 0
17555: PPUSH
17556: CALL_OW 49
// end ;
17560: GO 17469
17562: POP
17563: POP
// for i = 1 to rand ( 1 , 3 ) do
17564: LD_ADDR_VAR 0 2
17568: PUSH
17569: DOUBLE
17570: LD_INT 1
17572: DEC
17573: ST_TO_ADDR
17574: LD_INT 1
17576: PPUSH
17577: LD_INT 3
17579: PPUSH
17580: CALL_OW 12
17584: PUSH
17585: FOR_TO
17586: IFFALSE 17734
// begin hc_sex = sex_male ;
17588: LD_ADDR_OWVAR 27
17592: PUSH
17593: LD_INT 1
17595: ST_TO_ADDR
// uc_side = 0 ;
17596: LD_ADDR_OWVAR 20
17600: PUSH
17601: LD_INT 0
17603: ST_TO_ADDR
// uc_nation = nation_nature ;
17604: LD_ADDR_OWVAR 21
17608: PUSH
17609: LD_INT 0
17611: ST_TO_ADDR
// hc_class = class_apeman ;
17612: LD_ADDR_OWVAR 28
17616: PUSH
17617: LD_INT 12
17619: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17620: LD_ADDR_OWVAR 31
17624: PUSH
17625: LD_EXP 37
17629: PPUSH
17630: LD_EXP 38
17634: PPUSH
17635: CALL_OW 12
17639: PUSH
17640: LD_EXP 37
17644: PPUSH
17645: LD_EXP 38
17649: PPUSH
17650: CALL_OW 12
17654: PUSH
17655: LD_EXP 37
17659: PPUSH
17660: LD_EXP 38
17664: PPUSH
17665: CALL_OW 12
17669: PUSH
17670: LD_EXP 37
17674: PPUSH
17675: LD_EXP 38
17679: PPUSH
17680: CALL_OW 12
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17691: LD_ADDR_OWVAR 35
17695: PUSH
17696: LD_INT 1
17698: PPUSH
17699: LD_INT 20
17701: PPUSH
17702: CALL_OW 12
17706: ST_TO_ADDR
// un = CreateHuman ;
17707: LD_ADDR_VAR 0 3
17711: PUSH
17712: CALL_OW 44
17716: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17717: LD_VAR 0 3
17721: PPUSH
17722: LD_INT 24
17724: PPUSH
17725: LD_INT 0
17727: PPUSH
17728: CALL_OW 49
// end ;
17732: GO 17585
17734: POP
17735: POP
// end ; end_of_file
17736: LD_VAR 0 1
17740: RET
// on UnitDestroyed ( unit ) do var i ;
17741: LD_INT 0
17743: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17744: LD_VAR 0 1
17748: PPUSH
17749: CALL_OW 255
17753: PUSH
17754: LD_INT 3
17756: EQUAL
17757: PUSH
17758: LD_VAR 0 1
17762: PPUSH
17763: CALL_OW 247
17767: PUSH
17768: LD_INT 1
17770: EQUAL
17771: AND
17772: IFFALSE 17836
// begin for i in RuScientists do
17774: LD_ADDR_VAR 0 2
17778: PUSH
17779: LD_EXP 35
17783: PUSH
17784: FOR_IN
17785: IFFALSE 17834
// if i = unit then
17787: LD_VAR 0 2
17791: PUSH
17792: LD_VAR 0 1
17796: EQUAL
17797: IFFALSE 17832
// begin RuScientists = RuScientists diff [ unit ] ;
17799: LD_ADDR_EXP 35
17803: PUSH
17804: LD_EXP 35
17808: PUSH
17809: LD_VAR 0 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: DIFF
17817: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17818: LD_ADDR_EXP 36
17822: PUSH
17823: LD_EXP 36
17827: PUSH
17828: LD_INT 1
17830: PLUS
17831: ST_TO_ADDR
// end ;
17832: GO 17784
17834: POP
17835: POP
// end ; end ;
17836: PPOPN 2
17838: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17839: LD_VAR 0 1
17843: PUSH
17844: LD_INT 10
17846: EQUAL
17847: PUSH
17848: LD_VAR 0 2
17852: PPUSH
17853: CALL_OW 255
17857: PUSH
17858: LD_INT 1
17860: EQUAL
17861: AND
17862: PUSH
17863: LD_EXP 48
17867: PUSH
17868: LD_INT 0
17870: EQUAL
17871: AND
17872: IFFALSE 17984
// begin eventVar1 = 1 ;
17874: LD_ADDR_EXP 48
17878: PUSH
17879: LD_INT 1
17881: ST_TO_ADDR
// teleportExplored = 1 ;
17882: LD_ADDR_EXP 34
17886: PUSH
17887: LD_INT 1
17889: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17890: LD_STRING M2a
17892: PPUSH
17893: CALL_OW 337
// wait ( 0 0$2 ) ;
17897: LD_INT 70
17899: PPUSH
17900: CALL_OW 67
// DialogueOn ;
17904: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17908: LD_INT 22
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 21
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PPUSH
17932: CALL_OW 69
17936: PPUSH
17937: LD_STRING DT3a-Sol1-1
17939: PPUSH
17940: LD_STRING DT3a-FSol1-1
17942: PPUSH
17943: CALL 13477 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17947: LD_EXP 1
17951: PPUSH
17952: LD_STRING DT3a-JMM-1
17954: PPUSH
17955: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17959: LD_VAR 0 2
17963: PPUSH
17964: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17968: LD_EXP 1
17972: PPUSH
17973: LD_STRING DT3a-JMM-1a
17975: PPUSH
17976: CALL_OW 88
// DialogueOff ;
17980: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17984: LD_VAR 0 1
17988: PUSH
17989: LD_INT 10
17991: EQUAL
17992: PUSH
17993: LD_VAR 0 2
17997: PPUSH
17998: CALL_OW 247
18002: PUSH
18003: LD_INT 2
18005: EQUAL
18006: AND
18007: PUSH
18008: LD_VAR 0 2
18012: PPUSH
18013: CALL_OW 255
18017: PUSH
18018: LD_INT 3
18020: EQUAL
18021: AND
18022: PUSH
18023: LD_EXP 29
18027: PUSH
18028: LD_INT 0
18030: EQUAL
18031: AND
18032: IFFALSE 18049
// begin wait ( 0 0$3 ) ;
18034: LD_INT 105
18036: PPUSH
18037: CALL_OW 67
// vehicleTeleported = 1 ;
18041: LD_ADDR_EXP 29
18045: PUSH
18046: LD_INT 1
18048: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
18049: LD_VAR 0 1
18053: PUSH
18054: LD_INT 10
18056: EQUAL
18057: PUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 247
18067: PUSH
18068: LD_INT 2
18070: EQUAL
18071: AND
18072: PUSH
18073: LD_VAR 0 2
18077: PPUSH
18078: CALL_OW 255
18082: PUSH
18083: LD_INT 3
18085: EQUAL
18086: AND
18087: PUSH
18088: LD_EXP 29
18092: PUSH
18093: LD_INT 2
18095: EQUAL
18096: AND
18097: IFFALSE 18114
// begin wait ( 0 0$3 ) ;
18099: LD_INT 105
18101: PPUSH
18102: CALL_OW 67
// vehicleTeleported = 3 ;
18106: LD_ADDR_EXP 29
18110: PUSH
18111: LD_INT 3
18113: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18114: LD_VAR 0 1
18118: PUSH
18119: LD_INT 10
18121: EQUAL
18122: PUSH
18123: LD_VAR 0 2
18127: PPUSH
18128: CALL_OW 247
18132: PUSH
18133: LD_INT 2
18135: EQUAL
18136: AND
18137: PUSH
18138: LD_VAR 0 2
18142: PPUSH
18143: CALL_OW 255
18147: PUSH
18148: LD_INT 3
18150: EQUAL
18151: AND
18152: IFFALSE 18168
// tpCounter = tpCounter + 1 ;
18154: LD_ADDR_EXP 30
18158: PUSH
18159: LD_EXP 30
18163: PUSH
18164: LD_INT 1
18166: PLUS
18167: ST_TO_ADDR
// end ;
18168: PPOPN 2
18170: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18171: LD_VAR 0 2
18175: PUSH
18176: LD_INT 21
18178: EQUAL
18179: PUSH
18180: LD_VAR 0 2
18184: PUSH
18185: LD_INT 112
18187: EQUAL
18188: OR
18189: IFFALSE 18367
// if GetSide ( vehicle ) = 3 then
18191: LD_VAR 0 1
18195: PPUSH
18196: CALL_OW 255
18200: PUSH
18201: LD_INT 3
18203: EQUAL
18204: IFFALSE 18367
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 264
18215: PUSH
18216: LD_INT 46
18218: EQUAL
18219: PUSH
18220: LD_VAR 0 1
18224: PPUSH
18225: CALL_OW 264
18229: PUSH
18230: LD_INT 45
18232: EQUAL
18233: OR
18234: PUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 264
18244: PUSH
18245: LD_INT 44
18247: EQUAL
18248: OR
18249: IFFALSE 18324
// begin russianTanks = russianTanks ^ vehicle ;
18251: LD_ADDR_EXP 40
18255: PUSH
18256: LD_EXP 40
18260: PUSH
18261: LD_VAR 0 1
18265: ADD
18266: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18267: LD_EXP 44
18271: PUSH
18272: LD_INT 1
18274: EQUAL
18275: PUSH
18276: LD_EXP 44
18280: PUSH
18281: LD_INT 0
18283: EQUAL
18284: OR
18285: IFFALSE 18299
// ComEnterUnit ( vehicle , ruteleprt ) ;
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_INT 10
18294: PPUSH
18295: CALL_OW 120
// if attackTactic = 2 then
18299: LD_EXP 44
18303: PUSH
18304: LD_INT 2
18306: EQUAL
18307: IFFALSE 18324
// ComMoveXY ( vehicle , 88 , 69 ) ;
18309: LD_VAR 0 1
18313: PPUSH
18314: LD_INT 88
18316: PPUSH
18317: LD_INT 69
18319: PPUSH
18320: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 264
18333: PUSH
18334: LD_INT 49
18336: EQUAL
18337: IFFALSE 18367
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18339: LD_ADDR_EXP 41
18343: PUSH
18344: LD_EXP 41
18348: PUSH
18349: LD_VAR 0 1
18353: ADD
18354: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18355: LD_VAR 0 1
18359: PPUSH
18360: LD_INT 137
18362: PPUSH
18363: CALL_OW 120
// end ; end ; end ;
18367: PPOPN 2
18369: END
// on UnitGoesToRed ( unit ) do var i ;
18370: LD_INT 0
18372: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL_OW 255
18382: PUSH
18383: LD_INT 3
18385: EQUAL
18386: PUSH
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 247
18396: PUSH
18397: LD_INT 2
18399: EQUAL
18400: AND
18401: IFFALSE 18519
// begin if russianTanks > 0 then
18403: LD_EXP 40
18407: PUSH
18408: LD_INT 0
18410: GREATER
18411: IFFALSE 18461
// for i in russianTanks do
18413: LD_ADDR_VAR 0 2
18417: PUSH
18418: LD_EXP 40
18422: PUSH
18423: FOR_IN
18424: IFFALSE 18459
// if i = unit then
18426: LD_VAR 0 2
18430: PUSH
18431: LD_VAR 0 1
18435: EQUAL
18436: IFFALSE 18457
// russianTanks = russianTanks diff [ unit ] ;
18438: LD_ADDR_EXP 40
18442: PUSH
18443: LD_EXP 40
18447: PUSH
18448: LD_VAR 0 1
18452: PUSH
18453: EMPTY
18454: LIST
18455: DIFF
18456: ST_TO_ADDR
18457: GO 18423
18459: POP
18460: POP
// if russianTimeLapsers > 0 then
18461: LD_EXP 41
18465: PUSH
18466: LD_INT 0
18468: GREATER
18469: IFFALSE 18519
// for i in russianTimeLapsers do
18471: LD_ADDR_VAR 0 2
18475: PUSH
18476: LD_EXP 41
18480: PUSH
18481: FOR_IN
18482: IFFALSE 18517
// if i = unit then
18484: LD_VAR 0 2
18488: PUSH
18489: LD_VAR 0 1
18493: EQUAL
18494: IFFALSE 18515
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18496: LD_ADDR_EXP 41
18500: PUSH
18501: LD_EXP 41
18505: PUSH
18506: LD_VAR 0 1
18510: PUSH
18511: EMPTY
18512: LIST
18513: DIFF
18514: ST_TO_ADDR
18515: GO 18481
18517: POP
18518: POP
// end ; end ;
18519: PPOPN 2
18521: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18522: LD_INT 0
18524: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 255
18534: PUSH
18535: LD_INT 3
18537: EQUAL
18538: PUSH
18539: LD_VAR 0 2
18543: PPUSH
18544: CALL_OW 257
18548: PUSH
18549: LD_INT 3
18551: EQUAL
18552: AND
18553: PUSH
18554: LD_INT 21
18556: PPUSH
18557: CALL_OW 255
18561: PUSH
18562: LD_INT 3
18564: EQUAL
18565: AND
18566: PUSH
18567: LD_INT 21
18569: PPUSH
18570: CALL_OW 302
18574: AND
18575: IFFALSE 18589
// ComEnterUnit ( human , ru_fact ) ;
18577: LD_VAR 0 2
18581: PPUSH
18582: LD_INT 21
18584: PPUSH
18585: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18589: LD_VAR 0 2
18593: PPUSH
18594: CALL_OW 257
18598: PUSH
18599: LD_INT 4
18601: EQUAL
18602: PUSH
18603: LD_VAR 0 2
18607: PPUSH
18608: CALL_OW 255
18612: PUSH
18613: LD_INT 3
18615: EQUAL
18616: AND
18617: PUSH
18618: LD_EXP 42
18622: PUSH
18623: LD_INT 0
18625: EQUAL
18626: AND
18627: IFFALSE 18689
// for i in RuScientists do
18629: LD_ADDR_VAR 0 3
18633: PUSH
18634: LD_EXP 35
18638: PUSH
18639: FOR_IN
18640: IFFALSE 18687
// if i = human then
18642: LD_VAR 0 3
18646: PUSH
18647: LD_VAR 0 2
18651: EQUAL
18652: IFFALSE 18685
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18654: LD_VAR 0 3
18658: PPUSH
18659: LD_INT 13
18661: PUSH
18662: LD_INT 14
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 1
18671: PPUSH
18672: LD_INT 2
18674: PPUSH
18675: CALL_OW 12
18679: ARRAY
18680: PPUSH
18681: CALL_OW 113
18685: GO 18639
18687: POP
18688: POP
// end ;
18689: PPOPN 3
18691: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18692: LD_INT 0
18694: PPUSH
18695: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18696: LD_VAR 0 2
18700: PPUSH
18701: CALL_OW 255
18705: PUSH
18706: LD_INT 3
18708: EQUAL
18709: PUSH
18710: LD_VAR 0 2
18714: PPUSH
18715: CALL_OW 257
18719: PUSH
18720: LD_INT 4
18722: EQUAL
18723: AND
18724: IFFALSE 18866
// for i in RuScientists do
18726: LD_ADDR_VAR 0 3
18730: PUSH
18731: LD_EXP 35
18735: PUSH
18736: FOR_IN
18737: IFFALSE 18864
// if i = human then
18739: LD_VAR 0 3
18743: PUSH
18744: LD_VAR 0 2
18748: EQUAL
18749: IFFALSE 18862
// if IsOk ( rutp ) then
18751: LD_INT 137
18753: PPUSH
18754: CALL_OW 302
18758: IFFALSE 18831
// begin rnd = rand ( 1 , 2 ) ;
18760: LD_ADDR_VAR 0 4
18764: PUSH
18765: LD_INT 1
18767: PPUSH
18768: LD_INT 2
18770: PPUSH
18771: CALL_OW 12
18775: ST_TO_ADDR
// if rnd = 1 then
18776: LD_VAR 0 4
18780: PUSH
18781: LD_INT 1
18783: EQUAL
18784: IFFALSE 18798
// ComEnterUnit ( vehicle , rutp ) ;
18786: LD_VAR 0 1
18790: PPUSH
18791: LD_INT 137
18793: PPUSH
18794: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18798: LD_VAR 0 1
18802: PPUSH
18803: LD_INT 13
18805: PUSH
18806: LD_INT 14
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: PPUSH
18816: LD_INT 2
18818: PPUSH
18819: CALL_OW 12
18823: ARRAY
18824: PPUSH
18825: CALL_OW 173
// end else
18829: GO 18862
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18831: LD_VAR 0 1
18835: PPUSH
18836: LD_INT 13
18838: PUSH
18839: LD_INT 14
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PPUSH
18849: LD_INT 2
18851: PPUSH
18852: CALL_OW 12
18856: ARRAY
18857: PPUSH
18858: CALL_OW 113
// end ;
18862: GO 18736
18864: POP
18865: POP
// end ; end_of_file
18866: PPOPN 4
18868: END
// every 0 0$1 trigger ruAI = 1 do
18869: LD_EXP 42
18873: PUSH
18874: LD_INT 1
18876: EQUAL
18877: IFFALSE 19006
18879: GO 18881
18881: DISABLE
// begin enable ;
18882: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18883: LD_INT 3
18885: PPUSH
18886: LD_INT 6
18888: PPUSH
18889: LD_INT 9
18891: PPUSH
18892: LD_EXP 39
18896: PPUSH
18897: CALL 14446 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18901: LD_INT 3
18903: PPUSH
18904: LD_INT 4
18906: PPUSH
18907: LD_INT 10
18909: PPUSH
18910: LD_EXP 39
18914: PPUSH
18915: CALL 14446 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18919: LD_INT 3
18921: PPUSH
18922: LD_INT 9
18924: PPUSH
18925: CALL 15647 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18929: LD_INT 3
18931: PPUSH
18932: LD_INT 10
18934: PPUSH
18935: CALL 15647 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18939: LD_INT 3
18941: PPUSH
18942: LD_INT 16
18944: PPUSH
18945: LD_INT 9
18947: PPUSH
18948: LD_INT 91
18950: PPUSH
18951: CALL 14837 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18955: LD_INT 3
18957: PPUSH
18958: LD_INT 17
18960: PPUSH
18961: LD_INT 10
18963: PPUSH
18964: LD_INT 47
18966: PUSH
18967: LD_INT 129
18969: PUSH
18970: LD_INT 135
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL 14837 0 4
// AttackVehicles ( 3 ) ;
18982: LD_INT 3
18984: PPUSH
18985: CALL 15974 0 1
// IntBazooka ( 3 ) ;
18989: LD_INT 3
18991: PPUSH
18992: CALL 16433 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18996: LD_INT 3
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL 15417 0 2
// end ;
19006: END
// every 0 0$1 do
19007: GO 19009
19009: DISABLE
// begin enable ;
19010: ENABLE
// TimeLapsersAI ( 3 ) ;
19011: LD_INT 3
19013: PPUSH
19014: CALL 16272 0 1
// end ;
19018: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
19019: LD_INT 4
19021: PPUSH
19022: CALL_OW 303
19026: IFFALSE 19041
19028: GO 19030
19030: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
19031: LD_INT 3
19033: PPUSH
19034: LD_INT 4
19036: PPUSH
19037: CALL 17085 0 2
19041: END
// every 0 0$1 do
19042: GO 19044
19044: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
19045: LD_INT 3
19047: PPUSH
19048: LD_INT 91
19050: PPUSH
19051: LD_INT 3
19053: PPUSH
19054: CALL 14205 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
19058: LD_INT 3
19060: PPUSH
19061: LD_INT 47
19063: PPUSH
19064: LD_INT 3
19066: PPUSH
19067: CALL 14205 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
19071: LD_INT 3
19073: PPUSH
19074: LD_INT 129
19076: PPUSH
19077: LD_INT 3
19079: PPUSH
19080: CALL 14205 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
19084: LD_INT 3
19086: PPUSH
19087: LD_INT 3
19089: PPUSH
19090: LD_INT 3
19092: PPUSH
19093: CALL 14205 0 3
// end ;
19097: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19098: LD_EXP 28
19102: PUSH
19103: LD_INT 2
19105: EQUAL
19106: PUSH
19107: LD_INT 21
19109: PPUSH
19110: CALL_OW 255
19114: PUSH
19115: LD_INT 3
19117: EQUAL
19118: AND
19119: PUSH
19120: LD_INT 112
19122: PPUSH
19123: CALL_OW 255
19127: PUSH
19128: LD_INT 3
19130: EQUAL
19131: AND
19132: PUSH
19133: LD_INT 21
19135: PPUSH
19136: CALL_OW 302
19140: AND
19141: PUSH
19142: LD_INT 112
19144: PPUSH
19145: CALL_OW 302
19149: AND
19150: PUSH
19151: LD_INT 22
19153: PUSH
19154: LD_INT 3
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 21
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 50
19173: PUSH
19174: EMPTY
19175: LIST
19176: PUSH
19177: LD_INT 3
19179: PUSH
19180: LD_INT 58
19182: PUSH
19183: EMPTY
19184: LIST
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 69
19200: PUSH
19201: LD_INT 18
19203: PPUSH
19204: LD_INT 22
19206: PUSH
19207: LD_INT 3
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 21
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PPUSH
19228: CALL_OW 70
19232: PUSH
19233: LD_INT 0
19235: EQUAL
19236: DIFF
19237: AND
19238: IFFALSE 19356
19240: GO 19242
19242: DISABLE
// begin enable ;
19243: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19244: LD_INT 3
19246: PPUSH
19247: LD_INT 21
19249: PPUSH
19250: LD_INT 3
19252: PUSH
19253: LD_INT 4
19255: PUSH
19256: LD_INT 4
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: PUSH
19264: LD_OWVAR 67
19268: ARRAY
19269: PPUSH
19270: LD_INT 46
19272: PUSH
19273: LD_INT 45
19275: PUSH
19276: LD_INT 44
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: PPUSH
19284: LD_INT 3
19286: PPUSH
19287: LD_INT 3
19289: PPUSH
19290: LD_INT 24
19292: PPUSH
19293: CALL 15827 0 7
// if russianTimeLapsers = 0 then
19297: LD_EXP 41
19301: PUSH
19302: LD_INT 0
19304: EQUAL
19305: IFFALSE 19356
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19307: LD_INT 3
19309: PPUSH
19310: LD_INT 112
19312: PPUSH
19313: LD_INT 1
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 2
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: PUSH
19327: LD_OWVAR 67
19331: ARRAY
19332: PPUSH
19333: LD_INT 49
19335: PUSH
19336: LD_INT 49
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PPUSH
19343: LD_INT 3
19345: PPUSH
19346: LD_INT 3
19348: PPUSH
19349: LD_INT 24
19351: PPUSH
19352: CALL 15827 0 7
// end ;
19356: END
// every 0 0$1 trigger arabianMines do var i ;
19357: LD_EXP 45
19361: IFFALSE 19482
19363: GO 19365
19365: DISABLE
19366: LD_INT 0
19368: PPUSH
// begin enable ;
19369: ENABLE
// for i in arabianMines do
19370: LD_ADDR_VAR 0 1
19374: PUSH
19375: LD_EXP 45
19379: PUSH
19380: FOR_IN
19381: IFFALSE 19480
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19383: LD_INT 22
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 92
19395: PUSH
19396: LD_VAR 0 1
19400: PUSH
19401: LD_INT 1
19403: ARRAY
19404: PUSH
19405: LD_VAR 0 1
19409: PUSH
19410: LD_INT 2
19412: ARRAY
19413: PUSH
19414: LD_INT 3
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 69
19431: IFFALSE 19478
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19433: LD_VAR 0 1
19437: PUSH
19438: LD_INT 1
19440: ARRAY
19441: PPUSH
19442: LD_VAR 0 1
19446: PUSH
19447: LD_INT 2
19449: ARRAY
19450: PPUSH
19451: LD_INT 5
19453: PPUSH
19454: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19458: LD_ADDR_EXP 45
19462: PUSH
19463: LD_EXP 45
19467: PPUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: CALL_OW 3
19477: ST_TO_ADDR
// end ; end ;
19478: GO 19380
19480: POP
19481: POP
// end ;
19482: PPOPN 1
19484: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19485: LD_EXP 29
19489: PUSH
19490: LD_INT 4
19492: EQUAL
19493: PUSH
19494: LD_EXP 30
19498: PUSH
19499: LD_INT 6
19501: PUSH
19502: LD_INT 8
19504: PUSH
19505: LD_INT 8
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: PUSH
19513: LD_OWVAR 67
19517: ARRAY
19518: EQUAL
19519: AND
19520: IFFALSE 19538
19522: GO 19524
19524: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19525: LD_INT 10
19527: PPUSH
19528: LD_INT 47
19530: PPUSH
19531: LD_INT 82
19533: PPUSH
19534: CALL_OW 243
19538: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19539: LD_EXP 29
19543: PUSH
19544: LD_INT 4
19546: EQUAL
19547: IFFALSE 19569
19549: GO 19551
19551: DISABLE
// begin enable ;
19552: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19553: LD_ADDR_EXP 44
19557: PUSH
19558: LD_INT 1
19560: PPUSH
19561: LD_INT 2
19563: PPUSH
19564: CALL_OW 12
19568: ST_TO_ADDR
// end ; end_of_file
19569: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19570: LD_EXP 35
19574: PUSH
19575: EMPTY
19576: EQUAL
19577: PUSH
19578: LD_INT 3
19580: PPUSH
19581: CALL_OW 301
19585: AND
19586: IFFALSE 19791
19588: GO 19590
19590: DISABLE
// begin if sciCounter = 0 then
19591: LD_EXP 36
19595: PUSH
19596: LD_INT 0
19598: EQUAL
19599: IFFALSE 19625
// begin Say ( JMM , D7a-JMM-1 ) ;
19601: LD_EXP 1
19605: PPUSH
19606: LD_STRING D7a-JMM-1
19608: PPUSH
19609: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19613: LD_EXP 22
19617: PPUSH
19618: LD_STRING D7a-Pow-1
19620: PPUSH
19621: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19625: LD_EXP 36
19629: PUSH
19630: LD_INT 0
19632: GREATER
19633: PUSH
19634: LD_EXP 36
19638: PUSH
19639: LD_INT 6
19641: LESS
19642: AND
19643: IFFALSE 19669
// begin Say ( JMM , D7b-JMM-1 ) ;
19645: LD_EXP 1
19649: PPUSH
19650: LD_STRING D7b-JMM-1
19652: PPUSH
19653: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19657: LD_EXP 22
19661: PPUSH
19662: LD_STRING D7b-Pow-1
19664: PPUSH
19665: CALL_OW 94
// end ; if sciCounter = 6 then
19669: LD_EXP 36
19673: PUSH
19674: LD_INT 6
19676: EQUAL
19677: IFFALSE 19787
// begin Say ( JMM , D7c-JMM-1 ) ;
19679: LD_EXP 1
19683: PPUSH
19684: LD_STRING D7c-JMM-1
19686: PPUSH
19687: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19691: LD_EXP 22
19695: PPUSH
19696: LD_STRING D7c-Pow-1
19698: PPUSH
19699: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19703: LD_EXP 1
19707: PPUSH
19708: LD_STRING D7d-JMM-1
19710: PPUSH
19711: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19715: LD_EXP 22
19719: PPUSH
19720: LD_STRING D7d-Pow-1
19722: PPUSH
19723: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19727: LD_EXP 1
19731: PPUSH
19732: LD_STRING D7d-JMM-2
19734: PPUSH
19735: CALL_OW 88
// if askSiberite = 1 then
19739: LD_EXP 33
19743: PUSH
19744: LD_INT 1
19746: EQUAL
19747: IFFALSE 19763
// begin Say ( JMM , D7d-JMM-2a ) ;
19749: LD_EXP 1
19753: PPUSH
19754: LD_STRING D7d-JMM-2a
19756: PPUSH
19757: CALL_OW 88
// end else
19761: GO 19775
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19763: LD_EXP 22
19767: PPUSH
19768: LD_STRING D7d-Pow-2
19770: PPUSH
19771: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19775: LD_EXP 22
19779: PPUSH
19780: LD_STRING D7d-Pow-2a
19782: PPUSH
19783: CALL_OW 94
// end ; FinishMission ;
19787: CALL 19792 0 0
// end ;
19791: END
// export function FinishMission ; begin
19792: LD_INT 0
19794: PPUSH
// if teleportExplored = 1 then
19795: LD_EXP 34
19799: PUSH
19800: LD_INT 1
19802: EQUAL
19803: IFFALSE 19817
// AddMedal ( Teleport , 1 ) else
19805: LD_STRING Teleport
19807: PPUSH
19808: LD_INT 1
19810: PPUSH
19811: CALL_OW 101
19815: GO 19828
// AddMedal ( Teleport , - 1 ) ;
19817: LD_STRING Teleport
19819: PPUSH
19820: LD_INT 1
19822: NEG
19823: PPUSH
19824: CALL_OW 101
// if sciCounter > 2 then
19828: LD_EXP 36
19832: PUSH
19833: LD_INT 2
19835: GREATER
19836: IFFALSE 19850
// AddMedal ( Materials , 1 ) else
19838: LD_STRING Materials
19840: PPUSH
19841: LD_INT 1
19843: PPUSH
19844: CALL_OW 101
19848: GO 19861
// AddMedal ( Materials , - 1 ) ;
19850: LD_STRING Materials
19852: PPUSH
19853: LD_INT 1
19855: NEG
19856: PPUSH
19857: CALL_OW 101
// if sciCounter = 6 then
19861: LD_EXP 36
19865: PUSH
19866: LD_INT 6
19868: EQUAL
19869: IFFALSE 19893
// begin AddMedal ( Scientists , 1 ) ;
19871: LD_STRING Scientists
19873: PPUSH
19874: LD_INT 1
19876: PPUSH
19877: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19881: LD_INT 1
19883: PPUSH
19884: LD_STRING 12_SciDed_1
19886: PPUSH
19887: CALL_OW 39
// end else
19891: GO 19914
// begin AddMedal ( Scientists , - 1 ) ;
19893: LD_STRING Scientists
19895: PPUSH
19896: LD_INT 1
19898: NEG
19899: PPUSH
19900: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19904: LD_INT 0
19906: PPUSH
19907: LD_STRING 12_SciDed_1
19909: PPUSH
19910: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19914: LD_EXP 32
19918: PPUSH
19919: LD_STRING 12_MainDepositFake_1
19921: PPUSH
19922: CALL_OW 39
// GiveMedals ( MAIN ) ;
19926: LD_STRING MAIN
19928: PPUSH
19929: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19933: LD_INT 22
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 21
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: LD_INT 25
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 25
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 25
19978: PUSH
19979: LD_INT 3
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 25
19988: PUSH
19989: LD_INT 4
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 25
19998: PUSH
19999: LD_INT 5
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 25
20008: PUSH
20009: LD_INT 8
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: PPUSH
20030: CALL_OW 69
20034: PPUSH
20035: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20039: LD_EXP 1
20043: PPUSH
20044: LD_EXP 47
20048: PUSH
20049: LD_STRING JMM
20051: STR
20052: PPUSH
20053: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20057: LD_EXP 7
20061: PPUSH
20062: LD_EXP 47
20066: PUSH
20067: LD_STRING Brown
20069: STR
20070: PPUSH
20071: CALL 13437 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20075: LD_EXP 3
20079: PPUSH
20080: LD_EXP 47
20084: PUSH
20085: LD_STRING Donaldson
20087: STR
20088: PPUSH
20089: CALL 13437 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20093: LD_EXP 4
20097: PPUSH
20098: LD_EXP 47
20102: PUSH
20103: LD_STRING Bobby
20105: STR
20106: PPUSH
20107: CALL 13437 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20111: LD_EXP 5
20115: PPUSH
20116: LD_EXP 47
20120: PUSH
20121: LD_STRING Cyrus
20123: STR
20124: PPUSH
20125: CALL 13437 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20129: LD_EXP 2
20133: PPUSH
20134: LD_EXP 47
20138: PUSH
20139: LD_STRING Lisa
20141: STR
20142: PPUSH
20143: CALL 13437 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20147: LD_EXP 12
20151: PPUSH
20152: LD_EXP 47
20156: PUSH
20157: LD_STRING Frank
20159: STR
20160: PPUSH
20161: CALL 13437 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20165: LD_EXP 13
20169: PPUSH
20170: LD_EXP 47
20174: PUSH
20175: LD_STRING Kikuchi
20177: STR
20178: PPUSH
20179: CALL 13437 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20183: LD_EXP 9
20187: PPUSH
20188: LD_EXP 47
20192: PUSH
20193: LD_STRING Houten
20195: STR
20196: PPUSH
20197: CALL 13437 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20201: LD_EXP 11
20205: PPUSH
20206: LD_EXP 47
20210: PUSH
20211: LD_STRING Gary
20213: STR
20214: PPUSH
20215: CALL 13437 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20219: LD_EXP 10
20223: PPUSH
20224: LD_EXP 47
20228: PUSH
20229: LD_STRING Cornell
20231: STR
20232: PPUSH
20233: CALL 13437 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20237: LD_EXP 6
20241: PPUSH
20242: LD_EXP 47
20246: PUSH
20247: LD_STRING Denis
20249: STR
20250: PPUSH
20251: CALL 13437 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20255: LD_EXP 8
20259: PPUSH
20260: LD_EXP 47
20264: PUSH
20265: LD_STRING Gladstone
20267: STR
20268: PPUSH
20269: CALL 13437 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20273: LD_INT 22
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 23
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 21
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 25
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 25
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 25
20328: PUSH
20329: LD_INT 3
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 25
20338: PUSH
20339: LD_INT 4
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 25
20348: PUSH
20349: LD_INT 5
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 25
20358: PUSH
20359: LD_INT 8
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: PPUSH
20381: CALL_OW 69
20385: PUSH
20386: LD_EXP 1
20390: PUSH
20391: LD_EXP 7
20395: PUSH
20396: LD_EXP 3
20400: PUSH
20401: LD_EXP 4
20405: PUSH
20406: LD_EXP 5
20410: PUSH
20411: LD_EXP 2
20415: PUSH
20416: LD_EXP 12
20420: PUSH
20421: LD_EXP 8
20425: PUSH
20426: LD_EXP 13
20430: PUSH
20431: LD_EXP 6
20435: PUSH
20436: LD_EXP 9
20440: PUSH
20441: LD_EXP 11
20445: PUSH
20446: LD_EXP 10
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: DIFF
20466: PPUSH
20467: LD_STRING 12_other_survivors
20469: PPUSH
20470: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20474: LD_INT 22
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 23
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 21
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: LD_INT 25
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 25
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 25
20529: PUSH
20530: LD_INT 3
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 25
20539: PUSH
20540: LD_INT 4
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 25
20549: PUSH
20550: LD_INT 5
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 25
20559: PUSH
20560: LD_INT 8
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: PPUSH
20582: CALL_OW 69
20586: PPUSH
20587: LD_STRING 12_kurt_squad
20589: PPUSH
20590: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
20594: LD_EXP 14
20598: PPUSH
20599: LD_STRING 12_others
20601: PPUSH
20602: CALL_OW 38
// YouWin ;
20606: CALL_OW 103
// end ; end_of_file
20610: LD_VAR 0 1
20614: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20615: LD_EXP 1
20619: PPUSH
20620: CALL_OW 301
20624: IFFALSE 20636
20626: GO 20628
20628: DISABLE
// YouLost ( JMM ) ; end_of_file
20629: LD_STRING JMM
20631: PPUSH
20632: CALL_OW 104
20636: END
// every 0 0$01 do
20637: GO 20639
20639: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20640: LD_INT 1050
20642: PPUSH
20643: CALL_OW 67
// if cratesSpawned < 6 then
20647: LD_EXP 46
20651: PUSH
20652: LD_INT 6
20654: LESS
20655: IFFALSE 20692
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20657: LD_INT 3
20659: PPUSH
20660: LD_INT 5
20662: PPUSH
20663: CALL_OW 12
20667: PPUSH
20668: LD_INT 21
20670: PPUSH
20671: LD_INT 1
20673: PPUSH
20674: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20678: LD_ADDR_EXP 46
20682: PUSH
20683: LD_EXP 46
20687: PUSH
20688: LD_INT 1
20690: PLUS
20691: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20692: LD_EXP 46
20696: PUSH
20697: LD_INT 6
20699: GREATEREQUAL
20700: PUSH
20701: LD_EXP 46
20705: PUSH
20706: LD_INT 12
20708: LESS
20709: AND
20710: IFFALSE 20754
// begin wait ( 0 0$50 ) ;
20712: LD_INT 1750
20714: PPUSH
20715: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20719: LD_INT 3
20721: PPUSH
20722: LD_INT 5
20724: PPUSH
20725: CALL_OW 12
20729: PPUSH
20730: LD_INT 21
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20740: LD_ADDR_EXP 46
20744: PUSH
20745: LD_EXP 46
20749: PUSH
20750: LD_INT 1
20752: PLUS
20753: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20754: LD_EXP 46
20758: PUSH
20759: LD_INT 12
20761: GREATEREQUAL
20762: IFFALSE 20806
// begin wait ( 1 1$40 ) ;
20764: LD_INT 3500
20766: PPUSH
20767: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20771: LD_INT 3
20773: PPUSH
20774: LD_INT 5
20776: PPUSH
20777: CALL_OW 12
20781: PPUSH
20782: LD_INT 21
20784: PPUSH
20785: LD_INT 1
20787: PPUSH
20788: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20792: LD_ADDR_EXP 46
20796: PUSH
20797: LD_EXP 46
20801: PUSH
20802: LD_INT 1
20804: PLUS
20805: ST_TO_ADDR
// end ; until false ;
20806: LD_INT 0
20808: IFFALSE 20640
// end ;
20810: END
