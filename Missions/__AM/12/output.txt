// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17276 0 0
// PrepareDifficulty ;
 195: CALL 13656 0 0
// PrepareVehicles ;
 199: CALL 1658 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1232 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 3034 0 0
// PrepareWestBase ;
 227: CALL 3546 0 0
// PrepareEastBase ;
 231: CALL 3106 0 0
// PrepareOtherRussians ;
 235: CALL 3658 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 557: LD_INT 0
 559: PPUSH
 560: PPUSH
 561: PPUSH
// uc_side = 1 ;
 562: LD_ADDR_OWVAR 20
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 570: LD_ADDR_EXP 14
 574: PUSH
 575: LD_STRING 11c_others
 577: PPUSH
 578: CALL_OW 31
 582: PUSH
 583: LD_STRING 11_others
 585: PPUSH
 586: CALL_OW 31
 590: UNION
 591: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_STRING 11_JMM
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL 13306 0 2
 607: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 608: LD_EXP 1
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 22
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 21
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 58
 647: PUSH
 648: EMPTY
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: PPUSH
 656: CALL_OW 69
 660: PUSH
 661: LD_INT 1
 663: ARRAY
 664: PPUSH
 665: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 669: LD_STRING 11_Lisa
 671: PPUSH
 672: CALL_OW 28
 676: PUSH
 677: LD_INT 1
 679: EQUAL
 680: IFFALSE 727
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 682: LD_ADDR_EXP 2
 686: PUSH
 687: LD_STRING 11_Lisa
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 13306 0 2
 697: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 698: LD_EXP 2
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 710: LD_EXP 2
 714: PPUSH
 715: LD_INT 4
 717: PPUSH
 718: LD_INT 0
 720: PPUSH
 721: CALL_OW 49
// end else
 725: GO 743
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 727: LD_INT 4
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 1232 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 743: LD_STRING 11_Donaldson
 745: PPUSH
 746: CALL_OW 28
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: IFFALSE 801
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 756: LD_ADDR_EXP 3
 760: PUSH
 761: LD_STRING 11_Donaldson
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: CALL 13306 0 2
 771: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 784: LD_EXP 3
 788: PPUSH
 789: LD_INT 4
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// end else
 799: GO 817
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 801: LD_INT 4
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL 1232 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 817: LD_STRING 11_Cyrus
 819: PPUSH
 820: CALL_OW 28
 824: PUSH
 825: LD_INT 1
 827: EQUAL
 828: IFFALSE 875
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 830: LD_ADDR_EXP 5
 834: PUSH
 835: LD_STRING 11_Cyrus
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL 13306 0 2
 845: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 846: LD_EXP 5
 850: PPUSH
 851: LD_INT 1
 853: PPUSH
 854: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 858: LD_EXP 5
 862: PPUSH
 863: LD_INT 4
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
// end else
 873: GO 891
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 875: LD_INT 4
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL 1232 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 891: LD_STRING 11_Denis
 893: PPUSH
 894: CALL_OW 28
 898: PUSH
 899: LD_INT 1
 901: EQUAL
 902: IFFALSE 949
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 904: LD_ADDR_EXP 6
 908: PUSH
 909: LD_STRING 11_Denis
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 13306 0 2
 919: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 920: LD_EXP 6
 924: PPUSH
 925: LD_INT 4
 927: PPUSH
 928: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 932: LD_EXP 6
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// end else
 947: GO 965
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 949: LD_INT 4
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL 1232 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 965: LD_STRING 11_Frank
 967: PPUSH
 968: CALL_OW 28
 972: PUSH
 973: LD_INT 1
 975: EQUAL
 976: IFFALSE 1023
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 978: LD_ADDR_EXP 12
 982: PUSH
 983: LD_STRING 11_Frank
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL 13306 0 2
 993: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 994: LD_EXP 12
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1006: LD_EXP 12
1010: PPUSH
1011: LD_INT 4
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 49
// end else
1021: GO 1039
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1023: LD_INT 4
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL 1232 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1039: LD_STRING 11_Cornell
1041: PPUSH
1042: CALL_OW 28
1046: PUSH
1047: LD_INT 1
1049: EQUAL
1050: IFFALSE 1097
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: LD_STRING 11_Cornell
1059: PPUSH
1060: LD_INT 1
1062: PPUSH
1063: CALL 13306 0 2
1067: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1068: LD_EXP 10
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1080: LD_EXP 10
1084: PPUSH
1085: LD_INT 4
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 49
// end else
1095: GO 1113
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1097: LD_INT 4
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 1
1105: PPUSH
1106: LD_INT 0
1108: PPUSH
1109: CALL 1232 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1113: LD_ADDR_VAR 0 2
1117: PUSH
1118: LD_EXP 14
1122: PPUSH
1123: LD_INT 26
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 72
1137: ST_TO_ADDR
// if not tmp then
1138: LD_VAR 0 2
1142: NOT
1143: IFFALSE 1172
// begin PrepareSoldier ( sex_male , 8 ) ;
1145: LD_INT 1
1147: PPUSH
1148: LD_INT 8
1150: PPUSH
1151: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1155: CALL_OW 44
1159: PPUSH
1160: LD_INT 4
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 49
// end else
1170: GO 1211
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: LD_INT 4
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1191: LD_ADDR_EXP 14
1195: PUSH
1196: LD_EXP 14
1200: PUSH
1201: LD_VAR 0 2
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: DIFF
1210: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1211: LD_ADDR_EXP 22
1215: PUSH
1216: LD_STRING Powell
1218: PPUSH
1219: LD_INT 0
1221: PPUSH
1222: CALL 13306 0 2
1226: ST_TO_ADDR
// end ;
1227: LD_VAR 0 1
1231: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1232: LD_INT 0
1234: PPUSH
1235: PPUSH
1236: PPUSH
1237: PPUSH
1238: PPUSH
// if mech = 1 then
1239: LD_VAR 0 4
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1484
// begin if others11 > 0 then
1249: LD_EXP 14
1253: PUSH
1254: LD_INT 0
1256: GREATER
1257: IFFALSE 1424
// begin for i := 1 to others11 - 1 do
1259: LD_ADDR_VAR 0 6
1263: PUSH
1264: DOUBLE
1265: LD_INT 1
1267: DEC
1268: ST_TO_ADDR
1269: LD_EXP 14
1273: PUSH
1274: LD_INT 1
1276: MINUS
1277: PUSH
1278: FOR_TO
1279: IFFALSE 1361
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1281: LD_EXP 14
1285: PUSH
1286: LD_VAR 0 6
1290: ARRAY
1291: PPUSH
1292: LD_INT 3
1294: PPUSH
1295: CALL_OW 259
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 6
1309: PUSH
1310: LD_INT 1
1312: PLUS
1313: ARRAY
1314: PPUSH
1315: LD_INT 3
1317: PPUSH
1318: CALL_OW 259
1322: LESS
1323: IFFALSE 1359
// begin mecha = others11 [ i + 1 ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_EXP 14
1334: PUSH
1335: LD_VAR 0 6
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1345: LD_VAR 0 9
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: CALL_OW 336
// break ;
1357: GO 1361
// end ; end ;
1359: GO 1278
1361: POP
1362: POP
// if spawnMode = 1 then
1363: LD_VAR 0 3
1367: PUSH
1368: LD_INT 1
1370: EQUAL
1371: IFFALSE 1392
// PlaceUnitArea ( mecha , area , false ) else
1373: LD_VAR 0 9
1377: PPUSH
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 49
1390: GO 1406
// PlaceHumanInUnit ( mecha , veh ) ;
1392: LD_VAR 0 9
1396: PPUSH
1397: LD_VAR 0 2
1401: PPUSH
1402: CALL_OW 52
// others11 = others11 diff mecha ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_EXP 14
1415: PUSH
1416: LD_VAR 0 9
1420: DIFF
1421: ST_TO_ADDR
// end else
1422: GO 1482
// begin hc_name =  ;
1424: LD_ADDR_OWVAR 26
1428: PUSH
1429: LD_STRING 
1431: ST_TO_ADDR
// hc_gallery =  ;
1432: LD_ADDR_OWVAR 33
1436: PUSH
1437: LD_STRING 
1439: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1440: LD_INT 0
1442: PPUSH
1443: LD_INT 7
1445: PPUSH
1446: LD_INT 9
1448: PPUSH
1449: CALL_OW 12
1453: PPUSH
1454: CALL_OW 383
// un = CreateHuman ;
1458: LD_ADDR_VAR 0 7
1462: PUSH
1463: CALL_OW 44
1467: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1468: LD_VAR 0 7
1472: PPUSH
1473: LD_VAR 0 2
1477: PPUSH
1478: CALL_OW 52
// end ; end else
1482: GO 1653
// begin if others11 > 0 then
1484: LD_EXP 14
1488: PUSH
1489: LD_INT 0
1491: GREATER
1492: IFFALSE 1565
// begin if spawnMode = 1 then
1494: LD_VAR 0 3
1498: PUSH
1499: LD_INT 1
1501: EQUAL
1502: IFFALSE 1527
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1504: LD_EXP 14
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: LD_VAR 0 1
1517: PPUSH
1518: LD_INT 0
1520: PPUSH
1521: CALL_OW 49
1525: GO 1545
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1527: LD_EXP 14
1531: PUSH
1532: LD_INT 1
1534: ARRAY
1535: PPUSH
1536: LD_VAR 0 2
1540: PPUSH
1541: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1545: LD_ADDR_EXP 14
1549: PUSH
1550: LD_EXP 14
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 3
1562: ST_TO_ADDR
// end else
1563: GO 1653
// begin hc_name =  ;
1565: LD_ADDR_OWVAR 26
1569: PUSH
1570: LD_STRING 
1572: ST_TO_ADDR
// hc_gallery =  ;
1573: LD_ADDR_OWVAR 33
1577: PUSH
1578: LD_STRING 
1580: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1581: LD_INT 0
1583: PPUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 3
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 12
1612: ARRAY
1613: PPUSH
1614: LD_INT 7
1616: PPUSH
1617: LD_INT 9
1619: PPUSH
1620: CALL_OW 12
1624: PPUSH
1625: CALL_OW 380
// un = CreateHuman ;
1629: LD_ADDR_VAR 0 7
1633: PUSH
1634: CALL_OW 44
1638: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1639: LD_VAR 0 7
1643: PPUSH
1644: LD_VAR 0 2
1648: PPUSH
1649: CALL_OW 52
// end ; end ; end ;
1653: LD_VAR 0 5
1657: RET
// export function PrepareVehicles ; var veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
// uc_side = 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// uc_nation = 1 ;
1670: LD_ADDR_OWVAR 21
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1678: LD_ADDR_OWVAR 37
1682: PUSH
1683: LD_INT 3
1685: ST_TO_ADDR
// vc_engine = 3 ;
1686: LD_ADDR_OWVAR 39
1690: PUSH
1691: LD_INT 3
1693: ST_TO_ADDR
// vc_control = 3 ;
1694: LD_ADDR_OWVAR 38
1698: PUSH
1699: LD_INT 3
1701: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1702: LD_ADDR_OWVAR 40
1706: PUSH
1707: LD_INT 4
1709: ST_TO_ADDR
// veh = CreateVehicle ;
1710: LD_ADDR_VAR 0 2
1714: PUSH
1715: CALL_OW 45
1719: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1720: LD_VAR 0 2
1724: PPUSH
1725: LD_INT 4
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 49
// vc_weapon = us_double_gun ;
1735: LD_ADDR_OWVAR 40
1739: PUSH
1740: LD_INT 5
1742: ST_TO_ADDR
// vc_control = 1 ;
1743: LD_ADDR_OWVAR 38
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// veh = CreateVehicle ;
1751: LD_ADDR_VAR 0 2
1755: PUSH
1756: CALL_OW 45
1760: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1761: LD_VAR 0 2
1765: PPUSH
1766: LD_INT 4
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 49
// vc_weapon = us_light_gun ;
1776: LD_ADDR_OWVAR 40
1780: PUSH
1781: LD_INT 3
1783: ST_TO_ADDR
// vc_control = 3 ;
1784: LD_ADDR_OWVAR 38
1788: PUSH
1789: LD_INT 3
1791: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1792: LD_ADDR_OWVAR 37
1796: PUSH
1797: LD_INT 2
1799: ST_TO_ADDR
// veh = CreateVehicle ;
1800: LD_ADDR_VAR 0 2
1804: PUSH
1805: CALL_OW 45
1809: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1810: LD_VAR 0 2
1814: PPUSH
1815: LD_INT 4
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1825: LD_ADDR_OWVAR 40
1829: PUSH
1830: LD_INT 4
1832: ST_TO_ADDR
// veh = CreateVehicle ;
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: CALL_OW 45
1842: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1843: LD_VAR 0 2
1847: PPUSH
1848: LD_INT 4
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 49
// end ;
1858: LD_VAR 0 1
1862: RET
// export function PowellSupport1 ; var veh , un ; begin
1863: LD_INT 0
1865: PPUSH
1866: PPUSH
1867: PPUSH
// uc_side = 1 ;
1868: LD_ADDR_OWVAR 20
1872: PUSH
1873: LD_INT 1
1875: ST_TO_ADDR
// uc_nation = 1 ;
1876: LD_ADDR_OWVAR 21
1880: PUSH
1881: LD_INT 1
1883: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1884: LD_STRING 11_Brown
1886: PPUSH
1887: CALL_OW 28
1891: PUSH
1892: LD_INT 1
1894: EQUAL
1895: IFFALSE 1942
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1897: LD_ADDR_EXP 7
1901: PUSH
1902: LD_STRING 11_Brown
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: CALL 13306 0 2
1912: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1913: LD_EXP 7
1917: PPUSH
1918: LD_INT 2
1920: PPUSH
1921: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1925: LD_EXP 7
1929: PPUSH
1930: LD_INT 4
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 49
// end else
1940: GO 1958
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1942: LD_INT 4
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL 1232 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1958: LD_STRING 11_Gary
1960: PPUSH
1961: CALL_OW 28
1965: PUSH
1966: LD_INT 1
1968: EQUAL
1969: IFFALSE 2016
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1971: LD_ADDR_EXP 11
1975: PUSH
1976: LD_STRING 11_Gary
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 13306 0 2
1986: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1987: LD_EXP 11
1991: PPUSH
1992: LD_INT 2
1994: PPUSH
1995: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1999: LD_EXP 11
2003: PPUSH
2004: LD_INT 4
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
// end else
2014: GO 2032
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2016: LD_INT 4
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: LD_INT 0
2027: PPUSH
2028: CALL 1232 0 4
// end ; vc_chassis = us_medium_tracked ;
2032: LD_ADDR_OWVAR 37
2036: PUSH
2037: LD_INT 3
2039: ST_TO_ADDR
// vc_engine = 3 ;
2040: LD_ADDR_OWVAR 39
2044: PUSH
2045: LD_INT 3
2047: ST_TO_ADDR
// vc_control = 1 ;
2048: LD_ADDR_OWVAR 38
2052: PUSH
2053: LD_INT 1
2055: ST_TO_ADDR
// vc_weapon = us_crane ;
2056: LD_ADDR_OWVAR 40
2060: PUSH
2061: LD_INT 13
2063: ST_TO_ADDR
// veh = CreateVehicle ;
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2074: LD_VAR 0 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 2
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: CALL 1232 0 4
// vc_weapon = 9 ;
2119: LD_ADDR_OWVAR 40
2123: PUSH
2124: LD_INT 9
2126: ST_TO_ADDR
// veh = CreateVehicle ;
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2137: LD_VAR 0 2
2141: PPUSH
2142: LD_INT 4
2144: PPUSH
2145: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2149: LD_VAR 0 2
2153: PPUSH
2154: LD_INT 4
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2164: LD_INT 4
2166: PPUSH
2167: LD_VAR 0 2
2171: PPUSH
2172: LD_INT 2
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: CALL 1232 0 4
// vc_control = 3 ;
2182: LD_ADDR_OWVAR 38
2186: PUSH
2187: LD_INT 3
2189: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2190: LD_ADDR_OWVAR 40
2194: PUSH
2195: LD_INT 12
2197: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2198: LD_ADDR_EXP 15
2202: PUSH
2203: CALL_OW 45
2207: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2208: LD_ADDR_EXP 16
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2218: LD_EXP 15
2222: PPUSH
2223: LD_INT 4
2225: PPUSH
2226: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2230: LD_EXP 16
2234: PPUSH
2235: LD_INT 4
2237: PPUSH
2238: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2242: LD_EXP 15
2246: PPUSH
2247: LD_INT 4
2249: PPUSH
2250: LD_INT 0
2252: PPUSH
2253: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2257: LD_EXP 16
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2272: LD_EXP 15
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2287: LD_EXP 16
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: LD_INT 80
2297: PPUSH
2298: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2302: LD_EXP 16
2306: PPUSH
2307: LD_INT 3
2309: PPUSH
2310: LD_INT 20
2312: PPUSH
2313: CALL_OW 291
// end ;
2317: LD_VAR 0 1
2321: RET
// export function PowellSupport2 ; var veh , un ; begin
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
// uc_side = 1 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// uc_nation = 1 ;
2335: LD_ADDR_OWVAR 21
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2343: LD_ADDR_OWVAR 37
2347: PUSH
2348: LD_INT 2
2350: ST_TO_ADDR
// vc_engine = 3 ;
2351: LD_ADDR_OWVAR 39
2355: PUSH
2356: LD_INT 3
2358: ST_TO_ADDR
// vc_control = 3 ;
2359: LD_ADDR_OWVAR 38
2363: PUSH
2364: LD_INT 3
2366: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2367: LD_ADDR_OWVAR 40
2371: PUSH
2372: LD_INT 3
2374: ST_TO_ADDR
// veh = CreateVehicle ;
2375: LD_ADDR_VAR 0 2
2379: PUSH
2380: CALL_OW 45
2384: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2385: LD_VAR 0 2
2389: PPUSH
2390: LD_INT 4
2392: PPUSH
2393: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_INT 4
2404: PPUSH
2405: LD_INT 0
2407: PPUSH
2408: CALL_OW 49
// vc_control = 1 ;
2412: LD_ADDR_OWVAR 38
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2420: LD_ADDR_OWVAR 37
2424: PUSH
2425: LD_INT 2
2427: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 5
2435: ST_TO_ADDR
// veh = CreateVehicle ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: CALL_OW 45
2445: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 4
2453: PPUSH
2454: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_INT 4
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2473: LD_STRING 11_Bobby
2475: PPUSH
2476: CALL_OW 28
2480: PUSH
2481: LD_INT 1
2483: EQUAL
2484: IFFALSE 2530
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2486: LD_ADDR_EXP 4
2490: PUSH
2491: LD_STRING 11_Bobby
2493: PPUSH
2494: LD_INT 1
2496: PPUSH
2497: CALL 13306 0 2
2501: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2502: LD_EXP 4
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2514: LD_EXP 4
2518: PPUSH
2519: LD_VAR 0 2
2523: PPUSH
2524: CALL_OW 52
// end else
2528: GO 2548
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2530: LD_INT 0
2532: PPUSH
2533: LD_VAR 0 2
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: CALL 1232 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2548: LD_STRING 11_Houten
2550: PPUSH
2551: CALL_OW 28
2555: PUSH
2556: LD_INT 1
2558: EQUAL
2559: IFFALSE 2606
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2561: LD_ADDR_EXP 9
2565: PUSH
2566: LD_STRING 11_Houten
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL 13306 0 2
2576: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2577: LD_EXP 9
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2589: LD_EXP 9
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// end else
2604: GO 2622
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: LD_INT 1
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL 1232 0 4
// end ; vc_control = 3 ;
2622: LD_ADDR_OWVAR 38
2626: PUSH
2627: LD_INT 3
2629: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2630: LD_ADDR_OWVAR 40
2634: PUSH
2635: LD_INT 12
2637: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2638: LD_ADDR_EXP 17
2642: PUSH
2643: CALL_OW 45
2647: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2648: LD_EXP 17
2652: PPUSH
2653: LD_INT 4
2655: PPUSH
2656: CALL_OW 233
// amCargo4 = CreateVehicle ;
2660: LD_ADDR_EXP 18
2664: PUSH
2665: CALL_OW 45
2669: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2670: LD_EXP 18
2674: PPUSH
2675: LD_INT 4
2677: PPUSH
2678: CALL_OW 233
// amCargo5 = CreateVehicle ;
2682: LD_ADDR_EXP 19
2686: PUSH
2687: CALL_OW 45
2691: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2692: LD_EXP 19
2696: PPUSH
2697: LD_INT 4
2699: PPUSH
2700: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2704: LD_EXP 17
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2719: LD_EXP 18
2723: PPUSH
2724: LD_INT 4
2726: PPUSH
2727: LD_INT 0
2729: PPUSH
2730: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_INT 4
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// if kurtStatus > 0 then
2749: LD_EXP 27
2753: PUSH
2754: LD_INT 0
2756: GREATER
2757: IFFALSE 2806
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2759: LD_EXP 17
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2774: LD_EXP 18
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: LD_INT 100
2784: PPUSH
2785: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2789: LD_EXP 19
2793: PPUSH
2794: LD_INT 3
2796: PPUSH
2797: LD_INT 80
2799: PPUSH
2800: CALL_OW 291
// end else
2804: GO 2851
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2806: LD_EXP 17
2810: PPUSH
2811: LD_INT 1
2813: PPUSH
2814: LD_INT 100
2816: PPUSH
2817: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2821: LD_EXP 18
2825: PPUSH
2826: LD_INT 3
2828: PPUSH
2829: LD_INT 60
2831: PPUSH
2832: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2836: LD_EXP 19
2840: PPUSH
2841: LD_INT 3
2843: PPUSH
2844: LD_INT 100
2846: PPUSH
2847: CALL_OW 291
// end ; end ;
2851: LD_VAR 0 1
2855: RET
// export function PowellSupport3 ; var veh , un ; begin
2856: LD_INT 0
2858: PPUSH
2859: PPUSH
2860: PPUSH
// uc_side = 1 ;
2861: LD_ADDR_OWVAR 20
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// uc_nation = 1 ;
2869: LD_ADDR_OWVAR 21
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2877: LD_INT 4
2879: PPUSH
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: CALL 1232 0 4
// vc_chassis = us_medium_wheeled ;
2893: LD_ADDR_OWVAR 37
2897: PUSH
2898: LD_INT 2
2900: ST_TO_ADDR
// vc_engine = 3 ;
2901: LD_ADDR_OWVAR 39
2905: PUSH
2906: LD_INT 3
2908: ST_TO_ADDR
// vc_control = 3 ;
2909: LD_ADDR_OWVAR 38
2913: PUSH
2914: LD_INT 3
2916: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2917: LD_ADDR_OWVAR 40
2921: PUSH
2922: LD_INT 12
2924: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2925: LD_ADDR_EXP 20
2929: PUSH
2930: CALL_OW 45
2934: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2935: LD_ADDR_EXP 21
2939: PUSH
2940: CALL_OW 45
2944: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2945: LD_EXP 20
2949: PPUSH
2950: LD_INT 4
2952: PPUSH
2953: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2957: LD_EXP 21
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2969: LD_EXP 20
2973: PPUSH
2974: LD_INT 4
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2984: LD_EXP 21
2988: PPUSH
2989: LD_INT 4
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2999: LD_EXP 20
3003: PPUSH
3004: LD_INT 1
3006: PPUSH
3007: LD_INT 100
3009: PPUSH
3010: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3014: LD_EXP 21
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 100
3024: PPUSH
3025: CALL_OW 291
// end ; end_of_file
3029: LD_VAR 0 1
3033: RET
// export function PrepareRussianCommander ; begin
3034: LD_INT 0
3036: PPUSH
// uc_side = 3 ;
3037: LD_ADDR_OWVAR 20
3041: PUSH
3042: LD_INT 3
3044: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3045: LD_ADDR_EXP 23
3049: PUSH
3050: LD_STRING Davidov
3052: PPUSH
3053: LD_INT 0
3055: PPUSH
3056: CALL 13306 0 2
3060: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3061: LD_EXP 23
3065: PPUSH
3066: LD_INT 3
3068: PPUSH
3069: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3073: LD_ADDR_EXP 35
3077: PUSH
3078: LD_EXP 35
3082: PUSH
3083: LD_EXP 23
3087: ADD
3088: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3089: LD_EXP 35
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: CALL_OW 336
// end ;
3101: LD_VAR 0 1
3105: RET
// export function PrepareEastBase ; var i , un ; begin
3106: LD_INT 0
3108: PPUSH
3109: PPUSH
3110: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3111: LD_INT 3
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 121
3119: PPUSH
3120: LD_EXP 37
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 12
3134: PPUSH
3135: LD_INT 1
3137: PPUSH
3138: LD_INT 3
3140: PPUSH
3141: CALL 14087 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3145: LD_INT 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 121
3153: PPUSH
3154: LD_EXP 37
3158: PPUSH
3159: LD_EXP 38
3163: PPUSH
3164: CALL_OW 12
3168: PPUSH
3169: LD_INT 9
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: CALL 14087 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_EXP 37
3192: PPUSH
3193: LD_EXP 38
3197: PPUSH
3198: CALL_OW 12
3202: PPUSH
3203: LD_INT 2
3205: PPUSH
3206: LD_INT 6
3208: PPUSH
3209: CALL 14087 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: LD_INT 112
3221: PPUSH
3222: LD_EXP 37
3226: PPUSH
3227: LD_EXP 38
3231: PPUSH
3232: CALL_OW 12
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 6
3242: PPUSH
3243: CALL 14087 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 3
3252: PPUSH
3253: LD_INT 47
3255: PPUSH
3256: LD_EXP 37
3260: PPUSH
3261: LD_EXP 38
3265: PPUSH
3266: CALL_OW 12
3270: PPUSH
3271: LD_INT 4
3273: PPUSH
3274: LD_INT 6
3276: PPUSH
3277: CALL 14087 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3281: LD_INT 3
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 129
3289: PPUSH
3290: LD_EXP 37
3294: PPUSH
3295: LD_EXP 38
3299: PPUSH
3300: CALL_OW 12
3304: PPUSH
3305: LD_INT 4
3307: PPUSH
3308: LD_INT 6
3310: PPUSH
3311: CALL 14087 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3315: LD_INT 3
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: LD_INT 135
3323: PPUSH
3324: LD_EXP 37
3328: PPUSH
3329: LD_EXP 38
3333: PPUSH
3334: CALL_OW 12
3338: PPUSH
3339: LD_INT 4
3341: PPUSH
3342: LD_INT 6
3344: PPUSH
3345: CALL 14087 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 3
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 30
3366: PUSH
3367: LD_INT 32
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 69
3382: PUSH
3383: FOR_IN
3384: IFFALSE 3424
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3386: LD_INT 3
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: LD_VAR 0 2
3396: PPUSH
3397: LD_EXP 37
3401: PPUSH
3402: LD_EXP 38
3406: PPUSH
3407: CALL_OW 12
3411: PPUSH
3412: LD_INT 1
3414: PPUSH
3415: LD_INT 1
3417: PPUSH
3418: CALL 14087 0 6
3422: GO 3383
3424: POP
3425: POP
// for i = 1 to 5 do
3426: LD_ADDR_VAR 0 2
3430: PUSH
3431: DOUBLE
3432: LD_INT 1
3434: DEC
3435: ST_TO_ADDR
3436: LD_INT 5
3438: PUSH
3439: FOR_TO
3440: IFFALSE 3539
// begin uc_side = 3 ;
3442: LD_ADDR_OWVAR 20
3446: PUSH
3447: LD_INT 3
3449: ST_TO_ADDR
// uc_nation = 3 ;
3450: LD_ADDR_OWVAR 21
3454: PUSH
3455: LD_INT 3
3457: ST_TO_ADDR
// hc_gallery =  ;
3458: LD_ADDR_OWVAR 33
3462: PUSH
3463: LD_STRING 
3465: ST_TO_ADDR
// hc_name =  ;
3466: LD_ADDR_OWVAR 26
3470: PUSH
3471: LD_STRING 
3473: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 4
3479: PPUSH
3480: LD_EXP 37
3484: PPUSH
3485: LD_EXP 38
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 380
// un = CreateHuman ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3509: LD_VAR 0 3
3513: PPUSH
3514: LD_INT 3
3516: PPUSH
3517: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3521: LD_ADDR_EXP 35
3525: PUSH
3526: LD_EXP 35
3530: PUSH
3531: LD_VAR 0 3
3535: ADD
3536: ST_TO_ADDR
// end ;
3537: GO 3439
3539: POP
3540: POP
// end ;
3541: LD_VAR 0 1
3545: RET
// export function PrepareWestBase ; var i , un ; begin
3546: LD_INT 0
3548: PPUSH
3549: PPUSH
3550: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3551: LD_INT 3
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 6
3559: PPUSH
3560: LD_EXP 37
3564: PPUSH
3565: LD_EXP 38
3569: PPUSH
3570: CALL_OW 12
3574: PPUSH
3575: LD_INT 2
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: CALL 14087 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3585: LD_INT 3
3587: PPUSH
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 91
3593: PPUSH
3594: LD_EXP 37
3598: PPUSH
3599: LD_EXP 38
3603: PPUSH
3604: CALL_OW 12
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: LD_INT 3
3614: PPUSH
3615: CALL 14087 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3619: LD_INT 3
3621: PPUSH
3622: LD_INT 3
3624: PPUSH
3625: LD_INT 21
3627: PPUSH
3628: LD_EXP 37
3632: PPUSH
3633: LD_EXP 38
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: LD_INT 6
3648: PPUSH
3649: CALL 14087 0 6
// end ;
3653: LD_VAR 0 1
3657: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3658: LD_INT 0
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
// uc_side = 3 ;
3664: LD_ADDR_OWVAR 20
3668: PUSH
3669: LD_INT 3
3671: ST_TO_ADDR
// uc_nation = 3 ;
3672: LD_ADDR_OWVAR 21
3676: PUSH
3677: LD_INT 3
3679: ST_TO_ADDR
// for i = 1 to 5 do
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: DOUBLE
3686: LD_INT 1
3688: DEC
3689: ST_TO_ADDR
3690: LD_INT 5
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3764
// begin hc_gallery =  ;
3696: LD_ADDR_OWVAR 33
3700: PUSH
3701: LD_STRING 
3703: ST_TO_ADDR
// hc_name =  ;
3704: LD_ADDR_OWVAR 26
3708: PUSH
3709: LD_STRING 
3711: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3712: LD_INT 0
3714: PPUSH
3715: LD_INT 9
3717: PPUSH
3718: LD_EXP 37
3722: PPUSH
3723: LD_EXP 38
3727: PPUSH
3728: CALL_OW 12
3732: PPUSH
3733: CALL_OW 380
// un = CreateHuman ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: CALL_OW 44
3746: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3747: LD_VAR 0 3
3751: PPUSH
3752: LD_INT 8
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: CALL_OW 49
// end ;
3762: GO 3693
3764: POP
3765: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3766: LD_ADDR_VAR 0 2
3770: PUSH
3771: DOUBLE
3772: LD_INT 1
3774: DEC
3775: ST_TO_ADDR
3776: LD_INT 2
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_OWVAR 67
3794: ARRAY
3795: PUSH
3796: FOR_TO
3797: IFFALSE 3867
// begin hc_gallery =  ;
3799: LD_ADDR_OWVAR 33
3803: PUSH
3804: LD_STRING 
3806: ST_TO_ADDR
// hc_name =  ;
3807: LD_ADDR_OWVAR 26
3811: PUSH
3812: LD_STRING 
3814: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3815: LD_INT 0
3817: PPUSH
3818: LD_INT 4
3820: PPUSH
3821: LD_EXP 37
3825: PPUSH
3826: LD_EXP 38
3830: PPUSH
3831: CALL_OW 12
3835: PPUSH
3836: CALL_OW 380
// un = CreateHuman ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: CALL_OW 44
3849: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: LD_INT 8
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 49
// end ;
3865: GO 3796
3867: POP
3868: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: PUSH
3893: LD_OWVAR 67
3897: ARRAY
3898: PUSH
3899: FOR_TO
3900: IFFALSE 4096
// begin vc_engine = 3 ;
3902: LD_ADDR_OWVAR 39
3906: PUSH
3907: LD_INT 3
3909: ST_TO_ADDR
// vc_control = 1 ;
3910: LD_ADDR_OWVAR 38
3914: PUSH
3915: LD_INT 1
3917: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3918: LD_ADDR_OWVAR 40
3922: PUSH
3923: LD_INT 42
3925: PUSH
3926: LD_INT 43
3928: PUSH
3929: LD_INT 44
3931: PUSH
3932: LD_INT 45
3934: PUSH
3935: LD_INT 46
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: CALL_OW 12
3955: ARRAY
3956: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3957: LD_OWVAR 40
3961: PUSH
3962: LD_INT 46
3964: EQUAL
3965: IFFALSE 3977
// vc_chassis = ru_heavy_tracked else
3967: LD_ADDR_OWVAR 37
3971: PUSH
3972: LD_INT 24
3974: ST_TO_ADDR
3975: GO 4004
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3977: LD_ADDR_OWVAR 37
3981: PUSH
3982: LD_INT 22
3984: PUSH
3985: LD_INT 21
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ARRAY
4003: ST_TO_ADDR
// veh = CreateVehicle ;
4004: LD_ADDR_VAR 0 4
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4026: LD_VAR 0 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 49
// hc_gallery =  ;
4041: LD_ADDR_OWVAR 33
4045: PUSH
4046: LD_STRING 
4048: ST_TO_ADDR
// hc_name =  ;
4049: LD_ADDR_OWVAR 26
4053: PUSH
4054: LD_STRING 
4056: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 380
// un = CreateHuman ;
4070: LD_ADDR_VAR 0 3
4074: PUSH
4075: CALL_OW 44
4079: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_VAR 0 4
4089: PPUSH
4090: CALL_OW 52
// end ;
4094: GO 3899
4096: POP
4097: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4098: LD_ADDR_VAR 0 2
4102: PUSH
4103: DOUBLE
4104: LD_INT 1
4106: DEC
4107: ST_TO_ADDR
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_OWVAR 67
4126: ARRAY
4127: PUSH
4128: FOR_TO
4129: IFFALSE 4276
// begin vc_engine = 3 ;
4131: LD_ADDR_OWVAR 39
4135: PUSH
4136: LD_INT 3
4138: ST_TO_ADDR
// vc_control = 3 ;
4139: LD_ADDR_OWVAR 38
4143: PUSH
4144: LD_INT 3
4146: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4147: LD_ADDR_OWVAR 40
4151: PUSH
4152: LD_INT 42
4154: PUSH
4155: LD_INT 43
4157: PUSH
4158: LD_INT 44
4160: PUSH
4161: LD_INT 45
4163: PUSH
4164: LD_INT 46
4166: PUSH
4167: LD_INT 49
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 5
4183: PPUSH
4184: CALL_OW 12
4188: ARRAY
4189: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4190: LD_OWVAR 40
4194: PUSH
4195: LD_INT 46
4197: EQUAL
4198: IFFALSE 4210
// vc_chassis = ru_heavy_tracked else
4200: LD_ADDR_OWVAR 37
4204: PUSH
4205: LD_INT 24
4207: ST_TO_ADDR
4208: GO 4237
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4210: LD_ADDR_OWVAR 37
4214: PUSH
4215: LD_INT 22
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: CALL_OW 12
4235: ARRAY
4236: ST_TO_ADDR
// veh = CreateVehicle ;
4237: LD_ADDR_VAR 0 4
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4247: LD_VAR 0 4
4251: PPUSH
4252: LD_INT 3
4254: PPUSH
4255: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_INT 6
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 49
// end ;
4274: GO 4128
4276: POP
4277: POP
// end ; end_of_file
4278: LD_VAR 0 1
4282: RET
// export function PrepareKurt ; begin
4283: LD_INT 0
4285: PPUSH
// uc_side = 8 ;
4286: LD_ADDR_OWVAR 20
4290: PUSH
4291: LD_INT 8
4293: ST_TO_ADDR
// uc_nation = 2 ;
4294: LD_ADDR_OWVAR 21
4298: PUSH
4299: LD_INT 2
4301: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4302: LD_ADDR_OWVAR 37
4306: PUSH
4307: LD_INT 13
4309: ST_TO_ADDR
// vc_engine = 1 ;
4310: LD_ADDR_OWVAR 39
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// vc_control = 1 ;
4318: LD_ADDR_OWVAR 38
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// vc_weapon = 24 ;
4326: LD_ADDR_OWVAR 40
4330: PUSH
4331: LD_INT 24
4333: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4334: LD_ADDR_EXP 26
4338: PUSH
4339: CALL_OW 45
4343: ST_TO_ADDR
// if kurtStatus > 0 then
4344: LD_EXP 27
4348: PUSH
4349: LD_INT 0
4351: GREATER
4352: IFFALSE 4401
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4354: LD_ADDR_EXP 24
4358: PUSH
4359: LD_STRING Kurt
4361: PPUSH
4362: LD_INT 0
4364: PPUSH
4365: CALL 13306 0 2
4369: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4370: LD_EXP 26
4374: PPUSH
4375: LD_INT 4
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4385: LD_EXP 24
4389: PPUSH
4390: LD_EXP 26
4394: PPUSH
4395: CALL_OW 52
// end else
4399: GO 4478
// begin hc_name =  ;
4401: LD_ADDR_OWVAR 26
4405: PUSH
4406: LD_STRING 
4408: ST_TO_ADDR
// hc_gallery =  ;
4409: LD_ADDR_OWVAR 33
4413: PUSH
4414: LD_STRING 
4416: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4417: LD_INT 1
4419: PPUSH
4420: LD_INT 10
4422: PPUSH
4423: CALL_OW 381
// otherKurt = CreateHuman ;
4427: LD_ADDR_EXP 25
4431: PUSH
4432: CALL_OW 44
4436: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4437: LD_EXP 26
4441: PPUSH
4442: LD_INT 4
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4452: LD_EXP 25
4456: PPUSH
4457: LD_EXP 26
4461: PPUSH
4462: CALL_OW 52
// SaveCharacters ( otherKurt , AltKurt ) ;
4466: LD_EXP 25
4470: PPUSH
4471: LD_STRING AltKurt
4473: PPUSH
4474: CALL_OW 38
// end ; end ;
4478: LD_VAR 0 1
4482: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4483: LD_INT 0
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// for i = 1 to 3 do
4489: LD_ADDR_VAR 0 2
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_INT 3
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4624
// begin uc_side = 1 ;
4505: LD_ADDR_OWVAR 20
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// uc_nation = 2 ;
4513: LD_ADDR_OWVAR 21
4517: PUSH
4518: LD_INT 2
4520: ST_TO_ADDR
// hc_gallery =  ;
4521: LD_ADDR_OWVAR 33
4525: PUSH
4526: LD_STRING 
4528: ST_TO_ADDR
// hc_name =  ;
4529: LD_ADDR_OWVAR 26
4533: PUSH
4534: LD_STRING 
4536: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4537: LD_EXP 27
4541: PUSH
4542: LD_INT 0
4544: EQUAL
4545: PUSH
4546: LD_EXP 27
4550: PUSH
4551: LD_INT 2
4553: EQUAL
4554: OR
4555: IFFALSE 4572
// PrepareHuman ( false , 1 , 6 ) else
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_INT 6
4565: PPUSH
4566: CALL_OW 380
4570: GO 4585
// PrepareHuman ( false , 1 , 8 ) ;
4572: LD_INT 0
4574: PPUSH
4575: LD_INT 1
4577: PPUSH
4578: LD_INT 8
4580: PPUSH
4581: CALL_OW 380
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 4
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: CALL_OW 49
// end ;
4622: GO 4502
4624: POP
4625: POP
// vc_chassis = 14 ;
4626: LD_ADDR_OWVAR 37
4630: PUSH
4631: LD_INT 14
4633: ST_TO_ADDR
// vc_engine = 3 ;
4634: LD_ADDR_OWVAR 39
4638: PUSH
4639: LD_INT 3
4641: ST_TO_ADDR
// vc_control = 1 ;
4642: LD_ADDR_OWVAR 38
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4650: LD_ADDR_OWVAR 40
4654: PUSH
4655: LD_INT 27
4657: PUSH
4658: LD_INT 26
4660: PUSH
4661: LD_INT 28
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_INT 3
4674: PPUSH
4675: CALL_OW 12
4679: ARRAY
4680: ST_TO_ADDR
// veh = CreateVehicle ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: CALL_OW 45
4690: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4691: LD_VAR 0 4
4695: PPUSH
4696: LD_INT 4
4698: PPUSH
4699: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4718: LD_EXP 27
4722: PUSH
4723: LD_INT 0
4725: EQUAL
4726: PUSH
4727: LD_EXP 27
4731: PUSH
4732: LD_INT 2
4734: EQUAL
4735: OR
4736: IFFALSE 4753
// PrepareHuman ( false , 3 , 6 ) else
4738: LD_INT 0
4740: PPUSH
4741: LD_INT 3
4743: PPUSH
4744: LD_INT 6
4746: PPUSH
4747: CALL_OW 380
4751: GO 4766
// PrepareHuman ( false , 3 , 8 ) ;
4753: LD_INT 0
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: LD_INT 8
4761: PPUSH
4762: CALL_OW 380
// un = CreateHuman ;
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: CALL_OW 44
4775: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4776: LD_VAR 0 3
4780: PPUSH
4781: LD_VAR 0 4
4785: PPUSH
4786: CALL_OW 52
// vc_chassis = 14 ;
4790: LD_ADDR_OWVAR 37
4794: PUSH
4795: LD_INT 14
4797: ST_TO_ADDR
// vc_engine = 3 ;
4798: LD_ADDR_OWVAR 39
4802: PUSH
4803: LD_INT 3
4805: ST_TO_ADDR
// vc_control = 1 ;
4806: LD_ADDR_OWVAR 38
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4814: LD_ADDR_OWVAR 40
4818: PUSH
4819: LD_INT 27
4821: PUSH
4822: LD_INT 26
4824: PUSH
4825: LD_INT 28
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: CALL_OW 12
4843: ARRAY
4844: ST_TO_ADDR
// veh = CreateVehicle ;
4845: LD_ADDR_VAR 0 4
4849: PUSH
4850: CALL_OW 45
4854: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4855: LD_VAR 0 4
4859: PPUSH
4860: LD_INT 4
4862: PPUSH
4863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4867: LD_VAR 0 4
4871: PPUSH
4872: LD_INT 4
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 0
4889: EQUAL
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 2
4898: EQUAL
4899: OR
4900: IFFALSE 4917
// PrepareHuman ( false , 4 , 6 ) else
4902: LD_INT 0
4904: PPUSH
4905: LD_INT 4
4907: PPUSH
4908: LD_INT 6
4910: PPUSH
4911: CALL_OW 380
4915: GO 4930
// PrepareHuman ( false , 4 , 8 ) ;
4917: LD_INT 0
4919: PPUSH
4920: LD_INT 4
4922: PPUSH
4923: LD_INT 8
4925: PPUSH
4926: CALL_OW 380
// un = CreateHuman ;
4930: LD_ADDR_VAR 0 3
4934: PUSH
4935: CALL_OW 44
4939: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4940: LD_VAR 0 3
4944: PPUSH
4945: LD_INT 4
4947: PPUSH
4948: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4952: LD_VAR 0 3
4956: PPUSH
4957: LD_VAR 0 4
4961: PPUSH
4962: CALL_OW 52
// vc_chassis = 14 ;
4966: LD_ADDR_OWVAR 37
4970: PUSH
4971: LD_INT 14
4973: ST_TO_ADDR
// vc_engine = 3 ;
4974: LD_ADDR_OWVAR 39
4978: PUSH
4979: LD_INT 3
4981: ST_TO_ADDR
// vc_control = 1 ;
4982: LD_ADDR_OWVAR 38
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4990: LD_ADDR_OWVAR 40
4994: PUSH
4995: LD_INT 27
4997: PUSH
4998: LD_INT 26
5000: PUSH
5001: LD_INT 28
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: PUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: CALL_OW 12
5019: ARRAY
5020: ST_TO_ADDR
// veh = CreateVehicle ;
5021: LD_ADDR_VAR 0 4
5025: PUSH
5026: CALL_OW 45
5030: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5031: LD_VAR 0 4
5035: PPUSH
5036: LD_INT 4
5038: PPUSH
5039: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5043: LD_VAR 0 4
5047: PPUSH
5048: LD_INT 4
5050: PPUSH
5051: LD_INT 0
5053: PPUSH
5054: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5058: LD_EXP 27
5062: PUSH
5063: LD_INT 0
5065: EQUAL
5066: PUSH
5067: LD_EXP 27
5071: PUSH
5072: LD_INT 2
5074: EQUAL
5075: OR
5076: IFFALSE 5093
// PrepareHuman ( false , 2 , 4 ) else
5078: LD_INT 0
5080: PPUSH
5081: LD_INT 2
5083: PPUSH
5084: LD_INT 4
5086: PPUSH
5087: CALL_OW 380
5091: GO 5106
// PrepareHuman ( false , 2 , 8 ) ;
5093: LD_INT 0
5095: PPUSH
5096: LD_INT 2
5098: PPUSH
5099: LD_INT 8
5101: PPUSH
5102: CALL_OW 380
// un = CreateHuman ;
5106: LD_ADDR_VAR 0 3
5110: PUSH
5111: CALL_OW 44
5115: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5116: LD_VAR 0 3
5120: PPUSH
5121: LD_INT 4
5123: PPUSH
5124: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_VAR 0 4
5137: PPUSH
5138: CALL_OW 52
// end ;
5142: LD_VAR 0 1
5146: RET
// export function PrepareAttackLegion ; var i , un ; begin
5147: LD_INT 0
5149: PPUSH
5150: PPUSH
5151: PPUSH
// for i = 1 to 4 do
5152: LD_ADDR_VAR 0 2
5156: PUSH
5157: DOUBLE
5158: LD_INT 1
5160: DEC
5161: ST_TO_ADDR
5162: LD_INT 4
5164: PUSH
5165: FOR_TO
5166: IFFALSE 5276
// begin uc_side = 8 ;
5168: LD_ADDR_OWVAR 20
5172: PUSH
5173: LD_INT 8
5175: ST_TO_ADDR
// uc_nation = 2 ;
5176: LD_ADDR_OWVAR 21
5180: PUSH
5181: LD_INT 2
5183: ST_TO_ADDR
// hc_gallery =  ;
5184: LD_ADDR_OWVAR 33
5188: PUSH
5189: LD_STRING 
5191: ST_TO_ADDR
// hc_name =  ;
5192: LD_ADDR_OWVAR 26
5196: PUSH
5197: LD_STRING 
5199: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5200: LD_INT 0
5202: PPUSH
5203: LD_INT 1
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: LD_INT 1
5215: PPUSH
5216: LD_INT 2
5218: PPUSH
5219: CALL_OW 12
5223: ARRAY
5224: PPUSH
5225: LD_INT 6
5227: PPUSH
5228: LD_INT 8
5230: PPUSH
5231: CALL_OW 12
5235: PPUSH
5236: CALL_OW 380
// un = CreateHuman ;
5240: LD_ADDR_VAR 0 3
5244: PUSH
5245: CALL_OW 44
5249: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_INT 19
5257: PPUSH
5258: LD_INT 0
5260: PPUSH
5261: CALL_OW 49
// ComCrawl ( un ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: CALL_OW 137
// end ;
5274: GO 5165
5276: POP
5277: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5278: LD_INT 1
5280: PPUSH
5281: LD_INT 8
5283: PPUSH
5284: LD_INT 2
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5294: LD_INT 20
5296: PPUSH
5297: LD_INT 3
5299: PPUSH
5300: CALL 16788 0 2
// end ; end_of_file
5304: LD_VAR 0 1
5308: RET
// every 1 do var i ;
5309: GO 5311
5311: DISABLE
5312: LD_INT 0
5314: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5315: LD_INT 10
5317: PPUSH
5318: LD_INT 122
5320: PPUSH
5321: LD_INT 145
5323: PPUSH
5324: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5328: LD_INT 137
5330: PPUSH
5331: LD_INT 84
5333: PPUSH
5334: LD_INT 61
5336: PPUSH
5337: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5341: LD_EXP 1
5345: PPUSH
5346: CALL_OW 310
5350: PPUSH
5351: CALL_OW 87
// InGameOn ;
5355: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5359: LD_INT 22
5361: PUSH
5362: LD_INT 1
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 69
5373: PPUSH
5374: LD_INT 130
5376: PPUSH
5377: LD_INT 103
5379: PPUSH
5380: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_INT 114
5391: PPUSH
5392: LD_INT 102
5394: PPUSH
5395: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5399: LD_EXP 1
5403: PPUSH
5404: LD_STRING D1-JMM-1
5406: PPUSH
5407: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5411: LD_EXP 1
5415: PPUSH
5416: CALL_OW 310
5420: PPUSH
5421: CALL_OW 87
// if IsOk ( Donaldson ) then
5425: LD_EXP 3
5429: PPUSH
5430: CALL_OW 302
5434: IFFALSE 5514
// begin Say ( Donaldson , D1-Don-1 ) ;
5436: LD_EXP 3
5440: PPUSH
5441: LD_STRING D1-Don-1
5443: PPUSH
5444: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5448: LD_EXP 1
5452: PPUSH
5453: CALL_OW 310
5457: PPUSH
5458: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5462: LD_EXP 1
5466: PPUSH
5467: LD_STRING D1-JMM-2
5469: PPUSH
5470: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5474: LD_EXP 1
5478: PPUSH
5479: CALL_OW 310
5483: PPUSH
5484: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5488: LD_EXP 3
5492: PPUSH
5493: LD_STRING D1-Don-2
5495: PPUSH
5496: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5500: LD_EXP 1
5504: PPUSH
5505: CALL_OW 310
5509: PPUSH
5510: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5514: LD_INT 22
5516: PUSH
5517: LD_INT 1
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 69
5528: PPUSH
5529: LD_INT 110
5531: PPUSH
5532: LD_INT 101
5534: PPUSH
5535: CALL_OW 171
// wait ( 0 0$1 ) ;
5539: LD_INT 35
5541: PPUSH
5542: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5546: LD_EXP 1
5550: PPUSH
5551: CALL_OW 310
5555: PPUSH
5556: CALL_OW 87
// wait ( 0 0$1 ) ;
5560: LD_INT 35
5562: PPUSH
5563: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5567: LD_EXP 1
5571: PPUSH
5572: CALL_OW 310
5576: PPUSH
5577: CALL_OW 87
// wait ( 0 0$1 ) ;
5581: LD_INT 35
5583: PPUSH
5584: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5588: LD_EXP 1
5592: PPUSH
5593: CALL_OW 310
5597: PPUSH
5598: CALL_OW 87
// wait ( 0 0$1 ) ;
5602: LD_INT 35
5604: PPUSH
5605: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5609: LD_EXP 1
5613: PPUSH
5614: CALL_OW 310
5618: PPUSH
5619: CALL_OW 87
// end ;
5623: PPOPN 1
5625: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 102
5631: PPUSH
5632: LD_INT 94
5634: PPUSH
5635: CALL_OW 293
5639: IFFALSE 5830
5641: GO 5643
5643: DISABLE
5644: LD_INT 0
5646: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5647: LD_INT 102
5649: PPUSH
5650: LD_INT 94
5652: PPUSH
5653: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5657: LD_INT 22
5659: PUSH
5660: LD_INT 1
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 26
5669: PUSH
5670: LD_INT 1
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 2
5679: PUSH
5680: LD_INT 25
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 25
5692: PUSH
5693: LD_INT 2
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 25
5702: PUSH
5703: LD_INT 3
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: LD_INT 25
5712: PUSH
5713: LD_INT 4
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 25
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 25
5732: PUSH
5733: LD_INT 8
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: PPUSH
5759: LD_STRING D1-Sol1-2
5761: PPUSH
5762: LD_STRING 
5764: PPUSH
5765: CALL 13403 0 3
// Say ( JMM , D1-JMM-3 ) ;
5769: LD_EXP 1
5773: PPUSH
5774: LD_STRING D1-JMM-3
5776: PPUSH
5777: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5781: LD_STRING M1
5783: PPUSH
5784: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 22
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PPUSH
5803: CALL_OW 69
5807: PUSH
5808: FOR_IN
5809: IFFALSE 5828
// ComMoveXY ( i , 95 , 84 ) ;
5811: LD_VAR 0 1
5815: PPUSH
5816: LD_INT 95
5818: PPUSH
5819: LD_INT 84
5821: PPUSH
5822: CALL_OW 111
5826: GO 5808
5828: POP
5829: POP
// end ;
5830: PPOPN 1
5832: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5833: GO 5835
5835: DISABLE
5836: LD_INT 0
5838: PPUSH
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5842: LD_ADDR_VAR 0 2
5846: PUSH
5847: LD_INT 8
5849: PPUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 3
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 9
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 70
5878: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5879: LD_ADDR_VAR 0 3
5883: PUSH
5884: LD_INT 22
5886: PUSH
5887: LD_INT 1
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: EMPTY
5895: LIST
5896: PPUSH
5897: CALL_OW 69
5901: ST_TO_ADDR
// enable ;
5902: ENABLE
// for i in your_units do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: FOR_IN
5914: IFFALSE 6562
// begin if See ( 3 , i ) then
5916: LD_INT 3
5918: PPUSH
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 292
5928: IFFALSE 6560
// begin disable ;
5930: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5931: LD_VAR 0 2
5935: PPUSH
5936: LD_INT 96
5938: PPUSH
5939: LD_INT 85
5941: PPUSH
5942: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5946: LD_VAR 0 2
5950: PPUSH
5951: LD_INT 96
5953: PPUSH
5954: LD_INT 85
5956: PPUSH
5957: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5961: LD_VAR 0 2
5965: PPUSH
5966: LD_INT 96
5968: PPUSH
5969: LD_INT 85
5971: PPUSH
5972: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_INT 96
5983: PPUSH
5984: LD_INT 85
5986: PPUSH
5987: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 96
5998: PPUSH
5999: LD_INT 85
6001: PPUSH
6002: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
6021: LD_EXP 1
6025: PPUSH
6026: LD_STRING D1a-JMM-1
6028: PPUSH
6029: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6033: LD_EXP 3
6037: PPUSH
6038: LD_STRING D1a-Don-1
6040: PPUSH
6041: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6045: LD_ADDR_VAR 0 1
6049: PUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 1
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PPUSH
6060: CALL_OW 69
6064: PUSH
6065: FOR_IN
6066: IFFALSE 6085
// ComMoveXY ( i , 109 , 102 ) ;
6068: LD_VAR 0 1
6072: PPUSH
6073: LD_INT 109
6075: PPUSH
6076: LD_INT 102
6078: PPUSH
6079: CALL_OW 111
6083: GO 6065
6085: POP
6086: POP
// Say ( JMM , D1a-JMM-2 ) ;
6087: LD_EXP 1
6091: PPUSH
6092: LD_STRING D1a-JMM-2
6094: PPUSH
6095: CALL_OW 88
// wait ( 0 0$10 ) ;
6099: LD_INT 350
6101: PPUSH
6102: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6106: LD_EXP 1
6110: PPUSH
6111: CALL_OW 310
6115: PPUSH
6116: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6120: LD_EXP 3
6124: PPUSH
6125: LD_STRING D1b-Don-1
6127: PPUSH
6128: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D1b-JMM-1
6139: PPUSH
6140: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6144: LD_INT 22
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: LD_INT 26
6156: PUSH
6157: LD_INT 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: LD_INT 25
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 25
6179: PUSH
6180: LD_INT 2
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PUSH
6187: LD_INT 25
6189: PUSH
6190: LD_INT 3
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 25
6199: PUSH
6200: LD_INT 4
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 25
6209: PUSH
6210: LD_INT 5
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: LD_INT 25
6219: PUSH
6220: LD_INT 8
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PPUSH
6246: LD_STRING D1b-Sol1-1
6248: PPUSH
6249: LD_STRING 
6251: PPUSH
6252: CALL 13403 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6256: LD_EXP 3
6260: PPUSH
6261: LD_STRING D1b-Don-2
6263: PPUSH
6264: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6268: LD_EXP 1
6272: PPUSH
6273: LD_STRING D1b-JMM-2
6275: PPUSH
6276: CALL_OW 88
// dec = ShowQuery1 ;
6280: LD_ADDR_VAR 0 4
6284: PUSH
6285: CALL 13939 0 0
6289: ST_TO_ADDR
// if dec = 1 then
6290: LD_VAR 0 4
6294: PUSH
6295: LD_INT 1
6297: EQUAL
6298: IFFALSE 6404
// begin Say ( JMM , D2-JMM-1 ) ;
6300: LD_EXP 1
6304: PPUSH
6305: LD_STRING D2-JMM-1
6307: PPUSH
6308: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6312: LD_EXP 22
6316: PPUSH
6317: LD_STRING D2-Pow-1
6319: PPUSH
6320: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6324: LD_EXP 1
6328: PPUSH
6329: LD_STRING D2a-JMM-1
6331: PPUSH
6332: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6336: LD_EXP 22
6340: PPUSH
6341: LD_STRING D2a-Pow-1
6343: PPUSH
6344: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6348: LD_EXP 1
6352: PPUSH
6353: LD_STRING D2a-JMM-2
6355: PPUSH
6356: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6360: LD_EXP 22
6364: PPUSH
6365: LD_STRING D2a-Pow-2
6367: PPUSH
6368: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6372: LD_EXP 1
6376: PPUSH
6377: LD_STRING D2a-JMM-3
6379: PPUSH
6380: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6384: LD_EXP 22
6388: PPUSH
6389: LD_STRING D2a-Pow-3
6391: PPUSH
6392: CALL_OW 94
// secondPass = 2 ;
6396: LD_ADDR_EXP 28
6400: PUSH
6401: LD_INT 2
6403: ST_TO_ADDR
// end ; if dec = 2 then
6404: LD_VAR 0 4
6408: PUSH
6409: LD_INT 2
6411: EQUAL
6412: IFFALSE 6506
// begin Say ( JMM , D2-JMM-1 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D2-JMM-1
6421: PPUSH
6422: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6426: LD_EXP 22
6430: PPUSH
6431: LD_STRING D2-Pow-1
6433: PPUSH
6434: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6438: LD_EXP 1
6442: PPUSH
6443: LD_STRING D2b-JMM-1
6445: PPUSH
6446: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6450: LD_EXP 22
6454: PPUSH
6455: LD_STRING D2b-Pow-1
6457: PPUSH
6458: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6462: LD_EXP 1
6466: PPUSH
6467: LD_STRING D2c-JMM-1
6469: PPUSH
6470: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6474: LD_EXP 22
6478: PPUSH
6479: LD_STRING D2c-Pow-1
6481: PPUSH
6482: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6486: LD_EXP 1
6490: PPUSH
6491: LD_STRING D2c-JMM-2
6493: PPUSH
6494: CALL_OW 88
// secondPass = 2 ;
6498: LD_ADDR_EXP 28
6502: PUSH
6503: LD_INT 2
6505: ST_TO_ADDR
// end ; if dec = 3 then
6506: LD_VAR 0 4
6510: PUSH
6511: LD_INT 3
6513: EQUAL
6514: IFFALSE 6524
// secondPass = 1 ;
6516: LD_ADDR_EXP 28
6520: PUSH
6521: LD_INT 1
6523: ST_TO_ADDR
// InGameOff ;
6524: CALL_OW 9
// ruAI = 1 ;
6528: LD_ADDR_EXP 42
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6536: LD_INT 1
6538: PPUSH
6539: LD_INT 3
6541: PPUSH
6542: LD_INT 2
6544: PPUSH
6545: LD_INT 1
6547: PPUSH
6548: CALL_OW 80
// SaveForQuickRestart ;
6552: CALL_OW 22
// exit ;
6556: POP
6557: POP
6558: GO 6564
// end ; end ;
6560: GO 5913
6562: POP
6563: POP
// end ;
6564: PPOPN 4
6566: END
// every 1 1$0 trigger secondPass = 2 do
6567: LD_EXP 28
6571: PUSH
6572: LD_INT 2
6574: EQUAL
6575: IFFALSE 6702
6577: GO 6579
6579: DISABLE
// begin PowellSupport1 ;
6580: CALL 1863 0 0
// DialogueOn ;
6584: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6588: LD_EXP 1
6592: PPUSH
6593: LD_STRING DC1-JMM-1
6595: PPUSH
6596: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6600: LD_EXP 22
6604: PPUSH
6605: LD_STRING DC1-Pow-1
6607: PPUSH
6608: CALL_OW 94
// DialogueOff ;
6612: CALL_OW 7
// wait ( 3 3$0 ) ;
6616: LD_INT 6300
6618: PPUSH
6619: CALL_OW 67
// PowellSupport2 ;
6623: CALL 2322 0 0
// DialogueOn ;
6627: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6631: LD_EXP 1
6635: PPUSH
6636: LD_STRING DC2-JMM-1
6638: PPUSH
6639: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6643: LD_EXP 22
6647: PPUSH
6648: LD_STRING DC2-Pow-1
6650: PPUSH
6651: CALL_OW 94
// DialogueOff ;
6655: CALL_OW 7
// wait ( 6 6$0 ) ;
6659: LD_INT 12600
6661: PPUSH
6662: CALL_OW 67
// PowellSupport3 ;
6666: CALL 2856 0 0
// DialogueOn ;
6670: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6674: LD_EXP 22
6678: PPUSH
6679: LD_STRING DC3-Pow-1
6681: PPUSH
6682: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6686: LD_EXP 1
6690: PPUSH
6691: LD_STRING DC3-JMM-1
6693: PPUSH
6694: CALL_OW 88
// DialogueOff ;
6698: CALL_OW 7
// end ;
6702: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6703: LD_EXP 28
6707: PUSH
6708: LD_INT 2
6710: EQUAL
6711: PUSH
6712: LD_INT 22
6714: PUSH
6715: LD_INT 1
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 0
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PPUSH
6754: CALL_OW 69
6758: PUSH
6759: LD_INT 0
6761: GREATER
6762: AND
6763: IFFALSE 10131
6765: GO 6767
6767: DISABLE
6768: LD_INT 0
6770: PPUSH
6771: PPUSH
6772: PPUSH
6773: PPUSH
6774: PPUSH
6775: PPUSH
6776: PPUSH
6777: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6778: LD_ADDR_VAR 0 4
6782: PUSH
6783: LD_INT 22
6785: PUSH
6786: LD_INT 1
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 21
6795: PUSH
6796: LD_INT 3
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 2
6805: PUSH
6806: LD_INT 30
6808: PUSH
6809: LD_INT 0
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: ST_TO_ADDR
// for i in tmp do
6841: LD_ADDR_VAR 0 1
6845: PUSH
6846: LD_VAR 0 4
6850: PUSH
6851: FOR_IN
6852: IFFALSE 6885
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6854: LD_ADDR_VAR 0 6
6858: PUSH
6859: LD_VAR 0 6
6863: PUSH
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL_OW 274
6873: PPUSH
6874: LD_INT 1
6876: PPUSH
6877: CALL_OW 275
6881: PLUS
6882: ST_TO_ADDR
6883: GO 6851
6885: POP
6886: POP
// for i in tmp do
6887: LD_ADDR_VAR 0 1
6891: PUSH
6892: LD_VAR 0 4
6896: PUSH
6897: FOR_IN
6898: IFFALSE 6931
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6900: LD_ADDR_VAR 0 7
6904: PUSH
6905: LD_VAR 0 7
6909: PUSH
6910: LD_VAR 0 1
6914: PPUSH
6915: CALL_OW 274
6919: PPUSH
6920: LD_INT 2
6922: PPUSH
6923: CALL_OW 275
6927: PLUS
6928: ST_TO_ADDR
6929: GO 6897
6931: POP
6932: POP
// for i in tmp do
6933: LD_ADDR_VAR 0 1
6937: PUSH
6938: LD_VAR 0 4
6942: PUSH
6943: FOR_IN
6944: IFFALSE 6977
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6946: LD_ADDR_VAR 0 8
6950: PUSH
6951: LD_VAR 0 8
6955: PUSH
6956: LD_VAR 0 1
6960: PPUSH
6961: CALL_OW 274
6965: PPUSH
6966: LD_INT 3
6968: PPUSH
6969: CALL_OW 275
6973: PLUS
6974: ST_TO_ADDR
6975: GO 6943
6977: POP
6978: POP
// PrepareKurt ;
6979: CALL 4283 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6983: LD_EXP 26
6987: PPUSH
6988: LD_INT 144
6990: PPUSH
6991: LD_INT 111
6993: PPUSH
6994: CALL_OW 111
// wait ( 0 0$2 ) ;
6998: LD_INT 70
7000: PPUSH
7001: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
7005: LD_INT 8
7007: PPUSH
7008: LD_INT 1
7010: PPUSH
7011: CALL_OW 343
// if kurtStatus > 0 then
7015: LD_EXP 27
7019: PUSH
7020: LD_INT 0
7022: GREATER
7023: IFFALSE 8586
// begin ComExitVehicle ( Kurt ) ;
7025: LD_EXP 24
7029: PPUSH
7030: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7034: LD_EXP 24
7038: PPUSH
7039: CALL_OW 87
// wait ( 0 0$1 ) ;
7043: LD_INT 35
7045: PPUSH
7046: CALL_OW 67
// DialogueOn ;
7050: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7054: LD_INT 22
7056: PUSH
7057: LD_INT 1
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 26
7066: PUSH
7067: LD_INT 1
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 2
7076: PUSH
7077: LD_INT 25
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 2
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 25
7099: PUSH
7100: LD_INT 3
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 25
7109: PUSH
7110: LD_INT 4
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 25
7119: PUSH
7120: LD_INT 5
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 25
7129: PUSH
7130: LD_INT 8
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: PPUSH
7151: CALL_OW 69
7155: PPUSH
7156: LD_STRING D3-Sol1-1
7158: PPUSH
7159: LD_STRING 
7161: PPUSH
7162: CALL 13403 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7166: LD_EXP 24
7170: PPUSH
7171: LD_STRING D3-Kurt-1
7173: PPUSH
7174: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7178: LD_EXP 1
7182: PPUSH
7183: LD_STRING D3-JMM-1
7185: PPUSH
7186: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7190: LD_EXP 24
7194: PPUSH
7195: LD_STRING D3-Kurt-2
7197: PPUSH
7198: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7202: LD_EXP 1
7206: PPUSH
7207: LD_STRING D3-JMM-2
7209: PPUSH
7210: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7214: LD_EXP 24
7218: PPUSH
7219: LD_STRING D3-Kurt-4
7221: PPUSH
7222: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7226: LD_EXP 1
7230: PPUSH
7231: LD_STRING D3-JMM-4
7233: PPUSH
7234: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7238: LD_EXP 24
7242: PPUSH
7243: LD_STRING D3-Kurt-5
7245: PPUSH
7246: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7250: LD_EXP 24
7254: PPUSH
7255: LD_STRING D3-Kurt-5a
7257: PPUSH
7258: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7262: LD_VAR 0 6
7266: PUSH
7267: LD_INT 60
7269: GREATEREQUAL
7270: PUSH
7271: LD_VAR 0 8
7275: PUSH
7276: LD_INT 60
7278: GREATEREQUAL
7279: AND
7280: IFFALSE 7315
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7282: LD_ADDR_VAR 0 2
7286: PUSH
7287: LD_STRING Q2K
7289: PPUSH
7290: LD_INT 1
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 3
7298: PUSH
7299: LD_INT 4
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 98
7312: ST_TO_ADDR
7313: GO 7338
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7315: LD_ADDR_VAR 0 2
7319: PUSH
7320: LD_STRING Q2K
7322: PPUSH
7323: LD_INT 3
7325: PUSH
7326: LD_INT 4
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PPUSH
7333: CALL_OW 98
7337: ST_TO_ADDR
// if dec1 = 1 then
7338: LD_VAR 0 2
7342: PUSH
7343: LD_INT 1
7345: EQUAL
7346: IFFALSE 7380
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7348: LD_EXP 1
7352: PPUSH
7353: LD_STRING D3Ka-JMM-1
7355: PPUSH
7356: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7360: LD_EXP 24
7364: PPUSH
7365: LD_STRING D3Ka-Kurt-1
7367: PPUSH
7368: CALL_OW 88
// warWithLegion = 1 ;
7372: LD_ADDR_EXP 31
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// end ; if dec1 = 2 then
7380: LD_VAR 0 2
7384: PUSH
7385: LD_INT 2
7387: EQUAL
7388: IFFALSE 7614
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7390: LD_EXP 1
7394: PPUSH
7395: LD_STRING D3Kb-JMM-1
7397: PPUSH
7398: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7402: LD_EXP 24
7406: PPUSH
7407: LD_STRING D3Kb-Kurt-1
7409: PPUSH
7410: CALL_OW 88
// for i in tmp do
7414: LD_ADDR_VAR 0 1
7418: PUSH
7419: LD_VAR 0 4
7423: PUSH
7424: FOR_IN
7425: IFFALSE 7512
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7427: LD_ADDR_VAR 0 5
7431: PUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 274
7441: PPUSH
7442: LD_INT 1
7444: PPUSH
7445: CALL_OW 275
7449: ST_TO_ADDR
// if tmp2 >= 60 then
7450: LD_VAR 0 5
7454: PUSH
7455: LD_INT 60
7457: GREATEREQUAL
7458: IFFALSE 7490
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: CALL_OW 274
7469: PPUSH
7470: LD_INT 1
7472: PPUSH
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 60
7480: MINUS
7481: PPUSH
7482: CALL_OW 277
// break ;
7486: GO 7512
// end else
7488: GO 7510
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 274
7499: PPUSH
7500: LD_INT 1
7502: PPUSH
7503: LD_INT 0
7505: PPUSH
7506: CALL_OW 277
// end ; end ;
7510: GO 7424
7512: POP
7513: POP
// for i in tmp do
7514: LD_ADDR_VAR 0 1
7518: PUSH
7519: LD_VAR 0 4
7523: PUSH
7524: FOR_IN
7525: IFFALSE 7612
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7527: LD_ADDR_VAR 0 5
7531: PUSH
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 274
7541: PPUSH
7542: LD_INT 3
7544: PPUSH
7545: CALL_OW 275
7549: ST_TO_ADDR
// if tmp2 >= 60 then
7550: LD_VAR 0 5
7554: PUSH
7555: LD_INT 60
7557: GREATEREQUAL
7558: IFFALSE 7590
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: CALL_OW 274
7569: PPUSH
7570: LD_INT 3
7572: PPUSH
7573: LD_VAR 0 5
7577: PUSH
7578: LD_INT 60
7580: MINUS
7581: PPUSH
7582: CALL_OW 277
// break ;
7586: GO 7612
// end else
7588: GO 7610
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: CALL_OW 274
7599: PPUSH
7600: LD_INT 3
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 277
// end ; end ;
7610: GO 7524
7612: POP
7613: POP
// end ; if dec1 = 3 then
7614: LD_VAR 0 2
7618: PUSH
7619: LD_INT 3
7621: EQUAL
7622: IFFALSE 7857
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7624: LD_EXP 1
7628: PPUSH
7629: LD_STRING D3Kc1-JMM-1
7631: PPUSH
7632: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7636: LD_EXP 24
7640: PPUSH
7641: LD_STRING D3Kc1-Kurt-1
7643: PPUSH
7644: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7648: LD_EXP 1
7652: PPUSH
7653: LD_STRING D3Kc1-JMM-2
7655: PPUSH
7656: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7660: LD_EXP 24
7664: PPUSH
7665: LD_STRING D3Kc1-Kurt-2
7667: PPUSH
7668: CALL_OW 88
// askSiberite = 1 ;
7672: LD_ADDR_EXP 33
7676: PUSH
7677: LD_INT 1
7679: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7680: LD_ADDR_VAR 0 2
7684: PUSH
7685: LD_STRING Q2b
7687: PPUSH
7688: LD_INT 1
7690: PUSH
7691: LD_INT 2
7693: PUSH
7694: LD_INT 3
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 98
7706: ST_TO_ADDR
// if dec2 = 1 then
7707: LD_VAR 0 3
7711: PUSH
7712: LD_INT 1
7714: EQUAL
7715: IFFALSE 7749
// begin Say ( JMM , D4a-JMM-1 ) ;
7717: LD_EXP 1
7721: PPUSH
7722: LD_STRING D4a-JMM-1
7724: PPUSH
7725: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7729: LD_EXP 24
7733: PPUSH
7734: LD_STRING D4b-Kurt-1
7736: PPUSH
7737: CALL_OW 88
// warWithLegion = 1 ;
7741: LD_ADDR_EXP 31
7745: PUSH
7746: LD_INT 1
7748: ST_TO_ADDR
// end ; if dec2 = 2 then
7749: LD_VAR 0 3
7753: PUSH
7754: LD_INT 2
7756: EQUAL
7757: IFFALSE 7791
// begin Say ( JMM , D4b-JMM-1 ) ;
7759: LD_EXP 1
7763: PPUSH
7764: LD_STRING D4b-JMM-1
7766: PPUSH
7767: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7771: LD_EXP 24
7775: PPUSH
7776: LD_STRING D4b-Kurt-1
7778: PPUSH
7779: CALL_OW 88
// warWithLegion = 1 ;
7783: LD_ADDR_EXP 31
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// end ; if dec2 = 3 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 3
7798: EQUAL
7799: IFFALSE 7857
// begin Say ( JMM , D4c-JMM-1 ) ;
7801: LD_EXP 1
7805: PPUSH
7806: LD_STRING D4c-JMM-1
7808: PPUSH
7809: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7813: LD_EXP 24
7817: PPUSH
7818: LD_STRING D4c-Kurt-1
7820: PPUSH
7821: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7825: LD_EXP 1
7829: PPUSH
7830: LD_STRING D4c-JMM-2
7832: PPUSH
7833: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7837: LD_EXP 24
7841: PPUSH
7842: LD_STRING D4c-Kurt-2
7844: PPUSH
7845: CALL_OW 88
// fakeInfo = 1 ;
7849: LD_ADDR_EXP 32
7853: PUSH
7854: LD_INT 1
7856: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7857: LD_VAR 0 2
7861: PUSH
7862: LD_INT 4
7864: EQUAL
7865: IFFALSE 8522
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7867: LD_EXP 1
7871: PPUSH
7872: LD_STRING D3Kd-JMM-1
7874: PPUSH
7875: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7879: LD_VAR 0 6
7883: PUSH
7884: LD_INT 120
7886: GREATEREQUAL
7887: PUSH
7888: LD_VAR 0 8
7892: PUSH
7893: LD_INT 120
7895: GREATEREQUAL
7896: AND
7897: IFFALSE 7932
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7899: LD_ADDR_VAR 0 3
7903: PUSH
7904: LD_STRING Q2aK
7906: PPUSH
7907: LD_INT 1
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 3
7915: PUSH
7916: LD_INT 4
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: PPUSH
7925: CALL_OW 98
7929: ST_TO_ADDR
7930: GO 7955
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_STRING Q2K
7939: PPUSH
7940: LD_INT 1
7942: PUSH
7943: LD_INT 4
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PPUSH
7950: CALL_OW 98
7954: ST_TO_ADDR
// if dec2 = 1 then
7955: LD_VAR 0 3
7959: PUSH
7960: LD_INT 1
7962: EQUAL
7963: IFFALSE 7997
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7965: LD_EXP 1
7969: PPUSH
7970: LD_STRING D5Ka-JMM-1
7972: PPUSH
7973: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7977: LD_EXP 24
7981: PPUSH
7982: LD_STRING D5Ka-Kurt-1
7984: PPUSH
7985: CALL_OW 88
// warWithLegion = 1 ;
7989: LD_ADDR_EXP 31
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// end ; if dec2 = 2 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 2
8004: EQUAL
8005: IFFALSE 8031
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8007: LD_EXP 1
8011: PPUSH
8012: LD_STRING D3Kb-JMM-1
8014: PPUSH
8015: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8019: LD_EXP 24
8023: PPUSH
8024: LD_STRING D3Kb-Kurt-1
8026: PPUSH
8027: CALL_OW 88
// end ; if dec2 = 3 then
8031: LD_VAR 0 3
8035: PUSH
8036: LD_INT 3
8038: EQUAL
8039: IFFALSE 8269
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8041: LD_EXP 1
8045: PPUSH
8046: LD_STRING D3Ke-JMM-1
8048: PPUSH
8049: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8053: LD_EXP 24
8057: PPUSH
8058: LD_STRING D3Ke-Kurt-1
8060: PPUSH
8061: CALL_OW 88
// PrepareLegionForPlayer ;
8065: CALL 4483 0 0
// for i in tmp do
8069: LD_ADDR_VAR 0 1
8073: PUSH
8074: LD_VAR 0 4
8078: PUSH
8079: FOR_IN
8080: IFFALSE 8167
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8082: LD_ADDR_VAR 0 5
8086: PUSH
8087: LD_VAR 0 1
8091: PPUSH
8092: CALL_OW 274
8096: PPUSH
8097: LD_INT 1
8099: PPUSH
8100: CALL_OW 275
8104: ST_TO_ADDR
// if tmp2 >= 120 then
8105: LD_VAR 0 5
8109: PUSH
8110: LD_INT 120
8112: GREATEREQUAL
8113: IFFALSE 8145
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8115: LD_VAR 0 1
8119: PPUSH
8120: CALL_OW 274
8124: PPUSH
8125: LD_INT 1
8127: PPUSH
8128: LD_VAR 0 5
8132: PUSH
8133: LD_INT 120
8135: MINUS
8136: PPUSH
8137: CALL_OW 277
// break ;
8141: GO 8167
// end else
8143: GO 8165
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 274
8154: PPUSH
8155: LD_INT 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 277
// end ; end ;
8165: GO 8079
8167: POP
8168: POP
// for i in tmp do
8169: LD_ADDR_VAR 0 1
8173: PUSH
8174: LD_VAR 0 4
8178: PUSH
8179: FOR_IN
8180: IFFALSE 8267
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8182: LD_ADDR_VAR 0 5
8186: PUSH
8187: LD_VAR 0 1
8191: PPUSH
8192: CALL_OW 274
8196: PPUSH
8197: LD_INT 3
8199: PPUSH
8200: CALL_OW 275
8204: ST_TO_ADDR
// if tmp2 >= 120 then
8205: LD_VAR 0 5
8209: PUSH
8210: LD_INT 120
8212: GREATEREQUAL
8213: IFFALSE 8245
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8215: LD_VAR 0 1
8219: PPUSH
8220: CALL_OW 274
8224: PPUSH
8225: LD_INT 3
8227: PPUSH
8228: LD_VAR 0 5
8232: PUSH
8233: LD_INT 120
8235: MINUS
8236: PPUSH
8237: CALL_OW 277
// break ;
8241: GO 8267
// end else
8243: GO 8265
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 274
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: LD_INT 0
8260: PPUSH
8261: CALL_OW 277
// end ; end ;
8265: GO 8179
8267: POP
8268: POP
// end ; if dec2 = 4 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 4
8276: EQUAL
8277: IFFALSE 8522
// begin if dec1 = 3 then
8279: LD_VAR 0 2
8283: PUSH
8284: LD_INT 3
8286: EQUAL
8287: IFFALSE 8522
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8289: LD_EXP 1
8293: PPUSH
8294: LD_STRING D3Kc1-JMM-1
8296: PPUSH
8297: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8301: LD_EXP 24
8305: PPUSH
8306: LD_STRING D3Kc1-Kurt-1
8308: PPUSH
8309: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8313: LD_EXP 1
8317: PPUSH
8318: LD_STRING D3Kc1-JMM-2
8320: PPUSH
8321: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8325: LD_EXP 24
8329: PPUSH
8330: LD_STRING D3Kc1-Kurt-2
8332: PPUSH
8333: CALL_OW 88
// askSiberite = 1 ;
8337: LD_ADDR_EXP 33
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_STRING Q2b
8352: PPUSH
8353: LD_INT 1
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: LD_INT 3
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 98
8371: ST_TO_ADDR
// if dec2 = 1 then
8372: LD_VAR 0 3
8376: PUSH
8377: LD_INT 1
8379: EQUAL
8380: IFFALSE 8414
// begin Say ( JMM , D4a-JMM-1 ) ;
8382: LD_EXP 1
8386: PPUSH
8387: LD_STRING D4a-JMM-1
8389: PPUSH
8390: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8394: LD_EXP 24
8398: PPUSH
8399: LD_STRING D4b-Kurt-1
8401: PPUSH
8402: CALL_OW 88
// warWithLegion = 1 ;
8406: LD_ADDR_EXP 31
8410: PUSH
8411: LD_INT 1
8413: ST_TO_ADDR
// end ; if dec2 = 2 then
8414: LD_VAR 0 3
8418: PUSH
8419: LD_INT 2
8421: EQUAL
8422: IFFALSE 8456
// begin Say ( JMM , D4b-JMM-1 ) ;
8424: LD_EXP 1
8428: PPUSH
8429: LD_STRING D4b-JMM-1
8431: PPUSH
8432: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8436: LD_EXP 24
8440: PPUSH
8441: LD_STRING D4b-Kurt-1
8443: PPUSH
8444: CALL_OW 88
// warWithLegion = 1 ;
8448: LD_ADDR_EXP 31
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// end ; if dec2 = 3 then
8456: LD_VAR 0 3
8460: PUSH
8461: LD_INT 3
8463: EQUAL
8464: IFFALSE 8522
// begin Say ( JMM , D4c-JMM-1 ) ;
8466: LD_EXP 1
8470: PPUSH
8471: LD_STRING D4c-JMM-1
8473: PPUSH
8474: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8478: LD_EXP 24
8482: PPUSH
8483: LD_STRING D4c-Kurt-1
8485: PPUSH
8486: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8490: LD_EXP 1
8494: PPUSH
8495: LD_STRING D4c-JMM-2
8497: PPUSH
8498: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8502: LD_EXP 24
8506: PPUSH
8507: LD_STRING D4c-Kurt-2
8509: PPUSH
8510: CALL_OW 88
// fakeInfo = 1 ;
8514: LD_ADDR_EXP 32
8518: PUSH
8519: LD_INT 1
8521: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8522: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8526: LD_EXP 24
8530: PPUSH
8531: LD_EXP 26
8535: PPUSH
8536: CALL_OW 120
// wait ( 0 0$1 ) ;
8540: LD_INT 35
8542: PPUSH
8543: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8547: LD_EXP 26
8551: PPUSH
8552: LD_INT 4
8554: PPUSH
8555: CALL_OW 113
// wait ( 0 0$3 ) ;
8559: LD_INT 105
8561: PPUSH
8562: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8566: LD_EXP 24
8570: PPUSH
8571: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8575: LD_EXP 26
8579: PPUSH
8580: CALL_OW 64
// end else
8584: GO 10131
// begin ComExitVehicle ( otherKurt ) ;
8586: LD_EXP 25
8590: PPUSH
8591: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8595: LD_EXP 25
8599: PPUSH
8600: CALL_OW 87
// wait ( 0 0$1 ) ;
8604: LD_INT 35
8606: PPUSH
8607: CALL_OW 67
// DialogueOn ;
8611: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8615: LD_INT 22
8617: PUSH
8618: LD_INT 1
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: LD_INT 26
8627: PUSH
8628: LD_INT 1
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: LD_INT 2
8637: PUSH
8638: LD_INT 25
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 25
8650: PUSH
8651: LD_INT 2
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 25
8660: PUSH
8661: LD_INT 3
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 25
8670: PUSH
8671: LD_INT 4
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 25
8680: PUSH
8681: LD_INT 5
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 8
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: PPUSH
8712: CALL_OW 69
8716: PPUSH
8717: LD_STRING D3-Sol1-1
8719: PPUSH
8720: LD_STRING 
8722: PPUSH
8723: CALL 13403 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8727: LD_EXP 25
8731: PPUSH
8732: LD_STRING D3-Kurt-1
8734: PPUSH
8735: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8739: LD_EXP 1
8743: PPUSH
8744: LD_STRING D3-JMM-1
8746: PPUSH
8747: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8751: LD_EXP 25
8755: PPUSH
8756: LD_STRING D3-Kurt-3
8758: PPUSH
8759: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8763: LD_EXP 1
8767: PPUSH
8768: LD_STRING D3-JMM-3
8770: PPUSH
8771: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8775: LD_EXP 25
8779: PPUSH
8780: LD_STRING D3-Kurt-5
8782: PPUSH
8783: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8787: LD_EXP 25
8791: PPUSH
8792: LD_STRING D3-Kurt-5b
8794: PPUSH
8795: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8799: LD_VAR 0 6
8803: PUSH
8804: LD_INT 100
8806: GREATEREQUAL
8807: PUSH
8808: LD_VAR 0 8
8812: PUSH
8813: LD_INT 100
8815: GREATEREQUAL
8816: AND
8817: IFFALSE 8852
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8819: LD_ADDR_VAR 0 2
8823: PUSH
8824: LD_STRING Q2
8826: PPUSH
8827: LD_INT 1
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: LD_INT 4
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: PPUSH
8845: CALL_OW 98
8849: ST_TO_ADDR
8850: GO 8875
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8852: LD_ADDR_VAR 0 2
8856: PUSH
8857: LD_STRING Q2
8859: PPUSH
8860: LD_INT 3
8862: PUSH
8863: LD_INT 4
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PPUSH
8870: CALL_OW 98
8874: ST_TO_ADDR
// if dec1 = 1 then
8875: LD_VAR 0 2
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 8917
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8885: LD_EXP 1
8889: PPUSH
8890: LD_STRING D3Ka-JMM-1
8892: PPUSH
8893: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8897: LD_EXP 25
8901: PPUSH
8902: LD_STRING D3Ka-Kurt-1
8904: PPUSH
8905: CALL_OW 88
// warWithLegion = 1 ;
8909: LD_ADDR_EXP 31
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
// end ; if dec1 = 2 then
8917: LD_VAR 0 2
8921: PUSH
8922: LD_INT 2
8924: EQUAL
8925: IFFALSE 9151
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8927: LD_EXP 1
8931: PPUSH
8932: LD_STRING D3Kb-JMM-1
8934: PPUSH
8935: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8939: LD_EXP 25
8943: PPUSH
8944: LD_STRING D3Kb-Kurt-1
8946: PPUSH
8947: CALL_OW 88
// for i in tmp do
8951: LD_ADDR_VAR 0 1
8955: PUSH
8956: LD_VAR 0 4
8960: PUSH
8961: FOR_IN
8962: IFFALSE 9049
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8964: LD_ADDR_VAR 0 5
8968: PUSH
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 274
8978: PPUSH
8979: LD_INT 1
8981: PPUSH
8982: CALL_OW 275
8986: ST_TO_ADDR
// if tmp2 >= 100 then
8987: LD_VAR 0 5
8991: PUSH
8992: LD_INT 100
8994: GREATEREQUAL
8995: IFFALSE 9027
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8997: LD_VAR 0 1
9001: PPUSH
9002: CALL_OW 274
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_VAR 0 5
9014: PUSH
9015: LD_INT 100
9017: MINUS
9018: PPUSH
9019: CALL_OW 277
// break ;
9023: GO 9049
// end else
9025: GO 9047
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9027: LD_VAR 0 1
9031: PPUSH
9032: CALL_OW 274
9036: PPUSH
9037: LD_INT 1
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 277
// end ; end ;
9047: GO 8961
9049: POP
9050: POP
// for i in tmp do
9051: LD_ADDR_VAR 0 1
9055: PUSH
9056: LD_VAR 0 4
9060: PUSH
9061: FOR_IN
9062: IFFALSE 9149
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9064: LD_ADDR_VAR 0 5
9068: PUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 274
9078: PPUSH
9079: LD_INT 3
9081: PPUSH
9082: CALL_OW 275
9086: ST_TO_ADDR
// if tmp2 >= 100 then
9087: LD_VAR 0 5
9091: PUSH
9092: LD_INT 100
9094: GREATEREQUAL
9095: IFFALSE 9127
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 274
9106: PPUSH
9107: LD_INT 3
9109: PPUSH
9110: LD_VAR 0 5
9114: PUSH
9115: LD_INT 100
9117: MINUS
9118: PPUSH
9119: CALL_OW 277
// break ;
9123: GO 9149
// end else
9125: GO 9147
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9127: LD_VAR 0 1
9131: PPUSH
9132: CALL_OW 274
9136: PPUSH
9137: LD_INT 3
9139: PPUSH
9140: LD_INT 0
9142: PPUSH
9143: CALL_OW 277
// end ; end ;
9147: GO 9061
9149: POP
9150: POP
// end ; if dec1 = 3 then
9151: LD_VAR 0 2
9155: PUSH
9156: LD_INT 3
9158: EQUAL
9159: IFFALSE 9394
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9161: LD_EXP 1
9165: PPUSH
9166: LD_STRING D3Kc1-JMM-1
9168: PPUSH
9169: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9173: LD_EXP 25
9177: PPUSH
9178: LD_STRING D3Kc1-Kurt-1
9180: PPUSH
9181: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9185: LD_EXP 1
9189: PPUSH
9190: LD_STRING D3Kc1-JMM-2
9192: PPUSH
9193: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9197: LD_EXP 25
9201: PPUSH
9202: LD_STRING D3Kc1-Kurt-2
9204: PPUSH
9205: CALL_OW 88
// askSiberite = 1 ;
9209: LD_ADDR_EXP 33
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9217: LD_ADDR_VAR 0 2
9221: PUSH
9222: LD_STRING Q2b
9224: PPUSH
9225: LD_INT 1
9227: PUSH
9228: LD_INT 2
9230: PUSH
9231: LD_INT 3
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: LIST
9238: PPUSH
9239: CALL_OW 98
9243: ST_TO_ADDR
// if dec2 = 1 then
9244: LD_VAR 0 3
9248: PUSH
9249: LD_INT 1
9251: EQUAL
9252: IFFALSE 9286
// begin Say ( JMM , D4a-JMM-1 ) ;
9254: LD_EXP 1
9258: PPUSH
9259: LD_STRING D4a-JMM-1
9261: PPUSH
9262: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9266: LD_EXP 25
9270: PPUSH
9271: LD_STRING D4b-Kurt-1
9273: PPUSH
9274: CALL_OW 88
// warWithLegion = 1 ;
9278: LD_ADDR_EXP 31
9282: PUSH
9283: LD_INT 1
9285: ST_TO_ADDR
// end ; if dec2 = 2 then
9286: LD_VAR 0 3
9290: PUSH
9291: LD_INT 2
9293: EQUAL
9294: IFFALSE 9328
// begin Say ( JMM , D4b-JMM-1 ) ;
9296: LD_EXP 1
9300: PPUSH
9301: LD_STRING D4b-JMM-1
9303: PPUSH
9304: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9308: LD_EXP 25
9312: PPUSH
9313: LD_STRING D4b-Kurt-1
9315: PPUSH
9316: CALL_OW 88
// warWithLegion = 1 ;
9320: LD_ADDR_EXP 31
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// end ; if dec2 = 3 then
9328: LD_VAR 0 3
9332: PUSH
9333: LD_INT 3
9335: EQUAL
9336: IFFALSE 9394
// begin Say ( JMM , D4c-JMM-1 ) ;
9338: LD_EXP 1
9342: PPUSH
9343: LD_STRING D4c-JMM-1
9345: PPUSH
9346: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9350: LD_EXP 25
9354: PPUSH
9355: LD_STRING D4c-Kurt-1
9357: PPUSH
9358: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9362: LD_EXP 1
9366: PPUSH
9367: LD_STRING D4c-JMM-2
9369: PPUSH
9370: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9374: LD_EXP 25
9378: PPUSH
9379: LD_STRING D4c-Kurt-2
9381: PPUSH
9382: CALL_OW 88
// fakeInfo = 1 ;
9386: LD_ADDR_EXP 32
9390: PUSH
9391: LD_INT 1
9393: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9394: LD_VAR 0 2
9398: PUSH
9399: LD_INT 4
9401: EQUAL
9402: IFFALSE 10059
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9404: LD_EXP 1
9408: PPUSH
9409: LD_STRING D3Kd-JMM-1
9411: PPUSH
9412: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9416: LD_VAR 0 6
9420: PUSH
9421: LD_INT 200
9423: GREATEREQUAL
9424: PUSH
9425: LD_VAR 0 8
9429: PUSH
9430: LD_INT 200
9432: GREATEREQUAL
9433: AND
9434: IFFALSE 9469
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9436: LD_ADDR_VAR 0 3
9440: PUSH
9441: LD_STRING Q2a
9443: PPUSH
9444: LD_INT 1
9446: PUSH
9447: LD_INT 2
9449: PUSH
9450: LD_INT 3
9452: PUSH
9453: LD_INT 4
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: PPUSH
9462: CALL_OW 98
9466: ST_TO_ADDR
9467: GO 9492
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9469: LD_ADDR_VAR 0 3
9473: PUSH
9474: LD_STRING Q2a
9476: PPUSH
9477: LD_INT 1
9479: PUSH
9480: LD_INT 4
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 98
9491: ST_TO_ADDR
// if dec2 = 1 then
9492: LD_VAR 0 3
9496: PUSH
9497: LD_INT 1
9499: EQUAL
9500: IFFALSE 9534
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9502: LD_EXP 1
9506: PPUSH
9507: LD_STRING D5Ka-JMM-1
9509: PPUSH
9510: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9514: LD_EXP 25
9518: PPUSH
9519: LD_STRING D5Ka-Kurt-1
9521: PPUSH
9522: CALL_OW 88
// warWithLegion = 1 ;
9526: LD_ADDR_EXP 31
9530: PUSH
9531: LD_INT 1
9533: ST_TO_ADDR
// end ; if dec2 = 2 then
9534: LD_VAR 0 3
9538: PUSH
9539: LD_INT 2
9541: EQUAL
9542: IFFALSE 9568
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9544: LD_EXP 1
9548: PPUSH
9549: LD_STRING D3Kb-JMM-1
9551: PPUSH
9552: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9556: LD_EXP 25
9560: PPUSH
9561: LD_STRING D3Kb-Kurt-1
9563: PPUSH
9564: CALL_OW 88
// end ; if dec2 = 3 then
9568: LD_VAR 0 3
9572: PUSH
9573: LD_INT 3
9575: EQUAL
9576: IFFALSE 9806
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9578: LD_EXP 1
9582: PPUSH
9583: LD_STRING D3Ke-JMM-1
9585: PPUSH
9586: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9590: LD_EXP 25
9594: PPUSH
9595: LD_STRING D3Ke-Kurt-1
9597: PPUSH
9598: CALL_OW 88
// PrepareLegionForPlayer ;
9602: CALL 4483 0 0
// for i in tmp do
9606: LD_ADDR_VAR 0 1
9610: PUSH
9611: LD_VAR 0 4
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9704
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9619: LD_ADDR_VAR 0 5
9623: PUSH
9624: LD_VAR 0 1
9628: PPUSH
9629: CALL_OW 274
9633: PPUSH
9634: LD_INT 1
9636: PPUSH
9637: CALL_OW 275
9641: ST_TO_ADDR
// if tmp2 >= 200 then
9642: LD_VAR 0 5
9646: PUSH
9647: LD_INT 200
9649: GREATEREQUAL
9650: IFFALSE 9682
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9652: LD_VAR 0 1
9656: PPUSH
9657: CALL_OW 274
9661: PPUSH
9662: LD_INT 1
9664: PPUSH
9665: LD_VAR 0 5
9669: PUSH
9670: LD_INT 200
9672: MINUS
9673: PPUSH
9674: CALL_OW 277
// break ;
9678: GO 9704
// end else
9680: GO 9702
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9682: LD_VAR 0 1
9686: PPUSH
9687: CALL_OW 274
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: LD_INT 0
9697: PPUSH
9698: CALL_OW 277
// end ; end ;
9702: GO 9616
9704: POP
9705: POP
// for i in tmp do
9706: LD_ADDR_VAR 0 1
9710: PUSH
9711: LD_VAR 0 4
9715: PUSH
9716: FOR_IN
9717: IFFALSE 9804
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9719: LD_ADDR_VAR 0 5
9723: PUSH
9724: LD_VAR 0 1
9728: PPUSH
9729: CALL_OW 274
9733: PPUSH
9734: LD_INT 3
9736: PPUSH
9737: CALL_OW 275
9741: ST_TO_ADDR
// if tmp2 >= 200 then
9742: LD_VAR 0 5
9746: PUSH
9747: LD_INT 200
9749: GREATEREQUAL
9750: IFFALSE 9782
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 274
9761: PPUSH
9762: LD_INT 3
9764: PPUSH
9765: LD_VAR 0 5
9769: PUSH
9770: LD_INT 200
9772: MINUS
9773: PPUSH
9774: CALL_OW 277
// break ;
9778: GO 9804
// end else
9780: GO 9802
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9782: LD_VAR 0 1
9786: PPUSH
9787: CALL_OW 274
9791: PPUSH
9792: LD_INT 3
9794: PPUSH
9795: LD_INT 0
9797: PPUSH
9798: CALL_OW 277
// end ; end ;
9802: GO 9716
9804: POP
9805: POP
// end ; if dec2 = 4 then
9806: LD_VAR 0 3
9810: PUSH
9811: LD_INT 4
9813: EQUAL
9814: IFFALSE 10059
// begin if dec1 = 3 then
9816: LD_VAR 0 2
9820: PUSH
9821: LD_INT 3
9823: EQUAL
9824: IFFALSE 10059
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9826: LD_EXP 1
9830: PPUSH
9831: LD_STRING D3Kc1-JMM-1
9833: PPUSH
9834: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9838: LD_EXP 25
9842: PPUSH
9843: LD_STRING D3Kc1-Kurt-1
9845: PPUSH
9846: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9850: LD_EXP 1
9854: PPUSH
9855: LD_STRING D3Kc1-JMM-2
9857: PPUSH
9858: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9862: LD_EXP 25
9866: PPUSH
9867: LD_STRING D3Kc1-Kurt-2
9869: PPUSH
9870: CALL_OW 88
// askSiberite = 1 ;
9874: LD_ADDR_EXP 33
9878: PUSH
9879: LD_INT 1
9881: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9882: LD_ADDR_VAR 0 2
9886: PUSH
9887: LD_STRING Q2b
9889: PPUSH
9890: LD_INT 1
9892: PUSH
9893: LD_INT 2
9895: PUSH
9896: LD_INT 3
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PPUSH
9904: CALL_OW 98
9908: ST_TO_ADDR
// if dec2 = 1 then
9909: LD_VAR 0 3
9913: PUSH
9914: LD_INT 1
9916: EQUAL
9917: IFFALSE 9951
// begin Say ( JMM , D4a-JMM-1 ) ;
9919: LD_EXP 1
9923: PPUSH
9924: LD_STRING D4a-JMM-1
9926: PPUSH
9927: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9931: LD_EXP 25
9935: PPUSH
9936: LD_STRING D4b-Kurt-1
9938: PPUSH
9939: CALL_OW 88
// warWithLegion = 1 ;
9943: LD_ADDR_EXP 31
9947: PUSH
9948: LD_INT 1
9950: ST_TO_ADDR
// end ; if dec2 = 2 then
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 2
9958: EQUAL
9959: IFFALSE 9993
// begin Say ( JMM , D4b-JMM-1 ) ;
9961: LD_EXP 1
9965: PPUSH
9966: LD_STRING D4b-JMM-1
9968: PPUSH
9969: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9973: LD_EXP 25
9977: PPUSH
9978: LD_STRING D4b-Kurt-1
9980: PPUSH
9981: CALL_OW 88
// warWithLegion = 1 ;
9985: LD_ADDR_EXP 31
9989: PUSH
9990: LD_INT 1
9992: ST_TO_ADDR
// end ; if dec2 = 3 then
9993: LD_VAR 0 3
9997: PUSH
9998: LD_INT 3
10000: EQUAL
10001: IFFALSE 10059
// begin Say ( JMM , D4c-JMM-1 ) ;
10003: LD_EXP 1
10007: PPUSH
10008: LD_STRING D4c-JMM-1
10010: PPUSH
10011: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
10015: LD_EXP 25
10019: PPUSH
10020: LD_STRING D4c-Kurt-1
10022: PPUSH
10023: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
10027: LD_EXP 1
10031: PPUSH
10032: LD_STRING D4c-JMM-2
10034: PPUSH
10035: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
10039: LD_EXP 25
10043: PPUSH
10044: LD_STRING D4c-Kurt-2
10046: PPUSH
10047: CALL_OW 88
// fakeInfo = 1 ;
10051: LD_ADDR_EXP 32
10055: PUSH
10056: LD_INT 1
10058: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
10059: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
10063: LD_INT 8
10065: PPUSH
10066: LD_INT 8
10068: PPUSH
10069: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
10073: LD_EXP 25
10077: PPUSH
10078: LD_EXP 26
10082: PPUSH
10083: CALL_OW 120
// wait ( 0 0$1 ) ;
10087: LD_INT 35
10089: PPUSH
10090: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
10094: LD_EXP 26
10098: PPUSH
10099: LD_INT 4
10101: PPUSH
10102: CALL_OW 113
// wait ( 0 0$6 ) ;
10106: LD_INT 210
10108: PPUSH
10109: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10113: LD_EXP 25
10117: PPUSH
10118: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10122: LD_EXP 26
10126: PPUSH
10127: CALL_OW 64
// end ; end ;
10131: PPOPN 8
10133: END
// every 0 0$10 trigger warWithLegion = 1 do
10134: LD_EXP 31
10138: PUSH
10139: LD_INT 1
10141: EQUAL
10142: IFFALSE 10151
10144: GO 10146
10146: DISABLE
// PrepareAttackLegion ;
10147: CALL 5147 0 0
10151: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10152: LD_EXP 15
10156: PPUSH
10157: CALL_OW 305
10161: PUSH
10162: LD_EXP 15
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: CALL_OW 289
10174: NOT
10175: AND
10176: PUSH
10177: LD_EXP 15
10181: PPUSH
10182: LD_INT 2
10184: PPUSH
10185: CALL_OW 289
10189: NOT
10190: AND
10191: PUSH
10192: LD_EXP 15
10196: PPUSH
10197: LD_INT 3
10199: PPUSH
10200: CALL_OW 289
10204: NOT
10205: AND
10206: IFFALSE 10223
10208: GO 10210
10210: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10211: LD_EXP 15
10215: PPUSH
10216: LD_INT 4
10218: PPUSH
10219: CALL_OW 235
10223: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10224: LD_EXP 16
10228: PPUSH
10229: CALL_OW 305
10233: PUSH
10234: LD_EXP 16
10238: PPUSH
10239: LD_INT 1
10241: PPUSH
10242: CALL_OW 289
10246: NOT
10247: AND
10248: PUSH
10249: LD_EXP 16
10253: PPUSH
10254: LD_INT 2
10256: PPUSH
10257: CALL_OW 289
10261: NOT
10262: AND
10263: PUSH
10264: LD_EXP 16
10268: PPUSH
10269: LD_INT 3
10271: PPUSH
10272: CALL_OW 289
10276: NOT
10277: AND
10278: IFFALSE 10295
10280: GO 10282
10282: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10283: LD_EXP 16
10287: PPUSH
10288: LD_INT 4
10290: PPUSH
10291: CALL_OW 235
10295: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10296: LD_EXP 17
10300: PPUSH
10301: CALL_OW 305
10305: PUSH
10306: LD_EXP 17
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: CALL_OW 289
10318: NOT
10319: AND
10320: PUSH
10321: LD_EXP 17
10325: PPUSH
10326: LD_INT 2
10328: PPUSH
10329: CALL_OW 289
10333: NOT
10334: AND
10335: PUSH
10336: LD_EXP 17
10340: PPUSH
10341: LD_INT 3
10343: PPUSH
10344: CALL_OW 289
10348: NOT
10349: AND
10350: IFFALSE 10367
10352: GO 10354
10354: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10355: LD_EXP 17
10359: PPUSH
10360: LD_INT 4
10362: PPUSH
10363: CALL_OW 235
10367: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10368: LD_EXP 18
10372: PPUSH
10373: CALL_OW 305
10377: PUSH
10378: LD_EXP 18
10382: PPUSH
10383: LD_INT 1
10385: PPUSH
10386: CALL_OW 289
10390: NOT
10391: AND
10392: PUSH
10393: LD_EXP 18
10397: PPUSH
10398: LD_INT 2
10400: PPUSH
10401: CALL_OW 289
10405: NOT
10406: AND
10407: PUSH
10408: LD_EXP 18
10412: PPUSH
10413: LD_INT 3
10415: PPUSH
10416: CALL_OW 289
10420: NOT
10421: AND
10422: IFFALSE 10439
10424: GO 10426
10426: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10427: LD_EXP 18
10431: PPUSH
10432: LD_INT 4
10434: PPUSH
10435: CALL_OW 235
10439: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10440: LD_EXP 19
10444: PPUSH
10445: CALL_OW 305
10449: PUSH
10450: LD_EXP 19
10454: PPUSH
10455: LD_INT 1
10457: PPUSH
10458: CALL_OW 289
10462: NOT
10463: AND
10464: PUSH
10465: LD_EXP 19
10469: PPUSH
10470: LD_INT 2
10472: PPUSH
10473: CALL_OW 289
10477: NOT
10478: AND
10479: PUSH
10480: LD_EXP 19
10484: PPUSH
10485: LD_INT 3
10487: PPUSH
10488: CALL_OW 289
10492: NOT
10493: AND
10494: PUSH
10495: LD_EXP 19
10499: PPUSH
10500: LD_INT 2
10502: PPUSH
10503: CALL_OW 289
10507: NOT
10508: AND
10509: IFFALSE 10526
10511: GO 10513
10513: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10514: LD_EXP 19
10518: PPUSH
10519: LD_INT 4
10521: PPUSH
10522: CALL_OW 235
10526: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10527: LD_EXP 20
10531: PPUSH
10532: CALL_OW 305
10536: PUSH
10537: LD_EXP 20
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 289
10549: NOT
10550: AND
10551: PUSH
10552: LD_EXP 20
10556: PPUSH
10557: LD_INT 2
10559: PPUSH
10560: CALL_OW 289
10564: NOT
10565: AND
10566: PUSH
10567: LD_EXP 20
10571: PPUSH
10572: LD_INT 3
10574: PPUSH
10575: CALL_OW 289
10579: NOT
10580: AND
10581: IFFALSE 10598
10583: GO 10585
10585: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10586: LD_EXP 20
10590: PPUSH
10591: LD_INT 4
10593: PPUSH
10594: CALL_OW 235
10598: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10599: LD_EXP 21
10603: PPUSH
10604: CALL_OW 305
10608: PUSH
10609: LD_EXP 21
10613: PPUSH
10614: LD_INT 1
10616: PPUSH
10617: CALL_OW 289
10621: NOT
10622: AND
10623: PUSH
10624: LD_EXP 21
10628: PPUSH
10629: LD_INT 2
10631: PPUSH
10632: CALL_OW 289
10636: NOT
10637: AND
10638: PUSH
10639: LD_EXP 21
10643: PPUSH
10644: LD_INT 3
10646: PPUSH
10647: CALL_OW 289
10651: NOT
10652: AND
10653: IFFALSE 10670
10655: GO 10657
10657: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10658: LD_EXP 21
10662: PPUSH
10663: LD_INT 4
10665: PPUSH
10666: CALL_OW 235
10670: END
// every 0 0$1 do var i ;
10671: GO 10673
10673: DISABLE
10674: LD_INT 0
10676: PPUSH
// begin enable ;
10677: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10678: LD_ADDR_VAR 0 1
10682: PUSH
10683: LD_INT 22
10685: PUSH
10686: LD_INT 4
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 69
10697: PUSH
10698: FOR_IN
10699: IFFALSE 10738
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_INT 4
10708: PPUSH
10709: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10713: LD_VAR 0 1
10717: PPUSH
10718: LD_INT 4
10720: PPUSH
10721: CALL_OW 308
10725: IFFALSE 10736
// RemoveUnit ( i ) ;
10727: LD_VAR 0 1
10731: PPUSH
10732: CALL_OW 64
// end ;
10736: GO 10698
10738: POP
10739: POP
// end ;
10740: PPOPN 1
10742: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10743: LD_EXP 28
10747: PUSH
10748: LD_INT 1
10750: EQUAL
10751: IFFALSE 11190
10753: GO 10755
10755: DISABLE
10756: LD_INT 0
10758: PPUSH
10759: PPUSH
10760: PPUSH
// begin enable ;
10761: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10762: LD_ADDR_VAR 0 2
10766: PUSH
10767: LD_INT 12
10769: PPUSH
10770: LD_INT 22
10772: PUSH
10773: LD_INT 3
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 21
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PPUSH
10794: CALL_OW 70
10798: ST_TO_ADDR
// for i in enemyVehs do
10799: LD_ADDR_VAR 0 1
10803: PUSH
10804: LD_VAR 0 2
10808: PUSH
10809: FOR_IN
10810: IFFALSE 11188
// begin if See ( 1 , i ) then
10812: LD_INT 1
10814: PPUSH
10815: LD_VAR 0 1
10819: PPUSH
10820: CALL_OW 292
10824: IFFALSE 11186
// begin disable ;
10826: DISABLE
// DialogueOn ;
10827: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10840: LD_INT 22
10842: PUSH
10843: LD_INT 1
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 26
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 2
10862: PUSH
10863: LD_INT 25
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 25
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 25
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 25
10895: PUSH
10896: LD_INT 4
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 25
10905: PUSH
10906: LD_INT 5
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 25
10915: PUSH
10916: LD_INT 8
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: PPUSH
10937: CALL_OW 69
10941: PPUSH
10942: LD_STRING DT1-Sol1-1
10944: PPUSH
10945: LD_STRING DT1-FSol1-1
10947: PPUSH
10948: CALL 13403 0 3
// dec = ShowQuery2 ;
10952: LD_ADDR_VAR 0 3
10956: PUSH
10957: CALL 14013 0 0
10961: ST_TO_ADDR
// if dec = 1 then
10962: LD_VAR 0 3
10966: PUSH
10967: LD_INT 1
10969: EQUAL
10970: IFFALSE 11076
// begin Say ( JMM , D2-JMM-1 ) ;
10972: LD_EXP 1
10976: PPUSH
10977: LD_STRING D2-JMM-1
10979: PPUSH
10980: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10984: LD_EXP 22
10988: PPUSH
10989: LD_STRING D2-Pow-1
10991: PPUSH
10992: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10996: LD_EXP 1
11000: PPUSH
11001: LD_STRING D2a-JMM-1
11003: PPUSH
11004: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
11008: LD_EXP 22
11012: PPUSH
11013: LD_STRING D2a-Pow-1
11015: PPUSH
11016: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
11020: LD_EXP 1
11024: PPUSH
11025: LD_STRING D2a-JMM-2
11027: PPUSH
11028: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
11032: LD_EXP 22
11036: PPUSH
11037: LD_STRING D2a-Pow-2
11039: PPUSH
11040: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
11044: LD_EXP 1
11048: PPUSH
11049: LD_STRING D2a-JMM-3
11051: PPUSH
11052: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
11056: LD_EXP 22
11060: PPUSH
11061: LD_STRING D2a-Pow-3
11063: PPUSH
11064: CALL_OW 94
// secondPass = 2 ;
11068: LD_ADDR_EXP 28
11072: PUSH
11073: LD_INT 2
11075: ST_TO_ADDR
// end ; if dec = 2 then
11076: LD_VAR 0 3
11080: PUSH
11081: LD_INT 2
11083: EQUAL
11084: IFFALSE 11178
// begin Say ( JMM , D2-JMM-1 ) ;
11086: LD_EXP 1
11090: PPUSH
11091: LD_STRING D2-JMM-1
11093: PPUSH
11094: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11098: LD_EXP 22
11102: PPUSH
11103: LD_STRING D2-Pow-1
11105: PPUSH
11106: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11110: LD_EXP 1
11114: PPUSH
11115: LD_STRING D2b-JMM-1
11117: PPUSH
11118: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11122: LD_EXP 22
11126: PPUSH
11127: LD_STRING D2b-Pow-1
11129: PPUSH
11130: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11134: LD_EXP 1
11138: PPUSH
11139: LD_STRING D2c-JMM-1
11141: PPUSH
11142: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11146: LD_EXP 22
11150: PPUSH
11151: LD_STRING D2c-Pow-1
11153: PPUSH
11154: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11158: LD_EXP 1
11162: PPUSH
11163: LD_STRING D2c-JMM-2
11165: PPUSH
11166: CALL_OW 88
// secondPass = 2 ;
11170: LD_ADDR_EXP 28
11174: PUSH
11175: LD_INT 2
11177: ST_TO_ADDR
// end ; DialogueOff ;
11178: CALL_OW 7
// exit ;
11182: POP
11183: POP
11184: GO 11190
// end ; end ;
11186: GO 10809
11188: POP
11189: POP
// end ;
11190: PPOPN 3
11192: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11193: LD_EXP 29
11197: PUSH
11198: LD_INT 1
11200: EQUAL
11201: IFFALSE 11434
11203: GO 11205
11205: DISABLE
11206: LD_INT 0
11208: PPUSH
11209: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11210: LD_ADDR_VAR 0 2
11214: PUSH
11215: LD_INT 11
11217: PPUSH
11218: LD_INT 22
11220: PUSH
11221: LD_INT 3
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 24
11230: PUSH
11231: LD_INT 250
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 70
11246: ST_TO_ADDR
// enable ;
11247: ENABLE
// for i in vehicles do
11248: LD_ADDR_VAR 0 1
11252: PUSH
11253: LD_VAR 0 2
11257: PUSH
11258: FOR_IN
11259: IFFALSE 11432
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11261: LD_INT 1
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 292
11273: PUSH
11274: LD_EXP 29
11278: PUSH
11279: LD_INT 1
11281: EQUAL
11282: AND
11283: PUSH
11284: LD_EXP 30
11288: PUSH
11289: LD_INT 4
11291: LESSEQUAL
11292: AND
11293: IFFALSE 11430
// begin disable ;
11295: DISABLE
// DialogueOn ;
11296: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11300: LD_INT 22
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 26
11312: PUSH
11313: LD_INT 1
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 2
11322: PUSH
11323: LD_INT 25
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 25
11335: PUSH
11336: LD_INT 2
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 25
11345: PUSH
11346: LD_INT 3
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 25
11355: PUSH
11356: LD_INT 4
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 25
11365: PUSH
11366: LD_INT 5
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 8
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: LIST
11396: PPUSH
11397: CALL_OW 69
11401: PPUSH
11402: LD_STRING DT1-Sol1-1
11404: PPUSH
11405: LD_STRING DT1-FSol1-1
11407: PPUSH
11408: CALL 13403 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11412: LD_EXP 1
11416: PPUSH
11417: LD_STRING DT1-JMM-1
11419: PPUSH
11420: CALL_OW 88
// DialogueOff ;
11424: CALL_OW 7
// break ;
11428: GO 11432
// end ; end ;
11430: GO 11258
11432: POP
11433: POP
// end ;
11434: PPOPN 2
11436: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11437: LD_EXP 29
11441: PUSH
11442: LD_INT 1
11444: EQUAL
11445: PUSH
11446: LD_INT 11
11448: PPUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 3
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 24
11461: PUSH
11462: LD_INT 251
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 2
11471: PUSH
11472: LD_INT 21
11474: PUSH
11475: LD_INT 2
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 21
11484: PUSH
11485: LD_INT 1
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 70
11506: PUSH
11507: LD_INT 0
11509: EQUAL
11510: AND
11511: PUSH
11512: LD_EXP 30
11516: PUSH
11517: LD_INT 3
11519: PUSH
11520: LD_INT 3
11522: PUSH
11523: LD_INT 4
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: PUSH
11531: LD_OWVAR 67
11535: ARRAY
11536: LESSEQUAL
11537: AND
11538: PUSH
11539: LD_EXP 30
11543: PUSH
11544: LD_INT 5
11546: GREATER
11547: AND
11548: IFFALSE 11705
11550: GO 11552
11552: DISABLE
// begin vehicleTeleported = 2 ;
11553: LD_ADDR_EXP 29
11557: PUSH
11558: LD_INT 2
11560: ST_TO_ADDR
// DialogueOn ;
11561: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11565: LD_EXP 1
11569: PPUSH
11570: LD_STRING DT1a-JMM-1
11572: PPUSH
11573: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11577: LD_INT 22
11579: PUSH
11580: LD_INT 1
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 26
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 25
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 25
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 25
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 25
11632: PUSH
11633: LD_INT 4
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 25
11642: PUSH
11643: LD_INT 5
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 25
11652: PUSH
11653: LD_INT 8
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: LIST
11673: PPUSH
11674: CALL_OW 69
11678: PPUSH
11679: LD_STRING DT1a-Sol1-1
11681: PPUSH
11682: LD_STRING DT1a-FSol1-1
11684: PPUSH
11685: CALL 13403 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11689: LD_EXP 1
11693: PPUSH
11694: LD_STRING DT1a-JMM-2
11696: PPUSH
11697: CALL_OW 88
// DialogueOff ;
11701: CALL_OW 7
// end ;
11705: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11706: LD_EXP 29
11710: PUSH
11711: LD_INT 3
11713: EQUAL
11714: PUSH
11715: LD_EXP 30
11719: PUSH
11720: LD_INT 4
11722: GREATER
11723: AND
11724: IFFALSE 11935
11726: GO 11728
11728: DISABLE
11729: LD_INT 0
11731: PPUSH
11732: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11733: LD_ADDR_VAR 0 2
11737: PUSH
11738: LD_INT 11
11740: PPUSH
11741: LD_INT 22
11743: PUSH
11744: LD_INT 3
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 24
11753: PUSH
11754: LD_INT 250
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PPUSH
11765: CALL_OW 70
11769: ST_TO_ADDR
// enable ;
11770: ENABLE
// for i in vehicles do
11771: LD_ADDR_VAR 0 1
11775: PUSH
11776: LD_VAR 0 2
11780: PUSH
11781: FOR_IN
11782: IFFALSE 11933
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11784: LD_INT 1
11786: PPUSH
11787: LD_VAR 0 1
11791: PPUSH
11792: CALL_OW 292
11796: PUSH
11797: LD_EXP 29
11801: PUSH
11802: LD_INT 3
11804: EQUAL
11805: AND
11806: IFFALSE 11931
// begin disable ;
11808: DISABLE
// DialogueOn ;
11809: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11813: LD_INT 22
11815: PUSH
11816: LD_INT 1
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 26
11825: PUSH
11826: LD_INT 1
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 25
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 25
11848: PUSH
11849: LD_INT 2
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 25
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 25
11878: PUSH
11879: LD_INT 5
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 25
11888: PUSH
11889: LD_INT 8
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 69
11914: PPUSH
11915: LD_STRING DT2-Sol1-1
11917: PPUSH
11918: LD_STRING DT2-FSol1-1
11920: PPUSH
11921: CALL 13403 0 3
// DialogueOff ;
11925: CALL_OW 7
// break ;
11929: GO 11933
// end ; end ;
11931: GO 11781
11933: POP
11934: POP
// end ;
11935: PPOPN 2
11937: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11938: LD_EXP 29
11942: PUSH
11943: LD_INT 3
11945: EQUAL
11946: PUSH
11947: LD_INT 11
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 24
11962: PUSH
11963: LD_INT 251
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 2
11972: PUSH
11973: LD_INT 21
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 21
11985: PUSH
11986: LD_INT 1
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 70
12007: PUSH
12008: LD_INT 0
12010: EQUAL
12011: AND
12012: PUSH
12013: LD_EXP 30
12017: PUSH
12018: LD_INT 6
12020: PUSH
12021: LD_INT 6
12023: PUSH
12024: LD_INT 8
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PUSH
12032: LD_OWVAR 67
12036: ARRAY
12037: EQUAL
12038: AND
12039: IFFALSE 12196
12041: GO 12043
12043: DISABLE
// begin vehicleTeleported = 4 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 4
12051: ST_TO_ADDR
// DialogueOn ;
12052: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
12056: LD_EXP 1
12060: PPUSH
12061: LD_STRING DT2a-JMM-1
12063: PPUSH
12064: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
12068: LD_INT 22
12070: PUSH
12071: LD_INT 1
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 26
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 4
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 25
12133: PUSH
12134: LD_INT 5
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 25
12143: PUSH
12144: LD_INT 8
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: PPUSH
12170: LD_STRING DT2a-Sol1-1
12172: PPUSH
12173: LD_STRING DT2a-FSol1-1
12175: PPUSH
12176: CALL 13403 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12180: LD_EXP 3
12184: PPUSH
12185: LD_STRING DT2a-Don-1
12187: PPUSH
12188: CALL_OW 88
// DialogueOff ;
12192: CALL_OW 7
// end ;
12196: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12197: LD_INT 1
12199: PPUSH
12200: LD_INT 45
12202: PPUSH
12203: LD_INT 74
12205: PPUSH
12206: CALL_OW 293
12210: IFFALSE 12378
12212: GO 12214
12214: DISABLE
// begin DialogueOn ;
12215: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12219: LD_INT 36
12221: PPUSH
12222: LD_INT 55
12224: PPUSH
12225: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12229: LD_INT 22
12231: PUSH
12232: LD_INT 1
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 26
12241: PUSH
12242: LD_INT 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: LD_INT 25
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 25
12264: PUSH
12265: LD_INT 2
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 25
12274: PUSH
12275: LD_INT 3
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 4
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 25
12294: PUSH
12295: LD_INT 5
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 25
12304: PUSH
12305: LD_INT 8
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: PPUSH
12331: LD_STRING D5-Sol1-1
12333: PPUSH
12334: LD_STRING D5-FSol1-
12336: PPUSH
12337: CALL 13403 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12341: LD_EXP 31
12345: PUSH
12346: LD_INT 1
12348: EQUAL
12349: PUSH
12350: LD_EXP 3
12354: PPUSH
12355: CALL_OW 300
12359: AND
12360: IFFALSE 12374
// Say ( Donaldson , D5-Don-1 ) ;
12362: LD_EXP 3
12366: PPUSH
12367: LD_STRING D5-Don-1
12369: PPUSH
12370: CALL_OW 88
// DialogueOff ;
12374: CALL_OW 7
// end ;
12378: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 10
12384: PPUSH
12385: CALL_OW 292
12389: PUSH
12390: LD_INT 1
12392: PPUSH
12393: LD_INT 137
12395: PPUSH
12396: CALL_OW 292
12400: OR
12401: IFFALSE 12545
12403: GO 12405
12405: DISABLE
// begin DialogueOn ;
12406: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12410: LD_INT 22
12412: PUSH
12413: LD_INT 1
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 26
12422: PUSH
12423: LD_INT 1
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 2
12432: PUSH
12433: LD_INT 25
12435: PUSH
12436: LD_INT 1
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 25
12445: PUSH
12446: LD_INT 2
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 25
12455: PUSH
12456: LD_INT 3
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 25
12465: PUSH
12466: LD_INT 4
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 25
12475: PUSH
12476: LD_INT 5
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 25
12485: PUSH
12486: LD_INT 8
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: PPUSH
12512: LD_STRING DT3-Sol1-1
12514: PPUSH
12515: LD_STRING DT3-FSol1-1
12517: PPUSH
12518: CALL 13403 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12522: LD_EXP 1
12526: PPUSH
12527: LD_STRING DT3-JMM-1
12529: PPUSH
12530: CALL_OW 88
// DialogueOff ;
12534: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12538: LD_STRING M2
12540: PPUSH
12541: CALL_OW 337
// end ;
12545: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12546: LD_EXP 43
12550: PUSH
12551: LD_INT 0
12553: EQUAL
12554: IFFALSE 12637
12556: GO 12558
12558: DISABLE
12559: LD_INT 0
12561: PPUSH
// begin enable ;
12562: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12563: LD_ADDR_VAR 0 1
12567: PUSH
12568: LD_INT 10
12570: PPUSH
12571: LD_INT 22
12573: PUSH
12574: LD_INT 3
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 21
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 58
12593: PUSH
12594: EMPTY
12595: LIST
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: PPUSH
12602: CALL_OW 70
12606: PUSH
12607: FOR_IN
12608: IFFALSE 12635
// if GetLives ( i ) < 1000 then
12610: LD_VAR 0 1
12614: PPUSH
12615: CALL_OW 256
12619: PUSH
12620: LD_INT 1000
12622: LESS
12623: IFFALSE 12633
// ruEscape = 1 ;
12625: LD_ADDR_EXP 43
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
12633: GO 12607
12635: POP
12636: POP
// end ;
12637: PPOPN 1
12639: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12640: LD_INT 3
12642: PPUSH
12643: CALL_OW 303
12647: PUSH
12648: LD_INT 4
12650: PPUSH
12651: CALL_OW 303
12655: OR
12656: PUSH
12657: LD_INT 22
12659: PPUSH
12660: LD_INT 22
12662: PUSH
12663: LD_INT 1
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PPUSH
12670: CALL_OW 70
12674: PUSH
12675: LD_INT 0
12677: GREATER
12678: OR
12679: PUSH
12680: LD_EXP 43
12684: PUSH
12685: LD_INT 1
12687: EQUAL
12688: OR
12689: IFFALSE 12920
12691: GO 12693
12693: DISABLE
12694: LD_INT 0
12696: PPUSH
12697: PPUSH
12698: PPUSH
// begin ruAI = 0 ;
12699: LD_ADDR_EXP 42
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_INT 10
12714: PPUSH
12715: LD_INT 22
12717: PUSH
12718: LD_INT 3
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 21
12727: PUSH
12728: LD_INT 2
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 58
12737: PUSH
12738: EMPTY
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 70
12750: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12751: LD_EXP 35
12755: PPUSH
12756: CALL_OW 122
// wait ( 0 0$1 ) ;
12760: LD_INT 35
12762: PPUSH
12763: CALL_OW 67
// DialogueOn ;
12767: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12771: LD_EXP 1
12775: PPUSH
12776: LD_STRING D6-JMM-1
12778: PPUSH
12779: CALL_OW 88
// DialogueOff ;
12783: CALL_OW 7
// if vehs > 0 then
12787: LD_VAR 0 3
12791: PUSH
12792: LD_INT 0
12794: GREATER
12795: IFFALSE 12865
// for i := 1 to RuScientists do
12797: LD_ADDR_VAR 0 1
12801: PUSH
12802: DOUBLE
12803: LD_INT 1
12805: DEC
12806: ST_TO_ADDR
12807: LD_EXP 35
12811: PUSH
12812: FOR_TO
12813: IFFALSE 12861
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12815: LD_EXP 35
12819: PUSH
12820: LD_VAR 0 1
12824: ARRAY
12825: PPUSH
12826: LD_INT 3
12828: PUSH
12829: LD_INT 60
12831: PUSH
12832: EMPTY
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: CALL_OW 72
12843: PPUSH
12844: LD_VAR 0 3
12848: PUSH
12849: LD_VAR 0 1
12853: ARRAY
12854: PPUSH
12855: CALL_OW 120
12859: GO 12812
12861: POP
12862: POP
12863: GO 12920
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12865: LD_EXP 35
12869: PUSH
12870: LD_VAR 0 1
12874: ARRAY
12875: PPUSH
12876: LD_INT 3
12878: PUSH
12879: LD_INT 60
12881: PUSH
12882: EMPTY
12883: LIST
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PPUSH
12889: CALL_OW 72
12893: PPUSH
12894: LD_INT 13
12896: PUSH
12897: LD_INT 14
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 1
12906: PPUSH
12907: LD_INT 2
12909: PPUSH
12910: CALL_OW 12
12914: ARRAY
12915: PPUSH
12916: CALL_OW 113
// end ;
12920: PPOPN 3
12922: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
12923: LD_EXP 42
12927: PUSH
12928: LD_INT 0
12930: EQUAL
12931: IFFALSE 13303
12933: GO 12935
12935: DISABLE
12936: LD_INT 0
12938: PPUSH
12939: PPUSH
12940: PPUSH
12941: PPUSH
// begin enable ;
12942: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
12943: LD_EXP 35
12947: PPUSH
12948: LD_INT 2
12950: PUSH
12951: LD_INT 95
12953: PUSH
12954: LD_INT 13
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 95
12963: PUSH
12964: LD_INT 14
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: PPUSH
12976: CALL_OW 72
12980: PUSH
12981: LD_INT 33
12983: PUSH
12984: LD_INT 1
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: LD_INT 23
12993: PUSH
12994: LD_INT 3
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 2
13003: PUSH
13004: LD_INT 95
13006: PUSH
13007: LD_INT 13
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 95
13016: PUSH
13017: LD_INT 14
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: PPUSH
13034: CALL_OW 69
13038: OR
13039: IFFALSE 13228
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
13041: LD_ADDR_VAR 0 2
13045: PUSH
13046: LD_EXP 35
13050: PPUSH
13051: LD_INT 2
13053: PUSH
13054: LD_INT 95
13056: PUSH
13057: LD_INT 13
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 95
13066: PUSH
13067: LD_INT 14
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 72
13083: PUSH
13084: LD_INT 1
13086: ARRAY
13087: ST_TO_ADDR
// if not unit then
13088: LD_VAR 0 2
13092: NOT
13093: IFFALSE 13228
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
13095: LD_ADDR_VAR 0 4
13099: PUSH
13100: LD_INT 2
13102: PUSH
13103: LD_INT 95
13105: PUSH
13106: LD_INT 13
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 95
13115: PUSH
13116: LD_INT 14
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 33
13130: PUSH
13131: LD_INT 1
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 23
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: PPUSH
13153: CALL_OW 69
13157: ST_TO_ADDR
// if not tmp then
13158: LD_VAR 0 4
13162: NOT
13163: IFFALSE 13167
// exit ;
13165: GO 13303
// for i in tmp do
13167: LD_ADDR_VAR 0 1
13171: PUSH
13172: LD_VAR 0 4
13176: PUSH
13177: FOR_IN
13178: IFFALSE 13226
// if IsDrivenBy ( i ) in RuScientists then
13180: LD_VAR 0 1
13184: PPUSH
13185: CALL_OW 311
13189: PUSH
13190: LD_EXP 35
13194: IN
13195: IFFALSE 13224
// begin unit := IsDrivenBy ( i ) ;
13197: LD_ADDR_VAR 0 2
13201: PUSH
13202: LD_VAR 0 1
13206: PPUSH
13207: CALL_OW 311
13211: ST_TO_ADDR
// veh := i ;
13212: LD_ADDR_VAR 0 3
13216: PUSH
13217: LD_VAR 0 1
13221: ST_TO_ADDR
// break ;
13222: GO 13226
// end ;
13224: GO 13177
13226: POP
13227: POP
// end ; end ; if not unit then
13228: LD_VAR 0 2
13232: NOT
13233: IFFALSE 13237
// exit ;
13235: GO 13303
// RuScientists = RuScientists diff unit ;
13237: LD_ADDR_EXP 35
13241: PUSH
13242: LD_EXP 35
13246: PUSH
13247: LD_VAR 0 2
13251: DIFF
13252: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13253: LD_VAR 0 2
13257: PPUSH
13258: CALL_OW 64
// if veh then
13262: LD_VAR 0 3
13266: IFFALSE 13303
// begin if GetWeapon ( veh ) = 49 then
13268: LD_VAR 0 3
13272: PPUSH
13273: CALL_OW 264
13277: PUSH
13278: LD_INT 49
13280: EQUAL
13281: IFFALSE 13294
// KillUnit ( veh ) else
13283: LD_VAR 0 3
13287: PPUSH
13288: CALL_OW 66
13292: GO 13303
// RemoveUnit ( veh ) ;
13294: LD_VAR 0 3
13298: PPUSH
13299: CALL_OW 64
// end ; end ; end_of_file
13303: PPOPN 4
13305: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13306: LD_INT 0
13308: PPUSH
13309: PPUSH
// if exist_mode then
13310: LD_VAR 0 2
13314: IFFALSE 13333
// unit := CreateCharacter ( ident ) else
13316: LD_ADDR_VAR 0 4
13320: PUSH
13321: LD_VAR 0 1
13325: PPUSH
13326: CALL_OW 34
13330: ST_TO_ADDR
13331: GO 13348
// unit := NewCharacter ( ident ) ;
13333: LD_ADDR_VAR 0 4
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 25
13347: ST_TO_ADDR
// result := unit ;
13348: LD_ADDR_VAR 0 3
13352: PUSH
13353: LD_VAR 0 4
13357: ST_TO_ADDR
// end ;
13358: LD_VAR 0 3
13362: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13363: LD_INT 0
13365: PPUSH
13366: PPUSH
// for i in charactersList do
13367: LD_ADDR_VAR 0 4
13371: PUSH
13372: LD_VAR 0 1
13376: PUSH
13377: FOR_IN
13378: IFFALSE 13396
// SaveCharacters ( i , ident ) ;
13380: LD_VAR 0 4
13384: PPUSH
13385: LD_VAR 0 2
13389: PPUSH
13390: CALL_OW 38
13394: GO 13377
13396: POP
13397: POP
// end ;
13398: LD_VAR 0 3
13402: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13403: LD_INT 0
13405: PPUSH
13406: PPUSH
13407: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13408: LD_ADDR_VAR 0 1
13412: PUSH
13413: LD_VAR 0 1
13417: PUSH
13418: LD_EXP 1
13422: PUSH
13423: LD_EXP 7
13427: PUSH
13428: LD_EXP 3
13432: PUSH
13433: LD_EXP 4
13437: PUSH
13438: LD_EXP 5
13442: PUSH
13443: LD_EXP 2
13447: PUSH
13448: LD_EXP 12
13452: PUSH
13453: LD_EXP 13
13457: PUSH
13458: LD_EXP 9
13462: PUSH
13463: LD_EXP 11
13467: PUSH
13468: LD_EXP 6
13472: PUSH
13473: LD_EXP 8
13477: PUSH
13478: LD_EXP 10
13482: PUSH
13483: LD_EXP 22
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: DIFF
13504: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13505: LD_ADDR_VAR 0 6
13509: PUSH
13510: LD_INT 1
13512: PPUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 12
13522: ST_TO_ADDR
// for i = 1 to characters do
13523: LD_ADDR_VAR 0 5
13527: PUSH
13528: DOUBLE
13529: LD_INT 1
13531: DEC
13532: ST_TO_ADDR
13533: LD_VAR 0 1
13537: PUSH
13538: FOR_TO
13539: IFFALSE 13649
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13541: LD_VAR 0 5
13545: PUSH
13546: LD_VAR 0 6
13550: EQUAL
13551: PUSH
13552: LD_VAR 0 1
13556: PUSH
13557: LD_VAR 0 5
13561: ARRAY
13562: PPUSH
13563: CALL_OW 258
13567: PUSH
13568: LD_INT 1
13570: EQUAL
13571: AND
13572: IFFALSE 13594
// Say ( characters [ i ] , dialogMID ) ;
13574: LD_VAR 0 1
13578: PUSH
13579: LD_VAR 0 5
13583: ARRAY
13584: PPUSH
13585: LD_VAR 0 2
13589: PPUSH
13590: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13594: LD_VAR 0 5
13598: PUSH
13599: LD_VAR 0 6
13603: EQUAL
13604: PUSH
13605: LD_VAR 0 1
13609: PUSH
13610: LD_VAR 0 5
13614: ARRAY
13615: PPUSH
13616: CALL_OW 258
13620: PUSH
13621: LD_INT 2
13623: EQUAL
13624: AND
13625: IFFALSE 13647
// Say ( characters [ i ] , dialogFID ) ;
13627: LD_VAR 0 1
13631: PUSH
13632: LD_VAR 0 5
13636: ARRAY
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: CALL_OW 88
// end ;
13647: GO 13538
13649: POP
13650: POP
// end ;
13651: LD_VAR 0 4
13655: RET
// export function PrepareDifficulty ; var tmp ; begin
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
// if Difficulty = 1 then
13660: LD_OWVAR 67
13664: PUSH
13665: LD_INT 1
13667: EQUAL
13668: IFFALSE 13686
// begin RuSolMinLevel = 8 ;
13670: LD_ADDR_EXP 37
13674: PUSH
13675: LD_INT 8
13677: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13678: LD_ADDR_EXP 38
13682: PUSH
13683: LD_INT 10
13685: ST_TO_ADDR
// end ; if Difficulty = 2 then
13686: LD_OWVAR 67
13690: PUSH
13691: LD_INT 2
13693: EQUAL
13694: IFFALSE 13788
// begin RuSolMinLevel = 9 ;
13696: LD_ADDR_EXP 37
13700: PUSH
13701: LD_INT 9
13703: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13704: LD_ADDR_EXP 38
13708: PUSH
13709: LD_INT 10
13711: ST_TO_ADDR
// uc_nation = 3 ;
13712: LD_ADDR_OWVAR 21
13716: PUSH
13717: LD_INT 3
13719: ST_TO_ADDR
// uc_side = 3 ;
13720: LD_ADDR_OWVAR 20
13724: PUSH
13725: LD_INT 3
13727: ST_TO_ADDR
// bc_level = 10 ;
13728: LD_ADDR_OWVAR 43
13732: PUSH
13733: LD_INT 10
13735: ST_TO_ADDR
// bc_type = b_turret ;
13736: LD_ADDR_OWVAR 42
13740: PUSH
13741: LD_INT 33
13743: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13744: LD_ADDR_VAR 0 2
13748: PUSH
13749: LD_INT 86
13751: PPUSH
13752: LD_INT 34
13754: PPUSH
13755: LD_INT 2
13757: PPUSH
13758: CALL_OW 47
13762: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13763: LD_VAR 0 2
13767: PPUSH
13768: LD_INT 49
13770: PPUSH
13771: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13775: LD_INT 64
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 322
// end ; if Difficulty = 3 then
13788: LD_OWVAR 67
13792: PUSH
13793: LD_INT 3
13795: EQUAL
13796: IFFALSE 13934
// begin RuSolMinLevel = 10 ;
13798: LD_ADDR_EXP 37
13802: PUSH
13803: LD_INT 10
13805: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13806: LD_ADDR_EXP 38
13810: PUSH
13811: LD_INT 10
13813: ST_TO_ADDR
// uc_nation = 3 ;
13814: LD_ADDR_OWVAR 21
13818: PUSH
13819: LD_INT 3
13821: ST_TO_ADDR
// uc_side = 3 ;
13822: LD_ADDR_OWVAR 20
13826: PUSH
13827: LD_INT 3
13829: ST_TO_ADDR
// bc_level = 10 ;
13830: LD_ADDR_OWVAR 43
13834: PUSH
13835: LD_INT 10
13837: ST_TO_ADDR
// bc_type = b_turret ;
13838: LD_ADDR_OWVAR 42
13842: PUSH
13843: LD_INT 33
13845: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13846: LD_ADDR_VAR 0 2
13850: PUSH
13851: LD_INT 86
13853: PPUSH
13854: LD_INT 34
13856: PPUSH
13857: LD_INT 2
13859: PPUSH
13860: CALL_OW 47
13864: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13865: LD_VAR 0 2
13869: PPUSH
13870: LD_INT 49
13872: PPUSH
13873: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13877: LD_ADDR_VAR 0 2
13881: PUSH
13882: LD_INT 93
13884: PPUSH
13885: LD_INT 31
13887: PPUSH
13888: LD_INT 2
13890: PPUSH
13891: CALL_OW 47
13895: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13896: LD_VAR 0 2
13900: PPUSH
13901: LD_INT 49
13903: PPUSH
13904: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13908: LD_INT 64
13910: PPUSH
13911: LD_INT 3
13913: PPUSH
13914: LD_INT 1
13916: PPUSH
13917: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13921: LD_INT 65
13923: PPUSH
13924: LD_INT 3
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: CALL_OW 322
// end ; end ;
13934: LD_VAR 0 1
13938: RET
// export function ShowQuery1 ; begin
13939: LD_INT 0
13941: PPUSH
// case query ( Q1 ) of 1 :
13942: LD_STRING Q1
13944: PPUSH
13945: CALL_OW 97
13949: PUSH
13950: LD_INT 1
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 13969
13958: POP
// result = 1 ; 2 :
13959: LD_ADDR_VAR 0 1
13963: PUSH
13964: LD_INT 1
13966: ST_TO_ADDR
13967: GO 14008
13969: LD_INT 2
13971: DOUBLE
13972: EQUAL
13973: IFTRUE 13977
13975: GO 13988
13977: POP
// result = 2 ; 3 :
13978: LD_ADDR_VAR 0 1
13982: PUSH
13983: LD_INT 2
13985: ST_TO_ADDR
13986: GO 14008
13988: LD_INT 3
13990: DOUBLE
13991: EQUAL
13992: IFTRUE 13996
13994: GO 14007
13996: POP
// result = 3 ; end ;
13997: LD_ADDR_VAR 0 1
14001: PUSH
14002: LD_INT 3
14004: ST_TO_ADDR
14005: GO 14008
14007: POP
// end ;
14008: LD_VAR 0 1
14012: RET
// export function ShowQuery2 ; begin
14013: LD_INT 0
14015: PPUSH
// case query ( Q1a ) of 1 :
14016: LD_STRING Q1a
14018: PPUSH
14019: CALL_OW 97
14023: PUSH
14024: LD_INT 1
14026: DOUBLE
14027: EQUAL
14028: IFTRUE 14032
14030: GO 14043
14032: POP
// result = 1 ; 2 :
14033: LD_ADDR_VAR 0 1
14037: PUSH
14038: LD_INT 1
14040: ST_TO_ADDR
14041: GO 14082
14043: LD_INT 2
14045: DOUBLE
14046: EQUAL
14047: IFTRUE 14051
14049: GO 14062
14051: POP
// result = 2 ; 3 :
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: LD_INT 2
14059: ST_TO_ADDR
14060: GO 14082
14062: LD_INT 3
14064: DOUBLE
14065: EQUAL
14066: IFTRUE 14070
14068: GO 14081
14070: POP
// result = 3 ; end ;
14071: LD_ADDR_VAR 0 1
14075: PUSH
14076: LD_INT 3
14078: ST_TO_ADDR
14079: GO 14082
14081: POP
// end ;
14082: LD_VAR 0 1
14086: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
14087: LD_INT 0
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
// for i = 1 to count do
14094: LD_ADDR_VAR 0 8
14098: PUSH
14099: DOUBLE
14100: LD_INT 1
14102: DEC
14103: ST_TO_ADDR
14104: LD_VAR 0 6
14108: PUSH
14109: FOR_TO
14110: IFFALSE 14191
// begin uc_side = side ;
14112: LD_ADDR_OWVAR 20
14116: PUSH
14117: LD_VAR 0 1
14121: ST_TO_ADDR
// uc_nation = nation ;
14122: LD_ADDR_OWVAR 21
14126: PUSH
14127: LD_VAR 0 2
14131: ST_TO_ADDR
// hc_gallery =  ;
14132: LD_ADDR_OWVAR 33
14136: PUSH
14137: LD_STRING 
14139: ST_TO_ADDR
// hc_name =  ;
14140: LD_ADDR_OWVAR 26
14144: PUSH
14145: LD_STRING 
14147: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14148: LD_INT 0
14150: PPUSH
14151: LD_VAR 0 5
14155: PPUSH
14156: LD_VAR 0 4
14160: PPUSH
14161: CALL_OW 380
// un = CreateHuman ;
14165: LD_ADDR_VAR 0 10
14169: PUSH
14170: CALL_OW 44
14174: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14175: LD_VAR 0 10
14179: PPUSH
14180: LD_VAR 0 3
14184: PPUSH
14185: CALL_OW 52
// end ;
14189: GO 14109
14191: POP
14192: POP
// end ;
14193: LD_VAR 0 7
14197: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14198: LD_INT 0
14200: PPUSH
14201: PPUSH
14202: PPUSH
14203: PPUSH
14204: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14205: LD_ADDR_VAR 0 8
14209: PUSH
14210: LD_INT 48
14212: PUSH
14213: LD_INT 49
14215: PUSH
14216: LD_INT 50
14218: PUSH
14219: LD_INT 20
14221: PUSH
14222: LD_INT 1
14224: PUSH
14225: LD_INT 51
14227: PUSH
14228: LD_INT 52
14230: PUSH
14231: LD_INT 69
14233: PUSH
14234: LD_INT 39
14236: PUSH
14237: LD_INT 34
14239: PUSH
14240: LD_INT 40
14242: PUSH
14243: LD_INT 53
14245: PUSH
14246: LD_INT 71
14248: PUSH
14249: LD_INT 57
14251: PUSH
14252: LD_INT 58
14254: PUSH
14255: LD_INT 44
14257: PUSH
14258: LD_INT 32
14260: PUSH
14261: LD_INT 27
14263: PUSH
14264: LD_INT 23
14266: PUSH
14267: LD_INT 33
14269: PUSH
14270: LD_INT 59
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: LD_INT 55
14278: PUSH
14279: LD_INT 56
14281: PUSH
14282: LD_INT 63
14284: PUSH
14285: LD_INT 64
14287: PUSH
14288: LD_INT 65
14290: PUSH
14291: LD_INT 30
14293: PUSH
14294: LD_INT 31
14296: PUSH
14297: LD_INT 21
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 25
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14340: LD_ADDR_VAR 0 5
14344: PUSH
14345: DOUBLE
14346: LD_INT 1
14348: DEC
14349: ST_TO_ADDR
14350: LD_VAR 0 8
14354: PUSH
14355: FOR_TO
14356: IFFALSE 14432
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14358: LD_VAR 0 8
14362: PUSH
14363: LD_VAR 0 5
14367: ARRAY
14368: PPUSH
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 321
14378: PUSH
14379: LD_INT 1
14381: EQUAL
14382: PUSH
14383: LD_VAR 0 8
14387: PUSH
14388: LD_VAR 0 5
14392: ARRAY
14393: PPUSH
14394: LD_VAR 0 3
14398: PPUSH
14399: CALL_OW 482
14403: PUSH
14404: LD_INT 1
14406: EQUAL
14407: AND
14408: IFFALSE 14430
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14410: LD_VAR 0 2
14414: PPUSH
14415: LD_VAR 0 8
14419: PUSH
14420: LD_VAR 0 5
14424: ARRAY
14425: PPUSH
14426: CALL_OW 184
14430: GO 14355
14432: POP
14433: POP
// end ;
14434: LD_VAR 0 4
14438: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14439: LD_INT 0
14441: PPUSH
14442: PPUSH
14443: PPUSH
14444: PPUSH
14445: PPUSH
14446: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14447: LD_ADDR_VAR 0 8
14451: PUSH
14452: LD_VAR 0 2
14456: PPUSH
14457: CALL_OW 313
14461: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14462: LD_ADDR_VAR 0 9
14466: PUSH
14467: LD_VAR 0 3
14471: PPUSH
14472: LD_INT 22
14474: PUSH
14475: LD_VAR 0 1
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 25
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 24
14496: PUSH
14497: LD_INT 750
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 3
14506: PUSH
14507: LD_INT 54
14509: PUSH
14510: EMPTY
14511: LIST
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 70
14527: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14528: LD_ADDR_VAR 0 6
14532: PUSH
14533: LD_VAR 0 3
14537: PPUSH
14538: LD_INT 22
14540: PUSH
14541: LD_VAR 0 1
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 21
14552: PUSH
14553: LD_INT 3
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 3
14562: PUSH
14563: LD_INT 24
14565: PUSH
14566: LD_INT 1000
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: PUSH
14582: EMPTY
14583: LIST
14584: PPUSH
14585: CALL_OW 70
14589: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14590: LD_VAR 0 6
14594: NOT
14595: PUSH
14596: LD_INT 22
14598: PUSH
14599: LD_VAR 0 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 25
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 24
14620: PUSH
14621: LD_INT 250
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: PPUSH
14633: CALL_OW 69
14637: NOT
14638: AND
14639: IFFALSE 14643
// exit ;
14641: GO 14825
// if buildings_list > 0 and engineerOkInside then
14643: LD_VAR 0 6
14647: PUSH
14648: LD_INT 0
14650: GREATER
14651: PUSH
14652: LD_VAR 0 8
14656: AND
14657: IFFALSE 14668
// ComExitBuilding ( engineerOkInside ) ;
14659: LD_VAR 0 8
14663: PPUSH
14664: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14668: LD_VAR 0 6
14672: PUSH
14673: LD_INT 0
14675: GREATER
14676: PUSH
14677: LD_VAR 0 9
14681: PUSH
14682: LD_INT 0
14684: GREATER
14685: AND
14686: IFFALSE 14706
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14688: LD_VAR 0 9
14692: PPUSH
14693: LD_VAR 0 6
14697: PUSH
14698: LD_INT 1
14700: ARRAY
14701: PPUSH
14702: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14706: LD_VAR 0 6
14710: PUSH
14711: LD_INT 0
14713: EQUAL
14714: PUSH
14715: LD_VAR 0 4
14719: PUSH
14720: LD_INT 0
14722: EQUAL
14723: AND
14724: PUSH
14725: LD_VAR 0 9
14729: PUSH
14730: LD_INT 0
14732: GREATER
14733: AND
14734: IFFALSE 14750
// ComEnterUnit ( engineerOkOutside , building ) ;
14736: LD_VAR 0 9
14740: PPUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14750: LD_VAR 0 9
14754: PUSH
14755: LD_INT 0
14757: GREATER
14758: PUSH
14759: LD_VAR 0 6
14763: PUSH
14764: LD_INT 0
14766: EQUAL
14767: AND
14768: PUSH
14769: LD_VAR 0 4
14773: PUSH
14774: LD_INT 0
14776: GREATER
14777: AND
14778: IFFALSE 14825
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14780: LD_VAR 0 9
14784: PPUSH
14785: LD_VAR 0 4
14789: PUSH
14790: LD_INT 1
14792: ARRAY
14793: PPUSH
14794: LD_VAR 0 4
14798: PUSH
14799: LD_INT 2
14801: ARRAY
14802: PPUSH
14803: LD_VAR 0 4
14807: PUSH
14808: LD_INT 3
14810: ARRAY
14811: PPUSH
14812: LD_VAR 0 4
14816: PUSH
14817: LD_INT 4
14819: ARRAY
14820: PPUSH
14821: CALL_OW 145
// end ;
14825: LD_VAR 0 5
14829: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14830: LD_INT 0
14832: PPUSH
14833: PPUSH
14834: PPUSH
14835: PPUSH
14836: PPUSH
14837: PPUSH
14838: PPUSH
14839: PPUSH
14840: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14841: LD_ADDR_VAR 0 6
14845: PUSH
14846: LD_INT 22
14848: PUSH
14849: LD_VAR 0 1
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 25
14860: PUSH
14861: LD_INT 4
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 24
14870: PUSH
14871: LD_INT 251
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: PUSH
14888: LD_EXP 35
14892: PUSH
14893: EMPTY
14894: LIST
14895: DIFF
14896: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14897: LD_ADDR_VAR 0 7
14901: PUSH
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 22
14909: PUSH
14910: LD_VAR 0 1
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 25
14921: PUSH
14922: LD_INT 4
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 50
14931: PUSH
14932: EMPTY
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: PPUSH
14940: CALL_OW 70
14944: PUSH
14945: LD_EXP 35
14949: PUSH
14950: EMPTY
14951: LIST
14952: DIFF
14953: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14954: LD_ADDR_VAR 0 10
14958: PUSH
14959: LD_VAR 0 3
14963: PPUSH
14964: LD_INT 22
14966: PUSH
14967: LD_VAR 0 1
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 21
14978: PUSH
14979: LD_INT 1
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 3
14988: PUSH
14989: LD_INT 24
14991: PUSH
14992: LD_INT 750
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 70
15012: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15013: LD_ADDR_VAR 0 11
15017: PUSH
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_INT 22
15025: PUSH
15026: LD_VAR 0 1
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 21
15037: PUSH
15038: LD_INT 1
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 3
15047: PUSH
15048: LD_INT 24
15050: PUSH
15051: LD_INT 1000
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: PPUSH
15067: CALL_OW 70
15071: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
15072: LD_VAR 0 10
15076: PUSH
15077: LD_INT 0
15079: GREATER
15080: PUSH
15081: LD_VAR 0 6
15085: PUSH
15086: LD_INT 0
15088: GREATER
15089: AND
15090: IFFALSE 15106
// ComMoveToArea ( damageUnits , healArea ) ;
15092: LD_VAR 0 10
15096: PPUSH
15097: LD_VAR 0 2
15101: PPUSH
15102: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
15106: LD_VAR 0 11
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: PUSH
15115: LD_VAR 0 7
15119: PUSH
15120: LD_INT 0
15122: GREATER
15123: AND
15124: IFFALSE 15144
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15126: LD_VAR 0 7
15130: PPUSH
15131: LD_VAR 0 11
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PPUSH
15140: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15144: LD_VAR 0 10
15148: PUSH
15149: LD_INT 0
15151: EQUAL
15152: PUSH
15153: LD_VAR 0 11
15157: PUSH
15158: LD_INT 0
15160: EQUAL
15161: AND
15162: PUSH
15163: LD_VAR 0 7
15167: PUSH
15168: LD_INT 0
15170: GREATER
15171: AND
15172: IFFALSE 15277
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15174: LD_ADDR_VAR 0 12
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_VAR 0 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 21
15193: PUSH
15194: LD_INT 3
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 30
15203: PUSH
15204: LD_INT 8
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: PPUSH
15216: CALL_OW 69
15220: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15221: LD_ADDR_VAR 0 13
15225: PUSH
15226: LD_INT 1
15228: PPUSH
15229: LD_VAR 0 12
15233: PPUSH
15234: CALL_OW 12
15238: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15239: LD_VAR 0 7
15243: PPUSH
15244: LD_INT 3
15246: PUSH
15247: LD_INT 60
15249: PUSH
15250: EMPTY
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 72
15261: PPUSH
15262: LD_VAR 0 12
15266: PUSH
15267: LD_VAR 0 13
15271: ARRAY
15272: PPUSH
15273: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15277: LD_VAR 0 3
15281: PPUSH
15282: LD_INT 22
15284: PUSH
15285: LD_VAR 0 1
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 25
15296: PUSH
15297: LD_INT 3
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 24
15306: PUSH
15307: LD_INT 751
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: PPUSH
15319: CALL_OW 70
15323: PUSH
15324: LD_INT 0
15326: GREATER
15327: PUSH
15328: LD_INT 21
15330: PPUSH
15331: CALL_OW 302
15335: AND
15336: PUSH
15337: LD_INT 21
15339: PPUSH
15340: CALL_OW 255
15344: PUSH
15345: LD_INT 3
15347: EQUAL
15348: AND
15349: IFFALSE 15405
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15351: LD_VAR 0 3
15355: PPUSH
15356: LD_INT 22
15358: PUSH
15359: LD_VAR 0 1
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 25
15370: PUSH
15371: LD_INT 3
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 24
15380: PUSH
15381: LD_INT 751
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: PPUSH
15393: CALL_OW 70
15397: PPUSH
15398: LD_INT 21
15400: PPUSH
15401: CALL_OW 120
// end ;
15405: LD_VAR 0 5
15409: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15410: LD_INT 0
15412: PPUSH
15413: PPUSH
15414: PPUSH
15415: PPUSH
15416: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15417: LD_ADDR_VAR 0 6
15421: PUSH
15422: LD_INT 22
15424: PUSH
15425: LD_VAR 0 1
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 2
15436: PUSH
15437: LD_INT 30
15439: PUSH
15440: LD_INT 31
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 30
15449: PUSH
15450: LD_INT 32
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 33
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 4
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 30
15479: PUSH
15480: LD_INT 5
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15504: LD_ADDR_VAR 0 7
15508: PUSH
15509: LD_INT 22
15511: PUSH
15512: LD_VAR 0 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 21
15523: PUSH
15524: LD_INT 3
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 58
15533: PUSH
15534: EMPTY
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 69
15546: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15547: LD_VAR 0 6
15551: PUSH
15552: LD_INT 0
15554: GREATER
15555: PUSH
15556: LD_VAR 0 7
15560: PUSH
15561: LD_INT 0
15563: GREATER
15564: AND
15565: IFFALSE 15635
// begin for i in turretsList do
15567: LD_ADDR_VAR 0 4
15571: PUSH
15572: LD_VAR 0 6
15576: PUSH
15577: FOR_IN
15578: IFFALSE 15633
// begin for j in enemyBuildings do
15580: LD_ADDR_VAR 0 5
15584: PUSH
15585: LD_VAR 0 7
15589: PUSH
15590: FOR_IN
15591: IFFALSE 15629
// begin if GetDistUnits ( i , j ) < 20 then
15593: LD_VAR 0 4
15597: PPUSH
15598: LD_VAR 0 5
15602: PPUSH
15603: CALL_OW 296
15607: PUSH
15608: LD_INT 20
15610: LESS
15611: IFFALSE 15627
// begin ComAttackUnit ( i , j ) ;
15613: LD_VAR 0 4
15617: PPUSH
15618: LD_VAR 0 5
15622: PPUSH
15623: CALL_OW 115
// end ; end ;
15627: GO 15590
15629: POP
15630: POP
// end ;
15631: GO 15577
15633: POP
15634: POP
// end ; end ;
15635: LD_VAR 0 3
15639: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15640: LD_INT 0
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15648: LD_ADDR_VAR 0 7
15652: PUSH
15653: LD_VAR 0 2
15657: PPUSH
15658: LD_INT 22
15660: PUSH
15661: LD_VAR 0 1
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 2
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 34
15682: PUSH
15683: LD_INT 52
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 70
15699: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15700: LD_ADDR_VAR 0 8
15704: PUSH
15705: LD_VAR 0 2
15709: PPUSH
15710: LD_INT 22
15712: PUSH
15713: LD_VAR 0 1
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 3
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 3
15734: PUSH
15735: LD_INT 24
15737: PUSH
15738: LD_INT 1000
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: PPUSH
15757: CALL_OW 70
15761: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15762: LD_VAR 0 8
15766: PUSH
15767: LD_INT 0
15769: GREATER
15770: PUSH
15771: LD_VAR 0 7
15775: PPUSH
15776: LD_INT 24
15778: PUSH
15779: LD_INT 750
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PPUSH
15786: CALL_OW 72
15790: PUSH
15791: LD_INT 0
15793: GREATER
15794: AND
15795: IFFALSE 15815
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15797: LD_VAR 0 7
15801: PPUSH
15802: LD_VAR 0 8
15806: PUSH
15807: LD_INT 1
15809: ARRAY
15810: PPUSH
15811: CALL_OW 130
// end ;
15815: LD_VAR 0 3
15819: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15820: LD_INT 0
15822: PPUSH
15823: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15824: LD_INT 22
15826: PUSH
15827: LD_VAR 0 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 21
15838: PUSH
15839: LD_INT 2
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 69
15854: PUSH
15855: LD_INT 18
15857: PPUSH
15858: LD_INT 22
15860: PUSH
15861: LD_VAR 0 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 21
15872: PUSH
15873: LD_INT 2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PPUSH
15884: CALL_OW 70
15888: PUSH
15889: LD_VAR 0 3
15893: LESSEQUAL
15894: DIFF
15895: IFFALSE 15962
// for i = 1 to vehCount do
15897: LD_ADDR_VAR 0 9
15901: PUSH
15902: DOUBLE
15903: LD_INT 1
15905: DEC
15906: ST_TO_ADDR
15907: LD_VAR 0 3
15911: PUSH
15912: FOR_TO
15913: IFFALSE 15960
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15915: LD_VAR 0 2
15919: PPUSH
15920: LD_VAR 0 7
15924: PPUSH
15925: LD_VAR 0 5
15929: PPUSH
15930: LD_VAR 0 6
15934: PPUSH
15935: LD_VAR 0 4
15939: PUSH
15940: LD_INT 1
15942: PPUSH
15943: LD_VAR 0 4
15947: PPUSH
15948: CALL_OW 12
15952: ARRAY
15953: PPUSH
15954: CALL_OW 185
15958: GO 15912
15960: POP
15961: POP
// end ;
15962: LD_VAR 0 8
15966: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15967: LD_INT 0
15969: PPUSH
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
15974: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15975: LD_EXP 40
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: LD_INT 4
15985: PUSH
15986: LD_INT 4
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: PUSH
15994: LD_OWVAR 67
15998: ARRAY
15999: GREATEREQUAL
16000: PUSH
16001: LD_EXP 41
16005: PUSH
16006: LD_INT 1
16008: PUSH
16009: LD_INT 2
16011: PUSH
16012: LD_INT 2
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PUSH
16020: LD_OWVAR 67
16024: ARRAY
16025: GREATEREQUAL
16026: AND
16027: IFFALSE 16260
// begin repeat wait ( 0 0$3 ) ;
16029: LD_INT 105
16031: PPUSH
16032: CALL_OW 67
// for j in russianTanks do
16036: LD_ADDR_VAR 0 4
16040: PUSH
16041: LD_EXP 40
16045: PUSH
16046: FOR_IN
16047: IFFALSE 16248
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
16049: LD_ADDR_VAR 0 6
16053: PUSH
16054: LD_INT 81
16056: PUSH
16057: LD_VAR 0 1
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 101
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 69
16084: PPUSH
16085: LD_VAR 0 4
16089: PPUSH
16090: CALL_OW 74
16094: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
16095: LD_ADDR_VAR 0 7
16099: PUSH
16100: LD_INT 81
16102: PUSH
16103: LD_VAR 0 1
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 101
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: LD_INT 59
16127: PUSH
16128: EMPTY
16129: LIST
16130: PUSH
16131: LD_INT 21
16133: PUSH
16134: LD_INT 1
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 21
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: PPUSH
16165: CALL_OW 69
16169: PPUSH
16170: LD_VAR 0 4
16174: PPUSH
16175: CALL_OW 74
16179: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16180: LD_VAR 0 4
16184: PPUSH
16185: LD_VAR 0 6
16189: PPUSH
16190: CALL_OW 296
16194: PUSH
16195: LD_INT 8
16197: PLUS
16198: PUSH
16199: LD_VAR 0 4
16203: PPUSH
16204: LD_VAR 0 7
16208: PPUSH
16209: CALL_OW 296
16213: LESS
16214: IFFALSE 16232
// ComAttackUnit ( j , target1 ) else
16216: LD_VAR 0 4
16220: PPUSH
16221: LD_VAR 0 6
16225: PPUSH
16226: CALL_OW 115
16230: GO 16246
// ComAttackUnit ( j , target2 ) ;
16232: LD_VAR 0 4
16236: PPUSH
16237: LD_VAR 0 7
16241: PPUSH
16242: CALL_OW 115
// end ;
16246: GO 16046
16248: POP
16249: POP
// until russianTanks = 0 ;
16250: LD_EXP 40
16254: PUSH
16255: LD_INT 0
16257: EQUAL
16258: IFFALSE 16029
// end ; end ;
16260: LD_VAR 0 2
16264: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16265: LD_INT 0
16267: PPUSH
16268: PPUSH
16269: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16270: LD_EXP 40
16274: PUSH
16275: LD_INT 1
16277: GREATEREQUAL
16278: PUSH
16279: LD_EXP 41
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: PUSH
16298: LD_OWVAR 67
16302: ARRAY
16303: GREATEREQUAL
16304: AND
16305: IFFALSE 16455
// repeat wait ( 0 0$3 ) ;
16307: LD_INT 105
16309: PPUSH
16310: CALL_OW 67
// if russianTimeLapsers > 0 then
16314: LD_EXP 41
16318: PUSH
16319: LD_INT 0
16321: GREATER
16322: IFFALSE 16445
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16324: LD_ADDR_VAR 0 3
16328: PUSH
16329: LD_EXP 41
16333: PPUSH
16334: LD_INT 3
16336: PUSH
16337: LD_INT 60
16339: PUSH
16340: EMPTY
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 72
16351: PUSH
16352: FOR_IN
16353: IFFALSE 16443
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
16355: LD_ADDR_VAR 0 4
16359: PUSH
16360: LD_INT 81
16362: PUSH
16363: LD_VAR 0 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 101
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 21
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: PPUSH
16402: LD_VAR 0 3
16406: PPUSH
16407: CALL_OW 74
16411: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
16412: LD_VAR 0 3
16416: PPUSH
16417: LD_VAR 0 4
16421: PPUSH
16422: CALL_OW 250
16426: PPUSH
16427: LD_VAR 0 4
16431: PPUSH
16432: CALL_OW 251
16436: PPUSH
16437: CALL_OW 111
// end ;
16441: GO 16352
16443: POP
16444: POP
// until russianTimeLapsers = 0 ;
16445: LD_EXP 41
16449: PUSH
16450: LD_INT 0
16452: EQUAL
16453: IFFALSE 16307
// end ;
16455: LD_VAR 0 2
16459: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16460: LD_INT 0
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16468: LD_ADDR_VAR 0 6
16472: PUSH
16473: LD_INT 22
16475: PUSH
16476: LD_VAR 0 1
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 25
16487: PUSH
16488: LD_INT 9
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PPUSH
16499: CALL_OW 69
16503: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16504: LD_ADDR_VAR 0 7
16508: PUSH
16509: LD_INT 81
16511: PUSH
16512: LD_VAR 0 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: LD_INT 21
16526: PUSH
16527: LD_INT 3
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PPUSH
16542: CALL_OW 69
16546: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16547: LD_ADDR_VAR 0 4
16551: PUSH
16552: LD_INT 1
16554: PPUSH
16555: LD_INT 3
16557: PPUSH
16558: CALL_OW 12
16562: ST_TO_ADDR
// for i = 1 to list do
16563: LD_ADDR_VAR 0 5
16567: PUSH
16568: DOUBLE
16569: LD_INT 1
16571: DEC
16572: ST_TO_ADDR
16573: LD_VAR 0 6
16577: PUSH
16578: FOR_TO
16579: IFFALSE 16781
// for ta in filter do
16581: LD_ADDR_VAR 0 3
16585: PUSH
16586: LD_VAR 0 7
16590: PUSH
16591: FOR_IN
16592: IFFALSE 16777
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16594: LD_VAR 0 6
16598: PUSH
16599: LD_VAR 0 5
16603: ARRAY
16604: PPUSH
16605: LD_VAR 0 3
16609: PPUSH
16610: CALL_OW 296
16614: PUSH
16615: LD_INT 15
16617: LESSEQUAL
16618: IFFALSE 16775
// begin case c of 1 :
16620: LD_VAR 0 4
16624: PUSH
16625: LD_INT 1
16627: DOUBLE
16628: EQUAL
16629: IFTRUE 16633
16631: GO 16671
16633: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16634: LD_VAR 0 6
16638: PUSH
16639: LD_VAR 0 5
16643: ARRAY
16644: PPUSH
16645: LD_VAR 0 3
16649: PPUSH
16650: CALL_OW 250
16654: PPUSH
16655: LD_VAR 0 3
16659: PPUSH
16660: CALL_OW 251
16664: PPUSH
16665: CALL_OW 154
16669: GO 16775
16671: LD_INT 2
16673: DOUBLE
16674: EQUAL
16675: IFTRUE 16679
16677: GO 16743
16679: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16680: LD_VAR 0 6
16684: PUSH
16685: LD_VAR 0 5
16689: ARRAY
16690: PPUSH
16691: LD_VAR 0 3
16695: PPUSH
16696: CALL_OW 250
16700: PUSH
16701: LD_INT 1
16703: NEG
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 12
16712: PLUS
16713: PPUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: CALL_OW 251
16723: PUSH
16724: LD_INT 1
16726: NEG
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 12
16735: PLUS
16736: PPUSH
16737: CALL_OW 153
16741: GO 16775
16743: LD_INT 3
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 16774
16751: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16752: LD_VAR 0 6
16756: PUSH
16757: LD_VAR 0 5
16761: ARRAY
16762: PPUSH
16763: LD_VAR 0 3
16767: PPUSH
16768: CALL_OW 115
16772: GO 16775
16774: POP
// end ; end ;
16775: GO 16591
16777: POP
16778: POP
16779: GO 16578
16781: POP
16782: POP
// end ;
16783: LD_VAR 0 2
16787: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16788: LD_INT 0
16790: PPUSH
16791: PPUSH
16792: PPUSH
16793: PPUSH
// r := 100 ;
16794: LD_ADDR_VAR 0 5
16798: PUSH
16799: LD_INT 100
16801: ST_TO_ADDR
// x := 0 ;
16802: LD_ADDR_VAR 0 6
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// while ( x < n ) do
16810: LD_VAR 0 6
16814: PUSH
16815: LD_VAR 0 2
16819: LESS
16820: IFFALSE 17107
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16822: LD_ADDR_VAR 0 4
16826: PUSH
16827: DOUBLE
16828: LD_INT 1
16830: DEC
16831: ST_TO_ADDR
16832: LD_VAR 0 1
16836: PPUSH
16837: LD_INT 0
16839: PPUSH
16840: CALL_OW 517
16844: PUSH
16845: LD_INT 1
16847: ARRAY
16848: PUSH
16849: FOR_TO
16850: IFFALSE 17103
// begin if r > 50 then
16852: LD_VAR 0 5
16856: PUSH
16857: LD_INT 50
16859: GREATER
16860: IFFALSE 17079
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16862: LD_VAR 0 1
16866: PPUSH
16867: LD_INT 0
16869: PPUSH
16870: CALL_OW 517
16874: PUSH
16875: LD_INT 1
16877: ARRAY
16878: PUSH
16879: LD_VAR 0 4
16883: ARRAY
16884: PPUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: LD_INT 0
16892: PPUSH
16893: CALL_OW 517
16897: PUSH
16898: LD_INT 2
16900: ARRAY
16901: PUSH
16902: LD_VAR 0 4
16906: ARRAY
16907: PPUSH
16908: CALL_OW 458
16912: NOT
16913: IFFALSE 17063
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16915: LD_VAR 0 1
16919: PPUSH
16920: LD_INT 0
16922: PPUSH
16923: CALL_OW 517
16927: PUSH
16928: LD_INT 1
16930: ARRAY
16931: PUSH
16932: LD_VAR 0 4
16936: ARRAY
16937: PPUSH
16938: LD_VAR 0 1
16942: PPUSH
16943: LD_INT 0
16945: PPUSH
16946: CALL_OW 517
16950: PUSH
16951: LD_INT 2
16953: ARRAY
16954: PUSH
16955: LD_VAR 0 4
16959: ARRAY
16960: PPUSH
16961: LD_INT 8
16963: PPUSH
16964: LD_INT 0
16966: PPUSH
16967: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16971: LD_ADDR_EXP 45
16975: PUSH
16976: LD_EXP 45
16980: PPUSH
16981: LD_INT 1
16983: PPUSH
16984: LD_VAR 0 1
16988: PPUSH
16989: LD_INT 0
16991: PPUSH
16992: CALL_OW 517
16996: PUSH
16997: LD_INT 1
16999: ARRAY
17000: PUSH
17001: LD_VAR 0 4
17005: ARRAY
17006: PUSH
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 0
17014: PPUSH
17015: CALL_OW 517
17019: PUSH
17020: LD_INT 2
17022: ARRAY
17023: PUSH
17024: LD_VAR 0 4
17028: ARRAY
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PPUSH
17034: CALL_OW 2
17038: ST_TO_ADDR
// r := 0 ;
17039: LD_ADDR_VAR 0 5
17043: PUSH
17044: LD_INT 0
17046: ST_TO_ADDR
// x := x + 1 ;
17047: LD_ADDR_VAR 0 6
17051: PUSH
17052: LD_VAR 0 6
17056: PUSH
17057: LD_INT 1
17059: PLUS
17060: ST_TO_ADDR
// end else
17061: GO 17077
// r := r + 35 ;
17063: LD_ADDR_VAR 0 5
17067: PUSH
17068: LD_VAR 0 5
17072: PUSH
17073: LD_INT 35
17075: PLUS
17076: ST_TO_ADDR
// end else
17077: GO 17101
// r := r + rand ( 10 , 25 ) ;
17079: LD_ADDR_VAR 0 5
17083: PUSH
17084: LD_VAR 0 5
17088: PUSH
17089: LD_INT 10
17091: PPUSH
17092: LD_INT 25
17094: PPUSH
17095: CALL_OW 12
17099: PLUS
17100: ST_TO_ADDR
// end ;
17101: GO 16849
17103: POP
17104: POP
17105: GO 16810
// end ;
17107: LD_VAR 0 3
17111: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17112: LD_INT 0
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
// tmpTab = [ ] ;
17118: LD_ADDR_VAR 0 6
17122: PUSH
17123: EMPTY
17124: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17125: LD_INT 22
17127: PUSH
17128: LD_VAR 0 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 32
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 69
17155: PUSH
17156: LD_INT 0
17158: GREATER
17159: IFFALSE 17242
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17161: LD_ADDR_VAR 0 4
17165: PUSH
17166: LD_INT 22
17168: PUSH
17169: LD_VAR 0 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 30
17180: PUSH
17181: LD_INT 32
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: PUSH
17197: FOR_IN
17198: IFFALSE 17240
// begin for j in UnitsInside ( i ) do
17200: LD_ADDR_VAR 0 5
17204: PUSH
17205: LD_VAR 0 4
17209: PPUSH
17210: CALL_OW 313
17214: PUSH
17215: FOR_IN
17216: IFFALSE 17236
// tmpTab = tmpTab ^ j ;
17218: LD_ADDR_VAR 0 6
17222: PUSH
17223: LD_VAR 0 6
17227: PUSH
17228: LD_VAR 0 5
17232: ADD
17233: ST_TO_ADDR
17234: GO 17215
17236: POP
17237: POP
// end ;
17238: GO 17197
17240: POP
17241: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17242: LD_VAR 0 6
17246: PPUSH
17247: LD_VAR 0 2
17251: PPUSH
17252: CALL_OW 250
17256: PPUSH
17257: LD_VAR 0 2
17261: PPUSH
17262: CALL_OW 251
17266: PPUSH
17267: CALL_OW 114
// end ;
17271: LD_VAR 0 3
17275: RET
// export function PrepareNature ; var i , un ; begin
17276: LD_INT 0
17278: PPUSH
17279: PPUSH
17280: PPUSH
// uc_side := 0 ;
17281: LD_ADDR_OWVAR 20
17285: PUSH
17286: LD_INT 0
17288: ST_TO_ADDR
// uc_nation := 0 ;
17289: LD_ADDR_OWVAR 21
17293: PUSH
17294: LD_INT 0
17296: ST_TO_ADDR
// InitHc ;
17297: CALL_OW 19
// hc_class := class_fish ;
17301: LD_ADDR_OWVAR 28
17305: PUSH
17306: LD_INT 20
17308: ST_TO_ADDR
// for i = 1 to 6 do
17309: LD_ADDR_VAR 0 2
17313: PUSH
17314: DOUBLE
17315: LD_INT 1
17317: DEC
17318: ST_TO_ADDR
17319: LD_INT 6
17321: PUSH
17322: FOR_TO
17323: IFFALSE 17342
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17325: CALL_OW 44
17329: PPUSH
17330: LD_INT 23
17332: PPUSH
17333: LD_INT 0
17335: PPUSH
17336: CALL_OW 49
17340: GO 17322
17342: POP
17343: POP
// for i = 1 to Difficulty + 2 do
17344: LD_ADDR_VAR 0 2
17348: PUSH
17349: DOUBLE
17350: LD_INT 1
17352: DEC
17353: ST_TO_ADDR
17354: LD_OWVAR 67
17358: PUSH
17359: LD_INT 2
17361: PLUS
17362: PUSH
17363: FOR_TO
17364: IFFALSE 17473
// begin hc_sex = sex_male ;
17366: LD_ADDR_OWVAR 27
17370: PUSH
17371: LD_INT 1
17373: ST_TO_ADDR
// uc_side = 0 ;
17374: LD_ADDR_OWVAR 20
17378: PUSH
17379: LD_INT 0
17381: ST_TO_ADDR
// uc_nation = nation_nature ;
17382: LD_ADDR_OWVAR 21
17386: PUSH
17387: LD_INT 0
17389: ST_TO_ADDR
// hc_class = class_tiger ;
17390: LD_ADDR_OWVAR 28
17394: PUSH
17395: LD_INT 14
17397: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17398: LD_ADDR_OWVAR 31
17402: PUSH
17403: LD_EXP 38
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17423: LD_ADDR_OWVAR 35
17427: PUSH
17428: LD_INT 5
17430: NEG
17431: PPUSH
17432: LD_INT 5
17434: PPUSH
17435: CALL_OW 12
17439: PUSH
17440: LD_OWVAR 67
17444: MUL
17445: ST_TO_ADDR
// un = CreateHuman ;
17446: LD_ADDR_VAR 0 3
17450: PUSH
17451: CALL_OW 44
17455: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17456: LD_VAR 0 3
17460: PPUSH
17461: LD_INT 24
17463: PPUSH
17464: LD_INT 0
17466: PPUSH
17467: CALL_OW 49
// end ;
17471: GO 17363
17473: POP
17474: POP
// for i = 1 to rand ( 3 , 4 ) do
17475: LD_ADDR_VAR 0 2
17479: PUSH
17480: DOUBLE
17481: LD_INT 1
17483: DEC
17484: ST_TO_ADDR
17485: LD_INT 3
17487: PPUSH
17488: LD_INT 4
17490: PPUSH
17491: CALL_OW 12
17495: PUSH
17496: FOR_TO
17497: IFFALSE 17589
// begin hc_sex = sex_male ;
17499: LD_ADDR_OWVAR 27
17503: PUSH
17504: LD_INT 1
17506: ST_TO_ADDR
// uc_side = 0 ;
17507: LD_ADDR_OWVAR 20
17511: PUSH
17512: LD_INT 0
17514: ST_TO_ADDR
// uc_nation = nation_nature ;
17515: LD_ADDR_OWVAR 21
17519: PUSH
17520: LD_INT 0
17522: ST_TO_ADDR
// hc_class = 18 ;
17523: LD_ADDR_OWVAR 28
17527: PUSH
17528: LD_INT 18
17530: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17531: LD_ADDR_OWVAR 31
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: LD_INT 0
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: ST_TO_ADDR
// hc_agressivity = 0 ;
17554: LD_ADDR_OWVAR 35
17558: PUSH
17559: LD_INT 0
17561: ST_TO_ADDR
// un = CreateHuman ;
17562: LD_ADDR_VAR 0 3
17566: PUSH
17567: CALL_OW 44
17571: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17572: LD_VAR 0 3
17576: PPUSH
17577: LD_INT 24
17579: PPUSH
17580: LD_INT 0
17582: PPUSH
17583: CALL_OW 49
// end ;
17587: GO 17496
17589: POP
17590: POP
// for i = 1 to rand ( 1 , 3 ) do
17591: LD_ADDR_VAR 0 2
17595: PUSH
17596: DOUBLE
17597: LD_INT 1
17599: DEC
17600: ST_TO_ADDR
17601: LD_INT 1
17603: PPUSH
17604: LD_INT 3
17606: PPUSH
17607: CALL_OW 12
17611: PUSH
17612: FOR_TO
17613: IFFALSE 17761
// begin hc_sex = sex_male ;
17615: LD_ADDR_OWVAR 27
17619: PUSH
17620: LD_INT 1
17622: ST_TO_ADDR
// uc_side = 0 ;
17623: LD_ADDR_OWVAR 20
17627: PUSH
17628: LD_INT 0
17630: ST_TO_ADDR
// uc_nation = nation_nature ;
17631: LD_ADDR_OWVAR 21
17635: PUSH
17636: LD_INT 0
17638: ST_TO_ADDR
// hc_class = class_apeman ;
17639: LD_ADDR_OWVAR 28
17643: PUSH
17644: LD_INT 12
17646: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17647: LD_ADDR_OWVAR 31
17651: PUSH
17652: LD_EXP 37
17656: PPUSH
17657: LD_EXP 38
17661: PPUSH
17662: CALL_OW 12
17666: PUSH
17667: LD_EXP 37
17671: PPUSH
17672: LD_EXP 38
17676: PPUSH
17677: CALL_OW 12
17681: PUSH
17682: LD_EXP 37
17686: PPUSH
17687: LD_EXP 38
17691: PPUSH
17692: CALL_OW 12
17696: PUSH
17697: LD_EXP 37
17701: PPUSH
17702: LD_EXP 38
17706: PPUSH
17707: CALL_OW 12
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17718: LD_ADDR_OWVAR 35
17722: PUSH
17723: LD_INT 1
17725: PPUSH
17726: LD_INT 20
17728: PPUSH
17729: CALL_OW 12
17733: ST_TO_ADDR
// un = CreateHuman ;
17734: LD_ADDR_VAR 0 3
17738: PUSH
17739: CALL_OW 44
17743: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17744: LD_VAR 0 3
17748: PPUSH
17749: LD_INT 24
17751: PPUSH
17752: LD_INT 0
17754: PPUSH
17755: CALL_OW 49
// end ;
17759: GO 17612
17761: POP
17762: POP
// end ; end_of_file
17763: LD_VAR 0 1
17767: RET
// on UnitDestroyed ( unit ) do var i ;
17768: LD_INT 0
17770: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17771: LD_VAR 0 1
17775: PPUSH
17776: CALL_OW 255
17780: PUSH
17781: LD_INT 3
17783: EQUAL
17784: PUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 247
17794: PUSH
17795: LD_INT 1
17797: EQUAL
17798: AND
17799: IFFALSE 17863
// begin for i in RuScientists do
17801: LD_ADDR_VAR 0 2
17805: PUSH
17806: LD_EXP 35
17810: PUSH
17811: FOR_IN
17812: IFFALSE 17861
// if i = unit then
17814: LD_VAR 0 2
17818: PUSH
17819: LD_VAR 0 1
17823: EQUAL
17824: IFFALSE 17859
// begin RuScientists = RuScientists diff [ unit ] ;
17826: LD_ADDR_EXP 35
17830: PUSH
17831: LD_EXP 35
17835: PUSH
17836: LD_VAR 0 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: DIFF
17844: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17845: LD_ADDR_EXP 36
17849: PUSH
17850: LD_EXP 36
17854: PUSH
17855: LD_INT 1
17857: PLUS
17858: ST_TO_ADDR
// end ;
17859: GO 17811
17861: POP
17862: POP
// end ; end ;
17863: PPOPN 2
17865: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 10
17873: EQUAL
17874: PUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: CALL_OW 255
17884: PUSH
17885: LD_INT 1
17887: EQUAL
17888: AND
17889: PUSH
17890: LD_EXP 48
17894: PUSH
17895: LD_INT 0
17897: EQUAL
17898: AND
17899: IFFALSE 18011
// begin eventVar1 = 1 ;
17901: LD_ADDR_EXP 48
17905: PUSH
17906: LD_INT 1
17908: ST_TO_ADDR
// teleportExplored = 1 ;
17909: LD_ADDR_EXP 34
17913: PUSH
17914: LD_INT 1
17916: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17917: LD_STRING M2a
17919: PPUSH
17920: CALL_OW 337
// wait ( 0 0$2 ) ;
17924: LD_INT 70
17926: PPUSH
17927: CALL_OW 67
// DialogueOn ;
17931: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17935: LD_INT 22
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 21
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PPUSH
17959: CALL_OW 69
17963: PPUSH
17964: LD_STRING DT3a-Sol1-1
17966: PPUSH
17967: LD_STRING DT3a-FSol1-1
17969: PPUSH
17970: CALL 13403 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17974: LD_EXP 1
17978: PPUSH
17979: LD_STRING DT3a-JMM-1
17981: PPUSH
17982: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17986: LD_VAR 0 2
17990: PPUSH
17991: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17995: LD_EXP 1
17999: PPUSH
18000: LD_STRING DT3a-JMM-1a
18002: PPUSH
18003: CALL_OW 88
// DialogueOff ;
18007: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
18011: LD_VAR 0 1
18015: PUSH
18016: LD_INT 10
18018: EQUAL
18019: PUSH
18020: LD_VAR 0 2
18024: PPUSH
18025: CALL_OW 247
18029: PUSH
18030: LD_INT 2
18032: EQUAL
18033: AND
18034: PUSH
18035: LD_VAR 0 2
18039: PPUSH
18040: CALL_OW 255
18044: PUSH
18045: LD_INT 3
18047: EQUAL
18048: AND
18049: PUSH
18050: LD_EXP 29
18054: PUSH
18055: LD_INT 0
18057: EQUAL
18058: AND
18059: IFFALSE 18076
// begin wait ( 0 0$3 ) ;
18061: LD_INT 105
18063: PPUSH
18064: CALL_OW 67
// vehicleTeleported = 1 ;
18068: LD_ADDR_EXP 29
18072: PUSH
18073: LD_INT 1
18075: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
18076: LD_VAR 0 1
18080: PUSH
18081: LD_INT 10
18083: EQUAL
18084: PUSH
18085: LD_VAR 0 2
18089: PPUSH
18090: CALL_OW 247
18094: PUSH
18095: LD_INT 2
18097: EQUAL
18098: AND
18099: PUSH
18100: LD_VAR 0 2
18104: PPUSH
18105: CALL_OW 255
18109: PUSH
18110: LD_INT 3
18112: EQUAL
18113: AND
18114: PUSH
18115: LD_EXP 29
18119: PUSH
18120: LD_INT 2
18122: EQUAL
18123: AND
18124: IFFALSE 18141
// begin wait ( 0 0$3 ) ;
18126: LD_INT 105
18128: PPUSH
18129: CALL_OW 67
// vehicleTeleported = 3 ;
18133: LD_ADDR_EXP 29
18137: PUSH
18138: LD_INT 3
18140: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18141: LD_VAR 0 1
18145: PUSH
18146: LD_INT 10
18148: EQUAL
18149: PUSH
18150: LD_VAR 0 2
18154: PPUSH
18155: CALL_OW 247
18159: PUSH
18160: LD_INT 2
18162: EQUAL
18163: AND
18164: PUSH
18165: LD_VAR 0 2
18169: PPUSH
18170: CALL_OW 255
18174: PUSH
18175: LD_INT 3
18177: EQUAL
18178: AND
18179: IFFALSE 18195
// tpCounter = tpCounter + 1 ;
18181: LD_ADDR_EXP 30
18185: PUSH
18186: LD_EXP 30
18190: PUSH
18191: LD_INT 1
18193: PLUS
18194: ST_TO_ADDR
// end ;
18195: PPOPN 2
18197: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18198: LD_VAR 0 2
18202: PUSH
18203: LD_INT 21
18205: EQUAL
18206: PUSH
18207: LD_VAR 0 2
18211: PUSH
18212: LD_INT 112
18214: EQUAL
18215: OR
18216: IFFALSE 18394
// if GetSide ( vehicle ) = 3 then
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL_OW 255
18227: PUSH
18228: LD_INT 3
18230: EQUAL
18231: IFFALSE 18394
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 264
18242: PUSH
18243: LD_INT 46
18245: EQUAL
18246: PUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 264
18256: PUSH
18257: LD_INT 45
18259: EQUAL
18260: OR
18261: PUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 264
18271: PUSH
18272: LD_INT 44
18274: EQUAL
18275: OR
18276: IFFALSE 18351
// begin russianTanks = russianTanks ^ vehicle ;
18278: LD_ADDR_EXP 40
18282: PUSH
18283: LD_EXP 40
18287: PUSH
18288: LD_VAR 0 1
18292: ADD
18293: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18294: LD_EXP 44
18298: PUSH
18299: LD_INT 1
18301: EQUAL
18302: PUSH
18303: LD_EXP 44
18307: PUSH
18308: LD_INT 0
18310: EQUAL
18311: OR
18312: IFFALSE 18326
// ComEnterUnit ( vehicle , ruteleprt ) ;
18314: LD_VAR 0 1
18318: PPUSH
18319: LD_INT 10
18321: PPUSH
18322: CALL_OW 120
// if attackTactic = 2 then
18326: LD_EXP 44
18330: PUSH
18331: LD_INT 2
18333: EQUAL
18334: IFFALSE 18351
// ComMoveXY ( vehicle , 88 , 69 ) ;
18336: LD_VAR 0 1
18340: PPUSH
18341: LD_INT 88
18343: PPUSH
18344: LD_INT 69
18346: PPUSH
18347: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 264
18360: PUSH
18361: LD_INT 49
18363: EQUAL
18364: IFFALSE 18394
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18366: LD_ADDR_EXP 41
18370: PUSH
18371: LD_EXP 41
18375: PUSH
18376: LD_VAR 0 1
18380: ADD
18381: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18382: LD_VAR 0 1
18386: PPUSH
18387: LD_INT 137
18389: PPUSH
18390: CALL_OW 120
// end ; end ; end ;
18394: PPOPN 2
18396: END
// on UnitGoesToRed ( unit ) do var i ;
18397: LD_INT 0
18399: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL_OW 255
18409: PUSH
18410: LD_INT 3
18412: EQUAL
18413: PUSH
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 247
18423: PUSH
18424: LD_INT 2
18426: EQUAL
18427: AND
18428: IFFALSE 18546
// begin if russianTanks > 0 then
18430: LD_EXP 40
18434: PUSH
18435: LD_INT 0
18437: GREATER
18438: IFFALSE 18488
// for i in russianTanks do
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: LD_EXP 40
18449: PUSH
18450: FOR_IN
18451: IFFALSE 18486
// if i = unit then
18453: LD_VAR 0 2
18457: PUSH
18458: LD_VAR 0 1
18462: EQUAL
18463: IFFALSE 18484
// russianTanks = russianTanks diff [ unit ] ;
18465: LD_ADDR_EXP 40
18469: PUSH
18470: LD_EXP 40
18474: PUSH
18475: LD_VAR 0 1
18479: PUSH
18480: EMPTY
18481: LIST
18482: DIFF
18483: ST_TO_ADDR
18484: GO 18450
18486: POP
18487: POP
// if russianTimeLapsers > 0 then
18488: LD_EXP 41
18492: PUSH
18493: LD_INT 0
18495: GREATER
18496: IFFALSE 18546
// for i in russianTimeLapsers do
18498: LD_ADDR_VAR 0 2
18502: PUSH
18503: LD_EXP 41
18507: PUSH
18508: FOR_IN
18509: IFFALSE 18544
// if i = unit then
18511: LD_VAR 0 2
18515: PUSH
18516: LD_VAR 0 1
18520: EQUAL
18521: IFFALSE 18542
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18523: LD_ADDR_EXP 41
18527: PUSH
18528: LD_EXP 41
18532: PUSH
18533: LD_VAR 0 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: DIFF
18541: ST_TO_ADDR
18542: GO 18508
18544: POP
18545: POP
// end ; end ;
18546: PPOPN 2
18548: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18549: LD_INT 0
18551: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18552: LD_VAR 0 2
18556: PPUSH
18557: CALL_OW 255
18561: PUSH
18562: LD_INT 3
18564: EQUAL
18565: PUSH
18566: LD_VAR 0 2
18570: PPUSH
18571: CALL_OW 257
18575: PUSH
18576: LD_INT 3
18578: EQUAL
18579: AND
18580: PUSH
18581: LD_INT 21
18583: PPUSH
18584: CALL_OW 255
18588: PUSH
18589: LD_INT 3
18591: EQUAL
18592: AND
18593: PUSH
18594: LD_INT 21
18596: PPUSH
18597: CALL_OW 302
18601: AND
18602: IFFALSE 18616
// ComEnterUnit ( human , ru_fact ) ;
18604: LD_VAR 0 2
18608: PPUSH
18609: LD_INT 21
18611: PPUSH
18612: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18616: LD_VAR 0 2
18620: PPUSH
18621: CALL_OW 257
18625: PUSH
18626: LD_INT 4
18628: EQUAL
18629: PUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: CALL_OW 255
18639: PUSH
18640: LD_INT 3
18642: EQUAL
18643: AND
18644: PUSH
18645: LD_EXP 42
18649: PUSH
18650: LD_INT 0
18652: EQUAL
18653: AND
18654: IFFALSE 18716
// for i in RuScientists do
18656: LD_ADDR_VAR 0 3
18660: PUSH
18661: LD_EXP 35
18665: PUSH
18666: FOR_IN
18667: IFFALSE 18714
// if i = human then
18669: LD_VAR 0 3
18673: PUSH
18674: LD_VAR 0 2
18678: EQUAL
18679: IFFALSE 18712
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18681: LD_VAR 0 3
18685: PPUSH
18686: LD_INT 13
18688: PUSH
18689: LD_INT 14
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PPUSH
18699: LD_INT 2
18701: PPUSH
18702: CALL_OW 12
18706: ARRAY
18707: PPUSH
18708: CALL_OW 113
18712: GO 18666
18714: POP
18715: POP
// end ;
18716: PPOPN 3
18718: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18719: LD_INT 0
18721: PPUSH
18722: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18723: LD_VAR 0 2
18727: PPUSH
18728: CALL_OW 255
18732: PUSH
18733: LD_INT 3
18735: EQUAL
18736: PUSH
18737: LD_VAR 0 2
18741: PPUSH
18742: CALL_OW 257
18746: PUSH
18747: LD_INT 4
18749: EQUAL
18750: AND
18751: IFFALSE 18893
// for i in RuScientists do
18753: LD_ADDR_VAR 0 3
18757: PUSH
18758: LD_EXP 35
18762: PUSH
18763: FOR_IN
18764: IFFALSE 18891
// if i = human then
18766: LD_VAR 0 3
18770: PUSH
18771: LD_VAR 0 2
18775: EQUAL
18776: IFFALSE 18889
// if IsOk ( rutp ) then
18778: LD_INT 137
18780: PPUSH
18781: CALL_OW 302
18785: IFFALSE 18858
// begin rnd = rand ( 1 , 2 ) ;
18787: LD_ADDR_VAR 0 4
18791: PUSH
18792: LD_INT 1
18794: PPUSH
18795: LD_INT 2
18797: PPUSH
18798: CALL_OW 12
18802: ST_TO_ADDR
// if rnd = 1 then
18803: LD_VAR 0 4
18807: PUSH
18808: LD_INT 1
18810: EQUAL
18811: IFFALSE 18825
// ComEnterUnit ( vehicle , rutp ) ;
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_INT 137
18820: PPUSH
18821: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18825: LD_VAR 0 1
18829: PPUSH
18830: LD_INT 13
18832: PUSH
18833: LD_INT 14
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 1
18842: PPUSH
18843: LD_INT 2
18845: PPUSH
18846: CALL_OW 12
18850: ARRAY
18851: PPUSH
18852: CALL_OW 173
// end else
18856: GO 18889
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18858: LD_VAR 0 1
18862: PPUSH
18863: LD_INT 13
18865: PUSH
18866: LD_INT 14
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: PPUSH
18876: LD_INT 2
18878: PPUSH
18879: CALL_OW 12
18883: ARRAY
18884: PPUSH
18885: CALL_OW 113
// end ;
18889: GO 18763
18891: POP
18892: POP
// end ; end_of_file
18893: PPOPN 4
18895: END
// every 0 0$1 trigger ruAI = 1 do
18896: LD_EXP 42
18900: PUSH
18901: LD_INT 1
18903: EQUAL
18904: IFFALSE 19033
18906: GO 18908
18908: DISABLE
// begin enable ;
18909: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18910: LD_INT 3
18912: PPUSH
18913: LD_INT 6
18915: PPUSH
18916: LD_INT 9
18918: PPUSH
18919: LD_EXP 39
18923: PPUSH
18924: CALL 14439 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18928: LD_INT 3
18930: PPUSH
18931: LD_INT 4
18933: PPUSH
18934: LD_INT 10
18936: PPUSH
18937: LD_EXP 39
18941: PPUSH
18942: CALL 14439 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18946: LD_INT 3
18948: PPUSH
18949: LD_INT 9
18951: PPUSH
18952: CALL 15640 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18956: LD_INT 3
18958: PPUSH
18959: LD_INT 10
18961: PPUSH
18962: CALL 15640 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18966: LD_INT 3
18968: PPUSH
18969: LD_INT 16
18971: PPUSH
18972: LD_INT 9
18974: PPUSH
18975: LD_INT 91
18977: PPUSH
18978: CALL 14830 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18982: LD_INT 3
18984: PPUSH
18985: LD_INT 17
18987: PPUSH
18988: LD_INT 10
18990: PPUSH
18991: LD_INT 47
18993: PUSH
18994: LD_INT 129
18996: PUSH
18997: LD_INT 135
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL 14830 0 4
// AttackVehicles ( 3 ) ;
19009: LD_INT 3
19011: PPUSH
19012: CALL 15967 0 1
// IntBazooka ( 3 ) ;
19016: LD_INT 3
19018: PPUSH
19019: CALL 16460 0 1
// AttackNearBuildings ( 3 , 1 ) ;
19023: LD_INT 3
19025: PPUSH
19026: LD_INT 1
19028: PPUSH
19029: CALL 15410 0 2
// end ;
19033: END
// every 0 0$1 do
19034: GO 19036
19036: DISABLE
// begin enable ;
19037: ENABLE
// TimeLapsersAI ( 3 ) ;
19038: LD_INT 3
19040: PPUSH
19041: CALL 16265 0 1
// end ;
19045: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
19046: LD_INT 4
19048: PPUSH
19049: CALL_OW 303
19053: IFFALSE 19068
19055: GO 19057
19057: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
19058: LD_INT 3
19060: PPUSH
19061: LD_INT 4
19063: PPUSH
19064: CALL 17112 0 2
19068: END
// every 0 0$1 do
19069: GO 19071
19071: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
19072: LD_INT 3
19074: PPUSH
19075: LD_INT 91
19077: PPUSH
19078: LD_INT 3
19080: PPUSH
19081: CALL 14198 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
19085: LD_INT 3
19087: PPUSH
19088: LD_INT 47
19090: PPUSH
19091: LD_INT 3
19093: PPUSH
19094: CALL 14198 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
19098: LD_INT 3
19100: PPUSH
19101: LD_INT 129
19103: PPUSH
19104: LD_INT 3
19106: PPUSH
19107: CALL 14198 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
19111: LD_INT 3
19113: PPUSH
19114: LD_INT 3
19116: PPUSH
19117: LD_INT 3
19119: PPUSH
19120: CALL 14198 0 3
// end ;
19124: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19125: LD_EXP 28
19129: PUSH
19130: LD_INT 2
19132: EQUAL
19133: PUSH
19134: LD_INT 21
19136: PPUSH
19137: CALL_OW 255
19141: PUSH
19142: LD_INT 3
19144: EQUAL
19145: AND
19146: PUSH
19147: LD_INT 112
19149: PPUSH
19150: CALL_OW 255
19154: PUSH
19155: LD_INT 3
19157: EQUAL
19158: AND
19159: PUSH
19160: LD_INT 21
19162: PPUSH
19163: CALL_OW 302
19167: AND
19168: PUSH
19169: LD_INT 112
19171: PPUSH
19172: CALL_OW 302
19176: AND
19177: PUSH
19178: LD_INT 22
19180: PUSH
19181: LD_INT 3
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 21
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 50
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: LD_INT 3
19206: PUSH
19207: LD_INT 58
19209: PUSH
19210: EMPTY
19211: LIST
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: PPUSH
19223: CALL_OW 69
19227: PUSH
19228: LD_INT 18
19230: PPUSH
19231: LD_INT 22
19233: PUSH
19234: LD_INT 3
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 21
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PPUSH
19255: CALL_OW 70
19259: PUSH
19260: LD_INT 0
19262: EQUAL
19263: DIFF
19264: AND
19265: IFFALSE 19383
19267: GO 19269
19269: DISABLE
// begin enable ;
19270: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19271: LD_INT 3
19273: PPUSH
19274: LD_INT 21
19276: PPUSH
19277: LD_INT 3
19279: PUSH
19280: LD_INT 4
19282: PUSH
19283: LD_INT 4
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: PUSH
19291: LD_OWVAR 67
19295: ARRAY
19296: PPUSH
19297: LD_INT 46
19299: PUSH
19300: LD_INT 45
19302: PUSH
19303: LD_INT 44
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: PPUSH
19311: LD_INT 3
19313: PPUSH
19314: LD_INT 3
19316: PPUSH
19317: LD_INT 24
19319: PPUSH
19320: CALL 15820 0 7
// if russianTimeLapsers = 0 then
19324: LD_EXP 41
19328: PUSH
19329: LD_INT 0
19331: EQUAL
19332: IFFALSE 19383
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19334: LD_INT 3
19336: PPUSH
19337: LD_INT 112
19339: PPUSH
19340: LD_INT 1
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: LIST
19353: PUSH
19354: LD_OWVAR 67
19358: ARRAY
19359: PPUSH
19360: LD_INT 49
19362: PUSH
19363: LD_INT 49
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PPUSH
19370: LD_INT 3
19372: PPUSH
19373: LD_INT 3
19375: PPUSH
19376: LD_INT 24
19378: PPUSH
19379: CALL 15820 0 7
// end ;
19383: END
// every 0 0$1 trigger arabianMines do var i ;
19384: LD_EXP 45
19388: IFFALSE 19509
19390: GO 19392
19392: DISABLE
19393: LD_INT 0
19395: PPUSH
// begin enable ;
19396: ENABLE
// for i in arabianMines do
19397: LD_ADDR_VAR 0 1
19401: PUSH
19402: LD_EXP 45
19406: PUSH
19407: FOR_IN
19408: IFFALSE 19507
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19410: LD_INT 22
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 92
19422: PUSH
19423: LD_VAR 0 1
19427: PUSH
19428: LD_INT 1
19430: ARRAY
19431: PUSH
19432: LD_VAR 0 1
19436: PUSH
19437: LD_INT 2
19439: ARRAY
19440: PUSH
19441: LD_INT 3
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PPUSH
19454: CALL_OW 69
19458: IFFALSE 19505
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19460: LD_VAR 0 1
19464: PUSH
19465: LD_INT 1
19467: ARRAY
19468: PPUSH
19469: LD_VAR 0 1
19473: PUSH
19474: LD_INT 2
19476: ARRAY
19477: PPUSH
19478: LD_INT 5
19480: PPUSH
19481: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19485: LD_ADDR_EXP 45
19489: PUSH
19490: LD_EXP 45
19494: PPUSH
19495: LD_VAR 0 1
19499: PPUSH
19500: CALL_OW 3
19504: ST_TO_ADDR
// end ; end ;
19505: GO 19407
19507: POP
19508: POP
// end ;
19509: PPOPN 1
19511: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19512: LD_EXP 29
19516: PUSH
19517: LD_INT 4
19519: EQUAL
19520: PUSH
19521: LD_EXP 30
19525: PUSH
19526: LD_INT 6
19528: PUSH
19529: LD_INT 8
19531: PUSH
19532: LD_INT 8
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: LD_OWVAR 67
19544: ARRAY
19545: EQUAL
19546: AND
19547: IFFALSE 19565
19549: GO 19551
19551: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19552: LD_INT 10
19554: PPUSH
19555: LD_INT 47
19557: PPUSH
19558: LD_INT 82
19560: PPUSH
19561: CALL_OW 243
19565: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19566: LD_EXP 29
19570: PUSH
19571: LD_INT 4
19573: EQUAL
19574: IFFALSE 19596
19576: GO 19578
19578: DISABLE
// begin enable ;
19579: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19580: LD_ADDR_EXP 44
19584: PUSH
19585: LD_INT 1
19587: PPUSH
19588: LD_INT 2
19590: PPUSH
19591: CALL_OW 12
19595: ST_TO_ADDR
// end ; end_of_file
19596: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19597: LD_EXP 35
19601: PUSH
19602: EMPTY
19603: EQUAL
19604: PUSH
19605: LD_INT 3
19607: PPUSH
19608: CALL_OW 301
19612: AND
19613: IFFALSE 19818
19615: GO 19617
19617: DISABLE
// begin if sciCounter = 0 then
19618: LD_EXP 36
19622: PUSH
19623: LD_INT 0
19625: EQUAL
19626: IFFALSE 19652
// begin Say ( JMM , D7a-JMM-1 ) ;
19628: LD_EXP 1
19632: PPUSH
19633: LD_STRING D7a-JMM-1
19635: PPUSH
19636: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19640: LD_EXP 22
19644: PPUSH
19645: LD_STRING D7a-Pow-1
19647: PPUSH
19648: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19652: LD_EXP 36
19656: PUSH
19657: LD_INT 0
19659: GREATER
19660: PUSH
19661: LD_EXP 36
19665: PUSH
19666: LD_INT 6
19668: LESS
19669: AND
19670: IFFALSE 19696
// begin Say ( JMM , D7b-JMM-1 ) ;
19672: LD_EXP 1
19676: PPUSH
19677: LD_STRING D7b-JMM-1
19679: PPUSH
19680: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19684: LD_EXP 22
19688: PPUSH
19689: LD_STRING D7b-Pow-1
19691: PPUSH
19692: CALL_OW 94
// end ; if sciCounter = 6 then
19696: LD_EXP 36
19700: PUSH
19701: LD_INT 6
19703: EQUAL
19704: IFFALSE 19814
// begin Say ( JMM , D7c-JMM-1 ) ;
19706: LD_EXP 1
19710: PPUSH
19711: LD_STRING D7c-JMM-1
19713: PPUSH
19714: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19718: LD_EXP 22
19722: PPUSH
19723: LD_STRING D7c-Pow-1
19725: PPUSH
19726: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19730: LD_EXP 1
19734: PPUSH
19735: LD_STRING D7d-JMM-1
19737: PPUSH
19738: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19742: LD_EXP 22
19746: PPUSH
19747: LD_STRING D7d-Pow-1
19749: PPUSH
19750: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19754: LD_EXP 1
19758: PPUSH
19759: LD_STRING D7d-JMM-2
19761: PPUSH
19762: CALL_OW 88
// if askSiberite = 1 then
19766: LD_EXP 33
19770: PUSH
19771: LD_INT 1
19773: EQUAL
19774: IFFALSE 19790
// begin Say ( JMM , D7d-JMM-2a ) ;
19776: LD_EXP 1
19780: PPUSH
19781: LD_STRING D7d-JMM-2a
19783: PPUSH
19784: CALL_OW 88
// end else
19788: GO 19802
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19790: LD_EXP 22
19794: PPUSH
19795: LD_STRING D7d-Pow-2
19797: PPUSH
19798: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19802: LD_EXP 22
19806: PPUSH
19807: LD_STRING D7d-Pow-2a
19809: PPUSH
19810: CALL_OW 94
// end ; FinishMission ;
19814: CALL 19819 0 0
// end ;
19818: END
// export function FinishMission ; begin
19819: LD_INT 0
19821: PPUSH
// if teleportExplored = 1 then
19822: LD_EXP 34
19826: PUSH
19827: LD_INT 1
19829: EQUAL
19830: IFFALSE 19844
// AddMedal ( Teleport , 1 ) else
19832: LD_STRING Teleport
19834: PPUSH
19835: LD_INT 1
19837: PPUSH
19838: CALL_OW 101
19842: GO 19855
// AddMedal ( Teleport , - 1 ) ;
19844: LD_STRING Teleport
19846: PPUSH
19847: LD_INT 1
19849: NEG
19850: PPUSH
19851: CALL_OW 101
// if sciCounter > 2 then
19855: LD_EXP 36
19859: PUSH
19860: LD_INT 2
19862: GREATER
19863: IFFALSE 19877
// AddMedal ( Materials , 1 ) else
19865: LD_STRING Materials
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL_OW 101
19875: GO 19888
// AddMedal ( Materials , - 1 ) ;
19877: LD_STRING Materials
19879: PPUSH
19880: LD_INT 1
19882: NEG
19883: PPUSH
19884: CALL_OW 101
// if sciCounter = 6 then
19888: LD_EXP 36
19892: PUSH
19893: LD_INT 6
19895: EQUAL
19896: IFFALSE 19920
// begin AddMedal ( Scientists , 1 ) ;
19898: LD_STRING Scientists
19900: PPUSH
19901: LD_INT 1
19903: PPUSH
19904: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19908: LD_INT 1
19910: PPUSH
19911: LD_STRING 12_SciDed_1
19913: PPUSH
19914: CALL_OW 39
// end else
19918: GO 19941
// begin AddMedal ( Scientists , - 1 ) ;
19920: LD_STRING Scientists
19922: PPUSH
19923: LD_INT 1
19925: NEG
19926: PPUSH
19927: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19931: LD_INT 0
19933: PPUSH
19934: LD_STRING 12_SciDed_1
19936: PPUSH
19937: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19941: LD_EXP 32
19945: PPUSH
19946: LD_STRING 12_MainDepositFake_1
19948: PPUSH
19949: CALL_OW 39
// GiveMedals ( MAIN ) ;
19953: LD_STRING MAIN
19955: PPUSH
19956: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19960: LD_INT 22
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 21
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: LD_INT 25
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 25
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 25
20005: PUSH
20006: LD_INT 3
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 25
20015: PUSH
20016: LD_INT 4
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 25
20025: PUSH
20026: LD_INT 5
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 25
20035: PUSH
20036: LD_INT 8
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 69
20061: PPUSH
20062: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20066: LD_EXP 1
20070: PPUSH
20071: LD_EXP 47
20075: PUSH
20076: LD_STRING JMM
20078: STR
20079: PPUSH
20080: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20084: LD_EXP 7
20088: PPUSH
20089: LD_EXP 47
20093: PUSH
20094: LD_STRING Brown
20096: STR
20097: PPUSH
20098: CALL 13363 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20102: LD_EXP 3
20106: PPUSH
20107: LD_EXP 47
20111: PUSH
20112: LD_STRING Donaldson
20114: STR
20115: PPUSH
20116: CALL 13363 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20120: LD_EXP 4
20124: PPUSH
20125: LD_EXP 47
20129: PUSH
20130: LD_STRING Bobby
20132: STR
20133: PPUSH
20134: CALL 13363 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20138: LD_EXP 5
20142: PPUSH
20143: LD_EXP 47
20147: PUSH
20148: LD_STRING Cyrus
20150: STR
20151: PPUSH
20152: CALL 13363 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20156: LD_EXP 2
20160: PPUSH
20161: LD_EXP 47
20165: PUSH
20166: LD_STRING Lisa
20168: STR
20169: PPUSH
20170: CALL 13363 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20174: LD_EXP 12
20178: PPUSH
20179: LD_EXP 47
20183: PUSH
20184: LD_STRING Frank
20186: STR
20187: PPUSH
20188: CALL 13363 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20192: LD_EXP 13
20196: PPUSH
20197: LD_EXP 47
20201: PUSH
20202: LD_STRING Kikuchi
20204: STR
20205: PPUSH
20206: CALL 13363 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20210: LD_EXP 9
20214: PPUSH
20215: LD_EXP 47
20219: PUSH
20220: LD_STRING Houten
20222: STR
20223: PPUSH
20224: CALL 13363 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20228: LD_EXP 11
20232: PPUSH
20233: LD_EXP 47
20237: PUSH
20238: LD_STRING Gary
20240: STR
20241: PPUSH
20242: CALL 13363 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20246: LD_EXP 10
20250: PPUSH
20251: LD_EXP 47
20255: PUSH
20256: LD_STRING Cornell
20258: STR
20259: PPUSH
20260: CALL 13363 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20264: LD_EXP 6
20268: PPUSH
20269: LD_EXP 47
20273: PUSH
20274: LD_STRING Denis
20276: STR
20277: PPUSH
20278: CALL 13363 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20282: LD_EXP 8
20286: PPUSH
20287: LD_EXP 47
20291: PUSH
20292: LD_STRING Gladstone
20294: STR
20295: PPUSH
20296: CALL 13363 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20300: LD_INT 22
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 23
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 21
20322: PUSH
20323: LD_INT 1
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: LD_INT 25
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 25
20345: PUSH
20346: LD_INT 2
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 25
20355: PUSH
20356: LD_INT 3
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 25
20365: PUSH
20366: LD_INT 4
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 25
20375: PUSH
20376: LD_INT 5
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 25
20385: PUSH
20386: LD_INT 8
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: PPUSH
20408: CALL_OW 69
20412: PUSH
20413: LD_EXP 1
20417: PUSH
20418: LD_EXP 7
20422: PUSH
20423: LD_EXP 3
20427: PUSH
20428: LD_EXP 4
20432: PUSH
20433: LD_EXP 5
20437: PUSH
20438: LD_EXP 2
20442: PUSH
20443: LD_EXP 12
20447: PUSH
20448: LD_EXP 8
20452: PUSH
20453: LD_EXP 13
20457: PUSH
20458: LD_EXP 6
20462: PUSH
20463: LD_EXP 9
20467: PUSH
20468: LD_EXP 11
20472: PUSH
20473: LD_EXP 10
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: DIFF
20493: PPUSH
20494: LD_STRING 12_other_survivors
20496: PPUSH
20497: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20501: LD_INT 22
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 23
20513: PUSH
20514: LD_INT 2
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 21
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 2
20533: PUSH
20534: LD_INT 25
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 25
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 25
20556: PUSH
20557: LD_INT 3
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 25
20566: PUSH
20567: LD_INT 4
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 25
20576: PUSH
20577: LD_INT 5
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 25
20586: PUSH
20587: LD_INT 8
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: PPUSH
20609: CALL_OW 69
20613: PPUSH
20614: LD_STRING 12_kurt_squad
20616: PPUSH
20617: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
20621: LD_EXP 14
20625: PPUSH
20626: LD_STRING 12_others
20628: PPUSH
20629: CALL_OW 38
// YouWin ;
20633: CALL_OW 103
// end ; end_of_file
20637: LD_VAR 0 1
20641: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20642: LD_EXP 1
20646: PPUSH
20647: CALL_OW 301
20651: IFFALSE 20663
20653: GO 20655
20655: DISABLE
// YouLost ( JMM ) ; end_of_file
20656: LD_STRING JMM
20658: PPUSH
20659: CALL_OW 104
20663: END
// every 0 0$01 do
20664: GO 20666
20666: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20667: LD_INT 1050
20669: PPUSH
20670: CALL_OW 67
// if cratesSpawned < 6 then
20674: LD_EXP 46
20678: PUSH
20679: LD_INT 6
20681: LESS
20682: IFFALSE 20719
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20684: LD_INT 3
20686: PPUSH
20687: LD_INT 5
20689: PPUSH
20690: CALL_OW 12
20694: PPUSH
20695: LD_INT 21
20697: PPUSH
20698: LD_INT 1
20700: PPUSH
20701: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20705: LD_ADDR_EXP 46
20709: PUSH
20710: LD_EXP 46
20714: PUSH
20715: LD_INT 1
20717: PLUS
20718: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20719: LD_EXP 46
20723: PUSH
20724: LD_INT 6
20726: GREATEREQUAL
20727: PUSH
20728: LD_EXP 46
20732: PUSH
20733: LD_INT 12
20735: LESS
20736: AND
20737: IFFALSE 20781
// begin wait ( 0 0$30 ) ;
20739: LD_INT 1050
20741: PPUSH
20742: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20746: LD_INT 3
20748: PPUSH
20749: LD_INT 5
20751: PPUSH
20752: CALL_OW 12
20756: PPUSH
20757: LD_INT 21
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20767: LD_ADDR_EXP 46
20771: PUSH
20772: LD_EXP 46
20776: PUSH
20777: LD_INT 1
20779: PLUS
20780: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20781: LD_EXP 46
20785: PUSH
20786: LD_INT 12
20788: GREATEREQUAL
20789: IFFALSE 20833
// begin wait ( 1 1$30 ) ;
20791: LD_INT 3150
20793: PPUSH
20794: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20798: LD_INT 3
20800: PPUSH
20801: LD_INT 5
20803: PPUSH
20804: CALL_OW 12
20808: PPUSH
20809: LD_INT 21
20811: PPUSH
20812: LD_INT 1
20814: PPUSH
20815: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20819: LD_ADDR_EXP 46
20823: PUSH
20824: LD_EXP 46
20828: PUSH
20829: LD_INT 1
20831: PLUS
20832: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20833: LD_EXP 46
20837: PUSH
20838: LD_INT 15
20840: GREATEREQUAL
20841: IFFALSE 20667
// end ;
20843: END
