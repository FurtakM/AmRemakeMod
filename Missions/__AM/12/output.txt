// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 42
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// askSiberite = 0 ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// warWithLegion = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// fakeInfo = 0 ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// cratesSpawned = 0 ;
 127: LD_ADDR_EXP 43
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// ruAI = 0 ;
 135: LD_ADDR_EXP 41
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// eventVar1 = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// mission_prefix = 12_ ;
 151: LD_ADDR_EXP 44
 155: PUSH
 156: LD_STRING 12_
 158: ST_TO_ADDR
// debugMode = 0 ;
 159: LD_ADDR_EXP 46
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// PrepareDifficulty ;
 167: CALL 13235 0 0
// PrepareVehicles ;
 171: CALL 1908 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 175: LD_INT 4
 177: PPUSH
 178: LD_INT 0
 180: PPUSH
 181: LD_INT 1
 183: PPUSH
 184: LD_INT 0
 186: PPUSH
 187: CALL 1443 0 4
// PrepareAmericanHeroes ;
 191: CALL 529 0 0
// PrepareRussianCommander ;
 195: CALL 3458 0 0
// PrepareWestBase ;
 199: CALL 3970 0 0
// PrepareEastBase ;
 203: CALL 3530 0 0
// PrepareOtherRussians ;
 207: CALL 4082 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 46
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ; end_of_file
 526: PPOPN 1
 528: END
// export function PrepareAmericanHeroes ; begin
 529: LD_INT 0
 531: PPUSH
// uc_side = 1 ;
 532: LD_ADDR_OWVAR 20
 536: PUSH
 537: LD_INT 1
 539: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) ;
 540: LD_ADDR_EXP 14
 544: PUSH
 545: LD_STRING 11c_others
 547: PPUSH
 548: CALL_OW 31
 552: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 553: LD_ADDR_EXP 1
 557: PUSH
 558: LD_STRING 11_JMM
 560: PPUSH
 561: LD_INT 1
 563: PPUSH
 564: CALL 12874 0 2
 568: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 569: LD_EXP 1
 573: PPUSH
 574: LD_INT 1
 576: PPUSH
 577: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 581: LD_EXP 1
 585: PPUSH
 586: LD_INT 22
 588: PUSH
 589: LD_INT 1
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: PUSH
 596: LD_INT 21
 598: PUSH
 599: LD_INT 2
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: PUSH
 606: LD_INT 58
 608: PUSH
 609: EMPTY
 610: LIST
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: LD_INT 1
 624: ARRAY
 625: PPUSH
 626: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 630: LD_STRING 11_Lisa
 632: PPUSH
 633: CALL_OW 28
 637: PUSH
 638: LD_INT 1
 640: EQUAL
 641: IFFALSE 688
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 643: LD_ADDR_EXP 2
 647: PUSH
 648: LD_STRING 11_Lisa
 650: PPUSH
 651: LD_INT 1
 653: PPUSH
 654: CALL 12874 0 2
 658: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 659: LD_EXP 2
 663: PPUSH
 664: LD_INT 1
 666: PPUSH
 667: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 671: LD_EXP 2
 675: PPUSH
 676: LD_INT 4
 678: PPUSH
 679: LD_INT 0
 681: PPUSH
 682: CALL_OW 49
// end else
 686: GO 762
// begin if TestCharacters ( 10c_Lisa ) = true then
 688: LD_STRING 10c_Lisa
 690: PPUSH
 691: CALL_OW 28
 695: PUSH
 696: LD_INT 1
 698: EQUAL
 699: IFFALSE 746
// begin Lisa = PrepareUnit ( 10c_Lisa , true ) ;
 701: LD_ADDR_EXP 2
 705: PUSH
 706: LD_STRING 10c_Lisa
 708: PPUSH
 709: LD_INT 1
 711: PPUSH
 712: CALL 12874 0 2
 716: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 717: LD_EXP 2
 721: PPUSH
 722: LD_INT 1
 724: PPUSH
 725: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 729: LD_EXP 2
 733: PPUSH
 734: LD_INT 4
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 49
// end else
 744: GO 762
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 746: LD_INT 4
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: CALL 1443 0 4
// end ; end ; if TestCharacters ( 11_Donaldson ) = true then
 762: LD_STRING 11_Donaldson
 764: PPUSH
 765: CALL_OW 28
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: IFFALSE 820
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 775: LD_ADDR_EXP 3
 779: PUSH
 780: LD_STRING 11_Donaldson
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: CALL 12874 0 2
 790: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 791: LD_EXP 3
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 803: LD_EXP 3
 807: PPUSH
 808: LD_INT 4
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// end else
 818: GO 894
// begin if TestCharacters ( 10c_Donaldson ) = true then
 820: LD_STRING 10c_Donaldson
 822: PPUSH
 823: CALL_OW 28
 827: PUSH
 828: LD_INT 1
 830: EQUAL
 831: IFFALSE 878
// begin Donaldson = PrepareUnit ( 10c_Donaldson , true ) ;
 833: LD_ADDR_EXP 3
 837: PUSH
 838: LD_STRING 10c_Donaldson
 840: PPUSH
 841: LD_INT 1
 843: PPUSH
 844: CALL 12874 0 2
 848: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 849: LD_EXP 3
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 4
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end else
 876: GO 894
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 878: LD_INT 4
 880: PPUSH
 881: LD_INT 0
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL 1443 0 4
// end ; end ; if TestCharacters ( 11_Cyrus ) = true then
 894: LD_STRING 11_Cyrus
 896: PPUSH
 897: CALL_OW 28
 901: PUSH
 902: LD_INT 1
 904: EQUAL
 905: IFFALSE 952
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 907: LD_ADDR_EXP 5
 911: PUSH
 912: LD_STRING 11_Cyrus
 914: PPUSH
 915: LD_INT 1
 917: PPUSH
 918: CALL 12874 0 2
 922: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 923: LD_EXP 5
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 935: LD_EXP 5
 939: PPUSH
 940: LD_INT 4
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL_OW 49
// end else
 950: GO 1026
// begin if TestCharacters ( 10c_Cyrus ) = true then
 952: LD_STRING 10c_Cyrus
 954: PPUSH
 955: CALL_OW 28
 959: PUSH
 960: LD_INT 1
 962: EQUAL
 963: IFFALSE 1010
// begin Cyrus = PrepareUnit ( 10c_Cyrus , true ) ;
 965: LD_ADDR_EXP 5
 969: PUSH
 970: LD_STRING 10c_Cyrus
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL 12874 0 2
 980: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 981: LD_EXP 5
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 993: LD_EXP 5
 997: PPUSH
 998: LD_INT 4
1000: PPUSH
1001: LD_INT 0
1003: PPUSH
1004: CALL_OW 49
// end else
1008: GO 1026
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1010: LD_INT 4
1012: PPUSH
1013: LD_INT 0
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_INT 0
1021: PPUSH
1022: CALL 1443 0 4
// end ; end ; if TestCharacters ( 11_Denis ) = true then
1026: LD_STRING 11_Denis
1028: PPUSH
1029: CALL_OW 28
1033: PUSH
1034: LD_INT 1
1036: EQUAL
1037: IFFALSE 1084
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
1039: LD_ADDR_EXP 6
1043: PUSH
1044: LD_STRING 11_Denis
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 12874 0 2
1054: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1055: LD_EXP 6
1059: PPUSH
1060: LD_INT 4
1062: PPUSH
1063: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1067: LD_EXP 6
1071: PPUSH
1072: LD_INT 4
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// end else
1082: GO 1158
// begin if TestCharacters ( 10c_Denis ) = true then
1084: LD_STRING 10c_Denis
1086: PPUSH
1087: CALL_OW 28
1091: PUSH
1092: LD_INT 1
1094: EQUAL
1095: IFFALSE 1142
// begin Denis = PrepareUnit ( 10c_Denis , true ) ;
1097: LD_ADDR_EXP 6
1101: PUSH
1102: LD_STRING 10c_Denis
1104: PPUSH
1105: LD_INT 1
1107: PPUSH
1108: CALL 12874 0 2
1112: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1113: LD_EXP 6
1117: PPUSH
1118: LD_INT 4
1120: PPUSH
1121: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1125: LD_EXP 6
1129: PPUSH
1130: LD_INT 4
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 49
// end else
1140: GO 1158
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1142: LD_INT 4
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL 1443 0 4
// end ; end ; if TestCharacters ( 11_Frank ) = true then
1158: LD_STRING 11_Frank
1160: PPUSH
1161: CALL_OW 28
1165: PUSH
1166: LD_INT 1
1168: EQUAL
1169: IFFALSE 1216
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1171: LD_ADDR_EXP 12
1175: PUSH
1176: LD_STRING 11_Frank
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: CALL 12874 0 2
1186: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1187: LD_EXP 12
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1199: LD_EXP 12
1203: PPUSH
1204: LD_INT 4
1206: PPUSH
1207: LD_INT 0
1209: PPUSH
1210: CALL_OW 49
// end else
1214: GO 1290
// begin if TestCharacters ( 10c_Frank ) = true then
1216: LD_STRING 10c_Frank
1218: PPUSH
1219: CALL_OW 28
1223: PUSH
1224: LD_INT 1
1226: EQUAL
1227: IFFALSE 1274
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1229: LD_ADDR_EXP 12
1233: PUSH
1234: LD_STRING 11_Frank
1236: PPUSH
1237: LD_INT 1
1239: PPUSH
1240: CALL 12874 0 2
1244: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1245: LD_EXP 12
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1257: LD_EXP 12
1261: PPUSH
1262: LD_INT 4
1264: PPUSH
1265: LD_INT 0
1267: PPUSH
1268: CALL_OW 49
// end else
1272: GO 1290
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1274: LD_INT 4
1276: PPUSH
1277: LD_INT 0
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL 1443 0 4
// end ; end ; if TestCharacters ( 11_Cornell ) = true then
1290: LD_STRING 11_Cornell
1292: PPUSH
1293: CALL_OW 28
1297: PUSH
1298: LD_INT 1
1300: EQUAL
1301: IFFALSE 1348
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1303: LD_ADDR_EXP 10
1307: PUSH
1308: LD_STRING 11_Cornell
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: CALL 12874 0 2
1318: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1319: LD_EXP 10
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1331: LD_EXP 10
1335: PPUSH
1336: LD_INT 4
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL_OW 49
// end else
1346: GO 1422
// begin if TestCharacters ( 10c_Cornell ) = true then
1348: LD_STRING 10c_Cornell
1350: PPUSH
1351: CALL_OW 28
1355: PUSH
1356: LD_INT 1
1358: EQUAL
1359: IFFALSE 1406
// begin Cornel = PrepareUnit ( 10c_Cornell , true ) ;
1361: LD_ADDR_EXP 10
1365: PUSH
1366: LD_STRING 10c_Cornell
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: CALL 12874 0 2
1376: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1377: LD_EXP 10
1381: PPUSH
1382: LD_INT 1
1384: PPUSH
1385: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1389: LD_EXP 10
1393: PPUSH
1394: LD_INT 4
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// end else
1404: GO 1422
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1406: LD_INT 4
1408: PPUSH
1409: LD_INT 0
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL 1443 0 4
// end ; end ; Powell = PrepareUnit ( Powell , false ) ;
1422: LD_ADDR_EXP 22
1426: PUSH
1427: LD_STRING Powell
1429: PPUSH
1430: LD_INT 0
1432: PPUSH
1433: CALL 12874 0 2
1437: ST_TO_ADDR
// end ;
1438: LD_VAR 0 1
1442: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha , iter ; begin
1443: LD_INT 0
1445: PPUSH
1446: PPUSH
1447: PPUSH
1448: PPUSH
1449: PPUSH
1450: PPUSH
// if mech = 1 then
1451: LD_VAR 0 4
1455: PUSH
1456: LD_INT 1
1458: EQUAL
1459: IFFALSE 1734
// begin if others11 > 0 then
1461: LD_EXP 14
1465: PUSH
1466: LD_INT 0
1468: GREATER
1469: IFFALSE 1674
// begin tmp = GetSkill ( others11 [ i ] , 3 ) ;
1471: LD_ADDR_VAR 0 8
1475: PUSH
1476: LD_EXP 14
1480: PUSH
1481: LD_VAR 0 6
1485: ARRAY
1486: PPUSH
1487: LD_INT 3
1489: PPUSH
1490: CALL_OW 259
1494: ST_TO_ADDR
// for i := 1 to others11 - 1 do
1495: LD_ADDR_VAR 0 6
1499: PUSH
1500: DOUBLE
1501: LD_INT 1
1503: DEC
1504: ST_TO_ADDR
1505: LD_EXP 14
1509: PUSH
1510: LD_INT 1
1512: MINUS
1513: PUSH
1514: FOR_TO
1515: IFFALSE 1611
// begin if tmp < GetSkill ( others11 [ i + 1 ] , 3 ) then
1517: LD_VAR 0 8
1521: PUSH
1522: LD_EXP 14
1526: PUSH
1527: LD_VAR 0 6
1531: PUSH
1532: LD_INT 1
1534: PLUS
1535: ARRAY
1536: PPUSH
1537: LD_INT 3
1539: PPUSH
1540: CALL_OW 259
1544: LESS
1545: IFFALSE 1609
// begin tmp = GetSkill ( others11 [ i + 1 ] , 3 ) ;
1547: LD_ADDR_VAR 0 8
1551: PUSH
1552: LD_EXP 14
1556: PUSH
1557: LD_VAR 0 6
1561: PUSH
1562: LD_INT 1
1564: PLUS
1565: ARRAY
1566: PPUSH
1567: LD_INT 3
1569: PPUSH
1570: CALL_OW 259
1574: ST_TO_ADDR
// mecha = others11 [ i + 1 ] ;
1575: LD_ADDR_VAR 0 9
1579: PUSH
1580: LD_EXP 14
1584: PUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 1
1592: PLUS
1593: ARRAY
1594: ST_TO_ADDR
// iter = i + 1 ;
1595: LD_ADDR_VAR 0 10
1599: PUSH
1600: LD_VAR 0 6
1604: PUSH
1605: LD_INT 1
1607: PLUS
1608: ST_TO_ADDR
// end ; end ;
1609: GO 1514
1611: POP
1612: POP
// if spawnMode = 1 then
1613: LD_VAR 0 3
1617: PUSH
1618: LD_INT 1
1620: EQUAL
1621: IFFALSE 1642
// PlaceUnitArea ( mecha , area , false ) else
1623: LD_VAR 0 9
1627: PPUSH
1628: LD_VAR 0 1
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
1640: GO 1656
// PlaceHumanInUnit ( mecha , veh ) ;
1642: LD_VAR 0 9
1646: PPUSH
1647: LD_VAR 0 2
1651: PPUSH
1652: CALL_OW 52
// others11 := others11 diff mecha ;
1656: LD_ADDR_EXP 14
1660: PUSH
1661: LD_EXP 14
1665: PUSH
1666: LD_VAR 0 9
1670: DIFF
1671: ST_TO_ADDR
// end else
1672: GO 1732
// begin hc_name =  ;
1674: LD_ADDR_OWVAR 26
1678: PUSH
1679: LD_STRING 
1681: ST_TO_ADDR
// hc_gallery =  ;
1682: LD_ADDR_OWVAR 33
1686: PUSH
1687: LD_STRING 
1689: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1690: LD_INT 0
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: LD_INT 9
1698: PPUSH
1699: CALL_OW 12
1703: PPUSH
1704: CALL_OW 383
// un = CreateHuman ;
1708: LD_ADDR_VAR 0 7
1712: PUSH
1713: CALL_OW 44
1717: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1718: LD_VAR 0 7
1722: PPUSH
1723: LD_VAR 0 2
1727: PPUSH
1728: CALL_OW 52
// end ; end else
1732: GO 1903
// begin if others11 > 0 then
1734: LD_EXP 14
1738: PUSH
1739: LD_INT 0
1741: GREATER
1742: IFFALSE 1815
// begin if spawnMode = 1 then
1744: LD_VAR 0 3
1748: PUSH
1749: LD_INT 1
1751: EQUAL
1752: IFFALSE 1777
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1754: LD_EXP 14
1758: PUSH
1759: LD_INT 1
1761: ARRAY
1762: PPUSH
1763: LD_VAR 0 1
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL_OW 49
1775: GO 1795
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1777: LD_EXP 14
1781: PUSH
1782: LD_INT 1
1784: ARRAY
1785: PPUSH
1786: LD_VAR 0 2
1790: PPUSH
1791: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1795: LD_ADDR_EXP 14
1799: PUSH
1800: LD_EXP 14
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: CALL_OW 3
1812: ST_TO_ADDR
// end else
1813: GO 1903
// begin hc_name =  ;
1815: LD_ADDR_OWVAR 26
1819: PUSH
1820: LD_STRING 
1822: ST_TO_ADDR
// hc_gallery =  ;
1823: LD_ADDR_OWVAR 33
1827: PUSH
1828: LD_STRING 
1830: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1831: LD_INT 0
1833: PPUSH
1834: LD_INT 1
1836: PUSH
1837: LD_INT 2
1839: PUSH
1840: LD_INT 3
1842: PUSH
1843: LD_INT 4
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 4
1857: PPUSH
1858: CALL_OW 12
1862: ARRAY
1863: PPUSH
1864: LD_INT 7
1866: PPUSH
1867: LD_INT 9
1869: PPUSH
1870: CALL_OW 12
1874: PPUSH
1875: CALL_OW 380
// un = CreateHuman ;
1879: LD_ADDR_VAR 0 7
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1889: LD_VAR 0 7
1893: PPUSH
1894: LD_VAR 0 2
1898: PPUSH
1899: CALL_OW 52
// end ; end ; end ;
1903: LD_VAR 0 5
1907: RET
// export function PrepareVehicles ; var veh ; begin
1908: LD_INT 0
1910: PPUSH
1911: PPUSH
// uc_side = 1 ;
1912: LD_ADDR_OWVAR 20
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// uc_nation = 1 ;
1920: LD_ADDR_OWVAR 21
1924: PUSH
1925: LD_INT 1
1927: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1928: LD_ADDR_OWVAR 37
1932: PUSH
1933: LD_INT 3
1935: ST_TO_ADDR
// vc_engine = 3 ;
1936: LD_ADDR_OWVAR 39
1940: PUSH
1941: LD_INT 3
1943: ST_TO_ADDR
// vc_control = 3 ;
1944: LD_ADDR_OWVAR 38
1948: PUSH
1949: LD_INT 3
1951: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1952: LD_ADDR_OWVAR 40
1956: PUSH
1957: LD_INT 4
1959: ST_TO_ADDR
// veh = CreateVehicle ;
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: CALL_OW 45
1969: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1970: LD_VAR 0 2
1974: PPUSH
1975: LD_INT 4
1977: PPUSH
1978: LD_INT 0
1980: PPUSH
1981: CALL_OW 49
// vc_weapon = us_double_gun ;
1985: LD_ADDR_OWVAR 40
1989: PUSH
1990: LD_INT 5
1992: ST_TO_ADDR
// vc_control = 1 ;
1993: LD_ADDR_OWVAR 38
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// veh = CreateVehicle ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: CALL_OW 45
2010: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2011: LD_VAR 0 2
2015: PPUSH
2016: LD_INT 4
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: CALL_OW 49
// vc_weapon = us_light_gun ;
2026: LD_ADDR_OWVAR 40
2030: PUSH
2031: LD_INT 3
2033: ST_TO_ADDR
// vc_control = 3 ;
2034: LD_ADDR_OWVAR 38
2038: PUSH
2039: LD_INT 3
2041: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// veh = CreateVehicle ;
2050: LD_ADDR_VAR 0 2
2054: PUSH
2055: CALL_OW 45
2059: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_INT 4
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL_OW 49
// vc_weapon = us_gatling_gun ;
2075: LD_ADDR_OWVAR 40
2079: PUSH
2080: LD_INT 4
2082: ST_TO_ADDR
// veh = CreateVehicle ;
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: CALL_OW 45
2092: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2093: LD_VAR 0 2
2097: PPUSH
2098: LD_INT 4
2100: PPUSH
2101: LD_INT 0
2103: PPUSH
2104: CALL_OW 49
// end ;
2108: LD_VAR 0 1
2112: RET
// export function PowellSupport1 ; var veh , un ; begin
2113: LD_INT 0
2115: PPUSH
2116: PPUSH
2117: PPUSH
// uc_side = 1 ;
2118: LD_ADDR_OWVAR 20
2122: PUSH
2123: LD_INT 1
2125: ST_TO_ADDR
// uc_nation = 1 ;
2126: LD_ADDR_OWVAR 21
2130: PUSH
2131: LD_INT 1
2133: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
2134: LD_STRING 11_Brown
2136: PPUSH
2137: CALL_OW 28
2141: PUSH
2142: LD_INT 1
2144: EQUAL
2145: IFFALSE 2192
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
2147: LD_ADDR_EXP 7
2151: PUSH
2152: LD_STRING 11_Brown
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: CALL 12874 0 2
2162: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2163: LD_EXP 7
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2175: LD_EXP 7
2179: PPUSH
2180: LD_INT 4
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
// end else
2190: GO 2266
// begin if TestCharacters ( 10c_Brown ) = true then
2192: LD_STRING 10c_Brown
2194: PPUSH
2195: CALL_OW 28
2199: PUSH
2200: LD_INT 1
2202: EQUAL
2203: IFFALSE 2250
// begin Brown = PrepareUnit ( 10c_Brown , true ) ;
2205: LD_ADDR_EXP 7
2209: PUSH
2210: LD_STRING 10c_Brown
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL 12874 0 2
2220: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2221: LD_EXP 7
2225: PPUSH
2226: LD_INT 2
2228: PPUSH
2229: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2233: LD_EXP 7
2237: PPUSH
2238: LD_INT 4
2240: PPUSH
2241: LD_INT 0
2243: PPUSH
2244: CALL_OW 49
// end else
2248: GO 2266
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2250: LD_INT 4
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: LD_INT 1
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL 1443 0 4
// end ; end ; if TestCharacters ( 11_Gary ) = true then
2266: LD_STRING 11_Gary
2268: PPUSH
2269: CALL_OW 28
2273: PUSH
2274: LD_INT 1
2276: EQUAL
2277: IFFALSE 2324
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
2279: LD_ADDR_EXP 11
2283: PUSH
2284: LD_STRING 11_Gary
2286: PPUSH
2287: LD_INT 1
2289: PPUSH
2290: CALL 12874 0 2
2294: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2295: LD_EXP 11
2299: PPUSH
2300: LD_INT 2
2302: PPUSH
2303: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2307: LD_EXP 11
2311: PPUSH
2312: LD_INT 4
2314: PPUSH
2315: LD_INT 0
2317: PPUSH
2318: CALL_OW 49
// end else
2322: GO 2398
// begin if TestCharacters ( 10c_Gary ) = true then
2324: LD_STRING 10c_Gary
2326: PPUSH
2327: CALL_OW 28
2331: PUSH
2332: LD_INT 1
2334: EQUAL
2335: IFFALSE 2382
// begin Brown = PrepareUnit ( 10c_Gary , true ) ;
2337: LD_ADDR_EXP 7
2341: PUSH
2342: LD_STRING 10c_Gary
2344: PPUSH
2345: LD_INT 1
2347: PPUSH
2348: CALL 12874 0 2
2352: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2353: LD_EXP 11
2357: PPUSH
2358: LD_INT 2
2360: PPUSH
2361: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2365: LD_EXP 11
2369: PPUSH
2370: LD_INT 4
2372: PPUSH
2373: LD_INT 0
2375: PPUSH
2376: CALL_OW 49
// end else
2380: GO 2398
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2382: LD_INT 4
2384: PPUSH
2385: LD_INT 0
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL 1443 0 4
// end ; end ; vc_chassis = us_medium_tracked ;
2398: LD_ADDR_OWVAR 37
2402: PUSH
2403: LD_INT 3
2405: ST_TO_ADDR
// vc_engine = 3 ;
2406: LD_ADDR_OWVAR 39
2410: PUSH
2411: LD_INT 3
2413: ST_TO_ADDR
// vc_control = 1 ;
2414: LD_ADDR_OWVAR 38
2418: PUSH
2419: LD_INT 1
2421: ST_TO_ADDR
// vc_weapon = us_crane ;
2422: LD_ADDR_OWVAR 40
2426: PUSH
2427: LD_INT 13
2429: ST_TO_ADDR
// veh = CreateVehicle ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: CALL_OW 45
2439: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2440: LD_VAR 0 2
2444: PPUSH
2445: LD_INT 4
2447: PPUSH
2448: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2452: LD_VAR 0 2
2456: PPUSH
2457: LD_INT 4
2459: PPUSH
2460: LD_INT 0
2462: PPUSH
2463: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2467: LD_INT 4
2469: PPUSH
2470: LD_VAR 0 2
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL 1443 0 4
// vc_weapon = 9 ;
2485: LD_ADDR_OWVAR 40
2489: PUSH
2490: LD_INT 9
2492: ST_TO_ADDR
// veh = CreateVehicle ;
2493: LD_ADDR_VAR 0 2
2497: PUSH
2498: CALL_OW 45
2502: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2503: LD_VAR 0 2
2507: PPUSH
2508: LD_INT 4
2510: PPUSH
2511: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2515: LD_VAR 0 2
2519: PPUSH
2520: LD_INT 4
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2530: LD_INT 4
2532: PPUSH
2533: LD_VAR 0 2
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: LD_INT 1
2543: PPUSH
2544: CALL 1443 0 4
// vc_control = 3 ;
2548: LD_ADDR_OWVAR 38
2552: PUSH
2553: LD_INT 3
2555: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2556: LD_ADDR_OWVAR 40
2560: PUSH
2561: LD_INT 12
2563: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2564: LD_ADDR_EXP 15
2568: PUSH
2569: CALL_OW 45
2573: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2574: LD_ADDR_EXP 16
2578: PUSH
2579: CALL_OW 45
2583: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2584: LD_EXP 15
2588: PPUSH
2589: LD_INT 4
2591: PPUSH
2592: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2596: LD_EXP 16
2600: PPUSH
2601: LD_INT 4
2603: PPUSH
2604: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2608: LD_EXP 15
2612: PPUSH
2613: LD_INT 4
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2623: LD_EXP 16
2627: PPUSH
2628: LD_INT 4
2630: PPUSH
2631: LD_INT 0
2633: PPUSH
2634: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2638: LD_EXP 15
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_INT 100
2648: PPUSH
2649: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2653: LD_EXP 16
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 80
2663: PPUSH
2664: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2668: LD_EXP 16
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: LD_INT 20
2678: PPUSH
2679: CALL_OW 291
// end ;
2683: LD_VAR 0 1
2687: RET
// export function PowellSupport2 ; var veh , un ; begin
2688: LD_INT 0
2690: PPUSH
2691: PPUSH
2692: PPUSH
// uc_side = 1 ;
2693: LD_ADDR_OWVAR 20
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// uc_nation = 1 ;
2701: LD_ADDR_OWVAR 21
2705: PUSH
2706: LD_INT 1
2708: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2709: LD_ADDR_OWVAR 37
2713: PUSH
2714: LD_INT 2
2716: ST_TO_ADDR
// vc_engine = 3 ;
2717: LD_ADDR_OWVAR 39
2721: PUSH
2722: LD_INT 3
2724: ST_TO_ADDR
// vc_control = 3 ;
2725: LD_ADDR_OWVAR 38
2729: PUSH
2730: LD_INT 3
2732: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2733: LD_ADDR_OWVAR 40
2737: PUSH
2738: LD_INT 3
2740: ST_TO_ADDR
// veh = CreateVehicle ;
2741: LD_ADDR_VAR 0 2
2745: PUSH
2746: CALL_OW 45
2750: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2751: LD_VAR 0 2
2755: PPUSH
2756: LD_INT 4
2758: PPUSH
2759: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2763: LD_VAR 0 2
2767: PPUSH
2768: LD_INT 4
2770: PPUSH
2771: LD_INT 0
2773: PPUSH
2774: CALL_OW 49
// vc_control = 1 ;
2778: LD_ADDR_OWVAR 38
2782: PUSH
2783: LD_INT 1
2785: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2786: LD_ADDR_OWVAR 37
2790: PUSH
2791: LD_INT 2
2793: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2794: LD_ADDR_OWVAR 40
2798: PUSH
2799: LD_INT 5
2801: ST_TO_ADDR
// veh = CreateVehicle ;
2802: LD_ADDR_VAR 0 2
2806: PUSH
2807: CALL_OW 45
2811: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2812: LD_VAR 0 2
2816: PPUSH
2817: LD_INT 4
2819: PPUSH
2820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 4
2831: PPUSH
2832: LD_INT 0
2834: PPUSH
2835: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2839: LD_STRING 11_Bobby
2841: PPUSH
2842: CALL_OW 28
2846: PUSH
2847: LD_INT 1
2849: EQUAL
2850: IFFALSE 2896
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2852: LD_ADDR_EXP 4
2856: PUSH
2857: LD_STRING 11_Bobby
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: CALL 12874 0 2
2867: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2868: LD_EXP 4
2872: PPUSH
2873: LD_INT 3
2875: PPUSH
2876: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2880: LD_EXP 4
2884: PPUSH
2885: LD_VAR 0 2
2889: PPUSH
2890: CALL_OW 52
// end else
2894: GO 2971
// begin if TestCharacters ( 10c_Bobby ) = true then
2896: LD_STRING 10c_Bobby
2898: PPUSH
2899: CALL_OW 28
2903: PUSH
2904: LD_INT 1
2906: EQUAL
2907: IFFALSE 2953
// begin Bobby = PrepareUnit ( 10c_Bobby , true ) ;
2909: LD_ADDR_EXP 4
2913: PUSH
2914: LD_STRING 10c_Bobby
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: CALL 12874 0 2
2924: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2925: LD_EXP 4
2929: PPUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2937: LD_EXP 4
2941: PPUSH
2942: LD_VAR 0 2
2946: PPUSH
2947: CALL_OW 52
// end else
2951: GO 2971
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2953: LD_INT 0
2955: PPUSH
2956: LD_VAR 0 2
2960: PPUSH
2961: LD_INT 2
2963: PPUSH
2964: LD_INT 0
2966: PPUSH
2967: CALL 1443 0 4
// end ; end ; if TestCharacters ( 11_Houten ) = true then
2971: LD_STRING 11_Houten
2973: PPUSH
2974: CALL_OW 28
2978: PUSH
2979: LD_INT 1
2981: EQUAL
2982: IFFALSE 3029
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2984: LD_ADDR_EXP 9
2988: PUSH
2989: LD_STRING 11_Houten
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: CALL 12874 0 2
2999: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
3000: LD_EXP 9
3004: PPUSH
3005: LD_INT 1
3007: PPUSH
3008: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
3012: LD_EXP 9
3016: PPUSH
3017: LD_INT 4
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 49
// end else
3027: GO 3103
// begin if TestCharacters ( 10c_Houten ) = true then
3029: LD_STRING 10c_Houten
3031: PPUSH
3032: CALL_OW 28
3036: PUSH
3037: LD_INT 1
3039: EQUAL
3040: IFFALSE 3087
// begin Houten = PrepareUnit ( 10c_Houten , true ) ;
3042: LD_ADDR_EXP 9
3046: PUSH
3047: LD_STRING 10c_Houten
3049: PPUSH
3050: LD_INT 1
3052: PPUSH
3053: CALL 12874 0 2
3057: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
3058: LD_EXP 9
3062: PPUSH
3063: LD_INT 1
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
3070: LD_EXP 9
3074: PPUSH
3075: LD_INT 4
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// end else
3085: GO 3103
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3087: LD_INT 4
3089: PPUSH
3090: LD_INT 0
3092: PPUSH
3093: LD_INT 1
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL 1443 0 4
// end ; end ; vc_control = 3 ;
3103: LD_ADDR_OWVAR 38
3107: PUSH
3108: LD_INT 3
3110: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3111: LD_ADDR_OWVAR 40
3115: PUSH
3116: LD_INT 12
3118: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
3119: LD_ADDR_EXP 17
3123: PUSH
3124: CALL_OW 45
3128: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
3129: LD_EXP 17
3133: PPUSH
3134: LD_INT 4
3136: PPUSH
3137: CALL_OW 233
// amCargo4 = CreateVehicle ;
3141: LD_ADDR_EXP 18
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
3151: LD_EXP 18
3155: PPUSH
3156: LD_INT 4
3158: PPUSH
3159: CALL_OW 233
// amCargo5 = CreateVehicle ;
3163: LD_ADDR_EXP 19
3167: PUSH
3168: CALL_OW 45
3172: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
3173: LD_EXP 19
3177: PPUSH
3178: LD_INT 4
3180: PPUSH
3181: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
3185: LD_EXP 17
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
3200: LD_EXP 18
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 0
3210: PPUSH
3211: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
3215: LD_EXP 19
3219: PPUSH
3220: LD_INT 4
3222: PPUSH
3223: LD_INT 0
3225: PPUSH
3226: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
3230: LD_EXP 17
3234: PPUSH
3235: LD_INT 1
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
3245: LD_EXP 18
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: LD_INT 100
3255: PPUSH
3256: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
3260: LD_EXP 19
3264: PPUSH
3265: LD_INT 3
3267: PPUSH
3268: LD_INT 100
3270: PPUSH
3271: CALL_OW 291
// end ;
3275: LD_VAR 0 1
3279: RET
// export function PowellSupport3 ; var veh , un ; begin
3280: LD_INT 0
3282: PPUSH
3283: PPUSH
3284: PPUSH
// uc_side = 1 ;
3285: LD_ADDR_OWVAR 20
3289: PUSH
3290: LD_INT 1
3292: ST_TO_ADDR
// uc_nation = 1 ;
3293: LD_ADDR_OWVAR 21
3297: PUSH
3298: LD_INT 1
3300: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3301: LD_INT 4
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: LD_INT 1
3309: PPUSH
3310: LD_INT 0
3312: PPUSH
3313: CALL 1443 0 4
// vc_chassis = us_medium_wheeled ;
3317: LD_ADDR_OWVAR 37
3321: PUSH
3322: LD_INT 2
3324: ST_TO_ADDR
// vc_engine = 3 ;
3325: LD_ADDR_OWVAR 39
3329: PUSH
3330: LD_INT 3
3332: ST_TO_ADDR
// vc_control = 3 ;
3333: LD_ADDR_OWVAR 38
3337: PUSH
3338: LD_INT 3
3340: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3341: LD_ADDR_OWVAR 40
3345: PUSH
3346: LD_INT 12
3348: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3349: LD_ADDR_EXP 20
3353: PUSH
3354: CALL_OW 45
3358: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3359: LD_ADDR_EXP 21
3363: PUSH
3364: CALL_OW 45
3368: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3369: LD_EXP 20
3373: PPUSH
3374: LD_INT 4
3376: PPUSH
3377: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3381: LD_EXP 21
3385: PPUSH
3386: LD_INT 4
3388: PPUSH
3389: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3393: LD_EXP 20
3397: PPUSH
3398: LD_INT 4
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3408: LD_EXP 21
3412: PPUSH
3413: LD_INT 4
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3423: LD_EXP 20
3427: PPUSH
3428: LD_INT 1
3430: PPUSH
3431: LD_INT 100
3433: PPUSH
3434: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
3438: LD_EXP 21
3442: PPUSH
3443: LD_INT 3
3445: PPUSH
3446: LD_INT 100
3448: PPUSH
3449: CALL_OW 291
// end ; end_of_file
3453: LD_VAR 0 1
3457: RET
// export function PrepareRussianCommander ; begin
3458: LD_INT 0
3460: PPUSH
// uc_side = 3 ;
3461: LD_ADDR_OWVAR 20
3465: PUSH
3466: LD_INT 3
3468: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3469: LD_ADDR_EXP 23
3473: PUSH
3474: LD_STRING Davidov
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL 12874 0 2
3484: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3485: LD_EXP 23
3489: PPUSH
3490: LD_INT 3
3492: PPUSH
3493: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3497: LD_ADDR_EXP 34
3501: PUSH
3502: LD_EXP 34
3506: PUSH
3507: LD_EXP 23
3511: ADD
3512: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3513: LD_EXP 34
3517: PPUSH
3518: LD_INT 4
3520: PPUSH
3521: CALL_OW 336
// end ;
3525: LD_VAR 0 1
3529: RET
// export function PrepareEastBase ; var i , un ; begin
3530: LD_INT 0
3532: PPUSH
3533: PPUSH
3534: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3535: LD_INT 3
3537: PPUSH
3538: LD_INT 3
3540: PPUSH
3541: LD_INT 121
3543: PPUSH
3544: LD_EXP 36
3548: PPUSH
3549: LD_EXP 37
3553: PPUSH
3554: CALL_OW 12
3558: PPUSH
3559: LD_INT 1
3561: PPUSH
3562: LD_INT 3
3564: PPUSH
3565: CALL 13666 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3569: LD_INT 3
3571: PPUSH
3572: LD_INT 3
3574: PPUSH
3575: LD_INT 121
3577: PPUSH
3578: LD_EXP 36
3582: PPUSH
3583: LD_EXP 37
3587: PPUSH
3588: CALL_OW 12
3592: PPUSH
3593: LD_INT 9
3595: PPUSH
3596: LD_INT 3
3598: PPUSH
3599: CALL 13666 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3603: LD_INT 3
3605: PPUSH
3606: LD_INT 3
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: LD_EXP 36
3616: PPUSH
3617: LD_EXP 37
3621: PPUSH
3622: CALL_OW 12
3626: PPUSH
3627: LD_INT 2
3629: PPUSH
3630: LD_INT 6
3632: PPUSH
3633: CALL 13666 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3637: LD_INT 3
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_INT 112
3645: PPUSH
3646: LD_EXP 36
3650: PPUSH
3651: LD_EXP 37
3655: PPUSH
3656: CALL_OW 12
3660: PPUSH
3661: LD_INT 3
3663: PPUSH
3664: LD_INT 6
3666: PPUSH
3667: CALL 13666 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3671: LD_INT 3
3673: PPUSH
3674: LD_INT 3
3676: PPUSH
3677: LD_INT 47
3679: PPUSH
3680: LD_EXP 36
3684: PPUSH
3685: LD_EXP 37
3689: PPUSH
3690: CALL_OW 12
3694: PPUSH
3695: LD_INT 4
3697: PPUSH
3698: LD_INT 6
3700: PPUSH
3701: CALL 13666 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 3
3710: PPUSH
3711: LD_INT 129
3713: PPUSH
3714: LD_EXP 36
3718: PPUSH
3719: LD_EXP 37
3723: PPUSH
3724: CALL_OW 12
3728: PPUSH
3729: LD_INT 4
3731: PPUSH
3732: LD_INT 6
3734: PPUSH
3735: CALL 13666 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3739: LD_INT 3
3741: PPUSH
3742: LD_INT 3
3744: PPUSH
3745: LD_INT 135
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: LD_EXP 37
3757: PPUSH
3758: CALL_OW 12
3762: PPUSH
3763: LD_INT 4
3765: PPUSH
3766: LD_INT 6
3768: PPUSH
3769: CALL 13666 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 30
3790: PUSH
3791: LD_INT 32
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PPUSH
3802: CALL_OW 69
3806: PUSH
3807: FOR_IN
3808: IFFALSE 3848
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 3
3815: PPUSH
3816: LD_VAR 0 2
3820: PPUSH
3821: LD_EXP 36
3825: PPUSH
3826: LD_EXP 37
3830: PPUSH
3831: CALL_OW 12
3835: PPUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: CALL 13666 0 6
3846: GO 3807
3848: POP
3849: POP
// for i = 1 to 5 do
3850: LD_ADDR_VAR 0 2
3854: PUSH
3855: DOUBLE
3856: LD_INT 1
3858: DEC
3859: ST_TO_ADDR
3860: LD_INT 5
3862: PUSH
3863: FOR_TO
3864: IFFALSE 3963
// begin uc_side = 3 ;
3866: LD_ADDR_OWVAR 20
3870: PUSH
3871: LD_INT 3
3873: ST_TO_ADDR
// uc_nation = 3 ;
3874: LD_ADDR_OWVAR 21
3878: PUSH
3879: LD_INT 3
3881: ST_TO_ADDR
// hc_gallery =  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// hc_name =  ;
3890: LD_ADDR_OWVAR 26
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3898: LD_INT 0
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_EXP 36
3908: PPUSH
3909: LD_EXP 37
3913: PPUSH
3914: CALL_OW 12
3918: PPUSH
3919: CALL_OW 380
// un = CreateHuman ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: CALL_OW 44
3932: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_INT 3
3940: PPUSH
3941: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3945: LD_ADDR_EXP 34
3949: PUSH
3950: LD_EXP 34
3954: PUSH
3955: LD_VAR 0 3
3959: ADD
3960: ST_TO_ADDR
// end ;
3961: GO 3863
3963: POP
3964: POP
// end ;
3965: LD_VAR 0 1
3969: RET
// export function PrepareWestBase ; var i , un ; begin
3970: LD_INT 0
3972: PPUSH
3973: PPUSH
3974: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3975: LD_INT 3
3977: PPUSH
3978: LD_INT 3
3980: PPUSH
3981: LD_INT 6
3983: PPUSH
3984: LD_EXP 36
3988: PPUSH
3989: LD_EXP 37
3993: PPUSH
3994: CALL_OW 12
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: LD_INT 3
4004: PPUSH
4005: CALL 13666 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4009: LD_INT 3
4011: PPUSH
4012: LD_INT 3
4014: PPUSH
4015: LD_INT 91
4017: PPUSH
4018: LD_EXP 36
4022: PPUSH
4023: LD_EXP 37
4027: PPUSH
4028: CALL_OW 12
4032: PPUSH
4033: LD_INT 4
4035: PPUSH
4036: LD_INT 3
4038: PPUSH
4039: CALL 13666 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
4043: LD_INT 3
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: LD_INT 21
4051: PPUSH
4052: LD_EXP 36
4056: PPUSH
4057: LD_EXP 37
4061: PPUSH
4062: CALL_OW 12
4066: PPUSH
4067: LD_INT 3
4069: PPUSH
4070: LD_INT 6
4072: PPUSH
4073: CALL 13666 0 6
// end ;
4077: LD_VAR 0 1
4081: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4082: LD_INT 0
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
// uc_side = 3 ;
4088: LD_ADDR_OWVAR 20
4092: PUSH
4093: LD_INT 3
4095: ST_TO_ADDR
// uc_nation = 3 ;
4096: LD_ADDR_OWVAR 21
4100: PUSH
4101: LD_INT 3
4103: ST_TO_ADDR
// for i = 1 to 5 do
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: DOUBLE
4110: LD_INT 1
4112: DEC
4113: ST_TO_ADDR
4114: LD_INT 5
4116: PUSH
4117: FOR_TO
4118: IFFALSE 4188
// begin hc_gallery =  ;
4120: LD_ADDR_OWVAR 33
4124: PUSH
4125: LD_STRING 
4127: ST_TO_ADDR
// hc_name =  ;
4128: LD_ADDR_OWVAR 26
4132: PUSH
4133: LD_STRING 
4135: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4136: LD_INT 0
4138: PPUSH
4139: LD_INT 9
4141: PPUSH
4142: LD_EXP 36
4146: PPUSH
4147: LD_EXP 37
4151: PPUSH
4152: CALL_OW 12
4156: PPUSH
4157: CALL_OW 380
// un = CreateHuman ;
4161: LD_ADDR_VAR 0 3
4165: PUSH
4166: CALL_OW 44
4170: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_INT 8
4178: PPUSH
4179: LD_INT 0
4181: PPUSH
4182: CALL_OW 49
// end ;
4186: GO 4117
4188: POP
4189: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4190: LD_ADDR_VAR 0 2
4194: PUSH
4195: DOUBLE
4196: LD_INT 1
4198: DEC
4199: ST_TO_ADDR
4200: LD_INT 2
4202: PUSH
4203: LD_INT 3
4205: PUSH
4206: LD_INT 4
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: LIST
4213: PUSH
4214: LD_OWVAR 67
4218: ARRAY
4219: PUSH
4220: FOR_TO
4221: IFFALSE 4291
// begin hc_gallery =  ;
4223: LD_ADDR_OWVAR 33
4227: PUSH
4228: LD_STRING 
4230: ST_TO_ADDR
// hc_name =  ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING 
4238: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4239: LD_INT 0
4241: PPUSH
4242: LD_INT 4
4244: PPUSH
4245: LD_EXP 36
4249: PPUSH
4250: LD_EXP 37
4254: PPUSH
4255: CALL_OW 12
4259: PPUSH
4260: CALL_OW 380
// un = CreateHuman ;
4264: LD_ADDR_VAR 0 3
4268: PUSH
4269: CALL_OW 44
4273: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: LD_INT 8
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 49
// end ;
4289: GO 4220
4291: POP
4292: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 3
4305: PUSH
4306: LD_INT 4
4308: PUSH
4309: LD_INT 5
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: LIST
4316: PUSH
4317: LD_OWVAR 67
4321: ARRAY
4322: PUSH
4323: FOR_TO
4324: IFFALSE 4520
// begin vc_engine = 3 ;
4326: LD_ADDR_OWVAR 39
4330: PUSH
4331: LD_INT 3
4333: ST_TO_ADDR
// vc_control = 1 ;
4334: LD_ADDR_OWVAR 38
4338: PUSH
4339: LD_INT 1
4341: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4342: LD_ADDR_OWVAR 40
4346: PUSH
4347: LD_INT 42
4349: PUSH
4350: LD_INT 43
4352: PUSH
4353: LD_INT 44
4355: PUSH
4356: LD_INT 45
4358: PUSH
4359: LD_INT 46
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: PUSH
4369: LD_INT 1
4371: PPUSH
4372: LD_INT 5
4374: PPUSH
4375: CALL_OW 12
4379: ARRAY
4380: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4381: LD_OWVAR 40
4385: PUSH
4386: LD_INT 46
4388: EQUAL
4389: IFFALSE 4401
// vc_chassis = ru_heavy_tracked else
4391: LD_ADDR_OWVAR 37
4395: PUSH
4396: LD_INT 24
4398: ST_TO_ADDR
4399: GO 4428
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4401: LD_ADDR_OWVAR 37
4405: PUSH
4406: LD_INT 22
4408: PUSH
4409: LD_INT 21
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 1
4418: PPUSH
4419: LD_INT 2
4421: PPUSH
4422: CALL_OW 12
4426: ARRAY
4427: ST_TO_ADDR
// veh = CreateVehicle ;
4428: LD_ADDR_VAR 0 4
4432: PUSH
4433: CALL_OW 45
4437: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4438: LD_VAR 0 4
4442: PPUSH
4443: LD_INT 3
4445: PPUSH
4446: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4450: LD_VAR 0 4
4454: PPUSH
4455: LD_INT 5
4457: PPUSH
4458: LD_INT 0
4460: PPUSH
4461: CALL_OW 49
// hc_gallery =  ;
4465: LD_ADDR_OWVAR 33
4469: PUSH
4470: LD_STRING 
4472: ST_TO_ADDR
// hc_name =  ;
4473: LD_ADDR_OWVAR 26
4477: PUSH
4478: LD_STRING 
4480: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4481: LD_INT 0
4483: PPUSH
4484: LD_INT 3
4486: PPUSH
4487: LD_INT 10
4489: PPUSH
4490: CALL_OW 380
// un = CreateHuman ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: CALL_OW 44
4503: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4504: LD_VAR 0 3
4508: PPUSH
4509: LD_VAR 0 4
4513: PPUSH
4514: CALL_OW 52
// end ;
4518: GO 4323
4520: POP
4521: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4522: LD_ADDR_VAR 0 2
4526: PUSH
4527: DOUBLE
4528: LD_INT 1
4530: DEC
4531: ST_TO_ADDR
4532: LD_INT 3
4534: PUSH
4535: LD_INT 4
4537: PUSH
4538: LD_INT 5
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: LIST
4545: PUSH
4546: LD_OWVAR 67
4550: ARRAY
4551: PUSH
4552: FOR_TO
4553: IFFALSE 4700
// begin vc_engine = 3 ;
4555: LD_ADDR_OWVAR 39
4559: PUSH
4560: LD_INT 3
4562: ST_TO_ADDR
// vc_control = 3 ;
4563: LD_ADDR_OWVAR 38
4567: PUSH
4568: LD_INT 3
4570: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4571: LD_ADDR_OWVAR 40
4575: PUSH
4576: LD_INT 42
4578: PUSH
4579: LD_INT 43
4581: PUSH
4582: LD_INT 44
4584: PUSH
4585: LD_INT 45
4587: PUSH
4588: LD_INT 46
4590: PUSH
4591: LD_INT 49
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_INT 5
4607: PPUSH
4608: CALL_OW 12
4612: ARRAY
4613: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4614: LD_OWVAR 40
4618: PUSH
4619: LD_INT 46
4621: EQUAL
4622: IFFALSE 4634
// vc_chassis = ru_heavy_tracked else
4624: LD_ADDR_OWVAR 37
4628: PUSH
4629: LD_INT 24
4631: ST_TO_ADDR
4632: GO 4661
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4634: LD_ADDR_OWVAR 37
4638: PUSH
4639: LD_INT 22
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PUSH
4649: LD_INT 1
4651: PPUSH
4652: LD_INT 2
4654: PPUSH
4655: CALL_OW 12
4659: ARRAY
4660: ST_TO_ADDR
// veh = CreateVehicle ;
4661: LD_ADDR_VAR 0 4
4665: PUSH
4666: CALL_OW 45
4670: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4671: LD_VAR 0 4
4675: PPUSH
4676: LD_INT 3
4678: PPUSH
4679: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4683: LD_VAR 0 4
4687: PPUSH
4688: LD_INT 6
4690: PPUSH
4691: LD_INT 0
4693: PPUSH
4694: CALL_OW 49
// end ;
4698: GO 4552
4700: POP
4701: POP
// end ; end_of_file
4702: LD_VAR 0 1
4706: RET
// export function PrepareKurt ; begin
4707: LD_INT 0
4709: PPUSH
// uc_side = 8 ;
4710: LD_ADDR_OWVAR 20
4714: PUSH
4715: LD_INT 8
4717: ST_TO_ADDR
// uc_nation = 2 ;
4718: LD_ADDR_OWVAR 21
4722: PUSH
4723: LD_INT 2
4725: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4726: LD_ADDR_OWVAR 37
4730: PUSH
4731: LD_INT 13
4733: ST_TO_ADDR
// vc_engine = 1 ;
4734: LD_ADDR_OWVAR 39
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// vc_control = 1 ;
4742: LD_ADDR_OWVAR 38
4746: PUSH
4747: LD_INT 1
4749: ST_TO_ADDR
// vc_weapon = 24 ;
4750: LD_ADDR_OWVAR 40
4754: PUSH
4755: LD_INT 24
4757: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4758: LD_ADDR_EXP 26
4762: PUSH
4763: CALL_OW 45
4767: ST_TO_ADDR
// if kurtStatus > 0 then
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 0
4775: GREATER
4776: IFFALSE 4825
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4778: LD_ADDR_EXP 24
4782: PUSH
4783: LD_STRING Kurt
4785: PPUSH
4786: LD_INT 0
4788: PPUSH
4789: CALL 12874 0 2
4793: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4794: LD_EXP 26
4798: PPUSH
4799: LD_INT 4
4801: PPUSH
4802: LD_INT 0
4804: PPUSH
4805: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4809: LD_EXP 24
4813: PPUSH
4814: LD_EXP 26
4818: PPUSH
4819: CALL_OW 52
// end else
4823: GO 4886
// begin hc_name =  ;
4825: LD_ADDR_OWVAR 26
4829: PUSH
4830: LD_STRING 
4832: ST_TO_ADDR
// hc_gallery =  ;
4833: LD_ADDR_OWVAR 33
4837: PUSH
4838: LD_STRING 
4840: ST_TO_ADDR
// otherKurt = PrepareSoldier ( sex_male , 10 ) ;
4841: LD_ADDR_EXP 25
4845: PUSH
4846: LD_INT 1
4848: PPUSH
4849: LD_INT 10
4851: PPUSH
4852: CALL_OW 381
4856: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4857: LD_EXP 26
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: LD_INT 0
4867: PPUSH
4868: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4872: LD_EXP 25
4876: PPUSH
4877: LD_EXP 26
4881: PPUSH
4882: CALL_OW 52
// end ; end ;
4886: LD_VAR 0 1
4890: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4891: LD_INT 0
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
// for i = 1 to 3 do
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: DOUBLE
4903: LD_INT 1
4905: DEC
4906: ST_TO_ADDR
4907: LD_INT 3
4909: PUSH
4910: FOR_TO
4911: IFFALSE 5048
// begin uc_side = 1 ;
4913: LD_ADDR_OWVAR 20
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// uc_nation = 2 ;
4921: LD_ADDR_OWVAR 21
4925: PUSH
4926: LD_INT 2
4928: ST_TO_ADDR
// hc_gallery =  ;
4929: LD_ADDR_OWVAR 33
4933: PUSH
4934: LD_STRING 
4936: ST_TO_ADDR
// hc_name =  ;
4937: LD_ADDR_OWVAR 26
4941: PUSH
4942: LD_STRING 
4944: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4945: LD_EXP 27
4949: PUSH
4950: LD_INT 0
4952: EQUAL
4953: PUSH
4954: LD_EXP 27
4958: PUSH
4959: LD_INT 2
4961: EQUAL
4962: OR
4963: IFFALSE 4988
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4965: LD_INT 0
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: LD_INT 2
4973: PPUSH
4974: LD_INT 4
4976: PPUSH
4977: CALL_OW 12
4981: PPUSH
4982: CALL_OW 380
4986: GO 5009
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4988: LD_INT 0
4990: PPUSH
4991: LD_INT 1
4993: PPUSH
4994: LD_INT 6
4996: PPUSH
4997: LD_INT 8
4999: PPUSH
5000: CALL_OW 12
5004: PPUSH
5005: CALL_OW 380
// un = CreateHuman ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5019: LD_VAR 0 3
5023: PPUSH
5024: LD_INT 4
5026: PPUSH
5027: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_INT 4
5038: PPUSH
5039: LD_INT 0
5041: PPUSH
5042: CALL_OW 49
// end ;
5046: GO 4910
5048: POP
5049: POP
// vc_chassis = 14 ;
5050: LD_ADDR_OWVAR 37
5054: PUSH
5055: LD_INT 14
5057: ST_TO_ADDR
// vc_engine = 3 ;
5058: LD_ADDR_OWVAR 39
5062: PUSH
5063: LD_INT 3
5065: ST_TO_ADDR
// vc_control = 1 ;
5066: LD_ADDR_OWVAR 38
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5074: LD_ADDR_OWVAR 40
5078: PUSH
5079: LD_INT 27
5081: PUSH
5082: LD_INT 26
5084: PUSH
5085: LD_INT 28
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 1
5095: PPUSH
5096: LD_INT 3
5098: PPUSH
5099: CALL_OW 12
5103: ARRAY
5104: ST_TO_ADDR
// veh = CreateVehicle ;
5105: LD_ADDR_VAR 0 4
5109: PUSH
5110: CALL_OW 45
5114: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5115: LD_VAR 0 4
5119: PPUSH
5120: LD_INT 4
5122: PPUSH
5123: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5127: LD_VAR 0 4
5131: PPUSH
5132: LD_INT 4
5134: PPUSH
5135: LD_INT 0
5137: PPUSH
5138: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5142: LD_EXP 27
5146: PUSH
5147: LD_INT 0
5149: EQUAL
5150: PUSH
5151: LD_EXP 27
5155: PUSH
5156: LD_INT 2
5158: EQUAL
5159: OR
5160: IFFALSE 5185
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
5162: LD_INT 0
5164: PPUSH
5165: LD_INT 3
5167: PPUSH
5168: LD_INT 2
5170: PPUSH
5171: LD_INT 4
5173: PPUSH
5174: CALL_OW 12
5178: PPUSH
5179: CALL_OW 380
5183: GO 5206
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 3
5190: PPUSH
5191: LD_INT 6
5193: PPUSH
5194: LD_INT 8
5196: PPUSH
5197: CALL_OW 12
5201: PPUSH
5202: CALL_OW 380
// un = CreateHuman ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: CALL_OW 44
5215: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5216: LD_VAR 0 3
5220: PPUSH
5221: LD_VAR 0 4
5225: PPUSH
5226: CALL_OW 52
// vc_chassis = 14 ;
5230: LD_ADDR_OWVAR 37
5234: PUSH
5235: LD_INT 14
5237: ST_TO_ADDR
// vc_engine = 3 ;
5238: LD_ADDR_OWVAR 39
5242: PUSH
5243: LD_INT 3
5245: ST_TO_ADDR
// vc_control = 1 ;
5246: LD_ADDR_OWVAR 38
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5254: LD_ADDR_OWVAR 40
5258: PUSH
5259: LD_INT 27
5261: PUSH
5262: LD_INT 26
5264: PUSH
5265: LD_INT 28
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_INT 1
5275: PPUSH
5276: LD_INT 3
5278: PPUSH
5279: CALL_OW 12
5283: ARRAY
5284: ST_TO_ADDR
// veh = CreateVehicle ;
5285: LD_ADDR_VAR 0 4
5289: PUSH
5290: CALL_OW 45
5294: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5295: LD_VAR 0 4
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5307: LD_VAR 0 4
5311: PPUSH
5312: LD_INT 4
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5322: LD_EXP 27
5326: PUSH
5327: LD_INT 0
5329: EQUAL
5330: PUSH
5331: LD_EXP 27
5335: PUSH
5336: LD_INT 2
5338: EQUAL
5339: OR
5340: IFFALSE 5365
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
5342: LD_INT 0
5344: PPUSH
5345: LD_INT 4
5347: PPUSH
5348: LD_INT 2
5350: PPUSH
5351: LD_INT 4
5353: PPUSH
5354: CALL_OW 12
5358: PPUSH
5359: CALL_OW 380
5363: GO 5386
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
5365: LD_INT 0
5367: PPUSH
5368: LD_INT 4
5370: PPUSH
5371: LD_INT 6
5373: PPUSH
5374: LD_INT 8
5376: PPUSH
5377: CALL_OW 12
5381: PPUSH
5382: CALL_OW 380
// un = CreateHuman ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: CALL_OW 44
5395: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5396: LD_VAR 0 3
5400: PPUSH
5401: LD_INT 4
5403: PPUSH
5404: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5408: LD_VAR 0 3
5412: PPUSH
5413: LD_VAR 0 4
5417: PPUSH
5418: CALL_OW 52
// vc_chassis = 14 ;
5422: LD_ADDR_OWVAR 37
5426: PUSH
5427: LD_INT 14
5429: ST_TO_ADDR
// vc_engine = 3 ;
5430: LD_ADDR_OWVAR 39
5434: PUSH
5435: LD_INT 3
5437: ST_TO_ADDR
// vc_control = 1 ;
5438: LD_ADDR_OWVAR 38
5442: PUSH
5443: LD_INT 1
5445: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5446: LD_ADDR_OWVAR 40
5450: PUSH
5451: LD_INT 27
5453: PUSH
5454: LD_INT 26
5456: PUSH
5457: LD_INT 28
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 1
5467: PPUSH
5468: LD_INT 3
5470: PPUSH
5471: CALL_OW 12
5475: ARRAY
5476: ST_TO_ADDR
// veh = CreateVehicle ;
5477: LD_ADDR_VAR 0 4
5481: PUSH
5482: CALL_OW 45
5486: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5487: LD_VAR 0 4
5491: PPUSH
5492: LD_INT 4
5494: PPUSH
5495: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5499: LD_VAR 0 4
5503: PPUSH
5504: LD_INT 4
5506: PPUSH
5507: LD_INT 0
5509: PPUSH
5510: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5514: LD_EXP 27
5518: PUSH
5519: LD_INT 0
5521: EQUAL
5522: PUSH
5523: LD_EXP 27
5527: PUSH
5528: LD_INT 2
5530: EQUAL
5531: OR
5532: IFFALSE 5557
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
5534: LD_INT 0
5536: PPUSH
5537: LD_INT 2
5539: PPUSH
5540: LD_INT 2
5542: PPUSH
5543: LD_INT 4
5545: PPUSH
5546: CALL_OW 12
5550: PPUSH
5551: CALL_OW 380
5555: GO 5578
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
5557: LD_INT 0
5559: PPUSH
5560: LD_INT 2
5562: PPUSH
5563: LD_INT 6
5565: PPUSH
5566: LD_INT 8
5568: PPUSH
5569: CALL_OW 12
5573: PPUSH
5574: CALL_OW 380
// un = CreateHuman ;
5578: LD_ADDR_VAR 0 3
5582: PUSH
5583: CALL_OW 44
5587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5588: LD_VAR 0 3
5592: PPUSH
5593: LD_INT 4
5595: PPUSH
5596: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5600: LD_VAR 0 3
5604: PPUSH
5605: LD_VAR 0 4
5609: PPUSH
5610: CALL_OW 52
// end ;
5614: LD_VAR 0 1
5618: RET
// export function PrepareAttackLegion ; var i , un ; begin
5619: LD_INT 0
5621: PPUSH
5622: PPUSH
5623: PPUSH
// for i = 1 to 4 do
5624: LD_ADDR_VAR 0 2
5628: PUSH
5629: DOUBLE
5630: LD_INT 1
5632: DEC
5633: ST_TO_ADDR
5634: LD_INT 4
5636: PUSH
5637: FOR_TO
5638: IFFALSE 5739
// begin uc_side = 1 ;
5640: LD_ADDR_OWVAR 20
5644: PUSH
5645: LD_INT 1
5647: ST_TO_ADDR
// uc_nation = 2 ;
5648: LD_ADDR_OWVAR 21
5652: PUSH
5653: LD_INT 2
5655: ST_TO_ADDR
// hc_gallery =  ;
5656: LD_ADDR_OWVAR 33
5660: PUSH
5661: LD_STRING 
5663: ST_TO_ADDR
// hc_name =  ;
5664: LD_ADDR_OWVAR 26
5668: PUSH
5669: LD_STRING 
5671: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5672: LD_INT 0
5674: PPUSH
5675: LD_INT 1
5677: PUSH
5678: LD_INT 8
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_INT 2
5690: PPUSH
5691: CALL_OW 12
5695: ARRAY
5696: PPUSH
5697: LD_INT 6
5699: PPUSH
5700: LD_INT 8
5702: PPUSH
5703: CALL_OW 12
5707: PPUSH
5708: CALL_OW 380
// un = CreateHuman ;
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: CALL_OW 44
5721: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5722: LD_VAR 0 3
5726: PPUSH
5727: LD_INT 19
5729: PPUSH
5730: LD_INT 0
5732: PPUSH
5733: CALL_OW 49
// end ;
5737: GO 5637
5739: POP
5740: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5741: LD_INT 1
5743: PPUSH
5744: LD_INT 8
5746: PPUSH
5747: LD_INT 2
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5757: LD_INT 20
5759: PPUSH
5760: LD_INT 3
5762: PPUSH
5763: CALL 15790 0 2
// end ; end_of_file
5767: LD_VAR 0 1
5771: RET
// every 1 do var i ;
5772: GO 5774
5774: DISABLE
5775: LD_INT 0
5777: PPUSH
// begin TeleportExit ( ruteleprt , 117 , 131 ) ;
5778: LD_INT 10
5780: PPUSH
5781: LD_INT 117
5783: PPUSH
5784: LD_INT 131
5786: PPUSH
5787: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5791: LD_INT 137
5793: PPUSH
5794: LD_INT 84
5796: PPUSH
5797: LD_INT 61
5799: PPUSH
5800: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5804: LD_EXP 1
5808: PPUSH
5809: CALL_OW 310
5813: PPUSH
5814: CALL_OW 87
// InGameOn ;
5818: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 102 ) ;
5822: LD_INT 22
5824: PUSH
5825: LD_INT 1
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: PPUSH
5832: CALL_OW 69
5836: PPUSH
5837: LD_INT 130
5839: PPUSH
5840: LD_INT 102
5842: PPUSH
5843: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5847: LD_VAR 0 1
5851: PPUSH
5852: LD_INT 114
5854: PPUSH
5855: LD_INT 102
5857: PPUSH
5858: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5862: LD_EXP 1
5866: PPUSH
5867: LD_STRING D1-JMM-1
5869: PPUSH
5870: CALL_OW 88
// if IsOk ( Donaldson ) then
5874: LD_EXP 3
5878: PPUSH
5879: CALL_OW 302
5883: IFFALSE 5921
// begin Say ( Donaldson , D1-Don-1 ) ;
5885: LD_EXP 3
5889: PPUSH
5890: LD_STRING D1-Don-1
5892: PPUSH
5893: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5897: LD_EXP 1
5901: PPUSH
5902: LD_STRING D1-JMM-2
5904: PPUSH
5905: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5909: LD_EXP 3
5913: PPUSH
5914: LD_STRING D1-Don-2
5916: PPUSH
5917: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 104 , 96 ) ;
5921: LD_INT 22
5923: PUSH
5924: LD_INT 1
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PPUSH
5931: CALL_OW 69
5935: PPUSH
5936: LD_INT 104
5938: PPUSH
5939: LD_INT 96
5941: PPUSH
5942: CALL_OW 171
// end ;
5946: PPOPN 1
5948: END
// every 0 0$1 trigger SeeXY ( 1 , 101 , 92 ) do var i ;
5949: LD_INT 1
5951: PPUSH
5952: LD_INT 101
5954: PPUSH
5955: LD_INT 92
5957: PPUSH
5958: CALL_OW 293
5962: IFFALSE 6137
5964: GO 5966
5966: DISABLE
5967: LD_INT 0
5969: PPUSH
// begin CenterOnXY ( 99 , 89 ) ;
5970: LD_INT 99
5972: PPUSH
5973: LD_INT 89
5975: PPUSH
5976: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
5980: LD_INT 22
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 26
5992: PUSH
5993: LD_INT 1
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: LD_INT 2
6002: PUSH
6003: LD_INT 25
6005: PUSH
6006: LD_INT 1
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 25
6015: PUSH
6016: LD_INT 2
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 25
6025: PUSH
6026: LD_INT 3
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 25
6035: PUSH
6036: LD_INT 4
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_EXP 1
6059: DIFF
6060: PPUSH
6061: CALL_OW 69
6065: PPUSH
6066: LD_STRING D1-Sol1-2
6068: PPUSH
6069: LD_STRING 
6071: PPUSH
6072: CALL 12982 0 3
// Say ( JMM , D1-JMM-3 ) ;
6076: LD_EXP 1
6080: PPUSH
6081: LD_STRING D1-JMM-3
6083: PPUSH
6084: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6088: LD_STRING M1
6090: PPUSH
6091: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6095: LD_ADDR_VAR 0 1
6099: PUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 1
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PPUSH
6110: CALL_OW 69
6114: PUSH
6115: FOR_IN
6116: IFFALSE 6135
// ComMoveXY ( i , 93 , 83 ) ;
6118: LD_VAR 0 1
6122: PPUSH
6123: LD_INT 93
6125: PPUSH
6126: LD_INT 83
6128: PPUSH
6129: CALL_OW 111
6133: GO 6115
6135: POP
6136: POP
// end ;
6137: PPOPN 1
6139: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
6140: GO 6142
6142: DISABLE
6143: LD_INT 0
6145: PPUSH
6146: PPUSH
6147: PPUSH
6148: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: LD_INT 8
6156: PPUSH
6157: LD_INT 22
6159: PUSH
6160: LD_INT 3
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 25
6169: PUSH
6170: LD_INT 9
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 70
6185: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6186: LD_ADDR_VAR 0 3
6190: PUSH
6191: LD_INT 22
6193: PUSH
6194: LD_INT 1
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: EMPTY
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: ST_TO_ADDR
// enable ;
6209: ENABLE
// for i in your_units do
6210: LD_ADDR_VAR 0 1
6214: PUSH
6215: LD_VAR 0 3
6219: PUSH
6220: FOR_IN
6221: IFFALSE 6856
// begin if See ( 3 , i ) then
6223: LD_INT 3
6225: PPUSH
6226: LD_VAR 0 1
6230: PPUSH
6231: CALL_OW 292
6235: IFFALSE 6854
// begin disable ;
6237: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6238: LD_VAR 0 2
6242: PPUSH
6243: LD_INT 96
6245: PPUSH
6246: LD_INT 85
6248: PPUSH
6249: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6253: LD_VAR 0 2
6257: PPUSH
6258: LD_INT 96
6260: PPUSH
6261: LD_INT 85
6263: PPUSH
6264: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6268: LD_VAR 0 2
6272: PPUSH
6273: LD_INT 96
6275: PPUSH
6276: LD_INT 85
6278: PPUSH
6279: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6283: LD_VAR 0 2
6287: PPUSH
6288: LD_INT 96
6290: PPUSH
6291: LD_INT 85
6293: PPUSH
6294: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6298: LD_VAR 0 2
6302: PPUSH
6303: LD_INT 96
6305: PPUSH
6306: LD_INT 85
6308: PPUSH
6309: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_INT 96
6320: PPUSH
6321: LD_INT 85
6323: PPUSH
6324: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
6328: LD_EXP 1
6332: PPUSH
6333: LD_STRING D1a-JMM-1
6335: PPUSH
6336: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6340: LD_EXP 3
6344: PPUSH
6345: LD_STRING D1a-Don-1
6347: PPUSH
6348: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6352: LD_ADDR_VAR 0 1
6356: PUSH
6357: LD_INT 22
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PPUSH
6367: CALL_OW 69
6371: PUSH
6372: FOR_IN
6373: IFFALSE 6392
// ComMoveXY ( i , 109 , 102 ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 109
6382: PPUSH
6383: LD_INT 102
6385: PPUSH
6386: CALL_OW 111
6390: GO 6372
6392: POP
6393: POP
// Say ( JMM , D1a-JMM-2 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D1a-JMM-2
6401: PPUSH
6402: CALL_OW 88
// wait ( 0 0$10 ) ;
6406: LD_INT 350
6408: PPUSH
6409: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6413: LD_EXP 1
6417: PPUSH
6418: CALL_OW 310
6422: PPUSH
6423: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6427: LD_EXP 3
6431: PPUSH
6432: LD_STRING D1b-Don-1
6434: PPUSH
6435: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6439: LD_EXP 1
6443: PPUSH
6444: LD_STRING D1b-JMM-1
6446: PPUSH
6447: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 26
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: LD_INT 25
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 25
6486: PUSH
6487: LD_INT 2
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 25
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: LD_INT 25
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: LIST
6525: PUSH
6526: LD_EXP 1
6530: PUSH
6531: EMPTY
6532: LIST
6533: DIFF
6534: PPUSH
6535: CALL_OW 69
6539: PPUSH
6540: LD_STRING D1b-Sol1-1
6542: PPUSH
6543: LD_STRING 
6545: PPUSH
6546: CALL 12982 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6550: LD_EXP 3
6554: PPUSH
6555: LD_STRING D1b-Don-2
6557: PPUSH
6558: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6562: LD_EXP 1
6566: PPUSH
6567: LD_STRING D1b-JMM-2
6569: PPUSH
6570: CALL_OW 88
// dec = ShowQuery1 ;
6574: LD_ADDR_VAR 0 4
6578: PUSH
6579: CALL 13518 0 0
6583: ST_TO_ADDR
// if dec = 1 then
6584: LD_VAR 0 4
6588: PUSH
6589: LD_INT 1
6591: EQUAL
6592: IFFALSE 6698
// begin Say ( JMM , D2-JMM-1 ) ;
6594: LD_EXP 1
6598: PPUSH
6599: LD_STRING D2-JMM-1
6601: PPUSH
6602: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6606: LD_EXP 22
6610: PPUSH
6611: LD_STRING D2-Pow-1
6613: PPUSH
6614: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6618: LD_EXP 1
6622: PPUSH
6623: LD_STRING D2a-JMM-1
6625: PPUSH
6626: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6630: LD_EXP 22
6634: PPUSH
6635: LD_STRING D2a-Pow-1
6637: PPUSH
6638: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6642: LD_EXP 1
6646: PPUSH
6647: LD_STRING D2a-JMM-2
6649: PPUSH
6650: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6654: LD_EXP 22
6658: PPUSH
6659: LD_STRING D2a-Pow-2
6661: PPUSH
6662: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6666: LD_EXP 1
6670: PPUSH
6671: LD_STRING D2a-JMM-3
6673: PPUSH
6674: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6678: LD_EXP 22
6682: PPUSH
6683: LD_STRING D2a-Pow-3
6685: PPUSH
6686: CALL_OW 94
// secondPass = 2 ;
6690: LD_ADDR_EXP 28
6694: PUSH
6695: LD_INT 2
6697: ST_TO_ADDR
// end ; if dec = 2 then
6698: LD_VAR 0 4
6702: PUSH
6703: LD_INT 2
6705: EQUAL
6706: IFFALSE 6800
// begin Say ( JMM , D2-JMM-1 ) ;
6708: LD_EXP 1
6712: PPUSH
6713: LD_STRING D2-JMM-1
6715: PPUSH
6716: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6720: LD_EXP 22
6724: PPUSH
6725: LD_STRING D2-Pow-1
6727: PPUSH
6728: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6732: LD_EXP 1
6736: PPUSH
6737: LD_STRING D2b-JMM-1
6739: PPUSH
6740: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6744: LD_EXP 22
6748: PPUSH
6749: LD_STRING D2b-Pow-1
6751: PPUSH
6752: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6756: LD_EXP 1
6760: PPUSH
6761: LD_STRING D2c-JMM-1
6763: PPUSH
6764: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6768: LD_EXP 22
6772: PPUSH
6773: LD_STRING D2c-Pow-1
6775: PPUSH
6776: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6780: LD_EXP 1
6784: PPUSH
6785: LD_STRING D2c-JMM-2
6787: PPUSH
6788: CALL_OW 88
// secondPass = 2 ;
6792: LD_ADDR_EXP 28
6796: PUSH
6797: LD_INT 2
6799: ST_TO_ADDR
// end ; if dec = 3 then
6800: LD_VAR 0 4
6804: PUSH
6805: LD_INT 3
6807: EQUAL
6808: IFFALSE 6818
// secondPass = 1 ;
6810: LD_ADDR_EXP 28
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// InGameOff ;
6818: CALL_OW 9
// ruAI = 1 ;
6822: LD_ADDR_EXP 41
6826: PUSH
6827: LD_INT 1
6829: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6830: LD_INT 1
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: LD_INT 2
6838: PPUSH
6839: LD_INT 1
6841: PPUSH
6842: CALL_OW 80
// SaveForQuickRestart ;
6846: CALL_OW 22
// exit ;
6850: POP
6851: POP
6852: GO 6858
// end ; end ;
6854: GO 6220
6856: POP
6857: POP
// end ;
6858: PPOPN 4
6860: END
// every 1 1$0 trigger secondPass = 2 do
6861: LD_EXP 28
6865: PUSH
6866: LD_INT 2
6868: EQUAL
6869: IFFALSE 6996
6871: GO 6873
6873: DISABLE
// begin PowellSupport1 ;
6874: CALL 2113 0 0
// DialogueOn ;
6878: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6882: LD_EXP 1
6886: PPUSH
6887: LD_STRING DC1-JMM-1
6889: PPUSH
6890: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6894: LD_EXP 22
6898: PPUSH
6899: LD_STRING DC1-Pow-1
6901: PPUSH
6902: CALL_OW 94
// DialogueOff ;
6906: CALL_OW 7
// wait ( 3 3$0 ) ;
6910: LD_INT 6300
6912: PPUSH
6913: CALL_OW 67
// PowellSupport2 ;
6917: CALL 2688 0 0
// DialogueOn ;
6921: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6925: LD_EXP 1
6929: PPUSH
6930: LD_STRING DC2-JMM-1
6932: PPUSH
6933: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6937: LD_EXP 22
6941: PPUSH
6942: LD_STRING DC2-Pow-1
6944: PPUSH
6945: CALL_OW 94
// DialogueOff ;
6949: CALL_OW 7
// wait ( 6 6$0 ) ;
6953: LD_INT 12600
6955: PPUSH
6956: CALL_OW 67
// PowellSupport3 ;
6960: CALL 3280 0 0
// DialogueOn ;
6964: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6968: LD_EXP 22
6972: PPUSH
6973: LD_STRING DC3-Pow-1
6975: PPUSH
6976: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6980: LD_EXP 1
6984: PPUSH
6985: LD_STRING DC3-JMM-1
6987: PPUSH
6988: CALL_OW 88
// DialogueOff ;
6992: CALL_OW 7
// end ;
6996: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6997: LD_EXP 28
7001: PUSH
7002: LD_INT 2
7004: EQUAL
7005: PUSH
7006: LD_INT 22
7008: PUSH
7009: LD_INT 1
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 2
7018: PUSH
7019: LD_INT 30
7021: PUSH
7022: LD_INT 0
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 30
7031: PUSH
7032: LD_INT 1
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PPUSH
7048: CALL_OW 69
7052: PUSH
7053: LD_INT 0
7055: GREATER
7056: AND
7057: IFFALSE 10447
7059: GO 7061
7061: DISABLE
7062: LD_INT 0
7064: PPUSH
7065: PPUSH
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7072: LD_ADDR_VAR 0 4
7076: PUSH
7077: LD_INT 22
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 21
7089: PUSH
7090: LD_INT 3
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 0
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 30
7112: PUSH
7113: LD_INT 1
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: PPUSH
7130: CALL_OW 69
7134: ST_TO_ADDR
// for i in tmp do
7135: LD_ADDR_VAR 0 1
7139: PUSH
7140: LD_VAR 0 4
7144: PUSH
7145: FOR_IN
7146: IFFALSE 7179
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7148: LD_ADDR_VAR 0 6
7152: PUSH
7153: LD_VAR 0 6
7157: PUSH
7158: LD_VAR 0 1
7162: PPUSH
7163: CALL_OW 274
7167: PPUSH
7168: LD_INT 1
7170: PPUSH
7171: CALL_OW 275
7175: PLUS
7176: ST_TO_ADDR
7177: GO 7145
7179: POP
7180: POP
// for i in tmp do
7181: LD_ADDR_VAR 0 1
7185: PUSH
7186: LD_VAR 0 4
7190: PUSH
7191: FOR_IN
7192: IFFALSE 7225
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7194: LD_ADDR_VAR 0 7
7198: PUSH
7199: LD_VAR 0 7
7203: PUSH
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 274
7213: PPUSH
7214: LD_INT 2
7216: PPUSH
7217: CALL_OW 275
7221: PLUS
7222: ST_TO_ADDR
7223: GO 7191
7225: POP
7226: POP
// for i in tmp do
7227: LD_ADDR_VAR 0 1
7231: PUSH
7232: LD_VAR 0 4
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7271
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7240: LD_ADDR_VAR 0 8
7244: PUSH
7245: LD_VAR 0 8
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 274
7259: PPUSH
7260: LD_INT 3
7262: PPUSH
7263: CALL_OW 275
7267: PLUS
7268: ST_TO_ADDR
7269: GO 7237
7271: POP
7272: POP
// PrepareKurt ;
7273: CALL 4707 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7277: LD_EXP 26
7281: PPUSH
7282: LD_INT 144
7284: PPUSH
7285: LD_INT 111
7287: PPUSH
7288: CALL_OW 111
// wait ( 0 0$2 ) ;
7292: LD_INT 70
7294: PPUSH
7295: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
7299: LD_INT 8
7301: PPUSH
7302: LD_INT 1
7304: PPUSH
7305: CALL_OW 343
// if kurtStatus > 0 then
7309: LD_EXP 27
7313: PUSH
7314: LD_INT 0
7316: GREATER
7317: IFFALSE 8879
// begin ComExitVehicle ( Kurt ) ;
7319: LD_EXP 24
7323: PPUSH
7324: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7328: LD_EXP 24
7332: PPUSH
7333: CALL_OW 87
// wait ( 0 0$1 ) ;
7337: LD_INT 35
7339: PPUSH
7340: CALL_OW 67
// DialogueOn ;
7344: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
7348: LD_INT 22
7350: PUSH
7351: LD_INT 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 26
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 2
7370: PUSH
7371: LD_INT 25
7373: PUSH
7374: LD_INT 1
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 25
7383: PUSH
7384: LD_INT 2
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 25
7393: PUSH
7394: LD_INT 3
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 25
7403: PUSH
7404: LD_INT 4
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: LIST
7422: PUSH
7423: LD_EXP 1
7427: PUSH
7428: EMPTY
7429: LIST
7430: DIFF
7431: PPUSH
7432: CALL_OW 69
7436: PPUSH
7437: LD_STRING D3-Sol1-1
7439: PPUSH
7440: LD_STRING 
7442: PPUSH
7443: CALL 12982 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-1
7454: PPUSH
7455: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7459: LD_EXP 1
7463: PPUSH
7464: LD_STRING D3-JMM-1
7466: PPUSH
7467: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7471: LD_EXP 24
7475: PPUSH
7476: LD_STRING D3-Kurt-2
7478: PPUSH
7479: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7483: LD_EXP 1
7487: PPUSH
7488: LD_STRING D3-JMM-2
7490: PPUSH
7491: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7495: LD_EXP 24
7499: PPUSH
7500: LD_STRING D3-Kurt-4
7502: PPUSH
7503: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7507: LD_EXP 1
7511: PPUSH
7512: LD_STRING D3-JMM-4
7514: PPUSH
7515: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7519: LD_EXP 24
7523: PPUSH
7524: LD_STRING D3-Kurt-5
7526: PPUSH
7527: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7531: LD_EXP 24
7535: PPUSH
7536: LD_STRING D3-Kurt-5a
7538: PPUSH
7539: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7543: LD_EXP 24
7547: PPUSH
7548: LD_STRING D3-Kurt-5b
7550: PPUSH
7551: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7555: LD_VAR 0 6
7559: PUSH
7560: LD_INT 60
7562: GREATEREQUAL
7563: PUSH
7564: LD_VAR 0 8
7568: PUSH
7569: LD_INT 60
7571: GREATEREQUAL
7572: AND
7573: IFFALSE 7608
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7575: LD_ADDR_VAR 0 2
7579: PUSH
7580: LD_STRING Q2K
7582: PPUSH
7583: LD_INT 1
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: LD_INT 4
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 98
7605: ST_TO_ADDR
7606: GO 7631
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_STRING Q2K
7615: PPUSH
7616: LD_INT 3
7618: PUSH
7619: LD_INT 4
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 98
7630: ST_TO_ADDR
// if dec1 = 1 then
7631: LD_VAR 0 2
7635: PUSH
7636: LD_INT 1
7638: EQUAL
7639: IFFALSE 7673
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D3Ka-JMM-1
7648: PPUSH
7649: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7653: LD_EXP 24
7657: PPUSH
7658: LD_STRING D3Ka-Kurt-1
7660: PPUSH
7661: CALL_OW 88
// warWithLegion = 1 ;
7665: LD_ADDR_EXP 30
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// end ; if dec1 = 2 then
7673: LD_VAR 0 2
7677: PUSH
7678: LD_INT 2
7680: EQUAL
7681: IFFALSE 7907
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7683: LD_EXP 1
7687: PPUSH
7688: LD_STRING D3Kb-JMM-1
7690: PPUSH
7691: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7695: LD_EXP 24
7699: PPUSH
7700: LD_STRING D3Kb-Kurt-1
7702: PPUSH
7703: CALL_OW 88
// for i in tmp do
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 4
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7805
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7720: LD_ADDR_VAR 0 5
7724: PUSH
7725: LD_VAR 0 1
7729: PPUSH
7730: CALL_OW 274
7734: PPUSH
7735: LD_INT 1
7737: PPUSH
7738: CALL_OW 275
7742: ST_TO_ADDR
// if tmp2 >= 60 then
7743: LD_VAR 0 5
7747: PUSH
7748: LD_INT 60
7750: GREATEREQUAL
7751: IFFALSE 7783
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7753: LD_VAR 0 1
7757: PPUSH
7758: CALL_OW 274
7762: PPUSH
7763: LD_INT 1
7765: PPUSH
7766: LD_VAR 0 5
7770: PUSH
7771: LD_INT 60
7773: MINUS
7774: PPUSH
7775: CALL_OW 277
// break ;
7779: GO 7805
// end else
7781: GO 7803
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 274
7792: PPUSH
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 0
7798: PPUSH
7799: CALL_OW 277
// end ; end ;
7803: GO 7717
7805: POP
7806: POP
// for i in tmp do
7807: LD_ADDR_VAR 0 1
7811: PUSH
7812: LD_VAR 0 4
7816: PUSH
7817: FOR_IN
7818: IFFALSE 7905
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7820: LD_ADDR_VAR 0 5
7824: PUSH
7825: LD_VAR 0 1
7829: PPUSH
7830: CALL_OW 274
7834: PPUSH
7835: LD_INT 3
7837: PPUSH
7838: CALL_OW 275
7842: ST_TO_ADDR
// if tmp2 >= 60 then
7843: LD_VAR 0 5
7847: PUSH
7848: LD_INT 60
7850: GREATEREQUAL
7851: IFFALSE 7883
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7853: LD_VAR 0 1
7857: PPUSH
7858: CALL_OW 274
7862: PPUSH
7863: LD_INT 3
7865: PPUSH
7866: LD_VAR 0 5
7870: PUSH
7871: LD_INT 60
7873: MINUS
7874: PPUSH
7875: CALL_OW 277
// break ;
7879: GO 7905
// end else
7881: GO 7903
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7883: LD_VAR 0 1
7887: PPUSH
7888: CALL_OW 274
7892: PPUSH
7893: LD_INT 3
7895: PPUSH
7896: LD_INT 0
7898: PPUSH
7899: CALL_OW 277
// end ; end ;
7903: GO 7817
7905: POP
7906: POP
// end ; if dec1 = 3 then
7907: LD_VAR 0 2
7911: PUSH
7912: LD_INT 3
7914: EQUAL
7915: IFFALSE 8150
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7917: LD_EXP 1
7921: PPUSH
7922: LD_STRING D3Kc1-JMM-1
7924: PPUSH
7925: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7929: LD_EXP 24
7933: PPUSH
7934: LD_STRING D3Kc1-Kurt-1
7936: PPUSH
7937: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7941: LD_EXP 1
7945: PPUSH
7946: LD_STRING D3Kc1-JMM-2
7948: PPUSH
7949: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7953: LD_EXP 24
7957: PPUSH
7958: LD_STRING D3Kc1-Kurt-2
7960: PPUSH
7961: CALL_OW 88
// askSiberite = 1 ;
7965: LD_ADDR_EXP 32
7969: PUSH
7970: LD_INT 1
7972: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: LD_STRING Q2b
7980: PPUSH
7981: LD_INT 1
7983: PUSH
7984: LD_INT 2
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: PPUSH
7995: CALL_OW 98
7999: ST_TO_ADDR
// if dec2 = 1 then
8000: LD_VAR 0 3
8004: PUSH
8005: LD_INT 1
8007: EQUAL
8008: IFFALSE 8042
// begin Say ( JMM , D4a-JMM-1 ) ;
8010: LD_EXP 1
8014: PPUSH
8015: LD_STRING D4a-JMM-1
8017: PPUSH
8018: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8022: LD_EXP 24
8026: PPUSH
8027: LD_STRING D4b-Kurt-1
8029: PPUSH
8030: CALL_OW 88
// warWithLegion = 1 ;
8034: LD_ADDR_EXP 30
8038: PUSH
8039: LD_INT 1
8041: ST_TO_ADDR
// end ; if dec2 = 2 then
8042: LD_VAR 0 3
8046: PUSH
8047: LD_INT 2
8049: EQUAL
8050: IFFALSE 8084
// begin Say ( JMM , D4b-JMM-1 ) ;
8052: LD_EXP 1
8056: PPUSH
8057: LD_STRING D4b-JMM-1
8059: PPUSH
8060: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING D4b-Kurt-1
8071: PPUSH
8072: CALL_OW 88
// warWithLegion = 1 ;
8076: LD_ADDR_EXP 30
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// end ; if dec2 = 3 then
8084: LD_VAR 0 3
8088: PUSH
8089: LD_INT 3
8091: EQUAL
8092: IFFALSE 8150
// begin Say ( JMM , D4c-JMM-1 ) ;
8094: LD_EXP 1
8098: PPUSH
8099: LD_STRING D4c-JMM-1
8101: PPUSH
8102: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8106: LD_EXP 24
8110: PPUSH
8111: LD_STRING D4c-Kurt-1
8113: PPUSH
8114: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8118: LD_EXP 1
8122: PPUSH
8123: LD_STRING D4c-JMM-2
8125: PPUSH
8126: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8130: LD_EXP 24
8134: PPUSH
8135: LD_STRING D4c-Kurt-2
8137: PPUSH
8138: CALL_OW 88
// fakeInfo = 1 ;
8142: LD_ADDR_EXP 31
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8150: LD_VAR 0 2
8154: PUSH
8155: LD_INT 4
8157: EQUAL
8158: IFFALSE 8815
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8160: LD_EXP 1
8164: PPUSH
8165: LD_STRING D3Kd-JMM-1
8167: PPUSH
8168: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
8172: LD_VAR 0 6
8176: PUSH
8177: LD_INT 120
8179: GREATEREQUAL
8180: PUSH
8181: LD_VAR 0 8
8185: PUSH
8186: LD_INT 120
8188: GREATEREQUAL
8189: AND
8190: IFFALSE 8225
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
8192: LD_ADDR_VAR 0 3
8196: PUSH
8197: LD_STRING Q2aK
8199: PPUSH
8200: LD_INT 1
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: LD_INT 3
8208: PUSH
8209: LD_INT 4
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: PPUSH
8218: CALL_OW 98
8222: ST_TO_ADDR
8223: GO 8248
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
8225: LD_ADDR_VAR 0 3
8229: PUSH
8230: LD_STRING Q2K
8232: PPUSH
8233: LD_INT 1
8235: PUSH
8236: LD_INT 4
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 98
8247: ST_TO_ADDR
// if dec2 = 1 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 1
8255: EQUAL
8256: IFFALSE 8290
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8258: LD_EXP 1
8262: PPUSH
8263: LD_STRING D5Ka-JMM-1
8265: PPUSH
8266: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8270: LD_EXP 24
8274: PPUSH
8275: LD_STRING D5Ka-Kurt-1
8277: PPUSH
8278: CALL_OW 88
// warWithLegion = 1 ;
8282: LD_ADDR_EXP 30
8286: PUSH
8287: LD_INT 1
8289: ST_TO_ADDR
// end ; if dec2 = 2 then
8290: LD_VAR 0 3
8294: PUSH
8295: LD_INT 2
8297: EQUAL
8298: IFFALSE 8324
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8300: LD_EXP 1
8304: PPUSH
8305: LD_STRING D3Kb-JMM-1
8307: PPUSH
8308: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8312: LD_EXP 24
8316: PPUSH
8317: LD_STRING D3Kb-Kurt-1
8319: PPUSH
8320: CALL_OW 88
// end ; if dec2 = 3 then
8324: LD_VAR 0 3
8328: PUSH
8329: LD_INT 3
8331: EQUAL
8332: IFFALSE 8562
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8334: LD_EXP 1
8338: PPUSH
8339: LD_STRING D3Ke-JMM-1
8341: PPUSH
8342: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8346: LD_EXP 24
8350: PPUSH
8351: LD_STRING D3Ke-Kurt-1
8353: PPUSH
8354: CALL_OW 88
// PrepareLegionForPlayer ;
8358: CALL 4891 0 0
// for i in tmp do
8362: LD_ADDR_VAR 0 1
8366: PUSH
8367: LD_VAR 0 4
8371: PUSH
8372: FOR_IN
8373: IFFALSE 8460
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8375: LD_ADDR_VAR 0 5
8379: PUSH
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 274
8389: PPUSH
8390: LD_INT 1
8392: PPUSH
8393: CALL_OW 275
8397: ST_TO_ADDR
// if tmp2 >= 120 then
8398: LD_VAR 0 5
8402: PUSH
8403: LD_INT 120
8405: GREATEREQUAL
8406: IFFALSE 8438
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 274
8417: PPUSH
8418: LD_INT 1
8420: PPUSH
8421: LD_VAR 0 5
8425: PUSH
8426: LD_INT 120
8428: MINUS
8429: PPUSH
8430: CALL_OW 277
// break ;
8434: GO 8460
// end else
8436: GO 8458
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8438: LD_VAR 0 1
8442: PPUSH
8443: CALL_OW 274
8447: PPUSH
8448: LD_INT 1
8450: PPUSH
8451: LD_INT 0
8453: PPUSH
8454: CALL_OW 277
// end ; end ;
8458: GO 8372
8460: POP
8461: POP
// for i in tmp do
8462: LD_ADDR_VAR 0 1
8466: PUSH
8467: LD_VAR 0 4
8471: PUSH
8472: FOR_IN
8473: IFFALSE 8560
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8475: LD_ADDR_VAR 0 5
8479: PUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 274
8489: PPUSH
8490: LD_INT 3
8492: PPUSH
8493: CALL_OW 275
8497: ST_TO_ADDR
// if tmp2 >= 120 then
8498: LD_VAR 0 5
8502: PUSH
8503: LD_INT 120
8505: GREATEREQUAL
8506: IFFALSE 8538
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8508: LD_VAR 0 1
8512: PPUSH
8513: CALL_OW 274
8517: PPUSH
8518: LD_INT 3
8520: PPUSH
8521: LD_VAR 0 5
8525: PUSH
8526: LD_INT 120
8528: MINUS
8529: PPUSH
8530: CALL_OW 277
// break ;
8534: GO 8560
// end else
8536: GO 8558
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8538: LD_VAR 0 1
8542: PPUSH
8543: CALL_OW 274
8547: PPUSH
8548: LD_INT 3
8550: PPUSH
8551: LD_INT 0
8553: PPUSH
8554: CALL_OW 277
// end ; end ;
8558: GO 8472
8560: POP
8561: POP
// end ; if dec2 = 4 then
8562: LD_VAR 0 3
8566: PUSH
8567: LD_INT 4
8569: EQUAL
8570: IFFALSE 8815
// begin if dec1 = 3 then
8572: LD_VAR 0 2
8576: PUSH
8577: LD_INT 3
8579: EQUAL
8580: IFFALSE 8815
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8582: LD_EXP 1
8586: PPUSH
8587: LD_STRING D3Kc1-JMM-1
8589: PPUSH
8590: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8594: LD_EXP 24
8598: PPUSH
8599: LD_STRING D3Kc1-Kurt-1
8601: PPUSH
8602: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8606: LD_EXP 1
8610: PPUSH
8611: LD_STRING D3Kc1-JMM-2
8613: PPUSH
8614: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8618: LD_EXP 24
8622: PPUSH
8623: LD_STRING D3Kc1-Kurt-2
8625: PPUSH
8626: CALL_OW 88
// askSiberite = 1 ;
8630: LD_ADDR_EXP 32
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8638: LD_ADDR_VAR 0 2
8642: PUSH
8643: LD_STRING Q2b
8645: PPUSH
8646: LD_INT 1
8648: PUSH
8649: LD_INT 2
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 98
8664: ST_TO_ADDR
// if dec2 = 1 then
8665: LD_VAR 0 3
8669: PUSH
8670: LD_INT 1
8672: EQUAL
8673: IFFALSE 8707
// begin Say ( JMM , D4a-JMM-1 ) ;
8675: LD_EXP 1
8679: PPUSH
8680: LD_STRING D4a-JMM-1
8682: PPUSH
8683: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8687: LD_EXP 24
8691: PPUSH
8692: LD_STRING D4b-Kurt-1
8694: PPUSH
8695: CALL_OW 88
// warWithLegion = 1 ;
8699: LD_ADDR_EXP 30
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// end ; if dec2 = 2 then
8707: LD_VAR 0 3
8711: PUSH
8712: LD_INT 2
8714: EQUAL
8715: IFFALSE 8749
// begin Say ( JMM , D4b-JMM-1 ) ;
8717: LD_EXP 1
8721: PPUSH
8722: LD_STRING D4b-JMM-1
8724: PPUSH
8725: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8729: LD_EXP 24
8733: PPUSH
8734: LD_STRING D4b-Kurt-1
8736: PPUSH
8737: CALL_OW 88
// warWithLegion = 1 ;
8741: LD_ADDR_EXP 30
8745: PUSH
8746: LD_INT 1
8748: ST_TO_ADDR
// end ; if dec2 = 3 then
8749: LD_VAR 0 3
8753: PUSH
8754: LD_INT 3
8756: EQUAL
8757: IFFALSE 8815
// begin Say ( JMM , D4c-JMM-1 ) ;
8759: LD_EXP 1
8763: PPUSH
8764: LD_STRING D4c-JMM-1
8766: PPUSH
8767: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8771: LD_EXP 24
8775: PPUSH
8776: LD_STRING D4c-Kurt-1
8778: PPUSH
8779: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8783: LD_EXP 1
8787: PPUSH
8788: LD_STRING D4c-JMM-2
8790: PPUSH
8791: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8795: LD_EXP 24
8799: PPUSH
8800: LD_STRING D4c-Kurt-2
8802: PPUSH
8803: CALL_OW 88
// fakeInfo = 1 ;
8807: LD_ADDR_EXP 31
8811: PUSH
8812: LD_INT 1
8814: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8815: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8819: LD_EXP 24
8823: PPUSH
8824: LD_EXP 26
8828: PPUSH
8829: CALL_OW 120
// wait ( 0 0$1 ) ;
8833: LD_INT 35
8835: PPUSH
8836: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8840: LD_EXP 26
8844: PPUSH
8845: LD_INT 4
8847: PPUSH
8848: CALL_OW 113
// wait ( 0 0$3 ) ;
8852: LD_INT 105
8854: PPUSH
8855: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8859: LD_EXP 24
8863: PPUSH
8864: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8868: LD_EXP 26
8872: PPUSH
8873: CALL_OW 64
// end else
8877: GO 10447
// begin ComExitVehicle ( otherKurt ) ;
8879: LD_EXP 25
8883: PPUSH
8884: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8888: LD_EXP 25
8892: PPUSH
8893: CALL_OW 87
// wait ( 0 0$1 ) ;
8897: LD_INT 35
8899: PPUSH
8900: CALL_OW 67
// DialogueOn ;
8904: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
8908: LD_INT 22
8910: PUSH
8911: LD_INT 1
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 26
8920: PUSH
8921: LD_INT 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 2
8930: PUSH
8931: LD_INT 25
8933: PUSH
8934: LD_INT 1
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 25
8943: PUSH
8944: LD_INT 2
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 25
8953: PUSH
8954: LD_INT 3
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 25
8963: PUSH
8964: LD_INT 4
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: LIST
8982: PUSH
8983: LD_EXP 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: DIFF
8991: PPUSH
8992: CALL_OW 69
8996: PPUSH
8997: LD_STRING D3-Sol1-1
8999: PPUSH
9000: LD_STRING 
9002: PPUSH
9003: CALL 12982 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
9007: LD_EXP 25
9011: PPUSH
9012: LD_STRING D3-Kurt-1
9014: PPUSH
9015: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
9019: LD_EXP 1
9023: PPUSH
9024: LD_STRING D3-JMM-1
9026: PPUSH
9027: CALL_OW 88
// Say ( otherKurt , D3-Kurt-2 ) ;
9031: LD_EXP 25
9035: PPUSH
9036: LD_STRING D3-Kurt-2
9038: PPUSH
9039: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
9043: LD_EXP 1
9047: PPUSH
9048: LD_STRING D3-JMM-2
9050: PPUSH
9051: CALL_OW 88
// Say ( otherKurt , D3-Kurt-4 ) ;
9055: LD_EXP 25
9059: PPUSH
9060: LD_STRING D3-Kurt-4
9062: PPUSH
9063: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
9067: LD_EXP 1
9071: PPUSH
9072: LD_STRING D3-JMM-4
9074: PPUSH
9075: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
9079: LD_EXP 25
9083: PPUSH
9084: LD_STRING D3-Kurt-5
9086: PPUSH
9087: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5a ) ;
9091: LD_EXP 25
9095: PPUSH
9096: LD_STRING D3-Kurt-5a
9098: PPUSH
9099: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
9103: LD_EXP 25
9107: PPUSH
9108: LD_STRING D3-Kurt-5b
9110: PPUSH
9111: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
9115: LD_VAR 0 6
9119: PUSH
9120: LD_INT 100
9122: GREATEREQUAL
9123: PUSH
9124: LD_VAR 0 8
9128: PUSH
9129: LD_INT 100
9131: GREATEREQUAL
9132: AND
9133: IFFALSE 9168
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
9135: LD_ADDR_VAR 0 2
9139: PUSH
9140: LD_STRING Q2
9142: PPUSH
9143: LD_INT 1
9145: PUSH
9146: LD_INT 2
9148: PUSH
9149: LD_INT 3
9151: PUSH
9152: LD_INT 4
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 98
9165: ST_TO_ADDR
9166: GO 9191
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
9168: LD_ADDR_VAR 0 2
9172: PUSH
9173: LD_STRING Q2
9175: PPUSH
9176: LD_INT 3
9178: PUSH
9179: LD_INT 4
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL_OW 98
9190: ST_TO_ADDR
// if dec1 = 1 then
9191: LD_VAR 0 2
9195: PUSH
9196: LD_INT 1
9198: EQUAL
9199: IFFALSE 9233
// begin Say ( JMM , D3Ka-JMM-1 ) ;
9201: LD_EXP 1
9205: PPUSH
9206: LD_STRING D3Ka-JMM-1
9208: PPUSH
9209: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
9213: LD_EXP 25
9217: PPUSH
9218: LD_STRING D3Ka-Kurt-1
9220: PPUSH
9221: CALL_OW 88
// warWithLegion = 1 ;
9225: LD_ADDR_EXP 30
9229: PUSH
9230: LD_INT 1
9232: ST_TO_ADDR
// end ; if dec1 = 2 then
9233: LD_VAR 0 2
9237: PUSH
9238: LD_INT 2
9240: EQUAL
9241: IFFALSE 9467
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D3Kb-JMM-1
9250: PPUSH
9251: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9255: LD_EXP 25
9259: PPUSH
9260: LD_STRING D3Kb-Kurt-1
9262: PPUSH
9263: CALL_OW 88
// for i in tmp do
9267: LD_ADDR_VAR 0 1
9271: PUSH
9272: LD_VAR 0 4
9276: PUSH
9277: FOR_IN
9278: IFFALSE 9365
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9280: LD_ADDR_VAR 0 5
9284: PUSH
9285: LD_VAR 0 1
9289: PPUSH
9290: CALL_OW 274
9294: PPUSH
9295: LD_INT 1
9297: PPUSH
9298: CALL_OW 275
9302: ST_TO_ADDR
// if tmp2 >= 100 then
9303: LD_VAR 0 5
9307: PUSH
9308: LD_INT 100
9310: GREATEREQUAL
9311: IFFALSE 9343
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
9313: LD_VAR 0 1
9317: PPUSH
9318: CALL_OW 274
9322: PPUSH
9323: LD_INT 1
9325: PPUSH
9326: LD_VAR 0 5
9330: PUSH
9331: LD_INT 100
9333: MINUS
9334: PPUSH
9335: CALL_OW 277
// break ;
9339: GO 9365
// end else
9341: GO 9363
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 274
9352: PPUSH
9353: LD_INT 1
9355: PPUSH
9356: LD_INT 0
9358: PPUSH
9359: CALL_OW 277
// end ; end ;
9363: GO 9277
9365: POP
9366: POP
// for i in tmp do
9367: LD_ADDR_VAR 0 1
9371: PUSH
9372: LD_VAR 0 4
9376: PUSH
9377: FOR_IN
9378: IFFALSE 9465
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9380: LD_ADDR_VAR 0 5
9384: PUSH
9385: LD_VAR 0 1
9389: PPUSH
9390: CALL_OW 274
9394: PPUSH
9395: LD_INT 3
9397: PPUSH
9398: CALL_OW 275
9402: ST_TO_ADDR
// if tmp2 >= 100 then
9403: LD_VAR 0 5
9407: PUSH
9408: LD_INT 100
9410: GREATEREQUAL
9411: IFFALSE 9443
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
9413: LD_VAR 0 1
9417: PPUSH
9418: CALL_OW 274
9422: PPUSH
9423: LD_INT 3
9425: PPUSH
9426: LD_VAR 0 5
9430: PUSH
9431: LD_INT 100
9433: MINUS
9434: PPUSH
9435: CALL_OW 277
// break ;
9439: GO 9465
// end else
9441: GO 9463
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9443: LD_VAR 0 1
9447: PPUSH
9448: CALL_OW 274
9452: PPUSH
9453: LD_INT 3
9455: PPUSH
9456: LD_INT 0
9458: PPUSH
9459: CALL_OW 277
// end ; end ;
9463: GO 9377
9465: POP
9466: POP
// end ; if dec1 = 3 then
9467: LD_VAR 0 2
9471: PUSH
9472: LD_INT 3
9474: EQUAL
9475: IFFALSE 9710
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9477: LD_EXP 1
9481: PPUSH
9482: LD_STRING D3Kc1-JMM-1
9484: PPUSH
9485: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9489: LD_EXP 25
9493: PPUSH
9494: LD_STRING D3Kc1-Kurt-1
9496: PPUSH
9497: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9501: LD_EXP 1
9505: PPUSH
9506: LD_STRING D3Kc1-JMM-2
9508: PPUSH
9509: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9513: LD_EXP 25
9517: PPUSH
9518: LD_STRING D3Kc1-Kurt-2
9520: PPUSH
9521: CALL_OW 88
// askSiberite = 1 ;
9525: LD_ADDR_EXP 32
9529: PUSH
9530: LD_INT 1
9532: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: LD_STRING Q2b
9540: PPUSH
9541: LD_INT 1
9543: PUSH
9544: LD_INT 2
9546: PUSH
9547: LD_INT 3
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: PPUSH
9555: CALL_OW 98
9559: ST_TO_ADDR
// if dec2 = 1 then
9560: LD_VAR 0 3
9564: PUSH
9565: LD_INT 1
9567: EQUAL
9568: IFFALSE 9602
// begin Say ( JMM , D4a-JMM-1 ) ;
9570: LD_EXP 1
9574: PPUSH
9575: LD_STRING D4a-JMM-1
9577: PPUSH
9578: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9582: LD_EXP 25
9586: PPUSH
9587: LD_STRING D4b-Kurt-1
9589: PPUSH
9590: CALL_OW 88
// warWithLegion = 1 ;
9594: LD_ADDR_EXP 30
9598: PUSH
9599: LD_INT 1
9601: ST_TO_ADDR
// end ; if dec2 = 2 then
9602: LD_VAR 0 3
9606: PUSH
9607: LD_INT 2
9609: EQUAL
9610: IFFALSE 9644
// begin Say ( JMM , D4b-JMM-1 ) ;
9612: LD_EXP 1
9616: PPUSH
9617: LD_STRING D4b-JMM-1
9619: PPUSH
9620: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9624: LD_EXP 25
9628: PPUSH
9629: LD_STRING D4b-Kurt-1
9631: PPUSH
9632: CALL_OW 88
// warWithLegion = 1 ;
9636: LD_ADDR_EXP 30
9640: PUSH
9641: LD_INT 1
9643: ST_TO_ADDR
// end ; if dec2 = 3 then
9644: LD_VAR 0 3
9648: PUSH
9649: LD_INT 3
9651: EQUAL
9652: IFFALSE 9710
// begin Say ( JMM , D4c-JMM-1 ) ;
9654: LD_EXP 1
9658: PPUSH
9659: LD_STRING D4c-JMM-1
9661: PPUSH
9662: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9666: LD_EXP 25
9670: PPUSH
9671: LD_STRING D4c-Kurt-1
9673: PPUSH
9674: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9678: LD_EXP 1
9682: PPUSH
9683: LD_STRING D4c-JMM-2
9685: PPUSH
9686: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9690: LD_EXP 25
9694: PPUSH
9695: LD_STRING D4c-Kurt-2
9697: PPUSH
9698: CALL_OW 88
// fakeInfo = 1 ;
9702: LD_ADDR_EXP 31
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9710: LD_VAR 0 2
9714: PUSH
9715: LD_INT 4
9717: EQUAL
9718: IFFALSE 10375
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9720: LD_EXP 1
9724: PPUSH
9725: LD_STRING D3Kd-JMM-1
9727: PPUSH
9728: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9732: LD_VAR 0 6
9736: PUSH
9737: LD_INT 200
9739: GREATEREQUAL
9740: PUSH
9741: LD_VAR 0 8
9745: PUSH
9746: LD_INT 200
9748: GREATEREQUAL
9749: AND
9750: IFFALSE 9785
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9752: LD_ADDR_VAR 0 3
9756: PUSH
9757: LD_STRING Q2a
9759: PPUSH
9760: LD_INT 1
9762: PUSH
9763: LD_INT 2
9765: PUSH
9766: LD_INT 3
9768: PUSH
9769: LD_INT 4
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL_OW 98
9782: ST_TO_ADDR
9783: GO 9808
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9785: LD_ADDR_VAR 0 3
9789: PUSH
9790: LD_STRING Q2a
9792: PPUSH
9793: LD_INT 1
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PPUSH
9803: CALL_OW 98
9807: ST_TO_ADDR
// if dec2 = 1 then
9808: LD_VAR 0 3
9812: PUSH
9813: LD_INT 1
9815: EQUAL
9816: IFFALSE 9850
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9818: LD_EXP 1
9822: PPUSH
9823: LD_STRING D5Ka-JMM-1
9825: PPUSH
9826: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9830: LD_EXP 25
9834: PPUSH
9835: LD_STRING D5Ka-Kurt-1
9837: PPUSH
9838: CALL_OW 88
// warWithLegion = 1 ;
9842: LD_ADDR_EXP 30
9846: PUSH
9847: LD_INT 1
9849: ST_TO_ADDR
// end ; if dec2 = 2 then
9850: LD_VAR 0 3
9854: PUSH
9855: LD_INT 2
9857: EQUAL
9858: IFFALSE 9884
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9860: LD_EXP 1
9864: PPUSH
9865: LD_STRING D3Kb-JMM-1
9867: PPUSH
9868: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9872: LD_EXP 25
9876: PPUSH
9877: LD_STRING D3Kb-Kurt-1
9879: PPUSH
9880: CALL_OW 88
// end ; if dec2 = 3 then
9884: LD_VAR 0 3
9888: PUSH
9889: LD_INT 3
9891: EQUAL
9892: IFFALSE 10122
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9894: LD_EXP 1
9898: PPUSH
9899: LD_STRING D3Ke-JMM-1
9901: PPUSH
9902: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9906: LD_EXP 25
9910: PPUSH
9911: LD_STRING D3Ke-Kurt-1
9913: PPUSH
9914: CALL_OW 88
// PrepareLegionForPlayer ;
9918: CALL 4891 0 0
// for i in tmp do
9922: LD_ADDR_VAR 0 1
9926: PUSH
9927: LD_VAR 0 4
9931: PUSH
9932: FOR_IN
9933: IFFALSE 10020
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9935: LD_ADDR_VAR 0 5
9939: PUSH
9940: LD_VAR 0 1
9944: PPUSH
9945: CALL_OW 274
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 275
9957: ST_TO_ADDR
// if tmp2 >= 200 then
9958: LD_VAR 0 5
9962: PUSH
9963: LD_INT 200
9965: GREATEREQUAL
9966: IFFALSE 9998
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9968: LD_VAR 0 1
9972: PPUSH
9973: CALL_OW 274
9977: PPUSH
9978: LD_INT 1
9980: PPUSH
9981: LD_VAR 0 5
9985: PUSH
9986: LD_INT 200
9988: MINUS
9989: PPUSH
9990: CALL_OW 277
// break ;
9994: GO 10020
// end else
9996: GO 10018
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 274
10007: PPUSH
10008: LD_INT 1
10010: PPUSH
10011: LD_INT 0
10013: PPUSH
10014: CALL_OW 277
// end ; end ;
10018: GO 9932
10020: POP
10021: POP
// for i in tmp do
10022: LD_ADDR_VAR 0 1
10026: PUSH
10027: LD_VAR 0 4
10031: PUSH
10032: FOR_IN
10033: IFFALSE 10120
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
10035: LD_ADDR_VAR 0 5
10039: PUSH
10040: LD_VAR 0 1
10044: PPUSH
10045: CALL_OW 274
10049: PPUSH
10050: LD_INT 3
10052: PPUSH
10053: CALL_OW 275
10057: ST_TO_ADDR
// if tmp2 >= 200 then
10058: LD_VAR 0 5
10062: PUSH
10063: LD_INT 200
10065: GREATEREQUAL
10066: IFFALSE 10098
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
10068: LD_VAR 0 1
10072: PPUSH
10073: CALL_OW 274
10077: PPUSH
10078: LD_INT 3
10080: PPUSH
10081: LD_VAR 0 5
10085: PUSH
10086: LD_INT 200
10088: MINUS
10089: PPUSH
10090: CALL_OW 277
// break ;
10094: GO 10120
// end else
10096: GO 10118
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
10098: LD_VAR 0 1
10102: PPUSH
10103: CALL_OW 274
10107: PPUSH
10108: LD_INT 3
10110: PPUSH
10111: LD_INT 0
10113: PPUSH
10114: CALL_OW 277
// end ; end ;
10118: GO 10032
10120: POP
10121: POP
// end ; if dec2 = 4 then
10122: LD_VAR 0 3
10126: PUSH
10127: LD_INT 4
10129: EQUAL
10130: IFFALSE 10375
// begin if dec1 = 3 then
10132: LD_VAR 0 2
10136: PUSH
10137: LD_INT 3
10139: EQUAL
10140: IFFALSE 10375
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
10142: LD_EXP 1
10146: PPUSH
10147: LD_STRING D3Kc1-JMM-1
10149: PPUSH
10150: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
10154: LD_EXP 25
10158: PPUSH
10159: LD_STRING D3Kc1-Kurt-1
10161: PPUSH
10162: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
10166: LD_EXP 1
10170: PPUSH
10171: LD_STRING D3Kc1-JMM-2
10173: PPUSH
10174: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
10178: LD_EXP 25
10182: PPUSH
10183: LD_STRING D3Kc1-Kurt-2
10185: PPUSH
10186: CALL_OW 88
// askSiberite = 1 ;
10190: LD_ADDR_EXP 32
10194: PUSH
10195: LD_INT 1
10197: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
10198: LD_ADDR_VAR 0 2
10202: PUSH
10203: LD_STRING Q2b
10205: PPUSH
10206: LD_INT 1
10208: PUSH
10209: LD_INT 2
10211: PUSH
10212: LD_INT 3
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: LIST
10219: PPUSH
10220: CALL_OW 98
10224: ST_TO_ADDR
// if dec2 = 1 then
10225: LD_VAR 0 3
10229: PUSH
10230: LD_INT 1
10232: EQUAL
10233: IFFALSE 10267
// begin Say ( JMM , D4a-JMM-1 ) ;
10235: LD_EXP 1
10239: PPUSH
10240: LD_STRING D4a-JMM-1
10242: PPUSH
10243: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
10247: LD_EXP 25
10251: PPUSH
10252: LD_STRING D4b-Kurt-1
10254: PPUSH
10255: CALL_OW 88
// warWithLegion = 1 ;
10259: LD_ADDR_EXP 30
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
// end ; if dec2 = 2 then
10267: LD_VAR 0 3
10271: PUSH
10272: LD_INT 2
10274: EQUAL
10275: IFFALSE 10309
// begin Say ( JMM , D4b-JMM-1 ) ;
10277: LD_EXP 1
10281: PPUSH
10282: LD_STRING D4b-JMM-1
10284: PPUSH
10285: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
10289: LD_EXP 25
10293: PPUSH
10294: LD_STRING D4b-Kurt-1
10296: PPUSH
10297: CALL_OW 88
// warWithLegion = 1 ;
10301: LD_ADDR_EXP 30
10305: PUSH
10306: LD_INT 1
10308: ST_TO_ADDR
// end ; if dec2 = 3 then
10309: LD_VAR 0 3
10313: PUSH
10314: LD_INT 3
10316: EQUAL
10317: IFFALSE 10375
// begin Say ( JMM , D4c-JMM-1 ) ;
10319: LD_EXP 1
10323: PPUSH
10324: LD_STRING D4c-JMM-1
10326: PPUSH
10327: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
10331: LD_EXP 25
10335: PPUSH
10336: LD_STRING D4c-Kurt-1
10338: PPUSH
10339: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
10343: LD_EXP 1
10347: PPUSH
10348: LD_STRING D4c-JMM-2
10350: PPUSH
10351: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
10355: LD_EXP 25
10359: PPUSH
10360: LD_STRING D4c-Kurt-2
10362: PPUSH
10363: CALL_OW 88
// fakeInfo = 1 ;
10367: LD_ADDR_EXP 31
10371: PUSH
10372: LD_INT 1
10374: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
10375: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
10379: LD_INT 8
10381: PPUSH
10382: LD_INT 8
10384: PPUSH
10385: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
10389: LD_EXP 25
10393: PPUSH
10394: LD_EXP 26
10398: PPUSH
10399: CALL_OW 120
// wait ( 0 0$1 ) ;
10403: LD_INT 35
10405: PPUSH
10406: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
10410: LD_EXP 26
10414: PPUSH
10415: LD_INT 4
10417: PPUSH
10418: CALL_OW 113
// wait ( 0 0$6 ) ;
10422: LD_INT 210
10424: PPUSH
10425: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10429: LD_EXP 25
10433: PPUSH
10434: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10438: LD_EXP 26
10442: PPUSH
10443: CALL_OW 64
// end ; end ;
10447: PPOPN 8
10449: END
// every 0 0$10 trigger warWithLegion = 1 do
10450: LD_EXP 30
10454: PUSH
10455: LD_INT 1
10457: EQUAL
10458: IFFALSE 10467
10460: GO 10462
10462: DISABLE
// PrepareAttackLegion ;
10463: CALL 5619 0 0
10467: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10468: LD_EXP 15
10472: PPUSH
10473: CALL_OW 305
10477: PUSH
10478: LD_EXP 15
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 289
10490: NOT
10491: AND
10492: PUSH
10493: LD_EXP 15
10497: PPUSH
10498: LD_INT 2
10500: PPUSH
10501: CALL_OW 289
10505: NOT
10506: AND
10507: PUSH
10508: LD_EXP 15
10512: PPUSH
10513: LD_INT 3
10515: PPUSH
10516: CALL_OW 289
10520: NOT
10521: AND
10522: IFFALSE 10539
10524: GO 10526
10526: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10527: LD_EXP 15
10531: PPUSH
10532: LD_INT 4
10534: PPUSH
10535: CALL_OW 235
10539: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10540: LD_EXP 16
10544: PPUSH
10545: CALL_OW 305
10549: PUSH
10550: LD_EXP 16
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: CALL_OW 289
10562: NOT
10563: AND
10564: PUSH
10565: LD_EXP 16
10569: PPUSH
10570: LD_INT 2
10572: PPUSH
10573: CALL_OW 289
10577: NOT
10578: AND
10579: PUSH
10580: LD_EXP 16
10584: PPUSH
10585: LD_INT 3
10587: PPUSH
10588: CALL_OW 289
10592: NOT
10593: AND
10594: IFFALSE 10611
10596: GO 10598
10598: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10599: LD_EXP 16
10603: PPUSH
10604: LD_INT 4
10606: PPUSH
10607: CALL_OW 235
10611: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10612: LD_EXP 17
10616: PPUSH
10617: CALL_OW 305
10621: PUSH
10622: LD_EXP 17
10626: PPUSH
10627: LD_INT 1
10629: PPUSH
10630: CALL_OW 289
10634: NOT
10635: AND
10636: PUSH
10637: LD_EXP 17
10641: PPUSH
10642: LD_INT 2
10644: PPUSH
10645: CALL_OW 289
10649: NOT
10650: AND
10651: PUSH
10652: LD_EXP 17
10656: PPUSH
10657: LD_INT 3
10659: PPUSH
10660: CALL_OW 289
10664: NOT
10665: AND
10666: IFFALSE 10683
10668: GO 10670
10670: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10671: LD_EXP 17
10675: PPUSH
10676: LD_INT 4
10678: PPUSH
10679: CALL_OW 235
10683: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10684: LD_EXP 18
10688: PPUSH
10689: CALL_OW 305
10693: PUSH
10694: LD_EXP 18
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 289
10706: NOT
10707: AND
10708: PUSH
10709: LD_EXP 18
10713: PPUSH
10714: LD_INT 2
10716: PPUSH
10717: CALL_OW 289
10721: NOT
10722: AND
10723: PUSH
10724: LD_EXP 18
10728: PPUSH
10729: LD_INT 3
10731: PPUSH
10732: CALL_OW 289
10736: NOT
10737: AND
10738: IFFALSE 10755
10740: GO 10742
10742: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10743: LD_EXP 18
10747: PPUSH
10748: LD_INT 4
10750: PPUSH
10751: CALL_OW 235
10755: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10756: LD_EXP 19
10760: PPUSH
10761: CALL_OW 305
10765: PUSH
10766: LD_EXP 19
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 289
10778: NOT
10779: AND
10780: PUSH
10781: LD_EXP 19
10785: PPUSH
10786: LD_INT 2
10788: PPUSH
10789: CALL_OW 289
10793: NOT
10794: AND
10795: PUSH
10796: LD_EXP 19
10800: PPUSH
10801: LD_INT 3
10803: PPUSH
10804: CALL_OW 289
10808: NOT
10809: AND
10810: PUSH
10811: LD_EXP 19
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 289
10823: NOT
10824: AND
10825: IFFALSE 10842
10827: GO 10829
10829: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10830: LD_EXP 19
10834: PPUSH
10835: LD_INT 4
10837: PPUSH
10838: CALL_OW 235
10842: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10843: LD_EXP 20
10847: PPUSH
10848: CALL_OW 305
10852: PUSH
10853: LD_EXP 20
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 289
10865: NOT
10866: AND
10867: PUSH
10868: LD_EXP 20
10872: PPUSH
10873: LD_INT 2
10875: PPUSH
10876: CALL_OW 289
10880: NOT
10881: AND
10882: PUSH
10883: LD_EXP 20
10887: PPUSH
10888: LD_INT 3
10890: PPUSH
10891: CALL_OW 289
10895: NOT
10896: AND
10897: IFFALSE 10914
10899: GO 10901
10901: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10902: LD_EXP 20
10906: PPUSH
10907: LD_INT 4
10909: PPUSH
10910: CALL_OW 235
10914: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10915: LD_EXP 21
10919: PPUSH
10920: CALL_OW 305
10924: PUSH
10925: LD_EXP 21
10929: PPUSH
10930: LD_INT 1
10932: PPUSH
10933: CALL_OW 289
10937: NOT
10938: AND
10939: PUSH
10940: LD_EXP 21
10944: PPUSH
10945: LD_INT 2
10947: PPUSH
10948: CALL_OW 289
10952: NOT
10953: AND
10954: PUSH
10955: LD_EXP 21
10959: PPUSH
10960: LD_INT 3
10962: PPUSH
10963: CALL_OW 289
10967: NOT
10968: AND
10969: IFFALSE 10986
10971: GO 10973
10973: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10974: LD_EXP 21
10978: PPUSH
10979: LD_INT 4
10981: PPUSH
10982: CALL_OW 235
10986: END
// every 0 0$1 do var i ;
10987: GO 10989
10989: DISABLE
10990: LD_INT 0
10992: PPUSH
// begin enable ;
10993: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10994: LD_ADDR_VAR 0 1
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PPUSH
11009: CALL_OW 69
11013: PUSH
11014: FOR_IN
11015: IFFALSE 11054
// begin ComMoveToArea ( i , PlayerSpawn ) ;
11017: LD_VAR 0 1
11021: PPUSH
11022: LD_INT 4
11024: PPUSH
11025: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_INT 4
11036: PPUSH
11037: CALL_OW 308
11041: IFFALSE 11052
// RemoveUnit ( i ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: CALL_OW 64
// end ;
11052: GO 11014
11054: POP
11055: POP
// end ;
11056: PPOPN 1
11058: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
11059: LD_EXP 28
11063: PUSH
11064: LD_INT 1
11066: EQUAL
11067: IFFALSE 11442
11069: GO 11071
11071: DISABLE
11072: LD_INT 0
11074: PPUSH
11075: PPUSH
11076: PPUSH
// begin enable ;
11077: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
11078: LD_ADDR_VAR 0 2
11082: PUSH
11083: LD_INT 12
11085: PPUSH
11086: LD_INT 22
11088: PUSH
11089: LD_INT 3
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 21
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 70
11114: ST_TO_ADDR
// for i in enemyVehs do
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: LD_VAR 0 2
11124: PUSH
11125: FOR_IN
11126: IFFALSE 11440
// begin if See ( 1 , i ) then
11128: LD_INT 1
11130: PPUSH
11131: LD_VAR 0 1
11135: PPUSH
11136: CALL_OW 292
11140: IFFALSE 11438
// begin disable ;
11142: DISABLE
// DialogueOn ;
11143: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11156: LD_INT 22
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 26
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_EXP 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: DIFF
11188: PPUSH
11189: CALL_OW 69
11193: PPUSH
11194: LD_STRING DT1-Sol1-1
11196: PPUSH
11197: LD_STRING DT1-FSol1-1
11199: PPUSH
11200: CALL 12982 0 3
// dec = ShowQuery2 ;
11204: LD_ADDR_VAR 0 3
11208: PUSH
11209: CALL 13592 0 0
11213: ST_TO_ADDR
// if dec = 1 then
11214: LD_VAR 0 3
11218: PUSH
11219: LD_INT 1
11221: EQUAL
11222: IFFALSE 11328
// begin Say ( JMM , D2-JMM-1 ) ;
11224: LD_EXP 1
11228: PPUSH
11229: LD_STRING D2-JMM-1
11231: PPUSH
11232: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11236: LD_EXP 22
11240: PPUSH
11241: LD_STRING D2-Pow-1
11243: PPUSH
11244: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
11248: LD_EXP 1
11252: PPUSH
11253: LD_STRING D2a-JMM-1
11255: PPUSH
11256: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
11260: LD_EXP 22
11264: PPUSH
11265: LD_STRING D2a-Pow-1
11267: PPUSH
11268: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
11272: LD_EXP 1
11276: PPUSH
11277: LD_STRING D2a-JMM-2
11279: PPUSH
11280: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
11284: LD_EXP 22
11288: PPUSH
11289: LD_STRING D2a-Pow-2
11291: PPUSH
11292: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
11296: LD_EXP 1
11300: PPUSH
11301: LD_STRING D2a-JMM-3
11303: PPUSH
11304: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
11308: LD_EXP 22
11312: PPUSH
11313: LD_STRING D2a-Pow-3
11315: PPUSH
11316: CALL_OW 94
// secondPass = 2 ;
11320: LD_ADDR_EXP 28
11324: PUSH
11325: LD_INT 2
11327: ST_TO_ADDR
// end ; if dec = 2 then
11328: LD_VAR 0 3
11332: PUSH
11333: LD_INT 2
11335: EQUAL
11336: IFFALSE 11430
// begin Say ( JMM , D2-JMM-1 ) ;
11338: LD_EXP 1
11342: PPUSH
11343: LD_STRING D2-JMM-1
11345: PPUSH
11346: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11350: LD_EXP 22
11354: PPUSH
11355: LD_STRING D2-Pow-1
11357: PPUSH
11358: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11362: LD_EXP 1
11366: PPUSH
11367: LD_STRING D2b-JMM-1
11369: PPUSH
11370: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11374: LD_EXP 22
11378: PPUSH
11379: LD_STRING D2b-Pow-1
11381: PPUSH
11382: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11386: LD_EXP 1
11390: PPUSH
11391: LD_STRING D2c-JMM-1
11393: PPUSH
11394: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11398: LD_EXP 22
11402: PPUSH
11403: LD_STRING D2c-Pow-1
11405: PPUSH
11406: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11410: LD_EXP 1
11414: PPUSH
11415: LD_STRING D2c-JMM-2
11417: PPUSH
11418: CALL_OW 88
// secondPass = 2 ;
11422: LD_ADDR_EXP 28
11426: PUSH
11427: LD_INT 2
11429: ST_TO_ADDR
// end ; DialogueOff ;
11430: CALL_OW 7
// exit ;
11434: POP
11435: POP
11436: GO 11442
// end ; end ;
11438: GO 11125
11440: POP
11441: POP
// end ;
11442: PPOPN 3
11444: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11445: LD_EXP 29
11449: PUSH
11450: LD_INT 1
11452: EQUAL
11453: IFFALSE 11603
11455: GO 11457
11457: DISABLE
11458: LD_INT 0
11460: PPUSH
11461: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11462: LD_ADDR_VAR 0 2
11466: PUSH
11467: LD_INT 11
11469: PPUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 3
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 24
11482: PUSH
11483: LD_INT 250
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 70
11498: ST_TO_ADDR
// enable ;
11499: ENABLE
// for i in vehicles do
11500: LD_ADDR_VAR 0 1
11504: PUSH
11505: LD_VAR 0 2
11509: PUSH
11510: FOR_IN
11511: IFFALSE 11601
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
11513: LD_INT 1
11515: PPUSH
11516: LD_VAR 0 1
11520: PPUSH
11521: CALL_OW 292
11525: PUSH
11526: LD_EXP 29
11530: PUSH
11531: LD_INT 1
11533: EQUAL
11534: AND
11535: IFFALSE 11599
// begin disable ;
11537: DISABLE
// DialogueOn ;
11538: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11542: LD_INT 22
11544: PUSH
11545: LD_INT 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 1
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: PPUSH
11571: LD_STRING DT1-Sol1-1
11573: PPUSH
11574: LD_STRING DT1-FSol1-1
11576: PPUSH
11577: CALL 12982 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11581: LD_EXP 1
11585: PPUSH
11586: LD_STRING DT1-JMM-1
11588: PPUSH
11589: CALL_OW 88
// DialogueOff ;
11593: CALL_OW 7
// break ;
11597: GO 11601
// end ; end ;
11599: GO 11510
11601: POP
11602: POP
// end ;
11603: PPOPN 2
11605: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11606: LD_EXP 29
11610: PUSH
11611: LD_INT 1
11613: EQUAL
11614: PUSH
11615: LD_INT 11
11617: PPUSH
11618: LD_INT 22
11620: PUSH
11621: LD_INT 3
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 24
11630: PUSH
11631: LD_INT 251
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: LD_INT 21
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: PPUSH
11671: CALL_OW 70
11675: PUSH
11676: LD_INT 0
11678: EQUAL
11679: AND
11680: IFFALSE 11764
11682: GO 11684
11684: DISABLE
// begin vehicleTeleported = 2 ;
11685: LD_ADDR_EXP 29
11689: PUSH
11690: LD_INT 2
11692: ST_TO_ADDR
// DialogueOn ;
11693: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11697: LD_EXP 1
11701: PPUSH
11702: LD_STRING DT1a-JMM-1
11704: PPUSH
11705: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11709: LD_INT 22
11711: PUSH
11712: LD_INT 1
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 21
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PPUSH
11733: CALL_OW 69
11737: PPUSH
11738: LD_STRING DT1a-Sol1-1
11740: PPUSH
11741: LD_STRING DT1a-FSol1-1
11743: PPUSH
11744: CALL 12982 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11748: LD_EXP 1
11752: PPUSH
11753: LD_STRING DT1a-JMM-2
11755: PPUSH
11756: CALL_OW 88
// DialogueOff ;
11760: CALL_OW 7
// end ;
11764: END
// every 0 0$1 trigger vehicleTeleported = 3 do var i , vehicles ;
11765: LD_EXP 29
11769: PUSH
11770: LD_INT 3
11772: EQUAL
11773: IFFALSE 11911
11775: GO 11777
11777: DISABLE
11778: LD_INT 0
11780: PPUSH
11781: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11782: LD_ADDR_VAR 0 2
11786: PUSH
11787: LD_INT 11
11789: PPUSH
11790: LD_INT 22
11792: PUSH
11793: LD_INT 3
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 24
11802: PUSH
11803: LD_INT 250
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PPUSH
11814: CALL_OW 70
11818: ST_TO_ADDR
// enable ;
11819: ENABLE
// for i in vehicles do
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_VAR 0 2
11829: PUSH
11830: FOR_IN
11831: IFFALSE 11909
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11833: LD_INT 1
11835: PPUSH
11836: LD_VAR 0 1
11840: PPUSH
11841: CALL_OW 292
11845: PUSH
11846: LD_EXP 29
11850: PUSH
11851: LD_INT 3
11853: EQUAL
11854: AND
11855: IFFALSE 11907
// begin disable ;
11857: DISABLE
// DialogueOn ;
11858: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11862: LD_INT 22
11864: PUSH
11865: LD_INT 1
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 21
11874: PUSH
11875: LD_INT 1
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PPUSH
11886: CALL_OW 69
11890: PPUSH
11891: LD_STRING DT2-Sol1-1
11893: PPUSH
11894: LD_STRING DT2-FSol1-1
11896: PPUSH
11897: CALL 12982 0 3
// DialogueOff ;
11901: CALL_OW 7
// break ;
11905: GO 11909
// end ; end ;
11907: GO 11830
11909: POP
11910: POP
// end ;
11911: PPOPN 2
11913: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11914: LD_EXP 29
11918: PUSH
11919: LD_INT 3
11921: EQUAL
11922: PUSH
11923: LD_INT 11
11925: PPUSH
11926: LD_INT 22
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 24
11938: PUSH
11939: LD_INT 251
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 2
11948: PUSH
11949: LD_INT 21
11951: PUSH
11952: LD_INT 2
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 21
11961: PUSH
11962: LD_INT 1
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 70
11983: PUSH
11984: LD_INT 0
11986: EQUAL
11987: AND
11988: IFFALSE 12072
11990: GO 11992
11992: DISABLE
// begin vehicleTeleported = 4 ;
11993: LD_ADDR_EXP 29
11997: PUSH
11998: LD_INT 4
12000: ST_TO_ADDR
// DialogueOn ;
12001: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
12005: LD_EXP 1
12009: PPUSH
12010: LD_STRING DT2a-JMM-1
12012: PPUSH
12013: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
12017: LD_INT 22
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 21
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PPUSH
12041: CALL_OW 69
12045: PPUSH
12046: LD_STRING DT2a-Sol1-1
12048: PPUSH
12049: LD_STRING DT2a-FSol1-1
12051: PPUSH
12052: CALL 12982 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12056: LD_EXP 3
12060: PPUSH
12061: LD_STRING DT2a-Don-1
12063: PPUSH
12064: CALL_OW 88
// DialogueOff ;
12068: CALL_OW 7
// end ;
12072: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12073: LD_INT 1
12075: PPUSH
12076: LD_INT 45
12078: PPUSH
12079: LD_INT 74
12081: PPUSH
12082: CALL_OW 293
12086: IFFALSE 12181
12088: GO 12090
12090: DISABLE
// begin DialogueOn ;
12091: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12095: LD_INT 36
12097: PPUSH
12098: LD_INT 55
12100: PPUSH
12101: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12105: LD_INT 22
12107: PUSH
12108: LD_INT 1
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 21
12117: PUSH
12118: LD_INT 1
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PPUSH
12129: CALL_OW 69
12133: PPUSH
12134: LD_STRING D5-Sol1-1
12136: PPUSH
12137: LD_STRING D5-FSol1-
12139: PPUSH
12140: CALL 12982 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12144: LD_EXP 30
12148: PUSH
12149: LD_INT 1
12151: EQUAL
12152: PUSH
12153: LD_EXP 3
12157: PPUSH
12158: CALL_OW 300
12162: AND
12163: IFFALSE 12177
// Say ( Donaldson , D5-Don-1 ) ;
12165: LD_EXP 3
12169: PPUSH
12170: LD_STRING D5-Don-1
12172: PPUSH
12173: CALL_OW 88
// DialogueOff ;
12177: CALL_OW 7
// end ;
12181: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
12182: LD_INT 1
12184: PPUSH
12185: LD_INT 10
12187: PPUSH
12188: CALL_OW 292
12192: IFFALSE 12279
12194: GO 12196
12196: DISABLE
// begin DialogueOn ;
12197: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
12201: LD_INT 10
12203: PPUSH
12204: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12208: LD_INT 22
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 1
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: PUSH
12237: LD_EXP 1
12241: PUSH
12242: EMPTY
12243: LIST
12244: DIFF
12245: PPUSH
12246: LD_STRING DT3-Sol1-1
12248: PPUSH
12249: LD_STRING DT3-FSol1-1
12251: PPUSH
12252: CALL 12982 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12256: LD_EXP 1
12260: PPUSH
12261: LD_STRING DT3-JMM-1
12263: PPUSH
12264: CALL_OW 88
// DialogueOff ;
12268: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12272: LD_STRING M2
12274: PPUSH
12275: CALL_OW 337
// end ;
12279: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 do var i , j , vehs ;
12280: LD_INT 3
12282: PPUSH
12283: CALL_OW 303
12287: PUSH
12288: LD_INT 22
12290: PPUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 70
12305: PUSH
12306: LD_INT 0
12308: GREATER
12309: OR
12310: IFFALSE 12670
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
12319: PPUSH
// begin ruAI = 0 ;
12320: LD_ADDR_EXP 41
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_INT 10
12335: PPUSH
12336: LD_INT 22
12338: PUSH
12339: LD_INT 3
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 21
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 58
12358: PUSH
12359: EMPTY
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 70
12371: ST_TO_ADDR
// DialogueOn ;
12372: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12376: LD_EXP 1
12380: PPUSH
12381: LD_STRING D6-JMM-1
12383: PPUSH
12384: CALL_OW 88
// DialogueOff ;
12388: CALL_OW 7
// for i := 1 to RuScientists do
12392: LD_ADDR_VAR 0 1
12396: PUSH
12397: DOUBLE
12398: LD_INT 1
12400: DEC
12401: ST_TO_ADDR
12402: LD_EXP 34
12406: PUSH
12407: FOR_TO
12408: IFFALSE 12668
// begin ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) ;
12410: LD_EXP 34
12414: PUSH
12415: LD_VAR 0 1
12419: ARRAY
12420: PPUSH
12421: LD_INT 3
12423: PUSH
12424: LD_INT 60
12426: PUSH
12427: EMPTY
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 72
12438: PPUSH
12439: LD_VAR 0 3
12443: PUSH
12444: LD_VAR 0 1
12448: ARRAY
12449: PPUSH
12450: CALL_OW 120
// if IsOk ( rutp ) then
12454: LD_INT 137
12456: PPUSH
12457: CALL_OW 302
12461: IFFALSE 12614
// begin if i mod 2 then
12463: LD_VAR 0 1
12467: PUSH
12468: LD_INT 2
12470: MOD
12471: IFFALSE 12560
// begin AddComEnterUnit ( [ RuScientists [ i ] , vehs [ i ] ] , rutp ) ;
12473: LD_EXP 34
12477: PUSH
12478: LD_VAR 0 1
12482: ARRAY
12483: PUSH
12484: LD_VAR 0 3
12488: PUSH
12489: LD_VAR 0 1
12493: ARRAY
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PPUSH
12499: LD_INT 137
12501: PPUSH
12502: CALL_OW 180
// AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12506: LD_EXP 34
12510: PUSH
12511: LD_VAR 0 1
12515: ARRAY
12516: PUSH
12517: LD_VAR 0 3
12521: PUSH
12522: LD_VAR 0 1
12526: ARRAY
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: LD_INT 13
12534: PUSH
12535: LD_INT 14
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 1
12544: PPUSH
12545: LD_INT 2
12547: PPUSH
12548: CALL_OW 12
12552: ARRAY
12553: PPUSH
12554: CALL_OW 173
// end else
12558: GO 12612
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12560: LD_EXP 34
12564: PUSH
12565: LD_VAR 0 1
12569: ARRAY
12570: PUSH
12571: LD_VAR 0 3
12575: PUSH
12576: LD_VAR 0 1
12580: ARRAY
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: LD_INT 13
12588: PUSH
12589: LD_INT 14
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 1
12598: PPUSH
12599: LD_INT 2
12601: PPUSH
12602: CALL_OW 12
12606: ARRAY
12607: PPUSH
12608: CALL_OW 173
// end ; end else
12612: GO 12666
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12614: LD_EXP 34
12618: PUSH
12619: LD_VAR 0 1
12623: ARRAY
12624: PUSH
12625: LD_VAR 0 3
12629: PUSH
12630: LD_VAR 0 1
12634: ARRAY
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: LD_INT 13
12642: PUSH
12643: LD_INT 14
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 1
12652: PPUSH
12653: LD_INT 2
12655: PPUSH
12656: CALL_OW 12
12660: ARRAY
12661: PPUSH
12662: CALL_OW 173
// end ; end ;
12666: GO 12407
12668: POP
12669: POP
// end ;
12670: PPOPN 3
12672: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
12673: LD_EXP 41
12677: PUSH
12678: LD_INT 0
12680: EQUAL
12681: IFFALSE 12871
12683: GO 12685
12685: DISABLE
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
// begin enable ;
12690: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12691: LD_ADDR_VAR 0 1
12695: PUSH
12696: LD_INT 13
12698: PPUSH
12699: LD_INT 22
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: EMPTY
12710: LIST
12711: PPUSH
12712: CALL_OW 70
12716: PUSH
12717: FOR_IN
12718: IFFALSE 12779
// begin for j in RuScientists do
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_EXP 34
12729: PUSH
12730: FOR_IN
12731: IFFALSE 12766
// if j = i then
12733: LD_VAR 0 2
12737: PUSH
12738: LD_VAR 0 1
12742: EQUAL
12743: IFFALSE 12764
// RuScientists = RuScientists diff [ i ] ;
12745: LD_ADDR_EXP 34
12749: PUSH
12750: LD_EXP 34
12754: PUSH
12755: LD_VAR 0 1
12759: PUSH
12760: EMPTY
12761: LIST
12762: DIFF
12763: ST_TO_ADDR
12764: GO 12730
12766: POP
12767: POP
// RemoveUnit ( i ) ;
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 64
// end ;
12777: GO 12717
12779: POP
12780: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12781: LD_ADDR_VAR 0 1
12785: PUSH
12786: LD_INT 14
12788: PPUSH
12789: LD_INT 22
12791: PUSH
12792: LD_INT 3
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: PPUSH
12802: CALL_OW 70
12806: PUSH
12807: FOR_IN
12808: IFFALSE 12869
// begin for j in RuScientists do
12810: LD_ADDR_VAR 0 2
12814: PUSH
12815: LD_EXP 34
12819: PUSH
12820: FOR_IN
12821: IFFALSE 12856
// if j = i then
12823: LD_VAR 0 2
12827: PUSH
12828: LD_VAR 0 1
12832: EQUAL
12833: IFFALSE 12854
// RuScientists = RuScientists diff [ i ] ;
12835: LD_ADDR_EXP 34
12839: PUSH
12840: LD_EXP 34
12844: PUSH
12845: LD_VAR 0 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: DIFF
12853: ST_TO_ADDR
12854: GO 12820
12856: POP
12857: POP
// RemoveUnit ( i ) ;
12858: LD_VAR 0 1
12862: PPUSH
12863: CALL_OW 64
// end ;
12867: GO 12807
12869: POP
12870: POP
// end ; end_of_file
12871: PPOPN 2
12873: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12874: LD_INT 0
12876: PPUSH
12877: PPUSH
// if exist_mode then
12878: LD_VAR 0 2
12882: IFFALSE 12901
// unit := CreateCharacter ( ident ) else
12884: LD_ADDR_VAR 0 4
12888: PUSH
12889: LD_VAR 0 1
12893: PPUSH
12894: CALL_OW 34
12898: ST_TO_ADDR
12899: GO 12916
// unit := NewCharacter ( ident ) ;
12901: LD_ADDR_VAR 0 4
12905: PUSH
12906: LD_VAR 0 1
12910: PPUSH
12911: CALL_OW 25
12915: ST_TO_ADDR
// result := unit ;
12916: LD_ADDR_VAR 0 3
12920: PUSH
12921: LD_VAR 0 4
12925: ST_TO_ADDR
// end ;
12926: LD_VAR 0 3
12930: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12931: LD_INT 0
12933: PPUSH
12934: PPUSH
// for i in charactersList do
12935: LD_ADDR_VAR 0 4
12939: PUSH
12940: LD_VAR 0 1
12944: PUSH
12945: FOR_IN
12946: IFFALSE 12975
// begin if IsOk ( i ) then
12948: LD_VAR 0 4
12952: PPUSH
12953: CALL_OW 302
12957: IFFALSE 12973
// SaveCharacters ( i , ident ) ;
12959: LD_VAR 0 4
12963: PPUSH
12964: LD_VAR 0 2
12968: PPUSH
12969: CALL_OW 38
// end ;
12973: GO 12945
12975: POP
12976: POP
// end ;
12977: LD_VAR 0 3
12981: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12982: LD_INT 0
12984: PPUSH
12985: PPUSH
12986: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12987: LD_ADDR_VAR 0 1
12991: PUSH
12992: LD_VAR 0 1
12996: PUSH
12997: LD_EXP 1
13001: PUSH
13002: LD_EXP 7
13006: PUSH
13007: LD_EXP 3
13011: PUSH
13012: LD_EXP 4
13016: PUSH
13017: LD_EXP 5
13021: PUSH
13022: LD_EXP 2
13026: PUSH
13027: LD_EXP 12
13031: PUSH
13032: LD_EXP 13
13036: PUSH
13037: LD_EXP 9
13041: PUSH
13042: LD_EXP 11
13046: PUSH
13047: LD_EXP 6
13051: PUSH
13052: LD_EXP 8
13056: PUSH
13057: LD_EXP 10
13061: PUSH
13062: LD_EXP 22
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: DIFF
13083: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13084: LD_ADDR_VAR 0 6
13088: PUSH
13089: LD_INT 1
13091: PPUSH
13092: LD_VAR 0 1
13096: PPUSH
13097: CALL_OW 12
13101: ST_TO_ADDR
// for i = 1 to characters do
13102: LD_ADDR_VAR 0 5
13106: PUSH
13107: DOUBLE
13108: LD_INT 1
13110: DEC
13111: ST_TO_ADDR
13112: LD_VAR 0 1
13116: PUSH
13117: FOR_TO
13118: IFFALSE 13228
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13120: LD_VAR 0 5
13124: PUSH
13125: LD_VAR 0 6
13129: EQUAL
13130: PUSH
13131: LD_VAR 0 1
13135: PUSH
13136: LD_VAR 0 5
13140: ARRAY
13141: PPUSH
13142: CALL_OW 258
13146: PUSH
13147: LD_INT 1
13149: EQUAL
13150: AND
13151: IFFALSE 13173
// Say ( characters [ i ] , dialogMID ) ;
13153: LD_VAR 0 1
13157: PUSH
13158: LD_VAR 0 5
13162: ARRAY
13163: PPUSH
13164: LD_VAR 0 2
13168: PPUSH
13169: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13173: LD_VAR 0 5
13177: PUSH
13178: LD_VAR 0 6
13182: EQUAL
13183: PUSH
13184: LD_VAR 0 1
13188: PUSH
13189: LD_VAR 0 5
13193: ARRAY
13194: PPUSH
13195: CALL_OW 258
13199: PUSH
13200: LD_INT 2
13202: EQUAL
13203: AND
13204: IFFALSE 13226
// Say ( characters [ i ] , dialogFID ) ;
13206: LD_VAR 0 1
13210: PUSH
13211: LD_VAR 0 5
13215: ARRAY
13216: PPUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: CALL_OW 88
// end ;
13226: GO 13117
13228: POP
13229: POP
// end ;
13230: LD_VAR 0 4
13234: RET
// export function PrepareDifficulty ; var tmp ; begin
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
// if Difficulty = 1 then
13239: LD_OWVAR 67
13243: PUSH
13244: LD_INT 1
13246: EQUAL
13247: IFFALSE 13265
// begin RuSolMinLevel = 8 ;
13249: LD_ADDR_EXP 36
13253: PUSH
13254: LD_INT 8
13256: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13257: LD_ADDR_EXP 37
13261: PUSH
13262: LD_INT 10
13264: ST_TO_ADDR
// end ; if Difficulty = 2 then
13265: LD_OWVAR 67
13269: PUSH
13270: LD_INT 2
13272: EQUAL
13273: IFFALSE 13367
// begin RuSolMinLevel = 9 ;
13275: LD_ADDR_EXP 36
13279: PUSH
13280: LD_INT 9
13282: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13283: LD_ADDR_EXP 37
13287: PUSH
13288: LD_INT 10
13290: ST_TO_ADDR
// uc_nation = 3 ;
13291: LD_ADDR_OWVAR 21
13295: PUSH
13296: LD_INT 3
13298: ST_TO_ADDR
// uc_side = 3 ;
13299: LD_ADDR_OWVAR 20
13303: PUSH
13304: LD_INT 3
13306: ST_TO_ADDR
// bc_level = 10 ;
13307: LD_ADDR_OWVAR 43
13311: PUSH
13312: LD_INT 10
13314: ST_TO_ADDR
// bc_type = b_turret ;
13315: LD_ADDR_OWVAR 42
13319: PUSH
13320: LD_INT 33
13322: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13323: LD_ADDR_VAR 0 2
13327: PUSH
13328: LD_INT 86
13330: PPUSH
13331: LD_INT 34
13333: PPUSH
13334: LD_INT 2
13336: PPUSH
13337: CALL_OW 47
13341: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13342: LD_VAR 0 2
13346: PPUSH
13347: LD_INT 49
13349: PPUSH
13350: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13354: LD_INT 64
13356: PPUSH
13357: LD_INT 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// end ; if Difficulty = 3 then
13367: LD_OWVAR 67
13371: PUSH
13372: LD_INT 3
13374: EQUAL
13375: IFFALSE 13513
// begin RuSolMinLevel = 10 ;
13377: LD_ADDR_EXP 36
13381: PUSH
13382: LD_INT 10
13384: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13385: LD_ADDR_EXP 37
13389: PUSH
13390: LD_INT 10
13392: ST_TO_ADDR
// uc_nation = 3 ;
13393: LD_ADDR_OWVAR 21
13397: PUSH
13398: LD_INT 3
13400: ST_TO_ADDR
// uc_side = 3 ;
13401: LD_ADDR_OWVAR 20
13405: PUSH
13406: LD_INT 3
13408: ST_TO_ADDR
// bc_level = 10 ;
13409: LD_ADDR_OWVAR 43
13413: PUSH
13414: LD_INT 10
13416: ST_TO_ADDR
// bc_type = b_turret ;
13417: LD_ADDR_OWVAR 42
13421: PUSH
13422: LD_INT 33
13424: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13425: LD_ADDR_VAR 0 2
13429: PUSH
13430: LD_INT 86
13432: PPUSH
13433: LD_INT 34
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 47
13443: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13444: LD_VAR 0 2
13448: PPUSH
13449: LD_INT 49
13451: PPUSH
13452: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13456: LD_ADDR_VAR 0 2
13460: PUSH
13461: LD_INT 93
13463: PPUSH
13464: LD_INT 31
13466: PPUSH
13467: LD_INT 2
13469: PPUSH
13470: CALL_OW 47
13474: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13475: LD_VAR 0 2
13479: PPUSH
13480: LD_INT 49
13482: PPUSH
13483: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13487: LD_INT 64
13489: PPUSH
13490: LD_INT 3
13492: PPUSH
13493: LD_INT 1
13495: PPUSH
13496: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13500: LD_INT 65
13502: PPUSH
13503: LD_INT 3
13505: PPUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 322
// end ; end ;
13513: LD_VAR 0 1
13517: RET
// export function ShowQuery1 ; begin
13518: LD_INT 0
13520: PPUSH
// case query ( Q1 ) of 1 :
13521: LD_STRING Q1
13523: PPUSH
13524: CALL_OW 97
13528: PUSH
13529: LD_INT 1
13531: DOUBLE
13532: EQUAL
13533: IFTRUE 13537
13535: GO 13548
13537: POP
// result = 1 ; 2 :
13538: LD_ADDR_VAR 0 1
13542: PUSH
13543: LD_INT 1
13545: ST_TO_ADDR
13546: GO 13587
13548: LD_INT 2
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13567
13556: POP
// result = 2 ; 3 :
13557: LD_ADDR_VAR 0 1
13561: PUSH
13562: LD_INT 2
13564: ST_TO_ADDR
13565: GO 13587
13567: LD_INT 3
13569: DOUBLE
13570: EQUAL
13571: IFTRUE 13575
13573: GO 13586
13575: POP
// result = 3 ; end ;
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_INT 3
13583: ST_TO_ADDR
13584: GO 13587
13586: POP
// end ;
13587: LD_VAR 0 1
13591: RET
// export function ShowQuery2 ; begin
13592: LD_INT 0
13594: PPUSH
// case query ( Q1a ) of 1 :
13595: LD_STRING Q1a
13597: PPUSH
13598: CALL_OW 97
13602: PUSH
13603: LD_INT 1
13605: DOUBLE
13606: EQUAL
13607: IFTRUE 13611
13609: GO 13622
13611: POP
// result = 1 ; 2 :
13612: LD_ADDR_VAR 0 1
13616: PUSH
13617: LD_INT 1
13619: ST_TO_ADDR
13620: GO 13661
13622: LD_INT 2
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13641
13630: POP
// result = 2 ; 3 :
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_INT 2
13638: ST_TO_ADDR
13639: GO 13661
13641: LD_INT 3
13643: DOUBLE
13644: EQUAL
13645: IFTRUE 13649
13647: GO 13660
13649: POP
// result = 3 ; end ;
13650: LD_ADDR_VAR 0 1
13654: PUSH
13655: LD_INT 3
13657: ST_TO_ADDR
13658: GO 13661
13660: POP
// end ;
13661: LD_VAR 0 1
13665: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13666: LD_INT 0
13668: PPUSH
13669: PPUSH
13670: PPUSH
13671: PPUSH
13672: PPUSH
// for i = 1 to count do
13673: LD_ADDR_VAR 0 8
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 6
13687: PUSH
13688: FOR_TO
13689: IFFALSE 13770
// begin uc_side = side ;
13691: LD_ADDR_OWVAR 20
13695: PUSH
13696: LD_VAR 0 1
13700: ST_TO_ADDR
// uc_nation = nation ;
13701: LD_ADDR_OWVAR 21
13705: PUSH
13706: LD_VAR 0 2
13710: ST_TO_ADDR
// hc_gallery =  ;
13711: LD_ADDR_OWVAR 33
13715: PUSH
13716: LD_STRING 
13718: ST_TO_ADDR
// hc_name =  ;
13719: LD_ADDR_OWVAR 26
13723: PUSH
13724: LD_STRING 
13726: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13727: LD_INT 0
13729: PPUSH
13730: LD_VAR 0 5
13734: PPUSH
13735: LD_VAR 0 4
13739: PPUSH
13740: CALL_OW 380
// un = CreateHuman ;
13744: LD_ADDR_VAR 0 10
13748: PUSH
13749: CALL_OW 44
13753: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13754: LD_VAR 0 10
13758: PPUSH
13759: LD_VAR 0 3
13763: PPUSH
13764: CALL_OW 52
// end ;
13768: GO 13688
13770: POP
13771: POP
// end ;
13772: LD_VAR 0 7
13776: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13777: LD_INT 0
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
// for i = 1 to 72 do
13783: LD_ADDR_VAR 0 5
13787: PUSH
13788: DOUBLE
13789: LD_INT 1
13791: DEC
13792: ST_TO_ADDR
13793: LD_INT 72
13795: PUSH
13796: FOR_TO
13797: IFFALSE 13855
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_VAR 0 1
13808: PPUSH
13809: CALL_OW 321
13813: PUSH
13814: LD_INT 1
13816: EQUAL
13817: PUSH
13818: LD_VAR 0 5
13822: PPUSH
13823: LD_VAR 0 3
13827: PPUSH
13828: CALL_OW 482
13832: PUSH
13833: LD_INT 1
13835: EQUAL
13836: AND
13837: IFFALSE 13853
// AddComResearch ( lab , i ) ;
13839: LD_VAR 0 2
13843: PPUSH
13844: LD_VAR 0 5
13848: PPUSH
13849: CALL_OW 184
13853: GO 13796
13855: POP
13856: POP
// end ;
13857: LD_VAR 0 4
13861: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13862: LD_INT 0
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13870: LD_ADDR_VAR 0 8
13874: PUSH
13875: LD_VAR 0 2
13879: PPUSH
13880: CALL_OW 313
13884: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13885: LD_ADDR_VAR 0 9
13889: PUSH
13890: LD_VAR 0 3
13894: PPUSH
13895: LD_INT 22
13897: PUSH
13898: LD_VAR 0 1
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 25
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 24
13919: PUSH
13920: LD_INT 750
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 3
13929: PUSH
13930: LD_INT 54
13932: PUSH
13933: EMPTY
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 70
13950: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13951: LD_ADDR_VAR 0 6
13955: PUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_INT 22
13963: PUSH
13964: LD_VAR 0 1
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 21
13975: PUSH
13976: LD_INT 3
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 3
13985: PUSH
13986: LD_INT 24
13988: PUSH
13989: LD_INT 1000
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: PPUSH
14008: CALL_OW 70
14012: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14013: LD_VAR 0 6
14017: NOT
14018: PUSH
14019: LD_INT 22
14021: PUSH
14022: LD_VAR 0 1
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 25
14033: PUSH
14034: LD_INT 2
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 24
14043: PUSH
14044: LD_INT 250
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: PPUSH
14056: CALL_OW 69
14060: NOT
14061: AND
14062: IFFALSE 14066
// exit ;
14064: GO 14248
// if buildings_list > 0 and engineerOkInside then
14066: LD_VAR 0 6
14070: PUSH
14071: LD_INT 0
14073: GREATER
14074: PUSH
14075: LD_VAR 0 8
14079: AND
14080: IFFALSE 14091
// ComExitBuilding ( engineerOkInside ) ;
14082: LD_VAR 0 8
14086: PPUSH
14087: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14091: LD_VAR 0 6
14095: PUSH
14096: LD_INT 0
14098: GREATER
14099: PUSH
14100: LD_VAR 0 9
14104: PUSH
14105: LD_INT 0
14107: GREATER
14108: AND
14109: IFFALSE 14129
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14111: LD_VAR 0 9
14115: PPUSH
14116: LD_VAR 0 6
14120: PUSH
14121: LD_INT 1
14123: ARRAY
14124: PPUSH
14125: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14129: LD_VAR 0 6
14133: PUSH
14134: LD_INT 0
14136: EQUAL
14137: PUSH
14138: LD_VAR 0 4
14142: PUSH
14143: LD_INT 0
14145: EQUAL
14146: AND
14147: PUSH
14148: LD_VAR 0 9
14152: PUSH
14153: LD_INT 0
14155: GREATER
14156: AND
14157: IFFALSE 14173
// ComEnterUnit ( engineerOkOutside , building ) ;
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 2
14168: PPUSH
14169: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14173: LD_VAR 0 9
14177: PUSH
14178: LD_INT 0
14180: GREATER
14181: PUSH
14182: LD_VAR 0 6
14186: PUSH
14187: LD_INT 0
14189: EQUAL
14190: AND
14191: PUSH
14192: LD_VAR 0 4
14196: PUSH
14197: LD_INT 0
14199: GREATER
14200: AND
14201: IFFALSE 14248
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14203: LD_VAR 0 9
14207: PPUSH
14208: LD_VAR 0 4
14212: PUSH
14213: LD_INT 1
14215: ARRAY
14216: PPUSH
14217: LD_VAR 0 4
14221: PUSH
14222: LD_INT 2
14224: ARRAY
14225: PPUSH
14226: LD_VAR 0 4
14230: PUSH
14231: LD_INT 3
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 4
14239: PUSH
14240: LD_INT 4
14242: ARRAY
14243: PPUSH
14244: CALL_OW 145
// end ;
14248: LD_VAR 0 5
14252: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14253: LD_INT 0
14255: PPUSH
14256: PPUSH
14257: PPUSH
14258: PPUSH
14259: PPUSH
14260: PPUSH
14261: PPUSH
14262: PPUSH
14263: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14264: LD_ADDR_VAR 0 6
14268: PUSH
14269: LD_INT 22
14271: PUSH
14272: LD_VAR 0 1
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: LD_INT 25
14283: PUSH
14284: LD_INT 4
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 24
14293: PUSH
14294: LD_INT 251
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 69
14310: PUSH
14311: LD_EXP 34
14315: PUSH
14316: EMPTY
14317: LIST
14318: DIFF
14319: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14320: LD_ADDR_VAR 0 7
14324: PUSH
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_INT 22
14332: PUSH
14333: LD_VAR 0 1
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 25
14344: PUSH
14345: LD_INT 4
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 50
14354: PUSH
14355: EMPTY
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 70
14367: PUSH
14368: LD_EXP 34
14372: PUSH
14373: EMPTY
14374: LIST
14375: DIFF
14376: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14377: LD_ADDR_VAR 0 10
14381: PUSH
14382: LD_VAR 0 3
14386: PPUSH
14387: LD_INT 22
14389: PUSH
14390: LD_VAR 0 1
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 3
14411: PUSH
14412: LD_INT 24
14414: PUSH
14415: LD_INT 750
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 70
14435: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14436: LD_ADDR_VAR 0 11
14440: PUSH
14441: LD_VAR 0 2
14445: PPUSH
14446: LD_INT 22
14448: PUSH
14449: LD_VAR 0 1
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 21
14460: PUSH
14461: LD_INT 1
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 3
14470: PUSH
14471: LD_INT 24
14473: PUSH
14474: LD_INT 1000
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 70
14494: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14495: LD_VAR 0 10
14499: PUSH
14500: LD_INT 0
14502: GREATER
14503: PUSH
14504: LD_VAR 0 6
14508: PUSH
14509: LD_INT 0
14511: GREATER
14512: AND
14513: IFFALSE 14529
// ComMoveToArea ( damageUnits , healArea ) ;
14515: LD_VAR 0 10
14519: PPUSH
14520: LD_VAR 0 2
14524: PPUSH
14525: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
14529: LD_VAR 0 11
14533: PUSH
14534: LD_INT 0
14536: GREATER
14537: PUSH
14538: LD_VAR 0 7
14542: PUSH
14543: LD_INT 0
14545: GREATER
14546: AND
14547: IFFALSE 14567
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
14549: LD_VAR 0 7
14553: PPUSH
14554: LD_VAR 0 11
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PPUSH
14563: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14567: LD_VAR 0 10
14571: PUSH
14572: LD_INT 0
14574: EQUAL
14575: PUSH
14576: LD_VAR 0 11
14580: PUSH
14581: LD_INT 0
14583: EQUAL
14584: AND
14585: PUSH
14586: LD_VAR 0 7
14590: PUSH
14591: LD_INT 0
14593: GREATER
14594: AND
14595: IFFALSE 14700
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14597: LD_ADDR_VAR 0 12
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_VAR 0 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 21
14616: PUSH
14617: LD_INT 3
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 30
14626: PUSH
14627: LD_INT 8
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: PPUSH
14639: CALL_OW 69
14643: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14644: LD_ADDR_VAR 0 13
14648: PUSH
14649: LD_INT 1
14651: PPUSH
14652: LD_VAR 0 12
14656: PPUSH
14657: CALL_OW 12
14661: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14662: LD_VAR 0 7
14666: PPUSH
14667: LD_INT 3
14669: PUSH
14670: LD_INT 60
14672: PUSH
14673: EMPTY
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PPUSH
14680: CALL_OW 72
14684: PPUSH
14685: LD_VAR 0 12
14689: PUSH
14690: LD_VAR 0 13
14694: ARRAY
14695: PPUSH
14696: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14700: LD_VAR 0 3
14704: PPUSH
14705: LD_INT 22
14707: PUSH
14708: LD_VAR 0 1
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 25
14719: PUSH
14720: LD_INT 3
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 24
14729: PUSH
14730: LD_INT 751
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: LIST
14741: PPUSH
14742: CALL_OW 70
14746: PUSH
14747: LD_INT 0
14749: GREATER
14750: PUSH
14751: LD_INT 21
14753: PPUSH
14754: CALL_OW 302
14758: AND
14759: PUSH
14760: LD_INT 21
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: AND
14772: IFFALSE 14828
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14774: LD_VAR 0 3
14778: PPUSH
14779: LD_INT 22
14781: PUSH
14782: LD_VAR 0 1
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 25
14793: PUSH
14794: LD_INT 3
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 24
14803: PUSH
14804: LD_INT 751
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 70
14820: PPUSH
14821: LD_INT 21
14823: PPUSH
14824: CALL_OW 120
// end ;
14828: LD_VAR 0 5
14832: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14833: LD_INT 0
14835: PPUSH
14836: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14837: LD_INT 22
14839: PUSH
14840: LD_VAR 0 1
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: PUSH
14868: LD_INT 18
14870: PPUSH
14871: LD_INT 22
14873: PUSH
14874: LD_VAR 0 1
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 21
14885: PUSH
14886: LD_INT 2
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 70
14901: PUSH
14902: LD_VAR 0 3
14906: LESSEQUAL
14907: DIFF
14908: IFFALSE 14975
// for i = 1 to vehCount do
14910: LD_ADDR_VAR 0 9
14914: PUSH
14915: DOUBLE
14916: LD_INT 1
14918: DEC
14919: ST_TO_ADDR
14920: LD_VAR 0 3
14924: PUSH
14925: FOR_TO
14926: IFFALSE 14973
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14928: LD_VAR 0 2
14932: PPUSH
14933: LD_VAR 0 7
14937: PPUSH
14938: LD_VAR 0 5
14942: PPUSH
14943: LD_VAR 0 6
14947: PPUSH
14948: LD_VAR 0 4
14952: PUSH
14953: LD_INT 1
14955: PPUSH
14956: LD_VAR 0 4
14960: PPUSH
14961: CALL_OW 12
14965: ARRAY
14966: PPUSH
14967: CALL_OW 185
14971: GO 14925
14973: POP
14974: POP
// end ;
14975: LD_VAR 0 8
14979: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14980: LD_INT 0
14982: PPUSH
14983: PPUSH
14984: PPUSH
14985: PPUSH
14986: PPUSH
14987: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14988: LD_EXP 39
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 4
14998: PUSH
14999: LD_INT 4
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: PUSH
15007: LD_OWVAR 67
15011: ARRAY
15012: GREATEREQUAL
15013: PUSH
15014: LD_EXP 40
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: LD_INT 2
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: PUSH
15033: LD_OWVAR 67
15037: ARRAY
15038: GREATEREQUAL
15039: AND
15040: IFFALSE 15273
// begin repeat wait ( 0 0$3 ) ;
15042: LD_INT 105
15044: PPUSH
15045: CALL_OW 67
// for j in russianTanks do
15049: LD_ADDR_VAR 0 4
15053: PUSH
15054: LD_EXP 39
15058: PUSH
15059: FOR_IN
15060: IFFALSE 15261
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15062: LD_ADDR_VAR 0 6
15066: PUSH
15067: LD_INT 81
15069: PUSH
15070: LD_VAR 0 1
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 101
15081: PUSH
15082: LD_INT 1
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 69
15097: PPUSH
15098: LD_VAR 0 4
15102: PPUSH
15103: CALL_OW 74
15107: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15108: LD_ADDR_VAR 0 7
15112: PUSH
15113: LD_INT 81
15115: PUSH
15116: LD_VAR 0 1
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 101
15127: PUSH
15128: LD_INT 1
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: LD_INT 59
15140: PUSH
15141: EMPTY
15142: LIST
15143: PUSH
15144: LD_INT 21
15146: PUSH
15147: LD_INT 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 21
15156: PUSH
15157: LD_INT 2
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: PPUSH
15178: CALL_OW 69
15182: PPUSH
15183: LD_VAR 0 4
15187: PPUSH
15188: CALL_OW 74
15192: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
15193: LD_VAR 0 4
15197: PPUSH
15198: LD_VAR 0 6
15202: PPUSH
15203: CALL_OW 296
15207: PUSH
15208: LD_INT 8
15210: PLUS
15211: PUSH
15212: LD_VAR 0 4
15216: PPUSH
15217: LD_VAR 0 7
15221: PPUSH
15222: CALL_OW 296
15226: LESS
15227: IFFALSE 15245
// ComAttackUnit ( j , target1 ) else
15229: LD_VAR 0 4
15233: PPUSH
15234: LD_VAR 0 6
15238: PPUSH
15239: CALL_OW 115
15243: GO 15259
// ComAttackUnit ( j , target2 ) ;
15245: LD_VAR 0 4
15249: PPUSH
15250: LD_VAR 0 7
15254: PPUSH
15255: CALL_OW 115
// end ;
15259: GO 15059
15261: POP
15262: POP
// until russianTanks = 0 ;
15263: LD_EXP 39
15267: PUSH
15268: LD_INT 0
15270: EQUAL
15271: IFFALSE 15042
// end ; end ;
15273: LD_VAR 0 2
15277: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
15278: LD_INT 0
15280: PPUSH
15281: PPUSH
15282: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15283: LD_EXP 39
15287: PUSH
15288: LD_INT 1
15290: GREATEREQUAL
15291: PUSH
15292: LD_EXP 40
15296: PUSH
15297: LD_INT 1
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: LIST
15310: PUSH
15311: LD_OWVAR 67
15315: ARRAY
15316: GREATEREQUAL
15317: AND
15318: IFFALSE 15457
// repeat wait ( 0 0$3 ) ;
15320: LD_INT 105
15322: PPUSH
15323: CALL_OW 67
// if russianTimeLapsers > 0 then
15327: LD_EXP 40
15331: PUSH
15332: LD_INT 0
15334: GREATER
15335: IFFALSE 15447
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
15337: LD_ADDR_VAR 0 3
15341: PUSH
15342: LD_EXP 40
15346: PPUSH
15347: LD_INT 3
15349: PUSH
15350: LD_INT 60
15352: PUSH
15353: EMPTY
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PPUSH
15360: CALL_OW 72
15364: PUSH
15365: FOR_IN
15366: IFFALSE 15445
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15368: LD_ADDR_VAR 0 4
15372: PUSH
15373: LD_INT 81
15375: PUSH
15376: LD_VAR 0 1
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 101
15387: PUSH
15388: LD_INT 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 69
15403: PPUSH
15404: LD_VAR 0 3
15408: PPUSH
15409: CALL_OW 74
15413: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
15414: LD_VAR 0 3
15418: PPUSH
15419: LD_VAR 0 4
15423: PPUSH
15424: CALL_OW 250
15428: PPUSH
15429: LD_VAR 0 4
15433: PPUSH
15434: CALL_OW 251
15438: PPUSH
15439: CALL_OW 111
// end ;
15443: GO 15365
15445: POP
15446: POP
// until russianTimeLapsers = 0 ;
15447: LD_EXP 40
15451: PUSH
15452: LD_INT 0
15454: EQUAL
15455: IFFALSE 15320
// end ;
15457: LD_VAR 0 2
15461: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15462: LD_INT 0
15464: PPUSH
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15470: LD_ADDR_VAR 0 6
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_VAR 0 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 25
15489: PUSH
15490: LD_INT 9
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15506: LD_ADDR_VAR 0 7
15510: PUSH
15511: LD_INT 81
15513: PUSH
15514: LD_VAR 0 1
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 3
15525: PUSH
15526: LD_INT 21
15528: PUSH
15529: LD_INT 3
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15549: LD_ADDR_VAR 0 4
15553: PUSH
15554: LD_INT 1
15556: PPUSH
15557: LD_INT 3
15559: PPUSH
15560: CALL_OW 12
15564: ST_TO_ADDR
// for i = 1 to list do
15565: LD_ADDR_VAR 0 5
15569: PUSH
15570: DOUBLE
15571: LD_INT 1
15573: DEC
15574: ST_TO_ADDR
15575: LD_VAR 0 6
15579: PUSH
15580: FOR_TO
15581: IFFALSE 15783
// for ta in filter do
15583: LD_ADDR_VAR 0 3
15587: PUSH
15588: LD_VAR 0 7
15592: PUSH
15593: FOR_IN
15594: IFFALSE 15779
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15596: LD_VAR 0 6
15600: PUSH
15601: LD_VAR 0 5
15605: ARRAY
15606: PPUSH
15607: LD_VAR 0 3
15611: PPUSH
15612: CALL_OW 296
15616: PUSH
15617: LD_INT 15
15619: LESSEQUAL
15620: IFFALSE 15777
// begin case c of 1 :
15622: LD_VAR 0 4
15626: PUSH
15627: LD_INT 1
15629: DOUBLE
15630: EQUAL
15631: IFTRUE 15635
15633: GO 15673
15635: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15636: LD_VAR 0 6
15640: PUSH
15641: LD_VAR 0 5
15645: ARRAY
15646: PPUSH
15647: LD_VAR 0 3
15651: PPUSH
15652: CALL_OW 250
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: CALL_OW 251
15666: PPUSH
15667: CALL_OW 154
15671: GO 15777
15673: LD_INT 2
15675: DOUBLE
15676: EQUAL
15677: IFTRUE 15681
15679: GO 15745
15681: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15682: LD_VAR 0 6
15686: PUSH
15687: LD_VAR 0 5
15691: ARRAY
15692: PPUSH
15693: LD_VAR 0 3
15697: PPUSH
15698: CALL_OW 250
15702: PUSH
15703: LD_INT 1
15705: NEG
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 12
15714: PLUS
15715: PPUSH
15716: LD_VAR 0 3
15720: PPUSH
15721: CALL_OW 251
15725: PUSH
15726: LD_INT 1
15728: NEG
15729: PPUSH
15730: LD_INT 1
15732: PPUSH
15733: CALL_OW 12
15737: PLUS
15738: PPUSH
15739: CALL_OW 153
15743: GO 15777
15745: LD_INT 3
15747: DOUBLE
15748: EQUAL
15749: IFTRUE 15753
15751: GO 15776
15753: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15754: LD_VAR 0 6
15758: PUSH
15759: LD_VAR 0 5
15763: ARRAY
15764: PPUSH
15765: LD_VAR 0 3
15769: PPUSH
15770: CALL_OW 115
15774: GO 15777
15776: POP
// end ; end ;
15777: GO 15593
15779: POP
15780: POP
15781: GO 15580
15783: POP
15784: POP
// end ;
15785: LD_VAR 0 2
15789: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15790: LD_INT 0
15792: PPUSH
15793: PPUSH
15794: PPUSH
15795: PPUSH
// r := 100 ;
15796: LD_ADDR_VAR 0 5
15800: PUSH
15801: LD_INT 100
15803: ST_TO_ADDR
// x := 0 ;
15804: LD_ADDR_VAR 0 6
15808: PUSH
15809: LD_INT 0
15811: ST_TO_ADDR
// while ( x < n ) do
15812: LD_VAR 0 6
15816: PUSH
15817: LD_VAR 0 2
15821: LESS
15822: IFFALSE 16109
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15824: LD_ADDR_VAR 0 4
15828: PUSH
15829: DOUBLE
15830: LD_INT 1
15832: DEC
15833: ST_TO_ADDR
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_INT 0
15841: PPUSH
15842: CALL_OW 517
15846: PUSH
15847: LD_INT 1
15849: ARRAY
15850: PUSH
15851: FOR_TO
15852: IFFALSE 16105
// begin if r > 50 then
15854: LD_VAR 0 5
15858: PUSH
15859: LD_INT 50
15861: GREATER
15862: IFFALSE 16081
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15864: LD_VAR 0 1
15868: PPUSH
15869: LD_INT 0
15871: PPUSH
15872: CALL_OW 517
15876: PUSH
15877: LD_INT 1
15879: ARRAY
15880: PUSH
15881: LD_VAR 0 4
15885: ARRAY
15886: PPUSH
15887: LD_VAR 0 1
15891: PPUSH
15892: LD_INT 0
15894: PPUSH
15895: CALL_OW 517
15899: PUSH
15900: LD_INT 2
15902: ARRAY
15903: PUSH
15904: LD_VAR 0 4
15908: ARRAY
15909: PPUSH
15910: CALL_OW 458
15914: NOT
15915: IFFALSE 16065
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15917: LD_VAR 0 1
15921: PPUSH
15922: LD_INT 0
15924: PPUSH
15925: CALL_OW 517
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: PUSH
15934: LD_VAR 0 4
15938: ARRAY
15939: PPUSH
15940: LD_VAR 0 1
15944: PPUSH
15945: LD_INT 0
15947: PPUSH
15948: CALL_OW 517
15952: PUSH
15953: LD_INT 2
15955: ARRAY
15956: PUSH
15957: LD_VAR 0 4
15961: ARRAY
15962: PPUSH
15963: LD_INT 5
15965: PPUSH
15966: LD_INT 0
15968: PPUSH
15969: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15973: LD_ADDR_EXP 42
15977: PUSH
15978: LD_EXP 42
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: LD_VAR 0 1
15990: PPUSH
15991: LD_INT 0
15993: PPUSH
15994: CALL_OW 517
15998: PUSH
15999: LD_INT 1
16001: ARRAY
16002: PUSH
16003: LD_VAR 0 4
16007: ARRAY
16008: PUSH
16009: LD_VAR 0 1
16013: PPUSH
16014: LD_INT 0
16016: PPUSH
16017: CALL_OW 517
16021: PUSH
16022: LD_INT 2
16024: ARRAY
16025: PUSH
16026: LD_VAR 0 4
16030: ARRAY
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PPUSH
16036: CALL_OW 2
16040: ST_TO_ADDR
// r := 0 ;
16041: LD_ADDR_VAR 0 5
16045: PUSH
16046: LD_INT 0
16048: ST_TO_ADDR
// x := x + 1 ;
16049: LD_ADDR_VAR 0 6
16053: PUSH
16054: LD_VAR 0 6
16058: PUSH
16059: LD_INT 1
16061: PLUS
16062: ST_TO_ADDR
// end else
16063: GO 16079
// r := r + 35 ;
16065: LD_ADDR_VAR 0 5
16069: PUSH
16070: LD_VAR 0 5
16074: PUSH
16075: LD_INT 35
16077: PLUS
16078: ST_TO_ADDR
// end else
16079: GO 16103
// r := r + rand ( 10 , 25 ) ;
16081: LD_ADDR_VAR 0 5
16085: PUSH
16086: LD_VAR 0 5
16090: PUSH
16091: LD_INT 10
16093: PPUSH
16094: LD_INT 25
16096: PPUSH
16097: CALL_OW 12
16101: PLUS
16102: ST_TO_ADDR
// end ;
16103: GO 15851
16105: POP
16106: POP
16107: GO 15812
// end ;
16109: LD_VAR 0 3
16113: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
16114: LD_INT 0
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
// tmpTab = [ ] ;
16120: LD_ADDR_VAR 0 6
16124: PUSH
16125: EMPTY
16126: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
16127: LD_INT 22
16129: PUSH
16130: LD_VAR 0 1
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 30
16141: PUSH
16142: LD_INT 32
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PPUSH
16153: CALL_OW 69
16157: PUSH
16158: LD_INT 0
16160: GREATER
16161: IFFALSE 16244
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
16163: LD_ADDR_VAR 0 4
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_VAR 0 1
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 30
16182: PUSH
16183: LD_INT 32
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PPUSH
16194: CALL_OW 69
16198: PUSH
16199: FOR_IN
16200: IFFALSE 16242
// begin for j in UnitsInside ( i ) do
16202: LD_ADDR_VAR 0 5
16206: PUSH
16207: LD_VAR 0 4
16211: PPUSH
16212: CALL_OW 313
16216: PUSH
16217: FOR_IN
16218: IFFALSE 16238
// tmpTab = tmpTab ^ j ;
16220: LD_ADDR_VAR 0 6
16224: PUSH
16225: LD_VAR 0 6
16229: PUSH
16230: LD_VAR 0 5
16234: ADD
16235: ST_TO_ADDR
16236: GO 16217
16238: POP
16239: POP
// end ;
16240: GO 16199
16242: POP
16243: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
16244: LD_VAR 0 6
16248: PPUSH
16249: LD_VAR 0 2
16253: PPUSH
16254: CALL_OW 250
16258: PPUSH
16259: LD_VAR 0 2
16263: PPUSH
16264: CALL_OW 251
16268: PPUSH
16269: CALL_OW 114
// end ; end_of_file
16273: LD_VAR 0 3
16277: RET
// on UnitDestroyed ( unit ) do var i ;
16278: LD_INT 0
16280: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 255
16290: PUSH
16291: LD_INT 3
16293: EQUAL
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 247
16304: PUSH
16305: LD_INT 1
16307: EQUAL
16308: AND
16309: IFFALSE 16373
// begin for i in RuScientists do
16311: LD_ADDR_VAR 0 2
16315: PUSH
16316: LD_EXP 34
16320: PUSH
16321: FOR_IN
16322: IFFALSE 16371
// if i = unit then
16324: LD_VAR 0 2
16328: PUSH
16329: LD_VAR 0 1
16333: EQUAL
16334: IFFALSE 16369
// begin RuScientists = RuScientists diff [ unit ] ;
16336: LD_ADDR_EXP 34
16340: PUSH
16341: LD_EXP 34
16345: PUSH
16346: LD_VAR 0 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: DIFF
16354: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16355: LD_ADDR_EXP 35
16359: PUSH
16360: LD_EXP 35
16364: PUSH
16365: LD_INT 1
16367: PLUS
16368: ST_TO_ADDR
// end ;
16369: GO 16321
16371: POP
16372: POP
// end ; end ;
16373: PPOPN 2
16375: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16376: LD_VAR 0 1
16380: PUSH
16381: LD_INT 10
16383: EQUAL
16384: PUSH
16385: LD_VAR 0 2
16389: PPUSH
16390: CALL_OW 255
16394: PUSH
16395: LD_INT 1
16397: EQUAL
16398: AND
16399: PUSH
16400: LD_EXP 45
16404: PUSH
16405: LD_INT 0
16407: EQUAL
16408: AND
16409: IFFALSE 16521
// begin eventVar1 = 1 ;
16411: LD_ADDR_EXP 45
16415: PUSH
16416: LD_INT 1
16418: ST_TO_ADDR
// teleportExplored = 1 ;
16419: LD_ADDR_EXP 33
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16427: LD_STRING M2a
16429: PPUSH
16430: CALL_OW 337
// wait ( 0 0$2 ) ;
16434: LD_INT 70
16436: PPUSH
16437: CALL_OW 67
// DialogueOn ;
16441: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16445: LD_INT 22
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 21
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: PPUSH
16474: LD_STRING DT3a-Sol1-1
16476: PPUSH
16477: LD_STRING DT3a-FSol1-1
16479: PPUSH
16480: CALL 12982 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16484: LD_EXP 1
16488: PPUSH
16489: LD_STRING DT3a-JMM-1
16491: PPUSH
16492: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16496: LD_VAR 0 2
16500: PPUSH
16501: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16505: LD_EXP 1
16509: PPUSH
16510: LD_STRING DT3a-JMM-1a
16512: PPUSH
16513: CALL_OW 88
// DialogueOff ;
16517: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16521: LD_VAR 0 1
16525: PUSH
16526: LD_INT 10
16528: EQUAL
16529: PUSH
16530: LD_VAR 0 2
16534: PPUSH
16535: CALL_OW 247
16539: PUSH
16540: LD_INT 2
16542: EQUAL
16543: AND
16544: PUSH
16545: LD_VAR 0 2
16549: PPUSH
16550: CALL_OW 255
16554: PUSH
16555: LD_INT 3
16557: EQUAL
16558: AND
16559: PUSH
16560: LD_EXP 29
16564: PUSH
16565: LD_INT 0
16567: EQUAL
16568: AND
16569: IFFALSE 16586
// begin wait ( 0 0$3 ) ;
16571: LD_INT 105
16573: PPUSH
16574: CALL_OW 67
// vehicleTeleported = 1 ;
16578: LD_ADDR_EXP 29
16582: PUSH
16583: LD_INT 1
16585: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16586: LD_VAR 0 1
16590: PUSH
16591: LD_INT 10
16593: EQUAL
16594: PUSH
16595: LD_VAR 0 2
16599: PPUSH
16600: CALL_OW 247
16604: PUSH
16605: LD_INT 2
16607: EQUAL
16608: AND
16609: PUSH
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 255
16619: PUSH
16620: LD_INT 3
16622: EQUAL
16623: AND
16624: PUSH
16625: LD_EXP 29
16629: PUSH
16630: LD_INT 2
16632: EQUAL
16633: AND
16634: IFFALSE 16651
// begin wait ( 0 0$3 ) ;
16636: LD_INT 105
16638: PPUSH
16639: CALL_OW 67
// vehicleTeleported = 3 ;
16643: LD_ADDR_EXP 29
16647: PUSH
16648: LD_INT 3
16650: ST_TO_ADDR
// end ; end ;
16651: PPOPN 2
16653: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 21
16661: EQUAL
16662: PUSH
16663: LD_VAR 0 2
16667: PUSH
16668: LD_INT 112
16670: EQUAL
16671: OR
16672: IFFALSE 16805
// if GetSide ( vehicle ) = 3 then
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 255
16683: PUSH
16684: LD_INT 3
16686: EQUAL
16687: IFFALSE 16805
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 264
16698: PUSH
16699: LD_INT 46
16701: EQUAL
16702: PUSH
16703: LD_VAR 0 1
16707: PPUSH
16708: CALL_OW 264
16712: PUSH
16713: LD_INT 45
16715: EQUAL
16716: OR
16717: PUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 264
16727: PUSH
16728: LD_INT 44
16730: EQUAL
16731: OR
16732: IFFALSE 16762
// begin russianTanks = russianTanks ^ vehicle ;
16734: LD_ADDR_EXP 39
16738: PUSH
16739: LD_EXP 39
16743: PUSH
16744: LD_VAR 0 1
16748: ADD
16749: ST_TO_ADDR
// ComEnterUnit ( vehicle , ruteleprt ) ;
16750: LD_VAR 0 1
16754: PPUSH
16755: LD_INT 10
16757: PPUSH
16758: CALL_OW 120
// end ; if GetWeapon ( vehicle ) = 49 then
16762: LD_VAR 0 1
16766: PPUSH
16767: CALL_OW 264
16771: PUSH
16772: LD_INT 49
16774: EQUAL
16775: IFFALSE 16805
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16777: LD_ADDR_EXP 40
16781: PUSH
16782: LD_EXP 40
16786: PUSH
16787: LD_VAR 0 1
16791: ADD
16792: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16793: LD_VAR 0 1
16797: PPUSH
16798: LD_INT 137
16800: PPUSH
16801: CALL_OW 120
// end ; end ; end ;
16805: PPOPN 2
16807: END
// on UnitGoesToRed ( unit ) do var i ;
16808: LD_INT 0
16810: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 255
16820: PUSH
16821: LD_INT 3
16823: EQUAL
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 247
16834: PUSH
16835: LD_INT 2
16837: EQUAL
16838: AND
16839: IFFALSE 16957
// begin if russianTanks > 0 then
16841: LD_EXP 39
16845: PUSH
16846: LD_INT 0
16848: GREATER
16849: IFFALSE 16899
// for i in russianTanks do
16851: LD_ADDR_VAR 0 2
16855: PUSH
16856: LD_EXP 39
16860: PUSH
16861: FOR_IN
16862: IFFALSE 16897
// if i = unit then
16864: LD_VAR 0 2
16868: PUSH
16869: LD_VAR 0 1
16873: EQUAL
16874: IFFALSE 16895
// russianTanks = russianTanks diff [ unit ] ;
16876: LD_ADDR_EXP 39
16880: PUSH
16881: LD_EXP 39
16885: PUSH
16886: LD_VAR 0 1
16890: PUSH
16891: EMPTY
16892: LIST
16893: DIFF
16894: ST_TO_ADDR
16895: GO 16861
16897: POP
16898: POP
// if russianTimeLapsers > 0 then
16899: LD_EXP 40
16903: PUSH
16904: LD_INT 0
16906: GREATER
16907: IFFALSE 16957
// for i in russianTimeLapsers do
16909: LD_ADDR_VAR 0 2
16913: PUSH
16914: LD_EXP 40
16918: PUSH
16919: FOR_IN
16920: IFFALSE 16955
// if i = unit then
16922: LD_VAR 0 2
16926: PUSH
16927: LD_VAR 0 1
16931: EQUAL
16932: IFFALSE 16953
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
16934: LD_ADDR_EXP 40
16938: PUSH
16939: LD_EXP 40
16943: PUSH
16944: LD_VAR 0 1
16948: PUSH
16949: EMPTY
16950: LIST
16951: DIFF
16952: ST_TO_ADDR
16953: GO 16919
16955: POP
16956: POP
// end ; end ;
16957: PPOPN 2
16959: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16960: LD_VAR 0 2
16964: PPUSH
16965: CALL_OW 255
16969: PUSH
16970: LD_INT 3
16972: EQUAL
16973: PUSH
16974: LD_VAR 0 2
16978: PPUSH
16979: CALL_OW 257
16983: PUSH
16984: LD_INT 3
16986: EQUAL
16987: AND
16988: PUSH
16989: LD_INT 21
16991: PPUSH
16992: CALL_OW 255
16996: PUSH
16997: LD_INT 3
16999: EQUAL
17000: AND
17001: PUSH
17002: LD_INT 21
17004: PPUSH
17005: CALL_OW 302
17009: AND
17010: IFFALSE 17024
// ComEnterUnit ( human , ru_fact ) ;
17012: LD_VAR 0 2
17016: PPUSH
17017: LD_INT 21
17019: PPUSH
17020: CALL_OW 120
// end ; end_of_file
17024: PPOPN 2
17026: END
// every 0 0$1 trigger ruAI = 1 do
17027: LD_EXP 41
17031: PUSH
17032: LD_INT 1
17034: EQUAL
17035: IFFALSE 17134
17037: GO 17039
17039: DISABLE
// begin enable ;
17040: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17041: LD_INT 3
17043: PPUSH
17044: LD_INT 6
17046: PPUSH
17047: LD_INT 9
17049: PPUSH
17050: LD_EXP 38
17054: PPUSH
17055: CALL 13862 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17059: LD_INT 3
17061: PPUSH
17062: LD_INT 4
17064: PPUSH
17065: LD_INT 10
17067: PPUSH
17068: LD_EXP 38
17072: PPUSH
17073: CALL 13862 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17077: LD_INT 3
17079: PPUSH
17080: LD_INT 16
17082: PPUSH
17083: LD_INT 9
17085: PPUSH
17086: LD_INT 91
17088: PPUSH
17089: CALL 14253 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17093: LD_INT 3
17095: PPUSH
17096: LD_INT 17
17098: PPUSH
17099: LD_INT 10
17101: PPUSH
17102: LD_INT 47
17104: PUSH
17105: LD_INT 129
17107: PUSH
17108: LD_INT 135
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL 14253 0 4
// AttackVehicles ( 3 ) ;
17120: LD_INT 3
17122: PPUSH
17123: CALL 14980 0 1
// IntBazooka ( 3 ) ;
17127: LD_INT 3
17129: PPUSH
17130: CALL 15462 0 1
// end ;
17134: END
// every 0 0$1 do
17135: GO 17137
17137: DISABLE
// begin enable ;
17138: ENABLE
// TimeLapsersAI ( 3 ) ;
17139: LD_INT 3
17141: PPUSH
17142: CALL 15278 0 1
// end ;
17146: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17147: LD_INT 4
17149: PPUSH
17150: CALL_OW 303
17154: IFFALSE 17169
17156: GO 17158
17158: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17159: LD_INT 3
17161: PPUSH
17162: LD_INT 4
17164: PPUSH
17165: CALL 16114 0 2
17169: END
// every 0 0$1 do
17170: GO 17172
17172: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17173: LD_INT 3
17175: PPUSH
17176: LD_INT 91
17178: PPUSH
17179: LD_INT 3
17181: PPUSH
17182: CALL 13777 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17186: LD_INT 3
17188: PPUSH
17189: LD_INT 47
17191: PPUSH
17192: LD_INT 3
17194: PPUSH
17195: CALL 13777 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17199: LD_INT 3
17201: PPUSH
17202: LD_INT 129
17204: PPUSH
17205: LD_INT 3
17207: PPUSH
17208: CALL 13777 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17212: LD_INT 3
17214: PPUSH
17215: LD_INT 3
17217: PPUSH
17218: LD_INT 3
17220: PPUSH
17221: CALL 13777 0 3
// end ;
17225: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17226: LD_EXP 28
17230: PUSH
17231: LD_INT 2
17233: EQUAL
17234: PUSH
17235: LD_INT 22
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 21
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 50
17257: PUSH
17258: EMPTY
17259: LIST
17260: PUSH
17261: LD_INT 3
17263: PUSH
17264: LD_INT 58
17266: PUSH
17267: EMPTY
17268: LIST
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: PPUSH
17280: CALL_OW 69
17284: PUSH
17285: LD_INT 18
17287: PPUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 21
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 70
17316: PUSH
17317: LD_INT 0
17319: EQUAL
17320: DIFF
17321: AND
17322: IFFALSE 17440
17324: GO 17326
17326: DISABLE
// begin enable ;
17327: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17328: LD_INT 3
17330: PPUSH
17331: LD_INT 21
17333: PPUSH
17334: LD_INT 3
17336: PUSH
17337: LD_INT 4
17339: PUSH
17340: LD_INT 4
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: PUSH
17348: LD_OWVAR 67
17352: ARRAY
17353: PPUSH
17354: LD_INT 46
17356: PUSH
17357: LD_INT 45
17359: PUSH
17360: LD_INT 44
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PPUSH
17368: LD_INT 3
17370: PPUSH
17371: LD_INT 3
17373: PPUSH
17374: LD_INT 24
17376: PPUSH
17377: CALL 14833 0 7
// if russianTimeLapsers = 0 then
17381: LD_EXP 40
17385: PUSH
17386: LD_INT 0
17388: EQUAL
17389: IFFALSE 17440
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17391: LD_INT 3
17393: PPUSH
17394: LD_INT 112
17396: PPUSH
17397: LD_INT 1
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: LD_INT 2
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: PUSH
17411: LD_OWVAR 67
17415: ARRAY
17416: PPUSH
17417: LD_INT 49
17419: PUSH
17420: LD_INT 49
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PPUSH
17427: LD_INT 3
17429: PPUSH
17430: LD_INT 3
17432: PPUSH
17433: LD_INT 24
17435: PPUSH
17436: CALL 14833 0 7
// end ;
17440: END
// every 0 0$1 trigger arabianMines do var i ;
17441: LD_EXP 42
17445: IFFALSE 17566
17447: GO 17449
17449: DISABLE
17450: LD_INT 0
17452: PPUSH
// begin enable ;
17453: ENABLE
// for i in arabianMines do
17454: LD_ADDR_VAR 0 1
17458: PUSH
17459: LD_EXP 42
17463: PUSH
17464: FOR_IN
17465: IFFALSE 17564
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17467: LD_INT 22
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 92
17479: PUSH
17480: LD_VAR 0 1
17484: PUSH
17485: LD_INT 1
17487: ARRAY
17488: PUSH
17489: LD_VAR 0 1
17493: PUSH
17494: LD_INT 2
17496: ARRAY
17497: PUSH
17498: LD_INT 3
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: IFFALSE 17562
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17517: LD_VAR 0 1
17521: PUSH
17522: LD_INT 1
17524: ARRAY
17525: PPUSH
17526: LD_VAR 0 1
17530: PUSH
17531: LD_INT 2
17533: ARRAY
17534: PPUSH
17535: LD_INT 5
17537: PPUSH
17538: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17542: LD_ADDR_EXP 42
17546: PUSH
17547: LD_EXP 42
17551: PPUSH
17552: LD_VAR 0 1
17556: PPUSH
17557: CALL_OW 3
17561: ST_TO_ADDR
// end ; end ;
17562: GO 17464
17564: POP
17565: POP
// end ; end_of_file
17566: PPOPN 1
17568: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
17569: LD_EXP 34
17573: PUSH
17574: EMPTY
17575: EQUAL
17576: PUSH
17577: LD_INT 3
17579: PPUSH
17580: CALL_OW 301
17584: AND
17585: IFFALSE 17790
17587: GO 17589
17589: DISABLE
// begin if sciCounter = 0 then
17590: LD_EXP 35
17594: PUSH
17595: LD_INT 0
17597: EQUAL
17598: IFFALSE 17624
// begin Say ( JMM , D7a-JMM-1 ) ;
17600: LD_EXP 1
17604: PPUSH
17605: LD_STRING D7a-JMM-1
17607: PPUSH
17608: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17612: LD_EXP 22
17616: PPUSH
17617: LD_STRING D7a-Pow-1
17619: PPUSH
17620: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
17624: LD_EXP 35
17628: PUSH
17629: LD_INT 0
17631: GREATER
17632: PUSH
17633: LD_EXP 35
17637: PUSH
17638: LD_INT 6
17640: LESS
17641: AND
17642: IFFALSE 17668
// begin Say ( JMM , D7b-JMM-1 ) ;
17644: LD_EXP 1
17648: PPUSH
17649: LD_STRING D7b-JMM-1
17651: PPUSH
17652: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17656: LD_EXP 22
17660: PPUSH
17661: LD_STRING D7b-Pow-1
17663: PPUSH
17664: CALL_OW 94
// end ; if sciCounter = 6 then
17668: LD_EXP 35
17672: PUSH
17673: LD_INT 6
17675: EQUAL
17676: IFFALSE 17786
// begin Say ( JMM , D7c-JMM-1 ) ;
17678: LD_EXP 1
17682: PPUSH
17683: LD_STRING D7c-JMM-1
17685: PPUSH
17686: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17690: LD_EXP 22
17694: PPUSH
17695: LD_STRING D7c-Pow-1
17697: PPUSH
17698: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17702: LD_EXP 1
17706: PPUSH
17707: LD_STRING D7d-JMM-1
17709: PPUSH
17710: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17714: LD_EXP 22
17718: PPUSH
17719: LD_STRING D7d-Pow-1
17721: PPUSH
17722: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17726: LD_EXP 1
17730: PPUSH
17731: LD_STRING D7d-JMM-2
17733: PPUSH
17734: CALL_OW 88
// if askSiberite = 1 then
17738: LD_EXP 32
17742: PUSH
17743: LD_INT 1
17745: EQUAL
17746: IFFALSE 17762
// begin Say ( JMM , D7d-JMM-2a ) ;
17748: LD_EXP 1
17752: PPUSH
17753: LD_STRING D7d-JMM-2a
17755: PPUSH
17756: CALL_OW 88
// end else
17760: GO 17774
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
17762: LD_EXP 22
17766: PPUSH
17767: LD_STRING D7d-Pow-2
17769: PPUSH
17770: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
17774: LD_EXP 22
17778: PPUSH
17779: LD_STRING D7d-Pow-2a
17781: PPUSH
17782: CALL_OW 94
// end ; FinishMission ;
17786: CALL 17791 0 0
// end ;
17790: END
// export function FinishMission ; begin
17791: LD_INT 0
17793: PPUSH
// if teleportExplored = 1 then
17794: LD_EXP 33
17798: PUSH
17799: LD_INT 1
17801: EQUAL
17802: IFFALSE 17816
// AddMedal ( Teleport , 1 ) else
17804: LD_STRING Teleport
17806: PPUSH
17807: LD_INT 1
17809: PPUSH
17810: CALL_OW 101
17814: GO 17827
// AddMedal ( Teleport , - 1 ) ;
17816: LD_STRING Teleport
17818: PPUSH
17819: LD_INT 1
17821: NEG
17822: PPUSH
17823: CALL_OW 101
// if sciCounter > 2 then
17827: LD_EXP 35
17831: PUSH
17832: LD_INT 2
17834: GREATER
17835: IFFALSE 17849
// AddMedal ( Materials , 1 ) else
17837: LD_STRING Materials
17839: PPUSH
17840: LD_INT 1
17842: PPUSH
17843: CALL_OW 101
17847: GO 17860
// AddMedal ( Materials , - 1 ) ;
17849: LD_STRING Materials
17851: PPUSH
17852: LD_INT 1
17854: NEG
17855: PPUSH
17856: CALL_OW 101
// if sciCounter = 6 then
17860: LD_EXP 35
17864: PUSH
17865: LD_INT 6
17867: EQUAL
17868: IFFALSE 17892
// begin AddMedal ( Scientists , 1 ) ;
17870: LD_STRING Scientists
17872: PPUSH
17873: LD_INT 1
17875: PPUSH
17876: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17880: LD_INT 1
17882: PPUSH
17883: LD_STRING 12_SciDed_1
17885: PPUSH
17886: CALL_OW 39
// end else
17890: GO 17913
// begin AddMedal ( Scientists , - 1 ) ;
17892: LD_STRING Scientists
17894: PPUSH
17895: LD_INT 1
17897: NEG
17898: PPUSH
17899: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17903: LD_INT 0
17905: PPUSH
17906: LD_STRING 12_SciDed_1
17908: PPUSH
17909: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17913: LD_EXP 31
17917: PPUSH
17918: LD_STRING 12_MainDepositFake_1
17920: PPUSH
17921: CALL_OW 39
// GiveMedals ( MAIN ) ;
17925: LD_STRING MAIN
17927: PPUSH
17928: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17932: LD_INT 22
17934: PUSH
17935: LD_INT 1
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 21
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: LD_INT 25
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 25
17967: PUSH
17968: LD_INT 2
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 25
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 25
17987: PUSH
17988: LD_INT 4
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 25
17997: PUSH
17998: LD_INT 5
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 25
18007: PUSH
18008: LD_INT 8
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: LIST
18028: PPUSH
18029: CALL_OW 69
18033: PPUSH
18034: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18038: LD_EXP 1
18042: PPUSH
18043: LD_EXP 44
18047: PUSH
18048: LD_STRING JMM
18050: STR
18051: PPUSH
18052: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18056: LD_EXP 7
18060: PPUSH
18061: LD_EXP 44
18065: PUSH
18066: LD_STRING Brown
18068: STR
18069: PPUSH
18070: CALL 12931 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18074: LD_EXP 3
18078: PPUSH
18079: LD_EXP 44
18083: PUSH
18084: LD_STRING Donaldson
18086: STR
18087: PPUSH
18088: CALL 12931 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18092: LD_EXP 4
18096: PPUSH
18097: LD_EXP 44
18101: PUSH
18102: LD_STRING Bobby
18104: STR
18105: PPUSH
18106: CALL 12931 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18110: LD_EXP 5
18114: PPUSH
18115: LD_EXP 44
18119: PUSH
18120: LD_STRING Cyrus
18122: STR
18123: PPUSH
18124: CALL 12931 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18128: LD_EXP 2
18132: PPUSH
18133: LD_EXP 44
18137: PUSH
18138: LD_STRING Lisa
18140: STR
18141: PPUSH
18142: CALL 12931 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18146: LD_EXP 12
18150: PPUSH
18151: LD_EXP 44
18155: PUSH
18156: LD_STRING Frank
18158: STR
18159: PPUSH
18160: CALL 12931 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18164: LD_EXP 13
18168: PPUSH
18169: LD_EXP 44
18173: PUSH
18174: LD_STRING Kikuchi
18176: STR
18177: PPUSH
18178: CALL 12931 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18182: LD_EXP 9
18186: PPUSH
18187: LD_EXP 44
18191: PUSH
18192: LD_STRING Houten
18194: STR
18195: PPUSH
18196: CALL 12931 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18200: LD_EXP 11
18204: PPUSH
18205: LD_EXP 44
18209: PUSH
18210: LD_STRING Gary
18212: STR
18213: PPUSH
18214: CALL 12931 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18218: LD_EXP 10
18222: PPUSH
18223: LD_EXP 44
18227: PUSH
18228: LD_STRING Cornell
18230: STR
18231: PPUSH
18232: CALL 12931 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18236: LD_EXP 6
18240: PPUSH
18241: LD_EXP 44
18245: PUSH
18246: LD_STRING Denis
18248: STR
18249: PPUSH
18250: CALL 12931 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18254: LD_EXP 8
18258: PPUSH
18259: LD_EXP 44
18263: PUSH
18264: LD_STRING Gladstone
18266: STR
18267: PPUSH
18268: CALL 12931 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18272: LD_INT 50
18274: PUSH
18275: EMPTY
18276: LIST
18277: PUSH
18278: LD_INT 22
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 21
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 25
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 25
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 25
18323: PUSH
18324: LD_INT 3
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 25
18333: PUSH
18334: LD_INT 4
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 25
18343: PUSH
18344: LD_INT 5
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 25
18353: PUSH
18354: LD_INT 8
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: PPUSH
18376: CALL_OW 69
18380: PUSH
18381: LD_EXP 1
18385: PUSH
18386: LD_EXP 7
18390: PUSH
18391: LD_EXP 3
18395: PUSH
18396: LD_EXP 4
18400: PUSH
18401: LD_EXP 5
18405: PUSH
18406: LD_EXP 2
18410: PUSH
18411: LD_EXP 12
18415: PUSH
18416: LD_EXP 8
18420: PUSH
18421: LD_EXP 13
18425: PUSH
18426: LD_EXP 6
18430: PUSH
18431: LD_EXP 9
18435: PUSH
18436: LD_EXP 11
18440: PUSH
18441: LD_EXP 10
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: DIFF
18461: PPUSH
18462: LD_STRING 12_other_survivors
18464: PPUSH
18465: CALL_OW 38
// YouWin ;
18469: CALL_OW 103
// end ; end_of_file
18473: LD_VAR 0 1
18477: RET
// every 0 0$1 trigger IsDead ( JMM ) do
18478: LD_EXP 1
18482: PPUSH
18483: CALL_OW 301
18487: IFFALSE 18499
18489: GO 18491
18491: DISABLE
// YouLost ( JMM ) ; end_of_file
18492: LD_STRING JMM
18494: PPUSH
18495: CALL_OW 104
18499: END
// every 0 0$30 do
18500: GO 18502
18502: DISABLE
// begin enable ;
18503: ENABLE
// if cratesSpawned < 6 then
18504: LD_EXP 43
18508: PUSH
18509: LD_INT 6
18511: LESS
18512: IFFALSE 18549
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18514: LD_INT 3
18516: PPUSH
18517: LD_INT 5
18519: PPUSH
18520: CALL_OW 12
18524: PPUSH
18525: LD_INT 21
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18535: LD_ADDR_EXP 43
18539: PUSH
18540: LD_EXP 43
18544: PUSH
18545: LD_INT 1
18547: PLUS
18548: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
18549: LD_EXP 43
18553: PUSH
18554: LD_INT 6
18556: GREATEREQUAL
18557: PUSH
18558: LD_EXP 43
18562: PUSH
18563: LD_INT 12
18565: LESS
18566: AND
18567: IFFALSE 18611
// begin wait ( 0 0$30 ) ;
18569: LD_INT 1050
18571: PPUSH
18572: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18576: LD_INT 3
18578: PPUSH
18579: LD_INT 5
18581: PPUSH
18582: CALL_OW 12
18586: PPUSH
18587: LD_INT 21
18589: PPUSH
18590: LD_INT 1
18592: PPUSH
18593: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18597: LD_ADDR_EXP 43
18601: PUSH
18602: LD_EXP 43
18606: PUSH
18607: LD_INT 1
18609: PLUS
18610: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 15 then
18611: LD_EXP 43
18615: PUSH
18616: LD_INT 12
18618: GREATEREQUAL
18619: PUSH
18620: LD_EXP 43
18624: PUSH
18625: LD_INT 15
18627: LESS
18628: AND
18629: IFFALSE 18673
// begin wait ( 1 1$30 ) ;
18631: LD_INT 3150
18633: PPUSH
18634: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18638: LD_INT 3
18640: PPUSH
18641: LD_INT 5
18643: PPUSH
18644: CALL_OW 12
18648: PPUSH
18649: LD_INT 21
18651: PPUSH
18652: LD_INT 1
18654: PPUSH
18655: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18659: LD_ADDR_EXP 43
18663: PUSH
18664: LD_EXP 43
18668: PUSH
18669: LD_INT 1
18671: PLUS
18672: ST_TO_ADDR
// end ; if cratesSpawned >= 15 then
18673: LD_EXP 43
18677: PUSH
18678: LD_INT 15
18680: GREATEREQUAL
18681: IFFALSE 18684
// disable ;
18683: DISABLE
// end ;
18684: END
