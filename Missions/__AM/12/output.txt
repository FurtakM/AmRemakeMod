// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 16852 0 0
// PrepareDifficulty ;
 195: CALL 13388 0 0
// PrepareVehicles ;
 199: CALL 1566 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1142 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2885 0 0
// PrepareWestBase ;
 227: CALL 3397 0 0
// PrepareEastBase ;
 231: CALL 2957 0 0
// PrepareOtherRussians ;
 235: CALL 3509 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11_others
 575: PPUSH
 576: CALL_OW 31
 580: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 581: LD_ADDR_EXP 14
 585: PUSH
 586: LD_EXP 14
 590: PUSH
 591: LD_STRING 11c_others
 593: PPUSH
 594: CALL_OW 31
 598: ADD
 599: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 600: LD_ADDR_EXP 1
 604: PUSH
 605: LD_STRING 11_JMM
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 13027 0 2
 615: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 616: LD_EXP 1
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 628: LD_EXP 1
 632: PPUSH
 633: LD_INT 22
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: LD_INT 58
 655: PUSH
 656: EMPTY
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PPUSH
 664: CALL_OW 69
 668: PUSH
 669: LD_INT 1
 671: ARRAY
 672: PPUSH
 673: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 677: LD_STRING 11_Lisa
 679: PPUSH
 680: CALL_OW 28
 684: PUSH
 685: LD_INT 1
 687: EQUAL
 688: IFFALSE 735
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 690: LD_ADDR_EXP 2
 694: PUSH
 695: LD_STRING 11_Lisa
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 13027 0 2
 705: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 706: LD_EXP 2
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 718: LD_EXP 2
 722: PPUSH
 723: LD_INT 4
 725: PPUSH
 726: LD_INT 0
 728: PPUSH
 729: CALL_OW 49
// end else
 733: GO 751
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 735: LD_INT 4
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: LD_INT 1
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 1142 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 751: LD_STRING 11_Donaldson
 753: PPUSH
 754: CALL_OW 28
 758: PUSH
 759: LD_INT 1
 761: EQUAL
 762: IFFALSE 809
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING 11_Donaldson
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 13027 0 2
 779: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 780: LD_EXP 3
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 792: LD_EXP 3
 796: PPUSH
 797: LD_INT 4
 799: PPUSH
 800: LD_INT 0
 802: PPUSH
 803: CALL_OW 49
// end else
 807: GO 825
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 809: LD_INT 4
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL 1142 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 825: LD_STRING 11_Cyrus
 827: PPUSH
 828: CALL_OW 28
 832: PUSH
 833: LD_INT 1
 835: EQUAL
 836: IFFALSE 883
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 838: LD_ADDR_EXP 5
 842: PUSH
 843: LD_STRING 11_Cyrus
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: CALL 13027 0 2
 853: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 854: LD_EXP 5
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 866: LD_EXP 5
 870: PPUSH
 871: LD_INT 4
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: CALL_OW 49
// end else
 881: GO 899
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 883: LD_INT 4
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_INT 1
 891: PPUSH
 892: LD_INT 0
 894: PPUSH
 895: CALL 1142 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 899: LD_STRING 11_Denis
 901: PPUSH
 902: CALL_OW 28
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 957
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 912: LD_ADDR_EXP 6
 916: PUSH
 917: LD_STRING 11_Denis
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: CALL 13027 0 2
 927: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 928: LD_EXP 6
 932: PPUSH
 933: LD_INT 4
 935: PPUSH
 936: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 940: LD_EXP 6
 944: PPUSH
 945: LD_INT 4
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 49
// end else
 955: GO 973
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 957: LD_INT 4
 959: PPUSH
 960: LD_INT 0
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL 1142 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 973: LD_STRING 11_Frank
 975: PPUSH
 976: CALL_OW 28
 980: PUSH
 981: LD_INT 1
 983: EQUAL
 984: IFFALSE 1031
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 986: LD_ADDR_EXP 12
 990: PUSH
 991: LD_STRING 11_Frank
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: CALL 13027 0 2
1001: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1002: LD_EXP 12
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1014: LD_EXP 12
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: CALL_OW 49
// end else
1029: GO 1047
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL 1142 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1047: LD_STRING 11_Cornell
1049: PPUSH
1050: CALL_OW 28
1054: PUSH
1055: LD_INT 1
1057: EQUAL
1058: IFFALSE 1105
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1060: LD_ADDR_EXP 10
1064: PUSH
1065: LD_STRING 11_Cornell
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL 13027 0 2
1075: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1076: LD_EXP 10
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1088: LD_EXP 10
1092: PPUSH
1093: LD_INT 4
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end else
1103: GO 1121
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1105: LD_INT 4
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: LD_INT 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: CALL 1142 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1121: LD_ADDR_EXP 22
1125: PUSH
1126: LD_STRING Powell
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL 13027 0 2
1136: ST_TO_ADDR
// end ;
1137: LD_VAR 0 1
1141: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
// if mech = 1 then
1149: LD_VAR 0 4
1153: PUSH
1154: LD_INT 1
1156: EQUAL
1157: IFFALSE 1392
// begin if others11 > 0 then
1159: LD_EXP 14
1163: PUSH
1164: LD_INT 0
1166: GREATER
1167: IFFALSE 1332
// begin for i := 1 to others11 - 1 do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: DOUBLE
1175: LD_INT 1
1177: DEC
1178: ST_TO_ADDR
1179: LD_EXP 14
1183: PUSH
1184: LD_INT 1
1186: MINUS
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1269
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1191: LD_EXP 14
1195: PUSH
1196: LD_VAR 0 6
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 259
1209: PUSH
1210: LD_EXP 14
1214: PUSH
1215: LD_VAR 0 6
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ARRAY
1224: PPUSH
1225: LD_INT 3
1227: PPUSH
1228: CALL_OW 259
1232: LESS
1233: IFFALSE 1267
// begin mecha = others11 [ i + 1 ] ;
1235: LD_ADDR_VAR 0 9
1239: PUSH
1240: LD_EXP 14
1244: PUSH
1245: LD_VAR 0 6
1249: PUSH
1250: LD_INT 1
1252: PLUS
1253: ARRAY
1254: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1255: LD_VAR 0 9
1259: PPUSH
1260: LD_INT 3
1262: PPUSH
1263: CALL_OW 336
// end ; end ;
1267: GO 1188
1269: POP
1270: POP
// if spawnMode = 1 then
1271: LD_VAR 0 3
1275: PUSH
1276: LD_INT 1
1278: EQUAL
1279: IFFALSE 1300
// PlaceUnitArea ( mecha , area , false ) else
1281: LD_VAR 0 9
1285: PPUSH
1286: LD_VAR 0 1
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
1298: GO 1314
// PlaceHumanInUnit ( mecha , veh ) ;
1300: LD_VAR 0 9
1304: PPUSH
1305: LD_VAR 0 2
1309: PPUSH
1310: CALL_OW 52
// others11 = others11 diff mecha ;
1314: LD_ADDR_EXP 14
1318: PUSH
1319: LD_EXP 14
1323: PUSH
1324: LD_VAR 0 9
1328: DIFF
1329: ST_TO_ADDR
// end else
1330: GO 1390
// begin hc_name =  ;
1332: LD_ADDR_OWVAR 26
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// hc_gallery =  ;
1340: LD_ADDR_OWVAR 33
1344: PUSH
1345: LD_STRING 
1347: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1348: LD_INT 0
1350: PPUSH
1351: LD_INT 7
1353: PPUSH
1354: LD_INT 9
1356: PPUSH
1357: CALL_OW 12
1361: PPUSH
1362: CALL_OW 383
// un = CreateHuman ;
1366: LD_ADDR_VAR 0 7
1370: PUSH
1371: CALL_OW 44
1375: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1376: LD_VAR 0 7
1380: PPUSH
1381: LD_VAR 0 2
1385: PPUSH
1386: CALL_OW 52
// end ; end else
1390: GO 1561
// begin if others11 > 0 then
1392: LD_EXP 14
1396: PUSH
1397: LD_INT 0
1399: GREATER
1400: IFFALSE 1473
// begin if spawnMode = 1 then
1402: LD_VAR 0 3
1406: PUSH
1407: LD_INT 1
1409: EQUAL
1410: IFFALSE 1435
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1412: LD_EXP 14
1416: PUSH
1417: LD_INT 1
1419: ARRAY
1420: PPUSH
1421: LD_VAR 0 1
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
1433: GO 1453
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1435: LD_EXP 14
1439: PUSH
1440: LD_INT 1
1442: ARRAY
1443: PPUSH
1444: LD_VAR 0 2
1448: PPUSH
1449: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1453: LD_ADDR_EXP 14
1457: PUSH
1458: LD_EXP 14
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL_OW 3
1470: ST_TO_ADDR
// end else
1471: GO 1561
// begin hc_name =  ;
1473: LD_ADDR_OWVAR 26
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// hc_gallery =  ;
1481: LD_ADDR_OWVAR 33
1485: PUSH
1486: LD_STRING 
1488: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1489: LD_INT 0
1491: PPUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 2
1497: PUSH
1498: LD_INT 3
1500: PUSH
1501: LD_INT 4
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 12
1520: ARRAY
1521: PPUSH
1522: LD_INT 7
1524: PPUSH
1525: LD_INT 9
1527: PPUSH
1528: CALL_OW 12
1532: PPUSH
1533: CALL_OW 380
// un = CreateHuman ;
1537: LD_ADDR_VAR 0 7
1541: PUSH
1542: CALL_OW 44
1546: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1547: LD_VAR 0 7
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 52
// end ; end ; end ;
1561: LD_VAR 0 5
1565: RET
// export function PrepareVehicles ; var veh ; begin
1566: LD_INT 0
1568: PPUSH
1569: PPUSH
// uc_side = 1 ;
1570: LD_ADDR_OWVAR 20
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// uc_nation = 1 ;
1578: LD_ADDR_OWVAR 21
1582: PUSH
1583: LD_INT 1
1585: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1586: LD_ADDR_OWVAR 37
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_engine = 3 ;
1594: LD_ADDR_OWVAR 39
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_control = 3 ;
1602: LD_ADDR_OWVAR 38
1606: PUSH
1607: LD_INT 3
1609: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1610: LD_ADDR_OWVAR 40
1614: PUSH
1615: LD_INT 4
1617: ST_TO_ADDR
// veh = CreateVehicle ;
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: CALL_OW 45
1627: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_INT 4
1635: PPUSH
1636: LD_INT 0
1638: PPUSH
1639: CALL_OW 49
// vc_weapon = us_double_gun ;
1643: LD_ADDR_OWVAR 40
1647: PUSH
1648: LD_INT 5
1650: ST_TO_ADDR
// vc_control = 1 ;
1651: LD_ADDR_OWVAR 38
1655: PUSH
1656: LD_INT 1
1658: ST_TO_ADDR
// veh = CreateVehicle ;
1659: LD_ADDR_VAR 0 2
1663: PUSH
1664: CALL_OW 45
1668: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1669: LD_VAR 0 2
1673: PPUSH
1674: LD_INT 4
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL_OW 49
// vc_weapon = us_light_gun ;
1684: LD_ADDR_OWVAR 40
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_control = 3 ;
1692: LD_ADDR_OWVAR 38
1696: PUSH
1697: LD_INT 3
1699: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1700: LD_ADDR_OWVAR 37
1704: PUSH
1705: LD_INT 2
1707: ST_TO_ADDR
// veh = CreateVehicle ;
1708: LD_ADDR_VAR 0 2
1712: PUSH
1713: CALL_OW 45
1717: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1718: LD_VAR 0 2
1722: PPUSH
1723: LD_INT 4
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1733: LD_ADDR_OWVAR 40
1737: PUSH
1738: LD_INT 4
1740: ST_TO_ADDR
// veh = CreateVehicle ;
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: CALL_OW 45
1750: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1751: LD_VAR 0 2
1755: PPUSH
1756: LD_INT 4
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: CALL_OW 49
// end ;
1766: LD_VAR 0 1
1770: RET
// export function PowellSupport1 ; var veh , un ; begin
1771: LD_INT 0
1773: PPUSH
1774: PPUSH
1775: PPUSH
// uc_side = 1 ;
1776: LD_ADDR_OWVAR 20
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// uc_nation = 1 ;
1784: LD_ADDR_OWVAR 21
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1792: LD_STRING 11_Brown
1794: PPUSH
1795: CALL_OW 28
1799: PUSH
1800: LD_INT 1
1802: EQUAL
1803: IFFALSE 1850
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1805: LD_ADDR_EXP 7
1809: PUSH
1810: LD_STRING 11_Brown
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 13027 0 2
1820: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1821: LD_EXP 7
1825: PPUSH
1826: LD_INT 2
1828: PPUSH
1829: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1833: LD_EXP 7
1837: PPUSH
1838: LD_INT 4
1840: PPUSH
1841: LD_INT 0
1843: PPUSH
1844: CALL_OW 49
// end else
1848: GO 1866
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1850: LD_INT 4
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL 1142 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1866: LD_STRING 11_Gary
1868: PPUSH
1869: CALL_OW 28
1873: PUSH
1874: LD_INT 1
1876: EQUAL
1877: IFFALSE 1924
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1879: LD_ADDR_EXP 11
1883: PUSH
1884: LD_STRING 11_Gary
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: CALL 13027 0 2
1894: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1895: LD_EXP 11
1899: PPUSH
1900: LD_INT 2
1902: PPUSH
1903: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1907: LD_EXP 11
1911: PPUSH
1912: LD_INT 4
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 49
// end else
1922: GO 1940
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1924: LD_INT 4
1926: PPUSH
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL 1142 0 4
// end ; vc_chassis = us_medium_tracked ;
1940: LD_ADDR_OWVAR 37
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_engine = 3 ;
1948: LD_ADDR_OWVAR 39
1952: PUSH
1953: LD_INT 3
1955: ST_TO_ADDR
// vc_control = 1 ;
1956: LD_ADDR_OWVAR 38
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// vc_weapon = us_crane ;
1964: LD_ADDR_OWVAR 40
1968: PUSH
1969: LD_INT 13
1971: ST_TO_ADDR
// veh = CreateVehicle ;
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: CALL_OW 45
1981: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1982: LD_VAR 0 2
1986: PPUSH
1987: LD_INT 4
1989: PPUSH
1990: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1994: LD_VAR 0 2
1998: PPUSH
1999: LD_INT 4
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2009: LD_INT 4
2011: PPUSH
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_INT 2
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL 1142 0 4
// vc_weapon = 9 ;
2027: LD_ADDR_OWVAR 40
2031: PUSH
2032: LD_INT 9
2034: ST_TO_ADDR
// veh = CreateVehicle ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: CALL_OW 45
2044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_INT 4
2052: PPUSH
2053: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2057: LD_VAR 0 2
2061: PPUSH
2062: LD_INT 4
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2072: LD_INT 4
2074: PPUSH
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL 1142 0 4
// vc_control = 3 ;
2090: LD_ADDR_OWVAR 38
2094: PUSH
2095: LD_INT 3
2097: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2098: LD_ADDR_OWVAR 40
2102: PUSH
2103: LD_INT 12
2105: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2106: LD_ADDR_EXP 15
2110: PUSH
2111: CALL_OW 45
2115: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2116: LD_ADDR_EXP 16
2120: PUSH
2121: CALL_OW 45
2125: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2126: LD_EXP 15
2130: PPUSH
2131: LD_INT 4
2133: PPUSH
2134: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2138: LD_EXP 16
2142: PPUSH
2143: LD_INT 4
2145: PPUSH
2146: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2150: LD_EXP 15
2154: PPUSH
2155: LD_INT 4
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2165: LD_EXP 16
2169: PPUSH
2170: LD_INT 4
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2180: LD_EXP 15
2184: PPUSH
2185: LD_INT 3
2187: PPUSH
2188: LD_INT 100
2190: PPUSH
2191: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2195: LD_EXP 16
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2210: LD_EXP 16
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 20
2220: PPUSH
2221: CALL_OW 291
// end ;
2225: LD_VAR 0 1
2229: RET
// export function PowellSupport2 ; var veh , un ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
2234: PPUSH
// uc_side = 1 ;
2235: LD_ADDR_OWVAR 20
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// uc_nation = 1 ;
2243: LD_ADDR_OWVAR 21
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2251: LD_ADDR_OWVAR 37
2255: PUSH
2256: LD_INT 2
2258: ST_TO_ADDR
// vc_engine = 3 ;
2259: LD_ADDR_OWVAR 39
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_control = 3 ;
2267: LD_ADDR_OWVAR 38
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2275: LD_ADDR_OWVAR 40
2279: PUSH
2280: LD_INT 3
2282: ST_TO_ADDR
// veh = CreateVehicle ;
2283: LD_ADDR_VAR 0 2
2287: PUSH
2288: CALL_OW 45
2292: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2293: LD_VAR 0 2
2297: PPUSH
2298: LD_INT 4
2300: PPUSH
2301: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2305: LD_VAR 0 2
2309: PPUSH
2310: LD_INT 4
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: CALL_OW 49
// vc_control = 1 ;
2320: LD_ADDR_OWVAR 38
2324: PUSH
2325: LD_INT 1
2327: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2328: LD_ADDR_OWVAR 37
2332: PUSH
2333: LD_INT 2
2335: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2336: LD_ADDR_OWVAR 40
2340: PUSH
2341: LD_INT 5
2343: ST_TO_ADDR
// veh = CreateVehicle ;
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: CALL_OW 45
2353: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2354: LD_VAR 0 2
2358: PPUSH
2359: LD_INT 4
2361: PPUSH
2362: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2366: LD_VAR 0 2
2370: PPUSH
2371: LD_INT 4
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2381: LD_STRING 11_Bobby
2383: PPUSH
2384: CALL_OW 28
2388: PUSH
2389: LD_INT 1
2391: EQUAL
2392: IFFALSE 2438
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2394: LD_ADDR_EXP 4
2398: PUSH
2399: LD_STRING 11_Bobby
2401: PPUSH
2402: LD_INT 1
2404: PPUSH
2405: CALL 13027 0 2
2409: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2410: LD_EXP 4
2414: PPUSH
2415: LD_INT 3
2417: PPUSH
2418: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2422: LD_EXP 4
2426: PPUSH
2427: LD_VAR 0 2
2431: PPUSH
2432: CALL_OW 52
// end else
2436: GO 2456
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2438: LD_INT 0
2440: PPUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_INT 2
2448: PPUSH
2449: LD_INT 0
2451: PPUSH
2452: CALL 1142 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2456: LD_STRING 11_Houten
2458: PPUSH
2459: CALL_OW 28
2463: PUSH
2464: LD_INT 1
2466: EQUAL
2467: IFFALSE 2514
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2469: LD_ADDR_EXP 9
2473: PUSH
2474: LD_STRING 11_Houten
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL 13027 0 2
2484: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2485: LD_EXP 9
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2497: LD_EXP 9
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL_OW 49
// end else
2512: GO 2530
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2514: LD_INT 4
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: CALL 1142 0 4
// end ; vc_control = 3 ;
2530: LD_ADDR_OWVAR 38
2534: PUSH
2535: LD_INT 3
2537: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2538: LD_ADDR_OWVAR 40
2542: PUSH
2543: LD_INT 12
2545: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2546: LD_ADDR_EXP 17
2550: PUSH
2551: CALL_OW 45
2555: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2556: LD_EXP 17
2560: PPUSH
2561: LD_INT 4
2563: PPUSH
2564: CALL_OW 233
// amCargo4 = CreateVehicle ;
2568: LD_ADDR_EXP 18
2572: PUSH
2573: CALL_OW 45
2577: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2578: LD_EXP 18
2582: PPUSH
2583: LD_INT 4
2585: PPUSH
2586: CALL_OW 233
// amCargo5 = CreateVehicle ;
2590: LD_ADDR_EXP 19
2594: PUSH
2595: CALL_OW 45
2599: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2600: LD_EXP 19
2604: PPUSH
2605: LD_INT 4
2607: PPUSH
2608: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2612: LD_EXP 17
2616: PPUSH
2617: LD_INT 4
2619: PPUSH
2620: LD_INT 0
2622: PPUSH
2623: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2627: LD_EXP 18
2631: PPUSH
2632: LD_INT 4
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2642: LD_EXP 19
2646: PPUSH
2647: LD_INT 4
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2657: LD_EXP 17
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 100
2667: PPUSH
2668: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2672: LD_EXP 18
2676: PPUSH
2677: LD_INT 1
2679: PPUSH
2680: LD_INT 100
2682: PPUSH
2683: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2687: LD_EXP 19
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: LD_INT 100
2697: PPUSH
2698: CALL_OW 291
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PowellSupport3 ; var veh , un ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// uc_side = 1 ;
2712: LD_ADDR_OWVAR 20
2716: PUSH
2717: LD_INT 1
2719: ST_TO_ADDR
// uc_nation = 1 ;
2720: LD_ADDR_OWVAR 21
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2728: LD_INT 4
2730: PPUSH
2731: LD_INT 0
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL 1142 0 4
// vc_chassis = us_medium_wheeled ;
2744: LD_ADDR_OWVAR 37
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// vc_engine = 3 ;
2752: LD_ADDR_OWVAR 39
2756: PUSH
2757: LD_INT 3
2759: ST_TO_ADDR
// vc_control = 3 ;
2760: LD_ADDR_OWVAR 38
2764: PUSH
2765: LD_INT 3
2767: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2768: LD_ADDR_OWVAR 40
2772: PUSH
2773: LD_INT 12
2775: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2776: LD_ADDR_EXP 20
2780: PUSH
2781: CALL_OW 45
2785: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2786: LD_ADDR_EXP 21
2790: PUSH
2791: CALL_OW 45
2795: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2796: LD_EXP 20
2800: PPUSH
2801: LD_INT 4
2803: PPUSH
2804: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2808: LD_EXP 21
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2820: LD_EXP 20
2824: PPUSH
2825: LD_INT 4
2827: PPUSH
2828: LD_INT 0
2830: PPUSH
2831: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2835: LD_EXP 21
2839: PPUSH
2840: LD_INT 4
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2850: LD_EXP 20
2854: PPUSH
2855: LD_INT 1
2857: PPUSH
2858: LD_INT 100
2860: PPUSH
2861: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2865: LD_EXP 21
2869: PPUSH
2870: LD_INT 3
2872: PPUSH
2873: LD_INT 100
2875: PPUSH
2876: CALL_OW 291
// end ; end_of_file
2880: LD_VAR 0 1
2884: RET
// export function PrepareRussianCommander ; begin
2885: LD_INT 0
2887: PPUSH
// uc_side = 3 ;
2888: LD_ADDR_OWVAR 20
2892: PUSH
2893: LD_INT 3
2895: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2896: LD_ADDR_EXP 23
2900: PUSH
2901: LD_STRING Davidov
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL 13027 0 2
2911: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2924: LD_ADDR_EXP 35
2928: PUSH
2929: LD_EXP 35
2933: PUSH
2934: LD_EXP 23
2938: ADD
2939: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2940: LD_EXP 35
2944: PPUSH
2945: LD_INT 4
2947: PPUSH
2948: CALL_OW 336
// end ;
2952: LD_VAR 0 1
2956: RET
// export function PrepareEastBase ; var i , un ; begin
2957: LD_INT 0
2959: PPUSH
2960: PPUSH
2961: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2962: LD_INT 3
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: LD_INT 121
2970: PPUSH
2971: LD_EXP 37
2975: PPUSH
2976: LD_EXP 38
2980: PPUSH
2981: CALL_OW 12
2985: PPUSH
2986: LD_INT 1
2988: PPUSH
2989: LD_INT 3
2991: PPUSH
2992: CALL 13819 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2996: LD_INT 3
2998: PPUSH
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 121
3004: PPUSH
3005: LD_EXP 37
3009: PPUSH
3010: LD_EXP 38
3014: PPUSH
3015: CALL_OW 12
3019: PPUSH
3020: LD_INT 9
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL 13819 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3030: LD_INT 3
3032: PPUSH
3033: LD_INT 3
3035: PPUSH
3036: LD_INT 4
3038: PPUSH
3039: LD_EXP 37
3043: PPUSH
3044: LD_EXP 38
3048: PPUSH
3049: CALL_OW 12
3053: PPUSH
3054: LD_INT 2
3056: PPUSH
3057: LD_INT 6
3059: PPUSH
3060: CALL 13819 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3064: LD_INT 3
3066: PPUSH
3067: LD_INT 3
3069: PPUSH
3070: LD_INT 112
3072: PPUSH
3073: LD_EXP 37
3077: PPUSH
3078: LD_EXP 38
3082: PPUSH
3083: CALL_OW 12
3087: PPUSH
3088: LD_INT 3
3090: PPUSH
3091: LD_INT 6
3093: PPUSH
3094: CALL 13819 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: LD_INT 47
3106: PPUSH
3107: LD_EXP 37
3111: PPUSH
3112: LD_EXP 38
3116: PPUSH
3117: CALL_OW 12
3121: PPUSH
3122: LD_INT 4
3124: PPUSH
3125: LD_INT 6
3127: PPUSH
3128: CALL 13819 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3132: LD_INT 3
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_INT 129
3140: PPUSH
3141: LD_EXP 37
3145: PPUSH
3146: LD_EXP 38
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: LD_INT 4
3158: PPUSH
3159: LD_INT 6
3161: PPUSH
3162: CALL 13819 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3166: LD_INT 3
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 135
3174: PPUSH
3175: LD_EXP 37
3179: PPUSH
3180: LD_EXP 38
3184: PPUSH
3185: CALL_OW 12
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: LD_INT 6
3195: PPUSH
3196: CALL 13819 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 30
3217: PUSH
3218: LD_INT 32
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PPUSH
3229: CALL_OW 69
3233: PUSH
3234: FOR_IN
3235: IFFALSE 3275
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_VAR 0 2
3247: PPUSH
3248: LD_EXP 37
3252: PPUSH
3253: LD_EXP 38
3257: PPUSH
3258: CALL_OW 12
3262: PPUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 13819 0 6
3273: GO 3234
3275: POP
3276: POP
// for i = 1 to 5 do
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_INT 5
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3390
// begin uc_side = 3 ;
3293: LD_ADDR_OWVAR 20
3297: PUSH
3298: LD_INT 3
3300: ST_TO_ADDR
// uc_nation = 3 ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 3
3308: ST_TO_ADDR
// hc_gallery =  ;
3309: LD_ADDR_OWVAR 33
3313: PUSH
3314: LD_STRING 
3316: ST_TO_ADDR
// hc_name =  ;
3317: LD_ADDR_OWVAR 26
3321: PUSH
3322: LD_STRING 
3324: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3325: LD_INT 0
3327: PPUSH
3328: LD_INT 4
3330: PPUSH
3331: LD_EXP 37
3335: PPUSH
3336: LD_EXP 38
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: CALL_OW 380
// un = CreateHuman ;
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: CALL_OW 44
3359: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3372: LD_ADDR_EXP 35
3376: PUSH
3377: LD_EXP 35
3381: PUSH
3382: LD_VAR 0 3
3386: ADD
3387: ST_TO_ADDR
// end ;
3388: GO 3290
3390: POP
3391: POP
// end ;
3392: LD_VAR 0 1
3396: RET
// export function PrepareWestBase ; var i , un ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
3401: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3402: LD_INT 3
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 6
3410: PPUSH
3411: LD_EXP 37
3415: PPUSH
3416: LD_EXP 38
3420: PPUSH
3421: CALL_OW 12
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: LD_INT 3
3431: PPUSH
3432: CALL 13819 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3436: LD_INT 3
3438: PPUSH
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 91
3444: PPUSH
3445: LD_EXP 37
3449: PPUSH
3450: LD_EXP 38
3454: PPUSH
3455: CALL_OW 12
3459: PPUSH
3460: LD_INT 4
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: CALL 13819 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 21
3478: PPUSH
3479: LD_EXP 37
3483: PPUSH
3484: LD_EXP 38
3488: PPUSH
3489: CALL_OW 12
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: LD_INT 6
3499: PPUSH
3500: CALL 13819 0 6
// end ;
3504: LD_VAR 0 1
3508: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3509: LD_INT 0
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
// uc_side = 3 ;
3515: LD_ADDR_OWVAR 20
3519: PUSH
3520: LD_INT 3
3522: ST_TO_ADDR
// uc_nation = 3 ;
3523: LD_ADDR_OWVAR 21
3527: PUSH
3528: LD_INT 3
3530: ST_TO_ADDR
// for i = 1 to 5 do
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: DOUBLE
3537: LD_INT 1
3539: DEC
3540: ST_TO_ADDR
3541: LD_INT 5
3543: PUSH
3544: FOR_TO
3545: IFFALSE 3615
// begin hc_gallery =  ;
3547: LD_ADDR_OWVAR 33
3551: PUSH
3552: LD_STRING 
3554: ST_TO_ADDR
// hc_name =  ;
3555: LD_ADDR_OWVAR 26
3559: PUSH
3560: LD_STRING 
3562: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 9
3568: PPUSH
3569: LD_EXP 37
3573: PPUSH
3574: LD_EXP 38
3578: PPUSH
3579: CALL_OW 12
3583: PPUSH
3584: CALL_OW 380
// un = CreateHuman ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: CALL_OW 44
3597: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: LD_INT 0
3608: PPUSH
3609: CALL_OW 49
// end ;
3613: GO 3544
3615: POP
3616: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3617: LD_ADDR_VAR 0 2
3621: PUSH
3622: DOUBLE
3623: LD_INT 1
3625: DEC
3626: ST_TO_ADDR
3627: LD_INT 2
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: LD_OWVAR 67
3645: ARRAY
3646: PUSH
3647: FOR_TO
3648: IFFALSE 3718
// begin hc_gallery =  ;
3650: LD_ADDR_OWVAR 33
3654: PUSH
3655: LD_STRING 
3657: ST_TO_ADDR
// hc_name =  ;
3658: LD_ADDR_OWVAR 26
3662: PUSH
3663: LD_STRING 
3665: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3666: LD_INT 0
3668: PPUSH
3669: LD_INT 4
3671: PPUSH
3672: LD_EXP 37
3676: PPUSH
3677: LD_EXP 38
3681: PPUSH
3682: CALL_OW 12
3686: PPUSH
3687: CALL_OW 380
// un = CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 8
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL_OW 49
// end ;
3716: GO 3647
3718: POP
3719: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3720: LD_ADDR_VAR 0 2
3724: PUSH
3725: DOUBLE
3726: LD_INT 1
3728: DEC
3729: ST_TO_ADDR
3730: LD_INT 3
3732: PUSH
3733: LD_INT 4
3735: PUSH
3736: LD_INT 5
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3947
// begin vc_engine = 3 ;
3753: LD_ADDR_OWVAR 39
3757: PUSH
3758: LD_INT 3
3760: ST_TO_ADDR
// vc_control = 1 ;
3761: LD_ADDR_OWVAR 38
3765: PUSH
3766: LD_INT 1
3768: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3769: LD_ADDR_OWVAR 40
3773: PUSH
3774: LD_INT 42
3776: PUSH
3777: LD_INT 43
3779: PUSH
3780: LD_INT 44
3782: PUSH
3783: LD_INT 45
3785: PUSH
3786: LD_INT 46
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 5
3801: PPUSH
3802: CALL_OW 12
3806: ARRAY
3807: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 46
3815: EQUAL
3816: IFFALSE 3828
// vc_chassis = ru_heavy_tracked else
3818: LD_ADDR_OWVAR 37
3822: PUSH
3823: LD_INT 24
3825: ST_TO_ADDR
3826: GO 3855
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3828: LD_ADDR_OWVAR 37
3832: PUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 21
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: ST_TO_ADDR
// veh = CreateVehicle ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: CALL_OW 45
3864: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3865: LD_VAR 0 4
3869: PPUSH
3870: LD_INT 3
3872: PPUSH
3873: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3877: LD_VAR 0 4
3881: PPUSH
3882: LD_INT 5
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 49
// hc_gallery =  ;
3892: LD_ADDR_OWVAR 33
3896: PUSH
3897: LD_STRING 
3899: ST_TO_ADDR
// hc_name =  ;
3900: LD_ADDR_OWVAR 26
3904: PUSH
3905: LD_STRING 
3907: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 3
3913: PPUSH
3914: LD_INT 10
3916: PPUSH
3917: CALL_OW 380
// un = CreateHuman ;
3921: LD_ADDR_VAR 0 3
3925: PUSH
3926: CALL_OW 44
3930: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3931: LD_VAR 0 3
3935: PPUSH
3936: LD_VAR 0 4
3940: PPUSH
3941: CALL_OW 52
// end ;
3945: GO 3750
3947: POP
3948: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 3
3961: PUSH
3962: LD_INT 4
3964: PUSH
3965: LD_INT 5
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_OWVAR 67
3977: ARRAY
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4127
// begin vc_engine = 3 ;
3982: LD_ADDR_OWVAR 39
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// vc_control = 3 ;
3990: LD_ADDR_OWVAR 38
3994: PUSH
3995: LD_INT 3
3997: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3998: LD_ADDR_OWVAR 40
4002: PUSH
4003: LD_INT 42
4005: PUSH
4006: LD_INT 43
4008: PUSH
4009: LD_INT 44
4011: PUSH
4012: LD_INT 45
4014: PUSH
4015: LD_INT 46
4017: PUSH
4018: LD_INT 49
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: CALL_OW 12
4039: ARRAY
4040: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4041: LD_OWVAR 40
4045: PUSH
4046: LD_INT 46
4048: EQUAL
4049: IFFALSE 4061
// vc_chassis = ru_heavy_tracked else
4051: LD_ADDR_OWVAR 37
4055: PUSH
4056: LD_INT 24
4058: ST_TO_ADDR
4059: GO 4088
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4061: LD_ADDR_OWVAR 37
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 21
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 2
4081: PPUSH
4082: CALL_OW 12
4086: ARRAY
4087: ST_TO_ADDR
// veh = CreateVehicle ;
4088: LD_ADDR_VAR 0 4
4092: PUSH
4093: CALL_OW 45
4097: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4098: LD_VAR 0 4
4102: PPUSH
4103: LD_INT 3
4105: PPUSH
4106: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4110: LD_VAR 0 4
4114: PPUSH
4115: LD_INT 6
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 3979
4127: POP
4128: POP
// end ; end_of_file
4129: LD_VAR 0 1
4133: RET
// export function PrepareKurt ; begin
4134: LD_INT 0
4136: PPUSH
// uc_side = 8 ;
4137: LD_ADDR_OWVAR 20
4141: PUSH
4142: LD_INT 8
4144: ST_TO_ADDR
// uc_nation = 2 ;
4145: LD_ADDR_OWVAR 21
4149: PUSH
4150: LD_INT 2
4152: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4153: LD_ADDR_OWVAR 37
4157: PUSH
4158: LD_INT 13
4160: ST_TO_ADDR
// vc_engine = 1 ;
4161: LD_ADDR_OWVAR 39
4165: PUSH
4166: LD_INT 1
4168: ST_TO_ADDR
// vc_control = 1 ;
4169: LD_ADDR_OWVAR 38
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// vc_weapon = 24 ;
4177: LD_ADDR_OWVAR 40
4181: PUSH
4182: LD_INT 24
4184: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4185: LD_ADDR_EXP 26
4189: PUSH
4190: CALL_OW 45
4194: ST_TO_ADDR
// if kurtStatus > 0 then
4195: LD_EXP 27
4199: PUSH
4200: LD_INT 0
4202: GREATER
4203: IFFALSE 4252
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4205: LD_ADDR_EXP 24
4209: PUSH
4210: LD_STRING Kurt
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: CALL 13027 0 2
4220: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4221: LD_EXP 26
4225: PPUSH
4226: LD_INT 4
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4236: LD_EXP 24
4240: PPUSH
4241: LD_EXP 26
4245: PPUSH
4246: CALL_OW 52
// end else
4250: GO 4317
// begin hc_name =  ;
4252: LD_ADDR_OWVAR 26
4256: PUSH
4257: LD_STRING 
4259: ST_TO_ADDR
// hc_gallery =  ;
4260: LD_ADDR_OWVAR 33
4264: PUSH
4265: LD_STRING 
4267: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4268: LD_INT 1
4270: PPUSH
4271: LD_INT 10
4273: PPUSH
4274: CALL_OW 381
// otherKurt = CreateHuman ;
4278: LD_ADDR_EXP 25
4282: PUSH
4283: CALL_OW 44
4287: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4288: LD_EXP 26
4292: PPUSH
4293: LD_INT 4
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4303: LD_EXP 25
4307: PPUSH
4308: LD_EXP 26
4312: PPUSH
4313: CALL_OW 52
// end ; end ;
4317: LD_VAR 0 1
4321: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4322: LD_INT 0
4324: PPUSH
4325: PPUSH
4326: PPUSH
4327: PPUSH
// for i = 1 to 3 do
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 3
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4479
// begin uc_side = 1 ;
4344: LD_ADDR_OWVAR 20
4348: PUSH
4349: LD_INT 1
4351: ST_TO_ADDR
// uc_nation = 2 ;
4352: LD_ADDR_OWVAR 21
4356: PUSH
4357: LD_INT 2
4359: ST_TO_ADDR
// hc_gallery =  ;
4360: LD_ADDR_OWVAR 33
4364: PUSH
4365: LD_STRING 
4367: ST_TO_ADDR
// hc_name =  ;
4368: LD_ADDR_OWVAR 26
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4376: LD_EXP 27
4380: PUSH
4381: LD_INT 0
4383: EQUAL
4384: PUSH
4385: LD_EXP 27
4389: PUSH
4390: LD_INT 2
4392: EQUAL
4393: OR
4394: IFFALSE 4419
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 1
4401: PPUSH
4402: LD_INT 2
4404: PPUSH
4405: LD_INT 4
4407: PPUSH
4408: CALL_OW 12
4412: PPUSH
4413: CALL_OW 380
4417: GO 4440
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4419: LD_INT 0
4421: PPUSH
4422: LD_INT 1
4424: PPUSH
4425: LD_INT 6
4427: PPUSH
4428: LD_INT 8
4430: PPUSH
4431: CALL_OW 12
4435: PPUSH
4436: CALL_OW 380
// un = CreateHuman ;
4440: LD_ADDR_VAR 0 3
4444: PUSH
4445: CALL_OW 44
4449: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4450: LD_VAR 0 3
4454: PPUSH
4455: LD_INT 4
4457: PPUSH
4458: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4462: LD_VAR 0 3
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 49
// end ;
4477: GO 4341
4479: POP
4480: POP
// vc_chassis = 14 ;
4481: LD_ADDR_OWVAR 37
4485: PUSH
4486: LD_INT 14
4488: ST_TO_ADDR
// vc_engine = 3 ;
4489: LD_ADDR_OWVAR 39
4493: PUSH
4494: LD_INT 3
4496: ST_TO_ADDR
// vc_control = 1 ;
4497: LD_ADDR_OWVAR 38
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4505: LD_ADDR_OWVAR 40
4509: PUSH
4510: LD_INT 27
4512: PUSH
4513: LD_INT 26
4515: PUSH
4516: LD_INT 28
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 1
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: CALL_OW 12
4534: ARRAY
4535: ST_TO_ADDR
// veh = CreateVehicle ;
4536: LD_ADDR_VAR 0 4
4540: PUSH
4541: CALL_OW 45
4545: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4546: LD_VAR 0 4
4550: PPUSH
4551: LD_INT 4
4553: PPUSH
4554: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4558: LD_VAR 0 4
4562: PPUSH
4563: LD_INT 4
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4573: LD_EXP 27
4577: PUSH
4578: LD_INT 0
4580: EQUAL
4581: PUSH
4582: LD_EXP 27
4586: PUSH
4587: LD_INT 2
4589: EQUAL
4590: OR
4591: IFFALSE 4616
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4593: LD_INT 0
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: LD_INT 2
4601: PPUSH
4602: LD_INT 4
4604: PPUSH
4605: CALL_OW 12
4609: PPUSH
4610: CALL_OW 380
4614: GO 4637
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4616: LD_INT 0
4618: PPUSH
4619: LD_INT 3
4621: PPUSH
4622: LD_INT 6
4624: PPUSH
4625: LD_INT 8
4627: PPUSH
4628: CALL_OW 12
4632: PPUSH
4633: CALL_OW 380
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_VAR 0 4
4656: PPUSH
4657: CALL_OW 52
// vc_chassis = 14 ;
4661: LD_ADDR_OWVAR 37
4665: PUSH
4666: LD_INT 14
4668: ST_TO_ADDR
// vc_engine = 3 ;
4669: LD_ADDR_OWVAR 39
4673: PUSH
4674: LD_INT 3
4676: ST_TO_ADDR
// vc_control = 1 ;
4677: LD_ADDR_OWVAR 38
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4685: LD_ADDR_OWVAR 40
4689: PUSH
4690: LD_INT 27
4692: PUSH
4693: LD_INT 26
4695: PUSH
4696: LD_INT 28
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 3
4709: PPUSH
4710: CALL_OW 12
4714: ARRAY
4715: ST_TO_ADDR
// veh = CreateVehicle ;
4716: LD_ADDR_VAR 0 4
4720: PUSH
4721: CALL_OW 45
4725: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_INT 4
4733: PPUSH
4734: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4738: LD_VAR 0 4
4742: PPUSH
4743: LD_INT 4
4745: PPUSH
4746: LD_INT 0
4748: PPUSH
4749: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4753: LD_EXP 27
4757: PUSH
4758: LD_INT 0
4760: EQUAL
4761: PUSH
4762: LD_EXP 27
4766: PUSH
4767: LD_INT 2
4769: EQUAL
4770: OR
4771: IFFALSE 4796
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4773: LD_INT 0
4775: PPUSH
4776: LD_INT 4
4778: PPUSH
4779: LD_INT 2
4781: PPUSH
4782: LD_INT 4
4784: PPUSH
4785: CALL_OW 12
4789: PPUSH
4790: CALL_OW 380
4794: GO 4817
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4796: LD_INT 0
4798: PPUSH
4799: LD_INT 4
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 8
4807: PPUSH
4808: CALL_OW 12
4812: PPUSH
4813: CALL_OW 380
// un = CreateHuman ;
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: CALL_OW 44
4826: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4839: LD_VAR 0 3
4843: PPUSH
4844: LD_VAR 0 4
4848: PPUSH
4849: CALL_OW 52
// vc_chassis = 14 ;
4853: LD_ADDR_OWVAR 37
4857: PUSH
4858: LD_INT 14
4860: ST_TO_ADDR
// vc_engine = 3 ;
4861: LD_ADDR_OWVAR 39
4865: PUSH
4866: LD_INT 3
4868: ST_TO_ADDR
// vc_control = 1 ;
4869: LD_ADDR_OWVAR 38
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4877: LD_ADDR_OWVAR 40
4881: PUSH
4882: LD_INT 27
4884: PUSH
4885: LD_INT 26
4887: PUSH
4888: LD_INT 28
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 1
4898: PPUSH
4899: LD_INT 3
4901: PPUSH
4902: CALL_OW 12
4906: ARRAY
4907: ST_TO_ADDR
// veh = CreateVehicle ;
4908: LD_ADDR_VAR 0 4
4912: PUSH
4913: CALL_OW 45
4917: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4918: LD_VAR 0 4
4922: PPUSH
4923: LD_INT 4
4925: PPUSH
4926: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4930: LD_VAR 0 4
4934: PPUSH
4935: LD_INT 4
4937: PPUSH
4938: LD_INT 0
4940: PPUSH
4941: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4945: LD_EXP 27
4949: PUSH
4950: LD_INT 0
4952: EQUAL
4953: PUSH
4954: LD_EXP 27
4958: PUSH
4959: LD_INT 2
4961: EQUAL
4962: OR
4963: IFFALSE 4988
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4965: LD_INT 0
4967: PPUSH
4968: LD_INT 2
4970: PPUSH
4971: LD_INT 2
4973: PPUSH
4974: LD_INT 4
4976: PPUSH
4977: CALL_OW 12
4981: PPUSH
4982: CALL_OW 380
4986: GO 5009
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4988: LD_INT 0
4990: PPUSH
4991: LD_INT 2
4993: PPUSH
4994: LD_INT 6
4996: PPUSH
4997: LD_INT 8
4999: PPUSH
5000: CALL_OW 12
5004: PPUSH
5005: CALL_OW 380
// un = CreateHuman ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5019: LD_VAR 0 3
5023: PPUSH
5024: LD_INT 4
5026: PPUSH
5027: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_VAR 0 4
5040: PPUSH
5041: CALL_OW 52
// end ;
5045: LD_VAR 0 1
5049: RET
// export function PrepareAttackLegion ; var i , un ; begin
5050: LD_INT 0
5052: PPUSH
5053: PPUSH
5054: PPUSH
// for i = 1 to 4 do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_INT 4
5067: PUSH
5068: FOR_TO
5069: IFFALSE 5179
// begin uc_side = 8 ;
5071: LD_ADDR_OWVAR 20
5075: PUSH
5076: LD_INT 8
5078: ST_TO_ADDR
// uc_nation = 2 ;
5079: LD_ADDR_OWVAR 21
5083: PUSH
5084: LD_INT 2
5086: ST_TO_ADDR
// hc_gallery =  ;
5087: LD_ADDR_OWVAR 33
5091: PUSH
5092: LD_STRING 
5094: ST_TO_ADDR
// hc_name =  ;
5095: LD_ADDR_OWVAR 26
5099: PUSH
5100: LD_STRING 
5102: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5103: LD_INT 0
5105: PPUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 8
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: LD_INT 1
5118: PPUSH
5119: LD_INT 2
5121: PPUSH
5122: CALL_OW 12
5126: ARRAY
5127: PPUSH
5128: LD_INT 6
5130: PPUSH
5131: LD_INT 8
5133: PPUSH
5134: CALL_OW 12
5138: PPUSH
5139: CALL_OW 380
// un = CreateHuman ;
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: CALL_OW 44
5152: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5153: LD_VAR 0 3
5157: PPUSH
5158: LD_INT 19
5160: PPUSH
5161: LD_INT 0
5163: PPUSH
5164: CALL_OW 49
// ComCrawl ( un ) ;
5168: LD_VAR 0 3
5172: PPUSH
5173: CALL_OW 137
// end ;
5177: GO 5068
5179: POP
5180: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5181: LD_INT 1
5183: PPUSH
5184: LD_INT 8
5186: PPUSH
5187: LD_INT 2
5189: PPUSH
5190: LD_INT 1
5192: PPUSH
5193: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5197: LD_INT 20
5199: PPUSH
5200: LD_INT 3
5202: PPUSH
5203: CALL 16364 0 2
// end ; end_of_file
5207: LD_VAR 0 1
5211: RET
// every 1 do var i ;
5212: GO 5214
5214: DISABLE
5215: LD_INT 0
5217: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5218: LD_INT 10
5220: PPUSH
5221: LD_INT 122
5223: PPUSH
5224: LD_INT 145
5226: PPUSH
5227: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5231: LD_INT 137
5233: PPUSH
5234: LD_INT 84
5236: PPUSH
5237: LD_INT 61
5239: PPUSH
5240: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5244: LD_EXP 1
5248: PPUSH
5249: CALL_OW 310
5253: PPUSH
5254: CALL_OW 87
// InGameOn ;
5258: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5262: LD_INT 22
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PPUSH
5272: CALL_OW 69
5276: PPUSH
5277: LD_INT 130
5279: PPUSH
5280: LD_INT 103
5282: PPUSH
5283: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 114
5294: PPUSH
5295: LD_INT 102
5297: PPUSH
5298: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5302: LD_EXP 1
5306: PPUSH
5307: LD_STRING D1-JMM-1
5309: PPUSH
5310: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5314: LD_EXP 1
5318: PPUSH
5319: CALL_OW 310
5323: PPUSH
5324: CALL_OW 87
// if IsOk ( Donaldson ) then
5328: LD_EXP 3
5332: PPUSH
5333: CALL_OW 302
5337: IFFALSE 5417
// begin Say ( Donaldson , D1-Don-1 ) ;
5339: LD_EXP 3
5343: PPUSH
5344: LD_STRING D1-Don-1
5346: PPUSH
5347: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5351: LD_EXP 1
5355: PPUSH
5356: CALL_OW 310
5360: PPUSH
5361: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5365: LD_EXP 1
5369: PPUSH
5370: LD_STRING D1-JMM-2
5372: PPUSH
5373: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5377: LD_EXP 1
5381: PPUSH
5382: CALL_OW 310
5386: PPUSH
5387: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5391: LD_EXP 3
5395: PPUSH
5396: LD_STRING D1-Don-2
5398: PPUSH
5399: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5403: LD_EXP 1
5407: PPUSH
5408: CALL_OW 310
5412: PPUSH
5413: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5417: LD_INT 22
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 69
5431: PPUSH
5432: LD_INT 110
5434: PPUSH
5435: LD_INT 101
5437: PPUSH
5438: CALL_OW 171
// wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5449: LD_EXP 1
5453: PPUSH
5454: CALL_OW 310
5458: PPUSH
5459: CALL_OW 87
// wait ( 0 0$1 ) ;
5463: LD_INT 35
5465: PPUSH
5466: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5470: LD_EXP 1
5474: PPUSH
5475: CALL_OW 310
5479: PPUSH
5480: CALL_OW 87
// wait ( 0 0$1 ) ;
5484: LD_INT 35
5486: PPUSH
5487: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5491: LD_EXP 1
5495: PPUSH
5496: CALL_OW 310
5500: PPUSH
5501: CALL_OW 87
// wait ( 0 0$1 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5512: LD_EXP 1
5516: PPUSH
5517: CALL_OW 310
5521: PPUSH
5522: CALL_OW 87
// end ;
5526: PPOPN 1
5528: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5529: LD_INT 1
5531: PPUSH
5532: LD_INT 102
5534: PPUSH
5535: LD_INT 94
5537: PPUSH
5538: CALL_OW 293
5542: IFFALSE 5733
5544: GO 5546
5546: DISABLE
5547: LD_INT 0
5549: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5550: LD_INT 102
5552: PPUSH
5553: LD_INT 94
5555: PPUSH
5556: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5560: LD_INT 22
5562: PUSH
5563: LD_INT 1
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PUSH
5570: LD_INT 26
5572: PUSH
5573: LD_INT 1
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 2
5582: PUSH
5583: LD_INT 25
5585: PUSH
5586: LD_INT 1
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PUSH
5593: LD_INT 25
5595: PUSH
5596: LD_INT 2
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 25
5605: PUSH
5606: LD_INT 3
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 25
5615: PUSH
5616: LD_INT 4
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 5
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 69
5661: PPUSH
5662: LD_STRING D1-Sol1-2
5664: PPUSH
5665: LD_STRING 
5667: PPUSH
5668: CALL 13135 0 3
// Say ( JMM , D1-JMM-3 ) ;
5672: LD_EXP 1
5676: PPUSH
5677: LD_STRING D1-JMM-3
5679: PPUSH
5680: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5684: LD_STRING M1
5686: PPUSH
5687: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5691: LD_ADDR_VAR 0 1
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PPUSH
5706: CALL_OW 69
5710: PUSH
5711: FOR_IN
5712: IFFALSE 5731
// ComMoveXY ( i , 95 , 84 ) ;
5714: LD_VAR 0 1
5718: PPUSH
5719: LD_INT 95
5721: PPUSH
5722: LD_INT 84
5724: PPUSH
5725: CALL_OW 111
5729: GO 5711
5731: POP
5732: POP
// end ;
5733: PPOPN 1
5735: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_INT 8
5752: PPUSH
5753: LD_INT 22
5755: PUSH
5756: LD_INT 3
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 25
5765: PUSH
5766: LD_INT 9
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5782: LD_ADDR_VAR 0 3
5786: PUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PUSH
5797: EMPTY
5798: LIST
5799: PPUSH
5800: CALL_OW 69
5804: ST_TO_ADDR
// enable ;
5805: ENABLE
// for i in your_units do
5806: LD_ADDR_VAR 0 1
5810: PUSH
5811: LD_VAR 0 3
5815: PUSH
5816: FOR_IN
5817: IFFALSE 6465
// begin if See ( 3 , i ) then
5819: LD_INT 3
5821: PPUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 292
5831: IFFALSE 6463
// begin disable ;
5833: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5834: LD_VAR 0 2
5838: PPUSH
5839: LD_INT 96
5841: PPUSH
5842: LD_INT 85
5844: PPUSH
5845: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5849: LD_VAR 0 2
5853: PPUSH
5854: LD_INT 96
5856: PPUSH
5857: LD_INT 85
5859: PPUSH
5860: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5864: LD_VAR 0 2
5868: PPUSH
5869: LD_INT 96
5871: PPUSH
5872: LD_INT 85
5874: PPUSH
5875: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5879: LD_VAR 0 2
5883: PPUSH
5884: LD_INT 96
5886: PPUSH
5887: LD_INT 85
5889: PPUSH
5890: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 96
5901: PPUSH
5902: LD_INT 85
5904: PPUSH
5905: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5909: LD_VAR 0 2
5913: PPUSH
5914: LD_INT 96
5916: PPUSH
5917: LD_INT 85
5919: PPUSH
5920: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5924: LD_EXP 1
5928: PPUSH
5929: LD_STRING D1a-JMM-1
5931: PPUSH
5932: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5936: LD_EXP 3
5940: PPUSH
5941: LD_STRING D1a-Don-1
5943: PPUSH
5944: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5948: LD_ADDR_VAR 0 1
5952: PUSH
5953: LD_INT 22
5955: PUSH
5956: LD_INT 1
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PPUSH
5963: CALL_OW 69
5967: PUSH
5968: FOR_IN
5969: IFFALSE 5988
// ComMoveXY ( i , 109 , 102 ) ;
5971: LD_VAR 0 1
5975: PPUSH
5976: LD_INT 109
5978: PPUSH
5979: LD_INT 102
5981: PPUSH
5982: CALL_OW 111
5986: GO 5968
5988: POP
5989: POP
// Say ( JMM , D1a-JMM-2 ) ;
5990: LD_EXP 1
5994: PPUSH
5995: LD_STRING D1a-JMM-2
5997: PPUSH
5998: CALL_OW 88
// wait ( 0 0$10 ) ;
6002: LD_INT 350
6004: PPUSH
6005: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6009: LD_EXP 1
6013: PPUSH
6014: CALL_OW 310
6018: PPUSH
6019: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6023: LD_EXP 3
6027: PPUSH
6028: LD_STRING D1b-Don-1
6030: PPUSH
6031: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6035: LD_EXP 1
6039: PPUSH
6040: LD_STRING D1b-JMM-1
6042: PPUSH
6043: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6047: LD_INT 22
6049: PUSH
6050: LD_INT 1
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 26
6059: PUSH
6060: LD_INT 1
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 2
6069: PUSH
6070: LD_INT 25
6072: PUSH
6073: LD_INT 1
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 25
6082: PUSH
6083: LD_INT 2
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: LD_INT 25
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 25
6102: PUSH
6103: LD_INT 4
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 25
6112: PUSH
6113: LD_INT 5
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 25
6122: PUSH
6123: LD_INT 8
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: PPUSH
6144: CALL_OW 69
6148: PPUSH
6149: LD_STRING D1b-Sol1-1
6151: PPUSH
6152: LD_STRING 
6154: PPUSH
6155: CALL 13135 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6159: LD_EXP 3
6163: PPUSH
6164: LD_STRING D1b-Don-2
6166: PPUSH
6167: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6171: LD_EXP 1
6175: PPUSH
6176: LD_STRING D1b-JMM-2
6178: PPUSH
6179: CALL_OW 88
// dec = ShowQuery1 ;
6183: LD_ADDR_VAR 0 4
6187: PUSH
6188: CALL 13671 0 0
6192: ST_TO_ADDR
// if dec = 1 then
6193: LD_VAR 0 4
6197: PUSH
6198: LD_INT 1
6200: EQUAL
6201: IFFALSE 6307
// begin Say ( JMM , D2-JMM-1 ) ;
6203: LD_EXP 1
6207: PPUSH
6208: LD_STRING D2-JMM-1
6210: PPUSH
6211: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6215: LD_EXP 22
6219: PPUSH
6220: LD_STRING D2-Pow-1
6222: PPUSH
6223: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6227: LD_EXP 1
6231: PPUSH
6232: LD_STRING D2a-JMM-1
6234: PPUSH
6235: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6239: LD_EXP 22
6243: PPUSH
6244: LD_STRING D2a-Pow-1
6246: PPUSH
6247: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6251: LD_EXP 1
6255: PPUSH
6256: LD_STRING D2a-JMM-2
6258: PPUSH
6259: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6263: LD_EXP 22
6267: PPUSH
6268: LD_STRING D2a-Pow-2
6270: PPUSH
6271: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D2a-JMM-3
6282: PPUSH
6283: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6287: LD_EXP 22
6291: PPUSH
6292: LD_STRING D2a-Pow-3
6294: PPUSH
6295: CALL_OW 94
// secondPass = 2 ;
6299: LD_ADDR_EXP 28
6303: PUSH
6304: LD_INT 2
6306: ST_TO_ADDR
// end ; if dec = 2 then
6307: LD_VAR 0 4
6311: PUSH
6312: LD_INT 2
6314: EQUAL
6315: IFFALSE 6409
// begin Say ( JMM , D2-JMM-1 ) ;
6317: LD_EXP 1
6321: PPUSH
6322: LD_STRING D2-JMM-1
6324: PPUSH
6325: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6329: LD_EXP 22
6333: PPUSH
6334: LD_STRING D2-Pow-1
6336: PPUSH
6337: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6341: LD_EXP 1
6345: PPUSH
6346: LD_STRING D2b-JMM-1
6348: PPUSH
6349: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6353: LD_EXP 22
6357: PPUSH
6358: LD_STRING D2b-Pow-1
6360: PPUSH
6361: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6365: LD_EXP 1
6369: PPUSH
6370: LD_STRING D2c-JMM-1
6372: PPUSH
6373: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6377: LD_EXP 22
6381: PPUSH
6382: LD_STRING D2c-Pow-1
6384: PPUSH
6385: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6389: LD_EXP 1
6393: PPUSH
6394: LD_STRING D2c-JMM-2
6396: PPUSH
6397: CALL_OW 88
// secondPass = 2 ;
6401: LD_ADDR_EXP 28
6405: PUSH
6406: LD_INT 2
6408: ST_TO_ADDR
// end ; if dec = 3 then
6409: LD_VAR 0 4
6413: PUSH
6414: LD_INT 3
6416: EQUAL
6417: IFFALSE 6427
// secondPass = 1 ;
6419: LD_ADDR_EXP 28
6423: PUSH
6424: LD_INT 1
6426: ST_TO_ADDR
// InGameOff ;
6427: CALL_OW 9
// ruAI = 1 ;
6431: LD_ADDR_EXP 42
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6439: LD_INT 1
6441: PPUSH
6442: LD_INT 3
6444: PPUSH
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: CALL_OW 80
// SaveForQuickRestart ;
6455: CALL_OW 22
// exit ;
6459: POP
6460: POP
6461: GO 6467
// end ; end ;
6463: GO 5816
6465: POP
6466: POP
// end ;
6467: PPOPN 4
6469: END
// every 1 1$0 trigger secondPass = 2 do
6470: LD_EXP 28
6474: PUSH
6475: LD_INT 2
6477: EQUAL
6478: IFFALSE 6605
6480: GO 6482
6482: DISABLE
// begin PowellSupport1 ;
6483: CALL 1771 0 0
// DialogueOn ;
6487: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6491: LD_EXP 1
6495: PPUSH
6496: LD_STRING DC1-JMM-1
6498: PPUSH
6499: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6503: LD_EXP 22
6507: PPUSH
6508: LD_STRING DC1-Pow-1
6510: PPUSH
6511: CALL_OW 94
// DialogueOff ;
6515: CALL_OW 7
// wait ( 3 3$0 ) ;
6519: LD_INT 6300
6521: PPUSH
6522: CALL_OW 67
// PowellSupport2 ;
6526: CALL 2230 0 0
// DialogueOn ;
6530: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6534: LD_EXP 1
6538: PPUSH
6539: LD_STRING DC2-JMM-1
6541: PPUSH
6542: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6546: LD_EXP 22
6550: PPUSH
6551: LD_STRING DC2-Pow-1
6553: PPUSH
6554: CALL_OW 94
// DialogueOff ;
6558: CALL_OW 7
// wait ( 6 6$0 ) ;
6562: LD_INT 12600
6564: PPUSH
6565: CALL_OW 67
// PowellSupport3 ;
6569: CALL 2707 0 0
// DialogueOn ;
6573: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6577: LD_EXP 22
6581: PPUSH
6582: LD_STRING DC3-Pow-1
6584: PPUSH
6585: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6589: LD_EXP 1
6593: PPUSH
6594: LD_STRING DC3-JMM-1
6596: PPUSH
6597: CALL_OW 88
// DialogueOff ;
6601: CALL_OW 7
// end ;
6605: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6606: LD_EXP 28
6610: PUSH
6611: LD_INT 2
6613: EQUAL
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 2
6627: PUSH
6628: LD_INT 30
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 1
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL_OW 69
6661: PUSH
6662: LD_INT 0
6664: GREATER
6665: AND
6666: IFFALSE 10034
6668: GO 6670
6670: DISABLE
6671: LD_INT 0
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 22
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 21
6698: PUSH
6699: LD_INT 3
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 2
6708: PUSH
6709: LD_INT 30
6711: PUSH
6712: LD_INT 0
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 30
6721: PUSH
6722: LD_INT 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: PPUSH
6739: CALL_OW 69
6743: ST_TO_ADDR
// for i in tmp do
6744: LD_ADDR_VAR 0 1
6748: PUSH
6749: LD_VAR 0 4
6753: PUSH
6754: FOR_IN
6755: IFFALSE 6788
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6757: LD_ADDR_VAR 0 6
6761: PUSH
6762: LD_VAR 0 6
6766: PUSH
6767: LD_VAR 0 1
6771: PPUSH
6772: CALL_OW 274
6776: PPUSH
6777: LD_INT 1
6779: PPUSH
6780: CALL_OW 275
6784: PLUS
6785: ST_TO_ADDR
6786: GO 6754
6788: POP
6789: POP
// for i in tmp do
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: LD_VAR 0 4
6799: PUSH
6800: FOR_IN
6801: IFFALSE 6834
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6803: LD_ADDR_VAR 0 7
6807: PUSH
6808: LD_VAR 0 7
6812: PUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 274
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 275
6830: PLUS
6831: ST_TO_ADDR
6832: GO 6800
6834: POP
6835: POP
// for i in tmp do
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_VAR 0 4
6845: PUSH
6846: FOR_IN
6847: IFFALSE 6880
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6849: LD_ADDR_VAR 0 8
6853: PUSH
6854: LD_VAR 0 8
6858: PUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 274
6868: PPUSH
6869: LD_INT 3
6871: PPUSH
6872: CALL_OW 275
6876: PLUS
6877: ST_TO_ADDR
6878: GO 6846
6880: POP
6881: POP
// PrepareKurt ;
6882: CALL 4134 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6886: LD_EXP 26
6890: PPUSH
6891: LD_INT 144
6893: PPUSH
6894: LD_INT 111
6896: PPUSH
6897: CALL_OW 111
// wait ( 0 0$2 ) ;
6901: LD_INT 70
6903: PPUSH
6904: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6908: LD_INT 8
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 343
// if kurtStatus > 0 then
6918: LD_EXP 27
6922: PUSH
6923: LD_INT 0
6925: GREATER
6926: IFFALSE 8489
// begin ComExitVehicle ( Kurt ) ;
6928: LD_EXP 24
6932: PPUSH
6933: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6937: LD_EXP 24
6941: PPUSH
6942: CALL_OW 87
// wait ( 0 0$1 ) ;
6946: LD_INT 35
6948: PPUSH
6949: CALL_OW 67
// DialogueOn ;
6953: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6957: LD_INT 22
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 26
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 2
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 25
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 25
7002: PUSH
7003: LD_INT 3
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 25
7012: PUSH
7013: LD_INT 4
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 25
7022: PUSH
7023: LD_INT 5
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 25
7032: PUSH
7033: LD_INT 8
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PPUSH
7059: LD_STRING D3-Sol1-1
7061: PPUSH
7062: LD_STRING 
7064: PPUSH
7065: CALL 13135 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7069: LD_EXP 24
7073: PPUSH
7074: LD_STRING D3-Kurt-1
7076: PPUSH
7077: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7081: LD_EXP 1
7085: PPUSH
7086: LD_STRING D3-JMM-1
7088: PPUSH
7089: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7093: LD_EXP 24
7097: PPUSH
7098: LD_STRING D3-Kurt-2
7100: PPUSH
7101: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7105: LD_EXP 1
7109: PPUSH
7110: LD_STRING D3-JMM-2
7112: PPUSH
7113: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7117: LD_EXP 24
7121: PPUSH
7122: LD_STRING D3-Kurt-4
7124: PPUSH
7125: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7129: LD_EXP 1
7133: PPUSH
7134: LD_STRING D3-JMM-4
7136: PPUSH
7137: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7141: LD_EXP 24
7145: PPUSH
7146: LD_STRING D3-Kurt-5
7148: PPUSH
7149: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7153: LD_EXP 24
7157: PPUSH
7158: LD_STRING D3-Kurt-5a
7160: PPUSH
7161: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7165: LD_VAR 0 6
7169: PUSH
7170: LD_INT 60
7172: GREATEREQUAL
7173: PUSH
7174: LD_VAR 0 8
7178: PUSH
7179: LD_INT 60
7181: GREATEREQUAL
7182: AND
7183: IFFALSE 7218
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7185: LD_ADDR_VAR 0 2
7189: PUSH
7190: LD_STRING Q2K
7192: PPUSH
7193: LD_INT 1
7195: PUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 4
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: PPUSH
7211: CALL_OW 98
7215: ST_TO_ADDR
7216: GO 7241
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7218: LD_ADDR_VAR 0 2
7222: PUSH
7223: LD_STRING Q2K
7225: PPUSH
7226: LD_INT 3
7228: PUSH
7229: LD_INT 4
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 98
7240: ST_TO_ADDR
// if dec1 = 1 then
7241: LD_VAR 0 2
7245: PUSH
7246: LD_INT 1
7248: EQUAL
7249: IFFALSE 7283
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7251: LD_EXP 1
7255: PPUSH
7256: LD_STRING D3Ka-JMM-1
7258: PPUSH
7259: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7263: LD_EXP 24
7267: PPUSH
7268: LD_STRING D3Ka-Kurt-1
7270: PPUSH
7271: CALL_OW 88
// warWithLegion = 1 ;
7275: LD_ADDR_EXP 31
7279: PUSH
7280: LD_INT 1
7282: ST_TO_ADDR
// end ; if dec1 = 2 then
7283: LD_VAR 0 2
7287: PUSH
7288: LD_INT 2
7290: EQUAL
7291: IFFALSE 7517
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7293: LD_EXP 1
7297: PPUSH
7298: LD_STRING D3Kb-JMM-1
7300: PPUSH
7301: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7305: LD_EXP 24
7309: PPUSH
7310: LD_STRING D3Kb-Kurt-1
7312: PPUSH
7313: CALL_OW 88
// for i in tmp do
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: LD_VAR 0 4
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7415
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7330: LD_ADDR_VAR 0 5
7334: PUSH
7335: LD_VAR 0 1
7339: PPUSH
7340: CALL_OW 274
7344: PPUSH
7345: LD_INT 1
7347: PPUSH
7348: CALL_OW 275
7352: ST_TO_ADDR
// if tmp2 >= 60 then
7353: LD_VAR 0 5
7357: PUSH
7358: LD_INT 60
7360: GREATEREQUAL
7361: IFFALSE 7393
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7363: LD_VAR 0 1
7367: PPUSH
7368: CALL_OW 274
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_VAR 0 5
7380: PUSH
7381: LD_INT 60
7383: MINUS
7384: PPUSH
7385: CALL_OW 277
// break ;
7389: GO 7415
// end else
7391: GO 7413
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 274
7402: PPUSH
7403: LD_INT 1
7405: PPUSH
7406: LD_INT 0
7408: PPUSH
7409: CALL_OW 277
// end ; end ;
7413: GO 7327
7415: POP
7416: POP
// for i in tmp do
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: LD_VAR 0 4
7426: PUSH
7427: FOR_IN
7428: IFFALSE 7515
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7430: LD_ADDR_VAR 0 5
7434: PUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 274
7444: PPUSH
7445: LD_INT 3
7447: PPUSH
7448: CALL_OW 275
7452: ST_TO_ADDR
// if tmp2 >= 60 then
7453: LD_VAR 0 5
7457: PUSH
7458: LD_INT 60
7460: GREATEREQUAL
7461: IFFALSE 7493
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7463: LD_VAR 0 1
7467: PPUSH
7468: CALL_OW 274
7472: PPUSH
7473: LD_INT 3
7475: PPUSH
7476: LD_VAR 0 5
7480: PUSH
7481: LD_INT 60
7483: MINUS
7484: PPUSH
7485: CALL_OW 277
// break ;
7489: GO 7515
// end else
7491: GO 7513
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7493: LD_VAR 0 1
7497: PPUSH
7498: CALL_OW 274
7502: PPUSH
7503: LD_INT 3
7505: PPUSH
7506: LD_INT 0
7508: PPUSH
7509: CALL_OW 277
// end ; end ;
7513: GO 7427
7515: POP
7516: POP
// end ; if dec1 = 3 then
7517: LD_VAR 0 2
7521: PUSH
7522: LD_INT 3
7524: EQUAL
7525: IFFALSE 7760
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7527: LD_EXP 1
7531: PPUSH
7532: LD_STRING D3Kc1-JMM-1
7534: PPUSH
7535: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7539: LD_EXP 24
7543: PPUSH
7544: LD_STRING D3Kc1-Kurt-1
7546: PPUSH
7547: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7551: LD_EXP 1
7555: PPUSH
7556: LD_STRING D3Kc1-JMM-2
7558: PPUSH
7559: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7563: LD_EXP 24
7567: PPUSH
7568: LD_STRING D3Kc1-Kurt-2
7570: PPUSH
7571: CALL_OW 88
// askSiberite = 1 ;
7575: LD_ADDR_EXP 33
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7583: LD_ADDR_VAR 0 2
7587: PUSH
7588: LD_STRING Q2b
7590: PPUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 3
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
// if dec2 = 1 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 7652
// begin Say ( JMM , D4a-JMM-1 ) ;
7620: LD_EXP 1
7624: PPUSH
7625: LD_STRING D4a-JMM-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7632: LD_EXP 24
7636: PPUSH
7637: LD_STRING D4b-Kurt-1
7639: PPUSH
7640: CALL_OW 88
// warWithLegion = 1 ;
7644: LD_ADDR_EXP 31
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// end ; if dec2 = 2 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 2
7659: EQUAL
7660: IFFALSE 7694
// begin Say ( JMM , D4b-JMM-1 ) ;
7662: LD_EXP 1
7666: PPUSH
7667: LD_STRING D4b-JMM-1
7669: PPUSH
7670: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7674: LD_EXP 24
7678: PPUSH
7679: LD_STRING D4b-Kurt-1
7681: PPUSH
7682: CALL_OW 88
// warWithLegion = 1 ;
7686: LD_ADDR_EXP 31
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// end ; if dec2 = 3 then
7694: LD_VAR 0 3
7698: PUSH
7699: LD_INT 3
7701: EQUAL
7702: IFFALSE 7760
// begin Say ( JMM , D4c-JMM-1 ) ;
7704: LD_EXP 1
7708: PPUSH
7709: LD_STRING D4c-JMM-1
7711: PPUSH
7712: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7716: LD_EXP 24
7720: PPUSH
7721: LD_STRING D4c-Kurt-1
7723: PPUSH
7724: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7728: LD_EXP 1
7732: PPUSH
7733: LD_STRING D4c-JMM-2
7735: PPUSH
7736: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7740: LD_EXP 24
7744: PPUSH
7745: LD_STRING D4c-Kurt-2
7747: PPUSH
7748: CALL_OW 88
// fakeInfo = 1 ;
7752: LD_ADDR_EXP 32
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7760: LD_VAR 0 2
7764: PUSH
7765: LD_INT 4
7767: EQUAL
7768: IFFALSE 8425
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D3Kd-JMM-1
7777: PPUSH
7778: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7782: LD_VAR 0 6
7786: PUSH
7787: LD_INT 120
7789: GREATEREQUAL
7790: PUSH
7791: LD_VAR 0 8
7795: PUSH
7796: LD_INT 120
7798: GREATEREQUAL
7799: AND
7800: IFFALSE 7835
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_STRING Q2aK
7809: PPUSH
7810: LD_INT 1
7812: PUSH
7813: LD_INT 2
7815: PUSH
7816: LD_INT 3
7818: PUSH
7819: LD_INT 4
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 98
7832: ST_TO_ADDR
7833: GO 7858
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7835: LD_ADDR_VAR 0 3
7839: PUSH
7840: LD_STRING Q2K
7842: PPUSH
7843: LD_INT 1
7845: PUSH
7846: LD_INT 4
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PPUSH
7853: CALL_OW 98
7857: ST_TO_ADDR
// if dec2 = 1 then
7858: LD_VAR 0 3
7862: PUSH
7863: LD_INT 1
7865: EQUAL
7866: IFFALSE 7900
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7868: LD_EXP 1
7872: PPUSH
7873: LD_STRING D5Ka-JMM-1
7875: PPUSH
7876: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7880: LD_EXP 24
7884: PPUSH
7885: LD_STRING D5Ka-Kurt-1
7887: PPUSH
7888: CALL_OW 88
// warWithLegion = 1 ;
7892: LD_ADDR_EXP 31
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// end ; if dec2 = 2 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 2
7907: EQUAL
7908: IFFALSE 7934
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7910: LD_EXP 1
7914: PPUSH
7915: LD_STRING D3Kb-JMM-1
7917: PPUSH
7918: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7922: LD_EXP 24
7926: PPUSH
7927: LD_STRING D3Kb-Kurt-1
7929: PPUSH
7930: CALL_OW 88
// end ; if dec2 = 3 then
7934: LD_VAR 0 3
7938: PUSH
7939: LD_INT 3
7941: EQUAL
7942: IFFALSE 8172
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7944: LD_EXP 1
7948: PPUSH
7949: LD_STRING D3Ke-JMM-1
7951: PPUSH
7952: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7956: LD_EXP 24
7960: PPUSH
7961: LD_STRING D3Ke-Kurt-1
7963: PPUSH
7964: CALL_OW 88
// PrepareLegionForPlayer ;
7968: CALL 4322 0 0
// for i in tmp do
7972: LD_ADDR_VAR 0 1
7976: PUSH
7977: LD_VAR 0 4
7981: PUSH
7982: FOR_IN
7983: IFFALSE 8070
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7985: LD_ADDR_VAR 0 5
7989: PUSH
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 274
7999: PPUSH
8000: LD_INT 1
8002: PPUSH
8003: CALL_OW 275
8007: ST_TO_ADDR
// if tmp2 >= 120 then
8008: LD_VAR 0 5
8012: PUSH
8013: LD_INT 120
8015: GREATEREQUAL
8016: IFFALSE 8048
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 274
8027: PPUSH
8028: LD_INT 1
8030: PPUSH
8031: LD_VAR 0 5
8035: PUSH
8036: LD_INT 120
8038: MINUS
8039: PPUSH
8040: CALL_OW 277
// break ;
8044: GO 8070
// end else
8046: GO 8068
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 274
8057: PPUSH
8058: LD_INT 1
8060: PPUSH
8061: LD_INT 0
8063: PPUSH
8064: CALL_OW 277
// end ; end ;
8068: GO 7982
8070: POP
8071: POP
// for i in tmp do
8072: LD_ADDR_VAR 0 1
8076: PUSH
8077: LD_VAR 0 4
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8170
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8085: LD_ADDR_VAR 0 5
8089: PUSH
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 274
8099: PPUSH
8100: LD_INT 3
8102: PPUSH
8103: CALL_OW 275
8107: ST_TO_ADDR
// if tmp2 >= 120 then
8108: LD_VAR 0 5
8112: PUSH
8113: LD_INT 120
8115: GREATEREQUAL
8116: IFFALSE 8148
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8118: LD_VAR 0 1
8122: PPUSH
8123: CALL_OW 274
8127: PPUSH
8128: LD_INT 3
8130: PPUSH
8131: LD_VAR 0 5
8135: PUSH
8136: LD_INT 120
8138: MINUS
8139: PPUSH
8140: CALL_OW 277
// break ;
8144: GO 8170
// end else
8146: GO 8168
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8148: LD_VAR 0 1
8152: PPUSH
8153: CALL_OW 274
8157: PPUSH
8158: LD_INT 3
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: CALL_OW 277
// end ; end ;
8168: GO 8082
8170: POP
8171: POP
// end ; if dec2 = 4 then
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 4
8179: EQUAL
8180: IFFALSE 8425
// begin if dec1 = 3 then
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8425
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8192: LD_EXP 1
8196: PPUSH
8197: LD_STRING D3Kc1-JMM-1
8199: PPUSH
8200: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8204: LD_EXP 24
8208: PPUSH
8209: LD_STRING D3Kc1-Kurt-1
8211: PPUSH
8212: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D3Kc1-JMM-2
8223: PPUSH
8224: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8228: LD_EXP 24
8232: PPUSH
8233: LD_STRING D3Kc1-Kurt-2
8235: PPUSH
8236: CALL_OW 88
// askSiberite = 1 ;
8240: LD_ADDR_EXP 33
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8248: LD_ADDR_VAR 0 2
8252: PUSH
8253: LD_STRING Q2b
8255: PPUSH
8256: LD_INT 1
8258: PUSH
8259: LD_INT 2
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 98
8274: ST_TO_ADDR
// if dec2 = 1 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 1
8282: EQUAL
8283: IFFALSE 8317
// begin Say ( JMM , D4a-JMM-1 ) ;
8285: LD_EXP 1
8289: PPUSH
8290: LD_STRING D4a-JMM-1
8292: PPUSH
8293: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8297: LD_EXP 24
8301: PPUSH
8302: LD_STRING D4b-Kurt-1
8304: PPUSH
8305: CALL_OW 88
// warWithLegion = 1 ;
8309: LD_ADDR_EXP 31
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// end ; if dec2 = 2 then
8317: LD_VAR 0 3
8321: PUSH
8322: LD_INT 2
8324: EQUAL
8325: IFFALSE 8359
// begin Say ( JMM , D4b-JMM-1 ) ;
8327: LD_EXP 1
8331: PPUSH
8332: LD_STRING D4b-JMM-1
8334: PPUSH
8335: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8339: LD_EXP 24
8343: PPUSH
8344: LD_STRING D4b-Kurt-1
8346: PPUSH
8347: CALL_OW 88
// warWithLegion = 1 ;
8351: LD_ADDR_EXP 31
8355: PUSH
8356: LD_INT 1
8358: ST_TO_ADDR
// end ; if dec2 = 3 then
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 3
8366: EQUAL
8367: IFFALSE 8425
// begin Say ( JMM , D4c-JMM-1 ) ;
8369: LD_EXP 1
8373: PPUSH
8374: LD_STRING D4c-JMM-1
8376: PPUSH
8377: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_STRING D4c-Kurt-1
8388: PPUSH
8389: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8393: LD_EXP 1
8397: PPUSH
8398: LD_STRING D4c-JMM-2
8400: PPUSH
8401: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8405: LD_EXP 24
8409: PPUSH
8410: LD_STRING D4c-Kurt-2
8412: PPUSH
8413: CALL_OW 88
// fakeInfo = 1 ;
8417: LD_ADDR_EXP 32
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8425: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8429: LD_EXP 24
8433: PPUSH
8434: LD_EXP 26
8438: PPUSH
8439: CALL_OW 120
// wait ( 0 0$1 ) ;
8443: LD_INT 35
8445: PPUSH
8446: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8450: LD_EXP 26
8454: PPUSH
8455: LD_INT 4
8457: PPUSH
8458: CALL_OW 113
// wait ( 0 0$3 ) ;
8462: LD_INT 105
8464: PPUSH
8465: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8469: LD_EXP 24
8473: PPUSH
8474: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8478: LD_EXP 26
8482: PPUSH
8483: CALL_OW 64
// end else
8487: GO 10034
// begin ComExitVehicle ( otherKurt ) ;
8489: LD_EXP 25
8493: PPUSH
8494: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8498: LD_EXP 25
8502: PPUSH
8503: CALL_OW 87
// wait ( 0 0$1 ) ;
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 67
// DialogueOn ;
8514: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8518: LD_INT 22
8520: PUSH
8521: LD_INT 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 26
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 25
8543: PUSH
8544: LD_INT 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 25
8553: PUSH
8554: LD_INT 2
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 25
8563: PUSH
8564: LD_INT 3
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 25
8573: PUSH
8574: LD_INT 4
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: LD_INT 25
8583: PUSH
8584: LD_INT 5
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 25
8593: PUSH
8594: LD_INT 8
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: PPUSH
8620: LD_STRING D3-Sol1-1
8622: PPUSH
8623: LD_STRING 
8625: PPUSH
8626: CALL 13135 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8630: LD_EXP 25
8634: PPUSH
8635: LD_STRING D3-Kurt-1
8637: PPUSH
8638: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8642: LD_EXP 1
8646: PPUSH
8647: LD_STRING D3-JMM-1
8649: PPUSH
8650: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8654: LD_EXP 25
8658: PPUSH
8659: LD_STRING D3-Kurt-3
8661: PPUSH
8662: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8666: LD_EXP 1
8670: PPUSH
8671: LD_STRING D3-JMM-3
8673: PPUSH
8674: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8678: LD_EXP 25
8682: PPUSH
8683: LD_STRING D3-Kurt-5
8685: PPUSH
8686: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8690: LD_EXP 25
8694: PPUSH
8695: LD_STRING D3-Kurt-5b
8697: PPUSH
8698: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8702: LD_VAR 0 6
8706: PUSH
8707: LD_INT 100
8709: GREATEREQUAL
8710: PUSH
8711: LD_VAR 0 8
8715: PUSH
8716: LD_INT 100
8718: GREATEREQUAL
8719: AND
8720: IFFALSE 8755
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8722: LD_ADDR_VAR 0 2
8726: PUSH
8727: LD_STRING Q2
8729: PPUSH
8730: LD_INT 1
8732: PUSH
8733: LD_INT 2
8735: PUSH
8736: LD_INT 3
8738: PUSH
8739: LD_INT 4
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 98
8752: ST_TO_ADDR
8753: GO 8778
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8755: LD_ADDR_VAR 0 2
8759: PUSH
8760: LD_STRING Q2
8762: PPUSH
8763: LD_INT 3
8765: PUSH
8766: LD_INT 4
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PPUSH
8773: CALL_OW 98
8777: ST_TO_ADDR
// if dec1 = 1 then
8778: LD_VAR 0 2
8782: PUSH
8783: LD_INT 1
8785: EQUAL
8786: IFFALSE 8820
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8788: LD_EXP 1
8792: PPUSH
8793: LD_STRING D3Ka-JMM-1
8795: PPUSH
8796: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8800: LD_EXP 25
8804: PPUSH
8805: LD_STRING D3Ka-Kurt-1
8807: PPUSH
8808: CALL_OW 88
// warWithLegion = 1 ;
8812: LD_ADDR_EXP 31
8816: PUSH
8817: LD_INT 1
8819: ST_TO_ADDR
// end ; if dec1 = 2 then
8820: LD_VAR 0 2
8824: PUSH
8825: LD_INT 2
8827: EQUAL
8828: IFFALSE 9054
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8830: LD_EXP 1
8834: PPUSH
8835: LD_STRING D3Kb-JMM-1
8837: PPUSH
8838: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8842: LD_EXP 25
8846: PPUSH
8847: LD_STRING D3Kb-Kurt-1
8849: PPUSH
8850: CALL_OW 88
// for i in tmp do
8854: LD_ADDR_VAR 0 1
8858: PUSH
8859: LD_VAR 0 4
8863: PUSH
8864: FOR_IN
8865: IFFALSE 8952
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8867: LD_ADDR_VAR 0 5
8871: PUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 274
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 275
8889: ST_TO_ADDR
// if tmp2 >= 100 then
8890: LD_VAR 0 5
8894: PUSH
8895: LD_INT 100
8897: GREATEREQUAL
8898: IFFALSE 8930
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 274
8909: PPUSH
8910: LD_INT 1
8912: PPUSH
8913: LD_VAR 0 5
8917: PUSH
8918: LD_INT 100
8920: MINUS
8921: PPUSH
8922: CALL_OW 277
// break ;
8926: GO 8952
// end else
8928: GO 8950
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8930: LD_VAR 0 1
8934: PPUSH
8935: CALL_OW 274
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_INT 0
8945: PPUSH
8946: CALL_OW 277
// end ; end ;
8950: GO 8864
8952: POP
8953: POP
// for i in tmp do
8954: LD_ADDR_VAR 0 1
8958: PUSH
8959: LD_VAR 0 4
8963: PUSH
8964: FOR_IN
8965: IFFALSE 9052
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8967: LD_ADDR_VAR 0 5
8971: PUSH
8972: LD_VAR 0 1
8976: PPUSH
8977: CALL_OW 274
8981: PPUSH
8982: LD_INT 3
8984: PPUSH
8985: CALL_OW 275
8989: ST_TO_ADDR
// if tmp2 >= 100 then
8990: LD_VAR 0 5
8994: PUSH
8995: LD_INT 100
8997: GREATEREQUAL
8998: IFFALSE 9030
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 274
9009: PPUSH
9010: LD_INT 3
9012: PPUSH
9013: LD_VAR 0 5
9017: PUSH
9018: LD_INT 100
9020: MINUS
9021: PPUSH
9022: CALL_OW 277
// break ;
9026: GO 9052
// end else
9028: GO 9050
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 274
9039: PPUSH
9040: LD_INT 3
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 277
// end ; end ;
9050: GO 8964
9052: POP
9053: POP
// end ; if dec1 = 3 then
9054: LD_VAR 0 2
9058: PUSH
9059: LD_INT 3
9061: EQUAL
9062: IFFALSE 9297
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9064: LD_EXP 1
9068: PPUSH
9069: LD_STRING D3Kc1-JMM-1
9071: PPUSH
9072: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9076: LD_EXP 25
9080: PPUSH
9081: LD_STRING D3Kc1-Kurt-1
9083: PPUSH
9084: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9088: LD_EXP 1
9092: PPUSH
9093: LD_STRING D3Kc1-JMM-2
9095: PPUSH
9096: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9100: LD_EXP 25
9104: PPUSH
9105: LD_STRING D3Kc1-Kurt-2
9107: PPUSH
9108: CALL_OW 88
// askSiberite = 1 ;
9112: LD_ADDR_EXP 33
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9120: LD_ADDR_VAR 0 2
9124: PUSH
9125: LD_STRING Q2b
9127: PPUSH
9128: LD_INT 1
9130: PUSH
9131: LD_INT 2
9133: PUSH
9134: LD_INT 3
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 98
9146: ST_TO_ADDR
// if dec2 = 1 then
9147: LD_VAR 0 3
9151: PUSH
9152: LD_INT 1
9154: EQUAL
9155: IFFALSE 9189
// begin Say ( JMM , D4a-JMM-1 ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_STRING D4a-JMM-1
9164: PPUSH
9165: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9169: LD_EXP 25
9173: PPUSH
9174: LD_STRING D4b-Kurt-1
9176: PPUSH
9177: CALL_OW 88
// warWithLegion = 1 ;
9181: LD_ADDR_EXP 31
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// end ; if dec2 = 2 then
9189: LD_VAR 0 3
9193: PUSH
9194: LD_INT 2
9196: EQUAL
9197: IFFALSE 9231
// begin Say ( JMM , D4b-JMM-1 ) ;
9199: LD_EXP 1
9203: PPUSH
9204: LD_STRING D4b-JMM-1
9206: PPUSH
9207: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9211: LD_EXP 25
9215: PPUSH
9216: LD_STRING D4b-Kurt-1
9218: PPUSH
9219: CALL_OW 88
// warWithLegion = 1 ;
9223: LD_ADDR_EXP 31
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// end ; if dec2 = 3 then
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 3
9238: EQUAL
9239: IFFALSE 9297
// begin Say ( JMM , D4c-JMM-1 ) ;
9241: LD_EXP 1
9245: PPUSH
9246: LD_STRING D4c-JMM-1
9248: PPUSH
9249: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9253: LD_EXP 25
9257: PPUSH
9258: LD_STRING D4c-Kurt-1
9260: PPUSH
9261: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9265: LD_EXP 1
9269: PPUSH
9270: LD_STRING D4c-JMM-2
9272: PPUSH
9273: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9277: LD_EXP 25
9281: PPUSH
9282: LD_STRING D4c-Kurt-2
9284: PPUSH
9285: CALL_OW 88
// fakeInfo = 1 ;
9289: LD_ADDR_EXP 32
9293: PUSH
9294: LD_INT 1
9296: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9297: LD_VAR 0 2
9301: PUSH
9302: LD_INT 4
9304: EQUAL
9305: IFFALSE 9962
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9307: LD_EXP 1
9311: PPUSH
9312: LD_STRING D3Kd-JMM-1
9314: PPUSH
9315: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9319: LD_VAR 0 6
9323: PUSH
9324: LD_INT 200
9326: GREATEREQUAL
9327: PUSH
9328: LD_VAR 0 8
9332: PUSH
9333: LD_INT 200
9335: GREATEREQUAL
9336: AND
9337: IFFALSE 9372
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: LD_STRING Q2a
9346: PPUSH
9347: LD_INT 1
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: LD_INT 3
9355: PUSH
9356: LD_INT 4
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PPUSH
9365: CALL_OW 98
9369: ST_TO_ADDR
9370: GO 9395
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9372: LD_ADDR_VAR 0 3
9376: PUSH
9377: LD_STRING Q2a
9379: PPUSH
9380: LD_INT 1
9382: PUSH
9383: LD_INT 4
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 98
9394: ST_TO_ADDR
// if dec2 = 1 then
9395: LD_VAR 0 3
9399: PUSH
9400: LD_INT 1
9402: EQUAL
9403: IFFALSE 9437
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9405: LD_EXP 1
9409: PPUSH
9410: LD_STRING D5Ka-JMM-1
9412: PPUSH
9413: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9417: LD_EXP 25
9421: PPUSH
9422: LD_STRING D5Ka-Kurt-1
9424: PPUSH
9425: CALL_OW 88
// warWithLegion = 1 ;
9429: LD_ADDR_EXP 31
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// end ; if dec2 = 2 then
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 2
9444: EQUAL
9445: IFFALSE 9471
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9447: LD_EXP 1
9451: PPUSH
9452: LD_STRING D3Kb-JMM-1
9454: PPUSH
9455: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9459: LD_EXP 25
9463: PPUSH
9464: LD_STRING D3Kb-Kurt-1
9466: PPUSH
9467: CALL_OW 88
// end ; if dec2 = 3 then
9471: LD_VAR 0 3
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9709
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9481: LD_EXP 1
9485: PPUSH
9486: LD_STRING D3Ke-JMM-1
9488: PPUSH
9489: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9493: LD_EXP 25
9497: PPUSH
9498: LD_STRING D3Ke-Kurt-1
9500: PPUSH
9501: CALL_OW 88
// PrepareLegionForPlayer ;
9505: CALL 4322 0 0
// for i in tmp do
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_VAR 0 4
9518: PUSH
9519: FOR_IN
9520: IFFALSE 9607
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9522: LD_ADDR_VAR 0 5
9526: PUSH
9527: LD_VAR 0 1
9531: PPUSH
9532: CALL_OW 274
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 275
9544: ST_TO_ADDR
// if tmp2 >= 200 then
9545: LD_VAR 0 5
9549: PUSH
9550: LD_INT 200
9552: GREATEREQUAL
9553: IFFALSE 9585
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9555: LD_VAR 0 1
9559: PPUSH
9560: CALL_OW 274
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: LD_VAR 0 5
9572: PUSH
9573: LD_INT 200
9575: MINUS
9576: PPUSH
9577: CALL_OW 277
// break ;
9581: GO 9607
// end else
9583: GO 9605
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9585: LD_VAR 0 1
9589: PPUSH
9590: CALL_OW 274
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: LD_INT 0
9600: PPUSH
9601: CALL_OW 277
// end ; end ;
9605: GO 9519
9607: POP
9608: POP
// for i in tmp do
9609: LD_ADDR_VAR 0 1
9613: PUSH
9614: LD_VAR 0 4
9618: PUSH
9619: FOR_IN
9620: IFFALSE 9707
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9622: LD_ADDR_VAR 0 5
9626: PUSH
9627: LD_VAR 0 1
9631: PPUSH
9632: CALL_OW 274
9636: PPUSH
9637: LD_INT 3
9639: PPUSH
9640: CALL_OW 275
9644: ST_TO_ADDR
// if tmp2 >= 200 then
9645: LD_VAR 0 5
9649: PUSH
9650: LD_INT 200
9652: GREATEREQUAL
9653: IFFALSE 9685
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9655: LD_VAR 0 1
9659: PPUSH
9660: CALL_OW 274
9664: PPUSH
9665: LD_INT 3
9667: PPUSH
9668: LD_VAR 0 5
9672: PUSH
9673: LD_INT 200
9675: MINUS
9676: PPUSH
9677: CALL_OW 277
// break ;
9681: GO 9707
// end else
9683: GO 9705
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9685: LD_VAR 0 1
9689: PPUSH
9690: CALL_OW 274
9694: PPUSH
9695: LD_INT 3
9697: PPUSH
9698: LD_INT 0
9700: PPUSH
9701: CALL_OW 277
// end ; end ;
9705: GO 9619
9707: POP
9708: POP
// end ; if dec2 = 4 then
9709: LD_VAR 0 3
9713: PUSH
9714: LD_INT 4
9716: EQUAL
9717: IFFALSE 9962
// begin if dec1 = 3 then
9719: LD_VAR 0 2
9723: PUSH
9724: LD_INT 3
9726: EQUAL
9727: IFFALSE 9962
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9729: LD_EXP 1
9733: PPUSH
9734: LD_STRING D3Kc1-JMM-1
9736: PPUSH
9737: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9741: LD_EXP 25
9745: PPUSH
9746: LD_STRING D3Kc1-Kurt-1
9748: PPUSH
9749: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9753: LD_EXP 1
9757: PPUSH
9758: LD_STRING D3Kc1-JMM-2
9760: PPUSH
9761: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9765: LD_EXP 25
9769: PPUSH
9770: LD_STRING D3Kc1-Kurt-2
9772: PPUSH
9773: CALL_OW 88
// askSiberite = 1 ;
9777: LD_ADDR_EXP 33
9781: PUSH
9782: LD_INT 1
9784: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9785: LD_ADDR_VAR 0 2
9789: PUSH
9790: LD_STRING Q2b
9792: PPUSH
9793: LD_INT 1
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 98
9811: ST_TO_ADDR
// if dec2 = 1 then
9812: LD_VAR 0 3
9816: PUSH
9817: LD_INT 1
9819: EQUAL
9820: IFFALSE 9854
// begin Say ( JMM , D4a-JMM-1 ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_STRING D4a-JMM-1
9829: PPUSH
9830: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9834: LD_EXP 25
9838: PPUSH
9839: LD_STRING D4b-Kurt-1
9841: PPUSH
9842: CALL_OW 88
// warWithLegion = 1 ;
9846: LD_ADDR_EXP 31
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// end ; if dec2 = 2 then
9854: LD_VAR 0 3
9858: PUSH
9859: LD_INT 2
9861: EQUAL
9862: IFFALSE 9896
// begin Say ( JMM , D4b-JMM-1 ) ;
9864: LD_EXP 1
9868: PPUSH
9869: LD_STRING D4b-JMM-1
9871: PPUSH
9872: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9876: LD_EXP 25
9880: PPUSH
9881: LD_STRING D4b-Kurt-1
9883: PPUSH
9884: CALL_OW 88
// warWithLegion = 1 ;
9888: LD_ADDR_EXP 31
9892: PUSH
9893: LD_INT 1
9895: ST_TO_ADDR
// end ; if dec2 = 3 then
9896: LD_VAR 0 3
9900: PUSH
9901: LD_INT 3
9903: EQUAL
9904: IFFALSE 9962
// begin Say ( JMM , D4c-JMM-1 ) ;
9906: LD_EXP 1
9910: PPUSH
9911: LD_STRING D4c-JMM-1
9913: PPUSH
9914: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9918: LD_EXP 25
9922: PPUSH
9923: LD_STRING D4c-Kurt-1
9925: PPUSH
9926: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9930: LD_EXP 1
9934: PPUSH
9935: LD_STRING D4c-JMM-2
9937: PPUSH
9938: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9942: LD_EXP 25
9946: PPUSH
9947: LD_STRING D4c-Kurt-2
9949: PPUSH
9950: CALL_OW 88
// fakeInfo = 1 ;
9954: LD_ADDR_EXP 32
9958: PUSH
9959: LD_INT 1
9961: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9962: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9966: LD_INT 8
9968: PPUSH
9969: LD_INT 8
9971: PPUSH
9972: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9976: LD_EXP 25
9980: PPUSH
9981: LD_EXP 26
9985: PPUSH
9986: CALL_OW 120
// wait ( 0 0$1 ) ;
9990: LD_INT 35
9992: PPUSH
9993: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9997: LD_EXP 26
10001: PPUSH
10002: LD_INT 4
10004: PPUSH
10005: CALL_OW 113
// wait ( 0 0$6 ) ;
10009: LD_INT 210
10011: PPUSH
10012: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10016: LD_EXP 25
10020: PPUSH
10021: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10025: LD_EXP 26
10029: PPUSH
10030: CALL_OW 64
// end ; end ;
10034: PPOPN 8
10036: END
// every 0 0$10 trigger warWithLegion = 1 do
10037: LD_EXP 31
10041: PUSH
10042: LD_INT 1
10044: EQUAL
10045: IFFALSE 10054
10047: GO 10049
10049: DISABLE
// PrepareAttackLegion ;
10050: CALL 5050 0 0
10054: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10055: LD_EXP 15
10059: PPUSH
10060: CALL_OW 305
10064: PUSH
10065: LD_EXP 15
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: CALL_OW 289
10077: NOT
10078: AND
10079: PUSH
10080: LD_EXP 15
10084: PPUSH
10085: LD_INT 2
10087: PPUSH
10088: CALL_OW 289
10092: NOT
10093: AND
10094: PUSH
10095: LD_EXP 15
10099: PPUSH
10100: LD_INT 3
10102: PPUSH
10103: CALL_OW 289
10107: NOT
10108: AND
10109: IFFALSE 10126
10111: GO 10113
10113: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10114: LD_EXP 15
10118: PPUSH
10119: LD_INT 4
10121: PPUSH
10122: CALL_OW 235
10126: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10127: LD_EXP 16
10131: PPUSH
10132: CALL_OW 305
10136: PUSH
10137: LD_EXP 16
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 289
10149: NOT
10150: AND
10151: PUSH
10152: LD_EXP 16
10156: PPUSH
10157: LD_INT 2
10159: PPUSH
10160: CALL_OW 289
10164: NOT
10165: AND
10166: PUSH
10167: LD_EXP 16
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: CALL_OW 289
10179: NOT
10180: AND
10181: IFFALSE 10198
10183: GO 10185
10185: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10186: LD_EXP 16
10190: PPUSH
10191: LD_INT 4
10193: PPUSH
10194: CALL_OW 235
10198: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10199: LD_EXP 17
10203: PPUSH
10204: CALL_OW 305
10208: PUSH
10209: LD_EXP 17
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 289
10221: NOT
10222: AND
10223: PUSH
10224: LD_EXP 17
10228: PPUSH
10229: LD_INT 2
10231: PPUSH
10232: CALL_OW 289
10236: NOT
10237: AND
10238: PUSH
10239: LD_EXP 17
10243: PPUSH
10244: LD_INT 3
10246: PPUSH
10247: CALL_OW 289
10251: NOT
10252: AND
10253: IFFALSE 10270
10255: GO 10257
10257: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10258: LD_EXP 17
10262: PPUSH
10263: LD_INT 4
10265: PPUSH
10266: CALL_OW 235
10270: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10271: LD_EXP 18
10275: PPUSH
10276: CALL_OW 305
10280: PUSH
10281: LD_EXP 18
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 289
10293: NOT
10294: AND
10295: PUSH
10296: LD_EXP 18
10300: PPUSH
10301: LD_INT 2
10303: PPUSH
10304: CALL_OW 289
10308: NOT
10309: AND
10310: PUSH
10311: LD_EXP 18
10315: PPUSH
10316: LD_INT 3
10318: PPUSH
10319: CALL_OW 289
10323: NOT
10324: AND
10325: IFFALSE 10342
10327: GO 10329
10329: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10330: LD_EXP 18
10334: PPUSH
10335: LD_INT 4
10337: PPUSH
10338: CALL_OW 235
10342: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10343: LD_EXP 19
10347: PPUSH
10348: CALL_OW 305
10352: PUSH
10353: LD_EXP 19
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 289
10365: NOT
10366: AND
10367: PUSH
10368: LD_EXP 19
10372: PPUSH
10373: LD_INT 2
10375: PPUSH
10376: CALL_OW 289
10380: NOT
10381: AND
10382: PUSH
10383: LD_EXP 19
10387: PPUSH
10388: LD_INT 3
10390: PPUSH
10391: CALL_OW 289
10395: NOT
10396: AND
10397: PUSH
10398: LD_EXP 19
10402: PPUSH
10403: LD_INT 2
10405: PPUSH
10406: CALL_OW 289
10410: NOT
10411: AND
10412: IFFALSE 10429
10414: GO 10416
10416: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10417: LD_EXP 19
10421: PPUSH
10422: LD_INT 4
10424: PPUSH
10425: CALL_OW 235
10429: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10430: LD_EXP 20
10434: PPUSH
10435: CALL_OW 305
10439: PUSH
10440: LD_EXP 20
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 289
10452: NOT
10453: AND
10454: PUSH
10455: LD_EXP 20
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: CALL_OW 289
10467: NOT
10468: AND
10469: PUSH
10470: LD_EXP 20
10474: PPUSH
10475: LD_INT 3
10477: PPUSH
10478: CALL_OW 289
10482: NOT
10483: AND
10484: IFFALSE 10501
10486: GO 10488
10488: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10489: LD_EXP 20
10493: PPUSH
10494: LD_INT 4
10496: PPUSH
10497: CALL_OW 235
10501: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10502: LD_EXP 21
10506: PPUSH
10507: CALL_OW 305
10511: PUSH
10512: LD_EXP 21
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 289
10524: NOT
10525: AND
10526: PUSH
10527: LD_EXP 21
10531: PPUSH
10532: LD_INT 2
10534: PPUSH
10535: CALL_OW 289
10539: NOT
10540: AND
10541: PUSH
10542: LD_EXP 21
10546: PPUSH
10547: LD_INT 3
10549: PPUSH
10550: CALL_OW 289
10554: NOT
10555: AND
10556: IFFALSE 10573
10558: GO 10560
10560: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10561: LD_EXP 21
10565: PPUSH
10566: LD_INT 4
10568: PPUSH
10569: CALL_OW 235
10573: END
// every 0 0$1 do var i ;
10574: GO 10576
10576: DISABLE
10577: LD_INT 0
10579: PPUSH
// begin enable ;
10580: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10581: LD_ADDR_VAR 0 1
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_INT 4
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PPUSH
10596: CALL_OW 69
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10641
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 4
10611: PPUSH
10612: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_INT 4
10623: PPUSH
10624: CALL_OW 308
10628: IFFALSE 10639
// RemoveUnit ( i ) ;
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 64
// end ;
10639: GO 10601
10641: POP
10642: POP
// end ;
10643: PPOPN 1
10645: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10646: LD_EXP 28
10650: PUSH
10651: LD_INT 1
10653: EQUAL
10654: IFFALSE 11093
10656: GO 10658
10658: DISABLE
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// begin enable ;
10664: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_INT 12
10672: PPUSH
10673: LD_INT 22
10675: PUSH
10676: LD_INT 3
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 21
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 70
10701: ST_TO_ADDR
// for i in enemyVehs do
10702: LD_ADDR_VAR 0 1
10706: PUSH
10707: LD_VAR 0 2
10711: PUSH
10712: FOR_IN
10713: IFFALSE 11091
// begin if See ( 1 , i ) then
10715: LD_INT 1
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 292
10727: IFFALSE 11089
// begin disable ;
10729: DISABLE
// DialogueOn ;
10730: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10743: LD_INT 22
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 26
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 25
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 25
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 25
10788: PUSH
10789: LD_INT 3
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 4
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 8
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: PPUSH
10840: CALL_OW 69
10844: PPUSH
10845: LD_STRING DT1-Sol1-1
10847: PPUSH
10848: LD_STRING DT1-FSol1-1
10850: PPUSH
10851: CALL 13135 0 3
// dec = ShowQuery2 ;
10855: LD_ADDR_VAR 0 3
10859: PUSH
10860: CALL 13745 0 0
10864: ST_TO_ADDR
// if dec = 1 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 1
10872: EQUAL
10873: IFFALSE 10979
// begin Say ( JMM , D2-JMM-1 ) ;
10875: LD_EXP 1
10879: PPUSH
10880: LD_STRING D2-JMM-1
10882: PPUSH
10883: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10887: LD_EXP 22
10891: PPUSH
10892: LD_STRING D2-Pow-1
10894: PPUSH
10895: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10899: LD_EXP 1
10903: PPUSH
10904: LD_STRING D2a-JMM-1
10906: PPUSH
10907: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10911: LD_EXP 22
10915: PPUSH
10916: LD_STRING D2a-Pow-1
10918: PPUSH
10919: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10923: LD_EXP 1
10927: PPUSH
10928: LD_STRING D2a-JMM-2
10930: PPUSH
10931: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10935: LD_EXP 22
10939: PPUSH
10940: LD_STRING D2a-Pow-2
10942: PPUSH
10943: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10947: LD_EXP 1
10951: PPUSH
10952: LD_STRING D2a-JMM-3
10954: PPUSH
10955: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10959: LD_EXP 22
10963: PPUSH
10964: LD_STRING D2a-Pow-3
10966: PPUSH
10967: CALL_OW 94
// secondPass = 2 ;
10971: LD_ADDR_EXP 28
10975: PUSH
10976: LD_INT 2
10978: ST_TO_ADDR
// end ; if dec = 2 then
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 2
10986: EQUAL
10987: IFFALSE 11081
// begin Say ( JMM , D2-JMM-1 ) ;
10989: LD_EXP 1
10993: PPUSH
10994: LD_STRING D2-JMM-1
10996: PPUSH
10997: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11001: LD_EXP 22
11005: PPUSH
11006: LD_STRING D2-Pow-1
11008: PPUSH
11009: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11013: LD_EXP 1
11017: PPUSH
11018: LD_STRING D2b-JMM-1
11020: PPUSH
11021: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11025: LD_EXP 22
11029: PPUSH
11030: LD_STRING D2b-Pow-1
11032: PPUSH
11033: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11037: LD_EXP 1
11041: PPUSH
11042: LD_STRING D2c-JMM-1
11044: PPUSH
11045: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11049: LD_EXP 22
11053: PPUSH
11054: LD_STRING D2c-Pow-1
11056: PPUSH
11057: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11061: LD_EXP 1
11065: PPUSH
11066: LD_STRING D2c-JMM-2
11068: PPUSH
11069: CALL_OW 88
// secondPass = 2 ;
11073: LD_ADDR_EXP 28
11077: PUSH
11078: LD_INT 2
11080: ST_TO_ADDR
// end ; DialogueOff ;
11081: CALL_OW 7
// exit ;
11085: POP
11086: POP
11087: GO 11093
// end ; end ;
11089: GO 10712
11091: POP
11092: POP
// end ;
11093: PPOPN 3
11095: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11096: LD_EXP 29
11100: PUSH
11101: LD_INT 1
11103: EQUAL
11104: IFFALSE 11337
11106: GO 11108
11108: DISABLE
11109: LD_INT 0
11111: PPUSH
11112: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_INT 11
11120: PPUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 24
11133: PUSH
11134: LD_INT 250
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 70
11149: ST_TO_ADDR
// enable ;
11150: ENABLE
// for i in vehicles do
11151: LD_ADDR_VAR 0 1
11155: PUSH
11156: LD_VAR 0 2
11160: PUSH
11161: FOR_IN
11162: IFFALSE 11335
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11164: LD_INT 1
11166: PPUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL_OW 292
11176: PUSH
11177: LD_EXP 29
11181: PUSH
11182: LD_INT 1
11184: EQUAL
11185: AND
11186: PUSH
11187: LD_EXP 30
11191: PUSH
11192: LD_INT 4
11194: LESSEQUAL
11195: AND
11196: IFFALSE 11333
// begin disable ;
11198: DISABLE
// DialogueOn ;
11199: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11203: LD_INT 22
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 26
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 4
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 25
11268: PUSH
11269: LD_INT 5
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 25
11278: PUSH
11279: LD_INT 8
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: PPUSH
11300: CALL_OW 69
11304: PPUSH
11305: LD_STRING DT1-Sol1-1
11307: PPUSH
11308: LD_STRING DT1-FSol1-1
11310: PPUSH
11311: CALL 13135 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11315: LD_EXP 1
11319: PPUSH
11320: LD_STRING DT1-JMM-1
11322: PPUSH
11323: CALL_OW 88
// DialogueOff ;
11327: CALL_OW 7
// break ;
11331: GO 11335
// end ; end ;
11333: GO 11161
11335: POP
11336: POP
// end ;
11337: PPOPN 2
11339: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11340: LD_EXP 29
11344: PUSH
11345: LD_INT 1
11347: EQUAL
11348: PUSH
11349: LD_INT 11
11351: PPUSH
11352: LD_INT 22
11354: PUSH
11355: LD_INT 3
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 24
11364: PUSH
11365: LD_INT 251
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 21
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 21
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PPUSH
11405: CALL_OW 70
11409: PUSH
11410: LD_INT 0
11412: EQUAL
11413: AND
11414: PUSH
11415: LD_EXP 30
11419: PUSH
11420: LD_INT 3
11422: PUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 4
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: LD_OWVAR 67
11438: ARRAY
11439: LESSEQUAL
11440: AND
11441: PUSH
11442: LD_EXP 30
11446: PUSH
11447: LD_INT 5
11449: GREATER
11450: AND
11451: IFFALSE 11608
11453: GO 11455
11455: DISABLE
// begin vehicleTeleported = 2 ;
11456: LD_ADDR_EXP 29
11460: PUSH
11461: LD_INT 2
11463: ST_TO_ADDR
// DialogueOn ;
11464: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11468: LD_EXP 1
11472: PPUSH
11473: LD_STRING DT1a-JMM-1
11475: PPUSH
11476: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11480: LD_INT 22
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 26
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 3
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 4
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 25
11545: PUSH
11546: LD_INT 5
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 25
11555: PUSH
11556: LD_INT 8
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: PPUSH
11577: CALL_OW 69
11581: PPUSH
11582: LD_STRING DT1a-Sol1-1
11584: PPUSH
11585: LD_STRING DT1a-FSol1-1
11587: PPUSH
11588: CALL 13135 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11592: LD_EXP 1
11596: PPUSH
11597: LD_STRING DT1a-JMM-2
11599: PPUSH
11600: CALL_OW 88
// DialogueOff ;
11604: CALL_OW 7
// end ;
11608: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11609: LD_EXP 29
11613: PUSH
11614: LD_INT 3
11616: EQUAL
11617: PUSH
11618: LD_EXP 30
11622: PUSH
11623: LD_INT 4
11625: GREATER
11626: AND
11627: IFFALSE 11838
11629: GO 11631
11631: DISABLE
11632: LD_INT 0
11634: PPUSH
11635: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11636: LD_ADDR_VAR 0 2
11640: PUSH
11641: LD_INT 11
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 24
11656: PUSH
11657: LD_INT 250
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 70
11672: ST_TO_ADDR
// enable ;
11673: ENABLE
// for i in vehicles do
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_VAR 0 2
11683: PUSH
11684: FOR_IN
11685: IFFALSE 11836
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11687: LD_INT 1
11689: PPUSH
11690: LD_VAR 0 1
11694: PPUSH
11695: CALL_OW 292
11699: PUSH
11700: LD_EXP 29
11704: PUSH
11705: LD_INT 3
11707: EQUAL
11708: AND
11709: IFFALSE 11834
// begin disable ;
11711: DISABLE
// DialogueOn ;
11712: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11716: LD_INT 22
11718: PUSH
11719: LD_INT 1
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 26
11728: PUSH
11729: LD_INT 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 2
11738: PUSH
11739: LD_INT 25
11741: PUSH
11742: LD_INT 1
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 25
11761: PUSH
11762: LD_INT 3
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 4
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 25
11781: PUSH
11782: LD_INT 5
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 25
11791: PUSH
11792: LD_INT 8
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 69
11817: PPUSH
11818: LD_STRING DT2-Sol1-1
11820: PPUSH
11821: LD_STRING DT2-FSol1-1
11823: PPUSH
11824: CALL 13135 0 3
// DialogueOff ;
11828: CALL_OW 7
// break ;
11832: GO 11836
// end ; end ;
11834: GO 11684
11836: POP
11837: POP
// end ;
11838: PPOPN 2
11840: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11841: LD_EXP 29
11845: PUSH
11846: LD_INT 3
11848: EQUAL
11849: PUSH
11850: LD_INT 11
11852: PPUSH
11853: LD_INT 22
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: LD_INT 24
11865: PUSH
11866: LD_INT 251
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 21
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 0
11913: EQUAL
11914: AND
11915: PUSH
11916: LD_EXP 30
11920: PUSH
11921: LD_INT 6
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 8
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: LD_OWVAR 67
11939: ARRAY
11940: EQUAL
11941: AND
11942: IFFALSE 12099
11944: GO 11946
11946: DISABLE
// begin vehicleTeleported = 4 ;
11947: LD_ADDR_EXP 29
11951: PUSH
11952: LD_INT 4
11954: ST_TO_ADDR
// DialogueOn ;
11955: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11959: LD_EXP 1
11963: PPUSH
11964: LD_STRING DT2a-JMM-1
11966: PPUSH
11967: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11971: LD_INT 22
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 26
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 25
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 25
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 25
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 5
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 25
12046: PUSH
12047: LD_INT 8
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 69
12072: PPUSH
12073: LD_STRING DT2a-Sol1-1
12075: PPUSH
12076: LD_STRING DT2a-FSol1-1
12078: PPUSH
12079: CALL 13135 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12083: LD_EXP 3
12087: PPUSH
12088: LD_STRING DT2a-Don-1
12090: PPUSH
12091: CALL_OW 88
// DialogueOff ;
12095: CALL_OW 7
// end ;
12099: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12100: LD_INT 1
12102: PPUSH
12103: LD_INT 45
12105: PPUSH
12106: LD_INT 74
12108: PPUSH
12109: CALL_OW 293
12113: IFFALSE 12281
12115: GO 12117
12117: DISABLE
// begin DialogueOn ;
12118: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12122: LD_INT 36
12124: PPUSH
12125: LD_INT 55
12127: PPUSH
12128: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12132: LD_INT 22
12134: PUSH
12135: LD_INT 1
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 26
12144: PUSH
12145: LD_INT 1
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: LD_INT 25
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 25
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 25
12177: PUSH
12178: LD_INT 3
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 25
12187: PUSH
12188: LD_INT 4
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 25
12197: PUSH
12198: LD_INT 5
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 8
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: LIST
12228: PPUSH
12229: CALL_OW 69
12233: PPUSH
12234: LD_STRING D5-Sol1-1
12236: PPUSH
12237: LD_STRING D5-FSol1-
12239: PPUSH
12240: CALL 13135 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12244: LD_EXP 31
12248: PUSH
12249: LD_INT 1
12251: EQUAL
12252: PUSH
12253: LD_EXP 3
12257: PPUSH
12258: CALL_OW 300
12262: AND
12263: IFFALSE 12277
// Say ( Donaldson , D5-Don-1 ) ;
12265: LD_EXP 3
12269: PPUSH
12270: LD_STRING D5-Don-1
12272: PPUSH
12273: CALL_OW 88
// DialogueOff ;
12277: CALL_OW 7
// end ;
12281: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12282: LD_INT 1
12284: PPUSH
12285: LD_INT 10
12287: PPUSH
12288: CALL_OW 292
12292: PUSH
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 137
12298: PPUSH
12299: CALL_OW 292
12303: OR
12304: IFFALSE 12448
12306: GO 12308
12308: DISABLE
// begin DialogueOn ;
12309: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12313: LD_INT 22
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 26
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 25
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 25
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 25
12358: PUSH
12359: LD_INT 3
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 25
12368: PUSH
12369: LD_INT 4
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 5
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 25
12388: PUSH
12389: LD_INT 8
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 69
12414: PPUSH
12415: LD_STRING DT3-Sol1-1
12417: PPUSH
12418: LD_STRING DT3-FSol1-1
12420: PPUSH
12421: CALL 13135 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12425: LD_EXP 1
12429: PPUSH
12430: LD_STRING DT3-JMM-1
12432: PPUSH
12433: CALL_OW 88
// DialogueOff ;
12437: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12441: LD_STRING M2
12443: PPUSH
12444: CALL_OW 337
// end ;
12448: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12449: LD_EXP 43
12453: PUSH
12454: LD_INT 0
12456: EQUAL
12457: IFFALSE 12540
12459: GO 12461
12461: DISABLE
12462: LD_INT 0
12464: PPUSH
// begin enable ;
12465: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12466: LD_ADDR_VAR 0 1
12470: PUSH
12471: LD_INT 10
12473: PPUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 3
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 58
12496: PUSH
12497: EMPTY
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 70
12509: PUSH
12510: FOR_IN
12511: IFFALSE 12538
// if GetLives ( i ) < 1000 then
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 256
12522: PUSH
12523: LD_INT 1000
12525: LESS
12526: IFFALSE 12536
// ruEscape = 1 ;
12528: LD_ADDR_EXP 43
12532: PUSH
12533: LD_INT 1
12535: ST_TO_ADDR
12536: GO 12510
12538: POP
12539: POP
// end ;
12540: PPOPN 1
12542: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12543: LD_INT 3
12545: PPUSH
12546: CALL_OW 303
12550: PUSH
12551: LD_INT 4
12553: PPUSH
12554: CALL_OW 303
12558: OR
12559: PUSH
12560: LD_INT 22
12562: PPUSH
12563: LD_INT 22
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 70
12577: PUSH
12578: LD_INT 0
12580: GREATER
12581: OR
12582: PUSH
12583: LD_EXP 43
12587: PUSH
12588: LD_INT 1
12590: EQUAL
12591: OR
12592: IFFALSE 12823
12594: GO 12596
12596: DISABLE
12597: LD_INT 0
12599: PPUSH
12600: PPUSH
12601: PPUSH
// begin ruAI = 0 ;
12602: LD_ADDR_EXP 42
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12610: LD_ADDR_VAR 0 3
12614: PUSH
12615: LD_INT 10
12617: PPUSH
12618: LD_INT 22
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 21
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 58
12640: PUSH
12641: EMPTY
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: PPUSH
12649: CALL_OW 70
12653: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12654: LD_EXP 35
12658: PPUSH
12659: CALL_OW 122
// wait ( 0 0$1 ) ;
12663: LD_INT 35
12665: PPUSH
12666: CALL_OW 67
// DialogueOn ;
12670: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12674: LD_EXP 1
12678: PPUSH
12679: LD_STRING D6-JMM-1
12681: PPUSH
12682: CALL_OW 88
// DialogueOff ;
12686: CALL_OW 7
// if vehs > 0 then
12690: LD_VAR 0 3
12694: PUSH
12695: LD_INT 0
12697: GREATER
12698: IFFALSE 12768
// for i := 1 to RuScientists do
12700: LD_ADDR_VAR 0 1
12704: PUSH
12705: DOUBLE
12706: LD_INT 1
12708: DEC
12709: ST_TO_ADDR
12710: LD_EXP 35
12714: PUSH
12715: FOR_TO
12716: IFFALSE 12764
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12718: LD_EXP 35
12722: PUSH
12723: LD_VAR 0 1
12727: ARRAY
12728: PPUSH
12729: LD_INT 3
12731: PUSH
12732: LD_INT 60
12734: PUSH
12735: EMPTY
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PPUSH
12742: CALL_OW 72
12746: PPUSH
12747: LD_VAR 0 3
12751: PUSH
12752: LD_VAR 0 1
12756: ARRAY
12757: PPUSH
12758: CALL_OW 120
12762: GO 12715
12764: POP
12765: POP
12766: GO 12823
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12768: LD_EXP 35
12772: PUSH
12773: LD_VAR 0 1
12777: ARRAY
12778: PPUSH
12779: LD_INT 3
12781: PUSH
12782: LD_INT 60
12784: PUSH
12785: EMPTY
12786: LIST
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 72
12796: PPUSH
12797: LD_INT 13
12799: PUSH
12800: LD_INT 14
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_INT 2
12812: PPUSH
12813: CALL_OW 12
12817: ARRAY
12818: PPUSH
12819: CALL_OW 113
// end ;
12823: PPOPN 3
12825: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
12826: LD_EXP 42
12830: PUSH
12831: LD_INT 0
12833: EQUAL
12834: IFFALSE 13024
12836: GO 12838
12838: DISABLE
12839: LD_INT 0
12841: PPUSH
12842: PPUSH
// begin enable ;
12843: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_INT 13
12851: PPUSH
12852: LD_INT 22
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: PPUSH
12865: CALL_OW 70
12869: PUSH
12870: FOR_IN
12871: IFFALSE 12932
// begin for j in RuScientists do
12873: LD_ADDR_VAR 0 2
12877: PUSH
12878: LD_EXP 35
12882: PUSH
12883: FOR_IN
12884: IFFALSE 12919
// if j = i then
12886: LD_VAR 0 2
12890: PUSH
12891: LD_VAR 0 1
12895: EQUAL
12896: IFFALSE 12917
// RuScientists = RuScientists diff [ i ] ;
12898: LD_ADDR_EXP 35
12902: PUSH
12903: LD_EXP 35
12907: PUSH
12908: LD_VAR 0 1
12912: PUSH
12913: EMPTY
12914: LIST
12915: DIFF
12916: ST_TO_ADDR
12917: GO 12883
12919: POP
12920: POP
// RemoveUnit ( i ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 64
// end ;
12930: GO 12870
12932: POP
12933: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_INT 14
12941: PPUSH
12942: LD_INT 22
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: PPUSH
12955: CALL_OW 70
12959: PUSH
12960: FOR_IN
12961: IFFALSE 13022
// begin for j in RuScientists do
12963: LD_ADDR_VAR 0 2
12967: PUSH
12968: LD_EXP 35
12972: PUSH
12973: FOR_IN
12974: IFFALSE 13009
// if j = i then
12976: LD_VAR 0 2
12980: PUSH
12981: LD_VAR 0 1
12985: EQUAL
12986: IFFALSE 13007
// RuScientists = RuScientists diff [ i ] ;
12988: LD_ADDR_EXP 35
12992: PUSH
12993: LD_EXP 35
12997: PUSH
12998: LD_VAR 0 1
13002: PUSH
13003: EMPTY
13004: LIST
13005: DIFF
13006: ST_TO_ADDR
13007: GO 12973
13009: POP
13010: POP
// RemoveUnit ( i ) ;
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 64
// end ;
13020: GO 12960
13022: POP
13023: POP
// end ; end_of_file
13024: PPOPN 2
13026: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
// if exist_mode then
13031: LD_VAR 0 2
13035: IFFALSE 13054
// unit := CreateCharacter ( ident ) else
13037: LD_ADDR_VAR 0 4
13041: PUSH
13042: LD_VAR 0 1
13046: PPUSH
13047: CALL_OW 34
13051: ST_TO_ADDR
13052: GO 13069
// unit := NewCharacter ( ident ) ;
13054: LD_ADDR_VAR 0 4
13058: PUSH
13059: LD_VAR 0 1
13063: PPUSH
13064: CALL_OW 25
13068: ST_TO_ADDR
// result := unit ;
13069: LD_ADDR_VAR 0 3
13073: PUSH
13074: LD_VAR 0 4
13078: ST_TO_ADDR
// end ;
13079: LD_VAR 0 3
13083: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13084: LD_INT 0
13086: PPUSH
13087: PPUSH
// for i in charactersList do
13088: LD_ADDR_VAR 0 4
13092: PUSH
13093: LD_VAR 0 1
13097: PUSH
13098: FOR_IN
13099: IFFALSE 13128
// begin if IsOk ( i ) then
13101: LD_VAR 0 4
13105: PPUSH
13106: CALL_OW 302
13110: IFFALSE 13126
// SaveCharacters ( i , ident ) ;
13112: LD_VAR 0 4
13116: PPUSH
13117: LD_VAR 0 2
13121: PPUSH
13122: CALL_OW 38
// end ;
13126: GO 13098
13128: POP
13129: POP
// end ;
13130: LD_VAR 0 3
13134: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13135: LD_INT 0
13137: PPUSH
13138: PPUSH
13139: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13140: LD_ADDR_VAR 0 1
13144: PUSH
13145: LD_VAR 0 1
13149: PUSH
13150: LD_EXP 1
13154: PUSH
13155: LD_EXP 7
13159: PUSH
13160: LD_EXP 3
13164: PUSH
13165: LD_EXP 4
13169: PUSH
13170: LD_EXP 5
13174: PUSH
13175: LD_EXP 2
13179: PUSH
13180: LD_EXP 12
13184: PUSH
13185: LD_EXP 13
13189: PUSH
13190: LD_EXP 9
13194: PUSH
13195: LD_EXP 11
13199: PUSH
13200: LD_EXP 6
13204: PUSH
13205: LD_EXP 8
13209: PUSH
13210: LD_EXP 10
13214: PUSH
13215: LD_EXP 22
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: DIFF
13236: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13237: LD_ADDR_VAR 0 6
13241: PUSH
13242: LD_INT 1
13244: PPUSH
13245: LD_VAR 0 1
13249: PPUSH
13250: CALL_OW 12
13254: ST_TO_ADDR
// for i = 1 to characters do
13255: LD_ADDR_VAR 0 5
13259: PUSH
13260: DOUBLE
13261: LD_INT 1
13263: DEC
13264: ST_TO_ADDR
13265: LD_VAR 0 1
13269: PUSH
13270: FOR_TO
13271: IFFALSE 13381
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13273: LD_VAR 0 5
13277: PUSH
13278: LD_VAR 0 6
13282: EQUAL
13283: PUSH
13284: LD_VAR 0 1
13288: PUSH
13289: LD_VAR 0 5
13293: ARRAY
13294: PPUSH
13295: CALL_OW 258
13299: PUSH
13300: LD_INT 1
13302: EQUAL
13303: AND
13304: IFFALSE 13326
// Say ( characters [ i ] , dialogMID ) ;
13306: LD_VAR 0 1
13310: PUSH
13311: LD_VAR 0 5
13315: ARRAY
13316: PPUSH
13317: LD_VAR 0 2
13321: PPUSH
13322: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13326: LD_VAR 0 5
13330: PUSH
13331: LD_VAR 0 6
13335: EQUAL
13336: PUSH
13337: LD_VAR 0 1
13341: PUSH
13342: LD_VAR 0 5
13346: ARRAY
13347: PPUSH
13348: CALL_OW 258
13352: PUSH
13353: LD_INT 2
13355: EQUAL
13356: AND
13357: IFFALSE 13379
// Say ( characters [ i ] , dialogFID ) ;
13359: LD_VAR 0 1
13363: PUSH
13364: LD_VAR 0 5
13368: ARRAY
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: CALL_OW 88
// end ;
13379: GO 13270
13381: POP
13382: POP
// end ;
13383: LD_VAR 0 4
13387: RET
// export function PrepareDifficulty ; var tmp ; begin
13388: LD_INT 0
13390: PPUSH
13391: PPUSH
// if Difficulty = 1 then
13392: LD_OWVAR 67
13396: PUSH
13397: LD_INT 1
13399: EQUAL
13400: IFFALSE 13418
// begin RuSolMinLevel = 8 ;
13402: LD_ADDR_EXP 37
13406: PUSH
13407: LD_INT 8
13409: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13410: LD_ADDR_EXP 38
13414: PUSH
13415: LD_INT 10
13417: ST_TO_ADDR
// end ; if Difficulty = 2 then
13418: LD_OWVAR 67
13422: PUSH
13423: LD_INT 2
13425: EQUAL
13426: IFFALSE 13520
// begin RuSolMinLevel = 9 ;
13428: LD_ADDR_EXP 37
13432: PUSH
13433: LD_INT 9
13435: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13436: LD_ADDR_EXP 38
13440: PUSH
13441: LD_INT 10
13443: ST_TO_ADDR
// uc_nation = 3 ;
13444: LD_ADDR_OWVAR 21
13448: PUSH
13449: LD_INT 3
13451: ST_TO_ADDR
// uc_side = 3 ;
13452: LD_ADDR_OWVAR 20
13456: PUSH
13457: LD_INT 3
13459: ST_TO_ADDR
// bc_level = 10 ;
13460: LD_ADDR_OWVAR 43
13464: PUSH
13465: LD_INT 10
13467: ST_TO_ADDR
// bc_type = b_turret ;
13468: LD_ADDR_OWVAR 42
13472: PUSH
13473: LD_INT 33
13475: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13476: LD_ADDR_VAR 0 2
13480: PUSH
13481: LD_INT 86
13483: PPUSH
13484: LD_INT 34
13486: PPUSH
13487: LD_INT 2
13489: PPUSH
13490: CALL_OW 47
13494: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13495: LD_VAR 0 2
13499: PPUSH
13500: LD_INT 49
13502: PPUSH
13503: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13507: LD_INT 64
13509: PPUSH
13510: LD_INT 3
13512: PPUSH
13513: LD_INT 1
13515: PPUSH
13516: CALL_OW 322
// end ; if Difficulty = 3 then
13520: LD_OWVAR 67
13524: PUSH
13525: LD_INT 3
13527: EQUAL
13528: IFFALSE 13666
// begin RuSolMinLevel = 10 ;
13530: LD_ADDR_EXP 37
13534: PUSH
13535: LD_INT 10
13537: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13538: LD_ADDR_EXP 38
13542: PUSH
13543: LD_INT 10
13545: ST_TO_ADDR
// uc_nation = 3 ;
13546: LD_ADDR_OWVAR 21
13550: PUSH
13551: LD_INT 3
13553: ST_TO_ADDR
// uc_side = 3 ;
13554: LD_ADDR_OWVAR 20
13558: PUSH
13559: LD_INT 3
13561: ST_TO_ADDR
// bc_level = 10 ;
13562: LD_ADDR_OWVAR 43
13566: PUSH
13567: LD_INT 10
13569: ST_TO_ADDR
// bc_type = b_turret ;
13570: LD_ADDR_OWVAR 42
13574: PUSH
13575: LD_INT 33
13577: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_INT 86
13585: PPUSH
13586: LD_INT 34
13588: PPUSH
13589: LD_INT 2
13591: PPUSH
13592: CALL_OW 47
13596: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13597: LD_VAR 0 2
13601: PPUSH
13602: LD_INT 49
13604: PPUSH
13605: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: LD_INT 93
13616: PPUSH
13617: LD_INT 31
13619: PPUSH
13620: LD_INT 2
13622: PPUSH
13623: CALL_OW 47
13627: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13628: LD_VAR 0 2
13632: PPUSH
13633: LD_INT 49
13635: PPUSH
13636: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13640: LD_INT 64
13642: PPUSH
13643: LD_INT 3
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13653: LD_INT 65
13655: PPUSH
13656: LD_INT 3
13658: PPUSH
13659: LD_INT 1
13661: PPUSH
13662: CALL_OW 322
// end ; end ;
13666: LD_VAR 0 1
13670: RET
// export function ShowQuery1 ; begin
13671: LD_INT 0
13673: PPUSH
// case query ( Q1 ) of 1 :
13674: LD_STRING Q1
13676: PPUSH
13677: CALL_OW 97
13681: PUSH
13682: LD_INT 1
13684: DOUBLE
13685: EQUAL
13686: IFTRUE 13690
13688: GO 13701
13690: POP
// result = 1 ; 2 :
13691: LD_ADDR_VAR 0 1
13695: PUSH
13696: LD_INT 1
13698: ST_TO_ADDR
13699: GO 13740
13701: LD_INT 2
13703: DOUBLE
13704: EQUAL
13705: IFTRUE 13709
13707: GO 13720
13709: POP
// result = 2 ; 3 :
13710: LD_ADDR_VAR 0 1
13714: PUSH
13715: LD_INT 2
13717: ST_TO_ADDR
13718: GO 13740
13720: LD_INT 3
13722: DOUBLE
13723: EQUAL
13724: IFTRUE 13728
13726: GO 13739
13728: POP
// result = 3 ; end ;
13729: LD_ADDR_VAR 0 1
13733: PUSH
13734: LD_INT 3
13736: ST_TO_ADDR
13737: GO 13740
13739: POP
// end ;
13740: LD_VAR 0 1
13744: RET
// export function ShowQuery2 ; begin
13745: LD_INT 0
13747: PPUSH
// case query ( Q1a ) of 1 :
13748: LD_STRING Q1a
13750: PPUSH
13751: CALL_OW 97
13755: PUSH
13756: LD_INT 1
13758: DOUBLE
13759: EQUAL
13760: IFTRUE 13764
13762: GO 13775
13764: POP
// result = 1 ; 2 :
13765: LD_ADDR_VAR 0 1
13769: PUSH
13770: LD_INT 1
13772: ST_TO_ADDR
13773: GO 13814
13775: LD_INT 2
13777: DOUBLE
13778: EQUAL
13779: IFTRUE 13783
13781: GO 13794
13783: POP
// result = 2 ; 3 :
13784: LD_ADDR_VAR 0 1
13788: PUSH
13789: LD_INT 2
13791: ST_TO_ADDR
13792: GO 13814
13794: LD_INT 3
13796: DOUBLE
13797: EQUAL
13798: IFTRUE 13802
13800: GO 13813
13802: POP
// result = 3 ; end ;
13803: LD_ADDR_VAR 0 1
13807: PUSH
13808: LD_INT 3
13810: ST_TO_ADDR
13811: GO 13814
13813: POP
// end ;
13814: LD_VAR 0 1
13818: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13819: LD_INT 0
13821: PPUSH
13822: PPUSH
13823: PPUSH
13824: PPUSH
13825: PPUSH
// for i = 1 to count do
13826: LD_ADDR_VAR 0 8
13830: PUSH
13831: DOUBLE
13832: LD_INT 1
13834: DEC
13835: ST_TO_ADDR
13836: LD_VAR 0 6
13840: PUSH
13841: FOR_TO
13842: IFFALSE 13923
// begin uc_side = side ;
13844: LD_ADDR_OWVAR 20
13848: PUSH
13849: LD_VAR 0 1
13853: ST_TO_ADDR
// uc_nation = nation ;
13854: LD_ADDR_OWVAR 21
13858: PUSH
13859: LD_VAR 0 2
13863: ST_TO_ADDR
// hc_gallery =  ;
13864: LD_ADDR_OWVAR 33
13868: PUSH
13869: LD_STRING 
13871: ST_TO_ADDR
// hc_name =  ;
13872: LD_ADDR_OWVAR 26
13876: PUSH
13877: LD_STRING 
13879: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13880: LD_INT 0
13882: PPUSH
13883: LD_VAR 0 5
13887: PPUSH
13888: LD_VAR 0 4
13892: PPUSH
13893: CALL_OW 380
// un = CreateHuman ;
13897: LD_ADDR_VAR 0 10
13901: PUSH
13902: CALL_OW 44
13906: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13907: LD_VAR 0 10
13911: PPUSH
13912: LD_VAR 0 3
13916: PPUSH
13917: CALL_OW 52
// end ;
13921: GO 13841
13923: POP
13924: POP
// end ;
13925: LD_VAR 0 7
13929: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
13934: PPUSH
13935: PPUSH
// for i = 1 to 72 do
13936: LD_ADDR_VAR 0 5
13940: PUSH
13941: DOUBLE
13942: LD_INT 1
13944: DEC
13945: ST_TO_ADDR
13946: LD_INT 72
13948: PUSH
13949: FOR_TO
13950: IFFALSE 14008
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13952: LD_VAR 0 5
13956: PPUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 321
13966: PUSH
13967: LD_INT 1
13969: EQUAL
13970: PUSH
13971: LD_VAR 0 5
13975: PPUSH
13976: LD_VAR 0 3
13980: PPUSH
13981: CALL_OW 482
13985: PUSH
13986: LD_INT 1
13988: EQUAL
13989: AND
13990: IFFALSE 14006
// AddComResearch ( lab , i ) ;
13992: LD_VAR 0 2
13996: PPUSH
13997: LD_VAR 0 5
14001: PPUSH
14002: CALL_OW 184
14006: GO 13949
14008: POP
14009: POP
// end ;
14010: LD_VAR 0 4
14014: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14015: LD_INT 0
14017: PPUSH
14018: PPUSH
14019: PPUSH
14020: PPUSH
14021: PPUSH
14022: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14023: LD_ADDR_VAR 0 8
14027: PUSH
14028: LD_VAR 0 2
14032: PPUSH
14033: CALL_OW 313
14037: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14038: LD_ADDR_VAR 0 9
14042: PUSH
14043: LD_VAR 0 3
14047: PPUSH
14048: LD_INT 22
14050: PUSH
14051: LD_VAR 0 1
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 25
14062: PUSH
14063: LD_INT 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 24
14072: PUSH
14073: LD_INT 750
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 3
14082: PUSH
14083: LD_INT 54
14085: PUSH
14086: EMPTY
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 70
14103: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14104: LD_ADDR_VAR 0 6
14108: PUSH
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 22
14116: PUSH
14117: LD_VAR 0 1
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 21
14128: PUSH
14129: LD_INT 3
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 3
14138: PUSH
14139: LD_INT 24
14141: PUSH
14142: LD_INT 1000
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: EMPTY
14159: LIST
14160: PPUSH
14161: CALL_OW 70
14165: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14166: LD_VAR 0 6
14170: NOT
14171: PUSH
14172: LD_INT 22
14174: PUSH
14175: LD_VAR 0 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 25
14186: PUSH
14187: LD_INT 2
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 24
14196: PUSH
14197: LD_INT 250
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: PPUSH
14209: CALL_OW 69
14213: NOT
14214: AND
14215: IFFALSE 14219
// exit ;
14217: GO 14401
// if buildings_list > 0 and engineerOkInside then
14219: LD_VAR 0 6
14223: PUSH
14224: LD_INT 0
14226: GREATER
14227: PUSH
14228: LD_VAR 0 8
14232: AND
14233: IFFALSE 14244
// ComExitBuilding ( engineerOkInside ) ;
14235: LD_VAR 0 8
14239: PPUSH
14240: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14244: LD_VAR 0 6
14248: PUSH
14249: LD_INT 0
14251: GREATER
14252: PUSH
14253: LD_VAR 0 9
14257: PUSH
14258: LD_INT 0
14260: GREATER
14261: AND
14262: IFFALSE 14282
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14264: LD_VAR 0 9
14268: PPUSH
14269: LD_VAR 0 6
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14282: LD_VAR 0 6
14286: PUSH
14287: LD_INT 0
14289: EQUAL
14290: PUSH
14291: LD_VAR 0 4
14295: PUSH
14296: LD_INT 0
14298: EQUAL
14299: AND
14300: PUSH
14301: LD_VAR 0 9
14305: PUSH
14306: LD_INT 0
14308: GREATER
14309: AND
14310: IFFALSE 14326
// ComEnterUnit ( engineerOkOutside , building ) ;
14312: LD_VAR 0 9
14316: PPUSH
14317: LD_VAR 0 2
14321: PPUSH
14322: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14326: LD_VAR 0 9
14330: PUSH
14331: LD_INT 0
14333: GREATER
14334: PUSH
14335: LD_VAR 0 6
14339: PUSH
14340: LD_INT 0
14342: EQUAL
14343: AND
14344: PUSH
14345: LD_VAR 0 4
14349: PUSH
14350: LD_INT 0
14352: GREATER
14353: AND
14354: IFFALSE 14401
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14356: LD_VAR 0 9
14360: PPUSH
14361: LD_VAR 0 4
14365: PUSH
14366: LD_INT 1
14368: ARRAY
14369: PPUSH
14370: LD_VAR 0 4
14374: PUSH
14375: LD_INT 2
14377: ARRAY
14378: PPUSH
14379: LD_VAR 0 4
14383: PUSH
14384: LD_INT 3
14386: ARRAY
14387: PPUSH
14388: LD_VAR 0 4
14392: PUSH
14393: LD_INT 4
14395: ARRAY
14396: PPUSH
14397: CALL_OW 145
// end ;
14401: LD_VAR 0 5
14405: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
14416: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14417: LD_ADDR_VAR 0 6
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_VAR 0 1
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 25
14436: PUSH
14437: LD_INT 4
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 24
14446: PUSH
14447: LD_INT 251
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: PUSH
14464: LD_EXP 35
14468: PUSH
14469: EMPTY
14470: LIST
14471: DIFF
14472: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14473: LD_ADDR_VAR 0 7
14477: PUSH
14478: LD_VAR 0 3
14482: PPUSH
14483: LD_INT 22
14485: PUSH
14486: LD_VAR 0 1
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: LD_INT 25
14497: PUSH
14498: LD_INT 4
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 50
14507: PUSH
14508: EMPTY
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 70
14520: PUSH
14521: LD_EXP 35
14525: PUSH
14526: EMPTY
14527: LIST
14528: DIFF
14529: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14530: LD_ADDR_VAR 0 10
14534: PUSH
14535: LD_VAR 0 3
14539: PPUSH
14540: LD_INT 22
14542: PUSH
14543: LD_VAR 0 1
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 21
14554: PUSH
14555: LD_INT 1
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: LD_INT 24
14567: PUSH
14568: LD_INT 750
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 70
14588: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14589: LD_ADDR_VAR 0 11
14593: PUSH
14594: LD_VAR 0 2
14598: PPUSH
14599: LD_INT 22
14601: PUSH
14602: LD_VAR 0 1
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 21
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 3
14623: PUSH
14624: LD_INT 24
14626: PUSH
14627: LD_INT 1000
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 70
14647: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14648: LD_VAR 0 10
14652: PUSH
14653: LD_INT 0
14655: GREATER
14656: PUSH
14657: LD_VAR 0 6
14661: PUSH
14662: LD_INT 0
14664: GREATER
14665: AND
14666: IFFALSE 14682
// ComMoveToArea ( damageUnits , healArea ) ;
14668: LD_VAR 0 10
14672: PPUSH
14673: LD_VAR 0 2
14677: PPUSH
14678: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
14682: LD_VAR 0 11
14686: PUSH
14687: LD_INT 0
14689: GREATER
14690: PUSH
14691: LD_VAR 0 7
14695: PUSH
14696: LD_INT 0
14698: GREATER
14699: AND
14700: IFFALSE 14720
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
14702: LD_VAR 0 7
14706: PPUSH
14707: LD_VAR 0 11
14711: PUSH
14712: LD_INT 1
14714: ARRAY
14715: PPUSH
14716: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14720: LD_VAR 0 10
14724: PUSH
14725: LD_INT 0
14727: EQUAL
14728: PUSH
14729: LD_VAR 0 11
14733: PUSH
14734: LD_INT 0
14736: EQUAL
14737: AND
14738: PUSH
14739: LD_VAR 0 7
14743: PUSH
14744: LD_INT 0
14746: GREATER
14747: AND
14748: IFFALSE 14853
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14750: LD_ADDR_VAR 0 12
14754: PUSH
14755: LD_INT 22
14757: PUSH
14758: LD_VAR 0 1
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 21
14769: PUSH
14770: LD_INT 3
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 30
14779: PUSH
14780: LD_INT 8
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14797: LD_ADDR_VAR 0 13
14801: PUSH
14802: LD_INT 1
14804: PPUSH
14805: LD_VAR 0 12
14809: PPUSH
14810: CALL_OW 12
14814: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14815: LD_VAR 0 7
14819: PPUSH
14820: LD_INT 3
14822: PUSH
14823: LD_INT 60
14825: PUSH
14826: EMPTY
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 72
14837: PPUSH
14838: LD_VAR 0 12
14842: PUSH
14843: LD_VAR 0 13
14847: ARRAY
14848: PPUSH
14849: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14853: LD_VAR 0 3
14857: PPUSH
14858: LD_INT 22
14860: PUSH
14861: LD_VAR 0 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 25
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 24
14882: PUSH
14883: LD_INT 751
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: PPUSH
14895: CALL_OW 70
14899: PUSH
14900: LD_INT 0
14902: GREATER
14903: PUSH
14904: LD_INT 21
14906: PPUSH
14907: CALL_OW 302
14911: AND
14912: PUSH
14913: LD_INT 21
14915: PPUSH
14916: CALL_OW 255
14920: PUSH
14921: LD_INT 3
14923: EQUAL
14924: AND
14925: IFFALSE 14981
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 22
14934: PUSH
14935: LD_VAR 0 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 25
14946: PUSH
14947: LD_INT 3
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 24
14956: PUSH
14957: LD_INT 751
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 70
14973: PPUSH
14974: LD_INT 21
14976: PPUSH
14977: CALL_OW 120
// end ;
14981: LD_VAR 0 5
14985: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
14986: LD_INT 0
14988: PPUSH
14989: PPUSH
14990: PPUSH
14991: PPUSH
14992: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
14993: LD_ADDR_VAR 0 6
14997: PUSH
14998: LD_INT 22
15000: PUSH
15001: LD_VAR 0 1
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 2
15012: PUSH
15013: LD_INT 30
15015: PUSH
15016: LD_INT 31
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 30
15025: PUSH
15026: LD_INT 32
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 33
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: LD_INT 4
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 30
15055: PUSH
15056: LD_INT 5
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PPUSH
15075: CALL_OW 69
15079: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15080: LD_ADDR_VAR 0 7
15084: PUSH
15085: LD_INT 22
15087: PUSH
15088: LD_VAR 0 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 21
15099: PUSH
15100: LD_INT 3
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 58
15109: PUSH
15110: EMPTY
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15123: LD_VAR 0 6
15127: PUSH
15128: LD_INT 0
15130: GREATER
15131: PUSH
15132: LD_VAR 0 7
15136: PUSH
15137: LD_INT 0
15139: GREATER
15140: AND
15141: IFFALSE 15211
// begin for i in turretsList do
15143: LD_ADDR_VAR 0 4
15147: PUSH
15148: LD_VAR 0 6
15152: PUSH
15153: FOR_IN
15154: IFFALSE 15209
// begin for j in enemyBuildings do
15156: LD_ADDR_VAR 0 5
15160: PUSH
15161: LD_VAR 0 7
15165: PUSH
15166: FOR_IN
15167: IFFALSE 15205
// begin if GetDistUnits ( i , j ) < 20 then
15169: LD_VAR 0 4
15173: PPUSH
15174: LD_VAR 0 5
15178: PPUSH
15179: CALL_OW 296
15183: PUSH
15184: LD_INT 20
15186: LESS
15187: IFFALSE 15203
// begin ComAttackUnit ( i , j ) ;
15189: LD_VAR 0 4
15193: PPUSH
15194: LD_VAR 0 5
15198: PPUSH
15199: CALL_OW 115
// end ; end ;
15203: GO 15166
15205: POP
15206: POP
// end ;
15207: GO 15153
15209: POP
15210: POP
// end ; end ;
15211: LD_VAR 0 3
15215: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15216: LD_INT 0
15218: PPUSH
15219: PPUSH
15220: PPUSH
15221: PPUSH
15222: PPUSH
15223: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15224: LD_ADDR_VAR 0 7
15228: PUSH
15229: LD_VAR 0 2
15233: PPUSH
15234: LD_INT 22
15236: PUSH
15237: LD_VAR 0 1
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 21
15248: PUSH
15249: LD_INT 2
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 34
15258: PUSH
15259: LD_INT 52
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: PPUSH
15271: CALL_OW 70
15275: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15276: LD_ADDR_VAR 0 8
15280: PUSH
15281: LD_VAR 0 2
15285: PPUSH
15286: LD_INT 22
15288: PUSH
15289: LD_VAR 0 1
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 3
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 24
15313: PUSH
15314: LD_INT 1000
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: PUSH
15330: EMPTY
15331: LIST
15332: PPUSH
15333: CALL_OW 70
15337: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15338: LD_VAR 0 8
15342: PUSH
15343: LD_INT 0
15345: GREATER
15346: PUSH
15347: LD_VAR 0 7
15351: PPUSH
15352: LD_INT 24
15354: PUSH
15355: LD_INT 750
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PPUSH
15362: CALL_OW 72
15366: PUSH
15367: LD_INT 0
15369: GREATER
15370: AND
15371: IFFALSE 15391
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15373: LD_VAR 0 7
15377: PPUSH
15378: LD_VAR 0 8
15382: PUSH
15383: LD_INT 1
15385: ARRAY
15386: PPUSH
15387: CALL_OW 130
// end ;
15391: LD_VAR 0 3
15395: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15396: LD_INT 0
15398: PPUSH
15399: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15400: LD_INT 22
15402: PUSH
15403: LD_VAR 0 1
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 21
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: PUSH
15431: LD_INT 18
15433: PPUSH
15434: LD_INT 22
15436: PUSH
15437: LD_VAR 0 1
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 21
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PPUSH
15460: CALL_OW 70
15464: PUSH
15465: LD_VAR 0 3
15469: LESSEQUAL
15470: DIFF
15471: IFFALSE 15538
// for i = 1 to vehCount do
15473: LD_ADDR_VAR 0 9
15477: PUSH
15478: DOUBLE
15479: LD_INT 1
15481: DEC
15482: ST_TO_ADDR
15483: LD_VAR 0 3
15487: PUSH
15488: FOR_TO
15489: IFFALSE 15536
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15491: LD_VAR 0 2
15495: PPUSH
15496: LD_VAR 0 7
15500: PPUSH
15501: LD_VAR 0 5
15505: PPUSH
15506: LD_VAR 0 6
15510: PPUSH
15511: LD_VAR 0 4
15515: PUSH
15516: LD_INT 1
15518: PPUSH
15519: LD_VAR 0 4
15523: PPUSH
15524: CALL_OW 12
15528: ARRAY
15529: PPUSH
15530: CALL_OW 185
15534: GO 15488
15536: POP
15537: POP
// end ;
15538: LD_VAR 0 8
15542: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15543: LD_INT 0
15545: PPUSH
15546: PPUSH
15547: PPUSH
15548: PPUSH
15549: PPUSH
15550: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15551: LD_EXP 40
15555: PUSH
15556: LD_INT 3
15558: PUSH
15559: LD_INT 4
15561: PUSH
15562: LD_INT 4
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: LIST
15569: PUSH
15570: LD_OWVAR 67
15574: ARRAY
15575: GREATEREQUAL
15576: PUSH
15577: LD_EXP 41
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: LD_INT 2
15587: PUSH
15588: LD_INT 2
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: PUSH
15596: LD_OWVAR 67
15600: ARRAY
15601: GREATEREQUAL
15602: AND
15603: IFFALSE 15836
// begin repeat wait ( 0 0$3 ) ;
15605: LD_INT 105
15607: PPUSH
15608: CALL_OW 67
// for j in russianTanks do
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: LD_EXP 40
15621: PUSH
15622: FOR_IN
15623: IFFALSE 15824
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15625: LD_ADDR_VAR 0 6
15629: PUSH
15630: LD_INT 81
15632: PUSH
15633: LD_VAR 0 1
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 101
15644: PUSH
15645: LD_INT 1
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PPUSH
15656: CALL_OW 69
15660: PPUSH
15661: LD_VAR 0 4
15665: PPUSH
15666: CALL_OW 74
15670: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15671: LD_ADDR_VAR 0 7
15675: PUSH
15676: LD_INT 81
15678: PUSH
15679: LD_VAR 0 1
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 101
15690: PUSH
15691: LD_INT 1
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 2
15700: PUSH
15701: LD_INT 59
15703: PUSH
15704: EMPTY
15705: LIST
15706: PUSH
15707: LD_INT 21
15709: PUSH
15710: LD_INT 1
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 21
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: LIST
15737: PUSH
15738: EMPTY
15739: LIST
15740: PPUSH
15741: CALL_OW 69
15745: PPUSH
15746: LD_VAR 0 4
15750: PPUSH
15751: CALL_OW 74
15755: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
15756: LD_VAR 0 4
15760: PPUSH
15761: LD_VAR 0 6
15765: PPUSH
15766: CALL_OW 296
15770: PUSH
15771: LD_INT 8
15773: PLUS
15774: PUSH
15775: LD_VAR 0 4
15779: PPUSH
15780: LD_VAR 0 7
15784: PPUSH
15785: CALL_OW 296
15789: LESS
15790: IFFALSE 15808
// ComAttackUnit ( j , target1 ) else
15792: LD_VAR 0 4
15796: PPUSH
15797: LD_VAR 0 6
15801: PPUSH
15802: CALL_OW 115
15806: GO 15822
// ComAttackUnit ( j , target2 ) ;
15808: LD_VAR 0 4
15812: PPUSH
15813: LD_VAR 0 7
15817: PPUSH
15818: CALL_OW 115
// end ;
15822: GO 15622
15824: POP
15825: POP
// until russianTanks = 0 ;
15826: LD_EXP 40
15830: PUSH
15831: LD_INT 0
15833: EQUAL
15834: IFFALSE 15605
// end ; end ;
15836: LD_VAR 0 2
15840: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
15845: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15846: LD_EXP 40
15850: PUSH
15851: LD_INT 1
15853: GREATEREQUAL
15854: PUSH
15855: LD_EXP 41
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: LD_INT 2
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: LIST
15873: PUSH
15874: LD_OWVAR 67
15878: ARRAY
15879: GREATEREQUAL
15880: AND
15881: IFFALSE 16031
// repeat wait ( 0 0$3 ) ;
15883: LD_INT 105
15885: PPUSH
15886: CALL_OW 67
// if russianTimeLapsers > 0 then
15890: LD_EXP 41
15894: PUSH
15895: LD_INT 0
15897: GREATER
15898: IFFALSE 16021
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
15900: LD_ADDR_VAR 0 3
15904: PUSH
15905: LD_EXP 41
15909: PPUSH
15910: LD_INT 3
15912: PUSH
15913: LD_INT 60
15915: PUSH
15916: EMPTY
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 72
15927: PUSH
15928: FOR_IN
15929: IFFALSE 16019
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
15931: LD_ADDR_VAR 0 4
15935: PUSH
15936: LD_INT 81
15938: PUSH
15939: LD_VAR 0 1
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 101
15950: PUSH
15951: LD_INT 1
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 69
15977: PPUSH
15978: LD_VAR 0 3
15982: PPUSH
15983: CALL_OW 74
15987: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
15988: LD_VAR 0 3
15992: PPUSH
15993: LD_VAR 0 4
15997: PPUSH
15998: CALL_OW 250
16002: PPUSH
16003: LD_VAR 0 4
16007: PPUSH
16008: CALL_OW 251
16012: PPUSH
16013: CALL_OW 111
// end ;
16017: GO 15928
16019: POP
16020: POP
// until russianTimeLapsers = 0 ;
16021: LD_EXP 41
16025: PUSH
16026: LD_INT 0
16028: EQUAL
16029: IFFALSE 15883
// end ;
16031: LD_VAR 0 2
16035: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16036: LD_INT 0
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16044: LD_ADDR_VAR 0 6
16048: PUSH
16049: LD_INT 22
16051: PUSH
16052: LD_VAR 0 1
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 25
16063: PUSH
16064: LD_INT 9
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PPUSH
16075: CALL_OW 69
16079: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16080: LD_ADDR_VAR 0 7
16084: PUSH
16085: LD_INT 81
16087: PUSH
16088: LD_VAR 0 1
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 3
16099: PUSH
16100: LD_INT 21
16102: PUSH
16103: LD_INT 3
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PPUSH
16118: CALL_OW 69
16122: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16123: LD_ADDR_VAR 0 4
16127: PUSH
16128: LD_INT 1
16130: PPUSH
16131: LD_INT 3
16133: PPUSH
16134: CALL_OW 12
16138: ST_TO_ADDR
// for i = 1 to list do
16139: LD_ADDR_VAR 0 5
16143: PUSH
16144: DOUBLE
16145: LD_INT 1
16147: DEC
16148: ST_TO_ADDR
16149: LD_VAR 0 6
16153: PUSH
16154: FOR_TO
16155: IFFALSE 16357
// for ta in filter do
16157: LD_ADDR_VAR 0 3
16161: PUSH
16162: LD_VAR 0 7
16166: PUSH
16167: FOR_IN
16168: IFFALSE 16353
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16170: LD_VAR 0 6
16174: PUSH
16175: LD_VAR 0 5
16179: ARRAY
16180: PPUSH
16181: LD_VAR 0 3
16185: PPUSH
16186: CALL_OW 296
16190: PUSH
16191: LD_INT 15
16193: LESSEQUAL
16194: IFFALSE 16351
// begin case c of 1 :
16196: LD_VAR 0 4
16200: PUSH
16201: LD_INT 1
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16247
16209: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16210: LD_VAR 0 6
16214: PUSH
16215: LD_VAR 0 5
16219: ARRAY
16220: PPUSH
16221: LD_VAR 0 3
16225: PPUSH
16226: CALL_OW 250
16230: PPUSH
16231: LD_VAR 0 3
16235: PPUSH
16236: CALL_OW 251
16240: PPUSH
16241: CALL_OW 154
16245: GO 16351
16247: LD_INT 2
16249: DOUBLE
16250: EQUAL
16251: IFTRUE 16255
16253: GO 16319
16255: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16256: LD_VAR 0 6
16260: PUSH
16261: LD_VAR 0 5
16265: ARRAY
16266: PPUSH
16267: LD_VAR 0 3
16271: PPUSH
16272: CALL_OW 250
16276: PUSH
16277: LD_INT 1
16279: NEG
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: CALL_OW 12
16288: PLUS
16289: PPUSH
16290: LD_VAR 0 3
16294: PPUSH
16295: CALL_OW 251
16299: PUSH
16300: LD_INT 1
16302: NEG
16303: PPUSH
16304: LD_INT 1
16306: PPUSH
16307: CALL_OW 12
16311: PLUS
16312: PPUSH
16313: CALL_OW 153
16317: GO 16351
16319: LD_INT 3
16321: DOUBLE
16322: EQUAL
16323: IFTRUE 16327
16325: GO 16350
16327: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16328: LD_VAR 0 6
16332: PUSH
16333: LD_VAR 0 5
16337: ARRAY
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: CALL_OW 115
16348: GO 16351
16350: POP
// end ; end ;
16351: GO 16167
16353: POP
16354: POP
16355: GO 16154
16357: POP
16358: POP
// end ;
16359: LD_VAR 0 2
16363: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16364: LD_INT 0
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
// r := 100 ;
16370: LD_ADDR_VAR 0 5
16374: PUSH
16375: LD_INT 100
16377: ST_TO_ADDR
// x := 0 ;
16378: LD_ADDR_VAR 0 6
16382: PUSH
16383: LD_INT 0
16385: ST_TO_ADDR
// while ( x < n ) do
16386: LD_VAR 0 6
16390: PUSH
16391: LD_VAR 0 2
16395: LESS
16396: IFFALSE 16683
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16398: LD_ADDR_VAR 0 4
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_VAR 0 1
16412: PPUSH
16413: LD_INT 0
16415: PPUSH
16416: CALL_OW 517
16420: PUSH
16421: LD_INT 1
16423: ARRAY
16424: PUSH
16425: FOR_TO
16426: IFFALSE 16679
// begin if r > 50 then
16428: LD_VAR 0 5
16432: PUSH
16433: LD_INT 50
16435: GREATER
16436: IFFALSE 16655
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 0
16445: PPUSH
16446: CALL_OW 517
16450: PUSH
16451: LD_INT 1
16453: ARRAY
16454: PUSH
16455: LD_VAR 0 4
16459: ARRAY
16460: PPUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: LD_INT 0
16468: PPUSH
16469: CALL_OW 517
16473: PUSH
16474: LD_INT 2
16476: ARRAY
16477: PUSH
16478: LD_VAR 0 4
16482: ARRAY
16483: PPUSH
16484: CALL_OW 458
16488: NOT
16489: IFFALSE 16639
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16491: LD_VAR 0 1
16495: PPUSH
16496: LD_INT 0
16498: PPUSH
16499: CALL_OW 517
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PUSH
16508: LD_VAR 0 4
16512: ARRAY
16513: PPUSH
16514: LD_VAR 0 1
16518: PPUSH
16519: LD_INT 0
16521: PPUSH
16522: CALL_OW 517
16526: PUSH
16527: LD_INT 2
16529: ARRAY
16530: PUSH
16531: LD_VAR 0 4
16535: ARRAY
16536: PPUSH
16537: LD_INT 8
16539: PPUSH
16540: LD_INT 0
16542: PPUSH
16543: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16547: LD_ADDR_EXP 45
16551: PUSH
16552: LD_EXP 45
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: LD_VAR 0 1
16564: PPUSH
16565: LD_INT 0
16567: PPUSH
16568: CALL_OW 517
16572: PUSH
16573: LD_INT 1
16575: ARRAY
16576: PUSH
16577: LD_VAR 0 4
16581: ARRAY
16582: PUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_INT 0
16590: PPUSH
16591: CALL_OW 517
16595: PUSH
16596: LD_INT 2
16598: ARRAY
16599: PUSH
16600: LD_VAR 0 4
16604: ARRAY
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PPUSH
16610: CALL_OW 2
16614: ST_TO_ADDR
// r := 0 ;
16615: LD_ADDR_VAR 0 5
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// x := x + 1 ;
16623: LD_ADDR_VAR 0 6
16627: PUSH
16628: LD_VAR 0 6
16632: PUSH
16633: LD_INT 1
16635: PLUS
16636: ST_TO_ADDR
// end else
16637: GO 16653
// r := r + 35 ;
16639: LD_ADDR_VAR 0 5
16643: PUSH
16644: LD_VAR 0 5
16648: PUSH
16649: LD_INT 35
16651: PLUS
16652: ST_TO_ADDR
// end else
16653: GO 16677
// r := r + rand ( 10 , 25 ) ;
16655: LD_ADDR_VAR 0 5
16659: PUSH
16660: LD_VAR 0 5
16664: PUSH
16665: LD_INT 10
16667: PPUSH
16668: LD_INT 25
16670: PPUSH
16671: CALL_OW 12
16675: PLUS
16676: ST_TO_ADDR
// end ;
16677: GO 16425
16679: POP
16680: POP
16681: GO 16386
// end ;
16683: LD_VAR 0 3
16687: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
16688: LD_INT 0
16690: PPUSH
16691: PPUSH
16692: PPUSH
16693: PPUSH
// tmpTab = [ ] ;
16694: LD_ADDR_VAR 0 6
16698: PUSH
16699: EMPTY
16700: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
16701: LD_INT 22
16703: PUSH
16704: LD_VAR 0 1
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 30
16715: PUSH
16716: LD_INT 32
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PPUSH
16727: CALL_OW 69
16731: PUSH
16732: LD_INT 0
16734: GREATER
16735: IFFALSE 16818
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
16737: LD_ADDR_VAR 0 4
16741: PUSH
16742: LD_INT 22
16744: PUSH
16745: LD_VAR 0 1
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 30
16756: PUSH
16757: LD_INT 32
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PPUSH
16768: CALL_OW 69
16772: PUSH
16773: FOR_IN
16774: IFFALSE 16816
// begin for j in UnitsInside ( i ) do
16776: LD_ADDR_VAR 0 5
16780: PUSH
16781: LD_VAR 0 4
16785: PPUSH
16786: CALL_OW 313
16790: PUSH
16791: FOR_IN
16792: IFFALSE 16812
// tmpTab = tmpTab ^ j ;
16794: LD_ADDR_VAR 0 6
16798: PUSH
16799: LD_VAR 0 6
16803: PUSH
16804: LD_VAR 0 5
16808: ADD
16809: ST_TO_ADDR
16810: GO 16791
16812: POP
16813: POP
// end ;
16814: GO 16773
16816: POP
16817: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
16818: LD_VAR 0 6
16822: PPUSH
16823: LD_VAR 0 2
16827: PPUSH
16828: CALL_OW 250
16832: PPUSH
16833: LD_VAR 0 2
16837: PPUSH
16838: CALL_OW 251
16842: PPUSH
16843: CALL_OW 114
// end ;
16847: LD_VAR 0 3
16851: RET
// export function PrepareNature ; var i , un ; begin
16852: LD_INT 0
16854: PPUSH
16855: PPUSH
16856: PPUSH
// uc_side := 0 ;
16857: LD_ADDR_OWVAR 20
16861: PUSH
16862: LD_INT 0
16864: ST_TO_ADDR
// uc_nation := 0 ;
16865: LD_ADDR_OWVAR 21
16869: PUSH
16870: LD_INT 0
16872: ST_TO_ADDR
// InitHc ;
16873: CALL_OW 19
// hc_class := class_fish ;
16877: LD_ADDR_OWVAR 28
16881: PUSH
16882: LD_INT 20
16884: ST_TO_ADDR
// for i = 1 to 6 do
16885: LD_ADDR_VAR 0 2
16889: PUSH
16890: DOUBLE
16891: LD_INT 1
16893: DEC
16894: ST_TO_ADDR
16895: LD_INT 6
16897: PUSH
16898: FOR_TO
16899: IFFALSE 16918
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
16901: CALL_OW 44
16905: PPUSH
16906: LD_INT 23
16908: PPUSH
16909: LD_INT 0
16911: PPUSH
16912: CALL_OW 49
16916: GO 16898
16918: POP
16919: POP
// for i = 1 to Difficulty + 2 do
16920: LD_ADDR_VAR 0 2
16924: PUSH
16925: DOUBLE
16926: LD_INT 1
16928: DEC
16929: ST_TO_ADDR
16930: LD_OWVAR 67
16934: PUSH
16935: LD_INT 2
16937: PLUS
16938: PUSH
16939: FOR_TO
16940: IFFALSE 17049
// begin hc_sex = sex_male ;
16942: LD_ADDR_OWVAR 27
16946: PUSH
16947: LD_INT 1
16949: ST_TO_ADDR
// uc_side = 0 ;
16950: LD_ADDR_OWVAR 20
16954: PUSH
16955: LD_INT 0
16957: ST_TO_ADDR
// uc_nation = nation_nature ;
16958: LD_ADDR_OWVAR 21
16962: PUSH
16963: LD_INT 0
16965: ST_TO_ADDR
// hc_class = class_tiger ;
16966: LD_ADDR_OWVAR 28
16970: PUSH
16971: LD_INT 14
16973: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16974: LD_ADDR_OWVAR 31
16978: PUSH
16979: LD_EXP 38
16983: PUSH
16984: LD_INT 0
16986: PUSH
16987: LD_INT 0
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16999: LD_ADDR_OWVAR 35
17003: PUSH
17004: LD_INT 5
17006: NEG
17007: PPUSH
17008: LD_INT 5
17010: PPUSH
17011: CALL_OW 12
17015: PUSH
17016: LD_OWVAR 67
17020: MUL
17021: ST_TO_ADDR
// un = CreateHuman ;
17022: LD_ADDR_VAR 0 3
17026: PUSH
17027: CALL_OW 44
17031: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17032: LD_VAR 0 3
17036: PPUSH
17037: LD_INT 24
17039: PPUSH
17040: LD_INT 0
17042: PPUSH
17043: CALL_OW 49
// end ;
17047: GO 16939
17049: POP
17050: POP
// for i = 1 to rand ( 3 , 4 ) do
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: DOUBLE
17057: LD_INT 1
17059: DEC
17060: ST_TO_ADDR
17061: LD_INT 3
17063: PPUSH
17064: LD_INT 4
17066: PPUSH
17067: CALL_OW 12
17071: PUSH
17072: FOR_TO
17073: IFFALSE 17165
// begin hc_sex = sex_male ;
17075: LD_ADDR_OWVAR 27
17079: PUSH
17080: LD_INT 1
17082: ST_TO_ADDR
// uc_side = 0 ;
17083: LD_ADDR_OWVAR 20
17087: PUSH
17088: LD_INT 0
17090: ST_TO_ADDR
// uc_nation = nation_nature ;
17091: LD_ADDR_OWVAR 21
17095: PUSH
17096: LD_INT 0
17098: ST_TO_ADDR
// hc_class = 18 ;
17099: LD_ADDR_OWVAR 28
17103: PUSH
17104: LD_INT 18
17106: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17107: LD_ADDR_OWVAR 31
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: LD_INT 0
17117: PUSH
17118: LD_INT 0
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: ST_TO_ADDR
// hc_agressivity = 0 ;
17130: LD_ADDR_OWVAR 35
17134: PUSH
17135: LD_INT 0
17137: ST_TO_ADDR
// un = CreateHuman ;
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: CALL_OW 44
17147: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17148: LD_VAR 0 3
17152: PPUSH
17153: LD_INT 24
17155: PPUSH
17156: LD_INT 0
17158: PPUSH
17159: CALL_OW 49
// end ;
17163: GO 17072
17165: POP
17166: POP
// for i = 1 to rand ( 1 , 3 ) do
17167: LD_ADDR_VAR 0 2
17171: PUSH
17172: DOUBLE
17173: LD_INT 1
17175: DEC
17176: ST_TO_ADDR
17177: LD_INT 1
17179: PPUSH
17180: LD_INT 3
17182: PPUSH
17183: CALL_OW 12
17187: PUSH
17188: FOR_TO
17189: IFFALSE 17337
// begin hc_sex = sex_male ;
17191: LD_ADDR_OWVAR 27
17195: PUSH
17196: LD_INT 1
17198: ST_TO_ADDR
// uc_side = 0 ;
17199: LD_ADDR_OWVAR 20
17203: PUSH
17204: LD_INT 0
17206: ST_TO_ADDR
// uc_nation = nation_nature ;
17207: LD_ADDR_OWVAR 21
17211: PUSH
17212: LD_INT 0
17214: ST_TO_ADDR
// hc_class = class_apeman ;
17215: LD_ADDR_OWVAR 28
17219: PUSH
17220: LD_INT 12
17222: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17223: LD_ADDR_OWVAR 31
17227: PUSH
17228: LD_EXP 37
17232: PPUSH
17233: LD_EXP 38
17237: PPUSH
17238: CALL_OW 12
17242: PUSH
17243: LD_EXP 37
17247: PPUSH
17248: LD_EXP 38
17252: PPUSH
17253: CALL_OW 12
17257: PUSH
17258: LD_EXP 37
17262: PPUSH
17263: LD_EXP 38
17267: PPUSH
17268: CALL_OW 12
17272: PUSH
17273: LD_EXP 37
17277: PPUSH
17278: LD_EXP 38
17282: PPUSH
17283: CALL_OW 12
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17294: LD_ADDR_OWVAR 35
17298: PUSH
17299: LD_INT 1
17301: PPUSH
17302: LD_INT 20
17304: PPUSH
17305: CALL_OW 12
17309: ST_TO_ADDR
// un = CreateHuman ;
17310: LD_ADDR_VAR 0 3
17314: PUSH
17315: CALL_OW 44
17319: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17320: LD_VAR 0 3
17324: PPUSH
17325: LD_INT 24
17327: PPUSH
17328: LD_INT 0
17330: PPUSH
17331: CALL_OW 49
// end ;
17335: GO 17188
17337: POP
17338: POP
// end ; end_of_file
17339: LD_VAR 0 1
17343: RET
// on UnitDestroyed ( unit ) do var i ;
17344: LD_INT 0
17346: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 255
17356: PUSH
17357: LD_INT 3
17359: EQUAL
17360: PUSH
17361: LD_VAR 0 1
17365: PPUSH
17366: CALL_OW 247
17370: PUSH
17371: LD_INT 1
17373: EQUAL
17374: AND
17375: IFFALSE 17439
// begin for i in RuScientists do
17377: LD_ADDR_VAR 0 2
17381: PUSH
17382: LD_EXP 35
17386: PUSH
17387: FOR_IN
17388: IFFALSE 17437
// if i = unit then
17390: LD_VAR 0 2
17394: PUSH
17395: LD_VAR 0 1
17399: EQUAL
17400: IFFALSE 17435
// begin RuScientists = RuScientists diff [ unit ] ;
17402: LD_ADDR_EXP 35
17406: PUSH
17407: LD_EXP 35
17411: PUSH
17412: LD_VAR 0 1
17416: PUSH
17417: EMPTY
17418: LIST
17419: DIFF
17420: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17421: LD_ADDR_EXP 36
17425: PUSH
17426: LD_EXP 36
17430: PUSH
17431: LD_INT 1
17433: PLUS
17434: ST_TO_ADDR
// end ;
17435: GO 17387
17437: POP
17438: POP
// end ; end ;
17439: PPOPN 2
17441: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17442: LD_VAR 0 1
17446: PUSH
17447: LD_INT 10
17449: EQUAL
17450: PUSH
17451: LD_VAR 0 2
17455: PPUSH
17456: CALL_OW 255
17460: PUSH
17461: LD_INT 1
17463: EQUAL
17464: AND
17465: PUSH
17466: LD_EXP 48
17470: PUSH
17471: LD_INT 0
17473: EQUAL
17474: AND
17475: IFFALSE 17587
// begin eventVar1 = 1 ;
17477: LD_ADDR_EXP 48
17481: PUSH
17482: LD_INT 1
17484: ST_TO_ADDR
// teleportExplored = 1 ;
17485: LD_ADDR_EXP 34
17489: PUSH
17490: LD_INT 1
17492: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17493: LD_STRING M2a
17495: PPUSH
17496: CALL_OW 337
// wait ( 0 0$2 ) ;
17500: LD_INT 70
17502: PPUSH
17503: CALL_OW 67
// DialogueOn ;
17507: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17511: LD_INT 22
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 21
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PPUSH
17535: CALL_OW 69
17539: PPUSH
17540: LD_STRING DT3a-Sol1-1
17542: PPUSH
17543: LD_STRING DT3a-FSol1-1
17545: PPUSH
17546: CALL 13135 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17550: LD_EXP 1
17554: PPUSH
17555: LD_STRING DT3a-JMM-1
17557: PPUSH
17558: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17562: LD_VAR 0 2
17566: PPUSH
17567: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17571: LD_EXP 1
17575: PPUSH
17576: LD_STRING DT3a-JMM-1a
17578: PPUSH
17579: CALL_OW 88
// DialogueOff ;
17583: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17587: LD_VAR 0 1
17591: PUSH
17592: LD_INT 10
17594: EQUAL
17595: PUSH
17596: LD_VAR 0 2
17600: PPUSH
17601: CALL_OW 247
17605: PUSH
17606: LD_INT 2
17608: EQUAL
17609: AND
17610: PUSH
17611: LD_VAR 0 2
17615: PPUSH
17616: CALL_OW 255
17620: PUSH
17621: LD_INT 3
17623: EQUAL
17624: AND
17625: PUSH
17626: LD_EXP 29
17630: PUSH
17631: LD_INT 0
17633: EQUAL
17634: AND
17635: IFFALSE 17652
// begin wait ( 0 0$3 ) ;
17637: LD_INT 105
17639: PPUSH
17640: CALL_OW 67
// vehicleTeleported = 1 ;
17644: LD_ADDR_EXP 29
17648: PUSH
17649: LD_INT 1
17651: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17652: LD_VAR 0 1
17656: PUSH
17657: LD_INT 10
17659: EQUAL
17660: PUSH
17661: LD_VAR 0 2
17665: PPUSH
17666: CALL_OW 247
17670: PUSH
17671: LD_INT 2
17673: EQUAL
17674: AND
17675: PUSH
17676: LD_VAR 0 2
17680: PPUSH
17681: CALL_OW 255
17685: PUSH
17686: LD_INT 3
17688: EQUAL
17689: AND
17690: PUSH
17691: LD_EXP 29
17695: PUSH
17696: LD_INT 2
17698: EQUAL
17699: AND
17700: IFFALSE 17717
// begin wait ( 0 0$3 ) ;
17702: LD_INT 105
17704: PPUSH
17705: CALL_OW 67
// vehicleTeleported = 3 ;
17709: LD_ADDR_EXP 29
17713: PUSH
17714: LD_INT 3
17716: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
17717: LD_VAR 0 1
17721: PUSH
17722: LD_INT 10
17724: EQUAL
17725: PUSH
17726: LD_VAR 0 2
17730: PPUSH
17731: CALL_OW 247
17735: PUSH
17736: LD_INT 2
17738: EQUAL
17739: AND
17740: PUSH
17741: LD_VAR 0 2
17745: PPUSH
17746: CALL_OW 255
17750: PUSH
17751: LD_INT 3
17753: EQUAL
17754: AND
17755: IFFALSE 17771
// tpCounter = tpCounter + 1 ;
17757: LD_ADDR_EXP 30
17761: PUSH
17762: LD_EXP 30
17766: PUSH
17767: LD_INT 1
17769: PLUS
17770: ST_TO_ADDR
// end ;
17771: PPOPN 2
17773: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
17774: LD_VAR 0 2
17778: PUSH
17779: LD_INT 21
17781: EQUAL
17782: PUSH
17783: LD_VAR 0 2
17787: PUSH
17788: LD_INT 112
17790: EQUAL
17791: OR
17792: IFFALSE 17970
// if GetSide ( vehicle ) = 3 then
17794: LD_VAR 0 1
17798: PPUSH
17799: CALL_OW 255
17803: PUSH
17804: LD_INT 3
17806: EQUAL
17807: IFFALSE 17970
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 264
17818: PUSH
17819: LD_INT 46
17821: EQUAL
17822: PUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 264
17832: PUSH
17833: LD_INT 45
17835: EQUAL
17836: OR
17837: PUSH
17838: LD_VAR 0 1
17842: PPUSH
17843: CALL_OW 264
17847: PUSH
17848: LD_INT 44
17850: EQUAL
17851: OR
17852: IFFALSE 17927
// begin russianTanks = russianTanks ^ vehicle ;
17854: LD_ADDR_EXP 40
17858: PUSH
17859: LD_EXP 40
17863: PUSH
17864: LD_VAR 0 1
17868: ADD
17869: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
17870: LD_EXP 44
17874: PUSH
17875: LD_INT 1
17877: EQUAL
17878: PUSH
17879: LD_EXP 44
17883: PUSH
17884: LD_INT 0
17886: EQUAL
17887: OR
17888: IFFALSE 17902
// ComEnterUnit ( vehicle , ruteleprt ) ;
17890: LD_VAR 0 1
17894: PPUSH
17895: LD_INT 10
17897: PPUSH
17898: CALL_OW 120
// if attackTactic = 2 then
17902: LD_EXP 44
17906: PUSH
17907: LD_INT 2
17909: EQUAL
17910: IFFALSE 17927
// ComMoveXY ( vehicle , 88 , 69 ) ;
17912: LD_VAR 0 1
17916: PPUSH
17917: LD_INT 88
17919: PPUSH
17920: LD_INT 69
17922: PPUSH
17923: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 264
17936: PUSH
17937: LD_INT 49
17939: EQUAL
17940: IFFALSE 17970
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17942: LD_ADDR_EXP 41
17946: PUSH
17947: LD_EXP 41
17951: PUSH
17952: LD_VAR 0 1
17956: ADD
17957: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_INT 137
17965: PPUSH
17966: CALL_OW 120
// end ; end ; end ;
17970: PPOPN 2
17972: END
// on UnitGoesToRed ( unit ) do var i ;
17973: LD_INT 0
17975: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 255
17985: PUSH
17986: LD_INT 3
17988: EQUAL
17989: PUSH
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 247
17999: PUSH
18000: LD_INT 2
18002: EQUAL
18003: AND
18004: IFFALSE 18122
// begin if russianTanks > 0 then
18006: LD_EXP 40
18010: PUSH
18011: LD_INT 0
18013: GREATER
18014: IFFALSE 18064
// for i in russianTanks do
18016: LD_ADDR_VAR 0 2
18020: PUSH
18021: LD_EXP 40
18025: PUSH
18026: FOR_IN
18027: IFFALSE 18062
// if i = unit then
18029: LD_VAR 0 2
18033: PUSH
18034: LD_VAR 0 1
18038: EQUAL
18039: IFFALSE 18060
// russianTanks = russianTanks diff [ unit ] ;
18041: LD_ADDR_EXP 40
18045: PUSH
18046: LD_EXP 40
18050: PUSH
18051: LD_VAR 0 1
18055: PUSH
18056: EMPTY
18057: LIST
18058: DIFF
18059: ST_TO_ADDR
18060: GO 18026
18062: POP
18063: POP
// if russianTimeLapsers > 0 then
18064: LD_EXP 41
18068: PUSH
18069: LD_INT 0
18071: GREATER
18072: IFFALSE 18122
// for i in russianTimeLapsers do
18074: LD_ADDR_VAR 0 2
18078: PUSH
18079: LD_EXP 41
18083: PUSH
18084: FOR_IN
18085: IFFALSE 18120
// if i = unit then
18087: LD_VAR 0 2
18091: PUSH
18092: LD_VAR 0 1
18096: EQUAL
18097: IFFALSE 18118
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18099: LD_ADDR_EXP 41
18103: PUSH
18104: LD_EXP 41
18108: PUSH
18109: LD_VAR 0 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: DIFF
18117: ST_TO_ADDR
18118: GO 18084
18120: POP
18121: POP
// end ; end ;
18122: PPOPN 2
18124: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18125: LD_INT 0
18127: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18128: LD_VAR 0 2
18132: PPUSH
18133: CALL_OW 255
18137: PUSH
18138: LD_INT 3
18140: EQUAL
18141: PUSH
18142: LD_VAR 0 2
18146: PPUSH
18147: CALL_OW 257
18151: PUSH
18152: LD_INT 3
18154: EQUAL
18155: AND
18156: PUSH
18157: LD_INT 21
18159: PPUSH
18160: CALL_OW 255
18164: PUSH
18165: LD_INT 3
18167: EQUAL
18168: AND
18169: PUSH
18170: LD_INT 21
18172: PPUSH
18173: CALL_OW 302
18177: AND
18178: IFFALSE 18192
// ComEnterUnit ( human , ru_fact ) ;
18180: LD_VAR 0 2
18184: PPUSH
18185: LD_INT 21
18187: PPUSH
18188: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18192: LD_VAR 0 2
18196: PPUSH
18197: CALL_OW 257
18201: PUSH
18202: LD_INT 4
18204: EQUAL
18205: PUSH
18206: LD_VAR 0 2
18210: PPUSH
18211: CALL_OW 255
18215: PUSH
18216: LD_INT 3
18218: EQUAL
18219: AND
18220: PUSH
18221: LD_EXP 42
18225: PUSH
18226: LD_INT 0
18228: EQUAL
18229: AND
18230: IFFALSE 18292
// for i in RuScientists do
18232: LD_ADDR_VAR 0 3
18236: PUSH
18237: LD_EXP 35
18241: PUSH
18242: FOR_IN
18243: IFFALSE 18290
// if i = human then
18245: LD_VAR 0 3
18249: PUSH
18250: LD_VAR 0 2
18254: EQUAL
18255: IFFALSE 18288
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18257: LD_VAR 0 3
18261: PPUSH
18262: LD_INT 13
18264: PUSH
18265: LD_INT 14
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PPUSH
18275: LD_INT 2
18277: PPUSH
18278: CALL_OW 12
18282: ARRAY
18283: PPUSH
18284: CALL_OW 113
18288: GO 18242
18290: POP
18291: POP
// end ;
18292: PPOPN 3
18294: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18295: LD_INT 0
18297: PPUSH
18298: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18299: LD_VAR 0 2
18303: PPUSH
18304: CALL_OW 255
18308: PUSH
18309: LD_INT 3
18311: EQUAL
18312: PUSH
18313: LD_VAR 0 2
18317: PPUSH
18318: CALL_OW 257
18322: PUSH
18323: LD_INT 4
18325: EQUAL
18326: AND
18327: IFFALSE 18469
// for i in RuScientists do
18329: LD_ADDR_VAR 0 3
18333: PUSH
18334: LD_EXP 35
18338: PUSH
18339: FOR_IN
18340: IFFALSE 18467
// if i = human then
18342: LD_VAR 0 3
18346: PUSH
18347: LD_VAR 0 2
18351: EQUAL
18352: IFFALSE 18465
// if IsOk ( rutp ) then
18354: LD_INT 137
18356: PPUSH
18357: CALL_OW 302
18361: IFFALSE 18434
// begin rnd = rand ( 1 , 2 ) ;
18363: LD_ADDR_VAR 0 4
18367: PUSH
18368: LD_INT 1
18370: PPUSH
18371: LD_INT 2
18373: PPUSH
18374: CALL_OW 12
18378: ST_TO_ADDR
// if rnd = 1 then
18379: LD_VAR 0 4
18383: PUSH
18384: LD_INT 1
18386: EQUAL
18387: IFFALSE 18401
// ComEnterUnit ( vehicle , rutp ) ;
18389: LD_VAR 0 1
18393: PPUSH
18394: LD_INT 137
18396: PPUSH
18397: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18401: LD_VAR 0 1
18405: PPUSH
18406: LD_INT 13
18408: PUSH
18409: LD_INT 14
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 1
18418: PPUSH
18419: LD_INT 2
18421: PPUSH
18422: CALL_OW 12
18426: ARRAY
18427: PPUSH
18428: CALL_OW 173
// end else
18432: GO 18465
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18434: LD_VAR 0 1
18438: PPUSH
18439: LD_INT 13
18441: PUSH
18442: LD_INT 14
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: PPUSH
18452: LD_INT 2
18454: PPUSH
18455: CALL_OW 12
18459: ARRAY
18460: PPUSH
18461: CALL_OW 113
// end ;
18465: GO 18339
18467: POP
18468: POP
// end ; end_of_file
18469: PPOPN 4
18471: END
// every 0 0$1 trigger ruAI = 1 do
18472: LD_EXP 42
18476: PUSH
18477: LD_INT 1
18479: EQUAL
18480: IFFALSE 18609
18482: GO 18484
18484: DISABLE
// begin enable ;
18485: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18486: LD_INT 3
18488: PPUSH
18489: LD_INT 6
18491: PPUSH
18492: LD_INT 9
18494: PPUSH
18495: LD_EXP 39
18499: PPUSH
18500: CALL 14015 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18504: LD_INT 3
18506: PPUSH
18507: LD_INT 4
18509: PPUSH
18510: LD_INT 10
18512: PPUSH
18513: LD_EXP 39
18517: PPUSH
18518: CALL 14015 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18522: LD_INT 3
18524: PPUSH
18525: LD_INT 9
18527: PPUSH
18528: CALL 15216 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18532: LD_INT 3
18534: PPUSH
18535: LD_INT 10
18537: PPUSH
18538: CALL 15216 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18542: LD_INT 3
18544: PPUSH
18545: LD_INT 16
18547: PPUSH
18548: LD_INT 9
18550: PPUSH
18551: LD_INT 91
18553: PPUSH
18554: CALL 14406 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18558: LD_INT 3
18560: PPUSH
18561: LD_INT 17
18563: PPUSH
18564: LD_INT 10
18566: PPUSH
18567: LD_INT 47
18569: PUSH
18570: LD_INT 129
18572: PUSH
18573: LD_INT 135
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL 14406 0 4
// AttackVehicles ( 3 ) ;
18585: LD_INT 3
18587: PPUSH
18588: CALL 15543 0 1
// IntBazooka ( 3 ) ;
18592: LD_INT 3
18594: PPUSH
18595: CALL 16036 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18599: LD_INT 3
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: CALL 14986 0 2
// end ;
18609: END
// every 0 0$1 do
18610: GO 18612
18612: DISABLE
// begin enable ;
18613: ENABLE
// TimeLapsersAI ( 3 ) ;
18614: LD_INT 3
18616: PPUSH
18617: CALL 15841 0 1
// end ;
18621: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18622: LD_INT 4
18624: PPUSH
18625: CALL_OW 303
18629: IFFALSE 18644
18631: GO 18633
18633: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
18634: LD_INT 3
18636: PPUSH
18637: LD_INT 4
18639: PPUSH
18640: CALL 16688 0 2
18644: END
// every 0 0$1 do
18645: GO 18647
18647: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
18648: LD_INT 3
18650: PPUSH
18651: LD_INT 91
18653: PPUSH
18654: LD_INT 3
18656: PPUSH
18657: CALL 13930 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
18661: LD_INT 3
18663: PPUSH
18664: LD_INT 47
18666: PPUSH
18667: LD_INT 3
18669: PPUSH
18670: CALL 13930 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
18674: LD_INT 3
18676: PPUSH
18677: LD_INT 129
18679: PPUSH
18680: LD_INT 3
18682: PPUSH
18683: CALL 13930 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
18687: LD_INT 3
18689: PPUSH
18690: LD_INT 3
18692: PPUSH
18693: LD_INT 3
18695: PPUSH
18696: CALL 13930 0 3
// end ;
18700: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
18701: LD_EXP 28
18705: PUSH
18706: LD_INT 2
18708: EQUAL
18709: PUSH
18710: LD_INT 21
18712: PPUSH
18713: CALL_OW 255
18717: PUSH
18718: LD_INT 3
18720: EQUAL
18721: AND
18722: PUSH
18723: LD_INT 112
18725: PPUSH
18726: CALL_OW 255
18730: PUSH
18731: LD_INT 3
18733: EQUAL
18734: AND
18735: PUSH
18736: LD_INT 21
18738: PPUSH
18739: CALL_OW 302
18743: AND
18744: PUSH
18745: LD_INT 112
18747: PPUSH
18748: CALL_OW 302
18752: AND
18753: PUSH
18754: LD_INT 22
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 21
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 50
18776: PUSH
18777: EMPTY
18778: LIST
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: LD_INT 58
18785: PUSH
18786: EMPTY
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: PPUSH
18799: CALL_OW 69
18803: PUSH
18804: LD_INT 18
18806: PPUSH
18807: LD_INT 22
18809: PUSH
18810: LD_INT 3
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PPUSH
18831: CALL_OW 70
18835: PUSH
18836: LD_INT 0
18838: EQUAL
18839: DIFF
18840: AND
18841: IFFALSE 18959
18843: GO 18845
18845: DISABLE
// begin enable ;
18846: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18847: LD_INT 3
18849: PPUSH
18850: LD_INT 21
18852: PPUSH
18853: LD_INT 3
18855: PUSH
18856: LD_INT 4
18858: PUSH
18859: LD_INT 4
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: PUSH
18867: LD_OWVAR 67
18871: ARRAY
18872: PPUSH
18873: LD_INT 46
18875: PUSH
18876: LD_INT 45
18878: PUSH
18879: LD_INT 44
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: PPUSH
18887: LD_INT 3
18889: PPUSH
18890: LD_INT 3
18892: PPUSH
18893: LD_INT 24
18895: PPUSH
18896: CALL 15396 0 7
// if russianTimeLapsers = 0 then
18900: LD_EXP 41
18904: PUSH
18905: LD_INT 0
18907: EQUAL
18908: IFFALSE 18959
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18910: LD_INT 3
18912: PPUSH
18913: LD_INT 112
18915: PPUSH
18916: LD_INT 1
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: LD_INT 2
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: PUSH
18930: LD_OWVAR 67
18934: ARRAY
18935: PPUSH
18936: LD_INT 49
18938: PUSH
18939: LD_INT 49
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PPUSH
18946: LD_INT 3
18948: PPUSH
18949: LD_INT 3
18951: PPUSH
18952: LD_INT 24
18954: PPUSH
18955: CALL 15396 0 7
// end ;
18959: END
// every 0 0$1 trigger arabianMines do var i ;
18960: LD_EXP 45
18964: IFFALSE 19085
18966: GO 18968
18968: DISABLE
18969: LD_INT 0
18971: PPUSH
// begin enable ;
18972: ENABLE
// for i in arabianMines do
18973: LD_ADDR_VAR 0 1
18977: PUSH
18978: LD_EXP 45
18982: PUSH
18983: FOR_IN
18984: IFFALSE 19083
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18986: LD_INT 22
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 92
18998: PUSH
18999: LD_VAR 0 1
19003: PUSH
19004: LD_INT 1
19006: ARRAY
19007: PUSH
19008: LD_VAR 0 1
19012: PUSH
19013: LD_INT 2
19015: ARRAY
19016: PUSH
19017: LD_INT 3
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PPUSH
19030: CALL_OW 69
19034: IFFALSE 19081
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19036: LD_VAR 0 1
19040: PUSH
19041: LD_INT 1
19043: ARRAY
19044: PPUSH
19045: LD_VAR 0 1
19049: PUSH
19050: LD_INT 2
19052: ARRAY
19053: PPUSH
19054: LD_INT 5
19056: PPUSH
19057: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19061: LD_ADDR_EXP 45
19065: PUSH
19066: LD_EXP 45
19070: PPUSH
19071: LD_VAR 0 1
19075: PPUSH
19076: CALL_OW 3
19080: ST_TO_ADDR
// end ; end ;
19081: GO 18983
19083: POP
19084: POP
// end ;
19085: PPOPN 1
19087: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19088: LD_EXP 29
19092: PUSH
19093: LD_INT 4
19095: EQUAL
19096: PUSH
19097: LD_EXP 30
19101: PUSH
19102: LD_INT 6
19104: PUSH
19105: LD_INT 8
19107: PUSH
19108: LD_INT 8
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: LD_OWVAR 67
19120: ARRAY
19121: EQUAL
19122: AND
19123: IFFALSE 19141
19125: GO 19127
19127: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19128: LD_INT 10
19130: PPUSH
19131: LD_INT 47
19133: PPUSH
19134: LD_INT 82
19136: PPUSH
19137: CALL_OW 243
19141: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19142: LD_EXP 29
19146: PUSH
19147: LD_INT 4
19149: EQUAL
19150: IFFALSE 19172
19152: GO 19154
19154: DISABLE
// begin enable ;
19155: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19156: LD_ADDR_EXP 44
19160: PUSH
19161: LD_INT 1
19163: PPUSH
19164: LD_INT 2
19166: PPUSH
19167: CALL_OW 12
19171: ST_TO_ADDR
// end ; end_of_file
19172: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19173: LD_EXP 35
19177: PUSH
19178: EMPTY
19179: EQUAL
19180: PUSH
19181: LD_INT 3
19183: PPUSH
19184: CALL_OW 301
19188: AND
19189: IFFALSE 19394
19191: GO 19193
19193: DISABLE
// begin if sciCounter = 0 then
19194: LD_EXP 36
19198: PUSH
19199: LD_INT 0
19201: EQUAL
19202: IFFALSE 19228
// begin Say ( JMM , D7a-JMM-1 ) ;
19204: LD_EXP 1
19208: PPUSH
19209: LD_STRING D7a-JMM-1
19211: PPUSH
19212: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19216: LD_EXP 22
19220: PPUSH
19221: LD_STRING D7a-Pow-1
19223: PPUSH
19224: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19228: LD_EXP 36
19232: PUSH
19233: LD_INT 0
19235: GREATER
19236: PUSH
19237: LD_EXP 36
19241: PUSH
19242: LD_INT 6
19244: LESS
19245: AND
19246: IFFALSE 19272
// begin Say ( JMM , D7b-JMM-1 ) ;
19248: LD_EXP 1
19252: PPUSH
19253: LD_STRING D7b-JMM-1
19255: PPUSH
19256: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19260: LD_EXP 22
19264: PPUSH
19265: LD_STRING D7b-Pow-1
19267: PPUSH
19268: CALL_OW 94
// end ; if sciCounter = 6 then
19272: LD_EXP 36
19276: PUSH
19277: LD_INT 6
19279: EQUAL
19280: IFFALSE 19390
// begin Say ( JMM , D7c-JMM-1 ) ;
19282: LD_EXP 1
19286: PPUSH
19287: LD_STRING D7c-JMM-1
19289: PPUSH
19290: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19294: LD_EXP 22
19298: PPUSH
19299: LD_STRING D7c-Pow-1
19301: PPUSH
19302: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19306: LD_EXP 1
19310: PPUSH
19311: LD_STRING D7d-JMM-1
19313: PPUSH
19314: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19318: LD_EXP 22
19322: PPUSH
19323: LD_STRING D7d-Pow-1
19325: PPUSH
19326: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19330: LD_EXP 1
19334: PPUSH
19335: LD_STRING D7d-JMM-2
19337: PPUSH
19338: CALL_OW 88
// if askSiberite = 1 then
19342: LD_EXP 33
19346: PUSH
19347: LD_INT 1
19349: EQUAL
19350: IFFALSE 19366
// begin Say ( JMM , D7d-JMM-2a ) ;
19352: LD_EXP 1
19356: PPUSH
19357: LD_STRING D7d-JMM-2a
19359: PPUSH
19360: CALL_OW 88
// end else
19364: GO 19378
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19366: LD_EXP 22
19370: PPUSH
19371: LD_STRING D7d-Pow-2
19373: PPUSH
19374: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19378: LD_EXP 22
19382: PPUSH
19383: LD_STRING D7d-Pow-2a
19385: PPUSH
19386: CALL_OW 94
// end ; FinishMission ;
19390: CALL 19395 0 0
// end ;
19394: END
// export function FinishMission ; begin
19395: LD_INT 0
19397: PPUSH
// if teleportExplored = 1 then
19398: LD_EXP 34
19402: PUSH
19403: LD_INT 1
19405: EQUAL
19406: IFFALSE 19420
// AddMedal ( Teleport , 1 ) else
19408: LD_STRING Teleport
19410: PPUSH
19411: LD_INT 1
19413: PPUSH
19414: CALL_OW 101
19418: GO 19431
// AddMedal ( Teleport , - 1 ) ;
19420: LD_STRING Teleport
19422: PPUSH
19423: LD_INT 1
19425: NEG
19426: PPUSH
19427: CALL_OW 101
// if sciCounter > 2 then
19431: LD_EXP 36
19435: PUSH
19436: LD_INT 2
19438: GREATER
19439: IFFALSE 19453
// AddMedal ( Materials , 1 ) else
19441: LD_STRING Materials
19443: PPUSH
19444: LD_INT 1
19446: PPUSH
19447: CALL_OW 101
19451: GO 19464
// AddMedal ( Materials , - 1 ) ;
19453: LD_STRING Materials
19455: PPUSH
19456: LD_INT 1
19458: NEG
19459: PPUSH
19460: CALL_OW 101
// if sciCounter = 6 then
19464: LD_EXP 36
19468: PUSH
19469: LD_INT 6
19471: EQUAL
19472: IFFALSE 19496
// begin AddMedal ( Scientists , 1 ) ;
19474: LD_STRING Scientists
19476: PPUSH
19477: LD_INT 1
19479: PPUSH
19480: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19484: LD_INT 1
19486: PPUSH
19487: LD_STRING 12_SciDed_1
19489: PPUSH
19490: CALL_OW 39
// end else
19494: GO 19517
// begin AddMedal ( Scientists , - 1 ) ;
19496: LD_STRING Scientists
19498: PPUSH
19499: LD_INT 1
19501: NEG
19502: PPUSH
19503: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19507: LD_INT 0
19509: PPUSH
19510: LD_STRING 12_SciDed_1
19512: PPUSH
19513: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19517: LD_EXP 32
19521: PPUSH
19522: LD_STRING 12_MainDepositFake_1
19524: PPUSH
19525: CALL_OW 39
// GiveMedals ( MAIN ) ;
19529: LD_STRING MAIN
19531: PPUSH
19532: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19536: LD_INT 22
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 21
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 25
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 25
19571: PUSH
19572: LD_INT 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 25
19581: PUSH
19582: LD_INT 3
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 25
19591: PUSH
19592: LD_INT 4
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 25
19601: PUSH
19602: LD_INT 5
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 25
19611: PUSH
19612: LD_INT 8
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 69
19637: PPUSH
19638: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19642: LD_EXP 1
19646: PPUSH
19647: LD_EXP 47
19651: PUSH
19652: LD_STRING JMM
19654: STR
19655: PPUSH
19656: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19660: LD_EXP 7
19664: PPUSH
19665: LD_EXP 47
19669: PUSH
19670: LD_STRING Brown
19672: STR
19673: PPUSH
19674: CALL 13084 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19678: LD_EXP 3
19682: PPUSH
19683: LD_EXP 47
19687: PUSH
19688: LD_STRING Donaldson
19690: STR
19691: PPUSH
19692: CALL 13084 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19696: LD_EXP 4
19700: PPUSH
19701: LD_EXP 47
19705: PUSH
19706: LD_STRING Bobby
19708: STR
19709: PPUSH
19710: CALL 13084 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19714: LD_EXP 5
19718: PPUSH
19719: LD_EXP 47
19723: PUSH
19724: LD_STRING Cyrus
19726: STR
19727: PPUSH
19728: CALL 13084 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19732: LD_EXP 2
19736: PPUSH
19737: LD_EXP 47
19741: PUSH
19742: LD_STRING Lisa
19744: STR
19745: PPUSH
19746: CALL 13084 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19750: LD_EXP 12
19754: PPUSH
19755: LD_EXP 47
19759: PUSH
19760: LD_STRING Frank
19762: STR
19763: PPUSH
19764: CALL 13084 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19768: LD_EXP 13
19772: PPUSH
19773: LD_EXP 47
19777: PUSH
19778: LD_STRING Kikuchi
19780: STR
19781: PPUSH
19782: CALL 13084 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19786: LD_EXP 9
19790: PPUSH
19791: LD_EXP 47
19795: PUSH
19796: LD_STRING Houten
19798: STR
19799: PPUSH
19800: CALL 13084 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19804: LD_EXP 11
19808: PPUSH
19809: LD_EXP 47
19813: PUSH
19814: LD_STRING Gary
19816: STR
19817: PPUSH
19818: CALL 13084 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19822: LD_EXP 10
19826: PPUSH
19827: LD_EXP 47
19831: PUSH
19832: LD_STRING Cornell
19834: STR
19835: PPUSH
19836: CALL 13084 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19840: LD_EXP 6
19844: PPUSH
19845: LD_EXP 47
19849: PUSH
19850: LD_STRING Denis
19852: STR
19853: PPUSH
19854: CALL 13084 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19858: LD_EXP 8
19862: PPUSH
19863: LD_EXP 47
19867: PUSH
19868: LD_STRING Gladstone
19870: STR
19871: PPUSH
19872: CALL 13084 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19876: LD_INT 50
19878: PUSH
19879: EMPTY
19880: LIST
19881: PUSH
19882: LD_INT 22
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 23
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 21
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 25
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 25
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 25
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 25
19947: PUSH
19948: LD_INT 4
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 25
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 25
19967: PUSH
19968: LD_INT 8
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: PPUSH
19991: CALL_OW 69
19995: PUSH
19996: LD_EXP 1
20000: PUSH
20001: LD_EXP 7
20005: PUSH
20006: LD_EXP 3
20010: PUSH
20011: LD_EXP 4
20015: PUSH
20016: LD_EXP 5
20020: PUSH
20021: LD_EXP 2
20025: PUSH
20026: LD_EXP 12
20030: PUSH
20031: LD_EXP 8
20035: PUSH
20036: LD_EXP 13
20040: PUSH
20041: LD_EXP 6
20045: PUSH
20046: LD_EXP 9
20050: PUSH
20051: LD_EXP 11
20055: PUSH
20056: LD_EXP 10
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: DIFF
20076: PPUSH
20077: LD_STRING 12_other_survivors
20079: PPUSH
20080: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20084: LD_INT 50
20086: PUSH
20087: EMPTY
20088: LIST
20089: PUSH
20090: LD_INT 22
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 23
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 21
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: LD_INT 25
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 25
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 25
20145: PUSH
20146: LD_INT 3
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 25
20155: PUSH
20156: LD_INT 4
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 25
20165: PUSH
20166: LD_INT 5
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 25
20175: PUSH
20176: LD_INT 8
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: PPUSH
20199: CALL_OW 69
20203: PPUSH
20204: LD_STRING 12_kurt_squad
20206: PPUSH
20207: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
20211: LD_STRING 11_others
20213: PPUSH
20214: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
20218: LD_EXP 14
20222: PPUSH
20223: LD_STRING 11_others
20225: PPUSH
20226: CALL_OW 38
// YouWin ;
20230: CALL_OW 103
// end ; end_of_file
20234: LD_VAR 0 1
20238: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20239: LD_EXP 1
20243: PPUSH
20244: CALL_OW 301
20248: IFFALSE 20260
20250: GO 20252
20252: DISABLE
// YouLost ( JMM ) ; end_of_file
20253: LD_STRING JMM
20255: PPUSH
20256: CALL_OW 104
20260: END
// every 0 0$01 do
20261: GO 20263
20263: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20264: LD_INT 1050
20266: PPUSH
20267: CALL_OW 67
// if cratesSpawned < 6 then
20271: LD_EXP 46
20275: PUSH
20276: LD_INT 6
20278: LESS
20279: IFFALSE 20316
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20281: LD_INT 3
20283: PPUSH
20284: LD_INT 5
20286: PPUSH
20287: CALL_OW 12
20291: PPUSH
20292: LD_INT 21
20294: PPUSH
20295: LD_INT 1
20297: PPUSH
20298: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20302: LD_ADDR_EXP 46
20306: PUSH
20307: LD_EXP 46
20311: PUSH
20312: LD_INT 1
20314: PLUS
20315: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20316: LD_EXP 46
20320: PUSH
20321: LD_INT 6
20323: GREATEREQUAL
20324: PUSH
20325: LD_EXP 46
20329: PUSH
20330: LD_INT 12
20332: LESS
20333: AND
20334: IFFALSE 20378
// begin wait ( 0 0$30 ) ;
20336: LD_INT 1050
20338: PPUSH
20339: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20343: LD_INT 3
20345: PPUSH
20346: LD_INT 5
20348: PPUSH
20349: CALL_OW 12
20353: PPUSH
20354: LD_INT 21
20356: PPUSH
20357: LD_INT 1
20359: PPUSH
20360: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20364: LD_ADDR_EXP 46
20368: PUSH
20369: LD_EXP 46
20373: PUSH
20374: LD_INT 1
20376: PLUS
20377: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20378: LD_EXP 46
20382: PUSH
20383: LD_INT 12
20385: GREATEREQUAL
20386: IFFALSE 20430
// begin wait ( 1 1$30 ) ;
20388: LD_INT 3150
20390: PPUSH
20391: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20395: LD_INT 3
20397: PPUSH
20398: LD_INT 5
20400: PPUSH
20401: CALL_OW 12
20405: PPUSH
20406: LD_INT 21
20408: PPUSH
20409: LD_INT 1
20411: PPUSH
20412: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20416: LD_ADDR_EXP 46
20420: PUSH
20421: LD_EXP 46
20425: PUSH
20426: LD_INT 1
20428: PLUS
20429: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20430: LD_EXP 46
20434: PUSH
20435: LD_INT 15
20437: GREATEREQUAL
20438: IFFALSE 20264
// end ;
20440: END
