// export JMM , Donaldson , Lisa , Cyrus , Denis , Frank , Cornell , Campell ; export Brown , Gary , amCargo1 , amCargo2 ; export Bobby , amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// RuScientists = [ ] ;
  18: LD_ADDR_EXP 29
  22: PUSH
  23: EMPTY
  24: ST_TO_ADDR
// sciCounter = 0 ;
  25: LD_ADDR_EXP 30
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// secondPass = 0 ;
  33: LD_ADDR_EXP 23
  37: PUSH
  38: LD_INT 0
  40: ST_TO_ADDR
// teleportExplored = 0 ;
  41: LD_ADDR_EXP 28
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// askSiberite = 0 ;
  49: LD_ADDR_EXP 27
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// warWithLegion = 0 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// fakeInfo = 0 ;
  65: LD_ADDR_EXP 26
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// eventVar1 = 0 ;
  73: LD_ADDR_EXP 31
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// debugMode = 1 ;
  81: LD_ADDR_EXP 32
  85: PUSH
  86: LD_INT 1
  88: ST_TO_ADDR
// PrepareAmericanHeroes ;
  89: CALL 427 0 0
// PrepareRussianCommander ;
  93: CALL 1698 0 0
// PrepareWestBase ;
  97: CALL 2014 0 0
// PrepareEastBase ;
 101: CALL 1770 0 0
// PrepareOtherRussians ;
 105: CALL 2090 0 0
// end ;
 109: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 110: LD_EXP 32
 114: PUSH
 115: LD_INT 1
 117: EQUAL
 118: IFFALSE 424
 120: GO 122
 122: DISABLE
 123: LD_INT 0
 125: PPUSH
// begin enable ;
 126: ENABLE
// fogoff ( true ) ;
 127: LD_INT 1
 129: PPUSH
 130: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 134: LD_ADDR_VAR 0 1
 138: PUSH
 139: LD_INT 22
 141: PUSH
 142: LD_INT 1
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: PUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 1
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PPUSH
 163: CALL_OW 69
 167: PUSH
 168: FOR_IN
 169: IFFALSE 185
// SetLives ( i , 1000 ) ;
 171: LD_VAR 0 1
 175: PPUSH
 176: LD_INT 1000
 178: PPUSH
 179: CALL_OW 234
 183: GO 168
 185: POP
 186: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 187: LD_ADDR_VAR 0 1
 191: PUSH
 192: LD_INT 22
 194: PUSH
 195: LD_INT 1
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 30
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: PUSH
 215: LD_INT 30
 217: PUSH
 218: LD_INT 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PPUSH
 234: CALL_OW 69
 238: PUSH
 239: FOR_IN
 240: IFFALSE 264
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 242: LD_VAR 0 1
 246: PPUSH
 247: CALL_OW 274
 251: PPUSH
 252: LD_INT 1
 254: PPUSH
 255: LD_INT 9999
 257: PPUSH
 258: CALL_OW 277
 262: GO 239
 264: POP
 265: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 2
 283: PUSH
 284: LD_INT 30
 286: PUSH
 287: LD_INT 0
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 30
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PPUSH
 313: CALL_OW 69
 317: PUSH
 318: FOR_IN
 319: IFFALSE 343
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 321: LD_VAR 0 1
 325: PPUSH
 326: CALL_OW 274
 330: PPUSH
 331: LD_INT 2
 333: PPUSH
 334: LD_INT 9999
 336: PPUSH
 337: CALL_OW 277
 341: GO 318
 343: POP
 344: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 345: LD_ADDR_VAR 0 1
 349: PUSH
 350: LD_INT 22
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: LD_INT 2
 362: PUSH
 363: LD_INT 30
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PPUSH
 392: CALL_OW 69
 396: PUSH
 397: FOR_IN
 398: IFFALSE 422
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 400: LD_VAR 0 1
 404: PPUSH
 405: CALL_OW 274
 409: PPUSH
 410: LD_INT 3
 412: PPUSH
 413: LD_INT 9999
 415: PPUSH
 416: CALL_OW 277
 420: GO 397
 422: POP
 423: POP
// end ; end_of_file
 424: PPOPN 1
 426: END
// export function PrepareAmericanHeroes ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side = 1 ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_INT 1
 437: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 438: LD_ADDR_EXP 1
 442: PUSH
 443: LD_STRING JMM
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: CALL 5957 0 2
 453: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 454: LD_ADDR_EXP 2
 458: PUSH
 459: LD_STRING Donaldson
 461: PPUSH
 462: LD_INT 0
 464: PPUSH
 465: CALL 5957 0 2
 469: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 470: LD_ADDR_EXP 3
 474: PUSH
 475: LD_STRING Lisa
 477: PPUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL 5957 0 2
 485: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 486: LD_ADDR_EXP 4
 490: PUSH
 491: LD_STRING Cyrus
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: CALL 5957 0 2
 501: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 502: LD_ADDR_EXP 5
 506: PUSH
 507: LD_STRING Denis
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL 5957 0 2
 517: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 518: LD_ADDR_EXP 6
 522: PUSH
 523: LD_STRING Frank
 525: PPUSH
 526: LD_INT 0
 528: PPUSH
 529: CALL 5957 0 2
 533: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornell , false ) ;
 534: LD_ADDR_EXP 7
 538: PUSH
 539: LD_STRING Cornell
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL 5957 0 2
 549: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 550: LD_ADDR_EXP 19
 554: PUSH
 555: LD_STRING Powell
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: CALL 5957 0 2
 565: ST_TO_ADDR
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 566: LD_EXP 1
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 0
 576: PPUSH
 577: CALL_OW 49
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 581: LD_EXP 2
 585: PPUSH
 586: LD_INT 4
 588: PPUSH
 589: LD_INT 0
 591: PPUSH
 592: CALL_OW 49
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 596: LD_EXP 3
 600: PPUSH
 601: LD_INT 4
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 611: LD_EXP 4
 615: PPUSH
 616: LD_INT 4
 618: PPUSH
 619: LD_INT 0
 621: PPUSH
 622: CALL_OW 49
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 626: LD_EXP 5
 630: PPUSH
 631: LD_INT 4
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 641: LD_EXP 6
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 49
// PlaceUnitArea ( Cornell , PlayerSpawn , false ) ;
 656: LD_EXP 7
 660: PPUSH
 661: LD_INT 4
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL_OW 49
// end ;
 671: LD_VAR 0 1
 675: RET
// export function PowellSupport1 ; var veh , un ; begin
 676: LD_INT 0
 678: PPUSH
 679: PPUSH
 680: PPUSH
// uc_side = 1 ;
 681: LD_ADDR_OWVAR 20
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// uc_nation = 1 ;
 689: LD_ADDR_OWVAR 21
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 697: LD_ADDR_EXP 9
 701: PUSH
 702: LD_STRING Brown
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL 5957 0 2
 712: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
 713: LD_ADDR_EXP 10
 717: PUSH
 718: LD_STRING Gary
 720: PPUSH
 721: LD_INT 0
 723: PPUSH
 724: CALL 5957 0 2
 728: ST_TO_ADDR
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
 729: LD_EXP 9
 733: PPUSH
 734: LD_INT 4
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 49
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
 744: LD_EXP 10
 748: PPUSH
 749: LD_INT 4
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 49
// SetClass ( Brown , 2 ) ;
 759: LD_EXP 9
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// hc_gallery =  ;
 771: LD_ADDR_OWVAR 33
 775: PUSH
 776: LD_STRING 
 778: ST_TO_ADDR
// hc_name =  ;
 779: LD_ADDR_OWVAR 26
 783: PUSH
 784: LD_STRING 
 786: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
 787: LD_ADDR_OWVAR 37
 791: PUSH
 792: LD_INT 3
 794: ST_TO_ADDR
// vc_engine = 3 ;
 795: LD_ADDR_OWVAR 39
 799: PUSH
 800: LD_INT 3
 802: ST_TO_ADDR
// vc_control = 1 ;
 803: LD_ADDR_OWVAR 38
 807: PUSH
 808: LD_INT 1
 810: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 811: LD_ADDR_OWVAR 40
 815: PUSH
 816: LD_INT 4
 818: ST_TO_ADDR
// veh = CreateVehicle ;
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: CALL_OW 45
 828: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 829: LD_VAR 0 2
 833: PPUSH
 834: LD_INT 4
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// SetDir ( veh , 4 ) ;
 844: LD_VAR 0 2
 848: PPUSH
 849: LD_INT 4
 851: PPUSH
 852: CALL_OW 233
// PrepareHuman ( false , 4 , 10 ) ;
 856: LD_INT 0
 858: PPUSH
 859: LD_INT 4
 861: PPUSH
 862: LD_INT 10
 864: PPUSH
 865: CALL_OW 380
// un = CreateHuman ;
 869: LD_ADDR_VAR 0 3
 873: PUSH
 874: CALL_OW 44
 878: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 879: LD_VAR 0 3
 883: PPUSH
 884: LD_VAR 0 2
 888: PPUSH
 889: CALL_OW 52
// vc_chassis = us_medium_wheeled ;
 893: LD_ADDR_OWVAR 37
 897: PUSH
 898: LD_INT 2
 900: ST_TO_ADDR
// vc_weapon = us_double_gun ;
 901: LD_ADDR_OWVAR 40
 905: PUSH
 906: LD_INT 5
 908: ST_TO_ADDR
// veh = CreateVehicle ;
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: CALL_OW 45
 918: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 919: LD_VAR 0 2
 923: PPUSH
 924: LD_INT 4
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL_OW 49
// SetDir ( veh , 4 ) ;
 934: LD_VAR 0 2
 938: PPUSH
 939: LD_INT 4
 941: PPUSH
 942: CALL_OW 233
// PrepareHuman ( false , 4 , 10 ) ;
 946: LD_INT 0
 948: PPUSH
 949: LD_INT 4
 951: PPUSH
 952: LD_INT 10
 954: PPUSH
 955: CALL_OW 380
// un = CreateHuman ;
 959: LD_ADDR_VAR 0 3
 963: PUSH
 964: CALL_OW 44
 968: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 969: LD_VAR 0 3
 973: PPUSH
 974: LD_VAR 0 2
 978: PPUSH
 979: CALL_OW 52
// vc_control = 3 ;
 983: LD_ADDR_OWVAR 38
 987: PUSH
 988: LD_INT 3
 990: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
 991: LD_ADDR_OWVAR 40
 995: PUSH
 996: LD_INT 12
 998: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
 999: LD_ADDR_EXP 11
1003: PUSH
1004: CALL_OW 45
1008: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
1009: LD_ADDR_EXP 12
1013: PUSH
1014: CALL_OW 45
1018: ST_TO_ADDR
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
1019: LD_EXP 11
1023: PPUSH
1024: LD_INT 4
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
1034: LD_EXP 12
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// SetDir ( amCargo1 , 4 ) ;
1049: LD_EXP 11
1053: PPUSH
1054: LD_INT 4
1056: PPUSH
1057: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
1061: LD_EXP 12
1065: PPUSH
1066: LD_INT 4
1068: PPUSH
1069: CALL_OW 233
// AddCargo ( amCargo1 , 3 , 100 ) ;
1073: LD_EXP 11
1077: PPUSH
1078: LD_INT 3
1080: PPUSH
1081: LD_INT 100
1083: PPUSH
1084: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
1088: LD_EXP 12
1092: PPUSH
1093: LD_INT 1
1095: PPUSH
1096: LD_INT 80
1098: PPUSH
1099: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
1103: LD_EXP 12
1107: PPUSH
1108: LD_INT 3
1110: PPUSH
1111: LD_INT 20
1113: PPUSH
1114: CALL_OW 291
// end ;
1118: LD_VAR 0 1
1122: RET
// export function PowellSupport2 ; var veh , un ; begin
1123: LD_INT 0
1125: PPUSH
1126: PPUSH
1127: PPUSH
// uc_side = 1 ;
1128: LD_ADDR_OWVAR 20
1132: PUSH
1133: LD_INT 1
1135: ST_TO_ADDR
// uc_nation = 1 ;
1136: LD_ADDR_OWVAR 21
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
1144: LD_ADDR_EXP 13
1148: PUSH
1149: LD_STRING Bobby
1151: PPUSH
1152: LD_INT 0
1154: PPUSH
1155: CALL 5957 0 2
1159: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
1160: LD_ADDR_EXP 8
1164: PUSH
1165: LD_STRING Campell
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: CALL 5957 0 2
1175: ST_TO_ADDR
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
1176: LD_EXP 13
1180: PPUSH
1181: LD_INT 4
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// hc_gallery =  ;
1191: LD_ADDR_OWVAR 33
1195: PUSH
1196: LD_STRING 
1198: ST_TO_ADDR
// hc_name =  ;
1199: LD_ADDR_OWVAR 26
1203: PUSH
1204: LD_STRING 
1206: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1207: LD_ADDR_OWVAR 37
1211: PUSH
1212: LD_INT 2
1214: ST_TO_ADDR
// vc_engine = 3 ;
1215: LD_ADDR_OWVAR 39
1219: PUSH
1220: LD_INT 3
1222: ST_TO_ADDR
// vc_control = 1 ;
1223: LD_ADDR_OWVAR 38
1227: PUSH
1228: LD_INT 1
1230: ST_TO_ADDR
// vc_weapon = us_light_gun ;
1231: LD_ADDR_OWVAR 40
1235: PUSH
1236: LD_INT 3
1238: ST_TO_ADDR
// veh = CreateVehicle ;
1239: LD_ADDR_VAR 0 2
1243: PUSH
1244: CALL_OW 45
1248: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1249: LD_VAR 0 2
1253: PPUSH
1254: LD_INT 4
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 49
// SetDir ( veh , 4 ) ;
1264: LD_VAR 0 2
1268: PPUSH
1269: LD_INT 4
1271: PPUSH
1272: CALL_OW 233
// PlaceHumanInUnit ( Campell , veh ) ;
1276: LD_EXP 8
1280: PPUSH
1281: LD_VAR 0 2
1285: PPUSH
1286: CALL_OW 52
// vc_control = 3 ;
1290: LD_ADDR_OWVAR 38
1294: PUSH
1295: LD_INT 3
1297: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1298: LD_ADDR_OWVAR 40
1302: PUSH
1303: LD_INT 12
1305: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
1306: LD_ADDR_EXP 14
1310: PUSH
1311: CALL_OW 45
1315: ST_TO_ADDR
// amCargo4 = CreateVehicle ;
1316: LD_ADDR_EXP 15
1320: PUSH
1321: CALL_OW 45
1325: ST_TO_ADDR
// amCargo5 = CreateVehicle ;
1326: LD_ADDR_EXP 16
1330: PUSH
1331: CALL_OW 45
1335: ST_TO_ADDR
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
1336: LD_EXP 14
1340: PPUSH
1341: LD_INT 4
1343: PPUSH
1344: LD_INT 0
1346: PPUSH
1347: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
1351: LD_EXP 15
1355: PPUSH
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
1366: LD_EXP 16
1370: PPUSH
1371: LD_INT 4
1373: PPUSH
1374: LD_INT 0
1376: PPUSH
1377: CALL_OW 49
// SetDir ( amCargo3 , 4 ) ;
1381: LD_EXP 14
1385: PPUSH
1386: LD_INT 4
1388: PPUSH
1389: CALL_OW 233
// SetDir ( amCargo4 , 4 ) ;
1393: LD_EXP 15
1397: PPUSH
1398: LD_INT 4
1400: PPUSH
1401: CALL_OW 233
// SetDir ( amCargo5 , 4 ) ;
1405: LD_EXP 16
1409: PPUSH
1410: LD_INT 4
1412: PPUSH
1413: CALL_OW 233
// AddCargo ( amCargo3 , 1 , 100 ) ;
1417: LD_EXP 14
1421: PPUSH
1422: LD_INT 1
1424: PPUSH
1425: LD_INT 100
1427: PPUSH
1428: CALL_OW 291
// AddCargo ( amCargo4 , 2 , 100 ) ;
1432: LD_EXP 15
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 100
1442: PPUSH
1443: CALL_OW 291
// AddCargo ( amCargo5 , 1 , 50 ) ;
1447: LD_EXP 16
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: LD_INT 50
1457: PPUSH
1458: CALL_OW 291
// AddCargo ( amCargo5 , 2 , 50 ) ;
1462: LD_EXP 16
1466: PPUSH
1467: LD_INT 2
1469: PPUSH
1470: LD_INT 50
1472: PPUSH
1473: CALL_OW 291
// end ;
1477: LD_VAR 0 1
1481: RET
// export function PowellSupport3 ; var veh , un ; begin
1482: LD_INT 0
1484: PPUSH
1485: PPUSH
1486: PPUSH
// uc_side = 1 ;
1487: LD_ADDR_OWVAR 20
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// uc_nation = 1 ;
1495: LD_ADDR_OWVAR 21
1499: PUSH
1500: LD_INT 1
1502: ST_TO_ADDR
// hc_gallery =  ;
1503: LD_ADDR_OWVAR 33
1507: PUSH
1508: LD_STRING 
1510: ST_TO_ADDR
// hc_name =  ;
1511: LD_ADDR_OWVAR 26
1515: PUSH
1516: LD_STRING 
1518: ST_TO_ADDR
// PrepareHuman ( false , 1 , 10 ) ;
1519: LD_INT 0
1521: PPUSH
1522: LD_INT 1
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 380
// un = CreateHuman ;
1532: LD_ADDR_VAR 0 3
1536: PUSH
1537: CALL_OW 44
1541: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
1542: LD_VAR 0 3
1546: PPUSH
1547: LD_INT 4
1549: PPUSH
1550: LD_INT 0
1552: PPUSH
1553: CALL_OW 49
// vc_chassis = us_medium_wheeled ;
1557: LD_ADDR_OWVAR 37
1561: PUSH
1562: LD_INT 2
1564: ST_TO_ADDR
// vc_engine = 3 ;
1565: LD_ADDR_OWVAR 39
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// vc_control = 3 ;
1573: LD_ADDR_OWVAR 38
1577: PUSH
1578: LD_INT 3
1580: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1581: LD_ADDR_OWVAR 40
1585: PUSH
1586: LD_INT 12
1588: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: CALL_OW 45
1598: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
1599: LD_ADDR_EXP 18
1603: PUSH
1604: CALL_OW 45
1608: ST_TO_ADDR
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
1609: LD_EXP 17
1613: PPUSH
1614: LD_INT 4
1616: PPUSH
1617: LD_INT 0
1619: PPUSH
1620: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
1624: LD_EXP 18
1628: PPUSH
1629: LD_INT 4
1631: PPUSH
1632: LD_INT 0
1634: PPUSH
1635: CALL_OW 49
// SetDir ( amCargo6 , 4 ) ;
1639: LD_EXP 17
1643: PPUSH
1644: LD_INT 4
1646: PPUSH
1647: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
1651: LD_EXP 18
1655: PPUSH
1656: LD_INT 4
1658: PPUSH
1659: CALL_OW 233
// AddCargo ( amCargo6 , 1 , 100 ) ;
1663: LD_EXP 17
1667: PPUSH
1668: LD_INT 1
1670: PPUSH
1671: LD_INT 100
1673: PPUSH
1674: CALL_OW 291
// AddCargo ( amCargo7 , 2 , 100 ) ;
1678: LD_EXP 18
1682: PPUSH
1683: LD_INT 2
1685: PPUSH
1686: LD_INT 100
1688: PPUSH
1689: CALL_OW 291
// end ; end_of_file
1693: LD_VAR 0 1
1697: RET
// export function PrepareRussianCommander ; begin
1698: LD_INT 0
1700: PPUSH
// uc_side = 3 ;
1701: LD_ADDR_OWVAR 20
1705: PUSH
1706: LD_INT 3
1708: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
1709: LD_ADDR_EXP 20
1713: PUSH
1714: LD_STRING Davidov
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: CALL 5957 0 2
1724: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
1725: LD_EXP 20
1729: PPUSH
1730: LD_INT 3
1732: PPUSH
1733: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
1737: LD_ADDR_EXP 29
1741: PUSH
1742: LD_EXP 29
1746: PUSH
1747: LD_EXP 20
1751: ADD
1752: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
1753: LD_EXP 29
1757: PPUSH
1758: LD_INT 4
1760: PPUSH
1761: CALL_OW 336
// end ;
1765: LD_VAR 0 1
1769: RET
// export function PrepareEastBase ; var i , un ; begin
1770: LD_INT 0
1772: PPUSH
1773: PPUSH
1774: PPUSH
// RespawnInside ( 3 , 3 , rueastdepot , 10 , 2 , 6 ) ;
1775: LD_INT 3
1777: PPUSH
1778: LD_INT 3
1780: PPUSH
1781: LD_INT 4
1783: PPUSH
1784: LD_INT 10
1786: PPUSH
1787: LD_INT 2
1789: PPUSH
1790: LD_INT 6
1792: PPUSH
1793: CALL 6874 0 6
// RespawnInside ( 3 , 3 , rulab2 , 10 , 4 , 6 ) ;
1797: LD_INT 3
1799: PPUSH
1800: LD_INT 3
1802: PPUSH
1803: LD_INT 47
1805: PPUSH
1806: LD_INT 10
1808: PPUSH
1809: LD_INT 4
1811: PPUSH
1812: LD_INT 6
1814: PPUSH
1815: CALL 6874 0 6
// RespawnInside ( 3 , 3 , rulab3 , 10 , 4 , 6 ) ;
1819: LD_INT 3
1821: PPUSH
1822: LD_INT 3
1824: PPUSH
1825: LD_INT 44
1827: PPUSH
1828: LD_INT 10
1830: PPUSH
1831: LD_INT 4
1833: PPUSH
1834: LD_INT 6
1836: PPUSH
1837: CALL 6874 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1841: LD_ADDR_VAR 0 2
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 3
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 30
1858: PUSH
1859: LD_INT 32
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PPUSH
1870: CALL_OW 69
1874: PUSH
1875: FOR_IN
1876: IFFALSE 1904
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
1878: LD_INT 3
1880: PPUSH
1881: LD_INT 3
1883: PPUSH
1884: LD_VAR 0 2
1888: PPUSH
1889: LD_INT 10
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: CALL 6874 0 6
1902: GO 1875
1904: POP
1905: POP
// for i = 1 to 5 do
1906: LD_ADDR_VAR 0 2
1910: PUSH
1911: DOUBLE
1912: LD_INT 1
1914: DEC
1915: ST_TO_ADDR
1916: LD_INT 5
1918: PUSH
1919: FOR_TO
1920: IFFALSE 2007
// begin uc_side = 3 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 3
1929: ST_TO_ADDR
// uc_nation = 3 ;
1930: LD_ADDR_OWVAR 21
1934: PUSH
1935: LD_INT 3
1937: ST_TO_ADDR
// hc_gallery =  ;
1938: LD_ADDR_OWVAR 33
1942: PUSH
1943: LD_STRING 
1945: ST_TO_ADDR
// hc_name =  ;
1946: LD_ADDR_OWVAR 26
1950: PUSH
1951: LD_STRING 
1953: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
1954: LD_INT 0
1956: PPUSH
1957: LD_INT 4
1959: PPUSH
1960: LD_INT 10
1962: PPUSH
1963: CALL_OW 380
// un = CreateHuman ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: CALL_OW 44
1976: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
1977: LD_VAR 0 3
1981: PPUSH
1982: LD_INT 3
1984: PPUSH
1985: CALL_OW 52
// RuScientists = RuScientists ^ un ;
1989: LD_ADDR_EXP 29
1993: PUSH
1994: LD_EXP 29
1998: PUSH
1999: LD_VAR 0 3
2003: ADD
2004: ST_TO_ADDR
// end ;
2005: GO 1919
2007: POP
2008: POP
// end ;
2009: LD_VAR 0 1
2013: RET
// export function PrepareWestBase ; var i , un ; begin
2014: LD_INT 0
2016: PPUSH
2017: PPUSH
2018: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , 10 , 2 , 6 ) ;
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 3
2024: PPUSH
2025: LD_INT 6
2027: PPUSH
2028: LD_INT 10
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: LD_INT 6
2036: PPUSH
2037: CALL 6874 0 6
// RespawnInside ( 3 , 3 , rulab1 , 10 , 4 , 6 ) ;
2041: LD_INT 3
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 91
2049: PPUSH
2050: LD_INT 10
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: LD_INT 6
2058: PPUSH
2059: CALL 6874 0 6
// RespawnInside ( 3 , 3 , ru_fact , 10 , 3 , 6 ) ;
2063: LD_INT 3
2065: PPUSH
2066: LD_INT 3
2068: PPUSH
2069: LD_INT 21
2071: PPUSH
2072: LD_INT 10
2074: PPUSH
2075: LD_INT 3
2077: PPUSH
2078: LD_INT 6
2080: PPUSH
2081: CALL 6874 0 6
// end ;
2085: LD_VAR 0 1
2089: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
2090: LD_INT 0
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
// uc_side = 3 ;
2096: LD_ADDR_OWVAR 20
2100: PUSH
2101: LD_INT 3
2103: ST_TO_ADDR
// uc_nation = 3 ;
2104: LD_ADDR_OWVAR 21
2108: PUSH
2109: LD_INT 3
2111: ST_TO_ADDR
// for i = 1 to 5 do
2112: LD_ADDR_VAR 0 2
2116: PUSH
2117: DOUBLE
2118: LD_INT 1
2120: DEC
2121: ST_TO_ADDR
2122: LD_INT 5
2124: PUSH
2125: FOR_TO
2126: IFFALSE 2184
// begin hc_gallery =  ;
2128: LD_ADDR_OWVAR 33
2132: PUSH
2133: LD_STRING 
2135: ST_TO_ADDR
// hc_name =  ;
2136: LD_ADDR_OWVAR 26
2140: PUSH
2141: LD_STRING 
2143: ST_TO_ADDR
// PrepareHuman ( false , 9 , 10 ) ;
2144: LD_INT 0
2146: PPUSH
2147: LD_INT 9
2149: PPUSH
2150: LD_INT 10
2152: PPUSH
2153: CALL_OW 380
// un = CreateHuman ;
2157: LD_ADDR_VAR 0 3
2161: PUSH
2162: CALL_OW 44
2166: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
2167: LD_VAR 0 3
2171: PPUSH
2172: LD_INT 8
2174: PPUSH
2175: LD_INT 0
2177: PPUSH
2178: CALL_OW 49
// end ;
2182: GO 2125
2184: POP
2185: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2186: LD_ADDR_VAR 0 2
2190: PUSH
2191: DOUBLE
2192: LD_INT 1
2194: DEC
2195: ST_TO_ADDR
2196: LD_INT 2
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: LD_INT 4
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_OWVAR 67
2214: ARRAY
2215: PUSH
2216: FOR_TO
2217: IFFALSE 2275
// begin hc_gallery =  ;
2219: LD_ADDR_OWVAR 33
2223: PUSH
2224: LD_STRING 
2226: ST_TO_ADDR
// hc_name =  ;
2227: LD_ADDR_OWVAR 26
2231: PUSH
2232: LD_STRING 
2234: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2235: LD_INT 0
2237: PPUSH
2238: LD_INT 4
2240: PPUSH
2241: LD_INT 10
2243: PPUSH
2244: CALL_OW 380
// un = CreateHuman ;
2248: LD_ADDR_VAR 0 3
2252: PUSH
2253: CALL_OW 44
2257: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_INT 8
2265: PPUSH
2266: LD_INT 0
2268: PPUSH
2269: CALL_OW 49
// end ;
2273: GO 2216
2275: POP
2276: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: DOUBLE
2283: LD_INT 1
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 3
2289: PUSH
2290: LD_INT 4
2292: PUSH
2293: LD_INT 5
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: PUSH
2301: LD_OWVAR 67
2305: ARRAY
2306: PUSH
2307: FOR_TO
2308: IFFALSE 2492
// begin vc_engine = 3 ;
2310: LD_ADDR_OWVAR 39
2314: PUSH
2315: LD_INT 3
2317: ST_TO_ADDR
// vc_control = 1 ;
2318: LD_ADDR_OWVAR 38
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
2326: LD_ADDR_OWVAR 40
2330: PUSH
2331: LD_INT 42
2333: PUSH
2334: LD_INT 43
2336: PUSH
2337: LD_INT 44
2339: PUSH
2340: LD_INT 45
2342: PUSH
2343: LD_INT 46
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 5
2358: PPUSH
2359: CALL_OW 12
2363: ARRAY
2364: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
2365: LD_OWVAR 40
2369: PUSH
2370: LD_INT 46
2372: EQUAL
2373: IFFALSE 2385
// vc_chassis = ru_heavy_tracked else
2375: LD_ADDR_OWVAR 37
2379: PUSH
2380: LD_INT 24
2382: ST_TO_ADDR
2383: GO 2412
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
2385: LD_ADDR_OWVAR 37
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_INT 21
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PUSH
2400: LD_INT 1
2402: PPUSH
2403: LD_INT 2
2405: PPUSH
2406: CALL_OW 12
2410: ARRAY
2411: ST_TO_ADDR
// veh = CreateVehicle ;
2412: LD_ADDR_VAR 0 4
2416: PUSH
2417: CALL_OW 45
2421: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
2422: LD_VAR 0 4
2426: PPUSH
2427: LD_INT 5
2429: PPUSH
2430: LD_INT 0
2432: PPUSH
2433: CALL_OW 49
// hc_gallery =  ;
2437: LD_ADDR_OWVAR 33
2441: PUSH
2442: LD_STRING 
2444: ST_TO_ADDR
// hc_name =  ;
2445: LD_ADDR_OWVAR 26
2449: PUSH
2450: LD_STRING 
2452: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2453: LD_INT 0
2455: PPUSH
2456: LD_INT 4
2458: PPUSH
2459: LD_INT 10
2461: PPUSH
2462: CALL_OW 380
// un = CreateHuman ;
2466: LD_ADDR_VAR 0 3
2470: PUSH
2471: CALL_OW 44
2475: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2476: LD_VAR 0 3
2480: PPUSH
2481: LD_VAR 0 4
2485: PPUSH
2486: CALL_OW 52
// end ;
2490: GO 2307
2492: POP
2493: POP
// end ; end_of_file
2494: LD_VAR 0 1
2498: RET
// export function PrepareKurt ; begin
2499: LD_INT 0
2501: PPUSH
// uc_side = 8 ;
2502: LD_ADDR_OWVAR 20
2506: PUSH
2507: LD_INT 8
2509: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
2510: LD_ADDR_EXP 21
2514: PUSH
2515: LD_STRING Kurt
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL 5957 0 2
2525: ST_TO_ADDR
// PlaceUnitArea ( Kurt , PlayerSpawn , false ) ;
2526: LD_EXP 21
2530: PPUSH
2531: LD_INT 4
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: CALL_OW 49
// end ;
2541: LD_VAR 0 1
2545: RET
// export function PrepareLegionForPlayer ; var i , un ; begin
2546: LD_INT 0
2548: PPUSH
2549: PPUSH
2550: PPUSH
// for i = 1 to 6 do
2551: LD_ADDR_VAR 0 2
2555: PUSH
2556: DOUBLE
2557: LD_INT 1
2559: DEC
2560: ST_TO_ADDR
2561: LD_INT 6
2563: PUSH
2564: FOR_TO
2565: IFFALSE 2666
// begin uc_side = 1 ;
2567: LD_ADDR_OWVAR 20
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// uc_nation = 2 ;
2575: LD_ADDR_OWVAR 21
2579: PUSH
2580: LD_INT 2
2582: ST_TO_ADDR
// hc_gallery =  ;
2583: LD_ADDR_OWVAR 33
2587: PUSH
2588: LD_STRING 
2590: ST_TO_ADDR
// hc_name =  ;
2591: LD_ADDR_OWVAR 26
2595: PUSH
2596: LD_STRING 
2598: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , 10 ) ;
2599: LD_INT 0
2601: PPUSH
2602: LD_INT 1
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: LD_INT 3
2610: PUSH
2611: LD_INT 4
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 4
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: LD_INT 10
2634: PPUSH
2635: CALL_OW 380
// un = CreateHuman ;
2639: LD_ADDR_VAR 0 3
2643: PUSH
2644: CALL_OW 44
2648: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2649: LD_VAR 0 3
2653: PPUSH
2654: LD_INT 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// end ;
2664: GO 2564
2666: POP
2667: POP
// end ; end_of_file
2668: LD_VAR 0 1
2672: RET
// every 1 do var i ;
2673: GO 2675
2675: DISABLE
2676: LD_INT 0
2678: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
2679: LD_EXP 1
2683: PPUSH
2684: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
2688: LD_EXP 1
2692: PPUSH
2693: LD_STRING D1-JMM-1
2695: PPUSH
2696: CALL_OW 88
// Say ( Donaldson , D1-Don-1 ) ;
2700: LD_EXP 2
2704: PPUSH
2705: LD_STRING D1-Don-1
2707: PPUSH
2708: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2712: LD_EXP 1
2716: PPUSH
2717: LD_STRING D1-JMM-2
2719: PPUSH
2720: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
2724: LD_EXP 2
2728: PPUSH
2729: LD_STRING D1-Don-2
2731: PPUSH
2732: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
2736: LD_ADDR_VAR 0 1
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 1
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: FOR_IN
2757: IFFALSE 2806
// begin ComMoveXY ( i , 129 , 89 ) ;
2759: LD_VAR 0 1
2763: PPUSH
2764: LD_INT 129
2766: PPUSH
2767: LD_INT 89
2769: PPUSH
2770: CALL_OW 111
// AddComMoveXY ( i , 114 , 83 ) ;
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_INT 114
2781: PPUSH
2782: LD_INT 83
2784: PPUSH
2785: CALL_OW 171
// AddComMoveXY ( i , 99 , 82 ) ;
2789: LD_VAR 0 1
2793: PPUSH
2794: LD_INT 99
2796: PPUSH
2797: LD_INT 82
2799: PPUSH
2800: CALL_OW 171
// end ;
2804: GO 2756
2806: POP
2807: POP
// end ;
2808: PPOPN 1
2810: END
// every 0 0$1 trigger SeeXY ( 1 , 93 , 75 ) do var i ;
2811: LD_INT 1
2813: PPUSH
2814: LD_INT 93
2816: PPUSH
2817: LD_INT 75
2819: PPUSH
2820: CALL_OW 293
2824: IFFALSE 2941
2826: GO 2828
2828: DISABLE
2829: LD_INT 0
2831: PPUSH
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D1-Sol1-2 ,  ) ;
2832: LD_INT 22
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 26
2844: PUSH
2845: LD_INT 1
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: LD_EXP 1
2860: PUSH
2861: EMPTY
2862: LIST
2863: DIFF
2864: PPUSH
2865: CALL_OW 69
2869: PPUSH
2870: LD_STRING D1-Sol1-2
2872: PPUSH
2873: LD_STRING 
2875: PPUSH
2876: CALL 6014 0 3
// Say ( JMM , D1-JMM-3 ) ;
2880: LD_EXP 1
2884: PPUSH
2885: LD_STRING D1-JMM-3
2887: PPUSH
2888: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
2892: LD_STRING M1
2894: PPUSH
2895: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
2899: LD_ADDR_VAR 0 1
2903: PUSH
2904: LD_INT 22
2906: PUSH
2907: LD_INT 1
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: PUSH
2919: FOR_IN
2920: IFFALSE 2939
// ComMoveXY ( i , 87 , 68 ) ;
2922: LD_VAR 0 1
2926: PPUSH
2927: LD_INT 87
2929: PPUSH
2930: LD_INT 68
2932: PPUSH
2933: CALL_OW 111
2937: GO 2919
2939: POP
2940: POP
// end ;
2941: PPOPN 1
2943: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
2944: GO 2946
2946: DISABLE
2947: LD_INT 0
2949: PPUSH
2950: PPUSH
2951: PPUSH
2952: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
2953: LD_ADDR_VAR 0 2
2957: PUSH
2958: LD_INT 8
2960: PPUSH
2961: LD_INT 22
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 25
2973: PUSH
2974: LD_INT 9
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PPUSH
2985: CALL_OW 70
2989: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
2990: LD_ADDR_VAR 0 3
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: EMPTY
3006: LIST
3007: PPUSH
3008: CALL_OW 69
3012: ST_TO_ADDR
// enable ;
3013: ENABLE
// for i in your_units do
3014: LD_ADDR_VAR 0 1
3018: PUSH
3019: LD_VAR 0 3
3023: PUSH
3024: FOR_IN
3025: IFFALSE 3536
// begin if See ( 3 , i ) then
3027: LD_INT 3
3029: PPUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 292
3039: IFFALSE 3534
// begin disable ;
3041: DISABLE
// ComTimeShift ( bazook_list , 87 , 68 ) ;
3042: LD_VAR 0 2
3046: PPUSH
3047: LD_INT 87
3049: PPUSH
3050: LD_INT 68
3052: PPUSH
3053: CALL_OW 154
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
3057: LD_VAR 0 2
3061: PPUSH
3062: LD_INT 87
3064: PPUSH
3065: LD_INT 68
3067: PPUSH
3068: CALL_OW 214
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
3072: LD_VAR 0 2
3076: PPUSH
3077: LD_INT 87
3079: PPUSH
3080: LD_INT 68
3082: PPUSH
3083: CALL_OW 214
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
3087: LD_VAR 0 2
3091: PPUSH
3092: LD_INT 87
3094: PPUSH
3095: LD_INT 68
3097: PPUSH
3098: CALL_OW 214
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
3102: LD_VAR 0 2
3106: PPUSH
3107: LD_INT 87
3109: PPUSH
3110: LD_INT 68
3112: PPUSH
3113: CALL_OW 214
// AddComTimeShift ( bazook_list , 87 , 68 ) ;
3117: LD_VAR 0 2
3121: PPUSH
3122: LD_INT 87
3124: PPUSH
3125: LD_INT 68
3127: PPUSH
3128: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
3132: LD_EXP 1
3136: PPUSH
3137: LD_STRING D1a-JMM-1
3139: PPUSH
3140: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
3144: LD_EXP 2
3148: PPUSH
3149: LD_STRING D1a-Don-1
3151: PPUSH
3152: CALL_OW 88
// ComMoveXY ( i , 87 , 68 ) ;
3156: LD_VAR 0 1
3160: PPUSH
3161: LD_INT 87
3163: PPUSH
3164: LD_INT 68
3166: PPUSH
3167: CALL_OW 111
// Say ( JMM , D1a-JMM-2 ) ;
3171: LD_EXP 1
3175: PPUSH
3176: LD_STRING D1a-JMM-2
3178: PPUSH
3179: CALL_OW 88
// wait ( 0 0$10 ) ;
3183: LD_INT 350
3185: PPUSH
3186: CALL_OW 67
// Say ( Donaldson , D1b-Don-1 ) ;
3190: LD_EXP 2
3194: PPUSH
3195: LD_STRING D1b-Don-1
3197: PPUSH
3198: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
3202: LD_EXP 1
3206: PPUSH
3207: LD_STRING D1b-JMM-1
3209: PPUSH
3210: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
3214: LD_INT 22
3216: PUSH
3217: LD_INT 1
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 26
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_EXP 1
3242: PUSH
3243: EMPTY
3244: LIST
3245: DIFF
3246: PPUSH
3247: CALL_OW 69
3251: PPUSH
3252: LD_STRING D1b-Sol1-1
3254: PPUSH
3255: LD_STRING 
3257: PPUSH
3258: CALL 6014 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
3262: LD_EXP 2
3266: PPUSH
3267: LD_STRING D1b-Don-2
3269: PPUSH
3270: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
3274: LD_EXP 1
3278: PPUSH
3279: LD_STRING D1b-JMM-2
3281: PPUSH
3282: CALL_OW 88
// dec = ShowQuery1 ;
3286: LD_ADDR_VAR 0 4
3290: PUSH
3291: CALL 6170 0 0
3295: ST_TO_ADDR
// if dec = 1 then
3296: LD_VAR 0 4
3300: PUSH
3301: LD_INT 1
3303: EQUAL
3304: IFFALSE 3410
// begin Say ( JMM , D2-JMM-1 ) ;
3306: LD_EXP 1
3310: PPUSH
3311: LD_STRING D2-JMM-1
3313: PPUSH
3314: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
3318: LD_EXP 19
3322: PPUSH
3323: LD_STRING D2-Pow-1
3325: PPUSH
3326: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
3330: LD_EXP 1
3334: PPUSH
3335: LD_STRING D2a-JMM-1
3337: PPUSH
3338: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
3342: LD_EXP 19
3346: PPUSH
3347: LD_STRING D2a-Pow-1
3349: PPUSH
3350: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
3354: LD_EXP 1
3358: PPUSH
3359: LD_STRING D2a-JMM-2
3361: PPUSH
3362: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
3366: LD_EXP 19
3370: PPUSH
3371: LD_STRING D2a-Pow-2
3373: PPUSH
3374: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
3378: LD_EXP 1
3382: PPUSH
3383: LD_STRING D2a-JMM-3
3385: PPUSH
3386: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
3390: LD_EXP 19
3394: PPUSH
3395: LD_STRING D2a-Pow-3
3397: PPUSH
3398: CALL_OW 94
// secondPass = 2 ;
3402: LD_ADDR_EXP 23
3406: PUSH
3407: LD_INT 2
3409: ST_TO_ADDR
// end ; if dec = 2 then
3410: LD_VAR 0 4
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3512
// begin Say ( JMM , D2-JMM-1 ) ;
3420: LD_EXP 1
3424: PPUSH
3425: LD_STRING D2-JMM-1
3427: PPUSH
3428: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
3432: LD_EXP 19
3436: PPUSH
3437: LD_STRING D2-Pow-1
3439: PPUSH
3440: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
3444: LD_EXP 1
3448: PPUSH
3449: LD_STRING D2b-JMM-1
3451: PPUSH
3452: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
3456: LD_EXP 19
3460: PPUSH
3461: LD_STRING D2b-Pow-1
3463: PPUSH
3464: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
3468: LD_EXP 1
3472: PPUSH
3473: LD_STRING D2c-JMM-1
3475: PPUSH
3476: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
3480: LD_EXP 19
3484: PPUSH
3485: LD_STRING D2c-Pow-1
3487: PPUSH
3488: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING D2c-JMM-2
3499: PPUSH
3500: CALL_OW 88
// secondPass = 2 ;
3504: LD_ADDR_EXP 23
3508: PUSH
3509: LD_INT 2
3511: ST_TO_ADDR
// end ; if dec = 3 then
3512: LD_VAR 0 4
3516: PUSH
3517: LD_INT 3
3519: EQUAL
3520: IFFALSE 3530
// secondPass = 1 ;
3522: LD_ADDR_EXP 23
3526: PUSH
3527: LD_INT 1
3529: ST_TO_ADDR
// InGameOff ;
3530: CALL_OW 9
// end ; end ;
3534: GO 3024
3536: POP
3537: POP
// end ;
3538: PPOPN 4
3540: END
// every 1 1$0 trigger secondPass = 2 do
3541: LD_EXP 23
3545: PUSH
3546: LD_INT 2
3548: EQUAL
3549: IFFALSE 3652
3551: GO 3553
3553: DISABLE
// begin PowellSupport1 ;
3554: CALL 676 0 0
// Say ( JMM , DC1-JMM-1 ) ;
3558: LD_EXP 1
3562: PPUSH
3563: LD_STRING DC1-JMM-1
3565: PPUSH
3566: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
3570: LD_EXP 19
3574: PPUSH
3575: LD_STRING DC1-Pow-1
3577: PPUSH
3578: CALL_OW 94
// wait ( 3 3$0 ) ;
3582: LD_INT 6300
3584: PPUSH
3585: CALL_OW 67
// PowellSupport2 ;
3589: CALL 1123 0 0
// Say ( JMM , DC2-JMM-1 ) ;
3593: LD_EXP 1
3597: PPUSH
3598: LD_STRING DC2-JMM-1
3600: PPUSH
3601: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
3605: LD_EXP 19
3609: PPUSH
3610: LD_STRING DC2-Pow-1
3612: PPUSH
3613: CALL_OW 94
// wait ( 6 6$0 ) ;
3617: LD_INT 12600
3619: PPUSH
3620: CALL_OW 67
// PowellSupport3 ;
3624: CALL 1482 0 0
// SayRadio ( Powell , DC3-Pow-1 ) ;
3628: LD_EXP 19
3632: PPUSH
3633: LD_STRING DC3-Pow-1
3635: PPUSH
3636: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
3640: LD_EXP 1
3644: PPUSH
3645: LD_STRING DC3-JMM-1
3647: PPUSH
3648: CALL_OW 88
// end ;
3652: END
// every 4 4$30 trigger secondPass = 2 do var dec1 , dec2 ;
3653: LD_EXP 23
3657: PUSH
3658: LD_INT 2
3660: EQUAL
3661: IFFALSE 4215
3663: GO 3665
3665: DISABLE
3666: LD_INT 0
3668: PPUSH
3669: PPUSH
// begin PrepareKurt ;
3670: CALL 2499 0 0
// Say ( Kurt , D3-Kurt-1 ) ;
3674: LD_EXP 21
3678: PPUSH
3679: LD_STRING D3-Kurt-1
3681: PPUSH
3682: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
3686: LD_EXP 1
3690: PPUSH
3691: LD_STRING D3-JMM-1
3693: PPUSH
3694: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
3698: LD_EXP 21
3702: PPUSH
3703: LD_STRING D3-Kurt-2
3705: PPUSH
3706: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
3710: LD_EXP 1
3714: PPUSH
3715: LD_STRING D3-JMM-2
3717: PPUSH
3718: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
3722: LD_EXP 21
3726: PPUSH
3727: LD_STRING D3-Kurt-4
3729: PPUSH
3730: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
3734: LD_EXP 1
3738: PPUSH
3739: LD_STRING D3-JMM-4
3741: PPUSH
3742: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
3746: LD_EXP 21
3750: PPUSH
3751: LD_STRING D3-Kurt-5
3753: PPUSH
3754: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
3758: LD_EXP 21
3762: PPUSH
3763: LD_STRING D3-Kurt-5a
3765: PPUSH
3766: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
3770: LD_EXP 21
3774: PPUSH
3775: LD_STRING D3-Kurt-5b
3777: PPUSH
3778: CALL_OW 88
// dec1 = ShowQuery4 ;
3782: LD_ADDR_VAR 0 1
3786: PUSH
3787: CALL 6411 0 0
3791: ST_TO_ADDR
// if dec1 = 1 then
3792: LD_VAR 0 1
3796: PUSH
3797: LD_INT 1
3799: EQUAL
3800: IFFALSE 3834
// begin Say ( JMM , D3Ka-JMM-1 ) ;
3802: LD_EXP 1
3806: PPUSH
3807: LD_STRING D3Ka-JMM-1
3809: PPUSH
3810: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
3814: LD_EXP 21
3818: PPUSH
3819: LD_STRING D3Ka-Kurt-1
3821: PPUSH
3822: CALL_OW 88
// warWithLegion = 1 ;
3826: LD_ADDR_EXP 25
3830: PUSH
3831: LD_INT 1
3833: ST_TO_ADDR
// end ; if dec1 = 2 then
3834: LD_VAR 0 1
3838: PUSH
3839: LD_INT 2
3841: EQUAL
3842: IFFALSE 3868
// begin Say ( JMM , D3Kb-JMM-1 ) ;
3844: LD_EXP 1
3848: PPUSH
3849: LD_STRING D3Kb-JMM-1
3851: PPUSH
3852: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
3856: LD_EXP 21
3860: PPUSH
3861: LD_STRING D3Kb-Kurt-1
3863: PPUSH
3864: CALL_OW 88
// end ; if dec1 = 3 then
3868: LD_VAR 0 1
3872: PUSH
3873: LD_INT 3
3875: EQUAL
3876: IFFALSE 4094
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
3878: LD_EXP 1
3882: PPUSH
3883: LD_STRING D3Kc1-JMM-1
3885: PPUSH
3886: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
3890: LD_EXP 21
3894: PPUSH
3895: LD_STRING D3Kc1-Kurt-1
3897: PPUSH
3898: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
3902: LD_EXP 1
3906: PPUSH
3907: LD_STRING D3Kc1-JMM-2
3909: PPUSH
3910: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
3914: LD_EXP 21
3918: PPUSH
3919: LD_STRING D3Kc1-Kurt-2
3921: PPUSH
3922: CALL_OW 88
// askSiberite = 1 ;
3926: LD_ADDR_EXP 27
3930: PUSH
3931: LD_INT 1
3933: ST_TO_ADDR
// dec2 = ShowQuery7 ;
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: CALL 6690 0 0
3943: ST_TO_ADDR
// if dec2 = 1 then
3944: LD_VAR 0 2
3948: PUSH
3949: LD_INT 1
3951: EQUAL
3952: IFFALSE 3986
// begin Say ( JMM , D4a-JMM-1 ) ;
3954: LD_EXP 1
3958: PPUSH
3959: LD_STRING D4a-JMM-1
3961: PPUSH
3962: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
3966: LD_EXP 21
3970: PPUSH
3971: LD_STRING D4b-Kurt-1
3973: PPUSH
3974: CALL_OW 88
// warWithLegion = 1 ;
3978: LD_ADDR_EXP 25
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// end ; if dec2 = 2 then
3986: LD_VAR 0 2
3990: PUSH
3991: LD_INT 2
3993: EQUAL
3994: IFFALSE 4028
// begin Say ( JMM , D4b-JMM-1 ) ;
3996: LD_EXP 1
4000: PPUSH
4001: LD_STRING D4b-JMM-1
4003: PPUSH
4004: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
4008: LD_EXP 21
4012: PPUSH
4013: LD_STRING D4b-Kurt-1
4015: PPUSH
4016: CALL_OW 88
// warWithLegion = 1 ;
4020: LD_ADDR_EXP 25
4024: PUSH
4025: LD_INT 1
4027: ST_TO_ADDR
// end ; if dec2 = 3 then
4028: LD_VAR 0 2
4032: PUSH
4033: LD_INT 3
4035: EQUAL
4036: IFFALSE 4094
// begin Say ( JMM , D4c-JMM-1 ) ;
4038: LD_EXP 1
4042: PPUSH
4043: LD_STRING D4c-JMM-1
4045: PPUSH
4046: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
4050: LD_EXP 21
4054: PPUSH
4055: LD_STRING D4c-Kurt-1
4057: PPUSH
4058: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
4062: LD_EXP 1
4066: PPUSH
4067: LD_STRING D4c-JMM-2
4069: PPUSH
4070: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
4074: LD_EXP 21
4078: PPUSH
4079: LD_STRING D4c-Kurt-2
4081: PPUSH
4082: CALL_OW 88
// fakeInfo = 1 ;
4086: LD_ADDR_EXP 26
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
4094: LD_VAR 0 1
4098: PUSH
4099: LD_INT 4
4101: EQUAL
4102: IFFALSE 4206
// begin Say ( Kurt , D3Kd-JMM-1 ) ;
4104: LD_EXP 21
4108: PPUSH
4109: LD_STRING D3Kd-JMM-1
4111: PPUSH
4112: CALL_OW 88
// dec2 = ShowQuery8 ;
4116: LD_ADDR_VAR 0 2
4120: PUSH
4121: CALL 6764 0 0
4125: ST_TO_ADDR
// if dec2 = 1 then
4126: LD_VAR 0 2
4130: PUSH
4131: LD_INT 1
4133: EQUAL
4134: IFFALSE 4168
// begin Say ( JMM , D5Ka-JMM-1 ) ;
4136: LD_EXP 1
4140: PPUSH
4141: LD_STRING D5Ka-JMM-1
4143: PPUSH
4144: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
4148: LD_EXP 21
4152: PPUSH
4153: LD_STRING D5Ka-Kurt-1
4155: PPUSH
4156: CALL_OW 88
// warWithLegion = 1 ;
4160: LD_ADDR_EXP 25
4164: PUSH
4165: LD_INT 1
4167: ST_TO_ADDR
// end ; if dec2 = 2 then
4168: LD_VAR 0 2
4172: PUSH
4173: LD_INT 2
4175: EQUAL
4176: IFFALSE 4206
// begin Say ( JMM , D3Ke-JMM-1 ) ;
4178: LD_EXP 1
4182: PPUSH
4183: LD_STRING D3Ke-JMM-1
4185: PPUSH
4186: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
4190: LD_EXP 21
4194: PPUSH
4195: LD_STRING D3Ke-Kurt-1
4197: PPUSH
4198: CALL_OW 88
// PrepareLegionForPlayer ;
4202: CALL 2546 0 0
// end ; end ; RemoveUnit ( Kurt ) ;
4206: LD_EXP 21
4210: PPUSH
4211: CALL_OW 64
// end ;
4215: PPOPN 2
4217: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 3 ) do
4218: LD_EXP 11
4222: PPUSH
4223: CALL_OW 305
4227: PUSH
4228: LD_EXP 11
4232: PPUSH
4233: LD_INT 3
4235: PPUSH
4236: CALL_OW 289
4240: NOT
4241: AND
4242: IFFALSE 4259
4244: GO 4246
4246: DISABLE
// SetSide ( amCargo1 , 4 ) ;
4247: LD_EXP 11
4251: PPUSH
4252: LD_INT 4
4254: PPUSH
4255: CALL_OW 235
4259: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 3 ) do
4260: LD_EXP 12
4264: PPUSH
4265: CALL_OW 305
4269: PUSH
4270: LD_EXP 12
4274: PPUSH
4275: LD_INT 1
4277: PPUSH
4278: CALL_OW 289
4282: NOT
4283: AND
4284: PUSH
4285: LD_EXP 12
4289: PPUSH
4290: LD_INT 3
4292: PPUSH
4293: CALL_OW 289
4297: NOT
4298: AND
4299: IFFALSE 4316
4301: GO 4303
4303: DISABLE
// SetSide ( amCargo2 , 4 ) ;
4304: LD_EXP 12
4308: PPUSH
4309: LD_INT 4
4311: PPUSH
4312: CALL_OW 235
4316: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo3 , 1 ) do
4317: LD_EXP 12
4321: PPUSH
4322: CALL_OW 305
4326: PUSH
4327: LD_EXP 14
4331: PPUSH
4332: LD_INT 1
4334: PPUSH
4335: CALL_OW 289
4339: NOT
4340: AND
4341: IFFALSE 4358
4343: GO 4345
4345: DISABLE
// SetSide ( amCargo3 , 4 ) ;
4346: LD_EXP 14
4350: PPUSH
4351: LD_INT 4
4353: PPUSH
4354: CALL_OW 235
4358: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo4 , 2 ) do
4359: LD_EXP 14
4363: PPUSH
4364: CALL_OW 305
4368: PUSH
4369: LD_EXP 15
4373: PPUSH
4374: LD_INT 2
4376: PPUSH
4377: CALL_OW 289
4381: NOT
4382: AND
4383: IFFALSE 4400
4385: GO 4387
4387: DISABLE
// SetSide ( amCargo4 , 4 ) ;
4388: LD_EXP 15
4392: PPUSH
4393: LD_INT 4
4395: PPUSH
4396: CALL_OW 235
4400: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) do
4401: LD_EXP 15
4405: PPUSH
4406: CALL_OW 305
4410: PUSH
4411: LD_EXP 16
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: CALL_OW 289
4423: NOT
4424: AND
4425: PUSH
4426: LD_EXP 16
4430: PPUSH
4431: LD_INT 2
4433: PPUSH
4434: CALL_OW 289
4438: NOT
4439: AND
4440: IFFALSE 4457
4442: GO 4444
4444: DISABLE
// SetSide ( amCargo5 , 4 ) ;
4445: LD_EXP 16
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: CALL_OW 235
4457: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo6 , 1 ) do
4458: LD_EXP 16
4462: PPUSH
4463: CALL_OW 305
4467: PUSH
4468: LD_EXP 17
4472: PPUSH
4473: LD_INT 1
4475: PPUSH
4476: CALL_OW 289
4480: NOT
4481: AND
4482: IFFALSE 4499
4484: GO 4486
4486: DISABLE
// SetSide ( amCargo6 , 4 ) ;
4487: LD_EXP 17
4491: PPUSH
4492: LD_INT 4
4494: PPUSH
4495: CALL_OW 235
4499: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 2 ) do
4500: LD_EXP 17
4504: PPUSH
4505: CALL_OW 305
4509: PUSH
4510: LD_EXP 17
4514: PPUSH
4515: LD_INT 2
4517: PPUSH
4518: CALL_OW 289
4522: NOT
4523: AND
4524: IFFALSE 4541
4526: GO 4528
4528: DISABLE
// SetSide ( amCargo7 , 4 ) ;
4529: LD_EXP 18
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: CALL_OW 235
4541: END
// every 0 0$1 do var i ;
4542: GO 4544
4544: DISABLE
4545: LD_INT 0
4547: PPUSH
// begin enable ;
4548: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
4549: LD_ADDR_VAR 0 1
4553: PUSH
4554: LD_INT 22
4556: PUSH
4557: LD_INT 4
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PPUSH
4564: CALL_OW 69
4568: PUSH
4569: FOR_IN
4570: IFFALSE 4609
// begin ComMoveToArea ( i , PlayerSpawn ) ;
4572: LD_VAR 0 1
4576: PPUSH
4577: LD_INT 4
4579: PPUSH
4580: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
4584: LD_VAR 0 1
4588: PPUSH
4589: LD_INT 4
4591: PPUSH
4592: CALL_OW 308
4596: IFFALSE 4607
// RemoveUnit ( i ) ;
4598: LD_VAR 0 1
4602: PPUSH
4603: CALL_OW 64
// end ;
4607: GO 4569
4609: POP
4610: POP
// end ;
4611: PPOPN 1
4613: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
4614: LD_EXP 23
4618: PUSH
4619: LD_INT 1
4621: EQUAL
4622: IFFALSE 4993
4624: GO 4626
4626: DISABLE
4627: LD_INT 0
4629: PPUSH
4630: PPUSH
4631: PPUSH
// begin enable ;
4632: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4633: LD_ADDR_VAR 0 2
4637: PUSH
4638: LD_INT 12
4640: PPUSH
4641: LD_INT 22
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 21
4653: PUSH
4654: LD_INT 2
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 70
4669: ST_TO_ADDR
// for i in enemyVehs do
4670: LD_ADDR_VAR 0 1
4674: PUSH
4675: LD_VAR 0 2
4679: PUSH
4680: FOR_IN
4681: IFFALSE 4991
// begin if See ( 1 , i ) then
4683: LD_INT 1
4685: PPUSH
4686: LD_VAR 0 1
4690: PPUSH
4691: CALL_OW 292
4695: IFFALSE 4989
// begin disable ;
4697: DISABLE
// DialogueOn ;
4698: CALL_OW 6
// CenterNowOnUnits ( i ) ;
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
4711: LD_INT 22
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: LD_INT 26
4723: PUSH
4724: LD_INT 1
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_EXP 1
4739: PUSH
4740: EMPTY
4741: LIST
4742: DIFF
4743: PPUSH
4744: CALL_OW 69
4748: PPUSH
4749: LD_STRING DT1-Sol1-1
4751: PPUSH
4752: LD_STRING DT1-FSol1-1
4754: PPUSH
4755: CALL 6014 0 3
// dec = ShowQuery2 ;
4759: LD_ADDR_VAR 0 3
4763: PUSH
4764: CALL 6244 0 0
4768: ST_TO_ADDR
// if dec = 1 then
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 1
4776: EQUAL
4777: IFFALSE 4883
// begin Say ( JMM , D2-JMM-1 ) ;
4779: LD_EXP 1
4783: PPUSH
4784: LD_STRING D2-JMM-1
4786: PPUSH
4787: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
4791: LD_EXP 19
4795: PPUSH
4796: LD_STRING D2-Pow-1
4798: PPUSH
4799: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
4803: LD_EXP 1
4807: PPUSH
4808: LD_STRING D2a-JMM-1
4810: PPUSH
4811: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
4815: LD_EXP 19
4819: PPUSH
4820: LD_STRING D2a-Pow-1
4822: PPUSH
4823: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
4827: LD_EXP 1
4831: PPUSH
4832: LD_STRING D2a-JMM-2
4834: PPUSH
4835: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
4839: LD_EXP 19
4843: PPUSH
4844: LD_STRING D2a-Pow-2
4846: PPUSH
4847: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
4851: LD_EXP 1
4855: PPUSH
4856: LD_STRING D2a-JMM-3
4858: PPUSH
4859: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
4863: LD_EXP 19
4867: PPUSH
4868: LD_STRING D2a-Pow-3
4870: PPUSH
4871: CALL_OW 94
// secondPass = 2 ;
4875: LD_ADDR_EXP 23
4879: PUSH
4880: LD_INT 2
4882: ST_TO_ADDR
// end ; if dec = 2 then
4883: LD_VAR 0 3
4887: PUSH
4888: LD_INT 2
4890: EQUAL
4891: IFFALSE 4985
// begin Say ( JMM , D2-JMM-1 ) ;
4893: LD_EXP 1
4897: PPUSH
4898: LD_STRING D2-JMM-1
4900: PPUSH
4901: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
4905: LD_EXP 19
4909: PPUSH
4910: LD_STRING D2-Pow-1
4912: PPUSH
4913: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
4917: LD_EXP 1
4921: PPUSH
4922: LD_STRING D2b-JMM-1
4924: PPUSH
4925: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
4929: LD_EXP 19
4933: PPUSH
4934: LD_STRING D2b-Pow-1
4936: PPUSH
4937: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
4941: LD_EXP 1
4945: PPUSH
4946: LD_STRING D2c-JMM-1
4948: PPUSH
4949: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
4953: LD_EXP 19
4957: PPUSH
4958: LD_STRING D2c-Pow-1
4960: PPUSH
4961: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
4965: LD_EXP 1
4969: PPUSH
4970: LD_STRING D2c-JMM-2
4972: PPUSH
4973: CALL_OW 88
// secondPass = 2 ;
4977: LD_ADDR_EXP 23
4981: PUSH
4982: LD_INT 2
4984: ST_TO_ADDR
// end ; DialogueOff ;
4985: CALL_OW 7
// end ; end ;
4989: GO 4680
4991: POP
4992: POP
// end ;
4993: PPOPN 3
4995: END
// every 0 0$1 do var i , vehicles ;
4996: GO 4998
4998: DISABLE
4999: LD_INT 0
5001: PPUSH
5002: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_INT 11
5010: PPUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 70
5025: ST_TO_ADDR
// enable ;
5026: ENABLE
// for i in vehicles do
5027: LD_ADDR_VAR 0 1
5031: PUSH
5032: LD_VAR 0 2
5036: PUSH
5037: FOR_IN
5038: IFFALSE 5135
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
5040: LD_INT 1
5042: PPUSH
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 292
5052: PUSH
5053: LD_EXP 24
5057: PUSH
5058: LD_INT 1
5060: EQUAL
5061: AND
5062: IFFALSE 5133
// begin disable ;
5064: DISABLE
// DialogueOn ;
5065: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT1-Sol1-1 , DT1-FSol1-1 ) ;
5069: LD_INT 22
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 21
5081: PUSH
5082: LD_INT 1
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PPUSH
5093: CALL_OW 69
5097: PUSH
5098: LD_EXP 1
5102: PUSH
5103: EMPTY
5104: LIST
5105: DIFF
5106: PPUSH
5107: LD_STRING DT1-Sol1-1
5109: PPUSH
5110: LD_STRING DT1-FSol1-1
5112: PPUSH
5113: CALL 6014 0 3
// Say ( JMM , DT1-JMM-1 ) ;
5117: LD_EXP 1
5121: PPUSH
5122: LD_STRING DT1-JMM-1
5124: PPUSH
5125: CALL_OW 88
// DialogueOff ;
5129: CALL_OW 7
// end ; end ;
5133: GO 5037
5135: POP
5136: POP
// end ;
5137: PPOPN 2
5139: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
5140: LD_EXP 24
5144: PUSH
5145: LD_INT 1
5147: EQUAL
5148: PUSH
5149: LD_INT 11
5151: PPUSH
5152: LD_INT 22
5154: PUSH
5155: LD_INT 3
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 24
5164: PUSH
5165: LD_INT 251
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 21
5177: PUSH
5178: LD_INT 2
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 21
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: LIST
5204: PPUSH
5205: CALL_OW 70
5209: PUSH
5210: LD_INT 0
5212: EQUAL
5213: AND
5214: IFFALSE 5291
5216: GO 5218
5218: DISABLE
// begin Say ( JMM , DT1a-JMM-1 ) ;
5219: LD_EXP 1
5223: PPUSH
5224: LD_STRING DT1a-JMM-1
5226: PPUSH
5227: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
5231: LD_INT 22
5233: PUSH
5234: LD_INT 1
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: LD_INT 21
5243: PUSH
5244: LD_INT 1
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: PUSH
5260: LD_EXP 1
5264: PUSH
5265: EMPTY
5266: LIST
5267: DIFF
5268: PPUSH
5269: LD_STRING DT1a-Sol1-1
5271: PPUSH
5272: LD_STRING DT1a-FSol1-1
5274: PPUSH
5275: CALL 6014 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
5279: LD_EXP 1
5283: PPUSH
5284: LD_STRING DT1a-JMM-2
5286: PPUSH
5287: CALL_OW 88
// end ;
5291: END
// every 0 0$1 do var i , vehicles ;
5292: GO 5294
5294: DISABLE
5295: LD_INT 0
5297: PPUSH
5298: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
5299: LD_ADDR_VAR 0 2
5303: PUSH
5304: LD_INT 11
5306: PPUSH
5307: LD_INT 22
5309: PUSH
5310: LD_INT 3
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PPUSH
5317: CALL_OW 70
5321: ST_TO_ADDR
// enable ;
5322: ENABLE
// for i in vehicles do
5323: LD_ADDR_VAR 0 1
5327: PUSH
5328: LD_VAR 0 2
5332: PUSH
5333: FOR_IN
5334: IFFALSE 5419
// begin if See ( 1 , i ) and vehicleTeleported = 2 then
5336: LD_INT 1
5338: PPUSH
5339: LD_VAR 0 1
5343: PPUSH
5344: CALL_OW 292
5348: PUSH
5349: LD_EXP 24
5353: PUSH
5354: LD_INT 2
5356: EQUAL
5357: AND
5358: IFFALSE 5417
// begin disable ;
5360: DISABLE
// DialogueOn ;
5361: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT2-Sol1-1 , DT2-FSol1-1 ) ;
5365: LD_INT 22
5367: PUSH
5368: LD_INT 1
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 21
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PUSH
5394: LD_EXP 1
5398: PUSH
5399: EMPTY
5400: LIST
5401: DIFF
5402: PPUSH
5403: LD_STRING DT2-Sol1-1
5405: PPUSH
5406: LD_STRING DT2-FSol1-1
5408: PPUSH
5409: CALL 6014 0 3
// DialogueOff ;
5413: CALL_OW 7
// end ; end ;
5417: GO 5333
5419: POP
5420: POP
// end ;
5421: PPOPN 2
5423: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
5424: LD_EXP 24
5428: PUSH
5429: LD_INT 1
5431: EQUAL
5432: PUSH
5433: LD_INT 11
5435: PPUSH
5436: LD_INT 22
5438: PUSH
5439: LD_INT 3
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 24
5448: PUSH
5449: LD_INT 251
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 2
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 2
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 21
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 70
5493: PUSH
5494: LD_INT 0
5496: EQUAL
5497: AND
5498: IFFALSE 5575
5500: GO 5502
5502: DISABLE
// begin Say ( JMM , DT2a-JMM-1 ) ;
5503: LD_EXP 1
5507: PPUSH
5508: LD_STRING DT2a-JMM-1
5510: PPUSH
5511: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
5515: LD_INT 22
5517: PUSH
5518: LD_INT 1
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 21
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PPUSH
5539: CALL_OW 69
5543: PUSH
5544: LD_EXP 1
5548: PUSH
5549: EMPTY
5550: LIST
5551: DIFF
5552: PPUSH
5553: LD_STRING DT2a-Sol1-1
5555: PPUSH
5556: LD_STRING DT2a-FSol1-1
5558: PPUSH
5559: CALL 6014 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
5563: LD_EXP 2
5567: PPUSH
5568: LD_STRING DT2a-Don-1
5570: PPUSH
5571: CALL_OW 88
// end ;
5575: END
// every 0 0$1 trigger SeeXY ( 1 , 36 , 55 ) do
5576: LD_INT 1
5578: PPUSH
5579: LD_INT 36
5581: PPUSH
5582: LD_INT 55
5584: PPUSH
5585: CALL_OW 293
5589: IFFALSE 5693
5591: GO 5593
5593: DISABLE
// begin DialogueOn ;
5594: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
5598: LD_INT 36
5600: PPUSH
5601: LD_INT 55
5603: PPUSH
5604: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D5-JMM-1 ,  ) ;
5608: LD_INT 22
5610: PUSH
5611: LD_INT 1
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 21
5620: PUSH
5621: LD_INT 1
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 26
5630: PUSH
5631: LD_INT 1
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 69
5647: PUSH
5648: LD_EXP 1
5652: PUSH
5653: EMPTY
5654: LIST
5655: DIFF
5656: PPUSH
5657: LD_STRING D5-JMM-1
5659: PPUSH
5660: LD_STRING 
5662: PPUSH
5663: CALL 6014 0 3
// if warWithLegion = 1 then
5667: LD_EXP 25
5671: PUSH
5672: LD_INT 1
5674: EQUAL
5675: IFFALSE 5689
// Say ( Donaldson , D5-Don-1 ) ;
5677: LD_EXP 2
5681: PPUSH
5682: LD_STRING D5-Don-1
5684: PPUSH
5685: CALL_OW 88
// DialogueOff ;
5689: CALL_OW 7
// end ;
5693: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
5694: LD_INT 1
5696: PPUSH
5697: LD_INT 10
5699: PPUSH
5700: CALL_OW 292
5704: IFFALSE 5784
5706: GO 5708
5708: DISABLE
// begin DialogueOn ;
5709: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
5713: LD_INT 10
5715: PPUSH
5716: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
5720: LD_INT 22
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 21
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PPUSH
5744: CALL_OW 69
5748: PUSH
5749: LD_EXP 1
5753: PUSH
5754: EMPTY
5755: LIST
5756: DIFF
5757: PPUSH
5758: LD_STRING DT3-Sol1-1
5760: PPUSH
5761: LD_STRING DT3-FSol1-1
5763: PPUSH
5764: CALL 6014 0 3
// Say ( JMM , DT3-JMM-1 ) ;
5768: LD_EXP 1
5772: PPUSH
5773: LD_STRING DT3-JMM-1
5775: PPUSH
5776: CALL_OW 88
// DialogueOff ;
5780: CALL_OW 7
// end ;
5784: END
// every 0 0$1 trigger IsDying ( ruheadlab ) do var i , j , vehs ;
5785: LD_INT 3
5787: PPUSH
5788: CALL_OW 303
5792: IFFALSE 5954
5794: GO 5796
5796: DISABLE
5797: LD_INT 0
5799: PPUSH
5800: PPUSH
5801: PPUSH
// begin vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
5802: LD_ADDR_VAR 0 3
5806: PUSH
5807: LD_INT 10
5809: PPUSH
5810: LD_INT 22
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 2
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 58
5832: PUSH
5833: EMPTY
5834: LIST
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: PPUSH
5841: CALL_OW 70
5845: ST_TO_ADDR
// DialogueOn ;
5846: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5850: LD_EXP 1
5854: PPUSH
5855: LD_STRING D6-JMM-1
5857: PPUSH
5858: CALL_OW 88
// DialogueOff ;
5862: CALL_OW 7
// for i in vehs do
5866: LD_ADDR_VAR 0 1
5870: PUSH
5871: LD_VAR 0 3
5875: PUSH
5876: FOR_IN
5877: IFFALSE 5952
// begin for j in RuScientists do
5879: LD_ADDR_VAR 0 2
5883: PUSH
5884: LD_EXP 29
5888: PUSH
5889: FOR_IN
5890: IFFALSE 5948
// begin AddComEnterUnit ( j , i ) ;
5892: LD_VAR 0 2
5896: PPUSH
5897: LD_VAR 0 1
5901: PPUSH
5902: CALL_OW 180
// AddComMoveToArea ( [ j , i ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
5906: LD_VAR 0 2
5910: PUSH
5911: LD_VAR 0 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: LD_INT 13
5922: PUSH
5923: LD_INT 14
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 1
5932: PPUSH
5933: LD_INT 2
5935: PPUSH
5936: CALL_OW 12
5940: ARRAY
5941: PPUSH
5942: CALL_OW 173
// end ;
5946: GO 5889
5948: POP
5949: POP
// end ;
5950: GO 5876
5952: POP
5953: POP
// end ; end_of_file
5954: PPOPN 3
5956: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5957: LD_INT 0
5959: PPUSH
5960: PPUSH
// if exist_mode then
5961: LD_VAR 0 2
5965: IFFALSE 5984
// unit := CreateCharacter ( ident ) else
5967: LD_ADDR_VAR 0 4
5971: PUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 34
5981: ST_TO_ADDR
5982: GO 5999
// unit := NewCharacter ( ident ) ;
5984: LD_ADDR_VAR 0 4
5988: PUSH
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 25
5998: ST_TO_ADDR
// result := unit ;
5999: LD_ADDR_VAR 0 3
6003: PUSH
6004: LD_VAR 0 4
6008: ST_TO_ADDR
// end ;
6009: LD_VAR 0 3
6013: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6014: LD_INT 0
6016: PPUSH
6017: PPUSH
6018: PPUSH
// rnd = rand ( 1 , characters ) ;
6019: LD_ADDR_VAR 0 6
6023: PUSH
6024: LD_INT 1
6026: PPUSH
6027: LD_VAR 0 1
6031: PPUSH
6032: CALL_OW 12
6036: ST_TO_ADDR
// for i = 1 to characters do
6037: LD_ADDR_VAR 0 5
6041: PUSH
6042: DOUBLE
6043: LD_INT 1
6045: DEC
6046: ST_TO_ADDR
6047: LD_VAR 0 1
6051: PUSH
6052: FOR_TO
6053: IFFALSE 6163
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6055: LD_VAR 0 5
6059: PUSH
6060: LD_VAR 0 6
6064: EQUAL
6065: PUSH
6066: LD_VAR 0 1
6070: PUSH
6071: LD_VAR 0 5
6075: ARRAY
6076: PPUSH
6077: CALL_OW 258
6081: PUSH
6082: LD_INT 1
6084: EQUAL
6085: AND
6086: IFFALSE 6108
// Say ( characters [ i ] , dialogMID ) ;
6088: LD_VAR 0 1
6092: PUSH
6093: LD_VAR 0 5
6097: ARRAY
6098: PPUSH
6099: LD_VAR 0 2
6103: PPUSH
6104: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6108: LD_VAR 0 5
6112: PUSH
6113: LD_VAR 0 6
6117: EQUAL
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: LD_VAR 0 5
6128: ARRAY
6129: PPUSH
6130: CALL_OW 258
6134: PUSH
6135: LD_INT 2
6137: EQUAL
6138: AND
6139: IFFALSE 6161
// Say ( characters [ i ] , dialogFID ) ;
6141: LD_VAR 0 1
6145: PUSH
6146: LD_VAR 0 5
6150: ARRAY
6151: PPUSH
6152: LD_VAR 0 3
6156: PPUSH
6157: CALL_OW 88
// end ;
6161: GO 6052
6163: POP
6164: POP
// end ;
6165: LD_VAR 0 4
6169: RET
// export function ShowQuery1 ; begin
6170: LD_INT 0
6172: PPUSH
// case query ( Q1 ) of 1 :
6173: LD_STRING Q1
6175: PPUSH
6176: CALL_OW 97
6180: PUSH
6181: LD_INT 1
6183: DOUBLE
6184: EQUAL
6185: IFTRUE 6189
6187: GO 6200
6189: POP
// result = 1 ; 2 :
6190: LD_ADDR_VAR 0 1
6194: PUSH
6195: LD_INT 1
6197: ST_TO_ADDR
6198: GO 6239
6200: LD_INT 2
6202: DOUBLE
6203: EQUAL
6204: IFTRUE 6208
6206: GO 6219
6208: POP
// result = 2 ; 3 :
6209: LD_ADDR_VAR 0 1
6213: PUSH
6214: LD_INT 2
6216: ST_TO_ADDR
6217: GO 6239
6219: LD_INT 3
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6227
6225: GO 6238
6227: POP
// result = 3 ; end ;
6228: LD_ADDR_VAR 0 1
6232: PUSH
6233: LD_INT 3
6235: ST_TO_ADDR
6236: GO 6239
6238: POP
// end ;
6239: LD_VAR 0 1
6243: RET
// export function ShowQuery2 ; begin
6244: LD_INT 0
6246: PPUSH
// case query ( Q1a ) of 1 :
6247: LD_STRING Q1a
6249: PPUSH
6250: CALL_OW 97
6254: PUSH
6255: LD_INT 1
6257: DOUBLE
6258: EQUAL
6259: IFTRUE 6263
6261: GO 6274
6263: POP
// result = 1 ; 2 :
6264: LD_ADDR_VAR 0 1
6268: PUSH
6269: LD_INT 1
6271: ST_TO_ADDR
6272: GO 6313
6274: LD_INT 2
6276: DOUBLE
6277: EQUAL
6278: IFTRUE 6282
6280: GO 6293
6282: POP
// result = 2 ; 3 :
6283: LD_ADDR_VAR 0 1
6287: PUSH
6288: LD_INT 2
6290: ST_TO_ADDR
6291: GO 6313
6293: LD_INT 3
6295: DOUBLE
6296: EQUAL
6297: IFTRUE 6301
6299: GO 6312
6301: POP
// result = 3 ; end ;
6302: LD_ADDR_VAR 0 1
6306: PUSH
6307: LD_INT 3
6309: ST_TO_ADDR
6310: GO 6313
6312: POP
// end ;
6313: LD_VAR 0 1
6317: RET
// export function ShowQuery3 ; begin
6318: LD_INT 0
6320: PPUSH
// case query ( Q2 ) of 1 :
6321: LD_STRING Q2
6323: PPUSH
6324: CALL_OW 97
6328: PUSH
6329: LD_INT 1
6331: DOUBLE
6332: EQUAL
6333: IFTRUE 6337
6335: GO 6348
6337: POP
// result = 1 ; 2 :
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
6346: GO 6406
6348: LD_INT 2
6350: DOUBLE
6351: EQUAL
6352: IFTRUE 6356
6354: GO 6367
6356: POP
// result = 2 ; 3 :
6357: LD_ADDR_VAR 0 1
6361: PUSH
6362: LD_INT 2
6364: ST_TO_ADDR
6365: GO 6406
6367: LD_INT 3
6369: DOUBLE
6370: EQUAL
6371: IFTRUE 6375
6373: GO 6386
6375: POP
// result = 3 ; 4 :
6376: LD_ADDR_VAR 0 1
6380: PUSH
6381: LD_INT 3
6383: ST_TO_ADDR
6384: GO 6406
6386: LD_INT 4
6388: DOUBLE
6389: EQUAL
6390: IFTRUE 6394
6392: GO 6405
6394: POP
// result = 4 ; end ;
6395: LD_ADDR_VAR 0 1
6399: PUSH
6400: LD_INT 4
6402: ST_TO_ADDR
6403: GO 6406
6405: POP
// end ;
6406: LD_VAR 0 1
6410: RET
// export function ShowQuery4 ; begin
6411: LD_INT 0
6413: PPUSH
// case query ( Q2K ) of 1 :
6414: LD_STRING Q2K
6416: PPUSH
6417: CALL_OW 97
6421: PUSH
6422: LD_INT 1
6424: DOUBLE
6425: EQUAL
6426: IFTRUE 6430
6428: GO 6441
6430: POP
// result = 1 ; 2 :
6431: LD_ADDR_VAR 0 1
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
6439: GO 6499
6441: LD_INT 2
6443: DOUBLE
6444: EQUAL
6445: IFTRUE 6449
6447: GO 6460
6449: POP
// result = 2 ; 3 :
6450: LD_ADDR_VAR 0 1
6454: PUSH
6455: LD_INT 2
6457: ST_TO_ADDR
6458: GO 6499
6460: LD_INT 3
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6479
6468: POP
// result = 3 ; 4 :
6469: LD_ADDR_VAR 0 1
6473: PUSH
6474: LD_INT 3
6476: ST_TO_ADDR
6477: GO 6499
6479: LD_INT 4
6481: DOUBLE
6482: EQUAL
6483: IFTRUE 6487
6485: GO 6498
6487: POP
// result = 4 ; end ;
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_INT 4
6495: ST_TO_ADDR
6496: GO 6499
6498: POP
// end ;
6499: LD_VAR 0 1
6503: RET
// export function ShowQuery5 ; begin
6504: LD_INT 0
6506: PPUSH
// case query ( Q2a ) of 1 :
6507: LD_STRING Q2a
6509: PPUSH
6510: CALL_OW 97
6514: PUSH
6515: LD_INT 1
6517: DOUBLE
6518: EQUAL
6519: IFTRUE 6523
6521: GO 6534
6523: POP
// result = 1 ; 2 :
6524: LD_ADDR_VAR 0 1
6528: PUSH
6529: LD_INT 1
6531: ST_TO_ADDR
6532: GO 6592
6534: LD_INT 2
6536: DOUBLE
6537: EQUAL
6538: IFTRUE 6542
6540: GO 6553
6542: POP
// result = 2 ; 3 :
6543: LD_ADDR_VAR 0 1
6547: PUSH
6548: LD_INT 2
6550: ST_TO_ADDR
6551: GO 6592
6553: LD_INT 3
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6572
6561: POP
// result = 3 ; 4 :
6562: LD_ADDR_VAR 0 1
6566: PUSH
6567: LD_INT 3
6569: ST_TO_ADDR
6570: GO 6592
6572: LD_INT 4
6574: DOUBLE
6575: EQUAL
6576: IFTRUE 6580
6578: GO 6591
6580: POP
// result = 4 ; end ;
6581: LD_ADDR_VAR 0 1
6585: PUSH
6586: LD_INT 4
6588: ST_TO_ADDR
6589: GO 6592
6591: POP
// end ;
6592: LD_VAR 0 1
6596: RET
// export function ShowQuery6 ; begin
6597: LD_INT 0
6599: PPUSH
// case query ( Q2aK ) of 1 :
6600: LD_STRING Q2aK
6602: PPUSH
6603: CALL_OW 97
6607: PUSH
6608: LD_INT 1
6610: DOUBLE
6611: EQUAL
6612: IFTRUE 6616
6614: GO 6627
6616: POP
// result = 1 ; 2 :
6617: LD_ADDR_VAR 0 1
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
6625: GO 6685
6627: LD_INT 2
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6646
6635: POP
// result = 2 ; 3 :
6636: LD_ADDR_VAR 0 1
6640: PUSH
6641: LD_INT 2
6643: ST_TO_ADDR
6644: GO 6685
6646: LD_INT 3
6648: DOUBLE
6649: EQUAL
6650: IFTRUE 6654
6652: GO 6665
6654: POP
// result = 3 ; 4 :
6655: LD_ADDR_VAR 0 1
6659: PUSH
6660: LD_INT 3
6662: ST_TO_ADDR
6663: GO 6685
6665: LD_INT 4
6667: DOUBLE
6668: EQUAL
6669: IFTRUE 6673
6671: GO 6684
6673: POP
// result = 4 ; end ;
6674: LD_ADDR_VAR 0 1
6678: PUSH
6679: LD_INT 4
6681: ST_TO_ADDR
6682: GO 6685
6684: POP
// end ;
6685: LD_VAR 0 1
6689: RET
// export function ShowQuery7 ; begin
6690: LD_INT 0
6692: PPUSH
// case query ( Q2b ) of 1 :
6693: LD_STRING Q2b
6695: PPUSH
6696: CALL_OW 97
6700: PUSH
6701: LD_INT 1
6703: DOUBLE
6704: EQUAL
6705: IFTRUE 6709
6707: GO 6720
6709: POP
// result = 1 ; 2 :
6710: LD_ADDR_VAR 0 1
6714: PUSH
6715: LD_INT 1
6717: ST_TO_ADDR
6718: GO 6759
6720: LD_INT 2
6722: DOUBLE
6723: EQUAL
6724: IFTRUE 6728
6726: GO 6739
6728: POP
// result = 2 ; 3 :
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_INT 2
6736: ST_TO_ADDR
6737: GO 6759
6739: LD_INT 3
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6758
6747: POP
// result = 3 ; end ;
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_INT 3
6755: ST_TO_ADDR
6756: GO 6759
6758: POP
// end ;
6759: LD_VAR 0 1
6763: RET
// export function ShowQuery8 ; begin
6764: LD_INT 0
6766: PPUSH
// case query ( Q2c ) of 1 :
6767: LD_STRING Q2c
6769: PPUSH
6770: CALL_OW 97
6774: PUSH
6775: LD_INT 1
6777: DOUBLE
6778: EQUAL
6779: IFTRUE 6783
6781: GO 6794
6783: POP
// result = 1 ; 2 :
6784: LD_ADDR_VAR 0 1
6788: PUSH
6789: LD_INT 1
6791: ST_TO_ADDR
6792: GO 6814
6794: LD_INT 2
6796: DOUBLE
6797: EQUAL
6798: IFTRUE 6802
6800: GO 6813
6802: POP
// result = 2 ; end ;
6803: LD_ADDR_VAR 0 1
6807: PUSH
6808: LD_INT 2
6810: ST_TO_ADDR
6811: GO 6814
6813: POP
// end ;
6814: LD_VAR 0 1
6818: RET
// export function ShowQuery9 ; begin
6819: LD_INT 0
6821: PPUSH
// case query ( Q2cK ) of 1 :
6822: LD_STRING Q2cK
6824: PPUSH
6825: CALL_OW 97
6829: PUSH
6830: LD_INT 1
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6849
6838: POP
// result = 1 ; 2 :
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_INT 1
6846: ST_TO_ADDR
6847: GO 6869
6849: LD_INT 2
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6868
6857: POP
// result = 2 ; end ;
6858: LD_ADDR_VAR 0 1
6862: PUSH
6863: LD_INT 2
6865: ST_TO_ADDR
6866: GO 6869
6868: POP
// end ;
6869: LD_VAR 0 1
6873: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
// for i = 1 to count do
6881: LD_ADDR_VAR 0 8
6885: PUSH
6886: DOUBLE
6887: LD_INT 1
6889: DEC
6890: ST_TO_ADDR
6891: LD_VAR 0 6
6895: PUSH
6896: FOR_TO
6897: IFFALSE 6978
// begin uc_side = side ;
6899: LD_ADDR_OWVAR 20
6903: PUSH
6904: LD_VAR 0 1
6908: ST_TO_ADDR
// uc_nation = nation ;
6909: LD_ADDR_OWVAR 21
6913: PUSH
6914: LD_VAR 0 2
6918: ST_TO_ADDR
// hc_gallery =  ;
6919: LD_ADDR_OWVAR 33
6923: PUSH
6924: LD_STRING 
6926: ST_TO_ADDR
// hc_name =  ;
6927: LD_ADDR_OWVAR 26
6931: PUSH
6932: LD_STRING 
6934: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6935: LD_INT 0
6937: PPUSH
6938: LD_VAR 0 5
6942: PPUSH
6943: LD_VAR 0 4
6947: PPUSH
6948: CALL_OW 380
// un = CreateHuman ;
6952: LD_ADDR_VAR 0 10
6956: PUSH
6957: CALL_OW 44
6961: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6962: LD_VAR 0 10
6966: PPUSH
6967: LD_VAR 0 3
6971: PPUSH
6972: CALL_OW 52
// end ;
6976: GO 6896
6978: POP
6979: POP
// end ;
6980: LD_VAR 0 7
6984: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
// for i = 1 to 72 do
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: DOUBLE
6997: LD_INT 1
6999: DEC
7000: ST_TO_ADDR
7001: LD_INT 72
7003: PUSH
7004: FOR_TO
7005: IFFALSE 7063
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
7007: LD_VAR 0 5
7011: PPUSH
7012: LD_VAR 0 1
7016: PPUSH
7017: CALL_OW 321
7021: PUSH
7022: LD_INT 1
7024: EQUAL
7025: PUSH
7026: LD_VAR 0 5
7030: PPUSH
7031: LD_VAR 0 3
7035: PPUSH
7036: CALL_OW 482
7040: PUSH
7041: LD_INT 1
7043: EQUAL
7044: AND
7045: IFFALSE 7061
// AddComResearch ( lab , i ) ;
7047: LD_VAR 0 2
7051: PPUSH
7052: LD_VAR 0 5
7056: PPUSH
7057: CALL_OW 184
7061: GO 7004
7063: POP
7064: POP
// end ;
7065: LD_VAR 0 4
7069: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
7074: PPUSH
7075: PPUSH
7076: PPUSH
7077: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7078: LD_ADDR_VAR 0 7
7082: PUSH
7083: LD_VAR 0 2
7087: PPUSH
7088: CALL_OW 313
7092: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
7093: LD_ADDR_VAR 0 8
7097: PUSH
7098: LD_VAR 0 3
7102: PPUSH
7103: LD_INT 22
7105: PUSH
7106: LD_VAR 0 1
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 25
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 24
7127: PUSH
7128: LD_INT 1000
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 70
7144: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7145: LD_ADDR_VAR 0 5
7149: PUSH
7150: LD_VAR 0 3
7154: PPUSH
7155: LD_INT 22
7157: PUSH
7158: LD_VAR 0 1
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: LD_INT 24
7182: PUSH
7183: LD_INT 1000
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: PPUSH
7202: CALL_OW 70
7206: ST_TO_ADDR
// if buildings_list > 0 and engineerOkInside > 0 then
7207: LD_VAR 0 5
7211: PUSH
7212: LD_INT 0
7214: GREATER
7215: PUSH
7216: LD_VAR 0 7
7220: PUSH
7221: LD_INT 0
7223: GREATER
7224: AND
7225: IFFALSE 7253
// for i in engineerOkInside do
7227: LD_ADDR_VAR 0 6
7231: PUSH
7232: LD_VAR 0 7
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7251
// ComExitBuilding ( i ) ;
7240: LD_VAR 0 6
7244: PPUSH
7245: CALL_OW 122
7249: GO 7237
7251: POP
7252: POP
// if engineerOkOutside > 0 then
7253: LD_VAR 0 8
7257: PUSH
7258: LD_INT 0
7260: GREATER
7261: IFFALSE 7315
// begin for i in engineerOkOutside do
7263: LD_ADDR_VAR 0 6
7267: PUSH
7268: LD_VAR 0 8
7272: PUSH
7273: FOR_IN
7274: IFFALSE 7313
// for j in buildings_list do
7276: LD_ADDR_VAR 0 9
7280: PUSH
7281: LD_VAR 0 5
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7309
// ComRepairBuilding ( i , j [ 1 ] ) ;
7289: LD_VAR 0 6
7293: PPUSH
7294: LD_VAR 0 9
7298: PUSH
7299: LD_INT 1
7301: ARRAY
7302: PPUSH
7303: CALL_OW 130
7307: GO 7286
7309: POP
7310: POP
7311: GO 7273
7313: POP
7314: POP
// end ; if buildings_list = 0 then
7315: LD_VAR 0 5
7319: PUSH
7320: LD_INT 0
7322: EQUAL
7323: IFFALSE 7356
// for i in engineerOkOutside do
7325: LD_ADDR_VAR 0 6
7329: PUSH
7330: LD_VAR 0 8
7334: PUSH
7335: FOR_IN
7336: IFFALSE 7354
// ComEnterUnit ( i , building ) ;
7338: LD_VAR 0 6
7342: PPUSH
7343: LD_VAR 0 2
7347: PPUSH
7348: CALL_OW 120
7352: GO 7335
7354: POP
7355: POP
// end ; end_of_file
7356: LD_VAR 0 4
7360: RET
// on UnitDestroyed ( unit ) do var i ;
7361: LD_INT 0
7363: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 255
7373: PUSH
7374: LD_INT 3
7376: EQUAL
7377: PUSH
7378: LD_VAR 0 1
7382: PPUSH
7383: CALL_OW 247
7387: PUSH
7388: LD_INT 1
7390: EQUAL
7391: AND
7392: IFFALSE 7456
// begin for i in RuScientists do
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_EXP 29
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7454
// if i = unit then
7407: LD_VAR 0 2
7411: PUSH
7412: LD_VAR 0 1
7416: EQUAL
7417: IFFALSE 7452
// begin RuScientists = RuScientists diff [ unit ] ;
7419: LD_ADDR_EXP 29
7423: PUSH
7424: LD_EXP 29
7428: PUSH
7429: LD_VAR 0 1
7433: PUSH
7434: EMPTY
7435: LIST
7436: DIFF
7437: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
7438: LD_ADDR_EXP 30
7442: PUSH
7443: LD_EXP 30
7447: PUSH
7448: LD_INT 1
7450: PLUS
7451: ST_TO_ADDR
// end ;
7452: GO 7404
7454: POP
7455: POP
// end ; end ;
7456: PPOPN 2
7458: END
// on EnterBuilding ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
7459: LD_VAR 0 1
7463: PUSH
7464: LD_INT 10
7466: EQUAL
7467: PUSH
7468: LD_VAR 0 2
7472: PPUSH
7473: CALL_OW 255
7477: PUSH
7478: LD_INT 1
7480: EQUAL
7481: AND
7482: PUSH
7483: LD_EXP 31
7487: PUSH
7488: LD_INT 0
7490: EQUAL
7491: AND
7492: IFFALSE 7595
// begin eventVar1 = 1 ;
7494: LD_ADDR_EXP 31
7498: PUSH
7499: LD_INT 1
7501: ST_TO_ADDR
// teleportExplored = 1 ;
7502: LD_ADDR_EXP 28
7506: PUSH
7507: LD_INT 1
7509: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7510: LD_INT 70
7512: PPUSH
7513: CALL_OW 67
// DialogueOn ;
7517: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] diff [ JMM ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
7521: LD_INT 22
7523: PUSH
7524: LD_INT 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_EXP 1
7535: PUSH
7536: EMPTY
7537: LIST
7538: DIFF
7539: PUSH
7540: EMPTY
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: PPUSH
7548: LD_STRING DT3a-Sol1-1
7550: PPUSH
7551: LD_STRING DT3a-FSol1-1
7553: PPUSH
7554: CALL 6014 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
7558: LD_EXP 1
7562: PPUSH
7563: LD_STRING DT3a-JMM-1
7565: PPUSH
7566: CALL_OW 88
// CenterNowOnUnits ( human ) ;
7570: LD_VAR 0 2
7574: PPUSH
7575: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a1 ) ;
7579: LD_EXP 1
7583: PPUSH
7584: LD_STRING DT3a-JMM-1a1
7586: PPUSH
7587: CALL_OW 88
// DialogueOff ;
7591: CALL_OW 7
// end ; end ; end_of_file
7595: PPOPN 2
7597: END
// every 0 0$1 do
7598: GO 7600
7600: DISABLE
// begin enable ;
7601: ENABLE
// RepairBuilding ( 3 , ruwestdepot , RuWestBase ) ;
7602: LD_INT 3
7604: PPUSH
7605: LD_INT 6
7607: PPUSH
7608: LD_INT 9
7610: PPUSH
7611: CALL 7070 0 3
// RepairBuilding ( 3 , rueastdepot , RuEastBase ) ;
7615: LD_INT 3
7617: PPUSH
7618: LD_INT 4
7620: PPUSH
7621: LD_INT 10
7623: PPUSH
7624: CALL 7070 0 3
// end ;
7628: END
// every 0 0$1 do
7629: GO 7631
7631: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
7632: LD_INT 3
7634: PPUSH
7635: LD_INT 91
7637: PPUSH
7638: LD_INT 3
7640: PPUSH
7641: CALL 6985 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
7645: LD_INT 3
7647: PPUSH
7648: LD_INT 47
7650: PPUSH
7651: LD_INT 3
7653: PPUSH
7654: CALL 6985 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
7658: LD_INT 3
7660: PPUSH
7661: LD_INT 44
7663: PPUSH
7664: LD_INT 3
7666: PPUSH
7667: CALL 6985 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
7671: LD_INT 3
7673: PPUSH
7674: LD_INT 3
7676: PPUSH
7677: LD_INT 3
7679: PPUSH
7680: CALL 6985 0 3
// end ; end_of_file
7684: END
// every 0 0$1 trigger RuScientists = [ ] do
7685: LD_EXP 29
7689: PUSH
7690: EMPTY
7691: EQUAL
7692: IFFALSE 7897
7694: GO 7696
7696: DISABLE
// begin if sciCounter = 0 then
7697: LD_EXP 30
7701: PUSH
7702: LD_INT 0
7704: EQUAL
7705: IFFALSE 7731
// begin Say ( JMM , D7a-JMM-1 ) ;
7707: LD_EXP 1
7711: PPUSH
7712: LD_STRING D7a-JMM-1
7714: PPUSH
7715: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
7719: LD_EXP 19
7723: PPUSH
7724: LD_STRING D7a-Pow-1
7726: PPUSH
7727: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
7731: LD_EXP 30
7735: PUSH
7736: LD_INT 0
7738: GREATER
7739: PUSH
7740: LD_EXP 30
7744: PUSH
7745: LD_INT 6
7747: LESS
7748: AND
7749: IFFALSE 7775
// begin Say ( JMM , D7b-JMM-1 ) ;
7751: LD_EXP 1
7755: PPUSH
7756: LD_STRING D7b-JMM-1
7758: PPUSH
7759: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
7763: LD_EXP 19
7767: PPUSH
7768: LD_STRING D7b-Pow-1
7770: PPUSH
7771: CALL_OW 94
// end ; if sciCounter = 6 then
7775: LD_EXP 30
7779: PUSH
7780: LD_INT 6
7782: EQUAL
7783: IFFALSE 7893
// begin Say ( JMM , D7c-JMM-1 ) ;
7785: LD_EXP 1
7789: PPUSH
7790: LD_STRING D7c-JMM-1
7792: PPUSH
7793: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
7797: LD_EXP 19
7801: PPUSH
7802: LD_STRING D7c-Pow-1
7804: PPUSH
7805: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
7809: LD_EXP 1
7813: PPUSH
7814: LD_STRING D7d-JMM-1
7816: PPUSH
7817: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
7821: LD_EXP 19
7825: PPUSH
7826: LD_STRING D7d-Pow-1
7828: PPUSH
7829: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
7833: LD_EXP 1
7837: PPUSH
7838: LD_STRING D7d-JMM-2
7840: PPUSH
7841: CALL_OW 88
// if askSiberite = 1 then
7845: LD_EXP 27
7849: PUSH
7850: LD_INT 1
7852: EQUAL
7853: IFFALSE 7869
// begin Say ( JMM , D7d-JMM-2a ) ;
7855: LD_EXP 1
7859: PPUSH
7860: LD_STRING D7d-JMM-2a
7862: PPUSH
7863: CALL_OW 88
// end else
7867: GO 7881
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
7869: LD_EXP 19
7873: PPUSH
7874: LD_STRING D7d-Pow-2
7876: PPUSH
7877: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
7881: LD_EXP 19
7885: PPUSH
7886: LD_STRING D7d-Pow-2a
7888: PPUSH
7889: CALL_OW 94
// end ; FinishMission ;
7893: CALL 7898 0 0
// end ;
7897: END
// export function FinishMission ; begin
7898: LD_INT 0
7900: PPUSH
// if teleportExplored = 1 then
7901: LD_EXP 28
7905: PUSH
7906: LD_INT 1
7908: EQUAL
7909: IFFALSE 7923
// AddMedal ( Teleport , 1 ) else
7911: LD_STRING Teleport
7913: PPUSH
7914: LD_INT 1
7916: PPUSH
7917: CALL_OW 101
7921: GO 7934
// AddMedal ( Teleport , - 1 ) ;
7923: LD_STRING Teleport
7925: PPUSH
7926: LD_INT 1
7928: NEG
7929: PPUSH
7930: CALL_OW 101
// if sciCounter > 0 and sciCounter < 6 then
7934: LD_EXP 30
7938: PUSH
7939: LD_INT 0
7941: GREATER
7942: PUSH
7943: LD_EXP 30
7947: PUSH
7948: LD_INT 6
7950: LESS
7951: AND
7952: IFFALSE 7966
// AddMedal ( Materials , 1 ) else
7954: LD_STRING Materials
7956: PPUSH
7957: LD_INT 1
7959: PPUSH
7960: CALL_OW 101
7964: GO 7977
// AddMedal ( Materials , - 1 ) ;
7966: LD_STRING Materials
7968: PPUSH
7969: LD_INT 1
7971: NEG
7972: PPUSH
7973: CALL_OW 101
// if sciCounter = 6 then
7977: LD_EXP 30
7981: PUSH
7982: LD_INT 6
7984: EQUAL
7985: IFFALSE 7999
// AddMedal ( Scientists , 1 ) else
7987: LD_STRING Scientists
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: CALL_OW 101
7997: GO 8010
// AddMedal ( Scientists , - 1 ) ;
7999: LD_STRING Scientists
8001: PPUSH
8002: LD_INT 1
8004: NEG
8005: PPUSH
8006: CALL_OW 101
// GiveMedals ( MAIN ) ;
8010: LD_STRING MAIN
8012: PPUSH
8013: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
8017: LD_INT 22
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 23
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 21
8039: PUSH
8040: LD_INT 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 2
8049: PUSH
8050: LD_INT 25
8052: PUSH
8053: LD_INT 1
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 25
8062: PUSH
8063: LD_INT 2
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_INT 25
8072: PUSH
8073: LD_INT 3
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 25
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 25
8092: PUSH
8093: LD_INT 5
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: PPUSH
8114: CALL_OW 69
8118: PPUSH
8119: CALL_OW 43
// YouWin ;
8123: CALL_OW 103
// end ;
8127: LD_VAR 0 1
8131: RET
