// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17175 0 0
// PrepareDifficulty ;
 195: CALL 13555 0 0
// PrepareVehicles ;
 199: CALL 1558 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1132 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2934 0 0
// PrepareWestBase ;
 227: CALL 3446 0 0
// PrepareEastBase ;
 231: CALL 3006 0 0
// PrepareOtherRussians ;
 235: CALL 3558 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11c_others
 575: PPUSH
 576: CALL_OW 31
 580: PUSH
 581: LD_STRING 11_others
 583: PPUSH
 584: CALL_OW 31
 588: UNION
 589: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_STRING 11_JMM
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL 13194 0 2
 605: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 606: LD_EXP 1
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 2
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 58
 645: PUSH
 646: EMPTY
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: PPUSH
 654: CALL_OW 69
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 667: LD_STRING 11_Lisa
 669: PPUSH
 670: CALL_OW 28
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 725
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 680: LD_ADDR_EXP 2
 684: PUSH
 685: LD_STRING 11_Lisa
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: CALL 13194 0 2
 695: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 708: LD_EXP 2
 712: PPUSH
 713: LD_INT 4
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end else
 723: GO 741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 725: LD_INT 4
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_INT 0
 736: PPUSH
 737: CALL 1132 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 741: LD_STRING 11_Donaldson
 743: PPUSH
 744: CALL_OW 28
 748: PUSH
 749: LD_INT 1
 751: EQUAL
 752: IFFALSE 799
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 754: LD_ADDR_EXP 3
 758: PUSH
 759: LD_STRING 11_Donaldson
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: CALL 13194 0 2
 769: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 770: LD_EXP 3
 774: PPUSH
 775: LD_INT 1
 777: PPUSH
 778: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 782: LD_EXP 3
 786: PPUSH
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 0
 792: PPUSH
 793: CALL_OW 49
// end else
 797: GO 815
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 799: LD_INT 4
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL 1132 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 815: LD_STRING 11_Cyrus
 817: PPUSH
 818: CALL_OW 28
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 873
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 828: LD_ADDR_EXP 5
 832: PUSH
 833: LD_STRING 11_Cyrus
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 13194 0 2
 843: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 844: LD_EXP 5
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 856: LD_EXP 5
 860: PPUSH
 861: LD_INT 4
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL_OW 49
// end else
 871: GO 889
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 873: LD_INT 4
 875: PPUSH
 876: LD_INT 0
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL 1132 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 889: LD_STRING 11_Denis
 891: PPUSH
 892: CALL_OW 28
 896: PUSH
 897: LD_INT 1
 899: EQUAL
 900: IFFALSE 947
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 902: LD_ADDR_EXP 6
 906: PUSH
 907: LD_STRING 11_Denis
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL 13194 0 2
 917: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 918: LD_EXP 6
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 930: LD_EXP 6
 934: PPUSH
 935: LD_INT 4
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: CALL_OW 49
// end else
 945: GO 963
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 947: LD_INT 4
 949: PPUSH
 950: LD_INT 0
 952: PPUSH
 953: LD_INT 1
 955: PPUSH
 956: LD_INT 0
 958: PPUSH
 959: CALL 1132 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 963: LD_STRING 11_Frank
 965: PPUSH
 966: CALL_OW 28
 970: PUSH
 971: LD_INT 1
 973: EQUAL
 974: IFFALSE 1021
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 976: LD_ADDR_EXP 12
 980: PUSH
 981: LD_STRING 11_Frank
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: CALL 13194 0 2
 991: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 992: LD_EXP 12
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1004: LD_EXP 12
1008: PPUSH
1009: LD_INT 4
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// end else
1019: GO 1037
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1021: LD_INT 4
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: LD_INT 1
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL 1132 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1037: LD_STRING 11_Cornell
1039: PPUSH
1040: CALL_OW 28
1044: PUSH
1045: LD_INT 1
1047: EQUAL
1048: IFFALSE 1095
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1050: LD_ADDR_EXP 10
1054: PUSH
1055: LD_STRING 11_Cornell
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: CALL 13194 0 2
1065: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1066: LD_EXP 10
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1078: LD_EXP 10
1082: PPUSH
1083: LD_INT 4
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL_OW 49
// end else
1093: GO 1111
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1095: LD_INT 4
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL 1132 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1111: LD_ADDR_EXP 22
1115: PUSH
1116: LD_STRING Powell
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL 13194 0 2
1126: ST_TO_ADDR
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
// if mech = 1 then
1139: LD_VAR 0 4
1143: PUSH
1144: LD_INT 1
1146: EQUAL
1147: IFFALSE 1384
// begin if others11 > 0 then
1149: LD_EXP 14
1153: PUSH
1154: LD_INT 0
1156: GREATER
1157: IFFALSE 1324
// begin for i := 1 to others11 - 1 do
1159: LD_ADDR_VAR 0 6
1163: PUSH
1164: DOUBLE
1165: LD_INT 1
1167: DEC
1168: ST_TO_ADDR
1169: LD_EXP 14
1173: PUSH
1174: LD_INT 1
1176: MINUS
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1261
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1181: LD_EXP 14
1185: PUSH
1186: LD_VAR 0 6
1190: ARRAY
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: CALL_OW 259
1199: PUSH
1200: LD_EXP 14
1204: PUSH
1205: LD_VAR 0 6
1209: PUSH
1210: LD_INT 1
1212: PLUS
1213: ARRAY
1214: PPUSH
1215: LD_INT 3
1217: PPUSH
1218: CALL_OW 259
1222: LESS
1223: IFFALSE 1259
// begin mecha = others11 [ i + 1 ] ;
1225: LD_ADDR_VAR 0 9
1229: PUSH
1230: LD_EXP 14
1234: PUSH
1235: LD_VAR 0 6
1239: PUSH
1240: LD_INT 1
1242: PLUS
1243: ARRAY
1244: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1245: LD_VAR 0 9
1249: PPUSH
1250: LD_INT 3
1252: PPUSH
1253: CALL_OW 336
// break ;
1257: GO 1261
// end ; end ;
1259: GO 1178
1261: POP
1262: POP
// if spawnMode = 1 then
1263: LD_VAR 0 3
1267: PUSH
1268: LD_INT 1
1270: EQUAL
1271: IFFALSE 1292
// PlaceUnitArea ( mecha , area , false ) else
1273: LD_VAR 0 9
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
1290: GO 1306
// PlaceHumanInUnit ( mecha , veh ) ;
1292: LD_VAR 0 9
1296: PPUSH
1297: LD_VAR 0 2
1301: PPUSH
1302: CALL_OW 52
// others11 = others11 diff mecha ;
1306: LD_ADDR_EXP 14
1310: PUSH
1311: LD_EXP 14
1315: PUSH
1316: LD_VAR 0 9
1320: DIFF
1321: ST_TO_ADDR
// end else
1322: GO 1382
// begin hc_name =  ;
1324: LD_ADDR_OWVAR 26
1328: PUSH
1329: LD_STRING 
1331: ST_TO_ADDR
// hc_gallery =  ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1340: LD_INT 0
1342: PPUSH
1343: LD_INT 7
1345: PPUSH
1346: LD_INT 9
1348: PPUSH
1349: CALL_OW 12
1353: PPUSH
1354: CALL_OW 383
// un = CreateHuman ;
1358: LD_ADDR_VAR 0 7
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1368: LD_VAR 0 7
1372: PPUSH
1373: LD_VAR 0 2
1377: PPUSH
1378: CALL_OW 52
// end ; end else
1382: GO 1553
// begin if others11 > 0 then
1384: LD_EXP 14
1388: PUSH
1389: LD_INT 0
1391: GREATER
1392: IFFALSE 1465
// begin if spawnMode = 1 then
1394: LD_VAR 0 3
1398: PUSH
1399: LD_INT 1
1401: EQUAL
1402: IFFALSE 1427
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1404: LD_EXP 14
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: LD_VAR 0 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL_OW 49
1425: GO 1445
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1427: LD_EXP 14
1431: PUSH
1432: LD_INT 1
1434: ARRAY
1435: PPUSH
1436: LD_VAR 0 2
1440: PPUSH
1441: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1445: LD_ADDR_EXP 14
1449: PUSH
1450: LD_EXP 14
1454: PPUSH
1455: LD_INT 1
1457: PPUSH
1458: CALL_OW 3
1462: ST_TO_ADDR
// end else
1463: GO 1553
// begin hc_name =  ;
1465: LD_ADDR_OWVAR 26
1469: PUSH
1470: LD_STRING 
1472: ST_TO_ADDR
// hc_gallery =  ;
1473: LD_ADDR_OWVAR 33
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1481: LD_INT 0
1483: PPUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 4
1507: PPUSH
1508: CALL_OW 12
1512: ARRAY
1513: PPUSH
1514: LD_INT 7
1516: PPUSH
1517: LD_INT 9
1519: PPUSH
1520: CALL_OW 12
1524: PPUSH
1525: CALL_OW 380
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 7
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1539: LD_VAR 0 7
1543: PPUSH
1544: LD_VAR 0 2
1548: PPUSH
1549: CALL_OW 52
// end ; end ; end ;
1553: LD_VAR 0 5
1557: RET
// export function PrepareVehicles ; var veh ; begin
1558: LD_INT 0
1560: PPUSH
1561: PPUSH
// uc_side = 1 ;
1562: LD_ADDR_OWVAR 20
1566: PUSH
1567: LD_INT 1
1569: ST_TO_ADDR
// uc_nation = 1 ;
1570: LD_ADDR_OWVAR 21
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1578: LD_ADDR_OWVAR 37
1582: PUSH
1583: LD_INT 3
1585: ST_TO_ADDR
// vc_engine = 3 ;
1586: LD_ADDR_OWVAR 39
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_control = 3 ;
1594: LD_ADDR_OWVAR 38
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1602: LD_ADDR_OWVAR 40
1606: PUSH
1607: LD_INT 4
1609: ST_TO_ADDR
// veh = CreateVehicle ;
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: CALL_OW 45
1619: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1620: LD_VAR 0 2
1624: PPUSH
1625: LD_INT 4
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 49
// vc_weapon = us_double_gun ;
1635: LD_ADDR_OWVAR 40
1639: PUSH
1640: LD_INT 5
1642: ST_TO_ADDR
// vc_control = 1 ;
1643: LD_ADDR_OWVAR 38
1647: PUSH
1648: LD_INT 1
1650: ST_TO_ADDR
// veh = CreateVehicle ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: CALL_OW 45
1660: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL_OW 49
// vc_weapon = us_light_gun ;
1676: LD_ADDR_OWVAR 40
1680: PUSH
1681: LD_INT 3
1683: ST_TO_ADDR
// vc_control = 3 ;
1684: LD_ADDR_OWVAR 38
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1692: LD_ADDR_OWVAR 37
1696: PUSH
1697: LD_INT 2
1699: ST_TO_ADDR
// veh = CreateVehicle ;
1700: LD_ADDR_VAR 0 2
1704: PUSH
1705: CALL_OW 45
1709: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1710: LD_VAR 0 2
1714: PPUSH
1715: LD_INT 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1725: LD_ADDR_OWVAR 40
1729: PUSH
1730: LD_INT 4
1732: ST_TO_ADDR
// veh = CreateVehicle ;
1733: LD_ADDR_VAR 0 2
1737: PUSH
1738: CALL_OW 45
1742: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1743: LD_VAR 0 2
1747: PPUSH
1748: LD_INT 4
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 49
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PowellSupport1 ; var veh , un ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1784: LD_STRING 11_Brown
1786: PPUSH
1787: CALL_OW 28
1791: PUSH
1792: LD_INT 1
1794: EQUAL
1795: IFFALSE 1842
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1797: LD_ADDR_EXP 7
1801: PUSH
1802: LD_STRING 11_Brown
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: CALL 13194 0 2
1812: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1813: LD_EXP 7
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1825: LD_EXP 7
1829: PPUSH
1830: LD_INT 4
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 49
// end else
1840: GO 1858
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1842: LD_INT 4
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL 1132 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1858: LD_STRING 11_Gary
1860: PPUSH
1861: CALL_OW 28
1865: PUSH
1866: LD_INT 1
1868: EQUAL
1869: IFFALSE 1916
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1871: LD_ADDR_EXP 11
1875: PUSH
1876: LD_STRING 11_Gary
1878: PPUSH
1879: LD_INT 1
1881: PPUSH
1882: CALL 13194 0 2
1886: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1887: LD_EXP 11
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1899: LD_EXP 11
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 49
// end else
1914: GO 1932
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1916: LD_INT 4
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL 1132 0 4
// end ; vc_chassis = us_medium_tracked ;
1932: LD_ADDR_OWVAR 37
1936: PUSH
1937: LD_INT 3
1939: ST_TO_ADDR
// vc_engine = 3 ;
1940: LD_ADDR_OWVAR 39
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_control = 1 ;
1948: LD_ADDR_OWVAR 38
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// vc_weapon = us_crane ;
1956: LD_ADDR_OWVAR 40
1960: PUSH
1961: LD_INT 13
1963: ST_TO_ADDR
// veh = CreateVehicle ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: CALL_OW 45
1973: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_INT 4
1981: PPUSH
1982: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1986: LD_VAR 0 2
1990: PPUSH
1991: LD_INT 4
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2001: LD_INT 4
2003: PPUSH
2004: LD_VAR 0 2
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: CALL 1132 0 4
// vc_weapon = 9 ;
2019: LD_ADDR_OWVAR 40
2023: PUSH
2024: LD_INT 9
2026: ST_TO_ADDR
// veh = CreateVehicle ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: CALL_OW 45
2036: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2037: LD_VAR 0 2
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_INT 4
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2064: LD_INT 4
2066: PPUSH
2067: LD_VAR 0 2
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 1132 0 4
// vc_control = 3 ;
2082: LD_ADDR_OWVAR 38
2086: PUSH
2087: LD_INT 3
2089: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2090: LD_ADDR_OWVAR 40
2094: PUSH
2095: LD_INT 12
2097: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2098: LD_ADDR_EXP 15
2102: PUSH
2103: CALL_OW 45
2107: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2108: LD_ADDR_EXP 16
2112: PUSH
2113: CALL_OW 45
2117: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2118: LD_EXP 15
2122: PPUSH
2123: LD_INT 4
2125: PPUSH
2126: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2130: LD_EXP 16
2134: PPUSH
2135: LD_INT 4
2137: PPUSH
2138: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2142: LD_EXP 15
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: LD_INT 0
2152: PPUSH
2153: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2157: LD_EXP 16
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2172: LD_EXP 15
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: LD_INT 100
2182: PPUSH
2183: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2187: LD_EXP 16
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 80
2197: PPUSH
2198: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2202: LD_EXP 16
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_INT 20
2212: PPUSH
2213: CALL_OW 291
// end ;
2217: LD_VAR 0 1
2221: RET
// export function PowellSupport2 ; var veh , un ; begin
2222: LD_INT 0
2224: PPUSH
2225: PPUSH
2226: PPUSH
// uc_side = 1 ;
2227: LD_ADDR_OWVAR 20
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// uc_nation = 1 ;
2235: LD_ADDR_OWVAR 21
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2243: LD_ADDR_OWVAR 37
2247: PUSH
2248: LD_INT 2
2250: ST_TO_ADDR
// vc_engine = 3 ;
2251: LD_ADDR_OWVAR 39
2255: PUSH
2256: LD_INT 3
2258: ST_TO_ADDR
// vc_control = 3 ;
2259: LD_ADDR_OWVAR 38
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2267: LD_ADDR_OWVAR 40
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// veh = CreateVehicle ;
2275: LD_ADDR_VAR 0 2
2279: PUSH
2280: CALL_OW 45
2284: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2285: LD_VAR 0 2
2289: PPUSH
2290: LD_INT 4
2292: PPUSH
2293: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_INT 4
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// vc_control = 1 ;
2312: LD_ADDR_OWVAR 38
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2320: LD_ADDR_OWVAR 37
2324: PUSH
2325: LD_INT 2
2327: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2328: LD_ADDR_OWVAR 40
2332: PUSH
2333: LD_INT 5
2335: ST_TO_ADDR
// veh = CreateVehicle ;
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: CALL_OW 45
2345: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 4
2353: PPUSH
2354: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2358: LD_VAR 0 2
2362: PPUSH
2363: LD_INT 4
2365: PPUSH
2366: LD_INT 0
2368: PPUSH
2369: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2373: LD_STRING 11_Bobby
2375: PPUSH
2376: CALL_OW 28
2380: PUSH
2381: LD_INT 1
2383: EQUAL
2384: IFFALSE 2430
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2386: LD_ADDR_EXP 4
2390: PUSH
2391: LD_STRING 11_Bobby
2393: PPUSH
2394: LD_INT 1
2396: PPUSH
2397: CALL 13194 0 2
2401: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2402: LD_EXP 4
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2414: LD_EXP 4
2418: PPUSH
2419: LD_VAR 0 2
2423: PPUSH
2424: CALL_OW 52
// end else
2428: GO 2448
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2430: LD_INT 0
2432: PPUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_INT 2
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL 1132 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2448: LD_STRING 11_Houten
2450: PPUSH
2451: CALL_OW 28
2455: PUSH
2456: LD_INT 1
2458: EQUAL
2459: IFFALSE 2506
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2461: LD_ADDR_EXP 9
2465: PUSH
2466: LD_STRING 11_Houten
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL 13194 0 2
2476: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2477: LD_EXP 9
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2489: LD_EXP 9
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end else
2504: GO 2522
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2506: LD_INT 4
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 1132 0 4
// end ; vc_control = 3 ;
2522: LD_ADDR_OWVAR 38
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2530: LD_ADDR_OWVAR 40
2534: PUSH
2535: LD_INT 12
2537: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2538: LD_ADDR_EXP 17
2542: PUSH
2543: CALL_OW 45
2547: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2548: LD_EXP 17
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 233
// amCargo4 = CreateVehicle ;
2560: LD_ADDR_EXP 18
2564: PUSH
2565: CALL_OW 45
2569: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2570: LD_EXP 18
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: CALL_OW 233
// amCargo5 = CreateVehicle ;
2582: LD_ADDR_EXP 19
2586: PUSH
2587: CALL_OW 45
2591: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2592: LD_EXP 19
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2604: LD_EXP 17
2608: PPUSH
2609: LD_INT 4
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2619: LD_EXP 18
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2634: LD_EXP 19
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// if kurtStatus > 0 then
2649: LD_EXP 27
2653: PUSH
2654: LD_INT 0
2656: GREATER
2657: IFFALSE 2706
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2659: LD_EXP 17
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 100
2669: PPUSH
2670: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2674: LD_EXP 18
2678: PPUSH
2679: LD_INT 1
2681: PPUSH
2682: LD_INT 100
2684: PPUSH
2685: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2689: LD_EXP 19
2693: PPUSH
2694: LD_INT 3
2696: PPUSH
2697: LD_INT 80
2699: PPUSH
2700: CALL_OW 291
// end else
2704: GO 2751
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2706: LD_EXP 17
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: LD_INT 100
2716: PPUSH
2717: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2721: LD_EXP 18
2725: PPUSH
2726: LD_INT 3
2728: PPUSH
2729: LD_INT 60
2731: PPUSH
2732: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2736: LD_EXP 19
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 100
2746: PPUSH
2747: CALL_OW 291
// end ; end ;
2751: LD_VAR 0 1
2755: RET
// export function PowellSupport3 ; var veh , un ; begin
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
// uc_side = 1 ;
2761: LD_ADDR_OWVAR 20
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// uc_nation = 1 ;
2769: LD_ADDR_OWVAR 21
2773: PUSH
2774: LD_INT 1
2776: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2777: LD_INT 4
2779: PPUSH
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 1
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL 1132 0 4
// vc_chassis = us_medium_wheeled ;
2793: LD_ADDR_OWVAR 37
2797: PUSH
2798: LD_INT 2
2800: ST_TO_ADDR
// vc_engine = 3 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 3
2808: ST_TO_ADDR
// vc_control = 3 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 12
2824: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2825: LD_ADDR_EXP 20
2829: PUSH
2830: CALL_OW 45
2834: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2835: LD_ADDR_EXP 21
2839: PUSH
2840: CALL_OW 45
2844: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2845: LD_EXP 20
2849: PPUSH
2850: LD_INT 4
2852: PPUSH
2853: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2857: LD_EXP 21
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2869: LD_EXP 20
2873: PPUSH
2874: LD_INT 4
2876: PPUSH
2877: LD_INT 0
2879: PPUSH
2880: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2884: LD_EXP 21
2888: PPUSH
2889: LD_INT 4
2891: PPUSH
2892: LD_INT 0
2894: PPUSH
2895: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2899: LD_EXP 20
2903: PPUSH
2904: LD_INT 1
2906: PPUSH
2907: LD_INT 100
2909: PPUSH
2910: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
2914: LD_EXP 21
2918: PPUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 100
2924: PPUSH
2925: CALL_OW 291
// end ; end_of_file
2929: LD_VAR 0 1
2933: RET
// export function PrepareRussianCommander ; begin
2934: LD_INT 0
2936: PPUSH
// uc_side = 3 ;
2937: LD_ADDR_OWVAR 20
2941: PUSH
2942: LD_INT 3
2944: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2945: LD_ADDR_EXP 23
2949: PUSH
2950: LD_STRING Davidov
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL 13194 0 2
2960: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2961: LD_EXP 23
2965: PPUSH
2966: LD_INT 3
2968: PPUSH
2969: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2973: LD_ADDR_EXP 35
2977: PUSH
2978: LD_EXP 35
2982: PUSH
2983: LD_EXP 23
2987: ADD
2988: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2989: LD_EXP 35
2993: PPUSH
2994: LD_INT 4
2996: PPUSH
2997: CALL_OW 336
// end ;
3001: LD_VAR 0 1
3005: RET
// export function PrepareEastBase ; var i , un ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3011: LD_INT 3
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 121
3019: PPUSH
3020: LD_EXP 37
3024: PPUSH
3025: LD_EXP 38
3029: PPUSH
3030: CALL_OW 12
3034: PPUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL 13986 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 3
3050: PPUSH
3051: LD_INT 121
3053: PPUSH
3054: LD_EXP 37
3058: PPUSH
3059: LD_EXP 38
3063: PPUSH
3064: CALL_OW 12
3068: PPUSH
3069: LD_INT 9
3071: PPUSH
3072: LD_INT 3
3074: PPUSH
3075: CALL 13986 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3079: LD_INT 3
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 4
3087: PPUSH
3088: LD_EXP 37
3092: PPUSH
3093: LD_EXP 38
3097: PPUSH
3098: CALL_OW 12
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL 13986 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: LD_INT 112
3121: PPUSH
3122: LD_EXP 37
3126: PPUSH
3127: LD_EXP 38
3131: PPUSH
3132: CALL_OW 12
3136: PPUSH
3137: LD_INT 3
3139: PPUSH
3140: LD_INT 6
3142: PPUSH
3143: CALL 13986 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3147: LD_INT 3
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_INT 47
3155: PPUSH
3156: LD_EXP 37
3160: PPUSH
3161: LD_EXP 38
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: LD_INT 4
3173: PPUSH
3174: LD_INT 6
3176: PPUSH
3177: CALL 13986 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 129
3189: PPUSH
3190: LD_EXP 37
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 6
3210: PPUSH
3211: CALL 13986 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 135
3223: PPUSH
3224: LD_EXP 37
3228: PPUSH
3229: LD_EXP 38
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 4
3241: PPUSH
3242: LD_INT 6
3244: PPUSH
3245: CALL 13986 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 22
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 30
3266: PUSH
3267: LD_INT 32
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PPUSH
3278: CALL_OW 69
3282: PUSH
3283: FOR_IN
3284: IFFALSE 3324
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 3
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 37
3301: PPUSH
3302: LD_EXP 38
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: CALL 13986 0 6
3322: GO 3283
3324: POP
3325: POP
// for i = 1 to 5 do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: DOUBLE
3332: LD_INT 1
3334: DEC
3335: ST_TO_ADDR
3336: LD_INT 5
3338: PUSH
3339: FOR_TO
3340: IFFALSE 3439
// begin uc_side = 3 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 3
3349: ST_TO_ADDR
// uc_nation = 3 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 3
3357: ST_TO_ADDR
// hc_gallery =  ;
3358: LD_ADDR_OWVAR 33
3362: PUSH
3363: LD_STRING 
3365: ST_TO_ADDR
// hc_name =  ;
3366: LD_ADDR_OWVAR 26
3370: PUSH
3371: LD_STRING 
3373: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3374: LD_INT 0
3376: PPUSH
3377: LD_INT 4
3379: PPUSH
3380: LD_EXP 37
3384: PPUSH
3385: LD_EXP 38
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: CALL_OW 380
// un = CreateHuman ;
3399: LD_ADDR_VAR 0 3
3403: PUSH
3404: CALL_OW 44
3408: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3409: LD_VAR 0 3
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3421: LD_ADDR_EXP 35
3425: PUSH
3426: LD_EXP 35
3430: PUSH
3431: LD_VAR 0 3
3435: ADD
3436: ST_TO_ADDR
// end ;
3437: GO 3339
3439: POP
3440: POP
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareWestBase ; var i , un ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
3450: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 3
3456: PPUSH
3457: LD_INT 6
3459: PPUSH
3460: LD_EXP 37
3464: PPUSH
3465: LD_EXP 38
3469: PPUSH
3470: CALL_OW 12
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: LD_INT 3
3480: PPUSH
3481: CALL 13986 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3485: LD_INT 3
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: LD_INT 91
3493: PPUSH
3494: LD_EXP 37
3498: PPUSH
3499: LD_EXP 38
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: LD_INT 4
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: CALL 13986 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3519: LD_INT 3
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: LD_INT 21
3527: PPUSH
3528: LD_EXP 37
3532: PPUSH
3533: LD_EXP 38
3537: PPUSH
3538: CALL_OW 12
3542: PPUSH
3543: LD_INT 3
3545: PPUSH
3546: LD_INT 6
3548: PPUSH
3549: CALL 13986 0 6
// end ;
3553: LD_VAR 0 1
3557: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
// uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// for i = 1 to 5 do
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: DOUBLE
3586: LD_INT 1
3588: DEC
3589: ST_TO_ADDR
3590: LD_INT 5
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3664
// begin hc_gallery =  ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING 
3603: ST_TO_ADDR
// hc_name =  ;
3604: LD_ADDR_OWVAR 26
3608: PUSH
3609: LD_STRING 
3611: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3612: LD_INT 0
3614: PPUSH
3615: LD_INT 9
3617: PPUSH
3618: LD_EXP 37
3622: PPUSH
3623: LD_EXP 38
3627: PPUSH
3628: CALL_OW 12
3632: PPUSH
3633: CALL_OW 380
// un = CreateHuman ;
3637: LD_ADDR_VAR 0 3
3641: PUSH
3642: CALL_OW 44
3646: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3647: LD_VAR 0 3
3651: PPUSH
3652: LD_INT 8
3654: PPUSH
3655: LD_INT 0
3657: PPUSH
3658: CALL_OW 49
// end ;
3662: GO 3593
3664: POP
3665: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3666: LD_ADDR_VAR 0 2
3670: PUSH
3671: DOUBLE
3672: LD_INT 1
3674: DEC
3675: ST_TO_ADDR
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: LD_OWVAR 67
3694: ARRAY
3695: PUSH
3696: FOR_TO
3697: IFFALSE 3767
// begin hc_gallery =  ;
3699: LD_ADDR_OWVAR 33
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// hc_name =  ;
3707: LD_ADDR_OWVAR 26
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3715: LD_INT 0
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: LD_EXP 38
3730: PPUSH
3731: CALL_OW 12
3735: PPUSH
3736: CALL_OW 380
// un = CreateHuman ;
3740: LD_ADDR_VAR 0 3
3744: PUSH
3745: CALL_OW 44
3749: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3750: LD_VAR 0 3
3754: PPUSH
3755: LD_INT 8
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: CALL_OW 49
// end ;
3765: GO 3696
3767: POP
3768: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3769: LD_ADDR_VAR 0 2
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3996
// begin vc_engine = 3 ;
3802: LD_ADDR_OWVAR 39
3806: PUSH
3807: LD_INT 3
3809: ST_TO_ADDR
// vc_control = 1 ;
3810: LD_ADDR_OWVAR 38
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3818: LD_ADDR_OWVAR 40
3822: PUSH
3823: LD_INT 42
3825: PUSH
3826: LD_INT 43
3828: PUSH
3829: LD_INT 44
3831: PUSH
3832: LD_INT 45
3834: PUSH
3835: LD_INT 46
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 5
3850: PPUSH
3851: CALL_OW 12
3855: ARRAY
3856: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3857: LD_OWVAR 40
3861: PUSH
3862: LD_INT 46
3864: EQUAL
3865: IFFALSE 3877
// vc_chassis = ru_heavy_tracked else
3867: LD_ADDR_OWVAR 37
3871: PUSH
3872: LD_INT 24
3874: ST_TO_ADDR
3875: GO 3904
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3877: LD_ADDR_OWVAR 37
3881: PUSH
3882: LD_INT 22
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 2
3897: PPUSH
3898: CALL_OW 12
3902: ARRAY
3903: ST_TO_ADDR
// veh = CreateVehicle ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: CALL_OW 45
3913: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3914: LD_VAR 0 4
3918: PPUSH
3919: LD_INT 3
3921: PPUSH
3922: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_INT 5
3933: PPUSH
3934: LD_INT 0
3936: PPUSH
3937: CALL_OW 49
// hc_gallery =  ;
3941: LD_ADDR_OWVAR 33
3945: PUSH
3946: LD_STRING 
3948: ST_TO_ADDR
// hc_name =  ;
3949: LD_ADDR_OWVAR 26
3953: PUSH
3954: LD_STRING 
3956: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3957: LD_INT 0
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: LD_INT 10
3965: PPUSH
3966: CALL_OW 380
// un = CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 4
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3799
3996: POP
3997: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 3
4010: PUSH
4011: LD_INT 4
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: PUSH
4022: LD_OWVAR 67
4026: ARRAY
4027: PUSH
4028: FOR_TO
4029: IFFALSE 4176
// begin vc_engine = 3 ;
4031: LD_ADDR_OWVAR 39
4035: PUSH
4036: LD_INT 3
4038: ST_TO_ADDR
// vc_control = 3 ;
4039: LD_ADDR_OWVAR 38
4043: PUSH
4044: LD_INT 3
4046: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4047: LD_ADDR_OWVAR 40
4051: PUSH
4052: LD_INT 42
4054: PUSH
4055: LD_INT 43
4057: PUSH
4058: LD_INT 44
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 49
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 1
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 12
4088: ARRAY
4089: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4090: LD_OWVAR 40
4094: PUSH
4095: LD_INT 46
4097: EQUAL
4098: IFFALSE 4110
// vc_chassis = ru_heavy_tracked else
4100: LD_ADDR_OWVAR 37
4104: PUSH
4105: LD_INT 24
4107: ST_TO_ADDR
4108: GO 4137
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4110: LD_ADDR_OWVAR 37
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 21
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 1
4127: PPUSH
4128: LD_INT 2
4130: PPUSH
4131: CALL_OW 12
4135: ARRAY
4136: ST_TO_ADDR
// veh = CreateVehicle ;
4137: LD_ADDR_VAR 0 4
4141: PUSH
4142: CALL_OW 45
4146: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4159: LD_VAR 0 4
4163: PPUSH
4164: LD_INT 6
4166: PPUSH
4167: LD_INT 0
4169: PPUSH
4170: CALL_OW 49
// end ;
4174: GO 4028
4176: POP
4177: POP
// end ; end_of_file
4178: LD_VAR 0 1
4182: RET
// export function PrepareKurt ; begin
4183: LD_INT 0
4185: PPUSH
// uc_side = 8 ;
4186: LD_ADDR_OWVAR 20
4190: PUSH
4191: LD_INT 8
4193: ST_TO_ADDR
// uc_nation = 2 ;
4194: LD_ADDR_OWVAR 21
4198: PUSH
4199: LD_INT 2
4201: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4202: LD_ADDR_OWVAR 37
4206: PUSH
4207: LD_INT 13
4209: ST_TO_ADDR
// vc_engine = 1 ;
4210: LD_ADDR_OWVAR 39
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// vc_control = 1 ;
4218: LD_ADDR_OWVAR 38
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// vc_weapon = 24 ;
4226: LD_ADDR_OWVAR 40
4230: PUSH
4231: LD_INT 24
4233: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4234: LD_ADDR_EXP 26
4238: PUSH
4239: CALL_OW 45
4243: ST_TO_ADDR
// if kurtStatus > 0 then
4244: LD_EXP 27
4248: PUSH
4249: LD_INT 0
4251: GREATER
4252: IFFALSE 4301
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4254: LD_ADDR_EXP 24
4258: PUSH
4259: LD_STRING Kurt
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL 13194 0 2
4269: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4270: LD_EXP 26
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4285: LD_EXP 24
4289: PPUSH
4290: LD_EXP 26
4294: PPUSH
4295: CALL_OW 52
// end else
4299: GO 4366
// begin hc_name =  ;
4301: LD_ADDR_OWVAR 26
4305: PUSH
4306: LD_STRING 
4308: ST_TO_ADDR
// hc_gallery =  ;
4309: LD_ADDR_OWVAR 33
4313: PUSH
4314: LD_STRING 
4316: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4317: LD_INT 1
4319: PPUSH
4320: LD_INT 10
4322: PPUSH
4323: CALL_OW 381
// otherKurt = CreateHuman ;
4327: LD_ADDR_EXP 25
4331: PUSH
4332: CALL_OW 44
4336: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4337: LD_EXP 26
4341: PPUSH
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4352: LD_EXP 25
4356: PPUSH
4357: LD_EXP 26
4361: PPUSH
4362: CALL_OW 52
// end ; end ;
4366: LD_VAR 0 1
4370: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
// for i = 1 to 3 do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_INT 3
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4512
// begin uc_side = 1 ;
4393: LD_ADDR_OWVAR 20
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// uc_nation = 2 ;
4401: LD_ADDR_OWVAR 21
4405: PUSH
4406: LD_INT 2
4408: ST_TO_ADDR
// hc_gallery =  ;
4409: LD_ADDR_OWVAR 33
4413: PUSH
4414: LD_STRING 
4416: ST_TO_ADDR
// hc_name =  ;
4417: LD_ADDR_OWVAR 26
4421: PUSH
4422: LD_STRING 
4424: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4425: LD_EXP 27
4429: PUSH
4430: LD_INT 0
4432: EQUAL
4433: PUSH
4434: LD_EXP 27
4438: PUSH
4439: LD_INT 2
4441: EQUAL
4442: OR
4443: IFFALSE 4460
// PrepareHuman ( false , 1 , 6 ) else
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL_OW 380
4458: GO 4473
// PrepareHuman ( false , 1 , 8 ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 8
4468: PPUSH
4469: CALL_OW 380
// un = CreateHuman ;
4473: LD_ADDR_VAR 0 3
4477: PUSH
4478: CALL_OW 44
4482: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4483: LD_VAR 0 3
4487: PPUSH
4488: LD_INT 4
4490: PPUSH
4491: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4495: LD_VAR 0 3
4499: PPUSH
4500: LD_INT 4
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// end ;
4510: GO 4390
4512: POP
4513: POP
// vc_chassis = 14 ;
4514: LD_ADDR_OWVAR 37
4518: PUSH
4519: LD_INT 14
4521: ST_TO_ADDR
// vc_engine = 3 ;
4522: LD_ADDR_OWVAR 39
4526: PUSH
4527: LD_INT 3
4529: ST_TO_ADDR
// vc_control = 1 ;
4530: LD_ADDR_OWVAR 38
4534: PUSH
4535: LD_INT 1
4537: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4538: LD_ADDR_OWVAR 40
4542: PUSH
4543: LD_INT 27
4545: PUSH
4546: LD_INT 26
4548: PUSH
4549: LD_INT 28
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 3
4562: PPUSH
4563: CALL_OW 12
4567: ARRAY
4568: ST_TO_ADDR
// veh = CreateVehicle ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: CALL_OW 45
4578: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_INT 4
4586: PPUSH
4587: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4591: LD_VAR 0 4
4595: PPUSH
4596: LD_INT 4
4598: PPUSH
4599: LD_INT 0
4601: PPUSH
4602: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4606: LD_EXP 27
4610: PUSH
4611: LD_INT 0
4613: EQUAL
4614: PUSH
4615: LD_EXP 27
4619: PUSH
4620: LD_INT 2
4622: EQUAL
4623: OR
4624: IFFALSE 4641
// PrepareHuman ( false , 3 , 6 ) else
4626: LD_INT 0
4628: PPUSH
4629: LD_INT 3
4631: PPUSH
4632: LD_INT 6
4634: PPUSH
4635: CALL_OW 380
4639: GO 4654
// PrepareHuman ( false , 3 , 8 ) ;
4641: LD_INT 0
4643: PPUSH
4644: LD_INT 3
4646: PPUSH
4647: LD_INT 8
4649: PPUSH
4650: CALL_OW 380
// un = CreateHuman ;
4654: LD_ADDR_VAR 0 3
4658: PUSH
4659: CALL_OW 44
4663: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_VAR 0 4
4673: PPUSH
4674: CALL_OW 52
// vc_chassis = 14 ;
4678: LD_ADDR_OWVAR 37
4682: PUSH
4683: LD_INT 14
4685: ST_TO_ADDR
// vc_engine = 3 ;
4686: LD_ADDR_OWVAR 39
4690: PUSH
4691: LD_INT 3
4693: ST_TO_ADDR
// vc_control = 1 ;
4694: LD_ADDR_OWVAR 38
4698: PUSH
4699: LD_INT 1
4701: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4702: LD_ADDR_OWVAR 40
4706: PUSH
4707: LD_INT 27
4709: PUSH
4710: LD_INT 26
4712: PUSH
4713: LD_INT 28
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_INT 1
4723: PPUSH
4724: LD_INT 3
4726: PPUSH
4727: CALL_OW 12
4731: ARRAY
4732: ST_TO_ADDR
// veh = CreateVehicle ;
4733: LD_ADDR_VAR 0 4
4737: PUSH
4738: CALL_OW 45
4742: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4743: LD_VAR 0 4
4747: PPUSH
4748: LD_INT 4
4750: PPUSH
4751: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4755: LD_VAR 0 4
4759: PPUSH
4760: LD_INT 4
4762: PPUSH
4763: LD_INT 0
4765: PPUSH
4766: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4770: LD_EXP 27
4774: PUSH
4775: LD_INT 0
4777: EQUAL
4778: PUSH
4779: LD_EXP 27
4783: PUSH
4784: LD_INT 2
4786: EQUAL
4787: OR
4788: IFFALSE 4805
// PrepareHuman ( false , 4 , 6 ) else
4790: LD_INT 0
4792: PPUSH
4793: LD_INT 4
4795: PPUSH
4796: LD_INT 6
4798: PPUSH
4799: CALL_OW 380
4803: GO 4818
// PrepareHuman ( false , 4 , 8 ) ;
4805: LD_INT 0
4807: PPUSH
4808: LD_INT 4
4810: PPUSH
4811: LD_INT 8
4813: PPUSH
4814: CALL_OW 380
// un = CreateHuman ;
4818: LD_ADDR_VAR 0 3
4822: PUSH
4823: CALL_OW 44
4827: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4828: LD_VAR 0 3
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4840: LD_VAR 0 3
4844: PPUSH
4845: LD_VAR 0 4
4849: PPUSH
4850: CALL_OW 52
// vc_chassis = 14 ;
4854: LD_ADDR_OWVAR 37
4858: PUSH
4859: LD_INT 14
4861: ST_TO_ADDR
// vc_engine = 3 ;
4862: LD_ADDR_OWVAR 39
4866: PUSH
4867: LD_INT 3
4869: ST_TO_ADDR
// vc_control = 1 ;
4870: LD_ADDR_OWVAR 38
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4878: LD_ADDR_OWVAR 40
4882: PUSH
4883: LD_INT 27
4885: PUSH
4886: LD_INT 26
4888: PUSH
4889: LD_INT 28
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 1
4899: PPUSH
4900: LD_INT 3
4902: PPUSH
4903: CALL_OW 12
4907: ARRAY
4908: ST_TO_ADDR
// veh = CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_INT 4
4926: PPUSH
4927: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4931: LD_VAR 0 4
4935: PPUSH
4936: LD_INT 4
4938: PPUSH
4939: LD_INT 0
4941: PPUSH
4942: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4946: LD_EXP 27
4950: PUSH
4951: LD_INT 0
4953: EQUAL
4954: PUSH
4955: LD_EXP 27
4959: PUSH
4960: LD_INT 2
4962: EQUAL
4963: OR
4964: IFFALSE 4981
// PrepareHuman ( false , 2 , 4 ) else
4966: LD_INT 0
4968: PPUSH
4969: LD_INT 2
4971: PPUSH
4972: LD_INT 4
4974: PPUSH
4975: CALL_OW 380
4979: GO 4994
// PrepareHuman ( false , 2 , 8 ) ;
4981: LD_INT 0
4983: PPUSH
4984: LD_INT 2
4986: PPUSH
4987: LD_INT 8
4989: PPUSH
4990: CALL_OW 380
// un = CreateHuman ;
4994: LD_ADDR_VAR 0 3
4998: PUSH
4999: CALL_OW 44
5003: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5004: LD_VAR 0 3
5008: PPUSH
5009: LD_INT 4
5011: PPUSH
5012: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5016: LD_VAR 0 3
5020: PPUSH
5021: LD_VAR 0 4
5025: PPUSH
5026: CALL_OW 52
// end ;
5030: LD_VAR 0 1
5034: RET
// export function PrepareAttackLegion ; var i , un ; begin
5035: LD_INT 0
5037: PPUSH
5038: PPUSH
5039: PPUSH
// for i = 1 to 4 do
5040: LD_ADDR_VAR 0 2
5044: PUSH
5045: DOUBLE
5046: LD_INT 1
5048: DEC
5049: ST_TO_ADDR
5050: LD_INT 4
5052: PUSH
5053: FOR_TO
5054: IFFALSE 5164
// begin uc_side = 8 ;
5056: LD_ADDR_OWVAR 20
5060: PUSH
5061: LD_INT 8
5063: ST_TO_ADDR
// uc_nation = 2 ;
5064: LD_ADDR_OWVAR 21
5068: PUSH
5069: LD_INT 2
5071: ST_TO_ADDR
// hc_gallery =  ;
5072: LD_ADDR_OWVAR 33
5076: PUSH
5077: LD_STRING 
5079: ST_TO_ADDR
// hc_name =  ;
5080: LD_ADDR_OWVAR 26
5084: PUSH
5085: LD_STRING 
5087: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5088: LD_INT 0
5090: PPUSH
5091: LD_INT 1
5093: PUSH
5094: LD_INT 8
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 1
5103: PPUSH
5104: LD_INT 2
5106: PPUSH
5107: CALL_OW 12
5111: ARRAY
5112: PPUSH
5113: LD_INT 6
5115: PPUSH
5116: LD_INT 8
5118: PPUSH
5119: CALL_OW 12
5123: PPUSH
5124: CALL_OW 380
// un = CreateHuman ;
5128: LD_ADDR_VAR 0 3
5132: PUSH
5133: CALL_OW 44
5137: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5138: LD_VAR 0 3
5142: PPUSH
5143: LD_INT 19
5145: PPUSH
5146: LD_INT 0
5148: PPUSH
5149: CALL_OW 49
// ComCrawl ( un ) ;
5153: LD_VAR 0 3
5157: PPUSH
5158: CALL_OW 137
// end ;
5162: GO 5053
5164: POP
5165: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 8
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5182: LD_INT 20
5184: PPUSH
5185: LD_INT 3
5187: PPUSH
5188: CALL 16687 0 2
// end ; end_of_file
5192: LD_VAR 0 1
5196: RET
// every 1 do var i ;
5197: GO 5199
5199: DISABLE
5200: LD_INT 0
5202: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5203: LD_INT 10
5205: PPUSH
5206: LD_INT 122
5208: PPUSH
5209: LD_INT 145
5211: PPUSH
5212: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5216: LD_INT 137
5218: PPUSH
5219: LD_INT 84
5221: PPUSH
5222: LD_INT 61
5224: PPUSH
5225: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5229: LD_EXP 1
5233: PPUSH
5234: CALL_OW 310
5238: PPUSH
5239: CALL_OW 87
// InGameOn ;
5243: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5247: LD_INT 22
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PPUSH
5257: CALL_OW 69
5261: PPUSH
5262: LD_INT 130
5264: PPUSH
5265: LD_INT 103
5267: PPUSH
5268: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5272: LD_VAR 0 1
5276: PPUSH
5277: LD_INT 114
5279: PPUSH
5280: LD_INT 102
5282: PPUSH
5283: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5287: LD_EXP 1
5291: PPUSH
5292: LD_STRING D1-JMM-1
5294: PPUSH
5295: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5299: LD_EXP 1
5303: PPUSH
5304: CALL_OW 310
5308: PPUSH
5309: CALL_OW 87
// if IsOk ( Donaldson ) then
5313: LD_EXP 3
5317: PPUSH
5318: CALL_OW 302
5322: IFFALSE 5402
// begin Say ( Donaldson , D1-Don-1 ) ;
5324: LD_EXP 3
5328: PPUSH
5329: LD_STRING D1-Don-1
5331: PPUSH
5332: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5336: LD_EXP 1
5340: PPUSH
5341: CALL_OW 310
5345: PPUSH
5346: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5350: LD_EXP 1
5354: PPUSH
5355: LD_STRING D1-JMM-2
5357: PPUSH
5358: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5362: LD_EXP 1
5366: PPUSH
5367: CALL_OW 310
5371: PPUSH
5372: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5376: LD_EXP 3
5380: PPUSH
5381: LD_STRING D1-Don-2
5383: PPUSH
5384: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5388: LD_EXP 1
5392: PPUSH
5393: CALL_OW 310
5397: PPUSH
5398: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 69
5416: PPUSH
5417: LD_INT 110
5419: PPUSH
5420: LD_INT 101
5422: PPUSH
5423: CALL_OW 171
// wait ( 0 0$1 ) ;
5427: LD_INT 35
5429: PPUSH
5430: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5434: LD_EXP 1
5438: PPUSH
5439: CALL_OW 310
5443: PPUSH
5444: CALL_OW 87
// wait ( 0 0$1 ) ;
5448: LD_INT 35
5450: PPUSH
5451: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5455: LD_EXP 1
5459: PPUSH
5460: CALL_OW 310
5464: PPUSH
5465: CALL_OW 87
// wait ( 0 0$1 ) ;
5469: LD_INT 35
5471: PPUSH
5472: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5476: LD_EXP 1
5480: PPUSH
5481: CALL_OW 310
5485: PPUSH
5486: CALL_OW 87
// wait ( 0 0$1 ) ;
5490: LD_INT 35
5492: PPUSH
5493: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5497: LD_EXP 1
5501: PPUSH
5502: CALL_OW 310
5506: PPUSH
5507: CALL_OW 87
// end ;
5511: PPOPN 1
5513: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5514: LD_INT 1
5516: PPUSH
5517: LD_INT 102
5519: PPUSH
5520: LD_INT 94
5522: PPUSH
5523: CALL_OW 293
5527: IFFALSE 5718
5529: GO 5531
5531: DISABLE
5532: LD_INT 0
5534: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5535: LD_INT 102
5537: PPUSH
5538: LD_INT 94
5540: PPUSH
5541: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5545: LD_INT 22
5547: PUSH
5548: LD_INT 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 26
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 25
5580: PUSH
5581: LD_INT 2
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PUSH
5588: LD_INT 25
5590: PUSH
5591: LD_INT 3
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PUSH
5598: LD_INT 25
5600: PUSH
5601: LD_INT 4
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 25
5610: PUSH
5611: LD_INT 5
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 25
5620: PUSH
5621: LD_INT 8
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: PPUSH
5642: CALL_OW 69
5646: PPUSH
5647: LD_STRING D1-Sol1-2
5649: PPUSH
5650: LD_STRING 
5652: PPUSH
5653: CALL 13302 0 3
// Say ( JMM , D1-JMM-3 ) ;
5657: LD_EXP 1
5661: PPUSH
5662: LD_STRING D1-JMM-3
5664: PPUSH
5665: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5669: LD_STRING M1
5671: PPUSH
5672: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5676: LD_ADDR_VAR 0 1
5680: PUSH
5681: LD_INT 22
5683: PUSH
5684: LD_INT 1
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PPUSH
5691: CALL_OW 69
5695: PUSH
5696: FOR_IN
5697: IFFALSE 5716
// ComMoveXY ( i , 95 , 84 ) ;
5699: LD_VAR 0 1
5703: PPUSH
5704: LD_INT 95
5706: PPUSH
5707: LD_INT 84
5709: PPUSH
5710: CALL_OW 111
5714: GO 5696
5716: POP
5717: POP
// end ;
5718: PPOPN 1
5720: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5721: GO 5723
5723: DISABLE
5724: LD_INT 0
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5730: LD_ADDR_VAR 0 2
5734: PUSH
5735: LD_INT 8
5737: PPUSH
5738: LD_INT 22
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 25
5750: PUSH
5751: LD_INT 9
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PPUSH
5762: CALL_OW 70
5766: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5767: LD_ADDR_VAR 0 3
5771: PUSH
5772: LD_INT 22
5774: PUSH
5775: LD_INT 1
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: PPUSH
5785: CALL_OW 69
5789: ST_TO_ADDR
// enable ;
5790: ENABLE
// for i in your_units do
5791: LD_ADDR_VAR 0 1
5795: PUSH
5796: LD_VAR 0 3
5800: PUSH
5801: FOR_IN
5802: IFFALSE 6450
// begin if See ( 3 , i ) then
5804: LD_INT 3
5806: PPUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: CALL_OW 292
5816: IFFALSE 6448
// begin disable ;
5818: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5819: LD_VAR 0 2
5823: PPUSH
5824: LD_INT 96
5826: PPUSH
5827: LD_INT 85
5829: PPUSH
5830: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5834: LD_VAR 0 2
5838: PPUSH
5839: LD_INT 96
5841: PPUSH
5842: LD_INT 85
5844: PPUSH
5845: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5849: LD_VAR 0 2
5853: PPUSH
5854: LD_INT 96
5856: PPUSH
5857: LD_INT 85
5859: PPUSH
5860: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5864: LD_VAR 0 2
5868: PPUSH
5869: LD_INT 96
5871: PPUSH
5872: LD_INT 85
5874: PPUSH
5875: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5879: LD_VAR 0 2
5883: PPUSH
5884: LD_INT 96
5886: PPUSH
5887: LD_INT 85
5889: PPUSH
5890: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 96
5901: PPUSH
5902: LD_INT 85
5904: PPUSH
5905: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D1a-JMM-1
5916: PPUSH
5917: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5921: LD_EXP 3
5925: PPUSH
5926: LD_STRING D1a-Don-1
5928: PPUSH
5929: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5933: LD_ADDR_VAR 0 1
5937: PUSH
5938: LD_INT 22
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL_OW 69
5952: PUSH
5953: FOR_IN
5954: IFFALSE 5973
// ComMoveXY ( i , 109 , 102 ) ;
5956: LD_VAR 0 1
5960: PPUSH
5961: LD_INT 109
5963: PPUSH
5964: LD_INT 102
5966: PPUSH
5967: CALL_OW 111
5971: GO 5953
5973: POP
5974: POP
// Say ( JMM , D1a-JMM-2 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D1a-JMM-2
5982: PPUSH
5983: CALL_OW 88
// wait ( 0 0$10 ) ;
5987: LD_INT 350
5989: PPUSH
5990: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5994: LD_EXP 1
5998: PPUSH
5999: CALL_OW 310
6003: PPUSH
6004: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6008: LD_EXP 3
6012: PPUSH
6013: LD_STRING D1b-Don-1
6015: PPUSH
6016: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6020: LD_EXP 1
6024: PPUSH
6025: LD_STRING D1b-JMM-1
6027: PPUSH
6028: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6032: LD_INT 22
6034: PUSH
6035: LD_INT 1
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: LD_INT 26
6044: PUSH
6045: LD_INT 1
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 2
6054: PUSH
6055: LD_INT 25
6057: PUSH
6058: LD_INT 1
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 25
6067: PUSH
6068: LD_INT 2
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: LD_INT 25
6077: PUSH
6078: LD_INT 3
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 25
6087: PUSH
6088: LD_INT 4
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 25
6097: PUSH
6098: LD_INT 5
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 25
6107: PUSH
6108: LD_INT 8
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: PPUSH
6129: CALL_OW 69
6133: PPUSH
6134: LD_STRING D1b-Sol1-1
6136: PPUSH
6137: LD_STRING 
6139: PPUSH
6140: CALL 13302 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6144: LD_EXP 3
6148: PPUSH
6149: LD_STRING D1b-Don-2
6151: PPUSH
6152: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6156: LD_EXP 1
6160: PPUSH
6161: LD_STRING D1b-JMM-2
6163: PPUSH
6164: CALL_OW 88
// dec = ShowQuery1 ;
6168: LD_ADDR_VAR 0 4
6172: PUSH
6173: CALL 13838 0 0
6177: ST_TO_ADDR
// if dec = 1 then
6178: LD_VAR 0 4
6182: PUSH
6183: LD_INT 1
6185: EQUAL
6186: IFFALSE 6292
// begin Say ( JMM , D2-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D2-JMM-1
6195: PPUSH
6196: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6200: LD_EXP 22
6204: PPUSH
6205: LD_STRING D2-Pow-1
6207: PPUSH
6208: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6212: LD_EXP 1
6216: PPUSH
6217: LD_STRING D2a-JMM-1
6219: PPUSH
6220: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6224: LD_EXP 22
6228: PPUSH
6229: LD_STRING D2a-Pow-1
6231: PPUSH
6232: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6236: LD_EXP 1
6240: PPUSH
6241: LD_STRING D2a-JMM-2
6243: PPUSH
6244: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6248: LD_EXP 22
6252: PPUSH
6253: LD_STRING D2a-Pow-2
6255: PPUSH
6256: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6260: LD_EXP 1
6264: PPUSH
6265: LD_STRING D2a-JMM-3
6267: PPUSH
6268: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6272: LD_EXP 22
6276: PPUSH
6277: LD_STRING D2a-Pow-3
6279: PPUSH
6280: CALL_OW 94
// secondPass = 2 ;
6284: LD_ADDR_EXP 28
6288: PUSH
6289: LD_INT 2
6291: ST_TO_ADDR
// end ; if dec = 2 then
6292: LD_VAR 0 4
6296: PUSH
6297: LD_INT 2
6299: EQUAL
6300: IFFALSE 6394
// begin Say ( JMM , D2-JMM-1 ) ;
6302: LD_EXP 1
6306: PPUSH
6307: LD_STRING D2-JMM-1
6309: PPUSH
6310: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6314: LD_EXP 22
6318: PPUSH
6319: LD_STRING D2-Pow-1
6321: PPUSH
6322: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6326: LD_EXP 1
6330: PPUSH
6331: LD_STRING D2b-JMM-1
6333: PPUSH
6334: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6338: LD_EXP 22
6342: PPUSH
6343: LD_STRING D2b-Pow-1
6345: PPUSH
6346: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6350: LD_EXP 1
6354: PPUSH
6355: LD_STRING D2c-JMM-1
6357: PPUSH
6358: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6362: LD_EXP 22
6366: PPUSH
6367: LD_STRING D2c-Pow-1
6369: PPUSH
6370: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6374: LD_EXP 1
6378: PPUSH
6379: LD_STRING D2c-JMM-2
6381: PPUSH
6382: CALL_OW 88
// secondPass = 2 ;
6386: LD_ADDR_EXP 28
6390: PUSH
6391: LD_INT 2
6393: ST_TO_ADDR
// end ; if dec = 3 then
6394: LD_VAR 0 4
6398: PUSH
6399: LD_INT 3
6401: EQUAL
6402: IFFALSE 6412
// secondPass = 1 ;
6404: LD_ADDR_EXP 28
6408: PUSH
6409: LD_INT 1
6411: ST_TO_ADDR
// InGameOff ;
6412: CALL_OW 9
// ruAI = 1 ;
6416: LD_ADDR_EXP 42
6420: PUSH
6421: LD_INT 1
6423: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6424: LD_INT 1
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 2
6432: PPUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 80
// SaveForQuickRestart ;
6440: CALL_OW 22
// exit ;
6444: POP
6445: POP
6446: GO 6452
// end ; end ;
6448: GO 5801
6450: POP
6451: POP
// end ;
6452: PPOPN 4
6454: END
// every 1 1$0 trigger secondPass = 2 do
6455: LD_EXP 28
6459: PUSH
6460: LD_INT 2
6462: EQUAL
6463: IFFALSE 6590
6465: GO 6467
6467: DISABLE
// begin PowellSupport1 ;
6468: CALL 1763 0 0
// DialogueOn ;
6472: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6476: LD_EXP 1
6480: PPUSH
6481: LD_STRING DC1-JMM-1
6483: PPUSH
6484: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6488: LD_EXP 22
6492: PPUSH
6493: LD_STRING DC1-Pow-1
6495: PPUSH
6496: CALL_OW 94
// DialogueOff ;
6500: CALL_OW 7
// wait ( 3 3$0 ) ;
6504: LD_INT 6300
6506: PPUSH
6507: CALL_OW 67
// PowellSupport2 ;
6511: CALL 2222 0 0
// DialogueOn ;
6515: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6519: LD_EXP 1
6523: PPUSH
6524: LD_STRING DC2-JMM-1
6526: PPUSH
6527: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6531: LD_EXP 22
6535: PPUSH
6536: LD_STRING DC2-Pow-1
6538: PPUSH
6539: CALL_OW 94
// DialogueOff ;
6543: CALL_OW 7
// wait ( 6 6$0 ) ;
6547: LD_INT 12600
6549: PPUSH
6550: CALL_OW 67
// PowellSupport3 ;
6554: CALL 2756 0 0
// DialogueOn ;
6558: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6562: LD_EXP 22
6566: PPUSH
6567: LD_STRING DC3-Pow-1
6569: PPUSH
6570: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6574: LD_EXP 1
6578: PPUSH
6579: LD_STRING DC3-JMM-1
6581: PPUSH
6582: CALL_OW 88
// DialogueOff ;
6586: CALL_OW 7
// end ;
6590: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6591: LD_EXP 28
6595: PUSH
6596: LD_INT 2
6598: EQUAL
6599: PUSH
6600: LD_INT 22
6602: PUSH
6603: LD_INT 1
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 30
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 30
6625: PUSH
6626: LD_INT 1
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: PUSH
6647: LD_INT 0
6649: GREATER
6650: AND
6651: IFFALSE 10019
6653: GO 6655
6655: DISABLE
6656: LD_INT 0
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6666: LD_ADDR_VAR 0 4
6670: PUSH
6671: LD_INT 22
6673: PUSH
6674: LD_INT 1
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 21
6683: PUSH
6684: LD_INT 3
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 30
6696: PUSH
6697: LD_INT 0
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 30
6706: PUSH
6707: LD_INT 1
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 69
6728: ST_TO_ADDR
// for i in tmp do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6773
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6742: LD_ADDR_VAR 0 6
6746: PUSH
6747: LD_VAR 0 6
6751: PUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: CALL_OW 274
6761: PPUSH
6762: LD_INT 1
6764: PPUSH
6765: CALL_OW 275
6769: PLUS
6770: ST_TO_ADDR
6771: GO 6739
6773: POP
6774: POP
// for i in tmp do
6775: LD_ADDR_VAR 0 1
6779: PUSH
6780: LD_VAR 0 4
6784: PUSH
6785: FOR_IN
6786: IFFALSE 6819
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6788: LD_ADDR_VAR 0 7
6792: PUSH
6793: LD_VAR 0 7
6797: PUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 274
6807: PPUSH
6808: LD_INT 2
6810: PPUSH
6811: CALL_OW 275
6815: PLUS
6816: ST_TO_ADDR
6817: GO 6785
6819: POP
6820: POP
// for i in tmp do
6821: LD_ADDR_VAR 0 1
6825: PUSH
6826: LD_VAR 0 4
6830: PUSH
6831: FOR_IN
6832: IFFALSE 6865
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6834: LD_ADDR_VAR 0 8
6838: PUSH
6839: LD_VAR 0 8
6843: PUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 274
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: CALL_OW 275
6861: PLUS
6862: ST_TO_ADDR
6863: GO 6831
6865: POP
6866: POP
// PrepareKurt ;
6867: CALL 4183 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6871: LD_EXP 26
6875: PPUSH
6876: LD_INT 144
6878: PPUSH
6879: LD_INT 111
6881: PPUSH
6882: CALL_OW 111
// wait ( 0 0$2 ) ;
6886: LD_INT 70
6888: PPUSH
6889: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6893: LD_INT 8
6895: PPUSH
6896: LD_INT 1
6898: PPUSH
6899: CALL_OW 343
// if kurtStatus > 0 then
6903: LD_EXP 27
6907: PUSH
6908: LD_INT 0
6910: GREATER
6911: IFFALSE 8474
// begin ComExitVehicle ( Kurt ) ;
6913: LD_EXP 24
6917: PPUSH
6918: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6922: LD_EXP 24
6926: PPUSH
6927: CALL_OW 87
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// DialogueOn ;
6938: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6942: LD_INT 22
6944: PUSH
6945: LD_INT 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 26
6954: PUSH
6955: LD_INT 1
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: LD_INT 25
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 25
6977: PUSH
6978: LD_INT 2
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 25
6987: PUSH
6988: LD_INT 3
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 25
6997: PUSH
6998: LD_INT 4
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 25
7007: PUSH
7008: LD_INT 5
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 25
7017: PUSH
7018: LD_INT 8
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PPUSH
7044: LD_STRING D3-Sol1-1
7046: PPUSH
7047: LD_STRING 
7049: PPUSH
7050: CALL 13302 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7054: LD_EXP 24
7058: PPUSH
7059: LD_STRING D3-Kurt-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7066: LD_EXP 1
7070: PPUSH
7071: LD_STRING D3-JMM-1
7073: PPUSH
7074: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7078: LD_EXP 24
7082: PPUSH
7083: LD_STRING D3-Kurt-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7090: LD_EXP 1
7094: PPUSH
7095: LD_STRING D3-JMM-2
7097: PPUSH
7098: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7102: LD_EXP 24
7106: PPUSH
7107: LD_STRING D3-Kurt-4
7109: PPUSH
7110: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7114: LD_EXP 1
7118: PPUSH
7119: LD_STRING D3-JMM-4
7121: PPUSH
7122: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7126: LD_EXP 24
7130: PPUSH
7131: LD_STRING D3-Kurt-5
7133: PPUSH
7134: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7138: LD_EXP 24
7142: PPUSH
7143: LD_STRING D3-Kurt-5a
7145: PPUSH
7146: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7150: LD_VAR 0 6
7154: PUSH
7155: LD_INT 60
7157: GREATEREQUAL
7158: PUSH
7159: LD_VAR 0 8
7163: PUSH
7164: LD_INT 60
7166: GREATEREQUAL
7167: AND
7168: IFFALSE 7203
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7170: LD_ADDR_VAR 0 2
7174: PUSH
7175: LD_STRING Q2K
7177: PPUSH
7178: LD_INT 1
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 4
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PPUSH
7196: CALL_OW 98
7200: ST_TO_ADDR
7201: GO 7226
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7203: LD_ADDR_VAR 0 2
7207: PUSH
7208: LD_STRING Q2K
7210: PPUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 4
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 98
7225: ST_TO_ADDR
// if dec1 = 1 then
7226: LD_VAR 0 2
7230: PUSH
7231: LD_INT 1
7233: EQUAL
7234: IFFALSE 7268
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7236: LD_EXP 1
7240: PPUSH
7241: LD_STRING D3Ka-JMM-1
7243: PPUSH
7244: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7248: LD_EXP 24
7252: PPUSH
7253: LD_STRING D3Ka-Kurt-1
7255: PPUSH
7256: CALL_OW 88
// warWithLegion = 1 ;
7260: LD_ADDR_EXP 31
7264: PUSH
7265: LD_INT 1
7267: ST_TO_ADDR
// end ; if dec1 = 2 then
7268: LD_VAR 0 2
7272: PUSH
7273: LD_INT 2
7275: EQUAL
7276: IFFALSE 7502
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7278: LD_EXP 1
7282: PPUSH
7283: LD_STRING D3Kb-JMM-1
7285: PPUSH
7286: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7290: LD_EXP 24
7294: PPUSH
7295: LD_STRING D3Kb-Kurt-1
7297: PPUSH
7298: CALL_OW 88
// for i in tmp do
7302: LD_ADDR_VAR 0 1
7306: PUSH
7307: LD_VAR 0 4
7311: PUSH
7312: FOR_IN
7313: IFFALSE 7400
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7315: LD_ADDR_VAR 0 5
7319: PUSH
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 274
7329: PPUSH
7330: LD_INT 1
7332: PPUSH
7333: CALL_OW 275
7337: ST_TO_ADDR
// if tmp2 >= 60 then
7338: LD_VAR 0 5
7342: PUSH
7343: LD_INT 60
7345: GREATEREQUAL
7346: IFFALSE 7378
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 274
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: LD_VAR 0 5
7365: PUSH
7366: LD_INT 60
7368: MINUS
7369: PPUSH
7370: CALL_OW 277
// break ;
7374: GO 7400
// end else
7376: GO 7398
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7378: LD_VAR 0 1
7382: PPUSH
7383: CALL_OW 274
7387: PPUSH
7388: LD_INT 1
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL_OW 277
// end ; end ;
7398: GO 7312
7400: POP
7401: POP
// for i in tmp do
7402: LD_ADDR_VAR 0 1
7406: PUSH
7407: LD_VAR 0 4
7411: PUSH
7412: FOR_IN
7413: IFFALSE 7500
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7415: LD_ADDR_VAR 0 5
7419: PUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 274
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 275
7437: ST_TO_ADDR
// if tmp2 >= 60 then
7438: LD_VAR 0 5
7442: PUSH
7443: LD_INT 60
7445: GREATEREQUAL
7446: IFFALSE 7478
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7448: LD_VAR 0 1
7452: PPUSH
7453: CALL_OW 274
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: LD_VAR 0 5
7465: PUSH
7466: LD_INT 60
7468: MINUS
7469: PPUSH
7470: CALL_OW 277
// break ;
7474: GO 7500
// end else
7476: GO 7498
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 274
7487: PPUSH
7488: LD_INT 3
7490: PPUSH
7491: LD_INT 0
7493: PPUSH
7494: CALL_OW 277
// end ; end ;
7498: GO 7412
7500: POP
7501: POP
// end ; if dec1 = 3 then
7502: LD_VAR 0 2
7506: PUSH
7507: LD_INT 3
7509: EQUAL
7510: IFFALSE 7745
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7512: LD_EXP 1
7516: PPUSH
7517: LD_STRING D3Kc1-JMM-1
7519: PPUSH
7520: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7524: LD_EXP 24
7528: PPUSH
7529: LD_STRING D3Kc1-Kurt-1
7531: PPUSH
7532: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7536: LD_EXP 1
7540: PPUSH
7541: LD_STRING D3Kc1-JMM-2
7543: PPUSH
7544: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7548: LD_EXP 24
7552: PPUSH
7553: LD_STRING D3Kc1-Kurt-2
7555: PPUSH
7556: CALL_OW 88
// askSiberite = 1 ;
7560: LD_ADDR_EXP 33
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7568: LD_ADDR_VAR 0 2
7572: PUSH
7573: LD_STRING Q2b
7575: PPUSH
7576: LD_INT 1
7578: PUSH
7579: LD_INT 2
7581: PUSH
7582: LD_INT 3
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 98
7594: ST_TO_ADDR
// if dec2 = 1 then
7595: LD_VAR 0 3
7599: PUSH
7600: LD_INT 1
7602: EQUAL
7603: IFFALSE 7637
// begin Say ( JMM , D4a-JMM-1 ) ;
7605: LD_EXP 1
7609: PPUSH
7610: LD_STRING D4a-JMM-1
7612: PPUSH
7613: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7617: LD_EXP 24
7621: PPUSH
7622: LD_STRING D4b-Kurt-1
7624: PPUSH
7625: CALL_OW 88
// warWithLegion = 1 ;
7629: LD_ADDR_EXP 31
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// end ; if dec2 = 2 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 2
7644: EQUAL
7645: IFFALSE 7679
// begin Say ( JMM , D4b-JMM-1 ) ;
7647: LD_EXP 1
7651: PPUSH
7652: LD_STRING D4b-JMM-1
7654: PPUSH
7655: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7659: LD_EXP 24
7663: PPUSH
7664: LD_STRING D4b-Kurt-1
7666: PPUSH
7667: CALL_OW 88
// warWithLegion = 1 ;
7671: LD_ADDR_EXP 31
7675: PUSH
7676: LD_INT 1
7678: ST_TO_ADDR
// end ; if dec2 = 3 then
7679: LD_VAR 0 3
7683: PUSH
7684: LD_INT 3
7686: EQUAL
7687: IFFALSE 7745
// begin Say ( JMM , D4c-JMM-1 ) ;
7689: LD_EXP 1
7693: PPUSH
7694: LD_STRING D4c-JMM-1
7696: PPUSH
7697: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7701: LD_EXP 24
7705: PPUSH
7706: LD_STRING D4c-Kurt-1
7708: PPUSH
7709: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7713: LD_EXP 1
7717: PPUSH
7718: LD_STRING D4c-JMM-2
7720: PPUSH
7721: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7725: LD_EXP 24
7729: PPUSH
7730: LD_STRING D4c-Kurt-2
7732: PPUSH
7733: CALL_OW 88
// fakeInfo = 1 ;
7737: LD_ADDR_EXP 32
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7745: LD_VAR 0 2
7749: PUSH
7750: LD_INT 4
7752: EQUAL
7753: IFFALSE 8410
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7755: LD_EXP 1
7759: PPUSH
7760: LD_STRING D3Kd-JMM-1
7762: PPUSH
7763: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7767: LD_VAR 0 6
7771: PUSH
7772: LD_INT 120
7774: GREATEREQUAL
7775: PUSH
7776: LD_VAR 0 8
7780: PUSH
7781: LD_INT 120
7783: GREATEREQUAL
7784: AND
7785: IFFALSE 7820
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7787: LD_ADDR_VAR 0 3
7791: PUSH
7792: LD_STRING Q2aK
7794: PPUSH
7795: LD_INT 1
7797: PUSH
7798: LD_INT 2
7800: PUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 4
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PPUSH
7813: CALL_OW 98
7817: ST_TO_ADDR
7818: GO 7843
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_STRING Q2K
7827: PPUSH
7828: LD_INT 1
7830: PUSH
7831: LD_INT 4
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 98
7842: ST_TO_ADDR
// if dec2 = 1 then
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 1
7850: EQUAL
7851: IFFALSE 7885
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7853: LD_EXP 1
7857: PPUSH
7858: LD_STRING D5Ka-JMM-1
7860: PPUSH
7861: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7865: LD_EXP 24
7869: PPUSH
7870: LD_STRING D5Ka-Kurt-1
7872: PPUSH
7873: CALL_OW 88
// warWithLegion = 1 ;
7877: LD_ADDR_EXP 31
7881: PUSH
7882: LD_INT 1
7884: ST_TO_ADDR
// end ; if dec2 = 2 then
7885: LD_VAR 0 3
7889: PUSH
7890: LD_INT 2
7892: EQUAL
7893: IFFALSE 7919
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7895: LD_EXP 1
7899: PPUSH
7900: LD_STRING D3Kb-JMM-1
7902: PPUSH
7903: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7907: LD_EXP 24
7911: PPUSH
7912: LD_STRING D3Kb-Kurt-1
7914: PPUSH
7915: CALL_OW 88
// end ; if dec2 = 3 then
7919: LD_VAR 0 3
7923: PUSH
7924: LD_INT 3
7926: EQUAL
7927: IFFALSE 8157
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7929: LD_EXP 1
7933: PPUSH
7934: LD_STRING D3Ke-JMM-1
7936: PPUSH
7937: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7941: LD_EXP 24
7945: PPUSH
7946: LD_STRING D3Ke-Kurt-1
7948: PPUSH
7949: CALL_OW 88
// PrepareLegionForPlayer ;
7953: CALL 4371 0 0
// for i in tmp do
7957: LD_ADDR_VAR 0 1
7961: PUSH
7962: LD_VAR 0 4
7966: PUSH
7967: FOR_IN
7968: IFFALSE 8055
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7970: LD_ADDR_VAR 0 5
7974: PUSH
7975: LD_VAR 0 1
7979: PPUSH
7980: CALL_OW 274
7984: PPUSH
7985: LD_INT 1
7987: PPUSH
7988: CALL_OW 275
7992: ST_TO_ADDR
// if tmp2 >= 120 then
7993: LD_VAR 0 5
7997: PUSH
7998: LD_INT 120
8000: GREATEREQUAL
8001: IFFALSE 8033
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 274
8012: PPUSH
8013: LD_INT 1
8015: PPUSH
8016: LD_VAR 0 5
8020: PUSH
8021: LD_INT 120
8023: MINUS
8024: PPUSH
8025: CALL_OW 277
// break ;
8029: GO 8055
// end else
8031: GO 8053
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8033: LD_VAR 0 1
8037: PPUSH
8038: CALL_OW 274
8042: PPUSH
8043: LD_INT 1
8045: PPUSH
8046: LD_INT 0
8048: PPUSH
8049: CALL_OW 277
// end ; end ;
8053: GO 7967
8055: POP
8056: POP
// for i in tmp do
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: LD_VAR 0 4
8066: PUSH
8067: FOR_IN
8068: IFFALSE 8155
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8070: LD_ADDR_VAR 0 5
8074: PUSH
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 274
8084: PPUSH
8085: LD_INT 3
8087: PPUSH
8088: CALL_OW 275
8092: ST_TO_ADDR
// if tmp2 >= 120 then
8093: LD_VAR 0 5
8097: PUSH
8098: LD_INT 120
8100: GREATEREQUAL
8101: IFFALSE 8133
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 274
8112: PPUSH
8113: LD_INT 3
8115: PPUSH
8116: LD_VAR 0 5
8120: PUSH
8121: LD_INT 120
8123: MINUS
8124: PPUSH
8125: CALL_OW 277
// break ;
8129: GO 8155
// end else
8131: GO 8153
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL_OW 274
8142: PPUSH
8143: LD_INT 3
8145: PPUSH
8146: LD_INT 0
8148: PPUSH
8149: CALL_OW 277
// end ; end ;
8153: GO 8067
8155: POP
8156: POP
// end ; if dec2 = 4 then
8157: LD_VAR 0 3
8161: PUSH
8162: LD_INT 4
8164: EQUAL
8165: IFFALSE 8410
// begin if dec1 = 3 then
8167: LD_VAR 0 2
8171: PUSH
8172: LD_INT 3
8174: EQUAL
8175: IFFALSE 8410
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8177: LD_EXP 1
8181: PPUSH
8182: LD_STRING D3Kc1-JMM-1
8184: PPUSH
8185: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8189: LD_EXP 24
8193: PPUSH
8194: LD_STRING D3Kc1-Kurt-1
8196: PPUSH
8197: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8201: LD_EXP 1
8205: PPUSH
8206: LD_STRING D3Kc1-JMM-2
8208: PPUSH
8209: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8213: LD_EXP 24
8217: PPUSH
8218: LD_STRING D3Kc1-Kurt-2
8220: PPUSH
8221: CALL_OW 88
// askSiberite = 1 ;
8225: LD_ADDR_EXP 33
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_STRING Q2b
8240: PPUSH
8241: LD_INT 1
8243: PUSH
8244: LD_INT 2
8246: PUSH
8247: LD_INT 3
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: PPUSH
8255: CALL_OW 98
8259: ST_TO_ADDR
// if dec2 = 1 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 1
8267: EQUAL
8268: IFFALSE 8302
// begin Say ( JMM , D4a-JMM-1 ) ;
8270: LD_EXP 1
8274: PPUSH
8275: LD_STRING D4a-JMM-1
8277: PPUSH
8278: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8282: LD_EXP 24
8286: PPUSH
8287: LD_STRING D4b-Kurt-1
8289: PPUSH
8290: CALL_OW 88
// warWithLegion = 1 ;
8294: LD_ADDR_EXP 31
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// end ; if dec2 = 2 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 2
8309: EQUAL
8310: IFFALSE 8344
// begin Say ( JMM , D4b-JMM-1 ) ;
8312: LD_EXP 1
8316: PPUSH
8317: LD_STRING D4b-JMM-1
8319: PPUSH
8320: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8324: LD_EXP 24
8328: PPUSH
8329: LD_STRING D4b-Kurt-1
8331: PPUSH
8332: CALL_OW 88
// warWithLegion = 1 ;
8336: LD_ADDR_EXP 31
8340: PUSH
8341: LD_INT 1
8343: ST_TO_ADDR
// end ; if dec2 = 3 then
8344: LD_VAR 0 3
8348: PUSH
8349: LD_INT 3
8351: EQUAL
8352: IFFALSE 8410
// begin Say ( JMM , D4c-JMM-1 ) ;
8354: LD_EXP 1
8358: PPUSH
8359: LD_STRING D4c-JMM-1
8361: PPUSH
8362: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8366: LD_EXP 24
8370: PPUSH
8371: LD_STRING D4c-Kurt-1
8373: PPUSH
8374: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8378: LD_EXP 1
8382: PPUSH
8383: LD_STRING D4c-JMM-2
8385: PPUSH
8386: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8390: LD_EXP 24
8394: PPUSH
8395: LD_STRING D4c-Kurt-2
8397: PPUSH
8398: CALL_OW 88
// fakeInfo = 1 ;
8402: LD_ADDR_EXP 32
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8410: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8414: LD_EXP 24
8418: PPUSH
8419: LD_EXP 26
8423: PPUSH
8424: CALL_OW 120
// wait ( 0 0$1 ) ;
8428: LD_INT 35
8430: PPUSH
8431: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8435: LD_EXP 26
8439: PPUSH
8440: LD_INT 4
8442: PPUSH
8443: CALL_OW 113
// wait ( 0 0$3 ) ;
8447: LD_INT 105
8449: PPUSH
8450: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8454: LD_EXP 24
8458: PPUSH
8459: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8463: LD_EXP 26
8467: PPUSH
8468: CALL_OW 64
// end else
8472: GO 10019
// begin ComExitVehicle ( otherKurt ) ;
8474: LD_EXP 25
8478: PPUSH
8479: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8483: LD_EXP 25
8487: PPUSH
8488: CALL_OW 87
// wait ( 0 0$1 ) ;
8492: LD_INT 35
8494: PPUSH
8495: CALL_OW 67
// DialogueOn ;
8499: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8503: LD_INT 22
8505: PUSH
8506: LD_INT 1
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: LD_INT 25
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 25
8538: PUSH
8539: LD_INT 2
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: LD_INT 25
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 25
8558: PUSH
8559: LD_INT 4
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 25
8568: PUSH
8569: LD_INT 5
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 25
8578: PUSH
8579: LD_INT 8
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 69
8604: PPUSH
8605: LD_STRING D3-Sol1-1
8607: PPUSH
8608: LD_STRING 
8610: PPUSH
8611: CALL 13302 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8615: LD_EXP 25
8619: PPUSH
8620: LD_STRING D3-Kurt-1
8622: PPUSH
8623: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8627: LD_EXP 1
8631: PPUSH
8632: LD_STRING D3-JMM-1
8634: PPUSH
8635: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8639: LD_EXP 25
8643: PPUSH
8644: LD_STRING D3-Kurt-3
8646: PPUSH
8647: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8651: LD_EXP 1
8655: PPUSH
8656: LD_STRING D3-JMM-3
8658: PPUSH
8659: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8663: LD_EXP 25
8667: PPUSH
8668: LD_STRING D3-Kurt-5
8670: PPUSH
8671: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8675: LD_EXP 25
8679: PPUSH
8680: LD_STRING D3-Kurt-5b
8682: PPUSH
8683: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8687: LD_VAR 0 6
8691: PUSH
8692: LD_INT 100
8694: GREATEREQUAL
8695: PUSH
8696: LD_VAR 0 8
8700: PUSH
8701: LD_INT 100
8703: GREATEREQUAL
8704: AND
8705: IFFALSE 8740
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8707: LD_ADDR_VAR 0 2
8711: PUSH
8712: LD_STRING Q2
8714: PPUSH
8715: LD_INT 1
8717: PUSH
8718: LD_INT 2
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 98
8737: ST_TO_ADDR
8738: GO 8763
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8740: LD_ADDR_VAR 0 2
8744: PUSH
8745: LD_STRING Q2
8747: PPUSH
8748: LD_INT 3
8750: PUSH
8751: LD_INT 4
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 98
8762: ST_TO_ADDR
// if dec1 = 1 then
8763: LD_VAR 0 2
8767: PUSH
8768: LD_INT 1
8770: EQUAL
8771: IFFALSE 8805
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8773: LD_EXP 1
8777: PPUSH
8778: LD_STRING D3Ka-JMM-1
8780: PPUSH
8781: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8785: LD_EXP 25
8789: PPUSH
8790: LD_STRING D3Ka-Kurt-1
8792: PPUSH
8793: CALL_OW 88
// warWithLegion = 1 ;
8797: LD_ADDR_EXP 31
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// end ; if dec1 = 2 then
8805: LD_VAR 0 2
8809: PUSH
8810: LD_INT 2
8812: EQUAL
8813: IFFALSE 9039
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8815: LD_EXP 1
8819: PPUSH
8820: LD_STRING D3Kb-JMM-1
8822: PPUSH
8823: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8827: LD_EXP 25
8831: PPUSH
8832: LD_STRING D3Kb-Kurt-1
8834: PPUSH
8835: CALL_OW 88
// for i in tmp do
8839: LD_ADDR_VAR 0 1
8843: PUSH
8844: LD_VAR 0 4
8848: PUSH
8849: FOR_IN
8850: IFFALSE 8937
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8852: LD_ADDR_VAR 0 5
8856: PUSH
8857: LD_VAR 0 1
8861: PPUSH
8862: CALL_OW 274
8866: PPUSH
8867: LD_INT 1
8869: PPUSH
8870: CALL_OW 275
8874: ST_TO_ADDR
// if tmp2 >= 100 then
8875: LD_VAR 0 5
8879: PUSH
8880: LD_INT 100
8882: GREATEREQUAL
8883: IFFALSE 8915
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 274
8894: PPUSH
8895: LD_INT 1
8897: PPUSH
8898: LD_VAR 0 5
8902: PUSH
8903: LD_INT 100
8905: MINUS
8906: PPUSH
8907: CALL_OW 277
// break ;
8911: GO 8937
// end else
8913: GO 8935
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 274
8924: PPUSH
8925: LD_INT 1
8927: PPUSH
8928: LD_INT 0
8930: PPUSH
8931: CALL_OW 277
// end ; end ;
8935: GO 8849
8937: POP
8938: POP
// for i in tmp do
8939: LD_ADDR_VAR 0 1
8943: PUSH
8944: LD_VAR 0 4
8948: PUSH
8949: FOR_IN
8950: IFFALSE 9037
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8952: LD_ADDR_VAR 0 5
8956: PUSH
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 274
8966: PPUSH
8967: LD_INT 3
8969: PPUSH
8970: CALL_OW 275
8974: ST_TO_ADDR
// if tmp2 >= 100 then
8975: LD_VAR 0 5
8979: PUSH
8980: LD_INT 100
8982: GREATEREQUAL
8983: IFFALSE 9015
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 274
8994: PPUSH
8995: LD_INT 3
8997: PPUSH
8998: LD_VAR 0 5
9002: PUSH
9003: LD_INT 100
9005: MINUS
9006: PPUSH
9007: CALL_OW 277
// break ;
9011: GO 9037
// end else
9013: GO 9035
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 274
9024: PPUSH
9025: LD_INT 3
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 277
// end ; end ;
9035: GO 8949
9037: POP
9038: POP
// end ; if dec1 = 3 then
9039: LD_VAR 0 2
9043: PUSH
9044: LD_INT 3
9046: EQUAL
9047: IFFALSE 9282
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_STRING D3Kc1-JMM-1
9056: PPUSH
9057: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9061: LD_EXP 25
9065: PPUSH
9066: LD_STRING D3Kc1-Kurt-1
9068: PPUSH
9069: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9073: LD_EXP 1
9077: PPUSH
9078: LD_STRING D3Kc1-JMM-2
9080: PPUSH
9081: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9085: LD_EXP 25
9089: PPUSH
9090: LD_STRING D3Kc1-Kurt-2
9092: PPUSH
9093: CALL_OW 88
// askSiberite = 1 ;
9097: LD_ADDR_EXP 33
9101: PUSH
9102: LD_INT 1
9104: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9105: LD_ADDR_VAR 0 2
9109: PUSH
9110: LD_STRING Q2b
9112: PPUSH
9113: LD_INT 1
9115: PUSH
9116: LD_INT 2
9118: PUSH
9119: LD_INT 3
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 98
9131: ST_TO_ADDR
// if dec2 = 1 then
9132: LD_VAR 0 3
9136: PUSH
9137: LD_INT 1
9139: EQUAL
9140: IFFALSE 9174
// begin Say ( JMM , D4a-JMM-1 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_STRING D4a-JMM-1
9149: PPUSH
9150: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9154: LD_EXP 25
9158: PPUSH
9159: LD_STRING D4b-Kurt-1
9161: PPUSH
9162: CALL_OW 88
// warWithLegion = 1 ;
9166: LD_ADDR_EXP 31
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// end ; if dec2 = 2 then
9174: LD_VAR 0 3
9178: PUSH
9179: LD_INT 2
9181: EQUAL
9182: IFFALSE 9216
// begin Say ( JMM , D4b-JMM-1 ) ;
9184: LD_EXP 1
9188: PPUSH
9189: LD_STRING D4b-JMM-1
9191: PPUSH
9192: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9196: LD_EXP 25
9200: PPUSH
9201: LD_STRING D4b-Kurt-1
9203: PPUSH
9204: CALL_OW 88
// warWithLegion = 1 ;
9208: LD_ADDR_EXP 31
9212: PUSH
9213: LD_INT 1
9215: ST_TO_ADDR
// end ; if dec2 = 3 then
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 3
9223: EQUAL
9224: IFFALSE 9282
// begin Say ( JMM , D4c-JMM-1 ) ;
9226: LD_EXP 1
9230: PPUSH
9231: LD_STRING D4c-JMM-1
9233: PPUSH
9234: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9238: LD_EXP 25
9242: PPUSH
9243: LD_STRING D4c-Kurt-1
9245: PPUSH
9246: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9250: LD_EXP 1
9254: PPUSH
9255: LD_STRING D4c-JMM-2
9257: PPUSH
9258: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9262: LD_EXP 25
9266: PPUSH
9267: LD_STRING D4c-Kurt-2
9269: PPUSH
9270: CALL_OW 88
// fakeInfo = 1 ;
9274: LD_ADDR_EXP 32
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9282: LD_VAR 0 2
9286: PUSH
9287: LD_INT 4
9289: EQUAL
9290: IFFALSE 9947
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9292: LD_EXP 1
9296: PPUSH
9297: LD_STRING D3Kd-JMM-1
9299: PPUSH
9300: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_INT 200
9311: GREATEREQUAL
9312: PUSH
9313: LD_VAR 0 8
9317: PUSH
9318: LD_INT 200
9320: GREATEREQUAL
9321: AND
9322: IFFALSE 9357
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9324: LD_ADDR_VAR 0 3
9328: PUSH
9329: LD_STRING Q2a
9331: PPUSH
9332: LD_INT 1
9334: PUSH
9335: LD_INT 2
9337: PUSH
9338: LD_INT 3
9340: PUSH
9341: LD_INT 4
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 98
9354: ST_TO_ADDR
9355: GO 9380
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9357: LD_ADDR_VAR 0 3
9361: PUSH
9362: LD_STRING Q2a
9364: PPUSH
9365: LD_INT 1
9367: PUSH
9368: LD_INT 4
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PPUSH
9375: CALL_OW 98
9379: ST_TO_ADDR
// if dec2 = 1 then
9380: LD_VAR 0 3
9384: PUSH
9385: LD_INT 1
9387: EQUAL
9388: IFFALSE 9422
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9390: LD_EXP 1
9394: PPUSH
9395: LD_STRING D5Ka-JMM-1
9397: PPUSH
9398: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9402: LD_EXP 25
9406: PPUSH
9407: LD_STRING D5Ka-Kurt-1
9409: PPUSH
9410: CALL_OW 88
// warWithLegion = 1 ;
9414: LD_ADDR_EXP 31
9418: PUSH
9419: LD_INT 1
9421: ST_TO_ADDR
// end ; if dec2 = 2 then
9422: LD_VAR 0 3
9426: PUSH
9427: LD_INT 2
9429: EQUAL
9430: IFFALSE 9456
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9432: LD_EXP 1
9436: PPUSH
9437: LD_STRING D3Kb-JMM-1
9439: PPUSH
9440: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9444: LD_EXP 25
9448: PPUSH
9449: LD_STRING D3Kb-Kurt-1
9451: PPUSH
9452: CALL_OW 88
// end ; if dec2 = 3 then
9456: LD_VAR 0 3
9460: PUSH
9461: LD_INT 3
9463: EQUAL
9464: IFFALSE 9694
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9466: LD_EXP 1
9470: PPUSH
9471: LD_STRING D3Ke-JMM-1
9473: PPUSH
9474: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9478: LD_EXP 25
9482: PPUSH
9483: LD_STRING D3Ke-Kurt-1
9485: PPUSH
9486: CALL_OW 88
// PrepareLegionForPlayer ;
9490: CALL 4371 0 0
// for i in tmp do
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_VAR 0 4
9503: PUSH
9504: FOR_IN
9505: IFFALSE 9592
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9507: LD_ADDR_VAR 0 5
9511: PUSH
9512: LD_VAR 0 1
9516: PPUSH
9517: CALL_OW 274
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 275
9529: ST_TO_ADDR
// if tmp2 >= 200 then
9530: LD_VAR 0 5
9534: PUSH
9535: LD_INT 200
9537: GREATEREQUAL
9538: IFFALSE 9570
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9540: LD_VAR 0 1
9544: PPUSH
9545: CALL_OW 274
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: LD_VAR 0 5
9557: PUSH
9558: LD_INT 200
9560: MINUS
9561: PPUSH
9562: CALL_OW 277
// break ;
9566: GO 9592
// end else
9568: GO 9590
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 274
9579: PPUSH
9580: LD_INT 1
9582: PPUSH
9583: LD_INT 0
9585: PPUSH
9586: CALL_OW 277
// end ; end ;
9590: GO 9504
9592: POP
9593: POP
// for i in tmp do
9594: LD_ADDR_VAR 0 1
9598: PUSH
9599: LD_VAR 0 4
9603: PUSH
9604: FOR_IN
9605: IFFALSE 9692
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9607: LD_ADDR_VAR 0 5
9611: PUSH
9612: LD_VAR 0 1
9616: PPUSH
9617: CALL_OW 274
9621: PPUSH
9622: LD_INT 3
9624: PPUSH
9625: CALL_OW 275
9629: ST_TO_ADDR
// if tmp2 >= 200 then
9630: LD_VAR 0 5
9634: PUSH
9635: LD_INT 200
9637: GREATEREQUAL
9638: IFFALSE 9670
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9640: LD_VAR 0 1
9644: PPUSH
9645: CALL_OW 274
9649: PPUSH
9650: LD_INT 3
9652: PPUSH
9653: LD_VAR 0 5
9657: PUSH
9658: LD_INT 200
9660: MINUS
9661: PPUSH
9662: CALL_OW 277
// break ;
9666: GO 9692
// end else
9668: GO 9690
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9670: LD_VAR 0 1
9674: PPUSH
9675: CALL_OW 274
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 277
// end ; end ;
9690: GO 9604
9692: POP
9693: POP
// end ; if dec2 = 4 then
9694: LD_VAR 0 3
9698: PUSH
9699: LD_INT 4
9701: EQUAL
9702: IFFALSE 9947
// begin if dec1 = 3 then
9704: LD_VAR 0 2
9708: PUSH
9709: LD_INT 3
9711: EQUAL
9712: IFFALSE 9947
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9714: LD_EXP 1
9718: PPUSH
9719: LD_STRING D3Kc1-JMM-1
9721: PPUSH
9722: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9726: LD_EXP 25
9730: PPUSH
9731: LD_STRING D3Kc1-Kurt-1
9733: PPUSH
9734: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9738: LD_EXP 1
9742: PPUSH
9743: LD_STRING D3Kc1-JMM-2
9745: PPUSH
9746: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9750: LD_EXP 25
9754: PPUSH
9755: LD_STRING D3Kc1-Kurt-2
9757: PPUSH
9758: CALL_OW 88
// askSiberite = 1 ;
9762: LD_ADDR_EXP 33
9766: PUSH
9767: LD_INT 1
9769: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9770: LD_ADDR_VAR 0 2
9774: PUSH
9775: LD_STRING Q2b
9777: PPUSH
9778: LD_INT 1
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 98
9796: ST_TO_ADDR
// if dec2 = 1 then
9797: LD_VAR 0 3
9801: PUSH
9802: LD_INT 1
9804: EQUAL
9805: IFFALSE 9839
// begin Say ( JMM , D4a-JMM-1 ) ;
9807: LD_EXP 1
9811: PPUSH
9812: LD_STRING D4a-JMM-1
9814: PPUSH
9815: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9819: LD_EXP 25
9823: PPUSH
9824: LD_STRING D4b-Kurt-1
9826: PPUSH
9827: CALL_OW 88
// warWithLegion = 1 ;
9831: LD_ADDR_EXP 31
9835: PUSH
9836: LD_INT 1
9838: ST_TO_ADDR
// end ; if dec2 = 2 then
9839: LD_VAR 0 3
9843: PUSH
9844: LD_INT 2
9846: EQUAL
9847: IFFALSE 9881
// begin Say ( JMM , D4b-JMM-1 ) ;
9849: LD_EXP 1
9853: PPUSH
9854: LD_STRING D4b-JMM-1
9856: PPUSH
9857: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9861: LD_EXP 25
9865: PPUSH
9866: LD_STRING D4b-Kurt-1
9868: PPUSH
9869: CALL_OW 88
// warWithLegion = 1 ;
9873: LD_ADDR_EXP 31
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// end ; if dec2 = 3 then
9881: LD_VAR 0 3
9885: PUSH
9886: LD_INT 3
9888: EQUAL
9889: IFFALSE 9947
// begin Say ( JMM , D4c-JMM-1 ) ;
9891: LD_EXP 1
9895: PPUSH
9896: LD_STRING D4c-JMM-1
9898: PPUSH
9899: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9903: LD_EXP 25
9907: PPUSH
9908: LD_STRING D4c-Kurt-1
9910: PPUSH
9911: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9915: LD_EXP 1
9919: PPUSH
9920: LD_STRING D4c-JMM-2
9922: PPUSH
9923: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9927: LD_EXP 25
9931: PPUSH
9932: LD_STRING D4c-Kurt-2
9934: PPUSH
9935: CALL_OW 88
// fakeInfo = 1 ;
9939: LD_ADDR_EXP 32
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9947: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9951: LD_INT 8
9953: PPUSH
9954: LD_INT 8
9956: PPUSH
9957: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9961: LD_EXP 25
9965: PPUSH
9966: LD_EXP 26
9970: PPUSH
9971: CALL_OW 120
// wait ( 0 0$1 ) ;
9975: LD_INT 35
9977: PPUSH
9978: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9982: LD_EXP 26
9986: PPUSH
9987: LD_INT 4
9989: PPUSH
9990: CALL_OW 113
// wait ( 0 0$6 ) ;
9994: LD_INT 210
9996: PPUSH
9997: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10001: LD_EXP 25
10005: PPUSH
10006: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10010: LD_EXP 26
10014: PPUSH
10015: CALL_OW 64
// end ; end ;
10019: PPOPN 8
10021: END
// every 0 0$10 trigger warWithLegion = 1 do
10022: LD_EXP 31
10026: PUSH
10027: LD_INT 1
10029: EQUAL
10030: IFFALSE 10039
10032: GO 10034
10034: DISABLE
// PrepareAttackLegion ;
10035: CALL 5035 0 0
10039: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10040: LD_EXP 15
10044: PPUSH
10045: CALL_OW 305
10049: PUSH
10050: LD_EXP 15
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 289
10062: NOT
10063: AND
10064: PUSH
10065: LD_EXP 15
10069: PPUSH
10070: LD_INT 2
10072: PPUSH
10073: CALL_OW 289
10077: NOT
10078: AND
10079: PUSH
10080: LD_EXP 15
10084: PPUSH
10085: LD_INT 3
10087: PPUSH
10088: CALL_OW 289
10092: NOT
10093: AND
10094: IFFALSE 10111
10096: GO 10098
10098: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10099: LD_EXP 15
10103: PPUSH
10104: LD_INT 4
10106: PPUSH
10107: CALL_OW 235
10111: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10112: LD_EXP 16
10116: PPUSH
10117: CALL_OW 305
10121: PUSH
10122: LD_EXP 16
10126: PPUSH
10127: LD_INT 1
10129: PPUSH
10130: CALL_OW 289
10134: NOT
10135: AND
10136: PUSH
10137: LD_EXP 16
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: CALL_OW 289
10149: NOT
10150: AND
10151: PUSH
10152: LD_EXP 16
10156: PPUSH
10157: LD_INT 3
10159: PPUSH
10160: CALL_OW 289
10164: NOT
10165: AND
10166: IFFALSE 10183
10168: GO 10170
10170: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10171: LD_EXP 16
10175: PPUSH
10176: LD_INT 4
10178: PPUSH
10179: CALL_OW 235
10183: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10184: LD_EXP 17
10188: PPUSH
10189: CALL_OW 305
10193: PUSH
10194: LD_EXP 17
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: CALL_OW 289
10206: NOT
10207: AND
10208: PUSH
10209: LD_EXP 17
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: CALL_OW 289
10221: NOT
10222: AND
10223: PUSH
10224: LD_EXP 17
10228: PPUSH
10229: LD_INT 3
10231: PPUSH
10232: CALL_OW 289
10236: NOT
10237: AND
10238: IFFALSE 10255
10240: GO 10242
10242: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10243: LD_EXP 17
10247: PPUSH
10248: LD_INT 4
10250: PPUSH
10251: CALL_OW 235
10255: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10256: LD_EXP 18
10260: PPUSH
10261: CALL_OW 305
10265: PUSH
10266: LD_EXP 18
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL_OW 289
10278: NOT
10279: AND
10280: PUSH
10281: LD_EXP 18
10285: PPUSH
10286: LD_INT 2
10288: PPUSH
10289: CALL_OW 289
10293: NOT
10294: AND
10295: PUSH
10296: LD_EXP 18
10300: PPUSH
10301: LD_INT 3
10303: PPUSH
10304: CALL_OW 289
10308: NOT
10309: AND
10310: IFFALSE 10327
10312: GO 10314
10314: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10315: LD_EXP 18
10319: PPUSH
10320: LD_INT 4
10322: PPUSH
10323: CALL_OW 235
10327: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10328: LD_EXP 19
10332: PPUSH
10333: CALL_OW 305
10337: PUSH
10338: LD_EXP 19
10342: PPUSH
10343: LD_INT 1
10345: PPUSH
10346: CALL_OW 289
10350: NOT
10351: AND
10352: PUSH
10353: LD_EXP 19
10357: PPUSH
10358: LD_INT 2
10360: PPUSH
10361: CALL_OW 289
10365: NOT
10366: AND
10367: PUSH
10368: LD_EXP 19
10372: PPUSH
10373: LD_INT 3
10375: PPUSH
10376: CALL_OW 289
10380: NOT
10381: AND
10382: PUSH
10383: LD_EXP 19
10387: PPUSH
10388: LD_INT 2
10390: PPUSH
10391: CALL_OW 289
10395: NOT
10396: AND
10397: IFFALSE 10414
10399: GO 10401
10401: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10402: LD_EXP 19
10406: PPUSH
10407: LD_INT 4
10409: PPUSH
10410: CALL_OW 235
10414: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10415: LD_EXP 20
10419: PPUSH
10420: CALL_OW 305
10424: PUSH
10425: LD_EXP 20
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 289
10437: NOT
10438: AND
10439: PUSH
10440: LD_EXP 20
10444: PPUSH
10445: LD_INT 2
10447: PPUSH
10448: CALL_OW 289
10452: NOT
10453: AND
10454: PUSH
10455: LD_EXP 20
10459: PPUSH
10460: LD_INT 3
10462: PPUSH
10463: CALL_OW 289
10467: NOT
10468: AND
10469: IFFALSE 10486
10471: GO 10473
10473: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10474: LD_EXP 20
10478: PPUSH
10479: LD_INT 4
10481: PPUSH
10482: CALL_OW 235
10486: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10487: LD_EXP 21
10491: PPUSH
10492: CALL_OW 305
10496: PUSH
10497: LD_EXP 21
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: CALL_OW 289
10509: NOT
10510: AND
10511: PUSH
10512: LD_EXP 21
10516: PPUSH
10517: LD_INT 2
10519: PPUSH
10520: CALL_OW 289
10524: NOT
10525: AND
10526: PUSH
10527: LD_EXP 21
10531: PPUSH
10532: LD_INT 3
10534: PPUSH
10535: CALL_OW 289
10539: NOT
10540: AND
10541: IFFALSE 10558
10543: GO 10545
10545: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10546: LD_EXP 21
10550: PPUSH
10551: LD_INT 4
10553: PPUSH
10554: CALL_OW 235
10558: END
// every 0 0$1 do var i ;
10559: GO 10561
10561: DISABLE
10562: LD_INT 0
10564: PPUSH
// begin enable ;
10565: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10566: LD_ADDR_VAR 0 1
10570: PUSH
10571: LD_INT 22
10573: PUSH
10574: LD_INT 4
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PPUSH
10581: CALL_OW 69
10585: PUSH
10586: FOR_IN
10587: IFFALSE 10626
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_INT 4
10596: PPUSH
10597: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10601: LD_VAR 0 1
10605: PPUSH
10606: LD_INT 4
10608: PPUSH
10609: CALL_OW 308
10613: IFFALSE 10624
// RemoveUnit ( i ) ;
10615: LD_VAR 0 1
10619: PPUSH
10620: CALL_OW 64
// end ;
10624: GO 10586
10626: POP
10627: POP
// end ;
10628: PPOPN 1
10630: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10631: LD_EXP 28
10635: PUSH
10636: LD_INT 1
10638: EQUAL
10639: IFFALSE 11078
10641: GO 10643
10643: DISABLE
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
10648: PPUSH
// begin enable ;
10649: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10650: LD_ADDR_VAR 0 2
10654: PUSH
10655: LD_INT 12
10657: PPUSH
10658: LD_INT 22
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 21
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PPUSH
10682: CALL_OW 70
10686: ST_TO_ADDR
// for i in enemyVehs do
10687: LD_ADDR_VAR 0 1
10691: PUSH
10692: LD_VAR 0 2
10696: PUSH
10697: FOR_IN
10698: IFFALSE 11076
// begin if See ( 1 , i ) then
10700: LD_INT 1
10702: PPUSH
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 292
10712: IFFALSE 11074
// begin disable ;
10714: DISABLE
// DialogueOn ;
10715: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10728: LD_INT 22
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 26
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 2
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 1
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 3
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 4
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 5
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 8
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: PPUSH
10825: CALL_OW 69
10829: PPUSH
10830: LD_STRING DT1-Sol1-1
10832: PPUSH
10833: LD_STRING DT1-FSol1-1
10835: PPUSH
10836: CALL 13302 0 3
// dec = ShowQuery2 ;
10840: LD_ADDR_VAR 0 3
10844: PUSH
10845: CALL 13912 0 0
10849: ST_TO_ADDR
// if dec = 1 then
10850: LD_VAR 0 3
10854: PUSH
10855: LD_INT 1
10857: EQUAL
10858: IFFALSE 10964
// begin Say ( JMM , D2-JMM-1 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING D2-JMM-1
10867: PPUSH
10868: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10872: LD_EXP 22
10876: PPUSH
10877: LD_STRING D2-Pow-1
10879: PPUSH
10880: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10884: LD_EXP 1
10888: PPUSH
10889: LD_STRING D2a-JMM-1
10891: PPUSH
10892: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10896: LD_EXP 22
10900: PPUSH
10901: LD_STRING D2a-Pow-1
10903: PPUSH
10904: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10908: LD_EXP 1
10912: PPUSH
10913: LD_STRING D2a-JMM-2
10915: PPUSH
10916: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10920: LD_EXP 22
10924: PPUSH
10925: LD_STRING D2a-Pow-2
10927: PPUSH
10928: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10932: LD_EXP 1
10936: PPUSH
10937: LD_STRING D2a-JMM-3
10939: PPUSH
10940: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10944: LD_EXP 22
10948: PPUSH
10949: LD_STRING D2a-Pow-3
10951: PPUSH
10952: CALL_OW 94
// secondPass = 2 ;
10956: LD_ADDR_EXP 28
10960: PUSH
10961: LD_INT 2
10963: ST_TO_ADDR
// end ; if dec = 2 then
10964: LD_VAR 0 3
10968: PUSH
10969: LD_INT 2
10971: EQUAL
10972: IFFALSE 11066
// begin Say ( JMM , D2-JMM-1 ) ;
10974: LD_EXP 1
10978: PPUSH
10979: LD_STRING D2-JMM-1
10981: PPUSH
10982: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10986: LD_EXP 22
10990: PPUSH
10991: LD_STRING D2-Pow-1
10993: PPUSH
10994: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10998: LD_EXP 1
11002: PPUSH
11003: LD_STRING D2b-JMM-1
11005: PPUSH
11006: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11010: LD_EXP 22
11014: PPUSH
11015: LD_STRING D2b-Pow-1
11017: PPUSH
11018: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11022: LD_EXP 1
11026: PPUSH
11027: LD_STRING D2c-JMM-1
11029: PPUSH
11030: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11034: LD_EXP 22
11038: PPUSH
11039: LD_STRING D2c-Pow-1
11041: PPUSH
11042: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11046: LD_EXP 1
11050: PPUSH
11051: LD_STRING D2c-JMM-2
11053: PPUSH
11054: CALL_OW 88
// secondPass = 2 ;
11058: LD_ADDR_EXP 28
11062: PUSH
11063: LD_INT 2
11065: ST_TO_ADDR
// end ; DialogueOff ;
11066: CALL_OW 7
// exit ;
11070: POP
11071: POP
11072: GO 11078
// end ; end ;
11074: GO 10697
11076: POP
11077: POP
// end ;
11078: PPOPN 3
11080: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11081: LD_EXP 29
11085: PUSH
11086: LD_INT 1
11088: EQUAL
11089: IFFALSE 11322
11091: GO 11093
11093: DISABLE
11094: LD_INT 0
11096: PPUSH
11097: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11098: LD_ADDR_VAR 0 2
11102: PUSH
11103: LD_INT 11
11105: PPUSH
11106: LD_INT 22
11108: PUSH
11109: LD_INT 3
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 24
11118: PUSH
11119: LD_INT 250
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PPUSH
11130: CALL_OW 70
11134: ST_TO_ADDR
// enable ;
11135: ENABLE
// for i in vehicles do
11136: LD_ADDR_VAR 0 1
11140: PUSH
11141: LD_VAR 0 2
11145: PUSH
11146: FOR_IN
11147: IFFALSE 11320
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11149: LD_INT 1
11151: PPUSH
11152: LD_VAR 0 1
11156: PPUSH
11157: CALL_OW 292
11161: PUSH
11162: LD_EXP 29
11166: PUSH
11167: LD_INT 1
11169: EQUAL
11170: AND
11171: PUSH
11172: LD_EXP 30
11176: PUSH
11177: LD_INT 4
11179: LESSEQUAL
11180: AND
11181: IFFALSE 11318
// begin disable ;
11183: DISABLE
// DialogueOn ;
11184: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11188: LD_INT 22
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 26
11200: PUSH
11201: LD_INT 1
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 2
11210: PUSH
11211: LD_INT 25
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 25
11223: PUSH
11224: LD_INT 2
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 25
11233: PUSH
11234: LD_INT 3
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 25
11243: PUSH
11244: LD_INT 4
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 25
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 8
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: PPUSH
11290: LD_STRING DT1-Sol1-1
11292: PPUSH
11293: LD_STRING DT1-FSol1-1
11295: PPUSH
11296: CALL 13302 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11300: LD_EXP 1
11304: PPUSH
11305: LD_STRING DT1-JMM-1
11307: PPUSH
11308: CALL_OW 88
// DialogueOff ;
11312: CALL_OW 7
// break ;
11316: GO 11320
// end ; end ;
11318: GO 11146
11320: POP
11321: POP
// end ;
11322: PPOPN 2
11324: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11325: LD_EXP 29
11329: PUSH
11330: LD_INT 1
11332: EQUAL
11333: PUSH
11334: LD_INT 11
11336: PPUSH
11337: LD_INT 22
11339: PUSH
11340: LD_INT 3
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 24
11349: PUSH
11350: LD_INT 251
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: LD_INT 21
11362: PUSH
11363: LD_INT 2
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 70
11394: PUSH
11395: LD_INT 0
11397: EQUAL
11398: AND
11399: PUSH
11400: LD_EXP 30
11404: PUSH
11405: LD_INT 3
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: LD_INT 4
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_OWVAR 67
11423: ARRAY
11424: LESSEQUAL
11425: AND
11426: PUSH
11427: LD_EXP 30
11431: PUSH
11432: LD_INT 5
11434: GREATER
11435: AND
11436: IFFALSE 11593
11438: GO 11440
11440: DISABLE
// begin vehicleTeleported = 2 ;
11441: LD_ADDR_EXP 29
11445: PUSH
11446: LD_INT 2
11448: ST_TO_ADDR
// DialogueOn ;
11449: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11453: LD_EXP 1
11457: PPUSH
11458: LD_STRING DT1a-JMM-1
11460: PPUSH
11461: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11465: LD_INT 22
11467: PUSH
11468: LD_INT 1
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 26
11477: PUSH
11478: LD_INT 1
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: LD_INT 25
11490: PUSH
11491: LD_INT 1
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 25
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 25
11510: PUSH
11511: LD_INT 3
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 25
11520: PUSH
11521: LD_INT 4
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 25
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 25
11540: PUSH
11541: LD_INT 8
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: PPUSH
11562: CALL_OW 69
11566: PPUSH
11567: LD_STRING DT1a-Sol1-1
11569: PPUSH
11570: LD_STRING DT1a-FSol1-1
11572: PPUSH
11573: CALL 13302 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11577: LD_EXP 1
11581: PPUSH
11582: LD_STRING DT1a-JMM-2
11584: PPUSH
11585: CALL_OW 88
// DialogueOff ;
11589: CALL_OW 7
// end ;
11593: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11594: LD_EXP 29
11598: PUSH
11599: LD_INT 3
11601: EQUAL
11602: PUSH
11603: LD_EXP 30
11607: PUSH
11608: LD_INT 4
11610: GREATER
11611: AND
11612: IFFALSE 11823
11614: GO 11616
11616: DISABLE
11617: LD_INT 0
11619: PPUSH
11620: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_INT 11
11628: PPUSH
11629: LD_INT 22
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 24
11641: PUSH
11642: LD_INT 250
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 70
11657: ST_TO_ADDR
// enable ;
11658: ENABLE
// for i in vehicles do
11659: LD_ADDR_VAR 0 1
11663: PUSH
11664: LD_VAR 0 2
11668: PUSH
11669: FOR_IN
11670: IFFALSE 11821
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11672: LD_INT 1
11674: PPUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 292
11684: PUSH
11685: LD_EXP 29
11689: PUSH
11690: LD_INT 3
11692: EQUAL
11693: AND
11694: IFFALSE 11819
// begin disable ;
11696: DISABLE
// DialogueOn ;
11697: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11701: LD_INT 22
11703: PUSH
11704: LD_INT 1
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 26
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 2
11723: PUSH
11724: LD_INT 25
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 25
11736: PUSH
11737: LD_INT 2
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 3
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 25
11756: PUSH
11757: LD_INT 4
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 8
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: PPUSH
11803: LD_STRING DT2-Sol1-1
11805: PPUSH
11806: LD_STRING DT2-FSol1-1
11808: PPUSH
11809: CALL 13302 0 3
// DialogueOff ;
11813: CALL_OW 7
// break ;
11817: GO 11821
// end ; end ;
11819: GO 11669
11821: POP
11822: POP
// end ;
11823: PPOPN 2
11825: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11826: LD_EXP 29
11830: PUSH
11831: LD_INT 3
11833: EQUAL
11834: PUSH
11835: LD_INT 11
11837: PPUSH
11838: LD_INT 22
11840: PUSH
11841: LD_INT 3
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 24
11850: PUSH
11851: LD_INT 251
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 2
11860: PUSH
11861: LD_INT 21
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 21
11873: PUSH
11874: LD_INT 1
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 70
11895: PUSH
11896: LD_INT 0
11898: EQUAL
11899: AND
11900: PUSH
11901: LD_EXP 30
11905: PUSH
11906: LD_INT 6
11908: PUSH
11909: LD_INT 6
11911: PUSH
11912: LD_INT 8
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: PUSH
11920: LD_OWVAR 67
11924: ARRAY
11925: EQUAL
11926: AND
11927: IFFALSE 12084
11929: GO 11931
11931: DISABLE
// begin vehicleTeleported = 4 ;
11932: LD_ADDR_EXP 29
11936: PUSH
11937: LD_INT 4
11939: ST_TO_ADDR
// DialogueOn ;
11940: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11944: LD_EXP 1
11948: PPUSH
11949: LD_STRING DT2a-JMM-1
11951: PPUSH
11952: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11956: LD_INT 22
11958: PUSH
11959: LD_INT 1
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 26
11968: PUSH
11969: LD_INT 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: LD_INT 25
11981: PUSH
11982: LD_INT 1
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 25
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 25
12001: PUSH
12002: LD_INT 3
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 25
12011: PUSH
12012: LD_INT 4
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 25
12021: PUSH
12022: LD_INT 5
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 25
12031: PUSH
12032: LD_INT 8
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: PPUSH
12058: LD_STRING DT2a-Sol1-1
12060: PPUSH
12061: LD_STRING DT2a-FSol1-1
12063: PPUSH
12064: CALL 13302 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12068: LD_EXP 3
12072: PPUSH
12073: LD_STRING DT2a-Don-1
12075: PPUSH
12076: CALL_OW 88
// DialogueOff ;
12080: CALL_OW 7
// end ;
12084: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12085: LD_INT 1
12087: PPUSH
12088: LD_INT 45
12090: PPUSH
12091: LD_INT 74
12093: PPUSH
12094: CALL_OW 293
12098: IFFALSE 12266
12100: GO 12102
12102: DISABLE
// begin DialogueOn ;
12103: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12107: LD_INT 36
12109: PPUSH
12110: LD_INT 55
12112: PPUSH
12113: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12117: LD_INT 22
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 26
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 25
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 25
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 25
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 25
12172: PUSH
12173: LD_INT 4
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 25
12182: PUSH
12183: LD_INT 5
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 25
12192: PUSH
12193: LD_INT 8
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 69
12218: PPUSH
12219: LD_STRING D5-Sol1-1
12221: PPUSH
12222: LD_STRING D5-FSol1-
12224: PPUSH
12225: CALL 13302 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12229: LD_EXP 31
12233: PUSH
12234: LD_INT 1
12236: EQUAL
12237: PUSH
12238: LD_EXP 3
12242: PPUSH
12243: CALL_OW 300
12247: AND
12248: IFFALSE 12262
// Say ( Donaldson , D5-Don-1 ) ;
12250: LD_EXP 3
12254: PPUSH
12255: LD_STRING D5-Don-1
12257: PPUSH
12258: CALL_OW 88
// DialogueOff ;
12262: CALL_OW 7
// end ;
12266: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12267: LD_INT 1
12269: PPUSH
12270: LD_INT 10
12272: PPUSH
12273: CALL_OW 292
12277: PUSH
12278: LD_INT 1
12280: PPUSH
12281: LD_INT 137
12283: PPUSH
12284: CALL_OW 292
12288: OR
12289: IFFALSE 12433
12291: GO 12293
12293: DISABLE
// begin DialogueOn ;
12294: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12298: LD_INT 22
12300: PUSH
12301: LD_INT 1
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 26
12310: PUSH
12311: LD_INT 1
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 2
12320: PUSH
12321: LD_INT 25
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 4
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 25
12363: PUSH
12364: LD_INT 5
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 25
12373: PUSH
12374: LD_INT 8
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: LIST
12394: PPUSH
12395: CALL_OW 69
12399: PPUSH
12400: LD_STRING DT3-Sol1-1
12402: PPUSH
12403: LD_STRING DT3-FSol1-1
12405: PPUSH
12406: CALL 13302 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12410: LD_EXP 1
12414: PPUSH
12415: LD_STRING DT3-JMM-1
12417: PPUSH
12418: CALL_OW 88
// DialogueOff ;
12422: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12426: LD_STRING M2
12428: PPUSH
12429: CALL_OW 337
// end ;
12433: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12434: LD_EXP 43
12438: PUSH
12439: LD_INT 0
12441: EQUAL
12442: IFFALSE 12525
12444: GO 12446
12446: DISABLE
12447: LD_INT 0
12449: PPUSH
// begin enable ;
12450: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 10
12458: PPUSH
12459: LD_INT 22
12461: PUSH
12462: LD_INT 3
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 21
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 58
12481: PUSH
12482: EMPTY
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PPUSH
12490: CALL_OW 70
12494: PUSH
12495: FOR_IN
12496: IFFALSE 12523
// if GetLives ( i ) < 1000 then
12498: LD_VAR 0 1
12502: PPUSH
12503: CALL_OW 256
12507: PUSH
12508: LD_INT 1000
12510: LESS
12511: IFFALSE 12521
// ruEscape = 1 ;
12513: LD_ADDR_EXP 43
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
12521: GO 12495
12523: POP
12524: POP
// end ;
12525: PPOPN 1
12527: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12528: LD_INT 3
12530: PPUSH
12531: CALL_OW 303
12535: PUSH
12536: LD_INT 4
12538: PPUSH
12539: CALL_OW 303
12543: OR
12544: PUSH
12545: LD_INT 22
12547: PPUSH
12548: LD_INT 22
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 70
12562: PUSH
12563: LD_INT 0
12565: GREATER
12566: OR
12567: PUSH
12568: LD_EXP 43
12572: PUSH
12573: LD_INT 1
12575: EQUAL
12576: OR
12577: IFFALSE 12808
12579: GO 12581
12581: DISABLE
12582: LD_INT 0
12584: PPUSH
12585: PPUSH
12586: PPUSH
// begin ruAI = 0 ;
12587: LD_ADDR_EXP 42
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12595: LD_ADDR_VAR 0 3
12599: PUSH
12600: LD_INT 10
12602: PPUSH
12603: LD_INT 22
12605: PUSH
12606: LD_INT 3
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 21
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 58
12625: PUSH
12626: EMPTY
12627: LIST
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: PPUSH
12634: CALL_OW 70
12638: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12639: LD_EXP 35
12643: PPUSH
12644: CALL_OW 122
// wait ( 0 0$1 ) ;
12648: LD_INT 35
12650: PPUSH
12651: CALL_OW 67
// DialogueOn ;
12655: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12659: LD_EXP 1
12663: PPUSH
12664: LD_STRING D6-JMM-1
12666: PPUSH
12667: CALL_OW 88
// DialogueOff ;
12671: CALL_OW 7
// if vehs > 0 then
12675: LD_VAR 0 3
12679: PUSH
12680: LD_INT 0
12682: GREATER
12683: IFFALSE 12753
// for i := 1 to RuScientists do
12685: LD_ADDR_VAR 0 1
12689: PUSH
12690: DOUBLE
12691: LD_INT 1
12693: DEC
12694: ST_TO_ADDR
12695: LD_EXP 35
12699: PUSH
12700: FOR_TO
12701: IFFALSE 12749
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12703: LD_EXP 35
12707: PUSH
12708: LD_VAR 0 1
12712: ARRAY
12713: PPUSH
12714: LD_INT 3
12716: PUSH
12717: LD_INT 60
12719: PUSH
12720: EMPTY
12721: LIST
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 72
12731: PPUSH
12732: LD_VAR 0 3
12736: PUSH
12737: LD_VAR 0 1
12741: ARRAY
12742: PPUSH
12743: CALL_OW 120
12747: GO 12700
12749: POP
12750: POP
12751: GO 12808
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12753: LD_EXP 35
12757: PUSH
12758: LD_VAR 0 1
12762: ARRAY
12763: PPUSH
12764: LD_INT 3
12766: PUSH
12767: LD_INT 60
12769: PUSH
12770: EMPTY
12771: LIST
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PPUSH
12777: CALL_OW 72
12781: PPUSH
12782: LD_INT 13
12784: PUSH
12785: LD_INT 14
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 1
12794: PPUSH
12795: LD_INT 2
12797: PPUSH
12798: CALL_OW 12
12802: ARRAY
12803: PPUSH
12804: CALL_OW 113
// end ;
12808: PPOPN 3
12810: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
12811: LD_EXP 42
12815: PUSH
12816: LD_INT 0
12818: EQUAL
12819: IFFALSE 13191
12821: GO 12823
12823: DISABLE
12824: LD_INT 0
12826: PPUSH
12827: PPUSH
12828: PPUSH
12829: PPUSH
// begin enable ;
12830: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
12831: LD_EXP 35
12835: PPUSH
12836: LD_INT 2
12838: PUSH
12839: LD_INT 95
12841: PUSH
12842: LD_INT 13
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: LD_INT 95
12851: PUSH
12852: LD_INT 14
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: PPUSH
12864: CALL_OW 72
12868: PUSH
12869: LD_INT 33
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 23
12881: PUSH
12882: LD_INT 3
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: LD_INT 95
12894: PUSH
12895: LD_INT 13
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 95
12904: PUSH
12905: LD_INT 14
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: PPUSH
12922: CALL_OW 69
12926: OR
12927: IFFALSE 13116
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_EXP 35
12938: PPUSH
12939: LD_INT 2
12941: PUSH
12942: LD_INT 95
12944: PUSH
12945: LD_INT 13
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 95
12954: PUSH
12955: LD_INT 14
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 72
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: ST_TO_ADDR
// if not unit then
12976: LD_VAR 0 2
12980: NOT
12981: IFFALSE 13116
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12983: LD_ADDR_VAR 0 4
12987: PUSH
12988: LD_INT 2
12990: PUSH
12991: LD_INT 95
12993: PUSH
12994: LD_INT 13
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 95
13003: PUSH
13004: LD_INT 14
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: LD_INT 1
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 23
13028: PUSH
13029: LD_INT 3
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: ST_TO_ADDR
// if not tmp then
13046: LD_VAR 0 4
13050: NOT
13051: IFFALSE 13055
// exit ;
13053: GO 13191
// for i in tmp do
13055: LD_ADDR_VAR 0 1
13059: PUSH
13060: LD_VAR 0 4
13064: PUSH
13065: FOR_IN
13066: IFFALSE 13114
// if IsDrivenBy ( i ) in RuScientists then
13068: LD_VAR 0 1
13072: PPUSH
13073: CALL_OW 311
13077: PUSH
13078: LD_EXP 35
13082: IN
13083: IFFALSE 13112
// begin unit := IsDrivenBy ( i ) ;
13085: LD_ADDR_VAR 0 2
13089: PUSH
13090: LD_VAR 0 1
13094: PPUSH
13095: CALL_OW 311
13099: ST_TO_ADDR
// veh := i ;
13100: LD_ADDR_VAR 0 3
13104: PUSH
13105: LD_VAR 0 1
13109: ST_TO_ADDR
// break ;
13110: GO 13114
// end ;
13112: GO 13065
13114: POP
13115: POP
// end ; end ; if not unit then
13116: LD_VAR 0 2
13120: NOT
13121: IFFALSE 13125
// exit ;
13123: GO 13191
// RuScientists = RuScientists diff unit ;
13125: LD_ADDR_EXP 35
13129: PUSH
13130: LD_EXP 35
13134: PUSH
13135: LD_VAR 0 2
13139: DIFF
13140: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13141: LD_VAR 0 2
13145: PPUSH
13146: CALL_OW 64
// if veh then
13150: LD_VAR 0 3
13154: IFFALSE 13191
// begin if GetWeapon ( veh ) = 49 then
13156: LD_VAR 0 3
13160: PPUSH
13161: CALL_OW 264
13165: PUSH
13166: LD_INT 49
13168: EQUAL
13169: IFFALSE 13182
// KillUnit ( veh ) else
13171: LD_VAR 0 3
13175: PPUSH
13176: CALL_OW 66
13180: GO 13191
// RemoveUnit ( veh ) ;
13182: LD_VAR 0 3
13186: PPUSH
13187: CALL_OW 64
// end ; end ; end_of_file
13191: PPOPN 4
13193: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13194: LD_INT 0
13196: PPUSH
13197: PPUSH
// if exist_mode then
13198: LD_VAR 0 2
13202: IFFALSE 13221
// unit := CreateCharacter ( ident ) else
13204: LD_ADDR_VAR 0 4
13208: PUSH
13209: LD_VAR 0 1
13213: PPUSH
13214: CALL_OW 34
13218: ST_TO_ADDR
13219: GO 13236
// unit := NewCharacter ( ident ) ;
13221: LD_ADDR_VAR 0 4
13225: PUSH
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 25
13235: ST_TO_ADDR
// result := unit ;
13236: LD_ADDR_VAR 0 3
13240: PUSH
13241: LD_VAR 0 4
13245: ST_TO_ADDR
// end ;
13246: LD_VAR 0 3
13250: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13251: LD_INT 0
13253: PPUSH
13254: PPUSH
// for i in charactersList do
13255: LD_ADDR_VAR 0 4
13259: PUSH
13260: LD_VAR 0 1
13264: PUSH
13265: FOR_IN
13266: IFFALSE 13295
// begin if IsOk ( i ) then
13268: LD_VAR 0 4
13272: PPUSH
13273: CALL_OW 302
13277: IFFALSE 13293
// SaveCharacters ( i , ident ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_VAR 0 2
13288: PPUSH
13289: CALL_OW 38
// end ;
13293: GO 13265
13295: POP
13296: POP
// end ;
13297: LD_VAR 0 3
13301: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13302: LD_INT 0
13304: PPUSH
13305: PPUSH
13306: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13307: LD_ADDR_VAR 0 1
13311: PUSH
13312: LD_VAR 0 1
13316: PUSH
13317: LD_EXP 1
13321: PUSH
13322: LD_EXP 7
13326: PUSH
13327: LD_EXP 3
13331: PUSH
13332: LD_EXP 4
13336: PUSH
13337: LD_EXP 5
13341: PUSH
13342: LD_EXP 2
13346: PUSH
13347: LD_EXP 12
13351: PUSH
13352: LD_EXP 13
13356: PUSH
13357: LD_EXP 9
13361: PUSH
13362: LD_EXP 11
13366: PUSH
13367: LD_EXP 6
13371: PUSH
13372: LD_EXP 8
13376: PUSH
13377: LD_EXP 10
13381: PUSH
13382: LD_EXP 22
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: DIFF
13403: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13404: LD_ADDR_VAR 0 6
13408: PUSH
13409: LD_INT 1
13411: PPUSH
13412: LD_VAR 0 1
13416: PPUSH
13417: CALL_OW 12
13421: ST_TO_ADDR
// for i = 1 to characters do
13422: LD_ADDR_VAR 0 5
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 1
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13548
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13440: LD_VAR 0 5
13444: PUSH
13445: LD_VAR 0 6
13449: EQUAL
13450: PUSH
13451: LD_VAR 0 1
13455: PUSH
13456: LD_VAR 0 5
13460: ARRAY
13461: PPUSH
13462: CALL_OW 258
13466: PUSH
13467: LD_INT 1
13469: EQUAL
13470: AND
13471: IFFALSE 13493
// Say ( characters [ i ] , dialogMID ) ;
13473: LD_VAR 0 1
13477: PUSH
13478: LD_VAR 0 5
13482: ARRAY
13483: PPUSH
13484: LD_VAR 0 2
13488: PPUSH
13489: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13493: LD_VAR 0 5
13497: PUSH
13498: LD_VAR 0 6
13502: EQUAL
13503: PUSH
13504: LD_VAR 0 1
13508: PUSH
13509: LD_VAR 0 5
13513: ARRAY
13514: PPUSH
13515: CALL_OW 258
13519: PUSH
13520: LD_INT 2
13522: EQUAL
13523: AND
13524: IFFALSE 13546
// Say ( characters [ i ] , dialogFID ) ;
13526: LD_VAR 0 1
13530: PUSH
13531: LD_VAR 0 5
13535: ARRAY
13536: PPUSH
13537: LD_VAR 0 3
13541: PPUSH
13542: CALL_OW 88
// end ;
13546: GO 13437
13548: POP
13549: POP
// end ;
13550: LD_VAR 0 4
13554: RET
// export function PrepareDifficulty ; var tmp ; begin
13555: LD_INT 0
13557: PPUSH
13558: PPUSH
// if Difficulty = 1 then
13559: LD_OWVAR 67
13563: PUSH
13564: LD_INT 1
13566: EQUAL
13567: IFFALSE 13585
// begin RuSolMinLevel = 8 ;
13569: LD_ADDR_EXP 37
13573: PUSH
13574: LD_INT 8
13576: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13577: LD_ADDR_EXP 38
13581: PUSH
13582: LD_INT 10
13584: ST_TO_ADDR
// end ; if Difficulty = 2 then
13585: LD_OWVAR 67
13589: PUSH
13590: LD_INT 2
13592: EQUAL
13593: IFFALSE 13687
// begin RuSolMinLevel = 9 ;
13595: LD_ADDR_EXP 37
13599: PUSH
13600: LD_INT 9
13602: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13603: LD_ADDR_EXP 38
13607: PUSH
13608: LD_INT 10
13610: ST_TO_ADDR
// uc_nation = 3 ;
13611: LD_ADDR_OWVAR 21
13615: PUSH
13616: LD_INT 3
13618: ST_TO_ADDR
// uc_side = 3 ;
13619: LD_ADDR_OWVAR 20
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// bc_level = 10 ;
13627: LD_ADDR_OWVAR 43
13631: PUSH
13632: LD_INT 10
13634: ST_TO_ADDR
// bc_type = b_turret ;
13635: LD_ADDR_OWVAR 42
13639: PUSH
13640: LD_INT 33
13642: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: LD_INT 86
13650: PPUSH
13651: LD_INT 34
13653: PPUSH
13654: LD_INT 2
13656: PPUSH
13657: CALL_OW 47
13661: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13662: LD_VAR 0 2
13666: PPUSH
13667: LD_INT 49
13669: PPUSH
13670: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13674: LD_INT 64
13676: PPUSH
13677: LD_INT 3
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: CALL_OW 322
// end ; if Difficulty = 3 then
13687: LD_OWVAR 67
13691: PUSH
13692: LD_INT 3
13694: EQUAL
13695: IFFALSE 13833
// begin RuSolMinLevel = 10 ;
13697: LD_ADDR_EXP 37
13701: PUSH
13702: LD_INT 10
13704: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13705: LD_ADDR_EXP 38
13709: PUSH
13710: LD_INT 10
13712: ST_TO_ADDR
// uc_nation = 3 ;
13713: LD_ADDR_OWVAR 21
13717: PUSH
13718: LD_INT 3
13720: ST_TO_ADDR
// uc_side = 3 ;
13721: LD_ADDR_OWVAR 20
13725: PUSH
13726: LD_INT 3
13728: ST_TO_ADDR
// bc_level = 10 ;
13729: LD_ADDR_OWVAR 43
13733: PUSH
13734: LD_INT 10
13736: ST_TO_ADDR
// bc_type = b_turret ;
13737: LD_ADDR_OWVAR 42
13741: PUSH
13742: LD_INT 33
13744: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 86
13752: PPUSH
13753: LD_INT 34
13755: PPUSH
13756: LD_INT 2
13758: PPUSH
13759: CALL_OW 47
13763: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13764: LD_VAR 0 2
13768: PPUSH
13769: LD_INT 49
13771: PPUSH
13772: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_INT 93
13783: PPUSH
13784: LD_INT 31
13786: PPUSH
13787: LD_INT 2
13789: PPUSH
13790: CALL_OW 47
13794: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: LD_INT 49
13802: PPUSH
13803: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13807: LD_INT 64
13809: PPUSH
13810: LD_INT 3
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13820: LD_INT 65
13822: PPUSH
13823: LD_INT 3
13825: PPUSH
13826: LD_INT 1
13828: PPUSH
13829: CALL_OW 322
// end ; end ;
13833: LD_VAR 0 1
13837: RET
// export function ShowQuery1 ; begin
13838: LD_INT 0
13840: PPUSH
// case query ( Q1 ) of 1 :
13841: LD_STRING Q1
13843: PPUSH
13844: CALL_OW 97
13848: PUSH
13849: LD_INT 1
13851: DOUBLE
13852: EQUAL
13853: IFTRUE 13857
13855: GO 13868
13857: POP
// result = 1 ; 2 :
13858: LD_ADDR_VAR 0 1
13862: PUSH
13863: LD_INT 1
13865: ST_TO_ADDR
13866: GO 13907
13868: LD_INT 2
13870: DOUBLE
13871: EQUAL
13872: IFTRUE 13876
13874: GO 13887
13876: POP
// result = 2 ; 3 :
13877: LD_ADDR_VAR 0 1
13881: PUSH
13882: LD_INT 2
13884: ST_TO_ADDR
13885: GO 13907
13887: LD_INT 3
13889: DOUBLE
13890: EQUAL
13891: IFTRUE 13895
13893: GO 13906
13895: POP
// result = 3 ; end ;
13896: LD_ADDR_VAR 0 1
13900: PUSH
13901: LD_INT 3
13903: ST_TO_ADDR
13904: GO 13907
13906: POP
// end ;
13907: LD_VAR 0 1
13911: RET
// export function ShowQuery2 ; begin
13912: LD_INT 0
13914: PPUSH
// case query ( Q1a ) of 1 :
13915: LD_STRING Q1a
13917: PPUSH
13918: CALL_OW 97
13922: PUSH
13923: LD_INT 1
13925: DOUBLE
13926: EQUAL
13927: IFTRUE 13931
13929: GO 13942
13931: POP
// result = 1 ; 2 :
13932: LD_ADDR_VAR 0 1
13936: PUSH
13937: LD_INT 1
13939: ST_TO_ADDR
13940: GO 13981
13942: LD_INT 2
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 13961
13950: POP
// result = 2 ; 3 :
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: LD_INT 2
13958: ST_TO_ADDR
13959: GO 13981
13961: LD_INT 3
13963: DOUBLE
13964: EQUAL
13965: IFTRUE 13969
13967: GO 13980
13969: POP
// result = 3 ; end ;
13970: LD_ADDR_VAR 0 1
13974: PUSH
13975: LD_INT 3
13977: ST_TO_ADDR
13978: GO 13981
13980: POP
// end ;
13981: LD_VAR 0 1
13985: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
13992: PPUSH
// for i = 1 to count do
13993: LD_ADDR_VAR 0 8
13997: PUSH
13998: DOUBLE
13999: LD_INT 1
14001: DEC
14002: ST_TO_ADDR
14003: LD_VAR 0 6
14007: PUSH
14008: FOR_TO
14009: IFFALSE 14090
// begin uc_side = side ;
14011: LD_ADDR_OWVAR 20
14015: PUSH
14016: LD_VAR 0 1
14020: ST_TO_ADDR
// uc_nation = nation ;
14021: LD_ADDR_OWVAR 21
14025: PUSH
14026: LD_VAR 0 2
14030: ST_TO_ADDR
// hc_gallery =  ;
14031: LD_ADDR_OWVAR 33
14035: PUSH
14036: LD_STRING 
14038: ST_TO_ADDR
// hc_name =  ;
14039: LD_ADDR_OWVAR 26
14043: PUSH
14044: LD_STRING 
14046: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14047: LD_INT 0
14049: PPUSH
14050: LD_VAR 0 5
14054: PPUSH
14055: LD_VAR 0 4
14059: PPUSH
14060: CALL_OW 380
// un = CreateHuman ;
14064: LD_ADDR_VAR 0 10
14068: PUSH
14069: CALL_OW 44
14073: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14074: LD_VAR 0 10
14078: PPUSH
14079: LD_VAR 0 3
14083: PPUSH
14084: CALL_OW 52
// end ;
14088: GO 14008
14090: POP
14091: POP
// end ;
14092: LD_VAR 0 7
14096: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14097: LD_INT 0
14099: PPUSH
14100: PPUSH
14101: PPUSH
14102: PPUSH
14103: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14104: LD_ADDR_VAR 0 8
14108: PUSH
14109: LD_INT 48
14111: PUSH
14112: LD_INT 49
14114: PUSH
14115: LD_INT 50
14117: PUSH
14118: LD_INT 20
14120: PUSH
14121: LD_INT 1
14123: PUSH
14124: LD_INT 51
14126: PUSH
14127: LD_INT 52
14129: PUSH
14130: LD_INT 69
14132: PUSH
14133: LD_INT 39
14135: PUSH
14136: LD_INT 34
14138: PUSH
14139: LD_INT 40
14141: PUSH
14142: LD_INT 53
14144: PUSH
14145: LD_INT 71
14147: PUSH
14148: LD_INT 57
14150: PUSH
14151: LD_INT 58
14153: PUSH
14154: LD_INT 44
14156: PUSH
14157: LD_INT 32
14159: PUSH
14160: LD_INT 27
14162: PUSH
14163: LD_INT 23
14165: PUSH
14166: LD_INT 33
14168: PUSH
14169: LD_INT 59
14171: PUSH
14172: LD_INT 54
14174: PUSH
14175: LD_INT 55
14177: PUSH
14178: LD_INT 56
14180: PUSH
14181: LD_INT 63
14183: PUSH
14184: LD_INT 64
14186: PUSH
14187: LD_INT 65
14189: PUSH
14190: LD_INT 30
14192: PUSH
14193: LD_INT 31
14195: PUSH
14196: LD_INT 21
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_INT 25
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14239: LD_ADDR_VAR 0 5
14243: PUSH
14244: DOUBLE
14245: LD_INT 1
14247: DEC
14248: ST_TO_ADDR
14249: LD_VAR 0 8
14253: PUSH
14254: FOR_TO
14255: IFFALSE 14331
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14257: LD_VAR 0 8
14261: PUSH
14262: LD_VAR 0 5
14266: ARRAY
14267: PPUSH
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 321
14277: PUSH
14278: LD_INT 1
14280: EQUAL
14281: PUSH
14282: LD_VAR 0 8
14286: PUSH
14287: LD_VAR 0 5
14291: ARRAY
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: CALL_OW 482
14302: PUSH
14303: LD_INT 1
14305: EQUAL
14306: AND
14307: IFFALSE 14329
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14309: LD_VAR 0 2
14313: PPUSH
14314: LD_VAR 0 8
14318: PUSH
14319: LD_VAR 0 5
14323: ARRAY
14324: PPUSH
14325: CALL_OW 184
14329: GO 14254
14331: POP
14332: POP
// end ;
14333: LD_VAR 0 4
14337: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14338: LD_INT 0
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14346: LD_ADDR_VAR 0 8
14350: PUSH
14351: LD_VAR 0 2
14355: PPUSH
14356: CALL_OW 313
14360: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14361: LD_ADDR_VAR 0 9
14365: PUSH
14366: LD_VAR 0 3
14370: PPUSH
14371: LD_INT 22
14373: PUSH
14374: LD_VAR 0 1
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 25
14385: PUSH
14386: LD_INT 2
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 24
14395: PUSH
14396: LD_INT 750
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 3
14405: PUSH
14406: LD_INT 54
14408: PUSH
14409: EMPTY
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: PPUSH
14422: CALL_OW 70
14426: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14427: LD_ADDR_VAR 0 6
14431: PUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_INT 22
14439: PUSH
14440: LD_VAR 0 1
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 21
14451: PUSH
14452: LD_INT 3
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 3
14461: PUSH
14462: LD_INT 24
14464: PUSH
14465: LD_INT 1000
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: PPUSH
14484: CALL_OW 70
14488: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14489: LD_VAR 0 6
14493: NOT
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_VAR 0 1
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 25
14509: PUSH
14510: LD_INT 2
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 24
14519: PUSH
14520: LD_INT 250
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: NOT
14537: AND
14538: IFFALSE 14542
// exit ;
14540: GO 14724
// if buildings_list > 0 and engineerOkInside then
14542: LD_VAR 0 6
14546: PUSH
14547: LD_INT 0
14549: GREATER
14550: PUSH
14551: LD_VAR 0 8
14555: AND
14556: IFFALSE 14567
// ComExitBuilding ( engineerOkInside ) ;
14558: LD_VAR 0 8
14562: PPUSH
14563: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14567: LD_VAR 0 6
14571: PUSH
14572: LD_INT 0
14574: GREATER
14575: PUSH
14576: LD_VAR 0 9
14580: PUSH
14581: LD_INT 0
14583: GREATER
14584: AND
14585: IFFALSE 14605
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14587: LD_VAR 0 9
14591: PPUSH
14592: LD_VAR 0 6
14596: PUSH
14597: LD_INT 1
14599: ARRAY
14600: PPUSH
14601: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14605: LD_VAR 0 6
14609: PUSH
14610: LD_INT 0
14612: EQUAL
14613: PUSH
14614: LD_VAR 0 4
14618: PUSH
14619: LD_INT 0
14621: EQUAL
14622: AND
14623: PUSH
14624: LD_VAR 0 9
14628: PUSH
14629: LD_INT 0
14631: GREATER
14632: AND
14633: IFFALSE 14649
// ComEnterUnit ( engineerOkOutside , building ) ;
14635: LD_VAR 0 9
14639: PPUSH
14640: LD_VAR 0 2
14644: PPUSH
14645: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14649: LD_VAR 0 9
14653: PUSH
14654: LD_INT 0
14656: GREATER
14657: PUSH
14658: LD_VAR 0 6
14662: PUSH
14663: LD_INT 0
14665: EQUAL
14666: AND
14667: PUSH
14668: LD_VAR 0 4
14672: PUSH
14673: LD_INT 0
14675: GREATER
14676: AND
14677: IFFALSE 14724
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14679: LD_VAR 0 9
14683: PPUSH
14684: LD_VAR 0 4
14688: PUSH
14689: LD_INT 1
14691: ARRAY
14692: PPUSH
14693: LD_VAR 0 4
14697: PUSH
14698: LD_INT 2
14700: ARRAY
14701: PPUSH
14702: LD_VAR 0 4
14706: PUSH
14707: LD_INT 3
14709: ARRAY
14710: PPUSH
14711: LD_VAR 0 4
14715: PUSH
14716: LD_INT 4
14718: ARRAY
14719: PPUSH
14720: CALL_OW 145
// end ;
14724: LD_VAR 0 5
14728: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14729: LD_INT 0
14731: PPUSH
14732: PPUSH
14733: PPUSH
14734: PPUSH
14735: PPUSH
14736: PPUSH
14737: PPUSH
14738: PPUSH
14739: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14740: LD_ADDR_VAR 0 6
14744: PUSH
14745: LD_INT 22
14747: PUSH
14748: LD_VAR 0 1
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 25
14759: PUSH
14760: LD_INT 4
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 24
14769: PUSH
14770: LD_INT 251
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: PUSH
14787: LD_EXP 35
14791: PUSH
14792: EMPTY
14793: LIST
14794: DIFF
14795: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14796: LD_ADDR_VAR 0 7
14800: PUSH
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 22
14808: PUSH
14809: LD_VAR 0 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 25
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_INT 50
14830: PUSH
14831: EMPTY
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 70
14843: PUSH
14844: LD_EXP 35
14848: PUSH
14849: EMPTY
14850: LIST
14851: DIFF
14852: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14853: LD_ADDR_VAR 0 10
14857: PUSH
14858: LD_VAR 0 3
14862: PPUSH
14863: LD_INT 22
14865: PUSH
14866: LD_VAR 0 1
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 21
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 3
14887: PUSH
14888: LD_INT 24
14890: PUSH
14891: LD_INT 750
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PPUSH
14907: CALL_OW 70
14911: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14912: LD_ADDR_VAR 0 11
14916: PUSH
14917: LD_VAR 0 2
14921: PPUSH
14922: LD_INT 22
14924: PUSH
14925: LD_VAR 0 1
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 21
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 3
14946: PUSH
14947: LD_INT 24
14949: PUSH
14950: LD_INT 1000
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: PPUSH
14966: CALL_OW 70
14970: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14971: LD_VAR 0 10
14975: PUSH
14976: LD_INT 0
14978: GREATER
14979: PUSH
14980: LD_VAR 0 6
14984: PUSH
14985: LD_INT 0
14987: GREATER
14988: AND
14989: IFFALSE 15005
// ComMoveToArea ( damageUnits , healArea ) ;
14991: LD_VAR 0 10
14995: PPUSH
14996: LD_VAR 0 2
15000: PPUSH
15001: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
15005: LD_VAR 0 11
15009: PUSH
15010: LD_INT 0
15012: GREATER
15013: PUSH
15014: LD_VAR 0 7
15018: PUSH
15019: LD_INT 0
15021: GREATER
15022: AND
15023: IFFALSE 15043
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15025: LD_VAR 0 7
15029: PPUSH
15030: LD_VAR 0 11
15034: PUSH
15035: LD_INT 1
15037: ARRAY
15038: PPUSH
15039: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15043: LD_VAR 0 10
15047: PUSH
15048: LD_INT 0
15050: EQUAL
15051: PUSH
15052: LD_VAR 0 11
15056: PUSH
15057: LD_INT 0
15059: EQUAL
15060: AND
15061: PUSH
15062: LD_VAR 0 7
15066: PUSH
15067: LD_INT 0
15069: GREATER
15070: AND
15071: IFFALSE 15176
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15073: LD_ADDR_VAR 0 12
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_VAR 0 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 21
15092: PUSH
15093: LD_INT 3
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 30
15102: PUSH
15103: LD_INT 8
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15120: LD_ADDR_VAR 0 13
15124: PUSH
15125: LD_INT 1
15127: PPUSH
15128: LD_VAR 0 12
15132: PPUSH
15133: CALL_OW 12
15137: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15138: LD_VAR 0 7
15142: PPUSH
15143: LD_INT 3
15145: PUSH
15146: LD_INT 60
15148: PUSH
15149: EMPTY
15150: LIST
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PPUSH
15156: CALL_OW 72
15160: PPUSH
15161: LD_VAR 0 12
15165: PUSH
15166: LD_VAR 0 13
15170: ARRAY
15171: PPUSH
15172: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15176: LD_VAR 0 3
15180: PPUSH
15181: LD_INT 22
15183: PUSH
15184: LD_VAR 0 1
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 25
15195: PUSH
15196: LD_INT 3
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 24
15205: PUSH
15206: LD_INT 751
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 70
15222: PUSH
15223: LD_INT 0
15225: GREATER
15226: PUSH
15227: LD_INT 21
15229: PPUSH
15230: CALL_OW 302
15234: AND
15235: PUSH
15236: LD_INT 21
15238: PPUSH
15239: CALL_OW 255
15243: PUSH
15244: LD_INT 3
15246: EQUAL
15247: AND
15248: IFFALSE 15304
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15250: LD_VAR 0 3
15254: PPUSH
15255: LD_INT 22
15257: PUSH
15258: LD_VAR 0 1
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 25
15269: PUSH
15270: LD_INT 3
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 24
15279: PUSH
15280: LD_INT 751
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: PPUSH
15292: CALL_OW 70
15296: PPUSH
15297: LD_INT 21
15299: PPUSH
15300: CALL_OW 120
// end ;
15304: LD_VAR 0 5
15308: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15309: LD_INT 0
15311: PPUSH
15312: PPUSH
15313: PPUSH
15314: PPUSH
15315: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15316: LD_ADDR_VAR 0 6
15320: PUSH
15321: LD_INT 22
15323: PUSH
15324: LD_VAR 0 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 2
15335: PUSH
15336: LD_INT 30
15338: PUSH
15339: LD_INT 31
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 30
15348: PUSH
15349: LD_INT 32
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 30
15358: PUSH
15359: LD_INT 33
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 30
15368: PUSH
15369: LD_INT 4
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 5
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15403: LD_ADDR_VAR 0 7
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_VAR 0 2
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 21
15422: PUSH
15423: LD_INT 3
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 58
15432: PUSH
15433: EMPTY
15434: LIST
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15446: LD_VAR 0 6
15450: PUSH
15451: LD_INT 0
15453: GREATER
15454: PUSH
15455: LD_VAR 0 7
15459: PUSH
15460: LD_INT 0
15462: GREATER
15463: AND
15464: IFFALSE 15534
// begin for i in turretsList do
15466: LD_ADDR_VAR 0 4
15470: PUSH
15471: LD_VAR 0 6
15475: PUSH
15476: FOR_IN
15477: IFFALSE 15532
// begin for j in enemyBuildings do
15479: LD_ADDR_VAR 0 5
15483: PUSH
15484: LD_VAR 0 7
15488: PUSH
15489: FOR_IN
15490: IFFALSE 15528
// begin if GetDistUnits ( i , j ) < 20 then
15492: LD_VAR 0 4
15496: PPUSH
15497: LD_VAR 0 5
15501: PPUSH
15502: CALL_OW 296
15506: PUSH
15507: LD_INT 20
15509: LESS
15510: IFFALSE 15526
// begin ComAttackUnit ( i , j ) ;
15512: LD_VAR 0 4
15516: PPUSH
15517: LD_VAR 0 5
15521: PPUSH
15522: CALL_OW 115
// end ; end ;
15526: GO 15489
15528: POP
15529: POP
// end ;
15530: GO 15476
15532: POP
15533: POP
// end ; end ;
15534: LD_VAR 0 3
15538: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15539: LD_INT 0
15541: PPUSH
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15547: LD_ADDR_VAR 0 7
15551: PUSH
15552: LD_VAR 0 2
15556: PPUSH
15557: LD_INT 22
15559: PUSH
15560: LD_VAR 0 1
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 21
15571: PUSH
15572: LD_INT 2
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 34
15581: PUSH
15582: LD_INT 52
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: PPUSH
15594: CALL_OW 70
15598: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15599: LD_ADDR_VAR 0 8
15603: PUSH
15604: LD_VAR 0 2
15608: PPUSH
15609: LD_INT 22
15611: PUSH
15612: LD_VAR 0 1
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 21
15623: PUSH
15624: LD_INT 3
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 3
15633: PUSH
15634: LD_INT 24
15636: PUSH
15637: LD_INT 1000
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: PPUSH
15656: CALL_OW 70
15660: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15661: LD_VAR 0 8
15665: PUSH
15666: LD_INT 0
15668: GREATER
15669: PUSH
15670: LD_VAR 0 7
15674: PPUSH
15675: LD_INT 24
15677: PUSH
15678: LD_INT 750
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PPUSH
15685: CALL_OW 72
15689: PUSH
15690: LD_INT 0
15692: GREATER
15693: AND
15694: IFFALSE 15714
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15696: LD_VAR 0 7
15700: PPUSH
15701: LD_VAR 0 8
15705: PUSH
15706: LD_INT 1
15708: ARRAY
15709: PPUSH
15710: CALL_OW 130
// end ;
15714: LD_VAR 0 3
15718: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15719: LD_INT 0
15721: PPUSH
15722: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15723: LD_INT 22
15725: PUSH
15726: LD_VAR 0 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 21
15737: PUSH
15738: LD_INT 2
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PPUSH
15749: CALL_OW 69
15753: PUSH
15754: LD_INT 18
15756: PPUSH
15757: LD_INT 22
15759: PUSH
15760: LD_VAR 0 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 21
15771: PUSH
15772: LD_INT 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 70
15787: PUSH
15788: LD_VAR 0 3
15792: LESSEQUAL
15793: DIFF
15794: IFFALSE 15861
// for i = 1 to vehCount do
15796: LD_ADDR_VAR 0 9
15800: PUSH
15801: DOUBLE
15802: LD_INT 1
15804: DEC
15805: ST_TO_ADDR
15806: LD_VAR 0 3
15810: PUSH
15811: FOR_TO
15812: IFFALSE 15859
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15814: LD_VAR 0 2
15818: PPUSH
15819: LD_VAR 0 7
15823: PPUSH
15824: LD_VAR 0 5
15828: PPUSH
15829: LD_VAR 0 6
15833: PPUSH
15834: LD_VAR 0 4
15838: PUSH
15839: LD_INT 1
15841: PPUSH
15842: LD_VAR 0 4
15846: PPUSH
15847: CALL_OW 12
15851: ARRAY
15852: PPUSH
15853: CALL_OW 185
15857: GO 15811
15859: POP
15860: POP
// end ;
15861: LD_VAR 0 8
15865: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15866: LD_INT 0
15868: PPUSH
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15874: LD_EXP 40
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: LD_INT 4
15884: PUSH
15885: LD_INT 4
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: PUSH
15893: LD_OWVAR 67
15897: ARRAY
15898: GREATEREQUAL
15899: PUSH
15900: LD_EXP 41
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: PUSH
15919: LD_OWVAR 67
15923: ARRAY
15924: GREATEREQUAL
15925: AND
15926: IFFALSE 16159
// begin repeat wait ( 0 0$3 ) ;
15928: LD_INT 105
15930: PPUSH
15931: CALL_OW 67
// for j in russianTanks do
15935: LD_ADDR_VAR 0 4
15939: PUSH
15940: LD_EXP 40
15944: PUSH
15945: FOR_IN
15946: IFFALSE 16147
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15948: LD_ADDR_VAR 0 6
15952: PUSH
15953: LD_INT 81
15955: PUSH
15956: LD_VAR 0 1
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 101
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 69
15983: PPUSH
15984: LD_VAR 0 4
15988: PPUSH
15989: CALL_OW 74
15993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15994: LD_ADDR_VAR 0 7
15998: PUSH
15999: LD_INT 81
16001: PUSH
16002: LD_VAR 0 1
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 101
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: LD_INT 59
16026: PUSH
16027: EMPTY
16028: LIST
16029: PUSH
16030: LD_INT 21
16032: PUSH
16033: LD_INT 1
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 21
16042: PUSH
16043: LD_INT 2
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: PPUSH
16069: LD_VAR 0 4
16073: PPUSH
16074: CALL_OW 74
16078: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16079: LD_VAR 0 4
16083: PPUSH
16084: LD_VAR 0 6
16088: PPUSH
16089: CALL_OW 296
16093: PUSH
16094: LD_INT 8
16096: PLUS
16097: PUSH
16098: LD_VAR 0 4
16102: PPUSH
16103: LD_VAR 0 7
16107: PPUSH
16108: CALL_OW 296
16112: LESS
16113: IFFALSE 16131
// ComAttackUnit ( j , target1 ) else
16115: LD_VAR 0 4
16119: PPUSH
16120: LD_VAR 0 6
16124: PPUSH
16125: CALL_OW 115
16129: GO 16145
// ComAttackUnit ( j , target2 ) ;
16131: LD_VAR 0 4
16135: PPUSH
16136: LD_VAR 0 7
16140: PPUSH
16141: CALL_OW 115
// end ;
16145: GO 15945
16147: POP
16148: POP
// until russianTanks = 0 ;
16149: LD_EXP 40
16153: PUSH
16154: LD_INT 0
16156: EQUAL
16157: IFFALSE 15928
// end ; end ;
16159: LD_VAR 0 2
16163: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16164: LD_INT 0
16166: PPUSH
16167: PPUSH
16168: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16169: LD_EXP 40
16173: PUSH
16174: LD_INT 1
16176: GREATEREQUAL
16177: PUSH
16178: LD_EXP 41
16182: PUSH
16183: LD_INT 1
16185: PUSH
16186: LD_INT 2
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: PUSH
16197: LD_OWVAR 67
16201: ARRAY
16202: GREATEREQUAL
16203: AND
16204: IFFALSE 16354
// repeat wait ( 0 0$3 ) ;
16206: LD_INT 105
16208: PPUSH
16209: CALL_OW 67
// if russianTimeLapsers > 0 then
16213: LD_EXP 41
16217: PUSH
16218: LD_INT 0
16220: GREATER
16221: IFFALSE 16344
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_EXP 41
16232: PPUSH
16233: LD_INT 3
16235: PUSH
16236: LD_INT 60
16238: PUSH
16239: EMPTY
16240: LIST
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PPUSH
16246: CALL_OW 72
16250: PUSH
16251: FOR_IN
16252: IFFALSE 16342
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
16254: LD_ADDR_VAR 0 4
16258: PUSH
16259: LD_INT 81
16261: PUSH
16262: LD_VAR 0 1
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 101
16273: PUSH
16274: LD_INT 1
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: PPUSH
16296: CALL_OW 69
16300: PPUSH
16301: LD_VAR 0 3
16305: PPUSH
16306: CALL_OW 74
16310: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
16311: LD_VAR 0 3
16315: PPUSH
16316: LD_VAR 0 4
16320: PPUSH
16321: CALL_OW 250
16325: PPUSH
16326: LD_VAR 0 4
16330: PPUSH
16331: CALL_OW 251
16335: PPUSH
16336: CALL_OW 111
// end ;
16340: GO 16251
16342: POP
16343: POP
// until russianTimeLapsers = 0 ;
16344: LD_EXP 41
16348: PUSH
16349: LD_INT 0
16351: EQUAL
16352: IFFALSE 16206
// end ;
16354: LD_VAR 0 2
16358: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
16366: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16367: LD_ADDR_VAR 0 6
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_VAR 0 1
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 25
16386: PUSH
16387: LD_INT 9
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16403: LD_ADDR_VAR 0 7
16407: PUSH
16408: LD_INT 81
16410: PUSH
16411: LD_VAR 0 1
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 3
16422: PUSH
16423: LD_INT 21
16425: PUSH
16426: LD_INT 3
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PPUSH
16441: CALL_OW 69
16445: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16446: LD_ADDR_VAR 0 4
16450: PUSH
16451: LD_INT 1
16453: PPUSH
16454: LD_INT 3
16456: PPUSH
16457: CALL_OW 12
16461: ST_TO_ADDR
// for i = 1 to list do
16462: LD_ADDR_VAR 0 5
16466: PUSH
16467: DOUBLE
16468: LD_INT 1
16470: DEC
16471: ST_TO_ADDR
16472: LD_VAR 0 6
16476: PUSH
16477: FOR_TO
16478: IFFALSE 16680
// for ta in filter do
16480: LD_ADDR_VAR 0 3
16484: PUSH
16485: LD_VAR 0 7
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16676
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16493: LD_VAR 0 6
16497: PUSH
16498: LD_VAR 0 5
16502: ARRAY
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: CALL_OW 296
16513: PUSH
16514: LD_INT 15
16516: LESSEQUAL
16517: IFFALSE 16674
// begin case c of 1 :
16519: LD_VAR 0 4
16523: PUSH
16524: LD_INT 1
16526: DOUBLE
16527: EQUAL
16528: IFTRUE 16532
16530: GO 16570
16532: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16533: LD_VAR 0 6
16537: PUSH
16538: LD_VAR 0 5
16542: ARRAY
16543: PPUSH
16544: LD_VAR 0 3
16548: PPUSH
16549: CALL_OW 250
16553: PPUSH
16554: LD_VAR 0 3
16558: PPUSH
16559: CALL_OW 251
16563: PPUSH
16564: CALL_OW 154
16568: GO 16674
16570: LD_INT 2
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 16642
16578: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16579: LD_VAR 0 6
16583: PUSH
16584: LD_VAR 0 5
16588: ARRAY
16589: PPUSH
16590: LD_VAR 0 3
16594: PPUSH
16595: CALL_OW 250
16599: PUSH
16600: LD_INT 1
16602: NEG
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: CALL_OW 12
16611: PLUS
16612: PPUSH
16613: LD_VAR 0 3
16617: PPUSH
16618: CALL_OW 251
16622: PUSH
16623: LD_INT 1
16625: NEG
16626: PPUSH
16627: LD_INT 1
16629: PPUSH
16630: CALL_OW 12
16634: PLUS
16635: PPUSH
16636: CALL_OW 153
16640: GO 16674
16642: LD_INT 3
16644: DOUBLE
16645: EQUAL
16646: IFTRUE 16650
16648: GO 16673
16650: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16651: LD_VAR 0 6
16655: PUSH
16656: LD_VAR 0 5
16660: ARRAY
16661: PPUSH
16662: LD_VAR 0 3
16666: PPUSH
16667: CALL_OW 115
16671: GO 16674
16673: POP
// end ; end ;
16674: GO 16490
16676: POP
16677: POP
16678: GO 16477
16680: POP
16681: POP
// end ;
16682: LD_VAR 0 2
16686: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16687: LD_INT 0
16689: PPUSH
16690: PPUSH
16691: PPUSH
16692: PPUSH
// r := 100 ;
16693: LD_ADDR_VAR 0 5
16697: PUSH
16698: LD_INT 100
16700: ST_TO_ADDR
// x := 0 ;
16701: LD_ADDR_VAR 0 6
16705: PUSH
16706: LD_INT 0
16708: ST_TO_ADDR
// while ( x < n ) do
16709: LD_VAR 0 6
16713: PUSH
16714: LD_VAR 0 2
16718: LESS
16719: IFFALSE 17006
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16721: LD_ADDR_VAR 0 4
16725: PUSH
16726: DOUBLE
16727: LD_INT 1
16729: DEC
16730: ST_TO_ADDR
16731: LD_VAR 0 1
16735: PPUSH
16736: LD_INT 0
16738: PPUSH
16739: CALL_OW 517
16743: PUSH
16744: LD_INT 1
16746: ARRAY
16747: PUSH
16748: FOR_TO
16749: IFFALSE 17002
// begin if r > 50 then
16751: LD_VAR 0 5
16755: PUSH
16756: LD_INT 50
16758: GREATER
16759: IFFALSE 16978
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16761: LD_VAR 0 1
16765: PPUSH
16766: LD_INT 0
16768: PPUSH
16769: CALL_OW 517
16773: PUSH
16774: LD_INT 1
16776: ARRAY
16777: PUSH
16778: LD_VAR 0 4
16782: ARRAY
16783: PPUSH
16784: LD_VAR 0 1
16788: PPUSH
16789: LD_INT 0
16791: PPUSH
16792: CALL_OW 517
16796: PUSH
16797: LD_INT 2
16799: ARRAY
16800: PUSH
16801: LD_VAR 0 4
16805: ARRAY
16806: PPUSH
16807: CALL_OW 458
16811: NOT
16812: IFFALSE 16962
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16814: LD_VAR 0 1
16818: PPUSH
16819: LD_INT 0
16821: PPUSH
16822: CALL_OW 517
16826: PUSH
16827: LD_INT 1
16829: ARRAY
16830: PUSH
16831: LD_VAR 0 4
16835: ARRAY
16836: PPUSH
16837: LD_VAR 0 1
16841: PPUSH
16842: LD_INT 0
16844: PPUSH
16845: CALL_OW 517
16849: PUSH
16850: LD_INT 2
16852: ARRAY
16853: PUSH
16854: LD_VAR 0 4
16858: ARRAY
16859: PPUSH
16860: LD_INT 8
16862: PPUSH
16863: LD_INT 0
16865: PPUSH
16866: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16870: LD_ADDR_EXP 45
16874: PUSH
16875: LD_EXP 45
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_INT 0
16890: PPUSH
16891: CALL_OW 517
16895: PUSH
16896: LD_INT 1
16898: ARRAY
16899: PUSH
16900: LD_VAR 0 4
16904: ARRAY
16905: PUSH
16906: LD_VAR 0 1
16910: PPUSH
16911: LD_INT 0
16913: PPUSH
16914: CALL_OW 517
16918: PUSH
16919: LD_INT 2
16921: ARRAY
16922: PUSH
16923: LD_VAR 0 4
16927: ARRAY
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PPUSH
16933: CALL_OW 2
16937: ST_TO_ADDR
// r := 0 ;
16938: LD_ADDR_VAR 0 5
16942: PUSH
16943: LD_INT 0
16945: ST_TO_ADDR
// x := x + 1 ;
16946: LD_ADDR_VAR 0 6
16950: PUSH
16951: LD_VAR 0 6
16955: PUSH
16956: LD_INT 1
16958: PLUS
16959: ST_TO_ADDR
// end else
16960: GO 16976
// r := r + 35 ;
16962: LD_ADDR_VAR 0 5
16966: PUSH
16967: LD_VAR 0 5
16971: PUSH
16972: LD_INT 35
16974: PLUS
16975: ST_TO_ADDR
// end else
16976: GO 17000
// r := r + rand ( 10 , 25 ) ;
16978: LD_ADDR_VAR 0 5
16982: PUSH
16983: LD_VAR 0 5
16987: PUSH
16988: LD_INT 10
16990: PPUSH
16991: LD_INT 25
16993: PPUSH
16994: CALL_OW 12
16998: PLUS
16999: ST_TO_ADDR
// end ;
17000: GO 16748
17002: POP
17003: POP
17004: GO 16709
// end ;
17006: LD_VAR 0 3
17010: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17011: LD_INT 0
17013: PPUSH
17014: PPUSH
17015: PPUSH
17016: PPUSH
// tmpTab = [ ] ;
17017: LD_ADDR_VAR 0 6
17021: PUSH
17022: EMPTY
17023: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17024: LD_INT 22
17026: PUSH
17027: LD_VAR 0 1
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 30
17038: PUSH
17039: LD_INT 32
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PPUSH
17050: CALL_OW 69
17054: PUSH
17055: LD_INT 0
17057: GREATER
17058: IFFALSE 17141
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17060: LD_ADDR_VAR 0 4
17064: PUSH
17065: LD_INT 22
17067: PUSH
17068: LD_VAR 0 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 30
17079: PUSH
17080: LD_INT 32
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17139
// begin for j in UnitsInside ( i ) do
17099: LD_ADDR_VAR 0 5
17103: PUSH
17104: LD_VAR 0 4
17108: PPUSH
17109: CALL_OW 313
17113: PUSH
17114: FOR_IN
17115: IFFALSE 17135
// tmpTab = tmpTab ^ j ;
17117: LD_ADDR_VAR 0 6
17121: PUSH
17122: LD_VAR 0 6
17126: PUSH
17127: LD_VAR 0 5
17131: ADD
17132: ST_TO_ADDR
17133: GO 17114
17135: POP
17136: POP
// end ;
17137: GO 17096
17139: POP
17140: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17141: LD_VAR 0 6
17145: PPUSH
17146: LD_VAR 0 2
17150: PPUSH
17151: CALL_OW 250
17155: PPUSH
17156: LD_VAR 0 2
17160: PPUSH
17161: CALL_OW 251
17165: PPUSH
17166: CALL_OW 114
// end ;
17170: LD_VAR 0 3
17174: RET
// export function PrepareNature ; var i , un ; begin
17175: LD_INT 0
17177: PPUSH
17178: PPUSH
17179: PPUSH
// uc_side := 0 ;
17180: LD_ADDR_OWVAR 20
17184: PUSH
17185: LD_INT 0
17187: ST_TO_ADDR
// uc_nation := 0 ;
17188: LD_ADDR_OWVAR 21
17192: PUSH
17193: LD_INT 0
17195: ST_TO_ADDR
// InitHc ;
17196: CALL_OW 19
// hc_class := class_fish ;
17200: LD_ADDR_OWVAR 28
17204: PUSH
17205: LD_INT 20
17207: ST_TO_ADDR
// for i = 1 to 6 do
17208: LD_ADDR_VAR 0 2
17212: PUSH
17213: DOUBLE
17214: LD_INT 1
17216: DEC
17217: ST_TO_ADDR
17218: LD_INT 6
17220: PUSH
17221: FOR_TO
17222: IFFALSE 17241
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17224: CALL_OW 44
17228: PPUSH
17229: LD_INT 23
17231: PPUSH
17232: LD_INT 0
17234: PPUSH
17235: CALL_OW 49
17239: GO 17221
17241: POP
17242: POP
// for i = 1 to Difficulty + 2 do
17243: LD_ADDR_VAR 0 2
17247: PUSH
17248: DOUBLE
17249: LD_INT 1
17251: DEC
17252: ST_TO_ADDR
17253: LD_OWVAR 67
17257: PUSH
17258: LD_INT 2
17260: PLUS
17261: PUSH
17262: FOR_TO
17263: IFFALSE 17372
// begin hc_sex = sex_male ;
17265: LD_ADDR_OWVAR 27
17269: PUSH
17270: LD_INT 1
17272: ST_TO_ADDR
// uc_side = 0 ;
17273: LD_ADDR_OWVAR 20
17277: PUSH
17278: LD_INT 0
17280: ST_TO_ADDR
// uc_nation = nation_nature ;
17281: LD_ADDR_OWVAR 21
17285: PUSH
17286: LD_INT 0
17288: ST_TO_ADDR
// hc_class = class_tiger ;
17289: LD_ADDR_OWVAR 28
17293: PUSH
17294: LD_INT 14
17296: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17297: LD_ADDR_OWVAR 31
17301: PUSH
17302: LD_EXP 38
17306: PUSH
17307: LD_INT 0
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17322: LD_ADDR_OWVAR 35
17326: PUSH
17327: LD_INT 5
17329: NEG
17330: PPUSH
17331: LD_INT 5
17333: PPUSH
17334: CALL_OW 12
17338: PUSH
17339: LD_OWVAR 67
17343: MUL
17344: ST_TO_ADDR
// un = CreateHuman ;
17345: LD_ADDR_VAR 0 3
17349: PUSH
17350: CALL_OW 44
17354: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17355: LD_VAR 0 3
17359: PPUSH
17360: LD_INT 24
17362: PPUSH
17363: LD_INT 0
17365: PPUSH
17366: CALL_OW 49
// end ;
17370: GO 17262
17372: POP
17373: POP
// for i = 1 to rand ( 3 , 4 ) do
17374: LD_ADDR_VAR 0 2
17378: PUSH
17379: DOUBLE
17380: LD_INT 1
17382: DEC
17383: ST_TO_ADDR
17384: LD_INT 3
17386: PPUSH
17387: LD_INT 4
17389: PPUSH
17390: CALL_OW 12
17394: PUSH
17395: FOR_TO
17396: IFFALSE 17488
// begin hc_sex = sex_male ;
17398: LD_ADDR_OWVAR 27
17402: PUSH
17403: LD_INT 1
17405: ST_TO_ADDR
// uc_side = 0 ;
17406: LD_ADDR_OWVAR 20
17410: PUSH
17411: LD_INT 0
17413: ST_TO_ADDR
// uc_nation = nation_nature ;
17414: LD_ADDR_OWVAR 21
17418: PUSH
17419: LD_INT 0
17421: ST_TO_ADDR
// hc_class = 18 ;
17422: LD_ADDR_OWVAR 28
17426: PUSH
17427: LD_INT 18
17429: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17430: LD_ADDR_OWVAR 31
17434: PUSH
17435: LD_INT 0
17437: PUSH
17438: LD_INT 0
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 0
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: ST_TO_ADDR
// hc_agressivity = 0 ;
17453: LD_ADDR_OWVAR 35
17457: PUSH
17458: LD_INT 0
17460: ST_TO_ADDR
// un = CreateHuman ;
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: CALL_OW 44
17470: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17471: LD_VAR 0 3
17475: PPUSH
17476: LD_INT 24
17478: PPUSH
17479: LD_INT 0
17481: PPUSH
17482: CALL_OW 49
// end ;
17486: GO 17395
17488: POP
17489: POP
// for i = 1 to rand ( 1 , 3 ) do
17490: LD_ADDR_VAR 0 2
17494: PUSH
17495: DOUBLE
17496: LD_INT 1
17498: DEC
17499: ST_TO_ADDR
17500: LD_INT 1
17502: PPUSH
17503: LD_INT 3
17505: PPUSH
17506: CALL_OW 12
17510: PUSH
17511: FOR_TO
17512: IFFALSE 17660
// begin hc_sex = sex_male ;
17514: LD_ADDR_OWVAR 27
17518: PUSH
17519: LD_INT 1
17521: ST_TO_ADDR
// uc_side = 0 ;
17522: LD_ADDR_OWVAR 20
17526: PUSH
17527: LD_INT 0
17529: ST_TO_ADDR
// uc_nation = nation_nature ;
17530: LD_ADDR_OWVAR 21
17534: PUSH
17535: LD_INT 0
17537: ST_TO_ADDR
// hc_class = class_apeman ;
17538: LD_ADDR_OWVAR 28
17542: PUSH
17543: LD_INT 12
17545: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17546: LD_ADDR_OWVAR 31
17550: PUSH
17551: LD_EXP 37
17555: PPUSH
17556: LD_EXP 38
17560: PPUSH
17561: CALL_OW 12
17565: PUSH
17566: LD_EXP 37
17570: PPUSH
17571: LD_EXP 38
17575: PPUSH
17576: CALL_OW 12
17580: PUSH
17581: LD_EXP 37
17585: PPUSH
17586: LD_EXP 38
17590: PPUSH
17591: CALL_OW 12
17595: PUSH
17596: LD_EXP 37
17600: PPUSH
17601: LD_EXP 38
17605: PPUSH
17606: CALL_OW 12
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17617: LD_ADDR_OWVAR 35
17621: PUSH
17622: LD_INT 1
17624: PPUSH
17625: LD_INT 20
17627: PPUSH
17628: CALL_OW 12
17632: ST_TO_ADDR
// un = CreateHuman ;
17633: LD_ADDR_VAR 0 3
17637: PUSH
17638: CALL_OW 44
17642: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17643: LD_VAR 0 3
17647: PPUSH
17648: LD_INT 24
17650: PPUSH
17651: LD_INT 0
17653: PPUSH
17654: CALL_OW 49
// end ;
17658: GO 17511
17660: POP
17661: POP
// end ; end_of_file
17662: LD_VAR 0 1
17666: RET
// on UnitDestroyed ( unit ) do var i ;
17667: LD_INT 0
17669: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17670: LD_VAR 0 1
17674: PPUSH
17675: CALL_OW 255
17679: PUSH
17680: LD_INT 3
17682: EQUAL
17683: PUSH
17684: LD_VAR 0 1
17688: PPUSH
17689: CALL_OW 247
17693: PUSH
17694: LD_INT 1
17696: EQUAL
17697: AND
17698: IFFALSE 17762
// begin for i in RuScientists do
17700: LD_ADDR_VAR 0 2
17704: PUSH
17705: LD_EXP 35
17709: PUSH
17710: FOR_IN
17711: IFFALSE 17760
// if i = unit then
17713: LD_VAR 0 2
17717: PUSH
17718: LD_VAR 0 1
17722: EQUAL
17723: IFFALSE 17758
// begin RuScientists = RuScientists diff [ unit ] ;
17725: LD_ADDR_EXP 35
17729: PUSH
17730: LD_EXP 35
17734: PUSH
17735: LD_VAR 0 1
17739: PUSH
17740: EMPTY
17741: LIST
17742: DIFF
17743: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17744: LD_ADDR_EXP 36
17748: PUSH
17749: LD_EXP 36
17753: PUSH
17754: LD_INT 1
17756: PLUS
17757: ST_TO_ADDR
// end ;
17758: GO 17710
17760: POP
17761: POP
// end ; end ;
17762: PPOPN 2
17764: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17765: LD_VAR 0 1
17769: PUSH
17770: LD_INT 10
17772: EQUAL
17773: PUSH
17774: LD_VAR 0 2
17778: PPUSH
17779: CALL_OW 255
17783: PUSH
17784: LD_INT 1
17786: EQUAL
17787: AND
17788: PUSH
17789: LD_EXP 48
17793: PUSH
17794: LD_INT 0
17796: EQUAL
17797: AND
17798: IFFALSE 17910
// begin eventVar1 = 1 ;
17800: LD_ADDR_EXP 48
17804: PUSH
17805: LD_INT 1
17807: ST_TO_ADDR
// teleportExplored = 1 ;
17808: LD_ADDR_EXP 34
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17816: LD_STRING M2a
17818: PPUSH
17819: CALL_OW 337
// wait ( 0 0$2 ) ;
17823: LD_INT 70
17825: PPUSH
17826: CALL_OW 67
// DialogueOn ;
17830: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17834: LD_INT 22
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 21
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PPUSH
17858: CALL_OW 69
17862: PPUSH
17863: LD_STRING DT3a-Sol1-1
17865: PPUSH
17866: LD_STRING DT3a-FSol1-1
17868: PPUSH
17869: CALL 13302 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17873: LD_EXP 1
17877: PPUSH
17878: LD_STRING DT3a-JMM-1
17880: PPUSH
17881: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17885: LD_VAR 0 2
17889: PPUSH
17890: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17894: LD_EXP 1
17898: PPUSH
17899: LD_STRING DT3a-JMM-1a
17901: PPUSH
17902: CALL_OW 88
// DialogueOff ;
17906: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17910: LD_VAR 0 1
17914: PUSH
17915: LD_INT 10
17917: EQUAL
17918: PUSH
17919: LD_VAR 0 2
17923: PPUSH
17924: CALL_OW 247
17928: PUSH
17929: LD_INT 2
17931: EQUAL
17932: AND
17933: PUSH
17934: LD_VAR 0 2
17938: PPUSH
17939: CALL_OW 255
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: AND
17948: PUSH
17949: LD_EXP 29
17953: PUSH
17954: LD_INT 0
17956: EQUAL
17957: AND
17958: IFFALSE 17975
// begin wait ( 0 0$3 ) ;
17960: LD_INT 105
17962: PPUSH
17963: CALL_OW 67
// vehicleTeleported = 1 ;
17967: LD_ADDR_EXP 29
17971: PUSH
17972: LD_INT 1
17974: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17975: LD_VAR 0 1
17979: PUSH
17980: LD_INT 10
17982: EQUAL
17983: PUSH
17984: LD_VAR 0 2
17988: PPUSH
17989: CALL_OW 247
17993: PUSH
17994: LD_INT 2
17996: EQUAL
17997: AND
17998: PUSH
17999: LD_VAR 0 2
18003: PPUSH
18004: CALL_OW 255
18008: PUSH
18009: LD_INT 3
18011: EQUAL
18012: AND
18013: PUSH
18014: LD_EXP 29
18018: PUSH
18019: LD_INT 2
18021: EQUAL
18022: AND
18023: IFFALSE 18040
// begin wait ( 0 0$3 ) ;
18025: LD_INT 105
18027: PPUSH
18028: CALL_OW 67
// vehicleTeleported = 3 ;
18032: LD_ADDR_EXP 29
18036: PUSH
18037: LD_INT 3
18039: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18040: LD_VAR 0 1
18044: PUSH
18045: LD_INT 10
18047: EQUAL
18048: PUSH
18049: LD_VAR 0 2
18053: PPUSH
18054: CALL_OW 247
18058: PUSH
18059: LD_INT 2
18061: EQUAL
18062: AND
18063: PUSH
18064: LD_VAR 0 2
18068: PPUSH
18069: CALL_OW 255
18073: PUSH
18074: LD_INT 3
18076: EQUAL
18077: AND
18078: IFFALSE 18094
// tpCounter = tpCounter + 1 ;
18080: LD_ADDR_EXP 30
18084: PUSH
18085: LD_EXP 30
18089: PUSH
18090: LD_INT 1
18092: PLUS
18093: ST_TO_ADDR
// end ;
18094: PPOPN 2
18096: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18097: LD_VAR 0 2
18101: PUSH
18102: LD_INT 21
18104: EQUAL
18105: PUSH
18106: LD_VAR 0 2
18110: PUSH
18111: LD_INT 112
18113: EQUAL
18114: OR
18115: IFFALSE 18293
// if GetSide ( vehicle ) = 3 then
18117: LD_VAR 0 1
18121: PPUSH
18122: CALL_OW 255
18126: PUSH
18127: LD_INT 3
18129: EQUAL
18130: IFFALSE 18293
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 264
18141: PUSH
18142: LD_INT 46
18144: EQUAL
18145: PUSH
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL_OW 264
18155: PUSH
18156: LD_INT 45
18158: EQUAL
18159: OR
18160: PUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 264
18170: PUSH
18171: LD_INT 44
18173: EQUAL
18174: OR
18175: IFFALSE 18250
// begin russianTanks = russianTanks ^ vehicle ;
18177: LD_ADDR_EXP 40
18181: PUSH
18182: LD_EXP 40
18186: PUSH
18187: LD_VAR 0 1
18191: ADD
18192: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18193: LD_EXP 44
18197: PUSH
18198: LD_INT 1
18200: EQUAL
18201: PUSH
18202: LD_EXP 44
18206: PUSH
18207: LD_INT 0
18209: EQUAL
18210: OR
18211: IFFALSE 18225
// ComEnterUnit ( vehicle , ruteleprt ) ;
18213: LD_VAR 0 1
18217: PPUSH
18218: LD_INT 10
18220: PPUSH
18221: CALL_OW 120
// if attackTactic = 2 then
18225: LD_EXP 44
18229: PUSH
18230: LD_INT 2
18232: EQUAL
18233: IFFALSE 18250
// ComMoveXY ( vehicle , 88 , 69 ) ;
18235: LD_VAR 0 1
18239: PPUSH
18240: LD_INT 88
18242: PPUSH
18243: LD_INT 69
18245: PPUSH
18246: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 264
18259: PUSH
18260: LD_INT 49
18262: EQUAL
18263: IFFALSE 18293
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18265: LD_ADDR_EXP 41
18269: PUSH
18270: LD_EXP 41
18274: PUSH
18275: LD_VAR 0 1
18279: ADD
18280: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18281: LD_VAR 0 1
18285: PPUSH
18286: LD_INT 137
18288: PPUSH
18289: CALL_OW 120
// end ; end ; end ;
18293: PPOPN 2
18295: END
// on UnitGoesToRed ( unit ) do var i ;
18296: LD_INT 0
18298: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18299: LD_VAR 0 1
18303: PPUSH
18304: CALL_OW 255
18308: PUSH
18309: LD_INT 3
18311: EQUAL
18312: PUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 247
18322: PUSH
18323: LD_INT 2
18325: EQUAL
18326: AND
18327: IFFALSE 18445
// begin if russianTanks > 0 then
18329: LD_EXP 40
18333: PUSH
18334: LD_INT 0
18336: GREATER
18337: IFFALSE 18387
// for i in russianTanks do
18339: LD_ADDR_VAR 0 2
18343: PUSH
18344: LD_EXP 40
18348: PUSH
18349: FOR_IN
18350: IFFALSE 18385
// if i = unit then
18352: LD_VAR 0 2
18356: PUSH
18357: LD_VAR 0 1
18361: EQUAL
18362: IFFALSE 18383
// russianTanks = russianTanks diff [ unit ] ;
18364: LD_ADDR_EXP 40
18368: PUSH
18369: LD_EXP 40
18373: PUSH
18374: LD_VAR 0 1
18378: PUSH
18379: EMPTY
18380: LIST
18381: DIFF
18382: ST_TO_ADDR
18383: GO 18349
18385: POP
18386: POP
// if russianTimeLapsers > 0 then
18387: LD_EXP 41
18391: PUSH
18392: LD_INT 0
18394: GREATER
18395: IFFALSE 18445
// for i in russianTimeLapsers do
18397: LD_ADDR_VAR 0 2
18401: PUSH
18402: LD_EXP 41
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18443
// if i = unit then
18410: LD_VAR 0 2
18414: PUSH
18415: LD_VAR 0 1
18419: EQUAL
18420: IFFALSE 18441
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18422: LD_ADDR_EXP 41
18426: PUSH
18427: LD_EXP 41
18431: PUSH
18432: LD_VAR 0 1
18436: PUSH
18437: EMPTY
18438: LIST
18439: DIFF
18440: ST_TO_ADDR
18441: GO 18407
18443: POP
18444: POP
// end ; end ;
18445: PPOPN 2
18447: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18448: LD_INT 0
18450: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18451: LD_VAR 0 2
18455: PPUSH
18456: CALL_OW 255
18460: PUSH
18461: LD_INT 3
18463: EQUAL
18464: PUSH
18465: LD_VAR 0 2
18469: PPUSH
18470: CALL_OW 257
18474: PUSH
18475: LD_INT 3
18477: EQUAL
18478: AND
18479: PUSH
18480: LD_INT 21
18482: PPUSH
18483: CALL_OW 255
18487: PUSH
18488: LD_INT 3
18490: EQUAL
18491: AND
18492: PUSH
18493: LD_INT 21
18495: PPUSH
18496: CALL_OW 302
18500: AND
18501: IFFALSE 18515
// ComEnterUnit ( human , ru_fact ) ;
18503: LD_VAR 0 2
18507: PPUSH
18508: LD_INT 21
18510: PPUSH
18511: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18515: LD_VAR 0 2
18519: PPUSH
18520: CALL_OW 257
18524: PUSH
18525: LD_INT 4
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 2
18533: PPUSH
18534: CALL_OW 255
18538: PUSH
18539: LD_INT 3
18541: EQUAL
18542: AND
18543: PUSH
18544: LD_EXP 42
18548: PUSH
18549: LD_INT 0
18551: EQUAL
18552: AND
18553: IFFALSE 18615
// for i in RuScientists do
18555: LD_ADDR_VAR 0 3
18559: PUSH
18560: LD_EXP 35
18564: PUSH
18565: FOR_IN
18566: IFFALSE 18613
// if i = human then
18568: LD_VAR 0 3
18572: PUSH
18573: LD_VAR 0 2
18577: EQUAL
18578: IFFALSE 18611
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18580: LD_VAR 0 3
18584: PPUSH
18585: LD_INT 13
18587: PUSH
18588: LD_INT 14
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: PPUSH
18598: LD_INT 2
18600: PPUSH
18601: CALL_OW 12
18605: ARRAY
18606: PPUSH
18607: CALL_OW 113
18611: GO 18565
18613: POP
18614: POP
// end ;
18615: PPOPN 3
18617: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18618: LD_INT 0
18620: PPUSH
18621: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18622: LD_VAR 0 2
18626: PPUSH
18627: CALL_OW 255
18631: PUSH
18632: LD_INT 3
18634: EQUAL
18635: PUSH
18636: LD_VAR 0 2
18640: PPUSH
18641: CALL_OW 257
18645: PUSH
18646: LD_INT 4
18648: EQUAL
18649: AND
18650: IFFALSE 18792
// for i in RuScientists do
18652: LD_ADDR_VAR 0 3
18656: PUSH
18657: LD_EXP 35
18661: PUSH
18662: FOR_IN
18663: IFFALSE 18790
// if i = human then
18665: LD_VAR 0 3
18669: PUSH
18670: LD_VAR 0 2
18674: EQUAL
18675: IFFALSE 18788
// if IsOk ( rutp ) then
18677: LD_INT 137
18679: PPUSH
18680: CALL_OW 302
18684: IFFALSE 18757
// begin rnd = rand ( 1 , 2 ) ;
18686: LD_ADDR_VAR 0 4
18690: PUSH
18691: LD_INT 1
18693: PPUSH
18694: LD_INT 2
18696: PPUSH
18697: CALL_OW 12
18701: ST_TO_ADDR
// if rnd = 1 then
18702: LD_VAR 0 4
18706: PUSH
18707: LD_INT 1
18709: EQUAL
18710: IFFALSE 18724
// ComEnterUnit ( vehicle , rutp ) ;
18712: LD_VAR 0 1
18716: PPUSH
18717: LD_INT 137
18719: PPUSH
18720: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18724: LD_VAR 0 1
18728: PPUSH
18729: LD_INT 13
18731: PUSH
18732: LD_INT 14
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: PPUSH
18742: LD_INT 2
18744: PPUSH
18745: CALL_OW 12
18749: ARRAY
18750: PPUSH
18751: CALL_OW 173
// end else
18755: GO 18788
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18757: LD_VAR 0 1
18761: PPUSH
18762: LD_INT 13
18764: PUSH
18765: LD_INT 14
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PPUSH
18775: LD_INT 2
18777: PPUSH
18778: CALL_OW 12
18782: ARRAY
18783: PPUSH
18784: CALL_OW 113
// end ;
18788: GO 18662
18790: POP
18791: POP
// end ; end_of_file
18792: PPOPN 4
18794: END
// every 0 0$1 trigger ruAI = 1 do
18795: LD_EXP 42
18799: PUSH
18800: LD_INT 1
18802: EQUAL
18803: IFFALSE 18932
18805: GO 18807
18807: DISABLE
// begin enable ;
18808: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18809: LD_INT 3
18811: PPUSH
18812: LD_INT 6
18814: PPUSH
18815: LD_INT 9
18817: PPUSH
18818: LD_EXP 39
18822: PPUSH
18823: CALL 14338 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18827: LD_INT 3
18829: PPUSH
18830: LD_INT 4
18832: PPUSH
18833: LD_INT 10
18835: PPUSH
18836: LD_EXP 39
18840: PPUSH
18841: CALL 14338 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18845: LD_INT 3
18847: PPUSH
18848: LD_INT 9
18850: PPUSH
18851: CALL 15539 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18855: LD_INT 3
18857: PPUSH
18858: LD_INT 10
18860: PPUSH
18861: CALL 15539 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18865: LD_INT 3
18867: PPUSH
18868: LD_INT 16
18870: PPUSH
18871: LD_INT 9
18873: PPUSH
18874: LD_INT 91
18876: PPUSH
18877: CALL 14729 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18881: LD_INT 3
18883: PPUSH
18884: LD_INT 17
18886: PPUSH
18887: LD_INT 10
18889: PPUSH
18890: LD_INT 47
18892: PUSH
18893: LD_INT 129
18895: PUSH
18896: LD_INT 135
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: PPUSH
18904: CALL 14729 0 4
// AttackVehicles ( 3 ) ;
18908: LD_INT 3
18910: PPUSH
18911: CALL 15866 0 1
// IntBazooka ( 3 ) ;
18915: LD_INT 3
18917: PPUSH
18918: CALL 16359 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18922: LD_INT 3
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: CALL 15309 0 2
// end ;
18932: END
// every 0 0$1 do
18933: GO 18935
18935: DISABLE
// begin enable ;
18936: ENABLE
// TimeLapsersAI ( 3 ) ;
18937: LD_INT 3
18939: PPUSH
18940: CALL 16164 0 1
// end ;
18944: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18945: LD_INT 4
18947: PPUSH
18948: CALL_OW 303
18952: IFFALSE 18967
18954: GO 18956
18956: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
18957: LD_INT 3
18959: PPUSH
18960: LD_INT 4
18962: PPUSH
18963: CALL 17011 0 2
18967: END
// every 0 0$1 do
18968: GO 18970
18970: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
18971: LD_INT 3
18973: PPUSH
18974: LD_INT 91
18976: PPUSH
18977: LD_INT 3
18979: PPUSH
18980: CALL 14097 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
18984: LD_INT 3
18986: PPUSH
18987: LD_INT 47
18989: PPUSH
18990: LD_INT 3
18992: PPUSH
18993: CALL 14097 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
18997: LD_INT 3
18999: PPUSH
19000: LD_INT 129
19002: PPUSH
19003: LD_INT 3
19005: PPUSH
19006: CALL 14097 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
19010: LD_INT 3
19012: PPUSH
19013: LD_INT 3
19015: PPUSH
19016: LD_INT 3
19018: PPUSH
19019: CALL 14097 0 3
// end ;
19023: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19024: LD_EXP 28
19028: PUSH
19029: LD_INT 2
19031: EQUAL
19032: PUSH
19033: LD_INT 21
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 3
19043: EQUAL
19044: AND
19045: PUSH
19046: LD_INT 112
19048: PPUSH
19049: CALL_OW 255
19053: PUSH
19054: LD_INT 3
19056: EQUAL
19057: AND
19058: PUSH
19059: LD_INT 21
19061: PPUSH
19062: CALL_OW 302
19066: AND
19067: PUSH
19068: LD_INT 112
19070: PPUSH
19071: CALL_OW 302
19075: AND
19076: PUSH
19077: LD_INT 22
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 50
19099: PUSH
19100: EMPTY
19101: LIST
19102: PUSH
19103: LD_INT 3
19105: PUSH
19106: LD_INT 58
19108: PUSH
19109: EMPTY
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 69
19126: PUSH
19127: LD_INT 18
19129: PPUSH
19130: LD_INT 22
19132: PUSH
19133: LD_INT 3
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 21
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PPUSH
19154: CALL_OW 70
19158: PUSH
19159: LD_INT 0
19161: EQUAL
19162: DIFF
19163: AND
19164: IFFALSE 19282
19166: GO 19168
19168: DISABLE
// begin enable ;
19169: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19170: LD_INT 3
19172: PPUSH
19173: LD_INT 21
19175: PPUSH
19176: LD_INT 3
19178: PUSH
19179: LD_INT 4
19181: PUSH
19182: LD_INT 4
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: LD_OWVAR 67
19194: ARRAY
19195: PPUSH
19196: LD_INT 46
19198: PUSH
19199: LD_INT 45
19201: PUSH
19202: LD_INT 44
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: PPUSH
19210: LD_INT 3
19212: PPUSH
19213: LD_INT 3
19215: PPUSH
19216: LD_INT 24
19218: PPUSH
19219: CALL 15719 0 7
// if russianTimeLapsers = 0 then
19223: LD_EXP 41
19227: PUSH
19228: LD_INT 0
19230: EQUAL
19231: IFFALSE 19282
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19233: LD_INT 3
19235: PPUSH
19236: LD_INT 112
19238: PPUSH
19239: LD_INT 1
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 2
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: PUSH
19253: LD_OWVAR 67
19257: ARRAY
19258: PPUSH
19259: LD_INT 49
19261: PUSH
19262: LD_INT 49
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PPUSH
19269: LD_INT 3
19271: PPUSH
19272: LD_INT 3
19274: PPUSH
19275: LD_INT 24
19277: PPUSH
19278: CALL 15719 0 7
// end ;
19282: END
// every 0 0$1 trigger arabianMines do var i ;
19283: LD_EXP 45
19287: IFFALSE 19408
19289: GO 19291
19291: DISABLE
19292: LD_INT 0
19294: PPUSH
// begin enable ;
19295: ENABLE
// for i in arabianMines do
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: LD_EXP 45
19305: PUSH
19306: FOR_IN
19307: IFFALSE 19406
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19309: LD_INT 22
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 92
19321: PUSH
19322: LD_VAR 0 1
19326: PUSH
19327: LD_INT 1
19329: ARRAY
19330: PUSH
19331: LD_VAR 0 1
19335: PUSH
19336: LD_INT 2
19338: ARRAY
19339: PUSH
19340: LD_INT 3
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PPUSH
19353: CALL_OW 69
19357: IFFALSE 19404
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19359: LD_VAR 0 1
19363: PUSH
19364: LD_INT 1
19366: ARRAY
19367: PPUSH
19368: LD_VAR 0 1
19372: PUSH
19373: LD_INT 2
19375: ARRAY
19376: PPUSH
19377: LD_INT 5
19379: PPUSH
19380: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19384: LD_ADDR_EXP 45
19388: PUSH
19389: LD_EXP 45
19393: PPUSH
19394: LD_VAR 0 1
19398: PPUSH
19399: CALL_OW 3
19403: ST_TO_ADDR
// end ; end ;
19404: GO 19306
19406: POP
19407: POP
// end ;
19408: PPOPN 1
19410: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19411: LD_EXP 29
19415: PUSH
19416: LD_INT 4
19418: EQUAL
19419: PUSH
19420: LD_EXP 30
19424: PUSH
19425: LD_INT 6
19427: PUSH
19428: LD_INT 8
19430: PUSH
19431: LD_INT 8
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: PUSH
19439: LD_OWVAR 67
19443: ARRAY
19444: EQUAL
19445: AND
19446: IFFALSE 19464
19448: GO 19450
19450: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19451: LD_INT 10
19453: PPUSH
19454: LD_INT 47
19456: PPUSH
19457: LD_INT 82
19459: PPUSH
19460: CALL_OW 243
19464: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19465: LD_EXP 29
19469: PUSH
19470: LD_INT 4
19472: EQUAL
19473: IFFALSE 19495
19475: GO 19477
19477: DISABLE
// begin enable ;
19478: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19479: LD_ADDR_EXP 44
19483: PUSH
19484: LD_INT 1
19486: PPUSH
19487: LD_INT 2
19489: PPUSH
19490: CALL_OW 12
19494: ST_TO_ADDR
// end ; end_of_file
19495: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19496: LD_EXP 35
19500: PUSH
19501: EMPTY
19502: EQUAL
19503: PUSH
19504: LD_INT 3
19506: PPUSH
19507: CALL_OW 301
19511: AND
19512: IFFALSE 19717
19514: GO 19516
19516: DISABLE
// begin if sciCounter = 0 then
19517: LD_EXP 36
19521: PUSH
19522: LD_INT 0
19524: EQUAL
19525: IFFALSE 19551
// begin Say ( JMM , D7a-JMM-1 ) ;
19527: LD_EXP 1
19531: PPUSH
19532: LD_STRING D7a-JMM-1
19534: PPUSH
19535: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19539: LD_EXP 22
19543: PPUSH
19544: LD_STRING D7a-Pow-1
19546: PPUSH
19547: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19551: LD_EXP 36
19555: PUSH
19556: LD_INT 0
19558: GREATER
19559: PUSH
19560: LD_EXP 36
19564: PUSH
19565: LD_INT 6
19567: LESS
19568: AND
19569: IFFALSE 19595
// begin Say ( JMM , D7b-JMM-1 ) ;
19571: LD_EXP 1
19575: PPUSH
19576: LD_STRING D7b-JMM-1
19578: PPUSH
19579: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19583: LD_EXP 22
19587: PPUSH
19588: LD_STRING D7b-Pow-1
19590: PPUSH
19591: CALL_OW 94
// end ; if sciCounter = 6 then
19595: LD_EXP 36
19599: PUSH
19600: LD_INT 6
19602: EQUAL
19603: IFFALSE 19713
// begin Say ( JMM , D7c-JMM-1 ) ;
19605: LD_EXP 1
19609: PPUSH
19610: LD_STRING D7c-JMM-1
19612: PPUSH
19613: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19617: LD_EXP 22
19621: PPUSH
19622: LD_STRING D7c-Pow-1
19624: PPUSH
19625: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19629: LD_EXP 1
19633: PPUSH
19634: LD_STRING D7d-JMM-1
19636: PPUSH
19637: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19641: LD_EXP 22
19645: PPUSH
19646: LD_STRING D7d-Pow-1
19648: PPUSH
19649: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19653: LD_EXP 1
19657: PPUSH
19658: LD_STRING D7d-JMM-2
19660: PPUSH
19661: CALL_OW 88
// if askSiberite = 1 then
19665: LD_EXP 33
19669: PUSH
19670: LD_INT 1
19672: EQUAL
19673: IFFALSE 19689
// begin Say ( JMM , D7d-JMM-2a ) ;
19675: LD_EXP 1
19679: PPUSH
19680: LD_STRING D7d-JMM-2a
19682: PPUSH
19683: CALL_OW 88
// end else
19687: GO 19701
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19689: LD_EXP 22
19693: PPUSH
19694: LD_STRING D7d-Pow-2
19696: PPUSH
19697: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19701: LD_EXP 22
19705: PPUSH
19706: LD_STRING D7d-Pow-2a
19708: PPUSH
19709: CALL_OW 94
// end ; FinishMission ;
19713: CALL 19718 0 0
// end ;
19717: END
// export function FinishMission ; begin
19718: LD_INT 0
19720: PPUSH
// if teleportExplored = 1 then
19721: LD_EXP 34
19725: PUSH
19726: LD_INT 1
19728: EQUAL
19729: IFFALSE 19743
// AddMedal ( Teleport , 1 ) else
19731: LD_STRING Teleport
19733: PPUSH
19734: LD_INT 1
19736: PPUSH
19737: CALL_OW 101
19741: GO 19754
// AddMedal ( Teleport , - 1 ) ;
19743: LD_STRING Teleport
19745: PPUSH
19746: LD_INT 1
19748: NEG
19749: PPUSH
19750: CALL_OW 101
// if sciCounter > 2 then
19754: LD_EXP 36
19758: PUSH
19759: LD_INT 2
19761: GREATER
19762: IFFALSE 19776
// AddMedal ( Materials , 1 ) else
19764: LD_STRING Materials
19766: PPUSH
19767: LD_INT 1
19769: PPUSH
19770: CALL_OW 101
19774: GO 19787
// AddMedal ( Materials , - 1 ) ;
19776: LD_STRING Materials
19778: PPUSH
19779: LD_INT 1
19781: NEG
19782: PPUSH
19783: CALL_OW 101
// if sciCounter = 6 then
19787: LD_EXP 36
19791: PUSH
19792: LD_INT 6
19794: EQUAL
19795: IFFALSE 19819
// begin AddMedal ( Scientists , 1 ) ;
19797: LD_STRING Scientists
19799: PPUSH
19800: LD_INT 1
19802: PPUSH
19803: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19807: LD_INT 1
19809: PPUSH
19810: LD_STRING 12_SciDed_1
19812: PPUSH
19813: CALL_OW 39
// end else
19817: GO 19840
// begin AddMedal ( Scientists , - 1 ) ;
19819: LD_STRING Scientists
19821: PPUSH
19822: LD_INT 1
19824: NEG
19825: PPUSH
19826: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19830: LD_INT 0
19832: PPUSH
19833: LD_STRING 12_SciDed_1
19835: PPUSH
19836: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19840: LD_EXP 32
19844: PPUSH
19845: LD_STRING 12_MainDepositFake_1
19847: PPUSH
19848: CALL_OW 39
// GiveMedals ( MAIN ) ;
19852: LD_STRING MAIN
19854: PPUSH
19855: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19859: LD_INT 22
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 21
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: LD_INT 25
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 25
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 25
19904: PUSH
19905: LD_INT 3
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 25
19914: PUSH
19915: LD_INT 4
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 25
19924: PUSH
19925: LD_INT 5
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 25
19934: PUSH
19935: LD_INT 8
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: LIST
19955: PPUSH
19956: CALL_OW 69
19960: PPUSH
19961: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19965: LD_EXP 1
19969: PPUSH
19970: LD_EXP 47
19974: PUSH
19975: LD_STRING JMM
19977: STR
19978: PPUSH
19979: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19983: LD_EXP 7
19987: PPUSH
19988: LD_EXP 47
19992: PUSH
19993: LD_STRING Brown
19995: STR
19996: PPUSH
19997: CALL 13251 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20001: LD_EXP 3
20005: PPUSH
20006: LD_EXP 47
20010: PUSH
20011: LD_STRING Donaldson
20013: STR
20014: PPUSH
20015: CALL 13251 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20019: LD_EXP 4
20023: PPUSH
20024: LD_EXP 47
20028: PUSH
20029: LD_STRING Bobby
20031: STR
20032: PPUSH
20033: CALL 13251 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20037: LD_EXP 5
20041: PPUSH
20042: LD_EXP 47
20046: PUSH
20047: LD_STRING Cyrus
20049: STR
20050: PPUSH
20051: CALL 13251 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20055: LD_EXP 2
20059: PPUSH
20060: LD_EXP 47
20064: PUSH
20065: LD_STRING Lisa
20067: STR
20068: PPUSH
20069: CALL 13251 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20073: LD_EXP 12
20077: PPUSH
20078: LD_EXP 47
20082: PUSH
20083: LD_STRING Frank
20085: STR
20086: PPUSH
20087: CALL 13251 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20091: LD_EXP 13
20095: PPUSH
20096: LD_EXP 47
20100: PUSH
20101: LD_STRING Kikuchi
20103: STR
20104: PPUSH
20105: CALL 13251 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20109: LD_EXP 9
20113: PPUSH
20114: LD_EXP 47
20118: PUSH
20119: LD_STRING Houten
20121: STR
20122: PPUSH
20123: CALL 13251 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20127: LD_EXP 11
20131: PPUSH
20132: LD_EXP 47
20136: PUSH
20137: LD_STRING Gary
20139: STR
20140: PPUSH
20141: CALL 13251 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20145: LD_EXP 10
20149: PPUSH
20150: LD_EXP 47
20154: PUSH
20155: LD_STRING Cornell
20157: STR
20158: PPUSH
20159: CALL 13251 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20163: LD_EXP 6
20167: PPUSH
20168: LD_EXP 47
20172: PUSH
20173: LD_STRING Denis
20175: STR
20176: PPUSH
20177: CALL 13251 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20181: LD_EXP 8
20185: PPUSH
20186: LD_EXP 47
20190: PUSH
20191: LD_STRING Gladstone
20193: STR
20194: PPUSH
20195: CALL 13251 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20199: LD_INT 50
20201: PUSH
20202: EMPTY
20203: LIST
20204: PUSH
20205: LD_INT 22
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 23
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 21
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 25
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 25
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 25
20260: PUSH
20261: LD_INT 3
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 25
20270: PUSH
20271: LD_INT 4
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 25
20280: PUSH
20281: LD_INT 5
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 25
20290: PUSH
20291: LD_INT 8
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: PPUSH
20314: CALL_OW 69
20318: PUSH
20319: LD_EXP 1
20323: PUSH
20324: LD_EXP 7
20328: PUSH
20329: LD_EXP 3
20333: PUSH
20334: LD_EXP 4
20338: PUSH
20339: LD_EXP 5
20343: PUSH
20344: LD_EXP 2
20348: PUSH
20349: LD_EXP 12
20353: PUSH
20354: LD_EXP 8
20358: PUSH
20359: LD_EXP 13
20363: PUSH
20364: LD_EXP 6
20368: PUSH
20369: LD_EXP 9
20373: PUSH
20374: LD_EXP 11
20378: PUSH
20379: LD_EXP 10
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: DIFF
20399: PPUSH
20400: LD_STRING 12_other_survivors
20402: PPUSH
20403: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20407: LD_INT 50
20409: PUSH
20410: EMPTY
20411: LIST
20412: PUSH
20413: LD_INT 22
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 23
20425: PUSH
20426: LD_INT 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 21
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 25
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 25
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 25
20468: PUSH
20469: LD_INT 3
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 25
20478: PUSH
20479: LD_INT 4
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 25
20488: PUSH
20489: LD_INT 5
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 25
20498: PUSH
20499: LD_INT 8
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: PPUSH
20522: CALL_OW 69
20526: PPUSH
20527: LD_STRING 12_kurt_squad
20529: PPUSH
20530: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
20534: LD_EXP 14
20538: PPUSH
20539: LD_STRING 12_others
20541: PPUSH
20542: CALL_OW 38
// YouWin ;
20546: CALL_OW 103
// end ; end_of_file
20550: LD_VAR 0 1
20554: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20555: LD_EXP 1
20559: PPUSH
20560: CALL_OW 301
20564: IFFALSE 20576
20566: GO 20568
20568: DISABLE
// YouLost ( JMM ) ; end_of_file
20569: LD_STRING JMM
20571: PPUSH
20572: CALL_OW 104
20576: END
// every 0 0$01 do
20577: GO 20579
20579: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20580: LD_INT 1050
20582: PPUSH
20583: CALL_OW 67
// if cratesSpawned < 6 then
20587: LD_EXP 46
20591: PUSH
20592: LD_INT 6
20594: LESS
20595: IFFALSE 20632
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20597: LD_INT 3
20599: PPUSH
20600: LD_INT 5
20602: PPUSH
20603: CALL_OW 12
20607: PPUSH
20608: LD_INT 21
20610: PPUSH
20611: LD_INT 1
20613: PPUSH
20614: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20618: LD_ADDR_EXP 46
20622: PUSH
20623: LD_EXP 46
20627: PUSH
20628: LD_INT 1
20630: PLUS
20631: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20632: LD_EXP 46
20636: PUSH
20637: LD_INT 6
20639: GREATEREQUAL
20640: PUSH
20641: LD_EXP 46
20645: PUSH
20646: LD_INT 12
20648: LESS
20649: AND
20650: IFFALSE 20694
// begin wait ( 0 0$30 ) ;
20652: LD_INT 1050
20654: PPUSH
20655: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20659: LD_INT 3
20661: PPUSH
20662: LD_INT 5
20664: PPUSH
20665: CALL_OW 12
20669: PPUSH
20670: LD_INT 21
20672: PPUSH
20673: LD_INT 1
20675: PPUSH
20676: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20680: LD_ADDR_EXP 46
20684: PUSH
20685: LD_EXP 46
20689: PUSH
20690: LD_INT 1
20692: PLUS
20693: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20694: LD_EXP 46
20698: PUSH
20699: LD_INT 12
20701: GREATEREQUAL
20702: IFFALSE 20746
// begin wait ( 1 1$30 ) ;
20704: LD_INT 3150
20706: PPUSH
20707: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20711: LD_INT 3
20713: PPUSH
20714: LD_INT 5
20716: PPUSH
20717: CALL_OW 12
20721: PPUSH
20722: LD_INT 21
20724: PPUSH
20725: LD_INT 1
20727: PPUSH
20728: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20732: LD_ADDR_EXP 46
20736: PUSH
20737: LD_EXP 46
20741: PUSH
20742: LD_INT 1
20744: PLUS
20745: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20746: LD_EXP 46
20750: PUSH
20751: LD_INT 15
20753: GREATEREQUAL
20754: IFFALSE 20580
// end ;
20756: END
