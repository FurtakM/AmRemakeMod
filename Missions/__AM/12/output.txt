// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 42
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// askSiberite = 0 ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// warWithLegion = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// fakeInfo = 0 ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// cratesSpawned = 0 ;
 127: LD_ADDR_EXP 43
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// ruAI = 0 ;
 135: LD_ADDR_EXP 41
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// eventVar1 = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// mission_prefix = 12_ ;
 151: LD_ADDR_EXP 44
 155: PUSH
 156: LD_STRING 12_
 158: ST_TO_ADDR
// debugMode = 0 ;
 159: LD_ADDR_EXP 46
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// PrepareNature ;
 167: CALL 15662 0 0
// PrepareDifficulty ;
 171: CALL 12619 0 0
// PrepareVehicles ;
 175: CALL 1523 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 179: LD_INT 4
 181: PPUSH
 182: LD_INT 0
 184: PPUSH
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 0
 190: PPUSH
 191: CALL 1099 0 4
// PrepareAmericanHeroes ;
 195: CALL 533 0 0
// PrepareRussianCommander ;
 199: CALL 2842 0 0
// PrepareWestBase ;
 203: CALL 3354 0 0
// PrepareEastBase ;
 207: CALL 2914 0 0
// PrepareOtherRussians ;
 211: CALL 3466 0 0
// end ;
 215: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 216: LD_EXP 46
 220: PUSH
 221: LD_INT 1
 223: EQUAL
 224: IFFALSE 530
 226: GO 228
 228: DISABLE
 229: LD_INT 0
 231: PPUSH
// begin enable ;
 232: ENABLE
// fogoff ( true ) ;
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 240: LD_ADDR_VAR 0 1
 244: PUSH
 245: LD_INT 22
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 21
 257: PUSH
 258: LD_INT 1
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: PPUSH
 269: CALL_OW 69
 273: PUSH
 274: FOR_IN
 275: IFFALSE 291
// SetLives ( i , 1000 ) ;
 277: LD_VAR 0 1
 281: PPUSH
 282: LD_INT 1000
 284: PPUSH
 285: CALL_OW 234
 289: GO 274
 291: POP
 292: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 293: LD_ADDR_VAR 0 1
 297: PUSH
 298: LD_INT 22
 300: PUSH
 301: LD_INT 1
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 2
 310: PUSH
 311: LD_INT 30
 313: PUSH
 314: LD_INT 0
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 30
 323: PUSH
 324: LD_INT 1
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: PUSH
 345: FOR_IN
 346: IFFALSE 370
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 348: LD_VAR 0 1
 352: PPUSH
 353: CALL_OW 274
 357: PPUSH
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 9999
 363: PPUSH
 364: CALL_OW 277
 368: GO 345
 370: POP
 371: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 372: LD_ADDR_VAR 0 1
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 1
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 30
 392: PUSH
 393: LD_INT 0
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 30
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PPUSH
 419: CALL_OW 69
 423: PUSH
 424: FOR_IN
 425: IFFALSE 449
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 427: LD_VAR 0 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 2
 439: PPUSH
 440: LD_INT 9999
 442: PPUSH
 443: CALL_OW 277
 447: GO 424
 449: POP
 450: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 451: LD_ADDR_VAR 0 1
 455: PUSH
 456: LD_INT 22
 458: PUSH
 459: LD_INT 1
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: PUSH
 466: LD_INT 2
 468: PUSH
 469: LD_INT 30
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 30
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: PPUSH
 498: CALL_OW 69
 502: PUSH
 503: FOR_IN
 504: IFFALSE 528
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 506: LD_VAR 0 1
 510: PPUSH
 511: CALL_OW 274
 515: PPUSH
 516: LD_INT 3
 518: PPUSH
 519: LD_INT 9999
 521: PPUSH
 522: CALL_OW 277
 526: GO 503
 528: POP
 529: POP
// end ; end_of_file
 530: PPOPN 1
 532: END
// export function PrepareAmericanHeroes ; begin
 533: LD_INT 0
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 544: LD_ADDR_EXP 14
 548: PUSH
 549: LD_STRING 11_others
 551: PPUSH
 552: CALL_OW 31
 556: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 557: LD_ADDR_EXP 1
 561: PUSH
 562: LD_STRING 11_JMM
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL 12258 0 2
 572: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 573: LD_EXP 1
 577: PPUSH
 578: LD_INT 1
 580: PPUSH
 581: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 585: LD_EXP 1
 589: PPUSH
 590: LD_INT 22
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 21
 602: PUSH
 603: LD_INT 2
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 58
 612: PUSH
 613: EMPTY
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 69
 625: PUSH
 626: LD_INT 1
 628: ARRAY
 629: PPUSH
 630: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 634: LD_STRING 11_Lisa
 636: PPUSH
 637: CALL_OW 28
 641: PUSH
 642: LD_INT 1
 644: EQUAL
 645: IFFALSE 692
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 647: LD_ADDR_EXP 2
 651: PUSH
 652: LD_STRING 11_Lisa
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL 12258 0 2
 662: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 663: LD_EXP 2
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 675: LD_EXP 2
 679: PPUSH
 680: LD_INT 4
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// end else
 690: GO 708
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 692: LD_INT 4
 694: PPUSH
 695: LD_INT 0
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL 1099 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 708: LD_STRING 11_Donaldson
 710: PPUSH
 711: CALL_OW 28
 715: PUSH
 716: LD_INT 1
 718: EQUAL
 719: IFFALSE 766
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 721: LD_ADDR_EXP 3
 725: PUSH
 726: LD_STRING 11_Donaldson
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL 12258 0 2
 736: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 737: LD_EXP 3
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 749: LD_EXP 3
 753: PPUSH
 754: LD_INT 4
 756: PPUSH
 757: LD_INT 0
 759: PPUSH
 760: CALL_OW 49
// end else
 764: GO 782
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 766: LD_INT 4
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL 1099 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 782: LD_STRING 11_Cyrus
 784: PPUSH
 785: CALL_OW 28
 789: PUSH
 790: LD_INT 1
 792: EQUAL
 793: IFFALSE 840
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 795: LD_ADDR_EXP 5
 799: PUSH
 800: LD_STRING 11_Cyrus
 802: PPUSH
 803: LD_INT 1
 805: PPUSH
 806: CALL 12258 0 2
 810: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 811: LD_EXP 5
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 823: LD_EXP 5
 827: PPUSH
 828: LD_INT 4
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: CALL_OW 49
// end else
 838: GO 856
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 840: LD_INT 4
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL 1099 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 856: LD_STRING 11_Denis
 858: PPUSH
 859: CALL_OW 28
 863: PUSH
 864: LD_INT 1
 866: EQUAL
 867: IFFALSE 914
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 869: LD_ADDR_EXP 6
 873: PUSH
 874: LD_STRING 11_Denis
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL 12258 0 2
 884: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 885: LD_EXP 6
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 897: LD_EXP 6
 901: PPUSH
 902: LD_INT 4
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 49
// end else
 912: GO 930
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 914: LD_INT 4
 916: PPUSH
 917: LD_INT 0
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: LD_INT 0
 925: PPUSH
 926: CALL 1099 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 930: LD_STRING 11_Frank
 932: PPUSH
 933: CALL_OW 28
 937: PUSH
 938: LD_INT 1
 940: EQUAL
 941: IFFALSE 988
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 943: LD_ADDR_EXP 12
 947: PUSH
 948: LD_STRING 11_Frank
 950: PPUSH
 951: LD_INT 1
 953: PPUSH
 954: CALL 12258 0 2
 958: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 959: LD_EXP 12
 963: PPUSH
 964: LD_INT 1
 966: PPUSH
 967: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 971: LD_EXP 12
 975: PPUSH
 976: LD_INT 4
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 49
// end else
 986: GO 1004
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 988: LD_INT 4
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL 1099 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1004: LD_STRING 11_Cornell
1006: PPUSH
1007: CALL_OW 28
1011: PUSH
1012: LD_INT 1
1014: EQUAL
1015: IFFALSE 1062
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1017: LD_ADDR_EXP 10
1021: PUSH
1022: LD_STRING 11_Cornell
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: CALL 12258 0 2
1032: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1033: LD_EXP 10
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1045: LD_EXP 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 0
1055: PPUSH
1056: CALL_OW 49
// end else
1060: GO 1078
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1062: LD_INT 4
1064: PPUSH
1065: LD_INT 0
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL 1099 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1078: LD_ADDR_EXP 22
1082: PUSH
1083: LD_STRING Powell
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL 12258 0 2
1093: ST_TO_ADDR
// end ;
1094: LD_VAR 0 1
1098: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1099: LD_INT 0
1101: PPUSH
1102: PPUSH
1103: PPUSH
1104: PPUSH
1105: PPUSH
// if mech = 1 then
1106: LD_VAR 0 4
1110: PUSH
1111: LD_INT 1
1113: EQUAL
1114: IFFALSE 1349
// begin if others11 > 0 then
1116: LD_EXP 14
1120: PUSH
1121: LD_INT 0
1123: GREATER
1124: IFFALSE 1289
// begin for i := 1 to others11 - 1 do
1126: LD_ADDR_VAR 0 6
1130: PUSH
1131: DOUBLE
1132: LD_INT 1
1134: DEC
1135: ST_TO_ADDR
1136: LD_EXP 14
1140: PUSH
1141: LD_INT 1
1143: MINUS
1144: PUSH
1145: FOR_TO
1146: IFFALSE 1226
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1148: LD_EXP 14
1152: PUSH
1153: LD_VAR 0 6
1157: ARRAY
1158: PPUSH
1159: LD_INT 3
1161: PPUSH
1162: CALL_OW 259
1166: PUSH
1167: LD_EXP 14
1171: PUSH
1172: LD_VAR 0 6
1176: PUSH
1177: LD_INT 1
1179: PLUS
1180: ARRAY
1181: PPUSH
1182: LD_INT 3
1184: PPUSH
1185: CALL_OW 259
1189: LESS
1190: IFFALSE 1224
// begin mecha = others11 [ i + 1 ] ;
1192: LD_ADDR_VAR 0 9
1196: PUSH
1197: LD_EXP 14
1201: PUSH
1202: LD_VAR 0 6
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1212: LD_VAR 0 9
1216: PPUSH
1217: LD_INT 3
1219: PPUSH
1220: CALL_OW 336
// end ; end ;
1224: GO 1145
1226: POP
1227: POP
// if spawnMode = 1 then
1228: LD_VAR 0 3
1232: PUSH
1233: LD_INT 1
1235: EQUAL
1236: IFFALSE 1257
// PlaceUnitArea ( mecha , area , false ) else
1238: LD_VAR 0 9
1242: PPUSH
1243: LD_VAR 0 1
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: CALL_OW 49
1255: GO 1271
// PlaceHumanInUnit ( mecha , veh ) ;
1257: LD_VAR 0 9
1261: PPUSH
1262: LD_VAR 0 2
1266: PPUSH
1267: CALL_OW 52
// others11 = others11 diff mecha ;
1271: LD_ADDR_EXP 14
1275: PUSH
1276: LD_EXP 14
1280: PUSH
1281: LD_VAR 0 9
1285: DIFF
1286: ST_TO_ADDR
// end else
1287: GO 1347
// begin hc_name =  ;
1289: LD_ADDR_OWVAR 26
1293: PUSH
1294: LD_STRING 
1296: ST_TO_ADDR
// hc_gallery =  ;
1297: LD_ADDR_OWVAR 33
1301: PUSH
1302: LD_STRING 
1304: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 7
1310: PPUSH
1311: LD_INT 9
1313: PPUSH
1314: CALL_OW 12
1318: PPUSH
1319: CALL_OW 383
// un = CreateHuman ;
1323: LD_ADDR_VAR 0 7
1327: PUSH
1328: CALL_OW 44
1332: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1333: LD_VAR 0 7
1337: PPUSH
1338: LD_VAR 0 2
1342: PPUSH
1343: CALL_OW 52
// end ; end else
1347: GO 1518
// begin if others11 > 0 then
1349: LD_EXP 14
1353: PUSH
1354: LD_INT 0
1356: GREATER
1357: IFFALSE 1430
// begin if spawnMode = 1 then
1359: LD_VAR 0 3
1363: PUSH
1364: LD_INT 1
1366: EQUAL
1367: IFFALSE 1392
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1369: LD_EXP 14
1373: PUSH
1374: LD_INT 1
1376: ARRAY
1377: PPUSH
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 49
1390: GO 1410
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1392: LD_EXP 14
1396: PUSH
1397: LD_INT 1
1399: ARRAY
1400: PPUSH
1401: LD_VAR 0 2
1405: PPUSH
1406: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1410: LD_ADDR_EXP 14
1414: PUSH
1415: LD_EXP 14
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: CALL_OW 3
1427: ST_TO_ADDR
// end else
1428: GO 1518
// begin hc_name =  ;
1430: LD_ADDR_OWVAR 26
1434: PUSH
1435: LD_STRING 
1437: ST_TO_ADDR
// hc_gallery =  ;
1438: LD_ADDR_OWVAR 33
1442: PUSH
1443: LD_STRING 
1445: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1446: LD_INT 0
1448: PPUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: LD_INT 3
1457: PUSH
1458: LD_INT 4
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: PUSH
1467: LD_INT 1
1469: PPUSH
1470: LD_INT 4
1472: PPUSH
1473: CALL_OW 12
1477: ARRAY
1478: PPUSH
1479: LD_INT 7
1481: PPUSH
1482: LD_INT 9
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: CALL_OW 380
// un = CreateHuman ;
1494: LD_ADDR_VAR 0 7
1498: PUSH
1499: CALL_OW 44
1503: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1504: LD_VAR 0 7
1508: PPUSH
1509: LD_VAR 0 2
1513: PPUSH
1514: CALL_OW 52
// end ; end ; end ;
1518: LD_VAR 0 5
1522: RET
// export function PrepareVehicles ; var veh ; begin
1523: LD_INT 0
1525: PPUSH
1526: PPUSH
// uc_side = 1 ;
1527: LD_ADDR_OWVAR 20
1531: PUSH
1532: LD_INT 1
1534: ST_TO_ADDR
// uc_nation = 1 ;
1535: LD_ADDR_OWVAR 21
1539: PUSH
1540: LD_INT 1
1542: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1543: LD_ADDR_OWVAR 37
1547: PUSH
1548: LD_INT 3
1550: ST_TO_ADDR
// vc_engine = 3 ;
1551: LD_ADDR_OWVAR 39
1555: PUSH
1556: LD_INT 3
1558: ST_TO_ADDR
// vc_control = 3 ;
1559: LD_ADDR_OWVAR 38
1563: PUSH
1564: LD_INT 3
1566: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1567: LD_ADDR_OWVAR 40
1571: PUSH
1572: LD_INT 4
1574: ST_TO_ADDR
// veh = CreateVehicle ;
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: CALL_OW 45
1584: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1585: LD_VAR 0 2
1589: PPUSH
1590: LD_INT 4
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL_OW 49
// vc_weapon = us_double_gun ;
1600: LD_ADDR_OWVAR 40
1604: PUSH
1605: LD_INT 5
1607: ST_TO_ADDR
// vc_control = 1 ;
1608: LD_ADDR_OWVAR 38
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// veh = CreateVehicle ;
1616: LD_ADDR_VAR 0 2
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1626: LD_VAR 0 2
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 49
// vc_weapon = us_light_gun ;
1641: LD_ADDR_OWVAR 40
1645: PUSH
1646: LD_INT 3
1648: ST_TO_ADDR
// vc_control = 3 ;
1649: LD_ADDR_OWVAR 38
1653: PUSH
1654: LD_INT 3
1656: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1657: LD_ADDR_OWVAR 37
1661: PUSH
1662: LD_INT 2
1664: ST_TO_ADDR
// veh = CreateVehicle ;
1665: LD_ADDR_VAR 0 2
1669: PUSH
1670: CALL_OW 45
1674: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1675: LD_VAR 0 2
1679: PPUSH
1680: LD_INT 4
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1690: LD_ADDR_OWVAR 40
1694: PUSH
1695: LD_INT 4
1697: ST_TO_ADDR
// veh = CreateVehicle ;
1698: LD_ADDR_VAR 0 2
1702: PUSH
1703: CALL_OW 45
1707: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1708: LD_VAR 0 2
1712: PPUSH
1713: LD_INT 4
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 49
// end ;
1723: LD_VAR 0 1
1727: RET
// export function PowellSupport1 ; var veh , un ; begin
1728: LD_INT 0
1730: PPUSH
1731: PPUSH
1732: PPUSH
// uc_side = 1 ;
1733: LD_ADDR_OWVAR 20
1737: PUSH
1738: LD_INT 1
1740: ST_TO_ADDR
// uc_nation = 1 ;
1741: LD_ADDR_OWVAR 21
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1749: LD_STRING 11_Brown
1751: PPUSH
1752: CALL_OW 28
1756: PUSH
1757: LD_INT 1
1759: EQUAL
1760: IFFALSE 1807
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1762: LD_ADDR_EXP 7
1766: PUSH
1767: LD_STRING 11_Brown
1769: PPUSH
1770: LD_INT 1
1772: PPUSH
1773: CALL 12258 0 2
1777: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1778: LD_EXP 7
1782: PPUSH
1783: LD_INT 2
1785: PPUSH
1786: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1790: LD_EXP 7
1794: PPUSH
1795: LD_INT 4
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 49
// end else
1805: GO 1823
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1807: LD_INT 4
1809: PPUSH
1810: LD_INT 0
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 1099 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1823: LD_STRING 11_Gary
1825: PPUSH
1826: CALL_OW 28
1830: PUSH
1831: LD_INT 1
1833: EQUAL
1834: IFFALSE 1881
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1836: LD_ADDR_EXP 11
1840: PUSH
1841: LD_STRING 11_Gary
1843: PPUSH
1844: LD_INT 1
1846: PPUSH
1847: CALL 12258 0 2
1851: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1852: LD_EXP 11
1856: PPUSH
1857: LD_INT 2
1859: PPUSH
1860: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1864: LD_EXP 11
1868: PPUSH
1869: LD_INT 4
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end else
1879: GO 1897
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1881: LD_INT 4
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL 1099 0 4
// end ; vc_chassis = us_medium_tracked ;
1897: LD_ADDR_OWVAR 37
1901: PUSH
1902: LD_INT 3
1904: ST_TO_ADDR
// vc_engine = 3 ;
1905: LD_ADDR_OWVAR 39
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_control = 1 ;
1913: LD_ADDR_OWVAR 38
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// vc_weapon = us_crane ;
1921: LD_ADDR_OWVAR 40
1925: PUSH
1926: LD_INT 13
1928: ST_TO_ADDR
// veh = CreateVehicle ;
1929: LD_ADDR_VAR 0 2
1933: PUSH
1934: CALL_OW 45
1938: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1939: LD_VAR 0 2
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1951: LD_VAR 0 2
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
1966: LD_INT 4
1968: PPUSH
1969: LD_VAR 0 2
1973: PPUSH
1974: LD_INT 2
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 1099 0 4
// vc_weapon = 9 ;
1984: LD_ADDR_OWVAR 40
1988: PUSH
1989: LD_INT 9
1991: ST_TO_ADDR
// veh = CreateVehicle ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: CALL_OW 45
2001: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2002: LD_VAR 0 2
2006: PPUSH
2007: LD_INT 4
2009: PPUSH
2010: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2014: LD_VAR 0 2
2018: PPUSH
2019: LD_INT 4
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2029: LD_INT 4
2031: PPUSH
2032: LD_VAR 0 2
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL 1099 0 4
// vc_control = 3 ;
2047: LD_ADDR_OWVAR 38
2051: PUSH
2052: LD_INT 3
2054: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2055: LD_ADDR_OWVAR 40
2059: PUSH
2060: LD_INT 12
2062: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2063: LD_ADDR_EXP 15
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2073: LD_ADDR_EXP 16
2077: PUSH
2078: CALL_OW 45
2082: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2083: LD_EXP 15
2087: PPUSH
2088: LD_INT 4
2090: PPUSH
2091: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2095: LD_EXP 16
2099: PPUSH
2100: LD_INT 4
2102: PPUSH
2103: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2107: LD_EXP 15
2111: PPUSH
2112: LD_INT 4
2114: PPUSH
2115: LD_INT 0
2117: PPUSH
2118: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2122: LD_EXP 16
2126: PPUSH
2127: LD_INT 4
2129: PPUSH
2130: LD_INT 0
2132: PPUSH
2133: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2137: LD_EXP 15
2141: PPUSH
2142: LD_INT 3
2144: PPUSH
2145: LD_INT 100
2147: PPUSH
2148: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2152: LD_EXP 16
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: LD_INT 80
2162: PPUSH
2163: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2167: LD_EXP 16
2171: PPUSH
2172: LD_INT 3
2174: PPUSH
2175: LD_INT 20
2177: PPUSH
2178: CALL_OW 291
// end ;
2182: LD_VAR 0 1
2186: RET
// export function PowellSupport2 ; var veh , un ; begin
2187: LD_INT 0
2189: PPUSH
2190: PPUSH
2191: PPUSH
// uc_side = 1 ;
2192: LD_ADDR_OWVAR 20
2196: PUSH
2197: LD_INT 1
2199: ST_TO_ADDR
// uc_nation = 1 ;
2200: LD_ADDR_OWVAR 21
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2208: LD_ADDR_OWVAR 37
2212: PUSH
2213: LD_INT 2
2215: ST_TO_ADDR
// vc_engine = 3 ;
2216: LD_ADDR_OWVAR 39
2220: PUSH
2221: LD_INT 3
2223: ST_TO_ADDR
// vc_control = 3 ;
2224: LD_ADDR_OWVAR 38
2228: PUSH
2229: LD_INT 3
2231: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 3
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// vc_control = 1 ;
2277: LD_ADDR_OWVAR 38
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2285: LD_ADDR_OWVAR 37
2289: PUSH
2290: LD_INT 2
2292: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2293: LD_ADDR_OWVAR 40
2297: PUSH
2298: LD_INT 5
2300: ST_TO_ADDR
// veh = CreateVehicle ;
2301: LD_ADDR_VAR 0 2
2305: PUSH
2306: CALL_OW 45
2310: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2311: LD_VAR 0 2
2315: PPUSH
2316: LD_INT 4
2318: PPUSH
2319: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2323: LD_VAR 0 2
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2338: LD_STRING 11_Bobby
2340: PPUSH
2341: CALL_OW 28
2345: PUSH
2346: LD_INT 1
2348: EQUAL
2349: IFFALSE 2395
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2351: LD_ADDR_EXP 4
2355: PUSH
2356: LD_STRING 11_Bobby
2358: PPUSH
2359: LD_INT 1
2361: PPUSH
2362: CALL 12258 0 2
2366: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2367: LD_EXP 4
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2379: LD_EXP 4
2383: PPUSH
2384: LD_VAR 0 2
2388: PPUSH
2389: CALL_OW 52
// end else
2393: GO 2413
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2395: LD_INT 0
2397: PPUSH
2398: LD_VAR 0 2
2402: PPUSH
2403: LD_INT 2
2405: PPUSH
2406: LD_INT 0
2408: PPUSH
2409: CALL 1099 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2413: LD_STRING 11_Houten
2415: PPUSH
2416: CALL_OW 28
2420: PUSH
2421: LD_INT 1
2423: EQUAL
2424: IFFALSE 2471
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2426: LD_ADDR_EXP 9
2430: PUSH
2431: LD_STRING 11_Houten
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: CALL 12258 0 2
2441: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2442: LD_EXP 9
2446: PPUSH
2447: LD_INT 1
2449: PPUSH
2450: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2454: LD_EXP 9
2458: PPUSH
2459: LD_INT 4
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 49
// end else
2469: GO 2487
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2471: LD_INT 4
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL 1099 0 4
// end ; vc_control = 3 ;
2487: LD_ADDR_OWVAR 38
2491: PUSH
2492: LD_INT 3
2494: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2495: LD_ADDR_OWVAR 40
2499: PUSH
2500: LD_INT 12
2502: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2503: LD_ADDR_EXP 17
2507: PUSH
2508: CALL_OW 45
2512: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2513: LD_EXP 17
2517: PPUSH
2518: LD_INT 4
2520: PPUSH
2521: CALL_OW 233
// amCargo4 = CreateVehicle ;
2525: LD_ADDR_EXP 18
2529: PUSH
2530: CALL_OW 45
2534: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2535: LD_EXP 18
2539: PPUSH
2540: LD_INT 4
2542: PPUSH
2543: CALL_OW 233
// amCargo5 = CreateVehicle ;
2547: LD_ADDR_EXP 19
2551: PUSH
2552: CALL_OW 45
2556: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2557: LD_EXP 19
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2569: LD_EXP 17
2573: PPUSH
2574: LD_INT 4
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2584: LD_EXP 18
2588: PPUSH
2589: LD_INT 4
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2599: LD_EXP 19
2603: PPUSH
2604: LD_INT 4
2606: PPUSH
2607: LD_INT 0
2609: PPUSH
2610: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2614: LD_EXP 17
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: LD_INT 100
2624: PPUSH
2625: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2629: LD_EXP 18
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 100
2639: PPUSH
2640: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2644: LD_EXP 19
2648: PPUSH
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 100
2654: PPUSH
2655: CALL_OW 291
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PowellSupport3 ; var veh , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 1 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// uc_nation = 1 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2685: LD_INT 4
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: LD_INT 1
2693: PPUSH
2694: LD_INT 0
2696: PPUSH
2697: CALL 1099 0 4
// vc_chassis = us_medium_wheeled ;
2701: LD_ADDR_OWVAR 37
2705: PUSH
2706: LD_INT 2
2708: ST_TO_ADDR
// vc_engine = 3 ;
2709: LD_ADDR_OWVAR 39
2713: PUSH
2714: LD_INT 3
2716: ST_TO_ADDR
// vc_control = 3 ;
2717: LD_ADDR_OWVAR 38
2721: PUSH
2722: LD_INT 3
2724: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2725: LD_ADDR_OWVAR 40
2729: PUSH
2730: LD_INT 12
2732: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2733: LD_ADDR_EXP 20
2737: PUSH
2738: CALL_OW 45
2742: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2743: LD_ADDR_EXP 21
2747: PUSH
2748: CALL_OW 45
2752: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2753: LD_EXP 20
2757: PPUSH
2758: LD_INT 4
2760: PPUSH
2761: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2765: LD_EXP 21
2769: PPUSH
2770: LD_INT 4
2772: PPUSH
2773: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2777: LD_EXP 20
2781: PPUSH
2782: LD_INT 4
2784: PPUSH
2785: LD_INT 0
2787: PPUSH
2788: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2792: LD_EXP 21
2796: PPUSH
2797: LD_INT 4
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2807: LD_EXP 20
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_INT 100
2817: PPUSH
2818: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2822: LD_EXP 21
2826: PPUSH
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 100
2832: PPUSH
2833: CALL_OW 291
// end ; end_of_file
2837: LD_VAR 0 1
2841: RET
// export function PrepareRussianCommander ; begin
2842: LD_INT 0
2844: PPUSH
// uc_side = 3 ;
2845: LD_ADDR_OWVAR 20
2849: PUSH
2850: LD_INT 3
2852: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2853: LD_ADDR_EXP 23
2857: PUSH
2858: LD_STRING Davidov
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL 12258 0 2
2868: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2869: LD_EXP 23
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2881: LD_ADDR_EXP 34
2885: PUSH
2886: LD_EXP 34
2890: PUSH
2891: LD_EXP 23
2895: ADD
2896: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2897: LD_EXP 34
2901: PPUSH
2902: LD_INT 4
2904: PPUSH
2905: CALL_OW 336
// end ;
2909: LD_VAR 0 1
2913: RET
// export function PrepareEastBase ; var i , un ; begin
2914: LD_INT 0
2916: PPUSH
2917: PPUSH
2918: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2919: LD_INT 3
2921: PPUSH
2922: LD_INT 3
2924: PPUSH
2925: LD_INT 121
2927: PPUSH
2928: LD_EXP 36
2932: PPUSH
2933: LD_EXP 37
2937: PPUSH
2938: CALL_OW 12
2942: PPUSH
2943: LD_INT 1
2945: PPUSH
2946: LD_INT 3
2948: PPUSH
2949: CALL 13050 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 3
2958: PPUSH
2959: LD_INT 121
2961: PPUSH
2962: LD_EXP 36
2966: PPUSH
2967: LD_EXP 37
2971: PPUSH
2972: CALL_OW 12
2976: PPUSH
2977: LD_INT 9
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: CALL 13050 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
2987: LD_INT 3
2989: PPUSH
2990: LD_INT 3
2992: PPUSH
2993: LD_INT 4
2995: PPUSH
2996: LD_EXP 36
3000: PPUSH
3001: LD_EXP 37
3005: PPUSH
3006: CALL_OW 12
3010: PPUSH
3011: LD_INT 2
3013: PPUSH
3014: LD_INT 6
3016: PPUSH
3017: CALL 13050 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3021: LD_INT 3
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 112
3029: PPUSH
3030: LD_EXP 36
3034: PPUSH
3035: LD_EXP 37
3039: PPUSH
3040: CALL_OW 12
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 6
3050: PPUSH
3051: CALL 13050 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3055: LD_INT 3
3057: PPUSH
3058: LD_INT 3
3060: PPUSH
3061: LD_INT 47
3063: PPUSH
3064: LD_EXP 36
3068: PPUSH
3069: LD_EXP 37
3073: PPUSH
3074: CALL_OW 12
3078: PPUSH
3079: LD_INT 4
3081: PPUSH
3082: LD_INT 6
3084: PPUSH
3085: CALL 13050 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 3
3094: PPUSH
3095: LD_INT 129
3097: PPUSH
3098: LD_EXP 36
3102: PPUSH
3103: LD_EXP 37
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: LD_INT 4
3115: PPUSH
3116: LD_INT 6
3118: PPUSH
3119: CALL 13050 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3123: LD_INT 3
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: LD_INT 135
3131: PPUSH
3132: LD_EXP 36
3136: PPUSH
3137: LD_EXP 37
3141: PPUSH
3142: CALL_OW 12
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: LD_INT 6
3152: PPUSH
3153: CALL 13050 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3157: LD_ADDR_VAR 0 2
3161: PUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 3
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 30
3174: PUSH
3175: LD_INT 32
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PPUSH
3186: CALL_OW 69
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3232
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 3
3199: PPUSH
3200: LD_VAR 0 2
3204: PPUSH
3205: LD_EXP 36
3209: PPUSH
3210: LD_EXP 37
3214: PPUSH
3215: CALL_OW 12
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: LD_INT 1
3225: PPUSH
3226: CALL 13050 0 6
3230: GO 3191
3232: POP
3233: POP
// for i = 1 to 5 do
3234: LD_ADDR_VAR 0 2
3238: PUSH
3239: DOUBLE
3240: LD_INT 1
3242: DEC
3243: ST_TO_ADDR
3244: LD_INT 5
3246: PUSH
3247: FOR_TO
3248: IFFALSE 3347
// begin uc_side = 3 ;
3250: LD_ADDR_OWVAR 20
3254: PUSH
3255: LD_INT 3
3257: ST_TO_ADDR
// uc_nation = 3 ;
3258: LD_ADDR_OWVAR 21
3262: PUSH
3263: LD_INT 3
3265: ST_TO_ADDR
// hc_gallery =  ;
3266: LD_ADDR_OWVAR 33
3270: PUSH
3271: LD_STRING 
3273: ST_TO_ADDR
// hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 4
3287: PPUSH
3288: LD_EXP 36
3292: PPUSH
3293: LD_EXP 37
3297: PPUSH
3298: CALL_OW 12
3302: PPUSH
3303: CALL_OW 380
// un = CreateHuman ;
3307: LD_ADDR_VAR 0 3
3311: PUSH
3312: CALL_OW 44
3316: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3317: LD_VAR 0 3
3321: PPUSH
3322: LD_INT 3
3324: PPUSH
3325: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3329: LD_ADDR_EXP 34
3333: PUSH
3334: LD_EXP 34
3338: PUSH
3339: LD_VAR 0 3
3343: ADD
3344: ST_TO_ADDR
// end ;
3345: GO 3247
3347: POP
3348: POP
// end ;
3349: LD_VAR 0 1
3353: RET
// export function PrepareWestBase ; var i , un ; begin
3354: LD_INT 0
3356: PPUSH
3357: PPUSH
3358: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 3
3364: PPUSH
3365: LD_INT 6
3367: PPUSH
3368: LD_EXP 36
3372: PPUSH
3373: LD_EXP 37
3377: PPUSH
3378: CALL_OW 12
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL 13050 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: LD_INT 91
3401: PPUSH
3402: LD_EXP 36
3406: PPUSH
3407: LD_EXP 37
3411: PPUSH
3412: CALL_OW 12
3416: PPUSH
3417: LD_INT 4
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: CALL 13050 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3427: LD_INT 3
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_INT 21
3435: PPUSH
3436: LD_EXP 36
3440: PPUSH
3441: LD_EXP 37
3445: PPUSH
3446: CALL_OW 12
3450: PPUSH
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 6
3456: PPUSH
3457: CALL 13050 0 6
// end ;
3461: LD_VAR 0 1
3465: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3466: LD_INT 0
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
// uc_side = 3 ;
3472: LD_ADDR_OWVAR 20
3476: PUSH
3477: LD_INT 3
3479: ST_TO_ADDR
// uc_nation = 3 ;
3480: LD_ADDR_OWVAR 21
3484: PUSH
3485: LD_INT 3
3487: ST_TO_ADDR
// for i = 1 to 5 do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 5
3500: PUSH
3501: FOR_TO
3502: IFFALSE 3572
// begin hc_gallery =  ;
3504: LD_ADDR_OWVAR 33
3508: PUSH
3509: LD_STRING 
3511: ST_TO_ADDR
// hc_name =  ;
3512: LD_ADDR_OWVAR 26
3516: PUSH
3517: LD_STRING 
3519: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3520: LD_INT 0
3522: PPUSH
3523: LD_INT 9
3525: PPUSH
3526: LD_EXP 36
3530: PPUSH
3531: LD_EXP 37
3535: PPUSH
3536: CALL_OW 12
3540: PPUSH
3541: CALL_OW 380
// un = CreateHuman ;
3545: LD_ADDR_VAR 0 3
3549: PUSH
3550: CALL_OW 44
3554: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3555: LD_VAR 0 3
3559: PPUSH
3560: LD_INT 8
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: CALL_OW 49
// end ;
3570: GO 3501
3572: POP
3573: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: DOUBLE
3580: LD_INT 1
3582: DEC
3583: ST_TO_ADDR
3584: LD_INT 2
3586: PUSH
3587: LD_INT 3
3589: PUSH
3590: LD_INT 4
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: PUSH
3598: LD_OWVAR 67
3602: ARRAY
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3675
// begin hc_gallery =  ;
3607: LD_ADDR_OWVAR 33
3611: PUSH
3612: LD_STRING 
3614: ST_TO_ADDR
// hc_name =  ;
3615: LD_ADDR_OWVAR 26
3619: PUSH
3620: LD_STRING 
3622: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3623: LD_INT 0
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: LD_EXP 36
3633: PPUSH
3634: LD_EXP 37
3638: PPUSH
3639: CALL_OW 12
3643: PPUSH
3644: CALL_OW 380
// un = CreateHuman ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: CALL_OW 44
3657: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3658: LD_VAR 0 3
3662: PPUSH
3663: LD_INT 8
3665: PPUSH
3666: LD_INT 0
3668: PPUSH
3669: CALL_OW 49
// end ;
3673: GO 3604
3675: POP
3676: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3677: LD_ADDR_VAR 0 2
3681: PUSH
3682: DOUBLE
3683: LD_INT 1
3685: DEC
3686: ST_TO_ADDR
3687: LD_INT 3
3689: PUSH
3690: LD_INT 4
3692: PUSH
3693: LD_INT 5
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: LD_OWVAR 67
3705: ARRAY
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3904
// begin vc_engine = 3 ;
3710: LD_ADDR_OWVAR 39
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// vc_control = 1 ;
3718: LD_ADDR_OWVAR 38
3722: PUSH
3723: LD_INT 1
3725: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3726: LD_ADDR_OWVAR 40
3730: PUSH
3731: LD_INT 42
3733: PUSH
3734: LD_INT 43
3736: PUSH
3737: LD_INT 44
3739: PUSH
3740: LD_INT 45
3742: PUSH
3743: LD_INT 46
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 5
3758: PPUSH
3759: CALL_OW 12
3763: ARRAY
3764: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3765: LD_OWVAR 40
3769: PUSH
3770: LD_INT 46
3772: EQUAL
3773: IFFALSE 3785
// vc_chassis = ru_heavy_tracked else
3775: LD_ADDR_OWVAR 37
3779: PUSH
3780: LD_INT 24
3782: ST_TO_ADDR
3783: GO 3812
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3785: LD_ADDR_OWVAR 37
3789: PUSH
3790: LD_INT 22
3792: PUSH
3793: LD_INT 21
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 1
3802: PPUSH
3803: LD_INT 2
3805: PPUSH
3806: CALL_OW 12
3810: ARRAY
3811: ST_TO_ADDR
// veh = CreateVehicle ;
3812: LD_ADDR_VAR 0 4
3816: PUSH
3817: CALL_OW 45
3821: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3822: LD_VAR 0 4
3826: PPUSH
3827: LD_INT 3
3829: PPUSH
3830: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3834: LD_VAR 0 4
3838: PPUSH
3839: LD_INT 5
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: CALL_OW 49
// hc_gallery =  ;
3849: LD_ADDR_OWVAR 33
3853: PUSH
3854: LD_STRING 
3856: ST_TO_ADDR
// hc_name =  ;
3857: LD_ADDR_OWVAR 26
3861: PUSH
3862: LD_STRING 
3864: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3865: LD_INT 0
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: LD_INT 10
3873: PPUSH
3874: CALL_OW 380
// un = CreateHuman ;
3878: LD_ADDR_VAR 0 3
3882: PUSH
3883: CALL_OW 44
3887: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3888: LD_VAR 0 3
3892: PPUSH
3893: LD_VAR 0 4
3897: PPUSH
3898: CALL_OW 52
// end ;
3902: GO 3707
3904: POP
3905: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: DOUBLE
3912: LD_INT 1
3914: DEC
3915: ST_TO_ADDR
3916: LD_INT 3
3918: PUSH
3919: LD_INT 4
3921: PUSH
3922: LD_INT 5
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_OWVAR 67
3934: ARRAY
3935: PUSH
3936: FOR_TO
3937: IFFALSE 4084
// begin vc_engine = 3 ;
3939: LD_ADDR_OWVAR 39
3943: PUSH
3944: LD_INT 3
3946: ST_TO_ADDR
// vc_control = 3 ;
3947: LD_ADDR_OWVAR 38
3951: PUSH
3952: LD_INT 3
3954: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3955: LD_ADDR_OWVAR 40
3959: PUSH
3960: LD_INT 42
3962: PUSH
3963: LD_INT 43
3965: PUSH
3966: LD_INT 44
3968: PUSH
3969: LD_INT 45
3971: PUSH
3972: LD_INT 46
3974: PUSH
3975: LD_INT 49
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 1
3988: PPUSH
3989: LD_INT 5
3991: PPUSH
3992: CALL_OW 12
3996: ARRAY
3997: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3998: LD_OWVAR 40
4002: PUSH
4003: LD_INT 46
4005: EQUAL
4006: IFFALSE 4018
// vc_chassis = ru_heavy_tracked else
4008: LD_ADDR_OWVAR 37
4012: PUSH
4013: LD_INT 24
4015: ST_TO_ADDR
4016: GO 4045
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4018: LD_ADDR_OWVAR 37
4022: PUSH
4023: LD_INT 22
4025: PUSH
4026: LD_INT 21
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 12
4043: ARRAY
4044: ST_TO_ADDR
// veh = CreateVehicle ;
4045: LD_ADDR_VAR 0 4
4049: PUSH
4050: CALL_OW 45
4054: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4055: LD_VAR 0 4
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4067: LD_VAR 0 4
4071: PPUSH
4072: LD_INT 6
4074: PPUSH
4075: LD_INT 0
4077: PPUSH
4078: CALL_OW 49
// end ;
4082: GO 3936
4084: POP
4085: POP
// end ; end_of_file
4086: LD_VAR 0 1
4090: RET
// export function PrepareKurt ; begin
4091: LD_INT 0
4093: PPUSH
// uc_side = 8 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 8
4101: ST_TO_ADDR
// uc_nation = 2 ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4110: LD_ADDR_OWVAR 37
4114: PUSH
4115: LD_INT 13
4117: ST_TO_ADDR
// vc_engine = 1 ;
4118: LD_ADDR_OWVAR 39
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// vc_control = 1 ;
4126: LD_ADDR_OWVAR 38
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// vc_weapon = 24 ;
4134: LD_ADDR_OWVAR 40
4138: PUSH
4139: LD_INT 24
4141: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4142: LD_ADDR_EXP 26
4146: PUSH
4147: CALL_OW 45
4151: ST_TO_ADDR
// if kurtStatus > 0 then
4152: LD_EXP 27
4156: PUSH
4157: LD_INT 0
4159: GREATER
4160: IFFALSE 4209
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4162: LD_ADDR_EXP 24
4166: PUSH
4167: LD_STRING Kurt
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL 12258 0 2
4177: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4178: LD_EXP 26
4182: PPUSH
4183: LD_INT 4
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4193: LD_EXP 24
4197: PPUSH
4198: LD_EXP 26
4202: PPUSH
4203: CALL_OW 52
// end else
4207: GO 4270
// begin hc_name =  ;
4209: LD_ADDR_OWVAR 26
4213: PUSH
4214: LD_STRING 
4216: ST_TO_ADDR
// hc_gallery =  ;
4217: LD_ADDR_OWVAR 33
4221: PUSH
4222: LD_STRING 
4224: ST_TO_ADDR
// otherKurt = PrepareSoldier ( sex_male , 10 ) ;
4225: LD_ADDR_EXP 25
4229: PUSH
4230: LD_INT 1
4232: PPUSH
4233: LD_INT 10
4235: PPUSH
4236: CALL_OW 381
4240: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4241: LD_EXP 26
4245: PPUSH
4246: LD_INT 4
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4256: LD_EXP 25
4260: PPUSH
4261: LD_EXP 26
4265: PPUSH
4266: CALL_OW 52
// end ; end ;
4270: LD_VAR 0 1
4274: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4275: LD_INT 0
4277: PPUSH
4278: PPUSH
4279: PPUSH
4280: PPUSH
// for i = 1 to 3 do
4281: LD_ADDR_VAR 0 2
4285: PUSH
4286: DOUBLE
4287: LD_INT 1
4289: DEC
4290: ST_TO_ADDR
4291: LD_INT 3
4293: PUSH
4294: FOR_TO
4295: IFFALSE 4432
// begin uc_side = 1 ;
4297: LD_ADDR_OWVAR 20
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// uc_nation = 2 ;
4305: LD_ADDR_OWVAR 21
4309: PUSH
4310: LD_INT 2
4312: ST_TO_ADDR
// hc_gallery =  ;
4313: LD_ADDR_OWVAR 33
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// hc_name =  ;
4321: LD_ADDR_OWVAR 26
4325: PUSH
4326: LD_STRING 
4328: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4329: LD_EXP 27
4333: PUSH
4334: LD_INT 0
4336: EQUAL
4337: PUSH
4338: LD_EXP 27
4342: PUSH
4343: LD_INT 2
4345: EQUAL
4346: OR
4347: IFFALSE 4372
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4349: LD_INT 0
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: LD_INT 2
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: CALL_OW 12
4365: PPUSH
4366: CALL_OW 380
4370: GO 4393
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4372: LD_INT 0
4374: PPUSH
4375: LD_INT 1
4377: PPUSH
4378: LD_INT 6
4380: PPUSH
4381: LD_INT 8
4383: PPUSH
4384: CALL_OW 12
4388: PPUSH
4389: CALL_OW 380
// un = CreateHuman ;
4393: LD_ADDR_VAR 0 3
4397: PUSH
4398: CALL_OW 44
4402: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4403: LD_VAR 0 3
4407: PPUSH
4408: LD_INT 4
4410: PPUSH
4411: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4415: LD_VAR 0 3
4419: PPUSH
4420: LD_INT 4
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 49
// end ;
4430: GO 4294
4432: POP
4433: POP
// vc_chassis = 14 ;
4434: LD_ADDR_OWVAR 37
4438: PUSH
4439: LD_INT 14
4441: ST_TO_ADDR
// vc_engine = 3 ;
4442: LD_ADDR_OWVAR 39
4446: PUSH
4447: LD_INT 3
4449: ST_TO_ADDR
// vc_control = 1 ;
4450: LD_ADDR_OWVAR 38
4454: PUSH
4455: LD_INT 1
4457: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4458: LD_ADDR_OWVAR 40
4462: PUSH
4463: LD_INT 27
4465: PUSH
4466: LD_INT 26
4468: PUSH
4469: LD_INT 28
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 1
4479: PPUSH
4480: LD_INT 3
4482: PPUSH
4483: CALL_OW 12
4487: ARRAY
4488: ST_TO_ADDR
// veh = CreateVehicle ;
4489: LD_ADDR_VAR 0 4
4493: PUSH
4494: CALL_OW 45
4498: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4499: LD_VAR 0 4
4503: PPUSH
4504: LD_INT 4
4506: PPUSH
4507: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4511: LD_VAR 0 4
4515: PPUSH
4516: LD_INT 4
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4526: LD_EXP 27
4530: PUSH
4531: LD_INT 0
4533: EQUAL
4534: PUSH
4535: LD_EXP 27
4539: PUSH
4540: LD_INT 2
4542: EQUAL
4543: OR
4544: IFFALSE 4569
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 3
4551: PPUSH
4552: LD_INT 2
4554: PPUSH
4555: LD_INT 4
4557: PPUSH
4558: CALL_OW 12
4562: PPUSH
4563: CALL_OW 380
4567: GO 4590
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4569: LD_INT 0
4571: PPUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 6
4577: PPUSH
4578: LD_INT 8
4580: PPUSH
4581: CALL_OW 12
4585: PPUSH
4586: CALL_OW 380
// un = CreateHuman ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: CALL_OW 44
4599: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4600: LD_VAR 0 3
4604: PPUSH
4605: LD_VAR 0 4
4609: PPUSH
4610: CALL_OW 52
// vc_chassis = 14 ;
4614: LD_ADDR_OWVAR 37
4618: PUSH
4619: LD_INT 14
4621: ST_TO_ADDR
// vc_engine = 3 ;
4622: LD_ADDR_OWVAR 39
4626: PUSH
4627: LD_INT 3
4629: ST_TO_ADDR
// vc_control = 1 ;
4630: LD_ADDR_OWVAR 38
4634: PUSH
4635: LD_INT 1
4637: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4638: LD_ADDR_OWVAR 40
4642: PUSH
4643: LD_INT 27
4645: PUSH
4646: LD_INT 26
4648: PUSH
4649: LD_INT 28
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 1
4659: PPUSH
4660: LD_INT 3
4662: PPUSH
4663: CALL_OW 12
4667: ARRAY
4668: ST_TO_ADDR
// veh = CreateVehicle ;
4669: LD_ADDR_VAR 0 4
4673: PUSH
4674: CALL_OW 45
4678: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4679: LD_VAR 0 4
4683: PPUSH
4684: LD_INT 4
4686: PPUSH
4687: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4691: LD_VAR 0 4
4695: PPUSH
4696: LD_INT 4
4698: PPUSH
4699: LD_INT 0
4701: PPUSH
4702: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4706: LD_EXP 27
4710: PUSH
4711: LD_INT 0
4713: EQUAL
4714: PUSH
4715: LD_EXP 27
4719: PUSH
4720: LD_INT 2
4722: EQUAL
4723: OR
4724: IFFALSE 4749
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4726: LD_INT 0
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: LD_INT 2
4734: PPUSH
4735: LD_INT 4
4737: PPUSH
4738: CALL_OW 12
4742: PPUSH
4743: CALL_OW 380
4747: GO 4770
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4749: LD_INT 0
4751: PPUSH
4752: LD_INT 4
4754: PPUSH
4755: LD_INT 6
4757: PPUSH
4758: LD_INT 8
4760: PPUSH
4761: CALL_OW 12
4765: PPUSH
4766: CALL_OW 380
// un = CreateHuman ;
4770: LD_ADDR_VAR 0 3
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4780: LD_VAR 0 3
4784: PPUSH
4785: LD_INT 4
4787: PPUSH
4788: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4792: LD_VAR 0 3
4796: PPUSH
4797: LD_VAR 0 4
4801: PPUSH
4802: CALL_OW 52
// vc_chassis = 14 ;
4806: LD_ADDR_OWVAR 37
4810: PUSH
4811: LD_INT 14
4813: ST_TO_ADDR
// vc_engine = 3 ;
4814: LD_ADDR_OWVAR 39
4818: PUSH
4819: LD_INT 3
4821: ST_TO_ADDR
// vc_control = 1 ;
4822: LD_ADDR_OWVAR 38
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4830: LD_ADDR_OWVAR 40
4834: PUSH
4835: LD_INT 27
4837: PUSH
4838: LD_INT 26
4840: PUSH
4841: LD_INT 28
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 1
4851: PPUSH
4852: LD_INT 3
4854: PPUSH
4855: CALL_OW 12
4859: ARRAY
4860: ST_TO_ADDR
// veh = CreateVehicle ;
4861: LD_ADDR_VAR 0 4
4865: PUSH
4866: CALL_OW 45
4870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4871: LD_VAR 0 4
4875: PPUSH
4876: LD_INT 4
4878: PPUSH
4879: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4883: LD_VAR 0 4
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: LD_INT 0
4893: PPUSH
4894: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4898: LD_EXP 27
4902: PUSH
4903: LD_INT 0
4905: EQUAL
4906: PUSH
4907: LD_EXP 27
4911: PUSH
4912: LD_INT 2
4914: EQUAL
4915: OR
4916: IFFALSE 4941
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4918: LD_INT 0
4920: PPUSH
4921: LD_INT 2
4923: PPUSH
4924: LD_INT 2
4926: PPUSH
4927: LD_INT 4
4929: PPUSH
4930: CALL_OW 12
4934: PPUSH
4935: CALL_OW 380
4939: GO 4962
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4941: LD_INT 0
4943: PPUSH
4944: LD_INT 2
4946: PPUSH
4947: LD_INT 6
4949: PPUSH
4950: LD_INT 8
4952: PPUSH
4953: CALL_OW 12
4957: PPUSH
4958: CALL_OW 380
// un = CreateHuman ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: CALL_OW 44
4971: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4972: LD_VAR 0 3
4976: PPUSH
4977: LD_INT 4
4979: PPUSH
4980: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4984: LD_VAR 0 3
4988: PPUSH
4989: LD_VAR 0 4
4993: PPUSH
4994: CALL_OW 52
// end ;
4998: LD_VAR 0 1
5002: RET
// export function PrepareAttackLegion ; var i , un ; begin
5003: LD_INT 0
5005: PPUSH
5006: PPUSH
5007: PPUSH
// for i = 1 to 4 do
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: DOUBLE
5014: LD_INT 1
5016: DEC
5017: ST_TO_ADDR
5018: LD_INT 4
5020: PUSH
5021: FOR_TO
5022: IFFALSE 5123
// begin uc_side = 1 ;
5024: LD_ADDR_OWVAR 20
5028: PUSH
5029: LD_INT 1
5031: ST_TO_ADDR
// uc_nation = 2 ;
5032: LD_ADDR_OWVAR 21
5036: PUSH
5037: LD_INT 2
5039: ST_TO_ADDR
// hc_gallery =  ;
5040: LD_ADDR_OWVAR 33
5044: PUSH
5045: LD_STRING 
5047: ST_TO_ADDR
// hc_name =  ;
5048: LD_ADDR_OWVAR 26
5052: PUSH
5053: LD_STRING 
5055: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5056: LD_INT 0
5058: PPUSH
5059: LD_INT 1
5061: PUSH
5062: LD_INT 8
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_INT 2
5074: PPUSH
5075: CALL_OW 12
5079: ARRAY
5080: PPUSH
5081: LD_INT 6
5083: PPUSH
5084: LD_INT 8
5086: PPUSH
5087: CALL_OW 12
5091: PPUSH
5092: CALL_OW 380
// un = CreateHuman ;
5096: LD_ADDR_VAR 0 3
5100: PUSH
5101: CALL_OW 44
5105: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5106: LD_VAR 0 3
5110: PPUSH
5111: LD_INT 19
5113: PPUSH
5114: LD_INT 0
5116: PPUSH
5117: CALL_OW 49
// end ;
5121: GO 5021
5123: POP
5124: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5125: LD_INT 1
5127: PPUSH
5128: LD_INT 8
5130: PPUSH
5131: LD_INT 2
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5141: LD_INT 20
5143: PPUSH
5144: LD_INT 3
5146: PPUSH
5147: CALL 15174 0 2
// end ; end_of_file
5151: LD_VAR 0 1
5155: RET
// every 1 do var i ;
5156: GO 5158
5158: DISABLE
5159: LD_INT 0
5161: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5162: LD_INT 10
5164: PPUSH
5165: LD_INT 122
5167: PPUSH
5168: LD_INT 145
5170: PPUSH
5171: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5175: LD_INT 137
5177: PPUSH
5178: LD_INT 84
5180: PPUSH
5181: LD_INT 61
5183: PPUSH
5184: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5188: LD_EXP 1
5192: PPUSH
5193: CALL_OW 310
5197: PPUSH
5198: CALL_OW 87
// InGameOn ;
5202: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5206: LD_INT 22
5208: PUSH
5209: LD_INT 1
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PPUSH
5216: CALL_OW 69
5220: PPUSH
5221: LD_INT 130
5223: PPUSH
5224: LD_INT 103
5226: PPUSH
5227: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5231: LD_VAR 0 1
5235: PPUSH
5236: LD_INT 114
5238: PPUSH
5239: LD_INT 102
5241: PPUSH
5242: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5246: LD_EXP 1
5250: PPUSH
5251: LD_STRING D1-JMM-1
5253: PPUSH
5254: CALL_OW 88
// if IsOk ( Donaldson ) then
5258: LD_EXP 3
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5305
// begin Say ( Donaldson , D1-Don-1 ) ;
5269: LD_EXP 3
5273: PPUSH
5274: LD_STRING D1-Don-1
5276: PPUSH
5277: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5281: LD_EXP 1
5285: PPUSH
5286: LD_STRING D1-JMM-2
5288: PPUSH
5289: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5293: LD_EXP 3
5297: PPUSH
5298: LD_STRING D1-Don-2
5300: PPUSH
5301: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5305: LD_INT 22
5307: PUSH
5308: LD_INT 1
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PPUSH
5315: CALL_OW 69
5319: PPUSH
5320: LD_INT 110
5322: PPUSH
5323: LD_INT 101
5325: PPUSH
5326: CALL_OW 171
// end ;
5330: PPOPN 1
5332: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5333: LD_INT 1
5335: PPUSH
5336: LD_INT 102
5338: PPUSH
5339: LD_INT 94
5341: PPUSH
5342: CALL_OW 293
5346: IFFALSE 5521
5348: GO 5350
5350: DISABLE
5351: LD_INT 0
5353: PPUSH
// begin CenterOnXY ( 95 , 84 ) ;
5354: LD_INT 95
5356: PPUSH
5357: LD_INT 84
5359: PPUSH
5360: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
5364: LD_INT 22
5366: PUSH
5367: LD_INT 1
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 26
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PUSH
5384: LD_INT 2
5386: PUSH
5387: LD_INT 25
5389: PUSH
5390: LD_INT 1
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: LD_INT 25
5399: PUSH
5400: LD_INT 2
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 25
5409: PUSH
5410: LD_INT 3
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 25
5419: PUSH
5420: LD_INT 4
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: PUSH
5439: LD_EXP 1
5443: DIFF
5444: PPUSH
5445: CALL_OW 69
5449: PPUSH
5450: LD_STRING D1-Sol1-2
5452: PPUSH
5453: LD_STRING 
5455: PPUSH
5456: CALL 12366 0 3
// Say ( JMM , D1-JMM-3 ) ;
5460: LD_EXP 1
5464: PPUSH
5465: LD_STRING D1-JMM-3
5467: PPUSH
5468: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5472: LD_STRING M1
5474: PPUSH
5475: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5479: LD_ADDR_VAR 0 1
5483: PUSH
5484: LD_INT 22
5486: PUSH
5487: LD_INT 1
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: PUSH
5499: FOR_IN
5500: IFFALSE 5519
// ComMoveXY ( i , 95 , 84 ) ;
5502: LD_VAR 0 1
5506: PPUSH
5507: LD_INT 95
5509: PPUSH
5510: LD_INT 84
5512: PPUSH
5513: CALL_OW 111
5517: GO 5499
5519: POP
5520: POP
// end ;
5521: PPOPN 1
5523: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5524: GO 5526
5526: DISABLE
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5533: LD_ADDR_VAR 0 2
5537: PUSH
5538: LD_INT 8
5540: PPUSH
5541: LD_INT 22
5543: PUSH
5544: LD_INT 3
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 25
5553: PUSH
5554: LD_INT 9
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 22
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: PPUSH
5588: CALL_OW 69
5592: ST_TO_ADDR
// enable ;
5593: ENABLE
// for i in your_units do
5594: LD_ADDR_VAR 0 1
5598: PUSH
5599: LD_VAR 0 3
5603: PUSH
5604: FOR_IN
5605: IFFALSE 6240
// begin if See ( 3 , i ) then
5607: LD_INT 3
5609: PPUSH
5610: LD_VAR 0 1
5614: PPUSH
5615: CALL_OW 292
5619: IFFALSE 6238
// begin disable ;
5621: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5622: LD_VAR 0 2
5626: PPUSH
5627: LD_INT 96
5629: PPUSH
5630: LD_INT 85
5632: PPUSH
5633: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_INT 96
5644: PPUSH
5645: LD_INT 85
5647: PPUSH
5648: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5652: LD_VAR 0 2
5656: PPUSH
5657: LD_INT 96
5659: PPUSH
5660: LD_INT 85
5662: PPUSH
5663: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5667: LD_VAR 0 2
5671: PPUSH
5672: LD_INT 96
5674: PPUSH
5675: LD_INT 85
5677: PPUSH
5678: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5682: LD_VAR 0 2
5686: PPUSH
5687: LD_INT 96
5689: PPUSH
5690: LD_INT 85
5692: PPUSH
5693: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_INT 96
5704: PPUSH
5705: LD_INT 85
5707: PPUSH
5708: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5712: LD_EXP 1
5716: PPUSH
5717: LD_STRING D1a-JMM-1
5719: PPUSH
5720: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5724: LD_EXP 3
5728: PPUSH
5729: LD_STRING D1a-Don-1
5731: PPUSH
5732: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5736: LD_ADDR_VAR 0 1
5740: PUSH
5741: LD_INT 22
5743: PUSH
5744: LD_INT 1
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: PPUSH
5751: CALL_OW 69
5755: PUSH
5756: FOR_IN
5757: IFFALSE 5776
// ComMoveXY ( i , 109 , 102 ) ;
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 109
5766: PPUSH
5767: LD_INT 102
5769: PPUSH
5770: CALL_OW 111
5774: GO 5756
5776: POP
5777: POP
// Say ( JMM , D1a-JMM-2 ) ;
5778: LD_EXP 1
5782: PPUSH
5783: LD_STRING D1a-JMM-2
5785: PPUSH
5786: CALL_OW 88
// wait ( 0 0$10 ) ;
5790: LD_INT 350
5792: PPUSH
5793: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5797: LD_EXP 1
5801: PPUSH
5802: CALL_OW 310
5806: PPUSH
5807: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5811: LD_EXP 3
5815: PPUSH
5816: LD_STRING D1b-Don-1
5818: PPUSH
5819: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5823: LD_EXP 1
5827: PPUSH
5828: LD_STRING D1b-JMM-1
5830: PPUSH
5831: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5835: LD_INT 22
5837: PUSH
5838: LD_INT 1
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 26
5847: PUSH
5848: LD_INT 1
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: LD_INT 2
5857: PUSH
5858: LD_INT 25
5860: PUSH
5861: LD_INT 1
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: LD_INT 25
5870: PUSH
5871: LD_INT 2
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PUSH
5878: LD_INT 25
5880: PUSH
5881: LD_INT 3
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 25
5890: PUSH
5891: LD_INT 4
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: LIST
5909: PUSH
5910: LD_EXP 1
5914: PUSH
5915: EMPTY
5916: LIST
5917: DIFF
5918: PPUSH
5919: CALL_OW 69
5923: PPUSH
5924: LD_STRING D1b-Sol1-1
5926: PPUSH
5927: LD_STRING 
5929: PPUSH
5930: CALL 12366 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5934: LD_EXP 3
5938: PPUSH
5939: LD_STRING D1b-Don-2
5941: PPUSH
5942: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5946: LD_EXP 1
5950: PPUSH
5951: LD_STRING D1b-JMM-2
5953: PPUSH
5954: CALL_OW 88
// dec = ShowQuery1 ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: CALL 12902 0 0
5967: ST_TO_ADDR
// if dec = 1 then
5968: LD_VAR 0 4
5972: PUSH
5973: LD_INT 1
5975: EQUAL
5976: IFFALSE 6082
// begin Say ( JMM , D2-JMM-1 ) ;
5978: LD_EXP 1
5982: PPUSH
5983: LD_STRING D2-JMM-1
5985: PPUSH
5986: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5990: LD_EXP 22
5994: PPUSH
5995: LD_STRING D2-Pow-1
5997: PPUSH
5998: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6002: LD_EXP 1
6006: PPUSH
6007: LD_STRING D2a-JMM-1
6009: PPUSH
6010: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6014: LD_EXP 22
6018: PPUSH
6019: LD_STRING D2a-Pow-1
6021: PPUSH
6022: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6026: LD_EXP 1
6030: PPUSH
6031: LD_STRING D2a-JMM-2
6033: PPUSH
6034: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6038: LD_EXP 22
6042: PPUSH
6043: LD_STRING D2a-Pow-2
6045: PPUSH
6046: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6050: LD_EXP 1
6054: PPUSH
6055: LD_STRING D2a-JMM-3
6057: PPUSH
6058: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6062: LD_EXP 22
6066: PPUSH
6067: LD_STRING D2a-Pow-3
6069: PPUSH
6070: CALL_OW 94
// secondPass = 2 ;
6074: LD_ADDR_EXP 28
6078: PUSH
6079: LD_INT 2
6081: ST_TO_ADDR
// end ; if dec = 2 then
6082: LD_VAR 0 4
6086: PUSH
6087: LD_INT 2
6089: EQUAL
6090: IFFALSE 6184
// begin Say ( JMM , D2-JMM-1 ) ;
6092: LD_EXP 1
6096: PPUSH
6097: LD_STRING D2-JMM-1
6099: PPUSH
6100: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6104: LD_EXP 22
6108: PPUSH
6109: LD_STRING D2-Pow-1
6111: PPUSH
6112: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6116: LD_EXP 1
6120: PPUSH
6121: LD_STRING D2b-JMM-1
6123: PPUSH
6124: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6128: LD_EXP 22
6132: PPUSH
6133: LD_STRING D2b-Pow-1
6135: PPUSH
6136: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6140: LD_EXP 1
6144: PPUSH
6145: LD_STRING D2c-JMM-1
6147: PPUSH
6148: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6152: LD_EXP 22
6156: PPUSH
6157: LD_STRING D2c-Pow-1
6159: PPUSH
6160: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D2c-JMM-2
6171: PPUSH
6172: CALL_OW 88
// secondPass = 2 ;
6176: LD_ADDR_EXP 28
6180: PUSH
6181: LD_INT 2
6183: ST_TO_ADDR
// end ; if dec = 3 then
6184: LD_VAR 0 4
6188: PUSH
6189: LD_INT 3
6191: EQUAL
6192: IFFALSE 6202
// secondPass = 1 ;
6194: LD_ADDR_EXP 28
6198: PUSH
6199: LD_INT 1
6201: ST_TO_ADDR
// InGameOff ;
6202: CALL_OW 9
// ruAI = 1 ;
6206: LD_ADDR_EXP 41
6210: PUSH
6211: LD_INT 1
6213: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6214: LD_INT 1
6216: PPUSH
6217: LD_INT 3
6219: PPUSH
6220: LD_INT 2
6222: PPUSH
6223: LD_INT 1
6225: PPUSH
6226: CALL_OW 80
// SaveForQuickRestart ;
6230: CALL_OW 22
// exit ;
6234: POP
6235: POP
6236: GO 6242
// end ; end ;
6238: GO 5604
6240: POP
6241: POP
// end ;
6242: PPOPN 4
6244: END
// every 1 1$0 trigger secondPass = 2 do
6245: LD_EXP 28
6249: PUSH
6250: LD_INT 2
6252: EQUAL
6253: IFFALSE 6380
6255: GO 6257
6257: DISABLE
// begin PowellSupport1 ;
6258: CALL 1728 0 0
// DialogueOn ;
6262: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6266: LD_EXP 1
6270: PPUSH
6271: LD_STRING DC1-JMM-1
6273: PPUSH
6274: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6278: LD_EXP 22
6282: PPUSH
6283: LD_STRING DC1-Pow-1
6285: PPUSH
6286: CALL_OW 94
// DialogueOff ;
6290: CALL_OW 7
// wait ( 3 3$0 ) ;
6294: LD_INT 6300
6296: PPUSH
6297: CALL_OW 67
// PowellSupport2 ;
6301: CALL 2187 0 0
// DialogueOn ;
6305: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6309: LD_EXP 1
6313: PPUSH
6314: LD_STRING DC2-JMM-1
6316: PPUSH
6317: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6321: LD_EXP 22
6325: PPUSH
6326: LD_STRING DC2-Pow-1
6328: PPUSH
6329: CALL_OW 94
// DialogueOff ;
6333: CALL_OW 7
// wait ( 6 6$0 ) ;
6337: LD_INT 12600
6339: PPUSH
6340: CALL_OW 67
// PowellSupport3 ;
6344: CALL 2664 0 0
// DialogueOn ;
6348: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6352: LD_EXP 22
6356: PPUSH
6357: LD_STRING DC3-Pow-1
6359: PPUSH
6360: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6364: LD_EXP 1
6368: PPUSH
6369: LD_STRING DC3-JMM-1
6371: PPUSH
6372: CALL_OW 88
// DialogueOff ;
6376: CALL_OW 7
// end ;
6380: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6381: LD_EXP 28
6385: PUSH
6386: LD_INT 2
6388: EQUAL
6389: PUSH
6390: LD_INT 22
6392: PUSH
6393: LD_INT 1
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: LD_INT 30
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 30
6415: PUSH
6416: LD_INT 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PPUSH
6432: CALL_OW 69
6436: PUSH
6437: LD_INT 0
6439: GREATER
6440: AND
6441: IFFALSE 9831
6443: GO 6445
6445: DISABLE
6446: LD_INT 0
6448: PPUSH
6449: PPUSH
6450: PPUSH
6451: PPUSH
6452: PPUSH
6453: PPUSH
6454: PPUSH
6455: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6456: LD_ADDR_VAR 0 4
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 21
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 2
6483: PUSH
6484: LD_INT 30
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 30
6496: PUSH
6497: LD_INT 1
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PPUSH
6514: CALL_OW 69
6518: ST_TO_ADDR
// for i in tmp do
6519: LD_ADDR_VAR 0 1
6523: PUSH
6524: LD_VAR 0 4
6528: PUSH
6529: FOR_IN
6530: IFFALSE 6563
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6532: LD_ADDR_VAR 0 6
6536: PUSH
6537: LD_VAR 0 6
6541: PUSH
6542: LD_VAR 0 1
6546: PPUSH
6547: CALL_OW 274
6551: PPUSH
6552: LD_INT 1
6554: PPUSH
6555: CALL_OW 275
6559: PLUS
6560: ST_TO_ADDR
6561: GO 6529
6563: POP
6564: POP
// for i in tmp do
6565: LD_ADDR_VAR 0 1
6569: PUSH
6570: LD_VAR 0 4
6574: PUSH
6575: FOR_IN
6576: IFFALSE 6609
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6578: LD_ADDR_VAR 0 7
6582: PUSH
6583: LD_VAR 0 7
6587: PUSH
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 274
6597: PPUSH
6598: LD_INT 2
6600: PPUSH
6601: CALL_OW 275
6605: PLUS
6606: ST_TO_ADDR
6607: GO 6575
6609: POP
6610: POP
// for i in tmp do
6611: LD_ADDR_VAR 0 1
6615: PUSH
6616: LD_VAR 0 4
6620: PUSH
6621: FOR_IN
6622: IFFALSE 6655
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6624: LD_ADDR_VAR 0 8
6628: PUSH
6629: LD_VAR 0 8
6633: PUSH
6634: LD_VAR 0 1
6638: PPUSH
6639: CALL_OW 274
6643: PPUSH
6644: LD_INT 3
6646: PPUSH
6647: CALL_OW 275
6651: PLUS
6652: ST_TO_ADDR
6653: GO 6621
6655: POP
6656: POP
// PrepareKurt ;
6657: CALL 4091 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6661: LD_EXP 26
6665: PPUSH
6666: LD_INT 144
6668: PPUSH
6669: LD_INT 111
6671: PPUSH
6672: CALL_OW 111
// wait ( 0 0$2 ) ;
6676: LD_INT 70
6678: PPUSH
6679: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6683: LD_INT 8
6685: PPUSH
6686: LD_INT 1
6688: PPUSH
6689: CALL_OW 343
// if kurtStatus > 0 then
6693: LD_EXP 27
6697: PUSH
6698: LD_INT 0
6700: GREATER
6701: IFFALSE 8263
// begin ComExitVehicle ( Kurt ) ;
6703: LD_EXP 24
6707: PPUSH
6708: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6712: LD_EXP 24
6716: PPUSH
6717: CALL_OW 87
// wait ( 0 0$1 ) ;
6721: LD_INT 35
6723: PPUSH
6724: CALL_OW 67
// DialogueOn ;
6728: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
6732: LD_INT 22
6734: PUSH
6735: LD_INT 1
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 26
6744: PUSH
6745: LD_INT 1
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: LD_INT 2
6754: PUSH
6755: LD_INT 25
6757: PUSH
6758: LD_INT 1
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 25
6767: PUSH
6768: LD_INT 2
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 25
6777: PUSH
6778: LD_INT 3
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: LD_INT 25
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: LD_EXP 1
6811: PUSH
6812: EMPTY
6813: LIST
6814: DIFF
6815: PPUSH
6816: CALL_OW 69
6820: PPUSH
6821: LD_STRING D3-Sol1-1
6823: PPUSH
6824: LD_STRING 
6826: PPUSH
6827: CALL 12366 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6831: LD_EXP 24
6835: PPUSH
6836: LD_STRING D3-Kurt-1
6838: PPUSH
6839: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6843: LD_EXP 1
6847: PPUSH
6848: LD_STRING D3-JMM-1
6850: PPUSH
6851: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6855: LD_EXP 24
6859: PPUSH
6860: LD_STRING D3-Kurt-2
6862: PPUSH
6863: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6867: LD_EXP 1
6871: PPUSH
6872: LD_STRING D3-JMM-2
6874: PPUSH
6875: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6879: LD_EXP 24
6883: PPUSH
6884: LD_STRING D3-Kurt-4
6886: PPUSH
6887: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6891: LD_EXP 1
6895: PPUSH
6896: LD_STRING D3-JMM-4
6898: PPUSH
6899: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6903: LD_EXP 24
6907: PPUSH
6908: LD_STRING D3-Kurt-5
6910: PPUSH
6911: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6915: LD_EXP 24
6919: PPUSH
6920: LD_STRING D3-Kurt-5a
6922: PPUSH
6923: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
6927: LD_EXP 24
6931: PPUSH
6932: LD_STRING D3-Kurt-5b
6934: PPUSH
6935: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6939: LD_VAR 0 6
6943: PUSH
6944: LD_INT 60
6946: GREATEREQUAL
6947: PUSH
6948: LD_VAR 0 8
6952: PUSH
6953: LD_INT 60
6955: GREATEREQUAL
6956: AND
6957: IFFALSE 6992
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6959: LD_ADDR_VAR 0 2
6963: PUSH
6964: LD_STRING Q2K
6966: PPUSH
6967: LD_INT 1
6969: PUSH
6970: LD_INT 2
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: LD_INT 4
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 98
6989: ST_TO_ADDR
6990: GO 7015
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
6992: LD_ADDR_VAR 0 2
6996: PUSH
6997: LD_STRING Q2K
6999: PPUSH
7000: LD_INT 3
7002: PUSH
7003: LD_INT 4
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 98
7014: ST_TO_ADDR
// if dec1 = 1 then
7015: LD_VAR 0 2
7019: PUSH
7020: LD_INT 1
7022: EQUAL
7023: IFFALSE 7057
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7025: LD_EXP 1
7029: PPUSH
7030: LD_STRING D3Ka-JMM-1
7032: PPUSH
7033: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7037: LD_EXP 24
7041: PPUSH
7042: LD_STRING D3Ka-Kurt-1
7044: PPUSH
7045: CALL_OW 88
// warWithLegion = 1 ;
7049: LD_ADDR_EXP 30
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// end ; if dec1 = 2 then
7057: LD_VAR 0 2
7061: PUSH
7062: LD_INT 2
7064: EQUAL
7065: IFFALSE 7291
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7067: LD_EXP 1
7071: PPUSH
7072: LD_STRING D3Kb-JMM-1
7074: PPUSH
7075: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7079: LD_EXP 24
7083: PPUSH
7084: LD_STRING D3Kb-Kurt-1
7086: PPUSH
7087: CALL_OW 88
// for i in tmp do
7091: LD_ADDR_VAR 0 1
7095: PUSH
7096: LD_VAR 0 4
7100: PUSH
7101: FOR_IN
7102: IFFALSE 7189
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7104: LD_ADDR_VAR 0 5
7108: PUSH
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 274
7118: PPUSH
7119: LD_INT 1
7121: PPUSH
7122: CALL_OW 275
7126: ST_TO_ADDR
// if tmp2 >= 60 then
7127: LD_VAR 0 5
7131: PUSH
7132: LD_INT 60
7134: GREATEREQUAL
7135: IFFALSE 7167
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: CALL_OW 274
7146: PPUSH
7147: LD_INT 1
7149: PPUSH
7150: LD_VAR 0 5
7154: PUSH
7155: LD_INT 60
7157: MINUS
7158: PPUSH
7159: CALL_OW 277
// break ;
7163: GO 7189
// end else
7165: GO 7187
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL_OW 274
7176: PPUSH
7177: LD_INT 1
7179: PPUSH
7180: LD_INT 0
7182: PPUSH
7183: CALL_OW 277
// end ; end ;
7187: GO 7101
7189: POP
7190: POP
// for i in tmp do
7191: LD_ADDR_VAR 0 1
7195: PUSH
7196: LD_VAR 0 4
7200: PUSH
7201: FOR_IN
7202: IFFALSE 7289
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7204: LD_ADDR_VAR 0 5
7208: PUSH
7209: LD_VAR 0 1
7213: PPUSH
7214: CALL_OW 274
7218: PPUSH
7219: LD_INT 3
7221: PPUSH
7222: CALL_OW 275
7226: ST_TO_ADDR
// if tmp2 >= 60 then
7227: LD_VAR 0 5
7231: PUSH
7232: LD_INT 60
7234: GREATEREQUAL
7235: IFFALSE 7267
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7237: LD_VAR 0 1
7241: PPUSH
7242: CALL_OW 274
7246: PPUSH
7247: LD_INT 3
7249: PPUSH
7250: LD_VAR 0 5
7254: PUSH
7255: LD_INT 60
7257: MINUS
7258: PPUSH
7259: CALL_OW 277
// break ;
7263: GO 7289
// end else
7265: GO 7287
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 274
7276: PPUSH
7277: LD_INT 3
7279: PPUSH
7280: LD_INT 0
7282: PPUSH
7283: CALL_OW 277
// end ; end ;
7287: GO 7201
7289: POP
7290: POP
// end ; if dec1 = 3 then
7291: LD_VAR 0 2
7295: PUSH
7296: LD_INT 3
7298: EQUAL
7299: IFFALSE 7534
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7301: LD_EXP 1
7305: PPUSH
7306: LD_STRING D3Kc1-JMM-1
7308: PPUSH
7309: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7313: LD_EXP 24
7317: PPUSH
7318: LD_STRING D3Kc1-Kurt-1
7320: PPUSH
7321: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7325: LD_EXP 1
7329: PPUSH
7330: LD_STRING D3Kc1-JMM-2
7332: PPUSH
7333: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7337: LD_EXP 24
7341: PPUSH
7342: LD_STRING D3Kc1-Kurt-2
7344: PPUSH
7345: CALL_OW 88
// askSiberite = 1 ;
7349: LD_ADDR_EXP 32
7353: PUSH
7354: LD_INT 1
7356: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7357: LD_ADDR_VAR 0 2
7361: PUSH
7362: LD_STRING Q2b
7364: PPUSH
7365: LD_INT 1
7367: PUSH
7368: LD_INT 2
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 98
7383: ST_TO_ADDR
// if dec2 = 1 then
7384: LD_VAR 0 3
7388: PUSH
7389: LD_INT 1
7391: EQUAL
7392: IFFALSE 7426
// begin Say ( JMM , D4a-JMM-1 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D4a-JMM-1
7401: PPUSH
7402: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7406: LD_EXP 24
7410: PPUSH
7411: LD_STRING D4b-Kurt-1
7413: PPUSH
7414: CALL_OW 88
// warWithLegion = 1 ;
7418: LD_ADDR_EXP 30
7422: PUSH
7423: LD_INT 1
7425: ST_TO_ADDR
// end ; if dec2 = 2 then
7426: LD_VAR 0 3
7430: PUSH
7431: LD_INT 2
7433: EQUAL
7434: IFFALSE 7468
// begin Say ( JMM , D4b-JMM-1 ) ;
7436: LD_EXP 1
7440: PPUSH
7441: LD_STRING D4b-JMM-1
7443: PPUSH
7444: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7448: LD_EXP 24
7452: PPUSH
7453: LD_STRING D4b-Kurt-1
7455: PPUSH
7456: CALL_OW 88
// warWithLegion = 1 ;
7460: LD_ADDR_EXP 30
7464: PUSH
7465: LD_INT 1
7467: ST_TO_ADDR
// end ; if dec2 = 3 then
7468: LD_VAR 0 3
7472: PUSH
7473: LD_INT 3
7475: EQUAL
7476: IFFALSE 7534
// begin Say ( JMM , D4c-JMM-1 ) ;
7478: LD_EXP 1
7482: PPUSH
7483: LD_STRING D4c-JMM-1
7485: PPUSH
7486: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7490: LD_EXP 24
7494: PPUSH
7495: LD_STRING D4c-Kurt-1
7497: PPUSH
7498: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7502: LD_EXP 1
7506: PPUSH
7507: LD_STRING D4c-JMM-2
7509: PPUSH
7510: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7514: LD_EXP 24
7518: PPUSH
7519: LD_STRING D4c-Kurt-2
7521: PPUSH
7522: CALL_OW 88
// fakeInfo = 1 ;
7526: LD_ADDR_EXP 31
7530: PUSH
7531: LD_INT 1
7533: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7534: LD_VAR 0 2
7538: PUSH
7539: LD_INT 4
7541: EQUAL
7542: IFFALSE 8199
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7544: LD_EXP 1
7548: PPUSH
7549: LD_STRING D3Kd-JMM-1
7551: PPUSH
7552: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7556: LD_VAR 0 6
7560: PUSH
7561: LD_INT 120
7563: GREATEREQUAL
7564: PUSH
7565: LD_VAR 0 8
7569: PUSH
7570: LD_INT 120
7572: GREATEREQUAL
7573: AND
7574: IFFALSE 7609
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7576: LD_ADDR_VAR 0 3
7580: PUSH
7581: LD_STRING Q2aK
7583: PPUSH
7584: LD_INT 1
7586: PUSH
7587: LD_INT 2
7589: PUSH
7590: LD_INT 3
7592: PUSH
7593: LD_INT 4
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 98
7606: ST_TO_ADDR
7607: GO 7632
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7609: LD_ADDR_VAR 0 3
7613: PUSH
7614: LD_STRING Q2K
7616: PPUSH
7617: LD_INT 1
7619: PUSH
7620: LD_INT 4
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 98
7631: ST_TO_ADDR
// if dec2 = 1 then
7632: LD_VAR 0 3
7636: PUSH
7637: LD_INT 1
7639: EQUAL
7640: IFFALSE 7674
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7642: LD_EXP 1
7646: PPUSH
7647: LD_STRING D5Ka-JMM-1
7649: PPUSH
7650: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7654: LD_EXP 24
7658: PPUSH
7659: LD_STRING D5Ka-Kurt-1
7661: PPUSH
7662: CALL_OW 88
// warWithLegion = 1 ;
7666: LD_ADDR_EXP 30
7670: PUSH
7671: LD_INT 1
7673: ST_TO_ADDR
// end ; if dec2 = 2 then
7674: LD_VAR 0 3
7678: PUSH
7679: LD_INT 2
7681: EQUAL
7682: IFFALSE 7708
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7684: LD_EXP 1
7688: PPUSH
7689: LD_STRING D3Kb-JMM-1
7691: PPUSH
7692: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7696: LD_EXP 24
7700: PPUSH
7701: LD_STRING D3Kb-Kurt-1
7703: PPUSH
7704: CALL_OW 88
// end ; if dec2 = 3 then
7708: LD_VAR 0 3
7712: PUSH
7713: LD_INT 3
7715: EQUAL
7716: IFFALSE 7946
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7718: LD_EXP 1
7722: PPUSH
7723: LD_STRING D3Ke-JMM-1
7725: PPUSH
7726: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7730: LD_EXP 24
7734: PPUSH
7735: LD_STRING D3Ke-Kurt-1
7737: PPUSH
7738: CALL_OW 88
// PrepareLegionForPlayer ;
7742: CALL 4275 0 0
// for i in tmp do
7746: LD_ADDR_VAR 0 1
7750: PUSH
7751: LD_VAR 0 4
7755: PUSH
7756: FOR_IN
7757: IFFALSE 7844
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7759: LD_ADDR_VAR 0 5
7763: PUSH
7764: LD_VAR 0 1
7768: PPUSH
7769: CALL_OW 274
7773: PPUSH
7774: LD_INT 1
7776: PPUSH
7777: CALL_OW 275
7781: ST_TO_ADDR
// if tmp2 >= 120 then
7782: LD_VAR 0 5
7786: PUSH
7787: LD_INT 120
7789: GREATEREQUAL
7790: IFFALSE 7822
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7792: LD_VAR 0 1
7796: PPUSH
7797: CALL_OW 274
7801: PPUSH
7802: LD_INT 1
7804: PPUSH
7805: LD_VAR 0 5
7809: PUSH
7810: LD_INT 120
7812: MINUS
7813: PPUSH
7814: CALL_OW 277
// break ;
7818: GO 7844
// end else
7820: GO 7842
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7822: LD_VAR 0 1
7826: PPUSH
7827: CALL_OW 274
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 0
7837: PPUSH
7838: CALL_OW 277
// end ; end ;
7842: GO 7756
7844: POP
7845: POP
// for i in tmp do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: LD_VAR 0 4
7855: PUSH
7856: FOR_IN
7857: IFFALSE 7944
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7859: LD_ADDR_VAR 0 5
7863: PUSH
7864: LD_VAR 0 1
7868: PPUSH
7869: CALL_OW 274
7873: PPUSH
7874: LD_INT 3
7876: PPUSH
7877: CALL_OW 275
7881: ST_TO_ADDR
// if tmp2 >= 120 then
7882: LD_VAR 0 5
7886: PUSH
7887: LD_INT 120
7889: GREATEREQUAL
7890: IFFALSE 7922
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
7892: LD_VAR 0 1
7896: PPUSH
7897: CALL_OW 274
7901: PPUSH
7902: LD_INT 3
7904: PPUSH
7905: LD_VAR 0 5
7909: PUSH
7910: LD_INT 120
7912: MINUS
7913: PPUSH
7914: CALL_OW 277
// break ;
7918: GO 7944
// end else
7920: GO 7942
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7922: LD_VAR 0 1
7926: PPUSH
7927: CALL_OW 274
7931: PPUSH
7932: LD_INT 3
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 277
// end ; end ;
7942: GO 7856
7944: POP
7945: POP
// end ; if dec2 = 4 then
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 4
7953: EQUAL
7954: IFFALSE 8199
// begin if dec1 = 3 then
7956: LD_VAR 0 2
7960: PUSH
7961: LD_INT 3
7963: EQUAL
7964: IFFALSE 8199
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7966: LD_EXP 1
7970: PPUSH
7971: LD_STRING D3Kc1-JMM-1
7973: PPUSH
7974: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7978: LD_EXP 24
7982: PPUSH
7983: LD_STRING D3Kc1-Kurt-1
7985: PPUSH
7986: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7990: LD_EXP 1
7994: PPUSH
7995: LD_STRING D3Kc1-JMM-2
7997: PPUSH
7998: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8002: LD_EXP 24
8006: PPUSH
8007: LD_STRING D3Kc1-Kurt-2
8009: PPUSH
8010: CALL_OW 88
// askSiberite = 1 ;
8014: LD_ADDR_EXP 32
8018: PUSH
8019: LD_INT 1
8021: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8022: LD_ADDR_VAR 0 2
8026: PUSH
8027: LD_STRING Q2b
8029: PPUSH
8030: LD_INT 1
8032: PUSH
8033: LD_INT 2
8035: PUSH
8036: LD_INT 3
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: PPUSH
8044: CALL_OW 98
8048: ST_TO_ADDR
// if dec2 = 1 then
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 1
8056: EQUAL
8057: IFFALSE 8091
// begin Say ( JMM , D4a-JMM-1 ) ;
8059: LD_EXP 1
8063: PPUSH
8064: LD_STRING D4a-JMM-1
8066: PPUSH
8067: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8071: LD_EXP 24
8075: PPUSH
8076: LD_STRING D4b-Kurt-1
8078: PPUSH
8079: CALL_OW 88
// warWithLegion = 1 ;
8083: LD_ADDR_EXP 30
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// end ; if dec2 = 2 then
8091: LD_VAR 0 3
8095: PUSH
8096: LD_INT 2
8098: EQUAL
8099: IFFALSE 8133
// begin Say ( JMM , D4b-JMM-1 ) ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_STRING D4b-JMM-1
8108: PPUSH
8109: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8113: LD_EXP 24
8117: PPUSH
8118: LD_STRING D4b-Kurt-1
8120: PPUSH
8121: CALL_OW 88
// warWithLegion = 1 ;
8125: LD_ADDR_EXP 30
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// end ; if dec2 = 3 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 3
8140: EQUAL
8141: IFFALSE 8199
// begin Say ( JMM , D4c-JMM-1 ) ;
8143: LD_EXP 1
8147: PPUSH
8148: LD_STRING D4c-JMM-1
8150: PPUSH
8151: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8155: LD_EXP 24
8159: PPUSH
8160: LD_STRING D4c-Kurt-1
8162: PPUSH
8163: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8167: LD_EXP 1
8171: PPUSH
8172: LD_STRING D4c-JMM-2
8174: PPUSH
8175: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8179: LD_EXP 24
8183: PPUSH
8184: LD_STRING D4c-Kurt-2
8186: PPUSH
8187: CALL_OW 88
// fakeInfo = 1 ;
8191: LD_ADDR_EXP 31
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8199: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8203: LD_EXP 24
8207: PPUSH
8208: LD_EXP 26
8212: PPUSH
8213: CALL_OW 120
// wait ( 0 0$1 ) ;
8217: LD_INT 35
8219: PPUSH
8220: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8224: LD_EXP 26
8228: PPUSH
8229: LD_INT 4
8231: PPUSH
8232: CALL_OW 113
// wait ( 0 0$3 ) ;
8236: LD_INT 105
8238: PPUSH
8239: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8243: LD_EXP 24
8247: PPUSH
8248: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8252: LD_EXP 26
8256: PPUSH
8257: CALL_OW 64
// end else
8261: GO 9831
// begin ComExitVehicle ( otherKurt ) ;
8263: LD_EXP 25
8267: PPUSH
8268: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8272: LD_EXP 25
8276: PPUSH
8277: CALL_OW 87
// wait ( 0 0$1 ) ;
8281: LD_INT 35
8283: PPUSH
8284: CALL_OW 67
// DialogueOn ;
8288: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
8292: LD_INT 22
8294: PUSH
8295: LD_INT 1
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 26
8304: PUSH
8305: LD_INT 1
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 2
8314: PUSH
8315: LD_INT 25
8317: PUSH
8318: LD_INT 1
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 25
8327: PUSH
8328: LD_INT 2
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 25
8337: PUSH
8338: LD_INT 3
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 25
8347: PUSH
8348: LD_INT 4
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: PUSH
8367: LD_EXP 1
8371: PUSH
8372: EMPTY
8373: LIST
8374: DIFF
8375: PPUSH
8376: CALL_OW 69
8380: PPUSH
8381: LD_STRING D3-Sol1-1
8383: PPUSH
8384: LD_STRING 
8386: PPUSH
8387: CALL 12366 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8391: LD_EXP 25
8395: PPUSH
8396: LD_STRING D3-Kurt-1
8398: PPUSH
8399: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8403: LD_EXP 1
8407: PPUSH
8408: LD_STRING D3-JMM-1
8410: PPUSH
8411: CALL_OW 88
// Say ( otherKurt , D3-Kurt-2 ) ;
8415: LD_EXP 25
8419: PPUSH
8420: LD_STRING D3-Kurt-2
8422: PPUSH
8423: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
8427: LD_EXP 1
8431: PPUSH
8432: LD_STRING D3-JMM-2
8434: PPUSH
8435: CALL_OW 88
// Say ( otherKurt , D3-Kurt-4 ) ;
8439: LD_EXP 25
8443: PPUSH
8444: LD_STRING D3-Kurt-4
8446: PPUSH
8447: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8451: LD_EXP 1
8455: PPUSH
8456: LD_STRING D3-JMM-4
8458: PPUSH
8459: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8463: LD_EXP 25
8467: PPUSH
8468: LD_STRING D3-Kurt-5
8470: PPUSH
8471: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5a ) ;
8475: LD_EXP 25
8479: PPUSH
8480: LD_STRING D3-Kurt-5a
8482: PPUSH
8483: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8487: LD_EXP 25
8491: PPUSH
8492: LD_STRING D3-Kurt-5b
8494: PPUSH
8495: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8499: LD_VAR 0 6
8503: PUSH
8504: LD_INT 100
8506: GREATEREQUAL
8507: PUSH
8508: LD_VAR 0 8
8512: PUSH
8513: LD_INT 100
8515: GREATEREQUAL
8516: AND
8517: IFFALSE 8552
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8519: LD_ADDR_VAR 0 2
8523: PUSH
8524: LD_STRING Q2
8526: PPUSH
8527: LD_INT 1
8529: PUSH
8530: LD_INT 2
8532: PUSH
8533: LD_INT 3
8535: PUSH
8536: LD_INT 4
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 98
8549: ST_TO_ADDR
8550: GO 8575
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_STRING Q2
8559: PPUSH
8560: LD_INT 3
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 98
8574: ST_TO_ADDR
// if dec1 = 1 then
8575: LD_VAR 0 2
8579: PUSH
8580: LD_INT 1
8582: EQUAL
8583: IFFALSE 8617
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8585: LD_EXP 1
8589: PPUSH
8590: LD_STRING D3Ka-JMM-1
8592: PPUSH
8593: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8597: LD_EXP 25
8601: PPUSH
8602: LD_STRING D3Ka-Kurt-1
8604: PPUSH
8605: CALL_OW 88
// warWithLegion = 1 ;
8609: LD_ADDR_EXP 30
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// end ; if dec1 = 2 then
8617: LD_VAR 0 2
8621: PUSH
8622: LD_INT 2
8624: EQUAL
8625: IFFALSE 8851
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8627: LD_EXP 1
8631: PPUSH
8632: LD_STRING D3Kb-JMM-1
8634: PPUSH
8635: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8639: LD_EXP 25
8643: PPUSH
8644: LD_STRING D3Kb-Kurt-1
8646: PPUSH
8647: CALL_OW 88
// for i in tmp do
8651: LD_ADDR_VAR 0 1
8655: PUSH
8656: LD_VAR 0 4
8660: PUSH
8661: FOR_IN
8662: IFFALSE 8749
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8664: LD_ADDR_VAR 0 5
8668: PUSH
8669: LD_VAR 0 1
8673: PPUSH
8674: CALL_OW 274
8678: PPUSH
8679: LD_INT 1
8681: PPUSH
8682: CALL_OW 275
8686: ST_TO_ADDR
// if tmp2 >= 100 then
8687: LD_VAR 0 5
8691: PUSH
8692: LD_INT 100
8694: GREATEREQUAL
8695: IFFALSE 8727
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: CALL_OW 274
8706: PPUSH
8707: LD_INT 1
8709: PPUSH
8710: LD_VAR 0 5
8714: PUSH
8715: LD_INT 100
8717: MINUS
8718: PPUSH
8719: CALL_OW 277
// break ;
8723: GO 8749
// end else
8725: GO 8747
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 274
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: LD_INT 0
8742: PPUSH
8743: CALL_OW 277
// end ; end ;
8747: GO 8661
8749: POP
8750: POP
// for i in tmp do
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_VAR 0 4
8760: PUSH
8761: FOR_IN
8762: IFFALSE 8849
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8764: LD_ADDR_VAR 0 5
8768: PUSH
8769: LD_VAR 0 1
8773: PPUSH
8774: CALL_OW 274
8778: PPUSH
8779: LD_INT 3
8781: PPUSH
8782: CALL_OW 275
8786: ST_TO_ADDR
// if tmp2 >= 100 then
8787: LD_VAR 0 5
8791: PUSH
8792: LD_INT 100
8794: GREATEREQUAL
8795: IFFALSE 8827
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8797: LD_VAR 0 1
8801: PPUSH
8802: CALL_OW 274
8806: PPUSH
8807: LD_INT 3
8809: PPUSH
8810: LD_VAR 0 5
8814: PUSH
8815: LD_INT 100
8817: MINUS
8818: PPUSH
8819: CALL_OW 277
// break ;
8823: GO 8849
// end else
8825: GO 8847
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 274
8836: PPUSH
8837: LD_INT 3
8839: PPUSH
8840: LD_INT 0
8842: PPUSH
8843: CALL_OW 277
// end ; end ;
8847: GO 8761
8849: POP
8850: POP
// end ; if dec1 = 3 then
8851: LD_VAR 0 2
8855: PUSH
8856: LD_INT 3
8858: EQUAL
8859: IFFALSE 9094
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8861: LD_EXP 1
8865: PPUSH
8866: LD_STRING D3Kc1-JMM-1
8868: PPUSH
8869: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8873: LD_EXP 25
8877: PPUSH
8878: LD_STRING D3Kc1-Kurt-1
8880: PPUSH
8881: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8885: LD_EXP 1
8889: PPUSH
8890: LD_STRING D3Kc1-JMM-2
8892: PPUSH
8893: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8897: LD_EXP 25
8901: PPUSH
8902: LD_STRING D3Kc1-Kurt-2
8904: PPUSH
8905: CALL_OW 88
// askSiberite = 1 ;
8909: LD_ADDR_EXP 32
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8917: LD_ADDR_VAR 0 2
8921: PUSH
8922: LD_STRING Q2b
8924: PPUSH
8925: LD_INT 1
8927: PUSH
8928: LD_INT 2
8930: PUSH
8931: LD_INT 3
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: PPUSH
8939: CALL_OW 98
8943: ST_TO_ADDR
// if dec2 = 1 then
8944: LD_VAR 0 3
8948: PUSH
8949: LD_INT 1
8951: EQUAL
8952: IFFALSE 8986
// begin Say ( JMM , D4a-JMM-1 ) ;
8954: LD_EXP 1
8958: PPUSH
8959: LD_STRING D4a-JMM-1
8961: PPUSH
8962: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8966: LD_EXP 25
8970: PPUSH
8971: LD_STRING D4b-Kurt-1
8973: PPUSH
8974: CALL_OW 88
// warWithLegion = 1 ;
8978: LD_ADDR_EXP 30
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// end ; if dec2 = 2 then
8986: LD_VAR 0 3
8990: PUSH
8991: LD_INT 2
8993: EQUAL
8994: IFFALSE 9028
// begin Say ( JMM , D4b-JMM-1 ) ;
8996: LD_EXP 1
9000: PPUSH
9001: LD_STRING D4b-JMM-1
9003: PPUSH
9004: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9008: LD_EXP 25
9012: PPUSH
9013: LD_STRING D4b-Kurt-1
9015: PPUSH
9016: CALL_OW 88
// warWithLegion = 1 ;
9020: LD_ADDR_EXP 30
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// end ; if dec2 = 3 then
9028: LD_VAR 0 3
9032: PUSH
9033: LD_INT 3
9035: EQUAL
9036: IFFALSE 9094
// begin Say ( JMM , D4c-JMM-1 ) ;
9038: LD_EXP 1
9042: PPUSH
9043: LD_STRING D4c-JMM-1
9045: PPUSH
9046: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9050: LD_EXP 25
9054: PPUSH
9055: LD_STRING D4c-Kurt-1
9057: PPUSH
9058: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9062: LD_EXP 1
9066: PPUSH
9067: LD_STRING D4c-JMM-2
9069: PPUSH
9070: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9074: LD_EXP 25
9078: PPUSH
9079: LD_STRING D4c-Kurt-2
9081: PPUSH
9082: CALL_OW 88
// fakeInfo = 1 ;
9086: LD_ADDR_EXP 31
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9094: LD_VAR 0 2
9098: PUSH
9099: LD_INT 4
9101: EQUAL
9102: IFFALSE 9759
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9104: LD_EXP 1
9108: PPUSH
9109: LD_STRING D3Kd-JMM-1
9111: PPUSH
9112: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9116: LD_VAR 0 6
9120: PUSH
9121: LD_INT 200
9123: GREATEREQUAL
9124: PUSH
9125: LD_VAR 0 8
9129: PUSH
9130: LD_INT 200
9132: GREATEREQUAL
9133: AND
9134: IFFALSE 9169
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9136: LD_ADDR_VAR 0 3
9140: PUSH
9141: LD_STRING Q2a
9143: PPUSH
9144: LD_INT 1
9146: PUSH
9147: LD_INT 2
9149: PUSH
9150: LD_INT 3
9152: PUSH
9153: LD_INT 4
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 98
9166: ST_TO_ADDR
9167: GO 9192
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9169: LD_ADDR_VAR 0 3
9173: PUSH
9174: LD_STRING Q2a
9176: PPUSH
9177: LD_INT 1
9179: PUSH
9180: LD_INT 4
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 98
9191: ST_TO_ADDR
// if dec2 = 1 then
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 1
9199: EQUAL
9200: IFFALSE 9234
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9202: LD_EXP 1
9206: PPUSH
9207: LD_STRING D5Ka-JMM-1
9209: PPUSH
9210: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9214: LD_EXP 25
9218: PPUSH
9219: LD_STRING D5Ka-Kurt-1
9221: PPUSH
9222: CALL_OW 88
// warWithLegion = 1 ;
9226: LD_ADDR_EXP 30
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// end ; if dec2 = 2 then
9234: LD_VAR 0 3
9238: PUSH
9239: LD_INT 2
9241: EQUAL
9242: IFFALSE 9268
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9244: LD_EXP 1
9248: PPUSH
9249: LD_STRING D3Kb-JMM-1
9251: PPUSH
9252: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9256: LD_EXP 25
9260: PPUSH
9261: LD_STRING D3Kb-Kurt-1
9263: PPUSH
9264: CALL_OW 88
// end ; if dec2 = 3 then
9268: LD_VAR 0 3
9272: PUSH
9273: LD_INT 3
9275: EQUAL
9276: IFFALSE 9506
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9278: LD_EXP 1
9282: PPUSH
9283: LD_STRING D3Ke-JMM-1
9285: PPUSH
9286: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9290: LD_EXP 25
9294: PPUSH
9295: LD_STRING D3Ke-Kurt-1
9297: PPUSH
9298: CALL_OW 88
// PrepareLegionForPlayer ;
9302: CALL 4275 0 0
// for i in tmp do
9306: LD_ADDR_VAR 0 1
9310: PUSH
9311: LD_VAR 0 4
9315: PUSH
9316: FOR_IN
9317: IFFALSE 9404
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9319: LD_ADDR_VAR 0 5
9323: PUSH
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 274
9333: PPUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 275
9341: ST_TO_ADDR
// if tmp2 >= 200 then
9342: LD_VAR 0 5
9346: PUSH
9347: LD_INT 200
9349: GREATEREQUAL
9350: IFFALSE 9382
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9352: LD_VAR 0 1
9356: PPUSH
9357: CALL_OW 274
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_VAR 0 5
9369: PUSH
9370: LD_INT 200
9372: MINUS
9373: PPUSH
9374: CALL_OW 277
// break ;
9378: GO 9404
// end else
9380: GO 9402
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 274
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: LD_INT 0
9397: PPUSH
9398: CALL_OW 277
// end ; end ;
9402: GO 9316
9404: POP
9405: POP
// for i in tmp do
9406: LD_ADDR_VAR 0 1
9410: PUSH
9411: LD_VAR 0 4
9415: PUSH
9416: FOR_IN
9417: IFFALSE 9504
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_VAR 0 1
9428: PPUSH
9429: CALL_OW 274
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 275
9441: ST_TO_ADDR
// if tmp2 >= 200 then
9442: LD_VAR 0 5
9446: PUSH
9447: LD_INT 200
9449: GREATEREQUAL
9450: IFFALSE 9482
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9452: LD_VAR 0 1
9456: PPUSH
9457: CALL_OW 274
9461: PPUSH
9462: LD_INT 3
9464: PPUSH
9465: LD_VAR 0 5
9469: PUSH
9470: LD_INT 200
9472: MINUS
9473: PPUSH
9474: CALL_OW 277
// break ;
9478: GO 9504
// end else
9480: GO 9502
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9482: LD_VAR 0 1
9486: PPUSH
9487: CALL_OW 274
9491: PPUSH
9492: LD_INT 3
9494: PPUSH
9495: LD_INT 0
9497: PPUSH
9498: CALL_OW 277
// end ; end ;
9502: GO 9416
9504: POP
9505: POP
// end ; if dec2 = 4 then
9506: LD_VAR 0 3
9510: PUSH
9511: LD_INT 4
9513: EQUAL
9514: IFFALSE 9759
// begin if dec1 = 3 then
9516: LD_VAR 0 2
9520: PUSH
9521: LD_INT 3
9523: EQUAL
9524: IFFALSE 9759
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9526: LD_EXP 1
9530: PPUSH
9531: LD_STRING D3Kc1-JMM-1
9533: PPUSH
9534: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9538: LD_EXP 25
9542: PPUSH
9543: LD_STRING D3Kc1-Kurt-1
9545: PPUSH
9546: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9550: LD_EXP 1
9554: PPUSH
9555: LD_STRING D3Kc1-JMM-2
9557: PPUSH
9558: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9562: LD_EXP 25
9566: PPUSH
9567: LD_STRING D3Kc1-Kurt-2
9569: PPUSH
9570: CALL_OW 88
// askSiberite = 1 ;
9574: LD_ADDR_EXP 32
9578: PUSH
9579: LD_INT 1
9581: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_STRING Q2b
9589: PPUSH
9590: LD_INT 1
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 98
9608: ST_TO_ADDR
// if dec2 = 1 then
9609: LD_VAR 0 3
9613: PUSH
9614: LD_INT 1
9616: EQUAL
9617: IFFALSE 9651
// begin Say ( JMM , D4a-JMM-1 ) ;
9619: LD_EXP 1
9623: PPUSH
9624: LD_STRING D4a-JMM-1
9626: PPUSH
9627: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9631: LD_EXP 25
9635: PPUSH
9636: LD_STRING D4b-Kurt-1
9638: PPUSH
9639: CALL_OW 88
// warWithLegion = 1 ;
9643: LD_ADDR_EXP 30
9647: PUSH
9648: LD_INT 1
9650: ST_TO_ADDR
// end ; if dec2 = 2 then
9651: LD_VAR 0 3
9655: PUSH
9656: LD_INT 2
9658: EQUAL
9659: IFFALSE 9693
// begin Say ( JMM , D4b-JMM-1 ) ;
9661: LD_EXP 1
9665: PPUSH
9666: LD_STRING D4b-JMM-1
9668: PPUSH
9669: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9673: LD_EXP 25
9677: PPUSH
9678: LD_STRING D4b-Kurt-1
9680: PPUSH
9681: CALL_OW 88
// warWithLegion = 1 ;
9685: LD_ADDR_EXP 30
9689: PUSH
9690: LD_INT 1
9692: ST_TO_ADDR
// end ; if dec2 = 3 then
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 3
9700: EQUAL
9701: IFFALSE 9759
// begin Say ( JMM , D4c-JMM-1 ) ;
9703: LD_EXP 1
9707: PPUSH
9708: LD_STRING D4c-JMM-1
9710: PPUSH
9711: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9715: LD_EXP 25
9719: PPUSH
9720: LD_STRING D4c-Kurt-1
9722: PPUSH
9723: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9727: LD_EXP 1
9731: PPUSH
9732: LD_STRING D4c-JMM-2
9734: PPUSH
9735: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9739: LD_EXP 25
9743: PPUSH
9744: LD_STRING D4c-Kurt-2
9746: PPUSH
9747: CALL_OW 88
// fakeInfo = 1 ;
9751: LD_ADDR_EXP 31
9755: PUSH
9756: LD_INT 1
9758: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9759: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9763: LD_INT 8
9765: PPUSH
9766: LD_INT 8
9768: PPUSH
9769: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9773: LD_EXP 25
9777: PPUSH
9778: LD_EXP 26
9782: PPUSH
9783: CALL_OW 120
// wait ( 0 0$1 ) ;
9787: LD_INT 35
9789: PPUSH
9790: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9794: LD_EXP 26
9798: PPUSH
9799: LD_INT 4
9801: PPUSH
9802: CALL_OW 113
// wait ( 0 0$6 ) ;
9806: LD_INT 210
9808: PPUSH
9809: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9813: LD_EXP 25
9817: PPUSH
9818: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9822: LD_EXP 26
9826: PPUSH
9827: CALL_OW 64
// end ; end ;
9831: PPOPN 8
9833: END
// every 0 0$10 trigger warWithLegion = 1 do
9834: LD_EXP 30
9838: PUSH
9839: LD_INT 1
9841: EQUAL
9842: IFFALSE 9851
9844: GO 9846
9846: DISABLE
// PrepareAttackLegion ;
9847: CALL 5003 0 0
9851: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9852: LD_EXP 15
9856: PPUSH
9857: CALL_OW 305
9861: PUSH
9862: LD_EXP 15
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: CALL_OW 289
9874: NOT
9875: AND
9876: PUSH
9877: LD_EXP 15
9881: PPUSH
9882: LD_INT 2
9884: PPUSH
9885: CALL_OW 289
9889: NOT
9890: AND
9891: PUSH
9892: LD_EXP 15
9896: PPUSH
9897: LD_INT 3
9899: PPUSH
9900: CALL_OW 289
9904: NOT
9905: AND
9906: IFFALSE 9923
9908: GO 9910
9910: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9911: LD_EXP 15
9915: PPUSH
9916: LD_INT 4
9918: PPUSH
9919: CALL_OW 235
9923: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9924: LD_EXP 16
9928: PPUSH
9929: CALL_OW 305
9933: PUSH
9934: LD_EXP 16
9938: PPUSH
9939: LD_INT 1
9941: PPUSH
9942: CALL_OW 289
9946: NOT
9947: AND
9948: PUSH
9949: LD_EXP 16
9953: PPUSH
9954: LD_INT 2
9956: PPUSH
9957: CALL_OW 289
9961: NOT
9962: AND
9963: PUSH
9964: LD_EXP 16
9968: PPUSH
9969: LD_INT 3
9971: PPUSH
9972: CALL_OW 289
9976: NOT
9977: AND
9978: IFFALSE 9995
9980: GO 9982
9982: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9983: LD_EXP 16
9987: PPUSH
9988: LD_INT 4
9990: PPUSH
9991: CALL_OW 235
9995: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9996: LD_EXP 17
10000: PPUSH
10001: CALL_OW 305
10005: PUSH
10006: LD_EXP 17
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: CALL_OW 289
10018: NOT
10019: AND
10020: PUSH
10021: LD_EXP 17
10025: PPUSH
10026: LD_INT 2
10028: PPUSH
10029: CALL_OW 289
10033: NOT
10034: AND
10035: PUSH
10036: LD_EXP 17
10040: PPUSH
10041: LD_INT 3
10043: PPUSH
10044: CALL_OW 289
10048: NOT
10049: AND
10050: IFFALSE 10067
10052: GO 10054
10054: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10055: LD_EXP 17
10059: PPUSH
10060: LD_INT 4
10062: PPUSH
10063: CALL_OW 235
10067: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10068: LD_EXP 18
10072: PPUSH
10073: CALL_OW 305
10077: PUSH
10078: LD_EXP 18
10082: PPUSH
10083: LD_INT 1
10085: PPUSH
10086: CALL_OW 289
10090: NOT
10091: AND
10092: PUSH
10093: LD_EXP 18
10097: PPUSH
10098: LD_INT 2
10100: PPUSH
10101: CALL_OW 289
10105: NOT
10106: AND
10107: PUSH
10108: LD_EXP 18
10112: PPUSH
10113: LD_INT 3
10115: PPUSH
10116: CALL_OW 289
10120: NOT
10121: AND
10122: IFFALSE 10139
10124: GO 10126
10126: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10127: LD_EXP 18
10131: PPUSH
10132: LD_INT 4
10134: PPUSH
10135: CALL_OW 235
10139: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10140: LD_EXP 19
10144: PPUSH
10145: CALL_OW 305
10149: PUSH
10150: LD_EXP 19
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 289
10162: NOT
10163: AND
10164: PUSH
10165: LD_EXP 19
10169: PPUSH
10170: LD_INT 2
10172: PPUSH
10173: CALL_OW 289
10177: NOT
10178: AND
10179: PUSH
10180: LD_EXP 19
10184: PPUSH
10185: LD_INT 3
10187: PPUSH
10188: CALL_OW 289
10192: NOT
10193: AND
10194: PUSH
10195: LD_EXP 19
10199: PPUSH
10200: LD_INT 2
10202: PPUSH
10203: CALL_OW 289
10207: NOT
10208: AND
10209: IFFALSE 10226
10211: GO 10213
10213: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10214: LD_EXP 19
10218: PPUSH
10219: LD_INT 4
10221: PPUSH
10222: CALL_OW 235
10226: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10227: LD_EXP 20
10231: PPUSH
10232: CALL_OW 305
10236: PUSH
10237: LD_EXP 20
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: CALL_OW 289
10249: NOT
10250: AND
10251: PUSH
10252: LD_EXP 20
10256: PPUSH
10257: LD_INT 2
10259: PPUSH
10260: CALL_OW 289
10264: NOT
10265: AND
10266: PUSH
10267: LD_EXP 20
10271: PPUSH
10272: LD_INT 3
10274: PPUSH
10275: CALL_OW 289
10279: NOT
10280: AND
10281: IFFALSE 10298
10283: GO 10285
10285: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10286: LD_EXP 20
10290: PPUSH
10291: LD_INT 4
10293: PPUSH
10294: CALL_OW 235
10298: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10299: LD_EXP 21
10303: PPUSH
10304: CALL_OW 305
10308: PUSH
10309: LD_EXP 21
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: CALL_OW 289
10321: NOT
10322: AND
10323: PUSH
10324: LD_EXP 21
10328: PPUSH
10329: LD_INT 2
10331: PPUSH
10332: CALL_OW 289
10336: NOT
10337: AND
10338: PUSH
10339: LD_EXP 21
10343: PPUSH
10344: LD_INT 3
10346: PPUSH
10347: CALL_OW 289
10351: NOT
10352: AND
10353: IFFALSE 10370
10355: GO 10357
10357: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10358: LD_EXP 21
10362: PPUSH
10363: LD_INT 4
10365: PPUSH
10366: CALL_OW 235
10370: END
// every 0 0$1 do var i ;
10371: GO 10373
10373: DISABLE
10374: LD_INT 0
10376: PPUSH
// begin enable ;
10377: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10378: LD_ADDR_VAR 0 1
10382: PUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 4
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PUSH
10398: FOR_IN
10399: IFFALSE 10438
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10401: LD_VAR 0 1
10405: PPUSH
10406: LD_INT 4
10408: PPUSH
10409: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10413: LD_VAR 0 1
10417: PPUSH
10418: LD_INT 4
10420: PPUSH
10421: CALL_OW 308
10425: IFFALSE 10436
// RemoveUnit ( i ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: CALL_OW 64
// end ;
10436: GO 10398
10438: POP
10439: POP
// end ;
10440: PPOPN 1
10442: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10443: LD_EXP 28
10447: PUSH
10448: LD_INT 1
10450: EQUAL
10451: IFFALSE 10826
10453: GO 10455
10455: DISABLE
10456: LD_INT 0
10458: PPUSH
10459: PPUSH
10460: PPUSH
// begin enable ;
10461: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10462: LD_ADDR_VAR 0 2
10466: PUSH
10467: LD_INT 12
10469: PPUSH
10470: LD_INT 22
10472: PUSH
10473: LD_INT 3
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PUSH
10480: LD_INT 21
10482: PUSH
10483: LD_INT 2
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PPUSH
10494: CALL_OW 70
10498: ST_TO_ADDR
// for i in enemyVehs do
10499: LD_ADDR_VAR 0 1
10503: PUSH
10504: LD_VAR 0 2
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10824
// begin if See ( 1 , i ) then
10512: LD_INT 1
10514: PPUSH
10515: LD_VAR 0 1
10519: PPUSH
10520: CALL_OW 292
10524: IFFALSE 10822
// begin disable ;
10526: DISABLE
// DialogueOn ;
10527: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10540: LD_INT 22
10542: PUSH
10543: LD_INT 1
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 26
10552: PUSH
10553: LD_INT 1
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_EXP 1
10568: PUSH
10569: EMPTY
10570: LIST
10571: DIFF
10572: PPUSH
10573: CALL_OW 69
10577: PPUSH
10578: LD_STRING DT1-Sol1-1
10580: PPUSH
10581: LD_STRING DT1-FSol1-1
10583: PPUSH
10584: CALL 12366 0 3
// dec = ShowQuery2 ;
10588: LD_ADDR_VAR 0 3
10592: PUSH
10593: CALL 12976 0 0
10597: ST_TO_ADDR
// if dec = 1 then
10598: LD_VAR 0 3
10602: PUSH
10603: LD_INT 1
10605: EQUAL
10606: IFFALSE 10712
// begin Say ( JMM , D2-JMM-1 ) ;
10608: LD_EXP 1
10612: PPUSH
10613: LD_STRING D2-JMM-1
10615: PPUSH
10616: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10620: LD_EXP 22
10624: PPUSH
10625: LD_STRING D2-Pow-1
10627: PPUSH
10628: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10632: LD_EXP 1
10636: PPUSH
10637: LD_STRING D2a-JMM-1
10639: PPUSH
10640: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10644: LD_EXP 22
10648: PPUSH
10649: LD_STRING D2a-Pow-1
10651: PPUSH
10652: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10656: LD_EXP 1
10660: PPUSH
10661: LD_STRING D2a-JMM-2
10663: PPUSH
10664: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10668: LD_EXP 22
10672: PPUSH
10673: LD_STRING D2a-Pow-2
10675: PPUSH
10676: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10680: LD_EXP 1
10684: PPUSH
10685: LD_STRING D2a-JMM-3
10687: PPUSH
10688: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10692: LD_EXP 22
10696: PPUSH
10697: LD_STRING D2a-Pow-3
10699: PPUSH
10700: CALL_OW 94
// secondPass = 2 ;
10704: LD_ADDR_EXP 28
10708: PUSH
10709: LD_INT 2
10711: ST_TO_ADDR
// end ; if dec = 2 then
10712: LD_VAR 0 3
10716: PUSH
10717: LD_INT 2
10719: EQUAL
10720: IFFALSE 10814
// begin Say ( JMM , D2-JMM-1 ) ;
10722: LD_EXP 1
10726: PPUSH
10727: LD_STRING D2-JMM-1
10729: PPUSH
10730: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10734: LD_EXP 22
10738: PPUSH
10739: LD_STRING D2-Pow-1
10741: PPUSH
10742: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10746: LD_EXP 1
10750: PPUSH
10751: LD_STRING D2b-JMM-1
10753: PPUSH
10754: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10758: LD_EXP 22
10762: PPUSH
10763: LD_STRING D2b-Pow-1
10765: PPUSH
10766: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10770: LD_EXP 1
10774: PPUSH
10775: LD_STRING D2c-JMM-1
10777: PPUSH
10778: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10782: LD_EXP 22
10786: PPUSH
10787: LD_STRING D2c-Pow-1
10789: PPUSH
10790: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10794: LD_EXP 1
10798: PPUSH
10799: LD_STRING D2c-JMM-2
10801: PPUSH
10802: CALL_OW 88
// secondPass = 2 ;
10806: LD_ADDR_EXP 28
10810: PUSH
10811: LD_INT 2
10813: ST_TO_ADDR
// end ; DialogueOff ;
10814: CALL_OW 7
// exit ;
10818: POP
10819: POP
10820: GO 10826
// end ; end ;
10822: GO 10509
10824: POP
10825: POP
// end ;
10826: PPOPN 3
10828: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10829: LD_EXP 29
10833: PUSH
10834: LD_INT 1
10836: EQUAL
10837: IFFALSE 10987
10839: GO 10841
10841: DISABLE
10842: LD_INT 0
10844: PPUSH
10845: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_INT 11
10853: PPUSH
10854: LD_INT 22
10856: PUSH
10857: LD_INT 3
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 24
10866: PUSH
10867: LD_INT 250
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 70
10882: ST_TO_ADDR
// enable ;
10883: ENABLE
// for i in vehicles do
10884: LD_ADDR_VAR 0 1
10888: PUSH
10889: LD_VAR 0 2
10893: PUSH
10894: FOR_IN
10895: IFFALSE 10985
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
10897: LD_INT 1
10899: PPUSH
10900: LD_VAR 0 1
10904: PPUSH
10905: CALL_OW 292
10909: PUSH
10910: LD_EXP 29
10914: PUSH
10915: LD_INT 1
10917: EQUAL
10918: AND
10919: IFFALSE 10983
// begin disable ;
10921: DISABLE
// DialogueOn ;
10922: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10926: LD_INT 22
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 21
10938: PUSH
10939: LD_INT 1
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PPUSH
10950: CALL_OW 69
10954: PPUSH
10955: LD_STRING DT1-Sol1-1
10957: PPUSH
10958: LD_STRING DT1-FSol1-1
10960: PPUSH
10961: CALL 12366 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10965: LD_EXP 1
10969: PPUSH
10970: LD_STRING DT1-JMM-1
10972: PPUSH
10973: CALL_OW 88
// DialogueOff ;
10977: CALL_OW 7
// break ;
10981: GO 10985
// end ; end ;
10983: GO 10894
10985: POP
10986: POP
// end ;
10987: PPOPN 2
10989: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10990: LD_EXP 29
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 11
11001: PPUSH
11002: LD_INT 22
11004: PUSH
11005: LD_INT 3
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 24
11014: PUSH
11015: LD_INT 251
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 2
11024: PUSH
11025: LD_INT 21
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 1
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 70
11059: PUSH
11060: LD_INT 0
11062: EQUAL
11063: AND
11064: IFFALSE 11148
11066: GO 11068
11068: DISABLE
// begin vehicleTeleported = 2 ;
11069: LD_ADDR_EXP 29
11073: PUSH
11074: LD_INT 2
11076: ST_TO_ADDR
// DialogueOn ;
11077: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11081: LD_EXP 1
11085: PPUSH
11086: LD_STRING DT1a-JMM-1
11088: PPUSH
11089: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11093: LD_INT 22
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 21
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PPUSH
11117: CALL_OW 69
11121: PPUSH
11122: LD_STRING DT1a-Sol1-1
11124: PPUSH
11125: LD_STRING DT1a-FSol1-1
11127: PPUSH
11128: CALL 12366 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11132: LD_EXP 1
11136: PPUSH
11137: LD_STRING DT1a-JMM-2
11139: PPUSH
11140: CALL_OW 88
// DialogueOff ;
11144: CALL_OW 7
// end ;
11148: END
// every 0 0$1 trigger vehicleTeleported = 3 do var i , vehicles ;
11149: LD_EXP 29
11153: PUSH
11154: LD_INT 3
11156: EQUAL
11157: IFFALSE 11295
11159: GO 11161
11161: DISABLE
11162: LD_INT 0
11164: PPUSH
11165: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: LD_INT 11
11173: PPUSH
11174: LD_INT 22
11176: PUSH
11177: LD_INT 3
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 24
11186: PUSH
11187: LD_INT 250
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 70
11202: ST_TO_ADDR
// enable ;
11203: ENABLE
// for i in vehicles do
11204: LD_ADDR_VAR 0 1
11208: PUSH
11209: LD_VAR 0 2
11213: PUSH
11214: FOR_IN
11215: IFFALSE 11293
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11217: LD_INT 1
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 292
11229: PUSH
11230: LD_EXP 29
11234: PUSH
11235: LD_INT 3
11237: EQUAL
11238: AND
11239: IFFALSE 11291
// begin disable ;
11241: DISABLE
// DialogueOn ;
11242: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11246: LD_INT 22
11248: PUSH
11249: LD_INT 1
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 21
11258: PUSH
11259: LD_INT 1
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: PPUSH
11275: LD_STRING DT2-Sol1-1
11277: PPUSH
11278: LD_STRING DT2-FSol1-1
11280: PPUSH
11281: CALL 12366 0 3
// DialogueOff ;
11285: CALL_OW 7
// break ;
11289: GO 11293
// end ; end ;
11291: GO 11214
11293: POP
11294: POP
// end ;
11295: PPOPN 2
11297: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11298: LD_EXP 29
11302: PUSH
11303: LD_INT 3
11305: EQUAL
11306: PUSH
11307: LD_INT 11
11309: PPUSH
11310: LD_INT 22
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 24
11322: PUSH
11323: LD_INT 251
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: LD_INT 21
11335: PUSH
11336: LD_INT 2
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 21
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 70
11367: PUSH
11368: LD_INT 0
11370: EQUAL
11371: AND
11372: IFFALSE 11456
11374: GO 11376
11376: DISABLE
// begin vehicleTeleported = 4 ;
11377: LD_ADDR_EXP 29
11381: PUSH
11382: LD_INT 4
11384: ST_TO_ADDR
// DialogueOn ;
11385: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11389: LD_EXP 1
11393: PPUSH
11394: LD_STRING DT2a-JMM-1
11396: PPUSH
11397: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11401: LD_INT 22
11403: PUSH
11404: LD_INT 1
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 21
11413: PUSH
11414: LD_INT 1
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PPUSH
11425: CALL_OW 69
11429: PPUSH
11430: LD_STRING DT2a-Sol1-1
11432: PPUSH
11433: LD_STRING DT2a-FSol1-1
11435: PPUSH
11436: CALL 12366 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
11440: LD_EXP 3
11444: PPUSH
11445: LD_STRING DT2a-Don-1
11447: PPUSH
11448: CALL_OW 88
// DialogueOff ;
11452: CALL_OW 7
// end ;
11456: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11457: LD_INT 1
11459: PPUSH
11460: LD_INT 45
11462: PPUSH
11463: LD_INT 74
11465: PPUSH
11466: CALL_OW 293
11470: IFFALSE 11565
11472: GO 11474
11474: DISABLE
// begin DialogueOn ;
11475: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11479: LD_INT 36
11481: PPUSH
11482: LD_INT 55
11484: PPUSH
11485: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11489: LD_INT 22
11491: PUSH
11492: LD_INT 1
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 21
11501: PUSH
11502: LD_INT 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 69
11517: PPUSH
11518: LD_STRING D5-Sol1-1
11520: PPUSH
11521: LD_STRING D5-FSol1-
11523: PPUSH
11524: CALL 12366 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
11528: LD_EXP 30
11532: PUSH
11533: LD_INT 1
11535: EQUAL
11536: PUSH
11537: LD_EXP 3
11541: PPUSH
11542: CALL_OW 300
11546: AND
11547: IFFALSE 11561
// Say ( Donaldson , D5-Don-1 ) ;
11549: LD_EXP 3
11553: PPUSH
11554: LD_STRING D5-Don-1
11556: PPUSH
11557: CALL_OW 88
// DialogueOff ;
11561: CALL_OW 7
// end ;
11565: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
11566: LD_INT 1
11568: PPUSH
11569: LD_INT 10
11571: PPUSH
11572: CALL_OW 292
11576: IFFALSE 11663
11578: GO 11580
11580: DISABLE
// begin DialogueOn ;
11581: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
11585: LD_INT 10
11587: PPUSH
11588: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11592: LD_INT 22
11594: PUSH
11595: LD_INT 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 21
11604: PUSH
11605: LD_INT 1
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PPUSH
11616: CALL_OW 69
11620: PUSH
11621: LD_EXP 1
11625: PUSH
11626: EMPTY
11627: LIST
11628: DIFF
11629: PPUSH
11630: LD_STRING DT3-Sol1-1
11632: PPUSH
11633: LD_STRING DT3-FSol1-1
11635: PPUSH
11636: CALL 12366 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11640: LD_EXP 1
11644: PPUSH
11645: LD_STRING DT3-JMM-1
11647: PPUSH
11648: CALL_OW 88
// DialogueOff ;
11652: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11656: LD_STRING M2
11658: PPUSH
11659: CALL_OW 337
// end ;
11663: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 do var i , j , vehs ;
11664: LD_INT 3
11666: PPUSH
11667: CALL_OW 303
11671: PUSH
11672: LD_INT 22
11674: PPUSH
11675: LD_INT 22
11677: PUSH
11678: LD_INT 1
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 70
11689: PUSH
11690: LD_INT 0
11692: GREATER
11693: OR
11694: IFFALSE 12054
11696: GO 11698
11698: DISABLE
11699: LD_INT 0
11701: PPUSH
11702: PPUSH
11703: PPUSH
// begin ruAI = 0 ;
11704: LD_ADDR_EXP 41
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11712: LD_ADDR_VAR 0 3
11716: PUSH
11717: LD_INT 10
11719: PPUSH
11720: LD_INT 22
11722: PUSH
11723: LD_INT 3
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 21
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 58
11742: PUSH
11743: EMPTY
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 70
11755: ST_TO_ADDR
// DialogueOn ;
11756: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11760: LD_EXP 1
11764: PPUSH
11765: LD_STRING D6-JMM-1
11767: PPUSH
11768: CALL_OW 88
// DialogueOff ;
11772: CALL_OW 7
// for i := 1 to RuScientists do
11776: LD_ADDR_VAR 0 1
11780: PUSH
11781: DOUBLE
11782: LD_INT 1
11784: DEC
11785: ST_TO_ADDR
11786: LD_EXP 34
11790: PUSH
11791: FOR_TO
11792: IFFALSE 12052
// begin ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) ;
11794: LD_EXP 34
11798: PUSH
11799: LD_VAR 0 1
11803: ARRAY
11804: PPUSH
11805: LD_INT 3
11807: PUSH
11808: LD_INT 60
11810: PUSH
11811: EMPTY
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PPUSH
11818: CALL_OW 72
11822: PPUSH
11823: LD_VAR 0 3
11827: PUSH
11828: LD_VAR 0 1
11832: ARRAY
11833: PPUSH
11834: CALL_OW 120
// if IsOk ( rutp ) then
11838: LD_INT 137
11840: PPUSH
11841: CALL_OW 302
11845: IFFALSE 11998
// begin if i mod 2 then
11847: LD_VAR 0 1
11851: PUSH
11852: LD_INT 2
11854: MOD
11855: IFFALSE 11944
// begin AddComEnterUnit ( [ RuScientists [ i ] , vehs [ i ] ] , rutp ) ;
11857: LD_EXP 34
11861: PUSH
11862: LD_VAR 0 1
11866: ARRAY
11867: PUSH
11868: LD_VAR 0 3
11872: PUSH
11873: LD_VAR 0 1
11877: ARRAY
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: LD_INT 137
11885: PPUSH
11886: CALL_OW 180
// AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11890: LD_EXP 34
11894: PUSH
11895: LD_VAR 0 1
11899: ARRAY
11900: PUSH
11901: LD_VAR 0 3
11905: PUSH
11906: LD_VAR 0 1
11910: ARRAY
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PPUSH
11916: LD_INT 13
11918: PUSH
11919: LD_INT 14
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 1
11928: PPUSH
11929: LD_INT 2
11931: PPUSH
11932: CALL_OW 12
11936: ARRAY
11937: PPUSH
11938: CALL_OW 173
// end else
11942: GO 11996
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11944: LD_EXP 34
11948: PUSH
11949: LD_VAR 0 1
11953: ARRAY
11954: PUSH
11955: LD_VAR 0 3
11959: PUSH
11960: LD_VAR 0 1
11964: ARRAY
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PPUSH
11970: LD_INT 13
11972: PUSH
11973: LD_INT 14
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 1
11982: PPUSH
11983: LD_INT 2
11985: PPUSH
11986: CALL_OW 12
11990: ARRAY
11991: PPUSH
11992: CALL_OW 173
// end ; end else
11996: GO 12050
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11998: LD_EXP 34
12002: PUSH
12003: LD_VAR 0 1
12007: ARRAY
12008: PUSH
12009: LD_VAR 0 3
12013: PUSH
12014: LD_VAR 0 1
12018: ARRAY
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: LD_INT 13
12026: PUSH
12027: LD_INT 14
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 1
12036: PPUSH
12037: LD_INT 2
12039: PPUSH
12040: CALL_OW 12
12044: ARRAY
12045: PPUSH
12046: CALL_OW 173
// end ; end ;
12050: GO 11791
12052: POP
12053: POP
// end ;
12054: PPOPN 3
12056: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
12057: LD_EXP 41
12061: PUSH
12062: LD_INT 0
12064: EQUAL
12065: IFFALSE 12255
12067: GO 12069
12069: DISABLE
12070: LD_INT 0
12072: PPUSH
12073: PPUSH
// begin enable ;
12074: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12075: LD_ADDR_VAR 0 1
12079: PUSH
12080: LD_INT 13
12082: PPUSH
12083: LD_INT 22
12085: PUSH
12086: LD_INT 3
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: PPUSH
12096: CALL_OW 70
12100: PUSH
12101: FOR_IN
12102: IFFALSE 12163
// begin for j in RuScientists do
12104: LD_ADDR_VAR 0 2
12108: PUSH
12109: LD_EXP 34
12113: PUSH
12114: FOR_IN
12115: IFFALSE 12150
// if j = i then
12117: LD_VAR 0 2
12121: PUSH
12122: LD_VAR 0 1
12126: EQUAL
12127: IFFALSE 12148
// RuScientists = RuScientists diff [ i ] ;
12129: LD_ADDR_EXP 34
12133: PUSH
12134: LD_EXP 34
12138: PUSH
12139: LD_VAR 0 1
12143: PUSH
12144: EMPTY
12145: LIST
12146: DIFF
12147: ST_TO_ADDR
12148: GO 12114
12150: POP
12151: POP
// RemoveUnit ( i ) ;
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL_OW 64
// end ;
12161: GO 12101
12163: POP
12164: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12165: LD_ADDR_VAR 0 1
12169: PUSH
12170: LD_INT 14
12172: PPUSH
12173: LD_INT 22
12175: PUSH
12176: LD_INT 3
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: PPUSH
12186: CALL_OW 70
12190: PUSH
12191: FOR_IN
12192: IFFALSE 12253
// begin for j in RuScientists do
12194: LD_ADDR_VAR 0 2
12198: PUSH
12199: LD_EXP 34
12203: PUSH
12204: FOR_IN
12205: IFFALSE 12240
// if j = i then
12207: LD_VAR 0 2
12211: PUSH
12212: LD_VAR 0 1
12216: EQUAL
12217: IFFALSE 12238
// RuScientists = RuScientists diff [ i ] ;
12219: LD_ADDR_EXP 34
12223: PUSH
12224: LD_EXP 34
12228: PUSH
12229: LD_VAR 0 1
12233: PUSH
12234: EMPTY
12235: LIST
12236: DIFF
12237: ST_TO_ADDR
12238: GO 12204
12240: POP
12241: POP
// RemoveUnit ( i ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL_OW 64
// end ;
12251: GO 12191
12253: POP
12254: POP
// end ; end_of_file
12255: PPOPN 2
12257: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12258: LD_INT 0
12260: PPUSH
12261: PPUSH
// if exist_mode then
12262: LD_VAR 0 2
12266: IFFALSE 12285
// unit := CreateCharacter ( ident ) else
12268: LD_ADDR_VAR 0 4
12272: PUSH
12273: LD_VAR 0 1
12277: PPUSH
12278: CALL_OW 34
12282: ST_TO_ADDR
12283: GO 12300
// unit := NewCharacter ( ident ) ;
12285: LD_ADDR_VAR 0 4
12289: PUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL_OW 25
12299: ST_TO_ADDR
// result := unit ;
12300: LD_ADDR_VAR 0 3
12304: PUSH
12305: LD_VAR 0 4
12309: ST_TO_ADDR
// end ;
12310: LD_VAR 0 3
12314: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
// for i in charactersList do
12319: LD_ADDR_VAR 0 4
12323: PUSH
12324: LD_VAR 0 1
12328: PUSH
12329: FOR_IN
12330: IFFALSE 12359
// begin if IsOk ( i ) then
12332: LD_VAR 0 4
12336: PPUSH
12337: CALL_OW 302
12341: IFFALSE 12357
// SaveCharacters ( i , ident ) ;
12343: LD_VAR 0 4
12347: PPUSH
12348: LD_VAR 0 2
12352: PPUSH
12353: CALL_OW 38
// end ;
12357: GO 12329
12359: POP
12360: POP
// end ;
12361: LD_VAR 0 3
12365: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12366: LD_INT 0
12368: PPUSH
12369: PPUSH
12370: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12371: LD_ADDR_VAR 0 1
12375: PUSH
12376: LD_VAR 0 1
12380: PUSH
12381: LD_EXP 1
12385: PUSH
12386: LD_EXP 7
12390: PUSH
12391: LD_EXP 3
12395: PUSH
12396: LD_EXP 4
12400: PUSH
12401: LD_EXP 5
12405: PUSH
12406: LD_EXP 2
12410: PUSH
12411: LD_EXP 12
12415: PUSH
12416: LD_EXP 13
12420: PUSH
12421: LD_EXP 9
12425: PUSH
12426: LD_EXP 11
12430: PUSH
12431: LD_EXP 6
12435: PUSH
12436: LD_EXP 8
12440: PUSH
12441: LD_EXP 10
12445: PUSH
12446: LD_EXP 22
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: DIFF
12467: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
12468: LD_ADDR_VAR 0 6
12472: PUSH
12473: LD_INT 1
12475: PPUSH
12476: LD_VAR 0 1
12480: PPUSH
12481: CALL_OW 12
12485: ST_TO_ADDR
// for i = 1 to characters do
12486: LD_ADDR_VAR 0 5
12490: PUSH
12491: DOUBLE
12492: LD_INT 1
12494: DEC
12495: ST_TO_ADDR
12496: LD_VAR 0 1
12500: PUSH
12501: FOR_TO
12502: IFFALSE 12612
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
12504: LD_VAR 0 5
12508: PUSH
12509: LD_VAR 0 6
12513: EQUAL
12514: PUSH
12515: LD_VAR 0 1
12519: PUSH
12520: LD_VAR 0 5
12524: ARRAY
12525: PPUSH
12526: CALL_OW 258
12530: PUSH
12531: LD_INT 1
12533: EQUAL
12534: AND
12535: IFFALSE 12557
// Say ( characters [ i ] , dialogMID ) ;
12537: LD_VAR 0 1
12541: PUSH
12542: LD_VAR 0 5
12546: ARRAY
12547: PPUSH
12548: LD_VAR 0 2
12552: PPUSH
12553: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
12557: LD_VAR 0 5
12561: PUSH
12562: LD_VAR 0 6
12566: EQUAL
12567: PUSH
12568: LD_VAR 0 1
12572: PUSH
12573: LD_VAR 0 5
12577: ARRAY
12578: PPUSH
12579: CALL_OW 258
12583: PUSH
12584: LD_INT 2
12586: EQUAL
12587: AND
12588: IFFALSE 12610
// Say ( characters [ i ] , dialogFID ) ;
12590: LD_VAR 0 1
12594: PUSH
12595: LD_VAR 0 5
12599: ARRAY
12600: PPUSH
12601: LD_VAR 0 3
12605: PPUSH
12606: CALL_OW 88
// end ;
12610: GO 12501
12612: POP
12613: POP
// end ;
12614: LD_VAR 0 4
12618: RET
// export function PrepareDifficulty ; var tmp ; begin
12619: LD_INT 0
12621: PPUSH
12622: PPUSH
// if Difficulty = 1 then
12623: LD_OWVAR 67
12627: PUSH
12628: LD_INT 1
12630: EQUAL
12631: IFFALSE 12649
// begin RuSolMinLevel = 8 ;
12633: LD_ADDR_EXP 36
12637: PUSH
12638: LD_INT 8
12640: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12641: LD_ADDR_EXP 37
12645: PUSH
12646: LD_INT 10
12648: ST_TO_ADDR
// end ; if Difficulty = 2 then
12649: LD_OWVAR 67
12653: PUSH
12654: LD_INT 2
12656: EQUAL
12657: IFFALSE 12751
// begin RuSolMinLevel = 9 ;
12659: LD_ADDR_EXP 36
12663: PUSH
12664: LD_INT 9
12666: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12667: LD_ADDR_EXP 37
12671: PUSH
12672: LD_INT 10
12674: ST_TO_ADDR
// uc_nation = 3 ;
12675: LD_ADDR_OWVAR 21
12679: PUSH
12680: LD_INT 3
12682: ST_TO_ADDR
// uc_side = 3 ;
12683: LD_ADDR_OWVAR 20
12687: PUSH
12688: LD_INT 3
12690: ST_TO_ADDR
// bc_level = 10 ;
12691: LD_ADDR_OWVAR 43
12695: PUSH
12696: LD_INT 10
12698: ST_TO_ADDR
// bc_type = b_turret ;
12699: LD_ADDR_OWVAR 42
12703: PUSH
12704: LD_INT 33
12706: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12707: LD_ADDR_VAR 0 2
12711: PUSH
12712: LD_INT 86
12714: PPUSH
12715: LD_INT 34
12717: PPUSH
12718: LD_INT 2
12720: PPUSH
12721: CALL_OW 47
12725: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12726: LD_VAR 0 2
12730: PPUSH
12731: LD_INT 49
12733: PPUSH
12734: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12738: LD_INT 64
12740: PPUSH
12741: LD_INT 3
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 322
// end ; if Difficulty = 3 then
12751: LD_OWVAR 67
12755: PUSH
12756: LD_INT 3
12758: EQUAL
12759: IFFALSE 12897
// begin RuSolMinLevel = 10 ;
12761: LD_ADDR_EXP 36
12765: PUSH
12766: LD_INT 10
12768: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12769: LD_ADDR_EXP 37
12773: PUSH
12774: LD_INT 10
12776: ST_TO_ADDR
// uc_nation = 3 ;
12777: LD_ADDR_OWVAR 21
12781: PUSH
12782: LD_INT 3
12784: ST_TO_ADDR
// uc_side = 3 ;
12785: LD_ADDR_OWVAR 20
12789: PUSH
12790: LD_INT 3
12792: ST_TO_ADDR
// bc_level = 10 ;
12793: LD_ADDR_OWVAR 43
12797: PUSH
12798: LD_INT 10
12800: ST_TO_ADDR
// bc_type = b_turret ;
12801: LD_ADDR_OWVAR 42
12805: PUSH
12806: LD_INT 33
12808: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12809: LD_ADDR_VAR 0 2
12813: PUSH
12814: LD_INT 86
12816: PPUSH
12817: LD_INT 34
12819: PPUSH
12820: LD_INT 2
12822: PPUSH
12823: CALL_OW 47
12827: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12828: LD_VAR 0 2
12832: PPUSH
12833: LD_INT 49
12835: PPUSH
12836: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12840: LD_ADDR_VAR 0 2
12844: PUSH
12845: LD_INT 93
12847: PPUSH
12848: LD_INT 31
12850: PPUSH
12851: LD_INT 2
12853: PPUSH
12854: CALL_OW 47
12858: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12859: LD_VAR 0 2
12863: PPUSH
12864: LD_INT 49
12866: PPUSH
12867: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12871: LD_INT 64
12873: PPUSH
12874: LD_INT 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12884: LD_INT 65
12886: PPUSH
12887: LD_INT 3
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 322
// end ; end ;
12897: LD_VAR 0 1
12901: RET
// export function ShowQuery1 ; begin
12902: LD_INT 0
12904: PPUSH
// case query ( Q1 ) of 1 :
12905: LD_STRING Q1
12907: PPUSH
12908: CALL_OW 97
12912: PUSH
12913: LD_INT 1
12915: DOUBLE
12916: EQUAL
12917: IFTRUE 12921
12919: GO 12932
12921: POP
// result = 1 ; 2 :
12922: LD_ADDR_VAR 0 1
12926: PUSH
12927: LD_INT 1
12929: ST_TO_ADDR
12930: GO 12971
12932: LD_INT 2
12934: DOUBLE
12935: EQUAL
12936: IFTRUE 12940
12938: GO 12951
12940: POP
// result = 2 ; 3 :
12941: LD_ADDR_VAR 0 1
12945: PUSH
12946: LD_INT 2
12948: ST_TO_ADDR
12949: GO 12971
12951: LD_INT 3
12953: DOUBLE
12954: EQUAL
12955: IFTRUE 12959
12957: GO 12970
12959: POP
// result = 3 ; end ;
12960: LD_ADDR_VAR 0 1
12964: PUSH
12965: LD_INT 3
12967: ST_TO_ADDR
12968: GO 12971
12970: POP
// end ;
12971: LD_VAR 0 1
12975: RET
// export function ShowQuery2 ; begin
12976: LD_INT 0
12978: PPUSH
// case query ( Q1a ) of 1 :
12979: LD_STRING Q1a
12981: PPUSH
12982: CALL_OW 97
12986: PUSH
12987: LD_INT 1
12989: DOUBLE
12990: EQUAL
12991: IFTRUE 12995
12993: GO 13006
12995: POP
// result = 1 ; 2 :
12996: LD_ADDR_VAR 0 1
13000: PUSH
13001: LD_INT 1
13003: ST_TO_ADDR
13004: GO 13045
13006: LD_INT 2
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13025
13014: POP
// result = 2 ; 3 :
13015: LD_ADDR_VAR 0 1
13019: PUSH
13020: LD_INT 2
13022: ST_TO_ADDR
13023: GO 13045
13025: LD_INT 3
13027: DOUBLE
13028: EQUAL
13029: IFTRUE 13033
13031: GO 13044
13033: POP
// result = 3 ; end ;
13034: LD_ADDR_VAR 0 1
13038: PUSH
13039: LD_INT 3
13041: ST_TO_ADDR
13042: GO 13045
13044: POP
// end ;
13045: LD_VAR 0 1
13049: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13050: LD_INT 0
13052: PPUSH
13053: PPUSH
13054: PPUSH
13055: PPUSH
13056: PPUSH
// for i = 1 to count do
13057: LD_ADDR_VAR 0 8
13061: PUSH
13062: DOUBLE
13063: LD_INT 1
13065: DEC
13066: ST_TO_ADDR
13067: LD_VAR 0 6
13071: PUSH
13072: FOR_TO
13073: IFFALSE 13154
// begin uc_side = side ;
13075: LD_ADDR_OWVAR 20
13079: PUSH
13080: LD_VAR 0 1
13084: ST_TO_ADDR
// uc_nation = nation ;
13085: LD_ADDR_OWVAR 21
13089: PUSH
13090: LD_VAR 0 2
13094: ST_TO_ADDR
// hc_gallery =  ;
13095: LD_ADDR_OWVAR 33
13099: PUSH
13100: LD_STRING 
13102: ST_TO_ADDR
// hc_name =  ;
13103: LD_ADDR_OWVAR 26
13107: PUSH
13108: LD_STRING 
13110: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13111: LD_INT 0
13113: PPUSH
13114: LD_VAR 0 5
13118: PPUSH
13119: LD_VAR 0 4
13123: PPUSH
13124: CALL_OW 380
// un = CreateHuman ;
13128: LD_ADDR_VAR 0 10
13132: PUSH
13133: CALL_OW 44
13137: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13138: LD_VAR 0 10
13142: PPUSH
13143: LD_VAR 0 3
13147: PPUSH
13148: CALL_OW 52
// end ;
13152: GO 13072
13154: POP
13155: POP
// end ;
13156: LD_VAR 0 7
13160: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13161: LD_INT 0
13163: PPUSH
13164: PPUSH
13165: PPUSH
13166: PPUSH
// for i = 1 to 72 do
13167: LD_ADDR_VAR 0 5
13171: PUSH
13172: DOUBLE
13173: LD_INT 1
13175: DEC
13176: ST_TO_ADDR
13177: LD_INT 72
13179: PUSH
13180: FOR_TO
13181: IFFALSE 13239
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13183: LD_VAR 0 5
13187: PPUSH
13188: LD_VAR 0 1
13192: PPUSH
13193: CALL_OW 321
13197: PUSH
13198: LD_INT 1
13200: EQUAL
13201: PUSH
13202: LD_VAR 0 5
13206: PPUSH
13207: LD_VAR 0 3
13211: PPUSH
13212: CALL_OW 482
13216: PUSH
13217: LD_INT 1
13219: EQUAL
13220: AND
13221: IFFALSE 13237
// AddComResearch ( lab , i ) ;
13223: LD_VAR 0 2
13227: PPUSH
13228: LD_VAR 0 5
13232: PPUSH
13233: CALL_OW 184
13237: GO 13180
13239: POP
13240: POP
// end ;
13241: LD_VAR 0 4
13245: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13246: LD_INT 0
13248: PPUSH
13249: PPUSH
13250: PPUSH
13251: PPUSH
13252: PPUSH
13253: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13254: LD_ADDR_VAR 0 8
13258: PUSH
13259: LD_VAR 0 2
13263: PPUSH
13264: CALL_OW 313
13268: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13269: LD_ADDR_VAR 0 9
13273: PUSH
13274: LD_VAR 0 3
13278: PPUSH
13279: LD_INT 22
13281: PUSH
13282: LD_VAR 0 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 25
13293: PUSH
13294: LD_INT 2
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: LD_INT 24
13303: PUSH
13304: LD_INT 750
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: LD_INT 54
13316: PUSH
13317: EMPTY
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: PPUSH
13330: CALL_OW 70
13334: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13335: LD_ADDR_VAR 0 6
13339: PUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 22
13347: PUSH
13348: LD_VAR 0 1
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 21
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 3
13369: PUSH
13370: LD_INT 24
13372: PUSH
13373: LD_INT 1000
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: PPUSH
13392: CALL_OW 70
13396: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13397: LD_VAR 0 6
13401: NOT
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_VAR 0 1
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 25
13417: PUSH
13418: LD_INT 2
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 24
13427: PUSH
13428: LD_INT 250
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 69
13444: NOT
13445: AND
13446: IFFALSE 13450
// exit ;
13448: GO 13632
// if buildings_list > 0 and engineerOkInside then
13450: LD_VAR 0 6
13454: PUSH
13455: LD_INT 0
13457: GREATER
13458: PUSH
13459: LD_VAR 0 8
13463: AND
13464: IFFALSE 13475
// ComExitBuilding ( engineerOkInside ) ;
13466: LD_VAR 0 8
13470: PPUSH
13471: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13475: LD_VAR 0 6
13479: PUSH
13480: LD_INT 0
13482: GREATER
13483: PUSH
13484: LD_VAR 0 9
13488: PUSH
13489: LD_INT 0
13491: GREATER
13492: AND
13493: IFFALSE 13513
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13495: LD_VAR 0 9
13499: PPUSH
13500: LD_VAR 0 6
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13513: LD_VAR 0 6
13517: PUSH
13518: LD_INT 0
13520: EQUAL
13521: PUSH
13522: LD_VAR 0 4
13526: PUSH
13527: LD_INT 0
13529: EQUAL
13530: AND
13531: PUSH
13532: LD_VAR 0 9
13536: PUSH
13537: LD_INT 0
13539: GREATER
13540: AND
13541: IFFALSE 13557
// ComEnterUnit ( engineerOkOutside , building ) ;
13543: LD_VAR 0 9
13547: PPUSH
13548: LD_VAR 0 2
13552: PPUSH
13553: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13557: LD_VAR 0 9
13561: PUSH
13562: LD_INT 0
13564: GREATER
13565: PUSH
13566: LD_VAR 0 6
13570: PUSH
13571: LD_INT 0
13573: EQUAL
13574: AND
13575: PUSH
13576: LD_VAR 0 4
13580: PUSH
13581: LD_INT 0
13583: GREATER
13584: AND
13585: IFFALSE 13632
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13587: LD_VAR 0 9
13591: PPUSH
13592: LD_VAR 0 4
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_VAR 0 4
13605: PUSH
13606: LD_INT 2
13608: ARRAY
13609: PPUSH
13610: LD_VAR 0 4
13614: PUSH
13615: LD_INT 3
13617: ARRAY
13618: PPUSH
13619: LD_VAR 0 4
13623: PUSH
13624: LD_INT 4
13626: ARRAY
13627: PPUSH
13628: CALL_OW 145
// end ;
13632: LD_VAR 0 5
13636: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13637: LD_INT 0
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
13647: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13648: LD_ADDR_VAR 0 6
13652: PUSH
13653: LD_INT 22
13655: PUSH
13656: LD_VAR 0 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 25
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 24
13677: PUSH
13678: LD_INT 251
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: PUSH
13695: LD_EXP 34
13699: PUSH
13700: EMPTY
13701: LIST
13702: DIFF
13703: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13704: LD_ADDR_VAR 0 7
13708: PUSH
13709: LD_VAR 0 3
13713: PPUSH
13714: LD_INT 22
13716: PUSH
13717: LD_VAR 0 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 25
13728: PUSH
13729: LD_INT 4
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 50
13738: PUSH
13739: EMPTY
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: PPUSH
13747: CALL_OW 70
13751: PUSH
13752: LD_EXP 34
13756: PUSH
13757: EMPTY
13758: LIST
13759: DIFF
13760: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13761: LD_ADDR_VAR 0 10
13765: PUSH
13766: LD_VAR 0 3
13770: PPUSH
13771: LD_INT 22
13773: PUSH
13774: LD_VAR 0 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 21
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 3
13795: PUSH
13796: LD_INT 24
13798: PUSH
13799: LD_INT 750
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: PPUSH
13815: CALL_OW 70
13819: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13820: LD_ADDR_VAR 0 11
13824: PUSH
13825: LD_VAR 0 2
13829: PPUSH
13830: LD_INT 22
13832: PUSH
13833: LD_VAR 0 1
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 21
13844: PUSH
13845: LD_INT 1
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 3
13854: PUSH
13855: LD_INT 24
13857: PUSH
13858: LD_INT 1000
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 70
13878: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13879: LD_VAR 0 10
13883: PUSH
13884: LD_INT 0
13886: GREATER
13887: PUSH
13888: LD_VAR 0 6
13892: PUSH
13893: LD_INT 0
13895: GREATER
13896: AND
13897: IFFALSE 13913
// ComMoveToArea ( damageUnits , healArea ) ;
13899: LD_VAR 0 10
13903: PPUSH
13904: LD_VAR 0 2
13908: PPUSH
13909: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13913: LD_VAR 0 11
13917: PUSH
13918: LD_INT 0
13920: GREATER
13921: PUSH
13922: LD_VAR 0 7
13926: PUSH
13927: LD_INT 0
13929: GREATER
13930: AND
13931: IFFALSE 13951
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13933: LD_VAR 0 7
13937: PPUSH
13938: LD_VAR 0 11
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: PPUSH
13947: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13951: LD_VAR 0 10
13955: PUSH
13956: LD_INT 0
13958: EQUAL
13959: PUSH
13960: LD_VAR 0 11
13964: PUSH
13965: LD_INT 0
13967: EQUAL
13968: AND
13969: PUSH
13970: LD_VAR 0 7
13974: PUSH
13975: LD_INT 0
13977: GREATER
13978: AND
13979: IFFALSE 14084
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13981: LD_ADDR_VAR 0 12
13985: PUSH
13986: LD_INT 22
13988: PUSH
13989: LD_VAR 0 1
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 21
14000: PUSH
14001: LD_INT 3
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 30
14010: PUSH
14011: LD_INT 8
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 69
14027: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14028: LD_ADDR_VAR 0 13
14032: PUSH
14033: LD_INT 1
14035: PPUSH
14036: LD_VAR 0 12
14040: PPUSH
14041: CALL_OW 12
14045: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14046: LD_VAR 0 7
14050: PPUSH
14051: LD_INT 3
14053: PUSH
14054: LD_INT 60
14056: PUSH
14057: EMPTY
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 72
14068: PPUSH
14069: LD_VAR 0 12
14073: PUSH
14074: LD_VAR 0 13
14078: ARRAY
14079: PPUSH
14080: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_INT 22
14091: PUSH
14092: LD_VAR 0 1
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 25
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 24
14113: PUSH
14114: LD_INT 751
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: PPUSH
14126: CALL_OW 70
14130: PUSH
14131: LD_INT 0
14133: GREATER
14134: PUSH
14135: LD_INT 21
14137: PPUSH
14138: CALL_OW 302
14142: AND
14143: PUSH
14144: LD_INT 21
14146: PPUSH
14147: CALL_OW 255
14151: PUSH
14152: LD_INT 3
14154: EQUAL
14155: AND
14156: IFFALSE 14212
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14158: LD_VAR 0 3
14162: PPUSH
14163: LD_INT 22
14165: PUSH
14166: LD_VAR 0 1
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 25
14177: PUSH
14178: LD_INT 3
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 24
14187: PUSH
14188: LD_INT 751
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: PPUSH
14200: CALL_OW 70
14204: PPUSH
14205: LD_INT 21
14207: PPUSH
14208: CALL_OW 120
// end ;
14212: LD_VAR 0 5
14216: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14217: LD_INT 0
14219: PPUSH
14220: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14221: LD_INT 22
14223: PUSH
14224: LD_VAR 0 1
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 21
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PPUSH
14247: CALL_OW 69
14251: PUSH
14252: LD_INT 18
14254: PPUSH
14255: LD_INT 22
14257: PUSH
14258: LD_VAR 0 1
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 21
14269: PUSH
14270: LD_INT 2
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 70
14285: PUSH
14286: LD_VAR 0 3
14290: LESSEQUAL
14291: DIFF
14292: IFFALSE 14359
// for i = 1 to vehCount do
14294: LD_ADDR_VAR 0 9
14298: PUSH
14299: DOUBLE
14300: LD_INT 1
14302: DEC
14303: ST_TO_ADDR
14304: LD_VAR 0 3
14308: PUSH
14309: FOR_TO
14310: IFFALSE 14357
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14312: LD_VAR 0 2
14316: PPUSH
14317: LD_VAR 0 7
14321: PPUSH
14322: LD_VAR 0 5
14326: PPUSH
14327: LD_VAR 0 6
14331: PPUSH
14332: LD_VAR 0 4
14336: PUSH
14337: LD_INT 1
14339: PPUSH
14340: LD_VAR 0 4
14344: PPUSH
14345: CALL_OW 12
14349: ARRAY
14350: PPUSH
14351: CALL_OW 185
14355: GO 14309
14357: POP
14358: POP
// end ;
14359: LD_VAR 0 8
14363: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14364: LD_INT 0
14366: PPUSH
14367: PPUSH
14368: PPUSH
14369: PPUSH
14370: PPUSH
14371: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14372: LD_EXP 39
14376: PUSH
14377: LD_INT 3
14379: PUSH
14380: LD_INT 4
14382: PUSH
14383: LD_INT 4
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: LD_OWVAR 67
14395: ARRAY
14396: GREATEREQUAL
14397: PUSH
14398: LD_EXP 40
14402: PUSH
14403: LD_INT 1
14405: PUSH
14406: LD_INT 2
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: LD_OWVAR 67
14421: ARRAY
14422: GREATEREQUAL
14423: AND
14424: IFFALSE 14657
// begin repeat wait ( 0 0$3 ) ;
14426: LD_INT 105
14428: PPUSH
14429: CALL_OW 67
// for j in russianTanks do
14433: LD_ADDR_VAR 0 4
14437: PUSH
14438: LD_EXP 39
14442: PUSH
14443: FOR_IN
14444: IFFALSE 14645
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14446: LD_ADDR_VAR 0 6
14450: PUSH
14451: LD_INT 81
14453: PUSH
14454: LD_VAR 0 1
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 101
14465: PUSH
14466: LD_INT 1
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 69
14481: PPUSH
14482: LD_VAR 0 4
14486: PPUSH
14487: CALL_OW 74
14491: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14492: LD_ADDR_VAR 0 7
14496: PUSH
14497: LD_INT 81
14499: PUSH
14500: LD_VAR 0 1
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 101
14511: PUSH
14512: LD_INT 1
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: LD_INT 59
14524: PUSH
14525: EMPTY
14526: LIST
14527: PUSH
14528: LD_INT 21
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 21
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: PPUSH
14562: CALL_OW 69
14566: PPUSH
14567: LD_VAR 0 4
14571: PPUSH
14572: CALL_OW 74
14576: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14577: LD_VAR 0 4
14581: PPUSH
14582: LD_VAR 0 6
14586: PPUSH
14587: CALL_OW 296
14591: PUSH
14592: LD_INT 8
14594: PLUS
14595: PUSH
14596: LD_VAR 0 4
14600: PPUSH
14601: LD_VAR 0 7
14605: PPUSH
14606: CALL_OW 296
14610: LESS
14611: IFFALSE 14629
// ComAttackUnit ( j , target1 ) else
14613: LD_VAR 0 4
14617: PPUSH
14618: LD_VAR 0 6
14622: PPUSH
14623: CALL_OW 115
14627: GO 14643
// ComAttackUnit ( j , target2 ) ;
14629: LD_VAR 0 4
14633: PPUSH
14634: LD_VAR 0 7
14638: PPUSH
14639: CALL_OW 115
// end ;
14643: GO 14443
14645: POP
14646: POP
// until russianTanks = 0 ;
14647: LD_EXP 39
14651: PUSH
14652: LD_INT 0
14654: EQUAL
14655: IFFALSE 14426
// end ; end ;
14657: LD_VAR 0 2
14661: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14662: LD_INT 0
14664: PPUSH
14665: PPUSH
14666: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14667: LD_EXP 39
14671: PUSH
14672: LD_INT 1
14674: GREATEREQUAL
14675: PUSH
14676: LD_EXP 40
14680: PUSH
14681: LD_INT 1
14683: PUSH
14684: LD_INT 2
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: PUSH
14695: LD_OWVAR 67
14699: ARRAY
14700: GREATEREQUAL
14701: AND
14702: IFFALSE 14841
// repeat wait ( 0 0$3 ) ;
14704: LD_INT 105
14706: PPUSH
14707: CALL_OW 67
// if russianTimeLapsers > 0 then
14711: LD_EXP 40
14715: PUSH
14716: LD_INT 0
14718: GREATER
14719: IFFALSE 14831
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
14721: LD_ADDR_VAR 0 3
14725: PUSH
14726: LD_EXP 40
14730: PPUSH
14731: LD_INT 3
14733: PUSH
14734: LD_INT 60
14736: PUSH
14737: EMPTY
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PPUSH
14744: CALL_OW 72
14748: PUSH
14749: FOR_IN
14750: IFFALSE 14829
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14752: LD_ADDR_VAR 0 4
14756: PUSH
14757: LD_INT 81
14759: PUSH
14760: LD_VAR 0 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 101
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: PPUSH
14788: LD_VAR 0 3
14792: PPUSH
14793: CALL_OW 74
14797: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
14798: LD_VAR 0 3
14802: PPUSH
14803: LD_VAR 0 4
14807: PPUSH
14808: CALL_OW 250
14812: PPUSH
14813: LD_VAR 0 4
14817: PPUSH
14818: CALL_OW 251
14822: PPUSH
14823: CALL_OW 111
// end ;
14827: GO 14749
14829: POP
14830: POP
// until russianTimeLapsers = 0 ;
14831: LD_EXP 40
14835: PUSH
14836: LD_INT 0
14838: EQUAL
14839: IFFALSE 14704
// end ;
14841: LD_VAR 0 2
14845: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14846: LD_INT 0
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
14853: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14854: LD_ADDR_VAR 0 6
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_VAR 0 1
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 25
14873: PUSH
14874: LD_INT 9
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14890: LD_ADDR_VAR 0 7
14894: PUSH
14895: LD_INT 81
14897: PUSH
14898: LD_VAR 0 1
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: LD_INT 21
14912: PUSH
14913: LD_INT 3
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 69
14932: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14933: LD_ADDR_VAR 0 4
14937: PUSH
14938: LD_INT 1
14940: PPUSH
14941: LD_INT 3
14943: PPUSH
14944: CALL_OW 12
14948: ST_TO_ADDR
// for i = 1 to list do
14949: LD_ADDR_VAR 0 5
14953: PUSH
14954: DOUBLE
14955: LD_INT 1
14957: DEC
14958: ST_TO_ADDR
14959: LD_VAR 0 6
14963: PUSH
14964: FOR_TO
14965: IFFALSE 15167
// for ta in filter do
14967: LD_ADDR_VAR 0 3
14971: PUSH
14972: LD_VAR 0 7
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15163
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14980: LD_VAR 0 6
14984: PUSH
14985: LD_VAR 0 5
14989: ARRAY
14990: PPUSH
14991: LD_VAR 0 3
14995: PPUSH
14996: CALL_OW 296
15000: PUSH
15001: LD_INT 15
15003: LESSEQUAL
15004: IFFALSE 15161
// begin case c of 1 :
15006: LD_VAR 0 4
15010: PUSH
15011: LD_INT 1
15013: DOUBLE
15014: EQUAL
15015: IFTRUE 15019
15017: GO 15057
15019: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15020: LD_VAR 0 6
15024: PUSH
15025: LD_VAR 0 5
15029: ARRAY
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: CALL_OW 250
15040: PPUSH
15041: LD_VAR 0 3
15045: PPUSH
15046: CALL_OW 251
15050: PPUSH
15051: CALL_OW 154
15055: GO 15161
15057: LD_INT 2
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15129
15065: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15066: LD_VAR 0 6
15070: PUSH
15071: LD_VAR 0 5
15075: ARRAY
15076: PPUSH
15077: LD_VAR 0 3
15081: PPUSH
15082: CALL_OW 250
15086: PUSH
15087: LD_INT 1
15089: NEG
15090: PPUSH
15091: LD_INT 1
15093: PPUSH
15094: CALL_OW 12
15098: PLUS
15099: PPUSH
15100: LD_VAR 0 3
15104: PPUSH
15105: CALL_OW 251
15109: PUSH
15110: LD_INT 1
15112: NEG
15113: PPUSH
15114: LD_INT 1
15116: PPUSH
15117: CALL_OW 12
15121: PLUS
15122: PPUSH
15123: CALL_OW 153
15127: GO 15161
15129: LD_INT 3
15131: DOUBLE
15132: EQUAL
15133: IFTRUE 15137
15135: GO 15160
15137: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15138: LD_VAR 0 6
15142: PUSH
15143: LD_VAR 0 5
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 3
15153: PPUSH
15154: CALL_OW 115
15158: GO 15161
15160: POP
// end ; end ;
15161: GO 14977
15163: POP
15164: POP
15165: GO 14964
15167: POP
15168: POP
// end ;
15169: LD_VAR 0 2
15173: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15174: LD_INT 0
15176: PPUSH
15177: PPUSH
15178: PPUSH
15179: PPUSH
// r := 100 ;
15180: LD_ADDR_VAR 0 5
15184: PUSH
15185: LD_INT 100
15187: ST_TO_ADDR
// x := 0 ;
15188: LD_ADDR_VAR 0 6
15192: PUSH
15193: LD_INT 0
15195: ST_TO_ADDR
// while ( x < n ) do
15196: LD_VAR 0 6
15200: PUSH
15201: LD_VAR 0 2
15205: LESS
15206: IFFALSE 15493
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15208: LD_ADDR_VAR 0 4
15212: PUSH
15213: DOUBLE
15214: LD_INT 1
15216: DEC
15217: ST_TO_ADDR
15218: LD_VAR 0 1
15222: PPUSH
15223: LD_INT 0
15225: PPUSH
15226: CALL_OW 517
15230: PUSH
15231: LD_INT 1
15233: ARRAY
15234: PUSH
15235: FOR_TO
15236: IFFALSE 15489
// begin if r > 50 then
15238: LD_VAR 0 5
15242: PUSH
15243: LD_INT 50
15245: GREATER
15246: IFFALSE 15465
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_INT 0
15255: PPUSH
15256: CALL_OW 517
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PUSH
15265: LD_VAR 0 4
15269: ARRAY
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: LD_INT 0
15278: PPUSH
15279: CALL_OW 517
15283: PUSH
15284: LD_INT 2
15286: ARRAY
15287: PUSH
15288: LD_VAR 0 4
15292: ARRAY
15293: PPUSH
15294: CALL_OW 458
15298: NOT
15299: IFFALSE 15449
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15301: LD_VAR 0 1
15305: PPUSH
15306: LD_INT 0
15308: PPUSH
15309: CALL_OW 517
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: PUSH
15318: LD_VAR 0 4
15322: ARRAY
15323: PPUSH
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_INT 0
15331: PPUSH
15332: CALL_OW 517
15336: PUSH
15337: LD_INT 2
15339: ARRAY
15340: PUSH
15341: LD_VAR 0 4
15345: ARRAY
15346: PPUSH
15347: LD_INT 5
15349: PPUSH
15350: LD_INT 0
15352: PPUSH
15353: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15357: LD_ADDR_EXP 42
15361: PUSH
15362: LD_EXP 42
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: LD_VAR 0 1
15374: PPUSH
15375: LD_INT 0
15377: PPUSH
15378: CALL_OW 517
15382: PUSH
15383: LD_INT 1
15385: ARRAY
15386: PUSH
15387: LD_VAR 0 4
15391: ARRAY
15392: PUSH
15393: LD_VAR 0 1
15397: PPUSH
15398: LD_INT 0
15400: PPUSH
15401: CALL_OW 517
15405: PUSH
15406: LD_INT 2
15408: ARRAY
15409: PUSH
15410: LD_VAR 0 4
15414: ARRAY
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 2
15424: ST_TO_ADDR
// r := 0 ;
15425: LD_ADDR_VAR 0 5
15429: PUSH
15430: LD_INT 0
15432: ST_TO_ADDR
// x := x + 1 ;
15433: LD_ADDR_VAR 0 6
15437: PUSH
15438: LD_VAR 0 6
15442: PUSH
15443: LD_INT 1
15445: PLUS
15446: ST_TO_ADDR
// end else
15447: GO 15463
// r := r + 35 ;
15449: LD_ADDR_VAR 0 5
15453: PUSH
15454: LD_VAR 0 5
15458: PUSH
15459: LD_INT 35
15461: PLUS
15462: ST_TO_ADDR
// end else
15463: GO 15487
// r := r + rand ( 10 , 25 ) ;
15465: LD_ADDR_VAR 0 5
15469: PUSH
15470: LD_VAR 0 5
15474: PUSH
15475: LD_INT 10
15477: PPUSH
15478: LD_INT 25
15480: PPUSH
15481: CALL_OW 12
15485: PLUS
15486: ST_TO_ADDR
// end ;
15487: GO 15235
15489: POP
15490: POP
15491: GO 15196
// end ;
15493: LD_VAR 0 3
15497: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15498: LD_INT 0
15500: PPUSH
15501: PPUSH
15502: PPUSH
15503: PPUSH
// tmpTab = [ ] ;
15504: LD_ADDR_VAR 0 6
15508: PUSH
15509: EMPTY
15510: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15511: LD_INT 22
15513: PUSH
15514: LD_VAR 0 1
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 30
15525: PUSH
15526: LD_INT 32
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: PUSH
15542: LD_INT 0
15544: GREATER
15545: IFFALSE 15628
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15547: LD_ADDR_VAR 0 4
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_VAR 0 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 30
15566: PUSH
15567: LD_INT 32
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: FOR_IN
15584: IFFALSE 15626
// begin for j in UnitsInside ( i ) do
15586: LD_ADDR_VAR 0 5
15590: PUSH
15591: LD_VAR 0 4
15595: PPUSH
15596: CALL_OW 313
15600: PUSH
15601: FOR_IN
15602: IFFALSE 15622
// tmpTab = tmpTab ^ j ;
15604: LD_ADDR_VAR 0 6
15608: PUSH
15609: LD_VAR 0 6
15613: PUSH
15614: LD_VAR 0 5
15618: ADD
15619: ST_TO_ADDR
15620: GO 15601
15622: POP
15623: POP
// end ;
15624: GO 15583
15626: POP
15627: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15628: LD_VAR 0 6
15632: PPUSH
15633: LD_VAR 0 2
15637: PPUSH
15638: CALL_OW 250
15642: PPUSH
15643: LD_VAR 0 2
15647: PPUSH
15648: CALL_OW 251
15652: PPUSH
15653: CALL_OW 114
// end ;
15657: LD_VAR 0 3
15661: RET
// export function PrepareNature ; var i , un ; begin
15662: LD_INT 0
15664: PPUSH
15665: PPUSH
15666: PPUSH
// uc_side := 0 ;
15667: LD_ADDR_OWVAR 20
15671: PUSH
15672: LD_INT 0
15674: ST_TO_ADDR
// uc_nation := 0 ;
15675: LD_ADDR_OWVAR 21
15679: PUSH
15680: LD_INT 0
15682: ST_TO_ADDR
// InitHc ;
15683: CALL_OW 19
// hc_class := class_fish ;
15687: LD_ADDR_OWVAR 28
15691: PUSH
15692: LD_INT 20
15694: ST_TO_ADDR
// for i = 1 to 6 do
15695: LD_ADDR_VAR 0 2
15699: PUSH
15700: DOUBLE
15701: LD_INT 1
15703: DEC
15704: ST_TO_ADDR
15705: LD_INT 6
15707: PUSH
15708: FOR_TO
15709: IFFALSE 15728
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15711: CALL_OW 44
15715: PPUSH
15716: LD_INT 23
15718: PPUSH
15719: LD_INT 0
15721: PPUSH
15722: CALL_OW 49
15726: GO 15708
15728: POP
15729: POP
// for i = 1 to Difficulty + 2 do
15730: LD_ADDR_VAR 0 2
15734: PUSH
15735: DOUBLE
15736: LD_INT 1
15738: DEC
15739: ST_TO_ADDR
15740: LD_OWVAR 67
15744: PUSH
15745: LD_INT 2
15747: PLUS
15748: PUSH
15749: FOR_TO
15750: IFFALSE 15859
// begin hc_sex = sex_male ;
15752: LD_ADDR_OWVAR 27
15756: PUSH
15757: LD_INT 1
15759: ST_TO_ADDR
// uc_side = 0 ;
15760: LD_ADDR_OWVAR 20
15764: PUSH
15765: LD_INT 0
15767: ST_TO_ADDR
// uc_nation = nation_nature ;
15768: LD_ADDR_OWVAR 21
15772: PUSH
15773: LD_INT 0
15775: ST_TO_ADDR
// hc_class = class_tiger ;
15776: LD_ADDR_OWVAR 28
15780: PUSH
15781: LD_INT 14
15783: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15784: LD_ADDR_OWVAR 31
15788: PUSH
15789: LD_EXP 37
15793: PUSH
15794: LD_INT 0
15796: PUSH
15797: LD_INT 0
15799: PUSH
15800: LD_INT 0
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15809: LD_ADDR_OWVAR 35
15813: PUSH
15814: LD_INT 5
15816: NEG
15817: PPUSH
15818: LD_INT 5
15820: PPUSH
15821: CALL_OW 12
15825: PUSH
15826: LD_OWVAR 67
15830: MUL
15831: ST_TO_ADDR
// un = CreateHuman ;
15832: LD_ADDR_VAR 0 3
15836: PUSH
15837: CALL_OW 44
15841: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_INT 24
15849: PPUSH
15850: LD_INT 0
15852: PPUSH
15853: CALL_OW 49
// end ;
15857: GO 15749
15859: POP
15860: POP
// for i = 1 to rand ( 3 , 4 ) do
15861: LD_ADDR_VAR 0 2
15865: PUSH
15866: DOUBLE
15867: LD_INT 1
15869: DEC
15870: ST_TO_ADDR
15871: LD_INT 3
15873: PPUSH
15874: LD_INT 4
15876: PPUSH
15877: CALL_OW 12
15881: PUSH
15882: FOR_TO
15883: IFFALSE 15975
// begin hc_sex = sex_male ;
15885: LD_ADDR_OWVAR 27
15889: PUSH
15890: LD_INT 1
15892: ST_TO_ADDR
// uc_side = 0 ;
15893: LD_ADDR_OWVAR 20
15897: PUSH
15898: LD_INT 0
15900: ST_TO_ADDR
// uc_nation = nation_nature ;
15901: LD_ADDR_OWVAR 21
15905: PUSH
15906: LD_INT 0
15908: ST_TO_ADDR
// hc_class = 18 ;
15909: LD_ADDR_OWVAR 28
15913: PUSH
15914: LD_INT 18
15916: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15917: LD_ADDR_OWVAR 31
15921: PUSH
15922: LD_INT 0
15924: PUSH
15925: LD_INT 0
15927: PUSH
15928: LD_INT 0
15930: PUSH
15931: LD_INT 0
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: ST_TO_ADDR
// hc_agressivity = 0 ;
15940: LD_ADDR_OWVAR 35
15944: PUSH
15945: LD_INT 0
15947: ST_TO_ADDR
// un = CreateHuman ;
15948: LD_ADDR_VAR 0 3
15952: PUSH
15953: CALL_OW 44
15957: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15958: LD_VAR 0 3
15962: PPUSH
15963: LD_INT 24
15965: PPUSH
15966: LD_INT 0
15968: PPUSH
15969: CALL_OW 49
// end ;
15973: GO 15882
15975: POP
15976: POP
// for i = 1 to rand ( 1 , 3 ) do
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: DOUBLE
15983: LD_INT 1
15985: DEC
15986: ST_TO_ADDR
15987: LD_INT 1
15989: PPUSH
15990: LD_INT 3
15992: PPUSH
15993: CALL_OW 12
15997: PUSH
15998: FOR_TO
15999: IFFALSE 16147
// begin hc_sex = sex_male ;
16001: LD_ADDR_OWVAR 27
16005: PUSH
16006: LD_INT 1
16008: ST_TO_ADDR
// uc_side = 0 ;
16009: LD_ADDR_OWVAR 20
16013: PUSH
16014: LD_INT 0
16016: ST_TO_ADDR
// uc_nation = nation_nature ;
16017: LD_ADDR_OWVAR 21
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// hc_class = class_apeman ;
16025: LD_ADDR_OWVAR 28
16029: PUSH
16030: LD_INT 12
16032: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16033: LD_ADDR_OWVAR 31
16037: PUSH
16038: LD_EXP 36
16042: PPUSH
16043: LD_EXP 37
16047: PPUSH
16048: CALL_OW 12
16052: PUSH
16053: LD_EXP 36
16057: PPUSH
16058: LD_EXP 37
16062: PPUSH
16063: CALL_OW 12
16067: PUSH
16068: LD_EXP 36
16072: PPUSH
16073: LD_EXP 37
16077: PPUSH
16078: CALL_OW 12
16082: PUSH
16083: LD_EXP 36
16087: PPUSH
16088: LD_EXP 37
16092: PPUSH
16093: CALL_OW 12
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16104: LD_ADDR_OWVAR 35
16108: PUSH
16109: LD_INT 1
16111: PPUSH
16112: LD_INT 20
16114: PPUSH
16115: CALL_OW 12
16119: ST_TO_ADDR
// un = CreateHuman ;
16120: LD_ADDR_VAR 0 3
16124: PUSH
16125: CALL_OW 44
16129: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 24
16137: PPUSH
16138: LD_INT 0
16140: PPUSH
16141: CALL_OW 49
// end ;
16145: GO 15998
16147: POP
16148: POP
// end ; end_of_file
16149: LD_VAR 0 1
16153: RET
// on UnitDestroyed ( unit ) do var i ;
16154: LD_INT 0
16156: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 255
16166: PUSH
16167: LD_INT 3
16169: EQUAL
16170: PUSH
16171: LD_VAR 0 1
16175: PPUSH
16176: CALL_OW 247
16180: PUSH
16181: LD_INT 1
16183: EQUAL
16184: AND
16185: IFFALSE 16249
// begin for i in RuScientists do
16187: LD_ADDR_VAR 0 2
16191: PUSH
16192: LD_EXP 34
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16247
// if i = unit then
16200: LD_VAR 0 2
16204: PUSH
16205: LD_VAR 0 1
16209: EQUAL
16210: IFFALSE 16245
// begin RuScientists = RuScientists diff [ unit ] ;
16212: LD_ADDR_EXP 34
16216: PUSH
16217: LD_EXP 34
16221: PUSH
16222: LD_VAR 0 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: DIFF
16230: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16231: LD_ADDR_EXP 35
16235: PUSH
16236: LD_EXP 35
16240: PUSH
16241: LD_INT 1
16243: PLUS
16244: ST_TO_ADDR
// end ;
16245: GO 16197
16247: POP
16248: POP
// end ; end ;
16249: PPOPN 2
16251: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16252: LD_VAR 0 1
16256: PUSH
16257: LD_INT 10
16259: EQUAL
16260: PUSH
16261: LD_VAR 0 2
16265: PPUSH
16266: CALL_OW 255
16270: PUSH
16271: LD_INT 1
16273: EQUAL
16274: AND
16275: PUSH
16276: LD_EXP 45
16280: PUSH
16281: LD_INT 0
16283: EQUAL
16284: AND
16285: IFFALSE 16397
// begin eventVar1 = 1 ;
16287: LD_ADDR_EXP 45
16291: PUSH
16292: LD_INT 1
16294: ST_TO_ADDR
// teleportExplored = 1 ;
16295: LD_ADDR_EXP 33
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16303: LD_STRING M2a
16305: PPUSH
16306: CALL_OW 337
// wait ( 0 0$2 ) ;
16310: LD_INT 70
16312: PPUSH
16313: CALL_OW 67
// DialogueOn ;
16317: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16321: LD_INT 22
16323: PUSH
16324: LD_INT 1
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 21
16333: PUSH
16334: LD_INT 1
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PPUSH
16345: CALL_OW 69
16349: PPUSH
16350: LD_STRING DT3a-Sol1-1
16352: PPUSH
16353: LD_STRING DT3a-FSol1-1
16355: PPUSH
16356: CALL 12366 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16360: LD_EXP 1
16364: PPUSH
16365: LD_STRING DT3a-JMM-1
16367: PPUSH
16368: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16372: LD_VAR 0 2
16376: PPUSH
16377: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16381: LD_EXP 1
16385: PPUSH
16386: LD_STRING DT3a-JMM-1a
16388: PPUSH
16389: CALL_OW 88
// DialogueOff ;
16393: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16397: LD_VAR 0 1
16401: PUSH
16402: LD_INT 10
16404: EQUAL
16405: PUSH
16406: LD_VAR 0 2
16410: PPUSH
16411: CALL_OW 247
16415: PUSH
16416: LD_INT 2
16418: EQUAL
16419: AND
16420: PUSH
16421: LD_VAR 0 2
16425: PPUSH
16426: CALL_OW 255
16430: PUSH
16431: LD_INT 3
16433: EQUAL
16434: AND
16435: PUSH
16436: LD_EXP 29
16440: PUSH
16441: LD_INT 0
16443: EQUAL
16444: AND
16445: IFFALSE 16462
// begin wait ( 0 0$3 ) ;
16447: LD_INT 105
16449: PPUSH
16450: CALL_OW 67
// vehicleTeleported = 1 ;
16454: LD_ADDR_EXP 29
16458: PUSH
16459: LD_INT 1
16461: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16462: LD_VAR 0 1
16466: PUSH
16467: LD_INT 10
16469: EQUAL
16470: PUSH
16471: LD_VAR 0 2
16475: PPUSH
16476: CALL_OW 247
16480: PUSH
16481: LD_INT 2
16483: EQUAL
16484: AND
16485: PUSH
16486: LD_VAR 0 2
16490: PPUSH
16491: CALL_OW 255
16495: PUSH
16496: LD_INT 3
16498: EQUAL
16499: AND
16500: PUSH
16501: LD_EXP 29
16505: PUSH
16506: LD_INT 2
16508: EQUAL
16509: AND
16510: IFFALSE 16527
// begin wait ( 0 0$3 ) ;
16512: LD_INT 105
16514: PPUSH
16515: CALL_OW 67
// vehicleTeleported = 3 ;
16519: LD_ADDR_EXP 29
16523: PUSH
16524: LD_INT 3
16526: ST_TO_ADDR
// end ; end ;
16527: PPOPN 2
16529: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16530: LD_VAR 0 2
16534: PUSH
16535: LD_INT 21
16537: EQUAL
16538: PUSH
16539: LD_VAR 0 2
16543: PUSH
16544: LD_INT 112
16546: EQUAL
16547: OR
16548: IFFALSE 16681
// if GetSide ( vehicle ) = 3 then
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 255
16559: PUSH
16560: LD_INT 3
16562: EQUAL
16563: IFFALSE 16681
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 264
16574: PUSH
16575: LD_INT 46
16577: EQUAL
16578: PUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 264
16588: PUSH
16589: LD_INT 45
16591: EQUAL
16592: OR
16593: PUSH
16594: LD_VAR 0 1
16598: PPUSH
16599: CALL_OW 264
16603: PUSH
16604: LD_INT 44
16606: EQUAL
16607: OR
16608: IFFALSE 16638
// begin russianTanks = russianTanks ^ vehicle ;
16610: LD_ADDR_EXP 39
16614: PUSH
16615: LD_EXP 39
16619: PUSH
16620: LD_VAR 0 1
16624: ADD
16625: ST_TO_ADDR
// ComEnterUnit ( vehicle , ruteleprt ) ;
16626: LD_VAR 0 1
16630: PPUSH
16631: LD_INT 10
16633: PPUSH
16634: CALL_OW 120
// end ; if GetWeapon ( vehicle ) = 49 then
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 264
16647: PUSH
16648: LD_INT 49
16650: EQUAL
16651: IFFALSE 16681
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16653: LD_ADDR_EXP 40
16657: PUSH
16658: LD_EXP 40
16662: PUSH
16663: LD_VAR 0 1
16667: ADD
16668: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16669: LD_VAR 0 1
16673: PPUSH
16674: LD_INT 137
16676: PPUSH
16677: CALL_OW 120
// end ; end ; end ;
16681: PPOPN 2
16683: END
// on UnitGoesToRed ( unit ) do var i ;
16684: LD_INT 0
16686: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16687: LD_VAR 0 1
16691: PPUSH
16692: CALL_OW 255
16696: PUSH
16697: LD_INT 3
16699: EQUAL
16700: PUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 247
16710: PUSH
16711: LD_INT 2
16713: EQUAL
16714: AND
16715: IFFALSE 16833
// begin if russianTanks > 0 then
16717: LD_EXP 39
16721: PUSH
16722: LD_INT 0
16724: GREATER
16725: IFFALSE 16775
// for i in russianTanks do
16727: LD_ADDR_VAR 0 2
16731: PUSH
16732: LD_EXP 39
16736: PUSH
16737: FOR_IN
16738: IFFALSE 16773
// if i = unit then
16740: LD_VAR 0 2
16744: PUSH
16745: LD_VAR 0 1
16749: EQUAL
16750: IFFALSE 16771
// russianTanks = russianTanks diff [ unit ] ;
16752: LD_ADDR_EXP 39
16756: PUSH
16757: LD_EXP 39
16761: PUSH
16762: LD_VAR 0 1
16766: PUSH
16767: EMPTY
16768: LIST
16769: DIFF
16770: ST_TO_ADDR
16771: GO 16737
16773: POP
16774: POP
// if russianTimeLapsers > 0 then
16775: LD_EXP 40
16779: PUSH
16780: LD_INT 0
16782: GREATER
16783: IFFALSE 16833
// for i in russianTimeLapsers do
16785: LD_ADDR_VAR 0 2
16789: PUSH
16790: LD_EXP 40
16794: PUSH
16795: FOR_IN
16796: IFFALSE 16831
// if i = unit then
16798: LD_VAR 0 2
16802: PUSH
16803: LD_VAR 0 1
16807: EQUAL
16808: IFFALSE 16829
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
16810: LD_ADDR_EXP 40
16814: PUSH
16815: LD_EXP 40
16819: PUSH
16820: LD_VAR 0 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: DIFF
16828: ST_TO_ADDR
16829: GO 16795
16831: POP
16832: POP
// end ; end ;
16833: PPOPN 2
16835: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16836: LD_VAR 0 2
16840: PPUSH
16841: CALL_OW 255
16845: PUSH
16846: LD_INT 3
16848: EQUAL
16849: PUSH
16850: LD_VAR 0 2
16854: PPUSH
16855: CALL_OW 257
16859: PUSH
16860: LD_INT 3
16862: EQUAL
16863: AND
16864: PUSH
16865: LD_INT 21
16867: PPUSH
16868: CALL_OW 255
16872: PUSH
16873: LD_INT 3
16875: EQUAL
16876: AND
16877: PUSH
16878: LD_INT 21
16880: PPUSH
16881: CALL_OW 302
16885: AND
16886: IFFALSE 16900
// ComEnterUnit ( human , ru_fact ) ;
16888: LD_VAR 0 2
16892: PPUSH
16893: LD_INT 21
16895: PPUSH
16896: CALL_OW 120
// end ; end_of_file
16900: PPOPN 2
16902: END
// every 0 0$1 trigger ruAI = 1 do
16903: LD_EXP 41
16907: PUSH
16908: LD_INT 1
16910: EQUAL
16911: IFFALSE 17010
16913: GO 16915
16915: DISABLE
// begin enable ;
16916: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16917: LD_INT 3
16919: PPUSH
16920: LD_INT 6
16922: PPUSH
16923: LD_INT 9
16925: PPUSH
16926: LD_EXP 38
16930: PPUSH
16931: CALL 13246 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16935: LD_INT 3
16937: PPUSH
16938: LD_INT 4
16940: PPUSH
16941: LD_INT 10
16943: PPUSH
16944: LD_EXP 38
16948: PPUSH
16949: CALL 13246 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16953: LD_INT 3
16955: PPUSH
16956: LD_INT 16
16958: PPUSH
16959: LD_INT 9
16961: PPUSH
16962: LD_INT 91
16964: PPUSH
16965: CALL 13637 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16969: LD_INT 3
16971: PPUSH
16972: LD_INT 17
16974: PPUSH
16975: LD_INT 10
16977: PPUSH
16978: LD_INT 47
16980: PUSH
16981: LD_INT 129
16983: PUSH
16984: LD_INT 135
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: LIST
16991: PPUSH
16992: CALL 13637 0 4
// AttackVehicles ( 3 ) ;
16996: LD_INT 3
16998: PPUSH
16999: CALL 14364 0 1
// IntBazooka ( 3 ) ;
17003: LD_INT 3
17005: PPUSH
17006: CALL 14846 0 1
// end ;
17010: END
// every 0 0$1 do
17011: GO 17013
17013: DISABLE
// begin enable ;
17014: ENABLE
// TimeLapsersAI ( 3 ) ;
17015: LD_INT 3
17017: PPUSH
17018: CALL 14662 0 1
// end ;
17022: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17023: LD_INT 4
17025: PPUSH
17026: CALL_OW 303
17030: IFFALSE 17045
17032: GO 17034
17034: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17035: LD_INT 3
17037: PPUSH
17038: LD_INT 4
17040: PPUSH
17041: CALL 15498 0 2
17045: END
// every 0 0$1 do
17046: GO 17048
17048: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17049: LD_INT 3
17051: PPUSH
17052: LD_INT 91
17054: PPUSH
17055: LD_INT 3
17057: PPUSH
17058: CALL 13161 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17062: LD_INT 3
17064: PPUSH
17065: LD_INT 47
17067: PPUSH
17068: LD_INT 3
17070: PPUSH
17071: CALL 13161 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17075: LD_INT 3
17077: PPUSH
17078: LD_INT 129
17080: PPUSH
17081: LD_INT 3
17083: PPUSH
17084: CALL 13161 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17088: LD_INT 3
17090: PPUSH
17091: LD_INT 3
17093: PPUSH
17094: LD_INT 3
17096: PPUSH
17097: CALL 13161 0 3
// end ;
17101: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17102: LD_EXP 28
17106: PUSH
17107: LD_INT 2
17109: EQUAL
17110: PUSH
17111: LD_INT 22
17113: PUSH
17114: LD_INT 3
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 21
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 50
17133: PUSH
17134: EMPTY
17135: LIST
17136: PUSH
17137: LD_INT 3
17139: PUSH
17140: LD_INT 58
17142: PUSH
17143: EMPTY
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: PPUSH
17156: CALL_OW 69
17160: PUSH
17161: LD_INT 18
17163: PPUSH
17164: LD_INT 22
17166: PUSH
17167: LD_INT 3
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 21
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PPUSH
17188: CALL_OW 70
17192: PUSH
17193: LD_INT 0
17195: EQUAL
17196: DIFF
17197: AND
17198: IFFALSE 17316
17200: GO 17202
17202: DISABLE
// begin enable ;
17203: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17204: LD_INT 3
17206: PPUSH
17207: LD_INT 21
17209: PPUSH
17210: LD_INT 3
17212: PUSH
17213: LD_INT 4
17215: PUSH
17216: LD_INT 4
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: PUSH
17224: LD_OWVAR 67
17228: ARRAY
17229: PPUSH
17230: LD_INT 46
17232: PUSH
17233: LD_INT 45
17235: PUSH
17236: LD_INT 44
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: PPUSH
17244: LD_INT 3
17246: PPUSH
17247: LD_INT 3
17249: PPUSH
17250: LD_INT 24
17252: PPUSH
17253: CALL 14217 0 7
// if russianTimeLapsers = 0 then
17257: LD_EXP 40
17261: PUSH
17262: LD_INT 0
17264: EQUAL
17265: IFFALSE 17316
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17267: LD_INT 3
17269: PPUSH
17270: LD_INT 112
17272: PPUSH
17273: LD_INT 1
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 2
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: PUSH
17287: LD_OWVAR 67
17291: ARRAY
17292: PPUSH
17293: LD_INT 49
17295: PUSH
17296: LD_INT 49
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PPUSH
17303: LD_INT 3
17305: PPUSH
17306: LD_INT 3
17308: PPUSH
17309: LD_INT 24
17311: PPUSH
17312: CALL 14217 0 7
// end ;
17316: END
// every 0 0$1 trigger arabianMines do var i ;
17317: LD_EXP 42
17321: IFFALSE 17442
17323: GO 17325
17325: DISABLE
17326: LD_INT 0
17328: PPUSH
// begin enable ;
17329: ENABLE
// for i in arabianMines do
17330: LD_ADDR_VAR 0 1
17334: PUSH
17335: LD_EXP 42
17339: PUSH
17340: FOR_IN
17341: IFFALSE 17440
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17343: LD_INT 22
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 92
17355: PUSH
17356: LD_VAR 0 1
17360: PUSH
17361: LD_INT 1
17363: ARRAY
17364: PUSH
17365: LD_VAR 0 1
17369: PUSH
17370: LD_INT 2
17372: ARRAY
17373: PUSH
17374: LD_INT 3
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PPUSH
17387: CALL_OW 69
17391: IFFALSE 17438
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17393: LD_VAR 0 1
17397: PUSH
17398: LD_INT 1
17400: ARRAY
17401: PPUSH
17402: LD_VAR 0 1
17406: PUSH
17407: LD_INT 2
17409: ARRAY
17410: PPUSH
17411: LD_INT 5
17413: PPUSH
17414: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17418: LD_ADDR_EXP 42
17422: PUSH
17423: LD_EXP 42
17427: PPUSH
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 3
17437: ST_TO_ADDR
// end ; end ;
17438: GO 17340
17440: POP
17441: POP
// end ; end_of_file
17442: PPOPN 1
17444: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
17445: LD_EXP 34
17449: PUSH
17450: EMPTY
17451: EQUAL
17452: PUSH
17453: LD_INT 3
17455: PPUSH
17456: CALL_OW 301
17460: AND
17461: IFFALSE 17666
17463: GO 17465
17465: DISABLE
// begin if sciCounter = 0 then
17466: LD_EXP 35
17470: PUSH
17471: LD_INT 0
17473: EQUAL
17474: IFFALSE 17500
// begin Say ( JMM , D7a-JMM-1 ) ;
17476: LD_EXP 1
17480: PPUSH
17481: LD_STRING D7a-JMM-1
17483: PPUSH
17484: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17488: LD_EXP 22
17492: PPUSH
17493: LD_STRING D7a-Pow-1
17495: PPUSH
17496: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
17500: LD_EXP 35
17504: PUSH
17505: LD_INT 0
17507: GREATER
17508: PUSH
17509: LD_EXP 35
17513: PUSH
17514: LD_INT 6
17516: LESS
17517: AND
17518: IFFALSE 17544
// begin Say ( JMM , D7b-JMM-1 ) ;
17520: LD_EXP 1
17524: PPUSH
17525: LD_STRING D7b-JMM-1
17527: PPUSH
17528: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17532: LD_EXP 22
17536: PPUSH
17537: LD_STRING D7b-Pow-1
17539: PPUSH
17540: CALL_OW 94
// end ; if sciCounter = 6 then
17544: LD_EXP 35
17548: PUSH
17549: LD_INT 6
17551: EQUAL
17552: IFFALSE 17662
// begin Say ( JMM , D7c-JMM-1 ) ;
17554: LD_EXP 1
17558: PPUSH
17559: LD_STRING D7c-JMM-1
17561: PPUSH
17562: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17566: LD_EXP 22
17570: PPUSH
17571: LD_STRING D7c-Pow-1
17573: PPUSH
17574: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17578: LD_EXP 1
17582: PPUSH
17583: LD_STRING D7d-JMM-1
17585: PPUSH
17586: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17590: LD_EXP 22
17594: PPUSH
17595: LD_STRING D7d-Pow-1
17597: PPUSH
17598: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17602: LD_EXP 1
17606: PPUSH
17607: LD_STRING D7d-JMM-2
17609: PPUSH
17610: CALL_OW 88
// if askSiberite = 1 then
17614: LD_EXP 32
17618: PUSH
17619: LD_INT 1
17621: EQUAL
17622: IFFALSE 17638
// begin Say ( JMM , D7d-JMM-2a ) ;
17624: LD_EXP 1
17628: PPUSH
17629: LD_STRING D7d-JMM-2a
17631: PPUSH
17632: CALL_OW 88
// end else
17636: GO 17650
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
17638: LD_EXP 22
17642: PPUSH
17643: LD_STRING D7d-Pow-2
17645: PPUSH
17646: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
17650: LD_EXP 22
17654: PPUSH
17655: LD_STRING D7d-Pow-2a
17657: PPUSH
17658: CALL_OW 94
// end ; FinishMission ;
17662: CALL 17667 0 0
// end ;
17666: END
// export function FinishMission ; begin
17667: LD_INT 0
17669: PPUSH
// if teleportExplored = 1 then
17670: LD_EXP 33
17674: PUSH
17675: LD_INT 1
17677: EQUAL
17678: IFFALSE 17692
// AddMedal ( Teleport , 1 ) else
17680: LD_STRING Teleport
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 101
17690: GO 17703
// AddMedal ( Teleport , - 1 ) ;
17692: LD_STRING Teleport
17694: PPUSH
17695: LD_INT 1
17697: NEG
17698: PPUSH
17699: CALL_OW 101
// if sciCounter > 2 then
17703: LD_EXP 35
17707: PUSH
17708: LD_INT 2
17710: GREATER
17711: IFFALSE 17725
// AddMedal ( Materials , 1 ) else
17713: LD_STRING Materials
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 101
17723: GO 17736
// AddMedal ( Materials , - 1 ) ;
17725: LD_STRING Materials
17727: PPUSH
17728: LD_INT 1
17730: NEG
17731: PPUSH
17732: CALL_OW 101
// if sciCounter = 6 then
17736: LD_EXP 35
17740: PUSH
17741: LD_INT 6
17743: EQUAL
17744: IFFALSE 17768
// begin AddMedal ( Scientists , 1 ) ;
17746: LD_STRING Scientists
17748: PPUSH
17749: LD_INT 1
17751: PPUSH
17752: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17756: LD_INT 1
17758: PPUSH
17759: LD_STRING 12_SciDed_1
17761: PPUSH
17762: CALL_OW 39
// end else
17766: GO 17789
// begin AddMedal ( Scientists , - 1 ) ;
17768: LD_STRING Scientists
17770: PPUSH
17771: LD_INT 1
17773: NEG
17774: PPUSH
17775: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17779: LD_INT 0
17781: PPUSH
17782: LD_STRING 12_SciDed_1
17784: PPUSH
17785: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17789: LD_EXP 31
17793: PPUSH
17794: LD_STRING 12_MainDepositFake_1
17796: PPUSH
17797: CALL_OW 39
// GiveMedals ( MAIN ) ;
17801: LD_STRING MAIN
17803: PPUSH
17804: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17808: LD_INT 22
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 21
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: LD_INT 25
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 25
17843: PUSH
17844: LD_INT 2
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 25
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 25
17863: PUSH
17864: LD_INT 4
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 25
17873: PUSH
17874: LD_INT 5
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 25
17883: PUSH
17884: LD_INT 8
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 69
17909: PPUSH
17910: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
17914: LD_EXP 1
17918: PPUSH
17919: LD_EXP 44
17923: PUSH
17924: LD_STRING JMM
17926: STR
17927: PPUSH
17928: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
17932: LD_EXP 7
17936: PPUSH
17937: LD_EXP 44
17941: PUSH
17942: LD_STRING Brown
17944: STR
17945: PPUSH
17946: CALL 12315 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
17950: LD_EXP 3
17954: PPUSH
17955: LD_EXP 44
17959: PUSH
17960: LD_STRING Donaldson
17962: STR
17963: PPUSH
17964: CALL 12315 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
17968: LD_EXP 4
17972: PPUSH
17973: LD_EXP 44
17977: PUSH
17978: LD_STRING Bobby
17980: STR
17981: PPUSH
17982: CALL 12315 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
17986: LD_EXP 5
17990: PPUSH
17991: LD_EXP 44
17995: PUSH
17996: LD_STRING Cyrus
17998: STR
17999: PPUSH
18000: CALL 12315 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18004: LD_EXP 2
18008: PPUSH
18009: LD_EXP 44
18013: PUSH
18014: LD_STRING Lisa
18016: STR
18017: PPUSH
18018: CALL 12315 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18022: LD_EXP 12
18026: PPUSH
18027: LD_EXP 44
18031: PUSH
18032: LD_STRING Frank
18034: STR
18035: PPUSH
18036: CALL 12315 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18040: LD_EXP 13
18044: PPUSH
18045: LD_EXP 44
18049: PUSH
18050: LD_STRING Kikuchi
18052: STR
18053: PPUSH
18054: CALL 12315 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18058: LD_EXP 9
18062: PPUSH
18063: LD_EXP 44
18067: PUSH
18068: LD_STRING Houten
18070: STR
18071: PPUSH
18072: CALL 12315 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18076: LD_EXP 11
18080: PPUSH
18081: LD_EXP 44
18085: PUSH
18086: LD_STRING Gary
18088: STR
18089: PPUSH
18090: CALL 12315 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18094: LD_EXP 10
18098: PPUSH
18099: LD_EXP 44
18103: PUSH
18104: LD_STRING Cornell
18106: STR
18107: PPUSH
18108: CALL 12315 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18112: LD_EXP 6
18116: PPUSH
18117: LD_EXP 44
18121: PUSH
18122: LD_STRING Denis
18124: STR
18125: PPUSH
18126: CALL 12315 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18130: LD_EXP 8
18134: PPUSH
18135: LD_EXP 44
18139: PUSH
18140: LD_STRING Gladstone
18142: STR
18143: PPUSH
18144: CALL 12315 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18148: LD_INT 50
18150: PUSH
18151: EMPTY
18152: LIST
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 21
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: LD_INT 25
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 25
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 25
18199: PUSH
18200: LD_INT 3
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 25
18209: PUSH
18210: LD_INT 4
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 5
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 25
18229: PUSH
18230: LD_INT 8
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: PPUSH
18252: CALL_OW 69
18256: PUSH
18257: LD_EXP 1
18261: PUSH
18262: LD_EXP 7
18266: PUSH
18267: LD_EXP 3
18271: PUSH
18272: LD_EXP 4
18276: PUSH
18277: LD_EXP 5
18281: PUSH
18282: LD_EXP 2
18286: PUSH
18287: LD_EXP 12
18291: PUSH
18292: LD_EXP 8
18296: PUSH
18297: LD_EXP 13
18301: PUSH
18302: LD_EXP 6
18306: PUSH
18307: LD_EXP 9
18311: PUSH
18312: LD_EXP 11
18316: PUSH
18317: LD_EXP 10
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: DIFF
18337: PPUSH
18338: LD_STRING 12_other_survivors
18340: PPUSH
18341: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
18345: LD_STRING 11_others
18347: PPUSH
18348: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
18352: LD_EXP 14
18356: PPUSH
18357: LD_STRING 11_others
18359: PPUSH
18360: CALL_OW 38
// YouWin ;
18364: CALL_OW 103
// end ; end_of_file
18368: LD_VAR 0 1
18372: RET
// every 0 0$1 trigger IsDead ( JMM ) do
18373: LD_EXP 1
18377: PPUSH
18378: CALL_OW 301
18382: IFFALSE 18394
18384: GO 18386
18386: DISABLE
// YouLost ( JMM ) ; end_of_file
18387: LD_STRING JMM
18389: PPUSH
18390: CALL_OW 104
18394: END
// every 0 0$30 do
18395: GO 18397
18397: DISABLE
// begin enable ;
18398: ENABLE
// if cratesSpawned < 6 then
18399: LD_EXP 43
18403: PUSH
18404: LD_INT 6
18406: LESS
18407: IFFALSE 18444
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18409: LD_INT 3
18411: PPUSH
18412: LD_INT 5
18414: PPUSH
18415: CALL_OW 12
18419: PPUSH
18420: LD_INT 21
18422: PPUSH
18423: LD_INT 1
18425: PPUSH
18426: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18430: LD_ADDR_EXP 43
18434: PUSH
18435: LD_EXP 43
18439: PUSH
18440: LD_INT 1
18442: PLUS
18443: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
18444: LD_EXP 43
18448: PUSH
18449: LD_INT 6
18451: GREATEREQUAL
18452: PUSH
18453: LD_EXP 43
18457: PUSH
18458: LD_INT 12
18460: LESS
18461: AND
18462: IFFALSE 18506
// begin wait ( 0 0$30 ) ;
18464: LD_INT 1050
18466: PPUSH
18467: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18471: LD_INT 3
18473: PPUSH
18474: LD_INT 5
18476: PPUSH
18477: CALL_OW 12
18481: PPUSH
18482: LD_INT 21
18484: PPUSH
18485: LD_INT 1
18487: PPUSH
18488: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18492: LD_ADDR_EXP 43
18496: PUSH
18497: LD_EXP 43
18501: PUSH
18502: LD_INT 1
18504: PLUS
18505: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 15 then
18506: LD_EXP 43
18510: PUSH
18511: LD_INT 12
18513: GREATEREQUAL
18514: PUSH
18515: LD_EXP 43
18519: PUSH
18520: LD_INT 15
18522: LESS
18523: AND
18524: IFFALSE 18568
// begin wait ( 1 1$30 ) ;
18526: LD_INT 3150
18528: PPUSH
18529: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18533: LD_INT 3
18535: PPUSH
18536: LD_INT 5
18538: PPUSH
18539: CALL_OW 12
18543: PPUSH
18544: LD_INT 21
18546: PPUSH
18547: LD_INT 1
18549: PPUSH
18550: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18554: LD_ADDR_EXP 43
18558: PUSH
18559: LD_EXP 43
18563: PUSH
18564: LD_INT 1
18566: PLUS
18567: ST_TO_ADDR
// end ; if cratesSpawned >= 15 then
18568: LD_EXP 43
18572: PUSH
18573: LD_INT 15
18575: GREATEREQUAL
18576: IFFALSE 18579
// disable ;
18578: DISABLE
// end ;
18579: END
