// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 16437 0 0
// PrepareDifficulty ;
 195: CALL 13383 0 0
// PrepareVehicles ;
 199: CALL 1566 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1142 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2885 0 0
// PrepareWestBase ;
 227: CALL 3397 0 0
// PrepareEastBase ;
 231: CALL 2957 0 0
// PrepareOtherRussians ;
 235: CALL 3509 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11_others
 575: PPUSH
 576: CALL_OW 31
 580: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 581: LD_ADDR_EXP 14
 585: PUSH
 586: LD_EXP 14
 590: PUSH
 591: LD_STRING 11c_others
 593: PPUSH
 594: CALL_OW 31
 598: ADD
 599: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 600: LD_ADDR_EXP 1
 604: PUSH
 605: LD_STRING 11_JMM
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 13022 0 2
 615: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 616: LD_EXP 1
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 628: LD_EXP 1
 632: PPUSH
 633: LD_INT 22
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: LD_INT 58
 655: PUSH
 656: EMPTY
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PPUSH
 664: CALL_OW 69
 668: PUSH
 669: LD_INT 1
 671: ARRAY
 672: PPUSH
 673: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 677: LD_STRING 11_Lisa
 679: PPUSH
 680: CALL_OW 28
 684: PUSH
 685: LD_INT 1
 687: EQUAL
 688: IFFALSE 735
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 690: LD_ADDR_EXP 2
 694: PUSH
 695: LD_STRING 11_Lisa
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 13022 0 2
 705: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 706: LD_EXP 2
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 718: LD_EXP 2
 722: PPUSH
 723: LD_INT 4
 725: PPUSH
 726: LD_INT 0
 728: PPUSH
 729: CALL_OW 49
// end else
 733: GO 751
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 735: LD_INT 4
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: LD_INT 1
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 1142 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 751: LD_STRING 11_Donaldson
 753: PPUSH
 754: CALL_OW 28
 758: PUSH
 759: LD_INT 1
 761: EQUAL
 762: IFFALSE 809
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING 11_Donaldson
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 13022 0 2
 779: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 780: LD_EXP 3
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 792: LD_EXP 3
 796: PPUSH
 797: LD_INT 4
 799: PPUSH
 800: LD_INT 0
 802: PPUSH
 803: CALL_OW 49
// end else
 807: GO 825
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 809: LD_INT 4
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL 1142 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 825: LD_STRING 11_Cyrus
 827: PPUSH
 828: CALL_OW 28
 832: PUSH
 833: LD_INT 1
 835: EQUAL
 836: IFFALSE 883
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 838: LD_ADDR_EXP 5
 842: PUSH
 843: LD_STRING 11_Cyrus
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: CALL 13022 0 2
 853: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 854: LD_EXP 5
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 866: LD_EXP 5
 870: PPUSH
 871: LD_INT 4
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: CALL_OW 49
// end else
 881: GO 899
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 883: LD_INT 4
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_INT 1
 891: PPUSH
 892: LD_INT 0
 894: PPUSH
 895: CALL 1142 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 899: LD_STRING 11_Denis
 901: PPUSH
 902: CALL_OW 28
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 957
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 912: LD_ADDR_EXP 6
 916: PUSH
 917: LD_STRING 11_Denis
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: CALL 13022 0 2
 927: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 928: LD_EXP 6
 932: PPUSH
 933: LD_INT 4
 935: PPUSH
 936: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 940: LD_EXP 6
 944: PPUSH
 945: LD_INT 4
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 49
// end else
 955: GO 973
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 957: LD_INT 4
 959: PPUSH
 960: LD_INT 0
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL 1142 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 973: LD_STRING 11_Frank
 975: PPUSH
 976: CALL_OW 28
 980: PUSH
 981: LD_INT 1
 983: EQUAL
 984: IFFALSE 1031
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 986: LD_ADDR_EXP 12
 990: PUSH
 991: LD_STRING 11_Frank
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: CALL 13022 0 2
1001: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1002: LD_EXP 12
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1014: LD_EXP 12
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: CALL_OW 49
// end else
1029: GO 1047
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL 1142 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1047: LD_STRING 11_Cornell
1049: PPUSH
1050: CALL_OW 28
1054: PUSH
1055: LD_INT 1
1057: EQUAL
1058: IFFALSE 1105
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1060: LD_ADDR_EXP 10
1064: PUSH
1065: LD_STRING 11_Cornell
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL 13022 0 2
1075: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1076: LD_EXP 10
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1088: LD_EXP 10
1092: PPUSH
1093: LD_INT 4
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end else
1103: GO 1121
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1105: LD_INT 4
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: LD_INT 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: CALL 1142 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1121: LD_ADDR_EXP 22
1125: PUSH
1126: LD_STRING Powell
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL 13022 0 2
1136: ST_TO_ADDR
// end ;
1137: LD_VAR 0 1
1141: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
// if mech = 1 then
1149: LD_VAR 0 4
1153: PUSH
1154: LD_INT 1
1156: EQUAL
1157: IFFALSE 1392
// begin if others11 > 0 then
1159: LD_EXP 14
1163: PUSH
1164: LD_INT 0
1166: GREATER
1167: IFFALSE 1332
// begin for i := 1 to others11 - 1 do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: DOUBLE
1175: LD_INT 1
1177: DEC
1178: ST_TO_ADDR
1179: LD_EXP 14
1183: PUSH
1184: LD_INT 1
1186: MINUS
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1269
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1191: LD_EXP 14
1195: PUSH
1196: LD_VAR 0 6
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 259
1209: PUSH
1210: LD_EXP 14
1214: PUSH
1215: LD_VAR 0 6
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ARRAY
1224: PPUSH
1225: LD_INT 3
1227: PPUSH
1228: CALL_OW 259
1232: LESS
1233: IFFALSE 1267
// begin mecha = others11 [ i + 1 ] ;
1235: LD_ADDR_VAR 0 9
1239: PUSH
1240: LD_EXP 14
1244: PUSH
1245: LD_VAR 0 6
1249: PUSH
1250: LD_INT 1
1252: PLUS
1253: ARRAY
1254: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1255: LD_VAR 0 9
1259: PPUSH
1260: LD_INT 3
1262: PPUSH
1263: CALL_OW 336
// end ; end ;
1267: GO 1188
1269: POP
1270: POP
// if spawnMode = 1 then
1271: LD_VAR 0 3
1275: PUSH
1276: LD_INT 1
1278: EQUAL
1279: IFFALSE 1300
// PlaceUnitArea ( mecha , area , false ) else
1281: LD_VAR 0 9
1285: PPUSH
1286: LD_VAR 0 1
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
1298: GO 1314
// PlaceHumanInUnit ( mecha , veh ) ;
1300: LD_VAR 0 9
1304: PPUSH
1305: LD_VAR 0 2
1309: PPUSH
1310: CALL_OW 52
// others11 = others11 diff mecha ;
1314: LD_ADDR_EXP 14
1318: PUSH
1319: LD_EXP 14
1323: PUSH
1324: LD_VAR 0 9
1328: DIFF
1329: ST_TO_ADDR
// end else
1330: GO 1390
// begin hc_name =  ;
1332: LD_ADDR_OWVAR 26
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// hc_gallery =  ;
1340: LD_ADDR_OWVAR 33
1344: PUSH
1345: LD_STRING 
1347: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1348: LD_INT 0
1350: PPUSH
1351: LD_INT 7
1353: PPUSH
1354: LD_INT 9
1356: PPUSH
1357: CALL_OW 12
1361: PPUSH
1362: CALL_OW 383
// un = CreateHuman ;
1366: LD_ADDR_VAR 0 7
1370: PUSH
1371: CALL_OW 44
1375: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1376: LD_VAR 0 7
1380: PPUSH
1381: LD_VAR 0 2
1385: PPUSH
1386: CALL_OW 52
// end ; end else
1390: GO 1561
// begin if others11 > 0 then
1392: LD_EXP 14
1396: PUSH
1397: LD_INT 0
1399: GREATER
1400: IFFALSE 1473
// begin if spawnMode = 1 then
1402: LD_VAR 0 3
1406: PUSH
1407: LD_INT 1
1409: EQUAL
1410: IFFALSE 1435
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1412: LD_EXP 14
1416: PUSH
1417: LD_INT 1
1419: ARRAY
1420: PPUSH
1421: LD_VAR 0 1
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
1433: GO 1453
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1435: LD_EXP 14
1439: PUSH
1440: LD_INT 1
1442: ARRAY
1443: PPUSH
1444: LD_VAR 0 2
1448: PPUSH
1449: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1453: LD_ADDR_EXP 14
1457: PUSH
1458: LD_EXP 14
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL_OW 3
1470: ST_TO_ADDR
// end else
1471: GO 1561
// begin hc_name =  ;
1473: LD_ADDR_OWVAR 26
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// hc_gallery =  ;
1481: LD_ADDR_OWVAR 33
1485: PUSH
1486: LD_STRING 
1488: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1489: LD_INT 0
1491: PPUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 2
1497: PUSH
1498: LD_INT 3
1500: PUSH
1501: LD_INT 4
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 12
1520: ARRAY
1521: PPUSH
1522: LD_INT 7
1524: PPUSH
1525: LD_INT 9
1527: PPUSH
1528: CALL_OW 12
1532: PPUSH
1533: CALL_OW 380
// un = CreateHuman ;
1537: LD_ADDR_VAR 0 7
1541: PUSH
1542: CALL_OW 44
1546: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1547: LD_VAR 0 7
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 52
// end ; end ; end ;
1561: LD_VAR 0 5
1565: RET
// export function PrepareVehicles ; var veh ; begin
1566: LD_INT 0
1568: PPUSH
1569: PPUSH
// uc_side = 1 ;
1570: LD_ADDR_OWVAR 20
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// uc_nation = 1 ;
1578: LD_ADDR_OWVAR 21
1582: PUSH
1583: LD_INT 1
1585: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1586: LD_ADDR_OWVAR 37
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_engine = 3 ;
1594: LD_ADDR_OWVAR 39
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_control = 3 ;
1602: LD_ADDR_OWVAR 38
1606: PUSH
1607: LD_INT 3
1609: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1610: LD_ADDR_OWVAR 40
1614: PUSH
1615: LD_INT 4
1617: ST_TO_ADDR
// veh = CreateVehicle ;
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: CALL_OW 45
1627: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_INT 4
1635: PPUSH
1636: LD_INT 0
1638: PPUSH
1639: CALL_OW 49
// vc_weapon = us_double_gun ;
1643: LD_ADDR_OWVAR 40
1647: PUSH
1648: LD_INT 5
1650: ST_TO_ADDR
// vc_control = 1 ;
1651: LD_ADDR_OWVAR 38
1655: PUSH
1656: LD_INT 1
1658: ST_TO_ADDR
// veh = CreateVehicle ;
1659: LD_ADDR_VAR 0 2
1663: PUSH
1664: CALL_OW 45
1668: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1669: LD_VAR 0 2
1673: PPUSH
1674: LD_INT 4
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL_OW 49
// vc_weapon = us_light_gun ;
1684: LD_ADDR_OWVAR 40
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_control = 3 ;
1692: LD_ADDR_OWVAR 38
1696: PUSH
1697: LD_INT 3
1699: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1700: LD_ADDR_OWVAR 37
1704: PUSH
1705: LD_INT 2
1707: ST_TO_ADDR
// veh = CreateVehicle ;
1708: LD_ADDR_VAR 0 2
1712: PUSH
1713: CALL_OW 45
1717: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1718: LD_VAR 0 2
1722: PPUSH
1723: LD_INT 4
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1733: LD_ADDR_OWVAR 40
1737: PUSH
1738: LD_INT 4
1740: ST_TO_ADDR
// veh = CreateVehicle ;
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: CALL_OW 45
1750: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1751: LD_VAR 0 2
1755: PPUSH
1756: LD_INT 4
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: CALL_OW 49
// end ;
1766: LD_VAR 0 1
1770: RET
// export function PowellSupport1 ; var veh , un ; begin
1771: LD_INT 0
1773: PPUSH
1774: PPUSH
1775: PPUSH
// uc_side = 1 ;
1776: LD_ADDR_OWVAR 20
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// uc_nation = 1 ;
1784: LD_ADDR_OWVAR 21
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1792: LD_STRING 11_Brown
1794: PPUSH
1795: CALL_OW 28
1799: PUSH
1800: LD_INT 1
1802: EQUAL
1803: IFFALSE 1850
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1805: LD_ADDR_EXP 7
1809: PUSH
1810: LD_STRING 11_Brown
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 13022 0 2
1820: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1821: LD_EXP 7
1825: PPUSH
1826: LD_INT 2
1828: PPUSH
1829: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1833: LD_EXP 7
1837: PPUSH
1838: LD_INT 4
1840: PPUSH
1841: LD_INT 0
1843: PPUSH
1844: CALL_OW 49
// end else
1848: GO 1866
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1850: LD_INT 4
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL 1142 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1866: LD_STRING 11_Gary
1868: PPUSH
1869: CALL_OW 28
1873: PUSH
1874: LD_INT 1
1876: EQUAL
1877: IFFALSE 1924
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1879: LD_ADDR_EXP 11
1883: PUSH
1884: LD_STRING 11_Gary
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: CALL 13022 0 2
1894: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1895: LD_EXP 11
1899: PPUSH
1900: LD_INT 2
1902: PPUSH
1903: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1907: LD_EXP 11
1911: PPUSH
1912: LD_INT 4
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 49
// end else
1922: GO 1940
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1924: LD_INT 4
1926: PPUSH
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL 1142 0 4
// end ; vc_chassis = us_medium_tracked ;
1940: LD_ADDR_OWVAR 37
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_engine = 3 ;
1948: LD_ADDR_OWVAR 39
1952: PUSH
1953: LD_INT 3
1955: ST_TO_ADDR
// vc_control = 1 ;
1956: LD_ADDR_OWVAR 38
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// vc_weapon = us_crane ;
1964: LD_ADDR_OWVAR 40
1968: PUSH
1969: LD_INT 13
1971: ST_TO_ADDR
// veh = CreateVehicle ;
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: CALL_OW 45
1981: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1982: LD_VAR 0 2
1986: PPUSH
1987: LD_INT 4
1989: PPUSH
1990: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1994: LD_VAR 0 2
1998: PPUSH
1999: LD_INT 4
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2009: LD_INT 4
2011: PPUSH
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_INT 2
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL 1142 0 4
// vc_weapon = 9 ;
2027: LD_ADDR_OWVAR 40
2031: PUSH
2032: LD_INT 9
2034: ST_TO_ADDR
// veh = CreateVehicle ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: CALL_OW 45
2044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_INT 4
2052: PPUSH
2053: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2057: LD_VAR 0 2
2061: PPUSH
2062: LD_INT 4
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2072: LD_INT 4
2074: PPUSH
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL 1142 0 4
// vc_control = 3 ;
2090: LD_ADDR_OWVAR 38
2094: PUSH
2095: LD_INT 3
2097: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2098: LD_ADDR_OWVAR 40
2102: PUSH
2103: LD_INT 12
2105: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2106: LD_ADDR_EXP 15
2110: PUSH
2111: CALL_OW 45
2115: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2116: LD_ADDR_EXP 16
2120: PUSH
2121: CALL_OW 45
2125: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2126: LD_EXP 15
2130: PPUSH
2131: LD_INT 4
2133: PPUSH
2134: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2138: LD_EXP 16
2142: PPUSH
2143: LD_INT 4
2145: PPUSH
2146: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2150: LD_EXP 15
2154: PPUSH
2155: LD_INT 4
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2165: LD_EXP 16
2169: PPUSH
2170: LD_INT 4
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2180: LD_EXP 15
2184: PPUSH
2185: LD_INT 3
2187: PPUSH
2188: LD_INT 100
2190: PPUSH
2191: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2195: LD_EXP 16
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2210: LD_EXP 16
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 20
2220: PPUSH
2221: CALL_OW 291
// end ;
2225: LD_VAR 0 1
2229: RET
// export function PowellSupport2 ; var veh , un ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
2234: PPUSH
// uc_side = 1 ;
2235: LD_ADDR_OWVAR 20
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// uc_nation = 1 ;
2243: LD_ADDR_OWVAR 21
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2251: LD_ADDR_OWVAR 37
2255: PUSH
2256: LD_INT 2
2258: ST_TO_ADDR
// vc_engine = 3 ;
2259: LD_ADDR_OWVAR 39
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_control = 3 ;
2267: LD_ADDR_OWVAR 38
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2275: LD_ADDR_OWVAR 40
2279: PUSH
2280: LD_INT 3
2282: ST_TO_ADDR
// veh = CreateVehicle ;
2283: LD_ADDR_VAR 0 2
2287: PUSH
2288: CALL_OW 45
2292: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2293: LD_VAR 0 2
2297: PPUSH
2298: LD_INT 4
2300: PPUSH
2301: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2305: LD_VAR 0 2
2309: PPUSH
2310: LD_INT 4
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: CALL_OW 49
// vc_control = 1 ;
2320: LD_ADDR_OWVAR 38
2324: PUSH
2325: LD_INT 1
2327: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2328: LD_ADDR_OWVAR 37
2332: PUSH
2333: LD_INT 2
2335: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2336: LD_ADDR_OWVAR 40
2340: PUSH
2341: LD_INT 5
2343: ST_TO_ADDR
// veh = CreateVehicle ;
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: CALL_OW 45
2353: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2354: LD_VAR 0 2
2358: PPUSH
2359: LD_INT 4
2361: PPUSH
2362: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2366: LD_VAR 0 2
2370: PPUSH
2371: LD_INT 4
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2381: LD_STRING 11_Bobby
2383: PPUSH
2384: CALL_OW 28
2388: PUSH
2389: LD_INT 1
2391: EQUAL
2392: IFFALSE 2438
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2394: LD_ADDR_EXP 4
2398: PUSH
2399: LD_STRING 11_Bobby
2401: PPUSH
2402: LD_INT 1
2404: PPUSH
2405: CALL 13022 0 2
2409: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2410: LD_EXP 4
2414: PPUSH
2415: LD_INT 3
2417: PPUSH
2418: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2422: LD_EXP 4
2426: PPUSH
2427: LD_VAR 0 2
2431: PPUSH
2432: CALL_OW 52
// end else
2436: GO 2456
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2438: LD_INT 0
2440: PPUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_INT 2
2448: PPUSH
2449: LD_INT 0
2451: PPUSH
2452: CALL 1142 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2456: LD_STRING 11_Houten
2458: PPUSH
2459: CALL_OW 28
2463: PUSH
2464: LD_INT 1
2466: EQUAL
2467: IFFALSE 2514
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2469: LD_ADDR_EXP 9
2473: PUSH
2474: LD_STRING 11_Houten
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL 13022 0 2
2484: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2485: LD_EXP 9
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2497: LD_EXP 9
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL_OW 49
// end else
2512: GO 2530
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2514: LD_INT 4
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: CALL 1142 0 4
// end ; vc_control = 3 ;
2530: LD_ADDR_OWVAR 38
2534: PUSH
2535: LD_INT 3
2537: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2538: LD_ADDR_OWVAR 40
2542: PUSH
2543: LD_INT 12
2545: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2546: LD_ADDR_EXP 17
2550: PUSH
2551: CALL_OW 45
2555: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2556: LD_EXP 17
2560: PPUSH
2561: LD_INT 4
2563: PPUSH
2564: CALL_OW 233
// amCargo4 = CreateVehicle ;
2568: LD_ADDR_EXP 18
2572: PUSH
2573: CALL_OW 45
2577: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2578: LD_EXP 18
2582: PPUSH
2583: LD_INT 4
2585: PPUSH
2586: CALL_OW 233
// amCargo5 = CreateVehicle ;
2590: LD_ADDR_EXP 19
2594: PUSH
2595: CALL_OW 45
2599: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2600: LD_EXP 19
2604: PPUSH
2605: LD_INT 4
2607: PPUSH
2608: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2612: LD_EXP 17
2616: PPUSH
2617: LD_INT 4
2619: PPUSH
2620: LD_INT 0
2622: PPUSH
2623: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2627: LD_EXP 18
2631: PPUSH
2632: LD_INT 4
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2642: LD_EXP 19
2646: PPUSH
2647: LD_INT 4
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2657: LD_EXP 17
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 100
2667: PPUSH
2668: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2672: LD_EXP 18
2676: PPUSH
2677: LD_INT 1
2679: PPUSH
2680: LD_INT 100
2682: PPUSH
2683: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2687: LD_EXP 19
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: LD_INT 100
2697: PPUSH
2698: CALL_OW 291
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PowellSupport3 ; var veh , un ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// uc_side = 1 ;
2712: LD_ADDR_OWVAR 20
2716: PUSH
2717: LD_INT 1
2719: ST_TO_ADDR
// uc_nation = 1 ;
2720: LD_ADDR_OWVAR 21
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2728: LD_INT 4
2730: PPUSH
2731: LD_INT 0
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL 1142 0 4
// vc_chassis = us_medium_wheeled ;
2744: LD_ADDR_OWVAR 37
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// vc_engine = 3 ;
2752: LD_ADDR_OWVAR 39
2756: PUSH
2757: LD_INT 3
2759: ST_TO_ADDR
// vc_control = 3 ;
2760: LD_ADDR_OWVAR 38
2764: PUSH
2765: LD_INT 3
2767: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2768: LD_ADDR_OWVAR 40
2772: PUSH
2773: LD_INT 12
2775: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2776: LD_ADDR_EXP 20
2780: PUSH
2781: CALL_OW 45
2785: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2786: LD_ADDR_EXP 21
2790: PUSH
2791: CALL_OW 45
2795: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2796: LD_EXP 20
2800: PPUSH
2801: LD_INT 4
2803: PPUSH
2804: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2808: LD_EXP 21
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2820: LD_EXP 20
2824: PPUSH
2825: LD_INT 4
2827: PPUSH
2828: LD_INT 0
2830: PPUSH
2831: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2835: LD_EXP 21
2839: PPUSH
2840: LD_INT 4
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2850: LD_EXP 20
2854: PPUSH
2855: LD_INT 1
2857: PPUSH
2858: LD_INT 100
2860: PPUSH
2861: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2865: LD_EXP 21
2869: PPUSH
2870: LD_INT 3
2872: PPUSH
2873: LD_INT 100
2875: PPUSH
2876: CALL_OW 291
// end ; end_of_file
2880: LD_VAR 0 1
2884: RET
// export function PrepareRussianCommander ; begin
2885: LD_INT 0
2887: PPUSH
// uc_side = 3 ;
2888: LD_ADDR_OWVAR 20
2892: PUSH
2893: LD_INT 3
2895: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2896: LD_ADDR_EXP 23
2900: PUSH
2901: LD_STRING Davidov
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL 13022 0 2
2911: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2924: LD_ADDR_EXP 35
2928: PUSH
2929: LD_EXP 35
2933: PUSH
2934: LD_EXP 23
2938: ADD
2939: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2940: LD_EXP 35
2944: PPUSH
2945: LD_INT 4
2947: PPUSH
2948: CALL_OW 336
// end ;
2952: LD_VAR 0 1
2956: RET
// export function PrepareEastBase ; var i , un ; begin
2957: LD_INT 0
2959: PPUSH
2960: PPUSH
2961: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2962: LD_INT 3
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: LD_INT 121
2970: PPUSH
2971: LD_EXP 37
2975: PPUSH
2976: LD_EXP 38
2980: PPUSH
2981: CALL_OW 12
2985: PPUSH
2986: LD_INT 1
2988: PPUSH
2989: LD_INT 3
2991: PPUSH
2992: CALL 13814 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2996: LD_INT 3
2998: PPUSH
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 121
3004: PPUSH
3005: LD_EXP 37
3009: PPUSH
3010: LD_EXP 38
3014: PPUSH
3015: CALL_OW 12
3019: PPUSH
3020: LD_INT 9
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL 13814 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3030: LD_INT 3
3032: PPUSH
3033: LD_INT 3
3035: PPUSH
3036: LD_INT 4
3038: PPUSH
3039: LD_EXP 37
3043: PPUSH
3044: LD_EXP 38
3048: PPUSH
3049: CALL_OW 12
3053: PPUSH
3054: LD_INT 2
3056: PPUSH
3057: LD_INT 6
3059: PPUSH
3060: CALL 13814 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3064: LD_INT 3
3066: PPUSH
3067: LD_INT 3
3069: PPUSH
3070: LD_INT 112
3072: PPUSH
3073: LD_EXP 37
3077: PPUSH
3078: LD_EXP 38
3082: PPUSH
3083: CALL_OW 12
3087: PPUSH
3088: LD_INT 3
3090: PPUSH
3091: LD_INT 6
3093: PPUSH
3094: CALL 13814 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: LD_INT 47
3106: PPUSH
3107: LD_EXP 37
3111: PPUSH
3112: LD_EXP 38
3116: PPUSH
3117: CALL_OW 12
3121: PPUSH
3122: LD_INT 4
3124: PPUSH
3125: LD_INT 6
3127: PPUSH
3128: CALL 13814 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3132: LD_INT 3
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_INT 129
3140: PPUSH
3141: LD_EXP 37
3145: PPUSH
3146: LD_EXP 38
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: LD_INT 4
3158: PPUSH
3159: LD_INT 6
3161: PPUSH
3162: CALL 13814 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3166: LD_INT 3
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 135
3174: PPUSH
3175: LD_EXP 37
3179: PPUSH
3180: LD_EXP 38
3184: PPUSH
3185: CALL_OW 12
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: LD_INT 6
3195: PPUSH
3196: CALL 13814 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 30
3217: PUSH
3218: LD_INT 32
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PPUSH
3229: CALL_OW 69
3233: PUSH
3234: FOR_IN
3235: IFFALSE 3275
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_VAR 0 2
3247: PPUSH
3248: LD_EXP 37
3252: PPUSH
3253: LD_EXP 38
3257: PPUSH
3258: CALL_OW 12
3262: PPUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 13814 0 6
3273: GO 3234
3275: POP
3276: POP
// for i = 1 to 5 do
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_INT 5
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3390
// begin uc_side = 3 ;
3293: LD_ADDR_OWVAR 20
3297: PUSH
3298: LD_INT 3
3300: ST_TO_ADDR
// uc_nation = 3 ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 3
3308: ST_TO_ADDR
// hc_gallery =  ;
3309: LD_ADDR_OWVAR 33
3313: PUSH
3314: LD_STRING 
3316: ST_TO_ADDR
// hc_name =  ;
3317: LD_ADDR_OWVAR 26
3321: PUSH
3322: LD_STRING 
3324: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3325: LD_INT 0
3327: PPUSH
3328: LD_INT 4
3330: PPUSH
3331: LD_EXP 37
3335: PPUSH
3336: LD_EXP 38
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: CALL_OW 380
// un = CreateHuman ;
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: CALL_OW 44
3359: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3372: LD_ADDR_EXP 35
3376: PUSH
3377: LD_EXP 35
3381: PUSH
3382: LD_VAR 0 3
3386: ADD
3387: ST_TO_ADDR
// end ;
3388: GO 3290
3390: POP
3391: POP
// end ;
3392: LD_VAR 0 1
3396: RET
// export function PrepareWestBase ; var i , un ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
3401: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3402: LD_INT 3
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 6
3410: PPUSH
3411: LD_EXP 37
3415: PPUSH
3416: LD_EXP 38
3420: PPUSH
3421: CALL_OW 12
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: LD_INT 3
3431: PPUSH
3432: CALL 13814 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3436: LD_INT 3
3438: PPUSH
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 91
3444: PPUSH
3445: LD_EXP 37
3449: PPUSH
3450: LD_EXP 38
3454: PPUSH
3455: CALL_OW 12
3459: PPUSH
3460: LD_INT 4
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: CALL 13814 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 21
3478: PPUSH
3479: LD_EXP 37
3483: PPUSH
3484: LD_EXP 38
3488: PPUSH
3489: CALL_OW 12
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: LD_INT 6
3499: PPUSH
3500: CALL 13814 0 6
// end ;
3504: LD_VAR 0 1
3508: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3509: LD_INT 0
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
// uc_side = 3 ;
3515: LD_ADDR_OWVAR 20
3519: PUSH
3520: LD_INT 3
3522: ST_TO_ADDR
// uc_nation = 3 ;
3523: LD_ADDR_OWVAR 21
3527: PUSH
3528: LD_INT 3
3530: ST_TO_ADDR
// for i = 1 to 5 do
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: DOUBLE
3537: LD_INT 1
3539: DEC
3540: ST_TO_ADDR
3541: LD_INT 5
3543: PUSH
3544: FOR_TO
3545: IFFALSE 3615
// begin hc_gallery =  ;
3547: LD_ADDR_OWVAR 33
3551: PUSH
3552: LD_STRING 
3554: ST_TO_ADDR
// hc_name =  ;
3555: LD_ADDR_OWVAR 26
3559: PUSH
3560: LD_STRING 
3562: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 9
3568: PPUSH
3569: LD_EXP 37
3573: PPUSH
3574: LD_EXP 38
3578: PPUSH
3579: CALL_OW 12
3583: PPUSH
3584: CALL_OW 380
// un = CreateHuman ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: CALL_OW 44
3597: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: LD_INT 0
3608: PPUSH
3609: CALL_OW 49
// end ;
3613: GO 3544
3615: POP
3616: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3617: LD_ADDR_VAR 0 2
3621: PUSH
3622: DOUBLE
3623: LD_INT 1
3625: DEC
3626: ST_TO_ADDR
3627: LD_INT 2
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: LD_OWVAR 67
3645: ARRAY
3646: PUSH
3647: FOR_TO
3648: IFFALSE 3718
// begin hc_gallery =  ;
3650: LD_ADDR_OWVAR 33
3654: PUSH
3655: LD_STRING 
3657: ST_TO_ADDR
// hc_name =  ;
3658: LD_ADDR_OWVAR 26
3662: PUSH
3663: LD_STRING 
3665: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3666: LD_INT 0
3668: PPUSH
3669: LD_INT 4
3671: PPUSH
3672: LD_EXP 37
3676: PPUSH
3677: LD_EXP 38
3681: PPUSH
3682: CALL_OW 12
3686: PPUSH
3687: CALL_OW 380
// un = CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 8
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL_OW 49
// end ;
3716: GO 3647
3718: POP
3719: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3720: LD_ADDR_VAR 0 2
3724: PUSH
3725: DOUBLE
3726: LD_INT 1
3728: DEC
3729: ST_TO_ADDR
3730: LD_INT 3
3732: PUSH
3733: LD_INT 4
3735: PUSH
3736: LD_INT 5
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3947
// begin vc_engine = 3 ;
3753: LD_ADDR_OWVAR 39
3757: PUSH
3758: LD_INT 3
3760: ST_TO_ADDR
// vc_control = 1 ;
3761: LD_ADDR_OWVAR 38
3765: PUSH
3766: LD_INT 1
3768: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3769: LD_ADDR_OWVAR 40
3773: PUSH
3774: LD_INT 42
3776: PUSH
3777: LD_INT 43
3779: PUSH
3780: LD_INT 44
3782: PUSH
3783: LD_INT 45
3785: PUSH
3786: LD_INT 46
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 5
3801: PPUSH
3802: CALL_OW 12
3806: ARRAY
3807: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 46
3815: EQUAL
3816: IFFALSE 3828
// vc_chassis = ru_heavy_tracked else
3818: LD_ADDR_OWVAR 37
3822: PUSH
3823: LD_INT 24
3825: ST_TO_ADDR
3826: GO 3855
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3828: LD_ADDR_OWVAR 37
3832: PUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 21
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: ST_TO_ADDR
// veh = CreateVehicle ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: CALL_OW 45
3864: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3865: LD_VAR 0 4
3869: PPUSH
3870: LD_INT 3
3872: PPUSH
3873: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3877: LD_VAR 0 4
3881: PPUSH
3882: LD_INT 5
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 49
// hc_gallery =  ;
3892: LD_ADDR_OWVAR 33
3896: PUSH
3897: LD_STRING 
3899: ST_TO_ADDR
// hc_name =  ;
3900: LD_ADDR_OWVAR 26
3904: PUSH
3905: LD_STRING 
3907: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 3
3913: PPUSH
3914: LD_INT 10
3916: PPUSH
3917: CALL_OW 380
// un = CreateHuman ;
3921: LD_ADDR_VAR 0 3
3925: PUSH
3926: CALL_OW 44
3930: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3931: LD_VAR 0 3
3935: PPUSH
3936: LD_VAR 0 4
3940: PPUSH
3941: CALL_OW 52
// end ;
3945: GO 3750
3947: POP
3948: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 3
3961: PUSH
3962: LD_INT 4
3964: PUSH
3965: LD_INT 5
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_OWVAR 67
3977: ARRAY
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4127
// begin vc_engine = 3 ;
3982: LD_ADDR_OWVAR 39
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// vc_control = 3 ;
3990: LD_ADDR_OWVAR 38
3994: PUSH
3995: LD_INT 3
3997: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3998: LD_ADDR_OWVAR 40
4002: PUSH
4003: LD_INT 42
4005: PUSH
4006: LD_INT 43
4008: PUSH
4009: LD_INT 44
4011: PUSH
4012: LD_INT 45
4014: PUSH
4015: LD_INT 46
4017: PUSH
4018: LD_INT 49
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: CALL_OW 12
4039: ARRAY
4040: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4041: LD_OWVAR 40
4045: PUSH
4046: LD_INT 46
4048: EQUAL
4049: IFFALSE 4061
// vc_chassis = ru_heavy_tracked else
4051: LD_ADDR_OWVAR 37
4055: PUSH
4056: LD_INT 24
4058: ST_TO_ADDR
4059: GO 4088
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4061: LD_ADDR_OWVAR 37
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 21
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 2
4081: PPUSH
4082: CALL_OW 12
4086: ARRAY
4087: ST_TO_ADDR
// veh = CreateVehicle ;
4088: LD_ADDR_VAR 0 4
4092: PUSH
4093: CALL_OW 45
4097: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4098: LD_VAR 0 4
4102: PPUSH
4103: LD_INT 3
4105: PPUSH
4106: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4110: LD_VAR 0 4
4114: PPUSH
4115: LD_INT 6
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 3979
4127: POP
4128: POP
// end ; end_of_file
4129: LD_VAR 0 1
4133: RET
// export function PrepareKurt ; begin
4134: LD_INT 0
4136: PPUSH
// uc_side = 8 ;
4137: LD_ADDR_OWVAR 20
4141: PUSH
4142: LD_INT 8
4144: ST_TO_ADDR
// uc_nation = 2 ;
4145: LD_ADDR_OWVAR 21
4149: PUSH
4150: LD_INT 2
4152: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4153: LD_ADDR_OWVAR 37
4157: PUSH
4158: LD_INT 13
4160: ST_TO_ADDR
// vc_engine = 1 ;
4161: LD_ADDR_OWVAR 39
4165: PUSH
4166: LD_INT 1
4168: ST_TO_ADDR
// vc_control = 1 ;
4169: LD_ADDR_OWVAR 38
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// vc_weapon = 24 ;
4177: LD_ADDR_OWVAR 40
4181: PUSH
4182: LD_INT 24
4184: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4185: LD_ADDR_EXP 26
4189: PUSH
4190: CALL_OW 45
4194: ST_TO_ADDR
// if kurtStatus > 0 then
4195: LD_EXP 27
4199: PUSH
4200: LD_INT 0
4202: GREATER
4203: IFFALSE 4252
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4205: LD_ADDR_EXP 24
4209: PUSH
4210: LD_STRING Kurt
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: CALL 13022 0 2
4220: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4221: LD_EXP 26
4225: PPUSH
4226: LD_INT 4
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4236: LD_EXP 24
4240: PPUSH
4241: LD_EXP 26
4245: PPUSH
4246: CALL_OW 52
// end else
4250: GO 4317
// begin hc_name =  ;
4252: LD_ADDR_OWVAR 26
4256: PUSH
4257: LD_STRING 
4259: ST_TO_ADDR
// hc_gallery =  ;
4260: LD_ADDR_OWVAR 33
4264: PUSH
4265: LD_STRING 
4267: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4268: LD_INT 1
4270: PPUSH
4271: LD_INT 10
4273: PPUSH
4274: CALL_OW 381
// otherKurt = CreateHuman ;
4278: LD_ADDR_EXP 25
4282: PUSH
4283: CALL_OW 44
4287: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4288: LD_EXP 26
4292: PPUSH
4293: LD_INT 4
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4303: LD_EXP 25
4307: PPUSH
4308: LD_EXP 26
4312: PPUSH
4313: CALL_OW 52
// end ; end ;
4317: LD_VAR 0 1
4321: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4322: LD_INT 0
4324: PPUSH
4325: PPUSH
4326: PPUSH
4327: PPUSH
// for i = 1 to 3 do
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 3
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4479
// begin uc_side = 1 ;
4344: LD_ADDR_OWVAR 20
4348: PUSH
4349: LD_INT 1
4351: ST_TO_ADDR
// uc_nation = 2 ;
4352: LD_ADDR_OWVAR 21
4356: PUSH
4357: LD_INT 2
4359: ST_TO_ADDR
// hc_gallery =  ;
4360: LD_ADDR_OWVAR 33
4364: PUSH
4365: LD_STRING 
4367: ST_TO_ADDR
// hc_name =  ;
4368: LD_ADDR_OWVAR 26
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4376: LD_EXP 27
4380: PUSH
4381: LD_INT 0
4383: EQUAL
4384: PUSH
4385: LD_EXP 27
4389: PUSH
4390: LD_INT 2
4392: EQUAL
4393: OR
4394: IFFALSE 4419
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 1
4401: PPUSH
4402: LD_INT 2
4404: PPUSH
4405: LD_INT 4
4407: PPUSH
4408: CALL_OW 12
4412: PPUSH
4413: CALL_OW 380
4417: GO 4440
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4419: LD_INT 0
4421: PPUSH
4422: LD_INT 1
4424: PPUSH
4425: LD_INT 6
4427: PPUSH
4428: LD_INT 8
4430: PPUSH
4431: CALL_OW 12
4435: PPUSH
4436: CALL_OW 380
// un = CreateHuman ;
4440: LD_ADDR_VAR 0 3
4444: PUSH
4445: CALL_OW 44
4449: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4450: LD_VAR 0 3
4454: PPUSH
4455: LD_INT 4
4457: PPUSH
4458: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4462: LD_VAR 0 3
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 49
// end ;
4477: GO 4341
4479: POP
4480: POP
// vc_chassis = 14 ;
4481: LD_ADDR_OWVAR 37
4485: PUSH
4486: LD_INT 14
4488: ST_TO_ADDR
// vc_engine = 3 ;
4489: LD_ADDR_OWVAR 39
4493: PUSH
4494: LD_INT 3
4496: ST_TO_ADDR
// vc_control = 1 ;
4497: LD_ADDR_OWVAR 38
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4505: LD_ADDR_OWVAR 40
4509: PUSH
4510: LD_INT 27
4512: PUSH
4513: LD_INT 26
4515: PUSH
4516: LD_INT 28
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 1
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: CALL_OW 12
4534: ARRAY
4535: ST_TO_ADDR
// veh = CreateVehicle ;
4536: LD_ADDR_VAR 0 4
4540: PUSH
4541: CALL_OW 45
4545: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4546: LD_VAR 0 4
4550: PPUSH
4551: LD_INT 4
4553: PPUSH
4554: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4558: LD_VAR 0 4
4562: PPUSH
4563: LD_INT 4
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4573: LD_EXP 27
4577: PUSH
4578: LD_INT 0
4580: EQUAL
4581: PUSH
4582: LD_EXP 27
4586: PUSH
4587: LD_INT 2
4589: EQUAL
4590: OR
4591: IFFALSE 4616
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4593: LD_INT 0
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: LD_INT 2
4601: PPUSH
4602: LD_INT 4
4604: PPUSH
4605: CALL_OW 12
4609: PPUSH
4610: CALL_OW 380
4614: GO 4637
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4616: LD_INT 0
4618: PPUSH
4619: LD_INT 3
4621: PPUSH
4622: LD_INT 6
4624: PPUSH
4625: LD_INT 8
4627: PPUSH
4628: CALL_OW 12
4632: PPUSH
4633: CALL_OW 380
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_VAR 0 4
4656: PPUSH
4657: CALL_OW 52
// vc_chassis = 14 ;
4661: LD_ADDR_OWVAR 37
4665: PUSH
4666: LD_INT 14
4668: ST_TO_ADDR
// vc_engine = 3 ;
4669: LD_ADDR_OWVAR 39
4673: PUSH
4674: LD_INT 3
4676: ST_TO_ADDR
// vc_control = 1 ;
4677: LD_ADDR_OWVAR 38
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4685: LD_ADDR_OWVAR 40
4689: PUSH
4690: LD_INT 27
4692: PUSH
4693: LD_INT 26
4695: PUSH
4696: LD_INT 28
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 3
4709: PPUSH
4710: CALL_OW 12
4714: ARRAY
4715: ST_TO_ADDR
// veh = CreateVehicle ;
4716: LD_ADDR_VAR 0 4
4720: PUSH
4721: CALL_OW 45
4725: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_INT 4
4733: PPUSH
4734: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4738: LD_VAR 0 4
4742: PPUSH
4743: LD_INT 4
4745: PPUSH
4746: LD_INT 0
4748: PPUSH
4749: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4753: LD_EXP 27
4757: PUSH
4758: LD_INT 0
4760: EQUAL
4761: PUSH
4762: LD_EXP 27
4766: PUSH
4767: LD_INT 2
4769: EQUAL
4770: OR
4771: IFFALSE 4796
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4773: LD_INT 0
4775: PPUSH
4776: LD_INT 4
4778: PPUSH
4779: LD_INT 2
4781: PPUSH
4782: LD_INT 4
4784: PPUSH
4785: CALL_OW 12
4789: PPUSH
4790: CALL_OW 380
4794: GO 4817
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4796: LD_INT 0
4798: PPUSH
4799: LD_INT 4
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 8
4807: PPUSH
4808: CALL_OW 12
4812: PPUSH
4813: CALL_OW 380
// un = CreateHuman ;
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: CALL_OW 44
4826: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4839: LD_VAR 0 3
4843: PPUSH
4844: LD_VAR 0 4
4848: PPUSH
4849: CALL_OW 52
// vc_chassis = 14 ;
4853: LD_ADDR_OWVAR 37
4857: PUSH
4858: LD_INT 14
4860: ST_TO_ADDR
// vc_engine = 3 ;
4861: LD_ADDR_OWVAR 39
4865: PUSH
4866: LD_INT 3
4868: ST_TO_ADDR
// vc_control = 1 ;
4869: LD_ADDR_OWVAR 38
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4877: LD_ADDR_OWVAR 40
4881: PUSH
4882: LD_INT 27
4884: PUSH
4885: LD_INT 26
4887: PUSH
4888: LD_INT 28
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 1
4898: PPUSH
4899: LD_INT 3
4901: PPUSH
4902: CALL_OW 12
4906: ARRAY
4907: ST_TO_ADDR
// veh = CreateVehicle ;
4908: LD_ADDR_VAR 0 4
4912: PUSH
4913: CALL_OW 45
4917: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4918: LD_VAR 0 4
4922: PPUSH
4923: LD_INT 4
4925: PPUSH
4926: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4930: LD_VAR 0 4
4934: PPUSH
4935: LD_INT 4
4937: PPUSH
4938: LD_INT 0
4940: PPUSH
4941: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4945: LD_EXP 27
4949: PUSH
4950: LD_INT 0
4952: EQUAL
4953: PUSH
4954: LD_EXP 27
4958: PUSH
4959: LD_INT 2
4961: EQUAL
4962: OR
4963: IFFALSE 4988
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4965: LD_INT 0
4967: PPUSH
4968: LD_INT 2
4970: PPUSH
4971: LD_INT 2
4973: PPUSH
4974: LD_INT 4
4976: PPUSH
4977: CALL_OW 12
4981: PPUSH
4982: CALL_OW 380
4986: GO 5009
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4988: LD_INT 0
4990: PPUSH
4991: LD_INT 2
4993: PPUSH
4994: LD_INT 6
4996: PPUSH
4997: LD_INT 8
4999: PPUSH
5000: CALL_OW 12
5004: PPUSH
5005: CALL_OW 380
// un = CreateHuman ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5019: LD_VAR 0 3
5023: PPUSH
5024: LD_INT 4
5026: PPUSH
5027: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_VAR 0 4
5040: PPUSH
5041: CALL_OW 52
// end ;
5045: LD_VAR 0 1
5049: RET
// export function PrepareAttackLegion ; var i , un ; begin
5050: LD_INT 0
5052: PPUSH
5053: PPUSH
5054: PPUSH
// for i = 1 to 4 do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_INT 4
5067: PUSH
5068: FOR_TO
5069: IFFALSE 5179
// begin uc_side = 8 ;
5071: LD_ADDR_OWVAR 20
5075: PUSH
5076: LD_INT 8
5078: ST_TO_ADDR
// uc_nation = 2 ;
5079: LD_ADDR_OWVAR 21
5083: PUSH
5084: LD_INT 2
5086: ST_TO_ADDR
// hc_gallery =  ;
5087: LD_ADDR_OWVAR 33
5091: PUSH
5092: LD_STRING 
5094: ST_TO_ADDR
// hc_name =  ;
5095: LD_ADDR_OWVAR 26
5099: PUSH
5100: LD_STRING 
5102: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5103: LD_INT 0
5105: PPUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 8
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: LD_INT 1
5118: PPUSH
5119: LD_INT 2
5121: PPUSH
5122: CALL_OW 12
5126: ARRAY
5127: PPUSH
5128: LD_INT 6
5130: PPUSH
5131: LD_INT 8
5133: PPUSH
5134: CALL_OW 12
5138: PPUSH
5139: CALL_OW 380
// un = CreateHuman ;
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: CALL_OW 44
5152: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5153: LD_VAR 0 3
5157: PPUSH
5158: LD_INT 19
5160: PPUSH
5161: LD_INT 0
5163: PPUSH
5164: CALL_OW 49
// ComCrawl ( un ) ;
5168: LD_VAR 0 3
5172: PPUSH
5173: CALL_OW 137
// end ;
5177: GO 5068
5179: POP
5180: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5181: LD_INT 1
5183: PPUSH
5184: LD_INT 8
5186: PPUSH
5187: LD_INT 2
5189: PPUSH
5190: LD_INT 1
5192: PPUSH
5193: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5197: LD_INT 20
5199: PPUSH
5200: LD_INT 3
5202: PPUSH
5203: CALL 15949 0 2
// end ; end_of_file
5207: LD_VAR 0 1
5211: RET
// every 1 do var i ;
5212: GO 5214
5214: DISABLE
5215: LD_INT 0
5217: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5218: LD_INT 10
5220: PPUSH
5221: LD_INT 122
5223: PPUSH
5224: LD_INT 145
5226: PPUSH
5227: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5231: LD_INT 137
5233: PPUSH
5234: LD_INT 84
5236: PPUSH
5237: LD_INT 61
5239: PPUSH
5240: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5244: LD_EXP 1
5248: PPUSH
5249: CALL_OW 310
5253: PPUSH
5254: CALL_OW 87
// InGameOn ;
5258: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5262: LD_INT 22
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PPUSH
5272: CALL_OW 69
5276: PPUSH
5277: LD_INT 130
5279: PPUSH
5280: LD_INT 103
5282: PPUSH
5283: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 114
5294: PPUSH
5295: LD_INT 102
5297: PPUSH
5298: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5302: LD_EXP 1
5306: PPUSH
5307: LD_STRING D1-JMM-1
5309: PPUSH
5310: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5314: LD_EXP 1
5318: PPUSH
5319: CALL_OW 310
5323: PPUSH
5324: CALL_OW 87
// if IsOk ( Donaldson ) then
5328: LD_EXP 3
5332: PPUSH
5333: CALL_OW 302
5337: IFFALSE 5417
// begin Say ( Donaldson , D1-Don-1 ) ;
5339: LD_EXP 3
5343: PPUSH
5344: LD_STRING D1-Don-1
5346: PPUSH
5347: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5351: LD_EXP 1
5355: PPUSH
5356: CALL_OW 310
5360: PPUSH
5361: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5365: LD_EXP 1
5369: PPUSH
5370: LD_STRING D1-JMM-2
5372: PPUSH
5373: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5377: LD_EXP 1
5381: PPUSH
5382: CALL_OW 310
5386: PPUSH
5387: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5391: LD_EXP 3
5395: PPUSH
5396: LD_STRING D1-Don-2
5398: PPUSH
5399: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5403: LD_EXP 1
5407: PPUSH
5408: CALL_OW 310
5412: PPUSH
5413: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5417: LD_INT 22
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 69
5431: PPUSH
5432: LD_INT 110
5434: PPUSH
5435: LD_INT 101
5437: PPUSH
5438: CALL_OW 171
// wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5449: LD_EXP 1
5453: PPUSH
5454: CALL_OW 310
5458: PPUSH
5459: CALL_OW 87
// wait ( 0 0$1 ) ;
5463: LD_INT 35
5465: PPUSH
5466: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5470: LD_EXP 1
5474: PPUSH
5475: CALL_OW 310
5479: PPUSH
5480: CALL_OW 87
// wait ( 0 0$1 ) ;
5484: LD_INT 35
5486: PPUSH
5487: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5491: LD_EXP 1
5495: PPUSH
5496: CALL_OW 310
5500: PPUSH
5501: CALL_OW 87
// wait ( 0 0$1 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5512: LD_EXP 1
5516: PPUSH
5517: CALL_OW 310
5521: PPUSH
5522: CALL_OW 87
// end ;
5526: PPOPN 1
5528: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5529: LD_INT 1
5531: PPUSH
5532: LD_INT 102
5534: PPUSH
5535: LD_INT 94
5537: PPUSH
5538: CALL_OW 293
5542: IFFALSE 5733
5544: GO 5546
5546: DISABLE
5547: LD_INT 0
5549: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5550: LD_INT 102
5552: PPUSH
5553: LD_INT 94
5555: PPUSH
5556: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5560: LD_INT 22
5562: PUSH
5563: LD_INT 1
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PUSH
5570: LD_INT 26
5572: PUSH
5573: LD_INT 1
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 2
5582: PUSH
5583: LD_INT 25
5585: PUSH
5586: LD_INT 1
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PUSH
5593: LD_INT 25
5595: PUSH
5596: LD_INT 2
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 25
5605: PUSH
5606: LD_INT 3
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 25
5615: PUSH
5616: LD_INT 4
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 5
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 69
5661: PPUSH
5662: LD_STRING D1-Sol1-2
5664: PPUSH
5665: LD_STRING 
5667: PPUSH
5668: CALL 13130 0 3
// Say ( JMM , D1-JMM-3 ) ;
5672: LD_EXP 1
5676: PPUSH
5677: LD_STRING D1-JMM-3
5679: PPUSH
5680: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5684: LD_STRING M1
5686: PPUSH
5687: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5691: LD_ADDR_VAR 0 1
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PPUSH
5706: CALL_OW 69
5710: PUSH
5711: FOR_IN
5712: IFFALSE 5731
// ComMoveXY ( i , 95 , 84 ) ;
5714: LD_VAR 0 1
5718: PPUSH
5719: LD_INT 95
5721: PPUSH
5722: LD_INT 84
5724: PPUSH
5725: CALL_OW 111
5729: GO 5711
5731: POP
5732: POP
// end ;
5733: PPOPN 1
5735: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_INT 8
5752: PPUSH
5753: LD_INT 22
5755: PUSH
5756: LD_INT 3
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 25
5765: PUSH
5766: LD_INT 9
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5782: LD_ADDR_VAR 0 3
5786: PUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PUSH
5797: EMPTY
5798: LIST
5799: PPUSH
5800: CALL_OW 69
5804: ST_TO_ADDR
// enable ;
5805: ENABLE
// for i in your_units do
5806: LD_ADDR_VAR 0 1
5810: PUSH
5811: LD_VAR 0 3
5815: PUSH
5816: FOR_IN
5817: IFFALSE 6465
// begin if See ( 3 , i ) then
5819: LD_INT 3
5821: PPUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 292
5831: IFFALSE 6463
// begin disable ;
5833: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5834: LD_VAR 0 2
5838: PPUSH
5839: LD_INT 96
5841: PPUSH
5842: LD_INT 85
5844: PPUSH
5845: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5849: LD_VAR 0 2
5853: PPUSH
5854: LD_INT 96
5856: PPUSH
5857: LD_INT 85
5859: PPUSH
5860: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5864: LD_VAR 0 2
5868: PPUSH
5869: LD_INT 96
5871: PPUSH
5872: LD_INT 85
5874: PPUSH
5875: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5879: LD_VAR 0 2
5883: PPUSH
5884: LD_INT 96
5886: PPUSH
5887: LD_INT 85
5889: PPUSH
5890: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 96
5901: PPUSH
5902: LD_INT 85
5904: PPUSH
5905: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5909: LD_VAR 0 2
5913: PPUSH
5914: LD_INT 96
5916: PPUSH
5917: LD_INT 85
5919: PPUSH
5920: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5924: LD_EXP 1
5928: PPUSH
5929: LD_STRING D1a-JMM-1
5931: PPUSH
5932: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5936: LD_EXP 3
5940: PPUSH
5941: LD_STRING D1a-Don-1
5943: PPUSH
5944: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5948: LD_ADDR_VAR 0 1
5952: PUSH
5953: LD_INT 22
5955: PUSH
5956: LD_INT 1
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PPUSH
5963: CALL_OW 69
5967: PUSH
5968: FOR_IN
5969: IFFALSE 5988
// ComMoveXY ( i , 109 , 102 ) ;
5971: LD_VAR 0 1
5975: PPUSH
5976: LD_INT 109
5978: PPUSH
5979: LD_INT 102
5981: PPUSH
5982: CALL_OW 111
5986: GO 5968
5988: POP
5989: POP
// Say ( JMM , D1a-JMM-2 ) ;
5990: LD_EXP 1
5994: PPUSH
5995: LD_STRING D1a-JMM-2
5997: PPUSH
5998: CALL_OW 88
// wait ( 0 0$10 ) ;
6002: LD_INT 350
6004: PPUSH
6005: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6009: LD_EXP 1
6013: PPUSH
6014: CALL_OW 310
6018: PPUSH
6019: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6023: LD_EXP 3
6027: PPUSH
6028: LD_STRING D1b-Don-1
6030: PPUSH
6031: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6035: LD_EXP 1
6039: PPUSH
6040: LD_STRING D1b-JMM-1
6042: PPUSH
6043: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6047: LD_INT 22
6049: PUSH
6050: LD_INT 1
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 26
6059: PUSH
6060: LD_INT 1
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 2
6069: PUSH
6070: LD_INT 25
6072: PUSH
6073: LD_INT 1
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 25
6082: PUSH
6083: LD_INT 2
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: LD_INT 25
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 25
6102: PUSH
6103: LD_INT 4
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 25
6112: PUSH
6113: LD_INT 5
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 25
6122: PUSH
6123: LD_INT 8
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: PPUSH
6144: CALL_OW 69
6148: PPUSH
6149: LD_STRING D1b-Sol1-1
6151: PPUSH
6152: LD_STRING 
6154: PPUSH
6155: CALL 13130 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6159: LD_EXP 3
6163: PPUSH
6164: LD_STRING D1b-Don-2
6166: PPUSH
6167: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6171: LD_EXP 1
6175: PPUSH
6176: LD_STRING D1b-JMM-2
6178: PPUSH
6179: CALL_OW 88
// dec = ShowQuery1 ;
6183: LD_ADDR_VAR 0 4
6187: PUSH
6188: CALL 13666 0 0
6192: ST_TO_ADDR
// if dec = 1 then
6193: LD_VAR 0 4
6197: PUSH
6198: LD_INT 1
6200: EQUAL
6201: IFFALSE 6307
// begin Say ( JMM , D2-JMM-1 ) ;
6203: LD_EXP 1
6207: PPUSH
6208: LD_STRING D2-JMM-1
6210: PPUSH
6211: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6215: LD_EXP 22
6219: PPUSH
6220: LD_STRING D2-Pow-1
6222: PPUSH
6223: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6227: LD_EXP 1
6231: PPUSH
6232: LD_STRING D2a-JMM-1
6234: PPUSH
6235: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6239: LD_EXP 22
6243: PPUSH
6244: LD_STRING D2a-Pow-1
6246: PPUSH
6247: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6251: LD_EXP 1
6255: PPUSH
6256: LD_STRING D2a-JMM-2
6258: PPUSH
6259: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6263: LD_EXP 22
6267: PPUSH
6268: LD_STRING D2a-Pow-2
6270: PPUSH
6271: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D2a-JMM-3
6282: PPUSH
6283: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6287: LD_EXP 22
6291: PPUSH
6292: LD_STRING D2a-Pow-3
6294: PPUSH
6295: CALL_OW 94
// secondPass = 2 ;
6299: LD_ADDR_EXP 28
6303: PUSH
6304: LD_INT 2
6306: ST_TO_ADDR
// end ; if dec = 2 then
6307: LD_VAR 0 4
6311: PUSH
6312: LD_INT 2
6314: EQUAL
6315: IFFALSE 6409
// begin Say ( JMM , D2-JMM-1 ) ;
6317: LD_EXP 1
6321: PPUSH
6322: LD_STRING D2-JMM-1
6324: PPUSH
6325: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6329: LD_EXP 22
6333: PPUSH
6334: LD_STRING D2-Pow-1
6336: PPUSH
6337: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6341: LD_EXP 1
6345: PPUSH
6346: LD_STRING D2b-JMM-1
6348: PPUSH
6349: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6353: LD_EXP 22
6357: PPUSH
6358: LD_STRING D2b-Pow-1
6360: PPUSH
6361: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6365: LD_EXP 1
6369: PPUSH
6370: LD_STRING D2c-JMM-1
6372: PPUSH
6373: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6377: LD_EXP 22
6381: PPUSH
6382: LD_STRING D2c-Pow-1
6384: PPUSH
6385: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6389: LD_EXP 1
6393: PPUSH
6394: LD_STRING D2c-JMM-2
6396: PPUSH
6397: CALL_OW 88
// secondPass = 2 ;
6401: LD_ADDR_EXP 28
6405: PUSH
6406: LD_INT 2
6408: ST_TO_ADDR
// end ; if dec = 3 then
6409: LD_VAR 0 4
6413: PUSH
6414: LD_INT 3
6416: EQUAL
6417: IFFALSE 6427
// secondPass = 1 ;
6419: LD_ADDR_EXP 28
6423: PUSH
6424: LD_INT 1
6426: ST_TO_ADDR
// InGameOff ;
6427: CALL_OW 9
// ruAI = 1 ;
6431: LD_ADDR_EXP 42
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6439: LD_INT 1
6441: PPUSH
6442: LD_INT 3
6444: PPUSH
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: CALL_OW 80
// SaveForQuickRestart ;
6455: CALL_OW 22
// exit ;
6459: POP
6460: POP
6461: GO 6467
// end ; end ;
6463: GO 5816
6465: POP
6466: POP
// end ;
6467: PPOPN 4
6469: END
// every 1 1$0 trigger secondPass = 2 do
6470: LD_EXP 28
6474: PUSH
6475: LD_INT 2
6477: EQUAL
6478: IFFALSE 6605
6480: GO 6482
6482: DISABLE
// begin PowellSupport1 ;
6483: CALL 1771 0 0
// DialogueOn ;
6487: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6491: LD_EXP 1
6495: PPUSH
6496: LD_STRING DC1-JMM-1
6498: PPUSH
6499: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6503: LD_EXP 22
6507: PPUSH
6508: LD_STRING DC1-Pow-1
6510: PPUSH
6511: CALL_OW 94
// DialogueOff ;
6515: CALL_OW 7
// wait ( 3 3$0 ) ;
6519: LD_INT 6300
6521: PPUSH
6522: CALL_OW 67
// PowellSupport2 ;
6526: CALL 2230 0 0
// DialogueOn ;
6530: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6534: LD_EXP 1
6538: PPUSH
6539: LD_STRING DC2-JMM-1
6541: PPUSH
6542: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6546: LD_EXP 22
6550: PPUSH
6551: LD_STRING DC2-Pow-1
6553: PPUSH
6554: CALL_OW 94
// DialogueOff ;
6558: CALL_OW 7
// wait ( 6 6$0 ) ;
6562: LD_INT 12600
6564: PPUSH
6565: CALL_OW 67
// PowellSupport3 ;
6569: CALL 2707 0 0
// DialogueOn ;
6573: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6577: LD_EXP 22
6581: PPUSH
6582: LD_STRING DC3-Pow-1
6584: PPUSH
6585: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6589: LD_EXP 1
6593: PPUSH
6594: LD_STRING DC3-JMM-1
6596: PPUSH
6597: CALL_OW 88
// DialogueOff ;
6601: CALL_OW 7
// end ;
6605: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6606: LD_EXP 28
6610: PUSH
6611: LD_INT 2
6613: EQUAL
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 2
6627: PUSH
6628: LD_INT 30
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 1
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL_OW 69
6661: PUSH
6662: LD_INT 0
6664: GREATER
6665: AND
6666: IFFALSE 10034
6668: GO 6670
6670: DISABLE
6671: LD_INT 0
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 22
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 21
6698: PUSH
6699: LD_INT 3
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 2
6708: PUSH
6709: LD_INT 30
6711: PUSH
6712: LD_INT 0
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 30
6721: PUSH
6722: LD_INT 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: PPUSH
6739: CALL_OW 69
6743: ST_TO_ADDR
// for i in tmp do
6744: LD_ADDR_VAR 0 1
6748: PUSH
6749: LD_VAR 0 4
6753: PUSH
6754: FOR_IN
6755: IFFALSE 6788
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6757: LD_ADDR_VAR 0 6
6761: PUSH
6762: LD_VAR 0 6
6766: PUSH
6767: LD_VAR 0 1
6771: PPUSH
6772: CALL_OW 274
6776: PPUSH
6777: LD_INT 1
6779: PPUSH
6780: CALL_OW 275
6784: PLUS
6785: ST_TO_ADDR
6786: GO 6754
6788: POP
6789: POP
// for i in tmp do
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: LD_VAR 0 4
6799: PUSH
6800: FOR_IN
6801: IFFALSE 6834
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6803: LD_ADDR_VAR 0 7
6807: PUSH
6808: LD_VAR 0 7
6812: PUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 274
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 275
6830: PLUS
6831: ST_TO_ADDR
6832: GO 6800
6834: POP
6835: POP
// for i in tmp do
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_VAR 0 4
6845: PUSH
6846: FOR_IN
6847: IFFALSE 6880
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6849: LD_ADDR_VAR 0 8
6853: PUSH
6854: LD_VAR 0 8
6858: PUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 274
6868: PPUSH
6869: LD_INT 3
6871: PPUSH
6872: CALL_OW 275
6876: PLUS
6877: ST_TO_ADDR
6878: GO 6846
6880: POP
6881: POP
// PrepareKurt ;
6882: CALL 4134 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6886: LD_EXP 26
6890: PPUSH
6891: LD_INT 144
6893: PPUSH
6894: LD_INT 111
6896: PPUSH
6897: CALL_OW 111
// wait ( 0 0$2 ) ;
6901: LD_INT 70
6903: PPUSH
6904: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6908: LD_INT 8
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 343
// if kurtStatus > 0 then
6918: LD_EXP 27
6922: PUSH
6923: LD_INT 0
6925: GREATER
6926: IFFALSE 8489
// begin ComExitVehicle ( Kurt ) ;
6928: LD_EXP 24
6932: PPUSH
6933: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6937: LD_EXP 24
6941: PPUSH
6942: CALL_OW 87
// wait ( 0 0$1 ) ;
6946: LD_INT 35
6948: PPUSH
6949: CALL_OW 67
// DialogueOn ;
6953: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6957: LD_INT 22
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 26
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 2
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 25
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 25
7002: PUSH
7003: LD_INT 3
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 25
7012: PUSH
7013: LD_INT 4
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 25
7022: PUSH
7023: LD_INT 5
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 25
7032: PUSH
7033: LD_INT 8
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PPUSH
7059: LD_STRING D3-Sol1-1
7061: PPUSH
7062: LD_STRING 
7064: PPUSH
7065: CALL 13130 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7069: LD_EXP 24
7073: PPUSH
7074: LD_STRING D3-Kurt-1
7076: PPUSH
7077: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7081: LD_EXP 1
7085: PPUSH
7086: LD_STRING D3-JMM-1
7088: PPUSH
7089: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7093: LD_EXP 24
7097: PPUSH
7098: LD_STRING D3-Kurt-2
7100: PPUSH
7101: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7105: LD_EXP 1
7109: PPUSH
7110: LD_STRING D3-JMM-2
7112: PPUSH
7113: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7117: LD_EXP 24
7121: PPUSH
7122: LD_STRING D3-Kurt-4
7124: PPUSH
7125: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7129: LD_EXP 1
7133: PPUSH
7134: LD_STRING D3-JMM-4
7136: PPUSH
7137: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7141: LD_EXP 24
7145: PPUSH
7146: LD_STRING D3-Kurt-5
7148: PPUSH
7149: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7153: LD_EXP 24
7157: PPUSH
7158: LD_STRING D3-Kurt-5a
7160: PPUSH
7161: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7165: LD_VAR 0 6
7169: PUSH
7170: LD_INT 60
7172: GREATEREQUAL
7173: PUSH
7174: LD_VAR 0 8
7178: PUSH
7179: LD_INT 60
7181: GREATEREQUAL
7182: AND
7183: IFFALSE 7218
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7185: LD_ADDR_VAR 0 2
7189: PUSH
7190: LD_STRING Q2K
7192: PPUSH
7193: LD_INT 1
7195: PUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 4
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: PPUSH
7211: CALL_OW 98
7215: ST_TO_ADDR
7216: GO 7241
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7218: LD_ADDR_VAR 0 2
7222: PUSH
7223: LD_STRING Q2K
7225: PPUSH
7226: LD_INT 3
7228: PUSH
7229: LD_INT 4
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 98
7240: ST_TO_ADDR
// if dec1 = 1 then
7241: LD_VAR 0 2
7245: PUSH
7246: LD_INT 1
7248: EQUAL
7249: IFFALSE 7283
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7251: LD_EXP 1
7255: PPUSH
7256: LD_STRING D3Ka-JMM-1
7258: PPUSH
7259: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7263: LD_EXP 24
7267: PPUSH
7268: LD_STRING D3Ka-Kurt-1
7270: PPUSH
7271: CALL_OW 88
// warWithLegion = 1 ;
7275: LD_ADDR_EXP 31
7279: PUSH
7280: LD_INT 1
7282: ST_TO_ADDR
// end ; if dec1 = 2 then
7283: LD_VAR 0 2
7287: PUSH
7288: LD_INT 2
7290: EQUAL
7291: IFFALSE 7517
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7293: LD_EXP 1
7297: PPUSH
7298: LD_STRING D3Kb-JMM-1
7300: PPUSH
7301: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7305: LD_EXP 24
7309: PPUSH
7310: LD_STRING D3Kb-Kurt-1
7312: PPUSH
7313: CALL_OW 88
// for i in tmp do
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: LD_VAR 0 4
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7415
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7330: LD_ADDR_VAR 0 5
7334: PUSH
7335: LD_VAR 0 1
7339: PPUSH
7340: CALL_OW 274
7344: PPUSH
7345: LD_INT 1
7347: PPUSH
7348: CALL_OW 275
7352: ST_TO_ADDR
// if tmp2 >= 60 then
7353: LD_VAR 0 5
7357: PUSH
7358: LD_INT 60
7360: GREATEREQUAL
7361: IFFALSE 7393
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7363: LD_VAR 0 1
7367: PPUSH
7368: CALL_OW 274
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_VAR 0 5
7380: PUSH
7381: LD_INT 60
7383: MINUS
7384: PPUSH
7385: CALL_OW 277
// break ;
7389: GO 7415
// end else
7391: GO 7413
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 274
7402: PPUSH
7403: LD_INT 1
7405: PPUSH
7406: LD_INT 0
7408: PPUSH
7409: CALL_OW 277
// end ; end ;
7413: GO 7327
7415: POP
7416: POP
// for i in tmp do
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: LD_VAR 0 4
7426: PUSH
7427: FOR_IN
7428: IFFALSE 7515
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7430: LD_ADDR_VAR 0 5
7434: PUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 274
7444: PPUSH
7445: LD_INT 3
7447: PPUSH
7448: CALL_OW 275
7452: ST_TO_ADDR
// if tmp2 >= 60 then
7453: LD_VAR 0 5
7457: PUSH
7458: LD_INT 60
7460: GREATEREQUAL
7461: IFFALSE 7493
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7463: LD_VAR 0 1
7467: PPUSH
7468: CALL_OW 274
7472: PPUSH
7473: LD_INT 3
7475: PPUSH
7476: LD_VAR 0 5
7480: PUSH
7481: LD_INT 60
7483: MINUS
7484: PPUSH
7485: CALL_OW 277
// break ;
7489: GO 7515
// end else
7491: GO 7513
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7493: LD_VAR 0 1
7497: PPUSH
7498: CALL_OW 274
7502: PPUSH
7503: LD_INT 3
7505: PPUSH
7506: LD_INT 0
7508: PPUSH
7509: CALL_OW 277
// end ; end ;
7513: GO 7427
7515: POP
7516: POP
// end ; if dec1 = 3 then
7517: LD_VAR 0 2
7521: PUSH
7522: LD_INT 3
7524: EQUAL
7525: IFFALSE 7760
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7527: LD_EXP 1
7531: PPUSH
7532: LD_STRING D3Kc1-JMM-1
7534: PPUSH
7535: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7539: LD_EXP 24
7543: PPUSH
7544: LD_STRING D3Kc1-Kurt-1
7546: PPUSH
7547: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7551: LD_EXP 1
7555: PPUSH
7556: LD_STRING D3Kc1-JMM-2
7558: PPUSH
7559: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7563: LD_EXP 24
7567: PPUSH
7568: LD_STRING D3Kc1-Kurt-2
7570: PPUSH
7571: CALL_OW 88
// askSiberite = 1 ;
7575: LD_ADDR_EXP 33
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7583: LD_ADDR_VAR 0 2
7587: PUSH
7588: LD_STRING Q2b
7590: PPUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 3
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
// if dec2 = 1 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 7652
// begin Say ( JMM , D4a-JMM-1 ) ;
7620: LD_EXP 1
7624: PPUSH
7625: LD_STRING D4a-JMM-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7632: LD_EXP 24
7636: PPUSH
7637: LD_STRING D4b-Kurt-1
7639: PPUSH
7640: CALL_OW 88
// warWithLegion = 1 ;
7644: LD_ADDR_EXP 31
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// end ; if dec2 = 2 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 2
7659: EQUAL
7660: IFFALSE 7694
// begin Say ( JMM , D4b-JMM-1 ) ;
7662: LD_EXP 1
7666: PPUSH
7667: LD_STRING D4b-JMM-1
7669: PPUSH
7670: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7674: LD_EXP 24
7678: PPUSH
7679: LD_STRING D4b-Kurt-1
7681: PPUSH
7682: CALL_OW 88
// warWithLegion = 1 ;
7686: LD_ADDR_EXP 31
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// end ; if dec2 = 3 then
7694: LD_VAR 0 3
7698: PUSH
7699: LD_INT 3
7701: EQUAL
7702: IFFALSE 7760
// begin Say ( JMM , D4c-JMM-1 ) ;
7704: LD_EXP 1
7708: PPUSH
7709: LD_STRING D4c-JMM-1
7711: PPUSH
7712: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7716: LD_EXP 24
7720: PPUSH
7721: LD_STRING D4c-Kurt-1
7723: PPUSH
7724: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7728: LD_EXP 1
7732: PPUSH
7733: LD_STRING D4c-JMM-2
7735: PPUSH
7736: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7740: LD_EXP 24
7744: PPUSH
7745: LD_STRING D4c-Kurt-2
7747: PPUSH
7748: CALL_OW 88
// fakeInfo = 1 ;
7752: LD_ADDR_EXP 32
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7760: LD_VAR 0 2
7764: PUSH
7765: LD_INT 4
7767: EQUAL
7768: IFFALSE 8425
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D3Kd-JMM-1
7777: PPUSH
7778: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7782: LD_VAR 0 6
7786: PUSH
7787: LD_INT 120
7789: GREATEREQUAL
7790: PUSH
7791: LD_VAR 0 8
7795: PUSH
7796: LD_INT 120
7798: GREATEREQUAL
7799: AND
7800: IFFALSE 7835
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_STRING Q2aK
7809: PPUSH
7810: LD_INT 1
7812: PUSH
7813: LD_INT 2
7815: PUSH
7816: LD_INT 3
7818: PUSH
7819: LD_INT 4
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 98
7832: ST_TO_ADDR
7833: GO 7858
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7835: LD_ADDR_VAR 0 3
7839: PUSH
7840: LD_STRING Q2K
7842: PPUSH
7843: LD_INT 1
7845: PUSH
7846: LD_INT 4
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PPUSH
7853: CALL_OW 98
7857: ST_TO_ADDR
// if dec2 = 1 then
7858: LD_VAR 0 3
7862: PUSH
7863: LD_INT 1
7865: EQUAL
7866: IFFALSE 7900
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7868: LD_EXP 1
7872: PPUSH
7873: LD_STRING D5Ka-JMM-1
7875: PPUSH
7876: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7880: LD_EXP 24
7884: PPUSH
7885: LD_STRING D5Ka-Kurt-1
7887: PPUSH
7888: CALL_OW 88
// warWithLegion = 1 ;
7892: LD_ADDR_EXP 31
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// end ; if dec2 = 2 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 2
7907: EQUAL
7908: IFFALSE 7934
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7910: LD_EXP 1
7914: PPUSH
7915: LD_STRING D3Kb-JMM-1
7917: PPUSH
7918: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7922: LD_EXP 24
7926: PPUSH
7927: LD_STRING D3Kb-Kurt-1
7929: PPUSH
7930: CALL_OW 88
// end ; if dec2 = 3 then
7934: LD_VAR 0 3
7938: PUSH
7939: LD_INT 3
7941: EQUAL
7942: IFFALSE 8172
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7944: LD_EXP 1
7948: PPUSH
7949: LD_STRING D3Ke-JMM-1
7951: PPUSH
7952: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7956: LD_EXP 24
7960: PPUSH
7961: LD_STRING D3Ke-Kurt-1
7963: PPUSH
7964: CALL_OW 88
// PrepareLegionForPlayer ;
7968: CALL 4322 0 0
// for i in tmp do
7972: LD_ADDR_VAR 0 1
7976: PUSH
7977: LD_VAR 0 4
7981: PUSH
7982: FOR_IN
7983: IFFALSE 8070
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7985: LD_ADDR_VAR 0 5
7989: PUSH
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 274
7999: PPUSH
8000: LD_INT 1
8002: PPUSH
8003: CALL_OW 275
8007: ST_TO_ADDR
// if tmp2 >= 120 then
8008: LD_VAR 0 5
8012: PUSH
8013: LD_INT 120
8015: GREATEREQUAL
8016: IFFALSE 8048
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 274
8027: PPUSH
8028: LD_INT 1
8030: PPUSH
8031: LD_VAR 0 5
8035: PUSH
8036: LD_INT 120
8038: MINUS
8039: PPUSH
8040: CALL_OW 277
// break ;
8044: GO 8070
// end else
8046: GO 8068
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 274
8057: PPUSH
8058: LD_INT 1
8060: PPUSH
8061: LD_INT 0
8063: PPUSH
8064: CALL_OW 277
// end ; end ;
8068: GO 7982
8070: POP
8071: POP
// for i in tmp do
8072: LD_ADDR_VAR 0 1
8076: PUSH
8077: LD_VAR 0 4
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8170
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8085: LD_ADDR_VAR 0 5
8089: PUSH
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 274
8099: PPUSH
8100: LD_INT 3
8102: PPUSH
8103: CALL_OW 275
8107: ST_TO_ADDR
// if tmp2 >= 120 then
8108: LD_VAR 0 5
8112: PUSH
8113: LD_INT 120
8115: GREATEREQUAL
8116: IFFALSE 8148
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8118: LD_VAR 0 1
8122: PPUSH
8123: CALL_OW 274
8127: PPUSH
8128: LD_INT 3
8130: PPUSH
8131: LD_VAR 0 5
8135: PUSH
8136: LD_INT 120
8138: MINUS
8139: PPUSH
8140: CALL_OW 277
// break ;
8144: GO 8170
// end else
8146: GO 8168
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8148: LD_VAR 0 1
8152: PPUSH
8153: CALL_OW 274
8157: PPUSH
8158: LD_INT 3
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: CALL_OW 277
// end ; end ;
8168: GO 8082
8170: POP
8171: POP
// end ; if dec2 = 4 then
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 4
8179: EQUAL
8180: IFFALSE 8425
// begin if dec1 = 3 then
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8425
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8192: LD_EXP 1
8196: PPUSH
8197: LD_STRING D3Kc1-JMM-1
8199: PPUSH
8200: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8204: LD_EXP 24
8208: PPUSH
8209: LD_STRING D3Kc1-Kurt-1
8211: PPUSH
8212: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D3Kc1-JMM-2
8223: PPUSH
8224: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8228: LD_EXP 24
8232: PPUSH
8233: LD_STRING D3Kc1-Kurt-2
8235: PPUSH
8236: CALL_OW 88
// askSiberite = 1 ;
8240: LD_ADDR_EXP 33
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8248: LD_ADDR_VAR 0 2
8252: PUSH
8253: LD_STRING Q2b
8255: PPUSH
8256: LD_INT 1
8258: PUSH
8259: LD_INT 2
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 98
8274: ST_TO_ADDR
// if dec2 = 1 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 1
8282: EQUAL
8283: IFFALSE 8317
// begin Say ( JMM , D4a-JMM-1 ) ;
8285: LD_EXP 1
8289: PPUSH
8290: LD_STRING D4a-JMM-1
8292: PPUSH
8293: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8297: LD_EXP 24
8301: PPUSH
8302: LD_STRING D4b-Kurt-1
8304: PPUSH
8305: CALL_OW 88
// warWithLegion = 1 ;
8309: LD_ADDR_EXP 31
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// end ; if dec2 = 2 then
8317: LD_VAR 0 3
8321: PUSH
8322: LD_INT 2
8324: EQUAL
8325: IFFALSE 8359
// begin Say ( JMM , D4b-JMM-1 ) ;
8327: LD_EXP 1
8331: PPUSH
8332: LD_STRING D4b-JMM-1
8334: PPUSH
8335: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8339: LD_EXP 24
8343: PPUSH
8344: LD_STRING D4b-Kurt-1
8346: PPUSH
8347: CALL_OW 88
// warWithLegion = 1 ;
8351: LD_ADDR_EXP 31
8355: PUSH
8356: LD_INT 1
8358: ST_TO_ADDR
// end ; if dec2 = 3 then
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 3
8366: EQUAL
8367: IFFALSE 8425
// begin Say ( JMM , D4c-JMM-1 ) ;
8369: LD_EXP 1
8373: PPUSH
8374: LD_STRING D4c-JMM-1
8376: PPUSH
8377: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_STRING D4c-Kurt-1
8388: PPUSH
8389: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8393: LD_EXP 1
8397: PPUSH
8398: LD_STRING D4c-JMM-2
8400: PPUSH
8401: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8405: LD_EXP 24
8409: PPUSH
8410: LD_STRING D4c-Kurt-2
8412: PPUSH
8413: CALL_OW 88
// fakeInfo = 1 ;
8417: LD_ADDR_EXP 32
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8425: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8429: LD_EXP 24
8433: PPUSH
8434: LD_EXP 26
8438: PPUSH
8439: CALL_OW 120
// wait ( 0 0$1 ) ;
8443: LD_INT 35
8445: PPUSH
8446: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8450: LD_EXP 26
8454: PPUSH
8455: LD_INT 4
8457: PPUSH
8458: CALL_OW 113
// wait ( 0 0$3 ) ;
8462: LD_INT 105
8464: PPUSH
8465: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8469: LD_EXP 24
8473: PPUSH
8474: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8478: LD_EXP 26
8482: PPUSH
8483: CALL_OW 64
// end else
8487: GO 10034
// begin ComExitVehicle ( otherKurt ) ;
8489: LD_EXP 25
8493: PPUSH
8494: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8498: LD_EXP 25
8502: PPUSH
8503: CALL_OW 87
// wait ( 0 0$1 ) ;
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 67
// DialogueOn ;
8514: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8518: LD_INT 22
8520: PUSH
8521: LD_INT 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 26
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 25
8543: PUSH
8544: LD_INT 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 25
8553: PUSH
8554: LD_INT 2
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 25
8563: PUSH
8564: LD_INT 3
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 25
8573: PUSH
8574: LD_INT 4
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: LD_INT 25
8583: PUSH
8584: LD_INT 5
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 25
8593: PUSH
8594: LD_INT 8
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: PPUSH
8620: LD_STRING D3-Sol1-1
8622: PPUSH
8623: LD_STRING 
8625: PPUSH
8626: CALL 13130 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8630: LD_EXP 25
8634: PPUSH
8635: LD_STRING D3-Kurt-1
8637: PPUSH
8638: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8642: LD_EXP 1
8646: PPUSH
8647: LD_STRING D3-JMM-1
8649: PPUSH
8650: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8654: LD_EXP 25
8658: PPUSH
8659: LD_STRING D3-Kurt-3
8661: PPUSH
8662: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8666: LD_EXP 1
8670: PPUSH
8671: LD_STRING D3-JMM-3
8673: PPUSH
8674: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8678: LD_EXP 25
8682: PPUSH
8683: LD_STRING D3-Kurt-5
8685: PPUSH
8686: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8690: LD_EXP 25
8694: PPUSH
8695: LD_STRING D3-Kurt-5b
8697: PPUSH
8698: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8702: LD_VAR 0 6
8706: PUSH
8707: LD_INT 100
8709: GREATEREQUAL
8710: PUSH
8711: LD_VAR 0 8
8715: PUSH
8716: LD_INT 100
8718: GREATEREQUAL
8719: AND
8720: IFFALSE 8755
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8722: LD_ADDR_VAR 0 2
8726: PUSH
8727: LD_STRING Q2
8729: PPUSH
8730: LD_INT 1
8732: PUSH
8733: LD_INT 2
8735: PUSH
8736: LD_INT 3
8738: PUSH
8739: LD_INT 4
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 98
8752: ST_TO_ADDR
8753: GO 8778
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8755: LD_ADDR_VAR 0 2
8759: PUSH
8760: LD_STRING Q2
8762: PPUSH
8763: LD_INT 3
8765: PUSH
8766: LD_INT 4
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PPUSH
8773: CALL_OW 98
8777: ST_TO_ADDR
// if dec1 = 1 then
8778: LD_VAR 0 2
8782: PUSH
8783: LD_INT 1
8785: EQUAL
8786: IFFALSE 8820
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8788: LD_EXP 1
8792: PPUSH
8793: LD_STRING D3Ka-JMM-1
8795: PPUSH
8796: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8800: LD_EXP 25
8804: PPUSH
8805: LD_STRING D3Ka-Kurt-1
8807: PPUSH
8808: CALL_OW 88
// warWithLegion = 1 ;
8812: LD_ADDR_EXP 31
8816: PUSH
8817: LD_INT 1
8819: ST_TO_ADDR
// end ; if dec1 = 2 then
8820: LD_VAR 0 2
8824: PUSH
8825: LD_INT 2
8827: EQUAL
8828: IFFALSE 9054
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8830: LD_EXP 1
8834: PPUSH
8835: LD_STRING D3Kb-JMM-1
8837: PPUSH
8838: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8842: LD_EXP 25
8846: PPUSH
8847: LD_STRING D3Kb-Kurt-1
8849: PPUSH
8850: CALL_OW 88
// for i in tmp do
8854: LD_ADDR_VAR 0 1
8858: PUSH
8859: LD_VAR 0 4
8863: PUSH
8864: FOR_IN
8865: IFFALSE 8952
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8867: LD_ADDR_VAR 0 5
8871: PUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 274
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 275
8889: ST_TO_ADDR
// if tmp2 >= 100 then
8890: LD_VAR 0 5
8894: PUSH
8895: LD_INT 100
8897: GREATEREQUAL
8898: IFFALSE 8930
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 274
8909: PPUSH
8910: LD_INT 1
8912: PPUSH
8913: LD_VAR 0 5
8917: PUSH
8918: LD_INT 100
8920: MINUS
8921: PPUSH
8922: CALL_OW 277
// break ;
8926: GO 8952
// end else
8928: GO 8950
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8930: LD_VAR 0 1
8934: PPUSH
8935: CALL_OW 274
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_INT 0
8945: PPUSH
8946: CALL_OW 277
// end ; end ;
8950: GO 8864
8952: POP
8953: POP
// for i in tmp do
8954: LD_ADDR_VAR 0 1
8958: PUSH
8959: LD_VAR 0 4
8963: PUSH
8964: FOR_IN
8965: IFFALSE 9052
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8967: LD_ADDR_VAR 0 5
8971: PUSH
8972: LD_VAR 0 1
8976: PPUSH
8977: CALL_OW 274
8981: PPUSH
8982: LD_INT 3
8984: PPUSH
8985: CALL_OW 275
8989: ST_TO_ADDR
// if tmp2 >= 100 then
8990: LD_VAR 0 5
8994: PUSH
8995: LD_INT 100
8997: GREATEREQUAL
8998: IFFALSE 9030
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 274
9009: PPUSH
9010: LD_INT 3
9012: PPUSH
9013: LD_VAR 0 5
9017: PUSH
9018: LD_INT 100
9020: MINUS
9021: PPUSH
9022: CALL_OW 277
// break ;
9026: GO 9052
// end else
9028: GO 9050
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 274
9039: PPUSH
9040: LD_INT 3
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 277
// end ; end ;
9050: GO 8964
9052: POP
9053: POP
// end ; if dec1 = 3 then
9054: LD_VAR 0 2
9058: PUSH
9059: LD_INT 3
9061: EQUAL
9062: IFFALSE 9297
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9064: LD_EXP 1
9068: PPUSH
9069: LD_STRING D3Kc1-JMM-1
9071: PPUSH
9072: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9076: LD_EXP 25
9080: PPUSH
9081: LD_STRING D3Kc1-Kurt-1
9083: PPUSH
9084: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9088: LD_EXP 1
9092: PPUSH
9093: LD_STRING D3Kc1-JMM-2
9095: PPUSH
9096: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9100: LD_EXP 25
9104: PPUSH
9105: LD_STRING D3Kc1-Kurt-2
9107: PPUSH
9108: CALL_OW 88
// askSiberite = 1 ;
9112: LD_ADDR_EXP 33
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9120: LD_ADDR_VAR 0 2
9124: PUSH
9125: LD_STRING Q2b
9127: PPUSH
9128: LD_INT 1
9130: PUSH
9131: LD_INT 2
9133: PUSH
9134: LD_INT 3
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 98
9146: ST_TO_ADDR
// if dec2 = 1 then
9147: LD_VAR 0 3
9151: PUSH
9152: LD_INT 1
9154: EQUAL
9155: IFFALSE 9189
// begin Say ( JMM , D4a-JMM-1 ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_STRING D4a-JMM-1
9164: PPUSH
9165: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9169: LD_EXP 25
9173: PPUSH
9174: LD_STRING D4b-Kurt-1
9176: PPUSH
9177: CALL_OW 88
// warWithLegion = 1 ;
9181: LD_ADDR_EXP 31
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// end ; if dec2 = 2 then
9189: LD_VAR 0 3
9193: PUSH
9194: LD_INT 2
9196: EQUAL
9197: IFFALSE 9231
// begin Say ( JMM , D4b-JMM-1 ) ;
9199: LD_EXP 1
9203: PPUSH
9204: LD_STRING D4b-JMM-1
9206: PPUSH
9207: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9211: LD_EXP 25
9215: PPUSH
9216: LD_STRING D4b-Kurt-1
9218: PPUSH
9219: CALL_OW 88
// warWithLegion = 1 ;
9223: LD_ADDR_EXP 31
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// end ; if dec2 = 3 then
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 3
9238: EQUAL
9239: IFFALSE 9297
// begin Say ( JMM , D4c-JMM-1 ) ;
9241: LD_EXP 1
9245: PPUSH
9246: LD_STRING D4c-JMM-1
9248: PPUSH
9249: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9253: LD_EXP 25
9257: PPUSH
9258: LD_STRING D4c-Kurt-1
9260: PPUSH
9261: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9265: LD_EXP 1
9269: PPUSH
9270: LD_STRING D4c-JMM-2
9272: PPUSH
9273: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9277: LD_EXP 25
9281: PPUSH
9282: LD_STRING D4c-Kurt-2
9284: PPUSH
9285: CALL_OW 88
// fakeInfo = 1 ;
9289: LD_ADDR_EXP 32
9293: PUSH
9294: LD_INT 1
9296: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9297: LD_VAR 0 2
9301: PUSH
9302: LD_INT 4
9304: EQUAL
9305: IFFALSE 9962
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9307: LD_EXP 1
9311: PPUSH
9312: LD_STRING D3Kd-JMM-1
9314: PPUSH
9315: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9319: LD_VAR 0 6
9323: PUSH
9324: LD_INT 200
9326: GREATEREQUAL
9327: PUSH
9328: LD_VAR 0 8
9332: PUSH
9333: LD_INT 200
9335: GREATEREQUAL
9336: AND
9337: IFFALSE 9372
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: LD_STRING Q2a
9346: PPUSH
9347: LD_INT 1
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: LD_INT 3
9355: PUSH
9356: LD_INT 4
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PPUSH
9365: CALL_OW 98
9369: ST_TO_ADDR
9370: GO 9395
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9372: LD_ADDR_VAR 0 3
9376: PUSH
9377: LD_STRING Q2a
9379: PPUSH
9380: LD_INT 1
9382: PUSH
9383: LD_INT 4
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 98
9394: ST_TO_ADDR
// if dec2 = 1 then
9395: LD_VAR 0 3
9399: PUSH
9400: LD_INT 1
9402: EQUAL
9403: IFFALSE 9437
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9405: LD_EXP 1
9409: PPUSH
9410: LD_STRING D5Ka-JMM-1
9412: PPUSH
9413: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9417: LD_EXP 25
9421: PPUSH
9422: LD_STRING D5Ka-Kurt-1
9424: PPUSH
9425: CALL_OW 88
// warWithLegion = 1 ;
9429: LD_ADDR_EXP 31
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// end ; if dec2 = 2 then
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 2
9444: EQUAL
9445: IFFALSE 9471
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9447: LD_EXP 1
9451: PPUSH
9452: LD_STRING D3Kb-JMM-1
9454: PPUSH
9455: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9459: LD_EXP 25
9463: PPUSH
9464: LD_STRING D3Kb-Kurt-1
9466: PPUSH
9467: CALL_OW 88
// end ; if dec2 = 3 then
9471: LD_VAR 0 3
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9709
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9481: LD_EXP 1
9485: PPUSH
9486: LD_STRING D3Ke-JMM-1
9488: PPUSH
9489: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9493: LD_EXP 25
9497: PPUSH
9498: LD_STRING D3Ke-Kurt-1
9500: PPUSH
9501: CALL_OW 88
// PrepareLegionForPlayer ;
9505: CALL 4322 0 0
// for i in tmp do
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_VAR 0 4
9518: PUSH
9519: FOR_IN
9520: IFFALSE 9607
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9522: LD_ADDR_VAR 0 5
9526: PUSH
9527: LD_VAR 0 1
9531: PPUSH
9532: CALL_OW 274
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 275
9544: ST_TO_ADDR
// if tmp2 >= 200 then
9545: LD_VAR 0 5
9549: PUSH
9550: LD_INT 200
9552: GREATEREQUAL
9553: IFFALSE 9585
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9555: LD_VAR 0 1
9559: PPUSH
9560: CALL_OW 274
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: LD_VAR 0 5
9572: PUSH
9573: LD_INT 200
9575: MINUS
9576: PPUSH
9577: CALL_OW 277
// break ;
9581: GO 9607
// end else
9583: GO 9605
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9585: LD_VAR 0 1
9589: PPUSH
9590: CALL_OW 274
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: LD_INT 0
9600: PPUSH
9601: CALL_OW 277
// end ; end ;
9605: GO 9519
9607: POP
9608: POP
// for i in tmp do
9609: LD_ADDR_VAR 0 1
9613: PUSH
9614: LD_VAR 0 4
9618: PUSH
9619: FOR_IN
9620: IFFALSE 9707
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9622: LD_ADDR_VAR 0 5
9626: PUSH
9627: LD_VAR 0 1
9631: PPUSH
9632: CALL_OW 274
9636: PPUSH
9637: LD_INT 3
9639: PPUSH
9640: CALL_OW 275
9644: ST_TO_ADDR
// if tmp2 >= 200 then
9645: LD_VAR 0 5
9649: PUSH
9650: LD_INT 200
9652: GREATEREQUAL
9653: IFFALSE 9685
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9655: LD_VAR 0 1
9659: PPUSH
9660: CALL_OW 274
9664: PPUSH
9665: LD_INT 3
9667: PPUSH
9668: LD_VAR 0 5
9672: PUSH
9673: LD_INT 200
9675: MINUS
9676: PPUSH
9677: CALL_OW 277
// break ;
9681: GO 9707
// end else
9683: GO 9705
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9685: LD_VAR 0 1
9689: PPUSH
9690: CALL_OW 274
9694: PPUSH
9695: LD_INT 3
9697: PPUSH
9698: LD_INT 0
9700: PPUSH
9701: CALL_OW 277
// end ; end ;
9705: GO 9619
9707: POP
9708: POP
// end ; if dec2 = 4 then
9709: LD_VAR 0 3
9713: PUSH
9714: LD_INT 4
9716: EQUAL
9717: IFFALSE 9962
// begin if dec1 = 3 then
9719: LD_VAR 0 2
9723: PUSH
9724: LD_INT 3
9726: EQUAL
9727: IFFALSE 9962
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9729: LD_EXP 1
9733: PPUSH
9734: LD_STRING D3Kc1-JMM-1
9736: PPUSH
9737: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9741: LD_EXP 25
9745: PPUSH
9746: LD_STRING D3Kc1-Kurt-1
9748: PPUSH
9749: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9753: LD_EXP 1
9757: PPUSH
9758: LD_STRING D3Kc1-JMM-2
9760: PPUSH
9761: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9765: LD_EXP 25
9769: PPUSH
9770: LD_STRING D3Kc1-Kurt-2
9772: PPUSH
9773: CALL_OW 88
// askSiberite = 1 ;
9777: LD_ADDR_EXP 33
9781: PUSH
9782: LD_INT 1
9784: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9785: LD_ADDR_VAR 0 2
9789: PUSH
9790: LD_STRING Q2b
9792: PPUSH
9793: LD_INT 1
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 98
9811: ST_TO_ADDR
// if dec2 = 1 then
9812: LD_VAR 0 3
9816: PUSH
9817: LD_INT 1
9819: EQUAL
9820: IFFALSE 9854
// begin Say ( JMM , D4a-JMM-1 ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_STRING D4a-JMM-1
9829: PPUSH
9830: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9834: LD_EXP 25
9838: PPUSH
9839: LD_STRING D4b-Kurt-1
9841: PPUSH
9842: CALL_OW 88
// warWithLegion = 1 ;
9846: LD_ADDR_EXP 31
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// end ; if dec2 = 2 then
9854: LD_VAR 0 3
9858: PUSH
9859: LD_INT 2
9861: EQUAL
9862: IFFALSE 9896
// begin Say ( JMM , D4b-JMM-1 ) ;
9864: LD_EXP 1
9868: PPUSH
9869: LD_STRING D4b-JMM-1
9871: PPUSH
9872: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9876: LD_EXP 25
9880: PPUSH
9881: LD_STRING D4b-Kurt-1
9883: PPUSH
9884: CALL_OW 88
// warWithLegion = 1 ;
9888: LD_ADDR_EXP 31
9892: PUSH
9893: LD_INT 1
9895: ST_TO_ADDR
// end ; if dec2 = 3 then
9896: LD_VAR 0 3
9900: PUSH
9901: LD_INT 3
9903: EQUAL
9904: IFFALSE 9962
// begin Say ( JMM , D4c-JMM-1 ) ;
9906: LD_EXP 1
9910: PPUSH
9911: LD_STRING D4c-JMM-1
9913: PPUSH
9914: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9918: LD_EXP 25
9922: PPUSH
9923: LD_STRING D4c-Kurt-1
9925: PPUSH
9926: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9930: LD_EXP 1
9934: PPUSH
9935: LD_STRING D4c-JMM-2
9937: PPUSH
9938: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9942: LD_EXP 25
9946: PPUSH
9947: LD_STRING D4c-Kurt-2
9949: PPUSH
9950: CALL_OW 88
// fakeInfo = 1 ;
9954: LD_ADDR_EXP 32
9958: PUSH
9959: LD_INT 1
9961: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9962: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9966: LD_INT 8
9968: PPUSH
9969: LD_INT 8
9971: PPUSH
9972: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9976: LD_EXP 25
9980: PPUSH
9981: LD_EXP 26
9985: PPUSH
9986: CALL_OW 120
// wait ( 0 0$1 ) ;
9990: LD_INT 35
9992: PPUSH
9993: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9997: LD_EXP 26
10001: PPUSH
10002: LD_INT 4
10004: PPUSH
10005: CALL_OW 113
// wait ( 0 0$6 ) ;
10009: LD_INT 210
10011: PPUSH
10012: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10016: LD_EXP 25
10020: PPUSH
10021: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10025: LD_EXP 26
10029: PPUSH
10030: CALL_OW 64
// end ; end ;
10034: PPOPN 8
10036: END
// every 0 0$10 trigger warWithLegion = 1 do
10037: LD_EXP 31
10041: PUSH
10042: LD_INT 1
10044: EQUAL
10045: IFFALSE 10054
10047: GO 10049
10049: DISABLE
// PrepareAttackLegion ;
10050: CALL 5050 0 0
10054: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10055: LD_EXP 15
10059: PPUSH
10060: CALL_OW 305
10064: PUSH
10065: LD_EXP 15
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: CALL_OW 289
10077: NOT
10078: AND
10079: PUSH
10080: LD_EXP 15
10084: PPUSH
10085: LD_INT 2
10087: PPUSH
10088: CALL_OW 289
10092: NOT
10093: AND
10094: PUSH
10095: LD_EXP 15
10099: PPUSH
10100: LD_INT 3
10102: PPUSH
10103: CALL_OW 289
10107: NOT
10108: AND
10109: IFFALSE 10126
10111: GO 10113
10113: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10114: LD_EXP 15
10118: PPUSH
10119: LD_INT 4
10121: PPUSH
10122: CALL_OW 235
10126: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10127: LD_EXP 16
10131: PPUSH
10132: CALL_OW 305
10136: PUSH
10137: LD_EXP 16
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 289
10149: NOT
10150: AND
10151: PUSH
10152: LD_EXP 16
10156: PPUSH
10157: LD_INT 2
10159: PPUSH
10160: CALL_OW 289
10164: NOT
10165: AND
10166: PUSH
10167: LD_EXP 16
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: CALL_OW 289
10179: NOT
10180: AND
10181: IFFALSE 10198
10183: GO 10185
10185: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10186: LD_EXP 16
10190: PPUSH
10191: LD_INT 4
10193: PPUSH
10194: CALL_OW 235
10198: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10199: LD_EXP 17
10203: PPUSH
10204: CALL_OW 305
10208: PUSH
10209: LD_EXP 17
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 289
10221: NOT
10222: AND
10223: PUSH
10224: LD_EXP 17
10228: PPUSH
10229: LD_INT 2
10231: PPUSH
10232: CALL_OW 289
10236: NOT
10237: AND
10238: PUSH
10239: LD_EXP 17
10243: PPUSH
10244: LD_INT 3
10246: PPUSH
10247: CALL_OW 289
10251: NOT
10252: AND
10253: IFFALSE 10270
10255: GO 10257
10257: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10258: LD_EXP 17
10262: PPUSH
10263: LD_INT 4
10265: PPUSH
10266: CALL_OW 235
10270: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10271: LD_EXP 18
10275: PPUSH
10276: CALL_OW 305
10280: PUSH
10281: LD_EXP 18
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 289
10293: NOT
10294: AND
10295: PUSH
10296: LD_EXP 18
10300: PPUSH
10301: LD_INT 2
10303: PPUSH
10304: CALL_OW 289
10308: NOT
10309: AND
10310: PUSH
10311: LD_EXP 18
10315: PPUSH
10316: LD_INT 3
10318: PPUSH
10319: CALL_OW 289
10323: NOT
10324: AND
10325: IFFALSE 10342
10327: GO 10329
10329: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10330: LD_EXP 18
10334: PPUSH
10335: LD_INT 4
10337: PPUSH
10338: CALL_OW 235
10342: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10343: LD_EXP 19
10347: PPUSH
10348: CALL_OW 305
10352: PUSH
10353: LD_EXP 19
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 289
10365: NOT
10366: AND
10367: PUSH
10368: LD_EXP 19
10372: PPUSH
10373: LD_INT 2
10375: PPUSH
10376: CALL_OW 289
10380: NOT
10381: AND
10382: PUSH
10383: LD_EXP 19
10387: PPUSH
10388: LD_INT 3
10390: PPUSH
10391: CALL_OW 289
10395: NOT
10396: AND
10397: PUSH
10398: LD_EXP 19
10402: PPUSH
10403: LD_INT 2
10405: PPUSH
10406: CALL_OW 289
10410: NOT
10411: AND
10412: IFFALSE 10429
10414: GO 10416
10416: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10417: LD_EXP 19
10421: PPUSH
10422: LD_INT 4
10424: PPUSH
10425: CALL_OW 235
10429: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10430: LD_EXP 20
10434: PPUSH
10435: CALL_OW 305
10439: PUSH
10440: LD_EXP 20
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 289
10452: NOT
10453: AND
10454: PUSH
10455: LD_EXP 20
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: CALL_OW 289
10467: NOT
10468: AND
10469: PUSH
10470: LD_EXP 20
10474: PPUSH
10475: LD_INT 3
10477: PPUSH
10478: CALL_OW 289
10482: NOT
10483: AND
10484: IFFALSE 10501
10486: GO 10488
10488: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10489: LD_EXP 20
10493: PPUSH
10494: LD_INT 4
10496: PPUSH
10497: CALL_OW 235
10501: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10502: LD_EXP 21
10506: PPUSH
10507: CALL_OW 305
10511: PUSH
10512: LD_EXP 21
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 289
10524: NOT
10525: AND
10526: PUSH
10527: LD_EXP 21
10531: PPUSH
10532: LD_INT 2
10534: PPUSH
10535: CALL_OW 289
10539: NOT
10540: AND
10541: PUSH
10542: LD_EXP 21
10546: PPUSH
10547: LD_INT 3
10549: PPUSH
10550: CALL_OW 289
10554: NOT
10555: AND
10556: IFFALSE 10573
10558: GO 10560
10560: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10561: LD_EXP 21
10565: PPUSH
10566: LD_INT 4
10568: PPUSH
10569: CALL_OW 235
10573: END
// every 0 0$1 do var i ;
10574: GO 10576
10576: DISABLE
10577: LD_INT 0
10579: PPUSH
// begin enable ;
10580: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10581: LD_ADDR_VAR 0 1
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_INT 4
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PPUSH
10596: CALL_OW 69
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10641
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 4
10611: PPUSH
10612: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_INT 4
10623: PPUSH
10624: CALL_OW 308
10628: IFFALSE 10639
// RemoveUnit ( i ) ;
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 64
// end ;
10639: GO 10601
10641: POP
10642: POP
// end ;
10643: PPOPN 1
10645: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10646: LD_EXP 28
10650: PUSH
10651: LD_INT 1
10653: EQUAL
10654: IFFALSE 11093
10656: GO 10658
10658: DISABLE
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// begin enable ;
10664: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_INT 12
10672: PPUSH
10673: LD_INT 22
10675: PUSH
10676: LD_INT 3
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 21
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 70
10701: ST_TO_ADDR
// for i in enemyVehs do
10702: LD_ADDR_VAR 0 1
10706: PUSH
10707: LD_VAR 0 2
10711: PUSH
10712: FOR_IN
10713: IFFALSE 11091
// begin if See ( 1 , i ) then
10715: LD_INT 1
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 292
10727: IFFALSE 11089
// begin disable ;
10729: DISABLE
// DialogueOn ;
10730: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10743: LD_INT 22
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 26
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 25
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 25
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 25
10788: PUSH
10789: LD_INT 3
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 4
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 8
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: PPUSH
10840: CALL_OW 69
10844: PPUSH
10845: LD_STRING DT1-Sol1-1
10847: PPUSH
10848: LD_STRING DT1-FSol1-1
10850: PPUSH
10851: CALL 13130 0 3
// dec = ShowQuery2 ;
10855: LD_ADDR_VAR 0 3
10859: PUSH
10860: CALL 13740 0 0
10864: ST_TO_ADDR
// if dec = 1 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 1
10872: EQUAL
10873: IFFALSE 10979
// begin Say ( JMM , D2-JMM-1 ) ;
10875: LD_EXP 1
10879: PPUSH
10880: LD_STRING D2-JMM-1
10882: PPUSH
10883: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10887: LD_EXP 22
10891: PPUSH
10892: LD_STRING D2-Pow-1
10894: PPUSH
10895: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10899: LD_EXP 1
10903: PPUSH
10904: LD_STRING D2a-JMM-1
10906: PPUSH
10907: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10911: LD_EXP 22
10915: PPUSH
10916: LD_STRING D2a-Pow-1
10918: PPUSH
10919: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10923: LD_EXP 1
10927: PPUSH
10928: LD_STRING D2a-JMM-2
10930: PPUSH
10931: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10935: LD_EXP 22
10939: PPUSH
10940: LD_STRING D2a-Pow-2
10942: PPUSH
10943: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10947: LD_EXP 1
10951: PPUSH
10952: LD_STRING D2a-JMM-3
10954: PPUSH
10955: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10959: LD_EXP 22
10963: PPUSH
10964: LD_STRING D2a-Pow-3
10966: PPUSH
10967: CALL_OW 94
// secondPass = 2 ;
10971: LD_ADDR_EXP 28
10975: PUSH
10976: LD_INT 2
10978: ST_TO_ADDR
// end ; if dec = 2 then
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 2
10986: EQUAL
10987: IFFALSE 11081
// begin Say ( JMM , D2-JMM-1 ) ;
10989: LD_EXP 1
10993: PPUSH
10994: LD_STRING D2-JMM-1
10996: PPUSH
10997: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11001: LD_EXP 22
11005: PPUSH
11006: LD_STRING D2-Pow-1
11008: PPUSH
11009: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11013: LD_EXP 1
11017: PPUSH
11018: LD_STRING D2b-JMM-1
11020: PPUSH
11021: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11025: LD_EXP 22
11029: PPUSH
11030: LD_STRING D2b-Pow-1
11032: PPUSH
11033: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11037: LD_EXP 1
11041: PPUSH
11042: LD_STRING D2c-JMM-1
11044: PPUSH
11045: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11049: LD_EXP 22
11053: PPUSH
11054: LD_STRING D2c-Pow-1
11056: PPUSH
11057: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11061: LD_EXP 1
11065: PPUSH
11066: LD_STRING D2c-JMM-2
11068: PPUSH
11069: CALL_OW 88
// secondPass = 2 ;
11073: LD_ADDR_EXP 28
11077: PUSH
11078: LD_INT 2
11080: ST_TO_ADDR
// end ; DialogueOff ;
11081: CALL_OW 7
// exit ;
11085: POP
11086: POP
11087: GO 11093
// end ; end ;
11089: GO 10712
11091: POP
11092: POP
// end ;
11093: PPOPN 3
11095: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11096: LD_EXP 29
11100: PUSH
11101: LD_INT 1
11103: EQUAL
11104: IFFALSE 11337
11106: GO 11108
11108: DISABLE
11109: LD_INT 0
11111: PPUSH
11112: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_INT 11
11120: PPUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 24
11133: PUSH
11134: LD_INT 250
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 70
11149: ST_TO_ADDR
// enable ;
11150: ENABLE
// for i in vehicles do
11151: LD_ADDR_VAR 0 1
11155: PUSH
11156: LD_VAR 0 2
11160: PUSH
11161: FOR_IN
11162: IFFALSE 11335
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11164: LD_INT 1
11166: PPUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL_OW 292
11176: PUSH
11177: LD_EXP 29
11181: PUSH
11182: LD_INT 1
11184: EQUAL
11185: AND
11186: PUSH
11187: LD_EXP 30
11191: PUSH
11192: LD_INT 4
11194: LESSEQUAL
11195: AND
11196: IFFALSE 11333
// begin disable ;
11198: DISABLE
// DialogueOn ;
11199: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11203: LD_INT 22
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 26
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 4
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 25
11268: PUSH
11269: LD_INT 5
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 25
11278: PUSH
11279: LD_INT 8
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: PPUSH
11300: CALL_OW 69
11304: PPUSH
11305: LD_STRING DT1-Sol1-1
11307: PPUSH
11308: LD_STRING DT1-FSol1-1
11310: PPUSH
11311: CALL 13130 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11315: LD_EXP 1
11319: PPUSH
11320: LD_STRING DT1-JMM-1
11322: PPUSH
11323: CALL_OW 88
// DialogueOff ;
11327: CALL_OW 7
// break ;
11331: GO 11335
// end ; end ;
11333: GO 11161
11335: POP
11336: POP
// end ;
11337: PPOPN 2
11339: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11340: LD_EXP 29
11344: PUSH
11345: LD_INT 1
11347: EQUAL
11348: PUSH
11349: LD_INT 11
11351: PPUSH
11352: LD_INT 22
11354: PUSH
11355: LD_INT 3
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 24
11364: PUSH
11365: LD_INT 251
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 21
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 21
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PPUSH
11405: CALL_OW 70
11409: PUSH
11410: LD_INT 0
11412: EQUAL
11413: AND
11414: PUSH
11415: LD_EXP 30
11419: PUSH
11420: LD_INT 3
11422: PUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 4
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: LD_OWVAR 67
11438: ARRAY
11439: LESSEQUAL
11440: AND
11441: PUSH
11442: LD_EXP 30
11446: PUSH
11447: LD_INT 5
11449: GREATER
11450: AND
11451: IFFALSE 11608
11453: GO 11455
11455: DISABLE
// begin vehicleTeleported = 2 ;
11456: LD_ADDR_EXP 29
11460: PUSH
11461: LD_INT 2
11463: ST_TO_ADDR
// DialogueOn ;
11464: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11468: LD_EXP 1
11472: PPUSH
11473: LD_STRING DT1a-JMM-1
11475: PPUSH
11476: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11480: LD_INT 22
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 26
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 3
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 4
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 25
11545: PUSH
11546: LD_INT 5
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 25
11555: PUSH
11556: LD_INT 8
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: PPUSH
11577: CALL_OW 69
11581: PPUSH
11582: LD_STRING DT1a-Sol1-1
11584: PPUSH
11585: LD_STRING DT1a-FSol1-1
11587: PPUSH
11588: CALL 13130 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11592: LD_EXP 1
11596: PPUSH
11597: LD_STRING DT1a-JMM-2
11599: PPUSH
11600: CALL_OW 88
// DialogueOff ;
11604: CALL_OW 7
// end ;
11608: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11609: LD_EXP 29
11613: PUSH
11614: LD_INT 3
11616: EQUAL
11617: PUSH
11618: LD_EXP 30
11622: PUSH
11623: LD_INT 4
11625: GREATER
11626: AND
11627: IFFALSE 11838
11629: GO 11631
11631: DISABLE
11632: LD_INT 0
11634: PPUSH
11635: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11636: LD_ADDR_VAR 0 2
11640: PUSH
11641: LD_INT 11
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 24
11656: PUSH
11657: LD_INT 250
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 70
11672: ST_TO_ADDR
// enable ;
11673: ENABLE
// for i in vehicles do
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_VAR 0 2
11683: PUSH
11684: FOR_IN
11685: IFFALSE 11836
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11687: LD_INT 1
11689: PPUSH
11690: LD_VAR 0 1
11694: PPUSH
11695: CALL_OW 292
11699: PUSH
11700: LD_EXP 29
11704: PUSH
11705: LD_INT 3
11707: EQUAL
11708: AND
11709: IFFALSE 11834
// begin disable ;
11711: DISABLE
// DialogueOn ;
11712: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11716: LD_INT 22
11718: PUSH
11719: LD_INT 1
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 26
11728: PUSH
11729: LD_INT 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 2
11738: PUSH
11739: LD_INT 25
11741: PUSH
11742: LD_INT 1
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 25
11761: PUSH
11762: LD_INT 3
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 4
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 25
11781: PUSH
11782: LD_INT 5
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 25
11791: PUSH
11792: LD_INT 8
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 69
11817: PPUSH
11818: LD_STRING DT2-Sol1-1
11820: PPUSH
11821: LD_STRING DT2-FSol1-1
11823: PPUSH
11824: CALL 13130 0 3
// DialogueOff ;
11828: CALL_OW 7
// break ;
11832: GO 11836
// end ; end ;
11834: GO 11684
11836: POP
11837: POP
// end ;
11838: PPOPN 2
11840: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11841: LD_EXP 29
11845: PUSH
11846: LD_INT 3
11848: EQUAL
11849: PUSH
11850: LD_INT 11
11852: PPUSH
11853: LD_INT 22
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: LD_INT 24
11865: PUSH
11866: LD_INT 251
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 21
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 0
11913: EQUAL
11914: AND
11915: PUSH
11916: LD_EXP 30
11920: PUSH
11921: LD_INT 6
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 8
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: LD_OWVAR 67
11939: ARRAY
11940: EQUAL
11941: AND
11942: IFFALSE 12099
11944: GO 11946
11946: DISABLE
// begin vehicleTeleported = 4 ;
11947: LD_ADDR_EXP 29
11951: PUSH
11952: LD_INT 4
11954: ST_TO_ADDR
// DialogueOn ;
11955: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11959: LD_EXP 1
11963: PPUSH
11964: LD_STRING DT2a-JMM-1
11966: PPUSH
11967: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11971: LD_INT 22
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 26
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 25
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 25
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 25
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 5
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 25
12046: PUSH
12047: LD_INT 8
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 69
12072: PPUSH
12073: LD_STRING DT2a-Sol1-1
12075: PPUSH
12076: LD_STRING DT2a-FSol1-1
12078: PPUSH
12079: CALL 13130 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12083: LD_EXP 3
12087: PPUSH
12088: LD_STRING DT2a-Don-1
12090: PPUSH
12091: CALL_OW 88
// DialogueOff ;
12095: CALL_OW 7
// end ;
12099: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12100: LD_INT 1
12102: PPUSH
12103: LD_INT 45
12105: PPUSH
12106: LD_INT 74
12108: PPUSH
12109: CALL_OW 293
12113: IFFALSE 12281
12115: GO 12117
12117: DISABLE
// begin DialogueOn ;
12118: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12122: LD_INT 36
12124: PPUSH
12125: LD_INT 55
12127: PPUSH
12128: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12132: LD_INT 22
12134: PUSH
12135: LD_INT 1
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 26
12144: PUSH
12145: LD_INT 1
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: LD_INT 25
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 25
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 25
12177: PUSH
12178: LD_INT 3
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 25
12187: PUSH
12188: LD_INT 4
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 25
12197: PUSH
12198: LD_INT 5
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 8
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: LIST
12228: PPUSH
12229: CALL_OW 69
12233: PPUSH
12234: LD_STRING D5-Sol1-1
12236: PPUSH
12237: LD_STRING D5-FSol1-
12239: PPUSH
12240: CALL 13130 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12244: LD_EXP 31
12248: PUSH
12249: LD_INT 1
12251: EQUAL
12252: PUSH
12253: LD_EXP 3
12257: PPUSH
12258: CALL_OW 300
12262: AND
12263: IFFALSE 12277
// Say ( Donaldson , D5-Don-1 ) ;
12265: LD_EXP 3
12269: PPUSH
12270: LD_STRING D5-Don-1
12272: PPUSH
12273: CALL_OW 88
// DialogueOff ;
12277: CALL_OW 7
// end ;
12281: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
12282: LD_INT 1
12284: PPUSH
12285: LD_INT 10
12287: PPUSH
12288: CALL_OW 292
12292: IFFALSE 12443
12294: GO 12296
12296: DISABLE
// begin DialogueOn ;
12297: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
12301: LD_INT 10
12303: PPUSH
12304: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12308: LD_INT 22
12310: PUSH
12311: LD_INT 1
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 26
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 1
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 3
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 25
12363: PUSH
12364: LD_INT 4
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 25
12373: PUSH
12374: LD_INT 5
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 25
12383: PUSH
12384: LD_INT 8
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: PPUSH
12405: CALL_OW 69
12409: PPUSH
12410: LD_STRING DT3-Sol1-1
12412: PPUSH
12413: LD_STRING DT3-FSol1-1
12415: PPUSH
12416: CALL 13130 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12420: LD_EXP 1
12424: PPUSH
12425: LD_STRING DT3-JMM-1
12427: PPUSH
12428: CALL_OW 88
// DialogueOff ;
12432: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12436: LD_STRING M2
12438: PPUSH
12439: CALL_OW 337
// end ;
12443: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12444: LD_EXP 43
12448: PUSH
12449: LD_INT 0
12451: EQUAL
12452: IFFALSE 12535
12454: GO 12456
12456: DISABLE
12457: LD_INT 0
12459: PPUSH
// begin enable ;
12460: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12461: LD_ADDR_VAR 0 1
12465: PUSH
12466: LD_INT 10
12468: PPUSH
12469: LD_INT 22
12471: PUSH
12472: LD_INT 3
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 21
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 58
12491: PUSH
12492: EMPTY
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 70
12504: PUSH
12505: FOR_IN
12506: IFFALSE 12533
// if GetLives ( i ) < 1000 then
12508: LD_VAR 0 1
12512: PPUSH
12513: CALL_OW 256
12517: PUSH
12518: LD_INT 1000
12520: LESS
12521: IFFALSE 12531
// ruEscape = 1 ;
12523: LD_ADDR_EXP 43
12527: PUSH
12528: LD_INT 1
12530: ST_TO_ADDR
12531: GO 12505
12533: POP
12534: POP
// end ;
12535: PPOPN 1
12537: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12538: LD_INT 3
12540: PPUSH
12541: CALL_OW 303
12545: PUSH
12546: LD_INT 4
12548: PPUSH
12549: CALL_OW 303
12553: OR
12554: PUSH
12555: LD_INT 22
12557: PPUSH
12558: LD_INT 22
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 70
12572: PUSH
12573: LD_INT 0
12575: GREATER
12576: OR
12577: PUSH
12578: LD_EXP 43
12582: PUSH
12583: LD_INT 1
12585: EQUAL
12586: OR
12587: IFFALSE 12818
12589: GO 12591
12591: DISABLE
12592: LD_INT 0
12594: PPUSH
12595: PPUSH
12596: PPUSH
// begin ruAI = 0 ;
12597: LD_ADDR_EXP 42
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12605: LD_ADDR_VAR 0 3
12609: PUSH
12610: LD_INT 10
12612: PPUSH
12613: LD_INT 22
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 21
12625: PUSH
12626: LD_INT 2
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 58
12635: PUSH
12636: EMPTY
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 70
12648: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12649: LD_EXP 35
12653: PPUSH
12654: CALL_OW 122
// wait ( 0 0$1 ) ;
12658: LD_INT 35
12660: PPUSH
12661: CALL_OW 67
// DialogueOn ;
12665: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12669: LD_EXP 1
12673: PPUSH
12674: LD_STRING D6-JMM-1
12676: PPUSH
12677: CALL_OW 88
// DialogueOff ;
12681: CALL_OW 7
// if vehs > 0 then
12685: LD_VAR 0 3
12689: PUSH
12690: LD_INT 0
12692: GREATER
12693: IFFALSE 12763
// for i := 1 to RuScientists do
12695: LD_ADDR_VAR 0 1
12699: PUSH
12700: DOUBLE
12701: LD_INT 1
12703: DEC
12704: ST_TO_ADDR
12705: LD_EXP 35
12709: PUSH
12710: FOR_TO
12711: IFFALSE 12759
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12713: LD_EXP 35
12717: PUSH
12718: LD_VAR 0 1
12722: ARRAY
12723: PPUSH
12724: LD_INT 3
12726: PUSH
12727: LD_INT 60
12729: PUSH
12730: EMPTY
12731: LIST
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 72
12741: PPUSH
12742: LD_VAR 0 3
12746: PUSH
12747: LD_VAR 0 1
12751: ARRAY
12752: PPUSH
12753: CALL_OW 120
12757: GO 12710
12759: POP
12760: POP
12761: GO 12818
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12763: LD_EXP 35
12767: PUSH
12768: LD_VAR 0 1
12772: ARRAY
12773: PPUSH
12774: LD_INT 3
12776: PUSH
12777: LD_INT 60
12779: PUSH
12780: EMPTY
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 72
12791: PPUSH
12792: LD_INT 13
12794: PUSH
12795: LD_INT 14
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 1
12804: PPUSH
12805: LD_INT 2
12807: PPUSH
12808: CALL_OW 12
12812: ARRAY
12813: PPUSH
12814: CALL_OW 113
// end ;
12818: PPOPN 3
12820: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
12821: LD_EXP 42
12825: PUSH
12826: LD_INT 0
12828: EQUAL
12829: IFFALSE 13019
12831: GO 12833
12833: DISABLE
12834: LD_INT 0
12836: PPUSH
12837: PPUSH
// begin enable ;
12838: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12839: LD_ADDR_VAR 0 1
12843: PUSH
12844: LD_INT 13
12846: PPUSH
12847: LD_INT 22
12849: PUSH
12850: LD_INT 3
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: PPUSH
12860: CALL_OW 70
12864: PUSH
12865: FOR_IN
12866: IFFALSE 12927
// begin for j in RuScientists do
12868: LD_ADDR_VAR 0 2
12872: PUSH
12873: LD_EXP 35
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12914
// if j = i then
12881: LD_VAR 0 2
12885: PUSH
12886: LD_VAR 0 1
12890: EQUAL
12891: IFFALSE 12912
// RuScientists = RuScientists diff [ i ] ;
12893: LD_ADDR_EXP 35
12897: PUSH
12898: LD_EXP 35
12902: PUSH
12903: LD_VAR 0 1
12907: PUSH
12908: EMPTY
12909: LIST
12910: DIFF
12911: ST_TO_ADDR
12912: GO 12878
12914: POP
12915: POP
// RemoveUnit ( i ) ;
12916: LD_VAR 0 1
12920: PPUSH
12921: CALL_OW 64
// end ;
12925: GO 12865
12927: POP
12928: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12929: LD_ADDR_VAR 0 1
12933: PUSH
12934: LD_INT 14
12936: PPUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 3
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: PPUSH
12950: CALL_OW 70
12954: PUSH
12955: FOR_IN
12956: IFFALSE 13017
// begin for j in RuScientists do
12958: LD_ADDR_VAR 0 2
12962: PUSH
12963: LD_EXP 35
12967: PUSH
12968: FOR_IN
12969: IFFALSE 13004
// if j = i then
12971: LD_VAR 0 2
12975: PUSH
12976: LD_VAR 0 1
12980: EQUAL
12981: IFFALSE 13002
// RuScientists = RuScientists diff [ i ] ;
12983: LD_ADDR_EXP 35
12987: PUSH
12988: LD_EXP 35
12992: PUSH
12993: LD_VAR 0 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: DIFF
13001: ST_TO_ADDR
13002: GO 12968
13004: POP
13005: POP
// RemoveUnit ( i ) ;
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 64
// end ;
13015: GO 12955
13017: POP
13018: POP
// end ; end_of_file
13019: PPOPN 2
13021: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13022: LD_INT 0
13024: PPUSH
13025: PPUSH
// if exist_mode then
13026: LD_VAR 0 2
13030: IFFALSE 13049
// unit := CreateCharacter ( ident ) else
13032: LD_ADDR_VAR 0 4
13036: PUSH
13037: LD_VAR 0 1
13041: PPUSH
13042: CALL_OW 34
13046: ST_TO_ADDR
13047: GO 13064
// unit := NewCharacter ( ident ) ;
13049: LD_ADDR_VAR 0 4
13053: PUSH
13054: LD_VAR 0 1
13058: PPUSH
13059: CALL_OW 25
13063: ST_TO_ADDR
// result := unit ;
13064: LD_ADDR_VAR 0 3
13068: PUSH
13069: LD_VAR 0 4
13073: ST_TO_ADDR
// end ;
13074: LD_VAR 0 3
13078: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13079: LD_INT 0
13081: PPUSH
13082: PPUSH
// for i in charactersList do
13083: LD_ADDR_VAR 0 4
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: FOR_IN
13094: IFFALSE 13123
// begin if IsOk ( i ) then
13096: LD_VAR 0 4
13100: PPUSH
13101: CALL_OW 302
13105: IFFALSE 13121
// SaveCharacters ( i , ident ) ;
13107: LD_VAR 0 4
13111: PPUSH
13112: LD_VAR 0 2
13116: PPUSH
13117: CALL_OW 38
// end ;
13121: GO 13093
13123: POP
13124: POP
// end ;
13125: LD_VAR 0 3
13129: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13130: LD_INT 0
13132: PPUSH
13133: PPUSH
13134: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13135: LD_ADDR_VAR 0 1
13139: PUSH
13140: LD_VAR 0 1
13144: PUSH
13145: LD_EXP 1
13149: PUSH
13150: LD_EXP 7
13154: PUSH
13155: LD_EXP 3
13159: PUSH
13160: LD_EXP 4
13164: PUSH
13165: LD_EXP 5
13169: PUSH
13170: LD_EXP 2
13174: PUSH
13175: LD_EXP 12
13179: PUSH
13180: LD_EXP 13
13184: PUSH
13185: LD_EXP 9
13189: PUSH
13190: LD_EXP 11
13194: PUSH
13195: LD_EXP 6
13199: PUSH
13200: LD_EXP 8
13204: PUSH
13205: LD_EXP 10
13209: PUSH
13210: LD_EXP 22
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: DIFF
13231: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13232: LD_ADDR_VAR 0 6
13236: PUSH
13237: LD_INT 1
13239: PPUSH
13240: LD_VAR 0 1
13244: PPUSH
13245: CALL_OW 12
13249: ST_TO_ADDR
// for i = 1 to characters do
13250: LD_ADDR_VAR 0 5
13254: PUSH
13255: DOUBLE
13256: LD_INT 1
13258: DEC
13259: ST_TO_ADDR
13260: LD_VAR 0 1
13264: PUSH
13265: FOR_TO
13266: IFFALSE 13376
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13268: LD_VAR 0 5
13272: PUSH
13273: LD_VAR 0 6
13277: EQUAL
13278: PUSH
13279: LD_VAR 0 1
13283: PUSH
13284: LD_VAR 0 5
13288: ARRAY
13289: PPUSH
13290: CALL_OW 258
13294: PUSH
13295: LD_INT 1
13297: EQUAL
13298: AND
13299: IFFALSE 13321
// Say ( characters [ i ] , dialogMID ) ;
13301: LD_VAR 0 1
13305: PUSH
13306: LD_VAR 0 5
13310: ARRAY
13311: PPUSH
13312: LD_VAR 0 2
13316: PPUSH
13317: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13321: LD_VAR 0 5
13325: PUSH
13326: LD_VAR 0 6
13330: EQUAL
13331: PUSH
13332: LD_VAR 0 1
13336: PUSH
13337: LD_VAR 0 5
13341: ARRAY
13342: PPUSH
13343: CALL_OW 258
13347: PUSH
13348: LD_INT 2
13350: EQUAL
13351: AND
13352: IFFALSE 13374
// Say ( characters [ i ] , dialogFID ) ;
13354: LD_VAR 0 1
13358: PUSH
13359: LD_VAR 0 5
13363: ARRAY
13364: PPUSH
13365: LD_VAR 0 3
13369: PPUSH
13370: CALL_OW 88
// end ;
13374: GO 13265
13376: POP
13377: POP
// end ;
13378: LD_VAR 0 4
13382: RET
// export function PrepareDifficulty ; var tmp ; begin
13383: LD_INT 0
13385: PPUSH
13386: PPUSH
// if Difficulty = 1 then
13387: LD_OWVAR 67
13391: PUSH
13392: LD_INT 1
13394: EQUAL
13395: IFFALSE 13413
// begin RuSolMinLevel = 8 ;
13397: LD_ADDR_EXP 37
13401: PUSH
13402: LD_INT 8
13404: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13405: LD_ADDR_EXP 38
13409: PUSH
13410: LD_INT 10
13412: ST_TO_ADDR
// end ; if Difficulty = 2 then
13413: LD_OWVAR 67
13417: PUSH
13418: LD_INT 2
13420: EQUAL
13421: IFFALSE 13515
// begin RuSolMinLevel = 9 ;
13423: LD_ADDR_EXP 37
13427: PUSH
13428: LD_INT 9
13430: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13431: LD_ADDR_EXP 38
13435: PUSH
13436: LD_INT 10
13438: ST_TO_ADDR
// uc_nation = 3 ;
13439: LD_ADDR_OWVAR 21
13443: PUSH
13444: LD_INT 3
13446: ST_TO_ADDR
// uc_side = 3 ;
13447: LD_ADDR_OWVAR 20
13451: PUSH
13452: LD_INT 3
13454: ST_TO_ADDR
// bc_level = 10 ;
13455: LD_ADDR_OWVAR 43
13459: PUSH
13460: LD_INT 10
13462: ST_TO_ADDR
// bc_type = b_turret ;
13463: LD_ADDR_OWVAR 42
13467: PUSH
13468: LD_INT 33
13470: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13471: LD_ADDR_VAR 0 2
13475: PUSH
13476: LD_INT 86
13478: PPUSH
13479: LD_INT 34
13481: PPUSH
13482: LD_INT 2
13484: PPUSH
13485: CALL_OW 47
13489: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13490: LD_VAR 0 2
13494: PPUSH
13495: LD_INT 49
13497: PPUSH
13498: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13502: LD_INT 64
13504: PPUSH
13505: LD_INT 3
13507: PPUSH
13508: LD_INT 1
13510: PPUSH
13511: CALL_OW 322
// end ; if Difficulty = 3 then
13515: LD_OWVAR 67
13519: PUSH
13520: LD_INT 3
13522: EQUAL
13523: IFFALSE 13661
// begin RuSolMinLevel = 10 ;
13525: LD_ADDR_EXP 37
13529: PUSH
13530: LD_INT 10
13532: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13533: LD_ADDR_EXP 38
13537: PUSH
13538: LD_INT 10
13540: ST_TO_ADDR
// uc_nation = 3 ;
13541: LD_ADDR_OWVAR 21
13545: PUSH
13546: LD_INT 3
13548: ST_TO_ADDR
// uc_side = 3 ;
13549: LD_ADDR_OWVAR 20
13553: PUSH
13554: LD_INT 3
13556: ST_TO_ADDR
// bc_level = 10 ;
13557: LD_ADDR_OWVAR 43
13561: PUSH
13562: LD_INT 10
13564: ST_TO_ADDR
// bc_type = b_turret ;
13565: LD_ADDR_OWVAR 42
13569: PUSH
13570: LD_INT 33
13572: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 86
13580: PPUSH
13581: LD_INT 34
13583: PPUSH
13584: LD_INT 2
13586: PPUSH
13587: CALL_OW 47
13591: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13592: LD_VAR 0 2
13596: PPUSH
13597: LD_INT 49
13599: PPUSH
13600: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13604: LD_ADDR_VAR 0 2
13608: PUSH
13609: LD_INT 93
13611: PPUSH
13612: LD_INT 31
13614: PPUSH
13615: LD_INT 2
13617: PPUSH
13618: CALL_OW 47
13622: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13623: LD_VAR 0 2
13627: PPUSH
13628: LD_INT 49
13630: PPUSH
13631: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13635: LD_INT 64
13637: PPUSH
13638: LD_INT 3
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13648: LD_INT 65
13650: PPUSH
13651: LD_INT 3
13653: PPUSH
13654: LD_INT 1
13656: PPUSH
13657: CALL_OW 322
// end ; end ;
13661: LD_VAR 0 1
13665: RET
// export function ShowQuery1 ; begin
13666: LD_INT 0
13668: PPUSH
// case query ( Q1 ) of 1 :
13669: LD_STRING Q1
13671: PPUSH
13672: CALL_OW 97
13676: PUSH
13677: LD_INT 1
13679: DOUBLE
13680: EQUAL
13681: IFTRUE 13685
13683: GO 13696
13685: POP
// result = 1 ; 2 :
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_INT 1
13693: ST_TO_ADDR
13694: GO 13735
13696: LD_INT 2
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13715
13704: POP
// result = 2 ; 3 :
13705: LD_ADDR_VAR 0 1
13709: PUSH
13710: LD_INT 2
13712: ST_TO_ADDR
13713: GO 13735
13715: LD_INT 3
13717: DOUBLE
13718: EQUAL
13719: IFTRUE 13723
13721: GO 13734
13723: POP
// result = 3 ; end ;
13724: LD_ADDR_VAR 0 1
13728: PUSH
13729: LD_INT 3
13731: ST_TO_ADDR
13732: GO 13735
13734: POP
// end ;
13735: LD_VAR 0 1
13739: RET
// export function ShowQuery2 ; begin
13740: LD_INT 0
13742: PPUSH
// case query ( Q1a ) of 1 :
13743: LD_STRING Q1a
13745: PPUSH
13746: CALL_OW 97
13750: PUSH
13751: LD_INT 1
13753: DOUBLE
13754: EQUAL
13755: IFTRUE 13759
13757: GO 13770
13759: POP
// result = 1 ; 2 :
13760: LD_ADDR_VAR 0 1
13764: PUSH
13765: LD_INT 1
13767: ST_TO_ADDR
13768: GO 13809
13770: LD_INT 2
13772: DOUBLE
13773: EQUAL
13774: IFTRUE 13778
13776: GO 13789
13778: POP
// result = 2 ; 3 :
13779: LD_ADDR_VAR 0 1
13783: PUSH
13784: LD_INT 2
13786: ST_TO_ADDR
13787: GO 13809
13789: LD_INT 3
13791: DOUBLE
13792: EQUAL
13793: IFTRUE 13797
13795: GO 13808
13797: POP
// result = 3 ; end ;
13798: LD_ADDR_VAR 0 1
13802: PUSH
13803: LD_INT 3
13805: ST_TO_ADDR
13806: GO 13809
13808: POP
// end ;
13809: LD_VAR 0 1
13813: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13814: LD_INT 0
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
// for i = 1 to count do
13821: LD_ADDR_VAR 0 8
13825: PUSH
13826: DOUBLE
13827: LD_INT 1
13829: DEC
13830: ST_TO_ADDR
13831: LD_VAR 0 6
13835: PUSH
13836: FOR_TO
13837: IFFALSE 13918
// begin uc_side = side ;
13839: LD_ADDR_OWVAR 20
13843: PUSH
13844: LD_VAR 0 1
13848: ST_TO_ADDR
// uc_nation = nation ;
13849: LD_ADDR_OWVAR 21
13853: PUSH
13854: LD_VAR 0 2
13858: ST_TO_ADDR
// hc_gallery =  ;
13859: LD_ADDR_OWVAR 33
13863: PUSH
13864: LD_STRING 
13866: ST_TO_ADDR
// hc_name =  ;
13867: LD_ADDR_OWVAR 26
13871: PUSH
13872: LD_STRING 
13874: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13875: LD_INT 0
13877: PPUSH
13878: LD_VAR 0 5
13882: PPUSH
13883: LD_VAR 0 4
13887: PPUSH
13888: CALL_OW 380
// un = CreateHuman ;
13892: LD_ADDR_VAR 0 10
13896: PUSH
13897: CALL_OW 44
13901: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13902: LD_VAR 0 10
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: CALL_OW 52
// end ;
13916: GO 13836
13918: POP
13919: POP
// end ;
13920: LD_VAR 0 7
13924: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13925: LD_INT 0
13927: PPUSH
13928: PPUSH
13929: PPUSH
13930: PPUSH
// for i = 1 to 72 do
13931: LD_ADDR_VAR 0 5
13935: PUSH
13936: DOUBLE
13937: LD_INT 1
13939: DEC
13940: ST_TO_ADDR
13941: LD_INT 72
13943: PUSH
13944: FOR_TO
13945: IFFALSE 14003
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13947: LD_VAR 0 5
13951: PPUSH
13952: LD_VAR 0 1
13956: PPUSH
13957: CALL_OW 321
13961: PUSH
13962: LD_INT 1
13964: EQUAL
13965: PUSH
13966: LD_VAR 0 5
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: CALL_OW 482
13980: PUSH
13981: LD_INT 1
13983: EQUAL
13984: AND
13985: IFFALSE 14001
// AddComResearch ( lab , i ) ;
13987: LD_VAR 0 2
13991: PPUSH
13992: LD_VAR 0 5
13996: PPUSH
13997: CALL_OW 184
14001: GO 13944
14003: POP
14004: POP
// end ;
14005: LD_VAR 0 4
14009: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14010: LD_INT 0
14012: PPUSH
14013: PPUSH
14014: PPUSH
14015: PPUSH
14016: PPUSH
14017: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14018: LD_ADDR_VAR 0 8
14022: PUSH
14023: LD_VAR 0 2
14027: PPUSH
14028: CALL_OW 313
14032: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14033: LD_ADDR_VAR 0 9
14037: PUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_INT 22
14045: PUSH
14046: LD_VAR 0 1
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 25
14057: PUSH
14058: LD_INT 2
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 24
14067: PUSH
14068: LD_INT 750
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 3
14077: PUSH
14078: LD_INT 54
14080: PUSH
14081: EMPTY
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 70
14098: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14099: LD_ADDR_VAR 0 6
14103: PUSH
14104: LD_VAR 0 3
14108: PPUSH
14109: LD_INT 22
14111: PUSH
14112: LD_VAR 0 1
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 21
14123: PUSH
14124: LD_INT 3
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 3
14133: PUSH
14134: LD_INT 24
14136: PUSH
14137: LD_INT 1000
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: PPUSH
14156: CALL_OW 70
14160: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14161: LD_VAR 0 6
14165: NOT
14166: PUSH
14167: LD_INT 22
14169: PUSH
14170: LD_VAR 0 1
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 25
14181: PUSH
14182: LD_INT 2
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 24
14191: PUSH
14192: LD_INT 250
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 69
14208: NOT
14209: AND
14210: IFFALSE 14214
// exit ;
14212: GO 14396
// if buildings_list > 0 and engineerOkInside then
14214: LD_VAR 0 6
14218: PUSH
14219: LD_INT 0
14221: GREATER
14222: PUSH
14223: LD_VAR 0 8
14227: AND
14228: IFFALSE 14239
// ComExitBuilding ( engineerOkInside ) ;
14230: LD_VAR 0 8
14234: PPUSH
14235: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14239: LD_VAR 0 6
14243: PUSH
14244: LD_INT 0
14246: GREATER
14247: PUSH
14248: LD_VAR 0 9
14252: PUSH
14253: LD_INT 0
14255: GREATER
14256: AND
14257: IFFALSE 14277
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14259: LD_VAR 0 9
14263: PPUSH
14264: LD_VAR 0 6
14268: PUSH
14269: LD_INT 1
14271: ARRAY
14272: PPUSH
14273: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14277: LD_VAR 0 6
14281: PUSH
14282: LD_INT 0
14284: EQUAL
14285: PUSH
14286: LD_VAR 0 4
14290: PUSH
14291: LD_INT 0
14293: EQUAL
14294: AND
14295: PUSH
14296: LD_VAR 0 9
14300: PUSH
14301: LD_INT 0
14303: GREATER
14304: AND
14305: IFFALSE 14321
// ComEnterUnit ( engineerOkOutside , building ) ;
14307: LD_VAR 0 9
14311: PPUSH
14312: LD_VAR 0 2
14316: PPUSH
14317: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14321: LD_VAR 0 9
14325: PUSH
14326: LD_INT 0
14328: GREATER
14329: PUSH
14330: LD_VAR 0 6
14334: PUSH
14335: LD_INT 0
14337: EQUAL
14338: AND
14339: PUSH
14340: LD_VAR 0 4
14344: PUSH
14345: LD_INT 0
14347: GREATER
14348: AND
14349: IFFALSE 14396
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14351: LD_VAR 0 9
14355: PPUSH
14356: LD_VAR 0 4
14360: PUSH
14361: LD_INT 1
14363: ARRAY
14364: PPUSH
14365: LD_VAR 0 4
14369: PUSH
14370: LD_INT 2
14372: ARRAY
14373: PPUSH
14374: LD_VAR 0 4
14378: PUSH
14379: LD_INT 3
14381: ARRAY
14382: PPUSH
14383: LD_VAR 0 4
14387: PUSH
14388: LD_INT 4
14390: ARRAY
14391: PPUSH
14392: CALL_OW 145
// end ;
14396: LD_VAR 0 5
14400: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14401: LD_INT 0
14403: PPUSH
14404: PPUSH
14405: PPUSH
14406: PPUSH
14407: PPUSH
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14412: LD_ADDR_VAR 0 6
14416: PUSH
14417: LD_INT 22
14419: PUSH
14420: LD_VAR 0 1
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 25
14431: PUSH
14432: LD_INT 4
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 24
14441: PUSH
14442: LD_INT 251
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: PPUSH
14454: CALL_OW 69
14458: PUSH
14459: LD_EXP 35
14463: PUSH
14464: EMPTY
14465: LIST
14466: DIFF
14467: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14468: LD_ADDR_VAR 0 7
14472: PUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: LD_INT 22
14480: PUSH
14481: LD_VAR 0 1
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 25
14492: PUSH
14493: LD_INT 4
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 50
14502: PUSH
14503: EMPTY
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 70
14515: PUSH
14516: LD_EXP 35
14520: PUSH
14521: EMPTY
14522: LIST
14523: DIFF
14524: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14525: LD_ADDR_VAR 0 10
14529: PUSH
14530: LD_VAR 0 3
14534: PPUSH
14535: LD_INT 22
14537: PUSH
14538: LD_VAR 0 1
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 21
14549: PUSH
14550: LD_INT 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: LD_INT 24
14562: PUSH
14563: LD_INT 750
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: PPUSH
14579: CALL_OW 70
14583: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14584: LD_ADDR_VAR 0 11
14588: PUSH
14589: LD_VAR 0 2
14593: PPUSH
14594: LD_INT 22
14596: PUSH
14597: LD_VAR 0 1
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 21
14608: PUSH
14609: LD_INT 1
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: LD_INT 24
14621: PUSH
14622: LD_INT 1000
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: LIST
14637: PPUSH
14638: CALL_OW 70
14642: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14643: LD_VAR 0 10
14647: PUSH
14648: LD_INT 0
14650: GREATER
14651: PUSH
14652: LD_VAR 0 6
14656: PUSH
14657: LD_INT 0
14659: GREATER
14660: AND
14661: IFFALSE 14677
// ComMoveToArea ( damageUnits , healArea ) ;
14663: LD_VAR 0 10
14667: PPUSH
14668: LD_VAR 0 2
14672: PPUSH
14673: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
14677: LD_VAR 0 11
14681: PUSH
14682: LD_INT 0
14684: GREATER
14685: PUSH
14686: LD_VAR 0 7
14690: PUSH
14691: LD_INT 0
14693: GREATER
14694: AND
14695: IFFALSE 14715
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
14697: LD_VAR 0 7
14701: PPUSH
14702: LD_VAR 0 11
14706: PUSH
14707: LD_INT 1
14709: ARRAY
14710: PPUSH
14711: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14715: LD_VAR 0 10
14719: PUSH
14720: LD_INT 0
14722: EQUAL
14723: PUSH
14724: LD_VAR 0 11
14728: PUSH
14729: LD_INT 0
14731: EQUAL
14732: AND
14733: PUSH
14734: LD_VAR 0 7
14738: PUSH
14739: LD_INT 0
14741: GREATER
14742: AND
14743: IFFALSE 14848
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14745: LD_ADDR_VAR 0 12
14749: PUSH
14750: LD_INT 22
14752: PUSH
14753: LD_VAR 0 1
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 21
14764: PUSH
14765: LD_INT 3
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 30
14774: PUSH
14775: LD_INT 8
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: LIST
14786: PPUSH
14787: CALL_OW 69
14791: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14792: LD_ADDR_VAR 0 13
14796: PUSH
14797: LD_INT 1
14799: PPUSH
14800: LD_VAR 0 12
14804: PPUSH
14805: CALL_OW 12
14809: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14810: LD_VAR 0 7
14814: PPUSH
14815: LD_INT 3
14817: PUSH
14818: LD_INT 60
14820: PUSH
14821: EMPTY
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 72
14832: PPUSH
14833: LD_VAR 0 12
14837: PUSH
14838: LD_VAR 0 13
14842: ARRAY
14843: PPUSH
14844: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14848: LD_VAR 0 3
14852: PPUSH
14853: LD_INT 22
14855: PUSH
14856: LD_VAR 0 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 25
14867: PUSH
14868: LD_INT 3
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 24
14877: PUSH
14878: LD_INT 751
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 70
14894: PUSH
14895: LD_INT 0
14897: GREATER
14898: PUSH
14899: LD_INT 21
14901: PPUSH
14902: CALL_OW 302
14906: AND
14907: PUSH
14908: LD_INT 21
14910: PPUSH
14911: CALL_OW 255
14915: PUSH
14916: LD_INT 3
14918: EQUAL
14919: AND
14920: IFFALSE 14976
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14922: LD_VAR 0 3
14926: PPUSH
14927: LD_INT 22
14929: PUSH
14930: LD_VAR 0 1
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: LD_INT 25
14941: PUSH
14942: LD_INT 3
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 24
14951: PUSH
14952: LD_INT 751
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 70
14968: PPUSH
14969: LD_INT 21
14971: PPUSH
14972: CALL_OW 120
// end ;
14976: LD_VAR 0 5
14980: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14981: LD_INT 0
14983: PPUSH
14984: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14985: LD_INT 22
14987: PUSH
14988: LD_VAR 0 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 21
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PPUSH
15011: CALL_OW 69
15015: PUSH
15016: LD_INT 18
15018: PPUSH
15019: LD_INT 22
15021: PUSH
15022: LD_VAR 0 1
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 21
15033: PUSH
15034: LD_INT 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PPUSH
15045: CALL_OW 70
15049: PUSH
15050: LD_VAR 0 3
15054: LESSEQUAL
15055: DIFF
15056: IFFALSE 15123
// for i = 1 to vehCount do
15058: LD_ADDR_VAR 0 9
15062: PUSH
15063: DOUBLE
15064: LD_INT 1
15066: DEC
15067: ST_TO_ADDR
15068: LD_VAR 0 3
15072: PUSH
15073: FOR_TO
15074: IFFALSE 15121
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15076: LD_VAR 0 2
15080: PPUSH
15081: LD_VAR 0 7
15085: PPUSH
15086: LD_VAR 0 5
15090: PPUSH
15091: LD_VAR 0 6
15095: PPUSH
15096: LD_VAR 0 4
15100: PUSH
15101: LD_INT 1
15103: PPUSH
15104: LD_VAR 0 4
15108: PPUSH
15109: CALL_OW 12
15113: ARRAY
15114: PPUSH
15115: CALL_OW 185
15119: GO 15073
15121: POP
15122: POP
// end ;
15123: LD_VAR 0 8
15127: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15128: LD_INT 0
15130: PPUSH
15131: PPUSH
15132: PPUSH
15133: PPUSH
15134: PPUSH
15135: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15136: LD_EXP 40
15140: PUSH
15141: LD_INT 3
15143: PUSH
15144: LD_INT 4
15146: PUSH
15147: LD_INT 4
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: PUSH
15155: LD_OWVAR 67
15159: ARRAY
15160: GREATEREQUAL
15161: PUSH
15162: LD_EXP 41
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: LD_INT 2
15172: PUSH
15173: LD_INT 2
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: PUSH
15181: LD_OWVAR 67
15185: ARRAY
15186: GREATEREQUAL
15187: AND
15188: IFFALSE 15421
// begin repeat wait ( 0 0$3 ) ;
15190: LD_INT 105
15192: PPUSH
15193: CALL_OW 67
// for j in russianTanks do
15197: LD_ADDR_VAR 0 4
15201: PUSH
15202: LD_EXP 40
15206: PUSH
15207: FOR_IN
15208: IFFALSE 15409
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15210: LD_ADDR_VAR 0 6
15214: PUSH
15215: LD_INT 81
15217: PUSH
15218: LD_VAR 0 1
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 101
15229: PUSH
15230: LD_INT 1
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PPUSH
15241: CALL_OW 69
15245: PPUSH
15246: LD_VAR 0 4
15250: PPUSH
15251: CALL_OW 74
15255: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15256: LD_ADDR_VAR 0 7
15260: PUSH
15261: LD_INT 81
15263: PUSH
15264: LD_VAR 0 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 101
15275: PUSH
15276: LD_INT 1
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 2
15285: PUSH
15286: LD_INT 59
15288: PUSH
15289: EMPTY
15290: LIST
15291: PUSH
15292: LD_INT 21
15294: PUSH
15295: LD_INT 1
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 21
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: PPUSH
15326: CALL_OW 69
15330: PPUSH
15331: LD_VAR 0 4
15335: PPUSH
15336: CALL_OW 74
15340: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
15341: LD_VAR 0 4
15345: PPUSH
15346: LD_VAR 0 6
15350: PPUSH
15351: CALL_OW 296
15355: PUSH
15356: LD_INT 8
15358: PLUS
15359: PUSH
15360: LD_VAR 0 4
15364: PPUSH
15365: LD_VAR 0 7
15369: PPUSH
15370: CALL_OW 296
15374: LESS
15375: IFFALSE 15393
// ComAttackUnit ( j , target1 ) else
15377: LD_VAR 0 4
15381: PPUSH
15382: LD_VAR 0 6
15386: PPUSH
15387: CALL_OW 115
15391: GO 15407
// ComAttackUnit ( j , target2 ) ;
15393: LD_VAR 0 4
15397: PPUSH
15398: LD_VAR 0 7
15402: PPUSH
15403: CALL_OW 115
// end ;
15407: GO 15207
15409: POP
15410: POP
// until russianTanks = 0 ;
15411: LD_EXP 40
15415: PUSH
15416: LD_INT 0
15418: EQUAL
15419: IFFALSE 15190
// end ; end ;
15421: LD_VAR 0 2
15425: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
15426: LD_INT 0
15428: PPUSH
15429: PPUSH
15430: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15431: LD_EXP 40
15435: PUSH
15436: LD_INT 1
15438: GREATEREQUAL
15439: PUSH
15440: LD_EXP 41
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: LD_INT 2
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: PUSH
15459: LD_OWVAR 67
15463: ARRAY
15464: GREATEREQUAL
15465: AND
15466: IFFALSE 15616
// repeat wait ( 0 0$3 ) ;
15468: LD_INT 105
15470: PPUSH
15471: CALL_OW 67
// if russianTimeLapsers > 0 then
15475: LD_EXP 41
15479: PUSH
15480: LD_INT 0
15482: GREATER
15483: IFFALSE 15606
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
15485: LD_ADDR_VAR 0 3
15489: PUSH
15490: LD_EXP 41
15494: PPUSH
15495: LD_INT 3
15497: PUSH
15498: LD_INT 60
15500: PUSH
15501: EMPTY
15502: LIST
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 72
15512: PUSH
15513: FOR_IN
15514: IFFALSE 15604
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
15516: LD_ADDR_VAR 0 4
15520: PUSH
15521: LD_INT 81
15523: PUSH
15524: LD_VAR 0 1
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 101
15535: PUSH
15536: LD_INT 1
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 21
15545: PUSH
15546: LD_INT 1
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: PPUSH
15563: LD_VAR 0 3
15567: PPUSH
15568: CALL_OW 74
15572: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_VAR 0 4
15582: PPUSH
15583: CALL_OW 250
15587: PPUSH
15588: LD_VAR 0 4
15592: PPUSH
15593: CALL_OW 251
15597: PPUSH
15598: CALL_OW 111
// end ;
15602: GO 15513
15604: POP
15605: POP
// until russianTimeLapsers = 0 ;
15606: LD_EXP 41
15610: PUSH
15611: LD_INT 0
15613: EQUAL
15614: IFFALSE 15468
// end ;
15616: LD_VAR 0 2
15620: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15621: LD_INT 0
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
15628: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15629: LD_ADDR_VAR 0 6
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_VAR 0 1
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 25
15648: PUSH
15649: LD_INT 9
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: CALL_OW 69
15664: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15665: LD_ADDR_VAR 0 7
15669: PUSH
15670: LD_INT 81
15672: PUSH
15673: LD_VAR 0 1
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: LD_INT 21
15687: PUSH
15688: LD_INT 3
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15708: LD_ADDR_VAR 0 4
15712: PUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 3
15718: PPUSH
15719: CALL_OW 12
15723: ST_TO_ADDR
// for i = 1 to list do
15724: LD_ADDR_VAR 0 5
15728: PUSH
15729: DOUBLE
15730: LD_INT 1
15732: DEC
15733: ST_TO_ADDR
15734: LD_VAR 0 6
15738: PUSH
15739: FOR_TO
15740: IFFALSE 15942
// for ta in filter do
15742: LD_ADDR_VAR 0 3
15746: PUSH
15747: LD_VAR 0 7
15751: PUSH
15752: FOR_IN
15753: IFFALSE 15938
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15755: LD_VAR 0 6
15759: PUSH
15760: LD_VAR 0 5
15764: ARRAY
15765: PPUSH
15766: LD_VAR 0 3
15770: PPUSH
15771: CALL_OW 296
15775: PUSH
15776: LD_INT 15
15778: LESSEQUAL
15779: IFFALSE 15936
// begin case c of 1 :
15781: LD_VAR 0 4
15785: PUSH
15786: LD_INT 1
15788: DOUBLE
15789: EQUAL
15790: IFTRUE 15794
15792: GO 15832
15794: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15795: LD_VAR 0 6
15799: PUSH
15800: LD_VAR 0 5
15804: ARRAY
15805: PPUSH
15806: LD_VAR 0 3
15810: PPUSH
15811: CALL_OW 250
15815: PPUSH
15816: LD_VAR 0 3
15820: PPUSH
15821: CALL_OW 251
15825: PPUSH
15826: CALL_OW 154
15830: GO 15936
15832: LD_INT 2
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 15904
15840: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15841: LD_VAR 0 6
15845: PUSH
15846: LD_VAR 0 5
15850: ARRAY
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: CALL_OW 250
15861: PUSH
15862: LD_INT 1
15864: NEG
15865: PPUSH
15866: LD_INT 1
15868: PPUSH
15869: CALL_OW 12
15873: PLUS
15874: PPUSH
15875: LD_VAR 0 3
15879: PPUSH
15880: CALL_OW 251
15884: PUSH
15885: LD_INT 1
15887: NEG
15888: PPUSH
15889: LD_INT 1
15891: PPUSH
15892: CALL_OW 12
15896: PLUS
15897: PPUSH
15898: CALL_OW 153
15902: GO 15936
15904: LD_INT 3
15906: DOUBLE
15907: EQUAL
15908: IFTRUE 15912
15910: GO 15935
15912: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15913: LD_VAR 0 6
15917: PUSH
15918: LD_VAR 0 5
15922: ARRAY
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: CALL_OW 115
15933: GO 15936
15935: POP
// end ; end ;
15936: GO 15752
15938: POP
15939: POP
15940: GO 15739
15942: POP
15943: POP
// end ;
15944: LD_VAR 0 2
15948: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15949: LD_INT 0
15951: PPUSH
15952: PPUSH
15953: PPUSH
15954: PPUSH
// r := 100 ;
15955: LD_ADDR_VAR 0 5
15959: PUSH
15960: LD_INT 100
15962: ST_TO_ADDR
// x := 0 ;
15963: LD_ADDR_VAR 0 6
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// while ( x < n ) do
15971: LD_VAR 0 6
15975: PUSH
15976: LD_VAR 0 2
15980: LESS
15981: IFFALSE 16268
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15983: LD_ADDR_VAR 0 4
15987: PUSH
15988: DOUBLE
15989: LD_INT 1
15991: DEC
15992: ST_TO_ADDR
15993: LD_VAR 0 1
15997: PPUSH
15998: LD_INT 0
16000: PPUSH
16001: CALL_OW 517
16005: PUSH
16006: LD_INT 1
16008: ARRAY
16009: PUSH
16010: FOR_TO
16011: IFFALSE 16264
// begin if r > 50 then
16013: LD_VAR 0 5
16017: PUSH
16018: LD_INT 50
16020: GREATER
16021: IFFALSE 16240
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_INT 0
16030: PPUSH
16031: CALL_OW 517
16035: PUSH
16036: LD_INT 1
16038: ARRAY
16039: PUSH
16040: LD_VAR 0 4
16044: ARRAY
16045: PPUSH
16046: LD_VAR 0 1
16050: PPUSH
16051: LD_INT 0
16053: PPUSH
16054: CALL_OW 517
16058: PUSH
16059: LD_INT 2
16061: ARRAY
16062: PUSH
16063: LD_VAR 0 4
16067: ARRAY
16068: PPUSH
16069: CALL_OW 458
16073: NOT
16074: IFFALSE 16224
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16076: LD_VAR 0 1
16080: PPUSH
16081: LD_INT 0
16083: PPUSH
16084: CALL_OW 517
16088: PUSH
16089: LD_INT 1
16091: ARRAY
16092: PUSH
16093: LD_VAR 0 4
16097: ARRAY
16098: PPUSH
16099: LD_VAR 0 1
16103: PPUSH
16104: LD_INT 0
16106: PPUSH
16107: CALL_OW 517
16111: PUSH
16112: LD_INT 2
16114: ARRAY
16115: PUSH
16116: LD_VAR 0 4
16120: ARRAY
16121: PPUSH
16122: LD_INT 8
16124: PPUSH
16125: LD_INT 0
16127: PPUSH
16128: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16132: LD_ADDR_EXP 45
16136: PUSH
16137: LD_EXP 45
16141: PPUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_VAR 0 1
16149: PPUSH
16150: LD_INT 0
16152: PPUSH
16153: CALL_OW 517
16157: PUSH
16158: LD_INT 1
16160: ARRAY
16161: PUSH
16162: LD_VAR 0 4
16166: ARRAY
16167: PUSH
16168: LD_VAR 0 1
16172: PPUSH
16173: LD_INT 0
16175: PPUSH
16176: CALL_OW 517
16180: PUSH
16181: LD_INT 2
16183: ARRAY
16184: PUSH
16185: LD_VAR 0 4
16189: ARRAY
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PPUSH
16195: CALL_OW 2
16199: ST_TO_ADDR
// r := 0 ;
16200: LD_ADDR_VAR 0 5
16204: PUSH
16205: LD_INT 0
16207: ST_TO_ADDR
// x := x + 1 ;
16208: LD_ADDR_VAR 0 6
16212: PUSH
16213: LD_VAR 0 6
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: ST_TO_ADDR
// end else
16222: GO 16238
// r := r + 35 ;
16224: LD_ADDR_VAR 0 5
16228: PUSH
16229: LD_VAR 0 5
16233: PUSH
16234: LD_INT 35
16236: PLUS
16237: ST_TO_ADDR
// end else
16238: GO 16262
// r := r + rand ( 10 , 25 ) ;
16240: LD_ADDR_VAR 0 5
16244: PUSH
16245: LD_VAR 0 5
16249: PUSH
16250: LD_INT 10
16252: PPUSH
16253: LD_INT 25
16255: PPUSH
16256: CALL_OW 12
16260: PLUS
16261: ST_TO_ADDR
// end ;
16262: GO 16010
16264: POP
16265: POP
16266: GO 15971
// end ;
16268: LD_VAR 0 3
16272: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
16278: PPUSH
// tmpTab = [ ] ;
16279: LD_ADDR_VAR 0 6
16283: PUSH
16284: EMPTY
16285: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
16286: LD_INT 22
16288: PUSH
16289: LD_VAR 0 1
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 30
16300: PUSH
16301: LD_INT 32
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PPUSH
16312: CALL_OW 69
16316: PUSH
16317: LD_INT 0
16319: GREATER
16320: IFFALSE 16403
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
16322: LD_ADDR_VAR 0 4
16326: PUSH
16327: LD_INT 22
16329: PUSH
16330: LD_VAR 0 1
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 30
16341: PUSH
16342: LD_INT 32
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: PUSH
16358: FOR_IN
16359: IFFALSE 16401
// begin for j in UnitsInside ( i ) do
16361: LD_ADDR_VAR 0 5
16365: PUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: CALL_OW 313
16375: PUSH
16376: FOR_IN
16377: IFFALSE 16397
// tmpTab = tmpTab ^ j ;
16379: LD_ADDR_VAR 0 6
16383: PUSH
16384: LD_VAR 0 6
16388: PUSH
16389: LD_VAR 0 5
16393: ADD
16394: ST_TO_ADDR
16395: GO 16376
16397: POP
16398: POP
// end ;
16399: GO 16358
16401: POP
16402: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
16403: LD_VAR 0 6
16407: PPUSH
16408: LD_VAR 0 2
16412: PPUSH
16413: CALL_OW 250
16417: PPUSH
16418: LD_VAR 0 2
16422: PPUSH
16423: CALL_OW 251
16427: PPUSH
16428: CALL_OW 114
// end ;
16432: LD_VAR 0 3
16436: RET
// export function PrepareNature ; var i , un ; begin
16437: LD_INT 0
16439: PPUSH
16440: PPUSH
16441: PPUSH
// uc_side := 0 ;
16442: LD_ADDR_OWVAR 20
16446: PUSH
16447: LD_INT 0
16449: ST_TO_ADDR
// uc_nation := 0 ;
16450: LD_ADDR_OWVAR 21
16454: PUSH
16455: LD_INT 0
16457: ST_TO_ADDR
// InitHc ;
16458: CALL_OW 19
// hc_class := class_fish ;
16462: LD_ADDR_OWVAR 28
16466: PUSH
16467: LD_INT 20
16469: ST_TO_ADDR
// for i = 1 to 6 do
16470: LD_ADDR_VAR 0 2
16474: PUSH
16475: DOUBLE
16476: LD_INT 1
16478: DEC
16479: ST_TO_ADDR
16480: LD_INT 6
16482: PUSH
16483: FOR_TO
16484: IFFALSE 16503
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
16486: CALL_OW 44
16490: PPUSH
16491: LD_INT 23
16493: PPUSH
16494: LD_INT 0
16496: PPUSH
16497: CALL_OW 49
16501: GO 16483
16503: POP
16504: POP
// for i = 1 to Difficulty + 2 do
16505: LD_ADDR_VAR 0 2
16509: PUSH
16510: DOUBLE
16511: LD_INT 1
16513: DEC
16514: ST_TO_ADDR
16515: LD_OWVAR 67
16519: PUSH
16520: LD_INT 2
16522: PLUS
16523: PUSH
16524: FOR_TO
16525: IFFALSE 16634
// begin hc_sex = sex_male ;
16527: LD_ADDR_OWVAR 27
16531: PUSH
16532: LD_INT 1
16534: ST_TO_ADDR
// uc_side = 0 ;
16535: LD_ADDR_OWVAR 20
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// uc_nation = nation_nature ;
16543: LD_ADDR_OWVAR 21
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// hc_class = class_tiger ;
16551: LD_ADDR_OWVAR 28
16555: PUSH
16556: LD_INT 14
16558: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16559: LD_ADDR_OWVAR 31
16563: PUSH
16564: LD_EXP 38
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16584: LD_ADDR_OWVAR 35
16588: PUSH
16589: LD_INT 5
16591: NEG
16592: PPUSH
16593: LD_INT 5
16595: PPUSH
16596: CALL_OW 12
16600: PUSH
16601: LD_OWVAR 67
16605: MUL
16606: ST_TO_ADDR
// un = CreateHuman ;
16607: LD_ADDR_VAR 0 3
16611: PUSH
16612: CALL_OW 44
16616: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16617: LD_VAR 0 3
16621: PPUSH
16622: LD_INT 24
16624: PPUSH
16625: LD_INT 0
16627: PPUSH
16628: CALL_OW 49
// end ;
16632: GO 16524
16634: POP
16635: POP
// for i = 1 to rand ( 3 , 4 ) do
16636: LD_ADDR_VAR 0 2
16640: PUSH
16641: DOUBLE
16642: LD_INT 1
16644: DEC
16645: ST_TO_ADDR
16646: LD_INT 3
16648: PPUSH
16649: LD_INT 4
16651: PPUSH
16652: CALL_OW 12
16656: PUSH
16657: FOR_TO
16658: IFFALSE 16750
// begin hc_sex = sex_male ;
16660: LD_ADDR_OWVAR 27
16664: PUSH
16665: LD_INT 1
16667: ST_TO_ADDR
// uc_side = 0 ;
16668: LD_ADDR_OWVAR 20
16672: PUSH
16673: LD_INT 0
16675: ST_TO_ADDR
// uc_nation = nation_nature ;
16676: LD_ADDR_OWVAR 21
16680: PUSH
16681: LD_INT 0
16683: ST_TO_ADDR
// hc_class = 18 ;
16684: LD_ADDR_OWVAR 28
16688: PUSH
16689: LD_INT 18
16691: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16692: LD_ADDR_OWVAR 31
16696: PUSH
16697: LD_INT 0
16699: PUSH
16700: LD_INT 0
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: ST_TO_ADDR
// hc_agressivity = 0 ;
16715: LD_ADDR_OWVAR 35
16719: PUSH
16720: LD_INT 0
16722: ST_TO_ADDR
// un = CreateHuman ;
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: CALL_OW 44
16732: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16733: LD_VAR 0 3
16737: PPUSH
16738: LD_INT 24
16740: PPUSH
16741: LD_INT 0
16743: PPUSH
16744: CALL_OW 49
// end ;
16748: GO 16657
16750: POP
16751: POP
// for i = 1 to rand ( 1 , 3 ) do
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: DOUBLE
16758: LD_INT 1
16760: DEC
16761: ST_TO_ADDR
16762: LD_INT 1
16764: PPUSH
16765: LD_INT 3
16767: PPUSH
16768: CALL_OW 12
16772: PUSH
16773: FOR_TO
16774: IFFALSE 16922
// begin hc_sex = sex_male ;
16776: LD_ADDR_OWVAR 27
16780: PUSH
16781: LD_INT 1
16783: ST_TO_ADDR
// uc_side = 0 ;
16784: LD_ADDR_OWVAR 20
16788: PUSH
16789: LD_INT 0
16791: ST_TO_ADDR
// uc_nation = nation_nature ;
16792: LD_ADDR_OWVAR 21
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// hc_class = class_apeman ;
16800: LD_ADDR_OWVAR 28
16804: PUSH
16805: LD_INT 12
16807: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16808: LD_ADDR_OWVAR 31
16812: PUSH
16813: LD_EXP 37
16817: PPUSH
16818: LD_EXP 38
16822: PPUSH
16823: CALL_OW 12
16827: PUSH
16828: LD_EXP 37
16832: PPUSH
16833: LD_EXP 38
16837: PPUSH
16838: CALL_OW 12
16842: PUSH
16843: LD_EXP 37
16847: PPUSH
16848: LD_EXP 38
16852: PPUSH
16853: CALL_OW 12
16857: PUSH
16858: LD_EXP 37
16862: PPUSH
16863: LD_EXP 38
16867: PPUSH
16868: CALL_OW 12
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16879: LD_ADDR_OWVAR 35
16883: PUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_INT 20
16889: PPUSH
16890: CALL_OW 12
16894: ST_TO_ADDR
// un = CreateHuman ;
16895: LD_ADDR_VAR 0 3
16899: PUSH
16900: CALL_OW 44
16904: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_INT 24
16912: PPUSH
16913: LD_INT 0
16915: PPUSH
16916: CALL_OW 49
// end ;
16920: GO 16773
16922: POP
16923: POP
// end ; end_of_file
16924: LD_VAR 0 1
16928: RET
// on UnitDestroyed ( unit ) do var i ;
16929: LD_INT 0
16931: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL_OW 255
16941: PUSH
16942: LD_INT 3
16944: EQUAL
16945: PUSH
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 247
16955: PUSH
16956: LD_INT 1
16958: EQUAL
16959: AND
16960: IFFALSE 17024
// begin for i in RuScientists do
16962: LD_ADDR_VAR 0 2
16966: PUSH
16967: LD_EXP 35
16971: PUSH
16972: FOR_IN
16973: IFFALSE 17022
// if i = unit then
16975: LD_VAR 0 2
16979: PUSH
16980: LD_VAR 0 1
16984: EQUAL
16985: IFFALSE 17020
// begin RuScientists = RuScientists diff [ unit ] ;
16987: LD_ADDR_EXP 35
16991: PUSH
16992: LD_EXP 35
16996: PUSH
16997: LD_VAR 0 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: DIFF
17005: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17006: LD_ADDR_EXP 36
17010: PUSH
17011: LD_EXP 36
17015: PUSH
17016: LD_INT 1
17018: PLUS
17019: ST_TO_ADDR
// end ;
17020: GO 16972
17022: POP
17023: POP
// end ; end ;
17024: PPOPN 2
17026: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17027: LD_VAR 0 1
17031: PUSH
17032: LD_INT 10
17034: EQUAL
17035: PUSH
17036: LD_VAR 0 2
17040: PPUSH
17041: CALL_OW 255
17045: PUSH
17046: LD_INT 1
17048: EQUAL
17049: AND
17050: PUSH
17051: LD_EXP 48
17055: PUSH
17056: LD_INT 0
17058: EQUAL
17059: AND
17060: IFFALSE 17172
// begin eventVar1 = 1 ;
17062: LD_ADDR_EXP 48
17066: PUSH
17067: LD_INT 1
17069: ST_TO_ADDR
// teleportExplored = 1 ;
17070: LD_ADDR_EXP 34
17074: PUSH
17075: LD_INT 1
17077: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17078: LD_STRING M2a
17080: PPUSH
17081: CALL_OW 337
// wait ( 0 0$2 ) ;
17085: LD_INT 70
17087: PPUSH
17088: CALL_OW 67
// DialogueOn ;
17092: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17096: LD_INT 22
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 21
17108: PUSH
17109: LD_INT 1
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PPUSH
17120: CALL_OW 69
17124: PPUSH
17125: LD_STRING DT3a-Sol1-1
17127: PPUSH
17128: LD_STRING DT3a-FSol1-1
17130: PPUSH
17131: CALL 13130 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17135: LD_EXP 1
17139: PPUSH
17140: LD_STRING DT3a-JMM-1
17142: PPUSH
17143: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17147: LD_VAR 0 2
17151: PPUSH
17152: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17156: LD_EXP 1
17160: PPUSH
17161: LD_STRING DT3a-JMM-1a
17163: PPUSH
17164: CALL_OW 88
// DialogueOff ;
17168: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17172: LD_VAR 0 1
17176: PUSH
17177: LD_INT 10
17179: EQUAL
17180: PUSH
17181: LD_VAR 0 2
17185: PPUSH
17186: CALL_OW 247
17190: PUSH
17191: LD_INT 2
17193: EQUAL
17194: AND
17195: PUSH
17196: LD_VAR 0 2
17200: PPUSH
17201: CALL_OW 255
17205: PUSH
17206: LD_INT 3
17208: EQUAL
17209: AND
17210: PUSH
17211: LD_EXP 29
17215: PUSH
17216: LD_INT 0
17218: EQUAL
17219: AND
17220: IFFALSE 17237
// begin wait ( 0 0$3 ) ;
17222: LD_INT 105
17224: PPUSH
17225: CALL_OW 67
// vehicleTeleported = 1 ;
17229: LD_ADDR_EXP 29
17233: PUSH
17234: LD_INT 1
17236: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17237: LD_VAR 0 1
17241: PUSH
17242: LD_INT 10
17244: EQUAL
17245: PUSH
17246: LD_VAR 0 2
17250: PPUSH
17251: CALL_OW 247
17255: PUSH
17256: LD_INT 2
17258: EQUAL
17259: AND
17260: PUSH
17261: LD_VAR 0 2
17265: PPUSH
17266: CALL_OW 255
17270: PUSH
17271: LD_INT 3
17273: EQUAL
17274: AND
17275: PUSH
17276: LD_EXP 29
17280: PUSH
17281: LD_INT 2
17283: EQUAL
17284: AND
17285: IFFALSE 17302
// begin wait ( 0 0$3 ) ;
17287: LD_INT 105
17289: PPUSH
17290: CALL_OW 67
// vehicleTeleported = 3 ;
17294: LD_ADDR_EXP 29
17298: PUSH
17299: LD_INT 3
17301: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
17302: LD_VAR 0 1
17306: PUSH
17307: LD_INT 10
17309: EQUAL
17310: PUSH
17311: LD_VAR 0 2
17315: PPUSH
17316: CALL_OW 247
17320: PUSH
17321: LD_INT 2
17323: EQUAL
17324: AND
17325: PUSH
17326: LD_VAR 0 2
17330: PPUSH
17331: CALL_OW 255
17335: PUSH
17336: LD_INT 3
17338: EQUAL
17339: AND
17340: IFFALSE 17356
// tpCounter = tpCounter + 1 ;
17342: LD_ADDR_EXP 30
17346: PUSH
17347: LD_EXP 30
17351: PUSH
17352: LD_INT 1
17354: PLUS
17355: ST_TO_ADDR
// end ;
17356: PPOPN 2
17358: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
17359: LD_VAR 0 2
17363: PUSH
17364: LD_INT 21
17366: EQUAL
17367: PUSH
17368: LD_VAR 0 2
17372: PUSH
17373: LD_INT 112
17375: EQUAL
17376: OR
17377: IFFALSE 17555
// if GetSide ( vehicle ) = 3 then
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 255
17388: PUSH
17389: LD_INT 3
17391: EQUAL
17392: IFFALSE 17555
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 264
17403: PUSH
17404: LD_INT 46
17406: EQUAL
17407: PUSH
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 264
17417: PUSH
17418: LD_INT 45
17420: EQUAL
17421: OR
17422: PUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL_OW 264
17432: PUSH
17433: LD_INT 44
17435: EQUAL
17436: OR
17437: IFFALSE 17512
// begin russianTanks = russianTanks ^ vehicle ;
17439: LD_ADDR_EXP 40
17443: PUSH
17444: LD_EXP 40
17448: PUSH
17449: LD_VAR 0 1
17453: ADD
17454: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
17455: LD_EXP 44
17459: PUSH
17460: LD_INT 1
17462: EQUAL
17463: PUSH
17464: LD_EXP 44
17468: PUSH
17469: LD_INT 0
17471: EQUAL
17472: OR
17473: IFFALSE 17487
// ComEnterUnit ( vehicle , ruteleprt ) ;
17475: LD_VAR 0 1
17479: PPUSH
17480: LD_INT 10
17482: PPUSH
17483: CALL_OW 120
// if attackTactic = 2 then
17487: LD_EXP 44
17491: PUSH
17492: LD_INT 2
17494: EQUAL
17495: IFFALSE 17512
// ComMoveXY ( vehicle , 88 , 69 ) ;
17497: LD_VAR 0 1
17501: PPUSH
17502: LD_INT 88
17504: PPUSH
17505: LD_INT 69
17507: PPUSH
17508: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17512: LD_VAR 0 1
17516: PPUSH
17517: CALL_OW 264
17521: PUSH
17522: LD_INT 49
17524: EQUAL
17525: IFFALSE 17555
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17527: LD_ADDR_EXP 41
17531: PUSH
17532: LD_EXP 41
17536: PUSH
17537: LD_VAR 0 1
17541: ADD
17542: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17543: LD_VAR 0 1
17547: PPUSH
17548: LD_INT 137
17550: PPUSH
17551: CALL_OW 120
// end ; end ; end ;
17555: PPOPN 2
17557: END
// on UnitGoesToRed ( unit ) do var i ;
17558: LD_INT 0
17560: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17561: LD_VAR 0 1
17565: PPUSH
17566: CALL_OW 255
17570: PUSH
17571: LD_INT 3
17573: EQUAL
17574: PUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 247
17584: PUSH
17585: LD_INT 2
17587: EQUAL
17588: AND
17589: IFFALSE 17707
// begin if russianTanks > 0 then
17591: LD_EXP 40
17595: PUSH
17596: LD_INT 0
17598: GREATER
17599: IFFALSE 17649
// for i in russianTanks do
17601: LD_ADDR_VAR 0 2
17605: PUSH
17606: LD_EXP 40
17610: PUSH
17611: FOR_IN
17612: IFFALSE 17647
// if i = unit then
17614: LD_VAR 0 2
17618: PUSH
17619: LD_VAR 0 1
17623: EQUAL
17624: IFFALSE 17645
// russianTanks = russianTanks diff [ unit ] ;
17626: LD_ADDR_EXP 40
17630: PUSH
17631: LD_EXP 40
17635: PUSH
17636: LD_VAR 0 1
17640: PUSH
17641: EMPTY
17642: LIST
17643: DIFF
17644: ST_TO_ADDR
17645: GO 17611
17647: POP
17648: POP
// if russianTimeLapsers > 0 then
17649: LD_EXP 41
17653: PUSH
17654: LD_INT 0
17656: GREATER
17657: IFFALSE 17707
// for i in russianTimeLapsers do
17659: LD_ADDR_VAR 0 2
17663: PUSH
17664: LD_EXP 41
17668: PUSH
17669: FOR_IN
17670: IFFALSE 17705
// if i = unit then
17672: LD_VAR 0 2
17676: PUSH
17677: LD_VAR 0 1
17681: EQUAL
17682: IFFALSE 17703
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17684: LD_ADDR_EXP 41
17688: PUSH
17689: LD_EXP 41
17693: PUSH
17694: LD_VAR 0 1
17698: PUSH
17699: EMPTY
17700: LIST
17701: DIFF
17702: ST_TO_ADDR
17703: GO 17669
17705: POP
17706: POP
// end ; end ;
17707: PPOPN 2
17709: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17710: LD_INT 0
17712: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17713: LD_VAR 0 2
17717: PPUSH
17718: CALL_OW 255
17722: PUSH
17723: LD_INT 3
17725: EQUAL
17726: PUSH
17727: LD_VAR 0 2
17731: PPUSH
17732: CALL_OW 257
17736: PUSH
17737: LD_INT 3
17739: EQUAL
17740: AND
17741: PUSH
17742: LD_INT 21
17744: PPUSH
17745: CALL_OW 255
17749: PUSH
17750: LD_INT 3
17752: EQUAL
17753: AND
17754: PUSH
17755: LD_INT 21
17757: PPUSH
17758: CALL_OW 302
17762: AND
17763: IFFALSE 17777
// ComEnterUnit ( human , ru_fact ) ;
17765: LD_VAR 0 2
17769: PPUSH
17770: LD_INT 21
17772: PPUSH
17773: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
17777: LD_VAR 0 2
17781: PPUSH
17782: CALL_OW 257
17786: PUSH
17787: LD_INT 4
17789: EQUAL
17790: PUSH
17791: LD_VAR 0 2
17795: PPUSH
17796: CALL_OW 255
17800: PUSH
17801: LD_INT 3
17803: EQUAL
17804: AND
17805: PUSH
17806: LD_EXP 42
17810: PUSH
17811: LD_INT 0
17813: EQUAL
17814: AND
17815: IFFALSE 17877
// for i in RuScientists do
17817: LD_ADDR_VAR 0 3
17821: PUSH
17822: LD_EXP 35
17826: PUSH
17827: FOR_IN
17828: IFFALSE 17875
// if i = human then
17830: LD_VAR 0 3
17834: PUSH
17835: LD_VAR 0 2
17839: EQUAL
17840: IFFALSE 17873
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17842: LD_VAR 0 3
17846: PPUSH
17847: LD_INT 13
17849: PUSH
17850: LD_INT 14
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 1
17859: PPUSH
17860: LD_INT 2
17862: PPUSH
17863: CALL_OW 12
17867: ARRAY
17868: PPUSH
17869: CALL_OW 113
17873: GO 17827
17875: POP
17876: POP
// end ;
17877: PPOPN 3
17879: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
17884: LD_VAR 0 2
17888: PPUSH
17889: CALL_OW 255
17893: PUSH
17894: LD_INT 3
17896: EQUAL
17897: PUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: CALL_OW 257
17907: PUSH
17908: LD_INT 4
17910: EQUAL
17911: AND
17912: IFFALSE 18054
// for i in RuScientists do
17914: LD_ADDR_VAR 0 3
17918: PUSH
17919: LD_EXP 35
17923: PUSH
17924: FOR_IN
17925: IFFALSE 18052
// if i = human then
17927: LD_VAR 0 3
17931: PUSH
17932: LD_VAR 0 2
17936: EQUAL
17937: IFFALSE 18050
// if IsOk ( rutp ) then
17939: LD_INT 137
17941: PPUSH
17942: CALL_OW 302
17946: IFFALSE 18019
// begin rnd = rand ( 1 , 2 ) ;
17948: LD_ADDR_VAR 0 4
17952: PUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_INT 2
17958: PPUSH
17959: CALL_OW 12
17963: ST_TO_ADDR
// if rnd = 1 then
17964: LD_VAR 0 4
17968: PUSH
17969: LD_INT 1
17971: EQUAL
17972: IFFALSE 17986
// ComEnterUnit ( vehicle , rutp ) ;
17974: LD_VAR 0 1
17978: PPUSH
17979: LD_INT 137
17981: PPUSH
17982: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_INT 13
17993: PUSH
17994: LD_INT 14
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 1
18003: PPUSH
18004: LD_INT 2
18006: PPUSH
18007: CALL_OW 12
18011: ARRAY
18012: PPUSH
18013: CALL_OW 173
// end else
18017: GO 18050
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18019: LD_VAR 0 1
18023: PPUSH
18024: LD_INT 13
18026: PUSH
18027: LD_INT 14
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 1
18036: PPUSH
18037: LD_INT 2
18039: PPUSH
18040: CALL_OW 12
18044: ARRAY
18045: PPUSH
18046: CALL_OW 113
// end ;
18050: GO 17924
18052: POP
18053: POP
// end ; end_of_file
18054: PPOPN 4
18056: END
// every 0 0$1 trigger ruAI = 1 do
18057: LD_EXP 42
18061: PUSH
18062: LD_INT 1
18064: EQUAL
18065: IFFALSE 18164
18067: GO 18069
18069: DISABLE
// begin enable ;
18070: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18071: LD_INT 3
18073: PPUSH
18074: LD_INT 6
18076: PPUSH
18077: LD_INT 9
18079: PPUSH
18080: LD_EXP 39
18084: PPUSH
18085: CALL 14010 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18089: LD_INT 3
18091: PPUSH
18092: LD_INT 4
18094: PPUSH
18095: LD_INT 10
18097: PPUSH
18098: LD_EXP 39
18102: PPUSH
18103: CALL 14010 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18107: LD_INT 3
18109: PPUSH
18110: LD_INT 16
18112: PPUSH
18113: LD_INT 9
18115: PPUSH
18116: LD_INT 91
18118: PPUSH
18119: CALL 14401 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18123: LD_INT 3
18125: PPUSH
18126: LD_INT 17
18128: PPUSH
18129: LD_INT 10
18131: PPUSH
18132: LD_INT 47
18134: PUSH
18135: LD_INT 129
18137: PUSH
18138: LD_INT 135
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL 14401 0 4
// AttackVehicles ( 3 ) ;
18150: LD_INT 3
18152: PPUSH
18153: CALL 15128 0 1
// IntBazooka ( 3 ) ;
18157: LD_INT 3
18159: PPUSH
18160: CALL 15621 0 1
// end ;
18164: END
// every 0 0$1 do
18165: GO 18167
18167: DISABLE
// begin enable ;
18168: ENABLE
// TimeLapsersAI ( 3 ) ;
18169: LD_INT 3
18171: PPUSH
18172: CALL 15426 0 1
// end ;
18176: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18177: LD_INT 4
18179: PPUSH
18180: CALL_OW 303
18184: IFFALSE 18199
18186: GO 18188
18188: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
18189: LD_INT 3
18191: PPUSH
18192: LD_INT 4
18194: PPUSH
18195: CALL 16273 0 2
18199: END
// every 0 0$1 do
18200: GO 18202
18202: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
18203: LD_INT 3
18205: PPUSH
18206: LD_INT 91
18208: PPUSH
18209: LD_INT 3
18211: PPUSH
18212: CALL 13925 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
18216: LD_INT 3
18218: PPUSH
18219: LD_INT 47
18221: PPUSH
18222: LD_INT 3
18224: PPUSH
18225: CALL 13925 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
18229: LD_INT 3
18231: PPUSH
18232: LD_INT 129
18234: PPUSH
18235: LD_INT 3
18237: PPUSH
18238: CALL 13925 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
18242: LD_INT 3
18244: PPUSH
18245: LD_INT 3
18247: PPUSH
18248: LD_INT 3
18250: PPUSH
18251: CALL 13925 0 3
// end ;
18255: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
18256: LD_EXP 28
18260: PUSH
18261: LD_INT 2
18263: EQUAL
18264: PUSH
18265: LD_INT 21
18267: PPUSH
18268: CALL_OW 255
18272: PUSH
18273: LD_INT 3
18275: EQUAL
18276: AND
18277: PUSH
18278: LD_INT 112
18280: PPUSH
18281: CALL_OW 255
18285: PUSH
18286: LD_INT 3
18288: EQUAL
18289: AND
18290: PUSH
18291: LD_INT 21
18293: PPUSH
18294: CALL_OW 302
18298: AND
18299: PUSH
18300: LD_INT 112
18302: PPUSH
18303: CALL_OW 302
18307: AND
18308: PUSH
18309: LD_INT 22
18311: PUSH
18312: LD_INT 3
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 21
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 50
18331: PUSH
18332: EMPTY
18333: LIST
18334: PUSH
18335: LD_INT 3
18337: PUSH
18338: LD_INT 58
18340: PUSH
18341: EMPTY
18342: LIST
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 69
18358: PUSH
18359: LD_INT 18
18361: PPUSH
18362: LD_INT 22
18364: PUSH
18365: LD_INT 3
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 2
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL_OW 70
18390: PUSH
18391: LD_INT 0
18393: EQUAL
18394: DIFF
18395: AND
18396: IFFALSE 18514
18398: GO 18400
18400: DISABLE
// begin enable ;
18401: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18402: LD_INT 3
18404: PPUSH
18405: LD_INT 21
18407: PPUSH
18408: LD_INT 3
18410: PUSH
18411: LD_INT 4
18413: PUSH
18414: LD_INT 4
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: PUSH
18422: LD_OWVAR 67
18426: ARRAY
18427: PPUSH
18428: LD_INT 46
18430: PUSH
18431: LD_INT 45
18433: PUSH
18434: LD_INT 44
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: PPUSH
18442: LD_INT 3
18444: PPUSH
18445: LD_INT 3
18447: PPUSH
18448: LD_INT 24
18450: PPUSH
18451: CALL 14981 0 7
// if russianTimeLapsers = 0 then
18455: LD_EXP 41
18459: PUSH
18460: LD_INT 0
18462: EQUAL
18463: IFFALSE 18514
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18465: LD_INT 3
18467: PPUSH
18468: LD_INT 112
18470: PPUSH
18471: LD_INT 1
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: PUSH
18485: LD_OWVAR 67
18489: ARRAY
18490: PPUSH
18491: LD_INT 49
18493: PUSH
18494: LD_INT 49
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PPUSH
18501: LD_INT 3
18503: PPUSH
18504: LD_INT 3
18506: PPUSH
18507: LD_INT 24
18509: PPUSH
18510: CALL 14981 0 7
// end ;
18514: END
// every 0 0$1 trigger arabianMines do var i ;
18515: LD_EXP 45
18519: IFFALSE 18640
18521: GO 18523
18523: DISABLE
18524: LD_INT 0
18526: PPUSH
// begin enable ;
18527: ENABLE
// for i in arabianMines do
18528: LD_ADDR_VAR 0 1
18532: PUSH
18533: LD_EXP 45
18537: PUSH
18538: FOR_IN
18539: IFFALSE 18638
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18541: LD_INT 22
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 92
18553: PUSH
18554: LD_VAR 0 1
18558: PUSH
18559: LD_INT 1
18561: ARRAY
18562: PUSH
18563: LD_VAR 0 1
18567: PUSH
18568: LD_INT 2
18570: ARRAY
18571: PUSH
18572: LD_INT 3
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PPUSH
18585: CALL_OW 69
18589: IFFALSE 18636
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18591: LD_VAR 0 1
18595: PUSH
18596: LD_INT 1
18598: ARRAY
18599: PPUSH
18600: LD_VAR 0 1
18604: PUSH
18605: LD_INT 2
18607: ARRAY
18608: PPUSH
18609: LD_INT 5
18611: PPUSH
18612: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18616: LD_ADDR_EXP 45
18620: PUSH
18621: LD_EXP 45
18625: PPUSH
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 3
18635: ST_TO_ADDR
// end ; end ;
18636: GO 18538
18638: POP
18639: POP
// end ;
18640: PPOPN 1
18642: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18643: LD_EXP 29
18647: PUSH
18648: LD_INT 4
18650: EQUAL
18651: PUSH
18652: LD_EXP 30
18656: PUSH
18657: LD_INT 6
18659: PUSH
18660: LD_INT 8
18662: PUSH
18663: LD_INT 8
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: PUSH
18671: LD_OWVAR 67
18675: ARRAY
18676: EQUAL
18677: AND
18678: IFFALSE 18696
18680: GO 18682
18682: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18683: LD_INT 10
18685: PPUSH
18686: LD_INT 47
18688: PPUSH
18689: LD_INT 82
18691: PPUSH
18692: CALL_OW 243
18696: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18697: LD_EXP 29
18701: PUSH
18702: LD_INT 4
18704: EQUAL
18705: IFFALSE 18727
18707: GO 18709
18709: DISABLE
// begin enable ;
18710: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18711: LD_ADDR_EXP 44
18715: PUSH
18716: LD_INT 1
18718: PPUSH
18719: LD_INT 2
18721: PPUSH
18722: CALL_OW 12
18726: ST_TO_ADDR
// end ; end_of_file
18727: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18728: LD_EXP 35
18732: PUSH
18733: EMPTY
18734: EQUAL
18735: PUSH
18736: LD_INT 3
18738: PPUSH
18739: CALL_OW 301
18743: AND
18744: IFFALSE 18949
18746: GO 18748
18748: DISABLE
// begin if sciCounter = 0 then
18749: LD_EXP 36
18753: PUSH
18754: LD_INT 0
18756: EQUAL
18757: IFFALSE 18783
// begin Say ( JMM , D7a-JMM-1 ) ;
18759: LD_EXP 1
18763: PPUSH
18764: LD_STRING D7a-JMM-1
18766: PPUSH
18767: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18771: LD_EXP 22
18775: PPUSH
18776: LD_STRING D7a-Pow-1
18778: PPUSH
18779: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18783: LD_EXP 36
18787: PUSH
18788: LD_INT 0
18790: GREATER
18791: PUSH
18792: LD_EXP 36
18796: PUSH
18797: LD_INT 6
18799: LESS
18800: AND
18801: IFFALSE 18827
// begin Say ( JMM , D7b-JMM-1 ) ;
18803: LD_EXP 1
18807: PPUSH
18808: LD_STRING D7b-JMM-1
18810: PPUSH
18811: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18815: LD_EXP 22
18819: PPUSH
18820: LD_STRING D7b-Pow-1
18822: PPUSH
18823: CALL_OW 94
// end ; if sciCounter = 6 then
18827: LD_EXP 36
18831: PUSH
18832: LD_INT 6
18834: EQUAL
18835: IFFALSE 18945
// begin Say ( JMM , D7c-JMM-1 ) ;
18837: LD_EXP 1
18841: PPUSH
18842: LD_STRING D7c-JMM-1
18844: PPUSH
18845: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18849: LD_EXP 22
18853: PPUSH
18854: LD_STRING D7c-Pow-1
18856: PPUSH
18857: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18861: LD_EXP 1
18865: PPUSH
18866: LD_STRING D7d-JMM-1
18868: PPUSH
18869: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18873: LD_EXP 22
18877: PPUSH
18878: LD_STRING D7d-Pow-1
18880: PPUSH
18881: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18885: LD_EXP 1
18889: PPUSH
18890: LD_STRING D7d-JMM-2
18892: PPUSH
18893: CALL_OW 88
// if askSiberite = 1 then
18897: LD_EXP 33
18901: PUSH
18902: LD_INT 1
18904: EQUAL
18905: IFFALSE 18921
// begin Say ( JMM , D7d-JMM-2a ) ;
18907: LD_EXP 1
18911: PPUSH
18912: LD_STRING D7d-JMM-2a
18914: PPUSH
18915: CALL_OW 88
// end else
18919: GO 18933
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18921: LD_EXP 22
18925: PPUSH
18926: LD_STRING D7d-Pow-2
18928: PPUSH
18929: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18933: LD_EXP 22
18937: PPUSH
18938: LD_STRING D7d-Pow-2a
18940: PPUSH
18941: CALL_OW 94
// end ; FinishMission ;
18945: CALL 18950 0 0
// end ;
18949: END
// export function FinishMission ; begin
18950: LD_INT 0
18952: PPUSH
// if teleportExplored = 1 then
18953: LD_EXP 34
18957: PUSH
18958: LD_INT 1
18960: EQUAL
18961: IFFALSE 18975
// AddMedal ( Teleport , 1 ) else
18963: LD_STRING Teleport
18965: PPUSH
18966: LD_INT 1
18968: PPUSH
18969: CALL_OW 101
18973: GO 18986
// AddMedal ( Teleport , - 1 ) ;
18975: LD_STRING Teleport
18977: PPUSH
18978: LD_INT 1
18980: NEG
18981: PPUSH
18982: CALL_OW 101
// if sciCounter > 2 then
18986: LD_EXP 36
18990: PUSH
18991: LD_INT 2
18993: GREATER
18994: IFFALSE 19008
// AddMedal ( Materials , 1 ) else
18996: LD_STRING Materials
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 101
19006: GO 19019
// AddMedal ( Materials , - 1 ) ;
19008: LD_STRING Materials
19010: PPUSH
19011: LD_INT 1
19013: NEG
19014: PPUSH
19015: CALL_OW 101
// if sciCounter = 6 then
19019: LD_EXP 36
19023: PUSH
19024: LD_INT 6
19026: EQUAL
19027: IFFALSE 19051
// begin AddMedal ( Scientists , 1 ) ;
19029: LD_STRING Scientists
19031: PPUSH
19032: LD_INT 1
19034: PPUSH
19035: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19039: LD_INT 1
19041: PPUSH
19042: LD_STRING 12_SciDed_1
19044: PPUSH
19045: CALL_OW 39
// end else
19049: GO 19072
// begin AddMedal ( Scientists , - 1 ) ;
19051: LD_STRING Scientists
19053: PPUSH
19054: LD_INT 1
19056: NEG
19057: PPUSH
19058: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19062: LD_INT 0
19064: PPUSH
19065: LD_STRING 12_SciDed_1
19067: PPUSH
19068: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19072: LD_EXP 32
19076: PPUSH
19077: LD_STRING 12_MainDepositFake_1
19079: PPUSH
19080: CALL_OW 39
// GiveMedals ( MAIN ) ;
19084: LD_STRING MAIN
19086: PPUSH
19087: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19091: LD_INT 22
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 21
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 25
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 25
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 25
19136: PUSH
19137: LD_INT 3
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 25
19146: PUSH
19147: LD_INT 4
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 25
19156: PUSH
19157: LD_INT 5
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 25
19166: PUSH
19167: LD_INT 8
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: PPUSH
19193: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19197: LD_EXP 1
19201: PPUSH
19202: LD_EXP 47
19206: PUSH
19207: LD_STRING JMM
19209: STR
19210: PPUSH
19211: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19215: LD_EXP 7
19219: PPUSH
19220: LD_EXP 47
19224: PUSH
19225: LD_STRING Brown
19227: STR
19228: PPUSH
19229: CALL 13079 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19233: LD_EXP 3
19237: PPUSH
19238: LD_EXP 47
19242: PUSH
19243: LD_STRING Donaldson
19245: STR
19246: PPUSH
19247: CALL 13079 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19251: LD_EXP 4
19255: PPUSH
19256: LD_EXP 47
19260: PUSH
19261: LD_STRING Bobby
19263: STR
19264: PPUSH
19265: CALL 13079 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19269: LD_EXP 5
19273: PPUSH
19274: LD_EXP 47
19278: PUSH
19279: LD_STRING Cyrus
19281: STR
19282: PPUSH
19283: CALL 13079 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19287: LD_EXP 2
19291: PPUSH
19292: LD_EXP 47
19296: PUSH
19297: LD_STRING Lisa
19299: STR
19300: PPUSH
19301: CALL 13079 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19305: LD_EXP 12
19309: PPUSH
19310: LD_EXP 47
19314: PUSH
19315: LD_STRING Frank
19317: STR
19318: PPUSH
19319: CALL 13079 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19323: LD_EXP 13
19327: PPUSH
19328: LD_EXP 47
19332: PUSH
19333: LD_STRING Kikuchi
19335: STR
19336: PPUSH
19337: CALL 13079 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19341: LD_EXP 9
19345: PPUSH
19346: LD_EXP 47
19350: PUSH
19351: LD_STRING Houten
19353: STR
19354: PPUSH
19355: CALL 13079 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19359: LD_EXP 11
19363: PPUSH
19364: LD_EXP 47
19368: PUSH
19369: LD_STRING Gary
19371: STR
19372: PPUSH
19373: CALL 13079 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19377: LD_EXP 10
19381: PPUSH
19382: LD_EXP 47
19386: PUSH
19387: LD_STRING Cornell
19389: STR
19390: PPUSH
19391: CALL 13079 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19395: LD_EXP 6
19399: PPUSH
19400: LD_EXP 47
19404: PUSH
19405: LD_STRING Denis
19407: STR
19408: PPUSH
19409: CALL 13079 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19413: LD_EXP 8
19417: PPUSH
19418: LD_EXP 47
19422: PUSH
19423: LD_STRING Gladstone
19425: STR
19426: PPUSH
19427: CALL 13079 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19431: LD_INT 50
19433: PUSH
19434: EMPTY
19435: LIST
19436: PUSH
19437: LD_INT 22
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 23
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 21
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: LD_INT 25
19472: PUSH
19473: LD_INT 1
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 25
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 25
19492: PUSH
19493: LD_INT 3
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 25
19502: PUSH
19503: LD_INT 4
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 25
19512: PUSH
19513: LD_INT 5
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 25
19522: PUSH
19523: LD_INT 8
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 69
19550: PUSH
19551: LD_EXP 1
19555: PUSH
19556: LD_EXP 7
19560: PUSH
19561: LD_EXP 3
19565: PUSH
19566: LD_EXP 4
19570: PUSH
19571: LD_EXP 5
19575: PUSH
19576: LD_EXP 2
19580: PUSH
19581: LD_EXP 12
19585: PUSH
19586: LD_EXP 8
19590: PUSH
19591: LD_EXP 13
19595: PUSH
19596: LD_EXP 6
19600: PUSH
19601: LD_EXP 9
19605: PUSH
19606: LD_EXP 11
19610: PUSH
19611: LD_EXP 10
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: DIFF
19631: PPUSH
19632: LD_STRING 12_other_survivors
19634: PPUSH
19635: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19639: LD_INT 50
19641: PUSH
19642: EMPTY
19643: LIST
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 23
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 21
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: LD_INT 25
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 25
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 25
19700: PUSH
19701: LD_INT 3
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 25
19710: PUSH
19711: LD_INT 4
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 25
19720: PUSH
19721: LD_INT 5
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 25
19730: PUSH
19731: LD_INT 8
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: PPUSH
19754: CALL_OW 69
19758: PPUSH
19759: LD_STRING 12_kurt_squad
19761: PPUSH
19762: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
19766: LD_STRING 11_others
19768: PPUSH
19769: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
19773: LD_EXP 14
19777: PPUSH
19778: LD_STRING 11_others
19780: PPUSH
19781: CALL_OW 38
// YouWin ;
19785: CALL_OW 103
// end ; end_of_file
19789: LD_VAR 0 1
19793: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19794: LD_EXP 1
19798: PPUSH
19799: CALL_OW 301
19803: IFFALSE 19815
19805: GO 19807
19807: DISABLE
// YouLost ( JMM ) ; end_of_file
19808: LD_STRING JMM
19810: PPUSH
19811: CALL_OW 104
19815: END
// every 0 0$01 do
19816: GO 19818
19818: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19819: LD_INT 1050
19821: PPUSH
19822: CALL_OW 67
// if cratesSpawned < 6 then
19826: LD_EXP 46
19830: PUSH
19831: LD_INT 6
19833: LESS
19834: IFFALSE 19871
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19836: LD_INT 3
19838: PPUSH
19839: LD_INT 5
19841: PPUSH
19842: CALL_OW 12
19846: PPUSH
19847: LD_INT 21
19849: PPUSH
19850: LD_INT 1
19852: PPUSH
19853: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19857: LD_ADDR_EXP 46
19861: PUSH
19862: LD_EXP 46
19866: PUSH
19867: LD_INT 1
19869: PLUS
19870: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19871: LD_EXP 46
19875: PUSH
19876: LD_INT 6
19878: GREATEREQUAL
19879: PUSH
19880: LD_EXP 46
19884: PUSH
19885: LD_INT 12
19887: LESS
19888: AND
19889: IFFALSE 19933
// begin wait ( 0 0$30 ) ;
19891: LD_INT 1050
19893: PPUSH
19894: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19898: LD_INT 3
19900: PPUSH
19901: LD_INT 5
19903: PPUSH
19904: CALL_OW 12
19908: PPUSH
19909: LD_INT 21
19911: PPUSH
19912: LD_INT 1
19914: PPUSH
19915: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19919: LD_ADDR_EXP 46
19923: PUSH
19924: LD_EXP 46
19928: PUSH
19929: LD_INT 1
19931: PLUS
19932: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19933: LD_EXP 46
19937: PUSH
19938: LD_INT 12
19940: GREATEREQUAL
19941: IFFALSE 19985
// begin wait ( 1 1$30 ) ;
19943: LD_INT 3150
19945: PPUSH
19946: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19950: LD_INT 3
19952: PPUSH
19953: LD_INT 5
19955: PPUSH
19956: CALL_OW 12
19960: PPUSH
19961: LD_INT 21
19963: PPUSH
19964: LD_INT 1
19966: PPUSH
19967: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19971: LD_ADDR_EXP 46
19975: PUSH
19976: LD_EXP 46
19980: PUSH
19981: LD_INT 1
19983: PLUS
19984: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
19985: LD_EXP 46
19989: PUSH
19990: LD_INT 15
19992: GREATEREQUAL
19993: IFFALSE 19819
// end ;
19995: END
