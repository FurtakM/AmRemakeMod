// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 44
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 43
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// eventVar1 = 0 ;
 159: LD_ADDR_EXP 47
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// mission_prefix = 12_ ;
 167: LD_ADDR_EXP 46
 171: PUSH
 172: LD_STRING 12_
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 48
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareNature ;
 183: CALL 15613 0 0
// PrepareDifficulty ;
 187: CALL 12559 0 0
// PrepareVehicles ;
 191: CALL 1558 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 195: LD_INT 4
 197: PPUSH
 198: LD_INT 0
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL 1134 0 4
// PrepareAmericanHeroes ;
 211: CALL 549 0 0
// PrepareRussianCommander ;
 215: CALL 2877 0 0
// PrepareWestBase ;
 219: CALL 3389 0 0
// PrepareEastBase ;
 223: CALL 2949 0 0
// PrepareOtherRussians ;
 227: CALL 3501 0 0
// end ;
 231: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 232: LD_EXP 48
 236: PUSH
 237: LD_INT 1
 239: EQUAL
 240: IFFALSE 546
 242: GO 244
 244: DISABLE
 245: LD_INT 0
 247: PPUSH
// begin enable ;
 248: ENABLE
// fogoff ( true ) ;
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 256: LD_ADDR_VAR 0 1
 260: PUSH
 261: LD_INT 22
 263: PUSH
 264: LD_INT 1
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: LD_INT 21
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PPUSH
 285: CALL_OW 69
 289: PUSH
 290: FOR_IN
 291: IFFALSE 307
// SetLives ( i , 1000 ) ;
 293: LD_VAR 0 1
 297: PPUSH
 298: LD_INT 1000
 300: PPUSH
 301: CALL_OW 234
 305: GO 290
 307: POP
 308: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 309: LD_ADDR_VAR 0 1
 313: PUSH
 314: LD_INT 22
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 2
 326: PUSH
 327: LD_INT 30
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 30
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PPUSH
 356: CALL_OW 69
 360: PUSH
 361: FOR_IN
 362: IFFALSE 386
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 364: LD_VAR 0 1
 368: PPUSH
 369: CALL_OW 274
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_INT 9999
 379: PPUSH
 380: CALL_OW 277
 384: GO 361
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 2
 405: PUSH
 406: LD_INT 30
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 30
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PPUSH
 435: CALL_OW 69
 439: PUSH
 440: FOR_IN
 441: IFFALSE 465
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 443: LD_VAR 0 1
 447: PPUSH
 448: CALL_OW 274
 452: PPUSH
 453: LD_INT 2
 455: PPUSH
 456: LD_INT 9999
 458: PPUSH
 459: CALL_OW 277
 463: GO 440
 465: POP
 466: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 467: LD_ADDR_VAR 0 1
 471: PUSH
 472: LD_INT 22
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: LD_INT 30
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PUSH
 495: LD_INT 30
 497: PUSH
 498: LD_INT 1
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: LIST
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PPUSH
 514: CALL_OW 69
 518: PUSH
 519: FOR_IN
 520: IFFALSE 544
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 522: LD_VAR 0 1
 526: PPUSH
 527: CALL_OW 274
 531: PPUSH
 532: LD_INT 3
 534: PPUSH
 535: LD_INT 9999
 537: PPUSH
 538: CALL_OW 277
 542: GO 519
 544: POP
 545: POP
// end ; end_of_file
 546: PPOPN 1
 548: END
// export function PrepareAmericanHeroes ; begin
 549: LD_INT 0
 551: PPUSH
// uc_side = 1 ;
 552: LD_ADDR_OWVAR 20
 556: PUSH
 557: LD_INT 1
 559: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 560: LD_ADDR_EXP 14
 564: PUSH
 565: LD_STRING 11_others
 567: PPUSH
 568: CALL_OW 31
 572: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 573: LD_ADDR_EXP 14
 577: PUSH
 578: LD_EXP 14
 582: PUSH
 583: LD_STRING 11c_others
 585: PPUSH
 586: CALL_OW 31
 590: ADD
 591: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_STRING 11_JMM
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL 12198 0 2
 607: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 608: LD_EXP 1
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 22
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 21
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 58
 647: PUSH
 648: EMPTY
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: PPUSH
 656: CALL_OW 69
 660: PUSH
 661: LD_INT 1
 663: ARRAY
 664: PPUSH
 665: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 669: LD_STRING 11_Lisa
 671: PPUSH
 672: CALL_OW 28
 676: PUSH
 677: LD_INT 1
 679: EQUAL
 680: IFFALSE 727
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 682: LD_ADDR_EXP 2
 686: PUSH
 687: LD_STRING 11_Lisa
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 12198 0 2
 697: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 698: LD_EXP 2
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 710: LD_EXP 2
 714: PPUSH
 715: LD_INT 4
 717: PPUSH
 718: LD_INT 0
 720: PPUSH
 721: CALL_OW 49
// end else
 725: GO 743
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 727: LD_INT 4
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 1134 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 743: LD_STRING 11_Donaldson
 745: PPUSH
 746: CALL_OW 28
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: IFFALSE 801
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 756: LD_ADDR_EXP 3
 760: PUSH
 761: LD_STRING 11_Donaldson
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: CALL 12198 0 2
 771: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 784: LD_EXP 3
 788: PPUSH
 789: LD_INT 4
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// end else
 799: GO 817
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 801: LD_INT 4
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL 1134 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 817: LD_STRING 11_Cyrus
 819: PPUSH
 820: CALL_OW 28
 824: PUSH
 825: LD_INT 1
 827: EQUAL
 828: IFFALSE 875
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 830: LD_ADDR_EXP 5
 834: PUSH
 835: LD_STRING 11_Cyrus
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL 12198 0 2
 845: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 846: LD_EXP 5
 850: PPUSH
 851: LD_INT 1
 853: PPUSH
 854: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 858: LD_EXP 5
 862: PPUSH
 863: LD_INT 4
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
// end else
 873: GO 891
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 875: LD_INT 4
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL 1134 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 891: LD_STRING 11_Denis
 893: PPUSH
 894: CALL_OW 28
 898: PUSH
 899: LD_INT 1
 901: EQUAL
 902: IFFALSE 949
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 904: LD_ADDR_EXP 6
 908: PUSH
 909: LD_STRING 11_Denis
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 12198 0 2
 919: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 920: LD_EXP 6
 924: PPUSH
 925: LD_INT 4
 927: PPUSH
 928: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 932: LD_EXP 6
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// end else
 947: GO 965
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 949: LD_INT 4
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL 1134 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 965: LD_STRING 11_Frank
 967: PPUSH
 968: CALL_OW 28
 972: PUSH
 973: LD_INT 1
 975: EQUAL
 976: IFFALSE 1023
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 978: LD_ADDR_EXP 12
 982: PUSH
 983: LD_STRING 11_Frank
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL 12198 0 2
 993: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 994: LD_EXP 12
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1006: LD_EXP 12
1010: PPUSH
1011: LD_INT 4
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 49
// end else
1021: GO 1039
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1023: LD_INT 4
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL 1134 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1039: LD_STRING 11_Cornell
1041: PPUSH
1042: CALL_OW 28
1046: PUSH
1047: LD_INT 1
1049: EQUAL
1050: IFFALSE 1097
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: LD_STRING 11_Cornell
1059: PPUSH
1060: LD_INT 1
1062: PPUSH
1063: CALL 12198 0 2
1067: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1068: LD_EXP 10
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1080: LD_EXP 10
1084: PPUSH
1085: LD_INT 4
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 49
// end else
1095: GO 1113
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1097: LD_INT 4
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 1
1105: PPUSH
1106: LD_INT 0
1108: PPUSH
1109: CALL 1134 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1113: LD_ADDR_EXP 22
1117: PUSH
1118: LD_STRING Powell
1120: PPUSH
1121: LD_INT 0
1123: PPUSH
1124: CALL 12198 0 2
1128: ST_TO_ADDR
// end ;
1129: LD_VAR 0 1
1133: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1134: LD_INT 0
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
// if mech = 1 then
1141: LD_VAR 0 4
1145: PUSH
1146: LD_INT 1
1148: EQUAL
1149: IFFALSE 1384
// begin if others11 > 0 then
1151: LD_EXP 14
1155: PUSH
1156: LD_INT 0
1158: GREATER
1159: IFFALSE 1324
// begin for i := 1 to others11 - 1 do
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: DOUBLE
1167: LD_INT 1
1169: DEC
1170: ST_TO_ADDR
1171: LD_EXP 14
1175: PUSH
1176: LD_INT 1
1178: MINUS
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1261
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1183: LD_EXP 14
1187: PUSH
1188: LD_VAR 0 6
1192: ARRAY
1193: PPUSH
1194: LD_INT 3
1196: PPUSH
1197: CALL_OW 259
1201: PUSH
1202: LD_EXP 14
1206: PUSH
1207: LD_VAR 0 6
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: PPUSH
1217: LD_INT 3
1219: PPUSH
1220: CALL_OW 259
1224: LESS
1225: IFFALSE 1259
// begin mecha = others11 [ i + 1 ] ;
1227: LD_ADDR_VAR 0 9
1231: PUSH
1232: LD_EXP 14
1236: PUSH
1237: LD_VAR 0 6
1241: PUSH
1242: LD_INT 1
1244: PLUS
1245: ARRAY
1246: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1247: LD_VAR 0 9
1251: PPUSH
1252: LD_INT 3
1254: PPUSH
1255: CALL_OW 336
// end ; end ;
1259: GO 1180
1261: POP
1262: POP
// if spawnMode = 1 then
1263: LD_VAR 0 3
1267: PUSH
1268: LD_INT 1
1270: EQUAL
1271: IFFALSE 1292
// PlaceUnitArea ( mecha , area , false ) else
1273: LD_VAR 0 9
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
1290: GO 1306
// PlaceHumanInUnit ( mecha , veh ) ;
1292: LD_VAR 0 9
1296: PPUSH
1297: LD_VAR 0 2
1301: PPUSH
1302: CALL_OW 52
// others11 = others11 diff mecha ;
1306: LD_ADDR_EXP 14
1310: PUSH
1311: LD_EXP 14
1315: PUSH
1316: LD_VAR 0 9
1320: DIFF
1321: ST_TO_ADDR
// end else
1322: GO 1382
// begin hc_name =  ;
1324: LD_ADDR_OWVAR 26
1328: PUSH
1329: LD_STRING 
1331: ST_TO_ADDR
// hc_gallery =  ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1340: LD_INT 0
1342: PPUSH
1343: LD_INT 7
1345: PPUSH
1346: LD_INT 9
1348: PPUSH
1349: CALL_OW 12
1353: PPUSH
1354: CALL_OW 383
// un = CreateHuman ;
1358: LD_ADDR_VAR 0 7
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1368: LD_VAR 0 7
1372: PPUSH
1373: LD_VAR 0 2
1377: PPUSH
1378: CALL_OW 52
// end ; end else
1382: GO 1553
// begin if others11 > 0 then
1384: LD_EXP 14
1388: PUSH
1389: LD_INT 0
1391: GREATER
1392: IFFALSE 1465
// begin if spawnMode = 1 then
1394: LD_VAR 0 3
1398: PUSH
1399: LD_INT 1
1401: EQUAL
1402: IFFALSE 1427
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1404: LD_EXP 14
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: LD_VAR 0 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL_OW 49
1425: GO 1445
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1427: LD_EXP 14
1431: PUSH
1432: LD_INT 1
1434: ARRAY
1435: PPUSH
1436: LD_VAR 0 2
1440: PPUSH
1441: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1445: LD_ADDR_EXP 14
1449: PUSH
1450: LD_EXP 14
1454: PPUSH
1455: LD_INT 1
1457: PPUSH
1458: CALL_OW 3
1462: ST_TO_ADDR
// end else
1463: GO 1553
// begin hc_name =  ;
1465: LD_ADDR_OWVAR 26
1469: PUSH
1470: LD_STRING 
1472: ST_TO_ADDR
// hc_gallery =  ;
1473: LD_ADDR_OWVAR 33
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1481: LD_INT 0
1483: PPUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 4
1507: PPUSH
1508: CALL_OW 12
1512: ARRAY
1513: PPUSH
1514: LD_INT 7
1516: PPUSH
1517: LD_INT 9
1519: PPUSH
1520: CALL_OW 12
1524: PPUSH
1525: CALL_OW 380
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 7
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1539: LD_VAR 0 7
1543: PPUSH
1544: LD_VAR 0 2
1548: PPUSH
1549: CALL_OW 52
// end ; end ; end ;
1553: LD_VAR 0 5
1557: RET
// export function PrepareVehicles ; var veh ; begin
1558: LD_INT 0
1560: PPUSH
1561: PPUSH
// uc_side = 1 ;
1562: LD_ADDR_OWVAR 20
1566: PUSH
1567: LD_INT 1
1569: ST_TO_ADDR
// uc_nation = 1 ;
1570: LD_ADDR_OWVAR 21
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1578: LD_ADDR_OWVAR 37
1582: PUSH
1583: LD_INT 3
1585: ST_TO_ADDR
// vc_engine = 3 ;
1586: LD_ADDR_OWVAR 39
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_control = 3 ;
1594: LD_ADDR_OWVAR 38
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1602: LD_ADDR_OWVAR 40
1606: PUSH
1607: LD_INT 4
1609: ST_TO_ADDR
// veh = CreateVehicle ;
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: CALL_OW 45
1619: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1620: LD_VAR 0 2
1624: PPUSH
1625: LD_INT 4
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 49
// vc_weapon = us_double_gun ;
1635: LD_ADDR_OWVAR 40
1639: PUSH
1640: LD_INT 5
1642: ST_TO_ADDR
// vc_control = 1 ;
1643: LD_ADDR_OWVAR 38
1647: PUSH
1648: LD_INT 1
1650: ST_TO_ADDR
// veh = CreateVehicle ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: CALL_OW 45
1660: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL_OW 49
// vc_weapon = us_light_gun ;
1676: LD_ADDR_OWVAR 40
1680: PUSH
1681: LD_INT 3
1683: ST_TO_ADDR
// vc_control = 3 ;
1684: LD_ADDR_OWVAR 38
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1692: LD_ADDR_OWVAR 37
1696: PUSH
1697: LD_INT 2
1699: ST_TO_ADDR
// veh = CreateVehicle ;
1700: LD_ADDR_VAR 0 2
1704: PUSH
1705: CALL_OW 45
1709: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1710: LD_VAR 0 2
1714: PPUSH
1715: LD_INT 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1725: LD_ADDR_OWVAR 40
1729: PUSH
1730: LD_INT 4
1732: ST_TO_ADDR
// veh = CreateVehicle ;
1733: LD_ADDR_VAR 0 2
1737: PUSH
1738: CALL_OW 45
1742: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1743: LD_VAR 0 2
1747: PPUSH
1748: LD_INT 4
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 49
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PowellSupport1 ; var veh , un ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1784: LD_STRING 11_Brown
1786: PPUSH
1787: CALL_OW 28
1791: PUSH
1792: LD_INT 1
1794: EQUAL
1795: IFFALSE 1842
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1797: LD_ADDR_EXP 7
1801: PUSH
1802: LD_STRING 11_Brown
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: CALL 12198 0 2
1812: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1813: LD_EXP 7
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1825: LD_EXP 7
1829: PPUSH
1830: LD_INT 4
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 49
// end else
1840: GO 1858
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1842: LD_INT 4
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL 1134 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1858: LD_STRING 11_Gary
1860: PPUSH
1861: CALL_OW 28
1865: PUSH
1866: LD_INT 1
1868: EQUAL
1869: IFFALSE 1916
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1871: LD_ADDR_EXP 11
1875: PUSH
1876: LD_STRING 11_Gary
1878: PPUSH
1879: LD_INT 1
1881: PPUSH
1882: CALL 12198 0 2
1886: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1887: LD_EXP 11
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1899: LD_EXP 11
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 49
// end else
1914: GO 1932
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1916: LD_INT 4
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL 1134 0 4
// end ; vc_chassis = us_medium_tracked ;
1932: LD_ADDR_OWVAR 37
1936: PUSH
1937: LD_INT 3
1939: ST_TO_ADDR
// vc_engine = 3 ;
1940: LD_ADDR_OWVAR 39
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_control = 1 ;
1948: LD_ADDR_OWVAR 38
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// vc_weapon = us_crane ;
1956: LD_ADDR_OWVAR 40
1960: PUSH
1961: LD_INT 13
1963: ST_TO_ADDR
// veh = CreateVehicle ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: CALL_OW 45
1973: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_INT 4
1981: PPUSH
1982: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1986: LD_VAR 0 2
1990: PPUSH
1991: LD_INT 4
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2001: LD_INT 4
2003: PPUSH
2004: LD_VAR 0 2
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: CALL 1134 0 4
// vc_weapon = 9 ;
2019: LD_ADDR_OWVAR 40
2023: PUSH
2024: LD_INT 9
2026: ST_TO_ADDR
// veh = CreateVehicle ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: CALL_OW 45
2036: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2037: LD_VAR 0 2
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_INT 4
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2064: LD_INT 4
2066: PPUSH
2067: LD_VAR 0 2
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 1134 0 4
// vc_control = 3 ;
2082: LD_ADDR_OWVAR 38
2086: PUSH
2087: LD_INT 3
2089: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2090: LD_ADDR_OWVAR 40
2094: PUSH
2095: LD_INT 12
2097: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2098: LD_ADDR_EXP 15
2102: PUSH
2103: CALL_OW 45
2107: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2108: LD_ADDR_EXP 16
2112: PUSH
2113: CALL_OW 45
2117: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2118: LD_EXP 15
2122: PPUSH
2123: LD_INT 4
2125: PPUSH
2126: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2130: LD_EXP 16
2134: PPUSH
2135: LD_INT 4
2137: PPUSH
2138: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2142: LD_EXP 15
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: LD_INT 0
2152: PPUSH
2153: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2157: LD_EXP 16
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2172: LD_EXP 15
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: LD_INT 100
2182: PPUSH
2183: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2187: LD_EXP 16
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 80
2197: PPUSH
2198: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2202: LD_EXP 16
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_INT 20
2212: PPUSH
2213: CALL_OW 291
// end ;
2217: LD_VAR 0 1
2221: RET
// export function PowellSupport2 ; var veh , un ; begin
2222: LD_INT 0
2224: PPUSH
2225: PPUSH
2226: PPUSH
// uc_side = 1 ;
2227: LD_ADDR_OWVAR 20
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// uc_nation = 1 ;
2235: LD_ADDR_OWVAR 21
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2243: LD_ADDR_OWVAR 37
2247: PUSH
2248: LD_INT 2
2250: ST_TO_ADDR
// vc_engine = 3 ;
2251: LD_ADDR_OWVAR 39
2255: PUSH
2256: LD_INT 3
2258: ST_TO_ADDR
// vc_control = 3 ;
2259: LD_ADDR_OWVAR 38
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2267: LD_ADDR_OWVAR 40
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// veh = CreateVehicle ;
2275: LD_ADDR_VAR 0 2
2279: PUSH
2280: CALL_OW 45
2284: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2285: LD_VAR 0 2
2289: PPUSH
2290: LD_INT 4
2292: PPUSH
2293: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_INT 4
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// vc_control = 1 ;
2312: LD_ADDR_OWVAR 38
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2320: LD_ADDR_OWVAR 37
2324: PUSH
2325: LD_INT 2
2327: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2328: LD_ADDR_OWVAR 40
2332: PUSH
2333: LD_INT 5
2335: ST_TO_ADDR
// veh = CreateVehicle ;
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: CALL_OW 45
2345: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 4
2353: PPUSH
2354: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2358: LD_VAR 0 2
2362: PPUSH
2363: LD_INT 4
2365: PPUSH
2366: LD_INT 0
2368: PPUSH
2369: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2373: LD_STRING 11_Bobby
2375: PPUSH
2376: CALL_OW 28
2380: PUSH
2381: LD_INT 1
2383: EQUAL
2384: IFFALSE 2430
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2386: LD_ADDR_EXP 4
2390: PUSH
2391: LD_STRING 11_Bobby
2393: PPUSH
2394: LD_INT 1
2396: PPUSH
2397: CALL 12198 0 2
2401: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2402: LD_EXP 4
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2414: LD_EXP 4
2418: PPUSH
2419: LD_VAR 0 2
2423: PPUSH
2424: CALL_OW 52
// end else
2428: GO 2448
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2430: LD_INT 0
2432: PPUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_INT 2
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL 1134 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2448: LD_STRING 11_Houten
2450: PPUSH
2451: CALL_OW 28
2455: PUSH
2456: LD_INT 1
2458: EQUAL
2459: IFFALSE 2506
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2461: LD_ADDR_EXP 9
2465: PUSH
2466: LD_STRING 11_Houten
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL 12198 0 2
2476: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2477: LD_EXP 9
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2489: LD_EXP 9
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end else
2504: GO 2522
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2506: LD_INT 4
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 1134 0 4
// end ; vc_control = 3 ;
2522: LD_ADDR_OWVAR 38
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2530: LD_ADDR_OWVAR 40
2534: PUSH
2535: LD_INT 12
2537: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2538: LD_ADDR_EXP 17
2542: PUSH
2543: CALL_OW 45
2547: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2548: LD_EXP 17
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 233
// amCargo4 = CreateVehicle ;
2560: LD_ADDR_EXP 18
2564: PUSH
2565: CALL_OW 45
2569: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2570: LD_EXP 18
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: CALL_OW 233
// amCargo5 = CreateVehicle ;
2582: LD_ADDR_EXP 19
2586: PUSH
2587: CALL_OW 45
2591: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2592: LD_EXP 19
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2604: LD_EXP 17
2608: PPUSH
2609: LD_INT 4
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2619: LD_EXP 18
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2634: LD_EXP 19
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2649: LD_EXP 17
2653: PPUSH
2654: LD_INT 1
2656: PPUSH
2657: LD_INT 100
2659: PPUSH
2660: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2664: LD_EXP 18
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 100
2674: PPUSH
2675: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2679: LD_EXP 19
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: LD_INT 100
2689: PPUSH
2690: CALL_OW 291
// end ;
2694: LD_VAR 0 1
2698: RET
// export function PowellSupport3 ; var veh , un ; begin
2699: LD_INT 0
2701: PPUSH
2702: PPUSH
2703: PPUSH
// uc_side = 1 ;
2704: LD_ADDR_OWVAR 20
2708: PUSH
2709: LD_INT 1
2711: ST_TO_ADDR
// uc_nation = 1 ;
2712: LD_ADDR_OWVAR 21
2716: PUSH
2717: LD_INT 1
2719: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: LD_INT 1
2728: PPUSH
2729: LD_INT 0
2731: PPUSH
2732: CALL 1134 0 4
// vc_chassis = us_medium_wheeled ;
2736: LD_ADDR_OWVAR 37
2740: PUSH
2741: LD_INT 2
2743: ST_TO_ADDR
// vc_engine = 3 ;
2744: LD_ADDR_OWVAR 39
2748: PUSH
2749: LD_INT 3
2751: ST_TO_ADDR
// vc_control = 3 ;
2752: LD_ADDR_OWVAR 38
2756: PUSH
2757: LD_INT 3
2759: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2760: LD_ADDR_OWVAR 40
2764: PUSH
2765: LD_INT 12
2767: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2768: LD_ADDR_EXP 20
2772: PUSH
2773: CALL_OW 45
2777: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2778: LD_ADDR_EXP 21
2782: PUSH
2783: CALL_OW 45
2787: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2788: LD_EXP 20
2792: PPUSH
2793: LD_INT 4
2795: PPUSH
2796: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2800: LD_EXP 21
2804: PPUSH
2805: LD_INT 4
2807: PPUSH
2808: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2812: LD_EXP 20
2816: PPUSH
2817: LD_INT 4
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2827: LD_EXP 21
2831: PPUSH
2832: LD_INT 4
2834: PPUSH
2835: LD_INT 0
2837: PPUSH
2838: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2842: LD_EXP 20
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: LD_INT 100
2852: PPUSH
2853: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2857: LD_EXP 21
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 100
2867: PPUSH
2868: CALL_OW 291
// end ; end_of_file
2872: LD_VAR 0 1
2876: RET
// export function PrepareRussianCommander ; begin
2877: LD_INT 0
2879: PPUSH
// uc_side = 3 ;
2880: LD_ADDR_OWVAR 20
2884: PUSH
2885: LD_INT 3
2887: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2888: LD_ADDR_EXP 23
2892: PUSH
2893: LD_STRING Davidov
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL 12198 0 2
2903: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2904: LD_EXP 23
2908: PPUSH
2909: LD_INT 3
2911: PPUSH
2912: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2916: LD_ADDR_EXP 35
2920: PUSH
2921: LD_EXP 35
2925: PUSH
2926: LD_EXP 23
2930: ADD
2931: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2932: LD_EXP 35
2936: PPUSH
2937: LD_INT 4
2939: PPUSH
2940: CALL_OW 336
// end ;
2944: LD_VAR 0 1
2948: RET
// export function PrepareEastBase ; var i , un ; begin
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
2953: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 3
2959: PPUSH
2960: LD_INT 121
2962: PPUSH
2963: LD_EXP 37
2967: PPUSH
2968: LD_EXP 38
2972: PPUSH
2973: CALL_OW 12
2977: PPUSH
2978: LD_INT 1
2980: PPUSH
2981: LD_INT 3
2983: PPUSH
2984: CALL 12990 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2988: LD_INT 3
2990: PPUSH
2991: LD_INT 3
2993: PPUSH
2994: LD_INT 121
2996: PPUSH
2997: LD_EXP 37
3001: PPUSH
3002: LD_EXP 38
3006: PPUSH
3007: CALL_OW 12
3011: PPUSH
3012: LD_INT 9
3014: PPUSH
3015: LD_INT 3
3017: PPUSH
3018: CALL 12990 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3022: LD_INT 3
3024: PPUSH
3025: LD_INT 3
3027: PPUSH
3028: LD_INT 4
3030: PPUSH
3031: LD_EXP 37
3035: PPUSH
3036: LD_EXP 38
3040: PPUSH
3041: CALL_OW 12
3045: PPUSH
3046: LD_INT 2
3048: PPUSH
3049: LD_INT 6
3051: PPUSH
3052: CALL 12990 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_INT 112
3064: PPUSH
3065: LD_EXP 37
3069: PPUSH
3070: LD_EXP 38
3074: PPUSH
3075: CALL_OW 12
3079: PPUSH
3080: LD_INT 3
3082: PPUSH
3083: LD_INT 6
3085: PPUSH
3086: CALL 12990 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3090: LD_INT 3
3092: PPUSH
3093: LD_INT 3
3095: PPUSH
3096: LD_INT 47
3098: PPUSH
3099: LD_EXP 37
3103: PPUSH
3104: LD_EXP 38
3108: PPUSH
3109: CALL_OW 12
3113: PPUSH
3114: LD_INT 4
3116: PPUSH
3117: LD_INT 6
3119: PPUSH
3120: CALL 12990 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3124: LD_INT 3
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 129
3132: PPUSH
3133: LD_EXP 37
3137: PPUSH
3138: LD_EXP 38
3142: PPUSH
3143: CALL_OW 12
3147: PPUSH
3148: LD_INT 4
3150: PPUSH
3151: LD_INT 6
3153: PPUSH
3154: CALL 12990 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 135
3166: PPUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 38
3176: PPUSH
3177: CALL_OW 12
3181: PPUSH
3182: LD_INT 4
3184: PPUSH
3185: LD_INT 6
3187: PPUSH
3188: CALL 12990 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3192: LD_ADDR_VAR 0 2
3196: PUSH
3197: LD_INT 22
3199: PUSH
3200: LD_INT 3
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 30
3209: PUSH
3210: LD_INT 32
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 69
3225: PUSH
3226: FOR_IN
3227: IFFALSE 3267
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3229: LD_INT 3
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_VAR 0 2
3239: PPUSH
3240: LD_EXP 37
3244: PPUSH
3245: LD_EXP 38
3249: PPUSH
3250: CALL_OW 12
3254: PPUSH
3255: LD_INT 1
3257: PPUSH
3258: LD_INT 1
3260: PPUSH
3261: CALL 12990 0 6
3265: GO 3226
3267: POP
3268: POP
// for i = 1 to 5 do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 5
3281: PUSH
3282: FOR_TO
3283: IFFALSE 3382
// begin uc_side = 3 ;
3285: LD_ADDR_OWVAR 20
3289: PUSH
3290: LD_INT 3
3292: ST_TO_ADDR
// uc_nation = 3 ;
3293: LD_ADDR_OWVAR 21
3297: PUSH
3298: LD_INT 3
3300: ST_TO_ADDR
// hc_gallery =  ;
3301: LD_ADDR_OWVAR 33
3305: PUSH
3306: LD_STRING 
3308: ST_TO_ADDR
// hc_name =  ;
3309: LD_ADDR_OWVAR 26
3313: PUSH
3314: LD_STRING 
3316: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3317: LD_INT 0
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 38
3332: PPUSH
3333: CALL_OW 12
3337: PPUSH
3338: CALL_OW 380
// un = CreateHuman ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: CALL_OW 44
3351: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3352: LD_VAR 0 3
3356: PPUSH
3357: LD_INT 3
3359: PPUSH
3360: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3364: LD_ADDR_EXP 35
3368: PUSH
3369: LD_EXP 35
3373: PUSH
3374: LD_VAR 0 3
3378: ADD
3379: ST_TO_ADDR
// end ;
3380: GO 3282
3382: POP
3383: POP
// end ;
3384: LD_VAR 0 1
3388: RET
// export function PrepareWestBase ; var i , un ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3394: LD_INT 3
3396: PPUSH
3397: LD_INT 3
3399: PPUSH
3400: LD_INT 6
3402: PPUSH
3403: LD_EXP 37
3407: PPUSH
3408: LD_EXP 38
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: LD_INT 3
3423: PPUSH
3424: CALL 12990 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3428: LD_INT 3
3430: PPUSH
3431: LD_INT 3
3433: PPUSH
3434: LD_INT 91
3436: PPUSH
3437: LD_EXP 37
3441: PPUSH
3442: LD_EXP 38
3446: PPUSH
3447: CALL_OW 12
3451: PPUSH
3452: LD_INT 4
3454: PPUSH
3455: LD_INT 3
3457: PPUSH
3458: CALL 12990 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3462: LD_INT 3
3464: PPUSH
3465: LD_INT 3
3467: PPUSH
3468: LD_INT 21
3470: PPUSH
3471: LD_EXP 37
3475: PPUSH
3476: LD_EXP 38
3480: PPUSH
3481: CALL_OW 12
3485: PPUSH
3486: LD_INT 3
3488: PPUSH
3489: LD_INT 6
3491: PPUSH
3492: CALL 12990 0 6
// end ;
3496: LD_VAR 0 1
3500: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3501: LD_INT 0
3503: PPUSH
3504: PPUSH
3505: PPUSH
3506: PPUSH
// uc_side = 3 ;
3507: LD_ADDR_OWVAR 20
3511: PUSH
3512: LD_INT 3
3514: ST_TO_ADDR
// uc_nation = 3 ;
3515: LD_ADDR_OWVAR 21
3519: PUSH
3520: LD_INT 3
3522: ST_TO_ADDR
// for i = 1 to 5 do
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 5
3535: PUSH
3536: FOR_TO
3537: IFFALSE 3607
// begin hc_gallery =  ;
3539: LD_ADDR_OWVAR 33
3543: PUSH
3544: LD_STRING 
3546: ST_TO_ADDR
// hc_name =  ;
3547: LD_ADDR_OWVAR 26
3551: PUSH
3552: LD_STRING 
3554: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3555: LD_INT 0
3557: PPUSH
3558: LD_INT 9
3560: PPUSH
3561: LD_EXP 37
3565: PPUSH
3566: LD_EXP 38
3570: PPUSH
3571: CALL_OW 12
3575: PPUSH
3576: CALL_OW 380
// un = CreateHuman ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: CALL_OW 44
3589: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3590: LD_VAR 0 3
3594: PPUSH
3595: LD_INT 8
3597: PPUSH
3598: LD_INT 0
3600: PPUSH
3601: CALL_OW 49
// end ;
3605: GO 3536
3607: POP
3608: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: DOUBLE
3615: LD_INT 1
3617: DEC
3618: ST_TO_ADDR
3619: LD_INT 2
3621: PUSH
3622: LD_INT 3
3624: PUSH
3625: LD_INT 4
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_OWVAR 67
3637: ARRAY
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3710
// begin hc_gallery =  ;
3642: LD_ADDR_OWVAR 33
3646: PUSH
3647: LD_STRING 
3649: ST_TO_ADDR
// hc_name =  ;
3650: LD_ADDR_OWVAR 26
3654: PUSH
3655: LD_STRING 
3657: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3658: LD_INT 0
3660: PPUSH
3661: LD_INT 4
3663: PPUSH
3664: LD_EXP 37
3668: PPUSH
3669: LD_EXP 38
3673: PPUSH
3674: CALL_OW 12
3678: PPUSH
3679: CALL_OW 380
// un = CreateHuman ;
3683: LD_ADDR_VAR 0 3
3687: PUSH
3688: CALL_OW 44
3692: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3693: LD_VAR 0 3
3697: PPUSH
3698: LD_INT 8
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL_OW 49
// end ;
3708: GO 3639
3710: POP
3711: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: DOUBLE
3718: LD_INT 1
3720: DEC
3721: ST_TO_ADDR
3722: LD_INT 3
3724: PUSH
3725: LD_INT 4
3727: PUSH
3728: LD_INT 5
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: PUSH
3736: LD_OWVAR 67
3740: ARRAY
3741: PUSH
3742: FOR_TO
3743: IFFALSE 3939
// begin vc_engine = 3 ;
3745: LD_ADDR_OWVAR 39
3749: PUSH
3750: LD_INT 3
3752: ST_TO_ADDR
// vc_control = 1 ;
3753: LD_ADDR_OWVAR 38
3757: PUSH
3758: LD_INT 1
3760: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3761: LD_ADDR_OWVAR 40
3765: PUSH
3766: LD_INT 42
3768: PUSH
3769: LD_INT 43
3771: PUSH
3772: LD_INT 44
3774: PUSH
3775: LD_INT 45
3777: PUSH
3778: LD_INT 46
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 5
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3800: LD_OWVAR 40
3804: PUSH
3805: LD_INT 46
3807: EQUAL
3808: IFFALSE 3820
// vc_chassis = ru_heavy_tracked else
3810: LD_ADDR_OWVAR 37
3814: PUSH
3815: LD_INT 24
3817: ST_TO_ADDR
3818: GO 3847
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3820: LD_ADDR_OWVAR 37
3824: PUSH
3825: LD_INT 22
3827: PUSH
3828: LD_INT 21
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 12
3845: ARRAY
3846: ST_TO_ADDR
// veh = CreateVehicle ;
3847: LD_ADDR_VAR 0 4
3851: PUSH
3852: CALL_OW 45
3856: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3869: LD_VAR 0 4
3873: PPUSH
3874: LD_INT 5
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// hc_gallery =  ;
3884: LD_ADDR_OWVAR 33
3888: PUSH
3889: LD_STRING 
3891: ST_TO_ADDR
// hc_name =  ;
3892: LD_ADDR_OWVAR 26
3896: PUSH
3897: LD_STRING 
3899: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3900: LD_INT 0
3902: PPUSH
3903: LD_INT 3
3905: PPUSH
3906: LD_INT 10
3908: PPUSH
3909: CALL_OW 380
// un = CreateHuman ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: CALL_OW 44
3922: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3923: LD_VAR 0 3
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: CALL_OW 52
// end ;
3937: GO 3742
3939: POP
3940: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3941: LD_ADDR_VAR 0 2
3945: PUSH
3946: DOUBLE
3947: LD_INT 1
3949: DEC
3950: ST_TO_ADDR
3951: LD_INT 3
3953: PUSH
3954: LD_INT 4
3956: PUSH
3957: LD_INT 5
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: LIST
3964: PUSH
3965: LD_OWVAR 67
3969: ARRAY
3970: PUSH
3971: FOR_TO
3972: IFFALSE 4119
// begin vc_engine = 3 ;
3974: LD_ADDR_OWVAR 39
3978: PUSH
3979: LD_INT 3
3981: ST_TO_ADDR
// vc_control = 3 ;
3982: LD_ADDR_OWVAR 38
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3990: LD_ADDR_OWVAR 40
3994: PUSH
3995: LD_INT 42
3997: PUSH
3998: LD_INT 43
4000: PUSH
4001: LD_INT 44
4003: PUSH
4004: LD_INT 45
4006: PUSH
4007: LD_INT 46
4009: PUSH
4010: LD_INT 49
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: PUSH
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 5
4026: PPUSH
4027: CALL_OW 12
4031: ARRAY
4032: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4033: LD_OWVAR 40
4037: PUSH
4038: LD_INT 46
4040: EQUAL
4041: IFFALSE 4053
// vc_chassis = ru_heavy_tracked else
4043: LD_ADDR_OWVAR 37
4047: PUSH
4048: LD_INT 24
4050: ST_TO_ADDR
4051: GO 4080
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4053: LD_ADDR_OWVAR 37
4057: PUSH
4058: LD_INT 22
4060: PUSH
4061: LD_INT 21
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 1
4070: PPUSH
4071: LD_INT 2
4073: PPUSH
4074: CALL_OW 12
4078: ARRAY
4079: ST_TO_ADDR
// veh = CreateVehicle ;
4080: LD_ADDR_VAR 0 4
4084: PUSH
4085: CALL_OW 45
4089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4090: LD_VAR 0 4
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4102: LD_VAR 0 4
4106: PPUSH
4107: LD_INT 6
4109: PPUSH
4110: LD_INT 0
4112: PPUSH
4113: CALL_OW 49
// end ;
4117: GO 3971
4119: POP
4120: POP
// end ; end_of_file
4121: LD_VAR 0 1
4125: RET
// export function PrepareKurt ; begin
4126: LD_INT 0
4128: PPUSH
// uc_side = 8 ;
4129: LD_ADDR_OWVAR 20
4133: PUSH
4134: LD_INT 8
4136: ST_TO_ADDR
// uc_nation = 2 ;
4137: LD_ADDR_OWVAR 21
4141: PUSH
4142: LD_INT 2
4144: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4145: LD_ADDR_OWVAR 37
4149: PUSH
4150: LD_INT 13
4152: ST_TO_ADDR
// vc_engine = 1 ;
4153: LD_ADDR_OWVAR 39
4157: PUSH
4158: LD_INT 1
4160: ST_TO_ADDR
// vc_control = 1 ;
4161: LD_ADDR_OWVAR 38
4165: PUSH
4166: LD_INT 1
4168: ST_TO_ADDR
// vc_weapon = 24 ;
4169: LD_ADDR_OWVAR 40
4173: PUSH
4174: LD_INT 24
4176: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4177: LD_ADDR_EXP 26
4181: PUSH
4182: CALL_OW 45
4186: ST_TO_ADDR
// if kurtStatus > 0 then
4187: LD_EXP 27
4191: PUSH
4192: LD_INT 0
4194: GREATER
4195: IFFALSE 4244
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4197: LD_ADDR_EXP 24
4201: PUSH
4202: LD_STRING Kurt
4204: PPUSH
4205: LD_INT 0
4207: PPUSH
4208: CALL 12198 0 2
4212: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4213: LD_EXP 26
4217: PPUSH
4218: LD_INT 4
4220: PPUSH
4221: LD_INT 0
4223: PPUSH
4224: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4228: LD_EXP 24
4232: PPUSH
4233: LD_EXP 26
4237: PPUSH
4238: CALL_OW 52
// end else
4242: GO 4309
// begin hc_name =  ;
4244: LD_ADDR_OWVAR 26
4248: PUSH
4249: LD_STRING 
4251: ST_TO_ADDR
// hc_gallery =  ;
4252: LD_ADDR_OWVAR 33
4256: PUSH
4257: LD_STRING 
4259: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 10
4265: PPUSH
4266: CALL_OW 381
// otherKurt = CreateHuman ;
4270: LD_ADDR_EXP 25
4274: PUSH
4275: CALL_OW 44
4279: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4280: LD_EXP 26
4284: PPUSH
4285: LD_INT 4
4287: PPUSH
4288: LD_INT 0
4290: PPUSH
4291: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4295: LD_EXP 25
4299: PPUSH
4300: LD_EXP 26
4304: PPUSH
4305: CALL_OW 52
// end ; end ;
4309: LD_VAR 0 1
4313: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4314: LD_INT 0
4316: PPUSH
4317: PPUSH
4318: PPUSH
4319: PPUSH
// for i = 1 to 3 do
4320: LD_ADDR_VAR 0 2
4324: PUSH
4325: DOUBLE
4326: LD_INT 1
4328: DEC
4329: ST_TO_ADDR
4330: LD_INT 3
4332: PUSH
4333: FOR_TO
4334: IFFALSE 4471
// begin uc_side = 1 ;
4336: LD_ADDR_OWVAR 20
4340: PUSH
4341: LD_INT 1
4343: ST_TO_ADDR
// uc_nation = 2 ;
4344: LD_ADDR_OWVAR 21
4348: PUSH
4349: LD_INT 2
4351: ST_TO_ADDR
// hc_gallery =  ;
4352: LD_ADDR_OWVAR 33
4356: PUSH
4357: LD_STRING 
4359: ST_TO_ADDR
// hc_name =  ;
4360: LD_ADDR_OWVAR 26
4364: PUSH
4365: LD_STRING 
4367: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4368: LD_EXP 27
4372: PUSH
4373: LD_INT 0
4375: EQUAL
4376: PUSH
4377: LD_EXP 27
4381: PUSH
4382: LD_INT 2
4384: EQUAL
4385: OR
4386: IFFALSE 4411
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4388: LD_INT 0
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: LD_INT 2
4396: PPUSH
4397: LD_INT 4
4399: PPUSH
4400: CALL_OW 12
4404: PPUSH
4405: CALL_OW 380
4409: GO 4432
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4411: LD_INT 0
4413: PPUSH
4414: LD_INT 1
4416: PPUSH
4417: LD_INT 6
4419: PPUSH
4420: LD_INT 8
4422: PPUSH
4423: CALL_OW 12
4427: PPUSH
4428: CALL_OW 380
// un = CreateHuman ;
4432: LD_ADDR_VAR 0 3
4436: PUSH
4437: CALL_OW 44
4441: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4442: LD_VAR 0 3
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4454: LD_VAR 0 3
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// end ;
4469: GO 4333
4471: POP
4472: POP
// vc_chassis = 14 ;
4473: LD_ADDR_OWVAR 37
4477: PUSH
4478: LD_INT 14
4480: ST_TO_ADDR
// vc_engine = 3 ;
4481: LD_ADDR_OWVAR 39
4485: PUSH
4486: LD_INT 3
4488: ST_TO_ADDR
// vc_control = 1 ;
4489: LD_ADDR_OWVAR 38
4493: PUSH
4494: LD_INT 1
4496: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4497: LD_ADDR_OWVAR 40
4501: PUSH
4502: LD_INT 27
4504: PUSH
4505: LD_INT 26
4507: PUSH
4508: LD_INT 28
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 1
4518: PPUSH
4519: LD_INT 3
4521: PPUSH
4522: CALL_OW 12
4526: ARRAY
4527: ST_TO_ADDR
// veh = CreateVehicle ;
4528: LD_ADDR_VAR 0 4
4532: PUSH
4533: CALL_OW 45
4537: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4538: LD_VAR 0 4
4542: PPUSH
4543: LD_INT 4
4545: PPUSH
4546: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4550: LD_VAR 0 4
4554: PPUSH
4555: LD_INT 4
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4565: LD_EXP 27
4569: PUSH
4570: LD_INT 0
4572: EQUAL
4573: PUSH
4574: LD_EXP 27
4578: PUSH
4579: LD_INT 2
4581: EQUAL
4582: OR
4583: IFFALSE 4608
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4585: LD_INT 0
4587: PPUSH
4588: LD_INT 3
4590: PPUSH
4591: LD_INT 2
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: CALL_OW 12
4601: PPUSH
4602: CALL_OW 380
4606: GO 4629
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4608: LD_INT 0
4610: PPUSH
4611: LD_INT 3
4613: PPUSH
4614: LD_INT 6
4616: PPUSH
4617: LD_INT 8
4619: PPUSH
4620: CALL_OW 12
4624: PPUSH
4625: CALL_OW 380
// un = CreateHuman ;
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: CALL_OW 44
4638: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4639: LD_VAR 0 3
4643: PPUSH
4644: LD_VAR 0 4
4648: PPUSH
4649: CALL_OW 52
// vc_chassis = 14 ;
4653: LD_ADDR_OWVAR 37
4657: PUSH
4658: LD_INT 14
4660: ST_TO_ADDR
// vc_engine = 3 ;
4661: LD_ADDR_OWVAR 39
4665: PUSH
4666: LD_INT 3
4668: ST_TO_ADDR
// vc_control = 1 ;
4669: LD_ADDR_OWVAR 38
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4677: LD_ADDR_OWVAR 40
4681: PUSH
4682: LD_INT 27
4684: PUSH
4685: LD_INT 26
4687: PUSH
4688: LD_INT 28
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: LD_INT 1
4698: PPUSH
4699: LD_INT 3
4701: PPUSH
4702: CALL_OW 12
4706: ARRAY
4707: ST_TO_ADDR
// veh = CreateVehicle ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: CALL_OW 45
4717: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4718: LD_VAR 0 4
4722: PPUSH
4723: LD_INT 4
4725: PPUSH
4726: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4730: LD_VAR 0 4
4734: PPUSH
4735: LD_INT 4
4737: PPUSH
4738: LD_INT 0
4740: PPUSH
4741: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4745: LD_EXP 27
4749: PUSH
4750: LD_INT 0
4752: EQUAL
4753: PUSH
4754: LD_EXP 27
4758: PUSH
4759: LD_INT 2
4761: EQUAL
4762: OR
4763: IFFALSE 4788
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4765: LD_INT 0
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: LD_INT 2
4773: PPUSH
4774: LD_INT 4
4776: PPUSH
4777: CALL_OW 12
4781: PPUSH
4782: CALL_OW 380
4786: GO 4809
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4788: LD_INT 0
4790: PPUSH
4791: LD_INT 4
4793: PPUSH
4794: LD_INT 6
4796: PPUSH
4797: LD_INT 8
4799: PPUSH
4800: CALL_OW 12
4804: PPUSH
4805: CALL_OW 380
// un = CreateHuman ;
4809: LD_ADDR_VAR 0 3
4813: PUSH
4814: CALL_OW 44
4818: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4819: LD_VAR 0 3
4823: PPUSH
4824: LD_INT 4
4826: PPUSH
4827: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4831: LD_VAR 0 3
4835: PPUSH
4836: LD_VAR 0 4
4840: PPUSH
4841: CALL_OW 52
// vc_chassis = 14 ;
4845: LD_ADDR_OWVAR 37
4849: PUSH
4850: LD_INT 14
4852: ST_TO_ADDR
// vc_engine = 3 ;
4853: LD_ADDR_OWVAR 39
4857: PUSH
4858: LD_INT 3
4860: ST_TO_ADDR
// vc_control = 1 ;
4861: LD_ADDR_OWVAR 38
4865: PUSH
4866: LD_INT 1
4868: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4869: LD_ADDR_OWVAR 40
4873: PUSH
4874: LD_INT 27
4876: PUSH
4877: LD_INT 26
4879: PUSH
4880: LD_INT 28
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 1
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: CALL_OW 12
4898: ARRAY
4899: ST_TO_ADDR
// veh = CreateVehicle ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: CALL_OW 45
4909: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4910: LD_VAR 0 4
4914: PPUSH
4915: LD_INT 4
4917: PPUSH
4918: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4922: LD_VAR 0 4
4926: PPUSH
4927: LD_INT 4
4929: PPUSH
4930: LD_INT 0
4932: PPUSH
4933: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4937: LD_EXP 27
4941: PUSH
4942: LD_INT 0
4944: EQUAL
4945: PUSH
4946: LD_EXP 27
4950: PUSH
4951: LD_INT 2
4953: EQUAL
4954: OR
4955: IFFALSE 4980
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4957: LD_INT 0
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: LD_INT 2
4965: PPUSH
4966: LD_INT 4
4968: PPUSH
4969: CALL_OW 12
4973: PPUSH
4974: CALL_OW 380
4978: GO 5001
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4980: LD_INT 0
4982: PPUSH
4983: LD_INT 2
4985: PPUSH
4986: LD_INT 6
4988: PPUSH
4989: LD_INT 8
4991: PPUSH
4992: CALL_OW 12
4996: PPUSH
4997: CALL_OW 380
// un = CreateHuman ;
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: CALL_OW 44
5010: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5011: LD_VAR 0 3
5015: PPUSH
5016: LD_INT 4
5018: PPUSH
5019: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5023: LD_VAR 0 3
5027: PPUSH
5028: LD_VAR 0 4
5032: PPUSH
5033: CALL_OW 52
// end ;
5037: LD_VAR 0 1
5041: RET
// export function PrepareAttackLegion ; var i , un ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
// for i = 1 to 4 do
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: DOUBLE
5053: LD_INT 1
5055: DEC
5056: ST_TO_ADDR
5057: LD_INT 4
5059: PUSH
5060: FOR_TO
5061: IFFALSE 5171
// begin uc_side = 8 ;
5063: LD_ADDR_OWVAR 20
5067: PUSH
5068: LD_INT 8
5070: ST_TO_ADDR
// uc_nation = 2 ;
5071: LD_ADDR_OWVAR 21
5075: PUSH
5076: LD_INT 2
5078: ST_TO_ADDR
// hc_gallery =  ;
5079: LD_ADDR_OWVAR 33
5083: PUSH
5084: LD_STRING 
5086: ST_TO_ADDR
// hc_name =  ;
5087: LD_ADDR_OWVAR 26
5091: PUSH
5092: LD_STRING 
5094: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5095: LD_INT 0
5097: PPUSH
5098: LD_INT 1
5100: PUSH
5101: LD_INT 8
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: LD_INT 1
5110: PPUSH
5111: LD_INT 2
5113: PPUSH
5114: CALL_OW 12
5118: ARRAY
5119: PPUSH
5120: LD_INT 6
5122: PPUSH
5123: LD_INT 8
5125: PPUSH
5126: CALL_OW 12
5130: PPUSH
5131: CALL_OW 380
// un = CreateHuman ;
5135: LD_ADDR_VAR 0 3
5139: PUSH
5140: CALL_OW 44
5144: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5145: LD_VAR 0 3
5149: PPUSH
5150: LD_INT 19
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: CALL_OW 49
// ComCrawl ( un ) ;
5160: LD_VAR 0 3
5164: PPUSH
5165: CALL_OW 137
// end ;
5169: GO 5060
5171: POP
5172: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5173: LD_INT 1
5175: PPUSH
5176: LD_INT 8
5178: PPUSH
5179: LD_INT 2
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5189: LD_INT 20
5191: PPUSH
5192: LD_INT 3
5194: PPUSH
5195: CALL 15125 0 2
// end ; end_of_file
5199: LD_VAR 0 1
5203: RET
// every 1 do var i ;
5204: GO 5206
5206: DISABLE
5207: LD_INT 0
5209: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5210: LD_INT 10
5212: PPUSH
5213: LD_INT 122
5215: PPUSH
5216: LD_INT 145
5218: PPUSH
5219: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5223: LD_INT 137
5225: PPUSH
5226: LD_INT 84
5228: PPUSH
5229: LD_INT 61
5231: PPUSH
5232: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5236: LD_EXP 1
5240: PPUSH
5241: CALL_OW 310
5245: PPUSH
5246: CALL_OW 87
// InGameOn ;
5250: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5254: LD_INT 22
5256: PUSH
5257: LD_INT 1
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PPUSH
5264: CALL_OW 69
5268: PPUSH
5269: LD_INT 130
5271: PPUSH
5272: LD_INT 103
5274: PPUSH
5275: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5279: LD_VAR 0 1
5283: PPUSH
5284: LD_INT 114
5286: PPUSH
5287: LD_INT 102
5289: PPUSH
5290: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5294: LD_EXP 1
5298: PPUSH
5299: LD_STRING D1-JMM-1
5301: PPUSH
5302: CALL_OW 88
// if IsOk ( Donaldson ) then
5306: LD_EXP 3
5310: PPUSH
5311: CALL_OW 302
5315: IFFALSE 5353
// begin Say ( Donaldson , D1-Don-1 ) ;
5317: LD_EXP 3
5321: PPUSH
5322: LD_STRING D1-Don-1
5324: PPUSH
5325: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5329: LD_EXP 1
5333: PPUSH
5334: LD_STRING D1-JMM-2
5336: PPUSH
5337: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5341: LD_EXP 3
5345: PPUSH
5346: LD_STRING D1-Don-2
5348: PPUSH
5349: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5353: LD_INT 22
5355: PUSH
5356: LD_INT 1
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 69
5367: PPUSH
5368: LD_INT 110
5370: PPUSH
5371: LD_INT 101
5373: PPUSH
5374: CALL_OW 171
// end ;
5378: PPOPN 1
5380: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5381: LD_INT 1
5383: PPUSH
5384: LD_INT 102
5386: PPUSH
5387: LD_INT 94
5389: PPUSH
5390: CALL_OW 293
5394: IFFALSE 5569
5396: GO 5398
5398: DISABLE
5399: LD_INT 0
5401: PPUSH
// begin CenterOnXY ( 95 , 84 ) ;
5402: LD_INT 95
5404: PPUSH
5405: LD_INT 84
5407: PPUSH
5408: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
5412: LD_INT 22
5414: PUSH
5415: LD_INT 1
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 26
5424: PUSH
5425: LD_INT 1
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: LD_INT 2
5434: PUSH
5435: LD_INT 25
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: PUSH
5445: LD_INT 25
5447: PUSH
5448: LD_INT 2
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: LD_INT 25
5457: PUSH
5458: LD_INT 3
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 25
5467: PUSH
5468: LD_INT 4
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: LD_EXP 1
5491: DIFF
5492: PPUSH
5493: CALL_OW 69
5497: PPUSH
5498: LD_STRING D1-Sol1-2
5500: PPUSH
5501: LD_STRING 
5503: PPUSH
5504: CALL 12306 0 3
// Say ( JMM , D1-JMM-3 ) ;
5508: LD_EXP 1
5512: PPUSH
5513: LD_STRING D1-JMM-3
5515: PPUSH
5516: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5520: LD_STRING M1
5522: PPUSH
5523: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5527: LD_ADDR_VAR 0 1
5531: PUSH
5532: LD_INT 22
5534: PUSH
5535: LD_INT 1
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: PUSH
5547: FOR_IN
5548: IFFALSE 5567
// ComMoveXY ( i , 95 , 84 ) ;
5550: LD_VAR 0 1
5554: PPUSH
5555: LD_INT 95
5557: PPUSH
5558: LD_INT 84
5560: PPUSH
5561: CALL_OW 111
5565: GO 5547
5567: POP
5568: POP
// end ;
5569: PPOPN 1
5571: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5572: GO 5574
5574: DISABLE
5575: LD_INT 0
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5581: LD_ADDR_VAR 0 2
5585: PUSH
5586: LD_INT 8
5588: PPUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 3
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 25
5601: PUSH
5602: LD_INT 9
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 70
5617: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_INT 22
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: PPUSH
5636: CALL_OW 69
5640: ST_TO_ADDR
// enable ;
5641: ENABLE
// for i in your_units do
5642: LD_ADDR_VAR 0 1
5646: PUSH
5647: LD_VAR 0 3
5651: PUSH
5652: FOR_IN
5653: IFFALSE 6288
// begin if See ( 3 , i ) then
5655: LD_INT 3
5657: PPUSH
5658: LD_VAR 0 1
5662: PPUSH
5663: CALL_OW 292
5667: IFFALSE 6286
// begin disable ;
5669: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5670: LD_VAR 0 2
5674: PPUSH
5675: LD_INT 96
5677: PPUSH
5678: LD_INT 85
5680: PPUSH
5681: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5685: LD_VAR 0 2
5689: PPUSH
5690: LD_INT 96
5692: PPUSH
5693: LD_INT 85
5695: PPUSH
5696: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5700: LD_VAR 0 2
5704: PPUSH
5705: LD_INT 96
5707: PPUSH
5708: LD_INT 85
5710: PPUSH
5711: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5715: LD_VAR 0 2
5719: PPUSH
5720: LD_INT 96
5722: PPUSH
5723: LD_INT 85
5725: PPUSH
5726: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5730: LD_VAR 0 2
5734: PPUSH
5735: LD_INT 96
5737: PPUSH
5738: LD_INT 85
5740: PPUSH
5741: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5745: LD_VAR 0 2
5749: PPUSH
5750: LD_INT 96
5752: PPUSH
5753: LD_INT 85
5755: PPUSH
5756: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5760: LD_EXP 1
5764: PPUSH
5765: LD_STRING D1a-JMM-1
5767: PPUSH
5768: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5772: LD_EXP 3
5776: PPUSH
5777: LD_STRING D1a-Don-1
5779: PPUSH
5780: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5784: LD_ADDR_VAR 0 1
5788: PUSH
5789: LD_INT 22
5791: PUSH
5792: LD_INT 1
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PPUSH
5799: CALL_OW 69
5803: PUSH
5804: FOR_IN
5805: IFFALSE 5824
// ComMoveXY ( i , 109 , 102 ) ;
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 109
5814: PPUSH
5815: LD_INT 102
5817: PPUSH
5818: CALL_OW 111
5822: GO 5804
5824: POP
5825: POP
// Say ( JMM , D1a-JMM-2 ) ;
5826: LD_EXP 1
5830: PPUSH
5831: LD_STRING D1a-JMM-2
5833: PPUSH
5834: CALL_OW 88
// wait ( 0 0$10 ) ;
5838: LD_INT 350
5840: PPUSH
5841: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5845: LD_EXP 1
5849: PPUSH
5850: CALL_OW 310
5854: PPUSH
5855: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5859: LD_EXP 3
5863: PPUSH
5864: LD_STRING D1b-Don-1
5866: PPUSH
5867: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5871: LD_EXP 1
5875: PPUSH
5876: LD_STRING D1b-JMM-1
5878: PPUSH
5879: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5883: LD_INT 22
5885: PUSH
5886: LD_INT 1
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: LD_INT 26
5895: PUSH
5896: LD_INT 1
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: PUSH
5903: LD_INT 2
5905: PUSH
5906: LD_INT 25
5908: PUSH
5909: LD_INT 1
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 25
5918: PUSH
5919: LD_INT 2
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 25
5928: PUSH
5929: LD_INT 3
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 25
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_EXP 1
5962: PUSH
5963: EMPTY
5964: LIST
5965: DIFF
5966: PPUSH
5967: CALL_OW 69
5971: PPUSH
5972: LD_STRING D1b-Sol1-1
5974: PPUSH
5975: LD_STRING 
5977: PPUSH
5978: CALL 12306 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5982: LD_EXP 3
5986: PPUSH
5987: LD_STRING D1b-Don-2
5989: PPUSH
5990: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5994: LD_EXP 1
5998: PPUSH
5999: LD_STRING D1b-JMM-2
6001: PPUSH
6002: CALL_OW 88
// dec = ShowQuery1 ;
6006: LD_ADDR_VAR 0 4
6010: PUSH
6011: CALL 12842 0 0
6015: ST_TO_ADDR
// if dec = 1 then
6016: LD_VAR 0 4
6020: PUSH
6021: LD_INT 1
6023: EQUAL
6024: IFFALSE 6130
// begin Say ( JMM , D2-JMM-1 ) ;
6026: LD_EXP 1
6030: PPUSH
6031: LD_STRING D2-JMM-1
6033: PPUSH
6034: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6038: LD_EXP 22
6042: PPUSH
6043: LD_STRING D2-Pow-1
6045: PPUSH
6046: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6050: LD_EXP 1
6054: PPUSH
6055: LD_STRING D2a-JMM-1
6057: PPUSH
6058: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6062: LD_EXP 22
6066: PPUSH
6067: LD_STRING D2a-Pow-1
6069: PPUSH
6070: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6074: LD_EXP 1
6078: PPUSH
6079: LD_STRING D2a-JMM-2
6081: PPUSH
6082: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6086: LD_EXP 22
6090: PPUSH
6091: LD_STRING D2a-Pow-2
6093: PPUSH
6094: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6098: LD_EXP 1
6102: PPUSH
6103: LD_STRING D2a-JMM-3
6105: PPUSH
6106: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6110: LD_EXP 22
6114: PPUSH
6115: LD_STRING D2a-Pow-3
6117: PPUSH
6118: CALL_OW 94
// secondPass = 2 ;
6122: LD_ADDR_EXP 28
6126: PUSH
6127: LD_INT 2
6129: ST_TO_ADDR
// end ; if dec = 2 then
6130: LD_VAR 0 4
6134: PUSH
6135: LD_INT 2
6137: EQUAL
6138: IFFALSE 6232
// begin Say ( JMM , D2-JMM-1 ) ;
6140: LD_EXP 1
6144: PPUSH
6145: LD_STRING D2-JMM-1
6147: PPUSH
6148: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6152: LD_EXP 22
6156: PPUSH
6157: LD_STRING D2-Pow-1
6159: PPUSH
6160: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D2b-JMM-1
6171: PPUSH
6172: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6176: LD_EXP 22
6180: PPUSH
6181: LD_STRING D2b-Pow-1
6183: PPUSH
6184: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D2c-JMM-1
6195: PPUSH
6196: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6200: LD_EXP 22
6204: PPUSH
6205: LD_STRING D2c-Pow-1
6207: PPUSH
6208: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6212: LD_EXP 1
6216: PPUSH
6217: LD_STRING D2c-JMM-2
6219: PPUSH
6220: CALL_OW 88
// secondPass = 2 ;
6224: LD_ADDR_EXP 28
6228: PUSH
6229: LD_INT 2
6231: ST_TO_ADDR
// end ; if dec = 3 then
6232: LD_VAR 0 4
6236: PUSH
6237: LD_INT 3
6239: EQUAL
6240: IFFALSE 6250
// secondPass = 1 ;
6242: LD_ADDR_EXP 28
6246: PUSH
6247: LD_INT 1
6249: ST_TO_ADDR
// InGameOff ;
6250: CALL_OW 9
// ruAI = 1 ;
6254: LD_ADDR_EXP 42
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 3
6267: PPUSH
6268: LD_INT 2
6270: PPUSH
6271: LD_INT 1
6273: PPUSH
6274: CALL_OW 80
// SaveForQuickRestart ;
6278: CALL_OW 22
// exit ;
6282: POP
6283: POP
6284: GO 6290
// end ; end ;
6286: GO 5652
6288: POP
6289: POP
// end ;
6290: PPOPN 4
6292: END
// every 1 1$0 trigger secondPass = 2 do
6293: LD_EXP 28
6297: PUSH
6298: LD_INT 2
6300: EQUAL
6301: IFFALSE 6428
6303: GO 6305
6305: DISABLE
// begin PowellSupport1 ;
6306: CALL 1763 0 0
// DialogueOn ;
6310: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6314: LD_EXP 1
6318: PPUSH
6319: LD_STRING DC1-JMM-1
6321: PPUSH
6322: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6326: LD_EXP 22
6330: PPUSH
6331: LD_STRING DC1-Pow-1
6333: PPUSH
6334: CALL_OW 94
// DialogueOff ;
6338: CALL_OW 7
// wait ( 3 3$0 ) ;
6342: LD_INT 6300
6344: PPUSH
6345: CALL_OW 67
// PowellSupport2 ;
6349: CALL 2222 0 0
// DialogueOn ;
6353: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6357: LD_EXP 1
6361: PPUSH
6362: LD_STRING DC2-JMM-1
6364: PPUSH
6365: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6369: LD_EXP 22
6373: PPUSH
6374: LD_STRING DC2-Pow-1
6376: PPUSH
6377: CALL_OW 94
// DialogueOff ;
6381: CALL_OW 7
// wait ( 6 6$0 ) ;
6385: LD_INT 12600
6387: PPUSH
6388: CALL_OW 67
// PowellSupport3 ;
6392: CALL 2699 0 0
// DialogueOn ;
6396: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6400: LD_EXP 22
6404: PPUSH
6405: LD_STRING DC3-Pow-1
6407: PPUSH
6408: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6412: LD_EXP 1
6416: PPUSH
6417: LD_STRING DC3-JMM-1
6419: PPUSH
6420: CALL_OW 88
// DialogueOff ;
6424: CALL_OW 7
// end ;
6428: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6429: LD_EXP 28
6433: PUSH
6434: LD_INT 2
6436: EQUAL
6437: PUSH
6438: LD_INT 22
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 30
6453: PUSH
6454: LD_INT 0
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 30
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 69
6484: PUSH
6485: LD_INT 0
6487: GREATER
6488: AND
6489: IFFALSE 9831
6491: GO 6493
6493: DISABLE
6494: LD_INT 0
6496: PPUSH
6497: PPUSH
6498: PPUSH
6499: PPUSH
6500: PPUSH
6501: PPUSH
6502: PPUSH
6503: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6504: LD_ADDR_VAR 0 4
6508: PUSH
6509: LD_INT 22
6511: PUSH
6512: LD_INT 1
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 21
6521: PUSH
6522: LD_INT 3
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: LD_INT 30
6534: PUSH
6535: LD_INT 0
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 30
6544: PUSH
6545: LD_INT 1
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: PPUSH
6562: CALL_OW 69
6566: ST_TO_ADDR
// for i in tmp do
6567: LD_ADDR_VAR 0 1
6571: PUSH
6572: LD_VAR 0 4
6576: PUSH
6577: FOR_IN
6578: IFFALSE 6611
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6580: LD_ADDR_VAR 0 6
6584: PUSH
6585: LD_VAR 0 6
6589: PUSH
6590: LD_VAR 0 1
6594: PPUSH
6595: CALL_OW 274
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 275
6607: PLUS
6608: ST_TO_ADDR
6609: GO 6577
6611: POP
6612: POP
// for i in tmp do
6613: LD_ADDR_VAR 0 1
6617: PUSH
6618: LD_VAR 0 4
6622: PUSH
6623: FOR_IN
6624: IFFALSE 6657
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6626: LD_ADDR_VAR 0 7
6630: PUSH
6631: LD_VAR 0 7
6635: PUSH
6636: LD_VAR 0 1
6640: PPUSH
6641: CALL_OW 274
6645: PPUSH
6646: LD_INT 2
6648: PPUSH
6649: CALL_OW 275
6653: PLUS
6654: ST_TO_ADDR
6655: GO 6623
6657: POP
6658: POP
// for i in tmp do
6659: LD_ADDR_VAR 0 1
6663: PUSH
6664: LD_VAR 0 4
6668: PUSH
6669: FOR_IN
6670: IFFALSE 6703
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6672: LD_ADDR_VAR 0 8
6676: PUSH
6677: LD_VAR 0 8
6681: PUSH
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 274
6691: PPUSH
6692: LD_INT 3
6694: PPUSH
6695: CALL_OW 275
6699: PLUS
6700: ST_TO_ADDR
6701: GO 6669
6703: POP
6704: POP
// PrepareKurt ;
6705: CALL 4126 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6709: LD_EXP 26
6713: PPUSH
6714: LD_INT 144
6716: PPUSH
6717: LD_INT 111
6719: PPUSH
6720: CALL_OW 111
// wait ( 0 0$2 ) ;
6724: LD_INT 70
6726: PPUSH
6727: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6731: LD_INT 8
6733: PPUSH
6734: LD_INT 1
6736: PPUSH
6737: CALL_OW 343
// if kurtStatus > 0 then
6741: LD_EXP 27
6745: PUSH
6746: LD_INT 0
6748: GREATER
6749: IFFALSE 8299
// begin ComExitVehicle ( Kurt ) ;
6751: LD_EXP 24
6755: PPUSH
6756: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6760: LD_EXP 24
6764: PPUSH
6765: CALL_OW 87
// wait ( 0 0$1 ) ;
6769: LD_INT 35
6771: PPUSH
6772: CALL_OW 67
// DialogueOn ;
6776: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
6780: LD_INT 22
6782: PUSH
6783: LD_INT 1
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 26
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: LD_INT 1
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 25
6815: PUSH
6816: LD_INT 2
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 25
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 25
6835: PUSH
6836: LD_INT 4
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: PUSH
6855: LD_EXP 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: DIFF
6863: PPUSH
6864: CALL_OW 69
6868: PPUSH
6869: LD_STRING D3-Sol1-1
6871: PPUSH
6872: LD_STRING 
6874: PPUSH
6875: CALL 12306 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6879: LD_EXP 24
6883: PPUSH
6884: LD_STRING D3-Kurt-1
6886: PPUSH
6887: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6891: LD_EXP 1
6895: PPUSH
6896: LD_STRING D3-JMM-1
6898: PPUSH
6899: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6903: LD_EXP 24
6907: PPUSH
6908: LD_STRING D3-Kurt-2
6910: PPUSH
6911: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6915: LD_EXP 1
6919: PPUSH
6920: LD_STRING D3-JMM-2
6922: PPUSH
6923: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6927: LD_EXP 24
6931: PPUSH
6932: LD_STRING D3-Kurt-4
6934: PPUSH
6935: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6939: LD_EXP 1
6943: PPUSH
6944: LD_STRING D3-JMM-4
6946: PPUSH
6947: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6951: LD_EXP 24
6955: PPUSH
6956: LD_STRING D3-Kurt-5
6958: PPUSH
6959: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6963: LD_EXP 24
6967: PPUSH
6968: LD_STRING D3-Kurt-5a
6970: PPUSH
6971: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6975: LD_VAR 0 6
6979: PUSH
6980: LD_INT 60
6982: GREATEREQUAL
6983: PUSH
6984: LD_VAR 0 8
6988: PUSH
6989: LD_INT 60
6991: GREATEREQUAL
6992: AND
6993: IFFALSE 7028
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: LD_STRING Q2K
7002: PPUSH
7003: LD_INT 1
7005: PUSH
7006: LD_INT 2
7008: PUSH
7009: LD_INT 3
7011: PUSH
7012: LD_INT 4
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: CALL_OW 98
7025: ST_TO_ADDR
7026: GO 7051
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7028: LD_ADDR_VAR 0 2
7032: PUSH
7033: LD_STRING Q2K
7035: PPUSH
7036: LD_INT 3
7038: PUSH
7039: LD_INT 4
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PPUSH
7046: CALL_OW 98
7050: ST_TO_ADDR
// if dec1 = 1 then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 1
7058: EQUAL
7059: IFFALSE 7093
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7061: LD_EXP 1
7065: PPUSH
7066: LD_STRING D3Ka-JMM-1
7068: PPUSH
7069: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7073: LD_EXP 24
7077: PPUSH
7078: LD_STRING D3Ka-Kurt-1
7080: PPUSH
7081: CALL_OW 88
// warWithLegion = 1 ;
7085: LD_ADDR_EXP 31
7089: PUSH
7090: LD_INT 1
7092: ST_TO_ADDR
// end ; if dec1 = 2 then
7093: LD_VAR 0 2
7097: PUSH
7098: LD_INT 2
7100: EQUAL
7101: IFFALSE 7327
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7103: LD_EXP 1
7107: PPUSH
7108: LD_STRING D3Kb-JMM-1
7110: PPUSH
7111: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7115: LD_EXP 24
7119: PPUSH
7120: LD_STRING D3Kb-Kurt-1
7122: PPUSH
7123: CALL_OW 88
// for i in tmp do
7127: LD_ADDR_VAR 0 1
7131: PUSH
7132: LD_VAR 0 4
7136: PUSH
7137: FOR_IN
7138: IFFALSE 7225
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7140: LD_ADDR_VAR 0 5
7144: PUSH
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL_OW 274
7154: PPUSH
7155: LD_INT 1
7157: PPUSH
7158: CALL_OW 275
7162: ST_TO_ADDR
// if tmp2 >= 60 then
7163: LD_VAR 0 5
7167: PUSH
7168: LD_INT 60
7170: GREATEREQUAL
7171: IFFALSE 7203
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL_OW 274
7182: PPUSH
7183: LD_INT 1
7185: PPUSH
7186: LD_VAR 0 5
7190: PUSH
7191: LD_INT 60
7193: MINUS
7194: PPUSH
7195: CALL_OW 277
// break ;
7199: GO 7225
// end else
7201: GO 7223
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL_OW 274
7212: PPUSH
7213: LD_INT 1
7215: PPUSH
7216: LD_INT 0
7218: PPUSH
7219: CALL_OW 277
// end ; end ;
7223: GO 7137
7225: POP
7226: POP
// for i in tmp do
7227: LD_ADDR_VAR 0 1
7231: PUSH
7232: LD_VAR 0 4
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7325
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7240: LD_ADDR_VAR 0 5
7244: PUSH
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 274
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: CALL_OW 275
7262: ST_TO_ADDR
// if tmp2 >= 60 then
7263: LD_VAR 0 5
7267: PUSH
7268: LD_INT 60
7270: GREATEREQUAL
7271: IFFALSE 7303
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7273: LD_VAR 0 1
7277: PPUSH
7278: CALL_OW 274
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_VAR 0 5
7290: PUSH
7291: LD_INT 60
7293: MINUS
7294: PPUSH
7295: CALL_OW 277
// break ;
7299: GO 7325
// end else
7301: GO 7323
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7303: LD_VAR 0 1
7307: PPUSH
7308: CALL_OW 274
7312: PPUSH
7313: LD_INT 3
7315: PPUSH
7316: LD_INT 0
7318: PPUSH
7319: CALL_OW 277
// end ; end ;
7323: GO 7237
7325: POP
7326: POP
// end ; if dec1 = 3 then
7327: LD_VAR 0 2
7331: PUSH
7332: LD_INT 3
7334: EQUAL
7335: IFFALSE 7570
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7337: LD_EXP 1
7341: PPUSH
7342: LD_STRING D3Kc1-JMM-1
7344: PPUSH
7345: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7349: LD_EXP 24
7353: PPUSH
7354: LD_STRING D3Kc1-Kurt-1
7356: PPUSH
7357: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7361: LD_EXP 1
7365: PPUSH
7366: LD_STRING D3Kc1-JMM-2
7368: PPUSH
7369: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7373: LD_EXP 24
7377: PPUSH
7378: LD_STRING D3Kc1-Kurt-2
7380: PPUSH
7381: CALL_OW 88
// askSiberite = 1 ;
7385: LD_ADDR_EXP 33
7389: PUSH
7390: LD_INT 1
7392: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7393: LD_ADDR_VAR 0 2
7397: PUSH
7398: LD_STRING Q2b
7400: PPUSH
7401: LD_INT 1
7403: PUSH
7404: LD_INT 2
7406: PUSH
7407: LD_INT 3
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: LIST
7414: PPUSH
7415: CALL_OW 98
7419: ST_TO_ADDR
// if dec2 = 1 then
7420: LD_VAR 0 3
7424: PUSH
7425: LD_INT 1
7427: EQUAL
7428: IFFALSE 7462
// begin Say ( JMM , D4a-JMM-1 ) ;
7430: LD_EXP 1
7434: PPUSH
7435: LD_STRING D4a-JMM-1
7437: PPUSH
7438: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7442: LD_EXP 24
7446: PPUSH
7447: LD_STRING D4b-Kurt-1
7449: PPUSH
7450: CALL_OW 88
// warWithLegion = 1 ;
7454: LD_ADDR_EXP 31
7458: PUSH
7459: LD_INT 1
7461: ST_TO_ADDR
// end ; if dec2 = 2 then
7462: LD_VAR 0 3
7466: PUSH
7467: LD_INT 2
7469: EQUAL
7470: IFFALSE 7504
// begin Say ( JMM , D4b-JMM-1 ) ;
7472: LD_EXP 1
7476: PPUSH
7477: LD_STRING D4b-JMM-1
7479: PPUSH
7480: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7484: LD_EXP 24
7488: PPUSH
7489: LD_STRING D4b-Kurt-1
7491: PPUSH
7492: CALL_OW 88
// warWithLegion = 1 ;
7496: LD_ADDR_EXP 31
7500: PUSH
7501: LD_INT 1
7503: ST_TO_ADDR
// end ; if dec2 = 3 then
7504: LD_VAR 0 3
7508: PUSH
7509: LD_INT 3
7511: EQUAL
7512: IFFALSE 7570
// begin Say ( JMM , D4c-JMM-1 ) ;
7514: LD_EXP 1
7518: PPUSH
7519: LD_STRING D4c-JMM-1
7521: PPUSH
7522: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7526: LD_EXP 24
7530: PPUSH
7531: LD_STRING D4c-Kurt-1
7533: PPUSH
7534: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7538: LD_EXP 1
7542: PPUSH
7543: LD_STRING D4c-JMM-2
7545: PPUSH
7546: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7550: LD_EXP 24
7554: PPUSH
7555: LD_STRING D4c-Kurt-2
7557: PPUSH
7558: CALL_OW 88
// fakeInfo = 1 ;
7562: LD_ADDR_EXP 32
7566: PUSH
7567: LD_INT 1
7569: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7570: LD_VAR 0 2
7574: PUSH
7575: LD_INT 4
7577: EQUAL
7578: IFFALSE 8235
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7580: LD_EXP 1
7584: PPUSH
7585: LD_STRING D3Kd-JMM-1
7587: PPUSH
7588: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7592: LD_VAR 0 6
7596: PUSH
7597: LD_INT 120
7599: GREATEREQUAL
7600: PUSH
7601: LD_VAR 0 8
7605: PUSH
7606: LD_INT 120
7608: GREATEREQUAL
7609: AND
7610: IFFALSE 7645
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7612: LD_ADDR_VAR 0 3
7616: PUSH
7617: LD_STRING Q2aK
7619: PPUSH
7620: LD_INT 1
7622: PUSH
7623: LD_INT 2
7625: PUSH
7626: LD_INT 3
7628: PUSH
7629: LD_INT 4
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 98
7642: ST_TO_ADDR
7643: GO 7668
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7645: LD_ADDR_VAR 0 3
7649: PUSH
7650: LD_STRING Q2K
7652: PPUSH
7653: LD_INT 1
7655: PUSH
7656: LD_INT 4
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 98
7667: ST_TO_ADDR
// if dec2 = 1 then
7668: LD_VAR 0 3
7672: PUSH
7673: LD_INT 1
7675: EQUAL
7676: IFFALSE 7710
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7678: LD_EXP 1
7682: PPUSH
7683: LD_STRING D5Ka-JMM-1
7685: PPUSH
7686: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7690: LD_EXP 24
7694: PPUSH
7695: LD_STRING D5Ka-Kurt-1
7697: PPUSH
7698: CALL_OW 88
// warWithLegion = 1 ;
7702: LD_ADDR_EXP 31
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// end ; if dec2 = 2 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 2
7717: EQUAL
7718: IFFALSE 7744
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7720: LD_EXP 1
7724: PPUSH
7725: LD_STRING D3Kb-JMM-1
7727: PPUSH
7728: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7732: LD_EXP 24
7736: PPUSH
7737: LD_STRING D3Kb-Kurt-1
7739: PPUSH
7740: CALL_OW 88
// end ; if dec2 = 3 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 3
7751: EQUAL
7752: IFFALSE 7982
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7754: LD_EXP 1
7758: PPUSH
7759: LD_STRING D3Ke-JMM-1
7761: PPUSH
7762: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7766: LD_EXP 24
7770: PPUSH
7771: LD_STRING D3Ke-Kurt-1
7773: PPUSH
7774: CALL_OW 88
// PrepareLegionForPlayer ;
7778: CALL 4314 0 0
// for i in tmp do
7782: LD_ADDR_VAR 0 1
7786: PUSH
7787: LD_VAR 0 4
7791: PUSH
7792: FOR_IN
7793: IFFALSE 7880
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7795: LD_ADDR_VAR 0 5
7799: PUSH
7800: LD_VAR 0 1
7804: PPUSH
7805: CALL_OW 274
7809: PPUSH
7810: LD_INT 1
7812: PPUSH
7813: CALL_OW 275
7817: ST_TO_ADDR
// if tmp2 >= 120 then
7818: LD_VAR 0 5
7822: PUSH
7823: LD_INT 120
7825: GREATEREQUAL
7826: IFFALSE 7858
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7828: LD_VAR 0 1
7832: PPUSH
7833: CALL_OW 274
7837: PPUSH
7838: LD_INT 1
7840: PPUSH
7841: LD_VAR 0 5
7845: PUSH
7846: LD_INT 120
7848: MINUS
7849: PPUSH
7850: CALL_OW 277
// break ;
7854: GO 7880
// end else
7856: GO 7878
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 274
7867: PPUSH
7868: LD_INT 1
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL_OW 277
// end ; end ;
7878: GO 7792
7880: POP
7881: POP
// for i in tmp do
7882: LD_ADDR_VAR 0 1
7886: PUSH
7887: LD_VAR 0 4
7891: PUSH
7892: FOR_IN
7893: IFFALSE 7980
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7895: LD_ADDR_VAR 0 5
7899: PUSH
7900: LD_VAR 0 1
7904: PPUSH
7905: CALL_OW 274
7909: PPUSH
7910: LD_INT 3
7912: PPUSH
7913: CALL_OW 275
7917: ST_TO_ADDR
// if tmp2 >= 120 then
7918: LD_VAR 0 5
7922: PUSH
7923: LD_INT 120
7925: GREATEREQUAL
7926: IFFALSE 7958
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
7928: LD_VAR 0 1
7932: PPUSH
7933: CALL_OW 274
7937: PPUSH
7938: LD_INT 3
7940: PPUSH
7941: LD_VAR 0 5
7945: PUSH
7946: LD_INT 120
7948: MINUS
7949: PPUSH
7950: CALL_OW 277
// break ;
7954: GO 7980
// end else
7956: GO 7978
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 274
7967: PPUSH
7968: LD_INT 3
7970: PPUSH
7971: LD_INT 0
7973: PPUSH
7974: CALL_OW 277
// end ; end ;
7978: GO 7892
7980: POP
7981: POP
// end ; if dec2 = 4 then
7982: LD_VAR 0 3
7986: PUSH
7987: LD_INT 4
7989: EQUAL
7990: IFFALSE 8235
// begin if dec1 = 3 then
7992: LD_VAR 0 2
7996: PUSH
7997: LD_INT 3
7999: EQUAL
8000: IFFALSE 8235
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8002: LD_EXP 1
8006: PPUSH
8007: LD_STRING D3Kc1-JMM-1
8009: PPUSH
8010: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8014: LD_EXP 24
8018: PPUSH
8019: LD_STRING D3Kc1-Kurt-1
8021: PPUSH
8022: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8026: LD_EXP 1
8030: PPUSH
8031: LD_STRING D3Kc1-JMM-2
8033: PPUSH
8034: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8038: LD_EXP 24
8042: PPUSH
8043: LD_STRING D3Kc1-Kurt-2
8045: PPUSH
8046: CALL_OW 88
// askSiberite = 1 ;
8050: LD_ADDR_EXP 33
8054: PUSH
8055: LD_INT 1
8057: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8058: LD_ADDR_VAR 0 2
8062: PUSH
8063: LD_STRING Q2b
8065: PPUSH
8066: LD_INT 1
8068: PUSH
8069: LD_INT 2
8071: PUSH
8072: LD_INT 3
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 98
8084: ST_TO_ADDR
// if dec2 = 1 then
8085: LD_VAR 0 3
8089: PUSH
8090: LD_INT 1
8092: EQUAL
8093: IFFALSE 8127
// begin Say ( JMM , D4a-JMM-1 ) ;
8095: LD_EXP 1
8099: PPUSH
8100: LD_STRING D4a-JMM-1
8102: PPUSH
8103: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8107: LD_EXP 24
8111: PPUSH
8112: LD_STRING D4b-Kurt-1
8114: PPUSH
8115: CALL_OW 88
// warWithLegion = 1 ;
8119: LD_ADDR_EXP 31
8123: PUSH
8124: LD_INT 1
8126: ST_TO_ADDR
// end ; if dec2 = 2 then
8127: LD_VAR 0 3
8131: PUSH
8132: LD_INT 2
8134: EQUAL
8135: IFFALSE 8169
// begin Say ( JMM , D4b-JMM-1 ) ;
8137: LD_EXP 1
8141: PPUSH
8142: LD_STRING D4b-JMM-1
8144: PPUSH
8145: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8149: LD_EXP 24
8153: PPUSH
8154: LD_STRING D4b-Kurt-1
8156: PPUSH
8157: CALL_OW 88
// warWithLegion = 1 ;
8161: LD_ADDR_EXP 31
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// end ; if dec2 = 3 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 3
8176: EQUAL
8177: IFFALSE 8235
// begin Say ( JMM , D4c-JMM-1 ) ;
8179: LD_EXP 1
8183: PPUSH
8184: LD_STRING D4c-JMM-1
8186: PPUSH
8187: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8191: LD_EXP 24
8195: PPUSH
8196: LD_STRING D4c-Kurt-1
8198: PPUSH
8199: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8203: LD_EXP 1
8207: PPUSH
8208: LD_STRING D4c-JMM-2
8210: PPUSH
8211: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8215: LD_EXP 24
8219: PPUSH
8220: LD_STRING D4c-Kurt-2
8222: PPUSH
8223: CALL_OW 88
// fakeInfo = 1 ;
8227: LD_ADDR_EXP 32
8231: PUSH
8232: LD_INT 1
8234: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8235: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8239: LD_EXP 24
8243: PPUSH
8244: LD_EXP 26
8248: PPUSH
8249: CALL_OW 120
// wait ( 0 0$1 ) ;
8253: LD_INT 35
8255: PPUSH
8256: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8260: LD_EXP 26
8264: PPUSH
8265: LD_INT 4
8267: PPUSH
8268: CALL_OW 113
// wait ( 0 0$3 ) ;
8272: LD_INT 105
8274: PPUSH
8275: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8279: LD_EXP 24
8283: PPUSH
8284: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8288: LD_EXP 26
8292: PPUSH
8293: CALL_OW 64
// end else
8297: GO 9831
// begin ComExitVehicle ( otherKurt ) ;
8299: LD_EXP 25
8303: PPUSH
8304: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8308: LD_EXP 25
8312: PPUSH
8313: CALL_OW 87
// wait ( 0 0$1 ) ;
8317: LD_INT 35
8319: PPUSH
8320: CALL_OW 67
// DialogueOn ;
8324: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
8328: LD_INT 22
8330: PUSH
8331: LD_INT 1
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 26
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: LD_INT 25
8353: PUSH
8354: LD_INT 1
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 25
8363: PUSH
8364: LD_INT 2
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 25
8373: PUSH
8374: LD_INT 3
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: LD_INT 25
8383: PUSH
8384: LD_INT 4
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: PUSH
8403: LD_EXP 1
8407: PUSH
8408: EMPTY
8409: LIST
8410: DIFF
8411: PPUSH
8412: CALL_OW 69
8416: PPUSH
8417: LD_STRING D3-Sol1-1
8419: PPUSH
8420: LD_STRING 
8422: PPUSH
8423: CALL 12306 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8427: LD_EXP 25
8431: PPUSH
8432: LD_STRING D3-Kurt-1
8434: PPUSH
8435: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8439: LD_EXP 1
8443: PPUSH
8444: LD_STRING D3-JMM-1
8446: PPUSH
8447: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8451: LD_EXP 25
8455: PPUSH
8456: LD_STRING D3-Kurt-3
8458: PPUSH
8459: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8463: LD_EXP 1
8467: PPUSH
8468: LD_STRING D3-JMM-3
8470: PPUSH
8471: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8475: LD_EXP 25
8479: PPUSH
8480: LD_STRING D3-Kurt-5
8482: PPUSH
8483: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8487: LD_EXP 25
8491: PPUSH
8492: LD_STRING D3-Kurt-5b
8494: PPUSH
8495: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8499: LD_VAR 0 6
8503: PUSH
8504: LD_INT 100
8506: GREATEREQUAL
8507: PUSH
8508: LD_VAR 0 8
8512: PUSH
8513: LD_INT 100
8515: GREATEREQUAL
8516: AND
8517: IFFALSE 8552
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8519: LD_ADDR_VAR 0 2
8523: PUSH
8524: LD_STRING Q2
8526: PPUSH
8527: LD_INT 1
8529: PUSH
8530: LD_INT 2
8532: PUSH
8533: LD_INT 3
8535: PUSH
8536: LD_INT 4
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 98
8549: ST_TO_ADDR
8550: GO 8575
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_STRING Q2
8559: PPUSH
8560: LD_INT 3
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 98
8574: ST_TO_ADDR
// if dec1 = 1 then
8575: LD_VAR 0 2
8579: PUSH
8580: LD_INT 1
8582: EQUAL
8583: IFFALSE 8617
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8585: LD_EXP 1
8589: PPUSH
8590: LD_STRING D3Ka-JMM-1
8592: PPUSH
8593: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8597: LD_EXP 25
8601: PPUSH
8602: LD_STRING D3Ka-Kurt-1
8604: PPUSH
8605: CALL_OW 88
// warWithLegion = 1 ;
8609: LD_ADDR_EXP 31
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// end ; if dec1 = 2 then
8617: LD_VAR 0 2
8621: PUSH
8622: LD_INT 2
8624: EQUAL
8625: IFFALSE 8851
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8627: LD_EXP 1
8631: PPUSH
8632: LD_STRING D3Kb-JMM-1
8634: PPUSH
8635: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8639: LD_EXP 25
8643: PPUSH
8644: LD_STRING D3Kb-Kurt-1
8646: PPUSH
8647: CALL_OW 88
// for i in tmp do
8651: LD_ADDR_VAR 0 1
8655: PUSH
8656: LD_VAR 0 4
8660: PUSH
8661: FOR_IN
8662: IFFALSE 8749
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8664: LD_ADDR_VAR 0 5
8668: PUSH
8669: LD_VAR 0 1
8673: PPUSH
8674: CALL_OW 274
8678: PPUSH
8679: LD_INT 1
8681: PPUSH
8682: CALL_OW 275
8686: ST_TO_ADDR
// if tmp2 >= 100 then
8687: LD_VAR 0 5
8691: PUSH
8692: LD_INT 100
8694: GREATEREQUAL
8695: IFFALSE 8727
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: CALL_OW 274
8706: PPUSH
8707: LD_INT 1
8709: PPUSH
8710: LD_VAR 0 5
8714: PUSH
8715: LD_INT 100
8717: MINUS
8718: PPUSH
8719: CALL_OW 277
// break ;
8723: GO 8749
// end else
8725: GO 8747
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 274
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: LD_INT 0
8742: PPUSH
8743: CALL_OW 277
// end ; end ;
8747: GO 8661
8749: POP
8750: POP
// for i in tmp do
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_VAR 0 4
8760: PUSH
8761: FOR_IN
8762: IFFALSE 8849
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8764: LD_ADDR_VAR 0 5
8768: PUSH
8769: LD_VAR 0 1
8773: PPUSH
8774: CALL_OW 274
8778: PPUSH
8779: LD_INT 3
8781: PPUSH
8782: CALL_OW 275
8786: ST_TO_ADDR
// if tmp2 >= 100 then
8787: LD_VAR 0 5
8791: PUSH
8792: LD_INT 100
8794: GREATEREQUAL
8795: IFFALSE 8827
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8797: LD_VAR 0 1
8801: PPUSH
8802: CALL_OW 274
8806: PPUSH
8807: LD_INT 3
8809: PPUSH
8810: LD_VAR 0 5
8814: PUSH
8815: LD_INT 100
8817: MINUS
8818: PPUSH
8819: CALL_OW 277
// break ;
8823: GO 8849
// end else
8825: GO 8847
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 274
8836: PPUSH
8837: LD_INT 3
8839: PPUSH
8840: LD_INT 0
8842: PPUSH
8843: CALL_OW 277
// end ; end ;
8847: GO 8761
8849: POP
8850: POP
// end ; if dec1 = 3 then
8851: LD_VAR 0 2
8855: PUSH
8856: LD_INT 3
8858: EQUAL
8859: IFFALSE 9094
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8861: LD_EXP 1
8865: PPUSH
8866: LD_STRING D3Kc1-JMM-1
8868: PPUSH
8869: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8873: LD_EXP 25
8877: PPUSH
8878: LD_STRING D3Kc1-Kurt-1
8880: PPUSH
8881: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8885: LD_EXP 1
8889: PPUSH
8890: LD_STRING D3Kc1-JMM-2
8892: PPUSH
8893: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8897: LD_EXP 25
8901: PPUSH
8902: LD_STRING D3Kc1-Kurt-2
8904: PPUSH
8905: CALL_OW 88
// askSiberite = 1 ;
8909: LD_ADDR_EXP 33
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8917: LD_ADDR_VAR 0 2
8921: PUSH
8922: LD_STRING Q2b
8924: PPUSH
8925: LD_INT 1
8927: PUSH
8928: LD_INT 2
8930: PUSH
8931: LD_INT 3
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: PPUSH
8939: CALL_OW 98
8943: ST_TO_ADDR
// if dec2 = 1 then
8944: LD_VAR 0 3
8948: PUSH
8949: LD_INT 1
8951: EQUAL
8952: IFFALSE 8986
// begin Say ( JMM , D4a-JMM-1 ) ;
8954: LD_EXP 1
8958: PPUSH
8959: LD_STRING D4a-JMM-1
8961: PPUSH
8962: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8966: LD_EXP 25
8970: PPUSH
8971: LD_STRING D4b-Kurt-1
8973: PPUSH
8974: CALL_OW 88
// warWithLegion = 1 ;
8978: LD_ADDR_EXP 31
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// end ; if dec2 = 2 then
8986: LD_VAR 0 3
8990: PUSH
8991: LD_INT 2
8993: EQUAL
8994: IFFALSE 9028
// begin Say ( JMM , D4b-JMM-1 ) ;
8996: LD_EXP 1
9000: PPUSH
9001: LD_STRING D4b-JMM-1
9003: PPUSH
9004: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9008: LD_EXP 25
9012: PPUSH
9013: LD_STRING D4b-Kurt-1
9015: PPUSH
9016: CALL_OW 88
// warWithLegion = 1 ;
9020: LD_ADDR_EXP 31
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// end ; if dec2 = 3 then
9028: LD_VAR 0 3
9032: PUSH
9033: LD_INT 3
9035: EQUAL
9036: IFFALSE 9094
// begin Say ( JMM , D4c-JMM-1 ) ;
9038: LD_EXP 1
9042: PPUSH
9043: LD_STRING D4c-JMM-1
9045: PPUSH
9046: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9050: LD_EXP 25
9054: PPUSH
9055: LD_STRING D4c-Kurt-1
9057: PPUSH
9058: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9062: LD_EXP 1
9066: PPUSH
9067: LD_STRING D4c-JMM-2
9069: PPUSH
9070: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9074: LD_EXP 25
9078: PPUSH
9079: LD_STRING D4c-Kurt-2
9081: PPUSH
9082: CALL_OW 88
// fakeInfo = 1 ;
9086: LD_ADDR_EXP 32
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9094: LD_VAR 0 2
9098: PUSH
9099: LD_INT 4
9101: EQUAL
9102: IFFALSE 9759
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9104: LD_EXP 1
9108: PPUSH
9109: LD_STRING D3Kd-JMM-1
9111: PPUSH
9112: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9116: LD_VAR 0 6
9120: PUSH
9121: LD_INT 200
9123: GREATEREQUAL
9124: PUSH
9125: LD_VAR 0 8
9129: PUSH
9130: LD_INT 200
9132: GREATEREQUAL
9133: AND
9134: IFFALSE 9169
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9136: LD_ADDR_VAR 0 3
9140: PUSH
9141: LD_STRING Q2a
9143: PPUSH
9144: LD_INT 1
9146: PUSH
9147: LD_INT 2
9149: PUSH
9150: LD_INT 3
9152: PUSH
9153: LD_INT 4
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 98
9166: ST_TO_ADDR
9167: GO 9192
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9169: LD_ADDR_VAR 0 3
9173: PUSH
9174: LD_STRING Q2a
9176: PPUSH
9177: LD_INT 1
9179: PUSH
9180: LD_INT 4
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 98
9191: ST_TO_ADDR
// if dec2 = 1 then
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 1
9199: EQUAL
9200: IFFALSE 9234
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9202: LD_EXP 1
9206: PPUSH
9207: LD_STRING D5Ka-JMM-1
9209: PPUSH
9210: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9214: LD_EXP 25
9218: PPUSH
9219: LD_STRING D5Ka-Kurt-1
9221: PPUSH
9222: CALL_OW 88
// warWithLegion = 1 ;
9226: LD_ADDR_EXP 31
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// end ; if dec2 = 2 then
9234: LD_VAR 0 3
9238: PUSH
9239: LD_INT 2
9241: EQUAL
9242: IFFALSE 9268
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9244: LD_EXP 1
9248: PPUSH
9249: LD_STRING D3Kb-JMM-1
9251: PPUSH
9252: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9256: LD_EXP 25
9260: PPUSH
9261: LD_STRING D3Kb-Kurt-1
9263: PPUSH
9264: CALL_OW 88
// end ; if dec2 = 3 then
9268: LD_VAR 0 3
9272: PUSH
9273: LD_INT 3
9275: EQUAL
9276: IFFALSE 9506
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9278: LD_EXP 1
9282: PPUSH
9283: LD_STRING D3Ke-JMM-1
9285: PPUSH
9286: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9290: LD_EXP 25
9294: PPUSH
9295: LD_STRING D3Ke-Kurt-1
9297: PPUSH
9298: CALL_OW 88
// PrepareLegionForPlayer ;
9302: CALL 4314 0 0
// for i in tmp do
9306: LD_ADDR_VAR 0 1
9310: PUSH
9311: LD_VAR 0 4
9315: PUSH
9316: FOR_IN
9317: IFFALSE 9404
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9319: LD_ADDR_VAR 0 5
9323: PUSH
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 274
9333: PPUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 275
9341: ST_TO_ADDR
// if tmp2 >= 200 then
9342: LD_VAR 0 5
9346: PUSH
9347: LD_INT 200
9349: GREATEREQUAL
9350: IFFALSE 9382
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9352: LD_VAR 0 1
9356: PPUSH
9357: CALL_OW 274
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_VAR 0 5
9369: PUSH
9370: LD_INT 200
9372: MINUS
9373: PPUSH
9374: CALL_OW 277
// break ;
9378: GO 9404
// end else
9380: GO 9402
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 274
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: LD_INT 0
9397: PPUSH
9398: CALL_OW 277
// end ; end ;
9402: GO 9316
9404: POP
9405: POP
// for i in tmp do
9406: LD_ADDR_VAR 0 1
9410: PUSH
9411: LD_VAR 0 4
9415: PUSH
9416: FOR_IN
9417: IFFALSE 9504
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_VAR 0 1
9428: PPUSH
9429: CALL_OW 274
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 275
9441: ST_TO_ADDR
// if tmp2 >= 200 then
9442: LD_VAR 0 5
9446: PUSH
9447: LD_INT 200
9449: GREATEREQUAL
9450: IFFALSE 9482
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9452: LD_VAR 0 1
9456: PPUSH
9457: CALL_OW 274
9461: PPUSH
9462: LD_INT 3
9464: PPUSH
9465: LD_VAR 0 5
9469: PUSH
9470: LD_INT 200
9472: MINUS
9473: PPUSH
9474: CALL_OW 277
// break ;
9478: GO 9504
// end else
9480: GO 9502
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9482: LD_VAR 0 1
9486: PPUSH
9487: CALL_OW 274
9491: PPUSH
9492: LD_INT 3
9494: PPUSH
9495: LD_INT 0
9497: PPUSH
9498: CALL_OW 277
// end ; end ;
9502: GO 9416
9504: POP
9505: POP
// end ; if dec2 = 4 then
9506: LD_VAR 0 3
9510: PUSH
9511: LD_INT 4
9513: EQUAL
9514: IFFALSE 9759
// begin if dec1 = 3 then
9516: LD_VAR 0 2
9520: PUSH
9521: LD_INT 3
9523: EQUAL
9524: IFFALSE 9759
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9526: LD_EXP 1
9530: PPUSH
9531: LD_STRING D3Kc1-JMM-1
9533: PPUSH
9534: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9538: LD_EXP 25
9542: PPUSH
9543: LD_STRING D3Kc1-Kurt-1
9545: PPUSH
9546: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9550: LD_EXP 1
9554: PPUSH
9555: LD_STRING D3Kc1-JMM-2
9557: PPUSH
9558: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9562: LD_EXP 25
9566: PPUSH
9567: LD_STRING D3Kc1-Kurt-2
9569: PPUSH
9570: CALL_OW 88
// askSiberite = 1 ;
9574: LD_ADDR_EXP 33
9578: PUSH
9579: LD_INT 1
9581: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_STRING Q2b
9589: PPUSH
9590: LD_INT 1
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 98
9608: ST_TO_ADDR
// if dec2 = 1 then
9609: LD_VAR 0 3
9613: PUSH
9614: LD_INT 1
9616: EQUAL
9617: IFFALSE 9651
// begin Say ( JMM , D4a-JMM-1 ) ;
9619: LD_EXP 1
9623: PPUSH
9624: LD_STRING D4a-JMM-1
9626: PPUSH
9627: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9631: LD_EXP 25
9635: PPUSH
9636: LD_STRING D4b-Kurt-1
9638: PPUSH
9639: CALL_OW 88
// warWithLegion = 1 ;
9643: LD_ADDR_EXP 31
9647: PUSH
9648: LD_INT 1
9650: ST_TO_ADDR
// end ; if dec2 = 2 then
9651: LD_VAR 0 3
9655: PUSH
9656: LD_INT 2
9658: EQUAL
9659: IFFALSE 9693
// begin Say ( JMM , D4b-JMM-1 ) ;
9661: LD_EXP 1
9665: PPUSH
9666: LD_STRING D4b-JMM-1
9668: PPUSH
9669: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9673: LD_EXP 25
9677: PPUSH
9678: LD_STRING D4b-Kurt-1
9680: PPUSH
9681: CALL_OW 88
// warWithLegion = 1 ;
9685: LD_ADDR_EXP 31
9689: PUSH
9690: LD_INT 1
9692: ST_TO_ADDR
// end ; if dec2 = 3 then
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 3
9700: EQUAL
9701: IFFALSE 9759
// begin Say ( JMM , D4c-JMM-1 ) ;
9703: LD_EXP 1
9707: PPUSH
9708: LD_STRING D4c-JMM-1
9710: PPUSH
9711: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9715: LD_EXP 25
9719: PPUSH
9720: LD_STRING D4c-Kurt-1
9722: PPUSH
9723: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9727: LD_EXP 1
9731: PPUSH
9732: LD_STRING D4c-JMM-2
9734: PPUSH
9735: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9739: LD_EXP 25
9743: PPUSH
9744: LD_STRING D4c-Kurt-2
9746: PPUSH
9747: CALL_OW 88
// fakeInfo = 1 ;
9751: LD_ADDR_EXP 32
9755: PUSH
9756: LD_INT 1
9758: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9759: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9763: LD_INT 8
9765: PPUSH
9766: LD_INT 8
9768: PPUSH
9769: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9773: LD_EXP 25
9777: PPUSH
9778: LD_EXP 26
9782: PPUSH
9783: CALL_OW 120
// wait ( 0 0$1 ) ;
9787: LD_INT 35
9789: PPUSH
9790: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9794: LD_EXP 26
9798: PPUSH
9799: LD_INT 4
9801: PPUSH
9802: CALL_OW 113
// wait ( 0 0$6 ) ;
9806: LD_INT 210
9808: PPUSH
9809: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9813: LD_EXP 25
9817: PPUSH
9818: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9822: LD_EXP 26
9826: PPUSH
9827: CALL_OW 64
// end ; end ;
9831: PPOPN 8
9833: END
// every 0 0$10 trigger warWithLegion = 1 do
9834: LD_EXP 31
9838: PUSH
9839: LD_INT 1
9841: EQUAL
9842: IFFALSE 9851
9844: GO 9846
9846: DISABLE
// PrepareAttackLegion ;
9847: CALL 5042 0 0
9851: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9852: LD_EXP 15
9856: PPUSH
9857: CALL_OW 305
9861: PUSH
9862: LD_EXP 15
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: CALL_OW 289
9874: NOT
9875: AND
9876: PUSH
9877: LD_EXP 15
9881: PPUSH
9882: LD_INT 2
9884: PPUSH
9885: CALL_OW 289
9889: NOT
9890: AND
9891: PUSH
9892: LD_EXP 15
9896: PPUSH
9897: LD_INT 3
9899: PPUSH
9900: CALL_OW 289
9904: NOT
9905: AND
9906: IFFALSE 9923
9908: GO 9910
9910: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9911: LD_EXP 15
9915: PPUSH
9916: LD_INT 4
9918: PPUSH
9919: CALL_OW 235
9923: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9924: LD_EXP 16
9928: PPUSH
9929: CALL_OW 305
9933: PUSH
9934: LD_EXP 16
9938: PPUSH
9939: LD_INT 1
9941: PPUSH
9942: CALL_OW 289
9946: NOT
9947: AND
9948: PUSH
9949: LD_EXP 16
9953: PPUSH
9954: LD_INT 2
9956: PPUSH
9957: CALL_OW 289
9961: NOT
9962: AND
9963: PUSH
9964: LD_EXP 16
9968: PPUSH
9969: LD_INT 3
9971: PPUSH
9972: CALL_OW 289
9976: NOT
9977: AND
9978: IFFALSE 9995
9980: GO 9982
9982: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9983: LD_EXP 16
9987: PPUSH
9988: LD_INT 4
9990: PPUSH
9991: CALL_OW 235
9995: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9996: LD_EXP 17
10000: PPUSH
10001: CALL_OW 305
10005: PUSH
10006: LD_EXP 17
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: CALL_OW 289
10018: NOT
10019: AND
10020: PUSH
10021: LD_EXP 17
10025: PPUSH
10026: LD_INT 2
10028: PPUSH
10029: CALL_OW 289
10033: NOT
10034: AND
10035: PUSH
10036: LD_EXP 17
10040: PPUSH
10041: LD_INT 3
10043: PPUSH
10044: CALL_OW 289
10048: NOT
10049: AND
10050: IFFALSE 10067
10052: GO 10054
10054: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10055: LD_EXP 17
10059: PPUSH
10060: LD_INT 4
10062: PPUSH
10063: CALL_OW 235
10067: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10068: LD_EXP 18
10072: PPUSH
10073: CALL_OW 305
10077: PUSH
10078: LD_EXP 18
10082: PPUSH
10083: LD_INT 1
10085: PPUSH
10086: CALL_OW 289
10090: NOT
10091: AND
10092: PUSH
10093: LD_EXP 18
10097: PPUSH
10098: LD_INT 2
10100: PPUSH
10101: CALL_OW 289
10105: NOT
10106: AND
10107: PUSH
10108: LD_EXP 18
10112: PPUSH
10113: LD_INT 3
10115: PPUSH
10116: CALL_OW 289
10120: NOT
10121: AND
10122: IFFALSE 10139
10124: GO 10126
10126: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10127: LD_EXP 18
10131: PPUSH
10132: LD_INT 4
10134: PPUSH
10135: CALL_OW 235
10139: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10140: LD_EXP 19
10144: PPUSH
10145: CALL_OW 305
10149: PUSH
10150: LD_EXP 19
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 289
10162: NOT
10163: AND
10164: PUSH
10165: LD_EXP 19
10169: PPUSH
10170: LD_INT 2
10172: PPUSH
10173: CALL_OW 289
10177: NOT
10178: AND
10179: PUSH
10180: LD_EXP 19
10184: PPUSH
10185: LD_INT 3
10187: PPUSH
10188: CALL_OW 289
10192: NOT
10193: AND
10194: PUSH
10195: LD_EXP 19
10199: PPUSH
10200: LD_INT 2
10202: PPUSH
10203: CALL_OW 289
10207: NOT
10208: AND
10209: IFFALSE 10226
10211: GO 10213
10213: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10214: LD_EXP 19
10218: PPUSH
10219: LD_INT 4
10221: PPUSH
10222: CALL_OW 235
10226: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10227: LD_EXP 20
10231: PPUSH
10232: CALL_OW 305
10236: PUSH
10237: LD_EXP 20
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: CALL_OW 289
10249: NOT
10250: AND
10251: PUSH
10252: LD_EXP 20
10256: PPUSH
10257: LD_INT 2
10259: PPUSH
10260: CALL_OW 289
10264: NOT
10265: AND
10266: PUSH
10267: LD_EXP 20
10271: PPUSH
10272: LD_INT 3
10274: PPUSH
10275: CALL_OW 289
10279: NOT
10280: AND
10281: IFFALSE 10298
10283: GO 10285
10285: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10286: LD_EXP 20
10290: PPUSH
10291: LD_INT 4
10293: PPUSH
10294: CALL_OW 235
10298: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10299: LD_EXP 21
10303: PPUSH
10304: CALL_OW 305
10308: PUSH
10309: LD_EXP 21
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: CALL_OW 289
10321: NOT
10322: AND
10323: PUSH
10324: LD_EXP 21
10328: PPUSH
10329: LD_INT 2
10331: PPUSH
10332: CALL_OW 289
10336: NOT
10337: AND
10338: PUSH
10339: LD_EXP 21
10343: PPUSH
10344: LD_INT 3
10346: PPUSH
10347: CALL_OW 289
10351: NOT
10352: AND
10353: IFFALSE 10370
10355: GO 10357
10357: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10358: LD_EXP 21
10362: PPUSH
10363: LD_INT 4
10365: PPUSH
10366: CALL_OW 235
10370: END
// every 0 0$1 do var i ;
10371: GO 10373
10373: DISABLE
10374: LD_INT 0
10376: PPUSH
// begin enable ;
10377: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10378: LD_ADDR_VAR 0 1
10382: PUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 4
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PUSH
10398: FOR_IN
10399: IFFALSE 10438
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10401: LD_VAR 0 1
10405: PPUSH
10406: LD_INT 4
10408: PPUSH
10409: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10413: LD_VAR 0 1
10417: PPUSH
10418: LD_INT 4
10420: PPUSH
10421: CALL_OW 308
10425: IFFALSE 10436
// RemoveUnit ( i ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: CALL_OW 64
// end ;
10436: GO 10398
10438: POP
10439: POP
// end ;
10440: PPOPN 1
10442: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10443: LD_EXP 28
10447: PUSH
10448: LD_INT 1
10450: EQUAL
10451: IFFALSE 10826
10453: GO 10455
10455: DISABLE
10456: LD_INT 0
10458: PPUSH
10459: PPUSH
10460: PPUSH
// begin enable ;
10461: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10462: LD_ADDR_VAR 0 2
10466: PUSH
10467: LD_INT 12
10469: PPUSH
10470: LD_INT 22
10472: PUSH
10473: LD_INT 3
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PUSH
10480: LD_INT 21
10482: PUSH
10483: LD_INT 2
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PPUSH
10494: CALL_OW 70
10498: ST_TO_ADDR
// for i in enemyVehs do
10499: LD_ADDR_VAR 0 1
10503: PUSH
10504: LD_VAR 0 2
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10824
// begin if See ( 1 , i ) then
10512: LD_INT 1
10514: PPUSH
10515: LD_VAR 0 1
10519: PPUSH
10520: CALL_OW 292
10524: IFFALSE 10822
// begin disable ;
10526: DISABLE
// DialogueOn ;
10527: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10540: LD_INT 22
10542: PUSH
10543: LD_INT 1
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 26
10552: PUSH
10553: LD_INT 1
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_EXP 1
10568: PUSH
10569: EMPTY
10570: LIST
10571: DIFF
10572: PPUSH
10573: CALL_OW 69
10577: PPUSH
10578: LD_STRING DT1-Sol1-1
10580: PPUSH
10581: LD_STRING DT1-FSol1-1
10583: PPUSH
10584: CALL 12306 0 3
// dec = ShowQuery2 ;
10588: LD_ADDR_VAR 0 3
10592: PUSH
10593: CALL 12916 0 0
10597: ST_TO_ADDR
// if dec = 1 then
10598: LD_VAR 0 3
10602: PUSH
10603: LD_INT 1
10605: EQUAL
10606: IFFALSE 10712
// begin Say ( JMM , D2-JMM-1 ) ;
10608: LD_EXP 1
10612: PPUSH
10613: LD_STRING D2-JMM-1
10615: PPUSH
10616: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10620: LD_EXP 22
10624: PPUSH
10625: LD_STRING D2-Pow-1
10627: PPUSH
10628: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10632: LD_EXP 1
10636: PPUSH
10637: LD_STRING D2a-JMM-1
10639: PPUSH
10640: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10644: LD_EXP 22
10648: PPUSH
10649: LD_STRING D2a-Pow-1
10651: PPUSH
10652: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10656: LD_EXP 1
10660: PPUSH
10661: LD_STRING D2a-JMM-2
10663: PPUSH
10664: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10668: LD_EXP 22
10672: PPUSH
10673: LD_STRING D2a-Pow-2
10675: PPUSH
10676: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10680: LD_EXP 1
10684: PPUSH
10685: LD_STRING D2a-JMM-3
10687: PPUSH
10688: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10692: LD_EXP 22
10696: PPUSH
10697: LD_STRING D2a-Pow-3
10699: PPUSH
10700: CALL_OW 94
// secondPass = 2 ;
10704: LD_ADDR_EXP 28
10708: PUSH
10709: LD_INT 2
10711: ST_TO_ADDR
// end ; if dec = 2 then
10712: LD_VAR 0 3
10716: PUSH
10717: LD_INT 2
10719: EQUAL
10720: IFFALSE 10814
// begin Say ( JMM , D2-JMM-1 ) ;
10722: LD_EXP 1
10726: PPUSH
10727: LD_STRING D2-JMM-1
10729: PPUSH
10730: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10734: LD_EXP 22
10738: PPUSH
10739: LD_STRING D2-Pow-1
10741: PPUSH
10742: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10746: LD_EXP 1
10750: PPUSH
10751: LD_STRING D2b-JMM-1
10753: PPUSH
10754: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10758: LD_EXP 22
10762: PPUSH
10763: LD_STRING D2b-Pow-1
10765: PPUSH
10766: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10770: LD_EXP 1
10774: PPUSH
10775: LD_STRING D2c-JMM-1
10777: PPUSH
10778: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10782: LD_EXP 22
10786: PPUSH
10787: LD_STRING D2c-Pow-1
10789: PPUSH
10790: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10794: LD_EXP 1
10798: PPUSH
10799: LD_STRING D2c-JMM-2
10801: PPUSH
10802: CALL_OW 88
// secondPass = 2 ;
10806: LD_ADDR_EXP 28
10810: PUSH
10811: LD_INT 2
10813: ST_TO_ADDR
// end ; DialogueOff ;
10814: CALL_OW 7
// exit ;
10818: POP
10819: POP
10820: GO 10826
// end ; end ;
10822: GO 10509
10824: POP
10825: POP
// end ;
10826: PPOPN 3
10828: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10829: LD_EXP 29
10833: PUSH
10834: LD_INT 1
10836: EQUAL
10837: IFFALSE 10997
10839: GO 10841
10841: DISABLE
10842: LD_INT 0
10844: PPUSH
10845: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_INT 11
10853: PPUSH
10854: LD_INT 22
10856: PUSH
10857: LD_INT 3
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 24
10866: PUSH
10867: LD_INT 250
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 70
10882: ST_TO_ADDR
// enable ;
10883: ENABLE
// for i in vehicles do
10884: LD_ADDR_VAR 0 1
10888: PUSH
10889: LD_VAR 0 2
10893: PUSH
10894: FOR_IN
10895: IFFALSE 10995
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10897: LD_INT 1
10899: PPUSH
10900: LD_VAR 0 1
10904: PPUSH
10905: CALL_OW 292
10909: PUSH
10910: LD_EXP 29
10914: PUSH
10915: LD_INT 1
10917: EQUAL
10918: AND
10919: PUSH
10920: LD_EXP 30
10924: PUSH
10925: LD_INT 4
10927: LESSEQUAL
10928: AND
10929: IFFALSE 10993
// begin disable ;
10931: DISABLE
// DialogueOn ;
10932: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10936: LD_INT 22
10938: PUSH
10939: LD_INT 1
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 21
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PPUSH
10960: CALL_OW 69
10964: PPUSH
10965: LD_STRING DT1-Sol1-1
10967: PPUSH
10968: LD_STRING DT1-FSol1-1
10970: PPUSH
10971: CALL 12306 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10975: LD_EXP 1
10979: PPUSH
10980: LD_STRING DT1-JMM-1
10982: PPUSH
10983: CALL_OW 88
// DialogueOff ;
10987: CALL_OW 7
// break ;
10991: GO 10995
// end ; end ;
10993: GO 10894
10995: POP
10996: POP
// end ;
10997: PPOPN 2
10999: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11000: LD_EXP 29
11004: PUSH
11005: LD_INT 1
11007: EQUAL
11008: PUSH
11009: LD_INT 11
11011: PPUSH
11012: LD_INT 22
11014: PUSH
11015: LD_INT 3
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 24
11024: PUSH
11025: LD_INT 251
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 2
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 21
11047: PUSH
11048: LD_INT 1
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL_OW 70
11069: PUSH
11070: LD_INT 0
11072: EQUAL
11073: AND
11074: PUSH
11075: LD_EXP 30
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: LD_INT 4
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_OWVAR 67
11098: ARRAY
11099: LESSEQUAL
11100: AND
11101: PUSH
11102: LD_EXP 30
11106: PUSH
11107: LD_INT 5
11109: GREATER
11110: AND
11111: IFFALSE 11195
11113: GO 11115
11115: DISABLE
// begin vehicleTeleported = 2 ;
11116: LD_ADDR_EXP 29
11120: PUSH
11121: LD_INT 2
11123: ST_TO_ADDR
// DialogueOn ;
11124: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11128: LD_EXP 1
11132: PPUSH
11133: LD_STRING DT1a-JMM-1
11135: PPUSH
11136: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11140: LD_INT 22
11142: PUSH
11143: LD_INT 1
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 69
11168: PPUSH
11169: LD_STRING DT1a-Sol1-1
11171: PPUSH
11172: LD_STRING DT1a-FSol1-1
11174: PPUSH
11175: CALL 12306 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11179: LD_EXP 1
11183: PPUSH
11184: LD_STRING DT1a-JMM-2
11186: PPUSH
11187: CALL_OW 88
// DialogueOff ;
11191: CALL_OW 7
// end ;
11195: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11196: LD_EXP 29
11200: PUSH
11201: LD_INT 3
11203: EQUAL
11204: PUSH
11205: LD_EXP 30
11209: PUSH
11210: LD_INT 4
11212: GREATER
11213: AND
11214: IFFALSE 11352
11216: GO 11218
11218: DISABLE
11219: LD_INT 0
11221: PPUSH
11222: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11223: LD_ADDR_VAR 0 2
11227: PUSH
11228: LD_INT 11
11230: PPUSH
11231: LD_INT 22
11233: PUSH
11234: LD_INT 3
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 24
11243: PUSH
11244: LD_INT 250
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 70
11259: ST_TO_ADDR
// enable ;
11260: ENABLE
// for i in vehicles do
11261: LD_ADDR_VAR 0 1
11265: PUSH
11266: LD_VAR 0 2
11270: PUSH
11271: FOR_IN
11272: IFFALSE 11350
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11274: LD_INT 1
11276: PPUSH
11277: LD_VAR 0 1
11281: PPUSH
11282: CALL_OW 292
11286: PUSH
11287: LD_EXP 29
11291: PUSH
11292: LD_INT 3
11294: EQUAL
11295: AND
11296: IFFALSE 11348
// begin disable ;
11298: DISABLE
// DialogueOn ;
11299: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11303: LD_INT 22
11305: PUSH
11306: LD_INT 1
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 21
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 69
11331: PPUSH
11332: LD_STRING DT2-Sol1-1
11334: PPUSH
11335: LD_STRING DT2-FSol1-1
11337: PPUSH
11338: CALL 12306 0 3
// DialogueOff ;
11342: CALL_OW 7
// break ;
11346: GO 11350
// end ; end ;
11348: GO 11271
11350: POP
11351: POP
// end ;
11352: PPOPN 2
11354: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11355: LD_EXP 29
11359: PUSH
11360: LD_INT 3
11362: EQUAL
11363: PUSH
11364: LD_INT 11
11366: PPUSH
11367: LD_INT 22
11369: PUSH
11370: LD_INT 3
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 24
11379: PUSH
11380: LD_INT 251
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 21
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 21
11402: PUSH
11403: LD_INT 1
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 70
11424: PUSH
11425: LD_INT 0
11427: EQUAL
11428: AND
11429: PUSH
11430: LD_EXP 30
11434: PUSH
11435: LD_INT 6
11437: PUSH
11438: LD_INT 6
11440: PUSH
11441: LD_INT 8
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: LIST
11448: PUSH
11449: LD_OWVAR 67
11453: ARRAY
11454: EQUAL
11455: AND
11456: IFFALSE 11540
11458: GO 11460
11460: DISABLE
// begin vehicleTeleported = 4 ;
11461: LD_ADDR_EXP 29
11465: PUSH
11466: LD_INT 4
11468: ST_TO_ADDR
// DialogueOn ;
11469: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11473: LD_EXP 1
11477: PPUSH
11478: LD_STRING DT2a-JMM-1
11480: PPUSH
11481: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11485: LD_INT 22
11487: PUSH
11488: LD_INT 1
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 21
11497: PUSH
11498: LD_INT 1
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 69
11513: PPUSH
11514: LD_STRING DT2a-Sol1-1
11516: PPUSH
11517: LD_STRING DT2a-FSol1-1
11519: PPUSH
11520: CALL 12306 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
11524: LD_EXP 3
11528: PPUSH
11529: LD_STRING DT2a-Don-1
11531: PPUSH
11532: CALL_OW 88
// DialogueOff ;
11536: CALL_OW 7
// end ;
11540: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11541: LD_INT 1
11543: PPUSH
11544: LD_INT 45
11546: PPUSH
11547: LD_INT 74
11549: PPUSH
11550: CALL_OW 293
11554: IFFALSE 11649
11556: GO 11558
11558: DISABLE
// begin DialogueOn ;
11559: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11563: LD_INT 36
11565: PPUSH
11566: LD_INT 55
11568: PPUSH
11569: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11573: LD_INT 22
11575: PUSH
11576: LD_INT 1
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 21
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 69
11601: PPUSH
11602: LD_STRING D5-Sol1-1
11604: PPUSH
11605: LD_STRING D5-FSol1-
11607: PPUSH
11608: CALL 12306 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
11612: LD_EXP 31
11616: PUSH
11617: LD_INT 1
11619: EQUAL
11620: PUSH
11621: LD_EXP 3
11625: PPUSH
11626: CALL_OW 300
11630: AND
11631: IFFALSE 11645
// Say ( Donaldson , D5-Don-1 ) ;
11633: LD_EXP 3
11637: PPUSH
11638: LD_STRING D5-Don-1
11640: PPUSH
11641: CALL_OW 88
// DialogueOff ;
11645: CALL_OW 7
// end ;
11649: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
11650: LD_INT 1
11652: PPUSH
11653: LD_INT 10
11655: PPUSH
11656: CALL_OW 292
11660: IFFALSE 11747
11662: GO 11664
11664: DISABLE
// begin DialogueOn ;
11665: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
11669: LD_INT 10
11671: PPUSH
11672: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11676: LD_INT 22
11678: PUSH
11679: LD_INT 1
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 1
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 69
11704: PUSH
11705: LD_EXP 1
11709: PUSH
11710: EMPTY
11711: LIST
11712: DIFF
11713: PPUSH
11714: LD_STRING DT3-Sol1-1
11716: PPUSH
11717: LD_STRING DT3-FSol1-1
11719: PPUSH
11720: CALL 12306 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11724: LD_EXP 1
11728: PPUSH
11729: LD_STRING DT3-JMM-1
11731: PPUSH
11732: CALL_OW 88
// DialogueOff ;
11736: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11740: LD_STRING M2
11742: PPUSH
11743: CALL_OW 337
// end ;
11747: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 do var i , j , vehs ;
11748: LD_INT 3
11750: PPUSH
11751: CALL_OW 303
11755: PUSH
11756: LD_INT 4
11758: PPUSH
11759: CALL_OW 303
11763: OR
11764: PUSH
11765: LD_INT 22
11767: PPUSH
11768: LD_INT 22
11770: PUSH
11771: LD_INT 1
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PPUSH
11778: CALL_OW 70
11782: PUSH
11783: LD_INT 0
11785: GREATER
11786: OR
11787: IFFALSE 11994
11789: GO 11791
11791: DISABLE
11792: LD_INT 0
11794: PPUSH
11795: PPUSH
11796: PPUSH
// begin ruAI = 0 ;
11797: LD_ADDR_EXP 42
11801: PUSH
11802: LD_INT 0
11804: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: LD_INT 10
11812: PPUSH
11813: LD_INT 22
11815: PUSH
11816: LD_INT 3
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 21
11825: PUSH
11826: LD_INT 2
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 58
11835: PUSH
11836: EMPTY
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: PPUSH
11844: CALL_OW 70
11848: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11849: LD_EXP 35
11853: PPUSH
11854: CALL_OW 122
// wait ( 0 0$1 ) ;
11858: LD_INT 35
11860: PPUSH
11861: CALL_OW 67
// DialogueOn ;
11865: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11869: LD_EXP 1
11873: PPUSH
11874: LD_STRING D6-JMM-1
11876: PPUSH
11877: CALL_OW 88
// DialogueOff ;
11881: CALL_OW 7
// if vehs > 0 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 0
11892: GREATER
11893: IFFALSE 11963
// for i := 1 to RuScientists do
11895: LD_ADDR_VAR 0 1
11899: PUSH
11900: DOUBLE
11901: LD_INT 1
11903: DEC
11904: ST_TO_ADDR
11905: LD_EXP 35
11909: PUSH
11910: FOR_TO
11911: IFFALSE 11959
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11913: LD_EXP 35
11917: PUSH
11918: LD_VAR 0 1
11922: ARRAY
11923: PPUSH
11924: LD_INT 3
11926: PUSH
11927: LD_INT 60
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PPUSH
11937: CALL_OW 72
11941: PPUSH
11942: LD_VAR 0 3
11946: PUSH
11947: LD_VAR 0 1
11951: ARRAY
11952: PPUSH
11953: CALL_OW 120
11957: GO 11910
11959: POP
11960: POP
11961: GO 11994
// ComMoveToArea ( RuScientists , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11963: LD_EXP 35
11967: PPUSH
11968: LD_INT 13
11970: PUSH
11971: LD_INT 14
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 1
11980: PPUSH
11981: LD_INT 2
11983: PPUSH
11984: CALL_OW 12
11988: ARRAY
11989: PPUSH
11990: CALL_OW 113
// end ;
11994: PPOPN 3
11996: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
11997: LD_EXP 42
12001: PUSH
12002: LD_INT 0
12004: EQUAL
12005: IFFALSE 12195
12007: GO 12009
12009: DISABLE
12010: LD_INT 0
12012: PPUSH
12013: PPUSH
// begin enable ;
12014: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12015: LD_ADDR_VAR 0 1
12019: PUSH
12020: LD_INT 13
12022: PPUSH
12023: LD_INT 22
12025: PUSH
12026: LD_INT 3
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: PPUSH
12036: CALL_OW 70
12040: PUSH
12041: FOR_IN
12042: IFFALSE 12103
// begin for j in RuScientists do
12044: LD_ADDR_VAR 0 2
12048: PUSH
12049: LD_EXP 35
12053: PUSH
12054: FOR_IN
12055: IFFALSE 12090
// if j = i then
12057: LD_VAR 0 2
12061: PUSH
12062: LD_VAR 0 1
12066: EQUAL
12067: IFFALSE 12088
// RuScientists = RuScientists diff [ i ] ;
12069: LD_ADDR_EXP 35
12073: PUSH
12074: LD_EXP 35
12078: PUSH
12079: LD_VAR 0 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: DIFF
12087: ST_TO_ADDR
12088: GO 12054
12090: POP
12091: POP
// RemoveUnit ( i ) ;
12092: LD_VAR 0 1
12096: PPUSH
12097: CALL_OW 64
// end ;
12101: GO 12041
12103: POP
12104: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12105: LD_ADDR_VAR 0 1
12109: PUSH
12110: LD_INT 14
12112: PPUSH
12113: LD_INT 22
12115: PUSH
12116: LD_INT 3
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: PPUSH
12126: CALL_OW 70
12130: PUSH
12131: FOR_IN
12132: IFFALSE 12193
// begin for j in RuScientists do
12134: LD_ADDR_VAR 0 2
12138: PUSH
12139: LD_EXP 35
12143: PUSH
12144: FOR_IN
12145: IFFALSE 12180
// if j = i then
12147: LD_VAR 0 2
12151: PUSH
12152: LD_VAR 0 1
12156: EQUAL
12157: IFFALSE 12178
// RuScientists = RuScientists diff [ i ] ;
12159: LD_ADDR_EXP 35
12163: PUSH
12164: LD_EXP 35
12168: PUSH
12169: LD_VAR 0 1
12173: PUSH
12174: EMPTY
12175: LIST
12176: DIFF
12177: ST_TO_ADDR
12178: GO 12144
12180: POP
12181: POP
// RemoveUnit ( i ) ;
12182: LD_VAR 0 1
12186: PPUSH
12187: CALL_OW 64
// end ;
12191: GO 12131
12193: POP
12194: POP
// end ; end_of_file
12195: PPOPN 2
12197: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12198: LD_INT 0
12200: PPUSH
12201: PPUSH
// if exist_mode then
12202: LD_VAR 0 2
12206: IFFALSE 12225
// unit := CreateCharacter ( ident ) else
12208: LD_ADDR_VAR 0 4
12212: PUSH
12213: LD_VAR 0 1
12217: PPUSH
12218: CALL_OW 34
12222: ST_TO_ADDR
12223: GO 12240
// unit := NewCharacter ( ident ) ;
12225: LD_ADDR_VAR 0 4
12229: PUSH
12230: LD_VAR 0 1
12234: PPUSH
12235: CALL_OW 25
12239: ST_TO_ADDR
// result := unit ;
12240: LD_ADDR_VAR 0 3
12244: PUSH
12245: LD_VAR 0 4
12249: ST_TO_ADDR
// end ;
12250: LD_VAR 0 3
12254: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12255: LD_INT 0
12257: PPUSH
12258: PPUSH
// for i in charactersList do
12259: LD_ADDR_VAR 0 4
12263: PUSH
12264: LD_VAR 0 1
12268: PUSH
12269: FOR_IN
12270: IFFALSE 12299
// begin if IsOk ( i ) then
12272: LD_VAR 0 4
12276: PPUSH
12277: CALL_OW 302
12281: IFFALSE 12297
// SaveCharacters ( i , ident ) ;
12283: LD_VAR 0 4
12287: PPUSH
12288: LD_VAR 0 2
12292: PPUSH
12293: CALL_OW 38
// end ;
12297: GO 12269
12299: POP
12300: POP
// end ;
12301: LD_VAR 0 3
12305: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12306: LD_INT 0
12308: PPUSH
12309: PPUSH
12310: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12311: LD_ADDR_VAR 0 1
12315: PUSH
12316: LD_VAR 0 1
12320: PUSH
12321: LD_EXP 1
12325: PUSH
12326: LD_EXP 7
12330: PUSH
12331: LD_EXP 3
12335: PUSH
12336: LD_EXP 4
12340: PUSH
12341: LD_EXP 5
12345: PUSH
12346: LD_EXP 2
12350: PUSH
12351: LD_EXP 12
12355: PUSH
12356: LD_EXP 13
12360: PUSH
12361: LD_EXP 9
12365: PUSH
12366: LD_EXP 11
12370: PUSH
12371: LD_EXP 6
12375: PUSH
12376: LD_EXP 8
12380: PUSH
12381: LD_EXP 10
12385: PUSH
12386: LD_EXP 22
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: DIFF
12407: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
12408: LD_ADDR_VAR 0 6
12412: PUSH
12413: LD_INT 1
12415: PPUSH
12416: LD_VAR 0 1
12420: PPUSH
12421: CALL_OW 12
12425: ST_TO_ADDR
// for i = 1 to characters do
12426: LD_ADDR_VAR 0 5
12430: PUSH
12431: DOUBLE
12432: LD_INT 1
12434: DEC
12435: ST_TO_ADDR
12436: LD_VAR 0 1
12440: PUSH
12441: FOR_TO
12442: IFFALSE 12552
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
12444: LD_VAR 0 5
12448: PUSH
12449: LD_VAR 0 6
12453: EQUAL
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: LD_VAR 0 5
12464: ARRAY
12465: PPUSH
12466: CALL_OW 258
12470: PUSH
12471: LD_INT 1
12473: EQUAL
12474: AND
12475: IFFALSE 12497
// Say ( characters [ i ] , dialogMID ) ;
12477: LD_VAR 0 1
12481: PUSH
12482: LD_VAR 0 5
12486: ARRAY
12487: PPUSH
12488: LD_VAR 0 2
12492: PPUSH
12493: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
12497: LD_VAR 0 5
12501: PUSH
12502: LD_VAR 0 6
12506: EQUAL
12507: PUSH
12508: LD_VAR 0 1
12512: PUSH
12513: LD_VAR 0 5
12517: ARRAY
12518: PPUSH
12519: CALL_OW 258
12523: PUSH
12524: LD_INT 2
12526: EQUAL
12527: AND
12528: IFFALSE 12550
// Say ( characters [ i ] , dialogFID ) ;
12530: LD_VAR 0 1
12534: PUSH
12535: LD_VAR 0 5
12539: ARRAY
12540: PPUSH
12541: LD_VAR 0 3
12545: PPUSH
12546: CALL_OW 88
// end ;
12550: GO 12441
12552: POP
12553: POP
// end ;
12554: LD_VAR 0 4
12558: RET
// export function PrepareDifficulty ; var tmp ; begin
12559: LD_INT 0
12561: PPUSH
12562: PPUSH
// if Difficulty = 1 then
12563: LD_OWVAR 67
12567: PUSH
12568: LD_INT 1
12570: EQUAL
12571: IFFALSE 12589
// begin RuSolMinLevel = 8 ;
12573: LD_ADDR_EXP 37
12577: PUSH
12578: LD_INT 8
12580: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12581: LD_ADDR_EXP 38
12585: PUSH
12586: LD_INT 10
12588: ST_TO_ADDR
// end ; if Difficulty = 2 then
12589: LD_OWVAR 67
12593: PUSH
12594: LD_INT 2
12596: EQUAL
12597: IFFALSE 12691
// begin RuSolMinLevel = 9 ;
12599: LD_ADDR_EXP 37
12603: PUSH
12604: LD_INT 9
12606: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12607: LD_ADDR_EXP 38
12611: PUSH
12612: LD_INT 10
12614: ST_TO_ADDR
// uc_nation = 3 ;
12615: LD_ADDR_OWVAR 21
12619: PUSH
12620: LD_INT 3
12622: ST_TO_ADDR
// uc_side = 3 ;
12623: LD_ADDR_OWVAR 20
12627: PUSH
12628: LD_INT 3
12630: ST_TO_ADDR
// bc_level = 10 ;
12631: LD_ADDR_OWVAR 43
12635: PUSH
12636: LD_INT 10
12638: ST_TO_ADDR
// bc_type = b_turret ;
12639: LD_ADDR_OWVAR 42
12643: PUSH
12644: LD_INT 33
12646: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12647: LD_ADDR_VAR 0 2
12651: PUSH
12652: LD_INT 86
12654: PPUSH
12655: LD_INT 34
12657: PPUSH
12658: LD_INT 2
12660: PPUSH
12661: CALL_OW 47
12665: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12666: LD_VAR 0 2
12670: PPUSH
12671: LD_INT 49
12673: PPUSH
12674: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12678: LD_INT 64
12680: PPUSH
12681: LD_INT 3
12683: PPUSH
12684: LD_INT 1
12686: PPUSH
12687: CALL_OW 322
// end ; if Difficulty = 3 then
12691: LD_OWVAR 67
12695: PUSH
12696: LD_INT 3
12698: EQUAL
12699: IFFALSE 12837
// begin RuSolMinLevel = 10 ;
12701: LD_ADDR_EXP 37
12705: PUSH
12706: LD_INT 10
12708: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12709: LD_ADDR_EXP 38
12713: PUSH
12714: LD_INT 10
12716: ST_TO_ADDR
// uc_nation = 3 ;
12717: LD_ADDR_OWVAR 21
12721: PUSH
12722: LD_INT 3
12724: ST_TO_ADDR
// uc_side = 3 ;
12725: LD_ADDR_OWVAR 20
12729: PUSH
12730: LD_INT 3
12732: ST_TO_ADDR
// bc_level = 10 ;
12733: LD_ADDR_OWVAR 43
12737: PUSH
12738: LD_INT 10
12740: ST_TO_ADDR
// bc_type = b_turret ;
12741: LD_ADDR_OWVAR 42
12745: PUSH
12746: LD_INT 33
12748: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12749: LD_ADDR_VAR 0 2
12753: PUSH
12754: LD_INT 86
12756: PPUSH
12757: LD_INT 34
12759: PPUSH
12760: LD_INT 2
12762: PPUSH
12763: CALL_OW 47
12767: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12768: LD_VAR 0 2
12772: PPUSH
12773: LD_INT 49
12775: PPUSH
12776: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12780: LD_ADDR_VAR 0 2
12784: PUSH
12785: LD_INT 93
12787: PPUSH
12788: LD_INT 31
12790: PPUSH
12791: LD_INT 2
12793: PPUSH
12794: CALL_OW 47
12798: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12799: LD_VAR 0 2
12803: PPUSH
12804: LD_INT 49
12806: PPUSH
12807: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12811: LD_INT 64
12813: PPUSH
12814: LD_INT 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12824: LD_INT 65
12826: PPUSH
12827: LD_INT 3
12829: PPUSH
12830: LD_INT 1
12832: PPUSH
12833: CALL_OW 322
// end ; end ;
12837: LD_VAR 0 1
12841: RET
// export function ShowQuery1 ; begin
12842: LD_INT 0
12844: PPUSH
// case query ( Q1 ) of 1 :
12845: LD_STRING Q1
12847: PPUSH
12848: CALL_OW 97
12852: PUSH
12853: LD_INT 1
12855: DOUBLE
12856: EQUAL
12857: IFTRUE 12861
12859: GO 12872
12861: POP
// result = 1 ; 2 :
12862: LD_ADDR_VAR 0 1
12866: PUSH
12867: LD_INT 1
12869: ST_TO_ADDR
12870: GO 12911
12872: LD_INT 2
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12891
12880: POP
// result = 2 ; 3 :
12881: LD_ADDR_VAR 0 1
12885: PUSH
12886: LD_INT 2
12888: ST_TO_ADDR
12889: GO 12911
12891: LD_INT 3
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 12910
12899: POP
// result = 3 ; end ;
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
12908: GO 12911
12910: POP
// end ;
12911: LD_VAR 0 1
12915: RET
// export function ShowQuery2 ; begin
12916: LD_INT 0
12918: PPUSH
// case query ( Q1a ) of 1 :
12919: LD_STRING Q1a
12921: PPUSH
12922: CALL_OW 97
12926: PUSH
12927: LD_INT 1
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12946
12935: POP
// result = 1 ; 2 :
12936: LD_ADDR_VAR 0 1
12940: PUSH
12941: LD_INT 1
12943: ST_TO_ADDR
12944: GO 12985
12946: LD_INT 2
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 12965
12954: POP
// result = 2 ; 3 :
12955: LD_ADDR_VAR 0 1
12959: PUSH
12960: LD_INT 2
12962: ST_TO_ADDR
12963: GO 12985
12965: LD_INT 3
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 12984
12973: POP
// result = 3 ; end ;
12974: LD_ADDR_VAR 0 1
12978: PUSH
12979: LD_INT 3
12981: ST_TO_ADDR
12982: GO 12985
12984: POP
// end ;
12985: LD_VAR 0 1
12989: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12990: LD_INT 0
12992: PPUSH
12993: PPUSH
12994: PPUSH
12995: PPUSH
12996: PPUSH
// for i = 1 to count do
12997: LD_ADDR_VAR 0 8
13001: PUSH
13002: DOUBLE
13003: LD_INT 1
13005: DEC
13006: ST_TO_ADDR
13007: LD_VAR 0 6
13011: PUSH
13012: FOR_TO
13013: IFFALSE 13094
// begin uc_side = side ;
13015: LD_ADDR_OWVAR 20
13019: PUSH
13020: LD_VAR 0 1
13024: ST_TO_ADDR
// uc_nation = nation ;
13025: LD_ADDR_OWVAR 21
13029: PUSH
13030: LD_VAR 0 2
13034: ST_TO_ADDR
// hc_gallery =  ;
13035: LD_ADDR_OWVAR 33
13039: PUSH
13040: LD_STRING 
13042: ST_TO_ADDR
// hc_name =  ;
13043: LD_ADDR_OWVAR 26
13047: PUSH
13048: LD_STRING 
13050: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13051: LD_INT 0
13053: PPUSH
13054: LD_VAR 0 5
13058: PPUSH
13059: LD_VAR 0 4
13063: PPUSH
13064: CALL_OW 380
// un = CreateHuman ;
13068: LD_ADDR_VAR 0 10
13072: PUSH
13073: CALL_OW 44
13077: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13078: LD_VAR 0 10
13082: PPUSH
13083: LD_VAR 0 3
13087: PPUSH
13088: CALL_OW 52
// end ;
13092: GO 13012
13094: POP
13095: POP
// end ;
13096: LD_VAR 0 7
13100: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13101: LD_INT 0
13103: PPUSH
13104: PPUSH
13105: PPUSH
13106: PPUSH
// for i = 1 to 72 do
13107: LD_ADDR_VAR 0 5
13111: PUSH
13112: DOUBLE
13113: LD_INT 1
13115: DEC
13116: ST_TO_ADDR
13117: LD_INT 72
13119: PUSH
13120: FOR_TO
13121: IFFALSE 13179
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13123: LD_VAR 0 5
13127: PPUSH
13128: LD_VAR 0 1
13132: PPUSH
13133: CALL_OW 321
13137: PUSH
13138: LD_INT 1
13140: EQUAL
13141: PUSH
13142: LD_VAR 0 5
13146: PPUSH
13147: LD_VAR 0 3
13151: PPUSH
13152: CALL_OW 482
13156: PUSH
13157: LD_INT 1
13159: EQUAL
13160: AND
13161: IFFALSE 13177
// AddComResearch ( lab , i ) ;
13163: LD_VAR 0 2
13167: PPUSH
13168: LD_VAR 0 5
13172: PPUSH
13173: CALL_OW 184
13177: GO 13120
13179: POP
13180: POP
// end ;
13181: LD_VAR 0 4
13185: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13186: LD_INT 0
13188: PPUSH
13189: PPUSH
13190: PPUSH
13191: PPUSH
13192: PPUSH
13193: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13194: LD_ADDR_VAR 0 8
13198: PUSH
13199: LD_VAR 0 2
13203: PPUSH
13204: CALL_OW 313
13208: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13209: LD_ADDR_VAR 0 9
13213: PUSH
13214: LD_VAR 0 3
13218: PPUSH
13219: LD_INT 22
13221: PUSH
13222: LD_VAR 0 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 25
13233: PUSH
13234: LD_INT 2
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 24
13243: PUSH
13244: LD_INT 750
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 3
13253: PUSH
13254: LD_INT 54
13256: PUSH
13257: EMPTY
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: PPUSH
13270: CALL_OW 70
13274: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13275: LD_ADDR_VAR 0 6
13279: PUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 1
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 21
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 3
13309: PUSH
13310: LD_INT 24
13312: PUSH
13313: LD_INT 1000
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: PPUSH
13332: CALL_OW 70
13336: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13337: LD_VAR 0 6
13341: NOT
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_VAR 0 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 25
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 24
13367: PUSH
13368: LD_INT 250
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: PPUSH
13380: CALL_OW 69
13384: NOT
13385: AND
13386: IFFALSE 13390
// exit ;
13388: GO 13572
// if buildings_list > 0 and engineerOkInside then
13390: LD_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: GREATER
13398: PUSH
13399: LD_VAR 0 8
13403: AND
13404: IFFALSE 13415
// ComExitBuilding ( engineerOkInside ) ;
13406: LD_VAR 0 8
13410: PPUSH
13411: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13415: LD_VAR 0 6
13419: PUSH
13420: LD_INT 0
13422: GREATER
13423: PUSH
13424: LD_VAR 0 9
13428: PUSH
13429: LD_INT 0
13431: GREATER
13432: AND
13433: IFFALSE 13453
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13435: LD_VAR 0 9
13439: PPUSH
13440: LD_VAR 0 6
13444: PUSH
13445: LD_INT 1
13447: ARRAY
13448: PPUSH
13449: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13453: LD_VAR 0 6
13457: PUSH
13458: LD_INT 0
13460: EQUAL
13461: PUSH
13462: LD_VAR 0 4
13466: PUSH
13467: LD_INT 0
13469: EQUAL
13470: AND
13471: PUSH
13472: LD_VAR 0 9
13476: PUSH
13477: LD_INT 0
13479: GREATER
13480: AND
13481: IFFALSE 13497
// ComEnterUnit ( engineerOkOutside , building ) ;
13483: LD_VAR 0 9
13487: PPUSH
13488: LD_VAR 0 2
13492: PPUSH
13493: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13497: LD_VAR 0 9
13501: PUSH
13502: LD_INT 0
13504: GREATER
13505: PUSH
13506: LD_VAR 0 6
13510: PUSH
13511: LD_INT 0
13513: EQUAL
13514: AND
13515: PUSH
13516: LD_VAR 0 4
13520: PUSH
13521: LD_INT 0
13523: GREATER
13524: AND
13525: IFFALSE 13572
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13527: LD_VAR 0 9
13531: PPUSH
13532: LD_VAR 0 4
13536: PUSH
13537: LD_INT 1
13539: ARRAY
13540: PPUSH
13541: LD_VAR 0 4
13545: PUSH
13546: LD_INT 2
13548: ARRAY
13549: PPUSH
13550: LD_VAR 0 4
13554: PUSH
13555: LD_INT 3
13557: ARRAY
13558: PPUSH
13559: LD_VAR 0 4
13563: PUSH
13564: LD_INT 4
13566: ARRAY
13567: PPUSH
13568: CALL_OW 145
// end ;
13572: LD_VAR 0 5
13576: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13577: LD_INT 0
13579: PPUSH
13580: PPUSH
13581: PPUSH
13582: PPUSH
13583: PPUSH
13584: PPUSH
13585: PPUSH
13586: PPUSH
13587: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13588: LD_ADDR_VAR 0 6
13592: PUSH
13593: LD_INT 22
13595: PUSH
13596: LD_VAR 0 1
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 25
13607: PUSH
13608: LD_INT 4
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 24
13617: PUSH
13618: LD_INT 251
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: PPUSH
13630: CALL_OW 69
13634: PUSH
13635: LD_EXP 35
13639: PUSH
13640: EMPTY
13641: LIST
13642: DIFF
13643: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13644: LD_ADDR_VAR 0 7
13648: PUSH
13649: LD_VAR 0 3
13653: PPUSH
13654: LD_INT 22
13656: PUSH
13657: LD_VAR 0 1
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 25
13668: PUSH
13669: LD_INT 4
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 50
13678: PUSH
13679: EMPTY
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 70
13691: PUSH
13692: LD_EXP 35
13696: PUSH
13697: EMPTY
13698: LIST
13699: DIFF
13700: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13701: LD_ADDR_VAR 0 10
13705: PUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_INT 22
13713: PUSH
13714: LD_VAR 0 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 21
13725: PUSH
13726: LD_INT 1
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 3
13735: PUSH
13736: LD_INT 24
13738: PUSH
13739: LD_INT 750
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: LIST
13754: PPUSH
13755: CALL_OW 70
13759: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13760: LD_ADDR_VAR 0 11
13764: PUSH
13765: LD_VAR 0 2
13769: PPUSH
13770: LD_INT 22
13772: PUSH
13773: LD_VAR 0 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 21
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 3
13794: PUSH
13795: LD_INT 24
13797: PUSH
13798: LD_INT 1000
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 70
13818: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13819: LD_VAR 0 10
13823: PUSH
13824: LD_INT 0
13826: GREATER
13827: PUSH
13828: LD_VAR 0 6
13832: PUSH
13833: LD_INT 0
13835: GREATER
13836: AND
13837: IFFALSE 13853
// ComMoveToArea ( damageUnits , healArea ) ;
13839: LD_VAR 0 10
13843: PPUSH
13844: LD_VAR 0 2
13848: PPUSH
13849: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13853: LD_VAR 0 11
13857: PUSH
13858: LD_INT 0
13860: GREATER
13861: PUSH
13862: LD_VAR 0 7
13866: PUSH
13867: LD_INT 0
13869: GREATER
13870: AND
13871: IFFALSE 13891
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13873: LD_VAR 0 7
13877: PPUSH
13878: LD_VAR 0 11
13882: PUSH
13883: LD_INT 1
13885: ARRAY
13886: PPUSH
13887: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13891: LD_VAR 0 10
13895: PUSH
13896: LD_INT 0
13898: EQUAL
13899: PUSH
13900: LD_VAR 0 11
13904: PUSH
13905: LD_INT 0
13907: EQUAL
13908: AND
13909: PUSH
13910: LD_VAR 0 7
13914: PUSH
13915: LD_INT 0
13917: GREATER
13918: AND
13919: IFFALSE 14024
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13921: LD_ADDR_VAR 0 12
13925: PUSH
13926: LD_INT 22
13928: PUSH
13929: LD_VAR 0 1
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 21
13940: PUSH
13941: LD_INT 3
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 30
13950: PUSH
13951: LD_INT 8
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: PPUSH
13963: CALL_OW 69
13967: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13968: LD_ADDR_VAR 0 13
13972: PUSH
13973: LD_INT 1
13975: PPUSH
13976: LD_VAR 0 12
13980: PPUSH
13981: CALL_OW 12
13985: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13986: LD_VAR 0 7
13990: PPUSH
13991: LD_INT 3
13993: PUSH
13994: LD_INT 60
13996: PUSH
13997: EMPTY
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PPUSH
14004: CALL_OW 72
14008: PPUSH
14009: LD_VAR 0 12
14013: PUSH
14014: LD_VAR 0 13
14018: ARRAY
14019: PPUSH
14020: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14024: LD_VAR 0 3
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_VAR 0 1
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 25
14043: PUSH
14044: LD_INT 3
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 24
14053: PUSH
14054: LD_INT 751
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: PPUSH
14066: CALL_OW 70
14070: PUSH
14071: LD_INT 0
14073: GREATER
14074: PUSH
14075: LD_INT 21
14077: PPUSH
14078: CALL_OW 302
14082: AND
14083: PUSH
14084: LD_INT 21
14086: PPUSH
14087: CALL_OW 255
14091: PUSH
14092: LD_INT 3
14094: EQUAL
14095: AND
14096: IFFALSE 14152
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14098: LD_VAR 0 3
14102: PPUSH
14103: LD_INT 22
14105: PUSH
14106: LD_VAR 0 1
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 25
14117: PUSH
14118: LD_INT 3
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 24
14127: PUSH
14128: LD_INT 751
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 70
14144: PPUSH
14145: LD_INT 21
14147: PPUSH
14148: CALL_OW 120
// end ;
14152: LD_VAR 0 5
14156: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14157: LD_INT 0
14159: PPUSH
14160: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14161: LD_INT 22
14163: PUSH
14164: LD_VAR 0 1
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 21
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PPUSH
14187: CALL_OW 69
14191: PUSH
14192: LD_INT 18
14194: PPUSH
14195: LD_INT 22
14197: PUSH
14198: LD_VAR 0 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 70
14225: PUSH
14226: LD_VAR 0 3
14230: LESSEQUAL
14231: DIFF
14232: IFFALSE 14299
// for i = 1 to vehCount do
14234: LD_ADDR_VAR 0 9
14238: PUSH
14239: DOUBLE
14240: LD_INT 1
14242: DEC
14243: ST_TO_ADDR
14244: LD_VAR 0 3
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14297
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14252: LD_VAR 0 2
14256: PPUSH
14257: LD_VAR 0 7
14261: PPUSH
14262: LD_VAR 0 5
14266: PPUSH
14267: LD_VAR 0 6
14271: PPUSH
14272: LD_VAR 0 4
14276: PUSH
14277: LD_INT 1
14279: PPUSH
14280: LD_VAR 0 4
14284: PPUSH
14285: CALL_OW 12
14289: ARRAY
14290: PPUSH
14291: CALL_OW 185
14295: GO 14249
14297: POP
14298: POP
// end ;
14299: LD_VAR 0 8
14303: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14304: LD_INT 0
14306: PPUSH
14307: PPUSH
14308: PPUSH
14309: PPUSH
14310: PPUSH
14311: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14312: LD_EXP 40
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: LD_INT 4
14322: PUSH
14323: LD_INT 4
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PUSH
14331: LD_OWVAR 67
14335: ARRAY
14336: GREATEREQUAL
14337: PUSH
14338: LD_EXP 41
14342: PUSH
14343: LD_INT 1
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: LD_INT 2
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: LD_OWVAR 67
14361: ARRAY
14362: GREATEREQUAL
14363: AND
14364: IFFALSE 14597
// begin repeat wait ( 0 0$3 ) ;
14366: LD_INT 105
14368: PPUSH
14369: CALL_OW 67
// for j in russianTanks do
14373: LD_ADDR_VAR 0 4
14377: PUSH
14378: LD_EXP 40
14382: PUSH
14383: FOR_IN
14384: IFFALSE 14585
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14386: LD_ADDR_VAR 0 6
14390: PUSH
14391: LD_INT 81
14393: PUSH
14394: LD_VAR 0 1
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 101
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 69
14421: PPUSH
14422: LD_VAR 0 4
14426: PPUSH
14427: CALL_OW 74
14431: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14432: LD_ADDR_VAR 0 7
14436: PUSH
14437: LD_INT 81
14439: PUSH
14440: LD_VAR 0 1
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 101
14451: PUSH
14452: LD_INT 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 2
14461: PUSH
14462: LD_INT 59
14464: PUSH
14465: EMPTY
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 21
14480: PUSH
14481: LD_INT 2
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: PUSH
14499: EMPTY
14500: LIST
14501: PPUSH
14502: CALL_OW 69
14506: PPUSH
14507: LD_VAR 0 4
14511: PPUSH
14512: CALL_OW 74
14516: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14517: LD_VAR 0 4
14521: PPUSH
14522: LD_VAR 0 6
14526: PPUSH
14527: CALL_OW 296
14531: PUSH
14532: LD_INT 8
14534: PLUS
14535: PUSH
14536: LD_VAR 0 4
14540: PPUSH
14541: LD_VAR 0 7
14545: PPUSH
14546: CALL_OW 296
14550: LESS
14551: IFFALSE 14569
// ComAttackUnit ( j , target1 ) else
14553: LD_VAR 0 4
14557: PPUSH
14558: LD_VAR 0 6
14562: PPUSH
14563: CALL_OW 115
14567: GO 14583
// ComAttackUnit ( j , target2 ) ;
14569: LD_VAR 0 4
14573: PPUSH
14574: LD_VAR 0 7
14578: PPUSH
14579: CALL_OW 115
// end ;
14583: GO 14383
14585: POP
14586: POP
// until russianTanks = 0 ;
14587: LD_EXP 40
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14366
// end ; end ;
14597: LD_VAR 0 2
14601: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14607: LD_EXP 40
14611: PUSH
14612: LD_INT 1
14614: GREATEREQUAL
14615: PUSH
14616: LD_EXP 41
14620: PUSH
14621: LD_INT 1
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: LD_OWVAR 67
14639: ARRAY
14640: GREATEREQUAL
14641: AND
14642: IFFALSE 14792
// repeat wait ( 0 0$3 ) ;
14644: LD_INT 105
14646: PPUSH
14647: CALL_OW 67
// if russianTimeLapsers > 0 then
14651: LD_EXP 41
14655: PUSH
14656: LD_INT 0
14658: GREATER
14659: IFFALSE 14782
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_EXP 41
14670: PPUSH
14671: LD_INT 3
14673: PUSH
14674: LD_INT 60
14676: PUSH
14677: EMPTY
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PPUSH
14684: CALL_OW 72
14688: PUSH
14689: FOR_IN
14690: IFFALSE 14780
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
14692: LD_ADDR_VAR 0 4
14696: PUSH
14697: LD_INT 81
14699: PUSH
14700: LD_VAR 0 1
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 101
14711: PUSH
14712: LD_INT 1
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 21
14721: PUSH
14722: LD_INT 1
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: PPUSH
14734: CALL_OW 69
14738: PPUSH
14739: LD_VAR 0 3
14743: PPUSH
14744: CALL_OW 74
14748: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
14749: LD_VAR 0 3
14753: PPUSH
14754: LD_VAR 0 4
14758: PPUSH
14759: CALL_OW 250
14763: PPUSH
14764: LD_VAR 0 4
14768: PPUSH
14769: CALL_OW 251
14773: PPUSH
14774: CALL_OW 111
// end ;
14778: GO 14689
14780: POP
14781: POP
// until russianTimeLapsers = 0 ;
14782: LD_EXP 41
14786: PUSH
14787: LD_INT 0
14789: EQUAL
14790: IFFALSE 14644
// end ;
14792: LD_VAR 0 2
14796: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14797: LD_INT 0
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
14804: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14805: LD_ADDR_VAR 0 6
14809: PUSH
14810: LD_INT 22
14812: PUSH
14813: LD_VAR 0 1
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 25
14824: PUSH
14825: LD_INT 9
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14841: LD_ADDR_VAR 0 7
14845: PUSH
14846: LD_INT 81
14848: PUSH
14849: LD_VAR 0 1
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: LD_INT 21
14863: PUSH
14864: LD_INT 3
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 69
14883: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14884: LD_ADDR_VAR 0 4
14888: PUSH
14889: LD_INT 1
14891: PPUSH
14892: LD_INT 3
14894: PPUSH
14895: CALL_OW 12
14899: ST_TO_ADDR
// for i = 1 to list do
14900: LD_ADDR_VAR 0 5
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 6
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15118
// for ta in filter do
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: LD_VAR 0 7
14927: PUSH
14928: FOR_IN
14929: IFFALSE 15114
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14931: LD_VAR 0 6
14935: PUSH
14936: LD_VAR 0 5
14940: ARRAY
14941: PPUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: CALL_OW 296
14951: PUSH
14952: LD_INT 15
14954: LESSEQUAL
14955: IFFALSE 15112
// begin case c of 1 :
14957: LD_VAR 0 4
14961: PUSH
14962: LD_INT 1
14964: DOUBLE
14965: EQUAL
14966: IFTRUE 14970
14968: GO 15008
14970: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14971: LD_VAR 0 6
14975: PUSH
14976: LD_VAR 0 5
14980: ARRAY
14981: PPUSH
14982: LD_VAR 0 3
14986: PPUSH
14987: CALL_OW 250
14991: PPUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: CALL_OW 251
15001: PPUSH
15002: CALL_OW 154
15006: GO 15112
15008: LD_INT 2
15010: DOUBLE
15011: EQUAL
15012: IFTRUE 15016
15014: GO 15080
15016: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15017: LD_VAR 0 6
15021: PUSH
15022: LD_VAR 0 5
15026: ARRAY
15027: PPUSH
15028: LD_VAR 0 3
15032: PPUSH
15033: CALL_OW 250
15037: PUSH
15038: LD_INT 1
15040: NEG
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 12
15049: PLUS
15050: PPUSH
15051: LD_VAR 0 3
15055: PPUSH
15056: CALL_OW 251
15060: PUSH
15061: LD_INT 1
15063: NEG
15064: PPUSH
15065: LD_INT 1
15067: PPUSH
15068: CALL_OW 12
15072: PLUS
15073: PPUSH
15074: CALL_OW 153
15078: GO 15112
15080: LD_INT 3
15082: DOUBLE
15083: EQUAL
15084: IFTRUE 15088
15086: GO 15111
15088: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15089: LD_VAR 0 6
15093: PUSH
15094: LD_VAR 0 5
15098: ARRAY
15099: PPUSH
15100: LD_VAR 0 3
15104: PPUSH
15105: CALL_OW 115
15109: GO 15112
15111: POP
// end ; end ;
15112: GO 14928
15114: POP
15115: POP
15116: GO 14915
15118: POP
15119: POP
// end ;
15120: LD_VAR 0 2
15124: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15125: LD_INT 0
15127: PPUSH
15128: PPUSH
15129: PPUSH
15130: PPUSH
// r := 100 ;
15131: LD_ADDR_VAR 0 5
15135: PUSH
15136: LD_INT 100
15138: ST_TO_ADDR
// x := 0 ;
15139: LD_ADDR_VAR 0 6
15143: PUSH
15144: LD_INT 0
15146: ST_TO_ADDR
// while ( x < n ) do
15147: LD_VAR 0 6
15151: PUSH
15152: LD_VAR 0 2
15156: LESS
15157: IFFALSE 15444
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15159: LD_ADDR_VAR 0 4
15163: PUSH
15164: DOUBLE
15165: LD_INT 1
15167: DEC
15168: ST_TO_ADDR
15169: LD_VAR 0 1
15173: PPUSH
15174: LD_INT 0
15176: PPUSH
15177: CALL_OW 517
15181: PUSH
15182: LD_INT 1
15184: ARRAY
15185: PUSH
15186: FOR_TO
15187: IFFALSE 15440
// begin if r > 50 then
15189: LD_VAR 0 5
15193: PUSH
15194: LD_INT 50
15196: GREATER
15197: IFFALSE 15416
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15199: LD_VAR 0 1
15203: PPUSH
15204: LD_INT 0
15206: PPUSH
15207: CALL_OW 517
15211: PUSH
15212: LD_INT 1
15214: ARRAY
15215: PUSH
15216: LD_VAR 0 4
15220: ARRAY
15221: PPUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL_OW 517
15234: PUSH
15235: LD_INT 2
15237: ARRAY
15238: PUSH
15239: LD_VAR 0 4
15243: ARRAY
15244: PPUSH
15245: CALL_OW 458
15249: NOT
15250: IFFALSE 15400
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15252: LD_VAR 0 1
15256: PPUSH
15257: LD_INT 0
15259: PPUSH
15260: CALL_OW 517
15264: PUSH
15265: LD_INT 1
15267: ARRAY
15268: PUSH
15269: LD_VAR 0 4
15273: ARRAY
15274: PPUSH
15275: LD_VAR 0 1
15279: PPUSH
15280: LD_INT 0
15282: PPUSH
15283: CALL_OW 517
15287: PUSH
15288: LD_INT 2
15290: ARRAY
15291: PUSH
15292: LD_VAR 0 4
15296: ARRAY
15297: PPUSH
15298: LD_INT 5
15300: PPUSH
15301: LD_INT 0
15303: PPUSH
15304: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15308: LD_ADDR_EXP 44
15312: PUSH
15313: LD_EXP 44
15317: PPUSH
15318: LD_INT 1
15320: PPUSH
15321: LD_VAR 0 1
15325: PPUSH
15326: LD_INT 0
15328: PPUSH
15329: CALL_OW 517
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PUSH
15338: LD_VAR 0 4
15342: ARRAY
15343: PUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: LD_INT 0
15351: PPUSH
15352: CALL_OW 517
15356: PUSH
15357: LD_INT 2
15359: ARRAY
15360: PUSH
15361: LD_VAR 0 4
15365: ARRAY
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 2
15375: ST_TO_ADDR
// r := 0 ;
15376: LD_ADDR_VAR 0 5
15380: PUSH
15381: LD_INT 0
15383: ST_TO_ADDR
// x := x + 1 ;
15384: LD_ADDR_VAR 0 6
15388: PUSH
15389: LD_VAR 0 6
15393: PUSH
15394: LD_INT 1
15396: PLUS
15397: ST_TO_ADDR
// end else
15398: GO 15414
// r := r + 35 ;
15400: LD_ADDR_VAR 0 5
15404: PUSH
15405: LD_VAR 0 5
15409: PUSH
15410: LD_INT 35
15412: PLUS
15413: ST_TO_ADDR
// end else
15414: GO 15438
// r := r + rand ( 10 , 25 ) ;
15416: LD_ADDR_VAR 0 5
15420: PUSH
15421: LD_VAR 0 5
15425: PUSH
15426: LD_INT 10
15428: PPUSH
15429: LD_INT 25
15431: PPUSH
15432: CALL_OW 12
15436: PLUS
15437: ST_TO_ADDR
// end ;
15438: GO 15186
15440: POP
15441: POP
15442: GO 15147
// end ;
15444: LD_VAR 0 3
15448: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15449: LD_INT 0
15451: PPUSH
15452: PPUSH
15453: PPUSH
15454: PPUSH
// tmpTab = [ ] ;
15455: LD_ADDR_VAR 0 6
15459: PUSH
15460: EMPTY
15461: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15462: LD_INT 22
15464: PUSH
15465: LD_VAR 0 1
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 30
15476: PUSH
15477: LD_INT 32
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PPUSH
15488: CALL_OW 69
15492: PUSH
15493: LD_INT 0
15495: GREATER
15496: IFFALSE 15579
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15498: LD_ADDR_VAR 0 4
15502: PUSH
15503: LD_INT 22
15505: PUSH
15506: LD_VAR 0 1
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 30
15517: PUSH
15518: LD_INT 32
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PPUSH
15529: CALL_OW 69
15533: PUSH
15534: FOR_IN
15535: IFFALSE 15577
// begin for j in UnitsInside ( i ) do
15537: LD_ADDR_VAR 0 5
15541: PUSH
15542: LD_VAR 0 4
15546: PPUSH
15547: CALL_OW 313
15551: PUSH
15552: FOR_IN
15553: IFFALSE 15573
// tmpTab = tmpTab ^ j ;
15555: LD_ADDR_VAR 0 6
15559: PUSH
15560: LD_VAR 0 6
15564: PUSH
15565: LD_VAR 0 5
15569: ADD
15570: ST_TO_ADDR
15571: GO 15552
15573: POP
15574: POP
// end ;
15575: GO 15534
15577: POP
15578: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15579: LD_VAR 0 6
15583: PPUSH
15584: LD_VAR 0 2
15588: PPUSH
15589: CALL_OW 250
15593: PPUSH
15594: LD_VAR 0 2
15598: PPUSH
15599: CALL_OW 251
15603: PPUSH
15604: CALL_OW 114
// end ;
15608: LD_VAR 0 3
15612: RET
// export function PrepareNature ; var i , un ; begin
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
// uc_side := 0 ;
15618: LD_ADDR_OWVAR 20
15622: PUSH
15623: LD_INT 0
15625: ST_TO_ADDR
// uc_nation := 0 ;
15626: LD_ADDR_OWVAR 21
15630: PUSH
15631: LD_INT 0
15633: ST_TO_ADDR
// InitHc ;
15634: CALL_OW 19
// hc_class := class_fish ;
15638: LD_ADDR_OWVAR 28
15642: PUSH
15643: LD_INT 20
15645: ST_TO_ADDR
// for i = 1 to 6 do
15646: LD_ADDR_VAR 0 2
15650: PUSH
15651: DOUBLE
15652: LD_INT 1
15654: DEC
15655: ST_TO_ADDR
15656: LD_INT 6
15658: PUSH
15659: FOR_TO
15660: IFFALSE 15679
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15662: CALL_OW 44
15666: PPUSH
15667: LD_INT 23
15669: PPUSH
15670: LD_INT 0
15672: PPUSH
15673: CALL_OW 49
15677: GO 15659
15679: POP
15680: POP
// for i = 1 to Difficulty + 2 do
15681: LD_ADDR_VAR 0 2
15685: PUSH
15686: DOUBLE
15687: LD_INT 1
15689: DEC
15690: ST_TO_ADDR
15691: LD_OWVAR 67
15695: PUSH
15696: LD_INT 2
15698: PLUS
15699: PUSH
15700: FOR_TO
15701: IFFALSE 15810
// begin hc_sex = sex_male ;
15703: LD_ADDR_OWVAR 27
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// uc_side = 0 ;
15711: LD_ADDR_OWVAR 20
15715: PUSH
15716: LD_INT 0
15718: ST_TO_ADDR
// uc_nation = nation_nature ;
15719: LD_ADDR_OWVAR 21
15723: PUSH
15724: LD_INT 0
15726: ST_TO_ADDR
// hc_class = class_tiger ;
15727: LD_ADDR_OWVAR 28
15731: PUSH
15732: LD_INT 14
15734: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15735: LD_ADDR_OWVAR 31
15739: PUSH
15740: LD_EXP 38
15744: PUSH
15745: LD_INT 0
15747: PUSH
15748: LD_INT 0
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15760: LD_ADDR_OWVAR 35
15764: PUSH
15765: LD_INT 5
15767: NEG
15768: PPUSH
15769: LD_INT 5
15771: PPUSH
15772: CALL_OW 12
15776: PUSH
15777: LD_OWVAR 67
15781: MUL
15782: ST_TO_ADDR
// un = CreateHuman ;
15783: LD_ADDR_VAR 0 3
15787: PUSH
15788: CALL_OW 44
15792: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15793: LD_VAR 0 3
15797: PPUSH
15798: LD_INT 24
15800: PPUSH
15801: LD_INT 0
15803: PPUSH
15804: CALL_OW 49
// end ;
15808: GO 15700
15810: POP
15811: POP
// for i = 1 to rand ( 3 , 4 ) do
15812: LD_ADDR_VAR 0 2
15816: PUSH
15817: DOUBLE
15818: LD_INT 1
15820: DEC
15821: ST_TO_ADDR
15822: LD_INT 3
15824: PPUSH
15825: LD_INT 4
15827: PPUSH
15828: CALL_OW 12
15832: PUSH
15833: FOR_TO
15834: IFFALSE 15926
// begin hc_sex = sex_male ;
15836: LD_ADDR_OWVAR 27
15840: PUSH
15841: LD_INT 1
15843: ST_TO_ADDR
// uc_side = 0 ;
15844: LD_ADDR_OWVAR 20
15848: PUSH
15849: LD_INT 0
15851: ST_TO_ADDR
// uc_nation = nation_nature ;
15852: LD_ADDR_OWVAR 21
15856: PUSH
15857: LD_INT 0
15859: ST_TO_ADDR
// hc_class = 18 ;
15860: LD_ADDR_OWVAR 28
15864: PUSH
15865: LD_INT 18
15867: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15868: LD_ADDR_OWVAR 31
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: LD_INT 0
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: ST_TO_ADDR
// hc_agressivity = 0 ;
15891: LD_ADDR_OWVAR 35
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// un = CreateHuman ;
15899: LD_ADDR_VAR 0 3
15903: PUSH
15904: CALL_OW 44
15908: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15909: LD_VAR 0 3
15913: PPUSH
15914: LD_INT 24
15916: PPUSH
15917: LD_INT 0
15919: PPUSH
15920: CALL_OW 49
// end ;
15924: GO 15833
15926: POP
15927: POP
// for i = 1 to rand ( 1 , 3 ) do
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: DOUBLE
15934: LD_INT 1
15936: DEC
15937: ST_TO_ADDR
15938: LD_INT 1
15940: PPUSH
15941: LD_INT 3
15943: PPUSH
15944: CALL_OW 12
15948: PUSH
15949: FOR_TO
15950: IFFALSE 16098
// begin hc_sex = sex_male ;
15952: LD_ADDR_OWVAR 27
15956: PUSH
15957: LD_INT 1
15959: ST_TO_ADDR
// uc_side = 0 ;
15960: LD_ADDR_OWVAR 20
15964: PUSH
15965: LD_INT 0
15967: ST_TO_ADDR
// uc_nation = nation_nature ;
15968: LD_ADDR_OWVAR 21
15972: PUSH
15973: LD_INT 0
15975: ST_TO_ADDR
// hc_class = class_apeman ;
15976: LD_ADDR_OWVAR 28
15980: PUSH
15981: LD_INT 12
15983: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15984: LD_ADDR_OWVAR 31
15988: PUSH
15989: LD_EXP 37
15993: PPUSH
15994: LD_EXP 38
15998: PPUSH
15999: CALL_OW 12
16003: PUSH
16004: LD_EXP 37
16008: PPUSH
16009: LD_EXP 38
16013: PPUSH
16014: CALL_OW 12
16018: PUSH
16019: LD_EXP 37
16023: PPUSH
16024: LD_EXP 38
16028: PPUSH
16029: CALL_OW 12
16033: PUSH
16034: LD_EXP 37
16038: PPUSH
16039: LD_EXP 38
16043: PPUSH
16044: CALL_OW 12
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16055: LD_ADDR_OWVAR 35
16059: PUSH
16060: LD_INT 1
16062: PPUSH
16063: LD_INT 20
16065: PPUSH
16066: CALL_OW 12
16070: ST_TO_ADDR
// un = CreateHuman ;
16071: LD_ADDR_VAR 0 3
16075: PUSH
16076: CALL_OW 44
16080: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16081: LD_VAR 0 3
16085: PPUSH
16086: LD_INT 24
16088: PPUSH
16089: LD_INT 0
16091: PPUSH
16092: CALL_OW 49
// end ;
16096: GO 15949
16098: POP
16099: POP
// end ; end_of_file
16100: LD_VAR 0 1
16104: RET
// on UnitDestroyed ( unit ) do var i ;
16105: LD_INT 0
16107: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16108: LD_VAR 0 1
16112: PPUSH
16113: CALL_OW 255
16117: PUSH
16118: LD_INT 3
16120: EQUAL
16121: PUSH
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 247
16131: PUSH
16132: LD_INT 1
16134: EQUAL
16135: AND
16136: IFFALSE 16200
// begin for i in RuScientists do
16138: LD_ADDR_VAR 0 2
16142: PUSH
16143: LD_EXP 35
16147: PUSH
16148: FOR_IN
16149: IFFALSE 16198
// if i = unit then
16151: LD_VAR 0 2
16155: PUSH
16156: LD_VAR 0 1
16160: EQUAL
16161: IFFALSE 16196
// begin RuScientists = RuScientists diff [ unit ] ;
16163: LD_ADDR_EXP 35
16167: PUSH
16168: LD_EXP 35
16172: PUSH
16173: LD_VAR 0 1
16177: PUSH
16178: EMPTY
16179: LIST
16180: DIFF
16181: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16182: LD_ADDR_EXP 36
16186: PUSH
16187: LD_EXP 36
16191: PUSH
16192: LD_INT 1
16194: PLUS
16195: ST_TO_ADDR
// end ;
16196: GO 16148
16198: POP
16199: POP
// end ; end ;
16200: PPOPN 2
16202: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16203: LD_VAR 0 1
16207: PUSH
16208: LD_INT 10
16210: EQUAL
16211: PUSH
16212: LD_VAR 0 2
16216: PPUSH
16217: CALL_OW 255
16221: PUSH
16222: LD_INT 1
16224: EQUAL
16225: AND
16226: PUSH
16227: LD_EXP 47
16231: PUSH
16232: LD_INT 0
16234: EQUAL
16235: AND
16236: IFFALSE 16348
// begin eventVar1 = 1 ;
16238: LD_ADDR_EXP 47
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// teleportExplored = 1 ;
16246: LD_ADDR_EXP 34
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16254: LD_STRING M2a
16256: PPUSH
16257: CALL_OW 337
// wait ( 0 0$2 ) ;
16261: LD_INT 70
16263: PPUSH
16264: CALL_OW 67
// DialogueOn ;
16268: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16272: LD_INT 22
16274: PUSH
16275: LD_INT 1
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 21
16284: PUSH
16285: LD_INT 1
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PPUSH
16296: CALL_OW 69
16300: PPUSH
16301: LD_STRING DT3a-Sol1-1
16303: PPUSH
16304: LD_STRING DT3a-FSol1-1
16306: PPUSH
16307: CALL 12306 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16311: LD_EXP 1
16315: PPUSH
16316: LD_STRING DT3a-JMM-1
16318: PPUSH
16319: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16332: LD_EXP 1
16336: PPUSH
16337: LD_STRING DT3a-JMM-1a
16339: PPUSH
16340: CALL_OW 88
// DialogueOff ;
16344: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16348: LD_VAR 0 1
16352: PUSH
16353: LD_INT 10
16355: EQUAL
16356: PUSH
16357: LD_VAR 0 2
16361: PPUSH
16362: CALL_OW 247
16366: PUSH
16367: LD_INT 2
16369: EQUAL
16370: AND
16371: PUSH
16372: LD_VAR 0 2
16376: PPUSH
16377: CALL_OW 255
16381: PUSH
16382: LD_INT 3
16384: EQUAL
16385: AND
16386: PUSH
16387: LD_EXP 29
16391: PUSH
16392: LD_INT 0
16394: EQUAL
16395: AND
16396: IFFALSE 16413
// begin wait ( 0 0$3 ) ;
16398: LD_INT 105
16400: PPUSH
16401: CALL_OW 67
// vehicleTeleported = 1 ;
16405: LD_ADDR_EXP 29
16409: PUSH
16410: LD_INT 1
16412: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16413: LD_VAR 0 1
16417: PUSH
16418: LD_INT 10
16420: EQUAL
16421: PUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL_OW 247
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: AND
16436: PUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL_OW 255
16446: PUSH
16447: LD_INT 3
16449: EQUAL
16450: AND
16451: PUSH
16452: LD_EXP 29
16456: PUSH
16457: LD_INT 2
16459: EQUAL
16460: AND
16461: IFFALSE 16478
// begin wait ( 0 0$3 ) ;
16463: LD_INT 105
16465: PPUSH
16466: CALL_OW 67
// vehicleTeleported = 3 ;
16470: LD_ADDR_EXP 29
16474: PUSH
16475: LD_INT 3
16477: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16478: LD_VAR 0 1
16482: PUSH
16483: LD_INT 10
16485: EQUAL
16486: PUSH
16487: LD_VAR 0 2
16491: PPUSH
16492: CALL_OW 247
16496: PUSH
16497: LD_INT 2
16499: EQUAL
16500: AND
16501: PUSH
16502: LD_VAR 0 2
16506: PPUSH
16507: CALL_OW 255
16511: PUSH
16512: LD_INT 3
16514: EQUAL
16515: AND
16516: IFFALSE 16532
// tpCounter = tpCounter + 1 ;
16518: LD_ADDR_EXP 30
16522: PUSH
16523: LD_EXP 30
16527: PUSH
16528: LD_INT 1
16530: PLUS
16531: ST_TO_ADDR
// end ;
16532: PPOPN 2
16534: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16535: LD_VAR 0 2
16539: PUSH
16540: LD_INT 21
16542: EQUAL
16543: PUSH
16544: LD_VAR 0 2
16548: PUSH
16549: LD_INT 112
16551: EQUAL
16552: OR
16553: IFFALSE 16731
// if GetSide ( vehicle ) = 3 then
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 255
16564: PUSH
16565: LD_INT 3
16567: EQUAL
16568: IFFALSE 16731
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16570: LD_VAR 0 1
16574: PPUSH
16575: CALL_OW 264
16579: PUSH
16580: LD_INT 46
16582: EQUAL
16583: PUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 264
16593: PUSH
16594: LD_INT 45
16596: EQUAL
16597: OR
16598: PUSH
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL_OW 264
16608: PUSH
16609: LD_INT 44
16611: EQUAL
16612: OR
16613: IFFALSE 16688
// begin russianTanks = russianTanks ^ vehicle ;
16615: LD_ADDR_EXP 40
16619: PUSH
16620: LD_EXP 40
16624: PUSH
16625: LD_VAR 0 1
16629: ADD
16630: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
16631: LD_EXP 43
16635: PUSH
16636: LD_INT 1
16638: EQUAL
16639: PUSH
16640: LD_EXP 43
16644: PUSH
16645: LD_INT 0
16647: EQUAL
16648: OR
16649: IFFALSE 16663
// ComEnterUnit ( vehicle , ruteleprt ) ;
16651: LD_VAR 0 1
16655: PPUSH
16656: LD_INT 10
16658: PPUSH
16659: CALL_OW 120
// if attackTactic = 2 then
16663: LD_EXP 43
16667: PUSH
16668: LD_INT 2
16670: EQUAL
16671: IFFALSE 16688
// ComMoveXY ( vehicle , 88 , 69 ) ;
16673: LD_VAR 0 1
16677: PPUSH
16678: LD_INT 88
16680: PPUSH
16681: LD_INT 69
16683: PPUSH
16684: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 264
16697: PUSH
16698: LD_INT 49
16700: EQUAL
16701: IFFALSE 16731
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16703: LD_ADDR_EXP 41
16707: PUSH
16708: LD_EXP 41
16712: PUSH
16713: LD_VAR 0 1
16717: ADD
16718: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16719: LD_VAR 0 1
16723: PPUSH
16724: LD_INT 137
16726: PPUSH
16727: CALL_OW 120
// end ; end ; end ;
16731: PPOPN 2
16733: END
// on UnitGoesToRed ( unit ) do var i ;
16734: LD_INT 0
16736: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16737: LD_VAR 0 1
16741: PPUSH
16742: CALL_OW 255
16746: PUSH
16747: LD_INT 3
16749: EQUAL
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 247
16760: PUSH
16761: LD_INT 2
16763: EQUAL
16764: AND
16765: IFFALSE 16883
// begin if russianTanks > 0 then
16767: LD_EXP 40
16771: PUSH
16772: LD_INT 0
16774: GREATER
16775: IFFALSE 16825
// for i in russianTanks do
16777: LD_ADDR_VAR 0 2
16781: PUSH
16782: LD_EXP 40
16786: PUSH
16787: FOR_IN
16788: IFFALSE 16823
// if i = unit then
16790: LD_VAR 0 2
16794: PUSH
16795: LD_VAR 0 1
16799: EQUAL
16800: IFFALSE 16821
// russianTanks = russianTanks diff [ unit ] ;
16802: LD_ADDR_EXP 40
16806: PUSH
16807: LD_EXP 40
16811: PUSH
16812: LD_VAR 0 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: DIFF
16820: ST_TO_ADDR
16821: GO 16787
16823: POP
16824: POP
// if russianTimeLapsers > 0 then
16825: LD_EXP 41
16829: PUSH
16830: LD_INT 0
16832: GREATER
16833: IFFALSE 16883
// for i in russianTimeLapsers do
16835: LD_ADDR_VAR 0 2
16839: PUSH
16840: LD_EXP 41
16844: PUSH
16845: FOR_IN
16846: IFFALSE 16881
// if i = unit then
16848: LD_VAR 0 2
16852: PUSH
16853: LD_VAR 0 1
16857: EQUAL
16858: IFFALSE 16879
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
16860: LD_ADDR_EXP 41
16864: PUSH
16865: LD_EXP 41
16869: PUSH
16870: LD_VAR 0 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: DIFF
16878: ST_TO_ADDR
16879: GO 16845
16881: POP
16882: POP
// end ; end ;
16883: PPOPN 2
16885: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16886: LD_VAR 0 2
16890: PPUSH
16891: CALL_OW 255
16895: PUSH
16896: LD_INT 3
16898: EQUAL
16899: PUSH
16900: LD_VAR 0 2
16904: PPUSH
16905: CALL_OW 257
16909: PUSH
16910: LD_INT 3
16912: EQUAL
16913: AND
16914: PUSH
16915: LD_INT 21
16917: PPUSH
16918: CALL_OW 255
16922: PUSH
16923: LD_INT 3
16925: EQUAL
16926: AND
16927: PUSH
16928: LD_INT 21
16930: PPUSH
16931: CALL_OW 302
16935: AND
16936: IFFALSE 16950
// ComEnterUnit ( human , ru_fact ) ;
16938: LD_VAR 0 2
16942: PPUSH
16943: LD_INT 21
16945: PPUSH
16946: CALL_OW 120
// end ;
16950: PPOPN 2
16952: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16953: LD_INT 0
16955: PPUSH
16956: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16957: LD_VAR 0 2
16961: PPUSH
16962: CALL_OW 255
16966: PUSH
16967: LD_INT 3
16969: EQUAL
16970: PUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: CALL_OW 257
16980: PUSH
16981: LD_INT 4
16983: EQUAL
16984: AND
16985: IFFALSE 17127
// for i in RuScientists do
16987: LD_ADDR_VAR 0 3
16991: PUSH
16992: LD_EXP 35
16996: PUSH
16997: FOR_IN
16998: IFFALSE 17125
// if i = human then
17000: LD_VAR 0 3
17004: PUSH
17005: LD_VAR 0 2
17009: EQUAL
17010: IFFALSE 17123
// if IsOk ( rutp ) then
17012: LD_INT 137
17014: PPUSH
17015: CALL_OW 302
17019: IFFALSE 17092
// begin rnd = rand ( 1 , 2 ) ;
17021: LD_ADDR_VAR 0 4
17025: PUSH
17026: LD_INT 1
17028: PPUSH
17029: LD_INT 2
17031: PPUSH
17032: CALL_OW 12
17036: ST_TO_ADDR
// if rnd = 1 then
17037: LD_VAR 0 4
17041: PUSH
17042: LD_INT 1
17044: EQUAL
17045: IFFALSE 17059
// ComEnterUnit ( vehicle , rutp ) ;
17047: LD_VAR 0 1
17051: PPUSH
17052: LD_INT 137
17054: PPUSH
17055: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_INT 13
17066: PUSH
17067: LD_INT 14
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 1
17076: PPUSH
17077: LD_INT 2
17079: PPUSH
17080: CALL_OW 12
17084: ARRAY
17085: PPUSH
17086: CALL_OW 173
// end else
17090: GO 17123
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) end ;
17092: LD_VAR 0 1
17096: PPUSH
17097: LD_INT 13
17099: PUSH
17100: LD_INT 14
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: PPUSH
17110: LD_INT 2
17112: PPUSH
17113: CALL_OW 12
17117: ARRAY
17118: PPUSH
17119: CALL_OW 113
17123: GO 16997
17125: POP
17126: POP
// end ; end_of_file
17127: PPOPN 4
17129: END
// every 0 0$1 trigger ruAI = 1 do
17130: LD_EXP 42
17134: PUSH
17135: LD_INT 1
17137: EQUAL
17138: IFFALSE 17237
17140: GO 17142
17142: DISABLE
// begin enable ;
17143: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17144: LD_INT 3
17146: PPUSH
17147: LD_INT 6
17149: PPUSH
17150: LD_INT 9
17152: PPUSH
17153: LD_EXP 39
17157: PPUSH
17158: CALL 13186 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17162: LD_INT 3
17164: PPUSH
17165: LD_INT 4
17167: PPUSH
17168: LD_INT 10
17170: PPUSH
17171: LD_EXP 39
17175: PPUSH
17176: CALL 13186 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17180: LD_INT 3
17182: PPUSH
17183: LD_INT 16
17185: PPUSH
17186: LD_INT 9
17188: PPUSH
17189: LD_INT 91
17191: PPUSH
17192: CALL 13577 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17196: LD_INT 3
17198: PPUSH
17199: LD_INT 17
17201: PPUSH
17202: LD_INT 10
17204: PPUSH
17205: LD_INT 47
17207: PUSH
17208: LD_INT 129
17210: PUSH
17211: LD_INT 135
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: PPUSH
17219: CALL 13577 0 4
// AttackVehicles ( 3 ) ;
17223: LD_INT 3
17225: PPUSH
17226: CALL 14304 0 1
// IntBazooka ( 3 ) ;
17230: LD_INT 3
17232: PPUSH
17233: CALL 14797 0 1
// end ;
17237: END
// every 0 0$1 do
17238: GO 17240
17240: DISABLE
// begin enable ;
17241: ENABLE
// TimeLapsersAI ( 3 ) ;
17242: LD_INT 3
17244: PPUSH
17245: CALL 14602 0 1
// end ;
17249: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17250: LD_INT 4
17252: PPUSH
17253: CALL_OW 303
17257: IFFALSE 17272
17259: GO 17261
17261: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17262: LD_INT 3
17264: PPUSH
17265: LD_INT 4
17267: PPUSH
17268: CALL 15449 0 2
17272: END
// every 0 0$1 do
17273: GO 17275
17275: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17276: LD_INT 3
17278: PPUSH
17279: LD_INT 91
17281: PPUSH
17282: LD_INT 3
17284: PPUSH
17285: CALL 13101 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17289: LD_INT 3
17291: PPUSH
17292: LD_INT 47
17294: PPUSH
17295: LD_INT 3
17297: PPUSH
17298: CALL 13101 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17302: LD_INT 3
17304: PPUSH
17305: LD_INT 129
17307: PPUSH
17308: LD_INT 3
17310: PPUSH
17311: CALL 13101 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17315: LD_INT 3
17317: PPUSH
17318: LD_INT 3
17320: PPUSH
17321: LD_INT 3
17323: PPUSH
17324: CALL 13101 0 3
// end ;
17328: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17329: LD_EXP 28
17333: PUSH
17334: LD_INT 2
17336: EQUAL
17337: PUSH
17338: LD_INT 21
17340: PPUSH
17341: CALL_OW 255
17345: PUSH
17346: LD_INT 3
17348: EQUAL
17349: AND
17350: PUSH
17351: LD_INT 112
17353: PPUSH
17354: CALL_OW 255
17358: PUSH
17359: LD_INT 3
17361: EQUAL
17362: AND
17363: PUSH
17364: LD_INT 21
17366: PPUSH
17367: CALL_OW 302
17371: AND
17372: PUSH
17373: LD_INT 112
17375: PPUSH
17376: CALL_OW 302
17380: AND
17381: PUSH
17382: LD_INT 22
17384: PUSH
17385: LD_INT 3
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 21
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 50
17404: PUSH
17405: EMPTY
17406: LIST
17407: PUSH
17408: LD_INT 3
17410: PUSH
17411: LD_INT 58
17413: PUSH
17414: EMPTY
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: PPUSH
17427: CALL_OW 69
17431: PUSH
17432: LD_INT 18
17434: PPUSH
17435: LD_INT 22
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 21
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PPUSH
17459: CALL_OW 70
17463: PUSH
17464: LD_INT 0
17466: EQUAL
17467: DIFF
17468: AND
17469: IFFALSE 17587
17471: GO 17473
17473: DISABLE
// begin enable ;
17474: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17475: LD_INT 3
17477: PPUSH
17478: LD_INT 21
17480: PPUSH
17481: LD_INT 3
17483: PUSH
17484: LD_INT 4
17486: PUSH
17487: LD_INT 4
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: PUSH
17495: LD_OWVAR 67
17499: ARRAY
17500: PPUSH
17501: LD_INT 46
17503: PUSH
17504: LD_INT 45
17506: PUSH
17507: LD_INT 44
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: PPUSH
17515: LD_INT 3
17517: PPUSH
17518: LD_INT 3
17520: PPUSH
17521: LD_INT 24
17523: PPUSH
17524: CALL 14157 0 7
// if russianTimeLapsers = 0 then
17528: LD_EXP 41
17532: PUSH
17533: LD_INT 0
17535: EQUAL
17536: IFFALSE 17587
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17538: LD_INT 3
17540: PPUSH
17541: LD_INT 112
17543: PPUSH
17544: LD_INT 1
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: PUSH
17558: LD_OWVAR 67
17562: ARRAY
17563: PPUSH
17564: LD_INT 49
17566: PUSH
17567: LD_INT 49
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PPUSH
17574: LD_INT 3
17576: PPUSH
17577: LD_INT 3
17579: PPUSH
17580: LD_INT 24
17582: PPUSH
17583: CALL 14157 0 7
// end ;
17587: END
// every 0 0$1 trigger arabianMines do var i ;
17588: LD_EXP 44
17592: IFFALSE 17713
17594: GO 17596
17596: DISABLE
17597: LD_INT 0
17599: PPUSH
// begin enable ;
17600: ENABLE
// for i in arabianMines do
17601: LD_ADDR_VAR 0 1
17605: PUSH
17606: LD_EXP 44
17610: PUSH
17611: FOR_IN
17612: IFFALSE 17711
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17614: LD_INT 22
17616: PUSH
17617: LD_INT 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 92
17626: PUSH
17627: LD_VAR 0 1
17631: PUSH
17632: LD_INT 1
17634: ARRAY
17635: PUSH
17636: LD_VAR 0 1
17640: PUSH
17641: LD_INT 2
17643: ARRAY
17644: PUSH
17645: LD_INT 3
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PPUSH
17658: CALL_OW 69
17662: IFFALSE 17709
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 1
17671: ARRAY
17672: PPUSH
17673: LD_VAR 0 1
17677: PUSH
17678: LD_INT 2
17680: ARRAY
17681: PPUSH
17682: LD_INT 5
17684: PPUSH
17685: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17689: LD_ADDR_EXP 44
17693: PUSH
17694: LD_EXP 44
17698: PPUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 3
17708: ST_TO_ADDR
// end ; end ;
17709: GO 17611
17711: POP
17712: POP
// end ;
17713: PPOPN 1
17715: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
17716: LD_EXP 29
17720: PUSH
17721: LD_INT 4
17723: EQUAL
17724: PUSH
17725: LD_EXP 30
17729: PUSH
17730: LD_INT 6
17732: PUSH
17733: LD_INT 8
17735: PUSH
17736: LD_INT 8
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: PUSH
17744: LD_OWVAR 67
17748: ARRAY
17749: EQUAL
17750: AND
17751: IFFALSE 17769
17753: GO 17755
17755: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
17756: LD_INT 10
17758: PPUSH
17759: LD_INT 47
17761: PPUSH
17762: LD_INT 82
17764: PPUSH
17765: CALL_OW 243
17769: END
// every 2 2$0 trigger vehicleTeleported = 4 do
17770: LD_EXP 29
17774: PUSH
17775: LD_INT 4
17777: EQUAL
17778: IFFALSE 17800
17780: GO 17782
17782: DISABLE
// begin enable ;
17783: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
17784: LD_ADDR_EXP 43
17788: PUSH
17789: LD_INT 1
17791: PPUSH
17792: LD_INT 2
17794: PPUSH
17795: CALL_OW 12
17799: ST_TO_ADDR
// end ; end_of_file
17800: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
17801: LD_EXP 35
17805: PUSH
17806: EMPTY
17807: EQUAL
17808: PUSH
17809: LD_INT 3
17811: PPUSH
17812: CALL_OW 301
17816: AND
17817: IFFALSE 18022
17819: GO 17821
17821: DISABLE
// begin if sciCounter = 0 then
17822: LD_EXP 36
17826: PUSH
17827: LD_INT 0
17829: EQUAL
17830: IFFALSE 17856
// begin Say ( JMM , D7a-JMM-1 ) ;
17832: LD_EXP 1
17836: PPUSH
17837: LD_STRING D7a-JMM-1
17839: PPUSH
17840: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17844: LD_EXP 22
17848: PPUSH
17849: LD_STRING D7a-Pow-1
17851: PPUSH
17852: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
17856: LD_EXP 36
17860: PUSH
17861: LD_INT 0
17863: GREATER
17864: PUSH
17865: LD_EXP 36
17869: PUSH
17870: LD_INT 6
17872: LESS
17873: AND
17874: IFFALSE 17900
// begin Say ( JMM , D7b-JMM-1 ) ;
17876: LD_EXP 1
17880: PPUSH
17881: LD_STRING D7b-JMM-1
17883: PPUSH
17884: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17888: LD_EXP 22
17892: PPUSH
17893: LD_STRING D7b-Pow-1
17895: PPUSH
17896: CALL_OW 94
// end ; if sciCounter = 6 then
17900: LD_EXP 36
17904: PUSH
17905: LD_INT 6
17907: EQUAL
17908: IFFALSE 18018
// begin Say ( JMM , D7c-JMM-1 ) ;
17910: LD_EXP 1
17914: PPUSH
17915: LD_STRING D7c-JMM-1
17917: PPUSH
17918: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17922: LD_EXP 22
17926: PPUSH
17927: LD_STRING D7c-Pow-1
17929: PPUSH
17930: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17934: LD_EXP 1
17938: PPUSH
17939: LD_STRING D7d-JMM-1
17941: PPUSH
17942: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17946: LD_EXP 22
17950: PPUSH
17951: LD_STRING D7d-Pow-1
17953: PPUSH
17954: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17958: LD_EXP 1
17962: PPUSH
17963: LD_STRING D7d-JMM-2
17965: PPUSH
17966: CALL_OW 88
// if askSiberite = 1 then
17970: LD_EXP 33
17974: PUSH
17975: LD_INT 1
17977: EQUAL
17978: IFFALSE 17994
// begin Say ( JMM , D7d-JMM-2a ) ;
17980: LD_EXP 1
17984: PPUSH
17985: LD_STRING D7d-JMM-2a
17987: PPUSH
17988: CALL_OW 88
// end else
17992: GO 18006
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
17994: LD_EXP 22
17998: PPUSH
17999: LD_STRING D7d-Pow-2
18001: PPUSH
18002: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18006: LD_EXP 22
18010: PPUSH
18011: LD_STRING D7d-Pow-2a
18013: PPUSH
18014: CALL_OW 94
// end ; FinishMission ;
18018: CALL 18023 0 0
// end ;
18022: END
// export function FinishMission ; begin
18023: LD_INT 0
18025: PPUSH
// if teleportExplored = 1 then
18026: LD_EXP 34
18030: PUSH
18031: LD_INT 1
18033: EQUAL
18034: IFFALSE 18048
// AddMedal ( Teleport , 1 ) else
18036: LD_STRING Teleport
18038: PPUSH
18039: LD_INT 1
18041: PPUSH
18042: CALL_OW 101
18046: GO 18059
// AddMedal ( Teleport , - 1 ) ;
18048: LD_STRING Teleport
18050: PPUSH
18051: LD_INT 1
18053: NEG
18054: PPUSH
18055: CALL_OW 101
// if sciCounter > 2 then
18059: LD_EXP 36
18063: PUSH
18064: LD_INT 2
18066: GREATER
18067: IFFALSE 18081
// AddMedal ( Materials , 1 ) else
18069: LD_STRING Materials
18071: PPUSH
18072: LD_INT 1
18074: PPUSH
18075: CALL_OW 101
18079: GO 18092
// AddMedal ( Materials , - 1 ) ;
18081: LD_STRING Materials
18083: PPUSH
18084: LD_INT 1
18086: NEG
18087: PPUSH
18088: CALL_OW 101
// if sciCounter = 6 then
18092: LD_EXP 36
18096: PUSH
18097: LD_INT 6
18099: EQUAL
18100: IFFALSE 18124
// begin AddMedal ( Scientists , 1 ) ;
18102: LD_STRING Scientists
18104: PPUSH
18105: LD_INT 1
18107: PPUSH
18108: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18112: LD_INT 1
18114: PPUSH
18115: LD_STRING 12_SciDed_1
18117: PPUSH
18118: CALL_OW 39
// end else
18122: GO 18145
// begin AddMedal ( Scientists , - 1 ) ;
18124: LD_STRING Scientists
18126: PPUSH
18127: LD_INT 1
18129: NEG
18130: PPUSH
18131: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18135: LD_INT 0
18137: PPUSH
18138: LD_STRING 12_SciDed_1
18140: PPUSH
18141: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18145: LD_EXP 32
18149: PPUSH
18150: LD_STRING 12_MainDepositFake_1
18152: PPUSH
18153: CALL_OW 39
// GiveMedals ( MAIN ) ;
18157: LD_STRING MAIN
18159: PPUSH
18160: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18164: LD_INT 22
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 21
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: LD_INT 25
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 25
18199: PUSH
18200: LD_INT 2
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 25
18209: PUSH
18210: LD_INT 3
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 4
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 25
18229: PUSH
18230: LD_INT 5
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 25
18239: PUSH
18240: LD_INT 8
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: PPUSH
18266: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18270: LD_EXP 1
18274: PPUSH
18275: LD_EXP 46
18279: PUSH
18280: LD_STRING JMM
18282: STR
18283: PPUSH
18284: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18288: LD_EXP 7
18292: PPUSH
18293: LD_EXP 46
18297: PUSH
18298: LD_STRING Brown
18300: STR
18301: PPUSH
18302: CALL 12255 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18306: LD_EXP 3
18310: PPUSH
18311: LD_EXP 46
18315: PUSH
18316: LD_STRING Donaldson
18318: STR
18319: PPUSH
18320: CALL 12255 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18324: LD_EXP 4
18328: PPUSH
18329: LD_EXP 46
18333: PUSH
18334: LD_STRING Bobby
18336: STR
18337: PPUSH
18338: CALL 12255 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18342: LD_EXP 5
18346: PPUSH
18347: LD_EXP 46
18351: PUSH
18352: LD_STRING Cyrus
18354: STR
18355: PPUSH
18356: CALL 12255 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18360: LD_EXP 2
18364: PPUSH
18365: LD_EXP 46
18369: PUSH
18370: LD_STRING Lisa
18372: STR
18373: PPUSH
18374: CALL 12255 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18378: LD_EXP 12
18382: PPUSH
18383: LD_EXP 46
18387: PUSH
18388: LD_STRING Frank
18390: STR
18391: PPUSH
18392: CALL 12255 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18396: LD_EXP 13
18400: PPUSH
18401: LD_EXP 46
18405: PUSH
18406: LD_STRING Kikuchi
18408: STR
18409: PPUSH
18410: CALL 12255 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18414: LD_EXP 9
18418: PPUSH
18419: LD_EXP 46
18423: PUSH
18424: LD_STRING Houten
18426: STR
18427: PPUSH
18428: CALL 12255 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18432: LD_EXP 11
18436: PPUSH
18437: LD_EXP 46
18441: PUSH
18442: LD_STRING Gary
18444: STR
18445: PPUSH
18446: CALL 12255 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18450: LD_EXP 10
18454: PPUSH
18455: LD_EXP 46
18459: PUSH
18460: LD_STRING Cornell
18462: STR
18463: PPUSH
18464: CALL 12255 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18468: LD_EXP 6
18472: PPUSH
18473: LD_EXP 46
18477: PUSH
18478: LD_STRING Denis
18480: STR
18481: PPUSH
18482: CALL 12255 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18486: LD_EXP 8
18490: PPUSH
18491: LD_EXP 46
18495: PUSH
18496: LD_STRING Gladstone
18498: STR
18499: PPUSH
18500: CALL 12255 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18504: LD_INT 50
18506: PUSH
18507: EMPTY
18508: LIST
18509: PUSH
18510: LD_INT 22
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 23
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 21
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: LD_INT 25
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 25
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 25
18565: PUSH
18566: LD_INT 3
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 25
18575: PUSH
18576: LD_INT 4
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 25
18585: PUSH
18586: LD_INT 5
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 25
18595: PUSH
18596: LD_INT 8
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 69
18623: PUSH
18624: LD_EXP 1
18628: PUSH
18629: LD_EXP 7
18633: PUSH
18634: LD_EXP 3
18638: PUSH
18639: LD_EXP 4
18643: PUSH
18644: LD_EXP 5
18648: PUSH
18649: LD_EXP 2
18653: PUSH
18654: LD_EXP 12
18658: PUSH
18659: LD_EXP 8
18663: PUSH
18664: LD_EXP 13
18668: PUSH
18669: LD_EXP 6
18673: PUSH
18674: LD_EXP 9
18678: PUSH
18679: LD_EXP 11
18683: PUSH
18684: LD_EXP 10
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: DIFF
18704: PPUSH
18705: LD_STRING 12_other_survivors
18707: PPUSH
18708: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18712: LD_INT 50
18714: PUSH
18715: EMPTY
18716: LIST
18717: PUSH
18718: LD_INT 22
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 23
18730: PUSH
18731: LD_INT 2
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 21
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: PUSH
18751: LD_INT 25
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 25
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 25
18773: PUSH
18774: LD_INT 3
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 25
18783: PUSH
18784: LD_INT 4
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 25
18793: PUSH
18794: LD_INT 5
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 25
18803: PUSH
18804: LD_INT 8
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: PPUSH
18827: CALL_OW 69
18831: PPUSH
18832: LD_STRING 12_kurt_squad
18834: PPUSH
18835: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
18839: LD_STRING 11_others
18841: PPUSH
18842: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
18846: LD_EXP 14
18850: PPUSH
18851: LD_STRING 11_others
18853: PPUSH
18854: CALL_OW 38
// YouWin ;
18858: CALL_OW 103
// end ; end_of_file
18862: LD_VAR 0 1
18866: RET
// every 0 0$1 trigger IsDead ( JMM ) do
18867: LD_EXP 1
18871: PPUSH
18872: CALL_OW 301
18876: IFFALSE 18888
18878: GO 18880
18880: DISABLE
// YouLost ( JMM ) ; end_of_file
18881: LD_STRING JMM
18883: PPUSH
18884: CALL_OW 104
18888: END
// every 0 0$01 do
18889: GO 18891
18891: DISABLE
// begin repeat wait ( 0 0$30 ) ;
18892: LD_INT 1050
18894: PPUSH
18895: CALL_OW 67
// if cratesSpawned < 6 then
18899: LD_EXP 45
18903: PUSH
18904: LD_INT 6
18906: LESS
18907: IFFALSE 18944
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18909: LD_INT 3
18911: PPUSH
18912: LD_INT 5
18914: PPUSH
18915: CALL_OW 12
18919: PPUSH
18920: LD_INT 21
18922: PPUSH
18923: LD_INT 1
18925: PPUSH
18926: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18930: LD_ADDR_EXP 45
18934: PUSH
18935: LD_EXP 45
18939: PUSH
18940: LD_INT 1
18942: PLUS
18943: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
18944: LD_EXP 45
18948: PUSH
18949: LD_INT 6
18951: GREATEREQUAL
18952: PUSH
18953: LD_EXP 45
18957: PUSH
18958: LD_INT 12
18960: LESS
18961: AND
18962: IFFALSE 19006
// begin wait ( 0 0$30 ) ;
18964: LD_INT 1050
18966: PPUSH
18967: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18971: LD_INT 3
18973: PPUSH
18974: LD_INT 5
18976: PPUSH
18977: CALL_OW 12
18981: PPUSH
18982: LD_INT 21
18984: PPUSH
18985: LD_INT 1
18987: PPUSH
18988: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18992: LD_ADDR_EXP 45
18996: PUSH
18997: LD_EXP 45
19001: PUSH
19002: LD_INT 1
19004: PLUS
19005: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19006: LD_EXP 45
19010: PUSH
19011: LD_INT 12
19013: GREATEREQUAL
19014: IFFALSE 19058
// begin wait ( 1 1$30 ) ;
19016: LD_INT 3150
19018: PPUSH
19019: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19023: LD_INT 3
19025: PPUSH
19026: LD_INT 5
19028: PPUSH
19029: CALL_OW 12
19033: PPUSH
19034: LD_INT 21
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19044: LD_ADDR_EXP 45
19048: PUSH
19049: LD_EXP 45
19053: PUSH
19054: LD_INT 1
19056: PLUS
19057: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
19058: LD_EXP 45
19062: PUSH
19063: LD_INT 15
19065: GREATEREQUAL
19066: IFFALSE 18892
// end ;
19068: END
