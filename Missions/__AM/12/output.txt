// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17367 0 0
// PrepareDifficulty ;
 195: CALL 13781 0 0
// PrepareVehicles ;
 199: CALL 1658 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1232 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 3034 0 0
// PrepareWestBase ;
 227: CALL 3546 0 0
// PrepareEastBase ;
 231: CALL 3106 0 0
// PrepareOtherRussians ;
 235: CALL 3658 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 557: LD_INT 0
 559: PPUSH
 560: PPUSH
 561: PPUSH
// uc_side = 1 ;
 562: LD_ADDR_OWVAR 20
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 570: LD_ADDR_EXP 14
 574: PUSH
 575: LD_STRING 11c_others
 577: PPUSH
 578: CALL_OW 31
 582: PUSH
 583: LD_STRING 11_others
 585: PPUSH
 586: CALL_OW 31
 590: UNION
 591: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_STRING 11_JMM
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL 13498 0 2
 607: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 608: LD_EXP 1
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 22
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 21
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 58
 647: PUSH
 648: EMPTY
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: PPUSH
 656: CALL_OW 69
 660: PUSH
 661: LD_INT 1
 663: ARRAY
 664: PPUSH
 665: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 669: LD_STRING 11_Lisa
 671: PPUSH
 672: CALL_OW 28
 676: PUSH
 677: LD_INT 1
 679: EQUAL
 680: IFFALSE 727
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 682: LD_ADDR_EXP 2
 686: PUSH
 687: LD_STRING 11_Lisa
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 13498 0 2
 697: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 698: LD_EXP 2
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 710: LD_EXP 2
 714: PPUSH
 715: LD_INT 4
 717: PPUSH
 718: LD_INT 0
 720: PPUSH
 721: CALL_OW 49
// end else
 725: GO 743
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 727: LD_INT 4
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 1232 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 743: LD_STRING 11_Donaldson
 745: PPUSH
 746: CALL_OW 28
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: IFFALSE 801
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 756: LD_ADDR_EXP 3
 760: PUSH
 761: LD_STRING 11_Donaldson
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: CALL 13498 0 2
 771: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 784: LD_EXP 3
 788: PPUSH
 789: LD_INT 4
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// end else
 799: GO 817
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 801: LD_INT 4
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL 1232 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 817: LD_STRING 11_Cyrus
 819: PPUSH
 820: CALL_OW 28
 824: PUSH
 825: LD_INT 1
 827: EQUAL
 828: IFFALSE 875
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 830: LD_ADDR_EXP 5
 834: PUSH
 835: LD_STRING 11_Cyrus
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL 13498 0 2
 845: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 846: LD_EXP 5
 850: PPUSH
 851: LD_INT 1
 853: PPUSH
 854: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 858: LD_EXP 5
 862: PPUSH
 863: LD_INT 4
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
// end else
 873: GO 891
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 875: LD_INT 4
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL 1232 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 891: LD_STRING 11_Denis
 893: PPUSH
 894: CALL_OW 28
 898: PUSH
 899: LD_INT 1
 901: EQUAL
 902: IFFALSE 949
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 904: LD_ADDR_EXP 6
 908: PUSH
 909: LD_STRING 11_Denis
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 13498 0 2
 919: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 920: LD_EXP 6
 924: PPUSH
 925: LD_INT 4
 927: PPUSH
 928: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 932: LD_EXP 6
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// end else
 947: GO 965
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 949: LD_INT 4
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL 1232 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 965: LD_STRING 11_Frank
 967: PPUSH
 968: CALL_OW 28
 972: PUSH
 973: LD_INT 1
 975: EQUAL
 976: IFFALSE 1023
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 978: LD_ADDR_EXP 12
 982: PUSH
 983: LD_STRING 11_Frank
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL 13498 0 2
 993: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 994: LD_EXP 12
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1006: LD_EXP 12
1010: PPUSH
1011: LD_INT 4
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 49
// end else
1021: GO 1039
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1023: LD_INT 4
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL 1232 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1039: LD_STRING 11_Cornell
1041: PPUSH
1042: CALL_OW 28
1046: PUSH
1047: LD_INT 1
1049: EQUAL
1050: IFFALSE 1097
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: LD_STRING 11_Cornell
1059: PPUSH
1060: LD_INT 1
1062: PPUSH
1063: CALL 13498 0 2
1067: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1068: LD_EXP 10
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1080: LD_EXP 10
1084: PPUSH
1085: LD_INT 4
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 49
// end else
1095: GO 1113
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1097: LD_INT 4
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 1
1105: PPUSH
1106: LD_INT 0
1108: PPUSH
1109: CALL 1232 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1113: LD_ADDR_VAR 0 2
1117: PUSH
1118: LD_EXP 14
1122: PPUSH
1123: LD_INT 26
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 72
1137: ST_TO_ADDR
// if not tmp then
1138: LD_VAR 0 2
1142: NOT
1143: IFFALSE 1172
// begin PrepareSoldier ( sex_male , 8 ) ;
1145: LD_INT 1
1147: PPUSH
1148: LD_INT 8
1150: PPUSH
1151: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1155: CALL_OW 44
1159: PPUSH
1160: LD_INT 4
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 49
// end else
1170: GO 1211
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: LD_INT 4
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1191: LD_ADDR_EXP 14
1195: PUSH
1196: LD_EXP 14
1200: PUSH
1201: LD_VAR 0 2
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: DIFF
1210: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1211: LD_ADDR_EXP 22
1215: PUSH
1216: LD_STRING Powell
1218: PPUSH
1219: LD_INT 0
1221: PPUSH
1222: CALL 13498 0 2
1226: ST_TO_ADDR
// end ;
1227: LD_VAR 0 1
1231: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1232: LD_INT 0
1234: PPUSH
1235: PPUSH
1236: PPUSH
1237: PPUSH
1238: PPUSH
// if mech = 1 then
1239: LD_VAR 0 4
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1484
// begin if others11 > 0 then
1249: LD_EXP 14
1253: PUSH
1254: LD_INT 0
1256: GREATER
1257: IFFALSE 1424
// begin for i := 1 to others11 - 1 do
1259: LD_ADDR_VAR 0 6
1263: PUSH
1264: DOUBLE
1265: LD_INT 1
1267: DEC
1268: ST_TO_ADDR
1269: LD_EXP 14
1273: PUSH
1274: LD_INT 1
1276: MINUS
1277: PUSH
1278: FOR_TO
1279: IFFALSE 1361
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1281: LD_EXP 14
1285: PUSH
1286: LD_VAR 0 6
1290: ARRAY
1291: PPUSH
1292: LD_INT 3
1294: PPUSH
1295: CALL_OW 259
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 6
1309: PUSH
1310: LD_INT 1
1312: PLUS
1313: ARRAY
1314: PPUSH
1315: LD_INT 3
1317: PPUSH
1318: CALL_OW 259
1322: LESS
1323: IFFALSE 1359
// begin mecha = others11 [ i + 1 ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_EXP 14
1334: PUSH
1335: LD_VAR 0 6
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1345: LD_VAR 0 9
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: CALL_OW 336
// break ;
1357: GO 1361
// end ; end ;
1359: GO 1278
1361: POP
1362: POP
// if spawnMode = 1 then
1363: LD_VAR 0 3
1367: PUSH
1368: LD_INT 1
1370: EQUAL
1371: IFFALSE 1392
// PlaceUnitArea ( mecha , area , false ) else
1373: LD_VAR 0 9
1377: PPUSH
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 49
1390: GO 1406
// PlaceHumanInUnit ( mecha , veh ) ;
1392: LD_VAR 0 9
1396: PPUSH
1397: LD_VAR 0 2
1401: PPUSH
1402: CALL_OW 52
// others11 = others11 diff mecha ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_EXP 14
1415: PUSH
1416: LD_VAR 0 9
1420: DIFF
1421: ST_TO_ADDR
// end else
1422: GO 1482
// begin hc_name =  ;
1424: LD_ADDR_OWVAR 26
1428: PUSH
1429: LD_STRING 
1431: ST_TO_ADDR
// hc_gallery =  ;
1432: LD_ADDR_OWVAR 33
1436: PUSH
1437: LD_STRING 
1439: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1440: LD_INT 0
1442: PPUSH
1443: LD_INT 7
1445: PPUSH
1446: LD_INT 9
1448: PPUSH
1449: CALL_OW 12
1453: PPUSH
1454: CALL_OW 383
// un = CreateHuman ;
1458: LD_ADDR_VAR 0 7
1462: PUSH
1463: CALL_OW 44
1467: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1468: LD_VAR 0 7
1472: PPUSH
1473: LD_VAR 0 2
1477: PPUSH
1478: CALL_OW 52
// end ; end else
1482: GO 1653
// begin if others11 > 0 then
1484: LD_EXP 14
1488: PUSH
1489: LD_INT 0
1491: GREATER
1492: IFFALSE 1565
// begin if spawnMode = 1 then
1494: LD_VAR 0 3
1498: PUSH
1499: LD_INT 1
1501: EQUAL
1502: IFFALSE 1527
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1504: LD_EXP 14
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: LD_VAR 0 1
1517: PPUSH
1518: LD_INT 0
1520: PPUSH
1521: CALL_OW 49
1525: GO 1545
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1527: LD_EXP 14
1531: PUSH
1532: LD_INT 1
1534: ARRAY
1535: PPUSH
1536: LD_VAR 0 2
1540: PPUSH
1541: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1545: LD_ADDR_EXP 14
1549: PUSH
1550: LD_EXP 14
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 3
1562: ST_TO_ADDR
// end else
1563: GO 1653
// begin hc_name =  ;
1565: LD_ADDR_OWVAR 26
1569: PUSH
1570: LD_STRING 
1572: ST_TO_ADDR
// hc_gallery =  ;
1573: LD_ADDR_OWVAR 33
1577: PUSH
1578: LD_STRING 
1580: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1581: LD_INT 0
1583: PPUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 3
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 12
1612: ARRAY
1613: PPUSH
1614: LD_INT 7
1616: PPUSH
1617: LD_INT 9
1619: PPUSH
1620: CALL_OW 12
1624: PPUSH
1625: CALL_OW 380
// un = CreateHuman ;
1629: LD_ADDR_VAR 0 7
1633: PUSH
1634: CALL_OW 44
1638: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1639: LD_VAR 0 7
1643: PPUSH
1644: LD_VAR 0 2
1648: PPUSH
1649: CALL_OW 52
// end ; end ; end ;
1653: LD_VAR 0 5
1657: RET
// export function PrepareVehicles ; var veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
// uc_side = 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// uc_nation = 1 ;
1670: LD_ADDR_OWVAR 21
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1678: LD_ADDR_OWVAR 37
1682: PUSH
1683: LD_INT 3
1685: ST_TO_ADDR
// vc_engine = 3 ;
1686: LD_ADDR_OWVAR 39
1690: PUSH
1691: LD_INT 3
1693: ST_TO_ADDR
// vc_control = 3 ;
1694: LD_ADDR_OWVAR 38
1698: PUSH
1699: LD_INT 3
1701: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1702: LD_ADDR_OWVAR 40
1706: PUSH
1707: LD_INT 4
1709: ST_TO_ADDR
// veh = CreateVehicle ;
1710: LD_ADDR_VAR 0 2
1714: PUSH
1715: CALL_OW 45
1719: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1720: LD_VAR 0 2
1724: PPUSH
1725: LD_INT 4
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 49
// vc_weapon = us_double_gun ;
1735: LD_ADDR_OWVAR 40
1739: PUSH
1740: LD_INT 5
1742: ST_TO_ADDR
// vc_control = 1 ;
1743: LD_ADDR_OWVAR 38
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// veh = CreateVehicle ;
1751: LD_ADDR_VAR 0 2
1755: PUSH
1756: CALL_OW 45
1760: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1761: LD_VAR 0 2
1765: PPUSH
1766: LD_INT 4
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 49
// vc_weapon = us_light_gun ;
1776: LD_ADDR_OWVAR 40
1780: PUSH
1781: LD_INT 3
1783: ST_TO_ADDR
// vc_control = 3 ;
1784: LD_ADDR_OWVAR 38
1788: PUSH
1789: LD_INT 3
1791: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1792: LD_ADDR_OWVAR 37
1796: PUSH
1797: LD_INT 2
1799: ST_TO_ADDR
// veh = CreateVehicle ;
1800: LD_ADDR_VAR 0 2
1804: PUSH
1805: CALL_OW 45
1809: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1810: LD_VAR 0 2
1814: PPUSH
1815: LD_INT 4
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1825: LD_ADDR_OWVAR 40
1829: PUSH
1830: LD_INT 4
1832: ST_TO_ADDR
// veh = CreateVehicle ;
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: CALL_OW 45
1842: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1843: LD_VAR 0 2
1847: PPUSH
1848: LD_INT 4
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 49
// end ;
1858: LD_VAR 0 1
1862: RET
// export function PowellSupport1 ; var veh , un ; begin
1863: LD_INT 0
1865: PPUSH
1866: PPUSH
1867: PPUSH
// uc_side = 1 ;
1868: LD_ADDR_OWVAR 20
1872: PUSH
1873: LD_INT 1
1875: ST_TO_ADDR
// uc_nation = 1 ;
1876: LD_ADDR_OWVAR 21
1880: PUSH
1881: LD_INT 1
1883: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1884: LD_STRING 11_Brown
1886: PPUSH
1887: CALL_OW 28
1891: PUSH
1892: LD_INT 1
1894: EQUAL
1895: IFFALSE 1942
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1897: LD_ADDR_EXP 7
1901: PUSH
1902: LD_STRING 11_Brown
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: CALL 13498 0 2
1912: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1913: LD_EXP 7
1917: PPUSH
1918: LD_INT 2
1920: PPUSH
1921: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1925: LD_EXP 7
1929: PPUSH
1930: LD_INT 4
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 49
// end else
1940: GO 1958
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1942: LD_INT 4
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL 1232 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1958: LD_STRING 11_Gary
1960: PPUSH
1961: CALL_OW 28
1965: PUSH
1966: LD_INT 1
1968: EQUAL
1969: IFFALSE 2016
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1971: LD_ADDR_EXP 11
1975: PUSH
1976: LD_STRING 11_Gary
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 13498 0 2
1986: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1987: LD_EXP 11
1991: PPUSH
1992: LD_INT 2
1994: PPUSH
1995: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1999: LD_EXP 11
2003: PPUSH
2004: LD_INT 4
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
// end else
2014: GO 2032
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2016: LD_INT 4
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: LD_INT 0
2027: PPUSH
2028: CALL 1232 0 4
// end ; vc_chassis = us_medium_tracked ;
2032: LD_ADDR_OWVAR 37
2036: PUSH
2037: LD_INT 3
2039: ST_TO_ADDR
// vc_engine = 3 ;
2040: LD_ADDR_OWVAR 39
2044: PUSH
2045: LD_INT 3
2047: ST_TO_ADDR
// vc_control = 1 ;
2048: LD_ADDR_OWVAR 38
2052: PUSH
2053: LD_INT 1
2055: ST_TO_ADDR
// vc_weapon = us_crane ;
2056: LD_ADDR_OWVAR 40
2060: PUSH
2061: LD_INT 13
2063: ST_TO_ADDR
// veh = CreateVehicle ;
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2074: LD_VAR 0 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 2
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: CALL 1232 0 4
// vc_weapon = 9 ;
2119: LD_ADDR_OWVAR 40
2123: PUSH
2124: LD_INT 9
2126: ST_TO_ADDR
// veh = CreateVehicle ;
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2137: LD_VAR 0 2
2141: PPUSH
2142: LD_INT 4
2144: PPUSH
2145: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2149: LD_VAR 0 2
2153: PPUSH
2154: LD_INT 4
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2164: LD_INT 4
2166: PPUSH
2167: LD_VAR 0 2
2171: PPUSH
2172: LD_INT 2
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: CALL 1232 0 4
// vc_control = 3 ;
2182: LD_ADDR_OWVAR 38
2186: PUSH
2187: LD_INT 3
2189: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2190: LD_ADDR_OWVAR 40
2194: PUSH
2195: LD_INT 12
2197: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2198: LD_ADDR_EXP 15
2202: PUSH
2203: CALL_OW 45
2207: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2208: LD_ADDR_EXP 16
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2218: LD_EXP 15
2222: PPUSH
2223: LD_INT 4
2225: PPUSH
2226: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2230: LD_EXP 16
2234: PPUSH
2235: LD_INT 4
2237: PPUSH
2238: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2242: LD_EXP 15
2246: PPUSH
2247: LD_INT 4
2249: PPUSH
2250: LD_INT 0
2252: PPUSH
2253: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2257: LD_EXP 16
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2272: LD_EXP 15
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2287: LD_EXP 16
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: LD_INT 80
2297: PPUSH
2298: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2302: LD_EXP 16
2306: PPUSH
2307: LD_INT 3
2309: PPUSH
2310: LD_INT 20
2312: PPUSH
2313: CALL_OW 291
// end ;
2317: LD_VAR 0 1
2321: RET
// export function PowellSupport2 ; var veh , un ; begin
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
// uc_side = 1 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// uc_nation = 1 ;
2335: LD_ADDR_OWVAR 21
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2343: LD_ADDR_OWVAR 37
2347: PUSH
2348: LD_INT 2
2350: ST_TO_ADDR
// vc_engine = 3 ;
2351: LD_ADDR_OWVAR 39
2355: PUSH
2356: LD_INT 3
2358: ST_TO_ADDR
// vc_control = 3 ;
2359: LD_ADDR_OWVAR 38
2363: PUSH
2364: LD_INT 3
2366: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2367: LD_ADDR_OWVAR 40
2371: PUSH
2372: LD_INT 3
2374: ST_TO_ADDR
// veh = CreateVehicle ;
2375: LD_ADDR_VAR 0 2
2379: PUSH
2380: CALL_OW 45
2384: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2385: LD_VAR 0 2
2389: PPUSH
2390: LD_INT 4
2392: PPUSH
2393: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_INT 4
2404: PPUSH
2405: LD_INT 0
2407: PPUSH
2408: CALL_OW 49
// vc_control = 1 ;
2412: LD_ADDR_OWVAR 38
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2420: LD_ADDR_OWVAR 37
2424: PUSH
2425: LD_INT 2
2427: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 5
2435: ST_TO_ADDR
// veh = CreateVehicle ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: CALL_OW 45
2445: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 4
2453: PPUSH
2454: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_INT 4
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2473: LD_STRING 11_Bobby
2475: PPUSH
2476: CALL_OW 28
2480: PUSH
2481: LD_INT 1
2483: EQUAL
2484: IFFALSE 2530
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2486: LD_ADDR_EXP 4
2490: PUSH
2491: LD_STRING 11_Bobby
2493: PPUSH
2494: LD_INT 1
2496: PPUSH
2497: CALL 13498 0 2
2501: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2502: LD_EXP 4
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2514: LD_EXP 4
2518: PPUSH
2519: LD_VAR 0 2
2523: PPUSH
2524: CALL_OW 52
// end else
2528: GO 2548
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2530: LD_INT 0
2532: PPUSH
2533: LD_VAR 0 2
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: CALL 1232 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2548: LD_STRING 11_Houten
2550: PPUSH
2551: CALL_OW 28
2555: PUSH
2556: LD_INT 1
2558: EQUAL
2559: IFFALSE 2606
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2561: LD_ADDR_EXP 9
2565: PUSH
2566: LD_STRING 11_Houten
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL 13498 0 2
2576: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2577: LD_EXP 9
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2589: LD_EXP 9
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// end else
2604: GO 2622
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: LD_INT 1
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL 1232 0 4
// end ; vc_control = 3 ;
2622: LD_ADDR_OWVAR 38
2626: PUSH
2627: LD_INT 3
2629: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2630: LD_ADDR_OWVAR 40
2634: PUSH
2635: LD_INT 12
2637: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2638: LD_ADDR_EXP 17
2642: PUSH
2643: CALL_OW 45
2647: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2648: LD_EXP 17
2652: PPUSH
2653: LD_INT 4
2655: PPUSH
2656: CALL_OW 233
// amCargo4 = CreateVehicle ;
2660: LD_ADDR_EXP 18
2664: PUSH
2665: CALL_OW 45
2669: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2670: LD_EXP 18
2674: PPUSH
2675: LD_INT 4
2677: PPUSH
2678: CALL_OW 233
// amCargo5 = CreateVehicle ;
2682: LD_ADDR_EXP 19
2686: PUSH
2687: CALL_OW 45
2691: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2692: LD_EXP 19
2696: PPUSH
2697: LD_INT 4
2699: PPUSH
2700: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2704: LD_EXP 17
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2719: LD_EXP 18
2723: PPUSH
2724: LD_INT 4
2726: PPUSH
2727: LD_INT 0
2729: PPUSH
2730: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_INT 4
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// if kurtStatus > 0 then
2749: LD_EXP 27
2753: PUSH
2754: LD_INT 0
2756: GREATER
2757: IFFALSE 2806
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2759: LD_EXP 17
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2774: LD_EXP 18
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: LD_INT 100
2784: PPUSH
2785: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2789: LD_EXP 19
2793: PPUSH
2794: LD_INT 3
2796: PPUSH
2797: LD_INT 80
2799: PPUSH
2800: CALL_OW 291
// end else
2804: GO 2851
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2806: LD_EXP 17
2810: PPUSH
2811: LD_INT 1
2813: PPUSH
2814: LD_INT 100
2816: PPUSH
2817: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2821: LD_EXP 18
2825: PPUSH
2826: LD_INT 3
2828: PPUSH
2829: LD_INT 60
2831: PPUSH
2832: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2836: LD_EXP 19
2840: PPUSH
2841: LD_INT 3
2843: PPUSH
2844: LD_INT 100
2846: PPUSH
2847: CALL_OW 291
// end ; end ;
2851: LD_VAR 0 1
2855: RET
// export function PowellSupport3 ; var veh , un ; begin
2856: LD_INT 0
2858: PPUSH
2859: PPUSH
2860: PPUSH
// uc_side = 1 ;
2861: LD_ADDR_OWVAR 20
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// uc_nation = 1 ;
2869: LD_ADDR_OWVAR 21
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2877: LD_INT 4
2879: PPUSH
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: CALL 1232 0 4
// vc_chassis = us_medium_wheeled ;
2893: LD_ADDR_OWVAR 37
2897: PUSH
2898: LD_INT 2
2900: ST_TO_ADDR
// vc_engine = 3 ;
2901: LD_ADDR_OWVAR 39
2905: PUSH
2906: LD_INT 3
2908: ST_TO_ADDR
// vc_control = 3 ;
2909: LD_ADDR_OWVAR 38
2913: PUSH
2914: LD_INT 3
2916: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2917: LD_ADDR_OWVAR 40
2921: PUSH
2922: LD_INT 12
2924: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2925: LD_ADDR_EXP 20
2929: PUSH
2930: CALL_OW 45
2934: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2935: LD_ADDR_EXP 21
2939: PUSH
2940: CALL_OW 45
2944: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2945: LD_EXP 20
2949: PPUSH
2950: LD_INT 4
2952: PPUSH
2953: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2957: LD_EXP 21
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2969: LD_EXP 20
2973: PPUSH
2974: LD_INT 4
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2984: LD_EXP 21
2988: PPUSH
2989: LD_INT 4
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2999: LD_EXP 20
3003: PPUSH
3004: LD_INT 1
3006: PPUSH
3007: LD_INT 100
3009: PPUSH
3010: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3014: LD_EXP 21
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 100
3024: PPUSH
3025: CALL_OW 291
// end ; end_of_file
3029: LD_VAR 0 1
3033: RET
// export function PrepareRussianCommander ; begin
3034: LD_INT 0
3036: PPUSH
// uc_side = 3 ;
3037: LD_ADDR_OWVAR 20
3041: PUSH
3042: LD_INT 3
3044: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3045: LD_ADDR_EXP 23
3049: PUSH
3050: LD_STRING Davidov
3052: PPUSH
3053: LD_INT 0
3055: PPUSH
3056: CALL 13498 0 2
3060: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3061: LD_EXP 23
3065: PPUSH
3066: LD_INT 3
3068: PPUSH
3069: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3073: LD_ADDR_EXP 35
3077: PUSH
3078: LD_EXP 35
3082: PUSH
3083: LD_EXP 23
3087: ADD
3088: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3089: LD_EXP 35
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: CALL_OW 336
// end ;
3101: LD_VAR 0 1
3105: RET
// export function PrepareEastBase ; var i , un ; begin
3106: LD_INT 0
3108: PPUSH
3109: PPUSH
3110: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3111: LD_INT 3
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 121
3119: PPUSH
3120: LD_EXP 37
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 12
3134: PPUSH
3135: LD_INT 1
3137: PPUSH
3138: LD_INT 3
3140: PPUSH
3141: CALL 14212 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3145: LD_INT 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 121
3153: PPUSH
3154: LD_EXP 37
3158: PPUSH
3159: LD_EXP 38
3163: PPUSH
3164: CALL_OW 12
3168: PPUSH
3169: LD_INT 9
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: CALL 14212 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_EXP 37
3192: PPUSH
3193: LD_EXP 38
3197: PPUSH
3198: CALL_OW 12
3202: PPUSH
3203: LD_INT 2
3205: PPUSH
3206: LD_INT 6
3208: PPUSH
3209: CALL 14212 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: LD_INT 112
3221: PPUSH
3222: LD_EXP 37
3226: PPUSH
3227: LD_EXP 38
3231: PPUSH
3232: CALL_OW 12
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 6
3242: PPUSH
3243: CALL 14212 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 3
3252: PPUSH
3253: LD_INT 47
3255: PPUSH
3256: LD_EXP 37
3260: PPUSH
3261: LD_EXP 38
3265: PPUSH
3266: CALL_OW 12
3270: PPUSH
3271: LD_INT 4
3273: PPUSH
3274: LD_INT 6
3276: PPUSH
3277: CALL 14212 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3281: LD_INT 3
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 129
3289: PPUSH
3290: LD_EXP 37
3294: PPUSH
3295: LD_EXP 38
3299: PPUSH
3300: CALL_OW 12
3304: PPUSH
3305: LD_INT 4
3307: PPUSH
3308: LD_INT 6
3310: PPUSH
3311: CALL 14212 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3315: LD_INT 3
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: LD_INT 135
3323: PPUSH
3324: LD_EXP 37
3328: PPUSH
3329: LD_EXP 38
3333: PPUSH
3334: CALL_OW 12
3338: PPUSH
3339: LD_INT 4
3341: PPUSH
3342: LD_INT 6
3344: PPUSH
3345: CALL 14212 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 3
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 30
3366: PUSH
3367: LD_INT 32
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 69
3382: PUSH
3383: FOR_IN
3384: IFFALSE 3424
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3386: LD_INT 3
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: LD_VAR 0 2
3396: PPUSH
3397: LD_EXP 37
3401: PPUSH
3402: LD_EXP 38
3406: PPUSH
3407: CALL_OW 12
3411: PPUSH
3412: LD_INT 1
3414: PPUSH
3415: LD_INT 1
3417: PPUSH
3418: CALL 14212 0 6
3422: GO 3383
3424: POP
3425: POP
// for i = 1 to 5 do
3426: LD_ADDR_VAR 0 2
3430: PUSH
3431: DOUBLE
3432: LD_INT 1
3434: DEC
3435: ST_TO_ADDR
3436: LD_INT 5
3438: PUSH
3439: FOR_TO
3440: IFFALSE 3539
// begin uc_side = 3 ;
3442: LD_ADDR_OWVAR 20
3446: PUSH
3447: LD_INT 3
3449: ST_TO_ADDR
// uc_nation = 3 ;
3450: LD_ADDR_OWVAR 21
3454: PUSH
3455: LD_INT 3
3457: ST_TO_ADDR
// hc_gallery =  ;
3458: LD_ADDR_OWVAR 33
3462: PUSH
3463: LD_STRING 
3465: ST_TO_ADDR
// hc_name =  ;
3466: LD_ADDR_OWVAR 26
3470: PUSH
3471: LD_STRING 
3473: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 4
3479: PPUSH
3480: LD_EXP 37
3484: PPUSH
3485: LD_EXP 38
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 380
// un = CreateHuman ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3509: LD_VAR 0 3
3513: PPUSH
3514: LD_INT 3
3516: PPUSH
3517: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3521: LD_ADDR_EXP 35
3525: PUSH
3526: LD_EXP 35
3530: PUSH
3531: LD_VAR 0 3
3535: ADD
3536: ST_TO_ADDR
// end ;
3537: GO 3439
3539: POP
3540: POP
// end ;
3541: LD_VAR 0 1
3545: RET
// export function PrepareWestBase ; var i , un ; begin
3546: LD_INT 0
3548: PPUSH
3549: PPUSH
3550: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3551: LD_INT 3
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 6
3559: PPUSH
3560: LD_EXP 37
3564: PPUSH
3565: LD_EXP 38
3569: PPUSH
3570: CALL_OW 12
3574: PPUSH
3575: LD_INT 2
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: CALL 14212 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3585: LD_INT 3
3587: PPUSH
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 91
3593: PPUSH
3594: LD_EXP 37
3598: PPUSH
3599: LD_EXP 38
3603: PPUSH
3604: CALL_OW 12
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: LD_INT 3
3614: PPUSH
3615: CALL 14212 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3619: LD_INT 3
3621: PPUSH
3622: LD_INT 3
3624: PPUSH
3625: LD_INT 21
3627: PPUSH
3628: LD_EXP 37
3632: PPUSH
3633: LD_EXP 38
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: LD_INT 6
3648: PPUSH
3649: CALL 14212 0 6
// end ;
3653: LD_VAR 0 1
3657: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3658: LD_INT 0
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
// uc_side = 3 ;
3664: LD_ADDR_OWVAR 20
3668: PUSH
3669: LD_INT 3
3671: ST_TO_ADDR
// uc_nation = 3 ;
3672: LD_ADDR_OWVAR 21
3676: PUSH
3677: LD_INT 3
3679: ST_TO_ADDR
// for i = 1 to 5 do
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: DOUBLE
3686: LD_INT 1
3688: DEC
3689: ST_TO_ADDR
3690: LD_INT 5
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3764
// begin hc_gallery =  ;
3696: LD_ADDR_OWVAR 33
3700: PUSH
3701: LD_STRING 
3703: ST_TO_ADDR
// hc_name =  ;
3704: LD_ADDR_OWVAR 26
3708: PUSH
3709: LD_STRING 
3711: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3712: LD_INT 0
3714: PPUSH
3715: LD_INT 9
3717: PPUSH
3718: LD_EXP 37
3722: PPUSH
3723: LD_EXP 38
3727: PPUSH
3728: CALL_OW 12
3732: PPUSH
3733: CALL_OW 380
// un = CreateHuman ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: CALL_OW 44
3746: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3747: LD_VAR 0 3
3751: PPUSH
3752: LD_INT 8
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: CALL_OW 49
// end ;
3762: GO 3693
3764: POP
3765: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3766: LD_ADDR_VAR 0 2
3770: PUSH
3771: DOUBLE
3772: LD_INT 1
3774: DEC
3775: ST_TO_ADDR
3776: LD_INT 2
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_OWVAR 67
3794: ARRAY
3795: PUSH
3796: FOR_TO
3797: IFFALSE 3867
// begin hc_gallery =  ;
3799: LD_ADDR_OWVAR 33
3803: PUSH
3804: LD_STRING 
3806: ST_TO_ADDR
// hc_name =  ;
3807: LD_ADDR_OWVAR 26
3811: PUSH
3812: LD_STRING 
3814: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3815: LD_INT 0
3817: PPUSH
3818: LD_INT 4
3820: PPUSH
3821: LD_EXP 37
3825: PPUSH
3826: LD_EXP 38
3830: PPUSH
3831: CALL_OW 12
3835: PPUSH
3836: CALL_OW 380
// un = CreateHuman ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: CALL_OW 44
3849: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: LD_INT 8
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 49
// end ;
3865: GO 3796
3867: POP
3868: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: PUSH
3893: LD_OWVAR 67
3897: ARRAY
3898: PUSH
3899: FOR_TO
3900: IFFALSE 4096
// begin vc_engine = 3 ;
3902: LD_ADDR_OWVAR 39
3906: PUSH
3907: LD_INT 3
3909: ST_TO_ADDR
// vc_control = 1 ;
3910: LD_ADDR_OWVAR 38
3914: PUSH
3915: LD_INT 1
3917: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3918: LD_ADDR_OWVAR 40
3922: PUSH
3923: LD_INT 42
3925: PUSH
3926: LD_INT 43
3928: PUSH
3929: LD_INT 44
3931: PUSH
3932: LD_INT 45
3934: PUSH
3935: LD_INT 46
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: CALL_OW 12
3955: ARRAY
3956: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3957: LD_OWVAR 40
3961: PUSH
3962: LD_INT 46
3964: EQUAL
3965: IFFALSE 3977
// vc_chassis = ru_heavy_tracked else
3967: LD_ADDR_OWVAR 37
3971: PUSH
3972: LD_INT 24
3974: ST_TO_ADDR
3975: GO 4004
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3977: LD_ADDR_OWVAR 37
3981: PUSH
3982: LD_INT 22
3984: PUSH
3985: LD_INT 21
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ARRAY
4003: ST_TO_ADDR
// veh = CreateVehicle ;
4004: LD_ADDR_VAR 0 4
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4026: LD_VAR 0 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 49
// hc_gallery =  ;
4041: LD_ADDR_OWVAR 33
4045: PUSH
4046: LD_STRING 
4048: ST_TO_ADDR
// hc_name =  ;
4049: LD_ADDR_OWVAR 26
4053: PUSH
4054: LD_STRING 
4056: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 380
// un = CreateHuman ;
4070: LD_ADDR_VAR 0 3
4074: PUSH
4075: CALL_OW 44
4079: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_VAR 0 4
4089: PPUSH
4090: CALL_OW 52
// end ;
4094: GO 3899
4096: POP
4097: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4098: LD_ADDR_VAR 0 2
4102: PUSH
4103: DOUBLE
4104: LD_INT 1
4106: DEC
4107: ST_TO_ADDR
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_OWVAR 67
4126: ARRAY
4127: PUSH
4128: FOR_TO
4129: IFFALSE 4276
// begin vc_engine = 3 ;
4131: LD_ADDR_OWVAR 39
4135: PUSH
4136: LD_INT 3
4138: ST_TO_ADDR
// vc_control = 3 ;
4139: LD_ADDR_OWVAR 38
4143: PUSH
4144: LD_INT 3
4146: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4147: LD_ADDR_OWVAR 40
4151: PUSH
4152: LD_INT 42
4154: PUSH
4155: LD_INT 43
4157: PUSH
4158: LD_INT 44
4160: PUSH
4161: LD_INT 45
4163: PUSH
4164: LD_INT 46
4166: PUSH
4167: LD_INT 49
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 5
4183: PPUSH
4184: CALL_OW 12
4188: ARRAY
4189: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4190: LD_OWVAR 40
4194: PUSH
4195: LD_INT 46
4197: EQUAL
4198: IFFALSE 4210
// vc_chassis = ru_heavy_tracked else
4200: LD_ADDR_OWVAR 37
4204: PUSH
4205: LD_INT 24
4207: ST_TO_ADDR
4208: GO 4237
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4210: LD_ADDR_OWVAR 37
4214: PUSH
4215: LD_INT 22
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: CALL_OW 12
4235: ARRAY
4236: ST_TO_ADDR
// veh = CreateVehicle ;
4237: LD_ADDR_VAR 0 4
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4247: LD_VAR 0 4
4251: PPUSH
4252: LD_INT 3
4254: PPUSH
4255: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_INT 6
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 49
// end ;
4274: GO 4128
4276: POP
4277: POP
// end ; end_of_file
4278: LD_VAR 0 1
4282: RET
// export function PrepareKurt ; begin
4283: LD_INT 0
4285: PPUSH
// uc_side = 8 ;
4286: LD_ADDR_OWVAR 20
4290: PUSH
4291: LD_INT 8
4293: ST_TO_ADDR
// uc_nation = 2 ;
4294: LD_ADDR_OWVAR 21
4298: PUSH
4299: LD_INT 2
4301: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4302: LD_ADDR_OWVAR 37
4306: PUSH
4307: LD_INT 13
4309: ST_TO_ADDR
// vc_engine = 1 ;
4310: LD_ADDR_OWVAR 39
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// vc_control = 1 ;
4318: LD_ADDR_OWVAR 38
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// vc_weapon = 24 ;
4326: LD_ADDR_OWVAR 40
4330: PUSH
4331: LD_INT 24
4333: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4334: LD_ADDR_EXP 26
4338: PUSH
4339: CALL_OW 45
4343: ST_TO_ADDR
// if kurtStatus > 0 then
4344: LD_EXP 27
4348: PUSH
4349: LD_INT 0
4351: GREATER
4352: IFFALSE 4401
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4354: LD_ADDR_EXP 24
4358: PUSH
4359: LD_STRING Kurt
4361: PPUSH
4362: LD_INT 0
4364: PPUSH
4365: CALL 13498 0 2
4369: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4370: LD_EXP 26
4374: PPUSH
4375: LD_INT 4
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4385: LD_EXP 24
4389: PPUSH
4390: LD_EXP 26
4394: PPUSH
4395: CALL_OW 52
// end else
4399: GO 4478
// begin hc_name =  ;
4401: LD_ADDR_OWVAR 26
4405: PUSH
4406: LD_STRING 
4408: ST_TO_ADDR
// hc_gallery =  ;
4409: LD_ADDR_OWVAR 33
4413: PUSH
4414: LD_STRING 
4416: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4417: LD_INT 1
4419: PPUSH
4420: LD_INT 10
4422: PPUSH
4423: CALL_OW 381
// otherKurt = CreateHuman ;
4427: LD_ADDR_EXP 25
4431: PUSH
4432: CALL_OW 44
4436: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4437: LD_EXP 26
4441: PPUSH
4442: LD_INT 4
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4452: LD_EXP 25
4456: PPUSH
4457: LD_EXP 26
4461: PPUSH
4462: CALL_OW 52
// SaveCharacters ( otherKurt , AltKurt ) ;
4466: LD_EXP 25
4470: PPUSH
4471: LD_STRING AltKurt
4473: PPUSH
4474: CALL_OW 38
// end ; end ;
4478: LD_VAR 0 1
4482: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4483: LD_INT 0
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// for i = 1 to 3 do
4489: LD_ADDR_VAR 0 2
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_INT 3
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4624
// begin uc_side = 1 ;
4505: LD_ADDR_OWVAR 20
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// uc_nation = 2 ;
4513: LD_ADDR_OWVAR 21
4517: PUSH
4518: LD_INT 2
4520: ST_TO_ADDR
// hc_gallery =  ;
4521: LD_ADDR_OWVAR 33
4525: PUSH
4526: LD_STRING 
4528: ST_TO_ADDR
// hc_name =  ;
4529: LD_ADDR_OWVAR 26
4533: PUSH
4534: LD_STRING 
4536: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4537: LD_EXP 27
4541: PUSH
4542: LD_INT 0
4544: EQUAL
4545: PUSH
4546: LD_EXP 27
4550: PUSH
4551: LD_INT 2
4553: EQUAL
4554: OR
4555: IFFALSE 4572
// PrepareHuman ( false , 1 , 6 ) else
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_INT 6
4565: PPUSH
4566: CALL_OW 380
4570: GO 4585
// PrepareHuman ( false , 1 , 8 ) ;
4572: LD_INT 0
4574: PPUSH
4575: LD_INT 1
4577: PPUSH
4578: LD_INT 8
4580: PPUSH
4581: CALL_OW 380
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 4
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: CALL_OW 49
// end ;
4622: GO 4502
4624: POP
4625: POP
// vc_chassis = 14 ;
4626: LD_ADDR_OWVAR 37
4630: PUSH
4631: LD_INT 14
4633: ST_TO_ADDR
// vc_engine = 3 ;
4634: LD_ADDR_OWVAR 39
4638: PUSH
4639: LD_INT 3
4641: ST_TO_ADDR
// vc_control = 1 ;
4642: LD_ADDR_OWVAR 38
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4650: LD_ADDR_OWVAR 40
4654: PUSH
4655: LD_INT 27
4657: PUSH
4658: LD_INT 26
4660: PUSH
4661: LD_INT 28
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_INT 3
4674: PPUSH
4675: CALL_OW 12
4679: ARRAY
4680: ST_TO_ADDR
// veh = CreateVehicle ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: CALL_OW 45
4690: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4691: LD_VAR 0 4
4695: PPUSH
4696: LD_INT 4
4698: PPUSH
4699: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4718: LD_EXP 27
4722: PUSH
4723: LD_INT 0
4725: EQUAL
4726: PUSH
4727: LD_EXP 27
4731: PUSH
4732: LD_INT 2
4734: EQUAL
4735: OR
4736: IFFALSE 4753
// PrepareHuman ( false , 3 , 6 ) else
4738: LD_INT 0
4740: PPUSH
4741: LD_INT 3
4743: PPUSH
4744: LD_INT 6
4746: PPUSH
4747: CALL_OW 380
4751: GO 4766
// PrepareHuman ( false , 3 , 8 ) ;
4753: LD_INT 0
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: LD_INT 8
4761: PPUSH
4762: CALL_OW 380
// un = CreateHuman ;
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: CALL_OW 44
4775: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4776: LD_VAR 0 3
4780: PPUSH
4781: LD_VAR 0 4
4785: PPUSH
4786: CALL_OW 52
// vc_chassis = 14 ;
4790: LD_ADDR_OWVAR 37
4794: PUSH
4795: LD_INT 14
4797: ST_TO_ADDR
// vc_engine = 3 ;
4798: LD_ADDR_OWVAR 39
4802: PUSH
4803: LD_INT 3
4805: ST_TO_ADDR
// vc_control = 1 ;
4806: LD_ADDR_OWVAR 38
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4814: LD_ADDR_OWVAR 40
4818: PUSH
4819: LD_INT 27
4821: PUSH
4822: LD_INT 26
4824: PUSH
4825: LD_INT 28
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: CALL_OW 12
4843: ARRAY
4844: ST_TO_ADDR
// veh = CreateVehicle ;
4845: LD_ADDR_VAR 0 4
4849: PUSH
4850: CALL_OW 45
4854: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4855: LD_VAR 0 4
4859: PPUSH
4860: LD_INT 4
4862: PPUSH
4863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4867: LD_VAR 0 4
4871: PPUSH
4872: LD_INT 4
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 0
4889: EQUAL
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 2
4898: EQUAL
4899: OR
4900: IFFALSE 4917
// PrepareHuman ( false , 4 , 6 ) else
4902: LD_INT 0
4904: PPUSH
4905: LD_INT 4
4907: PPUSH
4908: LD_INT 6
4910: PPUSH
4911: CALL_OW 380
4915: GO 4930
// PrepareHuman ( false , 4 , 8 ) ;
4917: LD_INT 0
4919: PPUSH
4920: LD_INT 4
4922: PPUSH
4923: LD_INT 8
4925: PPUSH
4926: CALL_OW 380
// un = CreateHuman ;
4930: LD_ADDR_VAR 0 3
4934: PUSH
4935: CALL_OW 44
4939: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4940: LD_VAR 0 3
4944: PPUSH
4945: LD_INT 4
4947: PPUSH
4948: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4952: LD_VAR 0 3
4956: PPUSH
4957: LD_VAR 0 4
4961: PPUSH
4962: CALL_OW 52
// vc_chassis = 14 ;
4966: LD_ADDR_OWVAR 37
4970: PUSH
4971: LD_INT 14
4973: ST_TO_ADDR
// vc_engine = 3 ;
4974: LD_ADDR_OWVAR 39
4978: PUSH
4979: LD_INT 3
4981: ST_TO_ADDR
// vc_control = 1 ;
4982: LD_ADDR_OWVAR 38
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4990: LD_ADDR_OWVAR 40
4994: PUSH
4995: LD_INT 27
4997: PUSH
4998: LD_INT 26
5000: PUSH
5001: LD_INT 28
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: PUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: CALL_OW 12
5019: ARRAY
5020: ST_TO_ADDR
// veh = CreateVehicle ;
5021: LD_ADDR_VAR 0 4
5025: PUSH
5026: CALL_OW 45
5030: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5031: LD_VAR 0 4
5035: PPUSH
5036: LD_INT 4
5038: PPUSH
5039: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5043: LD_VAR 0 4
5047: PPUSH
5048: LD_INT 4
5050: PPUSH
5051: LD_INT 0
5053: PPUSH
5054: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5058: LD_EXP 27
5062: PUSH
5063: LD_INT 0
5065: EQUAL
5066: PUSH
5067: LD_EXP 27
5071: PUSH
5072: LD_INT 2
5074: EQUAL
5075: OR
5076: IFFALSE 5093
// PrepareHuman ( false , 2 , 4 ) else
5078: LD_INT 0
5080: PPUSH
5081: LD_INT 2
5083: PPUSH
5084: LD_INT 4
5086: PPUSH
5087: CALL_OW 380
5091: GO 5106
// PrepareHuman ( false , 2 , 8 ) ;
5093: LD_INT 0
5095: PPUSH
5096: LD_INT 2
5098: PPUSH
5099: LD_INT 8
5101: PPUSH
5102: CALL_OW 380
// un = CreateHuman ;
5106: LD_ADDR_VAR 0 3
5110: PUSH
5111: CALL_OW 44
5115: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5116: LD_VAR 0 3
5120: PPUSH
5121: LD_INT 4
5123: PPUSH
5124: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_VAR 0 4
5137: PPUSH
5138: CALL_OW 52
// end ;
5142: LD_VAR 0 1
5146: RET
// export function PrepareAttackLegion ; var i , un ; begin
5147: LD_INT 0
5149: PPUSH
5150: PPUSH
5151: PPUSH
// for i = 1 to 4 do
5152: LD_ADDR_VAR 0 2
5156: PUSH
5157: DOUBLE
5158: LD_INT 1
5160: DEC
5161: ST_TO_ADDR
5162: LD_INT 4
5164: PUSH
5165: FOR_TO
5166: IFFALSE 5276
// begin uc_side = 8 ;
5168: LD_ADDR_OWVAR 20
5172: PUSH
5173: LD_INT 8
5175: ST_TO_ADDR
// uc_nation = 2 ;
5176: LD_ADDR_OWVAR 21
5180: PUSH
5181: LD_INT 2
5183: ST_TO_ADDR
// hc_gallery =  ;
5184: LD_ADDR_OWVAR 33
5188: PUSH
5189: LD_STRING 
5191: ST_TO_ADDR
// hc_name =  ;
5192: LD_ADDR_OWVAR 26
5196: PUSH
5197: LD_STRING 
5199: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5200: LD_INT 0
5202: PPUSH
5203: LD_INT 1
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: LD_INT 1
5215: PPUSH
5216: LD_INT 2
5218: PPUSH
5219: CALL_OW 12
5223: ARRAY
5224: PPUSH
5225: LD_INT 6
5227: PPUSH
5228: LD_INT 8
5230: PPUSH
5231: CALL_OW 12
5235: PPUSH
5236: CALL_OW 380
// un = CreateHuman ;
5240: LD_ADDR_VAR 0 3
5244: PUSH
5245: CALL_OW 44
5249: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_INT 19
5257: PPUSH
5258: LD_INT 0
5260: PPUSH
5261: CALL_OW 49
// ComCrawl ( un ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: CALL_OW 137
// end ;
5274: GO 5165
5276: POP
5277: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5278: LD_INT 1
5280: PPUSH
5281: LD_INT 8
5283: PPUSH
5284: LD_INT 2
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5294: LD_INT 20
5296: PPUSH
5297: LD_INT 3
5299: PPUSH
5300: CALL 16879 0 2
// end ; end_of_file
5304: LD_VAR 0 1
5308: RET
// every 1 do var i ;
5309: GO 5311
5311: DISABLE
5312: LD_INT 0
5314: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5315: LD_INT 10
5317: PPUSH
5318: LD_INT 122
5320: PPUSH
5321: LD_INT 145
5323: PPUSH
5324: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5328: LD_INT 137
5330: PPUSH
5331: LD_INT 84
5333: PPUSH
5334: LD_INT 61
5336: PPUSH
5337: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5341: LD_EXP 1
5345: PPUSH
5346: CALL_OW 310
5350: PPUSH
5351: CALL_OW 87
// InGameOn ;
5355: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5359: LD_INT 22
5361: PUSH
5362: LD_INT 1
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 69
5373: PPUSH
5374: LD_INT 130
5376: PPUSH
5377: LD_INT 103
5379: PPUSH
5380: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_INT 114
5391: PPUSH
5392: LD_INT 102
5394: PPUSH
5395: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5399: LD_EXP 1
5403: PPUSH
5404: LD_STRING D1-JMM-1
5406: PPUSH
5407: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5411: LD_EXP 1
5415: PPUSH
5416: CALL_OW 310
5420: PPUSH
5421: CALL_OW 87
// if IsOk ( Donaldson ) then
5425: LD_EXP 3
5429: PPUSH
5430: CALL_OW 302
5434: IFFALSE 5514
// begin Say ( Donaldson , D1-Don-1 ) ;
5436: LD_EXP 3
5440: PPUSH
5441: LD_STRING D1-Don-1
5443: PPUSH
5444: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5448: LD_EXP 1
5452: PPUSH
5453: CALL_OW 310
5457: PPUSH
5458: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5462: LD_EXP 1
5466: PPUSH
5467: LD_STRING D1-JMM-2
5469: PPUSH
5470: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5474: LD_EXP 1
5478: PPUSH
5479: CALL_OW 310
5483: PPUSH
5484: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5488: LD_EXP 3
5492: PPUSH
5493: LD_STRING D1-Don-2
5495: PPUSH
5496: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5500: LD_EXP 1
5504: PPUSH
5505: CALL_OW 310
5509: PPUSH
5510: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5514: LD_INT 22
5516: PUSH
5517: LD_INT 1
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 69
5528: PPUSH
5529: LD_INT 110
5531: PPUSH
5532: LD_INT 101
5534: PPUSH
5535: CALL_OW 171
// wait ( 0 0$1 ) ;
5539: LD_INT 35
5541: PPUSH
5542: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5546: LD_EXP 1
5550: PPUSH
5551: CALL_OW 310
5555: PPUSH
5556: CALL_OW 87
// wait ( 0 0$1 ) ;
5560: LD_INT 35
5562: PPUSH
5563: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5567: LD_EXP 1
5571: PPUSH
5572: CALL_OW 310
5576: PPUSH
5577: CALL_OW 87
// wait ( 0 0$1 ) ;
5581: LD_INT 35
5583: PPUSH
5584: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5588: LD_EXP 1
5592: PPUSH
5593: CALL_OW 310
5597: PPUSH
5598: CALL_OW 87
// wait ( 0 0$1 ) ;
5602: LD_INT 35
5604: PPUSH
5605: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5609: LD_EXP 1
5613: PPUSH
5614: CALL_OW 310
5618: PPUSH
5619: CALL_OW 87
// end ;
5623: PPOPN 1
5625: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 102
5631: PPUSH
5632: LD_INT 94
5634: PPUSH
5635: CALL_OW 293
5639: IFFALSE 5830
5641: GO 5643
5643: DISABLE
5644: LD_INT 0
5646: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5647: LD_INT 102
5649: PPUSH
5650: LD_INT 94
5652: PPUSH
5653: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5657: LD_INT 22
5659: PUSH
5660: LD_INT 1
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 26
5669: PUSH
5670: LD_INT 1
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 2
5679: PUSH
5680: LD_INT 25
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 25
5692: PUSH
5693: LD_INT 2
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 25
5702: PUSH
5703: LD_INT 3
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: LD_INT 25
5712: PUSH
5713: LD_INT 4
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 25
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 25
5732: PUSH
5733: LD_INT 8
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: PPUSH
5759: LD_STRING D1-Sol1-2
5761: PPUSH
5762: LD_STRING 
5764: PPUSH
5765: CALL 13595 0 3
// Say ( JMM , D1-JMM-3 ) ;
5769: LD_EXP 1
5773: PPUSH
5774: LD_STRING D1-JMM-3
5776: PPUSH
5777: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5781: LD_STRING M1
5783: PPUSH
5784: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 22
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PPUSH
5803: CALL_OW 69
5807: PUSH
5808: FOR_IN
5809: IFFALSE 5828
// ComMoveXY ( i , 95 , 84 ) ;
5811: LD_VAR 0 1
5815: PPUSH
5816: LD_INT 95
5818: PPUSH
5819: LD_INT 84
5821: PPUSH
5822: CALL_OW 111
5826: GO 5808
5828: POP
5829: POP
// end ;
5830: PPOPN 1
5832: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5833: GO 5835
5835: DISABLE
5836: LD_INT 0
5838: PPUSH
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5842: LD_ADDR_VAR 0 2
5846: PUSH
5847: LD_INT 8
5849: PPUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 3
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 9
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 70
5878: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5879: LD_ADDR_VAR 0 3
5883: PUSH
5884: LD_INT 22
5886: PUSH
5887: LD_INT 1
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: EMPTY
5895: LIST
5896: PPUSH
5897: CALL_OW 69
5901: ST_TO_ADDR
// enable ;
5902: ENABLE
// for i in your_units do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: FOR_IN
5914: IFFALSE 6569
// begin if See ( 3 , i ) then
5916: LD_INT 3
5918: PPUSH
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 292
5928: IFFALSE 6567
// begin disable ;
5930: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5931: LD_VAR 0 2
5935: PPUSH
5936: LD_INT 96
5938: PPUSH
5939: LD_INT 85
5941: PPUSH
5942: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5946: LD_VAR 0 2
5950: PPUSH
5951: LD_INT 96
5953: PPUSH
5954: LD_INT 85
5956: PPUSH
5957: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5961: LD_VAR 0 2
5965: PPUSH
5966: LD_INT 96
5968: PPUSH
5969: LD_INT 85
5971: PPUSH
5972: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_INT 96
5983: PPUSH
5984: LD_INT 85
5986: PPUSH
5987: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 96
5998: PPUSH
5999: LD_INT 85
6001: PPUSH
6002: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
// wait ( 0 0$2 ) ;
6021: LD_INT 70
6023: PPUSH
6024: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6028: LD_EXP 1
6032: PPUSH
6033: LD_STRING D1a-JMM-1
6035: PPUSH
6036: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6040: LD_EXP 3
6044: PPUSH
6045: LD_STRING D1a-Don-1
6047: PPUSH
6048: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6052: LD_ADDR_VAR 0 1
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 1
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 69
6071: PUSH
6072: FOR_IN
6073: IFFALSE 6092
// ComMoveXY ( i , 109 , 102 ) ;
6075: LD_VAR 0 1
6079: PPUSH
6080: LD_INT 109
6082: PPUSH
6083: LD_INT 102
6085: PPUSH
6086: CALL_OW 111
6090: GO 6072
6092: POP
6093: POP
// Say ( JMM , D1a-JMM-2 ) ;
6094: LD_EXP 1
6098: PPUSH
6099: LD_STRING D1a-JMM-2
6101: PPUSH
6102: CALL_OW 88
// wait ( 0 0$10 ) ;
6106: LD_INT 350
6108: PPUSH
6109: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6113: LD_EXP 1
6117: PPUSH
6118: CALL_OW 310
6122: PPUSH
6123: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6127: LD_EXP 3
6131: PPUSH
6132: LD_STRING D1b-Don-1
6134: PPUSH
6135: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6139: LD_EXP 1
6143: PPUSH
6144: LD_STRING D1b-JMM-1
6146: PPUSH
6147: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 26
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 2
6173: PUSH
6174: LD_INT 25
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 2
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 25
6206: PUSH
6207: LD_INT 4
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 25
6216: PUSH
6217: LD_INT 5
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 25
6226: PUSH
6227: LD_INT 8
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: PPUSH
6253: LD_STRING D1b-Sol1-1
6255: PPUSH
6256: LD_STRING 
6258: PPUSH
6259: CALL 13595 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6263: LD_EXP 3
6267: PPUSH
6268: LD_STRING D1b-Don-2
6270: PPUSH
6271: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D1b-JMM-2
6282: PPUSH
6283: CALL_OW 88
// dec = ShowQuery1 ;
6287: LD_ADDR_VAR 0 4
6291: PUSH
6292: CALL 14064 0 0
6296: ST_TO_ADDR
// if dec = 1 then
6297: LD_VAR 0 4
6301: PUSH
6302: LD_INT 1
6304: EQUAL
6305: IFFALSE 6411
// begin Say ( JMM , D2-JMM-1 ) ;
6307: LD_EXP 1
6311: PPUSH
6312: LD_STRING D2-JMM-1
6314: PPUSH
6315: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6319: LD_EXP 22
6323: PPUSH
6324: LD_STRING D2-Pow-1
6326: PPUSH
6327: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6331: LD_EXP 1
6335: PPUSH
6336: LD_STRING D2a-JMM-1
6338: PPUSH
6339: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6343: LD_EXP 22
6347: PPUSH
6348: LD_STRING D2a-Pow-1
6350: PPUSH
6351: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6355: LD_EXP 1
6359: PPUSH
6360: LD_STRING D2a-JMM-2
6362: PPUSH
6363: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6367: LD_EXP 22
6371: PPUSH
6372: LD_STRING D2a-Pow-2
6374: PPUSH
6375: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6379: LD_EXP 1
6383: PPUSH
6384: LD_STRING D2a-JMM-3
6386: PPUSH
6387: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6391: LD_EXP 22
6395: PPUSH
6396: LD_STRING D2a-Pow-3
6398: PPUSH
6399: CALL_OW 94
// secondPass = 2 ;
6403: LD_ADDR_EXP 28
6407: PUSH
6408: LD_INT 2
6410: ST_TO_ADDR
// end ; if dec = 2 then
6411: LD_VAR 0 4
6415: PUSH
6416: LD_INT 2
6418: EQUAL
6419: IFFALSE 6513
// begin Say ( JMM , D2-JMM-1 ) ;
6421: LD_EXP 1
6425: PPUSH
6426: LD_STRING D2-JMM-1
6428: PPUSH
6429: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6433: LD_EXP 22
6437: PPUSH
6438: LD_STRING D2-Pow-1
6440: PPUSH
6441: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6445: LD_EXP 1
6449: PPUSH
6450: LD_STRING D2b-JMM-1
6452: PPUSH
6453: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6457: LD_EXP 22
6461: PPUSH
6462: LD_STRING D2b-Pow-1
6464: PPUSH
6465: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6469: LD_EXP 1
6473: PPUSH
6474: LD_STRING D2c-JMM-1
6476: PPUSH
6477: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6481: LD_EXP 22
6485: PPUSH
6486: LD_STRING D2c-Pow-1
6488: PPUSH
6489: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6493: LD_EXP 1
6497: PPUSH
6498: LD_STRING D2c-JMM-2
6500: PPUSH
6501: CALL_OW 88
// secondPass = 2 ;
6505: LD_ADDR_EXP 28
6509: PUSH
6510: LD_INT 2
6512: ST_TO_ADDR
// end ; if dec = 3 then
6513: LD_VAR 0 4
6517: PUSH
6518: LD_INT 3
6520: EQUAL
6521: IFFALSE 6531
// secondPass = 1 ;
6523: LD_ADDR_EXP 28
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// InGameOff ;
6531: CALL_OW 9
// ruAI = 1 ;
6535: LD_ADDR_EXP 42
6539: PUSH
6540: LD_INT 1
6542: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6543: LD_INT 1
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 1
6554: PPUSH
6555: CALL_OW 80
// SaveForQuickRestart ;
6559: CALL_OW 22
// exit ;
6563: POP
6564: POP
6565: GO 6571
// end ; end ;
6567: GO 5913
6569: POP
6570: POP
// end ;
6571: PPOPN 4
6573: END
// every 1 1$0 trigger secondPass = 2 do
6574: LD_EXP 28
6578: PUSH
6579: LD_INT 2
6581: EQUAL
6582: IFFALSE 6802
6584: GO 6586
6586: DISABLE
// begin PowellSupport1 ;
6587: CALL 1863 0 0
// DialogueOn ;
6591: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6595: LD_EXP 1
6599: PPUSH
6600: LD_STRING DC1-JMM-1
6602: PPUSH
6603: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6607: LD_EXP 22
6611: PPUSH
6612: LD_STRING DC1-Pow-1
6614: PPUSH
6615: CALL_OW 94
// DialogueOff ;
6619: CALL_OW 7
// wait ( 3 3$0 ) ;
6623: LD_INT 6300
6625: PPUSH
6626: CALL_OW 67
// PowellSupport2 ;
6630: CALL 2322 0 0
// DialogueOn ;
6634: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6638: LD_EXP 1
6642: PPUSH
6643: LD_STRING DC2-JMM-1
6645: PPUSH
6646: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6650: LD_EXP 22
6654: PPUSH
6655: LD_STRING DC2-Pow-1
6657: PPUSH
6658: CALL_OW 94
// DialogueOff ;
6662: CALL_OW 7
// wait ( 3 3$00 ) ;
6666: LD_INT 6300
6668: PPUSH
6669: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6680: LD_INT 22
6682: PUSH
6683: LD_INT 1
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 2
6692: PUSH
6693: LD_INT 30
6695: PUSH
6696: LD_INT 0
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 30
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PPUSH
6722: CALL_OW 69
6726: PUSH
6727: LD_INT 11
6729: PPUSH
6730: LD_INT 22
6732: PUSH
6733: LD_INT 3
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 70
6744: NOT
6745: AND
6746: IFFALSE 6673
// wait ( 0 0$10 ) ;
6748: LD_INT 350
6750: PPUSH
6751: CALL_OW 67
// Legion ;
6755: CALL 6803 0 0
// wait ( 6 6$0 ) ;
6759: LD_INT 12600
6761: PPUSH
6762: CALL_OW 67
// PowellSupport3 ;
6766: CALL 2856 0 0
// DialogueOn ;
6770: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6774: LD_EXP 22
6778: PPUSH
6779: LD_STRING DC3-Pow-1
6781: PPUSH
6782: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6786: LD_EXP 1
6790: PPUSH
6791: LD_STRING DC3-JMM-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// end ;
6802: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb ; begin
6803: LD_INT 0
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6817: LD_ADDR_VAR 0 5
6821: PUSH
6822: LD_INT 22
6824: PUSH
6825: LD_INT 1
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 21
6834: PUSH
6835: LD_INT 3
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 0
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 30
6857: PUSH
6858: LD_INT 1
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: PPUSH
6875: CALL_OW 69
6879: ST_TO_ADDR
// crates := 0 ;
6880: LD_ADDR_VAR 0 8
6884: PUSH
6885: LD_INT 0
6887: ST_TO_ADDR
// oil := 0 ;
6888: LD_ADDR_VAR 0 9
6892: PUSH
6893: LD_INT 0
6895: ST_TO_ADDR
// siberite := 0 ;
6896: LD_ADDR_VAR 0 10
6900: PUSH
6901: LD_INT 0
6903: ST_TO_ADDR
// for i in tmp do
6904: LD_ADDR_VAR 0 2
6908: PUSH
6909: LD_VAR 0 5
6913: PUSH
6914: FOR_IN
6915: IFFALSE 6948
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6917: LD_ADDR_VAR 0 8
6921: PUSH
6922: LD_VAR 0 8
6926: PUSH
6927: LD_VAR 0 2
6931: PPUSH
6932: CALL_OW 274
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL_OW 275
6944: PLUS
6945: ST_TO_ADDR
6946: GO 6914
6948: POP
6949: POP
// for i in tmp do
6950: LD_ADDR_VAR 0 2
6954: PUSH
6955: LD_VAR 0 5
6959: PUSH
6960: FOR_IN
6961: IFFALSE 6994
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6963: LD_ADDR_VAR 0 9
6967: PUSH
6968: LD_VAR 0 9
6972: PUSH
6973: LD_VAR 0 2
6977: PPUSH
6978: CALL_OW 274
6982: PPUSH
6983: LD_INT 2
6985: PPUSH
6986: CALL_OW 275
6990: PLUS
6991: ST_TO_ADDR
6992: GO 6960
6994: POP
6995: POP
// for i in tmp do
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: LD_VAR 0 5
7005: PUSH
7006: FOR_IN
7007: IFFALSE 7040
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7009: LD_ADDR_VAR 0 10
7013: PUSH
7014: LD_VAR 0 10
7018: PUSH
7019: LD_VAR 0 2
7023: PPUSH
7024: CALL_OW 274
7028: PPUSH
7029: LD_INT 3
7031: PPUSH
7032: CALL_OW 275
7036: PLUS
7037: ST_TO_ADDR
7038: GO 7006
7040: POP
7041: POP
// PrepareKurt ;
7042: CALL 4283 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7046: LD_EXP 26
7050: PPUSH
7051: LD_INT 144
7053: PPUSH
7054: LD_INT 111
7056: PPUSH
7057: CALL_OW 111
// wait ( 0 0$2 ) ;
7061: LD_INT 70
7063: PPUSH
7064: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
7068: LD_INT 8
7070: PPUSH
7071: LD_INT 1
7073: PPUSH
7074: CALL_OW 343
// if kurtStatus then
7078: LD_EXP 27
7082: IFFALSE 8809
// begin ComExitVehicle ( Kurt ) ;
7084: LD_EXP 24
7088: PPUSH
7089: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7093: LD_EXP 24
7097: PPUSH
7098: CALL_OW 87
// wait ( 0 0$1 ) ;
7102: LD_INT 35
7104: PPUSH
7105: CALL_OW 67
// DialogueOn ;
7109: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7113: LD_INT 22
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 26
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 2
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 2
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 25
7158: PUSH
7159: LD_INT 3
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 25
7168: PUSH
7169: LD_INT 4
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 25
7178: PUSH
7179: LD_INT 5
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 25
7188: PUSH
7189: LD_INT 8
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: PPUSH
7210: CALL_OW 69
7214: PPUSH
7215: LD_STRING D3-Sol1-1
7217: PPUSH
7218: LD_STRING 
7220: PPUSH
7221: CALL 13595 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7225: LD_EXP 24
7229: PPUSH
7230: LD_STRING D3-Kurt-1
7232: PPUSH
7233: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7237: LD_EXP 1
7241: PPUSH
7242: LD_STRING D3-JMM-1
7244: PPUSH
7245: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7249: LD_EXP 24
7253: PPUSH
7254: LD_STRING D3-Kurt-2
7256: PPUSH
7257: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7261: LD_EXP 1
7265: PPUSH
7266: LD_STRING D3-JMM-2
7268: PPUSH
7269: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7273: LD_EXP 24
7277: PPUSH
7278: LD_STRING D3-Kurt-4
7280: PPUSH
7281: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7285: LD_EXP 1
7289: PPUSH
7290: LD_STRING D3-JMM-4
7292: PPUSH
7293: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7297: LD_EXP 24
7301: PPUSH
7302: LD_STRING D3-Kurt-5
7304: PPUSH
7305: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7309: LD_EXP 24
7313: PPUSH
7314: LD_STRING D3-Kurt-5a
7316: PPUSH
7317: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7321: LD_VAR 0 8
7325: PUSH
7326: LD_INT 60
7328: GREATEREQUAL
7329: PUSH
7330: LD_VAR 0 10
7334: PUSH
7335: LD_INT 60
7337: GREATEREQUAL
7338: AND
7339: IFFALSE 7374
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_STRING Q2K
7348: PPUSH
7349: LD_INT 1
7351: PUSH
7352: LD_INT 2
7354: PUSH
7355: LD_INT 3
7357: PUSH
7358: LD_INT 4
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 98
7371: ST_TO_ADDR
7372: GO 7397
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7374: LD_ADDR_VAR 0 3
7378: PUSH
7379: LD_STRING Q2K
7381: PPUSH
7382: LD_INT 3
7384: PUSH
7385: LD_INT 4
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 98
7396: ST_TO_ADDR
// if dec1 = 1 then
7397: LD_VAR 0 3
7401: PUSH
7402: LD_INT 1
7404: EQUAL
7405: IFFALSE 7439
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7407: LD_EXP 1
7411: PPUSH
7412: LD_STRING D3Ka-JMM-1
7414: PPUSH
7415: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7419: LD_EXP 24
7423: PPUSH
7424: LD_STRING D3Ka-Kurt-1
7426: PPUSH
7427: CALL_OW 88
// warWithLegion = 1 ;
7431: LD_ADDR_EXP 31
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// end ; if dec1 = 2 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 2
7446: EQUAL
7447: IFFALSE 7788
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7449: LD_EXP 1
7453: PPUSH
7454: LD_STRING D3Kb-JMM-1
7456: PPUSH
7457: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7461: LD_EXP 24
7465: PPUSH
7466: LD_STRING D3Kb-Kurt-1
7468: PPUSH
7469: CALL_OW 88
// cr := 60 ;
7473: LD_ADDR_VAR 0 11
7477: PUSH
7478: LD_INT 60
7480: ST_TO_ADDR
// sb := 60 ;
7481: LD_ADDR_VAR 0 12
7485: PUSH
7486: LD_INT 60
7488: ST_TO_ADDR
// for i in tmp do
7489: LD_ADDR_VAR 0 2
7493: PUSH
7494: LD_VAR 0 5
7498: PUSH
7499: FOR_IN
7500: IFFALSE 7786
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
7502: LD_ADDR_VAR 0 6
7506: PUSH
7507: LD_VAR 0 2
7511: PPUSH
7512: CALL_OW 274
7516: PPUSH
7517: LD_INT 1
7519: PPUSH
7520: CALL_OW 275
7524: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
7525: LD_ADDR_VAR 0 7
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 274
7539: PPUSH
7540: LD_INT 3
7542: PPUSH
7543: CALL_OW 275
7547: ST_TO_ADDR
// if cr then
7548: LD_VAR 0 11
7552: IFFALSE 7666
// begin if tmp2 and tmp2 < cr then
7554: LD_VAR 0 6
7558: PUSH
7559: LD_VAR 0 6
7563: PUSH
7564: LD_VAR 0 11
7568: LESS
7569: AND
7570: IFFALSE 7618
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
7572: LD_VAR 0 2
7576: PPUSH
7577: CALL_OW 274
7581: PPUSH
7582: LD_INT 1
7584: PPUSH
7585: LD_VAR 0 11
7589: PUSH
7590: LD_VAR 0 6
7594: MINUS
7595: PPUSH
7596: CALL_OW 277
// cr := cr - tmp2 ;
7600: LD_ADDR_VAR 0 11
7604: PUSH
7605: LD_VAR 0 11
7609: PUSH
7610: LD_VAR 0 6
7614: MINUS
7615: ST_TO_ADDR
// end else
7616: GO 7666
// if tmp2 > cr then
7618: LD_VAR 0 6
7622: PUSH
7623: LD_VAR 0 11
7627: GREATER
7628: IFFALSE 7666
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
7630: LD_VAR 0 2
7634: PPUSH
7635: CALL_OW 274
7639: PPUSH
7640: LD_INT 1
7642: PPUSH
7643: LD_VAR 0 6
7647: PUSH
7648: LD_VAR 0 11
7652: MINUS
7653: PPUSH
7654: CALL_OW 277
// cr := 0 ;
7658: LD_ADDR_VAR 0 11
7662: PUSH
7663: LD_INT 0
7665: ST_TO_ADDR
// end ; end ; if sb then
7666: LD_VAR 0 12
7670: IFFALSE 7784
// begin if tmp2 and tmp2 < sb then
7672: LD_VAR 0 6
7676: PUSH
7677: LD_VAR 0 6
7681: PUSH
7682: LD_VAR 0 12
7686: LESS
7687: AND
7688: IFFALSE 7736
// begin SetResourceType ( GetBase ( i ) , 1 , sb - tmp2 ) ;
7690: LD_VAR 0 2
7694: PPUSH
7695: CALL_OW 274
7699: PPUSH
7700: LD_INT 1
7702: PPUSH
7703: LD_VAR 0 12
7707: PUSH
7708: LD_VAR 0 6
7712: MINUS
7713: PPUSH
7714: CALL_OW 277
// sb := sb - tmp2 ;
7718: LD_ADDR_VAR 0 12
7722: PUSH
7723: LD_VAR 0 12
7727: PUSH
7728: LD_VAR 0 6
7732: MINUS
7733: ST_TO_ADDR
// end else
7734: GO 7784
// if tmp2 > sb then
7736: LD_VAR 0 6
7740: PUSH
7741: LD_VAR 0 12
7745: GREATER
7746: IFFALSE 7784
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - sb ) ;
7748: LD_VAR 0 2
7752: PPUSH
7753: CALL_OW 274
7757: PPUSH
7758: LD_INT 1
7760: PPUSH
7761: LD_VAR 0 6
7765: PUSH
7766: LD_VAR 0 12
7770: MINUS
7771: PPUSH
7772: CALL_OW 277
// cr := 0 ;
7776: LD_ADDR_VAR 0 11
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// end ; end ; end ;
7784: GO 7499
7786: POP
7787: POP
// end ; if dec1 = 3 then
7788: LD_VAR 0 3
7792: PUSH
7793: LD_INT 3
7795: EQUAL
7796: IFFALSE 8031
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D3Kc1-JMM-1
7805: PPUSH
7806: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7810: LD_EXP 24
7814: PPUSH
7815: LD_STRING D3Kc1-Kurt-1
7817: PPUSH
7818: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7822: LD_EXP 1
7826: PPUSH
7827: LD_STRING D3Kc1-JMM-2
7829: PPUSH
7830: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7834: LD_EXP 24
7838: PPUSH
7839: LD_STRING D3Kc1-Kurt-2
7841: PPUSH
7842: CALL_OW 88
// askSiberite = 1 ;
7846: LD_ADDR_EXP 33
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7854: LD_ADDR_VAR 0 4
7858: PUSH
7859: LD_STRING Q2b
7861: PPUSH
7862: LD_INT 1
7864: PUSH
7865: LD_INT 2
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: PPUSH
7876: CALL_OW 98
7880: ST_TO_ADDR
// if dec2 = 1 then
7881: LD_VAR 0 4
7885: PUSH
7886: LD_INT 1
7888: EQUAL
7889: IFFALSE 7923
// begin Say ( JMM , D4a-JMM-1 ) ;
7891: LD_EXP 1
7895: PPUSH
7896: LD_STRING D4a-JMM-1
7898: PPUSH
7899: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7903: LD_EXP 24
7907: PPUSH
7908: LD_STRING D4b-Kurt-1
7910: PPUSH
7911: CALL_OW 88
// warWithLegion = 1 ;
7915: LD_ADDR_EXP 31
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// end ; if dec2 = 2 then
7923: LD_VAR 0 4
7927: PUSH
7928: LD_INT 2
7930: EQUAL
7931: IFFALSE 7965
// begin Say ( JMM , D4b-JMM-1 ) ;
7933: LD_EXP 1
7937: PPUSH
7938: LD_STRING D4b-JMM-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7945: LD_EXP 24
7949: PPUSH
7950: LD_STRING D4b-Kurt-1
7952: PPUSH
7953: CALL_OW 88
// warWithLegion = 1 ;
7957: LD_ADDR_EXP 31
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// end ; if dec2 = 3 then
7965: LD_VAR 0 4
7969: PUSH
7970: LD_INT 3
7972: EQUAL
7973: IFFALSE 8031
// begin Say ( JMM , D4c-JMM-1 ) ;
7975: LD_EXP 1
7979: PPUSH
7980: LD_STRING D4c-JMM-1
7982: PPUSH
7983: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7987: LD_EXP 24
7991: PPUSH
7992: LD_STRING D4c-Kurt-1
7994: PPUSH
7995: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7999: LD_EXP 1
8003: PPUSH
8004: LD_STRING D4c-JMM-2
8006: PPUSH
8007: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8011: LD_EXP 24
8015: PPUSH
8016: LD_STRING D4c-Kurt-2
8018: PPUSH
8019: CALL_OW 88
// fakeInfo = 1 ;
8023: LD_ADDR_EXP 32
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8031: LD_VAR 0 3
8035: PUSH
8036: LD_INT 4
8038: EQUAL
8039: IFFALSE 8745
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8041: LD_EXP 1
8045: PPUSH
8046: LD_STRING D3Kd-JMM-1
8048: PPUSH
8049: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
8053: LD_VAR 0 8
8057: PUSH
8058: LD_INT 120
8060: GREATEREQUAL
8061: PUSH
8062: LD_VAR 0 10
8066: PUSH
8067: LD_INT 120
8069: GREATEREQUAL
8070: AND
8071: IFFALSE 8106
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
8073: LD_ADDR_VAR 0 4
8077: PUSH
8078: LD_STRING Q2aK
8080: PPUSH
8081: LD_INT 1
8083: PUSH
8084: LD_INT 2
8086: PUSH
8087: LD_INT 3
8089: PUSH
8090: LD_INT 4
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 98
8103: ST_TO_ADDR
8104: GO 8178
// if crates >= 60 and siberite >= 60 then
8106: LD_VAR 0 8
8110: PUSH
8111: LD_INT 60
8113: GREATEREQUAL
8114: PUSH
8115: LD_VAR 0 10
8119: PUSH
8120: LD_INT 60
8122: GREATEREQUAL
8123: AND
8124: IFFALSE 8155
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 4 ] ) else
8126: LD_ADDR_VAR 0 4
8130: PUSH
8131: LD_STRING Q2aK
8133: PPUSH
8134: LD_INT 1
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: LD_INT 4
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 98
8152: ST_TO_ADDR
8153: GO 8178
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
8155: LD_ADDR_VAR 0 4
8159: PUSH
8160: LD_STRING Q2K
8162: PPUSH
8163: LD_INT 1
8165: PUSH
8166: LD_INT 4
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 98
8177: ST_TO_ADDR
// if dec2 = 1 then
8178: LD_VAR 0 4
8182: PUSH
8183: LD_INT 1
8185: EQUAL
8186: IFFALSE 8220
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8188: LD_EXP 1
8192: PPUSH
8193: LD_STRING D5Ka-JMM-1
8195: PPUSH
8196: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8200: LD_EXP 24
8204: PPUSH
8205: LD_STRING D5Ka-Kurt-1
8207: PPUSH
8208: CALL_OW 88
// warWithLegion = 1 ;
8212: LD_ADDR_EXP 31
8216: PUSH
8217: LD_INT 1
8219: ST_TO_ADDR
// end ; if dec2 = 2 then
8220: LD_VAR 0 4
8224: PUSH
8225: LD_INT 2
8227: EQUAL
8228: IFFALSE 8254
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8230: LD_EXP 1
8234: PPUSH
8235: LD_STRING D3Kb-JMM-1
8237: PPUSH
8238: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8242: LD_EXP 24
8246: PPUSH
8247: LD_STRING D3Kb-Kurt-1
8249: PPUSH
8250: CALL_OW 88
// end ; if dec2 = 3 then
8254: LD_VAR 0 4
8258: PUSH
8259: LD_INT 3
8261: EQUAL
8262: IFFALSE 8492
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8264: LD_EXP 1
8268: PPUSH
8269: LD_STRING D3Ke-JMM-1
8271: PPUSH
8272: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8276: LD_EXP 24
8280: PPUSH
8281: LD_STRING D3Ke-Kurt-1
8283: PPUSH
8284: CALL_OW 88
// PrepareLegionForPlayer ;
8288: CALL 4483 0 0
// for i in tmp do
8292: LD_ADDR_VAR 0 2
8296: PUSH
8297: LD_VAR 0 5
8301: PUSH
8302: FOR_IN
8303: IFFALSE 8390
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8305: LD_ADDR_VAR 0 6
8309: PUSH
8310: LD_VAR 0 2
8314: PPUSH
8315: CALL_OW 274
8319: PPUSH
8320: LD_INT 1
8322: PPUSH
8323: CALL_OW 275
8327: ST_TO_ADDR
// if tmp2 >= 120 then
8328: LD_VAR 0 6
8332: PUSH
8333: LD_INT 120
8335: GREATEREQUAL
8336: IFFALSE 8368
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8338: LD_VAR 0 2
8342: PPUSH
8343: CALL_OW 274
8347: PPUSH
8348: LD_INT 1
8350: PPUSH
8351: LD_VAR 0 6
8355: PUSH
8356: LD_INT 120
8358: MINUS
8359: PPUSH
8360: CALL_OW 277
// break ;
8364: GO 8390
// end else
8366: GO 8388
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8368: LD_VAR 0 2
8372: PPUSH
8373: CALL_OW 274
8377: PPUSH
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 0
8383: PPUSH
8384: CALL_OW 277
// end ; end ;
8388: GO 8302
8390: POP
8391: POP
// for i in tmp do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: LD_VAR 0 5
8401: PUSH
8402: FOR_IN
8403: IFFALSE 8490
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8405: LD_ADDR_VAR 0 6
8409: PUSH
8410: LD_VAR 0 2
8414: PPUSH
8415: CALL_OW 274
8419: PPUSH
8420: LD_INT 3
8422: PPUSH
8423: CALL_OW 275
8427: ST_TO_ADDR
// if tmp2 >= 120 then
8428: LD_VAR 0 6
8432: PUSH
8433: LD_INT 120
8435: GREATEREQUAL
8436: IFFALSE 8468
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8438: LD_VAR 0 2
8442: PPUSH
8443: CALL_OW 274
8447: PPUSH
8448: LD_INT 3
8450: PPUSH
8451: LD_VAR 0 6
8455: PUSH
8456: LD_INT 120
8458: MINUS
8459: PPUSH
8460: CALL_OW 277
// break ;
8464: GO 8490
// end else
8466: GO 8488
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8468: LD_VAR 0 2
8472: PPUSH
8473: CALL_OW 274
8477: PPUSH
8478: LD_INT 3
8480: PPUSH
8481: LD_INT 0
8483: PPUSH
8484: CALL_OW 277
// end ; end ;
8488: GO 8402
8490: POP
8491: POP
// end ; if dec2 = 4 then
8492: LD_VAR 0 4
8496: PUSH
8497: LD_INT 4
8499: EQUAL
8500: IFFALSE 8745
// begin if dec1 = 3 then
8502: LD_VAR 0 3
8506: PUSH
8507: LD_INT 3
8509: EQUAL
8510: IFFALSE 8745
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8512: LD_EXP 1
8516: PPUSH
8517: LD_STRING D3Kc1-JMM-1
8519: PPUSH
8520: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8524: LD_EXP 24
8528: PPUSH
8529: LD_STRING D3Kc1-Kurt-1
8531: PPUSH
8532: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8536: LD_EXP 1
8540: PPUSH
8541: LD_STRING D3Kc1-JMM-2
8543: PPUSH
8544: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8548: LD_EXP 24
8552: PPUSH
8553: LD_STRING D3Kc1-Kurt-2
8555: PPUSH
8556: CALL_OW 88
// askSiberite = 1 ;
8560: LD_ADDR_EXP 33
8564: PUSH
8565: LD_INT 1
8567: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8568: LD_ADDR_VAR 0 4
8572: PUSH
8573: LD_STRING Q2b
8575: PPUSH
8576: LD_INT 1
8578: PUSH
8579: LD_INT 2
8581: PUSH
8582: LD_INT 3
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 98
8594: ST_TO_ADDR
// if dec2 = 1 then
8595: LD_VAR 0 4
8599: PUSH
8600: LD_INT 1
8602: EQUAL
8603: IFFALSE 8637
// begin Say ( JMM , D4a-JMM-1 ) ;
8605: LD_EXP 1
8609: PPUSH
8610: LD_STRING D4a-JMM-1
8612: PPUSH
8613: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8617: LD_EXP 24
8621: PPUSH
8622: LD_STRING D4b-Kurt-1
8624: PPUSH
8625: CALL_OW 88
// warWithLegion = 1 ;
8629: LD_ADDR_EXP 31
8633: PUSH
8634: LD_INT 1
8636: ST_TO_ADDR
// end ; if dec2 = 2 then
8637: LD_VAR 0 4
8641: PUSH
8642: LD_INT 2
8644: EQUAL
8645: IFFALSE 8679
// begin Say ( JMM , D4b-JMM-1 ) ;
8647: LD_EXP 1
8651: PPUSH
8652: LD_STRING D4b-JMM-1
8654: PPUSH
8655: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8659: LD_EXP 24
8663: PPUSH
8664: LD_STRING D4b-Kurt-1
8666: PPUSH
8667: CALL_OW 88
// warWithLegion = 1 ;
8671: LD_ADDR_EXP 31
8675: PUSH
8676: LD_INT 1
8678: ST_TO_ADDR
// end ; if dec2 = 3 then
8679: LD_VAR 0 4
8683: PUSH
8684: LD_INT 3
8686: EQUAL
8687: IFFALSE 8745
// begin Say ( JMM , D4c-JMM-1 ) ;
8689: LD_EXP 1
8693: PPUSH
8694: LD_STRING D4c-JMM-1
8696: PPUSH
8697: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8701: LD_EXP 24
8705: PPUSH
8706: LD_STRING D4c-Kurt-1
8708: PPUSH
8709: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8713: LD_EXP 1
8717: PPUSH
8718: LD_STRING D4c-JMM-2
8720: PPUSH
8721: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8725: LD_EXP 24
8729: PPUSH
8730: LD_STRING D4c-Kurt-2
8732: PPUSH
8733: CALL_OW 88
// fakeInfo = 1 ;
8737: LD_ADDR_EXP 32
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8745: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8749: LD_EXP 24
8753: PPUSH
8754: LD_EXP 26
8758: PPUSH
8759: CALL_OW 120
// wait ( 0 0$1 ) ;
8763: LD_INT 35
8765: PPUSH
8766: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8770: LD_EXP 26
8774: PPUSH
8775: LD_INT 4
8777: PPUSH
8778: CALL_OW 113
// wait ( 0 0$3 ) ;
8782: LD_INT 105
8784: PPUSH
8785: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8789: LD_EXP 24
8793: PPUSH
8794: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8798: LD_EXP 26
8802: PPUSH
8803: CALL_OW 64
// end else
8807: GO 10518
// begin ComExitVehicle ( otherKurt ) ;
8809: LD_EXP 25
8813: PPUSH
8814: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8818: LD_EXP 25
8822: PPUSH
8823: CALL_OW 87
// wait ( 0 0$1 ) ;
8827: LD_INT 35
8829: PPUSH
8830: CALL_OW 67
// DialogueOn ;
8834: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8838: LD_INT 22
8840: PUSH
8841: LD_INT 1
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 26
8850: PUSH
8851: LD_INT 1
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: LD_INT 2
8860: PUSH
8861: LD_INT 25
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: LD_INT 25
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 25
8883: PUSH
8884: LD_INT 3
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 25
8893: PUSH
8894: LD_INT 4
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: LD_INT 25
8903: PUSH
8904: LD_INT 5
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: LD_INT 25
8913: PUSH
8914: LD_INT 8
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: PPUSH
8940: LD_STRING D3-Sol1-1
8942: PPUSH
8943: LD_STRING 
8945: PPUSH
8946: CALL 13595 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8950: LD_EXP 25
8954: PPUSH
8955: LD_STRING D3-Kurt-1
8957: PPUSH
8958: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8962: LD_EXP 1
8966: PPUSH
8967: LD_STRING D3-JMM-1
8969: PPUSH
8970: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8974: LD_EXP 25
8978: PPUSH
8979: LD_STRING D3-Kurt-3
8981: PPUSH
8982: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8986: LD_EXP 1
8990: PPUSH
8991: LD_STRING D3-JMM-3
8993: PPUSH
8994: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8998: LD_EXP 25
9002: PPUSH
9003: LD_STRING D3-Kurt-5
9005: PPUSH
9006: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
9010: LD_EXP 25
9014: PPUSH
9015: LD_STRING D3-Kurt-5b
9017: PPUSH
9018: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
9022: LD_VAR 0 8
9026: PUSH
9027: LD_INT 100
9029: GREATEREQUAL
9030: PUSH
9031: LD_VAR 0 10
9035: PUSH
9036: LD_INT 100
9038: GREATEREQUAL
9039: AND
9040: IFFALSE 9075
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_STRING Q2
9049: PPUSH
9050: LD_INT 1
9052: PUSH
9053: LD_INT 2
9055: PUSH
9056: LD_INT 3
9058: PUSH
9059: LD_INT 4
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 98
9072: ST_TO_ADDR
9073: GO 9098
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
9075: LD_ADDR_VAR 0 3
9079: PUSH
9080: LD_STRING Q2
9082: PPUSH
9083: LD_INT 3
9085: PUSH
9086: LD_INT 4
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 98
9097: ST_TO_ADDR
// if dec1 = 1 then
9098: LD_VAR 0 3
9102: PUSH
9103: LD_INT 1
9105: EQUAL
9106: IFFALSE 9140
// begin Say ( JMM , D3Ka-JMM-1 ) ;
9108: LD_EXP 1
9112: PPUSH
9113: LD_STRING D3Ka-JMM-1
9115: PPUSH
9116: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
9120: LD_EXP 25
9124: PPUSH
9125: LD_STRING D3Ka-Kurt-1
9127: PPUSH
9128: CALL_OW 88
// warWithLegion = 1 ;
9132: LD_ADDR_EXP 31
9136: PUSH
9137: LD_INT 1
9139: ST_TO_ADDR
// end ; if dec1 = 2 then
9140: LD_VAR 0 3
9144: PUSH
9145: LD_INT 2
9147: EQUAL
9148: IFFALSE 9489
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9150: LD_EXP 1
9154: PPUSH
9155: LD_STRING D3Kb-JMM-1
9157: PPUSH
9158: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9162: LD_EXP 25
9166: PPUSH
9167: LD_STRING D3Kb-Kurt-1
9169: PPUSH
9170: CALL_OW 88
// cr := 100 ;
9174: LD_ADDR_VAR 0 11
9178: PUSH
9179: LD_INT 100
9181: ST_TO_ADDR
// sb := 100 ;
9182: LD_ADDR_VAR 0 12
9186: PUSH
9187: LD_INT 100
9189: ST_TO_ADDR
// for i in tmp do
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_VAR 0 5
9199: PUSH
9200: FOR_IN
9201: IFFALSE 9487
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9203: LD_ADDR_VAR 0 6
9207: PUSH
9208: LD_VAR 0 2
9212: PPUSH
9213: CALL_OW 274
9217: PPUSH
9218: LD_INT 1
9220: PPUSH
9221: CALL_OW 275
9225: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9226: LD_ADDR_VAR 0 7
9230: PUSH
9231: LD_VAR 0 2
9235: PPUSH
9236: CALL_OW 274
9240: PPUSH
9241: LD_INT 3
9243: PPUSH
9244: CALL_OW 275
9248: ST_TO_ADDR
// if cr then
9249: LD_VAR 0 11
9253: IFFALSE 9367
// begin if tmp2 and tmp2 < cr then
9255: LD_VAR 0 6
9259: PUSH
9260: LD_VAR 0 6
9264: PUSH
9265: LD_VAR 0 11
9269: LESS
9270: AND
9271: IFFALSE 9319
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9273: LD_VAR 0 2
9277: PPUSH
9278: CALL_OW 274
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_VAR 0 11
9290: PUSH
9291: LD_VAR 0 6
9295: MINUS
9296: PPUSH
9297: CALL_OW 277
// cr := cr - tmp2 ;
9301: LD_ADDR_VAR 0 11
9305: PUSH
9306: LD_VAR 0 11
9310: PUSH
9311: LD_VAR 0 6
9315: MINUS
9316: ST_TO_ADDR
// end else
9317: GO 9367
// if tmp2 > cr then
9319: LD_VAR 0 6
9323: PUSH
9324: LD_VAR 0 11
9328: GREATER
9329: IFFALSE 9367
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9331: LD_VAR 0 2
9335: PPUSH
9336: CALL_OW 274
9340: PPUSH
9341: LD_INT 1
9343: PPUSH
9344: LD_VAR 0 6
9348: PUSH
9349: LD_VAR 0 11
9353: MINUS
9354: PPUSH
9355: CALL_OW 277
// cr := 0 ;
9359: LD_ADDR_VAR 0 11
9363: PUSH
9364: LD_INT 0
9366: ST_TO_ADDR
// end ; end ; if sb then
9367: LD_VAR 0 12
9371: IFFALSE 9485
// begin if tmp2 and tmp2 < sb then
9373: LD_VAR 0 6
9377: PUSH
9378: LD_VAR 0 6
9382: PUSH
9383: LD_VAR 0 12
9387: LESS
9388: AND
9389: IFFALSE 9437
// begin SetResourceType ( GetBase ( i ) , 1 , sb - tmp2 ) ;
9391: LD_VAR 0 2
9395: PPUSH
9396: CALL_OW 274
9400: PPUSH
9401: LD_INT 1
9403: PPUSH
9404: LD_VAR 0 12
9408: PUSH
9409: LD_VAR 0 6
9413: MINUS
9414: PPUSH
9415: CALL_OW 277
// sb := sb - tmp2 ;
9419: LD_ADDR_VAR 0 12
9423: PUSH
9424: LD_VAR 0 12
9428: PUSH
9429: LD_VAR 0 6
9433: MINUS
9434: ST_TO_ADDR
// end else
9435: GO 9485
// if tmp2 > sb then
9437: LD_VAR 0 6
9441: PUSH
9442: LD_VAR 0 12
9446: GREATER
9447: IFFALSE 9485
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - sb ) ;
9449: LD_VAR 0 2
9453: PPUSH
9454: CALL_OW 274
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 6
9466: PUSH
9467: LD_VAR 0 12
9471: MINUS
9472: PPUSH
9473: CALL_OW 277
// cr := 0 ;
9477: LD_ADDR_VAR 0 11
9481: PUSH
9482: LD_INT 0
9484: ST_TO_ADDR
// end ; end ; end ;
9485: GO 9200
9487: POP
9488: POP
// end ; if dec1 = 3 then
9489: LD_VAR 0 3
9493: PUSH
9494: LD_INT 3
9496: EQUAL
9497: IFFALSE 9732
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9499: LD_EXP 1
9503: PPUSH
9504: LD_STRING D3Kc1-JMM-1
9506: PPUSH
9507: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9511: LD_EXP 25
9515: PPUSH
9516: LD_STRING D3Kc1-Kurt-1
9518: PPUSH
9519: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9523: LD_EXP 1
9527: PPUSH
9528: LD_STRING D3Kc1-JMM-2
9530: PPUSH
9531: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9535: LD_EXP 25
9539: PPUSH
9540: LD_STRING D3Kc1-Kurt-2
9542: PPUSH
9543: CALL_OW 88
// askSiberite = 1 ;
9547: LD_ADDR_EXP 33
9551: PUSH
9552: LD_INT 1
9554: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9555: LD_ADDR_VAR 0 4
9559: PUSH
9560: LD_STRING Q2b
9562: PPUSH
9563: LD_INT 1
9565: PUSH
9566: LD_INT 2
9568: PUSH
9569: LD_INT 3
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: PPUSH
9577: CALL_OW 98
9581: ST_TO_ADDR
// if dec2 = 1 then
9582: LD_VAR 0 4
9586: PUSH
9587: LD_INT 1
9589: EQUAL
9590: IFFALSE 9624
// begin Say ( JMM , D4a-JMM-1 ) ;
9592: LD_EXP 1
9596: PPUSH
9597: LD_STRING D4a-JMM-1
9599: PPUSH
9600: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9604: LD_EXP 25
9608: PPUSH
9609: LD_STRING D4b-Kurt-1
9611: PPUSH
9612: CALL_OW 88
// warWithLegion = 1 ;
9616: LD_ADDR_EXP 31
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// end ; if dec2 = 2 then
9624: LD_VAR 0 4
9628: PUSH
9629: LD_INT 2
9631: EQUAL
9632: IFFALSE 9666
// begin Say ( JMM , D4b-JMM-1 ) ;
9634: LD_EXP 1
9638: PPUSH
9639: LD_STRING D4b-JMM-1
9641: PPUSH
9642: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9646: LD_EXP 25
9650: PPUSH
9651: LD_STRING D4b-Kurt-1
9653: PPUSH
9654: CALL_OW 88
// warWithLegion = 1 ;
9658: LD_ADDR_EXP 31
9662: PUSH
9663: LD_INT 1
9665: ST_TO_ADDR
// end ; if dec2 = 3 then
9666: LD_VAR 0 4
9670: PUSH
9671: LD_INT 3
9673: EQUAL
9674: IFFALSE 9732
// begin Say ( JMM , D4c-JMM-1 ) ;
9676: LD_EXP 1
9680: PPUSH
9681: LD_STRING D4c-JMM-1
9683: PPUSH
9684: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9688: LD_EXP 25
9692: PPUSH
9693: LD_STRING D4c-Kurt-1
9695: PPUSH
9696: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9700: LD_EXP 1
9704: PPUSH
9705: LD_STRING D4c-JMM-2
9707: PPUSH
9708: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9712: LD_EXP 25
9716: PPUSH
9717: LD_STRING D4c-Kurt-2
9719: PPUSH
9720: CALL_OW 88
// fakeInfo = 1 ;
9724: LD_ADDR_EXP 32
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9732: LD_VAR 0 3
9736: PUSH
9737: LD_INT 4
9739: EQUAL
9740: IFFALSE 10446
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9742: LD_EXP 1
9746: PPUSH
9747: LD_STRING D3Kd-JMM-1
9749: PPUSH
9750: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9754: LD_VAR 0 8
9758: PUSH
9759: LD_INT 200
9761: GREATEREQUAL
9762: PUSH
9763: LD_VAR 0 10
9767: PUSH
9768: LD_INT 200
9770: GREATEREQUAL
9771: AND
9772: IFFALSE 9807
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9774: LD_ADDR_VAR 0 4
9778: PUSH
9779: LD_STRING Q2a
9781: PPUSH
9782: LD_INT 1
9784: PUSH
9785: LD_INT 2
9787: PUSH
9788: LD_INT 3
9790: PUSH
9791: LD_INT 4
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 98
9804: ST_TO_ADDR
9805: GO 9879
// if crates >= 100 and siberite >= 100 then
9807: LD_VAR 0 8
9811: PUSH
9812: LD_INT 100
9814: GREATEREQUAL
9815: PUSH
9816: LD_VAR 0 10
9820: PUSH
9821: LD_INT 100
9823: GREATEREQUAL
9824: AND
9825: IFFALSE 9856
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 4 ] ) else
9827: LD_ADDR_VAR 0 4
9831: PUSH
9832: LD_STRING Q2a
9834: PPUSH
9835: LD_INT 1
9837: PUSH
9838: LD_INT 2
9840: PUSH
9841: LD_INT 4
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: PPUSH
9849: CALL_OW 98
9853: ST_TO_ADDR
9854: GO 9879
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9856: LD_ADDR_VAR 0 4
9860: PUSH
9861: LD_STRING Q2a
9863: PPUSH
9864: LD_INT 1
9866: PUSH
9867: LD_INT 4
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PPUSH
9874: CALL_OW 98
9878: ST_TO_ADDR
// if dec2 = 1 then
9879: LD_VAR 0 4
9883: PUSH
9884: LD_INT 1
9886: EQUAL
9887: IFFALSE 9921
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9889: LD_EXP 1
9893: PPUSH
9894: LD_STRING D5Ka-JMM-1
9896: PPUSH
9897: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9901: LD_EXP 25
9905: PPUSH
9906: LD_STRING D5Ka-Kurt-1
9908: PPUSH
9909: CALL_OW 88
// warWithLegion = 1 ;
9913: LD_ADDR_EXP 31
9917: PUSH
9918: LD_INT 1
9920: ST_TO_ADDR
// end ; if dec2 = 2 then
9921: LD_VAR 0 4
9925: PUSH
9926: LD_INT 2
9928: EQUAL
9929: IFFALSE 9955
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9931: LD_EXP 1
9935: PPUSH
9936: LD_STRING D3Kb-JMM-1
9938: PPUSH
9939: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9943: LD_EXP 25
9947: PPUSH
9948: LD_STRING D3Kb-Kurt-1
9950: PPUSH
9951: CALL_OW 88
// end ; if dec2 = 3 then
9955: LD_VAR 0 4
9959: PUSH
9960: LD_INT 3
9962: EQUAL
9963: IFFALSE 10193
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9965: LD_EXP 1
9969: PPUSH
9970: LD_STRING D3Ke-JMM-1
9972: PPUSH
9973: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9977: LD_EXP 25
9981: PPUSH
9982: LD_STRING D3Ke-Kurt-1
9984: PPUSH
9985: CALL_OW 88
// PrepareLegionForPlayer ;
9989: CALL 4483 0 0
// for i in tmp do
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: LD_VAR 0 5
10002: PUSH
10003: FOR_IN
10004: IFFALSE 10091
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
10006: LD_ADDR_VAR 0 6
10010: PUSH
10011: LD_VAR 0 2
10015: PPUSH
10016: CALL_OW 274
10020: PPUSH
10021: LD_INT 1
10023: PPUSH
10024: CALL_OW 275
10028: ST_TO_ADDR
// if tmp2 >= 200 then
10029: LD_VAR 0 6
10033: PUSH
10034: LD_INT 200
10036: GREATEREQUAL
10037: IFFALSE 10069
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
10039: LD_VAR 0 2
10043: PPUSH
10044: CALL_OW 274
10048: PPUSH
10049: LD_INT 1
10051: PPUSH
10052: LD_VAR 0 6
10056: PUSH
10057: LD_INT 200
10059: MINUS
10060: PPUSH
10061: CALL_OW 277
// break ;
10065: GO 10091
// end else
10067: GO 10089
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
10069: LD_VAR 0 2
10073: PPUSH
10074: CALL_OW 274
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: LD_INT 0
10084: PPUSH
10085: CALL_OW 277
// end ; end ;
10089: GO 10003
10091: POP
10092: POP
// for i in tmp do
10093: LD_ADDR_VAR 0 2
10097: PUSH
10098: LD_VAR 0 5
10102: PUSH
10103: FOR_IN
10104: IFFALSE 10191
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
10106: LD_ADDR_VAR 0 6
10110: PUSH
10111: LD_VAR 0 2
10115: PPUSH
10116: CALL_OW 274
10120: PPUSH
10121: LD_INT 3
10123: PPUSH
10124: CALL_OW 275
10128: ST_TO_ADDR
// if tmp2 >= 200 then
10129: LD_VAR 0 6
10133: PUSH
10134: LD_INT 200
10136: GREATEREQUAL
10137: IFFALSE 10169
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 274
10148: PPUSH
10149: LD_INT 3
10151: PPUSH
10152: LD_VAR 0 6
10156: PUSH
10157: LD_INT 200
10159: MINUS
10160: PPUSH
10161: CALL_OW 277
// break ;
10165: GO 10191
// end else
10167: GO 10189
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
10169: LD_VAR 0 2
10173: PPUSH
10174: CALL_OW 274
10178: PPUSH
10179: LD_INT 3
10181: PPUSH
10182: LD_INT 0
10184: PPUSH
10185: CALL_OW 277
// end ; end ;
10189: GO 10103
10191: POP
10192: POP
// end ; if dec2 = 4 then
10193: LD_VAR 0 4
10197: PUSH
10198: LD_INT 4
10200: EQUAL
10201: IFFALSE 10446
// begin if dec1 = 3 then
10203: LD_VAR 0 3
10207: PUSH
10208: LD_INT 3
10210: EQUAL
10211: IFFALSE 10446
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
10213: LD_EXP 1
10217: PPUSH
10218: LD_STRING D3Kc1-JMM-1
10220: PPUSH
10221: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
10225: LD_EXP 25
10229: PPUSH
10230: LD_STRING D3Kc1-Kurt-1
10232: PPUSH
10233: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
10237: LD_EXP 1
10241: PPUSH
10242: LD_STRING D3Kc1-JMM-2
10244: PPUSH
10245: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
10249: LD_EXP 25
10253: PPUSH
10254: LD_STRING D3Kc1-Kurt-2
10256: PPUSH
10257: CALL_OW 88
// askSiberite = 1 ;
10261: LD_ADDR_EXP 33
10265: PUSH
10266: LD_INT 1
10268: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
10269: LD_ADDR_VAR 0 4
10273: PUSH
10274: LD_STRING Q2b
10276: PPUSH
10277: LD_INT 1
10279: PUSH
10280: LD_INT 2
10282: PUSH
10283: LD_INT 3
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 98
10295: ST_TO_ADDR
// if dec2 = 1 then
10296: LD_VAR 0 4
10300: PUSH
10301: LD_INT 1
10303: EQUAL
10304: IFFALSE 10338
// begin Say ( JMM , D4a-JMM-1 ) ;
10306: LD_EXP 1
10310: PPUSH
10311: LD_STRING D4a-JMM-1
10313: PPUSH
10314: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
10318: LD_EXP 25
10322: PPUSH
10323: LD_STRING D4b-Kurt-1
10325: PPUSH
10326: CALL_OW 88
// warWithLegion = 1 ;
10330: LD_ADDR_EXP 31
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// end ; if dec2 = 2 then
10338: LD_VAR 0 4
10342: PUSH
10343: LD_INT 2
10345: EQUAL
10346: IFFALSE 10380
// begin Say ( JMM , D4b-JMM-1 ) ;
10348: LD_EXP 1
10352: PPUSH
10353: LD_STRING D4b-JMM-1
10355: PPUSH
10356: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
10360: LD_EXP 25
10364: PPUSH
10365: LD_STRING D4b-Kurt-1
10367: PPUSH
10368: CALL_OW 88
// warWithLegion = 1 ;
10372: LD_ADDR_EXP 31
10376: PUSH
10377: LD_INT 1
10379: ST_TO_ADDR
// end ; if dec2 = 3 then
10380: LD_VAR 0 4
10384: PUSH
10385: LD_INT 3
10387: EQUAL
10388: IFFALSE 10446
// begin Say ( JMM , D4c-JMM-1 ) ;
10390: LD_EXP 1
10394: PPUSH
10395: LD_STRING D4c-JMM-1
10397: PPUSH
10398: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
10402: LD_EXP 25
10406: PPUSH
10407: LD_STRING D4c-Kurt-1
10409: PPUSH
10410: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
10414: LD_EXP 1
10418: PPUSH
10419: LD_STRING D4c-JMM-2
10421: PPUSH
10422: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
10426: LD_EXP 25
10430: PPUSH
10431: LD_STRING D4c-Kurt-2
10433: PPUSH
10434: CALL_OW 88
// fakeInfo = 1 ;
10438: LD_ADDR_EXP 32
10442: PUSH
10443: LD_INT 1
10445: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
10446: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
10450: LD_INT 8
10452: PPUSH
10453: LD_INT 8
10455: PPUSH
10456: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
10460: LD_EXP 25
10464: PPUSH
10465: LD_EXP 26
10469: PPUSH
10470: CALL_OW 120
// wait ( 0 0$1 ) ;
10474: LD_INT 35
10476: PPUSH
10477: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
10481: LD_EXP 26
10485: PPUSH
10486: LD_INT 4
10488: PPUSH
10489: CALL_OW 113
// wait ( 0 0$6 ) ;
10493: LD_INT 210
10495: PPUSH
10496: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10500: LD_EXP 25
10504: PPUSH
10505: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10509: LD_EXP 26
10513: PPUSH
10514: CALL_OW 64
// end ; end ;
10518: LD_VAR 0 1
10522: RET
// every 0 0$10 trigger warWithLegion = 1 do
10523: LD_EXP 31
10527: PUSH
10528: LD_INT 1
10530: EQUAL
10531: IFFALSE 10540
10533: GO 10535
10535: DISABLE
// PrepareAttackLegion ;
10536: CALL 5147 0 0
10540: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10541: LD_EXP 15
10545: PPUSH
10546: CALL_OW 305
10550: PUSH
10551: LD_EXP 15
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 289
10563: NOT
10564: AND
10565: PUSH
10566: LD_EXP 15
10570: PPUSH
10571: LD_INT 2
10573: PPUSH
10574: CALL_OW 289
10578: NOT
10579: AND
10580: PUSH
10581: LD_EXP 15
10585: PPUSH
10586: LD_INT 3
10588: PPUSH
10589: CALL_OW 289
10593: NOT
10594: AND
10595: IFFALSE 10612
10597: GO 10599
10599: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10600: LD_EXP 15
10604: PPUSH
10605: LD_INT 4
10607: PPUSH
10608: CALL_OW 235
10612: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10613: LD_EXP 16
10617: PPUSH
10618: CALL_OW 305
10622: PUSH
10623: LD_EXP 16
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: CALL_OW 289
10635: NOT
10636: AND
10637: PUSH
10638: LD_EXP 16
10642: PPUSH
10643: LD_INT 2
10645: PPUSH
10646: CALL_OW 289
10650: NOT
10651: AND
10652: PUSH
10653: LD_EXP 16
10657: PPUSH
10658: LD_INT 3
10660: PPUSH
10661: CALL_OW 289
10665: NOT
10666: AND
10667: IFFALSE 10684
10669: GO 10671
10671: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10672: LD_EXP 16
10676: PPUSH
10677: LD_INT 4
10679: PPUSH
10680: CALL_OW 235
10684: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10685: LD_EXP 17
10689: PPUSH
10690: CALL_OW 305
10694: PUSH
10695: LD_EXP 17
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 289
10707: NOT
10708: AND
10709: PUSH
10710: LD_EXP 17
10714: PPUSH
10715: LD_INT 2
10717: PPUSH
10718: CALL_OW 289
10722: NOT
10723: AND
10724: PUSH
10725: LD_EXP 17
10729: PPUSH
10730: LD_INT 3
10732: PPUSH
10733: CALL_OW 289
10737: NOT
10738: AND
10739: IFFALSE 10756
10741: GO 10743
10743: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10744: LD_EXP 17
10748: PPUSH
10749: LD_INT 4
10751: PPUSH
10752: CALL_OW 235
10756: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10757: LD_EXP 18
10761: PPUSH
10762: CALL_OW 305
10766: PUSH
10767: LD_EXP 18
10771: PPUSH
10772: LD_INT 1
10774: PPUSH
10775: CALL_OW 289
10779: NOT
10780: AND
10781: PUSH
10782: LD_EXP 18
10786: PPUSH
10787: LD_INT 2
10789: PPUSH
10790: CALL_OW 289
10794: NOT
10795: AND
10796: PUSH
10797: LD_EXP 18
10801: PPUSH
10802: LD_INT 3
10804: PPUSH
10805: CALL_OW 289
10809: NOT
10810: AND
10811: IFFALSE 10828
10813: GO 10815
10815: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10816: LD_EXP 18
10820: PPUSH
10821: LD_INT 4
10823: PPUSH
10824: CALL_OW 235
10828: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10829: LD_EXP 19
10833: PPUSH
10834: CALL_OW 305
10838: PUSH
10839: LD_EXP 19
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 289
10851: NOT
10852: AND
10853: PUSH
10854: LD_EXP 19
10858: PPUSH
10859: LD_INT 2
10861: PPUSH
10862: CALL_OW 289
10866: NOT
10867: AND
10868: PUSH
10869: LD_EXP 19
10873: PPUSH
10874: LD_INT 3
10876: PPUSH
10877: CALL_OW 289
10881: NOT
10882: AND
10883: PUSH
10884: LD_EXP 19
10888: PPUSH
10889: LD_INT 2
10891: PPUSH
10892: CALL_OW 289
10896: NOT
10897: AND
10898: IFFALSE 10915
10900: GO 10902
10902: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10903: LD_EXP 19
10907: PPUSH
10908: LD_INT 4
10910: PPUSH
10911: CALL_OW 235
10915: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10916: LD_EXP 20
10920: PPUSH
10921: CALL_OW 305
10925: PUSH
10926: LD_EXP 20
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 289
10938: NOT
10939: AND
10940: PUSH
10941: LD_EXP 20
10945: PPUSH
10946: LD_INT 2
10948: PPUSH
10949: CALL_OW 289
10953: NOT
10954: AND
10955: PUSH
10956: LD_EXP 20
10960: PPUSH
10961: LD_INT 3
10963: PPUSH
10964: CALL_OW 289
10968: NOT
10969: AND
10970: IFFALSE 10987
10972: GO 10974
10974: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10975: LD_EXP 20
10979: PPUSH
10980: LD_INT 4
10982: PPUSH
10983: CALL_OW 235
10987: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10988: LD_EXP 21
10992: PPUSH
10993: CALL_OW 305
10997: PUSH
10998: LD_EXP 21
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 289
11010: NOT
11011: AND
11012: PUSH
11013: LD_EXP 21
11017: PPUSH
11018: LD_INT 2
11020: PPUSH
11021: CALL_OW 289
11025: NOT
11026: AND
11027: PUSH
11028: LD_EXP 21
11032: PPUSH
11033: LD_INT 3
11035: PPUSH
11036: CALL_OW 289
11040: NOT
11041: AND
11042: IFFALSE 11059
11044: GO 11046
11046: DISABLE
// SetSide ( amCargo7 , 4 ) ;
11047: LD_EXP 21
11051: PPUSH
11052: LD_INT 4
11054: PPUSH
11055: CALL_OW 235
11059: END
// every 0 0$1 do var i ;
11060: GO 11062
11062: DISABLE
11063: LD_INT 0
11065: PPUSH
// begin enable ;
11066: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11067: LD_ADDR_VAR 0 1
11071: PUSH
11072: LD_INT 22
11074: PUSH
11075: LD_INT 4
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11127
// begin ComMoveToArea ( i , PlayerSpawn ) ;
11090: LD_VAR 0 1
11094: PPUSH
11095: LD_INT 4
11097: PPUSH
11098: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
11102: LD_VAR 0 1
11106: PPUSH
11107: LD_INT 4
11109: PPUSH
11110: CALL_OW 308
11114: IFFALSE 11125
// RemoveUnit ( i ) ;
11116: LD_VAR 0 1
11120: PPUSH
11121: CALL_OW 64
// end ;
11125: GO 11087
11127: POP
11128: POP
// end ;
11129: PPOPN 1
11131: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
11132: LD_EXP 28
11136: PUSH
11137: LD_INT 1
11139: EQUAL
11140: IFFALSE 11579
11142: GO 11144
11144: DISABLE
11145: LD_INT 0
11147: PPUSH
11148: PPUSH
11149: PPUSH
// begin enable ;
11150: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
11151: LD_ADDR_VAR 0 2
11155: PUSH
11156: LD_INT 12
11158: PPUSH
11159: LD_INT 22
11161: PUSH
11162: LD_INT 3
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PPUSH
11183: CALL_OW 70
11187: ST_TO_ADDR
// for i in enemyVehs do
11188: LD_ADDR_VAR 0 1
11192: PUSH
11193: LD_VAR 0 2
11197: PUSH
11198: FOR_IN
11199: IFFALSE 11577
// begin if See ( 1 , i ) then
11201: LD_INT 1
11203: PPUSH
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 292
11213: IFFALSE 11575
// begin disable ;
11215: DISABLE
// DialogueOn ;
11216: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11229: LD_INT 22
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: LD_INT 26
11241: PUSH
11242: LD_INT 1
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 2
11251: PUSH
11252: LD_INT 25
11254: PUSH
11255: LD_INT 1
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 25
11274: PUSH
11275: LD_INT 3
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 25
11284: PUSH
11285: LD_INT 4
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 25
11294: PUSH
11295: LD_INT 5
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 25
11304: PUSH
11305: LD_INT 8
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 69
11330: PPUSH
11331: LD_STRING DT1-Sol1-1
11333: PPUSH
11334: LD_STRING DT1-FSol1-1
11336: PPUSH
11337: CALL 13595 0 3
// dec = ShowQuery2 ;
11341: LD_ADDR_VAR 0 3
11345: PUSH
11346: CALL 14138 0 0
11350: ST_TO_ADDR
// if dec = 1 then
11351: LD_VAR 0 3
11355: PUSH
11356: LD_INT 1
11358: EQUAL
11359: IFFALSE 11465
// begin Say ( JMM , D2-JMM-1 ) ;
11361: LD_EXP 1
11365: PPUSH
11366: LD_STRING D2-JMM-1
11368: PPUSH
11369: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11373: LD_EXP 22
11377: PPUSH
11378: LD_STRING D2-Pow-1
11380: PPUSH
11381: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
11385: LD_EXP 1
11389: PPUSH
11390: LD_STRING D2a-JMM-1
11392: PPUSH
11393: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
11397: LD_EXP 22
11401: PPUSH
11402: LD_STRING D2a-Pow-1
11404: PPUSH
11405: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
11409: LD_EXP 1
11413: PPUSH
11414: LD_STRING D2a-JMM-2
11416: PPUSH
11417: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
11421: LD_EXP 22
11425: PPUSH
11426: LD_STRING D2a-Pow-2
11428: PPUSH
11429: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
11433: LD_EXP 1
11437: PPUSH
11438: LD_STRING D2a-JMM-3
11440: PPUSH
11441: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
11445: LD_EXP 22
11449: PPUSH
11450: LD_STRING D2a-Pow-3
11452: PPUSH
11453: CALL_OW 94
// secondPass = 2 ;
11457: LD_ADDR_EXP 28
11461: PUSH
11462: LD_INT 2
11464: ST_TO_ADDR
// end ; if dec = 2 then
11465: LD_VAR 0 3
11469: PUSH
11470: LD_INT 2
11472: EQUAL
11473: IFFALSE 11567
// begin Say ( JMM , D2-JMM-1 ) ;
11475: LD_EXP 1
11479: PPUSH
11480: LD_STRING D2-JMM-1
11482: PPUSH
11483: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11487: LD_EXP 22
11491: PPUSH
11492: LD_STRING D2-Pow-1
11494: PPUSH
11495: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11499: LD_EXP 1
11503: PPUSH
11504: LD_STRING D2b-JMM-1
11506: PPUSH
11507: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11511: LD_EXP 22
11515: PPUSH
11516: LD_STRING D2b-Pow-1
11518: PPUSH
11519: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11523: LD_EXP 1
11527: PPUSH
11528: LD_STRING D2c-JMM-1
11530: PPUSH
11531: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11535: LD_EXP 22
11539: PPUSH
11540: LD_STRING D2c-Pow-1
11542: PPUSH
11543: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11547: LD_EXP 1
11551: PPUSH
11552: LD_STRING D2c-JMM-2
11554: PPUSH
11555: CALL_OW 88
// secondPass = 2 ;
11559: LD_ADDR_EXP 28
11563: PUSH
11564: LD_INT 2
11566: ST_TO_ADDR
// end ; DialogueOff ;
11567: CALL_OW 7
// exit ;
11571: POP
11572: POP
11573: GO 11579
// end ; end ;
11575: GO 11198
11577: POP
11578: POP
// end ;
11579: PPOPN 3
11581: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11582: LD_EXP 29
11586: PUSH
11587: LD_INT 1
11589: EQUAL
11590: IFFALSE 11823
11592: GO 11594
11594: DISABLE
11595: LD_INT 0
11597: PPUSH
11598: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11599: LD_ADDR_VAR 0 2
11603: PUSH
11604: LD_INT 11
11606: PPUSH
11607: LD_INT 22
11609: PUSH
11610: LD_INT 3
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 24
11619: PUSH
11620: LD_INT 250
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 70
11635: ST_TO_ADDR
// enable ;
11636: ENABLE
// for i in vehicles do
11637: LD_ADDR_VAR 0 1
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: FOR_IN
11648: IFFALSE 11821
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11650: LD_INT 1
11652: PPUSH
11653: LD_VAR 0 1
11657: PPUSH
11658: CALL_OW 292
11662: PUSH
11663: LD_EXP 29
11667: PUSH
11668: LD_INT 1
11670: EQUAL
11671: AND
11672: PUSH
11673: LD_EXP 30
11677: PUSH
11678: LD_INT 4
11680: LESSEQUAL
11681: AND
11682: IFFALSE 11819
// begin disable ;
11684: DISABLE
// DialogueOn ;
11685: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11689: LD_INT 22
11691: PUSH
11692: LD_INT 1
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 26
11701: PUSH
11702: LD_INT 1
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: LD_INT 2
11711: PUSH
11712: LD_INT 25
11714: PUSH
11715: LD_INT 1
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 25
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 25
11734: PUSH
11735: LD_INT 3
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 25
11744: PUSH
11745: LD_INT 4
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 25
11754: PUSH
11755: LD_INT 5
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 25
11764: PUSH
11765: LD_INT 8
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: PPUSH
11786: CALL_OW 69
11790: PPUSH
11791: LD_STRING DT1-Sol1-1
11793: PPUSH
11794: LD_STRING DT1-FSol1-1
11796: PPUSH
11797: CALL 13595 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11801: LD_EXP 1
11805: PPUSH
11806: LD_STRING DT1-JMM-1
11808: PPUSH
11809: CALL_OW 88
// DialogueOff ;
11813: CALL_OW 7
// break ;
11817: GO 11821
// end ; end ;
11819: GO 11647
11821: POP
11822: POP
// end ;
11823: PPOPN 2
11825: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
11826: LD_EXP 29
11830: PUSH
11831: LD_INT 1
11833: EQUAL
11834: PUSH
11835: LD_INT 11
11837: PPUSH
11838: LD_INT 22
11840: PUSH
11841: LD_INT 3
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 24
11850: PUSH
11851: LD_INT 251
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 2
11860: PUSH
11861: LD_INT 21
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 21
11873: PUSH
11874: LD_INT 1
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 70
11895: PUSH
11896: LD_INT 0
11898: EQUAL
11899: AND
11900: PUSH
11901: LD_EXP 30
11905: AND
11906: IFFALSE 12063
11908: GO 11910
11910: DISABLE
// begin vehicleTeleported = 2 ;
11911: LD_ADDR_EXP 29
11915: PUSH
11916: LD_INT 2
11918: ST_TO_ADDR
// DialogueOn ;
11919: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11923: LD_EXP 1
11927: PPUSH
11928: LD_STRING DT1a-JMM-1
11930: PPUSH
11931: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11935: LD_INT 22
11937: PUSH
11938: LD_INT 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 26
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 2
11957: PUSH
11958: LD_INT 25
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 25
11970: PUSH
11971: LD_INT 2
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 25
11980: PUSH
11981: LD_INT 3
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 25
11990: PUSH
11991: LD_INT 4
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 25
12000: PUSH
12001: LD_INT 5
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 25
12010: PUSH
12011: LD_INT 8
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PPUSH
12037: LD_STRING DT1a-Sol1-1
12039: PPUSH
12040: LD_STRING DT1a-FSol1-1
12042: PPUSH
12043: CALL 13595 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
12047: LD_EXP 1
12051: PPUSH
12052: LD_STRING DT1a-JMM-2
12054: PPUSH
12055: CALL_OW 88
// DialogueOff ;
12059: CALL_OW 7
// end ;
12063: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
12064: LD_EXP 29
12068: PUSH
12069: LD_INT 3
12071: EQUAL
12072: PUSH
12073: LD_INT 11
12075: PPUSH
12076: LD_INT 22
12078: PUSH
12079: LD_INT 3
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 101
12088: PUSH
12089: LD_INT 1
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 70
12104: AND
12105: IFFALSE 12386
12107: GO 12109
12109: DISABLE
12110: LD_INT 0
12112: PPUSH
12113: PPUSH
12114: PPUSH
// begin wait ( 0 0$0.3 ) ;
12115: LD_INT 10
12117: PPUSH
12118: CALL_OW 67
// DialogueOn ;
12122: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
12126: LD_ADDR_VAR 0 3
12130: PUSH
12131: LD_INT 22
12133: PUSH
12134: LD_INT 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 26
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: LD_INT 25
12156: PUSH
12157: LD_INT 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 2
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 25
12176: PUSH
12177: LD_INT 3
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 25
12186: PUSH
12187: LD_INT 4
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 25
12196: PUSH
12197: LD_INT 5
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 25
12206: PUSH
12207: LD_INT 8
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 69
12232: PPUSH
12233: LD_STRING DT2-Sol1-1
12235: PPUSH
12236: LD_STRING DT2-FSol1-1
12238: PPUSH
12239: CALL 13595 0 3
12243: ST_TO_ADDR
// DialogueOff ;
12244: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
12248: LD_INT 35
12250: PPUSH
12251: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) = 0 ;
12255: LD_INT 11
12257: PPUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 3
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 24
12270: PUSH
12271: LD_INT 250
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 70
12286: PUSH
12287: LD_INT 0
12289: EQUAL
12290: IFFALSE 12248
// wait ( 0 0$2 ) ;
12292: LD_INT 70
12294: PPUSH
12295: CALL_OW 67
// vehicleTeleported = 4 ;
12299: LD_ADDR_EXP 29
12303: PUSH
12304: LD_INT 4
12306: ST_TO_ADDR
// DialogueOn ;
12307: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
12311: LD_EXP 1
12315: PPUSH
12316: LD_STRING DT2a-JMM-1
12318: PPUSH
12319: CALL_OW 88
// if speaker then
12323: LD_VAR 0 3
12327: IFFALSE 12370
// if GetSex ( speaker ) = 1 then
12329: LD_VAR 0 3
12333: PPUSH
12334: CALL_OW 258
12338: PUSH
12339: LD_INT 1
12341: EQUAL
12342: IFFALSE 12358
// Say ( speaker , DT2a-Sol1-1 ) else
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_STRING DT2a-Sol1-1
12351: PPUSH
12352: CALL_OW 88
12356: GO 12370
// Say ( speaker , DT2a-FSol1-1 ) ;
12358: LD_VAR 0 3
12362: PPUSH
12363: LD_STRING DT2a-FSol1-1
12365: PPUSH
12366: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
12370: LD_EXP 3
12374: PPUSH
12375: LD_STRING DT2a-Don-1
12377: PPUSH
12378: CALL_OW 88
// DialogueOff ;
12382: CALL_OW 7
// end ;
12386: PPOPN 3
12388: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12389: LD_INT 1
12391: PPUSH
12392: LD_INT 45
12394: PPUSH
12395: LD_INT 74
12397: PPUSH
12398: CALL_OW 293
12402: IFFALSE 12570
12404: GO 12406
12406: DISABLE
// begin DialogueOn ;
12407: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12411: LD_INT 36
12413: PPUSH
12414: LD_INT 55
12416: PPUSH
12417: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12421: LD_INT 22
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 26
12433: PUSH
12434: LD_INT 1
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 2
12443: PUSH
12444: LD_INT 25
12446: PUSH
12447: LD_INT 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 25
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 25
12466: PUSH
12467: LD_INT 3
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 25
12476: PUSH
12477: LD_INT 4
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 25
12486: PUSH
12487: LD_INT 5
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 25
12496: PUSH
12497: LD_INT 8
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: PPUSH
12523: LD_STRING D5-Sol1-1
12525: PPUSH
12526: LD_STRING D5-FSol1-
12528: PPUSH
12529: CALL 13595 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12533: LD_EXP 31
12537: PUSH
12538: LD_INT 1
12540: EQUAL
12541: PUSH
12542: LD_EXP 3
12546: PPUSH
12547: CALL_OW 300
12551: AND
12552: IFFALSE 12566
// Say ( Donaldson , D5-Don-1 ) ;
12554: LD_EXP 3
12558: PPUSH
12559: LD_STRING D5-Don-1
12561: PPUSH
12562: CALL_OW 88
// DialogueOff ;
12566: CALL_OW 7
// end ;
12570: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12571: LD_INT 1
12573: PPUSH
12574: LD_INT 10
12576: PPUSH
12577: CALL_OW 292
12581: PUSH
12582: LD_INT 1
12584: PPUSH
12585: LD_INT 137
12587: PPUSH
12588: CALL_OW 292
12592: OR
12593: IFFALSE 12737
12595: GO 12597
12597: DISABLE
// begin DialogueOn ;
12598: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12602: LD_INT 22
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 26
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 2
12624: PUSH
12625: LD_INT 25
12627: PUSH
12628: LD_INT 1
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 25
12637: PUSH
12638: LD_INT 2
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 25
12647: PUSH
12648: LD_INT 3
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 25
12657: PUSH
12658: LD_INT 4
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 25
12667: PUSH
12668: LD_INT 5
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 8
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL_OW 69
12703: PPUSH
12704: LD_STRING DT3-Sol1-1
12706: PPUSH
12707: LD_STRING DT3-FSol1-1
12709: PPUSH
12710: CALL 13595 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12714: LD_EXP 1
12718: PPUSH
12719: LD_STRING DT3-JMM-1
12721: PPUSH
12722: CALL_OW 88
// DialogueOff ;
12726: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12730: LD_STRING M2
12732: PPUSH
12733: CALL_OW 337
// end ;
12737: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12738: LD_EXP 43
12742: PUSH
12743: LD_INT 0
12745: EQUAL
12746: IFFALSE 12829
12748: GO 12750
12750: DISABLE
12751: LD_INT 0
12753: PPUSH
// begin enable ;
12754: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12755: LD_ADDR_VAR 0 1
12759: PUSH
12760: LD_INT 10
12762: PPUSH
12763: LD_INT 22
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 21
12775: PUSH
12776: LD_INT 2
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 58
12785: PUSH
12786: EMPTY
12787: LIST
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: PPUSH
12794: CALL_OW 70
12798: PUSH
12799: FOR_IN
12800: IFFALSE 12827
// if GetLives ( i ) < 1000 then
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 256
12811: PUSH
12812: LD_INT 1000
12814: LESS
12815: IFFALSE 12825
// ruEscape = 1 ;
12817: LD_ADDR_EXP 43
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
12825: GO 12799
12827: POP
12828: POP
// end ;
12829: PPOPN 1
12831: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12832: LD_INT 3
12834: PPUSH
12835: CALL_OW 303
12839: PUSH
12840: LD_INT 4
12842: PPUSH
12843: CALL_OW 303
12847: OR
12848: PUSH
12849: LD_INT 22
12851: PPUSH
12852: LD_INT 22
12854: PUSH
12855: LD_INT 1
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PPUSH
12862: CALL_OW 70
12866: PUSH
12867: LD_INT 0
12869: GREATER
12870: OR
12871: PUSH
12872: LD_EXP 43
12876: PUSH
12877: LD_INT 1
12879: EQUAL
12880: OR
12881: IFFALSE 13112
12883: GO 12885
12885: DISABLE
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
12890: PPUSH
// begin ruAI = 0 ;
12891: LD_ADDR_EXP 42
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12899: LD_ADDR_VAR 0 3
12903: PUSH
12904: LD_INT 10
12906: PPUSH
12907: LD_INT 22
12909: PUSH
12910: LD_INT 3
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 58
12929: PUSH
12930: EMPTY
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 70
12942: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12943: LD_EXP 35
12947: PPUSH
12948: CALL_OW 122
// wait ( 0 0$1 ) ;
12952: LD_INT 35
12954: PPUSH
12955: CALL_OW 67
// DialogueOn ;
12959: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12963: LD_EXP 1
12967: PPUSH
12968: LD_STRING D6-JMM-1
12970: PPUSH
12971: CALL_OW 88
// DialogueOff ;
12975: CALL_OW 7
// if vehs > 0 then
12979: LD_VAR 0 3
12983: PUSH
12984: LD_INT 0
12986: GREATER
12987: IFFALSE 13057
// for i := 1 to RuScientists do
12989: LD_ADDR_VAR 0 1
12993: PUSH
12994: DOUBLE
12995: LD_INT 1
12997: DEC
12998: ST_TO_ADDR
12999: LD_EXP 35
13003: PUSH
13004: FOR_TO
13005: IFFALSE 13053
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
13007: LD_EXP 35
13011: PUSH
13012: LD_VAR 0 1
13016: ARRAY
13017: PPUSH
13018: LD_INT 3
13020: PUSH
13021: LD_INT 60
13023: PUSH
13024: EMPTY
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 72
13035: PPUSH
13036: LD_VAR 0 3
13040: PUSH
13041: LD_VAR 0 1
13045: ARRAY
13046: PPUSH
13047: CALL_OW 120
13051: GO 13004
13053: POP
13054: POP
13055: GO 13112
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
13057: LD_EXP 35
13061: PUSH
13062: LD_VAR 0 1
13066: ARRAY
13067: PPUSH
13068: LD_INT 3
13070: PUSH
13071: LD_INT 60
13073: PUSH
13074: EMPTY
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 72
13085: PPUSH
13086: LD_INT 13
13088: PUSH
13089: LD_INT 14
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 1
13098: PPUSH
13099: LD_INT 2
13101: PPUSH
13102: CALL_OW 12
13106: ARRAY
13107: PPUSH
13108: CALL_OW 113
// end ;
13112: PPOPN 3
13114: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
13115: LD_EXP 42
13119: PUSH
13120: LD_INT 0
13122: EQUAL
13123: IFFALSE 13495
13125: GO 13127
13127: DISABLE
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
// begin enable ;
13134: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
13135: LD_EXP 35
13139: PPUSH
13140: LD_INT 2
13142: PUSH
13143: LD_INT 95
13145: PUSH
13146: LD_INT 13
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 95
13155: PUSH
13156: LD_INT 14
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: PPUSH
13168: CALL_OW 72
13172: PUSH
13173: LD_INT 33
13175: PUSH
13176: LD_INT 1
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 23
13185: PUSH
13186: LD_INT 3
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: LD_INT 95
13198: PUSH
13199: LD_INT 13
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 95
13208: PUSH
13209: LD_INT 14
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PPUSH
13226: CALL_OW 69
13230: OR
13231: IFFALSE 13420
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
13233: LD_ADDR_VAR 0 2
13237: PUSH
13238: LD_EXP 35
13242: PPUSH
13243: LD_INT 2
13245: PUSH
13246: LD_INT 95
13248: PUSH
13249: LD_INT 13
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 95
13258: PUSH
13259: LD_INT 14
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 72
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: ST_TO_ADDR
// if not unit then
13280: LD_VAR 0 2
13284: NOT
13285: IFFALSE 13420
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
13287: LD_ADDR_VAR 0 4
13291: PUSH
13292: LD_INT 2
13294: PUSH
13295: LD_INT 95
13297: PUSH
13298: LD_INT 13
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 95
13307: PUSH
13308: LD_INT 14
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 33
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 23
13332: PUSH
13333: LD_INT 3
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: PPUSH
13345: CALL_OW 69
13349: ST_TO_ADDR
// if not tmp then
13350: LD_VAR 0 4
13354: NOT
13355: IFFALSE 13359
// exit ;
13357: GO 13495
// for i in tmp do
13359: LD_ADDR_VAR 0 1
13363: PUSH
13364: LD_VAR 0 4
13368: PUSH
13369: FOR_IN
13370: IFFALSE 13418
// if IsDrivenBy ( i ) in RuScientists then
13372: LD_VAR 0 1
13376: PPUSH
13377: CALL_OW 311
13381: PUSH
13382: LD_EXP 35
13386: IN
13387: IFFALSE 13416
// begin unit := IsDrivenBy ( i ) ;
13389: LD_ADDR_VAR 0 2
13393: PUSH
13394: LD_VAR 0 1
13398: PPUSH
13399: CALL_OW 311
13403: ST_TO_ADDR
// veh := i ;
13404: LD_ADDR_VAR 0 3
13408: PUSH
13409: LD_VAR 0 1
13413: ST_TO_ADDR
// break ;
13414: GO 13418
// end ;
13416: GO 13369
13418: POP
13419: POP
// end ; end ; if not unit then
13420: LD_VAR 0 2
13424: NOT
13425: IFFALSE 13429
// exit ;
13427: GO 13495
// RuScientists = RuScientists diff unit ;
13429: LD_ADDR_EXP 35
13433: PUSH
13434: LD_EXP 35
13438: PUSH
13439: LD_VAR 0 2
13443: DIFF
13444: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13445: LD_VAR 0 2
13449: PPUSH
13450: CALL_OW 64
// if veh then
13454: LD_VAR 0 3
13458: IFFALSE 13495
// begin if GetWeapon ( veh ) = 49 then
13460: LD_VAR 0 3
13464: PPUSH
13465: CALL_OW 264
13469: PUSH
13470: LD_INT 49
13472: EQUAL
13473: IFFALSE 13486
// KillUnit ( veh ) else
13475: LD_VAR 0 3
13479: PPUSH
13480: CALL_OW 66
13484: GO 13495
// RemoveUnit ( veh ) ;
13486: LD_VAR 0 3
13490: PPUSH
13491: CALL_OW 64
// end ; end ; end_of_file
13495: PPOPN 4
13497: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13498: LD_INT 0
13500: PPUSH
13501: PPUSH
// if exist_mode then
13502: LD_VAR 0 2
13506: IFFALSE 13525
// unit := CreateCharacter ( ident ) else
13508: LD_ADDR_VAR 0 4
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 34
13522: ST_TO_ADDR
13523: GO 13540
// unit := NewCharacter ( ident ) ;
13525: LD_ADDR_VAR 0 4
13529: PUSH
13530: LD_VAR 0 1
13534: PPUSH
13535: CALL_OW 25
13539: ST_TO_ADDR
// result := unit ;
13540: LD_ADDR_VAR 0 3
13544: PUSH
13545: LD_VAR 0 4
13549: ST_TO_ADDR
// end ;
13550: LD_VAR 0 3
13554: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13555: LD_INT 0
13557: PPUSH
13558: PPUSH
// for i in charactersList do
13559: LD_ADDR_VAR 0 4
13563: PUSH
13564: LD_VAR 0 1
13568: PUSH
13569: FOR_IN
13570: IFFALSE 13588
// SaveCharacters ( i , ident ) ;
13572: LD_VAR 0 4
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL_OW 38
13586: GO 13569
13588: POP
13589: POP
// end ;
13590: LD_VAR 0 3
13594: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
13595: LD_INT 0
13597: PPUSH
13598: PPUSH
13599: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13600: LD_ADDR_VAR 0 1
13604: PUSH
13605: LD_VAR 0 1
13609: PUSH
13610: LD_EXP 1
13614: PUSH
13615: LD_EXP 7
13619: PUSH
13620: LD_EXP 3
13624: PUSH
13625: LD_EXP 4
13629: PUSH
13630: LD_EXP 5
13634: PUSH
13635: LD_EXP 2
13639: PUSH
13640: LD_EXP 12
13644: PUSH
13645: LD_EXP 13
13649: PUSH
13650: LD_EXP 9
13654: PUSH
13655: LD_EXP 11
13659: PUSH
13660: LD_EXP 6
13664: PUSH
13665: LD_EXP 8
13669: PUSH
13670: LD_EXP 10
13674: PUSH
13675: LD_EXP 22
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: DIFF
13696: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
13697: LD_ADDR_VAR 0 6
13701: PUSH
13702: LD_VAR 0 1
13706: PUSH
13707: LD_INT 1
13709: PPUSH
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 12
13719: ARRAY
13720: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
13721: LD_VAR 0 6
13725: PPUSH
13726: CALL_OW 258
13730: PUSH
13731: LD_INT 1
13733: EQUAL
13734: IFFALSE 13752
// Say ( speaker , dialogMID ) else
13736: LD_VAR 0 6
13740: PPUSH
13741: LD_VAR 0 2
13745: PPUSH
13746: CALL_OW 88
13750: GO 13766
// Say ( speaker , dialogFID ) ;
13752: LD_VAR 0 6
13756: PPUSH
13757: LD_VAR 0 3
13761: PPUSH
13762: CALL_OW 88
// result := speaker ;
13766: LD_ADDR_VAR 0 4
13770: PUSH
13771: LD_VAR 0 6
13775: ST_TO_ADDR
// end ;
13776: LD_VAR 0 4
13780: RET
// export function PrepareDifficulty ; var tmp ; begin
13781: LD_INT 0
13783: PPUSH
13784: PPUSH
// if Difficulty = 1 then
13785: LD_OWVAR 67
13789: PUSH
13790: LD_INT 1
13792: EQUAL
13793: IFFALSE 13811
// begin RuSolMinLevel = 8 ;
13795: LD_ADDR_EXP 37
13799: PUSH
13800: LD_INT 8
13802: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13803: LD_ADDR_EXP 38
13807: PUSH
13808: LD_INT 10
13810: ST_TO_ADDR
// end ; if Difficulty = 2 then
13811: LD_OWVAR 67
13815: PUSH
13816: LD_INT 2
13818: EQUAL
13819: IFFALSE 13913
// begin RuSolMinLevel = 9 ;
13821: LD_ADDR_EXP 37
13825: PUSH
13826: LD_INT 9
13828: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13829: LD_ADDR_EXP 38
13833: PUSH
13834: LD_INT 10
13836: ST_TO_ADDR
// uc_nation = 3 ;
13837: LD_ADDR_OWVAR 21
13841: PUSH
13842: LD_INT 3
13844: ST_TO_ADDR
// uc_side = 3 ;
13845: LD_ADDR_OWVAR 20
13849: PUSH
13850: LD_INT 3
13852: ST_TO_ADDR
// bc_level = 10 ;
13853: LD_ADDR_OWVAR 43
13857: PUSH
13858: LD_INT 10
13860: ST_TO_ADDR
// bc_type = b_turret ;
13861: LD_ADDR_OWVAR 42
13865: PUSH
13866: LD_INT 33
13868: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13869: LD_ADDR_VAR 0 2
13873: PUSH
13874: LD_INT 86
13876: PPUSH
13877: LD_INT 34
13879: PPUSH
13880: LD_INT 2
13882: PPUSH
13883: CALL_OW 47
13887: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13888: LD_VAR 0 2
13892: PPUSH
13893: LD_INT 49
13895: PPUSH
13896: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13900: LD_INT 64
13902: PPUSH
13903: LD_INT 3
13905: PPUSH
13906: LD_INT 1
13908: PPUSH
13909: CALL_OW 322
// end ; if Difficulty = 3 then
13913: LD_OWVAR 67
13917: PUSH
13918: LD_INT 3
13920: EQUAL
13921: IFFALSE 14059
// begin RuSolMinLevel = 10 ;
13923: LD_ADDR_EXP 37
13927: PUSH
13928: LD_INT 10
13930: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13931: LD_ADDR_EXP 38
13935: PUSH
13936: LD_INT 10
13938: ST_TO_ADDR
// uc_nation = 3 ;
13939: LD_ADDR_OWVAR 21
13943: PUSH
13944: LD_INT 3
13946: ST_TO_ADDR
// uc_side = 3 ;
13947: LD_ADDR_OWVAR 20
13951: PUSH
13952: LD_INT 3
13954: ST_TO_ADDR
// bc_level = 10 ;
13955: LD_ADDR_OWVAR 43
13959: PUSH
13960: LD_INT 10
13962: ST_TO_ADDR
// bc_type = b_turret ;
13963: LD_ADDR_OWVAR 42
13967: PUSH
13968: LD_INT 33
13970: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13971: LD_ADDR_VAR 0 2
13975: PUSH
13976: LD_INT 86
13978: PPUSH
13979: LD_INT 34
13981: PPUSH
13982: LD_INT 2
13984: PPUSH
13985: CALL_OW 47
13989: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13990: LD_VAR 0 2
13994: PPUSH
13995: LD_INT 49
13997: PPUSH
13998: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
14002: LD_ADDR_VAR 0 2
14006: PUSH
14007: LD_INT 93
14009: PPUSH
14010: LD_INT 31
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: CALL_OW 47
14020: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
14021: LD_VAR 0 2
14025: PPUSH
14026: LD_INT 49
14028: PPUSH
14029: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
14033: LD_INT 64
14035: PPUSH
14036: LD_INT 3
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
14046: LD_INT 65
14048: PPUSH
14049: LD_INT 3
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: CALL_OW 322
// end ; end ;
14059: LD_VAR 0 1
14063: RET
// export function ShowQuery1 ; begin
14064: LD_INT 0
14066: PPUSH
// case query ( Q1 ) of 1 :
14067: LD_STRING Q1
14069: PPUSH
14070: CALL_OW 97
14074: PUSH
14075: LD_INT 1
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14094
14083: POP
// result = 1 ; 2 :
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: LD_INT 1
14091: ST_TO_ADDR
14092: GO 14133
14094: LD_INT 2
14096: DOUBLE
14097: EQUAL
14098: IFTRUE 14102
14100: GO 14113
14102: POP
// result = 2 ; 3 :
14103: LD_ADDR_VAR 0 1
14107: PUSH
14108: LD_INT 2
14110: ST_TO_ADDR
14111: GO 14133
14113: LD_INT 3
14115: DOUBLE
14116: EQUAL
14117: IFTRUE 14121
14119: GO 14132
14121: POP
// result = 3 ; end ;
14122: LD_ADDR_VAR 0 1
14126: PUSH
14127: LD_INT 3
14129: ST_TO_ADDR
14130: GO 14133
14132: POP
// end ;
14133: LD_VAR 0 1
14137: RET
// export function ShowQuery2 ; begin
14138: LD_INT 0
14140: PPUSH
// case query ( Q1a ) of 1 :
14141: LD_STRING Q1a
14143: PPUSH
14144: CALL_OW 97
14148: PUSH
14149: LD_INT 1
14151: DOUBLE
14152: EQUAL
14153: IFTRUE 14157
14155: GO 14168
14157: POP
// result = 1 ; 2 :
14158: LD_ADDR_VAR 0 1
14162: PUSH
14163: LD_INT 1
14165: ST_TO_ADDR
14166: GO 14207
14168: LD_INT 2
14170: DOUBLE
14171: EQUAL
14172: IFTRUE 14176
14174: GO 14187
14176: POP
// result = 2 ; 3 :
14177: LD_ADDR_VAR 0 1
14181: PUSH
14182: LD_INT 2
14184: ST_TO_ADDR
14185: GO 14207
14187: LD_INT 3
14189: DOUBLE
14190: EQUAL
14191: IFTRUE 14195
14193: GO 14206
14195: POP
// result = 3 ; end ;
14196: LD_ADDR_VAR 0 1
14200: PUSH
14201: LD_INT 3
14203: ST_TO_ADDR
14204: GO 14207
14206: POP
// end ;
14207: LD_VAR 0 1
14211: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
14212: LD_INT 0
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
// for i = 1 to count do
14219: LD_ADDR_VAR 0 8
14223: PUSH
14224: DOUBLE
14225: LD_INT 1
14227: DEC
14228: ST_TO_ADDR
14229: LD_VAR 0 6
14233: PUSH
14234: FOR_TO
14235: IFFALSE 14316
// begin uc_side = side ;
14237: LD_ADDR_OWVAR 20
14241: PUSH
14242: LD_VAR 0 1
14246: ST_TO_ADDR
// uc_nation = nation ;
14247: LD_ADDR_OWVAR 21
14251: PUSH
14252: LD_VAR 0 2
14256: ST_TO_ADDR
// hc_gallery =  ;
14257: LD_ADDR_OWVAR 33
14261: PUSH
14262: LD_STRING 
14264: ST_TO_ADDR
// hc_name =  ;
14265: LD_ADDR_OWVAR 26
14269: PUSH
14270: LD_STRING 
14272: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14273: LD_INT 0
14275: PPUSH
14276: LD_VAR 0 5
14280: PPUSH
14281: LD_VAR 0 4
14285: PPUSH
14286: CALL_OW 380
// un = CreateHuman ;
14290: LD_ADDR_VAR 0 10
14294: PUSH
14295: CALL_OW 44
14299: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14300: LD_VAR 0 10
14304: PPUSH
14305: LD_VAR 0 3
14309: PPUSH
14310: CALL_OW 52
// end ;
14314: GO 14234
14316: POP
14317: POP
// end ;
14318: LD_VAR 0 7
14322: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14323: LD_INT 0
14325: PPUSH
14326: PPUSH
14327: PPUSH
14328: PPUSH
14329: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14330: LD_ADDR_VAR 0 8
14334: PUSH
14335: LD_INT 48
14337: PUSH
14338: LD_INT 49
14340: PUSH
14341: LD_INT 50
14343: PUSH
14344: LD_INT 20
14346: PUSH
14347: LD_INT 1
14349: PUSH
14350: LD_INT 51
14352: PUSH
14353: LD_INT 52
14355: PUSH
14356: LD_INT 69
14358: PUSH
14359: LD_INT 39
14361: PUSH
14362: LD_INT 34
14364: PUSH
14365: LD_INT 40
14367: PUSH
14368: LD_INT 53
14370: PUSH
14371: LD_INT 71
14373: PUSH
14374: LD_INT 57
14376: PUSH
14377: LD_INT 58
14379: PUSH
14380: LD_INT 44
14382: PUSH
14383: LD_INT 32
14385: PUSH
14386: LD_INT 27
14388: PUSH
14389: LD_INT 23
14391: PUSH
14392: LD_INT 33
14394: PUSH
14395: LD_INT 59
14397: PUSH
14398: LD_INT 54
14400: PUSH
14401: LD_INT 55
14403: PUSH
14404: LD_INT 56
14406: PUSH
14407: LD_INT 63
14409: PUSH
14410: LD_INT 64
14412: PUSH
14413: LD_INT 65
14415: PUSH
14416: LD_INT 30
14418: PUSH
14419: LD_INT 31
14421: PUSH
14422: LD_INT 21
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 25
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14465: LD_ADDR_VAR 0 5
14469: PUSH
14470: DOUBLE
14471: LD_INT 1
14473: DEC
14474: ST_TO_ADDR
14475: LD_VAR 0 8
14479: PUSH
14480: FOR_TO
14481: IFFALSE 14557
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14483: LD_VAR 0 8
14487: PUSH
14488: LD_VAR 0 5
14492: ARRAY
14493: PPUSH
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 321
14503: PUSH
14504: LD_INT 1
14506: EQUAL
14507: PUSH
14508: LD_VAR 0 8
14512: PUSH
14513: LD_VAR 0 5
14517: ARRAY
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: CALL_OW 482
14528: PUSH
14529: LD_INT 1
14531: EQUAL
14532: AND
14533: IFFALSE 14555
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14535: LD_VAR 0 2
14539: PPUSH
14540: LD_VAR 0 8
14544: PUSH
14545: LD_VAR 0 5
14549: ARRAY
14550: PPUSH
14551: CALL_OW 184
14555: GO 14480
14557: POP
14558: POP
// end ;
14559: LD_VAR 0 4
14563: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14564: LD_INT 0
14566: PPUSH
14567: PPUSH
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14572: LD_ADDR_VAR 0 8
14576: PUSH
14577: LD_VAR 0 2
14581: PPUSH
14582: CALL_OW 313
14586: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14587: LD_ADDR_VAR 0 9
14591: PUSH
14592: LD_VAR 0 3
14596: PPUSH
14597: LD_INT 22
14599: PUSH
14600: LD_VAR 0 1
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 25
14611: PUSH
14612: LD_INT 2
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 24
14621: PUSH
14622: LD_INT 750
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 3
14631: PUSH
14632: LD_INT 54
14634: PUSH
14635: EMPTY
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 70
14652: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14653: LD_ADDR_VAR 0 6
14657: PUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: LD_INT 22
14665: PUSH
14666: LD_VAR 0 1
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 21
14677: PUSH
14678: LD_INT 3
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 24
14690: PUSH
14691: LD_INT 1000
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: PPUSH
14710: CALL_OW 70
14714: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14715: LD_VAR 0 6
14719: NOT
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_VAR 0 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 25
14735: PUSH
14736: LD_INT 2
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 24
14745: PUSH
14746: LD_INT 250
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 69
14762: NOT
14763: AND
14764: IFFALSE 14768
// exit ;
14766: GO 14950
// if buildings_list > 0 and engineerOkInside then
14768: LD_VAR 0 6
14772: PUSH
14773: LD_INT 0
14775: GREATER
14776: PUSH
14777: LD_VAR 0 8
14781: AND
14782: IFFALSE 14793
// ComExitBuilding ( engineerOkInside ) ;
14784: LD_VAR 0 8
14788: PPUSH
14789: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14793: LD_VAR 0 6
14797: PUSH
14798: LD_INT 0
14800: GREATER
14801: PUSH
14802: LD_VAR 0 9
14806: PUSH
14807: LD_INT 0
14809: GREATER
14810: AND
14811: IFFALSE 14831
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14813: LD_VAR 0 9
14817: PPUSH
14818: LD_VAR 0 6
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PPUSH
14827: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14831: LD_VAR 0 6
14835: PUSH
14836: LD_INT 0
14838: EQUAL
14839: PUSH
14840: LD_VAR 0 4
14844: PUSH
14845: LD_INT 0
14847: EQUAL
14848: AND
14849: PUSH
14850: LD_VAR 0 9
14854: PUSH
14855: LD_INT 0
14857: GREATER
14858: AND
14859: IFFALSE 14875
// ComEnterUnit ( engineerOkOutside , building ) ;
14861: LD_VAR 0 9
14865: PPUSH
14866: LD_VAR 0 2
14870: PPUSH
14871: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14875: LD_VAR 0 9
14879: PUSH
14880: LD_INT 0
14882: GREATER
14883: PUSH
14884: LD_VAR 0 6
14888: PUSH
14889: LD_INT 0
14891: EQUAL
14892: AND
14893: PUSH
14894: LD_VAR 0 4
14898: PUSH
14899: LD_INT 0
14901: GREATER
14902: AND
14903: IFFALSE 14950
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14905: LD_VAR 0 9
14909: PPUSH
14910: LD_VAR 0 4
14914: PUSH
14915: LD_INT 1
14917: ARRAY
14918: PPUSH
14919: LD_VAR 0 4
14923: PUSH
14924: LD_INT 2
14926: ARRAY
14927: PPUSH
14928: LD_VAR 0 4
14932: PUSH
14933: LD_INT 3
14935: ARRAY
14936: PPUSH
14937: LD_VAR 0 4
14941: PUSH
14942: LD_INT 4
14944: ARRAY
14945: PPUSH
14946: CALL_OW 145
// end ;
14950: LD_VAR 0 5
14954: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14955: LD_INT 0
14957: PPUSH
14958: PPUSH
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
14965: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14966: LD_ADDR_VAR 0 6
14970: PUSH
14971: LD_INT 22
14973: PUSH
14974: LD_VAR 0 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 25
14985: PUSH
14986: LD_INT 4
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 24
14995: PUSH
14996: LD_INT 251
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: PUSH
15013: LD_EXP 35
15017: PUSH
15018: EMPTY
15019: LIST
15020: DIFF
15021: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
15022: LD_ADDR_VAR 0 7
15026: PUSH
15027: LD_VAR 0 3
15031: PPUSH
15032: LD_INT 22
15034: PUSH
15035: LD_VAR 0 1
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 25
15046: PUSH
15047: LD_INT 4
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 50
15056: PUSH
15057: EMPTY
15058: LIST
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: LIST
15064: PPUSH
15065: CALL_OW 70
15069: PUSH
15070: LD_EXP 35
15074: PUSH
15075: EMPTY
15076: LIST
15077: DIFF
15078: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15079: LD_ADDR_VAR 0 10
15083: PUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: LD_INT 22
15091: PUSH
15092: LD_VAR 0 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 3
15113: PUSH
15114: LD_INT 24
15116: PUSH
15117: LD_INT 750
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: PPUSH
15133: CALL_OW 70
15137: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15138: LD_ADDR_VAR 0 11
15142: PUSH
15143: LD_VAR 0 2
15147: PPUSH
15148: LD_INT 22
15150: PUSH
15151: LD_VAR 0 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 21
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 24
15175: PUSH
15176: LD_INT 1000
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 70
15196: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
15197: LD_VAR 0 10
15201: PUSH
15202: LD_INT 0
15204: GREATER
15205: PUSH
15206: LD_VAR 0 6
15210: PUSH
15211: LD_INT 0
15213: GREATER
15214: AND
15215: IFFALSE 15231
// ComMoveToArea ( damageUnits , healArea ) ;
15217: LD_VAR 0 10
15221: PPUSH
15222: LD_VAR 0 2
15226: PPUSH
15227: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
15231: LD_VAR 0 11
15235: PUSH
15236: LD_INT 0
15238: GREATER
15239: PUSH
15240: LD_VAR 0 7
15244: PUSH
15245: LD_INT 0
15247: GREATER
15248: AND
15249: IFFALSE 15269
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15251: LD_VAR 0 7
15255: PPUSH
15256: LD_VAR 0 11
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15269: LD_VAR 0 10
15273: PUSH
15274: LD_INT 0
15276: EQUAL
15277: PUSH
15278: LD_VAR 0 11
15282: PUSH
15283: LD_INT 0
15285: EQUAL
15286: AND
15287: PUSH
15288: LD_VAR 0 7
15292: PUSH
15293: LD_INT 0
15295: GREATER
15296: AND
15297: IFFALSE 15402
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15299: LD_ADDR_VAR 0 12
15303: PUSH
15304: LD_INT 22
15306: PUSH
15307: LD_VAR 0 1
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 21
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 8
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15346: LD_ADDR_VAR 0 13
15350: PUSH
15351: LD_INT 1
15353: PPUSH
15354: LD_VAR 0 12
15358: PPUSH
15359: CALL_OW 12
15363: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15364: LD_VAR 0 7
15368: PPUSH
15369: LD_INT 3
15371: PUSH
15372: LD_INT 60
15374: PUSH
15375: EMPTY
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 72
15386: PPUSH
15387: LD_VAR 0 12
15391: PUSH
15392: LD_VAR 0 13
15396: ARRAY
15397: PPUSH
15398: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15402: LD_VAR 0 3
15406: PPUSH
15407: LD_INT 22
15409: PUSH
15410: LD_VAR 0 1
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 25
15421: PUSH
15422: LD_INT 3
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 24
15431: PUSH
15432: LD_INT 751
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 70
15448: PUSH
15449: LD_INT 0
15451: GREATER
15452: PUSH
15453: LD_INT 21
15455: PPUSH
15456: CALL_OW 302
15460: AND
15461: PUSH
15462: LD_INT 21
15464: PPUSH
15465: CALL_OW 255
15469: PUSH
15470: LD_INT 3
15472: EQUAL
15473: AND
15474: IFFALSE 15530
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15476: LD_VAR 0 3
15480: PPUSH
15481: LD_INT 22
15483: PUSH
15484: LD_VAR 0 1
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 25
15495: PUSH
15496: LD_INT 3
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 24
15505: PUSH
15506: LD_INT 751
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: PPUSH
15518: CALL_OW 70
15522: PPUSH
15523: LD_INT 21
15525: PPUSH
15526: CALL_OW 120
// end ;
15530: LD_VAR 0 5
15534: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15535: LD_INT 0
15537: PPUSH
15538: PPUSH
15539: PPUSH
15540: PPUSH
15541: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15542: LD_ADDR_VAR 0 6
15546: PUSH
15547: LD_INT 22
15549: PUSH
15550: LD_VAR 0 1
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 2
15561: PUSH
15562: LD_INT 30
15564: PUSH
15565: LD_INT 31
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 30
15574: PUSH
15575: LD_INT 32
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 30
15584: PUSH
15585: LD_INT 33
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 30
15594: PUSH
15595: LD_INT 4
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 30
15604: PUSH
15605: LD_INT 5
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 69
15628: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15629: LD_ADDR_VAR 0 7
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_VAR 0 2
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 21
15648: PUSH
15649: LD_INT 3
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 58
15658: PUSH
15659: EMPTY
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: PPUSH
15667: CALL_OW 69
15671: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15672: LD_VAR 0 6
15676: PUSH
15677: LD_INT 0
15679: GREATER
15680: PUSH
15681: LD_VAR 0 7
15685: PUSH
15686: LD_INT 0
15688: GREATER
15689: AND
15690: IFFALSE 15760
// begin for i in turretsList do
15692: LD_ADDR_VAR 0 4
15696: PUSH
15697: LD_VAR 0 6
15701: PUSH
15702: FOR_IN
15703: IFFALSE 15758
// begin for j in enemyBuildings do
15705: LD_ADDR_VAR 0 5
15709: PUSH
15710: LD_VAR 0 7
15714: PUSH
15715: FOR_IN
15716: IFFALSE 15754
// begin if GetDistUnits ( i , j ) < 20 then
15718: LD_VAR 0 4
15722: PPUSH
15723: LD_VAR 0 5
15727: PPUSH
15728: CALL_OW 296
15732: PUSH
15733: LD_INT 20
15735: LESS
15736: IFFALSE 15752
// begin ComAttackUnit ( i , j ) ;
15738: LD_VAR 0 4
15742: PPUSH
15743: LD_VAR 0 5
15747: PPUSH
15748: CALL_OW 115
// end ; end ;
15752: GO 15715
15754: POP
15755: POP
// end ;
15756: GO 15702
15758: POP
15759: POP
// end ; end ;
15760: LD_VAR 0 3
15764: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
15772: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15773: LD_ADDR_VAR 0 7
15777: PUSH
15778: LD_VAR 0 2
15782: PPUSH
15783: LD_INT 22
15785: PUSH
15786: LD_VAR 0 1
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 21
15797: PUSH
15798: LD_INT 2
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 34
15807: PUSH
15808: LD_INT 52
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: LIST
15819: PPUSH
15820: CALL_OW 70
15824: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15825: LD_ADDR_VAR 0 8
15829: PUSH
15830: LD_VAR 0 2
15834: PPUSH
15835: LD_INT 22
15837: PUSH
15838: LD_VAR 0 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 21
15849: PUSH
15850: LD_INT 3
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: LD_INT 24
15862: PUSH
15863: LD_INT 1000
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: LIST
15878: PUSH
15879: EMPTY
15880: LIST
15881: PPUSH
15882: CALL_OW 70
15886: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15887: LD_VAR 0 8
15891: PUSH
15892: LD_INT 0
15894: GREATER
15895: PUSH
15896: LD_VAR 0 7
15900: PPUSH
15901: LD_INT 24
15903: PUSH
15904: LD_INT 750
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PPUSH
15911: CALL_OW 72
15915: PUSH
15916: LD_INT 0
15918: GREATER
15919: AND
15920: IFFALSE 15940
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15922: LD_VAR 0 7
15926: PPUSH
15927: LD_VAR 0 8
15931: PUSH
15932: LD_INT 1
15934: ARRAY
15935: PPUSH
15936: CALL_OW 130
// end ;
15940: LD_VAR 0 3
15944: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15945: LD_INT 0
15947: PPUSH
15948: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15949: LD_INT 22
15951: PUSH
15952: LD_VAR 0 1
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 21
15963: PUSH
15964: LD_INT 2
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PPUSH
15975: CALL_OW 69
15979: PUSH
15980: LD_INT 18
15982: PPUSH
15983: LD_INT 22
15985: PUSH
15986: LD_VAR 0 1
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 21
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 70
16013: PUSH
16014: LD_VAR 0 3
16018: LESSEQUAL
16019: DIFF
16020: IFFALSE 16087
// for i = 1 to vehCount do
16022: LD_ADDR_VAR 0 9
16026: PUSH
16027: DOUBLE
16028: LD_INT 1
16030: DEC
16031: ST_TO_ADDR
16032: LD_VAR 0 3
16036: PUSH
16037: FOR_TO
16038: IFFALSE 16085
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
16040: LD_VAR 0 2
16044: PPUSH
16045: LD_VAR 0 7
16049: PPUSH
16050: LD_VAR 0 5
16054: PPUSH
16055: LD_VAR 0 6
16059: PPUSH
16060: LD_VAR 0 4
16064: PUSH
16065: LD_INT 1
16067: PPUSH
16068: LD_VAR 0 4
16072: PPUSH
16073: CALL_OW 12
16077: ARRAY
16078: PPUSH
16079: CALL_OW 185
16083: GO 16037
16085: POP
16086: POP
// end ;
16087: LD_VAR 0 8
16091: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
16092: LD_INT 0
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
16098: PPUSH
16099: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16100: LD_EXP 40
16104: PUSH
16105: LD_INT 3
16107: PUSH
16108: LD_INT 4
16110: PUSH
16111: LD_INT 4
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: LIST
16118: PUSH
16119: LD_OWVAR 67
16123: ARRAY
16124: GREATEREQUAL
16125: PUSH
16126: LD_EXP 41
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: LD_INT 2
16136: PUSH
16137: LD_INT 2
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: LIST
16144: PUSH
16145: LD_OWVAR 67
16149: ARRAY
16150: GREATEREQUAL
16151: AND
16152: IFFALSE 16385
// begin repeat wait ( 0 0$3 ) ;
16154: LD_INT 105
16156: PPUSH
16157: CALL_OW 67
// for j in russianTanks do
16161: LD_ADDR_VAR 0 4
16165: PUSH
16166: LD_EXP 40
16170: PUSH
16171: FOR_IN
16172: IFFALSE 16373
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
16174: LD_ADDR_VAR 0 6
16178: PUSH
16179: LD_INT 81
16181: PUSH
16182: LD_VAR 0 1
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 101
16193: PUSH
16194: LD_INT 1
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PPUSH
16205: CALL_OW 69
16209: PPUSH
16210: LD_VAR 0 4
16214: PPUSH
16215: CALL_OW 74
16219: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
16220: LD_ADDR_VAR 0 7
16224: PUSH
16225: LD_INT 81
16227: PUSH
16228: LD_VAR 0 1
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 101
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 2
16249: PUSH
16250: LD_INT 59
16252: PUSH
16253: EMPTY
16254: LIST
16255: PUSH
16256: LD_INT 21
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 21
16268: PUSH
16269: LD_INT 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: PPUSH
16290: CALL_OW 69
16294: PPUSH
16295: LD_VAR 0 4
16299: PPUSH
16300: CALL_OW 74
16304: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16305: LD_VAR 0 4
16309: PPUSH
16310: LD_VAR 0 6
16314: PPUSH
16315: CALL_OW 296
16319: PUSH
16320: LD_INT 8
16322: PLUS
16323: PUSH
16324: LD_VAR 0 4
16328: PPUSH
16329: LD_VAR 0 7
16333: PPUSH
16334: CALL_OW 296
16338: LESS
16339: IFFALSE 16357
// ComAttackUnit ( j , target1 ) else
16341: LD_VAR 0 4
16345: PPUSH
16346: LD_VAR 0 6
16350: PPUSH
16351: CALL_OW 115
16355: GO 16371
// ComAttackUnit ( j , target2 ) ;
16357: LD_VAR 0 4
16361: PPUSH
16362: LD_VAR 0 7
16366: PPUSH
16367: CALL_OW 115
// end ;
16371: GO 16171
16373: POP
16374: POP
// until russianTanks = 0 ;
16375: LD_EXP 40
16379: PUSH
16380: LD_INT 0
16382: EQUAL
16383: IFFALSE 16154
// end ; end ;
16385: LD_VAR 0 2
16389: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16390: LD_INT 0
16392: PPUSH
16393: PPUSH
16394: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16395: LD_EXP 40
16399: PUSH
16400: LD_INT 1
16402: GREATEREQUAL
16403: PUSH
16404: LD_EXP 41
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: PUSH
16423: LD_OWVAR 67
16427: ARRAY
16428: GREATEREQUAL
16429: AND
16430: IFFALSE 16546
// repeat wait ( 0 0$3 ) ;
16432: LD_INT 105
16434: PPUSH
16435: CALL_OW 67
// if russianTimeLapsers > 0 then
16439: LD_EXP 41
16443: PUSH
16444: LD_INT 0
16446: GREATER
16447: IFFALSE 16536
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16449: LD_ADDR_VAR 0 3
16453: PUSH
16454: LD_EXP 41
16458: PPUSH
16459: LD_INT 3
16461: PUSH
16462: LD_INT 60
16464: PUSH
16465: EMPTY
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PPUSH
16472: CALL_OW 72
16476: PUSH
16477: FOR_IN
16478: IFFALSE 16534
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , j ) ;
16480: LD_ADDR_VAR 0 4
16484: PUSH
16485: LD_INT 81
16487: PUSH
16488: LD_VAR 0 1
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PPUSH
16502: LD_VAR 0 3
16506: PPUSH
16507: CALL_OW 74
16511: ST_TO_ADDR
// if nearUnit then
16512: LD_VAR 0 4
16516: IFFALSE 16532
// ComMoveUnit ( j , nearUnit ) ;
16518: LD_VAR 0 3
16522: PPUSH
16523: LD_VAR 0 4
16527: PPUSH
16528: CALL_OW 112
// end ;
16532: GO 16477
16534: POP
16535: POP
// until russianTimeLapsers = 0 ;
16536: LD_EXP 41
16540: PUSH
16541: LD_INT 0
16543: EQUAL
16544: IFFALSE 16432
// end ;
16546: LD_VAR 0 2
16550: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16551: LD_INT 0
16553: PPUSH
16554: PPUSH
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16559: LD_ADDR_VAR 0 6
16563: PUSH
16564: LD_INT 22
16566: PUSH
16567: LD_VAR 0 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 25
16578: PUSH
16579: LD_INT 9
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16595: LD_ADDR_VAR 0 7
16599: PUSH
16600: LD_INT 81
16602: PUSH
16603: LD_VAR 0 1
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 3
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16638: LD_ADDR_VAR 0 4
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ST_TO_ADDR
// for i = 1 to list do
16654: LD_ADDR_VAR 0 5
16658: PUSH
16659: DOUBLE
16660: LD_INT 1
16662: DEC
16663: ST_TO_ADDR
16664: LD_VAR 0 6
16668: PUSH
16669: FOR_TO
16670: IFFALSE 16872
// for ta in filter do
16672: LD_ADDR_VAR 0 3
16676: PUSH
16677: LD_VAR 0 7
16681: PUSH
16682: FOR_IN
16683: IFFALSE 16868
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16685: LD_VAR 0 6
16689: PUSH
16690: LD_VAR 0 5
16694: ARRAY
16695: PPUSH
16696: LD_VAR 0 3
16700: PPUSH
16701: CALL_OW 296
16705: PUSH
16706: LD_INT 15
16708: LESSEQUAL
16709: IFFALSE 16866
// begin case c of 1 :
16711: LD_VAR 0 4
16715: PUSH
16716: LD_INT 1
16718: DOUBLE
16719: EQUAL
16720: IFTRUE 16724
16722: GO 16762
16724: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16725: LD_VAR 0 6
16729: PUSH
16730: LD_VAR 0 5
16734: ARRAY
16735: PPUSH
16736: LD_VAR 0 3
16740: PPUSH
16741: CALL_OW 250
16745: PPUSH
16746: LD_VAR 0 3
16750: PPUSH
16751: CALL_OW 251
16755: PPUSH
16756: CALL_OW 154
16760: GO 16866
16762: LD_INT 2
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16834
16770: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16771: LD_VAR 0 6
16775: PUSH
16776: LD_VAR 0 5
16780: ARRAY
16781: PPUSH
16782: LD_VAR 0 3
16786: PPUSH
16787: CALL_OW 250
16791: PUSH
16792: LD_INT 1
16794: NEG
16795: PPUSH
16796: LD_INT 1
16798: PPUSH
16799: CALL_OW 12
16803: PLUS
16804: PPUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: CALL_OW 251
16814: PUSH
16815: LD_INT 1
16817: NEG
16818: PPUSH
16819: LD_INT 1
16821: PPUSH
16822: CALL_OW 12
16826: PLUS
16827: PPUSH
16828: CALL_OW 153
16832: GO 16866
16834: LD_INT 3
16836: DOUBLE
16837: EQUAL
16838: IFTRUE 16842
16840: GO 16865
16842: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16843: LD_VAR 0 6
16847: PUSH
16848: LD_VAR 0 5
16852: ARRAY
16853: PPUSH
16854: LD_VAR 0 3
16858: PPUSH
16859: CALL_OW 115
16863: GO 16866
16865: POP
// end ; end ;
16866: GO 16682
16868: POP
16869: POP
16870: GO 16669
16872: POP
16873: POP
// end ;
16874: LD_VAR 0 2
16878: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16879: LD_INT 0
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
// r := 100 ;
16885: LD_ADDR_VAR 0 5
16889: PUSH
16890: LD_INT 100
16892: ST_TO_ADDR
// x := 0 ;
16893: LD_ADDR_VAR 0 6
16897: PUSH
16898: LD_INT 0
16900: ST_TO_ADDR
// while ( x < n ) do
16901: LD_VAR 0 6
16905: PUSH
16906: LD_VAR 0 2
16910: LESS
16911: IFFALSE 17198
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16913: LD_ADDR_VAR 0 4
16917: PUSH
16918: DOUBLE
16919: LD_INT 1
16921: DEC
16922: ST_TO_ADDR
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_INT 0
16930: PPUSH
16931: CALL_OW 517
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PUSH
16940: FOR_TO
16941: IFFALSE 17194
// begin if r > 50 then
16943: LD_VAR 0 5
16947: PUSH
16948: LD_INT 50
16950: GREATER
16951: IFFALSE 17170
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16953: LD_VAR 0 1
16957: PPUSH
16958: LD_INT 0
16960: PPUSH
16961: CALL_OW 517
16965: PUSH
16966: LD_INT 1
16968: ARRAY
16969: PUSH
16970: LD_VAR 0 4
16974: ARRAY
16975: PPUSH
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 0
16983: PPUSH
16984: CALL_OW 517
16988: PUSH
16989: LD_INT 2
16991: ARRAY
16992: PUSH
16993: LD_VAR 0 4
16997: ARRAY
16998: PPUSH
16999: CALL_OW 458
17003: NOT
17004: IFFALSE 17154
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
17006: LD_VAR 0 1
17010: PPUSH
17011: LD_INT 0
17013: PPUSH
17014: CALL_OW 517
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PUSH
17023: LD_VAR 0 4
17027: ARRAY
17028: PPUSH
17029: LD_VAR 0 1
17033: PPUSH
17034: LD_INT 0
17036: PPUSH
17037: CALL_OW 517
17041: PUSH
17042: LD_INT 2
17044: ARRAY
17045: PUSH
17046: LD_VAR 0 4
17050: ARRAY
17051: PPUSH
17052: LD_INT 8
17054: PPUSH
17055: LD_INT 0
17057: PPUSH
17058: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
17062: LD_ADDR_EXP 45
17066: PUSH
17067: LD_EXP 45
17071: PPUSH
17072: LD_INT 1
17074: PPUSH
17075: LD_VAR 0 1
17079: PPUSH
17080: LD_INT 0
17082: PPUSH
17083: CALL_OW 517
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PUSH
17092: LD_VAR 0 4
17096: ARRAY
17097: PUSH
17098: LD_VAR 0 1
17102: PPUSH
17103: LD_INT 0
17105: PPUSH
17106: CALL_OW 517
17110: PUSH
17111: LD_INT 2
17113: ARRAY
17114: PUSH
17115: LD_VAR 0 4
17119: ARRAY
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PPUSH
17125: CALL_OW 2
17129: ST_TO_ADDR
// r := 0 ;
17130: LD_ADDR_VAR 0 5
17134: PUSH
17135: LD_INT 0
17137: ST_TO_ADDR
// x := x + 1 ;
17138: LD_ADDR_VAR 0 6
17142: PUSH
17143: LD_VAR 0 6
17147: PUSH
17148: LD_INT 1
17150: PLUS
17151: ST_TO_ADDR
// end else
17152: GO 17168
// r := r + 35 ;
17154: LD_ADDR_VAR 0 5
17158: PUSH
17159: LD_VAR 0 5
17163: PUSH
17164: LD_INT 35
17166: PLUS
17167: ST_TO_ADDR
// end else
17168: GO 17192
// r := r + rand ( 10 , 25 ) ;
17170: LD_ADDR_VAR 0 5
17174: PUSH
17175: LD_VAR 0 5
17179: PUSH
17180: LD_INT 10
17182: PPUSH
17183: LD_INT 25
17185: PPUSH
17186: CALL_OW 12
17190: PLUS
17191: ST_TO_ADDR
// end ;
17192: GO 16940
17194: POP
17195: POP
17196: GO 16901
// end ;
17198: LD_VAR 0 3
17202: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17203: LD_INT 0
17205: PPUSH
17206: PPUSH
17207: PPUSH
17208: PPUSH
// tmpTab = [ ] ;
17209: LD_ADDR_VAR 0 6
17213: PUSH
17214: EMPTY
17215: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17216: LD_INT 22
17218: PUSH
17219: LD_VAR 0 1
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 30
17230: PUSH
17231: LD_INT 32
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PPUSH
17242: CALL_OW 69
17246: PUSH
17247: LD_INT 0
17249: GREATER
17250: IFFALSE 17333
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17252: LD_ADDR_VAR 0 4
17256: PUSH
17257: LD_INT 22
17259: PUSH
17260: LD_VAR 0 1
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 30
17271: PUSH
17272: LD_INT 32
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PPUSH
17283: CALL_OW 69
17287: PUSH
17288: FOR_IN
17289: IFFALSE 17331
// begin for j in UnitsInside ( i ) do
17291: LD_ADDR_VAR 0 5
17295: PUSH
17296: LD_VAR 0 4
17300: PPUSH
17301: CALL_OW 313
17305: PUSH
17306: FOR_IN
17307: IFFALSE 17327
// tmpTab = tmpTab ^ j ;
17309: LD_ADDR_VAR 0 6
17313: PUSH
17314: LD_VAR 0 6
17318: PUSH
17319: LD_VAR 0 5
17323: ADD
17324: ST_TO_ADDR
17325: GO 17306
17327: POP
17328: POP
// end ;
17329: GO 17288
17331: POP
17332: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17333: LD_VAR 0 6
17337: PPUSH
17338: LD_VAR 0 2
17342: PPUSH
17343: CALL_OW 250
17347: PPUSH
17348: LD_VAR 0 2
17352: PPUSH
17353: CALL_OW 251
17357: PPUSH
17358: CALL_OW 114
// end ;
17362: LD_VAR 0 3
17366: RET
// export function PrepareNature ; var i , un ; begin
17367: LD_INT 0
17369: PPUSH
17370: PPUSH
17371: PPUSH
// uc_side := 0 ;
17372: LD_ADDR_OWVAR 20
17376: PUSH
17377: LD_INT 0
17379: ST_TO_ADDR
// uc_nation := 0 ;
17380: LD_ADDR_OWVAR 21
17384: PUSH
17385: LD_INT 0
17387: ST_TO_ADDR
// InitHc ;
17388: CALL_OW 19
// hc_class := class_fish ;
17392: LD_ADDR_OWVAR 28
17396: PUSH
17397: LD_INT 20
17399: ST_TO_ADDR
// for i = 1 to 6 do
17400: LD_ADDR_VAR 0 2
17404: PUSH
17405: DOUBLE
17406: LD_INT 1
17408: DEC
17409: ST_TO_ADDR
17410: LD_INT 6
17412: PUSH
17413: FOR_TO
17414: IFFALSE 17433
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17416: CALL_OW 44
17420: PPUSH
17421: LD_INT 23
17423: PPUSH
17424: LD_INT 0
17426: PPUSH
17427: CALL_OW 49
17431: GO 17413
17433: POP
17434: POP
// for i = 1 to Difficulty + 2 do
17435: LD_ADDR_VAR 0 2
17439: PUSH
17440: DOUBLE
17441: LD_INT 1
17443: DEC
17444: ST_TO_ADDR
17445: LD_OWVAR 67
17449: PUSH
17450: LD_INT 2
17452: PLUS
17453: PUSH
17454: FOR_TO
17455: IFFALSE 17564
// begin hc_sex = sex_male ;
17457: LD_ADDR_OWVAR 27
17461: PUSH
17462: LD_INT 1
17464: ST_TO_ADDR
// uc_side = 0 ;
17465: LD_ADDR_OWVAR 20
17469: PUSH
17470: LD_INT 0
17472: ST_TO_ADDR
// uc_nation = nation_nature ;
17473: LD_ADDR_OWVAR 21
17477: PUSH
17478: LD_INT 0
17480: ST_TO_ADDR
// hc_class = class_tiger ;
17481: LD_ADDR_OWVAR 28
17485: PUSH
17486: LD_INT 14
17488: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17489: LD_ADDR_OWVAR 31
17493: PUSH
17494: LD_EXP 38
17498: PUSH
17499: LD_INT 0
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17514: LD_ADDR_OWVAR 35
17518: PUSH
17519: LD_INT 5
17521: NEG
17522: PPUSH
17523: LD_INT 5
17525: PPUSH
17526: CALL_OW 12
17530: PUSH
17531: LD_OWVAR 67
17535: MUL
17536: ST_TO_ADDR
// un = CreateHuman ;
17537: LD_ADDR_VAR 0 3
17541: PUSH
17542: CALL_OW 44
17546: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17547: LD_VAR 0 3
17551: PPUSH
17552: LD_INT 24
17554: PPUSH
17555: LD_INT 0
17557: PPUSH
17558: CALL_OW 49
// end ;
17562: GO 17454
17564: POP
17565: POP
// for i = 1 to rand ( 3 , 4 ) do
17566: LD_ADDR_VAR 0 2
17570: PUSH
17571: DOUBLE
17572: LD_INT 1
17574: DEC
17575: ST_TO_ADDR
17576: LD_INT 3
17578: PPUSH
17579: LD_INT 4
17581: PPUSH
17582: CALL_OW 12
17586: PUSH
17587: FOR_TO
17588: IFFALSE 17680
// begin hc_sex = sex_male ;
17590: LD_ADDR_OWVAR 27
17594: PUSH
17595: LD_INT 1
17597: ST_TO_ADDR
// uc_side = 0 ;
17598: LD_ADDR_OWVAR 20
17602: PUSH
17603: LD_INT 0
17605: ST_TO_ADDR
// uc_nation = nation_nature ;
17606: LD_ADDR_OWVAR 21
17610: PUSH
17611: LD_INT 0
17613: ST_TO_ADDR
// hc_class = 18 ;
17614: LD_ADDR_OWVAR 28
17618: PUSH
17619: LD_INT 18
17621: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17622: LD_ADDR_OWVAR 31
17626: PUSH
17627: LD_INT 0
17629: PUSH
17630: LD_INT 0
17632: PUSH
17633: LD_INT 0
17635: PUSH
17636: LD_INT 0
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: ST_TO_ADDR
// hc_agressivity = 0 ;
17645: LD_ADDR_OWVAR 35
17649: PUSH
17650: LD_INT 0
17652: ST_TO_ADDR
// un = CreateHuman ;
17653: LD_ADDR_VAR 0 3
17657: PUSH
17658: CALL_OW 44
17662: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17663: LD_VAR 0 3
17667: PPUSH
17668: LD_INT 24
17670: PPUSH
17671: LD_INT 0
17673: PPUSH
17674: CALL_OW 49
// end ;
17678: GO 17587
17680: POP
17681: POP
// for i = 1 to rand ( 1 , 3 ) do
17682: LD_ADDR_VAR 0 2
17686: PUSH
17687: DOUBLE
17688: LD_INT 1
17690: DEC
17691: ST_TO_ADDR
17692: LD_INT 1
17694: PPUSH
17695: LD_INT 3
17697: PPUSH
17698: CALL_OW 12
17702: PUSH
17703: FOR_TO
17704: IFFALSE 17852
// begin hc_sex = sex_male ;
17706: LD_ADDR_OWVAR 27
17710: PUSH
17711: LD_INT 1
17713: ST_TO_ADDR
// uc_side = 0 ;
17714: LD_ADDR_OWVAR 20
17718: PUSH
17719: LD_INT 0
17721: ST_TO_ADDR
// uc_nation = nation_nature ;
17722: LD_ADDR_OWVAR 21
17726: PUSH
17727: LD_INT 0
17729: ST_TO_ADDR
// hc_class = class_apeman ;
17730: LD_ADDR_OWVAR 28
17734: PUSH
17735: LD_INT 12
17737: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17738: LD_ADDR_OWVAR 31
17742: PUSH
17743: LD_EXP 37
17747: PPUSH
17748: LD_EXP 38
17752: PPUSH
17753: CALL_OW 12
17757: PUSH
17758: LD_EXP 37
17762: PPUSH
17763: LD_EXP 38
17767: PPUSH
17768: CALL_OW 12
17772: PUSH
17773: LD_EXP 37
17777: PPUSH
17778: LD_EXP 38
17782: PPUSH
17783: CALL_OW 12
17787: PUSH
17788: LD_EXP 37
17792: PPUSH
17793: LD_EXP 38
17797: PPUSH
17798: CALL_OW 12
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17809: LD_ADDR_OWVAR 35
17813: PUSH
17814: LD_INT 1
17816: PPUSH
17817: LD_INT 20
17819: PPUSH
17820: CALL_OW 12
17824: ST_TO_ADDR
// un = CreateHuman ;
17825: LD_ADDR_VAR 0 3
17829: PUSH
17830: CALL_OW 44
17834: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17835: LD_VAR 0 3
17839: PPUSH
17840: LD_INT 24
17842: PPUSH
17843: LD_INT 0
17845: PPUSH
17846: CALL_OW 49
// end ;
17850: GO 17703
17852: POP
17853: POP
// end ; end_of_file
17854: LD_VAR 0 1
17858: RET
// on UnitDestroyed ( unit ) do var i ;
17859: LD_INT 0
17861: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL_OW 255
17871: PUSH
17872: LD_INT 3
17874: EQUAL
17875: PUSH
17876: LD_VAR 0 1
17880: PPUSH
17881: CALL_OW 247
17885: PUSH
17886: LD_INT 1
17888: EQUAL
17889: AND
17890: IFFALSE 17954
// begin for i in RuScientists do
17892: LD_ADDR_VAR 0 2
17896: PUSH
17897: LD_EXP 35
17901: PUSH
17902: FOR_IN
17903: IFFALSE 17952
// if i = unit then
17905: LD_VAR 0 2
17909: PUSH
17910: LD_VAR 0 1
17914: EQUAL
17915: IFFALSE 17950
// begin RuScientists = RuScientists diff [ unit ] ;
17917: LD_ADDR_EXP 35
17921: PUSH
17922: LD_EXP 35
17926: PUSH
17927: LD_VAR 0 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: DIFF
17935: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17936: LD_ADDR_EXP 36
17940: PUSH
17941: LD_EXP 36
17945: PUSH
17946: LD_INT 1
17948: PLUS
17949: ST_TO_ADDR
// end ;
17950: GO 17902
17952: POP
17953: POP
// end ; end ;
17954: PPOPN 2
17956: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17957: LD_VAR 0 1
17961: PUSH
17962: LD_INT 10
17964: EQUAL
17965: PUSH
17966: LD_VAR 0 2
17970: PPUSH
17971: CALL_OW 255
17975: PUSH
17976: LD_INT 1
17978: EQUAL
17979: AND
17980: PUSH
17981: LD_EXP 48
17985: PUSH
17986: LD_INT 0
17988: EQUAL
17989: AND
17990: IFFALSE 18102
// begin eventVar1 = 1 ;
17992: LD_ADDR_EXP 48
17996: PUSH
17997: LD_INT 1
17999: ST_TO_ADDR
// teleportExplored = 1 ;
18000: LD_ADDR_EXP 34
18004: PUSH
18005: LD_INT 1
18007: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
18008: LD_STRING M2a
18010: PPUSH
18011: CALL_OW 337
// wait ( 0 0$2 ) ;
18015: LD_INT 70
18017: PPUSH
18018: CALL_OW 67
// DialogueOn ;
18022: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
18026: LD_INT 22
18028: PUSH
18029: LD_INT 1
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 21
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 69
18054: PPUSH
18055: LD_STRING DT3a-Sol1-1
18057: PPUSH
18058: LD_STRING DT3a-FSol1-1
18060: PPUSH
18061: CALL 13595 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
18065: LD_EXP 1
18069: PPUSH
18070: LD_STRING DT3a-JMM-1
18072: PPUSH
18073: CALL_OW 88
// CenterNowOnUnits ( human ) ;
18077: LD_VAR 0 2
18081: PPUSH
18082: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
18086: LD_EXP 1
18090: PPUSH
18091: LD_STRING DT3a-JMM-1a
18093: PPUSH
18094: CALL_OW 88
// DialogueOff ;
18098: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
18102: LD_VAR 0 1
18106: PUSH
18107: LD_INT 10
18109: EQUAL
18110: PUSH
18111: LD_VAR 0 2
18115: PPUSH
18116: CALL_OW 247
18120: PUSH
18121: LD_INT 2
18123: EQUAL
18124: AND
18125: PUSH
18126: LD_VAR 0 2
18130: PPUSH
18131: CALL_OW 255
18135: PUSH
18136: LD_INT 3
18138: EQUAL
18139: AND
18140: PUSH
18141: LD_EXP 29
18145: PUSH
18146: LD_INT 0
18148: EQUAL
18149: AND
18150: IFFALSE 18167
// begin wait ( 0 0$3 ) ;
18152: LD_INT 105
18154: PPUSH
18155: CALL_OW 67
// vehicleTeleported = 1 ;
18159: LD_ADDR_EXP 29
18163: PUSH
18164: LD_INT 1
18166: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
18167: LD_VAR 0 1
18171: PUSH
18172: LD_INT 10
18174: EQUAL
18175: PUSH
18176: LD_VAR 0 2
18180: PPUSH
18181: CALL_OW 247
18185: PUSH
18186: LD_INT 2
18188: EQUAL
18189: AND
18190: PUSH
18191: LD_VAR 0 2
18195: PPUSH
18196: CALL_OW 255
18200: PUSH
18201: LD_INT 3
18203: EQUAL
18204: AND
18205: PUSH
18206: LD_EXP 29
18210: PUSH
18211: LD_INT 2
18213: EQUAL
18214: AND
18215: IFFALSE 18232
// begin wait ( 0 0$3 ) ;
18217: LD_INT 105
18219: PPUSH
18220: CALL_OW 67
// vehicleTeleported = 3 ;
18224: LD_ADDR_EXP 29
18228: PUSH
18229: LD_INT 3
18231: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18232: LD_VAR 0 1
18236: PUSH
18237: LD_INT 10
18239: EQUAL
18240: PUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: CALL_OW 247
18250: PUSH
18251: LD_INT 2
18253: EQUAL
18254: AND
18255: PUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 255
18265: PUSH
18266: LD_INT 3
18268: EQUAL
18269: AND
18270: IFFALSE 18286
// tpCounter = tpCounter + 1 ;
18272: LD_ADDR_EXP 30
18276: PUSH
18277: LD_EXP 30
18281: PUSH
18282: LD_INT 1
18284: PLUS
18285: ST_TO_ADDR
// end ;
18286: PPOPN 2
18288: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18289: LD_VAR 0 2
18293: PUSH
18294: LD_INT 21
18296: EQUAL
18297: PUSH
18298: LD_VAR 0 2
18302: PUSH
18303: LD_INT 112
18305: EQUAL
18306: OR
18307: IFFALSE 18485
// if GetSide ( vehicle ) = 3 then
18309: LD_VAR 0 1
18313: PPUSH
18314: CALL_OW 255
18318: PUSH
18319: LD_INT 3
18321: EQUAL
18322: IFFALSE 18485
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 264
18333: PUSH
18334: LD_INT 46
18336: EQUAL
18337: PUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 264
18347: PUSH
18348: LD_INT 45
18350: EQUAL
18351: OR
18352: PUSH
18353: LD_VAR 0 1
18357: PPUSH
18358: CALL_OW 264
18362: PUSH
18363: LD_INT 44
18365: EQUAL
18366: OR
18367: IFFALSE 18442
// begin russianTanks = russianTanks ^ vehicle ;
18369: LD_ADDR_EXP 40
18373: PUSH
18374: LD_EXP 40
18378: PUSH
18379: LD_VAR 0 1
18383: ADD
18384: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18385: LD_EXP 44
18389: PUSH
18390: LD_INT 1
18392: EQUAL
18393: PUSH
18394: LD_EXP 44
18398: PUSH
18399: LD_INT 0
18401: EQUAL
18402: OR
18403: IFFALSE 18417
// ComEnterUnit ( vehicle , ruteleprt ) ;
18405: LD_VAR 0 1
18409: PPUSH
18410: LD_INT 10
18412: PPUSH
18413: CALL_OW 120
// if attackTactic = 2 then
18417: LD_EXP 44
18421: PUSH
18422: LD_INT 2
18424: EQUAL
18425: IFFALSE 18442
// ComMoveXY ( vehicle , 88 , 69 ) ;
18427: LD_VAR 0 1
18431: PPUSH
18432: LD_INT 88
18434: PPUSH
18435: LD_INT 69
18437: PPUSH
18438: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 264
18451: PUSH
18452: LD_INT 49
18454: EQUAL
18455: IFFALSE 18485
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18457: LD_ADDR_EXP 41
18461: PUSH
18462: LD_EXP 41
18466: PUSH
18467: LD_VAR 0 1
18471: ADD
18472: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18473: LD_VAR 0 1
18477: PPUSH
18478: LD_INT 137
18480: PPUSH
18481: CALL_OW 120
// end ; end ; end ;
18485: PPOPN 2
18487: END
// on UnitGoesToRed ( unit ) do var i ;
18488: LD_INT 0
18490: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 255
18500: PUSH
18501: LD_INT 3
18503: EQUAL
18504: PUSH
18505: LD_VAR 0 1
18509: PPUSH
18510: CALL_OW 247
18514: PUSH
18515: LD_INT 2
18517: EQUAL
18518: AND
18519: IFFALSE 18637
// begin if russianTanks > 0 then
18521: LD_EXP 40
18525: PUSH
18526: LD_INT 0
18528: GREATER
18529: IFFALSE 18579
// for i in russianTanks do
18531: LD_ADDR_VAR 0 2
18535: PUSH
18536: LD_EXP 40
18540: PUSH
18541: FOR_IN
18542: IFFALSE 18577
// if i = unit then
18544: LD_VAR 0 2
18548: PUSH
18549: LD_VAR 0 1
18553: EQUAL
18554: IFFALSE 18575
// russianTanks = russianTanks diff [ unit ] ;
18556: LD_ADDR_EXP 40
18560: PUSH
18561: LD_EXP 40
18565: PUSH
18566: LD_VAR 0 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: DIFF
18574: ST_TO_ADDR
18575: GO 18541
18577: POP
18578: POP
// if russianTimeLapsers > 0 then
18579: LD_EXP 41
18583: PUSH
18584: LD_INT 0
18586: GREATER
18587: IFFALSE 18637
// for i in russianTimeLapsers do
18589: LD_ADDR_VAR 0 2
18593: PUSH
18594: LD_EXP 41
18598: PUSH
18599: FOR_IN
18600: IFFALSE 18635
// if i = unit then
18602: LD_VAR 0 2
18606: PUSH
18607: LD_VAR 0 1
18611: EQUAL
18612: IFFALSE 18633
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18614: LD_ADDR_EXP 41
18618: PUSH
18619: LD_EXP 41
18623: PUSH
18624: LD_VAR 0 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: DIFF
18632: ST_TO_ADDR
18633: GO 18599
18635: POP
18636: POP
// end ; end ;
18637: PPOPN 2
18639: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18640: LD_INT 0
18642: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18643: LD_VAR 0 2
18647: PPUSH
18648: CALL_OW 255
18652: PUSH
18653: LD_INT 3
18655: EQUAL
18656: PUSH
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 257
18666: PUSH
18667: LD_INT 3
18669: EQUAL
18670: AND
18671: PUSH
18672: LD_INT 21
18674: PPUSH
18675: CALL_OW 255
18679: PUSH
18680: LD_INT 3
18682: EQUAL
18683: AND
18684: PUSH
18685: LD_INT 21
18687: PPUSH
18688: CALL_OW 302
18692: AND
18693: IFFALSE 18707
// ComEnterUnit ( human , ru_fact ) ;
18695: LD_VAR 0 2
18699: PPUSH
18700: LD_INT 21
18702: PPUSH
18703: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18707: LD_VAR 0 2
18711: PPUSH
18712: CALL_OW 257
18716: PUSH
18717: LD_INT 4
18719: EQUAL
18720: PUSH
18721: LD_VAR 0 2
18725: PPUSH
18726: CALL_OW 255
18730: PUSH
18731: LD_INT 3
18733: EQUAL
18734: AND
18735: PUSH
18736: LD_EXP 42
18740: PUSH
18741: LD_INT 0
18743: EQUAL
18744: AND
18745: IFFALSE 18807
// for i in RuScientists do
18747: LD_ADDR_VAR 0 3
18751: PUSH
18752: LD_EXP 35
18756: PUSH
18757: FOR_IN
18758: IFFALSE 18805
// if i = human then
18760: LD_VAR 0 3
18764: PUSH
18765: LD_VAR 0 2
18769: EQUAL
18770: IFFALSE 18803
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_INT 13
18779: PUSH
18780: LD_INT 14
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_INT 2
18792: PPUSH
18793: CALL_OW 12
18797: ARRAY
18798: PPUSH
18799: CALL_OW 113
18803: GO 18757
18805: POP
18806: POP
// end ;
18807: PPOPN 3
18809: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18810: LD_INT 0
18812: PPUSH
18813: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18814: LD_VAR 0 2
18818: PPUSH
18819: CALL_OW 255
18823: PUSH
18824: LD_INT 3
18826: EQUAL
18827: PUSH
18828: LD_VAR 0 2
18832: PPUSH
18833: CALL_OW 257
18837: PUSH
18838: LD_INT 4
18840: EQUAL
18841: AND
18842: IFFALSE 18984
// for i in RuScientists do
18844: LD_ADDR_VAR 0 3
18848: PUSH
18849: LD_EXP 35
18853: PUSH
18854: FOR_IN
18855: IFFALSE 18982
// if i = human then
18857: LD_VAR 0 3
18861: PUSH
18862: LD_VAR 0 2
18866: EQUAL
18867: IFFALSE 18980
// if IsOk ( rutp ) then
18869: LD_INT 137
18871: PPUSH
18872: CALL_OW 302
18876: IFFALSE 18949
// begin rnd = rand ( 1 , 2 ) ;
18878: LD_ADDR_VAR 0 4
18882: PUSH
18883: LD_INT 1
18885: PPUSH
18886: LD_INT 2
18888: PPUSH
18889: CALL_OW 12
18893: ST_TO_ADDR
// if rnd = 1 then
18894: LD_VAR 0 4
18898: PUSH
18899: LD_INT 1
18901: EQUAL
18902: IFFALSE 18916
// ComEnterUnit ( vehicle , rutp ) ;
18904: LD_VAR 0 1
18908: PPUSH
18909: LD_INT 137
18911: PPUSH
18912: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18916: LD_VAR 0 1
18920: PPUSH
18921: LD_INT 13
18923: PUSH
18924: LD_INT 14
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PPUSH
18934: LD_INT 2
18936: PPUSH
18937: CALL_OW 12
18941: ARRAY
18942: PPUSH
18943: CALL_OW 173
// end else
18947: GO 18980
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18949: LD_VAR 0 1
18953: PPUSH
18954: LD_INT 13
18956: PUSH
18957: LD_INT 14
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PPUSH
18967: LD_INT 2
18969: PPUSH
18970: CALL_OW 12
18974: ARRAY
18975: PPUSH
18976: CALL_OW 113
// end ;
18980: GO 18854
18982: POP
18983: POP
// end ; end_of_file
18984: PPOPN 4
18986: END
// every 0 0$1 trigger ruAI = 1 do
18987: LD_EXP 42
18991: PUSH
18992: LD_INT 1
18994: EQUAL
18995: IFFALSE 19124
18997: GO 18999
18999: DISABLE
// begin enable ;
19000: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
19001: LD_INT 3
19003: PPUSH
19004: LD_INT 6
19006: PPUSH
19007: LD_INT 9
19009: PPUSH
19010: LD_EXP 39
19014: PPUSH
19015: CALL 14564 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
19019: LD_INT 3
19021: PPUSH
19022: LD_INT 4
19024: PPUSH
19025: LD_INT 10
19027: PPUSH
19028: LD_EXP 39
19032: PPUSH
19033: CALL 14564 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
19037: LD_INT 3
19039: PPUSH
19040: LD_INT 9
19042: PPUSH
19043: CALL 15765 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
19047: LD_INT 3
19049: PPUSH
19050: LD_INT 10
19052: PPUSH
19053: CALL 15765 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
19057: LD_INT 3
19059: PPUSH
19060: LD_INT 16
19062: PPUSH
19063: LD_INT 9
19065: PPUSH
19066: LD_INT 91
19068: PPUSH
19069: CALL 14955 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
19073: LD_INT 3
19075: PPUSH
19076: LD_INT 17
19078: PPUSH
19079: LD_INT 10
19081: PPUSH
19082: LD_INT 47
19084: PUSH
19085: LD_INT 129
19087: PUSH
19088: LD_INT 135
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: PPUSH
19096: CALL 14955 0 4
// AttackVehicles ( 3 ) ;
19100: LD_INT 3
19102: PPUSH
19103: CALL 16092 0 1
// IntBazooka ( 3 ) ;
19107: LD_INT 3
19109: PPUSH
19110: CALL 16551 0 1
// AttackNearBuildings ( 3 , 1 ) ;
19114: LD_INT 3
19116: PPUSH
19117: LD_INT 1
19119: PPUSH
19120: CALL 15535 0 2
// end ;
19124: END
// every 0 0$1 do
19125: GO 19127
19127: DISABLE
// begin enable ;
19128: ENABLE
// TimeLapsersAI ( 3 ) ;
19129: LD_INT 3
19131: PPUSH
19132: CALL 16390 0 1
// end ;
19136: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
19137: LD_INT 4
19139: PPUSH
19140: CALL_OW 303
19144: IFFALSE 19159
19146: GO 19148
19148: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
19149: LD_INT 3
19151: PPUSH
19152: LD_INT 4
19154: PPUSH
19155: CALL 17203 0 2
19159: END
// every 0 0$1 do
19160: GO 19162
19162: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
19163: LD_INT 3
19165: PPUSH
19166: LD_INT 91
19168: PPUSH
19169: LD_INT 3
19171: PPUSH
19172: CALL 14323 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
19176: LD_INT 3
19178: PPUSH
19179: LD_INT 47
19181: PPUSH
19182: LD_INT 3
19184: PPUSH
19185: CALL 14323 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
19189: LD_INT 3
19191: PPUSH
19192: LD_INT 129
19194: PPUSH
19195: LD_INT 3
19197: PPUSH
19198: CALL 14323 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
19202: LD_INT 3
19204: PPUSH
19205: LD_INT 3
19207: PPUSH
19208: LD_INT 3
19210: PPUSH
19211: CALL 14323 0 3
// end ;
19215: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19216: LD_EXP 28
19220: PUSH
19221: LD_INT 2
19223: EQUAL
19224: PUSH
19225: LD_INT 21
19227: PPUSH
19228: CALL_OW 255
19232: PUSH
19233: LD_INT 3
19235: EQUAL
19236: AND
19237: PUSH
19238: LD_INT 112
19240: PPUSH
19241: CALL_OW 255
19245: PUSH
19246: LD_INT 3
19248: EQUAL
19249: AND
19250: PUSH
19251: LD_INT 21
19253: PPUSH
19254: CALL_OW 302
19258: AND
19259: PUSH
19260: LD_INT 112
19262: PPUSH
19263: CALL_OW 302
19267: AND
19268: PUSH
19269: LD_INT 22
19271: PUSH
19272: LD_INT 3
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 21
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 50
19291: PUSH
19292: EMPTY
19293: LIST
19294: PUSH
19295: LD_INT 3
19297: PUSH
19298: LD_INT 58
19300: PUSH
19301: EMPTY
19302: LIST
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: PPUSH
19314: CALL_OW 69
19318: PUSH
19319: LD_INT 18
19321: PPUSH
19322: LD_INT 22
19324: PUSH
19325: LD_INT 3
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 21
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 70
19350: PUSH
19351: LD_INT 0
19353: EQUAL
19354: DIFF
19355: AND
19356: IFFALSE 19474
19358: GO 19360
19360: DISABLE
// begin enable ;
19361: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19362: LD_INT 3
19364: PPUSH
19365: LD_INT 21
19367: PPUSH
19368: LD_INT 3
19370: PUSH
19371: LD_INT 4
19373: PUSH
19374: LD_INT 4
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: LD_OWVAR 67
19386: ARRAY
19387: PPUSH
19388: LD_INT 46
19390: PUSH
19391: LD_INT 45
19393: PUSH
19394: LD_INT 44
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PPUSH
19402: LD_INT 3
19404: PPUSH
19405: LD_INT 3
19407: PPUSH
19408: LD_INT 24
19410: PPUSH
19411: CALL 15945 0 7
// if russianTimeLapsers = 0 then
19415: LD_EXP 41
19419: PUSH
19420: LD_INT 0
19422: EQUAL
19423: IFFALSE 19474
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19425: LD_INT 3
19427: PPUSH
19428: LD_INT 112
19430: PPUSH
19431: LD_INT 1
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: PUSH
19445: LD_OWVAR 67
19449: ARRAY
19450: PPUSH
19451: LD_INT 49
19453: PUSH
19454: LD_INT 49
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: LD_INT 3
19463: PPUSH
19464: LD_INT 3
19466: PPUSH
19467: LD_INT 24
19469: PPUSH
19470: CALL 15945 0 7
// end ;
19474: END
// every 0 0$1 trigger arabianMines do var i ;
19475: LD_EXP 45
19479: IFFALSE 19600
19481: GO 19483
19483: DISABLE
19484: LD_INT 0
19486: PPUSH
// begin enable ;
19487: ENABLE
// for i in arabianMines do
19488: LD_ADDR_VAR 0 1
19492: PUSH
19493: LD_EXP 45
19497: PUSH
19498: FOR_IN
19499: IFFALSE 19598
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19501: LD_INT 22
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 92
19513: PUSH
19514: LD_VAR 0 1
19518: PUSH
19519: LD_INT 1
19521: ARRAY
19522: PUSH
19523: LD_VAR 0 1
19527: PUSH
19528: LD_INT 2
19530: ARRAY
19531: PUSH
19532: LD_INT 3
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PPUSH
19545: CALL_OW 69
19549: IFFALSE 19596
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19551: LD_VAR 0 1
19555: PUSH
19556: LD_INT 1
19558: ARRAY
19559: PPUSH
19560: LD_VAR 0 1
19564: PUSH
19565: LD_INT 2
19567: ARRAY
19568: PPUSH
19569: LD_INT 5
19571: PPUSH
19572: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19576: LD_ADDR_EXP 45
19580: PUSH
19581: LD_EXP 45
19585: PPUSH
19586: LD_VAR 0 1
19590: PPUSH
19591: CALL_OW 3
19595: ST_TO_ADDR
// end ; end ;
19596: GO 19498
19598: POP
19599: POP
// end ;
19600: PPOPN 1
19602: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19603: LD_EXP 29
19607: PUSH
19608: LD_INT 4
19610: EQUAL
19611: PUSH
19612: LD_EXP 30
19616: PUSH
19617: LD_INT 6
19619: PUSH
19620: LD_INT 8
19622: PUSH
19623: LD_INT 8
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: PUSH
19631: LD_OWVAR 67
19635: ARRAY
19636: EQUAL
19637: AND
19638: IFFALSE 19656
19640: GO 19642
19642: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19643: LD_INT 10
19645: PPUSH
19646: LD_INT 47
19648: PPUSH
19649: LD_INT 82
19651: PPUSH
19652: CALL_OW 243
19656: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19657: LD_EXP 29
19661: PUSH
19662: LD_INT 4
19664: EQUAL
19665: IFFALSE 19687
19667: GO 19669
19669: DISABLE
// begin enable ;
19670: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19671: LD_ADDR_EXP 44
19675: PUSH
19676: LD_INT 1
19678: PPUSH
19679: LD_INT 2
19681: PPUSH
19682: CALL_OW 12
19686: ST_TO_ADDR
// end ; end_of_file
19687: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19688: LD_EXP 35
19692: PUSH
19693: EMPTY
19694: EQUAL
19695: PUSH
19696: LD_INT 3
19698: PPUSH
19699: CALL_OW 301
19703: AND
19704: IFFALSE 19909
19706: GO 19708
19708: DISABLE
// begin if sciCounter = 0 then
19709: LD_EXP 36
19713: PUSH
19714: LD_INT 0
19716: EQUAL
19717: IFFALSE 19743
// begin Say ( JMM , D7a-JMM-1 ) ;
19719: LD_EXP 1
19723: PPUSH
19724: LD_STRING D7a-JMM-1
19726: PPUSH
19727: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19731: LD_EXP 22
19735: PPUSH
19736: LD_STRING D7a-Pow-1
19738: PPUSH
19739: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19743: LD_EXP 36
19747: PUSH
19748: LD_INT 0
19750: GREATER
19751: PUSH
19752: LD_EXP 36
19756: PUSH
19757: LD_INT 6
19759: LESS
19760: AND
19761: IFFALSE 19787
// begin Say ( JMM , D7b-JMM-1 ) ;
19763: LD_EXP 1
19767: PPUSH
19768: LD_STRING D7b-JMM-1
19770: PPUSH
19771: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19775: LD_EXP 22
19779: PPUSH
19780: LD_STRING D7b-Pow-1
19782: PPUSH
19783: CALL_OW 94
// end ; if sciCounter = 6 then
19787: LD_EXP 36
19791: PUSH
19792: LD_INT 6
19794: EQUAL
19795: IFFALSE 19905
// begin Say ( JMM , D7c-JMM-1 ) ;
19797: LD_EXP 1
19801: PPUSH
19802: LD_STRING D7c-JMM-1
19804: PPUSH
19805: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19809: LD_EXP 22
19813: PPUSH
19814: LD_STRING D7c-Pow-1
19816: PPUSH
19817: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19821: LD_EXP 1
19825: PPUSH
19826: LD_STRING D7d-JMM-1
19828: PPUSH
19829: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19833: LD_EXP 22
19837: PPUSH
19838: LD_STRING D7d-Pow-1
19840: PPUSH
19841: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19845: LD_EXP 1
19849: PPUSH
19850: LD_STRING D7d-JMM-2
19852: PPUSH
19853: CALL_OW 88
// if askSiberite = 1 then
19857: LD_EXP 33
19861: PUSH
19862: LD_INT 1
19864: EQUAL
19865: IFFALSE 19881
// begin Say ( JMM , D7d-JMM-2a ) ;
19867: LD_EXP 1
19871: PPUSH
19872: LD_STRING D7d-JMM-2a
19874: PPUSH
19875: CALL_OW 88
// end else
19879: GO 19893
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19881: LD_EXP 22
19885: PPUSH
19886: LD_STRING D7d-Pow-2
19888: PPUSH
19889: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19893: LD_EXP 22
19897: PPUSH
19898: LD_STRING D7d-Pow-2a
19900: PPUSH
19901: CALL_OW 94
// end ; FinishMission ;
19905: CALL 19910 0 0
// end ;
19909: END
// export function FinishMission ; begin
19910: LD_INT 0
19912: PPUSH
// if teleportExplored = 1 then
19913: LD_EXP 34
19917: PUSH
19918: LD_INT 1
19920: EQUAL
19921: IFFALSE 19935
// AddMedal ( Teleport , 1 ) else
19923: LD_STRING Teleport
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 101
19933: GO 19946
// AddMedal ( Teleport , - 1 ) ;
19935: LD_STRING Teleport
19937: PPUSH
19938: LD_INT 1
19940: NEG
19941: PPUSH
19942: CALL_OW 101
// if sciCounter > 2 then
19946: LD_EXP 36
19950: PUSH
19951: LD_INT 2
19953: GREATER
19954: IFFALSE 19968
// AddMedal ( Materials , 1 ) else
19956: LD_STRING Materials
19958: PPUSH
19959: LD_INT 1
19961: PPUSH
19962: CALL_OW 101
19966: GO 19979
// AddMedal ( Materials , - 1 ) ;
19968: LD_STRING Materials
19970: PPUSH
19971: LD_INT 1
19973: NEG
19974: PPUSH
19975: CALL_OW 101
// if sciCounter = 6 then
19979: LD_EXP 36
19983: PUSH
19984: LD_INT 6
19986: EQUAL
19987: IFFALSE 20011
// begin AddMedal ( Scientists , 1 ) ;
19989: LD_STRING Scientists
19991: PPUSH
19992: LD_INT 1
19994: PPUSH
19995: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19999: LD_INT 1
20001: PPUSH
20002: LD_STRING 12_SciDed_1
20004: PPUSH
20005: CALL_OW 39
// end else
20009: GO 20032
// begin AddMedal ( Scientists , - 1 ) ;
20011: LD_STRING Scientists
20013: PPUSH
20014: LD_INT 1
20016: NEG
20017: PPUSH
20018: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
20022: LD_INT 0
20024: PPUSH
20025: LD_STRING 12_SciDed_1
20027: PPUSH
20028: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
20032: LD_EXP 32
20036: PPUSH
20037: LD_STRING 12_MainDepositFake_1
20039: PPUSH
20040: CALL_OW 39
// GiveMedals ( MAIN ) ;
20044: LD_STRING MAIN
20046: PPUSH
20047: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
20051: LD_INT 22
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 21
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: LD_INT 25
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 25
20086: PUSH
20087: LD_INT 2
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 25
20096: PUSH
20097: LD_INT 3
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 25
20106: PUSH
20107: LD_INT 4
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 25
20116: PUSH
20117: LD_INT 5
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 25
20126: PUSH
20127: LD_INT 8
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 69
20152: PPUSH
20153: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20157: LD_EXP 1
20161: PPUSH
20162: LD_EXP 47
20166: PUSH
20167: LD_STRING JMM
20169: STR
20170: PPUSH
20171: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20175: LD_EXP 7
20179: PPUSH
20180: LD_EXP 47
20184: PUSH
20185: LD_STRING Brown
20187: STR
20188: PPUSH
20189: CALL 13555 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20193: LD_EXP 3
20197: PPUSH
20198: LD_EXP 47
20202: PUSH
20203: LD_STRING Donaldson
20205: STR
20206: PPUSH
20207: CALL 13555 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20211: LD_EXP 4
20215: PPUSH
20216: LD_EXP 47
20220: PUSH
20221: LD_STRING Bobby
20223: STR
20224: PPUSH
20225: CALL 13555 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20229: LD_EXP 5
20233: PPUSH
20234: LD_EXP 47
20238: PUSH
20239: LD_STRING Cyrus
20241: STR
20242: PPUSH
20243: CALL 13555 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20247: LD_EXP 2
20251: PPUSH
20252: LD_EXP 47
20256: PUSH
20257: LD_STRING Lisa
20259: STR
20260: PPUSH
20261: CALL 13555 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20265: LD_EXP 12
20269: PPUSH
20270: LD_EXP 47
20274: PUSH
20275: LD_STRING Frank
20277: STR
20278: PPUSH
20279: CALL 13555 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20283: LD_EXP 13
20287: PPUSH
20288: LD_EXP 47
20292: PUSH
20293: LD_STRING Kikuchi
20295: STR
20296: PPUSH
20297: CALL 13555 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20301: LD_EXP 9
20305: PPUSH
20306: LD_EXP 47
20310: PUSH
20311: LD_STRING Houten
20313: STR
20314: PPUSH
20315: CALL 13555 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20319: LD_EXP 11
20323: PPUSH
20324: LD_EXP 47
20328: PUSH
20329: LD_STRING Gary
20331: STR
20332: PPUSH
20333: CALL 13555 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20337: LD_EXP 10
20341: PPUSH
20342: LD_EXP 47
20346: PUSH
20347: LD_STRING Cornell
20349: STR
20350: PPUSH
20351: CALL 13555 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20355: LD_EXP 6
20359: PPUSH
20360: LD_EXP 47
20364: PUSH
20365: LD_STRING Denis
20367: STR
20368: PPUSH
20369: CALL 13555 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20373: LD_EXP 8
20377: PPUSH
20378: LD_EXP 47
20382: PUSH
20383: LD_STRING Gladstone
20385: STR
20386: PPUSH
20387: CALL 13555 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20391: LD_INT 22
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 23
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: LD_INT 25
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 25
20436: PUSH
20437: LD_INT 2
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 25
20446: PUSH
20447: LD_INT 3
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 25
20456: PUSH
20457: LD_INT 4
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 25
20466: PUSH
20467: LD_INT 5
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 25
20476: PUSH
20477: LD_INT 8
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: PPUSH
20499: CALL_OW 69
20503: PUSH
20504: LD_EXP 1
20508: PUSH
20509: LD_EXP 7
20513: PUSH
20514: LD_EXP 3
20518: PUSH
20519: LD_EXP 4
20523: PUSH
20524: LD_EXP 5
20528: PUSH
20529: LD_EXP 2
20533: PUSH
20534: LD_EXP 12
20538: PUSH
20539: LD_EXP 8
20543: PUSH
20544: LD_EXP 13
20548: PUSH
20549: LD_EXP 6
20553: PUSH
20554: LD_EXP 9
20558: PUSH
20559: LD_EXP 11
20563: PUSH
20564: LD_EXP 10
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: DIFF
20584: PPUSH
20585: LD_STRING 12_other_survivors
20587: PPUSH
20588: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20592: LD_INT 22
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 23
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 21
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: LD_INT 25
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 25
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 25
20647: PUSH
20648: LD_INT 3
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 25
20657: PUSH
20658: LD_INT 4
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 25
20667: PUSH
20668: LD_INT 5
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 25
20677: PUSH
20678: LD_INT 8
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: PPUSH
20700: CALL_OW 69
20704: PPUSH
20705: LD_STRING 12_kurt_squad
20707: PPUSH
20708: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
20712: LD_EXP 14
20716: PPUSH
20717: LD_STRING 12_others
20719: PPUSH
20720: CALL_OW 38
// YouWin ;
20724: CALL_OW 103
// end ; end_of_file
20728: LD_VAR 0 1
20732: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20733: LD_EXP 1
20737: PPUSH
20738: CALL_OW 301
20742: IFFALSE 20754
20744: GO 20746
20746: DISABLE
// YouLost ( JMM ) ; end_of_file
20747: LD_STRING JMM
20749: PPUSH
20750: CALL_OW 104
20754: END
// every 0 0$01 do
20755: GO 20757
20757: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20758: LD_INT 1050
20760: PPUSH
20761: CALL_OW 67
// if cratesSpawned < 6 then
20765: LD_EXP 46
20769: PUSH
20770: LD_INT 6
20772: LESS
20773: IFFALSE 20810
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20775: LD_INT 3
20777: PPUSH
20778: LD_INT 5
20780: PPUSH
20781: CALL_OW 12
20785: PPUSH
20786: LD_INT 21
20788: PPUSH
20789: LD_INT 1
20791: PPUSH
20792: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20796: LD_ADDR_EXP 46
20800: PUSH
20801: LD_EXP 46
20805: PUSH
20806: LD_INT 1
20808: PLUS
20809: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20810: LD_EXP 46
20814: PUSH
20815: LD_INT 6
20817: GREATEREQUAL
20818: PUSH
20819: LD_EXP 46
20823: PUSH
20824: LD_INT 12
20826: LESS
20827: AND
20828: IFFALSE 20872
// begin wait ( 0 0$50 ) ;
20830: LD_INT 1750
20832: PPUSH
20833: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20837: LD_INT 3
20839: PPUSH
20840: LD_INT 5
20842: PPUSH
20843: CALL_OW 12
20847: PPUSH
20848: LD_INT 21
20850: PPUSH
20851: LD_INT 1
20853: PPUSH
20854: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20858: LD_ADDR_EXP 46
20862: PUSH
20863: LD_EXP 46
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20872: LD_EXP 46
20876: PUSH
20877: LD_INT 12
20879: GREATEREQUAL
20880: IFFALSE 20924
// begin wait ( 1 1$40 ) ;
20882: LD_INT 3500
20884: PPUSH
20885: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20889: LD_INT 3
20891: PPUSH
20892: LD_INT 5
20894: PPUSH
20895: CALL_OW 12
20899: PPUSH
20900: LD_INT 21
20902: PPUSH
20903: LD_INT 1
20905: PPUSH
20906: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20910: LD_ADDR_EXP 46
20914: PUSH
20915: LD_EXP 46
20919: PUSH
20920: LD_INT 1
20922: PLUS
20923: ST_TO_ADDR
// end ; until false ;
20924: LD_INT 0
20926: IFFALSE 20758
// end ;
20928: END
