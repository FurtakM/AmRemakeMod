// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 42
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// askSiberite = 0 ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// warWithLegion = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// fakeInfo = 0 ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// cratesSpawned = 0 ;
 127: LD_ADDR_EXP 43
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// ruAI = 0 ;
 135: LD_ADDR_EXP 41
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// eventVar1 = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// mission_prefix = 12_ ;
 151: LD_ADDR_EXP 44
 155: PUSH
 156: LD_STRING 12_
 158: ST_TO_ADDR
// debugMode = 0 ;
 159: LD_ADDR_EXP 46
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// PrepareDifficulty ;
 167: CALL 12156 0 0
// PrepareVehicles ;
 171: CALL 1423 0 0
// PrepareAmericansRandom ;
 175: CALL 1378 0 0
// PrepareAmericanHeroes ;
 179: CALL 517 0 0
// PrepareRussianCommander ;
 183: CALL 2961 0 0
// PrepareWestBase ;
 187: CALL 3473 0 0
// PrepareEastBase ;
 191: CALL 3033 0 0
// PrepareOtherRussians ;
 195: CALL 3585 0 0
// end ;
 199: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 200: LD_EXP 46
 204: PUSH
 205: LD_INT 1
 207: EQUAL
 208: IFFALSE 514
 210: GO 212
 212: DISABLE
 213: LD_INT 0
 215: PPUSH
// begin enable ;
 216: ENABLE
// fogoff ( true ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 224: LD_ADDR_VAR 0 1
 228: PUSH
 229: LD_INT 22
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: LD_INT 21
 241: PUSH
 242: LD_INT 1
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PPUSH
 253: CALL_OW 69
 257: PUSH
 258: FOR_IN
 259: IFFALSE 275
// SetLives ( i , 1000 ) ;
 261: LD_VAR 0 1
 265: PPUSH
 266: LD_INT 1000
 268: PPUSH
 269: CALL_OW 234
 273: GO 258
 275: POP
 276: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 277: LD_ADDR_VAR 0 1
 281: PUSH
 282: LD_INT 22
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: LD_INT 30
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PUSH
 305: LD_INT 30
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 354
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: CALL_OW 274
 341: PPUSH
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 9999
 347: PPUSH
 348: CALL_OW 277
 352: GO 329
 354: POP
 355: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 356: LD_ADDR_VAR 0 1
 360: PUSH
 361: LD_INT 22
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 30
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 30
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 435: LD_ADDR_VAR 0 1
 439: PUSH
 440: LD_INT 22
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 2
 452: PUSH
 453: LD_INT 30
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 1
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PPUSH
 482: CALL_OW 69
 486: PUSH
 487: FOR_IN
 488: IFFALSE 512
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 490: LD_VAR 0 1
 494: PPUSH
 495: CALL_OW 274
 499: PPUSH
 500: LD_INT 3
 502: PPUSH
 503: LD_INT 9999
 505: PPUSH
 506: CALL_OW 277
 510: GO 487
 512: POP
 513: POP
// end ; end_of_file
 514: PPOPN 1
 516: END
// export function PrepareAmericanHeroes ; begin
 517: LD_INT 0
 519: PPUSH
// uc_side = 1 ;
 520: LD_ADDR_OWVAR 20
 524: PUSH
 525: LD_INT 1
 527: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 528: LD_ADDR_EXP 14
 532: PUSH
 533: LD_STRING 11_others
 535: PPUSH
 536: CALL_OW 31
 540: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 541: LD_ADDR_EXP 14
 545: PUSH
 546: LD_EXP 14
 550: PUSH
 551: LD_STRING 11c_others
 553: PPUSH
 554: CALL_OW 31
 558: ADD
 559: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 560: LD_ADDR_EXP 1
 564: PUSH
 565: LD_STRING 11_JMM
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL 11795 0 2
 575: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 576: LD_EXP 1
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 588: LD_EXP 1
 592: PPUSH
 593: LD_INT 22
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 21
 605: PUSH
 606: LD_INT 2
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PUSH
 613: LD_INT 58
 615: PUSH
 616: EMPTY
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PPUSH
 624: CALL_OW 69
 628: PUSH
 629: LD_INT 1
 631: ARRAY
 632: PPUSH
 633: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 637: LD_STRING 11_Lisa
 639: PPUSH
 640: CALL_OW 28
 644: PUSH
 645: LD_INT 1
 647: EQUAL
 648: IFFALSE 695
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 650: LD_ADDR_EXP 2
 654: PUSH
 655: LD_STRING 11_Lisa
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: CALL 11795 0 2
 665: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 666: LD_EXP 2
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 678: LD_EXP 2
 682: PPUSH
 683: LD_INT 4
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: CALL_OW 49
// end else
 693: GO 757
// begin if TestCharacters ( 10c_Lisa ) = true then
 695: LD_STRING 10c_Lisa
 697: PPUSH
 698: CALL_OW 28
 702: PUSH
 703: LD_INT 1
 705: EQUAL
 706: IFFALSE 753
// begin Lisa = PrepareUnit ( 10c_Lisa , true ) ;
 708: LD_ADDR_EXP 2
 712: PUSH
 713: LD_STRING 10c_Lisa
 715: PPUSH
 716: LD_INT 1
 718: PPUSH
 719: CALL 11795 0 2
 723: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 724: LD_EXP 2
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 736: LD_EXP 2
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end else
 751: GO 757
// begin PrepareAmericansRandom ;
 753: CALL 1378 0 0
// end ; end ; if TestCharacters ( 11_Donaldson ) = true then
 757: LD_STRING 11_Donaldson
 759: PPUSH
 760: CALL_OW 28
 764: PUSH
 765: LD_INT 1
 767: EQUAL
 768: IFFALSE 815
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 770: LD_ADDR_EXP 3
 774: PUSH
 775: LD_STRING 11_Donaldson
 777: PPUSH
 778: LD_INT 1
 780: PPUSH
 781: CALL 11795 0 2
 785: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 786: LD_EXP 3
 790: PPUSH
 791: LD_INT 1
 793: PPUSH
 794: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 798: LD_EXP 3
 802: PPUSH
 803: LD_INT 4
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end else
 813: GO 877
// begin if TestCharacters ( 10c_Donaldson ) = true then
 815: LD_STRING 10c_Donaldson
 817: PPUSH
 818: CALL_OW 28
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 873
// begin Donaldson = PrepareUnit ( 10c_Donaldson , true ) ;
 828: LD_ADDR_EXP 3
 832: PUSH
 833: LD_STRING 10c_Donaldson
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 11795 0 2
 843: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 844: LD_EXP 3
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 856: LD_EXP 3
 860: PPUSH
 861: LD_INT 4
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL_OW 49
// end else
 871: GO 877
// begin PrepareAmericansRandom ;
 873: CALL 1378 0 0
// end ; end ; if TestCharacters ( 11_Cyrus ) = true then
 877: LD_STRING 11_Cyrus
 879: PPUSH
 880: CALL_OW 28
 884: PUSH
 885: LD_INT 1
 887: EQUAL
 888: IFFALSE 935
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 890: LD_ADDR_EXP 5
 894: PUSH
 895: LD_STRING 11_Cyrus
 897: PPUSH
 898: LD_INT 1
 900: PPUSH
 901: CALL 11795 0 2
 905: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 906: LD_EXP 5
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 918: LD_EXP 5
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// end else
 933: GO 997
// begin if TestCharacters ( 10c_Cyrus ) = true then
 935: LD_STRING 10c_Cyrus
 937: PPUSH
 938: CALL_OW 28
 942: PUSH
 943: LD_INT 1
 945: EQUAL
 946: IFFALSE 993
// begin Cyrus = PrepareUnit ( 10c_Cyrus , true ) ;
 948: LD_ADDR_EXP 5
 952: PUSH
 953: LD_STRING 10c_Cyrus
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: CALL 11795 0 2
 963: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 964: LD_EXP 5
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 976: LD_EXP 5
 980: PPUSH
 981: LD_INT 4
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 49
// end else
 991: GO 997
// begin PrepareAmericansRandom ;
 993: CALL 1378 0 0
// end ; end ; if TestCharacters ( 11_Denis ) = true then
 997: LD_STRING 11_Denis
 999: PPUSH
1000: CALL_OW 28
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1055
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
1010: LD_ADDR_EXP 6
1014: PUSH
1015: LD_STRING 11_Denis
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: CALL 11795 0 2
1025: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1038: LD_EXP 6
1042: PPUSH
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: CALL_OW 49
// end else
1053: GO 1117
// begin if TestCharacters ( 10c_Denis ) = true then
1055: LD_STRING 10c_Denis
1057: PPUSH
1058: CALL_OW 28
1062: PUSH
1063: LD_INT 1
1065: EQUAL
1066: IFFALSE 1113
// begin Denis = PrepareUnit ( 10c_Denis , true ) ;
1068: LD_ADDR_EXP 6
1072: PUSH
1073: LD_STRING 10c_Denis
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: CALL 11795 0 2
1083: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1084: LD_EXP 6
1088: PPUSH
1089: LD_INT 4
1091: PPUSH
1092: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1096: LD_EXP 6
1100: PPUSH
1101: LD_INT 4
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL_OW 49
// end else
1111: GO 1117
// begin PrepareAmericansRandom ;
1113: CALL 1378 0 0
// end ; end ; if TestCharacters ( 11_Frank ) = true then
1117: LD_STRING 11_Frank
1119: PPUSH
1120: CALL_OW 28
1124: PUSH
1125: LD_INT 1
1127: EQUAL
1128: IFFALSE 1175
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1130: LD_ADDR_EXP 12
1134: PUSH
1135: LD_STRING 11_Frank
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: CALL 11795 0 2
1145: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1146: LD_EXP 12
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1158: LD_EXP 12
1162: PPUSH
1163: LD_INT 4
1165: PPUSH
1166: LD_INT 0
1168: PPUSH
1169: CALL_OW 49
// end else
1173: GO 1237
// begin if TestCharacters ( 10c_Frank ) = true then
1175: LD_STRING 10c_Frank
1177: PPUSH
1178: CALL_OW 28
1182: PUSH
1183: LD_INT 1
1185: EQUAL
1186: IFFALSE 1233
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1188: LD_ADDR_EXP 12
1192: PUSH
1193: LD_STRING 11_Frank
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: CALL 11795 0 2
1203: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1204: LD_EXP 12
1208: PPUSH
1209: LD_INT 1
1211: PPUSH
1212: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1216: LD_EXP 12
1220: PPUSH
1221: LD_INT 4
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// end else
1231: GO 1237
// begin PrepareAmericansRandom ;
1233: CALL 1378 0 0
// end ; end ; if TestCharacters ( 11_Cornell ) = true then
1237: LD_STRING 11_Cornell
1239: PPUSH
1240: CALL_OW 28
1244: PUSH
1245: LD_INT 1
1247: EQUAL
1248: IFFALSE 1295
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1250: LD_ADDR_EXP 10
1254: PUSH
1255: LD_STRING 11_Cornell
1257: PPUSH
1258: LD_INT 1
1260: PPUSH
1261: CALL 11795 0 2
1265: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1266: LD_EXP 10
1270: PPUSH
1271: LD_INT 1
1273: PPUSH
1274: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1278: LD_EXP 10
1282: PPUSH
1283: LD_INT 4
1285: PPUSH
1286: LD_INT 0
1288: PPUSH
1289: CALL_OW 49
// end else
1293: GO 1357
// begin if TestCharacters ( 10c_Cornell ) = true then
1295: LD_STRING 10c_Cornell
1297: PPUSH
1298: CALL_OW 28
1302: PUSH
1303: LD_INT 1
1305: EQUAL
1306: IFFALSE 1353
// begin Cornel = PrepareUnit ( 10c_Cornell , true ) ;
1308: LD_ADDR_EXP 10
1312: PUSH
1313: LD_STRING 10c_Cornell
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: CALL 11795 0 2
1323: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1324: LD_EXP 10
1328: PPUSH
1329: LD_INT 1
1331: PPUSH
1332: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1336: LD_EXP 10
1340: PPUSH
1341: LD_INT 4
1343: PPUSH
1344: LD_INT 0
1346: PPUSH
1347: CALL_OW 49
// end else
1351: GO 1357
// begin PrepareAmericansRandom ;
1353: CALL 1378 0 0
// end ; end ; Powell = PrepareUnit ( Powell , false ) ;
1357: LD_ADDR_EXP 22
1361: PUSH
1362: LD_STRING Powell
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL 11795 0 2
1372: ST_TO_ADDR
// end ;
1373: LD_VAR 0 1
1377: RET
// export function PrepareAmericansRandom ; begin
1378: LD_INT 0
1380: PPUSH
// PlaceUnitArea ( others11 [ 1 ] , PlayerSpawn , false ) ;
1381: LD_EXP 14
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PPUSH
1390: LD_INT 4
1392: PPUSH
1393: LD_INT 0
1395: PPUSH
1396: CALL_OW 49
// others11 := Delete ( others11 , 1 ) ;
1400: LD_ADDR_EXP 14
1404: PUSH
1405: LD_EXP 14
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: CALL_OW 3
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// export function PrepareVehicles ; var veh ; begin
1423: LD_INT 0
1425: PPUSH
1426: PPUSH
// uc_side = 1 ;
1427: LD_ADDR_OWVAR 20
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// uc_nation = 1 ;
1435: LD_ADDR_OWVAR 21
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1443: LD_ADDR_OWVAR 37
1447: PUSH
1448: LD_INT 3
1450: ST_TO_ADDR
// vc_engine = 3 ;
1451: LD_ADDR_OWVAR 39
1455: PUSH
1456: LD_INT 3
1458: ST_TO_ADDR
// vc_control = 3 ;
1459: LD_ADDR_OWVAR 38
1463: PUSH
1464: LD_INT 3
1466: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1467: LD_ADDR_OWVAR 40
1471: PUSH
1472: LD_INT 4
1474: ST_TO_ADDR
// veh = CreateVehicle ;
1475: LD_ADDR_VAR 0 2
1479: PUSH
1480: CALL_OW 45
1484: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1485: LD_VAR 0 2
1489: PPUSH
1490: LD_INT 4
1492: PPUSH
1493: LD_INT 0
1495: PPUSH
1496: CALL_OW 49
// vc_weapon = us_double_gun ;
1500: LD_ADDR_OWVAR 40
1504: PUSH
1505: LD_INT 5
1507: ST_TO_ADDR
// vc_control = 1 ;
1508: LD_ADDR_OWVAR 38
1512: PUSH
1513: LD_INT 1
1515: ST_TO_ADDR
// veh = CreateVehicle ;
1516: LD_ADDR_VAR 0 2
1520: PUSH
1521: CALL_OW 45
1525: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1526: LD_VAR 0 2
1530: PPUSH
1531: LD_INT 4
1533: PPUSH
1534: LD_INT 0
1536: PPUSH
1537: CALL_OW 49
// vc_weapon = us_light_gun ;
1541: LD_ADDR_OWVAR 40
1545: PUSH
1546: LD_INT 3
1548: ST_TO_ADDR
// vc_control = 3 ;
1549: LD_ADDR_OWVAR 38
1553: PUSH
1554: LD_INT 3
1556: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1557: LD_ADDR_OWVAR 37
1561: PUSH
1562: LD_INT 2
1564: ST_TO_ADDR
// veh = CreateVehicle ;
1565: LD_ADDR_VAR 0 2
1569: PUSH
1570: CALL_OW 45
1574: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1575: LD_VAR 0 2
1579: PPUSH
1580: LD_INT 4
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1590: LD_ADDR_OWVAR 40
1594: PUSH
1595: LD_INT 4
1597: ST_TO_ADDR
// veh = CreateVehicle ;
1598: LD_ADDR_VAR 0 2
1602: PUSH
1603: CALL_OW 45
1607: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1608: LD_VAR 0 2
1612: PPUSH
1613: LD_INT 4
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// end ;
1623: LD_VAR 0 1
1627: RET
// export function PowellSupport1 ; var veh , un ; begin
1628: LD_INT 0
1630: PPUSH
1631: PPUSH
1632: PPUSH
// uc_side = 1 ;
1633: LD_ADDR_OWVAR 20
1637: PUSH
1638: LD_INT 1
1640: ST_TO_ADDR
// uc_nation = 1 ;
1641: LD_ADDR_OWVAR 21
1645: PUSH
1646: LD_INT 1
1648: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1649: LD_STRING 11_Brown
1651: PPUSH
1652: CALL_OW 28
1656: PUSH
1657: LD_INT 1
1659: EQUAL
1660: IFFALSE 1707
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1662: LD_ADDR_EXP 7
1666: PUSH
1667: LD_STRING 11_Brown
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL 11795 0 2
1677: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1678: LD_EXP 7
1682: PPUSH
1683: LD_INT 2
1685: PPUSH
1686: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1690: LD_EXP 7
1694: PPUSH
1695: LD_INT 4
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 49
// end else
1705: GO 1769
// begin if TestCharacters ( 10c_Brown ) = true then
1707: LD_STRING 10c_Brown
1709: PPUSH
1710: CALL_OW 28
1714: PUSH
1715: LD_INT 1
1717: EQUAL
1718: IFFALSE 1765
// begin Brown = PrepareUnit ( 10c_Brown , true ) ;
1720: LD_ADDR_EXP 7
1724: PUSH
1725: LD_STRING 10c_Brown
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: CALL 11795 0 2
1735: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1736: LD_EXP 7
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1748: LD_EXP 7
1752: PPUSH
1753: LD_INT 4
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// end else
1763: GO 1769
// begin PrepareAmericansRandom ;
1765: CALL 1378 0 0
// end ; end ; if TestCharacters ( 11_Gary ) = true then
1769: LD_STRING 11_Gary
1771: PPUSH
1772: CALL_OW 28
1776: PUSH
1777: LD_INT 1
1779: EQUAL
1780: IFFALSE 1827
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1782: LD_ADDR_EXP 11
1786: PUSH
1787: LD_STRING 11_Gary
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: CALL 11795 0 2
1797: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1798: LD_EXP 11
1802: PPUSH
1803: LD_INT 2
1805: PPUSH
1806: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1810: LD_EXP 11
1814: PPUSH
1815: LD_INT 4
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL_OW 49
// end else
1825: GO 1889
// begin if TestCharacters ( 10c_Gary ) = true then
1827: LD_STRING 10c_Gary
1829: PPUSH
1830: CALL_OW 28
1834: PUSH
1835: LD_INT 1
1837: EQUAL
1838: IFFALSE 1885
// begin Brown = PrepareUnit ( 10c_Gary , true ) ;
1840: LD_ADDR_EXP 7
1844: PUSH
1845: LD_STRING 10c_Gary
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL 11795 0 2
1855: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1856: LD_EXP 11
1860: PPUSH
1861: LD_INT 2
1863: PPUSH
1864: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1868: LD_EXP 11
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// end else
1883: GO 1889
// begin PrepareAmericansRandom ;
1885: CALL 1378 0 0
// end ; end ; hc_gallery =  ;
1889: LD_ADDR_OWVAR 33
1893: PUSH
1894: LD_STRING 
1896: ST_TO_ADDR
// hc_name =  ;
1897: LD_ADDR_OWVAR 26
1901: PUSH
1902: LD_STRING 
1904: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1905: LD_ADDR_OWVAR 37
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_engine = 3 ;
1913: LD_ADDR_OWVAR 39
1917: PUSH
1918: LD_INT 3
1920: ST_TO_ADDR
// vc_control = 1 ;
1921: LD_ADDR_OWVAR 38
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_weapon = us_crane ;
1929: LD_ADDR_OWVAR 40
1933: PUSH
1934: LD_INT 13
1936: ST_TO_ADDR
// veh = CreateVehicle ;
1937: LD_ADDR_VAR 0 2
1941: PUSH
1942: CALL_OW 45
1946: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1947: LD_VAR 0 2
1951: PPUSH
1952: LD_INT 4
1954: PPUSH
1955: LD_INT 0
1957: PPUSH
1958: CALL_OW 49
// SetDir ( veh , 4 ) ;
1962: LD_VAR 0 2
1966: PPUSH
1967: LD_INT 4
1969: PPUSH
1970: CALL_OW 233
// PrepareHuman ( false , 3 , rand ( 5 , 8 ) ) ;
1974: LD_INT 0
1976: PPUSH
1977: LD_INT 3
1979: PPUSH
1980: LD_INT 5
1982: PPUSH
1983: LD_INT 8
1985: PPUSH
1986: CALL_OW 12
1990: PPUSH
1991: CALL_OW 380
// un = CreateHuman ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: CALL_OW 44
2004: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2005: LD_VAR 0 3
2009: PPUSH
2010: LD_VAR 0 2
2014: PPUSH
2015: CALL_OW 52
// vc_chassis = us_medium_wheeled ;
2019: LD_ADDR_OWVAR 37
2023: PUSH
2024: LD_INT 2
2026: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2027: LD_ADDR_OWVAR 40
2031: PUSH
2032: LD_INT 5
2034: ST_TO_ADDR
// veh = CreateVehicle ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: CALL_OW 45
2044: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_INT 4
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL_OW 49
// SetDir ( veh , 4 ) ;
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_INT 4
2067: PPUSH
2068: CALL_OW 233
// PrepareHuman ( false , 3 , rand ( 5 , 8 ) ) ;
2072: LD_INT 0
2074: PPUSH
2075: LD_INT 3
2077: PPUSH
2078: LD_INT 5
2080: PPUSH
2081: LD_INT 8
2083: PPUSH
2084: CALL_OW 12
2088: PPUSH
2089: CALL_OW 380
// un = CreateHuman ;
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: CALL_OW 44
2102: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2103: LD_VAR 0 3
2107: PPUSH
2108: LD_VAR 0 2
2112: PPUSH
2113: CALL_OW 52
// vc_control = 3 ;
2117: LD_ADDR_OWVAR 38
2121: PUSH
2122: LD_INT 3
2124: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2125: LD_ADDR_OWVAR 40
2129: PUSH
2130: LD_INT 12
2132: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2133: LD_ADDR_EXP 15
2137: PUSH
2138: CALL_OW 45
2142: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2143: LD_ADDR_EXP 16
2147: PUSH
2148: CALL_OW 45
2152: ST_TO_ADDR
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2153: LD_EXP 15
2157: PPUSH
2158: LD_INT 4
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2168: LD_EXP 16
2172: PPUSH
2173: LD_INT 4
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 49
// SetDir ( amCargo1 , 4 ) ;
2183: LD_EXP 15
2187: PPUSH
2188: LD_INT 4
2190: PPUSH
2191: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2195: LD_EXP 16
2199: PPUSH
2200: LD_INT 4
2202: PPUSH
2203: CALL_OW 233
// AddCargo ( amCargo1 , 3 , 100 ) ;
2207: LD_EXP 15
2211: PPUSH
2212: LD_INT 3
2214: PPUSH
2215: LD_INT 100
2217: PPUSH
2218: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2222: LD_EXP 16
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: LD_INT 80
2232: PPUSH
2233: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2237: LD_EXP 16
2241: PPUSH
2242: LD_INT 3
2244: PPUSH
2245: LD_INT 20
2247: PPUSH
2248: CALL_OW 291
// end ;
2252: LD_VAR 0 1
2256: RET
// export function PowellSupport2 ; var veh , un ; begin
2257: LD_INT 0
2259: PPUSH
2260: PPUSH
2261: PPUSH
// uc_side = 1 ;
2262: LD_ADDR_OWVAR 20
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// uc_nation = 1 ;
2270: LD_ADDR_OWVAR 21
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if TestCharacters ( 11_Bobby ) = true then
2278: LD_STRING 11_Bobby
2280: PPUSH
2281: CALL_OW 28
2285: PUSH
2286: LD_INT 1
2288: EQUAL
2289: IFFALSE 2336
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2291: LD_ADDR_EXP 4
2295: PUSH
2296: LD_STRING 11_Bobby
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: CALL 11795 0 2
2306: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2307: LD_EXP 4
2311: PPUSH
2312: LD_INT 3
2314: PPUSH
2315: CALL_OW 336
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
2319: LD_EXP 4
2323: PPUSH
2324: LD_INT 4
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 49
// end else
2334: GO 2398
// begin if TestCharacters ( 10c_Bobby ) = true then
2336: LD_STRING 10c_Bobby
2338: PPUSH
2339: CALL_OW 28
2343: PUSH
2344: LD_INT 1
2346: EQUAL
2347: IFFALSE 2394
// begin Bobby = PrepareUnit ( 10c_Bobby , true ) ;
2349: LD_ADDR_EXP 4
2353: PUSH
2354: LD_STRING 10c_Bobby
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: CALL 11795 0 2
2364: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2365: LD_EXP 4
2369: PPUSH
2370: LD_INT 3
2372: PPUSH
2373: CALL_OW 336
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
2377: LD_EXP 4
2381: PPUSH
2382: LD_INT 4
2384: PPUSH
2385: LD_INT 0
2387: PPUSH
2388: CALL_OW 49
// end else
2392: GO 2398
// begin PrepareAmericansRandom ;
2394: CALL 1378 0 0
// end ; end ; if TestCharacters ( 11_Houten ) = true then
2398: LD_STRING 11_Houten
2400: PPUSH
2401: CALL_OW 28
2405: PUSH
2406: LD_INT 1
2408: EQUAL
2409: IFFALSE 2456
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2411: LD_ADDR_EXP 9
2415: PUSH
2416: LD_STRING 11_Houten
2418: PPUSH
2419: LD_INT 1
2421: PPUSH
2422: CALL 11795 0 2
2426: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2427: LD_EXP 9
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2439: LD_EXP 9
2443: PPUSH
2444: LD_INT 4
2446: PPUSH
2447: LD_INT 0
2449: PPUSH
2450: CALL_OW 49
// end else
2454: GO 2518
// begin if TestCharacters ( 10c_Houten ) = true then
2456: LD_STRING 10c_Houten
2458: PPUSH
2459: CALL_OW 28
2463: PUSH
2464: LD_INT 1
2466: EQUAL
2467: IFFALSE 2514
// begin Houten = PrepareUnit ( 10c_Houten , true ) ;
2469: LD_ADDR_EXP 9
2473: PUSH
2474: LD_STRING 10c_Houten
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL 11795 0 2
2484: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2485: LD_EXP 9
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2497: LD_EXP 9
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL_OW 49
// end else
2512: GO 2518
// begin PrepareAmericansRandom ;
2514: CALL 1378 0 0
// end ; end ; hc_gallery =  ;
2518: LD_ADDR_OWVAR 33
2522: PUSH
2523: LD_STRING 
2525: ST_TO_ADDR
// hc_name =  ;
2526: LD_ADDR_OWVAR 26
2530: PUSH
2531: LD_STRING 
2533: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2534: LD_ADDR_OWVAR 37
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// vc_engine = 3 ;
2542: LD_ADDR_OWVAR 39
2546: PUSH
2547: LD_INT 3
2549: ST_TO_ADDR
// vc_control = 3 ;
2550: LD_ADDR_OWVAR 38
2554: PUSH
2555: LD_INT 3
2557: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2558: LD_ADDR_OWVAR 40
2562: PUSH
2563: LD_INT 3
2565: ST_TO_ADDR
// veh = CreateVehicle ;
2566: LD_ADDR_VAR 0 2
2570: PUSH
2571: CALL_OW 45
2575: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2576: LD_VAR 0 2
2580: PPUSH
2581: LD_INT 4
2583: PPUSH
2584: LD_INT 0
2586: PPUSH
2587: CALL_OW 49
// SetDir ( veh , 4 ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_INT 4
2598: PPUSH
2599: CALL_OW 233
// vc_control = 3 ;
2603: LD_ADDR_OWVAR 38
2607: PUSH
2608: LD_INT 3
2610: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2611: LD_ADDR_OWVAR 40
2615: PUSH
2616: LD_INT 12
2618: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2619: LD_ADDR_EXP 17
2623: PUSH
2624: CALL_OW 45
2628: ST_TO_ADDR
// amCargo4 = CreateVehicle ;
2629: LD_ADDR_EXP 18
2633: PUSH
2634: CALL_OW 45
2638: ST_TO_ADDR
// amCargo5 = CreateVehicle ;
2639: LD_ADDR_EXP 19
2643: PUSH
2644: CALL_OW 45
2648: ST_TO_ADDR
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2649: LD_EXP 17
2653: PPUSH
2654: LD_INT 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2664: LD_EXP 18
2668: PPUSH
2669: LD_INT 4
2671: PPUSH
2672: LD_INT 0
2674: PPUSH
2675: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2679: LD_EXP 19
2683: PPUSH
2684: LD_INT 4
2686: PPUSH
2687: LD_INT 0
2689: PPUSH
2690: CALL_OW 49
// SetDir ( amCargo3 , 4 ) ;
2694: LD_EXP 17
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: CALL_OW 233
// SetDir ( amCargo4 , 4 ) ;
2706: LD_EXP 18
2710: PPUSH
2711: LD_INT 4
2713: PPUSH
2714: CALL_OW 233
// SetDir ( amCargo5 , 4 ) ;
2718: LD_EXP 19
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: CALL_OW 233
// AddCargo ( amCargo3 , 1 , 100 ) ;
2730: LD_EXP 17
2734: PPUSH
2735: LD_INT 1
2737: PPUSH
2738: LD_INT 100
2740: PPUSH
2741: CALL_OW 291
// AddCargo ( amCargo4 , 2 , 100 ) ;
2745: LD_EXP 18
2749: PPUSH
2750: LD_INT 2
2752: PPUSH
2753: LD_INT 100
2755: PPUSH
2756: CALL_OW 291
// AddCargo ( amCargo5 , 1 , 50 ) ;
2760: LD_EXP 19
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: LD_INT 50
2770: PPUSH
2771: CALL_OW 291
// AddCargo ( amCargo5 , 2 , 50 ) ;
2775: LD_EXP 19
2779: PPUSH
2780: LD_INT 2
2782: PPUSH
2783: LD_INT 50
2785: PPUSH
2786: CALL_OW 291
// end ;
2790: LD_VAR 0 1
2794: RET
// export function PowellSupport3 ; var veh , un ; begin
2795: LD_INT 0
2797: PPUSH
2798: PPUSH
2799: PPUSH
// uc_side = 1 ;
2800: LD_ADDR_OWVAR 20
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// uc_nation = 1 ;
2808: LD_ADDR_OWVAR 21
2812: PUSH
2813: LD_INT 1
2815: ST_TO_ADDR
// PrepareAmericansRandom ;
2816: CALL 1378 0 0
// vc_chassis = us_medium_wheeled ;
2820: LD_ADDR_OWVAR 37
2824: PUSH
2825: LD_INT 2
2827: ST_TO_ADDR
// vc_engine = 3 ;
2828: LD_ADDR_OWVAR 39
2832: PUSH
2833: LD_INT 3
2835: ST_TO_ADDR
// vc_control = 3 ;
2836: LD_ADDR_OWVAR 38
2840: PUSH
2841: LD_INT 3
2843: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2844: LD_ADDR_OWVAR 40
2848: PUSH
2849: LD_INT 12
2851: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2852: LD_ADDR_EXP 20
2856: PUSH
2857: CALL_OW 45
2861: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2862: LD_ADDR_EXP 21
2866: PUSH
2867: CALL_OW 45
2871: ST_TO_ADDR
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2872: LD_EXP 20
2876: PPUSH
2877: LD_INT 4
2879: PPUSH
2880: LD_INT 0
2882: PPUSH
2883: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2887: LD_EXP 21
2891: PPUSH
2892: LD_INT 4
2894: PPUSH
2895: LD_INT 0
2897: PPUSH
2898: CALL_OW 49
// SetDir ( amCargo6 , 4 ) ;
2902: LD_EXP 20
2906: PPUSH
2907: LD_INT 4
2909: PPUSH
2910: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2914: LD_EXP 21
2918: PPUSH
2919: LD_INT 4
2921: PPUSH
2922: CALL_OW 233
// AddCargo ( amCargo6 , 1 , 100 ) ;
2926: LD_EXP 20
2930: PPUSH
2931: LD_INT 1
2933: PPUSH
2934: LD_INT 100
2936: PPUSH
2937: CALL_OW 291
// AddCargo ( amCargo7 , 2 , 100 ) ;
2941: LD_EXP 21
2945: PPUSH
2946: LD_INT 2
2948: PPUSH
2949: LD_INT 100
2951: PPUSH
2952: CALL_OW 291
// end ; end_of_file
2956: LD_VAR 0 1
2960: RET
// export function PrepareRussianCommander ; begin
2961: LD_INT 0
2963: PPUSH
// uc_side = 3 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 3
2971: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2972: LD_ADDR_EXP 23
2976: PUSH
2977: LD_STRING Davidov
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL 11795 0 2
2987: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2988: LD_EXP 23
2992: PPUSH
2993: LD_INT 3
2995: PPUSH
2996: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3000: LD_ADDR_EXP 34
3004: PUSH
3005: LD_EXP 34
3009: PUSH
3010: LD_EXP 23
3014: ADD
3015: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3016: LD_EXP 34
3020: PPUSH
3021: LD_INT 4
3023: PPUSH
3024: CALL_OW 336
// end ;
3028: LD_VAR 0 1
3032: RET
// export function PrepareEastBase ; var i , un ; begin
3033: LD_INT 0
3035: PPUSH
3036: PPUSH
3037: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 3
3043: PPUSH
3044: LD_INT 121
3046: PPUSH
3047: LD_EXP 36
3051: PPUSH
3052: LD_EXP 37
3056: PPUSH
3057: CALL_OW 12
3061: PPUSH
3062: LD_INT 1
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3072: LD_INT 3
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: LD_INT 121
3080: PPUSH
3081: LD_EXP 36
3085: PPUSH
3086: LD_EXP 37
3090: PPUSH
3091: CALL_OW 12
3095: PPUSH
3096: LD_INT 9
3098: PPUSH
3099: LD_INT 3
3101: PPUSH
3102: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3106: LD_INT 3
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 4
3114: PPUSH
3115: LD_EXP 36
3119: PPUSH
3120: LD_EXP 37
3124: PPUSH
3125: CALL_OW 12
3129: PPUSH
3130: LD_INT 2
3132: PPUSH
3133: LD_INT 6
3135: PPUSH
3136: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3140: LD_INT 3
3142: PPUSH
3143: LD_INT 3
3145: PPUSH
3146: LD_INT 112
3148: PPUSH
3149: LD_EXP 36
3153: PPUSH
3154: LD_EXP 37
3158: PPUSH
3159: CALL_OW 12
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: LD_INT 6
3169: PPUSH
3170: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3174: LD_INT 3
3176: PPUSH
3177: LD_INT 3
3179: PPUSH
3180: LD_INT 47
3182: PPUSH
3183: LD_EXP 36
3187: PPUSH
3188: LD_EXP 37
3192: PPUSH
3193: CALL_OW 12
3197: PPUSH
3198: LD_INT 4
3200: PPUSH
3201: LD_INT 6
3203: PPUSH
3204: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3208: LD_INT 3
3210: PPUSH
3211: LD_INT 3
3213: PPUSH
3214: LD_INT 129
3216: PPUSH
3217: LD_EXP 36
3221: PPUSH
3222: LD_EXP 37
3226: PPUSH
3227: CALL_OW 12
3231: PPUSH
3232: LD_INT 4
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3242: LD_INT 3
3244: PPUSH
3245: LD_INT 3
3247: PPUSH
3248: LD_INT 135
3250: PPUSH
3251: LD_EXP 36
3255: PPUSH
3256: LD_EXP 37
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: LD_INT 4
3268: PPUSH
3269: LD_INT 6
3271: PPUSH
3272: CALL 12587 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 3
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 30
3293: PUSH
3294: LD_INT 32
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: PUSH
3310: FOR_IN
3311: IFFALSE 3351
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3313: LD_INT 3
3315: PPUSH
3316: LD_INT 3
3318: PPUSH
3319: LD_VAR 0 2
3323: PPUSH
3324: LD_EXP 36
3328: PPUSH
3329: LD_EXP 37
3333: PPUSH
3334: CALL_OW 12
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL 12587 0 6
3349: GO 3310
3351: POP
3352: POP
// for i = 1 to 5 do
3353: LD_ADDR_VAR 0 2
3357: PUSH
3358: DOUBLE
3359: LD_INT 1
3361: DEC
3362: ST_TO_ADDR
3363: LD_INT 5
3365: PUSH
3366: FOR_TO
3367: IFFALSE 3466
// begin uc_side = 3 ;
3369: LD_ADDR_OWVAR 20
3373: PUSH
3374: LD_INT 3
3376: ST_TO_ADDR
// uc_nation = 3 ;
3377: LD_ADDR_OWVAR 21
3381: PUSH
3382: LD_INT 3
3384: ST_TO_ADDR
// hc_gallery =  ;
3385: LD_ADDR_OWVAR 33
3389: PUSH
3390: LD_STRING 
3392: ST_TO_ADDR
// hc_name =  ;
3393: LD_ADDR_OWVAR 26
3397: PUSH
3398: LD_STRING 
3400: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: LD_EXP 36
3411: PPUSH
3412: LD_EXP 37
3416: PPUSH
3417: CALL_OW 12
3421: PPUSH
3422: CALL_OW 380
// un = CreateHuman ;
3426: LD_ADDR_VAR 0 3
3430: PUSH
3431: CALL_OW 44
3435: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: LD_INT 3
3443: PPUSH
3444: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3448: LD_ADDR_EXP 34
3452: PUSH
3453: LD_EXP 34
3457: PUSH
3458: LD_VAR 0 3
3462: ADD
3463: ST_TO_ADDR
// end ;
3464: GO 3366
3466: POP
3467: POP
// end ;
3468: LD_VAR 0 1
3472: RET
// export function PrepareWestBase ; var i , un ; begin
3473: LD_INT 0
3475: PPUSH
3476: PPUSH
3477: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3478: LD_INT 3
3480: PPUSH
3481: LD_INT 3
3483: PPUSH
3484: LD_INT 6
3486: PPUSH
3487: LD_EXP 36
3491: PPUSH
3492: LD_EXP 37
3496: PPUSH
3497: CALL_OW 12
3501: PPUSH
3502: LD_INT 2
3504: PPUSH
3505: LD_INT 3
3507: PPUSH
3508: CALL 12587 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3512: LD_INT 3
3514: PPUSH
3515: LD_INT 3
3517: PPUSH
3518: LD_INT 91
3520: PPUSH
3521: LD_EXP 36
3525: PPUSH
3526: LD_EXP 37
3530: PPUSH
3531: CALL_OW 12
3535: PPUSH
3536: LD_INT 4
3538: PPUSH
3539: LD_INT 3
3541: PPUSH
3542: CALL 12587 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3546: LD_INT 3
3548: PPUSH
3549: LD_INT 3
3551: PPUSH
3552: LD_INT 21
3554: PPUSH
3555: LD_EXP 36
3559: PPUSH
3560: LD_EXP 37
3564: PPUSH
3565: CALL_OW 12
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_INT 6
3575: PPUSH
3576: CALL 12587 0 6
// end ;
3580: LD_VAR 0 1
3584: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3585: LD_INT 0
3587: PPUSH
3588: PPUSH
3589: PPUSH
3590: PPUSH
// uc_side = 3 ;
3591: LD_ADDR_OWVAR 20
3595: PUSH
3596: LD_INT 3
3598: ST_TO_ADDR
// uc_nation = 3 ;
3599: LD_ADDR_OWVAR 21
3603: PUSH
3604: LD_INT 3
3606: ST_TO_ADDR
// for i = 1 to 5 do
3607: LD_ADDR_VAR 0 2
3611: PUSH
3612: DOUBLE
3613: LD_INT 1
3615: DEC
3616: ST_TO_ADDR
3617: LD_INT 5
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3691
// begin hc_gallery =  ;
3623: LD_ADDR_OWVAR 33
3627: PUSH
3628: LD_STRING 
3630: ST_TO_ADDR
// hc_name =  ;
3631: LD_ADDR_OWVAR 26
3635: PUSH
3636: LD_STRING 
3638: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3639: LD_INT 0
3641: PPUSH
3642: LD_INT 9
3644: PPUSH
3645: LD_EXP 36
3649: PPUSH
3650: LD_EXP 37
3654: PPUSH
3655: CALL_OW 12
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_INT 8
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// end ;
3689: GO 3620
3691: POP
3692: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3693: LD_ADDR_VAR 0 2
3697: PUSH
3698: DOUBLE
3699: LD_INT 1
3701: DEC
3702: ST_TO_ADDR
3703: LD_INT 2
3705: PUSH
3706: LD_INT 3
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_OWVAR 67
3721: ARRAY
3722: PUSH
3723: FOR_TO
3724: IFFALSE 3794
// begin hc_gallery =  ;
3726: LD_ADDR_OWVAR 33
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// hc_name =  ;
3734: LD_ADDR_OWVAR 26
3738: PUSH
3739: LD_STRING 
3741: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3742: LD_INT 0
3744: PPUSH
3745: LD_INT 4
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: LD_EXP 37
3757: PPUSH
3758: CALL_OW 12
3762: PPUSH
3763: CALL_OW 380
// un = CreateHuman ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 44
3776: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3777: LD_VAR 0 3
3781: PPUSH
3782: LD_INT 8
3784: PPUSH
3785: LD_INT 0
3787: PPUSH
3788: CALL_OW 49
// end ;
3792: GO 3723
3794: POP
3795: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_INT 3
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PUSH
3826: FOR_TO
3827: IFFALSE 4023
// begin vc_engine = 3 ;
3829: LD_ADDR_OWVAR 39
3833: PUSH
3834: LD_INT 3
3836: ST_TO_ADDR
// vc_control = 1 ;
3837: LD_ADDR_OWVAR 38
3841: PUSH
3842: LD_INT 1
3844: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3845: LD_ADDR_OWVAR 40
3849: PUSH
3850: LD_INT 42
3852: PUSH
3853: LD_INT 43
3855: PUSH
3856: LD_INT 44
3858: PUSH
3859: LD_INT 45
3861: PUSH
3862: LD_INT 46
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_INT 1
3874: PPUSH
3875: LD_INT 5
3877: PPUSH
3878: CALL_OW 12
3882: ARRAY
3883: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3884: LD_OWVAR 40
3888: PUSH
3889: LD_INT 46
3891: EQUAL
3892: IFFALSE 3904
// vc_chassis = ru_heavy_tracked else
3894: LD_ADDR_OWVAR 37
3898: PUSH
3899: LD_INT 24
3901: ST_TO_ADDR
3902: GO 3931
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3904: LD_ADDR_OWVAR 37
3908: PUSH
3909: LD_INT 22
3911: PUSH
3912: LD_INT 21
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: LD_INT 1
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: CALL_OW 12
3929: ARRAY
3930: ST_TO_ADDR
// veh = CreateVehicle ;
3931: LD_ADDR_VAR 0 4
3935: PUSH
3936: CALL_OW 45
3940: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3941: LD_VAR 0 4
3945: PPUSH
3946: LD_INT 3
3948: PPUSH
3949: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3953: LD_VAR 0 4
3957: PPUSH
3958: LD_INT 5
3960: PPUSH
3961: LD_INT 0
3963: PPUSH
3964: CALL_OW 49
// hc_gallery =  ;
3968: LD_ADDR_OWVAR 33
3972: PUSH
3973: LD_STRING 
3975: ST_TO_ADDR
// hc_name =  ;
3976: LD_ADDR_OWVAR 26
3980: PUSH
3981: LD_STRING 
3983: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3984: LD_INT 0
3986: PPUSH
3987: LD_INT 3
3989: PPUSH
3990: LD_INT 10
3992: PPUSH
3993: CALL_OW 380
// un = CreateHuman ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: CALL_OW 44
4006: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_VAR 0 4
4016: PPUSH
4017: CALL_OW 52
// end ;
4021: GO 3826
4023: POP
4024: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: DOUBLE
4031: LD_INT 1
4033: DEC
4034: ST_TO_ADDR
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 5
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: PUSH
4049: LD_OWVAR 67
4053: ARRAY
4054: PUSH
4055: FOR_TO
4056: IFFALSE 4203
// begin vc_engine = 3 ;
4058: LD_ADDR_OWVAR 39
4062: PUSH
4063: LD_INT 3
4065: ST_TO_ADDR
// vc_control = 3 ;
4066: LD_ADDR_OWVAR 38
4070: PUSH
4071: LD_INT 3
4073: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4074: LD_ADDR_OWVAR 40
4078: PUSH
4079: LD_INT 42
4081: PUSH
4082: LD_INT 43
4084: PUSH
4085: LD_INT 44
4087: PUSH
4088: LD_INT 45
4090: PUSH
4091: LD_INT 46
4093: PUSH
4094: LD_INT 49
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: PUSH
4105: LD_INT 1
4107: PPUSH
4108: LD_INT 5
4110: PPUSH
4111: CALL_OW 12
4115: ARRAY
4116: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4117: LD_OWVAR 40
4121: PUSH
4122: LD_INT 46
4124: EQUAL
4125: IFFALSE 4137
// vc_chassis = ru_heavy_tracked else
4127: LD_ADDR_OWVAR 37
4131: PUSH
4132: LD_INT 24
4134: ST_TO_ADDR
4135: GO 4164
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4137: LD_ADDR_OWVAR 37
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 21
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 1
4154: PPUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL_OW 12
4162: ARRAY
4163: ST_TO_ADDR
// veh = CreateVehicle ;
4164: LD_ADDR_VAR 0 4
4168: PUSH
4169: CALL_OW 45
4173: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4174: LD_VAR 0 4
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4186: LD_VAR 0 4
4190: PPUSH
4191: LD_INT 6
4193: PPUSH
4194: LD_INT 0
4196: PPUSH
4197: CALL_OW 49
// end ;
4201: GO 4055
4203: POP
4204: POP
// end ; end_of_file
4205: LD_VAR 0 1
4209: RET
// export function PrepareKurt ; begin
4210: LD_INT 0
4212: PPUSH
// uc_side = 8 ;
4213: LD_ADDR_OWVAR 20
4217: PUSH
4218: LD_INT 8
4220: ST_TO_ADDR
// uc_nation = 2 ;
4221: LD_ADDR_OWVAR 21
4225: PUSH
4226: LD_INT 2
4228: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4229: LD_ADDR_OWVAR 37
4233: PUSH
4234: LD_INT 13
4236: ST_TO_ADDR
// vc_engine = 1 ;
4237: LD_ADDR_OWVAR 39
4241: PUSH
4242: LD_INT 1
4244: ST_TO_ADDR
// vc_control = 1 ;
4245: LD_ADDR_OWVAR 38
4249: PUSH
4250: LD_INT 1
4252: ST_TO_ADDR
// vc_weapon = 24 ;
4253: LD_ADDR_OWVAR 40
4257: PUSH
4258: LD_INT 24
4260: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4261: LD_ADDR_EXP 26
4265: PUSH
4266: CALL_OW 45
4270: ST_TO_ADDR
// if kurtStatus > 0 then
4271: LD_EXP 27
4275: PUSH
4276: LD_INT 0
4278: GREATER
4279: IFFALSE 4328
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4281: LD_ADDR_EXP 24
4285: PUSH
4286: LD_STRING Kurt
4288: PPUSH
4289: LD_INT 0
4291: PPUSH
4292: CALL 11795 0 2
4296: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4297: LD_EXP 26
4301: PPUSH
4302: LD_INT 4
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4312: LD_EXP 24
4316: PPUSH
4317: LD_EXP 26
4321: PPUSH
4322: CALL_OW 52
// end else
4326: GO 4389
// begin hc_name =  ;
4328: LD_ADDR_OWVAR 26
4332: PUSH
4333: LD_STRING 
4335: ST_TO_ADDR
// hc_gallery =  ;
4336: LD_ADDR_OWVAR 33
4340: PUSH
4341: LD_STRING 
4343: ST_TO_ADDR
// otherKurt = PrepareSoldier ( sex_male , 10 ) ;
4344: LD_ADDR_EXP 25
4348: PUSH
4349: LD_INT 1
4351: PPUSH
4352: LD_INT 10
4354: PPUSH
4355: CALL_OW 381
4359: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4360: LD_EXP 26
4364: PPUSH
4365: LD_INT 4
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4375: LD_EXP 25
4379: PPUSH
4380: LD_EXP 26
4384: PPUSH
4385: CALL_OW 52
// end ; end ;
4389: LD_VAR 0 1
4393: RET
// export function PrepareLegionForPlayer ; var i , un ; begin
4394: LD_INT 0
4396: PPUSH
4397: PPUSH
4398: PPUSH
// for i = 1 to 6 do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 6
4411: PUSH
4412: FOR_TO
4413: IFFALSE 4592
// begin uc_side = 1 ;
4415: LD_ADDR_OWVAR 20
4419: PUSH
4420: LD_INT 1
4422: ST_TO_ADDR
// uc_nation = 2 ;
4423: LD_ADDR_OWVAR 21
4427: PUSH
4428: LD_INT 2
4430: ST_TO_ADDR
// hc_gallery =  ;
4431: LD_ADDR_OWVAR 33
4435: PUSH
4436: LD_STRING 
4438: ST_TO_ADDR
// hc_name =  ;
4439: LD_ADDR_OWVAR 26
4443: PUSH
4444: LD_STRING 
4446: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4447: LD_EXP 27
4451: PUSH
4452: LD_INT 0
4454: EQUAL
4455: PUSH
4456: LD_EXP 27
4460: PUSH
4461: LD_INT 2
4463: EQUAL
4464: OR
4465: IFFALSE 4517
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , Rand ( 2 , 4 ) ) else
4467: LD_INT 0
4469: PPUSH
4470: LD_INT 1
4472: PUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 3
4478: PUSH
4479: LD_INT 4
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 1
4490: PPUSH
4491: LD_INT 4
4493: PPUSH
4494: CALL_OW 12
4498: ARRAY
4499: PPUSH
4500: LD_INT 2
4502: PPUSH
4503: LD_INT 4
4505: PPUSH
4506: CALL_OW 12
4510: PPUSH
4511: CALL_OW 380
4515: GO 4565
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , Rand ( 6 , 8 ) ) ;
4517: LD_INT 0
4519: PPUSH
4520: LD_INT 1
4522: PUSH
4523: LD_INT 2
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: LD_INT 4
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 1
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: CALL_OW 12
4548: ARRAY
4549: PPUSH
4550: LD_INT 6
4552: PPUSH
4553: LD_INT 8
4555: PPUSH
4556: CALL_OW 12
4560: PPUSH
4561: CALL_OW 380
// un = CreateHuman ;
4565: LD_ADDR_VAR 0 3
4569: PUSH
4570: CALL_OW 44
4574: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_INT 4
4582: PPUSH
4583: LD_INT 0
4585: PPUSH
4586: CALL_OW 49
// end ;
4590: GO 4412
4592: POP
4593: POP
// end ;
4594: LD_VAR 0 1
4598: RET
// export function PrepareAttackLegion ; var i , un ; begin
4599: LD_INT 0
4601: PPUSH
4602: PPUSH
4603: PPUSH
// for i = 1 to 4 do
4604: LD_ADDR_VAR 0 2
4608: PUSH
4609: DOUBLE
4610: LD_INT 1
4612: DEC
4613: ST_TO_ADDR
4614: LD_INT 4
4616: PUSH
4617: FOR_TO
4618: IFFALSE 4719
// begin uc_side = 1 ;
4620: LD_ADDR_OWVAR 20
4624: PUSH
4625: LD_INT 1
4627: ST_TO_ADDR
// uc_nation = 2 ;
4628: LD_ADDR_OWVAR 21
4632: PUSH
4633: LD_INT 2
4635: ST_TO_ADDR
// hc_gallery =  ;
4636: LD_ADDR_OWVAR 33
4640: PUSH
4641: LD_STRING 
4643: ST_TO_ADDR
// hc_name =  ;
4644: LD_ADDR_OWVAR 26
4648: PUSH
4649: LD_STRING 
4651: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
4652: LD_INT 0
4654: PPUSH
4655: LD_INT 1
4657: PUSH
4658: LD_INT 8
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 1
4667: PPUSH
4668: LD_INT 2
4670: PPUSH
4671: CALL_OW 12
4675: ARRAY
4676: PPUSH
4677: LD_INT 6
4679: PPUSH
4680: LD_INT 8
4682: PPUSH
4683: CALL_OW 12
4687: PPUSH
4688: CALL_OW 380
// un = CreateHuman ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
4702: LD_VAR 0 3
4706: PPUSH
4707: LD_INT 19
4709: PPUSH
4710: LD_INT 0
4712: PPUSH
4713: CALL_OW 49
// end ;
4717: GO 4617
4719: POP
4720: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
4721: LD_INT 1
4723: PPUSH
4724: LD_INT 8
4726: PPUSH
4727: LD_INT 2
4729: PPUSH
4730: LD_INT 1
4732: PPUSH
4733: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
4737: LD_INT 20
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL 14753 0 2
// end ; end_of_file
4747: LD_VAR 0 1
4751: RET
// every 1 do var i ;
4752: GO 4754
4754: DISABLE
4755: LD_INT 0
4757: PPUSH
// begin TeleportExit ( ruteleprt , 117 , 131 ) ;
4758: LD_INT 10
4760: PPUSH
4761: LD_INT 117
4763: PPUSH
4764: LD_INT 131
4766: PPUSH
4767: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4771: LD_INT 137
4773: PPUSH
4774: LD_INT 84
4776: PPUSH
4777: LD_INT 61
4779: PPUSH
4780: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
4784: LD_EXP 1
4788: PPUSH
4789: CALL_OW 310
4793: PPUSH
4794: CALL_OW 87
// InGameOn ;
4798: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 102 ) ;
4802: LD_INT 22
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PPUSH
4812: CALL_OW 69
4816: PPUSH
4817: LD_INT 130
4819: PPUSH
4820: LD_INT 102
4822: PPUSH
4823: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
4827: LD_VAR 0 1
4831: PPUSH
4832: LD_INT 114
4834: PPUSH
4835: LD_INT 102
4837: PPUSH
4838: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
4842: LD_EXP 1
4846: PPUSH
4847: LD_STRING D1-JMM-1
4849: PPUSH
4850: CALL_OW 88
// if IsOk ( Donaldson ) then
4854: LD_EXP 3
4858: PPUSH
4859: CALL_OW 302
4863: IFFALSE 4901
// begin Say ( Donaldson , D1-Don-1 ) ;
4865: LD_EXP 3
4869: PPUSH
4870: LD_STRING D1-Don-1
4872: PPUSH
4873: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
4877: LD_EXP 1
4881: PPUSH
4882: LD_STRING D1-JMM-2
4884: PPUSH
4885: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
4889: LD_EXP 3
4893: PPUSH
4894: LD_STRING D1-Don-2
4896: PPUSH
4897: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 104 , 96 ) ;
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PPUSH
4911: CALL_OW 69
4915: PPUSH
4916: LD_INT 104
4918: PPUSH
4919: LD_INT 96
4921: PPUSH
4922: CALL_OW 171
// end ;
4926: PPOPN 1
4928: END
// every 0 0$1 trigger SeeXY ( 1 , 101 , 92 ) do var i ;
4929: LD_INT 1
4931: PPUSH
4932: LD_INT 101
4934: PPUSH
4935: LD_INT 92
4937: PPUSH
4938: CALL_OW 293
4942: IFFALSE 5117
4944: GO 4946
4946: DISABLE
4947: LD_INT 0
4949: PPUSH
// begin CenterOnXY ( 99 , 89 ) ;
4950: LD_INT 99
4952: PPUSH
4953: LD_INT 89
4955: PPUSH
4956: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
4960: LD_INT 22
4962: PUSH
4963: LD_INT 1
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 26
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_INT 2
4982: PUSH
4983: LD_INT 25
4985: PUSH
4986: LD_INT 1
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 25
4995: PUSH
4996: LD_INT 2
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 25
5005: PUSH
5006: LD_INT 3
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 25
5015: PUSH
5016: LD_INT 4
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PUSH
5035: LD_EXP 1
5039: DIFF
5040: PPUSH
5041: CALL_OW 69
5045: PPUSH
5046: LD_STRING D1-Sol1-2
5048: PPUSH
5049: LD_STRING 
5051: PPUSH
5052: CALL 11903 0 3
// Say ( JMM , D1-JMM-3 ) ;
5056: LD_EXP 1
5060: PPUSH
5061: LD_STRING D1-JMM-3
5063: PPUSH
5064: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5068: LD_STRING M1
5070: PPUSH
5071: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5075: LD_ADDR_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PPUSH
5090: CALL_OW 69
5094: PUSH
5095: FOR_IN
5096: IFFALSE 5115
// ComMoveXY ( i , 93 , 83 ) ;
5098: LD_VAR 0 1
5102: PPUSH
5103: LD_INT 93
5105: PPUSH
5106: LD_INT 83
5108: PPUSH
5109: CALL_OW 111
5113: GO 5095
5115: POP
5116: POP
// end ;
5117: PPOPN 1
5119: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5120: GO 5122
5122: DISABLE
5123: LD_INT 0
5125: PPUSH
5126: PPUSH
5127: PPUSH
5128: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_INT 8
5136: PPUSH
5137: LD_INT 22
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 25
5149: PUSH
5150: LD_INT 9
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PPUSH
5161: CALL_OW 70
5165: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 22
5173: PUSH
5174: LD_INT 1
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: PPUSH
5184: CALL_OW 69
5188: ST_TO_ADDR
// enable ;
5189: ENABLE
// for i in your_units do
5190: LD_ADDR_VAR 0 1
5194: PUSH
5195: LD_VAR 0 3
5199: PUSH
5200: FOR_IN
5201: IFFALSE 5816
// begin if See ( 3 , i ) then
5203: LD_INT 3
5205: PPUSH
5206: LD_VAR 0 1
5210: PPUSH
5211: CALL_OW 292
5215: IFFALSE 5814
// begin disable ;
5217: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_INT 96
5225: PPUSH
5226: LD_INT 85
5228: PPUSH
5229: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 96
5240: PPUSH
5241: LD_INT 85
5243: PPUSH
5244: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5248: LD_VAR 0 2
5252: PPUSH
5253: LD_INT 96
5255: PPUSH
5256: LD_INT 85
5258: PPUSH
5259: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5263: LD_VAR 0 2
5267: PPUSH
5268: LD_INT 96
5270: PPUSH
5271: LD_INT 85
5273: PPUSH
5274: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5278: LD_VAR 0 2
5282: PPUSH
5283: LD_INT 96
5285: PPUSH
5286: LD_INT 85
5288: PPUSH
5289: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5293: LD_VAR 0 2
5297: PPUSH
5298: LD_INT 96
5300: PPUSH
5301: LD_INT 85
5303: PPUSH
5304: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5308: LD_EXP 1
5312: PPUSH
5313: LD_STRING D1a-JMM-1
5315: PPUSH
5316: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5320: LD_EXP 3
5324: PPUSH
5325: LD_STRING D1a-Don-1
5327: PPUSH
5328: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5332: LD_ADDR_VAR 0 1
5336: PUSH
5337: LD_INT 22
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PPUSH
5347: CALL_OW 69
5351: PUSH
5352: FOR_IN
5353: IFFALSE 5372
// ComMoveXY ( i , 109 , 102 ) ;
5355: LD_VAR 0 1
5359: PPUSH
5360: LD_INT 109
5362: PPUSH
5363: LD_INT 102
5365: PPUSH
5366: CALL_OW 111
5370: GO 5352
5372: POP
5373: POP
// Say ( JMM , D1a-JMM-2 ) ;
5374: LD_EXP 1
5378: PPUSH
5379: LD_STRING D1a-JMM-2
5381: PPUSH
5382: CALL_OW 88
// wait ( 0 0$10 ) ;
5386: LD_INT 350
5388: PPUSH
5389: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5393: LD_EXP 1
5397: PPUSH
5398: CALL_OW 310
5402: PPUSH
5403: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5407: LD_EXP 3
5411: PPUSH
5412: LD_STRING D1b-Don-1
5414: PPUSH
5415: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5419: LD_EXP 1
5423: PPUSH
5424: LD_STRING D1b-JMM-1
5426: PPUSH
5427: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5431: LD_INT 22
5433: PUSH
5434: LD_INT 1
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: LD_INT 26
5443: PUSH
5444: LD_INT 1
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 2
5453: PUSH
5454: LD_INT 25
5456: PUSH
5457: LD_INT 1
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 25
5466: PUSH
5467: LD_INT 2
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 25
5476: PUSH
5477: LD_INT 3
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 25
5486: PUSH
5487: LD_INT 4
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: PUSH
5506: LD_EXP 1
5510: PUSH
5511: EMPTY
5512: LIST
5513: DIFF
5514: PPUSH
5515: CALL_OW 69
5519: PPUSH
5520: LD_STRING D1b-Sol1-1
5522: PPUSH
5523: LD_STRING 
5525: PPUSH
5526: CALL 11903 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5530: LD_EXP 3
5534: PPUSH
5535: LD_STRING D1b-Don-2
5537: PPUSH
5538: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5542: LD_EXP 1
5546: PPUSH
5547: LD_STRING D1b-JMM-2
5549: PPUSH
5550: CALL_OW 88
// dec = ShowQuery1 ;
5554: LD_ADDR_VAR 0 4
5558: PUSH
5559: CALL 12439 0 0
5563: ST_TO_ADDR
// if dec = 1 then
5564: LD_VAR 0 4
5568: PUSH
5569: LD_INT 1
5571: EQUAL
5572: IFFALSE 5678
// begin Say ( JMM , D2-JMM-1 ) ;
5574: LD_EXP 1
5578: PPUSH
5579: LD_STRING D2-JMM-1
5581: PPUSH
5582: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5586: LD_EXP 22
5590: PPUSH
5591: LD_STRING D2-Pow-1
5593: PPUSH
5594: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
5598: LD_EXP 1
5602: PPUSH
5603: LD_STRING D2a-JMM-1
5605: PPUSH
5606: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
5610: LD_EXP 22
5614: PPUSH
5615: LD_STRING D2a-Pow-1
5617: PPUSH
5618: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
5622: LD_EXP 1
5626: PPUSH
5627: LD_STRING D2a-JMM-2
5629: PPUSH
5630: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
5634: LD_EXP 22
5638: PPUSH
5639: LD_STRING D2a-Pow-2
5641: PPUSH
5642: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
5646: LD_EXP 1
5650: PPUSH
5651: LD_STRING D2a-JMM-3
5653: PPUSH
5654: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
5658: LD_EXP 22
5662: PPUSH
5663: LD_STRING D2a-Pow-3
5665: PPUSH
5666: CALL_OW 94
// secondPass = 2 ;
5670: LD_ADDR_EXP 28
5674: PUSH
5675: LD_INT 2
5677: ST_TO_ADDR
// end ; if dec = 2 then
5678: LD_VAR 0 4
5682: PUSH
5683: LD_INT 2
5685: EQUAL
5686: IFFALSE 5780
// begin Say ( JMM , D2-JMM-1 ) ;
5688: LD_EXP 1
5692: PPUSH
5693: LD_STRING D2-JMM-1
5695: PPUSH
5696: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5700: LD_EXP 22
5704: PPUSH
5705: LD_STRING D2-Pow-1
5707: PPUSH
5708: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
5712: LD_EXP 1
5716: PPUSH
5717: LD_STRING D2b-JMM-1
5719: PPUSH
5720: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
5724: LD_EXP 22
5728: PPUSH
5729: LD_STRING D2b-Pow-1
5731: PPUSH
5732: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
5736: LD_EXP 1
5740: PPUSH
5741: LD_STRING D2c-JMM-1
5743: PPUSH
5744: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
5748: LD_EXP 22
5752: PPUSH
5753: LD_STRING D2c-Pow-1
5755: PPUSH
5756: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
5760: LD_EXP 1
5764: PPUSH
5765: LD_STRING D2c-JMM-2
5767: PPUSH
5768: CALL_OW 88
// secondPass = 2 ;
5772: LD_ADDR_EXP 28
5776: PUSH
5777: LD_INT 2
5779: ST_TO_ADDR
// end ; if dec = 3 then
5780: LD_VAR 0 4
5784: PUSH
5785: LD_INT 3
5787: EQUAL
5788: IFFALSE 5798
// secondPass = 1 ;
5790: LD_ADDR_EXP 28
5794: PUSH
5795: LD_INT 1
5797: ST_TO_ADDR
// InGameOff ;
5798: CALL_OW 9
// ruAI = 1 ;
5802: LD_ADDR_EXP 41
5806: PUSH
5807: LD_INT 1
5809: ST_TO_ADDR
// exit ;
5810: POP
5811: POP
5812: GO 5818
// end ; end ;
5814: GO 5200
5816: POP
5817: POP
// end ;
5818: PPOPN 4
5820: END
// every 1 1$0 trigger secondPass = 2 do
5821: LD_EXP 28
5825: PUSH
5826: LD_INT 2
5828: EQUAL
5829: IFFALSE 5956
5831: GO 5833
5833: DISABLE
// begin PowellSupport1 ;
5834: CALL 1628 0 0
// DialogueOn ;
5838: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
5842: LD_EXP 1
5846: PPUSH
5847: LD_STRING DC1-JMM-1
5849: PPUSH
5850: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
5854: LD_EXP 22
5858: PPUSH
5859: LD_STRING DC1-Pow-1
5861: PPUSH
5862: CALL_OW 94
// DialogueOff ;
5866: CALL_OW 7
// wait ( 3 3$0 ) ;
5870: LD_INT 6300
5872: PPUSH
5873: CALL_OW 67
// PowellSupport2 ;
5877: CALL 2257 0 0
// DialogueOn ;
5881: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING DC2-JMM-1
5892: PPUSH
5893: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
5897: LD_EXP 22
5901: PPUSH
5902: LD_STRING DC2-Pow-1
5904: PPUSH
5905: CALL_OW 94
// DialogueOff ;
5909: CALL_OW 7
// wait ( 6 6$0 ) ;
5913: LD_INT 12600
5915: PPUSH
5916: CALL_OW 67
// PowellSupport3 ;
5920: CALL 2795 0 0
// DialogueOn ;
5924: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
5928: LD_EXP 22
5932: PPUSH
5933: LD_STRING DC3-Pow-1
5935: PPUSH
5936: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING DC3-JMM-1
5947: PPUSH
5948: CALL_OW 88
// DialogueOff ;
5952: CALL_OW 7
// end ;
5956: END
// every 4 4$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
5957: LD_EXP 28
5961: PUSH
5962: LD_INT 2
5964: EQUAL
5965: PUSH
5966: LD_INT 22
5968: PUSH
5969: LD_INT 1
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: PUSH
5976: LD_INT 2
5978: PUSH
5979: LD_INT 30
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: LD_INT 30
5991: PUSH
5992: LD_INT 1
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PPUSH
6008: CALL_OW 69
6012: PUSH
6013: LD_INT 0
6015: GREATER
6016: AND
6017: IFFALSE 9387
6019: GO 6021
6021: DISABLE
6022: LD_INT 0
6024: PPUSH
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
6029: PPUSH
6030: PPUSH
6031: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6032: LD_ADDR_VAR 0 4
6036: PUSH
6037: LD_INT 22
6039: PUSH
6040: LD_INT 1
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 21
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 2
6059: PUSH
6060: LD_INT 30
6062: PUSH
6063: LD_INT 0
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 30
6072: PUSH
6073: LD_INT 1
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: PPUSH
6090: CALL_OW 69
6094: ST_TO_ADDR
// for i in tmp do
6095: LD_ADDR_VAR 0 1
6099: PUSH
6100: LD_VAR 0 4
6104: PUSH
6105: FOR_IN
6106: IFFALSE 6139
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6108: LD_ADDR_VAR 0 6
6112: PUSH
6113: LD_VAR 0 6
6117: PUSH
6118: LD_VAR 0 1
6122: PPUSH
6123: CALL_OW 274
6127: PPUSH
6128: LD_INT 1
6130: PPUSH
6131: CALL_OW 275
6135: PLUS
6136: ST_TO_ADDR
6137: GO 6105
6139: POP
6140: POP
// for i in tmp do
6141: LD_ADDR_VAR 0 1
6145: PUSH
6146: LD_VAR 0 4
6150: PUSH
6151: FOR_IN
6152: IFFALSE 6185
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6154: LD_ADDR_VAR 0 7
6158: PUSH
6159: LD_VAR 0 7
6163: PUSH
6164: LD_VAR 0 1
6168: PPUSH
6169: CALL_OW 274
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 275
6181: PLUS
6182: ST_TO_ADDR
6183: GO 6151
6185: POP
6186: POP
// for i in tmp do
6187: LD_ADDR_VAR 0 1
6191: PUSH
6192: LD_VAR 0 4
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6231
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6200: LD_ADDR_VAR 0 8
6204: PUSH
6205: LD_VAR 0 8
6209: PUSH
6210: LD_VAR 0 1
6214: PPUSH
6215: CALL_OW 274
6219: PPUSH
6220: LD_INT 3
6222: PPUSH
6223: CALL_OW 275
6227: PLUS
6228: ST_TO_ADDR
6229: GO 6197
6231: POP
6232: POP
// PrepareKurt ;
6233: CALL 4210 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6237: LD_EXP 26
6241: PPUSH
6242: LD_INT 144
6244: PPUSH
6245: LD_INT 111
6247: PPUSH
6248: CALL_OW 111
// wait ( 0 0$2 ) ;
6252: LD_INT 70
6254: PPUSH
6255: CALL_OW 67
// if kurtStatus > 0 then
6259: LD_EXP 27
6263: PUSH
6264: LD_INT 0
6266: GREATER
6267: IFFALSE 7829
// begin ComExitVehicle ( Kurt ) ;
6269: LD_EXP 24
6273: PPUSH
6274: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6278: LD_EXP 24
6282: PPUSH
6283: CALL_OW 87
// wait ( 0 0$1 ) ;
6287: LD_INT 35
6289: PPUSH
6290: CALL_OW 67
// DialogueOn ;
6294: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
6298: LD_INT 22
6300: PUSH
6301: LD_INT 1
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 26
6310: PUSH
6311: LD_INT 1
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: LD_INT 25
6323: PUSH
6324: LD_INT 1
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 25
6333: PUSH
6334: LD_INT 2
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 4
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_EXP 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: DIFF
6381: PPUSH
6382: CALL_OW 69
6386: PPUSH
6387: LD_STRING D3-Sol1-1
6389: PPUSH
6390: LD_STRING 
6392: PPUSH
6393: CALL 11903 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6397: LD_EXP 24
6401: PPUSH
6402: LD_STRING D3-Kurt-1
6404: PPUSH
6405: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6409: LD_EXP 1
6413: PPUSH
6414: LD_STRING D3-JMM-1
6416: PPUSH
6417: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6421: LD_EXP 24
6425: PPUSH
6426: LD_STRING D3-Kurt-2
6428: PPUSH
6429: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6433: LD_EXP 1
6437: PPUSH
6438: LD_STRING D3-JMM-2
6440: PPUSH
6441: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6445: LD_EXP 24
6449: PPUSH
6450: LD_STRING D3-Kurt-4
6452: PPUSH
6453: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6457: LD_EXP 1
6461: PPUSH
6462: LD_STRING D3-JMM-4
6464: PPUSH
6465: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6469: LD_EXP 24
6473: PPUSH
6474: LD_STRING D3-Kurt-5
6476: PPUSH
6477: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6481: LD_EXP 24
6485: PPUSH
6486: LD_STRING D3-Kurt-5a
6488: PPUSH
6489: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
6493: LD_EXP 24
6497: PPUSH
6498: LD_STRING D3-Kurt-5b
6500: PPUSH
6501: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6505: LD_VAR 0 6
6509: PUSH
6510: LD_INT 60
6512: GREATEREQUAL
6513: PUSH
6514: LD_VAR 0 8
6518: PUSH
6519: LD_INT 60
6521: GREATEREQUAL
6522: AND
6523: IFFALSE 6558
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_STRING Q2K
6532: PPUSH
6533: LD_INT 1
6535: PUSH
6536: LD_INT 2
6538: PUSH
6539: LD_INT 3
6541: PUSH
6542: LD_INT 4
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: PPUSH
6551: CALL_OW 98
6555: ST_TO_ADDR
6556: GO 6581
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
6558: LD_ADDR_VAR 0 2
6562: PUSH
6563: LD_STRING Q2K
6565: PPUSH
6566: LD_INT 3
6568: PUSH
6569: LD_INT 4
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PPUSH
6576: CALL_OW 98
6580: ST_TO_ADDR
// if dec1 = 1 then
6581: LD_VAR 0 2
6585: PUSH
6586: LD_INT 1
6588: EQUAL
6589: IFFALSE 6623
// begin Say ( JMM , D3Ka-JMM-1 ) ;
6591: LD_EXP 1
6595: PPUSH
6596: LD_STRING D3Ka-JMM-1
6598: PPUSH
6599: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
6603: LD_EXP 24
6607: PPUSH
6608: LD_STRING D3Ka-Kurt-1
6610: PPUSH
6611: CALL_OW 88
// warWithLegion = 1 ;
6615: LD_ADDR_EXP 30
6619: PUSH
6620: LD_INT 1
6622: ST_TO_ADDR
// end ; if dec1 = 2 then
6623: LD_VAR 0 2
6627: PUSH
6628: LD_INT 2
6630: EQUAL
6631: IFFALSE 6857
// begin Say ( JMM , D3Kb-JMM-1 ) ;
6633: LD_EXP 1
6637: PPUSH
6638: LD_STRING D3Kb-JMM-1
6640: PPUSH
6641: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
6645: LD_EXP 24
6649: PPUSH
6650: LD_STRING D3Kb-Kurt-1
6652: PPUSH
6653: CALL_OW 88
// for i in tmp do
6657: LD_ADDR_VAR 0 1
6661: PUSH
6662: LD_VAR 0 4
6666: PUSH
6667: FOR_IN
6668: IFFALSE 6755
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
6670: LD_ADDR_VAR 0 5
6674: PUSH
6675: LD_VAR 0 1
6679: PPUSH
6680: CALL_OW 274
6684: PPUSH
6685: LD_INT 1
6687: PPUSH
6688: CALL_OW 275
6692: ST_TO_ADDR
// if tmp2 >= 60 then
6693: LD_VAR 0 5
6697: PUSH
6698: LD_INT 60
6700: GREATEREQUAL
6701: IFFALSE 6733
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
6703: LD_VAR 0 1
6707: PPUSH
6708: CALL_OW 274
6712: PPUSH
6713: LD_INT 1
6715: PPUSH
6716: LD_VAR 0 5
6720: PUSH
6721: LD_INT 60
6723: MINUS
6724: PPUSH
6725: CALL_OW 277
// break ;
6729: GO 6755
// end else
6731: GO 6753
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
6733: LD_VAR 0 1
6737: PPUSH
6738: CALL_OW 274
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: LD_INT 0
6748: PPUSH
6749: CALL_OW 277
// end ; end ;
6753: GO 6667
6755: POP
6756: POP
// for i in tmp do
6757: LD_ADDR_VAR 0 1
6761: PUSH
6762: LD_VAR 0 4
6766: PUSH
6767: FOR_IN
6768: IFFALSE 6855
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
6770: LD_ADDR_VAR 0 5
6774: PUSH
6775: LD_VAR 0 1
6779: PPUSH
6780: CALL_OW 274
6784: PPUSH
6785: LD_INT 3
6787: PPUSH
6788: CALL_OW 275
6792: ST_TO_ADDR
// if tmp2 >= 60 then
6793: LD_VAR 0 5
6797: PUSH
6798: LD_INT 60
6800: GREATEREQUAL
6801: IFFALSE 6833
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
6803: LD_VAR 0 1
6807: PPUSH
6808: CALL_OW 274
6812: PPUSH
6813: LD_INT 3
6815: PPUSH
6816: LD_VAR 0 5
6820: PUSH
6821: LD_INT 60
6823: MINUS
6824: PPUSH
6825: CALL_OW 277
// break ;
6829: GO 6855
// end else
6831: GO 6853
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
6833: LD_VAR 0 1
6837: PPUSH
6838: CALL_OW 274
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: LD_INT 0
6848: PPUSH
6849: CALL_OW 277
// end ; end ;
6853: GO 6767
6855: POP
6856: POP
// end ; if dec1 = 3 then
6857: LD_VAR 0 2
6861: PUSH
6862: LD_INT 3
6864: EQUAL
6865: IFFALSE 7100
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
6867: LD_EXP 1
6871: PPUSH
6872: LD_STRING D3Kc1-JMM-1
6874: PPUSH
6875: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
6879: LD_EXP 24
6883: PPUSH
6884: LD_STRING D3Kc1-Kurt-1
6886: PPUSH
6887: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
6891: LD_EXP 1
6895: PPUSH
6896: LD_STRING D3Kc1-JMM-2
6898: PPUSH
6899: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
6903: LD_EXP 24
6907: PPUSH
6908: LD_STRING D3Kc1-Kurt-2
6910: PPUSH
6911: CALL_OW 88
// askSiberite = 1 ;
6915: LD_ADDR_EXP 32
6919: PUSH
6920: LD_INT 1
6922: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
6923: LD_ADDR_VAR 0 2
6927: PUSH
6928: LD_STRING Q2b
6930: PPUSH
6931: LD_INT 1
6933: PUSH
6934: LD_INT 2
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: PPUSH
6945: CALL_OW 98
6949: ST_TO_ADDR
// if dec2 = 1 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 1
6957: EQUAL
6958: IFFALSE 6992
// begin Say ( JMM , D4a-JMM-1 ) ;
6960: LD_EXP 1
6964: PPUSH
6965: LD_STRING D4a-JMM-1
6967: PPUSH
6968: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
6972: LD_EXP 24
6976: PPUSH
6977: LD_STRING D4b-Kurt-1
6979: PPUSH
6980: CALL_OW 88
// warWithLegion = 1 ;
6984: LD_ADDR_EXP 30
6988: PUSH
6989: LD_INT 1
6991: ST_TO_ADDR
// end ; if dec2 = 2 then
6992: LD_VAR 0 3
6996: PUSH
6997: LD_INT 2
6999: EQUAL
7000: IFFALSE 7034
// begin Say ( JMM , D4b-JMM-1 ) ;
7002: LD_EXP 1
7006: PPUSH
7007: LD_STRING D4b-JMM-1
7009: PPUSH
7010: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7014: LD_EXP 24
7018: PPUSH
7019: LD_STRING D4b-Kurt-1
7021: PPUSH
7022: CALL_OW 88
// warWithLegion = 1 ;
7026: LD_ADDR_EXP 30
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// end ; if dec2 = 3 then
7034: LD_VAR 0 3
7038: PUSH
7039: LD_INT 3
7041: EQUAL
7042: IFFALSE 7100
// begin Say ( JMM , D4c-JMM-1 ) ;
7044: LD_EXP 1
7048: PPUSH
7049: LD_STRING D4c-JMM-1
7051: PPUSH
7052: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7056: LD_EXP 24
7060: PPUSH
7061: LD_STRING D4c-Kurt-1
7063: PPUSH
7064: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7068: LD_EXP 1
7072: PPUSH
7073: LD_STRING D4c-JMM-2
7075: PPUSH
7076: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7080: LD_EXP 24
7084: PPUSH
7085: LD_STRING D4c-Kurt-2
7087: PPUSH
7088: CALL_OW 88
// fakeInfo = 1 ;
7092: LD_ADDR_EXP 31
7096: PUSH
7097: LD_INT 1
7099: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7100: LD_VAR 0 2
7104: PUSH
7105: LD_INT 4
7107: EQUAL
7108: IFFALSE 7765
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7110: LD_EXP 1
7114: PPUSH
7115: LD_STRING D3Kd-JMM-1
7117: PPUSH
7118: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7122: LD_VAR 0 6
7126: PUSH
7127: LD_INT 120
7129: GREATEREQUAL
7130: PUSH
7131: LD_VAR 0 8
7135: PUSH
7136: LD_INT 120
7138: GREATEREQUAL
7139: AND
7140: IFFALSE 7175
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7142: LD_ADDR_VAR 0 3
7146: PUSH
7147: LD_STRING Q2aK
7149: PPUSH
7150: LD_INT 1
7152: PUSH
7153: LD_INT 2
7155: PUSH
7156: LD_INT 3
7158: PUSH
7159: LD_INT 4
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: PPUSH
7168: CALL_OW 98
7172: ST_TO_ADDR
7173: GO 7198
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7175: LD_ADDR_VAR 0 3
7179: PUSH
7180: LD_STRING Q2K
7182: PPUSH
7183: LD_INT 1
7185: PUSH
7186: LD_INT 4
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 98
7197: ST_TO_ADDR
// if dec2 = 1 then
7198: LD_VAR 0 3
7202: PUSH
7203: LD_INT 1
7205: EQUAL
7206: IFFALSE 7240
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7208: LD_EXP 1
7212: PPUSH
7213: LD_STRING D5Ka-JMM-1
7215: PPUSH
7216: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7220: LD_EXP 24
7224: PPUSH
7225: LD_STRING D5Ka-Kurt-1
7227: PPUSH
7228: CALL_OW 88
// warWithLegion = 1 ;
7232: LD_ADDR_EXP 30
7236: PUSH
7237: LD_INT 1
7239: ST_TO_ADDR
// end ; if dec2 = 2 then
7240: LD_VAR 0 3
7244: PUSH
7245: LD_INT 2
7247: EQUAL
7248: IFFALSE 7274
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7250: LD_EXP 1
7254: PPUSH
7255: LD_STRING D3Kb-JMM-1
7257: PPUSH
7258: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7262: LD_EXP 24
7266: PPUSH
7267: LD_STRING D3Kb-Kurt-1
7269: PPUSH
7270: CALL_OW 88
// end ; if dec2 = 3 then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_INT 3
7281: EQUAL
7282: IFFALSE 7512
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7284: LD_EXP 1
7288: PPUSH
7289: LD_STRING D3Ke-JMM-1
7291: PPUSH
7292: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7296: LD_EXP 24
7300: PPUSH
7301: LD_STRING D3Ke-Kurt-1
7303: PPUSH
7304: CALL_OW 88
// PrepareLegionForPlayer ;
7308: CALL 4394 0 0
// for i in tmp do
7312: LD_ADDR_VAR 0 1
7316: PUSH
7317: LD_VAR 0 4
7321: PUSH
7322: FOR_IN
7323: IFFALSE 7410
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7325: LD_ADDR_VAR 0 5
7329: PUSH
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 274
7339: PPUSH
7340: LD_INT 1
7342: PPUSH
7343: CALL_OW 275
7347: ST_TO_ADDR
// if tmp2 >= 120 then
7348: LD_VAR 0 5
7352: PUSH
7353: LD_INT 120
7355: GREATEREQUAL
7356: IFFALSE 7388
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7358: LD_VAR 0 1
7362: PPUSH
7363: CALL_OW 274
7367: PPUSH
7368: LD_INT 1
7370: PPUSH
7371: LD_VAR 0 5
7375: PUSH
7376: LD_INT 120
7378: MINUS
7379: PPUSH
7380: CALL_OW 277
// break ;
7384: GO 7410
// end else
7386: GO 7408
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 274
7397: PPUSH
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 0
7403: PPUSH
7404: CALL_OW 277
// end ; end ;
7408: GO 7322
7410: POP
7411: POP
// for i in tmp do
7412: LD_ADDR_VAR 0 1
7416: PUSH
7417: LD_VAR 0 4
7421: PUSH
7422: FOR_IN
7423: IFFALSE 7510
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7425: LD_ADDR_VAR 0 5
7429: PUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 274
7439: PPUSH
7440: LD_INT 3
7442: PPUSH
7443: CALL_OW 275
7447: ST_TO_ADDR
// if tmp2 >= 120 then
7448: LD_VAR 0 5
7452: PUSH
7453: LD_INT 120
7455: GREATEREQUAL
7456: IFFALSE 7488
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 274
7467: PPUSH
7468: LD_INT 3
7470: PPUSH
7471: LD_VAR 0 5
7475: PUSH
7476: LD_INT 120
7478: MINUS
7479: PPUSH
7480: CALL_OW 277
// break ;
7484: GO 7510
// end else
7486: GO 7508
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 274
7497: PPUSH
7498: LD_INT 3
7500: PPUSH
7501: LD_INT 0
7503: PPUSH
7504: CALL_OW 277
// end ; end ;
7508: GO 7422
7510: POP
7511: POP
// end ; if dec2 = 4 then
7512: LD_VAR 0 3
7516: PUSH
7517: LD_INT 4
7519: EQUAL
7520: IFFALSE 7765
// begin if dec1 = 3 then
7522: LD_VAR 0 2
7526: PUSH
7527: LD_INT 3
7529: EQUAL
7530: IFFALSE 7765
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7532: LD_EXP 1
7536: PPUSH
7537: LD_STRING D3Kc1-JMM-1
7539: PPUSH
7540: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7544: LD_EXP 24
7548: PPUSH
7549: LD_STRING D3Kc1-Kurt-1
7551: PPUSH
7552: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7556: LD_EXP 1
7560: PPUSH
7561: LD_STRING D3Kc1-JMM-2
7563: PPUSH
7564: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7568: LD_EXP 24
7572: PPUSH
7573: LD_STRING D3Kc1-Kurt-2
7575: PPUSH
7576: CALL_OW 88
// askSiberite = 1 ;
7580: LD_ADDR_EXP 32
7584: PUSH
7585: LD_INT 1
7587: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7588: LD_ADDR_VAR 0 2
7592: PUSH
7593: LD_STRING Q2b
7595: PPUSH
7596: LD_INT 1
7598: PUSH
7599: LD_INT 2
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 98
7614: ST_TO_ADDR
// if dec2 = 1 then
7615: LD_VAR 0 3
7619: PUSH
7620: LD_INT 1
7622: EQUAL
7623: IFFALSE 7657
// begin Say ( JMM , D4a-JMM-1 ) ;
7625: LD_EXP 1
7629: PPUSH
7630: LD_STRING D4a-JMM-1
7632: PPUSH
7633: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7637: LD_EXP 24
7641: PPUSH
7642: LD_STRING D4b-Kurt-1
7644: PPUSH
7645: CALL_OW 88
// warWithLegion = 1 ;
7649: LD_ADDR_EXP 30
7653: PUSH
7654: LD_INT 1
7656: ST_TO_ADDR
// end ; if dec2 = 2 then
7657: LD_VAR 0 3
7661: PUSH
7662: LD_INT 2
7664: EQUAL
7665: IFFALSE 7699
// begin Say ( JMM , D4b-JMM-1 ) ;
7667: LD_EXP 1
7671: PPUSH
7672: LD_STRING D4b-JMM-1
7674: PPUSH
7675: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7679: LD_EXP 24
7683: PPUSH
7684: LD_STRING D4b-Kurt-1
7686: PPUSH
7687: CALL_OW 88
// warWithLegion = 1 ;
7691: LD_ADDR_EXP 30
7695: PUSH
7696: LD_INT 1
7698: ST_TO_ADDR
// end ; if dec2 = 3 then
7699: LD_VAR 0 3
7703: PUSH
7704: LD_INT 3
7706: EQUAL
7707: IFFALSE 7765
// begin Say ( JMM , D4c-JMM-1 ) ;
7709: LD_EXP 1
7713: PPUSH
7714: LD_STRING D4c-JMM-1
7716: PPUSH
7717: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7721: LD_EXP 24
7725: PPUSH
7726: LD_STRING D4c-Kurt-1
7728: PPUSH
7729: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7733: LD_EXP 1
7737: PPUSH
7738: LD_STRING D4c-JMM-2
7740: PPUSH
7741: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7745: LD_EXP 24
7749: PPUSH
7750: LD_STRING D4c-Kurt-2
7752: PPUSH
7753: CALL_OW 88
// fakeInfo = 1 ;
7757: LD_ADDR_EXP 31
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
7765: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
7769: LD_EXP 24
7773: PPUSH
7774: LD_EXP 26
7778: PPUSH
7779: CALL_OW 120
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
7790: LD_EXP 26
7794: PPUSH
7795: LD_INT 4
7797: PPUSH
7798: CALL_OW 113
// wait ( 0 0$3 ) ;
7802: LD_INT 105
7804: PPUSH
7805: CALL_OW 67
// RemoveUnit ( Kurt ) ;
7809: LD_EXP 24
7813: PPUSH
7814: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
7818: LD_EXP 26
7822: PPUSH
7823: CALL_OW 64
// end else
7827: GO 9387
// begin ComExitVehicle ( otherKurt ) ;
7829: LD_EXP 25
7833: PPUSH
7834: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
7838: LD_EXP 25
7842: PPUSH
7843: CALL_OW 87
// wait ( 0 0$1 ) ;
7847: LD_INT 35
7849: PPUSH
7850: CALL_OW 67
// DialogueOn ;
7854: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
7858: LD_INT 22
7860: PUSH
7861: LD_INT 1
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 26
7870: PUSH
7871: LD_INT 1
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 2
7880: PUSH
7881: LD_INT 25
7883: PUSH
7884: LD_INT 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 25
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 25
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 25
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: PUSH
7933: LD_EXP 1
7937: PUSH
7938: EMPTY
7939: LIST
7940: DIFF
7941: PPUSH
7942: CALL_OW 69
7946: PPUSH
7947: LD_STRING D3-Sol1-1
7949: PPUSH
7950: LD_STRING 
7952: PPUSH
7953: CALL 11903 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
7957: LD_EXP 25
7961: PPUSH
7962: LD_STRING D3-Kurt-1
7964: PPUSH
7965: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7969: LD_EXP 1
7973: PPUSH
7974: LD_STRING D3-JMM-1
7976: PPUSH
7977: CALL_OW 88
// Say ( otherKurt , D3-Kurt-2 ) ;
7981: LD_EXP 25
7985: PPUSH
7986: LD_STRING D3-Kurt-2
7988: PPUSH
7989: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7993: LD_EXP 1
7997: PPUSH
7998: LD_STRING D3-JMM-2
8000: PPUSH
8001: CALL_OW 88
// Say ( otherKurt , D3-Kurt-4 ) ;
8005: LD_EXP 25
8009: PPUSH
8010: LD_STRING D3-Kurt-4
8012: PPUSH
8013: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8017: LD_EXP 1
8021: PPUSH
8022: LD_STRING D3-JMM-4
8024: PPUSH
8025: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8029: LD_EXP 25
8033: PPUSH
8034: LD_STRING D3-Kurt-5
8036: PPUSH
8037: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5a ) ;
8041: LD_EXP 25
8045: PPUSH
8046: LD_STRING D3-Kurt-5a
8048: PPUSH
8049: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8053: LD_EXP 25
8057: PPUSH
8058: LD_STRING D3-Kurt-5b
8060: PPUSH
8061: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8065: LD_VAR 0 6
8069: PUSH
8070: LD_INT 100
8072: GREATEREQUAL
8073: PUSH
8074: LD_VAR 0 8
8078: PUSH
8079: LD_INT 100
8081: GREATEREQUAL
8082: AND
8083: IFFALSE 8118
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8085: LD_ADDR_VAR 0 2
8089: PUSH
8090: LD_STRING Q2
8092: PPUSH
8093: LD_INT 1
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 3
8101: PUSH
8102: LD_INT 4
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PPUSH
8111: CALL_OW 98
8115: ST_TO_ADDR
8116: GO 8141
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8118: LD_ADDR_VAR 0 2
8122: PUSH
8123: LD_STRING Q2
8125: PPUSH
8126: LD_INT 3
8128: PUSH
8129: LD_INT 4
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PPUSH
8136: CALL_OW 98
8140: ST_TO_ADDR
// if dec1 = 1 then
8141: LD_VAR 0 2
8145: PUSH
8146: LD_INT 1
8148: EQUAL
8149: IFFALSE 8183
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8151: LD_EXP 1
8155: PPUSH
8156: LD_STRING D3Ka-JMM-1
8158: PPUSH
8159: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8163: LD_EXP 25
8167: PPUSH
8168: LD_STRING D3Ka-Kurt-1
8170: PPUSH
8171: CALL_OW 88
// warWithLegion = 1 ;
8175: LD_ADDR_EXP 30
8179: PUSH
8180: LD_INT 1
8182: ST_TO_ADDR
// end ; if dec1 = 2 then
8183: LD_VAR 0 2
8187: PUSH
8188: LD_INT 2
8190: EQUAL
8191: IFFALSE 8417
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8193: LD_EXP 1
8197: PPUSH
8198: LD_STRING D3Kb-JMM-1
8200: PPUSH
8201: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8205: LD_EXP 25
8209: PPUSH
8210: LD_STRING D3Kb-Kurt-1
8212: PPUSH
8213: CALL_OW 88
// for i in tmp do
8217: LD_ADDR_VAR 0 1
8221: PUSH
8222: LD_VAR 0 4
8226: PUSH
8227: FOR_IN
8228: IFFALSE 8315
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8230: LD_ADDR_VAR 0 5
8234: PUSH
8235: LD_VAR 0 1
8239: PPUSH
8240: CALL_OW 274
8244: PPUSH
8245: LD_INT 1
8247: PPUSH
8248: CALL_OW 275
8252: ST_TO_ADDR
// if tmp2 >= 100 then
8253: LD_VAR 0 5
8257: PUSH
8258: LD_INT 100
8260: GREATEREQUAL
8261: IFFALSE 8293
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8263: LD_VAR 0 1
8267: PPUSH
8268: CALL_OW 274
8272: PPUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_VAR 0 5
8280: PUSH
8281: LD_INT 100
8283: MINUS
8284: PPUSH
8285: CALL_OW 277
// break ;
8289: GO 8315
// end else
8291: GO 8313
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8293: LD_VAR 0 1
8297: PPUSH
8298: CALL_OW 274
8302: PPUSH
8303: LD_INT 1
8305: PPUSH
8306: LD_INT 0
8308: PPUSH
8309: CALL_OW 277
// end ; end ;
8313: GO 8227
8315: POP
8316: POP
// for i in tmp do
8317: LD_ADDR_VAR 0 1
8321: PUSH
8322: LD_VAR 0 4
8326: PUSH
8327: FOR_IN
8328: IFFALSE 8415
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8330: LD_ADDR_VAR 0 5
8334: PUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 274
8344: PPUSH
8345: LD_INT 3
8347: PPUSH
8348: CALL_OW 275
8352: ST_TO_ADDR
// if tmp2 >= 100 then
8353: LD_VAR 0 5
8357: PUSH
8358: LD_INT 100
8360: GREATEREQUAL
8361: IFFALSE 8393
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8363: LD_VAR 0 1
8367: PPUSH
8368: CALL_OW 274
8372: PPUSH
8373: LD_INT 3
8375: PPUSH
8376: LD_VAR 0 5
8380: PUSH
8381: LD_INT 100
8383: MINUS
8384: PPUSH
8385: CALL_OW 277
// break ;
8389: GO 8415
// end else
8391: GO 8413
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8393: LD_VAR 0 1
8397: PPUSH
8398: CALL_OW 274
8402: PPUSH
8403: LD_INT 3
8405: PPUSH
8406: LD_INT 0
8408: PPUSH
8409: CALL_OW 277
// end ; end ;
8413: GO 8327
8415: POP
8416: POP
// end ; if dec1 = 3 then
8417: LD_VAR 0 2
8421: PUSH
8422: LD_INT 3
8424: EQUAL
8425: IFFALSE 8660
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8427: LD_EXP 1
8431: PPUSH
8432: LD_STRING D3Kc1-JMM-1
8434: PPUSH
8435: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8439: LD_EXP 25
8443: PPUSH
8444: LD_STRING D3Kc1-Kurt-1
8446: PPUSH
8447: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8451: LD_EXP 1
8455: PPUSH
8456: LD_STRING D3Kc1-JMM-2
8458: PPUSH
8459: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8463: LD_EXP 25
8467: PPUSH
8468: LD_STRING D3Kc1-Kurt-2
8470: PPUSH
8471: CALL_OW 88
// askSiberite = 1 ;
8475: LD_ADDR_EXP 32
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8483: LD_ADDR_VAR 0 2
8487: PUSH
8488: LD_STRING Q2b
8490: PPUSH
8491: LD_INT 1
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: LD_INT 3
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: LIST
8504: PPUSH
8505: CALL_OW 98
8509: ST_TO_ADDR
// if dec2 = 1 then
8510: LD_VAR 0 3
8514: PUSH
8515: LD_INT 1
8517: EQUAL
8518: IFFALSE 8552
// begin Say ( JMM , D4a-JMM-1 ) ;
8520: LD_EXP 1
8524: PPUSH
8525: LD_STRING D4a-JMM-1
8527: PPUSH
8528: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8532: LD_EXP 25
8536: PPUSH
8537: LD_STRING D4b-Kurt-1
8539: PPUSH
8540: CALL_OW 88
// warWithLegion = 1 ;
8544: LD_ADDR_EXP 30
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// end ; if dec2 = 2 then
8552: LD_VAR 0 3
8556: PUSH
8557: LD_INT 2
8559: EQUAL
8560: IFFALSE 8594
// begin Say ( JMM , D4b-JMM-1 ) ;
8562: LD_EXP 1
8566: PPUSH
8567: LD_STRING D4b-JMM-1
8569: PPUSH
8570: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8574: LD_EXP 25
8578: PPUSH
8579: LD_STRING D4b-Kurt-1
8581: PPUSH
8582: CALL_OW 88
// warWithLegion = 1 ;
8586: LD_ADDR_EXP 30
8590: PUSH
8591: LD_INT 1
8593: ST_TO_ADDR
// end ; if dec2 = 3 then
8594: LD_VAR 0 3
8598: PUSH
8599: LD_INT 3
8601: EQUAL
8602: IFFALSE 8660
// begin Say ( JMM , D4c-JMM-1 ) ;
8604: LD_EXP 1
8608: PPUSH
8609: LD_STRING D4c-JMM-1
8611: PPUSH
8612: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
8616: LD_EXP 25
8620: PPUSH
8621: LD_STRING D4c-Kurt-1
8623: PPUSH
8624: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8628: LD_EXP 1
8632: PPUSH
8633: LD_STRING D4c-JMM-2
8635: PPUSH
8636: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
8640: LD_EXP 25
8644: PPUSH
8645: LD_STRING D4c-Kurt-2
8647: PPUSH
8648: CALL_OW 88
// fakeInfo = 1 ;
8652: LD_ADDR_EXP 31
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8660: LD_VAR 0 2
8664: PUSH
8665: LD_INT 4
8667: EQUAL
8668: IFFALSE 9325
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8670: LD_EXP 1
8674: PPUSH
8675: LD_STRING D3Kd-JMM-1
8677: PPUSH
8678: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
8682: LD_VAR 0 6
8686: PUSH
8687: LD_INT 200
8689: GREATEREQUAL
8690: PUSH
8691: LD_VAR 0 8
8695: PUSH
8696: LD_INT 200
8698: GREATEREQUAL
8699: AND
8700: IFFALSE 8735
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
8702: LD_ADDR_VAR 0 3
8706: PUSH
8707: LD_STRING Q2a
8709: PPUSH
8710: LD_INT 1
8712: PUSH
8713: LD_INT 2
8715: PUSH
8716: LD_INT 3
8718: PUSH
8719: LD_INT 4
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 98
8732: ST_TO_ADDR
8733: GO 8758
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
8735: LD_ADDR_VAR 0 3
8739: PUSH
8740: LD_STRING Q2a
8742: PPUSH
8743: LD_INT 1
8745: PUSH
8746: LD_INT 4
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 98
8757: ST_TO_ADDR
// if dec2 = 1 then
8758: LD_VAR 0 3
8762: PUSH
8763: LD_INT 1
8765: EQUAL
8766: IFFALSE 8800
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8768: LD_EXP 1
8772: PPUSH
8773: LD_STRING D5Ka-JMM-1
8775: PPUSH
8776: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
8780: LD_EXP 25
8784: PPUSH
8785: LD_STRING D5Ka-Kurt-1
8787: PPUSH
8788: CALL_OW 88
// warWithLegion = 1 ;
8792: LD_ADDR_EXP 30
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// end ; if dec2 = 2 then
8800: LD_VAR 0 3
8804: PUSH
8805: LD_INT 2
8807: EQUAL
8808: IFFALSE 8834
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8810: LD_EXP 1
8814: PPUSH
8815: LD_STRING D3Kb-JMM-1
8817: PPUSH
8818: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8822: LD_EXP 25
8826: PPUSH
8827: LD_STRING D3Kb-Kurt-1
8829: PPUSH
8830: CALL_OW 88
// end ; if dec2 = 3 then
8834: LD_VAR 0 3
8838: PUSH
8839: LD_INT 3
8841: EQUAL
8842: IFFALSE 9072
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8844: LD_EXP 1
8848: PPUSH
8849: LD_STRING D3Ke-JMM-1
8851: PPUSH
8852: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
8856: LD_EXP 25
8860: PPUSH
8861: LD_STRING D3Ke-Kurt-1
8863: PPUSH
8864: CALL_OW 88
// PrepareLegionForPlayer ;
8868: CALL 4394 0 0
// for i in tmp do
8872: LD_ADDR_VAR 0 1
8876: PUSH
8877: LD_VAR 0 4
8881: PUSH
8882: FOR_IN
8883: IFFALSE 8970
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8885: LD_ADDR_VAR 0 5
8889: PUSH
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 274
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 275
8907: ST_TO_ADDR
// if tmp2 >= 200 then
8908: LD_VAR 0 5
8912: PUSH
8913: LD_INT 200
8915: GREATEREQUAL
8916: IFFALSE 8948
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
8918: LD_VAR 0 1
8922: PPUSH
8923: CALL_OW 274
8927: PPUSH
8928: LD_INT 1
8930: PPUSH
8931: LD_VAR 0 5
8935: PUSH
8936: LD_INT 200
8938: MINUS
8939: PPUSH
8940: CALL_OW 277
// break ;
8944: GO 8970
// end else
8946: GO 8968
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 274
8957: PPUSH
8958: LD_INT 1
8960: PPUSH
8961: LD_INT 0
8963: PPUSH
8964: CALL_OW 277
// end ; end ;
8968: GO 8882
8970: POP
8971: POP
// for i in tmp do
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: LD_VAR 0 4
8981: PUSH
8982: FOR_IN
8983: IFFALSE 9070
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8985: LD_ADDR_VAR 0 5
8989: PUSH
8990: LD_VAR 0 1
8994: PPUSH
8995: CALL_OW 274
8999: PPUSH
9000: LD_INT 3
9002: PPUSH
9003: CALL_OW 275
9007: ST_TO_ADDR
// if tmp2 >= 200 then
9008: LD_VAR 0 5
9012: PUSH
9013: LD_INT 200
9015: GREATEREQUAL
9016: IFFALSE 9048
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9018: LD_VAR 0 1
9022: PPUSH
9023: CALL_OW 274
9027: PPUSH
9028: LD_INT 3
9030: PPUSH
9031: LD_VAR 0 5
9035: PUSH
9036: LD_INT 200
9038: MINUS
9039: PPUSH
9040: CALL_OW 277
// break ;
9044: GO 9070
// end else
9046: GO 9068
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9048: LD_VAR 0 1
9052: PPUSH
9053: CALL_OW 274
9057: PPUSH
9058: LD_INT 3
9060: PPUSH
9061: LD_INT 0
9063: PPUSH
9064: CALL_OW 277
// end ; end ;
9068: GO 8982
9070: POP
9071: POP
// end ; if dec2 = 4 then
9072: LD_VAR 0 3
9076: PUSH
9077: LD_INT 4
9079: EQUAL
9080: IFFALSE 9325
// begin if dec1 = 3 then
9082: LD_VAR 0 2
9086: PUSH
9087: LD_INT 3
9089: EQUAL
9090: IFFALSE 9325
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9092: LD_EXP 1
9096: PPUSH
9097: LD_STRING D3Kc1-JMM-1
9099: PPUSH
9100: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9104: LD_EXP 25
9108: PPUSH
9109: LD_STRING D3Kc1-Kurt-1
9111: PPUSH
9112: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9116: LD_EXP 1
9120: PPUSH
9121: LD_STRING D3Kc1-JMM-2
9123: PPUSH
9124: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9128: LD_EXP 25
9132: PPUSH
9133: LD_STRING D3Kc1-Kurt-2
9135: PPUSH
9136: CALL_OW 88
// askSiberite = 1 ;
9140: LD_ADDR_EXP 32
9144: PUSH
9145: LD_INT 1
9147: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9148: LD_ADDR_VAR 0 2
9152: PUSH
9153: LD_STRING Q2b
9155: PPUSH
9156: LD_INT 1
9158: PUSH
9159: LD_INT 2
9161: PUSH
9162: LD_INT 3
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 98
9174: ST_TO_ADDR
// if dec2 = 1 then
9175: LD_VAR 0 3
9179: PUSH
9180: LD_INT 1
9182: EQUAL
9183: IFFALSE 9217
// begin Say ( JMM , D4a-JMM-1 ) ;
9185: LD_EXP 1
9189: PPUSH
9190: LD_STRING D4a-JMM-1
9192: PPUSH
9193: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9197: LD_EXP 25
9201: PPUSH
9202: LD_STRING D4b-Kurt-1
9204: PPUSH
9205: CALL_OW 88
// warWithLegion = 1 ;
9209: LD_ADDR_EXP 30
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// end ; if dec2 = 2 then
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 2
9224: EQUAL
9225: IFFALSE 9259
// begin Say ( JMM , D4b-JMM-1 ) ;
9227: LD_EXP 1
9231: PPUSH
9232: LD_STRING D4b-JMM-1
9234: PPUSH
9235: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9239: LD_EXP 25
9243: PPUSH
9244: LD_STRING D4b-Kurt-1
9246: PPUSH
9247: CALL_OW 88
// warWithLegion = 1 ;
9251: LD_ADDR_EXP 30
9255: PUSH
9256: LD_INT 1
9258: ST_TO_ADDR
// end ; if dec2 = 3 then
9259: LD_VAR 0 3
9263: PUSH
9264: LD_INT 3
9266: EQUAL
9267: IFFALSE 9325
// begin Say ( JMM , D4c-JMM-1 ) ;
9269: LD_EXP 1
9273: PPUSH
9274: LD_STRING D4c-JMM-1
9276: PPUSH
9277: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9281: LD_EXP 25
9285: PPUSH
9286: LD_STRING D4c-Kurt-1
9288: PPUSH
9289: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9293: LD_EXP 1
9297: PPUSH
9298: LD_STRING D4c-JMM-2
9300: PPUSH
9301: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9305: LD_EXP 25
9309: PPUSH
9310: LD_STRING D4c-Kurt-2
9312: PPUSH
9313: CALL_OW 88
// fakeInfo = 1 ;
9317: LD_ADDR_EXP 31
9321: PUSH
9322: LD_INT 1
9324: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9325: CALL_OW 7
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9329: LD_EXP 25
9333: PPUSH
9334: LD_EXP 26
9338: PPUSH
9339: CALL_OW 120
// wait ( 0 0$1 ) ;
9343: LD_INT 35
9345: PPUSH
9346: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9350: LD_EXP 26
9354: PPUSH
9355: LD_INT 4
9357: PPUSH
9358: CALL_OW 113
// wait ( 0 0$6 ) ;
9362: LD_INT 210
9364: PPUSH
9365: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9369: LD_EXP 25
9373: PPUSH
9374: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9378: LD_EXP 26
9382: PPUSH
9383: CALL_OW 64
// end ; end ;
9387: PPOPN 8
9389: END
// every 0 0$10 trigger warWithLegion = 1 do
9390: LD_EXP 30
9394: PUSH
9395: LD_INT 1
9397: EQUAL
9398: IFFALSE 9407
9400: GO 9402
9402: DISABLE
// PrepareAttackLegion ;
9403: CALL 4599 0 0
9407: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9408: LD_EXP 15
9412: PPUSH
9413: CALL_OW 305
9417: PUSH
9418: LD_EXP 15
9422: PPUSH
9423: LD_INT 1
9425: PPUSH
9426: CALL_OW 289
9430: NOT
9431: AND
9432: PUSH
9433: LD_EXP 15
9437: PPUSH
9438: LD_INT 2
9440: PPUSH
9441: CALL_OW 289
9445: NOT
9446: AND
9447: PUSH
9448: LD_EXP 15
9452: PPUSH
9453: LD_INT 3
9455: PPUSH
9456: CALL_OW 289
9460: NOT
9461: AND
9462: IFFALSE 9479
9464: GO 9466
9466: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9467: LD_EXP 15
9471: PPUSH
9472: LD_INT 4
9474: PPUSH
9475: CALL_OW 235
9479: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9480: LD_EXP 16
9484: PPUSH
9485: CALL_OW 305
9489: PUSH
9490: LD_EXP 16
9494: PPUSH
9495: LD_INT 1
9497: PPUSH
9498: CALL_OW 289
9502: NOT
9503: AND
9504: PUSH
9505: LD_EXP 16
9509: PPUSH
9510: LD_INT 2
9512: PPUSH
9513: CALL_OW 289
9517: NOT
9518: AND
9519: PUSH
9520: LD_EXP 16
9524: PPUSH
9525: LD_INT 3
9527: PPUSH
9528: CALL_OW 289
9532: NOT
9533: AND
9534: IFFALSE 9551
9536: GO 9538
9538: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9539: LD_EXP 16
9543: PPUSH
9544: LD_INT 4
9546: PPUSH
9547: CALL_OW 235
9551: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9552: LD_EXP 17
9556: PPUSH
9557: CALL_OW 305
9561: PUSH
9562: LD_EXP 17
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 289
9574: NOT
9575: AND
9576: PUSH
9577: LD_EXP 17
9581: PPUSH
9582: LD_INT 2
9584: PPUSH
9585: CALL_OW 289
9589: NOT
9590: AND
9591: PUSH
9592: LD_EXP 17
9596: PPUSH
9597: LD_INT 3
9599: PPUSH
9600: CALL_OW 289
9604: NOT
9605: AND
9606: IFFALSE 9623
9608: GO 9610
9610: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9611: LD_EXP 17
9615: PPUSH
9616: LD_INT 4
9618: PPUSH
9619: CALL_OW 235
9623: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9624: LD_EXP 18
9628: PPUSH
9629: CALL_OW 305
9633: PUSH
9634: LD_EXP 18
9638: PPUSH
9639: LD_INT 1
9641: PPUSH
9642: CALL_OW 289
9646: NOT
9647: AND
9648: PUSH
9649: LD_EXP 18
9653: PPUSH
9654: LD_INT 2
9656: PPUSH
9657: CALL_OW 289
9661: NOT
9662: AND
9663: PUSH
9664: LD_EXP 18
9668: PPUSH
9669: LD_INT 3
9671: PPUSH
9672: CALL_OW 289
9676: NOT
9677: AND
9678: IFFALSE 9695
9680: GO 9682
9682: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9683: LD_EXP 18
9687: PPUSH
9688: LD_INT 4
9690: PPUSH
9691: CALL_OW 235
9695: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9696: LD_EXP 19
9700: PPUSH
9701: CALL_OW 305
9705: PUSH
9706: LD_EXP 19
9710: PPUSH
9711: LD_INT 1
9713: PPUSH
9714: CALL_OW 289
9718: NOT
9719: AND
9720: PUSH
9721: LD_EXP 19
9725: PPUSH
9726: LD_INT 2
9728: PPUSH
9729: CALL_OW 289
9733: NOT
9734: AND
9735: PUSH
9736: LD_EXP 19
9740: PPUSH
9741: LD_INT 3
9743: PPUSH
9744: CALL_OW 289
9748: NOT
9749: AND
9750: PUSH
9751: LD_EXP 19
9755: PPUSH
9756: LD_INT 2
9758: PPUSH
9759: CALL_OW 289
9763: NOT
9764: AND
9765: IFFALSE 9782
9767: GO 9769
9769: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9770: LD_EXP 19
9774: PPUSH
9775: LD_INT 4
9777: PPUSH
9778: CALL_OW 235
9782: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9783: LD_EXP 20
9787: PPUSH
9788: CALL_OW 305
9792: PUSH
9793: LD_EXP 20
9797: PPUSH
9798: LD_INT 1
9800: PPUSH
9801: CALL_OW 289
9805: NOT
9806: AND
9807: PUSH
9808: LD_EXP 20
9812: PPUSH
9813: LD_INT 2
9815: PPUSH
9816: CALL_OW 289
9820: NOT
9821: AND
9822: PUSH
9823: LD_EXP 20
9827: PPUSH
9828: LD_INT 3
9830: PPUSH
9831: CALL_OW 289
9835: NOT
9836: AND
9837: IFFALSE 9854
9839: GO 9841
9841: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9842: LD_EXP 20
9846: PPUSH
9847: LD_INT 4
9849: PPUSH
9850: CALL_OW 235
9854: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9855: LD_EXP 21
9859: PPUSH
9860: CALL_OW 305
9864: PUSH
9865: LD_EXP 21
9869: PPUSH
9870: LD_INT 1
9872: PPUSH
9873: CALL_OW 289
9877: NOT
9878: AND
9879: PUSH
9880: LD_EXP 21
9884: PPUSH
9885: LD_INT 2
9887: PPUSH
9888: CALL_OW 289
9892: NOT
9893: AND
9894: PUSH
9895: LD_EXP 21
9899: PPUSH
9900: LD_INT 3
9902: PPUSH
9903: CALL_OW 289
9907: NOT
9908: AND
9909: IFFALSE 9926
9911: GO 9913
9913: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9914: LD_EXP 21
9918: PPUSH
9919: LD_INT 4
9921: PPUSH
9922: CALL_OW 235
9926: END
// every 0 0$1 do var i ;
9927: GO 9929
9929: DISABLE
9930: LD_INT 0
9932: PPUSH
// begin enable ;
9933: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9934: LD_ADDR_VAR 0 1
9938: PUSH
9939: LD_INT 22
9941: PUSH
9942: LD_INT 4
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: PUSH
9954: FOR_IN
9955: IFFALSE 9994
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9957: LD_VAR 0 1
9961: PPUSH
9962: LD_INT 4
9964: PPUSH
9965: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_INT 4
9976: PPUSH
9977: CALL_OW 308
9981: IFFALSE 9992
// RemoveUnit ( i ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: CALL_OW 64
// end ;
9992: GO 9954
9994: POP
9995: POP
// end ;
9996: PPOPN 1
9998: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9999: LD_EXP 28
10003: PUSH
10004: LD_INT 1
10006: EQUAL
10007: IFFALSE 10382
10009: GO 10011
10011: DISABLE
10012: LD_INT 0
10014: PPUSH
10015: PPUSH
10016: PPUSH
// begin enable ;
10017: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10018: LD_ADDR_VAR 0 2
10022: PUSH
10023: LD_INT 12
10025: PPUSH
10026: LD_INT 22
10028: PUSH
10029: LD_INT 3
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 21
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PPUSH
10050: CALL_OW 70
10054: ST_TO_ADDR
// for i in enemyVehs do
10055: LD_ADDR_VAR 0 1
10059: PUSH
10060: LD_VAR 0 2
10064: PUSH
10065: FOR_IN
10066: IFFALSE 10380
// begin if See ( 1 , i ) then
10068: LD_INT 1
10070: PPUSH
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 292
10080: IFFALSE 10378
// begin disable ;
10082: DISABLE
// DialogueOn ;
10083: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10087: LD_VAR 0 1
10091: PPUSH
10092: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10096: LD_INT 22
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 26
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_EXP 1
10124: PUSH
10125: EMPTY
10126: LIST
10127: DIFF
10128: PPUSH
10129: CALL_OW 69
10133: PPUSH
10134: LD_STRING DT1-Sol1-1
10136: PPUSH
10137: LD_STRING DT1-FSol1-1
10139: PPUSH
10140: CALL 11903 0 3
// dec = ShowQuery2 ;
10144: LD_ADDR_VAR 0 3
10148: PUSH
10149: CALL 12513 0 0
10153: ST_TO_ADDR
// if dec = 1 then
10154: LD_VAR 0 3
10158: PUSH
10159: LD_INT 1
10161: EQUAL
10162: IFFALSE 10268
// begin Say ( JMM , D2-JMM-1 ) ;
10164: LD_EXP 1
10168: PPUSH
10169: LD_STRING D2-JMM-1
10171: PPUSH
10172: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10176: LD_EXP 22
10180: PPUSH
10181: LD_STRING D2-Pow-1
10183: PPUSH
10184: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10188: LD_EXP 1
10192: PPUSH
10193: LD_STRING D2a-JMM-1
10195: PPUSH
10196: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10200: LD_EXP 22
10204: PPUSH
10205: LD_STRING D2a-Pow-1
10207: PPUSH
10208: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10212: LD_EXP 1
10216: PPUSH
10217: LD_STRING D2a-JMM-2
10219: PPUSH
10220: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10224: LD_EXP 22
10228: PPUSH
10229: LD_STRING D2a-Pow-2
10231: PPUSH
10232: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10236: LD_EXP 1
10240: PPUSH
10241: LD_STRING D2a-JMM-3
10243: PPUSH
10244: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10248: LD_EXP 22
10252: PPUSH
10253: LD_STRING D2a-Pow-3
10255: PPUSH
10256: CALL_OW 94
// secondPass = 2 ;
10260: LD_ADDR_EXP 28
10264: PUSH
10265: LD_INT 2
10267: ST_TO_ADDR
// end ; if dec = 2 then
10268: LD_VAR 0 3
10272: PUSH
10273: LD_INT 2
10275: EQUAL
10276: IFFALSE 10370
// begin Say ( JMM , D2-JMM-1 ) ;
10278: LD_EXP 1
10282: PPUSH
10283: LD_STRING D2-JMM-1
10285: PPUSH
10286: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10290: LD_EXP 22
10294: PPUSH
10295: LD_STRING D2-Pow-1
10297: PPUSH
10298: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10302: LD_EXP 1
10306: PPUSH
10307: LD_STRING D2b-JMM-1
10309: PPUSH
10310: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10314: LD_EXP 22
10318: PPUSH
10319: LD_STRING D2b-Pow-1
10321: PPUSH
10322: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10326: LD_EXP 1
10330: PPUSH
10331: LD_STRING D2c-JMM-1
10333: PPUSH
10334: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10338: LD_EXP 22
10342: PPUSH
10343: LD_STRING D2c-Pow-1
10345: PPUSH
10346: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10350: LD_EXP 1
10354: PPUSH
10355: LD_STRING D2c-JMM-2
10357: PPUSH
10358: CALL_OW 88
// secondPass = 2 ;
10362: LD_ADDR_EXP 28
10366: PUSH
10367: LD_INT 2
10369: ST_TO_ADDR
// end ; DialogueOff ;
10370: CALL_OW 7
// exit ;
10374: POP
10375: POP
10376: GO 10382
// end ; end ;
10378: GO 10065
10380: POP
10381: POP
// end ;
10382: PPOPN 3
10384: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10385: LD_EXP 29
10389: PUSH
10390: LD_INT 1
10392: EQUAL
10393: IFFALSE 10543
10395: GO 10397
10397: DISABLE
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: LD_INT 11
10409: PPUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 3
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 24
10422: PUSH
10423: LD_INT 250
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 70
10438: ST_TO_ADDR
// enable ;
10439: ENABLE
// for i in vehicles do
10440: LD_ADDR_VAR 0 1
10444: PUSH
10445: LD_VAR 0 2
10449: PUSH
10450: FOR_IN
10451: IFFALSE 10541
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
10453: LD_INT 1
10455: PPUSH
10456: LD_VAR 0 1
10460: PPUSH
10461: CALL_OW 292
10465: PUSH
10466: LD_EXP 29
10470: PUSH
10471: LD_INT 1
10473: EQUAL
10474: AND
10475: IFFALSE 10539
// begin disable ;
10477: DISABLE
// DialogueOn ;
10478: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10482: LD_INT 22
10484: PUSH
10485: LD_INT 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 21
10494: PUSH
10495: LD_INT 1
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 69
10510: PPUSH
10511: LD_STRING DT1-Sol1-1
10513: PPUSH
10514: LD_STRING DT1-FSol1-1
10516: PPUSH
10517: CALL 11903 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10521: LD_EXP 1
10525: PPUSH
10526: LD_STRING DT1-JMM-1
10528: PPUSH
10529: CALL_OW 88
// DialogueOff ;
10533: CALL_OW 7
// break ;
10537: GO 10541
// end ; end ;
10539: GO 10450
10541: POP
10542: POP
// end ;
10543: PPOPN 2
10545: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10546: LD_EXP 29
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: PUSH
10555: LD_INT 11
10557: PPUSH
10558: LD_INT 22
10560: PUSH
10561: LD_INT 3
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 24
10570: PUSH
10571: LD_INT 251
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: LD_INT 21
10583: PUSH
10584: LD_INT 2
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 21
10593: PUSH
10594: LD_INT 1
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: LIST
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 70
10615: PUSH
10616: LD_INT 0
10618: EQUAL
10619: AND
10620: IFFALSE 10704
10622: GO 10624
10624: DISABLE
// begin vehicleTeleported = 2 ;
10625: LD_ADDR_EXP 29
10629: PUSH
10630: LD_INT 2
10632: ST_TO_ADDR
// DialogueOn ;
10633: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10637: LD_EXP 1
10641: PPUSH
10642: LD_STRING DT1a-JMM-1
10644: PPUSH
10645: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10649: LD_INT 22
10651: PUSH
10652: LD_INT 1
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 21
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: PPUSH
10678: LD_STRING DT1a-Sol1-1
10680: PPUSH
10681: LD_STRING DT1a-FSol1-1
10683: PPUSH
10684: CALL 11903 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10688: LD_EXP 1
10692: PPUSH
10693: LD_STRING DT1a-JMM-2
10695: PPUSH
10696: CALL_OW 88
// DialogueOff ;
10700: CALL_OW 7
// end ;
10704: END
// every 0 0$1 trigger vehicleTeleported = 3 do var i , vehicles ;
10705: LD_EXP 29
10709: PUSH
10710: LD_INT 3
10712: EQUAL
10713: IFFALSE 10851
10715: GO 10717
10717: DISABLE
10718: LD_INT 0
10720: PPUSH
10721: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10722: LD_ADDR_VAR 0 2
10726: PUSH
10727: LD_INT 11
10729: PPUSH
10730: LD_INT 22
10732: PUSH
10733: LD_INT 3
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 24
10742: PUSH
10743: LD_INT 250
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 70
10758: ST_TO_ADDR
// enable ;
10759: ENABLE
// for i in vehicles do
10760: LD_ADDR_VAR 0 1
10764: PUSH
10765: LD_VAR 0 2
10769: PUSH
10770: FOR_IN
10771: IFFALSE 10849
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
10773: LD_INT 1
10775: PPUSH
10776: LD_VAR 0 1
10780: PPUSH
10781: CALL_OW 292
10785: PUSH
10786: LD_EXP 29
10790: PUSH
10791: LD_INT 3
10793: EQUAL
10794: AND
10795: IFFALSE 10847
// begin disable ;
10797: DISABLE
// DialogueOn ;
10798: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10802: LD_INT 22
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 21
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 69
10830: PPUSH
10831: LD_STRING DT2-Sol1-1
10833: PPUSH
10834: LD_STRING DT2-FSol1-1
10836: PPUSH
10837: CALL 11903 0 3
// DialogueOff ;
10841: CALL_OW 7
// break ;
10845: GO 10849
// end ; end ;
10847: GO 10770
10849: POP
10850: POP
// end ;
10851: PPOPN 2
10853: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10854: LD_EXP 29
10858: PUSH
10859: LD_INT 3
10861: EQUAL
10862: PUSH
10863: LD_INT 11
10865: PPUSH
10866: LD_INT 22
10868: PUSH
10869: LD_INT 3
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 24
10878: PUSH
10879: LD_INT 251
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 2
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 2
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 21
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: PPUSH
10919: CALL_OW 70
10923: PUSH
10924: LD_INT 0
10926: EQUAL
10927: AND
10928: IFFALSE 11012
10930: GO 10932
10932: DISABLE
// begin vehicleTeleported = 4 ;
10933: LD_ADDR_EXP 29
10937: PUSH
10938: LD_INT 4
10940: ST_TO_ADDR
// DialogueOn ;
10941: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10945: LD_EXP 1
10949: PPUSH
10950: LD_STRING DT2a-JMM-1
10952: PPUSH
10953: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
10957: LD_INT 22
10959: PUSH
10960: LD_INT 1
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 21
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PPUSH
10981: CALL_OW 69
10985: PPUSH
10986: LD_STRING DT2a-Sol1-1
10988: PPUSH
10989: LD_STRING DT2a-FSol1-1
10991: PPUSH
10992: CALL 11903 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
10996: LD_EXP 3
11000: PPUSH
11001: LD_STRING DT2a-Don-1
11003: PPUSH
11004: CALL_OW 88
// DialogueOff ;
11008: CALL_OW 7
// end ;
11012: END
// every 0 0$1 trigger SeeXY ( 1 , 36 , 55 ) do
11013: LD_INT 1
11015: PPUSH
11016: LD_INT 36
11018: PPUSH
11019: LD_INT 55
11021: PPUSH
11022: CALL_OW 293
11026: IFFALSE 11121
11028: GO 11030
11030: DISABLE
// begin DialogueOn ;
11031: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11035: LD_INT 36
11037: PPUSH
11038: LD_INT 55
11040: PPUSH
11041: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11045: LD_INT 22
11047: PUSH
11048: LD_INT 1
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 21
11057: PUSH
11058: LD_INT 1
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PPUSH
11069: CALL_OW 69
11073: PPUSH
11074: LD_STRING D5-Sol1-1
11076: PPUSH
11077: LD_STRING D5-FSol1-
11079: PPUSH
11080: CALL 11903 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
11084: LD_EXP 30
11088: PUSH
11089: LD_INT 1
11091: EQUAL
11092: PUSH
11093: LD_EXP 3
11097: PPUSH
11098: CALL_OW 300
11102: AND
11103: IFFALSE 11117
// Say ( Donaldson , D5-Don-1 ) ;
11105: LD_EXP 3
11109: PPUSH
11110: LD_STRING D5-Don-1
11112: PPUSH
11113: CALL_OW 88
// DialogueOff ;
11117: CALL_OW 7
// end ;
11121: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
11122: LD_INT 1
11124: PPUSH
11125: LD_INT 10
11127: PPUSH
11128: CALL_OW 292
11132: IFFALSE 11219
11134: GO 11136
11136: DISABLE
// begin DialogueOn ;
11137: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
11141: LD_INT 10
11143: PPUSH
11144: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11148: LD_INT 22
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 21
11160: PUSH
11161: LD_INT 1
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 69
11176: PUSH
11177: LD_EXP 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: DIFF
11185: PPUSH
11186: LD_STRING DT3-Sol1-1
11188: PPUSH
11189: LD_STRING DT3-FSol1-1
11191: PPUSH
11192: CALL 11903 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11196: LD_EXP 1
11200: PPUSH
11201: LD_STRING DT3-JMM-1
11203: PPUSH
11204: CALL_OW 88
// DialogueOff ;
11208: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11212: LD_STRING M2
11214: PPUSH
11215: CALL_OW 337
// end ;
11219: END
// every 0 0$1 trigger IsDying ( ruheadlab ) do var i , j , vehs ;
11220: LD_INT 3
11222: PPUSH
11223: CALL_OW 303
11227: IFFALSE 11591
11229: GO 11231
11231: DISABLE
11232: LD_INT 0
11234: PPUSH
11235: PPUSH
11236: PPUSH
// begin ruAI = 0 ;
11237: LD_ADDR_EXP 41
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11245: LD_ADDR_VAR 0 3
11249: PUSH
11250: LD_INT 10
11252: PPUSH
11253: LD_INT 22
11255: PUSH
11256: LD_INT 3
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 21
11265: PUSH
11266: LD_INT 2
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 58
11275: PUSH
11276: EMPTY
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: PPUSH
11284: CALL_OW 70
11288: ST_TO_ADDR
// DialogueOn ;
11289: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11293: LD_EXP 1
11297: PPUSH
11298: LD_STRING D6-JMM-1
11300: PPUSH
11301: CALL_OW 88
// DialogueOff ;
11305: CALL_OW 7
// for i := 1 to RuScientists do
11309: LD_ADDR_VAR 0 1
11313: PUSH
11314: DOUBLE
11315: LD_INT 1
11317: DEC
11318: ST_TO_ADDR
11319: LD_EXP 34
11323: PUSH
11324: FOR_TO
11325: IFFALSE 11589
// begin for j := 1 to vehs do
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: DOUBLE
11333: LD_INT 1
11335: DEC
11336: ST_TO_ADDR
11337: LD_VAR 0 3
11341: PUSH
11342: FOR_TO
11343: IFFALSE 11585
// begin ComEnterUnit ( RuScientists [ i ] , vehs [ j ] ) ;
11345: LD_EXP 34
11349: PUSH
11350: LD_VAR 0 1
11354: ARRAY
11355: PPUSH
11356: LD_VAR 0 3
11360: PUSH
11361: LD_VAR 0 2
11365: ARRAY
11366: PPUSH
11367: CALL_OW 120
// if IsOk ( rutp ) then
11371: LD_INT 137
11373: PPUSH
11374: CALL_OW 302
11378: IFFALSE 11531
// begin if j mod 2 then
11380: LD_VAR 0 2
11384: PUSH
11385: LD_INT 2
11387: MOD
11388: IFFALSE 11477
// begin AddComEnterUnit ( [ RuScientists [ i ] , vehs [ j ] ] , rutp ) ;
11390: LD_EXP 34
11394: PUSH
11395: LD_VAR 0 1
11399: ARRAY
11400: PUSH
11401: LD_VAR 0 3
11405: PUSH
11406: LD_VAR 0 2
11410: ARRAY
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PPUSH
11416: LD_INT 137
11418: PPUSH
11419: CALL_OW 180
// AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11423: LD_EXP 34
11427: PUSH
11428: LD_VAR 0 1
11432: ARRAY
11433: PUSH
11434: LD_VAR 0 3
11438: PUSH
11439: LD_VAR 0 2
11443: ARRAY
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PPUSH
11449: LD_INT 13
11451: PUSH
11452: LD_INT 14
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 1
11461: PPUSH
11462: LD_INT 2
11464: PPUSH
11465: CALL_OW 12
11469: ARRAY
11470: PPUSH
11471: CALL_OW 173
// end else
11475: GO 11529
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11477: LD_EXP 34
11481: PUSH
11482: LD_VAR 0 1
11486: ARRAY
11487: PUSH
11488: LD_VAR 0 3
11492: PUSH
11493: LD_VAR 0 2
11497: ARRAY
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PPUSH
11503: LD_INT 13
11505: PUSH
11506: LD_INT 14
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 1
11515: PPUSH
11516: LD_INT 2
11518: PPUSH
11519: CALL_OW 12
11523: ARRAY
11524: PPUSH
11525: CALL_OW 173
// end ; end else
11529: GO 11583
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11531: LD_EXP 34
11535: PUSH
11536: LD_VAR 0 1
11540: ARRAY
11541: PUSH
11542: LD_VAR 0 3
11546: PUSH
11547: LD_VAR 0 2
11551: ARRAY
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PPUSH
11557: LD_INT 13
11559: PUSH
11560: LD_INT 14
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 1
11569: PPUSH
11570: LD_INT 2
11572: PPUSH
11573: CALL_OW 12
11577: ARRAY
11578: PPUSH
11579: CALL_OW 173
// end ; end ;
11583: GO 11342
11585: POP
11586: POP
// end ;
11587: GO 11324
11589: POP
11590: POP
// end ;
11591: PPOPN 3
11593: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
11594: LD_EXP 41
11598: PUSH
11599: LD_INT 0
11601: EQUAL
11602: IFFALSE 11792
11604: GO 11606
11606: DISABLE
11607: LD_INT 0
11609: PPUSH
11610: PPUSH
// begin enable ;
11611: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
11612: LD_ADDR_VAR 0 1
11616: PUSH
11617: LD_INT 13
11619: PPUSH
11620: LD_INT 22
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: EMPTY
11631: LIST
11632: PPUSH
11633: CALL_OW 70
11637: PUSH
11638: FOR_IN
11639: IFFALSE 11700
// begin for j in RuScientists do
11641: LD_ADDR_VAR 0 2
11645: PUSH
11646: LD_EXP 34
11650: PUSH
11651: FOR_IN
11652: IFFALSE 11687
// if j = i then
11654: LD_VAR 0 2
11658: PUSH
11659: LD_VAR 0 1
11663: EQUAL
11664: IFFALSE 11685
// RuScientists = RuScientists diff [ i ] ;
11666: LD_ADDR_EXP 34
11670: PUSH
11671: LD_EXP 34
11675: PUSH
11676: LD_VAR 0 1
11680: PUSH
11681: EMPTY
11682: LIST
11683: DIFF
11684: ST_TO_ADDR
11685: GO 11651
11687: POP
11688: POP
// RemoveUnit ( i ) ;
11689: LD_VAR 0 1
11693: PPUSH
11694: CALL_OW 64
// end ;
11698: GO 11638
11700: POP
11701: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
11702: LD_ADDR_VAR 0 1
11706: PUSH
11707: LD_INT 14
11709: PPUSH
11710: LD_INT 22
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: PPUSH
11723: CALL_OW 70
11727: PUSH
11728: FOR_IN
11729: IFFALSE 11790
// begin for j in RuScientists do
11731: LD_ADDR_VAR 0 2
11735: PUSH
11736: LD_EXP 34
11740: PUSH
11741: FOR_IN
11742: IFFALSE 11777
// if j = i then
11744: LD_VAR 0 2
11748: PUSH
11749: LD_VAR 0 1
11753: EQUAL
11754: IFFALSE 11775
// RuScientists = RuScientists diff [ i ] ;
11756: LD_ADDR_EXP 34
11760: PUSH
11761: LD_EXP 34
11765: PUSH
11766: LD_VAR 0 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: DIFF
11774: ST_TO_ADDR
11775: GO 11741
11777: POP
11778: POP
// RemoveUnit ( i ) ;
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 64
// end ;
11788: GO 11728
11790: POP
11791: POP
// end ; end_of_file
11792: PPOPN 2
11794: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
11795: LD_INT 0
11797: PPUSH
11798: PPUSH
// if exist_mode then
11799: LD_VAR 0 2
11803: IFFALSE 11822
// unit := CreateCharacter ( ident ) else
11805: LD_ADDR_VAR 0 4
11809: PUSH
11810: LD_VAR 0 1
11814: PPUSH
11815: CALL_OW 34
11819: ST_TO_ADDR
11820: GO 11837
// unit := NewCharacter ( ident ) ;
11822: LD_ADDR_VAR 0 4
11826: PUSH
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 25
11836: ST_TO_ADDR
// result := unit ;
11837: LD_ADDR_VAR 0 3
11841: PUSH
11842: LD_VAR 0 4
11846: ST_TO_ADDR
// end ;
11847: LD_VAR 0 3
11851: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11852: LD_INT 0
11854: PPUSH
11855: PPUSH
// for i in charactersList do
11856: LD_ADDR_VAR 0 4
11860: PUSH
11861: LD_VAR 0 1
11865: PUSH
11866: FOR_IN
11867: IFFALSE 11896
// begin if IsOk ( i ) then
11869: LD_VAR 0 4
11873: PPUSH
11874: CALL_OW 302
11878: IFFALSE 11894
// SaveCharacters ( i , ident ) ;
11880: LD_VAR 0 4
11884: PPUSH
11885: LD_VAR 0 2
11889: PPUSH
11890: CALL_OW 38
// end ;
11894: GO 11866
11896: POP
11897: POP
// end ;
11898: LD_VAR 0 3
11902: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11903: LD_INT 0
11905: PPUSH
11906: PPUSH
11907: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
11908: LD_ADDR_VAR 0 1
11912: PUSH
11913: LD_VAR 0 1
11917: PUSH
11918: LD_EXP 1
11922: PUSH
11923: LD_EXP 7
11927: PUSH
11928: LD_EXP 3
11932: PUSH
11933: LD_EXP 4
11937: PUSH
11938: LD_EXP 5
11942: PUSH
11943: LD_EXP 2
11947: PUSH
11948: LD_EXP 12
11952: PUSH
11953: LD_EXP 13
11957: PUSH
11958: LD_EXP 9
11962: PUSH
11963: LD_EXP 11
11967: PUSH
11968: LD_EXP 6
11972: PUSH
11973: LD_EXP 8
11977: PUSH
11978: LD_EXP 10
11982: PUSH
11983: LD_EXP 22
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: DIFF
12004: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
12005: LD_ADDR_VAR 0 6
12009: PUSH
12010: LD_INT 1
12012: PPUSH
12013: LD_VAR 0 1
12017: PPUSH
12018: CALL_OW 12
12022: ST_TO_ADDR
// for i = 1 to characters do
12023: LD_ADDR_VAR 0 5
12027: PUSH
12028: DOUBLE
12029: LD_INT 1
12031: DEC
12032: ST_TO_ADDR
12033: LD_VAR 0 1
12037: PUSH
12038: FOR_TO
12039: IFFALSE 12149
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
12041: LD_VAR 0 5
12045: PUSH
12046: LD_VAR 0 6
12050: EQUAL
12051: PUSH
12052: LD_VAR 0 1
12056: PUSH
12057: LD_VAR 0 5
12061: ARRAY
12062: PPUSH
12063: CALL_OW 258
12067: PUSH
12068: LD_INT 1
12070: EQUAL
12071: AND
12072: IFFALSE 12094
// Say ( characters [ i ] , dialogMID ) ;
12074: LD_VAR 0 1
12078: PUSH
12079: LD_VAR 0 5
12083: ARRAY
12084: PPUSH
12085: LD_VAR 0 2
12089: PPUSH
12090: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
12094: LD_VAR 0 5
12098: PUSH
12099: LD_VAR 0 6
12103: EQUAL
12104: PUSH
12105: LD_VAR 0 1
12109: PUSH
12110: LD_VAR 0 5
12114: ARRAY
12115: PPUSH
12116: CALL_OW 258
12120: PUSH
12121: LD_INT 2
12123: EQUAL
12124: AND
12125: IFFALSE 12147
// Say ( characters [ i ] , dialogFID ) ;
12127: LD_VAR 0 1
12131: PUSH
12132: LD_VAR 0 5
12136: ARRAY
12137: PPUSH
12138: LD_VAR 0 3
12142: PPUSH
12143: CALL_OW 88
// end ;
12147: GO 12038
12149: POP
12150: POP
// end ;
12151: LD_VAR 0 4
12155: RET
// export function PrepareDifficulty ; var tmp ; begin
12156: LD_INT 0
12158: PPUSH
12159: PPUSH
// if Difficulty = 1 then
12160: LD_OWVAR 67
12164: PUSH
12165: LD_INT 1
12167: EQUAL
12168: IFFALSE 12186
// begin RuSolMinLevel = 8 ;
12170: LD_ADDR_EXP 36
12174: PUSH
12175: LD_INT 8
12177: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12178: LD_ADDR_EXP 37
12182: PUSH
12183: LD_INT 10
12185: ST_TO_ADDR
// end ; if Difficulty = 2 then
12186: LD_OWVAR 67
12190: PUSH
12191: LD_INT 2
12193: EQUAL
12194: IFFALSE 12288
// begin RuSolMinLevel = 9 ;
12196: LD_ADDR_EXP 36
12200: PUSH
12201: LD_INT 9
12203: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12204: LD_ADDR_EXP 37
12208: PUSH
12209: LD_INT 10
12211: ST_TO_ADDR
// uc_nation = 3 ;
12212: LD_ADDR_OWVAR 21
12216: PUSH
12217: LD_INT 3
12219: ST_TO_ADDR
// uc_side = 3 ;
12220: LD_ADDR_OWVAR 20
12224: PUSH
12225: LD_INT 3
12227: ST_TO_ADDR
// bc_level = 10 ;
12228: LD_ADDR_OWVAR 43
12232: PUSH
12233: LD_INT 10
12235: ST_TO_ADDR
// bc_type = b_turret ;
12236: LD_ADDR_OWVAR 42
12240: PUSH
12241: LD_INT 33
12243: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12244: LD_ADDR_VAR 0 2
12248: PUSH
12249: LD_INT 86
12251: PPUSH
12252: LD_INT 34
12254: PPUSH
12255: LD_INT 2
12257: PPUSH
12258: CALL_OW 47
12262: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12263: LD_VAR 0 2
12267: PPUSH
12268: LD_INT 49
12270: PPUSH
12271: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12275: LD_INT 64
12277: PPUSH
12278: LD_INT 3
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: CALL_OW 322
// end ; if Difficulty = 3 then
12288: LD_OWVAR 67
12292: PUSH
12293: LD_INT 3
12295: EQUAL
12296: IFFALSE 12434
// begin RuSolMinLevel = 10 ;
12298: LD_ADDR_EXP 36
12302: PUSH
12303: LD_INT 10
12305: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12306: LD_ADDR_EXP 37
12310: PUSH
12311: LD_INT 10
12313: ST_TO_ADDR
// uc_nation = 3 ;
12314: LD_ADDR_OWVAR 21
12318: PUSH
12319: LD_INT 3
12321: ST_TO_ADDR
// uc_side = 3 ;
12322: LD_ADDR_OWVAR 20
12326: PUSH
12327: LD_INT 3
12329: ST_TO_ADDR
// bc_level = 10 ;
12330: LD_ADDR_OWVAR 43
12334: PUSH
12335: LD_INT 10
12337: ST_TO_ADDR
// bc_type = b_turret ;
12338: LD_ADDR_OWVAR 42
12342: PUSH
12343: LD_INT 33
12345: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12346: LD_ADDR_VAR 0 2
12350: PUSH
12351: LD_INT 86
12353: PPUSH
12354: LD_INT 34
12356: PPUSH
12357: LD_INT 2
12359: PPUSH
12360: CALL_OW 47
12364: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12365: LD_VAR 0 2
12369: PPUSH
12370: LD_INT 49
12372: PPUSH
12373: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12377: LD_ADDR_VAR 0 2
12381: PUSH
12382: LD_INT 93
12384: PPUSH
12385: LD_INT 31
12387: PPUSH
12388: LD_INT 2
12390: PPUSH
12391: CALL_OW 47
12395: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12396: LD_VAR 0 2
12400: PPUSH
12401: LD_INT 49
12403: PPUSH
12404: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12408: LD_INT 64
12410: PPUSH
12411: LD_INT 3
12413: PPUSH
12414: LD_INT 1
12416: PPUSH
12417: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12421: LD_INT 65
12423: PPUSH
12424: LD_INT 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 322
// end ; end ;
12434: LD_VAR 0 1
12438: RET
// export function ShowQuery1 ; begin
12439: LD_INT 0
12441: PPUSH
// case query ( Q1 ) of 1 :
12442: LD_STRING Q1
12444: PPUSH
12445: CALL_OW 97
12449: PUSH
12450: LD_INT 1
12452: DOUBLE
12453: EQUAL
12454: IFTRUE 12458
12456: GO 12469
12458: POP
// result = 1 ; 2 :
12459: LD_ADDR_VAR 0 1
12463: PUSH
12464: LD_INT 1
12466: ST_TO_ADDR
12467: GO 12508
12469: LD_INT 2
12471: DOUBLE
12472: EQUAL
12473: IFTRUE 12477
12475: GO 12488
12477: POP
// result = 2 ; 3 :
12478: LD_ADDR_VAR 0 1
12482: PUSH
12483: LD_INT 2
12485: ST_TO_ADDR
12486: GO 12508
12488: LD_INT 3
12490: DOUBLE
12491: EQUAL
12492: IFTRUE 12496
12494: GO 12507
12496: POP
// result = 3 ; end ;
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_INT 3
12504: ST_TO_ADDR
12505: GO 12508
12507: POP
// end ;
12508: LD_VAR 0 1
12512: RET
// export function ShowQuery2 ; begin
12513: LD_INT 0
12515: PPUSH
// case query ( Q1a ) of 1 :
12516: LD_STRING Q1a
12518: PPUSH
12519: CALL_OW 97
12523: PUSH
12524: LD_INT 1
12526: DOUBLE
12527: EQUAL
12528: IFTRUE 12532
12530: GO 12543
12532: POP
// result = 1 ; 2 :
12533: LD_ADDR_VAR 0 1
12537: PUSH
12538: LD_INT 1
12540: ST_TO_ADDR
12541: GO 12582
12543: LD_INT 2
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12562
12551: POP
// result = 2 ; 3 :
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: LD_INT 2
12559: ST_TO_ADDR
12560: GO 12582
12562: LD_INT 3
12564: DOUBLE
12565: EQUAL
12566: IFTRUE 12570
12568: GO 12581
12570: POP
// result = 3 ; end ;
12571: LD_ADDR_VAR 0 1
12575: PUSH
12576: LD_INT 3
12578: ST_TO_ADDR
12579: GO 12582
12581: POP
// end ;
12582: LD_VAR 0 1
12586: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12587: LD_INT 0
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
// for i = 1 to count do
12594: LD_ADDR_VAR 0 8
12598: PUSH
12599: DOUBLE
12600: LD_INT 1
12602: DEC
12603: ST_TO_ADDR
12604: LD_VAR 0 6
12608: PUSH
12609: FOR_TO
12610: IFFALSE 12691
// begin uc_side = side ;
12612: LD_ADDR_OWVAR 20
12616: PUSH
12617: LD_VAR 0 1
12621: ST_TO_ADDR
// uc_nation = nation ;
12622: LD_ADDR_OWVAR 21
12626: PUSH
12627: LD_VAR 0 2
12631: ST_TO_ADDR
// hc_gallery =  ;
12632: LD_ADDR_OWVAR 33
12636: PUSH
12637: LD_STRING 
12639: ST_TO_ADDR
// hc_name =  ;
12640: LD_ADDR_OWVAR 26
12644: PUSH
12645: LD_STRING 
12647: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12648: LD_INT 0
12650: PPUSH
12651: LD_VAR 0 5
12655: PPUSH
12656: LD_VAR 0 4
12660: PPUSH
12661: CALL_OW 380
// un = CreateHuman ;
12665: LD_ADDR_VAR 0 10
12669: PUSH
12670: CALL_OW 44
12674: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12675: LD_VAR 0 10
12679: PPUSH
12680: LD_VAR 0 3
12684: PPUSH
12685: CALL_OW 52
// end ;
12689: GO 12609
12691: POP
12692: POP
// end ;
12693: LD_VAR 0 7
12697: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
12698: LD_INT 0
12700: PPUSH
12701: PPUSH
12702: PPUSH
12703: PPUSH
// for i = 1 to 72 do
12704: LD_ADDR_VAR 0 5
12708: PUSH
12709: DOUBLE
12710: LD_INT 1
12712: DEC
12713: ST_TO_ADDR
12714: LD_INT 72
12716: PUSH
12717: FOR_TO
12718: IFFALSE 12776
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
12720: LD_VAR 0 5
12724: PPUSH
12725: LD_VAR 0 1
12729: PPUSH
12730: CALL_OW 321
12734: PUSH
12735: LD_INT 1
12737: EQUAL
12738: PUSH
12739: LD_VAR 0 5
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: CALL_OW 482
12753: PUSH
12754: LD_INT 1
12756: EQUAL
12757: AND
12758: IFFALSE 12774
// AddComResearch ( lab , i ) ;
12760: LD_VAR 0 2
12764: PPUSH
12765: LD_VAR 0 5
12769: PPUSH
12770: CALL_OW 184
12774: GO 12717
12776: POP
12777: POP
// end ;
12778: LD_VAR 0 4
12782: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12783: LD_INT 0
12785: PPUSH
12786: PPUSH
12787: PPUSH
12788: PPUSH
12789: PPUSH
12790: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12791: LD_ADDR_VAR 0 8
12795: PUSH
12796: LD_VAR 0 2
12800: PPUSH
12801: CALL_OW 313
12805: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
12806: LD_ADDR_VAR 0 9
12810: PUSH
12811: LD_VAR 0 3
12815: PPUSH
12816: LD_INT 22
12818: PUSH
12819: LD_VAR 0 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 24
12840: PUSH
12841: LD_INT 750
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 3
12850: PUSH
12851: LD_INT 54
12853: PUSH
12854: EMPTY
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 70
12871: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
12872: LD_ADDR_VAR 0 6
12876: PUSH
12877: LD_VAR 0 3
12881: PPUSH
12882: LD_INT 22
12884: PUSH
12885: LD_VAR 0 1
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 21
12896: PUSH
12897: LD_INT 3
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 3
12906: PUSH
12907: LD_INT 24
12909: PUSH
12910: LD_INT 1000
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: PPUSH
12929: CALL_OW 70
12933: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
12934: LD_VAR 0 6
12938: NOT
12939: PUSH
12940: LD_INT 22
12942: PUSH
12943: LD_VAR 0 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 25
12954: PUSH
12955: LD_INT 2
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 24
12964: PUSH
12965: LD_INT 250
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: NOT
12982: AND
12983: IFFALSE 12987
// exit ;
12985: GO 13169
// if buildings_list > 0 and engineerOkInside then
12987: LD_VAR 0 6
12991: PUSH
12992: LD_INT 0
12994: GREATER
12995: PUSH
12996: LD_VAR 0 8
13000: AND
13001: IFFALSE 13012
// ComExitBuilding ( engineerOkInside ) ;
13003: LD_VAR 0 8
13007: PPUSH
13008: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13012: LD_VAR 0 6
13016: PUSH
13017: LD_INT 0
13019: GREATER
13020: PUSH
13021: LD_VAR 0 9
13025: PUSH
13026: LD_INT 0
13028: GREATER
13029: AND
13030: IFFALSE 13050
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13032: LD_VAR 0 9
13036: PPUSH
13037: LD_VAR 0 6
13041: PUSH
13042: LD_INT 1
13044: ARRAY
13045: PPUSH
13046: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13050: LD_VAR 0 6
13054: PUSH
13055: LD_INT 0
13057: EQUAL
13058: PUSH
13059: LD_VAR 0 4
13063: PUSH
13064: LD_INT 0
13066: EQUAL
13067: AND
13068: PUSH
13069: LD_VAR 0 9
13073: PUSH
13074: LD_INT 0
13076: GREATER
13077: AND
13078: IFFALSE 13094
// ComEnterUnit ( engineerOkOutside , building ) ;
13080: LD_VAR 0 9
13084: PPUSH
13085: LD_VAR 0 2
13089: PPUSH
13090: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13094: LD_VAR 0 9
13098: PUSH
13099: LD_INT 0
13101: GREATER
13102: PUSH
13103: LD_VAR 0 6
13107: PUSH
13108: LD_INT 0
13110: EQUAL
13111: AND
13112: PUSH
13113: LD_VAR 0 4
13117: PUSH
13118: LD_INT 0
13120: GREATER
13121: AND
13122: IFFALSE 13169
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13124: LD_VAR 0 9
13128: PPUSH
13129: LD_VAR 0 4
13133: PUSH
13134: LD_INT 1
13136: ARRAY
13137: PPUSH
13138: LD_VAR 0 4
13142: PUSH
13143: LD_INT 2
13145: ARRAY
13146: PPUSH
13147: LD_VAR 0 4
13151: PUSH
13152: LD_INT 3
13154: ARRAY
13155: PPUSH
13156: LD_VAR 0 4
13160: PUSH
13161: LD_INT 4
13163: ARRAY
13164: PPUSH
13165: CALL_OW 145
// end ;
13169: LD_VAR 0 5
13173: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13174: LD_INT 0
13176: PPUSH
13177: PPUSH
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
13182: PPUSH
13183: PPUSH
13184: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13185: LD_ADDR_VAR 0 6
13189: PUSH
13190: LD_INT 22
13192: PUSH
13193: LD_VAR 0 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 25
13204: PUSH
13205: LD_INT 4
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 24
13214: PUSH
13215: LD_INT 251
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: PUSH
13232: LD_EXP 34
13236: PUSH
13237: EMPTY
13238: LIST
13239: DIFF
13240: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13241: LD_ADDR_VAR 0 7
13245: PUSH
13246: LD_VAR 0 3
13250: PPUSH
13251: LD_INT 22
13253: PUSH
13254: LD_VAR 0 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 25
13265: PUSH
13266: LD_INT 4
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 50
13275: PUSH
13276: EMPTY
13277: LIST
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: LIST
13283: PPUSH
13284: CALL_OW 70
13288: PUSH
13289: LD_EXP 34
13293: PUSH
13294: EMPTY
13295: LIST
13296: DIFF
13297: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13298: LD_ADDR_VAR 0 10
13302: PUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: LD_INT 22
13310: PUSH
13311: LD_VAR 0 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 21
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 3
13332: PUSH
13333: LD_INT 24
13335: PUSH
13336: LD_INT 750
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 70
13356: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13357: LD_ADDR_VAR 0 11
13361: PUSH
13362: LD_VAR 0 2
13366: PPUSH
13367: LD_INT 22
13369: PUSH
13370: LD_VAR 0 1
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 21
13381: PUSH
13382: LD_INT 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: LD_INT 24
13394: PUSH
13395: LD_INT 1000
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 70
13415: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13416: LD_VAR 0 10
13420: PUSH
13421: LD_INT 0
13423: GREATER
13424: PUSH
13425: LD_VAR 0 6
13429: PUSH
13430: LD_INT 0
13432: GREATER
13433: AND
13434: IFFALSE 13450
// ComMoveToArea ( damageUnits , healArea ) ;
13436: LD_VAR 0 10
13440: PPUSH
13441: LD_VAR 0 2
13445: PPUSH
13446: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
13450: LD_VAR 0 11
13454: PUSH
13455: LD_INT 0
13457: GREATER
13458: PUSH
13459: LD_VAR 0 6
13463: PUSH
13464: LD_INT 0
13466: GREATER
13467: AND
13468: IFFALSE 13493
// ComExitBuilding ( UnitsInside ( build ) diff [ RuScientists ] ) ;
13470: LD_VAR 0 4
13474: PPUSH
13475: CALL_OW 313
13479: PUSH
13480: LD_EXP 34
13484: PUSH
13485: EMPTY
13486: LIST
13487: DIFF
13488: PPUSH
13489: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
13493: LD_VAR 0 11
13497: PUSH
13498: LD_INT 0
13500: GREATER
13501: PUSH
13502: LD_VAR 0 7
13506: PUSH
13507: LD_INT 0
13509: GREATER
13510: AND
13511: IFFALSE 13531
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13513: LD_VAR 0 7
13517: PPUSH
13518: LD_VAR 0 11
13522: PUSH
13523: LD_INT 1
13525: ARRAY
13526: PPUSH
13527: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13531: LD_VAR 0 10
13535: PUSH
13536: LD_INT 0
13538: EQUAL
13539: PUSH
13540: LD_VAR 0 11
13544: PUSH
13545: LD_INT 0
13547: EQUAL
13548: AND
13549: PUSH
13550: LD_VAR 0 7
13554: PUSH
13555: LD_INT 0
13557: GREATER
13558: AND
13559: IFFALSE 13664
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13561: LD_ADDR_VAR 0 12
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_VAR 0 1
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 21
13580: PUSH
13581: LD_INT 3
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 30
13590: PUSH
13591: LD_INT 8
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13608: LD_ADDR_VAR 0 13
13612: PUSH
13613: LD_INT 1
13615: PPUSH
13616: LD_VAR 0 12
13620: PPUSH
13621: CALL_OW 12
13625: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13626: LD_VAR 0 7
13630: PPUSH
13631: LD_INT 3
13633: PUSH
13634: LD_INT 60
13636: PUSH
13637: EMPTY
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PPUSH
13644: CALL_OW 72
13648: PPUSH
13649: LD_VAR 0 12
13653: PUSH
13654: LD_VAR 0 13
13658: ARRAY
13659: PPUSH
13660: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13664: LD_VAR 0 3
13668: PPUSH
13669: LD_INT 22
13671: PUSH
13672: LD_VAR 0 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 3
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 24
13693: PUSH
13694: LD_INT 751
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 70
13710: PUSH
13711: LD_INT 0
13713: GREATER
13714: PUSH
13715: LD_INT 21
13717: PPUSH
13718: CALL_OW 302
13722: AND
13723: PUSH
13724: LD_INT 21
13726: PPUSH
13727: CALL_OW 255
13731: PUSH
13732: LD_INT 3
13734: EQUAL
13735: AND
13736: IFFALSE 13792
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_INT 22
13745: PUSH
13746: LD_VAR 0 1
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 25
13757: PUSH
13758: LD_INT 3
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 24
13767: PUSH
13768: LD_INT 751
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 70
13784: PPUSH
13785: LD_INT 21
13787: PPUSH
13788: CALL_OW 120
// end ;
13792: LD_VAR 0 5
13796: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13801: LD_INT 22
13803: PUSH
13804: LD_VAR 0 1
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 21
13815: PUSH
13816: LD_INT 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 69
13831: PUSH
13832: LD_INT 18
13834: PPUSH
13835: LD_INT 22
13837: PUSH
13838: LD_VAR 0 1
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 21
13849: PUSH
13850: LD_INT 2
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PPUSH
13861: CALL_OW 70
13865: PUSH
13866: LD_VAR 0 3
13870: LESSEQUAL
13871: DIFF
13872: IFFALSE 13939
// for i = 1 to vehCount do
13874: LD_ADDR_VAR 0 9
13878: PUSH
13879: DOUBLE
13880: LD_INT 1
13882: DEC
13883: ST_TO_ADDR
13884: LD_VAR 0 3
13888: PUSH
13889: FOR_TO
13890: IFFALSE 13937
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
13892: LD_VAR 0 2
13896: PPUSH
13897: LD_VAR 0 7
13901: PPUSH
13902: LD_VAR 0 5
13906: PPUSH
13907: LD_VAR 0 6
13911: PPUSH
13912: LD_VAR 0 4
13916: PUSH
13917: LD_INT 1
13919: PPUSH
13920: LD_VAR 0 4
13924: PPUSH
13925: CALL_OW 12
13929: ARRAY
13930: PPUSH
13931: CALL_OW 185
13935: GO 13889
13937: POP
13938: POP
// end ;
13939: LD_VAR 0 8
13943: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
13944: LD_INT 0
13946: PPUSH
13947: PPUSH
13948: PPUSH
13949: PPUSH
13950: PPUSH
13951: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
13952: LD_EXP 39
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: LD_INT 4
13962: PUSH
13963: LD_INT 4
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: PUSH
13971: LD_OWVAR 67
13975: ARRAY
13976: GREATEREQUAL
13977: PUSH
13978: LD_EXP 40
13982: PUSH
13983: LD_INT 1
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 2
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: LD_OWVAR 67
14001: ARRAY
14002: GREATEREQUAL
14003: AND
14004: IFFALSE 14237
// begin repeat wait ( 0 0$1 ) ;
14006: LD_INT 35
14008: PPUSH
14009: CALL_OW 67
// for j in russianTanks do
14013: LD_ADDR_VAR 0 4
14017: PUSH
14018: LD_EXP 39
14022: PUSH
14023: FOR_IN
14024: IFFALSE 14225
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14026: LD_ADDR_VAR 0 6
14030: PUSH
14031: LD_INT 81
14033: PUSH
14034: LD_VAR 0 1
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 101
14045: PUSH
14046: LD_INT 1
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 69
14061: PPUSH
14062: LD_VAR 0 4
14066: PPUSH
14067: CALL_OW 74
14071: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14072: LD_ADDR_VAR 0 7
14076: PUSH
14077: LD_INT 81
14079: PUSH
14080: LD_VAR 0 1
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 101
14091: PUSH
14092: LD_INT 1
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 59
14104: PUSH
14105: EMPTY
14106: LIST
14107: PUSH
14108: LD_INT 21
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 21
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: PPUSH
14142: CALL_OW 69
14146: PPUSH
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 74
14156: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14157: LD_VAR 0 4
14161: PPUSH
14162: LD_VAR 0 6
14166: PPUSH
14167: CALL_OW 296
14171: PUSH
14172: LD_INT 8
14174: PLUS
14175: PUSH
14176: LD_VAR 0 4
14180: PPUSH
14181: LD_VAR 0 7
14185: PPUSH
14186: CALL_OW 296
14190: LESS
14191: IFFALSE 14209
// ComAttackUnit ( j , target1 ) else
14193: LD_VAR 0 4
14197: PPUSH
14198: LD_VAR 0 6
14202: PPUSH
14203: CALL_OW 115
14207: GO 14223
// ComAttackUnit ( j , target2 ) ;
14209: LD_VAR 0 4
14213: PPUSH
14214: LD_VAR 0 7
14218: PPUSH
14219: CALL_OW 115
// end ;
14223: GO 14023
14225: POP
14226: POP
// until russianTanks = 0 ;
14227: LD_EXP 39
14231: PUSH
14232: LD_INT 0
14234: EQUAL
14235: IFFALSE 14006
// end ; end ;
14237: LD_VAR 0 2
14241: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14242: LD_INT 0
14244: PPUSH
14245: PPUSH
14246: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14247: LD_EXP 39
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: LD_INT 4
14257: PUSH
14258: LD_INT 4
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: LD_OWVAR 67
14270: ARRAY
14271: GREATEREQUAL
14272: PUSH
14273: LD_EXP 40
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: LD_INT 2
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: LD_OWVAR 67
14296: ARRAY
14297: GREATEREQUAL
14298: AND
14299: IFFALSE 14420
// repeat wait ( 0 0$1 ) ;
14301: LD_INT 35
14303: PPUSH
14304: CALL_OW 67
// if russianTimeLapsers > 0 then
14308: LD_EXP 40
14312: PUSH
14313: LD_INT 0
14315: GREATER
14316: IFFALSE 14410
// for j in russianTimeLapsers do
14318: LD_ADDR_VAR 0 3
14322: PUSH
14323: LD_EXP 40
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14408
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14331: LD_ADDR_VAR 0 4
14335: PUSH
14336: LD_INT 81
14338: PUSH
14339: LD_VAR 0 1
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 101
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: PPUSH
14367: LD_VAR 0 3
14371: PPUSH
14372: CALL_OW 74
14376: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
14377: LD_VAR 0 3
14381: PPUSH
14382: LD_VAR 0 4
14386: PPUSH
14387: CALL_OW 250
14391: PPUSH
14392: LD_VAR 0 4
14396: PPUSH
14397: CALL_OW 251
14401: PPUSH
14402: CALL_OW 111
// end ;
14406: GO 14328
14408: POP
14409: POP
// until russianTimeLapsers = 0 ;
14410: LD_EXP 40
14414: PUSH
14415: LD_INT 0
14417: EQUAL
14418: IFFALSE 14301
// end ;
14420: LD_VAR 0 2
14424: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14425: LD_INT 0
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
14431: PPUSH
14432: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14433: LD_ADDR_VAR 0 6
14437: PUSH
14438: LD_INT 22
14440: PUSH
14441: LD_VAR 0 1
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 25
14452: PUSH
14453: LD_INT 9
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PPUSH
14464: CALL_OW 69
14468: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14469: LD_ADDR_VAR 0 7
14473: PUSH
14474: LD_INT 81
14476: PUSH
14477: LD_VAR 0 1
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 3
14488: PUSH
14489: LD_INT 21
14491: PUSH
14492: LD_INT 3
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 69
14511: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14512: LD_ADDR_VAR 0 4
14516: PUSH
14517: LD_INT 1
14519: PPUSH
14520: LD_INT 3
14522: PPUSH
14523: CALL_OW 12
14527: ST_TO_ADDR
// for i = 1 to list do
14528: LD_ADDR_VAR 0 5
14532: PUSH
14533: DOUBLE
14534: LD_INT 1
14536: DEC
14537: ST_TO_ADDR
14538: LD_VAR 0 6
14542: PUSH
14543: FOR_TO
14544: IFFALSE 14746
// for ta in filter do
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_VAR 0 7
14555: PUSH
14556: FOR_IN
14557: IFFALSE 14742
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14559: LD_VAR 0 6
14563: PUSH
14564: LD_VAR 0 5
14568: ARRAY
14569: PPUSH
14570: LD_VAR 0 3
14574: PPUSH
14575: CALL_OW 296
14579: PUSH
14580: LD_INT 15
14582: LESSEQUAL
14583: IFFALSE 14740
// begin case c of 1 :
14585: LD_VAR 0 4
14589: PUSH
14590: LD_INT 1
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14636
14598: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14599: LD_VAR 0 6
14603: PUSH
14604: LD_VAR 0 5
14608: ARRAY
14609: PPUSH
14610: LD_VAR 0 3
14614: PPUSH
14615: CALL_OW 250
14619: PPUSH
14620: LD_VAR 0 3
14624: PPUSH
14625: CALL_OW 251
14629: PPUSH
14630: CALL_OW 154
14634: GO 14740
14636: LD_INT 2
14638: DOUBLE
14639: EQUAL
14640: IFTRUE 14644
14642: GO 14708
14644: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14645: LD_VAR 0 6
14649: PUSH
14650: LD_VAR 0 5
14654: ARRAY
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: CALL_OW 250
14665: PUSH
14666: LD_INT 1
14668: NEG
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 12
14677: PLUS
14678: PPUSH
14679: LD_VAR 0 3
14683: PPUSH
14684: CALL_OW 251
14688: PUSH
14689: LD_INT 1
14691: NEG
14692: PPUSH
14693: LD_INT 1
14695: PPUSH
14696: CALL_OW 12
14700: PLUS
14701: PPUSH
14702: CALL_OW 153
14706: GO 14740
14708: LD_INT 3
14710: DOUBLE
14711: EQUAL
14712: IFTRUE 14716
14714: GO 14739
14716: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14717: LD_VAR 0 6
14721: PUSH
14722: LD_VAR 0 5
14726: ARRAY
14727: PPUSH
14728: LD_VAR 0 3
14732: PPUSH
14733: CALL_OW 115
14737: GO 14740
14739: POP
// end ; end ;
14740: GO 14556
14742: POP
14743: POP
14744: GO 14543
14746: POP
14747: POP
// end ;
14748: LD_VAR 0 2
14752: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14753: LD_INT 0
14755: PPUSH
14756: PPUSH
14757: PPUSH
14758: PPUSH
// r := 100 ;
14759: LD_ADDR_VAR 0 5
14763: PUSH
14764: LD_INT 100
14766: ST_TO_ADDR
// x := 0 ;
14767: LD_ADDR_VAR 0 6
14771: PUSH
14772: LD_INT 0
14774: ST_TO_ADDR
// while ( x < n ) do
14775: LD_VAR 0 6
14779: PUSH
14780: LD_VAR 0 2
14784: LESS
14785: IFFALSE 15072
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14787: LD_ADDR_VAR 0 4
14791: PUSH
14792: DOUBLE
14793: LD_INT 1
14795: DEC
14796: ST_TO_ADDR
14797: LD_VAR 0 1
14801: PPUSH
14802: LD_INT 0
14804: PPUSH
14805: CALL_OW 517
14809: PUSH
14810: LD_INT 1
14812: ARRAY
14813: PUSH
14814: FOR_TO
14815: IFFALSE 15068
// begin if r > 50 then
14817: LD_VAR 0 5
14821: PUSH
14822: LD_INT 50
14824: GREATER
14825: IFFALSE 15044
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_INT 0
14834: PPUSH
14835: CALL_OW 517
14839: PUSH
14840: LD_INT 1
14842: ARRAY
14843: PUSH
14844: LD_VAR 0 4
14848: ARRAY
14849: PPUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_INT 0
14857: PPUSH
14858: CALL_OW 517
14862: PUSH
14863: LD_INT 2
14865: ARRAY
14866: PUSH
14867: LD_VAR 0 4
14871: ARRAY
14872: PPUSH
14873: CALL_OW 458
14877: NOT
14878: IFFALSE 15028
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
14880: LD_VAR 0 1
14884: PPUSH
14885: LD_INT 0
14887: PPUSH
14888: CALL_OW 517
14892: PUSH
14893: LD_INT 1
14895: ARRAY
14896: PUSH
14897: LD_VAR 0 4
14901: ARRAY
14902: PPUSH
14903: LD_VAR 0 1
14907: PPUSH
14908: LD_INT 0
14910: PPUSH
14911: CALL_OW 517
14915: PUSH
14916: LD_INT 2
14918: ARRAY
14919: PUSH
14920: LD_VAR 0 4
14924: ARRAY
14925: PPUSH
14926: LD_INT 5
14928: PPUSH
14929: LD_INT 0
14931: PPUSH
14932: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14936: LD_ADDR_EXP 42
14940: PUSH
14941: LD_EXP 42
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: LD_VAR 0 1
14953: PPUSH
14954: LD_INT 0
14956: PPUSH
14957: CALL_OW 517
14961: PUSH
14962: LD_INT 1
14964: ARRAY
14965: PUSH
14966: LD_VAR 0 4
14970: ARRAY
14971: PUSH
14972: LD_VAR 0 1
14976: PPUSH
14977: LD_INT 0
14979: PPUSH
14980: CALL_OW 517
14984: PUSH
14985: LD_INT 2
14987: ARRAY
14988: PUSH
14989: LD_VAR 0 4
14993: ARRAY
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PPUSH
14999: CALL_OW 2
15003: ST_TO_ADDR
// r := 0 ;
15004: LD_ADDR_VAR 0 5
15008: PUSH
15009: LD_INT 0
15011: ST_TO_ADDR
// x := x + 1 ;
15012: LD_ADDR_VAR 0 6
15016: PUSH
15017: LD_VAR 0 6
15021: PUSH
15022: LD_INT 1
15024: PLUS
15025: ST_TO_ADDR
// end else
15026: GO 15042
// r := r + 35 ;
15028: LD_ADDR_VAR 0 5
15032: PUSH
15033: LD_VAR 0 5
15037: PUSH
15038: LD_INT 35
15040: PLUS
15041: ST_TO_ADDR
// end else
15042: GO 15066
// r := r + rand ( 10 , 25 ) ;
15044: LD_ADDR_VAR 0 5
15048: PUSH
15049: LD_VAR 0 5
15053: PUSH
15054: LD_INT 10
15056: PPUSH
15057: LD_INT 25
15059: PPUSH
15060: CALL_OW 12
15064: PLUS
15065: ST_TO_ADDR
// end ;
15066: GO 14814
15068: POP
15069: POP
15070: GO 14775
// end ; end_of_file
15072: LD_VAR 0 3
15076: RET
// on UnitDestroyed ( unit ) do var i ;
15077: LD_INT 0
15079: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
15080: LD_VAR 0 1
15084: PPUSH
15085: CALL_OW 255
15089: PUSH
15090: LD_INT 3
15092: EQUAL
15093: PUSH
15094: LD_VAR 0 1
15098: PPUSH
15099: CALL_OW 247
15103: PUSH
15104: LD_INT 1
15106: EQUAL
15107: AND
15108: IFFALSE 15172
// begin for i in RuScientists do
15110: LD_ADDR_VAR 0 2
15114: PUSH
15115: LD_EXP 34
15119: PUSH
15120: FOR_IN
15121: IFFALSE 15170
// if i = unit then
15123: LD_VAR 0 2
15127: PUSH
15128: LD_VAR 0 1
15132: EQUAL
15133: IFFALSE 15168
// begin RuScientists = RuScientists diff [ unit ] ;
15135: LD_ADDR_EXP 34
15139: PUSH
15140: LD_EXP 34
15144: PUSH
15145: LD_VAR 0 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: DIFF
15153: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15154: LD_ADDR_EXP 35
15158: PUSH
15159: LD_EXP 35
15163: PUSH
15164: LD_INT 1
15166: PLUS
15167: ST_TO_ADDR
// end ;
15168: GO 15120
15170: POP
15171: POP
// end ; end ;
15172: PPOPN 2
15174: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15175: LD_VAR 0 1
15179: PUSH
15180: LD_INT 10
15182: EQUAL
15183: PUSH
15184: LD_VAR 0 2
15188: PPUSH
15189: CALL_OW 255
15193: PUSH
15194: LD_INT 1
15196: EQUAL
15197: AND
15198: PUSH
15199: LD_EXP 45
15203: PUSH
15204: LD_INT 0
15206: EQUAL
15207: AND
15208: IFFALSE 15309
// begin eventVar1 = 1 ;
15210: LD_ADDR_EXP 45
15214: PUSH
15215: LD_INT 1
15217: ST_TO_ADDR
// teleportExplored = 1 ;
15218: LD_ADDR_EXP 33
15222: PUSH
15223: LD_INT 1
15225: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15226: LD_STRING M2a
15228: PPUSH
15229: CALL_OW 337
// wait ( 0 0$2 ) ;
15233: LD_INT 70
15235: PPUSH
15236: CALL_OW 67
// DialogueOn ;
15240: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15244: LD_INT 22
15246: PUSH
15247: LD_INT 1
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: PPUSH
15257: CALL_OW 69
15261: PPUSH
15262: LD_STRING DT3a-Sol1-1
15264: PPUSH
15265: LD_STRING DT3a-FSol1-1
15267: PPUSH
15268: CALL 11903 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15272: LD_EXP 1
15276: PPUSH
15277: LD_STRING DT3a-JMM-1
15279: PPUSH
15280: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15284: LD_VAR 0 2
15288: PPUSH
15289: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15293: LD_EXP 1
15297: PPUSH
15298: LD_STRING DT3a-JMM-1a
15300: PPUSH
15301: CALL_OW 88
// DialogueOff ;
15305: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
15309: LD_VAR 0 1
15313: PUSH
15314: LD_INT 10
15316: EQUAL
15317: PUSH
15318: LD_VAR 0 2
15322: PPUSH
15323: CALL_OW 247
15327: PUSH
15328: LD_INT 2
15330: EQUAL
15331: AND
15332: PUSH
15333: LD_VAR 0 2
15337: PPUSH
15338: CALL_OW 255
15342: PUSH
15343: LD_INT 3
15345: EQUAL
15346: AND
15347: PUSH
15348: LD_EXP 29
15352: PUSH
15353: LD_INT 0
15355: EQUAL
15356: AND
15357: IFFALSE 15367
// vehicleTeleported = 1 ;
15359: LD_ADDR_EXP 29
15363: PUSH
15364: LD_INT 1
15366: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
15367: LD_VAR 0 1
15371: PUSH
15372: LD_INT 10
15374: EQUAL
15375: PUSH
15376: LD_VAR 0 2
15380: PPUSH
15381: CALL_OW 247
15385: PUSH
15386: LD_INT 2
15388: EQUAL
15389: AND
15390: PUSH
15391: LD_VAR 0 2
15395: PPUSH
15396: CALL_OW 255
15400: PUSH
15401: LD_INT 3
15403: EQUAL
15404: AND
15405: PUSH
15406: LD_EXP 29
15410: PUSH
15411: LD_INT 2
15413: EQUAL
15414: AND
15415: IFFALSE 15425
// vehicleTeleported = 3 ;
15417: LD_ADDR_EXP 29
15421: PUSH
15422: LD_INT 3
15424: ST_TO_ADDR
// end ;
15425: PPOPN 2
15427: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
15428: LD_VAR 0 2
15432: PUSH
15433: LD_INT 21
15435: EQUAL
15436: PUSH
15437: LD_VAR 0 2
15441: PUSH
15442: LD_INT 112
15444: EQUAL
15445: OR
15446: IFFALSE 15579
// if GetSide ( vehicle ) = 3 then
15448: LD_VAR 0 1
15452: PPUSH
15453: CALL_OW 255
15457: PUSH
15458: LD_INT 3
15460: EQUAL
15461: IFFALSE 15579
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 264
15472: PUSH
15473: LD_INT 46
15475: EQUAL
15476: PUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 264
15486: PUSH
15487: LD_INT 45
15489: EQUAL
15490: OR
15491: PUSH
15492: LD_VAR 0 1
15496: PPUSH
15497: CALL_OW 264
15501: PUSH
15502: LD_INT 44
15504: EQUAL
15505: OR
15506: IFFALSE 15536
// begin russianTanks = russianTanks ^ vehicle ;
15508: LD_ADDR_EXP 39
15512: PUSH
15513: LD_EXP 39
15517: PUSH
15518: LD_VAR 0 1
15522: ADD
15523: ST_TO_ADDR
// ComEnterUnit ( vehicle , ruteleprt ) ;
15524: LD_VAR 0 1
15528: PPUSH
15529: LD_INT 10
15531: PPUSH
15532: CALL_OW 120
// end ; if GetWeapon ( vehicle ) = 49 then
15536: LD_VAR 0 1
15540: PPUSH
15541: CALL_OW 264
15545: PUSH
15546: LD_INT 49
15548: EQUAL
15549: IFFALSE 15579
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
15551: LD_ADDR_EXP 40
15555: PUSH
15556: LD_EXP 40
15560: PUSH
15561: LD_VAR 0 1
15565: ADD
15566: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: LD_INT 137
15574: PPUSH
15575: CALL_OW 120
// end ; end ; end ;
15579: PPOPN 2
15581: END
// on UnitGoesToRed ( unit ) do var i ;
15582: LD_INT 0
15584: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 255
15594: PUSH
15595: LD_INT 3
15597: EQUAL
15598: PUSH
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 247
15608: PUSH
15609: LD_INT 2
15611: EQUAL
15612: AND
15613: IFFALSE 15731
// begin if russianTanks > 0 then
15615: LD_EXP 39
15619: PUSH
15620: LD_INT 0
15622: GREATER
15623: IFFALSE 15673
// for i in russianTanks do
15625: LD_ADDR_VAR 0 2
15629: PUSH
15630: LD_EXP 39
15634: PUSH
15635: FOR_IN
15636: IFFALSE 15671
// if i = unit then
15638: LD_VAR 0 2
15642: PUSH
15643: LD_VAR 0 1
15647: EQUAL
15648: IFFALSE 15669
// russianTanks = russianTanks diff [ unit ] ;
15650: LD_ADDR_EXP 39
15654: PUSH
15655: LD_EXP 39
15659: PUSH
15660: LD_VAR 0 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: DIFF
15668: ST_TO_ADDR
15669: GO 15635
15671: POP
15672: POP
// if russianTimeLapsers > 0 then
15673: LD_EXP 40
15677: PUSH
15678: LD_INT 0
15680: GREATER
15681: IFFALSE 15731
// for i in russianTimeLapsers do
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: LD_EXP 40
15692: PUSH
15693: FOR_IN
15694: IFFALSE 15729
// if i = unit then
15696: LD_VAR 0 2
15700: PUSH
15701: LD_VAR 0 1
15705: EQUAL
15706: IFFALSE 15727
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
15708: LD_ADDR_EXP 40
15712: PUSH
15713: LD_EXP 40
15717: PUSH
15718: LD_VAR 0 1
15722: PUSH
15723: EMPTY
15724: LIST
15725: DIFF
15726: ST_TO_ADDR
15727: GO 15693
15729: POP
15730: POP
// end ; end ;
15731: PPOPN 2
15733: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
15734: LD_VAR 0 2
15738: PPUSH
15739: CALL_OW 255
15743: PUSH
15744: LD_INT 3
15746: EQUAL
15747: PUSH
15748: LD_INT 21
15750: PPUSH
15751: CALL_OW 255
15755: PUSH
15756: LD_INT 3
15758: EQUAL
15759: AND
15760: PUSH
15761: LD_INT 21
15763: PPUSH
15764: CALL_OW 302
15768: AND
15769: IFFALSE 15783
// ComEnterUnit ( human , ru_fact ) ;
15771: LD_VAR 0 2
15775: PPUSH
15776: LD_INT 21
15778: PPUSH
15779: CALL_OW 120
// end ; end_of_file
15783: PPOPN 2
15785: END
// every 0 0$1 trigger ruAI = 1 do
15786: LD_EXP 41
15790: PUSH
15791: LD_INT 1
15793: EQUAL
15794: IFFALSE 15893
15796: GO 15798
15798: DISABLE
// begin enable ;
15799: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
15800: LD_INT 3
15802: PPUSH
15803: LD_INT 6
15805: PPUSH
15806: LD_INT 9
15808: PPUSH
15809: LD_EXP 38
15813: PPUSH
15814: CALL 12783 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
15818: LD_INT 3
15820: PPUSH
15821: LD_INT 4
15823: PPUSH
15824: LD_INT 10
15826: PPUSH
15827: LD_EXP 38
15831: PPUSH
15832: CALL 12783 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
15836: LD_INT 3
15838: PPUSH
15839: LD_INT 16
15841: PPUSH
15842: LD_INT 9
15844: PPUSH
15845: LD_INT 91
15847: PPUSH
15848: CALL 13174 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
15852: LD_INT 3
15854: PPUSH
15855: LD_INT 17
15857: PPUSH
15858: LD_INT 10
15860: PPUSH
15861: LD_INT 47
15863: PUSH
15864: LD_INT 129
15866: PUSH
15867: LD_INT 135
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL 13174 0 4
// AttackVehicles ( 3 ) ;
15879: LD_INT 3
15881: PPUSH
15882: CALL 13944 0 1
// IntBazooka ( 3 ) ;
15886: LD_INT 3
15888: PPUSH
15889: CALL 14425 0 1
// end ;
15893: END
// every 0 0$1 do
15894: GO 15896
15896: DISABLE
// begin enable ;
15897: ENABLE
// TimeLapsersAI ( 3 ) ;
15898: LD_INT 3
15900: PPUSH
15901: CALL 14242 0 1
// end ;
15905: END
// every 0 0$1 do
15906: GO 15908
15908: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
15909: LD_INT 3
15911: PPUSH
15912: LD_INT 91
15914: PPUSH
15915: LD_INT 3
15917: PPUSH
15918: CALL 12698 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
15922: LD_INT 3
15924: PPUSH
15925: LD_INT 47
15927: PPUSH
15928: LD_INT 3
15930: PPUSH
15931: CALL 12698 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
15935: LD_INT 3
15937: PPUSH
15938: LD_INT 129
15940: PPUSH
15941: LD_INT 3
15943: PPUSH
15944: CALL 12698 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
15948: LD_INT 3
15950: PPUSH
15951: LD_INT 3
15953: PPUSH
15954: LD_INT 3
15956: PPUSH
15957: CALL 12698 0 3
// end ;
15961: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
15962: LD_EXP 28
15966: PUSH
15967: LD_INT 2
15969: EQUAL
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 3
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 21
15983: PUSH
15984: LD_INT 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 50
15993: PUSH
15994: EMPTY
15995: LIST
15996: PUSH
15997: LD_INT 3
15999: PUSH
16000: LD_INT 58
16002: PUSH
16003: EMPTY
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 69
16020: PUSH
16021: LD_INT 18
16023: PPUSH
16024: LD_INT 22
16026: PUSH
16027: LD_INT 3
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 21
16036: PUSH
16037: LD_INT 2
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PPUSH
16048: CALL_OW 70
16052: PUSH
16053: LD_INT 0
16055: EQUAL
16056: DIFF
16057: AND
16058: IFFALSE 16195
16060: GO 16062
16062: DISABLE
// begin enable ;
16063: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 24 ) ;
16064: LD_INT 3
16066: PPUSH
16067: LD_INT 21
16069: PPUSH
16070: LD_INT 3
16072: PUSH
16073: LD_INT 4
16075: PUSH
16076: LD_INT 4
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: PUSH
16084: LD_OWVAR 67
16088: ARRAY
16089: PPUSH
16090: LD_INT 46
16092: PUSH
16093: LD_INT 45
16095: PUSH
16096: LD_INT 44
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: PPUSH
16104: LD_INT 3
16106: PPUSH
16107: LD_INT 1
16109: PUSH
16110: LD_INT 3
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 1
16119: PPUSH
16120: LD_INT 2
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: PPUSH
16129: LD_INT 24
16131: PPUSH
16132: CALL 13797 0 7
// if russianTimeLapsers = 0 then
16136: LD_EXP 40
16140: PUSH
16141: LD_INT 0
16143: EQUAL
16144: IFFALSE 16195
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
16146: LD_INT 3
16148: PPUSH
16149: LD_INT 112
16151: PPUSH
16152: LD_INT 1
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: LD_INT 2
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: PUSH
16166: LD_OWVAR 67
16170: ARRAY
16171: PPUSH
16172: LD_INT 49
16174: PUSH
16175: LD_INT 49
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PPUSH
16182: LD_INT 3
16184: PPUSH
16185: LD_INT 3
16187: PPUSH
16188: LD_INT 24
16190: PPUSH
16191: CALL 13797 0 7
// end ;
16195: END
// every 0 0$1 trigger arabianMines do var i ;
16196: LD_EXP 42
16200: IFFALSE 16321
16202: GO 16204
16204: DISABLE
16205: LD_INT 0
16207: PPUSH
// begin enable ;
16208: ENABLE
// for i in arabianMines do
16209: LD_ADDR_VAR 0 1
16213: PUSH
16214: LD_EXP 42
16218: PUSH
16219: FOR_IN
16220: IFFALSE 16319
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
16222: LD_INT 22
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 92
16234: PUSH
16235: LD_VAR 0 1
16239: PUSH
16240: LD_INT 1
16242: ARRAY
16243: PUSH
16244: LD_VAR 0 1
16248: PUSH
16249: LD_INT 2
16251: ARRAY
16252: PUSH
16253: LD_INT 3
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL_OW 69
16270: IFFALSE 16317
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
16272: LD_VAR 0 1
16276: PUSH
16277: LD_INT 1
16279: ARRAY
16280: PPUSH
16281: LD_VAR 0 1
16285: PUSH
16286: LD_INT 2
16288: ARRAY
16289: PPUSH
16290: LD_INT 5
16292: PPUSH
16293: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
16297: LD_ADDR_EXP 42
16301: PUSH
16302: LD_EXP 42
16306: PPUSH
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL_OW 3
16316: ST_TO_ADDR
// end ; end ;
16317: GO 16219
16319: POP
16320: POP
// end ; end_of_file
16321: PPOPN 1
16323: END
// every 0 0$1 trigger RuScientists = [ ] do
16324: LD_EXP 34
16328: PUSH
16329: EMPTY
16330: EQUAL
16331: IFFALSE 16536
16333: GO 16335
16335: DISABLE
// begin if sciCounter = 0 then
16336: LD_EXP 35
16340: PUSH
16341: LD_INT 0
16343: EQUAL
16344: IFFALSE 16370
// begin Say ( JMM , D7a-JMM-1 ) ;
16346: LD_EXP 1
16350: PPUSH
16351: LD_STRING D7a-JMM-1
16353: PPUSH
16354: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
16358: LD_EXP 22
16362: PPUSH
16363: LD_STRING D7a-Pow-1
16365: PPUSH
16366: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
16370: LD_EXP 35
16374: PUSH
16375: LD_INT 0
16377: GREATER
16378: PUSH
16379: LD_EXP 35
16383: PUSH
16384: LD_INT 6
16386: LESS
16387: AND
16388: IFFALSE 16414
// begin Say ( JMM , D7b-JMM-1 ) ;
16390: LD_EXP 1
16394: PPUSH
16395: LD_STRING D7b-JMM-1
16397: PPUSH
16398: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
16402: LD_EXP 22
16406: PPUSH
16407: LD_STRING D7b-Pow-1
16409: PPUSH
16410: CALL_OW 94
// end ; if sciCounter = 6 then
16414: LD_EXP 35
16418: PUSH
16419: LD_INT 6
16421: EQUAL
16422: IFFALSE 16532
// begin Say ( JMM , D7c-JMM-1 ) ;
16424: LD_EXP 1
16428: PPUSH
16429: LD_STRING D7c-JMM-1
16431: PPUSH
16432: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
16436: LD_EXP 22
16440: PPUSH
16441: LD_STRING D7c-Pow-1
16443: PPUSH
16444: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
16448: LD_EXP 1
16452: PPUSH
16453: LD_STRING D7d-JMM-1
16455: PPUSH
16456: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
16460: LD_EXP 22
16464: PPUSH
16465: LD_STRING D7d-Pow-1
16467: PPUSH
16468: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
16472: LD_EXP 1
16476: PPUSH
16477: LD_STRING D7d-JMM-2
16479: PPUSH
16480: CALL_OW 88
// if askSiberite = 1 then
16484: LD_EXP 32
16488: PUSH
16489: LD_INT 1
16491: EQUAL
16492: IFFALSE 16508
// begin Say ( JMM , D7d-JMM-2a ) ;
16494: LD_EXP 1
16498: PPUSH
16499: LD_STRING D7d-JMM-2a
16501: PPUSH
16502: CALL_OW 88
// end else
16506: GO 16520
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
16508: LD_EXP 22
16512: PPUSH
16513: LD_STRING D7d-Pow-2
16515: PPUSH
16516: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
16520: LD_EXP 22
16524: PPUSH
16525: LD_STRING D7d-Pow-2a
16527: PPUSH
16528: CALL_OW 94
// end ; FinishMission ;
16532: CALL 16537 0 0
// end ;
16536: END
// export function FinishMission ; begin
16537: LD_INT 0
16539: PPUSH
// if teleportExplored = 1 then
16540: LD_EXP 33
16544: PUSH
16545: LD_INT 1
16547: EQUAL
16548: IFFALSE 16562
// AddMedal ( Teleport , 1 ) else
16550: LD_STRING Teleport
16552: PPUSH
16553: LD_INT 1
16555: PPUSH
16556: CALL_OW 101
16560: GO 16573
// AddMedal ( Teleport , - 1 ) ;
16562: LD_STRING Teleport
16564: PPUSH
16565: LD_INT 1
16567: NEG
16568: PPUSH
16569: CALL_OW 101
// if sciCounter > 0 and sciCounter < 6 then
16573: LD_EXP 35
16577: PUSH
16578: LD_INT 0
16580: GREATER
16581: PUSH
16582: LD_EXP 35
16586: PUSH
16587: LD_INT 6
16589: LESS
16590: AND
16591: IFFALSE 16605
// AddMedal ( Materials , 1 ) else
16593: LD_STRING Materials
16595: PPUSH
16596: LD_INT 1
16598: PPUSH
16599: CALL_OW 101
16603: GO 16616
// AddMedal ( Materials , - 1 ) ;
16605: LD_STRING Materials
16607: PPUSH
16608: LD_INT 1
16610: NEG
16611: PPUSH
16612: CALL_OW 101
// if sciCounter = 6 then
16616: LD_EXP 35
16620: PUSH
16621: LD_INT 6
16623: EQUAL
16624: IFFALSE 16648
// begin AddMedal ( Scientists , 1 ) ;
16626: LD_STRING Scientists
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
16636: LD_INT 1
16638: PPUSH
16639: LD_STRING 12_SciDed_1
16641: PPUSH
16642: CALL_OW 39
// end else
16646: GO 16669
// begin AddMedal ( Scientists , - 1 ) ;
16648: LD_STRING Scientists
16650: PPUSH
16651: LD_INT 1
16653: NEG
16654: PPUSH
16655: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
16659: LD_INT 0
16661: PPUSH
16662: LD_STRING 12_SciDed_1
16664: PPUSH
16665: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
16669: LD_EXP 31
16673: PPUSH
16674: LD_STRING 12_MainDepositFake_1
16676: PPUSH
16677: CALL_OW 39
// GiveMedals ( MAIN ) ;
16681: LD_STRING MAIN
16683: PPUSH
16684: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
16688: LD_INT 22
16690: PUSH
16691: LD_INT 1
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 21
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: LD_INT 25
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 25
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 25
16733: PUSH
16734: LD_INT 3
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 25
16743: PUSH
16744: LD_INT 4
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 25
16753: PUSH
16754: LD_INT 5
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 25
16763: PUSH
16764: LD_INT 8
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: LIST
16784: PPUSH
16785: CALL_OW 69
16789: PPUSH
16790: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16794: LD_EXP 1
16798: PPUSH
16799: LD_EXP 44
16803: PUSH
16804: LD_STRING JMM
16806: STR
16807: PPUSH
16808: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
16812: LD_EXP 7
16816: PPUSH
16817: LD_EXP 44
16821: PUSH
16822: LD_STRING Brown
16824: STR
16825: PPUSH
16826: CALL 11852 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
16830: LD_EXP 3
16834: PPUSH
16835: LD_EXP 44
16839: PUSH
16840: LD_STRING Donaldson
16842: STR
16843: PPUSH
16844: CALL 11852 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16848: LD_EXP 4
16852: PPUSH
16853: LD_EXP 44
16857: PUSH
16858: LD_STRING Bobby
16860: STR
16861: PPUSH
16862: CALL 11852 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16866: LD_EXP 5
16870: PPUSH
16871: LD_EXP 44
16875: PUSH
16876: LD_STRING Cyrus
16878: STR
16879: PPUSH
16880: CALL 11852 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16884: LD_EXP 2
16888: PPUSH
16889: LD_EXP 44
16893: PUSH
16894: LD_STRING Lisa
16896: STR
16897: PPUSH
16898: CALL 11852 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
16902: LD_EXP 12
16906: PPUSH
16907: LD_EXP 44
16911: PUSH
16912: LD_STRING Frank
16914: STR
16915: PPUSH
16916: CALL 11852 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
16920: LD_EXP 13
16924: PPUSH
16925: LD_EXP 44
16929: PUSH
16930: LD_STRING Kikuchi
16932: STR
16933: PPUSH
16934: CALL 11852 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
16938: LD_EXP 9
16942: PPUSH
16943: LD_EXP 44
16947: PUSH
16948: LD_STRING Houten
16950: STR
16951: PPUSH
16952: CALL 11852 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
16956: LD_EXP 11
16960: PPUSH
16961: LD_EXP 44
16965: PUSH
16966: LD_STRING Gary
16968: STR
16969: PPUSH
16970: CALL 11852 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
16974: LD_EXP 10
16978: PPUSH
16979: LD_EXP 44
16983: PUSH
16984: LD_STRING Cornell
16986: STR
16987: PPUSH
16988: CALL 11852 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
16992: LD_EXP 6
16996: PPUSH
16997: LD_EXP 44
17001: PUSH
17002: LD_STRING Denis
17004: STR
17005: PPUSH
17006: CALL 11852 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
17010: LD_EXP 8
17014: PPUSH
17015: LD_EXP 44
17019: PUSH
17020: LD_STRING Gladstone
17022: STR
17023: PPUSH
17024: CALL 11852 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
17028: LD_INT 50
17030: PUSH
17031: EMPTY
17032: LIST
17033: PUSH
17034: LD_INT 22
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 21
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: LD_INT 25
17059: PUSH
17060: LD_INT 1
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 25
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 25
17079: PUSH
17080: LD_INT 3
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 25
17089: PUSH
17090: LD_INT 4
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 25
17099: PUSH
17100: LD_INT 5
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 25
17109: PUSH
17110: LD_INT 8
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: PPUSH
17132: CALL_OW 69
17136: PUSH
17137: LD_EXP 1
17141: PUSH
17142: LD_EXP 7
17146: PUSH
17147: LD_EXP 3
17151: PUSH
17152: LD_EXP 4
17156: PUSH
17157: LD_EXP 5
17161: PUSH
17162: LD_EXP 2
17166: PUSH
17167: LD_EXP 12
17171: PUSH
17172: LD_EXP 8
17176: PUSH
17177: LD_EXP 13
17181: PUSH
17182: LD_EXP 6
17186: PUSH
17187: LD_EXP 9
17191: PUSH
17192: LD_EXP 11
17196: PUSH
17197: LD_EXP 10
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: DIFF
17217: PPUSH
17218: LD_STRING 12_other_survivors
17220: PPUSH
17221: CALL_OW 38
// YouWin ;
17225: CALL_OW 103
// end ; end_of_file
17229: LD_VAR 0 1
17233: RET
// every 0 0$1 trigger IsDead ( JMM ) do
17234: LD_EXP 1
17238: PPUSH
17239: CALL_OW 301
17243: IFFALSE 17255
17245: GO 17247
17247: DISABLE
// YouLost ( JMM ) ; end_of_file
17248: LD_STRING JMM
17250: PPUSH
17251: CALL_OW 104
17255: END
// every 0 0$30 do
17256: GO 17258
17258: DISABLE
// begin enable ;
17259: ENABLE
// if cratesSpawned < 6 then
17260: LD_EXP 43
17264: PUSH
17265: LD_INT 6
17267: LESS
17268: IFFALSE 17305
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
17270: LD_INT 3
17272: PPUSH
17273: LD_INT 5
17275: PPUSH
17276: CALL_OW 12
17280: PPUSH
17281: LD_INT 21
17283: PPUSH
17284: LD_INT 1
17286: PPUSH
17287: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
17291: LD_ADDR_EXP 43
17295: PUSH
17296: LD_EXP 43
17300: PUSH
17301: LD_INT 1
17303: PLUS
17304: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
17305: LD_EXP 43
17309: PUSH
17310: LD_INT 6
17312: GREATEREQUAL
17313: PUSH
17314: LD_EXP 43
17318: PUSH
17319: LD_INT 12
17321: LESS
17322: AND
17323: IFFALSE 17367
// begin wait ( 0 0$30 ) ;
17325: LD_INT 1050
17327: PPUSH
17328: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
17332: LD_INT 3
17334: PPUSH
17335: LD_INT 5
17337: PPUSH
17338: CALL_OW 12
17342: PPUSH
17343: LD_INT 21
17345: PPUSH
17346: LD_INT 1
17348: PPUSH
17349: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
17353: LD_ADDR_EXP 43
17357: PUSH
17358: LD_EXP 43
17362: PUSH
17363: LD_INT 1
17365: PLUS
17366: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 15 then
17367: LD_EXP 43
17371: PUSH
17372: LD_INT 12
17374: GREATEREQUAL
17375: PUSH
17376: LD_EXP 43
17380: PUSH
17381: LD_INT 15
17383: LESS
17384: AND
17385: IFFALSE 17429
// begin wait ( 1 1$30 ) ;
17387: LD_INT 3150
17389: PPUSH
17390: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
17394: LD_INT 3
17396: PPUSH
17397: LD_INT 5
17399: PPUSH
17400: CALL_OW 12
17404: PPUSH
17405: LD_INT 21
17407: PPUSH
17408: LD_INT 1
17410: PPUSH
17411: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
17415: LD_ADDR_EXP 43
17419: PUSH
17420: LD_EXP 43
17424: PUSH
17425: LD_INT 1
17427: PLUS
17428: ST_TO_ADDR
// end ; if cratesSpawned >= 15 then
17429: LD_EXP 43
17433: PUSH
17434: LD_INT 15
17436: GREATEREQUAL
17437: IFFALSE 17440
// disable ;
17439: DISABLE
// end ;
17440: END
