// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17176 0 0
// PrepareDifficulty ;
 195: CALL 13556 0 0
// PrepareVehicles ;
 199: CALL 1558 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1132 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2934 0 0
// PrepareWestBase ;
 227: CALL 3446 0 0
// PrepareEastBase ;
 231: CALL 3006 0 0
// PrepareOtherRussians ;
 235: CALL 3558 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11c_others
 575: PPUSH
 576: CALL_OW 31
 580: PUSH
 581: LD_STRING 11_others
 583: PPUSH
 584: CALL_OW 31
 588: UNION
 589: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_STRING 11_JMM
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL 13206 0 2
 605: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 606: LD_EXP 1
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 2
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 58
 645: PUSH
 646: EMPTY
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: PPUSH
 654: CALL_OW 69
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 667: LD_STRING 11_Lisa
 669: PPUSH
 670: CALL_OW 28
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 725
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 680: LD_ADDR_EXP 2
 684: PUSH
 685: LD_STRING 11_Lisa
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: CALL 13206 0 2
 695: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 708: LD_EXP 2
 712: PPUSH
 713: LD_INT 4
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end else
 723: GO 741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 725: LD_INT 4
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_INT 0
 736: PPUSH
 737: CALL 1132 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 741: LD_STRING 11_Donaldson
 743: PPUSH
 744: CALL_OW 28
 748: PUSH
 749: LD_INT 1
 751: EQUAL
 752: IFFALSE 799
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 754: LD_ADDR_EXP 3
 758: PUSH
 759: LD_STRING 11_Donaldson
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: CALL 13206 0 2
 769: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 770: LD_EXP 3
 774: PPUSH
 775: LD_INT 1
 777: PPUSH
 778: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 782: LD_EXP 3
 786: PPUSH
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 0
 792: PPUSH
 793: CALL_OW 49
// end else
 797: GO 815
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 799: LD_INT 4
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL 1132 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 815: LD_STRING 11_Cyrus
 817: PPUSH
 818: CALL_OW 28
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 873
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 828: LD_ADDR_EXP 5
 832: PUSH
 833: LD_STRING 11_Cyrus
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 13206 0 2
 843: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 844: LD_EXP 5
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 856: LD_EXP 5
 860: PPUSH
 861: LD_INT 4
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL_OW 49
// end else
 871: GO 889
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 873: LD_INT 4
 875: PPUSH
 876: LD_INT 0
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL 1132 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 889: LD_STRING 11_Denis
 891: PPUSH
 892: CALL_OW 28
 896: PUSH
 897: LD_INT 1
 899: EQUAL
 900: IFFALSE 947
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 902: LD_ADDR_EXP 6
 906: PUSH
 907: LD_STRING 11_Denis
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL 13206 0 2
 917: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 918: LD_EXP 6
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 930: LD_EXP 6
 934: PPUSH
 935: LD_INT 4
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: CALL_OW 49
// end else
 945: GO 963
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 947: LD_INT 4
 949: PPUSH
 950: LD_INT 0
 952: PPUSH
 953: LD_INT 1
 955: PPUSH
 956: LD_INT 0
 958: PPUSH
 959: CALL 1132 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 963: LD_STRING 11_Frank
 965: PPUSH
 966: CALL_OW 28
 970: PUSH
 971: LD_INT 1
 973: EQUAL
 974: IFFALSE 1021
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 976: LD_ADDR_EXP 12
 980: PUSH
 981: LD_STRING 11_Frank
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: CALL 13206 0 2
 991: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 992: LD_EXP 12
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1004: LD_EXP 12
1008: PPUSH
1009: LD_INT 4
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// end else
1019: GO 1037
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1021: LD_INT 4
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: LD_INT 1
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL 1132 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1037: LD_STRING 11_Cornell
1039: PPUSH
1040: CALL_OW 28
1044: PUSH
1045: LD_INT 1
1047: EQUAL
1048: IFFALSE 1095
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1050: LD_ADDR_EXP 10
1054: PUSH
1055: LD_STRING 11_Cornell
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: CALL 13206 0 2
1065: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1066: LD_EXP 10
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1078: LD_EXP 10
1082: PPUSH
1083: LD_INT 4
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL_OW 49
// end else
1093: GO 1111
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1095: LD_INT 4
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL 1132 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1111: LD_ADDR_EXP 22
1115: PUSH
1116: LD_STRING Powell
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL 13206 0 2
1126: ST_TO_ADDR
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
// if mech = 1 then
1139: LD_VAR 0 4
1143: PUSH
1144: LD_INT 1
1146: EQUAL
1147: IFFALSE 1384
// begin if others11 > 0 then
1149: LD_EXP 14
1153: PUSH
1154: LD_INT 0
1156: GREATER
1157: IFFALSE 1324
// begin for i := 1 to others11 - 1 do
1159: LD_ADDR_VAR 0 6
1163: PUSH
1164: DOUBLE
1165: LD_INT 1
1167: DEC
1168: ST_TO_ADDR
1169: LD_EXP 14
1173: PUSH
1174: LD_INT 1
1176: MINUS
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1261
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1181: LD_EXP 14
1185: PUSH
1186: LD_VAR 0 6
1190: ARRAY
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: CALL_OW 259
1199: PUSH
1200: LD_EXP 14
1204: PUSH
1205: LD_VAR 0 6
1209: PUSH
1210: LD_INT 1
1212: PLUS
1213: ARRAY
1214: PPUSH
1215: LD_INT 3
1217: PPUSH
1218: CALL_OW 259
1222: LESS
1223: IFFALSE 1259
// begin mecha = others11 [ i + 1 ] ;
1225: LD_ADDR_VAR 0 9
1229: PUSH
1230: LD_EXP 14
1234: PUSH
1235: LD_VAR 0 6
1239: PUSH
1240: LD_INT 1
1242: PLUS
1243: ARRAY
1244: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1245: LD_VAR 0 9
1249: PPUSH
1250: LD_INT 3
1252: PPUSH
1253: CALL_OW 336
// break ;
1257: GO 1261
// end ; end ;
1259: GO 1178
1261: POP
1262: POP
// if spawnMode = 1 then
1263: LD_VAR 0 3
1267: PUSH
1268: LD_INT 1
1270: EQUAL
1271: IFFALSE 1292
// PlaceUnitArea ( mecha , area , false ) else
1273: LD_VAR 0 9
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
1290: GO 1306
// PlaceHumanInUnit ( mecha , veh ) ;
1292: LD_VAR 0 9
1296: PPUSH
1297: LD_VAR 0 2
1301: PPUSH
1302: CALL_OW 52
// others11 = others11 diff mecha ;
1306: LD_ADDR_EXP 14
1310: PUSH
1311: LD_EXP 14
1315: PUSH
1316: LD_VAR 0 9
1320: DIFF
1321: ST_TO_ADDR
// end else
1322: GO 1382
// begin hc_name =  ;
1324: LD_ADDR_OWVAR 26
1328: PUSH
1329: LD_STRING 
1331: ST_TO_ADDR
// hc_gallery =  ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1340: LD_INT 0
1342: PPUSH
1343: LD_INT 7
1345: PPUSH
1346: LD_INT 9
1348: PPUSH
1349: CALL_OW 12
1353: PPUSH
1354: CALL_OW 383
// un = CreateHuman ;
1358: LD_ADDR_VAR 0 7
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1368: LD_VAR 0 7
1372: PPUSH
1373: LD_VAR 0 2
1377: PPUSH
1378: CALL_OW 52
// end ; end else
1382: GO 1553
// begin if others11 > 0 then
1384: LD_EXP 14
1388: PUSH
1389: LD_INT 0
1391: GREATER
1392: IFFALSE 1465
// begin if spawnMode = 1 then
1394: LD_VAR 0 3
1398: PUSH
1399: LD_INT 1
1401: EQUAL
1402: IFFALSE 1427
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1404: LD_EXP 14
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: LD_VAR 0 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL_OW 49
1425: GO 1445
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1427: LD_EXP 14
1431: PUSH
1432: LD_INT 1
1434: ARRAY
1435: PPUSH
1436: LD_VAR 0 2
1440: PPUSH
1441: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1445: LD_ADDR_EXP 14
1449: PUSH
1450: LD_EXP 14
1454: PPUSH
1455: LD_INT 1
1457: PPUSH
1458: CALL_OW 3
1462: ST_TO_ADDR
// end else
1463: GO 1553
// begin hc_name =  ;
1465: LD_ADDR_OWVAR 26
1469: PUSH
1470: LD_STRING 
1472: ST_TO_ADDR
// hc_gallery =  ;
1473: LD_ADDR_OWVAR 33
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1481: LD_INT 0
1483: PPUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 4
1507: PPUSH
1508: CALL_OW 12
1512: ARRAY
1513: PPUSH
1514: LD_INT 7
1516: PPUSH
1517: LD_INT 9
1519: PPUSH
1520: CALL_OW 12
1524: PPUSH
1525: CALL_OW 380
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 7
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1539: LD_VAR 0 7
1543: PPUSH
1544: LD_VAR 0 2
1548: PPUSH
1549: CALL_OW 52
// end ; end ; end ;
1553: LD_VAR 0 5
1557: RET
// export function PrepareVehicles ; var veh ; begin
1558: LD_INT 0
1560: PPUSH
1561: PPUSH
// uc_side = 1 ;
1562: LD_ADDR_OWVAR 20
1566: PUSH
1567: LD_INT 1
1569: ST_TO_ADDR
// uc_nation = 1 ;
1570: LD_ADDR_OWVAR 21
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1578: LD_ADDR_OWVAR 37
1582: PUSH
1583: LD_INT 3
1585: ST_TO_ADDR
// vc_engine = 3 ;
1586: LD_ADDR_OWVAR 39
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_control = 3 ;
1594: LD_ADDR_OWVAR 38
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1602: LD_ADDR_OWVAR 40
1606: PUSH
1607: LD_INT 4
1609: ST_TO_ADDR
// veh = CreateVehicle ;
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: CALL_OW 45
1619: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1620: LD_VAR 0 2
1624: PPUSH
1625: LD_INT 4
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 49
// vc_weapon = us_double_gun ;
1635: LD_ADDR_OWVAR 40
1639: PUSH
1640: LD_INT 5
1642: ST_TO_ADDR
// vc_control = 1 ;
1643: LD_ADDR_OWVAR 38
1647: PUSH
1648: LD_INT 1
1650: ST_TO_ADDR
// veh = CreateVehicle ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: CALL_OW 45
1660: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL_OW 49
// vc_weapon = us_light_gun ;
1676: LD_ADDR_OWVAR 40
1680: PUSH
1681: LD_INT 3
1683: ST_TO_ADDR
// vc_control = 3 ;
1684: LD_ADDR_OWVAR 38
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1692: LD_ADDR_OWVAR 37
1696: PUSH
1697: LD_INT 2
1699: ST_TO_ADDR
// veh = CreateVehicle ;
1700: LD_ADDR_VAR 0 2
1704: PUSH
1705: CALL_OW 45
1709: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1710: LD_VAR 0 2
1714: PPUSH
1715: LD_INT 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1725: LD_ADDR_OWVAR 40
1729: PUSH
1730: LD_INT 4
1732: ST_TO_ADDR
// veh = CreateVehicle ;
1733: LD_ADDR_VAR 0 2
1737: PUSH
1738: CALL_OW 45
1742: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1743: LD_VAR 0 2
1747: PPUSH
1748: LD_INT 4
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 49
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PowellSupport1 ; var veh , un ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1784: LD_STRING 11_Brown
1786: PPUSH
1787: CALL_OW 28
1791: PUSH
1792: LD_INT 1
1794: EQUAL
1795: IFFALSE 1842
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1797: LD_ADDR_EXP 7
1801: PUSH
1802: LD_STRING 11_Brown
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: CALL 13206 0 2
1812: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1813: LD_EXP 7
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1825: LD_EXP 7
1829: PPUSH
1830: LD_INT 4
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 49
// end else
1840: GO 1858
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1842: LD_INT 4
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL 1132 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1858: LD_STRING 11_Gary
1860: PPUSH
1861: CALL_OW 28
1865: PUSH
1866: LD_INT 1
1868: EQUAL
1869: IFFALSE 1916
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1871: LD_ADDR_EXP 11
1875: PUSH
1876: LD_STRING 11_Gary
1878: PPUSH
1879: LD_INT 1
1881: PPUSH
1882: CALL 13206 0 2
1886: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1887: LD_EXP 11
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1899: LD_EXP 11
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 49
// end else
1914: GO 1932
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1916: LD_INT 4
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL 1132 0 4
// end ; vc_chassis = us_medium_tracked ;
1932: LD_ADDR_OWVAR 37
1936: PUSH
1937: LD_INT 3
1939: ST_TO_ADDR
// vc_engine = 3 ;
1940: LD_ADDR_OWVAR 39
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_control = 1 ;
1948: LD_ADDR_OWVAR 38
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// vc_weapon = us_crane ;
1956: LD_ADDR_OWVAR 40
1960: PUSH
1961: LD_INT 13
1963: ST_TO_ADDR
// veh = CreateVehicle ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: CALL_OW 45
1973: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_INT 4
1981: PPUSH
1982: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1986: LD_VAR 0 2
1990: PPUSH
1991: LD_INT 4
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2001: LD_INT 4
2003: PPUSH
2004: LD_VAR 0 2
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: CALL 1132 0 4
// vc_weapon = 9 ;
2019: LD_ADDR_OWVAR 40
2023: PUSH
2024: LD_INT 9
2026: ST_TO_ADDR
// veh = CreateVehicle ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: CALL_OW 45
2036: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2037: LD_VAR 0 2
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_INT 4
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2064: LD_INT 4
2066: PPUSH
2067: LD_VAR 0 2
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 1132 0 4
// vc_control = 3 ;
2082: LD_ADDR_OWVAR 38
2086: PUSH
2087: LD_INT 3
2089: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2090: LD_ADDR_OWVAR 40
2094: PUSH
2095: LD_INT 12
2097: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2098: LD_ADDR_EXP 15
2102: PUSH
2103: CALL_OW 45
2107: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2108: LD_ADDR_EXP 16
2112: PUSH
2113: CALL_OW 45
2117: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2118: LD_EXP 15
2122: PPUSH
2123: LD_INT 4
2125: PPUSH
2126: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2130: LD_EXP 16
2134: PPUSH
2135: LD_INT 4
2137: PPUSH
2138: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2142: LD_EXP 15
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: LD_INT 0
2152: PPUSH
2153: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2157: LD_EXP 16
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2172: LD_EXP 15
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: LD_INT 100
2182: PPUSH
2183: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2187: LD_EXP 16
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 80
2197: PPUSH
2198: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2202: LD_EXP 16
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_INT 20
2212: PPUSH
2213: CALL_OW 291
// end ;
2217: LD_VAR 0 1
2221: RET
// export function PowellSupport2 ; var veh , un ; begin
2222: LD_INT 0
2224: PPUSH
2225: PPUSH
2226: PPUSH
// uc_side = 1 ;
2227: LD_ADDR_OWVAR 20
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// uc_nation = 1 ;
2235: LD_ADDR_OWVAR 21
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2243: LD_ADDR_OWVAR 37
2247: PUSH
2248: LD_INT 2
2250: ST_TO_ADDR
// vc_engine = 3 ;
2251: LD_ADDR_OWVAR 39
2255: PUSH
2256: LD_INT 3
2258: ST_TO_ADDR
// vc_control = 3 ;
2259: LD_ADDR_OWVAR 38
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2267: LD_ADDR_OWVAR 40
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// veh = CreateVehicle ;
2275: LD_ADDR_VAR 0 2
2279: PUSH
2280: CALL_OW 45
2284: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2285: LD_VAR 0 2
2289: PPUSH
2290: LD_INT 4
2292: PPUSH
2293: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_INT 4
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// vc_control = 1 ;
2312: LD_ADDR_OWVAR 38
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2320: LD_ADDR_OWVAR 37
2324: PUSH
2325: LD_INT 2
2327: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2328: LD_ADDR_OWVAR 40
2332: PUSH
2333: LD_INT 5
2335: ST_TO_ADDR
// veh = CreateVehicle ;
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: CALL_OW 45
2345: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 4
2353: PPUSH
2354: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2358: LD_VAR 0 2
2362: PPUSH
2363: LD_INT 4
2365: PPUSH
2366: LD_INT 0
2368: PPUSH
2369: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2373: LD_STRING 11_Bobby
2375: PPUSH
2376: CALL_OW 28
2380: PUSH
2381: LD_INT 1
2383: EQUAL
2384: IFFALSE 2430
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2386: LD_ADDR_EXP 4
2390: PUSH
2391: LD_STRING 11_Bobby
2393: PPUSH
2394: LD_INT 1
2396: PPUSH
2397: CALL 13206 0 2
2401: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2402: LD_EXP 4
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2414: LD_EXP 4
2418: PPUSH
2419: LD_VAR 0 2
2423: PPUSH
2424: CALL_OW 52
// end else
2428: GO 2448
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2430: LD_INT 0
2432: PPUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_INT 2
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL 1132 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2448: LD_STRING 11_Houten
2450: PPUSH
2451: CALL_OW 28
2455: PUSH
2456: LD_INT 1
2458: EQUAL
2459: IFFALSE 2506
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2461: LD_ADDR_EXP 9
2465: PUSH
2466: LD_STRING 11_Houten
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL 13206 0 2
2476: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2477: LD_EXP 9
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2489: LD_EXP 9
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end else
2504: GO 2522
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2506: LD_INT 4
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 1132 0 4
// end ; vc_control = 3 ;
2522: LD_ADDR_OWVAR 38
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2530: LD_ADDR_OWVAR 40
2534: PUSH
2535: LD_INT 12
2537: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2538: LD_ADDR_EXP 17
2542: PUSH
2543: CALL_OW 45
2547: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2548: LD_EXP 17
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 233
// amCargo4 = CreateVehicle ;
2560: LD_ADDR_EXP 18
2564: PUSH
2565: CALL_OW 45
2569: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2570: LD_EXP 18
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: CALL_OW 233
// amCargo5 = CreateVehicle ;
2582: LD_ADDR_EXP 19
2586: PUSH
2587: CALL_OW 45
2591: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2592: LD_EXP 19
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2604: LD_EXP 17
2608: PPUSH
2609: LD_INT 4
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2619: LD_EXP 18
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2634: LD_EXP 19
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// if kurtStatus > 0 then
2649: LD_EXP 27
2653: PUSH
2654: LD_INT 0
2656: GREATER
2657: IFFALSE 2706
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2659: LD_EXP 17
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 100
2669: PPUSH
2670: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2674: LD_EXP 18
2678: PPUSH
2679: LD_INT 1
2681: PPUSH
2682: LD_INT 100
2684: PPUSH
2685: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2689: LD_EXP 19
2693: PPUSH
2694: LD_INT 3
2696: PPUSH
2697: LD_INT 80
2699: PPUSH
2700: CALL_OW 291
// end else
2704: GO 2751
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2706: LD_EXP 17
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: LD_INT 100
2716: PPUSH
2717: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2721: LD_EXP 18
2725: PPUSH
2726: LD_INT 3
2728: PPUSH
2729: LD_INT 60
2731: PPUSH
2732: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2736: LD_EXP 19
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 100
2746: PPUSH
2747: CALL_OW 291
// end ; end ;
2751: LD_VAR 0 1
2755: RET
// export function PowellSupport3 ; var veh , un ; begin
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
// uc_side = 1 ;
2761: LD_ADDR_OWVAR 20
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// uc_nation = 1 ;
2769: LD_ADDR_OWVAR 21
2773: PUSH
2774: LD_INT 1
2776: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2777: LD_INT 4
2779: PPUSH
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 1
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL 1132 0 4
// vc_chassis = us_medium_wheeled ;
2793: LD_ADDR_OWVAR 37
2797: PUSH
2798: LD_INT 2
2800: ST_TO_ADDR
// vc_engine = 3 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 3
2808: ST_TO_ADDR
// vc_control = 3 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 12
2824: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2825: LD_ADDR_EXP 20
2829: PUSH
2830: CALL_OW 45
2834: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2835: LD_ADDR_EXP 21
2839: PUSH
2840: CALL_OW 45
2844: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2845: LD_EXP 20
2849: PPUSH
2850: LD_INT 4
2852: PPUSH
2853: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2857: LD_EXP 21
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2869: LD_EXP 20
2873: PPUSH
2874: LD_INT 4
2876: PPUSH
2877: LD_INT 0
2879: PPUSH
2880: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2884: LD_EXP 21
2888: PPUSH
2889: LD_INT 4
2891: PPUSH
2892: LD_INT 0
2894: PPUSH
2895: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2899: LD_EXP 20
2903: PPUSH
2904: LD_INT 1
2906: PPUSH
2907: LD_INT 100
2909: PPUSH
2910: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
2914: LD_EXP 21
2918: PPUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 100
2924: PPUSH
2925: CALL_OW 291
// end ; end_of_file
2929: LD_VAR 0 1
2933: RET
// export function PrepareRussianCommander ; begin
2934: LD_INT 0
2936: PPUSH
// uc_side = 3 ;
2937: LD_ADDR_OWVAR 20
2941: PUSH
2942: LD_INT 3
2944: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2945: LD_ADDR_EXP 23
2949: PUSH
2950: LD_STRING Davidov
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL 13206 0 2
2960: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2961: LD_EXP 23
2965: PPUSH
2966: LD_INT 3
2968: PPUSH
2969: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2973: LD_ADDR_EXP 35
2977: PUSH
2978: LD_EXP 35
2982: PUSH
2983: LD_EXP 23
2987: ADD
2988: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2989: LD_EXP 35
2993: PPUSH
2994: LD_INT 4
2996: PPUSH
2997: CALL_OW 336
// end ;
3001: LD_VAR 0 1
3005: RET
// export function PrepareEastBase ; var i , un ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3011: LD_INT 3
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 121
3019: PPUSH
3020: LD_EXP 37
3024: PPUSH
3025: LD_EXP 38
3029: PPUSH
3030: CALL_OW 12
3034: PPUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL 13987 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 3
3050: PPUSH
3051: LD_INT 121
3053: PPUSH
3054: LD_EXP 37
3058: PPUSH
3059: LD_EXP 38
3063: PPUSH
3064: CALL_OW 12
3068: PPUSH
3069: LD_INT 9
3071: PPUSH
3072: LD_INT 3
3074: PPUSH
3075: CALL 13987 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3079: LD_INT 3
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 4
3087: PPUSH
3088: LD_EXP 37
3092: PPUSH
3093: LD_EXP 38
3097: PPUSH
3098: CALL_OW 12
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL 13987 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: LD_INT 112
3121: PPUSH
3122: LD_EXP 37
3126: PPUSH
3127: LD_EXP 38
3131: PPUSH
3132: CALL_OW 12
3136: PPUSH
3137: LD_INT 3
3139: PPUSH
3140: LD_INT 6
3142: PPUSH
3143: CALL 13987 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3147: LD_INT 3
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_INT 47
3155: PPUSH
3156: LD_EXP 37
3160: PPUSH
3161: LD_EXP 38
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: LD_INT 4
3173: PPUSH
3174: LD_INT 6
3176: PPUSH
3177: CALL 13987 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 129
3189: PPUSH
3190: LD_EXP 37
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 6
3210: PPUSH
3211: CALL 13987 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 135
3223: PPUSH
3224: LD_EXP 37
3228: PPUSH
3229: LD_EXP 38
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 4
3241: PPUSH
3242: LD_INT 6
3244: PPUSH
3245: CALL 13987 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 22
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 30
3266: PUSH
3267: LD_INT 32
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PPUSH
3278: CALL_OW 69
3282: PUSH
3283: FOR_IN
3284: IFFALSE 3324
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 3
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 37
3301: PPUSH
3302: LD_EXP 38
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: CALL 13987 0 6
3322: GO 3283
3324: POP
3325: POP
// for i = 1 to 5 do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: DOUBLE
3332: LD_INT 1
3334: DEC
3335: ST_TO_ADDR
3336: LD_INT 5
3338: PUSH
3339: FOR_TO
3340: IFFALSE 3439
// begin uc_side = 3 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 3
3349: ST_TO_ADDR
// uc_nation = 3 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 3
3357: ST_TO_ADDR
// hc_gallery =  ;
3358: LD_ADDR_OWVAR 33
3362: PUSH
3363: LD_STRING 
3365: ST_TO_ADDR
// hc_name =  ;
3366: LD_ADDR_OWVAR 26
3370: PUSH
3371: LD_STRING 
3373: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3374: LD_INT 0
3376: PPUSH
3377: LD_INT 4
3379: PPUSH
3380: LD_EXP 37
3384: PPUSH
3385: LD_EXP 38
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: CALL_OW 380
// un = CreateHuman ;
3399: LD_ADDR_VAR 0 3
3403: PUSH
3404: CALL_OW 44
3408: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3409: LD_VAR 0 3
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3421: LD_ADDR_EXP 35
3425: PUSH
3426: LD_EXP 35
3430: PUSH
3431: LD_VAR 0 3
3435: ADD
3436: ST_TO_ADDR
// end ;
3437: GO 3339
3439: POP
3440: POP
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareWestBase ; var i , un ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
3450: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 3
3456: PPUSH
3457: LD_INT 6
3459: PPUSH
3460: LD_EXP 37
3464: PPUSH
3465: LD_EXP 38
3469: PPUSH
3470: CALL_OW 12
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: LD_INT 3
3480: PPUSH
3481: CALL 13987 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3485: LD_INT 3
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: LD_INT 91
3493: PPUSH
3494: LD_EXP 37
3498: PPUSH
3499: LD_EXP 38
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: LD_INT 4
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: CALL 13987 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3519: LD_INT 3
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: LD_INT 21
3527: PPUSH
3528: LD_EXP 37
3532: PPUSH
3533: LD_EXP 38
3537: PPUSH
3538: CALL_OW 12
3542: PPUSH
3543: LD_INT 3
3545: PPUSH
3546: LD_INT 6
3548: PPUSH
3549: CALL 13987 0 6
// end ;
3553: LD_VAR 0 1
3557: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
// uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// for i = 1 to 5 do
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: DOUBLE
3586: LD_INT 1
3588: DEC
3589: ST_TO_ADDR
3590: LD_INT 5
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3664
// begin hc_gallery =  ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING 
3603: ST_TO_ADDR
// hc_name =  ;
3604: LD_ADDR_OWVAR 26
3608: PUSH
3609: LD_STRING 
3611: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3612: LD_INT 0
3614: PPUSH
3615: LD_INT 9
3617: PPUSH
3618: LD_EXP 37
3622: PPUSH
3623: LD_EXP 38
3627: PPUSH
3628: CALL_OW 12
3632: PPUSH
3633: CALL_OW 380
// un = CreateHuman ;
3637: LD_ADDR_VAR 0 3
3641: PUSH
3642: CALL_OW 44
3646: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3647: LD_VAR 0 3
3651: PPUSH
3652: LD_INT 8
3654: PPUSH
3655: LD_INT 0
3657: PPUSH
3658: CALL_OW 49
// end ;
3662: GO 3593
3664: POP
3665: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3666: LD_ADDR_VAR 0 2
3670: PUSH
3671: DOUBLE
3672: LD_INT 1
3674: DEC
3675: ST_TO_ADDR
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: LD_OWVAR 67
3694: ARRAY
3695: PUSH
3696: FOR_TO
3697: IFFALSE 3767
// begin hc_gallery =  ;
3699: LD_ADDR_OWVAR 33
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// hc_name =  ;
3707: LD_ADDR_OWVAR 26
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3715: LD_INT 0
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: LD_EXP 38
3730: PPUSH
3731: CALL_OW 12
3735: PPUSH
3736: CALL_OW 380
// un = CreateHuman ;
3740: LD_ADDR_VAR 0 3
3744: PUSH
3745: CALL_OW 44
3749: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3750: LD_VAR 0 3
3754: PPUSH
3755: LD_INT 8
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: CALL_OW 49
// end ;
3765: GO 3696
3767: POP
3768: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3769: LD_ADDR_VAR 0 2
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3996
// begin vc_engine = 3 ;
3802: LD_ADDR_OWVAR 39
3806: PUSH
3807: LD_INT 3
3809: ST_TO_ADDR
// vc_control = 1 ;
3810: LD_ADDR_OWVAR 38
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3818: LD_ADDR_OWVAR 40
3822: PUSH
3823: LD_INT 42
3825: PUSH
3826: LD_INT 43
3828: PUSH
3829: LD_INT 44
3831: PUSH
3832: LD_INT 45
3834: PUSH
3835: LD_INT 46
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 5
3850: PPUSH
3851: CALL_OW 12
3855: ARRAY
3856: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3857: LD_OWVAR 40
3861: PUSH
3862: LD_INT 46
3864: EQUAL
3865: IFFALSE 3877
// vc_chassis = ru_heavy_tracked else
3867: LD_ADDR_OWVAR 37
3871: PUSH
3872: LD_INT 24
3874: ST_TO_ADDR
3875: GO 3904
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3877: LD_ADDR_OWVAR 37
3881: PUSH
3882: LD_INT 22
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 2
3897: PPUSH
3898: CALL_OW 12
3902: ARRAY
3903: ST_TO_ADDR
// veh = CreateVehicle ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: CALL_OW 45
3913: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3914: LD_VAR 0 4
3918: PPUSH
3919: LD_INT 3
3921: PPUSH
3922: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_INT 5
3933: PPUSH
3934: LD_INT 0
3936: PPUSH
3937: CALL_OW 49
// hc_gallery =  ;
3941: LD_ADDR_OWVAR 33
3945: PUSH
3946: LD_STRING 
3948: ST_TO_ADDR
// hc_name =  ;
3949: LD_ADDR_OWVAR 26
3953: PUSH
3954: LD_STRING 
3956: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3957: LD_INT 0
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: LD_INT 10
3965: PPUSH
3966: CALL_OW 380
// un = CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 4
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3799
3996: POP
3997: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 3
4010: PUSH
4011: LD_INT 4
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: PUSH
4022: LD_OWVAR 67
4026: ARRAY
4027: PUSH
4028: FOR_TO
4029: IFFALSE 4176
// begin vc_engine = 3 ;
4031: LD_ADDR_OWVAR 39
4035: PUSH
4036: LD_INT 3
4038: ST_TO_ADDR
// vc_control = 3 ;
4039: LD_ADDR_OWVAR 38
4043: PUSH
4044: LD_INT 3
4046: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4047: LD_ADDR_OWVAR 40
4051: PUSH
4052: LD_INT 42
4054: PUSH
4055: LD_INT 43
4057: PUSH
4058: LD_INT 44
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 49
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 1
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 12
4088: ARRAY
4089: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4090: LD_OWVAR 40
4094: PUSH
4095: LD_INT 46
4097: EQUAL
4098: IFFALSE 4110
// vc_chassis = ru_heavy_tracked else
4100: LD_ADDR_OWVAR 37
4104: PUSH
4105: LD_INT 24
4107: ST_TO_ADDR
4108: GO 4137
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4110: LD_ADDR_OWVAR 37
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 21
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 1
4127: PPUSH
4128: LD_INT 2
4130: PPUSH
4131: CALL_OW 12
4135: ARRAY
4136: ST_TO_ADDR
// veh = CreateVehicle ;
4137: LD_ADDR_VAR 0 4
4141: PUSH
4142: CALL_OW 45
4146: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4159: LD_VAR 0 4
4163: PPUSH
4164: LD_INT 6
4166: PPUSH
4167: LD_INT 0
4169: PPUSH
4170: CALL_OW 49
// end ;
4174: GO 4028
4176: POP
4177: POP
// end ; end_of_file
4178: LD_VAR 0 1
4182: RET
// export function PrepareKurt ; begin
4183: LD_INT 0
4185: PPUSH
// uc_side = 8 ;
4186: LD_ADDR_OWVAR 20
4190: PUSH
4191: LD_INT 8
4193: ST_TO_ADDR
// uc_nation = 2 ;
4194: LD_ADDR_OWVAR 21
4198: PUSH
4199: LD_INT 2
4201: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4202: LD_ADDR_OWVAR 37
4206: PUSH
4207: LD_INT 13
4209: ST_TO_ADDR
// vc_engine = 1 ;
4210: LD_ADDR_OWVAR 39
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// vc_control = 1 ;
4218: LD_ADDR_OWVAR 38
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// vc_weapon = 24 ;
4226: LD_ADDR_OWVAR 40
4230: PUSH
4231: LD_INT 24
4233: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4234: LD_ADDR_EXP 26
4238: PUSH
4239: CALL_OW 45
4243: ST_TO_ADDR
// if kurtStatus > 0 then
4244: LD_EXP 27
4248: PUSH
4249: LD_INT 0
4251: GREATER
4252: IFFALSE 4301
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4254: LD_ADDR_EXP 24
4258: PUSH
4259: LD_STRING Kurt
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL 13206 0 2
4269: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4270: LD_EXP 26
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4285: LD_EXP 24
4289: PPUSH
4290: LD_EXP 26
4294: PPUSH
4295: CALL_OW 52
// end else
4299: GO 4378
// begin hc_name =  ;
4301: LD_ADDR_OWVAR 26
4305: PUSH
4306: LD_STRING 
4308: ST_TO_ADDR
// hc_gallery =  ;
4309: LD_ADDR_OWVAR 33
4313: PUSH
4314: LD_STRING 
4316: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4317: LD_INT 1
4319: PPUSH
4320: LD_INT 10
4322: PPUSH
4323: CALL_OW 381
// otherKurt = CreateHuman ;
4327: LD_ADDR_EXP 25
4331: PUSH
4332: CALL_OW 44
4336: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4337: LD_EXP 26
4341: PPUSH
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4352: LD_EXP 25
4356: PPUSH
4357: LD_EXP 26
4361: PPUSH
4362: CALL_OW 52
// SaveCharacters ( otherKurt , AltKurt ) ;
4366: LD_EXP 25
4370: PPUSH
4371: LD_STRING AltKurt
4373: PPUSH
4374: CALL_OW 38
// end ; end ;
4378: LD_VAR 0 1
4382: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4383: LD_INT 0
4385: PPUSH
4386: PPUSH
4387: PPUSH
4388: PPUSH
// for i = 1 to 3 do
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: DOUBLE
4395: LD_INT 1
4397: DEC
4398: ST_TO_ADDR
4399: LD_INT 3
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4524
// begin uc_side = 1 ;
4405: LD_ADDR_OWVAR 20
4409: PUSH
4410: LD_INT 1
4412: ST_TO_ADDR
// uc_nation = 2 ;
4413: LD_ADDR_OWVAR 21
4417: PUSH
4418: LD_INT 2
4420: ST_TO_ADDR
// hc_gallery =  ;
4421: LD_ADDR_OWVAR 33
4425: PUSH
4426: LD_STRING 
4428: ST_TO_ADDR
// hc_name =  ;
4429: LD_ADDR_OWVAR 26
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4437: LD_EXP 27
4441: PUSH
4442: LD_INT 0
4444: EQUAL
4445: PUSH
4446: LD_EXP 27
4450: PUSH
4451: LD_INT 2
4453: EQUAL
4454: OR
4455: IFFALSE 4472
// PrepareHuman ( false , 1 , 6 ) else
4457: LD_INT 0
4459: PPUSH
4460: LD_INT 1
4462: PPUSH
4463: LD_INT 6
4465: PPUSH
4466: CALL_OW 380
4470: GO 4485
// PrepareHuman ( false , 1 , 8 ) ;
4472: LD_INT 0
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: LD_INT 8
4480: PPUSH
4481: CALL_OW 380
// un = CreateHuman ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: CALL_OW 44
4494: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4495: LD_VAR 0 3
4499: PPUSH
4500: LD_INT 4
4502: PPUSH
4503: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4507: LD_VAR 0 3
4511: PPUSH
4512: LD_INT 4
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: CALL_OW 49
// end ;
4522: GO 4402
4524: POP
4525: POP
// vc_chassis = 14 ;
4526: LD_ADDR_OWVAR 37
4530: PUSH
4531: LD_INT 14
4533: ST_TO_ADDR
// vc_engine = 3 ;
4534: LD_ADDR_OWVAR 39
4538: PUSH
4539: LD_INT 3
4541: ST_TO_ADDR
// vc_control = 1 ;
4542: LD_ADDR_OWVAR 38
4546: PUSH
4547: LD_INT 1
4549: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4550: LD_ADDR_OWVAR 40
4554: PUSH
4555: LD_INT 27
4557: PUSH
4558: LD_INT 26
4560: PUSH
4561: LD_INT 28
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 1
4571: PPUSH
4572: LD_INT 3
4574: PPUSH
4575: CALL_OW 12
4579: ARRAY
4580: ST_TO_ADDR
// veh = CreateVehicle ;
4581: LD_ADDR_VAR 0 4
4585: PUSH
4586: CALL_OW 45
4590: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4591: LD_VAR 0 4
4595: PPUSH
4596: LD_INT 4
4598: PPUSH
4599: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4603: LD_VAR 0 4
4607: PPUSH
4608: LD_INT 4
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 0
4625: EQUAL
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 2
4634: EQUAL
4635: OR
4636: IFFALSE 4653
// PrepareHuman ( false , 3 , 6 ) else
4638: LD_INT 0
4640: PPUSH
4641: LD_INT 3
4643: PPUSH
4644: LD_INT 6
4646: PPUSH
4647: CALL_OW 380
4651: GO 4666
// PrepareHuman ( false , 3 , 8 ) ;
4653: LD_INT 0
4655: PPUSH
4656: LD_INT 3
4658: PPUSH
4659: LD_INT 8
4661: PPUSH
4662: CALL_OW 380
// un = CreateHuman ;
4666: LD_ADDR_VAR 0 3
4670: PUSH
4671: CALL_OW 44
4675: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4676: LD_VAR 0 3
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: CALL_OW 52
// vc_chassis = 14 ;
4690: LD_ADDR_OWVAR 37
4694: PUSH
4695: LD_INT 14
4697: ST_TO_ADDR
// vc_engine = 3 ;
4698: LD_ADDR_OWVAR 39
4702: PUSH
4703: LD_INT 3
4705: ST_TO_ADDR
// vc_control = 1 ;
4706: LD_ADDR_OWVAR 38
4710: PUSH
4711: LD_INT 1
4713: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4714: LD_ADDR_OWVAR 40
4718: PUSH
4719: LD_INT 27
4721: PUSH
4722: LD_INT 26
4724: PUSH
4725: LD_INT 28
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_INT 3
4738: PPUSH
4739: CALL_OW 12
4743: ARRAY
4744: ST_TO_ADDR
// veh = CreateVehicle ;
4745: LD_ADDR_VAR 0 4
4749: PUSH
4750: CALL_OW 45
4754: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4755: LD_VAR 0 4
4759: PPUSH
4760: LD_INT 4
4762: PPUSH
4763: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4767: LD_VAR 0 4
4771: PPUSH
4772: LD_INT 4
4774: PPUSH
4775: LD_INT 0
4777: PPUSH
4778: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4782: LD_EXP 27
4786: PUSH
4787: LD_INT 0
4789: EQUAL
4790: PUSH
4791: LD_EXP 27
4795: PUSH
4796: LD_INT 2
4798: EQUAL
4799: OR
4800: IFFALSE 4817
// PrepareHuman ( false , 4 , 6 ) else
4802: LD_INT 0
4804: PPUSH
4805: LD_INT 4
4807: PPUSH
4808: LD_INT 6
4810: PPUSH
4811: CALL_OW 380
4815: GO 4830
// PrepareHuman ( false , 4 , 8 ) ;
4817: LD_INT 0
4819: PPUSH
4820: LD_INT 4
4822: PPUSH
4823: LD_INT 8
4825: PPUSH
4826: CALL_OW 380
// un = CreateHuman ;
4830: LD_ADDR_VAR 0 3
4834: PUSH
4835: CALL_OW 44
4839: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4840: LD_VAR 0 3
4844: PPUSH
4845: LD_INT 4
4847: PPUSH
4848: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4852: LD_VAR 0 3
4856: PPUSH
4857: LD_VAR 0 4
4861: PPUSH
4862: CALL_OW 52
// vc_chassis = 14 ;
4866: LD_ADDR_OWVAR 37
4870: PUSH
4871: LD_INT 14
4873: ST_TO_ADDR
// vc_engine = 3 ;
4874: LD_ADDR_OWVAR 39
4878: PUSH
4879: LD_INT 3
4881: ST_TO_ADDR
// vc_control = 1 ;
4882: LD_ADDR_OWVAR 38
4886: PUSH
4887: LD_INT 1
4889: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4890: LD_ADDR_OWVAR 40
4894: PUSH
4895: LD_INT 27
4897: PUSH
4898: LD_INT 26
4900: PUSH
4901: LD_INT 28
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 3
4914: PPUSH
4915: CALL_OW 12
4919: ARRAY
4920: ST_TO_ADDR
// veh = CreateVehicle ;
4921: LD_ADDR_VAR 0 4
4925: PUSH
4926: CALL_OW 45
4930: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4931: LD_VAR 0 4
4935: PPUSH
4936: LD_INT 4
4938: PPUSH
4939: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4943: LD_VAR 0 4
4947: PPUSH
4948: LD_INT 4
4950: PPUSH
4951: LD_INT 0
4953: PPUSH
4954: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4958: LD_EXP 27
4962: PUSH
4963: LD_INT 0
4965: EQUAL
4966: PUSH
4967: LD_EXP 27
4971: PUSH
4972: LD_INT 2
4974: EQUAL
4975: OR
4976: IFFALSE 4993
// PrepareHuman ( false , 2 , 4 ) else
4978: LD_INT 0
4980: PPUSH
4981: LD_INT 2
4983: PPUSH
4984: LD_INT 4
4986: PPUSH
4987: CALL_OW 380
4991: GO 5006
// PrepareHuman ( false , 2 , 8 ) ;
4993: LD_INT 0
4995: PPUSH
4996: LD_INT 2
4998: PPUSH
4999: LD_INT 8
5001: PPUSH
5002: CALL_OW 380
// un = CreateHuman ;
5006: LD_ADDR_VAR 0 3
5010: PUSH
5011: CALL_OW 44
5015: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5016: LD_VAR 0 3
5020: PPUSH
5021: LD_INT 4
5023: PPUSH
5024: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5028: LD_VAR 0 3
5032: PPUSH
5033: LD_VAR 0 4
5037: PPUSH
5038: CALL_OW 52
// end ;
5042: LD_VAR 0 1
5046: RET
// export function PrepareAttackLegion ; var i , un ; begin
5047: LD_INT 0
5049: PPUSH
5050: PPUSH
5051: PPUSH
// for i = 1 to 4 do
5052: LD_ADDR_VAR 0 2
5056: PUSH
5057: DOUBLE
5058: LD_INT 1
5060: DEC
5061: ST_TO_ADDR
5062: LD_INT 4
5064: PUSH
5065: FOR_TO
5066: IFFALSE 5176
// begin uc_side = 8 ;
5068: LD_ADDR_OWVAR 20
5072: PUSH
5073: LD_INT 8
5075: ST_TO_ADDR
// uc_nation = 2 ;
5076: LD_ADDR_OWVAR 21
5080: PUSH
5081: LD_INT 2
5083: ST_TO_ADDR
// hc_gallery =  ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING 
5091: ST_TO_ADDR
// hc_name =  ;
5092: LD_ADDR_OWVAR 26
5096: PUSH
5097: LD_STRING 
5099: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5100: LD_INT 0
5102: PPUSH
5103: LD_INT 1
5105: PUSH
5106: LD_INT 8
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: LD_INT 1
5115: PPUSH
5116: LD_INT 2
5118: PPUSH
5119: CALL_OW 12
5123: ARRAY
5124: PPUSH
5125: LD_INT 6
5127: PPUSH
5128: LD_INT 8
5130: PPUSH
5131: CALL_OW 12
5135: PPUSH
5136: CALL_OW 380
// un = CreateHuman ;
5140: LD_ADDR_VAR 0 3
5144: PUSH
5145: CALL_OW 44
5149: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5150: LD_VAR 0 3
5154: PPUSH
5155: LD_INT 19
5157: PPUSH
5158: LD_INT 0
5160: PPUSH
5161: CALL_OW 49
// ComCrawl ( un ) ;
5165: LD_VAR 0 3
5169: PPUSH
5170: CALL_OW 137
// end ;
5174: GO 5065
5176: POP
5177: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5178: LD_INT 1
5180: PPUSH
5181: LD_INT 8
5183: PPUSH
5184: LD_INT 2
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5194: LD_INT 20
5196: PPUSH
5197: LD_INT 3
5199: PPUSH
5200: CALL 16688 0 2
// end ; end_of_file
5204: LD_VAR 0 1
5208: RET
// every 1 do var i ;
5209: GO 5211
5211: DISABLE
5212: LD_INT 0
5214: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5215: LD_INT 10
5217: PPUSH
5218: LD_INT 122
5220: PPUSH
5221: LD_INT 145
5223: PPUSH
5224: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5228: LD_INT 137
5230: PPUSH
5231: LD_INT 84
5233: PPUSH
5234: LD_INT 61
5236: PPUSH
5237: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5241: LD_EXP 1
5245: PPUSH
5246: CALL_OW 310
5250: PPUSH
5251: CALL_OW 87
// InGameOn ;
5255: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5259: LD_INT 22
5261: PUSH
5262: LD_INT 1
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PPUSH
5269: CALL_OW 69
5273: PPUSH
5274: LD_INT 130
5276: PPUSH
5277: LD_INT 103
5279: PPUSH
5280: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5284: LD_VAR 0 1
5288: PPUSH
5289: LD_INT 114
5291: PPUSH
5292: LD_INT 102
5294: PPUSH
5295: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5299: LD_EXP 1
5303: PPUSH
5304: LD_STRING D1-JMM-1
5306: PPUSH
5307: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5311: LD_EXP 1
5315: PPUSH
5316: CALL_OW 310
5320: PPUSH
5321: CALL_OW 87
// if IsOk ( Donaldson ) then
5325: LD_EXP 3
5329: PPUSH
5330: CALL_OW 302
5334: IFFALSE 5414
// begin Say ( Donaldson , D1-Don-1 ) ;
5336: LD_EXP 3
5340: PPUSH
5341: LD_STRING D1-Don-1
5343: PPUSH
5344: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5348: LD_EXP 1
5352: PPUSH
5353: CALL_OW 310
5357: PPUSH
5358: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5362: LD_EXP 1
5366: PPUSH
5367: LD_STRING D1-JMM-2
5369: PPUSH
5370: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5374: LD_EXP 1
5378: PPUSH
5379: CALL_OW 310
5383: PPUSH
5384: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5388: LD_EXP 3
5392: PPUSH
5393: LD_STRING D1-Don-2
5395: PPUSH
5396: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5400: LD_EXP 1
5404: PPUSH
5405: CALL_OW 310
5409: PPUSH
5410: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5414: LD_INT 22
5416: PUSH
5417: LD_INT 1
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PPUSH
5424: CALL_OW 69
5428: PPUSH
5429: LD_INT 110
5431: PPUSH
5432: LD_INT 101
5434: PPUSH
5435: CALL_OW 171
// wait ( 0 0$1 ) ;
5439: LD_INT 35
5441: PPUSH
5442: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5446: LD_EXP 1
5450: PPUSH
5451: CALL_OW 310
5455: PPUSH
5456: CALL_OW 87
// wait ( 0 0$1 ) ;
5460: LD_INT 35
5462: PPUSH
5463: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5467: LD_EXP 1
5471: PPUSH
5472: CALL_OW 310
5476: PPUSH
5477: CALL_OW 87
// wait ( 0 0$1 ) ;
5481: LD_INT 35
5483: PPUSH
5484: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5488: LD_EXP 1
5492: PPUSH
5493: CALL_OW 310
5497: PPUSH
5498: CALL_OW 87
// wait ( 0 0$1 ) ;
5502: LD_INT 35
5504: PPUSH
5505: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5509: LD_EXP 1
5513: PPUSH
5514: CALL_OW 310
5518: PPUSH
5519: CALL_OW 87
// end ;
5523: PPOPN 1
5525: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5526: LD_INT 1
5528: PPUSH
5529: LD_INT 102
5531: PPUSH
5532: LD_INT 94
5534: PPUSH
5535: CALL_OW 293
5539: IFFALSE 5730
5541: GO 5543
5543: DISABLE
5544: LD_INT 0
5546: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5547: LD_INT 102
5549: PPUSH
5550: LD_INT 94
5552: PPUSH
5553: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5557: LD_INT 22
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 26
5569: PUSH
5570: LD_INT 1
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PUSH
5577: LD_INT 2
5579: PUSH
5580: LD_INT 25
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 25
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 25
5602: PUSH
5603: LD_INT 3
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: LD_INT 25
5612: PUSH
5613: LD_INT 4
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 25
5622: PUSH
5623: LD_INT 5
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: PUSH
5630: LD_INT 25
5632: PUSH
5633: LD_INT 8
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: PPUSH
5654: CALL_OW 69
5658: PPUSH
5659: LD_STRING D1-Sol1-2
5661: PPUSH
5662: LD_STRING 
5664: PPUSH
5665: CALL 13303 0 3
// Say ( JMM , D1-JMM-3 ) ;
5669: LD_EXP 1
5673: PPUSH
5674: LD_STRING D1-JMM-3
5676: PPUSH
5677: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5681: LD_STRING M1
5683: PPUSH
5684: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5688: LD_ADDR_VAR 0 1
5692: PUSH
5693: LD_INT 22
5695: PUSH
5696: LD_INT 1
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PPUSH
5703: CALL_OW 69
5707: PUSH
5708: FOR_IN
5709: IFFALSE 5728
// ComMoveXY ( i , 95 , 84 ) ;
5711: LD_VAR 0 1
5715: PPUSH
5716: LD_INT 95
5718: PPUSH
5719: LD_INT 84
5721: PPUSH
5722: CALL_OW 111
5726: GO 5708
5728: POP
5729: POP
// end ;
5730: PPOPN 1
5732: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5742: LD_ADDR_VAR 0 2
5746: PUSH
5747: LD_INT 8
5749: PPUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 3
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 25
5762: PUSH
5763: LD_INT 9
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PPUSH
5774: CALL_OW 70
5778: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5779: LD_ADDR_VAR 0 3
5783: PUSH
5784: LD_INT 22
5786: PUSH
5787: LD_INT 1
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: EMPTY
5795: LIST
5796: PPUSH
5797: CALL_OW 69
5801: ST_TO_ADDR
// enable ;
5802: ENABLE
// for i in your_units do
5803: LD_ADDR_VAR 0 1
5807: PUSH
5808: LD_VAR 0 3
5812: PUSH
5813: FOR_IN
5814: IFFALSE 6462
// begin if See ( 3 , i ) then
5816: LD_INT 3
5818: PPUSH
5819: LD_VAR 0 1
5823: PPUSH
5824: CALL_OW 292
5828: IFFALSE 6460
// begin disable ;
5830: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5831: LD_VAR 0 2
5835: PPUSH
5836: LD_INT 96
5838: PPUSH
5839: LD_INT 85
5841: PPUSH
5842: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5846: LD_VAR 0 2
5850: PPUSH
5851: LD_INT 96
5853: PPUSH
5854: LD_INT 85
5856: PPUSH
5857: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5861: LD_VAR 0 2
5865: PPUSH
5866: LD_INT 96
5868: PPUSH
5869: LD_INT 85
5871: PPUSH
5872: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5876: LD_VAR 0 2
5880: PPUSH
5881: LD_INT 96
5883: PPUSH
5884: LD_INT 85
5886: PPUSH
5887: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5891: LD_VAR 0 2
5895: PPUSH
5896: LD_INT 96
5898: PPUSH
5899: LD_INT 85
5901: PPUSH
5902: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: LD_INT 96
5913: PPUSH
5914: LD_INT 85
5916: PPUSH
5917: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5921: LD_EXP 1
5925: PPUSH
5926: LD_STRING D1a-JMM-1
5928: PPUSH
5929: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5933: LD_EXP 3
5937: PPUSH
5938: LD_STRING D1a-Don-1
5940: PPUSH
5941: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5945: LD_ADDR_VAR 0 1
5949: PUSH
5950: LD_INT 22
5952: PUSH
5953: LD_INT 1
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: PUSH
5965: FOR_IN
5966: IFFALSE 5985
// ComMoveXY ( i , 109 , 102 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 109
5975: PPUSH
5976: LD_INT 102
5978: PPUSH
5979: CALL_OW 111
5983: GO 5965
5985: POP
5986: POP
// Say ( JMM , D1a-JMM-2 ) ;
5987: LD_EXP 1
5991: PPUSH
5992: LD_STRING D1a-JMM-2
5994: PPUSH
5995: CALL_OW 88
// wait ( 0 0$10 ) ;
5999: LD_INT 350
6001: PPUSH
6002: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6006: LD_EXP 1
6010: PPUSH
6011: CALL_OW 310
6015: PPUSH
6016: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6020: LD_EXP 3
6024: PPUSH
6025: LD_STRING D1b-Don-1
6027: PPUSH
6028: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6032: LD_EXP 1
6036: PPUSH
6037: LD_STRING D1b-JMM-1
6039: PPUSH
6040: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6044: LD_INT 22
6046: PUSH
6047: LD_INT 1
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 26
6056: PUSH
6057: LD_INT 1
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: LD_INT 2
6066: PUSH
6067: LD_INT 25
6069: PUSH
6070: LD_INT 1
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: LD_INT 25
6079: PUSH
6080: LD_INT 2
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 25
6089: PUSH
6090: LD_INT 3
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 25
6099: PUSH
6100: LD_INT 4
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 25
6109: PUSH
6110: LD_INT 5
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 25
6119: PUSH
6120: LD_INT 8
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: PPUSH
6141: CALL_OW 69
6145: PPUSH
6146: LD_STRING D1b-Sol1-1
6148: PPUSH
6149: LD_STRING 
6151: PPUSH
6152: CALL 13303 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6156: LD_EXP 3
6160: PPUSH
6161: LD_STRING D1b-Don-2
6163: PPUSH
6164: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6168: LD_EXP 1
6172: PPUSH
6173: LD_STRING D1b-JMM-2
6175: PPUSH
6176: CALL_OW 88
// dec = ShowQuery1 ;
6180: LD_ADDR_VAR 0 4
6184: PUSH
6185: CALL 13839 0 0
6189: ST_TO_ADDR
// if dec = 1 then
6190: LD_VAR 0 4
6194: PUSH
6195: LD_INT 1
6197: EQUAL
6198: IFFALSE 6304
// begin Say ( JMM , D2-JMM-1 ) ;
6200: LD_EXP 1
6204: PPUSH
6205: LD_STRING D2-JMM-1
6207: PPUSH
6208: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6212: LD_EXP 22
6216: PPUSH
6217: LD_STRING D2-Pow-1
6219: PPUSH
6220: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6224: LD_EXP 1
6228: PPUSH
6229: LD_STRING D2a-JMM-1
6231: PPUSH
6232: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6236: LD_EXP 22
6240: PPUSH
6241: LD_STRING D2a-Pow-1
6243: PPUSH
6244: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6248: LD_EXP 1
6252: PPUSH
6253: LD_STRING D2a-JMM-2
6255: PPUSH
6256: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6260: LD_EXP 22
6264: PPUSH
6265: LD_STRING D2a-Pow-2
6267: PPUSH
6268: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6272: LD_EXP 1
6276: PPUSH
6277: LD_STRING D2a-JMM-3
6279: PPUSH
6280: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6284: LD_EXP 22
6288: PPUSH
6289: LD_STRING D2a-Pow-3
6291: PPUSH
6292: CALL_OW 94
// secondPass = 2 ;
6296: LD_ADDR_EXP 28
6300: PUSH
6301: LD_INT 2
6303: ST_TO_ADDR
// end ; if dec = 2 then
6304: LD_VAR 0 4
6308: PUSH
6309: LD_INT 2
6311: EQUAL
6312: IFFALSE 6406
// begin Say ( JMM , D2-JMM-1 ) ;
6314: LD_EXP 1
6318: PPUSH
6319: LD_STRING D2-JMM-1
6321: PPUSH
6322: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6326: LD_EXP 22
6330: PPUSH
6331: LD_STRING D2-Pow-1
6333: PPUSH
6334: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6338: LD_EXP 1
6342: PPUSH
6343: LD_STRING D2b-JMM-1
6345: PPUSH
6346: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6350: LD_EXP 22
6354: PPUSH
6355: LD_STRING D2b-Pow-1
6357: PPUSH
6358: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6362: LD_EXP 1
6366: PPUSH
6367: LD_STRING D2c-JMM-1
6369: PPUSH
6370: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6374: LD_EXP 22
6378: PPUSH
6379: LD_STRING D2c-Pow-1
6381: PPUSH
6382: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6386: LD_EXP 1
6390: PPUSH
6391: LD_STRING D2c-JMM-2
6393: PPUSH
6394: CALL_OW 88
// secondPass = 2 ;
6398: LD_ADDR_EXP 28
6402: PUSH
6403: LD_INT 2
6405: ST_TO_ADDR
// end ; if dec = 3 then
6406: LD_VAR 0 4
6410: PUSH
6411: LD_INT 3
6413: EQUAL
6414: IFFALSE 6424
// secondPass = 1 ;
6416: LD_ADDR_EXP 28
6420: PUSH
6421: LD_INT 1
6423: ST_TO_ADDR
// InGameOff ;
6424: CALL_OW 9
// ruAI = 1 ;
6428: LD_ADDR_EXP 42
6432: PUSH
6433: LD_INT 1
6435: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6436: LD_INT 1
6438: PPUSH
6439: LD_INT 3
6441: PPUSH
6442: LD_INT 2
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 80
// SaveForQuickRestart ;
6452: CALL_OW 22
// exit ;
6456: POP
6457: POP
6458: GO 6464
// end ; end ;
6460: GO 5813
6462: POP
6463: POP
// end ;
6464: PPOPN 4
6466: END
// every 1 1$0 trigger secondPass = 2 do
6467: LD_EXP 28
6471: PUSH
6472: LD_INT 2
6474: EQUAL
6475: IFFALSE 6602
6477: GO 6479
6479: DISABLE
// begin PowellSupport1 ;
6480: CALL 1763 0 0
// DialogueOn ;
6484: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6488: LD_EXP 1
6492: PPUSH
6493: LD_STRING DC1-JMM-1
6495: PPUSH
6496: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6500: LD_EXP 22
6504: PPUSH
6505: LD_STRING DC1-Pow-1
6507: PPUSH
6508: CALL_OW 94
// DialogueOff ;
6512: CALL_OW 7
// wait ( 3 3$0 ) ;
6516: LD_INT 6300
6518: PPUSH
6519: CALL_OW 67
// PowellSupport2 ;
6523: CALL 2222 0 0
// DialogueOn ;
6527: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6531: LD_EXP 1
6535: PPUSH
6536: LD_STRING DC2-JMM-1
6538: PPUSH
6539: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6543: LD_EXP 22
6547: PPUSH
6548: LD_STRING DC2-Pow-1
6550: PPUSH
6551: CALL_OW 94
// DialogueOff ;
6555: CALL_OW 7
// wait ( 6 6$0 ) ;
6559: LD_INT 12600
6561: PPUSH
6562: CALL_OW 67
// PowellSupport3 ;
6566: CALL 2756 0 0
// DialogueOn ;
6570: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6574: LD_EXP 22
6578: PPUSH
6579: LD_STRING DC3-Pow-1
6581: PPUSH
6582: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6586: LD_EXP 1
6590: PPUSH
6591: LD_STRING DC3-JMM-1
6593: PPUSH
6594: CALL_OW 88
// DialogueOff ;
6598: CALL_OW 7
// end ;
6602: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6603: LD_EXP 28
6607: PUSH
6608: LD_INT 2
6610: EQUAL
6611: PUSH
6612: LD_INT 22
6614: PUSH
6615: LD_INT 1
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: LD_INT 30
6627: PUSH
6628: LD_INT 0
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 30
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PPUSH
6654: CALL_OW 69
6658: PUSH
6659: LD_INT 0
6661: GREATER
6662: AND
6663: IFFALSE 10031
6665: GO 6667
6667: DISABLE
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6678: LD_ADDR_VAR 0 4
6682: PUSH
6683: LD_INT 22
6685: PUSH
6686: LD_INT 1
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 21
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 2
6705: PUSH
6706: LD_INT 30
6708: PUSH
6709: LD_INT 0
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 30
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 69
6740: ST_TO_ADDR
// for i in tmp do
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: LD_VAR 0 4
6750: PUSH
6751: FOR_IN
6752: IFFALSE 6785
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6754: LD_ADDR_VAR 0 6
6758: PUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_VAR 0 1
6768: PPUSH
6769: CALL_OW 274
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL_OW 275
6781: PLUS
6782: ST_TO_ADDR
6783: GO 6751
6785: POP
6786: POP
// for i in tmp do
6787: LD_ADDR_VAR 0 1
6791: PUSH
6792: LD_VAR 0 4
6796: PUSH
6797: FOR_IN
6798: IFFALSE 6831
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6800: LD_ADDR_VAR 0 7
6804: PUSH
6805: LD_VAR 0 7
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 274
6819: PPUSH
6820: LD_INT 2
6822: PPUSH
6823: CALL_OW 275
6827: PLUS
6828: ST_TO_ADDR
6829: GO 6797
6831: POP
6832: POP
// for i in tmp do
6833: LD_ADDR_VAR 0 1
6837: PUSH
6838: LD_VAR 0 4
6842: PUSH
6843: FOR_IN
6844: IFFALSE 6877
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6846: LD_ADDR_VAR 0 8
6850: PUSH
6851: LD_VAR 0 8
6855: PUSH
6856: LD_VAR 0 1
6860: PPUSH
6861: CALL_OW 274
6865: PPUSH
6866: LD_INT 3
6868: PPUSH
6869: CALL_OW 275
6873: PLUS
6874: ST_TO_ADDR
6875: GO 6843
6877: POP
6878: POP
// PrepareKurt ;
6879: CALL 4183 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6883: LD_EXP 26
6887: PPUSH
6888: LD_INT 144
6890: PPUSH
6891: LD_INT 111
6893: PPUSH
6894: CALL_OW 111
// wait ( 0 0$2 ) ;
6898: LD_INT 70
6900: PPUSH
6901: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6905: LD_INT 8
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: CALL_OW 343
// if kurtStatus > 0 then
6915: LD_EXP 27
6919: PUSH
6920: LD_INT 0
6922: GREATER
6923: IFFALSE 8486
// begin ComExitVehicle ( Kurt ) ;
6925: LD_EXP 24
6929: PPUSH
6930: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6934: LD_EXP 24
6938: PPUSH
6939: CALL_OW 87
// wait ( 0 0$1 ) ;
6943: LD_INT 35
6945: PPUSH
6946: CALL_OW 67
// DialogueOn ;
6950: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6954: LD_INT 22
6956: PUSH
6957: LD_INT 1
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 26
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 25
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 25
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 25
6999: PUSH
7000: LD_INT 3
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 25
7009: PUSH
7010: LD_INT 4
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 25
7019: PUSH
7020: LD_INT 5
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 25
7029: PUSH
7030: LD_INT 8
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: PPUSH
7056: LD_STRING D3-Sol1-1
7058: PPUSH
7059: LD_STRING 
7061: PPUSH
7062: CALL 13303 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7066: LD_EXP 24
7070: PPUSH
7071: LD_STRING D3-Kurt-1
7073: PPUSH
7074: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7078: LD_EXP 1
7082: PPUSH
7083: LD_STRING D3-JMM-1
7085: PPUSH
7086: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7090: LD_EXP 24
7094: PPUSH
7095: LD_STRING D3-Kurt-2
7097: PPUSH
7098: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7102: LD_EXP 1
7106: PPUSH
7107: LD_STRING D3-JMM-2
7109: PPUSH
7110: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7114: LD_EXP 24
7118: PPUSH
7119: LD_STRING D3-Kurt-4
7121: PPUSH
7122: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7126: LD_EXP 1
7130: PPUSH
7131: LD_STRING D3-JMM-4
7133: PPUSH
7134: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7138: LD_EXP 24
7142: PPUSH
7143: LD_STRING D3-Kurt-5
7145: PPUSH
7146: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7150: LD_EXP 24
7154: PPUSH
7155: LD_STRING D3-Kurt-5a
7157: PPUSH
7158: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7162: LD_VAR 0 6
7166: PUSH
7167: LD_INT 60
7169: GREATEREQUAL
7170: PUSH
7171: LD_VAR 0 8
7175: PUSH
7176: LD_INT 60
7178: GREATEREQUAL
7179: AND
7180: IFFALSE 7215
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7182: LD_ADDR_VAR 0 2
7186: PUSH
7187: LD_STRING Q2K
7189: PPUSH
7190: LD_INT 1
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: LD_INT 4
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 98
7212: ST_TO_ADDR
7213: GO 7238
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7215: LD_ADDR_VAR 0 2
7219: PUSH
7220: LD_STRING Q2K
7222: PPUSH
7223: LD_INT 3
7225: PUSH
7226: LD_INT 4
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PPUSH
7233: CALL_OW 98
7237: ST_TO_ADDR
// if dec1 = 1 then
7238: LD_VAR 0 2
7242: PUSH
7243: LD_INT 1
7245: EQUAL
7246: IFFALSE 7280
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7248: LD_EXP 1
7252: PPUSH
7253: LD_STRING D3Ka-JMM-1
7255: PPUSH
7256: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7260: LD_EXP 24
7264: PPUSH
7265: LD_STRING D3Ka-Kurt-1
7267: PPUSH
7268: CALL_OW 88
// warWithLegion = 1 ;
7272: LD_ADDR_EXP 31
7276: PUSH
7277: LD_INT 1
7279: ST_TO_ADDR
// end ; if dec1 = 2 then
7280: LD_VAR 0 2
7284: PUSH
7285: LD_INT 2
7287: EQUAL
7288: IFFALSE 7514
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7290: LD_EXP 1
7294: PPUSH
7295: LD_STRING D3Kb-JMM-1
7297: PPUSH
7298: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7302: LD_EXP 24
7306: PPUSH
7307: LD_STRING D3Kb-Kurt-1
7309: PPUSH
7310: CALL_OW 88
// for i in tmp do
7314: LD_ADDR_VAR 0 1
7318: PUSH
7319: LD_VAR 0 4
7323: PUSH
7324: FOR_IN
7325: IFFALSE 7412
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL_OW 274
7341: PPUSH
7342: LD_INT 1
7344: PPUSH
7345: CALL_OW 275
7349: ST_TO_ADDR
// if tmp2 >= 60 then
7350: LD_VAR 0 5
7354: PUSH
7355: LD_INT 60
7357: GREATEREQUAL
7358: IFFALSE 7390
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 274
7369: PPUSH
7370: LD_INT 1
7372: PPUSH
7373: LD_VAR 0 5
7377: PUSH
7378: LD_INT 60
7380: MINUS
7381: PPUSH
7382: CALL_OW 277
// break ;
7386: GO 7412
// end else
7388: GO 7410
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7390: LD_VAR 0 1
7394: PPUSH
7395: CALL_OW 274
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: LD_INT 0
7405: PPUSH
7406: CALL_OW 277
// end ; end ;
7410: GO 7324
7412: POP
7413: POP
// for i in tmp do
7414: LD_ADDR_VAR 0 1
7418: PUSH
7419: LD_VAR 0 4
7423: PUSH
7424: FOR_IN
7425: IFFALSE 7512
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7427: LD_ADDR_VAR 0 5
7431: PUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 274
7441: PPUSH
7442: LD_INT 3
7444: PPUSH
7445: CALL_OW 275
7449: ST_TO_ADDR
// if tmp2 >= 60 then
7450: LD_VAR 0 5
7454: PUSH
7455: LD_INT 60
7457: GREATEREQUAL
7458: IFFALSE 7490
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: CALL_OW 274
7469: PPUSH
7470: LD_INT 3
7472: PPUSH
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 60
7480: MINUS
7481: PPUSH
7482: CALL_OW 277
// break ;
7486: GO 7512
// end else
7488: GO 7510
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 274
7499: PPUSH
7500: LD_INT 3
7502: PPUSH
7503: LD_INT 0
7505: PPUSH
7506: CALL_OW 277
// end ; end ;
7510: GO 7424
7512: POP
7513: POP
// end ; if dec1 = 3 then
7514: LD_VAR 0 2
7518: PUSH
7519: LD_INT 3
7521: EQUAL
7522: IFFALSE 7757
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7524: LD_EXP 1
7528: PPUSH
7529: LD_STRING D3Kc1-JMM-1
7531: PPUSH
7532: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7536: LD_EXP 24
7540: PPUSH
7541: LD_STRING D3Kc1-Kurt-1
7543: PPUSH
7544: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7548: LD_EXP 1
7552: PPUSH
7553: LD_STRING D3Kc1-JMM-2
7555: PPUSH
7556: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7560: LD_EXP 24
7564: PPUSH
7565: LD_STRING D3Kc1-Kurt-2
7567: PPUSH
7568: CALL_OW 88
// askSiberite = 1 ;
7572: LD_ADDR_EXP 33
7576: PUSH
7577: LD_INT 1
7579: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7580: LD_ADDR_VAR 0 2
7584: PUSH
7585: LD_STRING Q2b
7587: PPUSH
7588: LD_INT 1
7590: PUSH
7591: LD_INT 2
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 98
7606: ST_TO_ADDR
// if dec2 = 1 then
7607: LD_VAR 0 3
7611: PUSH
7612: LD_INT 1
7614: EQUAL
7615: IFFALSE 7649
// begin Say ( JMM , D4a-JMM-1 ) ;
7617: LD_EXP 1
7621: PPUSH
7622: LD_STRING D4a-JMM-1
7624: PPUSH
7625: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7629: LD_EXP 24
7633: PPUSH
7634: LD_STRING D4b-Kurt-1
7636: PPUSH
7637: CALL_OW 88
// warWithLegion = 1 ;
7641: LD_ADDR_EXP 31
7645: PUSH
7646: LD_INT 1
7648: ST_TO_ADDR
// end ; if dec2 = 2 then
7649: LD_VAR 0 3
7653: PUSH
7654: LD_INT 2
7656: EQUAL
7657: IFFALSE 7691
// begin Say ( JMM , D4b-JMM-1 ) ;
7659: LD_EXP 1
7663: PPUSH
7664: LD_STRING D4b-JMM-1
7666: PPUSH
7667: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7671: LD_EXP 24
7675: PPUSH
7676: LD_STRING D4b-Kurt-1
7678: PPUSH
7679: CALL_OW 88
// warWithLegion = 1 ;
7683: LD_ADDR_EXP 31
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// end ; if dec2 = 3 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 3
7698: EQUAL
7699: IFFALSE 7757
// begin Say ( JMM , D4c-JMM-1 ) ;
7701: LD_EXP 1
7705: PPUSH
7706: LD_STRING D4c-JMM-1
7708: PPUSH
7709: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7713: LD_EXP 24
7717: PPUSH
7718: LD_STRING D4c-Kurt-1
7720: PPUSH
7721: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7725: LD_EXP 1
7729: PPUSH
7730: LD_STRING D4c-JMM-2
7732: PPUSH
7733: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7737: LD_EXP 24
7741: PPUSH
7742: LD_STRING D4c-Kurt-2
7744: PPUSH
7745: CALL_OW 88
// fakeInfo = 1 ;
7749: LD_ADDR_EXP 32
7753: PUSH
7754: LD_INT 1
7756: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7757: LD_VAR 0 2
7761: PUSH
7762: LD_INT 4
7764: EQUAL
7765: IFFALSE 8422
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7767: LD_EXP 1
7771: PPUSH
7772: LD_STRING D3Kd-JMM-1
7774: PPUSH
7775: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7779: LD_VAR 0 6
7783: PUSH
7784: LD_INT 120
7786: GREATEREQUAL
7787: PUSH
7788: LD_VAR 0 8
7792: PUSH
7793: LD_INT 120
7795: GREATEREQUAL
7796: AND
7797: IFFALSE 7832
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7799: LD_ADDR_VAR 0 3
7803: PUSH
7804: LD_STRING Q2aK
7806: PPUSH
7807: LD_INT 1
7809: PUSH
7810: LD_INT 2
7812: PUSH
7813: LD_INT 3
7815: PUSH
7816: LD_INT 4
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 98
7829: ST_TO_ADDR
7830: GO 7855
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7832: LD_ADDR_VAR 0 3
7836: PUSH
7837: LD_STRING Q2K
7839: PPUSH
7840: LD_INT 1
7842: PUSH
7843: LD_INT 4
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PPUSH
7850: CALL_OW 98
7854: ST_TO_ADDR
// if dec2 = 1 then
7855: LD_VAR 0 3
7859: PUSH
7860: LD_INT 1
7862: EQUAL
7863: IFFALSE 7897
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7865: LD_EXP 1
7869: PPUSH
7870: LD_STRING D5Ka-JMM-1
7872: PPUSH
7873: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7877: LD_EXP 24
7881: PPUSH
7882: LD_STRING D5Ka-Kurt-1
7884: PPUSH
7885: CALL_OW 88
// warWithLegion = 1 ;
7889: LD_ADDR_EXP 31
7893: PUSH
7894: LD_INT 1
7896: ST_TO_ADDR
// end ; if dec2 = 2 then
7897: LD_VAR 0 3
7901: PUSH
7902: LD_INT 2
7904: EQUAL
7905: IFFALSE 7931
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7907: LD_EXP 1
7911: PPUSH
7912: LD_STRING D3Kb-JMM-1
7914: PPUSH
7915: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7919: LD_EXP 24
7923: PPUSH
7924: LD_STRING D3Kb-Kurt-1
7926: PPUSH
7927: CALL_OW 88
// end ; if dec2 = 3 then
7931: LD_VAR 0 3
7935: PUSH
7936: LD_INT 3
7938: EQUAL
7939: IFFALSE 8169
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7941: LD_EXP 1
7945: PPUSH
7946: LD_STRING D3Ke-JMM-1
7948: PPUSH
7949: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7953: LD_EXP 24
7957: PPUSH
7958: LD_STRING D3Ke-Kurt-1
7960: PPUSH
7961: CALL_OW 88
// PrepareLegionForPlayer ;
7965: CALL 4383 0 0
// for i in tmp do
7969: LD_ADDR_VAR 0 1
7973: PUSH
7974: LD_VAR 0 4
7978: PUSH
7979: FOR_IN
7980: IFFALSE 8067
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7982: LD_ADDR_VAR 0 5
7986: PUSH
7987: LD_VAR 0 1
7991: PPUSH
7992: CALL_OW 274
7996: PPUSH
7997: LD_INT 1
7999: PPUSH
8000: CALL_OW 275
8004: ST_TO_ADDR
// if tmp2 >= 120 then
8005: LD_VAR 0 5
8009: PUSH
8010: LD_INT 120
8012: GREATEREQUAL
8013: IFFALSE 8045
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8015: LD_VAR 0 1
8019: PPUSH
8020: CALL_OW 274
8024: PPUSH
8025: LD_INT 1
8027: PPUSH
8028: LD_VAR 0 5
8032: PUSH
8033: LD_INT 120
8035: MINUS
8036: PPUSH
8037: CALL_OW 277
// break ;
8041: GO 8067
// end else
8043: GO 8065
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 274
8054: PPUSH
8055: LD_INT 1
8057: PPUSH
8058: LD_INT 0
8060: PPUSH
8061: CALL_OW 277
// end ; end ;
8065: GO 7979
8067: POP
8068: POP
// for i in tmp do
8069: LD_ADDR_VAR 0 1
8073: PUSH
8074: LD_VAR 0 4
8078: PUSH
8079: FOR_IN
8080: IFFALSE 8167
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8082: LD_ADDR_VAR 0 5
8086: PUSH
8087: LD_VAR 0 1
8091: PPUSH
8092: CALL_OW 274
8096: PPUSH
8097: LD_INT 3
8099: PPUSH
8100: CALL_OW 275
8104: ST_TO_ADDR
// if tmp2 >= 120 then
8105: LD_VAR 0 5
8109: PUSH
8110: LD_INT 120
8112: GREATEREQUAL
8113: IFFALSE 8145
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8115: LD_VAR 0 1
8119: PPUSH
8120: CALL_OW 274
8124: PPUSH
8125: LD_INT 3
8127: PPUSH
8128: LD_VAR 0 5
8132: PUSH
8133: LD_INT 120
8135: MINUS
8136: PPUSH
8137: CALL_OW 277
// break ;
8141: GO 8167
// end else
8143: GO 8165
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 274
8154: PPUSH
8155: LD_INT 3
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 277
// end ; end ;
8165: GO 8079
8167: POP
8168: POP
// end ; if dec2 = 4 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 4
8176: EQUAL
8177: IFFALSE 8422
// begin if dec1 = 3 then
8179: LD_VAR 0 2
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8422
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8189: LD_EXP 1
8193: PPUSH
8194: LD_STRING D3Kc1-JMM-1
8196: PPUSH
8197: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8201: LD_EXP 24
8205: PPUSH
8206: LD_STRING D3Kc1-Kurt-1
8208: PPUSH
8209: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8213: LD_EXP 1
8217: PPUSH
8218: LD_STRING D3Kc1-JMM-2
8220: PPUSH
8221: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8225: LD_EXP 24
8229: PPUSH
8230: LD_STRING D3Kc1-Kurt-2
8232: PPUSH
8233: CALL_OW 88
// askSiberite = 1 ;
8237: LD_ADDR_EXP 33
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8245: LD_ADDR_VAR 0 2
8249: PUSH
8250: LD_STRING Q2b
8252: PPUSH
8253: LD_INT 1
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 3
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: PPUSH
8267: CALL_OW 98
8271: ST_TO_ADDR
// if dec2 = 1 then
8272: LD_VAR 0 3
8276: PUSH
8277: LD_INT 1
8279: EQUAL
8280: IFFALSE 8314
// begin Say ( JMM , D4a-JMM-1 ) ;
8282: LD_EXP 1
8286: PPUSH
8287: LD_STRING D4a-JMM-1
8289: PPUSH
8290: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8294: LD_EXP 24
8298: PPUSH
8299: LD_STRING D4b-Kurt-1
8301: PPUSH
8302: CALL_OW 88
// warWithLegion = 1 ;
8306: LD_ADDR_EXP 31
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// end ; if dec2 = 2 then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 2
8321: EQUAL
8322: IFFALSE 8356
// begin Say ( JMM , D4b-JMM-1 ) ;
8324: LD_EXP 1
8328: PPUSH
8329: LD_STRING D4b-JMM-1
8331: PPUSH
8332: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8336: LD_EXP 24
8340: PPUSH
8341: LD_STRING D4b-Kurt-1
8343: PPUSH
8344: CALL_OW 88
// warWithLegion = 1 ;
8348: LD_ADDR_EXP 31
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// end ; if dec2 = 3 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 3
8363: EQUAL
8364: IFFALSE 8422
// begin Say ( JMM , D4c-JMM-1 ) ;
8366: LD_EXP 1
8370: PPUSH
8371: LD_STRING D4c-JMM-1
8373: PPUSH
8374: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8378: LD_EXP 24
8382: PPUSH
8383: LD_STRING D4c-Kurt-1
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8390: LD_EXP 1
8394: PPUSH
8395: LD_STRING D4c-JMM-2
8397: PPUSH
8398: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8402: LD_EXP 24
8406: PPUSH
8407: LD_STRING D4c-Kurt-2
8409: PPUSH
8410: CALL_OW 88
// fakeInfo = 1 ;
8414: LD_ADDR_EXP 32
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8422: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8426: LD_EXP 24
8430: PPUSH
8431: LD_EXP 26
8435: PPUSH
8436: CALL_OW 120
// wait ( 0 0$1 ) ;
8440: LD_INT 35
8442: PPUSH
8443: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8447: LD_EXP 26
8451: PPUSH
8452: LD_INT 4
8454: PPUSH
8455: CALL_OW 113
// wait ( 0 0$3 ) ;
8459: LD_INT 105
8461: PPUSH
8462: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8466: LD_EXP 24
8470: PPUSH
8471: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8475: LD_EXP 26
8479: PPUSH
8480: CALL_OW 64
// end else
8484: GO 10031
// begin ComExitVehicle ( otherKurt ) ;
8486: LD_EXP 25
8490: PPUSH
8491: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8495: LD_EXP 25
8499: PPUSH
8500: CALL_OW 87
// wait ( 0 0$1 ) ;
8504: LD_INT 35
8506: PPUSH
8507: CALL_OW 67
// DialogueOn ;
8511: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8515: LD_INT 22
8517: PUSH
8518: LD_INT 1
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: LD_INT 26
8527: PUSH
8528: LD_INT 1
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: LD_INT 2
8537: PUSH
8538: LD_INT 25
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 25
8560: PUSH
8561: LD_INT 3
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 25
8570: PUSH
8571: LD_INT 4
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 25
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 25
8590: PUSH
8591: LD_INT 8
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 69
8616: PPUSH
8617: LD_STRING D3-Sol1-1
8619: PPUSH
8620: LD_STRING 
8622: PPUSH
8623: CALL 13303 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8627: LD_EXP 25
8631: PPUSH
8632: LD_STRING D3-Kurt-1
8634: PPUSH
8635: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8639: LD_EXP 1
8643: PPUSH
8644: LD_STRING D3-JMM-1
8646: PPUSH
8647: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8651: LD_EXP 25
8655: PPUSH
8656: LD_STRING D3-Kurt-3
8658: PPUSH
8659: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8663: LD_EXP 1
8667: PPUSH
8668: LD_STRING D3-JMM-3
8670: PPUSH
8671: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8675: LD_EXP 25
8679: PPUSH
8680: LD_STRING D3-Kurt-5
8682: PPUSH
8683: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8687: LD_EXP 25
8691: PPUSH
8692: LD_STRING D3-Kurt-5b
8694: PPUSH
8695: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8699: LD_VAR 0 6
8703: PUSH
8704: LD_INT 100
8706: GREATEREQUAL
8707: PUSH
8708: LD_VAR 0 8
8712: PUSH
8713: LD_INT 100
8715: GREATEREQUAL
8716: AND
8717: IFFALSE 8752
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: LD_STRING Q2
8726: PPUSH
8727: LD_INT 1
8729: PUSH
8730: LD_INT 2
8732: PUSH
8733: LD_INT 3
8735: PUSH
8736: LD_INT 4
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 98
8749: ST_TO_ADDR
8750: GO 8775
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8752: LD_ADDR_VAR 0 2
8756: PUSH
8757: LD_STRING Q2
8759: PPUSH
8760: LD_INT 3
8762: PUSH
8763: LD_INT 4
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 98
8774: ST_TO_ADDR
// if dec1 = 1 then
8775: LD_VAR 0 2
8779: PUSH
8780: LD_INT 1
8782: EQUAL
8783: IFFALSE 8817
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8785: LD_EXP 1
8789: PPUSH
8790: LD_STRING D3Ka-JMM-1
8792: PPUSH
8793: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8797: LD_EXP 25
8801: PPUSH
8802: LD_STRING D3Ka-Kurt-1
8804: PPUSH
8805: CALL_OW 88
// warWithLegion = 1 ;
8809: LD_ADDR_EXP 31
8813: PUSH
8814: LD_INT 1
8816: ST_TO_ADDR
// end ; if dec1 = 2 then
8817: LD_VAR 0 2
8821: PUSH
8822: LD_INT 2
8824: EQUAL
8825: IFFALSE 9051
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8827: LD_EXP 1
8831: PPUSH
8832: LD_STRING D3Kb-JMM-1
8834: PPUSH
8835: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8839: LD_EXP 25
8843: PPUSH
8844: LD_STRING D3Kb-Kurt-1
8846: PPUSH
8847: CALL_OW 88
// for i in tmp do
8851: LD_ADDR_VAR 0 1
8855: PUSH
8856: LD_VAR 0 4
8860: PUSH
8861: FOR_IN
8862: IFFALSE 8949
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8864: LD_ADDR_VAR 0 5
8868: PUSH
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 274
8878: PPUSH
8879: LD_INT 1
8881: PPUSH
8882: CALL_OW 275
8886: ST_TO_ADDR
// if tmp2 >= 100 then
8887: LD_VAR 0 5
8891: PUSH
8892: LD_INT 100
8894: GREATEREQUAL
8895: IFFALSE 8927
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8897: LD_VAR 0 1
8901: PPUSH
8902: CALL_OW 274
8906: PPUSH
8907: LD_INT 1
8909: PPUSH
8910: LD_VAR 0 5
8914: PUSH
8915: LD_INT 100
8917: MINUS
8918: PPUSH
8919: CALL_OW 277
// break ;
8923: GO 8949
// end else
8925: GO 8947
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: CALL_OW 274
8936: PPUSH
8937: LD_INT 1
8939: PPUSH
8940: LD_INT 0
8942: PPUSH
8943: CALL_OW 277
// end ; end ;
8947: GO 8861
8949: POP
8950: POP
// for i in tmp do
8951: LD_ADDR_VAR 0 1
8955: PUSH
8956: LD_VAR 0 4
8960: PUSH
8961: FOR_IN
8962: IFFALSE 9049
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8964: LD_ADDR_VAR 0 5
8968: PUSH
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 274
8978: PPUSH
8979: LD_INT 3
8981: PPUSH
8982: CALL_OW 275
8986: ST_TO_ADDR
// if tmp2 >= 100 then
8987: LD_VAR 0 5
8991: PUSH
8992: LD_INT 100
8994: GREATEREQUAL
8995: IFFALSE 9027
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8997: LD_VAR 0 1
9001: PPUSH
9002: CALL_OW 274
9006: PPUSH
9007: LD_INT 3
9009: PPUSH
9010: LD_VAR 0 5
9014: PUSH
9015: LD_INT 100
9017: MINUS
9018: PPUSH
9019: CALL_OW 277
// break ;
9023: GO 9049
// end else
9025: GO 9047
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9027: LD_VAR 0 1
9031: PPUSH
9032: CALL_OW 274
9036: PPUSH
9037: LD_INT 3
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 277
// end ; end ;
9047: GO 8961
9049: POP
9050: POP
// end ; if dec1 = 3 then
9051: LD_VAR 0 2
9055: PUSH
9056: LD_INT 3
9058: EQUAL
9059: IFFALSE 9294
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9061: LD_EXP 1
9065: PPUSH
9066: LD_STRING D3Kc1-JMM-1
9068: PPUSH
9069: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9073: LD_EXP 25
9077: PPUSH
9078: LD_STRING D3Kc1-Kurt-1
9080: PPUSH
9081: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9085: LD_EXP 1
9089: PPUSH
9090: LD_STRING D3Kc1-JMM-2
9092: PPUSH
9093: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9097: LD_EXP 25
9101: PPUSH
9102: LD_STRING D3Kc1-Kurt-2
9104: PPUSH
9105: CALL_OW 88
// askSiberite = 1 ;
9109: LD_ADDR_EXP 33
9113: PUSH
9114: LD_INT 1
9116: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9117: LD_ADDR_VAR 0 2
9121: PUSH
9122: LD_STRING Q2b
9124: PPUSH
9125: LD_INT 1
9127: PUSH
9128: LD_INT 2
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 98
9143: ST_TO_ADDR
// if dec2 = 1 then
9144: LD_VAR 0 3
9148: PUSH
9149: LD_INT 1
9151: EQUAL
9152: IFFALSE 9186
// begin Say ( JMM , D4a-JMM-1 ) ;
9154: LD_EXP 1
9158: PPUSH
9159: LD_STRING D4a-JMM-1
9161: PPUSH
9162: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9166: LD_EXP 25
9170: PPUSH
9171: LD_STRING D4b-Kurt-1
9173: PPUSH
9174: CALL_OW 88
// warWithLegion = 1 ;
9178: LD_ADDR_EXP 31
9182: PUSH
9183: LD_INT 1
9185: ST_TO_ADDR
// end ; if dec2 = 2 then
9186: LD_VAR 0 3
9190: PUSH
9191: LD_INT 2
9193: EQUAL
9194: IFFALSE 9228
// begin Say ( JMM , D4b-JMM-1 ) ;
9196: LD_EXP 1
9200: PPUSH
9201: LD_STRING D4b-JMM-1
9203: PPUSH
9204: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9208: LD_EXP 25
9212: PPUSH
9213: LD_STRING D4b-Kurt-1
9215: PPUSH
9216: CALL_OW 88
// warWithLegion = 1 ;
9220: LD_ADDR_EXP 31
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// end ; if dec2 = 3 then
9228: LD_VAR 0 3
9232: PUSH
9233: LD_INT 3
9235: EQUAL
9236: IFFALSE 9294
// begin Say ( JMM , D4c-JMM-1 ) ;
9238: LD_EXP 1
9242: PPUSH
9243: LD_STRING D4c-JMM-1
9245: PPUSH
9246: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9250: LD_EXP 25
9254: PPUSH
9255: LD_STRING D4c-Kurt-1
9257: PPUSH
9258: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9262: LD_EXP 1
9266: PPUSH
9267: LD_STRING D4c-JMM-2
9269: PPUSH
9270: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9274: LD_EXP 25
9278: PPUSH
9279: LD_STRING D4c-Kurt-2
9281: PPUSH
9282: CALL_OW 88
// fakeInfo = 1 ;
9286: LD_ADDR_EXP 32
9290: PUSH
9291: LD_INT 1
9293: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9294: LD_VAR 0 2
9298: PUSH
9299: LD_INT 4
9301: EQUAL
9302: IFFALSE 9959
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9304: LD_EXP 1
9308: PPUSH
9309: LD_STRING D3Kd-JMM-1
9311: PPUSH
9312: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9316: LD_VAR 0 6
9320: PUSH
9321: LD_INT 200
9323: GREATEREQUAL
9324: PUSH
9325: LD_VAR 0 8
9329: PUSH
9330: LD_INT 200
9332: GREATEREQUAL
9333: AND
9334: IFFALSE 9369
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9336: LD_ADDR_VAR 0 3
9340: PUSH
9341: LD_STRING Q2a
9343: PPUSH
9344: LD_INT 1
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_INT 4
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: PPUSH
9362: CALL_OW 98
9366: ST_TO_ADDR
9367: GO 9392
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9369: LD_ADDR_VAR 0 3
9373: PUSH
9374: LD_STRING Q2a
9376: PPUSH
9377: LD_INT 1
9379: PUSH
9380: LD_INT 4
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PPUSH
9387: CALL_OW 98
9391: ST_TO_ADDR
// if dec2 = 1 then
9392: LD_VAR 0 3
9396: PUSH
9397: LD_INT 1
9399: EQUAL
9400: IFFALSE 9434
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9402: LD_EXP 1
9406: PPUSH
9407: LD_STRING D5Ka-JMM-1
9409: PPUSH
9410: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9414: LD_EXP 25
9418: PPUSH
9419: LD_STRING D5Ka-Kurt-1
9421: PPUSH
9422: CALL_OW 88
// warWithLegion = 1 ;
9426: LD_ADDR_EXP 31
9430: PUSH
9431: LD_INT 1
9433: ST_TO_ADDR
// end ; if dec2 = 2 then
9434: LD_VAR 0 3
9438: PUSH
9439: LD_INT 2
9441: EQUAL
9442: IFFALSE 9468
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9444: LD_EXP 1
9448: PPUSH
9449: LD_STRING D3Kb-JMM-1
9451: PPUSH
9452: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9456: LD_EXP 25
9460: PPUSH
9461: LD_STRING D3Kb-Kurt-1
9463: PPUSH
9464: CALL_OW 88
// end ; if dec2 = 3 then
9468: LD_VAR 0 3
9472: PUSH
9473: LD_INT 3
9475: EQUAL
9476: IFFALSE 9706
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9478: LD_EXP 1
9482: PPUSH
9483: LD_STRING D3Ke-JMM-1
9485: PPUSH
9486: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9490: LD_EXP 25
9494: PPUSH
9495: LD_STRING D3Ke-Kurt-1
9497: PPUSH
9498: CALL_OW 88
// PrepareLegionForPlayer ;
9502: CALL 4383 0 0
// for i in tmp do
9506: LD_ADDR_VAR 0 1
9510: PUSH
9511: LD_VAR 0 4
9515: PUSH
9516: FOR_IN
9517: IFFALSE 9604
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9519: LD_ADDR_VAR 0 5
9523: PUSH
9524: LD_VAR 0 1
9528: PPUSH
9529: CALL_OW 274
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: CALL_OW 275
9541: ST_TO_ADDR
// if tmp2 >= 200 then
9542: LD_VAR 0 5
9546: PUSH
9547: LD_INT 200
9549: GREATEREQUAL
9550: IFFALSE 9582
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9552: LD_VAR 0 1
9556: PPUSH
9557: CALL_OW 274
9561: PPUSH
9562: LD_INT 1
9564: PPUSH
9565: LD_VAR 0 5
9569: PUSH
9570: LD_INT 200
9572: MINUS
9573: PPUSH
9574: CALL_OW 277
// break ;
9578: GO 9604
// end else
9580: GO 9602
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9582: LD_VAR 0 1
9586: PPUSH
9587: CALL_OW 274
9591: PPUSH
9592: LD_INT 1
9594: PPUSH
9595: LD_INT 0
9597: PPUSH
9598: CALL_OW 277
// end ; end ;
9602: GO 9516
9604: POP
9605: POP
// for i in tmp do
9606: LD_ADDR_VAR 0 1
9610: PUSH
9611: LD_VAR 0 4
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9704
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9619: LD_ADDR_VAR 0 5
9623: PUSH
9624: LD_VAR 0 1
9628: PPUSH
9629: CALL_OW 274
9633: PPUSH
9634: LD_INT 3
9636: PPUSH
9637: CALL_OW 275
9641: ST_TO_ADDR
// if tmp2 >= 200 then
9642: LD_VAR 0 5
9646: PUSH
9647: LD_INT 200
9649: GREATEREQUAL
9650: IFFALSE 9682
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9652: LD_VAR 0 1
9656: PPUSH
9657: CALL_OW 274
9661: PPUSH
9662: LD_INT 3
9664: PPUSH
9665: LD_VAR 0 5
9669: PUSH
9670: LD_INT 200
9672: MINUS
9673: PPUSH
9674: CALL_OW 277
// break ;
9678: GO 9704
// end else
9680: GO 9702
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9682: LD_VAR 0 1
9686: PPUSH
9687: CALL_OW 274
9691: PPUSH
9692: LD_INT 3
9694: PPUSH
9695: LD_INT 0
9697: PPUSH
9698: CALL_OW 277
// end ; end ;
9702: GO 9616
9704: POP
9705: POP
// end ; if dec2 = 4 then
9706: LD_VAR 0 3
9710: PUSH
9711: LD_INT 4
9713: EQUAL
9714: IFFALSE 9959
// begin if dec1 = 3 then
9716: LD_VAR 0 2
9720: PUSH
9721: LD_INT 3
9723: EQUAL
9724: IFFALSE 9959
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9726: LD_EXP 1
9730: PPUSH
9731: LD_STRING D3Kc1-JMM-1
9733: PPUSH
9734: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9738: LD_EXP 25
9742: PPUSH
9743: LD_STRING D3Kc1-Kurt-1
9745: PPUSH
9746: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9750: LD_EXP 1
9754: PPUSH
9755: LD_STRING D3Kc1-JMM-2
9757: PPUSH
9758: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9762: LD_EXP 25
9766: PPUSH
9767: LD_STRING D3Kc1-Kurt-2
9769: PPUSH
9770: CALL_OW 88
// askSiberite = 1 ;
9774: LD_ADDR_EXP 33
9778: PUSH
9779: LD_INT 1
9781: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9782: LD_ADDR_VAR 0 2
9786: PUSH
9787: LD_STRING Q2b
9789: PPUSH
9790: LD_INT 1
9792: PUSH
9793: LD_INT 2
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 98
9808: ST_TO_ADDR
// if dec2 = 1 then
9809: LD_VAR 0 3
9813: PUSH
9814: LD_INT 1
9816: EQUAL
9817: IFFALSE 9851
// begin Say ( JMM , D4a-JMM-1 ) ;
9819: LD_EXP 1
9823: PPUSH
9824: LD_STRING D4a-JMM-1
9826: PPUSH
9827: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9831: LD_EXP 25
9835: PPUSH
9836: LD_STRING D4b-Kurt-1
9838: PPUSH
9839: CALL_OW 88
// warWithLegion = 1 ;
9843: LD_ADDR_EXP 31
9847: PUSH
9848: LD_INT 1
9850: ST_TO_ADDR
// end ; if dec2 = 2 then
9851: LD_VAR 0 3
9855: PUSH
9856: LD_INT 2
9858: EQUAL
9859: IFFALSE 9893
// begin Say ( JMM , D4b-JMM-1 ) ;
9861: LD_EXP 1
9865: PPUSH
9866: LD_STRING D4b-JMM-1
9868: PPUSH
9869: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9873: LD_EXP 25
9877: PPUSH
9878: LD_STRING D4b-Kurt-1
9880: PPUSH
9881: CALL_OW 88
// warWithLegion = 1 ;
9885: LD_ADDR_EXP 31
9889: PUSH
9890: LD_INT 1
9892: ST_TO_ADDR
// end ; if dec2 = 3 then
9893: LD_VAR 0 3
9897: PUSH
9898: LD_INT 3
9900: EQUAL
9901: IFFALSE 9959
// begin Say ( JMM , D4c-JMM-1 ) ;
9903: LD_EXP 1
9907: PPUSH
9908: LD_STRING D4c-JMM-1
9910: PPUSH
9911: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9915: LD_EXP 25
9919: PPUSH
9920: LD_STRING D4c-Kurt-1
9922: PPUSH
9923: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9927: LD_EXP 1
9931: PPUSH
9932: LD_STRING D4c-JMM-2
9934: PPUSH
9935: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9939: LD_EXP 25
9943: PPUSH
9944: LD_STRING D4c-Kurt-2
9946: PPUSH
9947: CALL_OW 88
// fakeInfo = 1 ;
9951: LD_ADDR_EXP 32
9955: PUSH
9956: LD_INT 1
9958: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9959: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9963: LD_INT 8
9965: PPUSH
9966: LD_INT 8
9968: PPUSH
9969: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9973: LD_EXP 25
9977: PPUSH
9978: LD_EXP 26
9982: PPUSH
9983: CALL_OW 120
// wait ( 0 0$1 ) ;
9987: LD_INT 35
9989: PPUSH
9990: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9994: LD_EXP 26
9998: PPUSH
9999: LD_INT 4
10001: PPUSH
10002: CALL_OW 113
// wait ( 0 0$6 ) ;
10006: LD_INT 210
10008: PPUSH
10009: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10013: LD_EXP 25
10017: PPUSH
10018: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10022: LD_EXP 26
10026: PPUSH
10027: CALL_OW 64
// end ; end ;
10031: PPOPN 8
10033: END
// every 0 0$10 trigger warWithLegion = 1 do
10034: LD_EXP 31
10038: PUSH
10039: LD_INT 1
10041: EQUAL
10042: IFFALSE 10051
10044: GO 10046
10046: DISABLE
// PrepareAttackLegion ;
10047: CALL 5047 0 0
10051: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10052: LD_EXP 15
10056: PPUSH
10057: CALL_OW 305
10061: PUSH
10062: LD_EXP 15
10066: PPUSH
10067: LD_INT 1
10069: PPUSH
10070: CALL_OW 289
10074: NOT
10075: AND
10076: PUSH
10077: LD_EXP 15
10081: PPUSH
10082: LD_INT 2
10084: PPUSH
10085: CALL_OW 289
10089: NOT
10090: AND
10091: PUSH
10092: LD_EXP 15
10096: PPUSH
10097: LD_INT 3
10099: PPUSH
10100: CALL_OW 289
10104: NOT
10105: AND
10106: IFFALSE 10123
10108: GO 10110
10110: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10111: LD_EXP 15
10115: PPUSH
10116: LD_INT 4
10118: PPUSH
10119: CALL_OW 235
10123: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10124: LD_EXP 16
10128: PPUSH
10129: CALL_OW 305
10133: PUSH
10134: LD_EXP 16
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL_OW 289
10146: NOT
10147: AND
10148: PUSH
10149: LD_EXP 16
10153: PPUSH
10154: LD_INT 2
10156: PPUSH
10157: CALL_OW 289
10161: NOT
10162: AND
10163: PUSH
10164: LD_EXP 16
10168: PPUSH
10169: LD_INT 3
10171: PPUSH
10172: CALL_OW 289
10176: NOT
10177: AND
10178: IFFALSE 10195
10180: GO 10182
10182: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10183: LD_EXP 16
10187: PPUSH
10188: LD_INT 4
10190: PPUSH
10191: CALL_OW 235
10195: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10196: LD_EXP 17
10200: PPUSH
10201: CALL_OW 305
10205: PUSH
10206: LD_EXP 17
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 289
10218: NOT
10219: AND
10220: PUSH
10221: LD_EXP 17
10225: PPUSH
10226: LD_INT 2
10228: PPUSH
10229: CALL_OW 289
10233: NOT
10234: AND
10235: PUSH
10236: LD_EXP 17
10240: PPUSH
10241: LD_INT 3
10243: PPUSH
10244: CALL_OW 289
10248: NOT
10249: AND
10250: IFFALSE 10267
10252: GO 10254
10254: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10255: LD_EXP 17
10259: PPUSH
10260: LD_INT 4
10262: PPUSH
10263: CALL_OW 235
10267: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10268: LD_EXP 18
10272: PPUSH
10273: CALL_OW 305
10277: PUSH
10278: LD_EXP 18
10282: PPUSH
10283: LD_INT 1
10285: PPUSH
10286: CALL_OW 289
10290: NOT
10291: AND
10292: PUSH
10293: LD_EXP 18
10297: PPUSH
10298: LD_INT 2
10300: PPUSH
10301: CALL_OW 289
10305: NOT
10306: AND
10307: PUSH
10308: LD_EXP 18
10312: PPUSH
10313: LD_INT 3
10315: PPUSH
10316: CALL_OW 289
10320: NOT
10321: AND
10322: IFFALSE 10339
10324: GO 10326
10326: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10327: LD_EXP 18
10331: PPUSH
10332: LD_INT 4
10334: PPUSH
10335: CALL_OW 235
10339: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10340: LD_EXP 19
10344: PPUSH
10345: CALL_OW 305
10349: PUSH
10350: LD_EXP 19
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 289
10362: NOT
10363: AND
10364: PUSH
10365: LD_EXP 19
10369: PPUSH
10370: LD_INT 2
10372: PPUSH
10373: CALL_OW 289
10377: NOT
10378: AND
10379: PUSH
10380: LD_EXP 19
10384: PPUSH
10385: LD_INT 3
10387: PPUSH
10388: CALL_OW 289
10392: NOT
10393: AND
10394: PUSH
10395: LD_EXP 19
10399: PPUSH
10400: LD_INT 2
10402: PPUSH
10403: CALL_OW 289
10407: NOT
10408: AND
10409: IFFALSE 10426
10411: GO 10413
10413: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10414: LD_EXP 19
10418: PPUSH
10419: LD_INT 4
10421: PPUSH
10422: CALL_OW 235
10426: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10427: LD_EXP 20
10431: PPUSH
10432: CALL_OW 305
10436: PUSH
10437: LD_EXP 20
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: CALL_OW 289
10449: NOT
10450: AND
10451: PUSH
10452: LD_EXP 20
10456: PPUSH
10457: LD_INT 2
10459: PPUSH
10460: CALL_OW 289
10464: NOT
10465: AND
10466: PUSH
10467: LD_EXP 20
10471: PPUSH
10472: LD_INT 3
10474: PPUSH
10475: CALL_OW 289
10479: NOT
10480: AND
10481: IFFALSE 10498
10483: GO 10485
10485: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10486: LD_EXP 20
10490: PPUSH
10491: LD_INT 4
10493: PPUSH
10494: CALL_OW 235
10498: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10499: LD_EXP 21
10503: PPUSH
10504: CALL_OW 305
10508: PUSH
10509: LD_EXP 21
10513: PPUSH
10514: LD_INT 1
10516: PPUSH
10517: CALL_OW 289
10521: NOT
10522: AND
10523: PUSH
10524: LD_EXP 21
10528: PPUSH
10529: LD_INT 2
10531: PPUSH
10532: CALL_OW 289
10536: NOT
10537: AND
10538: PUSH
10539: LD_EXP 21
10543: PPUSH
10544: LD_INT 3
10546: PPUSH
10547: CALL_OW 289
10551: NOT
10552: AND
10553: IFFALSE 10570
10555: GO 10557
10557: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10558: LD_EXP 21
10562: PPUSH
10563: LD_INT 4
10565: PPUSH
10566: CALL_OW 235
10570: END
// every 0 0$1 do var i ;
10571: GO 10573
10573: DISABLE
10574: LD_INT 0
10576: PPUSH
// begin enable ;
10577: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10578: LD_ADDR_VAR 0 1
10582: PUSH
10583: LD_INT 22
10585: PUSH
10586: LD_INT 4
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PPUSH
10593: CALL_OW 69
10597: PUSH
10598: FOR_IN
10599: IFFALSE 10638
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10601: LD_VAR 0 1
10605: PPUSH
10606: LD_INT 4
10608: PPUSH
10609: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10613: LD_VAR 0 1
10617: PPUSH
10618: LD_INT 4
10620: PPUSH
10621: CALL_OW 308
10625: IFFALSE 10636
// RemoveUnit ( i ) ;
10627: LD_VAR 0 1
10631: PPUSH
10632: CALL_OW 64
// end ;
10636: GO 10598
10638: POP
10639: POP
// end ;
10640: PPOPN 1
10642: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10643: LD_EXP 28
10647: PUSH
10648: LD_INT 1
10650: EQUAL
10651: IFFALSE 11090
10653: GO 10655
10655: DISABLE
10656: LD_INT 0
10658: PPUSH
10659: PPUSH
10660: PPUSH
// begin enable ;
10661: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10662: LD_ADDR_VAR 0 2
10666: PUSH
10667: LD_INT 12
10669: PPUSH
10670: LD_INT 22
10672: PUSH
10673: LD_INT 3
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 21
10682: PUSH
10683: LD_INT 2
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 70
10698: ST_TO_ADDR
// for i in enemyVehs do
10699: LD_ADDR_VAR 0 1
10703: PUSH
10704: LD_VAR 0 2
10708: PUSH
10709: FOR_IN
10710: IFFALSE 11088
// begin if See ( 1 , i ) then
10712: LD_INT 1
10714: PPUSH
10715: LD_VAR 0 1
10719: PPUSH
10720: CALL_OW 292
10724: IFFALSE 11086
// begin disable ;
10726: DISABLE
// DialogueOn ;
10727: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10731: LD_VAR 0 1
10735: PPUSH
10736: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10740: LD_INT 22
10742: PUSH
10743: LD_INT 1
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: LD_INT 26
10752: PUSH
10753: LD_INT 1
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 25
10785: PUSH
10786: LD_INT 3
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 25
10795: PUSH
10796: LD_INT 4
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 25
10805: PUSH
10806: LD_INT 5
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 8
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: LIST
10836: PPUSH
10837: CALL_OW 69
10841: PPUSH
10842: LD_STRING DT1-Sol1-1
10844: PPUSH
10845: LD_STRING DT1-FSol1-1
10847: PPUSH
10848: CALL 13303 0 3
// dec = ShowQuery2 ;
10852: LD_ADDR_VAR 0 3
10856: PUSH
10857: CALL 13913 0 0
10861: ST_TO_ADDR
// if dec = 1 then
10862: LD_VAR 0 3
10866: PUSH
10867: LD_INT 1
10869: EQUAL
10870: IFFALSE 10976
// begin Say ( JMM , D2-JMM-1 ) ;
10872: LD_EXP 1
10876: PPUSH
10877: LD_STRING D2-JMM-1
10879: PPUSH
10880: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10884: LD_EXP 22
10888: PPUSH
10889: LD_STRING D2-Pow-1
10891: PPUSH
10892: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10896: LD_EXP 1
10900: PPUSH
10901: LD_STRING D2a-JMM-1
10903: PPUSH
10904: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10908: LD_EXP 22
10912: PPUSH
10913: LD_STRING D2a-Pow-1
10915: PPUSH
10916: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10920: LD_EXP 1
10924: PPUSH
10925: LD_STRING D2a-JMM-2
10927: PPUSH
10928: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10932: LD_EXP 22
10936: PPUSH
10937: LD_STRING D2a-Pow-2
10939: PPUSH
10940: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10944: LD_EXP 1
10948: PPUSH
10949: LD_STRING D2a-JMM-3
10951: PPUSH
10952: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10956: LD_EXP 22
10960: PPUSH
10961: LD_STRING D2a-Pow-3
10963: PPUSH
10964: CALL_OW 94
// secondPass = 2 ;
10968: LD_ADDR_EXP 28
10972: PUSH
10973: LD_INT 2
10975: ST_TO_ADDR
// end ; if dec = 2 then
10976: LD_VAR 0 3
10980: PUSH
10981: LD_INT 2
10983: EQUAL
10984: IFFALSE 11078
// begin Say ( JMM , D2-JMM-1 ) ;
10986: LD_EXP 1
10990: PPUSH
10991: LD_STRING D2-JMM-1
10993: PPUSH
10994: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10998: LD_EXP 22
11002: PPUSH
11003: LD_STRING D2-Pow-1
11005: PPUSH
11006: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11010: LD_EXP 1
11014: PPUSH
11015: LD_STRING D2b-JMM-1
11017: PPUSH
11018: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11022: LD_EXP 22
11026: PPUSH
11027: LD_STRING D2b-Pow-1
11029: PPUSH
11030: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11034: LD_EXP 1
11038: PPUSH
11039: LD_STRING D2c-JMM-1
11041: PPUSH
11042: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11046: LD_EXP 22
11050: PPUSH
11051: LD_STRING D2c-Pow-1
11053: PPUSH
11054: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11058: LD_EXP 1
11062: PPUSH
11063: LD_STRING D2c-JMM-2
11065: PPUSH
11066: CALL_OW 88
// secondPass = 2 ;
11070: LD_ADDR_EXP 28
11074: PUSH
11075: LD_INT 2
11077: ST_TO_ADDR
// end ; DialogueOff ;
11078: CALL_OW 7
// exit ;
11082: POP
11083: POP
11084: GO 11090
// end ; end ;
11086: GO 10709
11088: POP
11089: POP
// end ;
11090: PPOPN 3
11092: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11093: LD_EXP 29
11097: PUSH
11098: LD_INT 1
11100: EQUAL
11101: IFFALSE 11334
11103: GO 11105
11105: DISABLE
11106: LD_INT 0
11108: PPUSH
11109: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11110: LD_ADDR_VAR 0 2
11114: PUSH
11115: LD_INT 11
11117: PPUSH
11118: LD_INT 22
11120: PUSH
11121: LD_INT 3
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 24
11130: PUSH
11131: LD_INT 250
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 70
11146: ST_TO_ADDR
// enable ;
11147: ENABLE
// for i in vehicles do
11148: LD_ADDR_VAR 0 1
11152: PUSH
11153: LD_VAR 0 2
11157: PUSH
11158: FOR_IN
11159: IFFALSE 11332
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11161: LD_INT 1
11163: PPUSH
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL_OW 292
11173: PUSH
11174: LD_EXP 29
11178: PUSH
11179: LD_INT 1
11181: EQUAL
11182: AND
11183: PUSH
11184: LD_EXP 30
11188: PUSH
11189: LD_INT 4
11191: LESSEQUAL
11192: AND
11193: IFFALSE 11330
// begin disable ;
11195: DISABLE
// DialogueOn ;
11196: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11200: LD_INT 22
11202: PUSH
11203: LD_INT 1
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 26
11212: PUSH
11213: LD_INT 1
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 2
11222: PUSH
11223: LD_INT 25
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 25
11235: PUSH
11236: LD_INT 2
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 25
11245: PUSH
11246: LD_INT 3
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 25
11255: PUSH
11256: LD_INT 4
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 25
11265: PUSH
11266: LD_INT 5
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 8
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: PPUSH
11297: CALL_OW 69
11301: PPUSH
11302: LD_STRING DT1-Sol1-1
11304: PPUSH
11305: LD_STRING DT1-FSol1-1
11307: PPUSH
11308: CALL 13303 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11312: LD_EXP 1
11316: PPUSH
11317: LD_STRING DT1-JMM-1
11319: PPUSH
11320: CALL_OW 88
// DialogueOff ;
11324: CALL_OW 7
// break ;
11328: GO 11332
// end ; end ;
11330: GO 11158
11332: POP
11333: POP
// end ;
11334: PPOPN 2
11336: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11337: LD_EXP 29
11341: PUSH
11342: LD_INT 1
11344: EQUAL
11345: PUSH
11346: LD_INT 11
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 3
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 24
11361: PUSH
11362: LD_INT 251
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 2
11371: PUSH
11372: LD_INT 21
11374: PUSH
11375: LD_INT 2
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 21
11384: PUSH
11385: LD_INT 1
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 70
11406: PUSH
11407: LD_INT 0
11409: EQUAL
11410: AND
11411: PUSH
11412: LD_EXP 30
11416: PUSH
11417: LD_INT 3
11419: PUSH
11420: LD_INT 3
11422: PUSH
11423: LD_INT 4
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: LD_OWVAR 67
11435: ARRAY
11436: LESSEQUAL
11437: AND
11438: PUSH
11439: LD_EXP 30
11443: PUSH
11444: LD_INT 5
11446: GREATER
11447: AND
11448: IFFALSE 11605
11450: GO 11452
11452: DISABLE
// begin vehicleTeleported = 2 ;
11453: LD_ADDR_EXP 29
11457: PUSH
11458: LD_INT 2
11460: ST_TO_ADDR
// DialogueOn ;
11461: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11465: LD_EXP 1
11469: PPUSH
11470: LD_STRING DT1a-JMM-1
11472: PPUSH
11473: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11477: LD_INT 22
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 26
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: LD_INT 25
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 25
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 25
11522: PUSH
11523: LD_INT 3
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 4
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 5
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 8
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: LIST
11573: PPUSH
11574: CALL_OW 69
11578: PPUSH
11579: LD_STRING DT1a-Sol1-1
11581: PPUSH
11582: LD_STRING DT1a-FSol1-1
11584: PPUSH
11585: CALL 13303 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11589: LD_EXP 1
11593: PPUSH
11594: LD_STRING DT1a-JMM-2
11596: PPUSH
11597: CALL_OW 88
// DialogueOff ;
11601: CALL_OW 7
// end ;
11605: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11606: LD_EXP 29
11610: PUSH
11611: LD_INT 3
11613: EQUAL
11614: PUSH
11615: LD_EXP 30
11619: PUSH
11620: LD_INT 4
11622: GREATER
11623: AND
11624: IFFALSE 11835
11626: GO 11628
11628: DISABLE
11629: LD_INT 0
11631: PPUSH
11632: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11633: LD_ADDR_VAR 0 2
11637: PUSH
11638: LD_INT 11
11640: PPUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 24
11653: PUSH
11654: LD_INT 250
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PPUSH
11665: CALL_OW 70
11669: ST_TO_ADDR
// enable ;
11670: ENABLE
// for i in vehicles do
11671: LD_ADDR_VAR 0 1
11675: PUSH
11676: LD_VAR 0 2
11680: PUSH
11681: FOR_IN
11682: IFFALSE 11833
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11684: LD_INT 1
11686: PPUSH
11687: LD_VAR 0 1
11691: PPUSH
11692: CALL_OW 292
11696: PUSH
11697: LD_EXP 29
11701: PUSH
11702: LD_INT 3
11704: EQUAL
11705: AND
11706: IFFALSE 11831
// begin disable ;
11708: DISABLE
// DialogueOn ;
11709: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11713: LD_INT 22
11715: PUSH
11716: LD_INT 1
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 26
11725: PUSH
11726: LD_INT 1
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: LD_INT 25
11738: PUSH
11739: LD_INT 1
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 25
11748: PUSH
11749: LD_INT 2
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 25
11758: PUSH
11759: LD_INT 3
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 25
11768: PUSH
11769: LD_INT 4
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 25
11778: PUSH
11779: LD_INT 5
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 25
11788: PUSH
11789: LD_INT 8
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: PPUSH
11810: CALL_OW 69
11814: PPUSH
11815: LD_STRING DT2-Sol1-1
11817: PPUSH
11818: LD_STRING DT2-FSol1-1
11820: PPUSH
11821: CALL 13303 0 3
// DialogueOff ;
11825: CALL_OW 7
// break ;
11829: GO 11833
// end ; end ;
11831: GO 11681
11833: POP
11834: POP
// end ;
11835: PPOPN 2
11837: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11838: LD_EXP 29
11842: PUSH
11843: LD_INT 3
11845: EQUAL
11846: PUSH
11847: LD_INT 11
11849: PPUSH
11850: LD_INT 22
11852: PUSH
11853: LD_INT 3
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 24
11862: PUSH
11863: LD_INT 251
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 2
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 2
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 21
11885: PUSH
11886: LD_INT 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 70
11907: PUSH
11908: LD_INT 0
11910: EQUAL
11911: AND
11912: PUSH
11913: LD_EXP 30
11917: PUSH
11918: LD_INT 6
11920: PUSH
11921: LD_INT 6
11923: PUSH
11924: LD_INT 8
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: LIST
11931: PUSH
11932: LD_OWVAR 67
11936: ARRAY
11937: EQUAL
11938: AND
11939: IFFALSE 12096
11941: GO 11943
11943: DISABLE
// begin vehicleTeleported = 4 ;
11944: LD_ADDR_EXP 29
11948: PUSH
11949: LD_INT 4
11951: ST_TO_ADDR
// DialogueOn ;
11952: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11956: LD_EXP 1
11960: PPUSH
11961: LD_STRING DT2a-JMM-1
11963: PPUSH
11964: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11968: LD_INT 22
11970: PUSH
11971: LD_INT 1
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 26
11980: PUSH
11981: LD_INT 1
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 25
11993: PUSH
11994: LD_INT 1
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 25
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 3
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 25
12023: PUSH
12024: LD_INT 4
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 25
12033: PUSH
12034: LD_INT 5
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 25
12043: PUSH
12044: LD_INT 8
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 69
12069: PPUSH
12070: LD_STRING DT2a-Sol1-1
12072: PPUSH
12073: LD_STRING DT2a-FSol1-1
12075: PPUSH
12076: CALL 13303 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12080: LD_EXP 3
12084: PPUSH
12085: LD_STRING DT2a-Don-1
12087: PPUSH
12088: CALL_OW 88
// DialogueOff ;
12092: CALL_OW 7
// end ;
12096: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12097: LD_INT 1
12099: PPUSH
12100: LD_INT 45
12102: PPUSH
12103: LD_INT 74
12105: PPUSH
12106: CALL_OW 293
12110: IFFALSE 12278
12112: GO 12114
12114: DISABLE
// begin DialogueOn ;
12115: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12119: LD_INT 36
12121: PPUSH
12122: LD_INT 55
12124: PPUSH
12125: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12129: LD_INT 22
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 26
12141: PUSH
12142: LD_INT 1
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: LD_INT 25
12154: PUSH
12155: LD_INT 1
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 25
12164: PUSH
12165: LD_INT 2
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 25
12174: PUSH
12175: LD_INT 3
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 25
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 25
12194: PUSH
12195: LD_INT 5
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 25
12204: PUSH
12205: LD_INT 8
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PPUSH
12226: CALL_OW 69
12230: PPUSH
12231: LD_STRING D5-Sol1-1
12233: PPUSH
12234: LD_STRING D5-FSol1-
12236: PPUSH
12237: CALL 13303 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12241: LD_EXP 31
12245: PUSH
12246: LD_INT 1
12248: EQUAL
12249: PUSH
12250: LD_EXP 3
12254: PPUSH
12255: CALL_OW 300
12259: AND
12260: IFFALSE 12274
// Say ( Donaldson , D5-Don-1 ) ;
12262: LD_EXP 3
12266: PPUSH
12267: LD_STRING D5-Don-1
12269: PPUSH
12270: CALL_OW 88
// DialogueOff ;
12274: CALL_OW 7
// end ;
12278: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12279: LD_INT 1
12281: PPUSH
12282: LD_INT 10
12284: PPUSH
12285: CALL_OW 292
12289: PUSH
12290: LD_INT 1
12292: PPUSH
12293: LD_INT 137
12295: PPUSH
12296: CALL_OW 292
12300: OR
12301: IFFALSE 12445
12303: GO 12305
12305: DISABLE
// begin DialogueOn ;
12306: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12310: LD_INT 22
12312: PUSH
12313: LD_INT 1
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 26
12322: PUSH
12323: LD_INT 1
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 1
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 25
12345: PUSH
12346: LD_INT 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 25
12355: PUSH
12356: LD_INT 3
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 25
12365: PUSH
12366: LD_INT 4
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 25
12375: PUSH
12376: LD_INT 5
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 25
12385: PUSH
12386: LD_INT 8
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: PPUSH
12407: CALL_OW 69
12411: PPUSH
12412: LD_STRING DT3-Sol1-1
12414: PPUSH
12415: LD_STRING DT3-FSol1-1
12417: PPUSH
12418: CALL 13303 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12422: LD_EXP 1
12426: PPUSH
12427: LD_STRING DT3-JMM-1
12429: PPUSH
12430: CALL_OW 88
// DialogueOff ;
12434: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12438: LD_STRING M2
12440: PPUSH
12441: CALL_OW 337
// end ;
12445: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12446: LD_EXP 43
12450: PUSH
12451: LD_INT 0
12453: EQUAL
12454: IFFALSE 12537
12456: GO 12458
12458: DISABLE
12459: LD_INT 0
12461: PPUSH
// begin enable ;
12462: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 10
12470: PPUSH
12471: LD_INT 22
12473: PUSH
12474: LD_INT 3
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 21
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 58
12493: PUSH
12494: EMPTY
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL_OW 70
12506: PUSH
12507: FOR_IN
12508: IFFALSE 12535
// if GetLives ( i ) < 1000 then
12510: LD_VAR 0 1
12514: PPUSH
12515: CALL_OW 256
12519: PUSH
12520: LD_INT 1000
12522: LESS
12523: IFFALSE 12533
// ruEscape = 1 ;
12525: LD_ADDR_EXP 43
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
12533: GO 12507
12535: POP
12536: POP
// end ;
12537: PPOPN 1
12539: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12540: LD_INT 3
12542: PPUSH
12543: CALL_OW 303
12547: PUSH
12548: LD_INT 4
12550: PPUSH
12551: CALL_OW 303
12555: OR
12556: PUSH
12557: LD_INT 22
12559: PPUSH
12560: LD_INT 22
12562: PUSH
12563: LD_INT 1
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PPUSH
12570: CALL_OW 70
12574: PUSH
12575: LD_INT 0
12577: GREATER
12578: OR
12579: PUSH
12580: LD_EXP 43
12584: PUSH
12585: LD_INT 1
12587: EQUAL
12588: OR
12589: IFFALSE 12820
12591: GO 12593
12593: DISABLE
12594: LD_INT 0
12596: PPUSH
12597: PPUSH
12598: PPUSH
// begin ruAI = 0 ;
12599: LD_ADDR_EXP 42
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: LD_INT 10
12614: PPUSH
12615: LD_INT 22
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 21
12627: PUSH
12628: LD_INT 2
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 58
12637: PUSH
12638: EMPTY
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PPUSH
12646: CALL_OW 70
12650: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12651: LD_EXP 35
12655: PPUSH
12656: CALL_OW 122
// wait ( 0 0$1 ) ;
12660: LD_INT 35
12662: PPUSH
12663: CALL_OW 67
// DialogueOn ;
12667: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12671: LD_EXP 1
12675: PPUSH
12676: LD_STRING D6-JMM-1
12678: PPUSH
12679: CALL_OW 88
// DialogueOff ;
12683: CALL_OW 7
// if vehs > 0 then
12687: LD_VAR 0 3
12691: PUSH
12692: LD_INT 0
12694: GREATER
12695: IFFALSE 12765
// for i := 1 to RuScientists do
12697: LD_ADDR_VAR 0 1
12701: PUSH
12702: DOUBLE
12703: LD_INT 1
12705: DEC
12706: ST_TO_ADDR
12707: LD_EXP 35
12711: PUSH
12712: FOR_TO
12713: IFFALSE 12761
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12715: LD_EXP 35
12719: PUSH
12720: LD_VAR 0 1
12724: ARRAY
12725: PPUSH
12726: LD_INT 3
12728: PUSH
12729: LD_INT 60
12731: PUSH
12732: EMPTY
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 72
12743: PPUSH
12744: LD_VAR 0 3
12748: PUSH
12749: LD_VAR 0 1
12753: ARRAY
12754: PPUSH
12755: CALL_OW 120
12759: GO 12712
12761: POP
12762: POP
12763: GO 12820
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12765: LD_EXP 35
12769: PUSH
12770: LD_VAR 0 1
12774: ARRAY
12775: PPUSH
12776: LD_INT 3
12778: PUSH
12779: LD_INT 60
12781: PUSH
12782: EMPTY
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 72
12793: PPUSH
12794: LD_INT 13
12796: PUSH
12797: LD_INT 14
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 1
12806: PPUSH
12807: LD_INT 2
12809: PPUSH
12810: CALL_OW 12
12814: ARRAY
12815: PPUSH
12816: CALL_OW 113
// end ;
12820: PPOPN 3
12822: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
12823: LD_EXP 42
12827: PUSH
12828: LD_INT 0
12830: EQUAL
12831: IFFALSE 13203
12833: GO 12835
12835: DISABLE
12836: LD_INT 0
12838: PPUSH
12839: PPUSH
12840: PPUSH
12841: PPUSH
// begin enable ;
12842: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
12843: LD_EXP 35
12847: PPUSH
12848: LD_INT 2
12850: PUSH
12851: LD_INT 95
12853: PUSH
12854: LD_INT 13
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 95
12863: PUSH
12864: LD_INT 14
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: PPUSH
12876: CALL_OW 72
12880: PUSH
12881: LD_INT 33
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 23
12893: PUSH
12894: LD_INT 3
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 2
12903: PUSH
12904: LD_INT 95
12906: PUSH
12907: LD_INT 13
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 95
12916: PUSH
12917: LD_INT 14
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: PPUSH
12934: CALL_OW 69
12938: OR
12939: IFFALSE 13128
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12941: LD_ADDR_VAR 0 2
12945: PUSH
12946: LD_EXP 35
12950: PPUSH
12951: LD_INT 2
12953: PUSH
12954: LD_INT 95
12956: PUSH
12957: LD_INT 13
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 95
12966: PUSH
12967: LD_INT 14
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: PPUSH
12979: CALL_OW 72
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: ST_TO_ADDR
// if not unit then
12988: LD_VAR 0 2
12992: NOT
12993: IFFALSE 13128
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12995: LD_ADDR_VAR 0 4
12999: PUSH
13000: LD_INT 2
13002: PUSH
13003: LD_INT 95
13005: PUSH
13006: LD_INT 13
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 95
13015: PUSH
13016: LD_INT 14
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 33
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 23
13040: PUSH
13041: LD_INT 3
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 69
13057: ST_TO_ADDR
// if not tmp then
13058: LD_VAR 0 4
13062: NOT
13063: IFFALSE 13067
// exit ;
13065: GO 13203
// for i in tmp do
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: LD_VAR 0 4
13076: PUSH
13077: FOR_IN
13078: IFFALSE 13126
// if IsDrivenBy ( i ) in RuScientists then
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 311
13089: PUSH
13090: LD_EXP 35
13094: IN
13095: IFFALSE 13124
// begin unit := IsDrivenBy ( i ) ;
13097: LD_ADDR_VAR 0 2
13101: PUSH
13102: LD_VAR 0 1
13106: PPUSH
13107: CALL_OW 311
13111: ST_TO_ADDR
// veh := i ;
13112: LD_ADDR_VAR 0 3
13116: PUSH
13117: LD_VAR 0 1
13121: ST_TO_ADDR
// break ;
13122: GO 13126
// end ;
13124: GO 13077
13126: POP
13127: POP
// end ; end ; if not unit then
13128: LD_VAR 0 2
13132: NOT
13133: IFFALSE 13137
// exit ;
13135: GO 13203
// RuScientists = RuScientists diff unit ;
13137: LD_ADDR_EXP 35
13141: PUSH
13142: LD_EXP 35
13146: PUSH
13147: LD_VAR 0 2
13151: DIFF
13152: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13153: LD_VAR 0 2
13157: PPUSH
13158: CALL_OW 64
// if veh then
13162: LD_VAR 0 3
13166: IFFALSE 13203
// begin if GetWeapon ( veh ) = 49 then
13168: LD_VAR 0 3
13172: PPUSH
13173: CALL_OW 264
13177: PUSH
13178: LD_INT 49
13180: EQUAL
13181: IFFALSE 13194
// KillUnit ( veh ) else
13183: LD_VAR 0 3
13187: PPUSH
13188: CALL_OW 66
13192: GO 13203
// RemoveUnit ( veh ) ;
13194: LD_VAR 0 3
13198: PPUSH
13199: CALL_OW 64
// end ; end ; end_of_file
13203: PPOPN 4
13205: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13206: LD_INT 0
13208: PPUSH
13209: PPUSH
// if exist_mode then
13210: LD_VAR 0 2
13214: IFFALSE 13233
// unit := CreateCharacter ( ident ) else
13216: LD_ADDR_VAR 0 4
13220: PUSH
13221: LD_VAR 0 1
13225: PPUSH
13226: CALL_OW 34
13230: ST_TO_ADDR
13231: GO 13248
// unit := NewCharacter ( ident ) ;
13233: LD_ADDR_VAR 0 4
13237: PUSH
13238: LD_VAR 0 1
13242: PPUSH
13243: CALL_OW 25
13247: ST_TO_ADDR
// result := unit ;
13248: LD_ADDR_VAR 0 3
13252: PUSH
13253: LD_VAR 0 4
13257: ST_TO_ADDR
// end ;
13258: LD_VAR 0 3
13262: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13263: LD_INT 0
13265: PPUSH
13266: PPUSH
// for i in charactersList do
13267: LD_ADDR_VAR 0 4
13271: PUSH
13272: LD_VAR 0 1
13276: PUSH
13277: FOR_IN
13278: IFFALSE 13296
// SaveCharacters ( i , ident ) ;
13280: LD_VAR 0 4
13284: PPUSH
13285: LD_VAR 0 2
13289: PPUSH
13290: CALL_OW 38
13294: GO 13277
13296: POP
13297: POP
// end ;
13298: LD_VAR 0 3
13302: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13303: LD_INT 0
13305: PPUSH
13306: PPUSH
13307: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13308: LD_ADDR_VAR 0 1
13312: PUSH
13313: LD_VAR 0 1
13317: PUSH
13318: LD_EXP 1
13322: PUSH
13323: LD_EXP 7
13327: PUSH
13328: LD_EXP 3
13332: PUSH
13333: LD_EXP 4
13337: PUSH
13338: LD_EXP 5
13342: PUSH
13343: LD_EXP 2
13347: PUSH
13348: LD_EXP 12
13352: PUSH
13353: LD_EXP 13
13357: PUSH
13358: LD_EXP 9
13362: PUSH
13363: LD_EXP 11
13367: PUSH
13368: LD_EXP 6
13372: PUSH
13373: LD_EXP 8
13377: PUSH
13378: LD_EXP 10
13382: PUSH
13383: LD_EXP 22
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: DIFF
13404: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13405: LD_ADDR_VAR 0 6
13409: PUSH
13410: LD_INT 1
13412: PPUSH
13413: LD_VAR 0 1
13417: PPUSH
13418: CALL_OW 12
13422: ST_TO_ADDR
// for i = 1 to characters do
13423: LD_ADDR_VAR 0 5
13427: PUSH
13428: DOUBLE
13429: LD_INT 1
13431: DEC
13432: ST_TO_ADDR
13433: LD_VAR 0 1
13437: PUSH
13438: FOR_TO
13439: IFFALSE 13549
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13441: LD_VAR 0 5
13445: PUSH
13446: LD_VAR 0 6
13450: EQUAL
13451: PUSH
13452: LD_VAR 0 1
13456: PUSH
13457: LD_VAR 0 5
13461: ARRAY
13462: PPUSH
13463: CALL_OW 258
13467: PUSH
13468: LD_INT 1
13470: EQUAL
13471: AND
13472: IFFALSE 13494
// Say ( characters [ i ] , dialogMID ) ;
13474: LD_VAR 0 1
13478: PUSH
13479: LD_VAR 0 5
13483: ARRAY
13484: PPUSH
13485: LD_VAR 0 2
13489: PPUSH
13490: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13494: LD_VAR 0 5
13498: PUSH
13499: LD_VAR 0 6
13503: EQUAL
13504: PUSH
13505: LD_VAR 0 1
13509: PUSH
13510: LD_VAR 0 5
13514: ARRAY
13515: PPUSH
13516: CALL_OW 258
13520: PUSH
13521: LD_INT 2
13523: EQUAL
13524: AND
13525: IFFALSE 13547
// Say ( characters [ i ] , dialogFID ) ;
13527: LD_VAR 0 1
13531: PUSH
13532: LD_VAR 0 5
13536: ARRAY
13537: PPUSH
13538: LD_VAR 0 3
13542: PPUSH
13543: CALL_OW 88
// end ;
13547: GO 13438
13549: POP
13550: POP
// end ;
13551: LD_VAR 0 4
13555: RET
// export function PrepareDifficulty ; var tmp ; begin
13556: LD_INT 0
13558: PPUSH
13559: PPUSH
// if Difficulty = 1 then
13560: LD_OWVAR 67
13564: PUSH
13565: LD_INT 1
13567: EQUAL
13568: IFFALSE 13586
// begin RuSolMinLevel = 8 ;
13570: LD_ADDR_EXP 37
13574: PUSH
13575: LD_INT 8
13577: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13578: LD_ADDR_EXP 38
13582: PUSH
13583: LD_INT 10
13585: ST_TO_ADDR
// end ; if Difficulty = 2 then
13586: LD_OWVAR 67
13590: PUSH
13591: LD_INT 2
13593: EQUAL
13594: IFFALSE 13688
// begin RuSolMinLevel = 9 ;
13596: LD_ADDR_EXP 37
13600: PUSH
13601: LD_INT 9
13603: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13604: LD_ADDR_EXP 38
13608: PUSH
13609: LD_INT 10
13611: ST_TO_ADDR
// uc_nation = 3 ;
13612: LD_ADDR_OWVAR 21
13616: PUSH
13617: LD_INT 3
13619: ST_TO_ADDR
// uc_side = 3 ;
13620: LD_ADDR_OWVAR 20
13624: PUSH
13625: LD_INT 3
13627: ST_TO_ADDR
// bc_level = 10 ;
13628: LD_ADDR_OWVAR 43
13632: PUSH
13633: LD_INT 10
13635: ST_TO_ADDR
// bc_type = b_turret ;
13636: LD_ADDR_OWVAR 42
13640: PUSH
13641: LD_INT 33
13643: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13644: LD_ADDR_VAR 0 2
13648: PUSH
13649: LD_INT 86
13651: PPUSH
13652: LD_INT 34
13654: PPUSH
13655: LD_INT 2
13657: PPUSH
13658: CALL_OW 47
13662: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13663: LD_VAR 0 2
13667: PPUSH
13668: LD_INT 49
13670: PPUSH
13671: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13675: LD_INT 64
13677: PPUSH
13678: LD_INT 3
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 322
// end ; if Difficulty = 3 then
13688: LD_OWVAR 67
13692: PUSH
13693: LD_INT 3
13695: EQUAL
13696: IFFALSE 13834
// begin RuSolMinLevel = 10 ;
13698: LD_ADDR_EXP 37
13702: PUSH
13703: LD_INT 10
13705: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13706: LD_ADDR_EXP 38
13710: PUSH
13711: LD_INT 10
13713: ST_TO_ADDR
// uc_nation = 3 ;
13714: LD_ADDR_OWVAR 21
13718: PUSH
13719: LD_INT 3
13721: ST_TO_ADDR
// uc_side = 3 ;
13722: LD_ADDR_OWVAR 20
13726: PUSH
13727: LD_INT 3
13729: ST_TO_ADDR
// bc_level = 10 ;
13730: LD_ADDR_OWVAR 43
13734: PUSH
13735: LD_INT 10
13737: ST_TO_ADDR
// bc_type = b_turret ;
13738: LD_ADDR_OWVAR 42
13742: PUSH
13743: LD_INT 33
13745: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_INT 86
13753: PPUSH
13754: LD_INT 34
13756: PPUSH
13757: LD_INT 2
13759: PPUSH
13760: CALL_OW 47
13764: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13765: LD_VAR 0 2
13769: PPUSH
13770: LD_INT 49
13772: PPUSH
13773: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13777: LD_ADDR_VAR 0 2
13781: PUSH
13782: LD_INT 93
13784: PPUSH
13785: LD_INT 31
13787: PPUSH
13788: LD_INT 2
13790: PPUSH
13791: CALL_OW 47
13795: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13796: LD_VAR 0 2
13800: PPUSH
13801: LD_INT 49
13803: PPUSH
13804: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13808: LD_INT 64
13810: PPUSH
13811: LD_INT 3
13813: PPUSH
13814: LD_INT 1
13816: PPUSH
13817: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13821: LD_INT 65
13823: PPUSH
13824: LD_INT 3
13826: PPUSH
13827: LD_INT 1
13829: PPUSH
13830: CALL_OW 322
// end ; end ;
13834: LD_VAR 0 1
13838: RET
// export function ShowQuery1 ; begin
13839: LD_INT 0
13841: PPUSH
// case query ( Q1 ) of 1 :
13842: LD_STRING Q1
13844: PPUSH
13845: CALL_OW 97
13849: PUSH
13850: LD_INT 1
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13869
13858: POP
// result = 1 ; 2 :
13859: LD_ADDR_VAR 0 1
13863: PUSH
13864: LD_INT 1
13866: ST_TO_ADDR
13867: GO 13908
13869: LD_INT 2
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13888
13877: POP
// result = 2 ; 3 :
13878: LD_ADDR_VAR 0 1
13882: PUSH
13883: LD_INT 2
13885: ST_TO_ADDR
13886: GO 13908
13888: LD_INT 3
13890: DOUBLE
13891: EQUAL
13892: IFTRUE 13896
13894: GO 13907
13896: POP
// result = 3 ; end ;
13897: LD_ADDR_VAR 0 1
13901: PUSH
13902: LD_INT 3
13904: ST_TO_ADDR
13905: GO 13908
13907: POP
// end ;
13908: LD_VAR 0 1
13912: RET
// export function ShowQuery2 ; begin
13913: LD_INT 0
13915: PPUSH
// case query ( Q1a ) of 1 :
13916: LD_STRING Q1a
13918: PPUSH
13919: CALL_OW 97
13923: PUSH
13924: LD_INT 1
13926: DOUBLE
13927: EQUAL
13928: IFTRUE 13932
13930: GO 13943
13932: POP
// result = 1 ; 2 :
13933: LD_ADDR_VAR 0 1
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
13941: GO 13982
13943: LD_INT 2
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 13962
13951: POP
// result = 2 ; 3 :
13952: LD_ADDR_VAR 0 1
13956: PUSH
13957: LD_INT 2
13959: ST_TO_ADDR
13960: GO 13982
13962: LD_INT 3
13964: DOUBLE
13965: EQUAL
13966: IFTRUE 13970
13968: GO 13981
13970: POP
// result = 3 ; end ;
13971: LD_ADDR_VAR 0 1
13975: PUSH
13976: LD_INT 3
13978: ST_TO_ADDR
13979: GO 13982
13981: POP
// end ;
13982: LD_VAR 0 1
13986: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13987: LD_INT 0
13989: PPUSH
13990: PPUSH
13991: PPUSH
13992: PPUSH
13993: PPUSH
// for i = 1 to count do
13994: LD_ADDR_VAR 0 8
13998: PUSH
13999: DOUBLE
14000: LD_INT 1
14002: DEC
14003: ST_TO_ADDR
14004: LD_VAR 0 6
14008: PUSH
14009: FOR_TO
14010: IFFALSE 14091
// begin uc_side = side ;
14012: LD_ADDR_OWVAR 20
14016: PUSH
14017: LD_VAR 0 1
14021: ST_TO_ADDR
// uc_nation = nation ;
14022: LD_ADDR_OWVAR 21
14026: PUSH
14027: LD_VAR 0 2
14031: ST_TO_ADDR
// hc_gallery =  ;
14032: LD_ADDR_OWVAR 33
14036: PUSH
14037: LD_STRING 
14039: ST_TO_ADDR
// hc_name =  ;
14040: LD_ADDR_OWVAR 26
14044: PUSH
14045: LD_STRING 
14047: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14048: LD_INT 0
14050: PPUSH
14051: LD_VAR 0 5
14055: PPUSH
14056: LD_VAR 0 4
14060: PPUSH
14061: CALL_OW 380
// un = CreateHuman ;
14065: LD_ADDR_VAR 0 10
14069: PUSH
14070: CALL_OW 44
14074: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14075: LD_VAR 0 10
14079: PPUSH
14080: LD_VAR 0 3
14084: PPUSH
14085: CALL_OW 52
// end ;
14089: GO 14009
14091: POP
14092: POP
// end ;
14093: LD_VAR 0 7
14097: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14098: LD_INT 0
14100: PPUSH
14101: PPUSH
14102: PPUSH
14103: PPUSH
14104: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14105: LD_ADDR_VAR 0 8
14109: PUSH
14110: LD_INT 48
14112: PUSH
14113: LD_INT 49
14115: PUSH
14116: LD_INT 50
14118: PUSH
14119: LD_INT 20
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: LD_INT 51
14127: PUSH
14128: LD_INT 52
14130: PUSH
14131: LD_INT 69
14133: PUSH
14134: LD_INT 39
14136: PUSH
14137: LD_INT 34
14139: PUSH
14140: LD_INT 40
14142: PUSH
14143: LD_INT 53
14145: PUSH
14146: LD_INT 71
14148: PUSH
14149: LD_INT 57
14151: PUSH
14152: LD_INT 58
14154: PUSH
14155: LD_INT 44
14157: PUSH
14158: LD_INT 32
14160: PUSH
14161: LD_INT 27
14163: PUSH
14164: LD_INT 23
14166: PUSH
14167: LD_INT 33
14169: PUSH
14170: LD_INT 59
14172: PUSH
14173: LD_INT 54
14175: PUSH
14176: LD_INT 55
14178: PUSH
14179: LD_INT 56
14181: PUSH
14182: LD_INT 63
14184: PUSH
14185: LD_INT 64
14187: PUSH
14188: LD_INT 65
14190: PUSH
14191: LD_INT 30
14193: PUSH
14194: LD_INT 31
14196: PUSH
14197: LD_INT 21
14199: PUSH
14200: LD_INT 22
14202: PUSH
14203: LD_INT 25
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14240: LD_ADDR_VAR 0 5
14244: PUSH
14245: DOUBLE
14246: LD_INT 1
14248: DEC
14249: ST_TO_ADDR
14250: LD_VAR 0 8
14254: PUSH
14255: FOR_TO
14256: IFFALSE 14332
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14258: LD_VAR 0 8
14262: PUSH
14263: LD_VAR 0 5
14267: ARRAY
14268: PPUSH
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 321
14278: PUSH
14279: LD_INT 1
14281: EQUAL
14282: PUSH
14283: LD_VAR 0 8
14287: PUSH
14288: LD_VAR 0 5
14292: ARRAY
14293: PPUSH
14294: LD_VAR 0 3
14298: PPUSH
14299: CALL_OW 482
14303: PUSH
14304: LD_INT 1
14306: EQUAL
14307: AND
14308: IFFALSE 14330
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14310: LD_VAR 0 2
14314: PPUSH
14315: LD_VAR 0 8
14319: PUSH
14320: LD_VAR 0 5
14324: ARRAY
14325: PPUSH
14326: CALL_OW 184
14330: GO 14255
14332: POP
14333: POP
// end ;
14334: LD_VAR 0 4
14338: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14339: LD_INT 0
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14347: LD_ADDR_VAR 0 8
14351: PUSH
14352: LD_VAR 0 2
14356: PPUSH
14357: CALL_OW 313
14361: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14362: LD_ADDR_VAR 0 9
14366: PUSH
14367: LD_VAR 0 3
14371: PPUSH
14372: LD_INT 22
14374: PUSH
14375: LD_VAR 0 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 25
14386: PUSH
14387: LD_INT 2
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 24
14396: PUSH
14397: LD_INT 750
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PUSH
14404: LD_INT 3
14406: PUSH
14407: LD_INT 54
14409: PUSH
14410: EMPTY
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: PPUSH
14423: CALL_OW 70
14427: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14428: LD_ADDR_VAR 0 6
14432: PUSH
14433: LD_VAR 0 3
14437: PPUSH
14438: LD_INT 22
14440: PUSH
14441: LD_VAR 0 1
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 21
14452: PUSH
14453: LD_INT 3
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 3
14462: PUSH
14463: LD_INT 24
14465: PUSH
14466: LD_INT 1000
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: PPUSH
14485: CALL_OW 70
14489: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14490: LD_VAR 0 6
14494: NOT
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_VAR 0 1
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 25
14510: PUSH
14511: LD_INT 2
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 24
14520: PUSH
14521: LD_INT 250
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: NOT
14538: AND
14539: IFFALSE 14543
// exit ;
14541: GO 14725
// if buildings_list > 0 and engineerOkInside then
14543: LD_VAR 0 6
14547: PUSH
14548: LD_INT 0
14550: GREATER
14551: PUSH
14552: LD_VAR 0 8
14556: AND
14557: IFFALSE 14568
// ComExitBuilding ( engineerOkInside ) ;
14559: LD_VAR 0 8
14563: PPUSH
14564: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14568: LD_VAR 0 6
14572: PUSH
14573: LD_INT 0
14575: GREATER
14576: PUSH
14577: LD_VAR 0 9
14581: PUSH
14582: LD_INT 0
14584: GREATER
14585: AND
14586: IFFALSE 14606
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14588: LD_VAR 0 9
14592: PPUSH
14593: LD_VAR 0 6
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14606: LD_VAR 0 6
14610: PUSH
14611: LD_INT 0
14613: EQUAL
14614: PUSH
14615: LD_VAR 0 4
14619: PUSH
14620: LD_INT 0
14622: EQUAL
14623: AND
14624: PUSH
14625: LD_VAR 0 9
14629: PUSH
14630: LD_INT 0
14632: GREATER
14633: AND
14634: IFFALSE 14650
// ComEnterUnit ( engineerOkOutside , building ) ;
14636: LD_VAR 0 9
14640: PPUSH
14641: LD_VAR 0 2
14645: PPUSH
14646: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14650: LD_VAR 0 9
14654: PUSH
14655: LD_INT 0
14657: GREATER
14658: PUSH
14659: LD_VAR 0 6
14663: PUSH
14664: LD_INT 0
14666: EQUAL
14667: AND
14668: PUSH
14669: LD_VAR 0 4
14673: PUSH
14674: LD_INT 0
14676: GREATER
14677: AND
14678: IFFALSE 14725
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14680: LD_VAR 0 9
14684: PPUSH
14685: LD_VAR 0 4
14689: PUSH
14690: LD_INT 1
14692: ARRAY
14693: PPUSH
14694: LD_VAR 0 4
14698: PUSH
14699: LD_INT 2
14701: ARRAY
14702: PPUSH
14703: LD_VAR 0 4
14707: PUSH
14708: LD_INT 3
14710: ARRAY
14711: PPUSH
14712: LD_VAR 0 4
14716: PUSH
14717: LD_INT 4
14719: ARRAY
14720: PPUSH
14721: CALL_OW 145
// end ;
14725: LD_VAR 0 5
14729: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14730: LD_INT 0
14732: PPUSH
14733: PPUSH
14734: PPUSH
14735: PPUSH
14736: PPUSH
14737: PPUSH
14738: PPUSH
14739: PPUSH
14740: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14741: LD_ADDR_VAR 0 6
14745: PUSH
14746: LD_INT 22
14748: PUSH
14749: LD_VAR 0 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 25
14760: PUSH
14761: LD_INT 4
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 24
14770: PUSH
14771: LD_INT 251
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: PUSH
14788: LD_EXP 35
14792: PUSH
14793: EMPTY
14794: LIST
14795: DIFF
14796: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14797: LD_ADDR_VAR 0 7
14801: PUSH
14802: LD_VAR 0 3
14806: PPUSH
14807: LD_INT 22
14809: PUSH
14810: LD_VAR 0 1
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 25
14821: PUSH
14822: LD_INT 4
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 50
14831: PUSH
14832: EMPTY
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 70
14844: PUSH
14845: LD_EXP 35
14849: PUSH
14850: EMPTY
14851: LIST
14852: DIFF
14853: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14854: LD_ADDR_VAR 0 10
14858: PUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 22
14866: PUSH
14867: LD_VAR 0 1
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 21
14878: PUSH
14879: LD_INT 1
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 3
14888: PUSH
14889: LD_INT 24
14891: PUSH
14892: LD_INT 750
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 70
14912: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14913: LD_ADDR_VAR 0 11
14917: PUSH
14918: LD_VAR 0 2
14922: PPUSH
14923: LD_INT 22
14925: PUSH
14926: LD_VAR 0 1
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 21
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 3
14947: PUSH
14948: LD_INT 24
14950: PUSH
14951: LD_INT 1000
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 70
14971: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14972: LD_VAR 0 10
14976: PUSH
14977: LD_INT 0
14979: GREATER
14980: PUSH
14981: LD_VAR 0 6
14985: PUSH
14986: LD_INT 0
14988: GREATER
14989: AND
14990: IFFALSE 15006
// ComMoveToArea ( damageUnits , healArea ) ;
14992: LD_VAR 0 10
14996: PPUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
15006: LD_VAR 0 11
15010: PUSH
15011: LD_INT 0
15013: GREATER
15014: PUSH
15015: LD_VAR 0 7
15019: PUSH
15020: LD_INT 0
15022: GREATER
15023: AND
15024: IFFALSE 15044
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15026: LD_VAR 0 7
15030: PPUSH
15031: LD_VAR 0 11
15035: PUSH
15036: LD_INT 1
15038: ARRAY
15039: PPUSH
15040: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15044: LD_VAR 0 10
15048: PUSH
15049: LD_INT 0
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 11
15057: PUSH
15058: LD_INT 0
15060: EQUAL
15061: AND
15062: PUSH
15063: LD_VAR 0 7
15067: PUSH
15068: LD_INT 0
15070: GREATER
15071: AND
15072: IFFALSE 15177
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15074: LD_ADDR_VAR 0 12
15078: PUSH
15079: LD_INT 22
15081: PUSH
15082: LD_VAR 0 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 3
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 30
15103: PUSH
15104: LD_INT 8
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: PPUSH
15116: CALL_OW 69
15120: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15121: LD_ADDR_VAR 0 13
15125: PUSH
15126: LD_INT 1
15128: PPUSH
15129: LD_VAR 0 12
15133: PPUSH
15134: CALL_OW 12
15138: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15139: LD_VAR 0 7
15143: PPUSH
15144: LD_INT 3
15146: PUSH
15147: LD_INT 60
15149: PUSH
15150: EMPTY
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PPUSH
15157: CALL_OW 72
15161: PPUSH
15162: LD_VAR 0 12
15166: PUSH
15167: LD_VAR 0 13
15171: ARRAY
15172: PPUSH
15173: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_INT 22
15184: PUSH
15185: LD_VAR 0 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 25
15196: PUSH
15197: LD_INT 3
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 24
15206: PUSH
15207: LD_INT 751
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 70
15223: PUSH
15224: LD_INT 0
15226: GREATER
15227: PUSH
15228: LD_INT 21
15230: PPUSH
15231: CALL_OW 302
15235: AND
15236: PUSH
15237: LD_INT 21
15239: PPUSH
15240: CALL_OW 255
15244: PUSH
15245: LD_INT 3
15247: EQUAL
15248: AND
15249: IFFALSE 15305
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15251: LD_VAR 0 3
15255: PPUSH
15256: LD_INT 22
15258: PUSH
15259: LD_VAR 0 1
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 25
15270: PUSH
15271: LD_INT 3
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 24
15280: PUSH
15281: LD_INT 751
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 70
15297: PPUSH
15298: LD_INT 21
15300: PPUSH
15301: CALL_OW 120
// end ;
15305: LD_VAR 0 5
15309: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15310: LD_INT 0
15312: PPUSH
15313: PPUSH
15314: PPUSH
15315: PPUSH
15316: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15317: LD_ADDR_VAR 0 6
15321: PUSH
15322: LD_INT 22
15324: PUSH
15325: LD_VAR 0 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: LD_INT 31
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 30
15349: PUSH
15350: LD_INT 32
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 30
15359: PUSH
15360: LD_INT 33
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 30
15369: PUSH
15370: LD_INT 4
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 30
15379: PUSH
15380: LD_INT 5
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 69
15403: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15404: LD_ADDR_VAR 0 7
15408: PUSH
15409: LD_INT 22
15411: PUSH
15412: LD_VAR 0 2
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 21
15423: PUSH
15424: LD_INT 3
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 58
15433: PUSH
15434: EMPTY
15435: LIST
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: LIST
15441: PPUSH
15442: CALL_OW 69
15446: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15447: LD_VAR 0 6
15451: PUSH
15452: LD_INT 0
15454: GREATER
15455: PUSH
15456: LD_VAR 0 7
15460: PUSH
15461: LD_INT 0
15463: GREATER
15464: AND
15465: IFFALSE 15535
// begin for i in turretsList do
15467: LD_ADDR_VAR 0 4
15471: PUSH
15472: LD_VAR 0 6
15476: PUSH
15477: FOR_IN
15478: IFFALSE 15533
// begin for j in enemyBuildings do
15480: LD_ADDR_VAR 0 5
15484: PUSH
15485: LD_VAR 0 7
15489: PUSH
15490: FOR_IN
15491: IFFALSE 15529
// begin if GetDistUnits ( i , j ) < 20 then
15493: LD_VAR 0 4
15497: PPUSH
15498: LD_VAR 0 5
15502: PPUSH
15503: CALL_OW 296
15507: PUSH
15508: LD_INT 20
15510: LESS
15511: IFFALSE 15527
// begin ComAttackUnit ( i , j ) ;
15513: LD_VAR 0 4
15517: PPUSH
15518: LD_VAR 0 5
15522: PPUSH
15523: CALL_OW 115
// end ; end ;
15527: GO 15490
15529: POP
15530: POP
// end ;
15531: GO 15477
15533: POP
15534: POP
// end ; end ;
15535: LD_VAR 0 3
15539: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15548: LD_ADDR_VAR 0 7
15552: PUSH
15553: LD_VAR 0 2
15557: PPUSH
15558: LD_INT 22
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 2
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 34
15582: PUSH
15583: LD_INT 52
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: LIST
15594: PPUSH
15595: CALL_OW 70
15599: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15600: LD_ADDR_VAR 0 8
15604: PUSH
15605: LD_VAR 0 2
15609: PPUSH
15610: LD_INT 22
15612: PUSH
15613: LD_VAR 0 1
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 3
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 3
15634: PUSH
15635: LD_INT 24
15637: PUSH
15638: LD_INT 1000
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: PUSH
15654: EMPTY
15655: LIST
15656: PPUSH
15657: CALL_OW 70
15661: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15662: LD_VAR 0 8
15666: PUSH
15667: LD_INT 0
15669: GREATER
15670: PUSH
15671: LD_VAR 0 7
15675: PPUSH
15676: LD_INT 24
15678: PUSH
15679: LD_INT 750
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PPUSH
15686: CALL_OW 72
15690: PUSH
15691: LD_INT 0
15693: GREATER
15694: AND
15695: IFFALSE 15715
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15697: LD_VAR 0 7
15701: PPUSH
15702: LD_VAR 0 8
15706: PUSH
15707: LD_INT 1
15709: ARRAY
15710: PPUSH
15711: CALL_OW 130
// end ;
15715: LD_VAR 0 3
15719: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15720: LD_INT 0
15722: PPUSH
15723: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15724: LD_INT 22
15726: PUSH
15727: LD_VAR 0 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 21
15738: PUSH
15739: LD_INT 2
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: PUSH
15755: LD_INT 18
15757: PPUSH
15758: LD_INT 22
15760: PUSH
15761: LD_VAR 0 1
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 21
15772: PUSH
15773: LD_INT 2
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PPUSH
15784: CALL_OW 70
15788: PUSH
15789: LD_VAR 0 3
15793: LESSEQUAL
15794: DIFF
15795: IFFALSE 15862
// for i = 1 to vehCount do
15797: LD_ADDR_VAR 0 9
15801: PUSH
15802: DOUBLE
15803: LD_INT 1
15805: DEC
15806: ST_TO_ADDR
15807: LD_VAR 0 3
15811: PUSH
15812: FOR_TO
15813: IFFALSE 15860
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15815: LD_VAR 0 2
15819: PPUSH
15820: LD_VAR 0 7
15824: PPUSH
15825: LD_VAR 0 5
15829: PPUSH
15830: LD_VAR 0 6
15834: PPUSH
15835: LD_VAR 0 4
15839: PUSH
15840: LD_INT 1
15842: PPUSH
15843: LD_VAR 0 4
15847: PPUSH
15848: CALL_OW 12
15852: ARRAY
15853: PPUSH
15854: CALL_OW 185
15858: GO 15812
15860: POP
15861: POP
// end ;
15862: LD_VAR 0 8
15866: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
15874: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15875: LD_EXP 40
15879: PUSH
15880: LD_INT 3
15882: PUSH
15883: LD_INT 4
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: PUSH
15894: LD_OWVAR 67
15898: ARRAY
15899: GREATEREQUAL
15900: PUSH
15901: LD_EXP 41
15905: PUSH
15906: LD_INT 1
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: PUSH
15920: LD_OWVAR 67
15924: ARRAY
15925: GREATEREQUAL
15926: AND
15927: IFFALSE 16160
// begin repeat wait ( 0 0$3 ) ;
15929: LD_INT 105
15931: PPUSH
15932: CALL_OW 67
// for j in russianTanks do
15936: LD_ADDR_VAR 0 4
15940: PUSH
15941: LD_EXP 40
15945: PUSH
15946: FOR_IN
15947: IFFALSE 16148
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15949: LD_ADDR_VAR 0 6
15953: PUSH
15954: LD_INT 81
15956: PUSH
15957: LD_VAR 0 1
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 101
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: PPUSH
15985: LD_VAR 0 4
15989: PPUSH
15990: CALL_OW 74
15994: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15995: LD_ADDR_VAR 0 7
15999: PUSH
16000: LD_INT 81
16002: PUSH
16003: LD_VAR 0 1
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 101
16014: PUSH
16015: LD_INT 1
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 59
16027: PUSH
16028: EMPTY
16029: LIST
16030: PUSH
16031: LD_INT 21
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 21
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: PPUSH
16065: CALL_OW 69
16069: PPUSH
16070: LD_VAR 0 4
16074: PPUSH
16075: CALL_OW 74
16079: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16080: LD_VAR 0 4
16084: PPUSH
16085: LD_VAR 0 6
16089: PPUSH
16090: CALL_OW 296
16094: PUSH
16095: LD_INT 8
16097: PLUS
16098: PUSH
16099: LD_VAR 0 4
16103: PPUSH
16104: LD_VAR 0 7
16108: PPUSH
16109: CALL_OW 296
16113: LESS
16114: IFFALSE 16132
// ComAttackUnit ( j , target1 ) else
16116: LD_VAR 0 4
16120: PPUSH
16121: LD_VAR 0 6
16125: PPUSH
16126: CALL_OW 115
16130: GO 16146
// ComAttackUnit ( j , target2 ) ;
16132: LD_VAR 0 4
16136: PPUSH
16137: LD_VAR 0 7
16141: PPUSH
16142: CALL_OW 115
// end ;
16146: GO 15946
16148: POP
16149: POP
// until russianTanks = 0 ;
16150: LD_EXP 40
16154: PUSH
16155: LD_INT 0
16157: EQUAL
16158: IFFALSE 15929
// end ; end ;
16160: LD_VAR 0 2
16164: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16165: LD_INT 0
16167: PPUSH
16168: PPUSH
16169: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16170: LD_EXP 40
16174: PUSH
16175: LD_INT 1
16177: GREATEREQUAL
16178: PUSH
16179: LD_EXP 41
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 2
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: LD_OWVAR 67
16202: ARRAY
16203: GREATEREQUAL
16204: AND
16205: IFFALSE 16355
// repeat wait ( 0 0$3 ) ;
16207: LD_INT 105
16209: PPUSH
16210: CALL_OW 67
// if russianTimeLapsers > 0 then
16214: LD_EXP 41
16218: PUSH
16219: LD_INT 0
16221: GREATER
16222: IFFALSE 16345
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: LD_EXP 41
16233: PPUSH
16234: LD_INT 3
16236: PUSH
16237: LD_INT 60
16239: PUSH
16240: EMPTY
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PPUSH
16247: CALL_OW 72
16251: PUSH
16252: FOR_IN
16253: IFFALSE 16343
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
16255: LD_ADDR_VAR 0 4
16259: PUSH
16260: LD_INT 81
16262: PUSH
16263: LD_VAR 0 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 101
16274: PUSH
16275: LD_INT 1
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 21
16284: PUSH
16285: LD_INT 1
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: LIST
16296: PPUSH
16297: CALL_OW 69
16301: PPUSH
16302: LD_VAR 0 3
16306: PPUSH
16307: CALL_OW 74
16311: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
16312: LD_VAR 0 3
16316: PPUSH
16317: LD_VAR 0 4
16321: PPUSH
16322: CALL_OW 250
16326: PPUSH
16327: LD_VAR 0 4
16331: PPUSH
16332: CALL_OW 251
16336: PPUSH
16337: CALL_OW 111
// end ;
16341: GO 16252
16343: POP
16344: POP
// until russianTimeLapsers = 0 ;
16345: LD_EXP 41
16349: PUSH
16350: LD_INT 0
16352: EQUAL
16353: IFFALSE 16207
// end ;
16355: LD_VAR 0 2
16359: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16360: LD_INT 0
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16368: LD_ADDR_VAR 0 6
16372: PUSH
16373: LD_INT 22
16375: PUSH
16376: LD_VAR 0 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 25
16387: PUSH
16388: LD_INT 9
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PPUSH
16399: CALL_OW 69
16403: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16404: LD_ADDR_VAR 0 7
16408: PUSH
16409: LD_INT 81
16411: PUSH
16412: LD_VAR 0 1
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 3
16423: PUSH
16424: LD_INT 21
16426: PUSH
16427: LD_INT 3
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PPUSH
16442: CALL_OW 69
16446: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16447: LD_ADDR_VAR 0 4
16451: PUSH
16452: LD_INT 1
16454: PPUSH
16455: LD_INT 3
16457: PPUSH
16458: CALL_OW 12
16462: ST_TO_ADDR
// for i = 1 to list do
16463: LD_ADDR_VAR 0 5
16467: PUSH
16468: DOUBLE
16469: LD_INT 1
16471: DEC
16472: ST_TO_ADDR
16473: LD_VAR 0 6
16477: PUSH
16478: FOR_TO
16479: IFFALSE 16681
// for ta in filter do
16481: LD_ADDR_VAR 0 3
16485: PUSH
16486: LD_VAR 0 7
16490: PUSH
16491: FOR_IN
16492: IFFALSE 16677
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16494: LD_VAR 0 6
16498: PUSH
16499: LD_VAR 0 5
16503: ARRAY
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: CALL_OW 296
16514: PUSH
16515: LD_INT 15
16517: LESSEQUAL
16518: IFFALSE 16675
// begin case c of 1 :
16520: LD_VAR 0 4
16524: PUSH
16525: LD_INT 1
16527: DOUBLE
16528: EQUAL
16529: IFTRUE 16533
16531: GO 16571
16533: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16534: LD_VAR 0 6
16538: PUSH
16539: LD_VAR 0 5
16543: ARRAY
16544: PPUSH
16545: LD_VAR 0 3
16549: PPUSH
16550: CALL_OW 250
16554: PPUSH
16555: LD_VAR 0 3
16559: PPUSH
16560: CALL_OW 251
16564: PPUSH
16565: CALL_OW 154
16569: GO 16675
16571: LD_INT 2
16573: DOUBLE
16574: EQUAL
16575: IFTRUE 16579
16577: GO 16643
16579: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16580: LD_VAR 0 6
16584: PUSH
16585: LD_VAR 0 5
16589: ARRAY
16590: PPUSH
16591: LD_VAR 0 3
16595: PPUSH
16596: CALL_OW 250
16600: PUSH
16601: LD_INT 1
16603: NEG
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 12
16612: PLUS
16613: PPUSH
16614: LD_VAR 0 3
16618: PPUSH
16619: CALL_OW 251
16623: PUSH
16624: LD_INT 1
16626: NEG
16627: PPUSH
16628: LD_INT 1
16630: PPUSH
16631: CALL_OW 12
16635: PLUS
16636: PPUSH
16637: CALL_OW 153
16641: GO 16675
16643: LD_INT 3
16645: DOUBLE
16646: EQUAL
16647: IFTRUE 16651
16649: GO 16674
16651: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16652: LD_VAR 0 6
16656: PUSH
16657: LD_VAR 0 5
16661: ARRAY
16662: PPUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: CALL_OW 115
16672: GO 16675
16674: POP
// end ; end ;
16675: GO 16491
16677: POP
16678: POP
16679: GO 16478
16681: POP
16682: POP
// end ;
16683: LD_VAR 0 2
16687: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16688: LD_INT 0
16690: PPUSH
16691: PPUSH
16692: PPUSH
16693: PPUSH
// r := 100 ;
16694: LD_ADDR_VAR 0 5
16698: PUSH
16699: LD_INT 100
16701: ST_TO_ADDR
// x := 0 ;
16702: LD_ADDR_VAR 0 6
16706: PUSH
16707: LD_INT 0
16709: ST_TO_ADDR
// while ( x < n ) do
16710: LD_VAR 0 6
16714: PUSH
16715: LD_VAR 0 2
16719: LESS
16720: IFFALSE 17007
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16722: LD_ADDR_VAR 0 4
16726: PUSH
16727: DOUBLE
16728: LD_INT 1
16730: DEC
16731: ST_TO_ADDR
16732: LD_VAR 0 1
16736: PPUSH
16737: LD_INT 0
16739: PPUSH
16740: CALL_OW 517
16744: PUSH
16745: LD_INT 1
16747: ARRAY
16748: PUSH
16749: FOR_TO
16750: IFFALSE 17003
// begin if r > 50 then
16752: LD_VAR 0 5
16756: PUSH
16757: LD_INT 50
16759: GREATER
16760: IFFALSE 16979
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16762: LD_VAR 0 1
16766: PPUSH
16767: LD_INT 0
16769: PPUSH
16770: CALL_OW 517
16774: PUSH
16775: LD_INT 1
16777: ARRAY
16778: PUSH
16779: LD_VAR 0 4
16783: ARRAY
16784: PPUSH
16785: LD_VAR 0 1
16789: PPUSH
16790: LD_INT 0
16792: PPUSH
16793: CALL_OW 517
16797: PUSH
16798: LD_INT 2
16800: ARRAY
16801: PUSH
16802: LD_VAR 0 4
16806: ARRAY
16807: PPUSH
16808: CALL_OW 458
16812: NOT
16813: IFFALSE 16963
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16815: LD_VAR 0 1
16819: PPUSH
16820: LD_INT 0
16822: PPUSH
16823: CALL_OW 517
16827: PUSH
16828: LD_INT 1
16830: ARRAY
16831: PUSH
16832: LD_VAR 0 4
16836: ARRAY
16837: PPUSH
16838: LD_VAR 0 1
16842: PPUSH
16843: LD_INT 0
16845: PPUSH
16846: CALL_OW 517
16850: PUSH
16851: LD_INT 2
16853: ARRAY
16854: PUSH
16855: LD_VAR 0 4
16859: ARRAY
16860: PPUSH
16861: LD_INT 8
16863: PPUSH
16864: LD_INT 0
16866: PPUSH
16867: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16871: LD_ADDR_EXP 45
16875: PUSH
16876: LD_EXP 45
16880: PPUSH
16881: LD_INT 1
16883: PPUSH
16884: LD_VAR 0 1
16888: PPUSH
16889: LD_INT 0
16891: PPUSH
16892: CALL_OW 517
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PUSH
16901: LD_VAR 0 4
16905: ARRAY
16906: PUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: LD_INT 0
16914: PPUSH
16915: CALL_OW 517
16919: PUSH
16920: LD_INT 2
16922: ARRAY
16923: PUSH
16924: LD_VAR 0 4
16928: ARRAY
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 2
16938: ST_TO_ADDR
// r := 0 ;
16939: LD_ADDR_VAR 0 5
16943: PUSH
16944: LD_INT 0
16946: ST_TO_ADDR
// x := x + 1 ;
16947: LD_ADDR_VAR 0 6
16951: PUSH
16952: LD_VAR 0 6
16956: PUSH
16957: LD_INT 1
16959: PLUS
16960: ST_TO_ADDR
// end else
16961: GO 16977
// r := r + 35 ;
16963: LD_ADDR_VAR 0 5
16967: PUSH
16968: LD_VAR 0 5
16972: PUSH
16973: LD_INT 35
16975: PLUS
16976: ST_TO_ADDR
// end else
16977: GO 17001
// r := r + rand ( 10 , 25 ) ;
16979: LD_ADDR_VAR 0 5
16983: PUSH
16984: LD_VAR 0 5
16988: PUSH
16989: LD_INT 10
16991: PPUSH
16992: LD_INT 25
16994: PPUSH
16995: CALL_OW 12
16999: PLUS
17000: ST_TO_ADDR
// end ;
17001: GO 16749
17003: POP
17004: POP
17005: GO 16710
// end ;
17007: LD_VAR 0 3
17011: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17012: LD_INT 0
17014: PPUSH
17015: PPUSH
17016: PPUSH
17017: PPUSH
// tmpTab = [ ] ;
17018: LD_ADDR_VAR 0 6
17022: PUSH
17023: EMPTY
17024: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17025: LD_INT 22
17027: PUSH
17028: LD_VAR 0 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 30
17039: PUSH
17040: LD_INT 32
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PPUSH
17051: CALL_OW 69
17055: PUSH
17056: LD_INT 0
17058: GREATER
17059: IFFALSE 17142
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17061: LD_ADDR_VAR 0 4
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_VAR 0 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 30
17080: PUSH
17081: LD_INT 32
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PPUSH
17092: CALL_OW 69
17096: PUSH
17097: FOR_IN
17098: IFFALSE 17140
// begin for j in UnitsInside ( i ) do
17100: LD_ADDR_VAR 0 5
17104: PUSH
17105: LD_VAR 0 4
17109: PPUSH
17110: CALL_OW 313
17114: PUSH
17115: FOR_IN
17116: IFFALSE 17136
// tmpTab = tmpTab ^ j ;
17118: LD_ADDR_VAR 0 6
17122: PUSH
17123: LD_VAR 0 6
17127: PUSH
17128: LD_VAR 0 5
17132: ADD
17133: ST_TO_ADDR
17134: GO 17115
17136: POP
17137: POP
// end ;
17138: GO 17097
17140: POP
17141: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17142: LD_VAR 0 6
17146: PPUSH
17147: LD_VAR 0 2
17151: PPUSH
17152: CALL_OW 250
17156: PPUSH
17157: LD_VAR 0 2
17161: PPUSH
17162: CALL_OW 251
17166: PPUSH
17167: CALL_OW 114
// end ;
17171: LD_VAR 0 3
17175: RET
// export function PrepareNature ; var i , un ; begin
17176: LD_INT 0
17178: PPUSH
17179: PPUSH
17180: PPUSH
// uc_side := 0 ;
17181: LD_ADDR_OWVAR 20
17185: PUSH
17186: LD_INT 0
17188: ST_TO_ADDR
// uc_nation := 0 ;
17189: LD_ADDR_OWVAR 21
17193: PUSH
17194: LD_INT 0
17196: ST_TO_ADDR
// InitHc ;
17197: CALL_OW 19
// hc_class := class_fish ;
17201: LD_ADDR_OWVAR 28
17205: PUSH
17206: LD_INT 20
17208: ST_TO_ADDR
// for i = 1 to 6 do
17209: LD_ADDR_VAR 0 2
17213: PUSH
17214: DOUBLE
17215: LD_INT 1
17217: DEC
17218: ST_TO_ADDR
17219: LD_INT 6
17221: PUSH
17222: FOR_TO
17223: IFFALSE 17242
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17225: CALL_OW 44
17229: PPUSH
17230: LD_INT 23
17232: PPUSH
17233: LD_INT 0
17235: PPUSH
17236: CALL_OW 49
17240: GO 17222
17242: POP
17243: POP
// for i = 1 to Difficulty + 2 do
17244: LD_ADDR_VAR 0 2
17248: PUSH
17249: DOUBLE
17250: LD_INT 1
17252: DEC
17253: ST_TO_ADDR
17254: LD_OWVAR 67
17258: PUSH
17259: LD_INT 2
17261: PLUS
17262: PUSH
17263: FOR_TO
17264: IFFALSE 17373
// begin hc_sex = sex_male ;
17266: LD_ADDR_OWVAR 27
17270: PUSH
17271: LD_INT 1
17273: ST_TO_ADDR
// uc_side = 0 ;
17274: LD_ADDR_OWVAR 20
17278: PUSH
17279: LD_INT 0
17281: ST_TO_ADDR
// uc_nation = nation_nature ;
17282: LD_ADDR_OWVAR 21
17286: PUSH
17287: LD_INT 0
17289: ST_TO_ADDR
// hc_class = class_tiger ;
17290: LD_ADDR_OWVAR 28
17294: PUSH
17295: LD_INT 14
17297: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17298: LD_ADDR_OWVAR 31
17302: PUSH
17303: LD_EXP 38
17307: PUSH
17308: LD_INT 0
17310: PUSH
17311: LD_INT 0
17313: PUSH
17314: LD_INT 0
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17323: LD_ADDR_OWVAR 35
17327: PUSH
17328: LD_INT 5
17330: NEG
17331: PPUSH
17332: LD_INT 5
17334: PPUSH
17335: CALL_OW 12
17339: PUSH
17340: LD_OWVAR 67
17344: MUL
17345: ST_TO_ADDR
// un = CreateHuman ;
17346: LD_ADDR_VAR 0 3
17350: PUSH
17351: CALL_OW 44
17355: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17356: LD_VAR 0 3
17360: PPUSH
17361: LD_INT 24
17363: PPUSH
17364: LD_INT 0
17366: PPUSH
17367: CALL_OW 49
// end ;
17371: GO 17263
17373: POP
17374: POP
// for i = 1 to rand ( 3 , 4 ) do
17375: LD_ADDR_VAR 0 2
17379: PUSH
17380: DOUBLE
17381: LD_INT 1
17383: DEC
17384: ST_TO_ADDR
17385: LD_INT 3
17387: PPUSH
17388: LD_INT 4
17390: PPUSH
17391: CALL_OW 12
17395: PUSH
17396: FOR_TO
17397: IFFALSE 17489
// begin hc_sex = sex_male ;
17399: LD_ADDR_OWVAR 27
17403: PUSH
17404: LD_INT 1
17406: ST_TO_ADDR
// uc_side = 0 ;
17407: LD_ADDR_OWVAR 20
17411: PUSH
17412: LD_INT 0
17414: ST_TO_ADDR
// uc_nation = nation_nature ;
17415: LD_ADDR_OWVAR 21
17419: PUSH
17420: LD_INT 0
17422: ST_TO_ADDR
// hc_class = 18 ;
17423: LD_ADDR_OWVAR 28
17427: PUSH
17428: LD_INT 18
17430: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17431: LD_ADDR_OWVAR 31
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: ST_TO_ADDR
// hc_agressivity = 0 ;
17454: LD_ADDR_OWVAR 35
17458: PUSH
17459: LD_INT 0
17461: ST_TO_ADDR
// un = CreateHuman ;
17462: LD_ADDR_VAR 0 3
17466: PUSH
17467: CALL_OW 44
17471: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17472: LD_VAR 0 3
17476: PPUSH
17477: LD_INT 24
17479: PPUSH
17480: LD_INT 0
17482: PPUSH
17483: CALL_OW 49
// end ;
17487: GO 17396
17489: POP
17490: POP
// for i = 1 to rand ( 1 , 3 ) do
17491: LD_ADDR_VAR 0 2
17495: PUSH
17496: DOUBLE
17497: LD_INT 1
17499: DEC
17500: ST_TO_ADDR
17501: LD_INT 1
17503: PPUSH
17504: LD_INT 3
17506: PPUSH
17507: CALL_OW 12
17511: PUSH
17512: FOR_TO
17513: IFFALSE 17661
// begin hc_sex = sex_male ;
17515: LD_ADDR_OWVAR 27
17519: PUSH
17520: LD_INT 1
17522: ST_TO_ADDR
// uc_side = 0 ;
17523: LD_ADDR_OWVAR 20
17527: PUSH
17528: LD_INT 0
17530: ST_TO_ADDR
// uc_nation = nation_nature ;
17531: LD_ADDR_OWVAR 21
17535: PUSH
17536: LD_INT 0
17538: ST_TO_ADDR
// hc_class = class_apeman ;
17539: LD_ADDR_OWVAR 28
17543: PUSH
17544: LD_INT 12
17546: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17547: LD_ADDR_OWVAR 31
17551: PUSH
17552: LD_EXP 37
17556: PPUSH
17557: LD_EXP 38
17561: PPUSH
17562: CALL_OW 12
17566: PUSH
17567: LD_EXP 37
17571: PPUSH
17572: LD_EXP 38
17576: PPUSH
17577: CALL_OW 12
17581: PUSH
17582: LD_EXP 37
17586: PPUSH
17587: LD_EXP 38
17591: PPUSH
17592: CALL_OW 12
17596: PUSH
17597: LD_EXP 37
17601: PPUSH
17602: LD_EXP 38
17606: PPUSH
17607: CALL_OW 12
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17618: LD_ADDR_OWVAR 35
17622: PUSH
17623: LD_INT 1
17625: PPUSH
17626: LD_INT 20
17628: PPUSH
17629: CALL_OW 12
17633: ST_TO_ADDR
// un = CreateHuman ;
17634: LD_ADDR_VAR 0 3
17638: PUSH
17639: CALL_OW 44
17643: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17644: LD_VAR 0 3
17648: PPUSH
17649: LD_INT 24
17651: PPUSH
17652: LD_INT 0
17654: PPUSH
17655: CALL_OW 49
// end ;
17659: GO 17512
17661: POP
17662: POP
// end ; end_of_file
17663: LD_VAR 0 1
17667: RET
// on UnitDestroyed ( unit ) do var i ;
17668: LD_INT 0
17670: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 255
17680: PUSH
17681: LD_INT 3
17683: EQUAL
17684: PUSH
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 247
17694: PUSH
17695: LD_INT 1
17697: EQUAL
17698: AND
17699: IFFALSE 17763
// begin for i in RuScientists do
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_EXP 35
17710: PUSH
17711: FOR_IN
17712: IFFALSE 17761
// if i = unit then
17714: LD_VAR 0 2
17718: PUSH
17719: LD_VAR 0 1
17723: EQUAL
17724: IFFALSE 17759
// begin RuScientists = RuScientists diff [ unit ] ;
17726: LD_ADDR_EXP 35
17730: PUSH
17731: LD_EXP 35
17735: PUSH
17736: LD_VAR 0 1
17740: PUSH
17741: EMPTY
17742: LIST
17743: DIFF
17744: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17745: LD_ADDR_EXP 36
17749: PUSH
17750: LD_EXP 36
17754: PUSH
17755: LD_INT 1
17757: PLUS
17758: ST_TO_ADDR
// end ;
17759: GO 17711
17761: POP
17762: POP
// end ; end ;
17763: PPOPN 2
17765: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17766: LD_VAR 0 1
17770: PUSH
17771: LD_INT 10
17773: EQUAL
17774: PUSH
17775: LD_VAR 0 2
17779: PPUSH
17780: CALL_OW 255
17784: PUSH
17785: LD_INT 1
17787: EQUAL
17788: AND
17789: PUSH
17790: LD_EXP 48
17794: PUSH
17795: LD_INT 0
17797: EQUAL
17798: AND
17799: IFFALSE 17911
// begin eventVar1 = 1 ;
17801: LD_ADDR_EXP 48
17805: PUSH
17806: LD_INT 1
17808: ST_TO_ADDR
// teleportExplored = 1 ;
17809: LD_ADDR_EXP 34
17813: PUSH
17814: LD_INT 1
17816: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17817: LD_STRING M2a
17819: PPUSH
17820: CALL_OW 337
// wait ( 0 0$2 ) ;
17824: LD_INT 70
17826: PPUSH
17827: CALL_OW 67
// DialogueOn ;
17831: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17835: LD_INT 22
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 21
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL_OW 69
17863: PPUSH
17864: LD_STRING DT3a-Sol1-1
17866: PPUSH
17867: LD_STRING DT3a-FSol1-1
17869: PPUSH
17870: CALL 13303 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17874: LD_EXP 1
17878: PPUSH
17879: LD_STRING DT3a-JMM-1
17881: PPUSH
17882: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17886: LD_VAR 0 2
17890: PPUSH
17891: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17895: LD_EXP 1
17899: PPUSH
17900: LD_STRING DT3a-JMM-1a
17902: PPUSH
17903: CALL_OW 88
// DialogueOff ;
17907: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17911: LD_VAR 0 1
17915: PUSH
17916: LD_INT 10
17918: EQUAL
17919: PUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: CALL_OW 247
17929: PUSH
17930: LD_INT 2
17932: EQUAL
17933: AND
17934: PUSH
17935: LD_VAR 0 2
17939: PPUSH
17940: CALL_OW 255
17944: PUSH
17945: LD_INT 3
17947: EQUAL
17948: AND
17949: PUSH
17950: LD_EXP 29
17954: PUSH
17955: LD_INT 0
17957: EQUAL
17958: AND
17959: IFFALSE 17976
// begin wait ( 0 0$3 ) ;
17961: LD_INT 105
17963: PPUSH
17964: CALL_OW 67
// vehicleTeleported = 1 ;
17968: LD_ADDR_EXP 29
17972: PUSH
17973: LD_INT 1
17975: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17976: LD_VAR 0 1
17980: PUSH
17981: LD_INT 10
17983: EQUAL
17984: PUSH
17985: LD_VAR 0 2
17989: PPUSH
17990: CALL_OW 247
17994: PUSH
17995: LD_INT 2
17997: EQUAL
17998: AND
17999: PUSH
18000: LD_VAR 0 2
18004: PPUSH
18005: CALL_OW 255
18009: PUSH
18010: LD_INT 3
18012: EQUAL
18013: AND
18014: PUSH
18015: LD_EXP 29
18019: PUSH
18020: LD_INT 2
18022: EQUAL
18023: AND
18024: IFFALSE 18041
// begin wait ( 0 0$3 ) ;
18026: LD_INT 105
18028: PPUSH
18029: CALL_OW 67
// vehicleTeleported = 3 ;
18033: LD_ADDR_EXP 29
18037: PUSH
18038: LD_INT 3
18040: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18041: LD_VAR 0 1
18045: PUSH
18046: LD_INT 10
18048: EQUAL
18049: PUSH
18050: LD_VAR 0 2
18054: PPUSH
18055: CALL_OW 247
18059: PUSH
18060: LD_INT 2
18062: EQUAL
18063: AND
18064: PUSH
18065: LD_VAR 0 2
18069: PPUSH
18070: CALL_OW 255
18074: PUSH
18075: LD_INT 3
18077: EQUAL
18078: AND
18079: IFFALSE 18095
// tpCounter = tpCounter + 1 ;
18081: LD_ADDR_EXP 30
18085: PUSH
18086: LD_EXP 30
18090: PUSH
18091: LD_INT 1
18093: PLUS
18094: ST_TO_ADDR
// end ;
18095: PPOPN 2
18097: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18098: LD_VAR 0 2
18102: PUSH
18103: LD_INT 21
18105: EQUAL
18106: PUSH
18107: LD_VAR 0 2
18111: PUSH
18112: LD_INT 112
18114: EQUAL
18115: OR
18116: IFFALSE 18294
// if GetSide ( vehicle ) = 3 then
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 255
18127: PUSH
18128: LD_INT 3
18130: EQUAL
18131: IFFALSE 18294
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18133: LD_VAR 0 1
18137: PPUSH
18138: CALL_OW 264
18142: PUSH
18143: LD_INT 46
18145: EQUAL
18146: PUSH
18147: LD_VAR 0 1
18151: PPUSH
18152: CALL_OW 264
18156: PUSH
18157: LD_INT 45
18159: EQUAL
18160: OR
18161: PUSH
18162: LD_VAR 0 1
18166: PPUSH
18167: CALL_OW 264
18171: PUSH
18172: LD_INT 44
18174: EQUAL
18175: OR
18176: IFFALSE 18251
// begin russianTanks = russianTanks ^ vehicle ;
18178: LD_ADDR_EXP 40
18182: PUSH
18183: LD_EXP 40
18187: PUSH
18188: LD_VAR 0 1
18192: ADD
18193: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18194: LD_EXP 44
18198: PUSH
18199: LD_INT 1
18201: EQUAL
18202: PUSH
18203: LD_EXP 44
18207: PUSH
18208: LD_INT 0
18210: EQUAL
18211: OR
18212: IFFALSE 18226
// ComEnterUnit ( vehicle , ruteleprt ) ;
18214: LD_VAR 0 1
18218: PPUSH
18219: LD_INT 10
18221: PPUSH
18222: CALL_OW 120
// if attackTactic = 2 then
18226: LD_EXP 44
18230: PUSH
18231: LD_INT 2
18233: EQUAL
18234: IFFALSE 18251
// ComMoveXY ( vehicle , 88 , 69 ) ;
18236: LD_VAR 0 1
18240: PPUSH
18241: LD_INT 88
18243: PPUSH
18244: LD_INT 69
18246: PPUSH
18247: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18251: LD_VAR 0 1
18255: PPUSH
18256: CALL_OW 264
18260: PUSH
18261: LD_INT 49
18263: EQUAL
18264: IFFALSE 18294
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18266: LD_ADDR_EXP 41
18270: PUSH
18271: LD_EXP 41
18275: PUSH
18276: LD_VAR 0 1
18280: ADD
18281: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18282: LD_VAR 0 1
18286: PPUSH
18287: LD_INT 137
18289: PPUSH
18290: CALL_OW 120
// end ; end ; end ;
18294: PPOPN 2
18296: END
// on UnitGoesToRed ( unit ) do var i ;
18297: LD_INT 0
18299: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18300: LD_VAR 0 1
18304: PPUSH
18305: CALL_OW 255
18309: PUSH
18310: LD_INT 3
18312: EQUAL
18313: PUSH
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 247
18323: PUSH
18324: LD_INT 2
18326: EQUAL
18327: AND
18328: IFFALSE 18446
// begin if russianTanks > 0 then
18330: LD_EXP 40
18334: PUSH
18335: LD_INT 0
18337: GREATER
18338: IFFALSE 18388
// for i in russianTanks do
18340: LD_ADDR_VAR 0 2
18344: PUSH
18345: LD_EXP 40
18349: PUSH
18350: FOR_IN
18351: IFFALSE 18386
// if i = unit then
18353: LD_VAR 0 2
18357: PUSH
18358: LD_VAR 0 1
18362: EQUAL
18363: IFFALSE 18384
// russianTanks = russianTanks diff [ unit ] ;
18365: LD_ADDR_EXP 40
18369: PUSH
18370: LD_EXP 40
18374: PUSH
18375: LD_VAR 0 1
18379: PUSH
18380: EMPTY
18381: LIST
18382: DIFF
18383: ST_TO_ADDR
18384: GO 18350
18386: POP
18387: POP
// if russianTimeLapsers > 0 then
18388: LD_EXP 41
18392: PUSH
18393: LD_INT 0
18395: GREATER
18396: IFFALSE 18446
// for i in russianTimeLapsers do
18398: LD_ADDR_VAR 0 2
18402: PUSH
18403: LD_EXP 41
18407: PUSH
18408: FOR_IN
18409: IFFALSE 18444
// if i = unit then
18411: LD_VAR 0 2
18415: PUSH
18416: LD_VAR 0 1
18420: EQUAL
18421: IFFALSE 18442
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18423: LD_ADDR_EXP 41
18427: PUSH
18428: LD_EXP 41
18432: PUSH
18433: LD_VAR 0 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: DIFF
18441: ST_TO_ADDR
18442: GO 18408
18444: POP
18445: POP
// end ; end ;
18446: PPOPN 2
18448: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18449: LD_INT 0
18451: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18452: LD_VAR 0 2
18456: PPUSH
18457: CALL_OW 255
18461: PUSH
18462: LD_INT 3
18464: EQUAL
18465: PUSH
18466: LD_VAR 0 2
18470: PPUSH
18471: CALL_OW 257
18475: PUSH
18476: LD_INT 3
18478: EQUAL
18479: AND
18480: PUSH
18481: LD_INT 21
18483: PPUSH
18484: CALL_OW 255
18488: PUSH
18489: LD_INT 3
18491: EQUAL
18492: AND
18493: PUSH
18494: LD_INT 21
18496: PPUSH
18497: CALL_OW 302
18501: AND
18502: IFFALSE 18516
// ComEnterUnit ( human , ru_fact ) ;
18504: LD_VAR 0 2
18508: PPUSH
18509: LD_INT 21
18511: PPUSH
18512: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL_OW 257
18525: PUSH
18526: LD_INT 4
18528: EQUAL
18529: PUSH
18530: LD_VAR 0 2
18534: PPUSH
18535: CALL_OW 255
18539: PUSH
18540: LD_INT 3
18542: EQUAL
18543: AND
18544: PUSH
18545: LD_EXP 42
18549: PUSH
18550: LD_INT 0
18552: EQUAL
18553: AND
18554: IFFALSE 18616
// for i in RuScientists do
18556: LD_ADDR_VAR 0 3
18560: PUSH
18561: LD_EXP 35
18565: PUSH
18566: FOR_IN
18567: IFFALSE 18614
// if i = human then
18569: LD_VAR 0 3
18573: PUSH
18574: LD_VAR 0 2
18578: EQUAL
18579: IFFALSE 18612
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18581: LD_VAR 0 3
18585: PPUSH
18586: LD_INT 13
18588: PUSH
18589: LD_INT 14
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: PPUSH
18599: LD_INT 2
18601: PPUSH
18602: CALL_OW 12
18606: ARRAY
18607: PPUSH
18608: CALL_OW 113
18612: GO 18566
18614: POP
18615: POP
// end ;
18616: PPOPN 3
18618: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18619: LD_INT 0
18621: PPUSH
18622: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18623: LD_VAR 0 2
18627: PPUSH
18628: CALL_OW 255
18632: PUSH
18633: LD_INT 3
18635: EQUAL
18636: PUSH
18637: LD_VAR 0 2
18641: PPUSH
18642: CALL_OW 257
18646: PUSH
18647: LD_INT 4
18649: EQUAL
18650: AND
18651: IFFALSE 18793
// for i in RuScientists do
18653: LD_ADDR_VAR 0 3
18657: PUSH
18658: LD_EXP 35
18662: PUSH
18663: FOR_IN
18664: IFFALSE 18791
// if i = human then
18666: LD_VAR 0 3
18670: PUSH
18671: LD_VAR 0 2
18675: EQUAL
18676: IFFALSE 18789
// if IsOk ( rutp ) then
18678: LD_INT 137
18680: PPUSH
18681: CALL_OW 302
18685: IFFALSE 18758
// begin rnd = rand ( 1 , 2 ) ;
18687: LD_ADDR_VAR 0 4
18691: PUSH
18692: LD_INT 1
18694: PPUSH
18695: LD_INT 2
18697: PPUSH
18698: CALL_OW 12
18702: ST_TO_ADDR
// if rnd = 1 then
18703: LD_VAR 0 4
18707: PUSH
18708: LD_INT 1
18710: EQUAL
18711: IFFALSE 18725
// ComEnterUnit ( vehicle , rutp ) ;
18713: LD_VAR 0 1
18717: PPUSH
18718: LD_INT 137
18720: PPUSH
18721: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18725: LD_VAR 0 1
18729: PPUSH
18730: LD_INT 13
18732: PUSH
18733: LD_INT 14
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 1
18742: PPUSH
18743: LD_INT 2
18745: PPUSH
18746: CALL_OW 12
18750: ARRAY
18751: PPUSH
18752: CALL_OW 173
// end else
18756: GO 18789
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18758: LD_VAR 0 1
18762: PPUSH
18763: LD_INT 13
18765: PUSH
18766: LD_INT 14
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_INT 2
18778: PPUSH
18779: CALL_OW 12
18783: ARRAY
18784: PPUSH
18785: CALL_OW 113
// end ;
18789: GO 18663
18791: POP
18792: POP
// end ; end_of_file
18793: PPOPN 4
18795: END
// every 0 0$1 trigger ruAI = 1 do
18796: LD_EXP 42
18800: PUSH
18801: LD_INT 1
18803: EQUAL
18804: IFFALSE 18933
18806: GO 18808
18808: DISABLE
// begin enable ;
18809: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18810: LD_INT 3
18812: PPUSH
18813: LD_INT 6
18815: PPUSH
18816: LD_INT 9
18818: PPUSH
18819: LD_EXP 39
18823: PPUSH
18824: CALL 14339 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18828: LD_INT 3
18830: PPUSH
18831: LD_INT 4
18833: PPUSH
18834: LD_INT 10
18836: PPUSH
18837: LD_EXP 39
18841: PPUSH
18842: CALL 14339 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18846: LD_INT 3
18848: PPUSH
18849: LD_INT 9
18851: PPUSH
18852: CALL 15540 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18856: LD_INT 3
18858: PPUSH
18859: LD_INT 10
18861: PPUSH
18862: CALL 15540 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18866: LD_INT 3
18868: PPUSH
18869: LD_INT 16
18871: PPUSH
18872: LD_INT 9
18874: PPUSH
18875: LD_INT 91
18877: PPUSH
18878: CALL 14730 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18882: LD_INT 3
18884: PPUSH
18885: LD_INT 17
18887: PPUSH
18888: LD_INT 10
18890: PPUSH
18891: LD_INT 47
18893: PUSH
18894: LD_INT 129
18896: PUSH
18897: LD_INT 135
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: LIST
18904: PPUSH
18905: CALL 14730 0 4
// AttackVehicles ( 3 ) ;
18909: LD_INT 3
18911: PPUSH
18912: CALL 15867 0 1
// IntBazooka ( 3 ) ;
18916: LD_INT 3
18918: PPUSH
18919: CALL 16360 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18923: LD_INT 3
18925: PPUSH
18926: LD_INT 1
18928: PPUSH
18929: CALL 15310 0 2
// end ;
18933: END
// every 0 0$1 do
18934: GO 18936
18936: DISABLE
// begin enable ;
18937: ENABLE
// TimeLapsersAI ( 3 ) ;
18938: LD_INT 3
18940: PPUSH
18941: CALL 16165 0 1
// end ;
18945: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18946: LD_INT 4
18948: PPUSH
18949: CALL_OW 303
18953: IFFALSE 18968
18955: GO 18957
18957: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
18958: LD_INT 3
18960: PPUSH
18961: LD_INT 4
18963: PPUSH
18964: CALL 17012 0 2
18968: END
// every 0 0$1 do
18969: GO 18971
18971: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
18972: LD_INT 3
18974: PPUSH
18975: LD_INT 91
18977: PPUSH
18978: LD_INT 3
18980: PPUSH
18981: CALL 14098 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
18985: LD_INT 3
18987: PPUSH
18988: LD_INT 47
18990: PPUSH
18991: LD_INT 3
18993: PPUSH
18994: CALL 14098 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
18998: LD_INT 3
19000: PPUSH
19001: LD_INT 129
19003: PPUSH
19004: LD_INT 3
19006: PPUSH
19007: CALL 14098 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
19011: LD_INT 3
19013: PPUSH
19014: LD_INT 3
19016: PPUSH
19017: LD_INT 3
19019: PPUSH
19020: CALL 14098 0 3
// end ;
19024: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19025: LD_EXP 28
19029: PUSH
19030: LD_INT 2
19032: EQUAL
19033: PUSH
19034: LD_INT 21
19036: PPUSH
19037: CALL_OW 255
19041: PUSH
19042: LD_INT 3
19044: EQUAL
19045: AND
19046: PUSH
19047: LD_INT 112
19049: PPUSH
19050: CALL_OW 255
19054: PUSH
19055: LD_INT 3
19057: EQUAL
19058: AND
19059: PUSH
19060: LD_INT 21
19062: PPUSH
19063: CALL_OW 302
19067: AND
19068: PUSH
19069: LD_INT 112
19071: PPUSH
19072: CALL_OW 302
19076: AND
19077: PUSH
19078: LD_INT 22
19080: PUSH
19081: LD_INT 3
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 21
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 50
19100: PUSH
19101: EMPTY
19102: LIST
19103: PUSH
19104: LD_INT 3
19106: PUSH
19107: LD_INT 58
19109: PUSH
19110: EMPTY
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: PPUSH
19123: CALL_OW 69
19127: PUSH
19128: LD_INT 18
19130: PPUSH
19131: LD_INT 22
19133: PUSH
19134: LD_INT 3
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 21
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 70
19159: PUSH
19160: LD_INT 0
19162: EQUAL
19163: DIFF
19164: AND
19165: IFFALSE 19283
19167: GO 19169
19169: DISABLE
// begin enable ;
19170: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19171: LD_INT 3
19173: PPUSH
19174: LD_INT 21
19176: PPUSH
19177: LD_INT 3
19179: PUSH
19180: LD_INT 4
19182: PUSH
19183: LD_INT 4
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: PUSH
19191: LD_OWVAR 67
19195: ARRAY
19196: PPUSH
19197: LD_INT 46
19199: PUSH
19200: LD_INT 45
19202: PUSH
19203: LD_INT 44
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: LIST
19210: PPUSH
19211: LD_INT 3
19213: PPUSH
19214: LD_INT 3
19216: PPUSH
19217: LD_INT 24
19219: PPUSH
19220: CALL 15720 0 7
// if russianTimeLapsers = 0 then
19224: LD_EXP 41
19228: PUSH
19229: LD_INT 0
19231: EQUAL
19232: IFFALSE 19283
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19234: LD_INT 3
19236: PPUSH
19237: LD_INT 112
19239: PPUSH
19240: LD_INT 1
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: LD_OWVAR 67
19258: ARRAY
19259: PPUSH
19260: LD_INT 49
19262: PUSH
19263: LD_INT 49
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PPUSH
19270: LD_INT 3
19272: PPUSH
19273: LD_INT 3
19275: PPUSH
19276: LD_INT 24
19278: PPUSH
19279: CALL 15720 0 7
// end ;
19283: END
// every 0 0$1 trigger arabianMines do var i ;
19284: LD_EXP 45
19288: IFFALSE 19409
19290: GO 19292
19292: DISABLE
19293: LD_INT 0
19295: PPUSH
// begin enable ;
19296: ENABLE
// for i in arabianMines do
19297: LD_ADDR_VAR 0 1
19301: PUSH
19302: LD_EXP 45
19306: PUSH
19307: FOR_IN
19308: IFFALSE 19407
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19310: LD_INT 22
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 92
19322: PUSH
19323: LD_VAR 0 1
19327: PUSH
19328: LD_INT 1
19330: ARRAY
19331: PUSH
19332: LD_VAR 0 1
19336: PUSH
19337: LD_INT 2
19339: ARRAY
19340: PUSH
19341: LD_INT 3
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PPUSH
19354: CALL_OW 69
19358: IFFALSE 19405
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19360: LD_VAR 0 1
19364: PUSH
19365: LD_INT 1
19367: ARRAY
19368: PPUSH
19369: LD_VAR 0 1
19373: PUSH
19374: LD_INT 2
19376: ARRAY
19377: PPUSH
19378: LD_INT 5
19380: PPUSH
19381: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19385: LD_ADDR_EXP 45
19389: PUSH
19390: LD_EXP 45
19394: PPUSH
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 3
19404: ST_TO_ADDR
// end ; end ;
19405: GO 19307
19407: POP
19408: POP
// end ;
19409: PPOPN 1
19411: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19412: LD_EXP 29
19416: PUSH
19417: LD_INT 4
19419: EQUAL
19420: PUSH
19421: LD_EXP 30
19425: PUSH
19426: LD_INT 6
19428: PUSH
19429: LD_INT 8
19431: PUSH
19432: LD_INT 8
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: LD_OWVAR 67
19444: ARRAY
19445: EQUAL
19446: AND
19447: IFFALSE 19465
19449: GO 19451
19451: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19452: LD_INT 10
19454: PPUSH
19455: LD_INT 47
19457: PPUSH
19458: LD_INT 82
19460: PPUSH
19461: CALL_OW 243
19465: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19466: LD_EXP 29
19470: PUSH
19471: LD_INT 4
19473: EQUAL
19474: IFFALSE 19496
19476: GO 19478
19478: DISABLE
// begin enable ;
19479: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19480: LD_ADDR_EXP 44
19484: PUSH
19485: LD_INT 1
19487: PPUSH
19488: LD_INT 2
19490: PPUSH
19491: CALL_OW 12
19495: ST_TO_ADDR
// end ; end_of_file
19496: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19497: LD_EXP 35
19501: PUSH
19502: EMPTY
19503: EQUAL
19504: PUSH
19505: LD_INT 3
19507: PPUSH
19508: CALL_OW 301
19512: AND
19513: IFFALSE 19718
19515: GO 19517
19517: DISABLE
// begin if sciCounter = 0 then
19518: LD_EXP 36
19522: PUSH
19523: LD_INT 0
19525: EQUAL
19526: IFFALSE 19552
// begin Say ( JMM , D7a-JMM-1 ) ;
19528: LD_EXP 1
19532: PPUSH
19533: LD_STRING D7a-JMM-1
19535: PPUSH
19536: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19540: LD_EXP 22
19544: PPUSH
19545: LD_STRING D7a-Pow-1
19547: PPUSH
19548: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19552: LD_EXP 36
19556: PUSH
19557: LD_INT 0
19559: GREATER
19560: PUSH
19561: LD_EXP 36
19565: PUSH
19566: LD_INT 6
19568: LESS
19569: AND
19570: IFFALSE 19596
// begin Say ( JMM , D7b-JMM-1 ) ;
19572: LD_EXP 1
19576: PPUSH
19577: LD_STRING D7b-JMM-1
19579: PPUSH
19580: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19584: LD_EXP 22
19588: PPUSH
19589: LD_STRING D7b-Pow-1
19591: PPUSH
19592: CALL_OW 94
// end ; if sciCounter = 6 then
19596: LD_EXP 36
19600: PUSH
19601: LD_INT 6
19603: EQUAL
19604: IFFALSE 19714
// begin Say ( JMM , D7c-JMM-1 ) ;
19606: LD_EXP 1
19610: PPUSH
19611: LD_STRING D7c-JMM-1
19613: PPUSH
19614: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19618: LD_EXP 22
19622: PPUSH
19623: LD_STRING D7c-Pow-1
19625: PPUSH
19626: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19630: LD_EXP 1
19634: PPUSH
19635: LD_STRING D7d-JMM-1
19637: PPUSH
19638: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19642: LD_EXP 22
19646: PPUSH
19647: LD_STRING D7d-Pow-1
19649: PPUSH
19650: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19654: LD_EXP 1
19658: PPUSH
19659: LD_STRING D7d-JMM-2
19661: PPUSH
19662: CALL_OW 88
// if askSiberite = 1 then
19666: LD_EXP 33
19670: PUSH
19671: LD_INT 1
19673: EQUAL
19674: IFFALSE 19690
// begin Say ( JMM , D7d-JMM-2a ) ;
19676: LD_EXP 1
19680: PPUSH
19681: LD_STRING D7d-JMM-2a
19683: PPUSH
19684: CALL_OW 88
// end else
19688: GO 19702
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19690: LD_EXP 22
19694: PPUSH
19695: LD_STRING D7d-Pow-2
19697: PPUSH
19698: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19702: LD_EXP 22
19706: PPUSH
19707: LD_STRING D7d-Pow-2a
19709: PPUSH
19710: CALL_OW 94
// end ; FinishMission ;
19714: CALL 19719 0 0
// end ;
19718: END
// export function FinishMission ; begin
19719: LD_INT 0
19721: PPUSH
// if teleportExplored = 1 then
19722: LD_EXP 34
19726: PUSH
19727: LD_INT 1
19729: EQUAL
19730: IFFALSE 19744
// AddMedal ( Teleport , 1 ) else
19732: LD_STRING Teleport
19734: PPUSH
19735: LD_INT 1
19737: PPUSH
19738: CALL_OW 101
19742: GO 19755
// AddMedal ( Teleport , - 1 ) ;
19744: LD_STRING Teleport
19746: PPUSH
19747: LD_INT 1
19749: NEG
19750: PPUSH
19751: CALL_OW 101
// if sciCounter > 2 then
19755: LD_EXP 36
19759: PUSH
19760: LD_INT 2
19762: GREATER
19763: IFFALSE 19777
// AddMedal ( Materials , 1 ) else
19765: LD_STRING Materials
19767: PPUSH
19768: LD_INT 1
19770: PPUSH
19771: CALL_OW 101
19775: GO 19788
// AddMedal ( Materials , - 1 ) ;
19777: LD_STRING Materials
19779: PPUSH
19780: LD_INT 1
19782: NEG
19783: PPUSH
19784: CALL_OW 101
// if sciCounter = 6 then
19788: LD_EXP 36
19792: PUSH
19793: LD_INT 6
19795: EQUAL
19796: IFFALSE 19820
// begin AddMedal ( Scientists , 1 ) ;
19798: LD_STRING Scientists
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19808: LD_INT 1
19810: PPUSH
19811: LD_STRING 12_SciDed_1
19813: PPUSH
19814: CALL_OW 39
// end else
19818: GO 19841
// begin AddMedal ( Scientists , - 1 ) ;
19820: LD_STRING Scientists
19822: PPUSH
19823: LD_INT 1
19825: NEG
19826: PPUSH
19827: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19831: LD_INT 0
19833: PPUSH
19834: LD_STRING 12_SciDed_1
19836: PPUSH
19837: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19841: LD_EXP 32
19845: PPUSH
19846: LD_STRING 12_MainDepositFake_1
19848: PPUSH
19849: CALL_OW 39
// GiveMedals ( MAIN ) ;
19853: LD_STRING MAIN
19855: PPUSH
19856: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19860: LD_INT 22
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 21
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: LD_INT 25
19885: PUSH
19886: LD_INT 1
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 25
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 25
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 25
19915: PUSH
19916: LD_INT 4
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 25
19925: PUSH
19926: LD_INT 5
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 25
19935: PUSH
19936: LD_INT 8
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: LIST
19956: PPUSH
19957: CALL_OW 69
19961: PPUSH
19962: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19966: LD_EXP 1
19970: PPUSH
19971: LD_EXP 47
19975: PUSH
19976: LD_STRING JMM
19978: STR
19979: PPUSH
19980: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19984: LD_EXP 7
19988: PPUSH
19989: LD_EXP 47
19993: PUSH
19994: LD_STRING Brown
19996: STR
19997: PPUSH
19998: CALL 13263 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20002: LD_EXP 3
20006: PPUSH
20007: LD_EXP 47
20011: PUSH
20012: LD_STRING Donaldson
20014: STR
20015: PPUSH
20016: CALL 13263 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20020: LD_EXP 4
20024: PPUSH
20025: LD_EXP 47
20029: PUSH
20030: LD_STRING Bobby
20032: STR
20033: PPUSH
20034: CALL 13263 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20038: LD_EXP 5
20042: PPUSH
20043: LD_EXP 47
20047: PUSH
20048: LD_STRING Cyrus
20050: STR
20051: PPUSH
20052: CALL 13263 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20056: LD_EXP 2
20060: PPUSH
20061: LD_EXP 47
20065: PUSH
20066: LD_STRING Lisa
20068: STR
20069: PPUSH
20070: CALL 13263 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20074: LD_EXP 12
20078: PPUSH
20079: LD_EXP 47
20083: PUSH
20084: LD_STRING Frank
20086: STR
20087: PPUSH
20088: CALL 13263 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20092: LD_EXP 13
20096: PPUSH
20097: LD_EXP 47
20101: PUSH
20102: LD_STRING Kikuchi
20104: STR
20105: PPUSH
20106: CALL 13263 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20110: LD_EXP 9
20114: PPUSH
20115: LD_EXP 47
20119: PUSH
20120: LD_STRING Houten
20122: STR
20123: PPUSH
20124: CALL 13263 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20128: LD_EXP 11
20132: PPUSH
20133: LD_EXP 47
20137: PUSH
20138: LD_STRING Gary
20140: STR
20141: PPUSH
20142: CALL 13263 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20146: LD_EXP 10
20150: PPUSH
20151: LD_EXP 47
20155: PUSH
20156: LD_STRING Cornell
20158: STR
20159: PPUSH
20160: CALL 13263 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20164: LD_EXP 6
20168: PPUSH
20169: LD_EXP 47
20173: PUSH
20174: LD_STRING Denis
20176: STR
20177: PPUSH
20178: CALL 13263 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20182: LD_EXP 8
20186: PPUSH
20187: LD_EXP 47
20191: PUSH
20192: LD_STRING Gladstone
20194: STR
20195: PPUSH
20196: CALL 13263 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20200: LD_INT 50
20202: PUSH
20203: EMPTY
20204: LIST
20205: PUSH
20206: LD_INT 22
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 23
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 21
20228: PUSH
20229: LD_INT 1
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: LD_INT 25
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 25
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 25
20261: PUSH
20262: LD_INT 3
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 25
20271: PUSH
20272: LD_INT 4
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 25
20281: PUSH
20282: LD_INT 5
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 25
20291: PUSH
20292: LD_INT 8
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: PPUSH
20315: CALL_OW 69
20319: PUSH
20320: LD_EXP 1
20324: PUSH
20325: LD_EXP 7
20329: PUSH
20330: LD_EXP 3
20334: PUSH
20335: LD_EXP 4
20339: PUSH
20340: LD_EXP 5
20344: PUSH
20345: LD_EXP 2
20349: PUSH
20350: LD_EXP 12
20354: PUSH
20355: LD_EXP 8
20359: PUSH
20360: LD_EXP 13
20364: PUSH
20365: LD_EXP 6
20369: PUSH
20370: LD_EXP 9
20374: PUSH
20375: LD_EXP 11
20379: PUSH
20380: LD_EXP 10
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: DIFF
20400: PPUSH
20401: LD_STRING 12_other_survivors
20403: PPUSH
20404: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20408: LD_INT 50
20410: PUSH
20411: EMPTY
20412: LIST
20413: PUSH
20414: LD_INT 22
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 23
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 21
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: LD_INT 25
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 25
20459: PUSH
20460: LD_INT 2
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 25
20469: PUSH
20470: LD_INT 3
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 25
20479: PUSH
20480: LD_INT 4
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 25
20489: PUSH
20490: LD_INT 5
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 25
20499: PUSH
20500: LD_INT 8
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: PPUSH
20523: CALL_OW 69
20527: PPUSH
20528: LD_STRING 12_kurt_squad
20530: PPUSH
20531: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
20535: LD_EXP 14
20539: PPUSH
20540: LD_STRING 12_others
20542: PPUSH
20543: CALL_OW 38
// YouWin ;
20547: CALL_OW 103
// end ; end_of_file
20551: LD_VAR 0 1
20555: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20556: LD_EXP 1
20560: PPUSH
20561: CALL_OW 301
20565: IFFALSE 20577
20567: GO 20569
20569: DISABLE
// YouLost ( JMM ) ; end_of_file
20570: LD_STRING JMM
20572: PPUSH
20573: CALL_OW 104
20577: END
// every 0 0$01 do
20578: GO 20580
20580: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20581: LD_INT 1050
20583: PPUSH
20584: CALL_OW 67
// if cratesSpawned < 6 then
20588: LD_EXP 46
20592: PUSH
20593: LD_INT 6
20595: LESS
20596: IFFALSE 20633
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20598: LD_INT 3
20600: PPUSH
20601: LD_INT 5
20603: PPUSH
20604: CALL_OW 12
20608: PPUSH
20609: LD_INT 21
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20619: LD_ADDR_EXP 46
20623: PUSH
20624: LD_EXP 46
20628: PUSH
20629: LD_INT 1
20631: PLUS
20632: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20633: LD_EXP 46
20637: PUSH
20638: LD_INT 6
20640: GREATEREQUAL
20641: PUSH
20642: LD_EXP 46
20646: PUSH
20647: LD_INT 12
20649: LESS
20650: AND
20651: IFFALSE 20695
// begin wait ( 0 0$30 ) ;
20653: LD_INT 1050
20655: PPUSH
20656: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20660: LD_INT 3
20662: PPUSH
20663: LD_INT 5
20665: PPUSH
20666: CALL_OW 12
20670: PPUSH
20671: LD_INT 21
20673: PPUSH
20674: LD_INT 1
20676: PPUSH
20677: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20681: LD_ADDR_EXP 46
20685: PUSH
20686: LD_EXP 46
20690: PUSH
20691: LD_INT 1
20693: PLUS
20694: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20695: LD_EXP 46
20699: PUSH
20700: LD_INT 12
20702: GREATEREQUAL
20703: IFFALSE 20747
// begin wait ( 1 1$30 ) ;
20705: LD_INT 3150
20707: PPUSH
20708: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20712: LD_INT 3
20714: PPUSH
20715: LD_INT 5
20717: PPUSH
20718: CALL_OW 12
20722: PPUSH
20723: LD_INT 21
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20733: LD_ADDR_EXP 46
20737: PUSH
20738: LD_EXP 46
20742: PUSH
20743: LD_INT 1
20745: PLUS
20746: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20747: LD_EXP 46
20751: PUSH
20752: LD_INT 15
20754: GREATEREQUAL
20755: IFFALSE 20581
// end ;
20757: END
