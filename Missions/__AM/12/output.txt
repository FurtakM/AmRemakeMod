// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 44
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 43
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// eventVar1 = 0 ;
 159: LD_ADDR_EXP 47
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// mission_prefix = 12_ ;
 167: LD_ADDR_EXP 46
 171: PUSH
 172: LD_STRING 12_
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 48
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareNature ;
 183: CALL 15594 0 0
// PrepareDifficulty ;
 187: CALL 12540 0 0
// PrepareVehicles ;
 191: CALL 1539 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 195: LD_INT 4
 197: PPUSH
 198: LD_INT 0
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL 1115 0 4
// PrepareAmericanHeroes ;
 211: CALL 549 0 0
// PrepareRussianCommander ;
 215: CALL 2858 0 0
// PrepareWestBase ;
 219: CALL 3370 0 0
// PrepareEastBase ;
 223: CALL 2930 0 0
// PrepareOtherRussians ;
 227: CALL 3482 0 0
// end ;
 231: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 232: LD_EXP 48
 236: PUSH
 237: LD_INT 1
 239: EQUAL
 240: IFFALSE 546
 242: GO 244
 244: DISABLE
 245: LD_INT 0
 247: PPUSH
// begin enable ;
 248: ENABLE
// fogoff ( true ) ;
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 256: LD_ADDR_VAR 0 1
 260: PUSH
 261: LD_INT 22
 263: PUSH
 264: LD_INT 1
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: LD_INT 21
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PPUSH
 285: CALL_OW 69
 289: PUSH
 290: FOR_IN
 291: IFFALSE 307
// SetLives ( i , 1000 ) ;
 293: LD_VAR 0 1
 297: PPUSH
 298: LD_INT 1000
 300: PPUSH
 301: CALL_OW 234
 305: GO 290
 307: POP
 308: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 309: LD_ADDR_VAR 0 1
 313: PUSH
 314: LD_INT 22
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 2
 326: PUSH
 327: LD_INT 30
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 30
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PPUSH
 356: CALL_OW 69
 360: PUSH
 361: FOR_IN
 362: IFFALSE 386
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 364: LD_VAR 0 1
 368: PPUSH
 369: CALL_OW 274
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_INT 9999
 379: PPUSH
 380: CALL_OW 277
 384: GO 361
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 2
 405: PUSH
 406: LD_INT 30
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 30
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PPUSH
 435: CALL_OW 69
 439: PUSH
 440: FOR_IN
 441: IFFALSE 465
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 443: LD_VAR 0 1
 447: PPUSH
 448: CALL_OW 274
 452: PPUSH
 453: LD_INT 2
 455: PPUSH
 456: LD_INT 9999
 458: PPUSH
 459: CALL_OW 277
 463: GO 440
 465: POP
 466: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 467: LD_ADDR_VAR 0 1
 471: PUSH
 472: LD_INT 22
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: LD_INT 30
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PUSH
 495: LD_INT 30
 497: PUSH
 498: LD_INT 1
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: LIST
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PPUSH
 514: CALL_OW 69
 518: PUSH
 519: FOR_IN
 520: IFFALSE 544
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 522: LD_VAR 0 1
 526: PPUSH
 527: CALL_OW 274
 531: PPUSH
 532: LD_INT 3
 534: PPUSH
 535: LD_INT 9999
 537: PPUSH
 538: CALL_OW 277
 542: GO 519
 544: POP
 545: POP
// end ; end_of_file
 546: PPOPN 1
 548: END
// export function PrepareAmericanHeroes ; begin
 549: LD_INT 0
 551: PPUSH
// uc_side = 1 ;
 552: LD_ADDR_OWVAR 20
 556: PUSH
 557: LD_INT 1
 559: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 560: LD_ADDR_EXP 14
 564: PUSH
 565: LD_STRING 11_others
 567: PPUSH
 568: CALL_OW 31
 572: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 573: LD_ADDR_EXP 1
 577: PUSH
 578: LD_STRING 11_JMM
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL 12179 0 2
 588: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 589: LD_EXP 1
 593: PPUSH
 594: LD_INT 1
 596: PPUSH
 597: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 601: LD_EXP 1
 605: PPUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 1
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: LD_INT 21
 618: PUSH
 619: LD_INT 2
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: LD_INT 58
 628: PUSH
 629: EMPTY
 630: LIST
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: PPUSH
 637: CALL_OW 69
 641: PUSH
 642: LD_INT 1
 644: ARRAY
 645: PPUSH
 646: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 650: LD_STRING 11_Lisa
 652: PPUSH
 653: CALL_OW 28
 657: PUSH
 658: LD_INT 1
 660: EQUAL
 661: IFFALSE 708
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 663: LD_ADDR_EXP 2
 667: PUSH
 668: LD_STRING 11_Lisa
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: CALL 12179 0 2
 678: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 679: LD_EXP 2
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 691: LD_EXP 2
 695: PPUSH
 696: LD_INT 4
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL_OW 49
// end else
 706: GO 724
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 708: LD_INT 4
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: LD_INT 1
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL 1115 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 724: LD_STRING 11_Donaldson
 726: PPUSH
 727: CALL_OW 28
 731: PUSH
 732: LD_INT 1
 734: EQUAL
 735: IFFALSE 782
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 737: LD_ADDR_EXP 3
 741: PUSH
 742: LD_STRING 11_Donaldson
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: CALL 12179 0 2
 752: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 753: LD_EXP 3
 757: PPUSH
 758: LD_INT 1
 760: PPUSH
 761: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 765: LD_EXP 3
 769: PPUSH
 770: LD_INT 4
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end else
 780: GO 798
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 782: LD_INT 4
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL 1115 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 798: LD_STRING 11_Cyrus
 800: PPUSH
 801: CALL_OW 28
 805: PUSH
 806: LD_INT 1
 808: EQUAL
 809: IFFALSE 856
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 811: LD_ADDR_EXP 5
 815: PUSH
 816: LD_STRING 11_Cyrus
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: CALL 12179 0 2
 826: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 827: LD_EXP 5
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 839: LD_EXP 5
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// end else
 854: GO 872
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 856: LD_INT 4
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 1115 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 872: LD_STRING 11_Denis
 874: PPUSH
 875: CALL_OW 28
 879: PUSH
 880: LD_INT 1
 882: EQUAL
 883: IFFALSE 930
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 885: LD_ADDR_EXP 6
 889: PUSH
 890: LD_STRING 11_Denis
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 12179 0 2
 900: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 901: LD_EXP 6
 905: PPUSH
 906: LD_INT 4
 908: PPUSH
 909: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 913: LD_EXP 6
 917: PPUSH
 918: LD_INT 4
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
// end else
 928: GO 946
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 930: LD_INT 4
 932: PPUSH
 933: LD_INT 0
 935: PPUSH
 936: LD_INT 1
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL 1115 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 946: LD_STRING 11_Frank
 948: PPUSH
 949: CALL_OW 28
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1004
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 959: LD_ADDR_EXP 12
 963: PUSH
 964: LD_STRING 11_Frank
 966: PPUSH
 967: LD_INT 1
 969: PPUSH
 970: CALL 12179 0 2
 974: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 975: LD_EXP 12
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 987: LD_EXP 12
 991: PPUSH
 992: LD_INT 4
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// end else
1002: GO 1020
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1004: LD_INT 4
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_INT 0
1015: PPUSH
1016: CALL 1115 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1020: LD_STRING 11_Cornell
1022: PPUSH
1023: CALL_OW 28
1027: PUSH
1028: LD_INT 1
1030: EQUAL
1031: IFFALSE 1078
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1033: LD_ADDR_EXP 10
1037: PUSH
1038: LD_STRING 11_Cornell
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: CALL 12179 0 2
1048: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1049: LD_EXP 10
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1061: LD_EXP 10
1065: PPUSH
1066: LD_INT 4
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 49
// end else
1076: GO 1094
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1078: LD_INT 4
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_INT 0
1089: PPUSH
1090: CALL 1115 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1094: LD_ADDR_EXP 22
1098: PUSH
1099: LD_STRING Powell
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL 12179 0 2
1109: ST_TO_ADDR
// end ;
1110: LD_VAR 0 1
1114: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1115: LD_INT 0
1117: PPUSH
1118: PPUSH
1119: PPUSH
1120: PPUSH
1121: PPUSH
// if mech = 1 then
1122: LD_VAR 0 4
1126: PUSH
1127: LD_INT 1
1129: EQUAL
1130: IFFALSE 1365
// begin if others11 > 0 then
1132: LD_EXP 14
1136: PUSH
1137: LD_INT 0
1139: GREATER
1140: IFFALSE 1305
// begin for i := 1 to others11 - 1 do
1142: LD_ADDR_VAR 0 6
1146: PUSH
1147: DOUBLE
1148: LD_INT 1
1150: DEC
1151: ST_TO_ADDR
1152: LD_EXP 14
1156: PUSH
1157: LD_INT 1
1159: MINUS
1160: PUSH
1161: FOR_TO
1162: IFFALSE 1242
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1164: LD_EXP 14
1168: PUSH
1169: LD_VAR 0 6
1173: ARRAY
1174: PPUSH
1175: LD_INT 3
1177: PPUSH
1178: CALL_OW 259
1182: PUSH
1183: LD_EXP 14
1187: PUSH
1188: LD_VAR 0 6
1192: PUSH
1193: LD_INT 1
1195: PLUS
1196: ARRAY
1197: PPUSH
1198: LD_INT 3
1200: PPUSH
1201: CALL_OW 259
1205: LESS
1206: IFFALSE 1240
// begin mecha = others11 [ i + 1 ] ;
1208: LD_ADDR_VAR 0 9
1212: PUSH
1213: LD_EXP 14
1217: PUSH
1218: LD_VAR 0 6
1222: PUSH
1223: LD_INT 1
1225: PLUS
1226: ARRAY
1227: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1228: LD_VAR 0 9
1232: PPUSH
1233: LD_INT 3
1235: PPUSH
1236: CALL_OW 336
// end ; end ;
1240: GO 1161
1242: POP
1243: POP
// if spawnMode = 1 then
1244: LD_VAR 0 3
1248: PUSH
1249: LD_INT 1
1251: EQUAL
1252: IFFALSE 1273
// PlaceUnitArea ( mecha , area , false ) else
1254: LD_VAR 0 9
1258: PPUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL_OW 49
1271: GO 1287
// PlaceHumanInUnit ( mecha , veh ) ;
1273: LD_VAR 0 9
1277: PPUSH
1278: LD_VAR 0 2
1282: PPUSH
1283: CALL_OW 52
// others11 = others11 diff mecha ;
1287: LD_ADDR_EXP 14
1291: PUSH
1292: LD_EXP 14
1296: PUSH
1297: LD_VAR 0 9
1301: DIFF
1302: ST_TO_ADDR
// end else
1303: GO 1363
// begin hc_name =  ;
1305: LD_ADDR_OWVAR 26
1309: PUSH
1310: LD_STRING 
1312: ST_TO_ADDR
// hc_gallery =  ;
1313: LD_ADDR_OWVAR 33
1317: PUSH
1318: LD_STRING 
1320: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1321: LD_INT 0
1323: PPUSH
1324: LD_INT 7
1326: PPUSH
1327: LD_INT 9
1329: PPUSH
1330: CALL_OW 12
1334: PPUSH
1335: CALL_OW 383
// un = CreateHuman ;
1339: LD_ADDR_VAR 0 7
1343: PUSH
1344: CALL_OW 44
1348: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1349: LD_VAR 0 7
1353: PPUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: CALL_OW 52
// end ; end else
1363: GO 1534
// begin if others11 > 0 then
1365: LD_EXP 14
1369: PUSH
1370: LD_INT 0
1372: GREATER
1373: IFFALSE 1446
// begin if spawnMode = 1 then
1375: LD_VAR 0 3
1379: PUSH
1380: LD_INT 1
1382: EQUAL
1383: IFFALSE 1408
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1385: LD_EXP 14
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: LD_VAR 0 1
1398: PPUSH
1399: LD_INT 0
1401: PPUSH
1402: CALL_OW 49
1406: GO 1426
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1408: LD_EXP 14
1412: PUSH
1413: LD_INT 1
1415: ARRAY
1416: PPUSH
1417: LD_VAR 0 2
1421: PPUSH
1422: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1426: LD_ADDR_EXP 14
1430: PUSH
1431: LD_EXP 14
1435: PPUSH
1436: LD_INT 1
1438: PPUSH
1439: CALL_OW 3
1443: ST_TO_ADDR
// end else
1444: GO 1534
// begin hc_name =  ;
1446: LD_ADDR_OWVAR 26
1450: PUSH
1451: LD_STRING 
1453: ST_TO_ADDR
// hc_gallery =  ;
1454: LD_ADDR_OWVAR 33
1458: PUSH
1459: LD_STRING 
1461: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1462: LD_INT 0
1464: PPUSH
1465: LD_INT 1
1467: PUSH
1468: LD_INT 2
1470: PUSH
1471: LD_INT 3
1473: PUSH
1474: LD_INT 4
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 4
1488: PPUSH
1489: CALL_OW 12
1493: ARRAY
1494: PPUSH
1495: LD_INT 7
1497: PPUSH
1498: LD_INT 9
1500: PPUSH
1501: CALL_OW 12
1505: PPUSH
1506: CALL_OW 380
// un = CreateHuman ;
1510: LD_ADDR_VAR 0 7
1514: PUSH
1515: CALL_OW 44
1519: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1520: LD_VAR 0 7
1524: PPUSH
1525: LD_VAR 0 2
1529: PPUSH
1530: CALL_OW 52
// end ; end ; end ;
1534: LD_VAR 0 5
1538: RET
// export function PrepareVehicles ; var veh ; begin
1539: LD_INT 0
1541: PPUSH
1542: PPUSH
// uc_side = 1 ;
1543: LD_ADDR_OWVAR 20
1547: PUSH
1548: LD_INT 1
1550: ST_TO_ADDR
// uc_nation = 1 ;
1551: LD_ADDR_OWVAR 21
1555: PUSH
1556: LD_INT 1
1558: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1559: LD_ADDR_OWVAR 37
1563: PUSH
1564: LD_INT 3
1566: ST_TO_ADDR
// vc_engine = 3 ;
1567: LD_ADDR_OWVAR 39
1571: PUSH
1572: LD_INT 3
1574: ST_TO_ADDR
// vc_control = 3 ;
1575: LD_ADDR_OWVAR 38
1579: PUSH
1580: LD_INT 3
1582: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1583: LD_ADDR_OWVAR 40
1587: PUSH
1588: LD_INT 4
1590: ST_TO_ADDR
// veh = CreateVehicle ;
1591: LD_ADDR_VAR 0 2
1595: PUSH
1596: CALL_OW 45
1600: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_INT 4
1608: PPUSH
1609: LD_INT 0
1611: PPUSH
1612: CALL_OW 49
// vc_weapon = us_double_gun ;
1616: LD_ADDR_OWVAR 40
1620: PUSH
1621: LD_INT 5
1623: ST_TO_ADDR
// vc_control = 1 ;
1624: LD_ADDR_OWVAR 38
1628: PUSH
1629: LD_INT 1
1631: ST_TO_ADDR
// veh = CreateVehicle ;
1632: LD_ADDR_VAR 0 2
1636: PUSH
1637: CALL_OW 45
1641: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_INT 4
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// vc_weapon = us_light_gun ;
1657: LD_ADDR_OWVAR 40
1661: PUSH
1662: LD_INT 3
1664: ST_TO_ADDR
// vc_control = 3 ;
1665: LD_ADDR_OWVAR 38
1669: PUSH
1670: LD_INT 3
1672: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1673: LD_ADDR_OWVAR 37
1677: PUSH
1678: LD_INT 2
1680: ST_TO_ADDR
// veh = CreateVehicle ;
1681: LD_ADDR_VAR 0 2
1685: PUSH
1686: CALL_OW 45
1690: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1691: LD_VAR 0 2
1695: PPUSH
1696: LD_INT 4
1698: PPUSH
1699: LD_INT 0
1701: PPUSH
1702: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1706: LD_ADDR_OWVAR 40
1710: PUSH
1711: LD_INT 4
1713: ST_TO_ADDR
// veh = CreateVehicle ;
1714: LD_ADDR_VAR 0 2
1718: PUSH
1719: CALL_OW 45
1723: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1724: LD_VAR 0 2
1728: PPUSH
1729: LD_INT 4
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// end ;
1739: LD_VAR 0 1
1743: RET
// export function PowellSupport1 ; var veh , un ; begin
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
// uc_side = 1 ;
1749: LD_ADDR_OWVAR 20
1753: PUSH
1754: LD_INT 1
1756: ST_TO_ADDR
// uc_nation = 1 ;
1757: LD_ADDR_OWVAR 21
1761: PUSH
1762: LD_INT 1
1764: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1765: LD_STRING 11_Brown
1767: PPUSH
1768: CALL_OW 28
1772: PUSH
1773: LD_INT 1
1775: EQUAL
1776: IFFALSE 1823
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1778: LD_ADDR_EXP 7
1782: PUSH
1783: LD_STRING 11_Brown
1785: PPUSH
1786: LD_INT 1
1788: PPUSH
1789: CALL 12179 0 2
1793: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1794: LD_EXP 7
1798: PPUSH
1799: LD_INT 2
1801: PPUSH
1802: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1806: LD_EXP 7
1810: PPUSH
1811: LD_INT 4
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL_OW 49
// end else
1821: GO 1839
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1823: LD_INT 4
1825: PPUSH
1826: LD_INT 0
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL 1115 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1839: LD_STRING 11_Gary
1841: PPUSH
1842: CALL_OW 28
1846: PUSH
1847: LD_INT 1
1849: EQUAL
1850: IFFALSE 1897
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1852: LD_ADDR_EXP 11
1856: PUSH
1857: LD_STRING 11_Gary
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL 12179 0 2
1867: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1868: LD_EXP 11
1872: PPUSH
1873: LD_INT 2
1875: PPUSH
1876: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1880: LD_EXP 11
1884: PPUSH
1885: LD_INT 4
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 49
// end else
1895: GO 1913
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1897: LD_INT 4
1899: PPUSH
1900: LD_INT 0
1902: PPUSH
1903: LD_INT 1
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL 1115 0 4
// end ; vc_chassis = us_medium_tracked ;
1913: LD_ADDR_OWVAR 37
1917: PUSH
1918: LD_INT 3
1920: ST_TO_ADDR
// vc_engine = 3 ;
1921: LD_ADDR_OWVAR 39
1925: PUSH
1926: LD_INT 3
1928: ST_TO_ADDR
// vc_control = 1 ;
1929: LD_ADDR_OWVAR 38
1933: PUSH
1934: LD_INT 1
1936: ST_TO_ADDR
// vc_weapon = us_crane ;
1937: LD_ADDR_OWVAR 40
1941: PUSH
1942: LD_INT 13
1944: ST_TO_ADDR
// veh = CreateVehicle ;
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: CALL_OW 45
1954: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_INT 4
1962: PPUSH
1963: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1967: LD_VAR 0 2
1971: PPUSH
1972: LD_INT 4
1974: PPUSH
1975: LD_INT 0
1977: PPUSH
1978: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
1982: LD_INT 4
1984: PPUSH
1985: LD_VAR 0 2
1989: PPUSH
1990: LD_INT 2
1992: PPUSH
1993: LD_INT 1
1995: PPUSH
1996: CALL 1115 0 4
// vc_weapon = 9 ;
2000: LD_ADDR_OWVAR 40
2004: PUSH
2005: LD_INT 9
2007: ST_TO_ADDR
// veh = CreateVehicle ;
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: CALL_OW 45
2017: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2018: LD_VAR 0 2
2022: PPUSH
2023: LD_INT 4
2025: PPUSH
2026: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_INT 4
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2045: LD_INT 4
2047: PPUSH
2048: LD_VAR 0 2
2052: PPUSH
2053: LD_INT 2
2055: PPUSH
2056: LD_INT 1
2058: PPUSH
2059: CALL 1115 0 4
// vc_control = 3 ;
2063: LD_ADDR_OWVAR 38
2067: PUSH
2068: LD_INT 3
2070: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2071: LD_ADDR_OWVAR 40
2075: PUSH
2076: LD_INT 12
2078: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2079: LD_ADDR_EXP 15
2083: PUSH
2084: CALL_OW 45
2088: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2089: LD_ADDR_EXP 16
2093: PUSH
2094: CALL_OW 45
2098: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2099: LD_EXP 15
2103: PPUSH
2104: LD_INT 4
2106: PPUSH
2107: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2111: LD_EXP 16
2115: PPUSH
2116: LD_INT 4
2118: PPUSH
2119: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2123: LD_EXP 15
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2138: LD_EXP 16
2142: PPUSH
2143: LD_INT 4
2145: PPUSH
2146: LD_INT 0
2148: PPUSH
2149: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2153: LD_EXP 15
2157: PPUSH
2158: LD_INT 3
2160: PPUSH
2161: LD_INT 100
2163: PPUSH
2164: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2168: LD_EXP 16
2172: PPUSH
2173: LD_INT 1
2175: PPUSH
2176: LD_INT 80
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2183: LD_EXP 16
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: LD_INT 20
2193: PPUSH
2194: CALL_OW 291
// end ;
2198: LD_VAR 0 1
2202: RET
// export function PowellSupport2 ; var veh , un ; begin
2203: LD_INT 0
2205: PPUSH
2206: PPUSH
2207: PPUSH
// uc_side = 1 ;
2208: LD_ADDR_OWVAR 20
2212: PUSH
2213: LD_INT 1
2215: ST_TO_ADDR
// uc_nation = 1 ;
2216: LD_ADDR_OWVAR 21
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2224: LD_ADDR_OWVAR 37
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// vc_engine = 3 ;
2232: LD_ADDR_OWVAR 39
2236: PUSH
2237: LD_INT 3
2239: ST_TO_ADDR
// vc_control = 3 ;
2240: LD_ADDR_OWVAR 38
2244: PUSH
2245: LD_INT 3
2247: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2248: LD_ADDR_OWVAR 40
2252: PUSH
2253: LD_INT 3
2255: ST_TO_ADDR
// veh = CreateVehicle ;
2256: LD_ADDR_VAR 0 2
2260: PUSH
2261: CALL_OW 45
2265: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 4
2273: PPUSH
2274: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2278: LD_VAR 0 2
2282: PPUSH
2283: LD_INT 4
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: CALL_OW 49
// vc_control = 1 ;
2293: LD_ADDR_OWVAR 38
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2301: LD_ADDR_OWVAR 37
2305: PUSH
2306: LD_INT 2
2308: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2309: LD_ADDR_OWVAR 40
2313: PUSH
2314: LD_INT 5
2316: ST_TO_ADDR
// veh = CreateVehicle ;
2317: LD_ADDR_VAR 0 2
2321: PUSH
2322: CALL_OW 45
2326: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2327: LD_VAR 0 2
2331: PPUSH
2332: LD_INT 4
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_INT 4
2346: PPUSH
2347: LD_INT 0
2349: PPUSH
2350: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2354: LD_STRING 11_Bobby
2356: PPUSH
2357: CALL_OW 28
2361: PUSH
2362: LD_INT 1
2364: EQUAL
2365: IFFALSE 2411
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2367: LD_ADDR_EXP 4
2371: PUSH
2372: LD_STRING 11_Bobby
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: CALL 12179 0 2
2382: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2383: LD_EXP 4
2387: PPUSH
2388: LD_INT 3
2390: PPUSH
2391: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2395: LD_EXP 4
2399: PPUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL_OW 52
// end else
2409: GO 2429
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2411: LD_INT 0
2413: PPUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: LD_INT 2
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: CALL 1115 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2429: LD_STRING 11_Houten
2431: PPUSH
2432: CALL_OW 28
2436: PUSH
2437: LD_INT 1
2439: EQUAL
2440: IFFALSE 2487
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2442: LD_ADDR_EXP 9
2446: PUSH
2447: LD_STRING 11_Houten
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL 12179 0 2
2457: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2458: LD_EXP 9
2462: PPUSH
2463: LD_INT 1
2465: PPUSH
2466: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2470: LD_EXP 9
2474: PPUSH
2475: LD_INT 4
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// end else
2485: GO 2503
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2487: LD_INT 4
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL 1115 0 4
// end ; vc_control = 3 ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 12
2518: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2519: LD_ADDR_EXP 17
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2529: LD_EXP 17
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// amCargo4 = CreateVehicle ;
2541: LD_ADDR_EXP 18
2545: PUSH
2546: CALL_OW 45
2550: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2551: LD_EXP 18
2555: PPUSH
2556: LD_INT 4
2558: PPUSH
2559: CALL_OW 233
// amCargo5 = CreateVehicle ;
2563: LD_ADDR_EXP 19
2567: PUSH
2568: CALL_OW 45
2572: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2573: LD_EXP 19
2577: PPUSH
2578: LD_INT 4
2580: PPUSH
2581: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2585: LD_EXP 17
2589: PPUSH
2590: LD_INT 4
2592: PPUSH
2593: LD_INT 0
2595: PPUSH
2596: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2600: LD_EXP 18
2604: PPUSH
2605: LD_INT 4
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2615: LD_EXP 19
2619: PPUSH
2620: LD_INT 4
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2630: LD_EXP 17
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: LD_INT 100
2640: PPUSH
2641: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2645: LD_EXP 18
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 100
2655: PPUSH
2656: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2660: LD_EXP 19
2664: PPUSH
2665: LD_INT 3
2667: PPUSH
2668: LD_INT 100
2670: PPUSH
2671: CALL_OW 291
// end ;
2675: LD_VAR 0 1
2679: RET
// export function PowellSupport3 ; var veh , un ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
// uc_side = 1 ;
2685: LD_ADDR_OWVAR 20
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// uc_nation = 1 ;
2693: LD_ADDR_OWVAR 21
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2701: LD_INT 4
2703: PPUSH
2704: LD_INT 0
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: CALL 1115 0 4
// vc_chassis = us_medium_wheeled ;
2717: LD_ADDR_OWVAR 37
2721: PUSH
2722: LD_INT 2
2724: ST_TO_ADDR
// vc_engine = 3 ;
2725: LD_ADDR_OWVAR 39
2729: PUSH
2730: LD_INT 3
2732: ST_TO_ADDR
// vc_control = 3 ;
2733: LD_ADDR_OWVAR 38
2737: PUSH
2738: LD_INT 3
2740: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2741: LD_ADDR_OWVAR 40
2745: PUSH
2746: LD_INT 12
2748: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2749: LD_ADDR_EXP 20
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2759: LD_ADDR_EXP 21
2763: PUSH
2764: CALL_OW 45
2768: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_INT 4
2776: PPUSH
2777: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2781: LD_EXP 21
2785: PPUSH
2786: LD_INT 4
2788: PPUSH
2789: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2793: LD_EXP 20
2797: PPUSH
2798: LD_INT 4
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2808: LD_EXP 21
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: LD_INT 0
2818: PPUSH
2819: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2823: LD_EXP 20
2827: PPUSH
2828: LD_INT 1
2830: PPUSH
2831: LD_INT 100
2833: PPUSH
2834: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2838: LD_EXP 21
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 100
2848: PPUSH
2849: CALL_OW 291
// end ; end_of_file
2853: LD_VAR 0 1
2857: RET
// export function PrepareRussianCommander ; begin
2858: LD_INT 0
2860: PPUSH
// uc_side = 3 ;
2861: LD_ADDR_OWVAR 20
2865: PUSH
2866: LD_INT 3
2868: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2869: LD_ADDR_EXP 23
2873: PUSH
2874: LD_STRING Davidov
2876: PPUSH
2877: LD_INT 0
2879: PPUSH
2880: CALL 12179 0 2
2884: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 3
2892: PPUSH
2893: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2897: LD_ADDR_EXP 35
2901: PUSH
2902: LD_EXP 35
2906: PUSH
2907: LD_EXP 23
2911: ADD
2912: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2913: LD_EXP 35
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 336
// end ;
2925: LD_VAR 0 1
2929: RET
// export function PrepareEastBase ; var i , un ; begin
2930: LD_INT 0
2932: PPUSH
2933: PPUSH
2934: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 3
2940: PPUSH
2941: LD_INT 121
2943: PPUSH
2944: LD_EXP 37
2948: PPUSH
2949: LD_EXP 38
2953: PPUSH
2954: CALL_OW 12
2958: PPUSH
2959: LD_INT 1
2961: PPUSH
2962: LD_INT 3
2964: PPUSH
2965: CALL 12971 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2969: LD_INT 3
2971: PPUSH
2972: LD_INT 3
2974: PPUSH
2975: LD_INT 121
2977: PPUSH
2978: LD_EXP 37
2982: PPUSH
2983: LD_EXP 38
2987: PPUSH
2988: CALL_OW 12
2992: PPUSH
2993: LD_INT 9
2995: PPUSH
2996: LD_INT 3
2998: PPUSH
2999: CALL 12971 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3003: LD_INT 3
3005: PPUSH
3006: LD_INT 3
3008: PPUSH
3009: LD_INT 4
3011: PPUSH
3012: LD_EXP 37
3016: PPUSH
3017: LD_EXP 38
3021: PPUSH
3022: CALL_OW 12
3026: PPUSH
3027: LD_INT 2
3029: PPUSH
3030: LD_INT 6
3032: PPUSH
3033: CALL 12971 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3037: LD_INT 3
3039: PPUSH
3040: LD_INT 3
3042: PPUSH
3043: LD_INT 112
3045: PPUSH
3046: LD_EXP 37
3050: PPUSH
3051: LD_EXP 38
3055: PPUSH
3056: CALL_OW 12
3060: PPUSH
3061: LD_INT 3
3063: PPUSH
3064: LD_INT 6
3066: PPUSH
3067: CALL 12971 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3071: LD_INT 3
3073: PPUSH
3074: LD_INT 3
3076: PPUSH
3077: LD_INT 47
3079: PPUSH
3080: LD_EXP 37
3084: PPUSH
3085: LD_EXP 38
3089: PPUSH
3090: CALL_OW 12
3094: PPUSH
3095: LD_INT 4
3097: PPUSH
3098: LD_INT 6
3100: PPUSH
3101: CALL 12971 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3105: LD_INT 3
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 129
3113: PPUSH
3114: LD_EXP 37
3118: PPUSH
3119: LD_EXP 38
3123: PPUSH
3124: CALL_OW 12
3128: PPUSH
3129: LD_INT 4
3131: PPUSH
3132: LD_INT 6
3134: PPUSH
3135: CALL 12971 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3139: LD_INT 3
3141: PPUSH
3142: LD_INT 3
3144: PPUSH
3145: LD_INT 135
3147: PPUSH
3148: LD_EXP 37
3152: PPUSH
3153: LD_EXP 38
3157: PPUSH
3158: CALL_OW 12
3162: PPUSH
3163: LD_INT 4
3165: PPUSH
3166: LD_INT 6
3168: PPUSH
3169: CALL 12971 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3173: LD_ADDR_VAR 0 2
3177: PUSH
3178: LD_INT 22
3180: PUSH
3181: LD_INT 3
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 30
3190: PUSH
3191: LD_INT 32
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 69
3206: PUSH
3207: FOR_IN
3208: IFFALSE 3248
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3210: LD_INT 3
3212: PPUSH
3213: LD_INT 3
3215: PPUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: LD_EXP 37
3225: PPUSH
3226: LD_EXP 38
3230: PPUSH
3231: CALL_OW 12
3235: PPUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_INT 1
3241: PPUSH
3242: CALL 12971 0 6
3246: GO 3207
3248: POP
3249: POP
// for i = 1 to 5 do
3250: LD_ADDR_VAR 0 2
3254: PUSH
3255: DOUBLE
3256: LD_INT 1
3258: DEC
3259: ST_TO_ADDR
3260: LD_INT 5
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3363
// begin uc_side = 3 ;
3266: LD_ADDR_OWVAR 20
3270: PUSH
3271: LD_INT 3
3273: ST_TO_ADDR
// uc_nation = 3 ;
3274: LD_ADDR_OWVAR 21
3278: PUSH
3279: LD_INT 3
3281: ST_TO_ADDR
// hc_gallery =  ;
3282: LD_ADDR_OWVAR 33
3286: PUSH
3287: LD_STRING 
3289: ST_TO_ADDR
// hc_name =  ;
3290: LD_ADDR_OWVAR 26
3294: PUSH
3295: LD_STRING 
3297: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3298: LD_INT 0
3300: PPUSH
3301: LD_INT 4
3303: PPUSH
3304: LD_EXP 37
3308: PPUSH
3309: LD_EXP 38
3313: PPUSH
3314: CALL_OW 12
3318: PPUSH
3319: CALL_OW 380
// un = CreateHuman ;
3323: LD_ADDR_VAR 0 3
3327: PUSH
3328: CALL_OW 44
3332: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3333: LD_VAR 0 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3345: LD_ADDR_EXP 35
3349: PUSH
3350: LD_EXP 35
3354: PUSH
3355: LD_VAR 0 3
3359: ADD
3360: ST_TO_ADDR
// end ;
3361: GO 3263
3363: POP
3364: POP
// end ;
3365: LD_VAR 0 1
3369: RET
// export function PrepareWestBase ; var i , un ; begin
3370: LD_INT 0
3372: PPUSH
3373: PPUSH
3374: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 3
3380: PPUSH
3381: LD_INT 6
3383: PPUSH
3384: LD_EXP 37
3388: PPUSH
3389: LD_EXP 38
3393: PPUSH
3394: CALL_OW 12
3398: PPUSH
3399: LD_INT 2
3401: PPUSH
3402: LD_INT 3
3404: PPUSH
3405: CALL 12971 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3409: LD_INT 3
3411: PPUSH
3412: LD_INT 3
3414: PPUSH
3415: LD_INT 91
3417: PPUSH
3418: LD_EXP 37
3422: PPUSH
3423: LD_EXP 38
3427: PPUSH
3428: CALL_OW 12
3432: PPUSH
3433: LD_INT 4
3435: PPUSH
3436: LD_INT 3
3438: PPUSH
3439: CALL 12971 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3443: LD_INT 3
3445: PPUSH
3446: LD_INT 3
3448: PPUSH
3449: LD_INT 21
3451: PPUSH
3452: LD_EXP 37
3456: PPUSH
3457: LD_EXP 38
3461: PPUSH
3462: CALL_OW 12
3466: PPUSH
3467: LD_INT 3
3469: PPUSH
3470: LD_INT 6
3472: PPUSH
3473: CALL 12971 0 6
// end ;
3477: LD_VAR 0 1
3481: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
3486: PPUSH
3487: PPUSH
// uc_side = 3 ;
3488: LD_ADDR_OWVAR 20
3492: PUSH
3493: LD_INT 3
3495: ST_TO_ADDR
// uc_nation = 3 ;
3496: LD_ADDR_OWVAR 21
3500: PUSH
3501: LD_INT 3
3503: ST_TO_ADDR
// for i = 1 to 5 do
3504: LD_ADDR_VAR 0 2
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_INT 5
3516: PUSH
3517: FOR_TO
3518: IFFALSE 3588
// begin hc_gallery =  ;
3520: LD_ADDR_OWVAR 33
3524: PUSH
3525: LD_STRING 
3527: ST_TO_ADDR
// hc_name =  ;
3528: LD_ADDR_OWVAR 26
3532: PUSH
3533: LD_STRING 
3535: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3536: LD_INT 0
3538: PPUSH
3539: LD_INT 9
3541: PPUSH
3542: LD_EXP 37
3546: PPUSH
3547: LD_EXP 38
3551: PPUSH
3552: CALL_OW 12
3556: PPUSH
3557: CALL_OW 380
// un = CreateHuman ;
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: CALL_OW 44
3570: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3571: LD_VAR 0 3
3575: PPUSH
3576: LD_INT 8
3578: PPUSH
3579: LD_INT 0
3581: PPUSH
3582: CALL_OW 49
// end ;
3586: GO 3517
3588: POP
3589: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3590: LD_ADDR_VAR 0 2
3594: PUSH
3595: DOUBLE
3596: LD_INT 1
3598: DEC
3599: ST_TO_ADDR
3600: LD_INT 2
3602: PUSH
3603: LD_INT 3
3605: PUSH
3606: LD_INT 4
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_OWVAR 67
3618: ARRAY
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3691
// begin hc_gallery =  ;
3623: LD_ADDR_OWVAR 33
3627: PUSH
3628: LD_STRING 
3630: ST_TO_ADDR
// hc_name =  ;
3631: LD_ADDR_OWVAR 26
3635: PUSH
3636: LD_STRING 
3638: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3639: LD_INT 0
3641: PPUSH
3642: LD_INT 4
3644: PPUSH
3645: LD_EXP 37
3649: PPUSH
3650: LD_EXP 38
3654: PPUSH
3655: CALL_OW 12
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_INT 8
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// end ;
3689: GO 3620
3691: POP
3692: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3693: LD_ADDR_VAR 0 2
3697: PUSH
3698: DOUBLE
3699: LD_INT 1
3701: DEC
3702: ST_TO_ADDR
3703: LD_INT 3
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: LD_INT 5
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_OWVAR 67
3721: ARRAY
3722: PUSH
3723: FOR_TO
3724: IFFALSE 3920
// begin vc_engine = 3 ;
3726: LD_ADDR_OWVAR 39
3730: PUSH
3731: LD_INT 3
3733: ST_TO_ADDR
// vc_control = 1 ;
3734: LD_ADDR_OWVAR 38
3738: PUSH
3739: LD_INT 1
3741: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3742: LD_ADDR_OWVAR 40
3746: PUSH
3747: LD_INT 42
3749: PUSH
3750: LD_INT 43
3752: PUSH
3753: LD_INT 44
3755: PUSH
3756: LD_INT 45
3758: PUSH
3759: LD_INT 46
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 5
3774: PPUSH
3775: CALL_OW 12
3779: ARRAY
3780: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3781: LD_OWVAR 40
3785: PUSH
3786: LD_INT 46
3788: EQUAL
3789: IFFALSE 3801
// vc_chassis = ru_heavy_tracked else
3791: LD_ADDR_OWVAR 37
3795: PUSH
3796: LD_INT 24
3798: ST_TO_ADDR
3799: GO 3828
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3801: LD_ADDR_OWVAR 37
3805: PUSH
3806: LD_INT 22
3808: PUSH
3809: LD_INT 21
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 1
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 12
3826: ARRAY
3827: ST_TO_ADDR
// veh = CreateVehicle ;
3828: LD_ADDR_VAR 0 4
3832: PUSH
3833: CALL_OW 45
3837: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3838: LD_VAR 0 4
3842: PPUSH
3843: LD_INT 3
3845: PPUSH
3846: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 5
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 49
// hc_gallery =  ;
3865: LD_ADDR_OWVAR 33
3869: PUSH
3870: LD_STRING 
3872: ST_TO_ADDR
// hc_name =  ;
3873: LD_ADDR_OWVAR 26
3877: PUSH
3878: LD_STRING 
3880: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3881: LD_INT 0
3883: PPUSH
3884: LD_INT 3
3886: PPUSH
3887: LD_INT 10
3889: PPUSH
3890: CALL_OW 380
// un = CreateHuman ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 44
3903: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_VAR 0 4
3913: PPUSH
3914: CALL_OW 52
// end ;
3918: GO 3723
3920: POP
3921: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3922: LD_ADDR_VAR 0 2
3926: PUSH
3927: DOUBLE
3928: LD_INT 1
3930: DEC
3931: ST_TO_ADDR
3932: LD_INT 3
3934: PUSH
3935: LD_INT 4
3937: PUSH
3938: LD_INT 5
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: LIST
3945: PUSH
3946: LD_OWVAR 67
3950: ARRAY
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4100
// begin vc_engine = 3 ;
3955: LD_ADDR_OWVAR 39
3959: PUSH
3960: LD_INT 3
3962: ST_TO_ADDR
// vc_control = 3 ;
3963: LD_ADDR_OWVAR 38
3967: PUSH
3968: LD_INT 3
3970: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3971: LD_ADDR_OWVAR 40
3975: PUSH
3976: LD_INT 42
3978: PUSH
3979: LD_INT 43
3981: PUSH
3982: LD_INT 44
3984: PUSH
3985: LD_INT 45
3987: PUSH
3988: LD_INT 46
3990: PUSH
3991: LD_INT 49
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 5
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4014: LD_OWVAR 40
4018: PUSH
4019: LD_INT 46
4021: EQUAL
4022: IFFALSE 4034
// vc_chassis = ru_heavy_tracked else
4024: LD_ADDR_OWVAR 37
4028: PUSH
4029: LD_INT 24
4031: ST_TO_ADDR
4032: GO 4061
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4034: LD_ADDR_OWVAR 37
4038: PUSH
4039: LD_INT 22
4041: PUSH
4042: LD_INT 21
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL_OW 12
4059: ARRAY
4060: ST_TO_ADDR
// veh = CreateVehicle ;
4061: LD_ADDR_VAR 0 4
4065: PUSH
4066: CALL_OW 45
4070: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4071: LD_VAR 0 4
4075: PPUSH
4076: LD_INT 3
4078: PPUSH
4079: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4083: LD_VAR 0 4
4087: PPUSH
4088: LD_INT 6
4090: PPUSH
4091: LD_INT 0
4093: PPUSH
4094: CALL_OW 49
// end ;
4098: GO 3952
4100: POP
4101: POP
// end ; end_of_file
4102: LD_VAR 0 1
4106: RET
// export function PrepareKurt ; begin
4107: LD_INT 0
4109: PPUSH
// uc_side = 8 ;
4110: LD_ADDR_OWVAR 20
4114: PUSH
4115: LD_INT 8
4117: ST_TO_ADDR
// uc_nation = 2 ;
4118: LD_ADDR_OWVAR 21
4122: PUSH
4123: LD_INT 2
4125: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4126: LD_ADDR_OWVAR 37
4130: PUSH
4131: LD_INT 13
4133: ST_TO_ADDR
// vc_engine = 1 ;
4134: LD_ADDR_OWVAR 39
4138: PUSH
4139: LD_INT 1
4141: ST_TO_ADDR
// vc_control = 1 ;
4142: LD_ADDR_OWVAR 38
4146: PUSH
4147: LD_INT 1
4149: ST_TO_ADDR
// vc_weapon = 24 ;
4150: LD_ADDR_OWVAR 40
4154: PUSH
4155: LD_INT 24
4157: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4158: LD_ADDR_EXP 26
4162: PUSH
4163: CALL_OW 45
4167: ST_TO_ADDR
// if kurtStatus > 0 then
4168: LD_EXP 27
4172: PUSH
4173: LD_INT 0
4175: GREATER
4176: IFFALSE 4225
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4178: LD_ADDR_EXP 24
4182: PUSH
4183: LD_STRING Kurt
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL 12179 0 2
4193: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4194: LD_EXP 26
4198: PPUSH
4199: LD_INT 4
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4209: LD_EXP 24
4213: PPUSH
4214: LD_EXP 26
4218: PPUSH
4219: CALL_OW 52
// end else
4223: GO 4290
// begin hc_name =  ;
4225: LD_ADDR_OWVAR 26
4229: PUSH
4230: LD_STRING 
4232: ST_TO_ADDR
// hc_gallery =  ;
4233: LD_ADDR_OWVAR 33
4237: PUSH
4238: LD_STRING 
4240: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4241: LD_INT 1
4243: PPUSH
4244: LD_INT 10
4246: PPUSH
4247: CALL_OW 381
// otherKurt = CreateHuman ;
4251: LD_ADDR_EXP 25
4255: PUSH
4256: CALL_OW 44
4260: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4261: LD_EXP 26
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4276: LD_EXP 25
4280: PPUSH
4281: LD_EXP 26
4285: PPUSH
4286: CALL_OW 52
// end ; end ;
4290: LD_VAR 0 1
4294: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4295: LD_INT 0
4297: PPUSH
4298: PPUSH
4299: PPUSH
4300: PPUSH
// for i = 1 to 3 do
4301: LD_ADDR_VAR 0 2
4305: PUSH
4306: DOUBLE
4307: LD_INT 1
4309: DEC
4310: ST_TO_ADDR
4311: LD_INT 3
4313: PUSH
4314: FOR_TO
4315: IFFALSE 4452
// begin uc_side = 1 ;
4317: LD_ADDR_OWVAR 20
4321: PUSH
4322: LD_INT 1
4324: ST_TO_ADDR
// uc_nation = 2 ;
4325: LD_ADDR_OWVAR 21
4329: PUSH
4330: LD_INT 2
4332: ST_TO_ADDR
// hc_gallery =  ;
4333: LD_ADDR_OWVAR 33
4337: PUSH
4338: LD_STRING 
4340: ST_TO_ADDR
// hc_name =  ;
4341: LD_ADDR_OWVAR 26
4345: PUSH
4346: LD_STRING 
4348: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4349: LD_EXP 27
4353: PUSH
4354: LD_INT 0
4356: EQUAL
4357: PUSH
4358: LD_EXP 27
4362: PUSH
4363: LD_INT 2
4365: EQUAL
4366: OR
4367: IFFALSE 4392
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4369: LD_INT 0
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_INT 2
4377: PPUSH
4378: LD_INT 4
4380: PPUSH
4381: CALL_OW 12
4385: PPUSH
4386: CALL_OW 380
4390: GO 4413
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4392: LD_INT 0
4394: PPUSH
4395: LD_INT 1
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: LD_INT 8
4403: PPUSH
4404: CALL_OW 12
4408: PPUSH
4409: CALL_OW 380
// un = CreateHuman ;
4413: LD_ADDR_VAR 0 3
4417: PUSH
4418: CALL_OW 44
4422: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4423: LD_VAR 0 3
4427: PPUSH
4428: LD_INT 4
4430: PPUSH
4431: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 4
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4314
4452: POP
4453: POP
// vc_chassis = 14 ;
4454: LD_ADDR_OWVAR 37
4458: PUSH
4459: LD_INT 14
4461: ST_TO_ADDR
// vc_engine = 3 ;
4462: LD_ADDR_OWVAR 39
4466: PUSH
4467: LD_INT 3
4469: ST_TO_ADDR
// vc_control = 1 ;
4470: LD_ADDR_OWVAR 38
4474: PUSH
4475: LD_INT 1
4477: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4478: LD_ADDR_OWVAR 40
4482: PUSH
4483: LD_INT 27
4485: PUSH
4486: LD_INT 26
4488: PUSH
4489: LD_INT 28
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 1
4499: PPUSH
4500: LD_INT 3
4502: PPUSH
4503: CALL_OW 12
4507: ARRAY
4508: ST_TO_ADDR
// veh = CreateVehicle ;
4509: LD_ADDR_VAR 0 4
4513: PUSH
4514: CALL_OW 45
4518: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4519: LD_VAR 0 4
4523: PPUSH
4524: LD_INT 4
4526: PPUSH
4527: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4531: LD_VAR 0 4
4535: PPUSH
4536: LD_INT 4
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4546: LD_EXP 27
4550: PUSH
4551: LD_INT 0
4553: EQUAL
4554: PUSH
4555: LD_EXP 27
4559: PUSH
4560: LD_INT 2
4562: EQUAL
4563: OR
4564: IFFALSE 4589
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4566: LD_INT 0
4568: PPUSH
4569: LD_INT 3
4571: PPUSH
4572: LD_INT 2
4574: PPUSH
4575: LD_INT 4
4577: PPUSH
4578: CALL_OW 12
4582: PPUSH
4583: CALL_OW 380
4587: GO 4610
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4589: LD_INT 0
4591: PPUSH
4592: LD_INT 3
4594: PPUSH
4595: LD_INT 6
4597: PPUSH
4598: LD_INT 8
4600: PPUSH
4601: CALL_OW 12
4605: PPUSH
4606: CALL_OW 380
// un = CreateHuman ;
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: CALL_OW 44
4619: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4620: LD_VAR 0 3
4624: PPUSH
4625: LD_VAR 0 4
4629: PPUSH
4630: CALL_OW 52
// vc_chassis = 14 ;
4634: LD_ADDR_OWVAR 37
4638: PUSH
4639: LD_INT 14
4641: ST_TO_ADDR
// vc_engine = 3 ;
4642: LD_ADDR_OWVAR 39
4646: PUSH
4647: LD_INT 3
4649: ST_TO_ADDR
// vc_control = 1 ;
4650: LD_ADDR_OWVAR 38
4654: PUSH
4655: LD_INT 1
4657: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4658: LD_ADDR_OWVAR 40
4662: PUSH
4663: LD_INT 27
4665: PUSH
4666: LD_INT 26
4668: PUSH
4669: LD_INT 28
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 1
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: CALL_OW 12
4687: ARRAY
4688: ST_TO_ADDR
// veh = CreateVehicle ;
4689: LD_ADDR_VAR 0 4
4693: PUSH
4694: CALL_OW 45
4698: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4699: LD_VAR 0 4
4703: PPUSH
4704: LD_INT 4
4706: PPUSH
4707: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4711: LD_VAR 0 4
4715: PPUSH
4716: LD_INT 4
4718: PPUSH
4719: LD_INT 0
4721: PPUSH
4722: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4726: LD_EXP 27
4730: PUSH
4731: LD_INT 0
4733: EQUAL
4734: PUSH
4735: LD_EXP 27
4739: PUSH
4740: LD_INT 2
4742: EQUAL
4743: OR
4744: IFFALSE 4769
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 4
4751: PPUSH
4752: LD_INT 2
4754: PPUSH
4755: LD_INT 4
4757: PPUSH
4758: CALL_OW 12
4762: PPUSH
4763: CALL_OW 380
4767: GO 4790
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4769: LD_INT 0
4771: PPUSH
4772: LD_INT 4
4774: PPUSH
4775: LD_INT 6
4777: PPUSH
4778: LD_INT 8
4780: PPUSH
4781: CALL_OW 12
4785: PPUSH
4786: CALL_OW 380
// un = CreateHuman ;
4790: LD_ADDR_VAR 0 3
4794: PUSH
4795: CALL_OW 44
4799: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: LD_INT 4
4807: PPUSH
4808: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4812: LD_VAR 0 3
4816: PPUSH
4817: LD_VAR 0 4
4821: PPUSH
4822: CALL_OW 52
// vc_chassis = 14 ;
4826: LD_ADDR_OWVAR 37
4830: PUSH
4831: LD_INT 14
4833: ST_TO_ADDR
// vc_engine = 3 ;
4834: LD_ADDR_OWVAR 39
4838: PUSH
4839: LD_INT 3
4841: ST_TO_ADDR
// vc_control = 1 ;
4842: LD_ADDR_OWVAR 38
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4850: LD_ADDR_OWVAR 40
4854: PUSH
4855: LD_INT 27
4857: PUSH
4858: LD_INT 26
4860: PUSH
4861: LD_INT 28
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 1
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: CALL_OW 12
4879: ARRAY
4880: ST_TO_ADDR
// veh = CreateVehicle ;
4881: LD_ADDR_VAR 0 4
4885: PUSH
4886: CALL_OW 45
4890: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4891: LD_VAR 0 4
4895: PPUSH
4896: LD_INT 4
4898: PPUSH
4899: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4903: LD_VAR 0 4
4907: PPUSH
4908: LD_INT 4
4910: PPUSH
4911: LD_INT 0
4913: PPUSH
4914: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4918: LD_EXP 27
4922: PUSH
4923: LD_INT 0
4925: EQUAL
4926: PUSH
4927: LD_EXP 27
4931: PUSH
4932: LD_INT 2
4934: EQUAL
4935: OR
4936: IFFALSE 4961
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4938: LD_INT 0
4940: PPUSH
4941: LD_INT 2
4943: PPUSH
4944: LD_INT 2
4946: PPUSH
4947: LD_INT 4
4949: PPUSH
4950: CALL_OW 12
4954: PPUSH
4955: CALL_OW 380
4959: GO 4982
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4961: LD_INT 0
4963: PPUSH
4964: LD_INT 2
4966: PPUSH
4967: LD_INT 6
4969: PPUSH
4970: LD_INT 8
4972: PPUSH
4973: CALL_OW 12
4977: PPUSH
4978: CALL_OW 380
// un = CreateHuman ;
4982: LD_ADDR_VAR 0 3
4986: PUSH
4987: CALL_OW 44
4991: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5004: LD_VAR 0 3
5008: PPUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: CALL_OW 52
// end ;
5018: LD_VAR 0 1
5022: RET
// export function PrepareAttackLegion ; var i , un ; begin
5023: LD_INT 0
5025: PPUSH
5026: PPUSH
5027: PPUSH
// for i = 1 to 4 do
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: DOUBLE
5034: LD_INT 1
5036: DEC
5037: ST_TO_ADDR
5038: LD_INT 4
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5152
// begin uc_side = 8 ;
5044: LD_ADDR_OWVAR 20
5048: PUSH
5049: LD_INT 8
5051: ST_TO_ADDR
// uc_nation = 2 ;
5052: LD_ADDR_OWVAR 21
5056: PUSH
5057: LD_INT 2
5059: ST_TO_ADDR
// hc_gallery =  ;
5060: LD_ADDR_OWVAR 33
5064: PUSH
5065: LD_STRING 
5067: ST_TO_ADDR
// hc_name =  ;
5068: LD_ADDR_OWVAR 26
5072: PUSH
5073: LD_STRING 
5075: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5076: LD_INT 0
5078: PPUSH
5079: LD_INT 1
5081: PUSH
5082: LD_INT 8
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_INT 2
5094: PPUSH
5095: CALL_OW 12
5099: ARRAY
5100: PPUSH
5101: LD_INT 6
5103: PPUSH
5104: LD_INT 8
5106: PPUSH
5107: CALL_OW 12
5111: PPUSH
5112: CALL_OW 380
// un = CreateHuman ;
5116: LD_ADDR_VAR 0 3
5120: PUSH
5121: CALL_OW 44
5125: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5126: LD_VAR 0 3
5130: PPUSH
5131: LD_INT 19
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 49
// ComCrawl ( un ) ;
5141: LD_VAR 0 3
5145: PPUSH
5146: CALL_OW 137
// end ;
5150: GO 5041
5152: POP
5153: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5154: LD_INT 1
5156: PPUSH
5157: LD_INT 8
5159: PPUSH
5160: LD_INT 2
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5170: LD_INT 20
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: CALL 15106 0 2
// end ; end_of_file
5180: LD_VAR 0 1
5184: RET
// every 1 do var i ;
5185: GO 5187
5187: DISABLE
5188: LD_INT 0
5190: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5191: LD_INT 10
5193: PPUSH
5194: LD_INT 122
5196: PPUSH
5197: LD_INT 145
5199: PPUSH
5200: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5204: LD_INT 137
5206: PPUSH
5207: LD_INT 84
5209: PPUSH
5210: LD_INT 61
5212: PPUSH
5213: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5217: LD_EXP 1
5221: PPUSH
5222: CALL_OW 310
5226: PPUSH
5227: CALL_OW 87
// InGameOn ;
5231: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5235: LD_INT 22
5237: PUSH
5238: LD_INT 1
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL_OW 69
5249: PPUSH
5250: LD_INT 130
5252: PPUSH
5253: LD_INT 103
5255: PPUSH
5256: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5260: LD_VAR 0 1
5264: PPUSH
5265: LD_INT 114
5267: PPUSH
5268: LD_INT 102
5270: PPUSH
5271: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5275: LD_EXP 1
5279: PPUSH
5280: LD_STRING D1-JMM-1
5282: PPUSH
5283: CALL_OW 88
// if IsOk ( Donaldson ) then
5287: LD_EXP 3
5291: PPUSH
5292: CALL_OW 302
5296: IFFALSE 5334
// begin Say ( Donaldson , D1-Don-1 ) ;
5298: LD_EXP 3
5302: PPUSH
5303: LD_STRING D1-Don-1
5305: PPUSH
5306: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5310: LD_EXP 1
5314: PPUSH
5315: LD_STRING D1-JMM-2
5317: PPUSH
5318: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5322: LD_EXP 3
5326: PPUSH
5327: LD_STRING D1-Don-2
5329: PPUSH
5330: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5334: LD_INT 22
5336: PUSH
5337: LD_INT 1
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PPUSH
5344: CALL_OW 69
5348: PPUSH
5349: LD_INT 110
5351: PPUSH
5352: LD_INT 101
5354: PPUSH
5355: CALL_OW 171
// end ;
5359: PPOPN 1
5361: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5362: LD_INT 1
5364: PPUSH
5365: LD_INT 102
5367: PPUSH
5368: LD_INT 94
5370: PPUSH
5371: CALL_OW 293
5375: IFFALSE 5550
5377: GO 5379
5379: DISABLE
5380: LD_INT 0
5382: PPUSH
// begin CenterOnXY ( 95 , 84 ) ;
5383: LD_INT 95
5385: PPUSH
5386: LD_INT 84
5388: PPUSH
5389: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
5393: LD_INT 22
5395: PUSH
5396: LD_INT 1
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 26
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 2
5415: PUSH
5416: LD_INT 25
5418: PUSH
5419: LD_INT 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: LD_INT 25
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 25
5438: PUSH
5439: LD_INT 3
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 25
5448: PUSH
5449: LD_INT 4
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: PUSH
5468: LD_EXP 1
5472: DIFF
5473: PPUSH
5474: CALL_OW 69
5478: PPUSH
5479: LD_STRING D1-Sol1-2
5481: PPUSH
5482: LD_STRING 
5484: PPUSH
5485: CALL 12287 0 3
// Say ( JMM , D1-JMM-3 ) ;
5489: LD_EXP 1
5493: PPUSH
5494: LD_STRING D1-JMM-3
5496: PPUSH
5497: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5501: LD_STRING M1
5503: PPUSH
5504: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5508: LD_ADDR_VAR 0 1
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 69
5527: PUSH
5528: FOR_IN
5529: IFFALSE 5548
// ComMoveXY ( i , 95 , 84 ) ;
5531: LD_VAR 0 1
5535: PPUSH
5536: LD_INT 95
5538: PPUSH
5539: LD_INT 84
5541: PPUSH
5542: CALL_OW 111
5546: GO 5528
5548: POP
5549: POP
// end ;
5550: PPOPN 1
5552: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5553: GO 5555
5555: DISABLE
5556: LD_INT 0
5558: PPUSH
5559: PPUSH
5560: PPUSH
5561: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: LD_INT 8
5569: PPUSH
5570: LD_INT 22
5572: PUSH
5573: LD_INT 3
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 25
5582: PUSH
5583: LD_INT 9
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 70
5598: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 22
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: PPUSH
5617: CALL_OW 69
5621: ST_TO_ADDR
// enable ;
5622: ENABLE
// for i in your_units do
5623: LD_ADDR_VAR 0 1
5627: PUSH
5628: LD_VAR 0 3
5632: PUSH
5633: FOR_IN
5634: IFFALSE 6269
// begin if See ( 3 , i ) then
5636: LD_INT 3
5638: PPUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: CALL_OW 292
5648: IFFALSE 6267
// begin disable ;
5650: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5651: LD_VAR 0 2
5655: PPUSH
5656: LD_INT 96
5658: PPUSH
5659: LD_INT 85
5661: PPUSH
5662: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 96
5673: PPUSH
5674: LD_INT 85
5676: PPUSH
5677: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5681: LD_VAR 0 2
5685: PPUSH
5686: LD_INT 96
5688: PPUSH
5689: LD_INT 85
5691: PPUSH
5692: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_INT 96
5703: PPUSH
5704: LD_INT 85
5706: PPUSH
5707: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5711: LD_VAR 0 2
5715: PPUSH
5716: LD_INT 96
5718: PPUSH
5719: LD_INT 85
5721: PPUSH
5722: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_INT 96
5733: PPUSH
5734: LD_INT 85
5736: PPUSH
5737: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5741: LD_EXP 1
5745: PPUSH
5746: LD_STRING D1a-JMM-1
5748: PPUSH
5749: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5753: LD_EXP 3
5757: PPUSH
5758: LD_STRING D1a-Don-1
5760: PPUSH
5761: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5765: LD_ADDR_VAR 0 1
5769: PUSH
5770: LD_INT 22
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PPUSH
5780: CALL_OW 69
5784: PUSH
5785: FOR_IN
5786: IFFALSE 5805
// ComMoveXY ( i , 109 , 102 ) ;
5788: LD_VAR 0 1
5792: PPUSH
5793: LD_INT 109
5795: PPUSH
5796: LD_INT 102
5798: PPUSH
5799: CALL_OW 111
5803: GO 5785
5805: POP
5806: POP
// Say ( JMM , D1a-JMM-2 ) ;
5807: LD_EXP 1
5811: PPUSH
5812: LD_STRING D1a-JMM-2
5814: PPUSH
5815: CALL_OW 88
// wait ( 0 0$10 ) ;
5819: LD_INT 350
5821: PPUSH
5822: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5826: LD_EXP 1
5830: PPUSH
5831: CALL_OW 310
5835: PPUSH
5836: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5840: LD_EXP 3
5844: PPUSH
5845: LD_STRING D1b-Don-1
5847: PPUSH
5848: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D1b-JMM-1
5859: PPUSH
5860: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5864: LD_INT 22
5866: PUSH
5867: LD_INT 1
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 26
5876: PUSH
5877: LD_INT 1
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: LD_INT 25
5889: PUSH
5890: LD_INT 1
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 25
5899: PUSH
5900: LD_INT 2
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 25
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 25
5919: PUSH
5920: LD_INT 4
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: PUSH
5939: LD_EXP 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: DIFF
5947: PPUSH
5948: CALL_OW 69
5952: PPUSH
5953: LD_STRING D1b-Sol1-1
5955: PPUSH
5956: LD_STRING 
5958: PPUSH
5959: CALL 12287 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5963: LD_EXP 3
5967: PPUSH
5968: LD_STRING D1b-Don-2
5970: PPUSH
5971: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D1b-JMM-2
5982: PPUSH
5983: CALL_OW 88
// dec = ShowQuery1 ;
5987: LD_ADDR_VAR 0 4
5991: PUSH
5992: CALL 12823 0 0
5996: ST_TO_ADDR
// if dec = 1 then
5997: LD_VAR 0 4
6001: PUSH
6002: LD_INT 1
6004: EQUAL
6005: IFFALSE 6111
// begin Say ( JMM , D2-JMM-1 ) ;
6007: LD_EXP 1
6011: PPUSH
6012: LD_STRING D2-JMM-1
6014: PPUSH
6015: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6019: LD_EXP 22
6023: PPUSH
6024: LD_STRING D2-Pow-1
6026: PPUSH
6027: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6031: LD_EXP 1
6035: PPUSH
6036: LD_STRING D2a-JMM-1
6038: PPUSH
6039: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6043: LD_EXP 22
6047: PPUSH
6048: LD_STRING D2a-Pow-1
6050: PPUSH
6051: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6055: LD_EXP 1
6059: PPUSH
6060: LD_STRING D2a-JMM-2
6062: PPUSH
6063: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6067: LD_EXP 22
6071: PPUSH
6072: LD_STRING D2a-Pow-2
6074: PPUSH
6075: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6079: LD_EXP 1
6083: PPUSH
6084: LD_STRING D2a-JMM-3
6086: PPUSH
6087: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6091: LD_EXP 22
6095: PPUSH
6096: LD_STRING D2a-Pow-3
6098: PPUSH
6099: CALL_OW 94
// secondPass = 2 ;
6103: LD_ADDR_EXP 28
6107: PUSH
6108: LD_INT 2
6110: ST_TO_ADDR
// end ; if dec = 2 then
6111: LD_VAR 0 4
6115: PUSH
6116: LD_INT 2
6118: EQUAL
6119: IFFALSE 6213
// begin Say ( JMM , D2-JMM-1 ) ;
6121: LD_EXP 1
6125: PPUSH
6126: LD_STRING D2-JMM-1
6128: PPUSH
6129: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6133: LD_EXP 22
6137: PPUSH
6138: LD_STRING D2-Pow-1
6140: PPUSH
6141: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6145: LD_EXP 1
6149: PPUSH
6150: LD_STRING D2b-JMM-1
6152: PPUSH
6153: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6157: LD_EXP 22
6161: PPUSH
6162: LD_STRING D2b-Pow-1
6164: PPUSH
6165: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6169: LD_EXP 1
6173: PPUSH
6174: LD_STRING D2c-JMM-1
6176: PPUSH
6177: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6181: LD_EXP 22
6185: PPUSH
6186: LD_STRING D2c-Pow-1
6188: PPUSH
6189: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6193: LD_EXP 1
6197: PPUSH
6198: LD_STRING D2c-JMM-2
6200: PPUSH
6201: CALL_OW 88
// secondPass = 2 ;
6205: LD_ADDR_EXP 28
6209: PUSH
6210: LD_INT 2
6212: ST_TO_ADDR
// end ; if dec = 3 then
6213: LD_VAR 0 4
6217: PUSH
6218: LD_INT 3
6220: EQUAL
6221: IFFALSE 6231
// secondPass = 1 ;
6223: LD_ADDR_EXP 28
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// InGameOff ;
6231: CALL_OW 9
// ruAI = 1 ;
6235: LD_ADDR_EXP 42
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6243: LD_INT 1
6245: PPUSH
6246: LD_INT 3
6248: PPUSH
6249: LD_INT 2
6251: PPUSH
6252: LD_INT 1
6254: PPUSH
6255: CALL_OW 80
// SaveForQuickRestart ;
6259: CALL_OW 22
// exit ;
6263: POP
6264: POP
6265: GO 6271
// end ; end ;
6267: GO 5633
6269: POP
6270: POP
// end ;
6271: PPOPN 4
6273: END
// every 1 1$0 trigger secondPass = 2 do
6274: LD_EXP 28
6278: PUSH
6279: LD_INT 2
6281: EQUAL
6282: IFFALSE 6409
6284: GO 6286
6286: DISABLE
// begin PowellSupport1 ;
6287: CALL 1744 0 0
// DialogueOn ;
6291: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6295: LD_EXP 1
6299: PPUSH
6300: LD_STRING DC1-JMM-1
6302: PPUSH
6303: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6307: LD_EXP 22
6311: PPUSH
6312: LD_STRING DC1-Pow-1
6314: PPUSH
6315: CALL_OW 94
// DialogueOff ;
6319: CALL_OW 7
// wait ( 3 3$0 ) ;
6323: LD_INT 6300
6325: PPUSH
6326: CALL_OW 67
// PowellSupport2 ;
6330: CALL 2203 0 0
// DialogueOn ;
6334: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6338: LD_EXP 1
6342: PPUSH
6343: LD_STRING DC2-JMM-1
6345: PPUSH
6346: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6350: LD_EXP 22
6354: PPUSH
6355: LD_STRING DC2-Pow-1
6357: PPUSH
6358: CALL_OW 94
// DialogueOff ;
6362: CALL_OW 7
// wait ( 6 6$0 ) ;
6366: LD_INT 12600
6368: PPUSH
6369: CALL_OW 67
// PowellSupport3 ;
6373: CALL 2680 0 0
// DialogueOn ;
6377: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6381: LD_EXP 22
6385: PPUSH
6386: LD_STRING DC3-Pow-1
6388: PPUSH
6389: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6393: LD_EXP 1
6397: PPUSH
6398: LD_STRING DC3-JMM-1
6400: PPUSH
6401: CALL_OW 88
// DialogueOff ;
6405: CALL_OW 7
// end ;
6409: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6410: LD_EXP 28
6414: PUSH
6415: LD_INT 2
6417: EQUAL
6418: PUSH
6419: LD_INT 22
6421: PUSH
6422: LD_INT 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: LD_INT 30
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 30
6444: PUSH
6445: LD_INT 1
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PPUSH
6461: CALL_OW 69
6465: PUSH
6466: LD_INT 0
6468: GREATER
6469: AND
6470: IFFALSE 9812
6472: GO 6474
6474: DISABLE
6475: LD_INT 0
6477: PPUSH
6478: PPUSH
6479: PPUSH
6480: PPUSH
6481: PPUSH
6482: PPUSH
6483: PPUSH
6484: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6485: LD_ADDR_VAR 0 4
6489: PUSH
6490: LD_INT 22
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 21
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 2
6512: PUSH
6513: LD_INT 30
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: LD_INT 30
6525: PUSH
6526: LD_INT 1
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: PPUSH
6543: CALL_OW 69
6547: ST_TO_ADDR
// for i in tmp do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 4
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6592
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6561: LD_ADDR_VAR 0 6
6565: PUSH
6566: LD_VAR 0 6
6570: PUSH
6571: LD_VAR 0 1
6575: PPUSH
6576: CALL_OW 274
6580: PPUSH
6581: LD_INT 1
6583: PPUSH
6584: CALL_OW 275
6588: PLUS
6589: ST_TO_ADDR
6590: GO 6558
6592: POP
6593: POP
// for i in tmp do
6594: LD_ADDR_VAR 0 1
6598: PUSH
6599: LD_VAR 0 4
6603: PUSH
6604: FOR_IN
6605: IFFALSE 6638
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6607: LD_ADDR_VAR 0 7
6611: PUSH
6612: LD_VAR 0 7
6616: PUSH
6617: LD_VAR 0 1
6621: PPUSH
6622: CALL_OW 274
6626: PPUSH
6627: LD_INT 2
6629: PPUSH
6630: CALL_OW 275
6634: PLUS
6635: ST_TO_ADDR
6636: GO 6604
6638: POP
6639: POP
// for i in tmp do
6640: LD_ADDR_VAR 0 1
6644: PUSH
6645: LD_VAR 0 4
6649: PUSH
6650: FOR_IN
6651: IFFALSE 6684
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6653: LD_ADDR_VAR 0 8
6657: PUSH
6658: LD_VAR 0 8
6662: PUSH
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 274
6672: PPUSH
6673: LD_INT 3
6675: PPUSH
6676: CALL_OW 275
6680: PLUS
6681: ST_TO_ADDR
6682: GO 6650
6684: POP
6685: POP
// PrepareKurt ;
6686: CALL 4107 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6690: LD_EXP 26
6694: PPUSH
6695: LD_INT 144
6697: PPUSH
6698: LD_INT 111
6700: PPUSH
6701: CALL_OW 111
// wait ( 0 0$2 ) ;
6705: LD_INT 70
6707: PPUSH
6708: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6712: LD_INT 8
6714: PPUSH
6715: LD_INT 1
6717: PPUSH
6718: CALL_OW 343
// if kurtStatus > 0 then
6722: LD_EXP 27
6726: PUSH
6727: LD_INT 0
6729: GREATER
6730: IFFALSE 8280
// begin ComExitVehicle ( Kurt ) ;
6732: LD_EXP 24
6736: PPUSH
6737: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6741: LD_EXP 24
6745: PPUSH
6746: CALL_OW 87
// wait ( 0 0$1 ) ;
6750: LD_INT 35
6752: PPUSH
6753: CALL_OW 67
// DialogueOn ;
6757: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
6761: LD_INT 22
6763: PUSH
6764: LD_INT 1
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 26
6773: PUSH
6774: LD_INT 1
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 2
6783: PUSH
6784: LD_INT 25
6786: PUSH
6787: LD_INT 1
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 25
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 25
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 25
6816: PUSH
6817: LD_INT 4
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: LIST
6835: PUSH
6836: LD_EXP 1
6840: PUSH
6841: EMPTY
6842: LIST
6843: DIFF
6844: PPUSH
6845: CALL_OW 69
6849: PPUSH
6850: LD_STRING D3-Sol1-1
6852: PPUSH
6853: LD_STRING 
6855: PPUSH
6856: CALL 12287 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6860: LD_EXP 24
6864: PPUSH
6865: LD_STRING D3-Kurt-1
6867: PPUSH
6868: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6872: LD_EXP 1
6876: PPUSH
6877: LD_STRING D3-JMM-1
6879: PPUSH
6880: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6884: LD_EXP 24
6888: PPUSH
6889: LD_STRING D3-Kurt-2
6891: PPUSH
6892: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6896: LD_EXP 1
6900: PPUSH
6901: LD_STRING D3-JMM-2
6903: PPUSH
6904: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6908: LD_EXP 24
6912: PPUSH
6913: LD_STRING D3-Kurt-4
6915: PPUSH
6916: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6920: LD_EXP 1
6924: PPUSH
6925: LD_STRING D3-JMM-4
6927: PPUSH
6928: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6932: LD_EXP 24
6936: PPUSH
6937: LD_STRING D3-Kurt-5
6939: PPUSH
6940: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6944: LD_EXP 24
6948: PPUSH
6949: LD_STRING D3-Kurt-5a
6951: PPUSH
6952: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6956: LD_VAR 0 6
6960: PUSH
6961: LD_INT 60
6963: GREATEREQUAL
6964: PUSH
6965: LD_VAR 0 8
6969: PUSH
6970: LD_INT 60
6972: GREATEREQUAL
6973: AND
6974: IFFALSE 7009
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6976: LD_ADDR_VAR 0 2
6980: PUSH
6981: LD_STRING Q2K
6983: PPUSH
6984: LD_INT 1
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 98
7006: ST_TO_ADDR
7007: GO 7032
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_STRING Q2K
7016: PPUSH
7017: LD_INT 3
7019: PUSH
7020: LD_INT 4
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 98
7031: ST_TO_ADDR
// if dec1 = 1 then
7032: LD_VAR 0 2
7036: PUSH
7037: LD_INT 1
7039: EQUAL
7040: IFFALSE 7074
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7042: LD_EXP 1
7046: PPUSH
7047: LD_STRING D3Ka-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7054: LD_EXP 24
7058: PPUSH
7059: LD_STRING D3Ka-Kurt-1
7061: PPUSH
7062: CALL_OW 88
// warWithLegion = 1 ;
7066: LD_ADDR_EXP 31
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// end ; if dec1 = 2 then
7074: LD_VAR 0 2
7078: PUSH
7079: LD_INT 2
7081: EQUAL
7082: IFFALSE 7308
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7084: LD_EXP 1
7088: PPUSH
7089: LD_STRING D3Kb-JMM-1
7091: PPUSH
7092: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7096: LD_EXP 24
7100: PPUSH
7101: LD_STRING D3Kb-Kurt-1
7103: PPUSH
7104: CALL_OW 88
// for i in tmp do
7108: LD_ADDR_VAR 0 1
7112: PUSH
7113: LD_VAR 0 4
7117: PUSH
7118: FOR_IN
7119: IFFALSE 7206
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7121: LD_ADDR_VAR 0 5
7125: PUSH
7126: LD_VAR 0 1
7130: PPUSH
7131: CALL_OW 274
7135: PPUSH
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 275
7143: ST_TO_ADDR
// if tmp2 >= 60 then
7144: LD_VAR 0 5
7148: PUSH
7149: LD_INT 60
7151: GREATEREQUAL
7152: IFFALSE 7184
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7154: LD_VAR 0 1
7158: PPUSH
7159: CALL_OW 274
7163: PPUSH
7164: LD_INT 1
7166: PPUSH
7167: LD_VAR 0 5
7171: PUSH
7172: LD_INT 60
7174: MINUS
7175: PPUSH
7176: CALL_OW 277
// break ;
7180: GO 7206
// end else
7182: GO 7204
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7184: LD_VAR 0 1
7188: PPUSH
7189: CALL_OW 274
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: LD_INT 0
7199: PPUSH
7200: CALL_OW 277
// end ; end ;
7204: GO 7118
7206: POP
7207: POP
// for i in tmp do
7208: LD_ADDR_VAR 0 1
7212: PUSH
7213: LD_VAR 0 4
7217: PUSH
7218: FOR_IN
7219: IFFALSE 7306
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7221: LD_ADDR_VAR 0 5
7225: PUSH
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL_OW 274
7235: PPUSH
7236: LD_INT 3
7238: PPUSH
7239: CALL_OW 275
7243: ST_TO_ADDR
// if tmp2 >= 60 then
7244: LD_VAR 0 5
7248: PUSH
7249: LD_INT 60
7251: GREATEREQUAL
7252: IFFALSE 7284
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 274
7263: PPUSH
7264: LD_INT 3
7266: PPUSH
7267: LD_VAR 0 5
7271: PUSH
7272: LD_INT 60
7274: MINUS
7275: PPUSH
7276: CALL_OW 277
// break ;
7280: GO 7306
// end else
7282: GO 7304
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7284: LD_VAR 0 1
7288: PPUSH
7289: CALL_OW 274
7293: PPUSH
7294: LD_INT 3
7296: PPUSH
7297: LD_INT 0
7299: PPUSH
7300: CALL_OW 277
// end ; end ;
7304: GO 7218
7306: POP
7307: POP
// end ; if dec1 = 3 then
7308: LD_VAR 0 2
7312: PUSH
7313: LD_INT 3
7315: EQUAL
7316: IFFALSE 7551
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7318: LD_EXP 1
7322: PPUSH
7323: LD_STRING D3Kc1-JMM-1
7325: PPUSH
7326: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7330: LD_EXP 24
7334: PPUSH
7335: LD_STRING D3Kc1-Kurt-1
7337: PPUSH
7338: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7342: LD_EXP 1
7346: PPUSH
7347: LD_STRING D3Kc1-JMM-2
7349: PPUSH
7350: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7354: LD_EXP 24
7358: PPUSH
7359: LD_STRING D3Kc1-Kurt-2
7361: PPUSH
7362: CALL_OW 88
// askSiberite = 1 ;
7366: LD_ADDR_EXP 33
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_STRING Q2b
7381: PPUSH
7382: LD_INT 1
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: LIST
7395: PPUSH
7396: CALL_OW 98
7400: ST_TO_ADDR
// if dec2 = 1 then
7401: LD_VAR 0 3
7405: PUSH
7406: LD_INT 1
7408: EQUAL
7409: IFFALSE 7443
// begin Say ( JMM , D4a-JMM-1 ) ;
7411: LD_EXP 1
7415: PPUSH
7416: LD_STRING D4a-JMM-1
7418: PPUSH
7419: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7423: LD_EXP 24
7427: PPUSH
7428: LD_STRING D4b-Kurt-1
7430: PPUSH
7431: CALL_OW 88
// warWithLegion = 1 ;
7435: LD_ADDR_EXP 31
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// end ; if dec2 = 2 then
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 2
7450: EQUAL
7451: IFFALSE 7485
// begin Say ( JMM , D4b-JMM-1 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D4b-JMM-1
7460: PPUSH
7461: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7465: LD_EXP 24
7469: PPUSH
7470: LD_STRING D4b-Kurt-1
7472: PPUSH
7473: CALL_OW 88
// warWithLegion = 1 ;
7477: LD_ADDR_EXP 31
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ; if dec2 = 3 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 3
7492: EQUAL
7493: IFFALSE 7551
// begin Say ( JMM , D4c-JMM-1 ) ;
7495: LD_EXP 1
7499: PPUSH
7500: LD_STRING D4c-JMM-1
7502: PPUSH
7503: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7507: LD_EXP 24
7511: PPUSH
7512: LD_STRING D4c-Kurt-1
7514: PPUSH
7515: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING D4c-JMM-2
7526: PPUSH
7527: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7531: LD_EXP 24
7535: PPUSH
7536: LD_STRING D4c-Kurt-2
7538: PPUSH
7539: CALL_OW 88
// fakeInfo = 1 ;
7543: LD_ADDR_EXP 32
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7551: LD_VAR 0 2
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 8216
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7561: LD_EXP 1
7565: PPUSH
7566: LD_STRING D3Kd-JMM-1
7568: PPUSH
7569: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7573: LD_VAR 0 6
7577: PUSH
7578: LD_INT 120
7580: GREATEREQUAL
7581: PUSH
7582: LD_VAR 0 8
7586: PUSH
7587: LD_INT 120
7589: GREATEREQUAL
7590: AND
7591: IFFALSE 7626
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_STRING Q2aK
7600: PPUSH
7601: LD_INT 1
7603: PUSH
7604: LD_INT 2
7606: PUSH
7607: LD_INT 3
7609: PUSH
7610: LD_INT 4
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PPUSH
7619: CALL_OW 98
7623: ST_TO_ADDR
7624: GO 7649
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7626: LD_ADDR_VAR 0 3
7630: PUSH
7631: LD_STRING Q2K
7633: PPUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 4
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PPUSH
7644: CALL_OW 98
7648: ST_TO_ADDR
// if dec2 = 1 then
7649: LD_VAR 0 3
7653: PUSH
7654: LD_INT 1
7656: EQUAL
7657: IFFALSE 7691
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7659: LD_EXP 1
7663: PPUSH
7664: LD_STRING D5Ka-JMM-1
7666: PPUSH
7667: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7671: LD_EXP 24
7675: PPUSH
7676: LD_STRING D5Ka-Kurt-1
7678: PPUSH
7679: CALL_OW 88
// warWithLegion = 1 ;
7683: LD_ADDR_EXP 31
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// end ; if dec2 = 2 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 2
7698: EQUAL
7699: IFFALSE 7725
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7701: LD_EXP 1
7705: PPUSH
7706: LD_STRING D3Kb-JMM-1
7708: PPUSH
7709: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7713: LD_EXP 24
7717: PPUSH
7718: LD_STRING D3Kb-Kurt-1
7720: PPUSH
7721: CALL_OW 88
// end ; if dec2 = 3 then
7725: LD_VAR 0 3
7729: PUSH
7730: LD_INT 3
7732: EQUAL
7733: IFFALSE 7963
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7735: LD_EXP 1
7739: PPUSH
7740: LD_STRING D3Ke-JMM-1
7742: PPUSH
7743: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7747: LD_EXP 24
7751: PPUSH
7752: LD_STRING D3Ke-Kurt-1
7754: PPUSH
7755: CALL_OW 88
// PrepareLegionForPlayer ;
7759: CALL 4295 0 0
// for i in tmp do
7763: LD_ADDR_VAR 0 1
7767: PUSH
7768: LD_VAR 0 4
7772: PUSH
7773: FOR_IN
7774: IFFALSE 7861
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7776: LD_ADDR_VAR 0 5
7780: PUSH
7781: LD_VAR 0 1
7785: PPUSH
7786: CALL_OW 274
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: CALL_OW 275
7798: ST_TO_ADDR
// if tmp2 >= 120 then
7799: LD_VAR 0 5
7803: PUSH
7804: LD_INT 120
7806: GREATEREQUAL
7807: IFFALSE 7839
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7809: LD_VAR 0 1
7813: PPUSH
7814: CALL_OW 274
7818: PPUSH
7819: LD_INT 1
7821: PPUSH
7822: LD_VAR 0 5
7826: PUSH
7827: LD_INT 120
7829: MINUS
7830: PPUSH
7831: CALL_OW 277
// break ;
7835: GO 7861
// end else
7837: GO 7859
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 274
7848: PPUSH
7849: LD_INT 1
7851: PPUSH
7852: LD_INT 0
7854: PPUSH
7855: CALL_OW 277
// end ; end ;
7859: GO 7773
7861: POP
7862: POP
// for i in tmp do
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_VAR 0 4
7872: PUSH
7873: FOR_IN
7874: IFFALSE 7961
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7876: LD_ADDR_VAR 0 5
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 274
7890: PPUSH
7891: LD_INT 3
7893: PPUSH
7894: CALL_OW 275
7898: ST_TO_ADDR
// if tmp2 >= 120 then
7899: LD_VAR 0 5
7903: PUSH
7904: LD_INT 120
7906: GREATEREQUAL
7907: IFFALSE 7939
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 274
7918: PPUSH
7919: LD_INT 3
7921: PPUSH
7922: LD_VAR 0 5
7926: PUSH
7927: LD_INT 120
7929: MINUS
7930: PPUSH
7931: CALL_OW 277
// break ;
7935: GO 7961
// end else
7937: GO 7959
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7939: LD_VAR 0 1
7943: PPUSH
7944: CALL_OW 274
7948: PPUSH
7949: LD_INT 3
7951: PPUSH
7952: LD_INT 0
7954: PPUSH
7955: CALL_OW 277
// end ; end ;
7959: GO 7873
7961: POP
7962: POP
// end ; if dec2 = 4 then
7963: LD_VAR 0 3
7967: PUSH
7968: LD_INT 4
7970: EQUAL
7971: IFFALSE 8216
// begin if dec1 = 3 then
7973: LD_VAR 0 2
7977: PUSH
7978: LD_INT 3
7980: EQUAL
7981: IFFALSE 8216
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7983: LD_EXP 1
7987: PPUSH
7988: LD_STRING D3Kc1-JMM-1
7990: PPUSH
7991: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7995: LD_EXP 24
7999: PPUSH
8000: LD_STRING D3Kc1-Kurt-1
8002: PPUSH
8003: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8007: LD_EXP 1
8011: PPUSH
8012: LD_STRING D3Kc1-JMM-2
8014: PPUSH
8015: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8019: LD_EXP 24
8023: PPUSH
8024: LD_STRING D3Kc1-Kurt-2
8026: PPUSH
8027: CALL_OW 88
// askSiberite = 1 ;
8031: LD_ADDR_EXP 33
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8039: LD_ADDR_VAR 0 2
8043: PUSH
8044: LD_STRING Q2b
8046: PPUSH
8047: LD_INT 1
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: PPUSH
8061: CALL_OW 98
8065: ST_TO_ADDR
// if dec2 = 1 then
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 1
8073: EQUAL
8074: IFFALSE 8108
// begin Say ( JMM , D4a-JMM-1 ) ;
8076: LD_EXP 1
8080: PPUSH
8081: LD_STRING D4a-JMM-1
8083: PPUSH
8084: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8088: LD_EXP 24
8092: PPUSH
8093: LD_STRING D4b-Kurt-1
8095: PPUSH
8096: CALL_OW 88
// warWithLegion = 1 ;
8100: LD_ADDR_EXP 31
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// end ; if dec2 = 2 then
8108: LD_VAR 0 3
8112: PUSH
8113: LD_INT 2
8115: EQUAL
8116: IFFALSE 8150
// begin Say ( JMM , D4b-JMM-1 ) ;
8118: LD_EXP 1
8122: PPUSH
8123: LD_STRING D4b-JMM-1
8125: PPUSH
8126: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8130: LD_EXP 24
8134: PPUSH
8135: LD_STRING D4b-Kurt-1
8137: PPUSH
8138: CALL_OW 88
// warWithLegion = 1 ;
8142: LD_ADDR_EXP 31
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// end ; if dec2 = 3 then
8150: LD_VAR 0 3
8154: PUSH
8155: LD_INT 3
8157: EQUAL
8158: IFFALSE 8216
// begin Say ( JMM , D4c-JMM-1 ) ;
8160: LD_EXP 1
8164: PPUSH
8165: LD_STRING D4c-JMM-1
8167: PPUSH
8168: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8172: LD_EXP 24
8176: PPUSH
8177: LD_STRING D4c-Kurt-1
8179: PPUSH
8180: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8184: LD_EXP 1
8188: PPUSH
8189: LD_STRING D4c-JMM-2
8191: PPUSH
8192: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8196: LD_EXP 24
8200: PPUSH
8201: LD_STRING D4c-Kurt-2
8203: PPUSH
8204: CALL_OW 88
// fakeInfo = 1 ;
8208: LD_ADDR_EXP 32
8212: PUSH
8213: LD_INT 1
8215: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8216: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8220: LD_EXP 24
8224: PPUSH
8225: LD_EXP 26
8229: PPUSH
8230: CALL_OW 120
// wait ( 0 0$1 ) ;
8234: LD_INT 35
8236: PPUSH
8237: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8241: LD_EXP 26
8245: PPUSH
8246: LD_INT 4
8248: PPUSH
8249: CALL_OW 113
// wait ( 0 0$3 ) ;
8253: LD_INT 105
8255: PPUSH
8256: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8260: LD_EXP 24
8264: PPUSH
8265: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8269: LD_EXP 26
8273: PPUSH
8274: CALL_OW 64
// end else
8278: GO 9812
// begin ComExitVehicle ( otherKurt ) ;
8280: LD_EXP 25
8284: PPUSH
8285: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8289: LD_EXP 25
8293: PPUSH
8294: CALL_OW 87
// wait ( 0 0$1 ) ;
8298: LD_INT 35
8300: PPUSH
8301: CALL_OW 67
// DialogueOn ;
8305: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
8309: LD_INT 22
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 26
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: LD_INT 25
8334: PUSH
8335: LD_INT 1
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 25
8344: PUSH
8345: LD_INT 2
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: LD_INT 25
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 25
8364: PUSH
8365: LD_INT 4
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: PUSH
8384: LD_EXP 1
8388: PUSH
8389: EMPTY
8390: LIST
8391: DIFF
8392: PPUSH
8393: CALL_OW 69
8397: PPUSH
8398: LD_STRING D3-Sol1-1
8400: PPUSH
8401: LD_STRING 
8403: PPUSH
8404: CALL 12287 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8408: LD_EXP 25
8412: PPUSH
8413: LD_STRING D3-Kurt-1
8415: PPUSH
8416: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8420: LD_EXP 1
8424: PPUSH
8425: LD_STRING D3-JMM-1
8427: PPUSH
8428: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8432: LD_EXP 25
8436: PPUSH
8437: LD_STRING D3-Kurt-3
8439: PPUSH
8440: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8444: LD_EXP 1
8448: PPUSH
8449: LD_STRING D3-JMM-3
8451: PPUSH
8452: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8456: LD_EXP 25
8460: PPUSH
8461: LD_STRING D3-Kurt-5
8463: PPUSH
8464: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8468: LD_EXP 25
8472: PPUSH
8473: LD_STRING D3-Kurt-5b
8475: PPUSH
8476: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8480: LD_VAR 0 6
8484: PUSH
8485: LD_INT 100
8487: GREATEREQUAL
8488: PUSH
8489: LD_VAR 0 8
8493: PUSH
8494: LD_INT 100
8496: GREATEREQUAL
8497: AND
8498: IFFALSE 8533
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8500: LD_ADDR_VAR 0 2
8504: PUSH
8505: LD_STRING Q2
8507: PPUSH
8508: LD_INT 1
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: LD_INT 3
8516: PUSH
8517: LD_INT 4
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 98
8530: ST_TO_ADDR
8531: GO 8556
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8533: LD_ADDR_VAR 0 2
8537: PUSH
8538: LD_STRING Q2
8540: PPUSH
8541: LD_INT 3
8543: PUSH
8544: LD_INT 4
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 98
8555: ST_TO_ADDR
// if dec1 = 1 then
8556: LD_VAR 0 2
8560: PUSH
8561: LD_INT 1
8563: EQUAL
8564: IFFALSE 8598
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8566: LD_EXP 1
8570: PPUSH
8571: LD_STRING D3Ka-JMM-1
8573: PPUSH
8574: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8578: LD_EXP 25
8582: PPUSH
8583: LD_STRING D3Ka-Kurt-1
8585: PPUSH
8586: CALL_OW 88
// warWithLegion = 1 ;
8590: LD_ADDR_EXP 31
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// end ; if dec1 = 2 then
8598: LD_VAR 0 2
8602: PUSH
8603: LD_INT 2
8605: EQUAL
8606: IFFALSE 8832
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8608: LD_EXP 1
8612: PPUSH
8613: LD_STRING D3Kb-JMM-1
8615: PPUSH
8616: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8620: LD_EXP 25
8624: PPUSH
8625: LD_STRING D3Kb-Kurt-1
8627: PPUSH
8628: CALL_OW 88
// for i in tmp do
8632: LD_ADDR_VAR 0 1
8636: PUSH
8637: LD_VAR 0 4
8641: PUSH
8642: FOR_IN
8643: IFFALSE 8730
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8645: LD_ADDR_VAR 0 5
8649: PUSH
8650: LD_VAR 0 1
8654: PPUSH
8655: CALL_OW 274
8659: PPUSH
8660: LD_INT 1
8662: PPUSH
8663: CALL_OW 275
8667: ST_TO_ADDR
// if tmp2 >= 100 then
8668: LD_VAR 0 5
8672: PUSH
8673: LD_INT 100
8675: GREATEREQUAL
8676: IFFALSE 8708
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8678: LD_VAR 0 1
8682: PPUSH
8683: CALL_OW 274
8687: PPUSH
8688: LD_INT 1
8690: PPUSH
8691: LD_VAR 0 5
8695: PUSH
8696: LD_INT 100
8698: MINUS
8699: PPUSH
8700: CALL_OW 277
// break ;
8704: GO 8730
// end else
8706: GO 8728
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8708: LD_VAR 0 1
8712: PPUSH
8713: CALL_OW 274
8717: PPUSH
8718: LD_INT 1
8720: PPUSH
8721: LD_INT 0
8723: PPUSH
8724: CALL_OW 277
// end ; end ;
8728: GO 8642
8730: POP
8731: POP
// for i in tmp do
8732: LD_ADDR_VAR 0 1
8736: PUSH
8737: LD_VAR 0 4
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8830
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8745: LD_ADDR_VAR 0 5
8749: PUSH
8750: LD_VAR 0 1
8754: PPUSH
8755: CALL_OW 274
8759: PPUSH
8760: LD_INT 3
8762: PPUSH
8763: CALL_OW 275
8767: ST_TO_ADDR
// if tmp2 >= 100 then
8768: LD_VAR 0 5
8772: PUSH
8773: LD_INT 100
8775: GREATEREQUAL
8776: IFFALSE 8808
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8778: LD_VAR 0 1
8782: PPUSH
8783: CALL_OW 274
8787: PPUSH
8788: LD_INT 3
8790: PPUSH
8791: LD_VAR 0 5
8795: PUSH
8796: LD_INT 100
8798: MINUS
8799: PPUSH
8800: CALL_OW 277
// break ;
8804: GO 8830
// end else
8806: GO 8828
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8808: LD_VAR 0 1
8812: PPUSH
8813: CALL_OW 274
8817: PPUSH
8818: LD_INT 3
8820: PPUSH
8821: LD_INT 0
8823: PPUSH
8824: CALL_OW 277
// end ; end ;
8828: GO 8742
8830: POP
8831: POP
// end ; if dec1 = 3 then
8832: LD_VAR 0 2
8836: PUSH
8837: LD_INT 3
8839: EQUAL
8840: IFFALSE 9075
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8842: LD_EXP 1
8846: PPUSH
8847: LD_STRING D3Kc1-JMM-1
8849: PPUSH
8850: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8854: LD_EXP 25
8858: PPUSH
8859: LD_STRING D3Kc1-Kurt-1
8861: PPUSH
8862: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8866: LD_EXP 1
8870: PPUSH
8871: LD_STRING D3Kc1-JMM-2
8873: PPUSH
8874: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8878: LD_EXP 25
8882: PPUSH
8883: LD_STRING D3Kc1-Kurt-2
8885: PPUSH
8886: CALL_OW 88
// askSiberite = 1 ;
8890: LD_ADDR_EXP 33
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8898: LD_ADDR_VAR 0 2
8902: PUSH
8903: LD_STRING Q2b
8905: PPUSH
8906: LD_INT 1
8908: PUSH
8909: LD_INT 2
8911: PUSH
8912: LD_INT 3
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 98
8924: ST_TO_ADDR
// if dec2 = 1 then
8925: LD_VAR 0 3
8929: PUSH
8930: LD_INT 1
8932: EQUAL
8933: IFFALSE 8967
// begin Say ( JMM , D4a-JMM-1 ) ;
8935: LD_EXP 1
8939: PPUSH
8940: LD_STRING D4a-JMM-1
8942: PPUSH
8943: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8947: LD_EXP 25
8951: PPUSH
8952: LD_STRING D4b-Kurt-1
8954: PPUSH
8955: CALL_OW 88
// warWithLegion = 1 ;
8959: LD_ADDR_EXP 31
8963: PUSH
8964: LD_INT 1
8966: ST_TO_ADDR
// end ; if dec2 = 2 then
8967: LD_VAR 0 3
8971: PUSH
8972: LD_INT 2
8974: EQUAL
8975: IFFALSE 9009
// begin Say ( JMM , D4b-JMM-1 ) ;
8977: LD_EXP 1
8981: PPUSH
8982: LD_STRING D4b-JMM-1
8984: PPUSH
8985: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8989: LD_EXP 25
8993: PPUSH
8994: LD_STRING D4b-Kurt-1
8996: PPUSH
8997: CALL_OW 88
// warWithLegion = 1 ;
9001: LD_ADDR_EXP 31
9005: PUSH
9006: LD_INT 1
9008: ST_TO_ADDR
// end ; if dec2 = 3 then
9009: LD_VAR 0 3
9013: PUSH
9014: LD_INT 3
9016: EQUAL
9017: IFFALSE 9075
// begin Say ( JMM , D4c-JMM-1 ) ;
9019: LD_EXP 1
9023: PPUSH
9024: LD_STRING D4c-JMM-1
9026: PPUSH
9027: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9031: LD_EXP 25
9035: PPUSH
9036: LD_STRING D4c-Kurt-1
9038: PPUSH
9039: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9043: LD_EXP 1
9047: PPUSH
9048: LD_STRING D4c-JMM-2
9050: PPUSH
9051: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9055: LD_EXP 25
9059: PPUSH
9060: LD_STRING D4c-Kurt-2
9062: PPUSH
9063: CALL_OW 88
// fakeInfo = 1 ;
9067: LD_ADDR_EXP 32
9071: PUSH
9072: LD_INT 1
9074: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9075: LD_VAR 0 2
9079: PUSH
9080: LD_INT 4
9082: EQUAL
9083: IFFALSE 9740
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9085: LD_EXP 1
9089: PPUSH
9090: LD_STRING D3Kd-JMM-1
9092: PPUSH
9093: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9097: LD_VAR 0 6
9101: PUSH
9102: LD_INT 200
9104: GREATEREQUAL
9105: PUSH
9106: LD_VAR 0 8
9110: PUSH
9111: LD_INT 200
9113: GREATEREQUAL
9114: AND
9115: IFFALSE 9150
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9117: LD_ADDR_VAR 0 3
9121: PUSH
9122: LD_STRING Q2a
9124: PPUSH
9125: LD_INT 1
9127: PUSH
9128: LD_INT 2
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: LD_INT 4
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 98
9147: ST_TO_ADDR
9148: GO 9173
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9150: LD_ADDR_VAR 0 3
9154: PUSH
9155: LD_STRING Q2a
9157: PPUSH
9158: LD_INT 1
9160: PUSH
9161: LD_INT 4
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 98
9172: ST_TO_ADDR
// if dec2 = 1 then
9173: LD_VAR 0 3
9177: PUSH
9178: LD_INT 1
9180: EQUAL
9181: IFFALSE 9215
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9183: LD_EXP 1
9187: PPUSH
9188: LD_STRING D5Ka-JMM-1
9190: PPUSH
9191: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9195: LD_EXP 25
9199: PPUSH
9200: LD_STRING D5Ka-Kurt-1
9202: PPUSH
9203: CALL_OW 88
// warWithLegion = 1 ;
9207: LD_ADDR_EXP 31
9211: PUSH
9212: LD_INT 1
9214: ST_TO_ADDR
// end ; if dec2 = 2 then
9215: LD_VAR 0 3
9219: PUSH
9220: LD_INT 2
9222: EQUAL
9223: IFFALSE 9249
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9225: LD_EXP 1
9229: PPUSH
9230: LD_STRING D3Kb-JMM-1
9232: PPUSH
9233: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9237: LD_EXP 25
9241: PPUSH
9242: LD_STRING D3Kb-Kurt-1
9244: PPUSH
9245: CALL_OW 88
// end ; if dec2 = 3 then
9249: LD_VAR 0 3
9253: PUSH
9254: LD_INT 3
9256: EQUAL
9257: IFFALSE 9487
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9259: LD_EXP 1
9263: PPUSH
9264: LD_STRING D3Ke-JMM-1
9266: PPUSH
9267: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9271: LD_EXP 25
9275: PPUSH
9276: LD_STRING D3Ke-Kurt-1
9278: PPUSH
9279: CALL_OW 88
// PrepareLegionForPlayer ;
9283: CALL 4295 0 0
// for i in tmp do
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: LD_VAR 0 4
9296: PUSH
9297: FOR_IN
9298: IFFALSE 9385
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9300: LD_ADDR_VAR 0 5
9304: PUSH
9305: LD_VAR 0 1
9309: PPUSH
9310: CALL_OW 274
9314: PPUSH
9315: LD_INT 1
9317: PPUSH
9318: CALL_OW 275
9322: ST_TO_ADDR
// if tmp2 >= 200 then
9323: LD_VAR 0 5
9327: PUSH
9328: LD_INT 200
9330: GREATEREQUAL
9331: IFFALSE 9363
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: CALL_OW 274
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: LD_VAR 0 5
9350: PUSH
9351: LD_INT 200
9353: MINUS
9354: PPUSH
9355: CALL_OW 277
// break ;
9359: GO 9385
// end else
9361: GO 9383
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 274
9372: PPUSH
9373: LD_INT 1
9375: PPUSH
9376: LD_INT 0
9378: PPUSH
9379: CALL_OW 277
// end ; end ;
9383: GO 9297
9385: POP
9386: POP
// for i in tmp do
9387: LD_ADDR_VAR 0 1
9391: PUSH
9392: LD_VAR 0 4
9396: PUSH
9397: FOR_IN
9398: IFFALSE 9485
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9400: LD_ADDR_VAR 0 5
9404: PUSH
9405: LD_VAR 0 1
9409: PPUSH
9410: CALL_OW 274
9414: PPUSH
9415: LD_INT 3
9417: PPUSH
9418: CALL_OW 275
9422: ST_TO_ADDR
// if tmp2 >= 200 then
9423: LD_VAR 0 5
9427: PUSH
9428: LD_INT 200
9430: GREATEREQUAL
9431: IFFALSE 9463
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9433: LD_VAR 0 1
9437: PPUSH
9438: CALL_OW 274
9442: PPUSH
9443: LD_INT 3
9445: PPUSH
9446: LD_VAR 0 5
9450: PUSH
9451: LD_INT 200
9453: MINUS
9454: PPUSH
9455: CALL_OW 277
// break ;
9459: GO 9485
// end else
9461: GO 9483
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9463: LD_VAR 0 1
9467: PPUSH
9468: CALL_OW 274
9472: PPUSH
9473: LD_INT 3
9475: PPUSH
9476: LD_INT 0
9478: PPUSH
9479: CALL_OW 277
// end ; end ;
9483: GO 9397
9485: POP
9486: POP
// end ; if dec2 = 4 then
9487: LD_VAR 0 3
9491: PUSH
9492: LD_INT 4
9494: EQUAL
9495: IFFALSE 9740
// begin if dec1 = 3 then
9497: LD_VAR 0 2
9501: PUSH
9502: LD_INT 3
9504: EQUAL
9505: IFFALSE 9740
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9507: LD_EXP 1
9511: PPUSH
9512: LD_STRING D3Kc1-JMM-1
9514: PPUSH
9515: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9519: LD_EXP 25
9523: PPUSH
9524: LD_STRING D3Kc1-Kurt-1
9526: PPUSH
9527: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9531: LD_EXP 1
9535: PPUSH
9536: LD_STRING D3Kc1-JMM-2
9538: PPUSH
9539: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9543: LD_EXP 25
9547: PPUSH
9548: LD_STRING D3Kc1-Kurt-2
9550: PPUSH
9551: CALL_OW 88
// askSiberite = 1 ;
9555: LD_ADDR_EXP 33
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9563: LD_ADDR_VAR 0 2
9567: PUSH
9568: LD_STRING Q2b
9570: PPUSH
9571: LD_INT 1
9573: PUSH
9574: LD_INT 2
9576: PUSH
9577: LD_INT 3
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 98
9589: ST_TO_ADDR
// if dec2 = 1 then
9590: LD_VAR 0 3
9594: PUSH
9595: LD_INT 1
9597: EQUAL
9598: IFFALSE 9632
// begin Say ( JMM , D4a-JMM-1 ) ;
9600: LD_EXP 1
9604: PPUSH
9605: LD_STRING D4a-JMM-1
9607: PPUSH
9608: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9612: LD_EXP 25
9616: PPUSH
9617: LD_STRING D4b-Kurt-1
9619: PPUSH
9620: CALL_OW 88
// warWithLegion = 1 ;
9624: LD_ADDR_EXP 31
9628: PUSH
9629: LD_INT 1
9631: ST_TO_ADDR
// end ; if dec2 = 2 then
9632: LD_VAR 0 3
9636: PUSH
9637: LD_INT 2
9639: EQUAL
9640: IFFALSE 9674
// begin Say ( JMM , D4b-JMM-1 ) ;
9642: LD_EXP 1
9646: PPUSH
9647: LD_STRING D4b-JMM-1
9649: PPUSH
9650: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9654: LD_EXP 25
9658: PPUSH
9659: LD_STRING D4b-Kurt-1
9661: PPUSH
9662: CALL_OW 88
// warWithLegion = 1 ;
9666: LD_ADDR_EXP 31
9670: PUSH
9671: LD_INT 1
9673: ST_TO_ADDR
// end ; if dec2 = 3 then
9674: LD_VAR 0 3
9678: PUSH
9679: LD_INT 3
9681: EQUAL
9682: IFFALSE 9740
// begin Say ( JMM , D4c-JMM-1 ) ;
9684: LD_EXP 1
9688: PPUSH
9689: LD_STRING D4c-JMM-1
9691: PPUSH
9692: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9696: LD_EXP 25
9700: PPUSH
9701: LD_STRING D4c-Kurt-1
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9708: LD_EXP 1
9712: PPUSH
9713: LD_STRING D4c-JMM-2
9715: PPUSH
9716: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9720: LD_EXP 25
9724: PPUSH
9725: LD_STRING D4c-Kurt-2
9727: PPUSH
9728: CALL_OW 88
// fakeInfo = 1 ;
9732: LD_ADDR_EXP 32
9736: PUSH
9737: LD_INT 1
9739: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9740: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9744: LD_INT 8
9746: PPUSH
9747: LD_INT 8
9749: PPUSH
9750: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9754: LD_EXP 25
9758: PPUSH
9759: LD_EXP 26
9763: PPUSH
9764: CALL_OW 120
// wait ( 0 0$1 ) ;
9768: LD_INT 35
9770: PPUSH
9771: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9775: LD_EXP 26
9779: PPUSH
9780: LD_INT 4
9782: PPUSH
9783: CALL_OW 113
// wait ( 0 0$6 ) ;
9787: LD_INT 210
9789: PPUSH
9790: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9794: LD_EXP 25
9798: PPUSH
9799: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9803: LD_EXP 26
9807: PPUSH
9808: CALL_OW 64
// end ; end ;
9812: PPOPN 8
9814: END
// every 0 0$10 trigger warWithLegion = 1 do
9815: LD_EXP 31
9819: PUSH
9820: LD_INT 1
9822: EQUAL
9823: IFFALSE 9832
9825: GO 9827
9827: DISABLE
// PrepareAttackLegion ;
9828: CALL 5023 0 0
9832: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9833: LD_EXP 15
9837: PPUSH
9838: CALL_OW 305
9842: PUSH
9843: LD_EXP 15
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 289
9855: NOT
9856: AND
9857: PUSH
9858: LD_EXP 15
9862: PPUSH
9863: LD_INT 2
9865: PPUSH
9866: CALL_OW 289
9870: NOT
9871: AND
9872: PUSH
9873: LD_EXP 15
9877: PPUSH
9878: LD_INT 3
9880: PPUSH
9881: CALL_OW 289
9885: NOT
9886: AND
9887: IFFALSE 9904
9889: GO 9891
9891: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9892: LD_EXP 15
9896: PPUSH
9897: LD_INT 4
9899: PPUSH
9900: CALL_OW 235
9904: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9905: LD_EXP 16
9909: PPUSH
9910: CALL_OW 305
9914: PUSH
9915: LD_EXP 16
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 289
9927: NOT
9928: AND
9929: PUSH
9930: LD_EXP 16
9934: PPUSH
9935: LD_INT 2
9937: PPUSH
9938: CALL_OW 289
9942: NOT
9943: AND
9944: PUSH
9945: LD_EXP 16
9949: PPUSH
9950: LD_INT 3
9952: PPUSH
9953: CALL_OW 289
9957: NOT
9958: AND
9959: IFFALSE 9976
9961: GO 9963
9963: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9964: LD_EXP 16
9968: PPUSH
9969: LD_INT 4
9971: PPUSH
9972: CALL_OW 235
9976: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9977: LD_EXP 17
9981: PPUSH
9982: CALL_OW 305
9986: PUSH
9987: LD_EXP 17
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 289
9999: NOT
10000: AND
10001: PUSH
10002: LD_EXP 17
10006: PPUSH
10007: LD_INT 2
10009: PPUSH
10010: CALL_OW 289
10014: NOT
10015: AND
10016: PUSH
10017: LD_EXP 17
10021: PPUSH
10022: LD_INT 3
10024: PPUSH
10025: CALL_OW 289
10029: NOT
10030: AND
10031: IFFALSE 10048
10033: GO 10035
10035: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10036: LD_EXP 17
10040: PPUSH
10041: LD_INT 4
10043: PPUSH
10044: CALL_OW 235
10048: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10049: LD_EXP 18
10053: PPUSH
10054: CALL_OW 305
10058: PUSH
10059: LD_EXP 18
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL_OW 289
10071: NOT
10072: AND
10073: PUSH
10074: LD_EXP 18
10078: PPUSH
10079: LD_INT 2
10081: PPUSH
10082: CALL_OW 289
10086: NOT
10087: AND
10088: PUSH
10089: LD_EXP 18
10093: PPUSH
10094: LD_INT 3
10096: PPUSH
10097: CALL_OW 289
10101: NOT
10102: AND
10103: IFFALSE 10120
10105: GO 10107
10107: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10108: LD_EXP 18
10112: PPUSH
10113: LD_INT 4
10115: PPUSH
10116: CALL_OW 235
10120: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10121: LD_EXP 19
10125: PPUSH
10126: CALL_OW 305
10130: PUSH
10131: LD_EXP 19
10135: PPUSH
10136: LD_INT 1
10138: PPUSH
10139: CALL_OW 289
10143: NOT
10144: AND
10145: PUSH
10146: LD_EXP 19
10150: PPUSH
10151: LD_INT 2
10153: PPUSH
10154: CALL_OW 289
10158: NOT
10159: AND
10160: PUSH
10161: LD_EXP 19
10165: PPUSH
10166: LD_INT 3
10168: PPUSH
10169: CALL_OW 289
10173: NOT
10174: AND
10175: PUSH
10176: LD_EXP 19
10180: PPUSH
10181: LD_INT 2
10183: PPUSH
10184: CALL_OW 289
10188: NOT
10189: AND
10190: IFFALSE 10207
10192: GO 10194
10194: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10195: LD_EXP 19
10199: PPUSH
10200: LD_INT 4
10202: PPUSH
10203: CALL_OW 235
10207: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10208: LD_EXP 20
10212: PPUSH
10213: CALL_OW 305
10217: PUSH
10218: LD_EXP 20
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 289
10230: NOT
10231: AND
10232: PUSH
10233: LD_EXP 20
10237: PPUSH
10238: LD_INT 2
10240: PPUSH
10241: CALL_OW 289
10245: NOT
10246: AND
10247: PUSH
10248: LD_EXP 20
10252: PPUSH
10253: LD_INT 3
10255: PPUSH
10256: CALL_OW 289
10260: NOT
10261: AND
10262: IFFALSE 10279
10264: GO 10266
10266: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10267: LD_EXP 20
10271: PPUSH
10272: LD_INT 4
10274: PPUSH
10275: CALL_OW 235
10279: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10280: LD_EXP 21
10284: PPUSH
10285: CALL_OW 305
10289: PUSH
10290: LD_EXP 21
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 289
10302: NOT
10303: AND
10304: PUSH
10305: LD_EXP 21
10309: PPUSH
10310: LD_INT 2
10312: PPUSH
10313: CALL_OW 289
10317: NOT
10318: AND
10319: PUSH
10320: LD_EXP 21
10324: PPUSH
10325: LD_INT 3
10327: PPUSH
10328: CALL_OW 289
10332: NOT
10333: AND
10334: IFFALSE 10351
10336: GO 10338
10338: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10339: LD_EXP 21
10343: PPUSH
10344: LD_INT 4
10346: PPUSH
10347: CALL_OW 235
10351: END
// every 0 0$1 do var i ;
10352: GO 10354
10354: DISABLE
10355: LD_INT 0
10357: PPUSH
// begin enable ;
10358: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10359: LD_ADDR_VAR 0 1
10363: PUSH
10364: LD_INT 22
10366: PUSH
10367: LD_INT 4
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 69
10378: PUSH
10379: FOR_IN
10380: IFFALSE 10419
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10382: LD_VAR 0 1
10386: PPUSH
10387: LD_INT 4
10389: PPUSH
10390: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10394: LD_VAR 0 1
10398: PPUSH
10399: LD_INT 4
10401: PPUSH
10402: CALL_OW 308
10406: IFFALSE 10417
// RemoveUnit ( i ) ;
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 64
// end ;
10417: GO 10379
10419: POP
10420: POP
// end ;
10421: PPOPN 1
10423: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10424: LD_EXP 28
10428: PUSH
10429: LD_INT 1
10431: EQUAL
10432: IFFALSE 10807
10434: GO 10436
10436: DISABLE
10437: LD_INT 0
10439: PPUSH
10440: PPUSH
10441: PPUSH
// begin enable ;
10442: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10443: LD_ADDR_VAR 0 2
10447: PUSH
10448: LD_INT 12
10450: PPUSH
10451: LD_INT 22
10453: PUSH
10454: LD_INT 3
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 21
10463: PUSH
10464: LD_INT 2
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 70
10479: ST_TO_ADDR
// for i in enemyVehs do
10480: LD_ADDR_VAR 0 1
10484: PUSH
10485: LD_VAR 0 2
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10805
// begin if See ( 1 , i ) then
10493: LD_INT 1
10495: PPUSH
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 292
10505: IFFALSE 10803
// begin disable ;
10507: DISABLE
// DialogueOn ;
10508: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10521: LD_INT 22
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 26
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_EXP 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: DIFF
10553: PPUSH
10554: CALL_OW 69
10558: PPUSH
10559: LD_STRING DT1-Sol1-1
10561: PPUSH
10562: LD_STRING DT1-FSol1-1
10564: PPUSH
10565: CALL 12287 0 3
// dec = ShowQuery2 ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: CALL 12897 0 0
10578: ST_TO_ADDR
// if dec = 1 then
10579: LD_VAR 0 3
10583: PUSH
10584: LD_INT 1
10586: EQUAL
10587: IFFALSE 10693
// begin Say ( JMM , D2-JMM-1 ) ;
10589: LD_EXP 1
10593: PPUSH
10594: LD_STRING D2-JMM-1
10596: PPUSH
10597: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10601: LD_EXP 22
10605: PPUSH
10606: LD_STRING D2-Pow-1
10608: PPUSH
10609: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10613: LD_EXP 1
10617: PPUSH
10618: LD_STRING D2a-JMM-1
10620: PPUSH
10621: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10625: LD_EXP 22
10629: PPUSH
10630: LD_STRING D2a-Pow-1
10632: PPUSH
10633: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10637: LD_EXP 1
10641: PPUSH
10642: LD_STRING D2a-JMM-2
10644: PPUSH
10645: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10649: LD_EXP 22
10653: PPUSH
10654: LD_STRING D2a-Pow-2
10656: PPUSH
10657: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10661: LD_EXP 1
10665: PPUSH
10666: LD_STRING D2a-JMM-3
10668: PPUSH
10669: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10673: LD_EXP 22
10677: PPUSH
10678: LD_STRING D2a-Pow-3
10680: PPUSH
10681: CALL_OW 94
// secondPass = 2 ;
10685: LD_ADDR_EXP 28
10689: PUSH
10690: LD_INT 2
10692: ST_TO_ADDR
// end ; if dec = 2 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 2
10700: EQUAL
10701: IFFALSE 10795
// begin Say ( JMM , D2-JMM-1 ) ;
10703: LD_EXP 1
10707: PPUSH
10708: LD_STRING D2-JMM-1
10710: PPUSH
10711: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10715: LD_EXP 22
10719: PPUSH
10720: LD_STRING D2-Pow-1
10722: PPUSH
10723: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10727: LD_EXP 1
10731: PPUSH
10732: LD_STRING D2b-JMM-1
10734: PPUSH
10735: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10739: LD_EXP 22
10743: PPUSH
10744: LD_STRING D2b-Pow-1
10746: PPUSH
10747: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10751: LD_EXP 1
10755: PPUSH
10756: LD_STRING D2c-JMM-1
10758: PPUSH
10759: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10763: LD_EXP 22
10767: PPUSH
10768: LD_STRING D2c-Pow-1
10770: PPUSH
10771: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10775: LD_EXP 1
10779: PPUSH
10780: LD_STRING D2c-JMM-2
10782: PPUSH
10783: CALL_OW 88
// secondPass = 2 ;
10787: LD_ADDR_EXP 28
10791: PUSH
10792: LD_INT 2
10794: ST_TO_ADDR
// end ; DialogueOff ;
10795: CALL_OW 7
// exit ;
10799: POP
10800: POP
10801: GO 10807
// end ; end ;
10803: GO 10490
10805: POP
10806: POP
// end ;
10807: PPOPN 3
10809: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10810: LD_EXP 29
10814: PUSH
10815: LD_INT 1
10817: EQUAL
10818: IFFALSE 10978
10820: GO 10822
10822: DISABLE
10823: LD_INT 0
10825: PPUSH
10826: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10827: LD_ADDR_VAR 0 2
10831: PUSH
10832: LD_INT 11
10834: PPUSH
10835: LD_INT 22
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 24
10847: PUSH
10848: LD_INT 250
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PPUSH
10859: CALL_OW 70
10863: ST_TO_ADDR
// enable ;
10864: ENABLE
// for i in vehicles do
10865: LD_ADDR_VAR 0 1
10869: PUSH
10870: LD_VAR 0 2
10874: PUSH
10875: FOR_IN
10876: IFFALSE 10976
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10878: LD_INT 1
10880: PPUSH
10881: LD_VAR 0 1
10885: PPUSH
10886: CALL_OW 292
10890: PUSH
10891: LD_EXP 29
10895: PUSH
10896: LD_INT 1
10898: EQUAL
10899: AND
10900: PUSH
10901: LD_EXP 30
10905: PUSH
10906: LD_INT 4
10908: LESSEQUAL
10909: AND
10910: IFFALSE 10974
// begin disable ;
10912: DISABLE
// DialogueOn ;
10913: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10917: LD_INT 22
10919: PUSH
10920: LD_INT 1
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 21
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PPUSH
10941: CALL_OW 69
10945: PPUSH
10946: LD_STRING DT1-Sol1-1
10948: PPUSH
10949: LD_STRING DT1-FSol1-1
10951: PPUSH
10952: CALL 12287 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10956: LD_EXP 1
10960: PPUSH
10961: LD_STRING DT1-JMM-1
10963: PPUSH
10964: CALL_OW 88
// DialogueOff ;
10968: CALL_OW 7
// break ;
10972: GO 10976
// end ; end ;
10974: GO 10875
10976: POP
10977: POP
// end ;
10978: PPOPN 2
10980: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
10981: LD_EXP 29
10985: PUSH
10986: LD_INT 1
10988: EQUAL
10989: PUSH
10990: LD_INT 11
10992: PPUSH
10993: LD_INT 22
10995: PUSH
10996: LD_INT 3
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 24
11005: PUSH
11006: LD_INT 251
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 2
11015: PUSH
11016: LD_INT 21
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 21
11028: PUSH
11029: LD_INT 1
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: PPUSH
11046: CALL_OW 70
11050: PUSH
11051: LD_INT 0
11053: EQUAL
11054: AND
11055: PUSH
11056: LD_EXP 30
11060: PUSH
11061: LD_INT 3
11063: PUSH
11064: LD_INT 3
11066: PUSH
11067: LD_INT 4
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: LIST
11074: PUSH
11075: LD_OWVAR 67
11079: ARRAY
11080: LESSEQUAL
11081: AND
11082: PUSH
11083: LD_EXP 30
11087: PUSH
11088: LD_INT 5
11090: GREATER
11091: AND
11092: IFFALSE 11176
11094: GO 11096
11096: DISABLE
// begin vehicleTeleported = 2 ;
11097: LD_ADDR_EXP 29
11101: PUSH
11102: LD_INT 2
11104: ST_TO_ADDR
// DialogueOn ;
11105: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11109: LD_EXP 1
11113: PPUSH
11114: LD_STRING DT1a-JMM-1
11116: PPUSH
11117: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11121: LD_INT 22
11123: PUSH
11124: LD_INT 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 69
11149: PPUSH
11150: LD_STRING DT1a-Sol1-1
11152: PPUSH
11153: LD_STRING DT1a-FSol1-1
11155: PPUSH
11156: CALL 12287 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11160: LD_EXP 1
11164: PPUSH
11165: LD_STRING DT1a-JMM-2
11167: PPUSH
11168: CALL_OW 88
// DialogueOff ;
11172: CALL_OW 7
// end ;
11176: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11177: LD_EXP 29
11181: PUSH
11182: LD_INT 3
11184: EQUAL
11185: PUSH
11186: LD_EXP 30
11190: PUSH
11191: LD_INT 4
11193: GREATER
11194: AND
11195: IFFALSE 11333
11197: GO 11199
11199: DISABLE
11200: LD_INT 0
11202: PPUSH
11203: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11204: LD_ADDR_VAR 0 2
11208: PUSH
11209: LD_INT 11
11211: PPUSH
11212: LD_INT 22
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 24
11224: PUSH
11225: LD_INT 250
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 70
11240: ST_TO_ADDR
// enable ;
11241: ENABLE
// for i in vehicles do
11242: LD_ADDR_VAR 0 1
11246: PUSH
11247: LD_VAR 0 2
11251: PUSH
11252: FOR_IN
11253: IFFALSE 11331
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11255: LD_INT 1
11257: PPUSH
11258: LD_VAR 0 1
11262: PPUSH
11263: CALL_OW 292
11267: PUSH
11268: LD_EXP 29
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: AND
11277: IFFALSE 11329
// begin disable ;
11279: DISABLE
// DialogueOn ;
11280: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11284: LD_INT 22
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: PPUSH
11313: LD_STRING DT2-Sol1-1
11315: PPUSH
11316: LD_STRING DT2-FSol1-1
11318: PPUSH
11319: CALL 12287 0 3
// DialogueOff ;
11323: CALL_OW 7
// break ;
11327: GO 11331
// end ; end ;
11329: GO 11252
11331: POP
11332: POP
// end ;
11333: PPOPN 2
11335: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11336: LD_EXP 29
11340: PUSH
11341: LD_INT 3
11343: EQUAL
11344: PUSH
11345: LD_INT 11
11347: PPUSH
11348: LD_INT 22
11350: PUSH
11351: LD_INT 3
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 24
11360: PUSH
11361: LD_INT 251
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: LD_INT 21
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 21
11383: PUSH
11384: LD_INT 1
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: PPUSH
11401: CALL_OW 70
11405: PUSH
11406: LD_INT 0
11408: EQUAL
11409: AND
11410: PUSH
11411: LD_EXP 30
11415: PUSH
11416: LD_INT 6
11418: PUSH
11419: LD_INT 6
11421: PUSH
11422: LD_INT 8
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: PUSH
11430: LD_OWVAR 67
11434: ARRAY
11435: EQUAL
11436: AND
11437: IFFALSE 11521
11439: GO 11441
11441: DISABLE
// begin vehicleTeleported = 4 ;
11442: LD_ADDR_EXP 29
11446: PUSH
11447: LD_INT 4
11449: ST_TO_ADDR
// DialogueOn ;
11450: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11454: LD_EXP 1
11458: PPUSH
11459: LD_STRING DT2a-JMM-1
11461: PPUSH
11462: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11466: LD_INT 22
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 21
11478: PUSH
11479: LD_INT 1
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 69
11494: PPUSH
11495: LD_STRING DT2a-Sol1-1
11497: PPUSH
11498: LD_STRING DT2a-FSol1-1
11500: PPUSH
11501: CALL 12287 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
11505: LD_EXP 3
11509: PPUSH
11510: LD_STRING DT2a-Don-1
11512: PPUSH
11513: CALL_OW 88
// DialogueOff ;
11517: CALL_OW 7
// end ;
11521: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11522: LD_INT 1
11524: PPUSH
11525: LD_INT 45
11527: PPUSH
11528: LD_INT 74
11530: PPUSH
11531: CALL_OW 293
11535: IFFALSE 11630
11537: GO 11539
11539: DISABLE
// begin DialogueOn ;
11540: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11544: LD_INT 36
11546: PPUSH
11547: LD_INT 55
11549: PPUSH
11550: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11554: LD_INT 22
11556: PUSH
11557: LD_INT 1
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 21
11566: PUSH
11567: LD_INT 1
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PPUSH
11578: CALL_OW 69
11582: PPUSH
11583: LD_STRING D5-Sol1-1
11585: PPUSH
11586: LD_STRING D5-FSol1-
11588: PPUSH
11589: CALL 12287 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
11593: LD_EXP 31
11597: PUSH
11598: LD_INT 1
11600: EQUAL
11601: PUSH
11602: LD_EXP 3
11606: PPUSH
11607: CALL_OW 300
11611: AND
11612: IFFALSE 11626
// Say ( Donaldson , D5-Don-1 ) ;
11614: LD_EXP 3
11618: PPUSH
11619: LD_STRING D5-Don-1
11621: PPUSH
11622: CALL_OW 88
// DialogueOff ;
11626: CALL_OW 7
// end ;
11630: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
11631: LD_INT 1
11633: PPUSH
11634: LD_INT 10
11636: PPUSH
11637: CALL_OW 292
11641: IFFALSE 11728
11643: GO 11645
11645: DISABLE
// begin DialogueOn ;
11646: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
11650: LD_INT 10
11652: PPUSH
11653: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11657: LD_INT 22
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 21
11669: PUSH
11670: LD_INT 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PPUSH
11681: CALL_OW 69
11685: PUSH
11686: LD_EXP 1
11690: PUSH
11691: EMPTY
11692: LIST
11693: DIFF
11694: PPUSH
11695: LD_STRING DT3-Sol1-1
11697: PPUSH
11698: LD_STRING DT3-FSol1-1
11700: PPUSH
11701: CALL 12287 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11705: LD_EXP 1
11709: PPUSH
11710: LD_STRING DT3-JMM-1
11712: PPUSH
11713: CALL_OW 88
// DialogueOff ;
11717: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11721: LD_STRING M2
11723: PPUSH
11724: CALL_OW 337
// end ;
11728: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 do var i , j , vehs ;
11729: LD_INT 3
11731: PPUSH
11732: CALL_OW 303
11736: PUSH
11737: LD_INT 4
11739: PPUSH
11740: CALL_OW 303
11744: OR
11745: PUSH
11746: LD_INT 22
11748: PPUSH
11749: LD_INT 22
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PPUSH
11759: CALL_OW 70
11763: PUSH
11764: LD_INT 0
11766: GREATER
11767: OR
11768: IFFALSE 11975
11770: GO 11772
11772: DISABLE
11773: LD_INT 0
11775: PPUSH
11776: PPUSH
11777: PPUSH
// begin ruAI = 0 ;
11778: LD_ADDR_EXP 42
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_INT 10
11793: PPUSH
11794: LD_INT 22
11796: PUSH
11797: LD_INT 3
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 21
11806: PUSH
11807: LD_INT 2
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 58
11816: PUSH
11817: EMPTY
11818: LIST
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: LIST
11824: PPUSH
11825: CALL_OW 70
11829: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11830: LD_EXP 35
11834: PPUSH
11835: CALL_OW 122
// wait ( 0 0$1 ) ;
11839: LD_INT 35
11841: PPUSH
11842: CALL_OW 67
// DialogueOn ;
11846: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11850: LD_EXP 1
11854: PPUSH
11855: LD_STRING D6-JMM-1
11857: PPUSH
11858: CALL_OW 88
// DialogueOff ;
11862: CALL_OW 7
// if vehs > 0 then
11866: LD_VAR 0 3
11870: PUSH
11871: LD_INT 0
11873: GREATER
11874: IFFALSE 11944
// for i := 1 to RuScientists do
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: DOUBLE
11882: LD_INT 1
11884: DEC
11885: ST_TO_ADDR
11886: LD_EXP 35
11890: PUSH
11891: FOR_TO
11892: IFFALSE 11940
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11894: LD_EXP 35
11898: PUSH
11899: LD_VAR 0 1
11903: ARRAY
11904: PPUSH
11905: LD_INT 3
11907: PUSH
11908: LD_INT 60
11910: PUSH
11911: EMPTY
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 72
11922: PPUSH
11923: LD_VAR 0 3
11927: PUSH
11928: LD_VAR 0 1
11932: ARRAY
11933: PPUSH
11934: CALL_OW 120
11938: GO 11891
11940: POP
11941: POP
11942: GO 11975
// ComMoveToArea ( RuScientists , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11944: LD_EXP 35
11948: PPUSH
11949: LD_INT 13
11951: PUSH
11952: LD_INT 14
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 1
11961: PPUSH
11962: LD_INT 2
11964: PPUSH
11965: CALL_OW 12
11969: ARRAY
11970: PPUSH
11971: CALL_OW 113
// end ;
11975: PPOPN 3
11977: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
11978: LD_EXP 42
11982: PUSH
11983: LD_INT 0
11985: EQUAL
11986: IFFALSE 12176
11988: GO 11990
11990: DISABLE
11991: LD_INT 0
11993: PPUSH
11994: PPUSH
// begin enable ;
11995: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
11996: LD_ADDR_VAR 0 1
12000: PUSH
12001: LD_INT 13
12003: PPUSH
12004: LD_INT 22
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: PPUSH
12017: CALL_OW 70
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12084
// begin for j in RuScientists do
12025: LD_ADDR_VAR 0 2
12029: PUSH
12030: LD_EXP 35
12034: PUSH
12035: FOR_IN
12036: IFFALSE 12071
// if j = i then
12038: LD_VAR 0 2
12042: PUSH
12043: LD_VAR 0 1
12047: EQUAL
12048: IFFALSE 12069
// RuScientists = RuScientists diff [ i ] ;
12050: LD_ADDR_EXP 35
12054: PUSH
12055: LD_EXP 35
12059: PUSH
12060: LD_VAR 0 1
12064: PUSH
12065: EMPTY
12066: LIST
12067: DIFF
12068: ST_TO_ADDR
12069: GO 12035
12071: POP
12072: POP
// RemoveUnit ( i ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 64
// end ;
12082: GO 12022
12084: POP
12085: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12086: LD_ADDR_VAR 0 1
12090: PUSH
12091: LD_INT 14
12093: PPUSH
12094: LD_INT 22
12096: PUSH
12097: LD_INT 3
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: EMPTY
12105: LIST
12106: PPUSH
12107: CALL_OW 70
12111: PUSH
12112: FOR_IN
12113: IFFALSE 12174
// begin for j in RuScientists do
12115: LD_ADDR_VAR 0 2
12119: PUSH
12120: LD_EXP 35
12124: PUSH
12125: FOR_IN
12126: IFFALSE 12161
// if j = i then
12128: LD_VAR 0 2
12132: PUSH
12133: LD_VAR 0 1
12137: EQUAL
12138: IFFALSE 12159
// RuScientists = RuScientists diff [ i ] ;
12140: LD_ADDR_EXP 35
12144: PUSH
12145: LD_EXP 35
12149: PUSH
12150: LD_VAR 0 1
12154: PUSH
12155: EMPTY
12156: LIST
12157: DIFF
12158: ST_TO_ADDR
12159: GO 12125
12161: POP
12162: POP
// RemoveUnit ( i ) ;
12163: LD_VAR 0 1
12167: PPUSH
12168: CALL_OW 64
// end ;
12172: GO 12112
12174: POP
12175: POP
// end ; end_of_file
12176: PPOPN 2
12178: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12179: LD_INT 0
12181: PPUSH
12182: PPUSH
// if exist_mode then
12183: LD_VAR 0 2
12187: IFFALSE 12206
// unit := CreateCharacter ( ident ) else
12189: LD_ADDR_VAR 0 4
12193: PUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL_OW 34
12203: ST_TO_ADDR
12204: GO 12221
// unit := NewCharacter ( ident ) ;
12206: LD_ADDR_VAR 0 4
12210: PUSH
12211: LD_VAR 0 1
12215: PPUSH
12216: CALL_OW 25
12220: ST_TO_ADDR
// result := unit ;
12221: LD_ADDR_VAR 0 3
12225: PUSH
12226: LD_VAR 0 4
12230: ST_TO_ADDR
// end ;
12231: LD_VAR 0 3
12235: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12236: LD_INT 0
12238: PPUSH
12239: PPUSH
// for i in charactersList do
12240: LD_ADDR_VAR 0 4
12244: PUSH
12245: LD_VAR 0 1
12249: PUSH
12250: FOR_IN
12251: IFFALSE 12280
// begin if IsOk ( i ) then
12253: LD_VAR 0 4
12257: PPUSH
12258: CALL_OW 302
12262: IFFALSE 12278
// SaveCharacters ( i , ident ) ;
12264: LD_VAR 0 4
12268: PPUSH
12269: LD_VAR 0 2
12273: PPUSH
12274: CALL_OW 38
// end ;
12278: GO 12250
12280: POP
12281: POP
// end ;
12282: LD_VAR 0 3
12286: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12287: LD_INT 0
12289: PPUSH
12290: PPUSH
12291: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12292: LD_ADDR_VAR 0 1
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: LD_EXP 1
12306: PUSH
12307: LD_EXP 7
12311: PUSH
12312: LD_EXP 3
12316: PUSH
12317: LD_EXP 4
12321: PUSH
12322: LD_EXP 5
12326: PUSH
12327: LD_EXP 2
12331: PUSH
12332: LD_EXP 12
12336: PUSH
12337: LD_EXP 13
12341: PUSH
12342: LD_EXP 9
12346: PUSH
12347: LD_EXP 11
12351: PUSH
12352: LD_EXP 6
12356: PUSH
12357: LD_EXP 8
12361: PUSH
12362: LD_EXP 10
12366: PUSH
12367: LD_EXP 22
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: DIFF
12388: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
12389: LD_ADDR_VAR 0 6
12393: PUSH
12394: LD_INT 1
12396: PPUSH
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL_OW 12
12406: ST_TO_ADDR
// for i = 1 to characters do
12407: LD_ADDR_VAR 0 5
12411: PUSH
12412: DOUBLE
12413: LD_INT 1
12415: DEC
12416: ST_TO_ADDR
12417: LD_VAR 0 1
12421: PUSH
12422: FOR_TO
12423: IFFALSE 12533
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
12425: LD_VAR 0 5
12429: PUSH
12430: LD_VAR 0 6
12434: EQUAL
12435: PUSH
12436: LD_VAR 0 1
12440: PUSH
12441: LD_VAR 0 5
12445: ARRAY
12446: PPUSH
12447: CALL_OW 258
12451: PUSH
12452: LD_INT 1
12454: EQUAL
12455: AND
12456: IFFALSE 12478
// Say ( characters [ i ] , dialogMID ) ;
12458: LD_VAR 0 1
12462: PUSH
12463: LD_VAR 0 5
12467: ARRAY
12468: PPUSH
12469: LD_VAR 0 2
12473: PPUSH
12474: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
12478: LD_VAR 0 5
12482: PUSH
12483: LD_VAR 0 6
12487: EQUAL
12488: PUSH
12489: LD_VAR 0 1
12493: PUSH
12494: LD_VAR 0 5
12498: ARRAY
12499: PPUSH
12500: CALL_OW 258
12504: PUSH
12505: LD_INT 2
12507: EQUAL
12508: AND
12509: IFFALSE 12531
// Say ( characters [ i ] , dialogFID ) ;
12511: LD_VAR 0 1
12515: PUSH
12516: LD_VAR 0 5
12520: ARRAY
12521: PPUSH
12522: LD_VAR 0 3
12526: PPUSH
12527: CALL_OW 88
// end ;
12531: GO 12422
12533: POP
12534: POP
// end ;
12535: LD_VAR 0 4
12539: RET
// export function PrepareDifficulty ; var tmp ; begin
12540: LD_INT 0
12542: PPUSH
12543: PPUSH
// if Difficulty = 1 then
12544: LD_OWVAR 67
12548: PUSH
12549: LD_INT 1
12551: EQUAL
12552: IFFALSE 12570
// begin RuSolMinLevel = 8 ;
12554: LD_ADDR_EXP 37
12558: PUSH
12559: LD_INT 8
12561: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12562: LD_ADDR_EXP 38
12566: PUSH
12567: LD_INT 10
12569: ST_TO_ADDR
// end ; if Difficulty = 2 then
12570: LD_OWVAR 67
12574: PUSH
12575: LD_INT 2
12577: EQUAL
12578: IFFALSE 12672
// begin RuSolMinLevel = 9 ;
12580: LD_ADDR_EXP 37
12584: PUSH
12585: LD_INT 9
12587: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12588: LD_ADDR_EXP 38
12592: PUSH
12593: LD_INT 10
12595: ST_TO_ADDR
// uc_nation = 3 ;
12596: LD_ADDR_OWVAR 21
12600: PUSH
12601: LD_INT 3
12603: ST_TO_ADDR
// uc_side = 3 ;
12604: LD_ADDR_OWVAR 20
12608: PUSH
12609: LD_INT 3
12611: ST_TO_ADDR
// bc_level = 10 ;
12612: LD_ADDR_OWVAR 43
12616: PUSH
12617: LD_INT 10
12619: ST_TO_ADDR
// bc_type = b_turret ;
12620: LD_ADDR_OWVAR 42
12624: PUSH
12625: LD_INT 33
12627: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12628: LD_ADDR_VAR 0 2
12632: PUSH
12633: LD_INT 86
12635: PPUSH
12636: LD_INT 34
12638: PPUSH
12639: LD_INT 2
12641: PPUSH
12642: CALL_OW 47
12646: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12647: LD_VAR 0 2
12651: PPUSH
12652: LD_INT 49
12654: PPUSH
12655: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12659: LD_INT 64
12661: PPUSH
12662: LD_INT 3
12664: PPUSH
12665: LD_INT 1
12667: PPUSH
12668: CALL_OW 322
// end ; if Difficulty = 3 then
12672: LD_OWVAR 67
12676: PUSH
12677: LD_INT 3
12679: EQUAL
12680: IFFALSE 12818
// begin RuSolMinLevel = 10 ;
12682: LD_ADDR_EXP 37
12686: PUSH
12687: LD_INT 10
12689: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12690: LD_ADDR_EXP 38
12694: PUSH
12695: LD_INT 10
12697: ST_TO_ADDR
// uc_nation = 3 ;
12698: LD_ADDR_OWVAR 21
12702: PUSH
12703: LD_INT 3
12705: ST_TO_ADDR
// uc_side = 3 ;
12706: LD_ADDR_OWVAR 20
12710: PUSH
12711: LD_INT 3
12713: ST_TO_ADDR
// bc_level = 10 ;
12714: LD_ADDR_OWVAR 43
12718: PUSH
12719: LD_INT 10
12721: ST_TO_ADDR
// bc_type = b_turret ;
12722: LD_ADDR_OWVAR 42
12726: PUSH
12727: LD_INT 33
12729: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12730: LD_ADDR_VAR 0 2
12734: PUSH
12735: LD_INT 86
12737: PPUSH
12738: LD_INT 34
12740: PPUSH
12741: LD_INT 2
12743: PPUSH
12744: CALL_OW 47
12748: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12749: LD_VAR 0 2
12753: PPUSH
12754: LD_INT 49
12756: PPUSH
12757: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12761: LD_ADDR_VAR 0 2
12765: PUSH
12766: LD_INT 93
12768: PPUSH
12769: LD_INT 31
12771: PPUSH
12772: LD_INT 2
12774: PPUSH
12775: CALL_OW 47
12779: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12780: LD_VAR 0 2
12784: PPUSH
12785: LD_INT 49
12787: PPUSH
12788: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12792: LD_INT 64
12794: PPUSH
12795: LD_INT 3
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12805: LD_INT 65
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: CALL_OW 322
// end ; end ;
12818: LD_VAR 0 1
12822: RET
// export function ShowQuery1 ; begin
12823: LD_INT 0
12825: PPUSH
// case query ( Q1 ) of 1 :
12826: LD_STRING Q1
12828: PPUSH
12829: CALL_OW 97
12833: PUSH
12834: LD_INT 1
12836: DOUBLE
12837: EQUAL
12838: IFTRUE 12842
12840: GO 12853
12842: POP
// result = 1 ; 2 :
12843: LD_ADDR_VAR 0 1
12847: PUSH
12848: LD_INT 1
12850: ST_TO_ADDR
12851: GO 12892
12853: LD_INT 2
12855: DOUBLE
12856: EQUAL
12857: IFTRUE 12861
12859: GO 12872
12861: POP
// result = 2 ; 3 :
12862: LD_ADDR_VAR 0 1
12866: PUSH
12867: LD_INT 2
12869: ST_TO_ADDR
12870: GO 12892
12872: LD_INT 3
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12891
12880: POP
// result = 3 ; end ;
12881: LD_ADDR_VAR 0 1
12885: PUSH
12886: LD_INT 3
12888: ST_TO_ADDR
12889: GO 12892
12891: POP
// end ;
12892: LD_VAR 0 1
12896: RET
// export function ShowQuery2 ; begin
12897: LD_INT 0
12899: PPUSH
// case query ( Q1a ) of 1 :
12900: LD_STRING Q1a
12902: PPUSH
12903: CALL_OW 97
12907: PUSH
12908: LD_INT 1
12910: DOUBLE
12911: EQUAL
12912: IFTRUE 12916
12914: GO 12927
12916: POP
// result = 1 ; 2 :
12917: LD_ADDR_VAR 0 1
12921: PUSH
12922: LD_INT 1
12924: ST_TO_ADDR
12925: GO 12966
12927: LD_INT 2
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12946
12935: POP
// result = 2 ; 3 :
12936: LD_ADDR_VAR 0 1
12940: PUSH
12941: LD_INT 2
12943: ST_TO_ADDR
12944: GO 12966
12946: LD_INT 3
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 12965
12954: POP
// result = 3 ; end ;
12955: LD_ADDR_VAR 0 1
12959: PUSH
12960: LD_INT 3
12962: ST_TO_ADDR
12963: GO 12966
12965: POP
// end ;
12966: LD_VAR 0 1
12970: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12971: LD_INT 0
12973: PPUSH
12974: PPUSH
12975: PPUSH
12976: PPUSH
12977: PPUSH
// for i = 1 to count do
12978: LD_ADDR_VAR 0 8
12982: PUSH
12983: DOUBLE
12984: LD_INT 1
12986: DEC
12987: ST_TO_ADDR
12988: LD_VAR 0 6
12992: PUSH
12993: FOR_TO
12994: IFFALSE 13075
// begin uc_side = side ;
12996: LD_ADDR_OWVAR 20
13000: PUSH
13001: LD_VAR 0 1
13005: ST_TO_ADDR
// uc_nation = nation ;
13006: LD_ADDR_OWVAR 21
13010: PUSH
13011: LD_VAR 0 2
13015: ST_TO_ADDR
// hc_gallery =  ;
13016: LD_ADDR_OWVAR 33
13020: PUSH
13021: LD_STRING 
13023: ST_TO_ADDR
// hc_name =  ;
13024: LD_ADDR_OWVAR 26
13028: PUSH
13029: LD_STRING 
13031: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13032: LD_INT 0
13034: PPUSH
13035: LD_VAR 0 5
13039: PPUSH
13040: LD_VAR 0 4
13044: PPUSH
13045: CALL_OW 380
// un = CreateHuman ;
13049: LD_ADDR_VAR 0 10
13053: PUSH
13054: CALL_OW 44
13058: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13059: LD_VAR 0 10
13063: PPUSH
13064: LD_VAR 0 3
13068: PPUSH
13069: CALL_OW 52
// end ;
13073: GO 12993
13075: POP
13076: POP
// end ;
13077: LD_VAR 0 7
13081: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13082: LD_INT 0
13084: PPUSH
13085: PPUSH
13086: PPUSH
13087: PPUSH
// for i = 1 to 72 do
13088: LD_ADDR_VAR 0 5
13092: PUSH
13093: DOUBLE
13094: LD_INT 1
13096: DEC
13097: ST_TO_ADDR
13098: LD_INT 72
13100: PUSH
13101: FOR_TO
13102: IFFALSE 13160
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13104: LD_VAR 0 5
13108: PPUSH
13109: LD_VAR 0 1
13113: PPUSH
13114: CALL_OW 321
13118: PUSH
13119: LD_INT 1
13121: EQUAL
13122: PUSH
13123: LD_VAR 0 5
13127: PPUSH
13128: LD_VAR 0 3
13132: PPUSH
13133: CALL_OW 482
13137: PUSH
13138: LD_INT 1
13140: EQUAL
13141: AND
13142: IFFALSE 13158
// AddComResearch ( lab , i ) ;
13144: LD_VAR 0 2
13148: PPUSH
13149: LD_VAR 0 5
13153: PPUSH
13154: CALL_OW 184
13158: GO 13101
13160: POP
13161: POP
// end ;
13162: LD_VAR 0 4
13166: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13167: LD_INT 0
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
13173: PPUSH
13174: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13175: LD_ADDR_VAR 0 8
13179: PUSH
13180: LD_VAR 0 2
13184: PPUSH
13185: CALL_OW 313
13189: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13190: LD_ADDR_VAR 0 9
13194: PUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_VAR 0 1
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 25
13214: PUSH
13215: LD_INT 2
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 24
13224: PUSH
13225: LD_INT 750
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: LD_INT 54
13237: PUSH
13238: EMPTY
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: PPUSH
13251: CALL_OW 70
13255: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13256: LD_ADDR_VAR 0 6
13260: PUSH
13261: LD_VAR 0 3
13265: PPUSH
13266: LD_INT 22
13268: PUSH
13269: LD_VAR 0 1
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 21
13280: PUSH
13281: LD_INT 3
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 3
13290: PUSH
13291: LD_INT 24
13293: PUSH
13294: LD_INT 1000
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: PPUSH
13313: CALL_OW 70
13317: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13318: LD_VAR 0 6
13322: NOT
13323: PUSH
13324: LD_INT 22
13326: PUSH
13327: LD_VAR 0 1
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 25
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 24
13348: PUSH
13349: LD_INT 250
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: NOT
13366: AND
13367: IFFALSE 13371
// exit ;
13369: GO 13553
// if buildings_list > 0 and engineerOkInside then
13371: LD_VAR 0 6
13375: PUSH
13376: LD_INT 0
13378: GREATER
13379: PUSH
13380: LD_VAR 0 8
13384: AND
13385: IFFALSE 13396
// ComExitBuilding ( engineerOkInside ) ;
13387: LD_VAR 0 8
13391: PPUSH
13392: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13396: LD_VAR 0 6
13400: PUSH
13401: LD_INT 0
13403: GREATER
13404: PUSH
13405: LD_VAR 0 9
13409: PUSH
13410: LD_INT 0
13412: GREATER
13413: AND
13414: IFFALSE 13434
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13416: LD_VAR 0 9
13420: PPUSH
13421: LD_VAR 0 6
13425: PUSH
13426: LD_INT 1
13428: ARRAY
13429: PPUSH
13430: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13434: LD_VAR 0 6
13438: PUSH
13439: LD_INT 0
13441: EQUAL
13442: PUSH
13443: LD_VAR 0 4
13447: PUSH
13448: LD_INT 0
13450: EQUAL
13451: AND
13452: PUSH
13453: LD_VAR 0 9
13457: PUSH
13458: LD_INT 0
13460: GREATER
13461: AND
13462: IFFALSE 13478
// ComEnterUnit ( engineerOkOutside , building ) ;
13464: LD_VAR 0 9
13468: PPUSH
13469: LD_VAR 0 2
13473: PPUSH
13474: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13478: LD_VAR 0 9
13482: PUSH
13483: LD_INT 0
13485: GREATER
13486: PUSH
13487: LD_VAR 0 6
13491: PUSH
13492: LD_INT 0
13494: EQUAL
13495: AND
13496: PUSH
13497: LD_VAR 0 4
13501: PUSH
13502: LD_INT 0
13504: GREATER
13505: AND
13506: IFFALSE 13553
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13508: LD_VAR 0 9
13512: PPUSH
13513: LD_VAR 0 4
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PPUSH
13522: LD_VAR 0 4
13526: PUSH
13527: LD_INT 2
13529: ARRAY
13530: PPUSH
13531: LD_VAR 0 4
13535: PUSH
13536: LD_INT 3
13538: ARRAY
13539: PPUSH
13540: LD_VAR 0 4
13544: PUSH
13545: LD_INT 4
13547: ARRAY
13548: PPUSH
13549: CALL_OW 145
// end ;
13553: LD_VAR 0 5
13557: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13558: LD_INT 0
13560: PPUSH
13561: PPUSH
13562: PPUSH
13563: PPUSH
13564: PPUSH
13565: PPUSH
13566: PPUSH
13567: PPUSH
13568: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13569: LD_ADDR_VAR 0 6
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_VAR 0 1
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 25
13588: PUSH
13589: LD_INT 4
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 24
13598: PUSH
13599: LD_INT 251
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: PPUSH
13611: CALL_OW 69
13615: PUSH
13616: LD_EXP 35
13620: PUSH
13621: EMPTY
13622: LIST
13623: DIFF
13624: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13625: LD_ADDR_VAR 0 7
13629: PUSH
13630: LD_VAR 0 3
13634: PPUSH
13635: LD_INT 22
13637: PUSH
13638: LD_VAR 0 1
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 25
13649: PUSH
13650: LD_INT 4
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 50
13659: PUSH
13660: EMPTY
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: PPUSH
13668: CALL_OW 70
13672: PUSH
13673: LD_EXP 35
13677: PUSH
13678: EMPTY
13679: LIST
13680: DIFF
13681: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13682: LD_ADDR_VAR 0 10
13686: PUSH
13687: LD_VAR 0 3
13691: PPUSH
13692: LD_INT 22
13694: PUSH
13695: LD_VAR 0 1
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 21
13706: PUSH
13707: LD_INT 1
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 3
13716: PUSH
13717: LD_INT 24
13719: PUSH
13720: LD_INT 750
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: PPUSH
13736: CALL_OW 70
13740: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13741: LD_ADDR_VAR 0 11
13745: PUSH
13746: LD_VAR 0 2
13750: PPUSH
13751: LD_INT 22
13753: PUSH
13754: LD_VAR 0 1
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 21
13765: PUSH
13766: LD_INT 1
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 3
13775: PUSH
13776: LD_INT 24
13778: PUSH
13779: LD_INT 1000
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 70
13799: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13800: LD_VAR 0 10
13804: PUSH
13805: LD_INT 0
13807: GREATER
13808: PUSH
13809: LD_VAR 0 6
13813: PUSH
13814: LD_INT 0
13816: GREATER
13817: AND
13818: IFFALSE 13834
// ComMoveToArea ( damageUnits , healArea ) ;
13820: LD_VAR 0 10
13824: PPUSH
13825: LD_VAR 0 2
13829: PPUSH
13830: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13834: LD_VAR 0 11
13838: PUSH
13839: LD_INT 0
13841: GREATER
13842: PUSH
13843: LD_VAR 0 7
13847: PUSH
13848: LD_INT 0
13850: GREATER
13851: AND
13852: IFFALSE 13872
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13854: LD_VAR 0 7
13858: PPUSH
13859: LD_VAR 0 11
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: PPUSH
13868: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13872: LD_VAR 0 10
13876: PUSH
13877: LD_INT 0
13879: EQUAL
13880: PUSH
13881: LD_VAR 0 11
13885: PUSH
13886: LD_INT 0
13888: EQUAL
13889: AND
13890: PUSH
13891: LD_VAR 0 7
13895: PUSH
13896: LD_INT 0
13898: GREATER
13899: AND
13900: IFFALSE 14005
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13902: LD_ADDR_VAR 0 12
13906: PUSH
13907: LD_INT 22
13909: PUSH
13910: LD_VAR 0 1
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 21
13921: PUSH
13922: LD_INT 3
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 30
13931: PUSH
13932: LD_INT 8
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 69
13948: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13949: LD_ADDR_VAR 0 13
13953: PUSH
13954: LD_INT 1
13956: PPUSH
13957: LD_VAR 0 12
13961: PPUSH
13962: CALL_OW 12
13966: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13967: LD_VAR 0 7
13971: PPUSH
13972: LD_INT 3
13974: PUSH
13975: LD_INT 60
13977: PUSH
13978: EMPTY
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PPUSH
13985: CALL_OW 72
13989: PPUSH
13990: LD_VAR 0 12
13994: PUSH
13995: LD_VAR 0 13
13999: ARRAY
14000: PPUSH
14001: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14005: LD_VAR 0 3
14009: PPUSH
14010: LD_INT 22
14012: PUSH
14013: LD_VAR 0 1
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 25
14024: PUSH
14025: LD_INT 3
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 24
14034: PUSH
14035: LD_INT 751
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: PPUSH
14047: CALL_OW 70
14051: PUSH
14052: LD_INT 0
14054: GREATER
14055: PUSH
14056: LD_INT 21
14058: PPUSH
14059: CALL_OW 302
14063: AND
14064: PUSH
14065: LD_INT 21
14067: PPUSH
14068: CALL_OW 255
14072: PUSH
14073: LD_INT 3
14075: EQUAL
14076: AND
14077: IFFALSE 14133
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14079: LD_VAR 0 3
14083: PPUSH
14084: LD_INT 22
14086: PUSH
14087: LD_VAR 0 1
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 25
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 24
14108: PUSH
14109: LD_INT 751
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 70
14125: PPUSH
14126: LD_INT 21
14128: PPUSH
14129: CALL_OW 120
// end ;
14133: LD_VAR 0 5
14137: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14138: LD_INT 0
14140: PPUSH
14141: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14142: LD_INT 22
14144: PUSH
14145: LD_VAR 0 1
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: PUSH
14173: LD_INT 18
14175: PPUSH
14176: LD_INT 22
14178: PUSH
14179: LD_VAR 0 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 21
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 70
14206: PUSH
14207: LD_VAR 0 3
14211: LESSEQUAL
14212: DIFF
14213: IFFALSE 14280
// for i = 1 to vehCount do
14215: LD_ADDR_VAR 0 9
14219: PUSH
14220: DOUBLE
14221: LD_INT 1
14223: DEC
14224: ST_TO_ADDR
14225: LD_VAR 0 3
14229: PUSH
14230: FOR_TO
14231: IFFALSE 14278
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_VAR 0 7
14242: PPUSH
14243: LD_VAR 0 5
14247: PPUSH
14248: LD_VAR 0 6
14252: PPUSH
14253: LD_VAR 0 4
14257: PUSH
14258: LD_INT 1
14260: PPUSH
14261: LD_VAR 0 4
14265: PPUSH
14266: CALL_OW 12
14270: ARRAY
14271: PPUSH
14272: CALL_OW 185
14276: GO 14230
14278: POP
14279: POP
// end ;
14280: LD_VAR 0 8
14284: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14285: LD_INT 0
14287: PPUSH
14288: PPUSH
14289: PPUSH
14290: PPUSH
14291: PPUSH
14292: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14293: LD_EXP 40
14297: PUSH
14298: LD_INT 3
14300: PUSH
14301: LD_INT 4
14303: PUSH
14304: LD_INT 4
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: PUSH
14312: LD_OWVAR 67
14316: ARRAY
14317: GREATEREQUAL
14318: PUSH
14319: LD_EXP 41
14323: PUSH
14324: LD_INT 1
14326: PUSH
14327: LD_INT 2
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: PUSH
14338: LD_OWVAR 67
14342: ARRAY
14343: GREATEREQUAL
14344: AND
14345: IFFALSE 14578
// begin repeat wait ( 0 0$3 ) ;
14347: LD_INT 105
14349: PPUSH
14350: CALL_OW 67
// for j in russianTanks do
14354: LD_ADDR_VAR 0 4
14358: PUSH
14359: LD_EXP 40
14363: PUSH
14364: FOR_IN
14365: IFFALSE 14566
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14367: LD_ADDR_VAR 0 6
14371: PUSH
14372: LD_INT 81
14374: PUSH
14375: LD_VAR 0 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 101
14386: PUSH
14387: LD_INT 1
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PPUSH
14398: CALL_OW 69
14402: PPUSH
14403: LD_VAR 0 4
14407: PPUSH
14408: CALL_OW 74
14412: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14413: LD_ADDR_VAR 0 7
14417: PUSH
14418: LD_INT 81
14420: PUSH
14421: LD_VAR 0 1
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 101
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 2
14442: PUSH
14443: LD_INT 59
14445: PUSH
14446: EMPTY
14447: LIST
14448: PUSH
14449: LD_INT 21
14451: PUSH
14452: LD_INT 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 21
14461: PUSH
14462: LD_INT 2
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: PPUSH
14483: CALL_OW 69
14487: PPUSH
14488: LD_VAR 0 4
14492: PPUSH
14493: CALL_OW 74
14497: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14498: LD_VAR 0 4
14502: PPUSH
14503: LD_VAR 0 6
14507: PPUSH
14508: CALL_OW 296
14512: PUSH
14513: LD_INT 8
14515: PLUS
14516: PUSH
14517: LD_VAR 0 4
14521: PPUSH
14522: LD_VAR 0 7
14526: PPUSH
14527: CALL_OW 296
14531: LESS
14532: IFFALSE 14550
// ComAttackUnit ( j , target1 ) else
14534: LD_VAR 0 4
14538: PPUSH
14539: LD_VAR 0 6
14543: PPUSH
14544: CALL_OW 115
14548: GO 14564
// ComAttackUnit ( j , target2 ) ;
14550: LD_VAR 0 4
14554: PPUSH
14555: LD_VAR 0 7
14559: PPUSH
14560: CALL_OW 115
// end ;
14564: GO 14364
14566: POP
14567: POP
// until russianTanks = 0 ;
14568: LD_EXP 40
14572: PUSH
14573: LD_INT 0
14575: EQUAL
14576: IFFALSE 14347
// end ; end ;
14578: LD_VAR 0 2
14582: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14583: LD_INT 0
14585: PPUSH
14586: PPUSH
14587: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14588: LD_EXP 40
14592: PUSH
14593: LD_INT 1
14595: GREATEREQUAL
14596: PUSH
14597: LD_EXP 41
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: LD_INT 2
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: LIST
14615: PUSH
14616: LD_OWVAR 67
14620: ARRAY
14621: GREATEREQUAL
14622: AND
14623: IFFALSE 14773
// repeat wait ( 0 0$3 ) ;
14625: LD_INT 105
14627: PPUSH
14628: CALL_OW 67
// if russianTimeLapsers > 0 then
14632: LD_EXP 41
14636: PUSH
14637: LD_INT 0
14639: GREATER
14640: IFFALSE 14763
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
14642: LD_ADDR_VAR 0 3
14646: PUSH
14647: LD_EXP 41
14651: PPUSH
14652: LD_INT 3
14654: PUSH
14655: LD_INT 60
14657: PUSH
14658: EMPTY
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PPUSH
14665: CALL_OW 72
14669: PUSH
14670: FOR_IN
14671: IFFALSE 14761
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
14673: LD_ADDR_VAR 0 4
14677: PUSH
14678: LD_INT 81
14680: PUSH
14681: LD_VAR 0 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 101
14692: PUSH
14693: LD_INT 1
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 21
14702: PUSH
14703: LD_INT 1
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: PPUSH
14720: LD_VAR 0 3
14724: PPUSH
14725: CALL_OW 74
14729: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
14730: LD_VAR 0 3
14734: PPUSH
14735: LD_VAR 0 4
14739: PPUSH
14740: CALL_OW 250
14744: PPUSH
14745: LD_VAR 0 4
14749: PPUSH
14750: CALL_OW 251
14754: PPUSH
14755: CALL_OW 111
// end ;
14759: GO 14670
14761: POP
14762: POP
// until russianTimeLapsers = 0 ;
14763: LD_EXP 41
14767: PUSH
14768: LD_INT 0
14770: EQUAL
14771: IFFALSE 14625
// end ;
14773: LD_VAR 0 2
14777: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14778: LD_INT 0
14780: PPUSH
14781: PPUSH
14782: PPUSH
14783: PPUSH
14784: PPUSH
14785: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14786: LD_ADDR_VAR 0 6
14790: PUSH
14791: LD_INT 22
14793: PUSH
14794: LD_VAR 0 1
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 25
14805: PUSH
14806: LD_INT 9
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PPUSH
14817: CALL_OW 69
14821: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14822: LD_ADDR_VAR 0 7
14826: PUSH
14827: LD_INT 81
14829: PUSH
14830: LD_VAR 0 1
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 3
14841: PUSH
14842: LD_INT 21
14844: PUSH
14845: LD_INT 3
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PPUSH
14860: CALL_OW 69
14864: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14865: LD_ADDR_VAR 0 4
14869: PUSH
14870: LD_INT 1
14872: PPUSH
14873: LD_INT 3
14875: PPUSH
14876: CALL_OW 12
14880: ST_TO_ADDR
// for i = 1 to list do
14881: LD_ADDR_VAR 0 5
14885: PUSH
14886: DOUBLE
14887: LD_INT 1
14889: DEC
14890: ST_TO_ADDR
14891: LD_VAR 0 6
14895: PUSH
14896: FOR_TO
14897: IFFALSE 15099
// for ta in filter do
14899: LD_ADDR_VAR 0 3
14903: PUSH
14904: LD_VAR 0 7
14908: PUSH
14909: FOR_IN
14910: IFFALSE 15095
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14912: LD_VAR 0 6
14916: PUSH
14917: LD_VAR 0 5
14921: ARRAY
14922: PPUSH
14923: LD_VAR 0 3
14927: PPUSH
14928: CALL_OW 296
14932: PUSH
14933: LD_INT 15
14935: LESSEQUAL
14936: IFFALSE 15093
// begin case c of 1 :
14938: LD_VAR 0 4
14942: PUSH
14943: LD_INT 1
14945: DOUBLE
14946: EQUAL
14947: IFTRUE 14951
14949: GO 14989
14951: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14952: LD_VAR 0 6
14956: PUSH
14957: LD_VAR 0 5
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 3
14967: PPUSH
14968: CALL_OW 250
14972: PPUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: CALL_OW 251
14982: PPUSH
14983: CALL_OW 154
14987: GO 15093
14989: LD_INT 2
14991: DOUBLE
14992: EQUAL
14993: IFTRUE 14997
14995: GO 15061
14997: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14998: LD_VAR 0 6
15002: PUSH
15003: LD_VAR 0 5
15007: ARRAY
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: CALL_OW 250
15018: PUSH
15019: LD_INT 1
15021: NEG
15022: PPUSH
15023: LD_INT 1
15025: PPUSH
15026: CALL_OW 12
15030: PLUS
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: CALL_OW 251
15041: PUSH
15042: LD_INT 1
15044: NEG
15045: PPUSH
15046: LD_INT 1
15048: PPUSH
15049: CALL_OW 12
15053: PLUS
15054: PPUSH
15055: CALL_OW 153
15059: GO 15093
15061: LD_INT 3
15063: DOUBLE
15064: EQUAL
15065: IFTRUE 15069
15067: GO 15092
15069: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15070: LD_VAR 0 6
15074: PUSH
15075: LD_VAR 0 5
15079: ARRAY
15080: PPUSH
15081: LD_VAR 0 3
15085: PPUSH
15086: CALL_OW 115
15090: GO 15093
15092: POP
// end ; end ;
15093: GO 14909
15095: POP
15096: POP
15097: GO 14896
15099: POP
15100: POP
// end ;
15101: LD_VAR 0 2
15105: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15106: LD_INT 0
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
// r := 100 ;
15112: LD_ADDR_VAR 0 5
15116: PUSH
15117: LD_INT 100
15119: ST_TO_ADDR
// x := 0 ;
15120: LD_ADDR_VAR 0 6
15124: PUSH
15125: LD_INT 0
15127: ST_TO_ADDR
// while ( x < n ) do
15128: LD_VAR 0 6
15132: PUSH
15133: LD_VAR 0 2
15137: LESS
15138: IFFALSE 15425
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15140: LD_ADDR_VAR 0 4
15144: PUSH
15145: DOUBLE
15146: LD_INT 1
15148: DEC
15149: ST_TO_ADDR
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 0
15157: PPUSH
15158: CALL_OW 517
15162: PUSH
15163: LD_INT 1
15165: ARRAY
15166: PUSH
15167: FOR_TO
15168: IFFALSE 15421
// begin if r > 50 then
15170: LD_VAR 0 5
15174: PUSH
15175: LD_INT 50
15177: GREATER
15178: IFFALSE 15397
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15180: LD_VAR 0 1
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL_OW 517
15192: PUSH
15193: LD_INT 1
15195: ARRAY
15196: PUSH
15197: LD_VAR 0 4
15201: ARRAY
15202: PPUSH
15203: LD_VAR 0 1
15207: PPUSH
15208: LD_INT 0
15210: PPUSH
15211: CALL_OW 517
15215: PUSH
15216: LD_INT 2
15218: ARRAY
15219: PUSH
15220: LD_VAR 0 4
15224: ARRAY
15225: PPUSH
15226: CALL_OW 458
15230: NOT
15231: IFFALSE 15381
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15233: LD_VAR 0 1
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL_OW 517
15245: PUSH
15246: LD_INT 1
15248: ARRAY
15249: PUSH
15250: LD_VAR 0 4
15254: ARRAY
15255: PPUSH
15256: LD_VAR 0 1
15260: PPUSH
15261: LD_INT 0
15263: PPUSH
15264: CALL_OW 517
15268: PUSH
15269: LD_INT 2
15271: ARRAY
15272: PUSH
15273: LD_VAR 0 4
15277: ARRAY
15278: PPUSH
15279: LD_INT 5
15281: PPUSH
15282: LD_INT 0
15284: PPUSH
15285: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15289: LD_ADDR_EXP 44
15293: PUSH
15294: LD_EXP 44
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 0
15309: PPUSH
15310: CALL_OW 517
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PUSH
15319: LD_VAR 0 4
15323: ARRAY
15324: PUSH
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_INT 0
15332: PPUSH
15333: CALL_OW 517
15337: PUSH
15338: LD_INT 2
15340: ARRAY
15341: PUSH
15342: LD_VAR 0 4
15346: ARRAY
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 2
15356: ST_TO_ADDR
// r := 0 ;
15357: LD_ADDR_VAR 0 5
15361: PUSH
15362: LD_INT 0
15364: ST_TO_ADDR
// x := x + 1 ;
15365: LD_ADDR_VAR 0 6
15369: PUSH
15370: LD_VAR 0 6
15374: PUSH
15375: LD_INT 1
15377: PLUS
15378: ST_TO_ADDR
// end else
15379: GO 15395
// r := r + 35 ;
15381: LD_ADDR_VAR 0 5
15385: PUSH
15386: LD_VAR 0 5
15390: PUSH
15391: LD_INT 35
15393: PLUS
15394: ST_TO_ADDR
// end else
15395: GO 15419
// r := r + rand ( 10 , 25 ) ;
15397: LD_ADDR_VAR 0 5
15401: PUSH
15402: LD_VAR 0 5
15406: PUSH
15407: LD_INT 10
15409: PPUSH
15410: LD_INT 25
15412: PPUSH
15413: CALL_OW 12
15417: PLUS
15418: ST_TO_ADDR
// end ;
15419: GO 15167
15421: POP
15422: POP
15423: GO 15128
// end ;
15425: LD_VAR 0 3
15429: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15430: LD_INT 0
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
// tmpTab = [ ] ;
15436: LD_ADDR_VAR 0 6
15440: PUSH
15441: EMPTY
15442: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15443: LD_INT 22
15445: PUSH
15446: LD_VAR 0 1
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 30
15457: PUSH
15458: LD_INT 32
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 69
15473: PUSH
15474: LD_INT 0
15476: GREATER
15477: IFFALSE 15560
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15479: LD_ADDR_VAR 0 4
15483: PUSH
15484: LD_INT 22
15486: PUSH
15487: LD_VAR 0 1
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 30
15498: PUSH
15499: LD_INT 32
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PPUSH
15510: CALL_OW 69
15514: PUSH
15515: FOR_IN
15516: IFFALSE 15558
// begin for j in UnitsInside ( i ) do
15518: LD_ADDR_VAR 0 5
15522: PUSH
15523: LD_VAR 0 4
15527: PPUSH
15528: CALL_OW 313
15532: PUSH
15533: FOR_IN
15534: IFFALSE 15554
// tmpTab = tmpTab ^ j ;
15536: LD_ADDR_VAR 0 6
15540: PUSH
15541: LD_VAR 0 6
15545: PUSH
15546: LD_VAR 0 5
15550: ADD
15551: ST_TO_ADDR
15552: GO 15533
15554: POP
15555: POP
// end ;
15556: GO 15515
15558: POP
15559: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15560: LD_VAR 0 6
15564: PPUSH
15565: LD_VAR 0 2
15569: PPUSH
15570: CALL_OW 250
15574: PPUSH
15575: LD_VAR 0 2
15579: PPUSH
15580: CALL_OW 251
15584: PPUSH
15585: CALL_OW 114
// end ;
15589: LD_VAR 0 3
15593: RET
// export function PrepareNature ; var i , un ; begin
15594: LD_INT 0
15596: PPUSH
15597: PPUSH
15598: PPUSH
// uc_side := 0 ;
15599: LD_ADDR_OWVAR 20
15603: PUSH
15604: LD_INT 0
15606: ST_TO_ADDR
// uc_nation := 0 ;
15607: LD_ADDR_OWVAR 21
15611: PUSH
15612: LD_INT 0
15614: ST_TO_ADDR
// InitHc ;
15615: CALL_OW 19
// hc_class := class_fish ;
15619: LD_ADDR_OWVAR 28
15623: PUSH
15624: LD_INT 20
15626: ST_TO_ADDR
// for i = 1 to 6 do
15627: LD_ADDR_VAR 0 2
15631: PUSH
15632: DOUBLE
15633: LD_INT 1
15635: DEC
15636: ST_TO_ADDR
15637: LD_INT 6
15639: PUSH
15640: FOR_TO
15641: IFFALSE 15660
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15643: CALL_OW 44
15647: PPUSH
15648: LD_INT 23
15650: PPUSH
15651: LD_INT 0
15653: PPUSH
15654: CALL_OW 49
15658: GO 15640
15660: POP
15661: POP
// for i = 1 to Difficulty + 2 do
15662: LD_ADDR_VAR 0 2
15666: PUSH
15667: DOUBLE
15668: LD_INT 1
15670: DEC
15671: ST_TO_ADDR
15672: LD_OWVAR 67
15676: PUSH
15677: LD_INT 2
15679: PLUS
15680: PUSH
15681: FOR_TO
15682: IFFALSE 15791
// begin hc_sex = sex_male ;
15684: LD_ADDR_OWVAR 27
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// uc_side = 0 ;
15692: LD_ADDR_OWVAR 20
15696: PUSH
15697: LD_INT 0
15699: ST_TO_ADDR
// uc_nation = nation_nature ;
15700: LD_ADDR_OWVAR 21
15704: PUSH
15705: LD_INT 0
15707: ST_TO_ADDR
// hc_class = class_tiger ;
15708: LD_ADDR_OWVAR 28
15712: PUSH
15713: LD_INT 14
15715: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15716: LD_ADDR_OWVAR 31
15720: PUSH
15721: LD_EXP 38
15725: PUSH
15726: LD_INT 0
15728: PUSH
15729: LD_INT 0
15731: PUSH
15732: LD_INT 0
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15741: LD_ADDR_OWVAR 35
15745: PUSH
15746: LD_INT 5
15748: NEG
15749: PPUSH
15750: LD_INT 5
15752: PPUSH
15753: CALL_OW 12
15757: PUSH
15758: LD_OWVAR 67
15762: MUL
15763: ST_TO_ADDR
// un = CreateHuman ;
15764: LD_ADDR_VAR 0 3
15768: PUSH
15769: CALL_OW 44
15773: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15774: LD_VAR 0 3
15778: PPUSH
15779: LD_INT 24
15781: PPUSH
15782: LD_INT 0
15784: PPUSH
15785: CALL_OW 49
// end ;
15789: GO 15681
15791: POP
15792: POP
// for i = 1 to rand ( 3 , 4 ) do
15793: LD_ADDR_VAR 0 2
15797: PUSH
15798: DOUBLE
15799: LD_INT 1
15801: DEC
15802: ST_TO_ADDR
15803: LD_INT 3
15805: PPUSH
15806: LD_INT 4
15808: PPUSH
15809: CALL_OW 12
15813: PUSH
15814: FOR_TO
15815: IFFALSE 15907
// begin hc_sex = sex_male ;
15817: LD_ADDR_OWVAR 27
15821: PUSH
15822: LD_INT 1
15824: ST_TO_ADDR
// uc_side = 0 ;
15825: LD_ADDR_OWVAR 20
15829: PUSH
15830: LD_INT 0
15832: ST_TO_ADDR
// uc_nation = nation_nature ;
15833: LD_ADDR_OWVAR 21
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// hc_class = 18 ;
15841: LD_ADDR_OWVAR 28
15845: PUSH
15846: LD_INT 18
15848: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15849: LD_ADDR_OWVAR 31
15853: PUSH
15854: LD_INT 0
15856: PUSH
15857: LD_INT 0
15859: PUSH
15860: LD_INT 0
15862: PUSH
15863: LD_INT 0
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: ST_TO_ADDR
// hc_agressivity = 0 ;
15872: LD_ADDR_OWVAR 35
15876: PUSH
15877: LD_INT 0
15879: ST_TO_ADDR
// un = CreateHuman ;
15880: LD_ADDR_VAR 0 3
15884: PUSH
15885: CALL_OW 44
15889: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15890: LD_VAR 0 3
15894: PPUSH
15895: LD_INT 24
15897: PPUSH
15898: LD_INT 0
15900: PPUSH
15901: CALL_OW 49
// end ;
15905: GO 15814
15907: POP
15908: POP
// for i = 1 to rand ( 1 , 3 ) do
15909: LD_ADDR_VAR 0 2
15913: PUSH
15914: DOUBLE
15915: LD_INT 1
15917: DEC
15918: ST_TO_ADDR
15919: LD_INT 1
15921: PPUSH
15922: LD_INT 3
15924: PPUSH
15925: CALL_OW 12
15929: PUSH
15930: FOR_TO
15931: IFFALSE 16079
// begin hc_sex = sex_male ;
15933: LD_ADDR_OWVAR 27
15937: PUSH
15938: LD_INT 1
15940: ST_TO_ADDR
// uc_side = 0 ;
15941: LD_ADDR_OWVAR 20
15945: PUSH
15946: LD_INT 0
15948: ST_TO_ADDR
// uc_nation = nation_nature ;
15949: LD_ADDR_OWVAR 21
15953: PUSH
15954: LD_INT 0
15956: ST_TO_ADDR
// hc_class = class_apeman ;
15957: LD_ADDR_OWVAR 28
15961: PUSH
15962: LD_INT 12
15964: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15965: LD_ADDR_OWVAR 31
15969: PUSH
15970: LD_EXP 37
15974: PPUSH
15975: LD_EXP 38
15979: PPUSH
15980: CALL_OW 12
15984: PUSH
15985: LD_EXP 37
15989: PPUSH
15990: LD_EXP 38
15994: PPUSH
15995: CALL_OW 12
15999: PUSH
16000: LD_EXP 37
16004: PPUSH
16005: LD_EXP 38
16009: PPUSH
16010: CALL_OW 12
16014: PUSH
16015: LD_EXP 37
16019: PPUSH
16020: LD_EXP 38
16024: PPUSH
16025: CALL_OW 12
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16036: LD_ADDR_OWVAR 35
16040: PUSH
16041: LD_INT 1
16043: PPUSH
16044: LD_INT 20
16046: PPUSH
16047: CALL_OW 12
16051: ST_TO_ADDR
// un = CreateHuman ;
16052: LD_ADDR_VAR 0 3
16056: PUSH
16057: CALL_OW 44
16061: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_INT 24
16069: PPUSH
16070: LD_INT 0
16072: PPUSH
16073: CALL_OW 49
// end ;
16077: GO 15930
16079: POP
16080: POP
// end ; end_of_file
16081: LD_VAR 0 1
16085: RET
// on UnitDestroyed ( unit ) do var i ;
16086: LD_INT 0
16088: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16089: LD_VAR 0 1
16093: PPUSH
16094: CALL_OW 255
16098: PUSH
16099: LD_INT 3
16101: EQUAL
16102: PUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 247
16112: PUSH
16113: LD_INT 1
16115: EQUAL
16116: AND
16117: IFFALSE 16181
// begin for i in RuScientists do
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: LD_EXP 35
16128: PUSH
16129: FOR_IN
16130: IFFALSE 16179
// if i = unit then
16132: LD_VAR 0 2
16136: PUSH
16137: LD_VAR 0 1
16141: EQUAL
16142: IFFALSE 16177
// begin RuScientists = RuScientists diff [ unit ] ;
16144: LD_ADDR_EXP 35
16148: PUSH
16149: LD_EXP 35
16153: PUSH
16154: LD_VAR 0 1
16158: PUSH
16159: EMPTY
16160: LIST
16161: DIFF
16162: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16163: LD_ADDR_EXP 36
16167: PUSH
16168: LD_EXP 36
16172: PUSH
16173: LD_INT 1
16175: PLUS
16176: ST_TO_ADDR
// end ;
16177: GO 16129
16179: POP
16180: POP
// end ; end ;
16181: PPOPN 2
16183: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 10
16191: EQUAL
16192: PUSH
16193: LD_VAR 0 2
16197: PPUSH
16198: CALL_OW 255
16202: PUSH
16203: LD_INT 1
16205: EQUAL
16206: AND
16207: PUSH
16208: LD_EXP 47
16212: PUSH
16213: LD_INT 0
16215: EQUAL
16216: AND
16217: IFFALSE 16329
// begin eventVar1 = 1 ;
16219: LD_ADDR_EXP 47
16223: PUSH
16224: LD_INT 1
16226: ST_TO_ADDR
// teleportExplored = 1 ;
16227: LD_ADDR_EXP 34
16231: PUSH
16232: LD_INT 1
16234: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16235: LD_STRING M2a
16237: PPUSH
16238: CALL_OW 337
// wait ( 0 0$2 ) ;
16242: LD_INT 70
16244: PPUSH
16245: CALL_OW 67
// DialogueOn ;
16249: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16253: LD_INT 22
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 21
16265: PUSH
16266: LD_INT 1
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PPUSH
16277: CALL_OW 69
16281: PPUSH
16282: LD_STRING DT3a-Sol1-1
16284: PPUSH
16285: LD_STRING DT3a-FSol1-1
16287: PPUSH
16288: CALL 12287 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16292: LD_EXP 1
16296: PPUSH
16297: LD_STRING DT3a-JMM-1
16299: PPUSH
16300: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16304: LD_VAR 0 2
16308: PPUSH
16309: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16313: LD_EXP 1
16317: PPUSH
16318: LD_STRING DT3a-JMM-1a
16320: PPUSH
16321: CALL_OW 88
// DialogueOff ;
16325: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16329: LD_VAR 0 1
16333: PUSH
16334: LD_INT 10
16336: EQUAL
16337: PUSH
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL_OW 247
16347: PUSH
16348: LD_INT 2
16350: EQUAL
16351: AND
16352: PUSH
16353: LD_VAR 0 2
16357: PPUSH
16358: CALL_OW 255
16362: PUSH
16363: LD_INT 3
16365: EQUAL
16366: AND
16367: PUSH
16368: LD_EXP 29
16372: PUSH
16373: LD_INT 0
16375: EQUAL
16376: AND
16377: IFFALSE 16394
// begin wait ( 0 0$3 ) ;
16379: LD_INT 105
16381: PPUSH
16382: CALL_OW 67
// vehicleTeleported = 1 ;
16386: LD_ADDR_EXP 29
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16394: LD_VAR 0 1
16398: PUSH
16399: LD_INT 10
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 247
16412: PUSH
16413: LD_INT 2
16415: EQUAL
16416: AND
16417: PUSH
16418: LD_VAR 0 2
16422: PPUSH
16423: CALL_OW 255
16427: PUSH
16428: LD_INT 3
16430: EQUAL
16431: AND
16432: PUSH
16433: LD_EXP 29
16437: PUSH
16438: LD_INT 2
16440: EQUAL
16441: AND
16442: IFFALSE 16459
// begin wait ( 0 0$3 ) ;
16444: LD_INT 105
16446: PPUSH
16447: CALL_OW 67
// vehicleTeleported = 3 ;
16451: LD_ADDR_EXP 29
16455: PUSH
16456: LD_INT 3
16458: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16459: LD_VAR 0 1
16463: PUSH
16464: LD_INT 10
16466: EQUAL
16467: PUSH
16468: LD_VAR 0 2
16472: PPUSH
16473: CALL_OW 247
16477: PUSH
16478: LD_INT 2
16480: EQUAL
16481: AND
16482: PUSH
16483: LD_VAR 0 2
16487: PPUSH
16488: CALL_OW 255
16492: PUSH
16493: LD_INT 3
16495: EQUAL
16496: AND
16497: IFFALSE 16513
// tpCounter = tpCounter + 1 ;
16499: LD_ADDR_EXP 30
16503: PUSH
16504: LD_EXP 30
16508: PUSH
16509: LD_INT 1
16511: PLUS
16512: ST_TO_ADDR
// end ;
16513: PPOPN 2
16515: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16516: LD_VAR 0 2
16520: PUSH
16521: LD_INT 21
16523: EQUAL
16524: PUSH
16525: LD_VAR 0 2
16529: PUSH
16530: LD_INT 112
16532: EQUAL
16533: OR
16534: IFFALSE 16712
// if GetSide ( vehicle ) = 3 then
16536: LD_VAR 0 1
16540: PPUSH
16541: CALL_OW 255
16545: PUSH
16546: LD_INT 3
16548: EQUAL
16549: IFFALSE 16712
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16551: LD_VAR 0 1
16555: PPUSH
16556: CALL_OW 264
16560: PUSH
16561: LD_INT 46
16563: EQUAL
16564: PUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 264
16574: PUSH
16575: LD_INT 45
16577: EQUAL
16578: OR
16579: PUSH
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 264
16589: PUSH
16590: LD_INT 44
16592: EQUAL
16593: OR
16594: IFFALSE 16669
// begin russianTanks = russianTanks ^ vehicle ;
16596: LD_ADDR_EXP 40
16600: PUSH
16601: LD_EXP 40
16605: PUSH
16606: LD_VAR 0 1
16610: ADD
16611: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
16612: LD_EXP 43
16616: PUSH
16617: LD_INT 1
16619: EQUAL
16620: PUSH
16621: LD_EXP 43
16625: PUSH
16626: LD_INT 0
16628: EQUAL
16629: OR
16630: IFFALSE 16644
// ComEnterUnit ( vehicle , ruteleprt ) ;
16632: LD_VAR 0 1
16636: PPUSH
16637: LD_INT 10
16639: PPUSH
16640: CALL_OW 120
// if attackTactic = 2 then
16644: LD_EXP 43
16648: PUSH
16649: LD_INT 2
16651: EQUAL
16652: IFFALSE 16669
// ComMoveXY ( vehicle , 88 , 69 ) ;
16654: LD_VAR 0 1
16658: PPUSH
16659: LD_INT 88
16661: PPUSH
16662: LD_INT 69
16664: PPUSH
16665: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 264
16678: PUSH
16679: LD_INT 49
16681: EQUAL
16682: IFFALSE 16712
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16684: LD_ADDR_EXP 41
16688: PUSH
16689: LD_EXP 41
16693: PUSH
16694: LD_VAR 0 1
16698: ADD
16699: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_INT 137
16707: PPUSH
16708: CALL_OW 120
// end ; end ; end ;
16712: PPOPN 2
16714: END
// on UnitGoesToRed ( unit ) do var i ;
16715: LD_INT 0
16717: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 255
16727: PUSH
16728: LD_INT 3
16730: EQUAL
16731: PUSH
16732: LD_VAR 0 1
16736: PPUSH
16737: CALL_OW 247
16741: PUSH
16742: LD_INT 2
16744: EQUAL
16745: AND
16746: IFFALSE 16864
// begin if russianTanks > 0 then
16748: LD_EXP 40
16752: PUSH
16753: LD_INT 0
16755: GREATER
16756: IFFALSE 16806
// for i in russianTanks do
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_EXP 40
16767: PUSH
16768: FOR_IN
16769: IFFALSE 16804
// if i = unit then
16771: LD_VAR 0 2
16775: PUSH
16776: LD_VAR 0 1
16780: EQUAL
16781: IFFALSE 16802
// russianTanks = russianTanks diff [ unit ] ;
16783: LD_ADDR_EXP 40
16787: PUSH
16788: LD_EXP 40
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: DIFF
16801: ST_TO_ADDR
16802: GO 16768
16804: POP
16805: POP
// if russianTimeLapsers > 0 then
16806: LD_EXP 41
16810: PUSH
16811: LD_INT 0
16813: GREATER
16814: IFFALSE 16864
// for i in russianTimeLapsers do
16816: LD_ADDR_VAR 0 2
16820: PUSH
16821: LD_EXP 41
16825: PUSH
16826: FOR_IN
16827: IFFALSE 16862
// if i = unit then
16829: LD_VAR 0 2
16833: PUSH
16834: LD_VAR 0 1
16838: EQUAL
16839: IFFALSE 16860
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
16841: LD_ADDR_EXP 41
16845: PUSH
16846: LD_EXP 41
16850: PUSH
16851: LD_VAR 0 1
16855: PUSH
16856: EMPTY
16857: LIST
16858: DIFF
16859: ST_TO_ADDR
16860: GO 16826
16862: POP
16863: POP
// end ; end ;
16864: PPOPN 2
16866: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16867: LD_VAR 0 2
16871: PPUSH
16872: CALL_OW 255
16876: PUSH
16877: LD_INT 3
16879: EQUAL
16880: PUSH
16881: LD_VAR 0 2
16885: PPUSH
16886: CALL_OW 257
16890: PUSH
16891: LD_INT 3
16893: EQUAL
16894: AND
16895: PUSH
16896: LD_INT 21
16898: PPUSH
16899: CALL_OW 255
16903: PUSH
16904: LD_INT 3
16906: EQUAL
16907: AND
16908: PUSH
16909: LD_INT 21
16911: PPUSH
16912: CALL_OW 302
16916: AND
16917: IFFALSE 16931
// ComEnterUnit ( human , ru_fact ) ;
16919: LD_VAR 0 2
16923: PPUSH
16924: LD_INT 21
16926: PPUSH
16927: CALL_OW 120
// end ;
16931: PPOPN 2
16933: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16934: LD_INT 0
16936: PPUSH
16937: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16938: LD_VAR 0 2
16942: PPUSH
16943: CALL_OW 255
16947: PUSH
16948: LD_INT 3
16950: EQUAL
16951: PUSH
16952: LD_VAR 0 2
16956: PPUSH
16957: CALL_OW 257
16961: PUSH
16962: LD_INT 4
16964: EQUAL
16965: AND
16966: IFFALSE 17108
// for i in RuScientists do
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: LD_EXP 35
16977: PUSH
16978: FOR_IN
16979: IFFALSE 17106
// if i = human then
16981: LD_VAR 0 3
16985: PUSH
16986: LD_VAR 0 2
16990: EQUAL
16991: IFFALSE 17104
// if IsOk ( rutp ) then
16993: LD_INT 137
16995: PPUSH
16996: CALL_OW 302
17000: IFFALSE 17073
// begin rnd = rand ( 1 , 2 ) ;
17002: LD_ADDR_VAR 0 4
17006: PUSH
17007: LD_INT 1
17009: PPUSH
17010: LD_INT 2
17012: PPUSH
17013: CALL_OW 12
17017: ST_TO_ADDR
// if rnd = 1 then
17018: LD_VAR 0 4
17022: PUSH
17023: LD_INT 1
17025: EQUAL
17026: IFFALSE 17040
// ComEnterUnit ( vehicle , rutp ) ;
17028: LD_VAR 0 1
17032: PPUSH
17033: LD_INT 137
17035: PPUSH
17036: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17040: LD_VAR 0 1
17044: PPUSH
17045: LD_INT 13
17047: PUSH
17048: LD_INT 14
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 1
17057: PPUSH
17058: LD_INT 2
17060: PPUSH
17061: CALL_OW 12
17065: ARRAY
17066: PPUSH
17067: CALL_OW 173
// end else
17071: GO 17104
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) end ;
17073: LD_VAR 0 1
17077: PPUSH
17078: LD_INT 13
17080: PUSH
17081: LD_INT 14
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 1
17090: PPUSH
17091: LD_INT 2
17093: PPUSH
17094: CALL_OW 12
17098: ARRAY
17099: PPUSH
17100: CALL_OW 113
17104: GO 16978
17106: POP
17107: POP
// end ; end_of_file
17108: PPOPN 4
17110: END
// every 0 0$1 trigger ruAI = 1 do
17111: LD_EXP 42
17115: PUSH
17116: LD_INT 1
17118: EQUAL
17119: IFFALSE 17218
17121: GO 17123
17123: DISABLE
// begin enable ;
17124: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17125: LD_INT 3
17127: PPUSH
17128: LD_INT 6
17130: PPUSH
17131: LD_INT 9
17133: PPUSH
17134: LD_EXP 39
17138: PPUSH
17139: CALL 13167 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17143: LD_INT 3
17145: PPUSH
17146: LD_INT 4
17148: PPUSH
17149: LD_INT 10
17151: PPUSH
17152: LD_EXP 39
17156: PPUSH
17157: CALL 13167 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17161: LD_INT 3
17163: PPUSH
17164: LD_INT 16
17166: PPUSH
17167: LD_INT 9
17169: PPUSH
17170: LD_INT 91
17172: PPUSH
17173: CALL 13558 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17177: LD_INT 3
17179: PPUSH
17180: LD_INT 17
17182: PPUSH
17183: LD_INT 10
17185: PPUSH
17186: LD_INT 47
17188: PUSH
17189: LD_INT 129
17191: PUSH
17192: LD_INT 135
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL 13558 0 4
// AttackVehicles ( 3 ) ;
17204: LD_INT 3
17206: PPUSH
17207: CALL 14285 0 1
// IntBazooka ( 3 ) ;
17211: LD_INT 3
17213: PPUSH
17214: CALL 14778 0 1
// end ;
17218: END
// every 0 0$1 do
17219: GO 17221
17221: DISABLE
// begin enable ;
17222: ENABLE
// TimeLapsersAI ( 3 ) ;
17223: LD_INT 3
17225: PPUSH
17226: CALL 14583 0 1
// end ;
17230: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17231: LD_INT 4
17233: PPUSH
17234: CALL_OW 303
17238: IFFALSE 17253
17240: GO 17242
17242: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17243: LD_INT 3
17245: PPUSH
17246: LD_INT 4
17248: PPUSH
17249: CALL 15430 0 2
17253: END
// every 0 0$1 do
17254: GO 17256
17256: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17257: LD_INT 3
17259: PPUSH
17260: LD_INT 91
17262: PPUSH
17263: LD_INT 3
17265: PPUSH
17266: CALL 13082 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17270: LD_INT 3
17272: PPUSH
17273: LD_INT 47
17275: PPUSH
17276: LD_INT 3
17278: PPUSH
17279: CALL 13082 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17283: LD_INT 3
17285: PPUSH
17286: LD_INT 129
17288: PPUSH
17289: LD_INT 3
17291: PPUSH
17292: CALL 13082 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17296: LD_INT 3
17298: PPUSH
17299: LD_INT 3
17301: PPUSH
17302: LD_INT 3
17304: PPUSH
17305: CALL 13082 0 3
// end ;
17309: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17310: LD_EXP 28
17314: PUSH
17315: LD_INT 2
17317: EQUAL
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 21
17331: PUSH
17332: LD_INT 2
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 50
17341: PUSH
17342: EMPTY
17343: LIST
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: LD_INT 58
17350: PUSH
17351: EMPTY
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: PPUSH
17364: CALL_OW 69
17368: PUSH
17369: LD_INT 18
17371: PPUSH
17372: LD_INT 22
17374: PUSH
17375: LD_INT 3
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 21
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PPUSH
17396: CALL_OW 70
17400: PUSH
17401: LD_INT 0
17403: EQUAL
17404: DIFF
17405: AND
17406: IFFALSE 17524
17408: GO 17410
17410: DISABLE
// begin enable ;
17411: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17412: LD_INT 3
17414: PPUSH
17415: LD_INT 21
17417: PPUSH
17418: LD_INT 3
17420: PUSH
17421: LD_INT 4
17423: PUSH
17424: LD_INT 4
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: LD_OWVAR 67
17436: ARRAY
17437: PPUSH
17438: LD_INT 46
17440: PUSH
17441: LD_INT 45
17443: PUSH
17444: LD_INT 44
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: PPUSH
17452: LD_INT 3
17454: PPUSH
17455: LD_INT 3
17457: PPUSH
17458: LD_INT 24
17460: PPUSH
17461: CALL 14138 0 7
// if russianTimeLapsers = 0 then
17465: LD_EXP 41
17469: PUSH
17470: LD_INT 0
17472: EQUAL
17473: IFFALSE 17524
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17475: LD_INT 3
17477: PPUSH
17478: LD_INT 112
17480: PPUSH
17481: LD_INT 1
17483: PUSH
17484: LD_INT 2
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: PUSH
17495: LD_OWVAR 67
17499: ARRAY
17500: PPUSH
17501: LD_INT 49
17503: PUSH
17504: LD_INT 49
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PPUSH
17511: LD_INT 3
17513: PPUSH
17514: LD_INT 3
17516: PPUSH
17517: LD_INT 24
17519: PPUSH
17520: CALL 14138 0 7
// end ;
17524: END
// every 0 0$1 trigger arabianMines do var i ;
17525: LD_EXP 44
17529: IFFALSE 17650
17531: GO 17533
17533: DISABLE
17534: LD_INT 0
17536: PPUSH
// begin enable ;
17537: ENABLE
// for i in arabianMines do
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: LD_EXP 44
17547: PUSH
17548: FOR_IN
17549: IFFALSE 17648
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17551: LD_INT 22
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 92
17563: PUSH
17564: LD_VAR 0 1
17568: PUSH
17569: LD_INT 1
17571: ARRAY
17572: PUSH
17573: LD_VAR 0 1
17577: PUSH
17578: LD_INT 2
17580: ARRAY
17581: PUSH
17582: LD_INT 3
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PPUSH
17595: CALL_OW 69
17599: IFFALSE 17646
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17601: LD_VAR 0 1
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: LD_VAR 0 1
17614: PUSH
17615: LD_INT 2
17617: ARRAY
17618: PPUSH
17619: LD_INT 5
17621: PPUSH
17622: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17626: LD_ADDR_EXP 44
17630: PUSH
17631: LD_EXP 44
17635: PPUSH
17636: LD_VAR 0 1
17640: PPUSH
17641: CALL_OW 3
17645: ST_TO_ADDR
// end ; end ;
17646: GO 17548
17648: POP
17649: POP
// end ;
17650: PPOPN 1
17652: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
17653: LD_EXP 29
17657: PUSH
17658: LD_INT 4
17660: EQUAL
17661: PUSH
17662: LD_EXP 30
17666: PUSH
17667: LD_INT 6
17669: PUSH
17670: LD_INT 8
17672: PUSH
17673: LD_INT 8
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_OWVAR 67
17685: ARRAY
17686: EQUAL
17687: AND
17688: IFFALSE 17706
17690: GO 17692
17692: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
17693: LD_INT 10
17695: PPUSH
17696: LD_INT 47
17698: PPUSH
17699: LD_INT 82
17701: PPUSH
17702: CALL_OW 243
17706: END
// every 2 2$0 trigger vehicleTeleported = 4 do
17707: LD_EXP 29
17711: PUSH
17712: LD_INT 4
17714: EQUAL
17715: IFFALSE 17737
17717: GO 17719
17719: DISABLE
// begin enable ;
17720: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
17721: LD_ADDR_EXP 43
17725: PUSH
17726: LD_INT 1
17728: PPUSH
17729: LD_INT 2
17731: PPUSH
17732: CALL_OW 12
17736: ST_TO_ADDR
// end ; end_of_file
17737: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
17738: LD_EXP 35
17742: PUSH
17743: EMPTY
17744: EQUAL
17745: PUSH
17746: LD_INT 3
17748: PPUSH
17749: CALL_OW 301
17753: AND
17754: IFFALSE 17959
17756: GO 17758
17758: DISABLE
// begin if sciCounter = 0 then
17759: LD_EXP 36
17763: PUSH
17764: LD_INT 0
17766: EQUAL
17767: IFFALSE 17793
// begin Say ( JMM , D7a-JMM-1 ) ;
17769: LD_EXP 1
17773: PPUSH
17774: LD_STRING D7a-JMM-1
17776: PPUSH
17777: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17781: LD_EXP 22
17785: PPUSH
17786: LD_STRING D7a-Pow-1
17788: PPUSH
17789: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
17793: LD_EXP 36
17797: PUSH
17798: LD_INT 0
17800: GREATER
17801: PUSH
17802: LD_EXP 36
17806: PUSH
17807: LD_INT 6
17809: LESS
17810: AND
17811: IFFALSE 17837
// begin Say ( JMM , D7b-JMM-1 ) ;
17813: LD_EXP 1
17817: PPUSH
17818: LD_STRING D7b-JMM-1
17820: PPUSH
17821: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17825: LD_EXP 22
17829: PPUSH
17830: LD_STRING D7b-Pow-1
17832: PPUSH
17833: CALL_OW 94
// end ; if sciCounter = 6 then
17837: LD_EXP 36
17841: PUSH
17842: LD_INT 6
17844: EQUAL
17845: IFFALSE 17955
// begin Say ( JMM , D7c-JMM-1 ) ;
17847: LD_EXP 1
17851: PPUSH
17852: LD_STRING D7c-JMM-1
17854: PPUSH
17855: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17859: LD_EXP 22
17863: PPUSH
17864: LD_STRING D7c-Pow-1
17866: PPUSH
17867: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17871: LD_EXP 1
17875: PPUSH
17876: LD_STRING D7d-JMM-1
17878: PPUSH
17879: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17883: LD_EXP 22
17887: PPUSH
17888: LD_STRING D7d-Pow-1
17890: PPUSH
17891: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17895: LD_EXP 1
17899: PPUSH
17900: LD_STRING D7d-JMM-2
17902: PPUSH
17903: CALL_OW 88
// if askSiberite = 1 then
17907: LD_EXP 33
17911: PUSH
17912: LD_INT 1
17914: EQUAL
17915: IFFALSE 17931
// begin Say ( JMM , D7d-JMM-2a ) ;
17917: LD_EXP 1
17921: PPUSH
17922: LD_STRING D7d-JMM-2a
17924: PPUSH
17925: CALL_OW 88
// end else
17929: GO 17943
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
17931: LD_EXP 22
17935: PPUSH
17936: LD_STRING D7d-Pow-2
17938: PPUSH
17939: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
17943: LD_EXP 22
17947: PPUSH
17948: LD_STRING D7d-Pow-2a
17950: PPUSH
17951: CALL_OW 94
// end ; FinishMission ;
17955: CALL 17960 0 0
// end ;
17959: END
// export function FinishMission ; begin
17960: LD_INT 0
17962: PPUSH
// if teleportExplored = 1 then
17963: LD_EXP 34
17967: PUSH
17968: LD_INT 1
17970: EQUAL
17971: IFFALSE 17985
// AddMedal ( Teleport , 1 ) else
17973: LD_STRING Teleport
17975: PPUSH
17976: LD_INT 1
17978: PPUSH
17979: CALL_OW 101
17983: GO 17996
// AddMedal ( Teleport , - 1 ) ;
17985: LD_STRING Teleport
17987: PPUSH
17988: LD_INT 1
17990: NEG
17991: PPUSH
17992: CALL_OW 101
// if sciCounter > 2 then
17996: LD_EXP 36
18000: PUSH
18001: LD_INT 2
18003: GREATER
18004: IFFALSE 18018
// AddMedal ( Materials , 1 ) else
18006: LD_STRING Materials
18008: PPUSH
18009: LD_INT 1
18011: PPUSH
18012: CALL_OW 101
18016: GO 18029
// AddMedal ( Materials , - 1 ) ;
18018: LD_STRING Materials
18020: PPUSH
18021: LD_INT 1
18023: NEG
18024: PPUSH
18025: CALL_OW 101
// if sciCounter = 6 then
18029: LD_EXP 36
18033: PUSH
18034: LD_INT 6
18036: EQUAL
18037: IFFALSE 18061
// begin AddMedal ( Scientists , 1 ) ;
18039: LD_STRING Scientists
18041: PPUSH
18042: LD_INT 1
18044: PPUSH
18045: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18049: LD_INT 1
18051: PPUSH
18052: LD_STRING 12_SciDed_1
18054: PPUSH
18055: CALL_OW 39
// end else
18059: GO 18082
// begin AddMedal ( Scientists , - 1 ) ;
18061: LD_STRING Scientists
18063: PPUSH
18064: LD_INT 1
18066: NEG
18067: PPUSH
18068: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18072: LD_INT 0
18074: PPUSH
18075: LD_STRING 12_SciDed_1
18077: PPUSH
18078: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18082: LD_EXP 32
18086: PPUSH
18087: LD_STRING 12_MainDepositFake_1
18089: PPUSH
18090: CALL_OW 39
// GiveMedals ( MAIN ) ;
18094: LD_STRING MAIN
18096: PPUSH
18097: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18101: LD_INT 22
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 21
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 2
18123: PUSH
18124: LD_INT 25
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 25
18136: PUSH
18137: LD_INT 2
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 25
18146: PUSH
18147: LD_INT 3
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 25
18156: PUSH
18157: LD_INT 4
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 25
18166: PUSH
18167: LD_INT 5
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 25
18176: PUSH
18177: LD_INT 8
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 69
18202: PPUSH
18203: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18207: LD_EXP 1
18211: PPUSH
18212: LD_EXP 46
18216: PUSH
18217: LD_STRING JMM
18219: STR
18220: PPUSH
18221: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18225: LD_EXP 7
18229: PPUSH
18230: LD_EXP 46
18234: PUSH
18235: LD_STRING Brown
18237: STR
18238: PPUSH
18239: CALL 12236 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18243: LD_EXP 3
18247: PPUSH
18248: LD_EXP 46
18252: PUSH
18253: LD_STRING Donaldson
18255: STR
18256: PPUSH
18257: CALL 12236 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18261: LD_EXP 4
18265: PPUSH
18266: LD_EXP 46
18270: PUSH
18271: LD_STRING Bobby
18273: STR
18274: PPUSH
18275: CALL 12236 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18279: LD_EXP 5
18283: PPUSH
18284: LD_EXP 46
18288: PUSH
18289: LD_STRING Cyrus
18291: STR
18292: PPUSH
18293: CALL 12236 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18297: LD_EXP 2
18301: PPUSH
18302: LD_EXP 46
18306: PUSH
18307: LD_STRING Lisa
18309: STR
18310: PPUSH
18311: CALL 12236 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18315: LD_EXP 12
18319: PPUSH
18320: LD_EXP 46
18324: PUSH
18325: LD_STRING Frank
18327: STR
18328: PPUSH
18329: CALL 12236 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18333: LD_EXP 13
18337: PPUSH
18338: LD_EXP 46
18342: PUSH
18343: LD_STRING Kikuchi
18345: STR
18346: PPUSH
18347: CALL 12236 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18351: LD_EXP 9
18355: PPUSH
18356: LD_EXP 46
18360: PUSH
18361: LD_STRING Houten
18363: STR
18364: PPUSH
18365: CALL 12236 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18369: LD_EXP 11
18373: PPUSH
18374: LD_EXP 46
18378: PUSH
18379: LD_STRING Gary
18381: STR
18382: PPUSH
18383: CALL 12236 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18387: LD_EXP 10
18391: PPUSH
18392: LD_EXP 46
18396: PUSH
18397: LD_STRING Cornell
18399: STR
18400: PPUSH
18401: CALL 12236 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18405: LD_EXP 6
18409: PPUSH
18410: LD_EXP 46
18414: PUSH
18415: LD_STRING Denis
18417: STR
18418: PPUSH
18419: CALL 12236 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18423: LD_EXP 8
18427: PPUSH
18428: LD_EXP 46
18432: PUSH
18433: LD_STRING Gladstone
18435: STR
18436: PPUSH
18437: CALL 12236 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18441: LD_INT 50
18443: PUSH
18444: EMPTY
18445: LIST
18446: PUSH
18447: LD_INT 22
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 23
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 21
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: LD_INT 25
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 25
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 25
18502: PUSH
18503: LD_INT 3
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 25
18512: PUSH
18513: LD_INT 4
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 5
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 25
18532: PUSH
18533: LD_INT 8
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: PPUSH
18556: CALL_OW 69
18560: PUSH
18561: LD_EXP 1
18565: PUSH
18566: LD_EXP 7
18570: PUSH
18571: LD_EXP 3
18575: PUSH
18576: LD_EXP 4
18580: PUSH
18581: LD_EXP 5
18585: PUSH
18586: LD_EXP 2
18590: PUSH
18591: LD_EXP 12
18595: PUSH
18596: LD_EXP 8
18600: PUSH
18601: LD_EXP 13
18605: PUSH
18606: LD_EXP 6
18610: PUSH
18611: LD_EXP 9
18615: PUSH
18616: LD_EXP 11
18620: PUSH
18621: LD_EXP 10
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: DIFF
18641: PPUSH
18642: LD_STRING 12_other_survivors
18644: PPUSH
18645: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18649: LD_INT 50
18651: PUSH
18652: EMPTY
18653: LIST
18654: PUSH
18655: LD_INT 22
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 23
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 21
18677: PUSH
18678: LD_INT 1
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: LD_INT 25
18690: PUSH
18691: LD_INT 1
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 25
18700: PUSH
18701: LD_INT 2
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 25
18710: PUSH
18711: LD_INT 3
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 25
18720: PUSH
18721: LD_INT 4
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 25
18730: PUSH
18731: LD_INT 5
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 25
18740: PUSH
18741: LD_INT 8
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL_OW 69
18768: PPUSH
18769: LD_STRING 12_kurt_squad
18771: PPUSH
18772: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
18776: LD_STRING 11_others
18778: PPUSH
18779: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
18783: LD_EXP 14
18787: PPUSH
18788: LD_STRING 11_others
18790: PPUSH
18791: CALL_OW 38
// YouWin ;
18795: CALL_OW 103
// end ; end_of_file
18799: LD_VAR 0 1
18803: RET
// every 0 0$1 trigger IsDead ( JMM ) do
18804: LD_EXP 1
18808: PPUSH
18809: CALL_OW 301
18813: IFFALSE 18825
18815: GO 18817
18817: DISABLE
// YouLost ( JMM ) ; end_of_file
18818: LD_STRING JMM
18820: PPUSH
18821: CALL_OW 104
18825: END
// every 0 0$01 do
18826: GO 18828
18828: DISABLE
// begin repeat wait ( 0 0$30 ) ;
18829: LD_INT 1050
18831: PPUSH
18832: CALL_OW 67
// if cratesSpawned < 6 then
18836: LD_EXP 45
18840: PUSH
18841: LD_INT 6
18843: LESS
18844: IFFALSE 18881
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18846: LD_INT 3
18848: PPUSH
18849: LD_INT 5
18851: PPUSH
18852: CALL_OW 12
18856: PPUSH
18857: LD_INT 21
18859: PPUSH
18860: LD_INT 1
18862: PPUSH
18863: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18867: LD_ADDR_EXP 45
18871: PUSH
18872: LD_EXP 45
18876: PUSH
18877: LD_INT 1
18879: PLUS
18880: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
18881: LD_EXP 45
18885: PUSH
18886: LD_INT 6
18888: GREATEREQUAL
18889: PUSH
18890: LD_EXP 45
18894: PUSH
18895: LD_INT 12
18897: LESS
18898: AND
18899: IFFALSE 18943
// begin wait ( 0 0$30 ) ;
18901: LD_INT 1050
18903: PPUSH
18904: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 5
18913: PPUSH
18914: CALL_OW 12
18918: PPUSH
18919: LD_INT 21
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18929: LD_ADDR_EXP 45
18933: PUSH
18934: LD_EXP 45
18938: PUSH
18939: LD_INT 1
18941: PLUS
18942: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
18943: LD_EXP 45
18947: PUSH
18948: LD_INT 12
18950: GREATEREQUAL
18951: IFFALSE 18995
// begin wait ( 1 1$30 ) ;
18953: LD_INT 3150
18955: PPUSH
18956: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18960: LD_INT 3
18962: PPUSH
18963: LD_INT 5
18965: PPUSH
18966: CALL_OW 12
18970: PPUSH
18971: LD_INT 21
18973: PPUSH
18974: LD_INT 1
18976: PPUSH
18977: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18981: LD_ADDR_EXP 45
18985: PUSH
18986: LD_EXP 45
18990: PUSH
18991: LD_INT 1
18993: PLUS
18994: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
18995: LD_EXP 45
18999: PUSH
19000: LD_INT 15
19002: GREATEREQUAL
19003: IFFALSE 18829
// end ;
19005: END
