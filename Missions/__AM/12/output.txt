// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 42
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// askSiberite = 0 ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// warWithLegion = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// fakeInfo = 0 ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// cratesSpawned = 0 ;
 127: LD_ADDR_EXP 43
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// ruAI = 0 ;
 135: LD_ADDR_EXP 41
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// eventVar1 = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// mission_prefix = 12_ ;
 151: LD_ADDR_EXP 44
 155: PUSH
 156: LD_STRING 12_
 158: ST_TO_ADDR
// debugMode = 0 ;
 159: LD_ADDR_EXP 46
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// PrepareNature ;
 167: CALL 16282 0 0
// PrepareDifficulty ;
 171: CALL 13239 0 0
// PrepareVehicles ;
 175: CALL 1912 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 179: LD_INT 4
 181: PPUSH
 182: LD_INT 0
 184: PPUSH
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 0
 190: PPUSH
 191: CALL 1447 0 4
// PrepareAmericanHeroes ;
 195: CALL 533 0 0
// PrepareRussianCommander ;
 199: CALL 3462 0 0
// PrepareWestBase ;
 203: CALL 3974 0 0
// PrepareEastBase ;
 207: CALL 3534 0 0
// PrepareOtherRussians ;
 211: CALL 4086 0 0
// end ;
 215: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 216: LD_EXP 46
 220: PUSH
 221: LD_INT 1
 223: EQUAL
 224: IFFALSE 530
 226: GO 228
 228: DISABLE
 229: LD_INT 0
 231: PPUSH
// begin enable ;
 232: ENABLE
// fogoff ( true ) ;
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 240: LD_ADDR_VAR 0 1
 244: PUSH
 245: LD_INT 22
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 21
 257: PUSH
 258: LD_INT 1
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: PPUSH
 269: CALL_OW 69
 273: PUSH
 274: FOR_IN
 275: IFFALSE 291
// SetLives ( i , 1000 ) ;
 277: LD_VAR 0 1
 281: PPUSH
 282: LD_INT 1000
 284: PPUSH
 285: CALL_OW 234
 289: GO 274
 291: POP
 292: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 293: LD_ADDR_VAR 0 1
 297: PUSH
 298: LD_INT 22
 300: PUSH
 301: LD_INT 1
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 2
 310: PUSH
 311: LD_INT 30
 313: PUSH
 314: LD_INT 0
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 30
 323: PUSH
 324: LD_INT 1
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: PUSH
 345: FOR_IN
 346: IFFALSE 370
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 348: LD_VAR 0 1
 352: PPUSH
 353: CALL_OW 274
 357: PPUSH
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 9999
 363: PPUSH
 364: CALL_OW 277
 368: GO 345
 370: POP
 371: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 372: LD_ADDR_VAR 0 1
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 1
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 30
 392: PUSH
 393: LD_INT 0
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 30
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PPUSH
 419: CALL_OW 69
 423: PUSH
 424: FOR_IN
 425: IFFALSE 449
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 427: LD_VAR 0 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 2
 439: PPUSH
 440: LD_INT 9999
 442: PPUSH
 443: CALL_OW 277
 447: GO 424
 449: POP
 450: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 451: LD_ADDR_VAR 0 1
 455: PUSH
 456: LD_INT 22
 458: PUSH
 459: LD_INT 1
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: PUSH
 466: LD_INT 2
 468: PUSH
 469: LD_INT 30
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 30
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: PPUSH
 498: CALL_OW 69
 502: PUSH
 503: FOR_IN
 504: IFFALSE 528
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 506: LD_VAR 0 1
 510: PPUSH
 511: CALL_OW 274
 515: PPUSH
 516: LD_INT 3
 518: PPUSH
 519: LD_INT 9999
 521: PPUSH
 522: CALL_OW 277
 526: GO 503
 528: POP
 529: POP
// end ; end_of_file
 530: PPOPN 1
 532: END
// export function PrepareAmericanHeroes ; begin
 533: LD_INT 0
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) ;
 544: LD_ADDR_EXP 14
 548: PUSH
 549: LD_STRING 11c_others
 551: PPUSH
 552: CALL_OW 31
 556: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 557: LD_ADDR_EXP 1
 561: PUSH
 562: LD_STRING 11_JMM
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL 12878 0 2
 572: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 573: LD_EXP 1
 577: PPUSH
 578: LD_INT 1
 580: PPUSH
 581: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 585: LD_EXP 1
 589: PPUSH
 590: LD_INT 22
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 21
 602: PUSH
 603: LD_INT 2
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 58
 612: PUSH
 613: EMPTY
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 69
 625: PUSH
 626: LD_INT 1
 628: ARRAY
 629: PPUSH
 630: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 634: LD_STRING 11_Lisa
 636: PPUSH
 637: CALL_OW 28
 641: PUSH
 642: LD_INT 1
 644: EQUAL
 645: IFFALSE 692
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 647: LD_ADDR_EXP 2
 651: PUSH
 652: LD_STRING 11_Lisa
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL 12878 0 2
 662: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 663: LD_EXP 2
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 675: LD_EXP 2
 679: PPUSH
 680: LD_INT 4
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// end else
 690: GO 766
// begin if TestCharacters ( 10c_Lisa ) = true then
 692: LD_STRING 10c_Lisa
 694: PPUSH
 695: CALL_OW 28
 699: PUSH
 700: LD_INT 1
 702: EQUAL
 703: IFFALSE 750
// begin Lisa = PrepareUnit ( 10c_Lisa , true ) ;
 705: LD_ADDR_EXP 2
 709: PUSH
 710: LD_STRING 10c_Lisa
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: CALL 12878 0 2
 720: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 721: LD_EXP 2
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 733: LD_EXP 2
 737: PPUSH
 738: LD_INT 4
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 49
// end else
 748: GO 766
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 750: LD_INT 4
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: LD_INT 1
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL 1447 0 4
// end ; end ; if TestCharacters ( 11_Donaldson ) = true then
 766: LD_STRING 11_Donaldson
 768: PPUSH
 769: CALL_OW 28
 773: PUSH
 774: LD_INT 1
 776: EQUAL
 777: IFFALSE 824
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 779: LD_ADDR_EXP 3
 783: PUSH
 784: LD_STRING 11_Donaldson
 786: PPUSH
 787: LD_INT 1
 789: PPUSH
 790: CALL 12878 0 2
 794: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 795: LD_EXP 3
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 807: LD_EXP 3
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 898
// begin if TestCharacters ( 10c_Donaldson ) = true then
 824: LD_STRING 10c_Donaldson
 826: PPUSH
 827: CALL_OW 28
 831: PUSH
 832: LD_INT 1
 834: EQUAL
 835: IFFALSE 882
// begin Donaldson = PrepareUnit ( 10c_Donaldson , true ) ;
 837: LD_ADDR_EXP 3
 841: PUSH
 842: LD_STRING 10c_Donaldson
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL 12878 0 2
 852: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 853: LD_EXP 3
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 865: LD_EXP 3
 869: PPUSH
 870: LD_INT 4
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
// end else
 880: GO 898
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 882: LD_INT 4
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_INT 1
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL 1447 0 4
// end ; end ; if TestCharacters ( 11_Cyrus ) = true then
 898: LD_STRING 11_Cyrus
 900: PPUSH
 901: CALL_OW 28
 905: PUSH
 906: LD_INT 1
 908: EQUAL
 909: IFFALSE 956
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 911: LD_ADDR_EXP 5
 915: PUSH
 916: LD_STRING 11_Cyrus
 918: PPUSH
 919: LD_INT 1
 921: PPUSH
 922: CALL 12878 0 2
 926: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 927: LD_EXP 5
 931: PPUSH
 932: LD_INT 1
 934: PPUSH
 935: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 939: LD_EXP 5
 943: PPUSH
 944: LD_INT 4
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// end else
 954: GO 1030
// begin if TestCharacters ( 10c_Cyrus ) = true then
 956: LD_STRING 10c_Cyrus
 958: PPUSH
 959: CALL_OW 28
 963: PUSH
 964: LD_INT 1
 966: EQUAL
 967: IFFALSE 1014
// begin Cyrus = PrepareUnit ( 10c_Cyrus , true ) ;
 969: LD_ADDR_EXP 5
 973: PUSH
 974: LD_STRING 10c_Cyrus
 976: PPUSH
 977: LD_INT 1
 979: PPUSH
 980: CALL 12878 0 2
 984: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 985: LD_EXP 5
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 997: LD_EXP 5
1001: PPUSH
1002: LD_INT 4
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// end else
1012: GO 1030
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1014: LD_INT 4
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL 1447 0 4
// end ; end ; if TestCharacters ( 11_Denis ) = true then
1030: LD_STRING 11_Denis
1032: PPUSH
1033: CALL_OW 28
1037: PUSH
1038: LD_INT 1
1040: EQUAL
1041: IFFALSE 1088
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
1043: LD_ADDR_EXP 6
1047: PUSH
1048: LD_STRING 11_Denis
1050: PPUSH
1051: LD_INT 1
1053: PPUSH
1054: CALL 12878 0 2
1058: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1059: LD_EXP 6
1063: PPUSH
1064: LD_INT 4
1066: PPUSH
1067: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1071: LD_EXP 6
1075: PPUSH
1076: LD_INT 4
1078: PPUSH
1079: LD_INT 0
1081: PPUSH
1082: CALL_OW 49
// end else
1086: GO 1162
// begin if TestCharacters ( 10c_Denis ) = true then
1088: LD_STRING 10c_Denis
1090: PPUSH
1091: CALL_OW 28
1095: PUSH
1096: LD_INT 1
1098: EQUAL
1099: IFFALSE 1146
// begin Denis = PrepareUnit ( 10c_Denis , true ) ;
1101: LD_ADDR_EXP 6
1105: PUSH
1106: LD_STRING 10c_Denis
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: CALL 12878 0 2
1116: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1117: LD_EXP 6
1121: PPUSH
1122: LD_INT 4
1124: PPUSH
1125: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1129: LD_EXP 6
1133: PPUSH
1134: LD_INT 4
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 49
// end else
1144: GO 1162
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1146: LD_INT 4
1148: PPUSH
1149: LD_INT 0
1151: PPUSH
1152: LD_INT 1
1154: PPUSH
1155: LD_INT 0
1157: PPUSH
1158: CALL 1447 0 4
// end ; end ; if TestCharacters ( 11_Frank ) = true then
1162: LD_STRING 11_Frank
1164: PPUSH
1165: CALL_OW 28
1169: PUSH
1170: LD_INT 1
1172: EQUAL
1173: IFFALSE 1220
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1175: LD_ADDR_EXP 12
1179: PUSH
1180: LD_STRING 11_Frank
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: CALL 12878 0 2
1190: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1191: LD_EXP 12
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1203: LD_EXP 12
1207: PPUSH
1208: LD_INT 4
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// end else
1218: GO 1294
// begin if TestCharacters ( 10c_Frank ) = true then
1220: LD_STRING 10c_Frank
1222: PPUSH
1223: CALL_OW 28
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1278
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1233: LD_ADDR_EXP 12
1237: PUSH
1238: LD_STRING 11_Frank
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: CALL 12878 0 2
1248: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1249: LD_EXP 12
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1261: LD_EXP 12
1265: PPUSH
1266: LD_INT 4
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 49
// end else
1276: GO 1294
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1278: LD_INT 4
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: LD_INT 1
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL 1447 0 4
// end ; end ; if TestCharacters ( 11_Cornell ) = true then
1294: LD_STRING 11_Cornell
1296: PPUSH
1297: CALL_OW 28
1301: PUSH
1302: LD_INT 1
1304: EQUAL
1305: IFFALSE 1352
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1307: LD_ADDR_EXP 10
1311: PUSH
1312: LD_STRING 11_Cornell
1314: PPUSH
1315: LD_INT 1
1317: PPUSH
1318: CALL 12878 0 2
1322: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1323: LD_EXP 10
1327: PPUSH
1328: LD_INT 1
1330: PPUSH
1331: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1335: LD_EXP 10
1339: PPUSH
1340: LD_INT 4
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 49
// end else
1350: GO 1426
// begin if TestCharacters ( 10c_Cornell ) = true then
1352: LD_STRING 10c_Cornell
1354: PPUSH
1355: CALL_OW 28
1359: PUSH
1360: LD_INT 1
1362: EQUAL
1363: IFFALSE 1410
// begin Cornel = PrepareUnit ( 10c_Cornell , true ) ;
1365: LD_ADDR_EXP 10
1369: PUSH
1370: LD_STRING 10c_Cornell
1372: PPUSH
1373: LD_INT 1
1375: PPUSH
1376: CALL 12878 0 2
1380: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1381: LD_EXP 10
1385: PPUSH
1386: LD_INT 1
1388: PPUSH
1389: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1393: LD_EXP 10
1397: PPUSH
1398: LD_INT 4
1400: PPUSH
1401: LD_INT 0
1403: PPUSH
1404: CALL_OW 49
// end else
1408: GO 1426
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1410: LD_INT 4
1412: PPUSH
1413: LD_INT 0
1415: PPUSH
1416: LD_INT 1
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: CALL 1447 0 4
// end ; end ; Powell = PrepareUnit ( Powell , false ) ;
1426: LD_ADDR_EXP 22
1430: PUSH
1431: LD_STRING Powell
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL 12878 0 2
1441: ST_TO_ADDR
// end ;
1442: LD_VAR 0 1
1446: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha , iter ; begin
1447: LD_INT 0
1449: PPUSH
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// if mech = 1 then
1455: LD_VAR 0 4
1459: PUSH
1460: LD_INT 1
1462: EQUAL
1463: IFFALSE 1738
// begin if others11 > 0 then
1465: LD_EXP 14
1469: PUSH
1470: LD_INT 0
1472: GREATER
1473: IFFALSE 1678
// begin tmp = GetSkill ( others11 [ i ] , 3 ) ;
1475: LD_ADDR_VAR 0 8
1479: PUSH
1480: LD_EXP 14
1484: PUSH
1485: LD_VAR 0 6
1489: ARRAY
1490: PPUSH
1491: LD_INT 3
1493: PPUSH
1494: CALL_OW 259
1498: ST_TO_ADDR
// for i := 1 to others11 - 1 do
1499: LD_ADDR_VAR 0 6
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_EXP 14
1513: PUSH
1514: LD_INT 1
1516: MINUS
1517: PUSH
1518: FOR_TO
1519: IFFALSE 1615
// begin if tmp < GetSkill ( others11 [ i + 1 ] , 3 ) then
1521: LD_VAR 0 8
1525: PUSH
1526: LD_EXP 14
1530: PUSH
1531: LD_VAR 0 6
1535: PUSH
1536: LD_INT 1
1538: PLUS
1539: ARRAY
1540: PPUSH
1541: LD_INT 3
1543: PPUSH
1544: CALL_OW 259
1548: LESS
1549: IFFALSE 1613
// begin tmp = GetSkill ( others11 [ i + 1 ] , 3 ) ;
1551: LD_ADDR_VAR 0 8
1555: PUSH
1556: LD_EXP 14
1560: PUSH
1561: LD_VAR 0 6
1565: PUSH
1566: LD_INT 1
1568: PLUS
1569: ARRAY
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: CALL_OW 259
1578: ST_TO_ADDR
// mecha = others11 [ i + 1 ] ;
1579: LD_ADDR_VAR 0 9
1583: PUSH
1584: LD_EXP 14
1588: PUSH
1589: LD_VAR 0 6
1593: PUSH
1594: LD_INT 1
1596: PLUS
1597: ARRAY
1598: ST_TO_ADDR
// iter = i + 1 ;
1599: LD_ADDR_VAR 0 10
1603: PUSH
1604: LD_VAR 0 6
1608: PUSH
1609: LD_INT 1
1611: PLUS
1612: ST_TO_ADDR
// end ; end ;
1613: GO 1518
1615: POP
1616: POP
// if spawnMode = 1 then
1617: LD_VAR 0 3
1621: PUSH
1622: LD_INT 1
1624: EQUAL
1625: IFFALSE 1646
// PlaceUnitArea ( mecha , area , false ) else
1627: LD_VAR 0 9
1631: PPUSH
1632: LD_VAR 0 1
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 49
1644: GO 1660
// PlaceHumanInUnit ( mecha , veh ) ;
1646: LD_VAR 0 9
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// others11 := others11 diff mecha ;
1660: LD_ADDR_EXP 14
1664: PUSH
1665: LD_EXP 14
1669: PUSH
1670: LD_VAR 0 9
1674: DIFF
1675: ST_TO_ADDR
// end else
1676: GO 1736
// begin hc_name =  ;
1678: LD_ADDR_OWVAR 26
1682: PUSH
1683: LD_STRING 
1685: ST_TO_ADDR
// hc_gallery =  ;
1686: LD_ADDR_OWVAR 33
1690: PUSH
1691: LD_STRING 
1693: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: LD_INT 9
1702: PPUSH
1703: CALL_OW 12
1707: PPUSH
1708: CALL_OW 383
// un = CreateHuman ;
1712: LD_ADDR_VAR 0 7
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1722: LD_VAR 0 7
1726: PPUSH
1727: LD_VAR 0 2
1731: PPUSH
1732: CALL_OW 52
// end ; end else
1736: GO 1907
// begin if others11 > 0 then
1738: LD_EXP 14
1742: PUSH
1743: LD_INT 0
1745: GREATER
1746: IFFALSE 1819
// begin if spawnMode = 1 then
1748: LD_VAR 0 3
1752: PUSH
1753: LD_INT 1
1755: EQUAL
1756: IFFALSE 1781
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1758: LD_EXP 14
1762: PUSH
1763: LD_INT 1
1765: ARRAY
1766: PPUSH
1767: LD_VAR 0 1
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: CALL_OW 49
1779: GO 1799
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1781: LD_EXP 14
1785: PUSH
1786: LD_INT 1
1788: ARRAY
1789: PPUSH
1790: LD_VAR 0 2
1794: PPUSH
1795: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1799: LD_ADDR_EXP 14
1803: PUSH
1804: LD_EXP 14
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 3
1816: ST_TO_ADDR
// end else
1817: GO 1907
// begin hc_name =  ;
1819: LD_ADDR_OWVAR 26
1823: PUSH
1824: LD_STRING 
1826: ST_TO_ADDR
// hc_gallery =  ;
1827: LD_ADDR_OWVAR 33
1831: PUSH
1832: LD_STRING 
1834: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1835: LD_INT 0
1837: PPUSH
1838: LD_INT 1
1840: PUSH
1841: LD_INT 2
1843: PUSH
1844: LD_INT 3
1846: PUSH
1847: LD_INT 4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_INT 4
1861: PPUSH
1862: CALL_OW 12
1866: ARRAY
1867: PPUSH
1868: LD_INT 7
1870: PPUSH
1871: LD_INT 9
1873: PPUSH
1874: CALL_OW 12
1878: PPUSH
1879: CALL_OW 380
// un = CreateHuman ;
1883: LD_ADDR_VAR 0 7
1887: PUSH
1888: CALL_OW 44
1892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1893: LD_VAR 0 7
1897: PPUSH
1898: LD_VAR 0 2
1902: PPUSH
1903: CALL_OW 52
// end ; end ; end ;
1907: LD_VAR 0 5
1911: RET
// export function PrepareVehicles ; var veh ; begin
1912: LD_INT 0
1914: PPUSH
1915: PPUSH
// uc_side = 1 ;
1916: LD_ADDR_OWVAR 20
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// uc_nation = 1 ;
1924: LD_ADDR_OWVAR 21
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1932: LD_ADDR_OWVAR 37
1936: PUSH
1937: LD_INT 3
1939: ST_TO_ADDR
// vc_engine = 3 ;
1940: LD_ADDR_OWVAR 39
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_control = 3 ;
1948: LD_ADDR_OWVAR 38
1952: PUSH
1953: LD_INT 3
1955: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1956: LD_ADDR_OWVAR 40
1960: PUSH
1961: LD_INT 4
1963: ST_TO_ADDR
// veh = CreateVehicle ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: CALL_OW 45
1973: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_INT 4
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: CALL_OW 49
// vc_weapon = us_double_gun ;
1989: LD_ADDR_OWVAR 40
1993: PUSH
1994: LD_INT 5
1996: ST_TO_ADDR
// vc_control = 1 ;
1997: LD_ADDR_OWVAR 38
2001: PUSH
2002: LD_INT 1
2004: ST_TO_ADDR
// veh = CreateVehicle ;
2005: LD_ADDR_VAR 0 2
2009: PUSH
2010: CALL_OW 45
2014: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_INT 4
2022: PPUSH
2023: LD_INT 0
2025: PPUSH
2026: CALL_OW 49
// vc_weapon = us_light_gun ;
2030: LD_ADDR_OWVAR 40
2034: PUSH
2035: LD_INT 3
2037: ST_TO_ADDR
// vc_control = 3 ;
2038: LD_ADDR_OWVAR 38
2042: PUSH
2043: LD_INT 3
2045: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2046: LD_ADDR_OWVAR 37
2050: PUSH
2051: LD_INT 2
2053: ST_TO_ADDR
// veh = CreateVehicle ;
2054: LD_ADDR_VAR 0 2
2058: PUSH
2059: CALL_OW 45
2063: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2064: LD_VAR 0 2
2068: PPUSH
2069: LD_INT 4
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL_OW 49
// vc_weapon = us_gatling_gun ;
2079: LD_ADDR_OWVAR 40
2083: PUSH
2084: LD_INT 4
2086: ST_TO_ADDR
// veh = CreateVehicle ;
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: CALL_OW 45
2096: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2097: LD_VAR 0 2
2101: PPUSH
2102: LD_INT 4
2104: PPUSH
2105: LD_INT 0
2107: PPUSH
2108: CALL_OW 49
// end ;
2112: LD_VAR 0 1
2116: RET
// export function PowellSupport1 ; var veh , un ; begin
2117: LD_INT 0
2119: PPUSH
2120: PPUSH
2121: PPUSH
// uc_side = 1 ;
2122: LD_ADDR_OWVAR 20
2126: PUSH
2127: LD_INT 1
2129: ST_TO_ADDR
// uc_nation = 1 ;
2130: LD_ADDR_OWVAR 21
2134: PUSH
2135: LD_INT 1
2137: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
2138: LD_STRING 11_Brown
2140: PPUSH
2141: CALL_OW 28
2145: PUSH
2146: LD_INT 1
2148: EQUAL
2149: IFFALSE 2196
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
2151: LD_ADDR_EXP 7
2155: PUSH
2156: LD_STRING 11_Brown
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL 12878 0 2
2166: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_INT 2
2174: PPUSH
2175: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2179: LD_EXP 7
2183: PPUSH
2184: LD_INT 4
2186: PPUSH
2187: LD_INT 0
2189: PPUSH
2190: CALL_OW 49
// end else
2194: GO 2270
// begin if TestCharacters ( 10c_Brown ) = true then
2196: LD_STRING 10c_Brown
2198: PPUSH
2199: CALL_OW 28
2203: PUSH
2204: LD_INT 1
2206: EQUAL
2207: IFFALSE 2254
// begin Brown = PrepareUnit ( 10c_Brown , true ) ;
2209: LD_ADDR_EXP 7
2213: PUSH
2214: LD_STRING 10c_Brown
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: CALL 12878 0 2
2224: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2225: LD_EXP 7
2229: PPUSH
2230: LD_INT 2
2232: PPUSH
2233: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2237: LD_EXP 7
2241: PPUSH
2242: LD_INT 4
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// end else
2252: GO 2270
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2254: LD_INT 4
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: LD_INT 1
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: CALL 1447 0 4
// end ; end ; if TestCharacters ( 11_Gary ) = true then
2270: LD_STRING 11_Gary
2272: PPUSH
2273: CALL_OW 28
2277: PUSH
2278: LD_INT 1
2280: EQUAL
2281: IFFALSE 2328
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
2283: LD_ADDR_EXP 11
2287: PUSH
2288: LD_STRING 11_Gary
2290: PPUSH
2291: LD_INT 1
2293: PPUSH
2294: CALL 12878 0 2
2298: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2299: LD_EXP 11
2303: PPUSH
2304: LD_INT 2
2306: PPUSH
2307: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2311: LD_EXP 11
2315: PPUSH
2316: LD_INT 4
2318: PPUSH
2319: LD_INT 0
2321: PPUSH
2322: CALL_OW 49
// end else
2326: GO 2402
// begin if TestCharacters ( 10c_Gary ) = true then
2328: LD_STRING 10c_Gary
2330: PPUSH
2331: CALL_OW 28
2335: PUSH
2336: LD_INT 1
2338: EQUAL
2339: IFFALSE 2386
// begin Brown = PrepareUnit ( 10c_Gary , true ) ;
2341: LD_ADDR_EXP 7
2345: PUSH
2346: LD_STRING 10c_Gary
2348: PPUSH
2349: LD_INT 1
2351: PPUSH
2352: CALL 12878 0 2
2356: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2357: LD_EXP 11
2361: PPUSH
2362: LD_INT 2
2364: PPUSH
2365: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2369: LD_EXP 11
2373: PPUSH
2374: LD_INT 4
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// end else
2384: GO 2402
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2386: LD_INT 4
2388: PPUSH
2389: LD_INT 0
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: LD_INT 0
2397: PPUSH
2398: CALL 1447 0 4
// end ; end ; vc_chassis = us_medium_tracked ;
2402: LD_ADDR_OWVAR 37
2406: PUSH
2407: LD_INT 3
2409: ST_TO_ADDR
// vc_engine = 3 ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_INT 3
2417: ST_TO_ADDR
// vc_control = 1 ;
2418: LD_ADDR_OWVAR 38
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// vc_weapon = us_crane ;
2426: LD_ADDR_OWVAR 40
2430: PUSH
2431: LD_INT 13
2433: ST_TO_ADDR
// veh = CreateVehicle ;
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: CALL_OW 45
2443: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2444: LD_VAR 0 2
2448: PPUSH
2449: LD_INT 4
2451: PPUSH
2452: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2456: LD_VAR 0 2
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2471: LD_INT 4
2473: PPUSH
2474: LD_VAR 0 2
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL 1447 0 4
// vc_weapon = 9 ;
2489: LD_ADDR_OWVAR 40
2493: PUSH
2494: LD_INT 9
2496: ST_TO_ADDR
// veh = CreateVehicle ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: CALL_OW 45
2506: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2507: LD_VAR 0 2
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2519: LD_VAR 0 2
2523: PPUSH
2524: LD_INT 4
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2534: LD_INT 4
2536: PPUSH
2537: LD_VAR 0 2
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 1
2547: PPUSH
2548: CALL 1447 0 4
// vc_control = 3 ;
2552: LD_ADDR_OWVAR 38
2556: PUSH
2557: LD_INT 3
2559: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2560: LD_ADDR_OWVAR 40
2564: PUSH
2565: LD_INT 12
2567: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2568: LD_ADDR_EXP 15
2572: PUSH
2573: CALL_OW 45
2577: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2578: LD_ADDR_EXP 16
2582: PUSH
2583: CALL_OW 45
2587: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2588: LD_EXP 15
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2600: LD_EXP 16
2604: PPUSH
2605: LD_INT 4
2607: PPUSH
2608: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2612: LD_EXP 15
2616: PPUSH
2617: LD_INT 4
2619: PPUSH
2620: LD_INT 0
2622: PPUSH
2623: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2627: LD_EXP 16
2631: PPUSH
2632: LD_INT 4
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2642: LD_EXP 15
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2657: LD_EXP 16
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 80
2667: PPUSH
2668: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2672: LD_EXP 16
2676: PPUSH
2677: LD_INT 3
2679: PPUSH
2680: LD_INT 20
2682: PPUSH
2683: CALL_OW 291
// end ;
2687: LD_VAR 0 1
2691: RET
// export function PowellSupport2 ; var veh , un ; begin
2692: LD_INT 0
2694: PPUSH
2695: PPUSH
2696: PPUSH
// uc_side = 1 ;
2697: LD_ADDR_OWVAR 20
2701: PUSH
2702: LD_INT 1
2704: ST_TO_ADDR
// uc_nation = 1 ;
2705: LD_ADDR_OWVAR 21
2709: PUSH
2710: LD_INT 1
2712: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2713: LD_ADDR_OWVAR 37
2717: PUSH
2718: LD_INT 2
2720: ST_TO_ADDR
// vc_engine = 3 ;
2721: LD_ADDR_OWVAR 39
2725: PUSH
2726: LD_INT 3
2728: ST_TO_ADDR
// vc_control = 3 ;
2729: LD_ADDR_OWVAR 38
2733: PUSH
2734: LD_INT 3
2736: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2737: LD_ADDR_OWVAR 40
2741: PUSH
2742: LD_INT 3
2744: ST_TO_ADDR
// veh = CreateVehicle ;
2745: LD_ADDR_VAR 0 2
2749: PUSH
2750: CALL_OW 45
2754: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2755: LD_VAR 0 2
2759: PPUSH
2760: LD_INT 4
2762: PPUSH
2763: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2767: LD_VAR 0 2
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: CALL_OW 49
// vc_control = 1 ;
2782: LD_ADDR_OWVAR 38
2786: PUSH
2787: LD_INT 1
2789: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2790: LD_ADDR_OWVAR 37
2794: PUSH
2795: LD_INT 2
2797: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2798: LD_ADDR_OWVAR 40
2802: PUSH
2803: LD_INT 5
2805: ST_TO_ADDR
// veh = CreateVehicle ;
2806: LD_ADDR_VAR 0 2
2810: PUSH
2811: CALL_OW 45
2815: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2816: LD_VAR 0 2
2820: PPUSH
2821: LD_INT 4
2823: PPUSH
2824: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2828: LD_VAR 0 2
2832: PPUSH
2833: LD_INT 4
2835: PPUSH
2836: LD_INT 0
2838: PPUSH
2839: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2843: LD_STRING 11_Bobby
2845: PPUSH
2846: CALL_OW 28
2850: PUSH
2851: LD_INT 1
2853: EQUAL
2854: IFFALSE 2900
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2856: LD_ADDR_EXP 4
2860: PUSH
2861: LD_STRING 11_Bobby
2863: PPUSH
2864: LD_INT 1
2866: PPUSH
2867: CALL 12878 0 2
2871: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2872: LD_EXP 4
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2884: LD_EXP 4
2888: PPUSH
2889: LD_VAR 0 2
2893: PPUSH
2894: CALL_OW 52
// end else
2898: GO 2975
// begin if TestCharacters ( 10c_Bobby ) = true then
2900: LD_STRING 10c_Bobby
2902: PPUSH
2903: CALL_OW 28
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2957
// begin Bobby = PrepareUnit ( 10c_Bobby , true ) ;
2913: LD_ADDR_EXP 4
2917: PUSH
2918: LD_STRING 10c_Bobby
2920: PPUSH
2921: LD_INT 1
2923: PPUSH
2924: CALL 12878 0 2
2928: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2929: LD_EXP 4
2933: PPUSH
2934: LD_INT 3
2936: PPUSH
2937: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2941: LD_EXP 4
2945: PPUSH
2946: LD_VAR 0 2
2950: PPUSH
2951: CALL_OW 52
// end else
2955: GO 2975
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2957: LD_INT 0
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: LD_INT 2
2967: PPUSH
2968: LD_INT 0
2970: PPUSH
2971: CALL 1447 0 4
// end ; end ; if TestCharacters ( 11_Houten ) = true then
2975: LD_STRING 11_Houten
2977: PPUSH
2978: CALL_OW 28
2982: PUSH
2983: LD_INT 1
2985: EQUAL
2986: IFFALSE 3033
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2988: LD_ADDR_EXP 9
2992: PUSH
2993: LD_STRING 11_Houten
2995: PPUSH
2996: LD_INT 1
2998: PPUSH
2999: CALL 12878 0 2
3003: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
3004: LD_EXP 9
3008: PPUSH
3009: LD_INT 1
3011: PPUSH
3012: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
3016: LD_EXP 9
3020: PPUSH
3021: LD_INT 4
3023: PPUSH
3024: LD_INT 0
3026: PPUSH
3027: CALL_OW 49
// end else
3031: GO 3107
// begin if TestCharacters ( 10c_Houten ) = true then
3033: LD_STRING 10c_Houten
3035: PPUSH
3036: CALL_OW 28
3040: PUSH
3041: LD_INT 1
3043: EQUAL
3044: IFFALSE 3091
// begin Houten = PrepareUnit ( 10c_Houten , true ) ;
3046: LD_ADDR_EXP 9
3050: PUSH
3051: LD_STRING 10c_Houten
3053: PPUSH
3054: LD_INT 1
3056: PPUSH
3057: CALL 12878 0 2
3061: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
3062: LD_EXP 9
3066: PPUSH
3067: LD_INT 1
3069: PPUSH
3070: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
3074: LD_EXP 9
3078: PPUSH
3079: LD_INT 4
3081: PPUSH
3082: LD_INT 0
3084: PPUSH
3085: CALL_OW 49
// end else
3089: GO 3107
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3091: LD_INT 4
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: LD_INT 1
3099: PPUSH
3100: LD_INT 0
3102: PPUSH
3103: CALL 1447 0 4
// end ; end ; vc_control = 3 ;
3107: LD_ADDR_OWVAR 38
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3115: LD_ADDR_OWVAR 40
3119: PUSH
3120: LD_INT 12
3122: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
3123: LD_ADDR_EXP 17
3127: PUSH
3128: CALL_OW 45
3132: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
3133: LD_EXP 17
3137: PPUSH
3138: LD_INT 4
3140: PPUSH
3141: CALL_OW 233
// amCargo4 = CreateVehicle ;
3145: LD_ADDR_EXP 18
3149: PUSH
3150: CALL_OW 45
3154: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
3155: LD_EXP 18
3159: PPUSH
3160: LD_INT 4
3162: PPUSH
3163: CALL_OW 233
// amCargo5 = CreateVehicle ;
3167: LD_ADDR_EXP 19
3171: PUSH
3172: CALL_OW 45
3176: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
3177: LD_EXP 19
3181: PPUSH
3182: LD_INT 4
3184: PPUSH
3185: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
3189: LD_EXP 17
3193: PPUSH
3194: LD_INT 4
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
3204: LD_EXP 18
3208: PPUSH
3209: LD_INT 4
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
3219: LD_EXP 19
3223: PPUSH
3224: LD_INT 4
3226: PPUSH
3227: LD_INT 0
3229: PPUSH
3230: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
3234: LD_EXP 17
3238: PPUSH
3239: LD_INT 1
3241: PPUSH
3242: LD_INT 100
3244: PPUSH
3245: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
3249: LD_EXP 18
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: LD_INT 100
3259: PPUSH
3260: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
3264: LD_EXP 19
3268: PPUSH
3269: LD_INT 3
3271: PPUSH
3272: LD_INT 100
3274: PPUSH
3275: CALL_OW 291
// end ;
3279: LD_VAR 0 1
3283: RET
// export function PowellSupport3 ; var veh , un ; begin
3284: LD_INT 0
3286: PPUSH
3287: PPUSH
3288: PPUSH
// uc_side = 1 ;
3289: LD_ADDR_OWVAR 20
3293: PUSH
3294: LD_INT 1
3296: ST_TO_ADDR
// uc_nation = 1 ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 1
3304: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3305: LD_INT 4
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_INT 0
3316: PPUSH
3317: CALL 1447 0 4
// vc_chassis = us_medium_wheeled ;
3321: LD_ADDR_OWVAR 37
3325: PUSH
3326: LD_INT 2
3328: ST_TO_ADDR
// vc_engine = 3 ;
3329: LD_ADDR_OWVAR 39
3333: PUSH
3334: LD_INT 3
3336: ST_TO_ADDR
// vc_control = 3 ;
3337: LD_ADDR_OWVAR 38
3341: PUSH
3342: LD_INT 3
3344: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3345: LD_ADDR_OWVAR 40
3349: PUSH
3350: LD_INT 12
3352: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3353: LD_ADDR_EXP 20
3357: PUSH
3358: CALL_OW 45
3362: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3363: LD_ADDR_EXP 21
3367: PUSH
3368: CALL_OW 45
3372: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3373: LD_EXP 20
3377: PPUSH
3378: LD_INT 4
3380: PPUSH
3381: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3385: LD_EXP 21
3389: PPUSH
3390: LD_INT 4
3392: PPUSH
3393: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3397: LD_EXP 20
3401: PPUSH
3402: LD_INT 4
3404: PPUSH
3405: LD_INT 0
3407: PPUSH
3408: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3412: LD_EXP 21
3416: PPUSH
3417: LD_INT 4
3419: PPUSH
3420: LD_INT 0
3422: PPUSH
3423: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3427: LD_EXP 20
3431: PPUSH
3432: LD_INT 1
3434: PPUSH
3435: LD_INT 100
3437: PPUSH
3438: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
3442: LD_EXP 21
3446: PPUSH
3447: LD_INT 3
3449: PPUSH
3450: LD_INT 100
3452: PPUSH
3453: CALL_OW 291
// end ; end_of_file
3457: LD_VAR 0 1
3461: RET
// export function PrepareRussianCommander ; begin
3462: LD_INT 0
3464: PPUSH
// uc_side = 3 ;
3465: LD_ADDR_OWVAR 20
3469: PUSH
3470: LD_INT 3
3472: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3473: LD_ADDR_EXP 23
3477: PUSH
3478: LD_STRING Davidov
3480: PPUSH
3481: LD_INT 0
3483: PPUSH
3484: CALL 12878 0 2
3488: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3489: LD_EXP 23
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3501: LD_ADDR_EXP 34
3505: PUSH
3506: LD_EXP 34
3510: PUSH
3511: LD_EXP 23
3515: ADD
3516: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3517: LD_EXP 34
3521: PPUSH
3522: LD_INT 4
3524: PPUSH
3525: CALL_OW 336
// end ;
3529: LD_VAR 0 1
3533: RET
// export function PrepareEastBase ; var i , un ; begin
3534: LD_INT 0
3536: PPUSH
3537: PPUSH
3538: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3539: LD_INT 3
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 121
3547: PPUSH
3548: LD_EXP 36
3552: PPUSH
3553: LD_EXP 37
3557: PPUSH
3558: CALL_OW 12
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: LD_INT 3
3568: PPUSH
3569: CALL 13670 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3573: LD_INT 3
3575: PPUSH
3576: LD_INT 3
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_EXP 36
3586: PPUSH
3587: LD_EXP 37
3591: PPUSH
3592: CALL_OW 12
3596: PPUSH
3597: LD_INT 9
3599: PPUSH
3600: LD_INT 3
3602: PPUSH
3603: CALL 13670 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3607: LD_INT 3
3609: PPUSH
3610: LD_INT 3
3612: PPUSH
3613: LD_INT 4
3615: PPUSH
3616: LD_EXP 36
3620: PPUSH
3621: LD_EXP 37
3625: PPUSH
3626: CALL_OW 12
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: LD_INT 6
3636: PPUSH
3637: CALL 13670 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3641: LD_INT 3
3643: PPUSH
3644: LD_INT 3
3646: PPUSH
3647: LD_INT 112
3649: PPUSH
3650: LD_EXP 36
3654: PPUSH
3655: LD_EXP 37
3659: PPUSH
3660: CALL_OW 12
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 6
3670: PPUSH
3671: CALL 13670 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3675: LD_INT 3
3677: PPUSH
3678: LD_INT 3
3680: PPUSH
3681: LD_INT 47
3683: PPUSH
3684: LD_EXP 36
3688: PPUSH
3689: LD_EXP 37
3693: PPUSH
3694: CALL_OW 12
3698: PPUSH
3699: LD_INT 4
3701: PPUSH
3702: LD_INT 6
3704: PPUSH
3705: CALL 13670 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3709: LD_INT 3
3711: PPUSH
3712: LD_INT 3
3714: PPUSH
3715: LD_INT 129
3717: PPUSH
3718: LD_EXP 36
3722: PPUSH
3723: LD_EXP 37
3727: PPUSH
3728: CALL_OW 12
3732: PPUSH
3733: LD_INT 4
3735: PPUSH
3736: LD_INT 6
3738: PPUSH
3739: CALL 13670 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3743: LD_INT 3
3745: PPUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 135
3751: PPUSH
3752: LD_EXP 36
3756: PPUSH
3757: LD_EXP 37
3761: PPUSH
3762: CALL_OW 12
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: LD_INT 6
3772: PPUSH
3773: CALL 13670 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3777: LD_ADDR_VAR 0 2
3781: PUSH
3782: LD_INT 22
3784: PUSH
3785: LD_INT 3
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: PUSH
3792: LD_INT 30
3794: PUSH
3795: LD_INT 32
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PPUSH
3806: CALL_OW 69
3810: PUSH
3811: FOR_IN
3812: IFFALSE 3852
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3814: LD_INT 3
3816: PPUSH
3817: LD_INT 3
3819: PPUSH
3820: LD_VAR 0 2
3824: PPUSH
3825: LD_EXP 36
3829: PPUSH
3830: LD_EXP 37
3834: PPUSH
3835: CALL_OW 12
3839: PPUSH
3840: LD_INT 1
3842: PPUSH
3843: LD_INT 1
3845: PPUSH
3846: CALL 13670 0 6
3850: GO 3811
3852: POP
3853: POP
// for i = 1 to 5 do
3854: LD_ADDR_VAR 0 2
3858: PUSH
3859: DOUBLE
3860: LD_INT 1
3862: DEC
3863: ST_TO_ADDR
3864: LD_INT 5
3866: PUSH
3867: FOR_TO
3868: IFFALSE 3967
// begin uc_side = 3 ;
3870: LD_ADDR_OWVAR 20
3874: PUSH
3875: LD_INT 3
3877: ST_TO_ADDR
// uc_nation = 3 ;
3878: LD_ADDR_OWVAR 21
3882: PUSH
3883: LD_INT 3
3885: ST_TO_ADDR
// hc_gallery =  ;
3886: LD_ADDR_OWVAR 33
3890: PUSH
3891: LD_STRING 
3893: ST_TO_ADDR
// hc_name =  ;
3894: LD_ADDR_OWVAR 26
3898: PUSH
3899: LD_STRING 
3901: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3902: LD_INT 0
3904: PPUSH
3905: LD_INT 4
3907: PPUSH
3908: LD_EXP 36
3912: PPUSH
3913: LD_EXP 37
3917: PPUSH
3918: CALL_OW 12
3922: PPUSH
3923: CALL_OW 380
// un = CreateHuman ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: LD_INT 3
3944: PPUSH
3945: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3949: LD_ADDR_EXP 34
3953: PUSH
3954: LD_EXP 34
3958: PUSH
3959: LD_VAR 0 3
3963: ADD
3964: ST_TO_ADDR
// end ;
3965: GO 3867
3967: POP
3968: POP
// end ;
3969: LD_VAR 0 1
3973: RET
// export function PrepareWestBase ; var i , un ; begin
3974: LD_INT 0
3976: PPUSH
3977: PPUSH
3978: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3979: LD_INT 3
3981: PPUSH
3982: LD_INT 3
3984: PPUSH
3985: LD_INT 6
3987: PPUSH
3988: LD_EXP 36
3992: PPUSH
3993: LD_EXP 37
3997: PPUSH
3998: CALL_OW 12
4002: PPUSH
4003: LD_INT 2
4005: PPUSH
4006: LD_INT 3
4008: PPUSH
4009: CALL 13670 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4013: LD_INT 3
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 91
4021: PPUSH
4022: LD_EXP 36
4026: PPUSH
4027: LD_EXP 37
4031: PPUSH
4032: CALL_OW 12
4036: PPUSH
4037: LD_INT 4
4039: PPUSH
4040: LD_INT 3
4042: PPUSH
4043: CALL 13670 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
4047: LD_INT 3
4049: PPUSH
4050: LD_INT 3
4052: PPUSH
4053: LD_INT 21
4055: PPUSH
4056: LD_EXP 36
4060: PPUSH
4061: LD_EXP 37
4065: PPUSH
4066: CALL_OW 12
4070: PPUSH
4071: LD_INT 3
4073: PPUSH
4074: LD_INT 6
4076: PPUSH
4077: CALL 13670 0 6
// end ;
4081: LD_VAR 0 1
4085: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4086: LD_INT 0
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
// uc_side = 3 ;
4092: LD_ADDR_OWVAR 20
4096: PUSH
4097: LD_INT 3
4099: ST_TO_ADDR
// uc_nation = 3 ;
4100: LD_ADDR_OWVAR 21
4104: PUSH
4105: LD_INT 3
4107: ST_TO_ADDR
// for i = 1 to 5 do
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: DOUBLE
4114: LD_INT 1
4116: DEC
4117: ST_TO_ADDR
4118: LD_INT 5
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4192
// begin hc_gallery =  ;
4124: LD_ADDR_OWVAR 33
4128: PUSH
4129: LD_STRING 
4131: ST_TO_ADDR
// hc_name =  ;
4132: LD_ADDR_OWVAR 26
4136: PUSH
4137: LD_STRING 
4139: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4140: LD_INT 0
4142: PPUSH
4143: LD_INT 9
4145: PPUSH
4146: LD_EXP 36
4150: PPUSH
4151: LD_EXP 37
4155: PPUSH
4156: CALL_OW 12
4160: PPUSH
4161: CALL_OW 380
// un = CreateHuman ;
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: CALL_OW 44
4174: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4175: LD_VAR 0 3
4179: PPUSH
4180: LD_INT 8
4182: PPUSH
4183: LD_INT 0
4185: PPUSH
4186: CALL_OW 49
// end ;
4190: GO 4121
4192: POP
4193: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: DOUBLE
4200: LD_INT 1
4202: DEC
4203: ST_TO_ADDR
4204: LD_INT 2
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 4
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_OWVAR 67
4222: ARRAY
4223: PUSH
4224: FOR_TO
4225: IFFALSE 4295
// begin hc_gallery =  ;
4227: LD_ADDR_OWVAR 33
4231: PUSH
4232: LD_STRING 
4234: ST_TO_ADDR
// hc_name =  ;
4235: LD_ADDR_OWVAR 26
4239: PUSH
4240: LD_STRING 
4242: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4243: LD_INT 0
4245: PPUSH
4246: LD_INT 4
4248: PPUSH
4249: LD_EXP 36
4253: PPUSH
4254: LD_EXP 37
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 380
// un = CreateHuman ;
4268: LD_ADDR_VAR 0 3
4272: PUSH
4273: CALL_OW 44
4277: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4278: LD_VAR 0 3
4282: PPUSH
4283: LD_INT 8
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 49
// end ;
4293: GO 4224
4295: POP
4296: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4297: LD_ADDR_VAR 0 2
4301: PUSH
4302: DOUBLE
4303: LD_INT 1
4305: DEC
4306: ST_TO_ADDR
4307: LD_INT 3
4309: PUSH
4310: LD_INT 4
4312: PUSH
4313: LD_INT 5
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_OWVAR 67
4325: ARRAY
4326: PUSH
4327: FOR_TO
4328: IFFALSE 4524
// begin vc_engine = 3 ;
4330: LD_ADDR_OWVAR 39
4334: PUSH
4335: LD_INT 3
4337: ST_TO_ADDR
// vc_control = 1 ;
4338: LD_ADDR_OWVAR 38
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4346: LD_ADDR_OWVAR 40
4350: PUSH
4351: LD_INT 42
4353: PUSH
4354: LD_INT 43
4356: PUSH
4357: LD_INT 44
4359: PUSH
4360: LD_INT 45
4362: PUSH
4363: LD_INT 46
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 1
4375: PPUSH
4376: LD_INT 5
4378: PPUSH
4379: CALL_OW 12
4383: ARRAY
4384: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4385: LD_OWVAR 40
4389: PUSH
4390: LD_INT 46
4392: EQUAL
4393: IFFALSE 4405
// vc_chassis = ru_heavy_tracked else
4395: LD_ADDR_OWVAR 37
4399: PUSH
4400: LD_INT 24
4402: ST_TO_ADDR
4403: GO 4432
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4405: LD_ADDR_OWVAR 37
4409: PUSH
4410: LD_INT 22
4412: PUSH
4413: LD_INT 21
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 1
4422: PPUSH
4423: LD_INT 2
4425: PPUSH
4426: CALL_OW 12
4430: ARRAY
4431: ST_TO_ADDR
// veh = CreateVehicle ;
4432: LD_ADDR_VAR 0 4
4436: PUSH
4437: CALL_OW 45
4441: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4442: LD_VAR 0 4
4446: PPUSH
4447: LD_INT 3
4449: PPUSH
4450: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4454: LD_VAR 0 4
4458: PPUSH
4459: LD_INT 5
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// hc_gallery =  ;
4469: LD_ADDR_OWVAR 33
4473: PUSH
4474: LD_STRING 
4476: ST_TO_ADDR
// hc_name =  ;
4477: LD_ADDR_OWVAR 26
4481: PUSH
4482: LD_STRING 
4484: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4485: LD_INT 0
4487: PPUSH
4488: LD_INT 3
4490: PPUSH
4491: LD_INT 10
4493: PPUSH
4494: CALL_OW 380
// un = CreateHuman ;
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: CALL_OW 44
4507: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4508: LD_VAR 0 3
4512: PPUSH
4513: LD_VAR 0 4
4517: PPUSH
4518: CALL_OW 52
// end ;
4522: GO 4327
4524: POP
4525: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 3
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 5
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_OWVAR 67
4554: ARRAY
4555: PUSH
4556: FOR_TO
4557: IFFALSE 4704
// begin vc_engine = 3 ;
4559: LD_ADDR_OWVAR 39
4563: PUSH
4564: LD_INT 3
4566: ST_TO_ADDR
// vc_control = 3 ;
4567: LD_ADDR_OWVAR 38
4571: PUSH
4572: LD_INT 3
4574: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4575: LD_ADDR_OWVAR 40
4579: PUSH
4580: LD_INT 42
4582: PUSH
4583: LD_INT 43
4585: PUSH
4586: LD_INT 44
4588: PUSH
4589: LD_INT 45
4591: PUSH
4592: LD_INT 46
4594: PUSH
4595: LD_INT 49
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 1
4608: PPUSH
4609: LD_INT 5
4611: PPUSH
4612: CALL_OW 12
4616: ARRAY
4617: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4618: LD_OWVAR 40
4622: PUSH
4623: LD_INT 46
4625: EQUAL
4626: IFFALSE 4638
// vc_chassis = ru_heavy_tracked else
4628: LD_ADDR_OWVAR 37
4632: PUSH
4633: LD_INT 24
4635: ST_TO_ADDR
4636: GO 4665
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4638: LD_ADDR_OWVAR 37
4642: PUSH
4643: LD_INT 22
4645: PUSH
4646: LD_INT 21
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 2
4658: PPUSH
4659: CALL_OW 12
4663: ARRAY
4664: ST_TO_ADDR
// veh = CreateVehicle ;
4665: LD_ADDR_VAR 0 4
4669: PUSH
4670: CALL_OW 45
4674: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4675: LD_VAR 0 4
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4687: LD_VAR 0 4
4691: PPUSH
4692: LD_INT 6
4694: PPUSH
4695: LD_INT 0
4697: PPUSH
4698: CALL_OW 49
// end ;
4702: GO 4556
4704: POP
4705: POP
// end ; end_of_file
4706: LD_VAR 0 1
4710: RET
// export function PrepareKurt ; begin
4711: LD_INT 0
4713: PPUSH
// uc_side = 8 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 8
4721: ST_TO_ADDR
// uc_nation = 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4730: LD_ADDR_OWVAR 37
4734: PUSH
4735: LD_INT 13
4737: ST_TO_ADDR
// vc_engine = 1 ;
4738: LD_ADDR_OWVAR 39
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// vc_control = 1 ;
4746: LD_ADDR_OWVAR 38
4750: PUSH
4751: LD_INT 1
4753: ST_TO_ADDR
// vc_weapon = 24 ;
4754: LD_ADDR_OWVAR 40
4758: PUSH
4759: LD_INT 24
4761: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4762: LD_ADDR_EXP 26
4766: PUSH
4767: CALL_OW 45
4771: ST_TO_ADDR
// if kurtStatus > 0 then
4772: LD_EXP 27
4776: PUSH
4777: LD_INT 0
4779: GREATER
4780: IFFALSE 4829
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4782: LD_ADDR_EXP 24
4786: PUSH
4787: LD_STRING Kurt
4789: PPUSH
4790: LD_INT 0
4792: PPUSH
4793: CALL 12878 0 2
4797: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4798: LD_EXP 26
4802: PPUSH
4803: LD_INT 4
4805: PPUSH
4806: LD_INT 0
4808: PPUSH
4809: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4813: LD_EXP 24
4817: PPUSH
4818: LD_EXP 26
4822: PPUSH
4823: CALL_OW 52
// end else
4827: GO 4890
// begin hc_name =  ;
4829: LD_ADDR_OWVAR 26
4833: PUSH
4834: LD_STRING 
4836: ST_TO_ADDR
// hc_gallery =  ;
4837: LD_ADDR_OWVAR 33
4841: PUSH
4842: LD_STRING 
4844: ST_TO_ADDR
// otherKurt = PrepareSoldier ( sex_male , 10 ) ;
4845: LD_ADDR_EXP 25
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_INT 10
4855: PPUSH
4856: CALL_OW 381
4860: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4861: LD_EXP 26
4865: PPUSH
4866: LD_INT 4
4868: PPUSH
4869: LD_INT 0
4871: PPUSH
4872: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4876: LD_EXP 25
4880: PPUSH
4881: LD_EXP 26
4885: PPUSH
4886: CALL_OW 52
// end ; end ;
4890: LD_VAR 0 1
4894: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
4899: PPUSH
4900: PPUSH
// for i = 1 to 3 do
4901: LD_ADDR_VAR 0 2
4905: PUSH
4906: DOUBLE
4907: LD_INT 1
4909: DEC
4910: ST_TO_ADDR
4911: LD_INT 3
4913: PUSH
4914: FOR_TO
4915: IFFALSE 5052
// begin uc_side = 1 ;
4917: LD_ADDR_OWVAR 20
4921: PUSH
4922: LD_INT 1
4924: ST_TO_ADDR
// uc_nation = 2 ;
4925: LD_ADDR_OWVAR 21
4929: PUSH
4930: LD_INT 2
4932: ST_TO_ADDR
// hc_gallery =  ;
4933: LD_ADDR_OWVAR 33
4937: PUSH
4938: LD_STRING 
4940: ST_TO_ADDR
// hc_name =  ;
4941: LD_ADDR_OWVAR 26
4945: PUSH
4946: LD_STRING 
4948: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4949: LD_EXP 27
4953: PUSH
4954: LD_INT 0
4956: EQUAL
4957: PUSH
4958: LD_EXP 27
4962: PUSH
4963: LD_INT 2
4965: EQUAL
4966: OR
4967: IFFALSE 4992
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 1
4974: PPUSH
4975: LD_INT 2
4977: PPUSH
4978: LD_INT 4
4980: PPUSH
4981: CALL_OW 12
4985: PPUSH
4986: CALL_OW 380
4990: GO 5013
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4992: LD_INT 0
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_INT 6
5000: PPUSH
5001: LD_INT 8
5003: PPUSH
5004: CALL_OW 12
5008: PPUSH
5009: CALL_OW 380
// un = CreateHuman ;
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: CALL_OW 44
5022: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5023: LD_VAR 0 3
5027: PPUSH
5028: LD_INT 4
5030: PPUSH
5031: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5035: LD_VAR 0 3
5039: PPUSH
5040: LD_INT 4
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 49
// end ;
5050: GO 4914
5052: POP
5053: POP
// vc_chassis = 14 ;
5054: LD_ADDR_OWVAR 37
5058: PUSH
5059: LD_INT 14
5061: ST_TO_ADDR
// vc_engine = 3 ;
5062: LD_ADDR_OWVAR 39
5066: PUSH
5067: LD_INT 3
5069: ST_TO_ADDR
// vc_control = 1 ;
5070: LD_ADDR_OWVAR 38
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5078: LD_ADDR_OWVAR 40
5082: PUSH
5083: LD_INT 27
5085: PUSH
5086: LD_INT 26
5088: PUSH
5089: LD_INT 28
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: LIST
5096: PUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_INT 3
5102: PPUSH
5103: CALL_OW 12
5107: ARRAY
5108: ST_TO_ADDR
// veh = CreateVehicle ;
5109: LD_ADDR_VAR 0 4
5113: PUSH
5114: CALL_OW 45
5118: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5119: LD_VAR 0 4
5123: PPUSH
5124: LD_INT 4
5126: PPUSH
5127: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5131: LD_VAR 0 4
5135: PPUSH
5136: LD_INT 4
5138: PPUSH
5139: LD_INT 0
5141: PPUSH
5142: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5146: LD_EXP 27
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: PUSH
5155: LD_EXP 27
5159: PUSH
5160: LD_INT 2
5162: EQUAL
5163: OR
5164: IFFALSE 5189
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
5166: LD_INT 0
5168: PPUSH
5169: LD_INT 3
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_INT 4
5177: PPUSH
5178: CALL_OW 12
5182: PPUSH
5183: CALL_OW 380
5187: GO 5210
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
5189: LD_INT 0
5191: PPUSH
5192: LD_INT 3
5194: PPUSH
5195: LD_INT 6
5197: PPUSH
5198: LD_INT 8
5200: PPUSH
5201: CALL_OW 12
5205: PPUSH
5206: CALL_OW 380
// un = CreateHuman ;
5210: LD_ADDR_VAR 0 3
5214: PUSH
5215: CALL_OW 44
5219: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5220: LD_VAR 0 3
5224: PPUSH
5225: LD_VAR 0 4
5229: PPUSH
5230: CALL_OW 52
// vc_chassis = 14 ;
5234: LD_ADDR_OWVAR 37
5238: PUSH
5239: LD_INT 14
5241: ST_TO_ADDR
// vc_engine = 3 ;
5242: LD_ADDR_OWVAR 39
5246: PUSH
5247: LD_INT 3
5249: ST_TO_ADDR
// vc_control = 1 ;
5250: LD_ADDR_OWVAR 38
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5258: LD_ADDR_OWVAR 40
5262: PUSH
5263: LD_INT 27
5265: PUSH
5266: LD_INT 26
5268: PUSH
5269: LD_INT 28
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 1
5279: PPUSH
5280: LD_INT 3
5282: PPUSH
5283: CALL_OW 12
5287: ARRAY
5288: ST_TO_ADDR
// veh = CreateVehicle ;
5289: LD_ADDR_VAR 0 4
5293: PUSH
5294: CALL_OW 45
5298: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5299: LD_VAR 0 4
5303: PPUSH
5304: LD_INT 4
5306: PPUSH
5307: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5311: LD_VAR 0 4
5315: PPUSH
5316: LD_INT 4
5318: PPUSH
5319: LD_INT 0
5321: PPUSH
5322: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5326: LD_EXP 27
5330: PUSH
5331: LD_INT 0
5333: EQUAL
5334: PUSH
5335: LD_EXP 27
5339: PUSH
5340: LD_INT 2
5342: EQUAL
5343: OR
5344: IFFALSE 5369
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
5346: LD_INT 0
5348: PPUSH
5349: LD_INT 4
5351: PPUSH
5352: LD_INT 2
5354: PPUSH
5355: LD_INT 4
5357: PPUSH
5358: CALL_OW 12
5362: PPUSH
5363: CALL_OW 380
5367: GO 5390
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 4
5374: PPUSH
5375: LD_INT 6
5377: PPUSH
5378: LD_INT 8
5380: PPUSH
5381: CALL_OW 12
5385: PPUSH
5386: CALL_OW 380
// un = CreateHuman ;
5390: LD_ADDR_VAR 0 3
5394: PUSH
5395: CALL_OW 44
5399: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5400: LD_VAR 0 3
5404: PPUSH
5405: LD_INT 4
5407: PPUSH
5408: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: LD_VAR 0 4
5421: PPUSH
5422: CALL_OW 52
// vc_chassis = 14 ;
5426: LD_ADDR_OWVAR 37
5430: PUSH
5431: LD_INT 14
5433: ST_TO_ADDR
// vc_engine = 3 ;
5434: LD_ADDR_OWVAR 39
5438: PUSH
5439: LD_INT 3
5441: ST_TO_ADDR
// vc_control = 1 ;
5442: LD_ADDR_OWVAR 38
5446: PUSH
5447: LD_INT 1
5449: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5450: LD_ADDR_OWVAR 40
5454: PUSH
5455: LD_INT 27
5457: PUSH
5458: LD_INT 26
5460: PUSH
5461: LD_INT 28
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 1
5471: PPUSH
5472: LD_INT 3
5474: PPUSH
5475: CALL_OW 12
5479: ARRAY
5480: ST_TO_ADDR
// veh = CreateVehicle ;
5481: LD_ADDR_VAR 0 4
5485: PUSH
5486: CALL_OW 45
5490: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5491: LD_VAR 0 4
5495: PPUSH
5496: LD_INT 4
5498: PPUSH
5499: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5503: LD_VAR 0 4
5507: PPUSH
5508: LD_INT 4
5510: PPUSH
5511: LD_INT 0
5513: PPUSH
5514: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5518: LD_EXP 27
5522: PUSH
5523: LD_INT 0
5525: EQUAL
5526: PUSH
5527: LD_EXP 27
5531: PUSH
5532: LD_INT 2
5534: EQUAL
5535: OR
5536: IFFALSE 5561
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
5538: LD_INT 0
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: LD_INT 2
5546: PPUSH
5547: LD_INT 4
5549: PPUSH
5550: CALL_OW 12
5554: PPUSH
5555: CALL_OW 380
5559: GO 5582
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
5561: LD_INT 0
5563: PPUSH
5564: LD_INT 2
5566: PPUSH
5567: LD_INT 6
5569: PPUSH
5570: LD_INT 8
5572: PPUSH
5573: CALL_OW 12
5577: PPUSH
5578: CALL_OW 380
// un = CreateHuman ;
5582: LD_ADDR_VAR 0 3
5586: PUSH
5587: CALL_OW 44
5591: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5592: LD_VAR 0 3
5596: PPUSH
5597: LD_INT 4
5599: PPUSH
5600: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5604: LD_VAR 0 3
5608: PPUSH
5609: LD_VAR 0 4
5613: PPUSH
5614: CALL_OW 52
// end ;
5618: LD_VAR 0 1
5622: RET
// export function PrepareAttackLegion ; var i , un ; begin
5623: LD_INT 0
5625: PPUSH
5626: PPUSH
5627: PPUSH
// for i = 1 to 4 do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_INT 4
5640: PUSH
5641: FOR_TO
5642: IFFALSE 5743
// begin uc_side = 1 ;
5644: LD_ADDR_OWVAR 20
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// uc_nation = 2 ;
5652: LD_ADDR_OWVAR 21
5656: PUSH
5657: LD_INT 2
5659: ST_TO_ADDR
// hc_gallery =  ;
5660: LD_ADDR_OWVAR 33
5664: PUSH
5665: LD_STRING 
5667: ST_TO_ADDR
// hc_name =  ;
5668: LD_ADDR_OWVAR 26
5672: PUSH
5673: LD_STRING 
5675: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5676: LD_INT 0
5678: PPUSH
5679: LD_INT 1
5681: PUSH
5682: LD_INT 8
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 6
5703: PPUSH
5704: LD_INT 8
5706: PPUSH
5707: CALL_OW 12
5711: PPUSH
5712: CALL_OW 380
// un = CreateHuman ;
5716: LD_ADDR_VAR 0 3
5720: PUSH
5721: CALL_OW 44
5725: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5726: LD_VAR 0 3
5730: PPUSH
5731: LD_INT 19
5733: PPUSH
5734: LD_INT 0
5736: PPUSH
5737: CALL_OW 49
// end ;
5741: GO 5641
5743: POP
5744: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5745: LD_INT 1
5747: PPUSH
5748: LD_INT 8
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_INT 1
5756: PPUSH
5757: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5761: LD_INT 20
5763: PPUSH
5764: LD_INT 3
5766: PPUSH
5767: CALL 15794 0 2
// end ; end_of_file
5771: LD_VAR 0 1
5775: RET
// every 1 do var i ;
5776: GO 5778
5778: DISABLE
5779: LD_INT 0
5781: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5782: LD_INT 10
5784: PPUSH
5785: LD_INT 122
5787: PPUSH
5788: LD_INT 145
5790: PPUSH
5791: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5795: LD_INT 137
5797: PPUSH
5798: LD_INT 84
5800: PPUSH
5801: LD_INT 61
5803: PPUSH
5804: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5808: LD_EXP 1
5812: PPUSH
5813: CALL_OW 310
5817: PPUSH
5818: CALL_OW 87
// InGameOn ;
5822: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5826: LD_INT 22
5828: PUSH
5829: LD_INT 1
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PPUSH
5836: CALL_OW 69
5840: PPUSH
5841: LD_INT 130
5843: PPUSH
5844: LD_INT 103
5846: PPUSH
5847: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5851: LD_VAR 0 1
5855: PPUSH
5856: LD_INT 114
5858: PPUSH
5859: LD_INT 102
5861: PPUSH
5862: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_STRING D1-JMM-1
5873: PPUSH
5874: CALL_OW 88
// if IsOk ( Donaldson ) then
5878: LD_EXP 3
5882: PPUSH
5883: CALL_OW 302
5887: IFFALSE 5925
// begin Say ( Donaldson , D1-Don-1 ) ;
5889: LD_EXP 3
5893: PPUSH
5894: LD_STRING D1-Don-1
5896: PPUSH
5897: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5901: LD_EXP 1
5905: PPUSH
5906: LD_STRING D1-JMM-2
5908: PPUSH
5909: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5913: LD_EXP 3
5917: PPUSH
5918: LD_STRING D1-Don-2
5920: PPUSH
5921: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PPUSH
5935: CALL_OW 69
5939: PPUSH
5940: LD_INT 110
5942: PPUSH
5943: LD_INT 101
5945: PPUSH
5946: CALL_OW 171
// end ;
5950: PPOPN 1
5952: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5953: LD_INT 1
5955: PPUSH
5956: LD_INT 102
5958: PPUSH
5959: LD_INT 94
5961: PPUSH
5962: CALL_OW 293
5966: IFFALSE 6141
5968: GO 5970
5970: DISABLE
5971: LD_INT 0
5973: PPUSH
// begin CenterOnXY ( 95 , 84 ) ;
5974: LD_INT 95
5976: PPUSH
5977: LD_INT 84
5979: PPUSH
5980: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
5984: LD_INT 22
5986: PUSH
5987: LD_INT 1
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PUSH
5994: LD_INT 26
5996: PUSH
5997: LD_INT 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 2
6006: PUSH
6007: LD_INT 25
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 25
6019: PUSH
6020: LD_INT 2
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 25
6029: PUSH
6030: LD_INT 3
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 25
6039: PUSH
6040: LD_INT 4
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_EXP 1
6063: DIFF
6064: PPUSH
6065: CALL_OW 69
6069: PPUSH
6070: LD_STRING D1-Sol1-2
6072: PPUSH
6073: LD_STRING 
6075: PPUSH
6076: CALL 12986 0 3
// Say ( JMM , D1-JMM-3 ) ;
6080: LD_EXP 1
6084: PPUSH
6085: LD_STRING D1-JMM-3
6087: PPUSH
6088: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6092: LD_STRING M1
6094: PPUSH
6095: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6099: LD_ADDR_VAR 0 1
6103: PUSH
6104: LD_INT 22
6106: PUSH
6107: LD_INT 1
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PPUSH
6114: CALL_OW 69
6118: PUSH
6119: FOR_IN
6120: IFFALSE 6139
// ComMoveXY ( i , 95 , 84 ) ;
6122: LD_VAR 0 1
6126: PPUSH
6127: LD_INT 95
6129: PPUSH
6130: LD_INT 84
6132: PPUSH
6133: CALL_OW 111
6137: GO 6119
6139: POP
6140: POP
// end ;
6141: PPOPN 1
6143: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
6151: PPUSH
6152: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_INT 8
6160: PPUSH
6161: LD_INT 22
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 9
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PPUSH
6185: CALL_OW 70
6189: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6190: LD_ADDR_VAR 0 3
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: PPUSH
6208: CALL_OW 69
6212: ST_TO_ADDR
// enable ;
6213: ENABLE
// for i in your_units do
6214: LD_ADDR_VAR 0 1
6218: PUSH
6219: LD_VAR 0 3
6223: PUSH
6224: FOR_IN
6225: IFFALSE 6860
// begin if See ( 3 , i ) then
6227: LD_INT 3
6229: PPUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 292
6239: IFFALSE 6858
// begin disable ;
6241: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6242: LD_VAR 0 2
6246: PPUSH
6247: LD_INT 96
6249: PPUSH
6250: LD_INT 85
6252: PPUSH
6253: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6257: LD_VAR 0 2
6261: PPUSH
6262: LD_INT 96
6264: PPUSH
6265: LD_INT 85
6267: PPUSH
6268: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6272: LD_VAR 0 2
6276: PPUSH
6277: LD_INT 96
6279: PPUSH
6280: LD_INT 85
6282: PPUSH
6283: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 96
6294: PPUSH
6295: LD_INT 85
6297: PPUSH
6298: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6302: LD_VAR 0 2
6306: PPUSH
6307: LD_INT 96
6309: PPUSH
6310: LD_INT 85
6312: PPUSH
6313: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_INT 96
6324: PPUSH
6325: LD_INT 85
6327: PPUSH
6328: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
6332: LD_EXP 1
6336: PPUSH
6337: LD_STRING D1a-JMM-1
6339: PPUSH
6340: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6344: LD_EXP 3
6348: PPUSH
6349: LD_STRING D1a-Don-1
6351: PPUSH
6352: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6356: LD_ADDR_VAR 0 1
6360: PUSH
6361: LD_INT 22
6363: PUSH
6364: LD_INT 1
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 69
6375: PUSH
6376: FOR_IN
6377: IFFALSE 6396
// ComMoveXY ( i , 109 , 102 ) ;
6379: LD_VAR 0 1
6383: PPUSH
6384: LD_INT 109
6386: PPUSH
6387: LD_INT 102
6389: PPUSH
6390: CALL_OW 111
6394: GO 6376
6396: POP
6397: POP
// Say ( JMM , D1a-JMM-2 ) ;
6398: LD_EXP 1
6402: PPUSH
6403: LD_STRING D1a-JMM-2
6405: PPUSH
6406: CALL_OW 88
// wait ( 0 0$10 ) ;
6410: LD_INT 350
6412: PPUSH
6413: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6417: LD_EXP 1
6421: PPUSH
6422: CALL_OW 310
6426: PPUSH
6427: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6431: LD_EXP 3
6435: PPUSH
6436: LD_STRING D1b-Don-1
6438: PPUSH
6439: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D1b-JMM-1
6450: PPUSH
6451: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
6455: LD_INT 22
6457: PUSH
6458: LD_INT 1
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 26
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: LD_INT 25
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 25
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 25
6510: PUSH
6511: LD_INT 4
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: LIST
6529: PUSH
6530: LD_EXP 1
6534: PUSH
6535: EMPTY
6536: LIST
6537: DIFF
6538: PPUSH
6539: CALL_OW 69
6543: PPUSH
6544: LD_STRING D1b-Sol1-1
6546: PPUSH
6547: LD_STRING 
6549: PPUSH
6550: CALL 12986 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6554: LD_EXP 3
6558: PPUSH
6559: LD_STRING D1b-Don-2
6561: PPUSH
6562: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6566: LD_EXP 1
6570: PPUSH
6571: LD_STRING D1b-JMM-2
6573: PPUSH
6574: CALL_OW 88
// dec = ShowQuery1 ;
6578: LD_ADDR_VAR 0 4
6582: PUSH
6583: CALL 13522 0 0
6587: ST_TO_ADDR
// if dec = 1 then
6588: LD_VAR 0 4
6592: PUSH
6593: LD_INT 1
6595: EQUAL
6596: IFFALSE 6702
// begin Say ( JMM , D2-JMM-1 ) ;
6598: LD_EXP 1
6602: PPUSH
6603: LD_STRING D2-JMM-1
6605: PPUSH
6606: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6610: LD_EXP 22
6614: PPUSH
6615: LD_STRING D2-Pow-1
6617: PPUSH
6618: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6622: LD_EXP 1
6626: PPUSH
6627: LD_STRING D2a-JMM-1
6629: PPUSH
6630: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6634: LD_EXP 22
6638: PPUSH
6639: LD_STRING D2a-Pow-1
6641: PPUSH
6642: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6646: LD_EXP 1
6650: PPUSH
6651: LD_STRING D2a-JMM-2
6653: PPUSH
6654: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6658: LD_EXP 22
6662: PPUSH
6663: LD_STRING D2a-Pow-2
6665: PPUSH
6666: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6670: LD_EXP 1
6674: PPUSH
6675: LD_STRING D2a-JMM-3
6677: PPUSH
6678: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6682: LD_EXP 22
6686: PPUSH
6687: LD_STRING D2a-Pow-3
6689: PPUSH
6690: CALL_OW 94
// secondPass = 2 ;
6694: LD_ADDR_EXP 28
6698: PUSH
6699: LD_INT 2
6701: ST_TO_ADDR
// end ; if dec = 2 then
6702: LD_VAR 0 4
6706: PUSH
6707: LD_INT 2
6709: EQUAL
6710: IFFALSE 6804
// begin Say ( JMM , D2-JMM-1 ) ;
6712: LD_EXP 1
6716: PPUSH
6717: LD_STRING D2-JMM-1
6719: PPUSH
6720: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6724: LD_EXP 22
6728: PPUSH
6729: LD_STRING D2-Pow-1
6731: PPUSH
6732: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6736: LD_EXP 1
6740: PPUSH
6741: LD_STRING D2b-JMM-1
6743: PPUSH
6744: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6748: LD_EXP 22
6752: PPUSH
6753: LD_STRING D2b-Pow-1
6755: PPUSH
6756: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6760: LD_EXP 1
6764: PPUSH
6765: LD_STRING D2c-JMM-1
6767: PPUSH
6768: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6772: LD_EXP 22
6776: PPUSH
6777: LD_STRING D2c-Pow-1
6779: PPUSH
6780: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6784: LD_EXP 1
6788: PPUSH
6789: LD_STRING D2c-JMM-2
6791: PPUSH
6792: CALL_OW 88
// secondPass = 2 ;
6796: LD_ADDR_EXP 28
6800: PUSH
6801: LD_INT 2
6803: ST_TO_ADDR
// end ; if dec = 3 then
6804: LD_VAR 0 4
6808: PUSH
6809: LD_INT 3
6811: EQUAL
6812: IFFALSE 6822
// secondPass = 1 ;
6814: LD_ADDR_EXP 28
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// InGameOff ;
6822: CALL_OW 9
// ruAI = 1 ;
6826: LD_ADDR_EXP 41
6830: PUSH
6831: LD_INT 1
6833: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 3
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: LD_INT 1
6845: PPUSH
6846: CALL_OW 80
// SaveForQuickRestart ;
6850: CALL_OW 22
// exit ;
6854: POP
6855: POP
6856: GO 6862
// end ; end ;
6858: GO 6224
6860: POP
6861: POP
// end ;
6862: PPOPN 4
6864: END
// every 1 1$0 trigger secondPass = 2 do
6865: LD_EXP 28
6869: PUSH
6870: LD_INT 2
6872: EQUAL
6873: IFFALSE 7000
6875: GO 6877
6877: DISABLE
// begin PowellSupport1 ;
6878: CALL 2117 0 0
// DialogueOn ;
6882: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6886: LD_EXP 1
6890: PPUSH
6891: LD_STRING DC1-JMM-1
6893: PPUSH
6894: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6898: LD_EXP 22
6902: PPUSH
6903: LD_STRING DC1-Pow-1
6905: PPUSH
6906: CALL_OW 94
// DialogueOff ;
6910: CALL_OW 7
// wait ( 3 3$0 ) ;
6914: LD_INT 6300
6916: PPUSH
6917: CALL_OW 67
// PowellSupport2 ;
6921: CALL 2692 0 0
// DialogueOn ;
6925: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6929: LD_EXP 1
6933: PPUSH
6934: LD_STRING DC2-JMM-1
6936: PPUSH
6937: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6941: LD_EXP 22
6945: PPUSH
6946: LD_STRING DC2-Pow-1
6948: PPUSH
6949: CALL_OW 94
// DialogueOff ;
6953: CALL_OW 7
// wait ( 6 6$0 ) ;
6957: LD_INT 12600
6959: PPUSH
6960: CALL_OW 67
// PowellSupport3 ;
6964: CALL 3284 0 0
// DialogueOn ;
6968: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6972: LD_EXP 22
6976: PPUSH
6977: LD_STRING DC3-Pow-1
6979: PPUSH
6980: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6984: LD_EXP 1
6988: PPUSH
6989: LD_STRING DC3-JMM-1
6991: PPUSH
6992: CALL_OW 88
// DialogueOff ;
6996: CALL_OW 7
// end ;
7000: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
7001: LD_EXP 28
7005: PUSH
7006: LD_INT 2
7008: EQUAL
7009: PUSH
7010: LD_INT 22
7012: PUSH
7013: LD_INT 1
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 2
7022: PUSH
7023: LD_INT 30
7025: PUSH
7026: LD_INT 0
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 1
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PPUSH
7052: CALL_OW 69
7056: PUSH
7057: LD_INT 0
7059: GREATER
7060: AND
7061: IFFALSE 10451
7063: GO 7065
7065: DISABLE
7066: LD_INT 0
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
7072: PPUSH
7073: PPUSH
7074: PPUSH
7075: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7076: LD_ADDR_VAR 0 4
7080: PUSH
7081: LD_INT 22
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 21
7093: PUSH
7094: LD_INT 3
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 30
7106: PUSH
7107: LD_INT 0
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: LIST
7133: PPUSH
7134: CALL_OW 69
7138: ST_TO_ADDR
// for i in tmp do
7139: LD_ADDR_VAR 0 1
7143: PUSH
7144: LD_VAR 0 4
7148: PUSH
7149: FOR_IN
7150: IFFALSE 7183
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7152: LD_ADDR_VAR 0 6
7156: PUSH
7157: LD_VAR 0 6
7161: PUSH
7162: LD_VAR 0 1
7166: PPUSH
7167: CALL_OW 274
7171: PPUSH
7172: LD_INT 1
7174: PPUSH
7175: CALL_OW 275
7179: PLUS
7180: ST_TO_ADDR
7181: GO 7149
7183: POP
7184: POP
// for i in tmp do
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_VAR 0 4
7194: PUSH
7195: FOR_IN
7196: IFFALSE 7229
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7198: LD_ADDR_VAR 0 7
7202: PUSH
7203: LD_VAR 0 7
7207: PUSH
7208: LD_VAR 0 1
7212: PPUSH
7213: CALL_OW 274
7217: PPUSH
7218: LD_INT 2
7220: PPUSH
7221: CALL_OW 275
7225: PLUS
7226: ST_TO_ADDR
7227: GO 7195
7229: POP
7230: POP
// for i in tmp do
7231: LD_ADDR_VAR 0 1
7235: PUSH
7236: LD_VAR 0 4
7240: PUSH
7241: FOR_IN
7242: IFFALSE 7275
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7244: LD_ADDR_VAR 0 8
7248: PUSH
7249: LD_VAR 0 8
7253: PUSH
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 274
7263: PPUSH
7264: LD_INT 3
7266: PPUSH
7267: CALL_OW 275
7271: PLUS
7272: ST_TO_ADDR
7273: GO 7241
7275: POP
7276: POP
// PrepareKurt ;
7277: CALL 4711 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7281: LD_EXP 26
7285: PPUSH
7286: LD_INT 144
7288: PPUSH
7289: LD_INT 111
7291: PPUSH
7292: CALL_OW 111
// wait ( 0 0$2 ) ;
7296: LD_INT 70
7298: PPUSH
7299: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
7303: LD_INT 8
7305: PPUSH
7306: LD_INT 1
7308: PPUSH
7309: CALL_OW 343
// if kurtStatus > 0 then
7313: LD_EXP 27
7317: PUSH
7318: LD_INT 0
7320: GREATER
7321: IFFALSE 8883
// begin ComExitVehicle ( Kurt ) ;
7323: LD_EXP 24
7327: PPUSH
7328: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7332: LD_EXP 24
7336: PPUSH
7337: CALL_OW 87
// wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// DialogueOn ;
7348: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
7352: LD_INT 22
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 26
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: LD_INT 25
7377: PUSH
7378: LD_INT 1
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 25
7387: PUSH
7388: LD_INT 2
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 25
7397: PUSH
7398: LD_INT 3
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 25
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_EXP 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: DIFF
7435: PPUSH
7436: CALL_OW 69
7440: PPUSH
7441: LD_STRING D3-Sol1-1
7443: PPUSH
7444: LD_STRING 
7446: PPUSH
7447: CALL 12986 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7451: LD_EXP 24
7455: PPUSH
7456: LD_STRING D3-Kurt-1
7458: PPUSH
7459: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7463: LD_EXP 1
7467: PPUSH
7468: LD_STRING D3-JMM-1
7470: PPUSH
7471: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7475: LD_EXP 24
7479: PPUSH
7480: LD_STRING D3-Kurt-2
7482: PPUSH
7483: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7487: LD_EXP 1
7491: PPUSH
7492: LD_STRING D3-JMM-2
7494: PPUSH
7495: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7499: LD_EXP 24
7503: PPUSH
7504: LD_STRING D3-Kurt-4
7506: PPUSH
7507: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7511: LD_EXP 1
7515: PPUSH
7516: LD_STRING D3-JMM-4
7518: PPUSH
7519: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7523: LD_EXP 24
7527: PPUSH
7528: LD_STRING D3-Kurt-5
7530: PPUSH
7531: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7535: LD_EXP 24
7539: PPUSH
7540: LD_STRING D3-Kurt-5a
7542: PPUSH
7543: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7547: LD_EXP 24
7551: PPUSH
7552: LD_STRING D3-Kurt-5b
7554: PPUSH
7555: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7559: LD_VAR 0 6
7563: PUSH
7564: LD_INT 60
7566: GREATEREQUAL
7567: PUSH
7568: LD_VAR 0 8
7572: PUSH
7573: LD_INT 60
7575: GREATEREQUAL
7576: AND
7577: IFFALSE 7612
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7579: LD_ADDR_VAR 0 2
7583: PUSH
7584: LD_STRING Q2K
7586: PPUSH
7587: LD_INT 1
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 3
7595: PUSH
7596: LD_INT 4
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
7610: GO 7635
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7612: LD_ADDR_VAR 0 2
7616: PUSH
7617: LD_STRING Q2K
7619: PPUSH
7620: LD_INT 3
7622: PUSH
7623: LD_INT 4
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PPUSH
7630: CALL_OW 98
7634: ST_TO_ADDR
// if dec1 = 1 then
7635: LD_VAR 0 2
7639: PUSH
7640: LD_INT 1
7642: EQUAL
7643: IFFALSE 7677
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7645: LD_EXP 1
7649: PPUSH
7650: LD_STRING D3Ka-JMM-1
7652: PPUSH
7653: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7657: LD_EXP 24
7661: PPUSH
7662: LD_STRING D3Ka-Kurt-1
7664: PPUSH
7665: CALL_OW 88
// warWithLegion = 1 ;
7669: LD_ADDR_EXP 30
7673: PUSH
7674: LD_INT 1
7676: ST_TO_ADDR
// end ; if dec1 = 2 then
7677: LD_VAR 0 2
7681: PUSH
7682: LD_INT 2
7684: EQUAL
7685: IFFALSE 7911
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7687: LD_EXP 1
7691: PPUSH
7692: LD_STRING D3Kb-JMM-1
7694: PPUSH
7695: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7699: LD_EXP 24
7703: PPUSH
7704: LD_STRING D3Kb-Kurt-1
7706: PPUSH
7707: CALL_OW 88
// for i in tmp do
7711: LD_ADDR_VAR 0 1
7715: PUSH
7716: LD_VAR 0 4
7720: PUSH
7721: FOR_IN
7722: IFFALSE 7809
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7724: LD_ADDR_VAR 0 5
7728: PUSH
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 274
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: CALL_OW 275
7746: ST_TO_ADDR
// if tmp2 >= 60 then
7747: LD_VAR 0 5
7751: PUSH
7752: LD_INT 60
7754: GREATEREQUAL
7755: IFFALSE 7787
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7757: LD_VAR 0 1
7761: PPUSH
7762: CALL_OW 274
7766: PPUSH
7767: LD_INT 1
7769: PPUSH
7770: LD_VAR 0 5
7774: PUSH
7775: LD_INT 60
7777: MINUS
7778: PPUSH
7779: CALL_OW 277
// break ;
7783: GO 7809
// end else
7785: GO 7807
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 274
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 0
7802: PPUSH
7803: CALL_OW 277
// end ; end ;
7807: GO 7721
7809: POP
7810: POP
// for i in tmp do
7811: LD_ADDR_VAR 0 1
7815: PUSH
7816: LD_VAR 0 4
7820: PUSH
7821: FOR_IN
7822: IFFALSE 7909
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: LD_VAR 0 1
7833: PPUSH
7834: CALL_OW 274
7838: PPUSH
7839: LD_INT 3
7841: PPUSH
7842: CALL_OW 275
7846: ST_TO_ADDR
// if tmp2 >= 60 then
7847: LD_VAR 0 5
7851: PUSH
7852: LD_INT 60
7854: GREATEREQUAL
7855: IFFALSE 7887
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 274
7866: PPUSH
7867: LD_INT 3
7869: PPUSH
7870: LD_VAR 0 5
7874: PUSH
7875: LD_INT 60
7877: MINUS
7878: PPUSH
7879: CALL_OW 277
// break ;
7883: GO 7909
// end else
7885: GO 7907
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7887: LD_VAR 0 1
7891: PPUSH
7892: CALL_OW 274
7896: PPUSH
7897: LD_INT 3
7899: PPUSH
7900: LD_INT 0
7902: PPUSH
7903: CALL_OW 277
// end ; end ;
7907: GO 7821
7909: POP
7910: POP
// end ; if dec1 = 3 then
7911: LD_VAR 0 2
7915: PUSH
7916: LD_INT 3
7918: EQUAL
7919: IFFALSE 8154
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7921: LD_EXP 1
7925: PPUSH
7926: LD_STRING D3Kc1-JMM-1
7928: PPUSH
7929: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7933: LD_EXP 24
7937: PPUSH
7938: LD_STRING D3Kc1-Kurt-1
7940: PPUSH
7941: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7945: LD_EXP 1
7949: PPUSH
7950: LD_STRING D3Kc1-JMM-2
7952: PPUSH
7953: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7957: LD_EXP 24
7961: PPUSH
7962: LD_STRING D3Kc1-Kurt-2
7964: PPUSH
7965: CALL_OW 88
// askSiberite = 1 ;
7969: LD_ADDR_EXP 32
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7977: LD_ADDR_VAR 0 2
7981: PUSH
7982: LD_STRING Q2b
7984: PPUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: LD_INT 3
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: PPUSH
7999: CALL_OW 98
8003: ST_TO_ADDR
// if dec2 = 1 then
8004: LD_VAR 0 3
8008: PUSH
8009: LD_INT 1
8011: EQUAL
8012: IFFALSE 8046
// begin Say ( JMM , D4a-JMM-1 ) ;
8014: LD_EXP 1
8018: PPUSH
8019: LD_STRING D4a-JMM-1
8021: PPUSH
8022: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8026: LD_EXP 24
8030: PPUSH
8031: LD_STRING D4b-Kurt-1
8033: PPUSH
8034: CALL_OW 88
// warWithLegion = 1 ;
8038: LD_ADDR_EXP 30
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// end ; if dec2 = 2 then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 2
8053: EQUAL
8054: IFFALSE 8088
// begin Say ( JMM , D4b-JMM-1 ) ;
8056: LD_EXP 1
8060: PPUSH
8061: LD_STRING D4b-JMM-1
8063: PPUSH
8064: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8068: LD_EXP 24
8072: PPUSH
8073: LD_STRING D4b-Kurt-1
8075: PPUSH
8076: CALL_OW 88
// warWithLegion = 1 ;
8080: LD_ADDR_EXP 30
8084: PUSH
8085: LD_INT 1
8087: ST_TO_ADDR
// end ; if dec2 = 3 then
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 3
8095: EQUAL
8096: IFFALSE 8154
// begin Say ( JMM , D4c-JMM-1 ) ;
8098: LD_EXP 1
8102: PPUSH
8103: LD_STRING D4c-JMM-1
8105: PPUSH
8106: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8110: LD_EXP 24
8114: PPUSH
8115: LD_STRING D4c-Kurt-1
8117: PPUSH
8118: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8122: LD_EXP 1
8126: PPUSH
8127: LD_STRING D4c-JMM-2
8129: PPUSH
8130: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8134: LD_EXP 24
8138: PPUSH
8139: LD_STRING D4c-Kurt-2
8141: PPUSH
8142: CALL_OW 88
// fakeInfo = 1 ;
8146: LD_ADDR_EXP 31
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8154: LD_VAR 0 2
8158: PUSH
8159: LD_INT 4
8161: EQUAL
8162: IFFALSE 8819
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8164: LD_EXP 1
8168: PPUSH
8169: LD_STRING D3Kd-JMM-1
8171: PPUSH
8172: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
8176: LD_VAR 0 6
8180: PUSH
8181: LD_INT 120
8183: GREATEREQUAL
8184: PUSH
8185: LD_VAR 0 8
8189: PUSH
8190: LD_INT 120
8192: GREATEREQUAL
8193: AND
8194: IFFALSE 8229
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
8196: LD_ADDR_VAR 0 3
8200: PUSH
8201: LD_STRING Q2aK
8203: PPUSH
8204: LD_INT 1
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: LD_INT 3
8212: PUSH
8213: LD_INT 4
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PPUSH
8222: CALL_OW 98
8226: ST_TO_ADDR
8227: GO 8252
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
8229: LD_ADDR_VAR 0 3
8233: PUSH
8234: LD_STRING Q2K
8236: PPUSH
8237: LD_INT 1
8239: PUSH
8240: LD_INT 4
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PPUSH
8247: CALL_OW 98
8251: ST_TO_ADDR
// if dec2 = 1 then
8252: LD_VAR 0 3
8256: PUSH
8257: LD_INT 1
8259: EQUAL
8260: IFFALSE 8294
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8262: LD_EXP 1
8266: PPUSH
8267: LD_STRING D5Ka-JMM-1
8269: PPUSH
8270: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8274: LD_EXP 24
8278: PPUSH
8279: LD_STRING D5Ka-Kurt-1
8281: PPUSH
8282: CALL_OW 88
// warWithLegion = 1 ;
8286: LD_ADDR_EXP 30
8290: PUSH
8291: LD_INT 1
8293: ST_TO_ADDR
// end ; if dec2 = 2 then
8294: LD_VAR 0 3
8298: PUSH
8299: LD_INT 2
8301: EQUAL
8302: IFFALSE 8328
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8304: LD_EXP 1
8308: PPUSH
8309: LD_STRING D3Kb-JMM-1
8311: PPUSH
8312: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8316: LD_EXP 24
8320: PPUSH
8321: LD_STRING D3Kb-Kurt-1
8323: PPUSH
8324: CALL_OW 88
// end ; if dec2 = 3 then
8328: LD_VAR 0 3
8332: PUSH
8333: LD_INT 3
8335: EQUAL
8336: IFFALSE 8566
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8338: LD_EXP 1
8342: PPUSH
8343: LD_STRING D3Ke-JMM-1
8345: PPUSH
8346: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8350: LD_EXP 24
8354: PPUSH
8355: LD_STRING D3Ke-Kurt-1
8357: PPUSH
8358: CALL_OW 88
// PrepareLegionForPlayer ;
8362: CALL 4895 0 0
// for i in tmp do
8366: LD_ADDR_VAR 0 1
8370: PUSH
8371: LD_VAR 0 4
8375: PUSH
8376: FOR_IN
8377: IFFALSE 8464
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8379: LD_ADDR_VAR 0 5
8383: PUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL_OW 274
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: CALL_OW 275
8401: ST_TO_ADDR
// if tmp2 >= 120 then
8402: LD_VAR 0 5
8406: PUSH
8407: LD_INT 120
8409: GREATEREQUAL
8410: IFFALSE 8442
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8412: LD_VAR 0 1
8416: PPUSH
8417: CALL_OW 274
8421: PPUSH
8422: LD_INT 1
8424: PPUSH
8425: LD_VAR 0 5
8429: PUSH
8430: LD_INT 120
8432: MINUS
8433: PPUSH
8434: CALL_OW 277
// break ;
8438: GO 8464
// end else
8440: GO 8462
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8442: LD_VAR 0 1
8446: PPUSH
8447: CALL_OW 274
8451: PPUSH
8452: LD_INT 1
8454: PPUSH
8455: LD_INT 0
8457: PPUSH
8458: CALL_OW 277
// end ; end ;
8462: GO 8376
8464: POP
8465: POP
// for i in tmp do
8466: LD_ADDR_VAR 0 1
8470: PUSH
8471: LD_VAR 0 4
8475: PUSH
8476: FOR_IN
8477: IFFALSE 8564
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8479: LD_ADDR_VAR 0 5
8483: PUSH
8484: LD_VAR 0 1
8488: PPUSH
8489: CALL_OW 274
8493: PPUSH
8494: LD_INT 3
8496: PPUSH
8497: CALL_OW 275
8501: ST_TO_ADDR
// if tmp2 >= 120 then
8502: LD_VAR 0 5
8506: PUSH
8507: LD_INT 120
8509: GREATEREQUAL
8510: IFFALSE 8542
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 274
8521: PPUSH
8522: LD_INT 3
8524: PPUSH
8525: LD_VAR 0 5
8529: PUSH
8530: LD_INT 120
8532: MINUS
8533: PPUSH
8534: CALL_OW 277
// break ;
8538: GO 8564
// end else
8540: GO 8562
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8542: LD_VAR 0 1
8546: PPUSH
8547: CALL_OW 274
8551: PPUSH
8552: LD_INT 3
8554: PPUSH
8555: LD_INT 0
8557: PPUSH
8558: CALL_OW 277
// end ; end ;
8562: GO 8476
8564: POP
8565: POP
// end ; if dec2 = 4 then
8566: LD_VAR 0 3
8570: PUSH
8571: LD_INT 4
8573: EQUAL
8574: IFFALSE 8819
// begin if dec1 = 3 then
8576: LD_VAR 0 2
8580: PUSH
8581: LD_INT 3
8583: EQUAL
8584: IFFALSE 8819
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8586: LD_EXP 1
8590: PPUSH
8591: LD_STRING D3Kc1-JMM-1
8593: PPUSH
8594: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8598: LD_EXP 24
8602: PPUSH
8603: LD_STRING D3Kc1-Kurt-1
8605: PPUSH
8606: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8610: LD_EXP 1
8614: PPUSH
8615: LD_STRING D3Kc1-JMM-2
8617: PPUSH
8618: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8622: LD_EXP 24
8626: PPUSH
8627: LD_STRING D3Kc1-Kurt-2
8629: PPUSH
8630: CALL_OW 88
// askSiberite = 1 ;
8634: LD_ADDR_EXP 32
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8642: LD_ADDR_VAR 0 2
8646: PUSH
8647: LD_STRING Q2b
8649: PPUSH
8650: LD_INT 1
8652: PUSH
8653: LD_INT 2
8655: PUSH
8656: LD_INT 3
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 98
8668: ST_TO_ADDR
// if dec2 = 1 then
8669: LD_VAR 0 3
8673: PUSH
8674: LD_INT 1
8676: EQUAL
8677: IFFALSE 8711
// begin Say ( JMM , D4a-JMM-1 ) ;
8679: LD_EXP 1
8683: PPUSH
8684: LD_STRING D4a-JMM-1
8686: PPUSH
8687: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8691: LD_EXP 24
8695: PPUSH
8696: LD_STRING D4b-Kurt-1
8698: PPUSH
8699: CALL_OW 88
// warWithLegion = 1 ;
8703: LD_ADDR_EXP 30
8707: PUSH
8708: LD_INT 1
8710: ST_TO_ADDR
// end ; if dec2 = 2 then
8711: LD_VAR 0 3
8715: PUSH
8716: LD_INT 2
8718: EQUAL
8719: IFFALSE 8753
// begin Say ( JMM , D4b-JMM-1 ) ;
8721: LD_EXP 1
8725: PPUSH
8726: LD_STRING D4b-JMM-1
8728: PPUSH
8729: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8733: LD_EXP 24
8737: PPUSH
8738: LD_STRING D4b-Kurt-1
8740: PPUSH
8741: CALL_OW 88
// warWithLegion = 1 ;
8745: LD_ADDR_EXP 30
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// end ; if dec2 = 3 then
8753: LD_VAR 0 3
8757: PUSH
8758: LD_INT 3
8760: EQUAL
8761: IFFALSE 8819
// begin Say ( JMM , D4c-JMM-1 ) ;
8763: LD_EXP 1
8767: PPUSH
8768: LD_STRING D4c-JMM-1
8770: PPUSH
8771: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8775: LD_EXP 24
8779: PPUSH
8780: LD_STRING D4c-Kurt-1
8782: PPUSH
8783: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8787: LD_EXP 1
8791: PPUSH
8792: LD_STRING D4c-JMM-2
8794: PPUSH
8795: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8799: LD_EXP 24
8803: PPUSH
8804: LD_STRING D4c-Kurt-2
8806: PPUSH
8807: CALL_OW 88
// fakeInfo = 1 ;
8811: LD_ADDR_EXP 31
8815: PUSH
8816: LD_INT 1
8818: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8819: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8823: LD_EXP 24
8827: PPUSH
8828: LD_EXP 26
8832: PPUSH
8833: CALL_OW 120
// wait ( 0 0$1 ) ;
8837: LD_INT 35
8839: PPUSH
8840: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8844: LD_EXP 26
8848: PPUSH
8849: LD_INT 4
8851: PPUSH
8852: CALL_OW 113
// wait ( 0 0$3 ) ;
8856: LD_INT 105
8858: PPUSH
8859: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8863: LD_EXP 24
8867: PPUSH
8868: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8872: LD_EXP 26
8876: PPUSH
8877: CALL_OW 64
// end else
8881: GO 10451
// begin ComExitVehicle ( otherKurt ) ;
8883: LD_EXP 25
8887: PPUSH
8888: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8892: LD_EXP 25
8896: PPUSH
8897: CALL_OW 87
// wait ( 0 0$1 ) ;
8901: LD_INT 35
8903: PPUSH
8904: CALL_OW 67
// DialogueOn ;
8908: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
8912: LD_INT 22
8914: PUSH
8915: LD_INT 1
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 26
8924: PUSH
8925: LD_INT 1
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 2
8934: PUSH
8935: LD_INT 25
8937: PUSH
8938: LD_INT 1
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 25
8947: PUSH
8948: LD_INT 2
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: LD_INT 25
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 25
8967: PUSH
8968: LD_INT 4
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: LIST
8986: PUSH
8987: LD_EXP 1
8991: PUSH
8992: EMPTY
8993: LIST
8994: DIFF
8995: PPUSH
8996: CALL_OW 69
9000: PPUSH
9001: LD_STRING D3-Sol1-1
9003: PPUSH
9004: LD_STRING 
9006: PPUSH
9007: CALL 12986 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
9011: LD_EXP 25
9015: PPUSH
9016: LD_STRING D3-Kurt-1
9018: PPUSH
9019: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
9023: LD_EXP 1
9027: PPUSH
9028: LD_STRING D3-JMM-1
9030: PPUSH
9031: CALL_OW 88
// Say ( otherKurt , D3-Kurt-2 ) ;
9035: LD_EXP 25
9039: PPUSH
9040: LD_STRING D3-Kurt-2
9042: PPUSH
9043: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
9047: LD_EXP 1
9051: PPUSH
9052: LD_STRING D3-JMM-2
9054: PPUSH
9055: CALL_OW 88
// Say ( otherKurt , D3-Kurt-4 ) ;
9059: LD_EXP 25
9063: PPUSH
9064: LD_STRING D3-Kurt-4
9066: PPUSH
9067: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
9071: LD_EXP 1
9075: PPUSH
9076: LD_STRING D3-JMM-4
9078: PPUSH
9079: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
9083: LD_EXP 25
9087: PPUSH
9088: LD_STRING D3-Kurt-5
9090: PPUSH
9091: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5a ) ;
9095: LD_EXP 25
9099: PPUSH
9100: LD_STRING D3-Kurt-5a
9102: PPUSH
9103: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
9107: LD_EXP 25
9111: PPUSH
9112: LD_STRING D3-Kurt-5b
9114: PPUSH
9115: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
9119: LD_VAR 0 6
9123: PUSH
9124: LD_INT 100
9126: GREATEREQUAL
9127: PUSH
9128: LD_VAR 0 8
9132: PUSH
9133: LD_INT 100
9135: GREATEREQUAL
9136: AND
9137: IFFALSE 9172
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
9139: LD_ADDR_VAR 0 2
9143: PUSH
9144: LD_STRING Q2
9146: PPUSH
9147: LD_INT 1
9149: PUSH
9150: LD_INT 2
9152: PUSH
9153: LD_INT 3
9155: PUSH
9156: LD_INT 4
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 98
9169: ST_TO_ADDR
9170: GO 9195
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
9172: LD_ADDR_VAR 0 2
9176: PUSH
9177: LD_STRING Q2
9179: PPUSH
9180: LD_INT 3
9182: PUSH
9183: LD_INT 4
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PPUSH
9190: CALL_OW 98
9194: ST_TO_ADDR
// if dec1 = 1 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 1
9202: EQUAL
9203: IFFALSE 9237
// begin Say ( JMM , D3Ka-JMM-1 ) ;
9205: LD_EXP 1
9209: PPUSH
9210: LD_STRING D3Ka-JMM-1
9212: PPUSH
9213: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
9217: LD_EXP 25
9221: PPUSH
9222: LD_STRING D3Ka-Kurt-1
9224: PPUSH
9225: CALL_OW 88
// warWithLegion = 1 ;
9229: LD_ADDR_EXP 30
9233: PUSH
9234: LD_INT 1
9236: ST_TO_ADDR
// end ; if dec1 = 2 then
9237: LD_VAR 0 2
9241: PUSH
9242: LD_INT 2
9244: EQUAL
9245: IFFALSE 9471
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9247: LD_EXP 1
9251: PPUSH
9252: LD_STRING D3Kb-JMM-1
9254: PPUSH
9255: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9259: LD_EXP 25
9263: PPUSH
9264: LD_STRING D3Kb-Kurt-1
9266: PPUSH
9267: CALL_OW 88
// for i in tmp do
9271: LD_ADDR_VAR 0 1
9275: PUSH
9276: LD_VAR 0 4
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9369
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9284: LD_ADDR_VAR 0 5
9288: PUSH
9289: LD_VAR 0 1
9293: PPUSH
9294: CALL_OW 274
9298: PPUSH
9299: LD_INT 1
9301: PPUSH
9302: CALL_OW 275
9306: ST_TO_ADDR
// if tmp2 >= 100 then
9307: LD_VAR 0 5
9311: PUSH
9312: LD_INT 100
9314: GREATEREQUAL
9315: IFFALSE 9347
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
9317: LD_VAR 0 1
9321: PPUSH
9322: CALL_OW 274
9326: PPUSH
9327: LD_INT 1
9329: PPUSH
9330: LD_VAR 0 5
9334: PUSH
9335: LD_INT 100
9337: MINUS
9338: PPUSH
9339: CALL_OW 277
// break ;
9343: GO 9369
// end else
9345: GO 9367
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9347: LD_VAR 0 1
9351: PPUSH
9352: CALL_OW 274
9356: PPUSH
9357: LD_INT 1
9359: PPUSH
9360: LD_INT 0
9362: PPUSH
9363: CALL_OW 277
// end ; end ;
9367: GO 9281
9369: POP
9370: POP
// for i in tmp do
9371: LD_ADDR_VAR 0 1
9375: PUSH
9376: LD_VAR 0 4
9380: PUSH
9381: FOR_IN
9382: IFFALSE 9469
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9384: LD_ADDR_VAR 0 5
9388: PUSH
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 274
9398: PPUSH
9399: LD_INT 3
9401: PPUSH
9402: CALL_OW 275
9406: ST_TO_ADDR
// if tmp2 >= 100 then
9407: LD_VAR 0 5
9411: PUSH
9412: LD_INT 100
9414: GREATEREQUAL
9415: IFFALSE 9447
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: CALL_OW 274
9426: PPUSH
9427: LD_INT 3
9429: PPUSH
9430: LD_VAR 0 5
9434: PUSH
9435: LD_INT 100
9437: MINUS
9438: PPUSH
9439: CALL_OW 277
// break ;
9443: GO 9469
// end else
9445: GO 9467
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 274
9456: PPUSH
9457: LD_INT 3
9459: PPUSH
9460: LD_INT 0
9462: PPUSH
9463: CALL_OW 277
// end ; end ;
9467: GO 9381
9469: POP
9470: POP
// end ; if dec1 = 3 then
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9714
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9481: LD_EXP 1
9485: PPUSH
9486: LD_STRING D3Kc1-JMM-1
9488: PPUSH
9489: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9493: LD_EXP 25
9497: PPUSH
9498: LD_STRING D3Kc1-Kurt-1
9500: PPUSH
9501: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9505: LD_EXP 1
9509: PPUSH
9510: LD_STRING D3Kc1-JMM-2
9512: PPUSH
9513: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9517: LD_EXP 25
9521: PPUSH
9522: LD_STRING D3Kc1-Kurt-2
9524: PPUSH
9525: CALL_OW 88
// askSiberite = 1 ;
9529: LD_ADDR_EXP 32
9533: PUSH
9534: LD_INT 1
9536: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9537: LD_ADDR_VAR 0 2
9541: PUSH
9542: LD_STRING Q2b
9544: PPUSH
9545: LD_INT 1
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 98
9563: ST_TO_ADDR
// if dec2 = 1 then
9564: LD_VAR 0 3
9568: PUSH
9569: LD_INT 1
9571: EQUAL
9572: IFFALSE 9606
// begin Say ( JMM , D4a-JMM-1 ) ;
9574: LD_EXP 1
9578: PPUSH
9579: LD_STRING D4a-JMM-1
9581: PPUSH
9582: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9586: LD_EXP 25
9590: PPUSH
9591: LD_STRING D4b-Kurt-1
9593: PPUSH
9594: CALL_OW 88
// warWithLegion = 1 ;
9598: LD_ADDR_EXP 30
9602: PUSH
9603: LD_INT 1
9605: ST_TO_ADDR
// end ; if dec2 = 2 then
9606: LD_VAR 0 3
9610: PUSH
9611: LD_INT 2
9613: EQUAL
9614: IFFALSE 9648
// begin Say ( JMM , D4b-JMM-1 ) ;
9616: LD_EXP 1
9620: PPUSH
9621: LD_STRING D4b-JMM-1
9623: PPUSH
9624: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9628: LD_EXP 25
9632: PPUSH
9633: LD_STRING D4b-Kurt-1
9635: PPUSH
9636: CALL_OW 88
// warWithLegion = 1 ;
9640: LD_ADDR_EXP 30
9644: PUSH
9645: LD_INT 1
9647: ST_TO_ADDR
// end ; if dec2 = 3 then
9648: LD_VAR 0 3
9652: PUSH
9653: LD_INT 3
9655: EQUAL
9656: IFFALSE 9714
// begin Say ( JMM , D4c-JMM-1 ) ;
9658: LD_EXP 1
9662: PPUSH
9663: LD_STRING D4c-JMM-1
9665: PPUSH
9666: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9670: LD_EXP 25
9674: PPUSH
9675: LD_STRING D4c-Kurt-1
9677: PPUSH
9678: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9682: LD_EXP 1
9686: PPUSH
9687: LD_STRING D4c-JMM-2
9689: PPUSH
9690: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9694: LD_EXP 25
9698: PPUSH
9699: LD_STRING D4c-Kurt-2
9701: PPUSH
9702: CALL_OW 88
// fakeInfo = 1 ;
9706: LD_ADDR_EXP 31
9710: PUSH
9711: LD_INT 1
9713: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9714: LD_VAR 0 2
9718: PUSH
9719: LD_INT 4
9721: EQUAL
9722: IFFALSE 10379
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9724: LD_EXP 1
9728: PPUSH
9729: LD_STRING D3Kd-JMM-1
9731: PPUSH
9732: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9736: LD_VAR 0 6
9740: PUSH
9741: LD_INT 200
9743: GREATEREQUAL
9744: PUSH
9745: LD_VAR 0 8
9749: PUSH
9750: LD_INT 200
9752: GREATEREQUAL
9753: AND
9754: IFFALSE 9789
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9756: LD_ADDR_VAR 0 3
9760: PUSH
9761: LD_STRING Q2a
9763: PPUSH
9764: LD_INT 1
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PPUSH
9782: CALL_OW 98
9786: ST_TO_ADDR
9787: GO 9812
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: LD_STRING Q2a
9796: PPUSH
9797: LD_INT 1
9799: PUSH
9800: LD_INT 4
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 98
9811: ST_TO_ADDR
// if dec2 = 1 then
9812: LD_VAR 0 3
9816: PUSH
9817: LD_INT 1
9819: EQUAL
9820: IFFALSE 9854
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_STRING D5Ka-JMM-1
9829: PPUSH
9830: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9834: LD_EXP 25
9838: PPUSH
9839: LD_STRING D5Ka-Kurt-1
9841: PPUSH
9842: CALL_OW 88
// warWithLegion = 1 ;
9846: LD_ADDR_EXP 30
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// end ; if dec2 = 2 then
9854: LD_VAR 0 3
9858: PUSH
9859: LD_INT 2
9861: EQUAL
9862: IFFALSE 9888
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9864: LD_EXP 1
9868: PPUSH
9869: LD_STRING D3Kb-JMM-1
9871: PPUSH
9872: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9876: LD_EXP 25
9880: PPUSH
9881: LD_STRING D3Kb-Kurt-1
9883: PPUSH
9884: CALL_OW 88
// end ; if dec2 = 3 then
9888: LD_VAR 0 3
9892: PUSH
9893: LD_INT 3
9895: EQUAL
9896: IFFALSE 10126
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9898: LD_EXP 1
9902: PPUSH
9903: LD_STRING D3Ke-JMM-1
9905: PPUSH
9906: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9910: LD_EXP 25
9914: PPUSH
9915: LD_STRING D3Ke-Kurt-1
9917: PPUSH
9918: CALL_OW 88
// PrepareLegionForPlayer ;
9922: CALL 4895 0 0
// for i in tmp do
9926: LD_ADDR_VAR 0 1
9930: PUSH
9931: LD_VAR 0 4
9935: PUSH
9936: FOR_IN
9937: IFFALSE 10024
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9939: LD_ADDR_VAR 0 5
9943: PUSH
9944: LD_VAR 0 1
9948: PPUSH
9949: CALL_OW 274
9953: PPUSH
9954: LD_INT 1
9956: PPUSH
9957: CALL_OW 275
9961: ST_TO_ADDR
// if tmp2 >= 200 then
9962: LD_VAR 0 5
9966: PUSH
9967: LD_INT 200
9969: GREATEREQUAL
9970: IFFALSE 10002
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9972: LD_VAR 0 1
9976: PPUSH
9977: CALL_OW 274
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: LD_VAR 0 5
9989: PUSH
9990: LD_INT 200
9992: MINUS
9993: PPUSH
9994: CALL_OW 277
// break ;
9998: GO 10024
// end else
10000: GO 10022
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
10002: LD_VAR 0 1
10006: PPUSH
10007: CALL_OW 274
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: LD_INT 0
10017: PPUSH
10018: CALL_OW 277
// end ; end ;
10022: GO 9936
10024: POP
10025: POP
// for i in tmp do
10026: LD_ADDR_VAR 0 1
10030: PUSH
10031: LD_VAR 0 4
10035: PUSH
10036: FOR_IN
10037: IFFALSE 10124
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
10039: LD_ADDR_VAR 0 5
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 274
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 275
10061: ST_TO_ADDR
// if tmp2 >= 200 then
10062: LD_VAR 0 5
10066: PUSH
10067: LD_INT 200
10069: GREATEREQUAL
10070: IFFALSE 10102
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
10072: LD_VAR 0 1
10076: PPUSH
10077: CALL_OW 274
10081: PPUSH
10082: LD_INT 3
10084: PPUSH
10085: LD_VAR 0 5
10089: PUSH
10090: LD_INT 200
10092: MINUS
10093: PPUSH
10094: CALL_OW 277
// break ;
10098: GO 10124
// end else
10100: GO 10122
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
10102: LD_VAR 0 1
10106: PPUSH
10107: CALL_OW 274
10111: PPUSH
10112: LD_INT 3
10114: PPUSH
10115: LD_INT 0
10117: PPUSH
10118: CALL_OW 277
// end ; end ;
10122: GO 10036
10124: POP
10125: POP
// end ; if dec2 = 4 then
10126: LD_VAR 0 3
10130: PUSH
10131: LD_INT 4
10133: EQUAL
10134: IFFALSE 10379
// begin if dec1 = 3 then
10136: LD_VAR 0 2
10140: PUSH
10141: LD_INT 3
10143: EQUAL
10144: IFFALSE 10379
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
10146: LD_EXP 1
10150: PPUSH
10151: LD_STRING D3Kc1-JMM-1
10153: PPUSH
10154: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
10158: LD_EXP 25
10162: PPUSH
10163: LD_STRING D3Kc1-Kurt-1
10165: PPUSH
10166: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
10170: LD_EXP 1
10174: PPUSH
10175: LD_STRING D3Kc1-JMM-2
10177: PPUSH
10178: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
10182: LD_EXP 25
10186: PPUSH
10187: LD_STRING D3Kc1-Kurt-2
10189: PPUSH
10190: CALL_OW 88
// askSiberite = 1 ;
10194: LD_ADDR_EXP 32
10198: PUSH
10199: LD_INT 1
10201: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
10202: LD_ADDR_VAR 0 2
10206: PUSH
10207: LD_STRING Q2b
10209: PPUSH
10210: LD_INT 1
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: LD_INT 3
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 98
10228: ST_TO_ADDR
// if dec2 = 1 then
10229: LD_VAR 0 3
10233: PUSH
10234: LD_INT 1
10236: EQUAL
10237: IFFALSE 10271
// begin Say ( JMM , D4a-JMM-1 ) ;
10239: LD_EXP 1
10243: PPUSH
10244: LD_STRING D4a-JMM-1
10246: PPUSH
10247: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
10251: LD_EXP 25
10255: PPUSH
10256: LD_STRING D4b-Kurt-1
10258: PPUSH
10259: CALL_OW 88
// warWithLegion = 1 ;
10263: LD_ADDR_EXP 30
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// end ; if dec2 = 2 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 2
10278: EQUAL
10279: IFFALSE 10313
// begin Say ( JMM , D4b-JMM-1 ) ;
10281: LD_EXP 1
10285: PPUSH
10286: LD_STRING D4b-JMM-1
10288: PPUSH
10289: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
10293: LD_EXP 25
10297: PPUSH
10298: LD_STRING D4b-Kurt-1
10300: PPUSH
10301: CALL_OW 88
// warWithLegion = 1 ;
10305: LD_ADDR_EXP 30
10309: PUSH
10310: LD_INT 1
10312: ST_TO_ADDR
// end ; if dec2 = 3 then
10313: LD_VAR 0 3
10317: PUSH
10318: LD_INT 3
10320: EQUAL
10321: IFFALSE 10379
// begin Say ( JMM , D4c-JMM-1 ) ;
10323: LD_EXP 1
10327: PPUSH
10328: LD_STRING D4c-JMM-1
10330: PPUSH
10331: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
10335: LD_EXP 25
10339: PPUSH
10340: LD_STRING D4c-Kurt-1
10342: PPUSH
10343: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
10347: LD_EXP 1
10351: PPUSH
10352: LD_STRING D4c-JMM-2
10354: PPUSH
10355: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
10359: LD_EXP 25
10363: PPUSH
10364: LD_STRING D4c-Kurt-2
10366: PPUSH
10367: CALL_OW 88
// fakeInfo = 1 ;
10371: LD_ADDR_EXP 31
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
10379: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
10383: LD_INT 8
10385: PPUSH
10386: LD_INT 8
10388: PPUSH
10389: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
10393: LD_EXP 25
10397: PPUSH
10398: LD_EXP 26
10402: PPUSH
10403: CALL_OW 120
// wait ( 0 0$1 ) ;
10407: LD_INT 35
10409: PPUSH
10410: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
10414: LD_EXP 26
10418: PPUSH
10419: LD_INT 4
10421: PPUSH
10422: CALL_OW 113
// wait ( 0 0$6 ) ;
10426: LD_INT 210
10428: PPUSH
10429: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10433: LD_EXP 25
10437: PPUSH
10438: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10442: LD_EXP 26
10446: PPUSH
10447: CALL_OW 64
// end ; end ;
10451: PPOPN 8
10453: END
// every 0 0$10 trigger warWithLegion = 1 do
10454: LD_EXP 30
10458: PUSH
10459: LD_INT 1
10461: EQUAL
10462: IFFALSE 10471
10464: GO 10466
10466: DISABLE
// PrepareAttackLegion ;
10467: CALL 5623 0 0
10471: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10472: LD_EXP 15
10476: PPUSH
10477: CALL_OW 305
10481: PUSH
10482: LD_EXP 15
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 289
10494: NOT
10495: AND
10496: PUSH
10497: LD_EXP 15
10501: PPUSH
10502: LD_INT 2
10504: PPUSH
10505: CALL_OW 289
10509: NOT
10510: AND
10511: PUSH
10512: LD_EXP 15
10516: PPUSH
10517: LD_INT 3
10519: PPUSH
10520: CALL_OW 289
10524: NOT
10525: AND
10526: IFFALSE 10543
10528: GO 10530
10530: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10531: LD_EXP 15
10535: PPUSH
10536: LD_INT 4
10538: PPUSH
10539: CALL_OW 235
10543: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10544: LD_EXP 16
10548: PPUSH
10549: CALL_OW 305
10553: PUSH
10554: LD_EXP 16
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: CALL_OW 289
10566: NOT
10567: AND
10568: PUSH
10569: LD_EXP 16
10573: PPUSH
10574: LD_INT 2
10576: PPUSH
10577: CALL_OW 289
10581: NOT
10582: AND
10583: PUSH
10584: LD_EXP 16
10588: PPUSH
10589: LD_INT 3
10591: PPUSH
10592: CALL_OW 289
10596: NOT
10597: AND
10598: IFFALSE 10615
10600: GO 10602
10602: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10603: LD_EXP 16
10607: PPUSH
10608: LD_INT 4
10610: PPUSH
10611: CALL_OW 235
10615: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10616: LD_EXP 17
10620: PPUSH
10621: CALL_OW 305
10625: PUSH
10626: LD_EXP 17
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: CALL_OW 289
10638: NOT
10639: AND
10640: PUSH
10641: LD_EXP 17
10645: PPUSH
10646: LD_INT 2
10648: PPUSH
10649: CALL_OW 289
10653: NOT
10654: AND
10655: PUSH
10656: LD_EXP 17
10660: PPUSH
10661: LD_INT 3
10663: PPUSH
10664: CALL_OW 289
10668: NOT
10669: AND
10670: IFFALSE 10687
10672: GO 10674
10674: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10675: LD_EXP 17
10679: PPUSH
10680: LD_INT 4
10682: PPUSH
10683: CALL_OW 235
10687: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10688: LD_EXP 18
10692: PPUSH
10693: CALL_OW 305
10697: PUSH
10698: LD_EXP 18
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 289
10710: NOT
10711: AND
10712: PUSH
10713: LD_EXP 18
10717: PPUSH
10718: LD_INT 2
10720: PPUSH
10721: CALL_OW 289
10725: NOT
10726: AND
10727: PUSH
10728: LD_EXP 18
10732: PPUSH
10733: LD_INT 3
10735: PPUSH
10736: CALL_OW 289
10740: NOT
10741: AND
10742: IFFALSE 10759
10744: GO 10746
10746: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10747: LD_EXP 18
10751: PPUSH
10752: LD_INT 4
10754: PPUSH
10755: CALL_OW 235
10759: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10760: LD_EXP 19
10764: PPUSH
10765: CALL_OW 305
10769: PUSH
10770: LD_EXP 19
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 289
10782: NOT
10783: AND
10784: PUSH
10785: LD_EXP 19
10789: PPUSH
10790: LD_INT 2
10792: PPUSH
10793: CALL_OW 289
10797: NOT
10798: AND
10799: PUSH
10800: LD_EXP 19
10804: PPUSH
10805: LD_INT 3
10807: PPUSH
10808: CALL_OW 289
10812: NOT
10813: AND
10814: PUSH
10815: LD_EXP 19
10819: PPUSH
10820: LD_INT 2
10822: PPUSH
10823: CALL_OW 289
10827: NOT
10828: AND
10829: IFFALSE 10846
10831: GO 10833
10833: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10834: LD_EXP 19
10838: PPUSH
10839: LD_INT 4
10841: PPUSH
10842: CALL_OW 235
10846: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10847: LD_EXP 20
10851: PPUSH
10852: CALL_OW 305
10856: PUSH
10857: LD_EXP 20
10861: PPUSH
10862: LD_INT 1
10864: PPUSH
10865: CALL_OW 289
10869: NOT
10870: AND
10871: PUSH
10872: LD_EXP 20
10876: PPUSH
10877: LD_INT 2
10879: PPUSH
10880: CALL_OW 289
10884: NOT
10885: AND
10886: PUSH
10887: LD_EXP 20
10891: PPUSH
10892: LD_INT 3
10894: PPUSH
10895: CALL_OW 289
10899: NOT
10900: AND
10901: IFFALSE 10918
10903: GO 10905
10905: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10906: LD_EXP 20
10910: PPUSH
10911: LD_INT 4
10913: PPUSH
10914: CALL_OW 235
10918: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10919: LD_EXP 21
10923: PPUSH
10924: CALL_OW 305
10928: PUSH
10929: LD_EXP 21
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 289
10941: NOT
10942: AND
10943: PUSH
10944: LD_EXP 21
10948: PPUSH
10949: LD_INT 2
10951: PPUSH
10952: CALL_OW 289
10956: NOT
10957: AND
10958: PUSH
10959: LD_EXP 21
10963: PPUSH
10964: LD_INT 3
10966: PPUSH
10967: CALL_OW 289
10971: NOT
10972: AND
10973: IFFALSE 10990
10975: GO 10977
10977: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10978: LD_EXP 21
10982: PPUSH
10983: LD_INT 4
10985: PPUSH
10986: CALL_OW 235
10990: END
// every 0 0$1 do var i ;
10991: GO 10993
10993: DISABLE
10994: LD_INT 0
10996: PPUSH
// begin enable ;
10997: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10998: LD_ADDR_VAR 0 1
11002: PUSH
11003: LD_INT 22
11005: PUSH
11006: LD_INT 4
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 69
11017: PUSH
11018: FOR_IN
11019: IFFALSE 11058
// begin ComMoveToArea ( i , PlayerSpawn ) ;
11021: LD_VAR 0 1
11025: PPUSH
11026: LD_INT 4
11028: PPUSH
11029: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
11033: LD_VAR 0 1
11037: PPUSH
11038: LD_INT 4
11040: PPUSH
11041: CALL_OW 308
11045: IFFALSE 11056
// RemoveUnit ( i ) ;
11047: LD_VAR 0 1
11051: PPUSH
11052: CALL_OW 64
// end ;
11056: GO 11018
11058: POP
11059: POP
// end ;
11060: PPOPN 1
11062: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
11063: LD_EXP 28
11067: PUSH
11068: LD_INT 1
11070: EQUAL
11071: IFFALSE 11446
11073: GO 11075
11075: DISABLE
11076: LD_INT 0
11078: PPUSH
11079: PPUSH
11080: PPUSH
// begin enable ;
11081: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
11082: LD_ADDR_VAR 0 2
11086: PUSH
11087: LD_INT 12
11089: PPUSH
11090: LD_INT 22
11092: PUSH
11093: LD_INT 3
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 21
11102: PUSH
11103: LD_INT 2
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 70
11118: ST_TO_ADDR
// for i in enemyVehs do
11119: LD_ADDR_VAR 0 1
11123: PUSH
11124: LD_VAR 0 2
11128: PUSH
11129: FOR_IN
11130: IFFALSE 11444
// begin if See ( 1 , i ) then
11132: LD_INT 1
11134: PPUSH
11135: LD_VAR 0 1
11139: PPUSH
11140: CALL_OW 292
11144: IFFALSE 11442
// begin disable ;
11146: DISABLE
// DialogueOn ;
11147: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11151: LD_VAR 0 1
11155: PPUSH
11156: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11160: LD_INT 22
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 26
11172: PUSH
11173: LD_INT 1
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_EXP 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: DIFF
11192: PPUSH
11193: CALL_OW 69
11197: PPUSH
11198: LD_STRING DT1-Sol1-1
11200: PPUSH
11201: LD_STRING DT1-FSol1-1
11203: PPUSH
11204: CALL 12986 0 3
// dec = ShowQuery2 ;
11208: LD_ADDR_VAR 0 3
11212: PUSH
11213: CALL 13596 0 0
11217: ST_TO_ADDR
// if dec = 1 then
11218: LD_VAR 0 3
11222: PUSH
11223: LD_INT 1
11225: EQUAL
11226: IFFALSE 11332
// begin Say ( JMM , D2-JMM-1 ) ;
11228: LD_EXP 1
11232: PPUSH
11233: LD_STRING D2-JMM-1
11235: PPUSH
11236: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11240: LD_EXP 22
11244: PPUSH
11245: LD_STRING D2-Pow-1
11247: PPUSH
11248: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
11252: LD_EXP 1
11256: PPUSH
11257: LD_STRING D2a-JMM-1
11259: PPUSH
11260: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
11264: LD_EXP 22
11268: PPUSH
11269: LD_STRING D2a-Pow-1
11271: PPUSH
11272: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
11276: LD_EXP 1
11280: PPUSH
11281: LD_STRING D2a-JMM-2
11283: PPUSH
11284: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
11288: LD_EXP 22
11292: PPUSH
11293: LD_STRING D2a-Pow-2
11295: PPUSH
11296: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
11300: LD_EXP 1
11304: PPUSH
11305: LD_STRING D2a-JMM-3
11307: PPUSH
11308: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
11312: LD_EXP 22
11316: PPUSH
11317: LD_STRING D2a-Pow-3
11319: PPUSH
11320: CALL_OW 94
// secondPass = 2 ;
11324: LD_ADDR_EXP 28
11328: PUSH
11329: LD_INT 2
11331: ST_TO_ADDR
// end ; if dec = 2 then
11332: LD_VAR 0 3
11336: PUSH
11337: LD_INT 2
11339: EQUAL
11340: IFFALSE 11434
// begin Say ( JMM , D2-JMM-1 ) ;
11342: LD_EXP 1
11346: PPUSH
11347: LD_STRING D2-JMM-1
11349: PPUSH
11350: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11354: LD_EXP 22
11358: PPUSH
11359: LD_STRING D2-Pow-1
11361: PPUSH
11362: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11366: LD_EXP 1
11370: PPUSH
11371: LD_STRING D2b-JMM-1
11373: PPUSH
11374: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11378: LD_EXP 22
11382: PPUSH
11383: LD_STRING D2b-Pow-1
11385: PPUSH
11386: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11390: LD_EXP 1
11394: PPUSH
11395: LD_STRING D2c-JMM-1
11397: PPUSH
11398: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11402: LD_EXP 22
11406: PPUSH
11407: LD_STRING D2c-Pow-1
11409: PPUSH
11410: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11414: LD_EXP 1
11418: PPUSH
11419: LD_STRING D2c-JMM-2
11421: PPUSH
11422: CALL_OW 88
// secondPass = 2 ;
11426: LD_ADDR_EXP 28
11430: PUSH
11431: LD_INT 2
11433: ST_TO_ADDR
// end ; DialogueOff ;
11434: CALL_OW 7
// exit ;
11438: POP
11439: POP
11440: GO 11446
// end ; end ;
11442: GO 11129
11444: POP
11445: POP
// end ;
11446: PPOPN 3
11448: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11449: LD_EXP 29
11453: PUSH
11454: LD_INT 1
11456: EQUAL
11457: IFFALSE 11607
11459: GO 11461
11461: DISABLE
11462: LD_INT 0
11464: PPUSH
11465: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: LD_INT 11
11473: PPUSH
11474: LD_INT 22
11476: PUSH
11477: LD_INT 3
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 24
11486: PUSH
11487: LD_INT 250
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 70
11502: ST_TO_ADDR
// enable ;
11503: ENABLE
// for i in vehicles do
11504: LD_ADDR_VAR 0 1
11508: PUSH
11509: LD_VAR 0 2
11513: PUSH
11514: FOR_IN
11515: IFFALSE 11605
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
11517: LD_INT 1
11519: PPUSH
11520: LD_VAR 0 1
11524: PPUSH
11525: CALL_OW 292
11529: PUSH
11530: LD_EXP 29
11534: PUSH
11535: LD_INT 1
11537: EQUAL
11538: AND
11539: IFFALSE 11603
// begin disable ;
11541: DISABLE
// DialogueOn ;
11542: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11546: LD_INT 22
11548: PUSH
11549: LD_INT 1
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 21
11558: PUSH
11559: LD_INT 1
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PPUSH
11570: CALL_OW 69
11574: PPUSH
11575: LD_STRING DT1-Sol1-1
11577: PPUSH
11578: LD_STRING DT1-FSol1-1
11580: PPUSH
11581: CALL 12986 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11585: LD_EXP 1
11589: PPUSH
11590: LD_STRING DT1-JMM-1
11592: PPUSH
11593: CALL_OW 88
// DialogueOff ;
11597: CALL_OW 7
// break ;
11601: GO 11605
// end ; end ;
11603: GO 11514
11605: POP
11606: POP
// end ;
11607: PPOPN 2
11609: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11610: LD_EXP 29
11614: PUSH
11615: LD_INT 1
11617: EQUAL
11618: PUSH
11619: LD_INT 11
11621: PPUSH
11622: LD_INT 22
11624: PUSH
11625: LD_INT 3
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 24
11634: PUSH
11635: LD_INT 251
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: LD_INT 21
11647: PUSH
11648: LD_INT 2
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 1
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: PPUSH
11675: CALL_OW 70
11679: PUSH
11680: LD_INT 0
11682: EQUAL
11683: AND
11684: IFFALSE 11768
11686: GO 11688
11688: DISABLE
// begin vehicleTeleported = 2 ;
11689: LD_ADDR_EXP 29
11693: PUSH
11694: LD_INT 2
11696: ST_TO_ADDR
// DialogueOn ;
11697: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11701: LD_EXP 1
11705: PPUSH
11706: LD_STRING DT1a-JMM-1
11708: PPUSH
11709: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11713: LD_INT 22
11715: PUSH
11716: LD_INT 1
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 1
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 69
11741: PPUSH
11742: LD_STRING DT1a-Sol1-1
11744: PPUSH
11745: LD_STRING DT1a-FSol1-1
11747: PPUSH
11748: CALL 12986 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11752: LD_EXP 1
11756: PPUSH
11757: LD_STRING DT1a-JMM-2
11759: PPUSH
11760: CALL_OW 88
// DialogueOff ;
11764: CALL_OW 7
// end ;
11768: END
// every 0 0$1 trigger vehicleTeleported = 3 do var i , vehicles ;
11769: LD_EXP 29
11773: PUSH
11774: LD_INT 3
11776: EQUAL
11777: IFFALSE 11915
11779: GO 11781
11781: DISABLE
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11786: LD_ADDR_VAR 0 2
11790: PUSH
11791: LD_INT 11
11793: PPUSH
11794: LD_INT 22
11796: PUSH
11797: LD_INT 3
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 24
11806: PUSH
11807: LD_INT 250
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PPUSH
11818: CALL_OW 70
11822: ST_TO_ADDR
// enable ;
11823: ENABLE
// for i in vehicles do
11824: LD_ADDR_VAR 0 1
11828: PUSH
11829: LD_VAR 0 2
11833: PUSH
11834: FOR_IN
11835: IFFALSE 11913
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11837: LD_INT 1
11839: PPUSH
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL_OW 292
11849: PUSH
11850: LD_EXP 29
11854: PUSH
11855: LD_INT 3
11857: EQUAL
11858: AND
11859: IFFALSE 11911
// begin disable ;
11861: DISABLE
// DialogueOn ;
11862: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11866: LD_INT 22
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 1
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PPUSH
11895: LD_STRING DT2-Sol1-1
11897: PPUSH
11898: LD_STRING DT2-FSol1-1
11900: PPUSH
11901: CALL 12986 0 3
// DialogueOff ;
11905: CALL_OW 7
// break ;
11909: GO 11913
// end ; end ;
11911: GO 11834
11913: POP
11914: POP
// end ;
11915: PPOPN 2
11917: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11918: LD_EXP 29
11922: PUSH
11923: LD_INT 3
11925: EQUAL
11926: PUSH
11927: LD_INT 11
11929: PPUSH
11930: LD_INT 22
11932: PUSH
11933: LD_INT 3
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 24
11942: PUSH
11943: LD_INT 251
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 21
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 21
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: PPUSH
11983: CALL_OW 70
11987: PUSH
11988: LD_INT 0
11990: EQUAL
11991: AND
11992: IFFALSE 12076
11994: GO 11996
11996: DISABLE
// begin vehicleTeleported = 4 ;
11997: LD_ADDR_EXP 29
12001: PUSH
12002: LD_INT 4
12004: ST_TO_ADDR
// DialogueOn ;
12005: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
12009: LD_EXP 1
12013: PPUSH
12014: LD_STRING DT2a-JMM-1
12016: PPUSH
12017: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
12021: LD_INT 22
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 1
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PPUSH
12045: CALL_OW 69
12049: PPUSH
12050: LD_STRING DT2a-Sol1-1
12052: PPUSH
12053: LD_STRING DT2a-FSol1-1
12055: PPUSH
12056: CALL 12986 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12060: LD_EXP 3
12064: PPUSH
12065: LD_STRING DT2a-Don-1
12067: PPUSH
12068: CALL_OW 88
// DialogueOff ;
12072: CALL_OW 7
// end ;
12076: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12077: LD_INT 1
12079: PPUSH
12080: LD_INT 45
12082: PPUSH
12083: LD_INT 74
12085: PPUSH
12086: CALL_OW 293
12090: IFFALSE 12185
12092: GO 12094
12094: DISABLE
// begin DialogueOn ;
12095: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12099: LD_INT 36
12101: PPUSH
12102: LD_INT 55
12104: PPUSH
12105: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12109: LD_INT 22
12111: PUSH
12112: LD_INT 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 21
12121: PUSH
12122: LD_INT 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PPUSH
12133: CALL_OW 69
12137: PPUSH
12138: LD_STRING D5-Sol1-1
12140: PPUSH
12141: LD_STRING D5-FSol1-
12143: PPUSH
12144: CALL 12986 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12148: LD_EXP 30
12152: PUSH
12153: LD_INT 1
12155: EQUAL
12156: PUSH
12157: LD_EXP 3
12161: PPUSH
12162: CALL_OW 300
12166: AND
12167: IFFALSE 12181
// Say ( Donaldson , D5-Don-1 ) ;
12169: LD_EXP 3
12173: PPUSH
12174: LD_STRING D5-Don-1
12176: PPUSH
12177: CALL_OW 88
// DialogueOff ;
12181: CALL_OW 7
// end ;
12185: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
12186: LD_INT 1
12188: PPUSH
12189: LD_INT 10
12191: PPUSH
12192: CALL_OW 292
12196: IFFALSE 12283
12198: GO 12200
12200: DISABLE
// begin DialogueOn ;
12201: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
12205: LD_INT 10
12207: PPUSH
12208: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12212: LD_INT 22
12214: PUSH
12215: LD_INT 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 21
12224: PUSH
12225: LD_INT 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PPUSH
12236: CALL_OW 69
12240: PUSH
12241: LD_EXP 1
12245: PUSH
12246: EMPTY
12247: LIST
12248: DIFF
12249: PPUSH
12250: LD_STRING DT3-Sol1-1
12252: PPUSH
12253: LD_STRING DT3-FSol1-1
12255: PPUSH
12256: CALL 12986 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12260: LD_EXP 1
12264: PPUSH
12265: LD_STRING DT3-JMM-1
12267: PPUSH
12268: CALL_OW 88
// DialogueOff ;
12272: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12276: LD_STRING M2
12278: PPUSH
12279: CALL_OW 337
// end ;
12283: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 do var i , j , vehs ;
12284: LD_INT 3
12286: PPUSH
12287: CALL_OW 303
12291: PUSH
12292: LD_INT 22
12294: PPUSH
12295: LD_INT 22
12297: PUSH
12298: LD_INT 1
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 70
12309: PUSH
12310: LD_INT 0
12312: GREATER
12313: OR
12314: IFFALSE 12674
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
12323: PPUSH
// begin ruAI = 0 ;
12324: LD_ADDR_EXP 41
12328: PUSH
12329: LD_INT 0
12331: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12332: LD_ADDR_VAR 0 3
12336: PUSH
12337: LD_INT 10
12339: PPUSH
12340: LD_INT 22
12342: PUSH
12343: LD_INT 3
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 21
12352: PUSH
12353: LD_INT 2
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 58
12362: PUSH
12363: EMPTY
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: PPUSH
12371: CALL_OW 70
12375: ST_TO_ADDR
// DialogueOn ;
12376: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12380: LD_EXP 1
12384: PPUSH
12385: LD_STRING D6-JMM-1
12387: PPUSH
12388: CALL_OW 88
// DialogueOff ;
12392: CALL_OW 7
// for i := 1 to RuScientists do
12396: LD_ADDR_VAR 0 1
12400: PUSH
12401: DOUBLE
12402: LD_INT 1
12404: DEC
12405: ST_TO_ADDR
12406: LD_EXP 34
12410: PUSH
12411: FOR_TO
12412: IFFALSE 12672
// begin ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) ;
12414: LD_EXP 34
12418: PUSH
12419: LD_VAR 0 1
12423: ARRAY
12424: PPUSH
12425: LD_INT 3
12427: PUSH
12428: LD_INT 60
12430: PUSH
12431: EMPTY
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 72
12442: PPUSH
12443: LD_VAR 0 3
12447: PUSH
12448: LD_VAR 0 1
12452: ARRAY
12453: PPUSH
12454: CALL_OW 120
// if IsOk ( rutp ) then
12458: LD_INT 137
12460: PPUSH
12461: CALL_OW 302
12465: IFFALSE 12618
// begin if i mod 2 then
12467: LD_VAR 0 1
12471: PUSH
12472: LD_INT 2
12474: MOD
12475: IFFALSE 12564
// begin AddComEnterUnit ( [ RuScientists [ i ] , vehs [ i ] ] , rutp ) ;
12477: LD_EXP 34
12481: PUSH
12482: LD_VAR 0 1
12486: ARRAY
12487: PUSH
12488: LD_VAR 0 3
12492: PUSH
12493: LD_VAR 0 1
12497: ARRAY
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PPUSH
12503: LD_INT 137
12505: PPUSH
12506: CALL_OW 180
// AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12510: LD_EXP 34
12514: PUSH
12515: LD_VAR 0 1
12519: ARRAY
12520: PUSH
12521: LD_VAR 0 3
12525: PUSH
12526: LD_VAR 0 1
12530: ARRAY
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: LD_INT 13
12538: PUSH
12539: LD_INT 14
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 1
12548: PPUSH
12549: LD_INT 2
12551: PPUSH
12552: CALL_OW 12
12556: ARRAY
12557: PPUSH
12558: CALL_OW 173
// end else
12562: GO 12616
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12564: LD_EXP 34
12568: PUSH
12569: LD_VAR 0 1
12573: ARRAY
12574: PUSH
12575: LD_VAR 0 3
12579: PUSH
12580: LD_VAR 0 1
12584: ARRAY
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PPUSH
12590: LD_INT 13
12592: PUSH
12593: LD_INT 14
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 1
12602: PPUSH
12603: LD_INT 2
12605: PPUSH
12606: CALL_OW 12
12610: ARRAY
12611: PPUSH
12612: CALL_OW 173
// end ; end else
12616: GO 12670
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12618: LD_EXP 34
12622: PUSH
12623: LD_VAR 0 1
12627: ARRAY
12628: PUSH
12629: LD_VAR 0 3
12633: PUSH
12634: LD_VAR 0 1
12638: ARRAY
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: LD_INT 13
12646: PUSH
12647: LD_INT 14
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 1
12656: PPUSH
12657: LD_INT 2
12659: PPUSH
12660: CALL_OW 12
12664: ARRAY
12665: PPUSH
12666: CALL_OW 173
// end ; end ;
12670: GO 12411
12672: POP
12673: POP
// end ;
12674: PPOPN 3
12676: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
12677: LD_EXP 41
12681: PUSH
12682: LD_INT 0
12684: EQUAL
12685: IFFALSE 12875
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
12693: PPUSH
// begin enable ;
12694: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12695: LD_ADDR_VAR 0 1
12699: PUSH
12700: LD_INT 13
12702: PPUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 3
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: EMPTY
12714: LIST
12715: PPUSH
12716: CALL_OW 70
12720: PUSH
12721: FOR_IN
12722: IFFALSE 12783
// begin for j in RuScientists do
12724: LD_ADDR_VAR 0 2
12728: PUSH
12729: LD_EXP 34
12733: PUSH
12734: FOR_IN
12735: IFFALSE 12770
// if j = i then
12737: LD_VAR 0 2
12741: PUSH
12742: LD_VAR 0 1
12746: EQUAL
12747: IFFALSE 12768
// RuScientists = RuScientists diff [ i ] ;
12749: LD_ADDR_EXP 34
12753: PUSH
12754: LD_EXP 34
12758: PUSH
12759: LD_VAR 0 1
12763: PUSH
12764: EMPTY
12765: LIST
12766: DIFF
12767: ST_TO_ADDR
12768: GO 12734
12770: POP
12771: POP
// RemoveUnit ( i ) ;
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 64
// end ;
12781: GO 12721
12783: POP
12784: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12785: LD_ADDR_VAR 0 1
12789: PUSH
12790: LD_INT 14
12792: PPUSH
12793: LD_INT 22
12795: PUSH
12796: LD_INT 3
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: PPUSH
12806: CALL_OW 70
12810: PUSH
12811: FOR_IN
12812: IFFALSE 12873
// begin for j in RuScientists do
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: LD_EXP 34
12823: PUSH
12824: FOR_IN
12825: IFFALSE 12860
// if j = i then
12827: LD_VAR 0 2
12831: PUSH
12832: LD_VAR 0 1
12836: EQUAL
12837: IFFALSE 12858
// RuScientists = RuScientists diff [ i ] ;
12839: LD_ADDR_EXP 34
12843: PUSH
12844: LD_EXP 34
12848: PUSH
12849: LD_VAR 0 1
12853: PUSH
12854: EMPTY
12855: LIST
12856: DIFF
12857: ST_TO_ADDR
12858: GO 12824
12860: POP
12861: POP
// RemoveUnit ( i ) ;
12862: LD_VAR 0 1
12866: PPUSH
12867: CALL_OW 64
// end ;
12871: GO 12811
12873: POP
12874: POP
// end ; end_of_file
12875: PPOPN 2
12877: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12878: LD_INT 0
12880: PPUSH
12881: PPUSH
// if exist_mode then
12882: LD_VAR 0 2
12886: IFFALSE 12905
// unit := CreateCharacter ( ident ) else
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 34
12902: ST_TO_ADDR
12903: GO 12920
// unit := NewCharacter ( ident ) ;
12905: LD_ADDR_VAR 0 4
12909: PUSH
12910: LD_VAR 0 1
12914: PPUSH
12915: CALL_OW 25
12919: ST_TO_ADDR
// result := unit ;
12920: LD_ADDR_VAR 0 3
12924: PUSH
12925: LD_VAR 0 4
12929: ST_TO_ADDR
// end ;
12930: LD_VAR 0 3
12934: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12935: LD_INT 0
12937: PPUSH
12938: PPUSH
// for i in charactersList do
12939: LD_ADDR_VAR 0 4
12943: PUSH
12944: LD_VAR 0 1
12948: PUSH
12949: FOR_IN
12950: IFFALSE 12979
// begin if IsOk ( i ) then
12952: LD_VAR 0 4
12956: PPUSH
12957: CALL_OW 302
12961: IFFALSE 12977
// SaveCharacters ( i , ident ) ;
12963: LD_VAR 0 4
12967: PPUSH
12968: LD_VAR 0 2
12972: PPUSH
12973: CALL_OW 38
// end ;
12977: GO 12949
12979: POP
12980: POP
// end ;
12981: LD_VAR 0 3
12985: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12986: LD_INT 0
12988: PPUSH
12989: PPUSH
12990: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12991: LD_ADDR_VAR 0 1
12995: PUSH
12996: LD_VAR 0 1
13000: PUSH
13001: LD_EXP 1
13005: PUSH
13006: LD_EXP 7
13010: PUSH
13011: LD_EXP 3
13015: PUSH
13016: LD_EXP 4
13020: PUSH
13021: LD_EXP 5
13025: PUSH
13026: LD_EXP 2
13030: PUSH
13031: LD_EXP 12
13035: PUSH
13036: LD_EXP 13
13040: PUSH
13041: LD_EXP 9
13045: PUSH
13046: LD_EXP 11
13050: PUSH
13051: LD_EXP 6
13055: PUSH
13056: LD_EXP 8
13060: PUSH
13061: LD_EXP 10
13065: PUSH
13066: LD_EXP 22
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: DIFF
13087: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13088: LD_ADDR_VAR 0 6
13092: PUSH
13093: LD_INT 1
13095: PPUSH
13096: LD_VAR 0 1
13100: PPUSH
13101: CALL_OW 12
13105: ST_TO_ADDR
// for i = 1 to characters do
13106: LD_ADDR_VAR 0 5
13110: PUSH
13111: DOUBLE
13112: LD_INT 1
13114: DEC
13115: ST_TO_ADDR
13116: LD_VAR 0 1
13120: PUSH
13121: FOR_TO
13122: IFFALSE 13232
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13124: LD_VAR 0 5
13128: PUSH
13129: LD_VAR 0 6
13133: EQUAL
13134: PUSH
13135: LD_VAR 0 1
13139: PUSH
13140: LD_VAR 0 5
13144: ARRAY
13145: PPUSH
13146: CALL_OW 258
13150: PUSH
13151: LD_INT 1
13153: EQUAL
13154: AND
13155: IFFALSE 13177
// Say ( characters [ i ] , dialogMID ) ;
13157: LD_VAR 0 1
13161: PUSH
13162: LD_VAR 0 5
13166: ARRAY
13167: PPUSH
13168: LD_VAR 0 2
13172: PPUSH
13173: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13177: LD_VAR 0 5
13181: PUSH
13182: LD_VAR 0 6
13186: EQUAL
13187: PUSH
13188: LD_VAR 0 1
13192: PUSH
13193: LD_VAR 0 5
13197: ARRAY
13198: PPUSH
13199: CALL_OW 258
13203: PUSH
13204: LD_INT 2
13206: EQUAL
13207: AND
13208: IFFALSE 13230
// Say ( characters [ i ] , dialogFID ) ;
13210: LD_VAR 0 1
13214: PUSH
13215: LD_VAR 0 5
13219: ARRAY
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: CALL_OW 88
// end ;
13230: GO 13121
13232: POP
13233: POP
// end ;
13234: LD_VAR 0 4
13238: RET
// export function PrepareDifficulty ; var tmp ; begin
13239: LD_INT 0
13241: PPUSH
13242: PPUSH
// if Difficulty = 1 then
13243: LD_OWVAR 67
13247: PUSH
13248: LD_INT 1
13250: EQUAL
13251: IFFALSE 13269
// begin RuSolMinLevel = 8 ;
13253: LD_ADDR_EXP 36
13257: PUSH
13258: LD_INT 8
13260: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13261: LD_ADDR_EXP 37
13265: PUSH
13266: LD_INT 10
13268: ST_TO_ADDR
// end ; if Difficulty = 2 then
13269: LD_OWVAR 67
13273: PUSH
13274: LD_INT 2
13276: EQUAL
13277: IFFALSE 13371
// begin RuSolMinLevel = 9 ;
13279: LD_ADDR_EXP 36
13283: PUSH
13284: LD_INT 9
13286: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13287: LD_ADDR_EXP 37
13291: PUSH
13292: LD_INT 10
13294: ST_TO_ADDR
// uc_nation = 3 ;
13295: LD_ADDR_OWVAR 21
13299: PUSH
13300: LD_INT 3
13302: ST_TO_ADDR
// uc_side = 3 ;
13303: LD_ADDR_OWVAR 20
13307: PUSH
13308: LD_INT 3
13310: ST_TO_ADDR
// bc_level = 10 ;
13311: LD_ADDR_OWVAR 43
13315: PUSH
13316: LD_INT 10
13318: ST_TO_ADDR
// bc_type = b_turret ;
13319: LD_ADDR_OWVAR 42
13323: PUSH
13324: LD_INT 33
13326: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13327: LD_ADDR_VAR 0 2
13331: PUSH
13332: LD_INT 86
13334: PPUSH
13335: LD_INT 34
13337: PPUSH
13338: LD_INT 2
13340: PPUSH
13341: CALL_OW 47
13345: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13346: LD_VAR 0 2
13350: PPUSH
13351: LD_INT 49
13353: PPUSH
13354: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13358: LD_INT 64
13360: PPUSH
13361: LD_INT 3
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: CALL_OW 322
// end ; if Difficulty = 3 then
13371: LD_OWVAR 67
13375: PUSH
13376: LD_INT 3
13378: EQUAL
13379: IFFALSE 13517
// begin RuSolMinLevel = 10 ;
13381: LD_ADDR_EXP 36
13385: PUSH
13386: LD_INT 10
13388: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13389: LD_ADDR_EXP 37
13393: PUSH
13394: LD_INT 10
13396: ST_TO_ADDR
// uc_nation = 3 ;
13397: LD_ADDR_OWVAR 21
13401: PUSH
13402: LD_INT 3
13404: ST_TO_ADDR
// uc_side = 3 ;
13405: LD_ADDR_OWVAR 20
13409: PUSH
13410: LD_INT 3
13412: ST_TO_ADDR
// bc_level = 10 ;
13413: LD_ADDR_OWVAR 43
13417: PUSH
13418: LD_INT 10
13420: ST_TO_ADDR
// bc_type = b_turret ;
13421: LD_ADDR_OWVAR 42
13425: PUSH
13426: LD_INT 33
13428: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13429: LD_ADDR_VAR 0 2
13433: PUSH
13434: LD_INT 86
13436: PPUSH
13437: LD_INT 34
13439: PPUSH
13440: LD_INT 2
13442: PPUSH
13443: CALL_OW 47
13447: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13448: LD_VAR 0 2
13452: PPUSH
13453: LD_INT 49
13455: PPUSH
13456: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13460: LD_ADDR_VAR 0 2
13464: PUSH
13465: LD_INT 93
13467: PPUSH
13468: LD_INT 31
13470: PPUSH
13471: LD_INT 2
13473: PPUSH
13474: CALL_OW 47
13478: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13479: LD_VAR 0 2
13483: PPUSH
13484: LD_INT 49
13486: PPUSH
13487: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13491: LD_INT 64
13493: PPUSH
13494: LD_INT 3
13496: PPUSH
13497: LD_INT 1
13499: PPUSH
13500: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13504: LD_INT 65
13506: PPUSH
13507: LD_INT 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// end ; end ;
13517: LD_VAR 0 1
13521: RET
// export function ShowQuery1 ; begin
13522: LD_INT 0
13524: PPUSH
// case query ( Q1 ) of 1 :
13525: LD_STRING Q1
13527: PPUSH
13528: CALL_OW 97
13532: PUSH
13533: LD_INT 1
13535: DOUBLE
13536: EQUAL
13537: IFTRUE 13541
13539: GO 13552
13541: POP
// result = 1 ; 2 :
13542: LD_ADDR_VAR 0 1
13546: PUSH
13547: LD_INT 1
13549: ST_TO_ADDR
13550: GO 13591
13552: LD_INT 2
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13571
13560: POP
// result = 2 ; 3 :
13561: LD_ADDR_VAR 0 1
13565: PUSH
13566: LD_INT 2
13568: ST_TO_ADDR
13569: GO 13591
13571: LD_INT 3
13573: DOUBLE
13574: EQUAL
13575: IFTRUE 13579
13577: GO 13590
13579: POP
// result = 3 ; end ;
13580: LD_ADDR_VAR 0 1
13584: PUSH
13585: LD_INT 3
13587: ST_TO_ADDR
13588: GO 13591
13590: POP
// end ;
13591: LD_VAR 0 1
13595: RET
// export function ShowQuery2 ; begin
13596: LD_INT 0
13598: PPUSH
// case query ( Q1a ) of 1 :
13599: LD_STRING Q1a
13601: PPUSH
13602: CALL_OW 97
13606: PUSH
13607: LD_INT 1
13609: DOUBLE
13610: EQUAL
13611: IFTRUE 13615
13613: GO 13626
13615: POP
// result = 1 ; 2 :
13616: LD_ADDR_VAR 0 1
13620: PUSH
13621: LD_INT 1
13623: ST_TO_ADDR
13624: GO 13665
13626: LD_INT 2
13628: DOUBLE
13629: EQUAL
13630: IFTRUE 13634
13632: GO 13645
13634: POP
// result = 2 ; 3 :
13635: LD_ADDR_VAR 0 1
13639: PUSH
13640: LD_INT 2
13642: ST_TO_ADDR
13643: GO 13665
13645: LD_INT 3
13647: DOUBLE
13648: EQUAL
13649: IFTRUE 13653
13651: GO 13664
13653: POP
// result = 3 ; end ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_INT 3
13661: ST_TO_ADDR
13662: GO 13665
13664: POP
// end ;
13665: LD_VAR 0 1
13669: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13670: LD_INT 0
13672: PPUSH
13673: PPUSH
13674: PPUSH
13675: PPUSH
13676: PPUSH
// for i = 1 to count do
13677: LD_ADDR_VAR 0 8
13681: PUSH
13682: DOUBLE
13683: LD_INT 1
13685: DEC
13686: ST_TO_ADDR
13687: LD_VAR 0 6
13691: PUSH
13692: FOR_TO
13693: IFFALSE 13774
// begin uc_side = side ;
13695: LD_ADDR_OWVAR 20
13699: PUSH
13700: LD_VAR 0 1
13704: ST_TO_ADDR
// uc_nation = nation ;
13705: LD_ADDR_OWVAR 21
13709: PUSH
13710: LD_VAR 0 2
13714: ST_TO_ADDR
// hc_gallery =  ;
13715: LD_ADDR_OWVAR 33
13719: PUSH
13720: LD_STRING 
13722: ST_TO_ADDR
// hc_name =  ;
13723: LD_ADDR_OWVAR 26
13727: PUSH
13728: LD_STRING 
13730: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13731: LD_INT 0
13733: PPUSH
13734: LD_VAR 0 5
13738: PPUSH
13739: LD_VAR 0 4
13743: PPUSH
13744: CALL_OW 380
// un = CreateHuman ;
13748: LD_ADDR_VAR 0 10
13752: PUSH
13753: CALL_OW 44
13757: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13758: LD_VAR 0 10
13762: PPUSH
13763: LD_VAR 0 3
13767: PPUSH
13768: CALL_OW 52
// end ;
13772: GO 13692
13774: POP
13775: POP
// end ;
13776: LD_VAR 0 7
13780: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13781: LD_INT 0
13783: PPUSH
13784: PPUSH
13785: PPUSH
13786: PPUSH
// for i = 1 to 72 do
13787: LD_ADDR_VAR 0 5
13791: PUSH
13792: DOUBLE
13793: LD_INT 1
13795: DEC
13796: ST_TO_ADDR
13797: LD_INT 72
13799: PUSH
13800: FOR_TO
13801: IFFALSE 13859
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13803: LD_VAR 0 5
13807: PPUSH
13808: LD_VAR 0 1
13812: PPUSH
13813: CALL_OW 321
13817: PUSH
13818: LD_INT 1
13820: EQUAL
13821: PUSH
13822: LD_VAR 0 5
13826: PPUSH
13827: LD_VAR 0 3
13831: PPUSH
13832: CALL_OW 482
13836: PUSH
13837: LD_INT 1
13839: EQUAL
13840: AND
13841: IFFALSE 13857
// AddComResearch ( lab , i ) ;
13843: LD_VAR 0 2
13847: PPUSH
13848: LD_VAR 0 5
13852: PPUSH
13853: CALL_OW 184
13857: GO 13800
13859: POP
13860: POP
// end ;
13861: LD_VAR 0 4
13865: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13866: LD_INT 0
13868: PPUSH
13869: PPUSH
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13874: LD_ADDR_VAR 0 8
13878: PUSH
13879: LD_VAR 0 2
13883: PPUSH
13884: CALL_OW 313
13888: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13889: LD_ADDR_VAR 0 9
13893: PUSH
13894: LD_VAR 0 3
13898: PPUSH
13899: LD_INT 22
13901: PUSH
13902: LD_VAR 0 1
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 25
13913: PUSH
13914: LD_INT 2
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 24
13923: PUSH
13924: LD_INT 750
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 3
13933: PUSH
13934: LD_INT 54
13936: PUSH
13937: EMPTY
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 70
13954: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13955: LD_ADDR_VAR 0 6
13959: PUSH
13960: LD_VAR 0 3
13964: PPUSH
13965: LD_INT 22
13967: PUSH
13968: LD_VAR 0 1
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 21
13979: PUSH
13980: LD_INT 3
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 3
13989: PUSH
13990: LD_INT 24
13992: PUSH
13993: LD_INT 1000
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: PPUSH
14012: CALL_OW 70
14016: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14017: LD_VAR 0 6
14021: NOT
14022: PUSH
14023: LD_INT 22
14025: PUSH
14026: LD_VAR 0 1
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 25
14037: PUSH
14038: LD_INT 2
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 24
14047: PUSH
14048: LD_INT 250
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: NOT
14065: AND
14066: IFFALSE 14070
// exit ;
14068: GO 14252
// if buildings_list > 0 and engineerOkInside then
14070: LD_VAR 0 6
14074: PUSH
14075: LD_INT 0
14077: GREATER
14078: PUSH
14079: LD_VAR 0 8
14083: AND
14084: IFFALSE 14095
// ComExitBuilding ( engineerOkInside ) ;
14086: LD_VAR 0 8
14090: PPUSH
14091: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14095: LD_VAR 0 6
14099: PUSH
14100: LD_INT 0
14102: GREATER
14103: PUSH
14104: LD_VAR 0 9
14108: PUSH
14109: LD_INT 0
14111: GREATER
14112: AND
14113: IFFALSE 14133
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14115: LD_VAR 0 9
14119: PPUSH
14120: LD_VAR 0 6
14124: PUSH
14125: LD_INT 1
14127: ARRAY
14128: PPUSH
14129: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14133: LD_VAR 0 6
14137: PUSH
14138: LD_INT 0
14140: EQUAL
14141: PUSH
14142: LD_VAR 0 4
14146: PUSH
14147: LD_INT 0
14149: EQUAL
14150: AND
14151: PUSH
14152: LD_VAR 0 9
14156: PUSH
14157: LD_INT 0
14159: GREATER
14160: AND
14161: IFFALSE 14177
// ComEnterUnit ( engineerOkOutside , building ) ;
14163: LD_VAR 0 9
14167: PPUSH
14168: LD_VAR 0 2
14172: PPUSH
14173: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14177: LD_VAR 0 9
14181: PUSH
14182: LD_INT 0
14184: GREATER
14185: PUSH
14186: LD_VAR 0 6
14190: PUSH
14191: LD_INT 0
14193: EQUAL
14194: AND
14195: PUSH
14196: LD_VAR 0 4
14200: PUSH
14201: LD_INT 0
14203: GREATER
14204: AND
14205: IFFALSE 14252
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14207: LD_VAR 0 9
14211: PPUSH
14212: LD_VAR 0 4
14216: PUSH
14217: LD_INT 1
14219: ARRAY
14220: PPUSH
14221: LD_VAR 0 4
14225: PUSH
14226: LD_INT 2
14228: ARRAY
14229: PPUSH
14230: LD_VAR 0 4
14234: PUSH
14235: LD_INT 3
14237: ARRAY
14238: PPUSH
14239: LD_VAR 0 4
14243: PUSH
14244: LD_INT 4
14246: ARRAY
14247: PPUSH
14248: CALL_OW 145
// end ;
14252: LD_VAR 0 5
14256: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
14261: PPUSH
14262: PPUSH
14263: PPUSH
14264: PPUSH
14265: PPUSH
14266: PPUSH
14267: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14268: LD_ADDR_VAR 0 6
14272: PUSH
14273: LD_INT 22
14275: PUSH
14276: LD_VAR 0 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 4
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 24
14297: PUSH
14298: LD_INT 251
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: PUSH
14315: LD_EXP 34
14319: PUSH
14320: EMPTY
14321: LIST
14322: DIFF
14323: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14324: LD_ADDR_VAR 0 7
14328: PUSH
14329: LD_VAR 0 3
14333: PPUSH
14334: LD_INT 22
14336: PUSH
14337: LD_VAR 0 1
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 25
14348: PUSH
14349: LD_INT 4
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 50
14358: PUSH
14359: EMPTY
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 70
14371: PUSH
14372: LD_EXP 34
14376: PUSH
14377: EMPTY
14378: LIST
14379: DIFF
14380: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14381: LD_ADDR_VAR 0 10
14385: PUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 22
14393: PUSH
14394: LD_VAR 0 1
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 21
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 3
14415: PUSH
14416: LD_INT 24
14418: PUSH
14419: LD_INT 750
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: PPUSH
14435: CALL_OW 70
14439: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14440: LD_ADDR_VAR 0 11
14444: PUSH
14445: LD_VAR 0 2
14449: PPUSH
14450: LD_INT 22
14452: PUSH
14453: LD_VAR 0 1
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 21
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: LD_INT 24
14477: PUSH
14478: LD_INT 1000
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 70
14498: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14499: LD_VAR 0 10
14503: PUSH
14504: LD_INT 0
14506: GREATER
14507: PUSH
14508: LD_VAR 0 6
14512: PUSH
14513: LD_INT 0
14515: GREATER
14516: AND
14517: IFFALSE 14533
// ComMoveToArea ( damageUnits , healArea ) ;
14519: LD_VAR 0 10
14523: PPUSH
14524: LD_VAR 0 2
14528: PPUSH
14529: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
14533: LD_VAR 0 11
14537: PUSH
14538: LD_INT 0
14540: GREATER
14541: PUSH
14542: LD_VAR 0 7
14546: PUSH
14547: LD_INT 0
14549: GREATER
14550: AND
14551: IFFALSE 14571
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
14553: LD_VAR 0 7
14557: PPUSH
14558: LD_VAR 0 11
14562: PUSH
14563: LD_INT 1
14565: ARRAY
14566: PPUSH
14567: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14571: LD_VAR 0 10
14575: PUSH
14576: LD_INT 0
14578: EQUAL
14579: PUSH
14580: LD_VAR 0 11
14584: PUSH
14585: LD_INT 0
14587: EQUAL
14588: AND
14589: PUSH
14590: LD_VAR 0 7
14594: PUSH
14595: LD_INT 0
14597: GREATER
14598: AND
14599: IFFALSE 14704
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14601: LD_ADDR_VAR 0 12
14605: PUSH
14606: LD_INT 22
14608: PUSH
14609: LD_VAR 0 1
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 21
14620: PUSH
14621: LD_INT 3
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 30
14630: PUSH
14631: LD_INT 8
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14648: LD_ADDR_VAR 0 13
14652: PUSH
14653: LD_INT 1
14655: PPUSH
14656: LD_VAR 0 12
14660: PPUSH
14661: CALL_OW 12
14665: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14666: LD_VAR 0 7
14670: PPUSH
14671: LD_INT 3
14673: PUSH
14674: LD_INT 60
14676: PUSH
14677: EMPTY
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PPUSH
14684: CALL_OW 72
14688: PPUSH
14689: LD_VAR 0 12
14693: PUSH
14694: LD_VAR 0 13
14698: ARRAY
14699: PPUSH
14700: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14704: LD_VAR 0 3
14708: PPUSH
14709: LD_INT 22
14711: PUSH
14712: LD_VAR 0 1
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 25
14723: PUSH
14724: LD_INT 3
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 24
14733: PUSH
14734: LD_INT 751
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: LIST
14745: PPUSH
14746: CALL_OW 70
14750: PUSH
14751: LD_INT 0
14753: GREATER
14754: PUSH
14755: LD_INT 21
14757: PPUSH
14758: CALL_OW 302
14762: AND
14763: PUSH
14764: LD_INT 21
14766: PPUSH
14767: CALL_OW 255
14771: PUSH
14772: LD_INT 3
14774: EQUAL
14775: AND
14776: IFFALSE 14832
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14778: LD_VAR 0 3
14782: PPUSH
14783: LD_INT 22
14785: PUSH
14786: LD_VAR 0 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 25
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 24
14807: PUSH
14808: LD_INT 751
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: PPUSH
14820: CALL_OW 70
14824: PPUSH
14825: LD_INT 21
14827: PPUSH
14828: CALL_OW 120
// end ;
14832: LD_VAR 0 5
14836: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14837: LD_INT 0
14839: PPUSH
14840: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14841: LD_INT 22
14843: PUSH
14844: LD_VAR 0 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 21
14855: PUSH
14856: LD_INT 2
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PPUSH
14867: CALL_OW 69
14871: PUSH
14872: LD_INT 18
14874: PPUSH
14875: LD_INT 22
14877: PUSH
14878: LD_VAR 0 1
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 21
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 70
14905: PUSH
14906: LD_VAR 0 3
14910: LESSEQUAL
14911: DIFF
14912: IFFALSE 14979
// for i = 1 to vehCount do
14914: LD_ADDR_VAR 0 9
14918: PUSH
14919: DOUBLE
14920: LD_INT 1
14922: DEC
14923: ST_TO_ADDR
14924: LD_VAR 0 3
14928: PUSH
14929: FOR_TO
14930: IFFALSE 14977
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_VAR 0 7
14941: PPUSH
14942: LD_VAR 0 5
14946: PPUSH
14947: LD_VAR 0 6
14951: PPUSH
14952: LD_VAR 0 4
14956: PUSH
14957: LD_INT 1
14959: PPUSH
14960: LD_VAR 0 4
14964: PPUSH
14965: CALL_OW 12
14969: ARRAY
14970: PPUSH
14971: CALL_OW 185
14975: GO 14929
14977: POP
14978: POP
// end ;
14979: LD_VAR 0 8
14983: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14984: LD_INT 0
14986: PPUSH
14987: PPUSH
14988: PPUSH
14989: PPUSH
14990: PPUSH
14991: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14992: LD_EXP 39
14996: PUSH
14997: LD_INT 3
14999: PUSH
15000: LD_INT 4
15002: PUSH
15003: LD_INT 4
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: PUSH
15011: LD_OWVAR 67
15015: ARRAY
15016: GREATEREQUAL
15017: PUSH
15018: LD_EXP 40
15022: PUSH
15023: LD_INT 1
15025: PUSH
15026: LD_INT 2
15028: PUSH
15029: LD_INT 2
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: PUSH
15037: LD_OWVAR 67
15041: ARRAY
15042: GREATEREQUAL
15043: AND
15044: IFFALSE 15277
// begin repeat wait ( 0 0$3 ) ;
15046: LD_INT 105
15048: PPUSH
15049: CALL_OW 67
// for j in russianTanks do
15053: LD_ADDR_VAR 0 4
15057: PUSH
15058: LD_EXP 39
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15265
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15066: LD_ADDR_VAR 0 6
15070: PUSH
15071: LD_INT 81
15073: PUSH
15074: LD_VAR 0 1
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 101
15085: PUSH
15086: LD_INT 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PPUSH
15102: LD_VAR 0 4
15106: PPUSH
15107: CALL_OW 74
15111: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15112: LD_ADDR_VAR 0 7
15116: PUSH
15117: LD_INT 81
15119: PUSH
15120: LD_VAR 0 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 101
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 2
15141: PUSH
15142: LD_INT 59
15144: PUSH
15145: EMPTY
15146: LIST
15147: PUSH
15148: LD_INT 21
15150: PUSH
15151: LD_INT 1
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 21
15160: PUSH
15161: LD_INT 2
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: PPUSH
15182: CALL_OW 69
15186: PPUSH
15187: LD_VAR 0 4
15191: PPUSH
15192: CALL_OW 74
15196: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
15197: LD_VAR 0 4
15201: PPUSH
15202: LD_VAR 0 6
15206: PPUSH
15207: CALL_OW 296
15211: PUSH
15212: LD_INT 8
15214: PLUS
15215: PUSH
15216: LD_VAR 0 4
15220: PPUSH
15221: LD_VAR 0 7
15225: PPUSH
15226: CALL_OW 296
15230: LESS
15231: IFFALSE 15249
// ComAttackUnit ( j , target1 ) else
15233: LD_VAR 0 4
15237: PPUSH
15238: LD_VAR 0 6
15242: PPUSH
15243: CALL_OW 115
15247: GO 15263
// ComAttackUnit ( j , target2 ) ;
15249: LD_VAR 0 4
15253: PPUSH
15254: LD_VAR 0 7
15258: PPUSH
15259: CALL_OW 115
// end ;
15263: GO 15063
15265: POP
15266: POP
// until russianTanks = 0 ;
15267: LD_EXP 39
15271: PUSH
15272: LD_INT 0
15274: EQUAL
15275: IFFALSE 15046
// end ; end ;
15277: LD_VAR 0 2
15281: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
15282: LD_INT 0
15284: PPUSH
15285: PPUSH
15286: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15287: LD_EXP 39
15291: PUSH
15292: LD_INT 1
15294: GREATEREQUAL
15295: PUSH
15296: LD_EXP 40
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: LD_INT 2
15306: PUSH
15307: LD_INT 2
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: PUSH
15315: LD_OWVAR 67
15319: ARRAY
15320: GREATEREQUAL
15321: AND
15322: IFFALSE 15461
// repeat wait ( 0 0$3 ) ;
15324: LD_INT 105
15326: PPUSH
15327: CALL_OW 67
// if russianTimeLapsers > 0 then
15331: LD_EXP 40
15335: PUSH
15336: LD_INT 0
15338: GREATER
15339: IFFALSE 15451
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
15341: LD_ADDR_VAR 0 3
15345: PUSH
15346: LD_EXP 40
15350: PPUSH
15351: LD_INT 3
15353: PUSH
15354: LD_INT 60
15356: PUSH
15357: EMPTY
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PPUSH
15364: CALL_OW 72
15368: PUSH
15369: FOR_IN
15370: IFFALSE 15449
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15372: LD_ADDR_VAR 0 4
15376: PUSH
15377: LD_INT 81
15379: PUSH
15380: LD_VAR 0 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 101
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PPUSH
15403: CALL_OW 69
15407: PPUSH
15408: LD_VAR 0 3
15412: PPUSH
15413: CALL_OW 74
15417: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
15418: LD_VAR 0 3
15422: PPUSH
15423: LD_VAR 0 4
15427: PPUSH
15428: CALL_OW 250
15432: PPUSH
15433: LD_VAR 0 4
15437: PPUSH
15438: CALL_OW 251
15442: PPUSH
15443: CALL_OW 111
// end ;
15447: GO 15369
15449: POP
15450: POP
// until russianTimeLapsers = 0 ;
15451: LD_EXP 40
15455: PUSH
15456: LD_INT 0
15458: EQUAL
15459: IFFALSE 15324
// end ;
15461: LD_VAR 0 2
15465: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
15473: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15474: LD_ADDR_VAR 0 6
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_VAR 0 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 25
15493: PUSH
15494: LD_INT 9
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 69
15509: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15510: LD_ADDR_VAR 0 7
15514: PUSH
15515: LD_INT 81
15517: PUSH
15518: LD_VAR 0 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 3
15529: PUSH
15530: LD_INT 21
15532: PUSH
15533: LD_INT 3
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15553: LD_ADDR_VAR 0 4
15557: PUSH
15558: LD_INT 1
15560: PPUSH
15561: LD_INT 3
15563: PPUSH
15564: CALL_OW 12
15568: ST_TO_ADDR
// for i = 1 to list do
15569: LD_ADDR_VAR 0 5
15573: PUSH
15574: DOUBLE
15575: LD_INT 1
15577: DEC
15578: ST_TO_ADDR
15579: LD_VAR 0 6
15583: PUSH
15584: FOR_TO
15585: IFFALSE 15787
// for ta in filter do
15587: LD_ADDR_VAR 0 3
15591: PUSH
15592: LD_VAR 0 7
15596: PUSH
15597: FOR_IN
15598: IFFALSE 15783
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15600: LD_VAR 0 6
15604: PUSH
15605: LD_VAR 0 5
15609: ARRAY
15610: PPUSH
15611: LD_VAR 0 3
15615: PPUSH
15616: CALL_OW 296
15620: PUSH
15621: LD_INT 15
15623: LESSEQUAL
15624: IFFALSE 15781
// begin case c of 1 :
15626: LD_VAR 0 4
15630: PUSH
15631: LD_INT 1
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 15677
15639: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15640: LD_VAR 0 6
15644: PUSH
15645: LD_VAR 0 5
15649: ARRAY
15650: PPUSH
15651: LD_VAR 0 3
15655: PPUSH
15656: CALL_OW 250
15660: PPUSH
15661: LD_VAR 0 3
15665: PPUSH
15666: CALL_OW 251
15670: PPUSH
15671: CALL_OW 154
15675: GO 15781
15677: LD_INT 2
15679: DOUBLE
15680: EQUAL
15681: IFTRUE 15685
15683: GO 15749
15685: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15686: LD_VAR 0 6
15690: PUSH
15691: LD_VAR 0 5
15695: ARRAY
15696: PPUSH
15697: LD_VAR 0 3
15701: PPUSH
15702: CALL_OW 250
15706: PUSH
15707: LD_INT 1
15709: NEG
15710: PPUSH
15711: LD_INT 1
15713: PPUSH
15714: CALL_OW 12
15718: PLUS
15719: PPUSH
15720: LD_VAR 0 3
15724: PPUSH
15725: CALL_OW 251
15729: PUSH
15730: LD_INT 1
15732: NEG
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 12
15741: PLUS
15742: PPUSH
15743: CALL_OW 153
15747: GO 15781
15749: LD_INT 3
15751: DOUBLE
15752: EQUAL
15753: IFTRUE 15757
15755: GO 15780
15757: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15758: LD_VAR 0 6
15762: PUSH
15763: LD_VAR 0 5
15767: ARRAY
15768: PPUSH
15769: LD_VAR 0 3
15773: PPUSH
15774: CALL_OW 115
15778: GO 15781
15780: POP
// end ; end ;
15781: GO 15597
15783: POP
15784: POP
15785: GO 15584
15787: POP
15788: POP
// end ;
15789: LD_VAR 0 2
15793: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15794: LD_INT 0
15796: PPUSH
15797: PPUSH
15798: PPUSH
15799: PPUSH
// r := 100 ;
15800: LD_ADDR_VAR 0 5
15804: PUSH
15805: LD_INT 100
15807: ST_TO_ADDR
// x := 0 ;
15808: LD_ADDR_VAR 0 6
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// while ( x < n ) do
15816: LD_VAR 0 6
15820: PUSH
15821: LD_VAR 0 2
15825: LESS
15826: IFFALSE 16113
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15828: LD_ADDR_VAR 0 4
15832: PUSH
15833: DOUBLE
15834: LD_INT 1
15836: DEC
15837: ST_TO_ADDR
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_INT 0
15845: PPUSH
15846: CALL_OW 517
15850: PUSH
15851: LD_INT 1
15853: ARRAY
15854: PUSH
15855: FOR_TO
15856: IFFALSE 16109
// begin if r > 50 then
15858: LD_VAR 0 5
15862: PUSH
15863: LD_INT 50
15865: GREATER
15866: IFFALSE 16085
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15868: LD_VAR 0 1
15872: PPUSH
15873: LD_INT 0
15875: PPUSH
15876: CALL_OW 517
15880: PUSH
15881: LD_INT 1
15883: ARRAY
15884: PUSH
15885: LD_VAR 0 4
15889: ARRAY
15890: PPUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: LD_INT 0
15898: PPUSH
15899: CALL_OW 517
15903: PUSH
15904: LD_INT 2
15906: ARRAY
15907: PUSH
15908: LD_VAR 0 4
15912: ARRAY
15913: PPUSH
15914: CALL_OW 458
15918: NOT
15919: IFFALSE 16069
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15921: LD_VAR 0 1
15925: PPUSH
15926: LD_INT 0
15928: PPUSH
15929: CALL_OW 517
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PUSH
15938: LD_VAR 0 4
15942: ARRAY
15943: PPUSH
15944: LD_VAR 0 1
15948: PPUSH
15949: LD_INT 0
15951: PPUSH
15952: CALL_OW 517
15956: PUSH
15957: LD_INT 2
15959: ARRAY
15960: PUSH
15961: LD_VAR 0 4
15965: ARRAY
15966: PPUSH
15967: LD_INT 5
15969: PPUSH
15970: LD_INT 0
15972: PPUSH
15973: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15977: LD_ADDR_EXP 42
15981: PUSH
15982: LD_EXP 42
15986: PPUSH
15987: LD_INT 1
15989: PPUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 517
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: PUSH
16007: LD_VAR 0 4
16011: ARRAY
16012: PUSH
16013: LD_VAR 0 1
16017: PPUSH
16018: LD_INT 0
16020: PPUSH
16021: CALL_OW 517
16025: PUSH
16026: LD_INT 2
16028: ARRAY
16029: PUSH
16030: LD_VAR 0 4
16034: ARRAY
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PPUSH
16040: CALL_OW 2
16044: ST_TO_ADDR
// r := 0 ;
16045: LD_ADDR_VAR 0 5
16049: PUSH
16050: LD_INT 0
16052: ST_TO_ADDR
// x := x + 1 ;
16053: LD_ADDR_VAR 0 6
16057: PUSH
16058: LD_VAR 0 6
16062: PUSH
16063: LD_INT 1
16065: PLUS
16066: ST_TO_ADDR
// end else
16067: GO 16083
// r := r + 35 ;
16069: LD_ADDR_VAR 0 5
16073: PUSH
16074: LD_VAR 0 5
16078: PUSH
16079: LD_INT 35
16081: PLUS
16082: ST_TO_ADDR
// end else
16083: GO 16107
// r := r + rand ( 10 , 25 ) ;
16085: LD_ADDR_VAR 0 5
16089: PUSH
16090: LD_VAR 0 5
16094: PUSH
16095: LD_INT 10
16097: PPUSH
16098: LD_INT 25
16100: PPUSH
16101: CALL_OW 12
16105: PLUS
16106: ST_TO_ADDR
// end ;
16107: GO 15855
16109: POP
16110: POP
16111: GO 15816
// end ;
16113: LD_VAR 0 3
16117: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
16118: LD_INT 0
16120: PPUSH
16121: PPUSH
16122: PPUSH
16123: PPUSH
// tmpTab = [ ] ;
16124: LD_ADDR_VAR 0 6
16128: PUSH
16129: EMPTY
16130: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
16131: LD_INT 22
16133: PUSH
16134: LD_VAR 0 1
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 32
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PPUSH
16157: CALL_OW 69
16161: PUSH
16162: LD_INT 0
16164: GREATER
16165: IFFALSE 16248
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
16167: LD_ADDR_VAR 0 4
16171: PUSH
16172: LD_INT 22
16174: PUSH
16175: LD_VAR 0 1
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 30
16186: PUSH
16187: LD_INT 32
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 69
16202: PUSH
16203: FOR_IN
16204: IFFALSE 16246
// begin for j in UnitsInside ( i ) do
16206: LD_ADDR_VAR 0 5
16210: PUSH
16211: LD_VAR 0 4
16215: PPUSH
16216: CALL_OW 313
16220: PUSH
16221: FOR_IN
16222: IFFALSE 16242
// tmpTab = tmpTab ^ j ;
16224: LD_ADDR_VAR 0 6
16228: PUSH
16229: LD_VAR 0 6
16233: PUSH
16234: LD_VAR 0 5
16238: ADD
16239: ST_TO_ADDR
16240: GO 16221
16242: POP
16243: POP
// end ;
16244: GO 16203
16246: POP
16247: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
16248: LD_VAR 0 6
16252: PPUSH
16253: LD_VAR 0 2
16257: PPUSH
16258: CALL_OW 250
16262: PPUSH
16263: LD_VAR 0 2
16267: PPUSH
16268: CALL_OW 251
16272: PPUSH
16273: CALL_OW 114
// end ;
16277: LD_VAR 0 3
16281: RET
// export function PrepareNature ; var i , un ; begin
16282: LD_INT 0
16284: PPUSH
16285: PPUSH
16286: PPUSH
// uc_side := 0 ;
16287: LD_ADDR_OWVAR 20
16291: PUSH
16292: LD_INT 0
16294: ST_TO_ADDR
// uc_nation := 0 ;
16295: LD_ADDR_OWVAR 21
16299: PUSH
16300: LD_INT 0
16302: ST_TO_ADDR
// InitHc ;
16303: CALL_OW 19
// hc_class := class_fish ;
16307: LD_ADDR_OWVAR 28
16311: PUSH
16312: LD_INT 20
16314: ST_TO_ADDR
// for i = 1 to 6 do
16315: LD_ADDR_VAR 0 2
16319: PUSH
16320: DOUBLE
16321: LD_INT 1
16323: DEC
16324: ST_TO_ADDR
16325: LD_INT 6
16327: PUSH
16328: FOR_TO
16329: IFFALSE 16348
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
16331: CALL_OW 44
16335: PPUSH
16336: LD_INT 23
16338: PPUSH
16339: LD_INT 0
16341: PPUSH
16342: CALL_OW 49
16346: GO 16328
16348: POP
16349: POP
// for i = 1 to Difficulty + 2 do
16350: LD_ADDR_VAR 0 2
16354: PUSH
16355: DOUBLE
16356: LD_INT 1
16358: DEC
16359: ST_TO_ADDR
16360: LD_OWVAR 67
16364: PUSH
16365: LD_INT 2
16367: PLUS
16368: PUSH
16369: FOR_TO
16370: IFFALSE 16479
// begin hc_sex = sex_male ;
16372: LD_ADDR_OWVAR 27
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// uc_side = 0 ;
16380: LD_ADDR_OWVAR 20
16384: PUSH
16385: LD_INT 0
16387: ST_TO_ADDR
// uc_nation = nation_nature ;
16388: LD_ADDR_OWVAR 21
16392: PUSH
16393: LD_INT 0
16395: ST_TO_ADDR
// hc_class = class_tiger ;
16396: LD_ADDR_OWVAR 28
16400: PUSH
16401: LD_INT 14
16403: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16404: LD_ADDR_OWVAR 31
16408: PUSH
16409: LD_EXP 37
16413: PUSH
16414: LD_INT 0
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: LD_INT 0
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16429: LD_ADDR_OWVAR 35
16433: PUSH
16434: LD_INT 5
16436: NEG
16437: PPUSH
16438: LD_INT 5
16440: PPUSH
16441: CALL_OW 12
16445: PUSH
16446: LD_OWVAR 67
16450: MUL
16451: ST_TO_ADDR
// un = CreateHuman ;
16452: LD_ADDR_VAR 0 3
16456: PUSH
16457: CALL_OW 44
16461: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16462: LD_VAR 0 3
16466: PPUSH
16467: LD_INT 24
16469: PPUSH
16470: LD_INT 0
16472: PPUSH
16473: CALL_OW 49
// end ;
16477: GO 16369
16479: POP
16480: POP
// for i = 1 to rand ( 3 , 4 ) do
16481: LD_ADDR_VAR 0 2
16485: PUSH
16486: DOUBLE
16487: LD_INT 1
16489: DEC
16490: ST_TO_ADDR
16491: LD_INT 3
16493: PPUSH
16494: LD_INT 4
16496: PPUSH
16497: CALL_OW 12
16501: PUSH
16502: FOR_TO
16503: IFFALSE 16595
// begin hc_sex = sex_male ;
16505: LD_ADDR_OWVAR 27
16509: PUSH
16510: LD_INT 1
16512: ST_TO_ADDR
// uc_side = 0 ;
16513: LD_ADDR_OWVAR 20
16517: PUSH
16518: LD_INT 0
16520: ST_TO_ADDR
// uc_nation = nation_nature ;
16521: LD_ADDR_OWVAR 21
16525: PUSH
16526: LD_INT 0
16528: ST_TO_ADDR
// hc_class = 18 ;
16529: LD_ADDR_OWVAR 28
16533: PUSH
16534: LD_INT 18
16536: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16537: LD_ADDR_OWVAR 31
16541: PUSH
16542: LD_INT 0
16544: PUSH
16545: LD_INT 0
16547: PUSH
16548: LD_INT 0
16550: PUSH
16551: LD_INT 0
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: ST_TO_ADDR
// hc_agressivity = 0 ;
16560: LD_ADDR_OWVAR 35
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// un = CreateHuman ;
16568: LD_ADDR_VAR 0 3
16572: PUSH
16573: CALL_OW 44
16577: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16578: LD_VAR 0 3
16582: PPUSH
16583: LD_INT 24
16585: PPUSH
16586: LD_INT 0
16588: PPUSH
16589: CALL_OW 49
// end ;
16593: GO 16502
16595: POP
16596: POP
// for i = 1 to rand ( 1 , 3 ) do
16597: LD_ADDR_VAR 0 2
16601: PUSH
16602: DOUBLE
16603: LD_INT 1
16605: DEC
16606: ST_TO_ADDR
16607: LD_INT 1
16609: PPUSH
16610: LD_INT 3
16612: PPUSH
16613: CALL_OW 12
16617: PUSH
16618: FOR_TO
16619: IFFALSE 16767
// begin hc_sex = sex_male ;
16621: LD_ADDR_OWVAR 27
16625: PUSH
16626: LD_INT 1
16628: ST_TO_ADDR
// uc_side = 0 ;
16629: LD_ADDR_OWVAR 20
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
// uc_nation = nation_nature ;
16637: LD_ADDR_OWVAR 21
16641: PUSH
16642: LD_INT 0
16644: ST_TO_ADDR
// hc_class = class_apeman ;
16645: LD_ADDR_OWVAR 28
16649: PUSH
16650: LD_INT 12
16652: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16653: LD_ADDR_OWVAR 31
16657: PUSH
16658: LD_EXP 36
16662: PPUSH
16663: LD_EXP 37
16667: PPUSH
16668: CALL_OW 12
16672: PUSH
16673: LD_EXP 36
16677: PPUSH
16678: LD_EXP 37
16682: PPUSH
16683: CALL_OW 12
16687: PUSH
16688: LD_EXP 36
16692: PPUSH
16693: LD_EXP 37
16697: PPUSH
16698: CALL_OW 12
16702: PUSH
16703: LD_EXP 36
16707: PPUSH
16708: LD_EXP 37
16712: PPUSH
16713: CALL_OW 12
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16724: LD_ADDR_OWVAR 35
16728: PUSH
16729: LD_INT 1
16731: PPUSH
16732: LD_INT 20
16734: PPUSH
16735: CALL_OW 12
16739: ST_TO_ADDR
// un = CreateHuman ;
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: CALL_OW 44
16749: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16750: LD_VAR 0 3
16754: PPUSH
16755: LD_INT 24
16757: PPUSH
16758: LD_INT 0
16760: PPUSH
16761: CALL_OW 49
// end ;
16765: GO 16618
16767: POP
16768: POP
// end ; end_of_file
16769: LD_VAR 0 1
16773: RET
// on UnitDestroyed ( unit ) do var i ;
16774: LD_INT 0
16776: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16777: LD_VAR 0 1
16781: PPUSH
16782: CALL_OW 255
16786: PUSH
16787: LD_INT 3
16789: EQUAL
16790: PUSH
16791: LD_VAR 0 1
16795: PPUSH
16796: CALL_OW 247
16800: PUSH
16801: LD_INT 1
16803: EQUAL
16804: AND
16805: IFFALSE 16869
// begin for i in RuScientists do
16807: LD_ADDR_VAR 0 2
16811: PUSH
16812: LD_EXP 34
16816: PUSH
16817: FOR_IN
16818: IFFALSE 16867
// if i = unit then
16820: LD_VAR 0 2
16824: PUSH
16825: LD_VAR 0 1
16829: EQUAL
16830: IFFALSE 16865
// begin RuScientists = RuScientists diff [ unit ] ;
16832: LD_ADDR_EXP 34
16836: PUSH
16837: LD_EXP 34
16841: PUSH
16842: LD_VAR 0 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: DIFF
16850: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16851: LD_ADDR_EXP 35
16855: PUSH
16856: LD_EXP 35
16860: PUSH
16861: LD_INT 1
16863: PLUS
16864: ST_TO_ADDR
// end ;
16865: GO 16817
16867: POP
16868: POP
// end ; end ;
16869: PPOPN 2
16871: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16872: LD_VAR 0 1
16876: PUSH
16877: LD_INT 10
16879: EQUAL
16880: PUSH
16881: LD_VAR 0 2
16885: PPUSH
16886: CALL_OW 255
16890: PUSH
16891: LD_INT 1
16893: EQUAL
16894: AND
16895: PUSH
16896: LD_EXP 45
16900: PUSH
16901: LD_INT 0
16903: EQUAL
16904: AND
16905: IFFALSE 17017
// begin eventVar1 = 1 ;
16907: LD_ADDR_EXP 45
16911: PUSH
16912: LD_INT 1
16914: ST_TO_ADDR
// teleportExplored = 1 ;
16915: LD_ADDR_EXP 33
16919: PUSH
16920: LD_INT 1
16922: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16923: LD_STRING M2a
16925: PPUSH
16926: CALL_OW 337
// wait ( 0 0$2 ) ;
16930: LD_INT 70
16932: PPUSH
16933: CALL_OW 67
// DialogueOn ;
16937: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16941: LD_INT 22
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 21
16953: PUSH
16954: LD_INT 1
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PPUSH
16965: CALL_OW 69
16969: PPUSH
16970: LD_STRING DT3a-Sol1-1
16972: PPUSH
16973: LD_STRING DT3a-FSol1-1
16975: PPUSH
16976: CALL 12986 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16980: LD_EXP 1
16984: PPUSH
16985: LD_STRING DT3a-JMM-1
16987: PPUSH
16988: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16992: LD_VAR 0 2
16996: PPUSH
16997: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17001: LD_EXP 1
17005: PPUSH
17006: LD_STRING DT3a-JMM-1a
17008: PPUSH
17009: CALL_OW 88
// DialogueOff ;
17013: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17017: LD_VAR 0 1
17021: PUSH
17022: LD_INT 10
17024: EQUAL
17025: PUSH
17026: LD_VAR 0 2
17030: PPUSH
17031: CALL_OW 247
17035: PUSH
17036: LD_INT 2
17038: EQUAL
17039: AND
17040: PUSH
17041: LD_VAR 0 2
17045: PPUSH
17046: CALL_OW 255
17050: PUSH
17051: LD_INT 3
17053: EQUAL
17054: AND
17055: PUSH
17056: LD_EXP 29
17060: PUSH
17061: LD_INT 0
17063: EQUAL
17064: AND
17065: IFFALSE 17082
// begin wait ( 0 0$3 ) ;
17067: LD_INT 105
17069: PPUSH
17070: CALL_OW 67
// vehicleTeleported = 1 ;
17074: LD_ADDR_EXP 29
17078: PUSH
17079: LD_INT 1
17081: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17082: LD_VAR 0 1
17086: PUSH
17087: LD_INT 10
17089: EQUAL
17090: PUSH
17091: LD_VAR 0 2
17095: PPUSH
17096: CALL_OW 247
17100: PUSH
17101: LD_INT 2
17103: EQUAL
17104: AND
17105: PUSH
17106: LD_VAR 0 2
17110: PPUSH
17111: CALL_OW 255
17115: PUSH
17116: LD_INT 3
17118: EQUAL
17119: AND
17120: PUSH
17121: LD_EXP 29
17125: PUSH
17126: LD_INT 2
17128: EQUAL
17129: AND
17130: IFFALSE 17147
// begin wait ( 0 0$3 ) ;
17132: LD_INT 105
17134: PPUSH
17135: CALL_OW 67
// vehicleTeleported = 3 ;
17139: LD_ADDR_EXP 29
17143: PUSH
17144: LD_INT 3
17146: ST_TO_ADDR
// end ; end ;
17147: PPOPN 2
17149: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
17150: LD_VAR 0 2
17154: PUSH
17155: LD_INT 21
17157: EQUAL
17158: PUSH
17159: LD_VAR 0 2
17163: PUSH
17164: LD_INT 112
17166: EQUAL
17167: OR
17168: IFFALSE 17301
// if GetSide ( vehicle ) = 3 then
17170: LD_VAR 0 1
17174: PPUSH
17175: CALL_OW 255
17179: PUSH
17180: LD_INT 3
17182: EQUAL
17183: IFFALSE 17301
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 264
17194: PUSH
17195: LD_INT 46
17197: EQUAL
17198: PUSH
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 264
17208: PUSH
17209: LD_INT 45
17211: EQUAL
17212: OR
17213: PUSH
17214: LD_VAR 0 1
17218: PPUSH
17219: CALL_OW 264
17223: PUSH
17224: LD_INT 44
17226: EQUAL
17227: OR
17228: IFFALSE 17258
// begin russianTanks = russianTanks ^ vehicle ;
17230: LD_ADDR_EXP 39
17234: PUSH
17235: LD_EXP 39
17239: PUSH
17240: LD_VAR 0 1
17244: ADD
17245: ST_TO_ADDR
// ComEnterUnit ( vehicle , ruteleprt ) ;
17246: LD_VAR 0 1
17250: PPUSH
17251: LD_INT 10
17253: PPUSH
17254: CALL_OW 120
// end ; if GetWeapon ( vehicle ) = 49 then
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 264
17267: PUSH
17268: LD_INT 49
17270: EQUAL
17271: IFFALSE 17301
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17273: LD_ADDR_EXP 40
17277: PUSH
17278: LD_EXP 40
17282: PUSH
17283: LD_VAR 0 1
17287: ADD
17288: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17289: LD_VAR 0 1
17293: PPUSH
17294: LD_INT 137
17296: PPUSH
17297: CALL_OW 120
// end ; end ; end ;
17301: PPOPN 2
17303: END
// on UnitGoesToRed ( unit ) do var i ;
17304: LD_INT 0
17306: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17307: LD_VAR 0 1
17311: PPUSH
17312: CALL_OW 255
17316: PUSH
17317: LD_INT 3
17319: EQUAL
17320: PUSH
17321: LD_VAR 0 1
17325: PPUSH
17326: CALL_OW 247
17330: PUSH
17331: LD_INT 2
17333: EQUAL
17334: AND
17335: IFFALSE 17453
// begin if russianTanks > 0 then
17337: LD_EXP 39
17341: PUSH
17342: LD_INT 0
17344: GREATER
17345: IFFALSE 17395
// for i in russianTanks do
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: LD_EXP 39
17356: PUSH
17357: FOR_IN
17358: IFFALSE 17393
// if i = unit then
17360: LD_VAR 0 2
17364: PUSH
17365: LD_VAR 0 1
17369: EQUAL
17370: IFFALSE 17391
// russianTanks = russianTanks diff [ unit ] ;
17372: LD_ADDR_EXP 39
17376: PUSH
17377: LD_EXP 39
17381: PUSH
17382: LD_VAR 0 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: DIFF
17390: ST_TO_ADDR
17391: GO 17357
17393: POP
17394: POP
// if russianTimeLapsers > 0 then
17395: LD_EXP 40
17399: PUSH
17400: LD_INT 0
17402: GREATER
17403: IFFALSE 17453
// for i in russianTimeLapsers do
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_EXP 40
17414: PUSH
17415: FOR_IN
17416: IFFALSE 17451
// if i = unit then
17418: LD_VAR 0 2
17422: PUSH
17423: LD_VAR 0 1
17427: EQUAL
17428: IFFALSE 17449
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17430: LD_ADDR_EXP 40
17434: PUSH
17435: LD_EXP 40
17439: PUSH
17440: LD_VAR 0 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: DIFF
17448: ST_TO_ADDR
17449: GO 17415
17451: POP
17452: POP
// end ; end ;
17453: PPOPN 2
17455: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17456: LD_VAR 0 2
17460: PPUSH
17461: CALL_OW 255
17465: PUSH
17466: LD_INT 3
17468: EQUAL
17469: PUSH
17470: LD_VAR 0 2
17474: PPUSH
17475: CALL_OW 257
17479: PUSH
17480: LD_INT 3
17482: EQUAL
17483: AND
17484: PUSH
17485: LD_INT 21
17487: PPUSH
17488: CALL_OW 255
17492: PUSH
17493: LD_INT 3
17495: EQUAL
17496: AND
17497: PUSH
17498: LD_INT 21
17500: PPUSH
17501: CALL_OW 302
17505: AND
17506: IFFALSE 17520
// ComEnterUnit ( human , ru_fact ) ;
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_INT 21
17515: PPUSH
17516: CALL_OW 120
// end ; end_of_file
17520: PPOPN 2
17522: END
// every 0 0$1 trigger ruAI = 1 do
17523: LD_EXP 41
17527: PUSH
17528: LD_INT 1
17530: EQUAL
17531: IFFALSE 17630
17533: GO 17535
17535: DISABLE
// begin enable ;
17536: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17537: LD_INT 3
17539: PPUSH
17540: LD_INT 6
17542: PPUSH
17543: LD_INT 9
17545: PPUSH
17546: LD_EXP 38
17550: PPUSH
17551: CALL 13866 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17555: LD_INT 3
17557: PPUSH
17558: LD_INT 4
17560: PPUSH
17561: LD_INT 10
17563: PPUSH
17564: LD_EXP 38
17568: PPUSH
17569: CALL 13866 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17573: LD_INT 3
17575: PPUSH
17576: LD_INT 16
17578: PPUSH
17579: LD_INT 9
17581: PPUSH
17582: LD_INT 91
17584: PPUSH
17585: CALL 14257 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17589: LD_INT 3
17591: PPUSH
17592: LD_INT 17
17594: PPUSH
17595: LD_INT 10
17597: PPUSH
17598: LD_INT 47
17600: PUSH
17601: LD_INT 129
17603: PUSH
17604: LD_INT 135
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PPUSH
17612: CALL 14257 0 4
// AttackVehicles ( 3 ) ;
17616: LD_INT 3
17618: PPUSH
17619: CALL 14984 0 1
// IntBazooka ( 3 ) ;
17623: LD_INT 3
17625: PPUSH
17626: CALL 15466 0 1
// end ;
17630: END
// every 0 0$1 do
17631: GO 17633
17633: DISABLE
// begin enable ;
17634: ENABLE
// TimeLapsersAI ( 3 ) ;
17635: LD_INT 3
17637: PPUSH
17638: CALL 15282 0 1
// end ;
17642: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17643: LD_INT 4
17645: PPUSH
17646: CALL_OW 303
17650: IFFALSE 17665
17652: GO 17654
17654: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17655: LD_INT 3
17657: PPUSH
17658: LD_INT 4
17660: PPUSH
17661: CALL 16118 0 2
17665: END
// every 0 0$1 do
17666: GO 17668
17668: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17669: LD_INT 3
17671: PPUSH
17672: LD_INT 91
17674: PPUSH
17675: LD_INT 3
17677: PPUSH
17678: CALL 13781 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17682: LD_INT 3
17684: PPUSH
17685: LD_INT 47
17687: PPUSH
17688: LD_INT 3
17690: PPUSH
17691: CALL 13781 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17695: LD_INT 3
17697: PPUSH
17698: LD_INT 129
17700: PPUSH
17701: LD_INT 3
17703: PPUSH
17704: CALL 13781 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17708: LD_INT 3
17710: PPUSH
17711: LD_INT 3
17713: PPUSH
17714: LD_INT 3
17716: PPUSH
17717: CALL 13781 0 3
// end ;
17721: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17722: LD_EXP 28
17726: PUSH
17727: LD_INT 2
17729: EQUAL
17730: PUSH
17731: LD_INT 22
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 50
17753: PUSH
17754: EMPTY
17755: LIST
17756: PUSH
17757: LD_INT 3
17759: PUSH
17760: LD_INT 58
17762: PUSH
17763: EMPTY
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: PPUSH
17776: CALL_OW 69
17780: PUSH
17781: LD_INT 18
17783: PPUSH
17784: LD_INT 22
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 21
17796: PUSH
17797: LD_INT 2
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PPUSH
17808: CALL_OW 70
17812: PUSH
17813: LD_INT 0
17815: EQUAL
17816: DIFF
17817: AND
17818: IFFALSE 17936
17820: GO 17822
17822: DISABLE
// begin enable ;
17823: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17824: LD_INT 3
17826: PPUSH
17827: LD_INT 21
17829: PPUSH
17830: LD_INT 3
17832: PUSH
17833: LD_INT 4
17835: PUSH
17836: LD_INT 4
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: LIST
17843: PUSH
17844: LD_OWVAR 67
17848: ARRAY
17849: PPUSH
17850: LD_INT 46
17852: PUSH
17853: LD_INT 45
17855: PUSH
17856: LD_INT 44
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: PPUSH
17864: LD_INT 3
17866: PPUSH
17867: LD_INT 3
17869: PPUSH
17870: LD_INT 24
17872: PPUSH
17873: CALL 14837 0 7
// if russianTimeLapsers = 0 then
17877: LD_EXP 40
17881: PUSH
17882: LD_INT 0
17884: EQUAL
17885: IFFALSE 17936
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17887: LD_INT 3
17889: PPUSH
17890: LD_INT 112
17892: PPUSH
17893: LD_INT 1
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: PUSH
17907: LD_OWVAR 67
17911: ARRAY
17912: PPUSH
17913: LD_INT 49
17915: PUSH
17916: LD_INT 49
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PPUSH
17923: LD_INT 3
17925: PPUSH
17926: LD_INT 3
17928: PPUSH
17929: LD_INT 24
17931: PPUSH
17932: CALL 14837 0 7
// end ;
17936: END
// every 0 0$1 trigger arabianMines do var i ;
17937: LD_EXP 42
17941: IFFALSE 18062
17943: GO 17945
17945: DISABLE
17946: LD_INT 0
17948: PPUSH
// begin enable ;
17949: ENABLE
// for i in arabianMines do
17950: LD_ADDR_VAR 0 1
17954: PUSH
17955: LD_EXP 42
17959: PUSH
17960: FOR_IN
17961: IFFALSE 18060
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17963: LD_INT 22
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 92
17975: PUSH
17976: LD_VAR 0 1
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PUSH
17985: LD_VAR 0 1
17989: PUSH
17990: LD_INT 2
17992: ARRAY
17993: PUSH
17994: LD_INT 3
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PPUSH
18007: CALL_OW 69
18011: IFFALSE 18058
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18013: LD_VAR 0 1
18017: PUSH
18018: LD_INT 1
18020: ARRAY
18021: PPUSH
18022: LD_VAR 0 1
18026: PUSH
18027: LD_INT 2
18029: ARRAY
18030: PPUSH
18031: LD_INT 5
18033: PPUSH
18034: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18038: LD_ADDR_EXP 42
18042: PUSH
18043: LD_EXP 42
18047: PPUSH
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 3
18057: ST_TO_ADDR
// end ; end ;
18058: GO 17960
18060: POP
18061: POP
// end ; end_of_file
18062: PPOPN 1
18064: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18065: LD_EXP 34
18069: PUSH
18070: EMPTY
18071: EQUAL
18072: PUSH
18073: LD_INT 3
18075: PPUSH
18076: CALL_OW 301
18080: AND
18081: IFFALSE 18286
18083: GO 18085
18085: DISABLE
// begin if sciCounter = 0 then
18086: LD_EXP 35
18090: PUSH
18091: LD_INT 0
18093: EQUAL
18094: IFFALSE 18120
// begin Say ( JMM , D7a-JMM-1 ) ;
18096: LD_EXP 1
18100: PPUSH
18101: LD_STRING D7a-JMM-1
18103: PPUSH
18104: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18108: LD_EXP 22
18112: PPUSH
18113: LD_STRING D7a-Pow-1
18115: PPUSH
18116: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18120: LD_EXP 35
18124: PUSH
18125: LD_INT 0
18127: GREATER
18128: PUSH
18129: LD_EXP 35
18133: PUSH
18134: LD_INT 6
18136: LESS
18137: AND
18138: IFFALSE 18164
// begin Say ( JMM , D7b-JMM-1 ) ;
18140: LD_EXP 1
18144: PPUSH
18145: LD_STRING D7b-JMM-1
18147: PPUSH
18148: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18152: LD_EXP 22
18156: PPUSH
18157: LD_STRING D7b-Pow-1
18159: PPUSH
18160: CALL_OW 94
// end ; if sciCounter = 6 then
18164: LD_EXP 35
18168: PUSH
18169: LD_INT 6
18171: EQUAL
18172: IFFALSE 18282
// begin Say ( JMM , D7c-JMM-1 ) ;
18174: LD_EXP 1
18178: PPUSH
18179: LD_STRING D7c-JMM-1
18181: PPUSH
18182: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18186: LD_EXP 22
18190: PPUSH
18191: LD_STRING D7c-Pow-1
18193: PPUSH
18194: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18198: LD_EXP 1
18202: PPUSH
18203: LD_STRING D7d-JMM-1
18205: PPUSH
18206: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18210: LD_EXP 22
18214: PPUSH
18215: LD_STRING D7d-Pow-1
18217: PPUSH
18218: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18222: LD_EXP 1
18226: PPUSH
18227: LD_STRING D7d-JMM-2
18229: PPUSH
18230: CALL_OW 88
// if askSiberite = 1 then
18234: LD_EXP 32
18238: PUSH
18239: LD_INT 1
18241: EQUAL
18242: IFFALSE 18258
// begin Say ( JMM , D7d-JMM-2a ) ;
18244: LD_EXP 1
18248: PPUSH
18249: LD_STRING D7d-JMM-2a
18251: PPUSH
18252: CALL_OW 88
// end else
18256: GO 18270
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18258: LD_EXP 22
18262: PPUSH
18263: LD_STRING D7d-Pow-2
18265: PPUSH
18266: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18270: LD_EXP 22
18274: PPUSH
18275: LD_STRING D7d-Pow-2a
18277: PPUSH
18278: CALL_OW 94
// end ; FinishMission ;
18282: CALL 18287 0 0
// end ;
18286: END
// export function FinishMission ; begin
18287: LD_INT 0
18289: PPUSH
// if teleportExplored = 1 then
18290: LD_EXP 33
18294: PUSH
18295: LD_INT 1
18297: EQUAL
18298: IFFALSE 18312
// AddMedal ( Teleport , 1 ) else
18300: LD_STRING Teleport
18302: PPUSH
18303: LD_INT 1
18305: PPUSH
18306: CALL_OW 101
18310: GO 18323
// AddMedal ( Teleport , - 1 ) ;
18312: LD_STRING Teleport
18314: PPUSH
18315: LD_INT 1
18317: NEG
18318: PPUSH
18319: CALL_OW 101
// if sciCounter > 2 then
18323: LD_EXP 35
18327: PUSH
18328: LD_INT 2
18330: GREATER
18331: IFFALSE 18345
// AddMedal ( Materials , 1 ) else
18333: LD_STRING Materials
18335: PPUSH
18336: LD_INT 1
18338: PPUSH
18339: CALL_OW 101
18343: GO 18356
// AddMedal ( Materials , - 1 ) ;
18345: LD_STRING Materials
18347: PPUSH
18348: LD_INT 1
18350: NEG
18351: PPUSH
18352: CALL_OW 101
// if sciCounter = 6 then
18356: LD_EXP 35
18360: PUSH
18361: LD_INT 6
18363: EQUAL
18364: IFFALSE 18388
// begin AddMedal ( Scientists , 1 ) ;
18366: LD_STRING Scientists
18368: PPUSH
18369: LD_INT 1
18371: PPUSH
18372: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18376: LD_INT 1
18378: PPUSH
18379: LD_STRING 12_SciDed_1
18381: PPUSH
18382: CALL_OW 39
// end else
18386: GO 18409
// begin AddMedal ( Scientists , - 1 ) ;
18388: LD_STRING Scientists
18390: PPUSH
18391: LD_INT 1
18393: NEG
18394: PPUSH
18395: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18399: LD_INT 0
18401: PPUSH
18402: LD_STRING 12_SciDed_1
18404: PPUSH
18405: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18409: LD_EXP 31
18413: PPUSH
18414: LD_STRING 12_MainDepositFake_1
18416: PPUSH
18417: CALL_OW 39
// GiveMedals ( MAIN ) ;
18421: LD_STRING MAIN
18423: PPUSH
18424: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18428: LD_INT 22
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 21
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: LD_INT 25
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 25
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 25
18483: PUSH
18484: LD_INT 4
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 25
18493: PUSH
18494: LD_INT 5
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 25
18503: PUSH
18504: LD_INT 8
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: LIST
18524: PPUSH
18525: CALL_OW 69
18529: PPUSH
18530: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18534: LD_EXP 1
18538: PPUSH
18539: LD_EXP 44
18543: PUSH
18544: LD_STRING JMM
18546: STR
18547: PPUSH
18548: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18552: LD_EXP 7
18556: PPUSH
18557: LD_EXP 44
18561: PUSH
18562: LD_STRING Brown
18564: STR
18565: PPUSH
18566: CALL 12935 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18570: LD_EXP 3
18574: PPUSH
18575: LD_EXP 44
18579: PUSH
18580: LD_STRING Donaldson
18582: STR
18583: PPUSH
18584: CALL 12935 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18588: LD_EXP 4
18592: PPUSH
18593: LD_EXP 44
18597: PUSH
18598: LD_STRING Bobby
18600: STR
18601: PPUSH
18602: CALL 12935 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18606: LD_EXP 5
18610: PPUSH
18611: LD_EXP 44
18615: PUSH
18616: LD_STRING Cyrus
18618: STR
18619: PPUSH
18620: CALL 12935 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18624: LD_EXP 2
18628: PPUSH
18629: LD_EXP 44
18633: PUSH
18634: LD_STRING Lisa
18636: STR
18637: PPUSH
18638: CALL 12935 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18642: LD_EXP 12
18646: PPUSH
18647: LD_EXP 44
18651: PUSH
18652: LD_STRING Frank
18654: STR
18655: PPUSH
18656: CALL 12935 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18660: LD_EXP 13
18664: PPUSH
18665: LD_EXP 44
18669: PUSH
18670: LD_STRING Kikuchi
18672: STR
18673: PPUSH
18674: CALL 12935 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18678: LD_EXP 9
18682: PPUSH
18683: LD_EXP 44
18687: PUSH
18688: LD_STRING Houten
18690: STR
18691: PPUSH
18692: CALL 12935 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18696: LD_EXP 11
18700: PPUSH
18701: LD_EXP 44
18705: PUSH
18706: LD_STRING Gary
18708: STR
18709: PPUSH
18710: CALL 12935 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18714: LD_EXP 10
18718: PPUSH
18719: LD_EXP 44
18723: PUSH
18724: LD_STRING Cornell
18726: STR
18727: PPUSH
18728: CALL 12935 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18732: LD_EXP 6
18736: PPUSH
18737: LD_EXP 44
18741: PUSH
18742: LD_STRING Denis
18744: STR
18745: PPUSH
18746: CALL 12935 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18750: LD_EXP 8
18754: PPUSH
18755: LD_EXP 44
18759: PUSH
18760: LD_STRING Gladstone
18762: STR
18763: PPUSH
18764: CALL 12935 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18768: LD_INT 50
18770: PUSH
18771: EMPTY
18772: LIST
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 21
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: LD_INT 25
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 25
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 25
18819: PUSH
18820: LD_INT 3
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 25
18829: PUSH
18830: LD_INT 4
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 25
18839: PUSH
18840: LD_INT 5
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 25
18849: PUSH
18850: LD_INT 8
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: PPUSH
18872: CALL_OW 69
18876: PUSH
18877: LD_EXP 1
18881: PUSH
18882: LD_EXP 7
18886: PUSH
18887: LD_EXP 3
18891: PUSH
18892: LD_EXP 4
18896: PUSH
18897: LD_EXP 5
18901: PUSH
18902: LD_EXP 2
18906: PUSH
18907: LD_EXP 12
18911: PUSH
18912: LD_EXP 8
18916: PUSH
18917: LD_EXP 13
18921: PUSH
18922: LD_EXP 6
18926: PUSH
18927: LD_EXP 9
18931: PUSH
18932: LD_EXP 11
18936: PUSH
18937: LD_EXP 10
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: DIFF
18957: PPUSH
18958: LD_STRING 12_other_survivors
18960: PPUSH
18961: CALL_OW 38
// YouWin ;
18965: CALL_OW 103
// end ; end_of_file
18969: LD_VAR 0 1
18973: RET
// every 0 0$1 trigger IsDead ( JMM ) do
18974: LD_EXP 1
18978: PPUSH
18979: CALL_OW 301
18983: IFFALSE 18995
18985: GO 18987
18987: DISABLE
// YouLost ( JMM ) ; end_of_file
18988: LD_STRING JMM
18990: PPUSH
18991: CALL_OW 104
18995: END
// every 0 0$30 do
18996: GO 18998
18998: DISABLE
// begin enable ;
18999: ENABLE
// if cratesSpawned < 6 then
19000: LD_EXP 43
19004: PUSH
19005: LD_INT 6
19007: LESS
19008: IFFALSE 19045
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19010: LD_INT 3
19012: PPUSH
19013: LD_INT 5
19015: PPUSH
19016: CALL_OW 12
19020: PPUSH
19021: LD_INT 21
19023: PPUSH
19024: LD_INT 1
19026: PPUSH
19027: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19031: LD_ADDR_EXP 43
19035: PUSH
19036: LD_EXP 43
19040: PUSH
19041: LD_INT 1
19043: PLUS
19044: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19045: LD_EXP 43
19049: PUSH
19050: LD_INT 6
19052: GREATEREQUAL
19053: PUSH
19054: LD_EXP 43
19058: PUSH
19059: LD_INT 12
19061: LESS
19062: AND
19063: IFFALSE 19107
// begin wait ( 0 0$30 ) ;
19065: LD_INT 1050
19067: PPUSH
19068: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19072: LD_INT 3
19074: PPUSH
19075: LD_INT 5
19077: PPUSH
19078: CALL_OW 12
19082: PPUSH
19083: LD_INT 21
19085: PPUSH
19086: LD_INT 1
19088: PPUSH
19089: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19093: LD_ADDR_EXP 43
19097: PUSH
19098: LD_EXP 43
19102: PUSH
19103: LD_INT 1
19105: PLUS
19106: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 15 then
19107: LD_EXP 43
19111: PUSH
19112: LD_INT 12
19114: GREATEREQUAL
19115: PUSH
19116: LD_EXP 43
19120: PUSH
19121: LD_INT 15
19123: LESS
19124: AND
19125: IFFALSE 19169
// begin wait ( 1 1$30 ) ;
19127: LD_INT 3150
19129: PPUSH
19130: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19134: LD_INT 3
19136: PPUSH
19137: LD_INT 5
19139: PPUSH
19140: CALL_OW 12
19144: PPUSH
19145: LD_INT 21
19147: PPUSH
19148: LD_INT 1
19150: PPUSH
19151: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19155: LD_ADDR_EXP 43
19159: PUSH
19160: LD_EXP 43
19164: PUSH
19165: LD_INT 1
19167: PLUS
19168: ST_TO_ADDR
// end ; if cratesSpawned >= 15 then
19169: LD_EXP 43
19173: PUSH
19174: LD_INT 15
19176: GREATEREQUAL
19177: IFFALSE 19180
// disable ;
19179: DISABLE
// end ;
19180: END
