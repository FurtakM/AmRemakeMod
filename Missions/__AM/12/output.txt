// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17171 0 0
// PrepareDifficulty ;
 195: CALL 13551 0 0
// PrepareVehicles ;
 199: CALL 1547 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1123 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2866 0 0
// PrepareWestBase ;
 227: CALL 3378 0 0
// PrepareEastBase ;
 231: CALL 2938 0 0
// PrepareOtherRussians ;
 235: CALL 3490 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11c_others
 575: PPUSH
 576: CALL_OW 31
 580: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 581: LD_ADDR_EXP 1
 585: PUSH
 586: LD_STRING 11_JMM
 588: PPUSH
 589: LD_INT 1
 591: PPUSH
 592: CALL 13190 0 2
 596: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 597: LD_EXP 1
 601: PPUSH
 602: LD_INT 1
 604: PPUSH
 605: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 609: LD_EXP 1
 613: PPUSH
 614: LD_INT 22
 616: PUSH
 617: LD_INT 1
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 21
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 58
 636: PUSH
 637: EMPTY
 638: LIST
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: PPUSH
 645: CALL_OW 69
 649: PUSH
 650: LD_INT 1
 652: ARRAY
 653: PPUSH
 654: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 658: LD_STRING 11_Lisa
 660: PPUSH
 661: CALL_OW 28
 665: PUSH
 666: LD_INT 1
 668: EQUAL
 669: IFFALSE 716
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 671: LD_ADDR_EXP 2
 675: PUSH
 676: LD_STRING 11_Lisa
 678: PPUSH
 679: LD_INT 1
 681: PPUSH
 682: CALL 13190 0 2
 686: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 687: LD_EXP 2
 691: PPUSH
 692: LD_INT 1
 694: PPUSH
 695: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 699: LD_EXP 2
 703: PPUSH
 704: LD_INT 4
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: CALL_OW 49
// end else
 714: GO 732
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 716: LD_INT 4
 718: PPUSH
 719: LD_INT 0
 721: PPUSH
 722: LD_INT 1
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: CALL 1123 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 732: LD_STRING 11_Donaldson
 734: PPUSH
 735: CALL_OW 28
 739: PUSH
 740: LD_INT 1
 742: EQUAL
 743: IFFALSE 790
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 745: LD_ADDR_EXP 3
 749: PUSH
 750: LD_STRING 11_Donaldson
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 13190 0 2
 760: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 761: LD_EXP 3
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 773: LD_EXP 3
 777: PPUSH
 778: LD_INT 4
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end else
 788: GO 806
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 790: LD_INT 4
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL 1123 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 806: LD_STRING 11_Cyrus
 808: PPUSH
 809: CALL_OW 28
 813: PUSH
 814: LD_INT 1
 816: EQUAL
 817: IFFALSE 864
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 819: LD_ADDR_EXP 5
 823: PUSH
 824: LD_STRING 11_Cyrus
 826: PPUSH
 827: LD_INT 1
 829: PPUSH
 830: CALL 13190 0 2
 834: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 835: LD_EXP 5
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 847: LD_EXP 5
 851: PPUSH
 852: LD_INT 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// end else
 862: GO 880
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 864: LD_INT 4
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL 1123 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 880: LD_STRING 11_Denis
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_INT 1
 890: EQUAL
 891: IFFALSE 938
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 893: LD_ADDR_EXP 6
 897: PUSH
 898: LD_STRING 11_Denis
 900: PPUSH
 901: LD_INT 1
 903: PPUSH
 904: CALL 13190 0 2
 908: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 909: LD_EXP 6
 913: PPUSH
 914: LD_INT 4
 916: PPUSH
 917: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_INT 4
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end else
 936: GO 954
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 938: LD_INT 4
 940: PPUSH
 941: LD_INT 0
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL 1123 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 954: LD_STRING 11_Frank
 956: PPUSH
 957: CALL_OW 28
 961: PUSH
 962: LD_INT 1
 964: EQUAL
 965: IFFALSE 1012
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 967: LD_ADDR_EXP 12
 971: PUSH
 972: LD_STRING 11_Frank
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL 13190 0 2
 982: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 983: LD_EXP 12
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 995: LD_EXP 12
 999: PPUSH
1000: LD_INT 4
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: CALL_OW 49
// end else
1010: GO 1028
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1012: LD_INT 4
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL 1123 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1028: LD_STRING 11_Cornell
1030: PPUSH
1031: CALL_OW 28
1035: PUSH
1036: LD_INT 1
1038: EQUAL
1039: IFFALSE 1086
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1041: LD_ADDR_EXP 10
1045: PUSH
1046: LD_STRING 11_Cornell
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: CALL 13190 0 2
1056: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1057: LD_EXP 10
1061: PPUSH
1062: LD_INT 1
1064: PPUSH
1065: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1069: LD_EXP 10
1073: PPUSH
1074: LD_INT 4
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL_OW 49
// end else
1084: GO 1102
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1086: LD_INT 4
1088: PPUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL 1123 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1102: LD_ADDR_EXP 22
1106: PUSH
1107: LD_STRING Powell
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL 13190 0 2
1117: ST_TO_ADDR
// end ;
1118: LD_VAR 0 1
1122: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1123: LD_INT 0
1125: PPUSH
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
// if mech = 1 then
1130: LD_VAR 0 4
1134: PUSH
1135: LD_INT 1
1137: EQUAL
1138: IFFALSE 1373
// begin if others11 > 0 then
1140: LD_EXP 14
1144: PUSH
1145: LD_INT 0
1147: GREATER
1148: IFFALSE 1313
// begin for i := 1 to others11 - 1 do
1150: LD_ADDR_VAR 0 6
1154: PUSH
1155: DOUBLE
1156: LD_INT 1
1158: DEC
1159: ST_TO_ADDR
1160: LD_EXP 14
1164: PUSH
1165: LD_INT 1
1167: MINUS
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1250
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1172: LD_EXP 14
1176: PUSH
1177: LD_VAR 0 6
1181: ARRAY
1182: PPUSH
1183: LD_INT 3
1185: PPUSH
1186: CALL_OW 259
1190: PUSH
1191: LD_EXP 14
1195: PUSH
1196: LD_VAR 0 6
1200: PUSH
1201: LD_INT 1
1203: PLUS
1204: ARRAY
1205: PPUSH
1206: LD_INT 3
1208: PPUSH
1209: CALL_OW 259
1213: LESS
1214: IFFALSE 1248
// begin mecha = others11 [ i + 1 ] ;
1216: LD_ADDR_VAR 0 9
1220: PUSH
1221: LD_EXP 14
1225: PUSH
1226: LD_VAR 0 6
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1236: LD_VAR 0 9
1240: PPUSH
1241: LD_INT 3
1243: PPUSH
1244: CALL_OW 336
// end ; end ;
1248: GO 1169
1250: POP
1251: POP
// if spawnMode = 1 then
1252: LD_VAR 0 3
1256: PUSH
1257: LD_INT 1
1259: EQUAL
1260: IFFALSE 1281
// PlaceUnitArea ( mecha , area , false ) else
1262: LD_VAR 0 9
1266: PPUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: LD_INT 0
1274: PPUSH
1275: CALL_OW 49
1279: GO 1295
// PlaceHumanInUnit ( mecha , veh ) ;
1281: LD_VAR 0 9
1285: PPUSH
1286: LD_VAR 0 2
1290: PPUSH
1291: CALL_OW 52
// others11 = others11 diff mecha ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 9
1309: DIFF
1310: ST_TO_ADDR
// end else
1311: GO 1371
// begin hc_name =  ;
1313: LD_ADDR_OWVAR 26
1317: PUSH
1318: LD_STRING 
1320: ST_TO_ADDR
// hc_gallery =  ;
1321: LD_ADDR_OWVAR 33
1325: PUSH
1326: LD_STRING 
1328: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 7
1334: PPUSH
1335: LD_INT 9
1337: PPUSH
1338: CALL_OW 12
1342: PPUSH
1343: CALL_OW 383
// un = CreateHuman ;
1347: LD_ADDR_VAR 0 7
1351: PUSH
1352: CALL_OW 44
1356: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1357: LD_VAR 0 7
1361: PPUSH
1362: LD_VAR 0 2
1366: PPUSH
1367: CALL_OW 52
// end ; end else
1371: GO 1542
// begin if others11 > 0 then
1373: LD_EXP 14
1377: PUSH
1378: LD_INT 0
1380: GREATER
1381: IFFALSE 1454
// begin if spawnMode = 1 then
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: EQUAL
1391: IFFALSE 1416
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1393: LD_EXP 14
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PPUSH
1402: LD_VAR 0 1
1406: PPUSH
1407: LD_INT 0
1409: PPUSH
1410: CALL_OW 49
1414: GO 1434
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1416: LD_EXP 14
1420: PUSH
1421: LD_INT 1
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 2
1429: PPUSH
1430: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1434: LD_ADDR_EXP 14
1438: PUSH
1439: LD_EXP 14
1443: PPUSH
1444: LD_INT 1
1446: PPUSH
1447: CALL_OW 3
1451: ST_TO_ADDR
// end else
1452: GO 1542
// begin hc_name =  ;
1454: LD_ADDR_OWVAR 26
1458: PUSH
1459: LD_STRING 
1461: ST_TO_ADDR
// hc_gallery =  ;
1462: LD_ADDR_OWVAR 33
1466: PUSH
1467: LD_STRING 
1469: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1470: LD_INT 0
1472: PPUSH
1473: LD_INT 1
1475: PUSH
1476: LD_INT 2
1478: PUSH
1479: LD_INT 3
1481: PUSH
1482: LD_INT 4
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: PUSH
1491: LD_INT 1
1493: PPUSH
1494: LD_INT 4
1496: PPUSH
1497: CALL_OW 12
1501: ARRAY
1502: PPUSH
1503: LD_INT 7
1505: PPUSH
1506: LD_INT 9
1508: PPUSH
1509: CALL_OW 12
1513: PPUSH
1514: CALL_OW 380
// un = CreateHuman ;
1518: LD_ADDR_VAR 0 7
1522: PUSH
1523: CALL_OW 44
1527: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1528: LD_VAR 0 7
1532: PPUSH
1533: LD_VAR 0 2
1537: PPUSH
1538: CALL_OW 52
// end ; end ; end ;
1542: LD_VAR 0 5
1546: RET
// export function PrepareVehicles ; var veh ; begin
1547: LD_INT 0
1549: PPUSH
1550: PPUSH
// uc_side = 1 ;
1551: LD_ADDR_OWVAR 20
1555: PUSH
1556: LD_INT 1
1558: ST_TO_ADDR
// uc_nation = 1 ;
1559: LD_ADDR_OWVAR 21
1563: PUSH
1564: LD_INT 1
1566: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1567: LD_ADDR_OWVAR 37
1571: PUSH
1572: LD_INT 3
1574: ST_TO_ADDR
// vc_engine = 3 ;
1575: LD_ADDR_OWVAR 39
1579: PUSH
1580: LD_INT 3
1582: ST_TO_ADDR
// vc_control = 3 ;
1583: LD_ADDR_OWVAR 38
1587: PUSH
1588: LD_INT 3
1590: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1591: LD_ADDR_OWVAR 40
1595: PUSH
1596: LD_INT 4
1598: ST_TO_ADDR
// veh = CreateVehicle ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: CALL_OW 45
1608: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1609: LD_VAR 0 2
1613: PPUSH
1614: LD_INT 4
1616: PPUSH
1617: LD_INT 0
1619: PPUSH
1620: CALL_OW 49
// vc_weapon = us_double_gun ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 5
1631: ST_TO_ADDR
// vc_control = 1 ;
1632: LD_ADDR_OWVAR 38
1636: PUSH
1637: LD_INT 1
1639: ST_TO_ADDR
// veh = CreateVehicle ;
1640: LD_ADDR_VAR 0 2
1644: PUSH
1645: CALL_OW 45
1649: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1650: LD_VAR 0 2
1654: PPUSH
1655: LD_INT 4
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 49
// vc_weapon = us_light_gun ;
1665: LD_ADDR_OWVAR 40
1669: PUSH
1670: LD_INT 3
1672: ST_TO_ADDR
// vc_control = 3 ;
1673: LD_ADDR_OWVAR 38
1677: PUSH
1678: LD_INT 3
1680: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1681: LD_ADDR_OWVAR 37
1685: PUSH
1686: LD_INT 2
1688: ST_TO_ADDR
// veh = CreateVehicle ;
1689: LD_ADDR_VAR 0 2
1693: PUSH
1694: CALL_OW 45
1698: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1699: LD_VAR 0 2
1703: PPUSH
1704: LD_INT 4
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1714: LD_ADDR_OWVAR 40
1718: PUSH
1719: LD_INT 4
1721: ST_TO_ADDR
// veh = CreateVehicle ;
1722: LD_ADDR_VAR 0 2
1726: PUSH
1727: CALL_OW 45
1731: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1732: LD_VAR 0 2
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// end ;
1747: LD_VAR 0 1
1751: RET
// export function PowellSupport1 ; var veh , un ; begin
1752: LD_INT 0
1754: PPUSH
1755: PPUSH
1756: PPUSH
// uc_side = 1 ;
1757: LD_ADDR_OWVAR 20
1761: PUSH
1762: LD_INT 1
1764: ST_TO_ADDR
// uc_nation = 1 ;
1765: LD_ADDR_OWVAR 21
1769: PUSH
1770: LD_INT 1
1772: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1773: LD_STRING 11_Brown
1775: PPUSH
1776: CALL_OW 28
1780: PUSH
1781: LD_INT 1
1783: EQUAL
1784: IFFALSE 1831
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1786: LD_ADDR_EXP 7
1790: PUSH
1791: LD_STRING 11_Brown
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: CALL 13190 0 2
1801: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1802: LD_EXP 7
1806: PPUSH
1807: LD_INT 2
1809: PPUSH
1810: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1814: LD_EXP 7
1818: PPUSH
1819: LD_INT 4
1821: PPUSH
1822: LD_INT 0
1824: PPUSH
1825: CALL_OW 49
// end else
1829: GO 1847
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1831: LD_INT 4
1833: PPUSH
1834: LD_INT 0
1836: PPUSH
1837: LD_INT 1
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL 1123 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1847: LD_STRING 11_Gary
1849: PPUSH
1850: CALL_OW 28
1854: PUSH
1855: LD_INT 1
1857: EQUAL
1858: IFFALSE 1905
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1860: LD_ADDR_EXP 11
1864: PUSH
1865: LD_STRING 11_Gary
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: CALL 13190 0 2
1875: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1876: LD_EXP 11
1880: PPUSH
1881: LD_INT 2
1883: PPUSH
1884: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1888: LD_EXP 11
1892: PPUSH
1893: LD_INT 4
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// end else
1903: GO 1921
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1905: LD_INT 4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 1123 0 4
// end ; vc_chassis = us_medium_tracked ;
1921: LD_ADDR_OWVAR 37
1925: PUSH
1926: LD_INT 3
1928: ST_TO_ADDR
// vc_engine = 3 ;
1929: LD_ADDR_OWVAR 39
1933: PUSH
1934: LD_INT 3
1936: ST_TO_ADDR
// vc_control = 1 ;
1937: LD_ADDR_OWVAR 38
1941: PUSH
1942: LD_INT 1
1944: ST_TO_ADDR
// vc_weapon = us_crane ;
1945: LD_ADDR_OWVAR 40
1949: PUSH
1950: LD_INT 13
1952: ST_TO_ADDR
// veh = CreateVehicle ;
1953: LD_ADDR_VAR 0 2
1957: PUSH
1958: CALL_OW 45
1962: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1963: LD_VAR 0 2
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_INT 4
1982: PPUSH
1983: LD_INT 0
1985: PPUSH
1986: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
1990: LD_INT 4
1992: PPUSH
1993: LD_VAR 0 2
1997: PPUSH
1998: LD_INT 2
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: CALL 1123 0 4
// vc_weapon = 9 ;
2008: LD_ADDR_OWVAR 40
2012: PUSH
2013: LD_INT 9
2015: ST_TO_ADDR
// veh = CreateVehicle ;
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: CALL_OW 45
2025: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2026: LD_VAR 0 2
2030: PPUSH
2031: LD_INT 4
2033: PPUSH
2034: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2038: LD_VAR 0 2
2042: PPUSH
2043: LD_INT 4
2045: PPUSH
2046: LD_INT 0
2048: PPUSH
2049: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2053: LD_INT 4
2055: PPUSH
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 2
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 1123 0 4
// vc_control = 3 ;
2071: LD_ADDR_OWVAR 38
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2079: LD_ADDR_OWVAR 40
2083: PUSH
2084: LD_INT 12
2086: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2087: LD_ADDR_EXP 15
2091: PUSH
2092: CALL_OW 45
2096: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2097: LD_ADDR_EXP 16
2101: PUSH
2102: CALL_OW 45
2106: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2107: LD_EXP 15
2111: PPUSH
2112: LD_INT 4
2114: PPUSH
2115: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2119: LD_EXP 16
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2131: LD_EXP 15
2135: PPUSH
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2146: LD_EXP 16
2150: PPUSH
2151: LD_INT 4
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2161: LD_EXP 15
2165: PPUSH
2166: LD_INT 3
2168: PPUSH
2169: LD_INT 100
2171: PPUSH
2172: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2176: LD_EXP 16
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: LD_INT 80
2186: PPUSH
2187: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2191: LD_EXP 16
2195: PPUSH
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 20
2201: PPUSH
2202: CALL_OW 291
// end ;
2206: LD_VAR 0 1
2210: RET
// export function PowellSupport2 ; var veh , un ; begin
2211: LD_INT 0
2213: PPUSH
2214: PPUSH
2215: PPUSH
// uc_side = 1 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// uc_nation = 1 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2232: LD_ADDR_OWVAR 37
2236: PUSH
2237: LD_INT 2
2239: ST_TO_ADDR
// vc_engine = 3 ;
2240: LD_ADDR_OWVAR 39
2244: PUSH
2245: LD_INT 3
2247: ST_TO_ADDR
// vc_control = 3 ;
2248: LD_ADDR_OWVAR 38
2252: PUSH
2253: LD_INT 3
2255: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2256: LD_ADDR_OWVAR 40
2260: PUSH
2261: LD_INT 3
2263: ST_TO_ADDR
// veh = CreateVehicle ;
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: CALL_OW 45
2273: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 4
2281: PPUSH
2282: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_INT 4
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 49
// vc_control = 1 ;
2301: LD_ADDR_OWVAR 38
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2309: LD_ADDR_OWVAR 37
2313: PUSH
2314: LD_INT 2
2316: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2317: LD_ADDR_OWVAR 40
2321: PUSH
2322: LD_INT 5
2324: ST_TO_ADDR
// veh = CreateVehicle ;
2325: LD_ADDR_VAR 0 2
2329: PUSH
2330: CALL_OW 45
2334: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2335: LD_VAR 0 2
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2347: LD_VAR 0 2
2351: PPUSH
2352: LD_INT 4
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2362: LD_STRING 11_Bobby
2364: PPUSH
2365: CALL_OW 28
2369: PUSH
2370: LD_INT 1
2372: EQUAL
2373: IFFALSE 2419
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2375: LD_ADDR_EXP 4
2379: PUSH
2380: LD_STRING 11_Bobby
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: CALL 13190 0 2
2390: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2391: LD_EXP 4
2395: PPUSH
2396: LD_INT 3
2398: PPUSH
2399: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2403: LD_EXP 4
2407: PPUSH
2408: LD_VAR 0 2
2412: PPUSH
2413: CALL_OW 52
// end else
2417: GO 2437
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2419: LD_INT 0
2421: PPUSH
2422: LD_VAR 0 2
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: LD_INT 0
2432: PPUSH
2433: CALL 1123 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2437: LD_STRING 11_Houten
2439: PPUSH
2440: CALL_OW 28
2444: PUSH
2445: LD_INT 1
2447: EQUAL
2448: IFFALSE 2495
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2450: LD_ADDR_EXP 9
2454: PUSH
2455: LD_STRING 11_Houten
2457: PPUSH
2458: LD_INT 1
2460: PPUSH
2461: CALL 13190 0 2
2465: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2466: LD_EXP 9
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2478: LD_EXP 9
2482: PPUSH
2483: LD_INT 4
2485: PPUSH
2486: LD_INT 0
2488: PPUSH
2489: CALL_OW 49
// end else
2493: GO 2511
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2495: LD_INT 4
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: LD_INT 1
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL 1123 0 4
// end ; vc_control = 3 ;
2511: LD_ADDR_OWVAR 38
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2519: LD_ADDR_OWVAR 40
2523: PUSH
2524: LD_INT 12
2526: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2527: LD_ADDR_EXP 17
2531: PUSH
2532: CALL_OW 45
2536: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2537: LD_EXP 17
2541: PPUSH
2542: LD_INT 4
2544: PPUSH
2545: CALL_OW 233
// amCargo4 = CreateVehicle ;
2549: LD_ADDR_EXP 18
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2559: LD_EXP 18
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// amCargo5 = CreateVehicle ;
2571: LD_ADDR_EXP 19
2575: PUSH
2576: CALL_OW 45
2580: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2581: LD_EXP 19
2585: PPUSH
2586: LD_INT 4
2588: PPUSH
2589: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2593: LD_EXP 17
2597: PPUSH
2598: LD_INT 4
2600: PPUSH
2601: LD_INT 0
2603: PPUSH
2604: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2608: LD_EXP 18
2612: PPUSH
2613: LD_INT 4
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2623: LD_EXP 19
2627: PPUSH
2628: LD_INT 4
2630: PPUSH
2631: LD_INT 0
2633: PPUSH
2634: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2638: LD_EXP 17
2642: PPUSH
2643: LD_INT 1
2645: PPUSH
2646: LD_INT 100
2648: PPUSH
2649: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2653: LD_EXP 18
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 100
2663: PPUSH
2664: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: LD_INT 100
2678: PPUSH
2679: CALL_OW 291
// end ;
2683: LD_VAR 0 1
2687: RET
// export function PowellSupport3 ; var veh , un ; begin
2688: LD_INT 0
2690: PPUSH
2691: PPUSH
2692: PPUSH
// uc_side = 1 ;
2693: LD_ADDR_OWVAR 20
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// uc_nation = 1 ;
2701: LD_ADDR_OWVAR 21
2705: PUSH
2706: LD_INT 1
2708: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: LD_INT 0
2720: PPUSH
2721: CALL 1123 0 4
// vc_chassis = us_medium_wheeled ;
2725: LD_ADDR_OWVAR 37
2729: PUSH
2730: LD_INT 2
2732: ST_TO_ADDR
// vc_engine = 3 ;
2733: LD_ADDR_OWVAR 39
2737: PUSH
2738: LD_INT 3
2740: ST_TO_ADDR
// vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2757: LD_ADDR_EXP 20
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2767: LD_ADDR_EXP 21
2771: PUSH
2772: CALL_OW 45
2776: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2777: LD_EXP 20
2781: PPUSH
2782: LD_INT 4
2784: PPUSH
2785: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2789: LD_EXP 21
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2801: LD_EXP 20
2805: PPUSH
2806: LD_INT 4
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2816: LD_EXP 21
2820: PPUSH
2821: LD_INT 4
2823: PPUSH
2824: LD_INT 0
2826: PPUSH
2827: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2831: LD_EXP 20
2835: PPUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_INT 100
2841: PPUSH
2842: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2846: LD_EXP 21
2850: PPUSH
2851: LD_INT 3
2853: PPUSH
2854: LD_INT 100
2856: PPUSH
2857: CALL_OW 291
// end ; end_of_file
2861: LD_VAR 0 1
2865: RET
// export function PrepareRussianCommander ; begin
2866: LD_INT 0
2868: PPUSH
// uc_side = 3 ;
2869: LD_ADDR_OWVAR 20
2873: PUSH
2874: LD_INT 3
2876: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2877: LD_ADDR_EXP 23
2881: PUSH
2882: LD_STRING Davidov
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL 13190 0 2
2892: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2893: LD_EXP 23
2897: PPUSH
2898: LD_INT 3
2900: PPUSH
2901: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2905: LD_ADDR_EXP 35
2909: PUSH
2910: LD_EXP 35
2914: PUSH
2915: LD_EXP 23
2919: ADD
2920: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2921: LD_EXP 35
2925: PPUSH
2926: LD_INT 4
2928: PPUSH
2929: CALL_OW 336
// end ;
2933: LD_VAR 0 1
2937: RET
// export function PrepareEastBase ; var i , un ; begin
2938: LD_INT 0
2940: PPUSH
2941: PPUSH
2942: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2943: LD_INT 3
2945: PPUSH
2946: LD_INT 3
2948: PPUSH
2949: LD_INT 121
2951: PPUSH
2952: LD_EXP 37
2956: PPUSH
2957: LD_EXP 38
2961: PPUSH
2962: CALL_OW 12
2966: PPUSH
2967: LD_INT 1
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL 13982 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2977: LD_INT 3
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: LD_INT 121
2985: PPUSH
2986: LD_EXP 37
2990: PPUSH
2991: LD_EXP 38
2995: PPUSH
2996: CALL_OW 12
3000: PPUSH
3001: LD_INT 9
3003: PPUSH
3004: LD_INT 3
3006: PPUSH
3007: CALL 13982 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3011: LD_INT 3
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 4
3019: PPUSH
3020: LD_EXP 37
3024: PPUSH
3025: LD_EXP 38
3029: PPUSH
3030: CALL_OW 12
3034: PPUSH
3035: LD_INT 2
3037: PPUSH
3038: LD_INT 6
3040: PPUSH
3041: CALL 13982 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 3
3050: PPUSH
3051: LD_INT 112
3053: PPUSH
3054: LD_EXP 37
3058: PPUSH
3059: LD_EXP 38
3063: PPUSH
3064: CALL_OW 12
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 6
3074: PPUSH
3075: CALL 13982 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3079: LD_INT 3
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 47
3087: PPUSH
3088: LD_EXP 37
3092: PPUSH
3093: LD_EXP 38
3097: PPUSH
3098: CALL_OW 12
3102: PPUSH
3103: LD_INT 4
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL 13982 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: LD_INT 129
3121: PPUSH
3122: LD_EXP 37
3126: PPUSH
3127: LD_EXP 38
3131: PPUSH
3132: CALL_OW 12
3136: PPUSH
3137: LD_INT 4
3139: PPUSH
3140: LD_INT 6
3142: PPUSH
3143: CALL 13982 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3147: LD_INT 3
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_INT 135
3155: PPUSH
3156: LD_EXP 37
3160: PPUSH
3161: LD_EXP 38
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: LD_INT 4
3173: PPUSH
3174: LD_INT 6
3176: PPUSH
3177: CALL 13982 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3181: LD_ADDR_VAR 0 2
3185: PUSH
3186: LD_INT 22
3188: PUSH
3189: LD_INT 3
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: LD_INT 30
3198: PUSH
3199: LD_INT 32
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PUSH
3215: FOR_IN
3216: IFFALSE 3256
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 3
3223: PPUSH
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_EXP 37
3233: PPUSH
3234: LD_EXP 38
3238: PPUSH
3239: CALL_OW 12
3243: PPUSH
3244: LD_INT 1
3246: PPUSH
3247: LD_INT 1
3249: PPUSH
3250: CALL 13982 0 6
3254: GO 3215
3256: POP
3257: POP
// for i = 1 to 5 do
3258: LD_ADDR_VAR 0 2
3262: PUSH
3263: DOUBLE
3264: LD_INT 1
3266: DEC
3267: ST_TO_ADDR
3268: LD_INT 5
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3371
// begin uc_side = 3 ;
3274: LD_ADDR_OWVAR 20
3278: PUSH
3279: LD_INT 3
3281: ST_TO_ADDR
// uc_nation = 3 ;
3282: LD_ADDR_OWVAR 21
3286: PUSH
3287: LD_INT 3
3289: ST_TO_ADDR
// hc_gallery =  ;
3290: LD_ADDR_OWVAR 33
3294: PUSH
3295: LD_STRING 
3297: ST_TO_ADDR
// hc_name =  ;
3298: LD_ADDR_OWVAR 26
3302: PUSH
3303: LD_STRING 
3305: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3306: LD_INT 0
3308: PPUSH
3309: LD_INT 4
3311: PPUSH
3312: LD_EXP 37
3316: PPUSH
3317: LD_EXP 38
3321: PPUSH
3322: CALL_OW 12
3326: PPUSH
3327: CALL_OW 380
// un = CreateHuman ;
3331: LD_ADDR_VAR 0 3
3335: PUSH
3336: CALL_OW 44
3340: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3341: LD_VAR 0 3
3345: PPUSH
3346: LD_INT 3
3348: PPUSH
3349: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3353: LD_ADDR_EXP 35
3357: PUSH
3358: LD_EXP 35
3362: PUSH
3363: LD_VAR 0 3
3367: ADD
3368: ST_TO_ADDR
// end ;
3369: GO 3271
3371: POP
3372: POP
// end ;
3373: LD_VAR 0 1
3377: RET
// export function PrepareWestBase ; var i , un ; begin
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3383: LD_INT 3
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: LD_INT 6
3391: PPUSH
3392: LD_EXP 37
3396: PPUSH
3397: LD_EXP 38
3401: PPUSH
3402: CALL_OW 12
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL 13982 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3417: LD_INT 3
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: LD_INT 91
3425: PPUSH
3426: LD_EXP 37
3430: PPUSH
3431: LD_EXP 38
3435: PPUSH
3436: CALL_OW 12
3440: PPUSH
3441: LD_INT 4
3443: PPUSH
3444: LD_INT 3
3446: PPUSH
3447: CALL 13982 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 3
3456: PPUSH
3457: LD_INT 21
3459: PPUSH
3460: LD_EXP 37
3464: PPUSH
3465: LD_EXP 38
3469: PPUSH
3470: CALL_OW 12
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: LD_INT 6
3480: PPUSH
3481: CALL 13982 0 6
// end ;
3485: LD_VAR 0 1
3489: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3490: LD_INT 0
3492: PPUSH
3493: PPUSH
3494: PPUSH
3495: PPUSH
// uc_side = 3 ;
3496: LD_ADDR_OWVAR 20
3500: PUSH
3501: LD_INT 3
3503: ST_TO_ADDR
// uc_nation = 3 ;
3504: LD_ADDR_OWVAR 21
3508: PUSH
3509: LD_INT 3
3511: ST_TO_ADDR
// for i = 1 to 5 do
3512: LD_ADDR_VAR 0 2
3516: PUSH
3517: DOUBLE
3518: LD_INT 1
3520: DEC
3521: ST_TO_ADDR
3522: LD_INT 5
3524: PUSH
3525: FOR_TO
3526: IFFALSE 3596
// begin hc_gallery =  ;
3528: LD_ADDR_OWVAR 33
3532: PUSH
3533: LD_STRING 
3535: ST_TO_ADDR
// hc_name =  ;
3536: LD_ADDR_OWVAR 26
3540: PUSH
3541: LD_STRING 
3543: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3544: LD_INT 0
3546: PPUSH
3547: LD_INT 9
3549: PPUSH
3550: LD_EXP 37
3554: PPUSH
3555: LD_EXP 38
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: CALL_OW 380
// un = CreateHuman ;
3569: LD_ADDR_VAR 0 3
3573: PUSH
3574: CALL_OW 44
3578: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3579: LD_VAR 0 3
3583: PPUSH
3584: LD_INT 8
3586: PPUSH
3587: LD_INT 0
3589: PPUSH
3590: CALL_OW 49
// end ;
3594: GO 3525
3596: POP
3597: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3598: LD_ADDR_VAR 0 2
3602: PUSH
3603: DOUBLE
3604: LD_INT 1
3606: DEC
3607: ST_TO_ADDR
3608: LD_INT 2
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_OWVAR 67
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3699
// begin hc_gallery =  ;
3631: LD_ADDR_OWVAR 33
3635: PUSH
3636: LD_STRING 
3638: ST_TO_ADDR
// hc_name =  ;
3639: LD_ADDR_OWVAR 26
3643: PUSH
3644: LD_STRING 
3646: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3647: LD_INT 0
3649: PPUSH
3650: LD_INT 4
3652: PPUSH
3653: LD_EXP 37
3657: PPUSH
3658: LD_EXP 38
3662: PPUSH
3663: CALL_OW 12
3667: PPUSH
3668: CALL_OW 380
// un = CreateHuman ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: CALL_OW 44
3681: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3682: LD_VAR 0 3
3686: PPUSH
3687: LD_INT 8
3689: PPUSH
3690: LD_INT 0
3692: PPUSH
3693: CALL_OW 49
// end ;
3697: GO 3628
3699: POP
3700: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_INT 3
3713: PUSH
3714: LD_INT 4
3716: PUSH
3717: LD_INT 5
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: LD_OWVAR 67
3729: ARRAY
3730: PUSH
3731: FOR_TO
3732: IFFALSE 3928
// begin vc_engine = 3 ;
3734: LD_ADDR_OWVAR 39
3738: PUSH
3739: LD_INT 3
3741: ST_TO_ADDR
// vc_control = 1 ;
3742: LD_ADDR_OWVAR 38
3746: PUSH
3747: LD_INT 1
3749: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3750: LD_ADDR_OWVAR 40
3754: PUSH
3755: LD_INT 42
3757: PUSH
3758: LD_INT 43
3760: PUSH
3761: LD_INT 44
3763: PUSH
3764: LD_INT 45
3766: PUSH
3767: LD_INT 46
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 5
3782: PPUSH
3783: CALL_OW 12
3787: ARRAY
3788: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3789: LD_OWVAR 40
3793: PUSH
3794: LD_INT 46
3796: EQUAL
3797: IFFALSE 3809
// vc_chassis = ru_heavy_tracked else
3799: LD_ADDR_OWVAR 37
3803: PUSH
3804: LD_INT 24
3806: ST_TO_ADDR
3807: GO 3836
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3809: LD_ADDR_OWVAR 37
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 21
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 1
3826: PPUSH
3827: LD_INT 2
3829: PPUSH
3830: CALL_OW 12
3834: ARRAY
3835: ST_TO_ADDR
// veh = CreateVehicle ;
3836: LD_ADDR_VAR 0 4
3840: PUSH
3841: CALL_OW 45
3845: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3846: LD_VAR 0 4
3850: PPUSH
3851: LD_INT 3
3853: PPUSH
3854: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3858: LD_VAR 0 4
3862: PPUSH
3863: LD_INT 5
3865: PPUSH
3866: LD_INT 0
3868: PPUSH
3869: CALL_OW 49
// hc_gallery =  ;
3873: LD_ADDR_OWVAR 33
3877: PUSH
3878: LD_STRING 
3880: ST_TO_ADDR
// hc_name =  ;
3881: LD_ADDR_OWVAR 26
3885: PUSH
3886: LD_STRING 
3888: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3889: LD_INT 0
3891: PPUSH
3892: LD_INT 3
3894: PPUSH
3895: LD_INT 10
3897: PPUSH
3898: CALL_OW 380
// un = CreateHuman ;
3902: LD_ADDR_VAR 0 3
3906: PUSH
3907: CALL_OW 44
3911: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3912: LD_VAR 0 3
3916: PPUSH
3917: LD_VAR 0 4
3921: PPUSH
3922: CALL_OW 52
// end ;
3926: GO 3731
3928: POP
3929: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3930: LD_ADDR_VAR 0 2
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_INT 3
3942: PUSH
3943: LD_INT 4
3945: PUSH
3946: LD_INT 5
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: LIST
3953: PUSH
3954: LD_OWVAR 67
3958: ARRAY
3959: PUSH
3960: FOR_TO
3961: IFFALSE 4108
// begin vc_engine = 3 ;
3963: LD_ADDR_OWVAR 39
3967: PUSH
3968: LD_INT 3
3970: ST_TO_ADDR
// vc_control = 3 ;
3971: LD_ADDR_OWVAR 38
3975: PUSH
3976: LD_INT 3
3978: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3979: LD_ADDR_OWVAR 40
3983: PUSH
3984: LD_INT 42
3986: PUSH
3987: LD_INT 43
3989: PUSH
3990: LD_INT 44
3992: PUSH
3993: LD_INT 45
3995: PUSH
3996: LD_INT 46
3998: PUSH
3999: LD_INT 49
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 1
4012: PPUSH
4013: LD_INT 5
4015: PPUSH
4016: CALL_OW 12
4020: ARRAY
4021: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4022: LD_OWVAR 40
4026: PUSH
4027: LD_INT 46
4029: EQUAL
4030: IFFALSE 4042
// vc_chassis = ru_heavy_tracked else
4032: LD_ADDR_OWVAR 37
4036: PUSH
4037: LD_INT 24
4039: ST_TO_ADDR
4040: GO 4069
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4042: LD_ADDR_OWVAR 37
4046: PUSH
4047: LD_INT 22
4049: PUSH
4050: LD_INT 21
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 1
4059: PPUSH
4060: LD_INT 2
4062: PPUSH
4063: CALL_OW 12
4067: ARRAY
4068: ST_TO_ADDR
// veh = CreateVehicle ;
4069: LD_ADDR_VAR 0 4
4073: PUSH
4074: CALL_OW 45
4078: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_INT 3
4086: PPUSH
4087: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4091: LD_VAR 0 4
4095: PPUSH
4096: LD_INT 6
4098: PPUSH
4099: LD_INT 0
4101: PPUSH
4102: CALL_OW 49
// end ;
4106: GO 3960
4108: POP
4109: POP
// end ; end_of_file
4110: LD_VAR 0 1
4114: RET
// export function PrepareKurt ; begin
4115: LD_INT 0
4117: PPUSH
// uc_side = 8 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 8
4125: ST_TO_ADDR
// uc_nation = 2 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 2
4133: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4134: LD_ADDR_OWVAR 37
4138: PUSH
4139: LD_INT 13
4141: ST_TO_ADDR
// vc_engine = 1 ;
4142: LD_ADDR_OWVAR 39
4146: PUSH
4147: LD_INT 1
4149: ST_TO_ADDR
// vc_control = 1 ;
4150: LD_ADDR_OWVAR 38
4154: PUSH
4155: LD_INT 1
4157: ST_TO_ADDR
// vc_weapon = 24 ;
4158: LD_ADDR_OWVAR 40
4162: PUSH
4163: LD_INT 24
4165: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4166: LD_ADDR_EXP 26
4170: PUSH
4171: CALL_OW 45
4175: ST_TO_ADDR
// if kurtStatus > 0 then
4176: LD_EXP 27
4180: PUSH
4181: LD_INT 0
4183: GREATER
4184: IFFALSE 4233
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4186: LD_ADDR_EXP 24
4190: PUSH
4191: LD_STRING Kurt
4193: PPUSH
4194: LD_INT 0
4196: PPUSH
4197: CALL 13190 0 2
4201: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4202: LD_EXP 26
4206: PPUSH
4207: LD_INT 4
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4217: LD_EXP 24
4221: PPUSH
4222: LD_EXP 26
4226: PPUSH
4227: CALL_OW 52
// end else
4231: GO 4298
// begin hc_name =  ;
4233: LD_ADDR_OWVAR 26
4237: PUSH
4238: LD_STRING 
4240: ST_TO_ADDR
// hc_gallery =  ;
4241: LD_ADDR_OWVAR 33
4245: PUSH
4246: LD_STRING 
4248: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4249: LD_INT 1
4251: PPUSH
4252: LD_INT 10
4254: PPUSH
4255: CALL_OW 381
// otherKurt = CreateHuman ;
4259: LD_ADDR_EXP 25
4263: PUSH
4264: CALL_OW 44
4268: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4269: LD_EXP 26
4273: PPUSH
4274: LD_INT 4
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4284: LD_EXP 25
4288: PPUSH
4289: LD_EXP 26
4293: PPUSH
4294: CALL_OW 52
// end ; end ;
4298: LD_VAR 0 1
4302: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4303: LD_INT 0
4305: PPUSH
4306: PPUSH
4307: PPUSH
4308: PPUSH
// for i = 1 to 3 do
4309: LD_ADDR_VAR 0 2
4313: PUSH
4314: DOUBLE
4315: LD_INT 1
4317: DEC
4318: ST_TO_ADDR
4319: LD_INT 3
4321: PUSH
4322: FOR_TO
4323: IFFALSE 4460
// begin uc_side = 1 ;
4325: LD_ADDR_OWVAR 20
4329: PUSH
4330: LD_INT 1
4332: ST_TO_ADDR
// uc_nation = 2 ;
4333: LD_ADDR_OWVAR 21
4337: PUSH
4338: LD_INT 2
4340: ST_TO_ADDR
// hc_gallery =  ;
4341: LD_ADDR_OWVAR 33
4345: PUSH
4346: LD_STRING 
4348: ST_TO_ADDR
// hc_name =  ;
4349: LD_ADDR_OWVAR 26
4353: PUSH
4354: LD_STRING 
4356: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4357: LD_EXP 27
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: PUSH
4366: LD_EXP 27
4370: PUSH
4371: LD_INT 2
4373: EQUAL
4374: OR
4375: IFFALSE 4400
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4377: LD_INT 0
4379: PPUSH
4380: LD_INT 1
4382: PPUSH
4383: LD_INT 2
4385: PPUSH
4386: LD_INT 4
4388: PPUSH
4389: CALL_OW 12
4393: PPUSH
4394: CALL_OW 380
4398: GO 4421
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4400: LD_INT 0
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_INT 6
4408: PPUSH
4409: LD_INT 8
4411: PPUSH
4412: CALL_OW 12
4416: PPUSH
4417: CALL_OW 380
// un = CreateHuman ;
4421: LD_ADDR_VAR 0 3
4425: PUSH
4426: CALL_OW 44
4430: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4431: LD_VAR 0 3
4435: PPUSH
4436: LD_INT 4
4438: PPUSH
4439: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: LD_INT 0
4453: PPUSH
4454: CALL_OW 49
// end ;
4458: GO 4322
4460: POP
4461: POP
// vc_chassis = 14 ;
4462: LD_ADDR_OWVAR 37
4466: PUSH
4467: LD_INT 14
4469: ST_TO_ADDR
// vc_engine = 3 ;
4470: LD_ADDR_OWVAR 39
4474: PUSH
4475: LD_INT 3
4477: ST_TO_ADDR
// vc_control = 1 ;
4478: LD_ADDR_OWVAR 38
4482: PUSH
4483: LD_INT 1
4485: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4486: LD_ADDR_OWVAR 40
4490: PUSH
4491: LD_INT 27
4493: PUSH
4494: LD_INT 26
4496: PUSH
4497: LD_INT 28
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 1
4507: PPUSH
4508: LD_INT 3
4510: PPUSH
4511: CALL_OW 12
4515: ARRAY
4516: ST_TO_ADDR
// veh = CreateVehicle ;
4517: LD_ADDR_VAR 0 4
4521: PUSH
4522: CALL_OW 45
4526: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4527: LD_VAR 0 4
4531: PPUSH
4532: LD_INT 4
4534: PPUSH
4535: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4539: LD_VAR 0 4
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4554: LD_EXP 27
4558: PUSH
4559: LD_INT 0
4561: EQUAL
4562: PUSH
4563: LD_EXP 27
4567: PUSH
4568: LD_INT 2
4570: EQUAL
4571: OR
4572: IFFALSE 4597
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4574: LD_INT 0
4576: PPUSH
4577: LD_INT 3
4579: PPUSH
4580: LD_INT 2
4582: PPUSH
4583: LD_INT 4
4585: PPUSH
4586: CALL_OW 12
4590: PPUSH
4591: CALL_OW 380
4595: GO 4618
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4597: LD_INT 0
4599: PPUSH
4600: LD_INT 3
4602: PPUSH
4603: LD_INT 6
4605: PPUSH
4606: LD_INT 8
4608: PPUSH
4609: CALL_OW 12
4613: PPUSH
4614: CALL_OW 380
// un = CreateHuman ;
4618: LD_ADDR_VAR 0 3
4622: PUSH
4623: CALL_OW 44
4627: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4628: LD_VAR 0 3
4632: PPUSH
4633: LD_VAR 0 4
4637: PPUSH
4638: CALL_OW 52
// vc_chassis = 14 ;
4642: LD_ADDR_OWVAR 37
4646: PUSH
4647: LD_INT 14
4649: ST_TO_ADDR
// vc_engine = 3 ;
4650: LD_ADDR_OWVAR 39
4654: PUSH
4655: LD_INT 3
4657: ST_TO_ADDR
// vc_control = 1 ;
4658: LD_ADDR_OWVAR 38
4662: PUSH
4663: LD_INT 1
4665: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4666: LD_ADDR_OWVAR 40
4670: PUSH
4671: LD_INT 27
4673: PUSH
4674: LD_INT 26
4676: PUSH
4677: LD_INT 28
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 1
4687: PPUSH
4688: LD_INT 3
4690: PPUSH
4691: CALL_OW 12
4695: ARRAY
4696: ST_TO_ADDR
// veh = CreateVehicle ;
4697: LD_ADDR_VAR 0 4
4701: PUSH
4702: CALL_OW 45
4706: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4707: LD_VAR 0 4
4711: PPUSH
4712: LD_INT 4
4714: PPUSH
4715: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4719: LD_VAR 0 4
4723: PPUSH
4724: LD_INT 4
4726: PPUSH
4727: LD_INT 0
4729: PPUSH
4730: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4734: LD_EXP 27
4738: PUSH
4739: LD_INT 0
4741: EQUAL
4742: PUSH
4743: LD_EXP 27
4747: PUSH
4748: LD_INT 2
4750: EQUAL
4751: OR
4752: IFFALSE 4777
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4754: LD_INT 0
4756: PPUSH
4757: LD_INT 4
4759: PPUSH
4760: LD_INT 2
4762: PPUSH
4763: LD_INT 4
4765: PPUSH
4766: CALL_OW 12
4770: PPUSH
4771: CALL_OW 380
4775: GO 4798
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4777: LD_INT 0
4779: PPUSH
4780: LD_INT 4
4782: PPUSH
4783: LD_INT 6
4785: PPUSH
4786: LD_INT 8
4788: PPUSH
4789: CALL_OW 12
4793: PPUSH
4794: CALL_OW 380
// un = CreateHuman ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: CALL_OW 44
4807: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 4
4815: PPUSH
4816: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4820: LD_VAR 0 3
4824: PPUSH
4825: LD_VAR 0 4
4829: PPUSH
4830: CALL_OW 52
// vc_chassis = 14 ;
4834: LD_ADDR_OWVAR 37
4838: PUSH
4839: LD_INT 14
4841: ST_TO_ADDR
// vc_engine = 3 ;
4842: LD_ADDR_OWVAR 39
4846: PUSH
4847: LD_INT 3
4849: ST_TO_ADDR
// vc_control = 1 ;
4850: LD_ADDR_OWVAR 38
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4858: LD_ADDR_OWVAR 40
4862: PUSH
4863: LD_INT 27
4865: PUSH
4866: LD_INT 26
4868: PUSH
4869: LD_INT 28
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 1
4879: PPUSH
4880: LD_INT 3
4882: PPUSH
4883: CALL_OW 12
4887: ARRAY
4888: ST_TO_ADDR
// veh = CreateVehicle ;
4889: LD_ADDR_VAR 0 4
4893: PUSH
4894: CALL_OW 45
4898: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4899: LD_VAR 0 4
4903: PPUSH
4904: LD_INT 4
4906: PPUSH
4907: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4911: LD_VAR 0 4
4915: PPUSH
4916: LD_INT 4
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4926: LD_EXP 27
4930: PUSH
4931: LD_INT 0
4933: EQUAL
4934: PUSH
4935: LD_EXP 27
4939: PUSH
4940: LD_INT 2
4942: EQUAL
4943: OR
4944: IFFALSE 4969
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4946: LD_INT 0
4948: PPUSH
4949: LD_INT 2
4951: PPUSH
4952: LD_INT 2
4954: PPUSH
4955: LD_INT 4
4957: PPUSH
4958: CALL_OW 12
4962: PPUSH
4963: CALL_OW 380
4967: GO 4990
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 2
4974: PPUSH
4975: LD_INT 6
4977: PPUSH
4978: LD_INT 8
4980: PPUSH
4981: CALL_OW 12
4985: PPUSH
4986: CALL_OW 380
// un = CreateHuman ;
4990: LD_ADDR_VAR 0 3
4994: PUSH
4995: CALL_OW 44
4999: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5000: LD_VAR 0 3
5004: PPUSH
5005: LD_INT 4
5007: PPUSH
5008: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5012: LD_VAR 0 3
5016: PPUSH
5017: LD_VAR 0 4
5021: PPUSH
5022: CALL_OW 52
// end ;
5026: LD_VAR 0 1
5030: RET
// export function PrepareAttackLegion ; var i , un ; begin
5031: LD_INT 0
5033: PPUSH
5034: PPUSH
5035: PPUSH
// for i = 1 to 4 do
5036: LD_ADDR_VAR 0 2
5040: PUSH
5041: DOUBLE
5042: LD_INT 1
5044: DEC
5045: ST_TO_ADDR
5046: LD_INT 4
5048: PUSH
5049: FOR_TO
5050: IFFALSE 5160
// begin uc_side = 8 ;
5052: LD_ADDR_OWVAR 20
5056: PUSH
5057: LD_INT 8
5059: ST_TO_ADDR
// uc_nation = 2 ;
5060: LD_ADDR_OWVAR 21
5064: PUSH
5065: LD_INT 2
5067: ST_TO_ADDR
// hc_gallery =  ;
5068: LD_ADDR_OWVAR 33
5072: PUSH
5073: LD_STRING 
5075: ST_TO_ADDR
// hc_name =  ;
5076: LD_ADDR_OWVAR 26
5080: PUSH
5081: LD_STRING 
5083: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5084: LD_INT 0
5086: PPUSH
5087: LD_INT 1
5089: PUSH
5090: LD_INT 8
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_INT 2
5102: PPUSH
5103: CALL_OW 12
5107: ARRAY
5108: PPUSH
5109: LD_INT 6
5111: PPUSH
5112: LD_INT 8
5114: PPUSH
5115: CALL_OW 12
5119: PPUSH
5120: CALL_OW 380
// un = CreateHuman ;
5124: LD_ADDR_VAR 0 3
5128: PUSH
5129: CALL_OW 44
5133: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5134: LD_VAR 0 3
5138: PPUSH
5139: LD_INT 19
5141: PPUSH
5142: LD_INT 0
5144: PPUSH
5145: CALL_OW 49
// ComCrawl ( un ) ;
5149: LD_VAR 0 3
5153: PPUSH
5154: CALL_OW 137
// end ;
5158: GO 5049
5160: POP
5161: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5162: LD_INT 1
5164: PPUSH
5165: LD_INT 8
5167: PPUSH
5168: LD_INT 2
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5178: LD_INT 20
5180: PPUSH
5181: LD_INT 3
5183: PPUSH
5184: CALL 16683 0 2
// end ; end_of_file
5188: LD_VAR 0 1
5192: RET
// every 1 do var i ;
5193: GO 5195
5195: DISABLE
5196: LD_INT 0
5198: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5199: LD_INT 10
5201: PPUSH
5202: LD_INT 122
5204: PPUSH
5205: LD_INT 145
5207: PPUSH
5208: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5212: LD_INT 137
5214: PPUSH
5215: LD_INT 84
5217: PPUSH
5218: LD_INT 61
5220: PPUSH
5221: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5225: LD_EXP 1
5229: PPUSH
5230: CALL_OW 310
5234: PPUSH
5235: CALL_OW 87
// InGameOn ;
5239: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5243: LD_INT 22
5245: PUSH
5246: LD_INT 1
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: PPUSH
5253: CALL_OW 69
5257: PPUSH
5258: LD_INT 130
5260: PPUSH
5261: LD_INT 103
5263: PPUSH
5264: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5268: LD_VAR 0 1
5272: PPUSH
5273: LD_INT 114
5275: PPUSH
5276: LD_INT 102
5278: PPUSH
5279: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5283: LD_EXP 1
5287: PPUSH
5288: LD_STRING D1-JMM-1
5290: PPUSH
5291: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5295: LD_EXP 1
5299: PPUSH
5300: CALL_OW 310
5304: PPUSH
5305: CALL_OW 87
// if IsOk ( Donaldson ) then
5309: LD_EXP 3
5313: PPUSH
5314: CALL_OW 302
5318: IFFALSE 5398
// begin Say ( Donaldson , D1-Don-1 ) ;
5320: LD_EXP 3
5324: PPUSH
5325: LD_STRING D1-Don-1
5327: PPUSH
5328: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5332: LD_EXP 1
5336: PPUSH
5337: CALL_OW 310
5341: PPUSH
5342: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5346: LD_EXP 1
5350: PPUSH
5351: LD_STRING D1-JMM-2
5353: PPUSH
5354: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5358: LD_EXP 1
5362: PPUSH
5363: CALL_OW 310
5367: PPUSH
5368: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5372: LD_EXP 3
5376: PPUSH
5377: LD_STRING D1-Don-2
5379: PPUSH
5380: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5384: LD_EXP 1
5388: PPUSH
5389: CALL_OW 310
5393: PPUSH
5394: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5398: LD_INT 22
5400: PUSH
5401: LD_INT 1
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PPUSH
5408: CALL_OW 69
5412: PPUSH
5413: LD_INT 110
5415: PPUSH
5416: LD_INT 101
5418: PPUSH
5419: CALL_OW 171
// wait ( 0 0$1 ) ;
5423: LD_INT 35
5425: PPUSH
5426: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5430: LD_EXP 1
5434: PPUSH
5435: CALL_OW 310
5439: PPUSH
5440: CALL_OW 87
// wait ( 0 0$1 ) ;
5444: LD_INT 35
5446: PPUSH
5447: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5451: LD_EXP 1
5455: PPUSH
5456: CALL_OW 310
5460: PPUSH
5461: CALL_OW 87
// wait ( 0 0$1 ) ;
5465: LD_INT 35
5467: PPUSH
5468: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5472: LD_EXP 1
5476: PPUSH
5477: CALL_OW 310
5481: PPUSH
5482: CALL_OW 87
// wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5493: LD_EXP 1
5497: PPUSH
5498: CALL_OW 310
5502: PPUSH
5503: CALL_OW 87
// end ;
5507: PPOPN 1
5509: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5510: LD_INT 1
5512: PPUSH
5513: LD_INT 102
5515: PPUSH
5516: LD_INT 94
5518: PPUSH
5519: CALL_OW 293
5523: IFFALSE 5714
5525: GO 5527
5527: DISABLE
5528: LD_INT 0
5530: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5531: LD_INT 102
5533: PPUSH
5534: LD_INT 94
5536: PPUSH
5537: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5541: LD_INT 22
5543: PUSH
5544: LD_INT 1
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 26
5553: PUSH
5554: LD_INT 1
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 25
5566: PUSH
5567: LD_INT 1
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 25
5576: PUSH
5577: LD_INT 2
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 25
5586: PUSH
5587: LD_INT 3
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 25
5596: PUSH
5597: LD_INT 4
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 25
5606: PUSH
5607: LD_INT 5
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: LD_INT 25
5616: PUSH
5617: LD_INT 8
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: LIST
5637: PPUSH
5638: CALL_OW 69
5642: PPUSH
5643: LD_STRING D1-Sol1-2
5645: PPUSH
5646: LD_STRING 
5648: PPUSH
5649: CALL 13298 0 3
// Say ( JMM , D1-JMM-3 ) ;
5653: LD_EXP 1
5657: PPUSH
5658: LD_STRING D1-JMM-3
5660: PPUSH
5661: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5665: LD_STRING M1
5667: PPUSH
5668: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5672: LD_ADDR_VAR 0 1
5676: PUSH
5677: LD_INT 22
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PPUSH
5687: CALL_OW 69
5691: PUSH
5692: FOR_IN
5693: IFFALSE 5712
// ComMoveXY ( i , 95 , 84 ) ;
5695: LD_VAR 0 1
5699: PPUSH
5700: LD_INT 95
5702: PPUSH
5703: LD_INT 84
5705: PPUSH
5706: CALL_OW 111
5710: GO 5692
5712: POP
5713: POP
// end ;
5714: PPOPN 1
5716: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5717: GO 5719
5719: DISABLE
5720: LD_INT 0
5722: PPUSH
5723: PPUSH
5724: PPUSH
5725: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5726: LD_ADDR_VAR 0 2
5730: PUSH
5731: LD_INT 8
5733: PPUSH
5734: LD_INT 22
5736: PUSH
5737: LD_INT 3
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 25
5746: PUSH
5747: LD_INT 9
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 70
5762: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5763: LD_ADDR_VAR 0 3
5767: PUSH
5768: LD_INT 22
5770: PUSH
5771: LD_INT 1
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: ST_TO_ADDR
// enable ;
5786: ENABLE
// for i in your_units do
5787: LD_ADDR_VAR 0 1
5791: PUSH
5792: LD_VAR 0 3
5796: PUSH
5797: FOR_IN
5798: IFFALSE 6446
// begin if See ( 3 , i ) then
5800: LD_INT 3
5802: PPUSH
5803: LD_VAR 0 1
5807: PPUSH
5808: CALL_OW 292
5812: IFFALSE 6444
// begin disable ;
5814: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5815: LD_VAR 0 2
5819: PPUSH
5820: LD_INT 96
5822: PPUSH
5823: LD_INT 85
5825: PPUSH
5826: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5830: LD_VAR 0 2
5834: PPUSH
5835: LD_INT 96
5837: PPUSH
5838: LD_INT 85
5840: PPUSH
5841: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5845: LD_VAR 0 2
5849: PPUSH
5850: LD_INT 96
5852: PPUSH
5853: LD_INT 85
5855: PPUSH
5856: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5860: LD_VAR 0 2
5864: PPUSH
5865: LD_INT 96
5867: PPUSH
5868: LD_INT 85
5870: PPUSH
5871: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5875: LD_VAR 0 2
5879: PPUSH
5880: LD_INT 96
5882: PPUSH
5883: LD_INT 85
5885: PPUSH
5886: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5890: LD_VAR 0 2
5894: PPUSH
5895: LD_INT 96
5897: PPUSH
5898: LD_INT 85
5900: PPUSH
5901: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5905: LD_EXP 1
5909: PPUSH
5910: LD_STRING D1a-JMM-1
5912: PPUSH
5913: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5917: LD_EXP 3
5921: PPUSH
5922: LD_STRING D1a-Don-1
5924: PPUSH
5925: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5929: LD_ADDR_VAR 0 1
5933: PUSH
5934: LD_INT 22
5936: PUSH
5937: LD_INT 1
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5969
// ComMoveXY ( i , 109 , 102 ) ;
5952: LD_VAR 0 1
5956: PPUSH
5957: LD_INT 109
5959: PPUSH
5960: LD_INT 102
5962: PPUSH
5963: CALL_OW 111
5967: GO 5949
5969: POP
5970: POP
// Say ( JMM , D1a-JMM-2 ) ;
5971: LD_EXP 1
5975: PPUSH
5976: LD_STRING D1a-JMM-2
5978: PPUSH
5979: CALL_OW 88
// wait ( 0 0$10 ) ;
5983: LD_INT 350
5985: PPUSH
5986: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5990: LD_EXP 1
5994: PPUSH
5995: CALL_OW 310
5999: PPUSH
6000: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6004: LD_EXP 3
6008: PPUSH
6009: LD_STRING D1b-Don-1
6011: PPUSH
6012: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6016: LD_EXP 1
6020: PPUSH
6021: LD_STRING D1b-JMM-1
6023: PPUSH
6024: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6028: LD_INT 22
6030: PUSH
6031: LD_INT 1
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 26
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 2
6050: PUSH
6051: LD_INT 25
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: LD_INT 25
6063: PUSH
6064: LD_INT 2
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PUSH
6071: LD_INT 25
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 25
6083: PUSH
6084: LD_INT 4
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 25
6093: PUSH
6094: LD_INT 5
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 25
6103: PUSH
6104: LD_INT 8
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: LIST
6124: PPUSH
6125: CALL_OW 69
6129: PPUSH
6130: LD_STRING D1b-Sol1-1
6132: PPUSH
6133: LD_STRING 
6135: PPUSH
6136: CALL 13298 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6140: LD_EXP 3
6144: PPUSH
6145: LD_STRING D1b-Don-2
6147: PPUSH
6148: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6152: LD_EXP 1
6156: PPUSH
6157: LD_STRING D1b-JMM-2
6159: PPUSH
6160: CALL_OW 88
// dec = ShowQuery1 ;
6164: LD_ADDR_VAR 0 4
6168: PUSH
6169: CALL 13834 0 0
6173: ST_TO_ADDR
// if dec = 1 then
6174: LD_VAR 0 4
6178: PUSH
6179: LD_INT 1
6181: EQUAL
6182: IFFALSE 6288
// begin Say ( JMM , D2-JMM-1 ) ;
6184: LD_EXP 1
6188: PPUSH
6189: LD_STRING D2-JMM-1
6191: PPUSH
6192: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6196: LD_EXP 22
6200: PPUSH
6201: LD_STRING D2-Pow-1
6203: PPUSH
6204: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6208: LD_EXP 1
6212: PPUSH
6213: LD_STRING D2a-JMM-1
6215: PPUSH
6216: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6220: LD_EXP 22
6224: PPUSH
6225: LD_STRING D2a-Pow-1
6227: PPUSH
6228: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6232: LD_EXP 1
6236: PPUSH
6237: LD_STRING D2a-JMM-2
6239: PPUSH
6240: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6244: LD_EXP 22
6248: PPUSH
6249: LD_STRING D2a-Pow-2
6251: PPUSH
6252: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6256: LD_EXP 1
6260: PPUSH
6261: LD_STRING D2a-JMM-3
6263: PPUSH
6264: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6268: LD_EXP 22
6272: PPUSH
6273: LD_STRING D2a-Pow-3
6275: PPUSH
6276: CALL_OW 94
// secondPass = 2 ;
6280: LD_ADDR_EXP 28
6284: PUSH
6285: LD_INT 2
6287: ST_TO_ADDR
// end ; if dec = 2 then
6288: LD_VAR 0 4
6292: PUSH
6293: LD_INT 2
6295: EQUAL
6296: IFFALSE 6390
// begin Say ( JMM , D2-JMM-1 ) ;
6298: LD_EXP 1
6302: PPUSH
6303: LD_STRING D2-JMM-1
6305: PPUSH
6306: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6310: LD_EXP 22
6314: PPUSH
6315: LD_STRING D2-Pow-1
6317: PPUSH
6318: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6322: LD_EXP 1
6326: PPUSH
6327: LD_STRING D2b-JMM-1
6329: PPUSH
6330: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6334: LD_EXP 22
6338: PPUSH
6339: LD_STRING D2b-Pow-1
6341: PPUSH
6342: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6346: LD_EXP 1
6350: PPUSH
6351: LD_STRING D2c-JMM-1
6353: PPUSH
6354: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6358: LD_EXP 22
6362: PPUSH
6363: LD_STRING D2c-Pow-1
6365: PPUSH
6366: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6370: LD_EXP 1
6374: PPUSH
6375: LD_STRING D2c-JMM-2
6377: PPUSH
6378: CALL_OW 88
// secondPass = 2 ;
6382: LD_ADDR_EXP 28
6386: PUSH
6387: LD_INT 2
6389: ST_TO_ADDR
// end ; if dec = 3 then
6390: LD_VAR 0 4
6394: PUSH
6395: LD_INT 3
6397: EQUAL
6398: IFFALSE 6408
// secondPass = 1 ;
6400: LD_ADDR_EXP 28
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// InGameOff ;
6408: CALL_OW 9
// ruAI = 1 ;
6412: LD_ADDR_EXP 42
6416: PUSH
6417: LD_INT 1
6419: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: LD_INT 2
6428: PPUSH
6429: LD_INT 1
6431: PPUSH
6432: CALL_OW 80
// SaveForQuickRestart ;
6436: CALL_OW 22
// exit ;
6440: POP
6441: POP
6442: GO 6448
// end ; end ;
6444: GO 5797
6446: POP
6447: POP
// end ;
6448: PPOPN 4
6450: END
// every 1 1$0 trigger secondPass = 2 do
6451: LD_EXP 28
6455: PUSH
6456: LD_INT 2
6458: EQUAL
6459: IFFALSE 6586
6461: GO 6463
6463: DISABLE
// begin PowellSupport1 ;
6464: CALL 1752 0 0
// DialogueOn ;
6468: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6472: LD_EXP 1
6476: PPUSH
6477: LD_STRING DC1-JMM-1
6479: PPUSH
6480: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6484: LD_EXP 22
6488: PPUSH
6489: LD_STRING DC1-Pow-1
6491: PPUSH
6492: CALL_OW 94
// DialogueOff ;
6496: CALL_OW 7
// wait ( 3 3$0 ) ;
6500: LD_INT 6300
6502: PPUSH
6503: CALL_OW 67
// PowellSupport2 ;
6507: CALL 2211 0 0
// DialogueOn ;
6511: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING DC2-JMM-1
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING DC2-Pow-1
6534: PPUSH
6535: CALL_OW 94
// DialogueOff ;
6539: CALL_OW 7
// wait ( 6 6$0 ) ;
6543: LD_INT 12600
6545: PPUSH
6546: CALL_OW 67
// PowellSupport3 ;
6550: CALL 2688 0 0
// DialogueOn ;
6554: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6558: LD_EXP 22
6562: PPUSH
6563: LD_STRING DC3-Pow-1
6565: PPUSH
6566: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6570: LD_EXP 1
6574: PPUSH
6575: LD_STRING DC3-JMM-1
6577: PPUSH
6578: CALL_OW 88
// DialogueOff ;
6582: CALL_OW 7
// end ;
6586: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6587: LD_EXP 28
6591: PUSH
6592: LD_INT 2
6594: EQUAL
6595: PUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 30
6611: PUSH
6612: LD_INT 0
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 30
6621: PUSH
6622: LD_INT 1
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PUSH
6643: LD_INT 0
6645: GREATER
6646: AND
6647: IFFALSE 10015
6649: GO 6651
6651: DISABLE
6652: LD_INT 0
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6662: LD_ADDR_VAR 0 4
6666: PUSH
6667: LD_INT 22
6669: PUSH
6670: LD_INT 1
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 21
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: LD_INT 30
6692: PUSH
6693: LD_INT 0
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 30
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: ST_TO_ADDR
// for i in tmp do
6725: LD_ADDR_VAR 0 1
6729: PUSH
6730: LD_VAR 0 4
6734: PUSH
6735: FOR_IN
6736: IFFALSE 6769
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6738: LD_ADDR_VAR 0 6
6742: PUSH
6743: LD_VAR 0 6
6747: PUSH
6748: LD_VAR 0 1
6752: PPUSH
6753: CALL_OW 274
6757: PPUSH
6758: LD_INT 1
6760: PPUSH
6761: CALL_OW 275
6765: PLUS
6766: ST_TO_ADDR
6767: GO 6735
6769: POP
6770: POP
// for i in tmp do
6771: LD_ADDR_VAR 0 1
6775: PUSH
6776: LD_VAR 0 4
6780: PUSH
6781: FOR_IN
6782: IFFALSE 6815
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6784: LD_ADDR_VAR 0 7
6788: PUSH
6789: LD_VAR 0 7
6793: PUSH
6794: LD_VAR 0 1
6798: PPUSH
6799: CALL_OW 274
6803: PPUSH
6804: LD_INT 2
6806: PPUSH
6807: CALL_OW 275
6811: PLUS
6812: ST_TO_ADDR
6813: GO 6781
6815: POP
6816: POP
// for i in tmp do
6817: LD_ADDR_VAR 0 1
6821: PUSH
6822: LD_VAR 0 4
6826: PUSH
6827: FOR_IN
6828: IFFALSE 6861
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6830: LD_ADDR_VAR 0 8
6834: PUSH
6835: LD_VAR 0 8
6839: PUSH
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 274
6849: PPUSH
6850: LD_INT 3
6852: PPUSH
6853: CALL_OW 275
6857: PLUS
6858: ST_TO_ADDR
6859: GO 6827
6861: POP
6862: POP
// PrepareKurt ;
6863: CALL 4115 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6867: LD_EXP 26
6871: PPUSH
6872: LD_INT 144
6874: PPUSH
6875: LD_INT 111
6877: PPUSH
6878: CALL_OW 111
// wait ( 0 0$2 ) ;
6882: LD_INT 70
6884: PPUSH
6885: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6889: LD_INT 8
6891: PPUSH
6892: LD_INT 1
6894: PPUSH
6895: CALL_OW 343
// if kurtStatus > 0 then
6899: LD_EXP 27
6903: PUSH
6904: LD_INT 0
6906: GREATER
6907: IFFALSE 8470
// begin ComExitVehicle ( Kurt ) ;
6909: LD_EXP 24
6913: PPUSH
6914: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6918: LD_EXP 24
6922: PPUSH
6923: CALL_OW 87
// wait ( 0 0$1 ) ;
6927: LD_INT 35
6929: PPUSH
6930: CALL_OW 67
// DialogueOn ;
6934: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6938: LD_INT 22
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 26
6950: PUSH
6951: LD_INT 1
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: LD_INT 25
6963: PUSH
6964: LD_INT 1
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 25
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 25
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 4
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 5
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 8
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: PPUSH
7035: CALL_OW 69
7039: PPUSH
7040: LD_STRING D3-Sol1-1
7042: PPUSH
7043: LD_STRING 
7045: PPUSH
7046: CALL 13298 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7050: LD_EXP 24
7054: PPUSH
7055: LD_STRING D3-Kurt-1
7057: PPUSH
7058: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7062: LD_EXP 1
7066: PPUSH
7067: LD_STRING D3-JMM-1
7069: PPUSH
7070: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7074: LD_EXP 24
7078: PPUSH
7079: LD_STRING D3-Kurt-2
7081: PPUSH
7082: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7086: LD_EXP 1
7090: PPUSH
7091: LD_STRING D3-JMM-2
7093: PPUSH
7094: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7098: LD_EXP 24
7102: PPUSH
7103: LD_STRING D3-Kurt-4
7105: PPUSH
7106: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7110: LD_EXP 1
7114: PPUSH
7115: LD_STRING D3-JMM-4
7117: PPUSH
7118: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7122: LD_EXP 24
7126: PPUSH
7127: LD_STRING D3-Kurt-5
7129: PPUSH
7130: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7134: LD_EXP 24
7138: PPUSH
7139: LD_STRING D3-Kurt-5a
7141: PPUSH
7142: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7146: LD_VAR 0 6
7150: PUSH
7151: LD_INT 60
7153: GREATEREQUAL
7154: PUSH
7155: LD_VAR 0 8
7159: PUSH
7160: LD_INT 60
7162: GREATEREQUAL
7163: AND
7164: IFFALSE 7199
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7166: LD_ADDR_VAR 0 2
7170: PUSH
7171: LD_STRING Q2K
7173: PPUSH
7174: LD_INT 1
7176: PUSH
7177: LD_INT 2
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: LD_INT 4
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: PPUSH
7192: CALL_OW 98
7196: ST_TO_ADDR
7197: GO 7222
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7199: LD_ADDR_VAR 0 2
7203: PUSH
7204: LD_STRING Q2K
7206: PPUSH
7207: LD_INT 3
7209: PUSH
7210: LD_INT 4
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 98
7221: ST_TO_ADDR
// if dec1 = 1 then
7222: LD_VAR 0 2
7226: PUSH
7227: LD_INT 1
7229: EQUAL
7230: IFFALSE 7264
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7232: LD_EXP 1
7236: PPUSH
7237: LD_STRING D3Ka-JMM-1
7239: PPUSH
7240: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7244: LD_EXP 24
7248: PPUSH
7249: LD_STRING D3Ka-Kurt-1
7251: PPUSH
7252: CALL_OW 88
// warWithLegion = 1 ;
7256: LD_ADDR_EXP 31
7260: PUSH
7261: LD_INT 1
7263: ST_TO_ADDR
// end ; if dec1 = 2 then
7264: LD_VAR 0 2
7268: PUSH
7269: LD_INT 2
7271: EQUAL
7272: IFFALSE 7498
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7274: LD_EXP 1
7278: PPUSH
7279: LD_STRING D3Kb-JMM-1
7281: PPUSH
7282: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7286: LD_EXP 24
7290: PPUSH
7291: LD_STRING D3Kb-Kurt-1
7293: PPUSH
7294: CALL_OW 88
// for i in tmp do
7298: LD_ADDR_VAR 0 1
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: FOR_IN
7309: IFFALSE 7396
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7311: LD_ADDR_VAR 0 5
7315: PUSH
7316: LD_VAR 0 1
7320: PPUSH
7321: CALL_OW 274
7325: PPUSH
7326: LD_INT 1
7328: PPUSH
7329: CALL_OW 275
7333: ST_TO_ADDR
// if tmp2 >= 60 then
7334: LD_VAR 0 5
7338: PUSH
7339: LD_INT 60
7341: GREATEREQUAL
7342: IFFALSE 7374
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7344: LD_VAR 0 1
7348: PPUSH
7349: CALL_OW 274
7353: PPUSH
7354: LD_INT 1
7356: PPUSH
7357: LD_VAR 0 5
7361: PUSH
7362: LD_INT 60
7364: MINUS
7365: PPUSH
7366: CALL_OW 277
// break ;
7370: GO 7396
// end else
7372: GO 7394
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7374: LD_VAR 0 1
7378: PPUSH
7379: CALL_OW 274
7383: PPUSH
7384: LD_INT 1
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 277
// end ; end ;
7394: GO 7308
7396: POP
7397: POP
// for i in tmp do
7398: LD_ADDR_VAR 0 1
7402: PUSH
7403: LD_VAR 0 4
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7496
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7411: LD_ADDR_VAR 0 5
7415: PUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 274
7425: PPUSH
7426: LD_INT 3
7428: PPUSH
7429: CALL_OW 275
7433: ST_TO_ADDR
// if tmp2 >= 60 then
7434: LD_VAR 0 5
7438: PUSH
7439: LD_INT 60
7441: GREATEREQUAL
7442: IFFALSE 7474
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 274
7453: PPUSH
7454: LD_INT 3
7456: PPUSH
7457: LD_VAR 0 5
7461: PUSH
7462: LD_INT 60
7464: MINUS
7465: PPUSH
7466: CALL_OW 277
// break ;
7470: GO 7496
// end else
7472: GO 7494
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: CALL_OW 274
7483: PPUSH
7484: LD_INT 3
7486: PPUSH
7487: LD_INT 0
7489: PPUSH
7490: CALL_OW 277
// end ; end ;
7494: GO 7408
7496: POP
7497: POP
// end ; if dec1 = 3 then
7498: LD_VAR 0 2
7502: PUSH
7503: LD_INT 3
7505: EQUAL
7506: IFFALSE 7741
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7508: LD_EXP 1
7512: PPUSH
7513: LD_STRING D3Kc1-JMM-1
7515: PPUSH
7516: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7520: LD_EXP 24
7524: PPUSH
7525: LD_STRING D3Kc1-Kurt-1
7527: PPUSH
7528: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7532: LD_EXP 1
7536: PPUSH
7537: LD_STRING D3Kc1-JMM-2
7539: PPUSH
7540: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7544: LD_EXP 24
7548: PPUSH
7549: LD_STRING D3Kc1-Kurt-2
7551: PPUSH
7552: CALL_OW 88
// askSiberite = 1 ;
7556: LD_ADDR_EXP 33
7560: PUSH
7561: LD_INT 1
7563: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7564: LD_ADDR_VAR 0 2
7568: PUSH
7569: LD_STRING Q2b
7571: PPUSH
7572: LD_INT 1
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 3
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 98
7590: ST_TO_ADDR
// if dec2 = 1 then
7591: LD_VAR 0 3
7595: PUSH
7596: LD_INT 1
7598: EQUAL
7599: IFFALSE 7633
// begin Say ( JMM , D4a-JMM-1 ) ;
7601: LD_EXP 1
7605: PPUSH
7606: LD_STRING D4a-JMM-1
7608: PPUSH
7609: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7613: LD_EXP 24
7617: PPUSH
7618: LD_STRING D4b-Kurt-1
7620: PPUSH
7621: CALL_OW 88
// warWithLegion = 1 ;
7625: LD_ADDR_EXP 31
7629: PUSH
7630: LD_INT 1
7632: ST_TO_ADDR
// end ; if dec2 = 2 then
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 2
7640: EQUAL
7641: IFFALSE 7675
// begin Say ( JMM , D4b-JMM-1 ) ;
7643: LD_EXP 1
7647: PPUSH
7648: LD_STRING D4b-JMM-1
7650: PPUSH
7651: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7655: LD_EXP 24
7659: PPUSH
7660: LD_STRING D4b-Kurt-1
7662: PPUSH
7663: CALL_OW 88
// warWithLegion = 1 ;
7667: LD_ADDR_EXP 31
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// end ; if dec2 = 3 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 3
7682: EQUAL
7683: IFFALSE 7741
// begin Say ( JMM , D4c-JMM-1 ) ;
7685: LD_EXP 1
7689: PPUSH
7690: LD_STRING D4c-JMM-1
7692: PPUSH
7693: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7697: LD_EXP 24
7701: PPUSH
7702: LD_STRING D4c-Kurt-1
7704: PPUSH
7705: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7709: LD_EXP 1
7713: PPUSH
7714: LD_STRING D4c-JMM-2
7716: PPUSH
7717: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7721: LD_EXP 24
7725: PPUSH
7726: LD_STRING D4c-Kurt-2
7728: PPUSH
7729: CALL_OW 88
// fakeInfo = 1 ;
7733: LD_ADDR_EXP 32
7737: PUSH
7738: LD_INT 1
7740: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7741: LD_VAR 0 2
7745: PUSH
7746: LD_INT 4
7748: EQUAL
7749: IFFALSE 8406
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7751: LD_EXP 1
7755: PPUSH
7756: LD_STRING D3Kd-JMM-1
7758: PPUSH
7759: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7763: LD_VAR 0 6
7767: PUSH
7768: LD_INT 120
7770: GREATEREQUAL
7771: PUSH
7772: LD_VAR 0 8
7776: PUSH
7777: LD_INT 120
7779: GREATEREQUAL
7780: AND
7781: IFFALSE 7816
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7783: LD_ADDR_VAR 0 3
7787: PUSH
7788: LD_STRING Q2aK
7790: PPUSH
7791: LD_INT 1
7793: PUSH
7794: LD_INT 2
7796: PUSH
7797: LD_INT 3
7799: PUSH
7800: LD_INT 4
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: PPUSH
7809: CALL_OW 98
7813: ST_TO_ADDR
7814: GO 7839
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7816: LD_ADDR_VAR 0 3
7820: PUSH
7821: LD_STRING Q2K
7823: PPUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 4
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PPUSH
7834: CALL_OW 98
7838: ST_TO_ADDR
// if dec2 = 1 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 1
7846: EQUAL
7847: IFFALSE 7881
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7849: LD_EXP 1
7853: PPUSH
7854: LD_STRING D5Ka-JMM-1
7856: PPUSH
7857: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7861: LD_EXP 24
7865: PPUSH
7866: LD_STRING D5Ka-Kurt-1
7868: PPUSH
7869: CALL_OW 88
// warWithLegion = 1 ;
7873: LD_ADDR_EXP 31
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// end ; if dec2 = 2 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 2
7888: EQUAL
7889: IFFALSE 7915
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7891: LD_EXP 1
7895: PPUSH
7896: LD_STRING D3Kb-JMM-1
7898: PPUSH
7899: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7903: LD_EXP 24
7907: PPUSH
7908: LD_STRING D3Kb-Kurt-1
7910: PPUSH
7911: CALL_OW 88
// end ; if dec2 = 3 then
7915: LD_VAR 0 3
7919: PUSH
7920: LD_INT 3
7922: EQUAL
7923: IFFALSE 8153
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7925: LD_EXP 1
7929: PPUSH
7930: LD_STRING D3Ke-JMM-1
7932: PPUSH
7933: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7937: LD_EXP 24
7941: PPUSH
7942: LD_STRING D3Ke-Kurt-1
7944: PPUSH
7945: CALL_OW 88
// PrepareLegionForPlayer ;
7949: CALL 4303 0 0
// for i in tmp do
7953: LD_ADDR_VAR 0 1
7957: PUSH
7958: LD_VAR 0 4
7962: PUSH
7963: FOR_IN
7964: IFFALSE 8051
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7966: LD_ADDR_VAR 0 5
7970: PUSH
7971: LD_VAR 0 1
7975: PPUSH
7976: CALL_OW 274
7980: PPUSH
7981: LD_INT 1
7983: PPUSH
7984: CALL_OW 275
7988: ST_TO_ADDR
// if tmp2 >= 120 then
7989: LD_VAR 0 5
7993: PUSH
7994: LD_INT 120
7996: GREATEREQUAL
7997: IFFALSE 8029
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 274
8008: PPUSH
8009: LD_INT 1
8011: PPUSH
8012: LD_VAR 0 5
8016: PUSH
8017: LD_INT 120
8019: MINUS
8020: PPUSH
8021: CALL_OW 277
// break ;
8025: GO 8051
// end else
8027: GO 8049
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 274
8038: PPUSH
8039: LD_INT 1
8041: PPUSH
8042: LD_INT 0
8044: PPUSH
8045: CALL_OW 277
// end ; end ;
8049: GO 7963
8051: POP
8052: POP
// for i in tmp do
8053: LD_ADDR_VAR 0 1
8057: PUSH
8058: LD_VAR 0 4
8062: PUSH
8063: FOR_IN
8064: IFFALSE 8151
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8066: LD_ADDR_VAR 0 5
8070: PUSH
8071: LD_VAR 0 1
8075: PPUSH
8076: CALL_OW 274
8080: PPUSH
8081: LD_INT 3
8083: PPUSH
8084: CALL_OW 275
8088: ST_TO_ADDR
// if tmp2 >= 120 then
8089: LD_VAR 0 5
8093: PUSH
8094: LD_INT 120
8096: GREATEREQUAL
8097: IFFALSE 8129
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8099: LD_VAR 0 1
8103: PPUSH
8104: CALL_OW 274
8108: PPUSH
8109: LD_INT 3
8111: PPUSH
8112: LD_VAR 0 5
8116: PUSH
8117: LD_INT 120
8119: MINUS
8120: PPUSH
8121: CALL_OW 277
// break ;
8125: GO 8151
// end else
8127: GO 8149
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8129: LD_VAR 0 1
8133: PPUSH
8134: CALL_OW 274
8138: PPUSH
8139: LD_INT 3
8141: PPUSH
8142: LD_INT 0
8144: PPUSH
8145: CALL_OW 277
// end ; end ;
8149: GO 8063
8151: POP
8152: POP
// end ; if dec2 = 4 then
8153: LD_VAR 0 3
8157: PUSH
8158: LD_INT 4
8160: EQUAL
8161: IFFALSE 8406
// begin if dec1 = 3 then
8163: LD_VAR 0 2
8167: PUSH
8168: LD_INT 3
8170: EQUAL
8171: IFFALSE 8406
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8173: LD_EXP 1
8177: PPUSH
8178: LD_STRING D3Kc1-JMM-1
8180: PPUSH
8181: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8185: LD_EXP 24
8189: PPUSH
8190: LD_STRING D3Kc1-Kurt-1
8192: PPUSH
8193: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8197: LD_EXP 1
8201: PPUSH
8202: LD_STRING D3Kc1-JMM-2
8204: PPUSH
8205: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8209: LD_EXP 24
8213: PPUSH
8214: LD_STRING D3Kc1-Kurt-2
8216: PPUSH
8217: CALL_OW 88
// askSiberite = 1 ;
8221: LD_ADDR_EXP 33
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8229: LD_ADDR_VAR 0 2
8233: PUSH
8234: LD_STRING Q2b
8236: PPUSH
8237: LD_INT 1
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: LD_INT 3
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: LIST
8250: PPUSH
8251: CALL_OW 98
8255: ST_TO_ADDR
// if dec2 = 1 then
8256: LD_VAR 0 3
8260: PUSH
8261: LD_INT 1
8263: EQUAL
8264: IFFALSE 8298
// begin Say ( JMM , D4a-JMM-1 ) ;
8266: LD_EXP 1
8270: PPUSH
8271: LD_STRING D4a-JMM-1
8273: PPUSH
8274: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8278: LD_EXP 24
8282: PPUSH
8283: LD_STRING D4b-Kurt-1
8285: PPUSH
8286: CALL_OW 88
// warWithLegion = 1 ;
8290: LD_ADDR_EXP 31
8294: PUSH
8295: LD_INT 1
8297: ST_TO_ADDR
// end ; if dec2 = 2 then
8298: LD_VAR 0 3
8302: PUSH
8303: LD_INT 2
8305: EQUAL
8306: IFFALSE 8340
// begin Say ( JMM , D4b-JMM-1 ) ;
8308: LD_EXP 1
8312: PPUSH
8313: LD_STRING D4b-JMM-1
8315: PPUSH
8316: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8320: LD_EXP 24
8324: PPUSH
8325: LD_STRING D4b-Kurt-1
8327: PPUSH
8328: CALL_OW 88
// warWithLegion = 1 ;
8332: LD_ADDR_EXP 31
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// end ; if dec2 = 3 then
8340: LD_VAR 0 3
8344: PUSH
8345: LD_INT 3
8347: EQUAL
8348: IFFALSE 8406
// begin Say ( JMM , D4c-JMM-1 ) ;
8350: LD_EXP 1
8354: PPUSH
8355: LD_STRING D4c-JMM-1
8357: PPUSH
8358: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8362: LD_EXP 24
8366: PPUSH
8367: LD_STRING D4c-Kurt-1
8369: PPUSH
8370: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8374: LD_EXP 1
8378: PPUSH
8379: LD_STRING D4c-JMM-2
8381: PPUSH
8382: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8386: LD_EXP 24
8390: PPUSH
8391: LD_STRING D4c-Kurt-2
8393: PPUSH
8394: CALL_OW 88
// fakeInfo = 1 ;
8398: LD_ADDR_EXP 32
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8406: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8410: LD_EXP 24
8414: PPUSH
8415: LD_EXP 26
8419: PPUSH
8420: CALL_OW 120
// wait ( 0 0$1 ) ;
8424: LD_INT 35
8426: PPUSH
8427: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8431: LD_EXP 26
8435: PPUSH
8436: LD_INT 4
8438: PPUSH
8439: CALL_OW 113
// wait ( 0 0$3 ) ;
8443: LD_INT 105
8445: PPUSH
8446: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8450: LD_EXP 24
8454: PPUSH
8455: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8459: LD_EXP 26
8463: PPUSH
8464: CALL_OW 64
// end else
8468: GO 10015
// begin ComExitVehicle ( otherKurt ) ;
8470: LD_EXP 25
8474: PPUSH
8475: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8479: LD_EXP 25
8483: PPUSH
8484: CALL_OW 87
// wait ( 0 0$1 ) ;
8488: LD_INT 35
8490: PPUSH
8491: CALL_OW 67
// DialogueOn ;
8495: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8499: LD_INT 22
8501: PUSH
8502: LD_INT 1
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: LD_INT 26
8511: PUSH
8512: LD_INT 1
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: LD_INT 25
8524: PUSH
8525: LD_INT 1
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 25
8534: PUSH
8535: LD_INT 2
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 25
8544: PUSH
8545: LD_INT 3
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: LD_INT 25
8554: PUSH
8555: LD_INT 4
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 25
8564: PUSH
8565: LD_INT 5
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 25
8574: PUSH
8575: LD_INT 8
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: PPUSH
8596: CALL_OW 69
8600: PPUSH
8601: LD_STRING D3-Sol1-1
8603: PPUSH
8604: LD_STRING 
8606: PPUSH
8607: CALL 13298 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8611: LD_EXP 25
8615: PPUSH
8616: LD_STRING D3-Kurt-1
8618: PPUSH
8619: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8623: LD_EXP 1
8627: PPUSH
8628: LD_STRING D3-JMM-1
8630: PPUSH
8631: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8635: LD_EXP 25
8639: PPUSH
8640: LD_STRING D3-Kurt-3
8642: PPUSH
8643: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8647: LD_EXP 1
8651: PPUSH
8652: LD_STRING D3-JMM-3
8654: PPUSH
8655: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8659: LD_EXP 25
8663: PPUSH
8664: LD_STRING D3-Kurt-5
8666: PPUSH
8667: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8671: LD_EXP 25
8675: PPUSH
8676: LD_STRING D3-Kurt-5b
8678: PPUSH
8679: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8683: LD_VAR 0 6
8687: PUSH
8688: LD_INT 100
8690: GREATEREQUAL
8691: PUSH
8692: LD_VAR 0 8
8696: PUSH
8697: LD_INT 100
8699: GREATEREQUAL
8700: AND
8701: IFFALSE 8736
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8703: LD_ADDR_VAR 0 2
8707: PUSH
8708: LD_STRING Q2
8710: PPUSH
8711: LD_INT 1
8713: PUSH
8714: LD_INT 2
8716: PUSH
8717: LD_INT 3
8719: PUSH
8720: LD_INT 4
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: PPUSH
8729: CALL_OW 98
8733: ST_TO_ADDR
8734: GO 8759
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8736: LD_ADDR_VAR 0 2
8740: PUSH
8741: LD_STRING Q2
8743: PPUSH
8744: LD_INT 3
8746: PUSH
8747: LD_INT 4
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PPUSH
8754: CALL_OW 98
8758: ST_TO_ADDR
// if dec1 = 1 then
8759: LD_VAR 0 2
8763: PUSH
8764: LD_INT 1
8766: EQUAL
8767: IFFALSE 8801
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8769: LD_EXP 1
8773: PPUSH
8774: LD_STRING D3Ka-JMM-1
8776: PPUSH
8777: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8781: LD_EXP 25
8785: PPUSH
8786: LD_STRING D3Ka-Kurt-1
8788: PPUSH
8789: CALL_OW 88
// warWithLegion = 1 ;
8793: LD_ADDR_EXP 31
8797: PUSH
8798: LD_INT 1
8800: ST_TO_ADDR
// end ; if dec1 = 2 then
8801: LD_VAR 0 2
8805: PUSH
8806: LD_INT 2
8808: EQUAL
8809: IFFALSE 9035
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8811: LD_EXP 1
8815: PPUSH
8816: LD_STRING D3Kb-JMM-1
8818: PPUSH
8819: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8823: LD_EXP 25
8827: PPUSH
8828: LD_STRING D3Kb-Kurt-1
8830: PPUSH
8831: CALL_OW 88
// for i in tmp do
8835: LD_ADDR_VAR 0 1
8839: PUSH
8840: LD_VAR 0 4
8844: PUSH
8845: FOR_IN
8846: IFFALSE 8933
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8848: LD_ADDR_VAR 0 5
8852: PUSH
8853: LD_VAR 0 1
8857: PPUSH
8858: CALL_OW 274
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 275
8870: ST_TO_ADDR
// if tmp2 >= 100 then
8871: LD_VAR 0 5
8875: PUSH
8876: LD_INT 100
8878: GREATEREQUAL
8879: IFFALSE 8911
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8881: LD_VAR 0 1
8885: PPUSH
8886: CALL_OW 274
8890: PPUSH
8891: LD_INT 1
8893: PPUSH
8894: LD_VAR 0 5
8898: PUSH
8899: LD_INT 100
8901: MINUS
8902: PPUSH
8903: CALL_OW 277
// break ;
8907: GO 8933
// end else
8909: GO 8931
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 274
8920: PPUSH
8921: LD_INT 1
8923: PPUSH
8924: LD_INT 0
8926: PPUSH
8927: CALL_OW 277
// end ; end ;
8931: GO 8845
8933: POP
8934: POP
// for i in tmp do
8935: LD_ADDR_VAR 0 1
8939: PUSH
8940: LD_VAR 0 4
8944: PUSH
8945: FOR_IN
8946: IFFALSE 9033
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8948: LD_ADDR_VAR 0 5
8952: PUSH
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 274
8962: PPUSH
8963: LD_INT 3
8965: PPUSH
8966: CALL_OW 275
8970: ST_TO_ADDR
// if tmp2 >= 100 then
8971: LD_VAR 0 5
8975: PUSH
8976: LD_INT 100
8978: GREATEREQUAL
8979: IFFALSE 9011
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8981: LD_VAR 0 1
8985: PPUSH
8986: CALL_OW 274
8990: PPUSH
8991: LD_INT 3
8993: PPUSH
8994: LD_VAR 0 5
8998: PUSH
8999: LD_INT 100
9001: MINUS
9002: PPUSH
9003: CALL_OW 277
// break ;
9007: GO 9033
// end else
9009: GO 9031
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9011: LD_VAR 0 1
9015: PPUSH
9016: CALL_OW 274
9020: PPUSH
9021: LD_INT 3
9023: PPUSH
9024: LD_INT 0
9026: PPUSH
9027: CALL_OW 277
// end ; end ;
9031: GO 8945
9033: POP
9034: POP
// end ; if dec1 = 3 then
9035: LD_VAR 0 2
9039: PUSH
9040: LD_INT 3
9042: EQUAL
9043: IFFALSE 9278
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9045: LD_EXP 1
9049: PPUSH
9050: LD_STRING D3Kc1-JMM-1
9052: PPUSH
9053: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9057: LD_EXP 25
9061: PPUSH
9062: LD_STRING D3Kc1-Kurt-1
9064: PPUSH
9065: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9069: LD_EXP 1
9073: PPUSH
9074: LD_STRING D3Kc1-JMM-2
9076: PPUSH
9077: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9081: LD_EXP 25
9085: PPUSH
9086: LD_STRING D3Kc1-Kurt-2
9088: PPUSH
9089: CALL_OW 88
// askSiberite = 1 ;
9093: LD_ADDR_EXP 33
9097: PUSH
9098: LD_INT 1
9100: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9101: LD_ADDR_VAR 0 2
9105: PUSH
9106: LD_STRING Q2b
9108: PPUSH
9109: LD_INT 1
9111: PUSH
9112: LD_INT 2
9114: PUSH
9115: LD_INT 3
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: LIST
9122: PPUSH
9123: CALL_OW 98
9127: ST_TO_ADDR
// if dec2 = 1 then
9128: LD_VAR 0 3
9132: PUSH
9133: LD_INT 1
9135: EQUAL
9136: IFFALSE 9170
// begin Say ( JMM , D4a-JMM-1 ) ;
9138: LD_EXP 1
9142: PPUSH
9143: LD_STRING D4a-JMM-1
9145: PPUSH
9146: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9150: LD_EXP 25
9154: PPUSH
9155: LD_STRING D4b-Kurt-1
9157: PPUSH
9158: CALL_OW 88
// warWithLegion = 1 ;
9162: LD_ADDR_EXP 31
9166: PUSH
9167: LD_INT 1
9169: ST_TO_ADDR
// end ; if dec2 = 2 then
9170: LD_VAR 0 3
9174: PUSH
9175: LD_INT 2
9177: EQUAL
9178: IFFALSE 9212
// begin Say ( JMM , D4b-JMM-1 ) ;
9180: LD_EXP 1
9184: PPUSH
9185: LD_STRING D4b-JMM-1
9187: PPUSH
9188: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9192: LD_EXP 25
9196: PPUSH
9197: LD_STRING D4b-Kurt-1
9199: PPUSH
9200: CALL_OW 88
// warWithLegion = 1 ;
9204: LD_ADDR_EXP 31
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// end ; if dec2 = 3 then
9212: LD_VAR 0 3
9216: PUSH
9217: LD_INT 3
9219: EQUAL
9220: IFFALSE 9278
// begin Say ( JMM , D4c-JMM-1 ) ;
9222: LD_EXP 1
9226: PPUSH
9227: LD_STRING D4c-JMM-1
9229: PPUSH
9230: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9234: LD_EXP 25
9238: PPUSH
9239: LD_STRING D4c-Kurt-1
9241: PPUSH
9242: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9246: LD_EXP 1
9250: PPUSH
9251: LD_STRING D4c-JMM-2
9253: PPUSH
9254: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9258: LD_EXP 25
9262: PPUSH
9263: LD_STRING D4c-Kurt-2
9265: PPUSH
9266: CALL_OW 88
// fakeInfo = 1 ;
9270: LD_ADDR_EXP 32
9274: PUSH
9275: LD_INT 1
9277: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9278: LD_VAR 0 2
9282: PUSH
9283: LD_INT 4
9285: EQUAL
9286: IFFALSE 9943
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9288: LD_EXP 1
9292: PPUSH
9293: LD_STRING D3Kd-JMM-1
9295: PPUSH
9296: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9300: LD_VAR 0 6
9304: PUSH
9305: LD_INT 200
9307: GREATEREQUAL
9308: PUSH
9309: LD_VAR 0 8
9313: PUSH
9314: LD_INT 200
9316: GREATEREQUAL
9317: AND
9318: IFFALSE 9353
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9320: LD_ADDR_VAR 0 3
9324: PUSH
9325: LD_STRING Q2a
9327: PPUSH
9328: LD_INT 1
9330: PUSH
9331: LD_INT 2
9333: PUSH
9334: LD_INT 3
9336: PUSH
9337: LD_INT 4
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PPUSH
9346: CALL_OW 98
9350: ST_TO_ADDR
9351: GO 9376
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9353: LD_ADDR_VAR 0 3
9357: PUSH
9358: LD_STRING Q2a
9360: PPUSH
9361: LD_INT 1
9363: PUSH
9364: LD_INT 4
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PPUSH
9371: CALL_OW 98
9375: ST_TO_ADDR
// if dec2 = 1 then
9376: LD_VAR 0 3
9380: PUSH
9381: LD_INT 1
9383: EQUAL
9384: IFFALSE 9418
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9386: LD_EXP 1
9390: PPUSH
9391: LD_STRING D5Ka-JMM-1
9393: PPUSH
9394: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9398: LD_EXP 25
9402: PPUSH
9403: LD_STRING D5Ka-Kurt-1
9405: PPUSH
9406: CALL_OW 88
// warWithLegion = 1 ;
9410: LD_ADDR_EXP 31
9414: PUSH
9415: LD_INT 1
9417: ST_TO_ADDR
// end ; if dec2 = 2 then
9418: LD_VAR 0 3
9422: PUSH
9423: LD_INT 2
9425: EQUAL
9426: IFFALSE 9452
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9428: LD_EXP 1
9432: PPUSH
9433: LD_STRING D3Kb-JMM-1
9435: PPUSH
9436: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9440: LD_EXP 25
9444: PPUSH
9445: LD_STRING D3Kb-Kurt-1
9447: PPUSH
9448: CALL_OW 88
// end ; if dec2 = 3 then
9452: LD_VAR 0 3
9456: PUSH
9457: LD_INT 3
9459: EQUAL
9460: IFFALSE 9690
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9462: LD_EXP 1
9466: PPUSH
9467: LD_STRING D3Ke-JMM-1
9469: PPUSH
9470: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9474: LD_EXP 25
9478: PPUSH
9479: LD_STRING D3Ke-Kurt-1
9481: PPUSH
9482: CALL_OW 88
// PrepareLegionForPlayer ;
9486: CALL 4303 0 0
// for i in tmp do
9490: LD_ADDR_VAR 0 1
9494: PUSH
9495: LD_VAR 0 4
9499: PUSH
9500: FOR_IN
9501: IFFALSE 9588
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9503: LD_ADDR_VAR 0 5
9507: PUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 274
9517: PPUSH
9518: LD_INT 1
9520: PPUSH
9521: CALL_OW 275
9525: ST_TO_ADDR
// if tmp2 >= 200 then
9526: LD_VAR 0 5
9530: PUSH
9531: LD_INT 200
9533: GREATEREQUAL
9534: IFFALSE 9566
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9536: LD_VAR 0 1
9540: PPUSH
9541: CALL_OW 274
9545: PPUSH
9546: LD_INT 1
9548: PPUSH
9549: LD_VAR 0 5
9553: PUSH
9554: LD_INT 200
9556: MINUS
9557: PPUSH
9558: CALL_OW 277
// break ;
9562: GO 9588
// end else
9564: GO 9586
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9566: LD_VAR 0 1
9570: PPUSH
9571: CALL_OW 274
9575: PPUSH
9576: LD_INT 1
9578: PPUSH
9579: LD_INT 0
9581: PPUSH
9582: CALL_OW 277
// end ; end ;
9586: GO 9500
9588: POP
9589: POP
// for i in tmp do
9590: LD_ADDR_VAR 0 1
9594: PUSH
9595: LD_VAR 0 4
9599: PUSH
9600: FOR_IN
9601: IFFALSE 9688
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9603: LD_ADDR_VAR 0 5
9607: PUSH
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL_OW 274
9617: PPUSH
9618: LD_INT 3
9620: PPUSH
9621: CALL_OW 275
9625: ST_TO_ADDR
// if tmp2 >= 200 then
9626: LD_VAR 0 5
9630: PUSH
9631: LD_INT 200
9633: GREATEREQUAL
9634: IFFALSE 9666
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9636: LD_VAR 0 1
9640: PPUSH
9641: CALL_OW 274
9645: PPUSH
9646: LD_INT 3
9648: PPUSH
9649: LD_VAR 0 5
9653: PUSH
9654: LD_INT 200
9656: MINUS
9657: PPUSH
9658: CALL_OW 277
// break ;
9662: GO 9688
// end else
9664: GO 9686
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9666: LD_VAR 0 1
9670: PPUSH
9671: CALL_OW 274
9675: PPUSH
9676: LD_INT 3
9678: PPUSH
9679: LD_INT 0
9681: PPUSH
9682: CALL_OW 277
// end ; end ;
9686: GO 9600
9688: POP
9689: POP
// end ; if dec2 = 4 then
9690: LD_VAR 0 3
9694: PUSH
9695: LD_INT 4
9697: EQUAL
9698: IFFALSE 9943
// begin if dec1 = 3 then
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 3
9707: EQUAL
9708: IFFALSE 9943
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9710: LD_EXP 1
9714: PPUSH
9715: LD_STRING D3Kc1-JMM-1
9717: PPUSH
9718: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9722: LD_EXP 25
9726: PPUSH
9727: LD_STRING D3Kc1-Kurt-1
9729: PPUSH
9730: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9734: LD_EXP 1
9738: PPUSH
9739: LD_STRING D3Kc1-JMM-2
9741: PPUSH
9742: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9746: LD_EXP 25
9750: PPUSH
9751: LD_STRING D3Kc1-Kurt-2
9753: PPUSH
9754: CALL_OW 88
// askSiberite = 1 ;
9758: LD_ADDR_EXP 33
9762: PUSH
9763: LD_INT 1
9765: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9766: LD_ADDR_VAR 0 2
9770: PUSH
9771: LD_STRING Q2b
9773: PPUSH
9774: LD_INT 1
9776: PUSH
9777: LD_INT 2
9779: PUSH
9780: LD_INT 3
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL_OW 98
9792: ST_TO_ADDR
// if dec2 = 1 then
9793: LD_VAR 0 3
9797: PUSH
9798: LD_INT 1
9800: EQUAL
9801: IFFALSE 9835
// begin Say ( JMM , D4a-JMM-1 ) ;
9803: LD_EXP 1
9807: PPUSH
9808: LD_STRING D4a-JMM-1
9810: PPUSH
9811: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9815: LD_EXP 25
9819: PPUSH
9820: LD_STRING D4b-Kurt-1
9822: PPUSH
9823: CALL_OW 88
// warWithLegion = 1 ;
9827: LD_ADDR_EXP 31
9831: PUSH
9832: LD_INT 1
9834: ST_TO_ADDR
// end ; if dec2 = 2 then
9835: LD_VAR 0 3
9839: PUSH
9840: LD_INT 2
9842: EQUAL
9843: IFFALSE 9877
// begin Say ( JMM , D4b-JMM-1 ) ;
9845: LD_EXP 1
9849: PPUSH
9850: LD_STRING D4b-JMM-1
9852: PPUSH
9853: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9857: LD_EXP 25
9861: PPUSH
9862: LD_STRING D4b-Kurt-1
9864: PPUSH
9865: CALL_OW 88
// warWithLegion = 1 ;
9869: LD_ADDR_EXP 31
9873: PUSH
9874: LD_INT 1
9876: ST_TO_ADDR
// end ; if dec2 = 3 then
9877: LD_VAR 0 3
9881: PUSH
9882: LD_INT 3
9884: EQUAL
9885: IFFALSE 9943
// begin Say ( JMM , D4c-JMM-1 ) ;
9887: LD_EXP 1
9891: PPUSH
9892: LD_STRING D4c-JMM-1
9894: PPUSH
9895: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9899: LD_EXP 25
9903: PPUSH
9904: LD_STRING D4c-Kurt-1
9906: PPUSH
9907: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9911: LD_EXP 1
9915: PPUSH
9916: LD_STRING D4c-JMM-2
9918: PPUSH
9919: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9923: LD_EXP 25
9927: PPUSH
9928: LD_STRING D4c-Kurt-2
9930: PPUSH
9931: CALL_OW 88
// fakeInfo = 1 ;
9935: LD_ADDR_EXP 32
9939: PUSH
9940: LD_INT 1
9942: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9943: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9947: LD_INT 8
9949: PPUSH
9950: LD_INT 8
9952: PPUSH
9953: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9957: LD_EXP 25
9961: PPUSH
9962: LD_EXP 26
9966: PPUSH
9967: CALL_OW 120
// wait ( 0 0$1 ) ;
9971: LD_INT 35
9973: PPUSH
9974: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9978: LD_EXP 26
9982: PPUSH
9983: LD_INT 4
9985: PPUSH
9986: CALL_OW 113
// wait ( 0 0$6 ) ;
9990: LD_INT 210
9992: PPUSH
9993: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9997: LD_EXP 25
10001: PPUSH
10002: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10006: LD_EXP 26
10010: PPUSH
10011: CALL_OW 64
// end ; end ;
10015: PPOPN 8
10017: END
// every 0 0$10 trigger warWithLegion = 1 do
10018: LD_EXP 31
10022: PUSH
10023: LD_INT 1
10025: EQUAL
10026: IFFALSE 10035
10028: GO 10030
10030: DISABLE
// PrepareAttackLegion ;
10031: CALL 5031 0 0
10035: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10036: LD_EXP 15
10040: PPUSH
10041: CALL_OW 305
10045: PUSH
10046: LD_EXP 15
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: CALL_OW 289
10058: NOT
10059: AND
10060: PUSH
10061: LD_EXP 15
10065: PPUSH
10066: LD_INT 2
10068: PPUSH
10069: CALL_OW 289
10073: NOT
10074: AND
10075: PUSH
10076: LD_EXP 15
10080: PPUSH
10081: LD_INT 3
10083: PPUSH
10084: CALL_OW 289
10088: NOT
10089: AND
10090: IFFALSE 10107
10092: GO 10094
10094: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10095: LD_EXP 15
10099: PPUSH
10100: LD_INT 4
10102: PPUSH
10103: CALL_OW 235
10107: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10108: LD_EXP 16
10112: PPUSH
10113: CALL_OW 305
10117: PUSH
10118: LD_EXP 16
10122: PPUSH
10123: LD_INT 1
10125: PPUSH
10126: CALL_OW 289
10130: NOT
10131: AND
10132: PUSH
10133: LD_EXP 16
10137: PPUSH
10138: LD_INT 2
10140: PPUSH
10141: CALL_OW 289
10145: NOT
10146: AND
10147: PUSH
10148: LD_EXP 16
10152: PPUSH
10153: LD_INT 3
10155: PPUSH
10156: CALL_OW 289
10160: NOT
10161: AND
10162: IFFALSE 10179
10164: GO 10166
10166: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10167: LD_EXP 16
10171: PPUSH
10172: LD_INT 4
10174: PPUSH
10175: CALL_OW 235
10179: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10180: LD_EXP 17
10184: PPUSH
10185: CALL_OW 305
10189: PUSH
10190: LD_EXP 17
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 289
10202: NOT
10203: AND
10204: PUSH
10205: LD_EXP 17
10209: PPUSH
10210: LD_INT 2
10212: PPUSH
10213: CALL_OW 289
10217: NOT
10218: AND
10219: PUSH
10220: LD_EXP 17
10224: PPUSH
10225: LD_INT 3
10227: PPUSH
10228: CALL_OW 289
10232: NOT
10233: AND
10234: IFFALSE 10251
10236: GO 10238
10238: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10239: LD_EXP 17
10243: PPUSH
10244: LD_INT 4
10246: PPUSH
10247: CALL_OW 235
10251: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10252: LD_EXP 18
10256: PPUSH
10257: CALL_OW 305
10261: PUSH
10262: LD_EXP 18
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 289
10274: NOT
10275: AND
10276: PUSH
10277: LD_EXP 18
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 289
10289: NOT
10290: AND
10291: PUSH
10292: LD_EXP 18
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: CALL_OW 289
10304: NOT
10305: AND
10306: IFFALSE 10323
10308: GO 10310
10310: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10311: LD_EXP 18
10315: PPUSH
10316: LD_INT 4
10318: PPUSH
10319: CALL_OW 235
10323: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10324: LD_EXP 19
10328: PPUSH
10329: CALL_OW 305
10333: PUSH
10334: LD_EXP 19
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: CALL_OW 289
10346: NOT
10347: AND
10348: PUSH
10349: LD_EXP 19
10353: PPUSH
10354: LD_INT 2
10356: PPUSH
10357: CALL_OW 289
10361: NOT
10362: AND
10363: PUSH
10364: LD_EXP 19
10368: PPUSH
10369: LD_INT 3
10371: PPUSH
10372: CALL_OW 289
10376: NOT
10377: AND
10378: PUSH
10379: LD_EXP 19
10383: PPUSH
10384: LD_INT 2
10386: PPUSH
10387: CALL_OW 289
10391: NOT
10392: AND
10393: IFFALSE 10410
10395: GO 10397
10397: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10398: LD_EXP 19
10402: PPUSH
10403: LD_INT 4
10405: PPUSH
10406: CALL_OW 235
10410: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10411: LD_EXP 20
10415: PPUSH
10416: CALL_OW 305
10420: PUSH
10421: LD_EXP 20
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL_OW 289
10433: NOT
10434: AND
10435: PUSH
10436: LD_EXP 20
10440: PPUSH
10441: LD_INT 2
10443: PPUSH
10444: CALL_OW 289
10448: NOT
10449: AND
10450: PUSH
10451: LD_EXP 20
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: CALL_OW 289
10463: NOT
10464: AND
10465: IFFALSE 10482
10467: GO 10469
10469: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10470: LD_EXP 20
10474: PPUSH
10475: LD_INT 4
10477: PPUSH
10478: CALL_OW 235
10482: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10483: LD_EXP 21
10487: PPUSH
10488: CALL_OW 305
10492: PUSH
10493: LD_EXP 21
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: CALL_OW 289
10505: NOT
10506: AND
10507: PUSH
10508: LD_EXP 21
10512: PPUSH
10513: LD_INT 2
10515: PPUSH
10516: CALL_OW 289
10520: NOT
10521: AND
10522: PUSH
10523: LD_EXP 21
10527: PPUSH
10528: LD_INT 3
10530: PPUSH
10531: CALL_OW 289
10535: NOT
10536: AND
10537: IFFALSE 10554
10539: GO 10541
10541: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10542: LD_EXP 21
10546: PPUSH
10547: LD_INT 4
10549: PPUSH
10550: CALL_OW 235
10554: END
// every 0 0$1 do var i ;
10555: GO 10557
10557: DISABLE
10558: LD_INT 0
10560: PPUSH
// begin enable ;
10561: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10562: LD_ADDR_VAR 0 1
10566: PUSH
10567: LD_INT 22
10569: PUSH
10570: LD_INT 4
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: PUSH
10582: FOR_IN
10583: IFFALSE 10622
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10585: LD_VAR 0 1
10589: PPUSH
10590: LD_INT 4
10592: PPUSH
10593: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_INT 4
10604: PPUSH
10605: CALL_OW 308
10609: IFFALSE 10620
// RemoveUnit ( i ) ;
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 64
// end ;
10620: GO 10582
10622: POP
10623: POP
// end ;
10624: PPOPN 1
10626: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10627: LD_EXP 28
10631: PUSH
10632: LD_INT 1
10634: EQUAL
10635: IFFALSE 11074
10637: GO 10639
10639: DISABLE
10640: LD_INT 0
10642: PPUSH
10643: PPUSH
10644: PPUSH
// begin enable ;
10645: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 12
10653: PPUSH
10654: LD_INT 22
10656: PUSH
10657: LD_INT 3
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PPUSH
10678: CALL_OW 70
10682: ST_TO_ADDR
// for i in enemyVehs do
10683: LD_ADDR_VAR 0 1
10687: PUSH
10688: LD_VAR 0 2
10692: PUSH
10693: FOR_IN
10694: IFFALSE 11072
// begin if See ( 1 , i ) then
10696: LD_INT 1
10698: PPUSH
10699: LD_VAR 0 1
10703: PPUSH
10704: CALL_OW 292
10708: IFFALSE 11070
// begin disable ;
10710: DISABLE
// DialogueOn ;
10711: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10715: LD_VAR 0 1
10719: PPUSH
10720: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10724: LD_INT 22
10726: PUSH
10727: LD_INT 1
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 26
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 2
10746: PUSH
10747: LD_INT 25
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 25
10769: PUSH
10770: LD_INT 3
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 25
10779: PUSH
10780: LD_INT 4
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 25
10789: PUSH
10790: LD_INT 5
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 25
10799: PUSH
10800: LD_INT 8
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: PPUSH
10826: LD_STRING DT1-Sol1-1
10828: PPUSH
10829: LD_STRING DT1-FSol1-1
10831: PPUSH
10832: CALL 13298 0 3
// dec = ShowQuery2 ;
10836: LD_ADDR_VAR 0 3
10840: PUSH
10841: CALL 13908 0 0
10845: ST_TO_ADDR
// if dec = 1 then
10846: LD_VAR 0 3
10850: PUSH
10851: LD_INT 1
10853: EQUAL
10854: IFFALSE 10960
// begin Say ( JMM , D2-JMM-1 ) ;
10856: LD_EXP 1
10860: PPUSH
10861: LD_STRING D2-JMM-1
10863: PPUSH
10864: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10868: LD_EXP 22
10872: PPUSH
10873: LD_STRING D2-Pow-1
10875: PPUSH
10876: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10880: LD_EXP 1
10884: PPUSH
10885: LD_STRING D2a-JMM-1
10887: PPUSH
10888: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10892: LD_EXP 22
10896: PPUSH
10897: LD_STRING D2a-Pow-1
10899: PPUSH
10900: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10904: LD_EXP 1
10908: PPUSH
10909: LD_STRING D2a-JMM-2
10911: PPUSH
10912: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10916: LD_EXP 22
10920: PPUSH
10921: LD_STRING D2a-Pow-2
10923: PPUSH
10924: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10928: LD_EXP 1
10932: PPUSH
10933: LD_STRING D2a-JMM-3
10935: PPUSH
10936: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10940: LD_EXP 22
10944: PPUSH
10945: LD_STRING D2a-Pow-3
10947: PPUSH
10948: CALL_OW 94
// secondPass = 2 ;
10952: LD_ADDR_EXP 28
10956: PUSH
10957: LD_INT 2
10959: ST_TO_ADDR
// end ; if dec = 2 then
10960: LD_VAR 0 3
10964: PUSH
10965: LD_INT 2
10967: EQUAL
10968: IFFALSE 11062
// begin Say ( JMM , D2-JMM-1 ) ;
10970: LD_EXP 1
10974: PPUSH
10975: LD_STRING D2-JMM-1
10977: PPUSH
10978: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10982: LD_EXP 22
10986: PPUSH
10987: LD_STRING D2-Pow-1
10989: PPUSH
10990: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10994: LD_EXP 1
10998: PPUSH
10999: LD_STRING D2b-JMM-1
11001: PPUSH
11002: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11006: LD_EXP 22
11010: PPUSH
11011: LD_STRING D2b-Pow-1
11013: PPUSH
11014: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11018: LD_EXP 1
11022: PPUSH
11023: LD_STRING D2c-JMM-1
11025: PPUSH
11026: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11030: LD_EXP 22
11034: PPUSH
11035: LD_STRING D2c-Pow-1
11037: PPUSH
11038: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11042: LD_EXP 1
11046: PPUSH
11047: LD_STRING D2c-JMM-2
11049: PPUSH
11050: CALL_OW 88
// secondPass = 2 ;
11054: LD_ADDR_EXP 28
11058: PUSH
11059: LD_INT 2
11061: ST_TO_ADDR
// end ; DialogueOff ;
11062: CALL_OW 7
// exit ;
11066: POP
11067: POP
11068: GO 11074
// end ; end ;
11070: GO 10693
11072: POP
11073: POP
// end ;
11074: PPOPN 3
11076: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11077: LD_EXP 29
11081: PUSH
11082: LD_INT 1
11084: EQUAL
11085: IFFALSE 11318
11087: GO 11089
11089: DISABLE
11090: LD_INT 0
11092: PPUSH
11093: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11094: LD_ADDR_VAR 0 2
11098: PUSH
11099: LD_INT 11
11101: PPUSH
11102: LD_INT 22
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 24
11114: PUSH
11115: LD_INT 250
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PPUSH
11126: CALL_OW 70
11130: ST_TO_ADDR
// enable ;
11131: ENABLE
// for i in vehicles do
11132: LD_ADDR_VAR 0 1
11136: PUSH
11137: LD_VAR 0 2
11141: PUSH
11142: FOR_IN
11143: IFFALSE 11316
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11145: LD_INT 1
11147: PPUSH
11148: LD_VAR 0 1
11152: PPUSH
11153: CALL_OW 292
11157: PUSH
11158: LD_EXP 29
11162: PUSH
11163: LD_INT 1
11165: EQUAL
11166: AND
11167: PUSH
11168: LD_EXP 30
11172: PUSH
11173: LD_INT 4
11175: LESSEQUAL
11176: AND
11177: IFFALSE 11314
// begin disable ;
11179: DISABLE
// DialogueOn ;
11180: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11184: LD_INT 22
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 26
11196: PUSH
11197: LD_INT 1
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 2
11206: PUSH
11207: LD_INT 25
11209: PUSH
11210: LD_INT 1
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 25
11219: PUSH
11220: LD_INT 2
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 25
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 25
11239: PUSH
11240: LD_INT 4
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 25
11249: PUSH
11250: LD_INT 5
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 25
11259: PUSH
11260: LD_INT 8
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PPUSH
11281: CALL_OW 69
11285: PPUSH
11286: LD_STRING DT1-Sol1-1
11288: PPUSH
11289: LD_STRING DT1-FSol1-1
11291: PPUSH
11292: CALL 13298 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11296: LD_EXP 1
11300: PPUSH
11301: LD_STRING DT1-JMM-1
11303: PPUSH
11304: CALL_OW 88
// DialogueOff ;
11308: CALL_OW 7
// break ;
11312: GO 11316
// end ; end ;
11314: GO 11142
11316: POP
11317: POP
// end ;
11318: PPOPN 2
11320: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11321: LD_EXP 29
11325: PUSH
11326: LD_INT 1
11328: EQUAL
11329: PUSH
11330: LD_INT 11
11332: PPUSH
11333: LD_INT 22
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 24
11345: PUSH
11346: LD_INT 251
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 2
11355: PUSH
11356: LD_INT 21
11358: PUSH
11359: LD_INT 2
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 21
11368: PUSH
11369: LD_INT 1
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 70
11390: PUSH
11391: LD_INT 0
11393: EQUAL
11394: AND
11395: PUSH
11396: LD_EXP 30
11400: PUSH
11401: LD_INT 3
11403: PUSH
11404: LD_INT 3
11406: PUSH
11407: LD_INT 4
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: LD_OWVAR 67
11419: ARRAY
11420: LESSEQUAL
11421: AND
11422: PUSH
11423: LD_EXP 30
11427: PUSH
11428: LD_INT 5
11430: GREATER
11431: AND
11432: IFFALSE 11589
11434: GO 11436
11436: DISABLE
// begin vehicleTeleported = 2 ;
11437: LD_ADDR_EXP 29
11441: PUSH
11442: LD_INT 2
11444: ST_TO_ADDR
// DialogueOn ;
11445: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11449: LD_EXP 1
11453: PPUSH
11454: LD_STRING DT1a-JMM-1
11456: PPUSH
11457: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11461: LD_INT 22
11463: PUSH
11464: LD_INT 1
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 26
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 2
11483: PUSH
11484: LD_INT 25
11486: PUSH
11487: LD_INT 1
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 25
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 25
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 25
11516: PUSH
11517: LD_INT 4
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 25
11526: PUSH
11527: LD_INT 5
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 25
11536: PUSH
11537: LD_INT 8
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: PPUSH
11558: CALL_OW 69
11562: PPUSH
11563: LD_STRING DT1a-Sol1-1
11565: PPUSH
11566: LD_STRING DT1a-FSol1-1
11568: PPUSH
11569: CALL 13298 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11573: LD_EXP 1
11577: PPUSH
11578: LD_STRING DT1a-JMM-2
11580: PPUSH
11581: CALL_OW 88
// DialogueOff ;
11585: CALL_OW 7
// end ;
11589: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11590: LD_EXP 29
11594: PUSH
11595: LD_INT 3
11597: EQUAL
11598: PUSH
11599: LD_EXP 30
11603: PUSH
11604: LD_INT 4
11606: GREATER
11607: AND
11608: IFFALSE 11819
11610: GO 11612
11612: DISABLE
11613: LD_INT 0
11615: PPUSH
11616: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11617: LD_ADDR_VAR 0 2
11621: PUSH
11622: LD_INT 11
11624: PPUSH
11625: LD_INT 22
11627: PUSH
11628: LD_INT 3
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 24
11637: PUSH
11638: LD_INT 250
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PPUSH
11649: CALL_OW 70
11653: ST_TO_ADDR
// enable ;
11654: ENABLE
// for i in vehicles do
11655: LD_ADDR_VAR 0 1
11659: PUSH
11660: LD_VAR 0 2
11664: PUSH
11665: FOR_IN
11666: IFFALSE 11817
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11668: LD_INT 1
11670: PPUSH
11671: LD_VAR 0 1
11675: PPUSH
11676: CALL_OW 292
11680: PUSH
11681: LD_EXP 29
11685: PUSH
11686: LD_INT 3
11688: EQUAL
11689: AND
11690: IFFALSE 11815
// begin disable ;
11692: DISABLE
// DialogueOn ;
11693: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11697: LD_INT 22
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 26
11709: PUSH
11710: LD_INT 1
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 2
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 25
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 25
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 25
11752: PUSH
11753: LD_INT 4
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 5
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 25
11772: PUSH
11773: LD_INT 8
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PPUSH
11794: CALL_OW 69
11798: PPUSH
11799: LD_STRING DT2-Sol1-1
11801: PPUSH
11802: LD_STRING DT2-FSol1-1
11804: PPUSH
11805: CALL 13298 0 3
// DialogueOff ;
11809: CALL_OW 7
// break ;
11813: GO 11817
// end ; end ;
11815: GO 11665
11817: POP
11818: POP
// end ;
11819: PPOPN 2
11821: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11822: LD_EXP 29
11826: PUSH
11827: LD_INT 3
11829: EQUAL
11830: PUSH
11831: LD_INT 11
11833: PPUSH
11834: LD_INT 22
11836: PUSH
11837: LD_INT 3
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 24
11846: PUSH
11847: LD_INT 251
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: LD_INT 21
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 21
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 70
11891: PUSH
11892: LD_INT 0
11894: EQUAL
11895: AND
11896: PUSH
11897: LD_EXP 30
11901: PUSH
11902: LD_INT 6
11904: PUSH
11905: LD_INT 6
11907: PUSH
11908: LD_INT 8
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: LIST
11915: PUSH
11916: LD_OWVAR 67
11920: ARRAY
11921: EQUAL
11922: AND
11923: IFFALSE 12080
11925: GO 11927
11927: DISABLE
// begin vehicleTeleported = 4 ;
11928: LD_ADDR_EXP 29
11932: PUSH
11933: LD_INT 4
11935: ST_TO_ADDR
// DialogueOn ;
11936: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11940: LD_EXP 1
11944: PPUSH
11945: LD_STRING DT2a-JMM-1
11947: PPUSH
11948: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11952: LD_INT 22
11954: PUSH
11955: LD_INT 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 26
11964: PUSH
11965: LD_INT 1
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 2
11974: PUSH
11975: LD_INT 25
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 25
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 25
11997: PUSH
11998: LD_INT 3
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 25
12007: PUSH
12008: LD_INT 4
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 25
12017: PUSH
12018: LD_INT 5
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 25
12027: PUSH
12028: LD_INT 8
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: PPUSH
12054: LD_STRING DT2a-Sol1-1
12056: PPUSH
12057: LD_STRING DT2a-FSol1-1
12059: PPUSH
12060: CALL 13298 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12064: LD_EXP 3
12068: PPUSH
12069: LD_STRING DT2a-Don-1
12071: PPUSH
12072: CALL_OW 88
// DialogueOff ;
12076: CALL_OW 7
// end ;
12080: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12081: LD_INT 1
12083: PPUSH
12084: LD_INT 45
12086: PPUSH
12087: LD_INT 74
12089: PPUSH
12090: CALL_OW 293
12094: IFFALSE 12262
12096: GO 12098
12098: DISABLE
// begin DialogueOn ;
12099: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12103: LD_INT 36
12105: PPUSH
12106: LD_INT 55
12108: PPUSH
12109: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12113: LD_INT 22
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 26
12125: PUSH
12126: LD_INT 1
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: LD_INT 25
12138: PUSH
12139: LD_INT 1
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 25
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 25
12158: PUSH
12159: LD_INT 3
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 25
12168: PUSH
12169: LD_INT 4
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 5
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 25
12188: PUSH
12189: LD_INT 8
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 69
12214: PPUSH
12215: LD_STRING D5-Sol1-1
12217: PPUSH
12218: LD_STRING D5-FSol1-
12220: PPUSH
12221: CALL 13298 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12225: LD_EXP 31
12229: PUSH
12230: LD_INT 1
12232: EQUAL
12233: PUSH
12234: LD_EXP 3
12238: PPUSH
12239: CALL_OW 300
12243: AND
12244: IFFALSE 12258
// Say ( Donaldson , D5-Don-1 ) ;
12246: LD_EXP 3
12250: PPUSH
12251: LD_STRING D5-Don-1
12253: PPUSH
12254: CALL_OW 88
// DialogueOff ;
12258: CALL_OW 7
// end ;
12262: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12263: LD_INT 1
12265: PPUSH
12266: LD_INT 10
12268: PPUSH
12269: CALL_OW 292
12273: PUSH
12274: LD_INT 1
12276: PPUSH
12277: LD_INT 137
12279: PPUSH
12280: CALL_OW 292
12284: OR
12285: IFFALSE 12429
12287: GO 12289
12289: DISABLE
// begin DialogueOn ;
12290: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12294: LD_INT 22
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 26
12306: PUSH
12307: LD_INT 1
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: LD_INT 25
12319: PUSH
12320: LD_INT 1
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 25
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 25
12339: PUSH
12340: LD_INT 3
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 25
12349: PUSH
12350: LD_INT 4
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 25
12359: PUSH
12360: LD_INT 5
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 8
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL_OW 69
12395: PPUSH
12396: LD_STRING DT3-Sol1-1
12398: PPUSH
12399: LD_STRING DT3-FSol1-1
12401: PPUSH
12402: CALL 13298 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12406: LD_EXP 1
12410: PPUSH
12411: LD_STRING DT3-JMM-1
12413: PPUSH
12414: CALL_OW 88
// DialogueOff ;
12418: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12422: LD_STRING M2
12424: PPUSH
12425: CALL_OW 337
// end ;
12429: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12430: LD_EXP 43
12434: PUSH
12435: LD_INT 0
12437: EQUAL
12438: IFFALSE 12521
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
// begin enable ;
12446: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12447: LD_ADDR_VAR 0 1
12451: PUSH
12452: LD_INT 10
12454: PPUSH
12455: LD_INT 22
12457: PUSH
12458: LD_INT 3
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 58
12477: PUSH
12478: EMPTY
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 70
12490: PUSH
12491: FOR_IN
12492: IFFALSE 12519
// if GetLives ( i ) < 1000 then
12494: LD_VAR 0 1
12498: PPUSH
12499: CALL_OW 256
12503: PUSH
12504: LD_INT 1000
12506: LESS
12507: IFFALSE 12517
// ruEscape = 1 ;
12509: LD_ADDR_EXP 43
12513: PUSH
12514: LD_INT 1
12516: ST_TO_ADDR
12517: GO 12491
12519: POP
12520: POP
// end ;
12521: PPOPN 1
12523: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12524: LD_INT 3
12526: PPUSH
12527: CALL_OW 303
12531: PUSH
12532: LD_INT 4
12534: PPUSH
12535: CALL_OW 303
12539: OR
12540: PUSH
12541: LD_INT 22
12543: PPUSH
12544: LD_INT 22
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 70
12558: PUSH
12559: LD_INT 0
12561: GREATER
12562: OR
12563: PUSH
12564: LD_EXP 43
12568: PUSH
12569: LD_INT 1
12571: EQUAL
12572: OR
12573: IFFALSE 12804
12575: GO 12577
12577: DISABLE
12578: LD_INT 0
12580: PPUSH
12581: PPUSH
12582: PPUSH
// begin ruAI = 0 ;
12583: LD_ADDR_EXP 42
12587: PUSH
12588: LD_INT 0
12590: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12591: LD_ADDR_VAR 0 3
12595: PUSH
12596: LD_INT 10
12598: PPUSH
12599: LD_INT 22
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 2
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: LD_INT 58
12621: PUSH
12622: EMPTY
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 70
12634: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12635: LD_EXP 35
12639: PPUSH
12640: CALL_OW 122
// wait ( 0 0$1 ) ;
12644: LD_INT 35
12646: PPUSH
12647: CALL_OW 67
// DialogueOn ;
12651: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12655: LD_EXP 1
12659: PPUSH
12660: LD_STRING D6-JMM-1
12662: PPUSH
12663: CALL_OW 88
// DialogueOff ;
12667: CALL_OW 7
// if vehs > 0 then
12671: LD_VAR 0 3
12675: PUSH
12676: LD_INT 0
12678: GREATER
12679: IFFALSE 12749
// for i := 1 to RuScientists do
12681: LD_ADDR_VAR 0 1
12685: PUSH
12686: DOUBLE
12687: LD_INT 1
12689: DEC
12690: ST_TO_ADDR
12691: LD_EXP 35
12695: PUSH
12696: FOR_TO
12697: IFFALSE 12745
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12699: LD_EXP 35
12703: PUSH
12704: LD_VAR 0 1
12708: ARRAY
12709: PPUSH
12710: LD_INT 3
12712: PUSH
12713: LD_INT 60
12715: PUSH
12716: EMPTY
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 72
12727: PPUSH
12728: LD_VAR 0 3
12732: PUSH
12733: LD_VAR 0 1
12737: ARRAY
12738: PPUSH
12739: CALL_OW 120
12743: GO 12696
12745: POP
12746: POP
12747: GO 12804
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12749: LD_EXP 35
12753: PUSH
12754: LD_VAR 0 1
12758: ARRAY
12759: PPUSH
12760: LD_INT 3
12762: PUSH
12763: LD_INT 60
12765: PUSH
12766: EMPTY
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PPUSH
12773: CALL_OW 72
12777: PPUSH
12778: LD_INT 13
12780: PUSH
12781: LD_INT 14
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 1
12790: PPUSH
12791: LD_INT 2
12793: PPUSH
12794: CALL_OW 12
12798: ARRAY
12799: PPUSH
12800: CALL_OW 113
// end ;
12804: PPOPN 3
12806: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
12807: LD_EXP 42
12811: PUSH
12812: LD_INT 0
12814: EQUAL
12815: IFFALSE 13187
12817: GO 12819
12819: DISABLE
12820: LD_INT 0
12822: PPUSH
12823: PPUSH
12824: PPUSH
12825: PPUSH
// begin enable ;
12826: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
12827: LD_EXP 35
12831: PPUSH
12832: LD_INT 2
12834: PUSH
12835: LD_INT 95
12837: PUSH
12838: LD_INT 13
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 95
12847: PUSH
12848: LD_INT 14
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 72
12864: PUSH
12865: LD_INT 33
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 23
12877: PUSH
12878: LD_INT 3
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 2
12887: PUSH
12888: LD_INT 95
12890: PUSH
12891: LD_INT 13
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 95
12900: PUSH
12901: LD_INT 14
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: PPUSH
12918: CALL_OW 69
12922: OR
12923: IFFALSE 13112
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12925: LD_ADDR_VAR 0 2
12929: PUSH
12930: LD_EXP 35
12934: PPUSH
12935: LD_INT 2
12937: PUSH
12938: LD_INT 95
12940: PUSH
12941: LD_INT 13
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 95
12950: PUSH
12951: LD_INT 14
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 72
12967: PUSH
12968: LD_INT 1
12970: ARRAY
12971: ST_TO_ADDR
// if not unit then
12972: LD_VAR 0 2
12976: NOT
12977: IFFALSE 13112
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12979: LD_ADDR_VAR 0 4
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: LD_INT 95
12989: PUSH
12990: LD_INT 13
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 95
12999: PUSH
13000: LD_INT 14
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 33
13014: PUSH
13015: LD_INT 1
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 23
13024: PUSH
13025: LD_INT 3
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: ST_TO_ADDR
// if not tmp then
13042: LD_VAR 0 4
13046: NOT
13047: IFFALSE 13051
// exit ;
13049: GO 13187
// for i in tmp do
13051: LD_ADDR_VAR 0 1
13055: PUSH
13056: LD_VAR 0 4
13060: PUSH
13061: FOR_IN
13062: IFFALSE 13110
// if IsDrivenBy ( i ) in RuScientists then
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 311
13073: PUSH
13074: LD_EXP 35
13078: IN
13079: IFFALSE 13108
// begin unit := IsDrivenBy ( i ) ;
13081: LD_ADDR_VAR 0 2
13085: PUSH
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 311
13095: ST_TO_ADDR
// veh := i ;
13096: LD_ADDR_VAR 0 3
13100: PUSH
13101: LD_VAR 0 1
13105: ST_TO_ADDR
// break ;
13106: GO 13110
// end ;
13108: GO 13061
13110: POP
13111: POP
// end ; end ; if not unit then
13112: LD_VAR 0 2
13116: NOT
13117: IFFALSE 13121
// exit ;
13119: GO 13187
// RuScientists = RuScientists diff unit ;
13121: LD_ADDR_EXP 35
13125: PUSH
13126: LD_EXP 35
13130: PUSH
13131: LD_VAR 0 2
13135: DIFF
13136: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13137: LD_VAR 0 2
13141: PPUSH
13142: CALL_OW 64
// if veh then
13146: LD_VAR 0 3
13150: IFFALSE 13187
// begin if GetWeapon ( veh ) = 49 then
13152: LD_VAR 0 3
13156: PPUSH
13157: CALL_OW 264
13161: PUSH
13162: LD_INT 49
13164: EQUAL
13165: IFFALSE 13178
// KillUnit ( veh ) else
13167: LD_VAR 0 3
13171: PPUSH
13172: CALL_OW 66
13176: GO 13187
// RemoveUnit ( veh ) ;
13178: LD_VAR 0 3
13182: PPUSH
13183: CALL_OW 64
// end ; end ; end_of_file
13187: PPOPN 4
13189: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13190: LD_INT 0
13192: PPUSH
13193: PPUSH
// if exist_mode then
13194: LD_VAR 0 2
13198: IFFALSE 13217
// unit := CreateCharacter ( ident ) else
13200: LD_ADDR_VAR 0 4
13204: PUSH
13205: LD_VAR 0 1
13209: PPUSH
13210: CALL_OW 34
13214: ST_TO_ADDR
13215: GO 13232
// unit := NewCharacter ( ident ) ;
13217: LD_ADDR_VAR 0 4
13221: PUSH
13222: LD_VAR 0 1
13226: PPUSH
13227: CALL_OW 25
13231: ST_TO_ADDR
// result := unit ;
13232: LD_ADDR_VAR 0 3
13236: PUSH
13237: LD_VAR 0 4
13241: ST_TO_ADDR
// end ;
13242: LD_VAR 0 3
13246: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13247: LD_INT 0
13249: PPUSH
13250: PPUSH
// for i in charactersList do
13251: LD_ADDR_VAR 0 4
13255: PUSH
13256: LD_VAR 0 1
13260: PUSH
13261: FOR_IN
13262: IFFALSE 13291
// begin if IsOk ( i ) then
13264: LD_VAR 0 4
13268: PPUSH
13269: CALL_OW 302
13273: IFFALSE 13289
// SaveCharacters ( i , ident ) ;
13275: LD_VAR 0 4
13279: PPUSH
13280: LD_VAR 0 2
13284: PPUSH
13285: CALL_OW 38
// end ;
13289: GO 13261
13291: POP
13292: POP
// end ;
13293: LD_VAR 0 3
13297: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13298: LD_INT 0
13300: PPUSH
13301: PPUSH
13302: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13303: LD_ADDR_VAR 0 1
13307: PUSH
13308: LD_VAR 0 1
13312: PUSH
13313: LD_EXP 1
13317: PUSH
13318: LD_EXP 7
13322: PUSH
13323: LD_EXP 3
13327: PUSH
13328: LD_EXP 4
13332: PUSH
13333: LD_EXP 5
13337: PUSH
13338: LD_EXP 2
13342: PUSH
13343: LD_EXP 12
13347: PUSH
13348: LD_EXP 13
13352: PUSH
13353: LD_EXP 9
13357: PUSH
13358: LD_EXP 11
13362: PUSH
13363: LD_EXP 6
13367: PUSH
13368: LD_EXP 8
13372: PUSH
13373: LD_EXP 10
13377: PUSH
13378: LD_EXP 22
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: DIFF
13399: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13400: LD_ADDR_VAR 0 6
13404: PUSH
13405: LD_INT 1
13407: PPUSH
13408: LD_VAR 0 1
13412: PPUSH
13413: CALL_OW 12
13417: ST_TO_ADDR
// for i = 1 to characters do
13418: LD_ADDR_VAR 0 5
13422: PUSH
13423: DOUBLE
13424: LD_INT 1
13426: DEC
13427: ST_TO_ADDR
13428: LD_VAR 0 1
13432: PUSH
13433: FOR_TO
13434: IFFALSE 13544
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13436: LD_VAR 0 5
13440: PUSH
13441: LD_VAR 0 6
13445: EQUAL
13446: PUSH
13447: LD_VAR 0 1
13451: PUSH
13452: LD_VAR 0 5
13456: ARRAY
13457: PPUSH
13458: CALL_OW 258
13462: PUSH
13463: LD_INT 1
13465: EQUAL
13466: AND
13467: IFFALSE 13489
// Say ( characters [ i ] , dialogMID ) ;
13469: LD_VAR 0 1
13473: PUSH
13474: LD_VAR 0 5
13478: ARRAY
13479: PPUSH
13480: LD_VAR 0 2
13484: PPUSH
13485: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13489: LD_VAR 0 5
13493: PUSH
13494: LD_VAR 0 6
13498: EQUAL
13499: PUSH
13500: LD_VAR 0 1
13504: PUSH
13505: LD_VAR 0 5
13509: ARRAY
13510: PPUSH
13511: CALL_OW 258
13515: PUSH
13516: LD_INT 2
13518: EQUAL
13519: AND
13520: IFFALSE 13542
// Say ( characters [ i ] , dialogFID ) ;
13522: LD_VAR 0 1
13526: PUSH
13527: LD_VAR 0 5
13531: ARRAY
13532: PPUSH
13533: LD_VAR 0 3
13537: PPUSH
13538: CALL_OW 88
// end ;
13542: GO 13433
13544: POP
13545: POP
// end ;
13546: LD_VAR 0 4
13550: RET
// export function PrepareDifficulty ; var tmp ; begin
13551: LD_INT 0
13553: PPUSH
13554: PPUSH
// if Difficulty = 1 then
13555: LD_OWVAR 67
13559: PUSH
13560: LD_INT 1
13562: EQUAL
13563: IFFALSE 13581
// begin RuSolMinLevel = 8 ;
13565: LD_ADDR_EXP 37
13569: PUSH
13570: LD_INT 8
13572: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13573: LD_ADDR_EXP 38
13577: PUSH
13578: LD_INT 10
13580: ST_TO_ADDR
// end ; if Difficulty = 2 then
13581: LD_OWVAR 67
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: IFFALSE 13683
// begin RuSolMinLevel = 9 ;
13591: LD_ADDR_EXP 37
13595: PUSH
13596: LD_INT 9
13598: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13599: LD_ADDR_EXP 38
13603: PUSH
13604: LD_INT 10
13606: ST_TO_ADDR
// uc_nation = 3 ;
13607: LD_ADDR_OWVAR 21
13611: PUSH
13612: LD_INT 3
13614: ST_TO_ADDR
// uc_side = 3 ;
13615: LD_ADDR_OWVAR 20
13619: PUSH
13620: LD_INT 3
13622: ST_TO_ADDR
// bc_level = 10 ;
13623: LD_ADDR_OWVAR 43
13627: PUSH
13628: LD_INT 10
13630: ST_TO_ADDR
// bc_type = b_turret ;
13631: LD_ADDR_OWVAR 42
13635: PUSH
13636: LD_INT 33
13638: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13639: LD_ADDR_VAR 0 2
13643: PUSH
13644: LD_INT 86
13646: PPUSH
13647: LD_INT 34
13649: PPUSH
13650: LD_INT 2
13652: PPUSH
13653: CALL_OW 47
13657: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13658: LD_VAR 0 2
13662: PPUSH
13663: LD_INT 49
13665: PPUSH
13666: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13670: LD_INT 64
13672: PPUSH
13673: LD_INT 3
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 322
// end ; if Difficulty = 3 then
13683: LD_OWVAR 67
13687: PUSH
13688: LD_INT 3
13690: EQUAL
13691: IFFALSE 13829
// begin RuSolMinLevel = 10 ;
13693: LD_ADDR_EXP 37
13697: PUSH
13698: LD_INT 10
13700: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13701: LD_ADDR_EXP 38
13705: PUSH
13706: LD_INT 10
13708: ST_TO_ADDR
// uc_nation = 3 ;
13709: LD_ADDR_OWVAR 21
13713: PUSH
13714: LD_INT 3
13716: ST_TO_ADDR
// uc_side = 3 ;
13717: LD_ADDR_OWVAR 20
13721: PUSH
13722: LD_INT 3
13724: ST_TO_ADDR
// bc_level = 10 ;
13725: LD_ADDR_OWVAR 43
13729: PUSH
13730: LD_INT 10
13732: ST_TO_ADDR
// bc_type = b_turret ;
13733: LD_ADDR_OWVAR 42
13737: PUSH
13738: LD_INT 33
13740: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: LD_INT 86
13748: PPUSH
13749: LD_INT 34
13751: PPUSH
13752: LD_INT 2
13754: PPUSH
13755: CALL_OW 47
13759: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_INT 49
13767: PPUSH
13768: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13772: LD_ADDR_VAR 0 2
13776: PUSH
13777: LD_INT 93
13779: PPUSH
13780: LD_INT 31
13782: PPUSH
13783: LD_INT 2
13785: PPUSH
13786: CALL_OW 47
13790: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13791: LD_VAR 0 2
13795: PPUSH
13796: LD_INT 49
13798: PPUSH
13799: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13803: LD_INT 64
13805: PPUSH
13806: LD_INT 3
13808: PPUSH
13809: LD_INT 1
13811: PPUSH
13812: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13816: LD_INT 65
13818: PPUSH
13819: LD_INT 3
13821: PPUSH
13822: LD_INT 1
13824: PPUSH
13825: CALL_OW 322
// end ; end ;
13829: LD_VAR 0 1
13833: RET
// export function ShowQuery1 ; begin
13834: LD_INT 0
13836: PPUSH
// case query ( Q1 ) of 1 :
13837: LD_STRING Q1
13839: PPUSH
13840: CALL_OW 97
13844: PUSH
13845: LD_INT 1
13847: DOUBLE
13848: EQUAL
13849: IFTRUE 13853
13851: GO 13864
13853: POP
// result = 1 ; 2 :
13854: LD_ADDR_VAR 0 1
13858: PUSH
13859: LD_INT 1
13861: ST_TO_ADDR
13862: GO 13903
13864: LD_INT 2
13866: DOUBLE
13867: EQUAL
13868: IFTRUE 13872
13870: GO 13883
13872: POP
// result = 2 ; 3 :
13873: LD_ADDR_VAR 0 1
13877: PUSH
13878: LD_INT 2
13880: ST_TO_ADDR
13881: GO 13903
13883: LD_INT 3
13885: DOUBLE
13886: EQUAL
13887: IFTRUE 13891
13889: GO 13902
13891: POP
// result = 3 ; end ;
13892: LD_ADDR_VAR 0 1
13896: PUSH
13897: LD_INT 3
13899: ST_TO_ADDR
13900: GO 13903
13902: POP
// end ;
13903: LD_VAR 0 1
13907: RET
// export function ShowQuery2 ; begin
13908: LD_INT 0
13910: PPUSH
// case query ( Q1a ) of 1 :
13911: LD_STRING Q1a
13913: PPUSH
13914: CALL_OW 97
13918: PUSH
13919: LD_INT 1
13921: DOUBLE
13922: EQUAL
13923: IFTRUE 13927
13925: GO 13938
13927: POP
// result = 1 ; 2 :
13928: LD_ADDR_VAR 0 1
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
13936: GO 13977
13938: LD_INT 2
13940: DOUBLE
13941: EQUAL
13942: IFTRUE 13946
13944: GO 13957
13946: POP
// result = 2 ; 3 :
13947: LD_ADDR_VAR 0 1
13951: PUSH
13952: LD_INT 2
13954: ST_TO_ADDR
13955: GO 13977
13957: LD_INT 3
13959: DOUBLE
13960: EQUAL
13961: IFTRUE 13965
13963: GO 13976
13965: POP
// result = 3 ; end ;
13966: LD_ADDR_VAR 0 1
13970: PUSH
13971: LD_INT 3
13973: ST_TO_ADDR
13974: GO 13977
13976: POP
// end ;
13977: LD_VAR 0 1
13981: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13982: LD_INT 0
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
13988: PPUSH
// for i = 1 to count do
13989: LD_ADDR_VAR 0 8
13993: PUSH
13994: DOUBLE
13995: LD_INT 1
13997: DEC
13998: ST_TO_ADDR
13999: LD_VAR 0 6
14003: PUSH
14004: FOR_TO
14005: IFFALSE 14086
// begin uc_side = side ;
14007: LD_ADDR_OWVAR 20
14011: PUSH
14012: LD_VAR 0 1
14016: ST_TO_ADDR
// uc_nation = nation ;
14017: LD_ADDR_OWVAR 21
14021: PUSH
14022: LD_VAR 0 2
14026: ST_TO_ADDR
// hc_gallery =  ;
14027: LD_ADDR_OWVAR 33
14031: PUSH
14032: LD_STRING 
14034: ST_TO_ADDR
// hc_name =  ;
14035: LD_ADDR_OWVAR 26
14039: PUSH
14040: LD_STRING 
14042: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14043: LD_INT 0
14045: PPUSH
14046: LD_VAR 0 5
14050: PPUSH
14051: LD_VAR 0 4
14055: PPUSH
14056: CALL_OW 380
// un = CreateHuman ;
14060: LD_ADDR_VAR 0 10
14064: PUSH
14065: CALL_OW 44
14069: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14070: LD_VAR 0 10
14074: PPUSH
14075: LD_VAR 0 3
14079: PPUSH
14080: CALL_OW 52
// end ;
14084: GO 14004
14086: POP
14087: POP
// end ;
14088: LD_VAR 0 7
14092: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14093: LD_INT 0
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
14099: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14100: LD_ADDR_VAR 0 8
14104: PUSH
14105: LD_INT 48
14107: PUSH
14108: LD_INT 49
14110: PUSH
14111: LD_INT 50
14113: PUSH
14114: LD_INT 20
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: LD_INT 51
14122: PUSH
14123: LD_INT 52
14125: PUSH
14126: LD_INT 69
14128: PUSH
14129: LD_INT 39
14131: PUSH
14132: LD_INT 34
14134: PUSH
14135: LD_INT 40
14137: PUSH
14138: LD_INT 53
14140: PUSH
14141: LD_INT 71
14143: PUSH
14144: LD_INT 57
14146: PUSH
14147: LD_INT 58
14149: PUSH
14150: LD_INT 44
14152: PUSH
14153: LD_INT 32
14155: PUSH
14156: LD_INT 27
14158: PUSH
14159: LD_INT 23
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 59
14167: PUSH
14168: LD_INT 54
14170: PUSH
14171: LD_INT 55
14173: PUSH
14174: LD_INT 56
14176: PUSH
14177: LD_INT 63
14179: PUSH
14180: LD_INT 64
14182: PUSH
14183: LD_INT 65
14185: PUSH
14186: LD_INT 30
14188: PUSH
14189: LD_INT 31
14191: PUSH
14192: LD_INT 21
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 25
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14235: LD_ADDR_VAR 0 5
14239: PUSH
14240: DOUBLE
14241: LD_INT 1
14243: DEC
14244: ST_TO_ADDR
14245: LD_VAR 0 8
14249: PUSH
14250: FOR_TO
14251: IFFALSE 14327
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14253: LD_VAR 0 8
14257: PUSH
14258: LD_VAR 0 5
14262: ARRAY
14263: PPUSH
14264: LD_VAR 0 1
14268: PPUSH
14269: CALL_OW 321
14273: PUSH
14274: LD_INT 1
14276: EQUAL
14277: PUSH
14278: LD_VAR 0 8
14282: PUSH
14283: LD_VAR 0 5
14287: ARRAY
14288: PPUSH
14289: LD_VAR 0 3
14293: PPUSH
14294: CALL_OW 482
14298: PUSH
14299: LD_INT 1
14301: EQUAL
14302: AND
14303: IFFALSE 14325
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14305: LD_VAR 0 2
14309: PPUSH
14310: LD_VAR 0 8
14314: PUSH
14315: LD_VAR 0 5
14319: ARRAY
14320: PPUSH
14321: CALL_OW 184
14325: GO 14250
14327: POP
14328: POP
// end ;
14329: LD_VAR 0 4
14333: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14334: LD_INT 0
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14342: LD_ADDR_VAR 0 8
14346: PUSH
14347: LD_VAR 0 2
14351: PPUSH
14352: CALL_OW 313
14356: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14357: LD_ADDR_VAR 0 9
14361: PUSH
14362: LD_VAR 0 3
14366: PPUSH
14367: LD_INT 22
14369: PUSH
14370: LD_VAR 0 1
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 25
14381: PUSH
14382: LD_INT 2
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 24
14391: PUSH
14392: LD_INT 750
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 3
14401: PUSH
14402: LD_INT 54
14404: PUSH
14405: EMPTY
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PPUSH
14418: CALL_OW 70
14422: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14423: LD_ADDR_VAR 0 6
14427: PUSH
14428: LD_VAR 0 3
14432: PPUSH
14433: LD_INT 22
14435: PUSH
14436: LD_VAR 0 1
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 21
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: LD_INT 24
14460: PUSH
14461: LD_INT 1000
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: EMPTY
14478: LIST
14479: PPUSH
14480: CALL_OW 70
14484: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14485: LD_VAR 0 6
14489: NOT
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_VAR 0 1
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 25
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 24
14515: PUSH
14516: LD_INT 250
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 69
14532: NOT
14533: AND
14534: IFFALSE 14538
// exit ;
14536: GO 14720
// if buildings_list > 0 and engineerOkInside then
14538: LD_VAR 0 6
14542: PUSH
14543: LD_INT 0
14545: GREATER
14546: PUSH
14547: LD_VAR 0 8
14551: AND
14552: IFFALSE 14563
// ComExitBuilding ( engineerOkInside ) ;
14554: LD_VAR 0 8
14558: PPUSH
14559: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14563: LD_VAR 0 6
14567: PUSH
14568: LD_INT 0
14570: GREATER
14571: PUSH
14572: LD_VAR 0 9
14576: PUSH
14577: LD_INT 0
14579: GREATER
14580: AND
14581: IFFALSE 14601
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14583: LD_VAR 0 9
14587: PPUSH
14588: LD_VAR 0 6
14592: PUSH
14593: LD_INT 1
14595: ARRAY
14596: PPUSH
14597: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14601: LD_VAR 0 6
14605: PUSH
14606: LD_INT 0
14608: EQUAL
14609: PUSH
14610: LD_VAR 0 4
14614: PUSH
14615: LD_INT 0
14617: EQUAL
14618: AND
14619: PUSH
14620: LD_VAR 0 9
14624: PUSH
14625: LD_INT 0
14627: GREATER
14628: AND
14629: IFFALSE 14645
// ComEnterUnit ( engineerOkOutside , building ) ;
14631: LD_VAR 0 9
14635: PPUSH
14636: LD_VAR 0 2
14640: PPUSH
14641: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14645: LD_VAR 0 9
14649: PUSH
14650: LD_INT 0
14652: GREATER
14653: PUSH
14654: LD_VAR 0 6
14658: PUSH
14659: LD_INT 0
14661: EQUAL
14662: AND
14663: PUSH
14664: LD_VAR 0 4
14668: PUSH
14669: LD_INT 0
14671: GREATER
14672: AND
14673: IFFALSE 14720
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14675: LD_VAR 0 9
14679: PPUSH
14680: LD_VAR 0 4
14684: PUSH
14685: LD_INT 1
14687: ARRAY
14688: PPUSH
14689: LD_VAR 0 4
14693: PUSH
14694: LD_INT 2
14696: ARRAY
14697: PPUSH
14698: LD_VAR 0 4
14702: PUSH
14703: LD_INT 3
14705: ARRAY
14706: PPUSH
14707: LD_VAR 0 4
14711: PUSH
14712: LD_INT 4
14714: ARRAY
14715: PPUSH
14716: CALL_OW 145
// end ;
14720: LD_VAR 0 5
14724: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14725: LD_INT 0
14727: PPUSH
14728: PPUSH
14729: PPUSH
14730: PPUSH
14731: PPUSH
14732: PPUSH
14733: PPUSH
14734: PPUSH
14735: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14736: LD_ADDR_VAR 0 6
14740: PUSH
14741: LD_INT 22
14743: PUSH
14744: LD_VAR 0 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 25
14755: PUSH
14756: LD_INT 4
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 24
14765: PUSH
14766: LD_INT 251
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 69
14782: PUSH
14783: LD_EXP 35
14787: PUSH
14788: EMPTY
14789: LIST
14790: DIFF
14791: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14792: LD_ADDR_VAR 0 7
14796: PUSH
14797: LD_VAR 0 3
14801: PPUSH
14802: LD_INT 22
14804: PUSH
14805: LD_VAR 0 1
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 25
14816: PUSH
14817: LD_INT 4
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 50
14826: PUSH
14827: EMPTY
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 70
14839: PUSH
14840: LD_EXP 35
14844: PUSH
14845: EMPTY
14846: LIST
14847: DIFF
14848: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14849: LD_ADDR_VAR 0 10
14853: PUSH
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_INT 22
14861: PUSH
14862: LD_VAR 0 1
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 3
14883: PUSH
14884: LD_INT 24
14886: PUSH
14887: LD_INT 750
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 70
14907: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14908: LD_ADDR_VAR 0 11
14912: PUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: LD_INT 22
14920: PUSH
14921: LD_VAR 0 1
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 21
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 3
14942: PUSH
14943: LD_INT 24
14945: PUSH
14946: LD_INT 1000
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: PPUSH
14962: CALL_OW 70
14966: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14967: LD_VAR 0 10
14971: PUSH
14972: LD_INT 0
14974: GREATER
14975: PUSH
14976: LD_VAR 0 6
14980: PUSH
14981: LD_INT 0
14983: GREATER
14984: AND
14985: IFFALSE 15001
// ComMoveToArea ( damageUnits , healArea ) ;
14987: LD_VAR 0 10
14991: PPUSH
14992: LD_VAR 0 2
14996: PPUSH
14997: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
15001: LD_VAR 0 11
15005: PUSH
15006: LD_INT 0
15008: GREATER
15009: PUSH
15010: LD_VAR 0 7
15014: PUSH
15015: LD_INT 0
15017: GREATER
15018: AND
15019: IFFALSE 15039
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15021: LD_VAR 0 7
15025: PPUSH
15026: LD_VAR 0 11
15030: PUSH
15031: LD_INT 1
15033: ARRAY
15034: PPUSH
15035: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15039: LD_VAR 0 10
15043: PUSH
15044: LD_INT 0
15046: EQUAL
15047: PUSH
15048: LD_VAR 0 11
15052: PUSH
15053: LD_INT 0
15055: EQUAL
15056: AND
15057: PUSH
15058: LD_VAR 0 7
15062: PUSH
15063: LD_INT 0
15065: GREATER
15066: AND
15067: IFFALSE 15172
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15069: LD_ADDR_VAR 0 12
15073: PUSH
15074: LD_INT 22
15076: PUSH
15077: LD_VAR 0 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 21
15088: PUSH
15089: LD_INT 3
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 30
15098: PUSH
15099: LD_INT 8
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: PPUSH
15111: CALL_OW 69
15115: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15116: LD_ADDR_VAR 0 13
15120: PUSH
15121: LD_INT 1
15123: PPUSH
15124: LD_VAR 0 12
15128: PPUSH
15129: CALL_OW 12
15133: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15134: LD_VAR 0 7
15138: PPUSH
15139: LD_INT 3
15141: PUSH
15142: LD_INT 60
15144: PUSH
15145: EMPTY
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 72
15156: PPUSH
15157: LD_VAR 0 12
15161: PUSH
15162: LD_VAR 0 13
15166: ARRAY
15167: PPUSH
15168: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15172: LD_VAR 0 3
15176: PPUSH
15177: LD_INT 22
15179: PUSH
15180: LD_VAR 0 1
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 25
15191: PUSH
15192: LD_INT 3
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 24
15201: PUSH
15202: LD_INT 751
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: LIST
15213: PPUSH
15214: CALL_OW 70
15218: PUSH
15219: LD_INT 0
15221: GREATER
15222: PUSH
15223: LD_INT 21
15225: PPUSH
15226: CALL_OW 302
15230: AND
15231: PUSH
15232: LD_INT 21
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 3
15242: EQUAL
15243: AND
15244: IFFALSE 15300
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_INT 22
15253: PUSH
15254: LD_VAR 0 1
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 25
15265: PUSH
15266: LD_INT 3
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 24
15275: PUSH
15276: LD_INT 751
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 70
15292: PPUSH
15293: LD_INT 21
15295: PPUSH
15296: CALL_OW 120
// end ;
15300: LD_VAR 0 5
15304: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15312: LD_ADDR_VAR 0 6
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_VAR 0 1
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 2
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 31
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 30
15344: PUSH
15345: LD_INT 32
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 30
15354: PUSH
15355: LD_INT 33
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 30
15364: PUSH
15365: LD_INT 4
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 30
15374: PUSH
15375: LD_INT 5
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PPUSH
15394: CALL_OW 69
15398: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15399: LD_ADDR_VAR 0 7
15403: PUSH
15404: LD_INT 22
15406: PUSH
15407: LD_VAR 0 2
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 21
15418: PUSH
15419: LD_INT 3
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 58
15428: PUSH
15429: EMPTY
15430: LIST
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 69
15441: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15442: LD_VAR 0 6
15446: PUSH
15447: LD_INT 0
15449: GREATER
15450: PUSH
15451: LD_VAR 0 7
15455: PUSH
15456: LD_INT 0
15458: GREATER
15459: AND
15460: IFFALSE 15530
// begin for i in turretsList do
15462: LD_ADDR_VAR 0 4
15466: PUSH
15467: LD_VAR 0 6
15471: PUSH
15472: FOR_IN
15473: IFFALSE 15528
// begin for j in enemyBuildings do
15475: LD_ADDR_VAR 0 5
15479: PUSH
15480: LD_VAR 0 7
15484: PUSH
15485: FOR_IN
15486: IFFALSE 15524
// begin if GetDistUnits ( i , j ) < 20 then
15488: LD_VAR 0 4
15492: PPUSH
15493: LD_VAR 0 5
15497: PPUSH
15498: CALL_OW 296
15502: PUSH
15503: LD_INT 20
15505: LESS
15506: IFFALSE 15522
// begin ComAttackUnit ( i , j ) ;
15508: LD_VAR 0 4
15512: PPUSH
15513: LD_VAR 0 5
15517: PPUSH
15518: CALL_OW 115
// end ; end ;
15522: GO 15485
15524: POP
15525: POP
// end ;
15526: GO 15472
15528: POP
15529: POP
// end ; end ;
15530: LD_VAR 0 3
15534: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15535: LD_INT 0
15537: PPUSH
15538: PPUSH
15539: PPUSH
15540: PPUSH
15541: PPUSH
15542: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15543: LD_ADDR_VAR 0 7
15547: PUSH
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_INT 22
15555: PUSH
15556: LD_VAR 0 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 21
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 34
15577: PUSH
15578: LD_INT 52
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: LIST
15589: PPUSH
15590: CALL_OW 70
15594: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15595: LD_ADDR_VAR 0 8
15599: PUSH
15600: LD_VAR 0 2
15604: PPUSH
15605: LD_INT 22
15607: PUSH
15608: LD_VAR 0 1
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 3
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 3
15629: PUSH
15630: LD_INT 24
15632: PUSH
15633: LD_INT 1000
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: PPUSH
15652: CALL_OW 70
15656: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15657: LD_VAR 0 8
15661: PUSH
15662: LD_INT 0
15664: GREATER
15665: PUSH
15666: LD_VAR 0 7
15670: PPUSH
15671: LD_INT 24
15673: PUSH
15674: LD_INT 750
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PPUSH
15681: CALL_OW 72
15685: PUSH
15686: LD_INT 0
15688: GREATER
15689: AND
15690: IFFALSE 15710
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15692: LD_VAR 0 7
15696: PPUSH
15697: LD_VAR 0 8
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 130
// end ;
15710: LD_VAR 0 3
15714: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15715: LD_INT 0
15717: PPUSH
15718: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15719: LD_INT 22
15721: PUSH
15722: LD_VAR 0 1
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 21
15733: PUSH
15734: LD_INT 2
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PUSH
15750: LD_INT 18
15752: PPUSH
15753: LD_INT 22
15755: PUSH
15756: LD_VAR 0 1
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 21
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PPUSH
15779: CALL_OW 70
15783: PUSH
15784: LD_VAR 0 3
15788: LESSEQUAL
15789: DIFF
15790: IFFALSE 15857
// for i = 1 to vehCount do
15792: LD_ADDR_VAR 0 9
15796: PUSH
15797: DOUBLE
15798: LD_INT 1
15800: DEC
15801: ST_TO_ADDR
15802: LD_VAR 0 3
15806: PUSH
15807: FOR_TO
15808: IFFALSE 15855
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15810: LD_VAR 0 2
15814: PPUSH
15815: LD_VAR 0 7
15819: PPUSH
15820: LD_VAR 0 5
15824: PPUSH
15825: LD_VAR 0 6
15829: PPUSH
15830: LD_VAR 0 4
15834: PUSH
15835: LD_INT 1
15837: PPUSH
15838: LD_VAR 0 4
15842: PPUSH
15843: CALL_OW 12
15847: ARRAY
15848: PPUSH
15849: CALL_OW 185
15853: GO 15807
15855: POP
15856: POP
// end ;
15857: LD_VAR 0 8
15861: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15862: LD_INT 0
15864: PPUSH
15865: PPUSH
15866: PPUSH
15867: PPUSH
15868: PPUSH
15869: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15870: LD_EXP 40
15874: PUSH
15875: LD_INT 3
15877: PUSH
15878: LD_INT 4
15880: PUSH
15881: LD_INT 4
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: PUSH
15889: LD_OWVAR 67
15893: ARRAY
15894: GREATEREQUAL
15895: PUSH
15896: LD_EXP 41
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: LD_INT 2
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: PUSH
15915: LD_OWVAR 67
15919: ARRAY
15920: GREATEREQUAL
15921: AND
15922: IFFALSE 16155
// begin repeat wait ( 0 0$3 ) ;
15924: LD_INT 105
15926: PPUSH
15927: CALL_OW 67
// for j in russianTanks do
15931: LD_ADDR_VAR 0 4
15935: PUSH
15936: LD_EXP 40
15940: PUSH
15941: FOR_IN
15942: IFFALSE 16143
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15944: LD_ADDR_VAR 0 6
15948: PUSH
15949: LD_INT 81
15951: PUSH
15952: LD_VAR 0 1
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 101
15963: PUSH
15964: LD_INT 1
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PPUSH
15975: CALL_OW 69
15979: PPUSH
15980: LD_VAR 0 4
15984: PPUSH
15985: CALL_OW 74
15989: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15990: LD_ADDR_VAR 0 7
15994: PUSH
15995: LD_INT 81
15997: PUSH
15998: LD_VAR 0 1
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 101
16009: PUSH
16010: LD_INT 1
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 2
16019: PUSH
16020: LD_INT 59
16022: PUSH
16023: EMPTY
16024: LIST
16025: PUSH
16026: LD_INT 21
16028: PUSH
16029: LD_INT 1
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 21
16038: PUSH
16039: LD_INT 2
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: PPUSH
16060: CALL_OW 69
16064: PPUSH
16065: LD_VAR 0 4
16069: PPUSH
16070: CALL_OW 74
16074: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16075: LD_VAR 0 4
16079: PPUSH
16080: LD_VAR 0 6
16084: PPUSH
16085: CALL_OW 296
16089: PUSH
16090: LD_INT 8
16092: PLUS
16093: PUSH
16094: LD_VAR 0 4
16098: PPUSH
16099: LD_VAR 0 7
16103: PPUSH
16104: CALL_OW 296
16108: LESS
16109: IFFALSE 16127
// ComAttackUnit ( j , target1 ) else
16111: LD_VAR 0 4
16115: PPUSH
16116: LD_VAR 0 6
16120: PPUSH
16121: CALL_OW 115
16125: GO 16141
// ComAttackUnit ( j , target2 ) ;
16127: LD_VAR 0 4
16131: PPUSH
16132: LD_VAR 0 7
16136: PPUSH
16137: CALL_OW 115
// end ;
16141: GO 15941
16143: POP
16144: POP
// until russianTanks = 0 ;
16145: LD_EXP 40
16149: PUSH
16150: LD_INT 0
16152: EQUAL
16153: IFFALSE 15924
// end ; end ;
16155: LD_VAR 0 2
16159: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16160: LD_INT 0
16162: PPUSH
16163: PPUSH
16164: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16165: LD_EXP 40
16169: PUSH
16170: LD_INT 1
16172: GREATEREQUAL
16173: PUSH
16174: LD_EXP 41
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: LD_INT 2
16184: PUSH
16185: LD_INT 2
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: PUSH
16193: LD_OWVAR 67
16197: ARRAY
16198: GREATEREQUAL
16199: AND
16200: IFFALSE 16350
// repeat wait ( 0 0$3 ) ;
16202: LD_INT 105
16204: PPUSH
16205: CALL_OW 67
// if russianTimeLapsers > 0 then
16209: LD_EXP 41
16213: PUSH
16214: LD_INT 0
16216: GREATER
16217: IFFALSE 16340
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16219: LD_ADDR_VAR 0 3
16223: PUSH
16224: LD_EXP 41
16228: PPUSH
16229: LD_INT 3
16231: PUSH
16232: LD_INT 60
16234: PUSH
16235: EMPTY
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 72
16246: PUSH
16247: FOR_IN
16248: IFFALSE 16338
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
16250: LD_ADDR_VAR 0 4
16254: PUSH
16255: LD_INT 81
16257: PUSH
16258: LD_VAR 0 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 101
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 21
16279: PUSH
16280: LD_INT 1
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: PPUSH
16297: LD_VAR 0 3
16301: PPUSH
16302: CALL_OW 74
16306: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
16307: LD_VAR 0 3
16311: PPUSH
16312: LD_VAR 0 4
16316: PPUSH
16317: CALL_OW 250
16321: PPUSH
16322: LD_VAR 0 4
16326: PPUSH
16327: CALL_OW 251
16331: PPUSH
16332: CALL_OW 111
// end ;
16336: GO 16247
16338: POP
16339: POP
// until russianTimeLapsers = 0 ;
16340: LD_EXP 41
16344: PUSH
16345: LD_INT 0
16347: EQUAL
16348: IFFALSE 16202
// end ;
16350: LD_VAR 0 2
16354: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16355: LD_INT 0
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
16361: PPUSH
16362: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16363: LD_ADDR_VAR 0 6
16367: PUSH
16368: LD_INT 22
16370: PUSH
16371: LD_VAR 0 1
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 25
16382: PUSH
16383: LD_INT 9
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PPUSH
16394: CALL_OW 69
16398: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16399: LD_ADDR_VAR 0 7
16403: PUSH
16404: LD_INT 81
16406: PUSH
16407: LD_VAR 0 1
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 3
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 3
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PPUSH
16437: CALL_OW 69
16441: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16442: LD_ADDR_VAR 0 4
16446: PUSH
16447: LD_INT 1
16449: PPUSH
16450: LD_INT 3
16452: PPUSH
16453: CALL_OW 12
16457: ST_TO_ADDR
// for i = 1 to list do
16458: LD_ADDR_VAR 0 5
16462: PUSH
16463: DOUBLE
16464: LD_INT 1
16466: DEC
16467: ST_TO_ADDR
16468: LD_VAR 0 6
16472: PUSH
16473: FOR_TO
16474: IFFALSE 16676
// for ta in filter do
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_VAR 0 7
16485: PUSH
16486: FOR_IN
16487: IFFALSE 16672
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16489: LD_VAR 0 6
16493: PUSH
16494: LD_VAR 0 5
16498: ARRAY
16499: PPUSH
16500: LD_VAR 0 3
16504: PPUSH
16505: CALL_OW 296
16509: PUSH
16510: LD_INT 15
16512: LESSEQUAL
16513: IFFALSE 16670
// begin case c of 1 :
16515: LD_VAR 0 4
16519: PUSH
16520: LD_INT 1
16522: DOUBLE
16523: EQUAL
16524: IFTRUE 16528
16526: GO 16566
16528: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16529: LD_VAR 0 6
16533: PUSH
16534: LD_VAR 0 5
16538: ARRAY
16539: PPUSH
16540: LD_VAR 0 3
16544: PPUSH
16545: CALL_OW 250
16549: PPUSH
16550: LD_VAR 0 3
16554: PPUSH
16555: CALL_OW 251
16559: PPUSH
16560: CALL_OW 154
16564: GO 16670
16566: LD_INT 2
16568: DOUBLE
16569: EQUAL
16570: IFTRUE 16574
16572: GO 16638
16574: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16575: LD_VAR 0 6
16579: PUSH
16580: LD_VAR 0 5
16584: ARRAY
16585: PPUSH
16586: LD_VAR 0 3
16590: PPUSH
16591: CALL_OW 250
16595: PUSH
16596: LD_INT 1
16598: NEG
16599: PPUSH
16600: LD_INT 1
16602: PPUSH
16603: CALL_OW 12
16607: PLUS
16608: PPUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: CALL_OW 251
16618: PUSH
16619: LD_INT 1
16621: NEG
16622: PPUSH
16623: LD_INT 1
16625: PPUSH
16626: CALL_OW 12
16630: PLUS
16631: PPUSH
16632: CALL_OW 153
16636: GO 16670
16638: LD_INT 3
16640: DOUBLE
16641: EQUAL
16642: IFTRUE 16646
16644: GO 16669
16646: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16647: LD_VAR 0 6
16651: PUSH
16652: LD_VAR 0 5
16656: ARRAY
16657: PPUSH
16658: LD_VAR 0 3
16662: PPUSH
16663: CALL_OW 115
16667: GO 16670
16669: POP
// end ; end ;
16670: GO 16486
16672: POP
16673: POP
16674: GO 16473
16676: POP
16677: POP
// end ;
16678: LD_VAR 0 2
16682: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16683: LD_INT 0
16685: PPUSH
16686: PPUSH
16687: PPUSH
16688: PPUSH
// r := 100 ;
16689: LD_ADDR_VAR 0 5
16693: PUSH
16694: LD_INT 100
16696: ST_TO_ADDR
// x := 0 ;
16697: LD_ADDR_VAR 0 6
16701: PUSH
16702: LD_INT 0
16704: ST_TO_ADDR
// while ( x < n ) do
16705: LD_VAR 0 6
16709: PUSH
16710: LD_VAR 0 2
16714: LESS
16715: IFFALSE 17002
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16717: LD_ADDR_VAR 0 4
16721: PUSH
16722: DOUBLE
16723: LD_INT 1
16725: DEC
16726: ST_TO_ADDR
16727: LD_VAR 0 1
16731: PPUSH
16732: LD_INT 0
16734: PPUSH
16735: CALL_OW 517
16739: PUSH
16740: LD_INT 1
16742: ARRAY
16743: PUSH
16744: FOR_TO
16745: IFFALSE 16998
// begin if r > 50 then
16747: LD_VAR 0 5
16751: PUSH
16752: LD_INT 50
16754: GREATER
16755: IFFALSE 16974
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16757: LD_VAR 0 1
16761: PPUSH
16762: LD_INT 0
16764: PPUSH
16765: CALL_OW 517
16769: PUSH
16770: LD_INT 1
16772: ARRAY
16773: PUSH
16774: LD_VAR 0 4
16778: ARRAY
16779: PPUSH
16780: LD_VAR 0 1
16784: PPUSH
16785: LD_INT 0
16787: PPUSH
16788: CALL_OW 517
16792: PUSH
16793: LD_INT 2
16795: ARRAY
16796: PUSH
16797: LD_VAR 0 4
16801: ARRAY
16802: PPUSH
16803: CALL_OW 458
16807: NOT
16808: IFFALSE 16958
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16810: LD_VAR 0 1
16814: PPUSH
16815: LD_INT 0
16817: PPUSH
16818: CALL_OW 517
16822: PUSH
16823: LD_INT 1
16825: ARRAY
16826: PUSH
16827: LD_VAR 0 4
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: LD_INT 0
16840: PPUSH
16841: CALL_OW 517
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PUSH
16850: LD_VAR 0 4
16854: ARRAY
16855: PPUSH
16856: LD_INT 8
16858: PPUSH
16859: LD_INT 0
16861: PPUSH
16862: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16866: LD_ADDR_EXP 45
16870: PUSH
16871: LD_EXP 45
16875: PPUSH
16876: LD_INT 1
16878: PPUSH
16879: LD_VAR 0 1
16883: PPUSH
16884: LD_INT 0
16886: PPUSH
16887: CALL_OW 517
16891: PUSH
16892: LD_INT 1
16894: ARRAY
16895: PUSH
16896: LD_VAR 0 4
16900: ARRAY
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 0
16909: PPUSH
16910: CALL_OW 517
16914: PUSH
16915: LD_INT 2
16917: ARRAY
16918: PUSH
16919: LD_VAR 0 4
16923: ARRAY
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PPUSH
16929: CALL_OW 2
16933: ST_TO_ADDR
// r := 0 ;
16934: LD_ADDR_VAR 0 5
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// x := x + 1 ;
16942: LD_ADDR_VAR 0 6
16946: PUSH
16947: LD_VAR 0 6
16951: PUSH
16952: LD_INT 1
16954: PLUS
16955: ST_TO_ADDR
// end else
16956: GO 16972
// r := r + 35 ;
16958: LD_ADDR_VAR 0 5
16962: PUSH
16963: LD_VAR 0 5
16967: PUSH
16968: LD_INT 35
16970: PLUS
16971: ST_TO_ADDR
// end else
16972: GO 16996
// r := r + rand ( 10 , 25 ) ;
16974: LD_ADDR_VAR 0 5
16978: PUSH
16979: LD_VAR 0 5
16983: PUSH
16984: LD_INT 10
16986: PPUSH
16987: LD_INT 25
16989: PPUSH
16990: CALL_OW 12
16994: PLUS
16995: ST_TO_ADDR
// end ;
16996: GO 16744
16998: POP
16999: POP
17000: GO 16705
// end ;
17002: LD_VAR 0 3
17006: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17007: LD_INT 0
17009: PPUSH
17010: PPUSH
17011: PPUSH
17012: PPUSH
// tmpTab = [ ] ;
17013: LD_ADDR_VAR 0 6
17017: PUSH
17018: EMPTY
17019: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17020: LD_INT 22
17022: PUSH
17023: LD_VAR 0 1
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 30
17034: PUSH
17035: LD_INT 32
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 69
17050: PUSH
17051: LD_INT 0
17053: GREATER
17054: IFFALSE 17137
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17056: LD_ADDR_VAR 0 4
17060: PUSH
17061: LD_INT 22
17063: PUSH
17064: LD_VAR 0 1
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 30
17075: PUSH
17076: LD_INT 32
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PPUSH
17087: CALL_OW 69
17091: PUSH
17092: FOR_IN
17093: IFFALSE 17135
// begin for j in UnitsInside ( i ) do
17095: LD_ADDR_VAR 0 5
17099: PUSH
17100: LD_VAR 0 4
17104: PPUSH
17105: CALL_OW 313
17109: PUSH
17110: FOR_IN
17111: IFFALSE 17131
// tmpTab = tmpTab ^ j ;
17113: LD_ADDR_VAR 0 6
17117: PUSH
17118: LD_VAR 0 6
17122: PUSH
17123: LD_VAR 0 5
17127: ADD
17128: ST_TO_ADDR
17129: GO 17110
17131: POP
17132: POP
// end ;
17133: GO 17092
17135: POP
17136: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17137: LD_VAR 0 6
17141: PPUSH
17142: LD_VAR 0 2
17146: PPUSH
17147: CALL_OW 250
17151: PPUSH
17152: LD_VAR 0 2
17156: PPUSH
17157: CALL_OW 251
17161: PPUSH
17162: CALL_OW 114
// end ;
17166: LD_VAR 0 3
17170: RET
// export function PrepareNature ; var i , un ; begin
17171: LD_INT 0
17173: PPUSH
17174: PPUSH
17175: PPUSH
// uc_side := 0 ;
17176: LD_ADDR_OWVAR 20
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// uc_nation := 0 ;
17184: LD_ADDR_OWVAR 21
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// InitHc ;
17192: CALL_OW 19
// hc_class := class_fish ;
17196: LD_ADDR_OWVAR 28
17200: PUSH
17201: LD_INT 20
17203: ST_TO_ADDR
// for i = 1 to 6 do
17204: LD_ADDR_VAR 0 2
17208: PUSH
17209: DOUBLE
17210: LD_INT 1
17212: DEC
17213: ST_TO_ADDR
17214: LD_INT 6
17216: PUSH
17217: FOR_TO
17218: IFFALSE 17237
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17220: CALL_OW 44
17224: PPUSH
17225: LD_INT 23
17227: PPUSH
17228: LD_INT 0
17230: PPUSH
17231: CALL_OW 49
17235: GO 17217
17237: POP
17238: POP
// for i = 1 to Difficulty + 2 do
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: DOUBLE
17245: LD_INT 1
17247: DEC
17248: ST_TO_ADDR
17249: LD_OWVAR 67
17253: PUSH
17254: LD_INT 2
17256: PLUS
17257: PUSH
17258: FOR_TO
17259: IFFALSE 17368
// begin hc_sex = sex_male ;
17261: LD_ADDR_OWVAR 27
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// uc_side = 0 ;
17269: LD_ADDR_OWVAR 20
17273: PUSH
17274: LD_INT 0
17276: ST_TO_ADDR
// uc_nation = nation_nature ;
17277: LD_ADDR_OWVAR 21
17281: PUSH
17282: LD_INT 0
17284: ST_TO_ADDR
// hc_class = class_tiger ;
17285: LD_ADDR_OWVAR 28
17289: PUSH
17290: LD_INT 14
17292: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17293: LD_ADDR_OWVAR 31
17297: PUSH
17298: LD_EXP 38
17302: PUSH
17303: LD_INT 0
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: LD_INT 0
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17318: LD_ADDR_OWVAR 35
17322: PUSH
17323: LD_INT 5
17325: NEG
17326: PPUSH
17327: LD_INT 5
17329: PPUSH
17330: CALL_OW 12
17334: PUSH
17335: LD_OWVAR 67
17339: MUL
17340: ST_TO_ADDR
// un = CreateHuman ;
17341: LD_ADDR_VAR 0 3
17345: PUSH
17346: CALL_OW 44
17350: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17351: LD_VAR 0 3
17355: PPUSH
17356: LD_INT 24
17358: PPUSH
17359: LD_INT 0
17361: PPUSH
17362: CALL_OW 49
// end ;
17366: GO 17258
17368: POP
17369: POP
// for i = 1 to rand ( 3 , 4 ) do
17370: LD_ADDR_VAR 0 2
17374: PUSH
17375: DOUBLE
17376: LD_INT 1
17378: DEC
17379: ST_TO_ADDR
17380: LD_INT 3
17382: PPUSH
17383: LD_INT 4
17385: PPUSH
17386: CALL_OW 12
17390: PUSH
17391: FOR_TO
17392: IFFALSE 17484
// begin hc_sex = sex_male ;
17394: LD_ADDR_OWVAR 27
17398: PUSH
17399: LD_INT 1
17401: ST_TO_ADDR
// uc_side = 0 ;
17402: LD_ADDR_OWVAR 20
17406: PUSH
17407: LD_INT 0
17409: ST_TO_ADDR
// uc_nation = nation_nature ;
17410: LD_ADDR_OWVAR 21
17414: PUSH
17415: LD_INT 0
17417: ST_TO_ADDR
// hc_class = 18 ;
17418: LD_ADDR_OWVAR 28
17422: PUSH
17423: LD_INT 18
17425: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17426: LD_ADDR_OWVAR 31
17430: PUSH
17431: LD_INT 0
17433: PUSH
17434: LD_INT 0
17436: PUSH
17437: LD_INT 0
17439: PUSH
17440: LD_INT 0
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: ST_TO_ADDR
// hc_agressivity = 0 ;
17449: LD_ADDR_OWVAR 35
17453: PUSH
17454: LD_INT 0
17456: ST_TO_ADDR
// un = CreateHuman ;
17457: LD_ADDR_VAR 0 3
17461: PUSH
17462: CALL_OW 44
17466: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17467: LD_VAR 0 3
17471: PPUSH
17472: LD_INT 24
17474: PPUSH
17475: LD_INT 0
17477: PPUSH
17478: CALL_OW 49
// end ;
17482: GO 17391
17484: POP
17485: POP
// for i = 1 to rand ( 1 , 3 ) do
17486: LD_ADDR_VAR 0 2
17490: PUSH
17491: DOUBLE
17492: LD_INT 1
17494: DEC
17495: ST_TO_ADDR
17496: LD_INT 1
17498: PPUSH
17499: LD_INT 3
17501: PPUSH
17502: CALL_OW 12
17506: PUSH
17507: FOR_TO
17508: IFFALSE 17656
// begin hc_sex = sex_male ;
17510: LD_ADDR_OWVAR 27
17514: PUSH
17515: LD_INT 1
17517: ST_TO_ADDR
// uc_side = 0 ;
17518: LD_ADDR_OWVAR 20
17522: PUSH
17523: LD_INT 0
17525: ST_TO_ADDR
// uc_nation = nation_nature ;
17526: LD_ADDR_OWVAR 21
17530: PUSH
17531: LD_INT 0
17533: ST_TO_ADDR
// hc_class = class_apeman ;
17534: LD_ADDR_OWVAR 28
17538: PUSH
17539: LD_INT 12
17541: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17542: LD_ADDR_OWVAR 31
17546: PUSH
17547: LD_EXP 37
17551: PPUSH
17552: LD_EXP 38
17556: PPUSH
17557: CALL_OW 12
17561: PUSH
17562: LD_EXP 37
17566: PPUSH
17567: LD_EXP 38
17571: PPUSH
17572: CALL_OW 12
17576: PUSH
17577: LD_EXP 37
17581: PPUSH
17582: LD_EXP 38
17586: PPUSH
17587: CALL_OW 12
17591: PUSH
17592: LD_EXP 37
17596: PPUSH
17597: LD_EXP 38
17601: PPUSH
17602: CALL_OW 12
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17613: LD_ADDR_OWVAR 35
17617: PUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 20
17623: PPUSH
17624: CALL_OW 12
17628: ST_TO_ADDR
// un = CreateHuman ;
17629: LD_ADDR_VAR 0 3
17633: PUSH
17634: CALL_OW 44
17638: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17639: LD_VAR 0 3
17643: PPUSH
17644: LD_INT 24
17646: PPUSH
17647: LD_INT 0
17649: PPUSH
17650: CALL_OW 49
// end ;
17654: GO 17507
17656: POP
17657: POP
// end ; end_of_file
17658: LD_VAR 0 1
17662: RET
// on UnitDestroyed ( unit ) do var i ;
17663: LD_INT 0
17665: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17666: LD_VAR 0 1
17670: PPUSH
17671: CALL_OW 255
17675: PUSH
17676: LD_INT 3
17678: EQUAL
17679: PUSH
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 247
17689: PUSH
17690: LD_INT 1
17692: EQUAL
17693: AND
17694: IFFALSE 17758
// begin for i in RuScientists do
17696: LD_ADDR_VAR 0 2
17700: PUSH
17701: LD_EXP 35
17705: PUSH
17706: FOR_IN
17707: IFFALSE 17756
// if i = unit then
17709: LD_VAR 0 2
17713: PUSH
17714: LD_VAR 0 1
17718: EQUAL
17719: IFFALSE 17754
// begin RuScientists = RuScientists diff [ unit ] ;
17721: LD_ADDR_EXP 35
17725: PUSH
17726: LD_EXP 35
17730: PUSH
17731: LD_VAR 0 1
17735: PUSH
17736: EMPTY
17737: LIST
17738: DIFF
17739: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17740: LD_ADDR_EXP 36
17744: PUSH
17745: LD_EXP 36
17749: PUSH
17750: LD_INT 1
17752: PLUS
17753: ST_TO_ADDR
// end ;
17754: GO 17706
17756: POP
17757: POP
// end ; end ;
17758: PPOPN 2
17760: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17761: LD_VAR 0 1
17765: PUSH
17766: LD_INT 10
17768: EQUAL
17769: PUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: CALL_OW 255
17779: PUSH
17780: LD_INT 1
17782: EQUAL
17783: AND
17784: PUSH
17785: LD_EXP 48
17789: PUSH
17790: LD_INT 0
17792: EQUAL
17793: AND
17794: IFFALSE 17906
// begin eventVar1 = 1 ;
17796: LD_ADDR_EXP 48
17800: PUSH
17801: LD_INT 1
17803: ST_TO_ADDR
// teleportExplored = 1 ;
17804: LD_ADDR_EXP 34
17808: PUSH
17809: LD_INT 1
17811: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17812: LD_STRING M2a
17814: PPUSH
17815: CALL_OW 337
// wait ( 0 0$2 ) ;
17819: LD_INT 70
17821: PPUSH
17822: CALL_OW 67
// DialogueOn ;
17826: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17830: LD_INT 22
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 21
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PPUSH
17854: CALL_OW 69
17858: PPUSH
17859: LD_STRING DT3a-Sol1-1
17861: PPUSH
17862: LD_STRING DT3a-FSol1-1
17864: PPUSH
17865: CALL 13298 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17869: LD_EXP 1
17873: PPUSH
17874: LD_STRING DT3a-JMM-1
17876: PPUSH
17877: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17881: LD_VAR 0 2
17885: PPUSH
17886: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17890: LD_EXP 1
17894: PPUSH
17895: LD_STRING DT3a-JMM-1a
17897: PPUSH
17898: CALL_OW 88
// DialogueOff ;
17902: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17906: LD_VAR 0 1
17910: PUSH
17911: LD_INT 10
17913: EQUAL
17914: PUSH
17915: LD_VAR 0 2
17919: PPUSH
17920: CALL_OW 247
17924: PUSH
17925: LD_INT 2
17927: EQUAL
17928: AND
17929: PUSH
17930: LD_VAR 0 2
17934: PPUSH
17935: CALL_OW 255
17939: PUSH
17940: LD_INT 3
17942: EQUAL
17943: AND
17944: PUSH
17945: LD_EXP 29
17949: PUSH
17950: LD_INT 0
17952: EQUAL
17953: AND
17954: IFFALSE 17971
// begin wait ( 0 0$3 ) ;
17956: LD_INT 105
17958: PPUSH
17959: CALL_OW 67
// vehicleTeleported = 1 ;
17963: LD_ADDR_EXP 29
17967: PUSH
17968: LD_INT 1
17970: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17971: LD_VAR 0 1
17975: PUSH
17976: LD_INT 10
17978: EQUAL
17979: PUSH
17980: LD_VAR 0 2
17984: PPUSH
17985: CALL_OW 247
17989: PUSH
17990: LD_INT 2
17992: EQUAL
17993: AND
17994: PUSH
17995: LD_VAR 0 2
17999: PPUSH
18000: CALL_OW 255
18004: PUSH
18005: LD_INT 3
18007: EQUAL
18008: AND
18009: PUSH
18010: LD_EXP 29
18014: PUSH
18015: LD_INT 2
18017: EQUAL
18018: AND
18019: IFFALSE 18036
// begin wait ( 0 0$3 ) ;
18021: LD_INT 105
18023: PPUSH
18024: CALL_OW 67
// vehicleTeleported = 3 ;
18028: LD_ADDR_EXP 29
18032: PUSH
18033: LD_INT 3
18035: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18036: LD_VAR 0 1
18040: PUSH
18041: LD_INT 10
18043: EQUAL
18044: PUSH
18045: LD_VAR 0 2
18049: PPUSH
18050: CALL_OW 247
18054: PUSH
18055: LD_INT 2
18057: EQUAL
18058: AND
18059: PUSH
18060: LD_VAR 0 2
18064: PPUSH
18065: CALL_OW 255
18069: PUSH
18070: LD_INT 3
18072: EQUAL
18073: AND
18074: IFFALSE 18090
// tpCounter = tpCounter + 1 ;
18076: LD_ADDR_EXP 30
18080: PUSH
18081: LD_EXP 30
18085: PUSH
18086: LD_INT 1
18088: PLUS
18089: ST_TO_ADDR
// end ;
18090: PPOPN 2
18092: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18093: LD_VAR 0 2
18097: PUSH
18098: LD_INT 21
18100: EQUAL
18101: PUSH
18102: LD_VAR 0 2
18106: PUSH
18107: LD_INT 112
18109: EQUAL
18110: OR
18111: IFFALSE 18289
// if GetSide ( vehicle ) = 3 then
18113: LD_VAR 0 1
18117: PPUSH
18118: CALL_OW 255
18122: PUSH
18123: LD_INT 3
18125: EQUAL
18126: IFFALSE 18289
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 264
18137: PUSH
18138: LD_INT 46
18140: EQUAL
18141: PUSH
18142: LD_VAR 0 1
18146: PPUSH
18147: CALL_OW 264
18151: PUSH
18152: LD_INT 45
18154: EQUAL
18155: OR
18156: PUSH
18157: LD_VAR 0 1
18161: PPUSH
18162: CALL_OW 264
18166: PUSH
18167: LD_INT 44
18169: EQUAL
18170: OR
18171: IFFALSE 18246
// begin russianTanks = russianTanks ^ vehicle ;
18173: LD_ADDR_EXP 40
18177: PUSH
18178: LD_EXP 40
18182: PUSH
18183: LD_VAR 0 1
18187: ADD
18188: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18189: LD_EXP 44
18193: PUSH
18194: LD_INT 1
18196: EQUAL
18197: PUSH
18198: LD_EXP 44
18202: PUSH
18203: LD_INT 0
18205: EQUAL
18206: OR
18207: IFFALSE 18221
// ComEnterUnit ( vehicle , ruteleprt ) ;
18209: LD_VAR 0 1
18213: PPUSH
18214: LD_INT 10
18216: PPUSH
18217: CALL_OW 120
// if attackTactic = 2 then
18221: LD_EXP 44
18225: PUSH
18226: LD_INT 2
18228: EQUAL
18229: IFFALSE 18246
// ComMoveXY ( vehicle , 88 , 69 ) ;
18231: LD_VAR 0 1
18235: PPUSH
18236: LD_INT 88
18238: PPUSH
18239: LD_INT 69
18241: PPUSH
18242: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 264
18255: PUSH
18256: LD_INT 49
18258: EQUAL
18259: IFFALSE 18289
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18261: LD_ADDR_EXP 41
18265: PUSH
18266: LD_EXP 41
18270: PUSH
18271: LD_VAR 0 1
18275: ADD
18276: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_INT 137
18284: PPUSH
18285: CALL_OW 120
// end ; end ; end ;
18289: PPOPN 2
18291: END
// on UnitGoesToRed ( unit ) do var i ;
18292: LD_INT 0
18294: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18295: LD_VAR 0 1
18299: PPUSH
18300: CALL_OW 255
18304: PUSH
18305: LD_INT 3
18307: EQUAL
18308: PUSH
18309: LD_VAR 0 1
18313: PPUSH
18314: CALL_OW 247
18318: PUSH
18319: LD_INT 2
18321: EQUAL
18322: AND
18323: IFFALSE 18441
// begin if russianTanks > 0 then
18325: LD_EXP 40
18329: PUSH
18330: LD_INT 0
18332: GREATER
18333: IFFALSE 18383
// for i in russianTanks do
18335: LD_ADDR_VAR 0 2
18339: PUSH
18340: LD_EXP 40
18344: PUSH
18345: FOR_IN
18346: IFFALSE 18381
// if i = unit then
18348: LD_VAR 0 2
18352: PUSH
18353: LD_VAR 0 1
18357: EQUAL
18358: IFFALSE 18379
// russianTanks = russianTanks diff [ unit ] ;
18360: LD_ADDR_EXP 40
18364: PUSH
18365: LD_EXP 40
18369: PUSH
18370: LD_VAR 0 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: DIFF
18378: ST_TO_ADDR
18379: GO 18345
18381: POP
18382: POP
// if russianTimeLapsers > 0 then
18383: LD_EXP 41
18387: PUSH
18388: LD_INT 0
18390: GREATER
18391: IFFALSE 18441
// for i in russianTimeLapsers do
18393: LD_ADDR_VAR 0 2
18397: PUSH
18398: LD_EXP 41
18402: PUSH
18403: FOR_IN
18404: IFFALSE 18439
// if i = unit then
18406: LD_VAR 0 2
18410: PUSH
18411: LD_VAR 0 1
18415: EQUAL
18416: IFFALSE 18437
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18418: LD_ADDR_EXP 41
18422: PUSH
18423: LD_EXP 41
18427: PUSH
18428: LD_VAR 0 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: DIFF
18436: ST_TO_ADDR
18437: GO 18403
18439: POP
18440: POP
// end ; end ;
18441: PPOPN 2
18443: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18444: LD_INT 0
18446: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18447: LD_VAR 0 2
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 3
18459: EQUAL
18460: PUSH
18461: LD_VAR 0 2
18465: PPUSH
18466: CALL_OW 257
18470: PUSH
18471: LD_INT 3
18473: EQUAL
18474: AND
18475: PUSH
18476: LD_INT 21
18478: PPUSH
18479: CALL_OW 255
18483: PUSH
18484: LD_INT 3
18486: EQUAL
18487: AND
18488: PUSH
18489: LD_INT 21
18491: PPUSH
18492: CALL_OW 302
18496: AND
18497: IFFALSE 18511
// ComEnterUnit ( human , ru_fact ) ;
18499: LD_VAR 0 2
18503: PPUSH
18504: LD_INT 21
18506: PPUSH
18507: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18511: LD_VAR 0 2
18515: PPUSH
18516: CALL_OW 257
18520: PUSH
18521: LD_INT 4
18523: EQUAL
18524: PUSH
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 255
18534: PUSH
18535: LD_INT 3
18537: EQUAL
18538: AND
18539: PUSH
18540: LD_EXP 42
18544: PUSH
18545: LD_INT 0
18547: EQUAL
18548: AND
18549: IFFALSE 18611
// for i in RuScientists do
18551: LD_ADDR_VAR 0 3
18555: PUSH
18556: LD_EXP 35
18560: PUSH
18561: FOR_IN
18562: IFFALSE 18609
// if i = human then
18564: LD_VAR 0 3
18568: PUSH
18569: LD_VAR 0 2
18573: EQUAL
18574: IFFALSE 18607
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18576: LD_VAR 0 3
18580: PPUSH
18581: LD_INT 13
18583: PUSH
18584: LD_INT 14
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 1
18593: PPUSH
18594: LD_INT 2
18596: PPUSH
18597: CALL_OW 12
18601: ARRAY
18602: PPUSH
18603: CALL_OW 113
18607: GO 18561
18609: POP
18610: POP
// end ;
18611: PPOPN 3
18613: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18614: LD_INT 0
18616: PPUSH
18617: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18618: LD_VAR 0 2
18622: PPUSH
18623: CALL_OW 255
18627: PUSH
18628: LD_INT 3
18630: EQUAL
18631: PUSH
18632: LD_VAR 0 2
18636: PPUSH
18637: CALL_OW 257
18641: PUSH
18642: LD_INT 4
18644: EQUAL
18645: AND
18646: IFFALSE 18788
// for i in RuScientists do
18648: LD_ADDR_VAR 0 3
18652: PUSH
18653: LD_EXP 35
18657: PUSH
18658: FOR_IN
18659: IFFALSE 18786
// if i = human then
18661: LD_VAR 0 3
18665: PUSH
18666: LD_VAR 0 2
18670: EQUAL
18671: IFFALSE 18784
// if IsOk ( rutp ) then
18673: LD_INT 137
18675: PPUSH
18676: CALL_OW 302
18680: IFFALSE 18753
// begin rnd = rand ( 1 , 2 ) ;
18682: LD_ADDR_VAR 0 4
18686: PUSH
18687: LD_INT 1
18689: PPUSH
18690: LD_INT 2
18692: PPUSH
18693: CALL_OW 12
18697: ST_TO_ADDR
// if rnd = 1 then
18698: LD_VAR 0 4
18702: PUSH
18703: LD_INT 1
18705: EQUAL
18706: IFFALSE 18720
// ComEnterUnit ( vehicle , rutp ) ;
18708: LD_VAR 0 1
18712: PPUSH
18713: LD_INT 137
18715: PPUSH
18716: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18720: LD_VAR 0 1
18724: PPUSH
18725: LD_INT 13
18727: PUSH
18728: LD_INT 14
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 1
18737: PPUSH
18738: LD_INT 2
18740: PPUSH
18741: CALL_OW 12
18745: ARRAY
18746: PPUSH
18747: CALL_OW 173
// end else
18751: GO 18784
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18753: LD_VAR 0 1
18757: PPUSH
18758: LD_INT 13
18760: PUSH
18761: LD_INT 14
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: PPUSH
18771: LD_INT 2
18773: PPUSH
18774: CALL_OW 12
18778: ARRAY
18779: PPUSH
18780: CALL_OW 113
// end ;
18784: GO 18658
18786: POP
18787: POP
// end ; end_of_file
18788: PPOPN 4
18790: END
// every 0 0$1 trigger ruAI = 1 do
18791: LD_EXP 42
18795: PUSH
18796: LD_INT 1
18798: EQUAL
18799: IFFALSE 18928
18801: GO 18803
18803: DISABLE
// begin enable ;
18804: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18805: LD_INT 3
18807: PPUSH
18808: LD_INT 6
18810: PPUSH
18811: LD_INT 9
18813: PPUSH
18814: LD_EXP 39
18818: PPUSH
18819: CALL 14334 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18823: LD_INT 3
18825: PPUSH
18826: LD_INT 4
18828: PPUSH
18829: LD_INT 10
18831: PPUSH
18832: LD_EXP 39
18836: PPUSH
18837: CALL 14334 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18841: LD_INT 3
18843: PPUSH
18844: LD_INT 9
18846: PPUSH
18847: CALL 15535 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18851: LD_INT 3
18853: PPUSH
18854: LD_INT 10
18856: PPUSH
18857: CALL 15535 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18861: LD_INT 3
18863: PPUSH
18864: LD_INT 16
18866: PPUSH
18867: LD_INT 9
18869: PPUSH
18870: LD_INT 91
18872: PPUSH
18873: CALL 14725 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18877: LD_INT 3
18879: PPUSH
18880: LD_INT 17
18882: PPUSH
18883: LD_INT 10
18885: PPUSH
18886: LD_INT 47
18888: PUSH
18889: LD_INT 129
18891: PUSH
18892: LD_INT 135
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: PPUSH
18900: CALL 14725 0 4
// AttackVehicles ( 3 ) ;
18904: LD_INT 3
18906: PPUSH
18907: CALL 15862 0 1
// IntBazooka ( 3 ) ;
18911: LD_INT 3
18913: PPUSH
18914: CALL 16355 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18918: LD_INT 3
18920: PPUSH
18921: LD_INT 1
18923: PPUSH
18924: CALL 15305 0 2
// end ;
18928: END
// every 0 0$1 do
18929: GO 18931
18931: DISABLE
// begin enable ;
18932: ENABLE
// TimeLapsersAI ( 3 ) ;
18933: LD_INT 3
18935: PPUSH
18936: CALL 16160 0 1
// end ;
18940: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18941: LD_INT 4
18943: PPUSH
18944: CALL_OW 303
18948: IFFALSE 18963
18950: GO 18952
18952: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
18953: LD_INT 3
18955: PPUSH
18956: LD_INT 4
18958: PPUSH
18959: CALL 17007 0 2
18963: END
// every 0 0$1 do
18964: GO 18966
18966: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 91
18972: PPUSH
18973: LD_INT 3
18975: PPUSH
18976: CALL 14093 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
18980: LD_INT 3
18982: PPUSH
18983: LD_INT 47
18985: PPUSH
18986: LD_INT 3
18988: PPUSH
18989: CALL 14093 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
18993: LD_INT 3
18995: PPUSH
18996: LD_INT 129
18998: PPUSH
18999: LD_INT 3
19001: PPUSH
19002: CALL 14093 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
19006: LD_INT 3
19008: PPUSH
19009: LD_INT 3
19011: PPUSH
19012: LD_INT 3
19014: PPUSH
19015: CALL 14093 0 3
// end ;
19019: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19020: LD_EXP 28
19024: PUSH
19025: LD_INT 2
19027: EQUAL
19028: PUSH
19029: LD_INT 21
19031: PPUSH
19032: CALL_OW 255
19036: PUSH
19037: LD_INT 3
19039: EQUAL
19040: AND
19041: PUSH
19042: LD_INT 112
19044: PPUSH
19045: CALL_OW 255
19049: PUSH
19050: LD_INT 3
19052: EQUAL
19053: AND
19054: PUSH
19055: LD_INT 21
19057: PPUSH
19058: CALL_OW 302
19062: AND
19063: PUSH
19064: LD_INT 112
19066: PPUSH
19067: CALL_OW 302
19071: AND
19072: PUSH
19073: LD_INT 22
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 21
19085: PUSH
19086: LD_INT 2
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 50
19095: PUSH
19096: EMPTY
19097: LIST
19098: PUSH
19099: LD_INT 3
19101: PUSH
19102: LD_INT 58
19104: PUSH
19105: EMPTY
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: PPUSH
19118: CALL_OW 69
19122: PUSH
19123: LD_INT 18
19125: PPUSH
19126: LD_INT 22
19128: PUSH
19129: LD_INT 3
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 2
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 70
19154: PUSH
19155: LD_INT 0
19157: EQUAL
19158: DIFF
19159: AND
19160: IFFALSE 19278
19162: GO 19164
19164: DISABLE
// begin enable ;
19165: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19166: LD_INT 3
19168: PPUSH
19169: LD_INT 21
19171: PPUSH
19172: LD_INT 3
19174: PUSH
19175: LD_INT 4
19177: PUSH
19178: LD_INT 4
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: PUSH
19186: LD_OWVAR 67
19190: ARRAY
19191: PPUSH
19192: LD_INT 46
19194: PUSH
19195: LD_INT 45
19197: PUSH
19198: LD_INT 44
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: PPUSH
19206: LD_INT 3
19208: PPUSH
19209: LD_INT 3
19211: PPUSH
19212: LD_INT 24
19214: PPUSH
19215: CALL 15715 0 7
// if russianTimeLapsers = 0 then
19219: LD_EXP 41
19223: PUSH
19224: LD_INT 0
19226: EQUAL
19227: IFFALSE 19278
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19229: LD_INT 3
19231: PPUSH
19232: LD_INT 112
19234: PPUSH
19235: LD_INT 1
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: PUSH
19249: LD_OWVAR 67
19253: ARRAY
19254: PPUSH
19255: LD_INT 49
19257: PUSH
19258: LD_INT 49
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PPUSH
19265: LD_INT 3
19267: PPUSH
19268: LD_INT 3
19270: PPUSH
19271: LD_INT 24
19273: PPUSH
19274: CALL 15715 0 7
// end ;
19278: END
// every 0 0$1 trigger arabianMines do var i ;
19279: LD_EXP 45
19283: IFFALSE 19404
19285: GO 19287
19287: DISABLE
19288: LD_INT 0
19290: PPUSH
// begin enable ;
19291: ENABLE
// for i in arabianMines do
19292: LD_ADDR_VAR 0 1
19296: PUSH
19297: LD_EXP 45
19301: PUSH
19302: FOR_IN
19303: IFFALSE 19402
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19305: LD_INT 22
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 92
19317: PUSH
19318: LD_VAR 0 1
19322: PUSH
19323: LD_INT 1
19325: ARRAY
19326: PUSH
19327: LD_VAR 0 1
19331: PUSH
19332: LD_INT 2
19334: ARRAY
19335: PUSH
19336: LD_INT 3
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PPUSH
19349: CALL_OW 69
19353: IFFALSE 19400
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19355: LD_VAR 0 1
19359: PUSH
19360: LD_INT 1
19362: ARRAY
19363: PPUSH
19364: LD_VAR 0 1
19368: PUSH
19369: LD_INT 2
19371: ARRAY
19372: PPUSH
19373: LD_INT 5
19375: PPUSH
19376: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19380: LD_ADDR_EXP 45
19384: PUSH
19385: LD_EXP 45
19389: PPUSH
19390: LD_VAR 0 1
19394: PPUSH
19395: CALL_OW 3
19399: ST_TO_ADDR
// end ; end ;
19400: GO 19302
19402: POP
19403: POP
// end ;
19404: PPOPN 1
19406: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19407: LD_EXP 29
19411: PUSH
19412: LD_INT 4
19414: EQUAL
19415: PUSH
19416: LD_EXP 30
19420: PUSH
19421: LD_INT 6
19423: PUSH
19424: LD_INT 8
19426: PUSH
19427: LD_INT 8
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: LD_OWVAR 67
19439: ARRAY
19440: EQUAL
19441: AND
19442: IFFALSE 19460
19444: GO 19446
19446: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19447: LD_INT 10
19449: PPUSH
19450: LD_INT 47
19452: PPUSH
19453: LD_INT 82
19455: PPUSH
19456: CALL_OW 243
19460: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19461: LD_EXP 29
19465: PUSH
19466: LD_INT 4
19468: EQUAL
19469: IFFALSE 19491
19471: GO 19473
19473: DISABLE
// begin enable ;
19474: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19475: LD_ADDR_EXP 44
19479: PUSH
19480: LD_INT 1
19482: PPUSH
19483: LD_INT 2
19485: PPUSH
19486: CALL_OW 12
19490: ST_TO_ADDR
// end ; end_of_file
19491: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19492: LD_EXP 35
19496: PUSH
19497: EMPTY
19498: EQUAL
19499: PUSH
19500: LD_INT 3
19502: PPUSH
19503: CALL_OW 301
19507: AND
19508: IFFALSE 19713
19510: GO 19512
19512: DISABLE
// begin if sciCounter = 0 then
19513: LD_EXP 36
19517: PUSH
19518: LD_INT 0
19520: EQUAL
19521: IFFALSE 19547
// begin Say ( JMM , D7a-JMM-1 ) ;
19523: LD_EXP 1
19527: PPUSH
19528: LD_STRING D7a-JMM-1
19530: PPUSH
19531: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19535: LD_EXP 22
19539: PPUSH
19540: LD_STRING D7a-Pow-1
19542: PPUSH
19543: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19547: LD_EXP 36
19551: PUSH
19552: LD_INT 0
19554: GREATER
19555: PUSH
19556: LD_EXP 36
19560: PUSH
19561: LD_INT 6
19563: LESS
19564: AND
19565: IFFALSE 19591
// begin Say ( JMM , D7b-JMM-1 ) ;
19567: LD_EXP 1
19571: PPUSH
19572: LD_STRING D7b-JMM-1
19574: PPUSH
19575: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19579: LD_EXP 22
19583: PPUSH
19584: LD_STRING D7b-Pow-1
19586: PPUSH
19587: CALL_OW 94
// end ; if sciCounter = 6 then
19591: LD_EXP 36
19595: PUSH
19596: LD_INT 6
19598: EQUAL
19599: IFFALSE 19709
// begin Say ( JMM , D7c-JMM-1 ) ;
19601: LD_EXP 1
19605: PPUSH
19606: LD_STRING D7c-JMM-1
19608: PPUSH
19609: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19613: LD_EXP 22
19617: PPUSH
19618: LD_STRING D7c-Pow-1
19620: PPUSH
19621: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19625: LD_EXP 1
19629: PPUSH
19630: LD_STRING D7d-JMM-1
19632: PPUSH
19633: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19637: LD_EXP 22
19641: PPUSH
19642: LD_STRING D7d-Pow-1
19644: PPUSH
19645: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19649: LD_EXP 1
19653: PPUSH
19654: LD_STRING D7d-JMM-2
19656: PPUSH
19657: CALL_OW 88
// if askSiberite = 1 then
19661: LD_EXP 33
19665: PUSH
19666: LD_INT 1
19668: EQUAL
19669: IFFALSE 19685
// begin Say ( JMM , D7d-JMM-2a ) ;
19671: LD_EXP 1
19675: PPUSH
19676: LD_STRING D7d-JMM-2a
19678: PPUSH
19679: CALL_OW 88
// end else
19683: GO 19697
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19685: LD_EXP 22
19689: PPUSH
19690: LD_STRING D7d-Pow-2
19692: PPUSH
19693: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19697: LD_EXP 22
19701: PPUSH
19702: LD_STRING D7d-Pow-2a
19704: PPUSH
19705: CALL_OW 94
// end ; FinishMission ;
19709: CALL 19714 0 0
// end ;
19713: END
// export function FinishMission ; begin
19714: LD_INT 0
19716: PPUSH
// if teleportExplored = 1 then
19717: LD_EXP 34
19721: PUSH
19722: LD_INT 1
19724: EQUAL
19725: IFFALSE 19739
// AddMedal ( Teleport , 1 ) else
19727: LD_STRING Teleport
19729: PPUSH
19730: LD_INT 1
19732: PPUSH
19733: CALL_OW 101
19737: GO 19750
// AddMedal ( Teleport , - 1 ) ;
19739: LD_STRING Teleport
19741: PPUSH
19742: LD_INT 1
19744: NEG
19745: PPUSH
19746: CALL_OW 101
// if sciCounter > 2 then
19750: LD_EXP 36
19754: PUSH
19755: LD_INT 2
19757: GREATER
19758: IFFALSE 19772
// AddMedal ( Materials , 1 ) else
19760: LD_STRING Materials
19762: PPUSH
19763: LD_INT 1
19765: PPUSH
19766: CALL_OW 101
19770: GO 19783
// AddMedal ( Materials , - 1 ) ;
19772: LD_STRING Materials
19774: PPUSH
19775: LD_INT 1
19777: NEG
19778: PPUSH
19779: CALL_OW 101
// if sciCounter = 6 then
19783: LD_EXP 36
19787: PUSH
19788: LD_INT 6
19790: EQUAL
19791: IFFALSE 19815
// begin AddMedal ( Scientists , 1 ) ;
19793: LD_STRING Scientists
19795: PPUSH
19796: LD_INT 1
19798: PPUSH
19799: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19803: LD_INT 1
19805: PPUSH
19806: LD_STRING 12_SciDed_1
19808: PPUSH
19809: CALL_OW 39
// end else
19813: GO 19836
// begin AddMedal ( Scientists , - 1 ) ;
19815: LD_STRING Scientists
19817: PPUSH
19818: LD_INT 1
19820: NEG
19821: PPUSH
19822: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19826: LD_INT 0
19828: PPUSH
19829: LD_STRING 12_SciDed_1
19831: PPUSH
19832: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19836: LD_EXP 32
19840: PPUSH
19841: LD_STRING 12_MainDepositFake_1
19843: PPUSH
19844: CALL_OW 39
// GiveMedals ( MAIN ) ;
19848: LD_STRING MAIN
19850: PPUSH
19851: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19855: LD_INT 22
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 21
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: LD_INT 25
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 25
19890: PUSH
19891: LD_INT 2
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 25
19900: PUSH
19901: LD_INT 3
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 25
19910: PUSH
19911: LD_INT 4
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 25
19920: PUSH
19921: LD_INT 5
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 25
19930: PUSH
19931: LD_INT 8
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: PPUSH
19952: CALL_OW 69
19956: PPUSH
19957: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19961: LD_EXP 1
19965: PPUSH
19966: LD_EXP 47
19970: PUSH
19971: LD_STRING JMM
19973: STR
19974: PPUSH
19975: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19979: LD_EXP 7
19983: PPUSH
19984: LD_EXP 47
19988: PUSH
19989: LD_STRING Brown
19991: STR
19992: PPUSH
19993: CALL 13247 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19997: LD_EXP 3
20001: PPUSH
20002: LD_EXP 47
20006: PUSH
20007: LD_STRING Donaldson
20009: STR
20010: PPUSH
20011: CALL 13247 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20015: LD_EXP 4
20019: PPUSH
20020: LD_EXP 47
20024: PUSH
20025: LD_STRING Bobby
20027: STR
20028: PPUSH
20029: CALL 13247 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20033: LD_EXP 5
20037: PPUSH
20038: LD_EXP 47
20042: PUSH
20043: LD_STRING Cyrus
20045: STR
20046: PPUSH
20047: CALL 13247 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20051: LD_EXP 2
20055: PPUSH
20056: LD_EXP 47
20060: PUSH
20061: LD_STRING Lisa
20063: STR
20064: PPUSH
20065: CALL 13247 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20069: LD_EXP 12
20073: PPUSH
20074: LD_EXP 47
20078: PUSH
20079: LD_STRING Frank
20081: STR
20082: PPUSH
20083: CALL 13247 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20087: LD_EXP 13
20091: PPUSH
20092: LD_EXP 47
20096: PUSH
20097: LD_STRING Kikuchi
20099: STR
20100: PPUSH
20101: CALL 13247 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20105: LD_EXP 9
20109: PPUSH
20110: LD_EXP 47
20114: PUSH
20115: LD_STRING Houten
20117: STR
20118: PPUSH
20119: CALL 13247 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20123: LD_EXP 11
20127: PPUSH
20128: LD_EXP 47
20132: PUSH
20133: LD_STRING Gary
20135: STR
20136: PPUSH
20137: CALL 13247 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20141: LD_EXP 10
20145: PPUSH
20146: LD_EXP 47
20150: PUSH
20151: LD_STRING Cornell
20153: STR
20154: PPUSH
20155: CALL 13247 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20159: LD_EXP 6
20163: PPUSH
20164: LD_EXP 47
20168: PUSH
20169: LD_STRING Denis
20171: STR
20172: PPUSH
20173: CALL 13247 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20177: LD_EXP 8
20181: PPUSH
20182: LD_EXP 47
20186: PUSH
20187: LD_STRING Gladstone
20189: STR
20190: PPUSH
20191: CALL 13247 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20195: LD_INT 50
20197: PUSH
20198: EMPTY
20199: LIST
20200: PUSH
20201: LD_INT 22
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 23
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 21
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 25
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 25
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 25
20256: PUSH
20257: LD_INT 3
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 25
20266: PUSH
20267: LD_INT 4
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 25
20276: PUSH
20277: LD_INT 5
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 25
20286: PUSH
20287: LD_INT 8
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: PPUSH
20310: CALL_OW 69
20314: PUSH
20315: LD_EXP 1
20319: PUSH
20320: LD_EXP 7
20324: PUSH
20325: LD_EXP 3
20329: PUSH
20330: LD_EXP 4
20334: PUSH
20335: LD_EXP 5
20339: PUSH
20340: LD_EXP 2
20344: PUSH
20345: LD_EXP 12
20349: PUSH
20350: LD_EXP 8
20354: PUSH
20355: LD_EXP 13
20359: PUSH
20360: LD_EXP 6
20364: PUSH
20365: LD_EXP 9
20369: PUSH
20370: LD_EXP 11
20374: PUSH
20375: LD_EXP 10
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: DIFF
20395: PPUSH
20396: LD_STRING 12_other_survivors
20398: PPUSH
20399: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20403: LD_INT 50
20405: PUSH
20406: EMPTY
20407: LIST
20408: PUSH
20409: LD_INT 22
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 23
20421: PUSH
20422: LD_INT 2
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 21
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: LD_INT 25
20444: PUSH
20445: LD_INT 1
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 25
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 25
20464: PUSH
20465: LD_INT 3
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 25
20474: PUSH
20475: LD_INT 4
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 25
20484: PUSH
20485: LD_INT 5
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 25
20494: PUSH
20495: LD_INT 8
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: PPUSH
20518: CALL_OW 69
20522: PPUSH
20523: LD_STRING 12_kurt_squad
20525: PPUSH
20526: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
20530: LD_STRING 11_others
20532: PPUSH
20533: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
20537: LD_EXP 14
20541: PPUSH
20542: LD_STRING 11_others
20544: PPUSH
20545: CALL_OW 38
// YouWin ;
20549: CALL_OW 103
// end ; end_of_file
20553: LD_VAR 0 1
20557: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20558: LD_EXP 1
20562: PPUSH
20563: CALL_OW 301
20567: IFFALSE 20579
20569: GO 20571
20571: DISABLE
// YouLost ( JMM ) ; end_of_file
20572: LD_STRING JMM
20574: PPUSH
20575: CALL_OW 104
20579: END
// every 0 0$01 do
20580: GO 20582
20582: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20583: LD_INT 1050
20585: PPUSH
20586: CALL_OW 67
// if cratesSpawned < 6 then
20590: LD_EXP 46
20594: PUSH
20595: LD_INT 6
20597: LESS
20598: IFFALSE 20635
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20600: LD_INT 3
20602: PPUSH
20603: LD_INT 5
20605: PPUSH
20606: CALL_OW 12
20610: PPUSH
20611: LD_INT 21
20613: PPUSH
20614: LD_INT 1
20616: PPUSH
20617: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20621: LD_ADDR_EXP 46
20625: PUSH
20626: LD_EXP 46
20630: PUSH
20631: LD_INT 1
20633: PLUS
20634: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20635: LD_EXP 46
20639: PUSH
20640: LD_INT 6
20642: GREATEREQUAL
20643: PUSH
20644: LD_EXP 46
20648: PUSH
20649: LD_INT 12
20651: LESS
20652: AND
20653: IFFALSE 20697
// begin wait ( 0 0$30 ) ;
20655: LD_INT 1050
20657: PPUSH
20658: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20662: LD_INT 3
20664: PPUSH
20665: LD_INT 5
20667: PPUSH
20668: CALL_OW 12
20672: PPUSH
20673: LD_INT 21
20675: PPUSH
20676: LD_INT 1
20678: PPUSH
20679: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20683: LD_ADDR_EXP 46
20687: PUSH
20688: LD_EXP 46
20692: PUSH
20693: LD_INT 1
20695: PLUS
20696: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20697: LD_EXP 46
20701: PUSH
20702: LD_INT 12
20704: GREATEREQUAL
20705: IFFALSE 20749
// begin wait ( 1 1$30 ) ;
20707: LD_INT 3150
20709: PPUSH
20710: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20714: LD_INT 3
20716: PPUSH
20717: LD_INT 5
20719: PPUSH
20720: CALL_OW 12
20724: PPUSH
20725: LD_INT 21
20727: PPUSH
20728: LD_INT 1
20730: PPUSH
20731: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20735: LD_ADDR_EXP 46
20739: PUSH
20740: LD_EXP 46
20744: PUSH
20745: LD_INT 1
20747: PLUS
20748: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20749: LD_EXP 46
20753: PUSH
20754: LD_INT 15
20756: GREATEREQUAL
20757: IFFALSE 20583
// end ;
20759: END
