// export JMM , Donaldson , Lisa , Cyrus , Denis , Frank , Cornell , Campell ; export Brown , Gary , amCargo1 , amCargo2 ; export Bobby , amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 29
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 30
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 33
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 34
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 35
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// secondPass = 0 ;
  64: LD_ADDR_EXP 23
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// teleportExplored = 0 ;
  72: LD_ADDR_EXP 28
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// askSiberite = 0 ;
  80: LD_ADDR_EXP 27
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// warWithLegion = 0 ;
  88: LD_ADDR_EXP 25
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// fakeInfo = 0 ;
  96: LD_ADDR_EXP 26
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// eventVar1 = 0 ;
 104: LD_ADDR_EXP 36
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// debugMode = 1 ;
 112: LD_ADDR_EXP 37
 116: PUSH
 117: LD_INT 1
 119: ST_TO_ADDR
// PrepareDifficulty ;
 120: CALL 7134 0 0
// PrepareVehicles ;
 124: CALL 749 0 0
// PrepareAmericanHeroes ;
 128: CALL 466 0 0
// PrepareRussianCommander ;
 132: CALL 1976 0 0
// PrepareWestBase ;
 136: CALL 2488 0 0
// PrepareEastBase ;
 140: CALL 2048 0 0
// PrepareOtherRussians ;
 144: CALL 2600 0 0
// end ;
 148: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 149: LD_EXP 37
 153: PUSH
 154: LD_INT 1
 156: EQUAL
 157: IFFALSE 463
 159: GO 161
 161: DISABLE
 162: LD_INT 0
 164: PPUSH
// begin enable ;
 165: ENABLE
// fogoff ( true ) ;
 166: LD_INT 1
 168: PPUSH
 169: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 173: LD_ADDR_VAR 0 1
 177: PUSH
 178: LD_INT 22
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 21
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PPUSH
 202: CALL_OW 69
 206: PUSH
 207: FOR_IN
 208: IFFALSE 224
// SetLives ( i , 1000 ) ;
 210: LD_VAR 0 1
 214: PPUSH
 215: LD_INT 1000
 217: PPUSH
 218: CALL_OW 234
 222: GO 207
 224: POP
 225: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 226: LD_ADDR_VAR 0 1
 230: PUSH
 231: LD_INT 22
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 2
 243: PUSH
 244: LD_INT 30
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 30
 256: PUSH
 257: LD_INT 1
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PPUSH
 273: CALL_OW 69
 277: PUSH
 278: FOR_IN
 279: IFFALSE 303
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 281: LD_VAR 0 1
 285: PPUSH
 286: CALL_OW 274
 290: PPUSH
 291: LD_INT 1
 293: PPUSH
 294: LD_INT 9999
 296: PPUSH
 297: CALL_OW 277
 301: GO 278
 303: POP
 304: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 305: LD_ADDR_VAR 0 1
 309: PUSH
 310: LD_INT 22
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 30
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PUSH
 333: LD_INT 30
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PUSH
 357: FOR_IN
 358: IFFALSE 382
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 360: LD_VAR 0 1
 364: PPUSH
 365: CALL_OW 274
 369: PPUSH
 370: LD_INT 2
 372: PPUSH
 373: LD_INT 9999
 375: PPUSH
 376: CALL_OW 277
 380: GO 357
 382: POP
 383: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 384: LD_ADDR_VAR 0 1
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 2
 401: PUSH
 402: LD_INT 30
 404: PUSH
 405: LD_INT 0
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 30
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: LIST
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PPUSH
 431: CALL_OW 69
 435: PUSH
 436: FOR_IN
 437: IFFALSE 461
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 439: LD_VAR 0 1
 443: PPUSH
 444: CALL_OW 274
 448: PPUSH
 449: LD_INT 3
 451: PPUSH
 452: LD_INT 9999
 454: PPUSH
 455: CALL_OW 277
 459: GO 436
 461: POP
 462: POP
// end ; end_of_file
 463: PPOPN 1
 465: END
// export function PrepareAmericanHeroes ; begin
 466: LD_INT 0
 468: PPUSH
// uc_side = 1 ;
 469: LD_ADDR_OWVAR 20
 473: PUSH
 474: LD_INT 1
 476: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 477: LD_ADDR_EXP 1
 481: PUSH
 482: LD_STRING JMM
 484: PPUSH
 485: LD_INT 0
 487: PPUSH
 488: CALL 6921 0 2
 492: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 493: LD_ADDR_EXP 2
 497: PUSH
 498: LD_STRING Donaldson
 500: PPUSH
 501: LD_INT 0
 503: PPUSH
 504: CALL 6921 0 2
 508: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 509: LD_ADDR_EXP 3
 513: PUSH
 514: LD_STRING Lisa
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL 6921 0 2
 524: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 525: LD_ADDR_EXP 4
 529: PUSH
 530: LD_STRING Cyrus
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 6921 0 2
 540: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 541: LD_ADDR_EXP 5
 545: PUSH
 546: LD_STRING Denis
 548: PPUSH
 549: LD_INT 0
 551: PPUSH
 552: CALL 6921 0 2
 556: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 557: LD_ADDR_EXP 6
 561: PUSH
 562: LD_STRING Frank
 564: PPUSH
 565: LD_INT 0
 567: PPUSH
 568: CALL 6921 0 2
 572: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornell , false ) ;
 573: LD_ADDR_EXP 7
 577: PUSH
 578: LD_STRING Cornell
 580: PPUSH
 581: LD_INT 0
 583: PPUSH
 584: CALL 6921 0 2
 588: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 589: LD_ADDR_EXP 19
 593: PUSH
 594: LD_STRING Powell
 596: PPUSH
 597: LD_INT 0
 599: PPUSH
 600: CALL 6921 0 2
 604: ST_TO_ADDR
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 620: LD_EXP 2
 624: PPUSH
 625: LD_INT 4
 627: PPUSH
 628: LD_INT 0
 630: PPUSH
 631: CALL_OW 49
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 635: LD_EXP 3
 639: PPUSH
 640: LD_INT 4
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 49
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 650: LD_EXP 4
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 665: LD_EXP 5
 669: PPUSH
 670: LD_INT 4
 672: PPUSH
 673: LD_INT 0
 675: PPUSH
 676: CALL_OW 49
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 680: LD_EXP 6
 684: PPUSH
 685: LD_INT 4
 687: PPUSH
 688: LD_INT 0
 690: PPUSH
 691: CALL_OW 49
// PlaceHumanInUnit ( Cornell , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 695: LD_EXP 7
 699: PPUSH
 700: LD_INT 22
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 21
 712: PUSH
 713: LD_INT 2
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 58
 722: PUSH
 723: EMPTY
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: PPUSH
 731: CALL_OW 69
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: CALL_OW 52
// end ;
 744: LD_VAR 0 1
 748: RET
// export function PrepareVehicles ; var veh ; begin
 749: LD_INT 0
 751: PPUSH
 752: PPUSH
// uc_side = 1 ;
 753: LD_ADDR_OWVAR 20
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// uc_nation = 1 ;
 761: LD_ADDR_OWVAR 21
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
 769: LD_ADDR_OWVAR 37
 773: PUSH
 774: LD_INT 3
 776: ST_TO_ADDR
// vc_engine = 3 ;
 777: LD_ADDR_OWVAR 39
 781: PUSH
 782: LD_INT 3
 784: ST_TO_ADDR
// vc_control = 3 ;
 785: LD_ADDR_OWVAR 38
 789: PUSH
 790: LD_INT 3
 792: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 793: LD_ADDR_OWVAR 40
 797: PUSH
 798: LD_INT 4
 800: ST_TO_ADDR
// veh = CreateVehicle ;
 801: LD_ADDR_VAR 0 2
 805: PUSH
 806: CALL_OW 45
 810: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 811: LD_VAR 0 2
 815: PPUSH
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// vc_weapon = us_double_gun ;
 826: LD_ADDR_OWVAR 40
 830: PUSH
 831: LD_INT 5
 833: ST_TO_ADDR
// vc_control = 1 ;
 834: LD_ADDR_OWVAR 38
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// veh = CreateVehicle ;
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: CALL_OW 45
 851: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 852: LD_VAR 0 2
 856: PPUSH
 857: LD_INT 4
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 49
// vc_weapon = us_light_gun ;
 867: LD_ADDR_OWVAR 40
 871: PUSH
 872: LD_INT 3
 874: ST_TO_ADDR
// vc_control = 3 ;
 875: LD_ADDR_OWVAR 38
 879: PUSH
 880: LD_INT 3
 882: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
 883: LD_ADDR_OWVAR 37
 887: PUSH
 888: LD_INT 2
 890: ST_TO_ADDR
// veh = CreateVehicle ;
 891: LD_ADDR_VAR 0 2
 895: PUSH
 896: CALL_OW 45
 900: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 901: LD_VAR 0 2
 905: PPUSH
 906: LD_INT 4
 908: PPUSH
 909: LD_INT 0
 911: PPUSH
 912: CALL_OW 49
// vc_weapon = us_gatling_gun ;
 916: LD_ADDR_OWVAR 40
 920: PUSH
 921: LD_INT 4
 923: ST_TO_ADDR
// veh = CreateVehicle ;
 924: LD_ADDR_VAR 0 2
 928: PUSH
 929: CALL_OW 45
 933: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 934: LD_VAR 0 2
 938: PPUSH
 939: LD_INT 4
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 49
// end ;
 949: LD_VAR 0 1
 953: RET
// export function PowellSupport1 ; var veh , un ; begin
 954: LD_INT 0
 956: PPUSH
 957: PPUSH
 958: PPUSH
// uc_side = 1 ;
 959: LD_ADDR_OWVAR 20
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// uc_nation = 1 ;
 967: LD_ADDR_OWVAR 21
 971: PUSH
 972: LD_INT 1
 974: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 975: LD_ADDR_EXP 9
 979: PUSH
 980: LD_STRING Brown
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL 6921 0 2
 990: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
 991: LD_ADDR_EXP 10
 995: PUSH
 996: LD_STRING Gary
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL 6921 0 2
1006: ST_TO_ADDR
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1007: LD_EXP 9
1011: PPUSH
1012: LD_INT 4
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 49
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1022: LD_EXP 10
1026: PPUSH
1027: LD_INT 4
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL_OW 49
// SetClass ( Brown , 2 ) ;
1037: LD_EXP 9
1041: PPUSH
1042: LD_INT 2
1044: PPUSH
1045: CALL_OW 336
// hc_gallery =  ;
1049: LD_ADDR_OWVAR 33
1053: PUSH
1054: LD_STRING 
1056: ST_TO_ADDR
// hc_name =  ;
1057: LD_ADDR_OWVAR 26
1061: PUSH
1062: LD_STRING 
1064: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1065: LD_ADDR_OWVAR 37
1069: PUSH
1070: LD_INT 3
1072: ST_TO_ADDR
// vc_engine = 3 ;
1073: LD_ADDR_OWVAR 39
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// vc_control = 1 ;
1081: LD_ADDR_OWVAR 38
1085: PUSH
1086: LD_INT 1
1088: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1089: LD_ADDR_OWVAR 40
1093: PUSH
1094: LD_INT 4
1096: ST_TO_ADDR
// veh = CreateVehicle ;
1097: LD_ADDR_VAR 0 2
1101: PUSH
1102: CALL_OW 45
1106: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1107: LD_VAR 0 2
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// SetDir ( veh , 4 ) ;
1122: LD_VAR 0 2
1126: PPUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 233
// PrepareHuman ( false , 4 , 10 ) ;
1134: LD_INT 0
1136: PPUSH
1137: LD_INT 4
1139: PPUSH
1140: LD_INT 10
1142: PPUSH
1143: CALL_OW 380
// un = CreateHuman ;
1147: LD_ADDR_VAR 0 3
1151: PUSH
1152: CALL_OW 44
1156: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1157: LD_VAR 0 3
1161: PPUSH
1162: LD_VAR 0 2
1166: PPUSH
1167: CALL_OW 52
// vc_chassis = us_medium_wheeled ;
1171: LD_ADDR_OWVAR 37
1175: PUSH
1176: LD_INT 2
1178: ST_TO_ADDR
// vc_weapon = us_double_gun ;
1179: LD_ADDR_OWVAR 40
1183: PUSH
1184: LD_INT 5
1186: ST_TO_ADDR
// veh = CreateVehicle ;
1187: LD_ADDR_VAR 0 2
1191: PUSH
1192: CALL_OW 45
1196: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1197: LD_VAR 0 2
1201: PPUSH
1202: LD_INT 4
1204: PPUSH
1205: LD_INT 0
1207: PPUSH
1208: CALL_OW 49
// SetDir ( veh , 4 ) ;
1212: LD_VAR 0 2
1216: PPUSH
1217: LD_INT 4
1219: PPUSH
1220: CALL_OW 233
// PrepareHuman ( false , 4 , 10 ) ;
1224: LD_INT 0
1226: PPUSH
1227: LD_INT 4
1229: PPUSH
1230: LD_INT 10
1232: PPUSH
1233: CALL_OW 380
// un = CreateHuman ;
1237: LD_ADDR_VAR 0 3
1241: PUSH
1242: CALL_OW 44
1246: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1247: LD_VAR 0 3
1251: PPUSH
1252: LD_VAR 0 2
1256: PPUSH
1257: CALL_OW 52
// vc_control = 3 ;
1261: LD_ADDR_OWVAR 38
1265: PUSH
1266: LD_INT 3
1268: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1269: LD_ADDR_OWVAR 40
1273: PUSH
1274: LD_INT 12
1276: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
1277: LD_ADDR_EXP 11
1281: PUSH
1282: CALL_OW 45
1286: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
1287: LD_ADDR_EXP 12
1291: PUSH
1292: CALL_OW 45
1296: ST_TO_ADDR
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
1297: LD_EXP 11
1301: PPUSH
1302: LD_INT 4
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
1312: LD_EXP 12
1316: PPUSH
1317: LD_INT 4
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// SetDir ( amCargo1 , 4 ) ;
1327: LD_EXP 11
1331: PPUSH
1332: LD_INT 4
1334: PPUSH
1335: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
1339: LD_EXP 12
1343: PPUSH
1344: LD_INT 4
1346: PPUSH
1347: CALL_OW 233
// AddCargo ( amCargo1 , 3 , 100 ) ;
1351: LD_EXP 11
1355: PPUSH
1356: LD_INT 3
1358: PPUSH
1359: LD_INT 100
1361: PPUSH
1362: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
1366: LD_EXP 12
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_INT 80
1376: PPUSH
1377: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
1381: LD_EXP 12
1385: PPUSH
1386: LD_INT 3
1388: PPUSH
1389: LD_INT 20
1391: PPUSH
1392: CALL_OW 291
// end ;
1396: LD_VAR 0 1
1400: RET
// export function PowellSupport2 ; var veh , un ; begin
1401: LD_INT 0
1403: PPUSH
1404: PPUSH
1405: PPUSH
// uc_side = 1 ;
1406: LD_ADDR_OWVAR 20
1410: PUSH
1411: LD_INT 1
1413: ST_TO_ADDR
// uc_nation = 1 ;
1414: LD_ADDR_OWVAR 21
1418: PUSH
1419: LD_INT 1
1421: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
1422: LD_ADDR_EXP 13
1426: PUSH
1427: LD_STRING Bobby
1429: PPUSH
1430: LD_INT 0
1432: PPUSH
1433: CALL 6921 0 2
1437: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
1438: LD_ADDR_EXP 8
1442: PUSH
1443: LD_STRING Campell
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL 6921 0 2
1453: ST_TO_ADDR
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
1454: LD_EXP 13
1458: PPUSH
1459: LD_INT 4
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// hc_gallery =  ;
1469: LD_ADDR_OWVAR 33
1473: PUSH
1474: LD_STRING 
1476: ST_TO_ADDR
// hc_name =  ;
1477: LD_ADDR_OWVAR 26
1481: PUSH
1482: LD_STRING 
1484: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1485: LD_ADDR_OWVAR 37
1489: PUSH
1490: LD_INT 2
1492: ST_TO_ADDR
// vc_engine = 3 ;
1493: LD_ADDR_OWVAR 39
1497: PUSH
1498: LD_INT 3
1500: ST_TO_ADDR
// vc_control = 1 ;
1501: LD_ADDR_OWVAR 38
1505: PUSH
1506: LD_INT 1
1508: ST_TO_ADDR
// vc_weapon = us_light_gun ;
1509: LD_ADDR_OWVAR 40
1513: PUSH
1514: LD_INT 3
1516: ST_TO_ADDR
// veh = CreateVehicle ;
1517: LD_ADDR_VAR 0 2
1521: PUSH
1522: CALL_OW 45
1526: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1527: LD_VAR 0 2
1531: PPUSH
1532: LD_INT 4
1534: PPUSH
1535: LD_INT 0
1537: PPUSH
1538: CALL_OW 49
// SetDir ( veh , 4 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 4
1549: PPUSH
1550: CALL_OW 233
// PlaceHumanInUnit ( Campell , veh ) ;
1554: LD_EXP 8
1558: PPUSH
1559: LD_VAR 0 2
1563: PPUSH
1564: CALL_OW 52
// vc_control = 3 ;
1568: LD_ADDR_OWVAR 38
1572: PUSH
1573: LD_INT 3
1575: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1576: LD_ADDR_OWVAR 40
1580: PUSH
1581: LD_INT 12
1583: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
1584: LD_ADDR_EXP 14
1588: PUSH
1589: CALL_OW 45
1593: ST_TO_ADDR
// amCargo4 = CreateVehicle ;
1594: LD_ADDR_EXP 15
1598: PUSH
1599: CALL_OW 45
1603: ST_TO_ADDR
// amCargo5 = CreateVehicle ;
1604: LD_ADDR_EXP 16
1608: PUSH
1609: CALL_OW 45
1613: ST_TO_ADDR
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
1614: LD_EXP 14
1618: PPUSH
1619: LD_INT 4
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
1629: LD_EXP 15
1633: PPUSH
1634: LD_INT 4
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
1644: LD_EXP 16
1648: PPUSH
1649: LD_INT 4
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 49
// SetDir ( amCargo3 , 4 ) ;
1659: LD_EXP 14
1663: PPUSH
1664: LD_INT 4
1666: PPUSH
1667: CALL_OW 233
// SetDir ( amCargo4 , 4 ) ;
1671: LD_EXP 15
1675: PPUSH
1676: LD_INT 4
1678: PPUSH
1679: CALL_OW 233
// SetDir ( amCargo5 , 4 ) ;
1683: LD_EXP 16
1687: PPUSH
1688: LD_INT 4
1690: PPUSH
1691: CALL_OW 233
// AddCargo ( amCargo3 , 1 , 100 ) ;
1695: LD_EXP 14
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: LD_INT 100
1705: PPUSH
1706: CALL_OW 291
// AddCargo ( amCargo4 , 2 , 100 ) ;
1710: LD_EXP 15
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 100
1720: PPUSH
1721: CALL_OW 291
// AddCargo ( amCargo5 , 1 , 50 ) ;
1725: LD_EXP 16
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 50
1735: PPUSH
1736: CALL_OW 291
// AddCargo ( amCargo5 , 2 , 50 ) ;
1740: LD_EXP 16
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 50
1750: PPUSH
1751: CALL_OW 291
// end ;
1755: LD_VAR 0 1
1759: RET
// export function PowellSupport3 ; var veh , un ; begin
1760: LD_INT 0
1762: PPUSH
1763: PPUSH
1764: PPUSH
// uc_side = 1 ;
1765: LD_ADDR_OWVAR 20
1769: PUSH
1770: LD_INT 1
1772: ST_TO_ADDR
// uc_nation = 1 ;
1773: LD_ADDR_OWVAR 21
1777: PUSH
1778: LD_INT 1
1780: ST_TO_ADDR
// hc_gallery =  ;
1781: LD_ADDR_OWVAR 33
1785: PUSH
1786: LD_STRING 
1788: ST_TO_ADDR
// hc_name =  ;
1789: LD_ADDR_OWVAR 26
1793: PUSH
1794: LD_STRING 
1796: ST_TO_ADDR
// PrepareHuman ( false , 1 , 10 ) ;
1797: LD_INT 0
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 10
1805: PPUSH
1806: CALL_OW 380
// un = CreateHuman ;
1810: LD_ADDR_VAR 0 3
1814: PUSH
1815: CALL_OW 44
1819: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
1820: LD_VAR 0 3
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// vc_chassis = us_medium_wheeled ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 2
1842: ST_TO_ADDR
// vc_engine = 3 ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control = 3 ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 3
1858: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 12
1866: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
1867: LD_ADDR_EXP 17
1871: PUSH
1872: CALL_OW 45
1876: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
1877: LD_ADDR_EXP 18
1881: PUSH
1882: CALL_OW 45
1886: ST_TO_ADDR
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
1887: LD_EXP 17
1891: PPUSH
1892: LD_INT 4
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
1902: LD_EXP 18
1906: PPUSH
1907: LD_INT 4
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL_OW 49
// SetDir ( amCargo6 , 4 ) ;
1917: LD_EXP 17
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
1929: LD_EXP 18
1933: PPUSH
1934: LD_INT 4
1936: PPUSH
1937: CALL_OW 233
// AddCargo ( amCargo6 , 1 , 100 ) ;
1941: LD_EXP 17
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: LD_INT 100
1951: PPUSH
1952: CALL_OW 291
// AddCargo ( amCargo7 , 2 , 100 ) ;
1956: LD_EXP 18
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: LD_INT 100
1966: PPUSH
1967: CALL_OW 291
// end ; end_of_file
1971: LD_VAR 0 1
1975: RET
// export function PrepareRussianCommander ; begin
1976: LD_INT 0
1978: PPUSH
// uc_side = 3 ;
1979: LD_ADDR_OWVAR 20
1983: PUSH
1984: LD_INT 3
1986: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
1987: LD_ADDR_EXP 20
1991: PUSH
1992: LD_STRING Davidov
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL 6921 0 2
2002: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2003: LD_EXP 20
2007: PPUSH
2008: LD_INT 3
2010: PPUSH
2011: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2015: LD_ADDR_EXP 29
2019: PUSH
2020: LD_EXP 29
2024: PUSH
2025: LD_EXP 20
2029: ADD
2030: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2031: LD_EXP 29
2035: PPUSH
2036: LD_INT 4
2038: PPUSH
2039: CALL_OW 336
// end ;
2043: LD_VAR 0 1
2047: RET
// export function PrepareEastBase ; var i , un ; begin
2048: LD_INT 0
2050: PPUSH
2051: PPUSH
2052: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2053: LD_INT 3
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: LD_INT 121
2061: PPUSH
2062: LD_EXP 31
2066: PPUSH
2067: LD_EXP 32
2071: PPUSH
2072: CALL_OW 12
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: LD_INT 3
2082: PPUSH
2083: CALL 8121 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 3
2092: PPUSH
2093: LD_INT 121
2095: PPUSH
2096: LD_EXP 31
2100: PPUSH
2101: LD_EXP 32
2105: PPUSH
2106: CALL_OW 12
2110: PPUSH
2111: LD_INT 9
2113: PPUSH
2114: LD_INT 3
2116: PPUSH
2117: CALL 8121 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 3
2126: PPUSH
2127: LD_INT 4
2129: PPUSH
2130: LD_EXP 31
2134: PPUSH
2135: LD_EXP 32
2139: PPUSH
2140: CALL_OW 12
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 6
2150: PPUSH
2151: CALL 8121 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
2155: LD_INT 3
2157: PPUSH
2158: LD_INT 3
2160: PPUSH
2161: LD_INT 112
2163: PPUSH
2164: LD_EXP 31
2168: PPUSH
2169: LD_EXP 32
2173: PPUSH
2174: CALL_OW 12
2178: PPUSH
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 6
2184: PPUSH
2185: CALL 8121 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
2189: LD_INT 3
2191: PPUSH
2192: LD_INT 3
2194: PPUSH
2195: LD_INT 47
2197: PPUSH
2198: LD_EXP 31
2202: PPUSH
2203: LD_EXP 32
2207: PPUSH
2208: CALL_OW 12
2212: PPUSH
2213: LD_INT 4
2215: PPUSH
2216: LD_INT 6
2218: PPUSH
2219: CALL 8121 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
2223: LD_INT 3
2225: PPUSH
2226: LD_INT 3
2228: PPUSH
2229: LD_INT 129
2231: PPUSH
2232: LD_EXP 31
2236: PPUSH
2237: LD_EXP 32
2241: PPUSH
2242: CALL_OW 12
2246: PPUSH
2247: LD_INT 4
2249: PPUSH
2250: LD_INT 6
2252: PPUSH
2253: CALL 8121 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
2257: LD_INT 3
2259: PPUSH
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 135
2265: PPUSH
2266: LD_EXP 31
2270: PPUSH
2271: LD_EXP 32
2275: PPUSH
2276: CALL_OW 12
2280: PPUSH
2281: LD_INT 4
2283: PPUSH
2284: LD_INT 6
2286: PPUSH
2287: CALL 8121 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2291: LD_ADDR_VAR 0 2
2295: PUSH
2296: LD_INT 22
2298: PUSH
2299: LD_INT 3
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 30
2308: PUSH
2309: LD_INT 32
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PPUSH
2320: CALL_OW 69
2324: PUSH
2325: FOR_IN
2326: IFFALSE 2366
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
2328: LD_INT 3
2330: PPUSH
2331: LD_INT 3
2333: PPUSH
2334: LD_VAR 0 2
2338: PPUSH
2339: LD_EXP 31
2343: PPUSH
2344: LD_EXP 32
2348: PPUSH
2349: CALL_OW 12
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: CALL 8121 0 6
2364: GO 2325
2366: POP
2367: POP
// for i = 1 to 5 do
2368: LD_ADDR_VAR 0 2
2372: PUSH
2373: DOUBLE
2374: LD_INT 1
2376: DEC
2377: ST_TO_ADDR
2378: LD_INT 5
2380: PUSH
2381: FOR_TO
2382: IFFALSE 2481
// begin uc_side = 3 ;
2384: LD_ADDR_OWVAR 20
2388: PUSH
2389: LD_INT 3
2391: ST_TO_ADDR
// uc_nation = 3 ;
2392: LD_ADDR_OWVAR 21
2396: PUSH
2397: LD_INT 3
2399: ST_TO_ADDR
// hc_gallery =  ;
2400: LD_ADDR_OWVAR 33
2404: PUSH
2405: LD_STRING 
2407: ST_TO_ADDR
// hc_name =  ;
2408: LD_ADDR_OWVAR 26
2412: PUSH
2413: LD_STRING 
2415: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
2416: LD_INT 0
2418: PPUSH
2419: LD_INT 4
2421: PPUSH
2422: LD_EXP 31
2426: PPUSH
2427: LD_EXP 32
2431: PPUSH
2432: CALL_OW 12
2436: PPUSH
2437: CALL_OW 380
// un = CreateHuman ;
2441: LD_ADDR_VAR 0 3
2445: PUSH
2446: CALL_OW 44
2450: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
2451: LD_VAR 0 3
2455: PPUSH
2456: LD_INT 3
2458: PPUSH
2459: CALL_OW 52
// RuScientists = RuScientists ^ un ;
2463: LD_ADDR_EXP 29
2467: PUSH
2468: LD_EXP 29
2472: PUSH
2473: LD_VAR 0 3
2477: ADD
2478: ST_TO_ADDR
// end ;
2479: GO 2381
2481: POP
2482: POP
// end ;
2483: LD_VAR 0 1
2487: RET
// export function PrepareWestBase ; var i , un ; begin
2488: LD_INT 0
2490: PPUSH
2491: PPUSH
2492: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
2493: LD_INT 3
2495: PPUSH
2496: LD_INT 3
2498: PPUSH
2499: LD_INT 6
2501: PPUSH
2502: LD_EXP 31
2506: PPUSH
2507: LD_EXP 32
2511: PPUSH
2512: CALL_OW 12
2516: PPUSH
2517: LD_INT 2
2519: PPUSH
2520: LD_INT 3
2522: PPUSH
2523: CALL 8121 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
2527: LD_INT 3
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: LD_INT 91
2535: PPUSH
2536: LD_EXP 31
2540: PPUSH
2541: LD_EXP 32
2545: PPUSH
2546: CALL_OW 12
2550: PPUSH
2551: LD_INT 4
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL 8121 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
2561: LD_INT 3
2563: PPUSH
2564: LD_INT 3
2566: PPUSH
2567: LD_INT 21
2569: PPUSH
2570: LD_EXP 31
2574: PPUSH
2575: LD_EXP 32
2579: PPUSH
2580: CALL_OW 12
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 6
2590: PPUSH
2591: CALL 8121 0 6
// end ;
2595: LD_VAR 0 1
2599: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
2600: LD_INT 0
2602: PPUSH
2603: PPUSH
2604: PPUSH
2605: PPUSH
// uc_side = 3 ;
2606: LD_ADDR_OWVAR 20
2610: PUSH
2611: LD_INT 3
2613: ST_TO_ADDR
// uc_nation = 3 ;
2614: LD_ADDR_OWVAR 21
2618: PUSH
2619: LD_INT 3
2621: ST_TO_ADDR
// for i = 1 to 5 do
2622: LD_ADDR_VAR 0 2
2626: PUSH
2627: DOUBLE
2628: LD_INT 1
2630: DEC
2631: ST_TO_ADDR
2632: LD_INT 5
2634: PUSH
2635: FOR_TO
2636: IFFALSE 2706
// begin hc_gallery =  ;
2638: LD_ADDR_OWVAR 33
2642: PUSH
2643: LD_STRING 
2645: ST_TO_ADDR
// hc_name =  ;
2646: LD_ADDR_OWVAR 26
2650: PUSH
2651: LD_STRING 
2653: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
2654: LD_INT 0
2656: PPUSH
2657: LD_INT 9
2659: PPUSH
2660: LD_EXP 31
2664: PPUSH
2665: LD_EXP 32
2669: PPUSH
2670: CALL_OW 12
2674: PPUSH
2675: CALL_OW 380
// un = CreateHuman ;
2679: LD_ADDR_VAR 0 3
2683: PUSH
2684: CALL_OW 44
2688: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
2689: LD_VAR 0 3
2693: PPUSH
2694: LD_INT 8
2696: PPUSH
2697: LD_INT 0
2699: PPUSH
2700: CALL_OW 49
// end ;
2704: GO 2635
2706: POP
2707: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2708: LD_ADDR_VAR 0 2
2712: PUSH
2713: DOUBLE
2714: LD_INT 1
2716: DEC
2717: ST_TO_ADDR
2718: LD_INT 2
2720: PUSH
2721: LD_INT 3
2723: PUSH
2724: LD_INT 4
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: PUSH
2732: LD_OWVAR 67
2736: ARRAY
2737: PUSH
2738: FOR_TO
2739: IFFALSE 2809
// begin hc_gallery =  ;
2741: LD_ADDR_OWVAR 33
2745: PUSH
2746: LD_STRING 
2748: ST_TO_ADDR
// hc_name =  ;
2749: LD_ADDR_OWVAR 26
2753: PUSH
2754: LD_STRING 
2756: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
2757: LD_INT 0
2759: PPUSH
2760: LD_INT 4
2762: PPUSH
2763: LD_EXP 31
2767: PPUSH
2768: LD_EXP 32
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: CALL_OW 380
// un = CreateHuman ;
2782: LD_ADDR_VAR 0 3
2786: PUSH
2787: CALL_OW 44
2791: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
2792: LD_VAR 0 3
2796: PPUSH
2797: LD_INT 8
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// end ;
2807: GO 2738
2809: POP
2810: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
2811: LD_ADDR_VAR 0 2
2815: PUSH
2816: DOUBLE
2817: LD_INT 1
2819: DEC
2820: ST_TO_ADDR
2821: LD_INT 3
2823: PUSH
2824: LD_INT 4
2826: PUSH
2827: LD_INT 5
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: LIST
2834: PUSH
2835: LD_OWVAR 67
2839: ARRAY
2840: PUSH
2841: FOR_TO
2842: IFFALSE 3038
// begin vc_engine = 3 ;
2844: LD_ADDR_OWVAR 39
2848: PUSH
2849: LD_INT 3
2851: ST_TO_ADDR
// vc_control = 1 ;
2852: LD_ADDR_OWVAR 38
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
2860: LD_ADDR_OWVAR 40
2864: PUSH
2865: LD_INT 42
2867: PUSH
2868: LD_INT 43
2870: PUSH
2871: LD_INT 44
2873: PUSH
2874: LD_INT 45
2876: PUSH
2877: LD_INT 46
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 1
2889: PPUSH
2890: LD_INT 5
2892: PPUSH
2893: CALL_OW 12
2897: ARRAY
2898: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
2899: LD_OWVAR 40
2903: PUSH
2904: LD_INT 46
2906: EQUAL
2907: IFFALSE 2919
// vc_chassis = ru_heavy_tracked else
2909: LD_ADDR_OWVAR 37
2913: PUSH
2914: LD_INT 24
2916: ST_TO_ADDR
2917: GO 2946
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
2919: LD_ADDR_OWVAR 37
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 12
2944: ARRAY
2945: ST_TO_ADDR
// veh = CreateVehicle ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: CALL_OW 45
2955: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2956: LD_VAR 0 4
2960: PPUSH
2961: LD_INT 3
2963: PPUSH
2964: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
2968: LD_VAR 0 4
2972: PPUSH
2973: LD_INT 5
2975: PPUSH
2976: LD_INT 0
2978: PPUSH
2979: CALL_OW 49
// hc_gallery =  ;
2983: LD_ADDR_OWVAR 33
2987: PUSH
2988: LD_STRING 
2990: ST_TO_ADDR
// hc_name =  ;
2991: LD_ADDR_OWVAR 26
2995: PUSH
2996: LD_STRING 
2998: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 3
3004: PPUSH
3005: LD_INT 10
3007: PPUSH
3008: CALL_OW 380
// un = CreateHuman ;
3012: LD_ADDR_VAR 0 3
3016: PUSH
3017: CALL_OW 44
3021: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3022: LD_VAR 0 3
3026: PPUSH
3027: LD_VAR 0 4
3031: PPUSH
3032: CALL_OW 52
// end ;
3036: GO 2841
3038: POP
3039: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 3
3052: PUSH
3053: LD_INT 4
3055: PUSH
3056: LD_INT 5
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_OWVAR 67
3068: ARRAY
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3218
// begin vc_engine = 3 ;
3073: LD_ADDR_OWVAR 39
3077: PUSH
3078: LD_INT 3
3080: ST_TO_ADDR
// vc_control = 3 ;
3081: LD_ADDR_OWVAR 38
3085: PUSH
3086: LD_INT 3
3088: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3089: LD_ADDR_OWVAR 40
3093: PUSH
3094: LD_INT 42
3096: PUSH
3097: LD_INT 43
3099: PUSH
3100: LD_INT 44
3102: PUSH
3103: LD_INT 45
3105: PUSH
3106: LD_INT 46
3108: PUSH
3109: LD_INT 49
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 5
3125: PPUSH
3126: CALL_OW 12
3130: ARRAY
3131: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3132: LD_OWVAR 40
3136: PUSH
3137: LD_INT 46
3139: EQUAL
3140: IFFALSE 3152
// vc_chassis = ru_heavy_tracked else
3142: LD_ADDR_OWVAR 37
3146: PUSH
3147: LD_INT 24
3149: ST_TO_ADDR
3150: GO 3179
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3152: LD_ADDR_OWVAR 37
3156: PUSH
3157: LD_INT 22
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_INT 2
3172: PPUSH
3173: CALL_OW 12
3177: ARRAY
3178: ST_TO_ADDR
// veh = CreateVehicle ;
3179: LD_ADDR_VAR 0 4
3183: PUSH
3184: CALL_OW 45
3188: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3189: LD_VAR 0 4
3193: PPUSH
3194: LD_INT 3
3196: PPUSH
3197: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
3201: LD_VAR 0 4
3205: PPUSH
3206: LD_INT 6
3208: PPUSH
3209: LD_INT 0
3211: PPUSH
3212: CALL_OW 49
// end ;
3216: GO 3070
3218: POP
3219: POP
// end ; end_of_file
3220: LD_VAR 0 1
3224: RET
// export function PrepareKurt ; begin
3225: LD_INT 0
3227: PPUSH
// uc_side = 8 ;
3228: LD_ADDR_OWVAR 20
3232: PUSH
3233: LD_INT 8
3235: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3236: LD_ADDR_EXP 21
3240: PUSH
3241: LD_STRING Kurt
3243: PPUSH
3244: LD_INT 0
3246: PPUSH
3247: CALL 6921 0 2
3251: ST_TO_ADDR
// PlaceUnitArea ( Kurt , PlayerSpawn , false ) ;
3252: LD_EXP 21
3256: PPUSH
3257: LD_INT 4
3259: PPUSH
3260: LD_INT 0
3262: PPUSH
3263: CALL_OW 49
// end ;
3267: LD_VAR 0 1
3271: RET
// export function PrepareLegionForPlayer ; var i , un ; begin
3272: LD_INT 0
3274: PPUSH
3275: PPUSH
3276: PPUSH
// for i = 1 to 6 do
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_INT 6
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3392
// begin uc_side = 1 ;
3293: LD_ADDR_OWVAR 20
3297: PUSH
3298: LD_INT 1
3300: ST_TO_ADDR
// uc_nation = 2 ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 2
3308: ST_TO_ADDR
// hc_gallery =  ;
3309: LD_ADDR_OWVAR 33
3313: PUSH
3314: LD_STRING 
3316: ST_TO_ADDR
// hc_name =  ;
3317: LD_ADDR_OWVAR 26
3321: PUSH
3322: LD_STRING 
3324: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , 10 ) ;
3325: LD_INT 0
3327: PPUSH
3328: LD_INT 1
3330: PUSH
3331: LD_INT 2
3333: PUSH
3334: LD_INT 3
3336: PUSH
3337: LD_INT 4
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 1
3348: PPUSH
3349: LD_INT 4
3351: PPUSH
3352: CALL_OW 12
3356: ARRAY
3357: PPUSH
3358: LD_INT 10
3360: PPUSH
3361: CALL_OW 380
// un = CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 4
3382: PPUSH
3383: LD_INT 0
3385: PPUSH
3386: CALL_OW 49
// end ;
3390: GO 3290
3392: POP
3393: POP
// end ; end_of_file
3394: LD_VAR 0 1
3398: RET
// every 1 do var i ;
3399: GO 3401
3401: DISABLE
3402: LD_INT 0
3404: PPUSH
// begin TeleportExit ( ruteleprt , 117 , 131 ) ;
3405: LD_INT 10
3407: PPUSH
3408: LD_INT 117
3410: PPUSH
3411: LD_INT 131
3413: PPUSH
3414: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3418: LD_INT 137
3420: PPUSH
3421: LD_INT 84
3423: PPUSH
3424: LD_INT 61
3426: PPUSH
3427: CALL_OW 243
// CenterNowOnUnits ( JMM ) ;
3431: LD_EXP 1
3435: PPUSH
3436: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 102 ) ;
3440: LD_INT 22
3442: PUSH
3443: LD_INT 1
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 69
3454: PPUSH
3455: LD_INT 130
3457: PPUSH
3458: LD_INT 102
3460: PPUSH
3461: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
3465: LD_VAR 0 1
3469: PPUSH
3470: LD_INT 114
3472: PPUSH
3473: LD_INT 102
3475: PPUSH
3476: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
3480: LD_EXP 1
3484: PPUSH
3485: LD_STRING D1-JMM-1
3487: PPUSH
3488: CALL_OW 88
// Say ( Donaldson , D1-Don-1 ) ;
3492: LD_EXP 2
3496: PPUSH
3497: LD_STRING D1-Don-1
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D1-JMM-2
3511: PPUSH
3512: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
3516: LD_EXP 2
3520: PPUSH
3521: LD_STRING D1-Don-2
3523: PPUSH
3524: CALL_OW 88
// AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 104 , 96 ) ;
3528: LD_INT 22
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PPUSH
3538: CALL_OW 69
3542: PPUSH
3543: LD_INT 104
3545: PPUSH
3546: LD_INT 96
3548: PPUSH
3549: CALL_OW 171
// end ;
3553: PPOPN 1
3555: END
// every 0 0$1 trigger SeeXY ( 1 , 101 , 92 ) do var i ;
3556: LD_INT 1
3558: PPUSH
3559: LD_INT 101
3561: PPUSH
3562: LD_INT 92
3564: PPUSH
3565: CALL_OW 293
3569: IFFALSE 3747
3571: GO 3573
3573: DISABLE
3574: LD_INT 0
3576: PPUSH
// begin CenterOnXY ( 90 , 70 ) ;
3577: LD_INT 90
3579: PPUSH
3580: LD_INT 70
3582: PPUSH
3583: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1-Sol1-2 ,  ) ;
3587: LD_INT 22
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 26
3599: PUSH
3600: LD_INT 1
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 25
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: LD_INT 25
3632: PUSH
3633: LD_INT 3
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 25
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_EXP 1
3666: PUSH
3667: EMPTY
3668: LIST
3669: DIFF
3670: PPUSH
3671: CALL_OW 69
3675: PPUSH
3676: LD_STRING D1-Sol1-2
3678: PPUSH
3679: LD_STRING 
3681: PPUSH
3682: CALL 6978 0 3
// Say ( JMM , D1-JMM-3 ) ;
3686: LD_EXP 1
3690: PPUSH
3691: LD_STRING D1-JMM-3
3693: PPUSH
3694: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
3698: LD_STRING M1
3700: PPUSH
3701: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
3705: LD_ADDR_VAR 0 1
3709: PUSH
3710: LD_INT 22
3712: PUSH
3713: LD_INT 1
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: PUSH
3725: FOR_IN
3726: IFFALSE 3745
// ComMoveXY ( i , 93 , 83 ) ;
3728: LD_VAR 0 1
3732: PPUSH
3733: LD_INT 93
3735: PPUSH
3736: LD_INT 83
3738: PPUSH
3739: CALL_OW 111
3743: GO 3725
3745: POP
3746: POP
// end ;
3747: PPOPN 1
3749: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
3750: GO 3752
3752: DISABLE
3753: LD_INT 0
3755: PPUSH
3756: PPUSH
3757: PPUSH
3758: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
3759: LD_ADDR_VAR 0 2
3763: PUSH
3764: LD_INT 8
3766: PPUSH
3767: LD_INT 22
3769: PUSH
3770: LD_INT 3
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 25
3779: PUSH
3780: LD_INT 9
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PPUSH
3791: CALL_OW 70
3795: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: LD_INT 22
3803: PUSH
3804: LD_INT 1
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: PPUSH
3814: CALL_OW 69
3818: ST_TO_ADDR
// enable ;
3819: ENABLE
// for i in your_units do
3820: LD_ADDR_VAR 0 1
3824: PUSH
3825: LD_VAR 0 3
3829: PUSH
3830: FOR_IN
3831: IFFALSE 4424
// begin if See ( 3 , i ) then
3833: LD_INT 3
3835: PPUSH
3836: LD_VAR 0 1
3840: PPUSH
3841: CALL_OW 292
3845: IFFALSE 4422
// begin disable ;
3847: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
3848: LD_VAR 0 2
3852: PPUSH
3853: LD_INT 96
3855: PPUSH
3856: LD_INT 85
3858: PPUSH
3859: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3863: LD_VAR 0 2
3867: PPUSH
3868: LD_INT 96
3870: PPUSH
3871: LD_INT 85
3873: PPUSH
3874: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3878: LD_VAR 0 2
3882: PPUSH
3883: LD_INT 96
3885: PPUSH
3886: LD_INT 85
3888: PPUSH
3889: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3893: LD_VAR 0 2
3897: PPUSH
3898: LD_INT 96
3900: PPUSH
3901: LD_INT 85
3903: PPUSH
3904: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3908: LD_VAR 0 2
3912: PPUSH
3913: LD_INT 96
3915: PPUSH
3916: LD_INT 85
3918: PPUSH
3919: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3923: LD_VAR 0 2
3927: PPUSH
3928: LD_INT 96
3930: PPUSH
3931: LD_INT 85
3933: PPUSH
3934: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D1a-JMM-1
3945: PPUSH
3946: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
3950: LD_EXP 2
3954: PPUSH
3955: LD_STRING D1a-Don-1
3957: PPUSH
3958: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
3962: LD_ADDR_VAR 0 1
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: LD_INT 1
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 69
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4002
// ComMoveXY ( i , 109 , 102 ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_INT 109
3992: PPUSH
3993: LD_INT 102
3995: PPUSH
3996: CALL_OW 111
4000: GO 3982
4002: POP
4003: POP
// Say ( JMM , D1a-JMM-2 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D1a-JMM-2
4011: PPUSH
4012: CALL_OW 88
// wait ( 0 0$10 ) ;
4016: LD_INT 350
4018: PPUSH
4019: CALL_OW 67
// Say ( Donaldson , D1b-Don-1 ) ;
4023: LD_EXP 2
4027: PPUSH
4028: LD_STRING D1b-Don-1
4030: PPUSH
4031: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
4035: LD_EXP 1
4039: PPUSH
4040: LD_STRING D1b-JMM-1
4042: PPUSH
4043: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
4047: LD_INT 22
4049: PUSH
4050: LD_INT 1
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 26
4059: PUSH
4060: LD_INT 1
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 2
4069: PUSH
4070: LD_INT 25
4072: PUSH
4073: LD_INT 1
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PUSH
4080: LD_INT 25
4082: PUSH
4083: LD_INT 2
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 25
4092: PUSH
4093: LD_INT 3
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 25
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_EXP 1
4126: PUSH
4127: EMPTY
4128: LIST
4129: DIFF
4130: PPUSH
4131: CALL_OW 69
4135: PPUSH
4136: LD_STRING D1b-Sol1-1
4138: PPUSH
4139: LD_STRING 
4141: PPUSH
4142: CALL 6978 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
4146: LD_EXP 2
4150: PPUSH
4151: LD_STRING D1b-Don-2
4153: PPUSH
4154: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
4158: LD_EXP 1
4162: PPUSH
4163: LD_STRING D1b-JMM-2
4165: PPUSH
4166: CALL_OW 88
// dec = ShowQuery1 ;
4170: LD_ADDR_VAR 0 4
4174: PUSH
4175: CALL 7417 0 0
4179: ST_TO_ADDR
// if dec = 1 then
4180: LD_VAR 0 4
4184: PUSH
4185: LD_INT 1
4187: EQUAL
4188: IFFALSE 4294
// begin Say ( JMM , D2-JMM-1 ) ;
4190: LD_EXP 1
4194: PPUSH
4195: LD_STRING D2-JMM-1
4197: PPUSH
4198: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
4202: LD_EXP 19
4206: PPUSH
4207: LD_STRING D2-Pow-1
4209: PPUSH
4210: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
4214: LD_EXP 1
4218: PPUSH
4219: LD_STRING D2a-JMM-1
4221: PPUSH
4222: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
4226: LD_EXP 19
4230: PPUSH
4231: LD_STRING D2a-Pow-1
4233: PPUSH
4234: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
4238: LD_EXP 1
4242: PPUSH
4243: LD_STRING D2a-JMM-2
4245: PPUSH
4246: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
4250: LD_EXP 19
4254: PPUSH
4255: LD_STRING D2a-Pow-2
4257: PPUSH
4258: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
4262: LD_EXP 1
4266: PPUSH
4267: LD_STRING D2a-JMM-3
4269: PPUSH
4270: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
4274: LD_EXP 19
4278: PPUSH
4279: LD_STRING D2a-Pow-3
4281: PPUSH
4282: CALL_OW 94
// secondPass = 2 ;
4286: LD_ADDR_EXP 23
4290: PUSH
4291: LD_INT 2
4293: ST_TO_ADDR
// end ; if dec = 2 then
4294: LD_VAR 0 4
4298: PUSH
4299: LD_INT 2
4301: EQUAL
4302: IFFALSE 4396
// begin Say ( JMM , D2-JMM-1 ) ;
4304: LD_EXP 1
4308: PPUSH
4309: LD_STRING D2-JMM-1
4311: PPUSH
4312: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
4316: LD_EXP 19
4320: PPUSH
4321: LD_STRING D2-Pow-1
4323: PPUSH
4324: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
4328: LD_EXP 1
4332: PPUSH
4333: LD_STRING D2b-JMM-1
4335: PPUSH
4336: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
4340: LD_EXP 19
4344: PPUSH
4345: LD_STRING D2b-Pow-1
4347: PPUSH
4348: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
4352: LD_EXP 1
4356: PPUSH
4357: LD_STRING D2c-JMM-1
4359: PPUSH
4360: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
4364: LD_EXP 19
4368: PPUSH
4369: LD_STRING D2c-Pow-1
4371: PPUSH
4372: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
4376: LD_EXP 1
4380: PPUSH
4381: LD_STRING D2c-JMM-2
4383: PPUSH
4384: CALL_OW 88
// secondPass = 2 ;
4388: LD_ADDR_EXP 23
4392: PUSH
4393: LD_INT 2
4395: ST_TO_ADDR
// end ; if dec = 3 then
4396: LD_VAR 0 4
4400: PUSH
4401: LD_INT 3
4403: EQUAL
4404: IFFALSE 4414
// secondPass = 1 ;
4406: LD_ADDR_EXP 23
4410: PUSH
4411: LD_INT 1
4413: ST_TO_ADDR
// InGameOff ;
4414: CALL_OW 9
// exit ;
4418: POP
4419: POP
4420: GO 4426
// end ; end ;
4422: GO 3830
4424: POP
4425: POP
// end ;
4426: PPOPN 4
4428: END
// every 1 1$0 trigger secondPass = 2 do
4429: LD_EXP 23
4433: PUSH
4434: LD_INT 2
4436: EQUAL
4437: IFFALSE 4564
4439: GO 4441
4441: DISABLE
// begin PowellSupport1 ;
4442: CALL 954 0 0
// DialogueOn ;
4446: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
4450: LD_EXP 1
4454: PPUSH
4455: LD_STRING DC1-JMM-1
4457: PPUSH
4458: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
4462: LD_EXP 19
4466: PPUSH
4467: LD_STRING DC1-Pow-1
4469: PPUSH
4470: CALL_OW 94
// DialogueOff ;
4474: CALL_OW 7
// wait ( 3 3$0 ) ;
4478: LD_INT 6300
4480: PPUSH
4481: CALL_OW 67
// PowellSupport2 ;
4485: CALL 1401 0 0
// DialogueOn ;
4489: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
4493: LD_EXP 1
4497: PPUSH
4498: LD_STRING DC2-JMM-1
4500: PPUSH
4501: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
4505: LD_EXP 19
4509: PPUSH
4510: LD_STRING DC2-Pow-1
4512: PPUSH
4513: CALL_OW 94
// DialogueOff ;
4517: CALL_OW 7
// wait ( 6 6$0 ) ;
4521: LD_INT 12600
4523: PPUSH
4524: CALL_OW 67
// PowellSupport3 ;
4528: CALL 1760 0 0
// DialogueOn ;
4532: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
4536: LD_EXP 19
4540: PPUSH
4541: LD_STRING DC3-Pow-1
4543: PPUSH
4544: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
4548: LD_EXP 1
4552: PPUSH
4553: LD_STRING DC3-JMM-1
4555: PPUSH
4556: CALL_OW 88
// DialogueOff ;
4560: CALL_OW 7
// end ;
4564: END
// every 4 4$30 trigger secondPass = 2 do var dec1 , dec2 ;
4565: LD_EXP 23
4569: PUSH
4570: LD_INT 2
4572: EQUAL
4573: IFFALSE 5135
4575: GO 4577
4577: DISABLE
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
// begin PrepareKurt ;
4582: CALL 3225 0 0
// DialogueOn ;
4586: CALL_OW 6
// Say ( Kurt , D3-Kurt-1 ) ;
4590: LD_EXP 21
4594: PPUSH
4595: LD_STRING D3-Kurt-1
4597: PPUSH
4598: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
4602: LD_EXP 1
4606: PPUSH
4607: LD_STRING D3-JMM-1
4609: PPUSH
4610: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
4614: LD_EXP 21
4618: PPUSH
4619: LD_STRING D3-Kurt-2
4621: PPUSH
4622: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4626: LD_EXP 1
4630: PPUSH
4631: LD_STRING D3-JMM-2
4633: PPUSH
4634: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
4638: LD_EXP 21
4642: PPUSH
4643: LD_STRING D3-Kurt-4
4645: PPUSH
4646: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
4650: LD_EXP 1
4654: PPUSH
4655: LD_STRING D3-JMM-4
4657: PPUSH
4658: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
4662: LD_EXP 21
4666: PPUSH
4667: LD_STRING D3-Kurt-5
4669: PPUSH
4670: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
4674: LD_EXP 21
4678: PPUSH
4679: LD_STRING D3-Kurt-5a
4681: PPUSH
4682: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
4686: LD_EXP 21
4690: PPUSH
4691: LD_STRING D3-Kurt-5b
4693: PPUSH
4694: CALL_OW 88
// dec1 = ShowQuery4 ;
4698: LD_ADDR_VAR 0 1
4702: PUSH
4703: CALL 7658 0 0
4707: ST_TO_ADDR
// if dec1 = 1 then
4708: LD_VAR 0 1
4712: PUSH
4713: LD_INT 1
4715: EQUAL
4716: IFFALSE 4750
// begin Say ( JMM , D3Ka-JMM-1 ) ;
4718: LD_EXP 1
4722: PPUSH
4723: LD_STRING D3Ka-JMM-1
4725: PPUSH
4726: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
4730: LD_EXP 21
4734: PPUSH
4735: LD_STRING D3Ka-Kurt-1
4737: PPUSH
4738: CALL_OW 88
// warWithLegion = 1 ;
4742: LD_ADDR_EXP 25
4746: PUSH
4747: LD_INT 1
4749: ST_TO_ADDR
// end ; if dec1 = 2 then
4750: LD_VAR 0 1
4754: PUSH
4755: LD_INT 2
4757: EQUAL
4758: IFFALSE 4784
// begin Say ( JMM , D3Kb-JMM-1 ) ;
4760: LD_EXP 1
4764: PPUSH
4765: LD_STRING D3Kb-JMM-1
4767: PPUSH
4768: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
4772: LD_EXP 21
4776: PPUSH
4777: LD_STRING D3Kb-Kurt-1
4779: PPUSH
4780: CALL_OW 88
// end ; if dec1 = 3 then
4784: LD_VAR 0 1
4788: PUSH
4789: LD_INT 3
4791: EQUAL
4792: IFFALSE 5010
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
4794: LD_EXP 1
4798: PPUSH
4799: LD_STRING D3Kc1-JMM-1
4801: PPUSH
4802: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
4806: LD_EXP 21
4810: PPUSH
4811: LD_STRING D3Kc1-Kurt-1
4813: PPUSH
4814: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
4818: LD_EXP 1
4822: PPUSH
4823: LD_STRING D3Kc1-JMM-2
4825: PPUSH
4826: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
4830: LD_EXP 21
4834: PPUSH
4835: LD_STRING D3Kc1-Kurt-2
4837: PPUSH
4838: CALL_OW 88
// askSiberite = 1 ;
4842: LD_ADDR_EXP 27
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// dec2 = ShowQuery7 ;
4850: LD_ADDR_VAR 0 2
4854: PUSH
4855: CALL 7937 0 0
4859: ST_TO_ADDR
// if dec2 = 1 then
4860: LD_VAR 0 2
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: IFFALSE 4902
// begin Say ( JMM , D4a-JMM-1 ) ;
4870: LD_EXP 1
4874: PPUSH
4875: LD_STRING D4a-JMM-1
4877: PPUSH
4878: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
4882: LD_EXP 21
4886: PPUSH
4887: LD_STRING D4b-Kurt-1
4889: PPUSH
4890: CALL_OW 88
// warWithLegion = 1 ;
4894: LD_ADDR_EXP 25
4898: PUSH
4899: LD_INT 1
4901: ST_TO_ADDR
// end ; if dec2 = 2 then
4902: LD_VAR 0 2
4906: PUSH
4907: LD_INT 2
4909: EQUAL
4910: IFFALSE 4944
// begin Say ( JMM , D4b-JMM-1 ) ;
4912: LD_EXP 1
4916: PPUSH
4917: LD_STRING D4b-JMM-1
4919: PPUSH
4920: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
4924: LD_EXP 21
4928: PPUSH
4929: LD_STRING D4b-Kurt-1
4931: PPUSH
4932: CALL_OW 88
// warWithLegion = 1 ;
4936: LD_ADDR_EXP 25
4940: PUSH
4941: LD_INT 1
4943: ST_TO_ADDR
// end ; if dec2 = 3 then
4944: LD_VAR 0 2
4948: PUSH
4949: LD_INT 3
4951: EQUAL
4952: IFFALSE 5010
// begin Say ( JMM , D4c-JMM-1 ) ;
4954: LD_EXP 1
4958: PPUSH
4959: LD_STRING D4c-JMM-1
4961: PPUSH
4962: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
4966: LD_EXP 21
4970: PPUSH
4971: LD_STRING D4c-Kurt-1
4973: PPUSH
4974: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
4978: LD_EXP 1
4982: PPUSH
4983: LD_STRING D4c-JMM-2
4985: PPUSH
4986: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
4990: LD_EXP 21
4994: PPUSH
4995: LD_STRING D4c-Kurt-2
4997: PPUSH
4998: CALL_OW 88
// fakeInfo = 1 ;
5002: LD_ADDR_EXP 26
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
5010: LD_VAR 0 1
5014: PUSH
5015: LD_INT 4
5017: EQUAL
5018: IFFALSE 5122
// begin Say ( Kurt , D3Kd-JMM-1 ) ;
5020: LD_EXP 21
5024: PPUSH
5025: LD_STRING D3Kd-JMM-1
5027: PPUSH
5028: CALL_OW 88
// dec2 = ShowQuery8 ;
5032: LD_ADDR_VAR 0 2
5036: PUSH
5037: CALL 8011 0 0
5041: ST_TO_ADDR
// if dec2 = 1 then
5042: LD_VAR 0 2
5046: PUSH
5047: LD_INT 1
5049: EQUAL
5050: IFFALSE 5084
// begin Say ( JMM , D5Ka-JMM-1 ) ;
5052: LD_EXP 1
5056: PPUSH
5057: LD_STRING D5Ka-JMM-1
5059: PPUSH
5060: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
5064: LD_EXP 21
5068: PPUSH
5069: LD_STRING D5Ka-Kurt-1
5071: PPUSH
5072: CALL_OW 88
// warWithLegion = 1 ;
5076: LD_ADDR_EXP 25
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// end ; if dec2 = 2 then
5084: LD_VAR 0 2
5088: PUSH
5089: LD_INT 2
5091: EQUAL
5092: IFFALSE 5122
// begin Say ( JMM , D3Ke-JMM-1 ) ;
5094: LD_EXP 1
5098: PPUSH
5099: LD_STRING D3Ke-JMM-1
5101: PPUSH
5102: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
5106: LD_EXP 21
5110: PPUSH
5111: LD_STRING D3Ke-Kurt-1
5113: PPUSH
5114: CALL_OW 88
// PrepareLegionForPlayer ;
5118: CALL 3272 0 0
// end ; end ; DialogueOff ;
5122: CALL_OW 7
// RemoveUnit ( Kurt ) ;
5126: LD_EXP 21
5130: PPUSH
5131: CALL_OW 64
// end ;
5135: PPOPN 2
5137: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 3 ) do
5138: LD_EXP 11
5142: PPUSH
5143: CALL_OW 305
5147: PUSH
5148: LD_EXP 11
5152: PPUSH
5153: LD_INT 3
5155: PPUSH
5156: CALL_OW 289
5160: NOT
5161: AND
5162: IFFALSE 5179
5164: GO 5166
5166: DISABLE
// SetSide ( amCargo1 , 4 ) ;
5167: LD_EXP 11
5171: PPUSH
5172: LD_INT 4
5174: PPUSH
5175: CALL_OW 235
5179: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 3 ) do
5180: LD_EXP 12
5184: PPUSH
5185: CALL_OW 305
5189: PUSH
5190: LD_EXP 12
5194: PPUSH
5195: LD_INT 1
5197: PPUSH
5198: CALL_OW 289
5202: NOT
5203: AND
5204: PUSH
5205: LD_EXP 12
5209: PPUSH
5210: LD_INT 3
5212: PPUSH
5213: CALL_OW 289
5217: NOT
5218: AND
5219: IFFALSE 5236
5221: GO 5223
5223: DISABLE
// SetSide ( amCargo2 , 4 ) ;
5224: LD_EXP 12
5228: PPUSH
5229: LD_INT 4
5231: PPUSH
5232: CALL_OW 235
5236: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo3 , 1 ) do
5237: LD_EXP 12
5241: PPUSH
5242: CALL_OW 305
5246: PUSH
5247: LD_EXP 14
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: CALL_OW 289
5259: NOT
5260: AND
5261: IFFALSE 5278
5263: GO 5265
5265: DISABLE
// SetSide ( amCargo3 , 4 ) ;
5266: LD_EXP 14
5270: PPUSH
5271: LD_INT 4
5273: PPUSH
5274: CALL_OW 235
5278: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo4 , 2 ) do
5279: LD_EXP 14
5283: PPUSH
5284: CALL_OW 305
5288: PUSH
5289: LD_EXP 15
5293: PPUSH
5294: LD_INT 2
5296: PPUSH
5297: CALL_OW 289
5301: NOT
5302: AND
5303: IFFALSE 5320
5305: GO 5307
5307: DISABLE
// SetSide ( amCargo4 , 4 ) ;
5308: LD_EXP 15
5312: PPUSH
5313: LD_INT 4
5315: PPUSH
5316: CALL_OW 235
5320: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) do
5321: LD_EXP 15
5325: PPUSH
5326: CALL_OW 305
5330: PUSH
5331: LD_EXP 16
5335: PPUSH
5336: LD_INT 1
5338: PPUSH
5339: CALL_OW 289
5343: NOT
5344: AND
5345: PUSH
5346: LD_EXP 16
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: CALL_OW 289
5358: NOT
5359: AND
5360: IFFALSE 5377
5362: GO 5364
5364: DISABLE
// SetSide ( amCargo5 , 4 ) ;
5365: LD_EXP 16
5369: PPUSH
5370: LD_INT 4
5372: PPUSH
5373: CALL_OW 235
5377: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo6 , 1 ) do
5378: LD_EXP 16
5382: PPUSH
5383: CALL_OW 305
5387: PUSH
5388: LD_EXP 17
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 289
5400: NOT
5401: AND
5402: IFFALSE 5419
5404: GO 5406
5406: DISABLE
// SetSide ( amCargo6 , 4 ) ;
5407: LD_EXP 17
5411: PPUSH
5412: LD_INT 4
5414: PPUSH
5415: CALL_OW 235
5419: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 2 ) do
5420: LD_EXP 17
5424: PPUSH
5425: CALL_OW 305
5429: PUSH
5430: LD_EXP 17
5434: PPUSH
5435: LD_INT 2
5437: PPUSH
5438: CALL_OW 289
5442: NOT
5443: AND
5444: IFFALSE 5461
5446: GO 5448
5448: DISABLE
// SetSide ( amCargo7 , 4 ) ;
5449: LD_EXP 18
5453: PPUSH
5454: LD_INT 4
5456: PPUSH
5457: CALL_OW 235
5461: END
// every 0 0$1 do var i ;
5462: GO 5464
5464: DISABLE
5465: LD_INT 0
5467: PPUSH
// begin enable ;
5468: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
5469: LD_ADDR_VAR 0 1
5473: PUSH
5474: LD_INT 22
5476: PUSH
5477: LD_INT 4
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PPUSH
5484: CALL_OW 69
5488: PUSH
5489: FOR_IN
5490: IFFALSE 5529
// begin ComMoveToArea ( i , PlayerSpawn ) ;
5492: LD_VAR 0 1
5496: PPUSH
5497: LD_INT 4
5499: PPUSH
5500: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_INT 4
5511: PPUSH
5512: CALL_OW 308
5516: IFFALSE 5527
// RemoveUnit ( i ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: CALL_OW 64
// end ;
5527: GO 5489
5529: POP
5530: POP
// end ;
5531: PPOPN 1
5533: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
5534: LD_EXP 23
5538: PUSH
5539: LD_INT 1
5541: EQUAL
5542: IFFALSE 5917
5544: GO 5546
5546: DISABLE
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
// begin enable ;
5552: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5553: LD_ADDR_VAR 0 2
5557: PUSH
5558: LD_INT 12
5560: PPUSH
5561: LD_INT 22
5563: PUSH
5564: LD_INT 3
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 21
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PPUSH
5585: CALL_OW 70
5589: ST_TO_ADDR
// for i in enemyVehs do
5590: LD_ADDR_VAR 0 1
5594: PUSH
5595: LD_VAR 0 2
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5915
// begin if See ( 1 , i ) then
5603: LD_INT 1
5605: PPUSH
5606: LD_VAR 0 1
5610: PPUSH
5611: CALL_OW 292
5615: IFFALSE 5913
// begin disable ;
5617: DISABLE
// DialogueOn ;
5618: CALL_OW 6
// CenterNowOnUnits ( i ) ;
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
5631: LD_INT 22
5633: PUSH
5634: LD_INT 1
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 26
5643: PUSH
5644: LD_INT 1
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: PUSH
5655: LD_EXP 1
5659: PUSH
5660: EMPTY
5661: LIST
5662: DIFF
5663: PPUSH
5664: CALL_OW 69
5668: PPUSH
5669: LD_STRING DT1-Sol1-1
5671: PPUSH
5672: LD_STRING DT1-FSol1-1
5674: PPUSH
5675: CALL 6978 0 3
// dec = ShowQuery2 ;
5679: LD_ADDR_VAR 0 3
5683: PUSH
5684: CALL 7491 0 0
5688: ST_TO_ADDR
// if dec = 1 then
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 1
5696: EQUAL
5697: IFFALSE 5803
// begin Say ( JMM , D2-JMM-1 ) ;
5699: LD_EXP 1
5703: PPUSH
5704: LD_STRING D2-JMM-1
5706: PPUSH
5707: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5711: LD_EXP 19
5715: PPUSH
5716: LD_STRING D2-Pow-1
5718: PPUSH
5719: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
5723: LD_EXP 1
5727: PPUSH
5728: LD_STRING D2a-JMM-1
5730: PPUSH
5731: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
5735: LD_EXP 19
5739: PPUSH
5740: LD_STRING D2a-Pow-1
5742: PPUSH
5743: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
5747: LD_EXP 1
5751: PPUSH
5752: LD_STRING D2a-JMM-2
5754: PPUSH
5755: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
5759: LD_EXP 19
5763: PPUSH
5764: LD_STRING D2a-Pow-2
5766: PPUSH
5767: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
5771: LD_EXP 1
5775: PPUSH
5776: LD_STRING D2a-JMM-3
5778: PPUSH
5779: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
5783: LD_EXP 19
5787: PPUSH
5788: LD_STRING D2a-Pow-3
5790: PPUSH
5791: CALL_OW 94
// secondPass = 2 ;
5795: LD_ADDR_EXP 23
5799: PUSH
5800: LD_INT 2
5802: ST_TO_ADDR
// end ; if dec = 2 then
5803: LD_VAR 0 3
5807: PUSH
5808: LD_INT 2
5810: EQUAL
5811: IFFALSE 5905
// begin Say ( JMM , D2-JMM-1 ) ;
5813: LD_EXP 1
5817: PPUSH
5818: LD_STRING D2-JMM-1
5820: PPUSH
5821: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5825: LD_EXP 19
5829: PPUSH
5830: LD_STRING D2-Pow-1
5832: PPUSH
5833: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
5837: LD_EXP 1
5841: PPUSH
5842: LD_STRING D2b-JMM-1
5844: PPUSH
5845: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
5849: LD_EXP 19
5853: PPUSH
5854: LD_STRING D2b-Pow-1
5856: PPUSH
5857: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING D2c-JMM-1
5868: PPUSH
5869: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
5873: LD_EXP 19
5877: PPUSH
5878: LD_STRING D2c-Pow-1
5880: PPUSH
5881: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D2c-JMM-2
5892: PPUSH
5893: CALL_OW 88
// secondPass = 2 ;
5897: LD_ADDR_EXP 23
5901: PUSH
5902: LD_INT 2
5904: ST_TO_ADDR
// end ; DialogueOff ;
5905: CALL_OW 7
// exit ;
5909: POP
5910: POP
5911: GO 5917
// end ; end ;
5913: GO 5600
5915: POP
5916: POP
// end ;
5917: PPOPN 3
5919: END
// every 0 0$1 do var i , vehicles ;
5920: GO 5922
5922: DISABLE
5923: LD_INT 0
5925: PPUSH
5926: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
5927: LD_ADDR_VAR 0 2
5931: PUSH
5932: LD_INT 11
5934: PPUSH
5935: LD_INT 22
5937: PUSH
5938: LD_INT 3
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PPUSH
5945: CALL_OW 70
5949: ST_TO_ADDR
// enable ;
5950: ENABLE
// for i in vehicles do
5951: LD_ADDR_VAR 0 1
5955: PUSH
5956: LD_VAR 0 2
5960: PUSH
5961: FOR_IN
5962: IFFALSE 6063
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
5964: LD_INT 1
5966: PPUSH
5967: LD_VAR 0 1
5971: PPUSH
5972: CALL_OW 292
5976: PUSH
5977: LD_EXP 24
5981: PUSH
5982: LD_INT 1
5984: EQUAL
5985: AND
5986: IFFALSE 6061
// begin disable ;
5988: DISABLE
// DialogueOn ;
5989: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT1-Sol1-1 , DT1-FSol1-1 ) ;
5993: LD_INT 22
5995: PUSH
5996: LD_INT 1
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: PUSH
6003: LD_INT 21
6005: PUSH
6006: LD_INT 1
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PPUSH
6017: CALL_OW 69
6021: PUSH
6022: LD_EXP 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: DIFF
6030: PPUSH
6031: LD_STRING DT1-Sol1-1
6033: PPUSH
6034: LD_STRING DT1-FSol1-1
6036: PPUSH
6037: CALL 6978 0 3
// Say ( JMM , DT1-JMM-1 ) ;
6041: LD_EXP 1
6045: PPUSH
6046: LD_STRING DT1-JMM-1
6048: PPUSH
6049: CALL_OW 88
// DialogueOff ;
6053: CALL_OW 7
// exit ;
6057: POP
6058: POP
6059: GO 6065
// end ; end ;
6061: GO 5961
6063: POP
6064: POP
// end ;
6065: PPOPN 2
6067: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
6068: LD_EXP 24
6072: PUSH
6073: LD_INT 1
6075: EQUAL
6076: PUSH
6077: LD_INT 11
6079: PPUSH
6080: LD_INT 22
6082: PUSH
6083: LD_INT 3
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: LD_INT 24
6092: PUSH
6093: LD_INT 251
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 2
6102: PUSH
6103: LD_INT 21
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: LD_INT 21
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: PUSH
6138: LD_INT 0
6140: EQUAL
6141: AND
6142: IFFALSE 6235
6144: GO 6146
6146: DISABLE
// begin vehicleTeleported = 3 ;
6147: LD_ADDR_EXP 24
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// DialogueOn ;
6155: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
6159: LD_EXP 1
6163: PPUSH
6164: LD_STRING DT1a-JMM-1
6166: PPUSH
6167: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
6171: LD_INT 22
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 21
6183: PUSH
6184: LD_INT 1
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: PUSH
6200: LD_EXP 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: DIFF
6208: PPUSH
6209: LD_STRING DT1a-Sol1-1
6211: PPUSH
6212: LD_STRING DT1a-FSol1-1
6214: PPUSH
6215: CALL 6978 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
6219: LD_EXP 1
6223: PPUSH
6224: LD_STRING DT1a-JMM-2
6226: PPUSH
6227: CALL_OW 88
// DialogueOff ;
6231: CALL_OW 7
// end ;
6235: END
// every 0 0$1 do var i , vehicles ;
6236: GO 6238
6238: DISABLE
6239: LD_INT 0
6241: PPUSH
6242: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: LD_INT 11
6250: PPUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 3
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 70
6265: ST_TO_ADDR
// enable ;
6266: ENABLE
// for i in vehicles do
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_VAR 0 2
6276: PUSH
6277: FOR_IN
6278: IFFALSE 6367
// begin if See ( 1 , i ) and vehicleTeleported = 2 then
6280: LD_INT 1
6282: PPUSH
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 292
6292: PUSH
6293: LD_EXP 24
6297: PUSH
6298: LD_INT 2
6300: EQUAL
6301: AND
6302: IFFALSE 6365
// begin disable ;
6304: DISABLE
// DialogueOn ;
6305: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT2-Sol1-1 , DT2-FSol1-1 ) ;
6309: LD_INT 22
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 21
6321: PUSH
6322: LD_INT 1
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PPUSH
6333: CALL_OW 69
6337: PUSH
6338: LD_EXP 1
6342: PUSH
6343: EMPTY
6344: LIST
6345: DIFF
6346: PPUSH
6347: LD_STRING DT2-Sol1-1
6349: PPUSH
6350: LD_STRING DT2-FSol1-1
6352: PPUSH
6353: CALL 6978 0 3
// DialogueOff ;
6357: CALL_OW 7
// exit ;
6361: POP
6362: POP
6363: GO 6369
// end ; end ;
6365: GO 6277
6367: POP
6368: POP
// end ;
6369: PPOPN 2
6371: END
// every 0 0$10 trigger vehicleTeleported = 2 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
6372: LD_EXP 24
6376: PUSH
6377: LD_INT 2
6379: EQUAL
6380: PUSH
6381: LD_INT 11
6383: PPUSH
6384: LD_INT 22
6386: PUSH
6387: LD_INT 3
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 24
6396: PUSH
6397: LD_INT 251
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: LD_INT 2
6406: PUSH
6407: LD_INT 21
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 21
6419: PUSH
6420: LD_INT 1
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 70
6441: PUSH
6442: LD_INT 0
6444: EQUAL
6445: AND
6446: IFFALSE 6539
6448: GO 6450
6450: DISABLE
// begin vehicleTeleported = 4 ;
6451: LD_ADDR_EXP 24
6455: PUSH
6456: LD_INT 4
6458: ST_TO_ADDR
// DialogueOn ;
6459: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
6463: LD_EXP 1
6467: PPUSH
6468: LD_STRING DT2a-JMM-1
6470: PPUSH
6471: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
6475: LD_INT 22
6477: PUSH
6478: LD_INT 1
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 21
6487: PUSH
6488: LD_INT 1
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 69
6503: PUSH
6504: LD_EXP 1
6508: PUSH
6509: EMPTY
6510: LIST
6511: DIFF
6512: PPUSH
6513: LD_STRING DT2a-Sol1-1
6515: PPUSH
6516: LD_STRING DT2a-FSol1-1
6518: PPUSH
6519: CALL 6978 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
6523: LD_EXP 2
6527: PPUSH
6528: LD_STRING DT2a-Don-1
6530: PPUSH
6531: CALL_OW 88
// DialogueOff ;
6535: CALL_OW 7
// end ;
6539: END
// every 0 0$1 trigger SeeXY ( 1 , 36 , 55 ) do
6540: LD_INT 1
6542: PPUSH
6543: LD_INT 36
6545: PPUSH
6546: LD_INT 55
6548: PPUSH
6549: CALL_OW 293
6553: IFFALSE 6657
6555: GO 6557
6557: DISABLE
// begin DialogueOn ;
6558: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
6562: LD_INT 36
6564: PPUSH
6565: LD_INT 55
6567: PPUSH
6568: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D5-JMM-1 ,  ) ;
6572: LD_INT 22
6574: PUSH
6575: LD_INT 1
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 21
6584: PUSH
6585: LD_INT 1
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 26
6594: PUSH
6595: LD_INT 1
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PUSH
6612: LD_EXP 1
6616: PUSH
6617: EMPTY
6618: LIST
6619: DIFF
6620: PPUSH
6621: LD_STRING D5-JMM-1
6623: PPUSH
6624: LD_STRING 
6626: PPUSH
6627: CALL 6978 0 3
// if warWithLegion = 1 then
6631: LD_EXP 25
6635: PUSH
6636: LD_INT 1
6638: EQUAL
6639: IFFALSE 6653
// Say ( Donaldson , D5-Don-1 ) ;
6641: LD_EXP 2
6645: PPUSH
6646: LD_STRING D5-Don-1
6648: PPUSH
6649: CALL_OW 88
// DialogueOff ;
6653: CALL_OW 7
// end ;
6657: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
6658: LD_INT 1
6660: PPUSH
6661: LD_INT 10
6663: PPUSH
6664: CALL_OW 292
6668: IFFALSE 6748
6670: GO 6672
6672: DISABLE
// begin DialogueOn ;
6673: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
6677: LD_INT 10
6679: PPUSH
6680: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
6684: LD_INT 22
6686: PUSH
6687: LD_INT 1
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PUSH
6694: LD_INT 21
6696: PUSH
6697: LD_INT 1
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PPUSH
6708: CALL_OW 69
6712: PUSH
6713: LD_EXP 1
6717: PUSH
6718: EMPTY
6719: LIST
6720: DIFF
6721: PPUSH
6722: LD_STRING DT3-Sol1-1
6724: PPUSH
6725: LD_STRING DT3-FSol1-1
6727: PPUSH
6728: CALL 6978 0 3
// Say ( JMM , DT3-JMM-1 ) ;
6732: LD_EXP 1
6736: PPUSH
6737: LD_STRING DT3-JMM-1
6739: PPUSH
6740: CALL_OW 88
// DialogueOff ;
6744: CALL_OW 7
// end ;
6748: END
// every 0 0$1 trigger IsDying ( ruheadlab ) do var i , j , vehs ;
6749: LD_INT 3
6751: PPUSH
6752: CALL_OW 303
6756: IFFALSE 6918
6758: GO 6760
6760: DISABLE
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
6765: PPUSH
// begin vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
6766: LD_ADDR_VAR 0 3
6770: PUSH
6771: LD_INT 10
6773: PPUSH
6774: LD_INT 22
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 21
6786: PUSH
6787: LD_INT 2
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 58
6796: PUSH
6797: EMPTY
6798: LIST
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PPUSH
6805: CALL_OW 70
6809: ST_TO_ADDR
// DialogueOn ;
6810: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6814: LD_EXP 1
6818: PPUSH
6819: LD_STRING D6-JMM-1
6821: PPUSH
6822: CALL_OW 88
// DialogueOff ;
6826: CALL_OW 7
// for i in vehs do
6830: LD_ADDR_VAR 0 1
6834: PUSH
6835: LD_VAR 0 3
6839: PUSH
6840: FOR_IN
6841: IFFALSE 6916
// begin for j in RuScientists do
6843: LD_ADDR_VAR 0 2
6847: PUSH
6848: LD_EXP 29
6852: PUSH
6853: FOR_IN
6854: IFFALSE 6912
// begin AddComEnterUnit ( j , i ) ;
6856: LD_VAR 0 2
6860: PPUSH
6861: LD_VAR 0 1
6865: PPUSH
6866: CALL_OW 180
// AddComMoveToArea ( [ j , i ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
6870: LD_VAR 0 2
6874: PUSH
6875: LD_VAR 0 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PPUSH
6884: LD_INT 13
6886: PUSH
6887: LD_INT 14
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 1
6896: PPUSH
6897: LD_INT 2
6899: PPUSH
6900: CALL_OW 12
6904: ARRAY
6905: PPUSH
6906: CALL_OW 173
// end ;
6910: GO 6853
6912: POP
6913: POP
// end ;
6914: GO 6840
6916: POP
6917: POP
// end ; end_of_file
6918: PPOPN 3
6920: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6921: LD_INT 0
6923: PPUSH
6924: PPUSH
// if exist_mode then
6925: LD_VAR 0 2
6929: IFFALSE 6948
// unit := CreateCharacter ( ident ) else
6931: LD_ADDR_VAR 0 4
6935: PUSH
6936: LD_VAR 0 1
6940: PPUSH
6941: CALL_OW 34
6945: ST_TO_ADDR
6946: GO 6963
// unit := NewCharacter ( ident ) ;
6948: LD_ADDR_VAR 0 4
6952: PUSH
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL_OW 25
6962: ST_TO_ADDR
// result := unit ;
6963: LD_ADDR_VAR 0 3
6967: PUSH
6968: LD_VAR 0 4
6972: ST_TO_ADDR
// end ;
6973: LD_VAR 0 3
6977: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6978: LD_INT 0
6980: PPUSH
6981: PPUSH
6982: PPUSH
// rnd = rand ( 1 , characters ) ;
6983: LD_ADDR_VAR 0 6
6987: PUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_VAR 0 1
6995: PPUSH
6996: CALL_OW 12
7000: ST_TO_ADDR
// for i = 1 to characters do
7001: LD_ADDR_VAR 0 5
7005: PUSH
7006: DOUBLE
7007: LD_INT 1
7009: DEC
7010: ST_TO_ADDR
7011: LD_VAR 0 1
7015: PUSH
7016: FOR_TO
7017: IFFALSE 7127
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7019: LD_VAR 0 5
7023: PUSH
7024: LD_VAR 0 6
7028: EQUAL
7029: PUSH
7030: LD_VAR 0 1
7034: PUSH
7035: LD_VAR 0 5
7039: ARRAY
7040: PPUSH
7041: CALL_OW 258
7045: PUSH
7046: LD_INT 1
7048: EQUAL
7049: AND
7050: IFFALSE 7072
// Say ( characters [ i ] , dialogMID ) ;
7052: LD_VAR 0 1
7056: PUSH
7057: LD_VAR 0 5
7061: ARRAY
7062: PPUSH
7063: LD_VAR 0 2
7067: PPUSH
7068: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7072: LD_VAR 0 5
7076: PUSH
7077: LD_VAR 0 6
7081: EQUAL
7082: PUSH
7083: LD_VAR 0 1
7087: PUSH
7088: LD_VAR 0 5
7092: ARRAY
7093: PPUSH
7094: CALL_OW 258
7098: PUSH
7099: LD_INT 2
7101: EQUAL
7102: AND
7103: IFFALSE 7125
// Say ( characters [ i ] , dialogFID ) ;
7105: LD_VAR 0 1
7109: PUSH
7110: LD_VAR 0 5
7114: ARRAY
7115: PPUSH
7116: LD_VAR 0 3
7120: PPUSH
7121: CALL_OW 88
// end ;
7125: GO 7016
7127: POP
7128: POP
// end ;
7129: LD_VAR 0 4
7133: RET
// export function PrepareDifficulty ; var tmp ; begin
7134: LD_INT 0
7136: PPUSH
7137: PPUSH
// if Difficulty = 1 then
7138: LD_OWVAR 67
7142: PUSH
7143: LD_INT 1
7145: EQUAL
7146: IFFALSE 7164
// begin RuSolMinLevel = 8 ;
7148: LD_ADDR_EXP 31
7152: PUSH
7153: LD_INT 8
7155: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
7156: LD_ADDR_EXP 32
7160: PUSH
7161: LD_INT 10
7163: ST_TO_ADDR
// end ; if Difficulty = 2 then
7164: LD_OWVAR 67
7168: PUSH
7169: LD_INT 2
7171: EQUAL
7172: IFFALSE 7266
// begin RuSolMinLevel = 9 ;
7174: LD_ADDR_EXP 31
7178: PUSH
7179: LD_INT 9
7181: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
7182: LD_ADDR_EXP 32
7186: PUSH
7187: LD_INT 10
7189: ST_TO_ADDR
// uc_nation = 3 ;
7190: LD_ADDR_OWVAR 21
7194: PUSH
7195: LD_INT 3
7197: ST_TO_ADDR
// uc_side = 3 ;
7198: LD_ADDR_OWVAR 20
7202: PUSH
7203: LD_INT 3
7205: ST_TO_ADDR
// bc_level = 10 ;
7206: LD_ADDR_OWVAR 43
7210: PUSH
7211: LD_INT 10
7213: ST_TO_ADDR
// bc_type = b_turret ;
7214: LD_ADDR_OWVAR 42
7218: PUSH
7219: LD_INT 33
7221: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
7222: LD_ADDR_VAR 0 2
7226: PUSH
7227: LD_INT 86
7229: PPUSH
7230: LD_INT 34
7232: PPUSH
7233: LD_INT 2
7235: PPUSH
7236: CALL_OW 47
7240: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
7241: LD_VAR 0 2
7245: PPUSH
7246: LD_INT 49
7248: PPUSH
7249: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
7253: LD_INT 64
7255: PPUSH
7256: LD_INT 3
7258: PPUSH
7259: LD_INT 1
7261: PPUSH
7262: CALL_OW 322
// end ; if Difficulty = 3 then
7266: LD_OWVAR 67
7270: PUSH
7271: LD_INT 3
7273: EQUAL
7274: IFFALSE 7412
// begin RuSolMinLevel = 10 ;
7276: LD_ADDR_EXP 31
7280: PUSH
7281: LD_INT 10
7283: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
7284: LD_ADDR_EXP 32
7288: PUSH
7289: LD_INT 10
7291: ST_TO_ADDR
// uc_nation = 3 ;
7292: LD_ADDR_OWVAR 21
7296: PUSH
7297: LD_INT 3
7299: ST_TO_ADDR
// uc_side = 3 ;
7300: LD_ADDR_OWVAR 20
7304: PUSH
7305: LD_INT 3
7307: ST_TO_ADDR
// bc_level = 10 ;
7308: LD_ADDR_OWVAR 43
7312: PUSH
7313: LD_INT 10
7315: ST_TO_ADDR
// bc_type = b_turret ;
7316: LD_ADDR_OWVAR 42
7320: PUSH
7321: LD_INT 33
7323: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
7324: LD_ADDR_VAR 0 2
7328: PUSH
7329: LD_INT 86
7331: PPUSH
7332: LD_INT 34
7334: PPUSH
7335: LD_INT 2
7337: PPUSH
7338: CALL_OW 47
7342: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
7343: LD_VAR 0 2
7347: PPUSH
7348: LD_INT 49
7350: PPUSH
7351: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
7355: LD_ADDR_VAR 0 2
7359: PUSH
7360: LD_INT 93
7362: PPUSH
7363: LD_INT 31
7365: PPUSH
7366: LD_INT 2
7368: PPUSH
7369: CALL_OW 47
7373: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
7374: LD_VAR 0 2
7378: PPUSH
7379: LD_INT 49
7381: PPUSH
7382: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
7386: LD_INT 64
7388: PPUSH
7389: LD_INT 3
7391: PPUSH
7392: LD_INT 1
7394: PPUSH
7395: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
7399: LD_INT 65
7401: PPUSH
7402: LD_INT 3
7404: PPUSH
7405: LD_INT 1
7407: PPUSH
7408: CALL_OW 322
// end ; end ;
7412: LD_VAR 0 1
7416: RET
// export function ShowQuery1 ; begin
7417: LD_INT 0
7419: PPUSH
// case query ( Q1 ) of 1 :
7420: LD_STRING Q1
7422: PPUSH
7423: CALL_OW 97
7427: PUSH
7428: LD_INT 1
7430: DOUBLE
7431: EQUAL
7432: IFTRUE 7436
7434: GO 7447
7436: POP
// result = 1 ; 2 :
7437: LD_ADDR_VAR 0 1
7441: PUSH
7442: LD_INT 1
7444: ST_TO_ADDR
7445: GO 7486
7447: LD_INT 2
7449: DOUBLE
7450: EQUAL
7451: IFTRUE 7455
7453: GO 7466
7455: POP
// result = 2 ; 3 :
7456: LD_ADDR_VAR 0 1
7460: PUSH
7461: LD_INT 2
7463: ST_TO_ADDR
7464: GO 7486
7466: LD_INT 3
7468: DOUBLE
7469: EQUAL
7470: IFTRUE 7474
7472: GO 7485
7474: POP
// result = 3 ; end ;
7475: LD_ADDR_VAR 0 1
7479: PUSH
7480: LD_INT 3
7482: ST_TO_ADDR
7483: GO 7486
7485: POP
// end ;
7486: LD_VAR 0 1
7490: RET
// export function ShowQuery2 ; begin
7491: LD_INT 0
7493: PPUSH
// case query ( Q1a ) of 1 :
7494: LD_STRING Q1a
7496: PPUSH
7497: CALL_OW 97
7501: PUSH
7502: LD_INT 1
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7521
7510: POP
// result = 1 ; 2 :
7511: LD_ADDR_VAR 0 1
7515: PUSH
7516: LD_INT 1
7518: ST_TO_ADDR
7519: GO 7560
7521: LD_INT 2
7523: DOUBLE
7524: EQUAL
7525: IFTRUE 7529
7527: GO 7540
7529: POP
// result = 2 ; 3 :
7530: LD_ADDR_VAR 0 1
7534: PUSH
7535: LD_INT 2
7537: ST_TO_ADDR
7538: GO 7560
7540: LD_INT 3
7542: DOUBLE
7543: EQUAL
7544: IFTRUE 7548
7546: GO 7559
7548: POP
// result = 3 ; end ;
7549: LD_ADDR_VAR 0 1
7553: PUSH
7554: LD_INT 3
7556: ST_TO_ADDR
7557: GO 7560
7559: POP
// end ;
7560: LD_VAR 0 1
7564: RET
// export function ShowQuery3 ; begin
7565: LD_INT 0
7567: PPUSH
// case query ( Q2 ) of 1 :
7568: LD_STRING Q2
7570: PPUSH
7571: CALL_OW 97
7575: PUSH
7576: LD_INT 1
7578: DOUBLE
7579: EQUAL
7580: IFTRUE 7584
7582: GO 7595
7584: POP
// result = 1 ; 2 :
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
7593: GO 7653
7595: LD_INT 2
7597: DOUBLE
7598: EQUAL
7599: IFTRUE 7603
7601: GO 7614
7603: POP
// result = 2 ; 3 :
7604: LD_ADDR_VAR 0 1
7608: PUSH
7609: LD_INT 2
7611: ST_TO_ADDR
7612: GO 7653
7614: LD_INT 3
7616: DOUBLE
7617: EQUAL
7618: IFTRUE 7622
7620: GO 7633
7622: POP
// result = 3 ; 4 :
7623: LD_ADDR_VAR 0 1
7627: PUSH
7628: LD_INT 3
7630: ST_TO_ADDR
7631: GO 7653
7633: LD_INT 4
7635: DOUBLE
7636: EQUAL
7637: IFTRUE 7641
7639: GO 7652
7641: POP
// result = 4 ; end ;
7642: LD_ADDR_VAR 0 1
7646: PUSH
7647: LD_INT 4
7649: ST_TO_ADDR
7650: GO 7653
7652: POP
// end ;
7653: LD_VAR 0 1
7657: RET
// export function ShowQuery4 ; begin
7658: LD_INT 0
7660: PPUSH
// case query ( Q2K ) of 1 :
7661: LD_STRING Q2K
7663: PPUSH
7664: CALL_OW 97
7668: PUSH
7669: LD_INT 1
7671: DOUBLE
7672: EQUAL
7673: IFTRUE 7677
7675: GO 7688
7677: POP
// result = 1 ; 2 :
7678: LD_ADDR_VAR 0 1
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
7686: GO 7746
7688: LD_INT 2
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7707
7696: POP
// result = 2 ; 3 :
7697: LD_ADDR_VAR 0 1
7701: PUSH
7702: LD_INT 2
7704: ST_TO_ADDR
7705: GO 7746
7707: LD_INT 3
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7726
7715: POP
// result = 3 ; 4 :
7716: LD_ADDR_VAR 0 1
7720: PUSH
7721: LD_INT 3
7723: ST_TO_ADDR
7724: GO 7746
7726: LD_INT 4
7728: DOUBLE
7729: EQUAL
7730: IFTRUE 7734
7732: GO 7745
7734: POP
// result = 4 ; end ;
7735: LD_ADDR_VAR 0 1
7739: PUSH
7740: LD_INT 4
7742: ST_TO_ADDR
7743: GO 7746
7745: POP
// end ;
7746: LD_VAR 0 1
7750: RET
// export function ShowQuery5 ; begin
7751: LD_INT 0
7753: PPUSH
// case query ( Q2a ) of 1 :
7754: LD_STRING Q2a
7756: PPUSH
7757: CALL_OW 97
7761: PUSH
7762: LD_INT 1
7764: DOUBLE
7765: EQUAL
7766: IFTRUE 7770
7768: GO 7781
7770: POP
// result = 1 ; 2 :
7771: LD_ADDR_VAR 0 1
7775: PUSH
7776: LD_INT 1
7778: ST_TO_ADDR
7779: GO 7839
7781: LD_INT 2
7783: DOUBLE
7784: EQUAL
7785: IFTRUE 7789
7787: GO 7800
7789: POP
// result = 2 ; 3 :
7790: LD_ADDR_VAR 0 1
7794: PUSH
7795: LD_INT 2
7797: ST_TO_ADDR
7798: GO 7839
7800: LD_INT 3
7802: DOUBLE
7803: EQUAL
7804: IFTRUE 7808
7806: GO 7819
7808: POP
// result = 3 ; 4 :
7809: LD_ADDR_VAR 0 1
7813: PUSH
7814: LD_INT 3
7816: ST_TO_ADDR
7817: GO 7839
7819: LD_INT 4
7821: DOUBLE
7822: EQUAL
7823: IFTRUE 7827
7825: GO 7838
7827: POP
// result = 4 ; end ;
7828: LD_ADDR_VAR 0 1
7832: PUSH
7833: LD_INT 4
7835: ST_TO_ADDR
7836: GO 7839
7838: POP
// end ;
7839: LD_VAR 0 1
7843: RET
// export function ShowQuery6 ; begin
7844: LD_INT 0
7846: PPUSH
// case query ( Q2aK ) of 1 :
7847: LD_STRING Q2aK
7849: PPUSH
7850: CALL_OW 97
7854: PUSH
7855: LD_INT 1
7857: DOUBLE
7858: EQUAL
7859: IFTRUE 7863
7861: GO 7874
7863: POP
// result = 1 ; 2 :
7864: LD_ADDR_VAR 0 1
7868: PUSH
7869: LD_INT 1
7871: ST_TO_ADDR
7872: GO 7932
7874: LD_INT 2
7876: DOUBLE
7877: EQUAL
7878: IFTRUE 7882
7880: GO 7893
7882: POP
// result = 2 ; 3 :
7883: LD_ADDR_VAR 0 1
7887: PUSH
7888: LD_INT 2
7890: ST_TO_ADDR
7891: GO 7932
7893: LD_INT 3
7895: DOUBLE
7896: EQUAL
7897: IFTRUE 7901
7899: GO 7912
7901: POP
// result = 3 ; 4 :
7902: LD_ADDR_VAR 0 1
7906: PUSH
7907: LD_INT 3
7909: ST_TO_ADDR
7910: GO 7932
7912: LD_INT 4
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 7931
7920: POP
// result = 4 ; end ;
7921: LD_ADDR_VAR 0 1
7925: PUSH
7926: LD_INT 4
7928: ST_TO_ADDR
7929: GO 7932
7931: POP
// end ;
7932: LD_VAR 0 1
7936: RET
// export function ShowQuery7 ; begin
7937: LD_INT 0
7939: PPUSH
// case query ( Q2b ) of 1 :
7940: LD_STRING Q2b
7942: PPUSH
7943: CALL_OW 97
7947: PUSH
7948: LD_INT 1
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 7967
7956: POP
// result = 1 ; 2 :
7957: LD_ADDR_VAR 0 1
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
7965: GO 8006
7967: LD_INT 2
7969: DOUBLE
7970: EQUAL
7971: IFTRUE 7975
7973: GO 7986
7975: POP
// result = 2 ; 3 :
7976: LD_ADDR_VAR 0 1
7980: PUSH
7981: LD_INT 2
7983: ST_TO_ADDR
7984: GO 8006
7986: LD_INT 3
7988: DOUBLE
7989: EQUAL
7990: IFTRUE 7994
7992: GO 8005
7994: POP
// result = 3 ; end ;
7995: LD_ADDR_VAR 0 1
7999: PUSH
8000: LD_INT 3
8002: ST_TO_ADDR
8003: GO 8006
8005: POP
// end ;
8006: LD_VAR 0 1
8010: RET
// export function ShowQuery8 ; begin
8011: LD_INT 0
8013: PPUSH
// case query ( Q2c ) of 1 :
8014: LD_STRING Q2c
8016: PPUSH
8017: CALL_OW 97
8021: PUSH
8022: LD_INT 1
8024: DOUBLE
8025: EQUAL
8026: IFTRUE 8030
8028: GO 8041
8030: POP
// result = 1 ; 2 :
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
8039: GO 8061
8041: LD_INT 2
8043: DOUBLE
8044: EQUAL
8045: IFTRUE 8049
8047: GO 8060
8049: POP
// result = 2 ; end ;
8050: LD_ADDR_VAR 0 1
8054: PUSH
8055: LD_INT 2
8057: ST_TO_ADDR
8058: GO 8061
8060: POP
// end ;
8061: LD_VAR 0 1
8065: RET
// export function ShowQuery9 ; begin
8066: LD_INT 0
8068: PPUSH
// case query ( Q2cK ) of 1 :
8069: LD_STRING Q2cK
8071: PPUSH
8072: CALL_OW 97
8076: PUSH
8077: LD_INT 1
8079: DOUBLE
8080: EQUAL
8081: IFTRUE 8085
8083: GO 8096
8085: POP
// result = 1 ; 2 :
8086: LD_ADDR_VAR 0 1
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
8094: GO 8116
8096: LD_INT 2
8098: DOUBLE
8099: EQUAL
8100: IFTRUE 8104
8102: GO 8115
8104: POP
// result = 2 ; end ;
8105: LD_ADDR_VAR 0 1
8109: PUSH
8110: LD_INT 2
8112: ST_TO_ADDR
8113: GO 8116
8115: POP
// end ;
8116: LD_VAR 0 1
8120: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
8121: LD_INT 0
8123: PPUSH
8124: PPUSH
8125: PPUSH
8126: PPUSH
8127: PPUSH
// for i = 1 to count do
8128: LD_ADDR_VAR 0 8
8132: PUSH
8133: DOUBLE
8134: LD_INT 1
8136: DEC
8137: ST_TO_ADDR
8138: LD_VAR 0 6
8142: PUSH
8143: FOR_TO
8144: IFFALSE 8225
// begin uc_side = side ;
8146: LD_ADDR_OWVAR 20
8150: PUSH
8151: LD_VAR 0 1
8155: ST_TO_ADDR
// uc_nation = nation ;
8156: LD_ADDR_OWVAR 21
8160: PUSH
8161: LD_VAR 0 2
8165: ST_TO_ADDR
// hc_gallery =  ;
8166: LD_ADDR_OWVAR 33
8170: PUSH
8171: LD_STRING 
8173: ST_TO_ADDR
// hc_name =  ;
8174: LD_ADDR_OWVAR 26
8178: PUSH
8179: LD_STRING 
8181: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8182: LD_INT 0
8184: PPUSH
8185: LD_VAR 0 5
8189: PPUSH
8190: LD_VAR 0 4
8194: PPUSH
8195: CALL_OW 380
// un = CreateHuman ;
8199: LD_ADDR_VAR 0 10
8203: PUSH
8204: CALL_OW 44
8208: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8209: LD_VAR 0 10
8213: PPUSH
8214: LD_VAR 0 3
8218: PPUSH
8219: CALL_OW 52
// end ;
8223: GO 8143
8225: POP
8226: POP
// end ;
8227: LD_VAR 0 7
8231: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
8232: LD_INT 0
8234: PPUSH
8235: PPUSH
8236: PPUSH
8237: PPUSH
// for i = 1 to 72 do
8238: LD_ADDR_VAR 0 5
8242: PUSH
8243: DOUBLE
8244: LD_INT 1
8246: DEC
8247: ST_TO_ADDR
8248: LD_INT 72
8250: PUSH
8251: FOR_TO
8252: IFFALSE 8310
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
8254: LD_VAR 0 5
8258: PPUSH
8259: LD_VAR 0 1
8263: PPUSH
8264: CALL_OW 321
8268: PUSH
8269: LD_INT 1
8271: EQUAL
8272: PUSH
8273: LD_VAR 0 5
8277: PPUSH
8278: LD_VAR 0 3
8282: PPUSH
8283: CALL_OW 482
8287: PUSH
8288: LD_INT 1
8290: EQUAL
8291: AND
8292: IFFALSE 8308
// AddComResearch ( lab , i ) ;
8294: LD_VAR 0 2
8298: PPUSH
8299: LD_VAR 0 5
8303: PPUSH
8304: CALL_OW 184
8308: GO 8251
8310: POP
8311: POP
// end ;
8312: LD_VAR 0 4
8316: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8317: LD_INT 0
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8325: LD_ADDR_VAR 0 8
8329: PUSH
8330: LD_VAR 0 2
8334: PPUSH
8335: CALL_OW 313
8339: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8340: LD_ADDR_VAR 0 9
8344: PUSH
8345: LD_VAR 0 3
8349: PPUSH
8350: LD_INT 22
8352: PUSH
8353: LD_VAR 0 1
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 25
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PUSH
8372: LD_INT 24
8374: PUSH
8375: LD_INT 750
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 3
8384: PUSH
8385: LD_INT 54
8387: PUSH
8388: EMPTY
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: PPUSH
8401: CALL_OW 70
8405: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8406: LD_ADDR_VAR 0 6
8410: PUSH
8411: LD_VAR 0 3
8415: PPUSH
8416: LD_INT 22
8418: PUSH
8419: LD_VAR 0 1
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 3
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 3
8440: PUSH
8441: LD_INT 24
8443: PUSH
8444: LD_INT 1000
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: EMPTY
8461: LIST
8462: PPUSH
8463: CALL_OW 70
8467: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8468: LD_VAR 0 6
8472: NOT
8473: PUSH
8474: LD_INT 22
8476: PUSH
8477: LD_VAR 0 1
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 25
8488: PUSH
8489: LD_INT 2
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 24
8498: PUSH
8499: LD_INT 250
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: PPUSH
8511: CALL_OW 69
8515: NOT
8516: AND
8517: IFFALSE 8521
// exit ;
8519: GO 8703
// if buildings_list > 0 and engineerOkInside then
8521: LD_VAR 0 6
8525: PUSH
8526: LD_INT 0
8528: GREATER
8529: PUSH
8530: LD_VAR 0 8
8534: AND
8535: IFFALSE 8546
// ComExitBuilding ( engineerOkInside ) ;
8537: LD_VAR 0 8
8541: PPUSH
8542: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8546: LD_VAR 0 6
8550: PUSH
8551: LD_INT 0
8553: GREATER
8554: PUSH
8555: LD_VAR 0 9
8559: PUSH
8560: LD_INT 0
8562: GREATER
8563: AND
8564: IFFALSE 8584
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8566: LD_VAR 0 9
8570: PPUSH
8571: LD_VAR 0 6
8575: PUSH
8576: LD_INT 1
8578: ARRAY
8579: PPUSH
8580: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8584: LD_VAR 0 6
8588: PUSH
8589: LD_INT 0
8591: EQUAL
8592: PUSH
8593: LD_VAR 0 4
8597: PUSH
8598: LD_INT 0
8600: EQUAL
8601: AND
8602: PUSH
8603: LD_VAR 0 9
8607: PUSH
8608: LD_INT 0
8610: GREATER
8611: AND
8612: IFFALSE 8628
// ComEnterUnit ( engineerOkOutside , building ) ;
8614: LD_VAR 0 9
8618: PPUSH
8619: LD_VAR 0 2
8623: PPUSH
8624: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8628: LD_VAR 0 9
8632: PUSH
8633: LD_INT 0
8635: GREATER
8636: PUSH
8637: LD_VAR 0 6
8641: PUSH
8642: LD_INT 0
8644: EQUAL
8645: AND
8646: PUSH
8647: LD_VAR 0 4
8651: PUSH
8652: LD_INT 0
8654: GREATER
8655: AND
8656: IFFALSE 8703
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8658: LD_VAR 0 9
8662: PPUSH
8663: LD_VAR 0 4
8667: PUSH
8668: LD_INT 1
8670: ARRAY
8671: PPUSH
8672: LD_VAR 0 4
8676: PUSH
8677: LD_INT 2
8679: ARRAY
8680: PPUSH
8681: LD_VAR 0 4
8685: PUSH
8686: LD_INT 3
8688: ARRAY
8689: PPUSH
8690: LD_VAR 0 4
8694: PUSH
8695: LD_INT 4
8697: ARRAY
8698: PPUSH
8699: CALL_OW 145
// end ;
8703: LD_VAR 0 5
8707: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8708: LD_INT 0
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
8714: PPUSH
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
8719: LD_ADDR_VAR 0 6
8723: PUSH
8724: LD_INT 22
8726: PUSH
8727: LD_VAR 0 1
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 4
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 24
8748: PUSH
8749: LD_INT 251
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 69
8765: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_VAR 0 3
8775: PPUSH
8776: LD_INT 22
8778: PUSH
8779: LD_VAR 0 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 25
8790: PUSH
8791: LD_INT 4
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 50
8800: PUSH
8801: EMPTY
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PPUSH
8809: CALL_OW 70
8813: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8814: LD_ADDR_VAR 0 10
8818: PUSH
8819: LD_VAR 0 3
8823: PPUSH
8824: LD_INT 22
8826: PUSH
8827: LD_VAR 0 1
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 21
8838: PUSH
8839: LD_INT 1
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 3
8848: PUSH
8849: LD_INT 24
8851: PUSH
8852: LD_INT 750
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: PPUSH
8868: CALL_OW 70
8872: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8873: LD_ADDR_VAR 0 11
8877: PUSH
8878: LD_VAR 0 2
8882: PPUSH
8883: LD_INT 22
8885: PUSH
8886: LD_VAR 0 1
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 21
8897: PUSH
8898: LD_INT 1
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: LD_INT 24
8910: PUSH
8911: LD_INT 1000
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 70
8931: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
8932: LD_VAR 0 10
8936: PUSH
8937: LD_INT 0
8939: GREATER
8940: PUSH
8941: LD_VAR 0 6
8945: PUSH
8946: LD_INT 0
8948: GREATER
8949: AND
8950: IFFALSE 8966
// ComMoveToArea ( damageUnits , healArea ) ;
8952: LD_VAR 0 10
8956: PPUSH
8957: LD_VAR 0 2
8961: PPUSH
8962: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8966: LD_VAR 0 11
8970: PUSH
8971: LD_INT 0
8973: GREATER
8974: PUSH
8975: LD_VAR 0 6
8979: PUSH
8980: LD_INT 0
8982: GREATER
8983: AND
8984: IFFALSE 9000
// ComExitBuilding ( UnitsInside ( build ) ) ;
8986: LD_VAR 0 4
8990: PPUSH
8991: CALL_OW 313
8995: PPUSH
8996: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9000: LD_VAR 0 11
9004: PUSH
9005: LD_INT 0
9007: GREATER
9008: PUSH
9009: LD_VAR 0 7
9013: PUSH
9014: LD_INT 0
9016: GREATER
9017: AND
9018: IFFALSE 9038
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9020: LD_VAR 0 7
9024: PPUSH
9025: LD_VAR 0 11
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PPUSH
9034: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9038: LD_VAR 0 10
9042: PUSH
9043: LD_INT 0
9045: EQUAL
9046: PUSH
9047: LD_VAR 0 11
9051: PUSH
9052: LD_INT 0
9054: EQUAL
9055: AND
9056: PUSH
9057: LD_VAR 0 7
9061: PUSH
9062: LD_INT 0
9064: GREATER
9065: AND
9066: IFFALSE 9171
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9068: LD_ADDR_VAR 0 12
9072: PUSH
9073: LD_INT 22
9075: PUSH
9076: LD_VAR 0 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 21
9087: PUSH
9088: LD_INT 3
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 30
9097: PUSH
9098: LD_INT 8
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: PPUSH
9110: CALL_OW 69
9114: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9115: LD_ADDR_VAR 0 13
9119: PUSH
9120: LD_INT 1
9122: PPUSH
9123: LD_VAR 0 12
9127: PPUSH
9128: CALL_OW 12
9132: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9133: LD_VAR 0 7
9137: PPUSH
9138: LD_INT 3
9140: PUSH
9141: LD_INT 60
9143: PUSH
9144: EMPTY
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PPUSH
9151: CALL_OW 72
9155: PPUSH
9156: LD_VAR 0 12
9160: PUSH
9161: LD_VAR 0 13
9165: ARRAY
9166: PPUSH
9167: CALL_OW 120
// end ; end ;
9171: LD_VAR 0 5
9175: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9180: LD_INT 22
9182: PUSH
9183: LD_VAR 0 1
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: LD_INT 21
9194: PUSH
9195: LD_INT 2
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 69
9210: PUSH
9211: LD_INT 18
9213: PPUSH
9214: LD_INT 22
9216: PUSH
9217: LD_VAR 0 1
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PPUSH
9240: CALL_OW 70
9244: PUSH
9245: LD_VAR 0 3
9249: LESSEQUAL
9250: DIFF
9251: IFFALSE 9318
// for i = 1 to vehCount do
9253: LD_ADDR_VAR 0 9
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_VAR 0 3
9267: PUSH
9268: FOR_TO
9269: IFFALSE 9316
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9271: LD_VAR 0 2
9275: PPUSH
9276: LD_VAR 0 7
9280: PPUSH
9281: LD_VAR 0 5
9285: PPUSH
9286: LD_VAR 0 6
9290: PPUSH
9291: LD_VAR 0 4
9295: PUSH
9296: LD_INT 1
9298: PPUSH
9299: LD_VAR 0 4
9303: PPUSH
9304: CALL_OW 12
9308: ARRAY
9309: PPUSH
9310: CALL_OW 185
9314: GO 9268
9316: POP
9317: POP
// end ;
9318: LD_VAR 0 8
9322: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
9323: LD_INT 0
9325: PPUSH
9326: PPUSH
9327: PPUSH
9328: PPUSH
9329: PPUSH
9330: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 3 , 4 , 4 ] [ Difficulty ] then
9331: LD_EXP 34
9335: PUSH
9336: LD_INT 3
9338: PUSH
9339: LD_INT 4
9341: PUSH
9342: LD_INT 4
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: LD_OWVAR 67
9354: ARRAY
9355: GREATEREQUAL
9356: PUSH
9357: LD_EXP 35
9361: PUSH
9362: LD_INT 3
9364: PUSH
9365: LD_INT 4
9367: PUSH
9368: LD_INT 4
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: LIST
9375: PUSH
9376: LD_OWVAR 67
9380: ARRAY
9381: GREATEREQUAL
9382: AND
9383: IFFALSE 9616
// repeat wait ( 0 0$1 ) ;
9385: LD_INT 35
9387: PPUSH
9388: CALL_OW 67
// for j in russianTanks do
9392: LD_ADDR_VAR 0 4
9396: PUSH
9397: LD_EXP 34
9401: PUSH
9402: FOR_IN
9403: IFFALSE 9604
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9405: LD_ADDR_VAR 0 6
9409: PUSH
9410: LD_INT 81
9412: PUSH
9413: LD_VAR 0 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 101
9424: PUSH
9425: LD_INT 1
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PPUSH
9436: CALL_OW 69
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: CALL_OW 74
9450: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9451: LD_ADDR_VAR 0 7
9455: PUSH
9456: LD_INT 81
9458: PUSH
9459: LD_VAR 0 1
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 101
9470: PUSH
9471: LD_INT 1
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 2
9480: PUSH
9481: LD_INT 59
9483: PUSH
9484: EMPTY
9485: LIST
9486: PUSH
9487: LD_INT 21
9489: PUSH
9490: LD_INT 1
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 21
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: EMPTY
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PPUSH
9526: LD_VAR 0 4
9530: PPUSH
9531: CALL_OW 74
9535: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9536: LD_VAR 0 4
9540: PPUSH
9541: LD_VAR 0 6
9545: PPUSH
9546: CALL_OW 296
9550: PUSH
9551: LD_INT 8
9553: PLUS
9554: PUSH
9555: LD_VAR 0 4
9559: PPUSH
9560: LD_VAR 0 7
9564: PPUSH
9565: CALL_OW 296
9569: LESS
9570: IFFALSE 9588
// ComAttackUnit ( j , target1 ) else
9572: LD_VAR 0 4
9576: PPUSH
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 115
9586: GO 9602
// ComAttackUnit ( j , target2 ) ;
9588: LD_VAR 0 4
9592: PPUSH
9593: LD_VAR 0 7
9597: PPUSH
9598: CALL_OW 115
// end ;
9602: GO 9402
9604: POP
9605: POP
// until russianTanks = 0 ;
9606: LD_EXP 34
9610: PUSH
9611: LD_INT 0
9613: EQUAL
9614: IFFALSE 9385
// end ;
9616: LD_VAR 0 2
9620: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
9625: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 3 , 4 , 4 ] [ Difficulty ] then
9626: LD_EXP 34
9630: PUSH
9631: LD_INT 3
9633: PUSH
9634: LD_INT 4
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_OWVAR 67
9649: ARRAY
9650: GREATEREQUAL
9651: PUSH
9652: LD_EXP 35
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 4
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: PUSH
9671: LD_OWVAR 67
9675: ARRAY
9676: GREATEREQUAL
9677: AND
9678: IFFALSE 9827
// repeat wait ( 0 0$1 ) ;
9680: LD_INT 35
9682: PPUSH
9683: CALL_OW 67
// display_strings = [ ok1 ] ;
9687: LD_ADDR_OWVAR 47
9691: PUSH
9692: LD_STRING ok1
9694: PUSH
9695: EMPTY
9696: LIST
9697: ST_TO_ADDR
// if russianTimeLapsers > 0 then
9698: LD_EXP 35
9702: PUSH
9703: LD_INT 0
9705: GREATER
9706: IFFALSE 9817
// for j in russianTimeLapsers do
9708: LD_ADDR_VAR 0 3
9712: PUSH
9713: LD_EXP 35
9717: PUSH
9718: FOR_IN
9719: IFFALSE 9815
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9721: LD_ADDR_VAR 0 4
9725: PUSH
9726: LD_INT 81
9728: PUSH
9729: LD_VAR 0 1
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 101
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 69
9756: PPUSH
9757: LD_VAR 0 3
9761: PPUSH
9762: CALL_OW 74
9766: ST_TO_ADDR
// display_strings = [ ok2 , nearUnit ] ;
9767: LD_ADDR_OWVAR 47
9771: PUSH
9772: LD_STRING ok2
9774: PUSH
9775: LD_VAR 0 4
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_VAR 0 4
9793: PPUSH
9794: CALL_OW 250
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 251
9808: PPUSH
9809: CALL_OW 111
// end ;
9813: GO 9718
9815: POP
9816: POP
// until russianTimeLapsers = 0 ;
9817: LD_EXP 35
9821: PUSH
9822: LD_INT 0
9824: EQUAL
9825: IFFALSE 9680
// end ; end_of_file
9827: LD_VAR 0 2
9831: RET
// on UnitDestroyed ( unit ) do var i ;
9832: LD_INT 0
9834: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9835: LD_VAR 0 1
9839: PPUSH
9840: CALL_OW 255
9844: PUSH
9845: LD_INT 3
9847: EQUAL
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 247
9858: PUSH
9859: LD_INT 1
9861: EQUAL
9862: AND
9863: IFFALSE 9927
// begin for i in RuScientists do
9865: LD_ADDR_VAR 0 2
9869: PUSH
9870: LD_EXP 29
9874: PUSH
9875: FOR_IN
9876: IFFALSE 9925
// if i = unit then
9878: LD_VAR 0 2
9882: PUSH
9883: LD_VAR 0 1
9887: EQUAL
9888: IFFALSE 9923
// begin RuScientists = RuScientists diff [ unit ] ;
9890: LD_ADDR_EXP 29
9894: PUSH
9895: LD_EXP 29
9899: PUSH
9900: LD_VAR 0 1
9904: PUSH
9905: EMPTY
9906: LIST
9907: DIFF
9908: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
9909: LD_ADDR_EXP 30
9913: PUSH
9914: LD_EXP 30
9918: PUSH
9919: LD_INT 1
9921: PLUS
9922: ST_TO_ADDR
// end ;
9923: GO 9875
9925: POP
9926: POP
// end ; end ;
9927: PPOPN 2
9929: END
// on EnterBuilding ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_INT 10
9937: EQUAL
9938: PUSH
9939: LD_VAR 0 2
9943: PPUSH
9944: CALL_OW 255
9948: PUSH
9949: LD_INT 1
9951: EQUAL
9952: AND
9953: PUSH
9954: LD_EXP 36
9958: PUSH
9959: LD_INT 0
9961: EQUAL
9962: AND
9963: IFFALSE 10066
// begin eventVar1 = 1 ;
9965: LD_ADDR_EXP 36
9969: PUSH
9970: LD_INT 1
9972: ST_TO_ADDR
// teleportExplored = 1 ;
9973: LD_ADDR_EXP 28
9977: PUSH
9978: LD_INT 1
9980: ST_TO_ADDR
// wait ( 0 0$2 ) ;
9981: LD_INT 70
9983: PPUSH
9984: CALL_OW 67
// DialogueOn ;
9988: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] diff [ JMM ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
9992: LD_INT 22
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_EXP 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: DIFF
10010: PUSH
10011: EMPTY
10012: LIST
10013: PPUSH
10014: CALL_OW 69
10018: PPUSH
10019: LD_STRING DT3a-Sol1-1
10021: PPUSH
10022: LD_STRING DT3a-FSol1-1
10024: PPUSH
10025: CALL 6978 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
10029: LD_EXP 1
10033: PPUSH
10034: LD_STRING DT3a-JMM-1
10036: PPUSH
10037: CALL_OW 88
// CenterNowOnUnits ( human ) ;
10041: LD_VAR 0 2
10045: PPUSH
10046: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a1 ) ;
10050: LD_EXP 1
10054: PPUSH
10055: LD_STRING DT3a-JMM-1a1
10057: PPUSH
10058: CALL_OW 88
// DialogueOff ;
10062: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
10066: LD_VAR 0 1
10070: PUSH
10071: LD_INT 10
10073: EQUAL
10074: PUSH
10075: LD_VAR 0 2
10079: PPUSH
10080: CALL_OW 247
10084: PUSH
10085: LD_INT 2
10087: EQUAL
10088: AND
10089: PUSH
10090: LD_VAR 0 2
10094: PPUSH
10095: CALL_OW 255
10099: PUSH
10100: LD_INT 3
10102: EQUAL
10103: AND
10104: PUSH
10105: LD_EXP 24
10109: PUSH
10110: LD_INT 0
10112: EQUAL
10113: AND
10114: IFFALSE 10124
// vehicleTeleported = 1 ;
10116: LD_ADDR_EXP 24
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
10124: LD_VAR 0 1
10128: PUSH
10129: LD_INT 10
10131: EQUAL
10132: PUSH
10133: LD_VAR 0 2
10137: PPUSH
10138: CALL_OW 247
10142: PUSH
10143: LD_INT 2
10145: EQUAL
10146: AND
10147: PUSH
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL_OW 255
10157: PUSH
10158: LD_INT 3
10160: EQUAL
10161: AND
10162: PUSH
10163: LD_EXP 24
10167: PUSH
10168: LD_INT 2
10170: EQUAL
10171: AND
10172: IFFALSE 10182
// vehicleTeleported = 3 ;
10174: LD_ADDR_EXP 24
10178: PUSH
10179: LD_INT 3
10181: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 3 then
10182: LD_VAR 0 1
10186: PUSH
10187: LD_INT 10
10189: EQUAL
10190: PUSH
10191: LD_VAR 0 2
10195: PPUSH
10196: CALL_OW 247
10200: PUSH
10201: LD_INT 2
10203: EQUAL
10204: AND
10205: PUSH
10206: LD_VAR 0 2
10210: PPUSH
10211: CALL_OW 255
10215: PUSH
10216: LD_INT 3
10218: EQUAL
10219: AND
10220: PUSH
10221: LD_EXP 24
10225: PUSH
10226: LD_INT 3
10228: EQUAL
10229: AND
10230: IFFALSE 10240
// vehicleTeleported = 4 ;
10232: LD_ADDR_EXP 24
10236: PUSH
10237: LD_INT 4
10239: ST_TO_ADDR
// end ;
10240: PPOPN 2
10242: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
10243: LD_VAR 0 2
10247: PUSH
10248: LD_INT 21
10250: EQUAL
10251: PUSH
10252: LD_VAR 0 2
10256: PUSH
10257: LD_INT 112
10259: EQUAL
10260: OR
10261: IFFALSE 10370
// if GetSide ( vehicle ) = 3 then
10263: LD_VAR 0 1
10267: PPUSH
10268: CALL_OW 255
10272: PUSH
10273: LD_INT 3
10275: EQUAL
10276: IFFALSE 10370
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
10278: LD_VAR 0 1
10282: PPUSH
10283: CALL_OW 264
10287: PUSH
10288: LD_INT 46
10290: EQUAL
10291: PUSH
10292: LD_VAR 0 1
10296: PPUSH
10297: CALL_OW 264
10301: PUSH
10302: LD_INT 45
10304: EQUAL
10305: OR
10306: PUSH
10307: LD_VAR 0 1
10311: PPUSH
10312: CALL_OW 264
10316: PUSH
10317: LD_INT 44
10319: EQUAL
10320: OR
10321: IFFALSE 10339
// russianTanks = russianTanks ^ vehicle ;
10323: LD_ADDR_EXP 34
10327: PUSH
10328: LD_EXP 34
10332: PUSH
10333: LD_VAR 0 1
10337: ADD
10338: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 264
10348: PUSH
10349: LD_INT 49
10351: EQUAL
10352: IFFALSE 10370
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
10354: LD_ADDR_EXP 35
10358: PUSH
10359: LD_EXP 35
10363: PUSH
10364: LD_VAR 0 1
10368: ADD
10369: ST_TO_ADDR
// end ; end ;
10370: PPOPN 2
10372: END
// on UnitGoesToRed ( unit ) do var i ;
10373: LD_INT 0
10375: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
10376: LD_VAR 0 1
10380: PPUSH
10381: CALL_OW 255
10385: PUSH
10386: LD_INT 3
10388: EQUAL
10389: PUSH
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 247
10399: PUSH
10400: LD_INT 2
10402: EQUAL
10403: AND
10404: IFFALSE 10522
// begin if russianTanks > 0 then
10406: LD_EXP 34
10410: PUSH
10411: LD_INT 0
10413: GREATER
10414: IFFALSE 10464
// for i in russianTanks do
10416: LD_ADDR_VAR 0 2
10420: PUSH
10421: LD_EXP 34
10425: PUSH
10426: FOR_IN
10427: IFFALSE 10462
// if i = unit then
10429: LD_VAR 0 2
10433: PUSH
10434: LD_VAR 0 1
10438: EQUAL
10439: IFFALSE 10460
// russianTanks = russianTanks diff [ unit ] ;
10441: LD_ADDR_EXP 34
10445: PUSH
10446: LD_EXP 34
10450: PUSH
10451: LD_VAR 0 1
10455: PUSH
10456: EMPTY
10457: LIST
10458: DIFF
10459: ST_TO_ADDR
10460: GO 10426
10462: POP
10463: POP
// if russianTimeLapsers > 0 then
10464: LD_EXP 35
10468: PUSH
10469: LD_INT 0
10471: GREATER
10472: IFFALSE 10522
// for i in russianTimeLapsers do
10474: LD_ADDR_VAR 0 2
10478: PUSH
10479: LD_EXP 35
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10520
// if i = unit then
10487: LD_VAR 0 2
10491: PUSH
10492: LD_VAR 0 1
10496: EQUAL
10497: IFFALSE 10518
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
10499: LD_ADDR_EXP 35
10503: PUSH
10504: LD_EXP 35
10508: PUSH
10509: LD_VAR 0 1
10513: PUSH
10514: EMPTY
10515: LIST
10516: DIFF
10517: ST_TO_ADDR
10518: GO 10484
10520: POP
10521: POP
// end ; end ; end_of_file
10522: PPOPN 2
10524: END
// every 0 0$1 do
10525: GO 10527
10527: DISABLE
// begin enable ;
10528: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
10529: LD_INT 3
10531: PPUSH
10532: LD_INT 6
10534: PPUSH
10535: LD_INT 9
10537: PPUSH
10538: LD_EXP 33
10542: PPUSH
10543: CALL 8317 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
10547: LD_INT 3
10549: PPUSH
10550: LD_INT 4
10552: PPUSH
10553: LD_INT 10
10555: PPUSH
10556: LD_EXP 33
10560: PPUSH
10561: CALL 8317 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
10565: LD_INT 3
10567: PPUSH
10568: LD_INT 16
10570: PPUSH
10571: LD_INT 9
10573: PPUSH
10574: LD_INT 91
10576: PPUSH
10577: CALL 8708 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
10581: LD_INT 3
10583: PPUSH
10584: LD_INT 17
10586: PPUSH
10587: LD_INT 10
10589: PPUSH
10590: LD_INT 47
10592: PUSH
10593: LD_INT 129
10595: PUSH
10596: LD_INT 135
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL 8708 0 4
// AttackVehicles ( 3 ) ;
10608: LD_INT 3
10610: PPUSH
10611: CALL 9323 0 1
// end ;
10615: END
// every 0 0$1 do
10616: GO 10618
10618: DISABLE
// begin enable ;
10619: ENABLE
// TimeLapsersAI ( 3 ) ;
10620: LD_INT 3
10622: PPUSH
10623: CALL 9621 0 1
// end ;
10627: END
// every 0 0$1 do
10628: GO 10630
10630: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
10631: LD_INT 3
10633: PPUSH
10634: LD_INT 91
10636: PPUSH
10637: LD_INT 3
10639: PPUSH
10640: CALL 8232 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
10644: LD_INT 3
10646: PPUSH
10647: LD_INT 47
10649: PPUSH
10650: LD_INT 3
10652: PPUSH
10653: CALL 8232 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
10657: LD_INT 3
10659: PPUSH
10660: LD_INT 129
10662: PPUSH
10663: LD_INT 3
10665: PPUSH
10666: CALL 8232 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
10670: LD_INT 3
10672: PPUSH
10673: LD_INT 3
10675: PPUSH
10676: LD_INT 3
10678: PPUSH
10679: CALL 8232 0 3
// end ;
10683: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
10684: LD_EXP 23
10688: PUSH
10689: LD_INT 2
10691: EQUAL
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 21
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 50
10715: PUSH
10716: EMPTY
10717: LIST
10718: PUSH
10719: LD_INT 3
10721: PUSH
10722: LD_INT 58
10724: PUSH
10725: EMPTY
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: PPUSH
10738: CALL_OW 69
10742: PUSH
10743: LD_INT 18
10745: PPUSH
10746: LD_INT 22
10748: PUSH
10749: LD_INT 3
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 21
10758: PUSH
10759: LD_INT 2
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PPUSH
10770: CALL_OW 70
10774: PUSH
10775: LD_INT 0
10777: EQUAL
10778: DIFF
10779: AND
10780: IFFALSE 10907
10782: GO 10784
10784: DISABLE
// begin enable ;
10785: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 24 ) ;
10786: LD_INT 3
10788: PPUSH
10789: LD_INT 21
10791: PPUSH
10792: LD_INT 3
10794: PUSH
10795: LD_INT 4
10797: PUSH
10798: LD_INT 4
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: LD_OWVAR 67
10810: ARRAY
10811: PPUSH
10812: LD_INT 46
10814: PUSH
10815: LD_INT 45
10817: PUSH
10818: LD_INT 44
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: PPUSH
10826: LD_INT 3
10828: PPUSH
10829: LD_INT 1
10831: PUSH
10832: LD_INT 3
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 1
10841: PPUSH
10842: LD_INT 2
10844: PPUSH
10845: CALL_OW 12
10849: ARRAY
10850: PPUSH
10851: LD_INT 24
10853: PPUSH
10854: CALL 9176 0 7
// BuildingVehicle ( 3 , rufab2 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
10858: LD_INT 3
10860: PPUSH
10861: LD_INT 112
10863: PPUSH
10864: LD_INT 3
10866: PUSH
10867: LD_INT 4
10869: PUSH
10870: LD_INT 4
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: LD_OWVAR 67
10882: ARRAY
10883: PPUSH
10884: LD_INT 49
10886: PUSH
10887: LD_INT 49
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PPUSH
10894: LD_INT 3
10896: PPUSH
10897: LD_INT 3
10899: PPUSH
10900: LD_INT 24
10902: PPUSH
10903: CALL 9176 0 7
// end ; end_of_file
10907: END
// every 0 0$1 trigger RuScientists = [ ] do
10908: LD_EXP 29
10912: PUSH
10913: EMPTY
10914: EQUAL
10915: IFFALSE 11120
10917: GO 10919
10919: DISABLE
// begin if sciCounter = 0 then
10920: LD_EXP 30
10924: PUSH
10925: LD_INT 0
10927: EQUAL
10928: IFFALSE 10954
// begin Say ( JMM , D7a-JMM-1 ) ;
10930: LD_EXP 1
10934: PPUSH
10935: LD_STRING D7a-JMM-1
10937: PPUSH
10938: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
10942: LD_EXP 19
10946: PPUSH
10947: LD_STRING D7a-Pow-1
10949: PPUSH
10950: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
10954: LD_EXP 30
10958: PUSH
10959: LD_INT 0
10961: GREATER
10962: PUSH
10963: LD_EXP 30
10967: PUSH
10968: LD_INT 6
10970: LESS
10971: AND
10972: IFFALSE 10998
// begin Say ( JMM , D7b-JMM-1 ) ;
10974: LD_EXP 1
10978: PPUSH
10979: LD_STRING D7b-JMM-1
10981: PPUSH
10982: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
10986: LD_EXP 19
10990: PPUSH
10991: LD_STRING D7b-Pow-1
10993: PPUSH
10994: CALL_OW 94
// end ; if sciCounter = 6 then
10998: LD_EXP 30
11002: PUSH
11003: LD_INT 6
11005: EQUAL
11006: IFFALSE 11116
// begin Say ( JMM , D7c-JMM-1 ) ;
11008: LD_EXP 1
11012: PPUSH
11013: LD_STRING D7c-JMM-1
11015: PPUSH
11016: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
11020: LD_EXP 19
11024: PPUSH
11025: LD_STRING D7c-Pow-1
11027: PPUSH
11028: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
11032: LD_EXP 1
11036: PPUSH
11037: LD_STRING D7d-JMM-1
11039: PPUSH
11040: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
11044: LD_EXP 19
11048: PPUSH
11049: LD_STRING D7d-Pow-1
11051: PPUSH
11052: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
11056: LD_EXP 1
11060: PPUSH
11061: LD_STRING D7d-JMM-2
11063: PPUSH
11064: CALL_OW 88
// if askSiberite = 1 then
11068: LD_EXP 27
11072: PUSH
11073: LD_INT 1
11075: EQUAL
11076: IFFALSE 11092
// begin Say ( JMM , D7d-JMM-2a ) ;
11078: LD_EXP 1
11082: PPUSH
11083: LD_STRING D7d-JMM-2a
11085: PPUSH
11086: CALL_OW 88
// end else
11090: GO 11104
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
11092: LD_EXP 19
11096: PPUSH
11097: LD_STRING D7d-Pow-2
11099: PPUSH
11100: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
11104: LD_EXP 19
11108: PPUSH
11109: LD_STRING D7d-Pow-2a
11111: PPUSH
11112: CALL_OW 94
// end ; FinishMission ;
11116: CALL 11121 0 0
// end ;
11120: END
// export function FinishMission ; begin
11121: LD_INT 0
11123: PPUSH
// if teleportExplored = 1 then
11124: LD_EXP 28
11128: PUSH
11129: LD_INT 1
11131: EQUAL
11132: IFFALSE 11146
// AddMedal ( Teleport , 1 ) else
11134: LD_STRING Teleport
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: CALL_OW 101
11144: GO 11157
// AddMedal ( Teleport , - 1 ) ;
11146: LD_STRING Teleport
11148: PPUSH
11149: LD_INT 1
11151: NEG
11152: PPUSH
11153: CALL_OW 101
// if sciCounter > 0 and sciCounter < 6 then
11157: LD_EXP 30
11161: PUSH
11162: LD_INT 0
11164: GREATER
11165: PUSH
11166: LD_EXP 30
11170: PUSH
11171: LD_INT 6
11173: LESS
11174: AND
11175: IFFALSE 11189
// AddMedal ( Materials , 1 ) else
11177: LD_STRING Materials
11179: PPUSH
11180: LD_INT 1
11182: PPUSH
11183: CALL_OW 101
11187: GO 11200
// AddMedal ( Materials , - 1 ) ;
11189: LD_STRING Materials
11191: PPUSH
11192: LD_INT 1
11194: NEG
11195: PPUSH
11196: CALL_OW 101
// if sciCounter = 6 then
11200: LD_EXP 30
11204: PUSH
11205: LD_INT 6
11207: EQUAL
11208: IFFALSE 11222
// AddMedal ( Scientists , 1 ) else
11210: LD_STRING Scientists
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 101
11220: GO 11233
// AddMedal ( Scientists , - 1 ) ;
11222: LD_STRING Scientists
11224: PPUSH
11225: LD_INT 1
11227: NEG
11228: PPUSH
11229: CALL_OW 101
// GiveMedals ( MAIN ) ;
11233: LD_STRING MAIN
11235: PPUSH
11236: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
11240: LD_INT 22
11242: PUSH
11243: LD_INT 1
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 23
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 21
11262: PUSH
11263: LD_INT 1
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 1
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 25
11285: PUSH
11286: LD_INT 2
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 3
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 25
11305: PUSH
11306: LD_INT 4
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 25
11315: PUSH
11316: LD_INT 5
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 69
11341: PPUSH
11342: CALL_OW 43
// YouWin ;
11346: CALL_OW 103
// end ;
11350: LD_VAR 0 1
11354: RET
