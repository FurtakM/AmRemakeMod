// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export arabianMines ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 42
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// askSiberite = 0 ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// warWithLegion = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// fakeInfo = 0 ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// ruAI = 0 ;
 127: LD_ADDR_EXP 41
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// eventVar1 = 0 ;
 135: LD_ADDR_EXP 44
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// mission_prefix = 12_ ;
 143: LD_ADDR_EXP 43
 147: PUSH
 148: LD_STRING 12_
 150: ST_TO_ADDR
// debugMode = 0 ;
 151: LD_ADDR_EXP 45
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// PrepareDifficulty ;
 159: CALL 11941 0 0
// PrepareVehicles ;
 163: CALL 1415 0 0
// PrepareAmericansRandom ;
 167: CALL 1370 0 0
// PrepareAmericanHeroes ;
 171: CALL 509 0 0
// PrepareRussianCommander ;
 175: CALL 2953 0 0
// PrepareWestBase ;
 179: CALL 3465 0 0
// PrepareEastBase ;
 183: CALL 3025 0 0
// PrepareOtherRussians ;
 187: CALL 3577 0 0
// end ;
 191: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 192: LD_EXP 45
 196: PUSH
 197: LD_INT 1
 199: EQUAL
 200: IFFALSE 506
 202: GO 204
 204: DISABLE
 205: LD_INT 0
 207: PPUSH
// begin enable ;
 208: ENABLE
// fogoff ( true ) ;
 209: LD_INT 1
 211: PPUSH
 212: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: FOR_IN
 251: IFFALSE 267
// SetLives ( i , 1000 ) ;
 253: LD_VAR 0 1
 257: PPUSH
 258: LD_INT 1000
 260: PPUSH
 261: CALL_OW 234
 265: GO 250
 267: POP
 268: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 269: LD_ADDR_VAR 0 1
 273: PUSH
 274: LD_INT 22
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 2
 286: PUSH
 287: LD_INT 30
 289: PUSH
 290: LD_INT 0
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: LD_INT 30
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 346
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 274
 333: PPUSH
 334: LD_INT 1
 336: PPUSH
 337: LD_INT 9999
 339: PPUSH
 340: CALL_OW 277
 344: GO 321
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 2
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 3
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// end ; end_of_file
 506: PPOPN 1
 508: END
// export function PrepareAmericanHeroes ; begin
 509: LD_INT 0
 511: PPUSH
// uc_side = 1 ;
 512: LD_ADDR_OWVAR 20
 516: PUSH
 517: LD_INT 1
 519: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 520: LD_ADDR_EXP 14
 524: PUSH
 525: LD_STRING 11_others
 527: PPUSH
 528: CALL_OW 31
 532: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 533: LD_ADDR_EXP 14
 537: PUSH
 538: LD_EXP 14
 542: PUSH
 543: LD_STRING 11c_others
 545: PPUSH
 546: CALL_OW 31
 550: ADD
 551: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 552: LD_ADDR_EXP 1
 556: PUSH
 557: LD_STRING 11_JMM
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: CALL 11580 0 2
 567: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 568: LD_EXP 1
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 580: LD_EXP 1
 584: PPUSH
 585: LD_INT 22
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: PUSH
 595: LD_INT 21
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: PUSH
 605: LD_INT 58
 607: PUSH
 608: EMPTY
 609: LIST
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 69
 620: PUSH
 621: LD_INT 1
 623: ARRAY
 624: PPUSH
 625: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 629: LD_STRING 11_Lisa
 631: PPUSH
 632: CALL_OW 28
 636: PUSH
 637: LD_INT 1
 639: EQUAL
 640: IFFALSE 687
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_STRING 11_Lisa
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: CALL 11580 0 2
 657: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 658: LD_EXP 2
 662: PPUSH
 663: LD_INT 1
 665: PPUSH
 666: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 670: LD_EXP 2
 674: PPUSH
 675: LD_INT 4
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL_OW 49
// end else
 685: GO 749
// begin if TestCharacters ( 10c_Lisa ) = true then
 687: LD_STRING 10c_Lisa
 689: PPUSH
 690: CALL_OW 28
 694: PUSH
 695: LD_INT 1
 697: EQUAL
 698: IFFALSE 745
// begin Lisa = PrepareUnit ( 10c_Lisa , true ) ;
 700: LD_ADDR_EXP 2
 704: PUSH
 705: LD_STRING 10c_Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: CALL 11580 0 2
 715: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 716: LD_EXP 2
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 728: LD_EXP 2
 732: PPUSH
 733: LD_INT 4
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end else
 743: GO 749
// begin PrepareAmericansRandom ;
 745: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Donaldson ) = true then
 749: LD_STRING 11_Donaldson
 751: PPUSH
 752: CALL_OW 28
 756: PUSH
 757: LD_INT 1
 759: EQUAL
 760: IFFALSE 807
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 762: LD_ADDR_EXP 3
 766: PUSH
 767: LD_STRING 11_Donaldson
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL 11580 0 2
 777: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 778: LD_EXP 3
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 790: LD_EXP 3
 794: PPUSH
 795: LD_INT 4
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end else
 805: GO 869
// begin if TestCharacters ( 10c_Donaldson ) = true then
 807: LD_STRING 10c_Donaldson
 809: PPUSH
 810: CALL_OW 28
 814: PUSH
 815: LD_INT 1
 817: EQUAL
 818: IFFALSE 865
// begin Donaldson = PrepareUnit ( 10c_Donaldson , true ) ;
 820: LD_ADDR_EXP 3
 824: PUSH
 825: LD_STRING 10c_Donaldson
 827: PPUSH
 828: LD_INT 1
 830: PPUSH
 831: CALL 11580 0 2
 835: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 836: LD_EXP 3
 840: PPUSH
 841: LD_INT 1
 843: PPUSH
 844: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 848: LD_EXP 3
 852: PPUSH
 853: LD_INT 4
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end else
 863: GO 869
// begin PrepareAmericansRandom ;
 865: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Cyrus ) = true then
 869: LD_STRING 11_Cyrus
 871: PPUSH
 872: CALL_OW 28
 876: PUSH
 877: LD_INT 1
 879: EQUAL
 880: IFFALSE 927
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 882: LD_ADDR_EXP 5
 886: PUSH
 887: LD_STRING 11_Cyrus
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL 11580 0 2
 897: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 898: LD_EXP 5
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 910: LD_EXP 5
 914: PPUSH
 915: LD_INT 4
 917: PPUSH
 918: LD_INT 0
 920: PPUSH
 921: CALL_OW 49
// end else
 925: GO 989
// begin if TestCharacters ( 10c_Cyrus ) = true then
 927: LD_STRING 10c_Cyrus
 929: PPUSH
 930: CALL_OW 28
 934: PUSH
 935: LD_INT 1
 937: EQUAL
 938: IFFALSE 985
// begin Cyrus = PrepareUnit ( 10c_Cyrus , true ) ;
 940: LD_ADDR_EXP 5
 944: PUSH
 945: LD_STRING 10c_Cyrus
 947: PPUSH
 948: LD_INT 1
 950: PPUSH
 951: CALL 11580 0 2
 955: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 956: LD_EXP 5
 960: PPUSH
 961: LD_INT 1
 963: PPUSH
 964: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 968: LD_EXP 5
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// end else
 983: GO 989
// begin PrepareAmericansRandom ;
 985: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Denis ) = true then
 989: LD_STRING 11_Denis
 991: PPUSH
 992: CALL_OW 28
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1047
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
1002: LD_ADDR_EXP 6
1006: PUSH
1007: LD_STRING 11_Denis
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: CALL 11580 0 2
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1109
// begin if TestCharacters ( 10c_Denis ) = true then
1047: LD_STRING 10c_Denis
1049: PPUSH
1050: CALL_OW 28
1054: PUSH
1055: LD_INT 1
1057: EQUAL
1058: IFFALSE 1105
// begin Denis = PrepareUnit ( 10c_Denis , true ) ;
1060: LD_ADDR_EXP 6
1064: PUSH
1065: LD_STRING 10c_Denis
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL 11580 0 2
1075: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1076: LD_EXP 6
1080: PPUSH
1081: LD_INT 4
1083: PPUSH
1084: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1088: LD_EXP 6
1092: PPUSH
1093: LD_INT 4
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end else
1103: GO 1109
// begin PrepareAmericansRandom ;
1105: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Frank ) = true then
1109: LD_STRING 11_Frank
1111: PPUSH
1112: CALL_OW 28
1116: PUSH
1117: LD_INT 1
1119: EQUAL
1120: IFFALSE 1167
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1122: LD_ADDR_EXP 12
1126: PUSH
1127: LD_STRING 11_Frank
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: CALL 11580 0 2
1137: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1138: LD_EXP 12
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1150: LD_EXP 12
1154: PPUSH
1155: LD_INT 4
1157: PPUSH
1158: LD_INT 0
1160: PPUSH
1161: CALL_OW 49
// end else
1165: GO 1229
// begin if TestCharacters ( 10c_Frank ) = true then
1167: LD_STRING 10c_Frank
1169: PPUSH
1170: CALL_OW 28
1174: PUSH
1175: LD_INT 1
1177: EQUAL
1178: IFFALSE 1225
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1180: LD_ADDR_EXP 12
1184: PUSH
1185: LD_STRING 11_Frank
1187: PPUSH
1188: LD_INT 1
1190: PPUSH
1191: CALL 11580 0 2
1195: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1196: LD_EXP 12
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1208: LD_EXP 12
1212: PPUSH
1213: LD_INT 4
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// end else
1223: GO 1229
// begin PrepareAmericansRandom ;
1225: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Cornell ) = true then
1229: LD_STRING 11_Cornell
1231: PPUSH
1232: CALL_OW 28
1236: PUSH
1237: LD_INT 1
1239: EQUAL
1240: IFFALSE 1287
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1242: LD_ADDR_EXP 10
1246: PUSH
1247: LD_STRING 11_Cornell
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: CALL 11580 0 2
1257: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1258: LD_EXP 10
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1270: LD_EXP 10
1274: PPUSH
1275: LD_INT 4
1277: PPUSH
1278: LD_INT 0
1280: PPUSH
1281: CALL_OW 49
// end else
1285: GO 1349
// begin if TestCharacters ( 10c_Cornell ) = true then
1287: LD_STRING 10c_Cornell
1289: PPUSH
1290: CALL_OW 28
1294: PUSH
1295: LD_INT 1
1297: EQUAL
1298: IFFALSE 1345
// begin Cornel = PrepareUnit ( 10c_Cornell , true ) ;
1300: LD_ADDR_EXP 10
1304: PUSH
1305: LD_STRING 10c_Cornell
1307: PPUSH
1308: LD_INT 1
1310: PPUSH
1311: CALL 11580 0 2
1315: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1316: LD_EXP 10
1320: PPUSH
1321: LD_INT 1
1323: PPUSH
1324: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1328: LD_EXP 10
1332: PPUSH
1333: LD_INT 4
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: CALL_OW 49
// end else
1343: GO 1349
// begin PrepareAmericansRandom ;
1345: CALL 1370 0 0
// end ; end ; Powell = PrepareUnit ( Powell , false ) ;
1349: LD_ADDR_EXP 22
1353: PUSH
1354: LD_STRING Powell
1356: PPUSH
1357: LD_INT 0
1359: PPUSH
1360: CALL 11580 0 2
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 1
1369: RET
// export function PrepareAmericansRandom ; begin
1370: LD_INT 0
1372: PPUSH
// PlaceUnitArea ( others11 [ 1 ] , PlayerSpawn , false ) ;
1373: LD_EXP 14
1377: PUSH
1378: LD_INT 1
1380: ARRAY
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: LD_INT 0
1387: PPUSH
1388: CALL_OW 49
// others11 := Delete ( others11 , 1 ) ;
1392: LD_ADDR_EXP 14
1396: PUSH
1397: LD_EXP 14
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL_OW 3
1409: ST_TO_ADDR
// end ;
1410: LD_VAR 0 1
1414: RET
// export function PrepareVehicles ; var veh ; begin
1415: LD_INT 0
1417: PPUSH
1418: PPUSH
// uc_side = 1 ;
1419: LD_ADDR_OWVAR 20
1423: PUSH
1424: LD_INT 1
1426: ST_TO_ADDR
// uc_nation = 1 ;
1427: LD_ADDR_OWVAR 21
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1435: LD_ADDR_OWVAR 37
1439: PUSH
1440: LD_INT 3
1442: ST_TO_ADDR
// vc_engine = 3 ;
1443: LD_ADDR_OWVAR 39
1447: PUSH
1448: LD_INT 3
1450: ST_TO_ADDR
// vc_control = 3 ;
1451: LD_ADDR_OWVAR 38
1455: PUSH
1456: LD_INT 3
1458: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1459: LD_ADDR_OWVAR 40
1463: PUSH
1464: LD_INT 4
1466: ST_TO_ADDR
// veh = CreateVehicle ;
1467: LD_ADDR_VAR 0 2
1471: PUSH
1472: CALL_OW 45
1476: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1477: LD_VAR 0 2
1481: PPUSH
1482: LD_INT 4
1484: PPUSH
1485: LD_INT 0
1487: PPUSH
1488: CALL_OW 49
// vc_weapon = us_double_gun ;
1492: LD_ADDR_OWVAR 40
1496: PUSH
1497: LD_INT 5
1499: ST_TO_ADDR
// vc_control = 1 ;
1500: LD_ADDR_OWVAR 38
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// veh = CreateVehicle ;
1508: LD_ADDR_VAR 0 2
1512: PUSH
1513: CALL_OW 45
1517: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1518: LD_VAR 0 2
1522: PPUSH
1523: LD_INT 4
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 49
// vc_weapon = us_light_gun ;
1533: LD_ADDR_OWVAR 40
1537: PUSH
1538: LD_INT 3
1540: ST_TO_ADDR
// vc_control = 3 ;
1541: LD_ADDR_OWVAR 38
1545: PUSH
1546: LD_INT 3
1548: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1549: LD_ADDR_OWVAR 37
1553: PUSH
1554: LD_INT 2
1556: ST_TO_ADDR
// veh = CreateVehicle ;
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: CALL_OW 45
1566: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1567: LD_VAR 0 2
1571: PPUSH
1572: LD_INT 4
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1582: LD_ADDR_OWVAR 40
1586: PUSH
1587: LD_INT 4
1589: ST_TO_ADDR
// veh = CreateVehicle ;
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: CALL_OW 45
1599: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1600: LD_VAR 0 2
1604: PPUSH
1605: LD_INT 4
1607: PPUSH
1608: LD_INT 0
1610: PPUSH
1611: CALL_OW 49
// end ;
1615: LD_VAR 0 1
1619: RET
// export function PowellSupport1 ; var veh , un ; begin
1620: LD_INT 0
1622: PPUSH
1623: PPUSH
1624: PPUSH
// uc_side = 1 ;
1625: LD_ADDR_OWVAR 20
1629: PUSH
1630: LD_INT 1
1632: ST_TO_ADDR
// uc_nation = 1 ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_INT 1
1640: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1641: LD_STRING 11_Brown
1643: PPUSH
1644: CALL_OW 28
1648: PUSH
1649: LD_INT 1
1651: EQUAL
1652: IFFALSE 1699
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1654: LD_ADDR_EXP 7
1658: PUSH
1659: LD_STRING 11_Brown
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL 11580 0 2
1669: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1670: LD_EXP 7
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1682: LD_EXP 7
1686: PPUSH
1687: LD_INT 4
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end else
1697: GO 1761
// begin if TestCharacters ( 10c_Brown ) = true then
1699: LD_STRING 10c_Brown
1701: PPUSH
1702: CALL_OW 28
1706: PUSH
1707: LD_INT 1
1709: EQUAL
1710: IFFALSE 1757
// begin Brown = PrepareUnit ( 10c_Brown , true ) ;
1712: LD_ADDR_EXP 7
1716: PUSH
1717: LD_STRING 10c_Brown
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: CALL 11580 0 2
1727: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1728: LD_EXP 7
1732: PPUSH
1733: LD_INT 2
1735: PPUSH
1736: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1740: LD_EXP 7
1744: PPUSH
1745: LD_INT 4
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 49
// end else
1755: GO 1761
// begin PrepareAmericansRandom ;
1757: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Gary ) = true then
1761: LD_STRING 11_Gary
1763: PPUSH
1764: CALL_OW 28
1768: PUSH
1769: LD_INT 1
1771: EQUAL
1772: IFFALSE 1819
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1774: LD_ADDR_EXP 11
1778: PUSH
1779: LD_STRING 11_Gary
1781: PPUSH
1782: LD_INT 1
1784: PPUSH
1785: CALL 11580 0 2
1789: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1790: LD_EXP 11
1794: PPUSH
1795: LD_INT 2
1797: PPUSH
1798: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1802: LD_EXP 11
1806: PPUSH
1807: LD_INT 4
1809: PPUSH
1810: LD_INT 0
1812: PPUSH
1813: CALL_OW 49
// end else
1817: GO 1881
// begin if TestCharacters ( 10c_Gary ) = true then
1819: LD_STRING 10c_Gary
1821: PPUSH
1822: CALL_OW 28
1826: PUSH
1827: LD_INT 1
1829: EQUAL
1830: IFFALSE 1877
// begin Brown = PrepareUnit ( 10c_Gary , true ) ;
1832: LD_ADDR_EXP 7
1836: PUSH
1837: LD_STRING 10c_Gary
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: CALL 11580 0 2
1847: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1848: LD_EXP 11
1852: PPUSH
1853: LD_INT 2
1855: PPUSH
1856: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1860: LD_EXP 11
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: LD_INT 0
1870: PPUSH
1871: CALL_OW 49
// end else
1875: GO 1881
// begin PrepareAmericansRandom ;
1877: CALL 1370 0 0
// end ; end ; hc_gallery =  ;
1881: LD_ADDR_OWVAR 33
1885: PUSH
1886: LD_STRING 
1888: ST_TO_ADDR
// hc_name =  ;
1889: LD_ADDR_OWVAR 26
1893: PUSH
1894: LD_STRING 
1896: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1897: LD_ADDR_OWVAR 37
1901: PUSH
1902: LD_INT 3
1904: ST_TO_ADDR
// vc_engine = 3 ;
1905: LD_ADDR_OWVAR 39
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_control = 1 ;
1913: LD_ADDR_OWVAR 38
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// vc_weapon = us_crane ;
1921: LD_ADDR_OWVAR 40
1925: PUSH
1926: LD_INT 13
1928: ST_TO_ADDR
// veh = CreateVehicle ;
1929: LD_ADDR_VAR 0 2
1933: PUSH
1934: CALL_OW 45
1938: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1939: LD_VAR 0 2
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: LD_INT 0
1949: PPUSH
1950: CALL_OW 49
// SetDir ( veh , 4 ) ;
1954: LD_VAR 0 2
1958: PPUSH
1959: LD_INT 4
1961: PPUSH
1962: CALL_OW 233
// PrepareHuman ( false , 3 , rand ( 5 , 8 ) ) ;
1966: LD_INT 0
1968: PPUSH
1969: LD_INT 3
1971: PPUSH
1972: LD_INT 5
1974: PPUSH
1975: LD_INT 8
1977: PPUSH
1978: CALL_OW 12
1982: PPUSH
1983: CALL_OW 380
// un = CreateHuman ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: CALL_OW 44
1996: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: LD_VAR 0 2
2006: PPUSH
2007: CALL_OW 52
// vc_chassis = us_medium_wheeled ;
2011: LD_ADDR_OWVAR 37
2015: PUSH
2016: LD_INT 2
2018: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2019: LD_ADDR_OWVAR 40
2023: PUSH
2024: LD_INT 5
2026: ST_TO_ADDR
// veh = CreateVehicle ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: CALL_OW 45
2036: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2037: LD_VAR 0 2
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL_OW 49
// SetDir ( veh , 4 ) ;
2052: LD_VAR 0 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 233
// PrepareHuman ( false , 3 , rand ( 5 , 8 ) ) ;
2064: LD_INT 0
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: LD_INT 5
2072: PPUSH
2073: LD_INT 8
2075: PPUSH
2076: CALL_OW 12
2080: PPUSH
2081: CALL_OW 380
// un = CreateHuman ;
2085: LD_ADDR_VAR 0 3
2089: PUSH
2090: CALL_OW 44
2094: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2095: LD_VAR 0 3
2099: PPUSH
2100: LD_VAR 0 2
2104: PPUSH
2105: CALL_OW 52
// vc_control = 3 ;
2109: LD_ADDR_OWVAR 38
2113: PUSH
2114: LD_INT 3
2116: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2117: LD_ADDR_OWVAR 40
2121: PUSH
2122: LD_INT 12
2124: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2125: LD_ADDR_EXP 15
2129: PUSH
2130: CALL_OW 45
2134: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2135: LD_ADDR_EXP 16
2139: PUSH
2140: CALL_OW 45
2144: ST_TO_ADDR
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2145: LD_EXP 15
2149: PPUSH
2150: LD_INT 4
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2160: LD_EXP 16
2164: PPUSH
2165: LD_INT 4
2167: PPUSH
2168: LD_INT 0
2170: PPUSH
2171: CALL_OW 49
// SetDir ( amCargo1 , 4 ) ;
2175: LD_EXP 15
2179: PPUSH
2180: LD_INT 4
2182: PPUSH
2183: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2187: LD_EXP 16
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// AddCargo ( amCargo1 , 3 , 100 ) ;
2199: LD_EXP 15
2203: PPUSH
2204: LD_INT 3
2206: PPUSH
2207: LD_INT 100
2209: PPUSH
2210: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2214: LD_EXP 16
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: LD_INT 80
2224: PPUSH
2225: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 20
2239: PPUSH
2240: CALL_OW 291
// end ;
2244: LD_VAR 0 1
2248: RET
// export function PowellSupport2 ; var veh , un ; begin
2249: LD_INT 0
2251: PPUSH
2252: PPUSH
2253: PPUSH
// uc_side = 1 ;
2254: LD_ADDR_OWVAR 20
2258: PUSH
2259: LD_INT 1
2261: ST_TO_ADDR
// uc_nation = 1 ;
2262: LD_ADDR_OWVAR 21
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// if TestCharacters ( 11_Bobby ) = true then
2270: LD_STRING 11_Bobby
2272: PPUSH
2273: CALL_OW 28
2277: PUSH
2278: LD_INT 1
2280: EQUAL
2281: IFFALSE 2328
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2283: LD_ADDR_EXP 4
2287: PUSH
2288: LD_STRING 11_Bobby
2290: PPUSH
2291: LD_INT 1
2293: PPUSH
2294: CALL 11580 0 2
2298: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2299: LD_EXP 4
2303: PPUSH
2304: LD_INT 3
2306: PPUSH
2307: CALL_OW 336
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
2311: LD_EXP 4
2315: PPUSH
2316: LD_INT 4
2318: PPUSH
2319: LD_INT 0
2321: PPUSH
2322: CALL_OW 49
// end else
2326: GO 2390
// begin if TestCharacters ( 10c_Bobby ) = true then
2328: LD_STRING 10c_Bobby
2330: PPUSH
2331: CALL_OW 28
2335: PUSH
2336: LD_INT 1
2338: EQUAL
2339: IFFALSE 2386
// begin Bobby = PrepareUnit ( 10c_Bobby , true ) ;
2341: LD_ADDR_EXP 4
2345: PUSH
2346: LD_STRING 10c_Bobby
2348: PPUSH
2349: LD_INT 1
2351: PPUSH
2352: CALL 11580 0 2
2356: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2357: LD_EXP 4
2361: PPUSH
2362: LD_INT 3
2364: PPUSH
2365: CALL_OW 336
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
2369: LD_EXP 4
2373: PPUSH
2374: LD_INT 4
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// end else
2384: GO 2390
// begin PrepareAmericansRandom ;
2386: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Houten ) = true then
2390: LD_STRING 11_Houten
2392: PPUSH
2393: CALL_OW 28
2397: PUSH
2398: LD_INT 1
2400: EQUAL
2401: IFFALSE 2448
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2403: LD_ADDR_EXP 9
2407: PUSH
2408: LD_STRING 11_Houten
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: CALL 11580 0 2
2418: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2419: LD_EXP 9
2423: PPUSH
2424: LD_INT 1
2426: PPUSH
2427: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2431: LD_EXP 9
2435: PPUSH
2436: LD_INT 4
2438: PPUSH
2439: LD_INT 0
2441: PPUSH
2442: CALL_OW 49
// end else
2446: GO 2510
// begin if TestCharacters ( 10c_Houten ) = true then
2448: LD_STRING 10c_Houten
2450: PPUSH
2451: CALL_OW 28
2455: PUSH
2456: LD_INT 1
2458: EQUAL
2459: IFFALSE 2506
// begin Houten = PrepareUnit ( 10c_Houten , true ) ;
2461: LD_ADDR_EXP 9
2465: PUSH
2466: LD_STRING 10c_Houten
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL 11580 0 2
2476: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2477: LD_EXP 9
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2489: LD_EXP 9
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end else
2504: GO 2510
// begin PrepareAmericansRandom ;
2506: CALL 1370 0 0
// end ; end ; hc_gallery =  ;
2510: LD_ADDR_OWVAR 33
2514: PUSH
2515: LD_STRING 
2517: ST_TO_ADDR
// hc_name =  ;
2518: LD_ADDR_OWVAR 26
2522: PUSH
2523: LD_STRING 
2525: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2526: LD_ADDR_OWVAR 37
2530: PUSH
2531: LD_INT 2
2533: ST_TO_ADDR
// vc_engine = 3 ;
2534: LD_ADDR_OWVAR 39
2538: PUSH
2539: LD_INT 3
2541: ST_TO_ADDR
// vc_control = 3 ;
2542: LD_ADDR_OWVAR 38
2546: PUSH
2547: LD_INT 3
2549: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2550: LD_ADDR_OWVAR 40
2554: PUSH
2555: LD_INT 3
2557: ST_TO_ADDR
// veh = CreateVehicle ;
2558: LD_ADDR_VAR 0 2
2562: PUSH
2563: CALL_OW 45
2567: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2568: LD_VAR 0 2
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// SetDir ( veh , 4 ) ;
2583: LD_VAR 0 2
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: CALL_OW 233
// vc_control = 3 ;
2595: LD_ADDR_OWVAR 38
2599: PUSH
2600: LD_INT 3
2602: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2603: LD_ADDR_OWVAR 40
2607: PUSH
2608: LD_INT 12
2610: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2611: LD_ADDR_EXP 17
2615: PUSH
2616: CALL_OW 45
2620: ST_TO_ADDR
// amCargo4 = CreateVehicle ;
2621: LD_ADDR_EXP 18
2625: PUSH
2626: CALL_OW 45
2630: ST_TO_ADDR
// amCargo5 = CreateVehicle ;
2631: LD_ADDR_EXP 19
2635: PUSH
2636: CALL_OW 45
2640: ST_TO_ADDR
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2641: LD_EXP 17
2645: PPUSH
2646: LD_INT 4
2648: PPUSH
2649: LD_INT 0
2651: PPUSH
2652: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2656: LD_EXP 18
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: LD_INT 0
2666: PPUSH
2667: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2671: LD_EXP 19
2675: PPUSH
2676: LD_INT 4
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 49
// SetDir ( amCargo3 , 4 ) ;
2686: LD_EXP 17
2690: PPUSH
2691: LD_INT 4
2693: PPUSH
2694: CALL_OW 233
// SetDir ( amCargo4 , 4 ) ;
2698: LD_EXP 18
2702: PPUSH
2703: LD_INT 4
2705: PPUSH
2706: CALL_OW 233
// SetDir ( amCargo5 , 4 ) ;
2710: LD_EXP 19
2714: PPUSH
2715: LD_INT 4
2717: PPUSH
2718: CALL_OW 233
// AddCargo ( amCargo3 , 1 , 100 ) ;
2722: LD_EXP 17
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_INT 100
2732: PPUSH
2733: CALL_OW 291
// AddCargo ( amCargo4 , 2 , 100 ) ;
2737: LD_EXP 18
2741: PPUSH
2742: LD_INT 2
2744: PPUSH
2745: LD_INT 100
2747: PPUSH
2748: CALL_OW 291
// AddCargo ( amCargo5 , 1 , 50 ) ;
2752: LD_EXP 19
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 50
2762: PPUSH
2763: CALL_OW 291
// AddCargo ( amCargo5 , 2 , 50 ) ;
2767: LD_EXP 19
2771: PPUSH
2772: LD_INT 2
2774: PPUSH
2775: LD_INT 50
2777: PPUSH
2778: CALL_OW 291
// end ;
2782: LD_VAR 0 1
2786: RET
// export function PowellSupport3 ; var veh , un ; begin
2787: LD_INT 0
2789: PPUSH
2790: PPUSH
2791: PPUSH
// uc_side = 1 ;
2792: LD_ADDR_OWVAR 20
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// uc_nation = 1 ;
2800: LD_ADDR_OWVAR 21
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// PrepareAmericansRandom ;
2808: CALL 1370 0 0
// vc_chassis = us_medium_wheeled ;
2812: LD_ADDR_OWVAR 37
2816: PUSH
2817: LD_INT 2
2819: ST_TO_ADDR
// vc_engine = 3 ;
2820: LD_ADDR_OWVAR 39
2824: PUSH
2825: LD_INT 3
2827: ST_TO_ADDR
// vc_control = 3 ;
2828: LD_ADDR_OWVAR 38
2832: PUSH
2833: LD_INT 3
2835: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2836: LD_ADDR_OWVAR 40
2840: PUSH
2841: LD_INT 12
2843: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2844: LD_ADDR_EXP 20
2848: PUSH
2849: CALL_OW 45
2853: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2854: LD_ADDR_EXP 21
2858: PUSH
2859: CALL_OW 45
2863: ST_TO_ADDR
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2864: LD_EXP 20
2868: PPUSH
2869: LD_INT 4
2871: PPUSH
2872: LD_INT 0
2874: PPUSH
2875: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2879: LD_EXP 21
2883: PPUSH
2884: LD_INT 4
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: CALL_OW 49
// SetDir ( amCargo6 , 4 ) ;
2894: LD_EXP 20
2898: PPUSH
2899: LD_INT 4
2901: PPUSH
2902: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2906: LD_EXP 21
2910: PPUSH
2911: LD_INT 4
2913: PPUSH
2914: CALL_OW 233
// AddCargo ( amCargo6 , 1 , 100 ) ;
2918: LD_EXP 20
2922: PPUSH
2923: LD_INT 1
2925: PPUSH
2926: LD_INT 100
2928: PPUSH
2929: CALL_OW 291
// AddCargo ( amCargo7 , 2 , 100 ) ;
2933: LD_EXP 21
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: LD_INT 100
2943: PPUSH
2944: CALL_OW 291
// end ; end_of_file
2948: LD_VAR 0 1
2952: RET
// export function PrepareRussianCommander ; begin
2953: LD_INT 0
2955: PPUSH
// uc_side = 3 ;
2956: LD_ADDR_OWVAR 20
2960: PUSH
2961: LD_INT 3
2963: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2964: LD_ADDR_EXP 23
2968: PUSH
2969: LD_STRING Davidov
2971: PPUSH
2972: LD_INT 0
2974: PPUSH
2975: CALL 11580 0 2
2979: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2980: LD_EXP 23
2984: PPUSH
2985: LD_INT 3
2987: PPUSH
2988: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2992: LD_ADDR_EXP 34
2996: PUSH
2997: LD_EXP 34
3001: PUSH
3002: LD_EXP 23
3006: ADD
3007: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3008: LD_EXP 34
3012: PPUSH
3013: LD_INT 4
3015: PPUSH
3016: CALL_OW 336
// end ;
3020: LD_VAR 0 1
3024: RET
// export function PrepareEastBase ; var i , un ; begin
3025: LD_INT 0
3027: PPUSH
3028: PPUSH
3029: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3030: LD_INT 3
3032: PPUSH
3033: LD_INT 3
3035: PPUSH
3036: LD_INT 121
3038: PPUSH
3039: LD_EXP 36
3043: PPUSH
3044: LD_EXP 37
3048: PPUSH
3049: CALL_OW 12
3053: PPUSH
3054: LD_INT 1
3056: PPUSH
3057: LD_INT 3
3059: PPUSH
3060: CALL 12372 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3064: LD_INT 3
3066: PPUSH
3067: LD_INT 3
3069: PPUSH
3070: LD_INT 121
3072: PPUSH
3073: LD_EXP 36
3077: PPUSH
3078: LD_EXP 37
3082: PPUSH
3083: CALL_OW 12
3087: PPUSH
3088: LD_INT 9
3090: PPUSH
3091: LD_INT 3
3093: PPUSH
3094: CALL 12372 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: LD_INT 4
3106: PPUSH
3107: LD_EXP 36
3111: PPUSH
3112: LD_EXP 37
3116: PPUSH
3117: CALL_OW 12
3121: PPUSH
3122: LD_INT 2
3124: PPUSH
3125: LD_INT 6
3127: PPUSH
3128: CALL 12372 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3132: LD_INT 3
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_INT 112
3140: PPUSH
3141: LD_EXP 36
3145: PPUSH
3146: LD_EXP 37
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: LD_INT 3
3158: PPUSH
3159: LD_INT 6
3161: PPUSH
3162: CALL 12372 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3166: LD_INT 3
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 47
3174: PPUSH
3175: LD_EXP 36
3179: PPUSH
3180: LD_EXP 37
3184: PPUSH
3185: CALL_OW 12
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: LD_INT 6
3195: PPUSH
3196: CALL 12372 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3200: LD_INT 3
3202: PPUSH
3203: LD_INT 3
3205: PPUSH
3206: LD_INT 129
3208: PPUSH
3209: LD_EXP 36
3213: PPUSH
3214: LD_EXP 37
3218: PPUSH
3219: CALL_OW 12
3223: PPUSH
3224: LD_INT 4
3226: PPUSH
3227: LD_INT 6
3229: PPUSH
3230: CALL 12372 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3234: LD_INT 3
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 135
3242: PPUSH
3243: LD_EXP 36
3247: PPUSH
3248: LD_EXP 37
3252: PPUSH
3253: CALL_OW 12
3257: PPUSH
3258: LD_INT 4
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: CALL 12372 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: LD_INT 22
3275: PUSH
3276: LD_INT 3
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: LD_INT 30
3285: PUSH
3286: LD_INT 32
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PPUSH
3297: CALL_OW 69
3301: PUSH
3302: FOR_IN
3303: IFFALSE 3343
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3305: LD_INT 3
3307: PPUSH
3308: LD_INT 3
3310: PPUSH
3311: LD_VAR 0 2
3315: PPUSH
3316: LD_EXP 36
3320: PPUSH
3321: LD_EXP 37
3325: PPUSH
3326: CALL_OW 12
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: LD_INT 1
3336: PPUSH
3337: CALL 12372 0 6
3341: GO 3302
3343: POP
3344: POP
// for i = 1 to 5 do
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: DOUBLE
3351: LD_INT 1
3353: DEC
3354: ST_TO_ADDR
3355: LD_INT 5
3357: PUSH
3358: FOR_TO
3359: IFFALSE 3458
// begin uc_side = 3 ;
3361: LD_ADDR_OWVAR 20
3365: PUSH
3366: LD_INT 3
3368: ST_TO_ADDR
// uc_nation = 3 ;
3369: LD_ADDR_OWVAR 21
3373: PUSH
3374: LD_INT 3
3376: ST_TO_ADDR
// hc_gallery =  ;
3377: LD_ADDR_OWVAR 33
3381: PUSH
3382: LD_STRING 
3384: ST_TO_ADDR
// hc_name =  ;
3385: LD_ADDR_OWVAR 26
3389: PUSH
3390: LD_STRING 
3392: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3393: LD_INT 0
3395: PPUSH
3396: LD_INT 4
3398: PPUSH
3399: LD_EXP 36
3403: PPUSH
3404: LD_EXP 37
3408: PPUSH
3409: CALL_OW 12
3413: PPUSH
3414: CALL_OW 380
// un = CreateHuman ;
3418: LD_ADDR_VAR 0 3
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: LD_INT 3
3435: PPUSH
3436: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3440: LD_ADDR_EXP 34
3444: PUSH
3445: LD_EXP 34
3449: PUSH
3450: LD_VAR 0 3
3454: ADD
3455: ST_TO_ADDR
// end ;
3456: GO 3358
3458: POP
3459: POP
// end ;
3460: LD_VAR 0 1
3464: RET
// export function PrepareWestBase ; var i , un ; begin
3465: LD_INT 0
3467: PPUSH
3468: PPUSH
3469: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 6
3478: PPUSH
3479: LD_EXP 36
3483: PPUSH
3484: LD_EXP 37
3488: PPUSH
3489: CALL_OW 12
3493: PPUSH
3494: LD_INT 2
3496: PPUSH
3497: LD_INT 3
3499: PPUSH
3500: CALL 12372 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3504: LD_INT 3
3506: PPUSH
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 91
3512: PPUSH
3513: LD_EXP 36
3517: PPUSH
3518: LD_EXP 37
3522: PPUSH
3523: CALL_OW 12
3527: PPUSH
3528: LD_INT 4
3530: PPUSH
3531: LD_INT 3
3533: PPUSH
3534: CALL 12372 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3538: LD_INT 3
3540: PPUSH
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 21
3546: PPUSH
3547: LD_EXP 36
3551: PPUSH
3552: LD_EXP 37
3556: PPUSH
3557: CALL_OW 12
3561: PPUSH
3562: LD_INT 3
3564: PPUSH
3565: LD_INT 6
3567: PPUSH
3568: CALL 12372 0 6
// end ;
3572: LD_VAR 0 1
3576: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
3582: PPUSH
// uc_side = 3 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_INT 3
3590: ST_TO_ADDR
// uc_nation = 3 ;
3591: LD_ADDR_OWVAR 21
3595: PUSH
3596: LD_INT 3
3598: ST_TO_ADDR
// for i = 1 to 5 do
3599: LD_ADDR_VAR 0 2
3603: PUSH
3604: DOUBLE
3605: LD_INT 1
3607: DEC
3608: ST_TO_ADDR
3609: LD_INT 5
3611: PUSH
3612: FOR_TO
3613: IFFALSE 3683
// begin hc_gallery =  ;
3615: LD_ADDR_OWVAR 33
3619: PUSH
3620: LD_STRING 
3622: ST_TO_ADDR
// hc_name =  ;
3623: LD_ADDR_OWVAR 26
3627: PUSH
3628: LD_STRING 
3630: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_INT 9
3636: PPUSH
3637: LD_EXP 36
3641: PPUSH
3642: LD_EXP 37
3646: PPUSH
3647: CALL_OW 12
3651: PPUSH
3652: CALL_OW 380
// un = CreateHuman ;
3656: LD_ADDR_VAR 0 3
3660: PUSH
3661: CALL_OW 44
3665: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3666: LD_VAR 0 3
3670: PPUSH
3671: LD_INT 8
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
// end ;
3681: GO 3612
3683: POP
3684: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3685: LD_ADDR_VAR 0 2
3689: PUSH
3690: DOUBLE
3691: LD_INT 1
3693: DEC
3694: ST_TO_ADDR
3695: LD_INT 2
3697: PUSH
3698: LD_INT 3
3700: PUSH
3701: LD_INT 4
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: PUSH
3709: LD_OWVAR 67
3713: ARRAY
3714: PUSH
3715: FOR_TO
3716: IFFALSE 3786
// begin hc_gallery =  ;
3718: LD_ADDR_OWVAR 33
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// hc_name =  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3734: LD_INT 0
3736: PPUSH
3737: LD_INT 4
3739: PPUSH
3740: LD_EXP 36
3744: PPUSH
3745: LD_EXP 37
3749: PPUSH
3750: CALL_OW 12
3754: PPUSH
3755: CALL_OW 380
// un = CreateHuman ;
3759: LD_ADDR_VAR 0 3
3763: PUSH
3764: CALL_OW 44
3768: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 8
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 49
// end ;
3784: GO 3715
3786: POP
3787: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3788: LD_ADDR_VAR 0 2
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_INT 3
3800: PUSH
3801: LD_INT 4
3803: PUSH
3804: LD_INT 5
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: PUSH
3812: LD_OWVAR 67
3816: ARRAY
3817: PUSH
3818: FOR_TO
3819: IFFALSE 4015
// begin vc_engine = 3 ;
3821: LD_ADDR_OWVAR 39
3825: PUSH
3826: LD_INT 3
3828: ST_TO_ADDR
// vc_control = 1 ;
3829: LD_ADDR_OWVAR 38
3833: PUSH
3834: LD_INT 1
3836: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3837: LD_ADDR_OWVAR 40
3841: PUSH
3842: LD_INT 42
3844: PUSH
3845: LD_INT 43
3847: PUSH
3848: LD_INT 44
3850: PUSH
3851: LD_INT 45
3853: PUSH
3854: LD_INT 46
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: PUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 5
3869: PPUSH
3870: CALL_OW 12
3874: ARRAY
3875: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3876: LD_OWVAR 40
3880: PUSH
3881: LD_INT 46
3883: EQUAL
3884: IFFALSE 3896
// vc_chassis = ru_heavy_tracked else
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 24
3893: ST_TO_ADDR
3894: GO 3923
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3896: LD_ADDR_OWVAR 37
3900: PUSH
3901: LD_INT 22
3903: PUSH
3904: LD_INT 21
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: PUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 2
3916: PPUSH
3917: CALL_OW 12
3921: ARRAY
3922: ST_TO_ADDR
// veh = CreateVehicle ;
3923: LD_ADDR_VAR 0 4
3927: PUSH
3928: CALL_OW 45
3932: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3933: LD_VAR 0 4
3937: PPUSH
3938: LD_INT 3
3940: PPUSH
3941: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_INT 5
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: CALL_OW 49
// hc_gallery =  ;
3960: LD_ADDR_OWVAR 33
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// hc_name =  ;
3968: LD_ADDR_OWVAR 26
3972: PUSH
3973: LD_STRING 
3975: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3976: LD_INT 0
3978: PPUSH
3979: LD_INT 3
3981: PPUSH
3982: LD_INT 10
3984: PPUSH
3985: CALL_OW 380
// un = CreateHuman ;
3989: LD_ADDR_VAR 0 3
3993: PUSH
3994: CALL_OW 44
3998: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3999: LD_VAR 0 3
4003: PPUSH
4004: LD_VAR 0 4
4008: PPUSH
4009: CALL_OW 52
// end ;
4013: GO 3818
4015: POP
4016: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4017: LD_ADDR_VAR 0 2
4021: PUSH
4022: DOUBLE
4023: LD_INT 1
4025: DEC
4026: ST_TO_ADDR
4027: LD_INT 3
4029: PUSH
4030: LD_INT 4
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: PUSH
4041: LD_OWVAR 67
4045: ARRAY
4046: PUSH
4047: FOR_TO
4048: IFFALSE 4195
// begin vc_engine = 3 ;
4050: LD_ADDR_OWVAR 39
4054: PUSH
4055: LD_INT 3
4057: ST_TO_ADDR
// vc_control = 3 ;
4058: LD_ADDR_OWVAR 38
4062: PUSH
4063: LD_INT 3
4065: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4066: LD_ADDR_OWVAR 40
4070: PUSH
4071: LD_INT 42
4073: PUSH
4074: LD_INT 43
4076: PUSH
4077: LD_INT 44
4079: PUSH
4080: LD_INT 45
4082: PUSH
4083: LD_INT 46
4085: PUSH
4086: LD_INT 49
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 5
4102: PPUSH
4103: CALL_OW 12
4107: ARRAY
4108: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4109: LD_OWVAR 40
4113: PUSH
4114: LD_INT 46
4116: EQUAL
4117: IFFALSE 4129
// vc_chassis = ru_heavy_tracked else
4119: LD_ADDR_OWVAR 37
4123: PUSH
4124: LD_INT 24
4126: ST_TO_ADDR
4127: GO 4156
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4129: LD_ADDR_OWVAR 37
4133: PUSH
4134: LD_INT 22
4136: PUSH
4137: LD_INT 21
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 1
4146: PPUSH
4147: LD_INT 2
4149: PPUSH
4150: CALL_OW 12
4154: ARRAY
4155: ST_TO_ADDR
// veh = CreateVehicle ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: CALL_OW 45
4165: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4166: LD_VAR 0 4
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4178: LD_VAR 0 4
4182: PPUSH
4183: LD_INT 6
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 49
// end ;
4193: GO 4047
4195: POP
4196: POP
// end ; end_of_file
4197: LD_VAR 0 1
4201: RET
// export function PrepareKurt ; begin
4202: LD_INT 0
4204: PPUSH
// uc_side = 8 ;
4205: LD_ADDR_OWVAR 20
4209: PUSH
4210: LD_INT 8
4212: ST_TO_ADDR
// uc_nation = 2 ;
4213: LD_ADDR_OWVAR 21
4217: PUSH
4218: LD_INT 2
4220: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4221: LD_ADDR_OWVAR 37
4225: PUSH
4226: LD_INT 13
4228: ST_TO_ADDR
// vc_engine = 1 ;
4229: LD_ADDR_OWVAR 39
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// vc_control = 1 ;
4237: LD_ADDR_OWVAR 38
4241: PUSH
4242: LD_INT 1
4244: ST_TO_ADDR
// vc_weapon = 24 ;
4245: LD_ADDR_OWVAR 40
4249: PUSH
4250: LD_INT 24
4252: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4253: LD_ADDR_EXP 26
4257: PUSH
4258: CALL_OW 45
4262: ST_TO_ADDR
// if kurtStatus > 0 then
4263: LD_EXP 27
4267: PUSH
4268: LD_INT 0
4270: GREATER
4271: IFFALSE 4320
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4273: LD_ADDR_EXP 24
4277: PUSH
4278: LD_STRING Kurt
4280: PPUSH
4281: LD_INT 0
4283: PPUSH
4284: CALL 11580 0 2
4288: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4289: LD_EXP 26
4293: PPUSH
4294: LD_INT 4
4296: PPUSH
4297: LD_INT 0
4299: PPUSH
4300: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4304: LD_EXP 24
4308: PPUSH
4309: LD_EXP 26
4313: PPUSH
4314: CALL_OW 52
// end else
4318: GO 4381
// begin hc_name =  ;
4320: LD_ADDR_OWVAR 26
4324: PUSH
4325: LD_STRING 
4327: ST_TO_ADDR
// hc_gallery =  ;
4328: LD_ADDR_OWVAR 33
4332: PUSH
4333: LD_STRING 
4335: ST_TO_ADDR
// otherKurt = PrepareSoldier ( sex_male , 10 ) ;
4336: LD_ADDR_EXP 25
4340: PUSH
4341: LD_INT 1
4343: PPUSH
4344: LD_INT 10
4346: PPUSH
4347: CALL_OW 381
4351: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4352: LD_EXP 26
4356: PPUSH
4357: LD_INT 4
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4367: LD_EXP 25
4371: PPUSH
4372: LD_EXP 26
4376: PPUSH
4377: CALL_OW 52
// end ; end ;
4381: LD_VAR 0 1
4385: RET
// export function PrepareLegionForPlayer ; var i , un ; begin
4386: LD_INT 0
4388: PPUSH
4389: PPUSH
4390: PPUSH
// for i = 1 to 6 do
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: DOUBLE
4397: LD_INT 1
4399: DEC
4400: ST_TO_ADDR
4401: LD_INT 6
4403: PUSH
4404: FOR_TO
4405: IFFALSE 4584
// begin uc_side = 1 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 1
4414: ST_TO_ADDR
// uc_nation = 2 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 2
4422: ST_TO_ADDR
// hc_gallery =  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_name =  ;
4431: LD_ADDR_OWVAR 26
4435: PUSH
4436: LD_STRING 
4438: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4439: LD_EXP 27
4443: PUSH
4444: LD_INT 0
4446: EQUAL
4447: PUSH
4448: LD_EXP 27
4452: PUSH
4453: LD_INT 2
4455: EQUAL
4456: OR
4457: IFFALSE 4509
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , Rand ( 2 , 4 ) ) else
4459: LD_INT 0
4461: PPUSH
4462: LD_INT 1
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: LD_INT 3
4470: PUSH
4471: LD_INT 4
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: ARRAY
4491: PPUSH
4492: LD_INT 2
4494: PPUSH
4495: LD_INT 4
4497: PPUSH
4498: CALL_OW 12
4502: PPUSH
4503: CALL_OW 380
4507: GO 4557
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , Rand ( 6 , 8 ) ) ;
4509: LD_INT 0
4511: PPUSH
4512: LD_INT 1
4514: PUSH
4515: LD_INT 2
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: LD_INT 4
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 1
4532: PPUSH
4533: LD_INT 4
4535: PPUSH
4536: CALL_OW 12
4540: ARRAY
4541: PPUSH
4542: LD_INT 6
4544: PPUSH
4545: LD_INT 8
4547: PPUSH
4548: CALL_OW 12
4552: PPUSH
4553: CALL_OW 380
// un = CreateHuman ;
4557: LD_ADDR_VAR 0 3
4561: PUSH
4562: CALL_OW 44
4566: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4567: LD_VAR 0 3
4571: PPUSH
4572: LD_INT 4
4574: PPUSH
4575: LD_INT 0
4577: PPUSH
4578: CALL_OW 49
// end ;
4582: GO 4404
4584: POP
4585: POP
// end ;
4586: LD_VAR 0 1
4590: RET
// export function PrepareAttackLegion ; var i , un ; begin
4591: LD_INT 0
4593: PPUSH
4594: PPUSH
4595: PPUSH
// for i = 1 to 4 do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_INT 4
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4711
// begin uc_side = 1 ;
4612: LD_ADDR_OWVAR 20
4616: PUSH
4617: LD_INT 1
4619: ST_TO_ADDR
// uc_nation = 2 ;
4620: LD_ADDR_OWVAR 21
4624: PUSH
4625: LD_INT 2
4627: ST_TO_ADDR
// hc_gallery =  ;
4628: LD_ADDR_OWVAR 33
4632: PUSH
4633: LD_STRING 
4635: ST_TO_ADDR
// hc_name =  ;
4636: LD_ADDR_OWVAR 26
4640: PUSH
4641: LD_STRING 
4643: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
4644: LD_INT 0
4646: PPUSH
4647: LD_INT 1
4649: PUSH
4650: LD_INT 8
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 1
4659: PPUSH
4660: LD_INT 2
4662: PPUSH
4663: CALL_OW 12
4667: ARRAY
4668: PPUSH
4669: LD_INT 6
4671: PPUSH
4672: LD_INT 8
4674: PPUSH
4675: CALL_OW 12
4679: PPUSH
4680: CALL_OW 380
// un = CreateHuman ;
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: CALL_OW 44
4693: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_INT 19
4701: PPUSH
4702: LD_INT 0
4704: PPUSH
4705: CALL_OW 49
// end ;
4709: GO 4609
4711: POP
4712: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
4713: LD_INT 1
4715: PPUSH
4716: LD_INT 8
4718: PPUSH
4719: LD_INT 2
4721: PPUSH
4722: LD_INT 1
4724: PPUSH
4725: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
4729: LD_INT 20
4731: PPUSH
4732: LD_INT 3
4734: PPUSH
4735: CALL 14529 0 2
// end ; end_of_file
4739: LD_VAR 0 1
4743: RET
// every 1 do var i ;
4744: GO 4746
4746: DISABLE
4747: LD_INT 0
4749: PPUSH
// begin TeleportExit ( ruteleprt , 117 , 131 ) ;
4750: LD_INT 10
4752: PPUSH
4753: LD_INT 117
4755: PPUSH
4756: LD_INT 131
4758: PPUSH
4759: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4763: LD_INT 137
4765: PPUSH
4766: LD_INT 84
4768: PPUSH
4769: LD_INT 61
4771: PPUSH
4772: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
4776: LD_EXP 1
4780: PPUSH
4781: CALL_OW 310
4785: PPUSH
4786: CALL_OW 87
// InGameOn ;
4790: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 102 ) ;
4794: LD_INT 22
4796: PUSH
4797: LD_INT 1
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PPUSH
4804: CALL_OW 69
4808: PPUSH
4809: LD_INT 130
4811: PPUSH
4812: LD_INT 102
4814: PPUSH
4815: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
4819: LD_VAR 0 1
4823: PPUSH
4824: LD_INT 114
4826: PPUSH
4827: LD_INT 102
4829: PPUSH
4830: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
4834: LD_EXP 1
4838: PPUSH
4839: LD_STRING D1-JMM-1
4841: PPUSH
4842: CALL_OW 88
// if IsOk ( Donaldson ) then
4846: LD_EXP 3
4850: PPUSH
4851: CALL_OW 302
4855: IFFALSE 4893
// begin Say ( Donaldson , D1-Don-1 ) ;
4857: LD_EXP 3
4861: PPUSH
4862: LD_STRING D1-Don-1
4864: PPUSH
4865: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
4869: LD_EXP 1
4873: PPUSH
4874: LD_STRING D1-JMM-2
4876: PPUSH
4877: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
4881: LD_EXP 3
4885: PPUSH
4886: LD_STRING D1-Don-2
4888: PPUSH
4889: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 104 , 96 ) ;
4893: LD_INT 22
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PPUSH
4903: CALL_OW 69
4907: PPUSH
4908: LD_INT 104
4910: PPUSH
4911: LD_INT 96
4913: PPUSH
4914: CALL_OW 171
// end ;
4918: PPOPN 1
4920: END
// every 0 0$1 trigger SeeXY ( 1 , 101 , 92 ) do var i ;
4921: LD_INT 1
4923: PPUSH
4924: LD_INT 101
4926: PPUSH
4927: LD_INT 92
4929: PPUSH
4930: CALL_OW 293
4934: IFFALSE 5109
4936: GO 4938
4938: DISABLE
4939: LD_INT 0
4941: PPUSH
// begin CenterOnXY ( 99 , 89 ) ;
4942: LD_INT 99
4944: PPUSH
4945: LD_INT 89
4947: PPUSH
4948: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
4952: LD_INT 22
4954: PUSH
4955: LD_INT 1
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 26
4964: PUSH
4965: LD_INT 1
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 2
4974: PUSH
4975: LD_INT 25
4977: PUSH
4978: LD_INT 1
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 25
4987: PUSH
4988: LD_INT 2
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 25
4997: PUSH
4998: LD_INT 3
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 25
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: PUSH
5027: LD_EXP 1
5031: DIFF
5032: PPUSH
5033: CALL_OW 69
5037: PPUSH
5038: LD_STRING D1-Sol1-2
5040: PPUSH
5041: LD_STRING 
5043: PPUSH
5044: CALL 11688 0 3
// Say ( JMM , D1-JMM-3 ) ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_STRING D1-JMM-3
5055: PPUSH
5056: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5060: LD_STRING M1
5062: PPUSH
5063: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5067: LD_ADDR_VAR 0 1
5071: PUSH
5072: LD_INT 22
5074: PUSH
5075: LD_INT 1
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PPUSH
5082: CALL_OW 69
5086: PUSH
5087: FOR_IN
5088: IFFALSE 5107
// ComMoveXY ( i , 93 , 83 ) ;
5090: LD_VAR 0 1
5094: PPUSH
5095: LD_INT 93
5097: PPUSH
5098: LD_INT 83
5100: PPUSH
5101: CALL_OW 111
5105: GO 5087
5107: POP
5108: POP
// end ;
5109: PPOPN 1
5111: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5112: GO 5114
5114: DISABLE
5115: LD_INT 0
5117: PPUSH
5118: PPUSH
5119: PPUSH
5120: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_INT 8
5128: PPUSH
5129: LD_INT 22
5131: PUSH
5132: LD_INT 3
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 25
5141: PUSH
5142: LD_INT 9
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: CALL_OW 70
5157: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5158: LD_ADDR_VAR 0 3
5162: PUSH
5163: LD_INT 22
5165: PUSH
5166: LD_INT 1
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: PPUSH
5176: CALL_OW 69
5180: ST_TO_ADDR
// enable ;
5181: ENABLE
// for i in your_units do
5182: LD_ADDR_VAR 0 1
5186: PUSH
5187: LD_VAR 0 3
5191: PUSH
5192: FOR_IN
5193: IFFALSE 5808
// begin if See ( 3 , i ) then
5195: LD_INT 3
5197: PPUSH
5198: LD_VAR 0 1
5202: PPUSH
5203: CALL_OW 292
5207: IFFALSE 5806
// begin disable ;
5209: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_INT 96
5217: PPUSH
5218: LD_INT 85
5220: PPUSH
5221: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5225: LD_VAR 0 2
5229: PPUSH
5230: LD_INT 96
5232: PPUSH
5233: LD_INT 85
5235: PPUSH
5236: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5240: LD_VAR 0 2
5244: PPUSH
5245: LD_INT 96
5247: PPUSH
5248: LD_INT 85
5250: PPUSH
5251: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5255: LD_VAR 0 2
5259: PPUSH
5260: LD_INT 96
5262: PPUSH
5263: LD_INT 85
5265: PPUSH
5266: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5270: LD_VAR 0 2
5274: PPUSH
5275: LD_INT 96
5277: PPUSH
5278: LD_INT 85
5280: PPUSH
5281: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 96
5292: PPUSH
5293: LD_INT 85
5295: PPUSH
5296: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5300: LD_EXP 1
5304: PPUSH
5305: LD_STRING D1a-JMM-1
5307: PPUSH
5308: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5312: LD_EXP 3
5316: PPUSH
5317: LD_STRING D1a-Don-1
5319: PPUSH
5320: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5324: LD_ADDR_VAR 0 1
5328: PUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 69
5343: PUSH
5344: FOR_IN
5345: IFFALSE 5364
// ComMoveXY ( i , 109 , 102 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 109
5354: PPUSH
5355: LD_INT 102
5357: PPUSH
5358: CALL_OW 111
5362: GO 5344
5364: POP
5365: POP
// Say ( JMM , D1a-JMM-2 ) ;
5366: LD_EXP 1
5370: PPUSH
5371: LD_STRING D1a-JMM-2
5373: PPUSH
5374: CALL_OW 88
// wait ( 0 0$10 ) ;
5378: LD_INT 350
5380: PPUSH
5381: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5385: LD_EXP 1
5389: PPUSH
5390: CALL_OW 310
5394: PPUSH
5395: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5399: LD_EXP 3
5403: PPUSH
5404: LD_STRING D1b-Don-1
5406: PPUSH
5407: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5411: LD_EXP 1
5415: PPUSH
5416: LD_STRING D1b-JMM-1
5418: PPUSH
5419: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5423: LD_INT 22
5425: PUSH
5426: LD_INT 1
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 26
5435: PUSH
5436: LD_INT 1
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 2
5445: PUSH
5446: LD_INT 25
5448: PUSH
5449: LD_INT 1
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 25
5458: PUSH
5459: LD_INT 2
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 25
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 25
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_EXP 1
5502: PUSH
5503: EMPTY
5504: LIST
5505: DIFF
5506: PPUSH
5507: CALL_OW 69
5511: PPUSH
5512: LD_STRING D1b-Sol1-1
5514: PPUSH
5515: LD_STRING 
5517: PPUSH
5518: CALL 11688 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5522: LD_EXP 3
5526: PPUSH
5527: LD_STRING D1b-Don-2
5529: PPUSH
5530: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5534: LD_EXP 1
5538: PPUSH
5539: LD_STRING D1b-JMM-2
5541: PPUSH
5542: CALL_OW 88
// dec = ShowQuery1 ;
5546: LD_ADDR_VAR 0 4
5550: PUSH
5551: CALL 12224 0 0
5555: ST_TO_ADDR
// if dec = 1 then
5556: LD_VAR 0 4
5560: PUSH
5561: LD_INT 1
5563: EQUAL
5564: IFFALSE 5670
// begin Say ( JMM , D2-JMM-1 ) ;
5566: LD_EXP 1
5570: PPUSH
5571: LD_STRING D2-JMM-1
5573: PPUSH
5574: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5578: LD_EXP 22
5582: PPUSH
5583: LD_STRING D2-Pow-1
5585: PPUSH
5586: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
5590: LD_EXP 1
5594: PPUSH
5595: LD_STRING D2a-JMM-1
5597: PPUSH
5598: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
5602: LD_EXP 22
5606: PPUSH
5607: LD_STRING D2a-Pow-1
5609: PPUSH
5610: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
5614: LD_EXP 1
5618: PPUSH
5619: LD_STRING D2a-JMM-2
5621: PPUSH
5622: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
5626: LD_EXP 22
5630: PPUSH
5631: LD_STRING D2a-Pow-2
5633: PPUSH
5634: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
5638: LD_EXP 1
5642: PPUSH
5643: LD_STRING D2a-JMM-3
5645: PPUSH
5646: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
5650: LD_EXP 22
5654: PPUSH
5655: LD_STRING D2a-Pow-3
5657: PPUSH
5658: CALL_OW 94
// secondPass = 2 ;
5662: LD_ADDR_EXP 28
5666: PUSH
5667: LD_INT 2
5669: ST_TO_ADDR
// end ; if dec = 2 then
5670: LD_VAR 0 4
5674: PUSH
5675: LD_INT 2
5677: EQUAL
5678: IFFALSE 5772
// begin Say ( JMM , D2-JMM-1 ) ;
5680: LD_EXP 1
5684: PPUSH
5685: LD_STRING D2-JMM-1
5687: PPUSH
5688: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5692: LD_EXP 22
5696: PPUSH
5697: LD_STRING D2-Pow-1
5699: PPUSH
5700: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
5704: LD_EXP 1
5708: PPUSH
5709: LD_STRING D2b-JMM-1
5711: PPUSH
5712: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
5716: LD_EXP 22
5720: PPUSH
5721: LD_STRING D2b-Pow-1
5723: PPUSH
5724: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
5728: LD_EXP 1
5732: PPUSH
5733: LD_STRING D2c-JMM-1
5735: PPUSH
5736: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
5740: LD_EXP 22
5744: PPUSH
5745: LD_STRING D2c-Pow-1
5747: PPUSH
5748: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D2c-JMM-2
5759: PPUSH
5760: CALL_OW 88
// secondPass = 2 ;
5764: LD_ADDR_EXP 28
5768: PUSH
5769: LD_INT 2
5771: ST_TO_ADDR
// end ; if dec = 3 then
5772: LD_VAR 0 4
5776: PUSH
5777: LD_INT 3
5779: EQUAL
5780: IFFALSE 5790
// secondPass = 1 ;
5782: LD_ADDR_EXP 28
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// InGameOff ;
5790: CALL_OW 9
// ruAI = 1 ;
5794: LD_ADDR_EXP 41
5798: PUSH
5799: LD_INT 1
5801: ST_TO_ADDR
// exit ;
5802: POP
5803: POP
5804: GO 5810
// end ; end ;
5806: GO 5192
5808: POP
5809: POP
// end ;
5810: PPOPN 4
5812: END
// every 1 1$0 trigger secondPass = 2 do
5813: LD_EXP 28
5817: PUSH
5818: LD_INT 2
5820: EQUAL
5821: IFFALSE 5948
5823: GO 5825
5825: DISABLE
// begin PowellSupport1 ;
5826: CALL 1620 0 0
// DialogueOn ;
5830: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
5834: LD_EXP 1
5838: PPUSH
5839: LD_STRING DC1-JMM-1
5841: PPUSH
5842: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
5846: LD_EXP 22
5850: PPUSH
5851: LD_STRING DC1-Pow-1
5853: PPUSH
5854: CALL_OW 94
// DialogueOff ;
5858: CALL_OW 7
// wait ( 3 3$0 ) ;
5862: LD_INT 6300
5864: PPUSH
5865: CALL_OW 67
// PowellSupport2 ;
5869: CALL 2249 0 0
// DialogueOn ;
5873: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
5877: LD_EXP 1
5881: PPUSH
5882: LD_STRING DC2-JMM-1
5884: PPUSH
5885: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
5889: LD_EXP 22
5893: PPUSH
5894: LD_STRING DC2-Pow-1
5896: PPUSH
5897: CALL_OW 94
// DialogueOff ;
5901: CALL_OW 7
// wait ( 6 6$0 ) ;
5905: LD_INT 12600
5907: PPUSH
5908: CALL_OW 67
// PowellSupport3 ;
5912: CALL 2787 0 0
// DialogueOn ;
5916: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
5920: LD_EXP 22
5924: PPUSH
5925: LD_STRING DC3-Pow-1
5927: PPUSH
5928: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
5932: LD_EXP 1
5936: PPUSH
5937: LD_STRING DC3-JMM-1
5939: PPUSH
5940: CALL_OW 88
// DialogueOff ;
5944: CALL_OW 7
// end ;
5948: END
// every 4 4$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
5949: LD_EXP 28
5953: PUSH
5954: LD_INT 2
5956: EQUAL
5957: PUSH
5958: LD_INT 22
5960: PUSH
5961: LD_INT 1
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 2
5970: PUSH
5971: LD_INT 30
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: LD_INT 30
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PPUSH
6000: CALL_OW 69
6004: PUSH
6005: LD_INT 0
6007: GREATER
6008: AND
6009: IFFALSE 9220
6011: GO 6013
6013: DISABLE
6014: LD_INT 0
6016: PPUSH
6017: PPUSH
6018: PPUSH
6019: PPUSH
6020: PPUSH
6021: PPUSH
6022: PPUSH
6023: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6024: LD_ADDR_VAR 0 4
6028: PUSH
6029: LD_INT 22
6031: PUSH
6032: LD_INT 1
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 21
6041: PUSH
6042: LD_INT 3
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: LD_INT 2
6051: PUSH
6052: LD_INT 30
6054: PUSH
6055: LD_INT 0
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 30
6064: PUSH
6065: LD_INT 1
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: PPUSH
6082: CALL_OW 69
6086: ST_TO_ADDR
// for i in tmp do
6087: LD_ADDR_VAR 0 1
6091: PUSH
6092: LD_VAR 0 4
6096: PUSH
6097: FOR_IN
6098: IFFALSE 6131
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6100: LD_ADDR_VAR 0 6
6104: PUSH
6105: LD_VAR 0 6
6109: PUSH
6110: LD_VAR 0 1
6114: PPUSH
6115: CALL_OW 274
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 275
6127: PLUS
6128: ST_TO_ADDR
6129: GO 6097
6131: POP
6132: POP
// for i in tmp do
6133: LD_ADDR_VAR 0 1
6137: PUSH
6138: LD_VAR 0 4
6142: PUSH
6143: FOR_IN
6144: IFFALSE 6177
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6146: LD_ADDR_VAR 0 7
6150: PUSH
6151: LD_VAR 0 7
6155: PUSH
6156: LD_VAR 0 1
6160: PPUSH
6161: CALL_OW 274
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 275
6173: PLUS
6174: ST_TO_ADDR
6175: GO 6143
6177: POP
6178: POP
// for i in tmp do
6179: LD_ADDR_VAR 0 1
6183: PUSH
6184: LD_VAR 0 4
6188: PUSH
6189: FOR_IN
6190: IFFALSE 6223
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6192: LD_ADDR_VAR 0 8
6196: PUSH
6197: LD_VAR 0 8
6201: PUSH
6202: LD_VAR 0 1
6206: PPUSH
6207: CALL_OW 274
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 275
6219: PLUS
6220: ST_TO_ADDR
6221: GO 6189
6223: POP
6224: POP
// PrepareKurt ;
6225: CALL 4202 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6229: LD_EXP 26
6233: PPUSH
6234: LD_INT 144
6236: PPUSH
6237: LD_INT 111
6239: PPUSH
6240: CALL_OW 111
// wait ( 0 0$2 ) ;
6244: LD_INT 70
6246: PPUSH
6247: CALL_OW 67
// if kurtStatus > 0 then
6251: LD_EXP 27
6255: PUSH
6256: LD_INT 0
6258: GREATER
6259: IFFALSE 7761
// begin ComExitVehicle ( Kurt ) ;
6261: LD_EXP 24
6265: PPUSH
6266: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6270: LD_EXP 24
6274: PPUSH
6275: CALL_OW 87
// wait ( 0 0$1 ) ;
6279: LD_INT 35
6281: PPUSH
6282: CALL_OW 67
// DialogueOn ;
6286: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) ,  D3-Sol1-1 ,  ) ;
6290: LD_INT 22
6292: PUSH
6293: LD_INT 1
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 26
6302: PUSH
6303: LD_INT 1
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: PPUSH
6314: CALL_OW 69
6318: PPUSH
6319: LD_STRING  D3-Sol1-1
6321: PPUSH
6322: LD_STRING 
6324: PPUSH
6325: CALL 11688 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6329: LD_EXP 24
6333: PPUSH
6334: LD_STRING D3-Kurt-1
6336: PPUSH
6337: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6341: LD_EXP 1
6345: PPUSH
6346: LD_STRING D3-JMM-1
6348: PPUSH
6349: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6353: LD_EXP 24
6357: PPUSH
6358: LD_STRING D3-Kurt-2
6360: PPUSH
6361: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6365: LD_EXP 1
6369: PPUSH
6370: LD_STRING D3-JMM-2
6372: PPUSH
6373: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6377: LD_EXP 24
6381: PPUSH
6382: LD_STRING D3-Kurt-4
6384: PPUSH
6385: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6389: LD_EXP 1
6393: PPUSH
6394: LD_STRING D3-JMM-4
6396: PPUSH
6397: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6401: LD_EXP 24
6405: PPUSH
6406: LD_STRING D3-Kurt-5
6408: PPUSH
6409: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6413: LD_EXP 24
6417: PPUSH
6418: LD_STRING D3-Kurt-5a
6420: PPUSH
6421: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
6425: LD_EXP 24
6429: PPUSH
6430: LD_STRING D3-Kurt-5b
6432: PPUSH
6433: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6437: LD_VAR 0 6
6441: PUSH
6442: LD_INT 60
6444: GREATEREQUAL
6445: PUSH
6446: LD_VAR 0 8
6450: PUSH
6451: LD_INT 60
6453: GREATEREQUAL
6454: AND
6455: IFFALSE 6490
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6457: LD_ADDR_VAR 0 2
6461: PUSH
6462: LD_STRING Q2K
6464: PPUSH
6465: LD_INT 1
6467: PUSH
6468: LD_INT 2
6470: PUSH
6471: LD_INT 3
6473: PUSH
6474: LD_INT 4
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: PPUSH
6483: CALL_OW 98
6487: ST_TO_ADDR
6488: GO 6513
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_STRING Q2K
6497: PPUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 4
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 98
6512: ST_TO_ADDR
// if dec1 = 1 then
6513: LD_VAR 0 2
6517: PUSH
6518: LD_INT 1
6520: EQUAL
6521: IFFALSE 6555
// begin Say ( JMM , D3Ka-JMM-1 ) ;
6523: LD_EXP 1
6527: PPUSH
6528: LD_STRING D3Ka-JMM-1
6530: PPUSH
6531: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
6535: LD_EXP 24
6539: PPUSH
6540: LD_STRING D3Ka-Kurt-1
6542: PPUSH
6543: CALL_OW 88
// warWithLegion = 1 ;
6547: LD_ADDR_EXP 30
6551: PUSH
6552: LD_INT 1
6554: ST_TO_ADDR
// end ; if dec1 = 2 then
6555: LD_VAR 0 2
6559: PUSH
6560: LD_INT 2
6562: EQUAL
6563: IFFALSE 6789
// begin Say ( JMM , D3Kb-JMM-1 ) ;
6565: LD_EXP 1
6569: PPUSH
6570: LD_STRING D3Kb-JMM-1
6572: PPUSH
6573: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
6577: LD_EXP 24
6581: PPUSH
6582: LD_STRING D3Kb-Kurt-1
6584: PPUSH
6585: CALL_OW 88
// for i in tmp do
6589: LD_ADDR_VAR 0 1
6593: PUSH
6594: LD_VAR 0 4
6598: PUSH
6599: FOR_IN
6600: IFFALSE 6687
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 1 ) ;
6602: LD_ADDR_VAR 0 5
6606: PUSH
6607: LD_VAR 0 4
6611: PPUSH
6612: CALL_OW 274
6616: PPUSH
6617: LD_INT 1
6619: PPUSH
6620: CALL_OW 275
6624: ST_TO_ADDR
// if tmp2 >= 60 then
6625: LD_VAR 0 5
6629: PUSH
6630: LD_INT 60
6632: GREATEREQUAL
6633: IFFALSE 6665
// begin SetResourceType ( GetBase ( tmp ) , 1 , tmp2 - 60 ) ;
6635: LD_VAR 0 4
6639: PPUSH
6640: CALL_OW 274
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_VAR 0 5
6652: PUSH
6653: LD_INT 60
6655: MINUS
6656: PPUSH
6657: CALL_OW 277
// break ;
6661: GO 6687
// end else
6663: GO 6685
// begin SetResourceType ( GetBase ( tmp ) , 1 , 0 ) ;
6665: LD_VAR 0 4
6669: PPUSH
6670: CALL_OW 274
6674: PPUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 0
6680: PPUSH
6681: CALL_OW 277
// end ; end ;
6685: GO 6599
6687: POP
6688: POP
// for i in tmp do
6689: LD_ADDR_VAR 0 1
6693: PUSH
6694: LD_VAR 0 4
6698: PUSH
6699: FOR_IN
6700: IFFALSE 6787
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 3 ) ;
6702: LD_ADDR_VAR 0 5
6706: PUSH
6707: LD_VAR 0 4
6711: PPUSH
6712: CALL_OW 274
6716: PPUSH
6717: LD_INT 3
6719: PPUSH
6720: CALL_OW 275
6724: ST_TO_ADDR
// if tmp2 >= 60 then
6725: LD_VAR 0 5
6729: PUSH
6730: LD_INT 60
6732: GREATEREQUAL
6733: IFFALSE 6765
// begin SetResourceType ( GetBase ( tmp ) , 3 , tmp2 - 60 ) ;
6735: LD_VAR 0 4
6739: PPUSH
6740: CALL_OW 274
6744: PPUSH
6745: LD_INT 3
6747: PPUSH
6748: LD_VAR 0 5
6752: PUSH
6753: LD_INT 60
6755: MINUS
6756: PPUSH
6757: CALL_OW 277
// break ;
6761: GO 6787
// end else
6763: GO 6785
// begin SetResourceType ( GetBase ( tmp ) , 3 , 0 ) ;
6765: LD_VAR 0 4
6769: PPUSH
6770: CALL_OW 274
6774: PPUSH
6775: LD_INT 3
6777: PPUSH
6778: LD_INT 0
6780: PPUSH
6781: CALL_OW 277
// end ; end ;
6785: GO 6699
6787: POP
6788: POP
// end ; if dec1 = 3 then
6789: LD_VAR 0 2
6793: PUSH
6794: LD_INT 3
6796: EQUAL
6797: IFFALSE 7032
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
6799: LD_EXP 1
6803: PPUSH
6804: LD_STRING D3Kc1-JMM-1
6806: PPUSH
6807: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
6811: LD_EXP 24
6815: PPUSH
6816: LD_STRING D3Kc1-Kurt-1
6818: PPUSH
6819: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
6823: LD_EXP 1
6827: PPUSH
6828: LD_STRING D3Kc1-JMM-2
6830: PPUSH
6831: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
6835: LD_EXP 24
6839: PPUSH
6840: LD_STRING D3Kc1-Kurt-2
6842: PPUSH
6843: CALL_OW 88
// askSiberite = 1 ;
6847: LD_ADDR_EXP 32
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_STRING Q2b
6862: PPUSH
6863: LD_INT 1
6865: PUSH
6866: LD_INT 2
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: PPUSH
6877: CALL_OW 98
6881: ST_TO_ADDR
// if dec2 = 1 then
6882: LD_VAR 0 3
6886: PUSH
6887: LD_INT 1
6889: EQUAL
6890: IFFALSE 6924
// begin Say ( JMM , D4a-JMM-1 ) ;
6892: LD_EXP 1
6896: PPUSH
6897: LD_STRING D4a-JMM-1
6899: PPUSH
6900: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
6904: LD_EXP 24
6908: PPUSH
6909: LD_STRING D4b-Kurt-1
6911: PPUSH
6912: CALL_OW 88
// warWithLegion = 1 ;
6916: LD_ADDR_EXP 30
6920: PUSH
6921: LD_INT 1
6923: ST_TO_ADDR
// end ; if dec2 = 2 then
6924: LD_VAR 0 3
6928: PUSH
6929: LD_INT 2
6931: EQUAL
6932: IFFALSE 6966
// begin Say ( JMM , D4b-JMM-1 ) ;
6934: LD_EXP 1
6938: PPUSH
6939: LD_STRING D4b-JMM-1
6941: PPUSH
6942: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
6946: LD_EXP 24
6950: PPUSH
6951: LD_STRING D4b-Kurt-1
6953: PPUSH
6954: CALL_OW 88
// warWithLegion = 1 ;
6958: LD_ADDR_EXP 30
6962: PUSH
6963: LD_INT 1
6965: ST_TO_ADDR
// end ; if dec2 = 3 then
6966: LD_VAR 0 3
6970: PUSH
6971: LD_INT 3
6973: EQUAL
6974: IFFALSE 7032
// begin Say ( JMM , D4c-JMM-1 ) ;
6976: LD_EXP 1
6980: PPUSH
6981: LD_STRING D4c-JMM-1
6983: PPUSH
6984: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
6988: LD_EXP 24
6992: PPUSH
6993: LD_STRING D4c-Kurt-1
6995: PPUSH
6996: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7000: LD_EXP 1
7004: PPUSH
7005: LD_STRING D4c-JMM-2
7007: PPUSH
7008: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7012: LD_EXP 24
7016: PPUSH
7017: LD_STRING D4c-Kurt-2
7019: PPUSH
7020: CALL_OW 88
// fakeInfo = 1 ;
7024: LD_ADDR_EXP 31
7028: PUSH
7029: LD_INT 1
7031: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7032: LD_VAR 0 2
7036: PUSH
7037: LD_INT 4
7039: EQUAL
7040: IFFALSE 7697
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7042: LD_EXP 1
7046: PPUSH
7047: LD_STRING D3Kd-JMM-1
7049: PPUSH
7050: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7054: LD_VAR 0 6
7058: PUSH
7059: LD_INT 120
7061: GREATEREQUAL
7062: PUSH
7063: LD_VAR 0 8
7067: PUSH
7068: LD_INT 120
7070: GREATEREQUAL
7071: AND
7072: IFFALSE 7107
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7074: LD_ADDR_VAR 0 3
7078: PUSH
7079: LD_STRING Q2aK
7081: PPUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: LD_INT 4
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 98
7104: ST_TO_ADDR
7105: GO 7130
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7107: LD_ADDR_VAR 0 3
7111: PUSH
7112: LD_STRING Q2K
7114: PPUSH
7115: LD_INT 1
7117: PUSH
7118: LD_INT 4
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 98
7129: ST_TO_ADDR
// if dec2 = 1 then
7130: LD_VAR 0 3
7134: PUSH
7135: LD_INT 1
7137: EQUAL
7138: IFFALSE 7172
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7140: LD_EXP 1
7144: PPUSH
7145: LD_STRING D5Ka-JMM-1
7147: PPUSH
7148: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7152: LD_EXP 24
7156: PPUSH
7157: LD_STRING D5Ka-Kurt-1
7159: PPUSH
7160: CALL_OW 88
// warWithLegion = 1 ;
7164: LD_ADDR_EXP 30
7168: PUSH
7169: LD_INT 1
7171: ST_TO_ADDR
// end ; if dec2 = 2 then
7172: LD_VAR 0 3
7176: PUSH
7177: LD_INT 2
7179: EQUAL
7180: IFFALSE 7206
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7182: LD_EXP 1
7186: PPUSH
7187: LD_STRING D3Kb-JMM-1
7189: PPUSH
7190: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7194: LD_EXP 24
7198: PPUSH
7199: LD_STRING D3Kb-Kurt-1
7201: PPUSH
7202: CALL_OW 88
// end ; if dec2 = 3 then
7206: LD_VAR 0 3
7210: PUSH
7211: LD_INT 3
7213: EQUAL
7214: IFFALSE 7444
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7216: LD_EXP 1
7220: PPUSH
7221: LD_STRING D3Ke-JMM-1
7223: PPUSH
7224: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7228: LD_EXP 24
7232: PPUSH
7233: LD_STRING D3Ke-Kurt-1
7235: PPUSH
7236: CALL_OW 88
// PrepareLegionForPlayer ;
7240: CALL 4386 0 0
// for i in tmp do
7244: LD_ADDR_VAR 0 1
7248: PUSH
7249: LD_VAR 0 4
7253: PUSH
7254: FOR_IN
7255: IFFALSE 7342
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 1 ) ;
7257: LD_ADDR_VAR 0 5
7261: PUSH
7262: LD_VAR 0 4
7266: PPUSH
7267: CALL_OW 274
7271: PPUSH
7272: LD_INT 1
7274: PPUSH
7275: CALL_OW 275
7279: ST_TO_ADDR
// if tmp2 >= 120 then
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 120
7287: GREATEREQUAL
7288: IFFALSE 7320
// begin SetResourceType ( GetBase ( tmp ) , 1 , tmp2 - 120 ) ;
7290: LD_VAR 0 4
7294: PPUSH
7295: CALL_OW 274
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: LD_VAR 0 5
7307: PUSH
7308: LD_INT 120
7310: MINUS
7311: PPUSH
7312: CALL_OW 277
// break ;
7316: GO 7342
// end else
7318: GO 7340
// begin SetResourceType ( GetBase ( tmp ) , 1 , 0 ) ;
7320: LD_VAR 0 4
7324: PPUSH
7325: CALL_OW 274
7329: PPUSH
7330: LD_INT 1
7332: PPUSH
7333: LD_INT 0
7335: PPUSH
7336: CALL_OW 277
// end ; end ;
7340: GO 7254
7342: POP
7343: POP
// for i in tmp do
7344: LD_ADDR_VAR 0 1
7348: PUSH
7349: LD_VAR 0 4
7353: PUSH
7354: FOR_IN
7355: IFFALSE 7442
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 3 ) ;
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 4
7366: PPUSH
7367: CALL_OW 274
7371: PPUSH
7372: LD_INT 3
7374: PPUSH
7375: CALL_OW 275
7379: ST_TO_ADDR
// if tmp2 >= 120 then
7380: LD_VAR 0 5
7384: PUSH
7385: LD_INT 120
7387: GREATEREQUAL
7388: IFFALSE 7420
// begin SetResourceType ( GetBase ( tmp ) , 3 , tmp2 - 120 ) ;
7390: LD_VAR 0 4
7394: PPUSH
7395: CALL_OW 274
7399: PPUSH
7400: LD_INT 3
7402: PPUSH
7403: LD_VAR 0 5
7407: PUSH
7408: LD_INT 120
7410: MINUS
7411: PPUSH
7412: CALL_OW 277
// break ;
7416: GO 7442
// end else
7418: GO 7440
// begin SetResourceType ( GetBase ( tmp ) , 3 , 0 ) ;
7420: LD_VAR 0 4
7424: PPUSH
7425: CALL_OW 274
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: LD_INT 0
7435: PPUSH
7436: CALL_OW 277
// end ; end ;
7440: GO 7354
7442: POP
7443: POP
// end ; if dec2 = 4 then
7444: LD_VAR 0 3
7448: PUSH
7449: LD_INT 4
7451: EQUAL
7452: IFFALSE 7697
// begin if dec1 = 3 then
7454: LD_VAR 0 2
7458: PUSH
7459: LD_INT 3
7461: EQUAL
7462: IFFALSE 7697
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7464: LD_EXP 1
7468: PPUSH
7469: LD_STRING D3Kc1-JMM-1
7471: PPUSH
7472: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7476: LD_EXP 24
7480: PPUSH
7481: LD_STRING D3Kc1-Kurt-1
7483: PPUSH
7484: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7488: LD_EXP 1
7492: PPUSH
7493: LD_STRING D3Kc1-JMM-2
7495: PPUSH
7496: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7500: LD_EXP 24
7504: PPUSH
7505: LD_STRING D3Kc1-Kurt-2
7507: PPUSH
7508: CALL_OW 88
// askSiberite = 1 ;
7512: LD_ADDR_EXP 32
7516: PUSH
7517: LD_INT 1
7519: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7520: LD_ADDR_VAR 0 2
7524: PUSH
7525: LD_STRING Q2b
7527: PPUSH
7528: LD_INT 1
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: LD_INT 3
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: PPUSH
7542: CALL_OW 98
7546: ST_TO_ADDR
// if dec2 = 1 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 1
7554: EQUAL
7555: IFFALSE 7589
// begin Say ( JMM , D4a-JMM-1 ) ;
7557: LD_EXP 1
7561: PPUSH
7562: LD_STRING D4a-JMM-1
7564: PPUSH
7565: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7569: LD_EXP 24
7573: PPUSH
7574: LD_STRING D4b-Kurt-1
7576: PPUSH
7577: CALL_OW 88
// warWithLegion = 1 ;
7581: LD_ADDR_EXP 30
7585: PUSH
7586: LD_INT 1
7588: ST_TO_ADDR
// end ; if dec2 = 2 then
7589: LD_VAR 0 3
7593: PUSH
7594: LD_INT 2
7596: EQUAL
7597: IFFALSE 7631
// begin Say ( JMM , D4b-JMM-1 ) ;
7599: LD_EXP 1
7603: PPUSH
7604: LD_STRING D4b-JMM-1
7606: PPUSH
7607: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7611: LD_EXP 24
7615: PPUSH
7616: LD_STRING D4b-Kurt-1
7618: PPUSH
7619: CALL_OW 88
// warWithLegion = 1 ;
7623: LD_ADDR_EXP 30
7627: PUSH
7628: LD_INT 1
7630: ST_TO_ADDR
// end ; if dec2 = 3 then
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 3
7638: EQUAL
7639: IFFALSE 7697
// begin Say ( JMM , D4c-JMM-1 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D4c-JMM-1
7648: PPUSH
7649: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7653: LD_EXP 24
7657: PPUSH
7658: LD_STRING D4c-Kurt-1
7660: PPUSH
7661: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7665: LD_EXP 1
7669: PPUSH
7670: LD_STRING D4c-JMM-2
7672: PPUSH
7673: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7677: LD_EXP 24
7681: PPUSH
7682: LD_STRING D4c-Kurt-2
7684: PPUSH
7685: CALL_OW 88
// fakeInfo = 1 ;
7689: LD_ADDR_EXP 31
7693: PUSH
7694: LD_INT 1
7696: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
7697: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
7701: LD_EXP 24
7705: PPUSH
7706: LD_EXP 26
7710: PPUSH
7711: CALL_OW 120
// wait ( 0 0$1 ) ;
7715: LD_INT 35
7717: PPUSH
7718: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
7722: LD_EXP 26
7726: PPUSH
7727: LD_INT 4
7729: PPUSH
7730: CALL_OW 113
// wait ( 0 0$3 ) ;
7734: LD_INT 105
7736: PPUSH
7737: CALL_OW 67
// RemoveUnit ( Kurt ) ;
7741: LD_EXP 24
7745: PPUSH
7746: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
7750: LD_EXP 26
7754: PPUSH
7755: CALL_OW 64
// end else
7759: GO 9220
// begin ComExitVehicle ( otherKurt ) ;
7761: LD_EXP 25
7765: PPUSH
7766: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
7770: LD_EXP 25
7774: PPUSH
7775: CALL_OW 87
// wait ( 0 0$1 ) ;
7779: LD_INT 35
7781: PPUSH
7782: CALL_OW 67
// DialogueOn ;
7786: CALL_OW 6
// Say ( otherKurt , D3-Kurt-1 ) ;
7790: LD_EXP 25
7794: PPUSH
7795: LD_STRING D3-Kurt-1
7797: PPUSH
7798: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7802: LD_EXP 1
7806: PPUSH
7807: LD_STRING D3-JMM-1
7809: PPUSH
7810: CALL_OW 88
// Say ( otherKurt , D3-Kurt-2 ) ;
7814: LD_EXP 25
7818: PPUSH
7819: LD_STRING D3-Kurt-2
7821: PPUSH
7822: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7826: LD_EXP 1
7830: PPUSH
7831: LD_STRING D3-JMM-2
7833: PPUSH
7834: CALL_OW 88
// Say ( otherKurt , D3-Kurt-4 ) ;
7838: LD_EXP 25
7842: PPUSH
7843: LD_STRING D3-Kurt-4
7845: PPUSH
7846: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7850: LD_EXP 1
7854: PPUSH
7855: LD_STRING D3-JMM-4
7857: PPUSH
7858: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
7862: LD_EXP 25
7866: PPUSH
7867: LD_STRING D3-Kurt-5
7869: PPUSH
7870: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5a ) ;
7874: LD_EXP 25
7878: PPUSH
7879: LD_STRING D3-Kurt-5a
7881: PPUSH
7882: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
7886: LD_EXP 25
7890: PPUSH
7891: LD_STRING D3-Kurt-5b
7893: PPUSH
7894: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
7898: LD_VAR 0 6
7902: PUSH
7903: LD_INT 100
7905: GREATEREQUAL
7906: PUSH
7907: LD_VAR 0 8
7911: PUSH
7912: LD_INT 100
7914: GREATEREQUAL
7915: AND
7916: IFFALSE 7951
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
7918: LD_ADDR_VAR 0 2
7922: PUSH
7923: LD_STRING Q2
7925: PPUSH
7926: LD_INT 1
7928: PUSH
7929: LD_INT 2
7931: PUSH
7932: LD_INT 3
7934: PUSH
7935: LD_INT 4
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PPUSH
7944: CALL_OW 98
7948: ST_TO_ADDR
7949: GO 7974
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
7951: LD_ADDR_VAR 0 2
7955: PUSH
7956: LD_STRING Q2
7958: PPUSH
7959: LD_INT 3
7961: PUSH
7962: LD_INT 4
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PPUSH
7969: CALL_OW 98
7973: ST_TO_ADDR
// if dec1 = 1 then
7974: LD_VAR 0 2
7978: PUSH
7979: LD_INT 1
7981: EQUAL
7982: IFFALSE 8016
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D3Ka-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
7996: LD_EXP 25
8000: PPUSH
8001: LD_STRING D3Ka-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// warWithLegion = 1 ;
8008: LD_ADDR_EXP 30
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ; if dec1 = 2 then
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 2
8023: EQUAL
8024: IFFALSE 8250
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8026: LD_EXP 1
8030: PPUSH
8031: LD_STRING D3Kb-JMM-1
8033: PPUSH
8034: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8038: LD_EXP 25
8042: PPUSH
8043: LD_STRING D3Kb-Kurt-1
8045: PPUSH
8046: CALL_OW 88
// for i in tmp do
8050: LD_ADDR_VAR 0 1
8054: PUSH
8055: LD_VAR 0 4
8059: PUSH
8060: FOR_IN
8061: IFFALSE 8148
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 1 ) ;
8063: LD_ADDR_VAR 0 5
8067: PUSH
8068: LD_VAR 0 4
8072: PPUSH
8073: CALL_OW 274
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: CALL_OW 275
8085: ST_TO_ADDR
// if tmp2 >= 100 then
8086: LD_VAR 0 5
8090: PUSH
8091: LD_INT 100
8093: GREATEREQUAL
8094: IFFALSE 8126
// begin SetResourceType ( GetBase ( tmp ) , 1 , tmp2 - 100 ) ;
8096: LD_VAR 0 4
8100: PPUSH
8101: CALL_OW 274
8105: PPUSH
8106: LD_INT 1
8108: PPUSH
8109: LD_VAR 0 5
8113: PUSH
8114: LD_INT 100
8116: MINUS
8117: PPUSH
8118: CALL_OW 277
// break ;
8122: GO 8148
// end else
8124: GO 8146
// begin SetResourceType ( GetBase ( tmp ) , 1 , 0 ) ;
8126: LD_VAR 0 4
8130: PPUSH
8131: CALL_OW 274
8135: PPUSH
8136: LD_INT 1
8138: PPUSH
8139: LD_INT 0
8141: PPUSH
8142: CALL_OW 277
// end ; end ;
8146: GO 8060
8148: POP
8149: POP
// for i in tmp do
8150: LD_ADDR_VAR 0 1
8154: PUSH
8155: LD_VAR 0 4
8159: PUSH
8160: FOR_IN
8161: IFFALSE 8248
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 3 ) ;
8163: LD_ADDR_VAR 0 5
8167: PUSH
8168: LD_VAR 0 4
8172: PPUSH
8173: CALL_OW 274
8177: PPUSH
8178: LD_INT 3
8180: PPUSH
8181: CALL_OW 275
8185: ST_TO_ADDR
// if tmp2 >= 100 then
8186: LD_VAR 0 5
8190: PUSH
8191: LD_INT 100
8193: GREATEREQUAL
8194: IFFALSE 8226
// begin SetResourceType ( GetBase ( tmp ) , 3 , tmp2 - 100 ) ;
8196: LD_VAR 0 4
8200: PPUSH
8201: CALL_OW 274
8205: PPUSH
8206: LD_INT 3
8208: PPUSH
8209: LD_VAR 0 5
8213: PUSH
8214: LD_INT 100
8216: MINUS
8217: PPUSH
8218: CALL_OW 277
// break ;
8222: GO 8248
// end else
8224: GO 8246
// begin SetResourceType ( GetBase ( tmp ) , 3 , 0 ) ;
8226: LD_VAR 0 4
8230: PPUSH
8231: CALL_OW 274
8235: PPUSH
8236: LD_INT 3
8238: PPUSH
8239: LD_INT 0
8241: PPUSH
8242: CALL_OW 277
// end ; end ;
8246: GO 8160
8248: POP
8249: POP
// end ; if dec1 = 3 then
8250: LD_VAR 0 2
8254: PUSH
8255: LD_INT 3
8257: EQUAL
8258: IFFALSE 8493
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8260: LD_EXP 1
8264: PPUSH
8265: LD_STRING D3Kc1-JMM-1
8267: PPUSH
8268: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8272: LD_EXP 25
8276: PPUSH
8277: LD_STRING D3Kc1-Kurt-1
8279: PPUSH
8280: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8284: LD_EXP 1
8288: PPUSH
8289: LD_STRING D3Kc1-JMM-2
8291: PPUSH
8292: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8296: LD_EXP 25
8300: PPUSH
8301: LD_STRING D3Kc1-Kurt-2
8303: PPUSH
8304: CALL_OW 88
// askSiberite = 1 ;
8308: LD_ADDR_EXP 32
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8316: LD_ADDR_VAR 0 2
8320: PUSH
8321: LD_STRING Q2b
8323: PPUSH
8324: LD_INT 1
8326: PUSH
8327: LD_INT 2
8329: PUSH
8330: LD_INT 3
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: PPUSH
8338: CALL_OW 98
8342: ST_TO_ADDR
// if dec2 = 1 then
8343: LD_VAR 0 3
8347: PUSH
8348: LD_INT 1
8350: EQUAL
8351: IFFALSE 8385
// begin Say ( JMM , D4a-JMM-1 ) ;
8353: LD_EXP 1
8357: PPUSH
8358: LD_STRING D4a-JMM-1
8360: PPUSH
8361: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8365: LD_EXP 25
8369: PPUSH
8370: LD_STRING D4b-Kurt-1
8372: PPUSH
8373: CALL_OW 88
// warWithLegion = 1 ;
8377: LD_ADDR_EXP 30
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// end ; if dec2 = 2 then
8385: LD_VAR 0 3
8389: PUSH
8390: LD_INT 2
8392: EQUAL
8393: IFFALSE 8427
// begin Say ( JMM , D4b-JMM-1 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D4b-JMM-1
8402: PPUSH
8403: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8407: LD_EXP 25
8411: PPUSH
8412: LD_STRING D4b-Kurt-1
8414: PPUSH
8415: CALL_OW 88
// warWithLegion = 1 ;
8419: LD_ADDR_EXP 30
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// end ; if dec2 = 3 then
8427: LD_VAR 0 3
8431: PUSH
8432: LD_INT 3
8434: EQUAL
8435: IFFALSE 8493
// begin Say ( JMM , D4c-JMM-1 ) ;
8437: LD_EXP 1
8441: PPUSH
8442: LD_STRING D4c-JMM-1
8444: PPUSH
8445: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
8449: LD_EXP 25
8453: PPUSH
8454: LD_STRING D4c-Kurt-1
8456: PPUSH
8457: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8461: LD_EXP 1
8465: PPUSH
8466: LD_STRING D4c-JMM-2
8468: PPUSH
8469: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
8473: LD_EXP 25
8477: PPUSH
8478: LD_STRING D4c-Kurt-2
8480: PPUSH
8481: CALL_OW 88
// fakeInfo = 1 ;
8485: LD_ADDR_EXP 31
8489: PUSH
8490: LD_INT 1
8492: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8493: LD_VAR 0 2
8497: PUSH
8498: LD_INT 4
8500: EQUAL
8501: IFFALSE 9158
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8503: LD_EXP 1
8507: PPUSH
8508: LD_STRING D3Kd-JMM-1
8510: PPUSH
8511: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
8515: LD_VAR 0 6
8519: PUSH
8520: LD_INT 200
8522: GREATEREQUAL
8523: PUSH
8524: LD_VAR 0 8
8528: PUSH
8529: LD_INT 200
8531: GREATEREQUAL
8532: AND
8533: IFFALSE 8568
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
8535: LD_ADDR_VAR 0 3
8539: PUSH
8540: LD_STRING Q2a
8542: PPUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: LD_INT 4
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: PPUSH
8561: CALL_OW 98
8565: ST_TO_ADDR
8566: GO 8591
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
8568: LD_ADDR_VAR 0 3
8572: PUSH
8573: LD_STRING Q2a
8575: PPUSH
8576: LD_INT 1
8578: PUSH
8579: LD_INT 4
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 98
8590: ST_TO_ADDR
// if dec2 = 1 then
8591: LD_VAR 0 3
8595: PUSH
8596: LD_INT 1
8598: EQUAL
8599: IFFALSE 8633
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8601: LD_EXP 1
8605: PPUSH
8606: LD_STRING D5Ka-JMM-1
8608: PPUSH
8609: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
8613: LD_EXP 25
8617: PPUSH
8618: LD_STRING D5Ka-Kurt-1
8620: PPUSH
8621: CALL_OW 88
// warWithLegion = 1 ;
8625: LD_ADDR_EXP 30
8629: PUSH
8630: LD_INT 1
8632: ST_TO_ADDR
// end ; if dec2 = 2 then
8633: LD_VAR 0 3
8637: PUSH
8638: LD_INT 2
8640: EQUAL
8641: IFFALSE 8667
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8643: LD_EXP 1
8647: PPUSH
8648: LD_STRING D3Kb-JMM-1
8650: PPUSH
8651: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8655: LD_EXP 25
8659: PPUSH
8660: LD_STRING D3Kb-Kurt-1
8662: PPUSH
8663: CALL_OW 88
// end ; if dec2 = 3 then
8667: LD_VAR 0 3
8671: PUSH
8672: LD_INT 3
8674: EQUAL
8675: IFFALSE 8905
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8677: LD_EXP 1
8681: PPUSH
8682: LD_STRING D3Ke-JMM-1
8684: PPUSH
8685: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
8689: LD_EXP 25
8693: PPUSH
8694: LD_STRING D3Ke-Kurt-1
8696: PPUSH
8697: CALL_OW 88
// PrepareLegionForPlayer ;
8701: CALL 4386 0 0
// for i in tmp do
8705: LD_ADDR_VAR 0 1
8709: PUSH
8710: LD_VAR 0 4
8714: PUSH
8715: FOR_IN
8716: IFFALSE 8803
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 1 ) ;
8718: LD_ADDR_VAR 0 5
8722: PUSH
8723: LD_VAR 0 4
8727: PPUSH
8728: CALL_OW 274
8732: PPUSH
8733: LD_INT 1
8735: PPUSH
8736: CALL_OW 275
8740: ST_TO_ADDR
// if tmp2 >= 200 then
8741: LD_VAR 0 5
8745: PUSH
8746: LD_INT 200
8748: GREATEREQUAL
8749: IFFALSE 8781
// begin SetResourceType ( GetBase ( tmp ) , 1 , tmp2 - 200 ) ;
8751: LD_VAR 0 4
8755: PPUSH
8756: CALL_OW 274
8760: PPUSH
8761: LD_INT 1
8763: PPUSH
8764: LD_VAR 0 5
8768: PUSH
8769: LD_INT 200
8771: MINUS
8772: PPUSH
8773: CALL_OW 277
// break ;
8777: GO 8803
// end else
8779: GO 8801
// begin SetResourceType ( GetBase ( tmp ) , 1 , 0 ) ;
8781: LD_VAR 0 4
8785: PPUSH
8786: CALL_OW 274
8790: PPUSH
8791: LD_INT 1
8793: PPUSH
8794: LD_INT 0
8796: PPUSH
8797: CALL_OW 277
// end ; end ;
8801: GO 8715
8803: POP
8804: POP
// for i in tmp do
8805: LD_ADDR_VAR 0 1
8809: PUSH
8810: LD_VAR 0 4
8814: PUSH
8815: FOR_IN
8816: IFFALSE 8903
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 3 ) ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_VAR 0 4
8827: PPUSH
8828: CALL_OW 274
8832: PPUSH
8833: LD_INT 3
8835: PPUSH
8836: CALL_OW 275
8840: ST_TO_ADDR
// if tmp2 >= 200 then
8841: LD_VAR 0 5
8845: PUSH
8846: LD_INT 200
8848: GREATEREQUAL
8849: IFFALSE 8881
// begin SetResourceType ( GetBase ( tmp ) , 3 , tmp2 - 200 ) ;
8851: LD_VAR 0 4
8855: PPUSH
8856: CALL_OW 274
8860: PPUSH
8861: LD_INT 3
8863: PPUSH
8864: LD_VAR 0 5
8868: PUSH
8869: LD_INT 200
8871: MINUS
8872: PPUSH
8873: CALL_OW 277
// break ;
8877: GO 8903
// end else
8879: GO 8901
// begin SetResourceType ( GetBase ( tmp ) , 3 , 0 ) ;
8881: LD_VAR 0 4
8885: PPUSH
8886: CALL_OW 274
8890: PPUSH
8891: LD_INT 3
8893: PPUSH
8894: LD_INT 0
8896: PPUSH
8897: CALL_OW 277
// end ; end ;
8901: GO 8815
8903: POP
8904: POP
// end ; if dec2 = 4 then
8905: LD_VAR 0 3
8909: PUSH
8910: LD_INT 4
8912: EQUAL
8913: IFFALSE 9158
// begin if dec1 = 3 then
8915: LD_VAR 0 2
8919: PUSH
8920: LD_INT 3
8922: EQUAL
8923: IFFALSE 9158
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8925: LD_EXP 1
8929: PPUSH
8930: LD_STRING D3Kc1-JMM-1
8932: PPUSH
8933: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8937: LD_EXP 25
8941: PPUSH
8942: LD_STRING D3Kc1-Kurt-1
8944: PPUSH
8945: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8949: LD_EXP 1
8953: PPUSH
8954: LD_STRING D3Kc1-JMM-2
8956: PPUSH
8957: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8961: LD_EXP 25
8965: PPUSH
8966: LD_STRING D3Kc1-Kurt-2
8968: PPUSH
8969: CALL_OW 88
// askSiberite = 1 ;
8973: LD_ADDR_EXP 32
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8981: LD_ADDR_VAR 0 2
8985: PUSH
8986: LD_STRING Q2b
8988: PPUSH
8989: LD_INT 1
8991: PUSH
8992: LD_INT 2
8994: PUSH
8995: LD_INT 3
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: PPUSH
9003: CALL_OW 98
9007: ST_TO_ADDR
// if dec2 = 1 then
9008: LD_VAR 0 3
9012: PUSH
9013: LD_INT 1
9015: EQUAL
9016: IFFALSE 9050
// begin Say ( JMM , D4a-JMM-1 ) ;
9018: LD_EXP 1
9022: PPUSH
9023: LD_STRING D4a-JMM-1
9025: PPUSH
9026: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9030: LD_EXP 25
9034: PPUSH
9035: LD_STRING D4b-Kurt-1
9037: PPUSH
9038: CALL_OW 88
// warWithLegion = 1 ;
9042: LD_ADDR_EXP 30
9046: PUSH
9047: LD_INT 1
9049: ST_TO_ADDR
// end ; if dec2 = 2 then
9050: LD_VAR 0 3
9054: PUSH
9055: LD_INT 2
9057: EQUAL
9058: IFFALSE 9092
// begin Say ( JMM , D4b-JMM-1 ) ;
9060: LD_EXP 1
9064: PPUSH
9065: LD_STRING D4b-JMM-1
9067: PPUSH
9068: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9072: LD_EXP 25
9076: PPUSH
9077: LD_STRING D4b-Kurt-1
9079: PPUSH
9080: CALL_OW 88
// warWithLegion = 1 ;
9084: LD_ADDR_EXP 30
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// end ; if dec2 = 3 then
9092: LD_VAR 0 3
9096: PUSH
9097: LD_INT 3
9099: EQUAL
9100: IFFALSE 9158
// begin Say ( JMM , D4c-JMM-1 ) ;
9102: LD_EXP 1
9106: PPUSH
9107: LD_STRING D4c-JMM-1
9109: PPUSH
9110: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9114: LD_EXP 25
9118: PPUSH
9119: LD_STRING D4c-Kurt-1
9121: PPUSH
9122: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9126: LD_EXP 1
9130: PPUSH
9131: LD_STRING D4c-JMM-2
9133: PPUSH
9134: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9138: LD_EXP 25
9142: PPUSH
9143: LD_STRING D4c-Kurt-2
9145: PPUSH
9146: CALL_OW 88
// fakeInfo = 1 ;
9150: LD_ADDR_EXP 31
9154: PUSH
9155: LD_INT 1
9157: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9158: CALL_OW 7
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9162: LD_EXP 25
9166: PPUSH
9167: LD_EXP 26
9171: PPUSH
9172: CALL_OW 120
// wait ( 0 0$1 ) ;
9176: LD_INT 35
9178: PPUSH
9179: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9183: LD_EXP 26
9187: PPUSH
9188: LD_INT 4
9190: PPUSH
9191: CALL_OW 113
// wait ( 0 0$6 ) ;
9195: LD_INT 210
9197: PPUSH
9198: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9202: LD_EXP 25
9206: PPUSH
9207: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9211: LD_EXP 26
9215: PPUSH
9216: CALL_OW 64
// end ; end ;
9220: PPOPN 8
9222: END
// every 0 0$10 trigger warWithLegion = 1 do
9223: LD_EXP 30
9227: PUSH
9228: LD_INT 1
9230: EQUAL
9231: IFFALSE 9240
9233: GO 9235
9235: DISABLE
// PrepareAttackLegion ;
9236: CALL 4591 0 0
9240: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9241: LD_EXP 15
9245: PPUSH
9246: CALL_OW 305
9250: PUSH
9251: LD_EXP 15
9255: PPUSH
9256: LD_INT 1
9258: PPUSH
9259: CALL_OW 289
9263: NOT
9264: AND
9265: PUSH
9266: LD_EXP 15
9270: PPUSH
9271: LD_INT 2
9273: PPUSH
9274: CALL_OW 289
9278: NOT
9279: AND
9280: PUSH
9281: LD_EXP 15
9285: PPUSH
9286: LD_INT 3
9288: PPUSH
9289: CALL_OW 289
9293: NOT
9294: AND
9295: IFFALSE 9312
9297: GO 9299
9299: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9300: LD_EXP 15
9304: PPUSH
9305: LD_INT 4
9307: PPUSH
9308: CALL_OW 235
9312: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9313: LD_EXP 16
9317: PPUSH
9318: CALL_OW 305
9322: PUSH
9323: LD_EXP 16
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 289
9335: NOT
9336: AND
9337: PUSH
9338: LD_EXP 16
9342: PPUSH
9343: LD_INT 2
9345: PPUSH
9346: CALL_OW 289
9350: NOT
9351: AND
9352: PUSH
9353: LD_EXP 16
9357: PPUSH
9358: LD_INT 3
9360: PPUSH
9361: CALL_OW 289
9365: NOT
9366: AND
9367: IFFALSE 9384
9369: GO 9371
9371: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9372: LD_EXP 16
9376: PPUSH
9377: LD_INT 4
9379: PPUSH
9380: CALL_OW 235
9384: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9385: LD_EXP 17
9389: PPUSH
9390: CALL_OW 305
9394: PUSH
9395: LD_EXP 17
9399: PPUSH
9400: LD_INT 1
9402: PPUSH
9403: CALL_OW 289
9407: NOT
9408: AND
9409: PUSH
9410: LD_EXP 17
9414: PPUSH
9415: LD_INT 2
9417: PPUSH
9418: CALL_OW 289
9422: NOT
9423: AND
9424: PUSH
9425: LD_EXP 17
9429: PPUSH
9430: LD_INT 3
9432: PPUSH
9433: CALL_OW 289
9437: NOT
9438: AND
9439: IFFALSE 9456
9441: GO 9443
9443: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9444: LD_EXP 17
9448: PPUSH
9449: LD_INT 4
9451: PPUSH
9452: CALL_OW 235
9456: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9457: LD_EXP 18
9461: PPUSH
9462: CALL_OW 305
9466: PUSH
9467: LD_EXP 18
9471: PPUSH
9472: LD_INT 1
9474: PPUSH
9475: CALL_OW 289
9479: NOT
9480: AND
9481: PUSH
9482: LD_EXP 18
9486: PPUSH
9487: LD_INT 2
9489: PPUSH
9490: CALL_OW 289
9494: NOT
9495: AND
9496: PUSH
9497: LD_EXP 18
9501: PPUSH
9502: LD_INT 3
9504: PPUSH
9505: CALL_OW 289
9509: NOT
9510: AND
9511: IFFALSE 9528
9513: GO 9515
9515: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9516: LD_EXP 18
9520: PPUSH
9521: LD_INT 4
9523: PPUSH
9524: CALL_OW 235
9528: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9529: LD_EXP 19
9533: PPUSH
9534: CALL_OW 305
9538: PUSH
9539: LD_EXP 19
9543: PPUSH
9544: LD_INT 1
9546: PPUSH
9547: CALL_OW 289
9551: NOT
9552: AND
9553: PUSH
9554: LD_EXP 19
9558: PPUSH
9559: LD_INT 2
9561: PPUSH
9562: CALL_OW 289
9566: NOT
9567: AND
9568: PUSH
9569: LD_EXP 19
9573: PPUSH
9574: LD_INT 3
9576: PPUSH
9577: CALL_OW 289
9581: NOT
9582: AND
9583: PUSH
9584: LD_EXP 19
9588: PPUSH
9589: LD_INT 2
9591: PPUSH
9592: CALL_OW 289
9596: NOT
9597: AND
9598: IFFALSE 9615
9600: GO 9602
9602: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9603: LD_EXP 19
9607: PPUSH
9608: LD_INT 4
9610: PPUSH
9611: CALL_OW 235
9615: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9616: LD_EXP 20
9620: PPUSH
9621: CALL_OW 305
9625: PUSH
9626: LD_EXP 20
9630: PPUSH
9631: LD_INT 1
9633: PPUSH
9634: CALL_OW 289
9638: NOT
9639: AND
9640: PUSH
9641: LD_EXP 20
9645: PPUSH
9646: LD_INT 2
9648: PPUSH
9649: CALL_OW 289
9653: NOT
9654: AND
9655: PUSH
9656: LD_EXP 20
9660: PPUSH
9661: LD_INT 3
9663: PPUSH
9664: CALL_OW 289
9668: NOT
9669: AND
9670: IFFALSE 9687
9672: GO 9674
9674: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9675: LD_EXP 20
9679: PPUSH
9680: LD_INT 4
9682: PPUSH
9683: CALL_OW 235
9687: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9688: LD_EXP 21
9692: PPUSH
9693: CALL_OW 305
9697: PUSH
9698: LD_EXP 21
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 289
9710: NOT
9711: AND
9712: PUSH
9713: LD_EXP 21
9717: PPUSH
9718: LD_INT 2
9720: PPUSH
9721: CALL_OW 289
9725: NOT
9726: AND
9727: PUSH
9728: LD_EXP 21
9732: PPUSH
9733: LD_INT 3
9735: PPUSH
9736: CALL_OW 289
9740: NOT
9741: AND
9742: IFFALSE 9759
9744: GO 9746
9746: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9747: LD_EXP 21
9751: PPUSH
9752: LD_INT 4
9754: PPUSH
9755: CALL_OW 235
9759: END
// every 0 0$1 do var i ;
9760: GO 9762
9762: DISABLE
9763: LD_INT 0
9765: PPUSH
// begin enable ;
9766: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9767: LD_ADDR_VAR 0 1
9771: PUSH
9772: LD_INT 22
9774: PUSH
9775: LD_INT 4
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PPUSH
9782: CALL_OW 69
9786: PUSH
9787: FOR_IN
9788: IFFALSE 9827
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9790: LD_VAR 0 1
9794: PPUSH
9795: LD_INT 4
9797: PPUSH
9798: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9802: LD_VAR 0 1
9806: PPUSH
9807: LD_INT 4
9809: PPUSH
9810: CALL_OW 308
9814: IFFALSE 9825
// RemoveUnit ( i ) ;
9816: LD_VAR 0 1
9820: PPUSH
9821: CALL_OW 64
// end ;
9825: GO 9787
9827: POP
9828: POP
// end ;
9829: PPOPN 1
9831: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9832: LD_EXP 28
9836: PUSH
9837: LD_INT 1
9839: EQUAL
9840: IFFALSE 10215
9842: GO 9844
9844: DISABLE
9845: LD_INT 0
9847: PPUSH
9848: PPUSH
9849: PPUSH
// begin enable ;
9850: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9851: LD_ADDR_VAR 0 2
9855: PUSH
9856: LD_INT 12
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_INT 3
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 2
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: CALL_OW 70
9887: ST_TO_ADDR
// for i in enemyVehs do
9888: LD_ADDR_VAR 0 1
9892: PUSH
9893: LD_VAR 0 2
9897: PUSH
9898: FOR_IN
9899: IFFALSE 10213
// begin if See ( 1 , i ) then
9901: LD_INT 1
9903: PPUSH
9904: LD_VAR 0 1
9908: PPUSH
9909: CALL_OW 292
9913: IFFALSE 10211
// begin disable ;
9915: DISABLE
// DialogueOn ;
9916: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9920: LD_VAR 0 1
9924: PPUSH
9925: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9929: LD_INT 22
9931: PUSH
9932: LD_INT 1
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 26
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: LD_EXP 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: DIFF
9961: PPUSH
9962: CALL_OW 69
9966: PPUSH
9967: LD_STRING DT1-Sol1-1
9969: PPUSH
9970: LD_STRING DT1-FSol1-1
9972: PPUSH
9973: CALL 11688 0 3
// dec = ShowQuery2 ;
9977: LD_ADDR_VAR 0 3
9981: PUSH
9982: CALL 12298 0 0
9986: ST_TO_ADDR
// if dec = 1 then
9987: LD_VAR 0 3
9991: PUSH
9992: LD_INT 1
9994: EQUAL
9995: IFFALSE 10101
// begin Say ( JMM , D2-JMM-1 ) ;
9997: LD_EXP 1
10001: PPUSH
10002: LD_STRING D2-JMM-1
10004: PPUSH
10005: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10009: LD_EXP 22
10013: PPUSH
10014: LD_STRING D2-Pow-1
10016: PPUSH
10017: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10021: LD_EXP 1
10025: PPUSH
10026: LD_STRING D2a-JMM-1
10028: PPUSH
10029: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10033: LD_EXP 22
10037: PPUSH
10038: LD_STRING D2a-Pow-1
10040: PPUSH
10041: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10045: LD_EXP 1
10049: PPUSH
10050: LD_STRING D2a-JMM-2
10052: PPUSH
10053: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10057: LD_EXP 22
10061: PPUSH
10062: LD_STRING D2a-Pow-2
10064: PPUSH
10065: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10069: LD_EXP 1
10073: PPUSH
10074: LD_STRING D2a-JMM-3
10076: PPUSH
10077: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10081: LD_EXP 22
10085: PPUSH
10086: LD_STRING D2a-Pow-3
10088: PPUSH
10089: CALL_OW 94
// secondPass = 2 ;
10093: LD_ADDR_EXP 28
10097: PUSH
10098: LD_INT 2
10100: ST_TO_ADDR
// end ; if dec = 2 then
10101: LD_VAR 0 3
10105: PUSH
10106: LD_INT 2
10108: EQUAL
10109: IFFALSE 10203
// begin Say ( JMM , D2-JMM-1 ) ;
10111: LD_EXP 1
10115: PPUSH
10116: LD_STRING D2-JMM-1
10118: PPUSH
10119: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10123: LD_EXP 22
10127: PPUSH
10128: LD_STRING D2-Pow-1
10130: PPUSH
10131: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING D2b-JMM-1
10142: PPUSH
10143: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10147: LD_EXP 22
10151: PPUSH
10152: LD_STRING D2b-Pow-1
10154: PPUSH
10155: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10159: LD_EXP 1
10163: PPUSH
10164: LD_STRING D2c-JMM-1
10166: PPUSH
10167: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10171: LD_EXP 22
10175: PPUSH
10176: LD_STRING D2c-Pow-1
10178: PPUSH
10179: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10183: LD_EXP 1
10187: PPUSH
10188: LD_STRING D2c-JMM-2
10190: PPUSH
10191: CALL_OW 88
// secondPass = 2 ;
10195: LD_ADDR_EXP 28
10199: PUSH
10200: LD_INT 2
10202: ST_TO_ADDR
// end ; DialogueOff ;
10203: CALL_OW 7
// exit ;
10207: POP
10208: POP
10209: GO 10215
// end ; end ;
10211: GO 9898
10213: POP
10214: POP
// end ;
10215: PPOPN 3
10217: END
// every 0 0$1 do var i , vehicles ;
10218: GO 10220
10220: DISABLE
10221: LD_INT 0
10223: PPUSH
10224: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10225: LD_ADDR_VAR 0 2
10229: PUSH
10230: LD_INT 11
10232: PPUSH
10233: LD_INT 22
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PPUSH
10243: CALL_OW 70
10247: ST_TO_ADDR
// enable ;
10248: ENABLE
// for i in vehicles do
10249: LD_ADDR_VAR 0 1
10253: PUSH
10254: LD_VAR 0 2
10258: PUSH
10259: FOR_IN
10260: IFFALSE 10350
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
10262: LD_INT 1
10264: PPUSH
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL_OW 292
10274: PUSH
10275: LD_EXP 29
10279: PUSH
10280: LD_INT 1
10282: EQUAL
10283: AND
10284: IFFALSE 10348
// begin disable ;
10286: DISABLE
// DialogueOn ;
10287: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10291: LD_INT 22
10293: PUSH
10294: LD_INT 1
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 21
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 69
10319: PPUSH
10320: LD_STRING DT1-Sol1-1
10322: PPUSH
10323: LD_STRING DT1-FSol1-1
10325: PPUSH
10326: CALL 11688 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10330: LD_EXP 1
10334: PPUSH
10335: LD_STRING DT1-JMM-1
10337: PPUSH
10338: CALL_OW 88
// DialogueOff ;
10342: CALL_OW 7
// break ;
10346: GO 10350
// end ; end ;
10348: GO 10259
10350: POP
10351: POP
// end ;
10352: PPOPN 2
10354: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10355: LD_EXP 29
10359: PUSH
10360: LD_INT 1
10362: EQUAL
10363: PUSH
10364: LD_INT 11
10366: PPUSH
10367: LD_INT 22
10369: PUSH
10370: LD_INT 3
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 24
10379: PUSH
10380: LD_INT 251
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 2
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 21
10402: PUSH
10403: LD_INT 1
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: LIST
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 70
10424: PUSH
10425: LD_INT 0
10427: EQUAL
10428: AND
10429: IFFALSE 10513
10431: GO 10433
10433: DISABLE
// begin vehicleTeleported = 3 ;
10434: LD_ADDR_EXP 29
10438: PUSH
10439: LD_INT 3
10441: ST_TO_ADDR
// DialogueOn ;
10442: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10446: LD_EXP 1
10450: PPUSH
10451: LD_STRING DT1a-JMM-1
10453: PPUSH
10454: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10458: LD_INT 22
10460: PUSH
10461: LD_INT 1
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 21
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PPUSH
10482: CALL_OW 69
10486: PPUSH
10487: LD_STRING DT1a-Sol1-1
10489: PPUSH
10490: LD_STRING DT1a-FSol1-1
10492: PPUSH
10493: CALL 11688 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10497: LD_EXP 1
10501: PPUSH
10502: LD_STRING DT1a-JMM-2
10504: PPUSH
10505: CALL_OW 88
// DialogueOff ;
10509: CALL_OW 7
// end ;
10513: END
// every 0 0$1 do var i , vehicles ;
10514: GO 10516
10516: DISABLE
10517: LD_INT 0
10519: PPUSH
10520: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 11
10528: PPUSH
10529: LD_INT 22
10531: PUSH
10532: LD_INT 3
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PPUSH
10539: CALL_OW 70
10543: ST_TO_ADDR
// enable ;
10544: ENABLE
// for i in vehicles do
10545: LD_ADDR_VAR 0 1
10549: PUSH
10550: LD_VAR 0 2
10554: PUSH
10555: FOR_IN
10556: IFFALSE 10634
// begin if See ( 1 , i ) and vehicleTeleported = 2 then
10558: LD_INT 1
10560: PPUSH
10561: LD_VAR 0 1
10565: PPUSH
10566: CALL_OW 292
10570: PUSH
10571: LD_EXP 29
10575: PUSH
10576: LD_INT 2
10578: EQUAL
10579: AND
10580: IFFALSE 10632
// begin disable ;
10582: DISABLE
// DialogueOn ;
10583: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10587: LD_INT 22
10589: PUSH
10590: LD_INT 1
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 21
10599: PUSH
10600: LD_INT 1
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: PPUSH
10616: LD_STRING DT2-Sol1-1
10618: PPUSH
10619: LD_STRING DT2-FSol1-1
10621: PPUSH
10622: CALL 11688 0 3
// DialogueOff ;
10626: CALL_OW 7
// break ;
10630: GO 10634
// end ; end ;
10632: GO 10555
10634: POP
10635: POP
// end ;
10636: PPOPN 2
10638: END
// every 0 0$10 trigger vehicleTeleported = 2 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10639: LD_EXP 29
10643: PUSH
10644: LD_INT 2
10646: EQUAL
10647: PUSH
10648: LD_INT 11
10650: PPUSH
10651: LD_INT 22
10653: PUSH
10654: LD_INT 3
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 24
10663: PUSH
10664: LD_INT 251
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: LD_INT 21
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 21
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 70
10708: PUSH
10709: LD_INT 0
10711: EQUAL
10712: AND
10713: IFFALSE 10797
10715: GO 10717
10717: DISABLE
// begin vehicleTeleported = 4 ;
10718: LD_ADDR_EXP 29
10722: PUSH
10723: LD_INT 4
10725: ST_TO_ADDR
// DialogueOn ;
10726: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10730: LD_EXP 1
10734: PPUSH
10735: LD_STRING DT2a-JMM-1
10737: PPUSH
10738: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
10742: LD_INT 22
10744: PUSH
10745: LD_INT 1
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 21
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: PPUSH
10771: LD_STRING DT2a-Sol1-1
10773: PPUSH
10774: LD_STRING DT2a-FSol1-1
10776: PPUSH
10777: CALL 11688 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
10781: LD_EXP 3
10785: PPUSH
10786: LD_STRING DT2a-Don-1
10788: PPUSH
10789: CALL_OW 88
// DialogueOff ;
10793: CALL_OW 7
// end ;
10797: END
// every 0 0$1 trigger SeeXY ( 1 , 36 , 55 ) do
10798: LD_INT 1
10800: PPUSH
10801: LD_INT 36
10803: PPUSH
10804: LD_INT 55
10806: PPUSH
10807: CALL_OW 293
10811: IFFALSE 10906
10813: GO 10815
10815: DISABLE
// begin DialogueOn ;
10816: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10820: LD_INT 36
10822: PPUSH
10823: LD_INT 55
10825: PPUSH
10826: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10830: LD_INT 22
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 21
10842: PUSH
10843: LD_INT 1
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 69
10858: PPUSH
10859: LD_STRING D5-Sol1-1
10861: PPUSH
10862: LD_STRING D5-FSol1-
10864: PPUSH
10865: CALL 11688 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
10869: LD_EXP 30
10873: PUSH
10874: LD_INT 1
10876: EQUAL
10877: PUSH
10878: LD_EXP 3
10882: PPUSH
10883: CALL_OW 300
10887: AND
10888: IFFALSE 10902
// Say ( Donaldson , D5-Don-1 ) ;
10890: LD_EXP 3
10894: PPUSH
10895: LD_STRING D5-Don-1
10897: PPUSH
10898: CALL_OW 88
// DialogueOff ;
10902: CALL_OW 7
// end ;
10906: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
10907: LD_INT 1
10909: PPUSH
10910: LD_INT 10
10912: PPUSH
10913: CALL_OW 292
10917: IFFALSE 11004
10919: GO 10921
10921: DISABLE
// begin DialogueOn ;
10922: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
10926: LD_INT 10
10928: PPUSH
10929: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10933: LD_INT 22
10935: PUSH
10936: LD_INT 1
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 21
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PPUSH
10957: CALL_OW 69
10961: PUSH
10962: LD_EXP 1
10966: PUSH
10967: EMPTY
10968: LIST
10969: DIFF
10970: PPUSH
10971: LD_STRING DT3-Sol1-1
10973: PPUSH
10974: LD_STRING DT3-FSol1-1
10976: PPUSH
10977: CALL 11688 0 3
// Say ( JMM , DT3-JMM-1 ) ;
10981: LD_EXP 1
10985: PPUSH
10986: LD_STRING DT3-JMM-1
10988: PPUSH
10989: CALL_OW 88
// DialogueOff ;
10993: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
10997: LD_STRING M2
10999: PPUSH
11000: CALL_OW 337
// end ;
11004: END
// every 0 0$1 trigger IsDying ( ruheadlab ) do var i , j , vehs ;
11005: LD_INT 3
11007: PPUSH
11008: CALL_OW 303
11012: IFFALSE 11376
11014: GO 11016
11016: DISABLE
11017: LD_INT 0
11019: PPUSH
11020: PPUSH
11021: PPUSH
// begin ruAI = 0 ;
11022: LD_ADDR_EXP 41
11026: PUSH
11027: LD_INT 0
11029: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11030: LD_ADDR_VAR 0 3
11034: PUSH
11035: LD_INT 10
11037: PPUSH
11038: LD_INT 22
11040: PUSH
11041: LD_INT 3
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 21
11050: PUSH
11051: LD_INT 2
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 58
11060: PUSH
11061: EMPTY
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: PPUSH
11069: CALL_OW 70
11073: ST_TO_ADDR
// DialogueOn ;
11074: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11078: LD_EXP 1
11082: PPUSH
11083: LD_STRING D6-JMM-1
11085: PPUSH
11086: CALL_OW 88
// DialogueOff ;
11090: CALL_OW 7
// for i := 1 to RuScientists do
11094: LD_ADDR_VAR 0 1
11098: PUSH
11099: DOUBLE
11100: LD_INT 1
11102: DEC
11103: ST_TO_ADDR
11104: LD_EXP 34
11108: PUSH
11109: FOR_TO
11110: IFFALSE 11374
// begin for j := 1 to vehs do
11112: LD_ADDR_VAR 0 2
11116: PUSH
11117: DOUBLE
11118: LD_INT 1
11120: DEC
11121: ST_TO_ADDR
11122: LD_VAR 0 3
11126: PUSH
11127: FOR_TO
11128: IFFALSE 11370
// begin ComEnterUnit ( RuScientists [ i ] , vehs [ j ] ) ;
11130: LD_EXP 34
11134: PUSH
11135: LD_VAR 0 1
11139: ARRAY
11140: PPUSH
11141: LD_VAR 0 3
11145: PUSH
11146: LD_VAR 0 2
11150: ARRAY
11151: PPUSH
11152: CALL_OW 120
// if IsOk ( rutp ) then
11156: LD_INT 137
11158: PPUSH
11159: CALL_OW 302
11163: IFFALSE 11316
// begin if j mod 2 then
11165: LD_VAR 0 2
11169: PUSH
11170: LD_INT 2
11172: MOD
11173: IFFALSE 11262
// begin AddComEnterUnit ( [ RuScientists [ i ] , vehs [ j ] ] , rutp ) ;
11175: LD_EXP 34
11179: PUSH
11180: LD_VAR 0 1
11184: ARRAY
11185: PUSH
11186: LD_VAR 0 3
11190: PUSH
11191: LD_VAR 0 2
11195: ARRAY
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PPUSH
11201: LD_INT 137
11203: PPUSH
11204: CALL_OW 180
// AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11208: LD_EXP 34
11212: PUSH
11213: LD_VAR 0 1
11217: ARRAY
11218: PUSH
11219: LD_VAR 0 3
11223: PUSH
11224: LD_VAR 0 2
11228: ARRAY
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PPUSH
11234: LD_INT 13
11236: PUSH
11237: LD_INT 14
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 2
11249: PPUSH
11250: CALL_OW 12
11254: ARRAY
11255: PPUSH
11256: CALL_OW 173
// end else
11260: GO 11314
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11262: LD_EXP 34
11266: PUSH
11267: LD_VAR 0 1
11271: ARRAY
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: LD_VAR 0 2
11282: ARRAY
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: LD_INT 13
11290: PUSH
11291: LD_INT 14
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 2
11303: PPUSH
11304: CALL_OW 12
11308: ARRAY
11309: PPUSH
11310: CALL_OW 173
// end ; end else
11314: GO 11368
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11316: LD_EXP 34
11320: PUSH
11321: LD_VAR 0 1
11325: ARRAY
11326: PUSH
11327: LD_VAR 0 3
11331: PUSH
11332: LD_VAR 0 2
11336: ARRAY
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PPUSH
11342: LD_INT 13
11344: PUSH
11345: LD_INT 14
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 12
11362: ARRAY
11363: PPUSH
11364: CALL_OW 173
// end ; end ;
11368: GO 11127
11370: POP
11371: POP
// end ;
11372: GO 11109
11374: POP
11375: POP
// end ;
11376: PPOPN 3
11378: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
11379: LD_EXP 41
11383: PUSH
11384: LD_INT 0
11386: EQUAL
11387: IFFALSE 11577
11389: GO 11391
11391: DISABLE
11392: LD_INT 0
11394: PPUSH
11395: PPUSH
// begin enable ;
11396: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
11397: LD_ADDR_VAR 0 1
11401: PUSH
11402: LD_INT 13
11404: PPUSH
11405: LD_INT 22
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: PPUSH
11418: CALL_OW 70
11422: PUSH
11423: FOR_IN
11424: IFFALSE 11485
// begin for j in RuScientists do
11426: LD_ADDR_VAR 0 2
11430: PUSH
11431: LD_EXP 34
11435: PUSH
11436: FOR_IN
11437: IFFALSE 11472
// if j = i then
11439: LD_VAR 0 2
11443: PUSH
11444: LD_VAR 0 1
11448: EQUAL
11449: IFFALSE 11470
// RuScientists = RuScientists diff [ i ] ;
11451: LD_ADDR_EXP 34
11455: PUSH
11456: LD_EXP 34
11460: PUSH
11461: LD_VAR 0 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: DIFF
11469: ST_TO_ADDR
11470: GO 11436
11472: POP
11473: POP
// RemoveUnit ( i ) ;
11474: LD_VAR 0 1
11478: PPUSH
11479: CALL_OW 64
// end ;
11483: GO 11423
11485: POP
11486: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
11487: LD_ADDR_VAR 0 1
11491: PUSH
11492: LD_INT 14
11494: PPUSH
11495: LD_INT 22
11497: PUSH
11498: LD_INT 3
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: PPUSH
11508: CALL_OW 70
11512: PUSH
11513: FOR_IN
11514: IFFALSE 11575
// begin for j in RuScientists do
11516: LD_ADDR_VAR 0 2
11520: PUSH
11521: LD_EXP 34
11525: PUSH
11526: FOR_IN
11527: IFFALSE 11562
// if j = i then
11529: LD_VAR 0 2
11533: PUSH
11534: LD_VAR 0 1
11538: EQUAL
11539: IFFALSE 11560
// RuScientists = RuScientists diff [ i ] ;
11541: LD_ADDR_EXP 34
11545: PUSH
11546: LD_EXP 34
11550: PUSH
11551: LD_VAR 0 1
11555: PUSH
11556: EMPTY
11557: LIST
11558: DIFF
11559: ST_TO_ADDR
11560: GO 11526
11562: POP
11563: POP
// RemoveUnit ( i ) ;
11564: LD_VAR 0 1
11568: PPUSH
11569: CALL_OW 64
// end ;
11573: GO 11513
11575: POP
11576: POP
// end ; end_of_file
11577: PPOPN 2
11579: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
11580: LD_INT 0
11582: PPUSH
11583: PPUSH
// if exist_mode then
11584: LD_VAR 0 2
11588: IFFALSE 11607
// unit := CreateCharacter ( ident ) else
11590: LD_ADDR_VAR 0 4
11594: PUSH
11595: LD_VAR 0 1
11599: PPUSH
11600: CALL_OW 34
11604: ST_TO_ADDR
11605: GO 11622
// unit := NewCharacter ( ident ) ;
11607: LD_ADDR_VAR 0 4
11611: PUSH
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 25
11621: ST_TO_ADDR
// result := unit ;
11622: LD_ADDR_VAR 0 3
11626: PUSH
11627: LD_VAR 0 4
11631: ST_TO_ADDR
// end ;
11632: LD_VAR 0 3
11636: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11637: LD_INT 0
11639: PPUSH
11640: PPUSH
// for i in charactersList do
11641: LD_ADDR_VAR 0 4
11645: PUSH
11646: LD_VAR 0 1
11650: PUSH
11651: FOR_IN
11652: IFFALSE 11681
// begin if IsOk ( i ) then
11654: LD_VAR 0 4
11658: PPUSH
11659: CALL_OW 302
11663: IFFALSE 11679
// SaveCharacters ( i , ident ) ;
11665: LD_VAR 0 4
11669: PPUSH
11670: LD_VAR 0 2
11674: PPUSH
11675: CALL_OW 38
// end ;
11679: GO 11651
11681: POP
11682: POP
// end ;
11683: LD_VAR 0 3
11687: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
11693: LD_ADDR_VAR 0 1
11697: PUSH
11698: LD_VAR 0 1
11702: PUSH
11703: LD_EXP 1
11707: PUSH
11708: LD_EXP 7
11712: PUSH
11713: LD_EXP 3
11717: PUSH
11718: LD_EXP 4
11722: PUSH
11723: LD_EXP 5
11727: PUSH
11728: LD_EXP 2
11732: PUSH
11733: LD_EXP 12
11737: PUSH
11738: LD_EXP 13
11742: PUSH
11743: LD_EXP 9
11747: PUSH
11748: LD_EXP 11
11752: PUSH
11753: LD_EXP 6
11757: PUSH
11758: LD_EXP 8
11762: PUSH
11763: LD_EXP 10
11767: PUSH
11768: LD_EXP 22
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: DIFF
11789: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
11790: LD_ADDR_VAR 0 6
11794: PUSH
11795: LD_INT 1
11797: PPUSH
11798: LD_VAR 0 1
11802: PPUSH
11803: CALL_OW 12
11807: ST_TO_ADDR
// for i = 1 to characters do
11808: LD_ADDR_VAR 0 5
11812: PUSH
11813: DOUBLE
11814: LD_INT 1
11816: DEC
11817: ST_TO_ADDR
11818: LD_VAR 0 1
11822: PUSH
11823: FOR_TO
11824: IFFALSE 11934
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11826: LD_VAR 0 5
11830: PUSH
11831: LD_VAR 0 6
11835: EQUAL
11836: PUSH
11837: LD_VAR 0 1
11841: PUSH
11842: LD_VAR 0 5
11846: ARRAY
11847: PPUSH
11848: CALL_OW 258
11852: PUSH
11853: LD_INT 1
11855: EQUAL
11856: AND
11857: IFFALSE 11879
// Say ( characters [ i ] , dialogMID ) ;
11859: LD_VAR 0 1
11863: PUSH
11864: LD_VAR 0 5
11868: ARRAY
11869: PPUSH
11870: LD_VAR 0 2
11874: PPUSH
11875: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11879: LD_VAR 0 5
11883: PUSH
11884: LD_VAR 0 6
11888: EQUAL
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: LD_VAR 0 5
11899: ARRAY
11900: PPUSH
11901: CALL_OW 258
11905: PUSH
11906: LD_INT 2
11908: EQUAL
11909: AND
11910: IFFALSE 11932
// Say ( characters [ i ] , dialogFID ) ;
11912: LD_VAR 0 1
11916: PUSH
11917: LD_VAR 0 5
11921: ARRAY
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: CALL_OW 88
// end ;
11932: GO 11823
11934: POP
11935: POP
// end ;
11936: LD_VAR 0 4
11940: RET
// export function PrepareDifficulty ; var tmp ; begin
11941: LD_INT 0
11943: PPUSH
11944: PPUSH
// if Difficulty = 1 then
11945: LD_OWVAR 67
11949: PUSH
11950: LD_INT 1
11952: EQUAL
11953: IFFALSE 11971
// begin RuSolMinLevel = 8 ;
11955: LD_ADDR_EXP 36
11959: PUSH
11960: LD_INT 8
11962: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
11963: LD_ADDR_EXP 37
11967: PUSH
11968: LD_INT 10
11970: ST_TO_ADDR
// end ; if Difficulty = 2 then
11971: LD_OWVAR 67
11975: PUSH
11976: LD_INT 2
11978: EQUAL
11979: IFFALSE 12073
// begin RuSolMinLevel = 9 ;
11981: LD_ADDR_EXP 36
11985: PUSH
11986: LD_INT 9
11988: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
11989: LD_ADDR_EXP 37
11993: PUSH
11994: LD_INT 10
11996: ST_TO_ADDR
// uc_nation = 3 ;
11997: LD_ADDR_OWVAR 21
12001: PUSH
12002: LD_INT 3
12004: ST_TO_ADDR
// uc_side = 3 ;
12005: LD_ADDR_OWVAR 20
12009: PUSH
12010: LD_INT 3
12012: ST_TO_ADDR
// bc_level = 10 ;
12013: LD_ADDR_OWVAR 43
12017: PUSH
12018: LD_INT 10
12020: ST_TO_ADDR
// bc_type = b_turret ;
12021: LD_ADDR_OWVAR 42
12025: PUSH
12026: LD_INT 33
12028: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12029: LD_ADDR_VAR 0 2
12033: PUSH
12034: LD_INT 86
12036: PPUSH
12037: LD_INT 34
12039: PPUSH
12040: LD_INT 2
12042: PPUSH
12043: CALL_OW 47
12047: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12048: LD_VAR 0 2
12052: PPUSH
12053: LD_INT 49
12055: PPUSH
12056: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12060: LD_INT 64
12062: PPUSH
12063: LD_INT 3
12065: PPUSH
12066: LD_INT 1
12068: PPUSH
12069: CALL_OW 322
// end ; if Difficulty = 3 then
12073: LD_OWVAR 67
12077: PUSH
12078: LD_INT 3
12080: EQUAL
12081: IFFALSE 12219
// begin RuSolMinLevel = 10 ;
12083: LD_ADDR_EXP 36
12087: PUSH
12088: LD_INT 10
12090: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12091: LD_ADDR_EXP 37
12095: PUSH
12096: LD_INT 10
12098: ST_TO_ADDR
// uc_nation = 3 ;
12099: LD_ADDR_OWVAR 21
12103: PUSH
12104: LD_INT 3
12106: ST_TO_ADDR
// uc_side = 3 ;
12107: LD_ADDR_OWVAR 20
12111: PUSH
12112: LD_INT 3
12114: ST_TO_ADDR
// bc_level = 10 ;
12115: LD_ADDR_OWVAR 43
12119: PUSH
12120: LD_INT 10
12122: ST_TO_ADDR
// bc_type = b_turret ;
12123: LD_ADDR_OWVAR 42
12127: PUSH
12128: LD_INT 33
12130: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12131: LD_ADDR_VAR 0 2
12135: PUSH
12136: LD_INT 86
12138: PPUSH
12139: LD_INT 34
12141: PPUSH
12142: LD_INT 2
12144: PPUSH
12145: CALL_OW 47
12149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12150: LD_VAR 0 2
12154: PPUSH
12155: LD_INT 49
12157: PPUSH
12158: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12162: LD_ADDR_VAR 0 2
12166: PUSH
12167: LD_INT 93
12169: PPUSH
12170: LD_INT 31
12172: PPUSH
12173: LD_INT 2
12175: PPUSH
12176: CALL_OW 47
12180: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12181: LD_VAR 0 2
12185: PPUSH
12186: LD_INT 49
12188: PPUSH
12189: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12193: LD_INT 64
12195: PPUSH
12196: LD_INT 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12206: LD_INT 65
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 322
// end ; end ;
12219: LD_VAR 0 1
12223: RET
// export function ShowQuery1 ; begin
12224: LD_INT 0
12226: PPUSH
// case query ( Q1 ) of 1 :
12227: LD_STRING Q1
12229: PPUSH
12230: CALL_OW 97
12234: PUSH
12235: LD_INT 1
12237: DOUBLE
12238: EQUAL
12239: IFTRUE 12243
12241: GO 12254
12243: POP
// result = 1 ; 2 :
12244: LD_ADDR_VAR 0 1
12248: PUSH
12249: LD_INT 1
12251: ST_TO_ADDR
12252: GO 12293
12254: LD_INT 2
12256: DOUBLE
12257: EQUAL
12258: IFTRUE 12262
12260: GO 12273
12262: POP
// result = 2 ; 3 :
12263: LD_ADDR_VAR 0 1
12267: PUSH
12268: LD_INT 2
12270: ST_TO_ADDR
12271: GO 12293
12273: LD_INT 3
12275: DOUBLE
12276: EQUAL
12277: IFTRUE 12281
12279: GO 12292
12281: POP
// result = 3 ; end ;
12282: LD_ADDR_VAR 0 1
12286: PUSH
12287: LD_INT 3
12289: ST_TO_ADDR
12290: GO 12293
12292: POP
// end ;
12293: LD_VAR 0 1
12297: RET
// export function ShowQuery2 ; begin
12298: LD_INT 0
12300: PPUSH
// case query ( Q1a ) of 1 :
12301: LD_STRING Q1a
12303: PPUSH
12304: CALL_OW 97
12308: PUSH
12309: LD_INT 1
12311: DOUBLE
12312: EQUAL
12313: IFTRUE 12317
12315: GO 12328
12317: POP
// result = 1 ; 2 :
12318: LD_ADDR_VAR 0 1
12322: PUSH
12323: LD_INT 1
12325: ST_TO_ADDR
12326: GO 12367
12328: LD_INT 2
12330: DOUBLE
12331: EQUAL
12332: IFTRUE 12336
12334: GO 12347
12336: POP
// result = 2 ; 3 :
12337: LD_ADDR_VAR 0 1
12341: PUSH
12342: LD_INT 2
12344: ST_TO_ADDR
12345: GO 12367
12347: LD_INT 3
12349: DOUBLE
12350: EQUAL
12351: IFTRUE 12355
12353: GO 12366
12355: POP
// result = 3 ; end ;
12356: LD_ADDR_VAR 0 1
12360: PUSH
12361: LD_INT 3
12363: ST_TO_ADDR
12364: GO 12367
12366: POP
// end ;
12367: LD_VAR 0 1
12371: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12372: LD_INT 0
12374: PPUSH
12375: PPUSH
12376: PPUSH
12377: PPUSH
12378: PPUSH
// for i = 1 to count do
12379: LD_ADDR_VAR 0 8
12383: PUSH
12384: DOUBLE
12385: LD_INT 1
12387: DEC
12388: ST_TO_ADDR
12389: LD_VAR 0 6
12393: PUSH
12394: FOR_TO
12395: IFFALSE 12476
// begin uc_side = side ;
12397: LD_ADDR_OWVAR 20
12401: PUSH
12402: LD_VAR 0 1
12406: ST_TO_ADDR
// uc_nation = nation ;
12407: LD_ADDR_OWVAR 21
12411: PUSH
12412: LD_VAR 0 2
12416: ST_TO_ADDR
// hc_gallery =  ;
12417: LD_ADDR_OWVAR 33
12421: PUSH
12422: LD_STRING 
12424: ST_TO_ADDR
// hc_name =  ;
12425: LD_ADDR_OWVAR 26
12429: PUSH
12430: LD_STRING 
12432: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12433: LD_INT 0
12435: PPUSH
12436: LD_VAR 0 5
12440: PPUSH
12441: LD_VAR 0 4
12445: PPUSH
12446: CALL_OW 380
// un = CreateHuman ;
12450: LD_ADDR_VAR 0 10
12454: PUSH
12455: CALL_OW 44
12459: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12460: LD_VAR 0 10
12464: PPUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: CALL_OW 52
// end ;
12474: GO 12394
12476: POP
12477: POP
// end ;
12478: LD_VAR 0 7
12482: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
12483: LD_INT 0
12485: PPUSH
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to 72 do
12489: LD_ADDR_VAR 0 5
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 72
12501: PUSH
12502: FOR_TO
12503: IFFALSE 12561
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
12505: LD_VAR 0 5
12509: PPUSH
12510: LD_VAR 0 1
12514: PPUSH
12515: CALL_OW 321
12519: PUSH
12520: LD_INT 1
12522: EQUAL
12523: PUSH
12524: LD_VAR 0 5
12528: PPUSH
12529: LD_VAR 0 3
12533: PPUSH
12534: CALL_OW 482
12538: PUSH
12539: LD_INT 1
12541: EQUAL
12542: AND
12543: IFFALSE 12559
// AddComResearch ( lab , i ) ;
12545: LD_VAR 0 2
12549: PPUSH
12550: LD_VAR 0 5
12554: PPUSH
12555: CALL_OW 184
12559: GO 12502
12561: POP
12562: POP
// end ;
12563: LD_VAR 0 4
12567: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12568: LD_INT 0
12570: PPUSH
12571: PPUSH
12572: PPUSH
12573: PPUSH
12574: PPUSH
12575: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12576: LD_ADDR_VAR 0 8
12580: PUSH
12581: LD_VAR 0 2
12585: PPUSH
12586: CALL_OW 313
12590: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
12591: LD_ADDR_VAR 0 9
12595: PUSH
12596: LD_VAR 0 3
12600: PPUSH
12601: LD_INT 22
12603: PUSH
12604: LD_VAR 0 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 25
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 24
12625: PUSH
12626: LD_INT 750
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 3
12635: PUSH
12636: LD_INT 54
12638: PUSH
12639: EMPTY
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: PPUSH
12652: CALL_OW 70
12656: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
12657: LD_ADDR_VAR 0 6
12661: PUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 22
12669: PUSH
12670: LD_VAR 0 1
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 21
12681: PUSH
12682: LD_INT 3
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: LD_INT 3
12691: PUSH
12692: LD_INT 24
12694: PUSH
12695: LD_INT 1000
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: PPUSH
12714: CALL_OW 70
12718: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
12719: LD_VAR 0 6
12723: NOT
12724: PUSH
12725: LD_INT 22
12727: PUSH
12728: LD_VAR 0 1
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 25
12739: PUSH
12740: LD_INT 2
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 24
12749: PUSH
12750: LD_INT 250
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: LIST
12761: PPUSH
12762: CALL_OW 69
12766: NOT
12767: AND
12768: IFFALSE 12772
// exit ;
12770: GO 12954
// if buildings_list > 0 and engineerOkInside then
12772: LD_VAR 0 6
12776: PUSH
12777: LD_INT 0
12779: GREATER
12780: PUSH
12781: LD_VAR 0 8
12785: AND
12786: IFFALSE 12797
// ComExitBuilding ( engineerOkInside ) ;
12788: LD_VAR 0 8
12792: PPUSH
12793: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
12797: LD_VAR 0 6
12801: PUSH
12802: LD_INT 0
12804: GREATER
12805: PUSH
12806: LD_VAR 0 9
12810: PUSH
12811: LD_INT 0
12813: GREATER
12814: AND
12815: IFFALSE 12835
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
12817: LD_VAR 0 9
12821: PPUSH
12822: LD_VAR 0 6
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PPUSH
12831: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
12835: LD_VAR 0 6
12839: PUSH
12840: LD_INT 0
12842: EQUAL
12843: PUSH
12844: LD_VAR 0 4
12848: PUSH
12849: LD_INT 0
12851: EQUAL
12852: AND
12853: PUSH
12854: LD_VAR 0 9
12858: PUSH
12859: LD_INT 0
12861: GREATER
12862: AND
12863: IFFALSE 12879
// ComEnterUnit ( engineerOkOutside , building ) ;
12865: LD_VAR 0 9
12869: PPUSH
12870: LD_VAR 0 2
12874: PPUSH
12875: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
12879: LD_VAR 0 9
12883: PUSH
12884: LD_INT 0
12886: GREATER
12887: PUSH
12888: LD_VAR 0 6
12892: PUSH
12893: LD_INT 0
12895: EQUAL
12896: AND
12897: PUSH
12898: LD_VAR 0 4
12902: PUSH
12903: LD_INT 0
12905: GREATER
12906: AND
12907: IFFALSE 12954
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12909: LD_VAR 0 9
12913: PPUSH
12914: LD_VAR 0 4
12918: PUSH
12919: LD_INT 1
12921: ARRAY
12922: PPUSH
12923: LD_VAR 0 4
12927: PUSH
12928: LD_INT 2
12930: ARRAY
12931: PPUSH
12932: LD_VAR 0 4
12936: PUSH
12937: LD_INT 3
12939: ARRAY
12940: PPUSH
12941: LD_VAR 0 4
12945: PUSH
12946: LD_INT 4
12948: ARRAY
12949: PPUSH
12950: CALL_OW 145
// end ;
12954: LD_VAR 0 5
12958: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12959: LD_INT 0
12961: PPUSH
12962: PPUSH
12963: PPUSH
12964: PPUSH
12965: PPUSH
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff RuScientists ;
12970: LD_ADDR_VAR 0 6
12974: PUSH
12975: LD_INT 22
12977: PUSH
12978: LD_VAR 0 1
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 4
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 24
12999: PUSH
13000: LD_INT 251
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 69
13016: PUSH
13017: LD_EXP 34
13021: DIFF
13022: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff RuScientists ;
13023: LD_ADDR_VAR 0 7
13027: PUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: LD_INT 22
13035: PUSH
13036: LD_VAR 0 1
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 25
13047: PUSH
13048: LD_INT 4
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 50
13057: PUSH
13058: EMPTY
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: PPUSH
13066: CALL_OW 70
13070: PUSH
13071: LD_EXP 34
13075: DIFF
13076: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13077: LD_ADDR_VAR 0 10
13081: PUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: LD_INT 22
13089: PUSH
13090: LD_VAR 0 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: LD_INT 24
13114: PUSH
13115: LD_INT 750
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 70
13135: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13136: LD_ADDR_VAR 0 11
13140: PUSH
13141: LD_VAR 0 2
13145: PPUSH
13146: LD_INT 22
13148: PUSH
13149: LD_VAR 0 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 21
13160: PUSH
13161: LD_INT 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 3
13170: PUSH
13171: LD_INT 24
13173: PUSH
13174: LD_INT 1000
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: PPUSH
13190: CALL_OW 70
13194: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13195: LD_VAR 0 10
13199: PUSH
13200: LD_INT 0
13202: GREATER
13203: PUSH
13204: LD_VAR 0 6
13208: PUSH
13209: LD_INT 0
13211: GREATER
13212: AND
13213: IFFALSE 13229
// ComMoveToArea ( damageUnits , healArea ) ;
13215: LD_VAR 0 10
13219: PPUSH
13220: LD_VAR 0 2
13224: PPUSH
13225: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
13229: LD_VAR 0 11
13233: PUSH
13234: LD_INT 0
13236: GREATER
13237: PUSH
13238: LD_VAR 0 6
13242: PUSH
13243: LD_INT 0
13245: GREATER
13246: AND
13247: IFFALSE 13269
// ComExitBuilding ( UnitsInside ( build ) diff RuScientists ) ;
13249: LD_VAR 0 4
13253: PPUSH
13254: CALL_OW 313
13258: PUSH
13259: LD_EXP 34
13263: DIFF
13264: PPUSH
13265: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
13269: LD_VAR 0 11
13273: PUSH
13274: LD_INT 0
13276: GREATER
13277: PUSH
13278: LD_VAR 0 7
13282: PUSH
13283: LD_INT 0
13285: GREATER
13286: AND
13287: IFFALSE 13307
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13289: LD_VAR 0 7
13293: PPUSH
13294: LD_VAR 0 11
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13307: LD_VAR 0 10
13311: PUSH
13312: LD_INT 0
13314: EQUAL
13315: PUSH
13316: LD_VAR 0 11
13320: PUSH
13321: LD_INT 0
13323: EQUAL
13324: AND
13325: PUSH
13326: LD_VAR 0 7
13330: PUSH
13331: LD_INT 0
13333: GREATER
13334: AND
13335: IFFALSE 13440
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13337: LD_ADDR_VAR 0 12
13341: PUSH
13342: LD_INT 22
13344: PUSH
13345: LD_VAR 0 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 21
13356: PUSH
13357: LD_INT 3
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 30
13366: PUSH
13367: LD_INT 8
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13384: LD_ADDR_VAR 0 13
13388: PUSH
13389: LD_INT 1
13391: PPUSH
13392: LD_VAR 0 12
13396: PPUSH
13397: CALL_OW 12
13401: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13402: LD_VAR 0 7
13406: PPUSH
13407: LD_INT 3
13409: PUSH
13410: LD_INT 60
13412: PUSH
13413: EMPTY
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 72
13424: PPUSH
13425: LD_VAR 0 12
13429: PUSH
13430: LD_VAR 0 13
13434: ARRAY
13435: PPUSH
13436: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13440: LD_VAR 0 3
13444: PPUSH
13445: LD_INT 22
13447: PUSH
13448: LD_VAR 0 1
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 25
13459: PUSH
13460: LD_INT 3
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 24
13469: PUSH
13470: LD_INT 751
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 70
13486: PUSH
13487: LD_INT 0
13489: GREATER
13490: PUSH
13491: LD_INT 21
13493: PPUSH
13494: CALL_OW 302
13498: AND
13499: PUSH
13500: LD_INT 21
13502: PPUSH
13503: CALL_OW 255
13507: PUSH
13508: LD_INT 3
13510: EQUAL
13511: AND
13512: IFFALSE 13568
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
13514: LD_VAR 0 3
13518: PPUSH
13519: LD_INT 22
13521: PUSH
13522: LD_VAR 0 1
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 25
13533: PUSH
13534: LD_INT 3
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 24
13543: PUSH
13544: LD_INT 751
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 70
13560: PPUSH
13561: LD_INT 21
13563: PPUSH
13564: CALL_OW 120
// end ;
13568: LD_VAR 0 5
13572: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
13573: LD_INT 0
13575: PPUSH
13576: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13577: LD_INT 22
13579: PUSH
13580: LD_VAR 0 1
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 21
13591: PUSH
13592: LD_INT 2
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: PUSH
13608: LD_INT 18
13610: PPUSH
13611: LD_INT 22
13613: PUSH
13614: LD_VAR 0 1
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 21
13625: PUSH
13626: LD_INT 2
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PPUSH
13637: CALL_OW 70
13641: PUSH
13642: LD_VAR 0 3
13646: LESSEQUAL
13647: DIFF
13648: IFFALSE 13715
// for i = 1 to vehCount do
13650: LD_ADDR_VAR 0 9
13654: PUSH
13655: DOUBLE
13656: LD_INT 1
13658: DEC
13659: ST_TO_ADDR
13660: LD_VAR 0 3
13664: PUSH
13665: FOR_TO
13666: IFFALSE 13713
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
13668: LD_VAR 0 2
13672: PPUSH
13673: LD_VAR 0 7
13677: PPUSH
13678: LD_VAR 0 5
13682: PPUSH
13683: LD_VAR 0 6
13687: PPUSH
13688: LD_VAR 0 4
13692: PUSH
13693: LD_INT 1
13695: PPUSH
13696: LD_VAR 0 4
13700: PPUSH
13701: CALL_OW 12
13705: ARRAY
13706: PPUSH
13707: CALL_OW 185
13711: GO 13665
13713: POP
13714: POP
// end ;
13715: LD_VAR 0 8
13719: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
13720: LD_INT 0
13722: PPUSH
13723: PPUSH
13724: PPUSH
13725: PPUSH
13726: PPUSH
13727: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] then
13728: LD_EXP 39
13732: PUSH
13733: LD_INT 3
13735: PUSH
13736: LD_INT 4
13738: PUSH
13739: LD_INT 4
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: LD_OWVAR 67
13751: ARRAY
13752: GREATEREQUAL
13753: PUSH
13754: LD_EXP 40
13758: PUSH
13759: LD_INT 1
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 3
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: LD_OWVAR 67
13777: ARRAY
13778: GREATEREQUAL
13779: AND
13780: IFFALSE 14013
// begin repeat wait ( 0 0$1 ) ;
13782: LD_INT 35
13784: PPUSH
13785: CALL_OW 67
// for j in russianTanks do
13789: LD_ADDR_VAR 0 4
13793: PUSH
13794: LD_EXP 39
13798: PUSH
13799: FOR_IN
13800: IFFALSE 14001
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
13802: LD_ADDR_VAR 0 6
13806: PUSH
13807: LD_INT 81
13809: PUSH
13810: LD_VAR 0 1
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 101
13821: PUSH
13822: LD_INT 1
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PPUSH
13833: CALL_OW 69
13837: PPUSH
13838: LD_VAR 0 4
13842: PPUSH
13843: CALL_OW 74
13847: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
13848: LD_ADDR_VAR 0 7
13852: PUSH
13853: LD_INT 81
13855: PUSH
13856: LD_VAR 0 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 101
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 2
13877: PUSH
13878: LD_INT 59
13880: PUSH
13881: EMPTY
13882: LIST
13883: PUSH
13884: LD_INT 21
13886: PUSH
13887: LD_INT 1
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 21
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: PPUSH
13918: CALL_OW 69
13922: PPUSH
13923: LD_VAR 0 4
13927: PPUSH
13928: CALL_OW 74
13932: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
13933: LD_VAR 0 4
13937: PPUSH
13938: LD_VAR 0 6
13942: PPUSH
13943: CALL_OW 296
13947: PUSH
13948: LD_INT 8
13950: PLUS
13951: PUSH
13952: LD_VAR 0 4
13956: PPUSH
13957: LD_VAR 0 7
13961: PPUSH
13962: CALL_OW 296
13966: LESS
13967: IFFALSE 13985
// ComAttackUnit ( j , target1 ) else
13969: LD_VAR 0 4
13973: PPUSH
13974: LD_VAR 0 6
13978: PPUSH
13979: CALL_OW 115
13983: GO 13999
// ComAttackUnit ( j , target2 ) ;
13985: LD_VAR 0 4
13989: PPUSH
13990: LD_VAR 0 7
13994: PPUSH
13995: CALL_OW 115
// end ;
13999: GO 13799
14001: POP
14002: POP
// until russianTanks = 0 ;
14003: LD_EXP 39
14007: PUSH
14008: LD_INT 0
14010: EQUAL
14011: IFFALSE 13782
// end ; end ;
14013: LD_VAR 0 2
14017: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14018: LD_INT 0
14020: PPUSH
14021: PPUSH
14022: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] then
14023: LD_EXP 39
14027: PUSH
14028: LD_INT 3
14030: PUSH
14031: LD_INT 4
14033: PUSH
14034: LD_INT 4
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: LD_OWVAR 67
14046: ARRAY
14047: GREATEREQUAL
14048: PUSH
14049: LD_EXP 40
14053: PUSH
14054: LD_INT 1
14056: PUSH
14057: LD_INT 2
14059: PUSH
14060: LD_INT 3
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: PUSH
14068: LD_OWVAR 67
14072: ARRAY
14073: GREATEREQUAL
14074: AND
14075: IFFALSE 14196
// repeat wait ( 0 0$1 ) ;
14077: LD_INT 35
14079: PPUSH
14080: CALL_OW 67
// if russianTimeLapsers > 0 then
14084: LD_EXP 40
14088: PUSH
14089: LD_INT 0
14091: GREATER
14092: IFFALSE 14186
// for j in russianTimeLapsers do
14094: LD_ADDR_VAR 0 3
14098: PUSH
14099: LD_EXP 40
14103: PUSH
14104: FOR_IN
14105: IFFALSE 14184
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14107: LD_ADDR_VAR 0 4
14111: PUSH
14112: LD_INT 81
14114: PUSH
14115: LD_VAR 0 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 101
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PPUSH
14138: CALL_OW 69
14142: PPUSH
14143: LD_VAR 0 3
14147: PPUSH
14148: CALL_OW 74
14152: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
14153: LD_VAR 0 3
14157: PPUSH
14158: LD_VAR 0 4
14162: PPUSH
14163: CALL_OW 250
14167: PPUSH
14168: LD_VAR 0 4
14172: PPUSH
14173: CALL_OW 251
14177: PPUSH
14178: CALL_OW 111
// end ;
14182: GO 14104
14184: POP
14185: POP
// until russianTimeLapsers = 0 ;
14186: LD_EXP 40
14190: PUSH
14191: LD_INT 0
14193: EQUAL
14194: IFFALSE 14077
// end ;
14196: LD_VAR 0 2
14200: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14201: LD_INT 0
14203: PPUSH
14204: PPUSH
14205: PPUSH
14206: PPUSH
14207: PPUSH
14208: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14209: LD_ADDR_VAR 0 6
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_VAR 0 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 9
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14245: LD_ADDR_VAR 0 7
14249: PUSH
14250: LD_INT 81
14252: PUSH
14253: LD_VAR 0 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 3
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 3
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14288: LD_ADDR_VAR 0 4
14292: PUSH
14293: LD_INT 1
14295: PPUSH
14296: LD_INT 3
14298: PPUSH
14299: CALL_OW 12
14303: ST_TO_ADDR
// for i = 1 to list do
14304: LD_ADDR_VAR 0 5
14308: PUSH
14309: DOUBLE
14310: LD_INT 1
14312: DEC
14313: ST_TO_ADDR
14314: LD_VAR 0 6
14318: PUSH
14319: FOR_TO
14320: IFFALSE 14522
// for ta in filter do
14322: LD_ADDR_VAR 0 3
14326: PUSH
14327: LD_VAR 0 7
14331: PUSH
14332: FOR_IN
14333: IFFALSE 14518
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14335: LD_VAR 0 6
14339: PUSH
14340: LD_VAR 0 5
14344: ARRAY
14345: PPUSH
14346: LD_VAR 0 3
14350: PPUSH
14351: CALL_OW 296
14355: PUSH
14356: LD_INT 15
14358: LESSEQUAL
14359: IFFALSE 14516
// begin case c of 1 :
14361: LD_VAR 0 4
14365: PUSH
14366: LD_INT 1
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14412
14374: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14375: LD_VAR 0 6
14379: PUSH
14380: LD_VAR 0 5
14384: ARRAY
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: CALL_OW 250
14395: PPUSH
14396: LD_VAR 0 3
14400: PPUSH
14401: CALL_OW 251
14405: PPUSH
14406: CALL_OW 154
14410: GO 14516
14412: LD_INT 2
14414: DOUBLE
14415: EQUAL
14416: IFTRUE 14420
14418: GO 14484
14420: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14421: LD_VAR 0 6
14425: PUSH
14426: LD_VAR 0 5
14430: ARRAY
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: CALL_OW 250
14441: PUSH
14442: LD_INT 1
14444: NEG
14445: PPUSH
14446: LD_INT 1
14448: PPUSH
14449: CALL_OW 12
14453: PLUS
14454: PPUSH
14455: LD_VAR 0 3
14459: PPUSH
14460: CALL_OW 251
14464: PUSH
14465: LD_INT 1
14467: NEG
14468: PPUSH
14469: LD_INT 1
14471: PPUSH
14472: CALL_OW 12
14476: PLUS
14477: PPUSH
14478: CALL_OW 153
14482: GO 14516
14484: LD_INT 3
14486: DOUBLE
14487: EQUAL
14488: IFTRUE 14492
14490: GO 14515
14492: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14493: LD_VAR 0 6
14497: PUSH
14498: LD_VAR 0 5
14502: ARRAY
14503: PPUSH
14504: LD_VAR 0 3
14508: PPUSH
14509: CALL_OW 115
14513: GO 14516
14515: POP
// end ; end ;
14516: GO 14332
14518: POP
14519: POP
14520: GO 14319
14522: POP
14523: POP
// end ;
14524: LD_VAR 0 2
14528: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
14533: PPUSH
14534: PPUSH
// r := 100 ;
14535: LD_ADDR_VAR 0 5
14539: PUSH
14540: LD_INT 100
14542: ST_TO_ADDR
// x := 0 ;
14543: LD_ADDR_VAR 0 6
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// while ( x < n ) do
14551: LD_VAR 0 6
14555: PUSH
14556: LD_VAR 0 2
14560: LESS
14561: IFFALSE 14848
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14563: LD_ADDR_VAR 0 4
14567: PUSH
14568: DOUBLE
14569: LD_INT 1
14571: DEC
14572: ST_TO_ADDR
14573: LD_VAR 0 1
14577: PPUSH
14578: LD_INT 0
14580: PPUSH
14581: CALL_OW 517
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PUSH
14590: FOR_TO
14591: IFFALSE 14844
// begin if r > 50 then
14593: LD_VAR 0 5
14597: PUSH
14598: LD_INT 50
14600: GREATER
14601: IFFALSE 14820
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14603: LD_VAR 0 1
14607: PPUSH
14608: LD_INT 0
14610: PPUSH
14611: CALL_OW 517
14615: PUSH
14616: LD_INT 1
14618: ARRAY
14619: PUSH
14620: LD_VAR 0 4
14624: ARRAY
14625: PPUSH
14626: LD_VAR 0 1
14630: PPUSH
14631: LD_INT 0
14633: PPUSH
14634: CALL_OW 517
14638: PUSH
14639: LD_INT 2
14641: ARRAY
14642: PUSH
14643: LD_VAR 0 4
14647: ARRAY
14648: PPUSH
14649: CALL_OW 458
14653: NOT
14654: IFFALSE 14804
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: LD_INT 0
14663: PPUSH
14664: CALL_OW 517
14668: PUSH
14669: LD_INT 1
14671: ARRAY
14672: PUSH
14673: LD_VAR 0 4
14677: ARRAY
14678: PPUSH
14679: LD_VAR 0 1
14683: PPUSH
14684: LD_INT 0
14686: PPUSH
14687: CALL_OW 517
14691: PUSH
14692: LD_INT 2
14694: ARRAY
14695: PUSH
14696: LD_VAR 0 4
14700: ARRAY
14701: PPUSH
14702: LD_INT 5
14704: PPUSH
14705: LD_INT 0
14707: PPUSH
14708: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14712: LD_ADDR_EXP 42
14716: PUSH
14717: LD_EXP 42
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: LD_VAR 0 1
14729: PPUSH
14730: LD_INT 0
14732: PPUSH
14733: CALL_OW 517
14737: PUSH
14738: LD_INT 1
14740: ARRAY
14741: PUSH
14742: LD_VAR 0 4
14746: ARRAY
14747: PUSH
14748: LD_VAR 0 1
14752: PPUSH
14753: LD_INT 0
14755: PPUSH
14756: CALL_OW 517
14760: PUSH
14761: LD_INT 2
14763: ARRAY
14764: PUSH
14765: LD_VAR 0 4
14769: ARRAY
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PPUSH
14775: CALL_OW 2
14779: ST_TO_ADDR
// r := 0 ;
14780: LD_ADDR_VAR 0 5
14784: PUSH
14785: LD_INT 0
14787: ST_TO_ADDR
// x := x + 1 ;
14788: LD_ADDR_VAR 0 6
14792: PUSH
14793: LD_VAR 0 6
14797: PUSH
14798: LD_INT 1
14800: PLUS
14801: ST_TO_ADDR
// end else
14802: GO 14818
// r := r + 35 ;
14804: LD_ADDR_VAR 0 5
14808: PUSH
14809: LD_VAR 0 5
14813: PUSH
14814: LD_INT 35
14816: PLUS
14817: ST_TO_ADDR
// end else
14818: GO 14842
// r := r + rand ( 10 , 25 ) ;
14820: LD_ADDR_VAR 0 5
14824: PUSH
14825: LD_VAR 0 5
14829: PUSH
14830: LD_INT 10
14832: PPUSH
14833: LD_INT 25
14835: PPUSH
14836: CALL_OW 12
14840: PLUS
14841: ST_TO_ADDR
// end ;
14842: GO 14590
14844: POP
14845: POP
14846: GO 14551
// end ; end_of_file
14848: LD_VAR 0 3
14852: RET
// on UnitDestroyed ( unit ) do var i ;
14853: LD_INT 0
14855: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
14856: LD_VAR 0 1
14860: PPUSH
14861: CALL_OW 255
14865: PUSH
14866: LD_INT 3
14868: EQUAL
14869: PUSH
14870: LD_VAR 0 1
14874: PPUSH
14875: CALL_OW 247
14879: PUSH
14880: LD_INT 1
14882: EQUAL
14883: AND
14884: IFFALSE 14948
// begin for i in RuScientists do
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: LD_EXP 34
14895: PUSH
14896: FOR_IN
14897: IFFALSE 14946
// if i = unit then
14899: LD_VAR 0 2
14903: PUSH
14904: LD_VAR 0 1
14908: EQUAL
14909: IFFALSE 14944
// begin RuScientists = RuScientists diff [ unit ] ;
14911: LD_ADDR_EXP 34
14915: PUSH
14916: LD_EXP 34
14920: PUSH
14921: LD_VAR 0 1
14925: PUSH
14926: EMPTY
14927: LIST
14928: DIFF
14929: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
14930: LD_ADDR_EXP 35
14934: PUSH
14935: LD_EXP 35
14939: PUSH
14940: LD_INT 1
14942: PLUS
14943: ST_TO_ADDR
// end ;
14944: GO 14896
14946: POP
14947: POP
// end ; end ;
14948: PPOPN 2
14950: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
14951: LD_VAR 0 1
14955: PUSH
14956: LD_INT 10
14958: EQUAL
14959: PUSH
14960: LD_VAR 0 2
14964: PPUSH
14965: CALL_OW 255
14969: PUSH
14970: LD_INT 1
14972: EQUAL
14973: AND
14974: PUSH
14975: LD_EXP 44
14979: PUSH
14980: LD_INT 0
14982: EQUAL
14983: AND
14984: IFFALSE 15085
// begin eventVar1 = 1 ;
14986: LD_ADDR_EXP 44
14990: PUSH
14991: LD_INT 1
14993: ST_TO_ADDR
// teleportExplored = 1 ;
14994: LD_ADDR_EXP 33
14998: PUSH
14999: LD_INT 1
15001: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15002: LD_STRING M2a
15004: PPUSH
15005: CALL_OW 337
// wait ( 0 0$2 ) ;
15009: LD_INT 70
15011: PPUSH
15012: CALL_OW 67
// DialogueOn ;
15016: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15020: LD_INT 22
15022: PUSH
15023: LD_INT 1
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: PPUSH
15033: CALL_OW 69
15037: PPUSH
15038: LD_STRING DT3a-Sol1-1
15040: PPUSH
15041: LD_STRING DT3a-FSol1-1
15043: PPUSH
15044: CALL 11688 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15048: LD_EXP 1
15052: PPUSH
15053: LD_STRING DT3a-JMM-1
15055: PPUSH
15056: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15060: LD_VAR 0 2
15064: PPUSH
15065: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a1 ) ;
15069: LD_EXP 1
15073: PPUSH
15074: LD_STRING DT3a-JMM-1a1
15076: PPUSH
15077: CALL_OW 88
// DialogueOff ;
15081: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
15085: LD_VAR 0 1
15089: PUSH
15090: LD_INT 10
15092: EQUAL
15093: PUSH
15094: LD_VAR 0 2
15098: PPUSH
15099: CALL_OW 247
15103: PUSH
15104: LD_INT 2
15106: EQUAL
15107: AND
15108: PUSH
15109: LD_VAR 0 2
15113: PPUSH
15114: CALL_OW 255
15118: PUSH
15119: LD_INT 3
15121: EQUAL
15122: AND
15123: PUSH
15124: LD_EXP 29
15128: PUSH
15129: LD_INT 0
15131: EQUAL
15132: AND
15133: IFFALSE 15143
// vehicleTeleported = 1 ;
15135: LD_ADDR_EXP 29
15139: PUSH
15140: LD_INT 1
15142: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
15143: LD_VAR 0 1
15147: PUSH
15148: LD_INT 10
15150: EQUAL
15151: PUSH
15152: LD_VAR 0 2
15156: PPUSH
15157: CALL_OW 247
15161: PUSH
15162: LD_INT 2
15164: EQUAL
15165: AND
15166: PUSH
15167: LD_VAR 0 2
15171: PPUSH
15172: CALL_OW 255
15176: PUSH
15177: LD_INT 3
15179: EQUAL
15180: AND
15181: PUSH
15182: LD_EXP 29
15186: PUSH
15187: LD_INT 2
15189: EQUAL
15190: AND
15191: IFFALSE 15201
// vehicleTeleported = 3 ;
15193: LD_ADDR_EXP 29
15197: PUSH
15198: LD_INT 3
15200: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 3 then
15201: LD_VAR 0 1
15205: PUSH
15206: LD_INT 10
15208: EQUAL
15209: PUSH
15210: LD_VAR 0 2
15214: PPUSH
15215: CALL_OW 247
15219: PUSH
15220: LD_INT 2
15222: EQUAL
15223: AND
15224: PUSH
15225: LD_VAR 0 2
15229: PPUSH
15230: CALL_OW 255
15234: PUSH
15235: LD_INT 3
15237: EQUAL
15238: AND
15239: PUSH
15240: LD_EXP 29
15244: PUSH
15245: LD_INT 3
15247: EQUAL
15248: AND
15249: IFFALSE 15259
// vehicleTeleported = 4 ;
15251: LD_ADDR_EXP 29
15255: PUSH
15256: LD_INT 4
15258: ST_TO_ADDR
// end ;
15259: PPOPN 2
15261: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
15262: LD_VAR 0 2
15266: PUSH
15267: LD_INT 21
15269: EQUAL
15270: PUSH
15271: LD_VAR 0 2
15275: PUSH
15276: LD_INT 112
15278: EQUAL
15279: OR
15280: IFFALSE 15413
// if GetSide ( vehicle ) = 3 then
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 255
15291: PUSH
15292: LD_INT 3
15294: EQUAL
15295: IFFALSE 15413
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
15297: LD_VAR 0 1
15301: PPUSH
15302: CALL_OW 264
15306: PUSH
15307: LD_INT 46
15309: EQUAL
15310: PUSH
15311: LD_VAR 0 1
15315: PPUSH
15316: CALL_OW 264
15320: PUSH
15321: LD_INT 45
15323: EQUAL
15324: OR
15325: PUSH
15326: LD_VAR 0 1
15330: PPUSH
15331: CALL_OW 264
15335: PUSH
15336: LD_INT 44
15338: EQUAL
15339: OR
15340: IFFALSE 15370
// begin russianTanks = russianTanks ^ vehicle ;
15342: LD_ADDR_EXP 39
15346: PUSH
15347: LD_EXP 39
15351: PUSH
15352: LD_VAR 0 1
15356: ADD
15357: ST_TO_ADDR
// ComEnterUnit ( vehicle , ruteleprt ) ;
15358: LD_VAR 0 1
15362: PPUSH
15363: LD_INT 10
15365: PPUSH
15366: CALL_OW 120
// end ; if GetWeapon ( vehicle ) = 49 then
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 264
15379: PUSH
15380: LD_INT 49
15382: EQUAL
15383: IFFALSE 15413
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
15385: LD_ADDR_EXP 40
15389: PUSH
15390: LD_EXP 40
15394: PUSH
15395: LD_VAR 0 1
15399: ADD
15400: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: LD_INT 137
15408: PPUSH
15409: CALL_OW 120
// end ; end ; end ;
15413: PPOPN 2
15415: END
// on UnitGoesToRed ( unit ) do var i ;
15416: LD_INT 0
15418: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL_OW 255
15428: PUSH
15429: LD_INT 3
15431: EQUAL
15432: PUSH
15433: LD_VAR 0 1
15437: PPUSH
15438: CALL_OW 247
15442: PUSH
15443: LD_INT 2
15445: EQUAL
15446: AND
15447: IFFALSE 15565
// begin if russianTanks > 0 then
15449: LD_EXP 39
15453: PUSH
15454: LD_INT 0
15456: GREATER
15457: IFFALSE 15507
// for i in russianTanks do
15459: LD_ADDR_VAR 0 2
15463: PUSH
15464: LD_EXP 39
15468: PUSH
15469: FOR_IN
15470: IFFALSE 15505
// if i = unit then
15472: LD_VAR 0 2
15476: PUSH
15477: LD_VAR 0 1
15481: EQUAL
15482: IFFALSE 15503
// russianTanks = russianTanks diff [ unit ] ;
15484: LD_ADDR_EXP 39
15488: PUSH
15489: LD_EXP 39
15493: PUSH
15494: LD_VAR 0 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: DIFF
15502: ST_TO_ADDR
15503: GO 15469
15505: POP
15506: POP
// if russianTimeLapsers > 0 then
15507: LD_EXP 40
15511: PUSH
15512: LD_INT 0
15514: GREATER
15515: IFFALSE 15565
// for i in russianTimeLapsers do
15517: LD_ADDR_VAR 0 2
15521: PUSH
15522: LD_EXP 40
15526: PUSH
15527: FOR_IN
15528: IFFALSE 15563
// if i = unit then
15530: LD_VAR 0 2
15534: PUSH
15535: LD_VAR 0 1
15539: EQUAL
15540: IFFALSE 15561
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
15542: LD_ADDR_EXP 40
15546: PUSH
15547: LD_EXP 40
15551: PUSH
15552: LD_VAR 0 1
15556: PUSH
15557: EMPTY
15558: LIST
15559: DIFF
15560: ST_TO_ADDR
15561: GO 15527
15563: POP
15564: POP
// end ; end ;
15565: PPOPN 2
15567: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
15568: LD_VAR 0 2
15572: PPUSH
15573: CALL_OW 255
15577: PUSH
15578: LD_INT 3
15580: EQUAL
15581: PUSH
15582: LD_INT 21
15584: PPUSH
15585: CALL_OW 255
15589: PUSH
15590: LD_INT 3
15592: EQUAL
15593: AND
15594: PUSH
15595: LD_INT 21
15597: PPUSH
15598: CALL_OW 302
15602: AND
15603: IFFALSE 15617
// ComEnterUnit ( human , ru_fact ) ;
15605: LD_VAR 0 2
15609: PPUSH
15610: LD_INT 21
15612: PPUSH
15613: CALL_OW 120
// end ; end_of_file
15617: PPOPN 2
15619: END
// every 0 0$1 trigger ruAI = 1 do
15620: LD_EXP 41
15624: PUSH
15625: LD_INT 1
15627: EQUAL
15628: IFFALSE 15727
15630: GO 15632
15632: DISABLE
// begin enable ;
15633: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
15634: LD_INT 3
15636: PPUSH
15637: LD_INT 6
15639: PPUSH
15640: LD_INT 9
15642: PPUSH
15643: LD_EXP 38
15647: PPUSH
15648: CALL 12568 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
15652: LD_INT 3
15654: PPUSH
15655: LD_INT 4
15657: PPUSH
15658: LD_INT 10
15660: PPUSH
15661: LD_EXP 38
15665: PPUSH
15666: CALL 12568 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
15670: LD_INT 3
15672: PPUSH
15673: LD_INT 16
15675: PPUSH
15676: LD_INT 9
15678: PPUSH
15679: LD_INT 91
15681: PPUSH
15682: CALL 12959 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
15686: LD_INT 3
15688: PPUSH
15689: LD_INT 17
15691: PPUSH
15692: LD_INT 10
15694: PPUSH
15695: LD_INT 47
15697: PUSH
15698: LD_INT 129
15700: PUSH
15701: LD_INT 135
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: PPUSH
15709: CALL 12959 0 4
// AttackVehicles ( 3 ) ;
15713: LD_INT 3
15715: PPUSH
15716: CALL 13720 0 1
// IntBazooka ( 3 ) ;
15720: LD_INT 3
15722: PPUSH
15723: CALL 14201 0 1
// end ;
15727: END
// every 0 0$1 do
15728: GO 15730
15730: DISABLE
// begin enable ;
15731: ENABLE
// TimeLapsersAI ( 3 ) ;
15732: LD_INT 3
15734: PPUSH
15735: CALL 14018 0 1
// end ;
15739: END
// every 0 0$1 do
15740: GO 15742
15742: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
15743: LD_INT 3
15745: PPUSH
15746: LD_INT 91
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: CALL 12483 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
15756: LD_INT 3
15758: PPUSH
15759: LD_INT 47
15761: PPUSH
15762: LD_INT 3
15764: PPUSH
15765: CALL 12483 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
15769: LD_INT 3
15771: PPUSH
15772: LD_INT 129
15774: PPUSH
15775: LD_INT 3
15777: PPUSH
15778: CALL 12483 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
15782: LD_INT 3
15784: PPUSH
15785: LD_INT 3
15787: PPUSH
15788: LD_INT 3
15790: PPUSH
15791: CALL 12483 0 3
// end ;
15795: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
15796: LD_EXP 28
15800: PUSH
15801: LD_INT 2
15803: EQUAL
15804: PUSH
15805: LD_INT 22
15807: PUSH
15808: LD_INT 3
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 21
15817: PUSH
15818: LD_INT 2
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 50
15827: PUSH
15828: EMPTY
15829: LIST
15830: PUSH
15831: LD_INT 3
15833: PUSH
15834: LD_INT 58
15836: PUSH
15837: EMPTY
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 69
15854: PUSH
15855: LD_INT 18
15857: PPUSH
15858: LD_INT 22
15860: PUSH
15861: LD_INT 3
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 21
15870: PUSH
15871: LD_INT 2
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PPUSH
15882: CALL_OW 70
15886: PUSH
15887: LD_INT 0
15889: EQUAL
15890: DIFF
15891: AND
15892: IFFALSE 16029
15894: GO 15896
15896: DISABLE
// begin enable ;
15897: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 24 ) ;
15898: LD_INT 3
15900: PPUSH
15901: LD_INT 21
15903: PPUSH
15904: LD_INT 3
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: LD_INT 4
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: PUSH
15918: LD_OWVAR 67
15922: ARRAY
15923: PPUSH
15924: LD_INT 46
15926: PUSH
15927: LD_INT 45
15929: PUSH
15930: LD_INT 44
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: PPUSH
15938: LD_INT 3
15940: PPUSH
15941: LD_INT 1
15943: PUSH
15944: LD_INT 3
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 1
15953: PPUSH
15954: LD_INT 2
15956: PPUSH
15957: CALL_OW 12
15961: ARRAY
15962: PPUSH
15963: LD_INT 24
15965: PPUSH
15966: CALL 13573 0 7
// if russianTimeLapsers = 0 then
15970: LD_EXP 40
15974: PUSH
15975: LD_INT 0
15977: EQUAL
15978: IFFALSE 16029
// BuildingVehicle ( 3 , rufab2 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
15980: LD_INT 3
15982: PPUSH
15983: LD_INT 112
15985: PPUSH
15986: LD_INT 3
15988: PUSH
15989: LD_INT 4
15991: PUSH
15992: LD_INT 4
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: LIST
15999: PUSH
16000: LD_OWVAR 67
16004: ARRAY
16005: PPUSH
16006: LD_INT 49
16008: PUSH
16009: LD_INT 49
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: LD_INT 3
16018: PPUSH
16019: LD_INT 3
16021: PPUSH
16022: LD_INT 24
16024: PPUSH
16025: CALL 13573 0 7
// end ;
16029: END
// every 0 0$1 trigger arabianMines do var i ;
16030: LD_EXP 42
16034: IFFALSE 16155
16036: GO 16038
16038: DISABLE
16039: LD_INT 0
16041: PPUSH
// begin enable ;
16042: ENABLE
// for i in arabianMines do
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: LD_EXP 42
16052: PUSH
16053: FOR_IN
16054: IFFALSE 16153
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
16056: LD_INT 22
16058: PUSH
16059: LD_INT 1
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 92
16068: PUSH
16069: LD_VAR 0 1
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PUSH
16078: LD_VAR 0 1
16082: PUSH
16083: LD_INT 2
16085: ARRAY
16086: PUSH
16087: LD_INT 3
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: IFFALSE 16151
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
16106: LD_VAR 0 1
16110: PUSH
16111: LD_INT 1
16113: ARRAY
16114: PPUSH
16115: LD_VAR 0 1
16119: PUSH
16120: LD_INT 2
16122: ARRAY
16123: PPUSH
16124: LD_INT 5
16126: PPUSH
16127: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
16131: LD_ADDR_EXP 42
16135: PUSH
16136: LD_EXP 42
16140: PPUSH
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 3
16150: ST_TO_ADDR
// end ; end ;
16151: GO 16053
16153: POP
16154: POP
// end ; end_of_file
16155: PPOPN 1
16157: END
// every 0 0$1 trigger RuScientists = [ ] do
16158: LD_EXP 34
16162: PUSH
16163: EMPTY
16164: EQUAL
16165: IFFALSE 16370
16167: GO 16169
16169: DISABLE
// begin if sciCounter = 0 then
16170: LD_EXP 35
16174: PUSH
16175: LD_INT 0
16177: EQUAL
16178: IFFALSE 16204
// begin Say ( JMM , D7a-JMM-1 ) ;
16180: LD_EXP 1
16184: PPUSH
16185: LD_STRING D7a-JMM-1
16187: PPUSH
16188: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
16192: LD_EXP 22
16196: PPUSH
16197: LD_STRING D7a-Pow-1
16199: PPUSH
16200: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
16204: LD_EXP 35
16208: PUSH
16209: LD_INT 0
16211: GREATER
16212: PUSH
16213: LD_EXP 35
16217: PUSH
16218: LD_INT 6
16220: LESS
16221: AND
16222: IFFALSE 16248
// begin Say ( JMM , D7b-JMM-1 ) ;
16224: LD_EXP 1
16228: PPUSH
16229: LD_STRING D7b-JMM-1
16231: PPUSH
16232: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
16236: LD_EXP 22
16240: PPUSH
16241: LD_STRING D7b-Pow-1
16243: PPUSH
16244: CALL_OW 94
// end ; if sciCounter = 6 then
16248: LD_EXP 35
16252: PUSH
16253: LD_INT 6
16255: EQUAL
16256: IFFALSE 16366
// begin Say ( JMM , D7c-JMM-1 ) ;
16258: LD_EXP 1
16262: PPUSH
16263: LD_STRING D7c-JMM-1
16265: PPUSH
16266: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
16270: LD_EXP 22
16274: PPUSH
16275: LD_STRING D7c-Pow-1
16277: PPUSH
16278: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
16282: LD_EXP 1
16286: PPUSH
16287: LD_STRING D7d-JMM-1
16289: PPUSH
16290: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
16294: LD_EXP 22
16298: PPUSH
16299: LD_STRING D7d-Pow-1
16301: PPUSH
16302: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
16306: LD_EXP 1
16310: PPUSH
16311: LD_STRING D7d-JMM-2
16313: PPUSH
16314: CALL_OW 88
// if askSiberite = 1 then
16318: LD_EXP 32
16322: PUSH
16323: LD_INT 1
16325: EQUAL
16326: IFFALSE 16342
// begin Say ( JMM , D7d-JMM-2a ) ;
16328: LD_EXP 1
16332: PPUSH
16333: LD_STRING D7d-JMM-2a
16335: PPUSH
16336: CALL_OW 88
// end else
16340: GO 16354
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
16342: LD_EXP 22
16346: PPUSH
16347: LD_STRING D7d-Pow-2
16349: PPUSH
16350: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
16354: LD_EXP 22
16358: PPUSH
16359: LD_STRING D7d-Pow-2a
16361: PPUSH
16362: CALL_OW 94
// end ; FinishMission ;
16366: CALL 16371 0 0
// end ;
16370: END
// export function FinishMission ; begin
16371: LD_INT 0
16373: PPUSH
// if teleportExplored = 1 then
16374: LD_EXP 33
16378: PUSH
16379: LD_INT 1
16381: EQUAL
16382: IFFALSE 16396
// AddMedal ( Teleport , 1 ) else
16384: LD_STRING Teleport
16386: PPUSH
16387: LD_INT 1
16389: PPUSH
16390: CALL_OW 101
16394: GO 16407
// AddMedal ( Teleport , - 1 ) ;
16396: LD_STRING Teleport
16398: PPUSH
16399: LD_INT 1
16401: NEG
16402: PPUSH
16403: CALL_OW 101
// if sciCounter > 0 and sciCounter < 6 then
16407: LD_EXP 35
16411: PUSH
16412: LD_INT 0
16414: GREATER
16415: PUSH
16416: LD_EXP 35
16420: PUSH
16421: LD_INT 6
16423: LESS
16424: AND
16425: IFFALSE 16439
// AddMedal ( Materials , 1 ) else
16427: LD_STRING Materials
16429: PPUSH
16430: LD_INT 1
16432: PPUSH
16433: CALL_OW 101
16437: GO 16450
// AddMedal ( Materials , - 1 ) ;
16439: LD_STRING Materials
16441: PPUSH
16442: LD_INT 1
16444: NEG
16445: PPUSH
16446: CALL_OW 101
// if sciCounter = 6 then
16450: LD_EXP 35
16454: PUSH
16455: LD_INT 6
16457: EQUAL
16458: IFFALSE 16482
// begin AddMedal ( Scientists , 1 ) ;
16460: LD_STRING Scientists
16462: PPUSH
16463: LD_INT 1
16465: PPUSH
16466: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
16470: LD_INT 1
16472: PPUSH
16473: LD_STRING 12_SciDed_1
16475: PPUSH
16476: CALL_OW 39
// end else
16480: GO 16503
// begin AddMedal ( Scientists , - 1 ) ;
16482: LD_STRING Scientists
16484: PPUSH
16485: LD_INT 1
16487: NEG
16488: PPUSH
16489: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
16493: LD_INT 0
16495: PPUSH
16496: LD_STRING 12_SciDed_1
16498: PPUSH
16499: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
16503: LD_EXP 31
16507: PPUSH
16508: LD_STRING 12_MainDepositFake_1
16510: PPUSH
16511: CALL_OW 39
// GiveMedals ( MAIN ) ;
16515: LD_STRING MAIN
16517: PPUSH
16518: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
16522: LD_INT 22
16524: PUSH
16525: LD_INT 1
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 2
16544: PUSH
16545: LD_INT 25
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 25
16557: PUSH
16558: LD_INT 2
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 25
16567: PUSH
16568: LD_INT 3
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 25
16577: PUSH
16578: LD_INT 4
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 25
16587: PUSH
16588: LD_INT 5
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 25
16597: PUSH
16598: LD_INT 8
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: PPUSH
16619: CALL_OW 69
16623: PPUSH
16624: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16628: LD_EXP 1
16632: PPUSH
16633: LD_EXP 43
16637: PUSH
16638: LD_STRING JMM
16640: STR
16641: PPUSH
16642: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
16646: LD_EXP 7
16650: PPUSH
16651: LD_EXP 43
16655: PUSH
16656: LD_STRING Brown
16658: STR
16659: PPUSH
16660: CALL 11637 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
16664: LD_EXP 3
16668: PPUSH
16669: LD_EXP 43
16673: PUSH
16674: LD_STRING Donaldson
16676: STR
16677: PPUSH
16678: CALL 11637 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16682: LD_EXP 4
16686: PPUSH
16687: LD_EXP 43
16691: PUSH
16692: LD_STRING Bobby
16694: STR
16695: PPUSH
16696: CALL 11637 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16700: LD_EXP 5
16704: PPUSH
16705: LD_EXP 43
16709: PUSH
16710: LD_STRING Cyrus
16712: STR
16713: PPUSH
16714: CALL 11637 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16718: LD_EXP 2
16722: PPUSH
16723: LD_EXP 43
16727: PUSH
16728: LD_STRING Lisa
16730: STR
16731: PPUSH
16732: CALL 11637 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
16736: LD_EXP 12
16740: PPUSH
16741: LD_EXP 43
16745: PUSH
16746: LD_STRING Frank
16748: STR
16749: PPUSH
16750: CALL 11637 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
16754: LD_EXP 13
16758: PPUSH
16759: LD_EXP 43
16763: PUSH
16764: LD_STRING Kikuchi
16766: STR
16767: PPUSH
16768: CALL 11637 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
16772: LD_EXP 9
16776: PPUSH
16777: LD_EXP 43
16781: PUSH
16782: LD_STRING Houten
16784: STR
16785: PPUSH
16786: CALL 11637 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
16790: LD_EXP 11
16794: PPUSH
16795: LD_EXP 43
16799: PUSH
16800: LD_STRING Gary
16802: STR
16803: PPUSH
16804: CALL 11637 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
16808: LD_EXP 10
16812: PPUSH
16813: LD_EXP 43
16817: PUSH
16818: LD_STRING Cornell
16820: STR
16821: PPUSH
16822: CALL 11637 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
16826: LD_EXP 6
16830: PPUSH
16831: LD_EXP 43
16835: PUSH
16836: LD_STRING Denis
16838: STR
16839: PPUSH
16840: CALL 11637 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
16844: LD_EXP 8
16848: PPUSH
16849: LD_EXP 43
16853: PUSH
16854: LD_STRING Gladstone
16856: STR
16857: PPUSH
16858: CALL 11637 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
16862: LD_INT 50
16864: PUSH
16865: EMPTY
16866: LIST
16867: PUSH
16868: LD_INT 22
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 21
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: LD_INT 25
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 25
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 25
16913: PUSH
16914: LD_INT 3
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 25
16933: PUSH
16934: LD_INT 5
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 25
16943: PUSH
16944: LD_INT 8
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 69
16970: PUSH
16971: LD_EXP 1
16975: PUSH
16976: LD_EXP 7
16980: PUSH
16981: LD_EXP 3
16985: PUSH
16986: LD_EXP 4
16990: PUSH
16991: LD_EXP 5
16995: PUSH
16996: LD_EXP 2
17000: PUSH
17001: LD_EXP 12
17005: PUSH
17006: LD_EXP 8
17010: PUSH
17011: LD_EXP 13
17015: PUSH
17016: LD_EXP 6
17020: PUSH
17021: LD_EXP 9
17025: PUSH
17026: LD_EXP 11
17030: PUSH
17031: LD_EXP 10
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: DIFF
17051: PPUSH
17052: LD_STRING 12_other_survivors
17054: PPUSH
17055: CALL_OW 38
// YouWin ;
17059: CALL_OW 103
// end ;
17063: LD_VAR 0 1
17067: RET
