// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 44
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 43
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// eventVar1 = 0 ;
 159: LD_ADDR_EXP 47
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// mission_prefix = 12_ ;
 167: LD_ADDR_EXP 46
 171: PUSH
 172: LD_STRING 12_
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 48
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareNature ;
 183: CALL 15530 0 0
// PrepareDifficulty ;
 187: CALL 12476 0 0
// PrepareVehicles ;
 191: CALL 1539 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 195: LD_INT 4
 197: PPUSH
 198: LD_INT 0
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL 1115 0 4
// PrepareAmericanHeroes ;
 211: CALL 549 0 0
// PrepareRussianCommander ;
 215: CALL 2858 0 0
// PrepareWestBase ;
 219: CALL 3370 0 0
// PrepareEastBase ;
 223: CALL 2930 0 0
// PrepareOtherRussians ;
 227: CALL 3482 0 0
// end ;
 231: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 232: LD_EXP 48
 236: PUSH
 237: LD_INT 1
 239: EQUAL
 240: IFFALSE 546
 242: GO 244
 244: DISABLE
 245: LD_INT 0
 247: PPUSH
// begin enable ;
 248: ENABLE
// fogoff ( true ) ;
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 256: LD_ADDR_VAR 0 1
 260: PUSH
 261: LD_INT 22
 263: PUSH
 264: LD_INT 1
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: LD_INT 21
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PPUSH
 285: CALL_OW 69
 289: PUSH
 290: FOR_IN
 291: IFFALSE 307
// SetLives ( i , 1000 ) ;
 293: LD_VAR 0 1
 297: PPUSH
 298: LD_INT 1000
 300: PPUSH
 301: CALL_OW 234
 305: GO 290
 307: POP
 308: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 309: LD_ADDR_VAR 0 1
 313: PUSH
 314: LD_INT 22
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 2
 326: PUSH
 327: LD_INT 30
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 30
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PPUSH
 356: CALL_OW 69
 360: PUSH
 361: FOR_IN
 362: IFFALSE 386
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 364: LD_VAR 0 1
 368: PPUSH
 369: CALL_OW 274
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_INT 9999
 379: PPUSH
 380: CALL_OW 277
 384: GO 361
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 2
 405: PUSH
 406: LD_INT 30
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 30
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PPUSH
 435: CALL_OW 69
 439: PUSH
 440: FOR_IN
 441: IFFALSE 465
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 443: LD_VAR 0 1
 447: PPUSH
 448: CALL_OW 274
 452: PPUSH
 453: LD_INT 2
 455: PPUSH
 456: LD_INT 9999
 458: PPUSH
 459: CALL_OW 277
 463: GO 440
 465: POP
 466: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 467: LD_ADDR_VAR 0 1
 471: PUSH
 472: LD_INT 22
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: LD_INT 30
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PUSH
 495: LD_INT 30
 497: PUSH
 498: LD_INT 1
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: LIST
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PPUSH
 514: CALL_OW 69
 518: PUSH
 519: FOR_IN
 520: IFFALSE 544
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 522: LD_VAR 0 1
 526: PPUSH
 527: CALL_OW 274
 531: PPUSH
 532: LD_INT 3
 534: PPUSH
 535: LD_INT 9999
 537: PPUSH
 538: CALL_OW 277
 542: GO 519
 544: POP
 545: POP
// end ; end_of_file
 546: PPOPN 1
 548: END
// export function PrepareAmericanHeroes ; begin
 549: LD_INT 0
 551: PPUSH
// uc_side = 1 ;
 552: LD_ADDR_OWVAR 20
 556: PUSH
 557: LD_INT 1
 559: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 560: LD_ADDR_EXP 14
 564: PUSH
 565: LD_STRING 11_others
 567: PPUSH
 568: CALL_OW 31
 572: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 573: LD_ADDR_EXP 1
 577: PUSH
 578: LD_STRING 11_JMM
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL 12115 0 2
 588: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 589: LD_EXP 1
 593: PPUSH
 594: LD_INT 1
 596: PPUSH
 597: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 601: LD_EXP 1
 605: PPUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 1
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: LD_INT 21
 618: PUSH
 619: LD_INT 2
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: LD_INT 58
 628: PUSH
 629: EMPTY
 630: LIST
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: PPUSH
 637: CALL_OW 69
 641: PUSH
 642: LD_INT 1
 644: ARRAY
 645: PPUSH
 646: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 650: LD_STRING 11_Lisa
 652: PPUSH
 653: CALL_OW 28
 657: PUSH
 658: LD_INT 1
 660: EQUAL
 661: IFFALSE 708
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 663: LD_ADDR_EXP 2
 667: PUSH
 668: LD_STRING 11_Lisa
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: CALL 12115 0 2
 678: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 679: LD_EXP 2
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 691: LD_EXP 2
 695: PPUSH
 696: LD_INT 4
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL_OW 49
// end else
 706: GO 724
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 708: LD_INT 4
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: LD_INT 1
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL 1115 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 724: LD_STRING 11_Donaldson
 726: PPUSH
 727: CALL_OW 28
 731: PUSH
 732: LD_INT 1
 734: EQUAL
 735: IFFALSE 782
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 737: LD_ADDR_EXP 3
 741: PUSH
 742: LD_STRING 11_Donaldson
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: CALL 12115 0 2
 752: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 753: LD_EXP 3
 757: PPUSH
 758: LD_INT 1
 760: PPUSH
 761: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 765: LD_EXP 3
 769: PPUSH
 770: LD_INT 4
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end else
 780: GO 798
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 782: LD_INT 4
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL 1115 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 798: LD_STRING 11_Cyrus
 800: PPUSH
 801: CALL_OW 28
 805: PUSH
 806: LD_INT 1
 808: EQUAL
 809: IFFALSE 856
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 811: LD_ADDR_EXP 5
 815: PUSH
 816: LD_STRING 11_Cyrus
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: CALL 12115 0 2
 826: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 827: LD_EXP 5
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 839: LD_EXP 5
 843: PPUSH
 844: LD_INT 4
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// end else
 854: GO 872
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 856: LD_INT 4
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 1115 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 872: LD_STRING 11_Denis
 874: PPUSH
 875: CALL_OW 28
 879: PUSH
 880: LD_INT 1
 882: EQUAL
 883: IFFALSE 930
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 885: LD_ADDR_EXP 6
 889: PUSH
 890: LD_STRING 11_Denis
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL 12115 0 2
 900: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 901: LD_EXP 6
 905: PPUSH
 906: LD_INT 4
 908: PPUSH
 909: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 913: LD_EXP 6
 917: PPUSH
 918: LD_INT 4
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
// end else
 928: GO 946
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 930: LD_INT 4
 932: PPUSH
 933: LD_INT 0
 935: PPUSH
 936: LD_INT 1
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL 1115 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 946: LD_STRING 11_Frank
 948: PPUSH
 949: CALL_OW 28
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1004
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 959: LD_ADDR_EXP 12
 963: PUSH
 964: LD_STRING 11_Frank
 966: PPUSH
 967: LD_INT 1
 969: PPUSH
 970: CALL 12115 0 2
 974: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 975: LD_EXP 12
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 987: LD_EXP 12
 991: PPUSH
 992: LD_INT 4
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// end else
1002: GO 1020
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1004: LD_INT 4
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_INT 0
1015: PPUSH
1016: CALL 1115 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1020: LD_STRING 11_Cornell
1022: PPUSH
1023: CALL_OW 28
1027: PUSH
1028: LD_INT 1
1030: EQUAL
1031: IFFALSE 1078
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1033: LD_ADDR_EXP 10
1037: PUSH
1038: LD_STRING 11_Cornell
1040: PPUSH
1041: LD_INT 1
1043: PPUSH
1044: CALL 12115 0 2
1048: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1049: LD_EXP 10
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1061: LD_EXP 10
1065: PPUSH
1066: LD_INT 4
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 49
// end else
1076: GO 1094
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1078: LD_INT 4
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_INT 0
1089: PPUSH
1090: CALL 1115 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1094: LD_ADDR_EXP 22
1098: PUSH
1099: LD_STRING Powell
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL 12115 0 2
1109: ST_TO_ADDR
// end ;
1110: LD_VAR 0 1
1114: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1115: LD_INT 0
1117: PPUSH
1118: PPUSH
1119: PPUSH
1120: PPUSH
1121: PPUSH
// if mech = 1 then
1122: LD_VAR 0 4
1126: PUSH
1127: LD_INT 1
1129: EQUAL
1130: IFFALSE 1365
// begin if others11 > 0 then
1132: LD_EXP 14
1136: PUSH
1137: LD_INT 0
1139: GREATER
1140: IFFALSE 1305
// begin for i := 1 to others11 - 1 do
1142: LD_ADDR_VAR 0 6
1146: PUSH
1147: DOUBLE
1148: LD_INT 1
1150: DEC
1151: ST_TO_ADDR
1152: LD_EXP 14
1156: PUSH
1157: LD_INT 1
1159: MINUS
1160: PUSH
1161: FOR_TO
1162: IFFALSE 1242
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1164: LD_EXP 14
1168: PUSH
1169: LD_VAR 0 6
1173: ARRAY
1174: PPUSH
1175: LD_INT 3
1177: PPUSH
1178: CALL_OW 259
1182: PUSH
1183: LD_EXP 14
1187: PUSH
1188: LD_VAR 0 6
1192: PUSH
1193: LD_INT 1
1195: PLUS
1196: ARRAY
1197: PPUSH
1198: LD_INT 3
1200: PPUSH
1201: CALL_OW 259
1205: LESS
1206: IFFALSE 1240
// begin mecha = others11 [ i + 1 ] ;
1208: LD_ADDR_VAR 0 9
1212: PUSH
1213: LD_EXP 14
1217: PUSH
1218: LD_VAR 0 6
1222: PUSH
1223: LD_INT 1
1225: PLUS
1226: ARRAY
1227: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1228: LD_VAR 0 9
1232: PPUSH
1233: LD_INT 3
1235: PPUSH
1236: CALL_OW 336
// end ; end ;
1240: GO 1161
1242: POP
1243: POP
// if spawnMode = 1 then
1244: LD_VAR 0 3
1248: PUSH
1249: LD_INT 1
1251: EQUAL
1252: IFFALSE 1273
// PlaceUnitArea ( mecha , area , false ) else
1254: LD_VAR 0 9
1258: PPUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL_OW 49
1271: GO 1287
// PlaceHumanInUnit ( mecha , veh ) ;
1273: LD_VAR 0 9
1277: PPUSH
1278: LD_VAR 0 2
1282: PPUSH
1283: CALL_OW 52
// others11 = others11 diff mecha ;
1287: LD_ADDR_EXP 14
1291: PUSH
1292: LD_EXP 14
1296: PUSH
1297: LD_VAR 0 9
1301: DIFF
1302: ST_TO_ADDR
// end else
1303: GO 1363
// begin hc_name =  ;
1305: LD_ADDR_OWVAR 26
1309: PUSH
1310: LD_STRING 
1312: ST_TO_ADDR
// hc_gallery =  ;
1313: LD_ADDR_OWVAR 33
1317: PUSH
1318: LD_STRING 
1320: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1321: LD_INT 0
1323: PPUSH
1324: LD_INT 7
1326: PPUSH
1327: LD_INT 9
1329: PPUSH
1330: CALL_OW 12
1334: PPUSH
1335: CALL_OW 383
// un = CreateHuman ;
1339: LD_ADDR_VAR 0 7
1343: PUSH
1344: CALL_OW 44
1348: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1349: LD_VAR 0 7
1353: PPUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: CALL_OW 52
// end ; end else
1363: GO 1534
// begin if others11 > 0 then
1365: LD_EXP 14
1369: PUSH
1370: LD_INT 0
1372: GREATER
1373: IFFALSE 1446
// begin if spawnMode = 1 then
1375: LD_VAR 0 3
1379: PUSH
1380: LD_INT 1
1382: EQUAL
1383: IFFALSE 1408
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1385: LD_EXP 14
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: LD_VAR 0 1
1398: PPUSH
1399: LD_INT 0
1401: PPUSH
1402: CALL_OW 49
1406: GO 1426
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1408: LD_EXP 14
1412: PUSH
1413: LD_INT 1
1415: ARRAY
1416: PPUSH
1417: LD_VAR 0 2
1421: PPUSH
1422: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1426: LD_ADDR_EXP 14
1430: PUSH
1431: LD_EXP 14
1435: PPUSH
1436: LD_INT 1
1438: PPUSH
1439: CALL_OW 3
1443: ST_TO_ADDR
// end else
1444: GO 1534
// begin hc_name =  ;
1446: LD_ADDR_OWVAR 26
1450: PUSH
1451: LD_STRING 
1453: ST_TO_ADDR
// hc_gallery =  ;
1454: LD_ADDR_OWVAR 33
1458: PUSH
1459: LD_STRING 
1461: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1462: LD_INT 0
1464: PPUSH
1465: LD_INT 1
1467: PUSH
1468: LD_INT 2
1470: PUSH
1471: LD_INT 3
1473: PUSH
1474: LD_INT 4
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 4
1488: PPUSH
1489: CALL_OW 12
1493: ARRAY
1494: PPUSH
1495: LD_INT 7
1497: PPUSH
1498: LD_INT 9
1500: PPUSH
1501: CALL_OW 12
1505: PPUSH
1506: CALL_OW 380
// un = CreateHuman ;
1510: LD_ADDR_VAR 0 7
1514: PUSH
1515: CALL_OW 44
1519: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1520: LD_VAR 0 7
1524: PPUSH
1525: LD_VAR 0 2
1529: PPUSH
1530: CALL_OW 52
// end ; end ; end ;
1534: LD_VAR 0 5
1538: RET
// export function PrepareVehicles ; var veh ; begin
1539: LD_INT 0
1541: PPUSH
1542: PPUSH
// uc_side = 1 ;
1543: LD_ADDR_OWVAR 20
1547: PUSH
1548: LD_INT 1
1550: ST_TO_ADDR
// uc_nation = 1 ;
1551: LD_ADDR_OWVAR 21
1555: PUSH
1556: LD_INT 1
1558: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1559: LD_ADDR_OWVAR 37
1563: PUSH
1564: LD_INT 3
1566: ST_TO_ADDR
// vc_engine = 3 ;
1567: LD_ADDR_OWVAR 39
1571: PUSH
1572: LD_INT 3
1574: ST_TO_ADDR
// vc_control = 3 ;
1575: LD_ADDR_OWVAR 38
1579: PUSH
1580: LD_INT 3
1582: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1583: LD_ADDR_OWVAR 40
1587: PUSH
1588: LD_INT 4
1590: ST_TO_ADDR
// veh = CreateVehicle ;
1591: LD_ADDR_VAR 0 2
1595: PUSH
1596: CALL_OW 45
1600: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_INT 4
1608: PPUSH
1609: LD_INT 0
1611: PPUSH
1612: CALL_OW 49
// vc_weapon = us_double_gun ;
1616: LD_ADDR_OWVAR 40
1620: PUSH
1621: LD_INT 5
1623: ST_TO_ADDR
// vc_control = 1 ;
1624: LD_ADDR_OWVAR 38
1628: PUSH
1629: LD_INT 1
1631: ST_TO_ADDR
// veh = CreateVehicle ;
1632: LD_ADDR_VAR 0 2
1636: PUSH
1637: CALL_OW 45
1641: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_INT 4
1649: PPUSH
1650: LD_INT 0
1652: PPUSH
1653: CALL_OW 49
// vc_weapon = us_light_gun ;
1657: LD_ADDR_OWVAR 40
1661: PUSH
1662: LD_INT 3
1664: ST_TO_ADDR
// vc_control = 3 ;
1665: LD_ADDR_OWVAR 38
1669: PUSH
1670: LD_INT 3
1672: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1673: LD_ADDR_OWVAR 37
1677: PUSH
1678: LD_INT 2
1680: ST_TO_ADDR
// veh = CreateVehicle ;
1681: LD_ADDR_VAR 0 2
1685: PUSH
1686: CALL_OW 45
1690: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1691: LD_VAR 0 2
1695: PPUSH
1696: LD_INT 4
1698: PPUSH
1699: LD_INT 0
1701: PPUSH
1702: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1706: LD_ADDR_OWVAR 40
1710: PUSH
1711: LD_INT 4
1713: ST_TO_ADDR
// veh = CreateVehicle ;
1714: LD_ADDR_VAR 0 2
1718: PUSH
1719: CALL_OW 45
1723: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1724: LD_VAR 0 2
1728: PPUSH
1729: LD_INT 4
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// end ;
1739: LD_VAR 0 1
1743: RET
// export function PowellSupport1 ; var veh , un ; begin
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
// uc_side = 1 ;
1749: LD_ADDR_OWVAR 20
1753: PUSH
1754: LD_INT 1
1756: ST_TO_ADDR
// uc_nation = 1 ;
1757: LD_ADDR_OWVAR 21
1761: PUSH
1762: LD_INT 1
1764: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1765: LD_STRING 11_Brown
1767: PPUSH
1768: CALL_OW 28
1772: PUSH
1773: LD_INT 1
1775: EQUAL
1776: IFFALSE 1823
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1778: LD_ADDR_EXP 7
1782: PUSH
1783: LD_STRING 11_Brown
1785: PPUSH
1786: LD_INT 1
1788: PPUSH
1789: CALL 12115 0 2
1793: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1794: LD_EXP 7
1798: PPUSH
1799: LD_INT 2
1801: PPUSH
1802: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1806: LD_EXP 7
1810: PPUSH
1811: LD_INT 4
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL_OW 49
// end else
1821: GO 1839
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1823: LD_INT 4
1825: PPUSH
1826: LD_INT 0
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL 1115 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1839: LD_STRING 11_Gary
1841: PPUSH
1842: CALL_OW 28
1846: PUSH
1847: LD_INT 1
1849: EQUAL
1850: IFFALSE 1897
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1852: LD_ADDR_EXP 11
1856: PUSH
1857: LD_STRING 11_Gary
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL 12115 0 2
1867: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1868: LD_EXP 11
1872: PPUSH
1873: LD_INT 2
1875: PPUSH
1876: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1880: LD_EXP 11
1884: PPUSH
1885: LD_INT 4
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 49
// end else
1895: GO 1913
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1897: LD_INT 4
1899: PPUSH
1900: LD_INT 0
1902: PPUSH
1903: LD_INT 1
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL 1115 0 4
// end ; vc_chassis = us_medium_tracked ;
1913: LD_ADDR_OWVAR 37
1917: PUSH
1918: LD_INT 3
1920: ST_TO_ADDR
// vc_engine = 3 ;
1921: LD_ADDR_OWVAR 39
1925: PUSH
1926: LD_INT 3
1928: ST_TO_ADDR
// vc_control = 1 ;
1929: LD_ADDR_OWVAR 38
1933: PUSH
1934: LD_INT 1
1936: ST_TO_ADDR
// vc_weapon = us_crane ;
1937: LD_ADDR_OWVAR 40
1941: PUSH
1942: LD_INT 13
1944: ST_TO_ADDR
// veh = CreateVehicle ;
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: CALL_OW 45
1954: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_INT 4
1962: PPUSH
1963: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1967: LD_VAR 0 2
1971: PPUSH
1972: LD_INT 4
1974: PPUSH
1975: LD_INT 0
1977: PPUSH
1978: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
1982: LD_INT 4
1984: PPUSH
1985: LD_VAR 0 2
1989: PPUSH
1990: LD_INT 2
1992: PPUSH
1993: LD_INT 1
1995: PPUSH
1996: CALL 1115 0 4
// vc_weapon = 9 ;
2000: LD_ADDR_OWVAR 40
2004: PUSH
2005: LD_INT 9
2007: ST_TO_ADDR
// veh = CreateVehicle ;
2008: LD_ADDR_VAR 0 2
2012: PUSH
2013: CALL_OW 45
2017: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2018: LD_VAR 0 2
2022: PPUSH
2023: LD_INT 4
2025: PPUSH
2026: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_INT 4
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2045: LD_INT 4
2047: PPUSH
2048: LD_VAR 0 2
2052: PPUSH
2053: LD_INT 2
2055: PPUSH
2056: LD_INT 1
2058: PPUSH
2059: CALL 1115 0 4
// vc_control = 3 ;
2063: LD_ADDR_OWVAR 38
2067: PUSH
2068: LD_INT 3
2070: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2071: LD_ADDR_OWVAR 40
2075: PUSH
2076: LD_INT 12
2078: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2079: LD_ADDR_EXP 15
2083: PUSH
2084: CALL_OW 45
2088: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2089: LD_ADDR_EXP 16
2093: PUSH
2094: CALL_OW 45
2098: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2099: LD_EXP 15
2103: PPUSH
2104: LD_INT 4
2106: PPUSH
2107: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2111: LD_EXP 16
2115: PPUSH
2116: LD_INT 4
2118: PPUSH
2119: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2123: LD_EXP 15
2127: PPUSH
2128: LD_INT 4
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2138: LD_EXP 16
2142: PPUSH
2143: LD_INT 4
2145: PPUSH
2146: LD_INT 0
2148: PPUSH
2149: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2153: LD_EXP 15
2157: PPUSH
2158: LD_INT 3
2160: PPUSH
2161: LD_INT 100
2163: PPUSH
2164: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2168: LD_EXP 16
2172: PPUSH
2173: LD_INT 1
2175: PPUSH
2176: LD_INT 80
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2183: LD_EXP 16
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: LD_INT 20
2193: PPUSH
2194: CALL_OW 291
// end ;
2198: LD_VAR 0 1
2202: RET
// export function PowellSupport2 ; var veh , un ; begin
2203: LD_INT 0
2205: PPUSH
2206: PPUSH
2207: PPUSH
// uc_side = 1 ;
2208: LD_ADDR_OWVAR 20
2212: PUSH
2213: LD_INT 1
2215: ST_TO_ADDR
// uc_nation = 1 ;
2216: LD_ADDR_OWVAR 21
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2224: LD_ADDR_OWVAR 37
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// vc_engine = 3 ;
2232: LD_ADDR_OWVAR 39
2236: PUSH
2237: LD_INT 3
2239: ST_TO_ADDR
// vc_control = 3 ;
2240: LD_ADDR_OWVAR 38
2244: PUSH
2245: LD_INT 3
2247: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2248: LD_ADDR_OWVAR 40
2252: PUSH
2253: LD_INT 3
2255: ST_TO_ADDR
// veh = CreateVehicle ;
2256: LD_ADDR_VAR 0 2
2260: PUSH
2261: CALL_OW 45
2265: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 4
2273: PPUSH
2274: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2278: LD_VAR 0 2
2282: PPUSH
2283: LD_INT 4
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: CALL_OW 49
// vc_control = 1 ;
2293: LD_ADDR_OWVAR 38
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2301: LD_ADDR_OWVAR 37
2305: PUSH
2306: LD_INT 2
2308: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2309: LD_ADDR_OWVAR 40
2313: PUSH
2314: LD_INT 5
2316: ST_TO_ADDR
// veh = CreateVehicle ;
2317: LD_ADDR_VAR 0 2
2321: PUSH
2322: CALL_OW 45
2326: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2327: LD_VAR 0 2
2331: PPUSH
2332: LD_INT 4
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_INT 4
2346: PPUSH
2347: LD_INT 0
2349: PPUSH
2350: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2354: LD_STRING 11_Bobby
2356: PPUSH
2357: CALL_OW 28
2361: PUSH
2362: LD_INT 1
2364: EQUAL
2365: IFFALSE 2411
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2367: LD_ADDR_EXP 4
2371: PUSH
2372: LD_STRING 11_Bobby
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: CALL 12115 0 2
2382: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2383: LD_EXP 4
2387: PPUSH
2388: LD_INT 3
2390: PPUSH
2391: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2395: LD_EXP 4
2399: PPUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL_OW 52
// end else
2409: GO 2429
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2411: LD_INT 0
2413: PPUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: LD_INT 2
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: CALL 1115 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2429: LD_STRING 11_Houten
2431: PPUSH
2432: CALL_OW 28
2436: PUSH
2437: LD_INT 1
2439: EQUAL
2440: IFFALSE 2487
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2442: LD_ADDR_EXP 9
2446: PUSH
2447: LD_STRING 11_Houten
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL 12115 0 2
2457: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2458: LD_EXP 9
2462: PPUSH
2463: LD_INT 1
2465: PPUSH
2466: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2470: LD_EXP 9
2474: PPUSH
2475: LD_INT 4
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// end else
2485: GO 2503
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2487: LD_INT 4
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL 1115 0 4
// end ; vc_control = 3 ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 12
2518: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2519: LD_ADDR_EXP 17
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2529: LD_EXP 17
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// amCargo4 = CreateVehicle ;
2541: LD_ADDR_EXP 18
2545: PUSH
2546: CALL_OW 45
2550: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2551: LD_EXP 18
2555: PPUSH
2556: LD_INT 4
2558: PPUSH
2559: CALL_OW 233
// amCargo5 = CreateVehicle ;
2563: LD_ADDR_EXP 19
2567: PUSH
2568: CALL_OW 45
2572: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2573: LD_EXP 19
2577: PPUSH
2578: LD_INT 4
2580: PPUSH
2581: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2585: LD_EXP 17
2589: PPUSH
2590: LD_INT 4
2592: PPUSH
2593: LD_INT 0
2595: PPUSH
2596: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2600: LD_EXP 18
2604: PPUSH
2605: LD_INT 4
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2615: LD_EXP 19
2619: PPUSH
2620: LD_INT 4
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2630: LD_EXP 17
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: LD_INT 100
2640: PPUSH
2641: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2645: LD_EXP 18
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 100
2655: PPUSH
2656: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2660: LD_EXP 19
2664: PPUSH
2665: LD_INT 3
2667: PPUSH
2668: LD_INT 100
2670: PPUSH
2671: CALL_OW 291
// end ;
2675: LD_VAR 0 1
2679: RET
// export function PowellSupport3 ; var veh , un ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
// uc_side = 1 ;
2685: LD_ADDR_OWVAR 20
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// uc_nation = 1 ;
2693: LD_ADDR_OWVAR 21
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2701: LD_INT 4
2703: PPUSH
2704: LD_INT 0
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: CALL 1115 0 4
// vc_chassis = us_medium_wheeled ;
2717: LD_ADDR_OWVAR 37
2721: PUSH
2722: LD_INT 2
2724: ST_TO_ADDR
// vc_engine = 3 ;
2725: LD_ADDR_OWVAR 39
2729: PUSH
2730: LD_INT 3
2732: ST_TO_ADDR
// vc_control = 3 ;
2733: LD_ADDR_OWVAR 38
2737: PUSH
2738: LD_INT 3
2740: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2741: LD_ADDR_OWVAR 40
2745: PUSH
2746: LD_INT 12
2748: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2749: LD_ADDR_EXP 20
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2759: LD_ADDR_EXP 21
2763: PUSH
2764: CALL_OW 45
2768: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_INT 4
2776: PPUSH
2777: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2781: LD_EXP 21
2785: PPUSH
2786: LD_INT 4
2788: PPUSH
2789: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2793: LD_EXP 20
2797: PPUSH
2798: LD_INT 4
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2808: LD_EXP 21
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: LD_INT 0
2818: PPUSH
2819: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2823: LD_EXP 20
2827: PPUSH
2828: LD_INT 1
2830: PPUSH
2831: LD_INT 100
2833: PPUSH
2834: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2838: LD_EXP 21
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 100
2848: PPUSH
2849: CALL_OW 291
// end ; end_of_file
2853: LD_VAR 0 1
2857: RET
// export function PrepareRussianCommander ; begin
2858: LD_INT 0
2860: PPUSH
// uc_side = 3 ;
2861: LD_ADDR_OWVAR 20
2865: PUSH
2866: LD_INT 3
2868: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2869: LD_ADDR_EXP 23
2873: PUSH
2874: LD_STRING Davidov
2876: PPUSH
2877: LD_INT 0
2879: PPUSH
2880: CALL 12115 0 2
2884: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 3
2892: PPUSH
2893: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2897: LD_ADDR_EXP 35
2901: PUSH
2902: LD_EXP 35
2906: PUSH
2907: LD_EXP 23
2911: ADD
2912: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2913: LD_EXP 35
2917: PPUSH
2918: LD_INT 4
2920: PPUSH
2921: CALL_OW 336
// end ;
2925: LD_VAR 0 1
2929: RET
// export function PrepareEastBase ; var i , un ; begin
2930: LD_INT 0
2932: PPUSH
2933: PPUSH
2934: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 3
2940: PPUSH
2941: LD_INT 121
2943: PPUSH
2944: LD_EXP 37
2948: PPUSH
2949: LD_EXP 38
2953: PPUSH
2954: CALL_OW 12
2958: PPUSH
2959: LD_INT 1
2961: PPUSH
2962: LD_INT 3
2964: PPUSH
2965: CALL 12907 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2969: LD_INT 3
2971: PPUSH
2972: LD_INT 3
2974: PPUSH
2975: LD_INT 121
2977: PPUSH
2978: LD_EXP 37
2982: PPUSH
2983: LD_EXP 38
2987: PPUSH
2988: CALL_OW 12
2992: PPUSH
2993: LD_INT 9
2995: PPUSH
2996: LD_INT 3
2998: PPUSH
2999: CALL 12907 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3003: LD_INT 3
3005: PPUSH
3006: LD_INT 3
3008: PPUSH
3009: LD_INT 4
3011: PPUSH
3012: LD_EXP 37
3016: PPUSH
3017: LD_EXP 38
3021: PPUSH
3022: CALL_OW 12
3026: PPUSH
3027: LD_INT 2
3029: PPUSH
3030: LD_INT 6
3032: PPUSH
3033: CALL 12907 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3037: LD_INT 3
3039: PPUSH
3040: LD_INT 3
3042: PPUSH
3043: LD_INT 112
3045: PPUSH
3046: LD_EXP 37
3050: PPUSH
3051: LD_EXP 38
3055: PPUSH
3056: CALL_OW 12
3060: PPUSH
3061: LD_INT 3
3063: PPUSH
3064: LD_INT 6
3066: PPUSH
3067: CALL 12907 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3071: LD_INT 3
3073: PPUSH
3074: LD_INT 3
3076: PPUSH
3077: LD_INT 47
3079: PPUSH
3080: LD_EXP 37
3084: PPUSH
3085: LD_EXP 38
3089: PPUSH
3090: CALL_OW 12
3094: PPUSH
3095: LD_INT 4
3097: PPUSH
3098: LD_INT 6
3100: PPUSH
3101: CALL 12907 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3105: LD_INT 3
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 129
3113: PPUSH
3114: LD_EXP 37
3118: PPUSH
3119: LD_EXP 38
3123: PPUSH
3124: CALL_OW 12
3128: PPUSH
3129: LD_INT 4
3131: PPUSH
3132: LD_INT 6
3134: PPUSH
3135: CALL 12907 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3139: LD_INT 3
3141: PPUSH
3142: LD_INT 3
3144: PPUSH
3145: LD_INT 135
3147: PPUSH
3148: LD_EXP 37
3152: PPUSH
3153: LD_EXP 38
3157: PPUSH
3158: CALL_OW 12
3162: PPUSH
3163: LD_INT 4
3165: PPUSH
3166: LD_INT 6
3168: PPUSH
3169: CALL 12907 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3173: LD_ADDR_VAR 0 2
3177: PUSH
3178: LD_INT 22
3180: PUSH
3181: LD_INT 3
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 30
3190: PUSH
3191: LD_INT 32
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 69
3206: PUSH
3207: FOR_IN
3208: IFFALSE 3248
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3210: LD_INT 3
3212: PPUSH
3213: LD_INT 3
3215: PPUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: LD_EXP 37
3225: PPUSH
3226: LD_EXP 38
3230: PPUSH
3231: CALL_OW 12
3235: PPUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_INT 1
3241: PPUSH
3242: CALL 12907 0 6
3246: GO 3207
3248: POP
3249: POP
// for i = 1 to 5 do
3250: LD_ADDR_VAR 0 2
3254: PUSH
3255: DOUBLE
3256: LD_INT 1
3258: DEC
3259: ST_TO_ADDR
3260: LD_INT 5
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3363
// begin uc_side = 3 ;
3266: LD_ADDR_OWVAR 20
3270: PUSH
3271: LD_INT 3
3273: ST_TO_ADDR
// uc_nation = 3 ;
3274: LD_ADDR_OWVAR 21
3278: PUSH
3279: LD_INT 3
3281: ST_TO_ADDR
// hc_gallery =  ;
3282: LD_ADDR_OWVAR 33
3286: PUSH
3287: LD_STRING 
3289: ST_TO_ADDR
// hc_name =  ;
3290: LD_ADDR_OWVAR 26
3294: PUSH
3295: LD_STRING 
3297: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3298: LD_INT 0
3300: PPUSH
3301: LD_INT 4
3303: PPUSH
3304: LD_EXP 37
3308: PPUSH
3309: LD_EXP 38
3313: PPUSH
3314: CALL_OW 12
3318: PPUSH
3319: CALL_OW 380
// un = CreateHuman ;
3323: LD_ADDR_VAR 0 3
3327: PUSH
3328: CALL_OW 44
3332: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3333: LD_VAR 0 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3345: LD_ADDR_EXP 35
3349: PUSH
3350: LD_EXP 35
3354: PUSH
3355: LD_VAR 0 3
3359: ADD
3360: ST_TO_ADDR
// end ;
3361: GO 3263
3363: POP
3364: POP
// end ;
3365: LD_VAR 0 1
3369: RET
// export function PrepareWestBase ; var i , un ; begin
3370: LD_INT 0
3372: PPUSH
3373: PPUSH
3374: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 3
3380: PPUSH
3381: LD_INT 6
3383: PPUSH
3384: LD_EXP 37
3388: PPUSH
3389: LD_EXP 38
3393: PPUSH
3394: CALL_OW 12
3398: PPUSH
3399: LD_INT 2
3401: PPUSH
3402: LD_INT 3
3404: PPUSH
3405: CALL 12907 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3409: LD_INT 3
3411: PPUSH
3412: LD_INT 3
3414: PPUSH
3415: LD_INT 91
3417: PPUSH
3418: LD_EXP 37
3422: PPUSH
3423: LD_EXP 38
3427: PPUSH
3428: CALL_OW 12
3432: PPUSH
3433: LD_INT 4
3435: PPUSH
3436: LD_INT 3
3438: PPUSH
3439: CALL 12907 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3443: LD_INT 3
3445: PPUSH
3446: LD_INT 3
3448: PPUSH
3449: LD_INT 21
3451: PPUSH
3452: LD_EXP 37
3456: PPUSH
3457: LD_EXP 38
3461: PPUSH
3462: CALL_OW 12
3466: PPUSH
3467: LD_INT 3
3469: PPUSH
3470: LD_INT 6
3472: PPUSH
3473: CALL 12907 0 6
// end ;
3477: LD_VAR 0 1
3481: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
3486: PPUSH
3487: PPUSH
// uc_side = 3 ;
3488: LD_ADDR_OWVAR 20
3492: PUSH
3493: LD_INT 3
3495: ST_TO_ADDR
// uc_nation = 3 ;
3496: LD_ADDR_OWVAR 21
3500: PUSH
3501: LD_INT 3
3503: ST_TO_ADDR
// for i = 1 to 5 do
3504: LD_ADDR_VAR 0 2
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_INT 5
3516: PUSH
3517: FOR_TO
3518: IFFALSE 3588
// begin hc_gallery =  ;
3520: LD_ADDR_OWVAR 33
3524: PUSH
3525: LD_STRING 
3527: ST_TO_ADDR
// hc_name =  ;
3528: LD_ADDR_OWVAR 26
3532: PUSH
3533: LD_STRING 
3535: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3536: LD_INT 0
3538: PPUSH
3539: LD_INT 9
3541: PPUSH
3542: LD_EXP 37
3546: PPUSH
3547: LD_EXP 38
3551: PPUSH
3552: CALL_OW 12
3556: PPUSH
3557: CALL_OW 380
// un = CreateHuman ;
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: CALL_OW 44
3570: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3571: LD_VAR 0 3
3575: PPUSH
3576: LD_INT 8
3578: PPUSH
3579: LD_INT 0
3581: PPUSH
3582: CALL_OW 49
// end ;
3586: GO 3517
3588: POP
3589: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3590: LD_ADDR_VAR 0 2
3594: PUSH
3595: DOUBLE
3596: LD_INT 1
3598: DEC
3599: ST_TO_ADDR
3600: LD_INT 2
3602: PUSH
3603: LD_INT 3
3605: PUSH
3606: LD_INT 4
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_OWVAR 67
3618: ARRAY
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3691
// begin hc_gallery =  ;
3623: LD_ADDR_OWVAR 33
3627: PUSH
3628: LD_STRING 
3630: ST_TO_ADDR
// hc_name =  ;
3631: LD_ADDR_OWVAR 26
3635: PUSH
3636: LD_STRING 
3638: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3639: LD_INT 0
3641: PPUSH
3642: LD_INT 4
3644: PPUSH
3645: LD_EXP 37
3649: PPUSH
3650: LD_EXP 38
3654: PPUSH
3655: CALL_OW 12
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_INT 8
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// end ;
3689: GO 3620
3691: POP
3692: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3693: LD_ADDR_VAR 0 2
3697: PUSH
3698: DOUBLE
3699: LD_INT 1
3701: DEC
3702: ST_TO_ADDR
3703: LD_INT 3
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: LD_INT 5
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_OWVAR 67
3721: ARRAY
3722: PUSH
3723: FOR_TO
3724: IFFALSE 3920
// begin vc_engine = 3 ;
3726: LD_ADDR_OWVAR 39
3730: PUSH
3731: LD_INT 3
3733: ST_TO_ADDR
// vc_control = 1 ;
3734: LD_ADDR_OWVAR 38
3738: PUSH
3739: LD_INT 1
3741: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3742: LD_ADDR_OWVAR 40
3746: PUSH
3747: LD_INT 42
3749: PUSH
3750: LD_INT 43
3752: PUSH
3753: LD_INT 44
3755: PUSH
3756: LD_INT 45
3758: PUSH
3759: LD_INT 46
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 5
3774: PPUSH
3775: CALL_OW 12
3779: ARRAY
3780: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3781: LD_OWVAR 40
3785: PUSH
3786: LD_INT 46
3788: EQUAL
3789: IFFALSE 3801
// vc_chassis = ru_heavy_tracked else
3791: LD_ADDR_OWVAR 37
3795: PUSH
3796: LD_INT 24
3798: ST_TO_ADDR
3799: GO 3828
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3801: LD_ADDR_OWVAR 37
3805: PUSH
3806: LD_INT 22
3808: PUSH
3809: LD_INT 21
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 1
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 12
3826: ARRAY
3827: ST_TO_ADDR
// veh = CreateVehicle ;
3828: LD_ADDR_VAR 0 4
3832: PUSH
3833: CALL_OW 45
3837: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3838: LD_VAR 0 4
3842: PPUSH
3843: LD_INT 3
3845: PPUSH
3846: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 5
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 49
// hc_gallery =  ;
3865: LD_ADDR_OWVAR 33
3869: PUSH
3870: LD_STRING 
3872: ST_TO_ADDR
// hc_name =  ;
3873: LD_ADDR_OWVAR 26
3877: PUSH
3878: LD_STRING 
3880: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3881: LD_INT 0
3883: PPUSH
3884: LD_INT 3
3886: PPUSH
3887: LD_INT 10
3889: PPUSH
3890: CALL_OW 380
// un = CreateHuman ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 44
3903: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_VAR 0 4
3913: PPUSH
3914: CALL_OW 52
// end ;
3918: GO 3723
3920: POP
3921: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3922: LD_ADDR_VAR 0 2
3926: PUSH
3927: DOUBLE
3928: LD_INT 1
3930: DEC
3931: ST_TO_ADDR
3932: LD_INT 3
3934: PUSH
3935: LD_INT 4
3937: PUSH
3938: LD_INT 5
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: LIST
3945: PUSH
3946: LD_OWVAR 67
3950: ARRAY
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4100
// begin vc_engine = 3 ;
3955: LD_ADDR_OWVAR 39
3959: PUSH
3960: LD_INT 3
3962: ST_TO_ADDR
// vc_control = 3 ;
3963: LD_ADDR_OWVAR 38
3967: PUSH
3968: LD_INT 3
3970: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3971: LD_ADDR_OWVAR 40
3975: PUSH
3976: LD_INT 42
3978: PUSH
3979: LD_INT 43
3981: PUSH
3982: LD_INT 44
3984: PUSH
3985: LD_INT 45
3987: PUSH
3988: LD_INT 46
3990: PUSH
3991: LD_INT 49
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 5
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4014: LD_OWVAR 40
4018: PUSH
4019: LD_INT 46
4021: EQUAL
4022: IFFALSE 4034
// vc_chassis = ru_heavy_tracked else
4024: LD_ADDR_OWVAR 37
4028: PUSH
4029: LD_INT 24
4031: ST_TO_ADDR
4032: GO 4061
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4034: LD_ADDR_OWVAR 37
4038: PUSH
4039: LD_INT 22
4041: PUSH
4042: LD_INT 21
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL_OW 12
4059: ARRAY
4060: ST_TO_ADDR
// veh = CreateVehicle ;
4061: LD_ADDR_VAR 0 4
4065: PUSH
4066: CALL_OW 45
4070: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4071: LD_VAR 0 4
4075: PPUSH
4076: LD_INT 3
4078: PPUSH
4079: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4083: LD_VAR 0 4
4087: PPUSH
4088: LD_INT 6
4090: PPUSH
4091: LD_INT 0
4093: PPUSH
4094: CALL_OW 49
// end ;
4098: GO 3952
4100: POP
4101: POP
// end ; end_of_file
4102: LD_VAR 0 1
4106: RET
// export function PrepareKurt ; begin
4107: LD_INT 0
4109: PPUSH
// uc_side = 8 ;
4110: LD_ADDR_OWVAR 20
4114: PUSH
4115: LD_INT 8
4117: ST_TO_ADDR
// uc_nation = 2 ;
4118: LD_ADDR_OWVAR 21
4122: PUSH
4123: LD_INT 2
4125: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4126: LD_ADDR_OWVAR 37
4130: PUSH
4131: LD_INT 13
4133: ST_TO_ADDR
// vc_engine = 1 ;
4134: LD_ADDR_OWVAR 39
4138: PUSH
4139: LD_INT 1
4141: ST_TO_ADDR
// vc_control = 1 ;
4142: LD_ADDR_OWVAR 38
4146: PUSH
4147: LD_INT 1
4149: ST_TO_ADDR
// vc_weapon = 24 ;
4150: LD_ADDR_OWVAR 40
4154: PUSH
4155: LD_INT 24
4157: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4158: LD_ADDR_EXP 26
4162: PUSH
4163: CALL_OW 45
4167: ST_TO_ADDR
// if kurtStatus > 0 then
4168: LD_EXP 27
4172: PUSH
4173: LD_INT 0
4175: GREATER
4176: IFFALSE 4225
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4178: LD_ADDR_EXP 24
4182: PUSH
4183: LD_STRING Kurt
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL 12115 0 2
4193: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4194: LD_EXP 26
4198: PPUSH
4199: LD_INT 4
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4209: LD_EXP 24
4213: PPUSH
4214: LD_EXP 26
4218: PPUSH
4219: CALL_OW 52
// end else
4223: GO 4290
// begin hc_name =  ;
4225: LD_ADDR_OWVAR 26
4229: PUSH
4230: LD_STRING 
4232: ST_TO_ADDR
// hc_gallery =  ;
4233: LD_ADDR_OWVAR 33
4237: PUSH
4238: LD_STRING 
4240: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4241: LD_INT 1
4243: PPUSH
4244: LD_INT 10
4246: PPUSH
4247: CALL_OW 381
// otherKurt = CreateHuman ;
4251: LD_ADDR_EXP 25
4255: PUSH
4256: CALL_OW 44
4260: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4261: LD_EXP 26
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4276: LD_EXP 25
4280: PPUSH
4281: LD_EXP 26
4285: PPUSH
4286: CALL_OW 52
// end ; end ;
4290: LD_VAR 0 1
4294: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4295: LD_INT 0
4297: PPUSH
4298: PPUSH
4299: PPUSH
4300: PPUSH
// for i = 1 to 3 do
4301: LD_ADDR_VAR 0 2
4305: PUSH
4306: DOUBLE
4307: LD_INT 1
4309: DEC
4310: ST_TO_ADDR
4311: LD_INT 3
4313: PUSH
4314: FOR_TO
4315: IFFALSE 4452
// begin uc_side = 1 ;
4317: LD_ADDR_OWVAR 20
4321: PUSH
4322: LD_INT 1
4324: ST_TO_ADDR
// uc_nation = 2 ;
4325: LD_ADDR_OWVAR 21
4329: PUSH
4330: LD_INT 2
4332: ST_TO_ADDR
// hc_gallery =  ;
4333: LD_ADDR_OWVAR 33
4337: PUSH
4338: LD_STRING 
4340: ST_TO_ADDR
// hc_name =  ;
4341: LD_ADDR_OWVAR 26
4345: PUSH
4346: LD_STRING 
4348: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4349: LD_EXP 27
4353: PUSH
4354: LD_INT 0
4356: EQUAL
4357: PUSH
4358: LD_EXP 27
4362: PUSH
4363: LD_INT 2
4365: EQUAL
4366: OR
4367: IFFALSE 4392
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4369: LD_INT 0
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_INT 2
4377: PPUSH
4378: LD_INT 4
4380: PPUSH
4381: CALL_OW 12
4385: PPUSH
4386: CALL_OW 380
4390: GO 4413
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4392: LD_INT 0
4394: PPUSH
4395: LD_INT 1
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: LD_INT 8
4403: PPUSH
4404: CALL_OW 12
4408: PPUSH
4409: CALL_OW 380
// un = CreateHuman ;
4413: LD_ADDR_VAR 0 3
4417: PUSH
4418: CALL_OW 44
4422: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4423: LD_VAR 0 3
4427: PPUSH
4428: LD_INT 4
4430: PPUSH
4431: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 4
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4314
4452: POP
4453: POP
// vc_chassis = 14 ;
4454: LD_ADDR_OWVAR 37
4458: PUSH
4459: LD_INT 14
4461: ST_TO_ADDR
// vc_engine = 3 ;
4462: LD_ADDR_OWVAR 39
4466: PUSH
4467: LD_INT 3
4469: ST_TO_ADDR
// vc_control = 1 ;
4470: LD_ADDR_OWVAR 38
4474: PUSH
4475: LD_INT 1
4477: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4478: LD_ADDR_OWVAR 40
4482: PUSH
4483: LD_INT 27
4485: PUSH
4486: LD_INT 26
4488: PUSH
4489: LD_INT 28
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 1
4499: PPUSH
4500: LD_INT 3
4502: PPUSH
4503: CALL_OW 12
4507: ARRAY
4508: ST_TO_ADDR
// veh = CreateVehicle ;
4509: LD_ADDR_VAR 0 4
4513: PUSH
4514: CALL_OW 45
4518: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4519: LD_VAR 0 4
4523: PPUSH
4524: LD_INT 4
4526: PPUSH
4527: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4531: LD_VAR 0 4
4535: PPUSH
4536: LD_INT 4
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4546: LD_EXP 27
4550: PUSH
4551: LD_INT 0
4553: EQUAL
4554: PUSH
4555: LD_EXP 27
4559: PUSH
4560: LD_INT 2
4562: EQUAL
4563: OR
4564: IFFALSE 4589
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4566: LD_INT 0
4568: PPUSH
4569: LD_INT 3
4571: PPUSH
4572: LD_INT 2
4574: PPUSH
4575: LD_INT 4
4577: PPUSH
4578: CALL_OW 12
4582: PPUSH
4583: CALL_OW 380
4587: GO 4610
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4589: LD_INT 0
4591: PPUSH
4592: LD_INT 3
4594: PPUSH
4595: LD_INT 6
4597: PPUSH
4598: LD_INT 8
4600: PPUSH
4601: CALL_OW 12
4605: PPUSH
4606: CALL_OW 380
// un = CreateHuman ;
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: CALL_OW 44
4619: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4620: LD_VAR 0 3
4624: PPUSH
4625: LD_VAR 0 4
4629: PPUSH
4630: CALL_OW 52
// vc_chassis = 14 ;
4634: LD_ADDR_OWVAR 37
4638: PUSH
4639: LD_INT 14
4641: ST_TO_ADDR
// vc_engine = 3 ;
4642: LD_ADDR_OWVAR 39
4646: PUSH
4647: LD_INT 3
4649: ST_TO_ADDR
// vc_control = 1 ;
4650: LD_ADDR_OWVAR 38
4654: PUSH
4655: LD_INT 1
4657: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4658: LD_ADDR_OWVAR 40
4662: PUSH
4663: LD_INT 27
4665: PUSH
4666: LD_INT 26
4668: PUSH
4669: LD_INT 28
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 1
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: CALL_OW 12
4687: ARRAY
4688: ST_TO_ADDR
// veh = CreateVehicle ;
4689: LD_ADDR_VAR 0 4
4693: PUSH
4694: CALL_OW 45
4698: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4699: LD_VAR 0 4
4703: PPUSH
4704: LD_INT 4
4706: PPUSH
4707: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4711: LD_VAR 0 4
4715: PPUSH
4716: LD_INT 4
4718: PPUSH
4719: LD_INT 0
4721: PPUSH
4722: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4726: LD_EXP 27
4730: PUSH
4731: LD_INT 0
4733: EQUAL
4734: PUSH
4735: LD_EXP 27
4739: PUSH
4740: LD_INT 2
4742: EQUAL
4743: OR
4744: IFFALSE 4769
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 4
4751: PPUSH
4752: LD_INT 2
4754: PPUSH
4755: LD_INT 4
4757: PPUSH
4758: CALL_OW 12
4762: PPUSH
4763: CALL_OW 380
4767: GO 4790
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4769: LD_INT 0
4771: PPUSH
4772: LD_INT 4
4774: PPUSH
4775: LD_INT 6
4777: PPUSH
4778: LD_INT 8
4780: PPUSH
4781: CALL_OW 12
4785: PPUSH
4786: CALL_OW 380
// un = CreateHuman ;
4790: LD_ADDR_VAR 0 3
4794: PUSH
4795: CALL_OW 44
4799: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: LD_INT 4
4807: PPUSH
4808: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4812: LD_VAR 0 3
4816: PPUSH
4817: LD_VAR 0 4
4821: PPUSH
4822: CALL_OW 52
// vc_chassis = 14 ;
4826: LD_ADDR_OWVAR 37
4830: PUSH
4831: LD_INT 14
4833: ST_TO_ADDR
// vc_engine = 3 ;
4834: LD_ADDR_OWVAR 39
4838: PUSH
4839: LD_INT 3
4841: ST_TO_ADDR
// vc_control = 1 ;
4842: LD_ADDR_OWVAR 38
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4850: LD_ADDR_OWVAR 40
4854: PUSH
4855: LD_INT 27
4857: PUSH
4858: LD_INT 26
4860: PUSH
4861: LD_INT 28
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 1
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: CALL_OW 12
4879: ARRAY
4880: ST_TO_ADDR
// veh = CreateVehicle ;
4881: LD_ADDR_VAR 0 4
4885: PUSH
4886: CALL_OW 45
4890: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4891: LD_VAR 0 4
4895: PPUSH
4896: LD_INT 4
4898: PPUSH
4899: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4903: LD_VAR 0 4
4907: PPUSH
4908: LD_INT 4
4910: PPUSH
4911: LD_INT 0
4913: PPUSH
4914: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4918: LD_EXP 27
4922: PUSH
4923: LD_INT 0
4925: EQUAL
4926: PUSH
4927: LD_EXP 27
4931: PUSH
4932: LD_INT 2
4934: EQUAL
4935: OR
4936: IFFALSE 4961
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4938: LD_INT 0
4940: PPUSH
4941: LD_INT 2
4943: PPUSH
4944: LD_INT 2
4946: PPUSH
4947: LD_INT 4
4949: PPUSH
4950: CALL_OW 12
4954: PPUSH
4955: CALL_OW 380
4959: GO 4982
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4961: LD_INT 0
4963: PPUSH
4964: LD_INT 2
4966: PPUSH
4967: LD_INT 6
4969: PPUSH
4970: LD_INT 8
4972: PPUSH
4973: CALL_OW 12
4977: PPUSH
4978: CALL_OW 380
// un = CreateHuman ;
4982: LD_ADDR_VAR 0 3
4986: PUSH
4987: CALL_OW 44
4991: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5004: LD_VAR 0 3
5008: PPUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: CALL_OW 52
// end ;
5018: LD_VAR 0 1
5022: RET
// export function PrepareAttackLegion ; var i , un ; begin
5023: LD_INT 0
5025: PPUSH
5026: PPUSH
5027: PPUSH
// for i = 1 to 4 do
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: DOUBLE
5034: LD_INT 1
5036: DEC
5037: ST_TO_ADDR
5038: LD_INT 4
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5152
// begin uc_side = 8 ;
5044: LD_ADDR_OWVAR 20
5048: PUSH
5049: LD_INT 8
5051: ST_TO_ADDR
// uc_nation = 2 ;
5052: LD_ADDR_OWVAR 21
5056: PUSH
5057: LD_INT 2
5059: ST_TO_ADDR
// hc_gallery =  ;
5060: LD_ADDR_OWVAR 33
5064: PUSH
5065: LD_STRING 
5067: ST_TO_ADDR
// hc_name =  ;
5068: LD_ADDR_OWVAR 26
5072: PUSH
5073: LD_STRING 
5075: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5076: LD_INT 0
5078: PPUSH
5079: LD_INT 1
5081: PUSH
5082: LD_INT 8
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_INT 2
5094: PPUSH
5095: CALL_OW 12
5099: ARRAY
5100: PPUSH
5101: LD_INT 6
5103: PPUSH
5104: LD_INT 8
5106: PPUSH
5107: CALL_OW 12
5111: PPUSH
5112: CALL_OW 380
// un = CreateHuman ;
5116: LD_ADDR_VAR 0 3
5120: PUSH
5121: CALL_OW 44
5125: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5126: LD_VAR 0 3
5130: PPUSH
5131: LD_INT 19
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 49
// ComCrawl ( un ) ;
5141: LD_VAR 0 3
5145: PPUSH
5146: CALL_OW 137
// end ;
5150: GO 5041
5152: POP
5153: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5154: LD_INT 1
5156: PPUSH
5157: LD_INT 8
5159: PPUSH
5160: LD_INT 2
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5170: LD_INT 20
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: CALL 15042 0 2
// end ; end_of_file
5180: LD_VAR 0 1
5184: RET
// every 1 do var i ;
5185: GO 5187
5187: DISABLE
5188: LD_INT 0
5190: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5191: LD_INT 10
5193: PPUSH
5194: LD_INT 122
5196: PPUSH
5197: LD_INT 145
5199: PPUSH
5200: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5204: LD_INT 137
5206: PPUSH
5207: LD_INT 84
5209: PPUSH
5210: LD_INT 61
5212: PPUSH
5213: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5217: LD_EXP 1
5221: PPUSH
5222: CALL_OW 310
5226: PPUSH
5227: CALL_OW 87
// InGameOn ;
5231: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5235: LD_INT 22
5237: PUSH
5238: LD_INT 1
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL_OW 69
5249: PPUSH
5250: LD_INT 130
5252: PPUSH
5253: LD_INT 103
5255: PPUSH
5256: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5260: LD_VAR 0 1
5264: PPUSH
5265: LD_INT 114
5267: PPUSH
5268: LD_INT 102
5270: PPUSH
5271: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5275: LD_EXP 1
5279: PPUSH
5280: LD_STRING D1-JMM-1
5282: PPUSH
5283: CALL_OW 88
// if IsOk ( Donaldson ) then
5287: LD_EXP 3
5291: PPUSH
5292: CALL_OW 302
5296: IFFALSE 5334
// begin Say ( Donaldson , D1-Don-1 ) ;
5298: LD_EXP 3
5302: PPUSH
5303: LD_STRING D1-Don-1
5305: PPUSH
5306: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5310: LD_EXP 1
5314: PPUSH
5315: LD_STRING D1-JMM-2
5317: PPUSH
5318: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5322: LD_EXP 3
5326: PPUSH
5327: LD_STRING D1-Don-2
5329: PPUSH
5330: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5334: LD_INT 22
5336: PUSH
5337: LD_INT 1
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PPUSH
5344: CALL_OW 69
5348: PPUSH
5349: LD_INT 110
5351: PPUSH
5352: LD_INT 101
5354: PPUSH
5355: CALL_OW 171
// end ;
5359: PPOPN 1
5361: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5362: LD_INT 1
5364: PPUSH
5365: LD_INT 102
5367: PPUSH
5368: LD_INT 94
5370: PPUSH
5371: CALL_OW 293
5375: IFFALSE 5550
5377: GO 5379
5379: DISABLE
5380: LD_INT 0
5382: PPUSH
// begin CenterOnXY ( 95 , 84 ) ;
5383: LD_INT 95
5385: PPUSH
5386: LD_INT 84
5388: PPUSH
5389: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
5393: LD_INT 22
5395: PUSH
5396: LD_INT 1
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 26
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 2
5415: PUSH
5416: LD_INT 25
5418: PUSH
5419: LD_INT 1
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: LD_INT 25
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 25
5438: PUSH
5439: LD_INT 3
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 25
5448: PUSH
5449: LD_INT 4
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: PUSH
5468: LD_EXP 1
5472: DIFF
5473: PPUSH
5474: CALL_OW 69
5478: PPUSH
5479: LD_STRING D1-Sol1-2
5481: PPUSH
5482: LD_STRING 
5484: PPUSH
5485: CALL 12223 0 3
// Say ( JMM , D1-JMM-3 ) ;
5489: LD_EXP 1
5493: PPUSH
5494: LD_STRING D1-JMM-3
5496: PPUSH
5497: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5501: LD_STRING M1
5503: PPUSH
5504: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5508: LD_ADDR_VAR 0 1
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 69
5527: PUSH
5528: FOR_IN
5529: IFFALSE 5548
// ComMoveXY ( i , 95 , 84 ) ;
5531: LD_VAR 0 1
5535: PPUSH
5536: LD_INT 95
5538: PPUSH
5539: LD_INT 84
5541: PPUSH
5542: CALL_OW 111
5546: GO 5528
5548: POP
5549: POP
// end ;
5550: PPOPN 1
5552: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5553: GO 5555
5555: DISABLE
5556: LD_INT 0
5558: PPUSH
5559: PPUSH
5560: PPUSH
5561: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: LD_INT 8
5569: PPUSH
5570: LD_INT 22
5572: PUSH
5573: LD_INT 3
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 25
5582: PUSH
5583: LD_INT 9
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 70
5598: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 22
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: PPUSH
5617: CALL_OW 69
5621: ST_TO_ADDR
// enable ;
5622: ENABLE
// for i in your_units do
5623: LD_ADDR_VAR 0 1
5627: PUSH
5628: LD_VAR 0 3
5632: PUSH
5633: FOR_IN
5634: IFFALSE 6269
// begin if See ( 3 , i ) then
5636: LD_INT 3
5638: PPUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: CALL_OW 292
5648: IFFALSE 6267
// begin disable ;
5650: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5651: LD_VAR 0 2
5655: PPUSH
5656: LD_INT 96
5658: PPUSH
5659: LD_INT 85
5661: PPUSH
5662: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 96
5673: PPUSH
5674: LD_INT 85
5676: PPUSH
5677: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5681: LD_VAR 0 2
5685: PPUSH
5686: LD_INT 96
5688: PPUSH
5689: LD_INT 85
5691: PPUSH
5692: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_INT 96
5703: PPUSH
5704: LD_INT 85
5706: PPUSH
5707: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5711: LD_VAR 0 2
5715: PPUSH
5716: LD_INT 96
5718: PPUSH
5719: LD_INT 85
5721: PPUSH
5722: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_INT 96
5733: PPUSH
5734: LD_INT 85
5736: PPUSH
5737: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5741: LD_EXP 1
5745: PPUSH
5746: LD_STRING D1a-JMM-1
5748: PPUSH
5749: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5753: LD_EXP 3
5757: PPUSH
5758: LD_STRING D1a-Don-1
5760: PPUSH
5761: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5765: LD_ADDR_VAR 0 1
5769: PUSH
5770: LD_INT 22
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PPUSH
5780: CALL_OW 69
5784: PUSH
5785: FOR_IN
5786: IFFALSE 5805
// ComMoveXY ( i , 109 , 102 ) ;
5788: LD_VAR 0 1
5792: PPUSH
5793: LD_INT 109
5795: PPUSH
5796: LD_INT 102
5798: PPUSH
5799: CALL_OW 111
5803: GO 5785
5805: POP
5806: POP
// Say ( JMM , D1a-JMM-2 ) ;
5807: LD_EXP 1
5811: PPUSH
5812: LD_STRING D1a-JMM-2
5814: PPUSH
5815: CALL_OW 88
// wait ( 0 0$10 ) ;
5819: LD_INT 350
5821: PPUSH
5822: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5826: LD_EXP 1
5830: PPUSH
5831: CALL_OW 310
5835: PPUSH
5836: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5840: LD_EXP 3
5844: PPUSH
5845: LD_STRING D1b-Don-1
5847: PPUSH
5848: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D1b-JMM-1
5859: PPUSH
5860: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5864: LD_INT 22
5866: PUSH
5867: LD_INT 1
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 26
5876: PUSH
5877: LD_INT 1
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: LD_INT 25
5889: PUSH
5890: LD_INT 1
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 25
5899: PUSH
5900: LD_INT 2
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 25
5909: PUSH
5910: LD_INT 3
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 25
5919: PUSH
5920: LD_INT 4
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: PUSH
5939: LD_EXP 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: DIFF
5947: PPUSH
5948: CALL_OW 69
5952: PPUSH
5953: LD_STRING D1b-Sol1-1
5955: PPUSH
5956: LD_STRING 
5958: PPUSH
5959: CALL 12223 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5963: LD_EXP 3
5967: PPUSH
5968: LD_STRING D1b-Don-2
5970: PPUSH
5971: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D1b-JMM-2
5982: PPUSH
5983: CALL_OW 88
// dec = ShowQuery1 ;
5987: LD_ADDR_VAR 0 4
5991: PUSH
5992: CALL 12759 0 0
5996: ST_TO_ADDR
// if dec = 1 then
5997: LD_VAR 0 4
6001: PUSH
6002: LD_INT 1
6004: EQUAL
6005: IFFALSE 6111
// begin Say ( JMM , D2-JMM-1 ) ;
6007: LD_EXP 1
6011: PPUSH
6012: LD_STRING D2-JMM-1
6014: PPUSH
6015: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6019: LD_EXP 22
6023: PPUSH
6024: LD_STRING D2-Pow-1
6026: PPUSH
6027: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6031: LD_EXP 1
6035: PPUSH
6036: LD_STRING D2a-JMM-1
6038: PPUSH
6039: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6043: LD_EXP 22
6047: PPUSH
6048: LD_STRING D2a-Pow-1
6050: PPUSH
6051: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6055: LD_EXP 1
6059: PPUSH
6060: LD_STRING D2a-JMM-2
6062: PPUSH
6063: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6067: LD_EXP 22
6071: PPUSH
6072: LD_STRING D2a-Pow-2
6074: PPUSH
6075: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6079: LD_EXP 1
6083: PPUSH
6084: LD_STRING D2a-JMM-3
6086: PPUSH
6087: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6091: LD_EXP 22
6095: PPUSH
6096: LD_STRING D2a-Pow-3
6098: PPUSH
6099: CALL_OW 94
// secondPass = 2 ;
6103: LD_ADDR_EXP 28
6107: PUSH
6108: LD_INT 2
6110: ST_TO_ADDR
// end ; if dec = 2 then
6111: LD_VAR 0 4
6115: PUSH
6116: LD_INT 2
6118: EQUAL
6119: IFFALSE 6213
// begin Say ( JMM , D2-JMM-1 ) ;
6121: LD_EXP 1
6125: PPUSH
6126: LD_STRING D2-JMM-1
6128: PPUSH
6129: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6133: LD_EXP 22
6137: PPUSH
6138: LD_STRING D2-Pow-1
6140: PPUSH
6141: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6145: LD_EXP 1
6149: PPUSH
6150: LD_STRING D2b-JMM-1
6152: PPUSH
6153: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6157: LD_EXP 22
6161: PPUSH
6162: LD_STRING D2b-Pow-1
6164: PPUSH
6165: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6169: LD_EXP 1
6173: PPUSH
6174: LD_STRING D2c-JMM-1
6176: PPUSH
6177: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6181: LD_EXP 22
6185: PPUSH
6186: LD_STRING D2c-Pow-1
6188: PPUSH
6189: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6193: LD_EXP 1
6197: PPUSH
6198: LD_STRING D2c-JMM-2
6200: PPUSH
6201: CALL_OW 88
// secondPass = 2 ;
6205: LD_ADDR_EXP 28
6209: PUSH
6210: LD_INT 2
6212: ST_TO_ADDR
// end ; if dec = 3 then
6213: LD_VAR 0 4
6217: PUSH
6218: LD_INT 3
6220: EQUAL
6221: IFFALSE 6231
// secondPass = 1 ;
6223: LD_ADDR_EXP 28
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// InGameOff ;
6231: CALL_OW 9
// ruAI = 1 ;
6235: LD_ADDR_EXP 42
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6243: LD_INT 1
6245: PPUSH
6246: LD_INT 3
6248: PPUSH
6249: LD_INT 2
6251: PPUSH
6252: LD_INT 1
6254: PPUSH
6255: CALL_OW 80
// SaveForQuickRestart ;
6259: CALL_OW 22
// exit ;
6263: POP
6264: POP
6265: GO 6271
// end ; end ;
6267: GO 5633
6269: POP
6270: POP
// end ;
6271: PPOPN 4
6273: END
// every 1 1$0 trigger secondPass = 2 do
6274: LD_EXP 28
6278: PUSH
6279: LD_INT 2
6281: EQUAL
6282: IFFALSE 6409
6284: GO 6286
6286: DISABLE
// begin PowellSupport1 ;
6287: CALL 1744 0 0
// DialogueOn ;
6291: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6295: LD_EXP 1
6299: PPUSH
6300: LD_STRING DC1-JMM-1
6302: PPUSH
6303: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6307: LD_EXP 22
6311: PPUSH
6312: LD_STRING DC1-Pow-1
6314: PPUSH
6315: CALL_OW 94
// DialogueOff ;
6319: CALL_OW 7
// wait ( 3 3$0 ) ;
6323: LD_INT 6300
6325: PPUSH
6326: CALL_OW 67
// PowellSupport2 ;
6330: CALL 2203 0 0
// DialogueOn ;
6334: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6338: LD_EXP 1
6342: PPUSH
6343: LD_STRING DC2-JMM-1
6345: PPUSH
6346: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6350: LD_EXP 22
6354: PPUSH
6355: LD_STRING DC2-Pow-1
6357: PPUSH
6358: CALL_OW 94
// DialogueOff ;
6362: CALL_OW 7
// wait ( 6 6$0 ) ;
6366: LD_INT 12600
6368: PPUSH
6369: CALL_OW 67
// PowellSupport3 ;
6373: CALL 2680 0 0
// DialogueOn ;
6377: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6381: LD_EXP 22
6385: PPUSH
6386: LD_STRING DC3-Pow-1
6388: PPUSH
6389: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6393: LD_EXP 1
6397: PPUSH
6398: LD_STRING DC3-JMM-1
6400: PPUSH
6401: CALL_OW 88
// DialogueOff ;
6405: CALL_OW 7
// end ;
6409: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6410: LD_EXP 28
6414: PUSH
6415: LD_INT 2
6417: EQUAL
6418: PUSH
6419: LD_INT 22
6421: PUSH
6422: LD_INT 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: LD_INT 30
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 30
6444: PUSH
6445: LD_INT 1
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PPUSH
6461: CALL_OW 69
6465: PUSH
6466: LD_INT 0
6468: GREATER
6469: AND
6470: IFFALSE 9812
6472: GO 6474
6474: DISABLE
6475: LD_INT 0
6477: PPUSH
6478: PPUSH
6479: PPUSH
6480: PPUSH
6481: PPUSH
6482: PPUSH
6483: PPUSH
6484: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6485: LD_ADDR_VAR 0 4
6489: PUSH
6490: LD_INT 22
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 21
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 2
6512: PUSH
6513: LD_INT 30
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: LD_INT 30
6525: PUSH
6526: LD_INT 1
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: PPUSH
6543: CALL_OW 69
6547: ST_TO_ADDR
// for i in tmp do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 4
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6592
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6561: LD_ADDR_VAR 0 6
6565: PUSH
6566: LD_VAR 0 6
6570: PUSH
6571: LD_VAR 0 1
6575: PPUSH
6576: CALL_OW 274
6580: PPUSH
6581: LD_INT 1
6583: PPUSH
6584: CALL_OW 275
6588: PLUS
6589: ST_TO_ADDR
6590: GO 6558
6592: POP
6593: POP
// for i in tmp do
6594: LD_ADDR_VAR 0 1
6598: PUSH
6599: LD_VAR 0 4
6603: PUSH
6604: FOR_IN
6605: IFFALSE 6638
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6607: LD_ADDR_VAR 0 7
6611: PUSH
6612: LD_VAR 0 7
6616: PUSH
6617: LD_VAR 0 1
6621: PPUSH
6622: CALL_OW 274
6626: PPUSH
6627: LD_INT 2
6629: PPUSH
6630: CALL_OW 275
6634: PLUS
6635: ST_TO_ADDR
6636: GO 6604
6638: POP
6639: POP
// for i in tmp do
6640: LD_ADDR_VAR 0 1
6644: PUSH
6645: LD_VAR 0 4
6649: PUSH
6650: FOR_IN
6651: IFFALSE 6684
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6653: LD_ADDR_VAR 0 8
6657: PUSH
6658: LD_VAR 0 8
6662: PUSH
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 274
6672: PPUSH
6673: LD_INT 3
6675: PPUSH
6676: CALL_OW 275
6680: PLUS
6681: ST_TO_ADDR
6682: GO 6650
6684: POP
6685: POP
// PrepareKurt ;
6686: CALL 4107 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6690: LD_EXP 26
6694: PPUSH
6695: LD_INT 144
6697: PPUSH
6698: LD_INT 111
6700: PPUSH
6701: CALL_OW 111
// wait ( 0 0$2 ) ;
6705: LD_INT 70
6707: PPUSH
6708: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6712: LD_INT 8
6714: PPUSH
6715: LD_INT 1
6717: PPUSH
6718: CALL_OW 343
// if kurtStatus > 0 then
6722: LD_EXP 27
6726: PUSH
6727: LD_INT 0
6729: GREATER
6730: IFFALSE 8280
// begin ComExitVehicle ( Kurt ) ;
6732: LD_EXP 24
6736: PPUSH
6737: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6741: LD_EXP 24
6745: PPUSH
6746: CALL_OW 87
// wait ( 0 0$1 ) ;
6750: LD_INT 35
6752: PPUSH
6753: CALL_OW 67
// DialogueOn ;
6757: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
6761: LD_INT 22
6763: PUSH
6764: LD_INT 1
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 26
6773: PUSH
6774: LD_INT 1
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 2
6783: PUSH
6784: LD_INT 25
6786: PUSH
6787: LD_INT 1
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 25
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 25
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 25
6816: PUSH
6817: LD_INT 4
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: LIST
6835: PUSH
6836: LD_EXP 1
6840: PUSH
6841: EMPTY
6842: LIST
6843: DIFF
6844: PPUSH
6845: CALL_OW 69
6849: PPUSH
6850: LD_STRING D3-Sol1-1
6852: PPUSH
6853: LD_STRING 
6855: PPUSH
6856: CALL 12223 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6860: LD_EXP 24
6864: PPUSH
6865: LD_STRING D3-Kurt-1
6867: PPUSH
6868: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6872: LD_EXP 1
6876: PPUSH
6877: LD_STRING D3-JMM-1
6879: PPUSH
6880: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6884: LD_EXP 24
6888: PPUSH
6889: LD_STRING D3-Kurt-2
6891: PPUSH
6892: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6896: LD_EXP 1
6900: PPUSH
6901: LD_STRING D3-JMM-2
6903: PPUSH
6904: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6908: LD_EXP 24
6912: PPUSH
6913: LD_STRING D3-Kurt-4
6915: PPUSH
6916: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6920: LD_EXP 1
6924: PPUSH
6925: LD_STRING D3-JMM-4
6927: PPUSH
6928: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6932: LD_EXP 24
6936: PPUSH
6937: LD_STRING D3-Kurt-5
6939: PPUSH
6940: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6944: LD_EXP 24
6948: PPUSH
6949: LD_STRING D3-Kurt-5a
6951: PPUSH
6952: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6956: LD_VAR 0 6
6960: PUSH
6961: LD_INT 60
6963: GREATEREQUAL
6964: PUSH
6965: LD_VAR 0 8
6969: PUSH
6970: LD_INT 60
6972: GREATEREQUAL
6973: AND
6974: IFFALSE 7009
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6976: LD_ADDR_VAR 0 2
6980: PUSH
6981: LD_STRING Q2K
6983: PPUSH
6984: LD_INT 1
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 98
7006: ST_TO_ADDR
7007: GO 7032
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_STRING Q2K
7016: PPUSH
7017: LD_INT 3
7019: PUSH
7020: LD_INT 4
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 98
7031: ST_TO_ADDR
// if dec1 = 1 then
7032: LD_VAR 0 2
7036: PUSH
7037: LD_INT 1
7039: EQUAL
7040: IFFALSE 7074
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7042: LD_EXP 1
7046: PPUSH
7047: LD_STRING D3Ka-JMM-1
7049: PPUSH
7050: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7054: LD_EXP 24
7058: PPUSH
7059: LD_STRING D3Ka-Kurt-1
7061: PPUSH
7062: CALL_OW 88
// warWithLegion = 1 ;
7066: LD_ADDR_EXP 31
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// end ; if dec1 = 2 then
7074: LD_VAR 0 2
7078: PUSH
7079: LD_INT 2
7081: EQUAL
7082: IFFALSE 7308
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7084: LD_EXP 1
7088: PPUSH
7089: LD_STRING D3Kb-JMM-1
7091: PPUSH
7092: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7096: LD_EXP 24
7100: PPUSH
7101: LD_STRING D3Kb-Kurt-1
7103: PPUSH
7104: CALL_OW 88
// for i in tmp do
7108: LD_ADDR_VAR 0 1
7112: PUSH
7113: LD_VAR 0 4
7117: PUSH
7118: FOR_IN
7119: IFFALSE 7206
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7121: LD_ADDR_VAR 0 5
7125: PUSH
7126: LD_VAR 0 1
7130: PPUSH
7131: CALL_OW 274
7135: PPUSH
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 275
7143: ST_TO_ADDR
// if tmp2 >= 60 then
7144: LD_VAR 0 5
7148: PUSH
7149: LD_INT 60
7151: GREATEREQUAL
7152: IFFALSE 7184
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7154: LD_VAR 0 1
7158: PPUSH
7159: CALL_OW 274
7163: PPUSH
7164: LD_INT 1
7166: PPUSH
7167: LD_VAR 0 5
7171: PUSH
7172: LD_INT 60
7174: MINUS
7175: PPUSH
7176: CALL_OW 277
// break ;
7180: GO 7206
// end else
7182: GO 7204
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7184: LD_VAR 0 1
7188: PPUSH
7189: CALL_OW 274
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: LD_INT 0
7199: PPUSH
7200: CALL_OW 277
// end ; end ;
7204: GO 7118
7206: POP
7207: POP
// for i in tmp do
7208: LD_ADDR_VAR 0 1
7212: PUSH
7213: LD_VAR 0 4
7217: PUSH
7218: FOR_IN
7219: IFFALSE 7306
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7221: LD_ADDR_VAR 0 5
7225: PUSH
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL_OW 274
7235: PPUSH
7236: LD_INT 3
7238: PPUSH
7239: CALL_OW 275
7243: ST_TO_ADDR
// if tmp2 >= 60 then
7244: LD_VAR 0 5
7248: PUSH
7249: LD_INT 60
7251: GREATEREQUAL
7252: IFFALSE 7284
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 274
7263: PPUSH
7264: LD_INT 3
7266: PPUSH
7267: LD_VAR 0 5
7271: PUSH
7272: LD_INT 60
7274: MINUS
7275: PPUSH
7276: CALL_OW 277
// break ;
7280: GO 7306
// end else
7282: GO 7304
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7284: LD_VAR 0 1
7288: PPUSH
7289: CALL_OW 274
7293: PPUSH
7294: LD_INT 3
7296: PPUSH
7297: LD_INT 0
7299: PPUSH
7300: CALL_OW 277
// end ; end ;
7304: GO 7218
7306: POP
7307: POP
// end ; if dec1 = 3 then
7308: LD_VAR 0 2
7312: PUSH
7313: LD_INT 3
7315: EQUAL
7316: IFFALSE 7551
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7318: LD_EXP 1
7322: PPUSH
7323: LD_STRING D3Kc1-JMM-1
7325: PPUSH
7326: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7330: LD_EXP 24
7334: PPUSH
7335: LD_STRING D3Kc1-Kurt-1
7337: PPUSH
7338: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7342: LD_EXP 1
7346: PPUSH
7347: LD_STRING D3Kc1-JMM-2
7349: PPUSH
7350: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7354: LD_EXP 24
7358: PPUSH
7359: LD_STRING D3Kc1-Kurt-2
7361: PPUSH
7362: CALL_OW 88
// askSiberite = 1 ;
7366: LD_ADDR_EXP 33
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_STRING Q2b
7381: PPUSH
7382: LD_INT 1
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: LIST
7395: PPUSH
7396: CALL_OW 98
7400: ST_TO_ADDR
// if dec2 = 1 then
7401: LD_VAR 0 3
7405: PUSH
7406: LD_INT 1
7408: EQUAL
7409: IFFALSE 7443
// begin Say ( JMM , D4a-JMM-1 ) ;
7411: LD_EXP 1
7415: PPUSH
7416: LD_STRING D4a-JMM-1
7418: PPUSH
7419: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7423: LD_EXP 24
7427: PPUSH
7428: LD_STRING D4b-Kurt-1
7430: PPUSH
7431: CALL_OW 88
// warWithLegion = 1 ;
7435: LD_ADDR_EXP 31
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// end ; if dec2 = 2 then
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 2
7450: EQUAL
7451: IFFALSE 7485
// begin Say ( JMM , D4b-JMM-1 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D4b-JMM-1
7460: PPUSH
7461: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7465: LD_EXP 24
7469: PPUSH
7470: LD_STRING D4b-Kurt-1
7472: PPUSH
7473: CALL_OW 88
// warWithLegion = 1 ;
7477: LD_ADDR_EXP 31
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ; if dec2 = 3 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 3
7492: EQUAL
7493: IFFALSE 7551
// begin Say ( JMM , D4c-JMM-1 ) ;
7495: LD_EXP 1
7499: PPUSH
7500: LD_STRING D4c-JMM-1
7502: PPUSH
7503: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7507: LD_EXP 24
7511: PPUSH
7512: LD_STRING D4c-Kurt-1
7514: PPUSH
7515: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING D4c-JMM-2
7526: PPUSH
7527: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7531: LD_EXP 24
7535: PPUSH
7536: LD_STRING D4c-Kurt-2
7538: PPUSH
7539: CALL_OW 88
// fakeInfo = 1 ;
7543: LD_ADDR_EXP 32
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7551: LD_VAR 0 2
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 8216
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7561: LD_EXP 1
7565: PPUSH
7566: LD_STRING D3Kd-JMM-1
7568: PPUSH
7569: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7573: LD_VAR 0 6
7577: PUSH
7578: LD_INT 120
7580: GREATEREQUAL
7581: PUSH
7582: LD_VAR 0 8
7586: PUSH
7587: LD_INT 120
7589: GREATEREQUAL
7590: AND
7591: IFFALSE 7626
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_STRING Q2aK
7600: PPUSH
7601: LD_INT 1
7603: PUSH
7604: LD_INT 2
7606: PUSH
7607: LD_INT 3
7609: PUSH
7610: LD_INT 4
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PPUSH
7619: CALL_OW 98
7623: ST_TO_ADDR
7624: GO 7649
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7626: LD_ADDR_VAR 0 3
7630: PUSH
7631: LD_STRING Q2K
7633: PPUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 4
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PPUSH
7644: CALL_OW 98
7648: ST_TO_ADDR
// if dec2 = 1 then
7649: LD_VAR 0 3
7653: PUSH
7654: LD_INT 1
7656: EQUAL
7657: IFFALSE 7691
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7659: LD_EXP 1
7663: PPUSH
7664: LD_STRING D5Ka-JMM-1
7666: PPUSH
7667: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7671: LD_EXP 24
7675: PPUSH
7676: LD_STRING D5Ka-Kurt-1
7678: PPUSH
7679: CALL_OW 88
// warWithLegion = 1 ;
7683: LD_ADDR_EXP 31
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// end ; if dec2 = 2 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 2
7698: EQUAL
7699: IFFALSE 7725
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7701: LD_EXP 1
7705: PPUSH
7706: LD_STRING D3Kb-JMM-1
7708: PPUSH
7709: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7713: LD_EXP 24
7717: PPUSH
7718: LD_STRING D3Kb-Kurt-1
7720: PPUSH
7721: CALL_OW 88
// end ; if dec2 = 3 then
7725: LD_VAR 0 3
7729: PUSH
7730: LD_INT 3
7732: EQUAL
7733: IFFALSE 7963
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7735: LD_EXP 1
7739: PPUSH
7740: LD_STRING D3Ke-JMM-1
7742: PPUSH
7743: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7747: LD_EXP 24
7751: PPUSH
7752: LD_STRING D3Ke-Kurt-1
7754: PPUSH
7755: CALL_OW 88
// PrepareLegionForPlayer ;
7759: CALL 4295 0 0
// for i in tmp do
7763: LD_ADDR_VAR 0 1
7767: PUSH
7768: LD_VAR 0 4
7772: PUSH
7773: FOR_IN
7774: IFFALSE 7861
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7776: LD_ADDR_VAR 0 5
7780: PUSH
7781: LD_VAR 0 1
7785: PPUSH
7786: CALL_OW 274
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: CALL_OW 275
7798: ST_TO_ADDR
// if tmp2 >= 120 then
7799: LD_VAR 0 5
7803: PUSH
7804: LD_INT 120
7806: GREATEREQUAL
7807: IFFALSE 7839
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7809: LD_VAR 0 1
7813: PPUSH
7814: CALL_OW 274
7818: PPUSH
7819: LD_INT 1
7821: PPUSH
7822: LD_VAR 0 5
7826: PUSH
7827: LD_INT 120
7829: MINUS
7830: PPUSH
7831: CALL_OW 277
// break ;
7835: GO 7861
// end else
7837: GO 7859
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 274
7848: PPUSH
7849: LD_INT 1
7851: PPUSH
7852: LD_INT 0
7854: PPUSH
7855: CALL_OW 277
// end ; end ;
7859: GO 7773
7861: POP
7862: POP
// for i in tmp do
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_VAR 0 4
7872: PUSH
7873: FOR_IN
7874: IFFALSE 7961
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7876: LD_ADDR_VAR 0 5
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 274
7890: PPUSH
7891: LD_INT 3
7893: PPUSH
7894: CALL_OW 275
7898: ST_TO_ADDR
// if tmp2 >= 120 then
7899: LD_VAR 0 5
7903: PUSH
7904: LD_INT 120
7906: GREATEREQUAL
7907: IFFALSE 7939
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 274
7918: PPUSH
7919: LD_INT 3
7921: PPUSH
7922: LD_VAR 0 5
7926: PUSH
7927: LD_INT 120
7929: MINUS
7930: PPUSH
7931: CALL_OW 277
// break ;
7935: GO 7961
// end else
7937: GO 7959
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7939: LD_VAR 0 1
7943: PPUSH
7944: CALL_OW 274
7948: PPUSH
7949: LD_INT 3
7951: PPUSH
7952: LD_INT 0
7954: PPUSH
7955: CALL_OW 277
// end ; end ;
7959: GO 7873
7961: POP
7962: POP
// end ; if dec2 = 4 then
7963: LD_VAR 0 3
7967: PUSH
7968: LD_INT 4
7970: EQUAL
7971: IFFALSE 8216
// begin if dec1 = 3 then
7973: LD_VAR 0 2
7977: PUSH
7978: LD_INT 3
7980: EQUAL
7981: IFFALSE 8216
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7983: LD_EXP 1
7987: PPUSH
7988: LD_STRING D3Kc1-JMM-1
7990: PPUSH
7991: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7995: LD_EXP 24
7999: PPUSH
8000: LD_STRING D3Kc1-Kurt-1
8002: PPUSH
8003: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8007: LD_EXP 1
8011: PPUSH
8012: LD_STRING D3Kc1-JMM-2
8014: PPUSH
8015: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8019: LD_EXP 24
8023: PPUSH
8024: LD_STRING D3Kc1-Kurt-2
8026: PPUSH
8027: CALL_OW 88
// askSiberite = 1 ;
8031: LD_ADDR_EXP 33
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8039: LD_ADDR_VAR 0 2
8043: PUSH
8044: LD_STRING Q2b
8046: PPUSH
8047: LD_INT 1
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: PPUSH
8061: CALL_OW 98
8065: ST_TO_ADDR
// if dec2 = 1 then
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 1
8073: EQUAL
8074: IFFALSE 8108
// begin Say ( JMM , D4a-JMM-1 ) ;
8076: LD_EXP 1
8080: PPUSH
8081: LD_STRING D4a-JMM-1
8083: PPUSH
8084: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8088: LD_EXP 24
8092: PPUSH
8093: LD_STRING D4b-Kurt-1
8095: PPUSH
8096: CALL_OW 88
// warWithLegion = 1 ;
8100: LD_ADDR_EXP 31
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// end ; if dec2 = 2 then
8108: LD_VAR 0 3
8112: PUSH
8113: LD_INT 2
8115: EQUAL
8116: IFFALSE 8150
// begin Say ( JMM , D4b-JMM-1 ) ;
8118: LD_EXP 1
8122: PPUSH
8123: LD_STRING D4b-JMM-1
8125: PPUSH
8126: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8130: LD_EXP 24
8134: PPUSH
8135: LD_STRING D4b-Kurt-1
8137: PPUSH
8138: CALL_OW 88
// warWithLegion = 1 ;
8142: LD_ADDR_EXP 31
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// end ; if dec2 = 3 then
8150: LD_VAR 0 3
8154: PUSH
8155: LD_INT 3
8157: EQUAL
8158: IFFALSE 8216
// begin Say ( JMM , D4c-JMM-1 ) ;
8160: LD_EXP 1
8164: PPUSH
8165: LD_STRING D4c-JMM-1
8167: PPUSH
8168: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8172: LD_EXP 24
8176: PPUSH
8177: LD_STRING D4c-Kurt-1
8179: PPUSH
8180: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8184: LD_EXP 1
8188: PPUSH
8189: LD_STRING D4c-JMM-2
8191: PPUSH
8192: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8196: LD_EXP 24
8200: PPUSH
8201: LD_STRING D4c-Kurt-2
8203: PPUSH
8204: CALL_OW 88
// fakeInfo = 1 ;
8208: LD_ADDR_EXP 32
8212: PUSH
8213: LD_INT 1
8215: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8216: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8220: LD_EXP 24
8224: PPUSH
8225: LD_EXP 26
8229: PPUSH
8230: CALL_OW 120
// wait ( 0 0$1 ) ;
8234: LD_INT 35
8236: PPUSH
8237: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8241: LD_EXP 26
8245: PPUSH
8246: LD_INT 4
8248: PPUSH
8249: CALL_OW 113
// wait ( 0 0$3 ) ;
8253: LD_INT 105
8255: PPUSH
8256: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8260: LD_EXP 24
8264: PPUSH
8265: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8269: LD_EXP 26
8273: PPUSH
8274: CALL_OW 64
// end else
8278: GO 9812
// begin ComExitVehicle ( otherKurt ) ;
8280: LD_EXP 25
8284: PPUSH
8285: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8289: LD_EXP 25
8293: PPUSH
8294: CALL_OW 87
// wait ( 0 0$1 ) ;
8298: LD_INT 35
8300: PPUSH
8301: CALL_OW 67
// DialogueOn ;
8305: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
8309: LD_INT 22
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 26
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: LD_INT 25
8334: PUSH
8335: LD_INT 1
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 25
8344: PUSH
8345: LD_INT 2
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: LD_INT 25
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 25
8364: PUSH
8365: LD_INT 4
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: PUSH
8384: LD_EXP 1
8388: PUSH
8389: EMPTY
8390: LIST
8391: DIFF
8392: PPUSH
8393: CALL_OW 69
8397: PPUSH
8398: LD_STRING D3-Sol1-1
8400: PPUSH
8401: LD_STRING 
8403: PPUSH
8404: CALL 12223 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8408: LD_EXP 25
8412: PPUSH
8413: LD_STRING D3-Kurt-1
8415: PPUSH
8416: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8420: LD_EXP 1
8424: PPUSH
8425: LD_STRING D3-JMM-1
8427: PPUSH
8428: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8432: LD_EXP 25
8436: PPUSH
8437: LD_STRING D3-Kurt-3
8439: PPUSH
8440: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8444: LD_EXP 1
8448: PPUSH
8449: LD_STRING D3-JMM-3
8451: PPUSH
8452: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8456: LD_EXP 25
8460: PPUSH
8461: LD_STRING D3-Kurt-5
8463: PPUSH
8464: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8468: LD_EXP 25
8472: PPUSH
8473: LD_STRING D3-Kurt-5b
8475: PPUSH
8476: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8480: LD_VAR 0 6
8484: PUSH
8485: LD_INT 100
8487: GREATEREQUAL
8488: PUSH
8489: LD_VAR 0 8
8493: PUSH
8494: LD_INT 100
8496: GREATEREQUAL
8497: AND
8498: IFFALSE 8533
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8500: LD_ADDR_VAR 0 2
8504: PUSH
8505: LD_STRING Q2
8507: PPUSH
8508: LD_INT 1
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: LD_INT 3
8516: PUSH
8517: LD_INT 4
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 98
8530: ST_TO_ADDR
8531: GO 8556
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8533: LD_ADDR_VAR 0 2
8537: PUSH
8538: LD_STRING Q2
8540: PPUSH
8541: LD_INT 3
8543: PUSH
8544: LD_INT 4
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 98
8555: ST_TO_ADDR
// if dec1 = 1 then
8556: LD_VAR 0 2
8560: PUSH
8561: LD_INT 1
8563: EQUAL
8564: IFFALSE 8598
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8566: LD_EXP 1
8570: PPUSH
8571: LD_STRING D3Ka-JMM-1
8573: PPUSH
8574: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8578: LD_EXP 25
8582: PPUSH
8583: LD_STRING D3Ka-Kurt-1
8585: PPUSH
8586: CALL_OW 88
// warWithLegion = 1 ;
8590: LD_ADDR_EXP 31
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// end ; if dec1 = 2 then
8598: LD_VAR 0 2
8602: PUSH
8603: LD_INT 2
8605: EQUAL
8606: IFFALSE 8832
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8608: LD_EXP 1
8612: PPUSH
8613: LD_STRING D3Kb-JMM-1
8615: PPUSH
8616: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8620: LD_EXP 25
8624: PPUSH
8625: LD_STRING D3Kb-Kurt-1
8627: PPUSH
8628: CALL_OW 88
// for i in tmp do
8632: LD_ADDR_VAR 0 1
8636: PUSH
8637: LD_VAR 0 4
8641: PUSH
8642: FOR_IN
8643: IFFALSE 8730
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8645: LD_ADDR_VAR 0 5
8649: PUSH
8650: LD_VAR 0 1
8654: PPUSH
8655: CALL_OW 274
8659: PPUSH
8660: LD_INT 1
8662: PPUSH
8663: CALL_OW 275
8667: ST_TO_ADDR
// if tmp2 >= 100 then
8668: LD_VAR 0 5
8672: PUSH
8673: LD_INT 100
8675: GREATEREQUAL
8676: IFFALSE 8708
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8678: LD_VAR 0 1
8682: PPUSH
8683: CALL_OW 274
8687: PPUSH
8688: LD_INT 1
8690: PPUSH
8691: LD_VAR 0 5
8695: PUSH
8696: LD_INT 100
8698: MINUS
8699: PPUSH
8700: CALL_OW 277
// break ;
8704: GO 8730
// end else
8706: GO 8728
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8708: LD_VAR 0 1
8712: PPUSH
8713: CALL_OW 274
8717: PPUSH
8718: LD_INT 1
8720: PPUSH
8721: LD_INT 0
8723: PPUSH
8724: CALL_OW 277
// end ; end ;
8728: GO 8642
8730: POP
8731: POP
// for i in tmp do
8732: LD_ADDR_VAR 0 1
8736: PUSH
8737: LD_VAR 0 4
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8830
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8745: LD_ADDR_VAR 0 5
8749: PUSH
8750: LD_VAR 0 1
8754: PPUSH
8755: CALL_OW 274
8759: PPUSH
8760: LD_INT 3
8762: PPUSH
8763: CALL_OW 275
8767: ST_TO_ADDR
// if tmp2 >= 100 then
8768: LD_VAR 0 5
8772: PUSH
8773: LD_INT 100
8775: GREATEREQUAL
8776: IFFALSE 8808
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8778: LD_VAR 0 1
8782: PPUSH
8783: CALL_OW 274
8787: PPUSH
8788: LD_INT 3
8790: PPUSH
8791: LD_VAR 0 5
8795: PUSH
8796: LD_INT 100
8798: MINUS
8799: PPUSH
8800: CALL_OW 277
// break ;
8804: GO 8830
// end else
8806: GO 8828
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8808: LD_VAR 0 1
8812: PPUSH
8813: CALL_OW 274
8817: PPUSH
8818: LD_INT 3
8820: PPUSH
8821: LD_INT 0
8823: PPUSH
8824: CALL_OW 277
// end ; end ;
8828: GO 8742
8830: POP
8831: POP
// end ; if dec1 = 3 then
8832: LD_VAR 0 2
8836: PUSH
8837: LD_INT 3
8839: EQUAL
8840: IFFALSE 9075
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8842: LD_EXP 1
8846: PPUSH
8847: LD_STRING D3Kc1-JMM-1
8849: PPUSH
8850: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8854: LD_EXP 25
8858: PPUSH
8859: LD_STRING D3Kc1-Kurt-1
8861: PPUSH
8862: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8866: LD_EXP 1
8870: PPUSH
8871: LD_STRING D3Kc1-JMM-2
8873: PPUSH
8874: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8878: LD_EXP 25
8882: PPUSH
8883: LD_STRING D3Kc1-Kurt-2
8885: PPUSH
8886: CALL_OW 88
// askSiberite = 1 ;
8890: LD_ADDR_EXP 33
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8898: LD_ADDR_VAR 0 2
8902: PUSH
8903: LD_STRING Q2b
8905: PPUSH
8906: LD_INT 1
8908: PUSH
8909: LD_INT 2
8911: PUSH
8912: LD_INT 3
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 98
8924: ST_TO_ADDR
// if dec2 = 1 then
8925: LD_VAR 0 3
8929: PUSH
8930: LD_INT 1
8932: EQUAL
8933: IFFALSE 8967
// begin Say ( JMM , D4a-JMM-1 ) ;
8935: LD_EXP 1
8939: PPUSH
8940: LD_STRING D4a-JMM-1
8942: PPUSH
8943: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8947: LD_EXP 25
8951: PPUSH
8952: LD_STRING D4b-Kurt-1
8954: PPUSH
8955: CALL_OW 88
// warWithLegion = 1 ;
8959: LD_ADDR_EXP 31
8963: PUSH
8964: LD_INT 1
8966: ST_TO_ADDR
// end ; if dec2 = 2 then
8967: LD_VAR 0 3
8971: PUSH
8972: LD_INT 2
8974: EQUAL
8975: IFFALSE 9009
// begin Say ( JMM , D4b-JMM-1 ) ;
8977: LD_EXP 1
8981: PPUSH
8982: LD_STRING D4b-JMM-1
8984: PPUSH
8985: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8989: LD_EXP 25
8993: PPUSH
8994: LD_STRING D4b-Kurt-1
8996: PPUSH
8997: CALL_OW 88
// warWithLegion = 1 ;
9001: LD_ADDR_EXP 31
9005: PUSH
9006: LD_INT 1
9008: ST_TO_ADDR
// end ; if dec2 = 3 then
9009: LD_VAR 0 3
9013: PUSH
9014: LD_INT 3
9016: EQUAL
9017: IFFALSE 9075
// begin Say ( JMM , D4c-JMM-1 ) ;
9019: LD_EXP 1
9023: PPUSH
9024: LD_STRING D4c-JMM-1
9026: PPUSH
9027: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9031: LD_EXP 25
9035: PPUSH
9036: LD_STRING D4c-Kurt-1
9038: PPUSH
9039: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9043: LD_EXP 1
9047: PPUSH
9048: LD_STRING D4c-JMM-2
9050: PPUSH
9051: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9055: LD_EXP 25
9059: PPUSH
9060: LD_STRING D4c-Kurt-2
9062: PPUSH
9063: CALL_OW 88
// fakeInfo = 1 ;
9067: LD_ADDR_EXP 32
9071: PUSH
9072: LD_INT 1
9074: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9075: LD_VAR 0 2
9079: PUSH
9080: LD_INT 4
9082: EQUAL
9083: IFFALSE 9740
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9085: LD_EXP 1
9089: PPUSH
9090: LD_STRING D3Kd-JMM-1
9092: PPUSH
9093: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9097: LD_VAR 0 6
9101: PUSH
9102: LD_INT 200
9104: GREATEREQUAL
9105: PUSH
9106: LD_VAR 0 8
9110: PUSH
9111: LD_INT 200
9113: GREATEREQUAL
9114: AND
9115: IFFALSE 9150
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9117: LD_ADDR_VAR 0 3
9121: PUSH
9122: LD_STRING Q2a
9124: PPUSH
9125: LD_INT 1
9127: PUSH
9128: LD_INT 2
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: LD_INT 4
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 98
9147: ST_TO_ADDR
9148: GO 9173
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9150: LD_ADDR_VAR 0 3
9154: PUSH
9155: LD_STRING Q2a
9157: PPUSH
9158: LD_INT 1
9160: PUSH
9161: LD_INT 4
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 98
9172: ST_TO_ADDR
// if dec2 = 1 then
9173: LD_VAR 0 3
9177: PUSH
9178: LD_INT 1
9180: EQUAL
9181: IFFALSE 9215
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9183: LD_EXP 1
9187: PPUSH
9188: LD_STRING D5Ka-JMM-1
9190: PPUSH
9191: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9195: LD_EXP 25
9199: PPUSH
9200: LD_STRING D5Ka-Kurt-1
9202: PPUSH
9203: CALL_OW 88
// warWithLegion = 1 ;
9207: LD_ADDR_EXP 31
9211: PUSH
9212: LD_INT 1
9214: ST_TO_ADDR
// end ; if dec2 = 2 then
9215: LD_VAR 0 3
9219: PUSH
9220: LD_INT 2
9222: EQUAL
9223: IFFALSE 9249
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9225: LD_EXP 1
9229: PPUSH
9230: LD_STRING D3Kb-JMM-1
9232: PPUSH
9233: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9237: LD_EXP 25
9241: PPUSH
9242: LD_STRING D3Kb-Kurt-1
9244: PPUSH
9245: CALL_OW 88
// end ; if dec2 = 3 then
9249: LD_VAR 0 3
9253: PUSH
9254: LD_INT 3
9256: EQUAL
9257: IFFALSE 9487
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9259: LD_EXP 1
9263: PPUSH
9264: LD_STRING D3Ke-JMM-1
9266: PPUSH
9267: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9271: LD_EXP 25
9275: PPUSH
9276: LD_STRING D3Ke-Kurt-1
9278: PPUSH
9279: CALL_OW 88
// PrepareLegionForPlayer ;
9283: CALL 4295 0 0
// for i in tmp do
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: LD_VAR 0 4
9296: PUSH
9297: FOR_IN
9298: IFFALSE 9385
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9300: LD_ADDR_VAR 0 5
9304: PUSH
9305: LD_VAR 0 1
9309: PPUSH
9310: CALL_OW 274
9314: PPUSH
9315: LD_INT 1
9317: PPUSH
9318: CALL_OW 275
9322: ST_TO_ADDR
// if tmp2 >= 200 then
9323: LD_VAR 0 5
9327: PUSH
9328: LD_INT 200
9330: GREATEREQUAL
9331: IFFALSE 9363
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: CALL_OW 274
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: LD_VAR 0 5
9350: PUSH
9351: LD_INT 200
9353: MINUS
9354: PPUSH
9355: CALL_OW 277
// break ;
9359: GO 9385
// end else
9361: GO 9383
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 274
9372: PPUSH
9373: LD_INT 1
9375: PPUSH
9376: LD_INT 0
9378: PPUSH
9379: CALL_OW 277
// end ; end ;
9383: GO 9297
9385: POP
9386: POP
// for i in tmp do
9387: LD_ADDR_VAR 0 1
9391: PUSH
9392: LD_VAR 0 4
9396: PUSH
9397: FOR_IN
9398: IFFALSE 9485
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9400: LD_ADDR_VAR 0 5
9404: PUSH
9405: LD_VAR 0 1
9409: PPUSH
9410: CALL_OW 274
9414: PPUSH
9415: LD_INT 3
9417: PPUSH
9418: CALL_OW 275
9422: ST_TO_ADDR
// if tmp2 >= 200 then
9423: LD_VAR 0 5
9427: PUSH
9428: LD_INT 200
9430: GREATEREQUAL
9431: IFFALSE 9463
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9433: LD_VAR 0 1
9437: PPUSH
9438: CALL_OW 274
9442: PPUSH
9443: LD_INT 3
9445: PPUSH
9446: LD_VAR 0 5
9450: PUSH
9451: LD_INT 200
9453: MINUS
9454: PPUSH
9455: CALL_OW 277
// break ;
9459: GO 9485
// end else
9461: GO 9483
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9463: LD_VAR 0 1
9467: PPUSH
9468: CALL_OW 274
9472: PPUSH
9473: LD_INT 3
9475: PPUSH
9476: LD_INT 0
9478: PPUSH
9479: CALL_OW 277
// end ; end ;
9483: GO 9397
9485: POP
9486: POP
// end ; if dec2 = 4 then
9487: LD_VAR 0 3
9491: PUSH
9492: LD_INT 4
9494: EQUAL
9495: IFFALSE 9740
// begin if dec1 = 3 then
9497: LD_VAR 0 2
9501: PUSH
9502: LD_INT 3
9504: EQUAL
9505: IFFALSE 9740
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9507: LD_EXP 1
9511: PPUSH
9512: LD_STRING D3Kc1-JMM-1
9514: PPUSH
9515: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9519: LD_EXP 25
9523: PPUSH
9524: LD_STRING D3Kc1-Kurt-1
9526: PPUSH
9527: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9531: LD_EXP 1
9535: PPUSH
9536: LD_STRING D3Kc1-JMM-2
9538: PPUSH
9539: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9543: LD_EXP 25
9547: PPUSH
9548: LD_STRING D3Kc1-Kurt-2
9550: PPUSH
9551: CALL_OW 88
// askSiberite = 1 ;
9555: LD_ADDR_EXP 33
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9563: LD_ADDR_VAR 0 2
9567: PUSH
9568: LD_STRING Q2b
9570: PPUSH
9571: LD_INT 1
9573: PUSH
9574: LD_INT 2
9576: PUSH
9577: LD_INT 3
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 98
9589: ST_TO_ADDR
// if dec2 = 1 then
9590: LD_VAR 0 3
9594: PUSH
9595: LD_INT 1
9597: EQUAL
9598: IFFALSE 9632
// begin Say ( JMM , D4a-JMM-1 ) ;
9600: LD_EXP 1
9604: PPUSH
9605: LD_STRING D4a-JMM-1
9607: PPUSH
9608: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9612: LD_EXP 25
9616: PPUSH
9617: LD_STRING D4b-Kurt-1
9619: PPUSH
9620: CALL_OW 88
// warWithLegion = 1 ;
9624: LD_ADDR_EXP 31
9628: PUSH
9629: LD_INT 1
9631: ST_TO_ADDR
// end ; if dec2 = 2 then
9632: LD_VAR 0 3
9636: PUSH
9637: LD_INT 2
9639: EQUAL
9640: IFFALSE 9674
// begin Say ( JMM , D4b-JMM-1 ) ;
9642: LD_EXP 1
9646: PPUSH
9647: LD_STRING D4b-JMM-1
9649: PPUSH
9650: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9654: LD_EXP 25
9658: PPUSH
9659: LD_STRING D4b-Kurt-1
9661: PPUSH
9662: CALL_OW 88
// warWithLegion = 1 ;
9666: LD_ADDR_EXP 31
9670: PUSH
9671: LD_INT 1
9673: ST_TO_ADDR
// end ; if dec2 = 3 then
9674: LD_VAR 0 3
9678: PUSH
9679: LD_INT 3
9681: EQUAL
9682: IFFALSE 9740
// begin Say ( JMM , D4c-JMM-1 ) ;
9684: LD_EXP 1
9688: PPUSH
9689: LD_STRING D4c-JMM-1
9691: PPUSH
9692: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9696: LD_EXP 25
9700: PPUSH
9701: LD_STRING D4c-Kurt-1
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9708: LD_EXP 1
9712: PPUSH
9713: LD_STRING D4c-JMM-2
9715: PPUSH
9716: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9720: LD_EXP 25
9724: PPUSH
9725: LD_STRING D4c-Kurt-2
9727: PPUSH
9728: CALL_OW 88
// fakeInfo = 1 ;
9732: LD_ADDR_EXP 32
9736: PUSH
9737: LD_INT 1
9739: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9740: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9744: LD_INT 8
9746: PPUSH
9747: LD_INT 8
9749: PPUSH
9750: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9754: LD_EXP 25
9758: PPUSH
9759: LD_EXP 26
9763: PPUSH
9764: CALL_OW 120
// wait ( 0 0$1 ) ;
9768: LD_INT 35
9770: PPUSH
9771: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9775: LD_EXP 26
9779: PPUSH
9780: LD_INT 4
9782: PPUSH
9783: CALL_OW 113
// wait ( 0 0$6 ) ;
9787: LD_INT 210
9789: PPUSH
9790: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9794: LD_EXP 25
9798: PPUSH
9799: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9803: LD_EXP 26
9807: PPUSH
9808: CALL_OW 64
// end ; end ;
9812: PPOPN 8
9814: END
// every 0 0$10 trigger warWithLegion = 1 do
9815: LD_EXP 31
9819: PUSH
9820: LD_INT 1
9822: EQUAL
9823: IFFALSE 9832
9825: GO 9827
9827: DISABLE
// PrepareAttackLegion ;
9828: CALL 5023 0 0
9832: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9833: LD_EXP 15
9837: PPUSH
9838: CALL_OW 305
9842: PUSH
9843: LD_EXP 15
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 289
9855: NOT
9856: AND
9857: PUSH
9858: LD_EXP 15
9862: PPUSH
9863: LD_INT 2
9865: PPUSH
9866: CALL_OW 289
9870: NOT
9871: AND
9872: PUSH
9873: LD_EXP 15
9877: PPUSH
9878: LD_INT 3
9880: PPUSH
9881: CALL_OW 289
9885: NOT
9886: AND
9887: IFFALSE 9904
9889: GO 9891
9891: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9892: LD_EXP 15
9896: PPUSH
9897: LD_INT 4
9899: PPUSH
9900: CALL_OW 235
9904: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9905: LD_EXP 16
9909: PPUSH
9910: CALL_OW 305
9914: PUSH
9915: LD_EXP 16
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 289
9927: NOT
9928: AND
9929: PUSH
9930: LD_EXP 16
9934: PPUSH
9935: LD_INT 2
9937: PPUSH
9938: CALL_OW 289
9942: NOT
9943: AND
9944: PUSH
9945: LD_EXP 16
9949: PPUSH
9950: LD_INT 3
9952: PPUSH
9953: CALL_OW 289
9957: NOT
9958: AND
9959: IFFALSE 9976
9961: GO 9963
9963: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9964: LD_EXP 16
9968: PPUSH
9969: LD_INT 4
9971: PPUSH
9972: CALL_OW 235
9976: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9977: LD_EXP 17
9981: PPUSH
9982: CALL_OW 305
9986: PUSH
9987: LD_EXP 17
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 289
9999: NOT
10000: AND
10001: PUSH
10002: LD_EXP 17
10006: PPUSH
10007: LD_INT 2
10009: PPUSH
10010: CALL_OW 289
10014: NOT
10015: AND
10016: PUSH
10017: LD_EXP 17
10021: PPUSH
10022: LD_INT 3
10024: PPUSH
10025: CALL_OW 289
10029: NOT
10030: AND
10031: IFFALSE 10048
10033: GO 10035
10035: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10036: LD_EXP 17
10040: PPUSH
10041: LD_INT 4
10043: PPUSH
10044: CALL_OW 235
10048: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10049: LD_EXP 18
10053: PPUSH
10054: CALL_OW 305
10058: PUSH
10059: LD_EXP 18
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL_OW 289
10071: NOT
10072: AND
10073: PUSH
10074: LD_EXP 18
10078: PPUSH
10079: LD_INT 2
10081: PPUSH
10082: CALL_OW 289
10086: NOT
10087: AND
10088: PUSH
10089: LD_EXP 18
10093: PPUSH
10094: LD_INT 3
10096: PPUSH
10097: CALL_OW 289
10101: NOT
10102: AND
10103: IFFALSE 10120
10105: GO 10107
10107: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10108: LD_EXP 18
10112: PPUSH
10113: LD_INT 4
10115: PPUSH
10116: CALL_OW 235
10120: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10121: LD_EXP 19
10125: PPUSH
10126: CALL_OW 305
10130: PUSH
10131: LD_EXP 19
10135: PPUSH
10136: LD_INT 1
10138: PPUSH
10139: CALL_OW 289
10143: NOT
10144: AND
10145: PUSH
10146: LD_EXP 19
10150: PPUSH
10151: LD_INT 2
10153: PPUSH
10154: CALL_OW 289
10158: NOT
10159: AND
10160: PUSH
10161: LD_EXP 19
10165: PPUSH
10166: LD_INT 3
10168: PPUSH
10169: CALL_OW 289
10173: NOT
10174: AND
10175: PUSH
10176: LD_EXP 19
10180: PPUSH
10181: LD_INT 2
10183: PPUSH
10184: CALL_OW 289
10188: NOT
10189: AND
10190: IFFALSE 10207
10192: GO 10194
10194: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10195: LD_EXP 19
10199: PPUSH
10200: LD_INT 4
10202: PPUSH
10203: CALL_OW 235
10207: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10208: LD_EXP 20
10212: PPUSH
10213: CALL_OW 305
10217: PUSH
10218: LD_EXP 20
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 289
10230: NOT
10231: AND
10232: PUSH
10233: LD_EXP 20
10237: PPUSH
10238: LD_INT 2
10240: PPUSH
10241: CALL_OW 289
10245: NOT
10246: AND
10247: PUSH
10248: LD_EXP 20
10252: PPUSH
10253: LD_INT 3
10255: PPUSH
10256: CALL_OW 289
10260: NOT
10261: AND
10262: IFFALSE 10279
10264: GO 10266
10266: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10267: LD_EXP 20
10271: PPUSH
10272: LD_INT 4
10274: PPUSH
10275: CALL_OW 235
10279: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10280: LD_EXP 21
10284: PPUSH
10285: CALL_OW 305
10289: PUSH
10290: LD_EXP 21
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 289
10302: NOT
10303: AND
10304: PUSH
10305: LD_EXP 21
10309: PPUSH
10310: LD_INT 2
10312: PPUSH
10313: CALL_OW 289
10317: NOT
10318: AND
10319: PUSH
10320: LD_EXP 21
10324: PPUSH
10325: LD_INT 3
10327: PPUSH
10328: CALL_OW 289
10332: NOT
10333: AND
10334: IFFALSE 10351
10336: GO 10338
10338: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10339: LD_EXP 21
10343: PPUSH
10344: LD_INT 4
10346: PPUSH
10347: CALL_OW 235
10351: END
// every 0 0$1 do var i ;
10352: GO 10354
10354: DISABLE
10355: LD_INT 0
10357: PPUSH
// begin enable ;
10358: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10359: LD_ADDR_VAR 0 1
10363: PUSH
10364: LD_INT 22
10366: PUSH
10367: LD_INT 4
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 69
10378: PUSH
10379: FOR_IN
10380: IFFALSE 10419
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10382: LD_VAR 0 1
10386: PPUSH
10387: LD_INT 4
10389: PPUSH
10390: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10394: LD_VAR 0 1
10398: PPUSH
10399: LD_INT 4
10401: PPUSH
10402: CALL_OW 308
10406: IFFALSE 10417
// RemoveUnit ( i ) ;
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 64
// end ;
10417: GO 10379
10419: POP
10420: POP
// end ;
10421: PPOPN 1
10423: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10424: LD_EXP 28
10428: PUSH
10429: LD_INT 1
10431: EQUAL
10432: IFFALSE 10807
10434: GO 10436
10436: DISABLE
10437: LD_INT 0
10439: PPUSH
10440: PPUSH
10441: PPUSH
// begin enable ;
10442: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10443: LD_ADDR_VAR 0 2
10447: PUSH
10448: LD_INT 12
10450: PPUSH
10451: LD_INT 22
10453: PUSH
10454: LD_INT 3
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 21
10463: PUSH
10464: LD_INT 2
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 70
10479: ST_TO_ADDR
// for i in enemyVehs do
10480: LD_ADDR_VAR 0 1
10484: PUSH
10485: LD_VAR 0 2
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10805
// begin if See ( 1 , i ) then
10493: LD_INT 1
10495: PPUSH
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 292
10505: IFFALSE 10803
// begin disable ;
10507: DISABLE
// DialogueOn ;
10508: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10521: LD_INT 22
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 26
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_EXP 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: DIFF
10553: PPUSH
10554: CALL_OW 69
10558: PPUSH
10559: LD_STRING DT1-Sol1-1
10561: PPUSH
10562: LD_STRING DT1-FSol1-1
10564: PPUSH
10565: CALL 12223 0 3
// dec = ShowQuery2 ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: CALL 12833 0 0
10578: ST_TO_ADDR
// if dec = 1 then
10579: LD_VAR 0 3
10583: PUSH
10584: LD_INT 1
10586: EQUAL
10587: IFFALSE 10693
// begin Say ( JMM , D2-JMM-1 ) ;
10589: LD_EXP 1
10593: PPUSH
10594: LD_STRING D2-JMM-1
10596: PPUSH
10597: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10601: LD_EXP 22
10605: PPUSH
10606: LD_STRING D2-Pow-1
10608: PPUSH
10609: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10613: LD_EXP 1
10617: PPUSH
10618: LD_STRING D2a-JMM-1
10620: PPUSH
10621: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10625: LD_EXP 22
10629: PPUSH
10630: LD_STRING D2a-Pow-1
10632: PPUSH
10633: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10637: LD_EXP 1
10641: PPUSH
10642: LD_STRING D2a-JMM-2
10644: PPUSH
10645: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10649: LD_EXP 22
10653: PPUSH
10654: LD_STRING D2a-Pow-2
10656: PPUSH
10657: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10661: LD_EXP 1
10665: PPUSH
10666: LD_STRING D2a-JMM-3
10668: PPUSH
10669: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10673: LD_EXP 22
10677: PPUSH
10678: LD_STRING D2a-Pow-3
10680: PPUSH
10681: CALL_OW 94
// secondPass = 2 ;
10685: LD_ADDR_EXP 28
10689: PUSH
10690: LD_INT 2
10692: ST_TO_ADDR
// end ; if dec = 2 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 2
10700: EQUAL
10701: IFFALSE 10795
// begin Say ( JMM , D2-JMM-1 ) ;
10703: LD_EXP 1
10707: PPUSH
10708: LD_STRING D2-JMM-1
10710: PPUSH
10711: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10715: LD_EXP 22
10719: PPUSH
10720: LD_STRING D2-Pow-1
10722: PPUSH
10723: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10727: LD_EXP 1
10731: PPUSH
10732: LD_STRING D2b-JMM-1
10734: PPUSH
10735: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10739: LD_EXP 22
10743: PPUSH
10744: LD_STRING D2b-Pow-1
10746: PPUSH
10747: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10751: LD_EXP 1
10755: PPUSH
10756: LD_STRING D2c-JMM-1
10758: PPUSH
10759: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10763: LD_EXP 22
10767: PPUSH
10768: LD_STRING D2c-Pow-1
10770: PPUSH
10771: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10775: LD_EXP 1
10779: PPUSH
10780: LD_STRING D2c-JMM-2
10782: PPUSH
10783: CALL_OW 88
// secondPass = 2 ;
10787: LD_ADDR_EXP 28
10791: PUSH
10792: LD_INT 2
10794: ST_TO_ADDR
// end ; DialogueOff ;
10795: CALL_OW 7
// exit ;
10799: POP
10800: POP
10801: GO 10807
// end ; end ;
10803: GO 10490
10805: POP
10806: POP
// end ;
10807: PPOPN 3
10809: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10810: LD_EXP 29
10814: PUSH
10815: LD_INT 1
10817: EQUAL
10818: IFFALSE 10978
10820: GO 10822
10822: DISABLE
10823: LD_INT 0
10825: PPUSH
10826: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10827: LD_ADDR_VAR 0 2
10831: PUSH
10832: LD_INT 11
10834: PPUSH
10835: LD_INT 22
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 24
10847: PUSH
10848: LD_INT 250
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PPUSH
10859: CALL_OW 70
10863: ST_TO_ADDR
// enable ;
10864: ENABLE
// for i in vehicles do
10865: LD_ADDR_VAR 0 1
10869: PUSH
10870: LD_VAR 0 2
10874: PUSH
10875: FOR_IN
10876: IFFALSE 10976
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10878: LD_INT 1
10880: PPUSH
10881: LD_VAR 0 1
10885: PPUSH
10886: CALL_OW 292
10890: PUSH
10891: LD_EXP 29
10895: PUSH
10896: LD_INT 1
10898: EQUAL
10899: AND
10900: PUSH
10901: LD_EXP 30
10905: PUSH
10906: LD_INT 4
10908: LESSEQUAL
10909: AND
10910: IFFALSE 10974
// begin disable ;
10912: DISABLE
// DialogueOn ;
10913: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10917: LD_INT 22
10919: PUSH
10920: LD_INT 1
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 21
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PPUSH
10941: CALL_OW 69
10945: PPUSH
10946: LD_STRING DT1-Sol1-1
10948: PPUSH
10949: LD_STRING DT1-FSol1-1
10951: PPUSH
10952: CALL 12223 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10956: LD_EXP 1
10960: PPUSH
10961: LD_STRING DT1-JMM-1
10963: PPUSH
10964: CALL_OW 88
// DialogueOff ;
10968: CALL_OW 7
// break ;
10972: GO 10976
// end ; end ;
10974: GO 10875
10976: POP
10977: POP
// end ;
10978: PPOPN 2
10980: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10981: LD_EXP 29
10985: PUSH
10986: LD_INT 1
10988: EQUAL
10989: PUSH
10990: LD_INT 11
10992: PPUSH
10993: LD_INT 22
10995: PUSH
10996: LD_INT 3
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 24
11005: PUSH
11006: LD_INT 251
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 2
11015: PUSH
11016: LD_INT 21
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 21
11028: PUSH
11029: LD_INT 1
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: PPUSH
11046: CALL_OW 70
11050: PUSH
11051: LD_INT 0
11053: EQUAL
11054: AND
11055: IFFALSE 11139
11057: GO 11059
11059: DISABLE
// begin vehicleTeleported = 2 ;
11060: LD_ADDR_EXP 29
11064: PUSH
11065: LD_INT 2
11067: ST_TO_ADDR
// DialogueOn ;
11068: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11072: LD_EXP 1
11076: PPUSH
11077: LD_STRING DT1a-JMM-1
11079: PPUSH
11080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11084: LD_INT 22
11086: PUSH
11087: LD_INT 1
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 21
11096: PUSH
11097: LD_INT 1
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PPUSH
11108: CALL_OW 69
11112: PPUSH
11113: LD_STRING DT1a-Sol1-1
11115: PPUSH
11116: LD_STRING DT1a-FSol1-1
11118: PPUSH
11119: CALL 12223 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11123: LD_EXP 1
11127: PPUSH
11128: LD_STRING DT1a-JMM-2
11130: PPUSH
11131: CALL_OW 88
// DialogueOff ;
11135: CALL_OW 7
// end ;
11139: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11140: LD_EXP 29
11144: PUSH
11145: LD_INT 3
11147: EQUAL
11148: PUSH
11149: LD_EXP 30
11153: PUSH
11154: LD_INT 4
11156: GREATER
11157: AND
11158: IFFALSE 11296
11160: GO 11162
11162: DISABLE
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11167: LD_ADDR_VAR 0 2
11171: PUSH
11172: LD_INT 11
11174: PPUSH
11175: LD_INT 22
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 24
11187: PUSH
11188: LD_INT 250
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: ST_TO_ADDR
// enable ;
11204: ENABLE
// for i in vehicles do
11205: LD_ADDR_VAR 0 1
11209: PUSH
11210: LD_VAR 0 2
11214: PUSH
11215: FOR_IN
11216: IFFALSE 11294
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11218: LD_INT 1
11220: PPUSH
11221: LD_VAR 0 1
11225: PPUSH
11226: CALL_OW 292
11230: PUSH
11231: LD_EXP 29
11235: PUSH
11236: LD_INT 3
11238: EQUAL
11239: AND
11240: IFFALSE 11292
// begin disable ;
11242: DISABLE
// DialogueOn ;
11243: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11247: LD_INT 22
11249: PUSH
11250: LD_INT 1
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 21
11259: PUSH
11260: LD_INT 1
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 69
11275: PPUSH
11276: LD_STRING DT2-Sol1-1
11278: PPUSH
11279: LD_STRING DT2-FSol1-1
11281: PPUSH
11282: CALL 12223 0 3
// DialogueOff ;
11286: CALL_OW 7
// break ;
11290: GO 11294
// end ; end ;
11292: GO 11215
11294: POP
11295: POP
// end ;
11296: PPOPN 2
11298: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11299: LD_EXP 29
11303: PUSH
11304: LD_INT 3
11306: EQUAL
11307: PUSH
11308: LD_INT 11
11310: PPUSH
11311: LD_INT 22
11313: PUSH
11314: LD_INT 3
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 24
11323: PUSH
11324: LD_INT 251
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: LD_INT 21
11336: PUSH
11337: LD_INT 2
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 21
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 70
11368: PUSH
11369: LD_INT 0
11371: EQUAL
11372: AND
11373: IFFALSE 11457
11375: GO 11377
11377: DISABLE
// begin vehicleTeleported = 4 ;
11378: LD_ADDR_EXP 29
11382: PUSH
11383: LD_INT 4
11385: ST_TO_ADDR
// DialogueOn ;
11386: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11390: LD_EXP 1
11394: PPUSH
11395: LD_STRING DT2a-JMM-1
11397: PPUSH
11398: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11402: LD_INT 22
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 21
11414: PUSH
11415: LD_INT 1
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PPUSH
11426: CALL_OW 69
11430: PPUSH
11431: LD_STRING DT2a-Sol1-1
11433: PPUSH
11434: LD_STRING DT2a-FSol1-1
11436: PPUSH
11437: CALL 12223 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
11441: LD_EXP 3
11445: PPUSH
11446: LD_STRING DT2a-Don-1
11448: PPUSH
11449: CALL_OW 88
// DialogueOff ;
11453: CALL_OW 7
// end ;
11457: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11458: LD_INT 1
11460: PPUSH
11461: LD_INT 45
11463: PPUSH
11464: LD_INT 74
11466: PPUSH
11467: CALL_OW 293
11471: IFFALSE 11566
11473: GO 11475
11475: DISABLE
// begin DialogueOn ;
11476: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11480: LD_INT 36
11482: PPUSH
11483: LD_INT 55
11485: PPUSH
11486: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11490: LD_INT 22
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 21
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PPUSH
11514: CALL_OW 69
11518: PPUSH
11519: LD_STRING D5-Sol1-1
11521: PPUSH
11522: LD_STRING D5-FSol1-
11524: PPUSH
11525: CALL 12223 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
11529: LD_EXP 31
11533: PUSH
11534: LD_INT 1
11536: EQUAL
11537: PUSH
11538: LD_EXP 3
11542: PPUSH
11543: CALL_OW 300
11547: AND
11548: IFFALSE 11562
// Say ( Donaldson , D5-Don-1 ) ;
11550: LD_EXP 3
11554: PPUSH
11555: LD_STRING D5-Don-1
11557: PPUSH
11558: CALL_OW 88
// DialogueOff ;
11562: CALL_OW 7
// end ;
11566: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
11567: LD_INT 1
11569: PPUSH
11570: LD_INT 10
11572: PPUSH
11573: CALL_OW 292
11577: IFFALSE 11664
11579: GO 11581
11581: DISABLE
// begin DialogueOn ;
11582: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
11586: LD_INT 10
11588: PPUSH
11589: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11593: LD_INT 22
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 69
11621: PUSH
11622: LD_EXP 1
11626: PUSH
11627: EMPTY
11628: LIST
11629: DIFF
11630: PPUSH
11631: LD_STRING DT3-Sol1-1
11633: PPUSH
11634: LD_STRING DT3-FSol1-1
11636: PPUSH
11637: CALL 12223 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11641: LD_EXP 1
11645: PPUSH
11646: LD_STRING DT3-JMM-1
11648: PPUSH
11649: CALL_OW 88
// DialogueOff ;
11653: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11657: LD_STRING M2
11659: PPUSH
11660: CALL_OW 337
// end ;
11664: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 do var i , j , vehs ;
11665: LD_INT 3
11667: PPUSH
11668: CALL_OW 303
11672: PUSH
11673: LD_INT 4
11675: PPUSH
11676: CALL_OW 303
11680: OR
11681: PUSH
11682: LD_INT 22
11684: PPUSH
11685: LD_INT 22
11687: PUSH
11688: LD_INT 1
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PPUSH
11695: CALL_OW 70
11699: PUSH
11700: LD_INT 0
11702: GREATER
11703: OR
11704: IFFALSE 11911
11706: GO 11708
11708: DISABLE
11709: LD_INT 0
11711: PPUSH
11712: PPUSH
11713: PPUSH
// begin ruAI = 0 ;
11714: LD_ADDR_EXP 42
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11722: LD_ADDR_VAR 0 3
11726: PUSH
11727: LD_INT 10
11729: PPUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 21
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 58
11752: PUSH
11753: EMPTY
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: PPUSH
11761: CALL_OW 70
11765: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11766: LD_EXP 35
11770: PPUSH
11771: CALL_OW 122
// wait ( 0 0$1 ) ;
11775: LD_INT 35
11777: PPUSH
11778: CALL_OW 67
// DialogueOn ;
11782: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11786: LD_EXP 1
11790: PPUSH
11791: LD_STRING D6-JMM-1
11793: PPUSH
11794: CALL_OW 88
// DialogueOff ;
11798: CALL_OW 7
// if vehs > 0 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 0
11809: GREATER
11810: IFFALSE 11880
// for i := 1 to RuScientists do
11812: LD_ADDR_VAR 0 1
11816: PUSH
11817: DOUBLE
11818: LD_INT 1
11820: DEC
11821: ST_TO_ADDR
11822: LD_EXP 35
11826: PUSH
11827: FOR_TO
11828: IFFALSE 11876
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11830: LD_EXP 35
11834: PUSH
11835: LD_VAR 0 1
11839: ARRAY
11840: PPUSH
11841: LD_INT 3
11843: PUSH
11844: LD_INT 60
11846: PUSH
11847: EMPTY
11848: LIST
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PPUSH
11854: CALL_OW 72
11858: PPUSH
11859: LD_VAR 0 3
11863: PUSH
11864: LD_VAR 0 1
11868: ARRAY
11869: PPUSH
11870: CALL_OW 120
11874: GO 11827
11876: POP
11877: POP
11878: GO 11911
// ComMoveToArea ( RuScientists , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11880: LD_EXP 35
11884: PPUSH
11885: LD_INT 13
11887: PUSH
11888: LD_INT 14
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 2
11900: PPUSH
11901: CALL_OW 12
11905: ARRAY
11906: PPUSH
11907: CALL_OW 113
// end ;
11911: PPOPN 3
11913: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
11914: LD_EXP 42
11918: PUSH
11919: LD_INT 0
11921: EQUAL
11922: IFFALSE 12112
11924: GO 11926
11926: DISABLE
11927: LD_INT 0
11929: PPUSH
11930: PPUSH
// begin enable ;
11931: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
11932: LD_ADDR_VAR 0 1
11936: PUSH
11937: LD_INT 13
11939: PPUSH
11940: LD_INT 22
11942: PUSH
11943: LD_INT 3
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: PPUSH
11953: CALL_OW 70
11957: PUSH
11958: FOR_IN
11959: IFFALSE 12020
// begin for j in RuScientists do
11961: LD_ADDR_VAR 0 2
11965: PUSH
11966: LD_EXP 35
11970: PUSH
11971: FOR_IN
11972: IFFALSE 12007
// if j = i then
11974: LD_VAR 0 2
11978: PUSH
11979: LD_VAR 0 1
11983: EQUAL
11984: IFFALSE 12005
// RuScientists = RuScientists diff [ i ] ;
11986: LD_ADDR_EXP 35
11990: PUSH
11991: LD_EXP 35
11995: PUSH
11996: LD_VAR 0 1
12000: PUSH
12001: EMPTY
12002: LIST
12003: DIFF
12004: ST_TO_ADDR
12005: GO 11971
12007: POP
12008: POP
// RemoveUnit ( i ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: CALL_OW 64
// end ;
12018: GO 11958
12020: POP
12021: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12022: LD_ADDR_VAR 0 1
12026: PUSH
12027: LD_INT 14
12029: PPUSH
12030: LD_INT 22
12032: PUSH
12033: LD_INT 3
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: PPUSH
12043: CALL_OW 70
12047: PUSH
12048: FOR_IN
12049: IFFALSE 12110
// begin for j in RuScientists do
12051: LD_ADDR_VAR 0 2
12055: PUSH
12056: LD_EXP 35
12060: PUSH
12061: FOR_IN
12062: IFFALSE 12097
// if j = i then
12064: LD_VAR 0 2
12068: PUSH
12069: LD_VAR 0 1
12073: EQUAL
12074: IFFALSE 12095
// RuScientists = RuScientists diff [ i ] ;
12076: LD_ADDR_EXP 35
12080: PUSH
12081: LD_EXP 35
12085: PUSH
12086: LD_VAR 0 1
12090: PUSH
12091: EMPTY
12092: LIST
12093: DIFF
12094: ST_TO_ADDR
12095: GO 12061
12097: POP
12098: POP
// RemoveUnit ( i ) ;
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 64
// end ;
12108: GO 12048
12110: POP
12111: POP
// end ; end_of_file
12112: PPOPN 2
12114: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12115: LD_INT 0
12117: PPUSH
12118: PPUSH
// if exist_mode then
12119: LD_VAR 0 2
12123: IFFALSE 12142
// unit := CreateCharacter ( ident ) else
12125: LD_ADDR_VAR 0 4
12129: PUSH
12130: LD_VAR 0 1
12134: PPUSH
12135: CALL_OW 34
12139: ST_TO_ADDR
12140: GO 12157
// unit := NewCharacter ( ident ) ;
12142: LD_ADDR_VAR 0 4
12146: PUSH
12147: LD_VAR 0 1
12151: PPUSH
12152: CALL_OW 25
12156: ST_TO_ADDR
// result := unit ;
12157: LD_ADDR_VAR 0 3
12161: PUSH
12162: LD_VAR 0 4
12166: ST_TO_ADDR
// end ;
12167: LD_VAR 0 3
12171: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// for i in charactersList do
12176: LD_ADDR_VAR 0 4
12180: PUSH
12181: LD_VAR 0 1
12185: PUSH
12186: FOR_IN
12187: IFFALSE 12216
// begin if IsOk ( i ) then
12189: LD_VAR 0 4
12193: PPUSH
12194: CALL_OW 302
12198: IFFALSE 12214
// SaveCharacters ( i , ident ) ;
12200: LD_VAR 0 4
12204: PPUSH
12205: LD_VAR 0 2
12209: PPUSH
12210: CALL_OW 38
// end ;
12214: GO 12186
12216: POP
12217: POP
// end ;
12218: LD_VAR 0 3
12222: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12223: LD_INT 0
12225: PPUSH
12226: PPUSH
12227: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12228: LD_ADDR_VAR 0 1
12232: PUSH
12233: LD_VAR 0 1
12237: PUSH
12238: LD_EXP 1
12242: PUSH
12243: LD_EXP 7
12247: PUSH
12248: LD_EXP 3
12252: PUSH
12253: LD_EXP 4
12257: PUSH
12258: LD_EXP 5
12262: PUSH
12263: LD_EXP 2
12267: PUSH
12268: LD_EXP 12
12272: PUSH
12273: LD_EXP 13
12277: PUSH
12278: LD_EXP 9
12282: PUSH
12283: LD_EXP 11
12287: PUSH
12288: LD_EXP 6
12292: PUSH
12293: LD_EXP 8
12297: PUSH
12298: LD_EXP 10
12302: PUSH
12303: LD_EXP 22
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: DIFF
12324: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
12325: LD_ADDR_VAR 0 6
12329: PUSH
12330: LD_INT 1
12332: PPUSH
12333: LD_VAR 0 1
12337: PPUSH
12338: CALL_OW 12
12342: ST_TO_ADDR
// for i = 1 to characters do
12343: LD_ADDR_VAR 0 5
12347: PUSH
12348: DOUBLE
12349: LD_INT 1
12351: DEC
12352: ST_TO_ADDR
12353: LD_VAR 0 1
12357: PUSH
12358: FOR_TO
12359: IFFALSE 12469
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
12361: LD_VAR 0 5
12365: PUSH
12366: LD_VAR 0 6
12370: EQUAL
12371: PUSH
12372: LD_VAR 0 1
12376: PUSH
12377: LD_VAR 0 5
12381: ARRAY
12382: PPUSH
12383: CALL_OW 258
12387: PUSH
12388: LD_INT 1
12390: EQUAL
12391: AND
12392: IFFALSE 12414
// Say ( characters [ i ] , dialogMID ) ;
12394: LD_VAR 0 1
12398: PUSH
12399: LD_VAR 0 5
12403: ARRAY
12404: PPUSH
12405: LD_VAR 0 2
12409: PPUSH
12410: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
12414: LD_VAR 0 5
12418: PUSH
12419: LD_VAR 0 6
12423: EQUAL
12424: PUSH
12425: LD_VAR 0 1
12429: PUSH
12430: LD_VAR 0 5
12434: ARRAY
12435: PPUSH
12436: CALL_OW 258
12440: PUSH
12441: LD_INT 2
12443: EQUAL
12444: AND
12445: IFFALSE 12467
// Say ( characters [ i ] , dialogFID ) ;
12447: LD_VAR 0 1
12451: PUSH
12452: LD_VAR 0 5
12456: ARRAY
12457: PPUSH
12458: LD_VAR 0 3
12462: PPUSH
12463: CALL_OW 88
// end ;
12467: GO 12358
12469: POP
12470: POP
// end ;
12471: LD_VAR 0 4
12475: RET
// export function PrepareDifficulty ; var tmp ; begin
12476: LD_INT 0
12478: PPUSH
12479: PPUSH
// if Difficulty = 1 then
12480: LD_OWVAR 67
12484: PUSH
12485: LD_INT 1
12487: EQUAL
12488: IFFALSE 12506
// begin RuSolMinLevel = 8 ;
12490: LD_ADDR_EXP 37
12494: PUSH
12495: LD_INT 8
12497: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12498: LD_ADDR_EXP 38
12502: PUSH
12503: LD_INT 10
12505: ST_TO_ADDR
// end ; if Difficulty = 2 then
12506: LD_OWVAR 67
12510: PUSH
12511: LD_INT 2
12513: EQUAL
12514: IFFALSE 12608
// begin RuSolMinLevel = 9 ;
12516: LD_ADDR_EXP 37
12520: PUSH
12521: LD_INT 9
12523: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12524: LD_ADDR_EXP 38
12528: PUSH
12529: LD_INT 10
12531: ST_TO_ADDR
// uc_nation = 3 ;
12532: LD_ADDR_OWVAR 21
12536: PUSH
12537: LD_INT 3
12539: ST_TO_ADDR
// uc_side = 3 ;
12540: LD_ADDR_OWVAR 20
12544: PUSH
12545: LD_INT 3
12547: ST_TO_ADDR
// bc_level = 10 ;
12548: LD_ADDR_OWVAR 43
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// bc_type = b_turret ;
12556: LD_ADDR_OWVAR 42
12560: PUSH
12561: LD_INT 33
12563: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12564: LD_ADDR_VAR 0 2
12568: PUSH
12569: LD_INT 86
12571: PPUSH
12572: LD_INT 34
12574: PPUSH
12575: LD_INT 2
12577: PPUSH
12578: CALL_OW 47
12582: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12583: LD_VAR 0 2
12587: PPUSH
12588: LD_INT 49
12590: PPUSH
12591: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12595: LD_INT 64
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: CALL_OW 322
// end ; if Difficulty = 3 then
12608: LD_OWVAR 67
12612: PUSH
12613: LD_INT 3
12615: EQUAL
12616: IFFALSE 12754
// begin RuSolMinLevel = 10 ;
12618: LD_ADDR_EXP 37
12622: PUSH
12623: LD_INT 10
12625: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12626: LD_ADDR_EXP 38
12630: PUSH
12631: LD_INT 10
12633: ST_TO_ADDR
// uc_nation = 3 ;
12634: LD_ADDR_OWVAR 21
12638: PUSH
12639: LD_INT 3
12641: ST_TO_ADDR
// uc_side = 3 ;
12642: LD_ADDR_OWVAR 20
12646: PUSH
12647: LD_INT 3
12649: ST_TO_ADDR
// bc_level = 10 ;
12650: LD_ADDR_OWVAR 43
12654: PUSH
12655: LD_INT 10
12657: ST_TO_ADDR
// bc_type = b_turret ;
12658: LD_ADDR_OWVAR 42
12662: PUSH
12663: LD_INT 33
12665: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12666: LD_ADDR_VAR 0 2
12670: PUSH
12671: LD_INT 86
12673: PPUSH
12674: LD_INT 34
12676: PPUSH
12677: LD_INT 2
12679: PPUSH
12680: CALL_OW 47
12684: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12685: LD_VAR 0 2
12689: PPUSH
12690: LD_INT 49
12692: PPUSH
12693: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12697: LD_ADDR_VAR 0 2
12701: PUSH
12702: LD_INT 93
12704: PPUSH
12705: LD_INT 31
12707: PPUSH
12708: LD_INT 2
12710: PPUSH
12711: CALL_OW 47
12715: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12716: LD_VAR 0 2
12720: PPUSH
12721: LD_INT 49
12723: PPUSH
12724: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12728: LD_INT 64
12730: PPUSH
12731: LD_INT 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12741: LD_INT 65
12743: PPUSH
12744: LD_INT 3
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 322
// end ; end ;
12754: LD_VAR 0 1
12758: RET
// export function ShowQuery1 ; begin
12759: LD_INT 0
12761: PPUSH
// case query ( Q1 ) of 1 :
12762: LD_STRING Q1
12764: PPUSH
12765: CALL_OW 97
12769: PUSH
12770: LD_INT 1
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12789
12778: POP
// result = 1 ; 2 :
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: LD_INT 1
12786: ST_TO_ADDR
12787: GO 12828
12789: LD_INT 2
12791: DOUBLE
12792: EQUAL
12793: IFTRUE 12797
12795: GO 12808
12797: POP
// result = 2 ; 3 :
12798: LD_ADDR_VAR 0 1
12802: PUSH
12803: LD_INT 2
12805: ST_TO_ADDR
12806: GO 12828
12808: LD_INT 3
12810: DOUBLE
12811: EQUAL
12812: IFTRUE 12816
12814: GO 12827
12816: POP
// result = 3 ; end ;
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_INT 3
12824: ST_TO_ADDR
12825: GO 12828
12827: POP
// end ;
12828: LD_VAR 0 1
12832: RET
// export function ShowQuery2 ; begin
12833: LD_INT 0
12835: PPUSH
// case query ( Q1a ) of 1 :
12836: LD_STRING Q1a
12838: PPUSH
12839: CALL_OW 97
12843: PUSH
12844: LD_INT 1
12846: DOUBLE
12847: EQUAL
12848: IFTRUE 12852
12850: GO 12863
12852: POP
// result = 1 ; 2 :
12853: LD_ADDR_VAR 0 1
12857: PUSH
12858: LD_INT 1
12860: ST_TO_ADDR
12861: GO 12902
12863: LD_INT 2
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12882
12871: POP
// result = 2 ; 3 :
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: LD_INT 2
12879: ST_TO_ADDR
12880: GO 12902
12882: LD_INT 3
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12901
12890: POP
// result = 3 ; end ;
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: LD_INT 3
12898: ST_TO_ADDR
12899: GO 12902
12901: POP
// end ;
12902: LD_VAR 0 1
12906: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12907: LD_INT 0
12909: PPUSH
12910: PPUSH
12911: PPUSH
12912: PPUSH
12913: PPUSH
// for i = 1 to count do
12914: LD_ADDR_VAR 0 8
12918: PUSH
12919: DOUBLE
12920: LD_INT 1
12922: DEC
12923: ST_TO_ADDR
12924: LD_VAR 0 6
12928: PUSH
12929: FOR_TO
12930: IFFALSE 13011
// begin uc_side = side ;
12932: LD_ADDR_OWVAR 20
12936: PUSH
12937: LD_VAR 0 1
12941: ST_TO_ADDR
// uc_nation = nation ;
12942: LD_ADDR_OWVAR 21
12946: PUSH
12947: LD_VAR 0 2
12951: ST_TO_ADDR
// hc_gallery =  ;
12952: LD_ADDR_OWVAR 33
12956: PUSH
12957: LD_STRING 
12959: ST_TO_ADDR
// hc_name =  ;
12960: LD_ADDR_OWVAR 26
12964: PUSH
12965: LD_STRING 
12967: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12968: LD_INT 0
12970: PPUSH
12971: LD_VAR 0 5
12975: PPUSH
12976: LD_VAR 0 4
12980: PPUSH
12981: CALL_OW 380
// un = CreateHuman ;
12985: LD_ADDR_VAR 0 10
12989: PUSH
12990: CALL_OW 44
12994: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12995: LD_VAR 0 10
12999: PPUSH
13000: LD_VAR 0 3
13004: PPUSH
13005: CALL_OW 52
// end ;
13009: GO 12929
13011: POP
13012: POP
// end ;
13013: LD_VAR 0 7
13017: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13018: LD_INT 0
13020: PPUSH
13021: PPUSH
13022: PPUSH
13023: PPUSH
// for i = 1 to 72 do
13024: LD_ADDR_VAR 0 5
13028: PUSH
13029: DOUBLE
13030: LD_INT 1
13032: DEC
13033: ST_TO_ADDR
13034: LD_INT 72
13036: PUSH
13037: FOR_TO
13038: IFFALSE 13096
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13040: LD_VAR 0 5
13044: PPUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 321
13054: PUSH
13055: LD_INT 1
13057: EQUAL
13058: PUSH
13059: LD_VAR 0 5
13063: PPUSH
13064: LD_VAR 0 3
13068: PPUSH
13069: CALL_OW 482
13073: PUSH
13074: LD_INT 1
13076: EQUAL
13077: AND
13078: IFFALSE 13094
// AddComResearch ( lab , i ) ;
13080: LD_VAR 0 2
13084: PPUSH
13085: LD_VAR 0 5
13089: PPUSH
13090: CALL_OW 184
13094: GO 13037
13096: POP
13097: POP
// end ;
13098: LD_VAR 0 4
13102: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13103: LD_INT 0
13105: PPUSH
13106: PPUSH
13107: PPUSH
13108: PPUSH
13109: PPUSH
13110: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13111: LD_ADDR_VAR 0 8
13115: PUSH
13116: LD_VAR 0 2
13120: PPUSH
13121: CALL_OW 313
13125: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13126: LD_ADDR_VAR 0 9
13130: PUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 22
13138: PUSH
13139: LD_VAR 0 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 24
13160: PUSH
13161: LD_INT 750
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 3
13170: PUSH
13171: LD_INT 54
13173: PUSH
13174: EMPTY
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 70
13191: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13192: LD_ADDR_VAR 0 6
13196: PUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 22
13204: PUSH
13205: LD_VAR 0 1
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 21
13216: PUSH
13217: LD_INT 3
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 3
13226: PUSH
13227: LD_INT 24
13229: PUSH
13230: LD_INT 1000
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: PPUSH
13249: CALL_OW 70
13253: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13254: LD_VAR 0 6
13258: NOT
13259: PUSH
13260: LD_INT 22
13262: PUSH
13263: LD_VAR 0 1
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 25
13274: PUSH
13275: LD_INT 2
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 24
13284: PUSH
13285: LD_INT 250
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: PPUSH
13297: CALL_OW 69
13301: NOT
13302: AND
13303: IFFALSE 13307
// exit ;
13305: GO 13489
// if buildings_list > 0 and engineerOkInside then
13307: LD_VAR 0 6
13311: PUSH
13312: LD_INT 0
13314: GREATER
13315: PUSH
13316: LD_VAR 0 8
13320: AND
13321: IFFALSE 13332
// ComExitBuilding ( engineerOkInside ) ;
13323: LD_VAR 0 8
13327: PPUSH
13328: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13332: LD_VAR 0 6
13336: PUSH
13337: LD_INT 0
13339: GREATER
13340: PUSH
13341: LD_VAR 0 9
13345: PUSH
13346: LD_INT 0
13348: GREATER
13349: AND
13350: IFFALSE 13370
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13352: LD_VAR 0 9
13356: PPUSH
13357: LD_VAR 0 6
13361: PUSH
13362: LD_INT 1
13364: ARRAY
13365: PPUSH
13366: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13370: LD_VAR 0 6
13374: PUSH
13375: LD_INT 0
13377: EQUAL
13378: PUSH
13379: LD_VAR 0 4
13383: PUSH
13384: LD_INT 0
13386: EQUAL
13387: AND
13388: PUSH
13389: LD_VAR 0 9
13393: PUSH
13394: LD_INT 0
13396: GREATER
13397: AND
13398: IFFALSE 13414
// ComEnterUnit ( engineerOkOutside , building ) ;
13400: LD_VAR 0 9
13404: PPUSH
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13414: LD_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: GREATER
13422: PUSH
13423: LD_VAR 0 6
13427: PUSH
13428: LD_INT 0
13430: EQUAL
13431: AND
13432: PUSH
13433: LD_VAR 0 4
13437: PUSH
13438: LD_INT 0
13440: GREATER
13441: AND
13442: IFFALSE 13489
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13444: LD_VAR 0 9
13448: PPUSH
13449: LD_VAR 0 4
13453: PUSH
13454: LD_INT 1
13456: ARRAY
13457: PPUSH
13458: LD_VAR 0 4
13462: PUSH
13463: LD_INT 2
13465: ARRAY
13466: PPUSH
13467: LD_VAR 0 4
13471: PUSH
13472: LD_INT 3
13474: ARRAY
13475: PPUSH
13476: LD_VAR 0 4
13480: PUSH
13481: LD_INT 4
13483: ARRAY
13484: PPUSH
13485: CALL_OW 145
// end ;
13489: LD_VAR 0 5
13493: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13494: LD_INT 0
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
13500: PPUSH
13501: PPUSH
13502: PPUSH
13503: PPUSH
13504: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13505: LD_ADDR_VAR 0 6
13509: PUSH
13510: LD_INT 22
13512: PUSH
13513: LD_VAR 0 1
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 25
13524: PUSH
13525: LD_INT 4
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 24
13534: PUSH
13535: LD_INT 251
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 69
13551: PUSH
13552: LD_EXP 35
13556: PUSH
13557: EMPTY
13558: LIST
13559: DIFF
13560: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13561: LD_ADDR_VAR 0 7
13565: PUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_INT 22
13573: PUSH
13574: LD_VAR 0 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 25
13585: PUSH
13586: LD_INT 4
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 50
13595: PUSH
13596: EMPTY
13597: LIST
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: PPUSH
13604: CALL_OW 70
13608: PUSH
13609: LD_EXP 35
13613: PUSH
13614: EMPTY
13615: LIST
13616: DIFF
13617: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13618: LD_ADDR_VAR 0 10
13622: PUSH
13623: LD_VAR 0 3
13627: PPUSH
13628: LD_INT 22
13630: PUSH
13631: LD_VAR 0 1
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 21
13642: PUSH
13643: LD_INT 1
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 3
13652: PUSH
13653: LD_INT 24
13655: PUSH
13656: LD_INT 750
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: PPUSH
13672: CALL_OW 70
13676: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13677: LD_ADDR_VAR 0 11
13681: PUSH
13682: LD_VAR 0 2
13686: PPUSH
13687: LD_INT 22
13689: PUSH
13690: LD_VAR 0 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 21
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 3
13711: PUSH
13712: LD_INT 24
13714: PUSH
13715: LD_INT 1000
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: LIST
13730: PPUSH
13731: CALL_OW 70
13735: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13736: LD_VAR 0 10
13740: PUSH
13741: LD_INT 0
13743: GREATER
13744: PUSH
13745: LD_VAR 0 6
13749: PUSH
13750: LD_INT 0
13752: GREATER
13753: AND
13754: IFFALSE 13770
// ComMoveToArea ( damageUnits , healArea ) ;
13756: LD_VAR 0 10
13760: PPUSH
13761: LD_VAR 0 2
13765: PPUSH
13766: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13770: LD_VAR 0 11
13774: PUSH
13775: LD_INT 0
13777: GREATER
13778: PUSH
13779: LD_VAR 0 7
13783: PUSH
13784: LD_INT 0
13786: GREATER
13787: AND
13788: IFFALSE 13808
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13790: LD_VAR 0 7
13794: PPUSH
13795: LD_VAR 0 11
13799: PUSH
13800: LD_INT 1
13802: ARRAY
13803: PPUSH
13804: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13808: LD_VAR 0 10
13812: PUSH
13813: LD_INT 0
13815: EQUAL
13816: PUSH
13817: LD_VAR 0 11
13821: PUSH
13822: LD_INT 0
13824: EQUAL
13825: AND
13826: PUSH
13827: LD_VAR 0 7
13831: PUSH
13832: LD_INT 0
13834: GREATER
13835: AND
13836: IFFALSE 13941
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13838: LD_ADDR_VAR 0 12
13842: PUSH
13843: LD_INT 22
13845: PUSH
13846: LD_VAR 0 1
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 21
13857: PUSH
13858: LD_INT 3
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 30
13867: PUSH
13868: LD_INT 8
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13885: LD_ADDR_VAR 0 13
13889: PUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_VAR 0 12
13897: PPUSH
13898: CALL_OW 12
13902: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13903: LD_VAR 0 7
13907: PPUSH
13908: LD_INT 3
13910: PUSH
13911: LD_INT 60
13913: PUSH
13914: EMPTY
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PPUSH
13921: CALL_OW 72
13925: PPUSH
13926: LD_VAR 0 12
13930: PUSH
13931: LD_VAR 0 13
13935: ARRAY
13936: PPUSH
13937: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_INT 22
13948: PUSH
13949: LD_VAR 0 1
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 25
13960: PUSH
13961: LD_INT 3
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 24
13970: PUSH
13971: LD_INT 751
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 70
13987: PUSH
13988: LD_INT 0
13990: GREATER
13991: PUSH
13992: LD_INT 21
13994: PPUSH
13995: CALL_OW 302
13999: AND
14000: PUSH
14001: LD_INT 21
14003: PPUSH
14004: CALL_OW 255
14008: PUSH
14009: LD_INT 3
14011: EQUAL
14012: AND
14013: IFFALSE 14069
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14015: LD_VAR 0 3
14019: PPUSH
14020: LD_INT 22
14022: PUSH
14023: LD_VAR 0 1
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 3
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 24
14044: PUSH
14045: LD_INT 751
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 70
14061: PPUSH
14062: LD_INT 21
14064: PPUSH
14065: CALL_OW 120
// end ;
14069: LD_VAR 0 5
14073: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14074: LD_INT 0
14076: PPUSH
14077: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14078: LD_INT 22
14080: PUSH
14081: LD_VAR 0 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 21
14092: PUSH
14093: LD_INT 2
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 69
14108: PUSH
14109: LD_INT 18
14111: PPUSH
14112: LD_INT 22
14114: PUSH
14115: LD_VAR 0 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 21
14126: PUSH
14127: LD_INT 2
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PPUSH
14138: CALL_OW 70
14142: PUSH
14143: LD_VAR 0 3
14147: LESSEQUAL
14148: DIFF
14149: IFFALSE 14216
// for i = 1 to vehCount do
14151: LD_ADDR_VAR 0 9
14155: PUSH
14156: DOUBLE
14157: LD_INT 1
14159: DEC
14160: ST_TO_ADDR
14161: LD_VAR 0 3
14165: PUSH
14166: FOR_TO
14167: IFFALSE 14214
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14169: LD_VAR 0 2
14173: PPUSH
14174: LD_VAR 0 7
14178: PPUSH
14179: LD_VAR 0 5
14183: PPUSH
14184: LD_VAR 0 6
14188: PPUSH
14189: LD_VAR 0 4
14193: PUSH
14194: LD_INT 1
14196: PPUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 12
14206: ARRAY
14207: PPUSH
14208: CALL_OW 185
14212: GO 14166
14214: POP
14215: POP
// end ;
14216: LD_VAR 0 8
14220: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
14225: PPUSH
14226: PPUSH
14227: PPUSH
14228: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14229: LD_EXP 40
14233: PUSH
14234: LD_INT 3
14236: PUSH
14237: LD_INT 4
14239: PUSH
14240: LD_INT 4
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: PUSH
14248: LD_OWVAR 67
14252: ARRAY
14253: GREATEREQUAL
14254: PUSH
14255: LD_EXP 41
14259: PUSH
14260: LD_INT 1
14262: PUSH
14263: LD_INT 2
14265: PUSH
14266: LD_INT 2
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: PUSH
14274: LD_OWVAR 67
14278: ARRAY
14279: GREATEREQUAL
14280: AND
14281: IFFALSE 14514
// begin repeat wait ( 0 0$3 ) ;
14283: LD_INT 105
14285: PPUSH
14286: CALL_OW 67
// for j in russianTanks do
14290: LD_ADDR_VAR 0 4
14294: PUSH
14295: LD_EXP 40
14299: PUSH
14300: FOR_IN
14301: IFFALSE 14502
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14303: LD_ADDR_VAR 0 6
14307: PUSH
14308: LD_INT 81
14310: PUSH
14311: LD_VAR 0 1
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 101
14322: PUSH
14323: LD_INT 1
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PPUSH
14334: CALL_OW 69
14338: PPUSH
14339: LD_VAR 0 4
14343: PPUSH
14344: CALL_OW 74
14348: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14349: LD_ADDR_VAR 0 7
14353: PUSH
14354: LD_INT 81
14356: PUSH
14357: LD_VAR 0 1
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 101
14368: PUSH
14369: LD_INT 1
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 2
14378: PUSH
14379: LD_INT 59
14381: PUSH
14382: EMPTY
14383: LIST
14384: PUSH
14385: LD_INT 21
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 21
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: PPUSH
14419: CALL_OW 69
14423: PPUSH
14424: LD_VAR 0 4
14428: PPUSH
14429: CALL_OW 74
14433: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14434: LD_VAR 0 4
14438: PPUSH
14439: LD_VAR 0 6
14443: PPUSH
14444: CALL_OW 296
14448: PUSH
14449: LD_INT 8
14451: PLUS
14452: PUSH
14453: LD_VAR 0 4
14457: PPUSH
14458: LD_VAR 0 7
14462: PPUSH
14463: CALL_OW 296
14467: LESS
14468: IFFALSE 14486
// ComAttackUnit ( j , target1 ) else
14470: LD_VAR 0 4
14474: PPUSH
14475: LD_VAR 0 6
14479: PPUSH
14480: CALL_OW 115
14484: GO 14500
// ComAttackUnit ( j , target2 ) ;
14486: LD_VAR 0 4
14490: PPUSH
14491: LD_VAR 0 7
14495: PPUSH
14496: CALL_OW 115
// end ;
14500: GO 14300
14502: POP
14503: POP
// until russianTanks = 0 ;
14504: LD_EXP 40
14508: PUSH
14509: LD_INT 0
14511: EQUAL
14512: IFFALSE 14283
// end ; end ;
14514: LD_VAR 0 2
14518: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
14523: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14524: LD_EXP 40
14528: PUSH
14529: LD_INT 1
14531: GREATEREQUAL
14532: PUSH
14533: LD_EXP 41
14537: PUSH
14538: LD_INT 1
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: LD_OWVAR 67
14556: ARRAY
14557: GREATEREQUAL
14558: AND
14559: IFFALSE 14709
// repeat wait ( 0 0$3 ) ;
14561: LD_INT 105
14563: PPUSH
14564: CALL_OW 67
// if russianTimeLapsers > 0 then
14568: LD_EXP 41
14572: PUSH
14573: LD_INT 0
14575: GREATER
14576: IFFALSE 14699
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
14578: LD_ADDR_VAR 0 3
14582: PUSH
14583: LD_EXP 41
14587: PPUSH
14588: LD_INT 3
14590: PUSH
14591: LD_INT 60
14593: PUSH
14594: EMPTY
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 72
14605: PUSH
14606: FOR_IN
14607: IFFALSE 14697
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
14609: LD_ADDR_VAR 0 4
14613: PUSH
14614: LD_INT 81
14616: PUSH
14617: LD_VAR 0 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 101
14628: PUSH
14629: LD_INT 1
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 21
14638: PUSH
14639: LD_INT 1
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: PPUSH
14651: CALL_OW 69
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: CALL_OW 74
14665: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
14666: LD_VAR 0 3
14670: PPUSH
14671: LD_VAR 0 4
14675: PPUSH
14676: CALL_OW 250
14680: PPUSH
14681: LD_VAR 0 4
14685: PPUSH
14686: CALL_OW 251
14690: PPUSH
14691: CALL_OW 111
// end ;
14695: GO 14606
14697: POP
14698: POP
// until russianTimeLapsers = 0 ;
14699: LD_EXP 41
14703: PUSH
14704: LD_INT 0
14706: EQUAL
14707: IFFALSE 14561
// end ;
14709: LD_VAR 0 2
14713: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14714: LD_INT 0
14716: PPUSH
14717: PPUSH
14718: PPUSH
14719: PPUSH
14720: PPUSH
14721: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14722: LD_ADDR_VAR 0 6
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_VAR 0 1
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 25
14741: PUSH
14742: LD_INT 9
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 69
14757: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14758: LD_ADDR_VAR 0 7
14762: PUSH
14763: LD_INT 81
14765: PUSH
14766: LD_VAR 0 1
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 3
14777: PUSH
14778: LD_INT 21
14780: PUSH
14781: LD_INT 3
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PPUSH
14796: CALL_OW 69
14800: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14801: LD_ADDR_VAR 0 4
14805: PUSH
14806: LD_INT 1
14808: PPUSH
14809: LD_INT 3
14811: PPUSH
14812: CALL_OW 12
14816: ST_TO_ADDR
// for i = 1 to list do
14817: LD_ADDR_VAR 0 5
14821: PUSH
14822: DOUBLE
14823: LD_INT 1
14825: DEC
14826: ST_TO_ADDR
14827: LD_VAR 0 6
14831: PUSH
14832: FOR_TO
14833: IFFALSE 15035
// for ta in filter do
14835: LD_ADDR_VAR 0 3
14839: PUSH
14840: LD_VAR 0 7
14844: PUSH
14845: FOR_IN
14846: IFFALSE 15031
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14848: LD_VAR 0 6
14852: PUSH
14853: LD_VAR 0 5
14857: ARRAY
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: CALL_OW 296
14868: PUSH
14869: LD_INT 15
14871: LESSEQUAL
14872: IFFALSE 15029
// begin case c of 1 :
14874: LD_VAR 0 4
14878: PUSH
14879: LD_INT 1
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14925
14887: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14888: LD_VAR 0 6
14892: PUSH
14893: LD_VAR 0 5
14897: ARRAY
14898: PPUSH
14899: LD_VAR 0 3
14903: PPUSH
14904: CALL_OW 250
14908: PPUSH
14909: LD_VAR 0 3
14913: PPUSH
14914: CALL_OW 251
14918: PPUSH
14919: CALL_OW 154
14923: GO 15029
14925: LD_INT 2
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14933
14931: GO 14997
14933: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14934: LD_VAR 0 6
14938: PUSH
14939: LD_VAR 0 5
14943: ARRAY
14944: PPUSH
14945: LD_VAR 0 3
14949: PPUSH
14950: CALL_OW 250
14954: PUSH
14955: LD_INT 1
14957: NEG
14958: PPUSH
14959: LD_INT 1
14961: PPUSH
14962: CALL_OW 12
14966: PLUS
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: CALL_OW 251
14977: PUSH
14978: LD_INT 1
14980: NEG
14981: PPUSH
14982: LD_INT 1
14984: PPUSH
14985: CALL_OW 12
14989: PLUS
14990: PPUSH
14991: CALL_OW 153
14995: GO 15029
14997: LD_INT 3
14999: DOUBLE
15000: EQUAL
15001: IFTRUE 15005
15003: GO 15028
15005: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15006: LD_VAR 0 6
15010: PUSH
15011: LD_VAR 0 5
15015: ARRAY
15016: PPUSH
15017: LD_VAR 0 3
15021: PPUSH
15022: CALL_OW 115
15026: GO 15029
15028: POP
// end ; end ;
15029: GO 14845
15031: POP
15032: POP
15033: GO 14832
15035: POP
15036: POP
// end ;
15037: LD_VAR 0 2
15041: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15042: LD_INT 0
15044: PPUSH
15045: PPUSH
15046: PPUSH
15047: PPUSH
// r := 100 ;
15048: LD_ADDR_VAR 0 5
15052: PUSH
15053: LD_INT 100
15055: ST_TO_ADDR
// x := 0 ;
15056: LD_ADDR_VAR 0 6
15060: PUSH
15061: LD_INT 0
15063: ST_TO_ADDR
// while ( x < n ) do
15064: LD_VAR 0 6
15068: PUSH
15069: LD_VAR 0 2
15073: LESS
15074: IFFALSE 15361
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15076: LD_ADDR_VAR 0 4
15080: PUSH
15081: DOUBLE
15082: LD_INT 1
15084: DEC
15085: ST_TO_ADDR
15086: LD_VAR 0 1
15090: PPUSH
15091: LD_INT 0
15093: PPUSH
15094: CALL_OW 517
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PUSH
15103: FOR_TO
15104: IFFALSE 15357
// begin if r > 50 then
15106: LD_VAR 0 5
15110: PUSH
15111: LD_INT 50
15113: GREATER
15114: IFFALSE 15333
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15116: LD_VAR 0 1
15120: PPUSH
15121: LD_INT 0
15123: PPUSH
15124: CALL_OW 517
15128: PUSH
15129: LD_INT 1
15131: ARRAY
15132: PUSH
15133: LD_VAR 0 4
15137: ARRAY
15138: PPUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: LD_INT 0
15146: PPUSH
15147: CALL_OW 517
15151: PUSH
15152: LD_INT 2
15154: ARRAY
15155: PUSH
15156: LD_VAR 0 4
15160: ARRAY
15161: PPUSH
15162: CALL_OW 458
15166: NOT
15167: IFFALSE 15317
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15169: LD_VAR 0 1
15173: PPUSH
15174: LD_INT 0
15176: PPUSH
15177: CALL_OW 517
15181: PUSH
15182: LD_INT 1
15184: ARRAY
15185: PUSH
15186: LD_VAR 0 4
15190: ARRAY
15191: PPUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: LD_INT 0
15199: PPUSH
15200: CALL_OW 517
15204: PUSH
15205: LD_INT 2
15207: ARRAY
15208: PUSH
15209: LD_VAR 0 4
15213: ARRAY
15214: PPUSH
15215: LD_INT 5
15217: PPUSH
15218: LD_INT 0
15220: PPUSH
15221: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15225: LD_ADDR_EXP 44
15229: PUSH
15230: LD_EXP 44
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: LD_INT 0
15245: PPUSH
15246: CALL_OW 517
15250: PUSH
15251: LD_INT 1
15253: ARRAY
15254: PUSH
15255: LD_VAR 0 4
15259: ARRAY
15260: PUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 517
15273: PUSH
15274: LD_INT 2
15276: ARRAY
15277: PUSH
15278: LD_VAR 0 4
15282: ARRAY
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 2
15292: ST_TO_ADDR
// r := 0 ;
15293: LD_ADDR_VAR 0 5
15297: PUSH
15298: LD_INT 0
15300: ST_TO_ADDR
// x := x + 1 ;
15301: LD_ADDR_VAR 0 6
15305: PUSH
15306: LD_VAR 0 6
15310: PUSH
15311: LD_INT 1
15313: PLUS
15314: ST_TO_ADDR
// end else
15315: GO 15331
// r := r + 35 ;
15317: LD_ADDR_VAR 0 5
15321: PUSH
15322: LD_VAR 0 5
15326: PUSH
15327: LD_INT 35
15329: PLUS
15330: ST_TO_ADDR
// end else
15331: GO 15355
// r := r + rand ( 10 , 25 ) ;
15333: LD_ADDR_VAR 0 5
15337: PUSH
15338: LD_VAR 0 5
15342: PUSH
15343: LD_INT 10
15345: PPUSH
15346: LD_INT 25
15348: PPUSH
15349: CALL_OW 12
15353: PLUS
15354: ST_TO_ADDR
// end ;
15355: GO 15103
15357: POP
15358: POP
15359: GO 15064
// end ;
15361: LD_VAR 0 3
15365: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15366: LD_INT 0
15368: PPUSH
15369: PPUSH
15370: PPUSH
15371: PPUSH
// tmpTab = [ ] ;
15372: LD_ADDR_VAR 0 6
15376: PUSH
15377: EMPTY
15378: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15379: LD_INT 22
15381: PUSH
15382: LD_VAR 0 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: LD_INT 32
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PPUSH
15405: CALL_OW 69
15409: PUSH
15410: LD_INT 0
15412: GREATER
15413: IFFALSE 15496
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15415: LD_ADDR_VAR 0 4
15419: PUSH
15420: LD_INT 22
15422: PUSH
15423: LD_VAR 0 1
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 30
15434: PUSH
15435: LD_INT 32
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PPUSH
15446: CALL_OW 69
15450: PUSH
15451: FOR_IN
15452: IFFALSE 15494
// begin for j in UnitsInside ( i ) do
15454: LD_ADDR_VAR 0 5
15458: PUSH
15459: LD_VAR 0 4
15463: PPUSH
15464: CALL_OW 313
15468: PUSH
15469: FOR_IN
15470: IFFALSE 15490
// tmpTab = tmpTab ^ j ;
15472: LD_ADDR_VAR 0 6
15476: PUSH
15477: LD_VAR 0 6
15481: PUSH
15482: LD_VAR 0 5
15486: ADD
15487: ST_TO_ADDR
15488: GO 15469
15490: POP
15491: POP
// end ;
15492: GO 15451
15494: POP
15495: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15496: LD_VAR 0 6
15500: PPUSH
15501: LD_VAR 0 2
15505: PPUSH
15506: CALL_OW 250
15510: PPUSH
15511: LD_VAR 0 2
15515: PPUSH
15516: CALL_OW 251
15520: PPUSH
15521: CALL_OW 114
// end ;
15525: LD_VAR 0 3
15529: RET
// export function PrepareNature ; var i , un ; begin
15530: LD_INT 0
15532: PPUSH
15533: PPUSH
15534: PPUSH
// uc_side := 0 ;
15535: LD_ADDR_OWVAR 20
15539: PUSH
15540: LD_INT 0
15542: ST_TO_ADDR
// uc_nation := 0 ;
15543: LD_ADDR_OWVAR 21
15547: PUSH
15548: LD_INT 0
15550: ST_TO_ADDR
// InitHc ;
15551: CALL_OW 19
// hc_class := class_fish ;
15555: LD_ADDR_OWVAR 28
15559: PUSH
15560: LD_INT 20
15562: ST_TO_ADDR
// for i = 1 to 6 do
15563: LD_ADDR_VAR 0 2
15567: PUSH
15568: DOUBLE
15569: LD_INT 1
15571: DEC
15572: ST_TO_ADDR
15573: LD_INT 6
15575: PUSH
15576: FOR_TO
15577: IFFALSE 15596
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15579: CALL_OW 44
15583: PPUSH
15584: LD_INT 23
15586: PPUSH
15587: LD_INT 0
15589: PPUSH
15590: CALL_OW 49
15594: GO 15576
15596: POP
15597: POP
// for i = 1 to Difficulty + 2 do
15598: LD_ADDR_VAR 0 2
15602: PUSH
15603: DOUBLE
15604: LD_INT 1
15606: DEC
15607: ST_TO_ADDR
15608: LD_OWVAR 67
15612: PUSH
15613: LD_INT 2
15615: PLUS
15616: PUSH
15617: FOR_TO
15618: IFFALSE 15727
// begin hc_sex = sex_male ;
15620: LD_ADDR_OWVAR 27
15624: PUSH
15625: LD_INT 1
15627: ST_TO_ADDR
// uc_side = 0 ;
15628: LD_ADDR_OWVAR 20
15632: PUSH
15633: LD_INT 0
15635: ST_TO_ADDR
// uc_nation = nation_nature ;
15636: LD_ADDR_OWVAR 21
15640: PUSH
15641: LD_INT 0
15643: ST_TO_ADDR
// hc_class = class_tiger ;
15644: LD_ADDR_OWVAR 28
15648: PUSH
15649: LD_INT 14
15651: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15652: LD_ADDR_OWVAR 31
15656: PUSH
15657: LD_EXP 38
15661: PUSH
15662: LD_INT 0
15664: PUSH
15665: LD_INT 0
15667: PUSH
15668: LD_INT 0
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15677: LD_ADDR_OWVAR 35
15681: PUSH
15682: LD_INT 5
15684: NEG
15685: PPUSH
15686: LD_INT 5
15688: PPUSH
15689: CALL_OW 12
15693: PUSH
15694: LD_OWVAR 67
15698: MUL
15699: ST_TO_ADDR
// un = CreateHuman ;
15700: LD_ADDR_VAR 0 3
15704: PUSH
15705: CALL_OW 44
15709: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15710: LD_VAR 0 3
15714: PPUSH
15715: LD_INT 24
15717: PPUSH
15718: LD_INT 0
15720: PPUSH
15721: CALL_OW 49
// end ;
15725: GO 15617
15727: POP
15728: POP
// for i = 1 to rand ( 3 , 4 ) do
15729: LD_ADDR_VAR 0 2
15733: PUSH
15734: DOUBLE
15735: LD_INT 1
15737: DEC
15738: ST_TO_ADDR
15739: LD_INT 3
15741: PPUSH
15742: LD_INT 4
15744: PPUSH
15745: CALL_OW 12
15749: PUSH
15750: FOR_TO
15751: IFFALSE 15843
// begin hc_sex = sex_male ;
15753: LD_ADDR_OWVAR 27
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// uc_side = 0 ;
15761: LD_ADDR_OWVAR 20
15765: PUSH
15766: LD_INT 0
15768: ST_TO_ADDR
// uc_nation = nation_nature ;
15769: LD_ADDR_OWVAR 21
15773: PUSH
15774: LD_INT 0
15776: ST_TO_ADDR
// hc_class = 18 ;
15777: LD_ADDR_OWVAR 28
15781: PUSH
15782: LD_INT 18
15784: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15785: LD_ADDR_OWVAR 31
15789: PUSH
15790: LD_INT 0
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: LD_INT 0
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: ST_TO_ADDR
// hc_agressivity = 0 ;
15808: LD_ADDR_OWVAR 35
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// un = CreateHuman ;
15816: LD_ADDR_VAR 0 3
15820: PUSH
15821: CALL_OW 44
15825: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15826: LD_VAR 0 3
15830: PPUSH
15831: LD_INT 24
15833: PPUSH
15834: LD_INT 0
15836: PPUSH
15837: CALL_OW 49
// end ;
15841: GO 15750
15843: POP
15844: POP
// for i = 1 to rand ( 1 , 3 ) do
15845: LD_ADDR_VAR 0 2
15849: PUSH
15850: DOUBLE
15851: LD_INT 1
15853: DEC
15854: ST_TO_ADDR
15855: LD_INT 1
15857: PPUSH
15858: LD_INT 3
15860: PPUSH
15861: CALL_OW 12
15865: PUSH
15866: FOR_TO
15867: IFFALSE 16015
// begin hc_sex = sex_male ;
15869: LD_ADDR_OWVAR 27
15873: PUSH
15874: LD_INT 1
15876: ST_TO_ADDR
// uc_side = 0 ;
15877: LD_ADDR_OWVAR 20
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// uc_nation = nation_nature ;
15885: LD_ADDR_OWVAR 21
15889: PUSH
15890: LD_INT 0
15892: ST_TO_ADDR
// hc_class = class_apeman ;
15893: LD_ADDR_OWVAR 28
15897: PUSH
15898: LD_INT 12
15900: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15901: LD_ADDR_OWVAR 31
15905: PUSH
15906: LD_EXP 37
15910: PPUSH
15911: LD_EXP 38
15915: PPUSH
15916: CALL_OW 12
15920: PUSH
15921: LD_EXP 37
15925: PPUSH
15926: LD_EXP 38
15930: PPUSH
15931: CALL_OW 12
15935: PUSH
15936: LD_EXP 37
15940: PPUSH
15941: LD_EXP 38
15945: PPUSH
15946: CALL_OW 12
15950: PUSH
15951: LD_EXP 37
15955: PPUSH
15956: LD_EXP 38
15960: PPUSH
15961: CALL_OW 12
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15972: LD_ADDR_OWVAR 35
15976: PUSH
15977: LD_INT 1
15979: PPUSH
15980: LD_INT 20
15982: PPUSH
15983: CALL_OW 12
15987: ST_TO_ADDR
// un = CreateHuman ;
15988: LD_ADDR_VAR 0 3
15992: PUSH
15993: CALL_OW 44
15997: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15998: LD_VAR 0 3
16002: PPUSH
16003: LD_INT 24
16005: PPUSH
16006: LD_INT 0
16008: PPUSH
16009: CALL_OW 49
// end ;
16013: GO 15866
16015: POP
16016: POP
// end ; end_of_file
16017: LD_VAR 0 1
16021: RET
// on UnitDestroyed ( unit ) do var i ;
16022: LD_INT 0
16024: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 255
16034: PUSH
16035: LD_INT 3
16037: EQUAL
16038: PUSH
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 247
16048: PUSH
16049: LD_INT 1
16051: EQUAL
16052: AND
16053: IFFALSE 16117
// begin for i in RuScientists do
16055: LD_ADDR_VAR 0 2
16059: PUSH
16060: LD_EXP 35
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16115
// if i = unit then
16068: LD_VAR 0 2
16072: PUSH
16073: LD_VAR 0 1
16077: EQUAL
16078: IFFALSE 16113
// begin RuScientists = RuScientists diff [ unit ] ;
16080: LD_ADDR_EXP 35
16084: PUSH
16085: LD_EXP 35
16089: PUSH
16090: LD_VAR 0 1
16094: PUSH
16095: EMPTY
16096: LIST
16097: DIFF
16098: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16099: LD_ADDR_EXP 36
16103: PUSH
16104: LD_EXP 36
16108: PUSH
16109: LD_INT 1
16111: PLUS
16112: ST_TO_ADDR
// end ;
16113: GO 16065
16115: POP
16116: POP
// end ; end ;
16117: PPOPN 2
16119: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16120: LD_VAR 0 1
16124: PUSH
16125: LD_INT 10
16127: EQUAL
16128: PUSH
16129: LD_VAR 0 2
16133: PPUSH
16134: CALL_OW 255
16138: PUSH
16139: LD_INT 1
16141: EQUAL
16142: AND
16143: PUSH
16144: LD_EXP 47
16148: PUSH
16149: LD_INT 0
16151: EQUAL
16152: AND
16153: IFFALSE 16265
// begin eventVar1 = 1 ;
16155: LD_ADDR_EXP 47
16159: PUSH
16160: LD_INT 1
16162: ST_TO_ADDR
// teleportExplored = 1 ;
16163: LD_ADDR_EXP 34
16167: PUSH
16168: LD_INT 1
16170: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16171: LD_STRING M2a
16173: PPUSH
16174: CALL_OW 337
// wait ( 0 0$2 ) ;
16178: LD_INT 70
16180: PPUSH
16181: CALL_OW 67
// DialogueOn ;
16185: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16189: LD_INT 22
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 21
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PPUSH
16213: CALL_OW 69
16217: PPUSH
16218: LD_STRING DT3a-Sol1-1
16220: PPUSH
16221: LD_STRING DT3a-FSol1-1
16223: PPUSH
16224: CALL 12223 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16228: LD_EXP 1
16232: PPUSH
16233: LD_STRING DT3a-JMM-1
16235: PPUSH
16236: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16249: LD_EXP 1
16253: PPUSH
16254: LD_STRING DT3a-JMM-1a
16256: PPUSH
16257: CALL_OW 88
// DialogueOff ;
16261: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16265: LD_VAR 0 1
16269: PUSH
16270: LD_INT 10
16272: EQUAL
16273: PUSH
16274: LD_VAR 0 2
16278: PPUSH
16279: CALL_OW 247
16283: PUSH
16284: LD_INT 2
16286: EQUAL
16287: AND
16288: PUSH
16289: LD_VAR 0 2
16293: PPUSH
16294: CALL_OW 255
16298: PUSH
16299: LD_INT 3
16301: EQUAL
16302: AND
16303: PUSH
16304: LD_EXP 29
16308: PUSH
16309: LD_INT 0
16311: EQUAL
16312: AND
16313: IFFALSE 16330
// begin wait ( 0 0$3 ) ;
16315: LD_INT 105
16317: PPUSH
16318: CALL_OW 67
// vehicleTeleported = 1 ;
16322: LD_ADDR_EXP 29
16326: PUSH
16327: LD_INT 1
16329: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16330: LD_VAR 0 1
16334: PUSH
16335: LD_INT 10
16337: EQUAL
16338: PUSH
16339: LD_VAR 0 2
16343: PPUSH
16344: CALL_OW 247
16348: PUSH
16349: LD_INT 2
16351: EQUAL
16352: AND
16353: PUSH
16354: LD_VAR 0 2
16358: PPUSH
16359: CALL_OW 255
16363: PUSH
16364: LD_INT 3
16366: EQUAL
16367: AND
16368: PUSH
16369: LD_EXP 29
16373: PUSH
16374: LD_INT 2
16376: EQUAL
16377: AND
16378: IFFALSE 16395
// begin wait ( 0 0$3 ) ;
16380: LD_INT 105
16382: PPUSH
16383: CALL_OW 67
// vehicleTeleported = 3 ;
16387: LD_ADDR_EXP 29
16391: PUSH
16392: LD_INT 3
16394: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16395: LD_VAR 0 1
16399: PUSH
16400: LD_INT 10
16402: EQUAL
16403: PUSH
16404: LD_VAR 0 2
16408: PPUSH
16409: CALL_OW 247
16413: PUSH
16414: LD_INT 2
16416: EQUAL
16417: AND
16418: PUSH
16419: LD_VAR 0 2
16423: PPUSH
16424: CALL_OW 255
16428: PUSH
16429: LD_INT 3
16431: EQUAL
16432: AND
16433: IFFALSE 16449
// tpCounter = tpCounter + 1 ;
16435: LD_ADDR_EXP 30
16439: PUSH
16440: LD_EXP 30
16444: PUSH
16445: LD_INT 1
16447: PLUS
16448: ST_TO_ADDR
// end ;
16449: PPOPN 2
16451: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16452: LD_VAR 0 2
16456: PUSH
16457: LD_INT 21
16459: EQUAL
16460: PUSH
16461: LD_VAR 0 2
16465: PUSH
16466: LD_INT 112
16468: EQUAL
16469: OR
16470: IFFALSE 16648
// if GetSide ( vehicle ) = 3 then
16472: LD_VAR 0 1
16476: PPUSH
16477: CALL_OW 255
16481: PUSH
16482: LD_INT 3
16484: EQUAL
16485: IFFALSE 16648
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16487: LD_VAR 0 1
16491: PPUSH
16492: CALL_OW 264
16496: PUSH
16497: LD_INT 46
16499: EQUAL
16500: PUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 264
16510: PUSH
16511: LD_INT 45
16513: EQUAL
16514: OR
16515: PUSH
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 264
16525: PUSH
16526: LD_INT 44
16528: EQUAL
16529: OR
16530: IFFALSE 16605
// begin russianTanks = russianTanks ^ vehicle ;
16532: LD_ADDR_EXP 40
16536: PUSH
16537: LD_EXP 40
16541: PUSH
16542: LD_VAR 0 1
16546: ADD
16547: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
16548: LD_EXP 43
16552: PUSH
16553: LD_INT 1
16555: EQUAL
16556: PUSH
16557: LD_EXP 43
16561: PUSH
16562: LD_INT 0
16564: EQUAL
16565: OR
16566: IFFALSE 16580
// ComEnterUnit ( vehicle , ruteleprt ) ;
16568: LD_VAR 0 1
16572: PPUSH
16573: LD_INT 10
16575: PPUSH
16576: CALL_OW 120
// if attackTactic = 2 then
16580: LD_EXP 43
16584: PUSH
16585: LD_INT 2
16587: EQUAL
16588: IFFALSE 16605
// ComMoveXY ( vehicle , 88 , 69 ) ;
16590: LD_VAR 0 1
16594: PPUSH
16595: LD_INT 88
16597: PPUSH
16598: LD_INT 69
16600: PPUSH
16601: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 264
16614: PUSH
16615: LD_INT 49
16617: EQUAL
16618: IFFALSE 16648
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16620: LD_ADDR_EXP 41
16624: PUSH
16625: LD_EXP 41
16629: PUSH
16630: LD_VAR 0 1
16634: ADD
16635: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16636: LD_VAR 0 1
16640: PPUSH
16641: LD_INT 137
16643: PPUSH
16644: CALL_OW 120
// end ; end ; end ;
16648: PPOPN 2
16650: END
// on UnitGoesToRed ( unit ) do var i ;
16651: LD_INT 0
16653: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16654: LD_VAR 0 1
16658: PPUSH
16659: CALL_OW 255
16663: PUSH
16664: LD_INT 3
16666: EQUAL
16667: PUSH
16668: LD_VAR 0 1
16672: PPUSH
16673: CALL_OW 247
16677: PUSH
16678: LD_INT 2
16680: EQUAL
16681: AND
16682: IFFALSE 16800
// begin if russianTanks > 0 then
16684: LD_EXP 40
16688: PUSH
16689: LD_INT 0
16691: GREATER
16692: IFFALSE 16742
// for i in russianTanks do
16694: LD_ADDR_VAR 0 2
16698: PUSH
16699: LD_EXP 40
16703: PUSH
16704: FOR_IN
16705: IFFALSE 16740
// if i = unit then
16707: LD_VAR 0 2
16711: PUSH
16712: LD_VAR 0 1
16716: EQUAL
16717: IFFALSE 16738
// russianTanks = russianTanks diff [ unit ] ;
16719: LD_ADDR_EXP 40
16723: PUSH
16724: LD_EXP 40
16728: PUSH
16729: LD_VAR 0 1
16733: PUSH
16734: EMPTY
16735: LIST
16736: DIFF
16737: ST_TO_ADDR
16738: GO 16704
16740: POP
16741: POP
// if russianTimeLapsers > 0 then
16742: LD_EXP 41
16746: PUSH
16747: LD_INT 0
16749: GREATER
16750: IFFALSE 16800
// for i in russianTimeLapsers do
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_EXP 41
16761: PUSH
16762: FOR_IN
16763: IFFALSE 16798
// if i = unit then
16765: LD_VAR 0 2
16769: PUSH
16770: LD_VAR 0 1
16774: EQUAL
16775: IFFALSE 16796
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
16777: LD_ADDR_EXP 41
16781: PUSH
16782: LD_EXP 41
16786: PUSH
16787: LD_VAR 0 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: DIFF
16795: ST_TO_ADDR
16796: GO 16762
16798: POP
16799: POP
// end ; end ;
16800: PPOPN 2
16802: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16803: LD_VAR 0 2
16807: PPUSH
16808: CALL_OW 255
16812: PUSH
16813: LD_INT 3
16815: EQUAL
16816: PUSH
16817: LD_VAR 0 2
16821: PPUSH
16822: CALL_OW 257
16826: PUSH
16827: LD_INT 3
16829: EQUAL
16830: AND
16831: PUSH
16832: LD_INT 21
16834: PPUSH
16835: CALL_OW 255
16839: PUSH
16840: LD_INT 3
16842: EQUAL
16843: AND
16844: PUSH
16845: LD_INT 21
16847: PPUSH
16848: CALL_OW 302
16852: AND
16853: IFFALSE 16867
// ComEnterUnit ( human , ru_fact ) ;
16855: LD_VAR 0 2
16859: PPUSH
16860: LD_INT 21
16862: PPUSH
16863: CALL_OW 120
// end ;
16867: PPOPN 2
16869: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16870: LD_INT 0
16872: PPUSH
16873: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16874: LD_VAR 0 2
16878: PPUSH
16879: CALL_OW 255
16883: PUSH
16884: LD_INT 3
16886: EQUAL
16887: PUSH
16888: LD_VAR 0 2
16892: PPUSH
16893: CALL_OW 257
16897: PUSH
16898: LD_INT 4
16900: EQUAL
16901: AND
16902: IFFALSE 17044
// for i in RuScientists do
16904: LD_ADDR_VAR 0 3
16908: PUSH
16909: LD_EXP 35
16913: PUSH
16914: FOR_IN
16915: IFFALSE 17042
// if i = human then
16917: LD_VAR 0 3
16921: PUSH
16922: LD_VAR 0 2
16926: EQUAL
16927: IFFALSE 17040
// if IsOk ( rutp ) then
16929: LD_INT 137
16931: PPUSH
16932: CALL_OW 302
16936: IFFALSE 17009
// begin rnd = rand ( 1 , 2 ) ;
16938: LD_ADDR_VAR 0 4
16942: PUSH
16943: LD_INT 1
16945: PPUSH
16946: LD_INT 2
16948: PPUSH
16949: CALL_OW 12
16953: ST_TO_ADDR
// if rnd = 1 then
16954: LD_VAR 0 4
16958: PUSH
16959: LD_INT 1
16961: EQUAL
16962: IFFALSE 16976
// ComEnterUnit ( vehicle , rutp ) ;
16964: LD_VAR 0 1
16968: PPUSH
16969: LD_INT 137
16971: PPUSH
16972: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 13
16983: PUSH
16984: LD_INT 14
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 1
16993: PPUSH
16994: LD_INT 2
16996: PPUSH
16997: CALL_OW 12
17001: ARRAY
17002: PPUSH
17003: CALL_OW 173
// end else
17007: GO 17040
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) end ;
17009: LD_VAR 0 1
17013: PPUSH
17014: LD_INT 13
17016: PUSH
17017: LD_INT 14
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 1
17026: PPUSH
17027: LD_INT 2
17029: PPUSH
17030: CALL_OW 12
17034: ARRAY
17035: PPUSH
17036: CALL_OW 113
17040: GO 16914
17042: POP
17043: POP
// end ; end_of_file
17044: PPOPN 4
17046: END
// every 0 0$1 trigger ruAI = 1 do
17047: LD_EXP 42
17051: PUSH
17052: LD_INT 1
17054: EQUAL
17055: IFFALSE 17154
17057: GO 17059
17059: DISABLE
// begin enable ;
17060: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17061: LD_INT 3
17063: PPUSH
17064: LD_INT 6
17066: PPUSH
17067: LD_INT 9
17069: PPUSH
17070: LD_EXP 39
17074: PPUSH
17075: CALL 13103 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17079: LD_INT 3
17081: PPUSH
17082: LD_INT 4
17084: PPUSH
17085: LD_INT 10
17087: PPUSH
17088: LD_EXP 39
17092: PPUSH
17093: CALL 13103 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17097: LD_INT 3
17099: PPUSH
17100: LD_INT 16
17102: PPUSH
17103: LD_INT 9
17105: PPUSH
17106: LD_INT 91
17108: PPUSH
17109: CALL 13494 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17113: LD_INT 3
17115: PPUSH
17116: LD_INT 17
17118: PPUSH
17119: LD_INT 10
17121: PPUSH
17122: LD_INT 47
17124: PUSH
17125: LD_INT 129
17127: PUSH
17128: LD_INT 135
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL 13494 0 4
// AttackVehicles ( 3 ) ;
17140: LD_INT 3
17142: PPUSH
17143: CALL 14221 0 1
// IntBazooka ( 3 ) ;
17147: LD_INT 3
17149: PPUSH
17150: CALL 14714 0 1
// end ;
17154: END
// every 0 0$1 do
17155: GO 17157
17157: DISABLE
// begin enable ;
17158: ENABLE
// TimeLapsersAI ( 3 ) ;
17159: LD_INT 3
17161: PPUSH
17162: CALL 14519 0 1
// end ;
17166: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17167: LD_INT 4
17169: PPUSH
17170: CALL_OW 303
17174: IFFALSE 17189
17176: GO 17178
17178: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17179: LD_INT 3
17181: PPUSH
17182: LD_INT 4
17184: PPUSH
17185: CALL 15366 0 2
17189: END
// every 0 0$1 do
17190: GO 17192
17192: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17193: LD_INT 3
17195: PPUSH
17196: LD_INT 91
17198: PPUSH
17199: LD_INT 3
17201: PPUSH
17202: CALL 13018 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17206: LD_INT 3
17208: PPUSH
17209: LD_INT 47
17211: PPUSH
17212: LD_INT 3
17214: PPUSH
17215: CALL 13018 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17219: LD_INT 3
17221: PPUSH
17222: LD_INT 129
17224: PPUSH
17225: LD_INT 3
17227: PPUSH
17228: CALL 13018 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17232: LD_INT 3
17234: PPUSH
17235: LD_INT 3
17237: PPUSH
17238: LD_INT 3
17240: PPUSH
17241: CALL 13018 0 3
// end ;
17245: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17246: LD_EXP 28
17250: PUSH
17251: LD_INT 2
17253: EQUAL
17254: PUSH
17255: LD_INT 22
17257: PUSH
17258: LD_INT 3
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 21
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 50
17277: PUSH
17278: EMPTY
17279: LIST
17280: PUSH
17281: LD_INT 3
17283: PUSH
17284: LD_INT 58
17286: PUSH
17287: EMPTY
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: PUSH
17305: LD_INT 18
17307: PPUSH
17308: LD_INT 22
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 21
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PPUSH
17332: CALL_OW 70
17336: PUSH
17337: LD_INT 0
17339: EQUAL
17340: DIFF
17341: AND
17342: IFFALSE 17460
17344: GO 17346
17346: DISABLE
// begin enable ;
17347: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17348: LD_INT 3
17350: PPUSH
17351: LD_INT 21
17353: PPUSH
17354: LD_INT 3
17356: PUSH
17357: LD_INT 4
17359: PUSH
17360: LD_INT 4
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: LD_OWVAR 67
17372: ARRAY
17373: PPUSH
17374: LD_INT 46
17376: PUSH
17377: LD_INT 45
17379: PUSH
17380: LD_INT 44
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: PPUSH
17388: LD_INT 3
17390: PPUSH
17391: LD_INT 3
17393: PPUSH
17394: LD_INT 24
17396: PPUSH
17397: CALL 14074 0 7
// if russianTimeLapsers = 0 then
17401: LD_EXP 41
17405: PUSH
17406: LD_INT 0
17408: EQUAL
17409: IFFALSE 17460
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17411: LD_INT 3
17413: PPUSH
17414: LD_INT 112
17416: PPUSH
17417: LD_INT 1
17419: PUSH
17420: LD_INT 2
17422: PUSH
17423: LD_INT 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: LD_OWVAR 67
17435: ARRAY
17436: PPUSH
17437: LD_INT 49
17439: PUSH
17440: LD_INT 49
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PPUSH
17447: LD_INT 3
17449: PPUSH
17450: LD_INT 3
17452: PPUSH
17453: LD_INT 24
17455: PPUSH
17456: CALL 14074 0 7
// end ;
17460: END
// every 0 0$1 trigger arabianMines do var i ;
17461: LD_EXP 44
17465: IFFALSE 17586
17467: GO 17469
17469: DISABLE
17470: LD_INT 0
17472: PPUSH
// begin enable ;
17473: ENABLE
// for i in arabianMines do
17474: LD_ADDR_VAR 0 1
17478: PUSH
17479: LD_EXP 44
17483: PUSH
17484: FOR_IN
17485: IFFALSE 17584
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17487: LD_INT 22
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 92
17499: PUSH
17500: LD_VAR 0 1
17504: PUSH
17505: LD_INT 1
17507: ARRAY
17508: PUSH
17509: LD_VAR 0 1
17513: PUSH
17514: LD_INT 2
17516: ARRAY
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PPUSH
17531: CALL_OW 69
17535: IFFALSE 17582
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17537: LD_VAR 0 1
17541: PUSH
17542: LD_INT 1
17544: ARRAY
17545: PPUSH
17546: LD_VAR 0 1
17550: PUSH
17551: LD_INT 2
17553: ARRAY
17554: PPUSH
17555: LD_INT 5
17557: PPUSH
17558: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17562: LD_ADDR_EXP 44
17566: PUSH
17567: LD_EXP 44
17571: PPUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 3
17581: ST_TO_ADDR
// end ; end ;
17582: GO 17484
17584: POP
17585: POP
// end ;
17586: PPOPN 1
17588: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
17589: LD_EXP 29
17593: PUSH
17594: LD_INT 4
17596: EQUAL
17597: PUSH
17598: LD_EXP 30
17602: PUSH
17603: LD_INT 6
17605: PUSH
17606: LD_INT 8
17608: PUSH
17609: LD_INT 8
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: PUSH
17617: LD_OWVAR 67
17621: ARRAY
17622: EQUAL
17623: AND
17624: IFFALSE 17642
17626: GO 17628
17628: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
17629: LD_INT 10
17631: PPUSH
17632: LD_INT 47
17634: PPUSH
17635: LD_INT 82
17637: PPUSH
17638: CALL_OW 243
17642: END
// every 2 2$0 trigger vehicleTeleported = 4 do
17643: LD_EXP 29
17647: PUSH
17648: LD_INT 4
17650: EQUAL
17651: IFFALSE 17673
17653: GO 17655
17655: DISABLE
// begin enable ;
17656: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
17657: LD_ADDR_EXP 43
17661: PUSH
17662: LD_INT 1
17664: PPUSH
17665: LD_INT 2
17667: PPUSH
17668: CALL_OW 12
17672: ST_TO_ADDR
// end ; end_of_file
17673: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
17674: LD_EXP 35
17678: PUSH
17679: EMPTY
17680: EQUAL
17681: PUSH
17682: LD_INT 3
17684: PPUSH
17685: CALL_OW 301
17689: AND
17690: IFFALSE 17895
17692: GO 17694
17694: DISABLE
// begin if sciCounter = 0 then
17695: LD_EXP 36
17699: PUSH
17700: LD_INT 0
17702: EQUAL
17703: IFFALSE 17729
// begin Say ( JMM , D7a-JMM-1 ) ;
17705: LD_EXP 1
17709: PPUSH
17710: LD_STRING D7a-JMM-1
17712: PPUSH
17713: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17717: LD_EXP 22
17721: PPUSH
17722: LD_STRING D7a-Pow-1
17724: PPUSH
17725: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
17729: LD_EXP 36
17733: PUSH
17734: LD_INT 0
17736: GREATER
17737: PUSH
17738: LD_EXP 36
17742: PUSH
17743: LD_INT 6
17745: LESS
17746: AND
17747: IFFALSE 17773
// begin Say ( JMM , D7b-JMM-1 ) ;
17749: LD_EXP 1
17753: PPUSH
17754: LD_STRING D7b-JMM-1
17756: PPUSH
17757: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17761: LD_EXP 22
17765: PPUSH
17766: LD_STRING D7b-Pow-1
17768: PPUSH
17769: CALL_OW 94
// end ; if sciCounter = 6 then
17773: LD_EXP 36
17777: PUSH
17778: LD_INT 6
17780: EQUAL
17781: IFFALSE 17891
// begin Say ( JMM , D7c-JMM-1 ) ;
17783: LD_EXP 1
17787: PPUSH
17788: LD_STRING D7c-JMM-1
17790: PPUSH
17791: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17795: LD_EXP 22
17799: PPUSH
17800: LD_STRING D7c-Pow-1
17802: PPUSH
17803: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17807: LD_EXP 1
17811: PPUSH
17812: LD_STRING D7d-JMM-1
17814: PPUSH
17815: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17819: LD_EXP 22
17823: PPUSH
17824: LD_STRING D7d-Pow-1
17826: PPUSH
17827: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17831: LD_EXP 1
17835: PPUSH
17836: LD_STRING D7d-JMM-2
17838: PPUSH
17839: CALL_OW 88
// if askSiberite = 1 then
17843: LD_EXP 33
17847: PUSH
17848: LD_INT 1
17850: EQUAL
17851: IFFALSE 17867
// begin Say ( JMM , D7d-JMM-2a ) ;
17853: LD_EXP 1
17857: PPUSH
17858: LD_STRING D7d-JMM-2a
17860: PPUSH
17861: CALL_OW 88
// end else
17865: GO 17879
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
17867: LD_EXP 22
17871: PPUSH
17872: LD_STRING D7d-Pow-2
17874: PPUSH
17875: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
17879: LD_EXP 22
17883: PPUSH
17884: LD_STRING D7d-Pow-2a
17886: PPUSH
17887: CALL_OW 94
// end ; FinishMission ;
17891: CALL 17896 0 0
// end ;
17895: END
// export function FinishMission ; begin
17896: LD_INT 0
17898: PPUSH
// if teleportExplored = 1 then
17899: LD_EXP 34
17903: PUSH
17904: LD_INT 1
17906: EQUAL
17907: IFFALSE 17921
// AddMedal ( Teleport , 1 ) else
17909: LD_STRING Teleport
17911: PPUSH
17912: LD_INT 1
17914: PPUSH
17915: CALL_OW 101
17919: GO 17932
// AddMedal ( Teleport , - 1 ) ;
17921: LD_STRING Teleport
17923: PPUSH
17924: LD_INT 1
17926: NEG
17927: PPUSH
17928: CALL_OW 101
// if sciCounter > 2 then
17932: LD_EXP 36
17936: PUSH
17937: LD_INT 2
17939: GREATER
17940: IFFALSE 17954
// AddMedal ( Materials , 1 ) else
17942: LD_STRING Materials
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL_OW 101
17952: GO 17965
// AddMedal ( Materials , - 1 ) ;
17954: LD_STRING Materials
17956: PPUSH
17957: LD_INT 1
17959: NEG
17960: PPUSH
17961: CALL_OW 101
// if sciCounter = 6 then
17965: LD_EXP 36
17969: PUSH
17970: LD_INT 6
17972: EQUAL
17973: IFFALSE 17997
// begin AddMedal ( Scientists , 1 ) ;
17975: LD_STRING Scientists
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17985: LD_INT 1
17987: PPUSH
17988: LD_STRING 12_SciDed_1
17990: PPUSH
17991: CALL_OW 39
// end else
17995: GO 18018
// begin AddMedal ( Scientists , - 1 ) ;
17997: LD_STRING Scientists
17999: PPUSH
18000: LD_INT 1
18002: NEG
18003: PPUSH
18004: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18008: LD_INT 0
18010: PPUSH
18011: LD_STRING 12_SciDed_1
18013: PPUSH
18014: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18018: LD_EXP 32
18022: PPUSH
18023: LD_STRING 12_MainDepositFake_1
18025: PPUSH
18026: CALL_OW 39
// GiveMedals ( MAIN ) ;
18030: LD_STRING MAIN
18032: PPUSH
18033: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18037: LD_INT 22
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 21
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: LD_INT 25
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 25
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 25
18082: PUSH
18083: LD_INT 3
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 25
18092: PUSH
18093: LD_INT 4
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 25
18102: PUSH
18103: LD_INT 5
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 25
18112: PUSH
18113: LD_INT 8
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: PPUSH
18139: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18143: LD_EXP 1
18147: PPUSH
18148: LD_EXP 46
18152: PUSH
18153: LD_STRING JMM
18155: STR
18156: PPUSH
18157: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18161: LD_EXP 7
18165: PPUSH
18166: LD_EXP 46
18170: PUSH
18171: LD_STRING Brown
18173: STR
18174: PPUSH
18175: CALL 12172 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18179: LD_EXP 3
18183: PPUSH
18184: LD_EXP 46
18188: PUSH
18189: LD_STRING Donaldson
18191: STR
18192: PPUSH
18193: CALL 12172 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18197: LD_EXP 4
18201: PPUSH
18202: LD_EXP 46
18206: PUSH
18207: LD_STRING Bobby
18209: STR
18210: PPUSH
18211: CALL 12172 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18215: LD_EXP 5
18219: PPUSH
18220: LD_EXP 46
18224: PUSH
18225: LD_STRING Cyrus
18227: STR
18228: PPUSH
18229: CALL 12172 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18233: LD_EXP 2
18237: PPUSH
18238: LD_EXP 46
18242: PUSH
18243: LD_STRING Lisa
18245: STR
18246: PPUSH
18247: CALL 12172 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18251: LD_EXP 12
18255: PPUSH
18256: LD_EXP 46
18260: PUSH
18261: LD_STRING Frank
18263: STR
18264: PPUSH
18265: CALL 12172 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18269: LD_EXP 13
18273: PPUSH
18274: LD_EXP 46
18278: PUSH
18279: LD_STRING Kikuchi
18281: STR
18282: PPUSH
18283: CALL 12172 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18287: LD_EXP 9
18291: PPUSH
18292: LD_EXP 46
18296: PUSH
18297: LD_STRING Houten
18299: STR
18300: PPUSH
18301: CALL 12172 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18305: LD_EXP 11
18309: PPUSH
18310: LD_EXP 46
18314: PUSH
18315: LD_STRING Gary
18317: STR
18318: PPUSH
18319: CALL 12172 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18323: LD_EXP 10
18327: PPUSH
18328: LD_EXP 46
18332: PUSH
18333: LD_STRING Cornell
18335: STR
18336: PPUSH
18337: CALL 12172 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18341: LD_EXP 6
18345: PPUSH
18346: LD_EXP 46
18350: PUSH
18351: LD_STRING Denis
18353: STR
18354: PPUSH
18355: CALL 12172 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18359: LD_EXP 8
18363: PPUSH
18364: LD_EXP 46
18368: PUSH
18369: LD_STRING Gladstone
18371: STR
18372: PPUSH
18373: CALL 12172 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18377: LD_INT 50
18379: PUSH
18380: EMPTY
18381: LIST
18382: PUSH
18383: LD_INT 22
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 23
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 21
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 2
18415: PUSH
18416: LD_INT 25
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 25
18428: PUSH
18429: LD_INT 2
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 25
18438: PUSH
18439: LD_INT 3
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 25
18448: PUSH
18449: LD_INT 4
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 25
18458: PUSH
18459: LD_INT 5
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 25
18468: PUSH
18469: LD_INT 8
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: PPUSH
18492: CALL_OW 69
18496: PUSH
18497: LD_EXP 1
18501: PUSH
18502: LD_EXP 7
18506: PUSH
18507: LD_EXP 3
18511: PUSH
18512: LD_EXP 4
18516: PUSH
18517: LD_EXP 5
18521: PUSH
18522: LD_EXP 2
18526: PUSH
18527: LD_EXP 12
18531: PUSH
18532: LD_EXP 8
18536: PUSH
18537: LD_EXP 13
18541: PUSH
18542: LD_EXP 6
18546: PUSH
18547: LD_EXP 9
18551: PUSH
18552: LD_EXP 11
18556: PUSH
18557: LD_EXP 10
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: DIFF
18577: PPUSH
18578: LD_STRING 12_other_survivors
18580: PPUSH
18581: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18585: LD_INT 50
18587: PUSH
18588: EMPTY
18589: LIST
18590: PUSH
18591: LD_INT 22
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 23
18603: PUSH
18604: LD_INT 2
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 21
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 2
18623: PUSH
18624: LD_INT 25
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 25
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 25
18646: PUSH
18647: LD_INT 3
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 25
18656: PUSH
18657: LD_INT 4
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 25
18666: PUSH
18667: LD_INT 5
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 25
18676: PUSH
18677: LD_INT 8
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: PPUSH
18700: CALL_OW 69
18704: PPUSH
18705: LD_STRING 12_kurt_squad
18707: PPUSH
18708: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
18712: LD_STRING 11_others
18714: PPUSH
18715: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
18719: LD_EXP 14
18723: PPUSH
18724: LD_STRING 11_others
18726: PPUSH
18727: CALL_OW 38
// YouWin ;
18731: CALL_OW 103
// end ; end_of_file
18735: LD_VAR 0 1
18739: RET
// every 0 0$1 trigger IsDead ( JMM ) do
18740: LD_EXP 1
18744: PPUSH
18745: CALL_OW 301
18749: IFFALSE 18761
18751: GO 18753
18753: DISABLE
// YouLost ( JMM ) ; end_of_file
18754: LD_STRING JMM
18756: PPUSH
18757: CALL_OW 104
18761: END
// every 0 0$01 do
18762: GO 18764
18764: DISABLE
// begin repeat wait ( 0 0$30 ) ;
18765: LD_INT 1050
18767: PPUSH
18768: CALL_OW 67
// if cratesSpawned < 6 then
18772: LD_EXP 45
18776: PUSH
18777: LD_INT 6
18779: LESS
18780: IFFALSE 18817
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18782: LD_INT 3
18784: PPUSH
18785: LD_INT 5
18787: PPUSH
18788: CALL_OW 12
18792: PPUSH
18793: LD_INT 21
18795: PPUSH
18796: LD_INT 1
18798: PPUSH
18799: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18803: LD_ADDR_EXP 45
18807: PUSH
18808: LD_EXP 45
18812: PUSH
18813: LD_INT 1
18815: PLUS
18816: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
18817: LD_EXP 45
18821: PUSH
18822: LD_INT 6
18824: GREATEREQUAL
18825: PUSH
18826: LD_EXP 45
18830: PUSH
18831: LD_INT 12
18833: LESS
18834: AND
18835: IFFALSE 18879
// begin wait ( 0 0$30 ) ;
18837: LD_INT 1050
18839: PPUSH
18840: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18844: LD_INT 3
18846: PPUSH
18847: LD_INT 5
18849: PPUSH
18850: CALL_OW 12
18854: PPUSH
18855: LD_INT 21
18857: PPUSH
18858: LD_INT 1
18860: PPUSH
18861: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18865: LD_ADDR_EXP 45
18869: PUSH
18870: LD_EXP 45
18874: PUSH
18875: LD_INT 1
18877: PLUS
18878: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
18879: LD_EXP 45
18883: PUSH
18884: LD_INT 12
18886: GREATEREQUAL
18887: IFFALSE 18931
// begin wait ( 1 1$30 ) ;
18889: LD_INT 3150
18891: PPUSH
18892: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18896: LD_INT 3
18898: PPUSH
18899: LD_INT 5
18901: PPUSH
18902: CALL_OW 12
18906: PPUSH
18907: LD_INT 21
18909: PPUSH
18910: LD_INT 1
18912: PPUSH
18913: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18917: LD_ADDR_EXP 45
18921: PUSH
18922: LD_EXP 45
18926: PUSH
18927: LD_INT 1
18929: PLUS
18930: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
18931: LD_EXP 45
18935: PUSH
18936: LD_INT 15
18938: GREATEREQUAL
18939: IFFALSE 18765
// end ;
18941: END
