// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17164 0 0
// PrepareDifficulty ;
 195: CALL 13544 0 0
// PrepareVehicles ;
 199: CALL 1558 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1132 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2934 0 0
// PrepareWestBase ;
 227: CALL 3446 0 0
// PrepareEastBase ;
 231: CALL 3006 0 0
// PrepareOtherRussians ;
 235: CALL 3558 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11c_others
 575: PPUSH
 576: CALL_OW 31
 580: PUSH
 581: LD_STRING 11_others
 583: PPUSH
 584: CALL_OW 31
 588: UNION
 589: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_STRING 11_JMM
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL 13194 0 2
 605: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 606: LD_EXP 1
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 2
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 58
 645: PUSH
 646: EMPTY
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: PPUSH
 654: CALL_OW 69
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 667: LD_STRING 11_Lisa
 669: PPUSH
 670: CALL_OW 28
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 725
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 680: LD_ADDR_EXP 2
 684: PUSH
 685: LD_STRING 11_Lisa
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: CALL 13194 0 2
 695: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 708: LD_EXP 2
 712: PPUSH
 713: LD_INT 4
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end else
 723: GO 741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 725: LD_INT 4
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_INT 0
 736: PPUSH
 737: CALL 1132 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 741: LD_STRING 11_Donaldson
 743: PPUSH
 744: CALL_OW 28
 748: PUSH
 749: LD_INT 1
 751: EQUAL
 752: IFFALSE 799
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 754: LD_ADDR_EXP 3
 758: PUSH
 759: LD_STRING 11_Donaldson
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: CALL 13194 0 2
 769: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 770: LD_EXP 3
 774: PPUSH
 775: LD_INT 1
 777: PPUSH
 778: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 782: LD_EXP 3
 786: PPUSH
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 0
 792: PPUSH
 793: CALL_OW 49
// end else
 797: GO 815
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 799: LD_INT 4
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL 1132 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 815: LD_STRING 11_Cyrus
 817: PPUSH
 818: CALL_OW 28
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 873
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 828: LD_ADDR_EXP 5
 832: PUSH
 833: LD_STRING 11_Cyrus
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 13194 0 2
 843: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 844: LD_EXP 5
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 856: LD_EXP 5
 860: PPUSH
 861: LD_INT 4
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL_OW 49
// end else
 871: GO 889
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 873: LD_INT 4
 875: PPUSH
 876: LD_INT 0
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL 1132 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 889: LD_STRING 11_Denis
 891: PPUSH
 892: CALL_OW 28
 896: PUSH
 897: LD_INT 1
 899: EQUAL
 900: IFFALSE 947
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 902: LD_ADDR_EXP 6
 906: PUSH
 907: LD_STRING 11_Denis
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL 13194 0 2
 917: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 918: LD_EXP 6
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 930: LD_EXP 6
 934: PPUSH
 935: LD_INT 4
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: CALL_OW 49
// end else
 945: GO 963
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 947: LD_INT 4
 949: PPUSH
 950: LD_INT 0
 952: PPUSH
 953: LD_INT 1
 955: PPUSH
 956: LD_INT 0
 958: PPUSH
 959: CALL 1132 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 963: LD_STRING 11_Frank
 965: PPUSH
 966: CALL_OW 28
 970: PUSH
 971: LD_INT 1
 973: EQUAL
 974: IFFALSE 1021
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 976: LD_ADDR_EXP 12
 980: PUSH
 981: LD_STRING 11_Frank
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: CALL 13194 0 2
 991: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 992: LD_EXP 12
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1004: LD_EXP 12
1008: PPUSH
1009: LD_INT 4
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// end else
1019: GO 1037
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1021: LD_INT 4
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: LD_INT 1
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL 1132 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1037: LD_STRING 11_Cornell
1039: PPUSH
1040: CALL_OW 28
1044: PUSH
1045: LD_INT 1
1047: EQUAL
1048: IFFALSE 1095
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1050: LD_ADDR_EXP 10
1054: PUSH
1055: LD_STRING 11_Cornell
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: CALL 13194 0 2
1065: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1066: LD_EXP 10
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1078: LD_EXP 10
1082: PPUSH
1083: LD_INT 4
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL_OW 49
// end else
1093: GO 1111
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1095: LD_INT 4
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL 1132 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1111: LD_ADDR_EXP 22
1115: PUSH
1116: LD_STRING Powell
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL 13194 0 2
1126: ST_TO_ADDR
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
// if mech = 1 then
1139: LD_VAR 0 4
1143: PUSH
1144: LD_INT 1
1146: EQUAL
1147: IFFALSE 1384
// begin if others11 > 0 then
1149: LD_EXP 14
1153: PUSH
1154: LD_INT 0
1156: GREATER
1157: IFFALSE 1324
// begin for i := 1 to others11 - 1 do
1159: LD_ADDR_VAR 0 6
1163: PUSH
1164: DOUBLE
1165: LD_INT 1
1167: DEC
1168: ST_TO_ADDR
1169: LD_EXP 14
1173: PUSH
1174: LD_INT 1
1176: MINUS
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1261
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1181: LD_EXP 14
1185: PUSH
1186: LD_VAR 0 6
1190: ARRAY
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: CALL_OW 259
1199: PUSH
1200: LD_EXP 14
1204: PUSH
1205: LD_VAR 0 6
1209: PUSH
1210: LD_INT 1
1212: PLUS
1213: ARRAY
1214: PPUSH
1215: LD_INT 3
1217: PPUSH
1218: CALL_OW 259
1222: LESS
1223: IFFALSE 1259
// begin mecha = others11 [ i + 1 ] ;
1225: LD_ADDR_VAR 0 9
1229: PUSH
1230: LD_EXP 14
1234: PUSH
1235: LD_VAR 0 6
1239: PUSH
1240: LD_INT 1
1242: PLUS
1243: ARRAY
1244: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1245: LD_VAR 0 9
1249: PPUSH
1250: LD_INT 3
1252: PPUSH
1253: CALL_OW 336
// break ;
1257: GO 1261
// end ; end ;
1259: GO 1178
1261: POP
1262: POP
// if spawnMode = 1 then
1263: LD_VAR 0 3
1267: PUSH
1268: LD_INT 1
1270: EQUAL
1271: IFFALSE 1292
// PlaceUnitArea ( mecha , area , false ) else
1273: LD_VAR 0 9
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
1290: GO 1306
// PlaceHumanInUnit ( mecha , veh ) ;
1292: LD_VAR 0 9
1296: PPUSH
1297: LD_VAR 0 2
1301: PPUSH
1302: CALL_OW 52
// others11 = others11 diff mecha ;
1306: LD_ADDR_EXP 14
1310: PUSH
1311: LD_EXP 14
1315: PUSH
1316: LD_VAR 0 9
1320: DIFF
1321: ST_TO_ADDR
// end else
1322: GO 1382
// begin hc_name =  ;
1324: LD_ADDR_OWVAR 26
1328: PUSH
1329: LD_STRING 
1331: ST_TO_ADDR
// hc_gallery =  ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1340: LD_INT 0
1342: PPUSH
1343: LD_INT 7
1345: PPUSH
1346: LD_INT 9
1348: PPUSH
1349: CALL_OW 12
1353: PPUSH
1354: CALL_OW 383
// un = CreateHuman ;
1358: LD_ADDR_VAR 0 7
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1368: LD_VAR 0 7
1372: PPUSH
1373: LD_VAR 0 2
1377: PPUSH
1378: CALL_OW 52
// end ; end else
1382: GO 1553
// begin if others11 > 0 then
1384: LD_EXP 14
1388: PUSH
1389: LD_INT 0
1391: GREATER
1392: IFFALSE 1465
// begin if spawnMode = 1 then
1394: LD_VAR 0 3
1398: PUSH
1399: LD_INT 1
1401: EQUAL
1402: IFFALSE 1427
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1404: LD_EXP 14
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: LD_VAR 0 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL_OW 49
1425: GO 1445
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1427: LD_EXP 14
1431: PUSH
1432: LD_INT 1
1434: ARRAY
1435: PPUSH
1436: LD_VAR 0 2
1440: PPUSH
1441: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1445: LD_ADDR_EXP 14
1449: PUSH
1450: LD_EXP 14
1454: PPUSH
1455: LD_INT 1
1457: PPUSH
1458: CALL_OW 3
1462: ST_TO_ADDR
// end else
1463: GO 1553
// begin hc_name =  ;
1465: LD_ADDR_OWVAR 26
1469: PUSH
1470: LD_STRING 
1472: ST_TO_ADDR
// hc_gallery =  ;
1473: LD_ADDR_OWVAR 33
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1481: LD_INT 0
1483: PPUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 4
1507: PPUSH
1508: CALL_OW 12
1512: ARRAY
1513: PPUSH
1514: LD_INT 7
1516: PPUSH
1517: LD_INT 9
1519: PPUSH
1520: CALL_OW 12
1524: PPUSH
1525: CALL_OW 380
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 7
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1539: LD_VAR 0 7
1543: PPUSH
1544: LD_VAR 0 2
1548: PPUSH
1549: CALL_OW 52
// end ; end ; end ;
1553: LD_VAR 0 5
1557: RET
// export function PrepareVehicles ; var veh ; begin
1558: LD_INT 0
1560: PPUSH
1561: PPUSH
// uc_side = 1 ;
1562: LD_ADDR_OWVAR 20
1566: PUSH
1567: LD_INT 1
1569: ST_TO_ADDR
// uc_nation = 1 ;
1570: LD_ADDR_OWVAR 21
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1578: LD_ADDR_OWVAR 37
1582: PUSH
1583: LD_INT 3
1585: ST_TO_ADDR
// vc_engine = 3 ;
1586: LD_ADDR_OWVAR 39
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_control = 3 ;
1594: LD_ADDR_OWVAR 38
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1602: LD_ADDR_OWVAR 40
1606: PUSH
1607: LD_INT 4
1609: ST_TO_ADDR
// veh = CreateVehicle ;
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: CALL_OW 45
1619: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1620: LD_VAR 0 2
1624: PPUSH
1625: LD_INT 4
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 49
// vc_weapon = us_double_gun ;
1635: LD_ADDR_OWVAR 40
1639: PUSH
1640: LD_INT 5
1642: ST_TO_ADDR
// vc_control = 1 ;
1643: LD_ADDR_OWVAR 38
1647: PUSH
1648: LD_INT 1
1650: ST_TO_ADDR
// veh = CreateVehicle ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: CALL_OW 45
1660: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL_OW 49
// vc_weapon = us_light_gun ;
1676: LD_ADDR_OWVAR 40
1680: PUSH
1681: LD_INT 3
1683: ST_TO_ADDR
// vc_control = 3 ;
1684: LD_ADDR_OWVAR 38
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1692: LD_ADDR_OWVAR 37
1696: PUSH
1697: LD_INT 2
1699: ST_TO_ADDR
// veh = CreateVehicle ;
1700: LD_ADDR_VAR 0 2
1704: PUSH
1705: CALL_OW 45
1709: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1710: LD_VAR 0 2
1714: PPUSH
1715: LD_INT 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1725: LD_ADDR_OWVAR 40
1729: PUSH
1730: LD_INT 4
1732: ST_TO_ADDR
// veh = CreateVehicle ;
1733: LD_ADDR_VAR 0 2
1737: PUSH
1738: CALL_OW 45
1742: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1743: LD_VAR 0 2
1747: PPUSH
1748: LD_INT 4
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 49
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PowellSupport1 ; var veh , un ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1784: LD_STRING 11_Brown
1786: PPUSH
1787: CALL_OW 28
1791: PUSH
1792: LD_INT 1
1794: EQUAL
1795: IFFALSE 1842
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1797: LD_ADDR_EXP 7
1801: PUSH
1802: LD_STRING 11_Brown
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: CALL 13194 0 2
1812: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1813: LD_EXP 7
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1825: LD_EXP 7
1829: PPUSH
1830: LD_INT 4
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 49
// end else
1840: GO 1858
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1842: LD_INT 4
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL 1132 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1858: LD_STRING 11_Gary
1860: PPUSH
1861: CALL_OW 28
1865: PUSH
1866: LD_INT 1
1868: EQUAL
1869: IFFALSE 1916
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1871: LD_ADDR_EXP 11
1875: PUSH
1876: LD_STRING 11_Gary
1878: PPUSH
1879: LD_INT 1
1881: PPUSH
1882: CALL 13194 0 2
1886: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1887: LD_EXP 11
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1899: LD_EXP 11
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 49
// end else
1914: GO 1932
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1916: LD_INT 4
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL 1132 0 4
// end ; vc_chassis = us_medium_tracked ;
1932: LD_ADDR_OWVAR 37
1936: PUSH
1937: LD_INT 3
1939: ST_TO_ADDR
// vc_engine = 3 ;
1940: LD_ADDR_OWVAR 39
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_control = 1 ;
1948: LD_ADDR_OWVAR 38
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// vc_weapon = us_crane ;
1956: LD_ADDR_OWVAR 40
1960: PUSH
1961: LD_INT 13
1963: ST_TO_ADDR
// veh = CreateVehicle ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: CALL_OW 45
1973: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_INT 4
1981: PPUSH
1982: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1986: LD_VAR 0 2
1990: PPUSH
1991: LD_INT 4
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2001: LD_INT 4
2003: PPUSH
2004: LD_VAR 0 2
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: CALL 1132 0 4
// vc_weapon = 9 ;
2019: LD_ADDR_OWVAR 40
2023: PUSH
2024: LD_INT 9
2026: ST_TO_ADDR
// veh = CreateVehicle ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: CALL_OW 45
2036: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2037: LD_VAR 0 2
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_INT 4
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2064: LD_INT 4
2066: PPUSH
2067: LD_VAR 0 2
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 1132 0 4
// vc_control = 3 ;
2082: LD_ADDR_OWVAR 38
2086: PUSH
2087: LD_INT 3
2089: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2090: LD_ADDR_OWVAR 40
2094: PUSH
2095: LD_INT 12
2097: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2098: LD_ADDR_EXP 15
2102: PUSH
2103: CALL_OW 45
2107: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2108: LD_ADDR_EXP 16
2112: PUSH
2113: CALL_OW 45
2117: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2118: LD_EXP 15
2122: PPUSH
2123: LD_INT 4
2125: PPUSH
2126: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2130: LD_EXP 16
2134: PPUSH
2135: LD_INT 4
2137: PPUSH
2138: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2142: LD_EXP 15
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: LD_INT 0
2152: PPUSH
2153: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2157: LD_EXP 16
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2172: LD_EXP 15
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: LD_INT 100
2182: PPUSH
2183: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2187: LD_EXP 16
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 80
2197: PPUSH
2198: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2202: LD_EXP 16
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_INT 20
2212: PPUSH
2213: CALL_OW 291
// end ;
2217: LD_VAR 0 1
2221: RET
// export function PowellSupport2 ; var veh , un ; begin
2222: LD_INT 0
2224: PPUSH
2225: PPUSH
2226: PPUSH
// uc_side = 1 ;
2227: LD_ADDR_OWVAR 20
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// uc_nation = 1 ;
2235: LD_ADDR_OWVAR 21
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2243: LD_ADDR_OWVAR 37
2247: PUSH
2248: LD_INT 2
2250: ST_TO_ADDR
// vc_engine = 3 ;
2251: LD_ADDR_OWVAR 39
2255: PUSH
2256: LD_INT 3
2258: ST_TO_ADDR
// vc_control = 3 ;
2259: LD_ADDR_OWVAR 38
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2267: LD_ADDR_OWVAR 40
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// veh = CreateVehicle ;
2275: LD_ADDR_VAR 0 2
2279: PUSH
2280: CALL_OW 45
2284: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2285: LD_VAR 0 2
2289: PPUSH
2290: LD_INT 4
2292: PPUSH
2293: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_INT 4
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// vc_control = 1 ;
2312: LD_ADDR_OWVAR 38
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2320: LD_ADDR_OWVAR 37
2324: PUSH
2325: LD_INT 2
2327: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2328: LD_ADDR_OWVAR 40
2332: PUSH
2333: LD_INT 5
2335: ST_TO_ADDR
// veh = CreateVehicle ;
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: CALL_OW 45
2345: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 4
2353: PPUSH
2354: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2358: LD_VAR 0 2
2362: PPUSH
2363: LD_INT 4
2365: PPUSH
2366: LD_INT 0
2368: PPUSH
2369: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2373: LD_STRING 11_Bobby
2375: PPUSH
2376: CALL_OW 28
2380: PUSH
2381: LD_INT 1
2383: EQUAL
2384: IFFALSE 2430
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2386: LD_ADDR_EXP 4
2390: PUSH
2391: LD_STRING 11_Bobby
2393: PPUSH
2394: LD_INT 1
2396: PPUSH
2397: CALL 13194 0 2
2401: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2402: LD_EXP 4
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2414: LD_EXP 4
2418: PPUSH
2419: LD_VAR 0 2
2423: PPUSH
2424: CALL_OW 52
// end else
2428: GO 2448
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2430: LD_INT 0
2432: PPUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_INT 2
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL 1132 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2448: LD_STRING 11_Houten
2450: PPUSH
2451: CALL_OW 28
2455: PUSH
2456: LD_INT 1
2458: EQUAL
2459: IFFALSE 2506
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2461: LD_ADDR_EXP 9
2465: PUSH
2466: LD_STRING 11_Houten
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL 13194 0 2
2476: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2477: LD_EXP 9
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2489: LD_EXP 9
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end else
2504: GO 2522
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2506: LD_INT 4
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 1132 0 4
// end ; vc_control = 3 ;
2522: LD_ADDR_OWVAR 38
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2530: LD_ADDR_OWVAR 40
2534: PUSH
2535: LD_INT 12
2537: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2538: LD_ADDR_EXP 17
2542: PUSH
2543: CALL_OW 45
2547: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2548: LD_EXP 17
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 233
// amCargo4 = CreateVehicle ;
2560: LD_ADDR_EXP 18
2564: PUSH
2565: CALL_OW 45
2569: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2570: LD_EXP 18
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: CALL_OW 233
// amCargo5 = CreateVehicle ;
2582: LD_ADDR_EXP 19
2586: PUSH
2587: CALL_OW 45
2591: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2592: LD_EXP 19
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2604: LD_EXP 17
2608: PPUSH
2609: LD_INT 4
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2619: LD_EXP 18
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2634: LD_EXP 19
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// if kurtStatus > 0 then
2649: LD_EXP 27
2653: PUSH
2654: LD_INT 0
2656: GREATER
2657: IFFALSE 2706
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2659: LD_EXP 17
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 100
2669: PPUSH
2670: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2674: LD_EXP 18
2678: PPUSH
2679: LD_INT 1
2681: PPUSH
2682: LD_INT 100
2684: PPUSH
2685: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2689: LD_EXP 19
2693: PPUSH
2694: LD_INT 3
2696: PPUSH
2697: LD_INT 80
2699: PPUSH
2700: CALL_OW 291
// end else
2704: GO 2751
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2706: LD_EXP 17
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: LD_INT 100
2716: PPUSH
2717: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2721: LD_EXP 18
2725: PPUSH
2726: LD_INT 3
2728: PPUSH
2729: LD_INT 60
2731: PPUSH
2732: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2736: LD_EXP 19
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 100
2746: PPUSH
2747: CALL_OW 291
// end ; end ;
2751: LD_VAR 0 1
2755: RET
// export function PowellSupport3 ; var veh , un ; begin
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
// uc_side = 1 ;
2761: LD_ADDR_OWVAR 20
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// uc_nation = 1 ;
2769: LD_ADDR_OWVAR 21
2773: PUSH
2774: LD_INT 1
2776: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2777: LD_INT 4
2779: PPUSH
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 1
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL 1132 0 4
// vc_chassis = us_medium_wheeled ;
2793: LD_ADDR_OWVAR 37
2797: PUSH
2798: LD_INT 2
2800: ST_TO_ADDR
// vc_engine = 3 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 3
2808: ST_TO_ADDR
// vc_control = 3 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 12
2824: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2825: LD_ADDR_EXP 20
2829: PUSH
2830: CALL_OW 45
2834: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2835: LD_ADDR_EXP 21
2839: PUSH
2840: CALL_OW 45
2844: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2845: LD_EXP 20
2849: PPUSH
2850: LD_INT 4
2852: PPUSH
2853: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2857: LD_EXP 21
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2869: LD_EXP 20
2873: PPUSH
2874: LD_INT 4
2876: PPUSH
2877: LD_INT 0
2879: PPUSH
2880: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2884: LD_EXP 21
2888: PPUSH
2889: LD_INT 4
2891: PPUSH
2892: LD_INT 0
2894: PPUSH
2895: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2899: LD_EXP 20
2903: PPUSH
2904: LD_INT 1
2906: PPUSH
2907: LD_INT 100
2909: PPUSH
2910: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
2914: LD_EXP 21
2918: PPUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 100
2924: PPUSH
2925: CALL_OW 291
// end ; end_of_file
2929: LD_VAR 0 1
2933: RET
// export function PrepareRussianCommander ; begin
2934: LD_INT 0
2936: PPUSH
// uc_side = 3 ;
2937: LD_ADDR_OWVAR 20
2941: PUSH
2942: LD_INT 3
2944: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2945: LD_ADDR_EXP 23
2949: PUSH
2950: LD_STRING Davidov
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL 13194 0 2
2960: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2961: LD_EXP 23
2965: PPUSH
2966: LD_INT 3
2968: PPUSH
2969: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2973: LD_ADDR_EXP 35
2977: PUSH
2978: LD_EXP 35
2982: PUSH
2983: LD_EXP 23
2987: ADD
2988: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2989: LD_EXP 35
2993: PPUSH
2994: LD_INT 4
2996: PPUSH
2997: CALL_OW 336
// end ;
3001: LD_VAR 0 1
3005: RET
// export function PrepareEastBase ; var i , un ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3011: LD_INT 3
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 121
3019: PPUSH
3020: LD_EXP 37
3024: PPUSH
3025: LD_EXP 38
3029: PPUSH
3030: CALL_OW 12
3034: PPUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL 13975 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 3
3050: PPUSH
3051: LD_INT 121
3053: PPUSH
3054: LD_EXP 37
3058: PPUSH
3059: LD_EXP 38
3063: PPUSH
3064: CALL_OW 12
3068: PPUSH
3069: LD_INT 9
3071: PPUSH
3072: LD_INT 3
3074: PPUSH
3075: CALL 13975 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3079: LD_INT 3
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 4
3087: PPUSH
3088: LD_EXP 37
3092: PPUSH
3093: LD_EXP 38
3097: PPUSH
3098: CALL_OW 12
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL 13975 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: LD_INT 112
3121: PPUSH
3122: LD_EXP 37
3126: PPUSH
3127: LD_EXP 38
3131: PPUSH
3132: CALL_OW 12
3136: PPUSH
3137: LD_INT 3
3139: PPUSH
3140: LD_INT 6
3142: PPUSH
3143: CALL 13975 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3147: LD_INT 3
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_INT 47
3155: PPUSH
3156: LD_EXP 37
3160: PPUSH
3161: LD_EXP 38
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: LD_INT 4
3173: PPUSH
3174: LD_INT 6
3176: PPUSH
3177: CALL 13975 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 129
3189: PPUSH
3190: LD_EXP 37
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 6
3210: PPUSH
3211: CALL 13975 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 135
3223: PPUSH
3224: LD_EXP 37
3228: PPUSH
3229: LD_EXP 38
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 4
3241: PPUSH
3242: LD_INT 6
3244: PPUSH
3245: CALL 13975 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 22
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 30
3266: PUSH
3267: LD_INT 32
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PPUSH
3278: CALL_OW 69
3282: PUSH
3283: FOR_IN
3284: IFFALSE 3324
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 3
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 37
3301: PPUSH
3302: LD_EXP 38
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: CALL 13975 0 6
3322: GO 3283
3324: POP
3325: POP
// for i = 1 to 5 do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: DOUBLE
3332: LD_INT 1
3334: DEC
3335: ST_TO_ADDR
3336: LD_INT 5
3338: PUSH
3339: FOR_TO
3340: IFFALSE 3439
// begin uc_side = 3 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 3
3349: ST_TO_ADDR
// uc_nation = 3 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 3
3357: ST_TO_ADDR
// hc_gallery =  ;
3358: LD_ADDR_OWVAR 33
3362: PUSH
3363: LD_STRING 
3365: ST_TO_ADDR
// hc_name =  ;
3366: LD_ADDR_OWVAR 26
3370: PUSH
3371: LD_STRING 
3373: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3374: LD_INT 0
3376: PPUSH
3377: LD_INT 4
3379: PPUSH
3380: LD_EXP 37
3384: PPUSH
3385: LD_EXP 38
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: CALL_OW 380
// un = CreateHuman ;
3399: LD_ADDR_VAR 0 3
3403: PUSH
3404: CALL_OW 44
3408: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3409: LD_VAR 0 3
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3421: LD_ADDR_EXP 35
3425: PUSH
3426: LD_EXP 35
3430: PUSH
3431: LD_VAR 0 3
3435: ADD
3436: ST_TO_ADDR
// end ;
3437: GO 3339
3439: POP
3440: POP
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareWestBase ; var i , un ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
3450: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 3
3456: PPUSH
3457: LD_INT 6
3459: PPUSH
3460: LD_EXP 37
3464: PPUSH
3465: LD_EXP 38
3469: PPUSH
3470: CALL_OW 12
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: LD_INT 3
3480: PPUSH
3481: CALL 13975 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3485: LD_INT 3
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: LD_INT 91
3493: PPUSH
3494: LD_EXP 37
3498: PPUSH
3499: LD_EXP 38
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: LD_INT 4
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: CALL 13975 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3519: LD_INT 3
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: LD_INT 21
3527: PPUSH
3528: LD_EXP 37
3532: PPUSH
3533: LD_EXP 38
3537: PPUSH
3538: CALL_OW 12
3542: PPUSH
3543: LD_INT 3
3545: PPUSH
3546: LD_INT 6
3548: PPUSH
3549: CALL 13975 0 6
// end ;
3553: LD_VAR 0 1
3557: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
// uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// for i = 1 to 5 do
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: DOUBLE
3586: LD_INT 1
3588: DEC
3589: ST_TO_ADDR
3590: LD_INT 5
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3664
// begin hc_gallery =  ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING 
3603: ST_TO_ADDR
// hc_name =  ;
3604: LD_ADDR_OWVAR 26
3608: PUSH
3609: LD_STRING 
3611: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3612: LD_INT 0
3614: PPUSH
3615: LD_INT 9
3617: PPUSH
3618: LD_EXP 37
3622: PPUSH
3623: LD_EXP 38
3627: PPUSH
3628: CALL_OW 12
3632: PPUSH
3633: CALL_OW 380
// un = CreateHuman ;
3637: LD_ADDR_VAR 0 3
3641: PUSH
3642: CALL_OW 44
3646: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3647: LD_VAR 0 3
3651: PPUSH
3652: LD_INT 8
3654: PPUSH
3655: LD_INT 0
3657: PPUSH
3658: CALL_OW 49
// end ;
3662: GO 3593
3664: POP
3665: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3666: LD_ADDR_VAR 0 2
3670: PUSH
3671: DOUBLE
3672: LD_INT 1
3674: DEC
3675: ST_TO_ADDR
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: LD_OWVAR 67
3694: ARRAY
3695: PUSH
3696: FOR_TO
3697: IFFALSE 3767
// begin hc_gallery =  ;
3699: LD_ADDR_OWVAR 33
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// hc_name =  ;
3707: LD_ADDR_OWVAR 26
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3715: LD_INT 0
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: LD_EXP 38
3730: PPUSH
3731: CALL_OW 12
3735: PPUSH
3736: CALL_OW 380
// un = CreateHuman ;
3740: LD_ADDR_VAR 0 3
3744: PUSH
3745: CALL_OW 44
3749: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3750: LD_VAR 0 3
3754: PPUSH
3755: LD_INT 8
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: CALL_OW 49
// end ;
3765: GO 3696
3767: POP
3768: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3769: LD_ADDR_VAR 0 2
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3996
// begin vc_engine = 3 ;
3802: LD_ADDR_OWVAR 39
3806: PUSH
3807: LD_INT 3
3809: ST_TO_ADDR
// vc_control = 1 ;
3810: LD_ADDR_OWVAR 38
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3818: LD_ADDR_OWVAR 40
3822: PUSH
3823: LD_INT 42
3825: PUSH
3826: LD_INT 43
3828: PUSH
3829: LD_INT 44
3831: PUSH
3832: LD_INT 45
3834: PUSH
3835: LD_INT 46
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 5
3850: PPUSH
3851: CALL_OW 12
3855: ARRAY
3856: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3857: LD_OWVAR 40
3861: PUSH
3862: LD_INT 46
3864: EQUAL
3865: IFFALSE 3877
// vc_chassis = ru_heavy_tracked else
3867: LD_ADDR_OWVAR 37
3871: PUSH
3872: LD_INT 24
3874: ST_TO_ADDR
3875: GO 3904
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3877: LD_ADDR_OWVAR 37
3881: PUSH
3882: LD_INT 22
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 2
3897: PPUSH
3898: CALL_OW 12
3902: ARRAY
3903: ST_TO_ADDR
// veh = CreateVehicle ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: CALL_OW 45
3913: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3914: LD_VAR 0 4
3918: PPUSH
3919: LD_INT 3
3921: PPUSH
3922: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_INT 5
3933: PPUSH
3934: LD_INT 0
3936: PPUSH
3937: CALL_OW 49
// hc_gallery =  ;
3941: LD_ADDR_OWVAR 33
3945: PUSH
3946: LD_STRING 
3948: ST_TO_ADDR
// hc_name =  ;
3949: LD_ADDR_OWVAR 26
3953: PUSH
3954: LD_STRING 
3956: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3957: LD_INT 0
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: LD_INT 10
3965: PPUSH
3966: CALL_OW 380
// un = CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 4
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3799
3996: POP
3997: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 3
4010: PUSH
4011: LD_INT 4
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: PUSH
4022: LD_OWVAR 67
4026: ARRAY
4027: PUSH
4028: FOR_TO
4029: IFFALSE 4176
// begin vc_engine = 3 ;
4031: LD_ADDR_OWVAR 39
4035: PUSH
4036: LD_INT 3
4038: ST_TO_ADDR
// vc_control = 3 ;
4039: LD_ADDR_OWVAR 38
4043: PUSH
4044: LD_INT 3
4046: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4047: LD_ADDR_OWVAR 40
4051: PUSH
4052: LD_INT 42
4054: PUSH
4055: LD_INT 43
4057: PUSH
4058: LD_INT 44
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 49
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 1
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 12
4088: ARRAY
4089: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4090: LD_OWVAR 40
4094: PUSH
4095: LD_INT 46
4097: EQUAL
4098: IFFALSE 4110
// vc_chassis = ru_heavy_tracked else
4100: LD_ADDR_OWVAR 37
4104: PUSH
4105: LD_INT 24
4107: ST_TO_ADDR
4108: GO 4137
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4110: LD_ADDR_OWVAR 37
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 21
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 1
4127: PPUSH
4128: LD_INT 2
4130: PPUSH
4131: CALL_OW 12
4135: ARRAY
4136: ST_TO_ADDR
// veh = CreateVehicle ;
4137: LD_ADDR_VAR 0 4
4141: PUSH
4142: CALL_OW 45
4146: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4159: LD_VAR 0 4
4163: PPUSH
4164: LD_INT 6
4166: PPUSH
4167: LD_INT 0
4169: PPUSH
4170: CALL_OW 49
// end ;
4174: GO 4028
4176: POP
4177: POP
// end ; end_of_file
4178: LD_VAR 0 1
4182: RET
// export function PrepareKurt ; begin
4183: LD_INT 0
4185: PPUSH
// uc_side = 8 ;
4186: LD_ADDR_OWVAR 20
4190: PUSH
4191: LD_INT 8
4193: ST_TO_ADDR
// uc_nation = 2 ;
4194: LD_ADDR_OWVAR 21
4198: PUSH
4199: LD_INT 2
4201: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4202: LD_ADDR_OWVAR 37
4206: PUSH
4207: LD_INT 13
4209: ST_TO_ADDR
// vc_engine = 1 ;
4210: LD_ADDR_OWVAR 39
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// vc_control = 1 ;
4218: LD_ADDR_OWVAR 38
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// vc_weapon = 24 ;
4226: LD_ADDR_OWVAR 40
4230: PUSH
4231: LD_INT 24
4233: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4234: LD_ADDR_EXP 26
4238: PUSH
4239: CALL_OW 45
4243: ST_TO_ADDR
// if kurtStatus > 0 then
4244: LD_EXP 27
4248: PUSH
4249: LD_INT 0
4251: GREATER
4252: IFFALSE 4301
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4254: LD_ADDR_EXP 24
4258: PUSH
4259: LD_STRING Kurt
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL 13194 0 2
4269: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4270: LD_EXP 26
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4285: LD_EXP 24
4289: PPUSH
4290: LD_EXP 26
4294: PPUSH
4295: CALL_OW 52
// end else
4299: GO 4366
// begin hc_name =  ;
4301: LD_ADDR_OWVAR 26
4305: PUSH
4306: LD_STRING 
4308: ST_TO_ADDR
// hc_gallery =  ;
4309: LD_ADDR_OWVAR 33
4313: PUSH
4314: LD_STRING 
4316: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4317: LD_INT 1
4319: PPUSH
4320: LD_INT 10
4322: PPUSH
4323: CALL_OW 381
// otherKurt = CreateHuman ;
4327: LD_ADDR_EXP 25
4331: PUSH
4332: CALL_OW 44
4336: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4337: LD_EXP 26
4341: PPUSH
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4352: LD_EXP 25
4356: PPUSH
4357: LD_EXP 26
4361: PPUSH
4362: CALL_OW 52
// end ; end ;
4366: LD_VAR 0 1
4370: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
// for i = 1 to 3 do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_INT 3
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4512
// begin uc_side = 1 ;
4393: LD_ADDR_OWVAR 20
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// uc_nation = 2 ;
4401: LD_ADDR_OWVAR 21
4405: PUSH
4406: LD_INT 2
4408: ST_TO_ADDR
// hc_gallery =  ;
4409: LD_ADDR_OWVAR 33
4413: PUSH
4414: LD_STRING 
4416: ST_TO_ADDR
// hc_name =  ;
4417: LD_ADDR_OWVAR 26
4421: PUSH
4422: LD_STRING 
4424: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4425: LD_EXP 27
4429: PUSH
4430: LD_INT 0
4432: EQUAL
4433: PUSH
4434: LD_EXP 27
4438: PUSH
4439: LD_INT 2
4441: EQUAL
4442: OR
4443: IFFALSE 4460
// PrepareHuman ( false , 1 , 6 ) else
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL_OW 380
4458: GO 4473
// PrepareHuman ( false , 1 , 8 ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 8
4468: PPUSH
4469: CALL_OW 380
// un = CreateHuman ;
4473: LD_ADDR_VAR 0 3
4477: PUSH
4478: CALL_OW 44
4482: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4483: LD_VAR 0 3
4487: PPUSH
4488: LD_INT 4
4490: PPUSH
4491: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4495: LD_VAR 0 3
4499: PPUSH
4500: LD_INT 4
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// end ;
4510: GO 4390
4512: POP
4513: POP
// vc_chassis = 14 ;
4514: LD_ADDR_OWVAR 37
4518: PUSH
4519: LD_INT 14
4521: ST_TO_ADDR
// vc_engine = 3 ;
4522: LD_ADDR_OWVAR 39
4526: PUSH
4527: LD_INT 3
4529: ST_TO_ADDR
// vc_control = 1 ;
4530: LD_ADDR_OWVAR 38
4534: PUSH
4535: LD_INT 1
4537: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4538: LD_ADDR_OWVAR 40
4542: PUSH
4543: LD_INT 27
4545: PUSH
4546: LD_INT 26
4548: PUSH
4549: LD_INT 28
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 3
4562: PPUSH
4563: CALL_OW 12
4567: ARRAY
4568: ST_TO_ADDR
// veh = CreateVehicle ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: CALL_OW 45
4578: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_INT 4
4586: PPUSH
4587: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4591: LD_VAR 0 4
4595: PPUSH
4596: LD_INT 4
4598: PPUSH
4599: LD_INT 0
4601: PPUSH
4602: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4606: LD_EXP 27
4610: PUSH
4611: LD_INT 0
4613: EQUAL
4614: PUSH
4615: LD_EXP 27
4619: PUSH
4620: LD_INT 2
4622: EQUAL
4623: OR
4624: IFFALSE 4641
// PrepareHuman ( false , 3 , 6 ) else
4626: LD_INT 0
4628: PPUSH
4629: LD_INT 3
4631: PPUSH
4632: LD_INT 6
4634: PPUSH
4635: CALL_OW 380
4639: GO 4654
// PrepareHuman ( false , 3 , 8 ) ;
4641: LD_INT 0
4643: PPUSH
4644: LD_INT 3
4646: PPUSH
4647: LD_INT 8
4649: PPUSH
4650: CALL_OW 380
// un = CreateHuman ;
4654: LD_ADDR_VAR 0 3
4658: PUSH
4659: CALL_OW 44
4663: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_VAR 0 4
4673: PPUSH
4674: CALL_OW 52
// vc_chassis = 14 ;
4678: LD_ADDR_OWVAR 37
4682: PUSH
4683: LD_INT 14
4685: ST_TO_ADDR
// vc_engine = 3 ;
4686: LD_ADDR_OWVAR 39
4690: PUSH
4691: LD_INT 3
4693: ST_TO_ADDR
// vc_control = 1 ;
4694: LD_ADDR_OWVAR 38
4698: PUSH
4699: LD_INT 1
4701: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4702: LD_ADDR_OWVAR 40
4706: PUSH
4707: LD_INT 27
4709: PUSH
4710: LD_INT 26
4712: PUSH
4713: LD_INT 28
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_INT 1
4723: PPUSH
4724: LD_INT 3
4726: PPUSH
4727: CALL_OW 12
4731: ARRAY
4732: ST_TO_ADDR
// veh = CreateVehicle ;
4733: LD_ADDR_VAR 0 4
4737: PUSH
4738: CALL_OW 45
4742: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4743: LD_VAR 0 4
4747: PPUSH
4748: LD_INT 4
4750: PPUSH
4751: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4755: LD_VAR 0 4
4759: PPUSH
4760: LD_INT 4
4762: PPUSH
4763: LD_INT 0
4765: PPUSH
4766: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4770: LD_EXP 27
4774: PUSH
4775: LD_INT 0
4777: EQUAL
4778: PUSH
4779: LD_EXP 27
4783: PUSH
4784: LD_INT 2
4786: EQUAL
4787: OR
4788: IFFALSE 4805
// PrepareHuman ( false , 4 , 6 ) else
4790: LD_INT 0
4792: PPUSH
4793: LD_INT 4
4795: PPUSH
4796: LD_INT 6
4798: PPUSH
4799: CALL_OW 380
4803: GO 4818
// PrepareHuman ( false , 4 , 8 ) ;
4805: LD_INT 0
4807: PPUSH
4808: LD_INT 4
4810: PPUSH
4811: LD_INT 8
4813: PPUSH
4814: CALL_OW 380
// un = CreateHuman ;
4818: LD_ADDR_VAR 0 3
4822: PUSH
4823: CALL_OW 44
4827: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4828: LD_VAR 0 3
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4840: LD_VAR 0 3
4844: PPUSH
4845: LD_VAR 0 4
4849: PPUSH
4850: CALL_OW 52
// vc_chassis = 14 ;
4854: LD_ADDR_OWVAR 37
4858: PUSH
4859: LD_INT 14
4861: ST_TO_ADDR
// vc_engine = 3 ;
4862: LD_ADDR_OWVAR 39
4866: PUSH
4867: LD_INT 3
4869: ST_TO_ADDR
// vc_control = 1 ;
4870: LD_ADDR_OWVAR 38
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4878: LD_ADDR_OWVAR 40
4882: PUSH
4883: LD_INT 27
4885: PUSH
4886: LD_INT 26
4888: PUSH
4889: LD_INT 28
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 1
4899: PPUSH
4900: LD_INT 3
4902: PPUSH
4903: CALL_OW 12
4907: ARRAY
4908: ST_TO_ADDR
// veh = CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_INT 4
4926: PPUSH
4927: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4931: LD_VAR 0 4
4935: PPUSH
4936: LD_INT 4
4938: PPUSH
4939: LD_INT 0
4941: PPUSH
4942: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4946: LD_EXP 27
4950: PUSH
4951: LD_INT 0
4953: EQUAL
4954: PUSH
4955: LD_EXP 27
4959: PUSH
4960: LD_INT 2
4962: EQUAL
4963: OR
4964: IFFALSE 4981
// PrepareHuman ( false , 2 , 4 ) else
4966: LD_INT 0
4968: PPUSH
4969: LD_INT 2
4971: PPUSH
4972: LD_INT 4
4974: PPUSH
4975: CALL_OW 380
4979: GO 4994
// PrepareHuman ( false , 2 , 8 ) ;
4981: LD_INT 0
4983: PPUSH
4984: LD_INT 2
4986: PPUSH
4987: LD_INT 8
4989: PPUSH
4990: CALL_OW 380
// un = CreateHuman ;
4994: LD_ADDR_VAR 0 3
4998: PUSH
4999: CALL_OW 44
5003: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5004: LD_VAR 0 3
5008: PPUSH
5009: LD_INT 4
5011: PPUSH
5012: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5016: LD_VAR 0 3
5020: PPUSH
5021: LD_VAR 0 4
5025: PPUSH
5026: CALL_OW 52
// end ;
5030: LD_VAR 0 1
5034: RET
// export function PrepareAttackLegion ; var i , un ; begin
5035: LD_INT 0
5037: PPUSH
5038: PPUSH
5039: PPUSH
// for i = 1 to 4 do
5040: LD_ADDR_VAR 0 2
5044: PUSH
5045: DOUBLE
5046: LD_INT 1
5048: DEC
5049: ST_TO_ADDR
5050: LD_INT 4
5052: PUSH
5053: FOR_TO
5054: IFFALSE 5164
// begin uc_side = 8 ;
5056: LD_ADDR_OWVAR 20
5060: PUSH
5061: LD_INT 8
5063: ST_TO_ADDR
// uc_nation = 2 ;
5064: LD_ADDR_OWVAR 21
5068: PUSH
5069: LD_INT 2
5071: ST_TO_ADDR
// hc_gallery =  ;
5072: LD_ADDR_OWVAR 33
5076: PUSH
5077: LD_STRING 
5079: ST_TO_ADDR
// hc_name =  ;
5080: LD_ADDR_OWVAR 26
5084: PUSH
5085: LD_STRING 
5087: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5088: LD_INT 0
5090: PPUSH
5091: LD_INT 1
5093: PUSH
5094: LD_INT 8
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 1
5103: PPUSH
5104: LD_INT 2
5106: PPUSH
5107: CALL_OW 12
5111: ARRAY
5112: PPUSH
5113: LD_INT 6
5115: PPUSH
5116: LD_INT 8
5118: PPUSH
5119: CALL_OW 12
5123: PPUSH
5124: CALL_OW 380
// un = CreateHuman ;
5128: LD_ADDR_VAR 0 3
5132: PUSH
5133: CALL_OW 44
5137: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5138: LD_VAR 0 3
5142: PPUSH
5143: LD_INT 19
5145: PPUSH
5146: LD_INT 0
5148: PPUSH
5149: CALL_OW 49
// ComCrawl ( un ) ;
5153: LD_VAR 0 3
5157: PPUSH
5158: CALL_OW 137
// end ;
5162: GO 5053
5164: POP
5165: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 8
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5182: LD_INT 20
5184: PPUSH
5185: LD_INT 3
5187: PPUSH
5188: CALL 16676 0 2
// end ; end_of_file
5192: LD_VAR 0 1
5196: RET
// every 1 do var i ;
5197: GO 5199
5199: DISABLE
5200: LD_INT 0
5202: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5203: LD_INT 10
5205: PPUSH
5206: LD_INT 122
5208: PPUSH
5209: LD_INT 145
5211: PPUSH
5212: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5216: LD_INT 137
5218: PPUSH
5219: LD_INT 84
5221: PPUSH
5222: LD_INT 61
5224: PPUSH
5225: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5229: LD_EXP 1
5233: PPUSH
5234: CALL_OW 310
5238: PPUSH
5239: CALL_OW 87
// InGameOn ;
5243: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5247: LD_INT 22
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PPUSH
5257: CALL_OW 69
5261: PPUSH
5262: LD_INT 130
5264: PPUSH
5265: LD_INT 103
5267: PPUSH
5268: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5272: LD_VAR 0 1
5276: PPUSH
5277: LD_INT 114
5279: PPUSH
5280: LD_INT 102
5282: PPUSH
5283: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5287: LD_EXP 1
5291: PPUSH
5292: LD_STRING D1-JMM-1
5294: PPUSH
5295: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5299: LD_EXP 1
5303: PPUSH
5304: CALL_OW 310
5308: PPUSH
5309: CALL_OW 87
// if IsOk ( Donaldson ) then
5313: LD_EXP 3
5317: PPUSH
5318: CALL_OW 302
5322: IFFALSE 5402
// begin Say ( Donaldson , D1-Don-1 ) ;
5324: LD_EXP 3
5328: PPUSH
5329: LD_STRING D1-Don-1
5331: PPUSH
5332: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5336: LD_EXP 1
5340: PPUSH
5341: CALL_OW 310
5345: PPUSH
5346: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5350: LD_EXP 1
5354: PPUSH
5355: LD_STRING D1-JMM-2
5357: PPUSH
5358: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5362: LD_EXP 1
5366: PPUSH
5367: CALL_OW 310
5371: PPUSH
5372: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5376: LD_EXP 3
5380: PPUSH
5381: LD_STRING D1-Don-2
5383: PPUSH
5384: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5388: LD_EXP 1
5392: PPUSH
5393: CALL_OW 310
5397: PPUSH
5398: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 69
5416: PPUSH
5417: LD_INT 110
5419: PPUSH
5420: LD_INT 101
5422: PPUSH
5423: CALL_OW 171
// wait ( 0 0$1 ) ;
5427: LD_INT 35
5429: PPUSH
5430: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5434: LD_EXP 1
5438: PPUSH
5439: CALL_OW 310
5443: PPUSH
5444: CALL_OW 87
// wait ( 0 0$1 ) ;
5448: LD_INT 35
5450: PPUSH
5451: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5455: LD_EXP 1
5459: PPUSH
5460: CALL_OW 310
5464: PPUSH
5465: CALL_OW 87
// wait ( 0 0$1 ) ;
5469: LD_INT 35
5471: PPUSH
5472: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5476: LD_EXP 1
5480: PPUSH
5481: CALL_OW 310
5485: PPUSH
5486: CALL_OW 87
// wait ( 0 0$1 ) ;
5490: LD_INT 35
5492: PPUSH
5493: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5497: LD_EXP 1
5501: PPUSH
5502: CALL_OW 310
5506: PPUSH
5507: CALL_OW 87
// end ;
5511: PPOPN 1
5513: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5514: LD_INT 1
5516: PPUSH
5517: LD_INT 102
5519: PPUSH
5520: LD_INT 94
5522: PPUSH
5523: CALL_OW 293
5527: IFFALSE 5718
5529: GO 5531
5531: DISABLE
5532: LD_INT 0
5534: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5535: LD_INT 102
5537: PPUSH
5538: LD_INT 94
5540: PPUSH
5541: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5545: LD_INT 22
5547: PUSH
5548: LD_INT 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 26
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 25
5580: PUSH
5581: LD_INT 2
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PUSH
5588: LD_INT 25
5590: PUSH
5591: LD_INT 3
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PUSH
5598: LD_INT 25
5600: PUSH
5601: LD_INT 4
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 25
5610: PUSH
5611: LD_INT 5
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 25
5620: PUSH
5621: LD_INT 8
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: PPUSH
5642: CALL_OW 69
5646: PPUSH
5647: LD_STRING D1-Sol1-2
5649: PPUSH
5650: LD_STRING 
5652: PPUSH
5653: CALL 13291 0 3
// Say ( JMM , D1-JMM-3 ) ;
5657: LD_EXP 1
5661: PPUSH
5662: LD_STRING D1-JMM-3
5664: PPUSH
5665: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5669: LD_STRING M1
5671: PPUSH
5672: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5676: LD_ADDR_VAR 0 1
5680: PUSH
5681: LD_INT 22
5683: PUSH
5684: LD_INT 1
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PPUSH
5691: CALL_OW 69
5695: PUSH
5696: FOR_IN
5697: IFFALSE 5716
// ComMoveXY ( i , 95 , 84 ) ;
5699: LD_VAR 0 1
5703: PPUSH
5704: LD_INT 95
5706: PPUSH
5707: LD_INT 84
5709: PPUSH
5710: CALL_OW 111
5714: GO 5696
5716: POP
5717: POP
// end ;
5718: PPOPN 1
5720: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5721: GO 5723
5723: DISABLE
5724: LD_INT 0
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5730: LD_ADDR_VAR 0 2
5734: PUSH
5735: LD_INT 8
5737: PPUSH
5738: LD_INT 22
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 25
5750: PUSH
5751: LD_INT 9
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PPUSH
5762: CALL_OW 70
5766: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5767: LD_ADDR_VAR 0 3
5771: PUSH
5772: LD_INT 22
5774: PUSH
5775: LD_INT 1
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: PPUSH
5785: CALL_OW 69
5789: ST_TO_ADDR
// enable ;
5790: ENABLE
// for i in your_units do
5791: LD_ADDR_VAR 0 1
5795: PUSH
5796: LD_VAR 0 3
5800: PUSH
5801: FOR_IN
5802: IFFALSE 6450
// begin if See ( 3 , i ) then
5804: LD_INT 3
5806: PPUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: CALL_OW 292
5816: IFFALSE 6448
// begin disable ;
5818: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5819: LD_VAR 0 2
5823: PPUSH
5824: LD_INT 96
5826: PPUSH
5827: LD_INT 85
5829: PPUSH
5830: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5834: LD_VAR 0 2
5838: PPUSH
5839: LD_INT 96
5841: PPUSH
5842: LD_INT 85
5844: PPUSH
5845: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5849: LD_VAR 0 2
5853: PPUSH
5854: LD_INT 96
5856: PPUSH
5857: LD_INT 85
5859: PPUSH
5860: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5864: LD_VAR 0 2
5868: PPUSH
5869: LD_INT 96
5871: PPUSH
5872: LD_INT 85
5874: PPUSH
5875: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5879: LD_VAR 0 2
5883: PPUSH
5884: LD_INT 96
5886: PPUSH
5887: LD_INT 85
5889: PPUSH
5890: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 96
5901: PPUSH
5902: LD_INT 85
5904: PPUSH
5905: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D1a-JMM-1
5916: PPUSH
5917: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5921: LD_EXP 3
5925: PPUSH
5926: LD_STRING D1a-Don-1
5928: PPUSH
5929: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5933: LD_ADDR_VAR 0 1
5937: PUSH
5938: LD_INT 22
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL_OW 69
5952: PUSH
5953: FOR_IN
5954: IFFALSE 5973
// ComMoveXY ( i , 109 , 102 ) ;
5956: LD_VAR 0 1
5960: PPUSH
5961: LD_INT 109
5963: PPUSH
5964: LD_INT 102
5966: PPUSH
5967: CALL_OW 111
5971: GO 5953
5973: POP
5974: POP
// Say ( JMM , D1a-JMM-2 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D1a-JMM-2
5982: PPUSH
5983: CALL_OW 88
// wait ( 0 0$10 ) ;
5987: LD_INT 350
5989: PPUSH
5990: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5994: LD_EXP 1
5998: PPUSH
5999: CALL_OW 310
6003: PPUSH
6004: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6008: LD_EXP 3
6012: PPUSH
6013: LD_STRING D1b-Don-1
6015: PPUSH
6016: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6020: LD_EXP 1
6024: PPUSH
6025: LD_STRING D1b-JMM-1
6027: PPUSH
6028: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6032: LD_INT 22
6034: PUSH
6035: LD_INT 1
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: LD_INT 26
6044: PUSH
6045: LD_INT 1
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 2
6054: PUSH
6055: LD_INT 25
6057: PUSH
6058: LD_INT 1
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 25
6067: PUSH
6068: LD_INT 2
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: LD_INT 25
6077: PUSH
6078: LD_INT 3
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 25
6087: PUSH
6088: LD_INT 4
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 25
6097: PUSH
6098: LD_INT 5
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 25
6107: PUSH
6108: LD_INT 8
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: PPUSH
6129: CALL_OW 69
6133: PPUSH
6134: LD_STRING D1b-Sol1-1
6136: PPUSH
6137: LD_STRING 
6139: PPUSH
6140: CALL 13291 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6144: LD_EXP 3
6148: PPUSH
6149: LD_STRING D1b-Don-2
6151: PPUSH
6152: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6156: LD_EXP 1
6160: PPUSH
6161: LD_STRING D1b-JMM-2
6163: PPUSH
6164: CALL_OW 88
// dec = ShowQuery1 ;
6168: LD_ADDR_VAR 0 4
6172: PUSH
6173: CALL 13827 0 0
6177: ST_TO_ADDR
// if dec = 1 then
6178: LD_VAR 0 4
6182: PUSH
6183: LD_INT 1
6185: EQUAL
6186: IFFALSE 6292
// begin Say ( JMM , D2-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D2-JMM-1
6195: PPUSH
6196: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6200: LD_EXP 22
6204: PPUSH
6205: LD_STRING D2-Pow-1
6207: PPUSH
6208: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6212: LD_EXP 1
6216: PPUSH
6217: LD_STRING D2a-JMM-1
6219: PPUSH
6220: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6224: LD_EXP 22
6228: PPUSH
6229: LD_STRING D2a-Pow-1
6231: PPUSH
6232: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6236: LD_EXP 1
6240: PPUSH
6241: LD_STRING D2a-JMM-2
6243: PPUSH
6244: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6248: LD_EXP 22
6252: PPUSH
6253: LD_STRING D2a-Pow-2
6255: PPUSH
6256: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6260: LD_EXP 1
6264: PPUSH
6265: LD_STRING D2a-JMM-3
6267: PPUSH
6268: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6272: LD_EXP 22
6276: PPUSH
6277: LD_STRING D2a-Pow-3
6279: PPUSH
6280: CALL_OW 94
// secondPass = 2 ;
6284: LD_ADDR_EXP 28
6288: PUSH
6289: LD_INT 2
6291: ST_TO_ADDR
// end ; if dec = 2 then
6292: LD_VAR 0 4
6296: PUSH
6297: LD_INT 2
6299: EQUAL
6300: IFFALSE 6394
// begin Say ( JMM , D2-JMM-1 ) ;
6302: LD_EXP 1
6306: PPUSH
6307: LD_STRING D2-JMM-1
6309: PPUSH
6310: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6314: LD_EXP 22
6318: PPUSH
6319: LD_STRING D2-Pow-1
6321: PPUSH
6322: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6326: LD_EXP 1
6330: PPUSH
6331: LD_STRING D2b-JMM-1
6333: PPUSH
6334: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6338: LD_EXP 22
6342: PPUSH
6343: LD_STRING D2b-Pow-1
6345: PPUSH
6346: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6350: LD_EXP 1
6354: PPUSH
6355: LD_STRING D2c-JMM-1
6357: PPUSH
6358: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6362: LD_EXP 22
6366: PPUSH
6367: LD_STRING D2c-Pow-1
6369: PPUSH
6370: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6374: LD_EXP 1
6378: PPUSH
6379: LD_STRING D2c-JMM-2
6381: PPUSH
6382: CALL_OW 88
// secondPass = 2 ;
6386: LD_ADDR_EXP 28
6390: PUSH
6391: LD_INT 2
6393: ST_TO_ADDR
// end ; if dec = 3 then
6394: LD_VAR 0 4
6398: PUSH
6399: LD_INT 3
6401: EQUAL
6402: IFFALSE 6412
// secondPass = 1 ;
6404: LD_ADDR_EXP 28
6408: PUSH
6409: LD_INT 1
6411: ST_TO_ADDR
// InGameOff ;
6412: CALL_OW 9
// ruAI = 1 ;
6416: LD_ADDR_EXP 42
6420: PUSH
6421: LD_INT 1
6423: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6424: LD_INT 1
6426: PPUSH
6427: LD_INT 3
6429: PPUSH
6430: LD_INT 2
6432: PPUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 80
// SaveForQuickRestart ;
6440: CALL_OW 22
// exit ;
6444: POP
6445: POP
6446: GO 6452
// end ; end ;
6448: GO 5801
6450: POP
6451: POP
// end ;
6452: PPOPN 4
6454: END
// every 1 1$0 trigger secondPass = 2 do
6455: LD_EXP 28
6459: PUSH
6460: LD_INT 2
6462: EQUAL
6463: IFFALSE 6590
6465: GO 6467
6467: DISABLE
// begin PowellSupport1 ;
6468: CALL 1763 0 0
// DialogueOn ;
6472: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6476: LD_EXP 1
6480: PPUSH
6481: LD_STRING DC1-JMM-1
6483: PPUSH
6484: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6488: LD_EXP 22
6492: PPUSH
6493: LD_STRING DC1-Pow-1
6495: PPUSH
6496: CALL_OW 94
// DialogueOff ;
6500: CALL_OW 7
// wait ( 3 3$0 ) ;
6504: LD_INT 6300
6506: PPUSH
6507: CALL_OW 67
// PowellSupport2 ;
6511: CALL 2222 0 0
// DialogueOn ;
6515: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6519: LD_EXP 1
6523: PPUSH
6524: LD_STRING DC2-JMM-1
6526: PPUSH
6527: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6531: LD_EXP 22
6535: PPUSH
6536: LD_STRING DC2-Pow-1
6538: PPUSH
6539: CALL_OW 94
// DialogueOff ;
6543: CALL_OW 7
// wait ( 6 6$0 ) ;
6547: LD_INT 12600
6549: PPUSH
6550: CALL_OW 67
// PowellSupport3 ;
6554: CALL 2756 0 0
// DialogueOn ;
6558: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6562: LD_EXP 22
6566: PPUSH
6567: LD_STRING DC3-Pow-1
6569: PPUSH
6570: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6574: LD_EXP 1
6578: PPUSH
6579: LD_STRING DC3-JMM-1
6581: PPUSH
6582: CALL_OW 88
// DialogueOff ;
6586: CALL_OW 7
// end ;
6590: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6591: LD_EXP 28
6595: PUSH
6596: LD_INT 2
6598: EQUAL
6599: PUSH
6600: LD_INT 22
6602: PUSH
6603: LD_INT 1
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 30
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 30
6625: PUSH
6626: LD_INT 1
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: PUSH
6647: LD_INT 0
6649: GREATER
6650: AND
6651: IFFALSE 10019
6653: GO 6655
6655: DISABLE
6656: LD_INT 0
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6666: LD_ADDR_VAR 0 4
6670: PUSH
6671: LD_INT 22
6673: PUSH
6674: LD_INT 1
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 21
6683: PUSH
6684: LD_INT 3
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 30
6696: PUSH
6697: LD_INT 0
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 30
6706: PUSH
6707: LD_INT 1
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 69
6728: ST_TO_ADDR
// for i in tmp do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6773
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6742: LD_ADDR_VAR 0 6
6746: PUSH
6747: LD_VAR 0 6
6751: PUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: CALL_OW 274
6761: PPUSH
6762: LD_INT 1
6764: PPUSH
6765: CALL_OW 275
6769: PLUS
6770: ST_TO_ADDR
6771: GO 6739
6773: POP
6774: POP
// for i in tmp do
6775: LD_ADDR_VAR 0 1
6779: PUSH
6780: LD_VAR 0 4
6784: PUSH
6785: FOR_IN
6786: IFFALSE 6819
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6788: LD_ADDR_VAR 0 7
6792: PUSH
6793: LD_VAR 0 7
6797: PUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 274
6807: PPUSH
6808: LD_INT 2
6810: PPUSH
6811: CALL_OW 275
6815: PLUS
6816: ST_TO_ADDR
6817: GO 6785
6819: POP
6820: POP
// for i in tmp do
6821: LD_ADDR_VAR 0 1
6825: PUSH
6826: LD_VAR 0 4
6830: PUSH
6831: FOR_IN
6832: IFFALSE 6865
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6834: LD_ADDR_VAR 0 8
6838: PUSH
6839: LD_VAR 0 8
6843: PUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 274
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: CALL_OW 275
6861: PLUS
6862: ST_TO_ADDR
6863: GO 6831
6865: POP
6866: POP
// PrepareKurt ;
6867: CALL 4183 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6871: LD_EXP 26
6875: PPUSH
6876: LD_INT 144
6878: PPUSH
6879: LD_INT 111
6881: PPUSH
6882: CALL_OW 111
// wait ( 0 0$2 ) ;
6886: LD_INT 70
6888: PPUSH
6889: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6893: LD_INT 8
6895: PPUSH
6896: LD_INT 1
6898: PPUSH
6899: CALL_OW 343
// if kurtStatus > 0 then
6903: LD_EXP 27
6907: PUSH
6908: LD_INT 0
6910: GREATER
6911: IFFALSE 8474
// begin ComExitVehicle ( Kurt ) ;
6913: LD_EXP 24
6917: PPUSH
6918: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6922: LD_EXP 24
6926: PPUSH
6927: CALL_OW 87
// wait ( 0 0$1 ) ;
6931: LD_INT 35
6933: PPUSH
6934: CALL_OW 67
// DialogueOn ;
6938: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6942: LD_INT 22
6944: PUSH
6945: LD_INT 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 26
6954: PUSH
6955: LD_INT 1
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: LD_INT 25
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 25
6977: PUSH
6978: LD_INT 2
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 25
6987: PUSH
6988: LD_INT 3
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 25
6997: PUSH
6998: LD_INT 4
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 25
7007: PUSH
7008: LD_INT 5
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 25
7017: PUSH
7018: LD_INT 8
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PPUSH
7044: LD_STRING D3-Sol1-1
7046: PPUSH
7047: LD_STRING 
7049: PPUSH
7050: CALL 13291 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7054: LD_EXP 24
7058: PPUSH
7059: LD_STRING D3-Kurt-1
7061: PPUSH
7062: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7066: LD_EXP 1
7070: PPUSH
7071: LD_STRING D3-JMM-1
7073: PPUSH
7074: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7078: LD_EXP 24
7082: PPUSH
7083: LD_STRING D3-Kurt-2
7085: PPUSH
7086: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7090: LD_EXP 1
7094: PPUSH
7095: LD_STRING D3-JMM-2
7097: PPUSH
7098: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7102: LD_EXP 24
7106: PPUSH
7107: LD_STRING D3-Kurt-4
7109: PPUSH
7110: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7114: LD_EXP 1
7118: PPUSH
7119: LD_STRING D3-JMM-4
7121: PPUSH
7122: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7126: LD_EXP 24
7130: PPUSH
7131: LD_STRING D3-Kurt-5
7133: PPUSH
7134: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7138: LD_EXP 24
7142: PPUSH
7143: LD_STRING D3-Kurt-5a
7145: PPUSH
7146: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7150: LD_VAR 0 6
7154: PUSH
7155: LD_INT 60
7157: GREATEREQUAL
7158: PUSH
7159: LD_VAR 0 8
7163: PUSH
7164: LD_INT 60
7166: GREATEREQUAL
7167: AND
7168: IFFALSE 7203
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7170: LD_ADDR_VAR 0 2
7174: PUSH
7175: LD_STRING Q2K
7177: PPUSH
7178: LD_INT 1
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 4
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PPUSH
7196: CALL_OW 98
7200: ST_TO_ADDR
7201: GO 7226
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7203: LD_ADDR_VAR 0 2
7207: PUSH
7208: LD_STRING Q2K
7210: PPUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 4
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 98
7225: ST_TO_ADDR
// if dec1 = 1 then
7226: LD_VAR 0 2
7230: PUSH
7231: LD_INT 1
7233: EQUAL
7234: IFFALSE 7268
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7236: LD_EXP 1
7240: PPUSH
7241: LD_STRING D3Ka-JMM-1
7243: PPUSH
7244: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7248: LD_EXP 24
7252: PPUSH
7253: LD_STRING D3Ka-Kurt-1
7255: PPUSH
7256: CALL_OW 88
// warWithLegion = 1 ;
7260: LD_ADDR_EXP 31
7264: PUSH
7265: LD_INT 1
7267: ST_TO_ADDR
// end ; if dec1 = 2 then
7268: LD_VAR 0 2
7272: PUSH
7273: LD_INT 2
7275: EQUAL
7276: IFFALSE 7502
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7278: LD_EXP 1
7282: PPUSH
7283: LD_STRING D3Kb-JMM-1
7285: PPUSH
7286: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7290: LD_EXP 24
7294: PPUSH
7295: LD_STRING D3Kb-Kurt-1
7297: PPUSH
7298: CALL_OW 88
// for i in tmp do
7302: LD_ADDR_VAR 0 1
7306: PUSH
7307: LD_VAR 0 4
7311: PUSH
7312: FOR_IN
7313: IFFALSE 7400
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7315: LD_ADDR_VAR 0 5
7319: PUSH
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 274
7329: PPUSH
7330: LD_INT 1
7332: PPUSH
7333: CALL_OW 275
7337: ST_TO_ADDR
// if tmp2 >= 60 then
7338: LD_VAR 0 5
7342: PUSH
7343: LD_INT 60
7345: GREATEREQUAL
7346: IFFALSE 7378
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 274
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: LD_VAR 0 5
7365: PUSH
7366: LD_INT 60
7368: MINUS
7369: PPUSH
7370: CALL_OW 277
// break ;
7374: GO 7400
// end else
7376: GO 7398
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7378: LD_VAR 0 1
7382: PPUSH
7383: CALL_OW 274
7387: PPUSH
7388: LD_INT 1
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL_OW 277
// end ; end ;
7398: GO 7312
7400: POP
7401: POP
// for i in tmp do
7402: LD_ADDR_VAR 0 1
7406: PUSH
7407: LD_VAR 0 4
7411: PUSH
7412: FOR_IN
7413: IFFALSE 7500
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7415: LD_ADDR_VAR 0 5
7419: PUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 274
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: CALL_OW 275
7437: ST_TO_ADDR
// if tmp2 >= 60 then
7438: LD_VAR 0 5
7442: PUSH
7443: LD_INT 60
7445: GREATEREQUAL
7446: IFFALSE 7478
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7448: LD_VAR 0 1
7452: PPUSH
7453: CALL_OW 274
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: LD_VAR 0 5
7465: PUSH
7466: LD_INT 60
7468: MINUS
7469: PPUSH
7470: CALL_OW 277
// break ;
7474: GO 7500
// end else
7476: GO 7498
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 274
7487: PPUSH
7488: LD_INT 3
7490: PPUSH
7491: LD_INT 0
7493: PPUSH
7494: CALL_OW 277
// end ; end ;
7498: GO 7412
7500: POP
7501: POP
// end ; if dec1 = 3 then
7502: LD_VAR 0 2
7506: PUSH
7507: LD_INT 3
7509: EQUAL
7510: IFFALSE 7745
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7512: LD_EXP 1
7516: PPUSH
7517: LD_STRING D3Kc1-JMM-1
7519: PPUSH
7520: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7524: LD_EXP 24
7528: PPUSH
7529: LD_STRING D3Kc1-Kurt-1
7531: PPUSH
7532: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7536: LD_EXP 1
7540: PPUSH
7541: LD_STRING D3Kc1-JMM-2
7543: PPUSH
7544: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7548: LD_EXP 24
7552: PPUSH
7553: LD_STRING D3Kc1-Kurt-2
7555: PPUSH
7556: CALL_OW 88
// askSiberite = 1 ;
7560: LD_ADDR_EXP 33
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7568: LD_ADDR_VAR 0 2
7572: PUSH
7573: LD_STRING Q2b
7575: PPUSH
7576: LD_INT 1
7578: PUSH
7579: LD_INT 2
7581: PUSH
7582: LD_INT 3
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 98
7594: ST_TO_ADDR
// if dec2 = 1 then
7595: LD_VAR 0 3
7599: PUSH
7600: LD_INT 1
7602: EQUAL
7603: IFFALSE 7637
// begin Say ( JMM , D4a-JMM-1 ) ;
7605: LD_EXP 1
7609: PPUSH
7610: LD_STRING D4a-JMM-1
7612: PPUSH
7613: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7617: LD_EXP 24
7621: PPUSH
7622: LD_STRING D4b-Kurt-1
7624: PPUSH
7625: CALL_OW 88
// warWithLegion = 1 ;
7629: LD_ADDR_EXP 31
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// end ; if dec2 = 2 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 2
7644: EQUAL
7645: IFFALSE 7679
// begin Say ( JMM , D4b-JMM-1 ) ;
7647: LD_EXP 1
7651: PPUSH
7652: LD_STRING D4b-JMM-1
7654: PPUSH
7655: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7659: LD_EXP 24
7663: PPUSH
7664: LD_STRING D4b-Kurt-1
7666: PPUSH
7667: CALL_OW 88
// warWithLegion = 1 ;
7671: LD_ADDR_EXP 31
7675: PUSH
7676: LD_INT 1
7678: ST_TO_ADDR
// end ; if dec2 = 3 then
7679: LD_VAR 0 3
7683: PUSH
7684: LD_INT 3
7686: EQUAL
7687: IFFALSE 7745
// begin Say ( JMM , D4c-JMM-1 ) ;
7689: LD_EXP 1
7693: PPUSH
7694: LD_STRING D4c-JMM-1
7696: PPUSH
7697: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7701: LD_EXP 24
7705: PPUSH
7706: LD_STRING D4c-Kurt-1
7708: PPUSH
7709: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7713: LD_EXP 1
7717: PPUSH
7718: LD_STRING D4c-JMM-2
7720: PPUSH
7721: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7725: LD_EXP 24
7729: PPUSH
7730: LD_STRING D4c-Kurt-2
7732: PPUSH
7733: CALL_OW 88
// fakeInfo = 1 ;
7737: LD_ADDR_EXP 32
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7745: LD_VAR 0 2
7749: PUSH
7750: LD_INT 4
7752: EQUAL
7753: IFFALSE 8410
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7755: LD_EXP 1
7759: PPUSH
7760: LD_STRING D3Kd-JMM-1
7762: PPUSH
7763: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7767: LD_VAR 0 6
7771: PUSH
7772: LD_INT 120
7774: GREATEREQUAL
7775: PUSH
7776: LD_VAR 0 8
7780: PUSH
7781: LD_INT 120
7783: GREATEREQUAL
7784: AND
7785: IFFALSE 7820
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7787: LD_ADDR_VAR 0 3
7791: PUSH
7792: LD_STRING Q2aK
7794: PPUSH
7795: LD_INT 1
7797: PUSH
7798: LD_INT 2
7800: PUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 4
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PPUSH
7813: CALL_OW 98
7817: ST_TO_ADDR
7818: GO 7843
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_STRING Q2K
7827: PPUSH
7828: LD_INT 1
7830: PUSH
7831: LD_INT 4
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 98
7842: ST_TO_ADDR
// if dec2 = 1 then
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 1
7850: EQUAL
7851: IFFALSE 7885
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7853: LD_EXP 1
7857: PPUSH
7858: LD_STRING D5Ka-JMM-1
7860: PPUSH
7861: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7865: LD_EXP 24
7869: PPUSH
7870: LD_STRING D5Ka-Kurt-1
7872: PPUSH
7873: CALL_OW 88
// warWithLegion = 1 ;
7877: LD_ADDR_EXP 31
7881: PUSH
7882: LD_INT 1
7884: ST_TO_ADDR
// end ; if dec2 = 2 then
7885: LD_VAR 0 3
7889: PUSH
7890: LD_INT 2
7892: EQUAL
7893: IFFALSE 7919
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7895: LD_EXP 1
7899: PPUSH
7900: LD_STRING D3Kb-JMM-1
7902: PPUSH
7903: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7907: LD_EXP 24
7911: PPUSH
7912: LD_STRING D3Kb-Kurt-1
7914: PPUSH
7915: CALL_OW 88
// end ; if dec2 = 3 then
7919: LD_VAR 0 3
7923: PUSH
7924: LD_INT 3
7926: EQUAL
7927: IFFALSE 8157
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7929: LD_EXP 1
7933: PPUSH
7934: LD_STRING D3Ke-JMM-1
7936: PPUSH
7937: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7941: LD_EXP 24
7945: PPUSH
7946: LD_STRING D3Ke-Kurt-1
7948: PPUSH
7949: CALL_OW 88
// PrepareLegionForPlayer ;
7953: CALL 4371 0 0
// for i in tmp do
7957: LD_ADDR_VAR 0 1
7961: PUSH
7962: LD_VAR 0 4
7966: PUSH
7967: FOR_IN
7968: IFFALSE 8055
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7970: LD_ADDR_VAR 0 5
7974: PUSH
7975: LD_VAR 0 1
7979: PPUSH
7980: CALL_OW 274
7984: PPUSH
7985: LD_INT 1
7987: PPUSH
7988: CALL_OW 275
7992: ST_TO_ADDR
// if tmp2 >= 120 then
7993: LD_VAR 0 5
7997: PUSH
7998: LD_INT 120
8000: GREATEREQUAL
8001: IFFALSE 8033
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 274
8012: PPUSH
8013: LD_INT 1
8015: PPUSH
8016: LD_VAR 0 5
8020: PUSH
8021: LD_INT 120
8023: MINUS
8024: PPUSH
8025: CALL_OW 277
// break ;
8029: GO 8055
// end else
8031: GO 8053
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8033: LD_VAR 0 1
8037: PPUSH
8038: CALL_OW 274
8042: PPUSH
8043: LD_INT 1
8045: PPUSH
8046: LD_INT 0
8048: PPUSH
8049: CALL_OW 277
// end ; end ;
8053: GO 7967
8055: POP
8056: POP
// for i in tmp do
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: LD_VAR 0 4
8066: PUSH
8067: FOR_IN
8068: IFFALSE 8155
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8070: LD_ADDR_VAR 0 5
8074: PUSH
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 274
8084: PPUSH
8085: LD_INT 3
8087: PPUSH
8088: CALL_OW 275
8092: ST_TO_ADDR
// if tmp2 >= 120 then
8093: LD_VAR 0 5
8097: PUSH
8098: LD_INT 120
8100: GREATEREQUAL
8101: IFFALSE 8133
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 274
8112: PPUSH
8113: LD_INT 3
8115: PPUSH
8116: LD_VAR 0 5
8120: PUSH
8121: LD_INT 120
8123: MINUS
8124: PPUSH
8125: CALL_OW 277
// break ;
8129: GO 8155
// end else
8131: GO 8153
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL_OW 274
8142: PPUSH
8143: LD_INT 3
8145: PPUSH
8146: LD_INT 0
8148: PPUSH
8149: CALL_OW 277
// end ; end ;
8153: GO 8067
8155: POP
8156: POP
// end ; if dec2 = 4 then
8157: LD_VAR 0 3
8161: PUSH
8162: LD_INT 4
8164: EQUAL
8165: IFFALSE 8410
// begin if dec1 = 3 then
8167: LD_VAR 0 2
8171: PUSH
8172: LD_INT 3
8174: EQUAL
8175: IFFALSE 8410
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8177: LD_EXP 1
8181: PPUSH
8182: LD_STRING D3Kc1-JMM-1
8184: PPUSH
8185: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8189: LD_EXP 24
8193: PPUSH
8194: LD_STRING D3Kc1-Kurt-1
8196: PPUSH
8197: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8201: LD_EXP 1
8205: PPUSH
8206: LD_STRING D3Kc1-JMM-2
8208: PPUSH
8209: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8213: LD_EXP 24
8217: PPUSH
8218: LD_STRING D3Kc1-Kurt-2
8220: PPUSH
8221: CALL_OW 88
// askSiberite = 1 ;
8225: LD_ADDR_EXP 33
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8233: LD_ADDR_VAR 0 2
8237: PUSH
8238: LD_STRING Q2b
8240: PPUSH
8241: LD_INT 1
8243: PUSH
8244: LD_INT 2
8246: PUSH
8247: LD_INT 3
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: PPUSH
8255: CALL_OW 98
8259: ST_TO_ADDR
// if dec2 = 1 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 1
8267: EQUAL
8268: IFFALSE 8302
// begin Say ( JMM , D4a-JMM-1 ) ;
8270: LD_EXP 1
8274: PPUSH
8275: LD_STRING D4a-JMM-1
8277: PPUSH
8278: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8282: LD_EXP 24
8286: PPUSH
8287: LD_STRING D4b-Kurt-1
8289: PPUSH
8290: CALL_OW 88
// warWithLegion = 1 ;
8294: LD_ADDR_EXP 31
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// end ; if dec2 = 2 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 2
8309: EQUAL
8310: IFFALSE 8344
// begin Say ( JMM , D4b-JMM-1 ) ;
8312: LD_EXP 1
8316: PPUSH
8317: LD_STRING D4b-JMM-1
8319: PPUSH
8320: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8324: LD_EXP 24
8328: PPUSH
8329: LD_STRING D4b-Kurt-1
8331: PPUSH
8332: CALL_OW 88
// warWithLegion = 1 ;
8336: LD_ADDR_EXP 31
8340: PUSH
8341: LD_INT 1
8343: ST_TO_ADDR
// end ; if dec2 = 3 then
8344: LD_VAR 0 3
8348: PUSH
8349: LD_INT 3
8351: EQUAL
8352: IFFALSE 8410
// begin Say ( JMM , D4c-JMM-1 ) ;
8354: LD_EXP 1
8358: PPUSH
8359: LD_STRING D4c-JMM-1
8361: PPUSH
8362: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8366: LD_EXP 24
8370: PPUSH
8371: LD_STRING D4c-Kurt-1
8373: PPUSH
8374: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8378: LD_EXP 1
8382: PPUSH
8383: LD_STRING D4c-JMM-2
8385: PPUSH
8386: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8390: LD_EXP 24
8394: PPUSH
8395: LD_STRING D4c-Kurt-2
8397: PPUSH
8398: CALL_OW 88
// fakeInfo = 1 ;
8402: LD_ADDR_EXP 32
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8410: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8414: LD_EXP 24
8418: PPUSH
8419: LD_EXP 26
8423: PPUSH
8424: CALL_OW 120
// wait ( 0 0$1 ) ;
8428: LD_INT 35
8430: PPUSH
8431: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8435: LD_EXP 26
8439: PPUSH
8440: LD_INT 4
8442: PPUSH
8443: CALL_OW 113
// wait ( 0 0$3 ) ;
8447: LD_INT 105
8449: PPUSH
8450: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8454: LD_EXP 24
8458: PPUSH
8459: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8463: LD_EXP 26
8467: PPUSH
8468: CALL_OW 64
// end else
8472: GO 10019
// begin ComExitVehicle ( otherKurt ) ;
8474: LD_EXP 25
8478: PPUSH
8479: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8483: LD_EXP 25
8487: PPUSH
8488: CALL_OW 87
// wait ( 0 0$1 ) ;
8492: LD_INT 35
8494: PPUSH
8495: CALL_OW 67
// DialogueOn ;
8499: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8503: LD_INT 22
8505: PUSH
8506: LD_INT 1
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: LD_INT 25
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 25
8538: PUSH
8539: LD_INT 2
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: LD_INT 25
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 25
8558: PUSH
8559: LD_INT 4
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 25
8568: PUSH
8569: LD_INT 5
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 25
8578: PUSH
8579: LD_INT 8
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 69
8604: PPUSH
8605: LD_STRING D3-Sol1-1
8607: PPUSH
8608: LD_STRING 
8610: PPUSH
8611: CALL 13291 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8615: LD_EXP 25
8619: PPUSH
8620: LD_STRING D3-Kurt-1
8622: PPUSH
8623: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8627: LD_EXP 1
8631: PPUSH
8632: LD_STRING D3-JMM-1
8634: PPUSH
8635: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8639: LD_EXP 25
8643: PPUSH
8644: LD_STRING D3-Kurt-3
8646: PPUSH
8647: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8651: LD_EXP 1
8655: PPUSH
8656: LD_STRING D3-JMM-3
8658: PPUSH
8659: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8663: LD_EXP 25
8667: PPUSH
8668: LD_STRING D3-Kurt-5
8670: PPUSH
8671: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8675: LD_EXP 25
8679: PPUSH
8680: LD_STRING D3-Kurt-5b
8682: PPUSH
8683: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8687: LD_VAR 0 6
8691: PUSH
8692: LD_INT 100
8694: GREATEREQUAL
8695: PUSH
8696: LD_VAR 0 8
8700: PUSH
8701: LD_INT 100
8703: GREATEREQUAL
8704: AND
8705: IFFALSE 8740
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8707: LD_ADDR_VAR 0 2
8711: PUSH
8712: LD_STRING Q2
8714: PPUSH
8715: LD_INT 1
8717: PUSH
8718: LD_INT 2
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 98
8737: ST_TO_ADDR
8738: GO 8763
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8740: LD_ADDR_VAR 0 2
8744: PUSH
8745: LD_STRING Q2
8747: PPUSH
8748: LD_INT 3
8750: PUSH
8751: LD_INT 4
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 98
8762: ST_TO_ADDR
// if dec1 = 1 then
8763: LD_VAR 0 2
8767: PUSH
8768: LD_INT 1
8770: EQUAL
8771: IFFALSE 8805
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8773: LD_EXP 1
8777: PPUSH
8778: LD_STRING D3Ka-JMM-1
8780: PPUSH
8781: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8785: LD_EXP 25
8789: PPUSH
8790: LD_STRING D3Ka-Kurt-1
8792: PPUSH
8793: CALL_OW 88
// warWithLegion = 1 ;
8797: LD_ADDR_EXP 31
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// end ; if dec1 = 2 then
8805: LD_VAR 0 2
8809: PUSH
8810: LD_INT 2
8812: EQUAL
8813: IFFALSE 9039
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8815: LD_EXP 1
8819: PPUSH
8820: LD_STRING D3Kb-JMM-1
8822: PPUSH
8823: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8827: LD_EXP 25
8831: PPUSH
8832: LD_STRING D3Kb-Kurt-1
8834: PPUSH
8835: CALL_OW 88
// for i in tmp do
8839: LD_ADDR_VAR 0 1
8843: PUSH
8844: LD_VAR 0 4
8848: PUSH
8849: FOR_IN
8850: IFFALSE 8937
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8852: LD_ADDR_VAR 0 5
8856: PUSH
8857: LD_VAR 0 1
8861: PPUSH
8862: CALL_OW 274
8866: PPUSH
8867: LD_INT 1
8869: PPUSH
8870: CALL_OW 275
8874: ST_TO_ADDR
// if tmp2 >= 100 then
8875: LD_VAR 0 5
8879: PUSH
8880: LD_INT 100
8882: GREATEREQUAL
8883: IFFALSE 8915
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 274
8894: PPUSH
8895: LD_INT 1
8897: PPUSH
8898: LD_VAR 0 5
8902: PUSH
8903: LD_INT 100
8905: MINUS
8906: PPUSH
8907: CALL_OW 277
// break ;
8911: GO 8937
// end else
8913: GO 8935
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 274
8924: PPUSH
8925: LD_INT 1
8927: PPUSH
8928: LD_INT 0
8930: PPUSH
8931: CALL_OW 277
// end ; end ;
8935: GO 8849
8937: POP
8938: POP
// for i in tmp do
8939: LD_ADDR_VAR 0 1
8943: PUSH
8944: LD_VAR 0 4
8948: PUSH
8949: FOR_IN
8950: IFFALSE 9037
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8952: LD_ADDR_VAR 0 5
8956: PUSH
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 274
8966: PPUSH
8967: LD_INT 3
8969: PPUSH
8970: CALL_OW 275
8974: ST_TO_ADDR
// if tmp2 >= 100 then
8975: LD_VAR 0 5
8979: PUSH
8980: LD_INT 100
8982: GREATEREQUAL
8983: IFFALSE 9015
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 274
8994: PPUSH
8995: LD_INT 3
8997: PPUSH
8998: LD_VAR 0 5
9002: PUSH
9003: LD_INT 100
9005: MINUS
9006: PPUSH
9007: CALL_OW 277
// break ;
9011: GO 9037
// end else
9013: GO 9035
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 274
9024: PPUSH
9025: LD_INT 3
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 277
// end ; end ;
9035: GO 8949
9037: POP
9038: POP
// end ; if dec1 = 3 then
9039: LD_VAR 0 2
9043: PUSH
9044: LD_INT 3
9046: EQUAL
9047: IFFALSE 9282
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_STRING D3Kc1-JMM-1
9056: PPUSH
9057: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9061: LD_EXP 25
9065: PPUSH
9066: LD_STRING D3Kc1-Kurt-1
9068: PPUSH
9069: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9073: LD_EXP 1
9077: PPUSH
9078: LD_STRING D3Kc1-JMM-2
9080: PPUSH
9081: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9085: LD_EXP 25
9089: PPUSH
9090: LD_STRING D3Kc1-Kurt-2
9092: PPUSH
9093: CALL_OW 88
// askSiberite = 1 ;
9097: LD_ADDR_EXP 33
9101: PUSH
9102: LD_INT 1
9104: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9105: LD_ADDR_VAR 0 2
9109: PUSH
9110: LD_STRING Q2b
9112: PPUSH
9113: LD_INT 1
9115: PUSH
9116: LD_INT 2
9118: PUSH
9119: LD_INT 3
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 98
9131: ST_TO_ADDR
// if dec2 = 1 then
9132: LD_VAR 0 3
9136: PUSH
9137: LD_INT 1
9139: EQUAL
9140: IFFALSE 9174
// begin Say ( JMM , D4a-JMM-1 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_STRING D4a-JMM-1
9149: PPUSH
9150: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9154: LD_EXP 25
9158: PPUSH
9159: LD_STRING D4b-Kurt-1
9161: PPUSH
9162: CALL_OW 88
// warWithLegion = 1 ;
9166: LD_ADDR_EXP 31
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// end ; if dec2 = 2 then
9174: LD_VAR 0 3
9178: PUSH
9179: LD_INT 2
9181: EQUAL
9182: IFFALSE 9216
// begin Say ( JMM , D4b-JMM-1 ) ;
9184: LD_EXP 1
9188: PPUSH
9189: LD_STRING D4b-JMM-1
9191: PPUSH
9192: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9196: LD_EXP 25
9200: PPUSH
9201: LD_STRING D4b-Kurt-1
9203: PPUSH
9204: CALL_OW 88
// warWithLegion = 1 ;
9208: LD_ADDR_EXP 31
9212: PUSH
9213: LD_INT 1
9215: ST_TO_ADDR
// end ; if dec2 = 3 then
9216: LD_VAR 0 3
9220: PUSH
9221: LD_INT 3
9223: EQUAL
9224: IFFALSE 9282
// begin Say ( JMM , D4c-JMM-1 ) ;
9226: LD_EXP 1
9230: PPUSH
9231: LD_STRING D4c-JMM-1
9233: PPUSH
9234: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9238: LD_EXP 25
9242: PPUSH
9243: LD_STRING D4c-Kurt-1
9245: PPUSH
9246: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9250: LD_EXP 1
9254: PPUSH
9255: LD_STRING D4c-JMM-2
9257: PPUSH
9258: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9262: LD_EXP 25
9266: PPUSH
9267: LD_STRING D4c-Kurt-2
9269: PPUSH
9270: CALL_OW 88
// fakeInfo = 1 ;
9274: LD_ADDR_EXP 32
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9282: LD_VAR 0 2
9286: PUSH
9287: LD_INT 4
9289: EQUAL
9290: IFFALSE 9947
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9292: LD_EXP 1
9296: PPUSH
9297: LD_STRING D3Kd-JMM-1
9299: PPUSH
9300: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_INT 200
9311: GREATEREQUAL
9312: PUSH
9313: LD_VAR 0 8
9317: PUSH
9318: LD_INT 200
9320: GREATEREQUAL
9321: AND
9322: IFFALSE 9357
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9324: LD_ADDR_VAR 0 3
9328: PUSH
9329: LD_STRING Q2a
9331: PPUSH
9332: LD_INT 1
9334: PUSH
9335: LD_INT 2
9337: PUSH
9338: LD_INT 3
9340: PUSH
9341: LD_INT 4
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 98
9354: ST_TO_ADDR
9355: GO 9380
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9357: LD_ADDR_VAR 0 3
9361: PUSH
9362: LD_STRING Q2a
9364: PPUSH
9365: LD_INT 1
9367: PUSH
9368: LD_INT 4
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PPUSH
9375: CALL_OW 98
9379: ST_TO_ADDR
// if dec2 = 1 then
9380: LD_VAR 0 3
9384: PUSH
9385: LD_INT 1
9387: EQUAL
9388: IFFALSE 9422
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9390: LD_EXP 1
9394: PPUSH
9395: LD_STRING D5Ka-JMM-1
9397: PPUSH
9398: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9402: LD_EXP 25
9406: PPUSH
9407: LD_STRING D5Ka-Kurt-1
9409: PPUSH
9410: CALL_OW 88
// warWithLegion = 1 ;
9414: LD_ADDR_EXP 31
9418: PUSH
9419: LD_INT 1
9421: ST_TO_ADDR
// end ; if dec2 = 2 then
9422: LD_VAR 0 3
9426: PUSH
9427: LD_INT 2
9429: EQUAL
9430: IFFALSE 9456
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9432: LD_EXP 1
9436: PPUSH
9437: LD_STRING D3Kb-JMM-1
9439: PPUSH
9440: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9444: LD_EXP 25
9448: PPUSH
9449: LD_STRING D3Kb-Kurt-1
9451: PPUSH
9452: CALL_OW 88
// end ; if dec2 = 3 then
9456: LD_VAR 0 3
9460: PUSH
9461: LD_INT 3
9463: EQUAL
9464: IFFALSE 9694
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9466: LD_EXP 1
9470: PPUSH
9471: LD_STRING D3Ke-JMM-1
9473: PPUSH
9474: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9478: LD_EXP 25
9482: PPUSH
9483: LD_STRING D3Ke-Kurt-1
9485: PPUSH
9486: CALL_OW 88
// PrepareLegionForPlayer ;
9490: CALL 4371 0 0
// for i in tmp do
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_VAR 0 4
9503: PUSH
9504: FOR_IN
9505: IFFALSE 9592
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9507: LD_ADDR_VAR 0 5
9511: PUSH
9512: LD_VAR 0 1
9516: PPUSH
9517: CALL_OW 274
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 275
9529: ST_TO_ADDR
// if tmp2 >= 200 then
9530: LD_VAR 0 5
9534: PUSH
9535: LD_INT 200
9537: GREATEREQUAL
9538: IFFALSE 9570
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9540: LD_VAR 0 1
9544: PPUSH
9545: CALL_OW 274
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: LD_VAR 0 5
9557: PUSH
9558: LD_INT 200
9560: MINUS
9561: PPUSH
9562: CALL_OW 277
// break ;
9566: GO 9592
// end else
9568: GO 9590
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 274
9579: PPUSH
9580: LD_INT 1
9582: PPUSH
9583: LD_INT 0
9585: PPUSH
9586: CALL_OW 277
// end ; end ;
9590: GO 9504
9592: POP
9593: POP
// for i in tmp do
9594: LD_ADDR_VAR 0 1
9598: PUSH
9599: LD_VAR 0 4
9603: PUSH
9604: FOR_IN
9605: IFFALSE 9692
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9607: LD_ADDR_VAR 0 5
9611: PUSH
9612: LD_VAR 0 1
9616: PPUSH
9617: CALL_OW 274
9621: PPUSH
9622: LD_INT 3
9624: PPUSH
9625: CALL_OW 275
9629: ST_TO_ADDR
// if tmp2 >= 200 then
9630: LD_VAR 0 5
9634: PUSH
9635: LD_INT 200
9637: GREATEREQUAL
9638: IFFALSE 9670
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9640: LD_VAR 0 1
9644: PPUSH
9645: CALL_OW 274
9649: PPUSH
9650: LD_INT 3
9652: PPUSH
9653: LD_VAR 0 5
9657: PUSH
9658: LD_INT 200
9660: MINUS
9661: PPUSH
9662: CALL_OW 277
// break ;
9666: GO 9692
// end else
9668: GO 9690
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9670: LD_VAR 0 1
9674: PPUSH
9675: CALL_OW 274
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 277
// end ; end ;
9690: GO 9604
9692: POP
9693: POP
// end ; if dec2 = 4 then
9694: LD_VAR 0 3
9698: PUSH
9699: LD_INT 4
9701: EQUAL
9702: IFFALSE 9947
// begin if dec1 = 3 then
9704: LD_VAR 0 2
9708: PUSH
9709: LD_INT 3
9711: EQUAL
9712: IFFALSE 9947
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9714: LD_EXP 1
9718: PPUSH
9719: LD_STRING D3Kc1-JMM-1
9721: PPUSH
9722: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9726: LD_EXP 25
9730: PPUSH
9731: LD_STRING D3Kc1-Kurt-1
9733: PPUSH
9734: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9738: LD_EXP 1
9742: PPUSH
9743: LD_STRING D3Kc1-JMM-2
9745: PPUSH
9746: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9750: LD_EXP 25
9754: PPUSH
9755: LD_STRING D3Kc1-Kurt-2
9757: PPUSH
9758: CALL_OW 88
// askSiberite = 1 ;
9762: LD_ADDR_EXP 33
9766: PUSH
9767: LD_INT 1
9769: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9770: LD_ADDR_VAR 0 2
9774: PUSH
9775: LD_STRING Q2b
9777: PPUSH
9778: LD_INT 1
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 98
9796: ST_TO_ADDR
// if dec2 = 1 then
9797: LD_VAR 0 3
9801: PUSH
9802: LD_INT 1
9804: EQUAL
9805: IFFALSE 9839
// begin Say ( JMM , D4a-JMM-1 ) ;
9807: LD_EXP 1
9811: PPUSH
9812: LD_STRING D4a-JMM-1
9814: PPUSH
9815: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9819: LD_EXP 25
9823: PPUSH
9824: LD_STRING D4b-Kurt-1
9826: PPUSH
9827: CALL_OW 88
// warWithLegion = 1 ;
9831: LD_ADDR_EXP 31
9835: PUSH
9836: LD_INT 1
9838: ST_TO_ADDR
// end ; if dec2 = 2 then
9839: LD_VAR 0 3
9843: PUSH
9844: LD_INT 2
9846: EQUAL
9847: IFFALSE 9881
// begin Say ( JMM , D4b-JMM-1 ) ;
9849: LD_EXP 1
9853: PPUSH
9854: LD_STRING D4b-JMM-1
9856: PPUSH
9857: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9861: LD_EXP 25
9865: PPUSH
9866: LD_STRING D4b-Kurt-1
9868: PPUSH
9869: CALL_OW 88
// warWithLegion = 1 ;
9873: LD_ADDR_EXP 31
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// end ; if dec2 = 3 then
9881: LD_VAR 0 3
9885: PUSH
9886: LD_INT 3
9888: EQUAL
9889: IFFALSE 9947
// begin Say ( JMM , D4c-JMM-1 ) ;
9891: LD_EXP 1
9895: PPUSH
9896: LD_STRING D4c-JMM-1
9898: PPUSH
9899: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9903: LD_EXP 25
9907: PPUSH
9908: LD_STRING D4c-Kurt-1
9910: PPUSH
9911: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9915: LD_EXP 1
9919: PPUSH
9920: LD_STRING D4c-JMM-2
9922: PPUSH
9923: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9927: LD_EXP 25
9931: PPUSH
9932: LD_STRING D4c-Kurt-2
9934: PPUSH
9935: CALL_OW 88
// fakeInfo = 1 ;
9939: LD_ADDR_EXP 32
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9947: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9951: LD_INT 8
9953: PPUSH
9954: LD_INT 8
9956: PPUSH
9957: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9961: LD_EXP 25
9965: PPUSH
9966: LD_EXP 26
9970: PPUSH
9971: CALL_OW 120
// wait ( 0 0$1 ) ;
9975: LD_INT 35
9977: PPUSH
9978: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9982: LD_EXP 26
9986: PPUSH
9987: LD_INT 4
9989: PPUSH
9990: CALL_OW 113
// wait ( 0 0$6 ) ;
9994: LD_INT 210
9996: PPUSH
9997: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10001: LD_EXP 25
10005: PPUSH
10006: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10010: LD_EXP 26
10014: PPUSH
10015: CALL_OW 64
// end ; end ;
10019: PPOPN 8
10021: END
// every 0 0$10 trigger warWithLegion = 1 do
10022: LD_EXP 31
10026: PUSH
10027: LD_INT 1
10029: EQUAL
10030: IFFALSE 10039
10032: GO 10034
10034: DISABLE
// PrepareAttackLegion ;
10035: CALL 5035 0 0
10039: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10040: LD_EXP 15
10044: PPUSH
10045: CALL_OW 305
10049: PUSH
10050: LD_EXP 15
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 289
10062: NOT
10063: AND
10064: PUSH
10065: LD_EXP 15
10069: PPUSH
10070: LD_INT 2
10072: PPUSH
10073: CALL_OW 289
10077: NOT
10078: AND
10079: PUSH
10080: LD_EXP 15
10084: PPUSH
10085: LD_INT 3
10087: PPUSH
10088: CALL_OW 289
10092: NOT
10093: AND
10094: IFFALSE 10111
10096: GO 10098
10098: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10099: LD_EXP 15
10103: PPUSH
10104: LD_INT 4
10106: PPUSH
10107: CALL_OW 235
10111: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10112: LD_EXP 16
10116: PPUSH
10117: CALL_OW 305
10121: PUSH
10122: LD_EXP 16
10126: PPUSH
10127: LD_INT 1
10129: PPUSH
10130: CALL_OW 289
10134: NOT
10135: AND
10136: PUSH
10137: LD_EXP 16
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: CALL_OW 289
10149: NOT
10150: AND
10151: PUSH
10152: LD_EXP 16
10156: PPUSH
10157: LD_INT 3
10159: PPUSH
10160: CALL_OW 289
10164: NOT
10165: AND
10166: IFFALSE 10183
10168: GO 10170
10170: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10171: LD_EXP 16
10175: PPUSH
10176: LD_INT 4
10178: PPUSH
10179: CALL_OW 235
10183: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10184: LD_EXP 17
10188: PPUSH
10189: CALL_OW 305
10193: PUSH
10194: LD_EXP 17
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: CALL_OW 289
10206: NOT
10207: AND
10208: PUSH
10209: LD_EXP 17
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: CALL_OW 289
10221: NOT
10222: AND
10223: PUSH
10224: LD_EXP 17
10228: PPUSH
10229: LD_INT 3
10231: PPUSH
10232: CALL_OW 289
10236: NOT
10237: AND
10238: IFFALSE 10255
10240: GO 10242
10242: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10243: LD_EXP 17
10247: PPUSH
10248: LD_INT 4
10250: PPUSH
10251: CALL_OW 235
10255: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10256: LD_EXP 18
10260: PPUSH
10261: CALL_OW 305
10265: PUSH
10266: LD_EXP 18
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL_OW 289
10278: NOT
10279: AND
10280: PUSH
10281: LD_EXP 18
10285: PPUSH
10286: LD_INT 2
10288: PPUSH
10289: CALL_OW 289
10293: NOT
10294: AND
10295: PUSH
10296: LD_EXP 18
10300: PPUSH
10301: LD_INT 3
10303: PPUSH
10304: CALL_OW 289
10308: NOT
10309: AND
10310: IFFALSE 10327
10312: GO 10314
10314: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10315: LD_EXP 18
10319: PPUSH
10320: LD_INT 4
10322: PPUSH
10323: CALL_OW 235
10327: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10328: LD_EXP 19
10332: PPUSH
10333: CALL_OW 305
10337: PUSH
10338: LD_EXP 19
10342: PPUSH
10343: LD_INT 1
10345: PPUSH
10346: CALL_OW 289
10350: NOT
10351: AND
10352: PUSH
10353: LD_EXP 19
10357: PPUSH
10358: LD_INT 2
10360: PPUSH
10361: CALL_OW 289
10365: NOT
10366: AND
10367: PUSH
10368: LD_EXP 19
10372: PPUSH
10373: LD_INT 3
10375: PPUSH
10376: CALL_OW 289
10380: NOT
10381: AND
10382: PUSH
10383: LD_EXP 19
10387: PPUSH
10388: LD_INT 2
10390: PPUSH
10391: CALL_OW 289
10395: NOT
10396: AND
10397: IFFALSE 10414
10399: GO 10401
10401: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10402: LD_EXP 19
10406: PPUSH
10407: LD_INT 4
10409: PPUSH
10410: CALL_OW 235
10414: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10415: LD_EXP 20
10419: PPUSH
10420: CALL_OW 305
10424: PUSH
10425: LD_EXP 20
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 289
10437: NOT
10438: AND
10439: PUSH
10440: LD_EXP 20
10444: PPUSH
10445: LD_INT 2
10447: PPUSH
10448: CALL_OW 289
10452: NOT
10453: AND
10454: PUSH
10455: LD_EXP 20
10459: PPUSH
10460: LD_INT 3
10462: PPUSH
10463: CALL_OW 289
10467: NOT
10468: AND
10469: IFFALSE 10486
10471: GO 10473
10473: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10474: LD_EXP 20
10478: PPUSH
10479: LD_INT 4
10481: PPUSH
10482: CALL_OW 235
10486: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10487: LD_EXP 21
10491: PPUSH
10492: CALL_OW 305
10496: PUSH
10497: LD_EXP 21
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: CALL_OW 289
10509: NOT
10510: AND
10511: PUSH
10512: LD_EXP 21
10516: PPUSH
10517: LD_INT 2
10519: PPUSH
10520: CALL_OW 289
10524: NOT
10525: AND
10526: PUSH
10527: LD_EXP 21
10531: PPUSH
10532: LD_INT 3
10534: PPUSH
10535: CALL_OW 289
10539: NOT
10540: AND
10541: IFFALSE 10558
10543: GO 10545
10545: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10546: LD_EXP 21
10550: PPUSH
10551: LD_INT 4
10553: PPUSH
10554: CALL_OW 235
10558: END
// every 0 0$1 do var i ;
10559: GO 10561
10561: DISABLE
10562: LD_INT 0
10564: PPUSH
// begin enable ;
10565: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10566: LD_ADDR_VAR 0 1
10570: PUSH
10571: LD_INT 22
10573: PUSH
10574: LD_INT 4
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PPUSH
10581: CALL_OW 69
10585: PUSH
10586: FOR_IN
10587: IFFALSE 10626
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_INT 4
10596: PPUSH
10597: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10601: LD_VAR 0 1
10605: PPUSH
10606: LD_INT 4
10608: PPUSH
10609: CALL_OW 308
10613: IFFALSE 10624
// RemoveUnit ( i ) ;
10615: LD_VAR 0 1
10619: PPUSH
10620: CALL_OW 64
// end ;
10624: GO 10586
10626: POP
10627: POP
// end ;
10628: PPOPN 1
10630: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10631: LD_EXP 28
10635: PUSH
10636: LD_INT 1
10638: EQUAL
10639: IFFALSE 11078
10641: GO 10643
10643: DISABLE
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
10648: PPUSH
// begin enable ;
10649: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10650: LD_ADDR_VAR 0 2
10654: PUSH
10655: LD_INT 12
10657: PPUSH
10658: LD_INT 22
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 21
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PPUSH
10682: CALL_OW 70
10686: ST_TO_ADDR
// for i in enemyVehs do
10687: LD_ADDR_VAR 0 1
10691: PUSH
10692: LD_VAR 0 2
10696: PUSH
10697: FOR_IN
10698: IFFALSE 11076
// begin if See ( 1 , i ) then
10700: LD_INT 1
10702: PPUSH
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 292
10712: IFFALSE 11074
// begin disable ;
10714: DISABLE
// DialogueOn ;
10715: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10728: LD_INT 22
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 26
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 2
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 1
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 3
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 4
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 5
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 8
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: PPUSH
10825: CALL_OW 69
10829: PPUSH
10830: LD_STRING DT1-Sol1-1
10832: PPUSH
10833: LD_STRING DT1-FSol1-1
10835: PPUSH
10836: CALL 13291 0 3
// dec = ShowQuery2 ;
10840: LD_ADDR_VAR 0 3
10844: PUSH
10845: CALL 13901 0 0
10849: ST_TO_ADDR
// if dec = 1 then
10850: LD_VAR 0 3
10854: PUSH
10855: LD_INT 1
10857: EQUAL
10858: IFFALSE 10964
// begin Say ( JMM , D2-JMM-1 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING D2-JMM-1
10867: PPUSH
10868: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10872: LD_EXP 22
10876: PPUSH
10877: LD_STRING D2-Pow-1
10879: PPUSH
10880: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10884: LD_EXP 1
10888: PPUSH
10889: LD_STRING D2a-JMM-1
10891: PPUSH
10892: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10896: LD_EXP 22
10900: PPUSH
10901: LD_STRING D2a-Pow-1
10903: PPUSH
10904: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10908: LD_EXP 1
10912: PPUSH
10913: LD_STRING D2a-JMM-2
10915: PPUSH
10916: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10920: LD_EXP 22
10924: PPUSH
10925: LD_STRING D2a-Pow-2
10927: PPUSH
10928: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10932: LD_EXP 1
10936: PPUSH
10937: LD_STRING D2a-JMM-3
10939: PPUSH
10940: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10944: LD_EXP 22
10948: PPUSH
10949: LD_STRING D2a-Pow-3
10951: PPUSH
10952: CALL_OW 94
// secondPass = 2 ;
10956: LD_ADDR_EXP 28
10960: PUSH
10961: LD_INT 2
10963: ST_TO_ADDR
// end ; if dec = 2 then
10964: LD_VAR 0 3
10968: PUSH
10969: LD_INT 2
10971: EQUAL
10972: IFFALSE 11066
// begin Say ( JMM , D2-JMM-1 ) ;
10974: LD_EXP 1
10978: PPUSH
10979: LD_STRING D2-JMM-1
10981: PPUSH
10982: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10986: LD_EXP 22
10990: PPUSH
10991: LD_STRING D2-Pow-1
10993: PPUSH
10994: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10998: LD_EXP 1
11002: PPUSH
11003: LD_STRING D2b-JMM-1
11005: PPUSH
11006: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11010: LD_EXP 22
11014: PPUSH
11015: LD_STRING D2b-Pow-1
11017: PPUSH
11018: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11022: LD_EXP 1
11026: PPUSH
11027: LD_STRING D2c-JMM-1
11029: PPUSH
11030: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11034: LD_EXP 22
11038: PPUSH
11039: LD_STRING D2c-Pow-1
11041: PPUSH
11042: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11046: LD_EXP 1
11050: PPUSH
11051: LD_STRING D2c-JMM-2
11053: PPUSH
11054: CALL_OW 88
// secondPass = 2 ;
11058: LD_ADDR_EXP 28
11062: PUSH
11063: LD_INT 2
11065: ST_TO_ADDR
// end ; DialogueOff ;
11066: CALL_OW 7
// exit ;
11070: POP
11071: POP
11072: GO 11078
// end ; end ;
11074: GO 10697
11076: POP
11077: POP
// end ;
11078: PPOPN 3
11080: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11081: LD_EXP 29
11085: PUSH
11086: LD_INT 1
11088: EQUAL
11089: IFFALSE 11322
11091: GO 11093
11093: DISABLE
11094: LD_INT 0
11096: PPUSH
11097: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11098: LD_ADDR_VAR 0 2
11102: PUSH
11103: LD_INT 11
11105: PPUSH
11106: LD_INT 22
11108: PUSH
11109: LD_INT 3
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 24
11118: PUSH
11119: LD_INT 250
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PPUSH
11130: CALL_OW 70
11134: ST_TO_ADDR
// enable ;
11135: ENABLE
// for i in vehicles do
11136: LD_ADDR_VAR 0 1
11140: PUSH
11141: LD_VAR 0 2
11145: PUSH
11146: FOR_IN
11147: IFFALSE 11320
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11149: LD_INT 1
11151: PPUSH
11152: LD_VAR 0 1
11156: PPUSH
11157: CALL_OW 292
11161: PUSH
11162: LD_EXP 29
11166: PUSH
11167: LD_INT 1
11169: EQUAL
11170: AND
11171: PUSH
11172: LD_EXP 30
11176: PUSH
11177: LD_INT 4
11179: LESSEQUAL
11180: AND
11181: IFFALSE 11318
// begin disable ;
11183: DISABLE
// DialogueOn ;
11184: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11188: LD_INT 22
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 26
11200: PUSH
11201: LD_INT 1
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 2
11210: PUSH
11211: LD_INT 25
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 25
11223: PUSH
11224: LD_INT 2
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 25
11233: PUSH
11234: LD_INT 3
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 25
11243: PUSH
11244: LD_INT 4
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 25
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 8
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: PPUSH
11290: LD_STRING DT1-Sol1-1
11292: PPUSH
11293: LD_STRING DT1-FSol1-1
11295: PPUSH
11296: CALL 13291 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11300: LD_EXP 1
11304: PPUSH
11305: LD_STRING DT1-JMM-1
11307: PPUSH
11308: CALL_OW 88
// DialogueOff ;
11312: CALL_OW 7
// break ;
11316: GO 11320
// end ; end ;
11318: GO 11146
11320: POP
11321: POP
// end ;
11322: PPOPN 2
11324: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11325: LD_EXP 29
11329: PUSH
11330: LD_INT 1
11332: EQUAL
11333: PUSH
11334: LD_INT 11
11336: PPUSH
11337: LD_INT 22
11339: PUSH
11340: LD_INT 3
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 24
11349: PUSH
11350: LD_INT 251
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: LD_INT 21
11362: PUSH
11363: LD_INT 2
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 70
11394: PUSH
11395: LD_INT 0
11397: EQUAL
11398: AND
11399: PUSH
11400: LD_EXP 30
11404: PUSH
11405: LD_INT 3
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: LD_INT 4
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_OWVAR 67
11423: ARRAY
11424: LESSEQUAL
11425: AND
11426: PUSH
11427: LD_EXP 30
11431: PUSH
11432: LD_INT 5
11434: GREATER
11435: AND
11436: IFFALSE 11593
11438: GO 11440
11440: DISABLE
// begin vehicleTeleported = 2 ;
11441: LD_ADDR_EXP 29
11445: PUSH
11446: LD_INT 2
11448: ST_TO_ADDR
// DialogueOn ;
11449: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11453: LD_EXP 1
11457: PPUSH
11458: LD_STRING DT1a-JMM-1
11460: PPUSH
11461: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11465: LD_INT 22
11467: PUSH
11468: LD_INT 1
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 26
11477: PUSH
11478: LD_INT 1
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: LD_INT 25
11490: PUSH
11491: LD_INT 1
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 25
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 25
11510: PUSH
11511: LD_INT 3
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 25
11520: PUSH
11521: LD_INT 4
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 25
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 25
11540: PUSH
11541: LD_INT 8
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: PPUSH
11562: CALL_OW 69
11566: PPUSH
11567: LD_STRING DT1a-Sol1-1
11569: PPUSH
11570: LD_STRING DT1a-FSol1-1
11572: PPUSH
11573: CALL 13291 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11577: LD_EXP 1
11581: PPUSH
11582: LD_STRING DT1a-JMM-2
11584: PPUSH
11585: CALL_OW 88
// DialogueOff ;
11589: CALL_OW 7
// end ;
11593: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11594: LD_EXP 29
11598: PUSH
11599: LD_INT 3
11601: EQUAL
11602: PUSH
11603: LD_EXP 30
11607: PUSH
11608: LD_INT 4
11610: GREATER
11611: AND
11612: IFFALSE 11823
11614: GO 11616
11616: DISABLE
11617: LD_INT 0
11619: PPUSH
11620: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_INT 11
11628: PPUSH
11629: LD_INT 22
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 24
11641: PUSH
11642: LD_INT 250
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 70
11657: ST_TO_ADDR
// enable ;
11658: ENABLE
// for i in vehicles do
11659: LD_ADDR_VAR 0 1
11663: PUSH
11664: LD_VAR 0 2
11668: PUSH
11669: FOR_IN
11670: IFFALSE 11821
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11672: LD_INT 1
11674: PPUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 292
11684: PUSH
11685: LD_EXP 29
11689: PUSH
11690: LD_INT 3
11692: EQUAL
11693: AND
11694: IFFALSE 11819
// begin disable ;
11696: DISABLE
// DialogueOn ;
11697: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11701: LD_INT 22
11703: PUSH
11704: LD_INT 1
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 26
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 2
11723: PUSH
11724: LD_INT 25
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 25
11736: PUSH
11737: LD_INT 2
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 25
11746: PUSH
11747: LD_INT 3
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 25
11756: PUSH
11757: LD_INT 4
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 8
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: PPUSH
11803: LD_STRING DT2-Sol1-1
11805: PPUSH
11806: LD_STRING DT2-FSol1-1
11808: PPUSH
11809: CALL 13291 0 3
// DialogueOff ;
11813: CALL_OW 7
// break ;
11817: GO 11821
// end ; end ;
11819: GO 11669
11821: POP
11822: POP
// end ;
11823: PPOPN 2
11825: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11826: LD_EXP 29
11830: PUSH
11831: LD_INT 3
11833: EQUAL
11834: PUSH
11835: LD_INT 11
11837: PPUSH
11838: LD_INT 22
11840: PUSH
11841: LD_INT 3
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 24
11850: PUSH
11851: LD_INT 251
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 2
11860: PUSH
11861: LD_INT 21
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 21
11873: PUSH
11874: LD_INT 1
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 70
11895: PUSH
11896: LD_INT 0
11898: EQUAL
11899: AND
11900: PUSH
11901: LD_EXP 30
11905: PUSH
11906: LD_INT 6
11908: PUSH
11909: LD_INT 6
11911: PUSH
11912: LD_INT 8
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: PUSH
11920: LD_OWVAR 67
11924: ARRAY
11925: EQUAL
11926: AND
11927: IFFALSE 12084
11929: GO 11931
11931: DISABLE
// begin vehicleTeleported = 4 ;
11932: LD_ADDR_EXP 29
11936: PUSH
11937: LD_INT 4
11939: ST_TO_ADDR
// DialogueOn ;
11940: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11944: LD_EXP 1
11948: PPUSH
11949: LD_STRING DT2a-JMM-1
11951: PPUSH
11952: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11956: LD_INT 22
11958: PUSH
11959: LD_INT 1
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 26
11968: PUSH
11969: LD_INT 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: LD_INT 25
11981: PUSH
11982: LD_INT 1
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 25
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 25
12001: PUSH
12002: LD_INT 3
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 25
12011: PUSH
12012: LD_INT 4
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 25
12021: PUSH
12022: LD_INT 5
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 25
12031: PUSH
12032: LD_INT 8
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: PPUSH
12058: LD_STRING DT2a-Sol1-1
12060: PPUSH
12061: LD_STRING DT2a-FSol1-1
12063: PPUSH
12064: CALL 13291 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12068: LD_EXP 3
12072: PPUSH
12073: LD_STRING DT2a-Don-1
12075: PPUSH
12076: CALL_OW 88
// DialogueOff ;
12080: CALL_OW 7
// end ;
12084: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12085: LD_INT 1
12087: PPUSH
12088: LD_INT 45
12090: PPUSH
12091: LD_INT 74
12093: PPUSH
12094: CALL_OW 293
12098: IFFALSE 12266
12100: GO 12102
12102: DISABLE
// begin DialogueOn ;
12103: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12107: LD_INT 36
12109: PPUSH
12110: LD_INT 55
12112: PPUSH
12113: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12117: LD_INT 22
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 26
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 25
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 25
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 25
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 25
12172: PUSH
12173: LD_INT 4
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 25
12182: PUSH
12183: LD_INT 5
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 25
12192: PUSH
12193: LD_INT 8
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 69
12218: PPUSH
12219: LD_STRING D5-Sol1-1
12221: PPUSH
12222: LD_STRING D5-FSol1-
12224: PPUSH
12225: CALL 13291 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12229: LD_EXP 31
12233: PUSH
12234: LD_INT 1
12236: EQUAL
12237: PUSH
12238: LD_EXP 3
12242: PPUSH
12243: CALL_OW 300
12247: AND
12248: IFFALSE 12262
// Say ( Donaldson , D5-Don-1 ) ;
12250: LD_EXP 3
12254: PPUSH
12255: LD_STRING D5-Don-1
12257: PPUSH
12258: CALL_OW 88
// DialogueOff ;
12262: CALL_OW 7
// end ;
12266: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12267: LD_INT 1
12269: PPUSH
12270: LD_INT 10
12272: PPUSH
12273: CALL_OW 292
12277: PUSH
12278: LD_INT 1
12280: PPUSH
12281: LD_INT 137
12283: PPUSH
12284: CALL_OW 292
12288: OR
12289: IFFALSE 12433
12291: GO 12293
12293: DISABLE
// begin DialogueOn ;
12294: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12298: LD_INT 22
12300: PUSH
12301: LD_INT 1
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 26
12310: PUSH
12311: LD_INT 1
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 2
12320: PUSH
12321: LD_INT 25
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 4
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 25
12363: PUSH
12364: LD_INT 5
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 25
12373: PUSH
12374: LD_INT 8
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: LIST
12394: PPUSH
12395: CALL_OW 69
12399: PPUSH
12400: LD_STRING DT3-Sol1-1
12402: PPUSH
12403: LD_STRING DT3-FSol1-1
12405: PPUSH
12406: CALL 13291 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12410: LD_EXP 1
12414: PPUSH
12415: LD_STRING DT3-JMM-1
12417: PPUSH
12418: CALL_OW 88
// DialogueOff ;
12422: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12426: LD_STRING M2
12428: PPUSH
12429: CALL_OW 337
// end ;
12433: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12434: LD_EXP 43
12438: PUSH
12439: LD_INT 0
12441: EQUAL
12442: IFFALSE 12525
12444: GO 12446
12446: DISABLE
12447: LD_INT 0
12449: PPUSH
// begin enable ;
12450: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 10
12458: PPUSH
12459: LD_INT 22
12461: PUSH
12462: LD_INT 3
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 21
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 58
12481: PUSH
12482: EMPTY
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PPUSH
12490: CALL_OW 70
12494: PUSH
12495: FOR_IN
12496: IFFALSE 12523
// if GetLives ( i ) < 1000 then
12498: LD_VAR 0 1
12502: PPUSH
12503: CALL_OW 256
12507: PUSH
12508: LD_INT 1000
12510: LESS
12511: IFFALSE 12521
// ruEscape = 1 ;
12513: LD_ADDR_EXP 43
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
12521: GO 12495
12523: POP
12524: POP
// end ;
12525: PPOPN 1
12527: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12528: LD_INT 3
12530: PPUSH
12531: CALL_OW 303
12535: PUSH
12536: LD_INT 4
12538: PPUSH
12539: CALL_OW 303
12543: OR
12544: PUSH
12545: LD_INT 22
12547: PPUSH
12548: LD_INT 22
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 70
12562: PUSH
12563: LD_INT 0
12565: GREATER
12566: OR
12567: PUSH
12568: LD_EXP 43
12572: PUSH
12573: LD_INT 1
12575: EQUAL
12576: OR
12577: IFFALSE 12808
12579: GO 12581
12581: DISABLE
12582: LD_INT 0
12584: PPUSH
12585: PPUSH
12586: PPUSH
// begin ruAI = 0 ;
12587: LD_ADDR_EXP 42
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12595: LD_ADDR_VAR 0 3
12599: PUSH
12600: LD_INT 10
12602: PPUSH
12603: LD_INT 22
12605: PUSH
12606: LD_INT 3
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 21
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 58
12625: PUSH
12626: EMPTY
12627: LIST
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: PPUSH
12634: CALL_OW 70
12638: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12639: LD_EXP 35
12643: PPUSH
12644: CALL_OW 122
// wait ( 0 0$1 ) ;
12648: LD_INT 35
12650: PPUSH
12651: CALL_OW 67
// DialogueOn ;
12655: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12659: LD_EXP 1
12663: PPUSH
12664: LD_STRING D6-JMM-1
12666: PPUSH
12667: CALL_OW 88
// DialogueOff ;
12671: CALL_OW 7
// if vehs > 0 then
12675: LD_VAR 0 3
12679: PUSH
12680: LD_INT 0
12682: GREATER
12683: IFFALSE 12753
// for i := 1 to RuScientists do
12685: LD_ADDR_VAR 0 1
12689: PUSH
12690: DOUBLE
12691: LD_INT 1
12693: DEC
12694: ST_TO_ADDR
12695: LD_EXP 35
12699: PUSH
12700: FOR_TO
12701: IFFALSE 12749
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12703: LD_EXP 35
12707: PUSH
12708: LD_VAR 0 1
12712: ARRAY
12713: PPUSH
12714: LD_INT 3
12716: PUSH
12717: LD_INT 60
12719: PUSH
12720: EMPTY
12721: LIST
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 72
12731: PPUSH
12732: LD_VAR 0 3
12736: PUSH
12737: LD_VAR 0 1
12741: ARRAY
12742: PPUSH
12743: CALL_OW 120
12747: GO 12700
12749: POP
12750: POP
12751: GO 12808
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12753: LD_EXP 35
12757: PUSH
12758: LD_VAR 0 1
12762: ARRAY
12763: PPUSH
12764: LD_INT 3
12766: PUSH
12767: LD_INT 60
12769: PUSH
12770: EMPTY
12771: LIST
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PPUSH
12777: CALL_OW 72
12781: PPUSH
12782: LD_INT 13
12784: PUSH
12785: LD_INT 14
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 1
12794: PPUSH
12795: LD_INT 2
12797: PPUSH
12798: CALL_OW 12
12802: ARRAY
12803: PPUSH
12804: CALL_OW 113
// end ;
12808: PPOPN 3
12810: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
12811: LD_EXP 42
12815: PUSH
12816: LD_INT 0
12818: EQUAL
12819: IFFALSE 13191
12821: GO 12823
12823: DISABLE
12824: LD_INT 0
12826: PPUSH
12827: PPUSH
12828: PPUSH
12829: PPUSH
// begin enable ;
12830: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
12831: LD_EXP 35
12835: PPUSH
12836: LD_INT 2
12838: PUSH
12839: LD_INT 95
12841: PUSH
12842: LD_INT 13
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: LD_INT 95
12851: PUSH
12852: LD_INT 14
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: PPUSH
12864: CALL_OW 72
12868: PUSH
12869: LD_INT 33
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 23
12881: PUSH
12882: LD_INT 3
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: LD_INT 95
12894: PUSH
12895: LD_INT 13
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 95
12904: PUSH
12905: LD_INT 14
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: PPUSH
12922: CALL_OW 69
12926: OR
12927: IFFALSE 13116
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_EXP 35
12938: PPUSH
12939: LD_INT 2
12941: PUSH
12942: LD_INT 95
12944: PUSH
12945: LD_INT 13
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 95
12954: PUSH
12955: LD_INT 14
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 72
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: ST_TO_ADDR
// if not unit then
12976: LD_VAR 0 2
12980: NOT
12981: IFFALSE 13116
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12983: LD_ADDR_VAR 0 4
12987: PUSH
12988: LD_INT 2
12990: PUSH
12991: LD_INT 95
12993: PUSH
12994: LD_INT 13
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 95
13003: PUSH
13004: LD_INT 14
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: LD_INT 1
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 23
13028: PUSH
13029: LD_INT 3
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: ST_TO_ADDR
// if not tmp then
13046: LD_VAR 0 4
13050: NOT
13051: IFFALSE 13055
// exit ;
13053: GO 13191
// for i in tmp do
13055: LD_ADDR_VAR 0 1
13059: PUSH
13060: LD_VAR 0 4
13064: PUSH
13065: FOR_IN
13066: IFFALSE 13114
// if IsDrivenBy ( i ) in RuScientists then
13068: LD_VAR 0 1
13072: PPUSH
13073: CALL_OW 311
13077: PUSH
13078: LD_EXP 35
13082: IN
13083: IFFALSE 13112
// begin unit := IsDrivenBy ( i ) ;
13085: LD_ADDR_VAR 0 2
13089: PUSH
13090: LD_VAR 0 1
13094: PPUSH
13095: CALL_OW 311
13099: ST_TO_ADDR
// veh := i ;
13100: LD_ADDR_VAR 0 3
13104: PUSH
13105: LD_VAR 0 1
13109: ST_TO_ADDR
// break ;
13110: GO 13114
// end ;
13112: GO 13065
13114: POP
13115: POP
// end ; end ; if not unit then
13116: LD_VAR 0 2
13120: NOT
13121: IFFALSE 13125
// exit ;
13123: GO 13191
// RuScientists = RuScientists diff unit ;
13125: LD_ADDR_EXP 35
13129: PUSH
13130: LD_EXP 35
13134: PUSH
13135: LD_VAR 0 2
13139: DIFF
13140: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13141: LD_VAR 0 2
13145: PPUSH
13146: CALL_OW 64
// if veh then
13150: LD_VAR 0 3
13154: IFFALSE 13191
// begin if GetWeapon ( veh ) = 49 then
13156: LD_VAR 0 3
13160: PPUSH
13161: CALL_OW 264
13165: PUSH
13166: LD_INT 49
13168: EQUAL
13169: IFFALSE 13182
// KillUnit ( veh ) else
13171: LD_VAR 0 3
13175: PPUSH
13176: CALL_OW 66
13180: GO 13191
// RemoveUnit ( veh ) ;
13182: LD_VAR 0 3
13186: PPUSH
13187: CALL_OW 64
// end ; end ; end_of_file
13191: PPOPN 4
13193: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13194: LD_INT 0
13196: PPUSH
13197: PPUSH
// if exist_mode then
13198: LD_VAR 0 2
13202: IFFALSE 13221
// unit := CreateCharacter ( ident ) else
13204: LD_ADDR_VAR 0 4
13208: PUSH
13209: LD_VAR 0 1
13213: PPUSH
13214: CALL_OW 34
13218: ST_TO_ADDR
13219: GO 13236
// unit := NewCharacter ( ident ) ;
13221: LD_ADDR_VAR 0 4
13225: PUSH
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 25
13235: ST_TO_ADDR
// result := unit ;
13236: LD_ADDR_VAR 0 3
13240: PUSH
13241: LD_VAR 0 4
13245: ST_TO_ADDR
// end ;
13246: LD_VAR 0 3
13250: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13251: LD_INT 0
13253: PPUSH
13254: PPUSH
// for i in charactersList do
13255: LD_ADDR_VAR 0 4
13259: PUSH
13260: LD_VAR 0 1
13264: PUSH
13265: FOR_IN
13266: IFFALSE 13284
// SaveCharacters ( i , ident ) ;
13268: LD_VAR 0 4
13272: PPUSH
13273: LD_VAR 0 2
13277: PPUSH
13278: CALL_OW 38
13282: GO 13265
13284: POP
13285: POP
// end ;
13286: LD_VAR 0 3
13290: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13291: LD_INT 0
13293: PPUSH
13294: PPUSH
13295: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13296: LD_ADDR_VAR 0 1
13300: PUSH
13301: LD_VAR 0 1
13305: PUSH
13306: LD_EXP 1
13310: PUSH
13311: LD_EXP 7
13315: PUSH
13316: LD_EXP 3
13320: PUSH
13321: LD_EXP 4
13325: PUSH
13326: LD_EXP 5
13330: PUSH
13331: LD_EXP 2
13335: PUSH
13336: LD_EXP 12
13340: PUSH
13341: LD_EXP 13
13345: PUSH
13346: LD_EXP 9
13350: PUSH
13351: LD_EXP 11
13355: PUSH
13356: LD_EXP 6
13360: PUSH
13361: LD_EXP 8
13365: PUSH
13366: LD_EXP 10
13370: PUSH
13371: LD_EXP 22
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: DIFF
13392: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13393: LD_ADDR_VAR 0 6
13397: PUSH
13398: LD_INT 1
13400: PPUSH
13401: LD_VAR 0 1
13405: PPUSH
13406: CALL_OW 12
13410: ST_TO_ADDR
// for i = 1 to characters do
13411: LD_ADDR_VAR 0 5
13415: PUSH
13416: DOUBLE
13417: LD_INT 1
13419: DEC
13420: ST_TO_ADDR
13421: LD_VAR 0 1
13425: PUSH
13426: FOR_TO
13427: IFFALSE 13537
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13429: LD_VAR 0 5
13433: PUSH
13434: LD_VAR 0 6
13438: EQUAL
13439: PUSH
13440: LD_VAR 0 1
13444: PUSH
13445: LD_VAR 0 5
13449: ARRAY
13450: PPUSH
13451: CALL_OW 258
13455: PUSH
13456: LD_INT 1
13458: EQUAL
13459: AND
13460: IFFALSE 13482
// Say ( characters [ i ] , dialogMID ) ;
13462: LD_VAR 0 1
13466: PUSH
13467: LD_VAR 0 5
13471: ARRAY
13472: PPUSH
13473: LD_VAR 0 2
13477: PPUSH
13478: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13482: LD_VAR 0 5
13486: PUSH
13487: LD_VAR 0 6
13491: EQUAL
13492: PUSH
13493: LD_VAR 0 1
13497: PUSH
13498: LD_VAR 0 5
13502: ARRAY
13503: PPUSH
13504: CALL_OW 258
13508: PUSH
13509: LD_INT 2
13511: EQUAL
13512: AND
13513: IFFALSE 13535
// Say ( characters [ i ] , dialogFID ) ;
13515: LD_VAR 0 1
13519: PUSH
13520: LD_VAR 0 5
13524: ARRAY
13525: PPUSH
13526: LD_VAR 0 3
13530: PPUSH
13531: CALL_OW 88
// end ;
13535: GO 13426
13537: POP
13538: POP
// end ;
13539: LD_VAR 0 4
13543: RET
// export function PrepareDifficulty ; var tmp ; begin
13544: LD_INT 0
13546: PPUSH
13547: PPUSH
// if Difficulty = 1 then
13548: LD_OWVAR 67
13552: PUSH
13553: LD_INT 1
13555: EQUAL
13556: IFFALSE 13574
// begin RuSolMinLevel = 8 ;
13558: LD_ADDR_EXP 37
13562: PUSH
13563: LD_INT 8
13565: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13566: LD_ADDR_EXP 38
13570: PUSH
13571: LD_INT 10
13573: ST_TO_ADDR
// end ; if Difficulty = 2 then
13574: LD_OWVAR 67
13578: PUSH
13579: LD_INT 2
13581: EQUAL
13582: IFFALSE 13676
// begin RuSolMinLevel = 9 ;
13584: LD_ADDR_EXP 37
13588: PUSH
13589: LD_INT 9
13591: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13592: LD_ADDR_EXP 38
13596: PUSH
13597: LD_INT 10
13599: ST_TO_ADDR
// uc_nation = 3 ;
13600: LD_ADDR_OWVAR 21
13604: PUSH
13605: LD_INT 3
13607: ST_TO_ADDR
// uc_side = 3 ;
13608: LD_ADDR_OWVAR 20
13612: PUSH
13613: LD_INT 3
13615: ST_TO_ADDR
// bc_level = 10 ;
13616: LD_ADDR_OWVAR 43
13620: PUSH
13621: LD_INT 10
13623: ST_TO_ADDR
// bc_type = b_turret ;
13624: LD_ADDR_OWVAR 42
13628: PUSH
13629: LD_INT 33
13631: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13632: LD_ADDR_VAR 0 2
13636: PUSH
13637: LD_INT 86
13639: PPUSH
13640: LD_INT 34
13642: PPUSH
13643: LD_INT 2
13645: PPUSH
13646: CALL_OW 47
13650: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13651: LD_VAR 0 2
13655: PPUSH
13656: LD_INT 49
13658: PPUSH
13659: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13663: LD_INT 64
13665: PPUSH
13666: LD_INT 3
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: CALL_OW 322
// end ; if Difficulty = 3 then
13676: LD_OWVAR 67
13680: PUSH
13681: LD_INT 3
13683: EQUAL
13684: IFFALSE 13822
// begin RuSolMinLevel = 10 ;
13686: LD_ADDR_EXP 37
13690: PUSH
13691: LD_INT 10
13693: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13694: LD_ADDR_EXP 38
13698: PUSH
13699: LD_INT 10
13701: ST_TO_ADDR
// uc_nation = 3 ;
13702: LD_ADDR_OWVAR 21
13706: PUSH
13707: LD_INT 3
13709: ST_TO_ADDR
// uc_side = 3 ;
13710: LD_ADDR_OWVAR 20
13714: PUSH
13715: LD_INT 3
13717: ST_TO_ADDR
// bc_level = 10 ;
13718: LD_ADDR_OWVAR 43
13722: PUSH
13723: LD_INT 10
13725: ST_TO_ADDR
// bc_type = b_turret ;
13726: LD_ADDR_OWVAR 42
13730: PUSH
13731: LD_INT 33
13733: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13734: LD_ADDR_VAR 0 2
13738: PUSH
13739: LD_INT 86
13741: PPUSH
13742: LD_INT 34
13744: PPUSH
13745: LD_INT 2
13747: PPUSH
13748: CALL_OW 47
13752: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13753: LD_VAR 0 2
13757: PPUSH
13758: LD_INT 49
13760: PPUSH
13761: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13765: LD_ADDR_VAR 0 2
13769: PUSH
13770: LD_INT 93
13772: PPUSH
13773: LD_INT 31
13775: PPUSH
13776: LD_INT 2
13778: PPUSH
13779: CALL_OW 47
13783: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13784: LD_VAR 0 2
13788: PPUSH
13789: LD_INT 49
13791: PPUSH
13792: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13796: LD_INT 64
13798: PPUSH
13799: LD_INT 3
13801: PPUSH
13802: LD_INT 1
13804: PPUSH
13805: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13809: LD_INT 65
13811: PPUSH
13812: LD_INT 3
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: CALL_OW 322
// end ; end ;
13822: LD_VAR 0 1
13826: RET
// export function ShowQuery1 ; begin
13827: LD_INT 0
13829: PPUSH
// case query ( Q1 ) of 1 :
13830: LD_STRING Q1
13832: PPUSH
13833: CALL_OW 97
13837: PUSH
13838: LD_INT 1
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13857
13846: POP
// result = 1 ; 2 :
13847: LD_ADDR_VAR 0 1
13851: PUSH
13852: LD_INT 1
13854: ST_TO_ADDR
13855: GO 13896
13857: LD_INT 2
13859: DOUBLE
13860: EQUAL
13861: IFTRUE 13865
13863: GO 13876
13865: POP
// result = 2 ; 3 :
13866: LD_ADDR_VAR 0 1
13870: PUSH
13871: LD_INT 2
13873: ST_TO_ADDR
13874: GO 13896
13876: LD_INT 3
13878: DOUBLE
13879: EQUAL
13880: IFTRUE 13884
13882: GO 13895
13884: POP
// result = 3 ; end ;
13885: LD_ADDR_VAR 0 1
13889: PUSH
13890: LD_INT 3
13892: ST_TO_ADDR
13893: GO 13896
13895: POP
// end ;
13896: LD_VAR 0 1
13900: RET
// export function ShowQuery2 ; begin
13901: LD_INT 0
13903: PPUSH
// case query ( Q1a ) of 1 :
13904: LD_STRING Q1a
13906: PPUSH
13907: CALL_OW 97
13911: PUSH
13912: LD_INT 1
13914: DOUBLE
13915: EQUAL
13916: IFTRUE 13920
13918: GO 13931
13920: POP
// result = 1 ; 2 :
13921: LD_ADDR_VAR 0 1
13925: PUSH
13926: LD_INT 1
13928: ST_TO_ADDR
13929: GO 13970
13931: LD_INT 2
13933: DOUBLE
13934: EQUAL
13935: IFTRUE 13939
13937: GO 13950
13939: POP
// result = 2 ; 3 :
13940: LD_ADDR_VAR 0 1
13944: PUSH
13945: LD_INT 2
13947: ST_TO_ADDR
13948: GO 13970
13950: LD_INT 3
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 13969
13958: POP
// result = 3 ; end ;
13959: LD_ADDR_VAR 0 1
13963: PUSH
13964: LD_INT 3
13966: ST_TO_ADDR
13967: GO 13970
13969: POP
// end ;
13970: LD_VAR 0 1
13974: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13975: LD_INT 0
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
// for i = 1 to count do
13982: LD_ADDR_VAR 0 8
13986: PUSH
13987: DOUBLE
13988: LD_INT 1
13990: DEC
13991: ST_TO_ADDR
13992: LD_VAR 0 6
13996: PUSH
13997: FOR_TO
13998: IFFALSE 14079
// begin uc_side = side ;
14000: LD_ADDR_OWVAR 20
14004: PUSH
14005: LD_VAR 0 1
14009: ST_TO_ADDR
// uc_nation = nation ;
14010: LD_ADDR_OWVAR 21
14014: PUSH
14015: LD_VAR 0 2
14019: ST_TO_ADDR
// hc_gallery =  ;
14020: LD_ADDR_OWVAR 33
14024: PUSH
14025: LD_STRING 
14027: ST_TO_ADDR
// hc_name =  ;
14028: LD_ADDR_OWVAR 26
14032: PUSH
14033: LD_STRING 
14035: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14036: LD_INT 0
14038: PPUSH
14039: LD_VAR 0 5
14043: PPUSH
14044: LD_VAR 0 4
14048: PPUSH
14049: CALL_OW 380
// un = CreateHuman ;
14053: LD_ADDR_VAR 0 10
14057: PUSH
14058: CALL_OW 44
14062: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14063: LD_VAR 0 10
14067: PPUSH
14068: LD_VAR 0 3
14072: PPUSH
14073: CALL_OW 52
// end ;
14077: GO 13997
14079: POP
14080: POP
// end ;
14081: LD_VAR 0 7
14085: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14086: LD_INT 0
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14093: LD_ADDR_VAR 0 8
14097: PUSH
14098: LD_INT 48
14100: PUSH
14101: LD_INT 49
14103: PUSH
14104: LD_INT 50
14106: PUSH
14107: LD_INT 20
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: LD_INT 51
14115: PUSH
14116: LD_INT 52
14118: PUSH
14119: LD_INT 69
14121: PUSH
14122: LD_INT 39
14124: PUSH
14125: LD_INT 34
14127: PUSH
14128: LD_INT 40
14130: PUSH
14131: LD_INT 53
14133: PUSH
14134: LD_INT 71
14136: PUSH
14137: LD_INT 57
14139: PUSH
14140: LD_INT 58
14142: PUSH
14143: LD_INT 44
14145: PUSH
14146: LD_INT 32
14148: PUSH
14149: LD_INT 27
14151: PUSH
14152: LD_INT 23
14154: PUSH
14155: LD_INT 33
14157: PUSH
14158: LD_INT 59
14160: PUSH
14161: LD_INT 54
14163: PUSH
14164: LD_INT 55
14166: PUSH
14167: LD_INT 56
14169: PUSH
14170: LD_INT 63
14172: PUSH
14173: LD_INT 64
14175: PUSH
14176: LD_INT 65
14178: PUSH
14179: LD_INT 30
14181: PUSH
14182: LD_INT 31
14184: PUSH
14185: LD_INT 21
14187: PUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 25
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14228: LD_ADDR_VAR 0 5
14232: PUSH
14233: DOUBLE
14234: LD_INT 1
14236: DEC
14237: ST_TO_ADDR
14238: LD_VAR 0 8
14242: PUSH
14243: FOR_TO
14244: IFFALSE 14320
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14246: LD_VAR 0 8
14250: PUSH
14251: LD_VAR 0 5
14255: ARRAY
14256: PPUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 321
14266: PUSH
14267: LD_INT 1
14269: EQUAL
14270: PUSH
14271: LD_VAR 0 8
14275: PUSH
14276: LD_VAR 0 5
14280: ARRAY
14281: PPUSH
14282: LD_VAR 0 3
14286: PPUSH
14287: CALL_OW 482
14291: PUSH
14292: LD_INT 1
14294: EQUAL
14295: AND
14296: IFFALSE 14318
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14298: LD_VAR 0 2
14302: PPUSH
14303: LD_VAR 0 8
14307: PUSH
14308: LD_VAR 0 5
14312: ARRAY
14313: PPUSH
14314: CALL_OW 184
14318: GO 14243
14320: POP
14321: POP
// end ;
14322: LD_VAR 0 4
14326: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14335: LD_ADDR_VAR 0 8
14339: PUSH
14340: LD_VAR 0 2
14344: PPUSH
14345: CALL_OW 313
14349: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14350: LD_ADDR_VAR 0 9
14354: PUSH
14355: LD_VAR 0 3
14359: PPUSH
14360: LD_INT 22
14362: PUSH
14363: LD_VAR 0 1
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 25
14374: PUSH
14375: LD_INT 2
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 24
14384: PUSH
14385: LD_INT 750
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 3
14394: PUSH
14395: LD_INT 54
14397: PUSH
14398: EMPTY
14399: LIST
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: PPUSH
14411: CALL_OW 70
14415: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14416: LD_ADDR_VAR 0 6
14420: PUSH
14421: LD_VAR 0 3
14425: PPUSH
14426: LD_INT 22
14428: PUSH
14429: LD_VAR 0 1
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 21
14440: PUSH
14441: LD_INT 3
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: LD_INT 24
14453: PUSH
14454: LD_INT 1000
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: PPUSH
14473: CALL_OW 70
14477: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14478: LD_VAR 0 6
14482: NOT
14483: PUSH
14484: LD_INT 22
14486: PUSH
14487: LD_VAR 0 1
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 25
14498: PUSH
14499: LD_INT 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 24
14508: PUSH
14509: LD_INT 250
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 69
14525: NOT
14526: AND
14527: IFFALSE 14531
// exit ;
14529: GO 14713
// if buildings_list > 0 and engineerOkInside then
14531: LD_VAR 0 6
14535: PUSH
14536: LD_INT 0
14538: GREATER
14539: PUSH
14540: LD_VAR 0 8
14544: AND
14545: IFFALSE 14556
// ComExitBuilding ( engineerOkInside ) ;
14547: LD_VAR 0 8
14551: PPUSH
14552: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14556: LD_VAR 0 6
14560: PUSH
14561: LD_INT 0
14563: GREATER
14564: PUSH
14565: LD_VAR 0 9
14569: PUSH
14570: LD_INT 0
14572: GREATER
14573: AND
14574: IFFALSE 14594
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14576: LD_VAR 0 9
14580: PPUSH
14581: LD_VAR 0 6
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PPUSH
14590: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14594: LD_VAR 0 6
14598: PUSH
14599: LD_INT 0
14601: EQUAL
14602: PUSH
14603: LD_VAR 0 4
14607: PUSH
14608: LD_INT 0
14610: EQUAL
14611: AND
14612: PUSH
14613: LD_VAR 0 9
14617: PUSH
14618: LD_INT 0
14620: GREATER
14621: AND
14622: IFFALSE 14638
// ComEnterUnit ( engineerOkOutside , building ) ;
14624: LD_VAR 0 9
14628: PPUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14638: LD_VAR 0 9
14642: PUSH
14643: LD_INT 0
14645: GREATER
14646: PUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_INT 0
14654: EQUAL
14655: AND
14656: PUSH
14657: LD_VAR 0 4
14661: PUSH
14662: LD_INT 0
14664: GREATER
14665: AND
14666: IFFALSE 14713
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14668: LD_VAR 0 9
14672: PPUSH
14673: LD_VAR 0 4
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: PPUSH
14682: LD_VAR 0 4
14686: PUSH
14687: LD_INT 2
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 4
14695: PUSH
14696: LD_INT 3
14698: ARRAY
14699: PPUSH
14700: LD_VAR 0 4
14704: PUSH
14705: LD_INT 4
14707: ARRAY
14708: PPUSH
14709: CALL_OW 145
// end ;
14713: LD_VAR 0 5
14717: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14718: LD_INT 0
14720: PPUSH
14721: PPUSH
14722: PPUSH
14723: PPUSH
14724: PPUSH
14725: PPUSH
14726: PPUSH
14727: PPUSH
14728: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14729: LD_ADDR_VAR 0 6
14733: PUSH
14734: LD_INT 22
14736: PUSH
14737: LD_VAR 0 1
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 25
14748: PUSH
14749: LD_INT 4
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 24
14758: PUSH
14759: LD_INT 251
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 69
14775: PUSH
14776: LD_EXP 35
14780: PUSH
14781: EMPTY
14782: LIST
14783: DIFF
14784: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14785: LD_ADDR_VAR 0 7
14789: PUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: LD_INT 22
14797: PUSH
14798: LD_VAR 0 1
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 25
14809: PUSH
14810: LD_INT 4
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 50
14819: PUSH
14820: EMPTY
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 70
14832: PUSH
14833: LD_EXP 35
14837: PUSH
14838: EMPTY
14839: LIST
14840: DIFF
14841: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14842: LD_ADDR_VAR 0 10
14846: PUSH
14847: LD_VAR 0 3
14851: PPUSH
14852: LD_INT 22
14854: PUSH
14855: LD_VAR 0 1
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: LD_INT 24
14879: PUSH
14880: LD_INT 750
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: PPUSH
14896: CALL_OW 70
14900: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14901: LD_ADDR_VAR 0 11
14905: PUSH
14906: LD_VAR 0 2
14910: PPUSH
14911: LD_INT 22
14913: PUSH
14914: LD_VAR 0 1
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 21
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 3
14935: PUSH
14936: LD_INT 24
14938: PUSH
14939: LD_INT 1000
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 70
14959: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14960: LD_VAR 0 10
14964: PUSH
14965: LD_INT 0
14967: GREATER
14968: PUSH
14969: LD_VAR 0 6
14973: PUSH
14974: LD_INT 0
14976: GREATER
14977: AND
14978: IFFALSE 14994
// ComMoveToArea ( damageUnits , healArea ) ;
14980: LD_VAR 0 10
14984: PPUSH
14985: LD_VAR 0 2
14989: PPUSH
14990: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
14994: LD_VAR 0 11
14998: PUSH
14999: LD_INT 0
15001: GREATER
15002: PUSH
15003: LD_VAR 0 7
15007: PUSH
15008: LD_INT 0
15010: GREATER
15011: AND
15012: IFFALSE 15032
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15014: LD_VAR 0 7
15018: PPUSH
15019: LD_VAR 0 11
15023: PUSH
15024: LD_INT 1
15026: ARRAY
15027: PPUSH
15028: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15032: LD_VAR 0 10
15036: PUSH
15037: LD_INT 0
15039: EQUAL
15040: PUSH
15041: LD_VAR 0 11
15045: PUSH
15046: LD_INT 0
15048: EQUAL
15049: AND
15050: PUSH
15051: LD_VAR 0 7
15055: PUSH
15056: LD_INT 0
15058: GREATER
15059: AND
15060: IFFALSE 15165
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15062: LD_ADDR_VAR 0 12
15066: PUSH
15067: LD_INT 22
15069: PUSH
15070: LD_VAR 0 1
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 21
15081: PUSH
15082: LD_INT 3
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 30
15091: PUSH
15092: LD_INT 8
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 69
15108: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15109: LD_ADDR_VAR 0 13
15113: PUSH
15114: LD_INT 1
15116: PPUSH
15117: LD_VAR 0 12
15121: PPUSH
15122: CALL_OW 12
15126: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15127: LD_VAR 0 7
15131: PPUSH
15132: LD_INT 3
15134: PUSH
15135: LD_INT 60
15137: PUSH
15138: EMPTY
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PPUSH
15145: CALL_OW 72
15149: PPUSH
15150: LD_VAR 0 12
15154: PUSH
15155: LD_VAR 0 13
15159: ARRAY
15160: PPUSH
15161: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15165: LD_VAR 0 3
15169: PPUSH
15170: LD_INT 22
15172: PUSH
15173: LD_VAR 0 1
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 25
15184: PUSH
15185: LD_INT 3
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 24
15194: PUSH
15195: LD_INT 751
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: PPUSH
15207: CALL_OW 70
15211: PUSH
15212: LD_INT 0
15214: GREATER
15215: PUSH
15216: LD_INT 21
15218: PPUSH
15219: CALL_OW 302
15223: AND
15224: PUSH
15225: LD_INT 21
15227: PPUSH
15228: CALL_OW 255
15232: PUSH
15233: LD_INT 3
15235: EQUAL
15236: AND
15237: IFFALSE 15293
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15239: LD_VAR 0 3
15243: PPUSH
15244: LD_INT 22
15246: PUSH
15247: LD_VAR 0 1
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 24
15268: PUSH
15269: LD_INT 751
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 70
15285: PPUSH
15286: LD_INT 21
15288: PPUSH
15289: CALL_OW 120
// end ;
15293: LD_VAR 0 5
15297: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15298: LD_INT 0
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15305: LD_ADDR_VAR 0 6
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_VAR 0 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 30
15327: PUSH
15328: LD_INT 31
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 30
15337: PUSH
15338: LD_INT 32
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 30
15347: PUSH
15348: LD_INT 33
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 30
15357: PUSH
15358: LD_INT 4
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 30
15367: PUSH
15368: LD_INT 5
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15392: LD_ADDR_VAR 0 7
15396: PUSH
15397: LD_INT 22
15399: PUSH
15400: LD_VAR 0 2
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 21
15411: PUSH
15412: LD_INT 3
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 58
15421: PUSH
15422: EMPTY
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: PPUSH
15430: CALL_OW 69
15434: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15435: LD_VAR 0 6
15439: PUSH
15440: LD_INT 0
15442: GREATER
15443: PUSH
15444: LD_VAR 0 7
15448: PUSH
15449: LD_INT 0
15451: GREATER
15452: AND
15453: IFFALSE 15523
// begin for i in turretsList do
15455: LD_ADDR_VAR 0 4
15459: PUSH
15460: LD_VAR 0 6
15464: PUSH
15465: FOR_IN
15466: IFFALSE 15521
// begin for j in enemyBuildings do
15468: LD_ADDR_VAR 0 5
15472: PUSH
15473: LD_VAR 0 7
15477: PUSH
15478: FOR_IN
15479: IFFALSE 15517
// begin if GetDistUnits ( i , j ) < 20 then
15481: LD_VAR 0 4
15485: PPUSH
15486: LD_VAR 0 5
15490: PPUSH
15491: CALL_OW 296
15495: PUSH
15496: LD_INT 20
15498: LESS
15499: IFFALSE 15515
// begin ComAttackUnit ( i , j ) ;
15501: LD_VAR 0 4
15505: PPUSH
15506: LD_VAR 0 5
15510: PPUSH
15511: CALL_OW 115
// end ; end ;
15515: GO 15478
15517: POP
15518: POP
// end ;
15519: GO 15465
15521: POP
15522: POP
// end ; end ;
15523: LD_VAR 0 3
15527: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15528: LD_INT 0
15530: PPUSH
15531: PPUSH
15532: PPUSH
15533: PPUSH
15534: PPUSH
15535: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15536: LD_ADDR_VAR 0 7
15540: PUSH
15541: LD_VAR 0 2
15545: PPUSH
15546: LD_INT 22
15548: PUSH
15549: LD_VAR 0 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 21
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 34
15570: PUSH
15571: LD_INT 52
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: PPUSH
15583: CALL_OW 70
15587: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15588: LD_ADDR_VAR 0 8
15592: PUSH
15593: LD_VAR 0 2
15597: PPUSH
15598: LD_INT 22
15600: PUSH
15601: LD_VAR 0 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 21
15612: PUSH
15613: LD_INT 3
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 3
15622: PUSH
15623: LD_INT 24
15625: PUSH
15626: LD_INT 1000
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: PPUSH
15645: CALL_OW 70
15649: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15650: LD_VAR 0 8
15654: PUSH
15655: LD_INT 0
15657: GREATER
15658: PUSH
15659: LD_VAR 0 7
15663: PPUSH
15664: LD_INT 24
15666: PUSH
15667: LD_INT 750
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: CALL_OW 72
15678: PUSH
15679: LD_INT 0
15681: GREATER
15682: AND
15683: IFFALSE 15703
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15685: LD_VAR 0 7
15689: PPUSH
15690: LD_VAR 0 8
15694: PUSH
15695: LD_INT 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 130
// end ;
15703: LD_VAR 0 3
15707: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15708: LD_INT 0
15710: PPUSH
15711: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15712: LD_INT 22
15714: PUSH
15715: LD_VAR 0 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 69
15742: PUSH
15743: LD_INT 18
15745: PPUSH
15746: LD_INT 22
15748: PUSH
15749: LD_VAR 0 1
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 21
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PPUSH
15772: CALL_OW 70
15776: PUSH
15777: LD_VAR 0 3
15781: LESSEQUAL
15782: DIFF
15783: IFFALSE 15850
// for i = 1 to vehCount do
15785: LD_ADDR_VAR 0 9
15789: PUSH
15790: DOUBLE
15791: LD_INT 1
15793: DEC
15794: ST_TO_ADDR
15795: LD_VAR 0 3
15799: PUSH
15800: FOR_TO
15801: IFFALSE 15848
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15803: LD_VAR 0 2
15807: PPUSH
15808: LD_VAR 0 7
15812: PPUSH
15813: LD_VAR 0 5
15817: PPUSH
15818: LD_VAR 0 6
15822: PPUSH
15823: LD_VAR 0 4
15827: PUSH
15828: LD_INT 1
15830: PPUSH
15831: LD_VAR 0 4
15835: PPUSH
15836: CALL_OW 12
15840: ARRAY
15841: PPUSH
15842: CALL_OW 185
15846: GO 15800
15848: POP
15849: POP
// end ;
15850: LD_VAR 0 8
15854: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15855: LD_INT 0
15857: PPUSH
15858: PPUSH
15859: PPUSH
15860: PPUSH
15861: PPUSH
15862: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15863: LD_EXP 40
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: LD_INT 4
15873: PUSH
15874: LD_INT 4
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: LD_OWVAR 67
15886: ARRAY
15887: GREATEREQUAL
15888: PUSH
15889: LD_EXP 41
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: LD_INT 2
15899: PUSH
15900: LD_INT 2
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: PUSH
15908: LD_OWVAR 67
15912: ARRAY
15913: GREATEREQUAL
15914: AND
15915: IFFALSE 16148
// begin repeat wait ( 0 0$3 ) ;
15917: LD_INT 105
15919: PPUSH
15920: CALL_OW 67
// for j in russianTanks do
15924: LD_ADDR_VAR 0 4
15928: PUSH
15929: LD_EXP 40
15933: PUSH
15934: FOR_IN
15935: IFFALSE 16136
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15937: LD_ADDR_VAR 0 6
15941: PUSH
15942: LD_INT 81
15944: PUSH
15945: LD_VAR 0 1
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 101
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PPUSH
15968: CALL_OW 69
15972: PPUSH
15973: LD_VAR 0 4
15977: PPUSH
15978: CALL_OW 74
15982: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15983: LD_ADDR_VAR 0 7
15987: PUSH
15988: LD_INT 81
15990: PUSH
15991: LD_VAR 0 1
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 101
16002: PUSH
16003: LD_INT 1
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 2
16012: PUSH
16013: LD_INT 59
16015: PUSH
16016: EMPTY
16017: LIST
16018: PUSH
16019: LD_INT 21
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 21
16031: PUSH
16032: LD_INT 2
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: PPUSH
16058: LD_VAR 0 4
16062: PPUSH
16063: CALL_OW 74
16067: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16068: LD_VAR 0 4
16072: PPUSH
16073: LD_VAR 0 6
16077: PPUSH
16078: CALL_OW 296
16082: PUSH
16083: LD_INT 8
16085: PLUS
16086: PUSH
16087: LD_VAR 0 4
16091: PPUSH
16092: LD_VAR 0 7
16096: PPUSH
16097: CALL_OW 296
16101: LESS
16102: IFFALSE 16120
// ComAttackUnit ( j , target1 ) else
16104: LD_VAR 0 4
16108: PPUSH
16109: LD_VAR 0 6
16113: PPUSH
16114: CALL_OW 115
16118: GO 16134
// ComAttackUnit ( j , target2 ) ;
16120: LD_VAR 0 4
16124: PPUSH
16125: LD_VAR 0 7
16129: PPUSH
16130: CALL_OW 115
// end ;
16134: GO 15934
16136: POP
16137: POP
// until russianTanks = 0 ;
16138: LD_EXP 40
16142: PUSH
16143: LD_INT 0
16145: EQUAL
16146: IFFALSE 15917
// end ; end ;
16148: LD_VAR 0 2
16152: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16153: LD_INT 0
16155: PPUSH
16156: PPUSH
16157: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16158: LD_EXP 40
16162: PUSH
16163: LD_INT 1
16165: GREATEREQUAL
16166: PUSH
16167: LD_EXP 41
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: LD_INT 2
16177: PUSH
16178: LD_INT 2
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: PUSH
16186: LD_OWVAR 67
16190: ARRAY
16191: GREATEREQUAL
16192: AND
16193: IFFALSE 16343
// repeat wait ( 0 0$3 ) ;
16195: LD_INT 105
16197: PPUSH
16198: CALL_OW 67
// if russianTimeLapsers > 0 then
16202: LD_EXP 41
16206: PUSH
16207: LD_INT 0
16209: GREATER
16210: IFFALSE 16333
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16212: LD_ADDR_VAR 0 3
16216: PUSH
16217: LD_EXP 41
16221: PPUSH
16222: LD_INT 3
16224: PUSH
16225: LD_INT 60
16227: PUSH
16228: EMPTY
16229: LIST
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PPUSH
16235: CALL_OW 72
16239: PUSH
16240: FOR_IN
16241: IFFALSE 16331
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
16243: LD_ADDR_VAR 0 4
16247: PUSH
16248: LD_INT 81
16250: PUSH
16251: LD_VAR 0 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 101
16262: PUSH
16263: LD_INT 1
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 21
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: PPUSH
16285: CALL_OW 69
16289: PPUSH
16290: LD_VAR 0 3
16294: PPUSH
16295: CALL_OW 74
16299: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
16300: LD_VAR 0 3
16304: PPUSH
16305: LD_VAR 0 4
16309: PPUSH
16310: CALL_OW 250
16314: PPUSH
16315: LD_VAR 0 4
16319: PPUSH
16320: CALL_OW 251
16324: PPUSH
16325: CALL_OW 111
// end ;
16329: GO 16240
16331: POP
16332: POP
// until russianTimeLapsers = 0 ;
16333: LD_EXP 41
16337: PUSH
16338: LD_INT 0
16340: EQUAL
16341: IFFALSE 16195
// end ;
16343: LD_VAR 0 2
16347: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16348: LD_INT 0
16350: PPUSH
16351: PPUSH
16352: PPUSH
16353: PPUSH
16354: PPUSH
16355: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16356: LD_ADDR_VAR 0 6
16360: PUSH
16361: LD_INT 22
16363: PUSH
16364: LD_VAR 0 1
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 25
16375: PUSH
16376: LD_INT 9
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 69
16391: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16392: LD_ADDR_VAR 0 7
16396: PUSH
16397: LD_INT 81
16399: PUSH
16400: LD_VAR 0 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 3
16411: PUSH
16412: LD_INT 21
16414: PUSH
16415: LD_INT 3
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PPUSH
16430: CALL_OW 69
16434: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16435: LD_ADDR_VAR 0 4
16439: PUSH
16440: LD_INT 1
16442: PPUSH
16443: LD_INT 3
16445: PPUSH
16446: CALL_OW 12
16450: ST_TO_ADDR
// for i = 1 to list do
16451: LD_ADDR_VAR 0 5
16455: PUSH
16456: DOUBLE
16457: LD_INT 1
16459: DEC
16460: ST_TO_ADDR
16461: LD_VAR 0 6
16465: PUSH
16466: FOR_TO
16467: IFFALSE 16669
// for ta in filter do
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_VAR 0 7
16478: PUSH
16479: FOR_IN
16480: IFFALSE 16665
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16482: LD_VAR 0 6
16486: PUSH
16487: LD_VAR 0 5
16491: ARRAY
16492: PPUSH
16493: LD_VAR 0 3
16497: PPUSH
16498: CALL_OW 296
16502: PUSH
16503: LD_INT 15
16505: LESSEQUAL
16506: IFFALSE 16663
// begin case c of 1 :
16508: LD_VAR 0 4
16512: PUSH
16513: LD_INT 1
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16559
16521: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16522: LD_VAR 0 6
16526: PUSH
16527: LD_VAR 0 5
16531: ARRAY
16532: PPUSH
16533: LD_VAR 0 3
16537: PPUSH
16538: CALL_OW 250
16542: PPUSH
16543: LD_VAR 0 3
16547: PPUSH
16548: CALL_OW 251
16552: PPUSH
16553: CALL_OW 154
16557: GO 16663
16559: LD_INT 2
16561: DOUBLE
16562: EQUAL
16563: IFTRUE 16567
16565: GO 16631
16567: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16568: LD_VAR 0 6
16572: PUSH
16573: LD_VAR 0 5
16577: ARRAY
16578: PPUSH
16579: LD_VAR 0 3
16583: PPUSH
16584: CALL_OW 250
16588: PUSH
16589: LD_INT 1
16591: NEG
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 12
16600: PLUS
16601: PPUSH
16602: LD_VAR 0 3
16606: PPUSH
16607: CALL_OW 251
16611: PUSH
16612: LD_INT 1
16614: NEG
16615: PPUSH
16616: LD_INT 1
16618: PPUSH
16619: CALL_OW 12
16623: PLUS
16624: PPUSH
16625: CALL_OW 153
16629: GO 16663
16631: LD_INT 3
16633: DOUBLE
16634: EQUAL
16635: IFTRUE 16639
16637: GO 16662
16639: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16640: LD_VAR 0 6
16644: PUSH
16645: LD_VAR 0 5
16649: ARRAY
16650: PPUSH
16651: LD_VAR 0 3
16655: PPUSH
16656: CALL_OW 115
16660: GO 16663
16662: POP
// end ; end ;
16663: GO 16479
16665: POP
16666: POP
16667: GO 16466
16669: POP
16670: POP
// end ;
16671: LD_VAR 0 2
16675: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16676: LD_INT 0
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
// r := 100 ;
16682: LD_ADDR_VAR 0 5
16686: PUSH
16687: LD_INT 100
16689: ST_TO_ADDR
// x := 0 ;
16690: LD_ADDR_VAR 0 6
16694: PUSH
16695: LD_INT 0
16697: ST_TO_ADDR
// while ( x < n ) do
16698: LD_VAR 0 6
16702: PUSH
16703: LD_VAR 0 2
16707: LESS
16708: IFFALSE 16995
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16710: LD_ADDR_VAR 0 4
16714: PUSH
16715: DOUBLE
16716: LD_INT 1
16718: DEC
16719: ST_TO_ADDR
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 0
16727: PPUSH
16728: CALL_OW 517
16732: PUSH
16733: LD_INT 1
16735: ARRAY
16736: PUSH
16737: FOR_TO
16738: IFFALSE 16991
// begin if r > 50 then
16740: LD_VAR 0 5
16744: PUSH
16745: LD_INT 50
16747: GREATER
16748: IFFALSE 16967
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16750: LD_VAR 0 1
16754: PPUSH
16755: LD_INT 0
16757: PPUSH
16758: CALL_OW 517
16762: PUSH
16763: LD_INT 1
16765: ARRAY
16766: PUSH
16767: LD_VAR 0 4
16771: ARRAY
16772: PPUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: LD_INT 0
16780: PPUSH
16781: CALL_OW 517
16785: PUSH
16786: LD_INT 2
16788: ARRAY
16789: PUSH
16790: LD_VAR 0 4
16794: ARRAY
16795: PPUSH
16796: CALL_OW 458
16800: NOT
16801: IFFALSE 16951
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16803: LD_VAR 0 1
16807: PPUSH
16808: LD_INT 0
16810: PPUSH
16811: CALL_OW 517
16815: PUSH
16816: LD_INT 1
16818: ARRAY
16819: PUSH
16820: LD_VAR 0 4
16824: ARRAY
16825: PPUSH
16826: LD_VAR 0 1
16830: PPUSH
16831: LD_INT 0
16833: PPUSH
16834: CALL_OW 517
16838: PUSH
16839: LD_INT 2
16841: ARRAY
16842: PUSH
16843: LD_VAR 0 4
16847: ARRAY
16848: PPUSH
16849: LD_INT 8
16851: PPUSH
16852: LD_INT 0
16854: PPUSH
16855: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16859: LD_ADDR_EXP 45
16863: PUSH
16864: LD_EXP 45
16868: PPUSH
16869: LD_INT 1
16871: PPUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: LD_INT 0
16879: PPUSH
16880: CALL_OW 517
16884: PUSH
16885: LD_INT 1
16887: ARRAY
16888: PUSH
16889: LD_VAR 0 4
16893: ARRAY
16894: PUSH
16895: LD_VAR 0 1
16899: PPUSH
16900: LD_INT 0
16902: PPUSH
16903: CALL_OW 517
16907: PUSH
16908: LD_INT 2
16910: ARRAY
16911: PUSH
16912: LD_VAR 0 4
16916: ARRAY
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PPUSH
16922: CALL_OW 2
16926: ST_TO_ADDR
// r := 0 ;
16927: LD_ADDR_VAR 0 5
16931: PUSH
16932: LD_INT 0
16934: ST_TO_ADDR
// x := x + 1 ;
16935: LD_ADDR_VAR 0 6
16939: PUSH
16940: LD_VAR 0 6
16944: PUSH
16945: LD_INT 1
16947: PLUS
16948: ST_TO_ADDR
// end else
16949: GO 16965
// r := r + 35 ;
16951: LD_ADDR_VAR 0 5
16955: PUSH
16956: LD_VAR 0 5
16960: PUSH
16961: LD_INT 35
16963: PLUS
16964: ST_TO_ADDR
// end else
16965: GO 16989
// r := r + rand ( 10 , 25 ) ;
16967: LD_ADDR_VAR 0 5
16971: PUSH
16972: LD_VAR 0 5
16976: PUSH
16977: LD_INT 10
16979: PPUSH
16980: LD_INT 25
16982: PPUSH
16983: CALL_OW 12
16987: PLUS
16988: ST_TO_ADDR
// end ;
16989: GO 16737
16991: POP
16992: POP
16993: GO 16698
// end ;
16995: LD_VAR 0 3
16999: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17000: LD_INT 0
17002: PPUSH
17003: PPUSH
17004: PPUSH
17005: PPUSH
// tmpTab = [ ] ;
17006: LD_ADDR_VAR 0 6
17010: PUSH
17011: EMPTY
17012: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17013: LD_INT 22
17015: PUSH
17016: LD_VAR 0 1
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 30
17027: PUSH
17028: LD_INT 32
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: PUSH
17044: LD_INT 0
17046: GREATER
17047: IFFALSE 17130
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17049: LD_ADDR_VAR 0 4
17053: PUSH
17054: LD_INT 22
17056: PUSH
17057: LD_VAR 0 1
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 32
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 69
17084: PUSH
17085: FOR_IN
17086: IFFALSE 17128
// begin for j in UnitsInside ( i ) do
17088: LD_ADDR_VAR 0 5
17092: PUSH
17093: LD_VAR 0 4
17097: PPUSH
17098: CALL_OW 313
17102: PUSH
17103: FOR_IN
17104: IFFALSE 17124
// tmpTab = tmpTab ^ j ;
17106: LD_ADDR_VAR 0 6
17110: PUSH
17111: LD_VAR 0 6
17115: PUSH
17116: LD_VAR 0 5
17120: ADD
17121: ST_TO_ADDR
17122: GO 17103
17124: POP
17125: POP
// end ;
17126: GO 17085
17128: POP
17129: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17130: LD_VAR 0 6
17134: PPUSH
17135: LD_VAR 0 2
17139: PPUSH
17140: CALL_OW 250
17144: PPUSH
17145: LD_VAR 0 2
17149: PPUSH
17150: CALL_OW 251
17154: PPUSH
17155: CALL_OW 114
// end ;
17159: LD_VAR 0 3
17163: RET
// export function PrepareNature ; var i , un ; begin
17164: LD_INT 0
17166: PPUSH
17167: PPUSH
17168: PPUSH
// uc_side := 0 ;
17169: LD_ADDR_OWVAR 20
17173: PUSH
17174: LD_INT 0
17176: ST_TO_ADDR
// uc_nation := 0 ;
17177: LD_ADDR_OWVAR 21
17181: PUSH
17182: LD_INT 0
17184: ST_TO_ADDR
// InitHc ;
17185: CALL_OW 19
// hc_class := class_fish ;
17189: LD_ADDR_OWVAR 28
17193: PUSH
17194: LD_INT 20
17196: ST_TO_ADDR
// for i = 1 to 6 do
17197: LD_ADDR_VAR 0 2
17201: PUSH
17202: DOUBLE
17203: LD_INT 1
17205: DEC
17206: ST_TO_ADDR
17207: LD_INT 6
17209: PUSH
17210: FOR_TO
17211: IFFALSE 17230
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17213: CALL_OW 44
17217: PPUSH
17218: LD_INT 23
17220: PPUSH
17221: LD_INT 0
17223: PPUSH
17224: CALL_OW 49
17228: GO 17210
17230: POP
17231: POP
// for i = 1 to Difficulty + 2 do
17232: LD_ADDR_VAR 0 2
17236: PUSH
17237: DOUBLE
17238: LD_INT 1
17240: DEC
17241: ST_TO_ADDR
17242: LD_OWVAR 67
17246: PUSH
17247: LD_INT 2
17249: PLUS
17250: PUSH
17251: FOR_TO
17252: IFFALSE 17361
// begin hc_sex = sex_male ;
17254: LD_ADDR_OWVAR 27
17258: PUSH
17259: LD_INT 1
17261: ST_TO_ADDR
// uc_side = 0 ;
17262: LD_ADDR_OWVAR 20
17266: PUSH
17267: LD_INT 0
17269: ST_TO_ADDR
// uc_nation = nation_nature ;
17270: LD_ADDR_OWVAR 21
17274: PUSH
17275: LD_INT 0
17277: ST_TO_ADDR
// hc_class = class_tiger ;
17278: LD_ADDR_OWVAR 28
17282: PUSH
17283: LD_INT 14
17285: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17286: LD_ADDR_OWVAR 31
17290: PUSH
17291: LD_EXP 38
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: LD_INT 0
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17311: LD_ADDR_OWVAR 35
17315: PUSH
17316: LD_INT 5
17318: NEG
17319: PPUSH
17320: LD_INT 5
17322: PPUSH
17323: CALL_OW 12
17327: PUSH
17328: LD_OWVAR 67
17332: MUL
17333: ST_TO_ADDR
// un = CreateHuman ;
17334: LD_ADDR_VAR 0 3
17338: PUSH
17339: CALL_OW 44
17343: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17344: LD_VAR 0 3
17348: PPUSH
17349: LD_INT 24
17351: PPUSH
17352: LD_INT 0
17354: PPUSH
17355: CALL_OW 49
// end ;
17359: GO 17251
17361: POP
17362: POP
// for i = 1 to rand ( 3 , 4 ) do
17363: LD_ADDR_VAR 0 2
17367: PUSH
17368: DOUBLE
17369: LD_INT 1
17371: DEC
17372: ST_TO_ADDR
17373: LD_INT 3
17375: PPUSH
17376: LD_INT 4
17378: PPUSH
17379: CALL_OW 12
17383: PUSH
17384: FOR_TO
17385: IFFALSE 17477
// begin hc_sex = sex_male ;
17387: LD_ADDR_OWVAR 27
17391: PUSH
17392: LD_INT 1
17394: ST_TO_ADDR
// uc_side = 0 ;
17395: LD_ADDR_OWVAR 20
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// uc_nation = nation_nature ;
17403: LD_ADDR_OWVAR 21
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// hc_class = 18 ;
17411: LD_ADDR_OWVAR 28
17415: PUSH
17416: LD_INT 18
17418: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17419: LD_ADDR_OWVAR 31
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: LD_INT 0
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: ST_TO_ADDR
// hc_agressivity = 0 ;
17442: LD_ADDR_OWVAR 35
17446: PUSH
17447: LD_INT 0
17449: ST_TO_ADDR
// un = CreateHuman ;
17450: LD_ADDR_VAR 0 3
17454: PUSH
17455: CALL_OW 44
17459: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17460: LD_VAR 0 3
17464: PPUSH
17465: LD_INT 24
17467: PPUSH
17468: LD_INT 0
17470: PPUSH
17471: CALL_OW 49
// end ;
17475: GO 17384
17477: POP
17478: POP
// for i = 1 to rand ( 1 , 3 ) do
17479: LD_ADDR_VAR 0 2
17483: PUSH
17484: DOUBLE
17485: LD_INT 1
17487: DEC
17488: ST_TO_ADDR
17489: LD_INT 1
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: CALL_OW 12
17499: PUSH
17500: FOR_TO
17501: IFFALSE 17649
// begin hc_sex = sex_male ;
17503: LD_ADDR_OWVAR 27
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// uc_side = 0 ;
17511: LD_ADDR_OWVAR 20
17515: PUSH
17516: LD_INT 0
17518: ST_TO_ADDR
// uc_nation = nation_nature ;
17519: LD_ADDR_OWVAR 21
17523: PUSH
17524: LD_INT 0
17526: ST_TO_ADDR
// hc_class = class_apeman ;
17527: LD_ADDR_OWVAR 28
17531: PUSH
17532: LD_INT 12
17534: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17535: LD_ADDR_OWVAR 31
17539: PUSH
17540: LD_EXP 37
17544: PPUSH
17545: LD_EXP 38
17549: PPUSH
17550: CALL_OW 12
17554: PUSH
17555: LD_EXP 37
17559: PPUSH
17560: LD_EXP 38
17564: PPUSH
17565: CALL_OW 12
17569: PUSH
17570: LD_EXP 37
17574: PPUSH
17575: LD_EXP 38
17579: PPUSH
17580: CALL_OW 12
17584: PUSH
17585: LD_EXP 37
17589: PPUSH
17590: LD_EXP 38
17594: PPUSH
17595: CALL_OW 12
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17606: LD_ADDR_OWVAR 35
17610: PUSH
17611: LD_INT 1
17613: PPUSH
17614: LD_INT 20
17616: PPUSH
17617: CALL_OW 12
17621: ST_TO_ADDR
// un = CreateHuman ;
17622: LD_ADDR_VAR 0 3
17626: PUSH
17627: CALL_OW 44
17631: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17632: LD_VAR 0 3
17636: PPUSH
17637: LD_INT 24
17639: PPUSH
17640: LD_INT 0
17642: PPUSH
17643: CALL_OW 49
// end ;
17647: GO 17500
17649: POP
17650: POP
// end ; end_of_file
17651: LD_VAR 0 1
17655: RET
// on UnitDestroyed ( unit ) do var i ;
17656: LD_INT 0
17658: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL_OW 255
17668: PUSH
17669: LD_INT 3
17671: EQUAL
17672: PUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 247
17682: PUSH
17683: LD_INT 1
17685: EQUAL
17686: AND
17687: IFFALSE 17751
// begin for i in RuScientists do
17689: LD_ADDR_VAR 0 2
17693: PUSH
17694: LD_EXP 35
17698: PUSH
17699: FOR_IN
17700: IFFALSE 17749
// if i = unit then
17702: LD_VAR 0 2
17706: PUSH
17707: LD_VAR 0 1
17711: EQUAL
17712: IFFALSE 17747
// begin RuScientists = RuScientists diff [ unit ] ;
17714: LD_ADDR_EXP 35
17718: PUSH
17719: LD_EXP 35
17723: PUSH
17724: LD_VAR 0 1
17728: PUSH
17729: EMPTY
17730: LIST
17731: DIFF
17732: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17733: LD_ADDR_EXP 36
17737: PUSH
17738: LD_EXP 36
17742: PUSH
17743: LD_INT 1
17745: PLUS
17746: ST_TO_ADDR
// end ;
17747: GO 17699
17749: POP
17750: POP
// end ; end ;
17751: PPOPN 2
17753: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17754: LD_VAR 0 1
17758: PUSH
17759: LD_INT 10
17761: EQUAL
17762: PUSH
17763: LD_VAR 0 2
17767: PPUSH
17768: CALL_OW 255
17772: PUSH
17773: LD_INT 1
17775: EQUAL
17776: AND
17777: PUSH
17778: LD_EXP 48
17782: PUSH
17783: LD_INT 0
17785: EQUAL
17786: AND
17787: IFFALSE 17899
// begin eventVar1 = 1 ;
17789: LD_ADDR_EXP 48
17793: PUSH
17794: LD_INT 1
17796: ST_TO_ADDR
// teleportExplored = 1 ;
17797: LD_ADDR_EXP 34
17801: PUSH
17802: LD_INT 1
17804: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17805: LD_STRING M2a
17807: PPUSH
17808: CALL_OW 337
// wait ( 0 0$2 ) ;
17812: LD_INT 70
17814: PPUSH
17815: CALL_OW 67
// DialogueOn ;
17819: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17823: LD_INT 22
17825: PUSH
17826: LD_INT 1
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 21
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: PPUSH
17852: LD_STRING DT3a-Sol1-1
17854: PPUSH
17855: LD_STRING DT3a-FSol1-1
17857: PPUSH
17858: CALL 13291 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17862: LD_EXP 1
17866: PPUSH
17867: LD_STRING DT3a-JMM-1
17869: PPUSH
17870: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17874: LD_VAR 0 2
17878: PPUSH
17879: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17883: LD_EXP 1
17887: PPUSH
17888: LD_STRING DT3a-JMM-1a
17890: PPUSH
17891: CALL_OW 88
// DialogueOff ;
17895: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17899: LD_VAR 0 1
17903: PUSH
17904: LD_INT 10
17906: EQUAL
17907: PUSH
17908: LD_VAR 0 2
17912: PPUSH
17913: CALL_OW 247
17917: PUSH
17918: LD_INT 2
17920: EQUAL
17921: AND
17922: PUSH
17923: LD_VAR 0 2
17927: PPUSH
17928: CALL_OW 255
17932: PUSH
17933: LD_INT 3
17935: EQUAL
17936: AND
17937: PUSH
17938: LD_EXP 29
17942: PUSH
17943: LD_INT 0
17945: EQUAL
17946: AND
17947: IFFALSE 17964
// begin wait ( 0 0$3 ) ;
17949: LD_INT 105
17951: PPUSH
17952: CALL_OW 67
// vehicleTeleported = 1 ;
17956: LD_ADDR_EXP 29
17960: PUSH
17961: LD_INT 1
17963: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17964: LD_VAR 0 1
17968: PUSH
17969: LD_INT 10
17971: EQUAL
17972: PUSH
17973: LD_VAR 0 2
17977: PPUSH
17978: CALL_OW 247
17982: PUSH
17983: LD_INT 2
17985: EQUAL
17986: AND
17987: PUSH
17988: LD_VAR 0 2
17992: PPUSH
17993: CALL_OW 255
17997: PUSH
17998: LD_INT 3
18000: EQUAL
18001: AND
18002: PUSH
18003: LD_EXP 29
18007: PUSH
18008: LD_INT 2
18010: EQUAL
18011: AND
18012: IFFALSE 18029
// begin wait ( 0 0$3 ) ;
18014: LD_INT 105
18016: PPUSH
18017: CALL_OW 67
// vehicleTeleported = 3 ;
18021: LD_ADDR_EXP 29
18025: PUSH
18026: LD_INT 3
18028: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18029: LD_VAR 0 1
18033: PUSH
18034: LD_INT 10
18036: EQUAL
18037: PUSH
18038: LD_VAR 0 2
18042: PPUSH
18043: CALL_OW 247
18047: PUSH
18048: LD_INT 2
18050: EQUAL
18051: AND
18052: PUSH
18053: LD_VAR 0 2
18057: PPUSH
18058: CALL_OW 255
18062: PUSH
18063: LD_INT 3
18065: EQUAL
18066: AND
18067: IFFALSE 18083
// tpCounter = tpCounter + 1 ;
18069: LD_ADDR_EXP 30
18073: PUSH
18074: LD_EXP 30
18078: PUSH
18079: LD_INT 1
18081: PLUS
18082: ST_TO_ADDR
// end ;
18083: PPOPN 2
18085: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18086: LD_VAR 0 2
18090: PUSH
18091: LD_INT 21
18093: EQUAL
18094: PUSH
18095: LD_VAR 0 2
18099: PUSH
18100: LD_INT 112
18102: EQUAL
18103: OR
18104: IFFALSE 18282
// if GetSide ( vehicle ) = 3 then
18106: LD_VAR 0 1
18110: PPUSH
18111: CALL_OW 255
18115: PUSH
18116: LD_INT 3
18118: EQUAL
18119: IFFALSE 18282
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18121: LD_VAR 0 1
18125: PPUSH
18126: CALL_OW 264
18130: PUSH
18131: LD_INT 46
18133: EQUAL
18134: PUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 264
18144: PUSH
18145: LD_INT 45
18147: EQUAL
18148: OR
18149: PUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 264
18159: PUSH
18160: LD_INT 44
18162: EQUAL
18163: OR
18164: IFFALSE 18239
// begin russianTanks = russianTanks ^ vehicle ;
18166: LD_ADDR_EXP 40
18170: PUSH
18171: LD_EXP 40
18175: PUSH
18176: LD_VAR 0 1
18180: ADD
18181: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18182: LD_EXP 44
18186: PUSH
18187: LD_INT 1
18189: EQUAL
18190: PUSH
18191: LD_EXP 44
18195: PUSH
18196: LD_INT 0
18198: EQUAL
18199: OR
18200: IFFALSE 18214
// ComEnterUnit ( vehicle , ruteleprt ) ;
18202: LD_VAR 0 1
18206: PPUSH
18207: LD_INT 10
18209: PPUSH
18210: CALL_OW 120
// if attackTactic = 2 then
18214: LD_EXP 44
18218: PUSH
18219: LD_INT 2
18221: EQUAL
18222: IFFALSE 18239
// ComMoveXY ( vehicle , 88 , 69 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 88
18231: PPUSH
18232: LD_INT 69
18234: PPUSH
18235: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18239: LD_VAR 0 1
18243: PPUSH
18244: CALL_OW 264
18248: PUSH
18249: LD_INT 49
18251: EQUAL
18252: IFFALSE 18282
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18254: LD_ADDR_EXP 41
18258: PUSH
18259: LD_EXP 41
18263: PUSH
18264: LD_VAR 0 1
18268: ADD
18269: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18270: LD_VAR 0 1
18274: PPUSH
18275: LD_INT 137
18277: PPUSH
18278: CALL_OW 120
// end ; end ; end ;
18282: PPOPN 2
18284: END
// on UnitGoesToRed ( unit ) do var i ;
18285: LD_INT 0
18287: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 255
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: PUSH
18302: LD_VAR 0 1
18306: PPUSH
18307: CALL_OW 247
18311: PUSH
18312: LD_INT 2
18314: EQUAL
18315: AND
18316: IFFALSE 18434
// begin if russianTanks > 0 then
18318: LD_EXP 40
18322: PUSH
18323: LD_INT 0
18325: GREATER
18326: IFFALSE 18376
// for i in russianTanks do
18328: LD_ADDR_VAR 0 2
18332: PUSH
18333: LD_EXP 40
18337: PUSH
18338: FOR_IN
18339: IFFALSE 18374
// if i = unit then
18341: LD_VAR 0 2
18345: PUSH
18346: LD_VAR 0 1
18350: EQUAL
18351: IFFALSE 18372
// russianTanks = russianTanks diff [ unit ] ;
18353: LD_ADDR_EXP 40
18357: PUSH
18358: LD_EXP 40
18362: PUSH
18363: LD_VAR 0 1
18367: PUSH
18368: EMPTY
18369: LIST
18370: DIFF
18371: ST_TO_ADDR
18372: GO 18338
18374: POP
18375: POP
// if russianTimeLapsers > 0 then
18376: LD_EXP 41
18380: PUSH
18381: LD_INT 0
18383: GREATER
18384: IFFALSE 18434
// for i in russianTimeLapsers do
18386: LD_ADDR_VAR 0 2
18390: PUSH
18391: LD_EXP 41
18395: PUSH
18396: FOR_IN
18397: IFFALSE 18432
// if i = unit then
18399: LD_VAR 0 2
18403: PUSH
18404: LD_VAR 0 1
18408: EQUAL
18409: IFFALSE 18430
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18411: LD_ADDR_EXP 41
18415: PUSH
18416: LD_EXP 41
18420: PUSH
18421: LD_VAR 0 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: DIFF
18429: ST_TO_ADDR
18430: GO 18396
18432: POP
18433: POP
// end ; end ;
18434: PPOPN 2
18436: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18437: LD_INT 0
18439: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18440: LD_VAR 0 2
18444: PPUSH
18445: CALL_OW 255
18449: PUSH
18450: LD_INT 3
18452: EQUAL
18453: PUSH
18454: LD_VAR 0 2
18458: PPUSH
18459: CALL_OW 257
18463: PUSH
18464: LD_INT 3
18466: EQUAL
18467: AND
18468: PUSH
18469: LD_INT 21
18471: PPUSH
18472: CALL_OW 255
18476: PUSH
18477: LD_INT 3
18479: EQUAL
18480: AND
18481: PUSH
18482: LD_INT 21
18484: PPUSH
18485: CALL_OW 302
18489: AND
18490: IFFALSE 18504
// ComEnterUnit ( human , ru_fact ) ;
18492: LD_VAR 0 2
18496: PPUSH
18497: LD_INT 21
18499: PPUSH
18500: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18504: LD_VAR 0 2
18508: PPUSH
18509: CALL_OW 257
18513: PUSH
18514: LD_INT 4
18516: EQUAL
18517: PUSH
18518: LD_VAR 0 2
18522: PPUSH
18523: CALL_OW 255
18527: PUSH
18528: LD_INT 3
18530: EQUAL
18531: AND
18532: PUSH
18533: LD_EXP 42
18537: PUSH
18538: LD_INT 0
18540: EQUAL
18541: AND
18542: IFFALSE 18604
// for i in RuScientists do
18544: LD_ADDR_VAR 0 3
18548: PUSH
18549: LD_EXP 35
18553: PUSH
18554: FOR_IN
18555: IFFALSE 18602
// if i = human then
18557: LD_VAR 0 3
18561: PUSH
18562: LD_VAR 0 2
18566: EQUAL
18567: IFFALSE 18600
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18569: LD_VAR 0 3
18573: PPUSH
18574: LD_INT 13
18576: PUSH
18577: LD_INT 14
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: PPUSH
18587: LD_INT 2
18589: PPUSH
18590: CALL_OW 12
18594: ARRAY
18595: PPUSH
18596: CALL_OW 113
18600: GO 18554
18602: POP
18603: POP
// end ;
18604: PPOPN 3
18606: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18611: LD_VAR 0 2
18615: PPUSH
18616: CALL_OW 255
18620: PUSH
18621: LD_INT 3
18623: EQUAL
18624: PUSH
18625: LD_VAR 0 2
18629: PPUSH
18630: CALL_OW 257
18634: PUSH
18635: LD_INT 4
18637: EQUAL
18638: AND
18639: IFFALSE 18781
// for i in RuScientists do
18641: LD_ADDR_VAR 0 3
18645: PUSH
18646: LD_EXP 35
18650: PUSH
18651: FOR_IN
18652: IFFALSE 18779
// if i = human then
18654: LD_VAR 0 3
18658: PUSH
18659: LD_VAR 0 2
18663: EQUAL
18664: IFFALSE 18777
// if IsOk ( rutp ) then
18666: LD_INT 137
18668: PPUSH
18669: CALL_OW 302
18673: IFFALSE 18746
// begin rnd = rand ( 1 , 2 ) ;
18675: LD_ADDR_VAR 0 4
18679: PUSH
18680: LD_INT 1
18682: PPUSH
18683: LD_INT 2
18685: PPUSH
18686: CALL_OW 12
18690: ST_TO_ADDR
// if rnd = 1 then
18691: LD_VAR 0 4
18695: PUSH
18696: LD_INT 1
18698: EQUAL
18699: IFFALSE 18713
// ComEnterUnit ( vehicle , rutp ) ;
18701: LD_VAR 0 1
18705: PPUSH
18706: LD_INT 137
18708: PPUSH
18709: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18713: LD_VAR 0 1
18717: PPUSH
18718: LD_INT 13
18720: PUSH
18721: LD_INT 14
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: PPUSH
18731: LD_INT 2
18733: PPUSH
18734: CALL_OW 12
18738: ARRAY
18739: PPUSH
18740: CALL_OW 173
// end else
18744: GO 18777
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18746: LD_VAR 0 1
18750: PPUSH
18751: LD_INT 13
18753: PUSH
18754: LD_INT 14
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 1
18763: PPUSH
18764: LD_INT 2
18766: PPUSH
18767: CALL_OW 12
18771: ARRAY
18772: PPUSH
18773: CALL_OW 113
// end ;
18777: GO 18651
18779: POP
18780: POP
// end ; end_of_file
18781: PPOPN 4
18783: END
// every 0 0$1 trigger ruAI = 1 do
18784: LD_EXP 42
18788: PUSH
18789: LD_INT 1
18791: EQUAL
18792: IFFALSE 18921
18794: GO 18796
18796: DISABLE
// begin enable ;
18797: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18798: LD_INT 3
18800: PPUSH
18801: LD_INT 6
18803: PPUSH
18804: LD_INT 9
18806: PPUSH
18807: LD_EXP 39
18811: PPUSH
18812: CALL 14327 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18816: LD_INT 3
18818: PPUSH
18819: LD_INT 4
18821: PPUSH
18822: LD_INT 10
18824: PPUSH
18825: LD_EXP 39
18829: PPUSH
18830: CALL 14327 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18834: LD_INT 3
18836: PPUSH
18837: LD_INT 9
18839: PPUSH
18840: CALL 15528 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18844: LD_INT 3
18846: PPUSH
18847: LD_INT 10
18849: PPUSH
18850: CALL 15528 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18854: LD_INT 3
18856: PPUSH
18857: LD_INT 16
18859: PPUSH
18860: LD_INT 9
18862: PPUSH
18863: LD_INT 91
18865: PPUSH
18866: CALL 14718 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18870: LD_INT 3
18872: PPUSH
18873: LD_INT 17
18875: PPUSH
18876: LD_INT 10
18878: PPUSH
18879: LD_INT 47
18881: PUSH
18882: LD_INT 129
18884: PUSH
18885: LD_INT 135
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: PPUSH
18893: CALL 14718 0 4
// AttackVehicles ( 3 ) ;
18897: LD_INT 3
18899: PPUSH
18900: CALL 15855 0 1
// IntBazooka ( 3 ) ;
18904: LD_INT 3
18906: PPUSH
18907: CALL 16348 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18911: LD_INT 3
18913: PPUSH
18914: LD_INT 1
18916: PPUSH
18917: CALL 15298 0 2
// end ;
18921: END
// every 0 0$1 do
18922: GO 18924
18924: DISABLE
// begin enable ;
18925: ENABLE
// TimeLapsersAI ( 3 ) ;
18926: LD_INT 3
18928: PPUSH
18929: CALL 16153 0 1
// end ;
18933: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18934: LD_INT 4
18936: PPUSH
18937: CALL_OW 303
18941: IFFALSE 18956
18943: GO 18945
18945: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
18946: LD_INT 3
18948: PPUSH
18949: LD_INT 4
18951: PPUSH
18952: CALL 17000 0 2
18956: END
// every 0 0$1 do
18957: GO 18959
18959: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
18960: LD_INT 3
18962: PPUSH
18963: LD_INT 91
18965: PPUSH
18966: LD_INT 3
18968: PPUSH
18969: CALL 14086 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
18973: LD_INT 3
18975: PPUSH
18976: LD_INT 47
18978: PPUSH
18979: LD_INT 3
18981: PPUSH
18982: CALL 14086 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
18986: LD_INT 3
18988: PPUSH
18989: LD_INT 129
18991: PPUSH
18992: LD_INT 3
18994: PPUSH
18995: CALL 14086 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
18999: LD_INT 3
19001: PPUSH
19002: LD_INT 3
19004: PPUSH
19005: LD_INT 3
19007: PPUSH
19008: CALL 14086 0 3
// end ;
19012: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19013: LD_EXP 28
19017: PUSH
19018: LD_INT 2
19020: EQUAL
19021: PUSH
19022: LD_INT 21
19024: PPUSH
19025: CALL_OW 255
19029: PUSH
19030: LD_INT 3
19032: EQUAL
19033: AND
19034: PUSH
19035: LD_INT 112
19037: PPUSH
19038: CALL_OW 255
19042: PUSH
19043: LD_INT 3
19045: EQUAL
19046: AND
19047: PUSH
19048: LD_INT 21
19050: PPUSH
19051: CALL_OW 302
19055: AND
19056: PUSH
19057: LD_INT 112
19059: PPUSH
19060: CALL_OW 302
19064: AND
19065: PUSH
19066: LD_INT 22
19068: PUSH
19069: LD_INT 3
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 21
19078: PUSH
19079: LD_INT 2
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 50
19088: PUSH
19089: EMPTY
19090: LIST
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: LD_INT 58
19097: PUSH
19098: EMPTY
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: PPUSH
19111: CALL_OW 69
19115: PUSH
19116: LD_INT 18
19118: PPUSH
19119: LD_INT 22
19121: PUSH
19122: LD_INT 3
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 21
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PPUSH
19143: CALL_OW 70
19147: PUSH
19148: LD_INT 0
19150: EQUAL
19151: DIFF
19152: AND
19153: IFFALSE 19271
19155: GO 19157
19157: DISABLE
// begin enable ;
19158: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19159: LD_INT 3
19161: PPUSH
19162: LD_INT 21
19164: PPUSH
19165: LD_INT 3
19167: PUSH
19168: LD_INT 4
19170: PUSH
19171: LD_INT 4
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PUSH
19179: LD_OWVAR 67
19183: ARRAY
19184: PPUSH
19185: LD_INT 46
19187: PUSH
19188: LD_INT 45
19190: PUSH
19191: LD_INT 44
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: PPUSH
19199: LD_INT 3
19201: PPUSH
19202: LD_INT 3
19204: PPUSH
19205: LD_INT 24
19207: PPUSH
19208: CALL 15708 0 7
// if russianTimeLapsers = 0 then
19212: LD_EXP 41
19216: PUSH
19217: LD_INT 0
19219: EQUAL
19220: IFFALSE 19271
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19222: LD_INT 3
19224: PPUSH
19225: LD_INT 112
19227: PPUSH
19228: LD_INT 1
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: PUSH
19242: LD_OWVAR 67
19246: ARRAY
19247: PPUSH
19248: LD_INT 49
19250: PUSH
19251: LD_INT 49
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PPUSH
19258: LD_INT 3
19260: PPUSH
19261: LD_INT 3
19263: PPUSH
19264: LD_INT 24
19266: PPUSH
19267: CALL 15708 0 7
// end ;
19271: END
// every 0 0$1 trigger arabianMines do var i ;
19272: LD_EXP 45
19276: IFFALSE 19397
19278: GO 19280
19280: DISABLE
19281: LD_INT 0
19283: PPUSH
// begin enable ;
19284: ENABLE
// for i in arabianMines do
19285: LD_ADDR_VAR 0 1
19289: PUSH
19290: LD_EXP 45
19294: PUSH
19295: FOR_IN
19296: IFFALSE 19395
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19298: LD_INT 22
19300: PUSH
19301: LD_INT 1
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 92
19310: PUSH
19311: LD_VAR 0 1
19315: PUSH
19316: LD_INT 1
19318: ARRAY
19319: PUSH
19320: LD_VAR 0 1
19324: PUSH
19325: LD_INT 2
19327: ARRAY
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PPUSH
19342: CALL_OW 69
19346: IFFALSE 19393
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19348: LD_VAR 0 1
19352: PUSH
19353: LD_INT 1
19355: ARRAY
19356: PPUSH
19357: LD_VAR 0 1
19361: PUSH
19362: LD_INT 2
19364: ARRAY
19365: PPUSH
19366: LD_INT 5
19368: PPUSH
19369: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19373: LD_ADDR_EXP 45
19377: PUSH
19378: LD_EXP 45
19382: PPUSH
19383: LD_VAR 0 1
19387: PPUSH
19388: CALL_OW 3
19392: ST_TO_ADDR
// end ; end ;
19393: GO 19295
19395: POP
19396: POP
// end ;
19397: PPOPN 1
19399: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19400: LD_EXP 29
19404: PUSH
19405: LD_INT 4
19407: EQUAL
19408: PUSH
19409: LD_EXP 30
19413: PUSH
19414: LD_INT 6
19416: PUSH
19417: LD_INT 8
19419: PUSH
19420: LD_INT 8
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: LD_OWVAR 67
19432: ARRAY
19433: EQUAL
19434: AND
19435: IFFALSE 19453
19437: GO 19439
19439: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19440: LD_INT 10
19442: PPUSH
19443: LD_INT 47
19445: PPUSH
19446: LD_INT 82
19448: PPUSH
19449: CALL_OW 243
19453: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19454: LD_EXP 29
19458: PUSH
19459: LD_INT 4
19461: EQUAL
19462: IFFALSE 19484
19464: GO 19466
19466: DISABLE
// begin enable ;
19467: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19468: LD_ADDR_EXP 44
19472: PUSH
19473: LD_INT 1
19475: PPUSH
19476: LD_INT 2
19478: PPUSH
19479: CALL_OW 12
19483: ST_TO_ADDR
// end ; end_of_file
19484: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19485: LD_EXP 35
19489: PUSH
19490: EMPTY
19491: EQUAL
19492: PUSH
19493: LD_INT 3
19495: PPUSH
19496: CALL_OW 301
19500: AND
19501: IFFALSE 19706
19503: GO 19505
19505: DISABLE
// begin if sciCounter = 0 then
19506: LD_EXP 36
19510: PUSH
19511: LD_INT 0
19513: EQUAL
19514: IFFALSE 19540
// begin Say ( JMM , D7a-JMM-1 ) ;
19516: LD_EXP 1
19520: PPUSH
19521: LD_STRING D7a-JMM-1
19523: PPUSH
19524: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19528: LD_EXP 22
19532: PPUSH
19533: LD_STRING D7a-Pow-1
19535: PPUSH
19536: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19540: LD_EXP 36
19544: PUSH
19545: LD_INT 0
19547: GREATER
19548: PUSH
19549: LD_EXP 36
19553: PUSH
19554: LD_INT 6
19556: LESS
19557: AND
19558: IFFALSE 19584
// begin Say ( JMM , D7b-JMM-1 ) ;
19560: LD_EXP 1
19564: PPUSH
19565: LD_STRING D7b-JMM-1
19567: PPUSH
19568: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19572: LD_EXP 22
19576: PPUSH
19577: LD_STRING D7b-Pow-1
19579: PPUSH
19580: CALL_OW 94
// end ; if sciCounter = 6 then
19584: LD_EXP 36
19588: PUSH
19589: LD_INT 6
19591: EQUAL
19592: IFFALSE 19702
// begin Say ( JMM , D7c-JMM-1 ) ;
19594: LD_EXP 1
19598: PPUSH
19599: LD_STRING D7c-JMM-1
19601: PPUSH
19602: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19606: LD_EXP 22
19610: PPUSH
19611: LD_STRING D7c-Pow-1
19613: PPUSH
19614: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19618: LD_EXP 1
19622: PPUSH
19623: LD_STRING D7d-JMM-1
19625: PPUSH
19626: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19630: LD_EXP 22
19634: PPUSH
19635: LD_STRING D7d-Pow-1
19637: PPUSH
19638: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19642: LD_EXP 1
19646: PPUSH
19647: LD_STRING D7d-JMM-2
19649: PPUSH
19650: CALL_OW 88
// if askSiberite = 1 then
19654: LD_EXP 33
19658: PUSH
19659: LD_INT 1
19661: EQUAL
19662: IFFALSE 19678
// begin Say ( JMM , D7d-JMM-2a ) ;
19664: LD_EXP 1
19668: PPUSH
19669: LD_STRING D7d-JMM-2a
19671: PPUSH
19672: CALL_OW 88
// end else
19676: GO 19690
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19678: LD_EXP 22
19682: PPUSH
19683: LD_STRING D7d-Pow-2
19685: PPUSH
19686: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19690: LD_EXP 22
19694: PPUSH
19695: LD_STRING D7d-Pow-2a
19697: PPUSH
19698: CALL_OW 94
// end ; FinishMission ;
19702: CALL 19707 0 0
// end ;
19706: END
// export function FinishMission ; begin
19707: LD_INT 0
19709: PPUSH
// if teleportExplored = 1 then
19710: LD_EXP 34
19714: PUSH
19715: LD_INT 1
19717: EQUAL
19718: IFFALSE 19732
// AddMedal ( Teleport , 1 ) else
19720: LD_STRING Teleport
19722: PPUSH
19723: LD_INT 1
19725: PPUSH
19726: CALL_OW 101
19730: GO 19743
// AddMedal ( Teleport , - 1 ) ;
19732: LD_STRING Teleport
19734: PPUSH
19735: LD_INT 1
19737: NEG
19738: PPUSH
19739: CALL_OW 101
// if sciCounter > 2 then
19743: LD_EXP 36
19747: PUSH
19748: LD_INT 2
19750: GREATER
19751: IFFALSE 19765
// AddMedal ( Materials , 1 ) else
19753: LD_STRING Materials
19755: PPUSH
19756: LD_INT 1
19758: PPUSH
19759: CALL_OW 101
19763: GO 19776
// AddMedal ( Materials , - 1 ) ;
19765: LD_STRING Materials
19767: PPUSH
19768: LD_INT 1
19770: NEG
19771: PPUSH
19772: CALL_OW 101
// if sciCounter = 6 then
19776: LD_EXP 36
19780: PUSH
19781: LD_INT 6
19783: EQUAL
19784: IFFALSE 19808
// begin AddMedal ( Scientists , 1 ) ;
19786: LD_STRING Scientists
19788: PPUSH
19789: LD_INT 1
19791: PPUSH
19792: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19796: LD_INT 1
19798: PPUSH
19799: LD_STRING 12_SciDed_1
19801: PPUSH
19802: CALL_OW 39
// end else
19806: GO 19829
// begin AddMedal ( Scientists , - 1 ) ;
19808: LD_STRING Scientists
19810: PPUSH
19811: LD_INT 1
19813: NEG
19814: PPUSH
19815: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19819: LD_INT 0
19821: PPUSH
19822: LD_STRING 12_SciDed_1
19824: PPUSH
19825: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19829: LD_EXP 32
19833: PPUSH
19834: LD_STRING 12_MainDepositFake_1
19836: PPUSH
19837: CALL_OW 39
// GiveMedals ( MAIN ) ;
19841: LD_STRING MAIN
19843: PPUSH
19844: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19848: LD_INT 22
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 21
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 25
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 25
19883: PUSH
19884: LD_INT 2
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 25
19893: PUSH
19894: LD_INT 3
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 25
19903: PUSH
19904: LD_INT 4
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 25
19913: PUSH
19914: LD_INT 5
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 25
19923: PUSH
19924: LD_INT 8
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: LIST
19944: PPUSH
19945: CALL_OW 69
19949: PPUSH
19950: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19954: LD_EXP 1
19958: PPUSH
19959: LD_EXP 47
19963: PUSH
19964: LD_STRING JMM
19966: STR
19967: PPUSH
19968: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19972: LD_EXP 7
19976: PPUSH
19977: LD_EXP 47
19981: PUSH
19982: LD_STRING Brown
19984: STR
19985: PPUSH
19986: CALL 13251 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19990: LD_EXP 3
19994: PPUSH
19995: LD_EXP 47
19999: PUSH
20000: LD_STRING Donaldson
20002: STR
20003: PPUSH
20004: CALL 13251 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20008: LD_EXP 4
20012: PPUSH
20013: LD_EXP 47
20017: PUSH
20018: LD_STRING Bobby
20020: STR
20021: PPUSH
20022: CALL 13251 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20026: LD_EXP 5
20030: PPUSH
20031: LD_EXP 47
20035: PUSH
20036: LD_STRING Cyrus
20038: STR
20039: PPUSH
20040: CALL 13251 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20044: LD_EXP 2
20048: PPUSH
20049: LD_EXP 47
20053: PUSH
20054: LD_STRING Lisa
20056: STR
20057: PPUSH
20058: CALL 13251 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20062: LD_EXP 12
20066: PPUSH
20067: LD_EXP 47
20071: PUSH
20072: LD_STRING Frank
20074: STR
20075: PPUSH
20076: CALL 13251 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20080: LD_EXP 13
20084: PPUSH
20085: LD_EXP 47
20089: PUSH
20090: LD_STRING Kikuchi
20092: STR
20093: PPUSH
20094: CALL 13251 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20098: LD_EXP 9
20102: PPUSH
20103: LD_EXP 47
20107: PUSH
20108: LD_STRING Houten
20110: STR
20111: PPUSH
20112: CALL 13251 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20116: LD_EXP 11
20120: PPUSH
20121: LD_EXP 47
20125: PUSH
20126: LD_STRING Gary
20128: STR
20129: PPUSH
20130: CALL 13251 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20134: LD_EXP 10
20138: PPUSH
20139: LD_EXP 47
20143: PUSH
20144: LD_STRING Cornell
20146: STR
20147: PPUSH
20148: CALL 13251 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20152: LD_EXP 6
20156: PPUSH
20157: LD_EXP 47
20161: PUSH
20162: LD_STRING Denis
20164: STR
20165: PPUSH
20166: CALL 13251 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20170: LD_EXP 8
20174: PPUSH
20175: LD_EXP 47
20179: PUSH
20180: LD_STRING Gladstone
20182: STR
20183: PPUSH
20184: CALL 13251 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20188: LD_INT 50
20190: PUSH
20191: EMPTY
20192: LIST
20193: PUSH
20194: LD_INT 22
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 23
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 21
20216: PUSH
20217: LD_INT 1
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 2
20226: PUSH
20227: LD_INT 25
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 25
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 25
20249: PUSH
20250: LD_INT 3
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 25
20259: PUSH
20260: LD_INT 4
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 25
20269: PUSH
20270: LD_INT 5
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 25
20279: PUSH
20280: LD_INT 8
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: PUSH
20308: LD_EXP 1
20312: PUSH
20313: LD_EXP 7
20317: PUSH
20318: LD_EXP 3
20322: PUSH
20323: LD_EXP 4
20327: PUSH
20328: LD_EXP 5
20332: PUSH
20333: LD_EXP 2
20337: PUSH
20338: LD_EXP 12
20342: PUSH
20343: LD_EXP 8
20347: PUSH
20348: LD_EXP 13
20352: PUSH
20353: LD_EXP 6
20357: PUSH
20358: LD_EXP 9
20362: PUSH
20363: LD_EXP 11
20367: PUSH
20368: LD_EXP 10
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: DIFF
20388: PPUSH
20389: LD_STRING 12_other_survivors
20391: PPUSH
20392: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20396: LD_INT 50
20398: PUSH
20399: EMPTY
20400: LIST
20401: PUSH
20402: LD_INT 22
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 23
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 21
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: PUSH
20435: LD_INT 25
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 25
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 25
20457: PUSH
20458: LD_INT 3
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 25
20467: PUSH
20468: LD_INT 4
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 25
20477: PUSH
20478: LD_INT 5
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 25
20487: PUSH
20488: LD_INT 8
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: PPUSH
20511: CALL_OW 69
20515: PPUSH
20516: LD_STRING 12_kurt_squad
20518: PPUSH
20519: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
20523: LD_EXP 14
20527: PPUSH
20528: LD_STRING 12_others
20530: PPUSH
20531: CALL_OW 38
// YouWin ;
20535: CALL_OW 103
// end ; end_of_file
20539: LD_VAR 0 1
20543: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20544: LD_EXP 1
20548: PPUSH
20549: CALL_OW 301
20553: IFFALSE 20565
20555: GO 20557
20557: DISABLE
// YouLost ( JMM ) ; end_of_file
20558: LD_STRING JMM
20560: PPUSH
20561: CALL_OW 104
20565: END
// every 0 0$01 do
20566: GO 20568
20568: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20569: LD_INT 1050
20571: PPUSH
20572: CALL_OW 67
// if cratesSpawned < 6 then
20576: LD_EXP 46
20580: PUSH
20581: LD_INT 6
20583: LESS
20584: IFFALSE 20621
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20586: LD_INT 3
20588: PPUSH
20589: LD_INT 5
20591: PPUSH
20592: CALL_OW 12
20596: PPUSH
20597: LD_INT 21
20599: PPUSH
20600: LD_INT 1
20602: PPUSH
20603: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20607: LD_ADDR_EXP 46
20611: PUSH
20612: LD_EXP 46
20616: PUSH
20617: LD_INT 1
20619: PLUS
20620: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20621: LD_EXP 46
20625: PUSH
20626: LD_INT 6
20628: GREATEREQUAL
20629: PUSH
20630: LD_EXP 46
20634: PUSH
20635: LD_INT 12
20637: LESS
20638: AND
20639: IFFALSE 20683
// begin wait ( 0 0$30 ) ;
20641: LD_INT 1050
20643: PPUSH
20644: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20648: LD_INT 3
20650: PPUSH
20651: LD_INT 5
20653: PPUSH
20654: CALL_OW 12
20658: PPUSH
20659: LD_INT 21
20661: PPUSH
20662: LD_INT 1
20664: PPUSH
20665: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20669: LD_ADDR_EXP 46
20673: PUSH
20674: LD_EXP 46
20678: PUSH
20679: LD_INT 1
20681: PLUS
20682: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20683: LD_EXP 46
20687: PUSH
20688: LD_INT 12
20690: GREATEREQUAL
20691: IFFALSE 20735
// begin wait ( 1 1$30 ) ;
20693: LD_INT 3150
20695: PPUSH
20696: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20700: LD_INT 3
20702: PPUSH
20703: LD_INT 5
20705: PPUSH
20706: CALL_OW 12
20710: PPUSH
20711: LD_INT 21
20713: PPUSH
20714: LD_INT 1
20716: PPUSH
20717: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20721: LD_ADDR_EXP 46
20725: PUSH
20726: LD_EXP 46
20730: PUSH
20731: LD_INT 1
20733: PLUS
20734: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20735: LD_EXP 46
20739: PUSH
20740: LD_INT 15
20742: GREATEREQUAL
20743: IFFALSE 20569
// end ;
20745: END
