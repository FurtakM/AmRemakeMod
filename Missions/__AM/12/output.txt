// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17239 0 0
// PrepareDifficulty ;
 195: CALL 13619 0 0
// PrepareVehicles ;
 199: CALL 1558 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1132 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2934 0 0
// PrepareWestBase ;
 227: CALL 3446 0 0
// PrepareEastBase ;
 231: CALL 3006 0 0
// PrepareOtherRussians ;
 235: CALL 3558 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11c_others
 575: PPUSH
 576: CALL_OW 31
 580: PUSH
 581: LD_STRING 11_others
 583: PPUSH
 584: CALL_OW 31
 588: UNION
 589: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_STRING 11_JMM
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL 13258 0 2
 605: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 606: LD_EXP 1
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 2
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 58
 645: PUSH
 646: EMPTY
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: PPUSH
 654: CALL_OW 69
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 667: LD_STRING 11_Lisa
 669: PPUSH
 670: CALL_OW 28
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 725
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 680: LD_ADDR_EXP 2
 684: PUSH
 685: LD_STRING 11_Lisa
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: CALL 13258 0 2
 695: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 708: LD_EXP 2
 712: PPUSH
 713: LD_INT 4
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end else
 723: GO 741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 725: LD_INT 4
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_INT 0
 736: PPUSH
 737: CALL 1132 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 741: LD_STRING 11_Donaldson
 743: PPUSH
 744: CALL_OW 28
 748: PUSH
 749: LD_INT 1
 751: EQUAL
 752: IFFALSE 799
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 754: LD_ADDR_EXP 3
 758: PUSH
 759: LD_STRING 11_Donaldson
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: CALL 13258 0 2
 769: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 770: LD_EXP 3
 774: PPUSH
 775: LD_INT 1
 777: PPUSH
 778: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 782: LD_EXP 3
 786: PPUSH
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 0
 792: PPUSH
 793: CALL_OW 49
// end else
 797: GO 815
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 799: LD_INT 4
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL 1132 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 815: LD_STRING 11_Cyrus
 817: PPUSH
 818: CALL_OW 28
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 873
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 828: LD_ADDR_EXP 5
 832: PUSH
 833: LD_STRING 11_Cyrus
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 13258 0 2
 843: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 844: LD_EXP 5
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 856: LD_EXP 5
 860: PPUSH
 861: LD_INT 4
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL_OW 49
// end else
 871: GO 889
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 873: LD_INT 4
 875: PPUSH
 876: LD_INT 0
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL 1132 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 889: LD_STRING 11_Denis
 891: PPUSH
 892: CALL_OW 28
 896: PUSH
 897: LD_INT 1
 899: EQUAL
 900: IFFALSE 947
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 902: LD_ADDR_EXP 6
 906: PUSH
 907: LD_STRING 11_Denis
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL 13258 0 2
 917: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 918: LD_EXP 6
 922: PPUSH
 923: LD_INT 4
 925: PPUSH
 926: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 930: LD_EXP 6
 934: PPUSH
 935: LD_INT 4
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: CALL_OW 49
// end else
 945: GO 963
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 947: LD_INT 4
 949: PPUSH
 950: LD_INT 0
 952: PPUSH
 953: LD_INT 1
 955: PPUSH
 956: LD_INT 0
 958: PPUSH
 959: CALL 1132 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 963: LD_STRING 11_Frank
 965: PPUSH
 966: CALL_OW 28
 970: PUSH
 971: LD_INT 1
 973: EQUAL
 974: IFFALSE 1021
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 976: LD_ADDR_EXP 12
 980: PUSH
 981: LD_STRING 11_Frank
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: CALL 13258 0 2
 991: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 992: LD_EXP 12
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1004: LD_EXP 12
1008: PPUSH
1009: LD_INT 4
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// end else
1019: GO 1037
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1021: LD_INT 4
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: LD_INT 1
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL 1132 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1037: LD_STRING 11_Cornell
1039: PPUSH
1040: CALL_OW 28
1044: PUSH
1045: LD_INT 1
1047: EQUAL
1048: IFFALSE 1095
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1050: LD_ADDR_EXP 10
1054: PUSH
1055: LD_STRING 11_Cornell
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: CALL 13258 0 2
1065: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1066: LD_EXP 10
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1078: LD_EXP 10
1082: PPUSH
1083: LD_INT 4
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL_OW 49
// end else
1093: GO 1111
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1095: LD_INT 4
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL 1132 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1111: LD_ADDR_EXP 22
1115: PUSH
1116: LD_STRING Powell
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL 13258 0 2
1126: ST_TO_ADDR
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
// if mech = 1 then
1139: LD_VAR 0 4
1143: PUSH
1144: LD_INT 1
1146: EQUAL
1147: IFFALSE 1384
// begin if others11 > 0 then
1149: LD_EXP 14
1153: PUSH
1154: LD_INT 0
1156: GREATER
1157: IFFALSE 1324
// begin for i := 1 to others11 - 1 do
1159: LD_ADDR_VAR 0 6
1163: PUSH
1164: DOUBLE
1165: LD_INT 1
1167: DEC
1168: ST_TO_ADDR
1169: LD_EXP 14
1173: PUSH
1174: LD_INT 1
1176: MINUS
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1261
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1181: LD_EXP 14
1185: PUSH
1186: LD_VAR 0 6
1190: ARRAY
1191: PPUSH
1192: LD_INT 3
1194: PPUSH
1195: CALL_OW 259
1199: PUSH
1200: LD_EXP 14
1204: PUSH
1205: LD_VAR 0 6
1209: PUSH
1210: LD_INT 1
1212: PLUS
1213: ARRAY
1214: PPUSH
1215: LD_INT 3
1217: PPUSH
1218: CALL_OW 259
1222: LESS
1223: IFFALSE 1259
// begin mecha = others11 [ i + 1 ] ;
1225: LD_ADDR_VAR 0 9
1229: PUSH
1230: LD_EXP 14
1234: PUSH
1235: LD_VAR 0 6
1239: PUSH
1240: LD_INT 1
1242: PLUS
1243: ARRAY
1244: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1245: LD_VAR 0 9
1249: PPUSH
1250: LD_INT 3
1252: PPUSH
1253: CALL_OW 336
// break ;
1257: GO 1261
// end ; end ;
1259: GO 1178
1261: POP
1262: POP
// if spawnMode = 1 then
1263: LD_VAR 0 3
1267: PUSH
1268: LD_INT 1
1270: EQUAL
1271: IFFALSE 1292
// PlaceUnitArea ( mecha , area , false ) else
1273: LD_VAR 0 9
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
1290: GO 1306
// PlaceHumanInUnit ( mecha , veh ) ;
1292: LD_VAR 0 9
1296: PPUSH
1297: LD_VAR 0 2
1301: PPUSH
1302: CALL_OW 52
// others11 = others11 diff mecha ;
1306: LD_ADDR_EXP 14
1310: PUSH
1311: LD_EXP 14
1315: PUSH
1316: LD_VAR 0 9
1320: DIFF
1321: ST_TO_ADDR
// end else
1322: GO 1382
// begin hc_name =  ;
1324: LD_ADDR_OWVAR 26
1328: PUSH
1329: LD_STRING 
1331: ST_TO_ADDR
// hc_gallery =  ;
1332: LD_ADDR_OWVAR 33
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1340: LD_INT 0
1342: PPUSH
1343: LD_INT 7
1345: PPUSH
1346: LD_INT 9
1348: PPUSH
1349: CALL_OW 12
1353: PPUSH
1354: CALL_OW 383
// un = CreateHuman ;
1358: LD_ADDR_VAR 0 7
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1368: LD_VAR 0 7
1372: PPUSH
1373: LD_VAR 0 2
1377: PPUSH
1378: CALL_OW 52
// end ; end else
1382: GO 1553
// begin if others11 > 0 then
1384: LD_EXP 14
1388: PUSH
1389: LD_INT 0
1391: GREATER
1392: IFFALSE 1465
// begin if spawnMode = 1 then
1394: LD_VAR 0 3
1398: PUSH
1399: LD_INT 1
1401: EQUAL
1402: IFFALSE 1427
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1404: LD_EXP 14
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: LD_VAR 0 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL_OW 49
1425: GO 1445
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1427: LD_EXP 14
1431: PUSH
1432: LD_INT 1
1434: ARRAY
1435: PPUSH
1436: LD_VAR 0 2
1440: PPUSH
1441: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1445: LD_ADDR_EXP 14
1449: PUSH
1450: LD_EXP 14
1454: PPUSH
1455: LD_INT 1
1457: PPUSH
1458: CALL_OW 3
1462: ST_TO_ADDR
// end else
1463: GO 1553
// begin hc_name =  ;
1465: LD_ADDR_OWVAR 26
1469: PUSH
1470: LD_STRING 
1472: ST_TO_ADDR
// hc_gallery =  ;
1473: LD_ADDR_OWVAR 33
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1481: LD_INT 0
1483: PPUSH
1484: LD_INT 1
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 4
1507: PPUSH
1508: CALL_OW 12
1512: ARRAY
1513: PPUSH
1514: LD_INT 7
1516: PPUSH
1517: LD_INT 9
1519: PPUSH
1520: CALL_OW 12
1524: PPUSH
1525: CALL_OW 380
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 7
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1539: LD_VAR 0 7
1543: PPUSH
1544: LD_VAR 0 2
1548: PPUSH
1549: CALL_OW 52
// end ; end ; end ;
1553: LD_VAR 0 5
1557: RET
// export function PrepareVehicles ; var veh ; begin
1558: LD_INT 0
1560: PPUSH
1561: PPUSH
// uc_side = 1 ;
1562: LD_ADDR_OWVAR 20
1566: PUSH
1567: LD_INT 1
1569: ST_TO_ADDR
// uc_nation = 1 ;
1570: LD_ADDR_OWVAR 21
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1578: LD_ADDR_OWVAR 37
1582: PUSH
1583: LD_INT 3
1585: ST_TO_ADDR
// vc_engine = 3 ;
1586: LD_ADDR_OWVAR 39
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_control = 3 ;
1594: LD_ADDR_OWVAR 38
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1602: LD_ADDR_OWVAR 40
1606: PUSH
1607: LD_INT 4
1609: ST_TO_ADDR
// veh = CreateVehicle ;
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: CALL_OW 45
1619: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1620: LD_VAR 0 2
1624: PPUSH
1625: LD_INT 4
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 49
// vc_weapon = us_double_gun ;
1635: LD_ADDR_OWVAR 40
1639: PUSH
1640: LD_INT 5
1642: ST_TO_ADDR
// vc_control = 1 ;
1643: LD_ADDR_OWVAR 38
1647: PUSH
1648: LD_INT 1
1650: ST_TO_ADDR
// veh = CreateVehicle ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: CALL_OW 45
1660: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1661: LD_VAR 0 2
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL_OW 49
// vc_weapon = us_light_gun ;
1676: LD_ADDR_OWVAR 40
1680: PUSH
1681: LD_INT 3
1683: ST_TO_ADDR
// vc_control = 3 ;
1684: LD_ADDR_OWVAR 38
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1692: LD_ADDR_OWVAR 37
1696: PUSH
1697: LD_INT 2
1699: ST_TO_ADDR
// veh = CreateVehicle ;
1700: LD_ADDR_VAR 0 2
1704: PUSH
1705: CALL_OW 45
1709: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1710: LD_VAR 0 2
1714: PPUSH
1715: LD_INT 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1725: LD_ADDR_OWVAR 40
1729: PUSH
1730: LD_INT 4
1732: ST_TO_ADDR
// veh = CreateVehicle ;
1733: LD_ADDR_VAR 0 2
1737: PUSH
1738: CALL_OW 45
1742: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1743: LD_VAR 0 2
1747: PPUSH
1748: LD_INT 4
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 49
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PowellSupport1 ; var veh , un ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 1 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1784: LD_STRING 11_Brown
1786: PPUSH
1787: CALL_OW 28
1791: PUSH
1792: LD_INT 1
1794: EQUAL
1795: IFFALSE 1842
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1797: LD_ADDR_EXP 7
1801: PUSH
1802: LD_STRING 11_Brown
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: CALL 13258 0 2
1812: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1813: LD_EXP 7
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1825: LD_EXP 7
1829: PPUSH
1830: LD_INT 4
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 49
// end else
1840: GO 1858
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1842: LD_INT 4
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL 1132 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1858: LD_STRING 11_Gary
1860: PPUSH
1861: CALL_OW 28
1865: PUSH
1866: LD_INT 1
1868: EQUAL
1869: IFFALSE 1916
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1871: LD_ADDR_EXP 11
1875: PUSH
1876: LD_STRING 11_Gary
1878: PPUSH
1879: LD_INT 1
1881: PPUSH
1882: CALL 13258 0 2
1886: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1887: LD_EXP 11
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1899: LD_EXP 11
1903: PPUSH
1904: LD_INT 4
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 49
// end else
1914: GO 1932
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1916: LD_INT 4
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL 1132 0 4
// end ; vc_chassis = us_medium_tracked ;
1932: LD_ADDR_OWVAR 37
1936: PUSH
1937: LD_INT 3
1939: ST_TO_ADDR
// vc_engine = 3 ;
1940: LD_ADDR_OWVAR 39
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_control = 1 ;
1948: LD_ADDR_OWVAR 38
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// vc_weapon = us_crane ;
1956: LD_ADDR_OWVAR 40
1960: PUSH
1961: LD_INT 13
1963: ST_TO_ADDR
// veh = CreateVehicle ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: CALL_OW 45
1973: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_INT 4
1981: PPUSH
1982: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1986: LD_VAR 0 2
1990: PPUSH
1991: LD_INT 4
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2001: LD_INT 4
2003: PPUSH
2004: LD_VAR 0 2
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: CALL 1132 0 4
// vc_weapon = 9 ;
2019: LD_ADDR_OWVAR 40
2023: PUSH
2024: LD_INT 9
2026: ST_TO_ADDR
// veh = CreateVehicle ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: CALL_OW 45
2036: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2037: LD_VAR 0 2
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_INT 4
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2064: LD_INT 4
2066: PPUSH
2067: LD_VAR 0 2
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: CALL 1132 0 4
// vc_control = 3 ;
2082: LD_ADDR_OWVAR 38
2086: PUSH
2087: LD_INT 3
2089: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2090: LD_ADDR_OWVAR 40
2094: PUSH
2095: LD_INT 12
2097: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2098: LD_ADDR_EXP 15
2102: PUSH
2103: CALL_OW 45
2107: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2108: LD_ADDR_EXP 16
2112: PUSH
2113: CALL_OW 45
2117: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2118: LD_EXP 15
2122: PPUSH
2123: LD_INT 4
2125: PPUSH
2126: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2130: LD_EXP 16
2134: PPUSH
2135: LD_INT 4
2137: PPUSH
2138: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2142: LD_EXP 15
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: LD_INT 0
2152: PPUSH
2153: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2157: LD_EXP 16
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2172: LD_EXP 15
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: LD_INT 100
2182: PPUSH
2183: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2187: LD_EXP 16
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 80
2197: PPUSH
2198: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2202: LD_EXP 16
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_INT 20
2212: PPUSH
2213: CALL_OW 291
// end ;
2217: LD_VAR 0 1
2221: RET
// export function PowellSupport2 ; var veh , un ; begin
2222: LD_INT 0
2224: PPUSH
2225: PPUSH
2226: PPUSH
// uc_side = 1 ;
2227: LD_ADDR_OWVAR 20
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// uc_nation = 1 ;
2235: LD_ADDR_OWVAR 21
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2243: LD_ADDR_OWVAR 37
2247: PUSH
2248: LD_INT 2
2250: ST_TO_ADDR
// vc_engine = 3 ;
2251: LD_ADDR_OWVAR 39
2255: PUSH
2256: LD_INT 3
2258: ST_TO_ADDR
// vc_control = 3 ;
2259: LD_ADDR_OWVAR 38
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2267: LD_ADDR_OWVAR 40
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// veh = CreateVehicle ;
2275: LD_ADDR_VAR 0 2
2279: PUSH
2280: CALL_OW 45
2284: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2285: LD_VAR 0 2
2289: PPUSH
2290: LD_INT 4
2292: PPUSH
2293: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_INT 4
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// vc_control = 1 ;
2312: LD_ADDR_OWVAR 38
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2320: LD_ADDR_OWVAR 37
2324: PUSH
2325: LD_INT 2
2327: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2328: LD_ADDR_OWVAR 40
2332: PUSH
2333: LD_INT 5
2335: ST_TO_ADDR
// veh = CreateVehicle ;
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: CALL_OW 45
2345: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_INT 4
2353: PPUSH
2354: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2358: LD_VAR 0 2
2362: PPUSH
2363: LD_INT 4
2365: PPUSH
2366: LD_INT 0
2368: PPUSH
2369: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2373: LD_STRING 11_Bobby
2375: PPUSH
2376: CALL_OW 28
2380: PUSH
2381: LD_INT 1
2383: EQUAL
2384: IFFALSE 2430
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2386: LD_ADDR_EXP 4
2390: PUSH
2391: LD_STRING 11_Bobby
2393: PPUSH
2394: LD_INT 1
2396: PPUSH
2397: CALL 13258 0 2
2401: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2402: LD_EXP 4
2406: PPUSH
2407: LD_INT 3
2409: PPUSH
2410: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2414: LD_EXP 4
2418: PPUSH
2419: LD_VAR 0 2
2423: PPUSH
2424: CALL_OW 52
// end else
2428: GO 2448
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2430: LD_INT 0
2432: PPUSH
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_INT 2
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL 1132 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2448: LD_STRING 11_Houten
2450: PPUSH
2451: CALL_OW 28
2455: PUSH
2456: LD_INT 1
2458: EQUAL
2459: IFFALSE 2506
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2461: LD_ADDR_EXP 9
2465: PUSH
2466: LD_STRING 11_Houten
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL 13258 0 2
2476: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2477: LD_EXP 9
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2489: LD_EXP 9
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end else
2504: GO 2522
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2506: LD_INT 4
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 1132 0 4
// end ; vc_control = 3 ;
2522: LD_ADDR_OWVAR 38
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2530: LD_ADDR_OWVAR 40
2534: PUSH
2535: LD_INT 12
2537: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2538: LD_ADDR_EXP 17
2542: PUSH
2543: CALL_OW 45
2547: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2548: LD_EXP 17
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 233
// amCargo4 = CreateVehicle ;
2560: LD_ADDR_EXP 18
2564: PUSH
2565: CALL_OW 45
2569: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2570: LD_EXP 18
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: CALL_OW 233
// amCargo5 = CreateVehicle ;
2582: LD_ADDR_EXP 19
2586: PUSH
2587: CALL_OW 45
2591: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2592: LD_EXP 19
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2604: LD_EXP 17
2608: PPUSH
2609: LD_INT 4
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2619: LD_EXP 18
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2634: LD_EXP 19
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// if kurtStatus > 0 then
2649: LD_EXP 27
2653: PUSH
2654: LD_INT 0
2656: GREATER
2657: IFFALSE 2706
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2659: LD_EXP 17
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: LD_INT 100
2669: PPUSH
2670: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2674: LD_EXP 18
2678: PPUSH
2679: LD_INT 1
2681: PPUSH
2682: LD_INT 100
2684: PPUSH
2685: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2689: LD_EXP 19
2693: PPUSH
2694: LD_INT 3
2696: PPUSH
2697: LD_INT 80
2699: PPUSH
2700: CALL_OW 291
// end else
2704: GO 2751
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2706: LD_EXP 17
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: LD_INT 100
2716: PPUSH
2717: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2721: LD_EXP 18
2725: PPUSH
2726: LD_INT 3
2728: PPUSH
2729: LD_INT 60
2731: PPUSH
2732: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2736: LD_EXP 19
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 100
2746: PPUSH
2747: CALL_OW 291
// end ; end ;
2751: LD_VAR 0 1
2755: RET
// export function PowellSupport3 ; var veh , un ; begin
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
// uc_side = 1 ;
2761: LD_ADDR_OWVAR 20
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// uc_nation = 1 ;
2769: LD_ADDR_OWVAR 21
2773: PUSH
2774: LD_INT 1
2776: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2777: LD_INT 4
2779: PPUSH
2780: LD_INT 0
2782: PPUSH
2783: LD_INT 1
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL 1132 0 4
// vc_chassis = us_medium_wheeled ;
2793: LD_ADDR_OWVAR 37
2797: PUSH
2798: LD_INT 2
2800: ST_TO_ADDR
// vc_engine = 3 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 3
2808: ST_TO_ADDR
// vc_control = 3 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 12
2824: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2825: LD_ADDR_EXP 20
2829: PUSH
2830: CALL_OW 45
2834: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2835: LD_ADDR_EXP 21
2839: PUSH
2840: CALL_OW 45
2844: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2845: LD_EXP 20
2849: PPUSH
2850: LD_INT 4
2852: PPUSH
2853: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2857: LD_EXP 21
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2869: LD_EXP 20
2873: PPUSH
2874: LD_INT 4
2876: PPUSH
2877: LD_INT 0
2879: PPUSH
2880: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2884: LD_EXP 21
2888: PPUSH
2889: LD_INT 4
2891: PPUSH
2892: LD_INT 0
2894: PPUSH
2895: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2899: LD_EXP 20
2903: PPUSH
2904: LD_INT 1
2906: PPUSH
2907: LD_INT 100
2909: PPUSH
2910: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
2914: LD_EXP 21
2918: PPUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 100
2924: PPUSH
2925: CALL_OW 291
// end ; end_of_file
2929: LD_VAR 0 1
2933: RET
// export function PrepareRussianCommander ; begin
2934: LD_INT 0
2936: PPUSH
// uc_side = 3 ;
2937: LD_ADDR_OWVAR 20
2941: PUSH
2942: LD_INT 3
2944: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2945: LD_ADDR_EXP 23
2949: PUSH
2950: LD_STRING Davidov
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL 13258 0 2
2960: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2961: LD_EXP 23
2965: PPUSH
2966: LD_INT 3
2968: PPUSH
2969: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2973: LD_ADDR_EXP 35
2977: PUSH
2978: LD_EXP 35
2982: PUSH
2983: LD_EXP 23
2987: ADD
2988: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2989: LD_EXP 35
2993: PPUSH
2994: LD_INT 4
2996: PPUSH
2997: CALL_OW 336
// end ;
3001: LD_VAR 0 1
3005: RET
// export function PrepareEastBase ; var i , un ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3011: LD_INT 3
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 121
3019: PPUSH
3020: LD_EXP 37
3024: PPUSH
3025: LD_EXP 38
3029: PPUSH
3030: CALL_OW 12
3034: PPUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL 14050 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 3
3050: PPUSH
3051: LD_INT 121
3053: PPUSH
3054: LD_EXP 37
3058: PPUSH
3059: LD_EXP 38
3063: PPUSH
3064: CALL_OW 12
3068: PPUSH
3069: LD_INT 9
3071: PPUSH
3072: LD_INT 3
3074: PPUSH
3075: CALL 14050 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3079: LD_INT 3
3081: PPUSH
3082: LD_INT 3
3084: PPUSH
3085: LD_INT 4
3087: PPUSH
3088: LD_EXP 37
3092: PPUSH
3093: LD_EXP 38
3097: PPUSH
3098: CALL_OW 12
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: LD_INT 6
3108: PPUSH
3109: CALL 14050 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: LD_INT 112
3121: PPUSH
3122: LD_EXP 37
3126: PPUSH
3127: LD_EXP 38
3131: PPUSH
3132: CALL_OW 12
3136: PPUSH
3137: LD_INT 3
3139: PPUSH
3140: LD_INT 6
3142: PPUSH
3143: CALL 14050 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3147: LD_INT 3
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_INT 47
3155: PPUSH
3156: LD_EXP 37
3160: PPUSH
3161: LD_EXP 38
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: LD_INT 4
3173: PPUSH
3174: LD_INT 6
3176: PPUSH
3177: CALL 14050 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 129
3189: PPUSH
3190: LD_EXP 37
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 6
3210: PPUSH
3211: CALL 14050 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 135
3223: PPUSH
3224: LD_EXP 37
3228: PPUSH
3229: LD_EXP 38
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 4
3241: PPUSH
3242: LD_INT 6
3244: PPUSH
3245: CALL 14050 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 22
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 30
3266: PUSH
3267: LD_INT 32
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PPUSH
3278: CALL_OW 69
3282: PUSH
3283: FOR_IN
3284: IFFALSE 3324
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 3
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 37
3301: PPUSH
3302: LD_EXP 38
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: CALL 14050 0 6
3322: GO 3283
3324: POP
3325: POP
// for i = 1 to 5 do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: DOUBLE
3332: LD_INT 1
3334: DEC
3335: ST_TO_ADDR
3336: LD_INT 5
3338: PUSH
3339: FOR_TO
3340: IFFALSE 3439
// begin uc_side = 3 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 3
3349: ST_TO_ADDR
// uc_nation = 3 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 3
3357: ST_TO_ADDR
// hc_gallery =  ;
3358: LD_ADDR_OWVAR 33
3362: PUSH
3363: LD_STRING 
3365: ST_TO_ADDR
// hc_name =  ;
3366: LD_ADDR_OWVAR 26
3370: PUSH
3371: LD_STRING 
3373: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3374: LD_INT 0
3376: PPUSH
3377: LD_INT 4
3379: PPUSH
3380: LD_EXP 37
3384: PPUSH
3385: LD_EXP 38
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: CALL_OW 380
// un = CreateHuman ;
3399: LD_ADDR_VAR 0 3
3403: PUSH
3404: CALL_OW 44
3408: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3409: LD_VAR 0 3
3413: PPUSH
3414: LD_INT 3
3416: PPUSH
3417: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3421: LD_ADDR_EXP 35
3425: PUSH
3426: LD_EXP 35
3430: PUSH
3431: LD_VAR 0 3
3435: ADD
3436: ST_TO_ADDR
// end ;
3437: GO 3339
3439: POP
3440: POP
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareWestBase ; var i , un ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
3450: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 3
3456: PPUSH
3457: LD_INT 6
3459: PPUSH
3460: LD_EXP 37
3464: PPUSH
3465: LD_EXP 38
3469: PPUSH
3470: CALL_OW 12
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: LD_INT 3
3480: PPUSH
3481: CALL 14050 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3485: LD_INT 3
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: LD_INT 91
3493: PPUSH
3494: LD_EXP 37
3498: PPUSH
3499: LD_EXP 38
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: LD_INT 4
3511: PPUSH
3512: LD_INT 3
3514: PPUSH
3515: CALL 14050 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3519: LD_INT 3
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: LD_INT 21
3527: PPUSH
3528: LD_EXP 37
3532: PPUSH
3533: LD_EXP 38
3537: PPUSH
3538: CALL_OW 12
3542: PPUSH
3543: LD_INT 3
3545: PPUSH
3546: LD_INT 6
3548: PPUSH
3549: CALL 14050 0 6
// end ;
3553: LD_VAR 0 1
3557: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
// uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// for i = 1 to 5 do
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: DOUBLE
3586: LD_INT 1
3588: DEC
3589: ST_TO_ADDR
3590: LD_INT 5
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3664
// begin hc_gallery =  ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING 
3603: ST_TO_ADDR
// hc_name =  ;
3604: LD_ADDR_OWVAR 26
3608: PUSH
3609: LD_STRING 
3611: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3612: LD_INT 0
3614: PPUSH
3615: LD_INT 9
3617: PPUSH
3618: LD_EXP 37
3622: PPUSH
3623: LD_EXP 38
3627: PPUSH
3628: CALL_OW 12
3632: PPUSH
3633: CALL_OW 380
// un = CreateHuman ;
3637: LD_ADDR_VAR 0 3
3641: PUSH
3642: CALL_OW 44
3646: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3647: LD_VAR 0 3
3651: PPUSH
3652: LD_INT 8
3654: PPUSH
3655: LD_INT 0
3657: PPUSH
3658: CALL_OW 49
// end ;
3662: GO 3593
3664: POP
3665: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3666: LD_ADDR_VAR 0 2
3670: PUSH
3671: DOUBLE
3672: LD_INT 1
3674: DEC
3675: ST_TO_ADDR
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: LD_OWVAR 67
3694: ARRAY
3695: PUSH
3696: FOR_TO
3697: IFFALSE 3767
// begin hc_gallery =  ;
3699: LD_ADDR_OWVAR 33
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// hc_name =  ;
3707: LD_ADDR_OWVAR 26
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3715: LD_INT 0
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: LD_EXP 38
3730: PPUSH
3731: CALL_OW 12
3735: PPUSH
3736: CALL_OW 380
// un = CreateHuman ;
3740: LD_ADDR_VAR 0 3
3744: PUSH
3745: CALL_OW 44
3749: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3750: LD_VAR 0 3
3754: PPUSH
3755: LD_INT 8
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: CALL_OW 49
// end ;
3765: GO 3696
3767: POP
3768: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3769: LD_ADDR_VAR 0 2
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3996
// begin vc_engine = 3 ;
3802: LD_ADDR_OWVAR 39
3806: PUSH
3807: LD_INT 3
3809: ST_TO_ADDR
// vc_control = 1 ;
3810: LD_ADDR_OWVAR 38
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3818: LD_ADDR_OWVAR 40
3822: PUSH
3823: LD_INT 42
3825: PUSH
3826: LD_INT 43
3828: PUSH
3829: LD_INT 44
3831: PUSH
3832: LD_INT 45
3834: PUSH
3835: LD_INT 46
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 5
3850: PPUSH
3851: CALL_OW 12
3855: ARRAY
3856: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3857: LD_OWVAR 40
3861: PUSH
3862: LD_INT 46
3864: EQUAL
3865: IFFALSE 3877
// vc_chassis = ru_heavy_tracked else
3867: LD_ADDR_OWVAR 37
3871: PUSH
3872: LD_INT 24
3874: ST_TO_ADDR
3875: GO 3904
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3877: LD_ADDR_OWVAR 37
3881: PUSH
3882: LD_INT 22
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 2
3897: PPUSH
3898: CALL_OW 12
3902: ARRAY
3903: ST_TO_ADDR
// veh = CreateVehicle ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: CALL_OW 45
3913: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3914: LD_VAR 0 4
3918: PPUSH
3919: LD_INT 3
3921: PPUSH
3922: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_INT 5
3933: PPUSH
3934: LD_INT 0
3936: PPUSH
3937: CALL_OW 49
// hc_gallery =  ;
3941: LD_ADDR_OWVAR 33
3945: PUSH
3946: LD_STRING 
3948: ST_TO_ADDR
// hc_name =  ;
3949: LD_ADDR_OWVAR 26
3953: PUSH
3954: LD_STRING 
3956: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3957: LD_INT 0
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: LD_INT 10
3965: PPUSH
3966: CALL_OW 380
// un = CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 4
3989: PPUSH
3990: CALL_OW 52
// end ;
3994: GO 3799
3996: POP
3997: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: DOUBLE
4004: LD_INT 1
4006: DEC
4007: ST_TO_ADDR
4008: LD_INT 3
4010: PUSH
4011: LD_INT 4
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: PUSH
4022: LD_OWVAR 67
4026: ARRAY
4027: PUSH
4028: FOR_TO
4029: IFFALSE 4176
// begin vc_engine = 3 ;
4031: LD_ADDR_OWVAR 39
4035: PUSH
4036: LD_INT 3
4038: ST_TO_ADDR
// vc_control = 3 ;
4039: LD_ADDR_OWVAR 38
4043: PUSH
4044: LD_INT 3
4046: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4047: LD_ADDR_OWVAR 40
4051: PUSH
4052: LD_INT 42
4054: PUSH
4055: LD_INT 43
4057: PUSH
4058: LD_INT 44
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 49
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 1
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 12
4088: ARRAY
4089: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4090: LD_OWVAR 40
4094: PUSH
4095: LD_INT 46
4097: EQUAL
4098: IFFALSE 4110
// vc_chassis = ru_heavy_tracked else
4100: LD_ADDR_OWVAR 37
4104: PUSH
4105: LD_INT 24
4107: ST_TO_ADDR
4108: GO 4137
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4110: LD_ADDR_OWVAR 37
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 21
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 1
4127: PPUSH
4128: LD_INT 2
4130: PPUSH
4131: CALL_OW 12
4135: ARRAY
4136: ST_TO_ADDR
// veh = CreateVehicle ;
4137: LD_ADDR_VAR 0 4
4141: PUSH
4142: CALL_OW 45
4146: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4159: LD_VAR 0 4
4163: PPUSH
4164: LD_INT 6
4166: PPUSH
4167: LD_INT 0
4169: PPUSH
4170: CALL_OW 49
// end ;
4174: GO 4028
4176: POP
4177: POP
// end ; end_of_file
4178: LD_VAR 0 1
4182: RET
// export function PrepareKurt ; begin
4183: LD_INT 0
4185: PPUSH
// uc_side = 8 ;
4186: LD_ADDR_OWVAR 20
4190: PUSH
4191: LD_INT 8
4193: ST_TO_ADDR
// uc_nation = 2 ;
4194: LD_ADDR_OWVAR 21
4198: PUSH
4199: LD_INT 2
4201: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4202: LD_ADDR_OWVAR 37
4206: PUSH
4207: LD_INT 13
4209: ST_TO_ADDR
// vc_engine = 1 ;
4210: LD_ADDR_OWVAR 39
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// vc_control = 1 ;
4218: LD_ADDR_OWVAR 38
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// vc_weapon = 24 ;
4226: LD_ADDR_OWVAR 40
4230: PUSH
4231: LD_INT 24
4233: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4234: LD_ADDR_EXP 26
4238: PUSH
4239: CALL_OW 45
4243: ST_TO_ADDR
// if kurtStatus > 0 then
4244: LD_EXP 27
4248: PUSH
4249: LD_INT 0
4251: GREATER
4252: IFFALSE 4301
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4254: LD_ADDR_EXP 24
4258: PUSH
4259: LD_STRING Kurt
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL 13258 0 2
4269: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4270: LD_EXP 26
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4285: LD_EXP 24
4289: PPUSH
4290: LD_EXP 26
4294: PPUSH
4295: CALL_OW 52
// end else
4299: GO 4366
// begin hc_name =  ;
4301: LD_ADDR_OWVAR 26
4305: PUSH
4306: LD_STRING 
4308: ST_TO_ADDR
// hc_gallery =  ;
4309: LD_ADDR_OWVAR 33
4313: PUSH
4314: LD_STRING 
4316: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4317: LD_INT 1
4319: PPUSH
4320: LD_INT 10
4322: PPUSH
4323: CALL_OW 381
// otherKurt = CreateHuman ;
4327: LD_ADDR_EXP 25
4331: PUSH
4332: CALL_OW 44
4336: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4337: LD_EXP 26
4341: PPUSH
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4352: LD_EXP 25
4356: PPUSH
4357: LD_EXP 26
4361: PPUSH
4362: CALL_OW 52
// end ; end ;
4366: LD_VAR 0 1
4370: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
// for i = 1 to 3 do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_INT 3
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4528
// begin uc_side = 1 ;
4393: LD_ADDR_OWVAR 20
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// uc_nation = 2 ;
4401: LD_ADDR_OWVAR 21
4405: PUSH
4406: LD_INT 2
4408: ST_TO_ADDR
// hc_gallery =  ;
4409: LD_ADDR_OWVAR 33
4413: PUSH
4414: LD_STRING 
4416: ST_TO_ADDR
// hc_name =  ;
4417: LD_ADDR_OWVAR 26
4421: PUSH
4422: LD_STRING 
4424: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4425: LD_EXP 27
4429: PUSH
4430: LD_INT 0
4432: EQUAL
4433: PUSH
4434: LD_EXP 27
4438: PUSH
4439: LD_INT 2
4441: EQUAL
4442: OR
4443: IFFALSE 4468
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: LD_INT 2
4453: PPUSH
4454: LD_INT 4
4456: PPUSH
4457: CALL_OW 12
4461: PPUSH
4462: CALL_OW 380
4466: GO 4489
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4468: LD_INT 0
4470: PPUSH
4471: LD_INT 1
4473: PPUSH
4474: LD_INT 6
4476: PPUSH
4477: LD_INT 8
4479: PPUSH
4480: CALL_OW 12
4484: PPUSH
4485: CALL_OW 380
// un = CreateHuman ;
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: CALL_OW 44
4498: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 4
4506: PPUSH
4507: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4511: LD_VAR 0 3
4515: PPUSH
4516: LD_INT 4
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: CALL_OW 49
// end ;
4526: GO 4390
4528: POP
4529: POP
// vc_chassis = 14 ;
4530: LD_ADDR_OWVAR 37
4534: PUSH
4535: LD_INT 14
4537: ST_TO_ADDR
// vc_engine = 3 ;
4538: LD_ADDR_OWVAR 39
4542: PUSH
4543: LD_INT 3
4545: ST_TO_ADDR
// vc_control = 1 ;
4546: LD_ADDR_OWVAR 38
4550: PUSH
4551: LD_INT 1
4553: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4554: LD_ADDR_OWVAR 40
4558: PUSH
4559: LD_INT 27
4561: PUSH
4562: LD_INT 26
4564: PUSH
4565: LD_INT 28
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 1
4575: PPUSH
4576: LD_INT 3
4578: PPUSH
4579: CALL_OW 12
4583: ARRAY
4584: ST_TO_ADDR
// veh = CreateVehicle ;
4585: LD_ADDR_VAR 0 4
4589: PUSH
4590: CALL_OW 45
4594: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4595: LD_VAR 0 4
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4607: LD_VAR 0 4
4611: PPUSH
4612: LD_INT 4
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4622: LD_EXP 27
4626: PUSH
4627: LD_INT 0
4629: EQUAL
4630: PUSH
4631: LD_EXP 27
4635: PUSH
4636: LD_INT 2
4638: EQUAL
4639: OR
4640: IFFALSE 4665
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4642: LD_INT 0
4644: PPUSH
4645: LD_INT 3
4647: PPUSH
4648: LD_INT 2
4650: PPUSH
4651: LD_INT 4
4653: PPUSH
4654: CALL_OW 12
4658: PPUSH
4659: CALL_OW 380
4663: GO 4686
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4665: LD_INT 0
4667: PPUSH
4668: LD_INT 3
4670: PPUSH
4671: LD_INT 6
4673: PPUSH
4674: LD_INT 8
4676: PPUSH
4677: CALL_OW 12
4681: PPUSH
4682: CALL_OW 380
// un = CreateHuman ;
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: CALL_OW 44
4695: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_VAR 0 4
4705: PPUSH
4706: CALL_OW 52
// vc_chassis = 14 ;
4710: LD_ADDR_OWVAR 37
4714: PUSH
4715: LD_INT 14
4717: ST_TO_ADDR
// vc_engine = 3 ;
4718: LD_ADDR_OWVAR 39
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// vc_control = 1 ;
4726: LD_ADDR_OWVAR 38
4730: PUSH
4731: LD_INT 1
4733: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4734: LD_ADDR_OWVAR 40
4738: PUSH
4739: LD_INT 27
4741: PUSH
4742: LD_INT 26
4744: PUSH
4745: LD_INT 28
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 1
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 12
4763: ARRAY
4764: ST_TO_ADDR
// veh = CreateVehicle ;
4765: LD_ADDR_VAR 0 4
4769: PUSH
4770: CALL_OW 45
4774: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4775: LD_VAR 0 4
4779: PPUSH
4780: LD_INT 4
4782: PPUSH
4783: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4787: LD_VAR 0 4
4791: PPUSH
4792: LD_INT 4
4794: PPUSH
4795: LD_INT 0
4797: PPUSH
4798: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4802: LD_EXP 27
4806: PUSH
4807: LD_INT 0
4809: EQUAL
4810: PUSH
4811: LD_EXP 27
4815: PUSH
4816: LD_INT 2
4818: EQUAL
4819: OR
4820: IFFALSE 4845
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4822: LD_INT 0
4824: PPUSH
4825: LD_INT 4
4827: PPUSH
4828: LD_INT 2
4830: PPUSH
4831: LD_INT 4
4833: PPUSH
4834: CALL_OW 12
4838: PPUSH
4839: CALL_OW 380
4843: GO 4866
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4845: LD_INT 0
4847: PPUSH
4848: LD_INT 4
4850: PPUSH
4851: LD_INT 6
4853: PPUSH
4854: LD_INT 8
4856: PPUSH
4857: CALL_OW 12
4861: PPUSH
4862: CALL_OW 380
// un = CreateHuman ;
4866: LD_ADDR_VAR 0 3
4870: PUSH
4871: CALL_OW 44
4875: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4876: LD_VAR 0 3
4880: PPUSH
4881: LD_INT 4
4883: PPUSH
4884: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4888: LD_VAR 0 3
4892: PPUSH
4893: LD_VAR 0 4
4897: PPUSH
4898: CALL_OW 52
// vc_chassis = 14 ;
4902: LD_ADDR_OWVAR 37
4906: PUSH
4907: LD_INT 14
4909: ST_TO_ADDR
// vc_engine = 3 ;
4910: LD_ADDR_OWVAR 39
4914: PUSH
4915: LD_INT 3
4917: ST_TO_ADDR
// vc_control = 1 ;
4918: LD_ADDR_OWVAR 38
4922: PUSH
4923: LD_INT 1
4925: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4926: LD_ADDR_OWVAR 40
4930: PUSH
4931: LD_INT 27
4933: PUSH
4934: LD_INT 26
4936: PUSH
4937: LD_INT 28
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 1
4947: PPUSH
4948: LD_INT 3
4950: PPUSH
4951: CALL_OW 12
4955: ARRAY
4956: ST_TO_ADDR
// veh = CreateVehicle ;
4957: LD_ADDR_VAR 0 4
4961: PUSH
4962: CALL_OW 45
4966: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4967: LD_VAR 0 4
4971: PPUSH
4972: LD_INT 4
4974: PPUSH
4975: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4979: LD_VAR 0 4
4983: PPUSH
4984: LD_INT 4
4986: PPUSH
4987: LD_INT 0
4989: PPUSH
4990: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4994: LD_EXP 27
4998: PUSH
4999: LD_INT 0
5001: EQUAL
5002: PUSH
5003: LD_EXP 27
5007: PUSH
5008: LD_INT 2
5010: EQUAL
5011: OR
5012: IFFALSE 5037
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
5014: LD_INT 0
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: LD_INT 2
5022: PPUSH
5023: LD_INT 4
5025: PPUSH
5026: CALL_OW 12
5030: PPUSH
5031: CALL_OW 380
5035: GO 5058
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
5037: LD_INT 0
5039: PPUSH
5040: LD_INT 2
5042: PPUSH
5043: LD_INT 6
5045: PPUSH
5046: LD_INT 8
5048: PPUSH
5049: CALL_OW 12
5053: PPUSH
5054: CALL_OW 380
// un = CreateHuman ;
5058: LD_ADDR_VAR 0 3
5062: PUSH
5063: CALL_OW 44
5067: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5068: LD_VAR 0 3
5072: PPUSH
5073: LD_INT 4
5075: PPUSH
5076: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5080: LD_VAR 0 3
5084: PPUSH
5085: LD_VAR 0 4
5089: PPUSH
5090: CALL_OW 52
// end ;
5094: LD_VAR 0 1
5098: RET
// export function PrepareAttackLegion ; var i , un ; begin
5099: LD_INT 0
5101: PPUSH
5102: PPUSH
5103: PPUSH
// for i = 1 to 4 do
5104: LD_ADDR_VAR 0 2
5108: PUSH
5109: DOUBLE
5110: LD_INT 1
5112: DEC
5113: ST_TO_ADDR
5114: LD_INT 4
5116: PUSH
5117: FOR_TO
5118: IFFALSE 5228
// begin uc_side = 8 ;
5120: LD_ADDR_OWVAR 20
5124: PUSH
5125: LD_INT 8
5127: ST_TO_ADDR
// uc_nation = 2 ;
5128: LD_ADDR_OWVAR 21
5132: PUSH
5133: LD_INT 2
5135: ST_TO_ADDR
// hc_gallery =  ;
5136: LD_ADDR_OWVAR 33
5140: PUSH
5141: LD_STRING 
5143: ST_TO_ADDR
// hc_name =  ;
5144: LD_ADDR_OWVAR 26
5148: PUSH
5149: LD_STRING 
5151: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5152: LD_INT 0
5154: PPUSH
5155: LD_INT 1
5157: PUSH
5158: LD_INT 8
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 1
5167: PPUSH
5168: LD_INT 2
5170: PPUSH
5171: CALL_OW 12
5175: ARRAY
5176: PPUSH
5177: LD_INT 6
5179: PPUSH
5180: LD_INT 8
5182: PPUSH
5183: CALL_OW 12
5187: PPUSH
5188: CALL_OW 380
// un = CreateHuman ;
5192: LD_ADDR_VAR 0 3
5196: PUSH
5197: CALL_OW 44
5201: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5202: LD_VAR 0 3
5206: PPUSH
5207: LD_INT 19
5209: PPUSH
5210: LD_INT 0
5212: PPUSH
5213: CALL_OW 49
// ComCrawl ( un ) ;
5217: LD_VAR 0 3
5221: PPUSH
5222: CALL_OW 137
// end ;
5226: GO 5117
5228: POP
5229: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5230: LD_INT 1
5232: PPUSH
5233: LD_INT 8
5235: PPUSH
5236: LD_INT 2
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5246: LD_INT 20
5248: PPUSH
5249: LD_INT 3
5251: PPUSH
5252: CALL 16751 0 2
// end ; end_of_file
5256: LD_VAR 0 1
5260: RET
// every 1 do var i ;
5261: GO 5263
5263: DISABLE
5264: LD_INT 0
5266: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5267: LD_INT 10
5269: PPUSH
5270: LD_INT 122
5272: PPUSH
5273: LD_INT 145
5275: PPUSH
5276: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5280: LD_INT 137
5282: PPUSH
5283: LD_INT 84
5285: PPUSH
5286: LD_INT 61
5288: PPUSH
5289: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5293: LD_EXP 1
5297: PPUSH
5298: CALL_OW 310
5302: PPUSH
5303: CALL_OW 87
// InGameOn ;
5307: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 69
5325: PPUSH
5326: LD_INT 130
5328: PPUSH
5329: LD_INT 103
5331: PPUSH
5332: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: LD_INT 114
5343: PPUSH
5344: LD_INT 102
5346: PPUSH
5347: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5351: LD_EXP 1
5355: PPUSH
5356: LD_STRING D1-JMM-1
5358: PPUSH
5359: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5363: LD_EXP 1
5367: PPUSH
5368: CALL_OW 310
5372: PPUSH
5373: CALL_OW 87
// if IsOk ( Donaldson ) then
5377: LD_EXP 3
5381: PPUSH
5382: CALL_OW 302
5386: IFFALSE 5466
// begin Say ( Donaldson , D1-Don-1 ) ;
5388: LD_EXP 3
5392: PPUSH
5393: LD_STRING D1-Don-1
5395: PPUSH
5396: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5400: LD_EXP 1
5404: PPUSH
5405: CALL_OW 310
5409: PPUSH
5410: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5414: LD_EXP 1
5418: PPUSH
5419: LD_STRING D1-JMM-2
5421: PPUSH
5422: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5426: LD_EXP 1
5430: PPUSH
5431: CALL_OW 310
5435: PPUSH
5436: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5440: LD_EXP 3
5444: PPUSH
5445: LD_STRING D1-Don-2
5447: PPUSH
5448: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5452: LD_EXP 1
5456: PPUSH
5457: CALL_OW 310
5461: PPUSH
5462: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5466: LD_INT 22
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 69
5480: PPUSH
5481: LD_INT 110
5483: PPUSH
5484: LD_INT 101
5486: PPUSH
5487: CALL_OW 171
// wait ( 0 0$1 ) ;
5491: LD_INT 35
5493: PPUSH
5494: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5498: LD_EXP 1
5502: PPUSH
5503: CALL_OW 310
5507: PPUSH
5508: CALL_OW 87
// wait ( 0 0$1 ) ;
5512: LD_INT 35
5514: PPUSH
5515: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5519: LD_EXP 1
5523: PPUSH
5524: CALL_OW 310
5528: PPUSH
5529: CALL_OW 87
// wait ( 0 0$1 ) ;
5533: LD_INT 35
5535: PPUSH
5536: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5540: LD_EXP 1
5544: PPUSH
5545: CALL_OW 310
5549: PPUSH
5550: CALL_OW 87
// wait ( 0 0$1 ) ;
5554: LD_INT 35
5556: PPUSH
5557: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5561: LD_EXP 1
5565: PPUSH
5566: CALL_OW 310
5570: PPUSH
5571: CALL_OW 87
// end ;
5575: PPOPN 1
5577: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5578: LD_INT 1
5580: PPUSH
5581: LD_INT 102
5583: PPUSH
5584: LD_INT 94
5586: PPUSH
5587: CALL_OW 293
5591: IFFALSE 5782
5593: GO 5595
5595: DISABLE
5596: LD_INT 0
5598: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5599: LD_INT 102
5601: PPUSH
5602: LD_INT 94
5604: PPUSH
5605: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: LD_INT 26
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 2
5631: PUSH
5632: LD_INT 25
5634: PUSH
5635: LD_INT 1
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: LD_INT 25
5644: PUSH
5645: LD_INT 2
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: LD_INT 25
5654: PUSH
5655: LD_INT 3
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 25
5664: PUSH
5665: LD_INT 4
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 5
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 25
5684: PUSH
5685: LD_INT 8
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: PPUSH
5706: CALL_OW 69
5710: PPUSH
5711: LD_STRING D1-Sol1-2
5713: PPUSH
5714: LD_STRING 
5716: PPUSH
5717: CALL 13366 0 3
// Say ( JMM , D1-JMM-3 ) ;
5721: LD_EXP 1
5725: PPUSH
5726: LD_STRING D1-JMM-3
5728: PPUSH
5729: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5733: LD_STRING M1
5735: PPUSH
5736: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5740: LD_ADDR_VAR 0 1
5744: PUSH
5745: LD_INT 22
5747: PUSH
5748: LD_INT 1
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: PPUSH
5755: CALL_OW 69
5759: PUSH
5760: FOR_IN
5761: IFFALSE 5780
// ComMoveXY ( i , 95 , 84 ) ;
5763: LD_VAR 0 1
5767: PPUSH
5768: LD_INT 95
5770: PPUSH
5771: LD_INT 84
5773: PPUSH
5774: CALL_OW 111
5778: GO 5760
5780: POP
5781: POP
// end ;
5782: PPOPN 1
5784: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5785: GO 5787
5787: DISABLE
5788: LD_INT 0
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5794: LD_ADDR_VAR 0 2
5798: PUSH
5799: LD_INT 8
5801: PPUSH
5802: LD_INT 22
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: LD_INT 25
5814: PUSH
5815: LD_INT 9
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 70
5830: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5831: LD_ADDR_VAR 0 3
5835: PUSH
5836: LD_INT 22
5838: PUSH
5839: LD_INT 1
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: PPUSH
5849: CALL_OW 69
5853: ST_TO_ADDR
// enable ;
5854: ENABLE
// for i in your_units do
5855: LD_ADDR_VAR 0 1
5859: PUSH
5860: LD_VAR 0 3
5864: PUSH
5865: FOR_IN
5866: IFFALSE 6514
// begin if See ( 3 , i ) then
5868: LD_INT 3
5870: PPUSH
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 292
5880: IFFALSE 6512
// begin disable ;
5882: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_INT 96
5890: PPUSH
5891: LD_INT 85
5893: PPUSH
5894: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5898: LD_VAR 0 2
5902: PPUSH
5903: LD_INT 96
5905: PPUSH
5906: LD_INT 85
5908: PPUSH
5909: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5913: LD_VAR 0 2
5917: PPUSH
5918: LD_INT 96
5920: PPUSH
5921: LD_INT 85
5923: PPUSH
5924: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5928: LD_VAR 0 2
5932: PPUSH
5933: LD_INT 96
5935: PPUSH
5936: LD_INT 85
5938: PPUSH
5939: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 96
5950: PPUSH
5951: LD_INT 85
5953: PPUSH
5954: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_INT 96
5965: PPUSH
5966: LD_INT 85
5968: PPUSH
5969: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5973: LD_EXP 1
5977: PPUSH
5978: LD_STRING D1a-JMM-1
5980: PPUSH
5981: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5985: LD_EXP 3
5989: PPUSH
5990: LD_STRING D1a-Don-1
5992: PPUSH
5993: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5997: LD_ADDR_VAR 0 1
6001: PUSH
6002: LD_INT 22
6004: PUSH
6005: LD_INT 1
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6037
// ComMoveXY ( i , 109 , 102 ) ;
6020: LD_VAR 0 1
6024: PPUSH
6025: LD_INT 109
6027: PPUSH
6028: LD_INT 102
6030: PPUSH
6031: CALL_OW 111
6035: GO 6017
6037: POP
6038: POP
// Say ( JMM , D1a-JMM-2 ) ;
6039: LD_EXP 1
6043: PPUSH
6044: LD_STRING D1a-JMM-2
6046: PPUSH
6047: CALL_OW 88
// wait ( 0 0$10 ) ;
6051: LD_INT 350
6053: PPUSH
6054: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6058: LD_EXP 1
6062: PPUSH
6063: CALL_OW 310
6067: PPUSH
6068: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6072: LD_EXP 3
6076: PPUSH
6077: LD_STRING D1b-Don-1
6079: PPUSH
6080: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6084: LD_EXP 1
6088: PPUSH
6089: LD_STRING D1b-JMM-1
6091: PPUSH
6092: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6096: LD_INT 22
6098: PUSH
6099: LD_INT 1
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 26
6108: PUSH
6109: LD_INT 1
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 2
6118: PUSH
6119: LD_INT 25
6121: PUSH
6122: LD_INT 1
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 25
6131: PUSH
6132: LD_INT 2
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 25
6141: PUSH
6142: LD_INT 3
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: LD_INT 4
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 25
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: PPUSH
6198: LD_STRING D1b-Sol1-1
6200: PPUSH
6201: LD_STRING 
6203: PPUSH
6204: CALL 13366 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6208: LD_EXP 3
6212: PPUSH
6213: LD_STRING D1b-Don-2
6215: PPUSH
6216: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6220: LD_EXP 1
6224: PPUSH
6225: LD_STRING D1b-JMM-2
6227: PPUSH
6228: CALL_OW 88
// dec = ShowQuery1 ;
6232: LD_ADDR_VAR 0 4
6236: PUSH
6237: CALL 13902 0 0
6241: ST_TO_ADDR
// if dec = 1 then
6242: LD_VAR 0 4
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6356
// begin Say ( JMM , D2-JMM-1 ) ;
6252: LD_EXP 1
6256: PPUSH
6257: LD_STRING D2-JMM-1
6259: PPUSH
6260: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6264: LD_EXP 22
6268: PPUSH
6269: LD_STRING D2-Pow-1
6271: PPUSH
6272: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6276: LD_EXP 1
6280: PPUSH
6281: LD_STRING D2a-JMM-1
6283: PPUSH
6284: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6288: LD_EXP 22
6292: PPUSH
6293: LD_STRING D2a-Pow-1
6295: PPUSH
6296: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6300: LD_EXP 1
6304: PPUSH
6305: LD_STRING D2a-JMM-2
6307: PPUSH
6308: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6312: LD_EXP 22
6316: PPUSH
6317: LD_STRING D2a-Pow-2
6319: PPUSH
6320: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6324: LD_EXP 1
6328: PPUSH
6329: LD_STRING D2a-JMM-3
6331: PPUSH
6332: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6336: LD_EXP 22
6340: PPUSH
6341: LD_STRING D2a-Pow-3
6343: PPUSH
6344: CALL_OW 94
// secondPass = 2 ;
6348: LD_ADDR_EXP 28
6352: PUSH
6353: LD_INT 2
6355: ST_TO_ADDR
// end ; if dec = 2 then
6356: LD_VAR 0 4
6360: PUSH
6361: LD_INT 2
6363: EQUAL
6364: IFFALSE 6458
// begin Say ( JMM , D2-JMM-1 ) ;
6366: LD_EXP 1
6370: PPUSH
6371: LD_STRING D2-JMM-1
6373: PPUSH
6374: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6378: LD_EXP 22
6382: PPUSH
6383: LD_STRING D2-Pow-1
6385: PPUSH
6386: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6390: LD_EXP 1
6394: PPUSH
6395: LD_STRING D2b-JMM-1
6397: PPUSH
6398: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6402: LD_EXP 22
6406: PPUSH
6407: LD_STRING D2b-Pow-1
6409: PPUSH
6410: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D2c-JMM-1
6421: PPUSH
6422: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6426: LD_EXP 22
6430: PPUSH
6431: LD_STRING D2c-Pow-1
6433: PPUSH
6434: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6438: LD_EXP 1
6442: PPUSH
6443: LD_STRING D2c-JMM-2
6445: PPUSH
6446: CALL_OW 88
// secondPass = 2 ;
6450: LD_ADDR_EXP 28
6454: PUSH
6455: LD_INT 2
6457: ST_TO_ADDR
// end ; if dec = 3 then
6458: LD_VAR 0 4
6462: PUSH
6463: LD_INT 3
6465: EQUAL
6466: IFFALSE 6476
// secondPass = 1 ;
6468: LD_ADDR_EXP 28
6472: PUSH
6473: LD_INT 1
6475: ST_TO_ADDR
// InGameOff ;
6476: CALL_OW 9
// ruAI = 1 ;
6480: LD_ADDR_EXP 42
6484: PUSH
6485: LD_INT 1
6487: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6488: LD_INT 1
6490: PPUSH
6491: LD_INT 3
6493: PPUSH
6494: LD_INT 2
6496: PPUSH
6497: LD_INT 1
6499: PPUSH
6500: CALL_OW 80
// SaveForQuickRestart ;
6504: CALL_OW 22
// exit ;
6508: POP
6509: POP
6510: GO 6516
// end ; end ;
6512: GO 5865
6514: POP
6515: POP
// end ;
6516: PPOPN 4
6518: END
// every 1 1$0 trigger secondPass = 2 do
6519: LD_EXP 28
6523: PUSH
6524: LD_INT 2
6526: EQUAL
6527: IFFALSE 6654
6529: GO 6531
6531: DISABLE
// begin PowellSupport1 ;
6532: CALL 1763 0 0
// DialogueOn ;
6536: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6540: LD_EXP 1
6544: PPUSH
6545: LD_STRING DC1-JMM-1
6547: PPUSH
6548: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6552: LD_EXP 22
6556: PPUSH
6557: LD_STRING DC1-Pow-1
6559: PPUSH
6560: CALL_OW 94
// DialogueOff ;
6564: CALL_OW 7
// wait ( 3 3$0 ) ;
6568: LD_INT 6300
6570: PPUSH
6571: CALL_OW 67
// PowellSupport2 ;
6575: CALL 2222 0 0
// DialogueOn ;
6579: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6583: LD_EXP 1
6587: PPUSH
6588: LD_STRING DC2-JMM-1
6590: PPUSH
6591: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6595: LD_EXP 22
6599: PPUSH
6600: LD_STRING DC2-Pow-1
6602: PPUSH
6603: CALL_OW 94
// DialogueOff ;
6607: CALL_OW 7
// wait ( 6 6$0 ) ;
6611: LD_INT 12600
6613: PPUSH
6614: CALL_OW 67
// PowellSupport3 ;
6618: CALL 2756 0 0
// DialogueOn ;
6622: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6626: LD_EXP 22
6630: PPUSH
6631: LD_STRING DC3-Pow-1
6633: PPUSH
6634: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6638: LD_EXP 1
6642: PPUSH
6643: LD_STRING DC3-JMM-1
6645: PPUSH
6646: CALL_OW 88
// DialogueOff ;
6650: CALL_OW 7
// end ;
6654: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6655: LD_EXP 28
6659: PUSH
6660: LD_INT 2
6662: EQUAL
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_INT 1
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: LD_INT 30
6679: PUSH
6680: LD_INT 0
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 30
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PPUSH
6706: CALL_OW 69
6710: PUSH
6711: LD_INT 0
6713: GREATER
6714: AND
6715: IFFALSE 10083
6717: GO 6719
6719: DISABLE
6720: LD_INT 0
6722: PPUSH
6723: PPUSH
6724: PPUSH
6725: PPUSH
6726: PPUSH
6727: PPUSH
6728: PPUSH
6729: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6730: LD_ADDR_VAR 0 4
6734: PUSH
6735: LD_INT 22
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 21
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 2
6757: PUSH
6758: LD_INT 30
6760: PUSH
6761: LD_INT 0
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: PPUSH
6788: CALL_OW 69
6792: ST_TO_ADDR
// for i in tmp do
6793: LD_ADDR_VAR 0 1
6797: PUSH
6798: LD_VAR 0 4
6802: PUSH
6803: FOR_IN
6804: IFFALSE 6837
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6806: LD_ADDR_VAR 0 6
6810: PUSH
6811: LD_VAR 0 6
6815: PUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 274
6825: PPUSH
6826: LD_INT 1
6828: PPUSH
6829: CALL_OW 275
6833: PLUS
6834: ST_TO_ADDR
6835: GO 6803
6837: POP
6838: POP
// for i in tmp do
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_VAR 0 4
6848: PUSH
6849: FOR_IN
6850: IFFALSE 6883
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6852: LD_ADDR_VAR 0 7
6856: PUSH
6857: LD_VAR 0 7
6861: PUSH
6862: LD_VAR 0 1
6866: PPUSH
6867: CALL_OW 274
6871: PPUSH
6872: LD_INT 2
6874: PPUSH
6875: CALL_OW 275
6879: PLUS
6880: ST_TO_ADDR
6881: GO 6849
6883: POP
6884: POP
// for i in tmp do
6885: LD_ADDR_VAR 0 1
6889: PUSH
6890: LD_VAR 0 4
6894: PUSH
6895: FOR_IN
6896: IFFALSE 6929
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6898: LD_ADDR_VAR 0 8
6902: PUSH
6903: LD_VAR 0 8
6907: PUSH
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 274
6917: PPUSH
6918: LD_INT 3
6920: PPUSH
6921: CALL_OW 275
6925: PLUS
6926: ST_TO_ADDR
6927: GO 6895
6929: POP
6930: POP
// PrepareKurt ;
6931: CALL 4183 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6935: LD_EXP 26
6939: PPUSH
6940: LD_INT 144
6942: PPUSH
6943: LD_INT 111
6945: PPUSH
6946: CALL_OW 111
// wait ( 0 0$2 ) ;
6950: LD_INT 70
6952: PPUSH
6953: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6957: LD_INT 8
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: CALL_OW 343
// if kurtStatus > 0 then
6967: LD_EXP 27
6971: PUSH
6972: LD_INT 0
6974: GREATER
6975: IFFALSE 8538
// begin ComExitVehicle ( Kurt ) ;
6977: LD_EXP 24
6981: PPUSH
6982: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6986: LD_EXP 24
6990: PPUSH
6991: CALL_OW 87
// wait ( 0 0$1 ) ;
6995: LD_INT 35
6997: PPUSH
6998: CALL_OW 67
// DialogueOn ;
7002: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7006: LD_INT 22
7008: PUSH
7009: LD_INT 1
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 26
7018: PUSH
7019: LD_INT 1
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 2
7028: PUSH
7029: LD_INT 25
7031: PUSH
7032: LD_INT 1
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 25
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 25
7051: PUSH
7052: LD_INT 3
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 4
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 25
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 25
7081: PUSH
7082: LD_INT 8
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: LIST
7102: PPUSH
7103: CALL_OW 69
7107: PPUSH
7108: LD_STRING D3-Sol1-1
7110: PPUSH
7111: LD_STRING 
7113: PPUSH
7114: CALL 13366 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7118: LD_EXP 24
7122: PPUSH
7123: LD_STRING D3-Kurt-1
7125: PPUSH
7126: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7130: LD_EXP 1
7134: PPUSH
7135: LD_STRING D3-JMM-1
7137: PPUSH
7138: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7142: LD_EXP 24
7146: PPUSH
7147: LD_STRING D3-Kurt-2
7149: PPUSH
7150: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7154: LD_EXP 1
7158: PPUSH
7159: LD_STRING D3-JMM-2
7161: PPUSH
7162: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7166: LD_EXP 24
7170: PPUSH
7171: LD_STRING D3-Kurt-4
7173: PPUSH
7174: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7178: LD_EXP 1
7182: PPUSH
7183: LD_STRING D3-JMM-4
7185: PPUSH
7186: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7190: LD_EXP 24
7194: PPUSH
7195: LD_STRING D3-Kurt-5
7197: PPUSH
7198: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7202: LD_EXP 24
7206: PPUSH
7207: LD_STRING D3-Kurt-5a
7209: PPUSH
7210: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7214: LD_VAR 0 6
7218: PUSH
7219: LD_INT 60
7221: GREATEREQUAL
7222: PUSH
7223: LD_VAR 0 8
7227: PUSH
7228: LD_INT 60
7230: GREATEREQUAL
7231: AND
7232: IFFALSE 7267
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7234: LD_ADDR_VAR 0 2
7238: PUSH
7239: LD_STRING Q2K
7241: PPUSH
7242: LD_INT 1
7244: PUSH
7245: LD_INT 2
7247: PUSH
7248: LD_INT 3
7250: PUSH
7251: LD_INT 4
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: PPUSH
7260: CALL_OW 98
7264: ST_TO_ADDR
7265: GO 7290
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7267: LD_ADDR_VAR 0 2
7271: PUSH
7272: LD_STRING Q2K
7274: PPUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 4
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 98
7289: ST_TO_ADDR
// if dec1 = 1 then
7290: LD_VAR 0 2
7294: PUSH
7295: LD_INT 1
7297: EQUAL
7298: IFFALSE 7332
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7300: LD_EXP 1
7304: PPUSH
7305: LD_STRING D3Ka-JMM-1
7307: PPUSH
7308: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7312: LD_EXP 24
7316: PPUSH
7317: LD_STRING D3Ka-Kurt-1
7319: PPUSH
7320: CALL_OW 88
// warWithLegion = 1 ;
7324: LD_ADDR_EXP 31
7328: PUSH
7329: LD_INT 1
7331: ST_TO_ADDR
// end ; if dec1 = 2 then
7332: LD_VAR 0 2
7336: PUSH
7337: LD_INT 2
7339: EQUAL
7340: IFFALSE 7566
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7342: LD_EXP 1
7346: PPUSH
7347: LD_STRING D3Kb-JMM-1
7349: PPUSH
7350: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7354: LD_EXP 24
7358: PPUSH
7359: LD_STRING D3Kb-Kurt-1
7361: PPUSH
7362: CALL_OW 88
// for i in tmp do
7366: LD_ADDR_VAR 0 1
7370: PUSH
7371: LD_VAR 0 4
7375: PUSH
7376: FOR_IN
7377: IFFALSE 7464
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7379: LD_ADDR_VAR 0 5
7383: PUSH
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL_OW 274
7393: PPUSH
7394: LD_INT 1
7396: PPUSH
7397: CALL_OW 275
7401: ST_TO_ADDR
// if tmp2 >= 60 then
7402: LD_VAR 0 5
7406: PUSH
7407: LD_INT 60
7409: GREATEREQUAL
7410: IFFALSE 7442
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 274
7421: PPUSH
7422: LD_INT 1
7424: PPUSH
7425: LD_VAR 0 5
7429: PUSH
7430: LD_INT 60
7432: MINUS
7433: PPUSH
7434: CALL_OW 277
// break ;
7438: GO 7464
// end else
7440: GO 7462
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL_OW 274
7451: PPUSH
7452: LD_INT 1
7454: PPUSH
7455: LD_INT 0
7457: PPUSH
7458: CALL_OW 277
// end ; end ;
7462: GO 7376
7464: POP
7465: POP
// for i in tmp do
7466: LD_ADDR_VAR 0 1
7470: PUSH
7471: LD_VAR 0 4
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7564
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7479: LD_ADDR_VAR 0 5
7483: PUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 274
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 275
7501: ST_TO_ADDR
// if tmp2 >= 60 then
7502: LD_VAR 0 5
7506: PUSH
7507: LD_INT 60
7509: GREATEREQUAL
7510: IFFALSE 7542
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7512: LD_VAR 0 1
7516: PPUSH
7517: CALL_OW 274
7521: PPUSH
7522: LD_INT 3
7524: PPUSH
7525: LD_VAR 0 5
7529: PUSH
7530: LD_INT 60
7532: MINUS
7533: PPUSH
7534: CALL_OW 277
// break ;
7538: GO 7564
// end else
7540: GO 7562
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7542: LD_VAR 0 1
7546: PPUSH
7547: CALL_OW 274
7551: PPUSH
7552: LD_INT 3
7554: PPUSH
7555: LD_INT 0
7557: PPUSH
7558: CALL_OW 277
// end ; end ;
7562: GO 7476
7564: POP
7565: POP
// end ; if dec1 = 3 then
7566: LD_VAR 0 2
7570: PUSH
7571: LD_INT 3
7573: EQUAL
7574: IFFALSE 7809
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7576: LD_EXP 1
7580: PPUSH
7581: LD_STRING D3Kc1-JMM-1
7583: PPUSH
7584: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7588: LD_EXP 24
7592: PPUSH
7593: LD_STRING D3Kc1-Kurt-1
7595: PPUSH
7596: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7600: LD_EXP 1
7604: PPUSH
7605: LD_STRING D3Kc1-JMM-2
7607: PPUSH
7608: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7612: LD_EXP 24
7616: PPUSH
7617: LD_STRING D3Kc1-Kurt-2
7619: PPUSH
7620: CALL_OW 88
// askSiberite = 1 ;
7624: LD_ADDR_EXP 33
7628: PUSH
7629: LD_INT 1
7631: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7632: LD_ADDR_VAR 0 2
7636: PUSH
7637: LD_STRING Q2b
7639: PPUSH
7640: LD_INT 1
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: LD_INT 3
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 98
7658: ST_TO_ADDR
// if dec2 = 1 then
7659: LD_VAR 0 3
7663: PUSH
7664: LD_INT 1
7666: EQUAL
7667: IFFALSE 7701
// begin Say ( JMM , D4a-JMM-1 ) ;
7669: LD_EXP 1
7673: PPUSH
7674: LD_STRING D4a-JMM-1
7676: PPUSH
7677: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7681: LD_EXP 24
7685: PPUSH
7686: LD_STRING D4b-Kurt-1
7688: PPUSH
7689: CALL_OW 88
// warWithLegion = 1 ;
7693: LD_ADDR_EXP 31
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// end ; if dec2 = 2 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 2
7708: EQUAL
7709: IFFALSE 7743
// begin Say ( JMM , D4b-JMM-1 ) ;
7711: LD_EXP 1
7715: PPUSH
7716: LD_STRING D4b-JMM-1
7718: PPUSH
7719: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7723: LD_EXP 24
7727: PPUSH
7728: LD_STRING D4b-Kurt-1
7730: PPUSH
7731: CALL_OW 88
// warWithLegion = 1 ;
7735: LD_ADDR_EXP 31
7739: PUSH
7740: LD_INT 1
7742: ST_TO_ADDR
// end ; if dec2 = 3 then
7743: LD_VAR 0 3
7747: PUSH
7748: LD_INT 3
7750: EQUAL
7751: IFFALSE 7809
// begin Say ( JMM , D4c-JMM-1 ) ;
7753: LD_EXP 1
7757: PPUSH
7758: LD_STRING D4c-JMM-1
7760: PPUSH
7761: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7765: LD_EXP 24
7769: PPUSH
7770: LD_STRING D4c-Kurt-1
7772: PPUSH
7773: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7777: LD_EXP 1
7781: PPUSH
7782: LD_STRING D4c-JMM-2
7784: PPUSH
7785: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7789: LD_EXP 24
7793: PPUSH
7794: LD_STRING D4c-Kurt-2
7796: PPUSH
7797: CALL_OW 88
// fakeInfo = 1 ;
7801: LD_ADDR_EXP 32
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7809: LD_VAR 0 2
7813: PUSH
7814: LD_INT 4
7816: EQUAL
7817: IFFALSE 8474
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7819: LD_EXP 1
7823: PPUSH
7824: LD_STRING D3Kd-JMM-1
7826: PPUSH
7827: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7831: LD_VAR 0 6
7835: PUSH
7836: LD_INT 120
7838: GREATEREQUAL
7839: PUSH
7840: LD_VAR 0 8
7844: PUSH
7845: LD_INT 120
7847: GREATEREQUAL
7848: AND
7849: IFFALSE 7884
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7851: LD_ADDR_VAR 0 3
7855: PUSH
7856: LD_STRING Q2aK
7858: PPUSH
7859: LD_INT 1
7861: PUSH
7862: LD_INT 2
7864: PUSH
7865: LD_INT 3
7867: PUSH
7868: LD_INT 4
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 98
7881: ST_TO_ADDR
7882: GO 7907
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7884: LD_ADDR_VAR 0 3
7888: PUSH
7889: LD_STRING Q2K
7891: PPUSH
7892: LD_INT 1
7894: PUSH
7895: LD_INT 4
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 98
7906: ST_TO_ADDR
// if dec2 = 1 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 1
7914: EQUAL
7915: IFFALSE 7949
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7917: LD_EXP 1
7921: PPUSH
7922: LD_STRING D5Ka-JMM-1
7924: PPUSH
7925: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7929: LD_EXP 24
7933: PPUSH
7934: LD_STRING D5Ka-Kurt-1
7936: PPUSH
7937: CALL_OW 88
// warWithLegion = 1 ;
7941: LD_ADDR_EXP 31
7945: PUSH
7946: LD_INT 1
7948: ST_TO_ADDR
// end ; if dec2 = 2 then
7949: LD_VAR 0 3
7953: PUSH
7954: LD_INT 2
7956: EQUAL
7957: IFFALSE 7983
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7959: LD_EXP 1
7963: PPUSH
7964: LD_STRING D3Kb-JMM-1
7966: PPUSH
7967: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7971: LD_EXP 24
7975: PPUSH
7976: LD_STRING D3Kb-Kurt-1
7978: PPUSH
7979: CALL_OW 88
// end ; if dec2 = 3 then
7983: LD_VAR 0 3
7987: PUSH
7988: LD_INT 3
7990: EQUAL
7991: IFFALSE 8221
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7993: LD_EXP 1
7997: PPUSH
7998: LD_STRING D3Ke-JMM-1
8000: PPUSH
8001: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8005: LD_EXP 24
8009: PPUSH
8010: LD_STRING D3Ke-Kurt-1
8012: PPUSH
8013: CALL_OW 88
// PrepareLegionForPlayer ;
8017: CALL 4371 0 0
// for i in tmp do
8021: LD_ADDR_VAR 0 1
8025: PUSH
8026: LD_VAR 0 4
8030: PUSH
8031: FOR_IN
8032: IFFALSE 8119
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8034: LD_ADDR_VAR 0 5
8038: PUSH
8039: LD_VAR 0 1
8043: PPUSH
8044: CALL_OW 274
8048: PPUSH
8049: LD_INT 1
8051: PPUSH
8052: CALL_OW 275
8056: ST_TO_ADDR
// if tmp2 >= 120 then
8057: LD_VAR 0 5
8061: PUSH
8062: LD_INT 120
8064: GREATEREQUAL
8065: IFFALSE 8097
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8067: LD_VAR 0 1
8071: PPUSH
8072: CALL_OW 274
8076: PPUSH
8077: LD_INT 1
8079: PPUSH
8080: LD_VAR 0 5
8084: PUSH
8085: LD_INT 120
8087: MINUS
8088: PPUSH
8089: CALL_OW 277
// break ;
8093: GO 8119
// end else
8095: GO 8117
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL_OW 274
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: LD_INT 0
8112: PPUSH
8113: CALL_OW 277
// end ; end ;
8117: GO 8031
8119: POP
8120: POP
// for i in tmp do
8121: LD_ADDR_VAR 0 1
8125: PUSH
8126: LD_VAR 0 4
8130: PUSH
8131: FOR_IN
8132: IFFALSE 8219
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8134: LD_ADDR_VAR 0 5
8138: PUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 274
8148: PPUSH
8149: LD_INT 3
8151: PPUSH
8152: CALL_OW 275
8156: ST_TO_ADDR
// if tmp2 >= 120 then
8157: LD_VAR 0 5
8161: PUSH
8162: LD_INT 120
8164: GREATEREQUAL
8165: IFFALSE 8197
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 274
8176: PPUSH
8177: LD_INT 3
8179: PPUSH
8180: LD_VAR 0 5
8184: PUSH
8185: LD_INT 120
8187: MINUS
8188: PPUSH
8189: CALL_OW 277
// break ;
8193: GO 8219
// end else
8195: GO 8217
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 274
8206: PPUSH
8207: LD_INT 3
8209: PPUSH
8210: LD_INT 0
8212: PPUSH
8213: CALL_OW 277
// end ; end ;
8217: GO 8131
8219: POP
8220: POP
// end ; if dec2 = 4 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 4
8228: EQUAL
8229: IFFALSE 8474
// begin if dec1 = 3 then
8231: LD_VAR 0 2
8235: PUSH
8236: LD_INT 3
8238: EQUAL
8239: IFFALSE 8474
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8241: LD_EXP 1
8245: PPUSH
8246: LD_STRING D3Kc1-JMM-1
8248: PPUSH
8249: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8253: LD_EXP 24
8257: PPUSH
8258: LD_STRING D3Kc1-Kurt-1
8260: PPUSH
8261: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8265: LD_EXP 1
8269: PPUSH
8270: LD_STRING D3Kc1-JMM-2
8272: PPUSH
8273: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8277: LD_EXP 24
8281: PPUSH
8282: LD_STRING D3Kc1-Kurt-2
8284: PPUSH
8285: CALL_OW 88
// askSiberite = 1 ;
8289: LD_ADDR_EXP 33
8293: PUSH
8294: LD_INT 1
8296: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8297: LD_ADDR_VAR 0 2
8301: PUSH
8302: LD_STRING Q2b
8304: PPUSH
8305: LD_INT 1
8307: PUSH
8308: LD_INT 2
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: PPUSH
8319: CALL_OW 98
8323: ST_TO_ADDR
// if dec2 = 1 then
8324: LD_VAR 0 3
8328: PUSH
8329: LD_INT 1
8331: EQUAL
8332: IFFALSE 8366
// begin Say ( JMM , D4a-JMM-1 ) ;
8334: LD_EXP 1
8338: PPUSH
8339: LD_STRING D4a-JMM-1
8341: PPUSH
8342: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8346: LD_EXP 24
8350: PPUSH
8351: LD_STRING D4b-Kurt-1
8353: PPUSH
8354: CALL_OW 88
// warWithLegion = 1 ;
8358: LD_ADDR_EXP 31
8362: PUSH
8363: LD_INT 1
8365: ST_TO_ADDR
// end ; if dec2 = 2 then
8366: LD_VAR 0 3
8370: PUSH
8371: LD_INT 2
8373: EQUAL
8374: IFFALSE 8408
// begin Say ( JMM , D4b-JMM-1 ) ;
8376: LD_EXP 1
8380: PPUSH
8381: LD_STRING D4b-JMM-1
8383: PPUSH
8384: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8388: LD_EXP 24
8392: PPUSH
8393: LD_STRING D4b-Kurt-1
8395: PPUSH
8396: CALL_OW 88
// warWithLegion = 1 ;
8400: LD_ADDR_EXP 31
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// end ; if dec2 = 3 then
8408: LD_VAR 0 3
8412: PUSH
8413: LD_INT 3
8415: EQUAL
8416: IFFALSE 8474
// begin Say ( JMM , D4c-JMM-1 ) ;
8418: LD_EXP 1
8422: PPUSH
8423: LD_STRING D4c-JMM-1
8425: PPUSH
8426: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8430: LD_EXP 24
8434: PPUSH
8435: LD_STRING D4c-Kurt-1
8437: PPUSH
8438: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8442: LD_EXP 1
8446: PPUSH
8447: LD_STRING D4c-JMM-2
8449: PPUSH
8450: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8454: LD_EXP 24
8458: PPUSH
8459: LD_STRING D4c-Kurt-2
8461: PPUSH
8462: CALL_OW 88
// fakeInfo = 1 ;
8466: LD_ADDR_EXP 32
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8474: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8478: LD_EXP 24
8482: PPUSH
8483: LD_EXP 26
8487: PPUSH
8488: CALL_OW 120
// wait ( 0 0$1 ) ;
8492: LD_INT 35
8494: PPUSH
8495: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8499: LD_EXP 26
8503: PPUSH
8504: LD_INT 4
8506: PPUSH
8507: CALL_OW 113
// wait ( 0 0$3 ) ;
8511: LD_INT 105
8513: PPUSH
8514: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8518: LD_EXP 24
8522: PPUSH
8523: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8527: LD_EXP 26
8531: PPUSH
8532: CALL_OW 64
// end else
8536: GO 10083
// begin ComExitVehicle ( otherKurt ) ;
8538: LD_EXP 25
8542: PPUSH
8543: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8547: LD_EXP 25
8551: PPUSH
8552: CALL_OW 87
// wait ( 0 0$1 ) ;
8556: LD_INT 35
8558: PPUSH
8559: CALL_OW 67
// DialogueOn ;
8563: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8567: LD_INT 22
8569: PUSH
8570: LD_INT 1
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 26
8579: PUSH
8580: LD_INT 1
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 2
8589: PUSH
8590: LD_INT 25
8592: PUSH
8593: LD_INT 1
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 25
8602: PUSH
8603: LD_INT 2
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 25
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 25
8622: PUSH
8623: LD_INT 4
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 25
8632: PUSH
8633: LD_INT 5
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 25
8642: PUSH
8643: LD_INT 8
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 69
8668: PPUSH
8669: LD_STRING D3-Sol1-1
8671: PPUSH
8672: LD_STRING 
8674: PPUSH
8675: CALL 13366 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8679: LD_EXP 25
8683: PPUSH
8684: LD_STRING D3-Kurt-1
8686: PPUSH
8687: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8691: LD_EXP 1
8695: PPUSH
8696: LD_STRING D3-JMM-1
8698: PPUSH
8699: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8703: LD_EXP 25
8707: PPUSH
8708: LD_STRING D3-Kurt-3
8710: PPUSH
8711: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8715: LD_EXP 1
8719: PPUSH
8720: LD_STRING D3-JMM-3
8722: PPUSH
8723: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8727: LD_EXP 25
8731: PPUSH
8732: LD_STRING D3-Kurt-5
8734: PPUSH
8735: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8739: LD_EXP 25
8743: PPUSH
8744: LD_STRING D3-Kurt-5b
8746: PPUSH
8747: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8751: LD_VAR 0 6
8755: PUSH
8756: LD_INT 100
8758: GREATEREQUAL
8759: PUSH
8760: LD_VAR 0 8
8764: PUSH
8765: LD_INT 100
8767: GREATEREQUAL
8768: AND
8769: IFFALSE 8804
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8771: LD_ADDR_VAR 0 2
8775: PUSH
8776: LD_STRING Q2
8778: PPUSH
8779: LD_INT 1
8781: PUSH
8782: LD_INT 2
8784: PUSH
8785: LD_INT 3
8787: PUSH
8788: LD_INT 4
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL_OW 98
8801: ST_TO_ADDR
8802: GO 8827
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8804: LD_ADDR_VAR 0 2
8808: PUSH
8809: LD_STRING Q2
8811: PPUSH
8812: LD_INT 3
8814: PUSH
8815: LD_INT 4
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PPUSH
8822: CALL_OW 98
8826: ST_TO_ADDR
// if dec1 = 1 then
8827: LD_VAR 0 2
8831: PUSH
8832: LD_INT 1
8834: EQUAL
8835: IFFALSE 8869
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8837: LD_EXP 1
8841: PPUSH
8842: LD_STRING D3Ka-JMM-1
8844: PPUSH
8845: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8849: LD_EXP 25
8853: PPUSH
8854: LD_STRING D3Ka-Kurt-1
8856: PPUSH
8857: CALL_OW 88
// warWithLegion = 1 ;
8861: LD_ADDR_EXP 31
8865: PUSH
8866: LD_INT 1
8868: ST_TO_ADDR
// end ; if dec1 = 2 then
8869: LD_VAR 0 2
8873: PUSH
8874: LD_INT 2
8876: EQUAL
8877: IFFALSE 9103
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D3Kb-JMM-1
8886: PPUSH
8887: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8891: LD_EXP 25
8895: PPUSH
8896: LD_STRING D3Kb-Kurt-1
8898: PPUSH
8899: CALL_OW 88
// for i in tmp do
8903: LD_ADDR_VAR 0 1
8907: PUSH
8908: LD_VAR 0 4
8912: PUSH
8913: FOR_IN
8914: IFFALSE 9001
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8916: LD_ADDR_VAR 0 5
8920: PUSH
8921: LD_VAR 0 1
8925: PPUSH
8926: CALL_OW 274
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 275
8938: ST_TO_ADDR
// if tmp2 >= 100 then
8939: LD_VAR 0 5
8943: PUSH
8944: LD_INT 100
8946: GREATEREQUAL
8947: IFFALSE 8979
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8949: LD_VAR 0 1
8953: PPUSH
8954: CALL_OW 274
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 5
8966: PUSH
8967: LD_INT 100
8969: MINUS
8970: PPUSH
8971: CALL_OW 277
// break ;
8975: GO 9001
// end else
8977: GO 8999
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8979: LD_VAR 0 1
8983: PPUSH
8984: CALL_OW 274
8988: PPUSH
8989: LD_INT 1
8991: PPUSH
8992: LD_INT 0
8994: PPUSH
8995: CALL_OW 277
// end ; end ;
8999: GO 8913
9001: POP
9002: POP
// for i in tmp do
9003: LD_ADDR_VAR 0 1
9007: PUSH
9008: LD_VAR 0 4
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9101
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9016: LD_ADDR_VAR 0 5
9020: PUSH
9021: LD_VAR 0 1
9025: PPUSH
9026: CALL_OW 274
9030: PPUSH
9031: LD_INT 3
9033: PPUSH
9034: CALL_OW 275
9038: ST_TO_ADDR
// if tmp2 >= 100 then
9039: LD_VAR 0 5
9043: PUSH
9044: LD_INT 100
9046: GREATEREQUAL
9047: IFFALSE 9079
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 274
9058: PPUSH
9059: LD_INT 3
9061: PPUSH
9062: LD_VAR 0 5
9066: PUSH
9067: LD_INT 100
9069: MINUS
9070: PPUSH
9071: CALL_OW 277
// break ;
9075: GO 9101
// end else
9077: GO 9099
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: LD_INT 0
9094: PPUSH
9095: CALL_OW 277
// end ; end ;
9099: GO 9013
9101: POP
9102: POP
// end ; if dec1 = 3 then
9103: LD_VAR 0 2
9107: PUSH
9108: LD_INT 3
9110: EQUAL
9111: IFFALSE 9346
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9113: LD_EXP 1
9117: PPUSH
9118: LD_STRING D3Kc1-JMM-1
9120: PPUSH
9121: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9125: LD_EXP 25
9129: PPUSH
9130: LD_STRING D3Kc1-Kurt-1
9132: PPUSH
9133: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9137: LD_EXP 1
9141: PPUSH
9142: LD_STRING D3Kc1-JMM-2
9144: PPUSH
9145: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9149: LD_EXP 25
9153: PPUSH
9154: LD_STRING D3Kc1-Kurt-2
9156: PPUSH
9157: CALL_OW 88
// askSiberite = 1 ;
9161: LD_ADDR_EXP 33
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9169: LD_ADDR_VAR 0 2
9173: PUSH
9174: LD_STRING Q2b
9176: PPUSH
9177: LD_INT 1
9179: PUSH
9180: LD_INT 2
9182: PUSH
9183: LD_INT 3
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: PPUSH
9191: CALL_OW 98
9195: ST_TO_ADDR
// if dec2 = 1 then
9196: LD_VAR 0 3
9200: PUSH
9201: LD_INT 1
9203: EQUAL
9204: IFFALSE 9238
// begin Say ( JMM , D4a-JMM-1 ) ;
9206: LD_EXP 1
9210: PPUSH
9211: LD_STRING D4a-JMM-1
9213: PPUSH
9214: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9218: LD_EXP 25
9222: PPUSH
9223: LD_STRING D4b-Kurt-1
9225: PPUSH
9226: CALL_OW 88
// warWithLegion = 1 ;
9230: LD_ADDR_EXP 31
9234: PUSH
9235: LD_INT 1
9237: ST_TO_ADDR
// end ; if dec2 = 2 then
9238: LD_VAR 0 3
9242: PUSH
9243: LD_INT 2
9245: EQUAL
9246: IFFALSE 9280
// begin Say ( JMM , D4b-JMM-1 ) ;
9248: LD_EXP 1
9252: PPUSH
9253: LD_STRING D4b-JMM-1
9255: PPUSH
9256: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9260: LD_EXP 25
9264: PPUSH
9265: LD_STRING D4b-Kurt-1
9267: PPUSH
9268: CALL_OW 88
// warWithLegion = 1 ;
9272: LD_ADDR_EXP 31
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// end ; if dec2 = 3 then
9280: LD_VAR 0 3
9284: PUSH
9285: LD_INT 3
9287: EQUAL
9288: IFFALSE 9346
// begin Say ( JMM , D4c-JMM-1 ) ;
9290: LD_EXP 1
9294: PPUSH
9295: LD_STRING D4c-JMM-1
9297: PPUSH
9298: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9302: LD_EXP 25
9306: PPUSH
9307: LD_STRING D4c-Kurt-1
9309: PPUSH
9310: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9314: LD_EXP 1
9318: PPUSH
9319: LD_STRING D4c-JMM-2
9321: PPUSH
9322: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9326: LD_EXP 25
9330: PPUSH
9331: LD_STRING D4c-Kurt-2
9333: PPUSH
9334: CALL_OW 88
// fakeInfo = 1 ;
9338: LD_ADDR_EXP 32
9342: PUSH
9343: LD_INT 1
9345: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9346: LD_VAR 0 2
9350: PUSH
9351: LD_INT 4
9353: EQUAL
9354: IFFALSE 10011
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9356: LD_EXP 1
9360: PPUSH
9361: LD_STRING D3Kd-JMM-1
9363: PPUSH
9364: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9368: LD_VAR 0 6
9372: PUSH
9373: LD_INT 200
9375: GREATEREQUAL
9376: PUSH
9377: LD_VAR 0 8
9381: PUSH
9382: LD_INT 200
9384: GREATEREQUAL
9385: AND
9386: IFFALSE 9421
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9388: LD_ADDR_VAR 0 3
9392: PUSH
9393: LD_STRING Q2a
9395: PPUSH
9396: LD_INT 1
9398: PUSH
9399: LD_INT 2
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: LD_INT 4
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PPUSH
9414: CALL_OW 98
9418: ST_TO_ADDR
9419: GO 9444
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9421: LD_ADDR_VAR 0 3
9425: PUSH
9426: LD_STRING Q2a
9428: PPUSH
9429: LD_INT 1
9431: PUSH
9432: LD_INT 4
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 98
9443: ST_TO_ADDR
// if dec2 = 1 then
9444: LD_VAR 0 3
9448: PUSH
9449: LD_INT 1
9451: EQUAL
9452: IFFALSE 9486
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9454: LD_EXP 1
9458: PPUSH
9459: LD_STRING D5Ka-JMM-1
9461: PPUSH
9462: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9466: LD_EXP 25
9470: PPUSH
9471: LD_STRING D5Ka-Kurt-1
9473: PPUSH
9474: CALL_OW 88
// warWithLegion = 1 ;
9478: LD_ADDR_EXP 31
9482: PUSH
9483: LD_INT 1
9485: ST_TO_ADDR
// end ; if dec2 = 2 then
9486: LD_VAR 0 3
9490: PUSH
9491: LD_INT 2
9493: EQUAL
9494: IFFALSE 9520
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9496: LD_EXP 1
9500: PPUSH
9501: LD_STRING D3Kb-JMM-1
9503: PPUSH
9504: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9508: LD_EXP 25
9512: PPUSH
9513: LD_STRING D3Kb-Kurt-1
9515: PPUSH
9516: CALL_OW 88
// end ; if dec2 = 3 then
9520: LD_VAR 0 3
9524: PUSH
9525: LD_INT 3
9527: EQUAL
9528: IFFALSE 9758
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9530: LD_EXP 1
9534: PPUSH
9535: LD_STRING D3Ke-JMM-1
9537: PPUSH
9538: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9542: LD_EXP 25
9546: PPUSH
9547: LD_STRING D3Ke-Kurt-1
9549: PPUSH
9550: CALL_OW 88
// PrepareLegionForPlayer ;
9554: CALL 4371 0 0
// for i in tmp do
9558: LD_ADDR_VAR 0 1
9562: PUSH
9563: LD_VAR 0 4
9567: PUSH
9568: FOR_IN
9569: IFFALSE 9656
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9571: LD_ADDR_VAR 0 5
9575: PUSH
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 274
9585: PPUSH
9586: LD_INT 1
9588: PPUSH
9589: CALL_OW 275
9593: ST_TO_ADDR
// if tmp2 >= 200 then
9594: LD_VAR 0 5
9598: PUSH
9599: LD_INT 200
9601: GREATEREQUAL
9602: IFFALSE 9634
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9604: LD_VAR 0 1
9608: PPUSH
9609: CALL_OW 274
9613: PPUSH
9614: LD_INT 1
9616: PPUSH
9617: LD_VAR 0 5
9621: PUSH
9622: LD_INT 200
9624: MINUS
9625: PPUSH
9626: CALL_OW 277
// break ;
9630: GO 9656
// end else
9632: GO 9654
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9634: LD_VAR 0 1
9638: PPUSH
9639: CALL_OW 274
9643: PPUSH
9644: LD_INT 1
9646: PPUSH
9647: LD_INT 0
9649: PPUSH
9650: CALL_OW 277
// end ; end ;
9654: GO 9568
9656: POP
9657: POP
// for i in tmp do
9658: LD_ADDR_VAR 0 1
9662: PUSH
9663: LD_VAR 0 4
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9756
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9671: LD_ADDR_VAR 0 5
9675: PUSH
9676: LD_VAR 0 1
9680: PPUSH
9681: CALL_OW 274
9685: PPUSH
9686: LD_INT 3
9688: PPUSH
9689: CALL_OW 275
9693: ST_TO_ADDR
// if tmp2 >= 200 then
9694: LD_VAR 0 5
9698: PUSH
9699: LD_INT 200
9701: GREATEREQUAL
9702: IFFALSE 9734
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9704: LD_VAR 0 1
9708: PPUSH
9709: CALL_OW 274
9713: PPUSH
9714: LD_INT 3
9716: PPUSH
9717: LD_VAR 0 5
9721: PUSH
9722: LD_INT 200
9724: MINUS
9725: PPUSH
9726: CALL_OW 277
// break ;
9730: GO 9756
// end else
9732: GO 9754
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9734: LD_VAR 0 1
9738: PPUSH
9739: CALL_OW 274
9743: PPUSH
9744: LD_INT 3
9746: PPUSH
9747: LD_INT 0
9749: PPUSH
9750: CALL_OW 277
// end ; end ;
9754: GO 9668
9756: POP
9757: POP
// end ; if dec2 = 4 then
9758: LD_VAR 0 3
9762: PUSH
9763: LD_INT 4
9765: EQUAL
9766: IFFALSE 10011
// begin if dec1 = 3 then
9768: LD_VAR 0 2
9772: PUSH
9773: LD_INT 3
9775: EQUAL
9776: IFFALSE 10011
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9778: LD_EXP 1
9782: PPUSH
9783: LD_STRING D3Kc1-JMM-1
9785: PPUSH
9786: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9790: LD_EXP 25
9794: PPUSH
9795: LD_STRING D3Kc1-Kurt-1
9797: PPUSH
9798: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9802: LD_EXP 1
9806: PPUSH
9807: LD_STRING D3Kc1-JMM-2
9809: PPUSH
9810: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9814: LD_EXP 25
9818: PPUSH
9819: LD_STRING D3Kc1-Kurt-2
9821: PPUSH
9822: CALL_OW 88
// askSiberite = 1 ;
9826: LD_ADDR_EXP 33
9830: PUSH
9831: LD_INT 1
9833: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9834: LD_ADDR_VAR 0 2
9838: PUSH
9839: LD_STRING Q2b
9841: PPUSH
9842: LD_INT 1
9844: PUSH
9845: LD_INT 2
9847: PUSH
9848: LD_INT 3
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 98
9860: ST_TO_ADDR
// if dec2 = 1 then
9861: LD_VAR 0 3
9865: PUSH
9866: LD_INT 1
9868: EQUAL
9869: IFFALSE 9903
// begin Say ( JMM , D4a-JMM-1 ) ;
9871: LD_EXP 1
9875: PPUSH
9876: LD_STRING D4a-JMM-1
9878: PPUSH
9879: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9883: LD_EXP 25
9887: PPUSH
9888: LD_STRING D4b-Kurt-1
9890: PPUSH
9891: CALL_OW 88
// warWithLegion = 1 ;
9895: LD_ADDR_EXP 31
9899: PUSH
9900: LD_INT 1
9902: ST_TO_ADDR
// end ; if dec2 = 2 then
9903: LD_VAR 0 3
9907: PUSH
9908: LD_INT 2
9910: EQUAL
9911: IFFALSE 9945
// begin Say ( JMM , D4b-JMM-1 ) ;
9913: LD_EXP 1
9917: PPUSH
9918: LD_STRING D4b-JMM-1
9920: PPUSH
9921: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9925: LD_EXP 25
9929: PPUSH
9930: LD_STRING D4b-Kurt-1
9932: PPUSH
9933: CALL_OW 88
// warWithLegion = 1 ;
9937: LD_ADDR_EXP 31
9941: PUSH
9942: LD_INT 1
9944: ST_TO_ADDR
// end ; if dec2 = 3 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 3
9952: EQUAL
9953: IFFALSE 10011
// begin Say ( JMM , D4c-JMM-1 ) ;
9955: LD_EXP 1
9959: PPUSH
9960: LD_STRING D4c-JMM-1
9962: PPUSH
9963: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9967: LD_EXP 25
9971: PPUSH
9972: LD_STRING D4c-Kurt-1
9974: PPUSH
9975: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9979: LD_EXP 1
9983: PPUSH
9984: LD_STRING D4c-JMM-2
9986: PPUSH
9987: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9991: LD_EXP 25
9995: PPUSH
9996: LD_STRING D4c-Kurt-2
9998: PPUSH
9999: CALL_OW 88
// fakeInfo = 1 ;
10003: LD_ADDR_EXP 32
10007: PUSH
10008: LD_INT 1
10010: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
10011: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
10015: LD_INT 8
10017: PPUSH
10018: LD_INT 8
10020: PPUSH
10021: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
10025: LD_EXP 25
10029: PPUSH
10030: LD_EXP 26
10034: PPUSH
10035: CALL_OW 120
// wait ( 0 0$1 ) ;
10039: LD_INT 35
10041: PPUSH
10042: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
10046: LD_EXP 26
10050: PPUSH
10051: LD_INT 4
10053: PPUSH
10054: CALL_OW 113
// wait ( 0 0$6 ) ;
10058: LD_INT 210
10060: PPUSH
10061: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10065: LD_EXP 25
10069: PPUSH
10070: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10074: LD_EXP 26
10078: PPUSH
10079: CALL_OW 64
// end ; end ;
10083: PPOPN 8
10085: END
// every 0 0$10 trigger warWithLegion = 1 do
10086: LD_EXP 31
10090: PUSH
10091: LD_INT 1
10093: EQUAL
10094: IFFALSE 10103
10096: GO 10098
10098: DISABLE
// PrepareAttackLegion ;
10099: CALL 5099 0 0
10103: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10104: LD_EXP 15
10108: PPUSH
10109: CALL_OW 305
10113: PUSH
10114: LD_EXP 15
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: CALL_OW 289
10126: NOT
10127: AND
10128: PUSH
10129: LD_EXP 15
10133: PPUSH
10134: LD_INT 2
10136: PPUSH
10137: CALL_OW 289
10141: NOT
10142: AND
10143: PUSH
10144: LD_EXP 15
10148: PPUSH
10149: LD_INT 3
10151: PPUSH
10152: CALL_OW 289
10156: NOT
10157: AND
10158: IFFALSE 10175
10160: GO 10162
10162: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10163: LD_EXP 15
10167: PPUSH
10168: LD_INT 4
10170: PPUSH
10171: CALL_OW 235
10175: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10176: LD_EXP 16
10180: PPUSH
10181: CALL_OW 305
10185: PUSH
10186: LD_EXP 16
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 289
10198: NOT
10199: AND
10200: PUSH
10201: LD_EXP 16
10205: PPUSH
10206: LD_INT 2
10208: PPUSH
10209: CALL_OW 289
10213: NOT
10214: AND
10215: PUSH
10216: LD_EXP 16
10220: PPUSH
10221: LD_INT 3
10223: PPUSH
10224: CALL_OW 289
10228: NOT
10229: AND
10230: IFFALSE 10247
10232: GO 10234
10234: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10235: LD_EXP 16
10239: PPUSH
10240: LD_INT 4
10242: PPUSH
10243: CALL_OW 235
10247: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10248: LD_EXP 17
10252: PPUSH
10253: CALL_OW 305
10257: PUSH
10258: LD_EXP 17
10262: PPUSH
10263: LD_INT 1
10265: PPUSH
10266: CALL_OW 289
10270: NOT
10271: AND
10272: PUSH
10273: LD_EXP 17
10277: PPUSH
10278: LD_INT 2
10280: PPUSH
10281: CALL_OW 289
10285: NOT
10286: AND
10287: PUSH
10288: LD_EXP 17
10292: PPUSH
10293: LD_INT 3
10295: PPUSH
10296: CALL_OW 289
10300: NOT
10301: AND
10302: IFFALSE 10319
10304: GO 10306
10306: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10307: LD_EXP 17
10311: PPUSH
10312: LD_INT 4
10314: PPUSH
10315: CALL_OW 235
10319: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10320: LD_EXP 18
10324: PPUSH
10325: CALL_OW 305
10329: PUSH
10330: LD_EXP 18
10334: PPUSH
10335: LD_INT 1
10337: PPUSH
10338: CALL_OW 289
10342: NOT
10343: AND
10344: PUSH
10345: LD_EXP 18
10349: PPUSH
10350: LD_INT 2
10352: PPUSH
10353: CALL_OW 289
10357: NOT
10358: AND
10359: PUSH
10360: LD_EXP 18
10364: PPUSH
10365: LD_INT 3
10367: PPUSH
10368: CALL_OW 289
10372: NOT
10373: AND
10374: IFFALSE 10391
10376: GO 10378
10378: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10379: LD_EXP 18
10383: PPUSH
10384: LD_INT 4
10386: PPUSH
10387: CALL_OW 235
10391: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10392: LD_EXP 19
10396: PPUSH
10397: CALL_OW 305
10401: PUSH
10402: LD_EXP 19
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 289
10414: NOT
10415: AND
10416: PUSH
10417: LD_EXP 19
10421: PPUSH
10422: LD_INT 2
10424: PPUSH
10425: CALL_OW 289
10429: NOT
10430: AND
10431: PUSH
10432: LD_EXP 19
10436: PPUSH
10437: LD_INT 3
10439: PPUSH
10440: CALL_OW 289
10444: NOT
10445: AND
10446: PUSH
10447: LD_EXP 19
10451: PPUSH
10452: LD_INT 2
10454: PPUSH
10455: CALL_OW 289
10459: NOT
10460: AND
10461: IFFALSE 10478
10463: GO 10465
10465: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10466: LD_EXP 19
10470: PPUSH
10471: LD_INT 4
10473: PPUSH
10474: CALL_OW 235
10478: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10479: LD_EXP 20
10483: PPUSH
10484: CALL_OW 305
10488: PUSH
10489: LD_EXP 20
10493: PPUSH
10494: LD_INT 1
10496: PPUSH
10497: CALL_OW 289
10501: NOT
10502: AND
10503: PUSH
10504: LD_EXP 20
10508: PPUSH
10509: LD_INT 2
10511: PPUSH
10512: CALL_OW 289
10516: NOT
10517: AND
10518: PUSH
10519: LD_EXP 20
10523: PPUSH
10524: LD_INT 3
10526: PPUSH
10527: CALL_OW 289
10531: NOT
10532: AND
10533: IFFALSE 10550
10535: GO 10537
10537: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10538: LD_EXP 20
10542: PPUSH
10543: LD_INT 4
10545: PPUSH
10546: CALL_OW 235
10550: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10551: LD_EXP 21
10555: PPUSH
10556: CALL_OW 305
10560: PUSH
10561: LD_EXP 21
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: CALL_OW 289
10573: NOT
10574: AND
10575: PUSH
10576: LD_EXP 21
10580: PPUSH
10581: LD_INT 2
10583: PPUSH
10584: CALL_OW 289
10588: NOT
10589: AND
10590: PUSH
10591: LD_EXP 21
10595: PPUSH
10596: LD_INT 3
10598: PPUSH
10599: CALL_OW 289
10603: NOT
10604: AND
10605: IFFALSE 10622
10607: GO 10609
10609: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10610: LD_EXP 21
10614: PPUSH
10615: LD_INT 4
10617: PPUSH
10618: CALL_OW 235
10622: END
// every 0 0$1 do var i ;
10623: GO 10625
10625: DISABLE
10626: LD_INT 0
10628: PPUSH
// begin enable ;
10629: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10630: LD_ADDR_VAR 0 1
10634: PUSH
10635: LD_INT 22
10637: PUSH
10638: LD_INT 4
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PPUSH
10645: CALL_OW 69
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10690
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10653: LD_VAR 0 1
10657: PPUSH
10658: LD_INT 4
10660: PPUSH
10661: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10665: LD_VAR 0 1
10669: PPUSH
10670: LD_INT 4
10672: PPUSH
10673: CALL_OW 308
10677: IFFALSE 10688
// RemoveUnit ( i ) ;
10679: LD_VAR 0 1
10683: PPUSH
10684: CALL_OW 64
// end ;
10688: GO 10650
10690: POP
10691: POP
// end ;
10692: PPOPN 1
10694: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10695: LD_EXP 28
10699: PUSH
10700: LD_INT 1
10702: EQUAL
10703: IFFALSE 11142
10705: GO 10707
10707: DISABLE
10708: LD_INT 0
10710: PPUSH
10711: PPUSH
10712: PPUSH
// begin enable ;
10713: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10714: LD_ADDR_VAR 0 2
10718: PUSH
10719: LD_INT 12
10721: PPUSH
10722: LD_INT 22
10724: PUSH
10725: LD_INT 3
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 21
10734: PUSH
10735: LD_INT 2
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 70
10750: ST_TO_ADDR
// for i in enemyVehs do
10751: LD_ADDR_VAR 0 1
10755: PUSH
10756: LD_VAR 0 2
10760: PUSH
10761: FOR_IN
10762: IFFALSE 11140
// begin if See ( 1 , i ) then
10764: LD_INT 1
10766: PPUSH
10767: LD_VAR 0 1
10771: PPUSH
10772: CALL_OW 292
10776: IFFALSE 11138
// begin disable ;
10778: DISABLE
// DialogueOn ;
10779: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10792: LD_INT 22
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 26
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 2
10814: PUSH
10815: LD_INT 25
10817: PUSH
10818: LD_INT 1
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PUSH
10825: LD_INT 25
10827: PUSH
10828: LD_INT 2
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 25
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 25
10847: PUSH
10848: LD_INT 4
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 25
10857: PUSH
10858: LD_INT 5
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 25
10867: PUSH
10868: LD_INT 8
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 69
10893: PPUSH
10894: LD_STRING DT1-Sol1-1
10896: PPUSH
10897: LD_STRING DT1-FSol1-1
10899: PPUSH
10900: CALL 13366 0 3
// dec = ShowQuery2 ;
10904: LD_ADDR_VAR 0 3
10908: PUSH
10909: CALL 13976 0 0
10913: ST_TO_ADDR
// if dec = 1 then
10914: LD_VAR 0 3
10918: PUSH
10919: LD_INT 1
10921: EQUAL
10922: IFFALSE 11028
// begin Say ( JMM , D2-JMM-1 ) ;
10924: LD_EXP 1
10928: PPUSH
10929: LD_STRING D2-JMM-1
10931: PPUSH
10932: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10936: LD_EXP 22
10940: PPUSH
10941: LD_STRING D2-Pow-1
10943: PPUSH
10944: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10948: LD_EXP 1
10952: PPUSH
10953: LD_STRING D2a-JMM-1
10955: PPUSH
10956: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10960: LD_EXP 22
10964: PPUSH
10965: LD_STRING D2a-Pow-1
10967: PPUSH
10968: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10972: LD_EXP 1
10976: PPUSH
10977: LD_STRING D2a-JMM-2
10979: PPUSH
10980: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10984: LD_EXP 22
10988: PPUSH
10989: LD_STRING D2a-Pow-2
10991: PPUSH
10992: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10996: LD_EXP 1
11000: PPUSH
11001: LD_STRING D2a-JMM-3
11003: PPUSH
11004: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
11008: LD_EXP 22
11012: PPUSH
11013: LD_STRING D2a-Pow-3
11015: PPUSH
11016: CALL_OW 94
// secondPass = 2 ;
11020: LD_ADDR_EXP 28
11024: PUSH
11025: LD_INT 2
11027: ST_TO_ADDR
// end ; if dec = 2 then
11028: LD_VAR 0 3
11032: PUSH
11033: LD_INT 2
11035: EQUAL
11036: IFFALSE 11130
// begin Say ( JMM , D2-JMM-1 ) ;
11038: LD_EXP 1
11042: PPUSH
11043: LD_STRING D2-JMM-1
11045: PPUSH
11046: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11050: LD_EXP 22
11054: PPUSH
11055: LD_STRING D2-Pow-1
11057: PPUSH
11058: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11062: LD_EXP 1
11066: PPUSH
11067: LD_STRING D2b-JMM-1
11069: PPUSH
11070: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11074: LD_EXP 22
11078: PPUSH
11079: LD_STRING D2b-Pow-1
11081: PPUSH
11082: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11086: LD_EXP 1
11090: PPUSH
11091: LD_STRING D2c-JMM-1
11093: PPUSH
11094: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11098: LD_EXP 22
11102: PPUSH
11103: LD_STRING D2c-Pow-1
11105: PPUSH
11106: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11110: LD_EXP 1
11114: PPUSH
11115: LD_STRING D2c-JMM-2
11117: PPUSH
11118: CALL_OW 88
// secondPass = 2 ;
11122: LD_ADDR_EXP 28
11126: PUSH
11127: LD_INT 2
11129: ST_TO_ADDR
// end ; DialogueOff ;
11130: CALL_OW 7
// exit ;
11134: POP
11135: POP
11136: GO 11142
// end ; end ;
11138: GO 10761
11140: POP
11141: POP
// end ;
11142: PPOPN 3
11144: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11145: LD_EXP 29
11149: PUSH
11150: LD_INT 1
11152: EQUAL
11153: IFFALSE 11386
11155: GO 11157
11157: DISABLE
11158: LD_INT 0
11160: PPUSH
11161: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11162: LD_ADDR_VAR 0 2
11166: PUSH
11167: LD_INT 11
11169: PPUSH
11170: LD_INT 22
11172: PUSH
11173: LD_INT 3
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 24
11182: PUSH
11183: LD_INT 250
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 70
11198: ST_TO_ADDR
// enable ;
11199: ENABLE
// for i in vehicles do
11200: LD_ADDR_VAR 0 1
11204: PUSH
11205: LD_VAR 0 2
11209: PUSH
11210: FOR_IN
11211: IFFALSE 11384
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11213: LD_INT 1
11215: PPUSH
11216: LD_VAR 0 1
11220: PPUSH
11221: CALL_OW 292
11225: PUSH
11226: LD_EXP 29
11230: PUSH
11231: LD_INT 1
11233: EQUAL
11234: AND
11235: PUSH
11236: LD_EXP 30
11240: PUSH
11241: LD_INT 4
11243: LESSEQUAL
11244: AND
11245: IFFALSE 11382
// begin disable ;
11247: DISABLE
// DialogueOn ;
11248: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11252: LD_INT 22
11254: PUSH
11255: LD_INT 1
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 26
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 2
11274: PUSH
11275: LD_INT 25
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 25
11287: PUSH
11288: LD_INT 2
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 25
11297: PUSH
11298: LD_INT 3
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 25
11307: PUSH
11308: LD_INT 4
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 5
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 8
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: PPUSH
11349: CALL_OW 69
11353: PPUSH
11354: LD_STRING DT1-Sol1-1
11356: PPUSH
11357: LD_STRING DT1-FSol1-1
11359: PPUSH
11360: CALL 13366 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11364: LD_EXP 1
11368: PPUSH
11369: LD_STRING DT1-JMM-1
11371: PPUSH
11372: CALL_OW 88
// DialogueOff ;
11376: CALL_OW 7
// break ;
11380: GO 11384
// end ; end ;
11382: GO 11210
11384: POP
11385: POP
// end ;
11386: PPOPN 2
11388: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11389: LD_EXP 29
11393: PUSH
11394: LD_INT 1
11396: EQUAL
11397: PUSH
11398: LD_INT 11
11400: PPUSH
11401: LD_INT 22
11403: PUSH
11404: LD_INT 3
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 24
11413: PUSH
11414: LD_INT 251
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 2
11423: PUSH
11424: LD_INT 21
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 21
11436: PUSH
11437: LD_INT 1
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: LIST
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: PPUSH
11454: CALL_OW 70
11458: PUSH
11459: LD_INT 0
11461: EQUAL
11462: AND
11463: PUSH
11464: LD_EXP 30
11468: PUSH
11469: LD_INT 3
11471: PUSH
11472: LD_INT 3
11474: PUSH
11475: LD_INT 4
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: LD_OWVAR 67
11487: ARRAY
11488: LESSEQUAL
11489: AND
11490: PUSH
11491: LD_EXP 30
11495: PUSH
11496: LD_INT 5
11498: GREATER
11499: AND
11500: IFFALSE 11657
11502: GO 11504
11504: DISABLE
// begin vehicleTeleported = 2 ;
11505: LD_ADDR_EXP 29
11509: PUSH
11510: LD_INT 2
11512: ST_TO_ADDR
// DialogueOn ;
11513: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11517: LD_EXP 1
11521: PPUSH
11522: LD_STRING DT1a-JMM-1
11524: PPUSH
11525: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11529: LD_INT 22
11531: PUSH
11532: LD_INT 1
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 26
11541: PUSH
11542: LD_INT 1
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 25
11554: PUSH
11555: LD_INT 1
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 25
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 25
11574: PUSH
11575: LD_INT 3
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 25
11584: PUSH
11585: LD_INT 4
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 25
11594: PUSH
11595: LD_INT 5
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 25
11604: PUSH
11605: LD_INT 8
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: LIST
11625: PPUSH
11626: CALL_OW 69
11630: PPUSH
11631: LD_STRING DT1a-Sol1-1
11633: PPUSH
11634: LD_STRING DT1a-FSol1-1
11636: PPUSH
11637: CALL 13366 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11641: LD_EXP 1
11645: PPUSH
11646: LD_STRING DT1a-JMM-2
11648: PPUSH
11649: CALL_OW 88
// DialogueOff ;
11653: CALL_OW 7
// end ;
11657: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11658: LD_EXP 29
11662: PUSH
11663: LD_INT 3
11665: EQUAL
11666: PUSH
11667: LD_EXP 30
11671: PUSH
11672: LD_INT 4
11674: GREATER
11675: AND
11676: IFFALSE 11887
11678: GO 11680
11680: DISABLE
11681: LD_INT 0
11683: PPUSH
11684: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: LD_INT 11
11692: PPUSH
11693: LD_INT 22
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 24
11705: PUSH
11706: LD_INT 250
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PPUSH
11717: CALL_OW 70
11721: ST_TO_ADDR
// enable ;
11722: ENABLE
// for i in vehicles do
11723: LD_ADDR_VAR 0 1
11727: PUSH
11728: LD_VAR 0 2
11732: PUSH
11733: FOR_IN
11734: IFFALSE 11885
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11736: LD_INT 1
11738: PPUSH
11739: LD_VAR 0 1
11743: PPUSH
11744: CALL_OW 292
11748: PUSH
11749: LD_EXP 29
11753: PUSH
11754: LD_INT 3
11756: EQUAL
11757: AND
11758: IFFALSE 11883
// begin disable ;
11760: DISABLE
// DialogueOn ;
11761: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11765: LD_INT 22
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 26
11777: PUSH
11778: LD_INT 1
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 2
11787: PUSH
11788: LD_INT 25
11790: PUSH
11791: LD_INT 1
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 25
11800: PUSH
11801: LD_INT 2
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 25
11810: PUSH
11811: LD_INT 3
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 25
11820: PUSH
11821: LD_INT 4
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 25
11830: PUSH
11831: LD_INT 5
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 25
11840: PUSH
11841: LD_INT 8
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: PPUSH
11862: CALL_OW 69
11866: PPUSH
11867: LD_STRING DT2-Sol1-1
11869: PPUSH
11870: LD_STRING DT2-FSol1-1
11872: PPUSH
11873: CALL 13366 0 3
// DialogueOff ;
11877: CALL_OW 7
// break ;
11881: GO 11885
// end ; end ;
11883: GO 11733
11885: POP
11886: POP
// end ;
11887: PPOPN 2
11889: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11890: LD_EXP 29
11894: PUSH
11895: LD_INT 3
11897: EQUAL
11898: PUSH
11899: LD_INT 11
11901: PPUSH
11902: LD_INT 22
11904: PUSH
11905: LD_INT 3
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 24
11914: PUSH
11915: LD_INT 251
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: LD_INT 21
11927: PUSH
11928: LD_INT 2
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 21
11937: PUSH
11938: LD_INT 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 70
11959: PUSH
11960: LD_INT 0
11962: EQUAL
11963: AND
11964: PUSH
11965: LD_EXP 30
11969: PUSH
11970: LD_INT 6
11972: PUSH
11973: LD_INT 6
11975: PUSH
11976: LD_INT 8
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: LD_OWVAR 67
11988: ARRAY
11989: EQUAL
11990: AND
11991: IFFALSE 12148
11993: GO 11995
11995: DISABLE
// begin vehicleTeleported = 4 ;
11996: LD_ADDR_EXP 29
12000: PUSH
12001: LD_INT 4
12003: ST_TO_ADDR
// DialogueOn ;
12004: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
12008: LD_EXP 1
12012: PPUSH
12013: LD_STRING DT2a-JMM-1
12015: PPUSH
12016: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
12020: LD_INT 22
12022: PUSH
12023: LD_INT 1
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 26
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: LD_INT 25
12045: PUSH
12046: LD_INT 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 25
12055: PUSH
12056: LD_INT 2
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 25
12065: PUSH
12066: LD_INT 3
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 25
12075: PUSH
12076: LD_INT 4
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 5
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 25
12095: PUSH
12096: LD_INT 8
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: PPUSH
12122: LD_STRING DT2a-Sol1-1
12124: PPUSH
12125: LD_STRING DT2a-FSol1-1
12127: PPUSH
12128: CALL 13366 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12132: LD_EXP 3
12136: PPUSH
12137: LD_STRING DT2a-Don-1
12139: PPUSH
12140: CALL_OW 88
// DialogueOff ;
12144: CALL_OW 7
// end ;
12148: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12149: LD_INT 1
12151: PPUSH
12152: LD_INT 45
12154: PPUSH
12155: LD_INT 74
12157: PPUSH
12158: CALL_OW 293
12162: IFFALSE 12330
12164: GO 12166
12166: DISABLE
// begin DialogueOn ;
12167: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12171: LD_INT 36
12173: PPUSH
12174: LD_INT 55
12176: PPUSH
12177: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12181: LD_INT 22
12183: PUSH
12184: LD_INT 1
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 26
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 2
12203: PUSH
12204: LD_INT 25
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 25
12216: PUSH
12217: LD_INT 2
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 25
12226: PUSH
12227: LD_INT 3
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 25
12236: PUSH
12237: LD_INT 4
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 25
12246: PUSH
12247: LD_INT 5
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 25
12256: PUSH
12257: LD_INT 8
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: PPUSH
12278: CALL_OW 69
12282: PPUSH
12283: LD_STRING D5-Sol1-1
12285: PPUSH
12286: LD_STRING D5-FSol1-
12288: PPUSH
12289: CALL 13366 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12293: LD_EXP 31
12297: PUSH
12298: LD_INT 1
12300: EQUAL
12301: PUSH
12302: LD_EXP 3
12306: PPUSH
12307: CALL_OW 300
12311: AND
12312: IFFALSE 12326
// Say ( Donaldson , D5-Don-1 ) ;
12314: LD_EXP 3
12318: PPUSH
12319: LD_STRING D5-Don-1
12321: PPUSH
12322: CALL_OW 88
// DialogueOff ;
12326: CALL_OW 7
// end ;
12330: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12331: LD_INT 1
12333: PPUSH
12334: LD_INT 10
12336: PPUSH
12337: CALL_OW 292
12341: PUSH
12342: LD_INT 1
12344: PPUSH
12345: LD_INT 137
12347: PPUSH
12348: CALL_OW 292
12352: OR
12353: IFFALSE 12497
12355: GO 12357
12357: DISABLE
// begin DialogueOn ;
12358: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12362: LD_INT 22
12364: PUSH
12365: LD_INT 1
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 26
12374: PUSH
12375: LD_INT 1
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 2
12384: PUSH
12385: LD_INT 25
12387: PUSH
12388: LD_INT 1
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 25
12397: PUSH
12398: LD_INT 2
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 25
12407: PUSH
12408: LD_INT 3
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 25
12417: PUSH
12418: LD_INT 4
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 25
12427: PUSH
12428: LD_INT 5
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: LD_INT 25
12437: PUSH
12438: LD_INT 8
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: PPUSH
12459: CALL_OW 69
12463: PPUSH
12464: LD_STRING DT3-Sol1-1
12466: PPUSH
12467: LD_STRING DT3-FSol1-1
12469: PPUSH
12470: CALL 13366 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12474: LD_EXP 1
12478: PPUSH
12479: LD_STRING DT3-JMM-1
12481: PPUSH
12482: CALL_OW 88
// DialogueOff ;
12486: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12490: LD_STRING M2
12492: PPUSH
12493: CALL_OW 337
// end ;
12497: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12498: LD_EXP 43
12502: PUSH
12503: LD_INT 0
12505: EQUAL
12506: IFFALSE 12589
12508: GO 12510
12510: DISABLE
12511: LD_INT 0
12513: PPUSH
// begin enable ;
12514: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_INT 10
12522: PPUSH
12523: LD_INT 22
12525: PUSH
12526: LD_INT 3
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: LD_INT 21
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 58
12545: PUSH
12546: EMPTY
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 70
12558: PUSH
12559: FOR_IN
12560: IFFALSE 12587
// if GetLives ( i ) < 1000 then
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 256
12571: PUSH
12572: LD_INT 1000
12574: LESS
12575: IFFALSE 12585
// ruEscape = 1 ;
12577: LD_ADDR_EXP 43
12581: PUSH
12582: LD_INT 1
12584: ST_TO_ADDR
12585: GO 12559
12587: POP
12588: POP
// end ;
12589: PPOPN 1
12591: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12592: LD_INT 3
12594: PPUSH
12595: CALL_OW 303
12599: PUSH
12600: LD_INT 4
12602: PPUSH
12603: CALL_OW 303
12607: OR
12608: PUSH
12609: LD_INT 22
12611: PPUSH
12612: LD_INT 22
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 70
12626: PUSH
12627: LD_INT 0
12629: GREATER
12630: OR
12631: PUSH
12632: LD_EXP 43
12636: PUSH
12637: LD_INT 1
12639: EQUAL
12640: OR
12641: IFFALSE 12872
12643: GO 12645
12645: DISABLE
12646: LD_INT 0
12648: PPUSH
12649: PPUSH
12650: PPUSH
// begin ruAI = 0 ;
12651: LD_ADDR_EXP 42
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12659: LD_ADDR_VAR 0 3
12663: PUSH
12664: LD_INT 10
12666: PPUSH
12667: LD_INT 22
12669: PUSH
12670: LD_INT 3
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 21
12679: PUSH
12680: LD_INT 2
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 58
12689: PUSH
12690: EMPTY
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 70
12702: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12703: LD_EXP 35
12707: PPUSH
12708: CALL_OW 122
// wait ( 0 0$1 ) ;
12712: LD_INT 35
12714: PPUSH
12715: CALL_OW 67
// DialogueOn ;
12719: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12723: LD_EXP 1
12727: PPUSH
12728: LD_STRING D6-JMM-1
12730: PPUSH
12731: CALL_OW 88
// DialogueOff ;
12735: CALL_OW 7
// if vehs > 0 then
12739: LD_VAR 0 3
12743: PUSH
12744: LD_INT 0
12746: GREATER
12747: IFFALSE 12817
// for i := 1 to RuScientists do
12749: LD_ADDR_VAR 0 1
12753: PUSH
12754: DOUBLE
12755: LD_INT 1
12757: DEC
12758: ST_TO_ADDR
12759: LD_EXP 35
12763: PUSH
12764: FOR_TO
12765: IFFALSE 12813
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12767: LD_EXP 35
12771: PUSH
12772: LD_VAR 0 1
12776: ARRAY
12777: PPUSH
12778: LD_INT 3
12780: PUSH
12781: LD_INT 60
12783: PUSH
12784: EMPTY
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 72
12795: PPUSH
12796: LD_VAR 0 3
12800: PUSH
12801: LD_VAR 0 1
12805: ARRAY
12806: PPUSH
12807: CALL_OW 120
12811: GO 12764
12813: POP
12814: POP
12815: GO 12872
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12817: LD_EXP 35
12821: PUSH
12822: LD_VAR 0 1
12826: ARRAY
12827: PPUSH
12828: LD_INT 3
12830: PUSH
12831: LD_INT 60
12833: PUSH
12834: EMPTY
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PPUSH
12841: CALL_OW 72
12845: PPUSH
12846: LD_INT 13
12848: PUSH
12849: LD_INT 14
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 2
12861: PPUSH
12862: CALL_OW 12
12866: ARRAY
12867: PPUSH
12868: CALL_OW 113
// end ;
12872: PPOPN 3
12874: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
12875: LD_EXP 42
12879: PUSH
12880: LD_INT 0
12882: EQUAL
12883: IFFALSE 13255
12885: GO 12887
12887: DISABLE
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
12892: PPUSH
12893: PPUSH
// begin enable ;
12894: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
12895: LD_EXP 35
12899: PPUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 95
12905: PUSH
12906: LD_INT 13
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 95
12915: PUSH
12916: LD_INT 14
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 72
12932: PUSH
12933: LD_INT 33
12935: PUSH
12936: LD_INT 1
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 23
12945: PUSH
12946: LD_INT 3
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: LD_INT 95
12958: PUSH
12959: LD_INT 13
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 95
12968: PUSH
12969: LD_INT 14
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 69
12990: OR
12991: IFFALSE 13180
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12993: LD_ADDR_VAR 0 2
12997: PUSH
12998: LD_EXP 35
13002: PPUSH
13003: LD_INT 2
13005: PUSH
13006: LD_INT 95
13008: PUSH
13009: LD_INT 13
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 95
13018: PUSH
13019: LD_INT 14
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 72
13035: PUSH
13036: LD_INT 1
13038: ARRAY
13039: ST_TO_ADDR
// if not unit then
13040: LD_VAR 0 2
13044: NOT
13045: IFFALSE 13180
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
13047: LD_ADDR_VAR 0 4
13051: PUSH
13052: LD_INT 2
13054: PUSH
13055: LD_INT 95
13057: PUSH
13058: LD_INT 13
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 95
13067: PUSH
13068: LD_INT 14
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 33
13082: PUSH
13083: LD_INT 1
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 23
13092: PUSH
13093: LD_INT 3
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 69
13109: ST_TO_ADDR
// if not tmp then
13110: LD_VAR 0 4
13114: NOT
13115: IFFALSE 13119
// exit ;
13117: GO 13255
// for i in tmp do
13119: LD_ADDR_VAR 0 1
13123: PUSH
13124: LD_VAR 0 4
13128: PUSH
13129: FOR_IN
13130: IFFALSE 13178
// if IsDrivenBy ( i ) in RuScientists then
13132: LD_VAR 0 1
13136: PPUSH
13137: CALL_OW 311
13141: PUSH
13142: LD_EXP 35
13146: IN
13147: IFFALSE 13176
// begin unit := IsDrivenBy ( i ) ;
13149: LD_ADDR_VAR 0 2
13153: PUSH
13154: LD_VAR 0 1
13158: PPUSH
13159: CALL_OW 311
13163: ST_TO_ADDR
// veh := i ;
13164: LD_ADDR_VAR 0 3
13168: PUSH
13169: LD_VAR 0 1
13173: ST_TO_ADDR
// break ;
13174: GO 13178
// end ;
13176: GO 13129
13178: POP
13179: POP
// end ; end ; if not unit then
13180: LD_VAR 0 2
13184: NOT
13185: IFFALSE 13189
// exit ;
13187: GO 13255
// RuScientists = RuScientists diff unit ;
13189: LD_ADDR_EXP 35
13193: PUSH
13194: LD_EXP 35
13198: PUSH
13199: LD_VAR 0 2
13203: DIFF
13204: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13205: LD_VAR 0 2
13209: PPUSH
13210: CALL_OW 64
// if veh then
13214: LD_VAR 0 3
13218: IFFALSE 13255
// begin if GetWeapon ( veh ) = 49 then
13220: LD_VAR 0 3
13224: PPUSH
13225: CALL_OW 264
13229: PUSH
13230: LD_INT 49
13232: EQUAL
13233: IFFALSE 13246
// KillUnit ( veh ) else
13235: LD_VAR 0 3
13239: PPUSH
13240: CALL_OW 66
13244: GO 13255
// RemoveUnit ( veh ) ;
13246: LD_VAR 0 3
13250: PPUSH
13251: CALL_OW 64
// end ; end ; end_of_file
13255: PPOPN 4
13257: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
// if exist_mode then
13262: LD_VAR 0 2
13266: IFFALSE 13285
// unit := CreateCharacter ( ident ) else
13268: LD_ADDR_VAR 0 4
13272: PUSH
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 34
13282: ST_TO_ADDR
13283: GO 13300
// unit := NewCharacter ( ident ) ;
13285: LD_ADDR_VAR 0 4
13289: PUSH
13290: LD_VAR 0 1
13294: PPUSH
13295: CALL_OW 25
13299: ST_TO_ADDR
// result := unit ;
13300: LD_ADDR_VAR 0 3
13304: PUSH
13305: LD_VAR 0 4
13309: ST_TO_ADDR
// end ;
13310: LD_VAR 0 3
13314: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13315: LD_INT 0
13317: PPUSH
13318: PPUSH
// for i in charactersList do
13319: LD_ADDR_VAR 0 4
13323: PUSH
13324: LD_VAR 0 1
13328: PUSH
13329: FOR_IN
13330: IFFALSE 13359
// begin if IsOk ( i ) then
13332: LD_VAR 0 4
13336: PPUSH
13337: CALL_OW 302
13341: IFFALSE 13357
// SaveCharacters ( i , ident ) ;
13343: LD_VAR 0 4
13347: PPUSH
13348: LD_VAR 0 2
13352: PPUSH
13353: CALL_OW 38
// end ;
13357: GO 13329
13359: POP
13360: POP
// end ;
13361: LD_VAR 0 3
13365: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13366: LD_INT 0
13368: PPUSH
13369: PPUSH
13370: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13371: LD_ADDR_VAR 0 1
13375: PUSH
13376: LD_VAR 0 1
13380: PUSH
13381: LD_EXP 1
13385: PUSH
13386: LD_EXP 7
13390: PUSH
13391: LD_EXP 3
13395: PUSH
13396: LD_EXP 4
13400: PUSH
13401: LD_EXP 5
13405: PUSH
13406: LD_EXP 2
13410: PUSH
13411: LD_EXP 12
13415: PUSH
13416: LD_EXP 13
13420: PUSH
13421: LD_EXP 9
13425: PUSH
13426: LD_EXP 11
13430: PUSH
13431: LD_EXP 6
13435: PUSH
13436: LD_EXP 8
13440: PUSH
13441: LD_EXP 10
13445: PUSH
13446: LD_EXP 22
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: DIFF
13467: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13468: LD_ADDR_VAR 0 6
13472: PUSH
13473: LD_INT 1
13475: PPUSH
13476: LD_VAR 0 1
13480: PPUSH
13481: CALL_OW 12
13485: ST_TO_ADDR
// for i = 1 to characters do
13486: LD_ADDR_VAR 0 5
13490: PUSH
13491: DOUBLE
13492: LD_INT 1
13494: DEC
13495: ST_TO_ADDR
13496: LD_VAR 0 1
13500: PUSH
13501: FOR_TO
13502: IFFALSE 13612
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13504: LD_VAR 0 5
13508: PUSH
13509: LD_VAR 0 6
13513: EQUAL
13514: PUSH
13515: LD_VAR 0 1
13519: PUSH
13520: LD_VAR 0 5
13524: ARRAY
13525: PPUSH
13526: CALL_OW 258
13530: PUSH
13531: LD_INT 1
13533: EQUAL
13534: AND
13535: IFFALSE 13557
// Say ( characters [ i ] , dialogMID ) ;
13537: LD_VAR 0 1
13541: PUSH
13542: LD_VAR 0 5
13546: ARRAY
13547: PPUSH
13548: LD_VAR 0 2
13552: PPUSH
13553: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13557: LD_VAR 0 5
13561: PUSH
13562: LD_VAR 0 6
13566: EQUAL
13567: PUSH
13568: LD_VAR 0 1
13572: PUSH
13573: LD_VAR 0 5
13577: ARRAY
13578: PPUSH
13579: CALL_OW 258
13583: PUSH
13584: LD_INT 2
13586: EQUAL
13587: AND
13588: IFFALSE 13610
// Say ( characters [ i ] , dialogFID ) ;
13590: LD_VAR 0 1
13594: PUSH
13595: LD_VAR 0 5
13599: ARRAY
13600: PPUSH
13601: LD_VAR 0 3
13605: PPUSH
13606: CALL_OW 88
// end ;
13610: GO 13501
13612: POP
13613: POP
// end ;
13614: LD_VAR 0 4
13618: RET
// export function PrepareDifficulty ; var tmp ; begin
13619: LD_INT 0
13621: PPUSH
13622: PPUSH
// if Difficulty = 1 then
13623: LD_OWVAR 67
13627: PUSH
13628: LD_INT 1
13630: EQUAL
13631: IFFALSE 13649
// begin RuSolMinLevel = 8 ;
13633: LD_ADDR_EXP 37
13637: PUSH
13638: LD_INT 8
13640: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13641: LD_ADDR_EXP 38
13645: PUSH
13646: LD_INT 10
13648: ST_TO_ADDR
// end ; if Difficulty = 2 then
13649: LD_OWVAR 67
13653: PUSH
13654: LD_INT 2
13656: EQUAL
13657: IFFALSE 13751
// begin RuSolMinLevel = 9 ;
13659: LD_ADDR_EXP 37
13663: PUSH
13664: LD_INT 9
13666: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13667: LD_ADDR_EXP 38
13671: PUSH
13672: LD_INT 10
13674: ST_TO_ADDR
// uc_nation = 3 ;
13675: LD_ADDR_OWVAR 21
13679: PUSH
13680: LD_INT 3
13682: ST_TO_ADDR
// uc_side = 3 ;
13683: LD_ADDR_OWVAR 20
13687: PUSH
13688: LD_INT 3
13690: ST_TO_ADDR
// bc_level = 10 ;
13691: LD_ADDR_OWVAR 43
13695: PUSH
13696: LD_INT 10
13698: ST_TO_ADDR
// bc_type = b_turret ;
13699: LD_ADDR_OWVAR 42
13703: PUSH
13704: LD_INT 33
13706: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_INT 86
13714: PPUSH
13715: LD_INT 34
13717: PPUSH
13718: LD_INT 2
13720: PPUSH
13721: CALL_OW 47
13725: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13726: LD_VAR 0 2
13730: PPUSH
13731: LD_INT 49
13733: PPUSH
13734: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13738: LD_INT 64
13740: PPUSH
13741: LD_INT 3
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: CALL_OW 322
// end ; if Difficulty = 3 then
13751: LD_OWVAR 67
13755: PUSH
13756: LD_INT 3
13758: EQUAL
13759: IFFALSE 13897
// begin RuSolMinLevel = 10 ;
13761: LD_ADDR_EXP 37
13765: PUSH
13766: LD_INT 10
13768: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13769: LD_ADDR_EXP 38
13773: PUSH
13774: LD_INT 10
13776: ST_TO_ADDR
// uc_nation = 3 ;
13777: LD_ADDR_OWVAR 21
13781: PUSH
13782: LD_INT 3
13784: ST_TO_ADDR
// uc_side = 3 ;
13785: LD_ADDR_OWVAR 20
13789: PUSH
13790: LD_INT 3
13792: ST_TO_ADDR
// bc_level = 10 ;
13793: LD_ADDR_OWVAR 43
13797: PUSH
13798: LD_INT 10
13800: ST_TO_ADDR
// bc_type = b_turret ;
13801: LD_ADDR_OWVAR 42
13805: PUSH
13806: LD_INT 33
13808: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13809: LD_ADDR_VAR 0 2
13813: PUSH
13814: LD_INT 86
13816: PPUSH
13817: LD_INT 34
13819: PPUSH
13820: LD_INT 2
13822: PPUSH
13823: CALL_OW 47
13827: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13828: LD_VAR 0 2
13832: PPUSH
13833: LD_INT 49
13835: PPUSH
13836: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13840: LD_ADDR_VAR 0 2
13844: PUSH
13845: LD_INT 93
13847: PPUSH
13848: LD_INT 31
13850: PPUSH
13851: LD_INT 2
13853: PPUSH
13854: CALL_OW 47
13858: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13859: LD_VAR 0 2
13863: PPUSH
13864: LD_INT 49
13866: PPUSH
13867: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13871: LD_INT 64
13873: PPUSH
13874: LD_INT 3
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13884: LD_INT 65
13886: PPUSH
13887: LD_INT 3
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: CALL_OW 322
// end ; end ;
13897: LD_VAR 0 1
13901: RET
// export function ShowQuery1 ; begin
13902: LD_INT 0
13904: PPUSH
// case query ( Q1 ) of 1 :
13905: LD_STRING Q1
13907: PPUSH
13908: CALL_OW 97
13912: PUSH
13913: LD_INT 1
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13921
13919: GO 13932
13921: POP
// result = 1 ; 2 :
13922: LD_ADDR_VAR 0 1
13926: PUSH
13927: LD_INT 1
13929: ST_TO_ADDR
13930: GO 13971
13932: LD_INT 2
13934: DOUBLE
13935: EQUAL
13936: IFTRUE 13940
13938: GO 13951
13940: POP
// result = 2 ; 3 :
13941: LD_ADDR_VAR 0 1
13945: PUSH
13946: LD_INT 2
13948: ST_TO_ADDR
13949: GO 13971
13951: LD_INT 3
13953: DOUBLE
13954: EQUAL
13955: IFTRUE 13959
13957: GO 13970
13959: POP
// result = 3 ; end ;
13960: LD_ADDR_VAR 0 1
13964: PUSH
13965: LD_INT 3
13967: ST_TO_ADDR
13968: GO 13971
13970: POP
// end ;
13971: LD_VAR 0 1
13975: RET
// export function ShowQuery2 ; begin
13976: LD_INT 0
13978: PPUSH
// case query ( Q1a ) of 1 :
13979: LD_STRING Q1a
13981: PPUSH
13982: CALL_OW 97
13986: PUSH
13987: LD_INT 1
13989: DOUBLE
13990: EQUAL
13991: IFTRUE 13995
13993: GO 14006
13995: POP
// result = 1 ; 2 :
13996: LD_ADDR_VAR 0 1
14000: PUSH
14001: LD_INT 1
14003: ST_TO_ADDR
14004: GO 14045
14006: LD_INT 2
14008: DOUBLE
14009: EQUAL
14010: IFTRUE 14014
14012: GO 14025
14014: POP
// result = 2 ; 3 :
14015: LD_ADDR_VAR 0 1
14019: PUSH
14020: LD_INT 2
14022: ST_TO_ADDR
14023: GO 14045
14025: LD_INT 3
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14044
14033: POP
// result = 3 ; end ;
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: LD_INT 3
14041: ST_TO_ADDR
14042: GO 14045
14044: POP
// end ;
14045: LD_VAR 0 1
14049: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
14050: LD_INT 0
14052: PPUSH
14053: PPUSH
14054: PPUSH
14055: PPUSH
14056: PPUSH
// for i = 1 to count do
14057: LD_ADDR_VAR 0 8
14061: PUSH
14062: DOUBLE
14063: LD_INT 1
14065: DEC
14066: ST_TO_ADDR
14067: LD_VAR 0 6
14071: PUSH
14072: FOR_TO
14073: IFFALSE 14154
// begin uc_side = side ;
14075: LD_ADDR_OWVAR 20
14079: PUSH
14080: LD_VAR 0 1
14084: ST_TO_ADDR
// uc_nation = nation ;
14085: LD_ADDR_OWVAR 21
14089: PUSH
14090: LD_VAR 0 2
14094: ST_TO_ADDR
// hc_gallery =  ;
14095: LD_ADDR_OWVAR 33
14099: PUSH
14100: LD_STRING 
14102: ST_TO_ADDR
// hc_name =  ;
14103: LD_ADDR_OWVAR 26
14107: PUSH
14108: LD_STRING 
14110: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14111: LD_INT 0
14113: PPUSH
14114: LD_VAR 0 5
14118: PPUSH
14119: LD_VAR 0 4
14123: PPUSH
14124: CALL_OW 380
// un = CreateHuman ;
14128: LD_ADDR_VAR 0 10
14132: PUSH
14133: CALL_OW 44
14137: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14138: LD_VAR 0 10
14142: PPUSH
14143: LD_VAR 0 3
14147: PPUSH
14148: CALL_OW 52
// end ;
14152: GO 14072
14154: POP
14155: POP
// end ;
14156: LD_VAR 0 7
14160: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14161: LD_INT 0
14163: PPUSH
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14168: LD_ADDR_VAR 0 8
14172: PUSH
14173: LD_INT 48
14175: PUSH
14176: LD_INT 49
14178: PUSH
14179: LD_INT 50
14181: PUSH
14182: LD_INT 20
14184: PUSH
14185: LD_INT 1
14187: PUSH
14188: LD_INT 51
14190: PUSH
14191: LD_INT 52
14193: PUSH
14194: LD_INT 69
14196: PUSH
14197: LD_INT 39
14199: PUSH
14200: LD_INT 34
14202: PUSH
14203: LD_INT 40
14205: PUSH
14206: LD_INT 53
14208: PUSH
14209: LD_INT 71
14211: PUSH
14212: LD_INT 57
14214: PUSH
14215: LD_INT 58
14217: PUSH
14218: LD_INT 44
14220: PUSH
14221: LD_INT 32
14223: PUSH
14224: LD_INT 27
14226: PUSH
14227: LD_INT 23
14229: PUSH
14230: LD_INT 33
14232: PUSH
14233: LD_INT 59
14235: PUSH
14236: LD_INT 54
14238: PUSH
14239: LD_INT 55
14241: PUSH
14242: LD_INT 56
14244: PUSH
14245: LD_INT 63
14247: PUSH
14248: LD_INT 64
14250: PUSH
14251: LD_INT 65
14253: PUSH
14254: LD_INT 30
14256: PUSH
14257: LD_INT 31
14259: PUSH
14260: LD_INT 21
14262: PUSH
14263: LD_INT 22
14265: PUSH
14266: LD_INT 25
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14303: LD_ADDR_VAR 0 5
14307: PUSH
14308: DOUBLE
14309: LD_INT 1
14311: DEC
14312: ST_TO_ADDR
14313: LD_VAR 0 8
14317: PUSH
14318: FOR_TO
14319: IFFALSE 14395
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14321: LD_VAR 0 8
14325: PUSH
14326: LD_VAR 0 5
14330: ARRAY
14331: PPUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 321
14341: PUSH
14342: LD_INT 1
14344: EQUAL
14345: PUSH
14346: LD_VAR 0 8
14350: PUSH
14351: LD_VAR 0 5
14355: ARRAY
14356: PPUSH
14357: LD_VAR 0 3
14361: PPUSH
14362: CALL_OW 482
14366: PUSH
14367: LD_INT 1
14369: EQUAL
14370: AND
14371: IFFALSE 14393
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14373: LD_VAR 0 2
14377: PPUSH
14378: LD_VAR 0 8
14382: PUSH
14383: LD_VAR 0 5
14387: ARRAY
14388: PPUSH
14389: CALL_OW 184
14393: GO 14318
14395: POP
14396: POP
// end ;
14397: LD_VAR 0 4
14401: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14402: LD_INT 0
14404: PPUSH
14405: PPUSH
14406: PPUSH
14407: PPUSH
14408: PPUSH
14409: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14410: LD_ADDR_VAR 0 8
14414: PUSH
14415: LD_VAR 0 2
14419: PPUSH
14420: CALL_OW 313
14424: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14425: LD_ADDR_VAR 0 9
14429: PUSH
14430: LD_VAR 0 3
14434: PPUSH
14435: LD_INT 22
14437: PUSH
14438: LD_VAR 0 1
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 25
14449: PUSH
14450: LD_INT 2
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 24
14459: PUSH
14460: LD_INT 750
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 3
14469: PUSH
14470: LD_INT 54
14472: PUSH
14473: EMPTY
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 70
14490: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14491: LD_ADDR_VAR 0 6
14495: PUSH
14496: LD_VAR 0 3
14500: PPUSH
14501: LD_INT 22
14503: PUSH
14504: LD_VAR 0 1
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 21
14515: PUSH
14516: LD_INT 3
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 3
14525: PUSH
14526: LD_INT 24
14528: PUSH
14529: LD_INT 1000
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: PPUSH
14548: CALL_OW 70
14552: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14553: LD_VAR 0 6
14557: NOT
14558: PUSH
14559: LD_INT 22
14561: PUSH
14562: LD_VAR 0 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 25
14573: PUSH
14574: LD_INT 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 24
14583: PUSH
14584: LD_INT 250
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: NOT
14601: AND
14602: IFFALSE 14606
// exit ;
14604: GO 14788
// if buildings_list > 0 and engineerOkInside then
14606: LD_VAR 0 6
14610: PUSH
14611: LD_INT 0
14613: GREATER
14614: PUSH
14615: LD_VAR 0 8
14619: AND
14620: IFFALSE 14631
// ComExitBuilding ( engineerOkInside ) ;
14622: LD_VAR 0 8
14626: PPUSH
14627: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14631: LD_VAR 0 6
14635: PUSH
14636: LD_INT 0
14638: GREATER
14639: PUSH
14640: LD_VAR 0 9
14644: PUSH
14645: LD_INT 0
14647: GREATER
14648: AND
14649: IFFALSE 14669
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14651: LD_VAR 0 9
14655: PPUSH
14656: LD_VAR 0 6
14660: PUSH
14661: LD_INT 1
14663: ARRAY
14664: PPUSH
14665: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14669: LD_VAR 0 6
14673: PUSH
14674: LD_INT 0
14676: EQUAL
14677: PUSH
14678: LD_VAR 0 4
14682: PUSH
14683: LD_INT 0
14685: EQUAL
14686: AND
14687: PUSH
14688: LD_VAR 0 9
14692: PUSH
14693: LD_INT 0
14695: GREATER
14696: AND
14697: IFFALSE 14713
// ComEnterUnit ( engineerOkOutside , building ) ;
14699: LD_VAR 0 9
14703: PPUSH
14704: LD_VAR 0 2
14708: PPUSH
14709: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14713: LD_VAR 0 9
14717: PUSH
14718: LD_INT 0
14720: GREATER
14721: PUSH
14722: LD_VAR 0 6
14726: PUSH
14727: LD_INT 0
14729: EQUAL
14730: AND
14731: PUSH
14732: LD_VAR 0 4
14736: PUSH
14737: LD_INT 0
14739: GREATER
14740: AND
14741: IFFALSE 14788
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14743: LD_VAR 0 9
14747: PPUSH
14748: LD_VAR 0 4
14752: PUSH
14753: LD_INT 1
14755: ARRAY
14756: PPUSH
14757: LD_VAR 0 4
14761: PUSH
14762: LD_INT 2
14764: ARRAY
14765: PPUSH
14766: LD_VAR 0 4
14770: PUSH
14771: LD_INT 3
14773: ARRAY
14774: PPUSH
14775: LD_VAR 0 4
14779: PUSH
14780: LD_INT 4
14782: ARRAY
14783: PPUSH
14784: CALL_OW 145
// end ;
14788: LD_VAR 0 5
14792: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14793: LD_INT 0
14795: PPUSH
14796: PPUSH
14797: PPUSH
14798: PPUSH
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14804: LD_ADDR_VAR 0 6
14808: PUSH
14809: LD_INT 22
14811: PUSH
14812: LD_VAR 0 1
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 25
14823: PUSH
14824: LD_INT 4
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 24
14833: PUSH
14834: LD_INT 251
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: PPUSH
14846: CALL_OW 69
14850: PUSH
14851: LD_EXP 35
14855: PUSH
14856: EMPTY
14857: LIST
14858: DIFF
14859: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14860: LD_ADDR_VAR 0 7
14864: PUSH
14865: LD_VAR 0 3
14869: PPUSH
14870: LD_INT 22
14872: PUSH
14873: LD_VAR 0 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 25
14884: PUSH
14885: LD_INT 4
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 50
14894: PUSH
14895: EMPTY
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 70
14907: PUSH
14908: LD_EXP 35
14912: PUSH
14913: EMPTY
14914: LIST
14915: DIFF
14916: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14917: LD_ADDR_VAR 0 10
14921: PUSH
14922: LD_VAR 0 3
14926: PPUSH
14927: LD_INT 22
14929: PUSH
14930: LD_VAR 0 1
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: LD_INT 21
14941: PUSH
14942: LD_INT 1
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 3
14951: PUSH
14952: LD_INT 24
14954: PUSH
14955: LD_INT 750
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 70
14975: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14976: LD_ADDR_VAR 0 11
14980: PUSH
14981: LD_VAR 0 2
14985: PPUSH
14986: LD_INT 22
14988: PUSH
14989: LD_VAR 0 1
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 21
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 24
15013: PUSH
15014: LD_INT 1000
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: PPUSH
15030: CALL_OW 70
15034: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
15035: LD_VAR 0 10
15039: PUSH
15040: LD_INT 0
15042: GREATER
15043: PUSH
15044: LD_VAR 0 6
15048: PUSH
15049: LD_INT 0
15051: GREATER
15052: AND
15053: IFFALSE 15069
// ComMoveToArea ( damageUnits , healArea ) ;
15055: LD_VAR 0 10
15059: PPUSH
15060: LD_VAR 0 2
15064: PPUSH
15065: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
15069: LD_VAR 0 11
15073: PUSH
15074: LD_INT 0
15076: GREATER
15077: PUSH
15078: LD_VAR 0 7
15082: PUSH
15083: LD_INT 0
15085: GREATER
15086: AND
15087: IFFALSE 15107
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15089: LD_VAR 0 7
15093: PPUSH
15094: LD_VAR 0 11
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15107: LD_VAR 0 10
15111: PUSH
15112: LD_INT 0
15114: EQUAL
15115: PUSH
15116: LD_VAR 0 11
15120: PUSH
15121: LD_INT 0
15123: EQUAL
15124: AND
15125: PUSH
15126: LD_VAR 0 7
15130: PUSH
15131: LD_INT 0
15133: GREATER
15134: AND
15135: IFFALSE 15240
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15137: LD_ADDR_VAR 0 12
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_VAR 0 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 21
15156: PUSH
15157: LD_INT 3
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 30
15166: PUSH
15167: LD_INT 8
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15184: LD_ADDR_VAR 0 13
15188: PUSH
15189: LD_INT 1
15191: PPUSH
15192: LD_VAR 0 12
15196: PPUSH
15197: CALL_OW 12
15201: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15202: LD_VAR 0 7
15206: PPUSH
15207: LD_INT 3
15209: PUSH
15210: LD_INT 60
15212: PUSH
15213: EMPTY
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 72
15224: PPUSH
15225: LD_VAR 0 12
15229: PUSH
15230: LD_VAR 0 13
15234: ARRAY
15235: PPUSH
15236: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15240: LD_VAR 0 3
15244: PPUSH
15245: LD_INT 22
15247: PUSH
15248: LD_VAR 0 1
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 25
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 24
15269: PUSH
15270: LD_INT 751
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: LIST
15281: PPUSH
15282: CALL_OW 70
15286: PUSH
15287: LD_INT 0
15289: GREATER
15290: PUSH
15291: LD_INT 21
15293: PPUSH
15294: CALL_OW 302
15298: AND
15299: PUSH
15300: LD_INT 21
15302: PPUSH
15303: CALL_OW 255
15307: PUSH
15308: LD_INT 3
15310: EQUAL
15311: AND
15312: IFFALSE 15368
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15314: LD_VAR 0 3
15318: PPUSH
15319: LD_INT 22
15321: PUSH
15322: LD_VAR 0 1
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 25
15333: PUSH
15334: LD_INT 3
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 24
15343: PUSH
15344: LD_INT 751
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: PPUSH
15356: CALL_OW 70
15360: PPUSH
15361: LD_INT 21
15363: PPUSH
15364: CALL_OW 120
// end ;
15368: LD_VAR 0 5
15372: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15373: LD_INT 0
15375: PPUSH
15376: PPUSH
15377: PPUSH
15378: PPUSH
15379: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15380: LD_ADDR_VAR 0 6
15384: PUSH
15385: LD_INT 22
15387: PUSH
15388: LD_VAR 0 1
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 2
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: LD_INT 31
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 30
15412: PUSH
15413: LD_INT 32
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 30
15422: PUSH
15423: LD_INT 33
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 30
15432: PUSH
15433: LD_INT 4
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 30
15442: PUSH
15443: LD_INT 5
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15467: LD_ADDR_VAR 0 7
15471: PUSH
15472: LD_INT 22
15474: PUSH
15475: LD_VAR 0 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 21
15486: PUSH
15487: LD_INT 3
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 58
15496: PUSH
15497: EMPTY
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 69
15509: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15510: LD_VAR 0 6
15514: PUSH
15515: LD_INT 0
15517: GREATER
15518: PUSH
15519: LD_VAR 0 7
15523: PUSH
15524: LD_INT 0
15526: GREATER
15527: AND
15528: IFFALSE 15598
// begin for i in turretsList do
15530: LD_ADDR_VAR 0 4
15534: PUSH
15535: LD_VAR 0 6
15539: PUSH
15540: FOR_IN
15541: IFFALSE 15596
// begin for j in enemyBuildings do
15543: LD_ADDR_VAR 0 5
15547: PUSH
15548: LD_VAR 0 7
15552: PUSH
15553: FOR_IN
15554: IFFALSE 15592
// begin if GetDistUnits ( i , j ) < 20 then
15556: LD_VAR 0 4
15560: PPUSH
15561: LD_VAR 0 5
15565: PPUSH
15566: CALL_OW 296
15570: PUSH
15571: LD_INT 20
15573: LESS
15574: IFFALSE 15590
// begin ComAttackUnit ( i , j ) ;
15576: LD_VAR 0 4
15580: PPUSH
15581: LD_VAR 0 5
15585: PPUSH
15586: CALL_OW 115
// end ; end ;
15590: GO 15553
15592: POP
15593: POP
// end ;
15594: GO 15540
15596: POP
15597: POP
// end ; end ;
15598: LD_VAR 0 3
15602: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15603: LD_INT 0
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15611: LD_ADDR_VAR 0 7
15615: PUSH
15616: LD_VAR 0 2
15620: PPUSH
15621: LD_INT 22
15623: PUSH
15624: LD_VAR 0 1
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 21
15635: PUSH
15636: LD_INT 2
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 34
15645: PUSH
15646: LD_INT 52
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 70
15662: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15663: LD_ADDR_VAR 0 8
15667: PUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: LD_INT 22
15675: PUSH
15676: LD_VAR 0 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 21
15687: PUSH
15688: LD_INT 3
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 3
15697: PUSH
15698: LD_INT 24
15700: PUSH
15701: LD_INT 1000
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: PPUSH
15720: CALL_OW 70
15724: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15725: LD_VAR 0 8
15729: PUSH
15730: LD_INT 0
15732: GREATER
15733: PUSH
15734: LD_VAR 0 7
15738: PPUSH
15739: LD_INT 24
15741: PUSH
15742: LD_INT 750
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PPUSH
15749: CALL_OW 72
15753: PUSH
15754: LD_INT 0
15756: GREATER
15757: AND
15758: IFFALSE 15778
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15760: LD_VAR 0 7
15764: PPUSH
15765: LD_VAR 0 8
15769: PUSH
15770: LD_INT 1
15772: ARRAY
15773: PPUSH
15774: CALL_OW 130
// end ;
15778: LD_VAR 0 3
15782: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15783: LD_INT 0
15785: PPUSH
15786: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15787: LD_INT 22
15789: PUSH
15790: LD_VAR 0 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 21
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PPUSH
15813: CALL_OW 69
15817: PUSH
15818: LD_INT 18
15820: PPUSH
15821: LD_INT 22
15823: PUSH
15824: LD_VAR 0 1
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 2
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 70
15851: PUSH
15852: LD_VAR 0 3
15856: LESSEQUAL
15857: DIFF
15858: IFFALSE 15925
// for i = 1 to vehCount do
15860: LD_ADDR_VAR 0 9
15864: PUSH
15865: DOUBLE
15866: LD_INT 1
15868: DEC
15869: ST_TO_ADDR
15870: LD_VAR 0 3
15874: PUSH
15875: FOR_TO
15876: IFFALSE 15923
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15878: LD_VAR 0 2
15882: PPUSH
15883: LD_VAR 0 7
15887: PPUSH
15888: LD_VAR 0 5
15892: PPUSH
15893: LD_VAR 0 6
15897: PPUSH
15898: LD_VAR 0 4
15902: PUSH
15903: LD_INT 1
15905: PPUSH
15906: LD_VAR 0 4
15910: PPUSH
15911: CALL_OW 12
15915: ARRAY
15916: PPUSH
15917: CALL_OW 185
15921: GO 15875
15923: POP
15924: POP
// end ;
15925: LD_VAR 0 8
15929: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15930: LD_INT 0
15932: PPUSH
15933: PPUSH
15934: PPUSH
15935: PPUSH
15936: PPUSH
15937: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15938: LD_EXP 40
15942: PUSH
15943: LD_INT 3
15945: PUSH
15946: LD_INT 4
15948: PUSH
15949: LD_INT 4
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: PUSH
15957: LD_OWVAR 67
15961: ARRAY
15962: GREATEREQUAL
15963: PUSH
15964: LD_EXP 41
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: LD_INT 2
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: LIST
15982: PUSH
15983: LD_OWVAR 67
15987: ARRAY
15988: GREATEREQUAL
15989: AND
15990: IFFALSE 16223
// begin repeat wait ( 0 0$3 ) ;
15992: LD_INT 105
15994: PPUSH
15995: CALL_OW 67
// for j in russianTanks do
15999: LD_ADDR_VAR 0 4
16003: PUSH
16004: LD_EXP 40
16008: PUSH
16009: FOR_IN
16010: IFFALSE 16211
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
16012: LD_ADDR_VAR 0 6
16016: PUSH
16017: LD_INT 81
16019: PUSH
16020: LD_VAR 0 1
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 101
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PPUSH
16043: CALL_OW 69
16047: PPUSH
16048: LD_VAR 0 4
16052: PPUSH
16053: CALL_OW 74
16057: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
16058: LD_ADDR_VAR 0 7
16062: PUSH
16063: LD_INT 81
16065: PUSH
16066: LD_VAR 0 1
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 101
16077: PUSH
16078: LD_INT 1
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 2
16087: PUSH
16088: LD_INT 59
16090: PUSH
16091: EMPTY
16092: LIST
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 21
16106: PUSH
16107: LD_INT 2
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: PPUSH
16128: CALL_OW 69
16132: PPUSH
16133: LD_VAR 0 4
16137: PPUSH
16138: CALL_OW 74
16142: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16143: LD_VAR 0 4
16147: PPUSH
16148: LD_VAR 0 6
16152: PPUSH
16153: CALL_OW 296
16157: PUSH
16158: LD_INT 8
16160: PLUS
16161: PUSH
16162: LD_VAR 0 4
16166: PPUSH
16167: LD_VAR 0 7
16171: PPUSH
16172: CALL_OW 296
16176: LESS
16177: IFFALSE 16195
// ComAttackUnit ( j , target1 ) else
16179: LD_VAR 0 4
16183: PPUSH
16184: LD_VAR 0 6
16188: PPUSH
16189: CALL_OW 115
16193: GO 16209
// ComAttackUnit ( j , target2 ) ;
16195: LD_VAR 0 4
16199: PPUSH
16200: LD_VAR 0 7
16204: PPUSH
16205: CALL_OW 115
// end ;
16209: GO 16009
16211: POP
16212: POP
// until russianTanks = 0 ;
16213: LD_EXP 40
16217: PUSH
16218: LD_INT 0
16220: EQUAL
16221: IFFALSE 15992
// end ; end ;
16223: LD_VAR 0 2
16227: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16228: LD_INT 0
16230: PPUSH
16231: PPUSH
16232: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16233: LD_EXP 40
16237: PUSH
16238: LD_INT 1
16240: GREATEREQUAL
16241: PUSH
16242: LD_EXP 41
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: LD_INT 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: LD_OWVAR 67
16265: ARRAY
16266: GREATEREQUAL
16267: AND
16268: IFFALSE 16418
// repeat wait ( 0 0$3 ) ;
16270: LD_INT 105
16272: PPUSH
16273: CALL_OW 67
// if russianTimeLapsers > 0 then
16277: LD_EXP 41
16281: PUSH
16282: LD_INT 0
16284: GREATER
16285: IFFALSE 16408
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16287: LD_ADDR_VAR 0 3
16291: PUSH
16292: LD_EXP 41
16296: PPUSH
16297: LD_INT 3
16299: PUSH
16300: LD_INT 60
16302: PUSH
16303: EMPTY
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 72
16314: PUSH
16315: FOR_IN
16316: IFFALSE 16406
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
16318: LD_ADDR_VAR 0 4
16322: PUSH
16323: LD_INT 81
16325: PUSH
16326: LD_VAR 0 1
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 101
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 21
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: PPUSH
16360: CALL_OW 69
16364: PPUSH
16365: LD_VAR 0 3
16369: PPUSH
16370: CALL_OW 74
16374: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
16375: LD_VAR 0 3
16379: PPUSH
16380: LD_VAR 0 4
16384: PPUSH
16385: CALL_OW 250
16389: PPUSH
16390: LD_VAR 0 4
16394: PPUSH
16395: CALL_OW 251
16399: PPUSH
16400: CALL_OW 111
// end ;
16404: GO 16315
16406: POP
16407: POP
// until russianTimeLapsers = 0 ;
16408: LD_EXP 41
16412: PUSH
16413: LD_INT 0
16415: EQUAL
16416: IFFALSE 16270
// end ;
16418: LD_VAR 0 2
16422: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16423: LD_INT 0
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
16430: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16431: LD_ADDR_VAR 0 6
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 25
16450: PUSH
16451: LD_INT 9
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PPUSH
16462: CALL_OW 69
16466: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16467: LD_ADDR_VAR 0 7
16471: PUSH
16472: LD_INT 81
16474: PUSH
16475: LD_VAR 0 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 3
16486: PUSH
16487: LD_INT 21
16489: PUSH
16490: LD_INT 3
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PPUSH
16505: CALL_OW 69
16509: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16510: LD_ADDR_VAR 0 4
16514: PUSH
16515: LD_INT 1
16517: PPUSH
16518: LD_INT 3
16520: PPUSH
16521: CALL_OW 12
16525: ST_TO_ADDR
// for i = 1 to list do
16526: LD_ADDR_VAR 0 5
16530: PUSH
16531: DOUBLE
16532: LD_INT 1
16534: DEC
16535: ST_TO_ADDR
16536: LD_VAR 0 6
16540: PUSH
16541: FOR_TO
16542: IFFALSE 16744
// for ta in filter do
16544: LD_ADDR_VAR 0 3
16548: PUSH
16549: LD_VAR 0 7
16553: PUSH
16554: FOR_IN
16555: IFFALSE 16740
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16557: LD_VAR 0 6
16561: PUSH
16562: LD_VAR 0 5
16566: ARRAY
16567: PPUSH
16568: LD_VAR 0 3
16572: PPUSH
16573: CALL_OW 296
16577: PUSH
16578: LD_INT 15
16580: LESSEQUAL
16581: IFFALSE 16738
// begin case c of 1 :
16583: LD_VAR 0 4
16587: PUSH
16588: LD_INT 1
16590: DOUBLE
16591: EQUAL
16592: IFTRUE 16596
16594: GO 16634
16596: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16597: LD_VAR 0 6
16601: PUSH
16602: LD_VAR 0 5
16606: ARRAY
16607: PPUSH
16608: LD_VAR 0 3
16612: PPUSH
16613: CALL_OW 250
16617: PPUSH
16618: LD_VAR 0 3
16622: PPUSH
16623: CALL_OW 251
16627: PPUSH
16628: CALL_OW 154
16632: GO 16738
16634: LD_INT 2
16636: DOUBLE
16637: EQUAL
16638: IFTRUE 16642
16640: GO 16706
16642: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16643: LD_VAR 0 6
16647: PUSH
16648: LD_VAR 0 5
16652: ARRAY
16653: PPUSH
16654: LD_VAR 0 3
16658: PPUSH
16659: CALL_OW 250
16663: PUSH
16664: LD_INT 1
16666: NEG
16667: PPUSH
16668: LD_INT 1
16670: PPUSH
16671: CALL_OW 12
16675: PLUS
16676: PPUSH
16677: LD_VAR 0 3
16681: PPUSH
16682: CALL_OW 251
16686: PUSH
16687: LD_INT 1
16689: NEG
16690: PPUSH
16691: LD_INT 1
16693: PPUSH
16694: CALL_OW 12
16698: PLUS
16699: PPUSH
16700: CALL_OW 153
16704: GO 16738
16706: LD_INT 3
16708: DOUBLE
16709: EQUAL
16710: IFTRUE 16714
16712: GO 16737
16714: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16715: LD_VAR 0 6
16719: PUSH
16720: LD_VAR 0 5
16724: ARRAY
16725: PPUSH
16726: LD_VAR 0 3
16730: PPUSH
16731: CALL_OW 115
16735: GO 16738
16737: POP
// end ; end ;
16738: GO 16554
16740: POP
16741: POP
16742: GO 16541
16744: POP
16745: POP
// end ;
16746: LD_VAR 0 2
16750: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16751: LD_INT 0
16753: PPUSH
16754: PPUSH
16755: PPUSH
16756: PPUSH
// r := 100 ;
16757: LD_ADDR_VAR 0 5
16761: PUSH
16762: LD_INT 100
16764: ST_TO_ADDR
// x := 0 ;
16765: LD_ADDR_VAR 0 6
16769: PUSH
16770: LD_INT 0
16772: ST_TO_ADDR
// while ( x < n ) do
16773: LD_VAR 0 6
16777: PUSH
16778: LD_VAR 0 2
16782: LESS
16783: IFFALSE 17070
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16785: LD_ADDR_VAR 0 4
16789: PUSH
16790: DOUBLE
16791: LD_INT 1
16793: DEC
16794: ST_TO_ADDR
16795: LD_VAR 0 1
16799: PPUSH
16800: LD_INT 0
16802: PPUSH
16803: CALL_OW 517
16807: PUSH
16808: LD_INT 1
16810: ARRAY
16811: PUSH
16812: FOR_TO
16813: IFFALSE 17066
// begin if r > 50 then
16815: LD_VAR 0 5
16819: PUSH
16820: LD_INT 50
16822: GREATER
16823: IFFALSE 17042
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16825: LD_VAR 0 1
16829: PPUSH
16830: LD_INT 0
16832: PPUSH
16833: CALL_OW 517
16837: PUSH
16838: LD_INT 1
16840: ARRAY
16841: PUSH
16842: LD_VAR 0 4
16846: ARRAY
16847: PPUSH
16848: LD_VAR 0 1
16852: PPUSH
16853: LD_INT 0
16855: PPUSH
16856: CALL_OW 517
16860: PUSH
16861: LD_INT 2
16863: ARRAY
16864: PUSH
16865: LD_VAR 0 4
16869: ARRAY
16870: PPUSH
16871: CALL_OW 458
16875: NOT
16876: IFFALSE 17026
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_INT 0
16885: PPUSH
16886: CALL_OW 517
16890: PUSH
16891: LD_INT 1
16893: ARRAY
16894: PUSH
16895: LD_VAR 0 4
16899: ARRAY
16900: PPUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: LD_INT 0
16908: PPUSH
16909: CALL_OW 517
16913: PUSH
16914: LD_INT 2
16916: ARRAY
16917: PUSH
16918: LD_VAR 0 4
16922: ARRAY
16923: PPUSH
16924: LD_INT 8
16926: PPUSH
16927: LD_INT 0
16929: PPUSH
16930: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16934: LD_ADDR_EXP 45
16938: PUSH
16939: LD_EXP 45
16943: PPUSH
16944: LD_INT 1
16946: PPUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: LD_INT 0
16954: PPUSH
16955: CALL_OW 517
16959: PUSH
16960: LD_INT 1
16962: ARRAY
16963: PUSH
16964: LD_VAR 0 4
16968: ARRAY
16969: PUSH
16970: LD_VAR 0 1
16974: PPUSH
16975: LD_INT 0
16977: PPUSH
16978: CALL_OW 517
16982: PUSH
16983: LD_INT 2
16985: ARRAY
16986: PUSH
16987: LD_VAR 0 4
16991: ARRAY
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PPUSH
16997: CALL_OW 2
17001: ST_TO_ADDR
// r := 0 ;
17002: LD_ADDR_VAR 0 5
17006: PUSH
17007: LD_INT 0
17009: ST_TO_ADDR
// x := x + 1 ;
17010: LD_ADDR_VAR 0 6
17014: PUSH
17015: LD_VAR 0 6
17019: PUSH
17020: LD_INT 1
17022: PLUS
17023: ST_TO_ADDR
// end else
17024: GO 17040
// r := r + 35 ;
17026: LD_ADDR_VAR 0 5
17030: PUSH
17031: LD_VAR 0 5
17035: PUSH
17036: LD_INT 35
17038: PLUS
17039: ST_TO_ADDR
// end else
17040: GO 17064
// r := r + rand ( 10 , 25 ) ;
17042: LD_ADDR_VAR 0 5
17046: PUSH
17047: LD_VAR 0 5
17051: PUSH
17052: LD_INT 10
17054: PPUSH
17055: LD_INT 25
17057: PPUSH
17058: CALL_OW 12
17062: PLUS
17063: ST_TO_ADDR
// end ;
17064: GO 16812
17066: POP
17067: POP
17068: GO 16773
// end ;
17070: LD_VAR 0 3
17074: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17075: LD_INT 0
17077: PPUSH
17078: PPUSH
17079: PPUSH
17080: PPUSH
// tmpTab = [ ] ;
17081: LD_ADDR_VAR 0 6
17085: PUSH
17086: EMPTY
17087: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17088: LD_INT 22
17090: PUSH
17091: LD_VAR 0 1
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 30
17102: PUSH
17103: LD_INT 32
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PPUSH
17114: CALL_OW 69
17118: PUSH
17119: LD_INT 0
17121: GREATER
17122: IFFALSE 17205
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17124: LD_ADDR_VAR 0 4
17128: PUSH
17129: LD_INT 22
17131: PUSH
17132: LD_VAR 0 1
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 30
17143: PUSH
17144: LD_INT 32
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PPUSH
17155: CALL_OW 69
17159: PUSH
17160: FOR_IN
17161: IFFALSE 17203
// begin for j in UnitsInside ( i ) do
17163: LD_ADDR_VAR 0 5
17167: PUSH
17168: LD_VAR 0 4
17172: PPUSH
17173: CALL_OW 313
17177: PUSH
17178: FOR_IN
17179: IFFALSE 17199
// tmpTab = tmpTab ^ j ;
17181: LD_ADDR_VAR 0 6
17185: PUSH
17186: LD_VAR 0 6
17190: PUSH
17191: LD_VAR 0 5
17195: ADD
17196: ST_TO_ADDR
17197: GO 17178
17199: POP
17200: POP
// end ;
17201: GO 17160
17203: POP
17204: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17205: LD_VAR 0 6
17209: PPUSH
17210: LD_VAR 0 2
17214: PPUSH
17215: CALL_OW 250
17219: PPUSH
17220: LD_VAR 0 2
17224: PPUSH
17225: CALL_OW 251
17229: PPUSH
17230: CALL_OW 114
// end ;
17234: LD_VAR 0 3
17238: RET
// export function PrepareNature ; var i , un ; begin
17239: LD_INT 0
17241: PPUSH
17242: PPUSH
17243: PPUSH
// uc_side := 0 ;
17244: LD_ADDR_OWVAR 20
17248: PUSH
17249: LD_INT 0
17251: ST_TO_ADDR
// uc_nation := 0 ;
17252: LD_ADDR_OWVAR 21
17256: PUSH
17257: LD_INT 0
17259: ST_TO_ADDR
// InitHc ;
17260: CALL_OW 19
// hc_class := class_fish ;
17264: LD_ADDR_OWVAR 28
17268: PUSH
17269: LD_INT 20
17271: ST_TO_ADDR
// for i = 1 to 6 do
17272: LD_ADDR_VAR 0 2
17276: PUSH
17277: DOUBLE
17278: LD_INT 1
17280: DEC
17281: ST_TO_ADDR
17282: LD_INT 6
17284: PUSH
17285: FOR_TO
17286: IFFALSE 17305
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17288: CALL_OW 44
17292: PPUSH
17293: LD_INT 23
17295: PPUSH
17296: LD_INT 0
17298: PPUSH
17299: CALL_OW 49
17303: GO 17285
17305: POP
17306: POP
// for i = 1 to Difficulty + 2 do
17307: LD_ADDR_VAR 0 2
17311: PUSH
17312: DOUBLE
17313: LD_INT 1
17315: DEC
17316: ST_TO_ADDR
17317: LD_OWVAR 67
17321: PUSH
17322: LD_INT 2
17324: PLUS
17325: PUSH
17326: FOR_TO
17327: IFFALSE 17436
// begin hc_sex = sex_male ;
17329: LD_ADDR_OWVAR 27
17333: PUSH
17334: LD_INT 1
17336: ST_TO_ADDR
// uc_side = 0 ;
17337: LD_ADDR_OWVAR 20
17341: PUSH
17342: LD_INT 0
17344: ST_TO_ADDR
// uc_nation = nation_nature ;
17345: LD_ADDR_OWVAR 21
17349: PUSH
17350: LD_INT 0
17352: ST_TO_ADDR
// hc_class = class_tiger ;
17353: LD_ADDR_OWVAR 28
17357: PUSH
17358: LD_INT 14
17360: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17361: LD_ADDR_OWVAR 31
17365: PUSH
17366: LD_EXP 38
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: LD_INT 0
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17386: LD_ADDR_OWVAR 35
17390: PUSH
17391: LD_INT 5
17393: NEG
17394: PPUSH
17395: LD_INT 5
17397: PPUSH
17398: CALL_OW 12
17402: PUSH
17403: LD_OWVAR 67
17407: MUL
17408: ST_TO_ADDR
// un = CreateHuman ;
17409: LD_ADDR_VAR 0 3
17413: PUSH
17414: CALL_OW 44
17418: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17419: LD_VAR 0 3
17423: PPUSH
17424: LD_INT 24
17426: PPUSH
17427: LD_INT 0
17429: PPUSH
17430: CALL_OW 49
// end ;
17434: GO 17326
17436: POP
17437: POP
// for i = 1 to rand ( 3 , 4 ) do
17438: LD_ADDR_VAR 0 2
17442: PUSH
17443: DOUBLE
17444: LD_INT 1
17446: DEC
17447: ST_TO_ADDR
17448: LD_INT 3
17450: PPUSH
17451: LD_INT 4
17453: PPUSH
17454: CALL_OW 12
17458: PUSH
17459: FOR_TO
17460: IFFALSE 17552
// begin hc_sex = sex_male ;
17462: LD_ADDR_OWVAR 27
17466: PUSH
17467: LD_INT 1
17469: ST_TO_ADDR
// uc_side = 0 ;
17470: LD_ADDR_OWVAR 20
17474: PUSH
17475: LD_INT 0
17477: ST_TO_ADDR
// uc_nation = nation_nature ;
17478: LD_ADDR_OWVAR 21
17482: PUSH
17483: LD_INT 0
17485: ST_TO_ADDR
// hc_class = 18 ;
17486: LD_ADDR_OWVAR 28
17490: PUSH
17491: LD_INT 18
17493: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17494: LD_ADDR_OWVAR 31
17498: PUSH
17499: LD_INT 0
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: ST_TO_ADDR
// hc_agressivity = 0 ;
17517: LD_ADDR_OWVAR 35
17521: PUSH
17522: LD_INT 0
17524: ST_TO_ADDR
// un = CreateHuman ;
17525: LD_ADDR_VAR 0 3
17529: PUSH
17530: CALL_OW 44
17534: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17535: LD_VAR 0 3
17539: PPUSH
17540: LD_INT 24
17542: PPUSH
17543: LD_INT 0
17545: PPUSH
17546: CALL_OW 49
// end ;
17550: GO 17459
17552: POP
17553: POP
// for i = 1 to rand ( 1 , 3 ) do
17554: LD_ADDR_VAR 0 2
17558: PUSH
17559: DOUBLE
17560: LD_INT 1
17562: DEC
17563: ST_TO_ADDR
17564: LD_INT 1
17566: PPUSH
17567: LD_INT 3
17569: PPUSH
17570: CALL_OW 12
17574: PUSH
17575: FOR_TO
17576: IFFALSE 17724
// begin hc_sex = sex_male ;
17578: LD_ADDR_OWVAR 27
17582: PUSH
17583: LD_INT 1
17585: ST_TO_ADDR
// uc_side = 0 ;
17586: LD_ADDR_OWVAR 20
17590: PUSH
17591: LD_INT 0
17593: ST_TO_ADDR
// uc_nation = nation_nature ;
17594: LD_ADDR_OWVAR 21
17598: PUSH
17599: LD_INT 0
17601: ST_TO_ADDR
// hc_class = class_apeman ;
17602: LD_ADDR_OWVAR 28
17606: PUSH
17607: LD_INT 12
17609: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17610: LD_ADDR_OWVAR 31
17614: PUSH
17615: LD_EXP 37
17619: PPUSH
17620: LD_EXP 38
17624: PPUSH
17625: CALL_OW 12
17629: PUSH
17630: LD_EXP 37
17634: PPUSH
17635: LD_EXP 38
17639: PPUSH
17640: CALL_OW 12
17644: PUSH
17645: LD_EXP 37
17649: PPUSH
17650: LD_EXP 38
17654: PPUSH
17655: CALL_OW 12
17659: PUSH
17660: LD_EXP 37
17664: PPUSH
17665: LD_EXP 38
17669: PPUSH
17670: CALL_OW 12
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17681: LD_ADDR_OWVAR 35
17685: PUSH
17686: LD_INT 1
17688: PPUSH
17689: LD_INT 20
17691: PPUSH
17692: CALL_OW 12
17696: ST_TO_ADDR
// un = CreateHuman ;
17697: LD_ADDR_VAR 0 3
17701: PUSH
17702: CALL_OW 44
17706: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17707: LD_VAR 0 3
17711: PPUSH
17712: LD_INT 24
17714: PPUSH
17715: LD_INT 0
17717: PPUSH
17718: CALL_OW 49
// end ;
17722: GO 17575
17724: POP
17725: POP
// end ; end_of_file
17726: LD_VAR 0 1
17730: RET
// on UnitDestroyed ( unit ) do var i ;
17731: LD_INT 0
17733: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 255
17743: PUSH
17744: LD_INT 3
17746: EQUAL
17747: PUSH
17748: LD_VAR 0 1
17752: PPUSH
17753: CALL_OW 247
17757: PUSH
17758: LD_INT 1
17760: EQUAL
17761: AND
17762: IFFALSE 17826
// begin for i in RuScientists do
17764: LD_ADDR_VAR 0 2
17768: PUSH
17769: LD_EXP 35
17773: PUSH
17774: FOR_IN
17775: IFFALSE 17824
// if i = unit then
17777: LD_VAR 0 2
17781: PUSH
17782: LD_VAR 0 1
17786: EQUAL
17787: IFFALSE 17822
// begin RuScientists = RuScientists diff [ unit ] ;
17789: LD_ADDR_EXP 35
17793: PUSH
17794: LD_EXP 35
17798: PUSH
17799: LD_VAR 0 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: DIFF
17807: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17808: LD_ADDR_EXP 36
17812: PUSH
17813: LD_EXP 36
17817: PUSH
17818: LD_INT 1
17820: PLUS
17821: ST_TO_ADDR
// end ;
17822: GO 17774
17824: POP
17825: POP
// end ; end ;
17826: PPOPN 2
17828: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 10
17836: EQUAL
17837: PUSH
17838: LD_VAR 0 2
17842: PPUSH
17843: CALL_OW 255
17847: PUSH
17848: LD_INT 1
17850: EQUAL
17851: AND
17852: PUSH
17853: LD_EXP 48
17857: PUSH
17858: LD_INT 0
17860: EQUAL
17861: AND
17862: IFFALSE 17974
// begin eventVar1 = 1 ;
17864: LD_ADDR_EXP 48
17868: PUSH
17869: LD_INT 1
17871: ST_TO_ADDR
// teleportExplored = 1 ;
17872: LD_ADDR_EXP 34
17876: PUSH
17877: LD_INT 1
17879: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17880: LD_STRING M2a
17882: PPUSH
17883: CALL_OW 337
// wait ( 0 0$2 ) ;
17887: LD_INT 70
17889: PPUSH
17890: CALL_OW 67
// DialogueOn ;
17894: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17898: LD_INT 22
17900: PUSH
17901: LD_INT 1
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 21
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PPUSH
17922: CALL_OW 69
17926: PPUSH
17927: LD_STRING DT3a-Sol1-1
17929: PPUSH
17930: LD_STRING DT3a-FSol1-1
17932: PPUSH
17933: CALL 13366 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17937: LD_EXP 1
17941: PPUSH
17942: LD_STRING DT3a-JMM-1
17944: PPUSH
17945: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17949: LD_VAR 0 2
17953: PPUSH
17954: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17958: LD_EXP 1
17962: PPUSH
17963: LD_STRING DT3a-JMM-1a
17965: PPUSH
17966: CALL_OW 88
// DialogueOff ;
17970: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17974: LD_VAR 0 1
17978: PUSH
17979: LD_INT 10
17981: EQUAL
17982: PUSH
17983: LD_VAR 0 2
17987: PPUSH
17988: CALL_OW 247
17992: PUSH
17993: LD_INT 2
17995: EQUAL
17996: AND
17997: PUSH
17998: LD_VAR 0 2
18002: PPUSH
18003: CALL_OW 255
18007: PUSH
18008: LD_INT 3
18010: EQUAL
18011: AND
18012: PUSH
18013: LD_EXP 29
18017: PUSH
18018: LD_INT 0
18020: EQUAL
18021: AND
18022: IFFALSE 18039
// begin wait ( 0 0$3 ) ;
18024: LD_INT 105
18026: PPUSH
18027: CALL_OW 67
// vehicleTeleported = 1 ;
18031: LD_ADDR_EXP 29
18035: PUSH
18036: LD_INT 1
18038: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
18039: LD_VAR 0 1
18043: PUSH
18044: LD_INT 10
18046: EQUAL
18047: PUSH
18048: LD_VAR 0 2
18052: PPUSH
18053: CALL_OW 247
18057: PUSH
18058: LD_INT 2
18060: EQUAL
18061: AND
18062: PUSH
18063: LD_VAR 0 2
18067: PPUSH
18068: CALL_OW 255
18072: PUSH
18073: LD_INT 3
18075: EQUAL
18076: AND
18077: PUSH
18078: LD_EXP 29
18082: PUSH
18083: LD_INT 2
18085: EQUAL
18086: AND
18087: IFFALSE 18104
// begin wait ( 0 0$3 ) ;
18089: LD_INT 105
18091: PPUSH
18092: CALL_OW 67
// vehicleTeleported = 3 ;
18096: LD_ADDR_EXP 29
18100: PUSH
18101: LD_INT 3
18103: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18104: LD_VAR 0 1
18108: PUSH
18109: LD_INT 10
18111: EQUAL
18112: PUSH
18113: LD_VAR 0 2
18117: PPUSH
18118: CALL_OW 247
18122: PUSH
18123: LD_INT 2
18125: EQUAL
18126: AND
18127: PUSH
18128: LD_VAR 0 2
18132: PPUSH
18133: CALL_OW 255
18137: PUSH
18138: LD_INT 3
18140: EQUAL
18141: AND
18142: IFFALSE 18158
// tpCounter = tpCounter + 1 ;
18144: LD_ADDR_EXP 30
18148: PUSH
18149: LD_EXP 30
18153: PUSH
18154: LD_INT 1
18156: PLUS
18157: ST_TO_ADDR
// end ;
18158: PPOPN 2
18160: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18161: LD_VAR 0 2
18165: PUSH
18166: LD_INT 21
18168: EQUAL
18169: PUSH
18170: LD_VAR 0 2
18174: PUSH
18175: LD_INT 112
18177: EQUAL
18178: OR
18179: IFFALSE 18357
// if GetSide ( vehicle ) = 3 then
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 255
18190: PUSH
18191: LD_INT 3
18193: EQUAL
18194: IFFALSE 18357
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18196: LD_VAR 0 1
18200: PPUSH
18201: CALL_OW 264
18205: PUSH
18206: LD_INT 46
18208: EQUAL
18209: PUSH
18210: LD_VAR 0 1
18214: PPUSH
18215: CALL_OW 264
18219: PUSH
18220: LD_INT 45
18222: EQUAL
18223: OR
18224: PUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 264
18234: PUSH
18235: LD_INT 44
18237: EQUAL
18238: OR
18239: IFFALSE 18314
// begin russianTanks = russianTanks ^ vehicle ;
18241: LD_ADDR_EXP 40
18245: PUSH
18246: LD_EXP 40
18250: PUSH
18251: LD_VAR 0 1
18255: ADD
18256: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18257: LD_EXP 44
18261: PUSH
18262: LD_INT 1
18264: EQUAL
18265: PUSH
18266: LD_EXP 44
18270: PUSH
18271: LD_INT 0
18273: EQUAL
18274: OR
18275: IFFALSE 18289
// ComEnterUnit ( vehicle , ruteleprt ) ;
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_INT 10
18284: PPUSH
18285: CALL_OW 120
// if attackTactic = 2 then
18289: LD_EXP 44
18293: PUSH
18294: LD_INT 2
18296: EQUAL
18297: IFFALSE 18314
// ComMoveXY ( vehicle , 88 , 69 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 88
18306: PPUSH
18307: LD_INT 69
18309: PPUSH
18310: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 264
18323: PUSH
18324: LD_INT 49
18326: EQUAL
18327: IFFALSE 18357
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18329: LD_ADDR_EXP 41
18333: PUSH
18334: LD_EXP 41
18338: PUSH
18339: LD_VAR 0 1
18343: ADD
18344: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18345: LD_VAR 0 1
18349: PPUSH
18350: LD_INT 137
18352: PPUSH
18353: CALL_OW 120
// end ; end ; end ;
18357: PPOPN 2
18359: END
// on UnitGoesToRed ( unit ) do var i ;
18360: LD_INT 0
18362: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18363: LD_VAR 0 1
18367: PPUSH
18368: CALL_OW 255
18372: PUSH
18373: LD_INT 3
18375: EQUAL
18376: PUSH
18377: LD_VAR 0 1
18381: PPUSH
18382: CALL_OW 247
18386: PUSH
18387: LD_INT 2
18389: EQUAL
18390: AND
18391: IFFALSE 18509
// begin if russianTanks > 0 then
18393: LD_EXP 40
18397: PUSH
18398: LD_INT 0
18400: GREATER
18401: IFFALSE 18451
// for i in russianTanks do
18403: LD_ADDR_VAR 0 2
18407: PUSH
18408: LD_EXP 40
18412: PUSH
18413: FOR_IN
18414: IFFALSE 18449
// if i = unit then
18416: LD_VAR 0 2
18420: PUSH
18421: LD_VAR 0 1
18425: EQUAL
18426: IFFALSE 18447
// russianTanks = russianTanks diff [ unit ] ;
18428: LD_ADDR_EXP 40
18432: PUSH
18433: LD_EXP 40
18437: PUSH
18438: LD_VAR 0 1
18442: PUSH
18443: EMPTY
18444: LIST
18445: DIFF
18446: ST_TO_ADDR
18447: GO 18413
18449: POP
18450: POP
// if russianTimeLapsers > 0 then
18451: LD_EXP 41
18455: PUSH
18456: LD_INT 0
18458: GREATER
18459: IFFALSE 18509
// for i in russianTimeLapsers do
18461: LD_ADDR_VAR 0 2
18465: PUSH
18466: LD_EXP 41
18470: PUSH
18471: FOR_IN
18472: IFFALSE 18507
// if i = unit then
18474: LD_VAR 0 2
18478: PUSH
18479: LD_VAR 0 1
18483: EQUAL
18484: IFFALSE 18505
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18486: LD_ADDR_EXP 41
18490: PUSH
18491: LD_EXP 41
18495: PUSH
18496: LD_VAR 0 1
18500: PUSH
18501: EMPTY
18502: LIST
18503: DIFF
18504: ST_TO_ADDR
18505: GO 18471
18507: POP
18508: POP
// end ; end ;
18509: PPOPN 2
18511: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18512: LD_INT 0
18514: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18515: LD_VAR 0 2
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 3
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 2
18533: PPUSH
18534: CALL_OW 257
18538: PUSH
18539: LD_INT 3
18541: EQUAL
18542: AND
18543: PUSH
18544: LD_INT 21
18546: PPUSH
18547: CALL_OW 255
18551: PUSH
18552: LD_INT 3
18554: EQUAL
18555: AND
18556: PUSH
18557: LD_INT 21
18559: PPUSH
18560: CALL_OW 302
18564: AND
18565: IFFALSE 18579
// ComEnterUnit ( human , ru_fact ) ;
18567: LD_VAR 0 2
18571: PPUSH
18572: LD_INT 21
18574: PPUSH
18575: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18579: LD_VAR 0 2
18583: PPUSH
18584: CALL_OW 257
18588: PUSH
18589: LD_INT 4
18591: EQUAL
18592: PUSH
18593: LD_VAR 0 2
18597: PPUSH
18598: CALL_OW 255
18602: PUSH
18603: LD_INT 3
18605: EQUAL
18606: AND
18607: PUSH
18608: LD_EXP 42
18612: PUSH
18613: LD_INT 0
18615: EQUAL
18616: AND
18617: IFFALSE 18679
// for i in RuScientists do
18619: LD_ADDR_VAR 0 3
18623: PUSH
18624: LD_EXP 35
18628: PUSH
18629: FOR_IN
18630: IFFALSE 18677
// if i = human then
18632: LD_VAR 0 3
18636: PUSH
18637: LD_VAR 0 2
18641: EQUAL
18642: IFFALSE 18675
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18644: LD_VAR 0 3
18648: PPUSH
18649: LD_INT 13
18651: PUSH
18652: LD_INT 14
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PPUSH
18662: LD_INT 2
18664: PPUSH
18665: CALL_OW 12
18669: ARRAY
18670: PPUSH
18671: CALL_OW 113
18675: GO 18629
18677: POP
18678: POP
// end ;
18679: PPOPN 3
18681: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18682: LD_INT 0
18684: PPUSH
18685: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18686: LD_VAR 0 2
18690: PPUSH
18691: CALL_OW 255
18695: PUSH
18696: LD_INT 3
18698: EQUAL
18699: PUSH
18700: LD_VAR 0 2
18704: PPUSH
18705: CALL_OW 257
18709: PUSH
18710: LD_INT 4
18712: EQUAL
18713: AND
18714: IFFALSE 18856
// for i in RuScientists do
18716: LD_ADDR_VAR 0 3
18720: PUSH
18721: LD_EXP 35
18725: PUSH
18726: FOR_IN
18727: IFFALSE 18854
// if i = human then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_VAR 0 2
18738: EQUAL
18739: IFFALSE 18852
// if IsOk ( rutp ) then
18741: LD_INT 137
18743: PPUSH
18744: CALL_OW 302
18748: IFFALSE 18821
// begin rnd = rand ( 1 , 2 ) ;
18750: LD_ADDR_VAR 0 4
18754: PUSH
18755: LD_INT 1
18757: PPUSH
18758: LD_INT 2
18760: PPUSH
18761: CALL_OW 12
18765: ST_TO_ADDR
// if rnd = 1 then
18766: LD_VAR 0 4
18770: PUSH
18771: LD_INT 1
18773: EQUAL
18774: IFFALSE 18788
// ComEnterUnit ( vehicle , rutp ) ;
18776: LD_VAR 0 1
18780: PPUSH
18781: LD_INT 137
18783: PPUSH
18784: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18788: LD_VAR 0 1
18792: PPUSH
18793: LD_INT 13
18795: PUSH
18796: LD_INT 14
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: PPUSH
18806: LD_INT 2
18808: PPUSH
18809: CALL_OW 12
18813: ARRAY
18814: PPUSH
18815: CALL_OW 173
// end else
18819: GO 18852
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18821: LD_VAR 0 1
18825: PPUSH
18826: LD_INT 13
18828: PUSH
18829: LD_INT 14
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: PPUSH
18839: LD_INT 2
18841: PPUSH
18842: CALL_OW 12
18846: ARRAY
18847: PPUSH
18848: CALL_OW 113
// end ;
18852: GO 18726
18854: POP
18855: POP
// end ; end_of_file
18856: PPOPN 4
18858: END
// every 0 0$1 trigger ruAI = 1 do
18859: LD_EXP 42
18863: PUSH
18864: LD_INT 1
18866: EQUAL
18867: IFFALSE 18996
18869: GO 18871
18871: DISABLE
// begin enable ;
18872: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18873: LD_INT 3
18875: PPUSH
18876: LD_INT 6
18878: PPUSH
18879: LD_INT 9
18881: PPUSH
18882: LD_EXP 39
18886: PPUSH
18887: CALL 14402 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18891: LD_INT 3
18893: PPUSH
18894: LD_INT 4
18896: PPUSH
18897: LD_INT 10
18899: PPUSH
18900: LD_EXP 39
18904: PPUSH
18905: CALL 14402 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18909: LD_INT 3
18911: PPUSH
18912: LD_INT 9
18914: PPUSH
18915: CALL 15603 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18919: LD_INT 3
18921: PPUSH
18922: LD_INT 10
18924: PPUSH
18925: CALL 15603 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18929: LD_INT 3
18931: PPUSH
18932: LD_INT 16
18934: PPUSH
18935: LD_INT 9
18937: PPUSH
18938: LD_INT 91
18940: PPUSH
18941: CALL 14793 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18945: LD_INT 3
18947: PPUSH
18948: LD_INT 17
18950: PPUSH
18951: LD_INT 10
18953: PPUSH
18954: LD_INT 47
18956: PUSH
18957: LD_INT 129
18959: PUSH
18960: LD_INT 135
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL 14793 0 4
// AttackVehicles ( 3 ) ;
18972: LD_INT 3
18974: PPUSH
18975: CALL 15930 0 1
// IntBazooka ( 3 ) ;
18979: LD_INT 3
18981: PPUSH
18982: CALL 16423 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18986: LD_INT 3
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL 15373 0 2
// end ;
18996: END
// every 0 0$1 do
18997: GO 18999
18999: DISABLE
// begin enable ;
19000: ENABLE
// TimeLapsersAI ( 3 ) ;
19001: LD_INT 3
19003: PPUSH
19004: CALL 16228 0 1
// end ;
19008: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
19009: LD_INT 4
19011: PPUSH
19012: CALL_OW 303
19016: IFFALSE 19031
19018: GO 19020
19020: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
19021: LD_INT 3
19023: PPUSH
19024: LD_INT 4
19026: PPUSH
19027: CALL 17075 0 2
19031: END
// every 0 0$1 do
19032: GO 19034
19034: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
19035: LD_INT 3
19037: PPUSH
19038: LD_INT 91
19040: PPUSH
19041: LD_INT 3
19043: PPUSH
19044: CALL 14161 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
19048: LD_INT 3
19050: PPUSH
19051: LD_INT 47
19053: PPUSH
19054: LD_INT 3
19056: PPUSH
19057: CALL 14161 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
19061: LD_INT 3
19063: PPUSH
19064: LD_INT 129
19066: PPUSH
19067: LD_INT 3
19069: PPUSH
19070: CALL 14161 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
19074: LD_INT 3
19076: PPUSH
19077: LD_INT 3
19079: PPUSH
19080: LD_INT 3
19082: PPUSH
19083: CALL 14161 0 3
// end ;
19087: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19088: LD_EXP 28
19092: PUSH
19093: LD_INT 2
19095: EQUAL
19096: PUSH
19097: LD_INT 21
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_INT 3
19107: EQUAL
19108: AND
19109: PUSH
19110: LD_INT 112
19112: PPUSH
19113: CALL_OW 255
19117: PUSH
19118: LD_INT 3
19120: EQUAL
19121: AND
19122: PUSH
19123: LD_INT 21
19125: PPUSH
19126: CALL_OW 302
19130: AND
19131: PUSH
19132: LD_INT 112
19134: PPUSH
19135: CALL_OW 302
19139: AND
19140: PUSH
19141: LD_INT 22
19143: PUSH
19144: LD_INT 3
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 21
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 50
19163: PUSH
19164: EMPTY
19165: LIST
19166: PUSH
19167: LD_INT 3
19169: PUSH
19170: LD_INT 58
19172: PUSH
19173: EMPTY
19174: LIST
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: PPUSH
19186: CALL_OW 69
19190: PUSH
19191: LD_INT 18
19193: PPUSH
19194: LD_INT 22
19196: PUSH
19197: LD_INT 3
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 21
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PPUSH
19218: CALL_OW 70
19222: PUSH
19223: LD_INT 0
19225: EQUAL
19226: DIFF
19227: AND
19228: IFFALSE 19346
19230: GO 19232
19232: DISABLE
// begin enable ;
19233: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19234: LD_INT 3
19236: PPUSH
19237: LD_INT 21
19239: PPUSH
19240: LD_INT 3
19242: PUSH
19243: LD_INT 4
19245: PUSH
19246: LD_INT 4
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: LD_OWVAR 67
19258: ARRAY
19259: PPUSH
19260: LD_INT 46
19262: PUSH
19263: LD_INT 45
19265: PUSH
19266: LD_INT 44
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: PPUSH
19274: LD_INT 3
19276: PPUSH
19277: LD_INT 3
19279: PPUSH
19280: LD_INT 24
19282: PPUSH
19283: CALL 15783 0 7
// if russianTimeLapsers = 0 then
19287: LD_EXP 41
19291: PUSH
19292: LD_INT 0
19294: EQUAL
19295: IFFALSE 19346
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19297: LD_INT 3
19299: PPUSH
19300: LD_INT 112
19302: PPUSH
19303: LD_INT 1
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: LD_INT 2
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: PUSH
19317: LD_OWVAR 67
19321: ARRAY
19322: PPUSH
19323: LD_INT 49
19325: PUSH
19326: LD_INT 49
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PPUSH
19333: LD_INT 3
19335: PPUSH
19336: LD_INT 3
19338: PPUSH
19339: LD_INT 24
19341: PPUSH
19342: CALL 15783 0 7
// end ;
19346: END
// every 0 0$1 trigger arabianMines do var i ;
19347: LD_EXP 45
19351: IFFALSE 19472
19353: GO 19355
19355: DISABLE
19356: LD_INT 0
19358: PPUSH
// begin enable ;
19359: ENABLE
// for i in arabianMines do
19360: LD_ADDR_VAR 0 1
19364: PUSH
19365: LD_EXP 45
19369: PUSH
19370: FOR_IN
19371: IFFALSE 19470
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19373: LD_INT 22
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 92
19385: PUSH
19386: LD_VAR 0 1
19390: PUSH
19391: LD_INT 1
19393: ARRAY
19394: PUSH
19395: LD_VAR 0 1
19399: PUSH
19400: LD_INT 2
19402: ARRAY
19403: PUSH
19404: LD_INT 3
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: IFFALSE 19468
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19423: LD_VAR 0 1
19427: PUSH
19428: LD_INT 1
19430: ARRAY
19431: PPUSH
19432: LD_VAR 0 1
19436: PUSH
19437: LD_INT 2
19439: ARRAY
19440: PPUSH
19441: LD_INT 5
19443: PPUSH
19444: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19448: LD_ADDR_EXP 45
19452: PUSH
19453: LD_EXP 45
19457: PPUSH
19458: LD_VAR 0 1
19462: PPUSH
19463: CALL_OW 3
19467: ST_TO_ADDR
// end ; end ;
19468: GO 19370
19470: POP
19471: POP
// end ;
19472: PPOPN 1
19474: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19475: LD_EXP 29
19479: PUSH
19480: LD_INT 4
19482: EQUAL
19483: PUSH
19484: LD_EXP 30
19488: PUSH
19489: LD_INT 6
19491: PUSH
19492: LD_INT 8
19494: PUSH
19495: LD_INT 8
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: PUSH
19503: LD_OWVAR 67
19507: ARRAY
19508: EQUAL
19509: AND
19510: IFFALSE 19528
19512: GO 19514
19514: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19515: LD_INT 10
19517: PPUSH
19518: LD_INT 47
19520: PPUSH
19521: LD_INT 82
19523: PPUSH
19524: CALL_OW 243
19528: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19529: LD_EXP 29
19533: PUSH
19534: LD_INT 4
19536: EQUAL
19537: IFFALSE 19559
19539: GO 19541
19541: DISABLE
// begin enable ;
19542: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19543: LD_ADDR_EXP 44
19547: PUSH
19548: LD_INT 1
19550: PPUSH
19551: LD_INT 2
19553: PPUSH
19554: CALL_OW 12
19558: ST_TO_ADDR
// end ; end_of_file
19559: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19560: LD_EXP 35
19564: PUSH
19565: EMPTY
19566: EQUAL
19567: PUSH
19568: LD_INT 3
19570: PPUSH
19571: CALL_OW 301
19575: AND
19576: IFFALSE 19781
19578: GO 19580
19580: DISABLE
// begin if sciCounter = 0 then
19581: LD_EXP 36
19585: PUSH
19586: LD_INT 0
19588: EQUAL
19589: IFFALSE 19615
// begin Say ( JMM , D7a-JMM-1 ) ;
19591: LD_EXP 1
19595: PPUSH
19596: LD_STRING D7a-JMM-1
19598: PPUSH
19599: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19603: LD_EXP 22
19607: PPUSH
19608: LD_STRING D7a-Pow-1
19610: PPUSH
19611: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19615: LD_EXP 36
19619: PUSH
19620: LD_INT 0
19622: GREATER
19623: PUSH
19624: LD_EXP 36
19628: PUSH
19629: LD_INT 6
19631: LESS
19632: AND
19633: IFFALSE 19659
// begin Say ( JMM , D7b-JMM-1 ) ;
19635: LD_EXP 1
19639: PPUSH
19640: LD_STRING D7b-JMM-1
19642: PPUSH
19643: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19647: LD_EXP 22
19651: PPUSH
19652: LD_STRING D7b-Pow-1
19654: PPUSH
19655: CALL_OW 94
// end ; if sciCounter = 6 then
19659: LD_EXP 36
19663: PUSH
19664: LD_INT 6
19666: EQUAL
19667: IFFALSE 19777
// begin Say ( JMM , D7c-JMM-1 ) ;
19669: LD_EXP 1
19673: PPUSH
19674: LD_STRING D7c-JMM-1
19676: PPUSH
19677: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19681: LD_EXP 22
19685: PPUSH
19686: LD_STRING D7c-Pow-1
19688: PPUSH
19689: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19693: LD_EXP 1
19697: PPUSH
19698: LD_STRING D7d-JMM-1
19700: PPUSH
19701: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19705: LD_EXP 22
19709: PPUSH
19710: LD_STRING D7d-Pow-1
19712: PPUSH
19713: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19717: LD_EXP 1
19721: PPUSH
19722: LD_STRING D7d-JMM-2
19724: PPUSH
19725: CALL_OW 88
// if askSiberite = 1 then
19729: LD_EXP 33
19733: PUSH
19734: LD_INT 1
19736: EQUAL
19737: IFFALSE 19753
// begin Say ( JMM , D7d-JMM-2a ) ;
19739: LD_EXP 1
19743: PPUSH
19744: LD_STRING D7d-JMM-2a
19746: PPUSH
19747: CALL_OW 88
// end else
19751: GO 19765
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19753: LD_EXP 22
19757: PPUSH
19758: LD_STRING D7d-Pow-2
19760: PPUSH
19761: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19765: LD_EXP 22
19769: PPUSH
19770: LD_STRING D7d-Pow-2a
19772: PPUSH
19773: CALL_OW 94
// end ; FinishMission ;
19777: CALL 19782 0 0
// end ;
19781: END
// export function FinishMission ; begin
19782: LD_INT 0
19784: PPUSH
// if teleportExplored = 1 then
19785: LD_EXP 34
19789: PUSH
19790: LD_INT 1
19792: EQUAL
19793: IFFALSE 19807
// AddMedal ( Teleport , 1 ) else
19795: LD_STRING Teleport
19797: PPUSH
19798: LD_INT 1
19800: PPUSH
19801: CALL_OW 101
19805: GO 19818
// AddMedal ( Teleport , - 1 ) ;
19807: LD_STRING Teleport
19809: PPUSH
19810: LD_INT 1
19812: NEG
19813: PPUSH
19814: CALL_OW 101
// if sciCounter > 2 then
19818: LD_EXP 36
19822: PUSH
19823: LD_INT 2
19825: GREATER
19826: IFFALSE 19840
// AddMedal ( Materials , 1 ) else
19828: LD_STRING Materials
19830: PPUSH
19831: LD_INT 1
19833: PPUSH
19834: CALL_OW 101
19838: GO 19851
// AddMedal ( Materials , - 1 ) ;
19840: LD_STRING Materials
19842: PPUSH
19843: LD_INT 1
19845: NEG
19846: PPUSH
19847: CALL_OW 101
// if sciCounter = 6 then
19851: LD_EXP 36
19855: PUSH
19856: LD_INT 6
19858: EQUAL
19859: IFFALSE 19883
// begin AddMedal ( Scientists , 1 ) ;
19861: LD_STRING Scientists
19863: PPUSH
19864: LD_INT 1
19866: PPUSH
19867: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19871: LD_INT 1
19873: PPUSH
19874: LD_STRING 12_SciDed_1
19876: PPUSH
19877: CALL_OW 39
// end else
19881: GO 19904
// begin AddMedal ( Scientists , - 1 ) ;
19883: LD_STRING Scientists
19885: PPUSH
19886: LD_INT 1
19888: NEG
19889: PPUSH
19890: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19894: LD_INT 0
19896: PPUSH
19897: LD_STRING 12_SciDed_1
19899: PPUSH
19900: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19904: LD_EXP 32
19908: PPUSH
19909: LD_STRING 12_MainDepositFake_1
19911: PPUSH
19912: CALL_OW 39
// GiveMedals ( MAIN ) ;
19916: LD_STRING MAIN
19918: PPUSH
19919: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19923: LD_INT 22
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 21
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 25
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 25
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 25
19968: PUSH
19969: LD_INT 3
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 25
19978: PUSH
19979: LD_INT 4
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 25
19988: PUSH
19989: LD_INT 5
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 25
19998: PUSH
19999: LD_INT 8
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: LIST
20019: PPUSH
20020: CALL_OW 69
20024: PPUSH
20025: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20029: LD_EXP 1
20033: PPUSH
20034: LD_EXP 47
20038: PUSH
20039: LD_STRING JMM
20041: STR
20042: PPUSH
20043: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20047: LD_EXP 7
20051: PPUSH
20052: LD_EXP 47
20056: PUSH
20057: LD_STRING Brown
20059: STR
20060: PPUSH
20061: CALL 13315 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20065: LD_EXP 3
20069: PPUSH
20070: LD_EXP 47
20074: PUSH
20075: LD_STRING Donaldson
20077: STR
20078: PPUSH
20079: CALL 13315 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20083: LD_EXP 4
20087: PPUSH
20088: LD_EXP 47
20092: PUSH
20093: LD_STRING Bobby
20095: STR
20096: PPUSH
20097: CALL 13315 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20101: LD_EXP 5
20105: PPUSH
20106: LD_EXP 47
20110: PUSH
20111: LD_STRING Cyrus
20113: STR
20114: PPUSH
20115: CALL 13315 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20119: LD_EXP 2
20123: PPUSH
20124: LD_EXP 47
20128: PUSH
20129: LD_STRING Lisa
20131: STR
20132: PPUSH
20133: CALL 13315 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20137: LD_EXP 12
20141: PPUSH
20142: LD_EXP 47
20146: PUSH
20147: LD_STRING Frank
20149: STR
20150: PPUSH
20151: CALL 13315 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20155: LD_EXP 13
20159: PPUSH
20160: LD_EXP 47
20164: PUSH
20165: LD_STRING Kikuchi
20167: STR
20168: PPUSH
20169: CALL 13315 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20173: LD_EXP 9
20177: PPUSH
20178: LD_EXP 47
20182: PUSH
20183: LD_STRING Houten
20185: STR
20186: PPUSH
20187: CALL 13315 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20191: LD_EXP 11
20195: PPUSH
20196: LD_EXP 47
20200: PUSH
20201: LD_STRING Gary
20203: STR
20204: PPUSH
20205: CALL 13315 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20209: LD_EXP 10
20213: PPUSH
20214: LD_EXP 47
20218: PUSH
20219: LD_STRING Cornell
20221: STR
20222: PPUSH
20223: CALL 13315 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20227: LD_EXP 6
20231: PPUSH
20232: LD_EXP 47
20236: PUSH
20237: LD_STRING Denis
20239: STR
20240: PPUSH
20241: CALL 13315 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20245: LD_EXP 8
20249: PPUSH
20250: LD_EXP 47
20254: PUSH
20255: LD_STRING Gladstone
20257: STR
20258: PPUSH
20259: CALL 13315 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20263: LD_INT 50
20265: PUSH
20266: EMPTY
20267: LIST
20268: PUSH
20269: LD_INT 22
20271: PUSH
20272: LD_INT 1
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 23
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 21
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: LD_INT 25
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 25
20314: PUSH
20315: LD_INT 2
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 25
20324: PUSH
20325: LD_INT 3
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 25
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 25
20344: PUSH
20345: LD_INT 5
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 25
20354: PUSH
20355: LD_INT 8
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 69
20382: PUSH
20383: LD_EXP 1
20387: PUSH
20388: LD_EXP 7
20392: PUSH
20393: LD_EXP 3
20397: PUSH
20398: LD_EXP 4
20402: PUSH
20403: LD_EXP 5
20407: PUSH
20408: LD_EXP 2
20412: PUSH
20413: LD_EXP 12
20417: PUSH
20418: LD_EXP 8
20422: PUSH
20423: LD_EXP 13
20427: PUSH
20428: LD_EXP 6
20432: PUSH
20433: LD_EXP 9
20437: PUSH
20438: LD_EXP 11
20442: PUSH
20443: LD_EXP 10
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: DIFF
20463: PPUSH
20464: LD_STRING 12_other_survivors
20466: PPUSH
20467: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20471: LD_INT 50
20473: PUSH
20474: EMPTY
20475: LIST
20476: PUSH
20477: LD_INT 22
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 23
20489: PUSH
20490: LD_INT 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 21
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: LD_INT 25
20512: PUSH
20513: LD_INT 1
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 25
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 25
20532: PUSH
20533: LD_INT 3
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 25
20542: PUSH
20543: LD_INT 4
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 25
20552: PUSH
20553: LD_INT 5
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 25
20562: PUSH
20563: LD_INT 8
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PPUSH
20586: CALL_OW 69
20590: PPUSH
20591: LD_STRING 12_kurt_squad
20593: PPUSH
20594: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
20598: LD_EXP 14
20602: PPUSH
20603: LD_STRING 12_others
20605: PPUSH
20606: CALL_OW 38
// YouWin ;
20610: CALL_OW 103
// end ; end_of_file
20614: LD_VAR 0 1
20618: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20619: LD_EXP 1
20623: PPUSH
20624: CALL_OW 301
20628: IFFALSE 20640
20630: GO 20632
20632: DISABLE
// YouLost ( JMM ) ; end_of_file
20633: LD_STRING JMM
20635: PPUSH
20636: CALL_OW 104
20640: END
// every 0 0$01 do
20641: GO 20643
20643: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20644: LD_INT 1050
20646: PPUSH
20647: CALL_OW 67
// if cratesSpawned < 6 then
20651: LD_EXP 46
20655: PUSH
20656: LD_INT 6
20658: LESS
20659: IFFALSE 20696
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20661: LD_INT 3
20663: PPUSH
20664: LD_INT 5
20666: PPUSH
20667: CALL_OW 12
20671: PPUSH
20672: LD_INT 21
20674: PPUSH
20675: LD_INT 1
20677: PPUSH
20678: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20682: LD_ADDR_EXP 46
20686: PUSH
20687: LD_EXP 46
20691: PUSH
20692: LD_INT 1
20694: PLUS
20695: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20696: LD_EXP 46
20700: PUSH
20701: LD_INT 6
20703: GREATEREQUAL
20704: PUSH
20705: LD_EXP 46
20709: PUSH
20710: LD_INT 12
20712: LESS
20713: AND
20714: IFFALSE 20758
// begin wait ( 0 0$30 ) ;
20716: LD_INT 1050
20718: PPUSH
20719: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20723: LD_INT 3
20725: PPUSH
20726: LD_INT 5
20728: PPUSH
20729: CALL_OW 12
20733: PPUSH
20734: LD_INT 21
20736: PPUSH
20737: LD_INT 1
20739: PPUSH
20740: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20744: LD_ADDR_EXP 46
20748: PUSH
20749: LD_EXP 46
20753: PUSH
20754: LD_INT 1
20756: PLUS
20757: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20758: LD_EXP 46
20762: PUSH
20763: LD_INT 12
20765: GREATEREQUAL
20766: IFFALSE 20810
// begin wait ( 1 1$30 ) ;
20768: LD_INT 3150
20770: PPUSH
20771: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20775: LD_INT 3
20777: PPUSH
20778: LD_INT 5
20780: PPUSH
20781: CALL_OW 12
20785: PPUSH
20786: LD_INT 21
20788: PPUSH
20789: LD_INT 1
20791: PPUSH
20792: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20796: LD_ADDR_EXP 46
20800: PUSH
20801: LD_EXP 46
20805: PUSH
20806: LD_INT 1
20808: PLUS
20809: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20810: LD_EXP 46
20814: PUSH
20815: LD_INT 15
20817: GREATEREQUAL
20818: IFFALSE 20644
// end ;
20820: END
