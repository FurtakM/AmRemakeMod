// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export arabianMines ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 42
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// askSiberite = 0 ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// warWithLegion = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// fakeInfo = 0 ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// ruAI = 0 ;
 127: LD_ADDR_EXP 41
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// eventVar1 = 0 ;
 135: LD_ADDR_EXP 44
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// mission_prefix = 12_ ;
 143: LD_ADDR_EXP 43
 147: PUSH
 148: LD_STRING 12_
 150: ST_TO_ADDR
// debugMode = 0 ;
 151: LD_ADDR_EXP 45
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// PrepareDifficulty ;
 159: CALL 11576 0 0
// PrepareVehicles ;
 163: CALL 1415 0 0
// PrepareAmericansRandom ;
 167: CALL 1370 0 0
// PrepareAmericanHeroes ;
 171: CALL 509 0 0
// PrepareRussianCommander ;
 175: CALL 2945 0 0
// PrepareWestBase ;
 179: CALL 3457 0 0
// PrepareEastBase ;
 183: CALL 3017 0 0
// PrepareOtherRussians ;
 187: CALL 3569 0 0
// end ;
 191: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 192: LD_EXP 45
 196: PUSH
 197: LD_INT 1
 199: EQUAL
 200: IFFALSE 506
 202: GO 204
 204: DISABLE
 205: LD_INT 0
 207: PPUSH
// begin enable ;
 208: ENABLE
// fogoff ( true ) ;
 209: LD_INT 1
 211: PPUSH
 212: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: FOR_IN
 251: IFFALSE 267
// SetLives ( i , 1000 ) ;
 253: LD_VAR 0 1
 257: PPUSH
 258: LD_INT 1000
 260: PPUSH
 261: CALL_OW 234
 265: GO 250
 267: POP
 268: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 269: LD_ADDR_VAR 0 1
 273: PUSH
 274: LD_INT 22
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 2
 286: PUSH
 287: LD_INT 30
 289: PUSH
 290: LD_INT 0
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: LD_INT 30
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 346
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 274
 333: PPUSH
 334: LD_INT 1
 336: PPUSH
 337: LD_INT 9999
 339: PPUSH
 340: CALL_OW 277
 344: GO 321
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 2
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 3
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// end ; end_of_file
 506: PPOPN 1
 508: END
// export function PrepareAmericanHeroes ; begin
 509: LD_INT 0
 511: PPUSH
// uc_side = 1 ;
 512: LD_ADDR_OWVAR 20
 516: PUSH
 517: LD_INT 1
 519: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 520: LD_ADDR_EXP 14
 524: PUSH
 525: LD_STRING 11_others
 527: PPUSH
 528: CALL_OW 31
 532: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 533: LD_ADDR_EXP 14
 537: PUSH
 538: LD_EXP 14
 542: PUSH
 543: LD_STRING 11c_others
 545: PPUSH
 546: CALL_OW 31
 550: ADD
 551: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 552: LD_ADDR_EXP 1
 556: PUSH
 557: LD_STRING 11_JMM
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: CALL 11215 0 2
 567: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 568: LD_EXP 1
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 580: LD_EXP 1
 584: PPUSH
 585: LD_INT 22
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: PUSH
 595: LD_INT 21
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: PUSH
 605: LD_INT 58
 607: PUSH
 608: EMPTY
 609: LIST
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 69
 620: PUSH
 621: LD_INT 1
 623: ARRAY
 624: PPUSH
 625: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 629: LD_STRING 11_Lisa
 631: PPUSH
 632: CALL_OW 28
 636: PUSH
 637: LD_INT 1
 639: EQUAL
 640: IFFALSE 687
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_STRING 11_Lisa
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: CALL 11215 0 2
 657: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 658: LD_EXP 2
 662: PPUSH
 663: LD_INT 1
 665: PPUSH
 666: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 670: LD_EXP 2
 674: PPUSH
 675: LD_INT 4
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL_OW 49
// end else
 685: GO 749
// begin if TestCharacters ( 10c_Lisa ) = true then
 687: LD_STRING 10c_Lisa
 689: PPUSH
 690: CALL_OW 28
 694: PUSH
 695: LD_INT 1
 697: EQUAL
 698: IFFALSE 745
// begin Lisa = PrepareUnit ( 10c_Lisa , true ) ;
 700: LD_ADDR_EXP 2
 704: PUSH
 705: LD_STRING 10c_Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: CALL 11215 0 2
 715: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 716: LD_EXP 2
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 728: LD_EXP 2
 732: PPUSH
 733: LD_INT 4
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end else
 743: GO 749
// begin PrepareAmericansRandom ;
 745: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Donaldson ) = true then
 749: LD_STRING 11_Donaldson
 751: PPUSH
 752: CALL_OW 28
 756: PUSH
 757: LD_INT 1
 759: EQUAL
 760: IFFALSE 807
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 762: LD_ADDR_EXP 3
 766: PUSH
 767: LD_STRING 11_Donaldson
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: CALL 11215 0 2
 777: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 778: LD_EXP 3
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 790: LD_EXP 3
 794: PPUSH
 795: LD_INT 4
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end else
 805: GO 869
// begin if TestCharacters ( 10c_Donaldson ) = true then
 807: LD_STRING 10c_Donaldson
 809: PPUSH
 810: CALL_OW 28
 814: PUSH
 815: LD_INT 1
 817: EQUAL
 818: IFFALSE 865
// begin Donaldson = PrepareUnit ( 10c_Donaldson , true ) ;
 820: LD_ADDR_EXP 3
 824: PUSH
 825: LD_STRING 10c_Donaldson
 827: PPUSH
 828: LD_INT 1
 830: PPUSH
 831: CALL 11215 0 2
 835: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 836: LD_EXP 3
 840: PPUSH
 841: LD_INT 1
 843: PPUSH
 844: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 848: LD_EXP 3
 852: PPUSH
 853: LD_INT 4
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end else
 863: GO 869
// begin PrepareAmericansRandom ;
 865: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Cyrus ) = true then
 869: LD_STRING 11_Cyrus
 871: PPUSH
 872: CALL_OW 28
 876: PUSH
 877: LD_INT 1
 879: EQUAL
 880: IFFALSE 927
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 882: LD_ADDR_EXP 5
 886: PUSH
 887: LD_STRING 11_Cyrus
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL 11215 0 2
 897: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 898: LD_EXP 5
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 910: LD_EXP 5
 914: PPUSH
 915: LD_INT 4
 917: PPUSH
 918: LD_INT 0
 920: PPUSH
 921: CALL_OW 49
// end else
 925: GO 989
// begin if TestCharacters ( 10c_Cyrus ) = true then
 927: LD_STRING 10c_Cyrus
 929: PPUSH
 930: CALL_OW 28
 934: PUSH
 935: LD_INT 1
 937: EQUAL
 938: IFFALSE 985
// begin Cyrus = PrepareUnit ( 10c_Cyrus , true ) ;
 940: LD_ADDR_EXP 5
 944: PUSH
 945: LD_STRING 10c_Cyrus
 947: PPUSH
 948: LD_INT 1
 950: PPUSH
 951: CALL 11215 0 2
 955: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 956: LD_EXP 5
 960: PPUSH
 961: LD_INT 1
 963: PPUSH
 964: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 968: LD_EXP 5
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// end else
 983: GO 989
// begin PrepareAmericansRandom ;
 985: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Denis ) = true then
 989: LD_STRING 11_Denis
 991: PPUSH
 992: CALL_OW 28
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1047
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
1002: LD_ADDR_EXP 6
1006: PUSH
1007: LD_STRING 11_Denis
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: CALL 11215 0 2
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1109
// begin if TestCharacters ( 10c_Denis ) = true then
1047: LD_STRING 10c_Denis
1049: PPUSH
1050: CALL_OW 28
1054: PUSH
1055: LD_INT 1
1057: EQUAL
1058: IFFALSE 1105
// begin Denis = PrepareUnit ( 10c_Denis , true ) ;
1060: LD_ADDR_EXP 6
1064: PUSH
1065: LD_STRING 10c_Denis
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL 11215 0 2
1075: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1076: LD_EXP 6
1080: PPUSH
1081: LD_INT 4
1083: PPUSH
1084: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1088: LD_EXP 6
1092: PPUSH
1093: LD_INT 4
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end else
1103: GO 1109
// begin PrepareAmericansRandom ;
1105: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Frank ) = true then
1109: LD_STRING 11_Frank
1111: PPUSH
1112: CALL_OW 28
1116: PUSH
1117: LD_INT 1
1119: EQUAL
1120: IFFALSE 1167
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1122: LD_ADDR_EXP 12
1126: PUSH
1127: LD_STRING 11_Frank
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: CALL 11215 0 2
1137: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1138: LD_EXP 12
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1150: LD_EXP 12
1154: PPUSH
1155: LD_INT 4
1157: PPUSH
1158: LD_INT 0
1160: PPUSH
1161: CALL_OW 49
// end else
1165: GO 1229
// begin if TestCharacters ( 10c_Frank ) = true then
1167: LD_STRING 10c_Frank
1169: PPUSH
1170: CALL_OW 28
1174: PUSH
1175: LD_INT 1
1177: EQUAL
1178: IFFALSE 1225
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1180: LD_ADDR_EXP 12
1184: PUSH
1185: LD_STRING 11_Frank
1187: PPUSH
1188: LD_INT 1
1190: PPUSH
1191: CALL 11215 0 2
1195: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1196: LD_EXP 12
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1208: LD_EXP 12
1212: PPUSH
1213: LD_INT 4
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// end else
1223: GO 1229
// begin PrepareAmericansRandom ;
1225: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Cornell ) = true then
1229: LD_STRING 11_Cornell
1231: PPUSH
1232: CALL_OW 28
1236: PUSH
1237: LD_INT 1
1239: EQUAL
1240: IFFALSE 1287
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1242: LD_ADDR_EXP 10
1246: PUSH
1247: LD_STRING 11_Cornell
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: CALL 11215 0 2
1257: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1258: LD_EXP 10
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1270: LD_EXP 10
1274: PPUSH
1275: LD_INT 4
1277: PPUSH
1278: LD_INT 0
1280: PPUSH
1281: CALL_OW 49
// end else
1285: GO 1349
// begin if TestCharacters ( 10c_Cornell ) = true then
1287: LD_STRING 10c_Cornell
1289: PPUSH
1290: CALL_OW 28
1294: PUSH
1295: LD_INT 1
1297: EQUAL
1298: IFFALSE 1345
// begin Cornel = PrepareUnit ( 10c_Cornell , true ) ;
1300: LD_ADDR_EXP 10
1304: PUSH
1305: LD_STRING 10c_Cornell
1307: PPUSH
1308: LD_INT 1
1310: PPUSH
1311: CALL 11215 0 2
1315: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1316: LD_EXP 10
1320: PPUSH
1321: LD_INT 1
1323: PPUSH
1324: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1328: LD_EXP 10
1332: PPUSH
1333: LD_INT 4
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: CALL_OW 49
// end else
1343: GO 1349
// begin PrepareAmericansRandom ;
1345: CALL 1370 0 0
// end ; end ; Powell = PrepareUnit ( Powell , false ) ;
1349: LD_ADDR_EXP 22
1353: PUSH
1354: LD_STRING Powell
1356: PPUSH
1357: LD_INT 0
1359: PPUSH
1360: CALL 11215 0 2
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 1
1369: RET
// export function PrepareAmericansRandom ; begin
1370: LD_INT 0
1372: PPUSH
// PlaceUnitArea ( others11 [ 1 ] , PlayerSpawn , false ) ;
1373: LD_EXP 14
1377: PUSH
1378: LD_INT 1
1380: ARRAY
1381: PPUSH
1382: LD_INT 4
1384: PPUSH
1385: LD_INT 0
1387: PPUSH
1388: CALL_OW 49
// others11 := Delete ( others11 , 1 ) ;
1392: LD_ADDR_EXP 14
1396: PUSH
1397: LD_EXP 14
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL_OW 3
1409: ST_TO_ADDR
// end ;
1410: LD_VAR 0 1
1414: RET
// export function PrepareVehicles ; var veh ; begin
1415: LD_INT 0
1417: PPUSH
1418: PPUSH
// uc_side = 1 ;
1419: LD_ADDR_OWVAR 20
1423: PUSH
1424: LD_INT 1
1426: ST_TO_ADDR
// uc_nation = 1 ;
1427: LD_ADDR_OWVAR 21
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1435: LD_ADDR_OWVAR 37
1439: PUSH
1440: LD_INT 3
1442: ST_TO_ADDR
// vc_engine = 3 ;
1443: LD_ADDR_OWVAR 39
1447: PUSH
1448: LD_INT 3
1450: ST_TO_ADDR
// vc_control = 3 ;
1451: LD_ADDR_OWVAR 38
1455: PUSH
1456: LD_INT 3
1458: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1459: LD_ADDR_OWVAR 40
1463: PUSH
1464: LD_INT 4
1466: ST_TO_ADDR
// veh = CreateVehicle ;
1467: LD_ADDR_VAR 0 2
1471: PUSH
1472: CALL_OW 45
1476: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1477: LD_VAR 0 2
1481: PPUSH
1482: LD_INT 4
1484: PPUSH
1485: LD_INT 0
1487: PPUSH
1488: CALL_OW 49
// vc_weapon = us_double_gun ;
1492: LD_ADDR_OWVAR 40
1496: PUSH
1497: LD_INT 5
1499: ST_TO_ADDR
// vc_control = 1 ;
1500: LD_ADDR_OWVAR 38
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// veh = CreateVehicle ;
1508: LD_ADDR_VAR 0 2
1512: PUSH
1513: CALL_OW 45
1517: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1518: LD_VAR 0 2
1522: PPUSH
1523: LD_INT 4
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 49
// vc_weapon = us_light_gun ;
1533: LD_ADDR_OWVAR 40
1537: PUSH
1538: LD_INT 3
1540: ST_TO_ADDR
// vc_control = 3 ;
1541: LD_ADDR_OWVAR 38
1545: PUSH
1546: LD_INT 3
1548: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1549: LD_ADDR_OWVAR 37
1553: PUSH
1554: LD_INT 2
1556: ST_TO_ADDR
// veh = CreateVehicle ;
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: CALL_OW 45
1566: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1567: LD_VAR 0 2
1571: PPUSH
1572: LD_INT 4
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1582: LD_ADDR_OWVAR 40
1586: PUSH
1587: LD_INT 4
1589: ST_TO_ADDR
// veh = CreateVehicle ;
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: CALL_OW 45
1599: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1600: LD_VAR 0 2
1604: PPUSH
1605: LD_INT 4
1607: PPUSH
1608: LD_INT 0
1610: PPUSH
1611: CALL_OW 49
// end ;
1615: LD_VAR 0 1
1619: RET
// export function PowellSupport1 ; var veh , un ; begin
1620: LD_INT 0
1622: PPUSH
1623: PPUSH
1624: PPUSH
// uc_side = 1 ;
1625: LD_ADDR_OWVAR 20
1629: PUSH
1630: LD_INT 1
1632: ST_TO_ADDR
// uc_nation = 1 ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_INT 1
1640: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1641: LD_STRING 11_Brown
1643: PPUSH
1644: CALL_OW 28
1648: PUSH
1649: LD_INT 1
1651: EQUAL
1652: IFFALSE 1699
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1654: LD_ADDR_EXP 7
1658: PUSH
1659: LD_STRING 11_Brown
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL 11215 0 2
1669: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1670: LD_EXP 7
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1682: LD_EXP 7
1686: PPUSH
1687: LD_INT 4
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end else
1697: GO 1761
// begin if TestCharacters ( 10c_Brown ) = true then
1699: LD_STRING 10c_Brown
1701: PPUSH
1702: CALL_OW 28
1706: PUSH
1707: LD_INT 1
1709: EQUAL
1710: IFFALSE 1757
// begin Brown = PrepareUnit ( 10c_Brown , true ) ;
1712: LD_ADDR_EXP 7
1716: PUSH
1717: LD_STRING 10c_Brown
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: CALL 11215 0 2
1727: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1728: LD_EXP 7
1732: PPUSH
1733: LD_INT 2
1735: PPUSH
1736: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1740: LD_EXP 7
1744: PPUSH
1745: LD_INT 4
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 49
// end else
1755: GO 1761
// begin PrepareAmericansRandom ;
1757: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Gary ) = true then
1761: LD_STRING 11_Gary
1763: PPUSH
1764: CALL_OW 28
1768: PUSH
1769: LD_INT 1
1771: EQUAL
1772: IFFALSE 1819
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1774: LD_ADDR_EXP 11
1778: PUSH
1779: LD_STRING 11_Gary
1781: PPUSH
1782: LD_INT 1
1784: PPUSH
1785: CALL 11215 0 2
1789: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1790: LD_EXP 11
1794: PPUSH
1795: LD_INT 2
1797: PPUSH
1798: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1802: LD_EXP 11
1806: PPUSH
1807: LD_INT 4
1809: PPUSH
1810: LD_INT 0
1812: PPUSH
1813: CALL_OW 49
// end else
1817: GO 1881
// begin if TestCharacters ( 10c_Gary ) = true then
1819: LD_STRING 10c_Gary
1821: PPUSH
1822: CALL_OW 28
1826: PUSH
1827: LD_INT 1
1829: EQUAL
1830: IFFALSE 1877
// begin Brown = PrepareUnit ( 10c_Gary , true ) ;
1832: LD_ADDR_EXP 7
1836: PUSH
1837: LD_STRING 10c_Gary
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: CALL 11215 0 2
1847: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1848: LD_EXP 11
1852: PPUSH
1853: LD_INT 2
1855: PPUSH
1856: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1860: LD_EXP 11
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: LD_INT 0
1870: PPUSH
1871: CALL_OW 49
// end else
1875: GO 1881
// begin PrepareAmericansRandom ;
1877: CALL 1370 0 0
// end ; end ; hc_gallery =  ;
1881: LD_ADDR_OWVAR 33
1885: PUSH
1886: LD_STRING 
1888: ST_TO_ADDR
// hc_name =  ;
1889: LD_ADDR_OWVAR 26
1893: PUSH
1894: LD_STRING 
1896: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1897: LD_ADDR_OWVAR 37
1901: PUSH
1902: LD_INT 3
1904: ST_TO_ADDR
// vc_engine = 3 ;
1905: LD_ADDR_OWVAR 39
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_control = 1 ;
1913: LD_ADDR_OWVAR 38
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// vc_weapon = us_crane ;
1921: LD_ADDR_OWVAR 40
1925: PUSH
1926: LD_INT 13
1928: ST_TO_ADDR
// veh = CreateVehicle ;
1929: LD_ADDR_VAR 0 2
1933: PUSH
1934: CALL_OW 45
1938: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1939: LD_VAR 0 2
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: LD_INT 0
1949: PPUSH
1950: CALL_OW 49
// SetDir ( veh , 4 ) ;
1954: LD_VAR 0 2
1958: PPUSH
1959: LD_INT 4
1961: PPUSH
1962: CALL_OW 233
// PrepareHuman ( false , 3 , rand ( 5 , 8 ) ) ;
1966: LD_INT 0
1968: PPUSH
1969: LD_INT 3
1971: PPUSH
1972: LD_INT 5
1974: PPUSH
1975: LD_INT 8
1977: PPUSH
1978: CALL_OW 12
1982: PPUSH
1983: CALL_OW 380
// un = CreateHuman ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: CALL_OW 44
1996: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1997: LD_VAR 0 3
2001: PPUSH
2002: LD_VAR 0 2
2006: PPUSH
2007: CALL_OW 52
// vc_chassis = us_medium_wheeled ;
2011: LD_ADDR_OWVAR 37
2015: PUSH
2016: LD_INT 2
2018: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2019: LD_ADDR_OWVAR 40
2023: PUSH
2024: LD_INT 5
2026: ST_TO_ADDR
// veh = CreateVehicle ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: CALL_OW 45
2036: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2037: LD_VAR 0 2
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL_OW 49
// SetDir ( veh , 4 ) ;
2052: LD_VAR 0 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 233
// PrepareHuman ( false , 3 , rand ( 5 , 8 ) ) ;
2064: LD_INT 0
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: LD_INT 5
2072: PPUSH
2073: LD_INT 8
2075: PPUSH
2076: CALL_OW 12
2080: PPUSH
2081: CALL_OW 380
// un = CreateHuman ;
2085: LD_ADDR_VAR 0 3
2089: PUSH
2090: CALL_OW 44
2094: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2095: LD_VAR 0 3
2099: PPUSH
2100: LD_VAR 0 2
2104: PPUSH
2105: CALL_OW 52
// vc_control = 3 ;
2109: LD_ADDR_OWVAR 38
2113: PUSH
2114: LD_INT 3
2116: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2117: LD_ADDR_OWVAR 40
2121: PUSH
2122: LD_INT 12
2124: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2125: LD_ADDR_EXP 15
2129: PUSH
2130: CALL_OW 45
2134: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2135: LD_ADDR_EXP 16
2139: PUSH
2140: CALL_OW 45
2144: ST_TO_ADDR
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2145: LD_EXP 15
2149: PPUSH
2150: LD_INT 4
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2160: LD_EXP 16
2164: PPUSH
2165: LD_INT 4
2167: PPUSH
2168: LD_INT 0
2170: PPUSH
2171: CALL_OW 49
// SetDir ( amCargo1 , 4 ) ;
2175: LD_EXP 15
2179: PPUSH
2180: LD_INT 4
2182: PPUSH
2183: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2187: LD_EXP 16
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// AddCargo ( amCargo1 , 3 , 100 ) ;
2199: LD_EXP 15
2203: PPUSH
2204: LD_INT 3
2206: PPUSH
2207: LD_INT 100
2209: PPUSH
2210: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2214: LD_EXP 16
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: LD_INT 80
2224: PPUSH
2225: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 20
2239: PPUSH
2240: CALL_OW 291
// end ;
2244: LD_VAR 0 1
2248: RET
// export function PowellSupport2 ; var veh , un ; begin
2249: LD_INT 0
2251: PPUSH
2252: PPUSH
2253: PPUSH
// uc_side = 1 ;
2254: LD_ADDR_OWVAR 20
2258: PUSH
2259: LD_INT 1
2261: ST_TO_ADDR
// uc_nation = 1 ;
2262: LD_ADDR_OWVAR 21
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// if TestCharacters ( 11_Bobby ) = true then
2270: LD_STRING 11_Bobby
2272: PPUSH
2273: CALL_OW 28
2277: PUSH
2278: LD_INT 1
2280: EQUAL
2281: IFFALSE 2328
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2283: LD_ADDR_EXP 4
2287: PUSH
2288: LD_STRING 11_Bobby
2290: PPUSH
2291: LD_INT 1
2293: PPUSH
2294: CALL 11215 0 2
2298: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2299: LD_EXP 4
2303: PPUSH
2304: LD_INT 3
2306: PPUSH
2307: CALL_OW 336
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
2311: LD_EXP 4
2315: PPUSH
2316: LD_INT 4
2318: PPUSH
2319: LD_INT 0
2321: PPUSH
2322: CALL_OW 49
// end else
2326: GO 2390
// begin if TestCharacters ( 10c_Bobby ) = true then
2328: LD_STRING 10c_Bobby
2330: PPUSH
2331: CALL_OW 28
2335: PUSH
2336: LD_INT 1
2338: EQUAL
2339: IFFALSE 2386
// begin Bobby = PrepareUnit ( 10c_Bobby , true ) ;
2341: LD_ADDR_EXP 4
2345: PUSH
2346: LD_STRING 10c_Bobby
2348: PPUSH
2349: LD_INT 1
2351: PPUSH
2352: CALL 11215 0 2
2356: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2357: LD_EXP 4
2361: PPUSH
2362: LD_INT 3
2364: PPUSH
2365: CALL_OW 336
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
2369: LD_EXP 4
2373: PPUSH
2374: LD_INT 4
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// end else
2384: GO 2390
// begin PrepareAmericansRandom ;
2386: CALL 1370 0 0
// end ; end ; if TestCharacters ( 11_Houten ) = true then
2390: LD_STRING 11_Houten
2392: PPUSH
2393: CALL_OW 28
2397: PUSH
2398: LD_INT 1
2400: EQUAL
2401: IFFALSE 2448
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2403: LD_ADDR_EXP 9
2407: PUSH
2408: LD_STRING 11_Houten
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: CALL 11215 0 2
2418: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2419: LD_EXP 9
2423: PPUSH
2424: LD_INT 1
2426: PPUSH
2427: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2431: LD_EXP 9
2435: PPUSH
2436: LD_INT 4
2438: PPUSH
2439: LD_INT 0
2441: PPUSH
2442: CALL_OW 49
// end else
2446: GO 2510
// begin if TestCharacters ( 10c_Houten ) = true then
2448: LD_STRING 10c_Houten
2450: PPUSH
2451: CALL_OW 28
2455: PUSH
2456: LD_INT 1
2458: EQUAL
2459: IFFALSE 2506
// begin Houten = PrepareUnit ( 10c_Houten , true ) ;
2461: LD_ADDR_EXP 9
2465: PUSH
2466: LD_STRING 10c_Houten
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL 11215 0 2
2476: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2477: LD_EXP 9
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2489: LD_EXP 9
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 49
// end else
2504: GO 2510
// begin PrepareAmericansRandom ;
2506: CALL 1370 0 0
// end ; end ; hc_gallery =  ;
2510: LD_ADDR_OWVAR 33
2514: PUSH
2515: LD_STRING 
2517: ST_TO_ADDR
// hc_name =  ;
2518: LD_ADDR_OWVAR 26
2522: PUSH
2523: LD_STRING 
2525: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2526: LD_ADDR_OWVAR 37
2530: PUSH
2531: LD_INT 2
2533: ST_TO_ADDR
// vc_engine = 3 ;
2534: LD_ADDR_OWVAR 39
2538: PUSH
2539: LD_INT 3
2541: ST_TO_ADDR
// vc_control = 3 ;
2542: LD_ADDR_OWVAR 38
2546: PUSH
2547: LD_INT 3
2549: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2550: LD_ADDR_OWVAR 40
2554: PUSH
2555: LD_INT 3
2557: ST_TO_ADDR
// veh = CreateVehicle ;
2558: LD_ADDR_VAR 0 2
2562: PUSH
2563: CALL_OW 45
2567: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2568: LD_VAR 0 2
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// SetDir ( veh , 4 ) ;
2583: LD_VAR 0 2
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: CALL_OW 233
// vc_control = 3 ;
2595: LD_ADDR_OWVAR 38
2599: PUSH
2600: LD_INT 3
2602: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2603: LD_ADDR_OWVAR 40
2607: PUSH
2608: LD_INT 12
2610: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2611: LD_ADDR_EXP 17
2615: PUSH
2616: CALL_OW 45
2620: ST_TO_ADDR
// amCargo4 = CreateVehicle ;
2621: LD_ADDR_EXP 18
2625: PUSH
2626: CALL_OW 45
2630: ST_TO_ADDR
// amCargo5 = CreateVehicle ;
2631: LD_ADDR_EXP 19
2635: PUSH
2636: CALL_OW 45
2640: ST_TO_ADDR
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2641: LD_EXP 17
2645: PPUSH
2646: LD_INT 4
2648: PPUSH
2649: LD_INT 0
2651: PPUSH
2652: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2656: LD_EXP 18
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: LD_INT 0
2666: PPUSH
2667: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2671: LD_EXP 19
2675: PPUSH
2676: LD_INT 4
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 49
// SetDir ( amCargo3 , 4 ) ;
2686: LD_EXP 17
2690: PPUSH
2691: LD_INT 4
2693: PPUSH
2694: CALL_OW 233
// SetDir ( amCargo4 , 4 ) ;
2698: LD_EXP 18
2702: PPUSH
2703: LD_INT 4
2705: PPUSH
2706: CALL_OW 233
// SetDir ( amCargo5 , 4 ) ;
2710: LD_EXP 19
2714: PPUSH
2715: LD_INT 4
2717: PPUSH
2718: CALL_OW 233
// AddCargo ( amCargo3 , 1 , 100 ) ;
2722: LD_EXP 17
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_INT 100
2732: PPUSH
2733: CALL_OW 291
// AddCargo ( amCargo4 , 2 , 100 ) ;
2737: LD_EXP 18
2741: PPUSH
2742: LD_INT 2
2744: PPUSH
2745: LD_INT 100
2747: PPUSH
2748: CALL_OW 291
// AddCargo ( amCargo5 , 1 , 50 ) ;
2752: LD_EXP 19
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 50
2762: PPUSH
2763: CALL_OW 291
// AddCargo ( amCargo5 , 2 , 50 ) ;
2767: LD_EXP 19
2771: PPUSH
2772: LD_INT 2
2774: PPUSH
2775: LD_INT 50
2777: PPUSH
2778: CALL_OW 291
// end ;
2782: LD_VAR 0 1
2786: RET
// export function PowellSupport3 ; var veh , un ; begin
2787: LD_INT 0
2789: PPUSH
2790: PPUSH
2791: PPUSH
// uc_side = 1 ;
2792: LD_ADDR_OWVAR 20
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// PrepareAmericansRandom ;
2800: CALL 1370 0 0
// vc_chassis = us_medium_wheeled ;
2804: LD_ADDR_OWVAR 37
2808: PUSH
2809: LD_INT 2
2811: ST_TO_ADDR
// vc_engine = 3 ;
2812: LD_ADDR_OWVAR 39
2816: PUSH
2817: LD_INT 3
2819: ST_TO_ADDR
// vc_control = 3 ;
2820: LD_ADDR_OWVAR 38
2824: PUSH
2825: LD_INT 3
2827: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2828: LD_ADDR_OWVAR 40
2832: PUSH
2833: LD_INT 12
2835: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2836: LD_ADDR_EXP 20
2840: PUSH
2841: CALL_OW 45
2845: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2846: LD_ADDR_EXP 21
2850: PUSH
2851: CALL_OW 45
2855: ST_TO_ADDR
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2856: LD_EXP 20
2860: PPUSH
2861: LD_INT 4
2863: PPUSH
2864: LD_INT 0
2866: PPUSH
2867: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2871: LD_EXP 21
2875: PPUSH
2876: LD_INT 4
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 49
// SetDir ( amCargo6 , 4 ) ;
2886: LD_EXP 20
2890: PPUSH
2891: LD_INT 4
2893: PPUSH
2894: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2898: LD_EXP 21
2902: PPUSH
2903: LD_INT 4
2905: PPUSH
2906: CALL_OW 233
// AddCargo ( amCargo6 , 1 , 100 ) ;
2910: LD_EXP 20
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 100
2920: PPUSH
2921: CALL_OW 291
// AddCargo ( amCargo7 , 2 , 100 ) ;
2925: LD_EXP 21
2929: PPUSH
2930: LD_INT 2
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// end ; end_of_file
2940: LD_VAR 0 1
2944: RET
// export function PrepareRussianCommander ; begin
2945: LD_INT 0
2947: PPUSH
// uc_side = 3 ;
2948: LD_ADDR_OWVAR 20
2952: PUSH
2953: LD_INT 3
2955: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2956: LD_ADDR_EXP 23
2960: PUSH
2961: LD_STRING Davidov
2963: PPUSH
2964: LD_INT 0
2966: PPUSH
2967: CALL 11215 0 2
2971: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2972: LD_EXP 23
2976: PPUSH
2977: LD_INT 3
2979: PPUSH
2980: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2984: LD_ADDR_EXP 34
2988: PUSH
2989: LD_EXP 34
2993: PUSH
2994: LD_EXP 23
2998: ADD
2999: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3000: LD_EXP 34
3004: PPUSH
3005: LD_INT 4
3007: PPUSH
3008: CALL_OW 336
// end ;
3012: LD_VAR 0 1
3016: RET
// export function PrepareEastBase ; var i , un ; begin
3017: LD_INT 0
3019: PPUSH
3020: PPUSH
3021: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3022: LD_INT 3
3024: PPUSH
3025: LD_INT 3
3027: PPUSH
3028: LD_INT 121
3030: PPUSH
3031: LD_EXP 36
3035: PPUSH
3036: LD_EXP 37
3040: PPUSH
3041: CALL_OW 12
3045: PPUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 3
3051: PPUSH
3052: CALL 12007 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3056: LD_INT 3
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_INT 121
3064: PPUSH
3065: LD_EXP 36
3069: PPUSH
3070: LD_EXP 37
3074: PPUSH
3075: CALL_OW 12
3079: PPUSH
3080: LD_INT 9
3082: PPUSH
3083: LD_INT 3
3085: PPUSH
3086: CALL 12007 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3090: LD_INT 3
3092: PPUSH
3093: LD_INT 3
3095: PPUSH
3096: LD_INT 4
3098: PPUSH
3099: LD_EXP 36
3103: PPUSH
3104: LD_EXP 37
3108: PPUSH
3109: CALL_OW 12
3113: PPUSH
3114: LD_INT 2
3116: PPUSH
3117: LD_INT 6
3119: PPUSH
3120: CALL 12007 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3124: LD_INT 3
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 112
3132: PPUSH
3133: LD_EXP 36
3137: PPUSH
3138: LD_EXP 37
3142: PPUSH
3143: CALL_OW 12
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 6
3153: PPUSH
3154: CALL 12007 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 47
3166: PPUSH
3167: LD_EXP 36
3171: PPUSH
3172: LD_EXP 37
3176: PPUSH
3177: CALL_OW 12
3181: PPUSH
3182: LD_INT 4
3184: PPUSH
3185: LD_INT 6
3187: PPUSH
3188: CALL 12007 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 3
3197: PPUSH
3198: LD_INT 129
3200: PPUSH
3201: LD_EXP 36
3205: PPUSH
3206: LD_EXP 37
3210: PPUSH
3211: CALL_OW 12
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: LD_INT 6
3221: PPUSH
3222: CALL 12007 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 3
3231: PPUSH
3232: LD_INT 135
3234: PPUSH
3235: LD_EXP 36
3239: PPUSH
3240: LD_EXP 37
3244: PPUSH
3245: CALL_OW 12
3249: PPUSH
3250: LD_INT 4
3252: PPUSH
3253: LD_INT 6
3255: PPUSH
3256: CALL 12007 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3260: LD_ADDR_VAR 0 2
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 30
3277: PUSH
3278: LD_INT 32
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PPUSH
3289: CALL_OW 69
3293: PUSH
3294: FOR_IN
3295: IFFALSE 3335
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3297: LD_INT 3
3299: PPUSH
3300: LD_INT 3
3302: PPUSH
3303: LD_VAR 0 2
3307: PPUSH
3308: LD_EXP 36
3312: PPUSH
3313: LD_EXP 37
3317: PPUSH
3318: CALL_OW 12
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: LD_INT 1
3328: PPUSH
3329: CALL 12007 0 6
3333: GO 3294
3335: POP
3336: POP
// for i = 1 to 5 do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 5
3349: PUSH
3350: FOR_TO
3351: IFFALSE 3450
// begin uc_side = 3 ;
3353: LD_ADDR_OWVAR 20
3357: PUSH
3358: LD_INT 3
3360: ST_TO_ADDR
// uc_nation = 3 ;
3361: LD_ADDR_OWVAR 21
3365: PUSH
3366: LD_INT 3
3368: ST_TO_ADDR
// hc_gallery =  ;
3369: LD_ADDR_OWVAR 33
3373: PUSH
3374: LD_STRING 
3376: ST_TO_ADDR
// hc_name =  ;
3377: LD_ADDR_OWVAR 26
3381: PUSH
3382: LD_STRING 
3384: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3385: LD_INT 0
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: LD_EXP 36
3395: PPUSH
3396: LD_EXP 37
3400: PPUSH
3401: CALL_OW 12
3405: PPUSH
3406: CALL_OW 380
// un = CreateHuman ;
3410: LD_ADDR_VAR 0 3
3414: PUSH
3415: CALL_OW 44
3419: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3420: LD_VAR 0 3
3424: PPUSH
3425: LD_INT 3
3427: PPUSH
3428: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3432: LD_ADDR_EXP 34
3436: PUSH
3437: LD_EXP 34
3441: PUSH
3442: LD_VAR 0 3
3446: ADD
3447: ST_TO_ADDR
// end ;
3448: GO 3350
3450: POP
3451: POP
// end ;
3452: LD_VAR 0 1
3456: RET
// export function PrepareWestBase ; var i , un ; begin
3457: LD_INT 0
3459: PPUSH
3460: PPUSH
3461: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3462: LD_INT 3
3464: PPUSH
3465: LD_INT 3
3467: PPUSH
3468: LD_INT 6
3470: PPUSH
3471: LD_EXP 36
3475: PPUSH
3476: LD_EXP 37
3480: PPUSH
3481: CALL_OW 12
3485: PPUSH
3486: LD_INT 2
3488: PPUSH
3489: LD_INT 3
3491: PPUSH
3492: CALL 12007 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3496: LD_INT 3
3498: PPUSH
3499: LD_INT 3
3501: PPUSH
3502: LD_INT 91
3504: PPUSH
3505: LD_EXP 36
3509: PPUSH
3510: LD_EXP 37
3514: PPUSH
3515: CALL_OW 12
3519: PPUSH
3520: LD_INT 4
3522: PPUSH
3523: LD_INT 3
3525: PPUSH
3526: CALL 12007 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3530: LD_INT 3
3532: PPUSH
3533: LD_INT 3
3535: PPUSH
3536: LD_INT 21
3538: PPUSH
3539: LD_EXP 36
3543: PPUSH
3544: LD_EXP 37
3548: PPUSH
3549: CALL_OW 12
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 6
3559: PPUSH
3560: CALL 12007 0 6
// end ;
3564: LD_VAR 0 1
3568: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3569: LD_INT 0
3571: PPUSH
3572: PPUSH
3573: PPUSH
3574: PPUSH
// uc_side = 3 ;
3575: LD_ADDR_OWVAR 20
3579: PUSH
3580: LD_INT 3
3582: ST_TO_ADDR
// uc_nation = 3 ;
3583: LD_ADDR_OWVAR 21
3587: PUSH
3588: LD_INT 3
3590: ST_TO_ADDR
// for i = 1 to 5 do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: DOUBLE
3597: LD_INT 1
3599: DEC
3600: ST_TO_ADDR
3601: LD_INT 5
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3675
// begin hc_gallery =  ;
3607: LD_ADDR_OWVAR 33
3611: PUSH
3612: LD_STRING 
3614: ST_TO_ADDR
// hc_name =  ;
3615: LD_ADDR_OWVAR 26
3619: PUSH
3620: LD_STRING 
3622: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3623: LD_INT 0
3625: PPUSH
3626: LD_INT 9
3628: PPUSH
3629: LD_EXP 36
3633: PPUSH
3634: LD_EXP 37
3638: PPUSH
3639: CALL_OW 12
3643: PPUSH
3644: CALL_OW 380
// un = CreateHuman ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: CALL_OW 44
3657: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3658: LD_VAR 0 3
3662: PPUSH
3663: LD_INT 8
3665: PPUSH
3666: LD_INT 0
3668: PPUSH
3669: CALL_OW 49
// end ;
3673: GO 3604
3675: POP
3676: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3677: LD_ADDR_VAR 0 2
3681: PUSH
3682: DOUBLE
3683: LD_INT 1
3685: DEC
3686: ST_TO_ADDR
3687: LD_INT 2
3689: PUSH
3690: LD_INT 3
3692: PUSH
3693: LD_INT 4
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: LD_OWVAR 67
3705: ARRAY
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3778
// begin hc_gallery =  ;
3710: LD_ADDR_OWVAR 33
3714: PUSH
3715: LD_STRING 
3717: ST_TO_ADDR
// hc_name =  ;
3718: LD_ADDR_OWVAR 26
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3726: LD_INT 0
3728: PPUSH
3729: LD_INT 4
3731: PPUSH
3732: LD_EXP 36
3736: PPUSH
3737: LD_EXP 37
3741: PPUSH
3742: CALL_OW 12
3746: PPUSH
3747: CALL_OW 380
// un = CreateHuman ;
3751: LD_ADDR_VAR 0 3
3755: PUSH
3756: CALL_OW 44
3760: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_INT 8
3768: PPUSH
3769: LD_INT 0
3771: PPUSH
3772: CALL_OW 49
// end ;
3776: GO 3707
3778: POP
3779: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: DOUBLE
3786: LD_INT 1
3788: DEC
3789: ST_TO_ADDR
3790: LD_INT 3
3792: PUSH
3793: LD_INT 4
3795: PUSH
3796: LD_INT 5
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PUSH
3810: FOR_TO
3811: IFFALSE 4007
// begin vc_engine = 3 ;
3813: LD_ADDR_OWVAR 39
3817: PUSH
3818: LD_INT 3
3820: ST_TO_ADDR
// vc_control = 1 ;
3821: LD_ADDR_OWVAR 38
3825: PUSH
3826: LD_INT 1
3828: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3829: LD_ADDR_OWVAR 40
3833: PUSH
3834: LD_INT 42
3836: PUSH
3837: LD_INT 43
3839: PUSH
3840: LD_INT 44
3842: PUSH
3843: LD_INT 45
3845: PUSH
3846: LD_INT 46
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: PUSH
3856: LD_INT 1
3858: PPUSH
3859: LD_INT 5
3861: PPUSH
3862: CALL_OW 12
3866: ARRAY
3867: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3868: LD_OWVAR 40
3872: PUSH
3873: LD_INT 46
3875: EQUAL
3876: IFFALSE 3888
// vc_chassis = ru_heavy_tracked else
3878: LD_ADDR_OWVAR 37
3882: PUSH
3883: LD_INT 24
3885: ST_TO_ADDR
3886: GO 3915
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3888: LD_ADDR_OWVAR 37
3892: PUSH
3893: LD_INT 22
3895: PUSH
3896: LD_INT 21
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 1
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 12
3913: ARRAY
3914: ST_TO_ADDR
// veh = CreateVehicle ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 45
3924: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3937: LD_VAR 0 4
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: LD_INT 0
3947: PPUSH
3948: CALL_OW 49
// hc_gallery =  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name =  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 3
3973: PPUSH
3974: LD_INT 10
3976: PPUSH
3977: CALL_OW 380
// un = CreateHuman ;
3981: LD_ADDR_VAR 0 3
3985: PUSH
3986: CALL_OW 44
3990: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3991: LD_VAR 0 3
3995: PPUSH
3996: LD_VAR 0 4
4000: PPUSH
4001: CALL_OW 52
// end ;
4005: GO 3810
4007: POP
4008: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4009: LD_ADDR_VAR 0 2
4013: PUSH
4014: DOUBLE
4015: LD_INT 1
4017: DEC
4018: ST_TO_ADDR
4019: LD_INT 3
4021: PUSH
4022: LD_INT 4
4024: PUSH
4025: LD_INT 5
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: PUSH
4033: LD_OWVAR 67
4037: ARRAY
4038: PUSH
4039: FOR_TO
4040: IFFALSE 4187
// begin vc_engine = 3 ;
4042: LD_ADDR_OWVAR 39
4046: PUSH
4047: LD_INT 3
4049: ST_TO_ADDR
// vc_control = 3 ;
4050: LD_ADDR_OWVAR 38
4054: PUSH
4055: LD_INT 3
4057: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4058: LD_ADDR_OWVAR 40
4062: PUSH
4063: LD_INT 42
4065: PUSH
4066: LD_INT 43
4068: PUSH
4069: LD_INT 44
4071: PUSH
4072: LD_INT 45
4074: PUSH
4075: LD_INT 46
4077: PUSH
4078: LD_INT 49
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 1
4091: PPUSH
4092: LD_INT 5
4094: PPUSH
4095: CALL_OW 12
4099: ARRAY
4100: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4101: LD_OWVAR 40
4105: PUSH
4106: LD_INT 46
4108: EQUAL
4109: IFFALSE 4121
// vc_chassis = ru_heavy_tracked else
4111: LD_ADDR_OWVAR 37
4115: PUSH
4116: LD_INT 24
4118: ST_TO_ADDR
4119: GO 4148
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4121: LD_ADDR_OWVAR 37
4125: PUSH
4126: LD_INT 22
4128: PUSH
4129: LD_INT 21
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_INT 1
4138: PPUSH
4139: LD_INT 2
4141: PPUSH
4142: CALL_OW 12
4146: ARRAY
4147: ST_TO_ADDR
// veh = CreateVehicle ;
4148: LD_ADDR_VAR 0 4
4152: PUSH
4153: CALL_OW 45
4157: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4158: LD_VAR 0 4
4162: PPUSH
4163: LD_INT 3
4165: PPUSH
4166: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_INT 6
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// end ;
4185: GO 4039
4187: POP
4188: POP
// end ; end_of_file
4189: LD_VAR 0 1
4193: RET
// export function PrepareKurt ; begin
4194: LD_INT 0
4196: PPUSH
// uc_side = 8 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 8
4204: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4205: LD_ADDR_OWVAR 37
4209: PUSH
4210: LD_INT 13
4212: ST_TO_ADDR
// vc_engine = 1 ;
4213: LD_ADDR_OWVAR 39
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// vc_control = 1 ;
4221: LD_ADDR_OWVAR 38
4225: PUSH
4226: LD_INT 1
4228: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
4229: LD_ADDR_OWVAR 40
4233: PUSH
4234: LD_INT 2
4236: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4237: LD_ADDR_EXP 26
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// if kurtStatus > 0 then
4247: LD_EXP 27
4251: PUSH
4252: LD_INT 0
4254: GREATER
4255: IFFALSE 4304
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4257: LD_ADDR_EXP 24
4261: PUSH
4262: LD_STRING Kurt
4264: PPUSH
4265: LD_INT 0
4267: PPUSH
4268: CALL 11215 0 2
4272: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4273: LD_EXP 26
4277: PPUSH
4278: LD_INT 4
4280: PPUSH
4281: LD_INT 0
4283: PPUSH
4284: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4288: LD_EXP 24
4292: PPUSH
4293: LD_EXP 26
4297: PPUSH
4298: CALL_OW 52
// end else
4302: GO 4365
// begin hc_name =  ;
4304: LD_ADDR_OWVAR 26
4308: PUSH
4309: LD_STRING 
4311: ST_TO_ADDR
// hc_gallery =  ;
4312: LD_ADDR_OWVAR 33
4316: PUSH
4317: LD_STRING 
4319: ST_TO_ADDR
// otherKurt = PrepareSoldier ( sex_male , 10 ) ;
4320: LD_ADDR_EXP 25
4324: PUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_INT 10
4330: PPUSH
4331: CALL_OW 381
4335: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4336: LD_EXP 26
4340: PPUSH
4341: LD_INT 4
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4351: LD_EXP 25
4355: PPUSH
4356: LD_EXP 26
4360: PPUSH
4361: CALL_OW 52
// end ; end ;
4365: LD_VAR 0 1
4369: RET
// export function PrepareLegionForPlayer ; var i , un ; begin
4370: LD_INT 0
4372: PPUSH
4373: PPUSH
4374: PPUSH
// for i = 1 to 6 do
4375: LD_ADDR_VAR 0 2
4379: PUSH
4380: DOUBLE
4381: LD_INT 1
4383: DEC
4384: ST_TO_ADDR
4385: LD_INT 6
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4568
// begin uc_side = 1 ;
4391: LD_ADDR_OWVAR 20
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// uc_nation = 2 ;
4399: LD_ADDR_OWVAR 21
4403: PUSH
4404: LD_INT 2
4406: ST_TO_ADDR
// hc_gallery =  ;
4407: LD_ADDR_OWVAR 33
4411: PUSH
4412: LD_STRING 
4414: ST_TO_ADDR
// hc_name =  ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING 
4422: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4423: LD_EXP 27
4427: PUSH
4428: LD_INT 0
4430: EQUAL
4431: PUSH
4432: LD_EXP 27
4436: PUSH
4437: LD_INT 2
4439: EQUAL
4440: OR
4441: IFFALSE 4493
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , Rand ( 2 , 4 ) ) else
4443: LD_INT 0
4445: PPUSH
4446: LD_INT 1
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: LD_INT 3
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 1
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: CALL_OW 12
4474: ARRAY
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_INT 4
4481: PPUSH
4482: CALL_OW 12
4486: PPUSH
4487: CALL_OW 380
4491: GO 4541
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , Rand ( 6 , 8 ) ) ;
4493: LD_INT 0
4495: PPUSH
4496: LD_INT 1
4498: PUSH
4499: LD_INT 2
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 4
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 4
4519: PPUSH
4520: CALL_OW 12
4524: ARRAY
4525: PPUSH
4526: LD_INT 6
4528: PPUSH
4529: LD_INT 8
4531: PPUSH
4532: CALL_OW 12
4536: PPUSH
4537: CALL_OW 380
// un = CreateHuman ;
4541: LD_ADDR_VAR 0 3
4545: PUSH
4546: CALL_OW 44
4550: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 4
4558: PPUSH
4559: LD_INT 0
4561: PPUSH
4562: CALL_OW 49
// end ;
4566: GO 4388
4568: POP
4569: POP
// end ;
4570: LD_VAR 0 1
4574: RET
// export function PrepareAttackLegion ; var i , un ; begin
4575: LD_INT 0
4577: PPUSH
4578: PPUSH
4579: PPUSH
// for i = 1 to 4 do
4580: LD_ADDR_VAR 0 2
4584: PUSH
4585: DOUBLE
4586: LD_INT 1
4588: DEC
4589: ST_TO_ADDR
4590: LD_INT 4
4592: PUSH
4593: FOR_TO
4594: IFFALSE 4695
// begin uc_side = 1 ;
4596: LD_ADDR_OWVAR 20
4600: PUSH
4601: LD_INT 1
4603: ST_TO_ADDR
// uc_nation = 2 ;
4604: LD_ADDR_OWVAR 21
4608: PUSH
4609: LD_INT 2
4611: ST_TO_ADDR
// hc_gallery =  ;
4612: LD_ADDR_OWVAR 33
4616: PUSH
4617: LD_STRING 
4619: ST_TO_ADDR
// hc_name =  ;
4620: LD_ADDR_OWVAR 26
4624: PUSH
4625: LD_STRING 
4627: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
4628: LD_INT 0
4630: PPUSH
4631: LD_INT 1
4633: PUSH
4634: LD_INT 8
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 1
4643: PPUSH
4644: LD_INT 2
4646: PPUSH
4647: CALL_OW 12
4651: ARRAY
4652: PPUSH
4653: LD_INT 6
4655: PPUSH
4656: LD_INT 8
4658: PPUSH
4659: CALL_OW 12
4663: PPUSH
4664: CALL_OW 380
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 19
4685: PPUSH
4686: LD_INT 0
4688: PPUSH
4689: CALL_OW 49
// end ;
4693: GO 4593
4695: POP
4696: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 8
4702: PPUSH
4703: LD_INT 2
4705: PPUSH
4706: LD_INT 1
4708: PPUSH
4709: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
4713: LD_INT 20
4715: PPUSH
4716: LD_INT 3
4718: PPUSH
4719: CALL 14030 0 2
// end ; end_of_file
4723: LD_VAR 0 1
4727: RET
// every 1 do var i ;
4728: GO 4730
4730: DISABLE
4731: LD_INT 0
4733: PPUSH
// begin TeleportExit ( ruteleprt , 117 , 131 ) ;
4734: LD_INT 10
4736: PPUSH
4737: LD_INT 117
4739: PPUSH
4740: LD_INT 131
4742: PPUSH
4743: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4747: LD_INT 137
4749: PPUSH
4750: LD_INT 84
4752: PPUSH
4753: LD_INT 61
4755: PPUSH
4756: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
4760: LD_EXP 1
4764: PPUSH
4765: CALL_OW 310
4769: PPUSH
4770: CALL_OW 87
// InGameOn ;
4774: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 102 ) ;
4778: LD_INT 22
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PPUSH
4788: CALL_OW 69
4792: PPUSH
4793: LD_INT 130
4795: PPUSH
4796: LD_INT 102
4798: PPUSH
4799: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_INT 114
4810: PPUSH
4811: LD_INT 102
4813: PPUSH
4814: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
4818: LD_EXP 1
4822: PPUSH
4823: LD_STRING D1-JMM-1
4825: PPUSH
4826: CALL_OW 88
// if IsOk ( Donaldson ) then
4830: LD_EXP 3
4834: PPUSH
4835: CALL_OW 302
4839: IFFALSE 4877
// begin Say ( Donaldson , D1-Don-1 ) ;
4841: LD_EXP 3
4845: PPUSH
4846: LD_STRING D1-Don-1
4848: PPUSH
4849: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
4853: LD_EXP 1
4857: PPUSH
4858: LD_STRING D1-JMM-2
4860: PPUSH
4861: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
4865: LD_EXP 3
4869: PPUSH
4870: LD_STRING D1-Don-2
4872: PPUSH
4873: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 104 , 96 ) ;
4877: LD_INT 22
4879: PUSH
4880: LD_INT 1
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_INT 104
4894: PPUSH
4895: LD_INT 96
4897: PPUSH
4898: CALL_OW 171
// end ;
4902: PPOPN 1
4904: END
// every 0 0$1 trigger SeeXY ( 1 , 101 , 92 ) do var i ;
4905: LD_INT 1
4907: PPUSH
4908: LD_INT 101
4910: PPUSH
4911: LD_INT 92
4913: PPUSH
4914: CALL_OW 293
4918: IFFALSE 5093
4920: GO 4922
4922: DISABLE
4923: LD_INT 0
4925: PPUSH
// begin CenterOnXY ( 99 , 89 ) ;
4926: LD_INT 99
4928: PPUSH
4929: LD_INT 89
4931: PPUSH
4932: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
4936: LD_INT 22
4938: PUSH
4939: LD_INT 1
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 26
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 25
4961: PUSH
4962: LD_INT 1
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 25
4971: PUSH
4972: LD_INT 2
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 25
4981: PUSH
4982: LD_INT 3
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 25
4991: PUSH
4992: LD_INT 4
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: LIST
5010: PUSH
5011: LD_EXP 1
5015: DIFF
5016: PPUSH
5017: CALL_OW 69
5021: PPUSH
5022: LD_STRING D1-Sol1-2
5024: PPUSH
5025: LD_STRING 
5027: PPUSH
5028: CALL 11323 0 3
// Say ( JMM , D1-JMM-3 ) ;
5032: LD_EXP 1
5036: PPUSH
5037: LD_STRING D1-JMM-3
5039: PPUSH
5040: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5044: LD_STRING M1
5046: PPUSH
5047: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5051: LD_ADDR_VAR 0 1
5055: PUSH
5056: LD_INT 22
5058: PUSH
5059: LD_INT 1
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PPUSH
5066: CALL_OW 69
5070: PUSH
5071: FOR_IN
5072: IFFALSE 5091
// ComMoveXY ( i , 93 , 83 ) ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 93
5081: PPUSH
5082: LD_INT 83
5084: PPUSH
5085: CALL_OW 111
5089: GO 5071
5091: POP
5092: POP
// end ;
5093: PPOPN 1
5095: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5096: GO 5098
5098: DISABLE
5099: LD_INT 0
5101: PPUSH
5102: PPUSH
5103: PPUSH
5104: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5105: LD_ADDR_VAR 0 2
5109: PUSH
5110: LD_INT 8
5112: PPUSH
5113: LD_INT 22
5115: PUSH
5116: LD_INT 3
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PUSH
5123: LD_INT 25
5125: PUSH
5126: LD_INT 9
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PPUSH
5137: CALL_OW 70
5141: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: LD_INT 22
5149: PUSH
5150: LD_INT 1
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: EMPTY
5158: LIST
5159: PPUSH
5160: CALL_OW 69
5164: ST_TO_ADDR
// enable ;
5165: ENABLE
// for i in your_units do
5166: LD_ADDR_VAR 0 1
5170: PUSH
5171: LD_VAR 0 3
5175: PUSH
5176: FOR_IN
5177: IFFALSE 5792
// begin if See ( 3 , i ) then
5179: LD_INT 3
5181: PPUSH
5182: LD_VAR 0 1
5186: PPUSH
5187: CALL_OW 292
5191: IFFALSE 5790
// begin disable ;
5193: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5194: LD_VAR 0 2
5198: PPUSH
5199: LD_INT 96
5201: PPUSH
5202: LD_INT 85
5204: PPUSH
5205: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5209: LD_VAR 0 2
5213: PPUSH
5214: LD_INT 96
5216: PPUSH
5217: LD_INT 85
5219: PPUSH
5220: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5224: LD_VAR 0 2
5228: PPUSH
5229: LD_INT 96
5231: PPUSH
5232: LD_INT 85
5234: PPUSH
5235: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5239: LD_VAR 0 2
5243: PPUSH
5244: LD_INT 96
5246: PPUSH
5247: LD_INT 85
5249: PPUSH
5250: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5254: LD_VAR 0 2
5258: PPUSH
5259: LD_INT 96
5261: PPUSH
5262: LD_INT 85
5264: PPUSH
5265: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5269: LD_VAR 0 2
5273: PPUSH
5274: LD_INT 96
5276: PPUSH
5277: LD_INT 85
5279: PPUSH
5280: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5284: LD_EXP 1
5288: PPUSH
5289: LD_STRING D1a-JMM-1
5291: PPUSH
5292: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5296: LD_EXP 3
5300: PPUSH
5301: LD_STRING D1a-Don-1
5303: PPUSH
5304: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: LD_INT 22
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 69
5327: PUSH
5328: FOR_IN
5329: IFFALSE 5348
// ComMoveXY ( i , 109 , 102 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 109
5338: PPUSH
5339: LD_INT 102
5341: PPUSH
5342: CALL_OW 111
5346: GO 5328
5348: POP
5349: POP
// Say ( JMM , D1a-JMM-2 ) ;
5350: LD_EXP 1
5354: PPUSH
5355: LD_STRING D1a-JMM-2
5357: PPUSH
5358: CALL_OW 88
// wait ( 0 0$10 ) ;
5362: LD_INT 350
5364: PPUSH
5365: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5369: LD_EXP 1
5373: PPUSH
5374: CALL_OW 310
5378: PPUSH
5379: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5383: LD_EXP 3
5387: PPUSH
5388: LD_STRING D1b-Don-1
5390: PPUSH
5391: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5395: LD_EXP 1
5399: PPUSH
5400: LD_STRING D1b-JMM-1
5402: PPUSH
5403: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5407: LD_INT 22
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 26
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 2
5429: PUSH
5430: LD_INT 25
5432: PUSH
5433: LD_INT 1
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 25
5442: PUSH
5443: LD_INT 2
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: LD_INT 25
5452: PUSH
5453: LD_INT 3
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 25
5462: PUSH
5463: LD_INT 4
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: LD_EXP 1
5486: PUSH
5487: EMPTY
5488: LIST
5489: DIFF
5490: PPUSH
5491: CALL_OW 69
5495: PPUSH
5496: LD_STRING D1b-Sol1-1
5498: PPUSH
5499: LD_STRING 
5501: PPUSH
5502: CALL 11323 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5506: LD_EXP 3
5510: PPUSH
5511: LD_STRING D1b-Don-2
5513: PPUSH
5514: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5518: LD_EXP 1
5522: PPUSH
5523: LD_STRING D1b-JMM-2
5525: PPUSH
5526: CALL_OW 88
// dec = ShowQuery1 ;
5530: LD_ADDR_VAR 0 4
5534: PUSH
5535: CALL 11859 0 0
5539: ST_TO_ADDR
// if dec = 1 then
5540: LD_VAR 0 4
5544: PUSH
5545: LD_INT 1
5547: EQUAL
5548: IFFALSE 5654
// begin Say ( JMM , D2-JMM-1 ) ;
5550: LD_EXP 1
5554: PPUSH
5555: LD_STRING D2-JMM-1
5557: PPUSH
5558: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5562: LD_EXP 22
5566: PPUSH
5567: LD_STRING D2-Pow-1
5569: PPUSH
5570: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
5574: LD_EXP 1
5578: PPUSH
5579: LD_STRING D2a-JMM-1
5581: PPUSH
5582: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
5586: LD_EXP 22
5590: PPUSH
5591: LD_STRING D2a-Pow-1
5593: PPUSH
5594: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
5598: LD_EXP 1
5602: PPUSH
5603: LD_STRING D2a-JMM-2
5605: PPUSH
5606: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
5610: LD_EXP 22
5614: PPUSH
5615: LD_STRING D2a-Pow-2
5617: PPUSH
5618: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
5622: LD_EXP 1
5626: PPUSH
5627: LD_STRING D2a-JMM-3
5629: PPUSH
5630: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
5634: LD_EXP 22
5638: PPUSH
5639: LD_STRING D2a-Pow-3
5641: PPUSH
5642: CALL_OW 94
// secondPass = 2 ;
5646: LD_ADDR_EXP 28
5650: PUSH
5651: LD_INT 2
5653: ST_TO_ADDR
// end ; if dec = 2 then
5654: LD_VAR 0 4
5658: PUSH
5659: LD_INT 2
5661: EQUAL
5662: IFFALSE 5756
// begin Say ( JMM , D2-JMM-1 ) ;
5664: LD_EXP 1
5668: PPUSH
5669: LD_STRING D2-JMM-1
5671: PPUSH
5672: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5676: LD_EXP 22
5680: PPUSH
5681: LD_STRING D2-Pow-1
5683: PPUSH
5684: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
5688: LD_EXP 1
5692: PPUSH
5693: LD_STRING D2b-JMM-1
5695: PPUSH
5696: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
5700: LD_EXP 22
5704: PPUSH
5705: LD_STRING D2b-Pow-1
5707: PPUSH
5708: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
5712: LD_EXP 1
5716: PPUSH
5717: LD_STRING D2c-JMM-1
5719: PPUSH
5720: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
5724: LD_EXP 22
5728: PPUSH
5729: LD_STRING D2c-Pow-1
5731: PPUSH
5732: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
5736: LD_EXP 1
5740: PPUSH
5741: LD_STRING D2c-JMM-2
5743: PPUSH
5744: CALL_OW 88
// secondPass = 2 ;
5748: LD_ADDR_EXP 28
5752: PUSH
5753: LD_INT 2
5755: ST_TO_ADDR
// end ; if dec = 3 then
5756: LD_VAR 0 4
5760: PUSH
5761: LD_INT 3
5763: EQUAL
5764: IFFALSE 5774
// secondPass = 1 ;
5766: LD_ADDR_EXP 28
5770: PUSH
5771: LD_INT 1
5773: ST_TO_ADDR
// InGameOff ;
5774: CALL_OW 9
// ruAI = 1 ;
5778: LD_ADDR_EXP 41
5782: PUSH
5783: LD_INT 1
5785: ST_TO_ADDR
// exit ;
5786: POP
5787: POP
5788: GO 5794
// end ; end ;
5790: GO 5176
5792: POP
5793: POP
// end ;
5794: PPOPN 4
5796: END
// every 1 1$0 trigger secondPass = 2 do
5797: LD_EXP 28
5801: PUSH
5802: LD_INT 2
5804: EQUAL
5805: IFFALSE 5932
5807: GO 5809
5809: DISABLE
// begin PowellSupport1 ;
5810: CALL 1620 0 0
// DialogueOn ;
5814: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
5818: LD_EXP 1
5822: PPUSH
5823: LD_STRING DC1-JMM-1
5825: PPUSH
5826: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
5830: LD_EXP 22
5834: PPUSH
5835: LD_STRING DC1-Pow-1
5837: PPUSH
5838: CALL_OW 94
// DialogueOff ;
5842: CALL_OW 7
// wait ( 3 3$0 ) ;
5846: LD_INT 6300
5848: PPUSH
5849: CALL_OW 67
// PowellSupport2 ;
5853: CALL 2249 0 0
// DialogueOn ;
5857: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING DC2-JMM-1
5868: PPUSH
5869: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
5873: LD_EXP 22
5877: PPUSH
5878: LD_STRING DC2-Pow-1
5880: PPUSH
5881: CALL_OW 94
// DialogueOff ;
5885: CALL_OW 7
// wait ( 6 6$0 ) ;
5889: LD_INT 12600
5891: PPUSH
5892: CALL_OW 67
// PowellSupport3 ;
5896: CALL 2787 0 0
// DialogueOn ;
5900: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
5904: LD_EXP 22
5908: PPUSH
5909: LD_STRING DC3-Pow-1
5911: PPUSH
5912: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING DC3-JMM-1
5923: PPUSH
5924: CALL_OW 88
// DialogueOff ;
5928: CALL_OW 7
// end ;
5932: END
// every 4 4$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
5933: LD_EXP 28
5937: PUSH
5938: LD_INT 2
5940: EQUAL
5941: PUSH
5942: LD_INT 22
5944: PUSH
5945: LD_INT 1
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 2
5954: PUSH
5955: LD_INT 30
5957: PUSH
5958: LD_INT 0
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PUSH
5965: LD_INT 30
5967: PUSH
5968: LD_INT 1
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PPUSH
5984: CALL_OW 69
5988: PUSH
5989: LD_INT 0
5991: GREATER
5992: AND
5993: IFFALSE 9157
5995: GO 5997
5997: DISABLE
5998: LD_INT 0
6000: PPUSH
6001: PPUSH
6002: PPUSH
6003: PPUSH
6004: PPUSH
6005: PPUSH
6006: PPUSH
6007: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6008: LD_ADDR_VAR 0 4
6012: PUSH
6013: LD_INT 22
6015: PUSH
6016: LD_INT 1
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 21
6025: PUSH
6026: LD_INT 3
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 2
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: LD_INT 30
6048: PUSH
6049: LD_INT 1
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: PPUSH
6066: CALL_OW 69
6070: ST_TO_ADDR
// for i in tmp do
6071: LD_ADDR_VAR 0 1
6075: PUSH
6076: LD_VAR 0 4
6080: PUSH
6081: FOR_IN
6082: IFFALSE 6115
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6084: LD_ADDR_VAR 0 6
6088: PUSH
6089: LD_VAR 0 6
6093: PUSH
6094: LD_VAR 0 1
6098: PPUSH
6099: CALL_OW 274
6103: PPUSH
6104: LD_INT 1
6106: PPUSH
6107: CALL_OW 275
6111: PLUS
6112: ST_TO_ADDR
6113: GO 6081
6115: POP
6116: POP
// for i in tmp do
6117: LD_ADDR_VAR 0 1
6121: PUSH
6122: LD_VAR 0 4
6126: PUSH
6127: FOR_IN
6128: IFFALSE 6161
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6130: LD_ADDR_VAR 0 7
6134: PUSH
6135: LD_VAR 0 7
6139: PUSH
6140: LD_VAR 0 1
6144: PPUSH
6145: CALL_OW 274
6149: PPUSH
6150: LD_INT 2
6152: PPUSH
6153: CALL_OW 275
6157: PLUS
6158: ST_TO_ADDR
6159: GO 6127
6161: POP
6162: POP
// for i in tmp do
6163: LD_ADDR_VAR 0 1
6167: PUSH
6168: LD_VAR 0 4
6172: PUSH
6173: FOR_IN
6174: IFFALSE 6207
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6176: LD_ADDR_VAR 0 8
6180: PUSH
6181: LD_VAR 0 8
6185: PUSH
6186: LD_VAR 0 1
6190: PPUSH
6191: CALL_OW 274
6195: PPUSH
6196: LD_INT 3
6198: PPUSH
6199: CALL_OW 275
6203: PLUS
6204: ST_TO_ADDR
6205: GO 6173
6207: POP
6208: POP
// PrepareKurt ;
6209: CALL 4194 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6213: LD_EXP 26
6217: PPUSH
6218: LD_INT 144
6220: PPUSH
6221: LD_INT 111
6223: PPUSH
6224: CALL_OW 111
// wait ( 0 0$2 ) ;
6228: LD_INT 70
6230: PPUSH
6231: CALL_OW 67
// if kurtStatus > 0 then
6235: LD_EXP 27
6239: PUSH
6240: LD_INT 0
6242: GREATER
6243: IFFALSE 7702
// begin DialogueOn ;
6245: CALL_OW 6
// ComExitVehicle ( Kurt ) ;
6249: LD_EXP 24
6253: PPUSH
6254: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6258: LD_EXP 24
6262: PPUSH
6263: CALL_OW 87
// Say ( Kurt , D3-Kurt-1 ) ;
6267: LD_EXP 24
6271: PPUSH
6272: LD_STRING D3-Kurt-1
6274: PPUSH
6275: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6279: LD_EXP 1
6283: PPUSH
6284: LD_STRING D3-JMM-1
6286: PPUSH
6287: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6291: LD_EXP 24
6295: PPUSH
6296: LD_STRING D3-Kurt-2
6298: PPUSH
6299: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6303: LD_EXP 1
6307: PPUSH
6308: LD_STRING D3-JMM-2
6310: PPUSH
6311: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6315: LD_EXP 24
6319: PPUSH
6320: LD_STRING D3-Kurt-4
6322: PPUSH
6323: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6327: LD_EXP 1
6331: PPUSH
6332: LD_STRING D3-JMM-4
6334: PPUSH
6335: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6339: LD_EXP 24
6343: PPUSH
6344: LD_STRING D3-Kurt-5
6346: PPUSH
6347: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6351: LD_EXP 24
6355: PPUSH
6356: LD_STRING D3-Kurt-5a
6358: PPUSH
6359: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
6363: LD_EXP 24
6367: PPUSH
6368: LD_STRING D3-Kurt-5b
6370: PPUSH
6371: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6375: LD_VAR 0 6
6379: PUSH
6380: LD_INT 60
6382: GREATEREQUAL
6383: PUSH
6384: LD_VAR 0 8
6388: PUSH
6389: LD_INT 60
6391: GREATEREQUAL
6392: AND
6393: IFFALSE 6428
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: LD_STRING Q2K
6402: PPUSH
6403: LD_INT 1
6405: PUSH
6406: LD_INT 2
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: LD_INT 4
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: PPUSH
6421: CALL_OW 98
6425: ST_TO_ADDR
6426: GO 6451
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
6428: LD_ADDR_VAR 0 2
6432: PUSH
6433: LD_STRING Q2K
6435: PPUSH
6436: LD_INT 3
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 98
6450: ST_TO_ADDR
// if dec1 = 1 then
6451: LD_VAR 0 2
6455: PUSH
6456: LD_INT 1
6458: EQUAL
6459: IFFALSE 6493
// begin Say ( JMM , D3Ka-JMM-1 ) ;
6461: LD_EXP 1
6465: PPUSH
6466: LD_STRING D3Ka-JMM-1
6468: PPUSH
6469: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
6473: LD_EXP 24
6477: PPUSH
6478: LD_STRING D3Ka-Kurt-1
6480: PPUSH
6481: CALL_OW 88
// warWithLegion = 1 ;
6485: LD_ADDR_EXP 30
6489: PUSH
6490: LD_INT 1
6492: ST_TO_ADDR
// end ; if dec1 = 2 then
6493: LD_VAR 0 2
6497: PUSH
6498: LD_INT 2
6500: EQUAL
6501: IFFALSE 6727
// begin Say ( JMM , D3Kb-JMM-1 ) ;
6503: LD_EXP 1
6507: PPUSH
6508: LD_STRING D3Kb-JMM-1
6510: PPUSH
6511: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
6515: LD_EXP 24
6519: PPUSH
6520: LD_STRING D3Kb-Kurt-1
6522: PPUSH
6523: CALL_OW 88
// for i in tmp do
6527: LD_ADDR_VAR 0 1
6531: PUSH
6532: LD_VAR 0 4
6536: PUSH
6537: FOR_IN
6538: IFFALSE 6625
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 1 ) ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_VAR 0 4
6549: PPUSH
6550: CALL_OW 274
6554: PPUSH
6555: LD_INT 1
6557: PPUSH
6558: CALL_OW 275
6562: ST_TO_ADDR
// if tmp2 >= 60 then
6563: LD_VAR 0 5
6567: PUSH
6568: LD_INT 60
6570: GREATEREQUAL
6571: IFFALSE 6603
// begin SetResourceType ( GetBase ( tmp ) , 1 , tmp2 - 60 ) ;
6573: LD_VAR 0 4
6577: PPUSH
6578: CALL_OW 274
6582: PPUSH
6583: LD_INT 1
6585: PPUSH
6586: LD_VAR 0 5
6590: PUSH
6591: LD_INT 60
6593: MINUS
6594: PPUSH
6595: CALL_OW 277
// break ;
6599: GO 6625
// end else
6601: GO 6623
// begin SetResourceType ( GetBase ( tmp ) , 1 , 0 ) ;
6603: LD_VAR 0 4
6607: PPUSH
6608: CALL_OW 274
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 0
6618: PPUSH
6619: CALL_OW 277
// end ; end ;
6623: GO 6537
6625: POP
6626: POP
// for i in tmp do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: LD_VAR 0 4
6636: PUSH
6637: FOR_IN
6638: IFFALSE 6725
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 3 ) ;
6640: LD_ADDR_VAR 0 5
6644: PUSH
6645: LD_VAR 0 4
6649: PPUSH
6650: CALL_OW 274
6654: PPUSH
6655: LD_INT 3
6657: PPUSH
6658: CALL_OW 275
6662: ST_TO_ADDR
// if tmp2 >= 60 then
6663: LD_VAR 0 5
6667: PUSH
6668: LD_INT 60
6670: GREATEREQUAL
6671: IFFALSE 6703
// begin SetResourceType ( GetBase ( tmp ) , 3 , tmp2 - 60 ) ;
6673: LD_VAR 0 4
6677: PPUSH
6678: CALL_OW 274
6682: PPUSH
6683: LD_INT 3
6685: PPUSH
6686: LD_VAR 0 5
6690: PUSH
6691: LD_INT 60
6693: MINUS
6694: PPUSH
6695: CALL_OW 277
// break ;
6699: GO 6725
// end else
6701: GO 6723
// begin SetResourceType ( GetBase ( tmp ) , 3 , 0 ) ;
6703: LD_VAR 0 4
6707: PPUSH
6708: CALL_OW 274
6712: PPUSH
6713: LD_INT 3
6715: PPUSH
6716: LD_INT 0
6718: PPUSH
6719: CALL_OW 277
// end ; end ;
6723: GO 6637
6725: POP
6726: POP
// end ; if dec1 = 3 then
6727: LD_VAR 0 2
6731: PUSH
6732: LD_INT 3
6734: EQUAL
6735: IFFALSE 6970
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
6737: LD_EXP 1
6741: PPUSH
6742: LD_STRING D3Kc1-JMM-1
6744: PPUSH
6745: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
6749: LD_EXP 24
6753: PPUSH
6754: LD_STRING D3Kc1-Kurt-1
6756: PPUSH
6757: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
6761: LD_EXP 1
6765: PPUSH
6766: LD_STRING D3Kc1-JMM-2
6768: PPUSH
6769: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
6773: LD_EXP 24
6777: PPUSH
6778: LD_STRING D3Kc1-Kurt-2
6780: PPUSH
6781: CALL_OW 88
// askSiberite = 1 ;
6785: LD_ADDR_EXP 32
6789: PUSH
6790: LD_INT 1
6792: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
6793: LD_ADDR_VAR 0 2
6797: PUSH
6798: LD_STRING Q2b
6800: PPUSH
6801: LD_INT 1
6803: PUSH
6804: LD_INT 2
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: LIST
6814: PPUSH
6815: CALL_OW 98
6819: ST_TO_ADDR
// if dec2 = 1 then
6820: LD_VAR 0 3
6824: PUSH
6825: LD_INT 1
6827: EQUAL
6828: IFFALSE 6862
// begin Say ( JMM , D4a-JMM-1 ) ;
6830: LD_EXP 1
6834: PPUSH
6835: LD_STRING D4a-JMM-1
6837: PPUSH
6838: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
6842: LD_EXP 24
6846: PPUSH
6847: LD_STRING D4b-Kurt-1
6849: PPUSH
6850: CALL_OW 88
// warWithLegion = 1 ;
6854: LD_ADDR_EXP 30
6858: PUSH
6859: LD_INT 1
6861: ST_TO_ADDR
// end ; if dec2 = 2 then
6862: LD_VAR 0 3
6866: PUSH
6867: LD_INT 2
6869: EQUAL
6870: IFFALSE 6904
// begin Say ( JMM , D4b-JMM-1 ) ;
6872: LD_EXP 1
6876: PPUSH
6877: LD_STRING D4b-JMM-1
6879: PPUSH
6880: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
6884: LD_EXP 24
6888: PPUSH
6889: LD_STRING D4b-Kurt-1
6891: PPUSH
6892: CALL_OW 88
// warWithLegion = 1 ;
6896: LD_ADDR_EXP 30
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// end ; if dec2 = 3 then
6904: LD_VAR 0 3
6908: PUSH
6909: LD_INT 3
6911: EQUAL
6912: IFFALSE 6970
// begin Say ( JMM , D4c-JMM-1 ) ;
6914: LD_EXP 1
6918: PPUSH
6919: LD_STRING D4c-JMM-1
6921: PPUSH
6922: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
6926: LD_EXP 24
6930: PPUSH
6931: LD_STRING D4c-Kurt-1
6933: PPUSH
6934: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
6938: LD_EXP 1
6942: PPUSH
6943: LD_STRING D4c-JMM-2
6945: PPUSH
6946: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
6950: LD_EXP 24
6954: PPUSH
6955: LD_STRING D4c-Kurt-2
6957: PPUSH
6958: CALL_OW 88
// fakeInfo = 1 ;
6962: LD_ADDR_EXP 31
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 4
6977: EQUAL
6978: IFFALSE 7635
// begin Say ( JMM , D3Kd-JMM-1 ) ;
6980: LD_EXP 1
6984: PPUSH
6985: LD_STRING D3Kd-JMM-1
6987: PPUSH
6988: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
6992: LD_VAR 0 6
6996: PUSH
6997: LD_INT 120
6999: GREATEREQUAL
7000: PUSH
7001: LD_VAR 0 8
7005: PUSH
7006: LD_INT 120
7008: GREATEREQUAL
7009: AND
7010: IFFALSE 7045
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7012: LD_ADDR_VAR 0 3
7016: PUSH
7017: LD_STRING Q2aK
7019: PPUSH
7020: LD_INT 1
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 4
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PPUSH
7038: CALL_OW 98
7042: ST_TO_ADDR
7043: GO 7068
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7045: LD_ADDR_VAR 0 3
7049: PUSH
7050: LD_STRING Q2K
7052: PPUSH
7053: LD_INT 1
7055: PUSH
7056: LD_INT 4
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 98
7067: ST_TO_ADDR
// if dec2 = 1 then
7068: LD_VAR 0 3
7072: PUSH
7073: LD_INT 1
7075: EQUAL
7076: IFFALSE 7110
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7078: LD_EXP 1
7082: PPUSH
7083: LD_STRING D5Ka-JMM-1
7085: PPUSH
7086: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7090: LD_EXP 24
7094: PPUSH
7095: LD_STRING D5Ka-Kurt-1
7097: PPUSH
7098: CALL_OW 88
// warWithLegion = 1 ;
7102: LD_ADDR_EXP 30
7106: PUSH
7107: LD_INT 1
7109: ST_TO_ADDR
// end ; if dec2 = 2 then
7110: LD_VAR 0 3
7114: PUSH
7115: LD_INT 2
7117: EQUAL
7118: IFFALSE 7144
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7120: LD_EXP 1
7124: PPUSH
7125: LD_STRING D3Kb-JMM-1
7127: PPUSH
7128: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7132: LD_EXP 24
7136: PPUSH
7137: LD_STRING D3Kb-Kurt-1
7139: PPUSH
7140: CALL_OW 88
// end ; if dec2 = 3 then
7144: LD_VAR 0 3
7148: PUSH
7149: LD_INT 3
7151: EQUAL
7152: IFFALSE 7382
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7154: LD_EXP 1
7158: PPUSH
7159: LD_STRING D3Ke-JMM-1
7161: PPUSH
7162: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7166: LD_EXP 24
7170: PPUSH
7171: LD_STRING D3Ke-Kurt-1
7173: PPUSH
7174: CALL_OW 88
// PrepareLegionForPlayer ;
7178: CALL 4370 0 0
// for i in tmp do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_VAR 0 4
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7280
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 1 ) ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 4
7204: PPUSH
7205: CALL_OW 274
7209: PPUSH
7210: LD_INT 1
7212: PPUSH
7213: CALL_OW 275
7217: ST_TO_ADDR
// if tmp2 >= 120 then
7218: LD_VAR 0 5
7222: PUSH
7223: LD_INT 120
7225: GREATEREQUAL
7226: IFFALSE 7258
// begin SetResourceType ( GetBase ( tmp ) , 1 , tmp2 - 120 ) ;
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL_OW 274
7237: PPUSH
7238: LD_INT 1
7240: PPUSH
7241: LD_VAR 0 5
7245: PUSH
7246: LD_INT 120
7248: MINUS
7249: PPUSH
7250: CALL_OW 277
// break ;
7254: GO 7280
// end else
7256: GO 7278
// begin SetResourceType ( GetBase ( tmp ) , 1 , 0 ) ;
7258: LD_VAR 0 4
7262: PPUSH
7263: CALL_OW 274
7267: PPUSH
7268: LD_INT 1
7270: PPUSH
7271: LD_INT 0
7273: PPUSH
7274: CALL_OW 277
// end ; end ;
7278: GO 7192
7280: POP
7281: POP
// for i in tmp do
7282: LD_ADDR_VAR 0 1
7286: PUSH
7287: LD_VAR 0 4
7291: PUSH
7292: FOR_IN
7293: IFFALSE 7380
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 3 ) ;
7295: LD_ADDR_VAR 0 5
7299: PUSH
7300: LD_VAR 0 4
7304: PPUSH
7305: CALL_OW 274
7309: PPUSH
7310: LD_INT 3
7312: PPUSH
7313: CALL_OW 275
7317: ST_TO_ADDR
// if tmp2 >= 120 then
7318: LD_VAR 0 5
7322: PUSH
7323: LD_INT 120
7325: GREATEREQUAL
7326: IFFALSE 7358
// begin SetResourceType ( GetBase ( tmp ) , 3 , tmp2 - 120 ) ;
7328: LD_VAR 0 4
7332: PPUSH
7333: CALL_OW 274
7337: PPUSH
7338: LD_INT 3
7340: PPUSH
7341: LD_VAR 0 5
7345: PUSH
7346: LD_INT 120
7348: MINUS
7349: PPUSH
7350: CALL_OW 277
// break ;
7354: GO 7380
// end else
7356: GO 7378
// begin SetResourceType ( GetBase ( tmp ) , 3 , 0 ) ;
7358: LD_VAR 0 4
7362: PPUSH
7363: CALL_OW 274
7367: PPUSH
7368: LD_INT 3
7370: PPUSH
7371: LD_INT 0
7373: PPUSH
7374: CALL_OW 277
// end ; end ;
7378: GO 7292
7380: POP
7381: POP
// end ; if dec2 = 4 then
7382: LD_VAR 0 3
7386: PUSH
7387: LD_INT 4
7389: EQUAL
7390: IFFALSE 7635
// begin if dec1 = 3 then
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 3
7399: EQUAL
7400: IFFALSE 7635
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7402: LD_EXP 1
7406: PPUSH
7407: LD_STRING D3Kc1-JMM-1
7409: PPUSH
7410: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7414: LD_EXP 24
7418: PPUSH
7419: LD_STRING D3Kc1-Kurt-1
7421: PPUSH
7422: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D3Kc1-JMM-2
7433: PPUSH
7434: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7438: LD_EXP 24
7442: PPUSH
7443: LD_STRING D3Kc1-Kurt-2
7445: PPUSH
7446: CALL_OW 88
// askSiberite = 1 ;
7450: LD_ADDR_EXP 32
7454: PUSH
7455: LD_INT 1
7457: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7458: LD_ADDR_VAR 0 2
7462: PUSH
7463: LD_STRING Q2b
7465: PPUSH
7466: LD_INT 1
7468: PUSH
7469: LD_INT 2
7471: PUSH
7472: LD_INT 3
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 98
7484: ST_TO_ADDR
// if dec2 = 1 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 1
7492: EQUAL
7493: IFFALSE 7527
// begin Say ( JMM , D4a-JMM-1 ) ;
7495: LD_EXP 1
7499: PPUSH
7500: LD_STRING D4a-JMM-1
7502: PPUSH
7503: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7507: LD_EXP 24
7511: PPUSH
7512: LD_STRING D4b-Kurt-1
7514: PPUSH
7515: CALL_OW 88
// warWithLegion = 1 ;
7519: LD_ADDR_EXP 30
7523: PUSH
7524: LD_INT 1
7526: ST_TO_ADDR
// end ; if dec2 = 2 then
7527: LD_VAR 0 3
7531: PUSH
7532: LD_INT 2
7534: EQUAL
7535: IFFALSE 7569
// begin Say ( JMM , D4b-JMM-1 ) ;
7537: LD_EXP 1
7541: PPUSH
7542: LD_STRING D4b-JMM-1
7544: PPUSH
7545: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7549: LD_EXP 24
7553: PPUSH
7554: LD_STRING D4b-Kurt-1
7556: PPUSH
7557: CALL_OW 88
// warWithLegion = 1 ;
7561: LD_ADDR_EXP 30
7565: PUSH
7566: LD_INT 1
7568: ST_TO_ADDR
// end ; if dec2 = 3 then
7569: LD_VAR 0 3
7573: PUSH
7574: LD_INT 3
7576: EQUAL
7577: IFFALSE 7635
// begin Say ( JMM , D4c-JMM-1 ) ;
7579: LD_EXP 1
7583: PPUSH
7584: LD_STRING D4c-JMM-1
7586: PPUSH
7587: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7591: LD_EXP 24
7595: PPUSH
7596: LD_STRING D4c-Kurt-1
7598: PPUSH
7599: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7603: LD_EXP 1
7607: PPUSH
7608: LD_STRING D4c-JMM-2
7610: PPUSH
7611: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7615: LD_EXP 24
7619: PPUSH
7620: LD_STRING D4c-Kurt-2
7622: PPUSH
7623: CALL_OW 88
// fakeInfo = 1 ;
7627: LD_ADDR_EXP 31
7631: PUSH
7632: LD_INT 1
7634: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
7635: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
7639: LD_EXP 24
7643: PPUSH
7644: LD_EXP 26
7648: PPUSH
7649: CALL_OW 120
// wait ( 0 0$1 ) ;
7653: LD_INT 35
7655: PPUSH
7656: CALL_OW 67
// ComMoveXY ( KurtVeh , 157 , 188 ) ;
7660: LD_EXP 26
7664: PPUSH
7665: LD_INT 157
7667: PPUSH
7668: LD_INT 188
7670: PPUSH
7671: CALL_OW 111
// wait ( 0 0$3 ) ;
7675: LD_INT 105
7677: PPUSH
7678: CALL_OW 67
// RemoveUnit ( Kurt ) ;
7682: LD_EXP 24
7686: PPUSH
7687: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
7691: LD_EXP 26
7695: PPUSH
7696: CALL_OW 64
// end else
7700: GO 9157
// begin DialogueOn ;
7702: CALL_OW 6
// ComExitVehicle ( otherKurt ) ;
7706: LD_EXP 25
7710: PPUSH
7711: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
7715: LD_EXP 25
7719: PPUSH
7720: CALL_OW 87
// Say ( otherKurt , D3-Kurt-1 ) ;
7724: LD_EXP 25
7728: PPUSH
7729: LD_STRING D3-Kurt-1
7731: PPUSH
7732: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7736: LD_EXP 1
7740: PPUSH
7741: LD_STRING D3-JMM-1
7743: PPUSH
7744: CALL_OW 88
// Say ( otherKurt , D3-Kurt-2 ) ;
7748: LD_EXP 25
7752: PPUSH
7753: LD_STRING D3-Kurt-2
7755: PPUSH
7756: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7760: LD_EXP 1
7764: PPUSH
7765: LD_STRING D3-JMM-2
7767: PPUSH
7768: CALL_OW 88
// Say ( otherKurt , D3-Kurt-4 ) ;
7772: LD_EXP 25
7776: PPUSH
7777: LD_STRING D3-Kurt-4
7779: PPUSH
7780: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7784: LD_EXP 1
7788: PPUSH
7789: LD_STRING D3-JMM-4
7791: PPUSH
7792: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
7796: LD_EXP 25
7800: PPUSH
7801: LD_STRING D3-Kurt-5
7803: PPUSH
7804: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5a ) ;
7808: LD_EXP 25
7812: PPUSH
7813: LD_STRING D3-Kurt-5a
7815: PPUSH
7816: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
7820: LD_EXP 25
7824: PPUSH
7825: LD_STRING D3-Kurt-5b
7827: PPUSH
7828: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
7832: LD_VAR 0 6
7836: PUSH
7837: LD_INT 100
7839: GREATEREQUAL
7840: PUSH
7841: LD_VAR 0 8
7845: PUSH
7846: LD_INT 100
7848: GREATEREQUAL
7849: AND
7850: IFFALSE 7885
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
7852: LD_ADDR_VAR 0 2
7856: PUSH
7857: LD_STRING Q2
7859: PPUSH
7860: LD_INT 1
7862: PUSH
7863: LD_INT 2
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: LD_INT 4
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 98
7882: ST_TO_ADDR
7883: GO 7908
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: LD_STRING Q2
7892: PPUSH
7893: LD_INT 3
7895: PUSH
7896: LD_INT 4
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PPUSH
7903: CALL_OW 98
7907: ST_TO_ADDR
// if dec1 = 1 then
7908: LD_VAR 0 2
7912: PUSH
7913: LD_INT 1
7915: EQUAL
7916: IFFALSE 7950
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7918: LD_EXP 1
7922: PPUSH
7923: LD_STRING D3Ka-JMM-1
7925: PPUSH
7926: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
7930: LD_EXP 25
7934: PPUSH
7935: LD_STRING D3Ka-Kurt-1
7937: PPUSH
7938: CALL_OW 88
// warWithLegion = 1 ;
7942: LD_ADDR_EXP 30
7946: PUSH
7947: LD_INT 1
7949: ST_TO_ADDR
// end ; if dec1 = 2 then
7950: LD_VAR 0 2
7954: PUSH
7955: LD_INT 2
7957: EQUAL
7958: IFFALSE 8184
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7960: LD_EXP 1
7964: PPUSH
7965: LD_STRING D3Kb-JMM-1
7967: PPUSH
7968: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
7972: LD_EXP 25
7976: PPUSH
7977: LD_STRING D3Kb-Kurt-1
7979: PPUSH
7980: CALL_OW 88
// for i in tmp do
7984: LD_ADDR_VAR 0 1
7988: PUSH
7989: LD_VAR 0 4
7993: PUSH
7994: FOR_IN
7995: IFFALSE 8082
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 1 ) ;
7997: LD_ADDR_VAR 0 5
8001: PUSH
8002: LD_VAR 0 4
8006: PPUSH
8007: CALL_OW 274
8011: PPUSH
8012: LD_INT 1
8014: PPUSH
8015: CALL_OW 275
8019: ST_TO_ADDR
// if tmp2 >= 100 then
8020: LD_VAR 0 5
8024: PUSH
8025: LD_INT 100
8027: GREATEREQUAL
8028: IFFALSE 8060
// begin SetResourceType ( GetBase ( tmp ) , 1 , tmp2 - 100 ) ;
8030: LD_VAR 0 4
8034: PPUSH
8035: CALL_OW 274
8039: PPUSH
8040: LD_INT 1
8042: PPUSH
8043: LD_VAR 0 5
8047: PUSH
8048: LD_INT 100
8050: MINUS
8051: PPUSH
8052: CALL_OW 277
// break ;
8056: GO 8082
// end else
8058: GO 8080
// begin SetResourceType ( GetBase ( tmp ) , 1 , 0 ) ;
8060: LD_VAR 0 4
8064: PPUSH
8065: CALL_OW 274
8069: PPUSH
8070: LD_INT 1
8072: PPUSH
8073: LD_INT 0
8075: PPUSH
8076: CALL_OW 277
// end ; end ;
8080: GO 7994
8082: POP
8083: POP
// for i in tmp do
8084: LD_ADDR_VAR 0 1
8088: PUSH
8089: LD_VAR 0 4
8093: PUSH
8094: FOR_IN
8095: IFFALSE 8182
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 3 ) ;
8097: LD_ADDR_VAR 0 5
8101: PUSH
8102: LD_VAR 0 4
8106: PPUSH
8107: CALL_OW 274
8111: PPUSH
8112: LD_INT 3
8114: PPUSH
8115: CALL_OW 275
8119: ST_TO_ADDR
// if tmp2 >= 100 then
8120: LD_VAR 0 5
8124: PUSH
8125: LD_INT 100
8127: GREATEREQUAL
8128: IFFALSE 8160
// begin SetResourceType ( GetBase ( tmp ) , 3 , tmp2 - 100 ) ;
8130: LD_VAR 0 4
8134: PPUSH
8135: CALL_OW 274
8139: PPUSH
8140: LD_INT 3
8142: PPUSH
8143: LD_VAR 0 5
8147: PUSH
8148: LD_INT 100
8150: MINUS
8151: PPUSH
8152: CALL_OW 277
// break ;
8156: GO 8182
// end else
8158: GO 8180
// begin SetResourceType ( GetBase ( tmp ) , 3 , 0 ) ;
8160: LD_VAR 0 4
8164: PPUSH
8165: CALL_OW 274
8169: PPUSH
8170: LD_INT 3
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: CALL_OW 277
// end ; end ;
8180: GO 8094
8182: POP
8183: POP
// end ; if dec1 = 3 then
8184: LD_VAR 0 2
8188: PUSH
8189: LD_INT 3
8191: EQUAL
8192: IFFALSE 8427
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8194: LD_EXP 1
8198: PPUSH
8199: LD_STRING D3Kc1-JMM-1
8201: PPUSH
8202: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8206: LD_EXP 25
8210: PPUSH
8211: LD_STRING D3Kc1-Kurt-1
8213: PPUSH
8214: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8218: LD_EXP 1
8222: PPUSH
8223: LD_STRING D3Kc1-JMM-2
8225: PPUSH
8226: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8230: LD_EXP 25
8234: PPUSH
8235: LD_STRING D3Kc1-Kurt-2
8237: PPUSH
8238: CALL_OW 88
// askSiberite = 1 ;
8242: LD_ADDR_EXP 32
8246: PUSH
8247: LD_INT 1
8249: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8250: LD_ADDR_VAR 0 2
8254: PUSH
8255: LD_STRING Q2b
8257: PPUSH
8258: LD_INT 1
8260: PUSH
8261: LD_INT 2
8263: PUSH
8264: LD_INT 3
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: LIST
8271: PPUSH
8272: CALL_OW 98
8276: ST_TO_ADDR
// if dec2 = 1 then
8277: LD_VAR 0 3
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8319
// begin Say ( JMM , D4a-JMM-1 ) ;
8287: LD_EXP 1
8291: PPUSH
8292: LD_STRING D4a-JMM-1
8294: PPUSH
8295: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8299: LD_EXP 25
8303: PPUSH
8304: LD_STRING D4b-Kurt-1
8306: PPUSH
8307: CALL_OW 88
// warWithLegion = 1 ;
8311: LD_ADDR_EXP 30
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// end ; if dec2 = 2 then
8319: LD_VAR 0 3
8323: PUSH
8324: LD_INT 2
8326: EQUAL
8327: IFFALSE 8361
// begin Say ( JMM , D4b-JMM-1 ) ;
8329: LD_EXP 1
8333: PPUSH
8334: LD_STRING D4b-JMM-1
8336: PPUSH
8337: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8341: LD_EXP 25
8345: PPUSH
8346: LD_STRING D4b-Kurt-1
8348: PPUSH
8349: CALL_OW 88
// warWithLegion = 1 ;
8353: LD_ADDR_EXP 30
8357: PUSH
8358: LD_INT 1
8360: ST_TO_ADDR
// end ; if dec2 = 3 then
8361: LD_VAR 0 3
8365: PUSH
8366: LD_INT 3
8368: EQUAL
8369: IFFALSE 8427
// begin Say ( JMM , D4c-JMM-1 ) ;
8371: LD_EXP 1
8375: PPUSH
8376: LD_STRING D4c-JMM-1
8378: PPUSH
8379: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
8383: LD_EXP 25
8387: PPUSH
8388: LD_STRING D4c-Kurt-1
8390: PPUSH
8391: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D4c-JMM-2
8402: PPUSH
8403: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
8407: LD_EXP 25
8411: PPUSH
8412: LD_STRING D4c-Kurt-2
8414: PPUSH
8415: CALL_OW 88
// fakeInfo = 1 ;
8419: LD_ADDR_EXP 31
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8427: LD_VAR 0 2
8431: PUSH
8432: LD_INT 4
8434: EQUAL
8435: IFFALSE 9092
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8437: LD_EXP 1
8441: PPUSH
8442: LD_STRING D3Kd-JMM-1
8444: PPUSH
8445: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 200
8456: GREATEREQUAL
8457: PUSH
8458: LD_VAR 0 8
8462: PUSH
8463: LD_INT 200
8465: GREATEREQUAL
8466: AND
8467: IFFALSE 8502
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
8469: LD_ADDR_VAR 0 3
8473: PUSH
8474: LD_STRING Q2a
8476: PPUSH
8477: LD_INT 1
8479: PUSH
8480: LD_INT 2
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: LD_INT 4
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: PPUSH
8495: CALL_OW 98
8499: ST_TO_ADDR
8500: GO 8525
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
8502: LD_ADDR_VAR 0 3
8506: PUSH
8507: LD_STRING Q2a
8509: PPUSH
8510: LD_INT 1
8512: PUSH
8513: LD_INT 4
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 98
8524: ST_TO_ADDR
// if dec2 = 1 then
8525: LD_VAR 0 3
8529: PUSH
8530: LD_INT 1
8532: EQUAL
8533: IFFALSE 8567
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8535: LD_EXP 1
8539: PPUSH
8540: LD_STRING D5Ka-JMM-1
8542: PPUSH
8543: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
8547: LD_EXP 25
8551: PPUSH
8552: LD_STRING D5Ka-Kurt-1
8554: PPUSH
8555: CALL_OW 88
// warWithLegion = 1 ;
8559: LD_ADDR_EXP 30
8563: PUSH
8564: LD_INT 1
8566: ST_TO_ADDR
// end ; if dec2 = 2 then
8567: LD_VAR 0 3
8571: PUSH
8572: LD_INT 2
8574: EQUAL
8575: IFFALSE 8601
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8577: LD_EXP 1
8581: PPUSH
8582: LD_STRING D3Kb-JMM-1
8584: PPUSH
8585: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8589: LD_EXP 25
8593: PPUSH
8594: LD_STRING D3Kb-Kurt-1
8596: PPUSH
8597: CALL_OW 88
// end ; if dec2 = 3 then
8601: LD_VAR 0 3
8605: PUSH
8606: LD_INT 3
8608: EQUAL
8609: IFFALSE 8839
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8611: LD_EXP 1
8615: PPUSH
8616: LD_STRING D3Ke-JMM-1
8618: PPUSH
8619: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
8623: LD_EXP 25
8627: PPUSH
8628: LD_STRING D3Ke-Kurt-1
8630: PPUSH
8631: CALL_OW 88
// PrepareLegionForPlayer ;
8635: CALL 4370 0 0
// for i in tmp do
8639: LD_ADDR_VAR 0 1
8643: PUSH
8644: LD_VAR 0 4
8648: PUSH
8649: FOR_IN
8650: IFFALSE 8737
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 1 ) ;
8652: LD_ADDR_VAR 0 5
8656: PUSH
8657: LD_VAR 0 4
8661: PPUSH
8662: CALL_OW 274
8666: PPUSH
8667: LD_INT 1
8669: PPUSH
8670: CALL_OW 275
8674: ST_TO_ADDR
// if tmp2 >= 200 then
8675: LD_VAR 0 5
8679: PUSH
8680: LD_INT 200
8682: GREATEREQUAL
8683: IFFALSE 8715
// begin SetResourceType ( GetBase ( tmp ) , 1 , tmp2 - 200 ) ;
8685: LD_VAR 0 4
8689: PPUSH
8690: CALL_OW 274
8694: PPUSH
8695: LD_INT 1
8697: PPUSH
8698: LD_VAR 0 5
8702: PUSH
8703: LD_INT 200
8705: MINUS
8706: PPUSH
8707: CALL_OW 277
// break ;
8711: GO 8737
// end else
8713: GO 8735
// begin SetResourceType ( GetBase ( tmp ) , 1 , 0 ) ;
8715: LD_VAR 0 4
8719: PPUSH
8720: CALL_OW 274
8724: PPUSH
8725: LD_INT 1
8727: PPUSH
8728: LD_INT 0
8730: PPUSH
8731: CALL_OW 277
// end ; end ;
8735: GO 8649
8737: POP
8738: POP
// for i in tmp do
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_VAR 0 4
8748: PUSH
8749: FOR_IN
8750: IFFALSE 8837
// begin tmp2 = GetResourceType ( GetBase ( tmp ) , 3 ) ;
8752: LD_ADDR_VAR 0 5
8756: PUSH
8757: LD_VAR 0 4
8761: PPUSH
8762: CALL_OW 274
8766: PPUSH
8767: LD_INT 3
8769: PPUSH
8770: CALL_OW 275
8774: ST_TO_ADDR
// if tmp2 >= 200 then
8775: LD_VAR 0 5
8779: PUSH
8780: LD_INT 200
8782: GREATEREQUAL
8783: IFFALSE 8815
// begin SetResourceType ( GetBase ( tmp ) , 3 , tmp2 - 200 ) ;
8785: LD_VAR 0 4
8789: PPUSH
8790: CALL_OW 274
8794: PPUSH
8795: LD_INT 3
8797: PPUSH
8798: LD_VAR 0 5
8802: PUSH
8803: LD_INT 200
8805: MINUS
8806: PPUSH
8807: CALL_OW 277
// break ;
8811: GO 8837
// end else
8813: GO 8835
// begin SetResourceType ( GetBase ( tmp ) , 3 , 0 ) ;
8815: LD_VAR 0 4
8819: PPUSH
8820: CALL_OW 274
8824: PPUSH
8825: LD_INT 3
8827: PPUSH
8828: LD_INT 0
8830: PPUSH
8831: CALL_OW 277
// end ; end ;
8835: GO 8749
8837: POP
8838: POP
// end ; if dec2 = 4 then
8839: LD_VAR 0 3
8843: PUSH
8844: LD_INT 4
8846: EQUAL
8847: IFFALSE 9092
// begin if dec1 = 3 then
8849: LD_VAR 0 2
8853: PUSH
8854: LD_INT 3
8856: EQUAL
8857: IFFALSE 9092
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8859: LD_EXP 1
8863: PPUSH
8864: LD_STRING D3Kc1-JMM-1
8866: PPUSH
8867: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8871: LD_EXP 25
8875: PPUSH
8876: LD_STRING D3Kc1-Kurt-1
8878: PPUSH
8879: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8883: LD_EXP 1
8887: PPUSH
8888: LD_STRING D3Kc1-JMM-2
8890: PPUSH
8891: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8895: LD_EXP 25
8899: PPUSH
8900: LD_STRING D3Kc1-Kurt-2
8902: PPUSH
8903: CALL_OW 88
// askSiberite = 1 ;
8907: LD_ADDR_EXP 32
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8915: LD_ADDR_VAR 0 2
8919: PUSH
8920: LD_STRING Q2b
8922: PPUSH
8923: LD_INT 1
8925: PUSH
8926: LD_INT 2
8928: PUSH
8929: LD_INT 3
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: PPUSH
8937: CALL_OW 98
8941: ST_TO_ADDR
// if dec2 = 1 then
8942: LD_VAR 0 3
8946: PUSH
8947: LD_INT 1
8949: EQUAL
8950: IFFALSE 8984
// begin Say ( JMM , D4a-JMM-1 ) ;
8952: LD_EXP 1
8956: PPUSH
8957: LD_STRING D4a-JMM-1
8959: PPUSH
8960: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8964: LD_EXP 25
8968: PPUSH
8969: LD_STRING D4b-Kurt-1
8971: PPUSH
8972: CALL_OW 88
// warWithLegion = 1 ;
8976: LD_ADDR_EXP 30
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// end ; if dec2 = 2 then
8984: LD_VAR 0 3
8988: PUSH
8989: LD_INT 2
8991: EQUAL
8992: IFFALSE 9026
// begin Say ( JMM , D4b-JMM-1 ) ;
8994: LD_EXP 1
8998: PPUSH
8999: LD_STRING D4b-JMM-1
9001: PPUSH
9002: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9006: LD_EXP 25
9010: PPUSH
9011: LD_STRING D4b-Kurt-1
9013: PPUSH
9014: CALL_OW 88
// warWithLegion = 1 ;
9018: LD_ADDR_EXP 30
9022: PUSH
9023: LD_INT 1
9025: ST_TO_ADDR
// end ; if dec2 = 3 then
9026: LD_VAR 0 3
9030: PUSH
9031: LD_INT 3
9033: EQUAL
9034: IFFALSE 9092
// begin Say ( JMM , D4c-JMM-1 ) ;
9036: LD_EXP 1
9040: PPUSH
9041: LD_STRING D4c-JMM-1
9043: PPUSH
9044: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9048: LD_EXP 25
9052: PPUSH
9053: LD_STRING D4c-Kurt-1
9055: PPUSH
9056: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9060: LD_EXP 1
9064: PPUSH
9065: LD_STRING D4c-JMM-2
9067: PPUSH
9068: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9072: LD_EXP 25
9076: PPUSH
9077: LD_STRING D4c-Kurt-2
9079: PPUSH
9080: CALL_OW 88
// fakeInfo = 1 ;
9084: LD_ADDR_EXP 31
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9092: CALL_OW 7
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9096: LD_EXP 25
9100: PPUSH
9101: LD_EXP 26
9105: PPUSH
9106: CALL_OW 120
// wait ( 0 0$1 ) ;
9110: LD_INT 35
9112: PPUSH
9113: CALL_OW 67
// ComMoveXY ( KurtVeh , 157 , 188 ) ;
9117: LD_EXP 26
9121: PPUSH
9122: LD_INT 157
9124: PPUSH
9125: LD_INT 188
9127: PPUSH
9128: CALL_OW 111
// wait ( 0 0$6 ) ;
9132: LD_INT 210
9134: PPUSH
9135: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9139: LD_EXP 25
9143: PPUSH
9144: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9148: LD_EXP 26
9152: PPUSH
9153: CALL_OW 64
// end ; end ;
9157: PPOPN 8
9159: END
// every 0 0$10 trigger warWithLegion = 1 do
9160: LD_EXP 30
9164: PUSH
9165: LD_INT 1
9167: EQUAL
9168: IFFALSE 9177
9170: GO 9172
9172: DISABLE
// PrepareAttackLegion ;
9173: CALL 4575 0 0
9177: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 3 ) do
9178: LD_EXP 15
9182: PPUSH
9183: CALL_OW 305
9187: PUSH
9188: LD_EXP 15
9192: PPUSH
9193: LD_INT 3
9195: PPUSH
9196: CALL_OW 289
9200: NOT
9201: AND
9202: IFFALSE 9219
9204: GO 9206
9206: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9207: LD_EXP 15
9211: PPUSH
9212: LD_INT 4
9214: PPUSH
9215: CALL_OW 235
9219: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 3 ) do
9220: LD_EXP 16
9224: PPUSH
9225: CALL_OW 305
9229: PUSH
9230: LD_EXP 16
9234: PPUSH
9235: LD_INT 1
9237: PPUSH
9238: CALL_OW 289
9242: NOT
9243: AND
9244: PUSH
9245: LD_EXP 16
9249: PPUSH
9250: LD_INT 3
9252: PPUSH
9253: CALL_OW 289
9257: NOT
9258: AND
9259: IFFALSE 9276
9261: GO 9263
9263: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9264: LD_EXP 16
9268: PPUSH
9269: LD_INT 4
9271: PPUSH
9272: CALL_OW 235
9276: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo3 , 1 ) do
9277: LD_EXP 16
9281: PPUSH
9282: CALL_OW 305
9286: PUSH
9287: LD_EXP 17
9291: PPUSH
9292: LD_INT 1
9294: PPUSH
9295: CALL_OW 289
9299: NOT
9300: AND
9301: IFFALSE 9318
9303: GO 9305
9305: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9306: LD_EXP 17
9310: PPUSH
9311: LD_INT 4
9313: PPUSH
9314: CALL_OW 235
9318: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo4 , 2 ) do
9319: LD_EXP 17
9323: PPUSH
9324: CALL_OW 305
9328: PUSH
9329: LD_EXP 18
9333: PPUSH
9334: LD_INT 2
9336: PPUSH
9337: CALL_OW 289
9341: NOT
9342: AND
9343: IFFALSE 9360
9345: GO 9347
9347: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9348: LD_EXP 18
9352: PPUSH
9353: LD_INT 4
9355: PPUSH
9356: CALL_OW 235
9360: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) do
9361: LD_EXP 18
9365: PPUSH
9366: CALL_OW 305
9370: PUSH
9371: LD_EXP 19
9375: PPUSH
9376: LD_INT 1
9378: PPUSH
9379: CALL_OW 289
9383: NOT
9384: AND
9385: PUSH
9386: LD_EXP 19
9390: PPUSH
9391: LD_INT 2
9393: PPUSH
9394: CALL_OW 289
9398: NOT
9399: AND
9400: IFFALSE 9417
9402: GO 9404
9404: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9405: LD_EXP 19
9409: PPUSH
9410: LD_INT 4
9412: PPUSH
9413: CALL_OW 235
9417: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo6 , 1 ) do
9418: LD_EXP 19
9422: PPUSH
9423: CALL_OW 305
9427: PUSH
9428: LD_EXP 20
9432: PPUSH
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 289
9440: NOT
9441: AND
9442: IFFALSE 9459
9444: GO 9446
9446: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9447: LD_EXP 20
9451: PPUSH
9452: LD_INT 4
9454: PPUSH
9455: CALL_OW 235
9459: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 2 ) do
9460: LD_EXP 20
9464: PPUSH
9465: CALL_OW 305
9469: PUSH
9470: LD_EXP 20
9474: PPUSH
9475: LD_INT 2
9477: PPUSH
9478: CALL_OW 289
9482: NOT
9483: AND
9484: IFFALSE 9501
9486: GO 9488
9488: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9489: LD_EXP 21
9493: PPUSH
9494: LD_INT 4
9496: PPUSH
9497: CALL_OW 235
9501: END
// every 0 0$1 do var i ;
9502: GO 9504
9504: DISABLE
9505: LD_INT 0
9507: PPUSH
// begin enable ;
9508: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_INT 22
9516: PUSH
9517: LD_INT 4
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PPUSH
9524: CALL_OW 69
9528: PUSH
9529: FOR_IN
9530: IFFALSE 9569
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9532: LD_VAR 0 1
9536: PPUSH
9537: LD_INT 4
9539: PPUSH
9540: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9544: LD_VAR 0 1
9548: PPUSH
9549: LD_INT 4
9551: PPUSH
9552: CALL_OW 308
9556: IFFALSE 9567
// RemoveUnit ( i ) ;
9558: LD_VAR 0 1
9562: PPUSH
9563: CALL_OW 64
// end ;
9567: GO 9529
9569: POP
9570: POP
// end ;
9571: PPOPN 1
9573: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9574: LD_EXP 28
9578: PUSH
9579: LD_INT 1
9581: EQUAL
9582: IFFALSE 9957
9584: GO 9586
9586: DISABLE
9587: LD_INT 0
9589: PPUSH
9590: PPUSH
9591: PPUSH
// begin enable ;
9592: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9593: LD_ADDR_VAR 0 2
9597: PUSH
9598: LD_INT 12
9600: PPUSH
9601: LD_INT 22
9603: PUSH
9604: LD_INT 3
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 21
9613: PUSH
9614: LD_INT 2
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PPUSH
9625: CALL_OW 70
9629: ST_TO_ADDR
// for i in enemyVehs do
9630: LD_ADDR_VAR 0 1
9634: PUSH
9635: LD_VAR 0 2
9639: PUSH
9640: FOR_IN
9641: IFFALSE 9955
// begin if See ( 1 , i ) then
9643: LD_INT 1
9645: PPUSH
9646: LD_VAR 0 1
9650: PPUSH
9651: CALL_OW 292
9655: IFFALSE 9953
// begin disable ;
9657: DISABLE
// DialogueOn ;
9658: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9662: LD_VAR 0 1
9666: PPUSH
9667: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9671: LD_INT 22
9673: PUSH
9674: LD_INT 1
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 26
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_EXP 1
9699: PUSH
9700: EMPTY
9701: LIST
9702: DIFF
9703: PPUSH
9704: CALL_OW 69
9708: PPUSH
9709: LD_STRING DT1-Sol1-1
9711: PPUSH
9712: LD_STRING DT1-FSol1-1
9714: PPUSH
9715: CALL 11323 0 3
// dec = ShowQuery2 ;
9719: LD_ADDR_VAR 0 3
9723: PUSH
9724: CALL 11933 0 0
9728: ST_TO_ADDR
// if dec = 1 then
9729: LD_VAR 0 3
9733: PUSH
9734: LD_INT 1
9736: EQUAL
9737: IFFALSE 9843
// begin Say ( JMM , D2-JMM-1 ) ;
9739: LD_EXP 1
9743: PPUSH
9744: LD_STRING D2-JMM-1
9746: PPUSH
9747: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9751: LD_EXP 22
9755: PPUSH
9756: LD_STRING D2-Pow-1
9758: PPUSH
9759: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9763: LD_EXP 1
9767: PPUSH
9768: LD_STRING D2a-JMM-1
9770: PPUSH
9771: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9775: LD_EXP 22
9779: PPUSH
9780: LD_STRING D2a-Pow-1
9782: PPUSH
9783: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9787: LD_EXP 1
9791: PPUSH
9792: LD_STRING D2a-JMM-2
9794: PPUSH
9795: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9799: LD_EXP 22
9803: PPUSH
9804: LD_STRING D2a-Pow-2
9806: PPUSH
9807: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9811: LD_EXP 1
9815: PPUSH
9816: LD_STRING D2a-JMM-3
9818: PPUSH
9819: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9823: LD_EXP 22
9827: PPUSH
9828: LD_STRING D2a-Pow-3
9830: PPUSH
9831: CALL_OW 94
// secondPass = 2 ;
9835: LD_ADDR_EXP 28
9839: PUSH
9840: LD_INT 2
9842: ST_TO_ADDR
// end ; if dec = 2 then
9843: LD_VAR 0 3
9847: PUSH
9848: LD_INT 2
9850: EQUAL
9851: IFFALSE 9945
// begin Say ( JMM , D2-JMM-1 ) ;
9853: LD_EXP 1
9857: PPUSH
9858: LD_STRING D2-JMM-1
9860: PPUSH
9861: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9865: LD_EXP 22
9869: PPUSH
9870: LD_STRING D2-Pow-1
9872: PPUSH
9873: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9877: LD_EXP 1
9881: PPUSH
9882: LD_STRING D2b-JMM-1
9884: PPUSH
9885: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9889: LD_EXP 22
9893: PPUSH
9894: LD_STRING D2b-Pow-1
9896: PPUSH
9897: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9901: LD_EXP 1
9905: PPUSH
9906: LD_STRING D2c-JMM-1
9908: PPUSH
9909: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9913: LD_EXP 22
9917: PPUSH
9918: LD_STRING D2c-Pow-1
9920: PPUSH
9921: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9925: LD_EXP 1
9929: PPUSH
9930: LD_STRING D2c-JMM-2
9932: PPUSH
9933: CALL_OW 88
// secondPass = 2 ;
9937: LD_ADDR_EXP 28
9941: PUSH
9942: LD_INT 2
9944: ST_TO_ADDR
// end ; DialogueOff ;
9945: CALL_OW 7
// exit ;
9949: POP
9950: POP
9951: GO 9957
// end ; end ;
9953: GO 9640
9955: POP
9956: POP
// end ;
9957: PPOPN 3
9959: END
// every 0 0$1 do var i , vehicles ;
9960: GO 9962
9962: DISABLE
9963: LD_INT 0
9965: PPUSH
9966: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
9967: LD_ADDR_VAR 0 2
9971: PUSH
9972: LD_INT 11
9974: PPUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 70
9989: ST_TO_ADDR
// enable ;
9990: ENABLE
// for i in vehicles do
9991: LD_ADDR_VAR 0 1
9995: PUSH
9996: LD_VAR 0 2
10000: PUSH
10001: FOR_IN
10002: IFFALSE 10103
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
10004: LD_INT 1
10006: PPUSH
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 292
10016: PUSH
10017: LD_EXP 29
10021: PUSH
10022: LD_INT 1
10024: EQUAL
10025: AND
10026: IFFALSE 10101
// begin disable ;
10028: DISABLE
// DialogueOn ;
10029: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10033: LD_INT 22
10035: PUSH
10036: LD_INT 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 21
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 69
10061: PUSH
10062: LD_EXP 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: DIFF
10070: PPUSH
10071: LD_STRING DT1-Sol1-1
10073: PPUSH
10074: LD_STRING DT1-FSol1-1
10076: PPUSH
10077: CALL 11323 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10081: LD_EXP 1
10085: PPUSH
10086: LD_STRING DT1-JMM-1
10088: PPUSH
10089: CALL_OW 88
// DialogueOff ;
10093: CALL_OW 7
// exit ;
10097: POP
10098: POP
10099: GO 10105
// end ; end ;
10101: GO 10001
10103: POP
10104: POP
// end ;
10105: PPOPN 2
10107: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10108: LD_EXP 29
10112: PUSH
10113: LD_INT 1
10115: EQUAL
10116: PUSH
10117: LD_INT 11
10119: PPUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 24
10132: PUSH
10133: LD_INT 251
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 2
10142: PUSH
10143: LD_INT 21
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 21
10155: PUSH
10156: LD_INT 1
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: PPUSH
10173: CALL_OW 70
10177: PUSH
10178: LD_INT 0
10180: EQUAL
10181: AND
10182: IFFALSE 10275
10184: GO 10186
10186: DISABLE
// begin vehicleTeleported = 3 ;
10187: LD_ADDR_EXP 29
10191: PUSH
10192: LD_INT 3
10194: ST_TO_ADDR
// DialogueOn ;
10195: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10199: LD_EXP 1
10203: PPUSH
10204: LD_STRING DT1a-JMM-1
10206: PPUSH
10207: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10211: LD_INT 22
10213: PUSH
10214: LD_INT 1
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 21
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PPUSH
10235: CALL_OW 69
10239: PUSH
10240: LD_EXP 1
10244: PUSH
10245: EMPTY
10246: LIST
10247: DIFF
10248: PPUSH
10249: LD_STRING DT1a-Sol1-1
10251: PPUSH
10252: LD_STRING DT1a-FSol1-1
10254: PPUSH
10255: CALL 11323 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10259: LD_EXP 1
10263: PPUSH
10264: LD_STRING DT1a-JMM-2
10266: PPUSH
10267: CALL_OW 88
// DialogueOff ;
10271: CALL_OW 7
// end ;
10275: END
// every 0 0$1 do var i , vehicles ;
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
10282: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10283: LD_ADDR_VAR 0 2
10287: PUSH
10288: LD_INT 11
10290: PPUSH
10291: LD_INT 22
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PPUSH
10301: CALL_OW 70
10305: ST_TO_ADDR
// enable ;
10306: ENABLE
// for i in vehicles do
10307: LD_ADDR_VAR 0 1
10311: PUSH
10312: LD_VAR 0 2
10316: PUSH
10317: FOR_IN
10318: IFFALSE 10407
// begin if See ( 1 , i ) and vehicleTeleported = 2 then
10320: LD_INT 1
10322: PPUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: CALL_OW 292
10332: PUSH
10333: LD_EXP 29
10337: PUSH
10338: LD_INT 2
10340: EQUAL
10341: AND
10342: IFFALSE 10405
// begin disable ;
10344: DISABLE
// DialogueOn ;
10345: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10349: LD_INT 22
10351: PUSH
10352: LD_INT 1
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 21
10361: PUSH
10362: LD_INT 1
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PPUSH
10373: CALL_OW 69
10377: PUSH
10378: LD_EXP 1
10382: PUSH
10383: EMPTY
10384: LIST
10385: DIFF
10386: PPUSH
10387: LD_STRING DT2-Sol1-1
10389: PPUSH
10390: LD_STRING DT2-FSol1-1
10392: PPUSH
10393: CALL 11323 0 3
// DialogueOff ;
10397: CALL_OW 7
// exit ;
10401: POP
10402: POP
10403: GO 10409
// end ; end ;
10405: GO 10317
10407: POP
10408: POP
// end ;
10409: PPOPN 2
10411: END
// every 0 0$10 trigger vehicleTeleported = 2 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10412: LD_EXP 29
10416: PUSH
10417: LD_INT 2
10419: EQUAL
10420: PUSH
10421: LD_INT 11
10423: PPUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 3
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 24
10436: PUSH
10437: LD_INT 251
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: LD_INT 21
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 21
10459: PUSH
10460: LD_INT 1
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: PPUSH
10477: CALL_OW 70
10481: PUSH
10482: LD_INT 0
10484: EQUAL
10485: AND
10486: IFFALSE 10579
10488: GO 10490
10490: DISABLE
// begin vehicleTeleported = 4 ;
10491: LD_ADDR_EXP 29
10495: PUSH
10496: LD_INT 4
10498: ST_TO_ADDR
// DialogueOn ;
10499: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10503: LD_EXP 1
10507: PPUSH
10508: LD_STRING DT2a-JMM-1
10510: PPUSH
10511: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
10515: LD_INT 22
10517: PUSH
10518: LD_INT 1
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PPUSH
10539: CALL_OW 69
10543: PUSH
10544: LD_EXP 1
10548: PUSH
10549: EMPTY
10550: LIST
10551: DIFF
10552: PPUSH
10553: LD_STRING DT2a-Sol1-1
10555: PPUSH
10556: LD_STRING DT2a-FSol1-1
10558: PPUSH
10559: CALL 11323 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
10563: LD_EXP 3
10567: PPUSH
10568: LD_STRING DT2a-Don-1
10570: PPUSH
10571: CALL_OW 88
// DialogueOff ;
10575: CALL_OW 7
// end ;
10579: END
// every 0 0$1 trigger SeeXY ( 1 , 36 , 55 ) do
10580: LD_INT 1
10582: PPUSH
10583: LD_INT 36
10585: PPUSH
10586: LD_INT 55
10588: PPUSH
10589: CALL_OW 293
10593: IFFALSE 10697
10595: GO 10597
10597: DISABLE
// begin DialogueOn ;
10598: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10602: LD_INT 36
10604: PPUSH
10605: LD_INT 55
10607: PPUSH
10608: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D5-JMM-1 ,  ) ;
10612: LD_INT 22
10614: PUSH
10615: LD_INT 1
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 21
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 26
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 69
10651: PUSH
10652: LD_EXP 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: DIFF
10660: PPUSH
10661: LD_STRING D5-JMM-1
10663: PPUSH
10664: LD_STRING 
10666: PPUSH
10667: CALL 11323 0 3
// if warWithLegion = 1 then
10671: LD_EXP 30
10675: PUSH
10676: LD_INT 1
10678: EQUAL
10679: IFFALSE 10693
// Say ( Donaldson , D5-Don-1 ) ;
10681: LD_EXP 3
10685: PPUSH
10686: LD_STRING D5-Don-1
10688: PPUSH
10689: CALL_OW 88
// DialogueOff ;
10693: CALL_OW 7
// end ;
10697: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
10698: LD_INT 1
10700: PPUSH
10701: LD_INT 10
10703: PPUSH
10704: CALL_OW 292
10708: IFFALSE 10788
10710: GO 10712
10712: DISABLE
// begin DialogueOn ;
10713: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
10717: LD_INT 10
10719: PPUSH
10720: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10724: LD_INT 22
10726: PUSH
10727: LD_INT 1
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 21
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PPUSH
10748: CALL_OW 69
10752: PUSH
10753: LD_EXP 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: DIFF
10761: PPUSH
10762: LD_STRING DT3-Sol1-1
10764: PPUSH
10765: LD_STRING DT3-FSol1-1
10767: PPUSH
10768: CALL 11323 0 3
// Say ( JMM , DT3-JMM-1 ) ;
10772: LD_EXP 1
10776: PPUSH
10777: LD_STRING DT3-JMM-1
10779: PPUSH
10780: CALL_OW 88
// DialogueOff ;
10784: CALL_OW 7
// end ;
10788: END
// every 0 0$1 trigger IsDying ( ruheadlab ) do var i , j , vehs ;
10789: LD_INT 3
10791: PPUSH
10792: CALL_OW 303
10796: IFFALSE 11108
10798: GO 10800
10800: DISABLE
10801: LD_INT 0
10803: PPUSH
10804: PPUSH
10805: PPUSH
// begin ruAI = 0 ;
10806: LD_ADDR_EXP 41
10810: PUSH
10811: LD_INT 0
10813: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_INT 10
10821: PPUSH
10822: LD_INT 22
10824: PUSH
10825: LD_INT 3
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 58
10844: PUSH
10845: EMPTY
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 70
10857: ST_TO_ADDR
// DialogueOn ;
10858: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
10862: LD_EXP 1
10866: PPUSH
10867: LD_STRING D6-JMM-1
10869: PPUSH
10870: CALL_OW 88
// DialogueOff ;
10874: CALL_OW 7
// for i := 1 to RuScientists do
10878: LD_ADDR_VAR 0 1
10882: PUSH
10883: DOUBLE
10884: LD_INT 1
10886: DEC
10887: ST_TO_ADDR
10888: LD_EXP 34
10892: PUSH
10893: FOR_TO
10894: IFFALSE 11106
// begin for j := 1 to vehs do
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: DOUBLE
10902: LD_INT 1
10904: DEC
10905: ST_TO_ADDR
10906: LD_VAR 0 3
10910: PUSH
10911: FOR_TO
10912: IFFALSE 11102
// begin ComEnterUnit ( RuScientists [ i ] , vehs [ j ] ) ;
10914: LD_EXP 34
10918: PUSH
10919: LD_VAR 0 1
10923: ARRAY
10924: PPUSH
10925: LD_VAR 0 3
10929: PUSH
10930: LD_VAR 0 2
10934: ARRAY
10935: PPUSH
10936: CALL_OW 120
// if IsOk ( rutp ) then
10940: LD_INT 137
10942: PPUSH
10943: CALL_OW 302
10947: IFFALSE 11048
// begin if i mod 2 then
10949: LD_VAR 0 1
10953: PUSH
10954: LD_INT 2
10956: MOD
10957: IFFALSE 10994
// AddComEnterUnit ( [ RuScientists [ i ] , vehs [ j ] ] , rutp ) else
10959: LD_EXP 34
10963: PUSH
10964: LD_VAR 0 1
10968: ARRAY
10969: PUSH
10970: LD_VAR 0 3
10974: PUSH
10975: LD_VAR 0 2
10979: ARRAY
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PPUSH
10985: LD_INT 137
10987: PPUSH
10988: CALL_OW 180
10992: GO 11046
// AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
10994: LD_EXP 34
10998: PUSH
10999: LD_VAR 0 1
11003: ARRAY
11004: PUSH
11005: LD_VAR 0 3
11009: PUSH
11010: LD_VAR 0 2
11014: ARRAY
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PPUSH
11020: LD_INT 13
11022: PUSH
11023: LD_INT 14
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 1
11032: PPUSH
11033: LD_INT 2
11035: PPUSH
11036: CALL_OW 12
11040: ARRAY
11041: PPUSH
11042: CALL_OW 173
// end else
11046: GO 11100
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11048: LD_EXP 34
11052: PUSH
11053: LD_VAR 0 1
11057: ARRAY
11058: PUSH
11059: LD_VAR 0 3
11063: PUSH
11064: LD_VAR 0 2
11068: ARRAY
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PPUSH
11074: LD_INT 13
11076: PUSH
11077: LD_INT 14
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 1
11086: PPUSH
11087: LD_INT 2
11089: PPUSH
11090: CALL_OW 12
11094: ARRAY
11095: PPUSH
11096: CALL_OW 173
// end ; end ;
11100: GO 10911
11102: POP
11103: POP
// end ;
11104: GO 10893
11106: POP
11107: POP
// end ;
11108: PPOPN 3
11110: END
// every 0 0$1 trigger ruAI = 0 do var i ;
11111: LD_EXP 41
11115: PUSH
11116: LD_INT 0
11118: EQUAL
11119: IFFALSE 11212
11121: GO 11123
11123: DISABLE
11124: LD_INT 0
11126: PPUSH
// begin enable ;
11127: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
11128: LD_ADDR_VAR 0 1
11132: PUSH
11133: LD_INT 13
11135: PPUSH
11136: LD_INT 22
11138: PUSH
11139: LD_INT 3
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: PPUSH
11149: CALL_OW 70
11153: PUSH
11154: FOR_IN
11155: IFFALSE 11168
// RemoveUnit ( i ) ;
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 64
11166: GO 11154
11168: POP
11169: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
11170: LD_ADDR_VAR 0 1
11174: PUSH
11175: LD_INT 14
11177: PPUSH
11178: LD_INT 22
11180: PUSH
11181: LD_INT 3
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: PPUSH
11191: CALL_OW 70
11195: PUSH
11196: FOR_IN
11197: IFFALSE 11210
// RemoveUnit ( i ) ;
11199: LD_VAR 0 1
11203: PPUSH
11204: CALL_OW 64
11208: GO 11196
11210: POP
11211: POP
// end ; end_of_file
11212: PPOPN 1
11214: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
11215: LD_INT 0
11217: PPUSH
11218: PPUSH
// if exist_mode then
11219: LD_VAR 0 2
11223: IFFALSE 11242
// unit := CreateCharacter ( ident ) else
11225: LD_ADDR_VAR 0 4
11229: PUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 34
11239: ST_TO_ADDR
11240: GO 11257
// unit := NewCharacter ( ident ) ;
11242: LD_ADDR_VAR 0 4
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 25
11256: ST_TO_ADDR
// result := unit ;
11257: LD_ADDR_VAR 0 3
11261: PUSH
11262: LD_VAR 0 4
11266: ST_TO_ADDR
// end ;
11267: LD_VAR 0 3
11271: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11272: LD_INT 0
11274: PPUSH
11275: PPUSH
// for i in charactersList do
11276: LD_ADDR_VAR 0 4
11280: PUSH
11281: LD_VAR 0 1
11285: PUSH
11286: FOR_IN
11287: IFFALSE 11316
// begin if IsOk ( i ) then
11289: LD_VAR 0 4
11293: PPUSH
11294: CALL_OW 302
11298: IFFALSE 11314
// SaveCharacters ( i , ident ) ;
11300: LD_VAR 0 4
11304: PPUSH
11305: LD_VAR 0 2
11309: PPUSH
11310: CALL_OW 38
// end ;
11314: GO 11286
11316: POP
11317: POP
// end ;
11318: LD_VAR 0 3
11322: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
11327: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
11328: LD_ADDR_VAR 0 1
11332: PUSH
11333: LD_VAR 0 1
11337: PUSH
11338: LD_EXP 1
11342: PUSH
11343: LD_EXP 7
11347: PUSH
11348: LD_EXP 3
11352: PUSH
11353: LD_EXP 4
11357: PUSH
11358: LD_EXP 5
11362: PUSH
11363: LD_EXP 2
11367: PUSH
11368: LD_EXP 12
11372: PUSH
11373: LD_EXP 13
11377: PUSH
11378: LD_EXP 9
11382: PUSH
11383: LD_EXP 11
11387: PUSH
11388: LD_EXP 6
11392: PUSH
11393: LD_EXP 8
11397: PUSH
11398: LD_EXP 10
11402: PUSH
11403: LD_EXP 22
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: DIFF
11424: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
11425: LD_ADDR_VAR 0 6
11429: PUSH
11430: LD_INT 1
11432: PPUSH
11433: LD_VAR 0 1
11437: PPUSH
11438: CALL_OW 12
11442: ST_TO_ADDR
// for i = 1 to characters do
11443: LD_ADDR_VAR 0 5
11447: PUSH
11448: DOUBLE
11449: LD_INT 1
11451: DEC
11452: ST_TO_ADDR
11453: LD_VAR 0 1
11457: PUSH
11458: FOR_TO
11459: IFFALSE 11569
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11461: LD_VAR 0 5
11465: PUSH
11466: LD_VAR 0 6
11470: EQUAL
11471: PUSH
11472: LD_VAR 0 1
11476: PUSH
11477: LD_VAR 0 5
11481: ARRAY
11482: PPUSH
11483: CALL_OW 258
11487: PUSH
11488: LD_INT 1
11490: EQUAL
11491: AND
11492: IFFALSE 11514
// Say ( characters [ i ] , dialogMID ) ;
11494: LD_VAR 0 1
11498: PUSH
11499: LD_VAR 0 5
11503: ARRAY
11504: PPUSH
11505: LD_VAR 0 2
11509: PPUSH
11510: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11514: LD_VAR 0 5
11518: PUSH
11519: LD_VAR 0 6
11523: EQUAL
11524: PUSH
11525: LD_VAR 0 1
11529: PUSH
11530: LD_VAR 0 5
11534: ARRAY
11535: PPUSH
11536: CALL_OW 258
11540: PUSH
11541: LD_INT 2
11543: EQUAL
11544: AND
11545: IFFALSE 11567
// Say ( characters [ i ] , dialogFID ) ;
11547: LD_VAR 0 1
11551: PUSH
11552: LD_VAR 0 5
11556: ARRAY
11557: PPUSH
11558: LD_VAR 0 3
11562: PPUSH
11563: CALL_OW 88
// end ;
11567: GO 11458
11569: POP
11570: POP
// end ;
11571: LD_VAR 0 4
11575: RET
// export function PrepareDifficulty ; var tmp ; begin
11576: LD_INT 0
11578: PPUSH
11579: PPUSH
// if Difficulty = 1 then
11580: LD_OWVAR 67
11584: PUSH
11585: LD_INT 1
11587: EQUAL
11588: IFFALSE 11606
// begin RuSolMinLevel = 8 ;
11590: LD_ADDR_EXP 36
11594: PUSH
11595: LD_INT 8
11597: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
11598: LD_ADDR_EXP 37
11602: PUSH
11603: LD_INT 10
11605: ST_TO_ADDR
// end ; if Difficulty = 2 then
11606: LD_OWVAR 67
11610: PUSH
11611: LD_INT 2
11613: EQUAL
11614: IFFALSE 11708
// begin RuSolMinLevel = 9 ;
11616: LD_ADDR_EXP 36
11620: PUSH
11621: LD_INT 9
11623: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
11624: LD_ADDR_EXP 37
11628: PUSH
11629: LD_INT 10
11631: ST_TO_ADDR
// uc_nation = 3 ;
11632: LD_ADDR_OWVAR 21
11636: PUSH
11637: LD_INT 3
11639: ST_TO_ADDR
// uc_side = 3 ;
11640: LD_ADDR_OWVAR 20
11644: PUSH
11645: LD_INT 3
11647: ST_TO_ADDR
// bc_level = 10 ;
11648: LD_ADDR_OWVAR 43
11652: PUSH
11653: LD_INT 10
11655: ST_TO_ADDR
// bc_type = b_turret ;
11656: LD_ADDR_OWVAR 42
11660: PUSH
11661: LD_INT 33
11663: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
11664: LD_ADDR_VAR 0 2
11668: PUSH
11669: LD_INT 86
11671: PPUSH
11672: LD_INT 34
11674: PPUSH
11675: LD_INT 2
11677: PPUSH
11678: CALL_OW 47
11682: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
11683: LD_VAR 0 2
11687: PPUSH
11688: LD_INT 49
11690: PPUSH
11691: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
11695: LD_INT 64
11697: PPUSH
11698: LD_INT 3
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: CALL_OW 322
// end ; if Difficulty = 3 then
11708: LD_OWVAR 67
11712: PUSH
11713: LD_INT 3
11715: EQUAL
11716: IFFALSE 11854
// begin RuSolMinLevel = 10 ;
11718: LD_ADDR_EXP 36
11722: PUSH
11723: LD_INT 10
11725: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
11726: LD_ADDR_EXP 37
11730: PUSH
11731: LD_INT 10
11733: ST_TO_ADDR
// uc_nation = 3 ;
11734: LD_ADDR_OWVAR 21
11738: PUSH
11739: LD_INT 3
11741: ST_TO_ADDR
// uc_side = 3 ;
11742: LD_ADDR_OWVAR 20
11746: PUSH
11747: LD_INT 3
11749: ST_TO_ADDR
// bc_level = 10 ;
11750: LD_ADDR_OWVAR 43
11754: PUSH
11755: LD_INT 10
11757: ST_TO_ADDR
// bc_type = b_turret ;
11758: LD_ADDR_OWVAR 42
11762: PUSH
11763: LD_INT 33
11765: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
11766: LD_ADDR_VAR 0 2
11770: PUSH
11771: LD_INT 86
11773: PPUSH
11774: LD_INT 34
11776: PPUSH
11777: LD_INT 2
11779: PPUSH
11780: CALL_OW 47
11784: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
11785: LD_VAR 0 2
11789: PPUSH
11790: LD_INT 49
11792: PPUSH
11793: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
11797: LD_ADDR_VAR 0 2
11801: PUSH
11802: LD_INT 93
11804: PPUSH
11805: LD_INT 31
11807: PPUSH
11808: LD_INT 2
11810: PPUSH
11811: CALL_OW 47
11815: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
11816: LD_VAR 0 2
11820: PPUSH
11821: LD_INT 49
11823: PPUSH
11824: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
11828: LD_INT 64
11830: PPUSH
11831: LD_INT 3
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
11841: LD_INT 65
11843: PPUSH
11844: LD_INT 3
11846: PPUSH
11847: LD_INT 1
11849: PPUSH
11850: CALL_OW 322
// end ; end ;
11854: LD_VAR 0 1
11858: RET
// export function ShowQuery1 ; begin
11859: LD_INT 0
11861: PPUSH
// case query ( Q1 ) of 1 :
11862: LD_STRING Q1
11864: PPUSH
11865: CALL_OW 97
11869: PUSH
11870: LD_INT 1
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11889
11878: POP
// result = 1 ; 2 :
11879: LD_ADDR_VAR 0 1
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
11887: GO 11928
11889: LD_INT 2
11891: DOUBLE
11892: EQUAL
11893: IFTRUE 11897
11895: GO 11908
11897: POP
// result = 2 ; 3 :
11898: LD_ADDR_VAR 0 1
11902: PUSH
11903: LD_INT 2
11905: ST_TO_ADDR
11906: GO 11928
11908: LD_INT 3
11910: DOUBLE
11911: EQUAL
11912: IFTRUE 11916
11914: GO 11927
11916: POP
// result = 3 ; end ;
11917: LD_ADDR_VAR 0 1
11921: PUSH
11922: LD_INT 3
11924: ST_TO_ADDR
11925: GO 11928
11927: POP
// end ;
11928: LD_VAR 0 1
11932: RET
// export function ShowQuery2 ; begin
11933: LD_INT 0
11935: PPUSH
// case query ( Q1a ) of 1 :
11936: LD_STRING Q1a
11938: PPUSH
11939: CALL_OW 97
11943: PUSH
11944: LD_INT 1
11946: DOUBLE
11947: EQUAL
11948: IFTRUE 11952
11950: GO 11963
11952: POP
// result = 1 ; 2 :
11953: LD_ADDR_VAR 0 1
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
11961: GO 12002
11963: LD_INT 2
11965: DOUBLE
11966: EQUAL
11967: IFTRUE 11971
11969: GO 11982
11971: POP
// result = 2 ; 3 :
11972: LD_ADDR_VAR 0 1
11976: PUSH
11977: LD_INT 2
11979: ST_TO_ADDR
11980: GO 12002
11982: LD_INT 3
11984: DOUBLE
11985: EQUAL
11986: IFTRUE 11990
11988: GO 12001
11990: POP
// result = 3 ; end ;
11991: LD_ADDR_VAR 0 1
11995: PUSH
11996: LD_INT 3
11998: ST_TO_ADDR
11999: GO 12002
12001: POP
// end ;
12002: LD_VAR 0 1
12006: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12007: LD_INT 0
12009: PPUSH
12010: PPUSH
12011: PPUSH
12012: PPUSH
12013: PPUSH
// for i = 1 to count do
12014: LD_ADDR_VAR 0 8
12018: PUSH
12019: DOUBLE
12020: LD_INT 1
12022: DEC
12023: ST_TO_ADDR
12024: LD_VAR 0 6
12028: PUSH
12029: FOR_TO
12030: IFFALSE 12111
// begin uc_side = side ;
12032: LD_ADDR_OWVAR 20
12036: PUSH
12037: LD_VAR 0 1
12041: ST_TO_ADDR
// uc_nation = nation ;
12042: LD_ADDR_OWVAR 21
12046: PUSH
12047: LD_VAR 0 2
12051: ST_TO_ADDR
// hc_gallery =  ;
12052: LD_ADDR_OWVAR 33
12056: PUSH
12057: LD_STRING 
12059: ST_TO_ADDR
// hc_name =  ;
12060: LD_ADDR_OWVAR 26
12064: PUSH
12065: LD_STRING 
12067: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12068: LD_INT 0
12070: PPUSH
12071: LD_VAR 0 5
12075: PPUSH
12076: LD_VAR 0 4
12080: PPUSH
12081: CALL_OW 380
// un = CreateHuman ;
12085: LD_ADDR_VAR 0 10
12089: PUSH
12090: CALL_OW 44
12094: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12095: LD_VAR 0 10
12099: PPUSH
12100: LD_VAR 0 3
12104: PPUSH
12105: CALL_OW 52
// end ;
12109: GO 12029
12111: POP
12112: POP
// end ;
12113: LD_VAR 0 7
12117: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
12118: LD_INT 0
12120: PPUSH
12121: PPUSH
12122: PPUSH
12123: PPUSH
// for i = 1 to 72 do
12124: LD_ADDR_VAR 0 5
12128: PUSH
12129: DOUBLE
12130: LD_INT 1
12132: DEC
12133: ST_TO_ADDR
12134: LD_INT 72
12136: PUSH
12137: FOR_TO
12138: IFFALSE 12196
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
12140: LD_VAR 0 5
12144: PPUSH
12145: LD_VAR 0 1
12149: PPUSH
12150: CALL_OW 321
12154: PUSH
12155: LD_INT 1
12157: EQUAL
12158: PUSH
12159: LD_VAR 0 5
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: CALL_OW 482
12173: PUSH
12174: LD_INT 1
12176: EQUAL
12177: AND
12178: IFFALSE 12194
// AddComResearch ( lab , i ) ;
12180: LD_VAR 0 2
12184: PPUSH
12185: LD_VAR 0 5
12189: PPUSH
12190: CALL_OW 184
12194: GO 12137
12196: POP
12197: POP
// end ;
12198: LD_VAR 0 4
12202: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12203: LD_INT 0
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
12209: PPUSH
12210: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12211: LD_ADDR_VAR 0 8
12215: PUSH
12216: LD_VAR 0 2
12220: PPUSH
12221: CALL_OW 313
12225: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
12226: LD_ADDR_VAR 0 9
12230: PUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_INT 22
12238: PUSH
12239: LD_VAR 0 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 2
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 24
12260: PUSH
12261: LD_INT 750
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 3
12270: PUSH
12271: LD_INT 54
12273: PUSH
12274: EMPTY
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 70
12291: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
12292: LD_ADDR_VAR 0 6
12296: PUSH
12297: LD_VAR 0 3
12301: PPUSH
12302: LD_INT 22
12304: PUSH
12305: LD_VAR 0 1
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 21
12316: PUSH
12317: LD_INT 3
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 3
12326: PUSH
12327: LD_INT 24
12329: PUSH
12330: LD_INT 1000
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: PPUSH
12349: CALL_OW 70
12353: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
12354: LD_VAR 0 6
12358: NOT
12359: PUSH
12360: LD_INT 22
12362: PUSH
12363: LD_VAR 0 1
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 25
12374: PUSH
12375: LD_INT 2
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 24
12384: PUSH
12385: LD_INT 250
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: LIST
12396: PPUSH
12397: CALL_OW 69
12401: NOT
12402: AND
12403: IFFALSE 12407
// exit ;
12405: GO 12589
// if buildings_list > 0 and engineerOkInside then
12407: LD_VAR 0 6
12411: PUSH
12412: LD_INT 0
12414: GREATER
12415: PUSH
12416: LD_VAR 0 8
12420: AND
12421: IFFALSE 12432
// ComExitBuilding ( engineerOkInside ) ;
12423: LD_VAR 0 8
12427: PPUSH
12428: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
12432: LD_VAR 0 6
12436: PUSH
12437: LD_INT 0
12439: GREATER
12440: PUSH
12441: LD_VAR 0 9
12445: PUSH
12446: LD_INT 0
12448: GREATER
12449: AND
12450: IFFALSE 12470
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
12452: LD_VAR 0 9
12456: PPUSH
12457: LD_VAR 0 6
12461: PUSH
12462: LD_INT 1
12464: ARRAY
12465: PPUSH
12466: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
12470: LD_VAR 0 6
12474: PUSH
12475: LD_INT 0
12477: EQUAL
12478: PUSH
12479: LD_VAR 0 4
12483: PUSH
12484: LD_INT 0
12486: EQUAL
12487: AND
12488: PUSH
12489: LD_VAR 0 9
12493: PUSH
12494: LD_INT 0
12496: GREATER
12497: AND
12498: IFFALSE 12514
// ComEnterUnit ( engineerOkOutside , building ) ;
12500: LD_VAR 0 9
12504: PPUSH
12505: LD_VAR 0 2
12509: PPUSH
12510: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
12514: LD_VAR 0 9
12518: PUSH
12519: LD_INT 0
12521: GREATER
12522: PUSH
12523: LD_VAR 0 6
12527: PUSH
12528: LD_INT 0
12530: EQUAL
12531: AND
12532: PUSH
12533: LD_VAR 0 4
12537: PUSH
12538: LD_INT 0
12540: GREATER
12541: AND
12542: IFFALSE 12589
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12544: LD_VAR 0 9
12548: PPUSH
12549: LD_VAR 0 4
12553: PUSH
12554: LD_INT 1
12556: ARRAY
12557: PPUSH
12558: LD_VAR 0 4
12562: PUSH
12563: LD_INT 2
12565: ARRAY
12566: PPUSH
12567: LD_VAR 0 4
12571: PUSH
12572: LD_INT 3
12574: ARRAY
12575: PPUSH
12576: LD_VAR 0 4
12580: PUSH
12581: LD_INT 4
12583: ARRAY
12584: PPUSH
12585: CALL_OW 145
// end ;
12589: LD_VAR 0 5
12593: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12594: LD_INT 0
12596: PPUSH
12597: PPUSH
12598: PPUSH
12599: PPUSH
12600: PPUSH
12601: PPUSH
12602: PPUSH
12603: PPUSH
12604: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff RuScientists ;
12605: LD_ADDR_VAR 0 6
12609: PUSH
12610: LD_INT 22
12612: PUSH
12613: LD_VAR 0 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 25
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 24
12634: PUSH
12635: LD_INT 251
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: PUSH
12652: LD_EXP 34
12656: DIFF
12657: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff RuScientists ;
12658: LD_ADDR_VAR 0 7
12662: PUSH
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 22
12670: PUSH
12671: LD_VAR 0 1
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 25
12682: PUSH
12683: LD_INT 4
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 50
12692: PUSH
12693: EMPTY
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: LIST
12700: PPUSH
12701: CALL_OW 70
12705: PUSH
12706: LD_EXP 34
12710: DIFF
12711: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12712: LD_ADDR_VAR 0 10
12716: PUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: LD_INT 22
12724: PUSH
12725: LD_VAR 0 1
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 21
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: LD_INT 24
12749: PUSH
12750: LD_INT 750
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 70
12770: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12771: LD_ADDR_VAR 0 11
12775: PUSH
12776: LD_VAR 0 2
12780: PPUSH
12781: LD_INT 22
12783: PUSH
12784: LD_VAR 0 1
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 21
12795: PUSH
12796: LD_INT 1
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 3
12805: PUSH
12806: LD_INT 24
12808: PUSH
12809: LD_INT 1000
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: LIST
12824: PPUSH
12825: CALL_OW 70
12829: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
12830: LD_VAR 0 10
12834: PUSH
12835: LD_INT 0
12837: GREATER
12838: PUSH
12839: LD_VAR 0 6
12843: PUSH
12844: LD_INT 0
12846: GREATER
12847: AND
12848: IFFALSE 12864
// ComMoveToArea ( damageUnits , healArea ) ;
12850: LD_VAR 0 10
12854: PPUSH
12855: LD_VAR 0 2
12859: PPUSH
12860: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12864: LD_VAR 0 11
12868: PUSH
12869: LD_INT 0
12871: GREATER
12872: PUSH
12873: LD_VAR 0 6
12877: PUSH
12878: LD_INT 0
12880: GREATER
12881: AND
12882: IFFALSE 12898
// ComExitBuilding ( UnitsInside ( build ) ) ;
12884: LD_VAR 0 4
12888: PPUSH
12889: CALL_OW 313
12893: PPUSH
12894: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12898: LD_VAR 0 11
12902: PUSH
12903: LD_INT 0
12905: GREATER
12906: PUSH
12907: LD_VAR 0 7
12911: PUSH
12912: LD_INT 0
12914: GREATER
12915: AND
12916: IFFALSE 12936
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12918: LD_VAR 0 7
12922: PPUSH
12923: LD_VAR 0 11
12927: PUSH
12928: LD_INT 1
12930: ARRAY
12931: PPUSH
12932: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12936: LD_VAR 0 10
12940: PUSH
12941: LD_INT 0
12943: EQUAL
12944: PUSH
12945: LD_VAR 0 11
12949: PUSH
12950: LD_INT 0
12952: EQUAL
12953: AND
12954: PUSH
12955: LD_VAR 0 7
12959: PUSH
12960: LD_INT 0
12962: GREATER
12963: AND
12964: IFFALSE 13069
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12966: LD_ADDR_VAR 0 12
12970: PUSH
12971: LD_INT 22
12973: PUSH
12974: LD_VAR 0 1
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 21
12985: PUSH
12986: LD_INT 3
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 8
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: PPUSH
13008: CALL_OW 69
13012: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13013: LD_ADDR_VAR 0 13
13017: PUSH
13018: LD_INT 1
13020: PPUSH
13021: LD_VAR 0 12
13025: PPUSH
13026: CALL_OW 12
13030: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13031: LD_VAR 0 7
13035: PPUSH
13036: LD_INT 3
13038: PUSH
13039: LD_INT 60
13041: PUSH
13042: EMPTY
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 72
13053: PPUSH
13054: LD_VAR 0 12
13058: PUSH
13059: LD_VAR 0 13
13063: ARRAY
13064: PPUSH
13065: CALL_OW 120
// end ; end ;
13069: LD_VAR 0 5
13073: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
13074: LD_INT 0
13076: PPUSH
13077: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13078: LD_INT 22
13080: PUSH
13081: LD_VAR 0 1
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 2
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 69
13108: PUSH
13109: LD_INT 18
13111: PPUSH
13112: LD_INT 22
13114: PUSH
13115: LD_VAR 0 1
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 21
13126: PUSH
13127: LD_INT 2
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PPUSH
13138: CALL_OW 70
13142: PUSH
13143: LD_VAR 0 3
13147: LESSEQUAL
13148: DIFF
13149: IFFALSE 13216
// for i = 1 to vehCount do
13151: LD_ADDR_VAR 0 9
13155: PUSH
13156: DOUBLE
13157: LD_INT 1
13159: DEC
13160: ST_TO_ADDR
13161: LD_VAR 0 3
13165: PUSH
13166: FOR_TO
13167: IFFALSE 13214
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
13169: LD_VAR 0 2
13173: PPUSH
13174: LD_VAR 0 7
13178: PPUSH
13179: LD_VAR 0 5
13183: PPUSH
13184: LD_VAR 0 6
13188: PPUSH
13189: LD_VAR 0 4
13193: PUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_VAR 0 4
13201: PPUSH
13202: CALL_OW 12
13206: ARRAY
13207: PPUSH
13208: CALL_OW 185
13212: GO 13166
13214: POP
13215: POP
// end ;
13216: LD_VAR 0 8
13220: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
13221: LD_INT 0
13223: PPUSH
13224: PPUSH
13225: PPUSH
13226: PPUSH
13227: PPUSH
13228: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] then
13229: LD_EXP 39
13233: PUSH
13234: LD_INT 3
13236: PUSH
13237: LD_INT 4
13239: PUSH
13240: LD_INT 4
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: PUSH
13248: LD_OWVAR 67
13252: ARRAY
13253: GREATEREQUAL
13254: PUSH
13255: LD_EXP 40
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: LD_INT 2
13265: PUSH
13266: LD_INT 3
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: LIST
13273: PUSH
13274: LD_OWVAR 67
13278: ARRAY
13279: GREATEREQUAL
13280: AND
13281: IFFALSE 13514
// begin repeat wait ( 0 0$1 ) ;
13283: LD_INT 35
13285: PPUSH
13286: CALL_OW 67
// for j in russianTanks do
13290: LD_ADDR_VAR 0 4
13294: PUSH
13295: LD_EXP 39
13299: PUSH
13300: FOR_IN
13301: IFFALSE 13502
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
13303: LD_ADDR_VAR 0 6
13307: PUSH
13308: LD_INT 81
13310: PUSH
13311: LD_VAR 0 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 101
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PPUSH
13334: CALL_OW 69
13338: PPUSH
13339: LD_VAR 0 4
13343: PPUSH
13344: CALL_OW 74
13348: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
13349: LD_ADDR_VAR 0 7
13353: PUSH
13354: LD_INT 81
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 101
13368: PUSH
13369: LD_INT 1
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: LD_INT 59
13381: PUSH
13382: EMPTY
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 21
13397: PUSH
13398: LD_INT 2
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PPUSH
13424: LD_VAR 0 4
13428: PPUSH
13429: CALL_OW 74
13433: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
13434: LD_VAR 0 4
13438: PPUSH
13439: LD_VAR 0 6
13443: PPUSH
13444: CALL_OW 296
13448: PUSH
13449: LD_INT 8
13451: PLUS
13452: PUSH
13453: LD_VAR 0 4
13457: PPUSH
13458: LD_VAR 0 7
13462: PPUSH
13463: CALL_OW 296
13467: LESS
13468: IFFALSE 13486
// ComAttackUnit ( j , target1 ) else
13470: LD_VAR 0 4
13474: PPUSH
13475: LD_VAR 0 6
13479: PPUSH
13480: CALL_OW 115
13484: GO 13500
// ComAttackUnit ( j , target2 ) ;
13486: LD_VAR 0 4
13490: PPUSH
13491: LD_VAR 0 7
13495: PPUSH
13496: CALL_OW 115
// end ;
13500: GO 13300
13502: POP
13503: POP
// until russianTanks = 0 ;
13504: LD_EXP 39
13508: PUSH
13509: LD_INT 0
13511: EQUAL
13512: IFFALSE 13283
// end ; end ;
13514: LD_VAR 0 2
13518: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
13519: LD_INT 0
13521: PPUSH
13522: PPUSH
13523: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] then
13524: LD_EXP 39
13528: PUSH
13529: LD_INT 3
13531: PUSH
13532: LD_INT 4
13534: PUSH
13535: LD_INT 4
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: PUSH
13543: LD_OWVAR 67
13547: ARRAY
13548: GREATEREQUAL
13549: PUSH
13550: LD_EXP 40
13554: PUSH
13555: LD_INT 1
13557: PUSH
13558: LD_INT 2
13560: PUSH
13561: LD_INT 3
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: PUSH
13569: LD_OWVAR 67
13573: ARRAY
13574: GREATEREQUAL
13575: AND
13576: IFFALSE 13697
// repeat wait ( 0 0$1 ) ;
13578: LD_INT 35
13580: PPUSH
13581: CALL_OW 67
// if russianTimeLapsers > 0 then
13585: LD_EXP 40
13589: PUSH
13590: LD_INT 0
13592: GREATER
13593: IFFALSE 13687
// for j in russianTimeLapsers do
13595: LD_ADDR_VAR 0 3
13599: PUSH
13600: LD_EXP 40
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13685
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
13608: LD_ADDR_VAR 0 4
13612: PUSH
13613: LD_INT 81
13615: PUSH
13616: LD_VAR 0 1
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 101
13627: PUSH
13628: LD_INT 1
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: PPUSH
13644: LD_VAR 0 3
13648: PPUSH
13649: CALL_OW 74
13653: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
13654: LD_VAR 0 3
13658: PPUSH
13659: LD_VAR 0 4
13663: PPUSH
13664: CALL_OW 250
13668: PPUSH
13669: LD_VAR 0 4
13673: PPUSH
13674: CALL_OW 251
13678: PPUSH
13679: CALL_OW 111
// end ;
13683: GO 13605
13685: POP
13686: POP
// until russianTimeLapsers = 0 ;
13687: LD_EXP 40
13691: PUSH
13692: LD_INT 0
13694: EQUAL
13695: IFFALSE 13578
// end ;
13697: LD_VAR 0 2
13701: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13710: LD_ADDR_VAR 0 6
13714: PUSH
13715: LD_INT 22
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: LD_INT 25
13729: PUSH
13730: LD_INT 9
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13746: LD_ADDR_VAR 0 7
13750: PUSH
13751: LD_INT 81
13753: PUSH
13754: LD_VAR 0 1
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 3
13765: PUSH
13766: LD_INT 21
13768: PUSH
13769: LD_INT 3
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13789: LD_ADDR_VAR 0 4
13793: PUSH
13794: LD_INT 1
13796: PPUSH
13797: LD_INT 3
13799: PPUSH
13800: CALL_OW 12
13804: ST_TO_ADDR
// for i = 1 to list do
13805: LD_ADDR_VAR 0 5
13809: PUSH
13810: DOUBLE
13811: LD_INT 1
13813: DEC
13814: ST_TO_ADDR
13815: LD_VAR 0 6
13819: PUSH
13820: FOR_TO
13821: IFFALSE 14023
// for ta in filter do
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: LD_VAR 0 7
13832: PUSH
13833: FOR_IN
13834: IFFALSE 14019
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13836: LD_VAR 0 6
13840: PUSH
13841: LD_VAR 0 5
13845: ARRAY
13846: PPUSH
13847: LD_VAR 0 3
13851: PPUSH
13852: CALL_OW 296
13856: PUSH
13857: LD_INT 15
13859: LESSEQUAL
13860: IFFALSE 14017
// begin case c of 1 :
13862: LD_VAR 0 4
13866: PUSH
13867: LD_INT 1
13869: DOUBLE
13870: EQUAL
13871: IFTRUE 13875
13873: GO 13913
13875: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
13876: LD_VAR 0 6
13880: PUSH
13881: LD_VAR 0 5
13885: ARRAY
13886: PPUSH
13887: LD_VAR 0 3
13891: PPUSH
13892: CALL_OW 250
13896: PPUSH
13897: LD_VAR 0 3
13901: PPUSH
13902: CALL_OW 251
13906: PPUSH
13907: CALL_OW 154
13911: GO 14017
13913: LD_INT 2
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13921
13919: GO 13985
13921: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
13922: LD_VAR 0 6
13926: PUSH
13927: LD_VAR 0 5
13931: ARRAY
13932: PPUSH
13933: LD_VAR 0 3
13937: PPUSH
13938: CALL_OW 250
13942: PUSH
13943: LD_INT 1
13945: NEG
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 12
13954: PLUS
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: CALL_OW 251
13965: PUSH
13966: LD_INT 1
13968: NEG
13969: PPUSH
13970: LD_INT 1
13972: PPUSH
13973: CALL_OW 12
13977: PLUS
13978: PPUSH
13979: CALL_OW 153
13983: GO 14017
13985: LD_INT 3
13987: DOUBLE
13988: EQUAL
13989: IFTRUE 13993
13991: GO 14016
13993: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
13994: LD_VAR 0 6
13998: PUSH
13999: LD_VAR 0 5
14003: ARRAY
14004: PPUSH
14005: LD_VAR 0 3
14009: PPUSH
14010: CALL_OW 115
14014: GO 14017
14016: POP
// end ; end ;
14017: GO 13833
14019: POP
14020: POP
14021: GO 13820
14023: POP
14024: POP
// end ;
14025: LD_VAR 0 2
14029: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14030: LD_INT 0
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
// r := 100 ;
14036: LD_ADDR_VAR 0 5
14040: PUSH
14041: LD_INT 100
14043: ST_TO_ADDR
// x := 0 ;
14044: LD_ADDR_VAR 0 6
14048: PUSH
14049: LD_INT 0
14051: ST_TO_ADDR
// while ( x < n ) do
14052: LD_VAR 0 6
14056: PUSH
14057: LD_VAR 0 2
14061: LESS
14062: IFFALSE 14349
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14064: LD_ADDR_VAR 0 4
14068: PUSH
14069: DOUBLE
14070: LD_INT 1
14072: DEC
14073: ST_TO_ADDR
14074: LD_VAR 0 1
14078: PPUSH
14079: LD_INT 0
14081: PPUSH
14082: CALL_OW 517
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PUSH
14091: FOR_TO
14092: IFFALSE 14345
// begin if r > 50 then
14094: LD_VAR 0 5
14098: PUSH
14099: LD_INT 50
14101: GREATER
14102: IFFALSE 14321
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14104: LD_VAR 0 1
14108: PPUSH
14109: LD_INT 0
14111: PPUSH
14112: CALL_OW 517
14116: PUSH
14117: LD_INT 1
14119: ARRAY
14120: PUSH
14121: LD_VAR 0 4
14125: ARRAY
14126: PPUSH
14127: LD_VAR 0 1
14131: PPUSH
14132: LD_INT 0
14134: PPUSH
14135: CALL_OW 517
14139: PUSH
14140: LD_INT 2
14142: ARRAY
14143: PUSH
14144: LD_VAR 0 4
14148: ARRAY
14149: PPUSH
14150: CALL_OW 458
14154: NOT
14155: IFFALSE 14305
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
14157: LD_VAR 0 1
14161: PPUSH
14162: LD_INT 0
14164: PPUSH
14165: CALL_OW 517
14169: PUSH
14170: LD_INT 1
14172: ARRAY
14173: PUSH
14174: LD_VAR 0 4
14178: ARRAY
14179: PPUSH
14180: LD_VAR 0 1
14184: PPUSH
14185: LD_INT 0
14187: PPUSH
14188: CALL_OW 517
14192: PUSH
14193: LD_INT 2
14195: ARRAY
14196: PUSH
14197: LD_VAR 0 4
14201: ARRAY
14202: PPUSH
14203: LD_INT 5
14205: PPUSH
14206: LD_INT 0
14208: PPUSH
14209: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14213: LD_ADDR_EXP 42
14217: PUSH
14218: LD_EXP 42
14222: PPUSH
14223: LD_INT 1
14225: PPUSH
14226: LD_VAR 0 1
14230: PPUSH
14231: LD_INT 0
14233: PPUSH
14234: CALL_OW 517
14238: PUSH
14239: LD_INT 1
14241: ARRAY
14242: PUSH
14243: LD_VAR 0 4
14247: ARRAY
14248: PUSH
14249: LD_VAR 0 1
14253: PPUSH
14254: LD_INT 0
14256: PPUSH
14257: CALL_OW 517
14261: PUSH
14262: LD_INT 2
14264: ARRAY
14265: PUSH
14266: LD_VAR 0 4
14270: ARRAY
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PPUSH
14276: CALL_OW 2
14280: ST_TO_ADDR
// r := 0 ;
14281: LD_ADDR_VAR 0 5
14285: PUSH
14286: LD_INT 0
14288: ST_TO_ADDR
// x := x + 1 ;
14289: LD_ADDR_VAR 0 6
14293: PUSH
14294: LD_VAR 0 6
14298: PUSH
14299: LD_INT 1
14301: PLUS
14302: ST_TO_ADDR
// end else
14303: GO 14319
// r := r + 35 ;
14305: LD_ADDR_VAR 0 5
14309: PUSH
14310: LD_VAR 0 5
14314: PUSH
14315: LD_INT 35
14317: PLUS
14318: ST_TO_ADDR
// end else
14319: GO 14343
// r := r + rand ( 10 , 25 ) ;
14321: LD_ADDR_VAR 0 5
14325: PUSH
14326: LD_VAR 0 5
14330: PUSH
14331: LD_INT 10
14333: PPUSH
14334: LD_INT 25
14336: PPUSH
14337: CALL_OW 12
14341: PLUS
14342: ST_TO_ADDR
// end ;
14343: GO 14091
14345: POP
14346: POP
14347: GO 14052
// end ; end_of_file
14349: LD_VAR 0 3
14353: RET
// on UnitDestroyed ( unit ) do var i ;
14354: LD_INT 0
14356: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
14357: LD_VAR 0 1
14361: PPUSH
14362: CALL_OW 255
14366: PUSH
14367: LD_INT 3
14369: EQUAL
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 247
14380: PUSH
14381: LD_INT 1
14383: EQUAL
14384: AND
14385: IFFALSE 14449
// begin for i in RuScientists do
14387: LD_ADDR_VAR 0 2
14391: PUSH
14392: LD_EXP 34
14396: PUSH
14397: FOR_IN
14398: IFFALSE 14447
// if i = unit then
14400: LD_VAR 0 2
14404: PUSH
14405: LD_VAR 0 1
14409: EQUAL
14410: IFFALSE 14445
// begin RuScientists = RuScientists diff [ unit ] ;
14412: LD_ADDR_EXP 34
14416: PUSH
14417: LD_EXP 34
14421: PUSH
14422: LD_VAR 0 1
14426: PUSH
14427: EMPTY
14428: LIST
14429: DIFF
14430: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
14431: LD_ADDR_EXP 35
14435: PUSH
14436: LD_EXP 35
14440: PUSH
14441: LD_INT 1
14443: PLUS
14444: ST_TO_ADDR
// end ;
14445: GO 14397
14447: POP
14448: POP
// end ; end ;
14449: PPOPN 2
14451: END
// on EnterBuilding ( building , human ) do begin display_strings = [ GetSide ( human ) , building ] ;
14452: LD_ADDR_OWVAR 47
14456: PUSH
14457: LD_VAR 0 2
14461: PPUSH
14462: CALL_OW 255
14466: PUSH
14467: LD_VAR 0 1
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: ST_TO_ADDR
// if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
14476: LD_VAR 0 1
14480: PUSH
14481: LD_INT 10
14483: EQUAL
14484: PUSH
14485: LD_VAR 0 2
14489: PPUSH
14490: CALL_OW 255
14494: PUSH
14495: LD_INT 1
14497: EQUAL
14498: AND
14499: PUSH
14500: LD_EXP 44
14504: PUSH
14505: LD_INT 0
14507: EQUAL
14508: AND
14509: IFFALSE 14612
// begin eventVar1 = 1 ;
14511: LD_ADDR_EXP 44
14515: PUSH
14516: LD_INT 1
14518: ST_TO_ADDR
// teleportExplored = 1 ;
14519: LD_ADDR_EXP 33
14523: PUSH
14524: LD_INT 1
14526: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14527: LD_INT 70
14529: PPUSH
14530: CALL_OW 67
// DialogueOn ;
14534: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] diff [ JMM ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
14538: LD_INT 22
14540: PUSH
14541: LD_INT 1
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_EXP 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: DIFF
14556: PUSH
14557: EMPTY
14558: LIST
14559: PPUSH
14560: CALL_OW 69
14564: PPUSH
14565: LD_STRING DT3a-Sol1-1
14567: PPUSH
14568: LD_STRING DT3a-FSol1-1
14570: PPUSH
14571: CALL 11323 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
14575: LD_EXP 1
14579: PPUSH
14580: LD_STRING DT3a-JMM-1
14582: PPUSH
14583: CALL_OW 88
// CenterNowOnUnits ( human ) ;
14587: LD_VAR 0 2
14591: PPUSH
14592: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a1 ) ;
14596: LD_EXP 1
14600: PPUSH
14601: LD_STRING DT3a-JMM-1a1
14603: PPUSH
14604: CALL_OW 88
// DialogueOff ;
14608: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
14612: LD_VAR 0 1
14616: PUSH
14617: LD_INT 10
14619: EQUAL
14620: PUSH
14621: LD_VAR 0 2
14625: PPUSH
14626: CALL_OW 247
14630: PUSH
14631: LD_INT 2
14633: EQUAL
14634: AND
14635: PUSH
14636: LD_VAR 0 2
14640: PPUSH
14641: CALL_OW 255
14645: PUSH
14646: LD_INT 3
14648: EQUAL
14649: AND
14650: PUSH
14651: LD_EXP 29
14655: PUSH
14656: LD_INT 0
14658: EQUAL
14659: AND
14660: IFFALSE 14670
// vehicleTeleported = 1 ;
14662: LD_ADDR_EXP 29
14666: PUSH
14667: LD_INT 1
14669: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
14670: LD_VAR 0 1
14674: PUSH
14675: LD_INT 10
14677: EQUAL
14678: PUSH
14679: LD_VAR 0 2
14683: PPUSH
14684: CALL_OW 247
14688: PUSH
14689: LD_INT 2
14691: EQUAL
14692: AND
14693: PUSH
14694: LD_VAR 0 2
14698: PPUSH
14699: CALL_OW 255
14703: PUSH
14704: LD_INT 3
14706: EQUAL
14707: AND
14708: PUSH
14709: LD_EXP 29
14713: PUSH
14714: LD_INT 2
14716: EQUAL
14717: AND
14718: IFFALSE 14728
// vehicleTeleported = 3 ;
14720: LD_ADDR_EXP 29
14724: PUSH
14725: LD_INT 3
14727: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 3 then
14728: LD_VAR 0 1
14732: PUSH
14733: LD_INT 10
14735: EQUAL
14736: PUSH
14737: LD_VAR 0 2
14741: PPUSH
14742: CALL_OW 247
14746: PUSH
14747: LD_INT 2
14749: EQUAL
14750: AND
14751: PUSH
14752: LD_VAR 0 2
14756: PPUSH
14757: CALL_OW 255
14761: PUSH
14762: LD_INT 3
14764: EQUAL
14765: AND
14766: PUSH
14767: LD_EXP 29
14771: PUSH
14772: LD_INT 3
14774: EQUAL
14775: AND
14776: IFFALSE 14786
// vehicleTeleported = 4 ;
14778: LD_ADDR_EXP 29
14782: PUSH
14783: LD_INT 4
14785: ST_TO_ADDR
// end ;
14786: PPOPN 2
14788: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
14789: LD_VAR 0 2
14793: PUSH
14794: LD_INT 21
14796: EQUAL
14797: PUSH
14798: LD_VAR 0 2
14802: PUSH
14803: LD_INT 112
14805: EQUAL
14806: OR
14807: IFFALSE 14940
// if GetSide ( vehicle ) = 3 then
14809: LD_VAR 0 1
14813: PPUSH
14814: CALL_OW 255
14818: PUSH
14819: LD_INT 3
14821: EQUAL
14822: IFFALSE 14940
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
14824: LD_VAR 0 1
14828: PPUSH
14829: CALL_OW 264
14833: PUSH
14834: LD_INT 46
14836: EQUAL
14837: PUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 264
14847: PUSH
14848: LD_INT 45
14850: EQUAL
14851: OR
14852: PUSH
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 264
14862: PUSH
14863: LD_INT 44
14865: EQUAL
14866: OR
14867: IFFALSE 14897
// begin russianTanks = russianTanks ^ vehicle ;
14869: LD_ADDR_EXP 39
14873: PUSH
14874: LD_EXP 39
14878: PUSH
14879: LD_VAR 0 1
14883: ADD
14884: ST_TO_ADDR
// ComEnterUnit ( vehicle , ruteleprt ) ;
14885: LD_VAR 0 1
14889: PPUSH
14890: LD_INT 10
14892: PPUSH
14893: CALL_OW 120
// end ; if GetWeapon ( vehicle ) = 49 then
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 264
14906: PUSH
14907: LD_INT 49
14909: EQUAL
14910: IFFALSE 14940
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
14912: LD_ADDR_EXP 40
14916: PUSH
14917: LD_EXP 40
14921: PUSH
14922: LD_VAR 0 1
14926: ADD
14927: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
14928: LD_VAR 0 1
14932: PPUSH
14933: LD_INT 137
14935: PPUSH
14936: CALL_OW 120
// end ; end ; end ;
14940: PPOPN 2
14942: END
// on UnitGoesToRed ( unit ) do var i ;
14943: LD_INT 0
14945: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 255
14955: PUSH
14956: LD_INT 3
14958: EQUAL
14959: PUSH
14960: LD_VAR 0 1
14964: PPUSH
14965: CALL_OW 247
14969: PUSH
14970: LD_INT 2
14972: EQUAL
14973: AND
14974: IFFALSE 15092
// begin if russianTanks > 0 then
14976: LD_EXP 39
14980: PUSH
14981: LD_INT 0
14983: GREATER
14984: IFFALSE 15034
// for i in russianTanks do
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_EXP 39
14995: PUSH
14996: FOR_IN
14997: IFFALSE 15032
// if i = unit then
14999: LD_VAR 0 2
15003: PUSH
15004: LD_VAR 0 1
15008: EQUAL
15009: IFFALSE 15030
// russianTanks = russianTanks diff [ unit ] ;
15011: LD_ADDR_EXP 39
15015: PUSH
15016: LD_EXP 39
15020: PUSH
15021: LD_VAR 0 1
15025: PUSH
15026: EMPTY
15027: LIST
15028: DIFF
15029: ST_TO_ADDR
15030: GO 14996
15032: POP
15033: POP
// if russianTimeLapsers > 0 then
15034: LD_EXP 40
15038: PUSH
15039: LD_INT 0
15041: GREATER
15042: IFFALSE 15092
// for i in russianTimeLapsers do
15044: LD_ADDR_VAR 0 2
15048: PUSH
15049: LD_EXP 40
15053: PUSH
15054: FOR_IN
15055: IFFALSE 15090
// if i = unit then
15057: LD_VAR 0 2
15061: PUSH
15062: LD_VAR 0 1
15066: EQUAL
15067: IFFALSE 15088
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
15069: LD_ADDR_EXP 40
15073: PUSH
15074: LD_EXP 40
15078: PUSH
15079: LD_VAR 0 1
15083: PUSH
15084: EMPTY
15085: LIST
15086: DIFF
15087: ST_TO_ADDR
15088: GO 15054
15090: POP
15091: POP
// end ; end ;
15092: PPOPN 2
15094: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
15095: LD_VAR 0 2
15099: PPUSH
15100: CALL_OW 255
15104: PUSH
15105: LD_INT 3
15107: EQUAL
15108: PUSH
15109: LD_INT 21
15111: PPUSH
15112: CALL_OW 255
15116: PUSH
15117: LD_INT 3
15119: EQUAL
15120: AND
15121: PUSH
15122: LD_INT 21
15124: PPUSH
15125: CALL_OW 302
15129: AND
15130: IFFALSE 15144
// ComEnterUnit ( human , ru_fact ) ;
15132: LD_VAR 0 2
15136: PPUSH
15137: LD_INT 21
15139: PPUSH
15140: CALL_OW 120
// end ; end_of_file
15144: PPOPN 2
15146: END
// every 0 0$1 trigger ruAI = 1 do
15147: LD_EXP 41
15151: PUSH
15152: LD_INT 1
15154: EQUAL
15155: IFFALSE 15254
15157: GO 15159
15159: DISABLE
// begin enable ;
15160: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
15161: LD_INT 3
15163: PPUSH
15164: LD_INT 6
15166: PPUSH
15167: LD_INT 9
15169: PPUSH
15170: LD_EXP 38
15174: PPUSH
15175: CALL 12203 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
15179: LD_INT 3
15181: PPUSH
15182: LD_INT 4
15184: PPUSH
15185: LD_INT 10
15187: PPUSH
15188: LD_EXP 38
15192: PPUSH
15193: CALL 12203 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
15197: LD_INT 3
15199: PPUSH
15200: LD_INT 16
15202: PPUSH
15203: LD_INT 9
15205: PPUSH
15206: LD_INT 91
15208: PPUSH
15209: CALL 12594 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
15213: LD_INT 3
15215: PPUSH
15216: LD_INT 17
15218: PPUSH
15219: LD_INT 10
15221: PPUSH
15222: LD_INT 47
15224: PUSH
15225: LD_INT 129
15227: PUSH
15228: LD_INT 135
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: PPUSH
15236: CALL 12594 0 4
// AttackVehicles ( 3 ) ;
15240: LD_INT 3
15242: PPUSH
15243: CALL 13221 0 1
// IntBazooka ( 3 ) ;
15247: LD_INT 3
15249: PPUSH
15250: CALL 13702 0 1
// end ;
15254: END
// every 0 0$1 do
15255: GO 15257
15257: DISABLE
// begin enable ;
15258: ENABLE
// TimeLapsersAI ( 3 ) ;
15259: LD_INT 3
15261: PPUSH
15262: CALL 13519 0 1
// end ;
15266: END
// every 0 0$1 do
15267: GO 15269
15269: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
15270: LD_INT 3
15272: PPUSH
15273: LD_INT 91
15275: PPUSH
15276: LD_INT 3
15278: PPUSH
15279: CALL 12118 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
15283: LD_INT 3
15285: PPUSH
15286: LD_INT 47
15288: PPUSH
15289: LD_INT 3
15291: PPUSH
15292: CALL 12118 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
15296: LD_INT 3
15298: PPUSH
15299: LD_INT 129
15301: PPUSH
15302: LD_INT 3
15304: PPUSH
15305: CALL 12118 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
15309: LD_INT 3
15311: PPUSH
15312: LD_INT 3
15314: PPUSH
15315: LD_INT 3
15317: PPUSH
15318: CALL 12118 0 3
// end ;
15322: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
15323: LD_EXP 28
15327: PUSH
15328: LD_INT 2
15330: EQUAL
15331: PUSH
15332: LD_INT 22
15334: PUSH
15335: LD_INT 3
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 21
15344: PUSH
15345: LD_INT 2
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 50
15354: PUSH
15355: EMPTY
15356: LIST
15357: PUSH
15358: LD_INT 3
15360: PUSH
15361: LD_INT 58
15363: PUSH
15364: EMPTY
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: PPUSH
15377: CALL_OW 69
15381: PUSH
15382: LD_INT 18
15384: PPUSH
15385: LD_INT 22
15387: PUSH
15388: LD_INT 3
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 21
15397: PUSH
15398: LD_INT 2
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PPUSH
15409: CALL_OW 70
15413: PUSH
15414: LD_INT 0
15416: EQUAL
15417: DIFF
15418: AND
15419: IFFALSE 15556
15421: GO 15423
15423: DISABLE
// begin enable ;
15424: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 24 ) ;
15425: LD_INT 3
15427: PPUSH
15428: LD_INT 21
15430: PPUSH
15431: LD_INT 3
15433: PUSH
15434: LD_INT 4
15436: PUSH
15437: LD_INT 4
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: LD_OWVAR 67
15449: ARRAY
15450: PPUSH
15451: LD_INT 46
15453: PUSH
15454: LD_INT 45
15456: PUSH
15457: LD_INT 44
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: LIST
15464: PPUSH
15465: LD_INT 3
15467: PPUSH
15468: LD_INT 1
15470: PUSH
15471: LD_INT 3
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 1
15480: PPUSH
15481: LD_INT 2
15483: PPUSH
15484: CALL_OW 12
15488: ARRAY
15489: PPUSH
15490: LD_INT 24
15492: PPUSH
15493: CALL 13074 0 7
// if russianTimeLapsers = 0 then
15497: LD_EXP 40
15501: PUSH
15502: LD_INT 0
15504: EQUAL
15505: IFFALSE 15556
// BuildingVehicle ( 3 , rufab2 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
15507: LD_INT 3
15509: PPUSH
15510: LD_INT 112
15512: PPUSH
15513: LD_INT 3
15515: PUSH
15516: LD_INT 4
15518: PUSH
15519: LD_INT 4
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: LIST
15526: PUSH
15527: LD_OWVAR 67
15531: ARRAY
15532: PPUSH
15533: LD_INT 49
15535: PUSH
15536: LD_INT 49
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PPUSH
15543: LD_INT 3
15545: PPUSH
15546: LD_INT 3
15548: PPUSH
15549: LD_INT 24
15551: PPUSH
15552: CALL 13074 0 7
// end ;
15556: END
// every 0 0$1 trigger arabianMines do var i ;
15557: LD_EXP 42
15561: IFFALSE 15682
15563: GO 15565
15565: DISABLE
15566: LD_INT 0
15568: PPUSH
// begin enable ;
15569: ENABLE
// for i in arabianMines do
15570: LD_ADDR_VAR 0 1
15574: PUSH
15575: LD_EXP 42
15579: PUSH
15580: FOR_IN
15581: IFFALSE 15680
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
15583: LD_INT 22
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 92
15595: PUSH
15596: LD_VAR 0 1
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PUSH
15605: LD_VAR 0 1
15609: PUSH
15610: LD_INT 2
15612: ARRAY
15613: PUSH
15614: LD_INT 3
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 69
15631: IFFALSE 15678
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
15633: LD_VAR 0 1
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: LD_VAR 0 1
15646: PUSH
15647: LD_INT 2
15649: ARRAY
15650: PPUSH
15651: LD_INT 5
15653: PPUSH
15654: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
15658: LD_ADDR_EXP 42
15662: PUSH
15663: LD_EXP 42
15667: PPUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 3
15677: ST_TO_ADDR
// end ; end ;
15678: GO 15580
15680: POP
15681: POP
// end ; end_of_file
15682: PPOPN 1
15684: END
// every 0 0$1 trigger RuScientists = [ ] do
15685: LD_EXP 34
15689: PUSH
15690: EMPTY
15691: EQUAL
15692: IFFALSE 15897
15694: GO 15696
15696: DISABLE
// begin if sciCounter = 0 then
15697: LD_EXP 35
15701: PUSH
15702: LD_INT 0
15704: EQUAL
15705: IFFALSE 15731
// begin Say ( JMM , D7a-JMM-1 ) ;
15707: LD_EXP 1
15711: PPUSH
15712: LD_STRING D7a-JMM-1
15714: PPUSH
15715: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
15719: LD_EXP 22
15723: PPUSH
15724: LD_STRING D7a-Pow-1
15726: PPUSH
15727: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
15731: LD_EXP 35
15735: PUSH
15736: LD_INT 0
15738: GREATER
15739: PUSH
15740: LD_EXP 35
15744: PUSH
15745: LD_INT 6
15747: LESS
15748: AND
15749: IFFALSE 15775
// begin Say ( JMM , D7b-JMM-1 ) ;
15751: LD_EXP 1
15755: PPUSH
15756: LD_STRING D7b-JMM-1
15758: PPUSH
15759: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
15763: LD_EXP 22
15767: PPUSH
15768: LD_STRING D7b-Pow-1
15770: PPUSH
15771: CALL_OW 94
// end ; if sciCounter = 6 then
15775: LD_EXP 35
15779: PUSH
15780: LD_INT 6
15782: EQUAL
15783: IFFALSE 15893
// begin Say ( JMM , D7c-JMM-1 ) ;
15785: LD_EXP 1
15789: PPUSH
15790: LD_STRING D7c-JMM-1
15792: PPUSH
15793: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
15797: LD_EXP 22
15801: PPUSH
15802: LD_STRING D7c-Pow-1
15804: PPUSH
15805: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
15809: LD_EXP 1
15813: PPUSH
15814: LD_STRING D7d-JMM-1
15816: PPUSH
15817: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
15821: LD_EXP 22
15825: PPUSH
15826: LD_STRING D7d-Pow-1
15828: PPUSH
15829: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
15833: LD_EXP 1
15837: PPUSH
15838: LD_STRING D7d-JMM-2
15840: PPUSH
15841: CALL_OW 88
// if askSiberite = 1 then
15845: LD_EXP 32
15849: PUSH
15850: LD_INT 1
15852: EQUAL
15853: IFFALSE 15869
// begin Say ( JMM , D7d-JMM-2a ) ;
15855: LD_EXP 1
15859: PPUSH
15860: LD_STRING D7d-JMM-2a
15862: PPUSH
15863: CALL_OW 88
// end else
15867: GO 15881
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
15869: LD_EXP 22
15873: PPUSH
15874: LD_STRING D7d-Pow-2
15876: PPUSH
15877: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
15881: LD_EXP 22
15885: PPUSH
15886: LD_STRING D7d-Pow-2a
15888: PPUSH
15889: CALL_OW 94
// end ; FinishMission ;
15893: CALL 15898 0 0
// end ;
15897: END
// export function FinishMission ; begin
15898: LD_INT 0
15900: PPUSH
// if teleportExplored = 1 then
15901: LD_EXP 33
15905: PUSH
15906: LD_INT 1
15908: EQUAL
15909: IFFALSE 15923
// AddMedal ( Teleport , 1 ) else
15911: LD_STRING Teleport
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 101
15921: GO 15934
// AddMedal ( Teleport , - 1 ) ;
15923: LD_STRING Teleport
15925: PPUSH
15926: LD_INT 1
15928: NEG
15929: PPUSH
15930: CALL_OW 101
// if sciCounter > 0 and sciCounter < 6 then
15934: LD_EXP 35
15938: PUSH
15939: LD_INT 0
15941: GREATER
15942: PUSH
15943: LD_EXP 35
15947: PUSH
15948: LD_INT 6
15950: LESS
15951: AND
15952: IFFALSE 15966
// AddMedal ( Materials , 1 ) else
15954: LD_STRING Materials
15956: PPUSH
15957: LD_INT 1
15959: PPUSH
15960: CALL_OW 101
15964: GO 15977
// AddMedal ( Materials , - 1 ) ;
15966: LD_STRING Materials
15968: PPUSH
15969: LD_INT 1
15971: NEG
15972: PPUSH
15973: CALL_OW 101
// if sciCounter = 6 then
15977: LD_EXP 35
15981: PUSH
15982: LD_INT 6
15984: EQUAL
15985: IFFALSE 16009
// begin AddMedal ( Scientists , 1 ) ;
15987: LD_STRING Scientists
15989: PPUSH
15990: LD_INT 1
15992: PPUSH
15993: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
15997: LD_INT 1
15999: PPUSH
16000: LD_STRING 12_SciDed_1
16002: PPUSH
16003: CALL_OW 39
// end else
16007: GO 16030
// begin AddMedal ( Scientists , - 1 ) ;
16009: LD_STRING Scientists
16011: PPUSH
16012: LD_INT 1
16014: NEG
16015: PPUSH
16016: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
16020: LD_INT 0
16022: PPUSH
16023: LD_STRING 12_SciDed_1
16025: PPUSH
16026: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
16030: LD_EXP 31
16034: PPUSH
16035: LD_STRING 12_MainDepositFake_1
16037: PPUSH
16038: CALL_OW 39
// GiveMedals ( MAIN ) ;
16042: LD_STRING MAIN
16044: PPUSH
16045: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
16049: LD_INT 22
16051: PUSH
16052: LD_INT 1
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 21
16061: PUSH
16062: LD_INT 1
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: LD_INT 25
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 25
16084: PUSH
16085: LD_INT 2
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 25
16094: PUSH
16095: LD_INT 3
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 25
16104: PUSH
16105: LD_INT 4
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 25
16114: PUSH
16115: LD_INT 5
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 25
16124: PUSH
16125: LD_INT 8
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: PPUSH
16146: CALL_OW 69
16150: PPUSH
16151: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16155: LD_EXP 1
16159: PPUSH
16160: LD_EXP 43
16164: PUSH
16165: LD_STRING JMM
16167: STR
16168: PPUSH
16169: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
16173: LD_EXP 7
16177: PPUSH
16178: LD_EXP 43
16182: PUSH
16183: LD_STRING Brown
16185: STR
16186: PPUSH
16187: CALL 11272 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
16191: LD_EXP 3
16195: PPUSH
16196: LD_EXP 43
16200: PUSH
16201: LD_STRING Donaldson
16203: STR
16204: PPUSH
16205: CALL 11272 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16209: LD_EXP 4
16213: PPUSH
16214: LD_EXP 43
16218: PUSH
16219: LD_STRING Bobby
16221: STR
16222: PPUSH
16223: CALL 11272 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16227: LD_EXP 5
16231: PPUSH
16232: LD_EXP 43
16236: PUSH
16237: LD_STRING Cyrus
16239: STR
16240: PPUSH
16241: CALL 11272 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16245: LD_EXP 2
16249: PPUSH
16250: LD_EXP 43
16254: PUSH
16255: LD_STRING Lisa
16257: STR
16258: PPUSH
16259: CALL 11272 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
16263: LD_EXP 12
16267: PPUSH
16268: LD_EXP 43
16272: PUSH
16273: LD_STRING Frank
16275: STR
16276: PPUSH
16277: CALL 11272 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
16281: LD_EXP 13
16285: PPUSH
16286: LD_EXP 43
16290: PUSH
16291: LD_STRING Kikuchi
16293: STR
16294: PPUSH
16295: CALL 11272 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
16299: LD_EXP 9
16303: PPUSH
16304: LD_EXP 43
16308: PUSH
16309: LD_STRING Houten
16311: STR
16312: PPUSH
16313: CALL 11272 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
16317: LD_EXP 11
16321: PPUSH
16322: LD_EXP 43
16326: PUSH
16327: LD_STRING Gary
16329: STR
16330: PPUSH
16331: CALL 11272 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
16335: LD_EXP 10
16339: PPUSH
16340: LD_EXP 43
16344: PUSH
16345: LD_STRING Cornell
16347: STR
16348: PPUSH
16349: CALL 11272 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
16353: LD_EXP 6
16357: PPUSH
16358: LD_EXP 43
16362: PUSH
16363: LD_STRING Denis
16365: STR
16366: PPUSH
16367: CALL 11272 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
16371: LD_EXP 8
16375: PPUSH
16376: LD_EXP 43
16380: PUSH
16381: LD_STRING Gladstone
16383: STR
16384: PPUSH
16385: CALL 11272 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
16389: LD_INT 50
16391: PUSH
16392: EMPTY
16393: LIST
16394: PUSH
16395: LD_INT 22
16397: PUSH
16398: LD_INT 1
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 21
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: LD_INT 25
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 25
16430: PUSH
16431: LD_INT 2
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 25
16440: PUSH
16441: LD_INT 3
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 25
16450: PUSH
16451: LD_INT 4
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 25
16460: PUSH
16461: LD_INT 5
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 25
16470: PUSH
16471: LD_INT 8
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: PUSH
16498: LD_EXP 1
16502: PUSH
16503: LD_EXP 7
16507: PUSH
16508: LD_EXP 3
16512: PUSH
16513: LD_EXP 4
16517: PUSH
16518: LD_EXP 5
16522: PUSH
16523: LD_EXP 2
16527: PUSH
16528: LD_EXP 12
16532: PUSH
16533: LD_EXP 8
16537: PUSH
16538: LD_EXP 13
16542: PUSH
16543: LD_EXP 6
16547: PUSH
16548: LD_EXP 9
16552: PUSH
16553: LD_EXP 11
16557: PUSH
16558: LD_EXP 10
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: DIFF
16578: PPUSH
16579: LD_STRING 12_other_survivors
16581: PPUSH
16582: CALL_OW 38
// YouWin ;
16586: CALL_OW 103
// end ;
16590: LD_VAR 0 1
16594: RET
