// export JMM , Donaldson , Lisa , Cyrus , Denis , Frank , Cornell , Campell ; export Brown , Gary , amCargo1 , amCargo2 ; export Bobby , amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 29
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 30
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 33
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// secondPass = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// teleportExplored = 0 ;
  58: LD_ADDR_EXP 28
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// askSiberite = 0 ;
  66: LD_ADDR_EXP 27
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// warWithLegion = 0 ;
  74: LD_ADDR_EXP 25
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// fakeInfo = 0 ;
  82: LD_ADDR_EXP 26
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// eventVar1 = 0 ;
  90: LD_ADDR_EXP 34
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// debugMode = 1 ;
  98: LD_ADDR_EXP 35
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// PrepareDifficulty ;
 106: CALL 7120 0 0
// PrepareVehicles ;
 110: CALL 735 0 0
// PrepareAmericanHeroes ;
 114: CALL 452 0 0
// PrepareRussianCommander ;
 118: CALL 1962 0 0
// PrepareWestBase ;
 122: CALL 2474 0 0
// PrepareEastBase ;
 126: CALL 2034 0 0
// PrepareOtherRussians ;
 130: CALL 2586 0 0
// end ;
 134: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 135: LD_EXP 35
 139: PUSH
 140: LD_INT 1
 142: EQUAL
 143: IFFALSE 449
 145: GO 147
 147: DISABLE
 148: LD_INT 0
 150: PPUSH
// begin enable ;
 151: ENABLE
// fogoff ( true ) ;
 152: LD_INT 1
 154: PPUSH
 155: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 159: LD_ADDR_VAR 0 1
 163: PUSH
 164: LD_INT 22
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: LD_INT 21
 176: PUSH
 177: LD_INT 1
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 69
 192: PUSH
 193: FOR_IN
 194: IFFALSE 210
// SetLives ( i , 1000 ) ;
 196: LD_VAR 0 1
 200: PPUSH
 201: LD_INT 1000
 203: PPUSH
 204: CALL_OW 234
 208: GO 193
 210: POP
 211: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 212: LD_ADDR_VAR 0 1
 216: PUSH
 217: LD_INT 22
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 30
 232: PUSH
 233: LD_INT 0
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: PUSH
 240: LD_INT 30
 242: PUSH
 243: LD_INT 1
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PPUSH
 259: CALL_OW 69
 263: PUSH
 264: FOR_IN
 265: IFFALSE 289
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 267: LD_VAR 0 1
 271: PPUSH
 272: CALL_OW 274
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 9999
 282: PPUSH
 283: CALL_OW 277
 287: GO 264
 289: POP
 290: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 291: LD_ADDR_VAR 0 1
 295: PUSH
 296: LD_INT 22
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 2
 308: PUSH
 309: LD_INT 30
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PPUSH
 338: CALL_OW 69
 342: PUSH
 343: FOR_IN
 344: IFFALSE 368
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 346: LD_VAR 0 1
 350: PPUSH
 351: CALL_OW 274
 355: PPUSH
 356: LD_INT 2
 358: PPUSH
 359: LD_INT 9999
 361: PPUSH
 362: CALL_OW 277
 366: GO 343
 368: POP
 369: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 370: LD_ADDR_VAR 0 1
 374: PUSH
 375: LD_INT 22
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 2
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 0
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 30
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 3
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// end ; end_of_file
 449: PPOPN 1
 451: END
// export function PrepareAmericanHeroes ; begin
 452: LD_INT 0
 454: PPUSH
// uc_side = 1 ;
 455: LD_ADDR_OWVAR 20
 459: PUSH
 460: LD_INT 1
 462: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 463: LD_ADDR_EXP 1
 467: PUSH
 468: LD_STRING JMM
 470: PPUSH
 471: LD_INT 0
 473: PPUSH
 474: CALL 6907 0 2
 478: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 479: LD_ADDR_EXP 2
 483: PUSH
 484: LD_STRING Donaldson
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: CALL 6907 0 2
 494: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 495: LD_ADDR_EXP 3
 499: PUSH
 500: LD_STRING Lisa
 502: PPUSH
 503: LD_INT 0
 505: PPUSH
 506: CALL 6907 0 2
 510: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 511: LD_ADDR_EXP 4
 515: PUSH
 516: LD_STRING Cyrus
 518: PPUSH
 519: LD_INT 0
 521: PPUSH
 522: CALL 6907 0 2
 526: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 527: LD_ADDR_EXP 5
 531: PUSH
 532: LD_STRING Denis
 534: PPUSH
 535: LD_INT 0
 537: PPUSH
 538: CALL 6907 0 2
 542: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 543: LD_ADDR_EXP 6
 547: PUSH
 548: LD_STRING Frank
 550: PPUSH
 551: LD_INT 0
 553: PPUSH
 554: CALL 6907 0 2
 558: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornell , false ) ;
 559: LD_ADDR_EXP 7
 563: PUSH
 564: LD_STRING Cornell
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL 6907 0 2
 574: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 575: LD_ADDR_EXP 19
 579: PUSH
 580: LD_STRING Powell
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL 6907 0 2
 590: ST_TO_ADDR
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 591: LD_EXP 1
 595: PPUSH
 596: LD_INT 4
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 49
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 606: LD_EXP 2
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: LD_INT 0
 616: PPUSH
 617: CALL_OW 49
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 621: LD_EXP 3
 625: PPUSH
 626: LD_INT 4
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 636: LD_EXP 4
 640: PPUSH
 641: LD_INT 4
 643: PPUSH
 644: LD_INT 0
 646: PPUSH
 647: CALL_OW 49
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 651: LD_EXP 5
 655: PPUSH
 656: LD_INT 4
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 49
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 666: LD_EXP 6
 670: PPUSH
 671: LD_INT 4
 673: PPUSH
 674: LD_INT 0
 676: PPUSH
 677: CALL_OW 49
// PlaceHumanInUnit ( Cornell , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 681: LD_EXP 7
 685: PPUSH
 686: LD_INT 22
 688: PUSH
 689: LD_INT 1
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 21
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 58
 708: PUSH
 709: EMPTY
 710: LIST
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: PPUSH
 717: CALL_OW 69
 721: PUSH
 722: LD_INT 1
 724: ARRAY
 725: PPUSH
 726: CALL_OW 52
// end ;
 730: LD_VAR 0 1
 734: RET
// export function PrepareVehicles ; var veh ; begin
 735: LD_INT 0
 737: PPUSH
 738: PPUSH
// uc_side = 1 ;
 739: LD_ADDR_OWVAR 20
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// uc_nation = 1 ;
 747: LD_ADDR_OWVAR 21
 751: PUSH
 752: LD_INT 1
 754: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
 755: LD_ADDR_OWVAR 37
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// vc_engine = 3 ;
 763: LD_ADDR_OWVAR 39
 767: PUSH
 768: LD_INT 3
 770: ST_TO_ADDR
// vc_control = 3 ;
 771: LD_ADDR_OWVAR 38
 775: PUSH
 776: LD_INT 3
 778: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 779: LD_ADDR_OWVAR 40
 783: PUSH
 784: LD_INT 4
 786: ST_TO_ADDR
// veh = CreateVehicle ;
 787: LD_ADDR_VAR 0 2
 791: PUSH
 792: CALL_OW 45
 796: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 797: LD_VAR 0 2
 801: PPUSH
 802: LD_INT 4
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 49
// vc_weapon = us_double_gun ;
 812: LD_ADDR_OWVAR 40
 816: PUSH
 817: LD_INT 5
 819: ST_TO_ADDR
// vc_control = 1 ;
 820: LD_ADDR_OWVAR 38
 824: PUSH
 825: LD_INT 1
 827: ST_TO_ADDR
// veh = CreateVehicle ;
 828: LD_ADDR_VAR 0 2
 832: PUSH
 833: CALL_OW 45
 837: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 838: LD_VAR 0 2
 842: PPUSH
 843: LD_INT 4
 845: PPUSH
 846: LD_INT 0
 848: PPUSH
 849: CALL_OW 49
// vc_weapon = us_light_gun ;
 853: LD_ADDR_OWVAR 40
 857: PUSH
 858: LD_INT 3
 860: ST_TO_ADDR
// vc_control = 3 ;
 861: LD_ADDR_OWVAR 38
 865: PUSH
 866: LD_INT 3
 868: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
 869: LD_ADDR_OWVAR 37
 873: PUSH
 874: LD_INT 2
 876: ST_TO_ADDR
// veh = CreateVehicle ;
 877: LD_ADDR_VAR 0 2
 881: PUSH
 882: CALL_OW 45
 886: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 887: LD_VAR 0 2
 891: PPUSH
 892: LD_INT 4
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
// vc_weapon = us_gatling_gun ;
 902: LD_ADDR_OWVAR 40
 906: PUSH
 907: LD_INT 4
 909: ST_TO_ADDR
// veh = CreateVehicle ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: CALL_OW 45
 919: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 4
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL_OW 49
// end ;
 935: LD_VAR 0 1
 939: RET
// export function PowellSupport1 ; var veh , un ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
// uc_side = 1 ;
 945: LD_ADDR_OWVAR 20
 949: PUSH
 950: LD_INT 1
 952: ST_TO_ADDR
// uc_nation = 1 ;
 953: LD_ADDR_OWVAR 21
 957: PUSH
 958: LD_INT 1
 960: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 961: LD_ADDR_EXP 9
 965: PUSH
 966: LD_STRING Brown
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: CALL 6907 0 2
 976: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
 977: LD_ADDR_EXP 10
 981: PUSH
 982: LD_STRING Gary
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: CALL 6907 0 2
 992: ST_TO_ADDR
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
 993: LD_EXP 9
 997: PPUSH
 998: LD_INT 4
1000: PPUSH
1001: LD_INT 0
1003: PPUSH
1004: CALL_OW 49
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1008: LD_EXP 10
1012: PPUSH
1013: LD_INT 4
1015: PPUSH
1016: LD_INT 0
1018: PPUSH
1019: CALL_OW 49
// SetClass ( Brown , 2 ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_INT 2
1030: PPUSH
1031: CALL_OW 336
// hc_gallery =  ;
1035: LD_ADDR_OWVAR 33
1039: PUSH
1040: LD_STRING 
1042: ST_TO_ADDR
// hc_name =  ;
1043: LD_ADDR_OWVAR 26
1047: PUSH
1048: LD_STRING 
1050: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1051: LD_ADDR_OWVAR 37
1055: PUSH
1056: LD_INT 3
1058: ST_TO_ADDR
// vc_engine = 3 ;
1059: LD_ADDR_OWVAR 39
1063: PUSH
1064: LD_INT 3
1066: ST_TO_ADDR
// vc_control = 1 ;
1067: LD_ADDR_OWVAR 38
1071: PUSH
1072: LD_INT 1
1074: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1075: LD_ADDR_OWVAR 40
1079: PUSH
1080: LD_INT 4
1082: ST_TO_ADDR
// veh = CreateVehicle ;
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: CALL_OW 45
1092: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 4
1100: PPUSH
1101: LD_INT 0
1103: PPUSH
1104: CALL_OW 49
// SetDir ( veh , 4 ) ;
1108: LD_VAR 0 2
1112: PPUSH
1113: LD_INT 4
1115: PPUSH
1116: CALL_OW 233
// PrepareHuman ( false , 4 , 10 ) ;
1120: LD_INT 0
1122: PPUSH
1123: LD_INT 4
1125: PPUSH
1126: LD_INT 10
1128: PPUSH
1129: CALL_OW 380
// un = CreateHuman ;
1133: LD_ADDR_VAR 0 3
1137: PUSH
1138: CALL_OW 44
1142: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1143: LD_VAR 0 3
1147: PPUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: CALL_OW 52
// vc_chassis = us_medium_wheeled ;
1157: LD_ADDR_OWVAR 37
1161: PUSH
1162: LD_INT 2
1164: ST_TO_ADDR
// vc_weapon = us_double_gun ;
1165: LD_ADDR_OWVAR 40
1169: PUSH
1170: LD_INT 5
1172: ST_TO_ADDR
// veh = CreateVehicle ;
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: CALL_OW 45
1182: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1183: LD_VAR 0 2
1187: PPUSH
1188: LD_INT 4
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 49
// SetDir ( veh , 4 ) ;
1198: LD_VAR 0 2
1202: PPUSH
1203: LD_INT 4
1205: PPUSH
1206: CALL_OW 233
// PrepareHuman ( false , 4 , 10 ) ;
1210: LD_INT 0
1212: PPUSH
1213: LD_INT 4
1215: PPUSH
1216: LD_INT 10
1218: PPUSH
1219: CALL_OW 380
// un = CreateHuman ;
1223: LD_ADDR_VAR 0 3
1227: PUSH
1228: CALL_OW 44
1232: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1233: LD_VAR 0 3
1237: PPUSH
1238: LD_VAR 0 2
1242: PPUSH
1243: CALL_OW 52
// vc_control = 3 ;
1247: LD_ADDR_OWVAR 38
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1255: LD_ADDR_OWVAR 40
1259: PUSH
1260: LD_INT 12
1262: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
1263: LD_ADDR_EXP 11
1267: PUSH
1268: CALL_OW 45
1272: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
1273: LD_ADDR_EXP 12
1277: PUSH
1278: CALL_OW 45
1282: ST_TO_ADDR
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
1283: LD_EXP 11
1287: PPUSH
1288: LD_INT 4
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
1298: LD_EXP 12
1302: PPUSH
1303: LD_INT 4
1305: PPUSH
1306: LD_INT 0
1308: PPUSH
1309: CALL_OW 49
// SetDir ( amCargo1 , 4 ) ;
1313: LD_EXP 11
1317: PPUSH
1318: LD_INT 4
1320: PPUSH
1321: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
1325: LD_EXP 12
1329: PPUSH
1330: LD_INT 4
1332: PPUSH
1333: CALL_OW 233
// AddCargo ( amCargo1 , 3 , 100 ) ;
1337: LD_EXP 11
1341: PPUSH
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 100
1347: PPUSH
1348: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
1352: LD_EXP 12
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: LD_INT 80
1362: PPUSH
1363: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
1367: LD_EXP 12
1371: PPUSH
1372: LD_INT 3
1374: PPUSH
1375: LD_INT 20
1377: PPUSH
1378: CALL_OW 291
// end ;
1382: LD_VAR 0 1
1386: RET
// export function PowellSupport2 ; var veh , un ; begin
1387: LD_INT 0
1389: PPUSH
1390: PPUSH
1391: PPUSH
// uc_side = 1 ;
1392: LD_ADDR_OWVAR 20
1396: PUSH
1397: LD_INT 1
1399: ST_TO_ADDR
// uc_nation = 1 ;
1400: LD_ADDR_OWVAR 21
1404: PUSH
1405: LD_INT 1
1407: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
1408: LD_ADDR_EXP 13
1412: PUSH
1413: LD_STRING Bobby
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL 6907 0 2
1423: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
1424: LD_ADDR_EXP 8
1428: PUSH
1429: LD_STRING Campell
1431: PPUSH
1432: LD_INT 0
1434: PPUSH
1435: CALL 6907 0 2
1439: ST_TO_ADDR
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
1440: LD_EXP 13
1444: PPUSH
1445: LD_INT 4
1447: PPUSH
1448: LD_INT 0
1450: PPUSH
1451: CALL_OW 49
// hc_gallery =  ;
1455: LD_ADDR_OWVAR 33
1459: PUSH
1460: LD_STRING 
1462: ST_TO_ADDR
// hc_name =  ;
1463: LD_ADDR_OWVAR 26
1467: PUSH
1468: LD_STRING 
1470: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1471: LD_ADDR_OWVAR 37
1475: PUSH
1476: LD_INT 2
1478: ST_TO_ADDR
// vc_engine = 3 ;
1479: LD_ADDR_OWVAR 39
1483: PUSH
1484: LD_INT 3
1486: ST_TO_ADDR
// vc_control = 1 ;
1487: LD_ADDR_OWVAR 38
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// vc_weapon = us_light_gun ;
1495: LD_ADDR_OWVAR 40
1499: PUSH
1500: LD_INT 3
1502: ST_TO_ADDR
// veh = CreateVehicle ;
1503: LD_ADDR_VAR 0 2
1507: PUSH
1508: CALL_OW 45
1512: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1513: LD_VAR 0 2
1517: PPUSH
1518: LD_INT 4
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 49
// SetDir ( veh , 4 ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_INT 4
1535: PPUSH
1536: CALL_OW 233
// PlaceHumanInUnit ( Campell , veh ) ;
1540: LD_EXP 8
1544: PPUSH
1545: LD_VAR 0 2
1549: PPUSH
1550: CALL_OW 52
// vc_control = 3 ;
1554: LD_ADDR_OWVAR 38
1558: PUSH
1559: LD_INT 3
1561: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1562: LD_ADDR_OWVAR 40
1566: PUSH
1567: LD_INT 12
1569: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
1570: LD_ADDR_EXP 14
1574: PUSH
1575: CALL_OW 45
1579: ST_TO_ADDR
// amCargo4 = CreateVehicle ;
1580: LD_ADDR_EXP 15
1584: PUSH
1585: CALL_OW 45
1589: ST_TO_ADDR
// amCargo5 = CreateVehicle ;
1590: LD_ADDR_EXP 16
1594: PUSH
1595: CALL_OW 45
1599: ST_TO_ADDR
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
1600: LD_EXP 14
1604: PPUSH
1605: LD_INT 4
1607: PPUSH
1608: LD_INT 0
1610: PPUSH
1611: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
1615: LD_EXP 15
1619: PPUSH
1620: LD_INT 4
1622: PPUSH
1623: LD_INT 0
1625: PPUSH
1626: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
1630: LD_EXP 16
1634: PPUSH
1635: LD_INT 4
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: CALL_OW 49
// SetDir ( amCargo3 , 4 ) ;
1645: LD_EXP 14
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: CALL_OW 233
// SetDir ( amCargo4 , 4 ) ;
1657: LD_EXP 15
1661: PPUSH
1662: LD_INT 4
1664: PPUSH
1665: CALL_OW 233
// SetDir ( amCargo5 , 4 ) ;
1669: LD_EXP 16
1673: PPUSH
1674: LD_INT 4
1676: PPUSH
1677: CALL_OW 233
// AddCargo ( amCargo3 , 1 , 100 ) ;
1681: LD_EXP 14
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 100
1691: PPUSH
1692: CALL_OW 291
// AddCargo ( amCargo4 , 2 , 100 ) ;
1696: LD_EXP 15
1700: PPUSH
1701: LD_INT 2
1703: PPUSH
1704: LD_INT 100
1706: PPUSH
1707: CALL_OW 291
// AddCargo ( amCargo5 , 1 , 50 ) ;
1711: LD_EXP 16
1715: PPUSH
1716: LD_INT 1
1718: PPUSH
1719: LD_INT 50
1721: PPUSH
1722: CALL_OW 291
// AddCargo ( amCargo5 , 2 , 50 ) ;
1726: LD_EXP 16
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: LD_INT 50
1736: PPUSH
1737: CALL_OW 291
// end ;
1741: LD_VAR 0 1
1745: RET
// export function PowellSupport3 ; var veh , un ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
// uc_side = 1 ;
1751: LD_ADDR_OWVAR 20
1755: PUSH
1756: LD_INT 1
1758: ST_TO_ADDR
// uc_nation = 1 ;
1759: LD_ADDR_OWVAR 21
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// hc_gallery =  ;
1767: LD_ADDR_OWVAR 33
1771: PUSH
1772: LD_STRING 
1774: ST_TO_ADDR
// hc_name =  ;
1775: LD_ADDR_OWVAR 26
1779: PUSH
1780: LD_STRING 
1782: ST_TO_ADDR
// PrepareHuman ( false , 1 , 10 ) ;
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 1
1788: PPUSH
1789: LD_INT 10
1791: PPUSH
1792: CALL_OW 380
// un = CreateHuman ;
1796: LD_ADDR_VAR 0 3
1800: PUSH
1801: CALL_OW 44
1805: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
1806: LD_VAR 0 3
1810: PPUSH
1811: LD_INT 4
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL_OW 49
// vc_chassis = us_medium_wheeled ;
1821: LD_ADDR_OWVAR 37
1825: PUSH
1826: LD_INT 2
1828: ST_TO_ADDR
// vc_engine = 3 ;
1829: LD_ADDR_OWVAR 39
1833: PUSH
1834: LD_INT 3
1836: ST_TO_ADDR
// vc_control = 3 ;
1837: LD_ADDR_OWVAR 38
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
1845: LD_ADDR_OWVAR 40
1849: PUSH
1850: LD_INT 12
1852: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
1853: LD_ADDR_EXP 17
1857: PUSH
1858: CALL_OW 45
1862: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
1863: LD_ADDR_EXP 18
1867: PUSH
1868: CALL_OW 45
1872: ST_TO_ADDR
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
1873: LD_EXP 17
1877: PPUSH
1878: LD_INT 4
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
1888: LD_EXP 18
1892: PPUSH
1893: LD_INT 4
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// SetDir ( amCargo6 , 4 ) ;
1903: LD_EXP 17
1907: PPUSH
1908: LD_INT 4
1910: PPUSH
1911: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
1915: LD_EXP 18
1919: PPUSH
1920: LD_INT 4
1922: PPUSH
1923: CALL_OW 233
// AddCargo ( amCargo6 , 1 , 100 ) ;
1927: LD_EXP 17
1931: PPUSH
1932: LD_INT 1
1934: PPUSH
1935: LD_INT 100
1937: PPUSH
1938: CALL_OW 291
// AddCargo ( amCargo7 , 2 , 100 ) ;
1942: LD_EXP 18
1946: PPUSH
1947: LD_INT 2
1949: PPUSH
1950: LD_INT 100
1952: PPUSH
1953: CALL_OW 291
// end ; end_of_file
1957: LD_VAR 0 1
1961: RET
// export function PrepareRussianCommander ; begin
1962: LD_INT 0
1964: PPUSH
// uc_side = 3 ;
1965: LD_ADDR_OWVAR 20
1969: PUSH
1970: LD_INT 3
1972: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
1973: LD_ADDR_EXP 20
1977: PUSH
1978: LD_STRING Davidov
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL 6907 0 2
1988: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
1989: LD_EXP 20
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2001: LD_ADDR_EXP 29
2005: PUSH
2006: LD_EXP 29
2010: PUSH
2011: LD_EXP 20
2015: ADD
2016: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2017: LD_EXP 29
2021: PPUSH
2022: LD_INT 4
2024: PPUSH
2025: CALL_OW 336
// end ;
2029: LD_VAR 0 1
2033: RET
// export function PrepareEastBase ; var i , un ; begin
2034: LD_INT 0
2036: PPUSH
2037: PPUSH
2038: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2039: LD_INT 3
2041: PPUSH
2042: LD_INT 3
2044: PPUSH
2045: LD_INT 121
2047: PPUSH
2048: LD_EXP 31
2052: PPUSH
2053: LD_EXP 32
2057: PPUSH
2058: CALL_OW 12
2062: PPUSH
2063: LD_INT 1
2065: PPUSH
2066: LD_INT 3
2068: PPUSH
2069: CALL 8068 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2073: LD_INT 3
2075: PPUSH
2076: LD_INT 3
2078: PPUSH
2079: LD_INT 121
2081: PPUSH
2082: LD_EXP 31
2086: PPUSH
2087: LD_EXP 32
2091: PPUSH
2092: CALL_OW 12
2096: PPUSH
2097: LD_INT 9
2099: PPUSH
2100: LD_INT 3
2102: PPUSH
2103: CALL 8068 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
2107: LD_INT 3
2109: PPUSH
2110: LD_INT 3
2112: PPUSH
2113: LD_INT 4
2115: PPUSH
2116: LD_EXP 31
2120: PPUSH
2121: LD_EXP 32
2125: PPUSH
2126: CALL_OW 12
2130: PPUSH
2131: LD_INT 2
2133: PPUSH
2134: LD_INT 6
2136: PPUSH
2137: CALL 8068 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
2141: LD_INT 3
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: LD_INT 112
2149: PPUSH
2150: LD_EXP 31
2154: PPUSH
2155: LD_EXP 32
2159: PPUSH
2160: CALL_OW 12
2164: PPUSH
2165: LD_INT 3
2167: PPUSH
2168: LD_INT 6
2170: PPUSH
2171: CALL 8068 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
2175: LD_INT 3
2177: PPUSH
2178: LD_INT 3
2180: PPUSH
2181: LD_INT 47
2183: PPUSH
2184: LD_EXP 31
2188: PPUSH
2189: LD_EXP 32
2193: PPUSH
2194: CALL_OW 12
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: LD_INT 6
2204: PPUSH
2205: CALL 8068 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
2209: LD_INT 3
2211: PPUSH
2212: LD_INT 3
2214: PPUSH
2215: LD_INT 129
2217: PPUSH
2218: LD_EXP 31
2222: PPUSH
2223: LD_EXP 32
2227: PPUSH
2228: CALL_OW 12
2232: PPUSH
2233: LD_INT 4
2235: PPUSH
2236: LD_INT 6
2238: PPUSH
2239: CALL 8068 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
2243: LD_INT 3
2245: PPUSH
2246: LD_INT 3
2248: PPUSH
2249: LD_INT 135
2251: PPUSH
2252: LD_EXP 31
2256: PPUSH
2257: LD_EXP 32
2261: PPUSH
2262: CALL_OW 12
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 6
2272: PPUSH
2273: CALL 8068 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 30
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PUSH
2311: FOR_IN
2312: IFFALSE 2352
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
2314: LD_INT 3
2316: PPUSH
2317: LD_INT 3
2319: PPUSH
2320: LD_VAR 0 2
2324: PPUSH
2325: LD_EXP 31
2329: PPUSH
2330: LD_EXP 32
2334: PPUSH
2335: CALL_OW 12
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: LD_INT 1
2345: PPUSH
2346: CALL 8068 0 6
2350: GO 2311
2352: POP
2353: POP
// for i = 1 to 5 do
2354: LD_ADDR_VAR 0 2
2358: PUSH
2359: DOUBLE
2360: LD_INT 1
2362: DEC
2363: ST_TO_ADDR
2364: LD_INT 5
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// begin uc_side = 3 ;
2370: LD_ADDR_OWVAR 20
2374: PUSH
2375: LD_INT 3
2377: ST_TO_ADDR
// uc_nation = 3 ;
2378: LD_ADDR_OWVAR 21
2382: PUSH
2383: LD_INT 3
2385: ST_TO_ADDR
// hc_gallery =  ;
2386: LD_ADDR_OWVAR 33
2390: PUSH
2391: LD_STRING 
2393: ST_TO_ADDR
// hc_name =  ;
2394: LD_ADDR_OWVAR 26
2398: PUSH
2399: LD_STRING 
2401: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
2402: LD_INT 0
2404: PPUSH
2405: LD_INT 4
2407: PPUSH
2408: LD_EXP 31
2412: PPUSH
2413: LD_EXP 32
2417: PPUSH
2418: CALL_OW 12
2422: PPUSH
2423: CALL_OW 380
// un = CreateHuman ;
2427: LD_ADDR_VAR 0 3
2431: PUSH
2432: CALL_OW 44
2436: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
2437: LD_VAR 0 3
2441: PPUSH
2442: LD_INT 3
2444: PPUSH
2445: CALL_OW 52
// RuScientists = RuScientists ^ un ;
2449: LD_ADDR_EXP 29
2453: PUSH
2454: LD_EXP 29
2458: PUSH
2459: LD_VAR 0 3
2463: ADD
2464: ST_TO_ADDR
// end ;
2465: GO 2367
2467: POP
2468: POP
// end ;
2469: LD_VAR 0 1
2473: RET
// export function PrepareWestBase ; var i , un ; begin
2474: LD_INT 0
2476: PPUSH
2477: PPUSH
2478: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
2479: LD_INT 3
2481: PPUSH
2482: LD_INT 3
2484: PPUSH
2485: LD_INT 6
2487: PPUSH
2488: LD_EXP 31
2492: PPUSH
2493: LD_EXP 32
2497: PPUSH
2498: CALL_OW 12
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL 8068 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
2513: LD_INT 3
2515: PPUSH
2516: LD_INT 3
2518: PPUSH
2519: LD_INT 91
2521: PPUSH
2522: LD_EXP 31
2526: PPUSH
2527: LD_EXP 32
2531: PPUSH
2532: CALL_OW 12
2536: PPUSH
2537: LD_INT 4
2539: PPUSH
2540: LD_INT 3
2542: PPUSH
2543: CALL 8068 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
2547: LD_INT 3
2549: PPUSH
2550: LD_INT 3
2552: PPUSH
2553: LD_INT 21
2555: PPUSH
2556: LD_EXP 31
2560: PPUSH
2561: LD_EXP 32
2565: PPUSH
2566: CALL_OW 12
2570: PPUSH
2571: LD_INT 3
2573: PPUSH
2574: LD_INT 6
2576: PPUSH
2577: CALL 8068 0 6
// end ;
2581: LD_VAR 0 1
2585: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
2586: LD_INT 0
2588: PPUSH
2589: PPUSH
2590: PPUSH
2591: PPUSH
// uc_side = 3 ;
2592: LD_ADDR_OWVAR 20
2596: PUSH
2597: LD_INT 3
2599: ST_TO_ADDR
// uc_nation = 3 ;
2600: LD_ADDR_OWVAR 21
2604: PUSH
2605: LD_INT 3
2607: ST_TO_ADDR
// for i = 1 to 5 do
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 5
2620: PUSH
2621: FOR_TO
2622: IFFALSE 2692
// begin hc_gallery =  ;
2624: LD_ADDR_OWVAR 33
2628: PUSH
2629: LD_STRING 
2631: ST_TO_ADDR
// hc_name =  ;
2632: LD_ADDR_OWVAR 26
2636: PUSH
2637: LD_STRING 
2639: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
2640: LD_INT 0
2642: PPUSH
2643: LD_INT 9
2645: PPUSH
2646: LD_EXP 31
2650: PPUSH
2651: LD_EXP 32
2655: PPUSH
2656: CALL_OW 12
2660: PPUSH
2661: CALL_OW 380
// un = CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_INT 8
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 49
// end ;
2690: GO 2621
2692: POP
2693: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: DOUBLE
2700: LD_INT 1
2702: DEC
2703: ST_TO_ADDR
2704: LD_INT 2
2706: PUSH
2707: LD_INT 3
2709: PUSH
2710: LD_INT 4
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: PUSH
2718: LD_OWVAR 67
2722: ARRAY
2723: PUSH
2724: FOR_TO
2725: IFFALSE 2795
// begin hc_gallery =  ;
2727: LD_ADDR_OWVAR 33
2731: PUSH
2732: LD_STRING 
2734: ST_TO_ADDR
// hc_name =  ;
2735: LD_ADDR_OWVAR 26
2739: PUSH
2740: LD_STRING 
2742: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
2743: LD_INT 0
2745: PPUSH
2746: LD_INT 4
2748: PPUSH
2749: LD_EXP 31
2753: PPUSH
2754: LD_EXP 32
2758: PPUSH
2759: CALL_OW 12
2763: PPUSH
2764: CALL_OW 380
// un = CreateHuman ;
2768: LD_ADDR_VAR 0 3
2772: PUSH
2773: CALL_OW 44
2777: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
2778: LD_VAR 0 3
2782: PPUSH
2783: LD_INT 8
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL_OW 49
// end ;
2793: GO 2724
2795: POP
2796: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: DOUBLE
2803: LD_INT 1
2805: DEC
2806: ST_TO_ADDR
2807: LD_INT 3
2809: PUSH
2810: LD_INT 4
2812: PUSH
2813: LD_INT 5
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: PUSH
2821: LD_OWVAR 67
2825: ARRAY
2826: PUSH
2827: FOR_TO
2828: IFFALSE 3024
// begin vc_engine = 3 ;
2830: LD_ADDR_OWVAR 39
2834: PUSH
2835: LD_INT 3
2837: ST_TO_ADDR
// vc_control = 1 ;
2838: LD_ADDR_OWVAR 38
2842: PUSH
2843: LD_INT 1
2845: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
2846: LD_ADDR_OWVAR 40
2850: PUSH
2851: LD_INT 42
2853: PUSH
2854: LD_INT 43
2856: PUSH
2857: LD_INT 44
2859: PUSH
2860: LD_INT 45
2862: PUSH
2863: LD_INT 46
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: PUSH
2873: LD_INT 1
2875: PPUSH
2876: LD_INT 5
2878: PPUSH
2879: CALL_OW 12
2883: ARRAY
2884: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
2885: LD_OWVAR 40
2889: PUSH
2890: LD_INT 46
2892: EQUAL
2893: IFFALSE 2905
// vc_chassis = ru_heavy_tracked else
2895: LD_ADDR_OWVAR 37
2899: PUSH
2900: LD_INT 24
2902: ST_TO_ADDR
2903: GO 2932
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
2905: LD_ADDR_OWVAR 37
2909: PUSH
2910: LD_INT 22
2912: PUSH
2913: LD_INT 21
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 1
2922: PPUSH
2923: LD_INT 2
2925: PPUSH
2926: CALL_OW 12
2930: ARRAY
2931: ST_TO_ADDR
// veh = CreateVehicle ;
2932: LD_ADDR_VAR 0 4
2936: PUSH
2937: CALL_OW 45
2941: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2942: LD_VAR 0 4
2946: PPUSH
2947: LD_INT 3
2949: PPUSH
2950: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
2954: LD_VAR 0 4
2958: PPUSH
2959: LD_INT 5
2961: PPUSH
2962: LD_INT 0
2964: PPUSH
2965: CALL_OW 49
// hc_gallery =  ;
2969: LD_ADDR_OWVAR 33
2973: PUSH
2974: LD_STRING 
2976: ST_TO_ADDR
// hc_name =  ;
2977: LD_ADDR_OWVAR 26
2981: PUSH
2982: LD_STRING 
2984: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
2985: LD_INT 0
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: LD_INT 10
2993: PPUSH
2994: CALL_OW 380
// un = CreateHuman ;
2998: LD_ADDR_VAR 0 3
3002: PUSH
3003: CALL_OW 44
3007: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_VAR 0 4
3017: PPUSH
3018: CALL_OW 52
// end ;
3022: GO 2827
3024: POP
3025: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 3
3038: PUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 5
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: LIST
3049: PUSH
3050: LD_OWVAR 67
3054: ARRAY
3055: PUSH
3056: FOR_TO
3057: IFFALSE 3204
// begin vc_engine = 3 ;
3059: LD_ADDR_OWVAR 39
3063: PUSH
3064: LD_INT 3
3066: ST_TO_ADDR
// vc_control = 3 ;
3067: LD_ADDR_OWVAR 38
3071: PUSH
3072: LD_INT 3
3074: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3075: LD_ADDR_OWVAR 40
3079: PUSH
3080: LD_INT 42
3082: PUSH
3083: LD_INT 43
3085: PUSH
3086: LD_INT 44
3088: PUSH
3089: LD_INT 45
3091: PUSH
3092: LD_INT 46
3094: PUSH
3095: LD_INT 49
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 5
3111: PPUSH
3112: CALL_OW 12
3116: ARRAY
3117: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3118: LD_OWVAR 40
3122: PUSH
3123: LD_INT 46
3125: EQUAL
3126: IFFALSE 3138
// vc_chassis = ru_heavy_tracked else
3128: LD_ADDR_OWVAR 37
3132: PUSH
3133: LD_INT 24
3135: ST_TO_ADDR
3136: GO 3165
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3138: LD_ADDR_OWVAR 37
3142: PUSH
3143: LD_INT 22
3145: PUSH
3146: LD_INT 21
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PUSH
3153: LD_INT 1
3155: PPUSH
3156: LD_INT 2
3158: PPUSH
3159: CALL_OW 12
3163: ARRAY
3164: ST_TO_ADDR
// veh = CreateVehicle ;
3165: LD_ADDR_VAR 0 4
3169: PUSH
3170: CALL_OW 45
3174: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3175: LD_VAR 0 4
3179: PPUSH
3180: LD_INT 3
3182: PPUSH
3183: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
3187: LD_VAR 0 4
3191: PPUSH
3192: LD_INT 6
3194: PPUSH
3195: LD_INT 0
3197: PPUSH
3198: CALL_OW 49
// end ;
3202: GO 3056
3204: POP
3205: POP
// end ; end_of_file
3206: LD_VAR 0 1
3210: RET
// export function PrepareKurt ; begin
3211: LD_INT 0
3213: PPUSH
// uc_side = 8 ;
3214: LD_ADDR_OWVAR 20
3218: PUSH
3219: LD_INT 8
3221: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3222: LD_ADDR_EXP 21
3226: PUSH
3227: LD_STRING Kurt
3229: PPUSH
3230: LD_INT 0
3232: PPUSH
3233: CALL 6907 0 2
3237: ST_TO_ADDR
// PlaceUnitArea ( Kurt , PlayerSpawn , false ) ;
3238: LD_EXP 21
3242: PPUSH
3243: LD_INT 4
3245: PPUSH
3246: LD_INT 0
3248: PPUSH
3249: CALL_OW 49
// end ;
3253: LD_VAR 0 1
3257: RET
// export function PrepareLegionForPlayer ; var i , un ; begin
3258: LD_INT 0
3260: PPUSH
3261: PPUSH
3262: PPUSH
// for i = 1 to 6 do
3263: LD_ADDR_VAR 0 2
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_INT 6
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3378
// begin uc_side = 1 ;
3279: LD_ADDR_OWVAR 20
3283: PUSH
3284: LD_INT 1
3286: ST_TO_ADDR
// uc_nation = 2 ;
3287: LD_ADDR_OWVAR 21
3291: PUSH
3292: LD_INT 2
3294: ST_TO_ADDR
// hc_gallery =  ;
3295: LD_ADDR_OWVAR 33
3299: PUSH
3300: LD_STRING 
3302: ST_TO_ADDR
// hc_name =  ;
3303: LD_ADDR_OWVAR 26
3307: PUSH
3308: LD_STRING 
3310: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , 10 ) ;
3311: LD_INT 0
3313: PPUSH
3314: LD_INT 1
3316: PUSH
3317: LD_INT 2
3319: PUSH
3320: LD_INT 3
3322: PUSH
3323: LD_INT 4
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: PUSH
3332: LD_INT 1
3334: PPUSH
3335: LD_INT 4
3337: PPUSH
3338: CALL_OW 12
3342: ARRAY
3343: PPUSH
3344: LD_INT 10
3346: PPUSH
3347: CALL_OW 380
// un = CreateHuman ;
3351: LD_ADDR_VAR 0 3
3355: PUSH
3356: CALL_OW 44
3360: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
3361: LD_VAR 0 3
3365: PPUSH
3366: LD_INT 4
3368: PPUSH
3369: LD_INT 0
3371: PPUSH
3372: CALL_OW 49
// end ;
3376: GO 3276
3378: POP
3379: POP
// end ; end_of_file
3380: LD_VAR 0 1
3384: RET
// every 1 do var i ;
3385: GO 3387
3387: DISABLE
3388: LD_INT 0
3390: PPUSH
// begin TeleportExit ( ruteleprt , 117 , 131 ) ;
3391: LD_INT 10
3393: PPUSH
3394: LD_INT 117
3396: PPUSH
3397: LD_INT 131
3399: PPUSH
3400: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3404: LD_INT 137
3406: PPUSH
3407: LD_INT 84
3409: PPUSH
3410: LD_INT 61
3412: PPUSH
3413: CALL_OW 243
// CenterNowOnUnits ( JMM ) ;
3417: LD_EXP 1
3421: PPUSH
3422: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 102 ) ;
3426: LD_INT 22
3428: PUSH
3429: LD_INT 1
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: PPUSH
3441: LD_INT 130
3443: PPUSH
3444: LD_INT 102
3446: PPUSH
3447: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
3451: LD_VAR 0 1
3455: PPUSH
3456: LD_INT 114
3458: PPUSH
3459: LD_INT 102
3461: PPUSH
3462: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
3466: LD_EXP 1
3470: PPUSH
3471: LD_STRING D1-JMM-1
3473: PPUSH
3474: CALL_OW 88
// Say ( Donaldson , D1-Don-1 ) ;
3478: LD_EXP 2
3482: PPUSH
3483: LD_STRING D1-Don-1
3485: PPUSH
3486: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3490: LD_EXP 1
3494: PPUSH
3495: LD_STRING D1-JMM-2
3497: PPUSH
3498: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
3502: LD_EXP 2
3506: PPUSH
3507: LD_STRING D1-Don-2
3509: PPUSH
3510: CALL_OW 88
// AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 104 , 96 ) ;
3514: LD_INT 22
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: PPUSH
3529: LD_INT 104
3531: PPUSH
3532: LD_INT 96
3534: PPUSH
3535: CALL_OW 171
// end ;
3539: PPOPN 1
3541: END
// every 0 0$1 trigger SeeXY ( 1 , 101 , 92 ) do var i ;
3542: LD_INT 1
3544: PPUSH
3545: LD_INT 101
3547: PPUSH
3548: LD_INT 92
3550: PPUSH
3551: CALL_OW 293
3555: IFFALSE 3733
3557: GO 3559
3559: DISABLE
3560: LD_INT 0
3562: PPUSH
// begin CenterOnXY ( 90 , 70 ) ;
3563: LD_INT 90
3565: PPUSH
3566: LD_INT 70
3568: PPUSH
3569: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1-Sol1-2 ,  ) ;
3573: LD_INT 22
3575: PUSH
3576: LD_INT 1
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 26
3585: PUSH
3586: LD_INT 1
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 2
3595: PUSH
3596: LD_INT 25
3598: PUSH
3599: LD_INT 1
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 25
3608: PUSH
3609: LD_INT 2
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 25
3618: PUSH
3619: LD_INT 3
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 25
3628: PUSH
3629: LD_INT 4
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: LD_EXP 1
3652: PUSH
3653: EMPTY
3654: LIST
3655: DIFF
3656: PPUSH
3657: CALL_OW 69
3661: PPUSH
3662: LD_STRING D1-Sol1-2
3664: PPUSH
3665: LD_STRING 
3667: PPUSH
3668: CALL 6964 0 3
// Say ( JMM , D1-JMM-3 ) ;
3672: LD_EXP 1
3676: PPUSH
3677: LD_STRING D1-JMM-3
3679: PPUSH
3680: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
3684: LD_STRING M1
3686: PPUSH
3687: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
3691: LD_ADDR_VAR 0 1
3695: PUSH
3696: LD_INT 22
3698: PUSH
3699: LD_INT 1
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PPUSH
3706: CALL_OW 69
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3731
// ComMoveXY ( i , 93 , 83 ) ;
3714: LD_VAR 0 1
3718: PPUSH
3719: LD_INT 93
3721: PPUSH
3722: LD_INT 83
3724: PPUSH
3725: CALL_OW 111
3729: GO 3711
3731: POP
3732: POP
// end ;
3733: PPOPN 1
3735: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
3736: GO 3738
3738: DISABLE
3739: LD_INT 0
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: LD_INT 8
3752: PPUSH
3753: LD_INT 22
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: LD_INT 25
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PPUSH
3777: CALL_OW 70
3781: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 22
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: PPUSH
3800: CALL_OW 69
3804: ST_TO_ADDR
// enable ;
3805: ENABLE
// for i in your_units do
3806: LD_ADDR_VAR 0 1
3810: PUSH
3811: LD_VAR 0 3
3815: PUSH
3816: FOR_IN
3817: IFFALSE 4410
// begin if See ( 3 , i ) then
3819: LD_INT 3
3821: PPUSH
3822: LD_VAR 0 1
3826: PPUSH
3827: CALL_OW 292
3831: IFFALSE 4408
// begin disable ;
3833: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
3834: LD_VAR 0 2
3838: PPUSH
3839: LD_INT 96
3841: PPUSH
3842: LD_INT 85
3844: PPUSH
3845: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_INT 96
3856: PPUSH
3857: LD_INT 85
3859: PPUSH
3860: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3864: LD_VAR 0 2
3868: PPUSH
3869: LD_INT 96
3871: PPUSH
3872: LD_INT 85
3874: PPUSH
3875: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 96
3886: PPUSH
3887: LD_INT 85
3889: PPUSH
3890: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3894: LD_VAR 0 2
3898: PPUSH
3899: LD_INT 96
3901: PPUSH
3902: LD_INT 85
3904: PPUSH
3905: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
3909: LD_VAR 0 2
3913: PPUSH
3914: LD_INT 96
3916: PPUSH
3917: LD_INT 85
3919: PPUSH
3920: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
3924: LD_EXP 1
3928: PPUSH
3929: LD_STRING D1a-JMM-1
3931: PPUSH
3932: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
3936: LD_EXP 2
3940: PPUSH
3941: LD_STRING D1a-Don-1
3943: PPUSH
3944: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
3948: LD_ADDR_VAR 0 1
3952: PUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 1
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 69
3967: PUSH
3968: FOR_IN
3969: IFFALSE 3988
// ComMoveXY ( i , 109 , 102 ) ;
3971: LD_VAR 0 1
3975: PPUSH
3976: LD_INT 109
3978: PPUSH
3979: LD_INT 102
3981: PPUSH
3982: CALL_OW 111
3986: GO 3968
3988: POP
3989: POP
// Say ( JMM , D1a-JMM-2 ) ;
3990: LD_EXP 1
3994: PPUSH
3995: LD_STRING D1a-JMM-2
3997: PPUSH
3998: CALL_OW 88
// wait ( 0 0$10 ) ;
4002: LD_INT 350
4004: PPUSH
4005: CALL_OW 67
// Say ( Donaldson , D1b-Don-1 ) ;
4009: LD_EXP 2
4013: PPUSH
4014: LD_STRING D1b-Don-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D1b-JMM-1
4028: PPUSH
4029: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
4033: LD_INT 22
4035: PUSH
4036: LD_INT 1
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 26
4045: PUSH
4046: LD_INT 1
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 25
4058: PUSH
4059: LD_INT 1
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 25
4068: PUSH
4069: LD_INT 2
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 25
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 4
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_EXP 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: DIFF
4116: PPUSH
4117: CALL_OW 69
4121: PPUSH
4122: LD_STRING D1b-Sol1-1
4124: PPUSH
4125: LD_STRING 
4127: PPUSH
4128: CALL 6964 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
4132: LD_EXP 2
4136: PPUSH
4137: LD_STRING D1b-Don-2
4139: PPUSH
4140: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
4144: LD_EXP 1
4148: PPUSH
4149: LD_STRING D1b-JMM-2
4151: PPUSH
4152: CALL_OW 88
// dec = ShowQuery1 ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: CALL 7364 0 0
4165: ST_TO_ADDR
// if dec = 1 then
4166: LD_VAR 0 4
4170: PUSH
4171: LD_INT 1
4173: EQUAL
4174: IFFALSE 4280
// begin Say ( JMM , D2-JMM-1 ) ;
4176: LD_EXP 1
4180: PPUSH
4181: LD_STRING D2-JMM-1
4183: PPUSH
4184: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
4188: LD_EXP 19
4192: PPUSH
4193: LD_STRING D2-Pow-1
4195: PPUSH
4196: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
4200: LD_EXP 1
4204: PPUSH
4205: LD_STRING D2a-JMM-1
4207: PPUSH
4208: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
4212: LD_EXP 19
4216: PPUSH
4217: LD_STRING D2a-Pow-1
4219: PPUSH
4220: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
4224: LD_EXP 1
4228: PPUSH
4229: LD_STRING D2a-JMM-2
4231: PPUSH
4232: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
4236: LD_EXP 19
4240: PPUSH
4241: LD_STRING D2a-Pow-2
4243: PPUSH
4244: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
4248: LD_EXP 1
4252: PPUSH
4253: LD_STRING D2a-JMM-3
4255: PPUSH
4256: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
4260: LD_EXP 19
4264: PPUSH
4265: LD_STRING D2a-Pow-3
4267: PPUSH
4268: CALL_OW 94
// secondPass = 2 ;
4272: LD_ADDR_EXP 23
4276: PUSH
4277: LD_INT 2
4279: ST_TO_ADDR
// end ; if dec = 2 then
4280: LD_VAR 0 4
4284: PUSH
4285: LD_INT 2
4287: EQUAL
4288: IFFALSE 4382
// begin Say ( JMM , D2-JMM-1 ) ;
4290: LD_EXP 1
4294: PPUSH
4295: LD_STRING D2-JMM-1
4297: PPUSH
4298: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
4302: LD_EXP 19
4306: PPUSH
4307: LD_STRING D2-Pow-1
4309: PPUSH
4310: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
4314: LD_EXP 1
4318: PPUSH
4319: LD_STRING D2b-JMM-1
4321: PPUSH
4322: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
4326: LD_EXP 19
4330: PPUSH
4331: LD_STRING D2b-Pow-1
4333: PPUSH
4334: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
4338: LD_EXP 1
4342: PPUSH
4343: LD_STRING D2c-JMM-1
4345: PPUSH
4346: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
4350: LD_EXP 19
4354: PPUSH
4355: LD_STRING D2c-Pow-1
4357: PPUSH
4358: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
4362: LD_EXP 1
4366: PPUSH
4367: LD_STRING D2c-JMM-2
4369: PPUSH
4370: CALL_OW 88
// secondPass = 2 ;
4374: LD_ADDR_EXP 23
4378: PUSH
4379: LD_INT 2
4381: ST_TO_ADDR
// end ; if dec = 3 then
4382: LD_VAR 0 4
4386: PUSH
4387: LD_INT 3
4389: EQUAL
4390: IFFALSE 4400
// secondPass = 1 ;
4392: LD_ADDR_EXP 23
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// InGameOff ;
4400: CALL_OW 9
// exit ;
4404: POP
4405: POP
4406: GO 4412
// end ; end ;
4408: GO 3816
4410: POP
4411: POP
// end ;
4412: PPOPN 4
4414: END
// every 1 1$0 trigger secondPass = 2 do
4415: LD_EXP 23
4419: PUSH
4420: LD_INT 2
4422: EQUAL
4423: IFFALSE 4550
4425: GO 4427
4427: DISABLE
// begin PowellSupport1 ;
4428: CALL 940 0 0
// DialogueOn ;
4432: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
4436: LD_EXP 1
4440: PPUSH
4441: LD_STRING DC1-JMM-1
4443: PPUSH
4444: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
4448: LD_EXP 19
4452: PPUSH
4453: LD_STRING DC1-Pow-1
4455: PPUSH
4456: CALL_OW 94
// DialogueOff ;
4460: CALL_OW 7
// wait ( 3 3$0 ) ;
4464: LD_INT 6300
4466: PPUSH
4467: CALL_OW 67
// PowellSupport2 ;
4471: CALL 1387 0 0
// DialogueOn ;
4475: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
4479: LD_EXP 1
4483: PPUSH
4484: LD_STRING DC2-JMM-1
4486: PPUSH
4487: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
4491: LD_EXP 19
4495: PPUSH
4496: LD_STRING DC2-Pow-1
4498: PPUSH
4499: CALL_OW 94
// DialogueOff ;
4503: CALL_OW 7
// wait ( 6 6$0 ) ;
4507: LD_INT 12600
4509: PPUSH
4510: CALL_OW 67
// PowellSupport3 ;
4514: CALL 1746 0 0
// DialogueOn ;
4518: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
4522: LD_EXP 19
4526: PPUSH
4527: LD_STRING DC3-Pow-1
4529: PPUSH
4530: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
4534: LD_EXP 1
4538: PPUSH
4539: LD_STRING DC3-JMM-1
4541: PPUSH
4542: CALL_OW 88
// DialogueOff ;
4546: CALL_OW 7
// end ;
4550: END
// every 4 4$30 trigger secondPass = 2 do var dec1 , dec2 ;
4551: LD_EXP 23
4555: PUSH
4556: LD_INT 2
4558: EQUAL
4559: IFFALSE 5121
4561: GO 4563
4563: DISABLE
4564: LD_INT 0
4566: PPUSH
4567: PPUSH
// begin PrepareKurt ;
4568: CALL 3211 0 0
// DialogueOn ;
4572: CALL_OW 6
// Say ( Kurt , D3-Kurt-1 ) ;
4576: LD_EXP 21
4580: PPUSH
4581: LD_STRING D3-Kurt-1
4583: PPUSH
4584: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
4588: LD_EXP 1
4592: PPUSH
4593: LD_STRING D3-JMM-1
4595: PPUSH
4596: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
4600: LD_EXP 21
4604: PPUSH
4605: LD_STRING D3-Kurt-2
4607: PPUSH
4608: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4612: LD_EXP 1
4616: PPUSH
4617: LD_STRING D3-JMM-2
4619: PPUSH
4620: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
4624: LD_EXP 21
4628: PPUSH
4629: LD_STRING D3-Kurt-4
4631: PPUSH
4632: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
4636: LD_EXP 1
4640: PPUSH
4641: LD_STRING D3-JMM-4
4643: PPUSH
4644: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
4648: LD_EXP 21
4652: PPUSH
4653: LD_STRING D3-Kurt-5
4655: PPUSH
4656: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
4660: LD_EXP 21
4664: PPUSH
4665: LD_STRING D3-Kurt-5a
4667: PPUSH
4668: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
4672: LD_EXP 21
4676: PPUSH
4677: LD_STRING D3-Kurt-5b
4679: PPUSH
4680: CALL_OW 88
// dec1 = ShowQuery4 ;
4684: LD_ADDR_VAR 0 1
4688: PUSH
4689: CALL 7605 0 0
4693: ST_TO_ADDR
// if dec1 = 1 then
4694: LD_VAR 0 1
4698: PUSH
4699: LD_INT 1
4701: EQUAL
4702: IFFALSE 4736
// begin Say ( JMM , D3Ka-JMM-1 ) ;
4704: LD_EXP 1
4708: PPUSH
4709: LD_STRING D3Ka-JMM-1
4711: PPUSH
4712: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
4716: LD_EXP 21
4720: PPUSH
4721: LD_STRING D3Ka-Kurt-1
4723: PPUSH
4724: CALL_OW 88
// warWithLegion = 1 ;
4728: LD_ADDR_EXP 25
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// end ; if dec1 = 2 then
4736: LD_VAR 0 1
4740: PUSH
4741: LD_INT 2
4743: EQUAL
4744: IFFALSE 4770
// begin Say ( JMM , D3Kb-JMM-1 ) ;
4746: LD_EXP 1
4750: PPUSH
4751: LD_STRING D3Kb-JMM-1
4753: PPUSH
4754: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
4758: LD_EXP 21
4762: PPUSH
4763: LD_STRING D3Kb-Kurt-1
4765: PPUSH
4766: CALL_OW 88
// end ; if dec1 = 3 then
4770: LD_VAR 0 1
4774: PUSH
4775: LD_INT 3
4777: EQUAL
4778: IFFALSE 4996
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
4780: LD_EXP 1
4784: PPUSH
4785: LD_STRING D3Kc1-JMM-1
4787: PPUSH
4788: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
4792: LD_EXP 21
4796: PPUSH
4797: LD_STRING D3Kc1-Kurt-1
4799: PPUSH
4800: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
4804: LD_EXP 1
4808: PPUSH
4809: LD_STRING D3Kc1-JMM-2
4811: PPUSH
4812: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
4816: LD_EXP 21
4820: PPUSH
4821: LD_STRING D3Kc1-Kurt-2
4823: PPUSH
4824: CALL_OW 88
// askSiberite = 1 ;
4828: LD_ADDR_EXP 27
4832: PUSH
4833: LD_INT 1
4835: ST_TO_ADDR
// dec2 = ShowQuery7 ;
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: CALL 7884 0 0
4845: ST_TO_ADDR
// if dec2 = 1 then
4846: LD_VAR 0 2
4850: PUSH
4851: LD_INT 1
4853: EQUAL
4854: IFFALSE 4888
// begin Say ( JMM , D4a-JMM-1 ) ;
4856: LD_EXP 1
4860: PPUSH
4861: LD_STRING D4a-JMM-1
4863: PPUSH
4864: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
4868: LD_EXP 21
4872: PPUSH
4873: LD_STRING D4b-Kurt-1
4875: PPUSH
4876: CALL_OW 88
// warWithLegion = 1 ;
4880: LD_ADDR_EXP 25
4884: PUSH
4885: LD_INT 1
4887: ST_TO_ADDR
// end ; if dec2 = 2 then
4888: LD_VAR 0 2
4892: PUSH
4893: LD_INT 2
4895: EQUAL
4896: IFFALSE 4930
// begin Say ( JMM , D4b-JMM-1 ) ;
4898: LD_EXP 1
4902: PPUSH
4903: LD_STRING D4b-JMM-1
4905: PPUSH
4906: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
4910: LD_EXP 21
4914: PPUSH
4915: LD_STRING D4b-Kurt-1
4917: PPUSH
4918: CALL_OW 88
// warWithLegion = 1 ;
4922: LD_ADDR_EXP 25
4926: PUSH
4927: LD_INT 1
4929: ST_TO_ADDR
// end ; if dec2 = 3 then
4930: LD_VAR 0 2
4934: PUSH
4935: LD_INT 3
4937: EQUAL
4938: IFFALSE 4996
// begin Say ( JMM , D4c-JMM-1 ) ;
4940: LD_EXP 1
4944: PPUSH
4945: LD_STRING D4c-JMM-1
4947: PPUSH
4948: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
4952: LD_EXP 21
4956: PPUSH
4957: LD_STRING D4c-Kurt-1
4959: PPUSH
4960: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
4964: LD_EXP 1
4968: PPUSH
4969: LD_STRING D4c-JMM-2
4971: PPUSH
4972: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
4976: LD_EXP 21
4980: PPUSH
4981: LD_STRING D4c-Kurt-2
4983: PPUSH
4984: CALL_OW 88
// fakeInfo = 1 ;
4988: LD_ADDR_EXP 26
4992: PUSH
4993: LD_INT 1
4995: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
4996: LD_VAR 0 1
5000: PUSH
5001: LD_INT 4
5003: EQUAL
5004: IFFALSE 5108
// begin Say ( Kurt , D3Kd-JMM-1 ) ;
5006: LD_EXP 21
5010: PPUSH
5011: LD_STRING D3Kd-JMM-1
5013: PPUSH
5014: CALL_OW 88
// dec2 = ShowQuery8 ;
5018: LD_ADDR_VAR 0 2
5022: PUSH
5023: CALL 7958 0 0
5027: ST_TO_ADDR
// if dec2 = 1 then
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 1
5035: EQUAL
5036: IFFALSE 5070
// begin Say ( JMM , D5Ka-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D5Ka-JMM-1
5045: PPUSH
5046: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
5050: LD_EXP 21
5054: PPUSH
5055: LD_STRING D5Ka-Kurt-1
5057: PPUSH
5058: CALL_OW 88
// warWithLegion = 1 ;
5062: LD_ADDR_EXP 25
5066: PUSH
5067: LD_INT 1
5069: ST_TO_ADDR
// end ; if dec2 = 2 then
5070: LD_VAR 0 2
5074: PUSH
5075: LD_INT 2
5077: EQUAL
5078: IFFALSE 5108
// begin Say ( JMM , D3Ke-JMM-1 ) ;
5080: LD_EXP 1
5084: PPUSH
5085: LD_STRING D3Ke-JMM-1
5087: PPUSH
5088: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
5092: LD_EXP 21
5096: PPUSH
5097: LD_STRING D3Ke-Kurt-1
5099: PPUSH
5100: CALL_OW 88
// PrepareLegionForPlayer ;
5104: CALL 3258 0 0
// end ; end ; DialogueOff ;
5108: CALL_OW 7
// RemoveUnit ( Kurt ) ;
5112: LD_EXP 21
5116: PPUSH
5117: CALL_OW 64
// end ;
5121: PPOPN 2
5123: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 3 ) do
5124: LD_EXP 11
5128: PPUSH
5129: CALL_OW 305
5133: PUSH
5134: LD_EXP 11
5138: PPUSH
5139: LD_INT 3
5141: PPUSH
5142: CALL_OW 289
5146: NOT
5147: AND
5148: IFFALSE 5165
5150: GO 5152
5152: DISABLE
// SetSide ( amCargo1 , 4 ) ;
5153: LD_EXP 11
5157: PPUSH
5158: LD_INT 4
5160: PPUSH
5161: CALL_OW 235
5165: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 3 ) do
5166: LD_EXP 12
5170: PPUSH
5171: CALL_OW 305
5175: PUSH
5176: LD_EXP 12
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 289
5188: NOT
5189: AND
5190: PUSH
5191: LD_EXP 12
5195: PPUSH
5196: LD_INT 3
5198: PPUSH
5199: CALL_OW 289
5203: NOT
5204: AND
5205: IFFALSE 5222
5207: GO 5209
5209: DISABLE
// SetSide ( amCargo2 , 4 ) ;
5210: LD_EXP 12
5214: PPUSH
5215: LD_INT 4
5217: PPUSH
5218: CALL_OW 235
5222: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo3 , 1 ) do
5223: LD_EXP 12
5227: PPUSH
5228: CALL_OW 305
5232: PUSH
5233: LD_EXP 14
5237: PPUSH
5238: LD_INT 1
5240: PPUSH
5241: CALL_OW 289
5245: NOT
5246: AND
5247: IFFALSE 5264
5249: GO 5251
5251: DISABLE
// SetSide ( amCargo3 , 4 ) ;
5252: LD_EXP 14
5256: PPUSH
5257: LD_INT 4
5259: PPUSH
5260: CALL_OW 235
5264: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo4 , 2 ) do
5265: LD_EXP 14
5269: PPUSH
5270: CALL_OW 305
5274: PUSH
5275: LD_EXP 15
5279: PPUSH
5280: LD_INT 2
5282: PPUSH
5283: CALL_OW 289
5287: NOT
5288: AND
5289: IFFALSE 5306
5291: GO 5293
5293: DISABLE
// SetSide ( amCargo4 , 4 ) ;
5294: LD_EXP 15
5298: PPUSH
5299: LD_INT 4
5301: PPUSH
5302: CALL_OW 235
5306: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) do
5307: LD_EXP 15
5311: PPUSH
5312: CALL_OW 305
5316: PUSH
5317: LD_EXP 16
5321: PPUSH
5322: LD_INT 1
5324: PPUSH
5325: CALL_OW 289
5329: NOT
5330: AND
5331: PUSH
5332: LD_EXP 16
5336: PPUSH
5337: LD_INT 2
5339: PPUSH
5340: CALL_OW 289
5344: NOT
5345: AND
5346: IFFALSE 5363
5348: GO 5350
5350: DISABLE
// SetSide ( amCargo5 , 4 ) ;
5351: LD_EXP 16
5355: PPUSH
5356: LD_INT 4
5358: PPUSH
5359: CALL_OW 235
5363: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo6 , 1 ) do
5364: LD_EXP 16
5368: PPUSH
5369: CALL_OW 305
5373: PUSH
5374: LD_EXP 17
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: CALL_OW 289
5386: NOT
5387: AND
5388: IFFALSE 5405
5390: GO 5392
5392: DISABLE
// SetSide ( amCargo6 , 4 ) ;
5393: LD_EXP 17
5397: PPUSH
5398: LD_INT 4
5400: PPUSH
5401: CALL_OW 235
5405: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 2 ) do
5406: LD_EXP 17
5410: PPUSH
5411: CALL_OW 305
5415: PUSH
5416: LD_EXP 17
5420: PPUSH
5421: LD_INT 2
5423: PPUSH
5424: CALL_OW 289
5428: NOT
5429: AND
5430: IFFALSE 5447
5432: GO 5434
5434: DISABLE
// SetSide ( amCargo7 , 4 ) ;
5435: LD_EXP 18
5439: PPUSH
5440: LD_INT 4
5442: PPUSH
5443: CALL_OW 235
5447: END
// every 0 0$1 do var i ;
5448: GO 5450
5450: DISABLE
5451: LD_INT 0
5453: PPUSH
// begin enable ;
5454: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
5455: LD_ADDR_VAR 0 1
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_INT 4
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 69
5474: PUSH
5475: FOR_IN
5476: IFFALSE 5515
// begin ComMoveToArea ( i , PlayerSpawn ) ;
5478: LD_VAR 0 1
5482: PPUSH
5483: LD_INT 4
5485: PPUSH
5486: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
5490: LD_VAR 0 1
5494: PPUSH
5495: LD_INT 4
5497: PPUSH
5498: CALL_OW 308
5502: IFFALSE 5513
// RemoveUnit ( i ) ;
5504: LD_VAR 0 1
5508: PPUSH
5509: CALL_OW 64
// end ;
5513: GO 5475
5515: POP
5516: POP
// end ;
5517: PPOPN 1
5519: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
5520: LD_EXP 23
5524: PUSH
5525: LD_INT 1
5527: EQUAL
5528: IFFALSE 5903
5530: GO 5532
5532: DISABLE
5533: LD_INT 0
5535: PPUSH
5536: PPUSH
5537: PPUSH
// begin enable ;
5538: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: LD_INT 12
5546: PPUSH
5547: LD_INT 22
5549: PUSH
5550: LD_INT 3
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 21
5559: PUSH
5560: LD_INT 2
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PPUSH
5571: CALL_OW 70
5575: ST_TO_ADDR
// for i in enemyVehs do
5576: LD_ADDR_VAR 0 1
5580: PUSH
5581: LD_VAR 0 2
5585: PUSH
5586: FOR_IN
5587: IFFALSE 5901
// begin if See ( 1 , i ) then
5589: LD_INT 1
5591: PPUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 292
5601: IFFALSE 5899
// begin disable ;
5603: DISABLE
// DialogueOn ;
5604: CALL_OW 6
// CenterNowOnUnits ( i ) ;
5608: LD_VAR 0 1
5612: PPUSH
5613: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
5617: LD_INT 22
5619: PUSH
5620: LD_INT 1
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PUSH
5627: LD_INT 26
5629: PUSH
5630: LD_INT 1
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_EXP 1
5645: PUSH
5646: EMPTY
5647: LIST
5648: DIFF
5649: PPUSH
5650: CALL_OW 69
5654: PPUSH
5655: LD_STRING DT1-Sol1-1
5657: PPUSH
5658: LD_STRING DT1-FSol1-1
5660: PPUSH
5661: CALL 6964 0 3
// dec = ShowQuery2 ;
5665: LD_ADDR_VAR 0 3
5669: PUSH
5670: CALL 7438 0 0
5674: ST_TO_ADDR
// if dec = 1 then
5675: LD_VAR 0 3
5679: PUSH
5680: LD_INT 1
5682: EQUAL
5683: IFFALSE 5789
// begin Say ( JMM , D2-JMM-1 ) ;
5685: LD_EXP 1
5689: PPUSH
5690: LD_STRING D2-JMM-1
5692: PPUSH
5693: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5697: LD_EXP 19
5701: PPUSH
5702: LD_STRING D2-Pow-1
5704: PPUSH
5705: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
5709: LD_EXP 1
5713: PPUSH
5714: LD_STRING D2a-JMM-1
5716: PPUSH
5717: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
5721: LD_EXP 19
5725: PPUSH
5726: LD_STRING D2a-Pow-1
5728: PPUSH
5729: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
5733: LD_EXP 1
5737: PPUSH
5738: LD_STRING D2a-JMM-2
5740: PPUSH
5741: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
5745: LD_EXP 19
5749: PPUSH
5750: LD_STRING D2a-Pow-2
5752: PPUSH
5753: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
5757: LD_EXP 1
5761: PPUSH
5762: LD_STRING D2a-JMM-3
5764: PPUSH
5765: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
5769: LD_EXP 19
5773: PPUSH
5774: LD_STRING D2a-Pow-3
5776: PPUSH
5777: CALL_OW 94
// secondPass = 2 ;
5781: LD_ADDR_EXP 23
5785: PUSH
5786: LD_INT 2
5788: ST_TO_ADDR
// end ; if dec = 2 then
5789: LD_VAR 0 3
5793: PUSH
5794: LD_INT 2
5796: EQUAL
5797: IFFALSE 5891
// begin Say ( JMM , D2-JMM-1 ) ;
5799: LD_EXP 1
5803: PPUSH
5804: LD_STRING D2-JMM-1
5806: PPUSH
5807: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
5811: LD_EXP 19
5815: PPUSH
5816: LD_STRING D2-Pow-1
5818: PPUSH
5819: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
5823: LD_EXP 1
5827: PPUSH
5828: LD_STRING D2b-JMM-1
5830: PPUSH
5831: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
5835: LD_EXP 19
5839: PPUSH
5840: LD_STRING D2b-Pow-1
5842: PPUSH
5843: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
5847: LD_EXP 1
5851: PPUSH
5852: LD_STRING D2c-JMM-1
5854: PPUSH
5855: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
5859: LD_EXP 19
5863: PPUSH
5864: LD_STRING D2c-Pow-1
5866: PPUSH
5867: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
5871: LD_EXP 1
5875: PPUSH
5876: LD_STRING D2c-JMM-2
5878: PPUSH
5879: CALL_OW 88
// secondPass = 2 ;
5883: LD_ADDR_EXP 23
5887: PUSH
5888: LD_INT 2
5890: ST_TO_ADDR
// end ; DialogueOff ;
5891: CALL_OW 7
// exit ;
5895: POP
5896: POP
5897: GO 5903
// end ; end ;
5899: GO 5586
5901: POP
5902: POP
// end ;
5903: PPOPN 3
5905: END
// every 0 0$1 do var i , vehicles ;
5906: GO 5908
5908: DISABLE
5909: LD_INT 0
5911: PPUSH
5912: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
5913: LD_ADDR_VAR 0 2
5917: PUSH
5918: LD_INT 11
5920: PPUSH
5921: LD_INT 22
5923: PUSH
5924: LD_INT 3
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PPUSH
5931: CALL_OW 70
5935: ST_TO_ADDR
// enable ;
5936: ENABLE
// for i in vehicles do
5937: LD_ADDR_VAR 0 1
5941: PUSH
5942: LD_VAR 0 2
5946: PUSH
5947: FOR_IN
5948: IFFALSE 6049
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
5950: LD_INT 1
5952: PPUSH
5953: LD_VAR 0 1
5957: PPUSH
5958: CALL_OW 292
5962: PUSH
5963: LD_EXP 24
5967: PUSH
5968: LD_INT 1
5970: EQUAL
5971: AND
5972: IFFALSE 6047
// begin disable ;
5974: DISABLE
// DialogueOn ;
5975: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT1-Sol1-1 , DT1-FSol1-1 ) ;
5979: LD_INT 22
5981: PUSH
5982: LD_INT 1
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: LD_INT 21
5991: PUSH
5992: LD_INT 1
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: PPUSH
6003: CALL_OW 69
6007: PUSH
6008: LD_EXP 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: DIFF
6016: PPUSH
6017: LD_STRING DT1-Sol1-1
6019: PPUSH
6020: LD_STRING DT1-FSol1-1
6022: PPUSH
6023: CALL 6964 0 3
// Say ( JMM , DT1-JMM-1 ) ;
6027: LD_EXP 1
6031: PPUSH
6032: LD_STRING DT1-JMM-1
6034: PPUSH
6035: CALL_OW 88
// DialogueOff ;
6039: CALL_OW 7
// exit ;
6043: POP
6044: POP
6045: GO 6051
// end ; end ;
6047: GO 5947
6049: POP
6050: POP
// end ;
6051: PPOPN 2
6053: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
6054: LD_EXP 24
6058: PUSH
6059: LD_INT 1
6061: EQUAL
6062: PUSH
6063: LD_INT 11
6065: PPUSH
6066: LD_INT 22
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 24
6078: PUSH
6079: LD_INT 251
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 2
6088: PUSH
6089: LD_INT 21
6091: PUSH
6092: LD_INT 2
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 21
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL_OW 70
6123: PUSH
6124: LD_INT 0
6126: EQUAL
6127: AND
6128: IFFALSE 6221
6130: GO 6132
6132: DISABLE
// begin vehicleTeleported = 3 ;
6133: LD_ADDR_EXP 24
6137: PUSH
6138: LD_INT 3
6140: ST_TO_ADDR
// DialogueOn ;
6141: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
6145: LD_EXP 1
6149: PPUSH
6150: LD_STRING DT1a-JMM-1
6152: PPUSH
6153: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
6157: LD_INT 22
6159: PUSH
6160: LD_INT 1
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 21
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: PUSH
6186: LD_EXP 1
6190: PUSH
6191: EMPTY
6192: LIST
6193: DIFF
6194: PPUSH
6195: LD_STRING DT1a-Sol1-1
6197: PPUSH
6198: LD_STRING DT1a-FSol1-1
6200: PPUSH
6201: CALL 6964 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
6205: LD_EXP 1
6209: PPUSH
6210: LD_STRING DT1a-JMM-2
6212: PPUSH
6213: CALL_OW 88
// DialogueOff ;
6217: CALL_OW 7
// end ;
6221: END
// every 0 0$1 do var i , vehicles ;
6222: GO 6224
6224: DISABLE
6225: LD_INT 0
6227: PPUSH
6228: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6229: LD_ADDR_VAR 0 2
6233: PUSH
6234: LD_INT 11
6236: PPUSH
6237: LD_INT 22
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 70
6251: ST_TO_ADDR
// enable ;
6252: ENABLE
// for i in vehicles do
6253: LD_ADDR_VAR 0 1
6257: PUSH
6258: LD_VAR 0 2
6262: PUSH
6263: FOR_IN
6264: IFFALSE 6353
// begin if See ( 1 , i ) and vehicleTeleported = 2 then
6266: LD_INT 1
6268: PPUSH
6269: LD_VAR 0 1
6273: PPUSH
6274: CALL_OW 292
6278: PUSH
6279: LD_EXP 24
6283: PUSH
6284: LD_INT 2
6286: EQUAL
6287: AND
6288: IFFALSE 6351
// begin disable ;
6290: DISABLE
// DialogueOn ;
6291: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT2-Sol1-1 , DT2-FSol1-1 ) ;
6295: LD_INT 22
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 21
6307: PUSH
6308: LD_INT 1
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: PUSH
6324: LD_EXP 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: DIFF
6332: PPUSH
6333: LD_STRING DT2-Sol1-1
6335: PPUSH
6336: LD_STRING DT2-FSol1-1
6338: PPUSH
6339: CALL 6964 0 3
// DialogueOff ;
6343: CALL_OW 7
// exit ;
6347: POP
6348: POP
6349: GO 6355
// end ; end ;
6351: GO 6263
6353: POP
6354: POP
// end ;
6355: PPOPN 2
6357: END
// every 0 0$10 trigger vehicleTeleported = 2 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
6358: LD_EXP 24
6362: PUSH
6363: LD_INT 2
6365: EQUAL
6366: PUSH
6367: LD_INT 11
6369: PPUSH
6370: LD_INT 22
6372: PUSH
6373: LD_INT 3
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 2
6392: PUSH
6393: LD_INT 21
6395: PUSH
6396: LD_INT 2
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 21
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: PPUSH
6423: CALL_OW 70
6427: PUSH
6428: LD_INT 0
6430: EQUAL
6431: AND
6432: IFFALSE 6525
6434: GO 6436
6436: DISABLE
// begin vehicleTeleported = 4 ;
6437: LD_ADDR_EXP 24
6441: PUSH
6442: LD_INT 4
6444: ST_TO_ADDR
// DialogueOn ;
6445: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
6449: LD_EXP 1
6453: PPUSH
6454: LD_STRING DT2a-JMM-1
6456: PPUSH
6457: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 21
6473: PUSH
6474: LD_INT 1
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PPUSH
6485: CALL_OW 69
6489: PUSH
6490: LD_EXP 1
6494: PUSH
6495: EMPTY
6496: LIST
6497: DIFF
6498: PPUSH
6499: LD_STRING DT2a-Sol1-1
6501: PPUSH
6502: LD_STRING DT2a-FSol1-1
6504: PPUSH
6505: CALL 6964 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
6509: LD_EXP 2
6513: PPUSH
6514: LD_STRING DT2a-Don-1
6516: PPUSH
6517: CALL_OW 88
// DialogueOff ;
6521: CALL_OW 7
// end ;
6525: END
// every 0 0$1 trigger SeeXY ( 1 , 36 , 55 ) do
6526: LD_INT 1
6528: PPUSH
6529: LD_INT 36
6531: PPUSH
6532: LD_INT 55
6534: PPUSH
6535: CALL_OW 293
6539: IFFALSE 6643
6541: GO 6543
6543: DISABLE
// begin DialogueOn ;
6544: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
6548: LD_INT 36
6550: PPUSH
6551: LD_INT 55
6553: PPUSH
6554: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D5-JMM-1 ,  ) ;
6558: LD_INT 22
6560: PUSH
6561: LD_INT 1
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 21
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 26
6580: PUSH
6581: LD_INT 1
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: PPUSH
6593: CALL_OW 69
6597: PUSH
6598: LD_EXP 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: DIFF
6606: PPUSH
6607: LD_STRING D5-JMM-1
6609: PPUSH
6610: LD_STRING 
6612: PPUSH
6613: CALL 6964 0 3
// if warWithLegion = 1 then
6617: LD_EXP 25
6621: PUSH
6622: LD_INT 1
6624: EQUAL
6625: IFFALSE 6639
// Say ( Donaldson , D5-Don-1 ) ;
6627: LD_EXP 2
6631: PPUSH
6632: LD_STRING D5-Don-1
6634: PPUSH
6635: CALL_OW 88
// DialogueOff ;
6639: CALL_OW 7
// end ;
6643: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
6644: LD_INT 1
6646: PPUSH
6647: LD_INT 10
6649: PPUSH
6650: CALL_OW 292
6654: IFFALSE 6734
6656: GO 6658
6658: DISABLE
// begin DialogueOn ;
6659: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
6663: LD_INT 10
6665: PPUSH
6666: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
6670: LD_INT 22
6672: PUSH
6673: LD_INT 1
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 21
6682: PUSH
6683: LD_INT 1
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: PUSH
6699: LD_EXP 1
6703: PUSH
6704: EMPTY
6705: LIST
6706: DIFF
6707: PPUSH
6708: LD_STRING DT3-Sol1-1
6710: PPUSH
6711: LD_STRING DT3-FSol1-1
6713: PPUSH
6714: CALL 6964 0 3
// Say ( JMM , DT3-JMM-1 ) ;
6718: LD_EXP 1
6722: PPUSH
6723: LD_STRING DT3-JMM-1
6725: PPUSH
6726: CALL_OW 88
// DialogueOff ;
6730: CALL_OW 7
// end ;
6734: END
// every 0 0$1 trigger IsDying ( ruheadlab ) do var i , j , vehs ;
6735: LD_INT 3
6737: PPUSH
6738: CALL_OW 303
6742: IFFALSE 6904
6744: GO 6746
6746: DISABLE
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
6751: PPUSH
// begin vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
6752: LD_ADDR_VAR 0 3
6756: PUSH
6757: LD_INT 10
6759: PPUSH
6760: LD_INT 22
6762: PUSH
6763: LD_INT 3
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 21
6772: PUSH
6773: LD_INT 2
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 58
6782: PUSH
6783: EMPTY
6784: LIST
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 70
6795: ST_TO_ADDR
// DialogueOn ;
6796: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6800: LD_EXP 1
6804: PPUSH
6805: LD_STRING D6-JMM-1
6807: PPUSH
6808: CALL_OW 88
// DialogueOff ;
6812: CALL_OW 7
// for i in vehs do
6816: LD_ADDR_VAR 0 1
6820: PUSH
6821: LD_VAR 0 3
6825: PUSH
6826: FOR_IN
6827: IFFALSE 6902
// begin for j in RuScientists do
6829: LD_ADDR_VAR 0 2
6833: PUSH
6834: LD_EXP 29
6838: PUSH
6839: FOR_IN
6840: IFFALSE 6898
// begin AddComEnterUnit ( j , i ) ;
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 180
// AddComMoveToArea ( [ j , i ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
6856: LD_VAR 0 2
6860: PUSH
6861: LD_VAR 0 1
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: LD_INT 13
6872: PUSH
6873: LD_INT 14
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_INT 2
6885: PPUSH
6886: CALL_OW 12
6890: ARRAY
6891: PPUSH
6892: CALL_OW 173
// end ;
6896: GO 6839
6898: POP
6899: POP
// end ;
6900: GO 6826
6902: POP
6903: POP
// end ; end_of_file
6904: PPOPN 3
6906: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6907: LD_INT 0
6909: PPUSH
6910: PPUSH
// if exist_mode then
6911: LD_VAR 0 2
6915: IFFALSE 6934
// unit := CreateCharacter ( ident ) else
6917: LD_ADDR_VAR 0 4
6921: PUSH
6922: LD_VAR 0 1
6926: PPUSH
6927: CALL_OW 34
6931: ST_TO_ADDR
6932: GO 6949
// unit := NewCharacter ( ident ) ;
6934: LD_ADDR_VAR 0 4
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 25
6948: ST_TO_ADDR
// result := unit ;
6949: LD_ADDR_VAR 0 3
6953: PUSH
6954: LD_VAR 0 4
6958: ST_TO_ADDR
// end ;
6959: LD_VAR 0 3
6963: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6964: LD_INT 0
6966: PPUSH
6967: PPUSH
6968: PPUSH
// rnd = rand ( 1 , characters ) ;
6969: LD_ADDR_VAR 0 6
6973: PUSH
6974: LD_INT 1
6976: PPUSH
6977: LD_VAR 0 1
6981: PPUSH
6982: CALL_OW 12
6986: ST_TO_ADDR
// for i = 1 to characters do
6987: LD_ADDR_VAR 0 5
6991: PUSH
6992: DOUBLE
6993: LD_INT 1
6995: DEC
6996: ST_TO_ADDR
6997: LD_VAR 0 1
7001: PUSH
7002: FOR_TO
7003: IFFALSE 7113
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7005: LD_VAR 0 5
7009: PUSH
7010: LD_VAR 0 6
7014: EQUAL
7015: PUSH
7016: LD_VAR 0 1
7020: PUSH
7021: LD_VAR 0 5
7025: ARRAY
7026: PPUSH
7027: CALL_OW 258
7031: PUSH
7032: LD_INT 1
7034: EQUAL
7035: AND
7036: IFFALSE 7058
// Say ( characters [ i ] , dialogMID ) ;
7038: LD_VAR 0 1
7042: PUSH
7043: LD_VAR 0 5
7047: ARRAY
7048: PPUSH
7049: LD_VAR 0 2
7053: PPUSH
7054: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7058: LD_VAR 0 5
7062: PUSH
7063: LD_VAR 0 6
7067: EQUAL
7068: PUSH
7069: LD_VAR 0 1
7073: PUSH
7074: LD_VAR 0 5
7078: ARRAY
7079: PPUSH
7080: CALL_OW 258
7084: PUSH
7085: LD_INT 2
7087: EQUAL
7088: AND
7089: IFFALSE 7111
// Say ( characters [ i ] , dialogFID ) ;
7091: LD_VAR 0 1
7095: PUSH
7096: LD_VAR 0 5
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 3
7106: PPUSH
7107: CALL_OW 88
// end ;
7111: GO 7002
7113: POP
7114: POP
// end ;
7115: LD_VAR 0 4
7119: RET
// export function PrepareDifficulty ; var tmp ; begin
7120: LD_INT 0
7122: PPUSH
7123: PPUSH
// if Difficulty = 1 then
7124: LD_OWVAR 67
7128: PUSH
7129: LD_INT 1
7131: EQUAL
7132: IFFALSE 7150
// begin RuSolMinLevel = 8 ;
7134: LD_ADDR_EXP 31
7138: PUSH
7139: LD_INT 8
7141: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
7142: LD_ADDR_EXP 32
7146: PUSH
7147: LD_INT 10
7149: ST_TO_ADDR
// end ; if Difficulty = 2 then
7150: LD_OWVAR 67
7154: PUSH
7155: LD_INT 2
7157: EQUAL
7158: IFFALSE 7239
// begin RuSolMinLevel = 9 ;
7160: LD_ADDR_EXP 31
7164: PUSH
7165: LD_INT 9
7167: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
7168: LD_ADDR_EXP 32
7172: PUSH
7173: LD_INT 10
7175: ST_TO_ADDR
// uc_nation = 3 ;
7176: LD_ADDR_OWVAR 21
7180: PUSH
7181: LD_INT 3
7183: ST_TO_ADDR
// uc_side = 3 ;
7184: LD_ADDR_OWVAR 20
7188: PUSH
7189: LD_INT 3
7191: ST_TO_ADDR
// bc_level = 10 ;
7192: LD_ADDR_OWVAR 43
7196: PUSH
7197: LD_INT 10
7199: ST_TO_ADDR
// bc_type = b_turret ;
7200: LD_ADDR_OWVAR 42
7204: PUSH
7205: LD_INT 33
7207: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
7208: LD_ADDR_VAR 0 2
7212: PUSH
7213: LD_INT 86
7215: PPUSH
7216: LD_INT 34
7218: PPUSH
7219: LD_INT 2
7221: PPUSH
7222: CALL_OW 47
7226: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
7227: LD_VAR 0 2
7231: PPUSH
7232: LD_INT 49
7234: PPUSH
7235: CALL_OW 431
// end ; if Difficulty = 3 then
7239: LD_OWVAR 67
7243: PUSH
7244: LD_INT 3
7246: EQUAL
7247: IFFALSE 7359
// begin RuSolMinLevel = 10 ;
7249: LD_ADDR_EXP 31
7253: PUSH
7254: LD_INT 10
7256: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
7257: LD_ADDR_EXP 32
7261: PUSH
7262: LD_INT 10
7264: ST_TO_ADDR
// uc_nation = 3 ;
7265: LD_ADDR_OWVAR 21
7269: PUSH
7270: LD_INT 3
7272: ST_TO_ADDR
// uc_side = 3 ;
7273: LD_ADDR_OWVAR 20
7277: PUSH
7278: LD_INT 3
7280: ST_TO_ADDR
// bc_level = 10 ;
7281: LD_ADDR_OWVAR 43
7285: PUSH
7286: LD_INT 10
7288: ST_TO_ADDR
// bc_type = b_turret ;
7289: LD_ADDR_OWVAR 42
7293: PUSH
7294: LD_INT 33
7296: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
7297: LD_ADDR_VAR 0 2
7301: PUSH
7302: LD_INT 86
7304: PPUSH
7305: LD_INT 34
7307: PPUSH
7308: LD_INT 2
7310: PPUSH
7311: CALL_OW 47
7315: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
7316: LD_VAR 0 2
7320: PPUSH
7321: LD_INT 49
7323: PPUSH
7324: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
7328: LD_ADDR_VAR 0 2
7332: PUSH
7333: LD_INT 93
7335: PPUSH
7336: LD_INT 31
7338: PPUSH
7339: LD_INT 2
7341: PPUSH
7342: CALL_OW 47
7346: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
7347: LD_VAR 0 2
7351: PPUSH
7352: LD_INT 49
7354: PPUSH
7355: CALL_OW 431
// end ; end ;
7359: LD_VAR 0 1
7363: RET
// export function ShowQuery1 ; begin
7364: LD_INT 0
7366: PPUSH
// case query ( Q1 ) of 1 :
7367: LD_STRING Q1
7369: PPUSH
7370: CALL_OW 97
7374: PUSH
7375: LD_INT 1
7377: DOUBLE
7378: EQUAL
7379: IFTRUE 7383
7381: GO 7394
7383: POP
// result = 1 ; 2 :
7384: LD_ADDR_VAR 0 1
7388: PUSH
7389: LD_INT 1
7391: ST_TO_ADDR
7392: GO 7433
7394: LD_INT 2
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7413
7402: POP
// result = 2 ; 3 :
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_INT 2
7410: ST_TO_ADDR
7411: GO 7433
7413: LD_INT 3
7415: DOUBLE
7416: EQUAL
7417: IFTRUE 7421
7419: GO 7432
7421: POP
// result = 3 ; end ;
7422: LD_ADDR_VAR 0 1
7426: PUSH
7427: LD_INT 3
7429: ST_TO_ADDR
7430: GO 7433
7432: POP
// end ;
7433: LD_VAR 0 1
7437: RET
// export function ShowQuery2 ; begin
7438: LD_INT 0
7440: PPUSH
// case query ( Q1a ) of 1 :
7441: LD_STRING Q1a
7443: PPUSH
7444: CALL_OW 97
7448: PUSH
7449: LD_INT 1
7451: DOUBLE
7452: EQUAL
7453: IFTRUE 7457
7455: GO 7468
7457: POP
// result = 1 ; 2 :
7458: LD_ADDR_VAR 0 1
7462: PUSH
7463: LD_INT 1
7465: ST_TO_ADDR
7466: GO 7507
7468: LD_INT 2
7470: DOUBLE
7471: EQUAL
7472: IFTRUE 7476
7474: GO 7487
7476: POP
// result = 2 ; 3 :
7477: LD_ADDR_VAR 0 1
7481: PUSH
7482: LD_INT 2
7484: ST_TO_ADDR
7485: GO 7507
7487: LD_INT 3
7489: DOUBLE
7490: EQUAL
7491: IFTRUE 7495
7493: GO 7506
7495: POP
// result = 3 ; end ;
7496: LD_ADDR_VAR 0 1
7500: PUSH
7501: LD_INT 3
7503: ST_TO_ADDR
7504: GO 7507
7506: POP
// end ;
7507: LD_VAR 0 1
7511: RET
// export function ShowQuery3 ; begin
7512: LD_INT 0
7514: PPUSH
// case query ( Q2 ) of 1 :
7515: LD_STRING Q2
7517: PPUSH
7518: CALL_OW 97
7522: PUSH
7523: LD_INT 1
7525: DOUBLE
7526: EQUAL
7527: IFTRUE 7531
7529: GO 7542
7531: POP
// result = 1 ; 2 :
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_INT 1
7539: ST_TO_ADDR
7540: GO 7600
7542: LD_INT 2
7544: DOUBLE
7545: EQUAL
7546: IFTRUE 7550
7548: GO 7561
7550: POP
// result = 2 ; 3 :
7551: LD_ADDR_VAR 0 1
7555: PUSH
7556: LD_INT 2
7558: ST_TO_ADDR
7559: GO 7600
7561: LD_INT 3
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7580
7569: POP
// result = 3 ; 4 :
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_INT 3
7577: ST_TO_ADDR
7578: GO 7600
7580: LD_INT 4
7582: DOUBLE
7583: EQUAL
7584: IFTRUE 7588
7586: GO 7599
7588: POP
// result = 4 ; end ;
7589: LD_ADDR_VAR 0 1
7593: PUSH
7594: LD_INT 4
7596: ST_TO_ADDR
7597: GO 7600
7599: POP
// end ;
7600: LD_VAR 0 1
7604: RET
// export function ShowQuery4 ; begin
7605: LD_INT 0
7607: PPUSH
// case query ( Q2K ) of 1 :
7608: LD_STRING Q2K
7610: PPUSH
7611: CALL_OW 97
7615: PUSH
7616: LD_INT 1
7618: DOUBLE
7619: EQUAL
7620: IFTRUE 7624
7622: GO 7635
7624: POP
// result = 1 ; 2 :
7625: LD_ADDR_VAR 0 1
7629: PUSH
7630: LD_INT 1
7632: ST_TO_ADDR
7633: GO 7693
7635: LD_INT 2
7637: DOUBLE
7638: EQUAL
7639: IFTRUE 7643
7641: GO 7654
7643: POP
// result = 2 ; 3 :
7644: LD_ADDR_VAR 0 1
7648: PUSH
7649: LD_INT 2
7651: ST_TO_ADDR
7652: GO 7693
7654: LD_INT 3
7656: DOUBLE
7657: EQUAL
7658: IFTRUE 7662
7660: GO 7673
7662: POP
// result = 3 ; 4 :
7663: LD_ADDR_VAR 0 1
7667: PUSH
7668: LD_INT 3
7670: ST_TO_ADDR
7671: GO 7693
7673: LD_INT 4
7675: DOUBLE
7676: EQUAL
7677: IFTRUE 7681
7679: GO 7692
7681: POP
// result = 4 ; end ;
7682: LD_ADDR_VAR 0 1
7686: PUSH
7687: LD_INT 4
7689: ST_TO_ADDR
7690: GO 7693
7692: POP
// end ;
7693: LD_VAR 0 1
7697: RET
// export function ShowQuery5 ; begin
7698: LD_INT 0
7700: PPUSH
// case query ( Q2a ) of 1 :
7701: LD_STRING Q2a
7703: PPUSH
7704: CALL_OW 97
7708: PUSH
7709: LD_INT 1
7711: DOUBLE
7712: EQUAL
7713: IFTRUE 7717
7715: GO 7728
7717: POP
// result = 1 ; 2 :
7718: LD_ADDR_VAR 0 1
7722: PUSH
7723: LD_INT 1
7725: ST_TO_ADDR
7726: GO 7786
7728: LD_INT 2
7730: DOUBLE
7731: EQUAL
7732: IFTRUE 7736
7734: GO 7747
7736: POP
// result = 2 ; 3 :
7737: LD_ADDR_VAR 0 1
7741: PUSH
7742: LD_INT 2
7744: ST_TO_ADDR
7745: GO 7786
7747: LD_INT 3
7749: DOUBLE
7750: EQUAL
7751: IFTRUE 7755
7753: GO 7766
7755: POP
// result = 3 ; 4 :
7756: LD_ADDR_VAR 0 1
7760: PUSH
7761: LD_INT 3
7763: ST_TO_ADDR
7764: GO 7786
7766: LD_INT 4
7768: DOUBLE
7769: EQUAL
7770: IFTRUE 7774
7772: GO 7785
7774: POP
// result = 4 ; end ;
7775: LD_ADDR_VAR 0 1
7779: PUSH
7780: LD_INT 4
7782: ST_TO_ADDR
7783: GO 7786
7785: POP
// end ;
7786: LD_VAR 0 1
7790: RET
// export function ShowQuery6 ; begin
7791: LD_INT 0
7793: PPUSH
// case query ( Q2aK ) of 1 :
7794: LD_STRING Q2aK
7796: PPUSH
7797: CALL_OW 97
7801: PUSH
7802: LD_INT 1
7804: DOUBLE
7805: EQUAL
7806: IFTRUE 7810
7808: GO 7821
7810: POP
// result = 1 ; 2 :
7811: LD_ADDR_VAR 0 1
7815: PUSH
7816: LD_INT 1
7818: ST_TO_ADDR
7819: GO 7879
7821: LD_INT 2
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7829
7827: GO 7840
7829: POP
// result = 2 ; 3 :
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_INT 2
7837: ST_TO_ADDR
7838: GO 7879
7840: LD_INT 3
7842: DOUBLE
7843: EQUAL
7844: IFTRUE 7848
7846: GO 7859
7848: POP
// result = 3 ; 4 :
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: LD_INT 3
7856: ST_TO_ADDR
7857: GO 7879
7859: LD_INT 4
7861: DOUBLE
7862: EQUAL
7863: IFTRUE 7867
7865: GO 7878
7867: POP
// result = 4 ; end ;
7868: LD_ADDR_VAR 0 1
7872: PUSH
7873: LD_INT 4
7875: ST_TO_ADDR
7876: GO 7879
7878: POP
// end ;
7879: LD_VAR 0 1
7883: RET
// export function ShowQuery7 ; begin
7884: LD_INT 0
7886: PPUSH
// case query ( Q2b ) of 1 :
7887: LD_STRING Q2b
7889: PPUSH
7890: CALL_OW 97
7894: PUSH
7895: LD_INT 1
7897: DOUBLE
7898: EQUAL
7899: IFTRUE 7903
7901: GO 7914
7903: POP
// result = 1 ; 2 :
7904: LD_ADDR_VAR 0 1
7908: PUSH
7909: LD_INT 1
7911: ST_TO_ADDR
7912: GO 7953
7914: LD_INT 2
7916: DOUBLE
7917: EQUAL
7918: IFTRUE 7922
7920: GO 7933
7922: POP
// result = 2 ; 3 :
7923: LD_ADDR_VAR 0 1
7927: PUSH
7928: LD_INT 2
7930: ST_TO_ADDR
7931: GO 7953
7933: LD_INT 3
7935: DOUBLE
7936: EQUAL
7937: IFTRUE 7941
7939: GO 7952
7941: POP
// result = 3 ; end ;
7942: LD_ADDR_VAR 0 1
7946: PUSH
7947: LD_INT 3
7949: ST_TO_ADDR
7950: GO 7953
7952: POP
// end ;
7953: LD_VAR 0 1
7957: RET
// export function ShowQuery8 ; begin
7958: LD_INT 0
7960: PPUSH
// case query ( Q2c ) of 1 :
7961: LD_STRING Q2c
7963: PPUSH
7964: CALL_OW 97
7968: PUSH
7969: LD_INT 1
7971: DOUBLE
7972: EQUAL
7973: IFTRUE 7977
7975: GO 7988
7977: POP
// result = 1 ; 2 :
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
7986: GO 8008
7988: LD_INT 2
7990: DOUBLE
7991: EQUAL
7992: IFTRUE 7996
7994: GO 8007
7996: POP
// result = 2 ; end ;
7997: LD_ADDR_VAR 0 1
8001: PUSH
8002: LD_INT 2
8004: ST_TO_ADDR
8005: GO 8008
8007: POP
// end ;
8008: LD_VAR 0 1
8012: RET
// export function ShowQuery9 ; begin
8013: LD_INT 0
8015: PPUSH
// case query ( Q2cK ) of 1 :
8016: LD_STRING Q2cK
8018: PPUSH
8019: CALL_OW 97
8023: PUSH
8024: LD_INT 1
8026: DOUBLE
8027: EQUAL
8028: IFTRUE 8032
8030: GO 8043
8032: POP
// result = 1 ; 2 :
8033: LD_ADDR_VAR 0 1
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
8041: GO 8063
8043: LD_INT 2
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8062
8051: POP
// result = 2 ; end ;
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_INT 2
8059: ST_TO_ADDR
8060: GO 8063
8062: POP
// end ;
8063: LD_VAR 0 1
8067: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
8068: LD_INT 0
8070: PPUSH
8071: PPUSH
8072: PPUSH
8073: PPUSH
8074: PPUSH
// for i = 1 to count do
8075: LD_ADDR_VAR 0 8
8079: PUSH
8080: DOUBLE
8081: LD_INT 1
8083: DEC
8084: ST_TO_ADDR
8085: LD_VAR 0 6
8089: PUSH
8090: FOR_TO
8091: IFFALSE 8172
// begin uc_side = side ;
8093: LD_ADDR_OWVAR 20
8097: PUSH
8098: LD_VAR 0 1
8102: ST_TO_ADDR
// uc_nation = nation ;
8103: LD_ADDR_OWVAR 21
8107: PUSH
8108: LD_VAR 0 2
8112: ST_TO_ADDR
// hc_gallery =  ;
8113: LD_ADDR_OWVAR 33
8117: PUSH
8118: LD_STRING 
8120: ST_TO_ADDR
// hc_name =  ;
8121: LD_ADDR_OWVAR 26
8125: PUSH
8126: LD_STRING 
8128: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8129: LD_INT 0
8131: PPUSH
8132: LD_VAR 0 5
8136: PPUSH
8137: LD_VAR 0 4
8141: PPUSH
8142: CALL_OW 380
// un = CreateHuman ;
8146: LD_ADDR_VAR 0 10
8150: PUSH
8151: CALL_OW 44
8155: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8156: LD_VAR 0 10
8160: PPUSH
8161: LD_VAR 0 3
8165: PPUSH
8166: CALL_OW 52
// end ;
8170: GO 8090
8172: POP
8173: POP
// end ;
8174: LD_VAR 0 7
8178: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
8179: LD_INT 0
8181: PPUSH
8182: PPUSH
8183: PPUSH
8184: PPUSH
// for i = 1 to 72 do
8185: LD_ADDR_VAR 0 5
8189: PUSH
8190: DOUBLE
8191: LD_INT 1
8193: DEC
8194: ST_TO_ADDR
8195: LD_INT 72
8197: PUSH
8198: FOR_TO
8199: IFFALSE 8257
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
8201: LD_VAR 0 5
8205: PPUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 321
8215: PUSH
8216: LD_INT 1
8218: EQUAL
8219: PUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: LD_VAR 0 3
8229: PPUSH
8230: CALL_OW 482
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: AND
8239: IFFALSE 8255
// AddComResearch ( lab , i ) ;
8241: LD_VAR 0 2
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 184
8255: GO 8198
8257: POP
8258: POP
// end ;
8259: LD_VAR 0 4
8263: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8264: LD_INT 0
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
8271: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8272: LD_ADDR_VAR 0 8
8276: PUSH
8277: LD_VAR 0 2
8281: PPUSH
8282: CALL_OW 313
8286: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8287: LD_ADDR_VAR 0 9
8291: PUSH
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_INT 22
8299: PUSH
8300: LD_VAR 0 1
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 25
8311: PUSH
8312: LD_INT 2
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 24
8321: PUSH
8322: LD_INT 750
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: LD_INT 54
8334: PUSH
8335: EMPTY
8336: LIST
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 70
8352: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8353: LD_ADDR_VAR 0 6
8357: PUSH
8358: LD_VAR 0 3
8362: PPUSH
8363: LD_INT 22
8365: PUSH
8366: LD_VAR 0 1
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: LD_INT 21
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PUSH
8385: LD_INT 3
8387: PUSH
8388: LD_INT 24
8390: PUSH
8391: LD_INT 1000
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: PPUSH
8410: CALL_OW 70
8414: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8415: LD_VAR 0 6
8419: NOT
8420: PUSH
8421: LD_INT 22
8423: PUSH
8424: LD_VAR 0 1
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PUSH
8433: LD_INT 25
8435: PUSH
8436: LD_INT 2
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: LD_INT 24
8445: PUSH
8446: LD_INT 250
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: PPUSH
8458: CALL_OW 69
8462: NOT
8463: AND
8464: IFFALSE 8468
// exit ;
8466: GO 8650
// if buildings_list > 0 and engineerOkInside then
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 0
8475: GREATER
8476: PUSH
8477: LD_VAR 0 8
8481: AND
8482: IFFALSE 8493
// ComExitBuilding ( engineerOkInside ) ;
8484: LD_VAR 0 8
8488: PPUSH
8489: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8493: LD_VAR 0 6
8497: PUSH
8498: LD_INT 0
8500: GREATER
8501: PUSH
8502: LD_VAR 0 9
8506: PUSH
8507: LD_INT 0
8509: GREATER
8510: AND
8511: IFFALSE 8531
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8513: LD_VAR 0 9
8517: PPUSH
8518: LD_VAR 0 6
8522: PUSH
8523: LD_INT 1
8525: ARRAY
8526: PPUSH
8527: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8531: LD_VAR 0 6
8535: PUSH
8536: LD_INT 0
8538: EQUAL
8539: PUSH
8540: LD_VAR 0 4
8544: PUSH
8545: LD_INT 0
8547: EQUAL
8548: AND
8549: PUSH
8550: LD_VAR 0 9
8554: PUSH
8555: LD_INT 0
8557: GREATER
8558: AND
8559: IFFALSE 8575
// ComEnterUnit ( engineerOkOutside , building ) ;
8561: LD_VAR 0 9
8565: PPUSH
8566: LD_VAR 0 2
8570: PPUSH
8571: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8575: LD_VAR 0 9
8579: PUSH
8580: LD_INT 0
8582: GREATER
8583: PUSH
8584: LD_VAR 0 6
8588: PUSH
8589: LD_INT 0
8591: EQUAL
8592: AND
8593: PUSH
8594: LD_VAR 0 4
8598: PUSH
8599: LD_INT 0
8601: GREATER
8602: AND
8603: IFFALSE 8650
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8605: LD_VAR 0 9
8609: PPUSH
8610: LD_VAR 0 4
8614: PUSH
8615: LD_INT 1
8617: ARRAY
8618: PPUSH
8619: LD_VAR 0 4
8623: PUSH
8624: LD_INT 2
8626: ARRAY
8627: PPUSH
8628: LD_VAR 0 4
8632: PUSH
8633: LD_INT 3
8635: ARRAY
8636: PPUSH
8637: LD_VAR 0 4
8641: PUSH
8642: LD_INT 4
8644: ARRAY
8645: PPUSH
8646: CALL_OW 145
// end ;
8650: LD_VAR 0 5
8654: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8655: LD_INT 0
8657: PPUSH
8658: PPUSH
8659: PPUSH
8660: PPUSH
8661: PPUSH
8662: PPUSH
8663: PPUSH
8664: PPUSH
8665: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8666: LD_ADDR_VAR 0 6
8670: PUSH
8671: LD_INT 22
8673: PUSH
8674: LD_VAR 0 1
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 4
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 23
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: LD_INT 24
8705: PUSH
8706: LD_INT 251
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 69
8723: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8724: LD_ADDR_VAR 0 7
8728: PUSH
8729: LD_VAR 0 3
8733: PPUSH
8734: LD_INT 22
8736: PUSH
8737: LD_VAR 0 1
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 23
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 25
8758: PUSH
8759: LD_INT 4
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 50
8768: PUSH
8769: EMPTY
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: PPUSH
8778: CALL_OW 70
8782: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8783: LD_ADDR_VAR 0 10
8787: PUSH
8788: LD_VAR 0 3
8792: PPUSH
8793: LD_INT 22
8795: PUSH
8796: LD_VAR 0 1
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 21
8807: PUSH
8808: LD_INT 1
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: LD_INT 3
8817: PUSH
8818: LD_INT 24
8820: PUSH
8821: LD_INT 750
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: LIST
8836: PPUSH
8837: CALL_OW 70
8841: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8842: LD_ADDR_VAR 0 11
8846: PUSH
8847: LD_VAR 0 2
8851: PPUSH
8852: LD_INT 22
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 21
8866: PUSH
8867: LD_INT 1
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 3
8876: PUSH
8877: LD_INT 24
8879: PUSH
8880: LD_INT 1000
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PPUSH
8896: CALL_OW 70
8900: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8901: LD_VAR 0 10
8905: NOT
8906: PUSH
8907: LD_VAR 0 11
8911: NOT
8912: AND
8913: PUSH
8914: LD_VAR 0 6
8918: NOT
8919: AND
8920: IFFALSE 8924
// exit ;
8922: GO 9158
// if damageUnits > 0 and sci_list > 0 then
8924: LD_VAR 0 10
8928: PUSH
8929: LD_INT 0
8931: GREATER
8932: PUSH
8933: LD_VAR 0 6
8937: PUSH
8938: LD_INT 0
8940: GREATER
8941: AND
8942: IFFALSE 8958
// ComMoveToArea ( damageUnits , healArea ) ;
8944: LD_VAR 0 10
8948: PPUSH
8949: LD_VAR 0 2
8953: PPUSH
8954: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8958: LD_VAR 0 11
8962: PUSH
8963: LD_INT 0
8965: GREATER
8966: PUSH
8967: LD_VAR 0 6
8971: PUSH
8972: LD_INT 0
8974: GREATER
8975: AND
8976: IFFALSE 8987
// ComExitBuilding ( sci_list ) ;
8978: LD_VAR 0 6
8982: PPUSH
8983: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8987: LD_VAR 0 11
8991: PUSH
8992: LD_INT 0
8994: GREATER
8995: PUSH
8996: LD_VAR 0 7
9000: PUSH
9001: LD_INT 0
9003: GREATER
9004: AND
9005: IFFALSE 9025
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9007: LD_VAR 0 7
9011: PPUSH
9012: LD_VAR 0 11
9016: PUSH
9017: LD_INT 1
9019: ARRAY
9020: PPUSH
9021: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9025: LD_VAR 0 10
9029: PUSH
9030: LD_INT 0
9032: EQUAL
9033: PUSH
9034: LD_VAR 0 11
9038: PUSH
9039: LD_INT 0
9041: EQUAL
9042: AND
9043: PUSH
9044: LD_VAR 0 7
9048: PUSH
9049: LD_INT 0
9051: GREATER
9052: AND
9053: IFFALSE 9158
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9055: LD_ADDR_VAR 0 12
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_VAR 0 1
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 21
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 30
9084: PUSH
9085: LD_INT 8
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PPUSH
9097: CALL_OW 69
9101: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9102: LD_ADDR_VAR 0 13
9106: PUSH
9107: LD_INT 1
9109: PPUSH
9110: LD_VAR 0 12
9114: PPUSH
9115: CALL_OW 12
9119: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9120: LD_VAR 0 7
9124: PPUSH
9125: LD_INT 3
9127: PUSH
9128: LD_INT 60
9130: PUSH
9131: EMPTY
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PPUSH
9138: CALL_OW 72
9142: PPUSH
9143: LD_VAR 0 12
9147: PUSH
9148: LD_VAR 0 13
9152: ARRAY
9153: PPUSH
9154: CALL_OW 120
// end ; end ;
9158: LD_VAR 0 5
9162: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
9163: LD_INT 0
9165: PPUSH
9166: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9167: LD_INT 22
9169: PUSH
9170: LD_VAR 0 1
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 21
9181: PUSH
9182: LD_INT 2
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PPUSH
9193: CALL_OW 69
9197: PUSH
9198: LD_INT 18
9200: PPUSH
9201: LD_INT 22
9203: PUSH
9204: LD_VAR 0 1
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: LD_INT 21
9215: PUSH
9216: LD_INT 2
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PPUSH
9227: CALL_OW 70
9231: PUSH
9232: LD_VAR 0 3
9236: LESSEQUAL
9237: DIFF
9238: IFFALSE 9305
// for i = 1 to vehCount do
9240: LD_ADDR_VAR 0 9
9244: PUSH
9245: DOUBLE
9246: LD_INT 1
9248: DEC
9249: ST_TO_ADDR
9250: LD_VAR 0 3
9254: PUSH
9255: FOR_TO
9256: IFFALSE 9303
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
9258: LD_VAR 0 2
9262: PPUSH
9263: LD_VAR 0 7
9267: PPUSH
9268: LD_VAR 0 5
9272: PPUSH
9273: LD_VAR 0 6
9277: PPUSH
9278: LD_VAR 0 4
9282: PUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_VAR 0 4
9290: PPUSH
9291: CALL_OW 12
9295: ARRAY
9296: PPUSH
9297: CALL_OW 185
9301: GO 9255
9303: POP
9304: POP
// end ;
9305: LD_VAR 0 8
9309: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
9310: LD_INT 0
9312: PPUSH
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ;
9318: LD_ADDR_VAR 0 5
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: LD_VAR 0 1
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: LD_INT 21
9337: PUSH
9338: LD_INT 2
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 24
9347: PUSH
9348: LD_INT 650
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: PUSH
9365: LD_INT 18
9367: PPUSH
9368: LD_INT 22
9370: PUSH
9371: LD_VAR 0 1
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: LD_INT 21
9382: PUSH
9383: LD_INT 2
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 70
9398: DIFF
9399: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) >= [ 6 , 8 , 8 ] [ Difficulty ] then
9400: LD_INT 22
9402: PUSH
9403: LD_VAR 0 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 21
9414: PUSH
9415: LD_INT 2
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 24
9424: PUSH
9425: LD_INT 1000
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: PUSH
9442: LD_INT 18
9444: PPUSH
9445: LD_INT 22
9447: PUSH
9448: LD_VAR 0 1
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 21
9459: PUSH
9460: LD_INT 2
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PPUSH
9471: CALL_OW 70
9475: PUSH
9476: LD_INT 6
9478: PUSH
9479: LD_INT 8
9481: PUSH
9482: LD_INT 8
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: PUSH
9490: LD_OWVAR 67
9494: ARRAY
9495: GREATEREQUAL
9496: DIFF
9497: IFFALSE 9884
// repeat wait ( 0 0$1 ) ;
9499: LD_INT 35
9501: PPUSH
9502: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ;
9506: LD_ADDR_VAR 0 5
9510: PUSH
9511: LD_INT 22
9513: PUSH
9514: LD_VAR 0 1
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 21
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 24
9535: PUSH
9536: LD_INT 650
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: PUSH
9553: LD_INT 18
9555: PPUSH
9556: LD_INT 22
9558: PUSH
9559: LD_VAR 0 1
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 21
9570: PUSH
9571: LD_INT 2
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 70
9586: DIFF
9587: ST_TO_ADDR
// for j in vehiclesOK do
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_VAR 0 5
9597: PUSH
9598: FOR_IN
9599: IFFALSE 9800
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
9601: LD_ADDR_VAR 0 6
9605: PUSH
9606: LD_INT 81
9608: PUSH
9609: LD_VAR 0 1
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 101
9620: PUSH
9621: LD_INT 1
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: PPUSH
9637: LD_VAR 0 4
9641: PPUSH
9642: CALL_OW 74
9646: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
9647: LD_ADDR_VAR 0 7
9651: PUSH
9652: LD_INT 81
9654: PUSH
9655: LD_VAR 0 1
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 101
9666: PUSH
9667: LD_INT 1
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: LD_INT 59
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_INT 21
9685: PUSH
9686: LD_INT 1
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 21
9695: PUSH
9696: LD_INT 2
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: PPUSH
9717: CALL_OW 69
9721: PPUSH
9722: LD_VAR 0 4
9726: PPUSH
9727: CALL_OW 74
9731: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
9732: LD_VAR 0 4
9736: PPUSH
9737: LD_VAR 0 6
9741: PPUSH
9742: CALL_OW 296
9746: PUSH
9747: LD_INT 8
9749: PLUS
9750: PUSH
9751: LD_VAR 0 4
9755: PPUSH
9756: LD_VAR 0 7
9760: PPUSH
9761: CALL_OW 296
9765: LESS
9766: IFFALSE 9784
// ComAttackUnit ( j , target1 ) else
9768: LD_VAR 0 4
9772: PPUSH
9773: LD_VAR 0 6
9777: PPUSH
9778: CALL_OW 115
9782: GO 9798
// ComAttackUnit ( j , target2 ) ;
9784: LD_VAR 0 4
9788: PPUSH
9789: LD_VAR 0 7
9793: PPUSH
9794: CALL_OW 115
// end ;
9798: GO 9598
9800: POP
9801: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 ;
9802: LD_INT 22
9804: PUSH
9805: LD_VAR 0 1
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: LD_INT 21
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 24
9826: PUSH
9827: LD_INT 1000
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: LIST
9838: PPUSH
9839: CALL_OW 69
9843: PUSH
9844: LD_INT 18
9846: PPUSH
9847: LD_INT 22
9849: PUSH
9850: LD_VAR 0 1
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 21
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 70
9877: PUSH
9878: LD_INT 0
9880: EQUAL
9881: DIFF
9882: IFFALSE 9499
// end ; end_of_file
9884: LD_VAR 0 2
9888: RET
// on UnitDestroyed ( unit ) do var i ;
9889: LD_INT 0
9891: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9892: LD_VAR 0 1
9896: PPUSH
9897: CALL_OW 255
9901: PUSH
9902: LD_INT 3
9904: EQUAL
9905: PUSH
9906: LD_VAR 0 1
9910: PPUSH
9911: CALL_OW 247
9915: PUSH
9916: LD_INT 1
9918: EQUAL
9919: AND
9920: IFFALSE 9984
// begin for i in RuScientists do
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_EXP 29
9931: PUSH
9932: FOR_IN
9933: IFFALSE 9982
// if i = unit then
9935: LD_VAR 0 2
9939: PUSH
9940: LD_VAR 0 1
9944: EQUAL
9945: IFFALSE 9980
// begin RuScientists = RuScientists diff [ unit ] ;
9947: LD_ADDR_EXP 29
9951: PUSH
9952: LD_EXP 29
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: DIFF
9965: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
9966: LD_ADDR_EXP 30
9970: PUSH
9971: LD_EXP 30
9975: PUSH
9976: LD_INT 1
9978: PLUS
9979: ST_TO_ADDR
// end ;
9980: GO 9932
9982: POP
9983: POP
// end ; end ;
9984: PPOPN 2
9986: END
// on EnterBuilding ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
9987: LD_VAR 0 1
9991: PUSH
9992: LD_INT 10
9994: EQUAL
9995: PUSH
9996: LD_VAR 0 2
10000: PPUSH
10001: CALL_OW 255
10005: PUSH
10006: LD_INT 1
10008: EQUAL
10009: AND
10010: PUSH
10011: LD_EXP 34
10015: PUSH
10016: LD_INT 0
10018: EQUAL
10019: AND
10020: IFFALSE 10123
// begin eventVar1 = 1 ;
10022: LD_ADDR_EXP 34
10026: PUSH
10027: LD_INT 1
10029: ST_TO_ADDR
// teleportExplored = 1 ;
10030: LD_ADDR_EXP 28
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10038: LD_INT 70
10040: PPUSH
10041: CALL_OW 67
// DialogueOn ;
10045: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] diff [ JMM ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
10049: LD_INT 22
10051: PUSH
10052: LD_INT 1
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_EXP 1
10063: PUSH
10064: EMPTY
10065: LIST
10066: DIFF
10067: PUSH
10068: EMPTY
10069: LIST
10070: PPUSH
10071: CALL_OW 69
10075: PPUSH
10076: LD_STRING DT3a-Sol1-1
10078: PPUSH
10079: LD_STRING DT3a-FSol1-1
10081: PPUSH
10082: CALL 6964 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
10086: LD_EXP 1
10090: PPUSH
10091: LD_STRING DT3a-JMM-1
10093: PPUSH
10094: CALL_OW 88
// CenterNowOnUnits ( human ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a1 ) ;
10107: LD_EXP 1
10111: PPUSH
10112: LD_STRING DT3a-JMM-1a1
10114: PPUSH
10115: CALL_OW 88
// DialogueOff ;
10119: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
10123: LD_VAR 0 1
10127: PUSH
10128: LD_INT 10
10130: EQUAL
10131: PUSH
10132: LD_VAR 0 2
10136: PPUSH
10137: CALL_OW 247
10141: PUSH
10142: LD_INT 2
10144: EQUAL
10145: AND
10146: PUSH
10147: LD_VAR 0 2
10151: PPUSH
10152: CALL_OW 255
10156: PUSH
10157: LD_INT 3
10159: EQUAL
10160: AND
10161: PUSH
10162: LD_EXP 24
10166: PUSH
10167: LD_INT 0
10169: EQUAL
10170: AND
10171: IFFALSE 10181
// vehicleTeleported = 1 ;
10173: LD_ADDR_EXP 24
10177: PUSH
10178: LD_INT 1
10180: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
10181: LD_VAR 0 1
10185: PUSH
10186: LD_INT 10
10188: EQUAL
10189: PUSH
10190: LD_VAR 0 2
10194: PPUSH
10195: CALL_OW 247
10199: PUSH
10200: LD_INT 2
10202: EQUAL
10203: AND
10204: PUSH
10205: LD_VAR 0 2
10209: PPUSH
10210: CALL_OW 255
10214: PUSH
10215: LD_INT 3
10217: EQUAL
10218: AND
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_INT 2
10227: EQUAL
10228: AND
10229: IFFALSE 10239
// vehicleTeleported = 3 ;
10231: LD_ADDR_EXP 24
10235: PUSH
10236: LD_INT 3
10238: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 3 then
10239: LD_VAR 0 1
10243: PUSH
10244: LD_INT 10
10246: EQUAL
10247: PUSH
10248: LD_VAR 0 2
10252: PPUSH
10253: CALL_OW 247
10257: PUSH
10258: LD_INT 2
10260: EQUAL
10261: AND
10262: PUSH
10263: LD_VAR 0 2
10267: PPUSH
10268: CALL_OW 255
10272: PUSH
10273: LD_INT 3
10275: EQUAL
10276: AND
10277: PUSH
10278: LD_EXP 24
10282: PUSH
10283: LD_INT 3
10285: EQUAL
10286: AND
10287: IFFALSE 10297
// vehicleTeleported = 4 ;
10289: LD_ADDR_EXP 24
10293: PUSH
10294: LD_INT 4
10296: ST_TO_ADDR
// end ; end_of_file
10297: PPOPN 2
10299: END
// every 0 0$1 do
10300: GO 10302
10302: DISABLE
// begin enable ;
10303: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
10304: LD_INT 3
10306: PPUSH
10307: LD_INT 6
10309: PPUSH
10310: LD_INT 9
10312: PPUSH
10313: LD_EXP 33
10317: PPUSH
10318: CALL 8264 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
10322: LD_INT 3
10324: PPUSH
10325: LD_INT 4
10327: PPUSH
10328: LD_INT 10
10330: PPUSH
10331: LD_EXP 33
10335: PPUSH
10336: CALL 8264 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
10340: LD_INT 3
10342: PPUSH
10343: LD_INT 16
10345: PPUSH
10346: LD_INT 9
10348: PPUSH
10349: LD_INT 91
10351: PPUSH
10352: CALL 8655 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
10356: LD_INT 3
10358: PPUSH
10359: LD_INT 17
10361: PPUSH
10362: LD_INT 10
10364: PPUSH
10365: LD_INT 47
10367: PUSH
10368: LD_INT 129
10370: PUSH
10371: LD_INT 135
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL 8655 0 4
// AttackVehicles ( 3 ) ;
10383: LD_INT 3
10385: PPUSH
10386: CALL 9310 0 1
// end ;
10390: END
// every 0 0$1 do
10391: GO 10393
10393: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
10394: LD_INT 3
10396: PPUSH
10397: LD_INT 91
10399: PPUSH
10400: LD_INT 3
10402: PPUSH
10403: CALL 8179 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
10407: LD_INT 3
10409: PPUSH
10410: LD_INT 47
10412: PPUSH
10413: LD_INT 3
10415: PPUSH
10416: CALL 8179 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
10420: LD_INT 3
10422: PPUSH
10423: LD_INT 129
10425: PPUSH
10426: LD_INT 3
10428: PPUSH
10429: CALL 8179 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
10433: LD_INT 3
10435: PPUSH
10436: LD_INT 3
10438: PPUSH
10439: LD_INT 3
10441: PPUSH
10442: CALL 8179 0 3
// end ;
10446: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
10447: LD_EXP 23
10451: PUSH
10452: LD_INT 2
10454: EQUAL
10455: PUSH
10456: LD_INT 22
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 21
10468: PUSH
10469: LD_INT 2
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 50
10478: PUSH
10479: EMPTY
10480: LIST
10481: PUSH
10482: LD_INT 3
10484: PUSH
10485: LD_INT 58
10487: PUSH
10488: EMPTY
10489: LIST
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: PPUSH
10501: CALL_OW 69
10505: PUSH
10506: LD_INT 18
10508: PPUSH
10509: LD_INT 22
10511: PUSH
10512: LD_INT 3
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 21
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PPUSH
10533: CALL_OW 70
10537: PUSH
10538: LD_INT 0
10540: EQUAL
10541: DIFF
10542: AND
10543: IFFALSE 10670
10545: GO 10547
10547: DISABLE
// begin enable ;
10548: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 24 ) ;
10549: LD_INT 3
10551: PPUSH
10552: LD_INT 21
10554: PPUSH
10555: LD_INT 3
10557: PUSH
10558: LD_INT 4
10560: PUSH
10561: LD_INT 4
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: PUSH
10569: LD_OWVAR 67
10573: ARRAY
10574: PPUSH
10575: LD_INT 46
10577: PUSH
10578: LD_INT 45
10580: PUSH
10581: LD_INT 44
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: PPUSH
10589: LD_INT 3
10591: PPUSH
10592: LD_INT 1
10594: PUSH
10595: LD_INT 3
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 1
10604: PPUSH
10605: LD_INT 2
10607: PPUSH
10608: CALL_OW 12
10612: ARRAY
10613: PPUSH
10614: LD_INT 24
10616: PPUSH
10617: CALL 9163 0 7
// BuildingVehicle ( 3 , rufab2 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
10621: LD_INT 3
10623: PPUSH
10624: LD_INT 112
10626: PPUSH
10627: LD_INT 3
10629: PUSH
10630: LD_INT 4
10632: PUSH
10633: LD_INT 4
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_OWVAR 67
10645: ARRAY
10646: PPUSH
10647: LD_INT 49
10649: PUSH
10650: LD_INT 49
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: LD_INT 3
10659: PPUSH
10660: LD_INT 3
10662: PPUSH
10663: LD_INT 24
10665: PPUSH
10666: CALL 9163 0 7
// end ; end_of_file
10670: END
// every 0 0$1 trigger RuScientists = [ ] do
10671: LD_EXP 29
10675: PUSH
10676: EMPTY
10677: EQUAL
10678: IFFALSE 10883
10680: GO 10682
10682: DISABLE
// begin if sciCounter = 0 then
10683: LD_EXP 30
10687: PUSH
10688: LD_INT 0
10690: EQUAL
10691: IFFALSE 10717
// begin Say ( JMM , D7a-JMM-1 ) ;
10693: LD_EXP 1
10697: PPUSH
10698: LD_STRING D7a-JMM-1
10700: PPUSH
10701: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
10705: LD_EXP 19
10709: PPUSH
10710: LD_STRING D7a-Pow-1
10712: PPUSH
10713: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
10717: LD_EXP 30
10721: PUSH
10722: LD_INT 0
10724: GREATER
10725: PUSH
10726: LD_EXP 30
10730: PUSH
10731: LD_INT 6
10733: LESS
10734: AND
10735: IFFALSE 10761
// begin Say ( JMM , D7b-JMM-1 ) ;
10737: LD_EXP 1
10741: PPUSH
10742: LD_STRING D7b-JMM-1
10744: PPUSH
10745: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
10749: LD_EXP 19
10753: PPUSH
10754: LD_STRING D7b-Pow-1
10756: PPUSH
10757: CALL_OW 94
// end ; if sciCounter = 6 then
10761: LD_EXP 30
10765: PUSH
10766: LD_INT 6
10768: EQUAL
10769: IFFALSE 10879
// begin Say ( JMM , D7c-JMM-1 ) ;
10771: LD_EXP 1
10775: PPUSH
10776: LD_STRING D7c-JMM-1
10778: PPUSH
10779: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
10783: LD_EXP 19
10787: PPUSH
10788: LD_STRING D7c-Pow-1
10790: PPUSH
10791: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
10795: LD_EXP 1
10799: PPUSH
10800: LD_STRING D7d-JMM-1
10802: PPUSH
10803: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
10807: LD_EXP 19
10811: PPUSH
10812: LD_STRING D7d-Pow-1
10814: PPUSH
10815: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
10819: LD_EXP 1
10823: PPUSH
10824: LD_STRING D7d-JMM-2
10826: PPUSH
10827: CALL_OW 88
// if askSiberite = 1 then
10831: LD_EXP 27
10835: PUSH
10836: LD_INT 1
10838: EQUAL
10839: IFFALSE 10855
// begin Say ( JMM , D7d-JMM-2a ) ;
10841: LD_EXP 1
10845: PPUSH
10846: LD_STRING D7d-JMM-2a
10848: PPUSH
10849: CALL_OW 88
// end else
10853: GO 10867
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
10855: LD_EXP 19
10859: PPUSH
10860: LD_STRING D7d-Pow-2
10862: PPUSH
10863: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
10867: LD_EXP 19
10871: PPUSH
10872: LD_STRING D7d-Pow-2a
10874: PPUSH
10875: CALL_OW 94
// end ; FinishMission ;
10879: CALL 10884 0 0
// end ;
10883: END
// export function FinishMission ; begin
10884: LD_INT 0
10886: PPUSH
// if teleportExplored = 1 then
10887: LD_EXP 28
10891: PUSH
10892: LD_INT 1
10894: EQUAL
10895: IFFALSE 10909
// AddMedal ( Teleport , 1 ) else
10897: LD_STRING Teleport
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 101
10907: GO 10920
// AddMedal ( Teleport , - 1 ) ;
10909: LD_STRING Teleport
10911: PPUSH
10912: LD_INT 1
10914: NEG
10915: PPUSH
10916: CALL_OW 101
// if sciCounter > 0 and sciCounter < 6 then
10920: LD_EXP 30
10924: PUSH
10925: LD_INT 0
10927: GREATER
10928: PUSH
10929: LD_EXP 30
10933: PUSH
10934: LD_INT 6
10936: LESS
10937: AND
10938: IFFALSE 10952
// AddMedal ( Materials , 1 ) else
10940: LD_STRING Materials
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 101
10950: GO 10963
// AddMedal ( Materials , - 1 ) ;
10952: LD_STRING Materials
10954: PPUSH
10955: LD_INT 1
10957: NEG
10958: PPUSH
10959: CALL_OW 101
// if sciCounter = 6 then
10963: LD_EXP 30
10967: PUSH
10968: LD_INT 6
10970: EQUAL
10971: IFFALSE 10985
// AddMedal ( Scientists , 1 ) else
10973: LD_STRING Scientists
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: CALL_OW 101
10983: GO 10996
// AddMedal ( Scientists , - 1 ) ;
10985: LD_STRING Scientists
10987: PPUSH
10988: LD_INT 1
10990: NEG
10991: PPUSH
10992: CALL_OW 101
// GiveMedals ( MAIN ) ;
10996: LD_STRING MAIN
10998: PPUSH
10999: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
11003: LD_INT 22
11005: PUSH
11006: LD_INT 1
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 23
11015: PUSH
11016: LD_INT 1
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 21
11025: PUSH
11026: LD_INT 1
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: LD_INT 25
11038: PUSH
11039: LD_INT 1
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 25
11048: PUSH
11049: LD_INT 2
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 25
11058: PUSH
11059: LD_INT 3
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 25
11068: PUSH
11069: LD_INT 4
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 25
11078: PUSH
11079: LD_INT 5
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: PPUSH
11105: CALL_OW 43
// YouWin ;
11109: CALL_OW 103
// end ;
11113: LD_VAR 0 1
11117: RET
