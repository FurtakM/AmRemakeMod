// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 42
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// askSiberite = 0 ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// warWithLegion = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// fakeInfo = 0 ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// cratesSpawned = 0 ;
 127: LD_ADDR_EXP 43
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// ruAI = 0 ;
 135: LD_ADDR_EXP 41
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// eventVar1 = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// mission_prefix = 12_ ;
 151: LD_ADDR_EXP 44
 155: PUSH
 156: LD_STRING 12_
 158: ST_TO_ADDR
// debugMode = 0 ;
 159: LD_ADDR_EXP 46
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// PrepareNature ;
 167: CALL 15636 0 0
// PrepareDifficulty ;
 171: CALL 12593 0 0
// PrepareVehicles ;
 175: CALL 1523 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 179: LD_INT 4
 181: PPUSH
 182: LD_INT 0
 184: PPUSH
 185: LD_INT 1
 187: PPUSH
 188: LD_INT 0
 190: PPUSH
 191: CALL 1099 0 4
// PrepareAmericanHeroes ;
 195: CALL 533 0 0
// PrepareRussianCommander ;
 199: CALL 2842 0 0
// PrepareWestBase ;
 203: CALL 3354 0 0
// PrepareEastBase ;
 207: CALL 2914 0 0
// PrepareOtherRussians ;
 211: CALL 3466 0 0
// end ;
 215: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 216: LD_EXP 46
 220: PUSH
 221: LD_INT 1
 223: EQUAL
 224: IFFALSE 530
 226: GO 228
 228: DISABLE
 229: LD_INT 0
 231: PPUSH
// begin enable ;
 232: ENABLE
// fogoff ( true ) ;
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 240: LD_ADDR_VAR 0 1
 244: PUSH
 245: LD_INT 22
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 21
 257: PUSH
 258: LD_INT 1
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: PPUSH
 269: CALL_OW 69
 273: PUSH
 274: FOR_IN
 275: IFFALSE 291
// SetLives ( i , 1000 ) ;
 277: LD_VAR 0 1
 281: PPUSH
 282: LD_INT 1000
 284: PPUSH
 285: CALL_OW 234
 289: GO 274
 291: POP
 292: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 293: LD_ADDR_VAR 0 1
 297: PUSH
 298: LD_INT 22
 300: PUSH
 301: LD_INT 1
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 2
 310: PUSH
 311: LD_INT 30
 313: PUSH
 314: LD_INT 0
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 30
 323: PUSH
 324: LD_INT 1
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: PUSH
 345: FOR_IN
 346: IFFALSE 370
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 348: LD_VAR 0 1
 352: PPUSH
 353: CALL_OW 274
 357: PPUSH
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 9999
 363: PPUSH
 364: CALL_OW 277
 368: GO 345
 370: POP
 371: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 372: LD_ADDR_VAR 0 1
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 1
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 30
 392: PUSH
 393: LD_INT 0
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 30
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PPUSH
 419: CALL_OW 69
 423: PUSH
 424: FOR_IN
 425: IFFALSE 449
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 427: LD_VAR 0 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 2
 439: PPUSH
 440: LD_INT 9999
 442: PPUSH
 443: CALL_OW 277
 447: GO 424
 449: POP
 450: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 451: LD_ADDR_VAR 0 1
 455: PUSH
 456: LD_INT 22
 458: PUSH
 459: LD_INT 1
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: PUSH
 466: LD_INT 2
 468: PUSH
 469: LD_INT 30
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 30
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: PPUSH
 498: CALL_OW 69
 502: PUSH
 503: FOR_IN
 504: IFFALSE 528
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 506: LD_VAR 0 1
 510: PPUSH
 511: CALL_OW 274
 515: PPUSH
 516: LD_INT 3
 518: PPUSH
 519: LD_INT 9999
 521: PPUSH
 522: CALL_OW 277
 526: GO 503
 528: POP
 529: POP
// end ; end_of_file
 530: PPOPN 1
 532: END
// export function PrepareAmericanHeroes ; begin
 533: LD_INT 0
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 544: LD_ADDR_EXP 14
 548: PUSH
 549: LD_STRING 11_others
 551: PPUSH
 552: CALL_OW 31
 556: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 557: LD_ADDR_EXP 1
 561: PUSH
 562: LD_STRING 11_JMM
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL 12232 0 2
 572: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 573: LD_EXP 1
 577: PPUSH
 578: LD_INT 1
 580: PPUSH
 581: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 585: LD_EXP 1
 589: PPUSH
 590: LD_INT 22
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 21
 602: PUSH
 603: LD_INT 2
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 58
 612: PUSH
 613: EMPTY
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 69
 625: PUSH
 626: LD_INT 1
 628: ARRAY
 629: PPUSH
 630: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 634: LD_STRING 11_Lisa
 636: PPUSH
 637: CALL_OW 28
 641: PUSH
 642: LD_INT 1
 644: EQUAL
 645: IFFALSE 692
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 647: LD_ADDR_EXP 2
 651: PUSH
 652: LD_STRING 11_Lisa
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL 12232 0 2
 662: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 663: LD_EXP 2
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 675: LD_EXP 2
 679: PPUSH
 680: LD_INT 4
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// end else
 690: GO 708
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 692: LD_INT 4
 694: PPUSH
 695: LD_INT 0
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL 1099 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 708: LD_STRING 11_Donaldson
 710: PPUSH
 711: CALL_OW 28
 715: PUSH
 716: LD_INT 1
 718: EQUAL
 719: IFFALSE 766
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 721: LD_ADDR_EXP 3
 725: PUSH
 726: LD_STRING 11_Donaldson
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL 12232 0 2
 736: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 737: LD_EXP 3
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 749: LD_EXP 3
 753: PPUSH
 754: LD_INT 4
 756: PPUSH
 757: LD_INT 0
 759: PPUSH
 760: CALL_OW 49
// end else
 764: GO 782
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 766: LD_INT 4
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL 1099 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 782: LD_STRING 11_Cyrus
 784: PPUSH
 785: CALL_OW 28
 789: PUSH
 790: LD_INT 1
 792: EQUAL
 793: IFFALSE 840
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 795: LD_ADDR_EXP 5
 799: PUSH
 800: LD_STRING 11_Cyrus
 802: PPUSH
 803: LD_INT 1
 805: PPUSH
 806: CALL 12232 0 2
 810: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 811: LD_EXP 5
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 823: LD_EXP 5
 827: PPUSH
 828: LD_INT 4
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: CALL_OW 49
// end else
 838: GO 856
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 840: LD_INT 4
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL 1099 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 856: LD_STRING 11_Denis
 858: PPUSH
 859: CALL_OW 28
 863: PUSH
 864: LD_INT 1
 866: EQUAL
 867: IFFALSE 914
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 869: LD_ADDR_EXP 6
 873: PUSH
 874: LD_STRING 11_Denis
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL 12232 0 2
 884: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 885: LD_EXP 6
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 897: LD_EXP 6
 901: PPUSH
 902: LD_INT 4
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 49
// end else
 912: GO 930
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 914: LD_INT 4
 916: PPUSH
 917: LD_INT 0
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: LD_INT 0
 925: PPUSH
 926: CALL 1099 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 930: LD_STRING 11_Frank
 932: PPUSH
 933: CALL_OW 28
 937: PUSH
 938: LD_INT 1
 940: EQUAL
 941: IFFALSE 988
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 943: LD_ADDR_EXP 12
 947: PUSH
 948: LD_STRING 11_Frank
 950: PPUSH
 951: LD_INT 1
 953: PPUSH
 954: CALL 12232 0 2
 958: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 959: LD_EXP 12
 963: PPUSH
 964: LD_INT 1
 966: PPUSH
 967: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 971: LD_EXP 12
 975: PPUSH
 976: LD_INT 4
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 49
// end else
 986: GO 1004
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 988: LD_INT 4
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL 1099 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1004: LD_STRING 11_Cornell
1006: PPUSH
1007: CALL_OW 28
1011: PUSH
1012: LD_INT 1
1014: EQUAL
1015: IFFALSE 1062
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1017: LD_ADDR_EXP 10
1021: PUSH
1022: LD_STRING 11_Cornell
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: CALL 12232 0 2
1032: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1033: LD_EXP 10
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1045: LD_EXP 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 0
1055: PPUSH
1056: CALL_OW 49
// end else
1060: GO 1078
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1062: LD_INT 4
1064: PPUSH
1065: LD_INT 0
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL 1099 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1078: LD_ADDR_EXP 22
1082: PUSH
1083: LD_STRING Powell
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL 12232 0 2
1093: ST_TO_ADDR
// end ;
1094: LD_VAR 0 1
1098: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1099: LD_INT 0
1101: PPUSH
1102: PPUSH
1103: PPUSH
1104: PPUSH
1105: PPUSH
// if mech = 1 then
1106: LD_VAR 0 4
1110: PUSH
1111: LD_INT 1
1113: EQUAL
1114: IFFALSE 1349
// begin if others11 > 0 then
1116: LD_EXP 14
1120: PUSH
1121: LD_INT 0
1123: GREATER
1124: IFFALSE 1289
// begin for i := 1 to others11 - 1 do
1126: LD_ADDR_VAR 0 6
1130: PUSH
1131: DOUBLE
1132: LD_INT 1
1134: DEC
1135: ST_TO_ADDR
1136: LD_EXP 14
1140: PUSH
1141: LD_INT 1
1143: MINUS
1144: PUSH
1145: FOR_TO
1146: IFFALSE 1226
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1148: LD_EXP 14
1152: PUSH
1153: LD_VAR 0 6
1157: ARRAY
1158: PPUSH
1159: LD_INT 3
1161: PPUSH
1162: CALL_OW 259
1166: PUSH
1167: LD_EXP 14
1171: PUSH
1172: LD_VAR 0 6
1176: PUSH
1177: LD_INT 1
1179: PLUS
1180: ARRAY
1181: PPUSH
1182: LD_INT 3
1184: PPUSH
1185: CALL_OW 259
1189: LESS
1190: IFFALSE 1224
// begin mecha = others11 [ i + 1 ] ;
1192: LD_ADDR_VAR 0 9
1196: PUSH
1197: LD_EXP 14
1201: PUSH
1202: LD_VAR 0 6
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1212: LD_VAR 0 9
1216: PPUSH
1217: LD_INT 3
1219: PPUSH
1220: CALL_OW 336
// end ; end ;
1224: GO 1145
1226: POP
1227: POP
// if spawnMode = 1 then
1228: LD_VAR 0 3
1232: PUSH
1233: LD_INT 1
1235: EQUAL
1236: IFFALSE 1257
// PlaceUnitArea ( mecha , area , false ) else
1238: LD_VAR 0 9
1242: PPUSH
1243: LD_VAR 0 1
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: CALL_OW 49
1255: GO 1271
// PlaceHumanInUnit ( mecha , veh ) ;
1257: LD_VAR 0 9
1261: PPUSH
1262: LD_VAR 0 2
1266: PPUSH
1267: CALL_OW 52
// others11 = others11 diff mecha ;
1271: LD_ADDR_EXP 14
1275: PUSH
1276: LD_EXP 14
1280: PUSH
1281: LD_VAR 0 9
1285: DIFF
1286: ST_TO_ADDR
// end else
1287: GO 1347
// begin hc_name =  ;
1289: LD_ADDR_OWVAR 26
1293: PUSH
1294: LD_STRING 
1296: ST_TO_ADDR
// hc_gallery =  ;
1297: LD_ADDR_OWVAR 33
1301: PUSH
1302: LD_STRING 
1304: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 7
1310: PPUSH
1311: LD_INT 9
1313: PPUSH
1314: CALL_OW 12
1318: PPUSH
1319: CALL_OW 383
// un = CreateHuman ;
1323: LD_ADDR_VAR 0 7
1327: PUSH
1328: CALL_OW 44
1332: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1333: LD_VAR 0 7
1337: PPUSH
1338: LD_VAR 0 2
1342: PPUSH
1343: CALL_OW 52
// end ; end else
1347: GO 1518
// begin if others11 > 0 then
1349: LD_EXP 14
1353: PUSH
1354: LD_INT 0
1356: GREATER
1357: IFFALSE 1430
// begin if spawnMode = 1 then
1359: LD_VAR 0 3
1363: PUSH
1364: LD_INT 1
1366: EQUAL
1367: IFFALSE 1392
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1369: LD_EXP 14
1373: PUSH
1374: LD_INT 1
1376: ARRAY
1377: PPUSH
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 49
1390: GO 1410
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1392: LD_EXP 14
1396: PUSH
1397: LD_INT 1
1399: ARRAY
1400: PPUSH
1401: LD_VAR 0 2
1405: PPUSH
1406: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1410: LD_ADDR_EXP 14
1414: PUSH
1415: LD_EXP 14
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: CALL_OW 3
1427: ST_TO_ADDR
// end else
1428: GO 1518
// begin hc_name =  ;
1430: LD_ADDR_OWVAR 26
1434: PUSH
1435: LD_STRING 
1437: ST_TO_ADDR
// hc_gallery =  ;
1438: LD_ADDR_OWVAR 33
1442: PUSH
1443: LD_STRING 
1445: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1446: LD_INT 0
1448: PPUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: LD_INT 3
1457: PUSH
1458: LD_INT 4
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: PUSH
1467: LD_INT 1
1469: PPUSH
1470: LD_INT 4
1472: PPUSH
1473: CALL_OW 12
1477: ARRAY
1478: PPUSH
1479: LD_INT 7
1481: PPUSH
1482: LD_INT 9
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: CALL_OW 380
// un = CreateHuman ;
1494: LD_ADDR_VAR 0 7
1498: PUSH
1499: CALL_OW 44
1503: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1504: LD_VAR 0 7
1508: PPUSH
1509: LD_VAR 0 2
1513: PPUSH
1514: CALL_OW 52
// end ; end ; end ;
1518: LD_VAR 0 5
1522: RET
// export function PrepareVehicles ; var veh ; begin
1523: LD_INT 0
1525: PPUSH
1526: PPUSH
// uc_side = 1 ;
1527: LD_ADDR_OWVAR 20
1531: PUSH
1532: LD_INT 1
1534: ST_TO_ADDR
// uc_nation = 1 ;
1535: LD_ADDR_OWVAR 21
1539: PUSH
1540: LD_INT 1
1542: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1543: LD_ADDR_OWVAR 37
1547: PUSH
1548: LD_INT 3
1550: ST_TO_ADDR
// vc_engine = 3 ;
1551: LD_ADDR_OWVAR 39
1555: PUSH
1556: LD_INT 3
1558: ST_TO_ADDR
// vc_control = 3 ;
1559: LD_ADDR_OWVAR 38
1563: PUSH
1564: LD_INT 3
1566: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1567: LD_ADDR_OWVAR 40
1571: PUSH
1572: LD_INT 4
1574: ST_TO_ADDR
// veh = CreateVehicle ;
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: CALL_OW 45
1584: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1585: LD_VAR 0 2
1589: PPUSH
1590: LD_INT 4
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL_OW 49
// vc_weapon = us_double_gun ;
1600: LD_ADDR_OWVAR 40
1604: PUSH
1605: LD_INT 5
1607: ST_TO_ADDR
// vc_control = 1 ;
1608: LD_ADDR_OWVAR 38
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// veh = CreateVehicle ;
1616: LD_ADDR_VAR 0 2
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1626: LD_VAR 0 2
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 49
// vc_weapon = us_light_gun ;
1641: LD_ADDR_OWVAR 40
1645: PUSH
1646: LD_INT 3
1648: ST_TO_ADDR
// vc_control = 3 ;
1649: LD_ADDR_OWVAR 38
1653: PUSH
1654: LD_INT 3
1656: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1657: LD_ADDR_OWVAR 37
1661: PUSH
1662: LD_INT 2
1664: ST_TO_ADDR
// veh = CreateVehicle ;
1665: LD_ADDR_VAR 0 2
1669: PUSH
1670: CALL_OW 45
1674: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1675: LD_VAR 0 2
1679: PPUSH
1680: LD_INT 4
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1690: LD_ADDR_OWVAR 40
1694: PUSH
1695: LD_INT 4
1697: ST_TO_ADDR
// veh = CreateVehicle ;
1698: LD_ADDR_VAR 0 2
1702: PUSH
1703: CALL_OW 45
1707: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1708: LD_VAR 0 2
1712: PPUSH
1713: LD_INT 4
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 49
// end ;
1723: LD_VAR 0 1
1727: RET
// export function PowellSupport1 ; var veh , un ; begin
1728: LD_INT 0
1730: PPUSH
1731: PPUSH
1732: PPUSH
// uc_side = 1 ;
1733: LD_ADDR_OWVAR 20
1737: PUSH
1738: LD_INT 1
1740: ST_TO_ADDR
// uc_nation = 1 ;
1741: LD_ADDR_OWVAR 21
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1749: LD_STRING 11_Brown
1751: PPUSH
1752: CALL_OW 28
1756: PUSH
1757: LD_INT 1
1759: EQUAL
1760: IFFALSE 1807
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1762: LD_ADDR_EXP 7
1766: PUSH
1767: LD_STRING 11_Brown
1769: PPUSH
1770: LD_INT 1
1772: PPUSH
1773: CALL 12232 0 2
1777: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1778: LD_EXP 7
1782: PPUSH
1783: LD_INT 2
1785: PPUSH
1786: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1790: LD_EXP 7
1794: PPUSH
1795: LD_INT 4
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 49
// end else
1805: GO 1823
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1807: LD_INT 4
1809: PPUSH
1810: LD_INT 0
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 1099 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1823: LD_STRING 11_Gary
1825: PPUSH
1826: CALL_OW 28
1830: PUSH
1831: LD_INT 1
1833: EQUAL
1834: IFFALSE 1881
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1836: LD_ADDR_EXP 11
1840: PUSH
1841: LD_STRING 11_Gary
1843: PPUSH
1844: LD_INT 1
1846: PPUSH
1847: CALL 12232 0 2
1851: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1852: LD_EXP 11
1856: PPUSH
1857: LD_INT 2
1859: PPUSH
1860: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1864: LD_EXP 11
1868: PPUSH
1869: LD_INT 4
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 49
// end else
1879: GO 1897
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1881: LD_INT 4
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL 1099 0 4
// end ; vc_chassis = us_medium_tracked ;
1897: LD_ADDR_OWVAR 37
1901: PUSH
1902: LD_INT 3
1904: ST_TO_ADDR
// vc_engine = 3 ;
1905: LD_ADDR_OWVAR 39
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_control = 1 ;
1913: LD_ADDR_OWVAR 38
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// vc_weapon = us_crane ;
1921: LD_ADDR_OWVAR 40
1925: PUSH
1926: LD_INT 13
1928: ST_TO_ADDR
// veh = CreateVehicle ;
1929: LD_ADDR_VAR 0 2
1933: PUSH
1934: CALL_OW 45
1938: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1939: LD_VAR 0 2
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1951: LD_VAR 0 2
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
1966: LD_INT 4
1968: PPUSH
1969: LD_VAR 0 2
1973: PPUSH
1974: LD_INT 2
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL 1099 0 4
// vc_weapon = 9 ;
1984: LD_ADDR_OWVAR 40
1988: PUSH
1989: LD_INT 9
1991: ST_TO_ADDR
// veh = CreateVehicle ;
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: CALL_OW 45
2001: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2002: LD_VAR 0 2
2006: PPUSH
2007: LD_INT 4
2009: PPUSH
2010: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2014: LD_VAR 0 2
2018: PPUSH
2019: LD_INT 4
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2029: LD_INT 4
2031: PPUSH
2032: LD_VAR 0 2
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL 1099 0 4
// vc_control = 3 ;
2047: LD_ADDR_OWVAR 38
2051: PUSH
2052: LD_INT 3
2054: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2055: LD_ADDR_OWVAR 40
2059: PUSH
2060: LD_INT 12
2062: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2063: LD_ADDR_EXP 15
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2073: LD_ADDR_EXP 16
2077: PUSH
2078: CALL_OW 45
2082: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2083: LD_EXP 15
2087: PPUSH
2088: LD_INT 4
2090: PPUSH
2091: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2095: LD_EXP 16
2099: PPUSH
2100: LD_INT 4
2102: PPUSH
2103: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2107: LD_EXP 15
2111: PPUSH
2112: LD_INT 4
2114: PPUSH
2115: LD_INT 0
2117: PPUSH
2118: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2122: LD_EXP 16
2126: PPUSH
2127: LD_INT 4
2129: PPUSH
2130: LD_INT 0
2132: PPUSH
2133: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2137: LD_EXP 15
2141: PPUSH
2142: LD_INT 3
2144: PPUSH
2145: LD_INT 100
2147: PPUSH
2148: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2152: LD_EXP 16
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: LD_INT 80
2162: PPUSH
2163: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2167: LD_EXP 16
2171: PPUSH
2172: LD_INT 3
2174: PPUSH
2175: LD_INT 20
2177: PPUSH
2178: CALL_OW 291
// end ;
2182: LD_VAR 0 1
2186: RET
// export function PowellSupport2 ; var veh , un ; begin
2187: LD_INT 0
2189: PPUSH
2190: PPUSH
2191: PPUSH
// uc_side = 1 ;
2192: LD_ADDR_OWVAR 20
2196: PUSH
2197: LD_INT 1
2199: ST_TO_ADDR
// uc_nation = 1 ;
2200: LD_ADDR_OWVAR 21
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2208: LD_ADDR_OWVAR 37
2212: PUSH
2213: LD_INT 2
2215: ST_TO_ADDR
// vc_engine = 3 ;
2216: LD_ADDR_OWVAR 39
2220: PUSH
2221: LD_INT 3
2223: ST_TO_ADDR
// vc_control = 3 ;
2224: LD_ADDR_OWVAR 38
2228: PUSH
2229: LD_INT 3
2231: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 3
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// vc_control = 1 ;
2277: LD_ADDR_OWVAR 38
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2285: LD_ADDR_OWVAR 37
2289: PUSH
2290: LD_INT 2
2292: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2293: LD_ADDR_OWVAR 40
2297: PUSH
2298: LD_INT 5
2300: ST_TO_ADDR
// veh = CreateVehicle ;
2301: LD_ADDR_VAR 0 2
2305: PUSH
2306: CALL_OW 45
2310: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2311: LD_VAR 0 2
2315: PPUSH
2316: LD_INT 4
2318: PPUSH
2319: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2323: LD_VAR 0 2
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: LD_INT 0
2333: PPUSH
2334: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2338: LD_STRING 11_Bobby
2340: PPUSH
2341: CALL_OW 28
2345: PUSH
2346: LD_INT 1
2348: EQUAL
2349: IFFALSE 2395
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2351: LD_ADDR_EXP 4
2355: PUSH
2356: LD_STRING 11_Bobby
2358: PPUSH
2359: LD_INT 1
2361: PPUSH
2362: CALL 12232 0 2
2366: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2367: LD_EXP 4
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2379: LD_EXP 4
2383: PPUSH
2384: LD_VAR 0 2
2388: PPUSH
2389: CALL_OW 52
// end else
2393: GO 2413
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2395: LD_INT 0
2397: PPUSH
2398: LD_VAR 0 2
2402: PPUSH
2403: LD_INT 2
2405: PPUSH
2406: LD_INT 0
2408: PPUSH
2409: CALL 1099 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2413: LD_STRING 11_Houten
2415: PPUSH
2416: CALL_OW 28
2420: PUSH
2421: LD_INT 1
2423: EQUAL
2424: IFFALSE 2471
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2426: LD_ADDR_EXP 9
2430: PUSH
2431: LD_STRING 11_Houten
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: CALL 12232 0 2
2441: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2442: LD_EXP 9
2446: PPUSH
2447: LD_INT 1
2449: PPUSH
2450: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2454: LD_EXP 9
2458: PPUSH
2459: LD_INT 4
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 49
// end else
2469: GO 2487
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2471: LD_INT 4
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL 1099 0 4
// end ; vc_control = 3 ;
2487: LD_ADDR_OWVAR 38
2491: PUSH
2492: LD_INT 3
2494: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2495: LD_ADDR_OWVAR 40
2499: PUSH
2500: LD_INT 12
2502: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2503: LD_ADDR_EXP 17
2507: PUSH
2508: CALL_OW 45
2512: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2513: LD_EXP 17
2517: PPUSH
2518: LD_INT 4
2520: PPUSH
2521: CALL_OW 233
// amCargo4 = CreateVehicle ;
2525: LD_ADDR_EXP 18
2529: PUSH
2530: CALL_OW 45
2534: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2535: LD_EXP 18
2539: PPUSH
2540: LD_INT 4
2542: PPUSH
2543: CALL_OW 233
// amCargo5 = CreateVehicle ;
2547: LD_ADDR_EXP 19
2551: PUSH
2552: CALL_OW 45
2556: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2557: LD_EXP 19
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2569: LD_EXP 17
2573: PPUSH
2574: LD_INT 4
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2584: LD_EXP 18
2588: PPUSH
2589: LD_INT 4
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2599: LD_EXP 19
2603: PPUSH
2604: LD_INT 4
2606: PPUSH
2607: LD_INT 0
2609: PPUSH
2610: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2614: LD_EXP 17
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: LD_INT 100
2624: PPUSH
2625: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2629: LD_EXP 18
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 100
2639: PPUSH
2640: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2644: LD_EXP 19
2648: PPUSH
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 100
2654: PPUSH
2655: CALL_OW 291
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PowellSupport3 ; var veh , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 1 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// uc_nation = 1 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2685: LD_INT 4
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: LD_INT 1
2693: PPUSH
2694: LD_INT 0
2696: PPUSH
2697: CALL 1099 0 4
// vc_chassis = us_medium_wheeled ;
2701: LD_ADDR_OWVAR 37
2705: PUSH
2706: LD_INT 2
2708: ST_TO_ADDR
// vc_engine = 3 ;
2709: LD_ADDR_OWVAR 39
2713: PUSH
2714: LD_INT 3
2716: ST_TO_ADDR
// vc_control = 3 ;
2717: LD_ADDR_OWVAR 38
2721: PUSH
2722: LD_INT 3
2724: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2725: LD_ADDR_OWVAR 40
2729: PUSH
2730: LD_INT 12
2732: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2733: LD_ADDR_EXP 20
2737: PUSH
2738: CALL_OW 45
2742: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2743: LD_ADDR_EXP 21
2747: PUSH
2748: CALL_OW 45
2752: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2753: LD_EXP 20
2757: PPUSH
2758: LD_INT 4
2760: PPUSH
2761: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2765: LD_EXP 21
2769: PPUSH
2770: LD_INT 4
2772: PPUSH
2773: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2777: LD_EXP 20
2781: PPUSH
2782: LD_INT 4
2784: PPUSH
2785: LD_INT 0
2787: PPUSH
2788: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2792: LD_EXP 21
2796: PPUSH
2797: LD_INT 4
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2807: LD_EXP 20
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_INT 100
2817: PPUSH
2818: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2822: LD_EXP 21
2826: PPUSH
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 100
2832: PPUSH
2833: CALL_OW 291
// end ; end_of_file
2837: LD_VAR 0 1
2841: RET
// export function PrepareRussianCommander ; begin
2842: LD_INT 0
2844: PPUSH
// uc_side = 3 ;
2845: LD_ADDR_OWVAR 20
2849: PUSH
2850: LD_INT 3
2852: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2853: LD_ADDR_EXP 23
2857: PUSH
2858: LD_STRING Davidov
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL 12232 0 2
2868: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2869: LD_EXP 23
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2881: LD_ADDR_EXP 34
2885: PUSH
2886: LD_EXP 34
2890: PUSH
2891: LD_EXP 23
2895: ADD
2896: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2897: LD_EXP 34
2901: PPUSH
2902: LD_INT 4
2904: PPUSH
2905: CALL_OW 336
// end ;
2909: LD_VAR 0 1
2913: RET
// export function PrepareEastBase ; var i , un ; begin
2914: LD_INT 0
2916: PPUSH
2917: PPUSH
2918: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2919: LD_INT 3
2921: PPUSH
2922: LD_INT 3
2924: PPUSH
2925: LD_INT 121
2927: PPUSH
2928: LD_EXP 36
2932: PPUSH
2933: LD_EXP 37
2937: PPUSH
2938: CALL_OW 12
2942: PPUSH
2943: LD_INT 1
2945: PPUSH
2946: LD_INT 3
2948: PPUSH
2949: CALL 13024 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 3
2958: PPUSH
2959: LD_INT 121
2961: PPUSH
2962: LD_EXP 36
2966: PPUSH
2967: LD_EXP 37
2971: PPUSH
2972: CALL_OW 12
2976: PPUSH
2977: LD_INT 9
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: CALL 13024 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
2987: LD_INT 3
2989: PPUSH
2990: LD_INT 3
2992: PPUSH
2993: LD_INT 4
2995: PPUSH
2996: LD_EXP 36
3000: PPUSH
3001: LD_EXP 37
3005: PPUSH
3006: CALL_OW 12
3010: PPUSH
3011: LD_INT 2
3013: PPUSH
3014: LD_INT 6
3016: PPUSH
3017: CALL 13024 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3021: LD_INT 3
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 112
3029: PPUSH
3030: LD_EXP 36
3034: PPUSH
3035: LD_EXP 37
3039: PPUSH
3040: CALL_OW 12
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 6
3050: PPUSH
3051: CALL 13024 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3055: LD_INT 3
3057: PPUSH
3058: LD_INT 3
3060: PPUSH
3061: LD_INT 47
3063: PPUSH
3064: LD_EXP 36
3068: PPUSH
3069: LD_EXP 37
3073: PPUSH
3074: CALL_OW 12
3078: PPUSH
3079: LD_INT 4
3081: PPUSH
3082: LD_INT 6
3084: PPUSH
3085: CALL 13024 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 3
3094: PPUSH
3095: LD_INT 129
3097: PPUSH
3098: LD_EXP 36
3102: PPUSH
3103: LD_EXP 37
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: LD_INT 4
3115: PPUSH
3116: LD_INT 6
3118: PPUSH
3119: CALL 13024 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3123: LD_INT 3
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: LD_INT 135
3131: PPUSH
3132: LD_EXP 36
3136: PPUSH
3137: LD_EXP 37
3141: PPUSH
3142: CALL_OW 12
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: LD_INT 6
3152: PPUSH
3153: CALL 13024 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3157: LD_ADDR_VAR 0 2
3161: PUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 3
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 30
3174: PUSH
3175: LD_INT 32
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PPUSH
3186: CALL_OW 69
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3232
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 3
3199: PPUSH
3200: LD_VAR 0 2
3204: PPUSH
3205: LD_EXP 36
3209: PPUSH
3210: LD_EXP 37
3214: PPUSH
3215: CALL_OW 12
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: LD_INT 1
3225: PPUSH
3226: CALL 13024 0 6
3230: GO 3191
3232: POP
3233: POP
// for i = 1 to 5 do
3234: LD_ADDR_VAR 0 2
3238: PUSH
3239: DOUBLE
3240: LD_INT 1
3242: DEC
3243: ST_TO_ADDR
3244: LD_INT 5
3246: PUSH
3247: FOR_TO
3248: IFFALSE 3347
// begin uc_side = 3 ;
3250: LD_ADDR_OWVAR 20
3254: PUSH
3255: LD_INT 3
3257: ST_TO_ADDR
// uc_nation = 3 ;
3258: LD_ADDR_OWVAR 21
3262: PUSH
3263: LD_INT 3
3265: ST_TO_ADDR
// hc_gallery =  ;
3266: LD_ADDR_OWVAR 33
3270: PUSH
3271: LD_STRING 
3273: ST_TO_ADDR
// hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 4
3287: PPUSH
3288: LD_EXP 36
3292: PPUSH
3293: LD_EXP 37
3297: PPUSH
3298: CALL_OW 12
3302: PPUSH
3303: CALL_OW 380
// un = CreateHuman ;
3307: LD_ADDR_VAR 0 3
3311: PUSH
3312: CALL_OW 44
3316: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3317: LD_VAR 0 3
3321: PPUSH
3322: LD_INT 3
3324: PPUSH
3325: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3329: LD_ADDR_EXP 34
3333: PUSH
3334: LD_EXP 34
3338: PUSH
3339: LD_VAR 0 3
3343: ADD
3344: ST_TO_ADDR
// end ;
3345: GO 3247
3347: POP
3348: POP
// end ;
3349: LD_VAR 0 1
3353: RET
// export function PrepareWestBase ; var i , un ; begin
3354: LD_INT 0
3356: PPUSH
3357: PPUSH
3358: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 3
3364: PPUSH
3365: LD_INT 6
3367: PPUSH
3368: LD_EXP 36
3372: PPUSH
3373: LD_EXP 37
3377: PPUSH
3378: CALL_OW 12
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL 13024 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: LD_INT 91
3401: PPUSH
3402: LD_EXP 36
3406: PPUSH
3407: LD_EXP 37
3411: PPUSH
3412: CALL_OW 12
3416: PPUSH
3417: LD_INT 4
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: CALL 13024 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3427: LD_INT 3
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_INT 21
3435: PPUSH
3436: LD_EXP 36
3440: PPUSH
3441: LD_EXP 37
3445: PPUSH
3446: CALL_OW 12
3450: PPUSH
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 6
3456: PPUSH
3457: CALL 13024 0 6
// end ;
3461: LD_VAR 0 1
3465: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3466: LD_INT 0
3468: PPUSH
3469: PPUSH
3470: PPUSH
3471: PPUSH
// uc_side = 3 ;
3472: LD_ADDR_OWVAR 20
3476: PUSH
3477: LD_INT 3
3479: ST_TO_ADDR
// uc_nation = 3 ;
3480: LD_ADDR_OWVAR 21
3484: PUSH
3485: LD_INT 3
3487: ST_TO_ADDR
// for i = 1 to 5 do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 5
3500: PUSH
3501: FOR_TO
3502: IFFALSE 3572
// begin hc_gallery =  ;
3504: LD_ADDR_OWVAR 33
3508: PUSH
3509: LD_STRING 
3511: ST_TO_ADDR
// hc_name =  ;
3512: LD_ADDR_OWVAR 26
3516: PUSH
3517: LD_STRING 
3519: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3520: LD_INT 0
3522: PPUSH
3523: LD_INT 9
3525: PPUSH
3526: LD_EXP 36
3530: PPUSH
3531: LD_EXP 37
3535: PPUSH
3536: CALL_OW 12
3540: PPUSH
3541: CALL_OW 380
// un = CreateHuman ;
3545: LD_ADDR_VAR 0 3
3549: PUSH
3550: CALL_OW 44
3554: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3555: LD_VAR 0 3
3559: PPUSH
3560: LD_INT 8
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: CALL_OW 49
// end ;
3570: GO 3501
3572: POP
3573: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: DOUBLE
3580: LD_INT 1
3582: DEC
3583: ST_TO_ADDR
3584: LD_INT 2
3586: PUSH
3587: LD_INT 3
3589: PUSH
3590: LD_INT 4
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: PUSH
3598: LD_OWVAR 67
3602: ARRAY
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3675
// begin hc_gallery =  ;
3607: LD_ADDR_OWVAR 33
3611: PUSH
3612: LD_STRING 
3614: ST_TO_ADDR
// hc_name =  ;
3615: LD_ADDR_OWVAR 26
3619: PUSH
3620: LD_STRING 
3622: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3623: LD_INT 0
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: LD_EXP 36
3633: PPUSH
3634: LD_EXP 37
3638: PPUSH
3639: CALL_OW 12
3643: PPUSH
3644: CALL_OW 380
// un = CreateHuman ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: CALL_OW 44
3657: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3658: LD_VAR 0 3
3662: PPUSH
3663: LD_INT 8
3665: PPUSH
3666: LD_INT 0
3668: PPUSH
3669: CALL_OW 49
// end ;
3673: GO 3604
3675: POP
3676: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3677: LD_ADDR_VAR 0 2
3681: PUSH
3682: DOUBLE
3683: LD_INT 1
3685: DEC
3686: ST_TO_ADDR
3687: LD_INT 3
3689: PUSH
3690: LD_INT 4
3692: PUSH
3693: LD_INT 5
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: LD_OWVAR 67
3705: ARRAY
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3904
// begin vc_engine = 3 ;
3710: LD_ADDR_OWVAR 39
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// vc_control = 1 ;
3718: LD_ADDR_OWVAR 38
3722: PUSH
3723: LD_INT 1
3725: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3726: LD_ADDR_OWVAR 40
3730: PUSH
3731: LD_INT 42
3733: PUSH
3734: LD_INT 43
3736: PUSH
3737: LD_INT 44
3739: PUSH
3740: LD_INT 45
3742: PUSH
3743: LD_INT 46
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 5
3758: PPUSH
3759: CALL_OW 12
3763: ARRAY
3764: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3765: LD_OWVAR 40
3769: PUSH
3770: LD_INT 46
3772: EQUAL
3773: IFFALSE 3785
// vc_chassis = ru_heavy_tracked else
3775: LD_ADDR_OWVAR 37
3779: PUSH
3780: LD_INT 24
3782: ST_TO_ADDR
3783: GO 3812
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3785: LD_ADDR_OWVAR 37
3789: PUSH
3790: LD_INT 22
3792: PUSH
3793: LD_INT 21
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 1
3802: PPUSH
3803: LD_INT 2
3805: PPUSH
3806: CALL_OW 12
3810: ARRAY
3811: ST_TO_ADDR
// veh = CreateVehicle ;
3812: LD_ADDR_VAR 0 4
3816: PUSH
3817: CALL_OW 45
3821: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3822: LD_VAR 0 4
3826: PPUSH
3827: LD_INT 3
3829: PPUSH
3830: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3834: LD_VAR 0 4
3838: PPUSH
3839: LD_INT 5
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: CALL_OW 49
// hc_gallery =  ;
3849: LD_ADDR_OWVAR 33
3853: PUSH
3854: LD_STRING 
3856: ST_TO_ADDR
// hc_name =  ;
3857: LD_ADDR_OWVAR 26
3861: PUSH
3862: LD_STRING 
3864: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3865: LD_INT 0
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: LD_INT 10
3873: PPUSH
3874: CALL_OW 380
// un = CreateHuman ;
3878: LD_ADDR_VAR 0 3
3882: PUSH
3883: CALL_OW 44
3887: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3888: LD_VAR 0 3
3892: PPUSH
3893: LD_VAR 0 4
3897: PPUSH
3898: CALL_OW 52
// end ;
3902: GO 3707
3904: POP
3905: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3906: LD_ADDR_VAR 0 2
3910: PUSH
3911: DOUBLE
3912: LD_INT 1
3914: DEC
3915: ST_TO_ADDR
3916: LD_INT 3
3918: PUSH
3919: LD_INT 4
3921: PUSH
3922: LD_INT 5
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: LD_OWVAR 67
3934: ARRAY
3935: PUSH
3936: FOR_TO
3937: IFFALSE 4084
// begin vc_engine = 3 ;
3939: LD_ADDR_OWVAR 39
3943: PUSH
3944: LD_INT 3
3946: ST_TO_ADDR
// vc_control = 3 ;
3947: LD_ADDR_OWVAR 38
3951: PUSH
3952: LD_INT 3
3954: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3955: LD_ADDR_OWVAR 40
3959: PUSH
3960: LD_INT 42
3962: PUSH
3963: LD_INT 43
3965: PUSH
3966: LD_INT 44
3968: PUSH
3969: LD_INT 45
3971: PUSH
3972: LD_INT 46
3974: PUSH
3975: LD_INT 49
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 1
3988: PPUSH
3989: LD_INT 5
3991: PPUSH
3992: CALL_OW 12
3996: ARRAY
3997: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3998: LD_OWVAR 40
4002: PUSH
4003: LD_INT 46
4005: EQUAL
4006: IFFALSE 4018
// vc_chassis = ru_heavy_tracked else
4008: LD_ADDR_OWVAR 37
4012: PUSH
4013: LD_INT 24
4015: ST_TO_ADDR
4016: GO 4045
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4018: LD_ADDR_OWVAR 37
4022: PUSH
4023: LD_INT 22
4025: PUSH
4026: LD_INT 21
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 1
4035: PPUSH
4036: LD_INT 2
4038: PPUSH
4039: CALL_OW 12
4043: ARRAY
4044: ST_TO_ADDR
// veh = CreateVehicle ;
4045: LD_ADDR_VAR 0 4
4049: PUSH
4050: CALL_OW 45
4054: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4055: LD_VAR 0 4
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4067: LD_VAR 0 4
4071: PPUSH
4072: LD_INT 6
4074: PPUSH
4075: LD_INT 0
4077: PPUSH
4078: CALL_OW 49
// end ;
4082: GO 3936
4084: POP
4085: POP
// end ; end_of_file
4086: LD_VAR 0 1
4090: RET
// export function PrepareKurt ; begin
4091: LD_INT 0
4093: PPUSH
// uc_side = 8 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 8
4101: ST_TO_ADDR
// uc_nation = 2 ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4110: LD_ADDR_OWVAR 37
4114: PUSH
4115: LD_INT 13
4117: ST_TO_ADDR
// vc_engine = 1 ;
4118: LD_ADDR_OWVAR 39
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// vc_control = 1 ;
4126: LD_ADDR_OWVAR 38
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// vc_weapon = 24 ;
4134: LD_ADDR_OWVAR 40
4138: PUSH
4139: LD_INT 24
4141: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4142: LD_ADDR_EXP 26
4146: PUSH
4147: CALL_OW 45
4151: ST_TO_ADDR
// if kurtStatus > 0 then
4152: LD_EXP 27
4156: PUSH
4157: LD_INT 0
4159: GREATER
4160: IFFALSE 4209
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4162: LD_ADDR_EXP 24
4166: PUSH
4167: LD_STRING Kurt
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL 12232 0 2
4177: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4178: LD_EXP 26
4182: PPUSH
4183: LD_INT 4
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4193: LD_EXP 24
4197: PPUSH
4198: LD_EXP 26
4202: PPUSH
4203: CALL_OW 52
// end else
4207: GO 4274
// begin hc_name =  ;
4209: LD_ADDR_OWVAR 26
4213: PUSH
4214: LD_STRING 
4216: ST_TO_ADDR
// hc_gallery =  ;
4217: LD_ADDR_OWVAR 33
4221: PUSH
4222: LD_STRING 
4224: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4225: LD_INT 1
4227: PPUSH
4228: LD_INT 10
4230: PPUSH
4231: CALL_OW 381
// otherKurt = CreateHuman ;
4235: LD_ADDR_EXP 25
4239: PUSH
4240: CALL_OW 44
4244: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4245: LD_EXP 26
4249: PPUSH
4250: LD_INT 4
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4260: LD_EXP 25
4264: PPUSH
4265: LD_EXP 26
4269: PPUSH
4270: CALL_OW 52
// end ; end ;
4274: LD_VAR 0 1
4278: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4279: LD_INT 0
4281: PPUSH
4282: PPUSH
4283: PPUSH
4284: PPUSH
// for i = 1 to 3 do
4285: LD_ADDR_VAR 0 2
4289: PUSH
4290: DOUBLE
4291: LD_INT 1
4293: DEC
4294: ST_TO_ADDR
4295: LD_INT 3
4297: PUSH
4298: FOR_TO
4299: IFFALSE 4436
// begin uc_side = 1 ;
4301: LD_ADDR_OWVAR 20
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// uc_nation = 2 ;
4309: LD_ADDR_OWVAR 21
4313: PUSH
4314: LD_INT 2
4316: ST_TO_ADDR
// hc_gallery =  ;
4317: LD_ADDR_OWVAR 33
4321: PUSH
4322: LD_STRING 
4324: ST_TO_ADDR
// hc_name =  ;
4325: LD_ADDR_OWVAR 26
4329: PUSH
4330: LD_STRING 
4332: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4333: LD_EXP 27
4337: PUSH
4338: LD_INT 0
4340: EQUAL
4341: PUSH
4342: LD_EXP 27
4346: PUSH
4347: LD_INT 2
4349: EQUAL
4350: OR
4351: IFFALSE 4376
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4353: LD_INT 0
4355: PPUSH
4356: LD_INT 1
4358: PPUSH
4359: LD_INT 2
4361: PPUSH
4362: LD_INT 4
4364: PPUSH
4365: CALL_OW 12
4369: PPUSH
4370: CALL_OW 380
4374: GO 4397
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4376: LD_INT 0
4378: PPUSH
4379: LD_INT 1
4381: PPUSH
4382: LD_INT 6
4384: PPUSH
4385: LD_INT 8
4387: PPUSH
4388: CALL_OW 12
4392: PPUSH
4393: CALL_OW 380
// un = CreateHuman ;
4397: LD_ADDR_VAR 0 3
4401: PUSH
4402: CALL_OW 44
4406: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4407: LD_VAR 0 3
4411: PPUSH
4412: LD_INT 4
4414: PPUSH
4415: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4419: LD_VAR 0 3
4423: PPUSH
4424: LD_INT 4
4426: PPUSH
4427: LD_INT 0
4429: PPUSH
4430: CALL_OW 49
// end ;
4434: GO 4298
4436: POP
4437: POP
// vc_chassis = 14 ;
4438: LD_ADDR_OWVAR 37
4442: PUSH
4443: LD_INT 14
4445: ST_TO_ADDR
// vc_engine = 3 ;
4446: LD_ADDR_OWVAR 39
4450: PUSH
4451: LD_INT 3
4453: ST_TO_ADDR
// vc_control = 1 ;
4454: LD_ADDR_OWVAR 38
4458: PUSH
4459: LD_INT 1
4461: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4462: LD_ADDR_OWVAR 40
4466: PUSH
4467: LD_INT 27
4469: PUSH
4470: LD_INT 26
4472: PUSH
4473: LD_INT 28
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 1
4483: PPUSH
4484: LD_INT 3
4486: PPUSH
4487: CALL_OW 12
4491: ARRAY
4492: ST_TO_ADDR
// veh = CreateVehicle ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: CALL_OW 45
4502: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4503: LD_VAR 0 4
4507: PPUSH
4508: LD_INT 4
4510: PPUSH
4511: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4515: LD_VAR 0 4
4519: PPUSH
4520: LD_INT 4
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4530: LD_EXP 27
4534: PUSH
4535: LD_INT 0
4537: EQUAL
4538: PUSH
4539: LD_EXP 27
4543: PUSH
4544: LD_INT 2
4546: EQUAL
4547: OR
4548: IFFALSE 4573
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4550: LD_INT 0
4552: PPUSH
4553: LD_INT 3
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 4
4561: PPUSH
4562: CALL_OW 12
4566: PPUSH
4567: CALL_OW 380
4571: GO 4594
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 3
4578: PPUSH
4579: LD_INT 6
4581: PPUSH
4582: LD_INT 8
4584: PPUSH
4585: CALL_OW 12
4589: PPUSH
4590: CALL_OW 380
// un = CreateHuman ;
4594: LD_ADDR_VAR 0 3
4598: PUSH
4599: CALL_OW 44
4603: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4604: LD_VAR 0 3
4608: PPUSH
4609: LD_VAR 0 4
4613: PPUSH
4614: CALL_OW 52
// vc_chassis = 14 ;
4618: LD_ADDR_OWVAR 37
4622: PUSH
4623: LD_INT 14
4625: ST_TO_ADDR
// vc_engine = 3 ;
4626: LD_ADDR_OWVAR 39
4630: PUSH
4631: LD_INT 3
4633: ST_TO_ADDR
// vc_control = 1 ;
4634: LD_ADDR_OWVAR 38
4638: PUSH
4639: LD_INT 1
4641: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4642: LD_ADDR_OWVAR 40
4646: PUSH
4647: LD_INT 27
4649: PUSH
4650: LD_INT 26
4652: PUSH
4653: LD_INT 28
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 1
4663: PPUSH
4664: LD_INT 3
4666: PPUSH
4667: CALL_OW 12
4671: ARRAY
4672: ST_TO_ADDR
// veh = CreateVehicle ;
4673: LD_ADDR_VAR 0 4
4677: PUSH
4678: CALL_OW 45
4682: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4683: LD_VAR 0 4
4687: PPUSH
4688: LD_INT 4
4690: PPUSH
4691: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4695: LD_VAR 0 4
4699: PPUSH
4700: LD_INT 4
4702: PPUSH
4703: LD_INT 0
4705: PPUSH
4706: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4710: LD_EXP 27
4714: PUSH
4715: LD_INT 0
4717: EQUAL
4718: PUSH
4719: LD_EXP 27
4723: PUSH
4724: LD_INT 2
4726: EQUAL
4727: OR
4728: IFFALSE 4753
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4730: LD_INT 0
4732: PPUSH
4733: LD_INT 4
4735: PPUSH
4736: LD_INT 2
4738: PPUSH
4739: LD_INT 4
4741: PPUSH
4742: CALL_OW 12
4746: PPUSH
4747: CALL_OW 380
4751: GO 4774
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4753: LD_INT 0
4755: PPUSH
4756: LD_INT 4
4758: PPUSH
4759: LD_INT 6
4761: PPUSH
4762: LD_INT 8
4764: PPUSH
4765: CALL_OW 12
4769: PPUSH
4770: CALL_OW 380
// un = CreateHuman ;
4774: LD_ADDR_VAR 0 3
4778: PUSH
4779: CALL_OW 44
4783: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4784: LD_VAR 0 3
4788: PPUSH
4789: LD_INT 4
4791: PPUSH
4792: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4796: LD_VAR 0 3
4800: PPUSH
4801: LD_VAR 0 4
4805: PPUSH
4806: CALL_OW 52
// vc_chassis = 14 ;
4810: LD_ADDR_OWVAR 37
4814: PUSH
4815: LD_INT 14
4817: ST_TO_ADDR
// vc_engine = 3 ;
4818: LD_ADDR_OWVAR 39
4822: PUSH
4823: LD_INT 3
4825: ST_TO_ADDR
// vc_control = 1 ;
4826: LD_ADDR_OWVAR 38
4830: PUSH
4831: LD_INT 1
4833: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4834: LD_ADDR_OWVAR 40
4838: PUSH
4839: LD_INT 27
4841: PUSH
4842: LD_INT 26
4844: PUSH
4845: LD_INT 28
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 1
4855: PPUSH
4856: LD_INT 3
4858: PPUSH
4859: CALL_OW 12
4863: ARRAY
4864: ST_TO_ADDR
// veh = CreateVehicle ;
4865: LD_ADDR_VAR 0 4
4869: PUSH
4870: CALL_OW 45
4874: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4875: LD_VAR 0 4
4879: PPUSH
4880: LD_INT 4
4882: PPUSH
4883: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4887: LD_VAR 0 4
4891: PPUSH
4892: LD_INT 4
4894: PPUSH
4895: LD_INT 0
4897: PPUSH
4898: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4902: LD_EXP 27
4906: PUSH
4907: LD_INT 0
4909: EQUAL
4910: PUSH
4911: LD_EXP 27
4915: PUSH
4916: LD_INT 2
4918: EQUAL
4919: OR
4920: IFFALSE 4945
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4922: LD_INT 0
4924: PPUSH
4925: LD_INT 2
4927: PPUSH
4928: LD_INT 2
4930: PPUSH
4931: LD_INT 4
4933: PPUSH
4934: CALL_OW 12
4938: PPUSH
4939: CALL_OW 380
4943: GO 4966
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4945: LD_INT 0
4947: PPUSH
4948: LD_INT 2
4950: PPUSH
4951: LD_INT 6
4953: PPUSH
4954: LD_INT 8
4956: PPUSH
4957: CALL_OW 12
4961: PPUSH
4962: CALL_OW 380
// un = CreateHuman ;
4966: LD_ADDR_VAR 0 3
4970: PUSH
4971: CALL_OW 44
4975: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4976: LD_VAR 0 3
4980: PPUSH
4981: LD_INT 4
4983: PPUSH
4984: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4988: LD_VAR 0 3
4992: PPUSH
4993: LD_VAR 0 4
4997: PPUSH
4998: CALL_OW 52
// end ;
5002: LD_VAR 0 1
5006: RET
// export function PrepareAttackLegion ; var i , un ; begin
5007: LD_INT 0
5009: PPUSH
5010: PPUSH
5011: PPUSH
// for i = 1 to 4 do
5012: LD_ADDR_VAR 0 2
5016: PUSH
5017: DOUBLE
5018: LD_INT 1
5020: DEC
5021: ST_TO_ADDR
5022: LD_INT 4
5024: PUSH
5025: FOR_TO
5026: IFFALSE 5136
// begin uc_side = 8 ;
5028: LD_ADDR_OWVAR 20
5032: PUSH
5033: LD_INT 8
5035: ST_TO_ADDR
// uc_nation = 2 ;
5036: LD_ADDR_OWVAR 21
5040: PUSH
5041: LD_INT 2
5043: ST_TO_ADDR
// hc_gallery =  ;
5044: LD_ADDR_OWVAR 33
5048: PUSH
5049: LD_STRING 
5051: ST_TO_ADDR
// hc_name =  ;
5052: LD_ADDR_OWVAR 26
5056: PUSH
5057: LD_STRING 
5059: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5060: LD_INT 0
5062: PPUSH
5063: LD_INT 1
5065: PUSH
5066: LD_INT 8
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 1
5075: PPUSH
5076: LD_INT 2
5078: PPUSH
5079: CALL_OW 12
5083: ARRAY
5084: PPUSH
5085: LD_INT 6
5087: PPUSH
5088: LD_INT 8
5090: PPUSH
5091: CALL_OW 12
5095: PPUSH
5096: CALL_OW 380
// un = CreateHuman ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: CALL_OW 44
5109: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5110: LD_VAR 0 3
5114: PPUSH
5115: LD_INT 19
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: CALL_OW 49
// ComCrawl ( un ) ;
5125: LD_VAR 0 3
5129: PPUSH
5130: CALL_OW 137
// end ;
5134: GO 5025
5136: POP
5137: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5138: LD_INT 1
5140: PPUSH
5141: LD_INT 8
5143: PPUSH
5144: LD_INT 2
5146: PPUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5154: LD_INT 20
5156: PPUSH
5157: LD_INT 3
5159: PPUSH
5160: CALL 15148 0 2
// end ; end_of_file
5164: LD_VAR 0 1
5168: RET
// every 1 do var i ;
5169: GO 5171
5171: DISABLE
5172: LD_INT 0
5174: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5175: LD_INT 10
5177: PPUSH
5178: LD_INT 122
5180: PPUSH
5181: LD_INT 145
5183: PPUSH
5184: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5188: LD_INT 137
5190: PPUSH
5191: LD_INT 84
5193: PPUSH
5194: LD_INT 61
5196: PPUSH
5197: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5201: LD_EXP 1
5205: PPUSH
5206: CALL_OW 310
5210: PPUSH
5211: CALL_OW 87
// InGameOn ;
5215: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5219: LD_INT 22
5221: PUSH
5222: LD_INT 1
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PPUSH
5229: CALL_OW 69
5233: PPUSH
5234: LD_INT 130
5236: PPUSH
5237: LD_INT 103
5239: PPUSH
5240: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5244: LD_VAR 0 1
5248: PPUSH
5249: LD_INT 114
5251: PPUSH
5252: LD_INT 102
5254: PPUSH
5255: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5259: LD_EXP 1
5263: PPUSH
5264: LD_STRING D1-JMM-1
5266: PPUSH
5267: CALL_OW 88
// if IsOk ( Donaldson ) then
5271: LD_EXP 3
5275: PPUSH
5276: CALL_OW 302
5280: IFFALSE 5318
// begin Say ( Donaldson , D1-Don-1 ) ;
5282: LD_EXP 3
5286: PPUSH
5287: LD_STRING D1-Don-1
5289: PPUSH
5290: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5294: LD_EXP 1
5298: PPUSH
5299: LD_STRING D1-JMM-2
5301: PPUSH
5302: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5306: LD_EXP 3
5310: PPUSH
5311: LD_STRING D1-Don-2
5313: PPUSH
5314: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5318: LD_INT 22
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PPUSH
5328: CALL_OW 69
5332: PPUSH
5333: LD_INT 110
5335: PPUSH
5336: LD_INT 101
5338: PPUSH
5339: CALL_OW 171
// end ;
5343: PPOPN 1
5345: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5346: LD_INT 1
5348: PPUSH
5349: LD_INT 102
5351: PPUSH
5352: LD_INT 94
5354: PPUSH
5355: CALL_OW 293
5359: IFFALSE 5534
5361: GO 5363
5363: DISABLE
5364: LD_INT 0
5366: PPUSH
// begin CenterOnXY ( 95 , 84 ) ;
5367: LD_INT 95
5369: PPUSH
5370: LD_INT 84
5372: PPUSH
5373: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
5377: LD_INT 22
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 26
5389: PUSH
5390: LD_INT 1
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: LD_INT 2
5399: PUSH
5400: LD_INT 25
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 25
5412: PUSH
5413: LD_INT 2
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 25
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: LD_INT 25
5432: PUSH
5433: LD_INT 4
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_EXP 1
5456: DIFF
5457: PPUSH
5458: CALL_OW 69
5462: PPUSH
5463: LD_STRING D1-Sol1-2
5465: PPUSH
5466: LD_STRING 
5468: PPUSH
5469: CALL 12340 0 3
// Say ( JMM , D1-JMM-3 ) ;
5473: LD_EXP 1
5477: PPUSH
5478: LD_STRING D1-JMM-3
5480: PPUSH
5481: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5485: LD_STRING M1
5487: PPUSH
5488: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5492: LD_ADDR_VAR 0 1
5496: PUSH
5497: LD_INT 22
5499: PUSH
5500: LD_INT 1
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 69
5511: PUSH
5512: FOR_IN
5513: IFFALSE 5532
// ComMoveXY ( i , 95 , 84 ) ;
5515: LD_VAR 0 1
5519: PPUSH
5520: LD_INT 95
5522: PPUSH
5523: LD_INT 84
5525: PPUSH
5526: CALL_OW 111
5530: GO 5512
5532: POP
5533: POP
// end ;
5534: PPOPN 1
5536: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5537: GO 5539
5539: DISABLE
5540: LD_INT 0
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5546: LD_ADDR_VAR 0 2
5550: PUSH
5551: LD_INT 8
5553: PPUSH
5554: LD_INT 22
5556: PUSH
5557: LD_INT 3
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 25
5566: PUSH
5567: LD_INT 9
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 70
5582: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5583: LD_ADDR_VAR 0 3
5587: PUSH
5588: LD_INT 22
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PUSH
5598: EMPTY
5599: LIST
5600: PPUSH
5601: CALL_OW 69
5605: ST_TO_ADDR
// enable ;
5606: ENABLE
// for i in your_units do
5607: LD_ADDR_VAR 0 1
5611: PUSH
5612: LD_VAR 0 3
5616: PUSH
5617: FOR_IN
5618: IFFALSE 6253
// begin if See ( 3 , i ) then
5620: LD_INT 3
5622: PPUSH
5623: LD_VAR 0 1
5627: PPUSH
5628: CALL_OW 292
5632: IFFALSE 6251
// begin disable ;
5634: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5635: LD_VAR 0 2
5639: PPUSH
5640: LD_INT 96
5642: PPUSH
5643: LD_INT 85
5645: PPUSH
5646: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5650: LD_VAR 0 2
5654: PPUSH
5655: LD_INT 96
5657: PPUSH
5658: LD_INT 85
5660: PPUSH
5661: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5665: LD_VAR 0 2
5669: PPUSH
5670: LD_INT 96
5672: PPUSH
5673: LD_INT 85
5675: PPUSH
5676: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 96
5687: PPUSH
5688: LD_INT 85
5690: PPUSH
5691: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5695: LD_VAR 0 2
5699: PPUSH
5700: LD_INT 96
5702: PPUSH
5703: LD_INT 85
5705: PPUSH
5706: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5710: LD_VAR 0 2
5714: PPUSH
5715: LD_INT 96
5717: PPUSH
5718: LD_INT 85
5720: PPUSH
5721: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D1a-JMM-1
5732: PPUSH
5733: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5737: LD_EXP 3
5741: PPUSH
5742: LD_STRING D1a-Don-1
5744: PPUSH
5745: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5749: LD_ADDR_VAR 0 1
5753: PUSH
5754: LD_INT 22
5756: PUSH
5757: LD_INT 1
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PPUSH
5764: CALL_OW 69
5768: PUSH
5769: FOR_IN
5770: IFFALSE 5789
// ComMoveXY ( i , 109 , 102 ) ;
5772: LD_VAR 0 1
5776: PPUSH
5777: LD_INT 109
5779: PPUSH
5780: LD_INT 102
5782: PPUSH
5783: CALL_OW 111
5787: GO 5769
5789: POP
5790: POP
// Say ( JMM , D1a-JMM-2 ) ;
5791: LD_EXP 1
5795: PPUSH
5796: LD_STRING D1a-JMM-2
5798: PPUSH
5799: CALL_OW 88
// wait ( 0 0$10 ) ;
5803: LD_INT 350
5805: PPUSH
5806: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5810: LD_EXP 1
5814: PPUSH
5815: CALL_OW 310
5819: PPUSH
5820: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5824: LD_EXP 3
5828: PPUSH
5829: LD_STRING D1b-Don-1
5831: PPUSH
5832: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_STRING D1b-JMM-1
5843: PPUSH
5844: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5848: LD_INT 22
5850: PUSH
5851: LD_INT 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 26
5860: PUSH
5861: LD_INT 1
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: LD_INT 2
5870: PUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 1
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 25
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 25
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 25
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: LD_EXP 1
5927: PUSH
5928: EMPTY
5929: LIST
5930: DIFF
5931: PPUSH
5932: CALL_OW 69
5936: PPUSH
5937: LD_STRING D1b-Sol1-1
5939: PPUSH
5940: LD_STRING 
5942: PPUSH
5943: CALL 12340 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5947: LD_EXP 3
5951: PPUSH
5952: LD_STRING D1b-Don-2
5954: PPUSH
5955: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5959: LD_EXP 1
5963: PPUSH
5964: LD_STRING D1b-JMM-2
5966: PPUSH
5967: CALL_OW 88
// dec = ShowQuery1 ;
5971: LD_ADDR_VAR 0 4
5975: PUSH
5976: CALL 12876 0 0
5980: ST_TO_ADDR
// if dec = 1 then
5981: LD_VAR 0 4
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: IFFALSE 6095
// begin Say ( JMM , D2-JMM-1 ) ;
5991: LD_EXP 1
5995: PPUSH
5996: LD_STRING D2-JMM-1
5998: PPUSH
5999: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6003: LD_EXP 22
6007: PPUSH
6008: LD_STRING D2-Pow-1
6010: PPUSH
6011: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6015: LD_EXP 1
6019: PPUSH
6020: LD_STRING D2a-JMM-1
6022: PPUSH
6023: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6027: LD_EXP 22
6031: PPUSH
6032: LD_STRING D2a-Pow-1
6034: PPUSH
6035: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6039: LD_EXP 1
6043: PPUSH
6044: LD_STRING D2a-JMM-2
6046: PPUSH
6047: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6051: LD_EXP 22
6055: PPUSH
6056: LD_STRING D2a-Pow-2
6058: PPUSH
6059: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6063: LD_EXP 1
6067: PPUSH
6068: LD_STRING D2a-JMM-3
6070: PPUSH
6071: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6075: LD_EXP 22
6079: PPUSH
6080: LD_STRING D2a-Pow-3
6082: PPUSH
6083: CALL_OW 94
// secondPass = 2 ;
6087: LD_ADDR_EXP 28
6091: PUSH
6092: LD_INT 2
6094: ST_TO_ADDR
// end ; if dec = 2 then
6095: LD_VAR 0 4
6099: PUSH
6100: LD_INT 2
6102: EQUAL
6103: IFFALSE 6197
// begin Say ( JMM , D2-JMM-1 ) ;
6105: LD_EXP 1
6109: PPUSH
6110: LD_STRING D2-JMM-1
6112: PPUSH
6113: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6117: LD_EXP 22
6121: PPUSH
6122: LD_STRING D2-Pow-1
6124: PPUSH
6125: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6129: LD_EXP 1
6133: PPUSH
6134: LD_STRING D2b-JMM-1
6136: PPUSH
6137: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6141: LD_EXP 22
6145: PPUSH
6146: LD_STRING D2b-Pow-1
6148: PPUSH
6149: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6153: LD_EXP 1
6157: PPUSH
6158: LD_STRING D2c-JMM-1
6160: PPUSH
6161: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6165: LD_EXP 22
6169: PPUSH
6170: LD_STRING D2c-Pow-1
6172: PPUSH
6173: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6177: LD_EXP 1
6181: PPUSH
6182: LD_STRING D2c-JMM-2
6184: PPUSH
6185: CALL_OW 88
// secondPass = 2 ;
6189: LD_ADDR_EXP 28
6193: PUSH
6194: LD_INT 2
6196: ST_TO_ADDR
// end ; if dec = 3 then
6197: LD_VAR 0 4
6201: PUSH
6202: LD_INT 3
6204: EQUAL
6205: IFFALSE 6215
// secondPass = 1 ;
6207: LD_ADDR_EXP 28
6211: PUSH
6212: LD_INT 1
6214: ST_TO_ADDR
// InGameOff ;
6215: CALL_OW 9
// ruAI = 1 ;
6219: LD_ADDR_EXP 41
6223: PUSH
6224: LD_INT 1
6226: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 3
6232: PPUSH
6233: LD_INT 2
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 80
// SaveForQuickRestart ;
6243: CALL_OW 22
// exit ;
6247: POP
6248: POP
6249: GO 6255
// end ; end ;
6251: GO 5617
6253: POP
6254: POP
// end ;
6255: PPOPN 4
6257: END
// every 1 1$0 trigger secondPass = 2 do
6258: LD_EXP 28
6262: PUSH
6263: LD_INT 2
6265: EQUAL
6266: IFFALSE 6393
6268: GO 6270
6270: DISABLE
// begin PowellSupport1 ;
6271: CALL 1728 0 0
// DialogueOn ;
6275: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6279: LD_EXP 1
6283: PPUSH
6284: LD_STRING DC1-JMM-1
6286: PPUSH
6287: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6291: LD_EXP 22
6295: PPUSH
6296: LD_STRING DC1-Pow-1
6298: PPUSH
6299: CALL_OW 94
// DialogueOff ;
6303: CALL_OW 7
// wait ( 3 3$0 ) ;
6307: LD_INT 6300
6309: PPUSH
6310: CALL_OW 67
// PowellSupport2 ;
6314: CALL 2187 0 0
// DialogueOn ;
6318: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6322: LD_EXP 1
6326: PPUSH
6327: LD_STRING DC2-JMM-1
6329: PPUSH
6330: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6334: LD_EXP 22
6338: PPUSH
6339: LD_STRING DC2-Pow-1
6341: PPUSH
6342: CALL_OW 94
// DialogueOff ;
6346: CALL_OW 7
// wait ( 6 6$0 ) ;
6350: LD_INT 12600
6352: PPUSH
6353: CALL_OW 67
// PowellSupport3 ;
6357: CALL 2664 0 0
// DialogueOn ;
6361: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6365: LD_EXP 22
6369: PPUSH
6370: LD_STRING DC3-Pow-1
6372: PPUSH
6373: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6377: LD_EXP 1
6381: PPUSH
6382: LD_STRING DC3-JMM-1
6384: PPUSH
6385: CALL_OW 88
// DialogueOff ;
6389: CALL_OW 7
// end ;
6393: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6394: LD_EXP 28
6398: PUSH
6399: LD_INT 2
6401: EQUAL
6402: PUSH
6403: LD_INT 22
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 30
6418: PUSH
6419: LD_INT 0
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 30
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: PUSH
6450: LD_INT 0
6452: GREATER
6453: AND
6454: IFFALSE 9796
6456: GO 6458
6458: DISABLE
6459: LD_INT 0
6461: PPUSH
6462: PPUSH
6463: PPUSH
6464: PPUSH
6465: PPUSH
6466: PPUSH
6467: PPUSH
6468: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6469: LD_ADDR_VAR 0 4
6473: PUSH
6474: LD_INT 22
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 21
6486: PUSH
6487: LD_INT 3
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 2
6496: PUSH
6497: LD_INT 30
6499: PUSH
6500: LD_INT 0
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 30
6509: PUSH
6510: LD_INT 1
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: PPUSH
6527: CALL_OW 69
6531: ST_TO_ADDR
// for i in tmp do
6532: LD_ADDR_VAR 0 1
6536: PUSH
6537: LD_VAR 0 4
6541: PUSH
6542: FOR_IN
6543: IFFALSE 6576
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6545: LD_ADDR_VAR 0 6
6549: PUSH
6550: LD_VAR 0 6
6554: PUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 274
6564: PPUSH
6565: LD_INT 1
6567: PPUSH
6568: CALL_OW 275
6572: PLUS
6573: ST_TO_ADDR
6574: GO 6542
6576: POP
6577: POP
// for i in tmp do
6578: LD_ADDR_VAR 0 1
6582: PUSH
6583: LD_VAR 0 4
6587: PUSH
6588: FOR_IN
6589: IFFALSE 6622
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6591: LD_ADDR_VAR 0 7
6595: PUSH
6596: LD_VAR 0 7
6600: PUSH
6601: LD_VAR 0 1
6605: PPUSH
6606: CALL_OW 274
6610: PPUSH
6611: LD_INT 2
6613: PPUSH
6614: CALL_OW 275
6618: PLUS
6619: ST_TO_ADDR
6620: GO 6588
6622: POP
6623: POP
// for i in tmp do
6624: LD_ADDR_VAR 0 1
6628: PUSH
6629: LD_VAR 0 4
6633: PUSH
6634: FOR_IN
6635: IFFALSE 6668
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6637: LD_ADDR_VAR 0 8
6641: PUSH
6642: LD_VAR 0 8
6646: PUSH
6647: LD_VAR 0 1
6651: PPUSH
6652: CALL_OW 274
6656: PPUSH
6657: LD_INT 3
6659: PPUSH
6660: CALL_OW 275
6664: PLUS
6665: ST_TO_ADDR
6666: GO 6634
6668: POP
6669: POP
// PrepareKurt ;
6670: CALL 4091 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6674: LD_EXP 26
6678: PPUSH
6679: LD_INT 144
6681: PPUSH
6682: LD_INT 111
6684: PPUSH
6685: CALL_OW 111
// wait ( 0 0$2 ) ;
6689: LD_INT 70
6691: PPUSH
6692: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6696: LD_INT 8
6698: PPUSH
6699: LD_INT 1
6701: PPUSH
6702: CALL_OW 343
// if kurtStatus > 0 then
6706: LD_EXP 27
6710: PUSH
6711: LD_INT 0
6713: GREATER
6714: IFFALSE 8264
// begin ComExitVehicle ( Kurt ) ;
6716: LD_EXP 24
6720: PPUSH
6721: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6725: LD_EXP 24
6729: PPUSH
6730: CALL_OW 87
// wait ( 0 0$1 ) ;
6734: LD_INT 35
6736: PPUSH
6737: CALL_OW 67
// DialogueOn ;
6741: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
6745: LD_INT 22
6747: PUSH
6748: LD_INT 1
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 26
6757: PUSH
6758: LD_INT 1
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: LD_INT 25
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 25
6780: PUSH
6781: LD_INT 2
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 25
6790: PUSH
6791: LD_INT 3
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 25
6800: PUSH
6801: LD_INT 4
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: PUSH
6820: LD_EXP 1
6824: PUSH
6825: EMPTY
6826: LIST
6827: DIFF
6828: PPUSH
6829: CALL_OW 69
6833: PPUSH
6834: LD_STRING D3-Sol1-1
6836: PPUSH
6837: LD_STRING 
6839: PPUSH
6840: CALL 12340 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6844: LD_EXP 24
6848: PPUSH
6849: LD_STRING D3-Kurt-1
6851: PPUSH
6852: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6856: LD_EXP 1
6860: PPUSH
6861: LD_STRING D3-JMM-1
6863: PPUSH
6864: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6868: LD_EXP 24
6872: PPUSH
6873: LD_STRING D3-Kurt-2
6875: PPUSH
6876: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6880: LD_EXP 1
6884: PPUSH
6885: LD_STRING D3-JMM-2
6887: PPUSH
6888: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6892: LD_EXP 24
6896: PPUSH
6897: LD_STRING D3-Kurt-4
6899: PPUSH
6900: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6904: LD_EXP 1
6908: PPUSH
6909: LD_STRING D3-JMM-4
6911: PPUSH
6912: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6916: LD_EXP 24
6920: PPUSH
6921: LD_STRING D3-Kurt-5
6923: PPUSH
6924: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6928: LD_EXP 24
6932: PPUSH
6933: LD_STRING D3-Kurt-5a
6935: PPUSH
6936: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6940: LD_VAR 0 6
6944: PUSH
6945: LD_INT 60
6947: GREATEREQUAL
6948: PUSH
6949: LD_VAR 0 8
6953: PUSH
6954: LD_INT 60
6956: GREATEREQUAL
6957: AND
6958: IFFALSE 6993
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6960: LD_ADDR_VAR 0 2
6964: PUSH
6965: LD_STRING Q2K
6967: PPUSH
6968: LD_INT 1
6970: PUSH
6971: LD_INT 2
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 4
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 98
6990: ST_TO_ADDR
6991: GO 7016
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: LD_STRING Q2K
7000: PPUSH
7001: LD_INT 3
7003: PUSH
7004: LD_INT 4
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 98
7015: ST_TO_ADDR
// if dec1 = 1 then
7016: LD_VAR 0 2
7020: PUSH
7021: LD_INT 1
7023: EQUAL
7024: IFFALSE 7058
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7026: LD_EXP 1
7030: PPUSH
7031: LD_STRING D3Ka-JMM-1
7033: PPUSH
7034: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7038: LD_EXP 24
7042: PPUSH
7043: LD_STRING D3Ka-Kurt-1
7045: PPUSH
7046: CALL_OW 88
// warWithLegion = 1 ;
7050: LD_ADDR_EXP 30
7054: PUSH
7055: LD_INT 1
7057: ST_TO_ADDR
// end ; if dec1 = 2 then
7058: LD_VAR 0 2
7062: PUSH
7063: LD_INT 2
7065: EQUAL
7066: IFFALSE 7292
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7068: LD_EXP 1
7072: PPUSH
7073: LD_STRING D3Kb-JMM-1
7075: PPUSH
7076: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7080: LD_EXP 24
7084: PPUSH
7085: LD_STRING D3Kb-Kurt-1
7087: PPUSH
7088: CALL_OW 88
// for i in tmp do
7092: LD_ADDR_VAR 0 1
7096: PUSH
7097: LD_VAR 0 4
7101: PUSH
7102: FOR_IN
7103: IFFALSE 7190
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7105: LD_ADDR_VAR 0 5
7109: PUSH
7110: LD_VAR 0 1
7114: PPUSH
7115: CALL_OW 274
7119: PPUSH
7120: LD_INT 1
7122: PPUSH
7123: CALL_OW 275
7127: ST_TO_ADDR
// if tmp2 >= 60 then
7128: LD_VAR 0 5
7132: PUSH
7133: LD_INT 60
7135: GREATEREQUAL
7136: IFFALSE 7168
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7138: LD_VAR 0 1
7142: PPUSH
7143: CALL_OW 274
7147: PPUSH
7148: LD_INT 1
7150: PPUSH
7151: LD_VAR 0 5
7155: PUSH
7156: LD_INT 60
7158: MINUS
7159: PPUSH
7160: CALL_OW 277
// break ;
7164: GO 7190
// end else
7166: GO 7188
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7168: LD_VAR 0 1
7172: PPUSH
7173: CALL_OW 274
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: LD_INT 0
7183: PPUSH
7184: CALL_OW 277
// end ; end ;
7188: GO 7102
7190: POP
7191: POP
// for i in tmp do
7192: LD_ADDR_VAR 0 1
7196: PUSH
7197: LD_VAR 0 4
7201: PUSH
7202: FOR_IN
7203: IFFALSE 7290
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7205: LD_ADDR_VAR 0 5
7209: PUSH
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 274
7219: PPUSH
7220: LD_INT 3
7222: PPUSH
7223: CALL_OW 275
7227: ST_TO_ADDR
// if tmp2 >= 60 then
7228: LD_VAR 0 5
7232: PUSH
7233: LD_INT 60
7235: GREATEREQUAL
7236: IFFALSE 7268
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7238: LD_VAR 0 1
7242: PPUSH
7243: CALL_OW 274
7247: PPUSH
7248: LD_INT 3
7250: PPUSH
7251: LD_VAR 0 5
7255: PUSH
7256: LD_INT 60
7258: MINUS
7259: PPUSH
7260: CALL_OW 277
// break ;
7264: GO 7290
// end else
7266: GO 7288
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 274
7277: PPUSH
7278: LD_INT 3
7280: PPUSH
7281: LD_INT 0
7283: PPUSH
7284: CALL_OW 277
// end ; end ;
7288: GO 7202
7290: POP
7291: POP
// end ; if dec1 = 3 then
7292: LD_VAR 0 2
7296: PUSH
7297: LD_INT 3
7299: EQUAL
7300: IFFALSE 7535
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7302: LD_EXP 1
7306: PPUSH
7307: LD_STRING D3Kc1-JMM-1
7309: PPUSH
7310: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7314: LD_EXP 24
7318: PPUSH
7319: LD_STRING D3Kc1-Kurt-1
7321: PPUSH
7322: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7326: LD_EXP 1
7330: PPUSH
7331: LD_STRING D3Kc1-JMM-2
7333: PPUSH
7334: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7338: LD_EXP 24
7342: PPUSH
7343: LD_STRING D3Kc1-Kurt-2
7345: PPUSH
7346: CALL_OW 88
// askSiberite = 1 ;
7350: LD_ADDR_EXP 32
7354: PUSH
7355: LD_INT 1
7357: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7358: LD_ADDR_VAR 0 2
7362: PUSH
7363: LD_STRING Q2b
7365: PPUSH
7366: LD_INT 1
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: LD_INT 3
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: PPUSH
7380: CALL_OW 98
7384: ST_TO_ADDR
// if dec2 = 1 then
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 1
7392: EQUAL
7393: IFFALSE 7427
// begin Say ( JMM , D4a-JMM-1 ) ;
7395: LD_EXP 1
7399: PPUSH
7400: LD_STRING D4a-JMM-1
7402: PPUSH
7403: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7407: LD_EXP 24
7411: PPUSH
7412: LD_STRING D4b-Kurt-1
7414: PPUSH
7415: CALL_OW 88
// warWithLegion = 1 ;
7419: LD_ADDR_EXP 30
7423: PUSH
7424: LD_INT 1
7426: ST_TO_ADDR
// end ; if dec2 = 2 then
7427: LD_VAR 0 3
7431: PUSH
7432: LD_INT 2
7434: EQUAL
7435: IFFALSE 7469
// begin Say ( JMM , D4b-JMM-1 ) ;
7437: LD_EXP 1
7441: PPUSH
7442: LD_STRING D4b-JMM-1
7444: PPUSH
7445: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7449: LD_EXP 24
7453: PPUSH
7454: LD_STRING D4b-Kurt-1
7456: PPUSH
7457: CALL_OW 88
// warWithLegion = 1 ;
7461: LD_ADDR_EXP 30
7465: PUSH
7466: LD_INT 1
7468: ST_TO_ADDR
// end ; if dec2 = 3 then
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 3
7476: EQUAL
7477: IFFALSE 7535
// begin Say ( JMM , D4c-JMM-1 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D4c-JMM-1
7486: PPUSH
7487: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7491: LD_EXP 24
7495: PPUSH
7496: LD_STRING D4c-Kurt-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D4c-JMM-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7515: LD_EXP 24
7519: PPUSH
7520: LD_STRING D4c-Kurt-2
7522: PPUSH
7523: CALL_OW 88
// fakeInfo = 1 ;
7527: LD_ADDR_EXP 31
7531: PUSH
7532: LD_INT 1
7534: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7535: LD_VAR 0 2
7539: PUSH
7540: LD_INT 4
7542: EQUAL
7543: IFFALSE 8200
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7545: LD_EXP 1
7549: PPUSH
7550: LD_STRING D3Kd-JMM-1
7552: PPUSH
7553: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7557: LD_VAR 0 6
7561: PUSH
7562: LD_INT 120
7564: GREATEREQUAL
7565: PUSH
7566: LD_VAR 0 8
7570: PUSH
7571: LD_INT 120
7573: GREATEREQUAL
7574: AND
7575: IFFALSE 7610
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7577: LD_ADDR_VAR 0 3
7581: PUSH
7582: LD_STRING Q2aK
7584: PPUSH
7585: LD_INT 1
7587: PUSH
7588: LD_INT 2
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: LD_INT 4
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 98
7607: ST_TO_ADDR
7608: GO 7633
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7610: LD_ADDR_VAR 0 3
7614: PUSH
7615: LD_STRING Q2K
7617: PPUSH
7618: LD_INT 1
7620: PUSH
7621: LD_INT 4
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 98
7632: ST_TO_ADDR
// if dec2 = 1 then
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 1
7640: EQUAL
7641: IFFALSE 7675
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7643: LD_EXP 1
7647: PPUSH
7648: LD_STRING D5Ka-JMM-1
7650: PPUSH
7651: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7655: LD_EXP 24
7659: PPUSH
7660: LD_STRING D5Ka-Kurt-1
7662: PPUSH
7663: CALL_OW 88
// warWithLegion = 1 ;
7667: LD_ADDR_EXP 30
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// end ; if dec2 = 2 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 2
7682: EQUAL
7683: IFFALSE 7709
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7685: LD_EXP 1
7689: PPUSH
7690: LD_STRING D3Kb-JMM-1
7692: PPUSH
7693: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7697: LD_EXP 24
7701: PPUSH
7702: LD_STRING D3Kb-Kurt-1
7704: PPUSH
7705: CALL_OW 88
// end ; if dec2 = 3 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 3
7716: EQUAL
7717: IFFALSE 7947
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7719: LD_EXP 1
7723: PPUSH
7724: LD_STRING D3Ke-JMM-1
7726: PPUSH
7727: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7731: LD_EXP 24
7735: PPUSH
7736: LD_STRING D3Ke-Kurt-1
7738: PPUSH
7739: CALL_OW 88
// PrepareLegionForPlayer ;
7743: CALL 4279 0 0
// for i in tmp do
7747: LD_ADDR_VAR 0 1
7751: PUSH
7752: LD_VAR 0 4
7756: PUSH
7757: FOR_IN
7758: IFFALSE 7845
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7760: LD_ADDR_VAR 0 5
7764: PUSH
7765: LD_VAR 0 1
7769: PPUSH
7770: CALL_OW 274
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 275
7782: ST_TO_ADDR
// if tmp2 >= 120 then
7783: LD_VAR 0 5
7787: PUSH
7788: LD_INT 120
7790: GREATEREQUAL
7791: IFFALSE 7823
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7793: LD_VAR 0 1
7797: PPUSH
7798: CALL_OW 274
7802: PPUSH
7803: LD_INT 1
7805: PPUSH
7806: LD_VAR 0 5
7810: PUSH
7811: LD_INT 120
7813: MINUS
7814: PPUSH
7815: CALL_OW 277
// break ;
7819: GO 7845
// end else
7821: GO 7843
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL_OW 274
7832: PPUSH
7833: LD_INT 1
7835: PPUSH
7836: LD_INT 0
7838: PPUSH
7839: CALL_OW 277
// end ; end ;
7843: GO 7757
7845: POP
7846: POP
// for i in tmp do
7847: LD_ADDR_VAR 0 1
7851: PUSH
7852: LD_VAR 0 4
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7945
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7860: LD_ADDR_VAR 0 5
7864: PUSH
7865: LD_VAR 0 1
7869: PPUSH
7870: CALL_OW 274
7874: PPUSH
7875: LD_INT 3
7877: PPUSH
7878: CALL_OW 275
7882: ST_TO_ADDR
// if tmp2 >= 120 then
7883: LD_VAR 0 5
7887: PUSH
7888: LD_INT 120
7890: GREATEREQUAL
7891: IFFALSE 7923
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 274
7902: PPUSH
7903: LD_INT 3
7905: PPUSH
7906: LD_VAR 0 5
7910: PUSH
7911: LD_INT 120
7913: MINUS
7914: PPUSH
7915: CALL_OW 277
// break ;
7919: GO 7945
// end else
7921: GO 7943
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7923: LD_VAR 0 1
7927: PPUSH
7928: CALL_OW 274
7932: PPUSH
7933: LD_INT 3
7935: PPUSH
7936: LD_INT 0
7938: PPUSH
7939: CALL_OW 277
// end ; end ;
7943: GO 7857
7945: POP
7946: POP
// end ; if dec2 = 4 then
7947: LD_VAR 0 3
7951: PUSH
7952: LD_INT 4
7954: EQUAL
7955: IFFALSE 8200
// begin if dec1 = 3 then
7957: LD_VAR 0 2
7961: PUSH
7962: LD_INT 3
7964: EQUAL
7965: IFFALSE 8200
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7967: LD_EXP 1
7971: PPUSH
7972: LD_STRING D3Kc1-JMM-1
7974: PPUSH
7975: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7979: LD_EXP 24
7983: PPUSH
7984: LD_STRING D3Kc1-Kurt-1
7986: PPUSH
7987: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7991: LD_EXP 1
7995: PPUSH
7996: LD_STRING D3Kc1-JMM-2
7998: PPUSH
7999: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8003: LD_EXP 24
8007: PPUSH
8008: LD_STRING D3Kc1-Kurt-2
8010: PPUSH
8011: CALL_OW 88
// askSiberite = 1 ;
8015: LD_ADDR_EXP 32
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8023: LD_ADDR_VAR 0 2
8027: PUSH
8028: LD_STRING Q2b
8030: PPUSH
8031: LD_INT 1
8033: PUSH
8034: LD_INT 2
8036: PUSH
8037: LD_INT 3
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: PPUSH
8045: CALL_OW 98
8049: ST_TO_ADDR
// if dec2 = 1 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 1
8057: EQUAL
8058: IFFALSE 8092
// begin Say ( JMM , D4a-JMM-1 ) ;
8060: LD_EXP 1
8064: PPUSH
8065: LD_STRING D4a-JMM-1
8067: PPUSH
8068: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8072: LD_EXP 24
8076: PPUSH
8077: LD_STRING D4b-Kurt-1
8079: PPUSH
8080: CALL_OW 88
// warWithLegion = 1 ;
8084: LD_ADDR_EXP 30
8088: PUSH
8089: LD_INT 1
8091: ST_TO_ADDR
// end ; if dec2 = 2 then
8092: LD_VAR 0 3
8096: PUSH
8097: LD_INT 2
8099: EQUAL
8100: IFFALSE 8134
// begin Say ( JMM , D4b-JMM-1 ) ;
8102: LD_EXP 1
8106: PPUSH
8107: LD_STRING D4b-JMM-1
8109: PPUSH
8110: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8114: LD_EXP 24
8118: PPUSH
8119: LD_STRING D4b-Kurt-1
8121: PPUSH
8122: CALL_OW 88
// warWithLegion = 1 ;
8126: LD_ADDR_EXP 30
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// end ; if dec2 = 3 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 3
8141: EQUAL
8142: IFFALSE 8200
// begin Say ( JMM , D4c-JMM-1 ) ;
8144: LD_EXP 1
8148: PPUSH
8149: LD_STRING D4c-JMM-1
8151: PPUSH
8152: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8156: LD_EXP 24
8160: PPUSH
8161: LD_STRING D4c-Kurt-1
8163: PPUSH
8164: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8168: LD_EXP 1
8172: PPUSH
8173: LD_STRING D4c-JMM-2
8175: PPUSH
8176: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8180: LD_EXP 24
8184: PPUSH
8185: LD_STRING D4c-Kurt-2
8187: PPUSH
8188: CALL_OW 88
// fakeInfo = 1 ;
8192: LD_ADDR_EXP 31
8196: PUSH
8197: LD_INT 1
8199: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8200: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8204: LD_EXP 24
8208: PPUSH
8209: LD_EXP 26
8213: PPUSH
8214: CALL_OW 120
// wait ( 0 0$1 ) ;
8218: LD_INT 35
8220: PPUSH
8221: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8225: LD_EXP 26
8229: PPUSH
8230: LD_INT 4
8232: PPUSH
8233: CALL_OW 113
// wait ( 0 0$3 ) ;
8237: LD_INT 105
8239: PPUSH
8240: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8244: LD_EXP 24
8248: PPUSH
8249: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8253: LD_EXP 26
8257: PPUSH
8258: CALL_OW 64
// end else
8262: GO 9796
// begin ComExitVehicle ( otherKurt ) ;
8264: LD_EXP 25
8268: PPUSH
8269: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8273: LD_EXP 25
8277: PPUSH
8278: CALL_OW 87
// wait ( 0 0$1 ) ;
8282: LD_INT 35
8284: PPUSH
8285: CALL_OW 67
// DialogueOn ;
8289: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
8293: LD_INT 22
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 26
8305: PUSH
8306: LD_INT 1
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 2
8315: PUSH
8316: LD_INT 25
8318: PUSH
8319: LD_INT 1
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 25
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PUSH
8336: LD_INT 25
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: LD_INT 25
8348: PUSH
8349: LD_INT 4
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: PUSH
8368: LD_EXP 1
8372: PUSH
8373: EMPTY
8374: LIST
8375: DIFF
8376: PPUSH
8377: CALL_OW 69
8381: PPUSH
8382: LD_STRING D3-Sol1-1
8384: PPUSH
8385: LD_STRING 
8387: PPUSH
8388: CALL 12340 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8392: LD_EXP 25
8396: PPUSH
8397: LD_STRING D3-Kurt-1
8399: PPUSH
8400: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8404: LD_EXP 1
8408: PPUSH
8409: LD_STRING D3-JMM-1
8411: PPUSH
8412: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8416: LD_EXP 25
8420: PPUSH
8421: LD_STRING D3-Kurt-3
8423: PPUSH
8424: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8428: LD_EXP 1
8432: PPUSH
8433: LD_STRING D3-JMM-3
8435: PPUSH
8436: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8440: LD_EXP 25
8444: PPUSH
8445: LD_STRING D3-Kurt-5
8447: PPUSH
8448: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8452: LD_EXP 25
8456: PPUSH
8457: LD_STRING D3-Kurt-5b
8459: PPUSH
8460: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8464: LD_VAR 0 6
8468: PUSH
8469: LD_INT 100
8471: GREATEREQUAL
8472: PUSH
8473: LD_VAR 0 8
8477: PUSH
8478: LD_INT 100
8480: GREATEREQUAL
8481: AND
8482: IFFALSE 8517
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8484: LD_ADDR_VAR 0 2
8488: PUSH
8489: LD_STRING Q2
8491: PPUSH
8492: LD_INT 1
8494: PUSH
8495: LD_INT 2
8497: PUSH
8498: LD_INT 3
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: PPUSH
8510: CALL_OW 98
8514: ST_TO_ADDR
8515: GO 8540
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8517: LD_ADDR_VAR 0 2
8521: PUSH
8522: LD_STRING Q2
8524: PPUSH
8525: LD_INT 3
8527: PUSH
8528: LD_INT 4
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PPUSH
8535: CALL_OW 98
8539: ST_TO_ADDR
// if dec1 = 1 then
8540: LD_VAR 0 2
8544: PUSH
8545: LD_INT 1
8547: EQUAL
8548: IFFALSE 8582
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8550: LD_EXP 1
8554: PPUSH
8555: LD_STRING D3Ka-JMM-1
8557: PPUSH
8558: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8562: LD_EXP 25
8566: PPUSH
8567: LD_STRING D3Ka-Kurt-1
8569: PPUSH
8570: CALL_OW 88
// warWithLegion = 1 ;
8574: LD_ADDR_EXP 30
8578: PUSH
8579: LD_INT 1
8581: ST_TO_ADDR
// end ; if dec1 = 2 then
8582: LD_VAR 0 2
8586: PUSH
8587: LD_INT 2
8589: EQUAL
8590: IFFALSE 8816
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8592: LD_EXP 1
8596: PPUSH
8597: LD_STRING D3Kb-JMM-1
8599: PPUSH
8600: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8604: LD_EXP 25
8608: PPUSH
8609: LD_STRING D3Kb-Kurt-1
8611: PPUSH
8612: CALL_OW 88
// for i in tmp do
8616: LD_ADDR_VAR 0 1
8620: PUSH
8621: LD_VAR 0 4
8625: PUSH
8626: FOR_IN
8627: IFFALSE 8714
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8629: LD_ADDR_VAR 0 5
8633: PUSH
8634: LD_VAR 0 1
8638: PPUSH
8639: CALL_OW 274
8643: PPUSH
8644: LD_INT 1
8646: PPUSH
8647: CALL_OW 275
8651: ST_TO_ADDR
// if tmp2 >= 100 then
8652: LD_VAR 0 5
8656: PUSH
8657: LD_INT 100
8659: GREATEREQUAL
8660: IFFALSE 8692
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8662: LD_VAR 0 1
8666: PPUSH
8667: CALL_OW 274
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: LD_VAR 0 5
8679: PUSH
8680: LD_INT 100
8682: MINUS
8683: PPUSH
8684: CALL_OW 277
// break ;
8688: GO 8714
// end else
8690: GO 8712
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8692: LD_VAR 0 1
8696: PPUSH
8697: CALL_OW 274
8701: PPUSH
8702: LD_INT 1
8704: PPUSH
8705: LD_INT 0
8707: PPUSH
8708: CALL_OW 277
// end ; end ;
8712: GO 8626
8714: POP
8715: POP
// for i in tmp do
8716: LD_ADDR_VAR 0 1
8720: PUSH
8721: LD_VAR 0 4
8725: PUSH
8726: FOR_IN
8727: IFFALSE 8814
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8729: LD_ADDR_VAR 0 5
8733: PUSH
8734: LD_VAR 0 1
8738: PPUSH
8739: CALL_OW 274
8743: PPUSH
8744: LD_INT 3
8746: PPUSH
8747: CALL_OW 275
8751: ST_TO_ADDR
// if tmp2 >= 100 then
8752: LD_VAR 0 5
8756: PUSH
8757: LD_INT 100
8759: GREATEREQUAL
8760: IFFALSE 8792
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8762: LD_VAR 0 1
8766: PPUSH
8767: CALL_OW 274
8771: PPUSH
8772: LD_INT 3
8774: PPUSH
8775: LD_VAR 0 5
8779: PUSH
8780: LD_INT 100
8782: MINUS
8783: PPUSH
8784: CALL_OW 277
// break ;
8788: GO 8814
// end else
8790: GO 8812
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8792: LD_VAR 0 1
8796: PPUSH
8797: CALL_OW 274
8801: PPUSH
8802: LD_INT 3
8804: PPUSH
8805: LD_INT 0
8807: PPUSH
8808: CALL_OW 277
// end ; end ;
8812: GO 8726
8814: POP
8815: POP
// end ; if dec1 = 3 then
8816: LD_VAR 0 2
8820: PUSH
8821: LD_INT 3
8823: EQUAL
8824: IFFALSE 9059
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8826: LD_EXP 1
8830: PPUSH
8831: LD_STRING D3Kc1-JMM-1
8833: PPUSH
8834: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8838: LD_EXP 25
8842: PPUSH
8843: LD_STRING D3Kc1-Kurt-1
8845: PPUSH
8846: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8850: LD_EXP 1
8854: PPUSH
8855: LD_STRING D3Kc1-JMM-2
8857: PPUSH
8858: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8862: LD_EXP 25
8866: PPUSH
8867: LD_STRING D3Kc1-Kurt-2
8869: PPUSH
8870: CALL_OW 88
// askSiberite = 1 ;
8874: LD_ADDR_EXP 32
8878: PUSH
8879: LD_INT 1
8881: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8882: LD_ADDR_VAR 0 2
8886: PUSH
8887: LD_STRING Q2b
8889: PPUSH
8890: LD_INT 1
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 98
8908: ST_TO_ADDR
// if dec2 = 1 then
8909: LD_VAR 0 3
8913: PUSH
8914: LD_INT 1
8916: EQUAL
8917: IFFALSE 8951
// begin Say ( JMM , D4a-JMM-1 ) ;
8919: LD_EXP 1
8923: PPUSH
8924: LD_STRING D4a-JMM-1
8926: PPUSH
8927: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8931: LD_EXP 25
8935: PPUSH
8936: LD_STRING D4b-Kurt-1
8938: PPUSH
8939: CALL_OW 88
// warWithLegion = 1 ;
8943: LD_ADDR_EXP 30
8947: PUSH
8948: LD_INT 1
8950: ST_TO_ADDR
// end ; if dec2 = 2 then
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 2
8958: EQUAL
8959: IFFALSE 8993
// begin Say ( JMM , D4b-JMM-1 ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_STRING D4b-JMM-1
8968: PPUSH
8969: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8973: LD_EXP 25
8977: PPUSH
8978: LD_STRING D4b-Kurt-1
8980: PPUSH
8981: CALL_OW 88
// warWithLegion = 1 ;
8985: LD_ADDR_EXP 30
8989: PUSH
8990: LD_INT 1
8992: ST_TO_ADDR
// end ; if dec2 = 3 then
8993: LD_VAR 0 3
8997: PUSH
8998: LD_INT 3
9000: EQUAL
9001: IFFALSE 9059
// begin Say ( JMM , D4c-JMM-1 ) ;
9003: LD_EXP 1
9007: PPUSH
9008: LD_STRING D4c-JMM-1
9010: PPUSH
9011: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9015: LD_EXP 25
9019: PPUSH
9020: LD_STRING D4c-Kurt-1
9022: PPUSH
9023: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9027: LD_EXP 1
9031: PPUSH
9032: LD_STRING D4c-JMM-2
9034: PPUSH
9035: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9039: LD_EXP 25
9043: PPUSH
9044: LD_STRING D4c-Kurt-2
9046: PPUSH
9047: CALL_OW 88
// fakeInfo = 1 ;
9051: LD_ADDR_EXP 31
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9059: LD_VAR 0 2
9063: PUSH
9064: LD_INT 4
9066: EQUAL
9067: IFFALSE 9724
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9069: LD_EXP 1
9073: PPUSH
9074: LD_STRING D3Kd-JMM-1
9076: PPUSH
9077: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9081: LD_VAR 0 6
9085: PUSH
9086: LD_INT 200
9088: GREATEREQUAL
9089: PUSH
9090: LD_VAR 0 8
9094: PUSH
9095: LD_INT 200
9097: GREATEREQUAL
9098: AND
9099: IFFALSE 9134
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9101: LD_ADDR_VAR 0 3
9105: PUSH
9106: LD_STRING Q2a
9108: PPUSH
9109: LD_INT 1
9111: PUSH
9112: LD_INT 2
9114: PUSH
9115: LD_INT 3
9117: PUSH
9118: LD_INT 4
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 98
9131: ST_TO_ADDR
9132: GO 9157
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9134: LD_ADDR_VAR 0 3
9138: PUSH
9139: LD_STRING Q2a
9141: PPUSH
9142: LD_INT 1
9144: PUSH
9145: LD_INT 4
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 98
9156: ST_TO_ADDR
// if dec2 = 1 then
9157: LD_VAR 0 3
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9199
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D5Ka-JMM-1
9174: PPUSH
9175: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9179: LD_EXP 25
9183: PPUSH
9184: LD_STRING D5Ka-Kurt-1
9186: PPUSH
9187: CALL_OW 88
// warWithLegion = 1 ;
9191: LD_ADDR_EXP 30
9195: PUSH
9196: LD_INT 1
9198: ST_TO_ADDR
// end ; if dec2 = 2 then
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 2
9206: EQUAL
9207: IFFALSE 9233
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9209: LD_EXP 1
9213: PPUSH
9214: LD_STRING D3Kb-JMM-1
9216: PPUSH
9217: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9221: LD_EXP 25
9225: PPUSH
9226: LD_STRING D3Kb-Kurt-1
9228: PPUSH
9229: CALL_OW 88
// end ; if dec2 = 3 then
9233: LD_VAR 0 3
9237: PUSH
9238: LD_INT 3
9240: EQUAL
9241: IFFALSE 9471
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D3Ke-JMM-1
9250: PPUSH
9251: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9255: LD_EXP 25
9259: PPUSH
9260: LD_STRING D3Ke-Kurt-1
9262: PPUSH
9263: CALL_OW 88
// PrepareLegionForPlayer ;
9267: CALL 4279 0 0
// for i in tmp do
9271: LD_ADDR_VAR 0 1
9275: PUSH
9276: LD_VAR 0 4
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9369
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9284: LD_ADDR_VAR 0 5
9288: PUSH
9289: LD_VAR 0 1
9293: PPUSH
9294: CALL_OW 274
9298: PPUSH
9299: LD_INT 1
9301: PPUSH
9302: CALL_OW 275
9306: ST_TO_ADDR
// if tmp2 >= 200 then
9307: LD_VAR 0 5
9311: PUSH
9312: LD_INT 200
9314: GREATEREQUAL
9315: IFFALSE 9347
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9317: LD_VAR 0 1
9321: PPUSH
9322: CALL_OW 274
9326: PPUSH
9327: LD_INT 1
9329: PPUSH
9330: LD_VAR 0 5
9334: PUSH
9335: LD_INT 200
9337: MINUS
9338: PPUSH
9339: CALL_OW 277
// break ;
9343: GO 9369
// end else
9345: GO 9367
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9347: LD_VAR 0 1
9351: PPUSH
9352: CALL_OW 274
9356: PPUSH
9357: LD_INT 1
9359: PPUSH
9360: LD_INT 0
9362: PPUSH
9363: CALL_OW 277
// end ; end ;
9367: GO 9281
9369: POP
9370: POP
// for i in tmp do
9371: LD_ADDR_VAR 0 1
9375: PUSH
9376: LD_VAR 0 4
9380: PUSH
9381: FOR_IN
9382: IFFALSE 9469
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9384: LD_ADDR_VAR 0 5
9388: PUSH
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 274
9398: PPUSH
9399: LD_INT 3
9401: PPUSH
9402: CALL_OW 275
9406: ST_TO_ADDR
// if tmp2 >= 200 then
9407: LD_VAR 0 5
9411: PUSH
9412: LD_INT 200
9414: GREATEREQUAL
9415: IFFALSE 9447
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: CALL_OW 274
9426: PPUSH
9427: LD_INT 3
9429: PPUSH
9430: LD_VAR 0 5
9434: PUSH
9435: LD_INT 200
9437: MINUS
9438: PPUSH
9439: CALL_OW 277
// break ;
9443: GO 9469
// end else
9445: GO 9467
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 274
9456: PPUSH
9457: LD_INT 3
9459: PPUSH
9460: LD_INT 0
9462: PPUSH
9463: CALL_OW 277
// end ; end ;
9467: GO 9381
9469: POP
9470: POP
// end ; if dec2 = 4 then
9471: LD_VAR 0 3
9475: PUSH
9476: LD_INT 4
9478: EQUAL
9479: IFFALSE 9724
// begin if dec1 = 3 then
9481: LD_VAR 0 2
9485: PUSH
9486: LD_INT 3
9488: EQUAL
9489: IFFALSE 9724
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9491: LD_EXP 1
9495: PPUSH
9496: LD_STRING D3Kc1-JMM-1
9498: PPUSH
9499: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9503: LD_EXP 25
9507: PPUSH
9508: LD_STRING D3Kc1-Kurt-1
9510: PPUSH
9511: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9515: LD_EXP 1
9519: PPUSH
9520: LD_STRING D3Kc1-JMM-2
9522: PPUSH
9523: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9527: LD_EXP 25
9531: PPUSH
9532: LD_STRING D3Kc1-Kurt-2
9534: PPUSH
9535: CALL_OW 88
// askSiberite = 1 ;
9539: LD_ADDR_EXP 32
9543: PUSH
9544: LD_INT 1
9546: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9547: LD_ADDR_VAR 0 2
9551: PUSH
9552: LD_STRING Q2b
9554: PPUSH
9555: LD_INT 1
9557: PUSH
9558: LD_INT 2
9560: PUSH
9561: LD_INT 3
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PPUSH
9569: CALL_OW 98
9573: ST_TO_ADDR
// if dec2 = 1 then
9574: LD_VAR 0 3
9578: PUSH
9579: LD_INT 1
9581: EQUAL
9582: IFFALSE 9616
// begin Say ( JMM , D4a-JMM-1 ) ;
9584: LD_EXP 1
9588: PPUSH
9589: LD_STRING D4a-JMM-1
9591: PPUSH
9592: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9596: LD_EXP 25
9600: PPUSH
9601: LD_STRING D4b-Kurt-1
9603: PPUSH
9604: CALL_OW 88
// warWithLegion = 1 ;
9608: LD_ADDR_EXP 30
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// end ; if dec2 = 2 then
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 2
9623: EQUAL
9624: IFFALSE 9658
// begin Say ( JMM , D4b-JMM-1 ) ;
9626: LD_EXP 1
9630: PPUSH
9631: LD_STRING D4b-JMM-1
9633: PPUSH
9634: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9638: LD_EXP 25
9642: PPUSH
9643: LD_STRING D4b-Kurt-1
9645: PPUSH
9646: CALL_OW 88
// warWithLegion = 1 ;
9650: LD_ADDR_EXP 30
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// end ; if dec2 = 3 then
9658: LD_VAR 0 3
9662: PUSH
9663: LD_INT 3
9665: EQUAL
9666: IFFALSE 9724
// begin Say ( JMM , D4c-JMM-1 ) ;
9668: LD_EXP 1
9672: PPUSH
9673: LD_STRING D4c-JMM-1
9675: PPUSH
9676: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9680: LD_EXP 25
9684: PPUSH
9685: LD_STRING D4c-Kurt-1
9687: PPUSH
9688: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9692: LD_EXP 1
9696: PPUSH
9697: LD_STRING D4c-JMM-2
9699: PPUSH
9700: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9704: LD_EXP 25
9708: PPUSH
9709: LD_STRING D4c-Kurt-2
9711: PPUSH
9712: CALL_OW 88
// fakeInfo = 1 ;
9716: LD_ADDR_EXP 31
9720: PUSH
9721: LD_INT 1
9723: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9724: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9728: LD_INT 8
9730: PPUSH
9731: LD_INT 8
9733: PPUSH
9734: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9738: LD_EXP 25
9742: PPUSH
9743: LD_EXP 26
9747: PPUSH
9748: CALL_OW 120
// wait ( 0 0$1 ) ;
9752: LD_INT 35
9754: PPUSH
9755: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9759: LD_EXP 26
9763: PPUSH
9764: LD_INT 4
9766: PPUSH
9767: CALL_OW 113
// wait ( 0 0$6 ) ;
9771: LD_INT 210
9773: PPUSH
9774: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9778: LD_EXP 25
9782: PPUSH
9783: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9787: LD_EXP 26
9791: PPUSH
9792: CALL_OW 64
// end ; end ;
9796: PPOPN 8
9798: END
// every 0 0$10 trigger warWithLegion = 1 do
9799: LD_EXP 30
9803: PUSH
9804: LD_INT 1
9806: EQUAL
9807: IFFALSE 9816
9809: GO 9811
9811: DISABLE
// PrepareAttackLegion ;
9812: CALL 5007 0 0
9816: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9817: LD_EXP 15
9821: PPUSH
9822: CALL_OW 305
9826: PUSH
9827: LD_EXP 15
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: CALL_OW 289
9839: NOT
9840: AND
9841: PUSH
9842: LD_EXP 15
9846: PPUSH
9847: LD_INT 2
9849: PPUSH
9850: CALL_OW 289
9854: NOT
9855: AND
9856: PUSH
9857: LD_EXP 15
9861: PPUSH
9862: LD_INT 3
9864: PPUSH
9865: CALL_OW 289
9869: NOT
9870: AND
9871: IFFALSE 9888
9873: GO 9875
9875: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9876: LD_EXP 15
9880: PPUSH
9881: LD_INT 4
9883: PPUSH
9884: CALL_OW 235
9888: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9889: LD_EXP 16
9893: PPUSH
9894: CALL_OW 305
9898: PUSH
9899: LD_EXP 16
9903: PPUSH
9904: LD_INT 1
9906: PPUSH
9907: CALL_OW 289
9911: NOT
9912: AND
9913: PUSH
9914: LD_EXP 16
9918: PPUSH
9919: LD_INT 2
9921: PPUSH
9922: CALL_OW 289
9926: NOT
9927: AND
9928: PUSH
9929: LD_EXP 16
9933: PPUSH
9934: LD_INT 3
9936: PPUSH
9937: CALL_OW 289
9941: NOT
9942: AND
9943: IFFALSE 9960
9945: GO 9947
9947: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9948: LD_EXP 16
9952: PPUSH
9953: LD_INT 4
9955: PPUSH
9956: CALL_OW 235
9960: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9961: LD_EXP 17
9965: PPUSH
9966: CALL_OW 305
9970: PUSH
9971: LD_EXP 17
9975: PPUSH
9976: LD_INT 1
9978: PPUSH
9979: CALL_OW 289
9983: NOT
9984: AND
9985: PUSH
9986: LD_EXP 17
9990: PPUSH
9991: LD_INT 2
9993: PPUSH
9994: CALL_OW 289
9998: NOT
9999: AND
10000: PUSH
10001: LD_EXP 17
10005: PPUSH
10006: LD_INT 3
10008: PPUSH
10009: CALL_OW 289
10013: NOT
10014: AND
10015: IFFALSE 10032
10017: GO 10019
10019: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10020: LD_EXP 17
10024: PPUSH
10025: LD_INT 4
10027: PPUSH
10028: CALL_OW 235
10032: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10033: LD_EXP 18
10037: PPUSH
10038: CALL_OW 305
10042: PUSH
10043: LD_EXP 18
10047: PPUSH
10048: LD_INT 1
10050: PPUSH
10051: CALL_OW 289
10055: NOT
10056: AND
10057: PUSH
10058: LD_EXP 18
10062: PPUSH
10063: LD_INT 2
10065: PPUSH
10066: CALL_OW 289
10070: NOT
10071: AND
10072: PUSH
10073: LD_EXP 18
10077: PPUSH
10078: LD_INT 3
10080: PPUSH
10081: CALL_OW 289
10085: NOT
10086: AND
10087: IFFALSE 10104
10089: GO 10091
10091: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10092: LD_EXP 18
10096: PPUSH
10097: LD_INT 4
10099: PPUSH
10100: CALL_OW 235
10104: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10105: LD_EXP 19
10109: PPUSH
10110: CALL_OW 305
10114: PUSH
10115: LD_EXP 19
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: CALL_OW 289
10127: NOT
10128: AND
10129: PUSH
10130: LD_EXP 19
10134: PPUSH
10135: LD_INT 2
10137: PPUSH
10138: CALL_OW 289
10142: NOT
10143: AND
10144: PUSH
10145: LD_EXP 19
10149: PPUSH
10150: LD_INT 3
10152: PPUSH
10153: CALL_OW 289
10157: NOT
10158: AND
10159: PUSH
10160: LD_EXP 19
10164: PPUSH
10165: LD_INT 2
10167: PPUSH
10168: CALL_OW 289
10172: NOT
10173: AND
10174: IFFALSE 10191
10176: GO 10178
10178: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10179: LD_EXP 19
10183: PPUSH
10184: LD_INT 4
10186: PPUSH
10187: CALL_OW 235
10191: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10192: LD_EXP 20
10196: PPUSH
10197: CALL_OW 305
10201: PUSH
10202: LD_EXP 20
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 289
10214: NOT
10215: AND
10216: PUSH
10217: LD_EXP 20
10221: PPUSH
10222: LD_INT 2
10224: PPUSH
10225: CALL_OW 289
10229: NOT
10230: AND
10231: PUSH
10232: LD_EXP 20
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: CALL_OW 289
10244: NOT
10245: AND
10246: IFFALSE 10263
10248: GO 10250
10250: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10251: LD_EXP 20
10255: PPUSH
10256: LD_INT 4
10258: PPUSH
10259: CALL_OW 235
10263: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10264: LD_EXP 21
10268: PPUSH
10269: CALL_OW 305
10273: PUSH
10274: LD_EXP 21
10278: PPUSH
10279: LD_INT 1
10281: PPUSH
10282: CALL_OW 289
10286: NOT
10287: AND
10288: PUSH
10289: LD_EXP 21
10293: PPUSH
10294: LD_INT 2
10296: PPUSH
10297: CALL_OW 289
10301: NOT
10302: AND
10303: PUSH
10304: LD_EXP 21
10308: PPUSH
10309: LD_INT 3
10311: PPUSH
10312: CALL_OW 289
10316: NOT
10317: AND
10318: IFFALSE 10335
10320: GO 10322
10322: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10323: LD_EXP 21
10327: PPUSH
10328: LD_INT 4
10330: PPUSH
10331: CALL_OW 235
10335: END
// every 0 0$1 do var i ;
10336: GO 10338
10338: DISABLE
10339: LD_INT 0
10341: PPUSH
// begin enable ;
10342: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10343: LD_ADDR_VAR 0 1
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_INT 4
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PPUSH
10358: CALL_OW 69
10362: PUSH
10363: FOR_IN
10364: IFFALSE 10403
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10366: LD_VAR 0 1
10370: PPUSH
10371: LD_INT 4
10373: PPUSH
10374: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10378: LD_VAR 0 1
10382: PPUSH
10383: LD_INT 4
10385: PPUSH
10386: CALL_OW 308
10390: IFFALSE 10401
// RemoveUnit ( i ) ;
10392: LD_VAR 0 1
10396: PPUSH
10397: CALL_OW 64
// end ;
10401: GO 10363
10403: POP
10404: POP
// end ;
10405: PPOPN 1
10407: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10408: LD_EXP 28
10412: PUSH
10413: LD_INT 1
10415: EQUAL
10416: IFFALSE 10791
10418: GO 10420
10420: DISABLE
10421: LD_INT 0
10423: PPUSH
10424: PPUSH
10425: PPUSH
// begin enable ;
10426: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10427: LD_ADDR_VAR 0 2
10431: PUSH
10432: LD_INT 12
10434: PPUSH
10435: LD_INT 22
10437: PUSH
10438: LD_INT 3
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 21
10447: PUSH
10448: LD_INT 2
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 70
10463: ST_TO_ADDR
// for i in enemyVehs do
10464: LD_ADDR_VAR 0 1
10468: PUSH
10469: LD_VAR 0 2
10473: PUSH
10474: FOR_IN
10475: IFFALSE 10789
// begin if See ( 1 , i ) then
10477: LD_INT 1
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: CALL_OW 292
10489: IFFALSE 10787
// begin disable ;
10491: DISABLE
// DialogueOn ;
10492: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10505: LD_INT 22
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 26
10517: PUSH
10518: LD_INT 1
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_EXP 1
10533: PUSH
10534: EMPTY
10535: LIST
10536: DIFF
10537: PPUSH
10538: CALL_OW 69
10542: PPUSH
10543: LD_STRING DT1-Sol1-1
10545: PPUSH
10546: LD_STRING DT1-FSol1-1
10548: PPUSH
10549: CALL 12340 0 3
// dec = ShowQuery2 ;
10553: LD_ADDR_VAR 0 3
10557: PUSH
10558: CALL 12950 0 0
10562: ST_TO_ADDR
// if dec = 1 then
10563: LD_VAR 0 3
10567: PUSH
10568: LD_INT 1
10570: EQUAL
10571: IFFALSE 10677
// begin Say ( JMM , D2-JMM-1 ) ;
10573: LD_EXP 1
10577: PPUSH
10578: LD_STRING D2-JMM-1
10580: PPUSH
10581: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10585: LD_EXP 22
10589: PPUSH
10590: LD_STRING D2-Pow-1
10592: PPUSH
10593: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10597: LD_EXP 1
10601: PPUSH
10602: LD_STRING D2a-JMM-1
10604: PPUSH
10605: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10609: LD_EXP 22
10613: PPUSH
10614: LD_STRING D2a-Pow-1
10616: PPUSH
10617: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10621: LD_EXP 1
10625: PPUSH
10626: LD_STRING D2a-JMM-2
10628: PPUSH
10629: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10633: LD_EXP 22
10637: PPUSH
10638: LD_STRING D2a-Pow-2
10640: PPUSH
10641: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10645: LD_EXP 1
10649: PPUSH
10650: LD_STRING D2a-JMM-3
10652: PPUSH
10653: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10657: LD_EXP 22
10661: PPUSH
10662: LD_STRING D2a-Pow-3
10664: PPUSH
10665: CALL_OW 94
// secondPass = 2 ;
10669: LD_ADDR_EXP 28
10673: PUSH
10674: LD_INT 2
10676: ST_TO_ADDR
// end ; if dec = 2 then
10677: LD_VAR 0 3
10681: PUSH
10682: LD_INT 2
10684: EQUAL
10685: IFFALSE 10779
// begin Say ( JMM , D2-JMM-1 ) ;
10687: LD_EXP 1
10691: PPUSH
10692: LD_STRING D2-JMM-1
10694: PPUSH
10695: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10699: LD_EXP 22
10703: PPUSH
10704: LD_STRING D2-Pow-1
10706: PPUSH
10707: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10711: LD_EXP 1
10715: PPUSH
10716: LD_STRING D2b-JMM-1
10718: PPUSH
10719: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10723: LD_EXP 22
10727: PPUSH
10728: LD_STRING D2b-Pow-1
10730: PPUSH
10731: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10735: LD_EXP 1
10739: PPUSH
10740: LD_STRING D2c-JMM-1
10742: PPUSH
10743: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10747: LD_EXP 22
10751: PPUSH
10752: LD_STRING D2c-Pow-1
10754: PPUSH
10755: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10759: LD_EXP 1
10763: PPUSH
10764: LD_STRING D2c-JMM-2
10766: PPUSH
10767: CALL_OW 88
// secondPass = 2 ;
10771: LD_ADDR_EXP 28
10775: PUSH
10776: LD_INT 2
10778: ST_TO_ADDR
// end ; DialogueOff ;
10779: CALL_OW 7
// exit ;
10783: POP
10784: POP
10785: GO 10791
// end ; end ;
10787: GO 10474
10789: POP
10790: POP
// end ;
10791: PPOPN 3
10793: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10794: LD_EXP 29
10798: PUSH
10799: LD_INT 1
10801: EQUAL
10802: IFFALSE 10952
10804: GO 10806
10806: DISABLE
10807: LD_INT 0
10809: PPUSH
10810: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10811: LD_ADDR_VAR 0 2
10815: PUSH
10816: LD_INT 11
10818: PPUSH
10819: LD_INT 22
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 24
10831: PUSH
10832: LD_INT 250
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PPUSH
10843: CALL_OW 70
10847: ST_TO_ADDR
// enable ;
10848: ENABLE
// for i in vehicles do
10849: LD_ADDR_VAR 0 1
10853: PUSH
10854: LD_VAR 0 2
10858: PUSH
10859: FOR_IN
10860: IFFALSE 10950
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
10862: LD_INT 1
10864: PPUSH
10865: LD_VAR 0 1
10869: PPUSH
10870: CALL_OW 292
10874: PUSH
10875: LD_EXP 29
10879: PUSH
10880: LD_INT 1
10882: EQUAL
10883: AND
10884: IFFALSE 10948
// begin disable ;
10886: DISABLE
// DialogueOn ;
10887: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10891: LD_INT 22
10893: PUSH
10894: LD_INT 1
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 21
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 69
10919: PPUSH
10920: LD_STRING DT1-Sol1-1
10922: PPUSH
10923: LD_STRING DT1-FSol1-1
10925: PPUSH
10926: CALL 12340 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10930: LD_EXP 1
10934: PPUSH
10935: LD_STRING DT1-JMM-1
10937: PPUSH
10938: CALL_OW 88
// DialogueOff ;
10942: CALL_OW 7
// break ;
10946: GO 10950
// end ; end ;
10948: GO 10859
10950: POP
10951: POP
// end ;
10952: PPOPN 2
10954: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
10955: LD_EXP 29
10959: PUSH
10960: LD_INT 1
10962: EQUAL
10963: PUSH
10964: LD_INT 11
10966: PPUSH
10967: LD_INT 22
10969: PUSH
10970: LD_INT 3
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 24
10979: PUSH
10980: LD_INT 251
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 2
10989: PUSH
10990: LD_INT 21
10992: PUSH
10993: LD_INT 2
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 21
11002: PUSH
11003: LD_INT 1
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: PPUSH
11020: CALL_OW 70
11024: PUSH
11025: LD_INT 0
11027: EQUAL
11028: AND
11029: IFFALSE 11113
11031: GO 11033
11033: DISABLE
// begin vehicleTeleported = 2 ;
11034: LD_ADDR_EXP 29
11038: PUSH
11039: LD_INT 2
11041: ST_TO_ADDR
// DialogueOn ;
11042: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11046: LD_EXP 1
11050: PPUSH
11051: LD_STRING DT1a-JMM-1
11053: PPUSH
11054: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11058: LD_INT 22
11060: PUSH
11061: LD_INT 1
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 21
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: PPUSH
11087: LD_STRING DT1a-Sol1-1
11089: PPUSH
11090: LD_STRING DT1a-FSol1-1
11092: PPUSH
11093: CALL 12340 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11097: LD_EXP 1
11101: PPUSH
11102: LD_STRING DT1a-JMM-2
11104: PPUSH
11105: CALL_OW 88
// DialogueOff ;
11109: CALL_OW 7
// end ;
11113: END
// every 0 0$1 trigger vehicleTeleported = 3 do var i , vehicles ;
11114: LD_EXP 29
11118: PUSH
11119: LD_INT 3
11121: EQUAL
11122: IFFALSE 11260
11124: GO 11126
11126: DISABLE
11127: LD_INT 0
11129: PPUSH
11130: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11131: LD_ADDR_VAR 0 2
11135: PUSH
11136: LD_INT 11
11138: PPUSH
11139: LD_INT 22
11141: PUSH
11142: LD_INT 3
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 24
11151: PUSH
11152: LD_INT 250
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PPUSH
11163: CALL_OW 70
11167: ST_TO_ADDR
// enable ;
11168: ENABLE
// for i in vehicles do
11169: LD_ADDR_VAR 0 1
11173: PUSH
11174: LD_VAR 0 2
11178: PUSH
11179: FOR_IN
11180: IFFALSE 11258
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11182: LD_INT 1
11184: PPUSH
11185: LD_VAR 0 1
11189: PPUSH
11190: CALL_OW 292
11194: PUSH
11195: LD_EXP 29
11199: PUSH
11200: LD_INT 3
11202: EQUAL
11203: AND
11204: IFFALSE 11256
// begin disable ;
11206: DISABLE
// DialogueOn ;
11207: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11211: LD_INT 22
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 21
11223: PUSH
11224: LD_INT 1
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL_OW 69
11239: PPUSH
11240: LD_STRING DT2-Sol1-1
11242: PPUSH
11243: LD_STRING DT2-FSol1-1
11245: PPUSH
11246: CALL 12340 0 3
// DialogueOff ;
11250: CALL_OW 7
// break ;
11254: GO 11258
// end ; end ;
11256: GO 11179
11258: POP
11259: POP
// end ;
11260: PPOPN 2
11262: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11263: LD_EXP 29
11267: PUSH
11268: LD_INT 3
11270: EQUAL
11271: PUSH
11272: LD_INT 11
11274: PPUSH
11275: LD_INT 22
11277: PUSH
11278: LD_INT 3
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 24
11287: PUSH
11288: LD_INT 251
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 2
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 21
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 70
11332: PUSH
11333: LD_INT 0
11335: EQUAL
11336: AND
11337: IFFALSE 11421
11339: GO 11341
11341: DISABLE
// begin vehicleTeleported = 4 ;
11342: LD_ADDR_EXP 29
11346: PUSH
11347: LD_INT 4
11349: ST_TO_ADDR
// DialogueOn ;
11350: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11354: LD_EXP 1
11358: PPUSH
11359: LD_STRING DT2a-JMM-1
11361: PPUSH
11362: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11366: LD_INT 22
11368: PUSH
11369: LD_INT 1
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: LD_INT 21
11378: PUSH
11379: LD_INT 1
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 69
11394: PPUSH
11395: LD_STRING DT2a-Sol1-1
11397: PPUSH
11398: LD_STRING DT2a-FSol1-1
11400: PPUSH
11401: CALL 12340 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
11405: LD_EXP 3
11409: PPUSH
11410: LD_STRING DT2a-Don-1
11412: PPUSH
11413: CALL_OW 88
// DialogueOff ;
11417: CALL_OW 7
// end ;
11421: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11422: LD_INT 1
11424: PPUSH
11425: LD_INT 45
11427: PPUSH
11428: LD_INT 74
11430: PPUSH
11431: CALL_OW 293
11435: IFFALSE 11530
11437: GO 11439
11439: DISABLE
// begin DialogueOn ;
11440: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11444: LD_INT 36
11446: PPUSH
11447: LD_INT 55
11449: PPUSH
11450: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11454: LD_INT 22
11456: PUSH
11457: LD_INT 1
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 21
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PPUSH
11478: CALL_OW 69
11482: PPUSH
11483: LD_STRING D5-Sol1-1
11485: PPUSH
11486: LD_STRING D5-FSol1-
11488: PPUSH
11489: CALL 12340 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
11493: LD_EXP 30
11497: PUSH
11498: LD_INT 1
11500: EQUAL
11501: PUSH
11502: LD_EXP 3
11506: PPUSH
11507: CALL_OW 300
11511: AND
11512: IFFALSE 11526
// Say ( Donaldson , D5-Don-1 ) ;
11514: LD_EXP 3
11518: PPUSH
11519: LD_STRING D5-Don-1
11521: PPUSH
11522: CALL_OW 88
// DialogueOff ;
11526: CALL_OW 7
// end ;
11530: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
11531: LD_INT 1
11533: PPUSH
11534: LD_INT 10
11536: PPUSH
11537: CALL_OW 292
11541: IFFALSE 11628
11543: GO 11545
11545: DISABLE
// begin DialogueOn ;
11546: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
11550: LD_INT 10
11552: PPUSH
11553: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11557: LD_INT 22
11559: PUSH
11560: LD_INT 1
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 21
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 69
11585: PUSH
11586: LD_EXP 1
11590: PUSH
11591: EMPTY
11592: LIST
11593: DIFF
11594: PPUSH
11595: LD_STRING DT3-Sol1-1
11597: PPUSH
11598: LD_STRING DT3-FSol1-1
11600: PPUSH
11601: CALL 12340 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11605: LD_EXP 1
11609: PPUSH
11610: LD_STRING DT3-JMM-1
11612: PPUSH
11613: CALL_OW 88
// DialogueOff ;
11617: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11621: LD_STRING M2
11623: PPUSH
11624: CALL_OW 337
// end ;
11628: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 do var i , j , vehs ;
11629: LD_INT 3
11631: PPUSH
11632: CALL_OW 303
11636: PUSH
11637: LD_INT 4
11639: PPUSH
11640: CALL_OW 303
11644: OR
11645: PUSH
11646: LD_INT 22
11648: PPUSH
11649: LD_INT 22
11651: PUSH
11652: LD_INT 1
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 70
11663: PUSH
11664: LD_INT 0
11666: GREATER
11667: OR
11668: IFFALSE 12028
11670: GO 11672
11672: DISABLE
11673: LD_INT 0
11675: PPUSH
11676: PPUSH
11677: PPUSH
// begin ruAI = 0 ;
11678: LD_ADDR_EXP 41
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11686: LD_ADDR_VAR 0 3
11690: PUSH
11691: LD_INT 10
11693: PPUSH
11694: LD_INT 22
11696: PUSH
11697: LD_INT 3
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 21
11706: PUSH
11707: LD_INT 2
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: LD_INT 58
11716: PUSH
11717: EMPTY
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 70
11729: ST_TO_ADDR
// DialogueOn ;
11730: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11734: LD_EXP 1
11738: PPUSH
11739: LD_STRING D6-JMM-1
11741: PPUSH
11742: CALL_OW 88
// DialogueOff ;
11746: CALL_OW 7
// for i := 1 to RuScientists do
11750: LD_ADDR_VAR 0 1
11754: PUSH
11755: DOUBLE
11756: LD_INT 1
11758: DEC
11759: ST_TO_ADDR
11760: LD_EXP 34
11764: PUSH
11765: FOR_TO
11766: IFFALSE 12026
// begin ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) ;
11768: LD_EXP 34
11772: PUSH
11773: LD_VAR 0 1
11777: ARRAY
11778: PPUSH
11779: LD_INT 3
11781: PUSH
11782: LD_INT 60
11784: PUSH
11785: EMPTY
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PPUSH
11792: CALL_OW 72
11796: PPUSH
11797: LD_VAR 0 3
11801: PUSH
11802: LD_VAR 0 1
11806: ARRAY
11807: PPUSH
11808: CALL_OW 120
// if IsOk ( rutp ) then
11812: LD_INT 137
11814: PPUSH
11815: CALL_OW 302
11819: IFFALSE 11972
// begin if i mod 2 then
11821: LD_VAR 0 1
11825: PUSH
11826: LD_INT 2
11828: MOD
11829: IFFALSE 11918
// begin AddComEnterUnit ( [ RuScientists [ i ] , vehs [ i ] ] , rutp ) ;
11831: LD_EXP 34
11835: PUSH
11836: LD_VAR 0 1
11840: ARRAY
11841: PUSH
11842: LD_VAR 0 3
11846: PUSH
11847: LD_VAR 0 1
11851: ARRAY
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: LD_INT 137
11859: PPUSH
11860: CALL_OW 180
// AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11864: LD_EXP 34
11868: PUSH
11869: LD_VAR 0 1
11873: ARRAY
11874: PUSH
11875: LD_VAR 0 3
11879: PUSH
11880: LD_VAR 0 1
11884: ARRAY
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: LD_INT 13
11892: PUSH
11893: LD_INT 14
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 1
11902: PPUSH
11903: LD_INT 2
11905: PPUSH
11906: CALL_OW 12
11910: ARRAY
11911: PPUSH
11912: CALL_OW 173
// end else
11916: GO 11970
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11918: LD_EXP 34
11922: PUSH
11923: LD_VAR 0 1
11927: ARRAY
11928: PUSH
11929: LD_VAR 0 3
11933: PUSH
11934: LD_VAR 0 1
11938: ARRAY
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PPUSH
11944: LD_INT 13
11946: PUSH
11947: LD_INT 14
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 1
11956: PPUSH
11957: LD_INT 2
11959: PPUSH
11960: CALL_OW 12
11964: ARRAY
11965: PPUSH
11966: CALL_OW 173
// end ; end else
11970: GO 12024
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11972: LD_EXP 34
11976: PUSH
11977: LD_VAR 0 1
11981: ARRAY
11982: PUSH
11983: LD_VAR 0 3
11987: PUSH
11988: LD_VAR 0 1
11992: ARRAY
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PPUSH
11998: LD_INT 13
12000: PUSH
12001: LD_INT 14
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 1
12010: PPUSH
12011: LD_INT 2
12013: PPUSH
12014: CALL_OW 12
12018: ARRAY
12019: PPUSH
12020: CALL_OW 173
// end ; end ;
12024: GO 11765
12026: POP
12027: POP
// end ;
12028: PPOPN 3
12030: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
12031: LD_EXP 41
12035: PUSH
12036: LD_INT 0
12038: EQUAL
12039: IFFALSE 12229
12041: GO 12043
12043: DISABLE
12044: LD_INT 0
12046: PPUSH
12047: PPUSH
// begin enable ;
12048: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12049: LD_ADDR_VAR 0 1
12053: PUSH
12054: LD_INT 13
12056: PPUSH
12057: LD_INT 22
12059: PUSH
12060: LD_INT 3
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: PPUSH
12070: CALL_OW 70
12074: PUSH
12075: FOR_IN
12076: IFFALSE 12137
// begin for j in RuScientists do
12078: LD_ADDR_VAR 0 2
12082: PUSH
12083: LD_EXP 34
12087: PUSH
12088: FOR_IN
12089: IFFALSE 12124
// if j = i then
12091: LD_VAR 0 2
12095: PUSH
12096: LD_VAR 0 1
12100: EQUAL
12101: IFFALSE 12122
// RuScientists = RuScientists diff [ i ] ;
12103: LD_ADDR_EXP 34
12107: PUSH
12108: LD_EXP 34
12112: PUSH
12113: LD_VAR 0 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: DIFF
12121: ST_TO_ADDR
12122: GO 12088
12124: POP
12125: POP
// RemoveUnit ( i ) ;
12126: LD_VAR 0 1
12130: PPUSH
12131: CALL_OW 64
// end ;
12135: GO 12075
12137: POP
12138: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12139: LD_ADDR_VAR 0 1
12143: PUSH
12144: LD_INT 14
12146: PPUSH
12147: LD_INT 22
12149: PUSH
12150: LD_INT 3
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: PPUSH
12160: CALL_OW 70
12164: PUSH
12165: FOR_IN
12166: IFFALSE 12227
// begin for j in RuScientists do
12168: LD_ADDR_VAR 0 2
12172: PUSH
12173: LD_EXP 34
12177: PUSH
12178: FOR_IN
12179: IFFALSE 12214
// if j = i then
12181: LD_VAR 0 2
12185: PUSH
12186: LD_VAR 0 1
12190: EQUAL
12191: IFFALSE 12212
// RuScientists = RuScientists diff [ i ] ;
12193: LD_ADDR_EXP 34
12197: PUSH
12198: LD_EXP 34
12202: PUSH
12203: LD_VAR 0 1
12207: PUSH
12208: EMPTY
12209: LIST
12210: DIFF
12211: ST_TO_ADDR
12212: GO 12178
12214: POP
12215: POP
// RemoveUnit ( i ) ;
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 64
// end ;
12225: GO 12165
12227: POP
12228: POP
// end ; end_of_file
12229: PPOPN 2
12231: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12232: LD_INT 0
12234: PPUSH
12235: PPUSH
// if exist_mode then
12236: LD_VAR 0 2
12240: IFFALSE 12259
// unit := CreateCharacter ( ident ) else
12242: LD_ADDR_VAR 0 4
12246: PUSH
12247: LD_VAR 0 1
12251: PPUSH
12252: CALL_OW 34
12256: ST_TO_ADDR
12257: GO 12274
// unit := NewCharacter ( ident ) ;
12259: LD_ADDR_VAR 0 4
12263: PUSH
12264: LD_VAR 0 1
12268: PPUSH
12269: CALL_OW 25
12273: ST_TO_ADDR
// result := unit ;
12274: LD_ADDR_VAR 0 3
12278: PUSH
12279: LD_VAR 0 4
12283: ST_TO_ADDR
// end ;
12284: LD_VAR 0 3
12288: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12289: LD_INT 0
12291: PPUSH
12292: PPUSH
// for i in charactersList do
12293: LD_ADDR_VAR 0 4
12297: PUSH
12298: LD_VAR 0 1
12302: PUSH
12303: FOR_IN
12304: IFFALSE 12333
// begin if IsOk ( i ) then
12306: LD_VAR 0 4
12310: PPUSH
12311: CALL_OW 302
12315: IFFALSE 12331
// SaveCharacters ( i , ident ) ;
12317: LD_VAR 0 4
12321: PPUSH
12322: LD_VAR 0 2
12326: PPUSH
12327: CALL_OW 38
// end ;
12331: GO 12303
12333: POP
12334: POP
// end ;
12335: LD_VAR 0 3
12339: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 1
12354: PUSH
12355: LD_EXP 1
12359: PUSH
12360: LD_EXP 7
12364: PUSH
12365: LD_EXP 3
12369: PUSH
12370: LD_EXP 4
12374: PUSH
12375: LD_EXP 5
12379: PUSH
12380: LD_EXP 2
12384: PUSH
12385: LD_EXP 12
12389: PUSH
12390: LD_EXP 13
12394: PUSH
12395: LD_EXP 9
12399: PUSH
12400: LD_EXP 11
12404: PUSH
12405: LD_EXP 6
12409: PUSH
12410: LD_EXP 8
12414: PUSH
12415: LD_EXP 10
12419: PUSH
12420: LD_EXP 22
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: DIFF
12441: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
12442: LD_ADDR_VAR 0 6
12446: PUSH
12447: LD_INT 1
12449: PPUSH
12450: LD_VAR 0 1
12454: PPUSH
12455: CALL_OW 12
12459: ST_TO_ADDR
// for i = 1 to characters do
12460: LD_ADDR_VAR 0 5
12464: PUSH
12465: DOUBLE
12466: LD_INT 1
12468: DEC
12469: ST_TO_ADDR
12470: LD_VAR 0 1
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12586
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
12478: LD_VAR 0 5
12482: PUSH
12483: LD_VAR 0 6
12487: EQUAL
12488: PUSH
12489: LD_VAR 0 1
12493: PUSH
12494: LD_VAR 0 5
12498: ARRAY
12499: PPUSH
12500: CALL_OW 258
12504: PUSH
12505: LD_INT 1
12507: EQUAL
12508: AND
12509: IFFALSE 12531
// Say ( characters [ i ] , dialogMID ) ;
12511: LD_VAR 0 1
12515: PUSH
12516: LD_VAR 0 5
12520: ARRAY
12521: PPUSH
12522: LD_VAR 0 2
12526: PPUSH
12527: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
12531: LD_VAR 0 5
12535: PUSH
12536: LD_VAR 0 6
12540: EQUAL
12541: PUSH
12542: LD_VAR 0 1
12546: PUSH
12547: LD_VAR 0 5
12551: ARRAY
12552: PPUSH
12553: CALL_OW 258
12557: PUSH
12558: LD_INT 2
12560: EQUAL
12561: AND
12562: IFFALSE 12584
// Say ( characters [ i ] , dialogFID ) ;
12564: LD_VAR 0 1
12568: PUSH
12569: LD_VAR 0 5
12573: ARRAY
12574: PPUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: CALL_OW 88
// end ;
12584: GO 12475
12586: POP
12587: POP
// end ;
12588: LD_VAR 0 4
12592: RET
// export function PrepareDifficulty ; var tmp ; begin
12593: LD_INT 0
12595: PPUSH
12596: PPUSH
// if Difficulty = 1 then
12597: LD_OWVAR 67
12601: PUSH
12602: LD_INT 1
12604: EQUAL
12605: IFFALSE 12623
// begin RuSolMinLevel = 8 ;
12607: LD_ADDR_EXP 36
12611: PUSH
12612: LD_INT 8
12614: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12615: LD_ADDR_EXP 37
12619: PUSH
12620: LD_INT 10
12622: ST_TO_ADDR
// end ; if Difficulty = 2 then
12623: LD_OWVAR 67
12627: PUSH
12628: LD_INT 2
12630: EQUAL
12631: IFFALSE 12725
// begin RuSolMinLevel = 9 ;
12633: LD_ADDR_EXP 36
12637: PUSH
12638: LD_INT 9
12640: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12641: LD_ADDR_EXP 37
12645: PUSH
12646: LD_INT 10
12648: ST_TO_ADDR
// uc_nation = 3 ;
12649: LD_ADDR_OWVAR 21
12653: PUSH
12654: LD_INT 3
12656: ST_TO_ADDR
// uc_side = 3 ;
12657: LD_ADDR_OWVAR 20
12661: PUSH
12662: LD_INT 3
12664: ST_TO_ADDR
// bc_level = 10 ;
12665: LD_ADDR_OWVAR 43
12669: PUSH
12670: LD_INT 10
12672: ST_TO_ADDR
// bc_type = b_turret ;
12673: LD_ADDR_OWVAR 42
12677: PUSH
12678: LD_INT 33
12680: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12681: LD_ADDR_VAR 0 2
12685: PUSH
12686: LD_INT 86
12688: PPUSH
12689: LD_INT 34
12691: PPUSH
12692: LD_INT 2
12694: PPUSH
12695: CALL_OW 47
12699: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12700: LD_VAR 0 2
12704: PPUSH
12705: LD_INT 49
12707: PPUSH
12708: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12712: LD_INT 64
12714: PPUSH
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 1
12720: PPUSH
12721: CALL_OW 322
// end ; if Difficulty = 3 then
12725: LD_OWVAR 67
12729: PUSH
12730: LD_INT 3
12732: EQUAL
12733: IFFALSE 12871
// begin RuSolMinLevel = 10 ;
12735: LD_ADDR_EXP 36
12739: PUSH
12740: LD_INT 10
12742: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12743: LD_ADDR_EXP 37
12747: PUSH
12748: LD_INT 10
12750: ST_TO_ADDR
// uc_nation = 3 ;
12751: LD_ADDR_OWVAR 21
12755: PUSH
12756: LD_INT 3
12758: ST_TO_ADDR
// uc_side = 3 ;
12759: LD_ADDR_OWVAR 20
12763: PUSH
12764: LD_INT 3
12766: ST_TO_ADDR
// bc_level = 10 ;
12767: LD_ADDR_OWVAR 43
12771: PUSH
12772: LD_INT 10
12774: ST_TO_ADDR
// bc_type = b_turret ;
12775: LD_ADDR_OWVAR 42
12779: PUSH
12780: LD_INT 33
12782: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12783: LD_ADDR_VAR 0 2
12787: PUSH
12788: LD_INT 86
12790: PPUSH
12791: LD_INT 34
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: CALL_OW 47
12801: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12802: LD_VAR 0 2
12806: PPUSH
12807: LD_INT 49
12809: PPUSH
12810: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: LD_INT 93
12821: PPUSH
12822: LD_INT 31
12824: PPUSH
12825: LD_INT 2
12827: PPUSH
12828: CALL_OW 47
12832: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12833: LD_VAR 0 2
12837: PPUSH
12838: LD_INT 49
12840: PPUSH
12841: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12845: LD_INT 64
12847: PPUSH
12848: LD_INT 3
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12858: LD_INT 65
12860: PPUSH
12861: LD_INT 3
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: CALL_OW 322
// end ; end ;
12871: LD_VAR 0 1
12875: RET
// export function ShowQuery1 ; begin
12876: LD_INT 0
12878: PPUSH
// case query ( Q1 ) of 1 :
12879: LD_STRING Q1
12881: PPUSH
12882: CALL_OW 97
12886: PUSH
12887: LD_INT 1
12889: DOUBLE
12890: EQUAL
12891: IFTRUE 12895
12893: GO 12906
12895: POP
// result = 1 ; 2 :
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: LD_INT 1
12903: ST_TO_ADDR
12904: GO 12945
12906: LD_INT 2
12908: DOUBLE
12909: EQUAL
12910: IFTRUE 12914
12912: GO 12925
12914: POP
// result = 2 ; 3 :
12915: LD_ADDR_VAR 0 1
12919: PUSH
12920: LD_INT 2
12922: ST_TO_ADDR
12923: GO 12945
12925: LD_INT 3
12927: DOUBLE
12928: EQUAL
12929: IFTRUE 12933
12931: GO 12944
12933: POP
// result = 3 ; end ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_INT 3
12941: ST_TO_ADDR
12942: GO 12945
12944: POP
// end ;
12945: LD_VAR 0 1
12949: RET
// export function ShowQuery2 ; begin
12950: LD_INT 0
12952: PPUSH
// case query ( Q1a ) of 1 :
12953: LD_STRING Q1a
12955: PPUSH
12956: CALL_OW 97
12960: PUSH
12961: LD_INT 1
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 12980
12969: POP
// result = 1 ; 2 :
12970: LD_ADDR_VAR 0 1
12974: PUSH
12975: LD_INT 1
12977: ST_TO_ADDR
12978: GO 13019
12980: LD_INT 2
12982: DOUBLE
12983: EQUAL
12984: IFTRUE 12988
12986: GO 12999
12988: POP
// result = 2 ; 3 :
12989: LD_ADDR_VAR 0 1
12993: PUSH
12994: LD_INT 2
12996: ST_TO_ADDR
12997: GO 13019
12999: LD_INT 3
13001: DOUBLE
13002: EQUAL
13003: IFTRUE 13007
13005: GO 13018
13007: POP
// result = 3 ; end ;
13008: LD_ADDR_VAR 0 1
13012: PUSH
13013: LD_INT 3
13015: ST_TO_ADDR
13016: GO 13019
13018: POP
// end ;
13019: LD_VAR 0 1
13023: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13024: LD_INT 0
13026: PPUSH
13027: PPUSH
13028: PPUSH
13029: PPUSH
13030: PPUSH
// for i = 1 to count do
13031: LD_ADDR_VAR 0 8
13035: PUSH
13036: DOUBLE
13037: LD_INT 1
13039: DEC
13040: ST_TO_ADDR
13041: LD_VAR 0 6
13045: PUSH
13046: FOR_TO
13047: IFFALSE 13128
// begin uc_side = side ;
13049: LD_ADDR_OWVAR 20
13053: PUSH
13054: LD_VAR 0 1
13058: ST_TO_ADDR
// uc_nation = nation ;
13059: LD_ADDR_OWVAR 21
13063: PUSH
13064: LD_VAR 0 2
13068: ST_TO_ADDR
// hc_gallery =  ;
13069: LD_ADDR_OWVAR 33
13073: PUSH
13074: LD_STRING 
13076: ST_TO_ADDR
// hc_name =  ;
13077: LD_ADDR_OWVAR 26
13081: PUSH
13082: LD_STRING 
13084: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13085: LD_INT 0
13087: PPUSH
13088: LD_VAR 0 5
13092: PPUSH
13093: LD_VAR 0 4
13097: PPUSH
13098: CALL_OW 380
// un = CreateHuman ;
13102: LD_ADDR_VAR 0 10
13106: PUSH
13107: CALL_OW 44
13111: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13112: LD_VAR 0 10
13116: PPUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL_OW 52
// end ;
13126: GO 13046
13128: POP
13129: POP
// end ;
13130: LD_VAR 0 7
13134: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13135: LD_INT 0
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
// for i = 1 to 72 do
13141: LD_ADDR_VAR 0 5
13145: PUSH
13146: DOUBLE
13147: LD_INT 1
13149: DEC
13150: ST_TO_ADDR
13151: LD_INT 72
13153: PUSH
13154: FOR_TO
13155: IFFALSE 13213
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13157: LD_VAR 0 5
13161: PPUSH
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 321
13171: PUSH
13172: LD_INT 1
13174: EQUAL
13175: PUSH
13176: LD_VAR 0 5
13180: PPUSH
13181: LD_VAR 0 3
13185: PPUSH
13186: CALL_OW 482
13190: PUSH
13191: LD_INT 1
13193: EQUAL
13194: AND
13195: IFFALSE 13211
// AddComResearch ( lab , i ) ;
13197: LD_VAR 0 2
13201: PPUSH
13202: LD_VAR 0 5
13206: PPUSH
13207: CALL_OW 184
13211: GO 13154
13213: POP
13214: POP
// end ;
13215: LD_VAR 0 4
13219: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13220: LD_INT 0
13222: PPUSH
13223: PPUSH
13224: PPUSH
13225: PPUSH
13226: PPUSH
13227: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13228: LD_ADDR_VAR 0 8
13232: PUSH
13233: LD_VAR 0 2
13237: PPUSH
13238: CALL_OW 313
13242: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13243: LD_ADDR_VAR 0 9
13247: PUSH
13248: LD_VAR 0 3
13252: PPUSH
13253: LD_INT 22
13255: PUSH
13256: LD_VAR 0 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 25
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 24
13277: PUSH
13278: LD_INT 750
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: LD_INT 54
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 70
13308: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13309: LD_ADDR_VAR 0 6
13313: PUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_INT 22
13321: PUSH
13322: LD_VAR 0 1
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 3
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 3
13343: PUSH
13344: LD_INT 24
13346: PUSH
13347: LD_INT 1000
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: PPUSH
13366: CALL_OW 70
13370: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13371: LD_VAR 0 6
13375: NOT
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 25
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 24
13401: PUSH
13402: LD_INT 250
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: NOT
13419: AND
13420: IFFALSE 13424
// exit ;
13422: GO 13606
// if buildings_list > 0 and engineerOkInside then
13424: LD_VAR 0 6
13428: PUSH
13429: LD_INT 0
13431: GREATER
13432: PUSH
13433: LD_VAR 0 8
13437: AND
13438: IFFALSE 13449
// ComExitBuilding ( engineerOkInside ) ;
13440: LD_VAR 0 8
13444: PPUSH
13445: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13449: LD_VAR 0 6
13453: PUSH
13454: LD_INT 0
13456: GREATER
13457: PUSH
13458: LD_VAR 0 9
13462: PUSH
13463: LD_INT 0
13465: GREATER
13466: AND
13467: IFFALSE 13487
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13469: LD_VAR 0 9
13473: PPUSH
13474: LD_VAR 0 6
13478: PUSH
13479: LD_INT 1
13481: ARRAY
13482: PPUSH
13483: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13487: LD_VAR 0 6
13491: PUSH
13492: LD_INT 0
13494: EQUAL
13495: PUSH
13496: LD_VAR 0 4
13500: PUSH
13501: LD_INT 0
13503: EQUAL
13504: AND
13505: PUSH
13506: LD_VAR 0 9
13510: PUSH
13511: LD_INT 0
13513: GREATER
13514: AND
13515: IFFALSE 13531
// ComEnterUnit ( engineerOkOutside , building ) ;
13517: LD_VAR 0 9
13521: PPUSH
13522: LD_VAR 0 2
13526: PPUSH
13527: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13531: LD_VAR 0 9
13535: PUSH
13536: LD_INT 0
13538: GREATER
13539: PUSH
13540: LD_VAR 0 6
13544: PUSH
13545: LD_INT 0
13547: EQUAL
13548: AND
13549: PUSH
13550: LD_VAR 0 4
13554: PUSH
13555: LD_INT 0
13557: GREATER
13558: AND
13559: IFFALSE 13606
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13561: LD_VAR 0 9
13565: PPUSH
13566: LD_VAR 0 4
13570: PUSH
13571: LD_INT 1
13573: ARRAY
13574: PPUSH
13575: LD_VAR 0 4
13579: PUSH
13580: LD_INT 2
13582: ARRAY
13583: PPUSH
13584: LD_VAR 0 4
13588: PUSH
13589: LD_INT 3
13591: ARRAY
13592: PPUSH
13593: LD_VAR 0 4
13597: PUSH
13598: LD_INT 4
13600: ARRAY
13601: PPUSH
13602: CALL_OW 145
// end ;
13606: LD_VAR 0 5
13610: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13611: LD_INT 0
13613: PPUSH
13614: PPUSH
13615: PPUSH
13616: PPUSH
13617: PPUSH
13618: PPUSH
13619: PPUSH
13620: PPUSH
13621: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13622: LD_ADDR_VAR 0 6
13626: PUSH
13627: LD_INT 22
13629: PUSH
13630: LD_VAR 0 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 25
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 24
13651: PUSH
13652: LD_INT 251
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: PPUSH
13664: CALL_OW 69
13668: PUSH
13669: LD_EXP 34
13673: PUSH
13674: EMPTY
13675: LIST
13676: DIFF
13677: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13678: LD_ADDR_VAR 0 7
13682: PUSH
13683: LD_VAR 0 3
13687: PPUSH
13688: LD_INT 22
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 25
13702: PUSH
13703: LD_INT 4
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 50
13712: PUSH
13713: EMPTY
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 70
13725: PUSH
13726: LD_EXP 34
13730: PUSH
13731: EMPTY
13732: LIST
13733: DIFF
13734: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13735: LD_ADDR_VAR 0 10
13739: PUSH
13740: LD_VAR 0 3
13744: PPUSH
13745: LD_INT 22
13747: PUSH
13748: LD_VAR 0 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 21
13759: PUSH
13760: LD_INT 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 3
13769: PUSH
13770: LD_INT 24
13772: PUSH
13773: LD_INT 750
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 70
13793: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13794: LD_ADDR_VAR 0 11
13798: PUSH
13799: LD_VAR 0 2
13803: PPUSH
13804: LD_INT 22
13806: PUSH
13807: LD_VAR 0 1
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 21
13818: PUSH
13819: LD_INT 1
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 3
13828: PUSH
13829: LD_INT 24
13831: PUSH
13832: LD_INT 1000
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 70
13852: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13853: LD_VAR 0 10
13857: PUSH
13858: LD_INT 0
13860: GREATER
13861: PUSH
13862: LD_VAR 0 6
13866: PUSH
13867: LD_INT 0
13869: GREATER
13870: AND
13871: IFFALSE 13887
// ComMoveToArea ( damageUnits , healArea ) ;
13873: LD_VAR 0 10
13877: PPUSH
13878: LD_VAR 0 2
13882: PPUSH
13883: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13887: LD_VAR 0 11
13891: PUSH
13892: LD_INT 0
13894: GREATER
13895: PUSH
13896: LD_VAR 0 7
13900: PUSH
13901: LD_INT 0
13903: GREATER
13904: AND
13905: IFFALSE 13925
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13907: LD_VAR 0 7
13911: PPUSH
13912: LD_VAR 0 11
13916: PUSH
13917: LD_INT 1
13919: ARRAY
13920: PPUSH
13921: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13925: LD_VAR 0 10
13929: PUSH
13930: LD_INT 0
13932: EQUAL
13933: PUSH
13934: LD_VAR 0 11
13938: PUSH
13939: LD_INT 0
13941: EQUAL
13942: AND
13943: PUSH
13944: LD_VAR 0 7
13948: PUSH
13949: LD_INT 0
13951: GREATER
13952: AND
13953: IFFALSE 14058
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13955: LD_ADDR_VAR 0 12
13959: PUSH
13960: LD_INT 22
13962: PUSH
13963: LD_VAR 0 1
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 21
13974: PUSH
13975: LD_INT 3
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 30
13984: PUSH
13985: LD_INT 8
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14002: LD_ADDR_VAR 0 13
14006: PUSH
14007: LD_INT 1
14009: PPUSH
14010: LD_VAR 0 12
14014: PPUSH
14015: CALL_OW 12
14019: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14020: LD_VAR 0 7
14024: PPUSH
14025: LD_INT 3
14027: PUSH
14028: LD_INT 60
14030: PUSH
14031: EMPTY
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PPUSH
14038: CALL_OW 72
14042: PPUSH
14043: LD_VAR 0 12
14047: PUSH
14048: LD_VAR 0 13
14052: ARRAY
14053: PPUSH
14054: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14058: LD_VAR 0 3
14062: PPUSH
14063: LD_INT 22
14065: PUSH
14066: LD_VAR 0 1
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 25
14077: PUSH
14078: LD_INT 3
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 24
14087: PUSH
14088: LD_INT 751
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 70
14104: PUSH
14105: LD_INT 0
14107: GREATER
14108: PUSH
14109: LD_INT 21
14111: PPUSH
14112: CALL_OW 302
14116: AND
14117: PUSH
14118: LD_INT 21
14120: PPUSH
14121: CALL_OW 255
14125: PUSH
14126: LD_INT 3
14128: EQUAL
14129: AND
14130: IFFALSE 14186
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14132: LD_VAR 0 3
14136: PPUSH
14137: LD_INT 22
14139: PUSH
14140: LD_VAR 0 1
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 25
14151: PUSH
14152: LD_INT 3
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 24
14161: PUSH
14162: LD_INT 751
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: PPUSH
14174: CALL_OW 70
14178: PPUSH
14179: LD_INT 21
14181: PPUSH
14182: CALL_OW 120
// end ;
14186: LD_VAR 0 5
14190: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14191: LD_INT 0
14193: PPUSH
14194: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14195: LD_INT 22
14197: PUSH
14198: LD_VAR 0 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 69
14225: PUSH
14226: LD_INT 18
14228: PPUSH
14229: LD_INT 22
14231: PUSH
14232: LD_VAR 0 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 21
14243: PUSH
14244: LD_INT 2
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 70
14259: PUSH
14260: LD_VAR 0 3
14264: LESSEQUAL
14265: DIFF
14266: IFFALSE 14333
// for i = 1 to vehCount do
14268: LD_ADDR_VAR 0 9
14272: PUSH
14273: DOUBLE
14274: LD_INT 1
14276: DEC
14277: ST_TO_ADDR
14278: LD_VAR 0 3
14282: PUSH
14283: FOR_TO
14284: IFFALSE 14331
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14286: LD_VAR 0 2
14290: PPUSH
14291: LD_VAR 0 7
14295: PPUSH
14296: LD_VAR 0 5
14300: PPUSH
14301: LD_VAR 0 6
14305: PPUSH
14306: LD_VAR 0 4
14310: PUSH
14311: LD_INT 1
14313: PPUSH
14314: LD_VAR 0 4
14318: PPUSH
14319: CALL_OW 12
14323: ARRAY
14324: PPUSH
14325: CALL_OW 185
14329: GO 14283
14331: POP
14332: POP
// end ;
14333: LD_VAR 0 8
14337: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14338: LD_INT 0
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14346: LD_EXP 39
14350: PUSH
14351: LD_INT 3
14353: PUSH
14354: LD_INT 4
14356: PUSH
14357: LD_INT 4
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: PUSH
14365: LD_OWVAR 67
14369: ARRAY
14370: GREATEREQUAL
14371: PUSH
14372: LD_EXP 40
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: LD_INT 2
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: LD_OWVAR 67
14395: ARRAY
14396: GREATEREQUAL
14397: AND
14398: IFFALSE 14631
// begin repeat wait ( 0 0$3 ) ;
14400: LD_INT 105
14402: PPUSH
14403: CALL_OW 67
// for j in russianTanks do
14407: LD_ADDR_VAR 0 4
14411: PUSH
14412: LD_EXP 39
14416: PUSH
14417: FOR_IN
14418: IFFALSE 14619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14420: LD_ADDR_VAR 0 6
14424: PUSH
14425: LD_INT 81
14427: PUSH
14428: LD_VAR 0 1
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 101
14439: PUSH
14440: LD_INT 1
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PPUSH
14451: CALL_OW 69
14455: PPUSH
14456: LD_VAR 0 4
14460: PPUSH
14461: CALL_OW 74
14465: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14466: LD_ADDR_VAR 0 7
14470: PUSH
14471: LD_INT 81
14473: PUSH
14474: LD_VAR 0 1
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 101
14485: PUSH
14486: LD_INT 1
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 2
14495: PUSH
14496: LD_INT 59
14498: PUSH
14499: EMPTY
14500: LIST
14501: PUSH
14502: LD_INT 21
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: LD_INT 21
14514: PUSH
14515: LD_INT 2
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: PPUSH
14536: CALL_OW 69
14540: PPUSH
14541: LD_VAR 0 4
14545: PPUSH
14546: CALL_OW 74
14550: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14551: LD_VAR 0 4
14555: PPUSH
14556: LD_VAR 0 6
14560: PPUSH
14561: CALL_OW 296
14565: PUSH
14566: LD_INT 8
14568: PLUS
14569: PUSH
14570: LD_VAR 0 4
14574: PPUSH
14575: LD_VAR 0 7
14579: PPUSH
14580: CALL_OW 296
14584: LESS
14585: IFFALSE 14603
// ComAttackUnit ( j , target1 ) else
14587: LD_VAR 0 4
14591: PPUSH
14592: LD_VAR 0 6
14596: PPUSH
14597: CALL_OW 115
14601: GO 14617
// ComAttackUnit ( j , target2 ) ;
14603: LD_VAR 0 4
14607: PPUSH
14608: LD_VAR 0 7
14612: PPUSH
14613: CALL_OW 115
// end ;
14617: GO 14417
14619: POP
14620: POP
// until russianTanks = 0 ;
14621: LD_EXP 39
14625: PUSH
14626: LD_INT 0
14628: EQUAL
14629: IFFALSE 14400
// end ; end ;
14631: LD_VAR 0 2
14635: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14636: LD_INT 0
14638: PPUSH
14639: PPUSH
14640: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14641: LD_EXP 39
14645: PUSH
14646: LD_INT 1
14648: GREATEREQUAL
14649: PUSH
14650: LD_EXP 40
14654: PUSH
14655: LD_INT 1
14657: PUSH
14658: LD_INT 2
14660: PUSH
14661: LD_INT 2
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: LD_OWVAR 67
14673: ARRAY
14674: GREATEREQUAL
14675: AND
14676: IFFALSE 14815
// repeat wait ( 0 0$3 ) ;
14678: LD_INT 105
14680: PPUSH
14681: CALL_OW 67
// if russianTimeLapsers > 0 then
14685: LD_EXP 40
14689: PUSH
14690: LD_INT 0
14692: GREATER
14693: IFFALSE 14805
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_EXP 40
14704: PPUSH
14705: LD_INT 3
14707: PUSH
14708: LD_INT 60
14710: PUSH
14711: EMPTY
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 72
14722: PUSH
14723: FOR_IN
14724: IFFALSE 14803
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14726: LD_ADDR_VAR 0 4
14730: PUSH
14731: LD_INT 81
14733: PUSH
14734: LD_VAR 0 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 101
14745: PUSH
14746: LD_INT 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: CALL_OW 74
14771: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
14772: LD_VAR 0 3
14776: PPUSH
14777: LD_VAR 0 4
14781: PPUSH
14782: CALL_OW 250
14786: PPUSH
14787: LD_VAR 0 4
14791: PPUSH
14792: CALL_OW 251
14796: PPUSH
14797: CALL_OW 111
// end ;
14801: GO 14723
14803: POP
14804: POP
// until russianTimeLapsers = 0 ;
14805: LD_EXP 40
14809: PUSH
14810: LD_INT 0
14812: EQUAL
14813: IFFALSE 14678
// end ;
14815: LD_VAR 0 2
14819: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14820: LD_INT 0
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
14826: PPUSH
14827: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14828: LD_ADDR_VAR 0 6
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_VAR 0 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 25
14847: PUSH
14848: LD_INT 9
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14864: LD_ADDR_VAR 0 7
14868: PUSH
14869: LD_INT 81
14871: PUSH
14872: LD_VAR 0 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 3
14883: PUSH
14884: LD_INT 21
14886: PUSH
14887: LD_INT 3
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PPUSH
14902: CALL_OW 69
14906: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14907: LD_ADDR_VAR 0 4
14911: PUSH
14912: LD_INT 1
14914: PPUSH
14915: LD_INT 3
14917: PPUSH
14918: CALL_OW 12
14922: ST_TO_ADDR
// for i = 1 to list do
14923: LD_ADDR_VAR 0 5
14927: PUSH
14928: DOUBLE
14929: LD_INT 1
14931: DEC
14932: ST_TO_ADDR
14933: LD_VAR 0 6
14937: PUSH
14938: FOR_TO
14939: IFFALSE 15141
// for ta in filter do
14941: LD_ADDR_VAR 0 3
14945: PUSH
14946: LD_VAR 0 7
14950: PUSH
14951: FOR_IN
14952: IFFALSE 15137
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14954: LD_VAR 0 6
14958: PUSH
14959: LD_VAR 0 5
14963: ARRAY
14964: PPUSH
14965: LD_VAR 0 3
14969: PPUSH
14970: CALL_OW 296
14974: PUSH
14975: LD_INT 15
14977: LESSEQUAL
14978: IFFALSE 15135
// begin case c of 1 :
14980: LD_VAR 0 4
14984: PUSH
14985: LD_INT 1
14987: DOUBLE
14988: EQUAL
14989: IFTRUE 14993
14991: GO 15031
14993: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14994: LD_VAR 0 6
14998: PUSH
14999: LD_VAR 0 5
15003: ARRAY
15004: PPUSH
15005: LD_VAR 0 3
15009: PPUSH
15010: CALL_OW 250
15014: PPUSH
15015: LD_VAR 0 3
15019: PPUSH
15020: CALL_OW 251
15024: PPUSH
15025: CALL_OW 154
15029: GO 15135
15031: LD_INT 2
15033: DOUBLE
15034: EQUAL
15035: IFTRUE 15039
15037: GO 15103
15039: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15040: LD_VAR 0 6
15044: PUSH
15045: LD_VAR 0 5
15049: ARRAY
15050: PPUSH
15051: LD_VAR 0 3
15055: PPUSH
15056: CALL_OW 250
15060: PUSH
15061: LD_INT 1
15063: NEG
15064: PPUSH
15065: LD_INT 1
15067: PPUSH
15068: CALL_OW 12
15072: PLUS
15073: PPUSH
15074: LD_VAR 0 3
15078: PPUSH
15079: CALL_OW 251
15083: PUSH
15084: LD_INT 1
15086: NEG
15087: PPUSH
15088: LD_INT 1
15090: PPUSH
15091: CALL_OW 12
15095: PLUS
15096: PPUSH
15097: CALL_OW 153
15101: GO 15135
15103: LD_INT 3
15105: DOUBLE
15106: EQUAL
15107: IFTRUE 15111
15109: GO 15134
15111: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15112: LD_VAR 0 6
15116: PUSH
15117: LD_VAR 0 5
15121: ARRAY
15122: PPUSH
15123: LD_VAR 0 3
15127: PPUSH
15128: CALL_OW 115
15132: GO 15135
15134: POP
// end ; end ;
15135: GO 14951
15137: POP
15138: POP
15139: GO 14938
15141: POP
15142: POP
// end ;
15143: LD_VAR 0 2
15147: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15148: LD_INT 0
15150: PPUSH
15151: PPUSH
15152: PPUSH
15153: PPUSH
// r := 100 ;
15154: LD_ADDR_VAR 0 5
15158: PUSH
15159: LD_INT 100
15161: ST_TO_ADDR
// x := 0 ;
15162: LD_ADDR_VAR 0 6
15166: PUSH
15167: LD_INT 0
15169: ST_TO_ADDR
// while ( x < n ) do
15170: LD_VAR 0 6
15174: PUSH
15175: LD_VAR 0 2
15179: LESS
15180: IFFALSE 15467
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15182: LD_ADDR_VAR 0 4
15186: PUSH
15187: DOUBLE
15188: LD_INT 1
15190: DEC
15191: ST_TO_ADDR
15192: LD_VAR 0 1
15196: PPUSH
15197: LD_INT 0
15199: PPUSH
15200: CALL_OW 517
15204: PUSH
15205: LD_INT 1
15207: ARRAY
15208: PUSH
15209: FOR_TO
15210: IFFALSE 15463
// begin if r > 50 then
15212: LD_VAR 0 5
15216: PUSH
15217: LD_INT 50
15219: GREATER
15220: IFFALSE 15439
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15222: LD_VAR 0 1
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL_OW 517
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: PUSH
15239: LD_VAR 0 4
15243: ARRAY
15244: PPUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: LD_INT 0
15252: PPUSH
15253: CALL_OW 517
15257: PUSH
15258: LD_INT 2
15260: ARRAY
15261: PUSH
15262: LD_VAR 0 4
15266: ARRAY
15267: PPUSH
15268: CALL_OW 458
15272: NOT
15273: IFFALSE 15423
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15275: LD_VAR 0 1
15279: PPUSH
15280: LD_INT 0
15282: PPUSH
15283: CALL_OW 517
15287: PUSH
15288: LD_INT 1
15290: ARRAY
15291: PUSH
15292: LD_VAR 0 4
15296: ARRAY
15297: PPUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_INT 0
15305: PPUSH
15306: CALL_OW 517
15310: PUSH
15311: LD_INT 2
15313: ARRAY
15314: PUSH
15315: LD_VAR 0 4
15319: ARRAY
15320: PPUSH
15321: LD_INT 5
15323: PPUSH
15324: LD_INT 0
15326: PPUSH
15327: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15331: LD_ADDR_EXP 42
15335: PUSH
15336: LD_EXP 42
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: LD_INT 0
15351: PPUSH
15352: CALL_OW 517
15356: PUSH
15357: LD_INT 1
15359: ARRAY
15360: PUSH
15361: LD_VAR 0 4
15365: ARRAY
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: LD_INT 0
15374: PPUSH
15375: CALL_OW 517
15379: PUSH
15380: LD_INT 2
15382: ARRAY
15383: PUSH
15384: LD_VAR 0 4
15388: ARRAY
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PPUSH
15394: CALL_OW 2
15398: ST_TO_ADDR
// r := 0 ;
15399: LD_ADDR_VAR 0 5
15403: PUSH
15404: LD_INT 0
15406: ST_TO_ADDR
// x := x + 1 ;
15407: LD_ADDR_VAR 0 6
15411: PUSH
15412: LD_VAR 0 6
15416: PUSH
15417: LD_INT 1
15419: PLUS
15420: ST_TO_ADDR
// end else
15421: GO 15437
// r := r + 35 ;
15423: LD_ADDR_VAR 0 5
15427: PUSH
15428: LD_VAR 0 5
15432: PUSH
15433: LD_INT 35
15435: PLUS
15436: ST_TO_ADDR
// end else
15437: GO 15461
// r := r + rand ( 10 , 25 ) ;
15439: LD_ADDR_VAR 0 5
15443: PUSH
15444: LD_VAR 0 5
15448: PUSH
15449: LD_INT 10
15451: PPUSH
15452: LD_INT 25
15454: PPUSH
15455: CALL_OW 12
15459: PLUS
15460: ST_TO_ADDR
// end ;
15461: GO 15209
15463: POP
15464: POP
15465: GO 15170
// end ;
15467: LD_VAR 0 3
15471: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
// tmpTab = [ ] ;
15478: LD_ADDR_VAR 0 6
15482: PUSH
15483: EMPTY
15484: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15485: LD_INT 22
15487: PUSH
15488: LD_VAR 0 1
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 30
15499: PUSH
15500: LD_INT 32
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: PUSH
15516: LD_INT 0
15518: GREATER
15519: IFFALSE 15602
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15521: LD_ADDR_VAR 0 4
15525: PUSH
15526: LD_INT 22
15528: PUSH
15529: LD_VAR 0 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 30
15540: PUSH
15541: LD_INT 32
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 69
15556: PUSH
15557: FOR_IN
15558: IFFALSE 15600
// begin for j in UnitsInside ( i ) do
15560: LD_ADDR_VAR 0 5
15564: PUSH
15565: LD_VAR 0 4
15569: PPUSH
15570: CALL_OW 313
15574: PUSH
15575: FOR_IN
15576: IFFALSE 15596
// tmpTab = tmpTab ^ j ;
15578: LD_ADDR_VAR 0 6
15582: PUSH
15583: LD_VAR 0 6
15587: PUSH
15588: LD_VAR 0 5
15592: ADD
15593: ST_TO_ADDR
15594: GO 15575
15596: POP
15597: POP
// end ;
15598: GO 15557
15600: POP
15601: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15602: LD_VAR 0 6
15606: PPUSH
15607: LD_VAR 0 2
15611: PPUSH
15612: CALL_OW 250
15616: PPUSH
15617: LD_VAR 0 2
15621: PPUSH
15622: CALL_OW 251
15626: PPUSH
15627: CALL_OW 114
// end ;
15631: LD_VAR 0 3
15635: RET
// export function PrepareNature ; var i , un ; begin
15636: LD_INT 0
15638: PPUSH
15639: PPUSH
15640: PPUSH
// uc_side := 0 ;
15641: LD_ADDR_OWVAR 20
15645: PUSH
15646: LD_INT 0
15648: ST_TO_ADDR
// uc_nation := 0 ;
15649: LD_ADDR_OWVAR 21
15653: PUSH
15654: LD_INT 0
15656: ST_TO_ADDR
// InitHc ;
15657: CALL_OW 19
// hc_class := class_fish ;
15661: LD_ADDR_OWVAR 28
15665: PUSH
15666: LD_INT 20
15668: ST_TO_ADDR
// for i = 1 to 6 do
15669: LD_ADDR_VAR 0 2
15673: PUSH
15674: DOUBLE
15675: LD_INT 1
15677: DEC
15678: ST_TO_ADDR
15679: LD_INT 6
15681: PUSH
15682: FOR_TO
15683: IFFALSE 15702
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15685: CALL_OW 44
15689: PPUSH
15690: LD_INT 23
15692: PPUSH
15693: LD_INT 0
15695: PPUSH
15696: CALL_OW 49
15700: GO 15682
15702: POP
15703: POP
// for i = 1 to Difficulty + 2 do
15704: LD_ADDR_VAR 0 2
15708: PUSH
15709: DOUBLE
15710: LD_INT 1
15712: DEC
15713: ST_TO_ADDR
15714: LD_OWVAR 67
15718: PUSH
15719: LD_INT 2
15721: PLUS
15722: PUSH
15723: FOR_TO
15724: IFFALSE 15833
// begin hc_sex = sex_male ;
15726: LD_ADDR_OWVAR 27
15730: PUSH
15731: LD_INT 1
15733: ST_TO_ADDR
// uc_side = 0 ;
15734: LD_ADDR_OWVAR 20
15738: PUSH
15739: LD_INT 0
15741: ST_TO_ADDR
// uc_nation = nation_nature ;
15742: LD_ADDR_OWVAR 21
15746: PUSH
15747: LD_INT 0
15749: ST_TO_ADDR
// hc_class = class_tiger ;
15750: LD_ADDR_OWVAR 28
15754: PUSH
15755: LD_INT 14
15757: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15758: LD_ADDR_OWVAR 31
15762: PUSH
15763: LD_EXP 37
15767: PUSH
15768: LD_INT 0
15770: PUSH
15771: LD_INT 0
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15783: LD_ADDR_OWVAR 35
15787: PUSH
15788: LD_INT 5
15790: NEG
15791: PPUSH
15792: LD_INT 5
15794: PPUSH
15795: CALL_OW 12
15799: PUSH
15800: LD_OWVAR 67
15804: MUL
15805: ST_TO_ADDR
// un = CreateHuman ;
15806: LD_ADDR_VAR 0 3
15810: PUSH
15811: CALL_OW 44
15815: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15816: LD_VAR 0 3
15820: PPUSH
15821: LD_INT 24
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: CALL_OW 49
// end ;
15831: GO 15723
15833: POP
15834: POP
// for i = 1 to rand ( 3 , 4 ) do
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: DOUBLE
15841: LD_INT 1
15843: DEC
15844: ST_TO_ADDR
15845: LD_INT 3
15847: PPUSH
15848: LD_INT 4
15850: PPUSH
15851: CALL_OW 12
15855: PUSH
15856: FOR_TO
15857: IFFALSE 15949
// begin hc_sex = sex_male ;
15859: LD_ADDR_OWVAR 27
15863: PUSH
15864: LD_INT 1
15866: ST_TO_ADDR
// uc_side = 0 ;
15867: LD_ADDR_OWVAR 20
15871: PUSH
15872: LD_INT 0
15874: ST_TO_ADDR
// uc_nation = nation_nature ;
15875: LD_ADDR_OWVAR 21
15879: PUSH
15880: LD_INT 0
15882: ST_TO_ADDR
// hc_class = 18 ;
15883: LD_ADDR_OWVAR 28
15887: PUSH
15888: LD_INT 18
15890: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15891: LD_ADDR_OWVAR 31
15895: PUSH
15896: LD_INT 0
15898: PUSH
15899: LD_INT 0
15901: PUSH
15902: LD_INT 0
15904: PUSH
15905: LD_INT 0
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: ST_TO_ADDR
// hc_agressivity = 0 ;
15914: LD_ADDR_OWVAR 35
15918: PUSH
15919: LD_INT 0
15921: ST_TO_ADDR
// un = CreateHuman ;
15922: LD_ADDR_VAR 0 3
15926: PUSH
15927: CALL_OW 44
15931: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_INT 24
15939: PPUSH
15940: LD_INT 0
15942: PPUSH
15943: CALL_OW 49
// end ;
15947: GO 15856
15949: POP
15950: POP
// for i = 1 to rand ( 1 , 3 ) do
15951: LD_ADDR_VAR 0 2
15955: PUSH
15956: DOUBLE
15957: LD_INT 1
15959: DEC
15960: ST_TO_ADDR
15961: LD_INT 1
15963: PPUSH
15964: LD_INT 3
15966: PPUSH
15967: CALL_OW 12
15971: PUSH
15972: FOR_TO
15973: IFFALSE 16121
// begin hc_sex = sex_male ;
15975: LD_ADDR_OWVAR 27
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// uc_side = 0 ;
15983: LD_ADDR_OWVAR 20
15987: PUSH
15988: LD_INT 0
15990: ST_TO_ADDR
// uc_nation = nation_nature ;
15991: LD_ADDR_OWVAR 21
15995: PUSH
15996: LD_INT 0
15998: ST_TO_ADDR
// hc_class = class_apeman ;
15999: LD_ADDR_OWVAR 28
16003: PUSH
16004: LD_INT 12
16006: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16007: LD_ADDR_OWVAR 31
16011: PUSH
16012: LD_EXP 36
16016: PPUSH
16017: LD_EXP 37
16021: PPUSH
16022: CALL_OW 12
16026: PUSH
16027: LD_EXP 36
16031: PPUSH
16032: LD_EXP 37
16036: PPUSH
16037: CALL_OW 12
16041: PUSH
16042: LD_EXP 36
16046: PPUSH
16047: LD_EXP 37
16051: PPUSH
16052: CALL_OW 12
16056: PUSH
16057: LD_EXP 36
16061: PPUSH
16062: LD_EXP 37
16066: PPUSH
16067: CALL_OW 12
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16078: LD_ADDR_OWVAR 35
16082: PUSH
16083: LD_INT 1
16085: PPUSH
16086: LD_INT 20
16088: PPUSH
16089: CALL_OW 12
16093: ST_TO_ADDR
// un = CreateHuman ;
16094: LD_ADDR_VAR 0 3
16098: PUSH
16099: CALL_OW 44
16103: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16104: LD_VAR 0 3
16108: PPUSH
16109: LD_INT 24
16111: PPUSH
16112: LD_INT 0
16114: PPUSH
16115: CALL_OW 49
// end ;
16119: GO 15972
16121: POP
16122: POP
// end ; end_of_file
16123: LD_VAR 0 1
16127: RET
// on UnitDestroyed ( unit ) do var i ;
16128: LD_INT 0
16130: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16131: LD_VAR 0 1
16135: PPUSH
16136: CALL_OW 255
16140: PUSH
16141: LD_INT 3
16143: EQUAL
16144: PUSH
16145: LD_VAR 0 1
16149: PPUSH
16150: CALL_OW 247
16154: PUSH
16155: LD_INT 1
16157: EQUAL
16158: AND
16159: IFFALSE 16223
// begin for i in RuScientists do
16161: LD_ADDR_VAR 0 2
16165: PUSH
16166: LD_EXP 34
16170: PUSH
16171: FOR_IN
16172: IFFALSE 16221
// if i = unit then
16174: LD_VAR 0 2
16178: PUSH
16179: LD_VAR 0 1
16183: EQUAL
16184: IFFALSE 16219
// begin RuScientists = RuScientists diff [ unit ] ;
16186: LD_ADDR_EXP 34
16190: PUSH
16191: LD_EXP 34
16195: PUSH
16196: LD_VAR 0 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: DIFF
16204: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16205: LD_ADDR_EXP 35
16209: PUSH
16210: LD_EXP 35
16214: PUSH
16215: LD_INT 1
16217: PLUS
16218: ST_TO_ADDR
// end ;
16219: GO 16171
16221: POP
16222: POP
// end ; end ;
16223: PPOPN 2
16225: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16226: LD_VAR 0 1
16230: PUSH
16231: LD_INT 10
16233: EQUAL
16234: PUSH
16235: LD_VAR 0 2
16239: PPUSH
16240: CALL_OW 255
16244: PUSH
16245: LD_INT 1
16247: EQUAL
16248: AND
16249: PUSH
16250: LD_EXP 45
16254: PUSH
16255: LD_INT 0
16257: EQUAL
16258: AND
16259: IFFALSE 16371
// begin eventVar1 = 1 ;
16261: LD_ADDR_EXP 45
16265: PUSH
16266: LD_INT 1
16268: ST_TO_ADDR
// teleportExplored = 1 ;
16269: LD_ADDR_EXP 33
16273: PUSH
16274: LD_INT 1
16276: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16277: LD_STRING M2a
16279: PPUSH
16280: CALL_OW 337
// wait ( 0 0$2 ) ;
16284: LD_INT 70
16286: PPUSH
16287: CALL_OW 67
// DialogueOn ;
16291: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16295: LD_INT 22
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 21
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PPUSH
16319: CALL_OW 69
16323: PPUSH
16324: LD_STRING DT3a-Sol1-1
16326: PPUSH
16327: LD_STRING DT3a-FSol1-1
16329: PPUSH
16330: CALL 12340 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16334: LD_EXP 1
16338: PPUSH
16339: LD_STRING DT3a-JMM-1
16341: PPUSH
16342: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16346: LD_VAR 0 2
16350: PPUSH
16351: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16355: LD_EXP 1
16359: PPUSH
16360: LD_STRING DT3a-JMM-1a
16362: PPUSH
16363: CALL_OW 88
// DialogueOff ;
16367: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16371: LD_VAR 0 1
16375: PUSH
16376: LD_INT 10
16378: EQUAL
16379: PUSH
16380: LD_VAR 0 2
16384: PPUSH
16385: CALL_OW 247
16389: PUSH
16390: LD_INT 2
16392: EQUAL
16393: AND
16394: PUSH
16395: LD_VAR 0 2
16399: PPUSH
16400: CALL_OW 255
16404: PUSH
16405: LD_INT 3
16407: EQUAL
16408: AND
16409: PUSH
16410: LD_EXP 29
16414: PUSH
16415: LD_INT 0
16417: EQUAL
16418: AND
16419: IFFALSE 16436
// begin wait ( 0 0$3 ) ;
16421: LD_INT 105
16423: PPUSH
16424: CALL_OW 67
// vehicleTeleported = 1 ;
16428: LD_ADDR_EXP 29
16432: PUSH
16433: LD_INT 1
16435: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16436: LD_VAR 0 1
16440: PUSH
16441: LD_INT 10
16443: EQUAL
16444: PUSH
16445: LD_VAR 0 2
16449: PPUSH
16450: CALL_OW 247
16454: PUSH
16455: LD_INT 2
16457: EQUAL
16458: AND
16459: PUSH
16460: LD_VAR 0 2
16464: PPUSH
16465: CALL_OW 255
16469: PUSH
16470: LD_INT 3
16472: EQUAL
16473: AND
16474: PUSH
16475: LD_EXP 29
16479: PUSH
16480: LD_INT 2
16482: EQUAL
16483: AND
16484: IFFALSE 16501
// begin wait ( 0 0$3 ) ;
16486: LD_INT 105
16488: PPUSH
16489: CALL_OW 67
// vehicleTeleported = 3 ;
16493: LD_ADDR_EXP 29
16497: PUSH
16498: LD_INT 3
16500: ST_TO_ADDR
// end ; end ;
16501: PPOPN 2
16503: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16504: LD_VAR 0 2
16508: PUSH
16509: LD_INT 21
16511: EQUAL
16512: PUSH
16513: LD_VAR 0 2
16517: PUSH
16518: LD_INT 112
16520: EQUAL
16521: OR
16522: IFFALSE 16655
// if GetSide ( vehicle ) = 3 then
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 255
16533: PUSH
16534: LD_INT 3
16536: EQUAL
16537: IFFALSE 16655
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 264
16548: PUSH
16549: LD_INT 46
16551: EQUAL
16552: PUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 264
16562: PUSH
16563: LD_INT 45
16565: EQUAL
16566: OR
16567: PUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 264
16577: PUSH
16578: LD_INT 44
16580: EQUAL
16581: OR
16582: IFFALSE 16612
// begin russianTanks = russianTanks ^ vehicle ;
16584: LD_ADDR_EXP 39
16588: PUSH
16589: LD_EXP 39
16593: PUSH
16594: LD_VAR 0 1
16598: ADD
16599: ST_TO_ADDR
// ComEnterUnit ( vehicle , ruteleprt ) ;
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_INT 10
16607: PPUSH
16608: CALL_OW 120
// end ; if GetWeapon ( vehicle ) = 49 then
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL_OW 264
16621: PUSH
16622: LD_INT 49
16624: EQUAL
16625: IFFALSE 16655
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16627: LD_ADDR_EXP 40
16631: PUSH
16632: LD_EXP 40
16636: PUSH
16637: LD_VAR 0 1
16641: ADD
16642: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16643: LD_VAR 0 1
16647: PPUSH
16648: LD_INT 137
16650: PPUSH
16651: CALL_OW 120
// end ; end ; end ;
16655: PPOPN 2
16657: END
// on UnitGoesToRed ( unit ) do var i ;
16658: LD_INT 0
16660: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 255
16670: PUSH
16671: LD_INT 3
16673: EQUAL
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 247
16684: PUSH
16685: LD_INT 2
16687: EQUAL
16688: AND
16689: IFFALSE 16807
// begin if russianTanks > 0 then
16691: LD_EXP 39
16695: PUSH
16696: LD_INT 0
16698: GREATER
16699: IFFALSE 16749
// for i in russianTanks do
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: LD_EXP 39
16710: PUSH
16711: FOR_IN
16712: IFFALSE 16747
// if i = unit then
16714: LD_VAR 0 2
16718: PUSH
16719: LD_VAR 0 1
16723: EQUAL
16724: IFFALSE 16745
// russianTanks = russianTanks diff [ unit ] ;
16726: LD_ADDR_EXP 39
16730: PUSH
16731: LD_EXP 39
16735: PUSH
16736: LD_VAR 0 1
16740: PUSH
16741: EMPTY
16742: LIST
16743: DIFF
16744: ST_TO_ADDR
16745: GO 16711
16747: POP
16748: POP
// if russianTimeLapsers > 0 then
16749: LD_EXP 40
16753: PUSH
16754: LD_INT 0
16756: GREATER
16757: IFFALSE 16807
// for i in russianTimeLapsers do
16759: LD_ADDR_VAR 0 2
16763: PUSH
16764: LD_EXP 40
16768: PUSH
16769: FOR_IN
16770: IFFALSE 16805
// if i = unit then
16772: LD_VAR 0 2
16776: PUSH
16777: LD_VAR 0 1
16781: EQUAL
16782: IFFALSE 16803
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
16784: LD_ADDR_EXP 40
16788: PUSH
16789: LD_EXP 40
16793: PUSH
16794: LD_VAR 0 1
16798: PUSH
16799: EMPTY
16800: LIST
16801: DIFF
16802: ST_TO_ADDR
16803: GO 16769
16805: POP
16806: POP
// end ; end ;
16807: PPOPN 2
16809: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16810: LD_VAR 0 2
16814: PPUSH
16815: CALL_OW 255
16819: PUSH
16820: LD_INT 3
16822: EQUAL
16823: PUSH
16824: LD_VAR 0 2
16828: PPUSH
16829: CALL_OW 257
16833: PUSH
16834: LD_INT 3
16836: EQUAL
16837: AND
16838: PUSH
16839: LD_INT 21
16841: PPUSH
16842: CALL_OW 255
16846: PUSH
16847: LD_INT 3
16849: EQUAL
16850: AND
16851: PUSH
16852: LD_INT 21
16854: PPUSH
16855: CALL_OW 302
16859: AND
16860: IFFALSE 16874
// ComEnterUnit ( human , ru_fact ) ;
16862: LD_VAR 0 2
16866: PPUSH
16867: LD_INT 21
16869: PPUSH
16870: CALL_OW 120
// end ; end_of_file
16874: PPOPN 2
16876: END
// every 0 0$1 trigger ruAI = 1 do
16877: LD_EXP 41
16881: PUSH
16882: LD_INT 1
16884: EQUAL
16885: IFFALSE 16984
16887: GO 16889
16889: DISABLE
// begin enable ;
16890: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16891: LD_INT 3
16893: PPUSH
16894: LD_INT 6
16896: PPUSH
16897: LD_INT 9
16899: PPUSH
16900: LD_EXP 38
16904: PPUSH
16905: CALL 13220 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16909: LD_INT 3
16911: PPUSH
16912: LD_INT 4
16914: PPUSH
16915: LD_INT 10
16917: PPUSH
16918: LD_EXP 38
16922: PPUSH
16923: CALL 13220 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 16
16932: PPUSH
16933: LD_INT 9
16935: PPUSH
16936: LD_INT 91
16938: PPUSH
16939: CALL 13611 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16943: LD_INT 3
16945: PPUSH
16946: LD_INT 17
16948: PPUSH
16949: LD_INT 10
16951: PPUSH
16952: LD_INT 47
16954: PUSH
16955: LD_INT 129
16957: PUSH
16958: LD_INT 135
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL 13611 0 4
// AttackVehicles ( 3 ) ;
16970: LD_INT 3
16972: PPUSH
16973: CALL 14338 0 1
// IntBazooka ( 3 ) ;
16977: LD_INT 3
16979: PPUSH
16980: CALL 14820 0 1
// end ;
16984: END
// every 0 0$1 do
16985: GO 16987
16987: DISABLE
// begin enable ;
16988: ENABLE
// TimeLapsersAI ( 3 ) ;
16989: LD_INT 3
16991: PPUSH
16992: CALL 14636 0 1
// end ;
16996: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16997: LD_INT 4
16999: PPUSH
17000: CALL_OW 303
17004: IFFALSE 17019
17006: GO 17008
17008: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17009: LD_INT 3
17011: PPUSH
17012: LD_INT 4
17014: PPUSH
17015: CALL 15472 0 2
17019: END
// every 0 0$1 do
17020: GO 17022
17022: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17023: LD_INT 3
17025: PPUSH
17026: LD_INT 91
17028: PPUSH
17029: LD_INT 3
17031: PPUSH
17032: CALL 13135 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17036: LD_INT 3
17038: PPUSH
17039: LD_INT 47
17041: PPUSH
17042: LD_INT 3
17044: PPUSH
17045: CALL 13135 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17049: LD_INT 3
17051: PPUSH
17052: LD_INT 129
17054: PPUSH
17055: LD_INT 3
17057: PPUSH
17058: CALL 13135 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17062: LD_INT 3
17064: PPUSH
17065: LD_INT 3
17067: PPUSH
17068: LD_INT 3
17070: PPUSH
17071: CALL 13135 0 3
// end ;
17075: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17076: LD_EXP 28
17080: PUSH
17081: LD_INT 2
17083: EQUAL
17084: PUSH
17085: LD_INT 22
17087: PUSH
17088: LD_INT 3
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 21
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 50
17107: PUSH
17108: EMPTY
17109: LIST
17110: PUSH
17111: LD_INT 3
17113: PUSH
17114: LD_INT 58
17116: PUSH
17117: EMPTY
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: PPUSH
17130: CALL_OW 69
17134: PUSH
17135: LD_INT 18
17137: PPUSH
17138: LD_INT 22
17140: PUSH
17141: LD_INT 3
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 21
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PPUSH
17162: CALL_OW 70
17166: PUSH
17167: LD_INT 0
17169: EQUAL
17170: DIFF
17171: AND
17172: IFFALSE 17290
17174: GO 17176
17176: DISABLE
// begin enable ;
17177: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17178: LD_INT 3
17180: PPUSH
17181: LD_INT 21
17183: PPUSH
17184: LD_INT 3
17186: PUSH
17187: LD_INT 4
17189: PUSH
17190: LD_INT 4
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: LD_OWVAR 67
17202: ARRAY
17203: PPUSH
17204: LD_INT 46
17206: PUSH
17207: LD_INT 45
17209: PUSH
17210: LD_INT 44
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: PPUSH
17218: LD_INT 3
17220: PPUSH
17221: LD_INT 3
17223: PPUSH
17224: LD_INT 24
17226: PPUSH
17227: CALL 14191 0 7
// if russianTimeLapsers = 0 then
17231: LD_EXP 40
17235: PUSH
17236: LD_INT 0
17238: EQUAL
17239: IFFALSE 17290
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17241: LD_INT 3
17243: PPUSH
17244: LD_INT 112
17246: PPUSH
17247: LD_INT 1
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: LD_INT 2
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: LD_OWVAR 67
17265: ARRAY
17266: PPUSH
17267: LD_INT 49
17269: PUSH
17270: LD_INT 49
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PPUSH
17277: LD_INT 3
17279: PPUSH
17280: LD_INT 3
17282: PPUSH
17283: LD_INT 24
17285: PPUSH
17286: CALL 14191 0 7
// end ;
17290: END
// every 0 0$1 trigger arabianMines do var i ;
17291: LD_EXP 42
17295: IFFALSE 17416
17297: GO 17299
17299: DISABLE
17300: LD_INT 0
17302: PPUSH
// begin enable ;
17303: ENABLE
// for i in arabianMines do
17304: LD_ADDR_VAR 0 1
17308: PUSH
17309: LD_EXP 42
17313: PUSH
17314: FOR_IN
17315: IFFALSE 17414
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17317: LD_INT 22
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 92
17329: PUSH
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: PUSH
17339: LD_VAR 0 1
17343: PUSH
17344: LD_INT 2
17346: ARRAY
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: IFFALSE 17412
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17367: LD_VAR 0 1
17371: PUSH
17372: LD_INT 1
17374: ARRAY
17375: PPUSH
17376: LD_VAR 0 1
17380: PUSH
17381: LD_INT 2
17383: ARRAY
17384: PPUSH
17385: LD_INT 5
17387: PPUSH
17388: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17392: LD_ADDR_EXP 42
17396: PUSH
17397: LD_EXP 42
17401: PPUSH
17402: LD_VAR 0 1
17406: PPUSH
17407: CALL_OW 3
17411: ST_TO_ADDR
// end ; end ;
17412: GO 17314
17414: POP
17415: POP
// end ; end_of_file
17416: PPOPN 1
17418: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
17419: LD_EXP 34
17423: PUSH
17424: EMPTY
17425: EQUAL
17426: PUSH
17427: LD_INT 3
17429: PPUSH
17430: CALL_OW 301
17434: AND
17435: IFFALSE 17640
17437: GO 17439
17439: DISABLE
// begin if sciCounter = 0 then
17440: LD_EXP 35
17444: PUSH
17445: LD_INT 0
17447: EQUAL
17448: IFFALSE 17474
// begin Say ( JMM , D7a-JMM-1 ) ;
17450: LD_EXP 1
17454: PPUSH
17455: LD_STRING D7a-JMM-1
17457: PPUSH
17458: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17462: LD_EXP 22
17466: PPUSH
17467: LD_STRING D7a-Pow-1
17469: PPUSH
17470: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
17474: LD_EXP 35
17478: PUSH
17479: LD_INT 0
17481: GREATER
17482: PUSH
17483: LD_EXP 35
17487: PUSH
17488: LD_INT 6
17490: LESS
17491: AND
17492: IFFALSE 17518
// begin Say ( JMM , D7b-JMM-1 ) ;
17494: LD_EXP 1
17498: PPUSH
17499: LD_STRING D7b-JMM-1
17501: PPUSH
17502: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17506: LD_EXP 22
17510: PPUSH
17511: LD_STRING D7b-Pow-1
17513: PPUSH
17514: CALL_OW 94
// end ; if sciCounter = 6 then
17518: LD_EXP 35
17522: PUSH
17523: LD_INT 6
17525: EQUAL
17526: IFFALSE 17636
// begin Say ( JMM , D7c-JMM-1 ) ;
17528: LD_EXP 1
17532: PPUSH
17533: LD_STRING D7c-JMM-1
17535: PPUSH
17536: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17540: LD_EXP 22
17544: PPUSH
17545: LD_STRING D7c-Pow-1
17547: PPUSH
17548: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17552: LD_EXP 1
17556: PPUSH
17557: LD_STRING D7d-JMM-1
17559: PPUSH
17560: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17564: LD_EXP 22
17568: PPUSH
17569: LD_STRING D7d-Pow-1
17571: PPUSH
17572: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17576: LD_EXP 1
17580: PPUSH
17581: LD_STRING D7d-JMM-2
17583: PPUSH
17584: CALL_OW 88
// if askSiberite = 1 then
17588: LD_EXP 32
17592: PUSH
17593: LD_INT 1
17595: EQUAL
17596: IFFALSE 17612
// begin Say ( JMM , D7d-JMM-2a ) ;
17598: LD_EXP 1
17602: PPUSH
17603: LD_STRING D7d-JMM-2a
17605: PPUSH
17606: CALL_OW 88
// end else
17610: GO 17624
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
17612: LD_EXP 22
17616: PPUSH
17617: LD_STRING D7d-Pow-2
17619: PPUSH
17620: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
17624: LD_EXP 22
17628: PPUSH
17629: LD_STRING D7d-Pow-2a
17631: PPUSH
17632: CALL_OW 94
// end ; FinishMission ;
17636: CALL 17641 0 0
// end ;
17640: END
// export function FinishMission ; begin
17641: LD_INT 0
17643: PPUSH
// if teleportExplored = 1 then
17644: LD_EXP 33
17648: PUSH
17649: LD_INT 1
17651: EQUAL
17652: IFFALSE 17666
// AddMedal ( Teleport , 1 ) else
17654: LD_STRING Teleport
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 101
17664: GO 17677
// AddMedal ( Teleport , - 1 ) ;
17666: LD_STRING Teleport
17668: PPUSH
17669: LD_INT 1
17671: NEG
17672: PPUSH
17673: CALL_OW 101
// if sciCounter > 2 then
17677: LD_EXP 35
17681: PUSH
17682: LD_INT 2
17684: GREATER
17685: IFFALSE 17699
// AddMedal ( Materials , 1 ) else
17687: LD_STRING Materials
17689: PPUSH
17690: LD_INT 1
17692: PPUSH
17693: CALL_OW 101
17697: GO 17710
// AddMedal ( Materials , - 1 ) ;
17699: LD_STRING Materials
17701: PPUSH
17702: LD_INT 1
17704: NEG
17705: PPUSH
17706: CALL_OW 101
// if sciCounter = 6 then
17710: LD_EXP 35
17714: PUSH
17715: LD_INT 6
17717: EQUAL
17718: IFFALSE 17742
// begin AddMedal ( Scientists , 1 ) ;
17720: LD_STRING Scientists
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17730: LD_INT 1
17732: PPUSH
17733: LD_STRING 12_SciDed_1
17735: PPUSH
17736: CALL_OW 39
// end else
17740: GO 17763
// begin AddMedal ( Scientists , - 1 ) ;
17742: LD_STRING Scientists
17744: PPUSH
17745: LD_INT 1
17747: NEG
17748: PPUSH
17749: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17753: LD_INT 0
17755: PPUSH
17756: LD_STRING 12_SciDed_1
17758: PPUSH
17759: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17763: LD_EXP 31
17767: PPUSH
17768: LD_STRING 12_MainDepositFake_1
17770: PPUSH
17771: CALL_OW 39
// GiveMedals ( MAIN ) ;
17775: LD_STRING MAIN
17777: PPUSH
17778: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17782: LD_INT 22
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 21
17794: PUSH
17795: LD_INT 1
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 2
17804: PUSH
17805: LD_INT 25
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 25
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 25
17827: PUSH
17828: LD_INT 3
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 25
17837: PUSH
17838: LD_INT 4
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 25
17847: PUSH
17848: LD_INT 5
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 25
17857: PUSH
17858: LD_INT 8
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: PPUSH
17879: CALL_OW 69
17883: PPUSH
17884: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
17888: LD_EXP 1
17892: PPUSH
17893: LD_EXP 44
17897: PUSH
17898: LD_STRING JMM
17900: STR
17901: PPUSH
17902: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
17906: LD_EXP 7
17910: PPUSH
17911: LD_EXP 44
17915: PUSH
17916: LD_STRING Brown
17918: STR
17919: PPUSH
17920: CALL 12289 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
17924: LD_EXP 3
17928: PPUSH
17929: LD_EXP 44
17933: PUSH
17934: LD_STRING Donaldson
17936: STR
17937: PPUSH
17938: CALL 12289 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
17942: LD_EXP 4
17946: PPUSH
17947: LD_EXP 44
17951: PUSH
17952: LD_STRING Bobby
17954: STR
17955: PPUSH
17956: CALL 12289 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
17960: LD_EXP 5
17964: PPUSH
17965: LD_EXP 44
17969: PUSH
17970: LD_STRING Cyrus
17972: STR
17973: PPUSH
17974: CALL 12289 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
17978: LD_EXP 2
17982: PPUSH
17983: LD_EXP 44
17987: PUSH
17988: LD_STRING Lisa
17990: STR
17991: PPUSH
17992: CALL 12289 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
17996: LD_EXP 12
18000: PPUSH
18001: LD_EXP 44
18005: PUSH
18006: LD_STRING Frank
18008: STR
18009: PPUSH
18010: CALL 12289 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18014: LD_EXP 13
18018: PPUSH
18019: LD_EXP 44
18023: PUSH
18024: LD_STRING Kikuchi
18026: STR
18027: PPUSH
18028: CALL 12289 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18032: LD_EXP 9
18036: PPUSH
18037: LD_EXP 44
18041: PUSH
18042: LD_STRING Houten
18044: STR
18045: PPUSH
18046: CALL 12289 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18050: LD_EXP 11
18054: PPUSH
18055: LD_EXP 44
18059: PUSH
18060: LD_STRING Gary
18062: STR
18063: PPUSH
18064: CALL 12289 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18068: LD_EXP 10
18072: PPUSH
18073: LD_EXP 44
18077: PUSH
18078: LD_STRING Cornell
18080: STR
18081: PPUSH
18082: CALL 12289 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18086: LD_EXP 6
18090: PPUSH
18091: LD_EXP 44
18095: PUSH
18096: LD_STRING Denis
18098: STR
18099: PPUSH
18100: CALL 12289 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18104: LD_EXP 8
18108: PPUSH
18109: LD_EXP 44
18113: PUSH
18114: LD_STRING Gladstone
18116: STR
18117: PPUSH
18118: CALL 12289 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18122: LD_INT 50
18124: PUSH
18125: EMPTY
18126: LIST
18127: PUSH
18128: LD_INT 22
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 23
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 21
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 25
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 25
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 25
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 25
18193: PUSH
18194: LD_INT 4
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 25
18203: PUSH
18204: LD_INT 5
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 25
18213: PUSH
18214: LD_INT 8
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: PPUSH
18237: CALL_OW 69
18241: PUSH
18242: LD_EXP 1
18246: PUSH
18247: LD_EXP 7
18251: PUSH
18252: LD_EXP 3
18256: PUSH
18257: LD_EXP 4
18261: PUSH
18262: LD_EXP 5
18266: PUSH
18267: LD_EXP 2
18271: PUSH
18272: LD_EXP 12
18276: PUSH
18277: LD_EXP 8
18281: PUSH
18282: LD_EXP 13
18286: PUSH
18287: LD_EXP 6
18291: PUSH
18292: LD_EXP 9
18296: PUSH
18297: LD_EXP 11
18301: PUSH
18302: LD_EXP 10
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: DIFF
18322: PPUSH
18323: LD_STRING 12_other_survivors
18325: PPUSH
18326: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18330: LD_INT 50
18332: PUSH
18333: EMPTY
18334: LIST
18335: PUSH
18336: LD_INT 22
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 23
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 21
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: LD_INT 25
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 25
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 25
18391: PUSH
18392: LD_INT 3
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 25
18401: PUSH
18402: LD_INT 4
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 25
18411: PUSH
18412: LD_INT 5
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 25
18421: PUSH
18422: LD_INT 8
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 69
18449: PPUSH
18450: LD_STRING 12_kurt_squad
18452: PPUSH
18453: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
18457: LD_STRING 11_others
18459: PPUSH
18460: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
18464: LD_EXP 14
18468: PPUSH
18469: LD_STRING 11_others
18471: PPUSH
18472: CALL_OW 38
// YouWin ;
18476: CALL_OW 103
// end ; end_of_file
18480: LD_VAR 0 1
18484: RET
// every 0 0$1 trigger IsDead ( JMM ) do
18485: LD_EXP 1
18489: PPUSH
18490: CALL_OW 301
18494: IFFALSE 18506
18496: GO 18498
18498: DISABLE
// YouLost ( JMM ) ; end_of_file
18499: LD_STRING JMM
18501: PPUSH
18502: CALL_OW 104
18506: END
// every 0 0$01 do
18507: GO 18509
18509: DISABLE
// begin repeat wait ( 0 0$30 ) ;
18510: LD_INT 1050
18512: PPUSH
18513: CALL_OW 67
// if cratesSpawned < 6 then
18517: LD_EXP 43
18521: PUSH
18522: LD_INT 6
18524: LESS
18525: IFFALSE 18562
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18527: LD_INT 3
18529: PPUSH
18530: LD_INT 5
18532: PPUSH
18533: CALL_OW 12
18537: PPUSH
18538: LD_INT 21
18540: PPUSH
18541: LD_INT 1
18543: PPUSH
18544: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18548: LD_ADDR_EXP 43
18552: PUSH
18553: LD_EXP 43
18557: PUSH
18558: LD_INT 1
18560: PLUS
18561: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
18562: LD_EXP 43
18566: PUSH
18567: LD_INT 6
18569: GREATEREQUAL
18570: PUSH
18571: LD_EXP 43
18575: PUSH
18576: LD_INT 12
18578: LESS
18579: AND
18580: IFFALSE 18624
// begin wait ( 0 0$30 ) ;
18582: LD_INT 1050
18584: PPUSH
18585: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18589: LD_INT 3
18591: PPUSH
18592: LD_INT 5
18594: PPUSH
18595: CALL_OW 12
18599: PPUSH
18600: LD_INT 21
18602: PPUSH
18603: LD_INT 1
18605: PPUSH
18606: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18610: LD_ADDR_EXP 43
18614: PUSH
18615: LD_EXP 43
18619: PUSH
18620: LD_INT 1
18622: PLUS
18623: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
18624: LD_EXP 43
18628: PUSH
18629: LD_INT 12
18631: GREATEREQUAL
18632: IFFALSE 18676
// begin wait ( 1 1$30 ) ;
18634: LD_INT 3150
18636: PPUSH
18637: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18641: LD_INT 3
18643: PPUSH
18644: LD_INT 5
18646: PPUSH
18647: CALL_OW 12
18651: PPUSH
18652: LD_INT 21
18654: PPUSH
18655: LD_INT 1
18657: PPUSH
18658: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18662: LD_ADDR_EXP 43
18666: PUSH
18667: LD_EXP 43
18671: PUSH
18672: LD_INT 1
18674: PLUS
18675: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
18676: LD_EXP 43
18680: PUSH
18681: LD_INT 15
18683: GREATEREQUAL
18684: IFFALSE 18510
// end ;
18686: END
