// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 16273 0 0
// PrepareDifficulty ;
 195: CALL 13219 0 0
// PrepareVehicles ;
 199: CALL 1566 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1142 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2885 0 0
// PrepareWestBase ;
 227: CALL 3397 0 0
// PrepareEastBase ;
 231: CALL 2957 0 0
// PrepareOtherRussians ;
 235: CALL 3509 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11_others
 575: PPUSH
 576: CALL_OW 31
 580: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 581: LD_ADDR_EXP 14
 585: PUSH
 586: LD_EXP 14
 590: PUSH
 591: LD_STRING 11c_others
 593: PPUSH
 594: CALL_OW 31
 598: ADD
 599: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 600: LD_ADDR_EXP 1
 604: PUSH
 605: LD_STRING 11_JMM
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 12858 0 2
 615: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 616: LD_EXP 1
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 628: LD_EXP 1
 632: PPUSH
 633: LD_INT 22
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: LD_INT 58
 655: PUSH
 656: EMPTY
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PPUSH
 664: CALL_OW 69
 668: PUSH
 669: LD_INT 1
 671: ARRAY
 672: PPUSH
 673: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 677: LD_STRING 11_Lisa
 679: PPUSH
 680: CALL_OW 28
 684: PUSH
 685: LD_INT 1
 687: EQUAL
 688: IFFALSE 735
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 690: LD_ADDR_EXP 2
 694: PUSH
 695: LD_STRING 11_Lisa
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 12858 0 2
 705: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 706: LD_EXP 2
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 718: LD_EXP 2
 722: PPUSH
 723: LD_INT 4
 725: PPUSH
 726: LD_INT 0
 728: PPUSH
 729: CALL_OW 49
// end else
 733: GO 751
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 735: LD_INT 4
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: LD_INT 1
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 1142 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 751: LD_STRING 11_Donaldson
 753: PPUSH
 754: CALL_OW 28
 758: PUSH
 759: LD_INT 1
 761: EQUAL
 762: IFFALSE 809
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING 11_Donaldson
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 12858 0 2
 779: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 780: LD_EXP 3
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 792: LD_EXP 3
 796: PPUSH
 797: LD_INT 4
 799: PPUSH
 800: LD_INT 0
 802: PPUSH
 803: CALL_OW 49
// end else
 807: GO 825
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 809: LD_INT 4
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL 1142 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 825: LD_STRING 11_Cyrus
 827: PPUSH
 828: CALL_OW 28
 832: PUSH
 833: LD_INT 1
 835: EQUAL
 836: IFFALSE 883
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 838: LD_ADDR_EXP 5
 842: PUSH
 843: LD_STRING 11_Cyrus
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: CALL 12858 0 2
 853: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 854: LD_EXP 5
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 866: LD_EXP 5
 870: PPUSH
 871: LD_INT 4
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: CALL_OW 49
// end else
 881: GO 899
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 883: LD_INT 4
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_INT 1
 891: PPUSH
 892: LD_INT 0
 894: PPUSH
 895: CALL 1142 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 899: LD_STRING 11_Denis
 901: PPUSH
 902: CALL_OW 28
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 957
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 912: LD_ADDR_EXP 6
 916: PUSH
 917: LD_STRING 11_Denis
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: CALL 12858 0 2
 927: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 928: LD_EXP 6
 932: PPUSH
 933: LD_INT 4
 935: PPUSH
 936: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 940: LD_EXP 6
 944: PPUSH
 945: LD_INT 4
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 49
// end else
 955: GO 973
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 957: LD_INT 4
 959: PPUSH
 960: LD_INT 0
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL 1142 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 973: LD_STRING 11_Frank
 975: PPUSH
 976: CALL_OW 28
 980: PUSH
 981: LD_INT 1
 983: EQUAL
 984: IFFALSE 1031
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 986: LD_ADDR_EXP 12
 990: PUSH
 991: LD_STRING 11_Frank
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: CALL 12858 0 2
1001: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1002: LD_EXP 12
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1014: LD_EXP 12
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: CALL_OW 49
// end else
1029: GO 1047
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL 1142 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1047: LD_STRING 11_Cornell
1049: PPUSH
1050: CALL_OW 28
1054: PUSH
1055: LD_INT 1
1057: EQUAL
1058: IFFALSE 1105
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1060: LD_ADDR_EXP 10
1064: PUSH
1065: LD_STRING 11_Cornell
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL 12858 0 2
1075: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1076: LD_EXP 10
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1088: LD_EXP 10
1092: PPUSH
1093: LD_INT 4
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end else
1103: GO 1121
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1105: LD_INT 4
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: LD_INT 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: CALL 1142 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1121: LD_ADDR_EXP 22
1125: PUSH
1126: LD_STRING Powell
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL 12858 0 2
1136: ST_TO_ADDR
// end ;
1137: LD_VAR 0 1
1141: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
// if mech = 1 then
1149: LD_VAR 0 4
1153: PUSH
1154: LD_INT 1
1156: EQUAL
1157: IFFALSE 1392
// begin if others11 > 0 then
1159: LD_EXP 14
1163: PUSH
1164: LD_INT 0
1166: GREATER
1167: IFFALSE 1332
// begin for i := 1 to others11 - 1 do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: DOUBLE
1175: LD_INT 1
1177: DEC
1178: ST_TO_ADDR
1179: LD_EXP 14
1183: PUSH
1184: LD_INT 1
1186: MINUS
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1269
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1191: LD_EXP 14
1195: PUSH
1196: LD_VAR 0 6
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 259
1209: PUSH
1210: LD_EXP 14
1214: PUSH
1215: LD_VAR 0 6
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ARRAY
1224: PPUSH
1225: LD_INT 3
1227: PPUSH
1228: CALL_OW 259
1232: LESS
1233: IFFALSE 1267
// begin mecha = others11 [ i + 1 ] ;
1235: LD_ADDR_VAR 0 9
1239: PUSH
1240: LD_EXP 14
1244: PUSH
1245: LD_VAR 0 6
1249: PUSH
1250: LD_INT 1
1252: PLUS
1253: ARRAY
1254: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1255: LD_VAR 0 9
1259: PPUSH
1260: LD_INT 3
1262: PPUSH
1263: CALL_OW 336
// end ; end ;
1267: GO 1188
1269: POP
1270: POP
// if spawnMode = 1 then
1271: LD_VAR 0 3
1275: PUSH
1276: LD_INT 1
1278: EQUAL
1279: IFFALSE 1300
// PlaceUnitArea ( mecha , area , false ) else
1281: LD_VAR 0 9
1285: PPUSH
1286: LD_VAR 0 1
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
1298: GO 1314
// PlaceHumanInUnit ( mecha , veh ) ;
1300: LD_VAR 0 9
1304: PPUSH
1305: LD_VAR 0 2
1309: PPUSH
1310: CALL_OW 52
// others11 = others11 diff mecha ;
1314: LD_ADDR_EXP 14
1318: PUSH
1319: LD_EXP 14
1323: PUSH
1324: LD_VAR 0 9
1328: DIFF
1329: ST_TO_ADDR
// end else
1330: GO 1390
// begin hc_name =  ;
1332: LD_ADDR_OWVAR 26
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// hc_gallery =  ;
1340: LD_ADDR_OWVAR 33
1344: PUSH
1345: LD_STRING 
1347: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1348: LD_INT 0
1350: PPUSH
1351: LD_INT 7
1353: PPUSH
1354: LD_INT 9
1356: PPUSH
1357: CALL_OW 12
1361: PPUSH
1362: CALL_OW 383
// un = CreateHuman ;
1366: LD_ADDR_VAR 0 7
1370: PUSH
1371: CALL_OW 44
1375: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1376: LD_VAR 0 7
1380: PPUSH
1381: LD_VAR 0 2
1385: PPUSH
1386: CALL_OW 52
// end ; end else
1390: GO 1561
// begin if others11 > 0 then
1392: LD_EXP 14
1396: PUSH
1397: LD_INT 0
1399: GREATER
1400: IFFALSE 1473
// begin if spawnMode = 1 then
1402: LD_VAR 0 3
1406: PUSH
1407: LD_INT 1
1409: EQUAL
1410: IFFALSE 1435
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1412: LD_EXP 14
1416: PUSH
1417: LD_INT 1
1419: ARRAY
1420: PPUSH
1421: LD_VAR 0 1
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
1433: GO 1453
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1435: LD_EXP 14
1439: PUSH
1440: LD_INT 1
1442: ARRAY
1443: PPUSH
1444: LD_VAR 0 2
1448: PPUSH
1449: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1453: LD_ADDR_EXP 14
1457: PUSH
1458: LD_EXP 14
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL_OW 3
1470: ST_TO_ADDR
// end else
1471: GO 1561
// begin hc_name =  ;
1473: LD_ADDR_OWVAR 26
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// hc_gallery =  ;
1481: LD_ADDR_OWVAR 33
1485: PUSH
1486: LD_STRING 
1488: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1489: LD_INT 0
1491: PPUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 2
1497: PUSH
1498: LD_INT 3
1500: PUSH
1501: LD_INT 4
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 12
1520: ARRAY
1521: PPUSH
1522: LD_INT 7
1524: PPUSH
1525: LD_INT 9
1527: PPUSH
1528: CALL_OW 12
1532: PPUSH
1533: CALL_OW 380
// un = CreateHuman ;
1537: LD_ADDR_VAR 0 7
1541: PUSH
1542: CALL_OW 44
1546: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1547: LD_VAR 0 7
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 52
// end ; end ; end ;
1561: LD_VAR 0 5
1565: RET
// export function PrepareVehicles ; var veh ; begin
1566: LD_INT 0
1568: PPUSH
1569: PPUSH
// uc_side = 1 ;
1570: LD_ADDR_OWVAR 20
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// uc_nation = 1 ;
1578: LD_ADDR_OWVAR 21
1582: PUSH
1583: LD_INT 1
1585: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1586: LD_ADDR_OWVAR 37
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_engine = 3 ;
1594: LD_ADDR_OWVAR 39
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_control = 3 ;
1602: LD_ADDR_OWVAR 38
1606: PUSH
1607: LD_INT 3
1609: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1610: LD_ADDR_OWVAR 40
1614: PUSH
1615: LD_INT 4
1617: ST_TO_ADDR
// veh = CreateVehicle ;
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: CALL_OW 45
1627: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_INT 4
1635: PPUSH
1636: LD_INT 0
1638: PPUSH
1639: CALL_OW 49
// vc_weapon = us_double_gun ;
1643: LD_ADDR_OWVAR 40
1647: PUSH
1648: LD_INT 5
1650: ST_TO_ADDR
// vc_control = 1 ;
1651: LD_ADDR_OWVAR 38
1655: PUSH
1656: LD_INT 1
1658: ST_TO_ADDR
// veh = CreateVehicle ;
1659: LD_ADDR_VAR 0 2
1663: PUSH
1664: CALL_OW 45
1668: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1669: LD_VAR 0 2
1673: PPUSH
1674: LD_INT 4
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL_OW 49
// vc_weapon = us_light_gun ;
1684: LD_ADDR_OWVAR 40
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_control = 3 ;
1692: LD_ADDR_OWVAR 38
1696: PUSH
1697: LD_INT 3
1699: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1700: LD_ADDR_OWVAR 37
1704: PUSH
1705: LD_INT 2
1707: ST_TO_ADDR
// veh = CreateVehicle ;
1708: LD_ADDR_VAR 0 2
1712: PUSH
1713: CALL_OW 45
1717: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1718: LD_VAR 0 2
1722: PPUSH
1723: LD_INT 4
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1733: LD_ADDR_OWVAR 40
1737: PUSH
1738: LD_INT 4
1740: ST_TO_ADDR
// veh = CreateVehicle ;
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: CALL_OW 45
1750: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1751: LD_VAR 0 2
1755: PPUSH
1756: LD_INT 4
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: CALL_OW 49
// end ;
1766: LD_VAR 0 1
1770: RET
// export function PowellSupport1 ; var veh , un ; begin
1771: LD_INT 0
1773: PPUSH
1774: PPUSH
1775: PPUSH
// uc_side = 1 ;
1776: LD_ADDR_OWVAR 20
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// uc_nation = 1 ;
1784: LD_ADDR_OWVAR 21
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1792: LD_STRING 11_Brown
1794: PPUSH
1795: CALL_OW 28
1799: PUSH
1800: LD_INT 1
1802: EQUAL
1803: IFFALSE 1850
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1805: LD_ADDR_EXP 7
1809: PUSH
1810: LD_STRING 11_Brown
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 12858 0 2
1820: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1821: LD_EXP 7
1825: PPUSH
1826: LD_INT 2
1828: PPUSH
1829: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1833: LD_EXP 7
1837: PPUSH
1838: LD_INT 4
1840: PPUSH
1841: LD_INT 0
1843: PPUSH
1844: CALL_OW 49
// end else
1848: GO 1866
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1850: LD_INT 4
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL 1142 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1866: LD_STRING 11_Gary
1868: PPUSH
1869: CALL_OW 28
1873: PUSH
1874: LD_INT 1
1876: EQUAL
1877: IFFALSE 1924
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1879: LD_ADDR_EXP 11
1883: PUSH
1884: LD_STRING 11_Gary
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: CALL 12858 0 2
1894: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1895: LD_EXP 11
1899: PPUSH
1900: LD_INT 2
1902: PPUSH
1903: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1907: LD_EXP 11
1911: PPUSH
1912: LD_INT 4
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 49
// end else
1922: GO 1940
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1924: LD_INT 4
1926: PPUSH
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL 1142 0 4
// end ; vc_chassis = us_medium_tracked ;
1940: LD_ADDR_OWVAR 37
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_engine = 3 ;
1948: LD_ADDR_OWVAR 39
1952: PUSH
1953: LD_INT 3
1955: ST_TO_ADDR
// vc_control = 1 ;
1956: LD_ADDR_OWVAR 38
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// vc_weapon = us_crane ;
1964: LD_ADDR_OWVAR 40
1968: PUSH
1969: LD_INT 13
1971: ST_TO_ADDR
// veh = CreateVehicle ;
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: CALL_OW 45
1981: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1982: LD_VAR 0 2
1986: PPUSH
1987: LD_INT 4
1989: PPUSH
1990: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1994: LD_VAR 0 2
1998: PPUSH
1999: LD_INT 4
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2009: LD_INT 4
2011: PPUSH
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_INT 2
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL 1142 0 4
// vc_weapon = 9 ;
2027: LD_ADDR_OWVAR 40
2031: PUSH
2032: LD_INT 9
2034: ST_TO_ADDR
// veh = CreateVehicle ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: CALL_OW 45
2044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_INT 4
2052: PPUSH
2053: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2057: LD_VAR 0 2
2061: PPUSH
2062: LD_INT 4
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2072: LD_INT 4
2074: PPUSH
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL 1142 0 4
// vc_control = 3 ;
2090: LD_ADDR_OWVAR 38
2094: PUSH
2095: LD_INT 3
2097: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2098: LD_ADDR_OWVAR 40
2102: PUSH
2103: LD_INT 12
2105: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2106: LD_ADDR_EXP 15
2110: PUSH
2111: CALL_OW 45
2115: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2116: LD_ADDR_EXP 16
2120: PUSH
2121: CALL_OW 45
2125: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2126: LD_EXP 15
2130: PPUSH
2131: LD_INT 4
2133: PPUSH
2134: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2138: LD_EXP 16
2142: PPUSH
2143: LD_INT 4
2145: PPUSH
2146: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2150: LD_EXP 15
2154: PPUSH
2155: LD_INT 4
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2165: LD_EXP 16
2169: PPUSH
2170: LD_INT 4
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2180: LD_EXP 15
2184: PPUSH
2185: LD_INT 3
2187: PPUSH
2188: LD_INT 100
2190: PPUSH
2191: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2195: LD_EXP 16
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2210: LD_EXP 16
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 20
2220: PPUSH
2221: CALL_OW 291
// end ;
2225: LD_VAR 0 1
2229: RET
// export function PowellSupport2 ; var veh , un ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
2234: PPUSH
// uc_side = 1 ;
2235: LD_ADDR_OWVAR 20
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// uc_nation = 1 ;
2243: LD_ADDR_OWVAR 21
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2251: LD_ADDR_OWVAR 37
2255: PUSH
2256: LD_INT 2
2258: ST_TO_ADDR
// vc_engine = 3 ;
2259: LD_ADDR_OWVAR 39
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_control = 3 ;
2267: LD_ADDR_OWVAR 38
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2275: LD_ADDR_OWVAR 40
2279: PUSH
2280: LD_INT 3
2282: ST_TO_ADDR
// veh = CreateVehicle ;
2283: LD_ADDR_VAR 0 2
2287: PUSH
2288: CALL_OW 45
2292: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2293: LD_VAR 0 2
2297: PPUSH
2298: LD_INT 4
2300: PPUSH
2301: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2305: LD_VAR 0 2
2309: PPUSH
2310: LD_INT 4
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: CALL_OW 49
// vc_control = 1 ;
2320: LD_ADDR_OWVAR 38
2324: PUSH
2325: LD_INT 1
2327: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2328: LD_ADDR_OWVAR 37
2332: PUSH
2333: LD_INT 2
2335: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2336: LD_ADDR_OWVAR 40
2340: PUSH
2341: LD_INT 5
2343: ST_TO_ADDR
// veh = CreateVehicle ;
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: CALL_OW 45
2353: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2354: LD_VAR 0 2
2358: PPUSH
2359: LD_INT 4
2361: PPUSH
2362: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2366: LD_VAR 0 2
2370: PPUSH
2371: LD_INT 4
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2381: LD_STRING 11_Bobby
2383: PPUSH
2384: CALL_OW 28
2388: PUSH
2389: LD_INT 1
2391: EQUAL
2392: IFFALSE 2438
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2394: LD_ADDR_EXP 4
2398: PUSH
2399: LD_STRING 11_Bobby
2401: PPUSH
2402: LD_INT 1
2404: PPUSH
2405: CALL 12858 0 2
2409: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2410: LD_EXP 4
2414: PPUSH
2415: LD_INT 3
2417: PPUSH
2418: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2422: LD_EXP 4
2426: PPUSH
2427: LD_VAR 0 2
2431: PPUSH
2432: CALL_OW 52
// end else
2436: GO 2456
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2438: LD_INT 0
2440: PPUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_INT 2
2448: PPUSH
2449: LD_INT 0
2451: PPUSH
2452: CALL 1142 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2456: LD_STRING 11_Houten
2458: PPUSH
2459: CALL_OW 28
2463: PUSH
2464: LD_INT 1
2466: EQUAL
2467: IFFALSE 2514
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2469: LD_ADDR_EXP 9
2473: PUSH
2474: LD_STRING 11_Houten
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL 12858 0 2
2484: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2485: LD_EXP 9
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2497: LD_EXP 9
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL_OW 49
// end else
2512: GO 2530
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2514: LD_INT 4
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: CALL 1142 0 4
// end ; vc_control = 3 ;
2530: LD_ADDR_OWVAR 38
2534: PUSH
2535: LD_INT 3
2537: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2538: LD_ADDR_OWVAR 40
2542: PUSH
2543: LD_INT 12
2545: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2546: LD_ADDR_EXP 17
2550: PUSH
2551: CALL_OW 45
2555: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2556: LD_EXP 17
2560: PPUSH
2561: LD_INT 4
2563: PPUSH
2564: CALL_OW 233
// amCargo4 = CreateVehicle ;
2568: LD_ADDR_EXP 18
2572: PUSH
2573: CALL_OW 45
2577: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2578: LD_EXP 18
2582: PPUSH
2583: LD_INT 4
2585: PPUSH
2586: CALL_OW 233
// amCargo5 = CreateVehicle ;
2590: LD_ADDR_EXP 19
2594: PUSH
2595: CALL_OW 45
2599: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2600: LD_EXP 19
2604: PPUSH
2605: LD_INT 4
2607: PPUSH
2608: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2612: LD_EXP 17
2616: PPUSH
2617: LD_INT 4
2619: PPUSH
2620: LD_INT 0
2622: PPUSH
2623: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2627: LD_EXP 18
2631: PPUSH
2632: LD_INT 4
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2642: LD_EXP 19
2646: PPUSH
2647: LD_INT 4
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2657: LD_EXP 17
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 100
2667: PPUSH
2668: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2672: LD_EXP 18
2676: PPUSH
2677: LD_INT 1
2679: PPUSH
2680: LD_INT 100
2682: PPUSH
2683: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2687: LD_EXP 19
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: LD_INT 100
2697: PPUSH
2698: CALL_OW 291
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PowellSupport3 ; var veh , un ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// uc_side = 1 ;
2712: LD_ADDR_OWVAR 20
2716: PUSH
2717: LD_INT 1
2719: ST_TO_ADDR
// uc_nation = 1 ;
2720: LD_ADDR_OWVAR 21
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2728: LD_INT 4
2730: PPUSH
2731: LD_INT 0
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL 1142 0 4
// vc_chassis = us_medium_wheeled ;
2744: LD_ADDR_OWVAR 37
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// vc_engine = 3 ;
2752: LD_ADDR_OWVAR 39
2756: PUSH
2757: LD_INT 3
2759: ST_TO_ADDR
// vc_control = 3 ;
2760: LD_ADDR_OWVAR 38
2764: PUSH
2765: LD_INT 3
2767: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2768: LD_ADDR_OWVAR 40
2772: PUSH
2773: LD_INT 12
2775: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2776: LD_ADDR_EXP 20
2780: PUSH
2781: CALL_OW 45
2785: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2786: LD_ADDR_EXP 21
2790: PUSH
2791: CALL_OW 45
2795: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2796: LD_EXP 20
2800: PPUSH
2801: LD_INT 4
2803: PPUSH
2804: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2808: LD_EXP 21
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2820: LD_EXP 20
2824: PPUSH
2825: LD_INT 4
2827: PPUSH
2828: LD_INT 0
2830: PPUSH
2831: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2835: LD_EXP 21
2839: PPUSH
2840: LD_INT 4
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2850: LD_EXP 20
2854: PPUSH
2855: LD_INT 1
2857: PPUSH
2858: LD_INT 100
2860: PPUSH
2861: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2865: LD_EXP 21
2869: PPUSH
2870: LD_INT 3
2872: PPUSH
2873: LD_INT 100
2875: PPUSH
2876: CALL_OW 291
// end ; end_of_file
2880: LD_VAR 0 1
2884: RET
// export function PrepareRussianCommander ; begin
2885: LD_INT 0
2887: PPUSH
// uc_side = 3 ;
2888: LD_ADDR_OWVAR 20
2892: PUSH
2893: LD_INT 3
2895: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2896: LD_ADDR_EXP 23
2900: PUSH
2901: LD_STRING Davidov
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL 12858 0 2
2911: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2924: LD_ADDR_EXP 35
2928: PUSH
2929: LD_EXP 35
2933: PUSH
2934: LD_EXP 23
2938: ADD
2939: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2940: LD_EXP 35
2944: PPUSH
2945: LD_INT 4
2947: PPUSH
2948: CALL_OW 336
// end ;
2952: LD_VAR 0 1
2956: RET
// export function PrepareEastBase ; var i , un ; begin
2957: LD_INT 0
2959: PPUSH
2960: PPUSH
2961: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2962: LD_INT 3
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: LD_INT 121
2970: PPUSH
2971: LD_EXP 37
2975: PPUSH
2976: LD_EXP 38
2980: PPUSH
2981: CALL_OW 12
2985: PPUSH
2986: LD_INT 1
2988: PPUSH
2989: LD_INT 3
2991: PPUSH
2992: CALL 13650 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2996: LD_INT 3
2998: PPUSH
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 121
3004: PPUSH
3005: LD_EXP 37
3009: PPUSH
3010: LD_EXP 38
3014: PPUSH
3015: CALL_OW 12
3019: PPUSH
3020: LD_INT 9
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL 13650 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3030: LD_INT 3
3032: PPUSH
3033: LD_INT 3
3035: PPUSH
3036: LD_INT 4
3038: PPUSH
3039: LD_EXP 37
3043: PPUSH
3044: LD_EXP 38
3048: PPUSH
3049: CALL_OW 12
3053: PPUSH
3054: LD_INT 2
3056: PPUSH
3057: LD_INT 6
3059: PPUSH
3060: CALL 13650 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3064: LD_INT 3
3066: PPUSH
3067: LD_INT 3
3069: PPUSH
3070: LD_INT 112
3072: PPUSH
3073: LD_EXP 37
3077: PPUSH
3078: LD_EXP 38
3082: PPUSH
3083: CALL_OW 12
3087: PPUSH
3088: LD_INT 3
3090: PPUSH
3091: LD_INT 6
3093: PPUSH
3094: CALL 13650 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: LD_INT 47
3106: PPUSH
3107: LD_EXP 37
3111: PPUSH
3112: LD_EXP 38
3116: PPUSH
3117: CALL_OW 12
3121: PPUSH
3122: LD_INT 4
3124: PPUSH
3125: LD_INT 6
3127: PPUSH
3128: CALL 13650 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3132: LD_INT 3
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_INT 129
3140: PPUSH
3141: LD_EXP 37
3145: PPUSH
3146: LD_EXP 38
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: LD_INT 4
3158: PPUSH
3159: LD_INT 6
3161: PPUSH
3162: CALL 13650 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3166: LD_INT 3
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 135
3174: PPUSH
3175: LD_EXP 37
3179: PPUSH
3180: LD_EXP 38
3184: PPUSH
3185: CALL_OW 12
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: LD_INT 6
3195: PPUSH
3196: CALL 13650 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 30
3217: PUSH
3218: LD_INT 32
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PPUSH
3229: CALL_OW 69
3233: PUSH
3234: FOR_IN
3235: IFFALSE 3275
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_VAR 0 2
3247: PPUSH
3248: LD_EXP 37
3252: PPUSH
3253: LD_EXP 38
3257: PPUSH
3258: CALL_OW 12
3262: PPUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 13650 0 6
3273: GO 3234
3275: POP
3276: POP
// for i = 1 to 5 do
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_INT 5
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3390
// begin uc_side = 3 ;
3293: LD_ADDR_OWVAR 20
3297: PUSH
3298: LD_INT 3
3300: ST_TO_ADDR
// uc_nation = 3 ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 3
3308: ST_TO_ADDR
// hc_gallery =  ;
3309: LD_ADDR_OWVAR 33
3313: PUSH
3314: LD_STRING 
3316: ST_TO_ADDR
// hc_name =  ;
3317: LD_ADDR_OWVAR 26
3321: PUSH
3322: LD_STRING 
3324: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3325: LD_INT 0
3327: PPUSH
3328: LD_INT 4
3330: PPUSH
3331: LD_EXP 37
3335: PPUSH
3336: LD_EXP 38
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: CALL_OW 380
// un = CreateHuman ;
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: CALL_OW 44
3359: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3372: LD_ADDR_EXP 35
3376: PUSH
3377: LD_EXP 35
3381: PUSH
3382: LD_VAR 0 3
3386: ADD
3387: ST_TO_ADDR
// end ;
3388: GO 3290
3390: POP
3391: POP
// end ;
3392: LD_VAR 0 1
3396: RET
// export function PrepareWestBase ; var i , un ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
3401: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3402: LD_INT 3
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 6
3410: PPUSH
3411: LD_EXP 37
3415: PPUSH
3416: LD_EXP 38
3420: PPUSH
3421: CALL_OW 12
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: LD_INT 3
3431: PPUSH
3432: CALL 13650 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3436: LD_INT 3
3438: PPUSH
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 91
3444: PPUSH
3445: LD_EXP 37
3449: PPUSH
3450: LD_EXP 38
3454: PPUSH
3455: CALL_OW 12
3459: PPUSH
3460: LD_INT 4
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: CALL 13650 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 21
3478: PPUSH
3479: LD_EXP 37
3483: PPUSH
3484: LD_EXP 38
3488: PPUSH
3489: CALL_OW 12
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: LD_INT 6
3499: PPUSH
3500: CALL 13650 0 6
// end ;
3504: LD_VAR 0 1
3508: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3509: LD_INT 0
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
// uc_side = 3 ;
3515: LD_ADDR_OWVAR 20
3519: PUSH
3520: LD_INT 3
3522: ST_TO_ADDR
// uc_nation = 3 ;
3523: LD_ADDR_OWVAR 21
3527: PUSH
3528: LD_INT 3
3530: ST_TO_ADDR
// for i = 1 to 5 do
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: DOUBLE
3537: LD_INT 1
3539: DEC
3540: ST_TO_ADDR
3541: LD_INT 5
3543: PUSH
3544: FOR_TO
3545: IFFALSE 3615
// begin hc_gallery =  ;
3547: LD_ADDR_OWVAR 33
3551: PUSH
3552: LD_STRING 
3554: ST_TO_ADDR
// hc_name =  ;
3555: LD_ADDR_OWVAR 26
3559: PUSH
3560: LD_STRING 
3562: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 9
3568: PPUSH
3569: LD_EXP 37
3573: PPUSH
3574: LD_EXP 38
3578: PPUSH
3579: CALL_OW 12
3583: PPUSH
3584: CALL_OW 380
// un = CreateHuman ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: CALL_OW 44
3597: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: LD_INT 0
3608: PPUSH
3609: CALL_OW 49
// end ;
3613: GO 3544
3615: POP
3616: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3617: LD_ADDR_VAR 0 2
3621: PUSH
3622: DOUBLE
3623: LD_INT 1
3625: DEC
3626: ST_TO_ADDR
3627: LD_INT 2
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: LD_OWVAR 67
3645: ARRAY
3646: PUSH
3647: FOR_TO
3648: IFFALSE 3718
// begin hc_gallery =  ;
3650: LD_ADDR_OWVAR 33
3654: PUSH
3655: LD_STRING 
3657: ST_TO_ADDR
// hc_name =  ;
3658: LD_ADDR_OWVAR 26
3662: PUSH
3663: LD_STRING 
3665: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3666: LD_INT 0
3668: PPUSH
3669: LD_INT 4
3671: PPUSH
3672: LD_EXP 37
3676: PPUSH
3677: LD_EXP 38
3681: PPUSH
3682: CALL_OW 12
3686: PPUSH
3687: CALL_OW 380
// un = CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 8
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL_OW 49
// end ;
3716: GO 3647
3718: POP
3719: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3720: LD_ADDR_VAR 0 2
3724: PUSH
3725: DOUBLE
3726: LD_INT 1
3728: DEC
3729: ST_TO_ADDR
3730: LD_INT 3
3732: PUSH
3733: LD_INT 4
3735: PUSH
3736: LD_INT 5
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3947
// begin vc_engine = 3 ;
3753: LD_ADDR_OWVAR 39
3757: PUSH
3758: LD_INT 3
3760: ST_TO_ADDR
// vc_control = 1 ;
3761: LD_ADDR_OWVAR 38
3765: PUSH
3766: LD_INT 1
3768: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3769: LD_ADDR_OWVAR 40
3773: PUSH
3774: LD_INT 42
3776: PUSH
3777: LD_INT 43
3779: PUSH
3780: LD_INT 44
3782: PUSH
3783: LD_INT 45
3785: PUSH
3786: LD_INT 46
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 5
3801: PPUSH
3802: CALL_OW 12
3806: ARRAY
3807: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 46
3815: EQUAL
3816: IFFALSE 3828
// vc_chassis = ru_heavy_tracked else
3818: LD_ADDR_OWVAR 37
3822: PUSH
3823: LD_INT 24
3825: ST_TO_ADDR
3826: GO 3855
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3828: LD_ADDR_OWVAR 37
3832: PUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 21
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: ST_TO_ADDR
// veh = CreateVehicle ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: CALL_OW 45
3864: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3865: LD_VAR 0 4
3869: PPUSH
3870: LD_INT 3
3872: PPUSH
3873: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3877: LD_VAR 0 4
3881: PPUSH
3882: LD_INT 5
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 49
// hc_gallery =  ;
3892: LD_ADDR_OWVAR 33
3896: PUSH
3897: LD_STRING 
3899: ST_TO_ADDR
// hc_name =  ;
3900: LD_ADDR_OWVAR 26
3904: PUSH
3905: LD_STRING 
3907: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 3
3913: PPUSH
3914: LD_INT 10
3916: PPUSH
3917: CALL_OW 380
// un = CreateHuman ;
3921: LD_ADDR_VAR 0 3
3925: PUSH
3926: CALL_OW 44
3930: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3931: LD_VAR 0 3
3935: PPUSH
3936: LD_VAR 0 4
3940: PPUSH
3941: CALL_OW 52
// end ;
3945: GO 3750
3947: POP
3948: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 3
3961: PUSH
3962: LD_INT 4
3964: PUSH
3965: LD_INT 5
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_OWVAR 67
3977: ARRAY
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4127
// begin vc_engine = 3 ;
3982: LD_ADDR_OWVAR 39
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// vc_control = 3 ;
3990: LD_ADDR_OWVAR 38
3994: PUSH
3995: LD_INT 3
3997: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3998: LD_ADDR_OWVAR 40
4002: PUSH
4003: LD_INT 42
4005: PUSH
4006: LD_INT 43
4008: PUSH
4009: LD_INT 44
4011: PUSH
4012: LD_INT 45
4014: PUSH
4015: LD_INT 46
4017: PUSH
4018: LD_INT 49
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: CALL_OW 12
4039: ARRAY
4040: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4041: LD_OWVAR 40
4045: PUSH
4046: LD_INT 46
4048: EQUAL
4049: IFFALSE 4061
// vc_chassis = ru_heavy_tracked else
4051: LD_ADDR_OWVAR 37
4055: PUSH
4056: LD_INT 24
4058: ST_TO_ADDR
4059: GO 4088
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4061: LD_ADDR_OWVAR 37
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 21
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 2
4081: PPUSH
4082: CALL_OW 12
4086: ARRAY
4087: ST_TO_ADDR
// veh = CreateVehicle ;
4088: LD_ADDR_VAR 0 4
4092: PUSH
4093: CALL_OW 45
4097: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4098: LD_VAR 0 4
4102: PPUSH
4103: LD_INT 3
4105: PPUSH
4106: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4110: LD_VAR 0 4
4114: PPUSH
4115: LD_INT 6
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 3979
4127: POP
4128: POP
// end ; end_of_file
4129: LD_VAR 0 1
4133: RET
// export function PrepareKurt ; begin
4134: LD_INT 0
4136: PPUSH
// uc_side = 8 ;
4137: LD_ADDR_OWVAR 20
4141: PUSH
4142: LD_INT 8
4144: ST_TO_ADDR
// uc_nation = 2 ;
4145: LD_ADDR_OWVAR 21
4149: PUSH
4150: LD_INT 2
4152: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4153: LD_ADDR_OWVAR 37
4157: PUSH
4158: LD_INT 13
4160: ST_TO_ADDR
// vc_engine = 1 ;
4161: LD_ADDR_OWVAR 39
4165: PUSH
4166: LD_INT 1
4168: ST_TO_ADDR
// vc_control = 1 ;
4169: LD_ADDR_OWVAR 38
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// vc_weapon = 24 ;
4177: LD_ADDR_OWVAR 40
4181: PUSH
4182: LD_INT 24
4184: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4185: LD_ADDR_EXP 26
4189: PUSH
4190: CALL_OW 45
4194: ST_TO_ADDR
// if kurtStatus > 0 then
4195: LD_EXP 27
4199: PUSH
4200: LD_INT 0
4202: GREATER
4203: IFFALSE 4252
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4205: LD_ADDR_EXP 24
4209: PUSH
4210: LD_STRING Kurt
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: CALL 12858 0 2
4220: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4221: LD_EXP 26
4225: PPUSH
4226: LD_INT 4
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4236: LD_EXP 24
4240: PPUSH
4241: LD_EXP 26
4245: PPUSH
4246: CALL_OW 52
// end else
4250: GO 4317
// begin hc_name =  ;
4252: LD_ADDR_OWVAR 26
4256: PUSH
4257: LD_STRING 
4259: ST_TO_ADDR
// hc_gallery =  ;
4260: LD_ADDR_OWVAR 33
4264: PUSH
4265: LD_STRING 
4267: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4268: LD_INT 1
4270: PPUSH
4271: LD_INT 10
4273: PPUSH
4274: CALL_OW 381
// otherKurt = CreateHuman ;
4278: LD_ADDR_EXP 25
4282: PUSH
4283: CALL_OW 44
4287: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4288: LD_EXP 26
4292: PPUSH
4293: LD_INT 4
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4303: LD_EXP 25
4307: PPUSH
4308: LD_EXP 26
4312: PPUSH
4313: CALL_OW 52
// end ; end ;
4317: LD_VAR 0 1
4321: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4322: LD_INT 0
4324: PPUSH
4325: PPUSH
4326: PPUSH
4327: PPUSH
// for i = 1 to 3 do
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 3
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4479
// begin uc_side = 1 ;
4344: LD_ADDR_OWVAR 20
4348: PUSH
4349: LD_INT 1
4351: ST_TO_ADDR
// uc_nation = 2 ;
4352: LD_ADDR_OWVAR 21
4356: PUSH
4357: LD_INT 2
4359: ST_TO_ADDR
// hc_gallery =  ;
4360: LD_ADDR_OWVAR 33
4364: PUSH
4365: LD_STRING 
4367: ST_TO_ADDR
// hc_name =  ;
4368: LD_ADDR_OWVAR 26
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4376: LD_EXP 27
4380: PUSH
4381: LD_INT 0
4383: EQUAL
4384: PUSH
4385: LD_EXP 27
4389: PUSH
4390: LD_INT 2
4392: EQUAL
4393: OR
4394: IFFALSE 4419
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 1
4401: PPUSH
4402: LD_INT 2
4404: PPUSH
4405: LD_INT 4
4407: PPUSH
4408: CALL_OW 12
4412: PPUSH
4413: CALL_OW 380
4417: GO 4440
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4419: LD_INT 0
4421: PPUSH
4422: LD_INT 1
4424: PPUSH
4425: LD_INT 6
4427: PPUSH
4428: LD_INT 8
4430: PPUSH
4431: CALL_OW 12
4435: PPUSH
4436: CALL_OW 380
// un = CreateHuman ;
4440: LD_ADDR_VAR 0 3
4444: PUSH
4445: CALL_OW 44
4449: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4450: LD_VAR 0 3
4454: PPUSH
4455: LD_INT 4
4457: PPUSH
4458: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4462: LD_VAR 0 3
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 49
// end ;
4477: GO 4341
4479: POP
4480: POP
// vc_chassis = 14 ;
4481: LD_ADDR_OWVAR 37
4485: PUSH
4486: LD_INT 14
4488: ST_TO_ADDR
// vc_engine = 3 ;
4489: LD_ADDR_OWVAR 39
4493: PUSH
4494: LD_INT 3
4496: ST_TO_ADDR
// vc_control = 1 ;
4497: LD_ADDR_OWVAR 38
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4505: LD_ADDR_OWVAR 40
4509: PUSH
4510: LD_INT 27
4512: PUSH
4513: LD_INT 26
4515: PUSH
4516: LD_INT 28
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 1
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: CALL_OW 12
4534: ARRAY
4535: ST_TO_ADDR
// veh = CreateVehicle ;
4536: LD_ADDR_VAR 0 4
4540: PUSH
4541: CALL_OW 45
4545: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4546: LD_VAR 0 4
4550: PPUSH
4551: LD_INT 4
4553: PPUSH
4554: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4558: LD_VAR 0 4
4562: PPUSH
4563: LD_INT 4
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4573: LD_EXP 27
4577: PUSH
4578: LD_INT 0
4580: EQUAL
4581: PUSH
4582: LD_EXP 27
4586: PUSH
4587: LD_INT 2
4589: EQUAL
4590: OR
4591: IFFALSE 4616
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4593: LD_INT 0
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: LD_INT 2
4601: PPUSH
4602: LD_INT 4
4604: PPUSH
4605: CALL_OW 12
4609: PPUSH
4610: CALL_OW 380
4614: GO 4637
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4616: LD_INT 0
4618: PPUSH
4619: LD_INT 3
4621: PPUSH
4622: LD_INT 6
4624: PPUSH
4625: LD_INT 8
4627: PPUSH
4628: CALL_OW 12
4632: PPUSH
4633: CALL_OW 380
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_VAR 0 4
4656: PPUSH
4657: CALL_OW 52
// vc_chassis = 14 ;
4661: LD_ADDR_OWVAR 37
4665: PUSH
4666: LD_INT 14
4668: ST_TO_ADDR
// vc_engine = 3 ;
4669: LD_ADDR_OWVAR 39
4673: PUSH
4674: LD_INT 3
4676: ST_TO_ADDR
// vc_control = 1 ;
4677: LD_ADDR_OWVAR 38
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4685: LD_ADDR_OWVAR 40
4689: PUSH
4690: LD_INT 27
4692: PUSH
4693: LD_INT 26
4695: PUSH
4696: LD_INT 28
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 3
4709: PPUSH
4710: CALL_OW 12
4714: ARRAY
4715: ST_TO_ADDR
// veh = CreateVehicle ;
4716: LD_ADDR_VAR 0 4
4720: PUSH
4721: CALL_OW 45
4725: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_INT 4
4733: PPUSH
4734: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4738: LD_VAR 0 4
4742: PPUSH
4743: LD_INT 4
4745: PPUSH
4746: LD_INT 0
4748: PPUSH
4749: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4753: LD_EXP 27
4757: PUSH
4758: LD_INT 0
4760: EQUAL
4761: PUSH
4762: LD_EXP 27
4766: PUSH
4767: LD_INT 2
4769: EQUAL
4770: OR
4771: IFFALSE 4796
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4773: LD_INT 0
4775: PPUSH
4776: LD_INT 4
4778: PPUSH
4779: LD_INT 2
4781: PPUSH
4782: LD_INT 4
4784: PPUSH
4785: CALL_OW 12
4789: PPUSH
4790: CALL_OW 380
4794: GO 4817
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4796: LD_INT 0
4798: PPUSH
4799: LD_INT 4
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 8
4807: PPUSH
4808: CALL_OW 12
4812: PPUSH
4813: CALL_OW 380
// un = CreateHuman ;
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: CALL_OW 44
4826: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4839: LD_VAR 0 3
4843: PPUSH
4844: LD_VAR 0 4
4848: PPUSH
4849: CALL_OW 52
// vc_chassis = 14 ;
4853: LD_ADDR_OWVAR 37
4857: PUSH
4858: LD_INT 14
4860: ST_TO_ADDR
// vc_engine = 3 ;
4861: LD_ADDR_OWVAR 39
4865: PUSH
4866: LD_INT 3
4868: ST_TO_ADDR
// vc_control = 1 ;
4869: LD_ADDR_OWVAR 38
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4877: LD_ADDR_OWVAR 40
4881: PUSH
4882: LD_INT 27
4884: PUSH
4885: LD_INT 26
4887: PUSH
4888: LD_INT 28
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 1
4898: PPUSH
4899: LD_INT 3
4901: PPUSH
4902: CALL_OW 12
4906: ARRAY
4907: ST_TO_ADDR
// veh = CreateVehicle ;
4908: LD_ADDR_VAR 0 4
4912: PUSH
4913: CALL_OW 45
4917: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4918: LD_VAR 0 4
4922: PPUSH
4923: LD_INT 4
4925: PPUSH
4926: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4930: LD_VAR 0 4
4934: PPUSH
4935: LD_INT 4
4937: PPUSH
4938: LD_INT 0
4940: PPUSH
4941: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4945: LD_EXP 27
4949: PUSH
4950: LD_INT 0
4952: EQUAL
4953: PUSH
4954: LD_EXP 27
4958: PUSH
4959: LD_INT 2
4961: EQUAL
4962: OR
4963: IFFALSE 4988
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4965: LD_INT 0
4967: PPUSH
4968: LD_INT 2
4970: PPUSH
4971: LD_INT 2
4973: PPUSH
4974: LD_INT 4
4976: PPUSH
4977: CALL_OW 12
4981: PPUSH
4982: CALL_OW 380
4986: GO 5009
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4988: LD_INT 0
4990: PPUSH
4991: LD_INT 2
4993: PPUSH
4994: LD_INT 6
4996: PPUSH
4997: LD_INT 8
4999: PPUSH
5000: CALL_OW 12
5004: PPUSH
5005: CALL_OW 380
// un = CreateHuman ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5019: LD_VAR 0 3
5023: PPUSH
5024: LD_INT 4
5026: PPUSH
5027: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_VAR 0 4
5040: PPUSH
5041: CALL_OW 52
// end ;
5045: LD_VAR 0 1
5049: RET
// export function PrepareAttackLegion ; var i , un ; begin
5050: LD_INT 0
5052: PPUSH
5053: PPUSH
5054: PPUSH
// for i = 1 to 4 do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_INT 4
5067: PUSH
5068: FOR_TO
5069: IFFALSE 5179
// begin uc_side = 8 ;
5071: LD_ADDR_OWVAR 20
5075: PUSH
5076: LD_INT 8
5078: ST_TO_ADDR
// uc_nation = 2 ;
5079: LD_ADDR_OWVAR 21
5083: PUSH
5084: LD_INT 2
5086: ST_TO_ADDR
// hc_gallery =  ;
5087: LD_ADDR_OWVAR 33
5091: PUSH
5092: LD_STRING 
5094: ST_TO_ADDR
// hc_name =  ;
5095: LD_ADDR_OWVAR 26
5099: PUSH
5100: LD_STRING 
5102: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5103: LD_INT 0
5105: PPUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 8
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: LD_INT 1
5118: PPUSH
5119: LD_INT 2
5121: PPUSH
5122: CALL_OW 12
5126: ARRAY
5127: PPUSH
5128: LD_INT 6
5130: PPUSH
5131: LD_INT 8
5133: PPUSH
5134: CALL_OW 12
5138: PPUSH
5139: CALL_OW 380
// un = CreateHuman ;
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: CALL_OW 44
5152: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5153: LD_VAR 0 3
5157: PPUSH
5158: LD_INT 19
5160: PPUSH
5161: LD_INT 0
5163: PPUSH
5164: CALL_OW 49
// ComCrawl ( un ) ;
5168: LD_VAR 0 3
5172: PPUSH
5173: CALL_OW 137
// end ;
5177: GO 5068
5179: POP
5180: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5181: LD_INT 1
5183: PPUSH
5184: LD_INT 8
5186: PPUSH
5187: LD_INT 2
5189: PPUSH
5190: LD_INT 1
5192: PPUSH
5193: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5197: LD_INT 20
5199: PPUSH
5200: LD_INT 3
5202: PPUSH
5203: CALL 15785 0 2
// end ; end_of_file
5207: LD_VAR 0 1
5211: RET
// every 1 do var i ;
5212: GO 5214
5214: DISABLE
5215: LD_INT 0
5217: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5218: LD_INT 10
5220: PPUSH
5221: LD_INT 122
5223: PPUSH
5224: LD_INT 145
5226: PPUSH
5227: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5231: LD_INT 137
5233: PPUSH
5234: LD_INT 84
5236: PPUSH
5237: LD_INT 61
5239: PPUSH
5240: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5244: LD_EXP 1
5248: PPUSH
5249: CALL_OW 310
5253: PPUSH
5254: CALL_OW 87
// InGameOn ;
5258: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5262: LD_INT 22
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PPUSH
5272: CALL_OW 69
5276: PPUSH
5277: LD_INT 130
5279: PPUSH
5280: LD_INT 103
5282: PPUSH
5283: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 114
5294: PPUSH
5295: LD_INT 102
5297: PPUSH
5298: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5302: LD_EXP 1
5306: PPUSH
5307: LD_STRING D1-JMM-1
5309: PPUSH
5310: CALL_OW 88
// if IsOk ( Donaldson ) then
5314: LD_EXP 3
5318: PPUSH
5319: CALL_OW 302
5323: IFFALSE 5361
// begin Say ( Donaldson , D1-Don-1 ) ;
5325: LD_EXP 3
5329: PPUSH
5330: LD_STRING D1-Don-1
5332: PPUSH
5333: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5337: LD_EXP 1
5341: PPUSH
5342: LD_STRING D1-JMM-2
5344: PPUSH
5345: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5349: LD_EXP 3
5353: PPUSH
5354: LD_STRING D1-Don-2
5356: PPUSH
5357: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5361: LD_INT 22
5363: PUSH
5364: LD_INT 1
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PPUSH
5371: CALL_OW 69
5375: PPUSH
5376: LD_INT 110
5378: PPUSH
5379: LD_INT 101
5381: PPUSH
5382: CALL_OW 171
// end ;
5386: PPOPN 1
5388: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5389: LD_INT 1
5391: PPUSH
5392: LD_INT 102
5394: PPUSH
5395: LD_INT 94
5397: PPUSH
5398: CALL_OW 293
5402: IFFALSE 5593
5404: GO 5406
5406: DISABLE
5407: LD_INT 0
5409: PPUSH
// begin CenterOnXY ( 95 , 84 ) ;
5410: LD_INT 95
5412: PPUSH
5413: LD_INT 84
5415: PPUSH
5416: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5420: LD_INT 22
5422: PUSH
5423: LD_INT 1
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: LD_INT 26
5432: PUSH
5433: LD_INT 1
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 2
5442: PUSH
5443: LD_INT 25
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 25
5455: PUSH
5456: LD_INT 2
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: LD_INT 25
5465: PUSH
5466: LD_INT 3
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 25
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 25
5485: PUSH
5486: LD_INT 5
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 25
5495: PUSH
5496: LD_INT 8
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: LIST
5516: PPUSH
5517: CALL_OW 69
5521: PPUSH
5522: LD_STRING D1-Sol1-2
5524: PPUSH
5525: LD_STRING 
5527: PPUSH
5528: CALL 12966 0 3
// Say ( JMM , D1-JMM-3 ) ;
5532: LD_EXP 1
5536: PPUSH
5537: LD_STRING D1-JMM-3
5539: PPUSH
5540: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5544: LD_STRING M1
5546: PPUSH
5547: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5551: LD_ADDR_VAR 0 1
5555: PUSH
5556: LD_INT 22
5558: PUSH
5559: LD_INT 1
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PPUSH
5566: CALL_OW 69
5570: PUSH
5571: FOR_IN
5572: IFFALSE 5591
// ComMoveXY ( i , 95 , 84 ) ;
5574: LD_VAR 0 1
5578: PPUSH
5579: LD_INT 95
5581: PPUSH
5582: LD_INT 84
5584: PPUSH
5585: CALL_OW 111
5589: GO 5571
5591: POP
5592: POP
// end ;
5593: PPOPN 1
5595: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5596: GO 5598
5598: DISABLE
5599: LD_INT 0
5601: PPUSH
5602: PPUSH
5603: PPUSH
5604: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5605: LD_ADDR_VAR 0 2
5609: PUSH
5610: LD_INT 8
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 3
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 9
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 70
5641: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5642: LD_ADDR_VAR 0 3
5646: PUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 1
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: EMPTY
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: ST_TO_ADDR
// enable ;
5665: ENABLE
// for i in your_units do
5666: LD_ADDR_VAR 0 1
5670: PUSH
5671: LD_VAR 0 3
5675: PUSH
5676: FOR_IN
5677: IFFALSE 6325
// begin if See ( 3 , i ) then
5679: LD_INT 3
5681: PPUSH
5682: LD_VAR 0 1
5686: PPUSH
5687: CALL_OW 292
5691: IFFALSE 6323
// begin disable ;
5693: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5694: LD_VAR 0 2
5698: PPUSH
5699: LD_INT 96
5701: PPUSH
5702: LD_INT 85
5704: PPUSH
5705: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5709: LD_VAR 0 2
5713: PPUSH
5714: LD_INT 96
5716: PPUSH
5717: LD_INT 85
5719: PPUSH
5720: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_INT 96
5731: PPUSH
5732: LD_INT 85
5734: PPUSH
5735: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: LD_INT 96
5746: PPUSH
5747: LD_INT 85
5749: PPUSH
5750: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5754: LD_VAR 0 2
5758: PPUSH
5759: LD_INT 96
5761: PPUSH
5762: LD_INT 85
5764: PPUSH
5765: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5769: LD_VAR 0 2
5773: PPUSH
5774: LD_INT 96
5776: PPUSH
5777: LD_INT 85
5779: PPUSH
5780: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5784: LD_EXP 1
5788: PPUSH
5789: LD_STRING D1a-JMM-1
5791: PPUSH
5792: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5796: LD_EXP 3
5800: PPUSH
5801: LD_STRING D1a-Don-1
5803: PPUSH
5804: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5808: LD_ADDR_VAR 0 1
5812: PUSH
5813: LD_INT 22
5815: PUSH
5816: LD_INT 1
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: PUSH
5828: FOR_IN
5829: IFFALSE 5848
// ComMoveXY ( i , 109 , 102 ) ;
5831: LD_VAR 0 1
5835: PPUSH
5836: LD_INT 109
5838: PPUSH
5839: LD_INT 102
5841: PPUSH
5842: CALL_OW 111
5846: GO 5828
5848: POP
5849: POP
// Say ( JMM , D1a-JMM-2 ) ;
5850: LD_EXP 1
5854: PPUSH
5855: LD_STRING D1a-JMM-2
5857: PPUSH
5858: CALL_OW 88
// wait ( 0 0$10 ) ;
5862: LD_INT 350
5864: PPUSH
5865: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5869: LD_EXP 1
5873: PPUSH
5874: CALL_OW 310
5878: PPUSH
5879: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5883: LD_EXP 3
5887: PPUSH
5888: LD_STRING D1b-Don-1
5890: PPUSH
5891: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5895: LD_EXP 1
5899: PPUSH
5900: LD_STRING D1b-JMM-1
5902: PPUSH
5903: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
5907: LD_INT 22
5909: PUSH
5910: LD_INT 1
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 26
5919: PUSH
5920: LD_INT 1
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 2
5929: PUSH
5930: LD_INT 25
5932: PUSH
5933: LD_INT 1
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: LD_INT 25
5942: PUSH
5943: LD_INT 2
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 25
5952: PUSH
5953: LD_INT 3
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 25
5962: PUSH
5963: LD_INT 4
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 25
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: PUSH
5980: LD_INT 25
5982: PUSH
5983: LD_INT 8
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 69
6008: PPUSH
6009: LD_STRING D1b-Sol1-1
6011: PPUSH
6012: LD_STRING 
6014: PPUSH
6015: CALL 12966 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6019: LD_EXP 3
6023: PPUSH
6024: LD_STRING D1b-Don-2
6026: PPUSH
6027: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6031: LD_EXP 1
6035: PPUSH
6036: LD_STRING D1b-JMM-2
6038: PPUSH
6039: CALL_OW 88
// dec = ShowQuery1 ;
6043: LD_ADDR_VAR 0 4
6047: PUSH
6048: CALL 13502 0 0
6052: ST_TO_ADDR
// if dec = 1 then
6053: LD_VAR 0 4
6057: PUSH
6058: LD_INT 1
6060: EQUAL
6061: IFFALSE 6167
// begin Say ( JMM , D2-JMM-1 ) ;
6063: LD_EXP 1
6067: PPUSH
6068: LD_STRING D2-JMM-1
6070: PPUSH
6071: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6075: LD_EXP 22
6079: PPUSH
6080: LD_STRING D2-Pow-1
6082: PPUSH
6083: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6087: LD_EXP 1
6091: PPUSH
6092: LD_STRING D2a-JMM-1
6094: PPUSH
6095: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6099: LD_EXP 22
6103: PPUSH
6104: LD_STRING D2a-Pow-1
6106: PPUSH
6107: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6111: LD_EXP 1
6115: PPUSH
6116: LD_STRING D2a-JMM-2
6118: PPUSH
6119: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6123: LD_EXP 22
6127: PPUSH
6128: LD_STRING D2a-Pow-2
6130: PPUSH
6131: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6135: LD_EXP 1
6139: PPUSH
6140: LD_STRING D2a-JMM-3
6142: PPUSH
6143: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6147: LD_EXP 22
6151: PPUSH
6152: LD_STRING D2a-Pow-3
6154: PPUSH
6155: CALL_OW 94
// secondPass = 2 ;
6159: LD_ADDR_EXP 28
6163: PUSH
6164: LD_INT 2
6166: ST_TO_ADDR
// end ; if dec = 2 then
6167: LD_VAR 0 4
6171: PUSH
6172: LD_INT 2
6174: EQUAL
6175: IFFALSE 6269
// begin Say ( JMM , D2-JMM-1 ) ;
6177: LD_EXP 1
6181: PPUSH
6182: LD_STRING D2-JMM-1
6184: PPUSH
6185: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6189: LD_EXP 22
6193: PPUSH
6194: LD_STRING D2-Pow-1
6196: PPUSH
6197: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6201: LD_EXP 1
6205: PPUSH
6206: LD_STRING D2b-JMM-1
6208: PPUSH
6209: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6213: LD_EXP 22
6217: PPUSH
6218: LD_STRING D2b-Pow-1
6220: PPUSH
6221: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6225: LD_EXP 1
6229: PPUSH
6230: LD_STRING D2c-JMM-1
6232: PPUSH
6233: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6237: LD_EXP 22
6241: PPUSH
6242: LD_STRING D2c-Pow-1
6244: PPUSH
6245: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6249: LD_EXP 1
6253: PPUSH
6254: LD_STRING D2c-JMM-2
6256: PPUSH
6257: CALL_OW 88
// secondPass = 2 ;
6261: LD_ADDR_EXP 28
6265: PUSH
6266: LD_INT 2
6268: ST_TO_ADDR
// end ; if dec = 3 then
6269: LD_VAR 0 4
6273: PUSH
6274: LD_INT 3
6276: EQUAL
6277: IFFALSE 6287
// secondPass = 1 ;
6279: LD_ADDR_EXP 28
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// InGameOff ;
6287: CALL_OW 9
// ruAI = 1 ;
6291: LD_ADDR_EXP 42
6295: PUSH
6296: LD_INT 1
6298: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6299: LD_INT 1
6301: PPUSH
6302: LD_INT 3
6304: PPUSH
6305: LD_INT 2
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 80
// SaveForQuickRestart ;
6315: CALL_OW 22
// exit ;
6319: POP
6320: POP
6321: GO 6327
// end ; end ;
6323: GO 5676
6325: POP
6326: POP
// end ;
6327: PPOPN 4
6329: END
// every 1 1$0 trigger secondPass = 2 do
6330: LD_EXP 28
6334: PUSH
6335: LD_INT 2
6337: EQUAL
6338: IFFALSE 6465
6340: GO 6342
6342: DISABLE
// begin PowellSupport1 ;
6343: CALL 1771 0 0
// DialogueOn ;
6347: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6351: LD_EXP 1
6355: PPUSH
6356: LD_STRING DC1-JMM-1
6358: PPUSH
6359: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6363: LD_EXP 22
6367: PPUSH
6368: LD_STRING DC1-Pow-1
6370: PPUSH
6371: CALL_OW 94
// DialogueOff ;
6375: CALL_OW 7
// wait ( 3 3$0 ) ;
6379: LD_INT 6300
6381: PPUSH
6382: CALL_OW 67
// PowellSupport2 ;
6386: CALL 2230 0 0
// DialogueOn ;
6390: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING DC2-JMM-1
6401: PPUSH
6402: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6406: LD_EXP 22
6410: PPUSH
6411: LD_STRING DC2-Pow-1
6413: PPUSH
6414: CALL_OW 94
// DialogueOff ;
6418: CALL_OW 7
// wait ( 6 6$0 ) ;
6422: LD_INT 12600
6424: PPUSH
6425: CALL_OW 67
// PowellSupport3 ;
6429: CALL 2707 0 0
// DialogueOn ;
6433: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6437: LD_EXP 22
6441: PPUSH
6442: LD_STRING DC3-Pow-1
6444: PPUSH
6445: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6449: LD_EXP 1
6453: PPUSH
6454: LD_STRING DC3-JMM-1
6456: PPUSH
6457: CALL_OW 88
// DialogueOff ;
6461: CALL_OW 7
// end ;
6465: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6466: LD_EXP 28
6470: PUSH
6471: LD_INT 2
6473: EQUAL
6474: PUSH
6475: LD_INT 22
6477: PUSH
6478: LD_INT 1
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: LD_INT 30
6490: PUSH
6491: LD_INT 0
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 30
6500: PUSH
6501: LD_INT 1
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PPUSH
6517: CALL_OW 69
6521: PUSH
6522: LD_INT 0
6524: GREATER
6525: AND
6526: IFFALSE 9894
6528: GO 6530
6530: DISABLE
6531: LD_INT 0
6533: PPUSH
6534: PPUSH
6535: PPUSH
6536: PPUSH
6537: PPUSH
6538: PPUSH
6539: PPUSH
6540: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6541: LD_ADDR_VAR 0 4
6545: PUSH
6546: LD_INT 22
6548: PUSH
6549: LD_INT 1
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 21
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 2
6568: PUSH
6569: LD_INT 30
6571: PUSH
6572: LD_INT 0
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 30
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: PPUSH
6599: CALL_OW 69
6603: ST_TO_ADDR
// for i in tmp do
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_VAR 0 4
6613: PUSH
6614: FOR_IN
6615: IFFALSE 6648
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6617: LD_ADDR_VAR 0 6
6621: PUSH
6622: LD_VAR 0 6
6626: PUSH
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 274
6636: PPUSH
6637: LD_INT 1
6639: PPUSH
6640: CALL_OW 275
6644: PLUS
6645: ST_TO_ADDR
6646: GO 6614
6648: POP
6649: POP
// for i in tmp do
6650: LD_ADDR_VAR 0 1
6654: PUSH
6655: LD_VAR 0 4
6659: PUSH
6660: FOR_IN
6661: IFFALSE 6694
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6663: LD_ADDR_VAR 0 7
6667: PUSH
6668: LD_VAR 0 7
6672: PUSH
6673: LD_VAR 0 1
6677: PPUSH
6678: CALL_OW 274
6682: PPUSH
6683: LD_INT 2
6685: PPUSH
6686: CALL_OW 275
6690: PLUS
6691: ST_TO_ADDR
6692: GO 6660
6694: POP
6695: POP
// for i in tmp do
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_VAR 0 4
6705: PUSH
6706: FOR_IN
6707: IFFALSE 6740
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6709: LD_ADDR_VAR 0 8
6713: PUSH
6714: LD_VAR 0 8
6718: PUSH
6719: LD_VAR 0 1
6723: PPUSH
6724: CALL_OW 274
6728: PPUSH
6729: LD_INT 3
6731: PPUSH
6732: CALL_OW 275
6736: PLUS
6737: ST_TO_ADDR
6738: GO 6706
6740: POP
6741: POP
// PrepareKurt ;
6742: CALL 4134 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6746: LD_EXP 26
6750: PPUSH
6751: LD_INT 144
6753: PPUSH
6754: LD_INT 111
6756: PPUSH
6757: CALL_OW 111
// wait ( 0 0$2 ) ;
6761: LD_INT 70
6763: PPUSH
6764: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6768: LD_INT 8
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: CALL_OW 343
// if kurtStatus > 0 then
6778: LD_EXP 27
6782: PUSH
6783: LD_INT 0
6785: GREATER
6786: IFFALSE 8349
// begin ComExitVehicle ( Kurt ) ;
6788: LD_EXP 24
6792: PPUSH
6793: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6797: LD_EXP 24
6801: PPUSH
6802: CALL_OW 87
// wait ( 0 0$1 ) ;
6806: LD_INT 35
6808: PPUSH
6809: CALL_OW 67
// DialogueOn ;
6813: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6817: LD_INT 22
6819: PUSH
6820: LD_INT 1
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 26
6829: PUSH
6830: LD_INT 1
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 2
6839: PUSH
6840: LD_INT 25
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 25
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 25
6862: PUSH
6863: LD_INT 3
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 25
6872: PUSH
6873: LD_INT 4
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 25
6882: PUSH
6883: LD_INT 5
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 25
6892: PUSH
6893: LD_INT 8
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: LIST
6913: PPUSH
6914: CALL_OW 69
6918: PPUSH
6919: LD_STRING D3-Sol1-1
6921: PPUSH
6922: LD_STRING 
6924: PPUSH
6925: CALL 12966 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6929: LD_EXP 24
6933: PPUSH
6934: LD_STRING D3-Kurt-1
6936: PPUSH
6937: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6941: LD_EXP 1
6945: PPUSH
6946: LD_STRING D3-JMM-1
6948: PPUSH
6949: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6953: LD_EXP 24
6957: PPUSH
6958: LD_STRING D3-Kurt-2
6960: PPUSH
6961: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6965: LD_EXP 1
6969: PPUSH
6970: LD_STRING D3-JMM-2
6972: PPUSH
6973: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6977: LD_EXP 24
6981: PPUSH
6982: LD_STRING D3-Kurt-4
6984: PPUSH
6985: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6989: LD_EXP 1
6993: PPUSH
6994: LD_STRING D3-JMM-4
6996: PPUSH
6997: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7001: LD_EXP 24
7005: PPUSH
7006: LD_STRING D3-Kurt-5
7008: PPUSH
7009: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7013: LD_EXP 24
7017: PPUSH
7018: LD_STRING D3-Kurt-5a
7020: PPUSH
7021: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7025: LD_VAR 0 6
7029: PUSH
7030: LD_INT 60
7032: GREATEREQUAL
7033: PUSH
7034: LD_VAR 0 8
7038: PUSH
7039: LD_INT 60
7041: GREATEREQUAL
7042: AND
7043: IFFALSE 7078
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7045: LD_ADDR_VAR 0 2
7049: PUSH
7050: LD_STRING Q2K
7052: PPUSH
7053: LD_INT 1
7055: PUSH
7056: LD_INT 2
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 4
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 98
7075: ST_TO_ADDR
7076: GO 7101
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_STRING Q2K
7085: PPUSH
7086: LD_INT 3
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 98
7100: ST_TO_ADDR
// if dec1 = 1 then
7101: LD_VAR 0 2
7105: PUSH
7106: LD_INT 1
7108: EQUAL
7109: IFFALSE 7143
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7111: LD_EXP 1
7115: PPUSH
7116: LD_STRING D3Ka-JMM-1
7118: PPUSH
7119: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7123: LD_EXP 24
7127: PPUSH
7128: LD_STRING D3Ka-Kurt-1
7130: PPUSH
7131: CALL_OW 88
// warWithLegion = 1 ;
7135: LD_ADDR_EXP 31
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// end ; if dec1 = 2 then
7143: LD_VAR 0 2
7147: PUSH
7148: LD_INT 2
7150: EQUAL
7151: IFFALSE 7377
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7153: LD_EXP 1
7157: PPUSH
7158: LD_STRING D3Kb-JMM-1
7160: PPUSH
7161: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7165: LD_EXP 24
7169: PPUSH
7170: LD_STRING D3Kb-Kurt-1
7172: PPUSH
7173: CALL_OW 88
// for i in tmp do
7177: LD_ADDR_VAR 0 1
7181: PUSH
7182: LD_VAR 0 4
7186: PUSH
7187: FOR_IN
7188: IFFALSE 7275
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7190: LD_ADDR_VAR 0 5
7194: PUSH
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL_OW 274
7204: PPUSH
7205: LD_INT 1
7207: PPUSH
7208: CALL_OW 275
7212: ST_TO_ADDR
// if tmp2 >= 60 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 60
7220: GREATEREQUAL
7221: IFFALSE 7253
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7223: LD_VAR 0 1
7227: PPUSH
7228: CALL_OW 274
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: LD_VAR 0 5
7240: PUSH
7241: LD_INT 60
7243: MINUS
7244: PPUSH
7245: CALL_OW 277
// break ;
7249: GO 7275
// end else
7251: GO 7273
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 274
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: LD_INT 0
7268: PPUSH
7269: CALL_OW 277
// end ; end ;
7273: GO 7187
7275: POP
7276: POP
// for i in tmp do
7277: LD_ADDR_VAR 0 1
7281: PUSH
7282: LD_VAR 0 4
7286: PUSH
7287: FOR_IN
7288: IFFALSE 7375
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 1
7299: PPUSH
7300: CALL_OW 274
7304: PPUSH
7305: LD_INT 3
7307: PPUSH
7308: CALL_OW 275
7312: ST_TO_ADDR
// if tmp2 >= 60 then
7313: LD_VAR 0 5
7317: PUSH
7318: LD_INT 60
7320: GREATEREQUAL
7321: IFFALSE 7353
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7323: LD_VAR 0 1
7327: PPUSH
7328: CALL_OW 274
7332: PPUSH
7333: LD_INT 3
7335: PPUSH
7336: LD_VAR 0 5
7340: PUSH
7341: LD_INT 60
7343: MINUS
7344: PPUSH
7345: CALL_OW 277
// break ;
7349: GO 7375
// end else
7351: GO 7373
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 274
7362: PPUSH
7363: LD_INT 3
7365: PPUSH
7366: LD_INT 0
7368: PPUSH
7369: CALL_OW 277
// end ; end ;
7373: GO 7287
7375: POP
7376: POP
// end ; if dec1 = 3 then
7377: LD_VAR 0 2
7381: PUSH
7382: LD_INT 3
7384: EQUAL
7385: IFFALSE 7620
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7387: LD_EXP 1
7391: PPUSH
7392: LD_STRING D3Kc1-JMM-1
7394: PPUSH
7395: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7399: LD_EXP 24
7403: PPUSH
7404: LD_STRING D3Kc1-Kurt-1
7406: PPUSH
7407: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7411: LD_EXP 1
7415: PPUSH
7416: LD_STRING D3Kc1-JMM-2
7418: PPUSH
7419: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7423: LD_EXP 24
7427: PPUSH
7428: LD_STRING D3Kc1-Kurt-2
7430: PPUSH
7431: CALL_OW 88
// askSiberite = 1 ;
7435: LD_ADDR_EXP 33
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7443: LD_ADDR_VAR 0 2
7447: PUSH
7448: LD_STRING Q2b
7450: PPUSH
7451: LD_INT 1
7453: PUSH
7454: LD_INT 2
7456: PUSH
7457: LD_INT 3
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 98
7469: ST_TO_ADDR
// if dec2 = 1 then
7470: LD_VAR 0 3
7474: PUSH
7475: LD_INT 1
7477: EQUAL
7478: IFFALSE 7512
// begin Say ( JMM , D4a-JMM-1 ) ;
7480: LD_EXP 1
7484: PPUSH
7485: LD_STRING D4a-JMM-1
7487: PPUSH
7488: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7492: LD_EXP 24
7496: PPUSH
7497: LD_STRING D4b-Kurt-1
7499: PPUSH
7500: CALL_OW 88
// warWithLegion = 1 ;
7504: LD_ADDR_EXP 31
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// end ; if dec2 = 2 then
7512: LD_VAR 0 3
7516: PUSH
7517: LD_INT 2
7519: EQUAL
7520: IFFALSE 7554
// begin Say ( JMM , D4b-JMM-1 ) ;
7522: LD_EXP 1
7526: PPUSH
7527: LD_STRING D4b-JMM-1
7529: PPUSH
7530: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7534: LD_EXP 24
7538: PPUSH
7539: LD_STRING D4b-Kurt-1
7541: PPUSH
7542: CALL_OW 88
// warWithLegion = 1 ;
7546: LD_ADDR_EXP 31
7550: PUSH
7551: LD_INT 1
7553: ST_TO_ADDR
// end ; if dec2 = 3 then
7554: LD_VAR 0 3
7558: PUSH
7559: LD_INT 3
7561: EQUAL
7562: IFFALSE 7620
// begin Say ( JMM , D4c-JMM-1 ) ;
7564: LD_EXP 1
7568: PPUSH
7569: LD_STRING D4c-JMM-1
7571: PPUSH
7572: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7576: LD_EXP 24
7580: PPUSH
7581: LD_STRING D4c-Kurt-1
7583: PPUSH
7584: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7588: LD_EXP 1
7592: PPUSH
7593: LD_STRING D4c-JMM-2
7595: PPUSH
7596: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7600: LD_EXP 24
7604: PPUSH
7605: LD_STRING D4c-Kurt-2
7607: PPUSH
7608: CALL_OW 88
// fakeInfo = 1 ;
7612: LD_ADDR_EXP 32
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7620: LD_VAR 0 2
7624: PUSH
7625: LD_INT 4
7627: EQUAL
7628: IFFALSE 8285
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7630: LD_EXP 1
7634: PPUSH
7635: LD_STRING D3Kd-JMM-1
7637: PPUSH
7638: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7642: LD_VAR 0 6
7646: PUSH
7647: LD_INT 120
7649: GREATEREQUAL
7650: PUSH
7651: LD_VAR 0 8
7655: PUSH
7656: LD_INT 120
7658: GREATEREQUAL
7659: AND
7660: IFFALSE 7695
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7662: LD_ADDR_VAR 0 3
7666: PUSH
7667: LD_STRING Q2aK
7669: PPUSH
7670: LD_INT 1
7672: PUSH
7673: LD_INT 2
7675: PUSH
7676: LD_INT 3
7678: PUSH
7679: LD_INT 4
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 98
7692: ST_TO_ADDR
7693: GO 7718
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7695: LD_ADDR_VAR 0 3
7699: PUSH
7700: LD_STRING Q2K
7702: PPUSH
7703: LD_INT 1
7705: PUSH
7706: LD_INT 4
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 98
7717: ST_TO_ADDR
// if dec2 = 1 then
7718: LD_VAR 0 3
7722: PUSH
7723: LD_INT 1
7725: EQUAL
7726: IFFALSE 7760
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7728: LD_EXP 1
7732: PPUSH
7733: LD_STRING D5Ka-JMM-1
7735: PPUSH
7736: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7740: LD_EXP 24
7744: PPUSH
7745: LD_STRING D5Ka-Kurt-1
7747: PPUSH
7748: CALL_OW 88
// warWithLegion = 1 ;
7752: LD_ADDR_EXP 31
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// end ; if dec2 = 2 then
7760: LD_VAR 0 3
7764: PUSH
7765: LD_INT 2
7767: EQUAL
7768: IFFALSE 7794
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D3Kb-JMM-1
7777: PPUSH
7778: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7782: LD_EXP 24
7786: PPUSH
7787: LD_STRING D3Kb-Kurt-1
7789: PPUSH
7790: CALL_OW 88
// end ; if dec2 = 3 then
7794: LD_VAR 0 3
7798: PUSH
7799: LD_INT 3
7801: EQUAL
7802: IFFALSE 8032
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7804: LD_EXP 1
7808: PPUSH
7809: LD_STRING D3Ke-JMM-1
7811: PPUSH
7812: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7816: LD_EXP 24
7820: PPUSH
7821: LD_STRING D3Ke-Kurt-1
7823: PPUSH
7824: CALL_OW 88
// PrepareLegionForPlayer ;
7828: CALL 4322 0 0
// for i in tmp do
7832: LD_ADDR_VAR 0 1
7836: PUSH
7837: LD_VAR 0 4
7841: PUSH
7842: FOR_IN
7843: IFFALSE 7930
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7845: LD_ADDR_VAR 0 5
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 274
7859: PPUSH
7860: LD_INT 1
7862: PPUSH
7863: CALL_OW 275
7867: ST_TO_ADDR
// if tmp2 >= 120 then
7868: LD_VAR 0 5
7872: PUSH
7873: LD_INT 120
7875: GREATEREQUAL
7876: IFFALSE 7908
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7878: LD_VAR 0 1
7882: PPUSH
7883: CALL_OW 274
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: LD_VAR 0 5
7895: PUSH
7896: LD_INT 120
7898: MINUS
7899: PPUSH
7900: CALL_OW 277
// break ;
7904: GO 7930
// end else
7906: GO 7928
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7908: LD_VAR 0 1
7912: PPUSH
7913: CALL_OW 274
7917: PPUSH
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 0
7923: PPUSH
7924: CALL_OW 277
// end ; end ;
7928: GO 7842
7930: POP
7931: POP
// for i in tmp do
7932: LD_ADDR_VAR 0 1
7936: PUSH
7937: LD_VAR 0 4
7941: PUSH
7942: FOR_IN
7943: IFFALSE 8030
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7945: LD_ADDR_VAR 0 5
7949: PUSH
7950: LD_VAR 0 1
7954: PPUSH
7955: CALL_OW 274
7959: PPUSH
7960: LD_INT 3
7962: PPUSH
7963: CALL_OW 275
7967: ST_TO_ADDR
// if tmp2 >= 120 then
7968: LD_VAR 0 5
7972: PUSH
7973: LD_INT 120
7975: GREATEREQUAL
7976: IFFALSE 8008
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 274
7987: PPUSH
7988: LD_INT 3
7990: PPUSH
7991: LD_VAR 0 5
7995: PUSH
7996: LD_INT 120
7998: MINUS
7999: PPUSH
8000: CALL_OW 277
// break ;
8004: GO 8030
// end else
8006: GO 8028
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8008: LD_VAR 0 1
8012: PPUSH
8013: CALL_OW 274
8017: PPUSH
8018: LD_INT 3
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 277
// end ; end ;
8028: GO 7942
8030: POP
8031: POP
// end ; if dec2 = 4 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 4
8039: EQUAL
8040: IFFALSE 8285
// begin if dec1 = 3 then
8042: LD_VAR 0 2
8046: PUSH
8047: LD_INT 3
8049: EQUAL
8050: IFFALSE 8285
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8052: LD_EXP 1
8056: PPUSH
8057: LD_STRING D3Kc1-JMM-1
8059: PPUSH
8060: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING D3Kc1-Kurt-1
8071: PPUSH
8072: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8076: LD_EXP 1
8080: PPUSH
8081: LD_STRING D3Kc1-JMM-2
8083: PPUSH
8084: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8088: LD_EXP 24
8092: PPUSH
8093: LD_STRING D3Kc1-Kurt-2
8095: PPUSH
8096: CALL_OW 88
// askSiberite = 1 ;
8100: LD_ADDR_EXP 33
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_STRING Q2b
8115: PPUSH
8116: LD_INT 1
8118: PUSH
8119: LD_INT 2
8121: PUSH
8122: LD_INT 3
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: PPUSH
8130: CALL_OW 98
8134: ST_TO_ADDR
// if dec2 = 1 then
8135: LD_VAR 0 3
8139: PUSH
8140: LD_INT 1
8142: EQUAL
8143: IFFALSE 8177
// begin Say ( JMM , D4a-JMM-1 ) ;
8145: LD_EXP 1
8149: PPUSH
8150: LD_STRING D4a-JMM-1
8152: PPUSH
8153: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8157: LD_EXP 24
8161: PPUSH
8162: LD_STRING D4b-Kurt-1
8164: PPUSH
8165: CALL_OW 88
// warWithLegion = 1 ;
8169: LD_ADDR_EXP 31
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// end ; if dec2 = 2 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 2
8184: EQUAL
8185: IFFALSE 8219
// begin Say ( JMM , D4b-JMM-1 ) ;
8187: LD_EXP 1
8191: PPUSH
8192: LD_STRING D4b-JMM-1
8194: PPUSH
8195: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8199: LD_EXP 24
8203: PPUSH
8204: LD_STRING D4b-Kurt-1
8206: PPUSH
8207: CALL_OW 88
// warWithLegion = 1 ;
8211: LD_ADDR_EXP 31
8215: PUSH
8216: LD_INT 1
8218: ST_TO_ADDR
// end ; if dec2 = 3 then
8219: LD_VAR 0 3
8223: PUSH
8224: LD_INT 3
8226: EQUAL
8227: IFFALSE 8285
// begin Say ( JMM , D4c-JMM-1 ) ;
8229: LD_EXP 1
8233: PPUSH
8234: LD_STRING D4c-JMM-1
8236: PPUSH
8237: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8241: LD_EXP 24
8245: PPUSH
8246: LD_STRING D4c-Kurt-1
8248: PPUSH
8249: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8253: LD_EXP 1
8257: PPUSH
8258: LD_STRING D4c-JMM-2
8260: PPUSH
8261: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8265: LD_EXP 24
8269: PPUSH
8270: LD_STRING D4c-Kurt-2
8272: PPUSH
8273: CALL_OW 88
// fakeInfo = 1 ;
8277: LD_ADDR_EXP 32
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8285: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8289: LD_EXP 24
8293: PPUSH
8294: LD_EXP 26
8298: PPUSH
8299: CALL_OW 120
// wait ( 0 0$1 ) ;
8303: LD_INT 35
8305: PPUSH
8306: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8310: LD_EXP 26
8314: PPUSH
8315: LD_INT 4
8317: PPUSH
8318: CALL_OW 113
// wait ( 0 0$3 ) ;
8322: LD_INT 105
8324: PPUSH
8325: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8329: LD_EXP 24
8333: PPUSH
8334: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8338: LD_EXP 26
8342: PPUSH
8343: CALL_OW 64
// end else
8347: GO 9894
// begin ComExitVehicle ( otherKurt ) ;
8349: LD_EXP 25
8353: PPUSH
8354: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8358: LD_EXP 25
8362: PPUSH
8363: CALL_OW 87
// wait ( 0 0$1 ) ;
8367: LD_INT 35
8369: PPUSH
8370: CALL_OW 67
// DialogueOn ;
8374: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8378: LD_INT 22
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 26
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 2
8400: PUSH
8401: LD_INT 25
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: LD_INT 25
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: LD_INT 25
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: LD_INT 25
8433: PUSH
8434: LD_INT 4
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 5
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 25
8453: PUSH
8454: LD_INT 8
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 69
8479: PPUSH
8480: LD_STRING D3-Sol1-1
8482: PPUSH
8483: LD_STRING 
8485: PPUSH
8486: CALL 12966 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8490: LD_EXP 25
8494: PPUSH
8495: LD_STRING D3-Kurt-1
8497: PPUSH
8498: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8502: LD_EXP 1
8506: PPUSH
8507: LD_STRING D3-JMM-1
8509: PPUSH
8510: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8514: LD_EXP 25
8518: PPUSH
8519: LD_STRING D3-Kurt-3
8521: PPUSH
8522: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8526: LD_EXP 1
8530: PPUSH
8531: LD_STRING D3-JMM-3
8533: PPUSH
8534: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8538: LD_EXP 25
8542: PPUSH
8543: LD_STRING D3-Kurt-5
8545: PPUSH
8546: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8550: LD_EXP 25
8554: PPUSH
8555: LD_STRING D3-Kurt-5b
8557: PPUSH
8558: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8562: LD_VAR 0 6
8566: PUSH
8567: LD_INT 100
8569: GREATEREQUAL
8570: PUSH
8571: LD_VAR 0 8
8575: PUSH
8576: LD_INT 100
8578: GREATEREQUAL
8579: AND
8580: IFFALSE 8615
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8582: LD_ADDR_VAR 0 2
8586: PUSH
8587: LD_STRING Q2
8589: PPUSH
8590: LD_INT 1
8592: PUSH
8593: LD_INT 2
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 98
8612: ST_TO_ADDR
8613: GO 8638
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8615: LD_ADDR_VAR 0 2
8619: PUSH
8620: LD_STRING Q2
8622: PPUSH
8623: LD_INT 3
8625: PUSH
8626: LD_INT 4
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 98
8637: ST_TO_ADDR
// if dec1 = 1 then
8638: LD_VAR 0 2
8642: PUSH
8643: LD_INT 1
8645: EQUAL
8646: IFFALSE 8680
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8648: LD_EXP 1
8652: PPUSH
8653: LD_STRING D3Ka-JMM-1
8655: PPUSH
8656: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8660: LD_EXP 25
8664: PPUSH
8665: LD_STRING D3Ka-Kurt-1
8667: PPUSH
8668: CALL_OW 88
// warWithLegion = 1 ;
8672: LD_ADDR_EXP 31
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ; if dec1 = 2 then
8680: LD_VAR 0 2
8684: PUSH
8685: LD_INT 2
8687: EQUAL
8688: IFFALSE 8914
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8690: LD_EXP 1
8694: PPUSH
8695: LD_STRING D3Kb-JMM-1
8697: PPUSH
8698: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8702: LD_EXP 25
8706: PPUSH
8707: LD_STRING D3Kb-Kurt-1
8709: PPUSH
8710: CALL_OW 88
// for i in tmp do
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_VAR 0 4
8723: PUSH
8724: FOR_IN
8725: IFFALSE 8812
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8727: LD_ADDR_VAR 0 5
8731: PUSH
8732: LD_VAR 0 1
8736: PPUSH
8737: CALL_OW 274
8741: PPUSH
8742: LD_INT 1
8744: PPUSH
8745: CALL_OW 275
8749: ST_TO_ADDR
// if tmp2 >= 100 then
8750: LD_VAR 0 5
8754: PUSH
8755: LD_INT 100
8757: GREATEREQUAL
8758: IFFALSE 8790
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8760: LD_VAR 0 1
8764: PPUSH
8765: CALL_OW 274
8769: PPUSH
8770: LD_INT 1
8772: PPUSH
8773: LD_VAR 0 5
8777: PUSH
8778: LD_INT 100
8780: MINUS
8781: PPUSH
8782: CALL_OW 277
// break ;
8786: GO 8812
// end else
8788: GO 8810
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 274
8799: PPUSH
8800: LD_INT 1
8802: PPUSH
8803: LD_INT 0
8805: PPUSH
8806: CALL_OW 277
// end ; end ;
8810: GO 8724
8812: POP
8813: POP
// for i in tmp do
8814: LD_ADDR_VAR 0 1
8818: PUSH
8819: LD_VAR 0 4
8823: PUSH
8824: FOR_IN
8825: IFFALSE 8912
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8827: LD_ADDR_VAR 0 5
8831: PUSH
8832: LD_VAR 0 1
8836: PPUSH
8837: CALL_OW 274
8841: PPUSH
8842: LD_INT 3
8844: PPUSH
8845: CALL_OW 275
8849: ST_TO_ADDR
// if tmp2 >= 100 then
8850: LD_VAR 0 5
8854: PUSH
8855: LD_INT 100
8857: GREATEREQUAL
8858: IFFALSE 8890
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 274
8869: PPUSH
8870: LD_INT 3
8872: PPUSH
8873: LD_VAR 0 5
8877: PUSH
8878: LD_INT 100
8880: MINUS
8881: PPUSH
8882: CALL_OW 277
// break ;
8886: GO 8912
// end else
8888: GO 8910
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 274
8899: PPUSH
8900: LD_INT 3
8902: PPUSH
8903: LD_INT 0
8905: PPUSH
8906: CALL_OW 277
// end ; end ;
8910: GO 8824
8912: POP
8913: POP
// end ; if dec1 = 3 then
8914: LD_VAR 0 2
8918: PUSH
8919: LD_INT 3
8921: EQUAL
8922: IFFALSE 9157
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8924: LD_EXP 1
8928: PPUSH
8929: LD_STRING D3Kc1-JMM-1
8931: PPUSH
8932: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8936: LD_EXP 25
8940: PPUSH
8941: LD_STRING D3Kc1-Kurt-1
8943: PPUSH
8944: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8948: LD_EXP 1
8952: PPUSH
8953: LD_STRING D3Kc1-JMM-2
8955: PPUSH
8956: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8960: LD_EXP 25
8964: PPUSH
8965: LD_STRING D3Kc1-Kurt-2
8967: PPUSH
8968: CALL_OW 88
// askSiberite = 1 ;
8972: LD_ADDR_EXP 33
8976: PUSH
8977: LD_INT 1
8979: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: LD_STRING Q2b
8987: PPUSH
8988: LD_INT 1
8990: PUSH
8991: LD_INT 2
8993: PUSH
8994: LD_INT 3
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 98
9006: ST_TO_ADDR
// if dec2 = 1 then
9007: LD_VAR 0 3
9011: PUSH
9012: LD_INT 1
9014: EQUAL
9015: IFFALSE 9049
// begin Say ( JMM , D4a-JMM-1 ) ;
9017: LD_EXP 1
9021: PPUSH
9022: LD_STRING D4a-JMM-1
9024: PPUSH
9025: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9029: LD_EXP 25
9033: PPUSH
9034: LD_STRING D4b-Kurt-1
9036: PPUSH
9037: CALL_OW 88
// warWithLegion = 1 ;
9041: LD_ADDR_EXP 31
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// end ; if dec2 = 2 then
9049: LD_VAR 0 3
9053: PUSH
9054: LD_INT 2
9056: EQUAL
9057: IFFALSE 9091
// begin Say ( JMM , D4b-JMM-1 ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_STRING D4b-JMM-1
9066: PPUSH
9067: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9071: LD_EXP 25
9075: PPUSH
9076: LD_STRING D4b-Kurt-1
9078: PPUSH
9079: CALL_OW 88
// warWithLegion = 1 ;
9083: LD_ADDR_EXP 31
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
// end ; if dec2 = 3 then
9091: LD_VAR 0 3
9095: PUSH
9096: LD_INT 3
9098: EQUAL
9099: IFFALSE 9157
// begin Say ( JMM , D4c-JMM-1 ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D4c-JMM-1
9108: PPUSH
9109: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9113: LD_EXP 25
9117: PPUSH
9118: LD_STRING D4c-Kurt-1
9120: PPUSH
9121: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9125: LD_EXP 1
9129: PPUSH
9130: LD_STRING D4c-JMM-2
9132: PPUSH
9133: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9137: LD_EXP 25
9141: PPUSH
9142: LD_STRING D4c-Kurt-2
9144: PPUSH
9145: CALL_OW 88
// fakeInfo = 1 ;
9149: LD_ADDR_EXP 32
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9157: LD_VAR 0 2
9161: PUSH
9162: LD_INT 4
9164: EQUAL
9165: IFFALSE 9822
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D3Kd-JMM-1
9174: PPUSH
9175: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9179: LD_VAR 0 6
9183: PUSH
9184: LD_INT 200
9186: GREATEREQUAL
9187: PUSH
9188: LD_VAR 0 8
9192: PUSH
9193: LD_INT 200
9195: GREATEREQUAL
9196: AND
9197: IFFALSE 9232
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9199: LD_ADDR_VAR 0 3
9203: PUSH
9204: LD_STRING Q2a
9206: PPUSH
9207: LD_INT 1
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: LD_INT 4
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: PPUSH
9225: CALL_OW 98
9229: ST_TO_ADDR
9230: GO 9255
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9232: LD_ADDR_VAR 0 3
9236: PUSH
9237: LD_STRING Q2a
9239: PPUSH
9240: LD_INT 1
9242: PUSH
9243: LD_INT 4
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 98
9254: ST_TO_ADDR
// if dec2 = 1 then
9255: LD_VAR 0 3
9259: PUSH
9260: LD_INT 1
9262: EQUAL
9263: IFFALSE 9297
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9265: LD_EXP 1
9269: PPUSH
9270: LD_STRING D5Ka-JMM-1
9272: PPUSH
9273: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9277: LD_EXP 25
9281: PPUSH
9282: LD_STRING D5Ka-Kurt-1
9284: PPUSH
9285: CALL_OW 88
// warWithLegion = 1 ;
9289: LD_ADDR_EXP 31
9293: PUSH
9294: LD_INT 1
9296: ST_TO_ADDR
// end ; if dec2 = 2 then
9297: LD_VAR 0 3
9301: PUSH
9302: LD_INT 2
9304: EQUAL
9305: IFFALSE 9331
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9307: LD_EXP 1
9311: PPUSH
9312: LD_STRING D3Kb-JMM-1
9314: PPUSH
9315: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9319: LD_EXP 25
9323: PPUSH
9324: LD_STRING D3Kb-Kurt-1
9326: PPUSH
9327: CALL_OW 88
// end ; if dec2 = 3 then
9331: LD_VAR 0 3
9335: PUSH
9336: LD_INT 3
9338: EQUAL
9339: IFFALSE 9569
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9341: LD_EXP 1
9345: PPUSH
9346: LD_STRING D3Ke-JMM-1
9348: PPUSH
9349: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9353: LD_EXP 25
9357: PPUSH
9358: LD_STRING D3Ke-Kurt-1
9360: PPUSH
9361: CALL_OW 88
// PrepareLegionForPlayer ;
9365: CALL 4322 0 0
// for i in tmp do
9369: LD_ADDR_VAR 0 1
9373: PUSH
9374: LD_VAR 0 4
9378: PUSH
9379: FOR_IN
9380: IFFALSE 9467
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 274
9396: PPUSH
9397: LD_INT 1
9399: PPUSH
9400: CALL_OW 275
9404: ST_TO_ADDR
// if tmp2 >= 200 then
9405: LD_VAR 0 5
9409: PUSH
9410: LD_INT 200
9412: GREATEREQUAL
9413: IFFALSE 9445
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9415: LD_VAR 0 1
9419: PPUSH
9420: CALL_OW 274
9424: PPUSH
9425: LD_INT 1
9427: PPUSH
9428: LD_VAR 0 5
9432: PUSH
9433: LD_INT 200
9435: MINUS
9436: PPUSH
9437: CALL_OW 277
// break ;
9441: GO 9467
// end else
9443: GO 9465
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9445: LD_VAR 0 1
9449: PPUSH
9450: CALL_OW 274
9454: PPUSH
9455: LD_INT 1
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 277
// end ; end ;
9465: GO 9379
9467: POP
9468: POP
// for i in tmp do
9469: LD_ADDR_VAR 0 1
9473: PUSH
9474: LD_VAR 0 4
9478: PUSH
9479: FOR_IN
9480: IFFALSE 9567
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9482: LD_ADDR_VAR 0 5
9486: PUSH
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 274
9496: PPUSH
9497: LD_INT 3
9499: PPUSH
9500: CALL_OW 275
9504: ST_TO_ADDR
// if tmp2 >= 200 then
9505: LD_VAR 0 5
9509: PUSH
9510: LD_INT 200
9512: GREATEREQUAL
9513: IFFALSE 9545
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: CALL_OW 274
9524: PPUSH
9525: LD_INT 3
9527: PPUSH
9528: LD_VAR 0 5
9532: PUSH
9533: LD_INT 200
9535: MINUS
9536: PPUSH
9537: CALL_OW 277
// break ;
9541: GO 9567
// end else
9543: GO 9565
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9545: LD_VAR 0 1
9549: PPUSH
9550: CALL_OW 274
9554: PPUSH
9555: LD_INT 3
9557: PPUSH
9558: LD_INT 0
9560: PPUSH
9561: CALL_OW 277
// end ; end ;
9565: GO 9479
9567: POP
9568: POP
// end ; if dec2 = 4 then
9569: LD_VAR 0 3
9573: PUSH
9574: LD_INT 4
9576: EQUAL
9577: IFFALSE 9822
// begin if dec1 = 3 then
9579: LD_VAR 0 2
9583: PUSH
9584: LD_INT 3
9586: EQUAL
9587: IFFALSE 9822
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9589: LD_EXP 1
9593: PPUSH
9594: LD_STRING D3Kc1-JMM-1
9596: PPUSH
9597: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9601: LD_EXP 25
9605: PPUSH
9606: LD_STRING D3Kc1-Kurt-1
9608: PPUSH
9609: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9613: LD_EXP 1
9617: PPUSH
9618: LD_STRING D3Kc1-JMM-2
9620: PPUSH
9621: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9625: LD_EXP 25
9629: PPUSH
9630: LD_STRING D3Kc1-Kurt-2
9632: PPUSH
9633: CALL_OW 88
// askSiberite = 1 ;
9637: LD_ADDR_EXP 33
9641: PUSH
9642: LD_INT 1
9644: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9645: LD_ADDR_VAR 0 2
9649: PUSH
9650: LD_STRING Q2b
9652: PPUSH
9653: LD_INT 1
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 3
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 98
9671: ST_TO_ADDR
// if dec2 = 1 then
9672: LD_VAR 0 3
9676: PUSH
9677: LD_INT 1
9679: EQUAL
9680: IFFALSE 9714
// begin Say ( JMM , D4a-JMM-1 ) ;
9682: LD_EXP 1
9686: PPUSH
9687: LD_STRING D4a-JMM-1
9689: PPUSH
9690: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9694: LD_EXP 25
9698: PPUSH
9699: LD_STRING D4b-Kurt-1
9701: PPUSH
9702: CALL_OW 88
// warWithLegion = 1 ;
9706: LD_ADDR_EXP 31
9710: PUSH
9711: LD_INT 1
9713: ST_TO_ADDR
// end ; if dec2 = 2 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9756
// begin Say ( JMM , D4b-JMM-1 ) ;
9724: LD_EXP 1
9728: PPUSH
9729: LD_STRING D4b-JMM-1
9731: PPUSH
9732: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9736: LD_EXP 25
9740: PPUSH
9741: LD_STRING D4b-Kurt-1
9743: PPUSH
9744: CALL_OW 88
// warWithLegion = 1 ;
9748: LD_ADDR_EXP 31
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// end ; if dec2 = 3 then
9756: LD_VAR 0 3
9760: PUSH
9761: LD_INT 3
9763: EQUAL
9764: IFFALSE 9822
// begin Say ( JMM , D4c-JMM-1 ) ;
9766: LD_EXP 1
9770: PPUSH
9771: LD_STRING D4c-JMM-1
9773: PPUSH
9774: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9778: LD_EXP 25
9782: PPUSH
9783: LD_STRING D4c-Kurt-1
9785: PPUSH
9786: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9790: LD_EXP 1
9794: PPUSH
9795: LD_STRING D4c-JMM-2
9797: PPUSH
9798: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9802: LD_EXP 25
9806: PPUSH
9807: LD_STRING D4c-Kurt-2
9809: PPUSH
9810: CALL_OW 88
// fakeInfo = 1 ;
9814: LD_ADDR_EXP 32
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9822: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9826: LD_INT 8
9828: PPUSH
9829: LD_INT 8
9831: PPUSH
9832: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9836: LD_EXP 25
9840: PPUSH
9841: LD_EXP 26
9845: PPUSH
9846: CALL_OW 120
// wait ( 0 0$1 ) ;
9850: LD_INT 35
9852: PPUSH
9853: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9857: LD_EXP 26
9861: PPUSH
9862: LD_INT 4
9864: PPUSH
9865: CALL_OW 113
// wait ( 0 0$6 ) ;
9869: LD_INT 210
9871: PPUSH
9872: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9876: LD_EXP 25
9880: PPUSH
9881: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9885: LD_EXP 26
9889: PPUSH
9890: CALL_OW 64
// end ; end ;
9894: PPOPN 8
9896: END
// every 0 0$10 trigger warWithLegion = 1 do
9897: LD_EXP 31
9901: PUSH
9902: LD_INT 1
9904: EQUAL
9905: IFFALSE 9914
9907: GO 9909
9909: DISABLE
// PrepareAttackLegion ;
9910: CALL 5050 0 0
9914: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9915: LD_EXP 15
9919: PPUSH
9920: CALL_OW 305
9924: PUSH
9925: LD_EXP 15
9929: PPUSH
9930: LD_INT 1
9932: PPUSH
9933: CALL_OW 289
9937: NOT
9938: AND
9939: PUSH
9940: LD_EXP 15
9944: PPUSH
9945: LD_INT 2
9947: PPUSH
9948: CALL_OW 289
9952: NOT
9953: AND
9954: PUSH
9955: LD_EXP 15
9959: PPUSH
9960: LD_INT 3
9962: PPUSH
9963: CALL_OW 289
9967: NOT
9968: AND
9969: IFFALSE 9986
9971: GO 9973
9973: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9974: LD_EXP 15
9978: PPUSH
9979: LD_INT 4
9981: PPUSH
9982: CALL_OW 235
9986: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9987: LD_EXP 16
9991: PPUSH
9992: CALL_OW 305
9996: PUSH
9997: LD_EXP 16
10001: PPUSH
10002: LD_INT 1
10004: PPUSH
10005: CALL_OW 289
10009: NOT
10010: AND
10011: PUSH
10012: LD_EXP 16
10016: PPUSH
10017: LD_INT 2
10019: PPUSH
10020: CALL_OW 289
10024: NOT
10025: AND
10026: PUSH
10027: LD_EXP 16
10031: PPUSH
10032: LD_INT 3
10034: PPUSH
10035: CALL_OW 289
10039: NOT
10040: AND
10041: IFFALSE 10058
10043: GO 10045
10045: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10046: LD_EXP 16
10050: PPUSH
10051: LD_INT 4
10053: PPUSH
10054: CALL_OW 235
10058: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10059: LD_EXP 17
10063: PPUSH
10064: CALL_OW 305
10068: PUSH
10069: LD_EXP 17
10073: PPUSH
10074: LD_INT 1
10076: PPUSH
10077: CALL_OW 289
10081: NOT
10082: AND
10083: PUSH
10084: LD_EXP 17
10088: PPUSH
10089: LD_INT 2
10091: PPUSH
10092: CALL_OW 289
10096: NOT
10097: AND
10098: PUSH
10099: LD_EXP 17
10103: PPUSH
10104: LD_INT 3
10106: PPUSH
10107: CALL_OW 289
10111: NOT
10112: AND
10113: IFFALSE 10130
10115: GO 10117
10117: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10118: LD_EXP 17
10122: PPUSH
10123: LD_INT 4
10125: PPUSH
10126: CALL_OW 235
10130: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10131: LD_EXP 18
10135: PPUSH
10136: CALL_OW 305
10140: PUSH
10141: LD_EXP 18
10145: PPUSH
10146: LD_INT 1
10148: PPUSH
10149: CALL_OW 289
10153: NOT
10154: AND
10155: PUSH
10156: LD_EXP 18
10160: PPUSH
10161: LD_INT 2
10163: PPUSH
10164: CALL_OW 289
10168: NOT
10169: AND
10170: PUSH
10171: LD_EXP 18
10175: PPUSH
10176: LD_INT 3
10178: PPUSH
10179: CALL_OW 289
10183: NOT
10184: AND
10185: IFFALSE 10202
10187: GO 10189
10189: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10190: LD_EXP 18
10194: PPUSH
10195: LD_INT 4
10197: PPUSH
10198: CALL_OW 235
10202: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10203: LD_EXP 19
10207: PPUSH
10208: CALL_OW 305
10212: PUSH
10213: LD_EXP 19
10217: PPUSH
10218: LD_INT 1
10220: PPUSH
10221: CALL_OW 289
10225: NOT
10226: AND
10227: PUSH
10228: LD_EXP 19
10232: PPUSH
10233: LD_INT 2
10235: PPUSH
10236: CALL_OW 289
10240: NOT
10241: AND
10242: PUSH
10243: LD_EXP 19
10247: PPUSH
10248: LD_INT 3
10250: PPUSH
10251: CALL_OW 289
10255: NOT
10256: AND
10257: PUSH
10258: LD_EXP 19
10262: PPUSH
10263: LD_INT 2
10265: PPUSH
10266: CALL_OW 289
10270: NOT
10271: AND
10272: IFFALSE 10289
10274: GO 10276
10276: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10277: LD_EXP 19
10281: PPUSH
10282: LD_INT 4
10284: PPUSH
10285: CALL_OW 235
10289: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10290: LD_EXP 20
10294: PPUSH
10295: CALL_OW 305
10299: PUSH
10300: LD_EXP 20
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: CALL_OW 289
10312: NOT
10313: AND
10314: PUSH
10315: LD_EXP 20
10319: PPUSH
10320: LD_INT 2
10322: PPUSH
10323: CALL_OW 289
10327: NOT
10328: AND
10329: PUSH
10330: LD_EXP 20
10334: PPUSH
10335: LD_INT 3
10337: PPUSH
10338: CALL_OW 289
10342: NOT
10343: AND
10344: IFFALSE 10361
10346: GO 10348
10348: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10349: LD_EXP 20
10353: PPUSH
10354: LD_INT 4
10356: PPUSH
10357: CALL_OW 235
10361: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10362: LD_EXP 21
10366: PPUSH
10367: CALL_OW 305
10371: PUSH
10372: LD_EXP 21
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 289
10384: NOT
10385: AND
10386: PUSH
10387: LD_EXP 21
10391: PPUSH
10392: LD_INT 2
10394: PPUSH
10395: CALL_OW 289
10399: NOT
10400: AND
10401: PUSH
10402: LD_EXP 21
10406: PPUSH
10407: LD_INT 3
10409: PPUSH
10410: CALL_OW 289
10414: NOT
10415: AND
10416: IFFALSE 10433
10418: GO 10420
10420: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10421: LD_EXP 21
10425: PPUSH
10426: LD_INT 4
10428: PPUSH
10429: CALL_OW 235
10433: END
// every 0 0$1 do var i ;
10434: GO 10436
10436: DISABLE
10437: LD_INT 0
10439: PPUSH
// begin enable ;
10440: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10441: LD_ADDR_VAR 0 1
10445: PUSH
10446: LD_INT 22
10448: PUSH
10449: LD_INT 4
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PPUSH
10456: CALL_OW 69
10460: PUSH
10461: FOR_IN
10462: IFFALSE 10501
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10464: LD_VAR 0 1
10468: PPUSH
10469: LD_INT 4
10471: PPUSH
10472: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10476: LD_VAR 0 1
10480: PPUSH
10481: LD_INT 4
10483: PPUSH
10484: CALL_OW 308
10488: IFFALSE 10499
// RemoveUnit ( i ) ;
10490: LD_VAR 0 1
10494: PPUSH
10495: CALL_OW 64
// end ;
10499: GO 10461
10501: POP
10502: POP
// end ;
10503: PPOPN 1
10505: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10506: LD_EXP 28
10510: PUSH
10511: LD_INT 1
10513: EQUAL
10514: IFFALSE 10953
10516: GO 10518
10518: DISABLE
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
10523: PPUSH
// begin enable ;
10524: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10525: LD_ADDR_VAR 0 2
10529: PUSH
10530: LD_INT 12
10532: PPUSH
10533: LD_INT 22
10535: PUSH
10536: LD_INT 3
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 2
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 70
10561: ST_TO_ADDR
// for i in enemyVehs do
10562: LD_ADDR_VAR 0 1
10566: PUSH
10567: LD_VAR 0 2
10571: PUSH
10572: FOR_IN
10573: IFFALSE 10951
// begin if See ( 1 , i ) then
10575: LD_INT 1
10577: PPUSH
10578: LD_VAR 0 1
10582: PPUSH
10583: CALL_OW 292
10587: IFFALSE 10949
// begin disable ;
10589: DISABLE
// DialogueOn ;
10590: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10594: LD_VAR 0 1
10598: PPUSH
10599: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10603: LD_INT 22
10605: PUSH
10606: LD_INT 1
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: LD_INT 26
10615: PUSH
10616: LD_INT 1
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 25
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 25
10638: PUSH
10639: LD_INT 2
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 3
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 25
10658: PUSH
10659: LD_INT 4
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 25
10668: PUSH
10669: LD_INT 5
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 25
10678: PUSH
10679: LD_INT 8
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 69
10704: PPUSH
10705: LD_STRING DT1-Sol1-1
10707: PPUSH
10708: LD_STRING DT1-FSol1-1
10710: PPUSH
10711: CALL 12966 0 3
// dec = ShowQuery2 ;
10715: LD_ADDR_VAR 0 3
10719: PUSH
10720: CALL 13576 0 0
10724: ST_TO_ADDR
// if dec = 1 then
10725: LD_VAR 0 3
10729: PUSH
10730: LD_INT 1
10732: EQUAL
10733: IFFALSE 10839
// begin Say ( JMM , D2-JMM-1 ) ;
10735: LD_EXP 1
10739: PPUSH
10740: LD_STRING D2-JMM-1
10742: PPUSH
10743: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10747: LD_EXP 22
10751: PPUSH
10752: LD_STRING D2-Pow-1
10754: PPUSH
10755: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10759: LD_EXP 1
10763: PPUSH
10764: LD_STRING D2a-JMM-1
10766: PPUSH
10767: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10771: LD_EXP 22
10775: PPUSH
10776: LD_STRING D2a-Pow-1
10778: PPUSH
10779: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10783: LD_EXP 1
10787: PPUSH
10788: LD_STRING D2a-JMM-2
10790: PPUSH
10791: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10795: LD_EXP 22
10799: PPUSH
10800: LD_STRING D2a-Pow-2
10802: PPUSH
10803: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10807: LD_EXP 1
10811: PPUSH
10812: LD_STRING D2a-JMM-3
10814: PPUSH
10815: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10819: LD_EXP 22
10823: PPUSH
10824: LD_STRING D2a-Pow-3
10826: PPUSH
10827: CALL_OW 94
// secondPass = 2 ;
10831: LD_ADDR_EXP 28
10835: PUSH
10836: LD_INT 2
10838: ST_TO_ADDR
// end ; if dec = 2 then
10839: LD_VAR 0 3
10843: PUSH
10844: LD_INT 2
10846: EQUAL
10847: IFFALSE 10941
// begin Say ( JMM , D2-JMM-1 ) ;
10849: LD_EXP 1
10853: PPUSH
10854: LD_STRING D2-JMM-1
10856: PPUSH
10857: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10861: LD_EXP 22
10865: PPUSH
10866: LD_STRING D2-Pow-1
10868: PPUSH
10869: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10873: LD_EXP 1
10877: PPUSH
10878: LD_STRING D2b-JMM-1
10880: PPUSH
10881: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10885: LD_EXP 22
10889: PPUSH
10890: LD_STRING D2b-Pow-1
10892: PPUSH
10893: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10897: LD_EXP 1
10901: PPUSH
10902: LD_STRING D2c-JMM-1
10904: PPUSH
10905: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10909: LD_EXP 22
10913: PPUSH
10914: LD_STRING D2c-Pow-1
10916: PPUSH
10917: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10921: LD_EXP 1
10925: PPUSH
10926: LD_STRING D2c-JMM-2
10928: PPUSH
10929: CALL_OW 88
// secondPass = 2 ;
10933: LD_ADDR_EXP 28
10937: PUSH
10938: LD_INT 2
10940: ST_TO_ADDR
// end ; DialogueOff ;
10941: CALL_OW 7
// exit ;
10945: POP
10946: POP
10947: GO 10953
// end ; end ;
10949: GO 10572
10951: POP
10952: POP
// end ;
10953: PPOPN 3
10955: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10956: LD_EXP 29
10960: PUSH
10961: LD_INT 1
10963: EQUAL
10964: IFFALSE 11197
10966: GO 10968
10968: DISABLE
10969: LD_INT 0
10971: PPUSH
10972: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_INT 11
10980: PPUSH
10981: LD_INT 22
10983: PUSH
10984: LD_INT 3
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 24
10993: PUSH
10994: LD_INT 250
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PPUSH
11005: CALL_OW 70
11009: ST_TO_ADDR
// enable ;
11010: ENABLE
// for i in vehicles do
11011: LD_ADDR_VAR 0 1
11015: PUSH
11016: LD_VAR 0 2
11020: PUSH
11021: FOR_IN
11022: IFFALSE 11195
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11024: LD_INT 1
11026: PPUSH
11027: LD_VAR 0 1
11031: PPUSH
11032: CALL_OW 292
11036: PUSH
11037: LD_EXP 29
11041: PUSH
11042: LD_INT 1
11044: EQUAL
11045: AND
11046: PUSH
11047: LD_EXP 30
11051: PUSH
11052: LD_INT 4
11054: LESSEQUAL
11055: AND
11056: IFFALSE 11193
// begin disable ;
11058: DISABLE
// DialogueOn ;
11059: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11063: LD_INT 22
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 26
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 2
11085: PUSH
11086: LD_INT 25
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 3
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 4
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 25
11128: PUSH
11129: LD_INT 5
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 8
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: PPUSH
11160: CALL_OW 69
11164: PPUSH
11165: LD_STRING DT1-Sol1-1
11167: PPUSH
11168: LD_STRING DT1-FSol1-1
11170: PPUSH
11171: CALL 12966 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11175: LD_EXP 1
11179: PPUSH
11180: LD_STRING DT1-JMM-1
11182: PPUSH
11183: CALL_OW 88
// DialogueOff ;
11187: CALL_OW 7
// break ;
11191: GO 11195
// end ; end ;
11193: GO 11021
11195: POP
11196: POP
// end ;
11197: PPOPN 2
11199: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11200: LD_EXP 29
11204: PUSH
11205: LD_INT 1
11207: EQUAL
11208: PUSH
11209: LD_INT 11
11211: PPUSH
11212: LD_INT 22
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 24
11224: PUSH
11225: LD_INT 251
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 2
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 2
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 21
11247: PUSH
11248: LD_INT 1
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 70
11269: PUSH
11270: LD_INT 0
11272: EQUAL
11273: AND
11274: PUSH
11275: LD_EXP 30
11279: PUSH
11280: LD_INT 3
11282: PUSH
11283: LD_INT 3
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: LD_OWVAR 67
11298: ARRAY
11299: LESSEQUAL
11300: AND
11301: PUSH
11302: LD_EXP 30
11306: PUSH
11307: LD_INT 5
11309: GREATER
11310: AND
11311: IFFALSE 11468
11313: GO 11315
11315: DISABLE
// begin vehicleTeleported = 2 ;
11316: LD_ADDR_EXP 29
11320: PUSH
11321: LD_INT 2
11323: ST_TO_ADDR
// DialogueOn ;
11324: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11328: LD_EXP 1
11332: PPUSH
11333: LD_STRING DT1a-JMM-1
11335: PPUSH
11336: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11340: LD_INT 22
11342: PUSH
11343: LD_INT 1
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 26
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 2
11362: PUSH
11363: LD_INT 25
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 2
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 25
11385: PUSH
11386: LD_INT 3
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 25
11395: PUSH
11396: LD_INT 4
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 25
11405: PUSH
11406: LD_INT 5
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 25
11415: PUSH
11416: LD_INT 8
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 69
11441: PPUSH
11442: LD_STRING DT1a-Sol1-1
11444: PPUSH
11445: LD_STRING DT1a-FSol1-1
11447: PPUSH
11448: CALL 12966 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11452: LD_EXP 1
11456: PPUSH
11457: LD_STRING DT1a-JMM-2
11459: PPUSH
11460: CALL_OW 88
// DialogueOff ;
11464: CALL_OW 7
// end ;
11468: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11469: LD_EXP 29
11473: PUSH
11474: LD_INT 3
11476: EQUAL
11477: PUSH
11478: LD_EXP 30
11482: PUSH
11483: LD_INT 4
11485: GREATER
11486: AND
11487: IFFALSE 11698
11489: GO 11491
11491: DISABLE
11492: LD_INT 0
11494: PPUSH
11495: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11496: LD_ADDR_VAR 0 2
11500: PUSH
11501: LD_INT 11
11503: PPUSH
11504: LD_INT 22
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 24
11516: PUSH
11517: LD_INT 250
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PPUSH
11528: CALL_OW 70
11532: ST_TO_ADDR
// enable ;
11533: ENABLE
// for i in vehicles do
11534: LD_ADDR_VAR 0 1
11538: PUSH
11539: LD_VAR 0 2
11543: PUSH
11544: FOR_IN
11545: IFFALSE 11696
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11547: LD_INT 1
11549: PPUSH
11550: LD_VAR 0 1
11554: PPUSH
11555: CALL_OW 292
11559: PUSH
11560: LD_EXP 29
11564: PUSH
11565: LD_INT 3
11567: EQUAL
11568: AND
11569: IFFALSE 11694
// begin disable ;
11571: DISABLE
// DialogueOn ;
11572: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11576: LD_INT 22
11578: PUSH
11579: LD_INT 1
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 26
11588: PUSH
11589: LD_INT 1
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 2
11598: PUSH
11599: LD_INT 25
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 25
11611: PUSH
11612: LD_INT 2
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 25
11631: PUSH
11632: LD_INT 4
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 25
11641: PUSH
11642: LD_INT 5
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 25
11651: PUSH
11652: LD_INT 8
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 69
11677: PPUSH
11678: LD_STRING DT2-Sol1-1
11680: PPUSH
11681: LD_STRING DT2-FSol1-1
11683: PPUSH
11684: CALL 12966 0 3
// DialogueOff ;
11688: CALL_OW 7
// break ;
11692: GO 11696
// end ; end ;
11694: GO 11544
11696: POP
11697: POP
// end ;
11698: PPOPN 2
11700: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11701: LD_EXP 29
11705: PUSH
11706: LD_INT 3
11708: EQUAL
11709: PUSH
11710: LD_INT 11
11712: PPUSH
11713: LD_INT 22
11715: PUSH
11716: LD_INT 3
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 24
11725: PUSH
11726: LD_INT 251
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: LD_INT 21
11738: PUSH
11739: LD_INT 2
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 21
11748: PUSH
11749: LD_INT 1
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: PPUSH
11766: CALL_OW 70
11770: PUSH
11771: LD_INT 0
11773: EQUAL
11774: AND
11775: PUSH
11776: LD_EXP 30
11780: PUSH
11781: LD_INT 6
11783: PUSH
11784: LD_INT 6
11786: PUSH
11787: LD_INT 8
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: PUSH
11795: LD_OWVAR 67
11799: ARRAY
11800: EQUAL
11801: AND
11802: IFFALSE 11959
11804: GO 11806
11806: DISABLE
// begin vehicleTeleported = 4 ;
11807: LD_ADDR_EXP 29
11811: PUSH
11812: LD_INT 4
11814: ST_TO_ADDR
// DialogueOn ;
11815: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11819: LD_EXP 1
11823: PPUSH
11824: LD_STRING DT2a-JMM-1
11826: PPUSH
11827: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11831: LD_INT 22
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 26
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 2
11853: PUSH
11854: LD_INT 25
11856: PUSH
11857: LD_INT 1
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 25
11866: PUSH
11867: LD_INT 2
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 25
11876: PUSH
11877: LD_INT 3
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 25
11886: PUSH
11887: LD_INT 4
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 25
11896: PUSH
11897: LD_INT 5
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 25
11906: PUSH
11907: LD_INT 8
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 69
11932: PPUSH
11933: LD_STRING DT2a-Sol1-1
11935: PPUSH
11936: LD_STRING DT2a-FSol1-1
11938: PPUSH
11939: CALL 12966 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
11943: LD_EXP 3
11947: PPUSH
11948: LD_STRING DT2a-Don-1
11950: PPUSH
11951: CALL_OW 88
// DialogueOff ;
11955: CALL_OW 7
// end ;
11959: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11960: LD_INT 1
11962: PPUSH
11963: LD_INT 45
11965: PPUSH
11966: LD_INT 74
11968: PPUSH
11969: CALL_OW 293
11973: IFFALSE 12141
11975: GO 11977
11977: DISABLE
// begin DialogueOn ;
11978: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11982: LD_INT 36
11984: PPUSH
11985: LD_INT 55
11987: PPUSH
11988: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11992: LD_INT 22
11994: PUSH
11995: LD_INT 1
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 26
12004: PUSH
12005: LD_INT 1
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: LD_INT 25
12017: PUSH
12018: LD_INT 1
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 25
12027: PUSH
12028: LD_INT 2
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 25
12037: PUSH
12038: LD_INT 3
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 25
12047: PUSH
12048: LD_INT 4
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 25
12057: PUSH
12058: LD_INT 5
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 25
12067: PUSH
12068: LD_INT 8
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 69
12093: PPUSH
12094: LD_STRING D5-Sol1-1
12096: PPUSH
12097: LD_STRING D5-FSol1-
12099: PPUSH
12100: CALL 12966 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12104: LD_EXP 31
12108: PUSH
12109: LD_INT 1
12111: EQUAL
12112: PUSH
12113: LD_EXP 3
12117: PPUSH
12118: CALL_OW 300
12122: AND
12123: IFFALSE 12137
// Say ( Donaldson , D5-Don-1 ) ;
12125: LD_EXP 3
12129: PPUSH
12130: LD_STRING D5-Don-1
12132: PPUSH
12133: CALL_OW 88
// DialogueOff ;
12137: CALL_OW 7
// end ;
12141: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 10
12147: PPUSH
12148: CALL_OW 292
12152: IFFALSE 12303
12154: GO 12156
12156: DISABLE
// begin DialogueOn ;
12157: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
12161: LD_INT 10
12163: PPUSH
12164: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12168: LD_INT 22
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 26
12180: PUSH
12181: LD_INT 1
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 2
12190: PUSH
12191: LD_INT 25
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 25
12203: PUSH
12204: LD_INT 2
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 25
12213: PUSH
12214: LD_INT 3
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 25
12223: PUSH
12224: LD_INT 4
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 25
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 25
12243: PUSH
12244: LD_INT 8
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: PPUSH
12270: LD_STRING DT3-Sol1-1
12272: PPUSH
12273: LD_STRING DT3-FSol1-1
12275: PPUSH
12276: CALL 12966 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12280: LD_EXP 1
12284: PPUSH
12285: LD_STRING DT3-JMM-1
12287: PPUSH
12288: CALL_OW 88
// DialogueOff ;
12292: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12296: LD_STRING M2
12298: PPUSH
12299: CALL_OW 337
// end ;
12303: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12304: LD_EXP 43
12308: PUSH
12309: LD_INT 0
12311: EQUAL
12312: IFFALSE 12395
12314: GO 12316
12316: DISABLE
12317: LD_INT 0
12319: PPUSH
// begin enable ;
12320: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_INT 10
12328: PPUSH
12329: LD_INT 22
12331: PUSH
12332: LD_INT 3
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 21
12341: PUSH
12342: LD_INT 2
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 58
12351: PUSH
12352: EMPTY
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 70
12364: PUSH
12365: FOR_IN
12366: IFFALSE 12393
// if GetLives ( i ) < 1000 then
12368: LD_VAR 0 1
12372: PPUSH
12373: CALL_OW 256
12377: PUSH
12378: LD_INT 1000
12380: LESS
12381: IFFALSE 12391
// ruEscape = 1 ;
12383: LD_ADDR_EXP 43
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
12391: GO 12365
12393: POP
12394: POP
// end ;
12395: PPOPN 1
12397: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12398: LD_INT 3
12400: PPUSH
12401: CALL_OW 303
12405: PUSH
12406: LD_INT 4
12408: PPUSH
12409: CALL_OW 303
12413: OR
12414: PUSH
12415: LD_INT 22
12417: PPUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 1
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 70
12432: PUSH
12433: LD_INT 0
12435: GREATER
12436: OR
12437: PUSH
12438: LD_EXP 43
12442: PUSH
12443: LD_INT 1
12445: EQUAL
12446: OR
12447: IFFALSE 12654
12449: GO 12451
12451: DISABLE
12452: LD_INT 0
12454: PPUSH
12455: PPUSH
12456: PPUSH
// begin ruAI = 0 ;
12457: LD_ADDR_EXP 42
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12465: LD_ADDR_VAR 0 3
12469: PUSH
12470: LD_INT 10
12472: PPUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 3
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 21
12485: PUSH
12486: LD_INT 2
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 58
12495: PUSH
12496: EMPTY
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 70
12508: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12509: LD_EXP 35
12513: PPUSH
12514: CALL_OW 122
// wait ( 0 0$1 ) ;
12518: LD_INT 35
12520: PPUSH
12521: CALL_OW 67
// DialogueOn ;
12525: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12529: LD_EXP 1
12533: PPUSH
12534: LD_STRING D6-JMM-1
12536: PPUSH
12537: CALL_OW 88
// DialogueOff ;
12541: CALL_OW 7
// if vehs > 0 then
12545: LD_VAR 0 3
12549: PUSH
12550: LD_INT 0
12552: GREATER
12553: IFFALSE 12623
// for i := 1 to RuScientists do
12555: LD_ADDR_VAR 0 1
12559: PUSH
12560: DOUBLE
12561: LD_INT 1
12563: DEC
12564: ST_TO_ADDR
12565: LD_EXP 35
12569: PUSH
12570: FOR_TO
12571: IFFALSE 12619
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12573: LD_EXP 35
12577: PUSH
12578: LD_VAR 0 1
12582: ARRAY
12583: PPUSH
12584: LD_INT 3
12586: PUSH
12587: LD_INT 60
12589: PUSH
12590: EMPTY
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 72
12601: PPUSH
12602: LD_VAR 0 3
12606: PUSH
12607: LD_VAR 0 1
12611: ARRAY
12612: PPUSH
12613: CALL_OW 120
12617: GO 12570
12619: POP
12620: POP
12621: GO 12654
// ComMoveToArea ( RuScientists , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12623: LD_EXP 35
12627: PPUSH
12628: LD_INT 13
12630: PUSH
12631: LD_INT 14
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 1
12640: PPUSH
12641: LD_INT 2
12643: PPUSH
12644: CALL_OW 12
12648: ARRAY
12649: PPUSH
12650: CALL_OW 113
// end ;
12654: PPOPN 3
12656: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
12657: LD_EXP 42
12661: PUSH
12662: LD_INT 0
12664: EQUAL
12665: IFFALSE 12855
12667: GO 12669
12669: DISABLE
12670: LD_INT 0
12672: PPUSH
12673: PPUSH
// begin enable ;
12674: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12675: LD_ADDR_VAR 0 1
12679: PUSH
12680: LD_INT 13
12682: PPUSH
12683: LD_INT 22
12685: PUSH
12686: LD_INT 3
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: PPUSH
12696: CALL_OW 70
12700: PUSH
12701: FOR_IN
12702: IFFALSE 12763
// begin for j in RuScientists do
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_EXP 35
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12750
// if j = i then
12717: LD_VAR 0 2
12721: PUSH
12722: LD_VAR 0 1
12726: EQUAL
12727: IFFALSE 12748
// RuScientists = RuScientists diff [ i ] ;
12729: LD_ADDR_EXP 35
12733: PUSH
12734: LD_EXP 35
12738: PUSH
12739: LD_VAR 0 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: DIFF
12747: ST_TO_ADDR
12748: GO 12714
12750: POP
12751: POP
// RemoveUnit ( i ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: CALL_OW 64
// end ;
12761: GO 12701
12763: POP
12764: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12765: LD_ADDR_VAR 0 1
12769: PUSH
12770: LD_INT 14
12772: PPUSH
12773: LD_INT 22
12775: PUSH
12776: LD_INT 3
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: PPUSH
12786: CALL_OW 70
12790: PUSH
12791: FOR_IN
12792: IFFALSE 12853
// begin for j in RuScientists do
12794: LD_ADDR_VAR 0 2
12798: PUSH
12799: LD_EXP 35
12803: PUSH
12804: FOR_IN
12805: IFFALSE 12840
// if j = i then
12807: LD_VAR 0 2
12811: PUSH
12812: LD_VAR 0 1
12816: EQUAL
12817: IFFALSE 12838
// RuScientists = RuScientists diff [ i ] ;
12819: LD_ADDR_EXP 35
12823: PUSH
12824: LD_EXP 35
12828: PUSH
12829: LD_VAR 0 1
12833: PUSH
12834: EMPTY
12835: LIST
12836: DIFF
12837: ST_TO_ADDR
12838: GO 12804
12840: POP
12841: POP
// RemoveUnit ( i ) ;
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 64
// end ;
12851: GO 12791
12853: POP
12854: POP
// end ; end_of_file
12855: PPOPN 2
12857: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12858: LD_INT 0
12860: PPUSH
12861: PPUSH
// if exist_mode then
12862: LD_VAR 0 2
12866: IFFALSE 12885
// unit := CreateCharacter ( ident ) else
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: LD_VAR 0 1
12877: PPUSH
12878: CALL_OW 34
12882: ST_TO_ADDR
12883: GO 12900
// unit := NewCharacter ( ident ) ;
12885: LD_ADDR_VAR 0 4
12889: PUSH
12890: LD_VAR 0 1
12894: PPUSH
12895: CALL_OW 25
12899: ST_TO_ADDR
// result := unit ;
12900: LD_ADDR_VAR 0 3
12904: PUSH
12905: LD_VAR 0 4
12909: ST_TO_ADDR
// end ;
12910: LD_VAR 0 3
12914: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12915: LD_INT 0
12917: PPUSH
12918: PPUSH
// for i in charactersList do
12919: LD_ADDR_VAR 0 4
12923: PUSH
12924: LD_VAR 0 1
12928: PUSH
12929: FOR_IN
12930: IFFALSE 12959
// begin if IsOk ( i ) then
12932: LD_VAR 0 4
12936: PPUSH
12937: CALL_OW 302
12941: IFFALSE 12957
// SaveCharacters ( i , ident ) ;
12943: LD_VAR 0 4
12947: PPUSH
12948: LD_VAR 0 2
12952: PPUSH
12953: CALL_OW 38
// end ;
12957: GO 12929
12959: POP
12960: POP
// end ;
12961: LD_VAR 0 3
12965: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12966: LD_INT 0
12968: PPUSH
12969: PPUSH
12970: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12971: LD_ADDR_VAR 0 1
12975: PUSH
12976: LD_VAR 0 1
12980: PUSH
12981: LD_EXP 1
12985: PUSH
12986: LD_EXP 7
12990: PUSH
12991: LD_EXP 3
12995: PUSH
12996: LD_EXP 4
13000: PUSH
13001: LD_EXP 5
13005: PUSH
13006: LD_EXP 2
13010: PUSH
13011: LD_EXP 12
13015: PUSH
13016: LD_EXP 13
13020: PUSH
13021: LD_EXP 9
13025: PUSH
13026: LD_EXP 11
13030: PUSH
13031: LD_EXP 6
13035: PUSH
13036: LD_EXP 8
13040: PUSH
13041: LD_EXP 10
13045: PUSH
13046: LD_EXP 22
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: DIFF
13067: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: LD_INT 1
13075: PPUSH
13076: LD_VAR 0 1
13080: PPUSH
13081: CALL_OW 12
13085: ST_TO_ADDR
// for i = 1 to characters do
13086: LD_ADDR_VAR 0 5
13090: PUSH
13091: DOUBLE
13092: LD_INT 1
13094: DEC
13095: ST_TO_ADDR
13096: LD_VAR 0 1
13100: PUSH
13101: FOR_TO
13102: IFFALSE 13212
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13104: LD_VAR 0 5
13108: PUSH
13109: LD_VAR 0 6
13113: EQUAL
13114: PUSH
13115: LD_VAR 0 1
13119: PUSH
13120: LD_VAR 0 5
13124: ARRAY
13125: PPUSH
13126: CALL_OW 258
13130: PUSH
13131: LD_INT 1
13133: EQUAL
13134: AND
13135: IFFALSE 13157
// Say ( characters [ i ] , dialogMID ) ;
13137: LD_VAR 0 1
13141: PUSH
13142: LD_VAR 0 5
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 2
13152: PPUSH
13153: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13157: LD_VAR 0 5
13161: PUSH
13162: LD_VAR 0 6
13166: EQUAL
13167: PUSH
13168: LD_VAR 0 1
13172: PUSH
13173: LD_VAR 0 5
13177: ARRAY
13178: PPUSH
13179: CALL_OW 258
13183: PUSH
13184: LD_INT 2
13186: EQUAL
13187: AND
13188: IFFALSE 13210
// Say ( characters [ i ] , dialogFID ) ;
13190: LD_VAR 0 1
13194: PUSH
13195: LD_VAR 0 5
13199: ARRAY
13200: PPUSH
13201: LD_VAR 0 3
13205: PPUSH
13206: CALL_OW 88
// end ;
13210: GO 13101
13212: POP
13213: POP
// end ;
13214: LD_VAR 0 4
13218: RET
// export function PrepareDifficulty ; var tmp ; begin
13219: LD_INT 0
13221: PPUSH
13222: PPUSH
// if Difficulty = 1 then
13223: LD_OWVAR 67
13227: PUSH
13228: LD_INT 1
13230: EQUAL
13231: IFFALSE 13249
// begin RuSolMinLevel = 8 ;
13233: LD_ADDR_EXP 37
13237: PUSH
13238: LD_INT 8
13240: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13241: LD_ADDR_EXP 38
13245: PUSH
13246: LD_INT 10
13248: ST_TO_ADDR
// end ; if Difficulty = 2 then
13249: LD_OWVAR 67
13253: PUSH
13254: LD_INT 2
13256: EQUAL
13257: IFFALSE 13351
// begin RuSolMinLevel = 9 ;
13259: LD_ADDR_EXP 37
13263: PUSH
13264: LD_INT 9
13266: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13267: LD_ADDR_EXP 38
13271: PUSH
13272: LD_INT 10
13274: ST_TO_ADDR
// uc_nation = 3 ;
13275: LD_ADDR_OWVAR 21
13279: PUSH
13280: LD_INT 3
13282: ST_TO_ADDR
// uc_side = 3 ;
13283: LD_ADDR_OWVAR 20
13287: PUSH
13288: LD_INT 3
13290: ST_TO_ADDR
// bc_level = 10 ;
13291: LD_ADDR_OWVAR 43
13295: PUSH
13296: LD_INT 10
13298: ST_TO_ADDR
// bc_type = b_turret ;
13299: LD_ADDR_OWVAR 42
13303: PUSH
13304: LD_INT 33
13306: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13307: LD_ADDR_VAR 0 2
13311: PUSH
13312: LD_INT 86
13314: PPUSH
13315: LD_INT 34
13317: PPUSH
13318: LD_INT 2
13320: PPUSH
13321: CALL_OW 47
13325: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13326: LD_VAR 0 2
13330: PPUSH
13331: LD_INT 49
13333: PPUSH
13334: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13338: LD_INT 64
13340: PPUSH
13341: LD_INT 3
13343: PPUSH
13344: LD_INT 1
13346: PPUSH
13347: CALL_OW 322
// end ; if Difficulty = 3 then
13351: LD_OWVAR 67
13355: PUSH
13356: LD_INT 3
13358: EQUAL
13359: IFFALSE 13497
// begin RuSolMinLevel = 10 ;
13361: LD_ADDR_EXP 37
13365: PUSH
13366: LD_INT 10
13368: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13369: LD_ADDR_EXP 38
13373: PUSH
13374: LD_INT 10
13376: ST_TO_ADDR
// uc_nation = 3 ;
13377: LD_ADDR_OWVAR 21
13381: PUSH
13382: LD_INT 3
13384: ST_TO_ADDR
// uc_side = 3 ;
13385: LD_ADDR_OWVAR 20
13389: PUSH
13390: LD_INT 3
13392: ST_TO_ADDR
// bc_level = 10 ;
13393: LD_ADDR_OWVAR 43
13397: PUSH
13398: LD_INT 10
13400: ST_TO_ADDR
// bc_type = b_turret ;
13401: LD_ADDR_OWVAR 42
13405: PUSH
13406: LD_INT 33
13408: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13409: LD_ADDR_VAR 0 2
13413: PUSH
13414: LD_INT 86
13416: PPUSH
13417: LD_INT 34
13419: PPUSH
13420: LD_INT 2
13422: PPUSH
13423: CALL_OW 47
13427: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13428: LD_VAR 0 2
13432: PPUSH
13433: LD_INT 49
13435: PPUSH
13436: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13440: LD_ADDR_VAR 0 2
13444: PUSH
13445: LD_INT 93
13447: PPUSH
13448: LD_INT 31
13450: PPUSH
13451: LD_INT 2
13453: PPUSH
13454: CALL_OW 47
13458: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13459: LD_VAR 0 2
13463: PPUSH
13464: LD_INT 49
13466: PPUSH
13467: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13471: LD_INT 64
13473: PPUSH
13474: LD_INT 3
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13484: LD_INT 65
13486: PPUSH
13487: LD_INT 3
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 322
// end ; end ;
13497: LD_VAR 0 1
13501: RET
// export function ShowQuery1 ; begin
13502: LD_INT 0
13504: PPUSH
// case query ( Q1 ) of 1 :
13505: LD_STRING Q1
13507: PPUSH
13508: CALL_OW 97
13512: PUSH
13513: LD_INT 1
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13532
13521: POP
// result = 1 ; 2 :
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_INT 1
13529: ST_TO_ADDR
13530: GO 13571
13532: LD_INT 2
13534: DOUBLE
13535: EQUAL
13536: IFTRUE 13540
13538: GO 13551
13540: POP
// result = 2 ; 3 :
13541: LD_ADDR_VAR 0 1
13545: PUSH
13546: LD_INT 2
13548: ST_TO_ADDR
13549: GO 13571
13551: LD_INT 3
13553: DOUBLE
13554: EQUAL
13555: IFTRUE 13559
13557: GO 13570
13559: POP
// result = 3 ; end ;
13560: LD_ADDR_VAR 0 1
13564: PUSH
13565: LD_INT 3
13567: ST_TO_ADDR
13568: GO 13571
13570: POP
// end ;
13571: LD_VAR 0 1
13575: RET
// export function ShowQuery2 ; begin
13576: LD_INT 0
13578: PPUSH
// case query ( Q1a ) of 1 :
13579: LD_STRING Q1a
13581: PPUSH
13582: CALL_OW 97
13586: PUSH
13587: LD_INT 1
13589: DOUBLE
13590: EQUAL
13591: IFTRUE 13595
13593: GO 13606
13595: POP
// result = 1 ; 2 :
13596: LD_ADDR_VAR 0 1
13600: PUSH
13601: LD_INT 1
13603: ST_TO_ADDR
13604: GO 13645
13606: LD_INT 2
13608: DOUBLE
13609: EQUAL
13610: IFTRUE 13614
13612: GO 13625
13614: POP
// result = 2 ; 3 :
13615: LD_ADDR_VAR 0 1
13619: PUSH
13620: LD_INT 2
13622: ST_TO_ADDR
13623: GO 13645
13625: LD_INT 3
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13644
13633: POP
// result = 3 ; end ;
13634: LD_ADDR_VAR 0 1
13638: PUSH
13639: LD_INT 3
13641: ST_TO_ADDR
13642: GO 13645
13644: POP
// end ;
13645: LD_VAR 0 1
13649: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
13654: PPUSH
13655: PPUSH
13656: PPUSH
// for i = 1 to count do
13657: LD_ADDR_VAR 0 8
13661: PUSH
13662: DOUBLE
13663: LD_INT 1
13665: DEC
13666: ST_TO_ADDR
13667: LD_VAR 0 6
13671: PUSH
13672: FOR_TO
13673: IFFALSE 13754
// begin uc_side = side ;
13675: LD_ADDR_OWVAR 20
13679: PUSH
13680: LD_VAR 0 1
13684: ST_TO_ADDR
// uc_nation = nation ;
13685: LD_ADDR_OWVAR 21
13689: PUSH
13690: LD_VAR 0 2
13694: ST_TO_ADDR
// hc_gallery =  ;
13695: LD_ADDR_OWVAR 33
13699: PUSH
13700: LD_STRING 
13702: ST_TO_ADDR
// hc_name =  ;
13703: LD_ADDR_OWVAR 26
13707: PUSH
13708: LD_STRING 
13710: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13711: LD_INT 0
13713: PPUSH
13714: LD_VAR 0 5
13718: PPUSH
13719: LD_VAR 0 4
13723: PPUSH
13724: CALL_OW 380
// un = CreateHuman ;
13728: LD_ADDR_VAR 0 10
13732: PUSH
13733: CALL_OW 44
13737: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13738: LD_VAR 0 10
13742: PPUSH
13743: LD_VAR 0 3
13747: PPUSH
13748: CALL_OW 52
// end ;
13752: GO 13672
13754: POP
13755: POP
// end ;
13756: LD_VAR 0 7
13760: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13761: LD_INT 0
13763: PPUSH
13764: PPUSH
13765: PPUSH
13766: PPUSH
// for i = 1 to 72 do
13767: LD_ADDR_VAR 0 5
13771: PUSH
13772: DOUBLE
13773: LD_INT 1
13775: DEC
13776: ST_TO_ADDR
13777: LD_INT 72
13779: PUSH
13780: FOR_TO
13781: IFFALSE 13839
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13783: LD_VAR 0 5
13787: PPUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 321
13797: PUSH
13798: LD_INT 1
13800: EQUAL
13801: PUSH
13802: LD_VAR 0 5
13806: PPUSH
13807: LD_VAR 0 3
13811: PPUSH
13812: CALL_OW 482
13816: PUSH
13817: LD_INT 1
13819: EQUAL
13820: AND
13821: IFFALSE 13837
// AddComResearch ( lab , i ) ;
13823: LD_VAR 0 2
13827: PPUSH
13828: LD_VAR 0 5
13832: PPUSH
13833: CALL_OW 184
13837: GO 13780
13839: POP
13840: POP
// end ;
13841: LD_VAR 0 4
13845: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13846: LD_INT 0
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13854: LD_ADDR_VAR 0 8
13858: PUSH
13859: LD_VAR 0 2
13863: PPUSH
13864: CALL_OW 313
13868: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13869: LD_ADDR_VAR 0 9
13873: PUSH
13874: LD_VAR 0 3
13878: PPUSH
13879: LD_INT 22
13881: PUSH
13882: LD_VAR 0 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 25
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 24
13903: PUSH
13904: LD_INT 750
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 3
13913: PUSH
13914: LD_INT 54
13916: PUSH
13917: EMPTY
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 70
13934: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13935: LD_ADDR_VAR 0 6
13939: PUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 22
13947: PUSH
13948: LD_VAR 0 1
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 21
13959: PUSH
13960: LD_INT 3
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 3
13969: PUSH
13970: LD_INT 24
13972: PUSH
13973: LD_INT 1000
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: PPUSH
13992: CALL_OW 70
13996: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13997: LD_VAR 0 6
14001: NOT
14002: PUSH
14003: LD_INT 22
14005: PUSH
14006: LD_VAR 0 1
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 25
14017: PUSH
14018: LD_INT 2
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 24
14027: PUSH
14028: LD_INT 250
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: PPUSH
14040: CALL_OW 69
14044: NOT
14045: AND
14046: IFFALSE 14050
// exit ;
14048: GO 14232
// if buildings_list > 0 and engineerOkInside then
14050: LD_VAR 0 6
14054: PUSH
14055: LD_INT 0
14057: GREATER
14058: PUSH
14059: LD_VAR 0 8
14063: AND
14064: IFFALSE 14075
// ComExitBuilding ( engineerOkInside ) ;
14066: LD_VAR 0 8
14070: PPUSH
14071: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14075: LD_VAR 0 6
14079: PUSH
14080: LD_INT 0
14082: GREATER
14083: PUSH
14084: LD_VAR 0 9
14088: PUSH
14089: LD_INT 0
14091: GREATER
14092: AND
14093: IFFALSE 14113
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14095: LD_VAR 0 9
14099: PPUSH
14100: LD_VAR 0 6
14104: PUSH
14105: LD_INT 1
14107: ARRAY
14108: PPUSH
14109: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14113: LD_VAR 0 6
14117: PUSH
14118: LD_INT 0
14120: EQUAL
14121: PUSH
14122: LD_VAR 0 4
14126: PUSH
14127: LD_INT 0
14129: EQUAL
14130: AND
14131: PUSH
14132: LD_VAR 0 9
14136: PUSH
14137: LD_INT 0
14139: GREATER
14140: AND
14141: IFFALSE 14157
// ComEnterUnit ( engineerOkOutside , building ) ;
14143: LD_VAR 0 9
14147: PPUSH
14148: LD_VAR 0 2
14152: PPUSH
14153: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14157: LD_VAR 0 9
14161: PUSH
14162: LD_INT 0
14164: GREATER
14165: PUSH
14166: LD_VAR 0 6
14170: PUSH
14171: LD_INT 0
14173: EQUAL
14174: AND
14175: PUSH
14176: LD_VAR 0 4
14180: PUSH
14181: LD_INT 0
14183: GREATER
14184: AND
14185: IFFALSE 14232
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14187: LD_VAR 0 9
14191: PPUSH
14192: LD_VAR 0 4
14196: PUSH
14197: LD_INT 1
14199: ARRAY
14200: PPUSH
14201: LD_VAR 0 4
14205: PUSH
14206: LD_INT 2
14208: ARRAY
14209: PPUSH
14210: LD_VAR 0 4
14214: PUSH
14215: LD_INT 3
14217: ARRAY
14218: PPUSH
14219: LD_VAR 0 4
14223: PUSH
14224: LD_INT 4
14226: ARRAY
14227: PPUSH
14228: CALL_OW 145
// end ;
14232: LD_VAR 0 5
14236: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14237: LD_INT 0
14239: PPUSH
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
14246: PPUSH
14247: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14248: LD_ADDR_VAR 0 6
14252: PUSH
14253: LD_INT 22
14255: PUSH
14256: LD_VAR 0 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 4
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 24
14277: PUSH
14278: LD_INT 251
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: PPUSH
14290: CALL_OW 69
14294: PUSH
14295: LD_EXP 35
14299: PUSH
14300: EMPTY
14301: LIST
14302: DIFF
14303: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14304: LD_ADDR_VAR 0 7
14308: PUSH
14309: LD_VAR 0 3
14313: PPUSH
14314: LD_INT 22
14316: PUSH
14317: LD_VAR 0 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 25
14328: PUSH
14329: LD_INT 4
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 50
14338: PUSH
14339: EMPTY
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: PPUSH
14347: CALL_OW 70
14351: PUSH
14352: LD_EXP 35
14356: PUSH
14357: EMPTY
14358: LIST
14359: DIFF
14360: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14361: LD_ADDR_VAR 0 10
14365: PUSH
14366: LD_VAR 0 3
14370: PPUSH
14371: LD_INT 22
14373: PUSH
14374: LD_VAR 0 1
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 21
14385: PUSH
14386: LD_INT 1
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 3
14395: PUSH
14396: LD_INT 24
14398: PUSH
14399: LD_INT 750
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 70
14419: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14420: LD_ADDR_VAR 0 11
14424: PUSH
14425: LD_VAR 0 2
14429: PPUSH
14430: LD_INT 22
14432: PUSH
14433: LD_VAR 0 1
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 21
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 3
14454: PUSH
14455: LD_INT 24
14457: PUSH
14458: LD_INT 1000
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: PPUSH
14474: CALL_OW 70
14478: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14479: LD_VAR 0 10
14483: PUSH
14484: LD_INT 0
14486: GREATER
14487: PUSH
14488: LD_VAR 0 6
14492: PUSH
14493: LD_INT 0
14495: GREATER
14496: AND
14497: IFFALSE 14513
// ComMoveToArea ( damageUnits , healArea ) ;
14499: LD_VAR 0 10
14503: PPUSH
14504: LD_VAR 0 2
14508: PPUSH
14509: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
14513: LD_VAR 0 11
14517: PUSH
14518: LD_INT 0
14520: GREATER
14521: PUSH
14522: LD_VAR 0 7
14526: PUSH
14527: LD_INT 0
14529: GREATER
14530: AND
14531: IFFALSE 14551
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
14533: LD_VAR 0 7
14537: PPUSH
14538: LD_VAR 0 11
14542: PUSH
14543: LD_INT 1
14545: ARRAY
14546: PPUSH
14547: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14551: LD_VAR 0 10
14555: PUSH
14556: LD_INT 0
14558: EQUAL
14559: PUSH
14560: LD_VAR 0 11
14564: PUSH
14565: LD_INT 0
14567: EQUAL
14568: AND
14569: PUSH
14570: LD_VAR 0 7
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: AND
14579: IFFALSE 14684
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14581: LD_ADDR_VAR 0 12
14585: PUSH
14586: LD_INT 22
14588: PUSH
14589: LD_VAR 0 1
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 21
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 30
14610: PUSH
14611: LD_INT 8
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 69
14627: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14628: LD_ADDR_VAR 0 13
14632: PUSH
14633: LD_INT 1
14635: PPUSH
14636: LD_VAR 0 12
14640: PPUSH
14641: CALL_OW 12
14645: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14646: LD_VAR 0 7
14650: PPUSH
14651: LD_INT 3
14653: PUSH
14654: LD_INT 60
14656: PUSH
14657: EMPTY
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PPUSH
14664: CALL_OW 72
14668: PPUSH
14669: LD_VAR 0 12
14673: PUSH
14674: LD_VAR 0 13
14678: ARRAY
14679: PPUSH
14680: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14684: LD_VAR 0 3
14688: PPUSH
14689: LD_INT 22
14691: PUSH
14692: LD_VAR 0 1
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 25
14703: PUSH
14704: LD_INT 3
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 24
14713: PUSH
14714: LD_INT 751
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 70
14730: PUSH
14731: LD_INT 0
14733: GREATER
14734: PUSH
14735: LD_INT 21
14737: PPUSH
14738: CALL_OW 302
14742: AND
14743: PUSH
14744: LD_INT 21
14746: PPUSH
14747: CALL_OW 255
14751: PUSH
14752: LD_INT 3
14754: EQUAL
14755: AND
14756: IFFALSE 14812
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14758: LD_VAR 0 3
14762: PPUSH
14763: LD_INT 22
14765: PUSH
14766: LD_VAR 0 1
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 25
14777: PUSH
14778: LD_INT 3
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 24
14787: PUSH
14788: LD_INT 751
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 70
14804: PPUSH
14805: LD_INT 21
14807: PPUSH
14808: CALL_OW 120
// end ;
14812: LD_VAR 0 5
14816: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14821: LD_INT 22
14823: PUSH
14824: LD_VAR 0 1
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 21
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 69
14851: PUSH
14852: LD_INT 18
14854: PPUSH
14855: LD_INT 22
14857: PUSH
14858: LD_VAR 0 1
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 21
14869: PUSH
14870: LD_INT 2
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PPUSH
14881: CALL_OW 70
14885: PUSH
14886: LD_VAR 0 3
14890: LESSEQUAL
14891: DIFF
14892: IFFALSE 14959
// for i = 1 to vehCount do
14894: LD_ADDR_VAR 0 9
14898: PUSH
14899: DOUBLE
14900: LD_INT 1
14902: DEC
14903: ST_TO_ADDR
14904: LD_VAR 0 3
14908: PUSH
14909: FOR_TO
14910: IFFALSE 14957
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14912: LD_VAR 0 2
14916: PPUSH
14917: LD_VAR 0 7
14921: PPUSH
14922: LD_VAR 0 5
14926: PPUSH
14927: LD_VAR 0 6
14931: PPUSH
14932: LD_VAR 0 4
14936: PUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_VAR 0 4
14944: PPUSH
14945: CALL_OW 12
14949: ARRAY
14950: PPUSH
14951: CALL_OW 185
14955: GO 14909
14957: POP
14958: POP
// end ;
14959: LD_VAR 0 8
14963: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14964: LD_INT 0
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
14970: PPUSH
14971: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14972: LD_EXP 40
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: LD_INT 4
14982: PUSH
14983: LD_INT 4
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: PUSH
14991: LD_OWVAR 67
14995: ARRAY
14996: GREATEREQUAL
14997: PUSH
14998: LD_EXP 41
15002: PUSH
15003: LD_INT 1
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: LD_INT 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: LD_OWVAR 67
15021: ARRAY
15022: GREATEREQUAL
15023: AND
15024: IFFALSE 15257
// begin repeat wait ( 0 0$3 ) ;
15026: LD_INT 105
15028: PPUSH
15029: CALL_OW 67
// for j in russianTanks do
15033: LD_ADDR_VAR 0 4
15037: PUSH
15038: LD_EXP 40
15042: PUSH
15043: FOR_IN
15044: IFFALSE 15245
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15046: LD_ADDR_VAR 0 6
15050: PUSH
15051: LD_INT 81
15053: PUSH
15054: LD_VAR 0 1
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 101
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PPUSH
15077: CALL_OW 69
15081: PPUSH
15082: LD_VAR 0 4
15086: PPUSH
15087: CALL_OW 74
15091: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15092: LD_ADDR_VAR 0 7
15096: PUSH
15097: LD_INT 81
15099: PUSH
15100: LD_VAR 0 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 101
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: LD_INT 59
15124: PUSH
15125: EMPTY
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 1
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 21
15140: PUSH
15141: LD_INT 2
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: PPUSH
15162: CALL_OW 69
15166: PPUSH
15167: LD_VAR 0 4
15171: PPUSH
15172: CALL_OW 74
15176: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
15177: LD_VAR 0 4
15181: PPUSH
15182: LD_VAR 0 6
15186: PPUSH
15187: CALL_OW 296
15191: PUSH
15192: LD_INT 8
15194: PLUS
15195: PUSH
15196: LD_VAR 0 4
15200: PPUSH
15201: LD_VAR 0 7
15205: PPUSH
15206: CALL_OW 296
15210: LESS
15211: IFFALSE 15229
// ComAttackUnit ( j , target1 ) else
15213: LD_VAR 0 4
15217: PPUSH
15218: LD_VAR 0 6
15222: PPUSH
15223: CALL_OW 115
15227: GO 15243
// ComAttackUnit ( j , target2 ) ;
15229: LD_VAR 0 4
15233: PPUSH
15234: LD_VAR 0 7
15238: PPUSH
15239: CALL_OW 115
// end ;
15243: GO 15043
15245: POP
15246: POP
// until russianTanks = 0 ;
15247: LD_EXP 40
15251: PUSH
15252: LD_INT 0
15254: EQUAL
15255: IFFALSE 15026
// end ; end ;
15257: LD_VAR 0 2
15261: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
15262: LD_INT 0
15264: PPUSH
15265: PPUSH
15266: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15267: LD_EXP 40
15271: PUSH
15272: LD_INT 1
15274: GREATEREQUAL
15275: PUSH
15276: LD_EXP 41
15280: PUSH
15281: LD_INT 1
15283: PUSH
15284: LD_INT 2
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: PUSH
15295: LD_OWVAR 67
15299: ARRAY
15300: GREATEREQUAL
15301: AND
15302: IFFALSE 15452
// repeat wait ( 0 0$3 ) ;
15304: LD_INT 105
15306: PPUSH
15307: CALL_OW 67
// if russianTimeLapsers > 0 then
15311: LD_EXP 41
15315: PUSH
15316: LD_INT 0
15318: GREATER
15319: IFFALSE 15442
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
15321: LD_ADDR_VAR 0 3
15325: PUSH
15326: LD_EXP 41
15330: PPUSH
15331: LD_INT 3
15333: PUSH
15334: LD_INT 60
15336: PUSH
15337: EMPTY
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 72
15348: PUSH
15349: FOR_IN
15350: IFFALSE 15440
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
15352: LD_ADDR_VAR 0 4
15356: PUSH
15357: LD_INT 81
15359: PUSH
15360: LD_VAR 0 1
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 101
15371: PUSH
15372: LD_INT 1
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 21
15381: PUSH
15382: LD_INT 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: PPUSH
15394: CALL_OW 69
15398: PPUSH
15399: LD_VAR 0 3
15403: PPUSH
15404: CALL_OW 74
15408: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
15409: LD_VAR 0 3
15413: PPUSH
15414: LD_VAR 0 4
15418: PPUSH
15419: CALL_OW 250
15423: PPUSH
15424: LD_VAR 0 4
15428: PPUSH
15429: CALL_OW 251
15433: PPUSH
15434: CALL_OW 111
// end ;
15438: GO 15349
15440: POP
15441: POP
// until russianTimeLapsers = 0 ;
15442: LD_EXP 41
15446: PUSH
15447: LD_INT 0
15449: EQUAL
15450: IFFALSE 15304
// end ;
15452: LD_VAR 0 2
15456: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15457: LD_INT 0
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15465: LD_ADDR_VAR 0 6
15469: PUSH
15470: LD_INT 22
15472: PUSH
15473: LD_VAR 0 1
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 25
15484: PUSH
15485: LD_INT 9
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 69
15500: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15501: LD_ADDR_VAR 0 7
15505: PUSH
15506: LD_INT 81
15508: PUSH
15509: LD_VAR 0 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 3
15520: PUSH
15521: LD_INT 21
15523: PUSH
15524: LD_INT 3
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15544: LD_ADDR_VAR 0 4
15548: PUSH
15549: LD_INT 1
15551: PPUSH
15552: LD_INT 3
15554: PPUSH
15555: CALL_OW 12
15559: ST_TO_ADDR
// for i = 1 to list do
15560: LD_ADDR_VAR 0 5
15564: PUSH
15565: DOUBLE
15566: LD_INT 1
15568: DEC
15569: ST_TO_ADDR
15570: LD_VAR 0 6
15574: PUSH
15575: FOR_TO
15576: IFFALSE 15778
// for ta in filter do
15578: LD_ADDR_VAR 0 3
15582: PUSH
15583: LD_VAR 0 7
15587: PUSH
15588: FOR_IN
15589: IFFALSE 15774
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15591: LD_VAR 0 6
15595: PUSH
15596: LD_VAR 0 5
15600: ARRAY
15601: PPUSH
15602: LD_VAR 0 3
15606: PPUSH
15607: CALL_OW 296
15611: PUSH
15612: LD_INT 15
15614: LESSEQUAL
15615: IFFALSE 15772
// begin case c of 1 :
15617: LD_VAR 0 4
15621: PUSH
15622: LD_INT 1
15624: DOUBLE
15625: EQUAL
15626: IFTRUE 15630
15628: GO 15668
15630: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15631: LD_VAR 0 6
15635: PUSH
15636: LD_VAR 0 5
15640: ARRAY
15641: PPUSH
15642: LD_VAR 0 3
15646: PPUSH
15647: CALL_OW 250
15651: PPUSH
15652: LD_VAR 0 3
15656: PPUSH
15657: CALL_OW 251
15661: PPUSH
15662: CALL_OW 154
15666: GO 15772
15668: LD_INT 2
15670: DOUBLE
15671: EQUAL
15672: IFTRUE 15676
15674: GO 15740
15676: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15677: LD_VAR 0 6
15681: PUSH
15682: LD_VAR 0 5
15686: ARRAY
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: CALL_OW 250
15697: PUSH
15698: LD_INT 1
15700: NEG
15701: PPUSH
15702: LD_INT 1
15704: PPUSH
15705: CALL_OW 12
15709: PLUS
15710: PPUSH
15711: LD_VAR 0 3
15715: PPUSH
15716: CALL_OW 251
15720: PUSH
15721: LD_INT 1
15723: NEG
15724: PPUSH
15725: LD_INT 1
15727: PPUSH
15728: CALL_OW 12
15732: PLUS
15733: PPUSH
15734: CALL_OW 153
15738: GO 15772
15740: LD_INT 3
15742: DOUBLE
15743: EQUAL
15744: IFTRUE 15748
15746: GO 15771
15748: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15749: LD_VAR 0 6
15753: PUSH
15754: LD_VAR 0 5
15758: ARRAY
15759: PPUSH
15760: LD_VAR 0 3
15764: PPUSH
15765: CALL_OW 115
15769: GO 15772
15771: POP
// end ; end ;
15772: GO 15588
15774: POP
15775: POP
15776: GO 15575
15778: POP
15779: POP
// end ;
15780: LD_VAR 0 2
15784: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15785: LD_INT 0
15787: PPUSH
15788: PPUSH
15789: PPUSH
15790: PPUSH
// r := 100 ;
15791: LD_ADDR_VAR 0 5
15795: PUSH
15796: LD_INT 100
15798: ST_TO_ADDR
// x := 0 ;
15799: LD_ADDR_VAR 0 6
15803: PUSH
15804: LD_INT 0
15806: ST_TO_ADDR
// while ( x < n ) do
15807: LD_VAR 0 6
15811: PUSH
15812: LD_VAR 0 2
15816: LESS
15817: IFFALSE 16104
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15819: LD_ADDR_VAR 0 4
15823: PUSH
15824: DOUBLE
15825: LD_INT 1
15827: DEC
15828: ST_TO_ADDR
15829: LD_VAR 0 1
15833: PPUSH
15834: LD_INT 0
15836: PPUSH
15837: CALL_OW 517
15841: PUSH
15842: LD_INT 1
15844: ARRAY
15845: PUSH
15846: FOR_TO
15847: IFFALSE 16100
// begin if r > 50 then
15849: LD_VAR 0 5
15853: PUSH
15854: LD_INT 50
15856: GREATER
15857: IFFALSE 16076
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15859: LD_VAR 0 1
15863: PPUSH
15864: LD_INT 0
15866: PPUSH
15867: CALL_OW 517
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PUSH
15876: LD_VAR 0 4
15880: ARRAY
15881: PPUSH
15882: LD_VAR 0 1
15886: PPUSH
15887: LD_INT 0
15889: PPUSH
15890: CALL_OW 517
15894: PUSH
15895: LD_INT 2
15897: ARRAY
15898: PUSH
15899: LD_VAR 0 4
15903: ARRAY
15904: PPUSH
15905: CALL_OW 458
15909: NOT
15910: IFFALSE 16060
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15912: LD_VAR 0 1
15916: PPUSH
15917: LD_INT 0
15919: PPUSH
15920: CALL_OW 517
15924: PUSH
15925: LD_INT 1
15927: ARRAY
15928: PUSH
15929: LD_VAR 0 4
15933: ARRAY
15934: PPUSH
15935: LD_VAR 0 1
15939: PPUSH
15940: LD_INT 0
15942: PPUSH
15943: CALL_OW 517
15947: PUSH
15948: LD_INT 2
15950: ARRAY
15951: PUSH
15952: LD_VAR 0 4
15956: ARRAY
15957: PPUSH
15958: LD_INT 5
15960: PPUSH
15961: LD_INT 0
15963: PPUSH
15964: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15968: LD_ADDR_EXP 45
15972: PUSH
15973: LD_EXP 45
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: LD_INT 0
15988: PPUSH
15989: CALL_OW 517
15993: PUSH
15994: LD_INT 1
15996: ARRAY
15997: PUSH
15998: LD_VAR 0 4
16002: ARRAY
16003: PUSH
16004: LD_VAR 0 1
16008: PPUSH
16009: LD_INT 0
16011: PPUSH
16012: CALL_OW 517
16016: PUSH
16017: LD_INT 2
16019: ARRAY
16020: PUSH
16021: LD_VAR 0 4
16025: ARRAY
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 2
16035: ST_TO_ADDR
// r := 0 ;
16036: LD_ADDR_VAR 0 5
16040: PUSH
16041: LD_INT 0
16043: ST_TO_ADDR
// x := x + 1 ;
16044: LD_ADDR_VAR 0 6
16048: PUSH
16049: LD_VAR 0 6
16053: PUSH
16054: LD_INT 1
16056: PLUS
16057: ST_TO_ADDR
// end else
16058: GO 16074
// r := r + 35 ;
16060: LD_ADDR_VAR 0 5
16064: PUSH
16065: LD_VAR 0 5
16069: PUSH
16070: LD_INT 35
16072: PLUS
16073: ST_TO_ADDR
// end else
16074: GO 16098
// r := r + rand ( 10 , 25 ) ;
16076: LD_ADDR_VAR 0 5
16080: PUSH
16081: LD_VAR 0 5
16085: PUSH
16086: LD_INT 10
16088: PPUSH
16089: LD_INT 25
16091: PPUSH
16092: CALL_OW 12
16096: PLUS
16097: ST_TO_ADDR
// end ;
16098: GO 15846
16100: POP
16101: POP
16102: GO 15807
// end ;
16104: LD_VAR 0 3
16108: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
16109: LD_INT 0
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
// tmpTab = [ ] ;
16115: LD_ADDR_VAR 0 6
16119: PUSH
16120: EMPTY
16121: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
16122: LD_INT 22
16124: PUSH
16125: LD_VAR 0 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 30
16136: PUSH
16137: LD_INT 32
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PPUSH
16148: CALL_OW 69
16152: PUSH
16153: LD_INT 0
16155: GREATER
16156: IFFALSE 16239
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
16158: LD_ADDR_VAR 0 4
16162: PUSH
16163: LD_INT 22
16165: PUSH
16166: LD_VAR 0 1
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 30
16177: PUSH
16178: LD_INT 32
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: PUSH
16194: FOR_IN
16195: IFFALSE 16237
// begin for j in UnitsInside ( i ) do
16197: LD_ADDR_VAR 0 5
16201: PUSH
16202: LD_VAR 0 4
16206: PPUSH
16207: CALL_OW 313
16211: PUSH
16212: FOR_IN
16213: IFFALSE 16233
// tmpTab = tmpTab ^ j ;
16215: LD_ADDR_VAR 0 6
16219: PUSH
16220: LD_VAR 0 6
16224: PUSH
16225: LD_VAR 0 5
16229: ADD
16230: ST_TO_ADDR
16231: GO 16212
16233: POP
16234: POP
// end ;
16235: GO 16194
16237: POP
16238: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
16239: LD_VAR 0 6
16243: PPUSH
16244: LD_VAR 0 2
16248: PPUSH
16249: CALL_OW 250
16253: PPUSH
16254: LD_VAR 0 2
16258: PPUSH
16259: CALL_OW 251
16263: PPUSH
16264: CALL_OW 114
// end ;
16268: LD_VAR 0 3
16272: RET
// export function PrepareNature ; var i , un ; begin
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
// uc_side := 0 ;
16278: LD_ADDR_OWVAR 20
16282: PUSH
16283: LD_INT 0
16285: ST_TO_ADDR
// uc_nation := 0 ;
16286: LD_ADDR_OWVAR 21
16290: PUSH
16291: LD_INT 0
16293: ST_TO_ADDR
// InitHc ;
16294: CALL_OW 19
// hc_class := class_fish ;
16298: LD_ADDR_OWVAR 28
16302: PUSH
16303: LD_INT 20
16305: ST_TO_ADDR
// for i = 1 to 6 do
16306: LD_ADDR_VAR 0 2
16310: PUSH
16311: DOUBLE
16312: LD_INT 1
16314: DEC
16315: ST_TO_ADDR
16316: LD_INT 6
16318: PUSH
16319: FOR_TO
16320: IFFALSE 16339
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
16322: CALL_OW 44
16326: PPUSH
16327: LD_INT 23
16329: PPUSH
16330: LD_INT 0
16332: PPUSH
16333: CALL_OW 49
16337: GO 16319
16339: POP
16340: POP
// for i = 1 to Difficulty + 2 do
16341: LD_ADDR_VAR 0 2
16345: PUSH
16346: DOUBLE
16347: LD_INT 1
16349: DEC
16350: ST_TO_ADDR
16351: LD_OWVAR 67
16355: PUSH
16356: LD_INT 2
16358: PLUS
16359: PUSH
16360: FOR_TO
16361: IFFALSE 16470
// begin hc_sex = sex_male ;
16363: LD_ADDR_OWVAR 27
16367: PUSH
16368: LD_INT 1
16370: ST_TO_ADDR
// uc_side = 0 ;
16371: LD_ADDR_OWVAR 20
16375: PUSH
16376: LD_INT 0
16378: ST_TO_ADDR
// uc_nation = nation_nature ;
16379: LD_ADDR_OWVAR 21
16383: PUSH
16384: LD_INT 0
16386: ST_TO_ADDR
// hc_class = class_tiger ;
16387: LD_ADDR_OWVAR 28
16391: PUSH
16392: LD_INT 14
16394: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16395: LD_ADDR_OWVAR 31
16399: PUSH
16400: LD_EXP 38
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16420: LD_ADDR_OWVAR 35
16424: PUSH
16425: LD_INT 5
16427: NEG
16428: PPUSH
16429: LD_INT 5
16431: PPUSH
16432: CALL_OW 12
16436: PUSH
16437: LD_OWVAR 67
16441: MUL
16442: ST_TO_ADDR
// un = CreateHuman ;
16443: LD_ADDR_VAR 0 3
16447: PUSH
16448: CALL_OW 44
16452: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16453: LD_VAR 0 3
16457: PPUSH
16458: LD_INT 24
16460: PPUSH
16461: LD_INT 0
16463: PPUSH
16464: CALL_OW 49
// end ;
16468: GO 16360
16470: POP
16471: POP
// for i = 1 to rand ( 3 , 4 ) do
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: DOUBLE
16478: LD_INT 1
16480: DEC
16481: ST_TO_ADDR
16482: LD_INT 3
16484: PPUSH
16485: LD_INT 4
16487: PPUSH
16488: CALL_OW 12
16492: PUSH
16493: FOR_TO
16494: IFFALSE 16586
// begin hc_sex = sex_male ;
16496: LD_ADDR_OWVAR 27
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
// uc_side = 0 ;
16504: LD_ADDR_OWVAR 20
16508: PUSH
16509: LD_INT 0
16511: ST_TO_ADDR
// uc_nation = nation_nature ;
16512: LD_ADDR_OWVAR 21
16516: PUSH
16517: LD_INT 0
16519: ST_TO_ADDR
// hc_class = 18 ;
16520: LD_ADDR_OWVAR 28
16524: PUSH
16525: LD_INT 18
16527: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16528: LD_ADDR_OWVAR 31
16532: PUSH
16533: LD_INT 0
16535: PUSH
16536: LD_INT 0
16538: PUSH
16539: LD_INT 0
16541: PUSH
16542: LD_INT 0
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: ST_TO_ADDR
// hc_agressivity = 0 ;
16551: LD_ADDR_OWVAR 35
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// un = CreateHuman ;
16559: LD_ADDR_VAR 0 3
16563: PUSH
16564: CALL_OW 44
16568: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16569: LD_VAR 0 3
16573: PPUSH
16574: LD_INT 24
16576: PPUSH
16577: LD_INT 0
16579: PPUSH
16580: CALL_OW 49
// end ;
16584: GO 16493
16586: POP
16587: POP
// for i = 1 to rand ( 1 , 3 ) do
16588: LD_ADDR_VAR 0 2
16592: PUSH
16593: DOUBLE
16594: LD_INT 1
16596: DEC
16597: ST_TO_ADDR
16598: LD_INT 1
16600: PPUSH
16601: LD_INT 3
16603: PPUSH
16604: CALL_OW 12
16608: PUSH
16609: FOR_TO
16610: IFFALSE 16758
// begin hc_sex = sex_male ;
16612: LD_ADDR_OWVAR 27
16616: PUSH
16617: LD_INT 1
16619: ST_TO_ADDR
// uc_side = 0 ;
16620: LD_ADDR_OWVAR 20
16624: PUSH
16625: LD_INT 0
16627: ST_TO_ADDR
// uc_nation = nation_nature ;
16628: LD_ADDR_OWVAR 21
16632: PUSH
16633: LD_INT 0
16635: ST_TO_ADDR
// hc_class = class_apeman ;
16636: LD_ADDR_OWVAR 28
16640: PUSH
16641: LD_INT 12
16643: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16644: LD_ADDR_OWVAR 31
16648: PUSH
16649: LD_EXP 37
16653: PPUSH
16654: LD_EXP 38
16658: PPUSH
16659: CALL_OW 12
16663: PUSH
16664: LD_EXP 37
16668: PPUSH
16669: LD_EXP 38
16673: PPUSH
16674: CALL_OW 12
16678: PUSH
16679: LD_EXP 37
16683: PPUSH
16684: LD_EXP 38
16688: PPUSH
16689: CALL_OW 12
16693: PUSH
16694: LD_EXP 37
16698: PPUSH
16699: LD_EXP 38
16703: PPUSH
16704: CALL_OW 12
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16715: LD_ADDR_OWVAR 35
16719: PUSH
16720: LD_INT 1
16722: PPUSH
16723: LD_INT 20
16725: PPUSH
16726: CALL_OW 12
16730: ST_TO_ADDR
// un = CreateHuman ;
16731: LD_ADDR_VAR 0 3
16735: PUSH
16736: CALL_OW 44
16740: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_INT 24
16748: PPUSH
16749: LD_INT 0
16751: PPUSH
16752: CALL_OW 49
// end ;
16756: GO 16609
16758: POP
16759: POP
// end ; end_of_file
16760: LD_VAR 0 1
16764: RET
// on UnitDestroyed ( unit ) do var i ;
16765: LD_INT 0
16767: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 255
16777: PUSH
16778: LD_INT 3
16780: EQUAL
16781: PUSH
16782: LD_VAR 0 1
16786: PPUSH
16787: CALL_OW 247
16791: PUSH
16792: LD_INT 1
16794: EQUAL
16795: AND
16796: IFFALSE 16860
// begin for i in RuScientists do
16798: LD_ADDR_VAR 0 2
16802: PUSH
16803: LD_EXP 35
16807: PUSH
16808: FOR_IN
16809: IFFALSE 16858
// if i = unit then
16811: LD_VAR 0 2
16815: PUSH
16816: LD_VAR 0 1
16820: EQUAL
16821: IFFALSE 16856
// begin RuScientists = RuScientists diff [ unit ] ;
16823: LD_ADDR_EXP 35
16827: PUSH
16828: LD_EXP 35
16832: PUSH
16833: LD_VAR 0 1
16837: PUSH
16838: EMPTY
16839: LIST
16840: DIFF
16841: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16842: LD_ADDR_EXP 36
16846: PUSH
16847: LD_EXP 36
16851: PUSH
16852: LD_INT 1
16854: PLUS
16855: ST_TO_ADDR
// end ;
16856: GO 16808
16858: POP
16859: POP
// end ; end ;
16860: PPOPN 2
16862: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16863: LD_VAR 0 1
16867: PUSH
16868: LD_INT 10
16870: EQUAL
16871: PUSH
16872: LD_VAR 0 2
16876: PPUSH
16877: CALL_OW 255
16881: PUSH
16882: LD_INT 1
16884: EQUAL
16885: AND
16886: PUSH
16887: LD_EXP 48
16891: PUSH
16892: LD_INT 0
16894: EQUAL
16895: AND
16896: IFFALSE 17008
// begin eventVar1 = 1 ;
16898: LD_ADDR_EXP 48
16902: PUSH
16903: LD_INT 1
16905: ST_TO_ADDR
// teleportExplored = 1 ;
16906: LD_ADDR_EXP 34
16910: PUSH
16911: LD_INT 1
16913: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16914: LD_STRING M2a
16916: PPUSH
16917: CALL_OW 337
// wait ( 0 0$2 ) ;
16921: LD_INT 70
16923: PPUSH
16924: CALL_OW 67
// DialogueOn ;
16928: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16932: LD_INT 22
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 21
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PPUSH
16956: CALL_OW 69
16960: PPUSH
16961: LD_STRING DT3a-Sol1-1
16963: PPUSH
16964: LD_STRING DT3a-FSol1-1
16966: PPUSH
16967: CALL 12966 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16971: LD_EXP 1
16975: PPUSH
16976: LD_STRING DT3a-JMM-1
16978: PPUSH
16979: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16983: LD_VAR 0 2
16987: PPUSH
16988: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16992: LD_EXP 1
16996: PPUSH
16997: LD_STRING DT3a-JMM-1a
16999: PPUSH
17000: CALL_OW 88
// DialogueOff ;
17004: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17008: LD_VAR 0 1
17012: PUSH
17013: LD_INT 10
17015: EQUAL
17016: PUSH
17017: LD_VAR 0 2
17021: PPUSH
17022: CALL_OW 247
17026: PUSH
17027: LD_INT 2
17029: EQUAL
17030: AND
17031: PUSH
17032: LD_VAR 0 2
17036: PPUSH
17037: CALL_OW 255
17041: PUSH
17042: LD_INT 3
17044: EQUAL
17045: AND
17046: PUSH
17047: LD_EXP 29
17051: PUSH
17052: LD_INT 0
17054: EQUAL
17055: AND
17056: IFFALSE 17073
// begin wait ( 0 0$3 ) ;
17058: LD_INT 105
17060: PPUSH
17061: CALL_OW 67
// vehicleTeleported = 1 ;
17065: LD_ADDR_EXP 29
17069: PUSH
17070: LD_INT 1
17072: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17073: LD_VAR 0 1
17077: PUSH
17078: LD_INT 10
17080: EQUAL
17081: PUSH
17082: LD_VAR 0 2
17086: PPUSH
17087: CALL_OW 247
17091: PUSH
17092: LD_INT 2
17094: EQUAL
17095: AND
17096: PUSH
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 255
17106: PUSH
17107: LD_INT 3
17109: EQUAL
17110: AND
17111: PUSH
17112: LD_EXP 29
17116: PUSH
17117: LD_INT 2
17119: EQUAL
17120: AND
17121: IFFALSE 17138
// begin wait ( 0 0$3 ) ;
17123: LD_INT 105
17125: PPUSH
17126: CALL_OW 67
// vehicleTeleported = 3 ;
17130: LD_ADDR_EXP 29
17134: PUSH
17135: LD_INT 3
17137: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
17138: LD_VAR 0 1
17142: PUSH
17143: LD_INT 10
17145: EQUAL
17146: PUSH
17147: LD_VAR 0 2
17151: PPUSH
17152: CALL_OW 247
17156: PUSH
17157: LD_INT 2
17159: EQUAL
17160: AND
17161: PUSH
17162: LD_VAR 0 2
17166: PPUSH
17167: CALL_OW 255
17171: PUSH
17172: LD_INT 3
17174: EQUAL
17175: AND
17176: IFFALSE 17192
// tpCounter = tpCounter + 1 ;
17178: LD_ADDR_EXP 30
17182: PUSH
17183: LD_EXP 30
17187: PUSH
17188: LD_INT 1
17190: PLUS
17191: ST_TO_ADDR
// end ;
17192: PPOPN 2
17194: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
17195: LD_VAR 0 2
17199: PUSH
17200: LD_INT 21
17202: EQUAL
17203: PUSH
17204: LD_VAR 0 2
17208: PUSH
17209: LD_INT 112
17211: EQUAL
17212: OR
17213: IFFALSE 17391
// if GetSide ( vehicle ) = 3 then
17215: LD_VAR 0 1
17219: PPUSH
17220: CALL_OW 255
17224: PUSH
17225: LD_INT 3
17227: EQUAL
17228: IFFALSE 17391
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
17230: LD_VAR 0 1
17234: PPUSH
17235: CALL_OW 264
17239: PUSH
17240: LD_INT 46
17242: EQUAL
17243: PUSH
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 264
17253: PUSH
17254: LD_INT 45
17256: EQUAL
17257: OR
17258: PUSH
17259: LD_VAR 0 1
17263: PPUSH
17264: CALL_OW 264
17268: PUSH
17269: LD_INT 44
17271: EQUAL
17272: OR
17273: IFFALSE 17348
// begin russianTanks = russianTanks ^ vehicle ;
17275: LD_ADDR_EXP 40
17279: PUSH
17280: LD_EXP 40
17284: PUSH
17285: LD_VAR 0 1
17289: ADD
17290: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
17291: LD_EXP 44
17295: PUSH
17296: LD_INT 1
17298: EQUAL
17299: PUSH
17300: LD_EXP 44
17304: PUSH
17305: LD_INT 0
17307: EQUAL
17308: OR
17309: IFFALSE 17323
// ComEnterUnit ( vehicle , ruteleprt ) ;
17311: LD_VAR 0 1
17315: PPUSH
17316: LD_INT 10
17318: PPUSH
17319: CALL_OW 120
// if attackTactic = 2 then
17323: LD_EXP 44
17327: PUSH
17328: LD_INT 2
17330: EQUAL
17331: IFFALSE 17348
// ComMoveXY ( vehicle , 88 , 69 ) ;
17333: LD_VAR 0 1
17337: PPUSH
17338: LD_INT 88
17340: PPUSH
17341: LD_INT 69
17343: PPUSH
17344: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 264
17357: PUSH
17358: LD_INT 49
17360: EQUAL
17361: IFFALSE 17391
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17363: LD_ADDR_EXP 41
17367: PUSH
17368: LD_EXP 41
17372: PUSH
17373: LD_VAR 0 1
17377: ADD
17378: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17379: LD_VAR 0 1
17383: PPUSH
17384: LD_INT 137
17386: PPUSH
17387: CALL_OW 120
// end ; end ; end ;
17391: PPOPN 2
17393: END
// on UnitGoesToRed ( unit ) do var i ;
17394: LD_INT 0
17396: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17397: LD_VAR 0 1
17401: PPUSH
17402: CALL_OW 255
17406: PUSH
17407: LD_INT 3
17409: EQUAL
17410: PUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 247
17420: PUSH
17421: LD_INT 2
17423: EQUAL
17424: AND
17425: IFFALSE 17543
// begin if russianTanks > 0 then
17427: LD_EXP 40
17431: PUSH
17432: LD_INT 0
17434: GREATER
17435: IFFALSE 17485
// for i in russianTanks do
17437: LD_ADDR_VAR 0 2
17441: PUSH
17442: LD_EXP 40
17446: PUSH
17447: FOR_IN
17448: IFFALSE 17483
// if i = unit then
17450: LD_VAR 0 2
17454: PUSH
17455: LD_VAR 0 1
17459: EQUAL
17460: IFFALSE 17481
// russianTanks = russianTanks diff [ unit ] ;
17462: LD_ADDR_EXP 40
17466: PUSH
17467: LD_EXP 40
17471: PUSH
17472: LD_VAR 0 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: DIFF
17480: ST_TO_ADDR
17481: GO 17447
17483: POP
17484: POP
// if russianTimeLapsers > 0 then
17485: LD_EXP 41
17489: PUSH
17490: LD_INT 0
17492: GREATER
17493: IFFALSE 17543
// for i in russianTimeLapsers do
17495: LD_ADDR_VAR 0 2
17499: PUSH
17500: LD_EXP 41
17504: PUSH
17505: FOR_IN
17506: IFFALSE 17541
// if i = unit then
17508: LD_VAR 0 2
17512: PUSH
17513: LD_VAR 0 1
17517: EQUAL
17518: IFFALSE 17539
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17520: LD_ADDR_EXP 41
17524: PUSH
17525: LD_EXP 41
17529: PUSH
17530: LD_VAR 0 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: DIFF
17538: ST_TO_ADDR
17539: GO 17505
17541: POP
17542: POP
// end ; end ;
17543: PPOPN 2
17545: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17546: LD_INT 0
17548: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17549: LD_VAR 0 2
17553: PPUSH
17554: CALL_OW 255
17558: PUSH
17559: LD_INT 3
17561: EQUAL
17562: PUSH
17563: LD_VAR 0 2
17567: PPUSH
17568: CALL_OW 257
17572: PUSH
17573: LD_INT 3
17575: EQUAL
17576: AND
17577: PUSH
17578: LD_INT 21
17580: PPUSH
17581: CALL_OW 255
17585: PUSH
17586: LD_INT 3
17588: EQUAL
17589: AND
17590: PUSH
17591: LD_INT 21
17593: PPUSH
17594: CALL_OW 302
17598: AND
17599: IFFALSE 17613
// ComEnterUnit ( human , ru_fact ) ;
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 21
17608: PPUSH
17609: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
17613: LD_VAR 0 2
17617: PPUSH
17618: CALL_OW 257
17622: PUSH
17623: LD_INT 4
17625: EQUAL
17626: PUSH
17627: LD_VAR 0 2
17631: PPUSH
17632: CALL_OW 255
17636: PUSH
17637: LD_INT 3
17639: EQUAL
17640: AND
17641: PUSH
17642: LD_EXP 42
17646: PUSH
17647: LD_INT 0
17649: EQUAL
17650: AND
17651: IFFALSE 17713
// for i in RuScientists do
17653: LD_ADDR_VAR 0 3
17657: PUSH
17658: LD_EXP 35
17662: PUSH
17663: FOR_IN
17664: IFFALSE 17711
// if i = human then
17666: LD_VAR 0 3
17670: PUSH
17671: LD_VAR 0 2
17675: EQUAL
17676: IFFALSE 17709
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_INT 13
17685: PUSH
17686: LD_INT 14
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: PPUSH
17696: LD_INT 2
17698: PPUSH
17699: CALL_OW 12
17703: ARRAY
17704: PPUSH
17705: CALL_OW 113
17709: GO 17663
17711: POP
17712: POP
// end ;
17713: PPOPN 3
17715: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
17716: LD_INT 0
17718: PPUSH
17719: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
17720: LD_VAR 0 2
17724: PPUSH
17725: CALL_OW 255
17729: PUSH
17730: LD_INT 3
17732: EQUAL
17733: PUSH
17734: LD_VAR 0 2
17738: PPUSH
17739: CALL_OW 257
17743: PUSH
17744: LD_INT 4
17746: EQUAL
17747: AND
17748: IFFALSE 17890
// for i in RuScientists do
17750: LD_ADDR_VAR 0 3
17754: PUSH
17755: LD_EXP 35
17759: PUSH
17760: FOR_IN
17761: IFFALSE 17888
// if i = human then
17763: LD_VAR 0 3
17767: PUSH
17768: LD_VAR 0 2
17772: EQUAL
17773: IFFALSE 17886
// if IsOk ( rutp ) then
17775: LD_INT 137
17777: PPUSH
17778: CALL_OW 302
17782: IFFALSE 17855
// begin rnd = rand ( 1 , 2 ) ;
17784: LD_ADDR_VAR 0 4
17788: PUSH
17789: LD_INT 1
17791: PPUSH
17792: LD_INT 2
17794: PPUSH
17795: CALL_OW 12
17799: ST_TO_ADDR
// if rnd = 1 then
17800: LD_VAR 0 4
17804: PUSH
17805: LD_INT 1
17807: EQUAL
17808: IFFALSE 17822
// ComEnterUnit ( vehicle , rutp ) ;
17810: LD_VAR 0 1
17814: PPUSH
17815: LD_INT 137
17817: PPUSH
17818: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17822: LD_VAR 0 1
17826: PPUSH
17827: LD_INT 13
17829: PUSH
17830: LD_INT 14
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 1
17839: PPUSH
17840: LD_INT 2
17842: PPUSH
17843: CALL_OW 12
17847: ARRAY
17848: PPUSH
17849: CALL_OW 173
// end else
17853: GO 17886
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) end ;
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 13
17862: PUSH
17863: LD_INT 14
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 1
17872: PPUSH
17873: LD_INT 2
17875: PPUSH
17876: CALL_OW 12
17880: ARRAY
17881: PPUSH
17882: CALL_OW 113
17886: GO 17760
17888: POP
17889: POP
// end ; end_of_file
17890: PPOPN 4
17892: END
// every 0 0$1 trigger ruAI = 1 do
17893: LD_EXP 42
17897: PUSH
17898: LD_INT 1
17900: EQUAL
17901: IFFALSE 18000
17903: GO 17905
17905: DISABLE
// begin enable ;
17906: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17907: LD_INT 3
17909: PPUSH
17910: LD_INT 6
17912: PPUSH
17913: LD_INT 9
17915: PPUSH
17916: LD_EXP 39
17920: PPUSH
17921: CALL 13846 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17925: LD_INT 3
17927: PPUSH
17928: LD_INT 4
17930: PPUSH
17931: LD_INT 10
17933: PPUSH
17934: LD_EXP 39
17938: PPUSH
17939: CALL 13846 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17943: LD_INT 3
17945: PPUSH
17946: LD_INT 16
17948: PPUSH
17949: LD_INT 9
17951: PPUSH
17952: LD_INT 91
17954: PPUSH
17955: CALL 14237 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17959: LD_INT 3
17961: PPUSH
17962: LD_INT 17
17964: PPUSH
17965: LD_INT 10
17967: PPUSH
17968: LD_INT 47
17970: PUSH
17971: LD_INT 129
17973: PUSH
17974: LD_INT 135
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: PPUSH
17982: CALL 14237 0 4
// AttackVehicles ( 3 ) ;
17986: LD_INT 3
17988: PPUSH
17989: CALL 14964 0 1
// IntBazooka ( 3 ) ;
17993: LD_INT 3
17995: PPUSH
17996: CALL 15457 0 1
// end ;
18000: END
// every 0 0$1 do
18001: GO 18003
18003: DISABLE
// begin enable ;
18004: ENABLE
// TimeLapsersAI ( 3 ) ;
18005: LD_INT 3
18007: PPUSH
18008: CALL 15262 0 1
// end ;
18012: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18013: LD_INT 4
18015: PPUSH
18016: CALL_OW 303
18020: IFFALSE 18035
18022: GO 18024
18024: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
18025: LD_INT 3
18027: PPUSH
18028: LD_INT 4
18030: PPUSH
18031: CALL 16109 0 2
18035: END
// every 0 0$1 do
18036: GO 18038
18038: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
18039: LD_INT 3
18041: PPUSH
18042: LD_INT 91
18044: PPUSH
18045: LD_INT 3
18047: PPUSH
18048: CALL 13761 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
18052: LD_INT 3
18054: PPUSH
18055: LD_INT 47
18057: PPUSH
18058: LD_INT 3
18060: PPUSH
18061: CALL 13761 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
18065: LD_INT 3
18067: PPUSH
18068: LD_INT 129
18070: PPUSH
18071: LD_INT 3
18073: PPUSH
18074: CALL 13761 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
18078: LD_INT 3
18080: PPUSH
18081: LD_INT 3
18083: PPUSH
18084: LD_INT 3
18086: PPUSH
18087: CALL 13761 0 3
// end ;
18091: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
18092: LD_EXP 28
18096: PUSH
18097: LD_INT 2
18099: EQUAL
18100: PUSH
18101: LD_INT 21
18103: PPUSH
18104: CALL_OW 255
18108: PUSH
18109: LD_INT 3
18111: EQUAL
18112: AND
18113: PUSH
18114: LD_INT 112
18116: PPUSH
18117: CALL_OW 255
18121: PUSH
18122: LD_INT 3
18124: EQUAL
18125: AND
18126: PUSH
18127: LD_INT 21
18129: PPUSH
18130: CALL_OW 302
18134: AND
18135: PUSH
18136: LD_INT 112
18138: PPUSH
18139: CALL_OW 302
18143: AND
18144: PUSH
18145: LD_INT 22
18147: PUSH
18148: LD_INT 3
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 21
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 50
18167: PUSH
18168: EMPTY
18169: LIST
18170: PUSH
18171: LD_INT 3
18173: PUSH
18174: LD_INT 58
18176: PUSH
18177: EMPTY
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: PPUSH
18190: CALL_OW 69
18194: PUSH
18195: LD_INT 18
18197: PPUSH
18198: LD_INT 22
18200: PUSH
18201: LD_INT 3
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 21
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 70
18226: PUSH
18227: LD_INT 0
18229: EQUAL
18230: DIFF
18231: AND
18232: IFFALSE 18350
18234: GO 18236
18236: DISABLE
// begin enable ;
18237: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
18238: LD_INT 3
18240: PPUSH
18241: LD_INT 21
18243: PPUSH
18244: LD_INT 3
18246: PUSH
18247: LD_INT 4
18249: PUSH
18250: LD_INT 4
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: PUSH
18258: LD_OWVAR 67
18262: ARRAY
18263: PPUSH
18264: LD_INT 46
18266: PUSH
18267: LD_INT 45
18269: PUSH
18270: LD_INT 44
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: LIST
18277: PPUSH
18278: LD_INT 3
18280: PPUSH
18281: LD_INT 3
18283: PPUSH
18284: LD_INT 24
18286: PPUSH
18287: CALL 14817 0 7
// if russianTimeLapsers = 0 then
18291: LD_EXP 41
18295: PUSH
18296: LD_INT 0
18298: EQUAL
18299: IFFALSE 18350
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18301: LD_INT 3
18303: PPUSH
18304: LD_INT 112
18306: PPUSH
18307: LD_INT 1
18309: PUSH
18310: LD_INT 2
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: LIST
18320: PUSH
18321: LD_OWVAR 67
18325: ARRAY
18326: PPUSH
18327: LD_INT 49
18329: PUSH
18330: LD_INT 49
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PPUSH
18337: LD_INT 3
18339: PPUSH
18340: LD_INT 3
18342: PPUSH
18343: LD_INT 24
18345: PPUSH
18346: CALL 14817 0 7
// end ;
18350: END
// every 0 0$1 trigger arabianMines do var i ;
18351: LD_EXP 45
18355: IFFALSE 18476
18357: GO 18359
18359: DISABLE
18360: LD_INT 0
18362: PPUSH
// begin enable ;
18363: ENABLE
// for i in arabianMines do
18364: LD_ADDR_VAR 0 1
18368: PUSH
18369: LD_EXP 45
18373: PUSH
18374: FOR_IN
18375: IFFALSE 18474
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18377: LD_INT 22
18379: PUSH
18380: LD_INT 1
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 92
18389: PUSH
18390: LD_VAR 0 1
18394: PUSH
18395: LD_INT 1
18397: ARRAY
18398: PUSH
18399: LD_VAR 0 1
18403: PUSH
18404: LD_INT 2
18406: ARRAY
18407: PUSH
18408: LD_INT 3
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PPUSH
18421: CALL_OW 69
18425: IFFALSE 18472
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18427: LD_VAR 0 1
18431: PUSH
18432: LD_INT 1
18434: ARRAY
18435: PPUSH
18436: LD_VAR 0 1
18440: PUSH
18441: LD_INT 2
18443: ARRAY
18444: PPUSH
18445: LD_INT 5
18447: PPUSH
18448: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18452: LD_ADDR_EXP 45
18456: PUSH
18457: LD_EXP 45
18461: PPUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 3
18471: ST_TO_ADDR
// end ; end ;
18472: GO 18374
18474: POP
18475: POP
// end ;
18476: PPOPN 1
18478: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18479: LD_EXP 29
18483: PUSH
18484: LD_INT 4
18486: EQUAL
18487: PUSH
18488: LD_EXP 30
18492: PUSH
18493: LD_INT 6
18495: PUSH
18496: LD_INT 8
18498: PUSH
18499: LD_INT 8
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: LIST
18506: PUSH
18507: LD_OWVAR 67
18511: ARRAY
18512: EQUAL
18513: AND
18514: IFFALSE 18532
18516: GO 18518
18518: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18519: LD_INT 10
18521: PPUSH
18522: LD_INT 47
18524: PPUSH
18525: LD_INT 82
18527: PPUSH
18528: CALL_OW 243
18532: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18533: LD_EXP 29
18537: PUSH
18538: LD_INT 4
18540: EQUAL
18541: IFFALSE 18563
18543: GO 18545
18545: DISABLE
// begin enable ;
18546: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18547: LD_ADDR_EXP 44
18551: PUSH
18552: LD_INT 1
18554: PPUSH
18555: LD_INT 2
18557: PPUSH
18558: CALL_OW 12
18562: ST_TO_ADDR
// end ; end_of_file
18563: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18564: LD_EXP 35
18568: PUSH
18569: EMPTY
18570: EQUAL
18571: PUSH
18572: LD_INT 3
18574: PPUSH
18575: CALL_OW 301
18579: AND
18580: IFFALSE 18785
18582: GO 18584
18584: DISABLE
// begin if sciCounter = 0 then
18585: LD_EXP 36
18589: PUSH
18590: LD_INT 0
18592: EQUAL
18593: IFFALSE 18619
// begin Say ( JMM , D7a-JMM-1 ) ;
18595: LD_EXP 1
18599: PPUSH
18600: LD_STRING D7a-JMM-1
18602: PPUSH
18603: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18607: LD_EXP 22
18611: PPUSH
18612: LD_STRING D7a-Pow-1
18614: PPUSH
18615: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18619: LD_EXP 36
18623: PUSH
18624: LD_INT 0
18626: GREATER
18627: PUSH
18628: LD_EXP 36
18632: PUSH
18633: LD_INT 6
18635: LESS
18636: AND
18637: IFFALSE 18663
// begin Say ( JMM , D7b-JMM-1 ) ;
18639: LD_EXP 1
18643: PPUSH
18644: LD_STRING D7b-JMM-1
18646: PPUSH
18647: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18651: LD_EXP 22
18655: PPUSH
18656: LD_STRING D7b-Pow-1
18658: PPUSH
18659: CALL_OW 94
// end ; if sciCounter = 6 then
18663: LD_EXP 36
18667: PUSH
18668: LD_INT 6
18670: EQUAL
18671: IFFALSE 18781
// begin Say ( JMM , D7c-JMM-1 ) ;
18673: LD_EXP 1
18677: PPUSH
18678: LD_STRING D7c-JMM-1
18680: PPUSH
18681: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18685: LD_EXP 22
18689: PPUSH
18690: LD_STRING D7c-Pow-1
18692: PPUSH
18693: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18697: LD_EXP 1
18701: PPUSH
18702: LD_STRING D7d-JMM-1
18704: PPUSH
18705: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18709: LD_EXP 22
18713: PPUSH
18714: LD_STRING D7d-Pow-1
18716: PPUSH
18717: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18721: LD_EXP 1
18725: PPUSH
18726: LD_STRING D7d-JMM-2
18728: PPUSH
18729: CALL_OW 88
// if askSiberite = 1 then
18733: LD_EXP 33
18737: PUSH
18738: LD_INT 1
18740: EQUAL
18741: IFFALSE 18757
// begin Say ( JMM , D7d-JMM-2a ) ;
18743: LD_EXP 1
18747: PPUSH
18748: LD_STRING D7d-JMM-2a
18750: PPUSH
18751: CALL_OW 88
// end else
18755: GO 18769
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18757: LD_EXP 22
18761: PPUSH
18762: LD_STRING D7d-Pow-2
18764: PPUSH
18765: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18769: LD_EXP 22
18773: PPUSH
18774: LD_STRING D7d-Pow-2a
18776: PPUSH
18777: CALL_OW 94
// end ; FinishMission ;
18781: CALL 18786 0 0
// end ;
18785: END
// export function FinishMission ; begin
18786: LD_INT 0
18788: PPUSH
// if teleportExplored = 1 then
18789: LD_EXP 34
18793: PUSH
18794: LD_INT 1
18796: EQUAL
18797: IFFALSE 18811
// AddMedal ( Teleport , 1 ) else
18799: LD_STRING Teleport
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: CALL_OW 101
18809: GO 18822
// AddMedal ( Teleport , - 1 ) ;
18811: LD_STRING Teleport
18813: PPUSH
18814: LD_INT 1
18816: NEG
18817: PPUSH
18818: CALL_OW 101
// if sciCounter > 2 then
18822: LD_EXP 36
18826: PUSH
18827: LD_INT 2
18829: GREATER
18830: IFFALSE 18844
// AddMedal ( Materials , 1 ) else
18832: LD_STRING Materials
18834: PPUSH
18835: LD_INT 1
18837: PPUSH
18838: CALL_OW 101
18842: GO 18855
// AddMedal ( Materials , - 1 ) ;
18844: LD_STRING Materials
18846: PPUSH
18847: LD_INT 1
18849: NEG
18850: PPUSH
18851: CALL_OW 101
// if sciCounter = 6 then
18855: LD_EXP 36
18859: PUSH
18860: LD_INT 6
18862: EQUAL
18863: IFFALSE 18887
// begin AddMedal ( Scientists , 1 ) ;
18865: LD_STRING Scientists
18867: PPUSH
18868: LD_INT 1
18870: PPUSH
18871: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18875: LD_INT 1
18877: PPUSH
18878: LD_STRING 12_SciDed_1
18880: PPUSH
18881: CALL_OW 39
// end else
18885: GO 18908
// begin AddMedal ( Scientists , - 1 ) ;
18887: LD_STRING Scientists
18889: PPUSH
18890: LD_INT 1
18892: NEG
18893: PPUSH
18894: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18898: LD_INT 0
18900: PPUSH
18901: LD_STRING 12_SciDed_1
18903: PPUSH
18904: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18908: LD_EXP 32
18912: PPUSH
18913: LD_STRING 12_MainDepositFake_1
18915: PPUSH
18916: CALL_OW 39
// GiveMedals ( MAIN ) ;
18920: LD_STRING MAIN
18922: PPUSH
18923: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18927: LD_INT 22
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 21
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 25
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 25
18962: PUSH
18963: LD_INT 2
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 25
18972: PUSH
18973: LD_INT 3
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 25
18982: PUSH
18983: LD_INT 4
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 25
18992: PUSH
18993: LD_INT 5
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 25
19002: PUSH
19003: LD_INT 8
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: PPUSH
19024: CALL_OW 69
19028: PPUSH
19029: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19033: LD_EXP 1
19037: PPUSH
19038: LD_EXP 47
19042: PUSH
19043: LD_STRING JMM
19045: STR
19046: PPUSH
19047: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19051: LD_EXP 7
19055: PPUSH
19056: LD_EXP 47
19060: PUSH
19061: LD_STRING Brown
19063: STR
19064: PPUSH
19065: CALL 12915 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19069: LD_EXP 3
19073: PPUSH
19074: LD_EXP 47
19078: PUSH
19079: LD_STRING Donaldson
19081: STR
19082: PPUSH
19083: CALL 12915 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19087: LD_EXP 4
19091: PPUSH
19092: LD_EXP 47
19096: PUSH
19097: LD_STRING Bobby
19099: STR
19100: PPUSH
19101: CALL 12915 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19105: LD_EXP 5
19109: PPUSH
19110: LD_EXP 47
19114: PUSH
19115: LD_STRING Cyrus
19117: STR
19118: PPUSH
19119: CALL 12915 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19123: LD_EXP 2
19127: PPUSH
19128: LD_EXP 47
19132: PUSH
19133: LD_STRING Lisa
19135: STR
19136: PPUSH
19137: CALL 12915 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19141: LD_EXP 12
19145: PPUSH
19146: LD_EXP 47
19150: PUSH
19151: LD_STRING Frank
19153: STR
19154: PPUSH
19155: CALL 12915 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19159: LD_EXP 13
19163: PPUSH
19164: LD_EXP 47
19168: PUSH
19169: LD_STRING Kikuchi
19171: STR
19172: PPUSH
19173: CALL 12915 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19177: LD_EXP 9
19181: PPUSH
19182: LD_EXP 47
19186: PUSH
19187: LD_STRING Houten
19189: STR
19190: PPUSH
19191: CALL 12915 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19195: LD_EXP 11
19199: PPUSH
19200: LD_EXP 47
19204: PUSH
19205: LD_STRING Gary
19207: STR
19208: PPUSH
19209: CALL 12915 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19213: LD_EXP 10
19217: PPUSH
19218: LD_EXP 47
19222: PUSH
19223: LD_STRING Cornell
19225: STR
19226: PPUSH
19227: CALL 12915 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19231: LD_EXP 6
19235: PPUSH
19236: LD_EXP 47
19240: PUSH
19241: LD_STRING Denis
19243: STR
19244: PPUSH
19245: CALL 12915 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19249: LD_EXP 8
19253: PPUSH
19254: LD_EXP 47
19258: PUSH
19259: LD_STRING Gladstone
19261: STR
19262: PPUSH
19263: CALL 12915 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19267: LD_INT 50
19269: PUSH
19270: EMPTY
19271: LIST
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 23
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 21
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: LD_INT 25
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 25
19318: PUSH
19319: LD_INT 2
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 25
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 25
19338: PUSH
19339: LD_INT 4
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 25
19348: PUSH
19349: LD_INT 5
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 25
19358: PUSH
19359: LD_INT 8
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: PPUSH
19382: CALL_OW 69
19386: PUSH
19387: LD_EXP 1
19391: PUSH
19392: LD_EXP 7
19396: PUSH
19397: LD_EXP 3
19401: PUSH
19402: LD_EXP 4
19406: PUSH
19407: LD_EXP 5
19411: PUSH
19412: LD_EXP 2
19416: PUSH
19417: LD_EXP 12
19421: PUSH
19422: LD_EXP 8
19426: PUSH
19427: LD_EXP 13
19431: PUSH
19432: LD_EXP 6
19436: PUSH
19437: LD_EXP 9
19441: PUSH
19442: LD_EXP 11
19446: PUSH
19447: LD_EXP 10
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: DIFF
19467: PPUSH
19468: LD_STRING 12_other_survivors
19470: PPUSH
19471: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19475: LD_INT 50
19477: PUSH
19478: EMPTY
19479: LIST
19480: PUSH
19481: LD_INT 22
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 23
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 21
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 25
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 25
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 25
19536: PUSH
19537: LD_INT 3
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 25
19546: PUSH
19547: LD_INT 4
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 25
19556: PUSH
19557: LD_INT 5
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 25
19566: PUSH
19567: LD_INT 8
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: PPUSH
19590: CALL_OW 69
19594: PPUSH
19595: LD_STRING 12_kurt_squad
19597: PPUSH
19598: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
19602: LD_STRING 11_others
19604: PPUSH
19605: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
19609: LD_EXP 14
19613: PPUSH
19614: LD_STRING 11_others
19616: PPUSH
19617: CALL_OW 38
// YouWin ;
19621: CALL_OW 103
// end ; end_of_file
19625: LD_VAR 0 1
19629: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19630: LD_EXP 1
19634: PPUSH
19635: CALL_OW 301
19639: IFFALSE 19651
19641: GO 19643
19643: DISABLE
// YouLost ( JMM ) ; end_of_file
19644: LD_STRING JMM
19646: PPUSH
19647: CALL_OW 104
19651: END
// every 0 0$01 do
19652: GO 19654
19654: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19655: LD_INT 1050
19657: PPUSH
19658: CALL_OW 67
// if cratesSpawned < 6 then
19662: LD_EXP 46
19666: PUSH
19667: LD_INT 6
19669: LESS
19670: IFFALSE 19707
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19672: LD_INT 3
19674: PPUSH
19675: LD_INT 5
19677: PPUSH
19678: CALL_OW 12
19682: PPUSH
19683: LD_INT 21
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19693: LD_ADDR_EXP 46
19697: PUSH
19698: LD_EXP 46
19702: PUSH
19703: LD_INT 1
19705: PLUS
19706: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19707: LD_EXP 46
19711: PUSH
19712: LD_INT 6
19714: GREATEREQUAL
19715: PUSH
19716: LD_EXP 46
19720: PUSH
19721: LD_INT 12
19723: LESS
19724: AND
19725: IFFALSE 19769
// begin wait ( 0 0$30 ) ;
19727: LD_INT 1050
19729: PPUSH
19730: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19734: LD_INT 3
19736: PPUSH
19737: LD_INT 5
19739: PPUSH
19740: CALL_OW 12
19744: PPUSH
19745: LD_INT 21
19747: PPUSH
19748: LD_INT 1
19750: PPUSH
19751: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19755: LD_ADDR_EXP 46
19759: PUSH
19760: LD_EXP 46
19764: PUSH
19765: LD_INT 1
19767: PLUS
19768: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19769: LD_EXP 46
19773: PUSH
19774: LD_INT 12
19776: GREATEREQUAL
19777: IFFALSE 19821
// begin wait ( 1 1$30 ) ;
19779: LD_INT 3150
19781: PPUSH
19782: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19786: LD_INT 3
19788: PPUSH
19789: LD_INT 5
19791: PPUSH
19792: CALL_OW 12
19796: PPUSH
19797: LD_INT 21
19799: PPUSH
19800: LD_INT 1
19802: PPUSH
19803: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19807: LD_ADDR_EXP 46
19811: PUSH
19812: LD_EXP 46
19816: PUSH
19817: LD_INT 1
19819: PLUS
19820: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
19821: LD_EXP 46
19825: PUSH
19826: LD_INT 15
19828: GREATEREQUAL
19829: IFFALSE 19655
// end ;
19831: END
