// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 42
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// askSiberite = 0 ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// warWithLegion = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// fakeInfo = 0 ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// cratesSpawned = 0 ;
 127: LD_ADDR_EXP 43
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// ruAI = 0 ;
 135: LD_ADDR_EXP 41
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// eventVar1 = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// mission_prefix = 12_ ;
 151: LD_ADDR_EXP 44
 155: PUSH
 156: LD_STRING 12_
 158: ST_TO_ADDR
// debugMode = 0 ;
 159: LD_ADDR_EXP 46
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// PrepareDifficulty ;
 167: CALL 12590 0 0
// PrepareVehicles ;
 171: CALL 1518 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
 175: LD_INT 4
 177: PPUSH
 178: LD_INT 0
 180: PPUSH
 181: LD_INT 1
 183: PPUSH
 184: CALL 1441 0 3
// PrepareAmericanHeroes ;
 188: CALL 526 0 0
// PrepareRussianCommander ;
 192: CALL 3048 0 0
// PrepareWestBase ;
 196: CALL 3560 0 0
// PrepareEastBase ;
 200: CALL 3120 0 0
// PrepareOtherRussians ;
 204: CALL 3672 0 0
// end ;
 208: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 209: LD_EXP 46
 213: PUSH
 214: LD_INT 1
 216: EQUAL
 217: IFFALSE 523
 219: GO 221
 221: DISABLE
 222: LD_INT 0
 224: PPUSH
// begin enable ;
 225: ENABLE
// fogoff ( true ) ;
 226: LD_INT 1
 228: PPUSH
 229: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 233: LD_ADDR_VAR 0 1
 237: PUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 21
 250: PUSH
 251: LD_INT 1
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 69
 266: PUSH
 267: FOR_IN
 268: IFFALSE 284
// SetLives ( i , 1000 ) ;
 270: LD_VAR 0 1
 274: PPUSH
 275: LD_INT 1000
 277: PPUSH
 278: CALL_OW 234
 282: GO 267
 284: POP
 285: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 286: LD_ADDR_VAR 0 1
 290: PUSH
 291: LD_INT 22
 293: PUSH
 294: LD_INT 1
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: LD_INT 30
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 30
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PPUSH
 333: CALL_OW 69
 337: PUSH
 338: FOR_IN
 339: IFFALSE 363
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 341: LD_VAR 0 1
 345: PPUSH
 346: CALL_OW 274
 350: PPUSH
 351: LD_INT 1
 353: PPUSH
 354: LD_INT 9999
 356: PPUSH
 357: CALL_OW 277
 361: GO 338
 363: POP
 364: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 365: LD_ADDR_VAR 0 1
 369: PUSH
 370: LD_INT 22
 372: PUSH
 373: LD_INT 1
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: LD_INT 2
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 0
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 30
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PPUSH
 412: CALL_OW 69
 416: PUSH
 417: FOR_IN
 418: IFFALSE 442
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: CALL_OW 274
 429: PPUSH
 430: LD_INT 2
 432: PPUSH
 433: LD_INT 9999
 435: PPUSH
 436: CALL_OW 277
 440: GO 417
 442: POP
 443: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 444: LD_ADDR_VAR 0 1
 448: PUSH
 449: LD_INT 22
 451: PUSH
 452: LD_INT 1
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 2
 461: PUSH
 462: LD_INT 30
 464: PUSH
 465: LD_INT 0
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: LD_INT 30
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PPUSH
 491: CALL_OW 69
 495: PUSH
 496: FOR_IN
 497: IFFALSE 521
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 3
 511: PPUSH
 512: LD_INT 9999
 514: PPUSH
 515: CALL_OW 277
 519: GO 496
 521: POP
 522: POP
// end ; end_of_file
 523: PPOPN 1
 525: END
// export function PrepareAmericanHeroes ; begin
 526: LD_INT 0
 528: PPUSH
// uc_side = 1 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 1
 536: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 537: LD_ADDR_EXP 14
 541: PUSH
 542: LD_STRING 11_others
 544: PPUSH
 545: CALL_OW 31
 549: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 550: LD_ADDR_EXP 14
 554: PUSH
 555: LD_EXP 14
 559: PUSH
 560: LD_STRING 11c_others
 562: PPUSH
 563: CALL_OW 31
 567: ADD
 568: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 569: LD_ADDR_EXP 1
 573: PUSH
 574: LD_STRING 11_JMM
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL 12229 0 2
 584: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 585: LD_EXP 1
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 597: LD_EXP 1
 601: PPUSH
 602: LD_INT 22
 604: PUSH
 605: LD_INT 1
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: PUSH
 612: LD_INT 21
 614: PUSH
 615: LD_INT 2
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: PUSH
 622: LD_INT 58
 624: PUSH
 625: EMPTY
 626: LIST
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: PPUSH
 642: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 646: LD_STRING 11_Lisa
 648: PPUSH
 649: CALL_OW 28
 653: PUSH
 654: LD_INT 1
 656: EQUAL
 657: IFFALSE 704
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 659: LD_ADDR_EXP 2
 663: PUSH
 664: LD_STRING 11_Lisa
 666: PPUSH
 667: LD_INT 1
 669: PPUSH
 670: CALL 12229 0 2
 674: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 675: LD_EXP 2
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 687: LD_EXP 2
 691: PPUSH
 692: LD_INT 4
 694: PPUSH
 695: LD_INT 0
 697: PPUSH
 698: CALL_OW 49
// end else
 702: GO 775
// begin if TestCharacters ( 10c_Lisa ) = true then
 704: LD_STRING 10c_Lisa
 706: PPUSH
 707: CALL_OW 28
 711: PUSH
 712: LD_INT 1
 714: EQUAL
 715: IFFALSE 762
// begin Lisa = PrepareUnit ( 10c_Lisa , true ) ;
 717: LD_ADDR_EXP 2
 721: PUSH
 722: LD_STRING 10c_Lisa
 724: PPUSH
 725: LD_INT 1
 727: PPUSH
 728: CALL 12229 0 2
 732: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 733: LD_EXP 2
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 745: LD_EXP 2
 749: PPUSH
 750: LD_INT 4
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 49
// end else
 760: GO 775
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
 762: LD_INT 4
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: LD_INT 1
 770: PPUSH
 771: CALL 1441 0 3
// end ; end ; if TestCharacters ( 11_Donaldson ) = true then
 775: LD_STRING 11_Donaldson
 777: PPUSH
 778: CALL_OW 28
 782: PUSH
 783: LD_INT 1
 785: EQUAL
 786: IFFALSE 833
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 788: LD_ADDR_EXP 3
 792: PUSH
 793: LD_STRING 11_Donaldson
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: CALL 12229 0 2
 803: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 804: LD_EXP 3
 808: PPUSH
 809: LD_INT 1
 811: PPUSH
 812: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 816: LD_EXP 3
 820: PPUSH
 821: LD_INT 4
 823: PPUSH
 824: LD_INT 0
 826: PPUSH
 827: CALL_OW 49
// end else
 831: GO 904
// begin if TestCharacters ( 10c_Donaldson ) = true then
 833: LD_STRING 10c_Donaldson
 835: PPUSH
 836: CALL_OW 28
 840: PUSH
 841: LD_INT 1
 843: EQUAL
 844: IFFALSE 891
// begin Donaldson = PrepareUnit ( 10c_Donaldson , true ) ;
 846: LD_ADDR_EXP 3
 850: PUSH
 851: LD_STRING 10c_Donaldson
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: CALL 12229 0 2
 861: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 862: LD_EXP 3
 866: PPUSH
 867: LD_INT 1
 869: PPUSH
 870: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 874: LD_EXP 3
 878: PPUSH
 879: LD_INT 4
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
// end else
 889: GO 904
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
 891: LD_INT 4
 893: PPUSH
 894: LD_INT 0
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: CALL 1441 0 3
// end ; end ; if TestCharacters ( 11_Cyrus ) = true then
 904: LD_STRING 11_Cyrus
 906: PPUSH
 907: CALL_OW 28
 911: PUSH
 912: LD_INT 1
 914: EQUAL
 915: IFFALSE 962
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 917: LD_ADDR_EXP 5
 921: PUSH
 922: LD_STRING 11_Cyrus
 924: PPUSH
 925: LD_INT 1
 927: PPUSH
 928: CALL 12229 0 2
 932: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 933: LD_EXP 5
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 945: LD_EXP 5
 949: PPUSH
 950: LD_INT 4
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end else
 960: GO 1033
// begin if TestCharacters ( 10c_Cyrus ) = true then
 962: LD_STRING 10c_Cyrus
 964: PPUSH
 965: CALL_OW 28
 969: PUSH
 970: LD_INT 1
 972: EQUAL
 973: IFFALSE 1020
// begin Cyrus = PrepareUnit ( 10c_Cyrus , true ) ;
 975: LD_ADDR_EXP 5
 979: PUSH
 980: LD_STRING 10c_Cyrus
 982: PPUSH
 983: LD_INT 1
 985: PPUSH
 986: CALL 12229 0 2
 990: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 991: LD_EXP 5
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1003: LD_EXP 5
1007: PPUSH
1008: LD_INT 4
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end else
1018: GO 1033
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
1020: LD_INT 4
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 1441 0 3
// end ; end ; if TestCharacters ( 11_Denis ) = true then
1033: LD_STRING 11_Denis
1035: PPUSH
1036: CALL_OW 28
1040: PUSH
1041: LD_INT 1
1043: EQUAL
1044: IFFALSE 1091
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
1046: LD_ADDR_EXP 6
1050: PUSH
1051: LD_STRING 11_Denis
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: CALL 12229 0 2
1061: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1062: LD_EXP 6
1066: PPUSH
1067: LD_INT 4
1069: PPUSH
1070: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1074: LD_EXP 6
1078: PPUSH
1079: LD_INT 4
1081: PPUSH
1082: LD_INT 0
1084: PPUSH
1085: CALL_OW 49
// end else
1089: GO 1162
// begin if TestCharacters ( 10c_Denis ) = true then
1091: LD_STRING 10c_Denis
1093: PPUSH
1094: CALL_OW 28
1098: PUSH
1099: LD_INT 1
1101: EQUAL
1102: IFFALSE 1149
// begin Denis = PrepareUnit ( 10c_Denis , true ) ;
1104: LD_ADDR_EXP 6
1108: PUSH
1109: LD_STRING 10c_Denis
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL 12229 0 2
1119: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1120: LD_EXP 6
1124: PPUSH
1125: LD_INT 4
1127: PPUSH
1128: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1132: LD_EXP 6
1136: PPUSH
1137: LD_INT 4
1139: PPUSH
1140: LD_INT 0
1142: PPUSH
1143: CALL_OW 49
// end else
1147: GO 1162
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
1149: LD_INT 4
1151: PPUSH
1152: LD_INT 0
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL 1441 0 3
// end ; end ; if TestCharacters ( 11_Frank ) = true then
1162: LD_STRING 11_Frank
1164: PPUSH
1165: CALL_OW 28
1169: PUSH
1170: LD_INT 1
1172: EQUAL
1173: IFFALSE 1220
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1175: LD_ADDR_EXP 12
1179: PUSH
1180: LD_STRING 11_Frank
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: CALL 12229 0 2
1190: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1191: LD_EXP 12
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1203: LD_EXP 12
1207: PPUSH
1208: LD_INT 4
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// end else
1218: GO 1291
// begin if TestCharacters ( 10c_Frank ) = true then
1220: LD_STRING 10c_Frank
1222: PPUSH
1223: CALL_OW 28
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1278
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1233: LD_ADDR_EXP 12
1237: PUSH
1238: LD_STRING 11_Frank
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: CALL 12229 0 2
1248: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1249: LD_EXP 12
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1261: LD_EXP 12
1265: PPUSH
1266: LD_INT 4
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 49
// end else
1276: GO 1291
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
1278: LD_INT 4
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: LD_INT 1
1286: PPUSH
1287: CALL 1441 0 3
// end ; end ; if TestCharacters ( 11_Cornell ) = true then
1291: LD_STRING 11_Cornell
1293: PPUSH
1294: CALL_OW 28
1298: PUSH
1299: LD_INT 1
1301: EQUAL
1302: IFFALSE 1349
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1304: LD_ADDR_EXP 10
1308: PUSH
1309: LD_STRING 11_Cornell
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: CALL 12229 0 2
1319: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1320: LD_EXP 10
1324: PPUSH
1325: LD_INT 1
1327: PPUSH
1328: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1332: LD_EXP 10
1336: PPUSH
1337: LD_INT 4
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// end else
1347: GO 1420
// begin if TestCharacters ( 10c_Cornell ) = true then
1349: LD_STRING 10c_Cornell
1351: PPUSH
1352: CALL_OW 28
1356: PUSH
1357: LD_INT 1
1359: EQUAL
1360: IFFALSE 1407
// begin Cornel = PrepareUnit ( 10c_Cornell , true ) ;
1362: LD_ADDR_EXP 10
1366: PUSH
1367: LD_STRING 10c_Cornell
1369: PPUSH
1370: LD_INT 1
1372: PPUSH
1373: CALL 12229 0 2
1377: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1378: LD_EXP 10
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1390: LD_EXP 10
1394: PPUSH
1395: LD_INT 4
1397: PPUSH
1398: LD_INT 0
1400: PPUSH
1401: CALL_OW 49
// end else
1405: GO 1420
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
1407: LD_INT 4
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 1441 0 3
// end ; end ; Powell = PrepareUnit ( Powell , false ) ;
1420: LD_ADDR_EXP 22
1424: PUSH
1425: LD_STRING Powell
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL 12229 0 2
1435: ST_TO_ADDR
// end ;
1436: LD_VAR 0 1
1440: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode ) ; begin
1441: LD_INT 0
1443: PPUSH
// if spawnMode = 1 then
1444: LD_VAR 0 3
1448: PUSH
1449: LD_INT 1
1451: EQUAL
1452: IFFALSE 1477
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1454: LD_EXP 14
1458: PUSH
1459: LD_INT 1
1461: ARRAY
1462: PPUSH
1463: LD_VAR 0 1
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL_OW 49
1475: GO 1495
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1477: LD_EXP 14
1481: PUSH
1482: LD_INT 1
1484: ARRAY
1485: PPUSH
1486: LD_VAR 0 2
1490: PPUSH
1491: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1495: LD_ADDR_EXP 14
1499: PUSH
1500: LD_EXP 14
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 3
1512: ST_TO_ADDR
// end ;
1513: LD_VAR 0 4
1517: RET
// export function PrepareVehicles ; var veh ; begin
1518: LD_INT 0
1520: PPUSH
1521: PPUSH
// uc_side = 1 ;
1522: LD_ADDR_OWVAR 20
1526: PUSH
1527: LD_INT 1
1529: ST_TO_ADDR
// uc_nation = 1 ;
1530: LD_ADDR_OWVAR 21
1534: PUSH
1535: LD_INT 1
1537: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1538: LD_ADDR_OWVAR 37
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// vc_engine = 3 ;
1546: LD_ADDR_OWVAR 39
1550: PUSH
1551: LD_INT 3
1553: ST_TO_ADDR
// vc_control = 3 ;
1554: LD_ADDR_OWVAR 38
1558: PUSH
1559: LD_INT 3
1561: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1562: LD_ADDR_OWVAR 40
1566: PUSH
1567: LD_INT 4
1569: ST_TO_ADDR
// veh = CreateVehicle ;
1570: LD_ADDR_VAR 0 2
1574: PUSH
1575: CALL_OW 45
1579: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: LD_INT 4
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 49
// vc_weapon = us_double_gun ;
1595: LD_ADDR_OWVAR 40
1599: PUSH
1600: LD_INT 5
1602: ST_TO_ADDR
// vc_control = 1 ;
1603: LD_ADDR_OWVAR 38
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// veh = CreateVehicle ;
1611: LD_ADDR_VAR 0 2
1615: PUSH
1616: CALL_OW 45
1620: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 4
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: CALL_OW 49
// vc_weapon = us_light_gun ;
1636: LD_ADDR_OWVAR 40
1640: PUSH
1641: LD_INT 3
1643: ST_TO_ADDR
// vc_control = 3 ;
1644: LD_ADDR_OWVAR 38
1648: PUSH
1649: LD_INT 3
1651: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1652: LD_ADDR_OWVAR 37
1656: PUSH
1657: LD_INT 2
1659: ST_TO_ADDR
// veh = CreateVehicle ;
1660: LD_ADDR_VAR 0 2
1664: PUSH
1665: CALL_OW 45
1669: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1670: LD_VAR 0 2
1674: PPUSH
1675: LD_INT 4
1677: PPUSH
1678: LD_INT 0
1680: PPUSH
1681: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1685: LD_ADDR_OWVAR 40
1689: PUSH
1690: LD_INT 4
1692: ST_TO_ADDR
// veh = CreateVehicle ;
1693: LD_ADDR_VAR 0 2
1697: PUSH
1698: CALL_OW 45
1702: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1703: LD_VAR 0 2
1707: PPUSH
1708: LD_INT 4
1710: PPUSH
1711: LD_INT 0
1713: PPUSH
1714: CALL_OW 49
// end ;
1718: LD_VAR 0 1
1722: RET
// export function PowellSupport1 ; var veh , un ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
1727: PPUSH
// uc_side = 1 ;
1728: LD_ADDR_OWVAR 20
1732: PUSH
1733: LD_INT 1
1735: ST_TO_ADDR
// uc_nation = 1 ;
1736: LD_ADDR_OWVAR 21
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1744: LD_STRING 11_Brown
1746: PPUSH
1747: CALL_OW 28
1751: PUSH
1752: LD_INT 1
1754: EQUAL
1755: IFFALSE 1802
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1757: LD_ADDR_EXP 7
1761: PUSH
1762: LD_STRING 11_Brown
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: CALL 12229 0 2
1772: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1773: LD_EXP 7
1777: PPUSH
1778: LD_INT 2
1780: PPUSH
1781: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1785: LD_EXP 7
1789: PPUSH
1790: LD_INT 4
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 49
// end else
1800: GO 1873
// begin if TestCharacters ( 10c_Brown ) = true then
1802: LD_STRING 10c_Brown
1804: PPUSH
1805: CALL_OW 28
1809: PUSH
1810: LD_INT 1
1812: EQUAL
1813: IFFALSE 1860
// begin Brown = PrepareUnit ( 10c_Brown , true ) ;
1815: LD_ADDR_EXP 7
1819: PUSH
1820: LD_STRING 10c_Brown
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL 12229 0 2
1830: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1831: LD_EXP 7
1835: PPUSH
1836: LD_INT 2
1838: PPUSH
1839: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1843: LD_EXP 7
1847: PPUSH
1848: LD_INT 4
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 49
// end else
1858: GO 1873
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
1860: LD_INT 4
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: LD_INT 1
1868: PPUSH
1869: CALL 1441 0 3
// end ; end ; if TestCharacters ( 11_Gary ) = true then
1873: LD_STRING 11_Gary
1875: PPUSH
1876: CALL_OW 28
1880: PUSH
1881: LD_INT 1
1883: EQUAL
1884: IFFALSE 1931
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1886: LD_ADDR_EXP 11
1890: PUSH
1891: LD_STRING 11_Gary
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: CALL 12229 0 2
1901: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1902: LD_EXP 11
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1914: LD_EXP 11
1918: PPUSH
1919: LD_INT 4
1921: PPUSH
1922: LD_INT 0
1924: PPUSH
1925: CALL_OW 49
// end else
1929: GO 2002
// begin if TestCharacters ( 10c_Gary ) = true then
1931: LD_STRING 10c_Gary
1933: PPUSH
1934: CALL_OW 28
1938: PUSH
1939: LD_INT 1
1941: EQUAL
1942: IFFALSE 1989
// begin Brown = PrepareUnit ( 10c_Gary , true ) ;
1944: LD_ADDR_EXP 7
1948: PUSH
1949: LD_STRING 10c_Gary
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: CALL 12229 0 2
1959: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1960: LD_EXP 11
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1972: LD_EXP 11
1976: PPUSH
1977: LD_INT 4
1979: PPUSH
1980: LD_INT 0
1982: PPUSH
1983: CALL_OW 49
// end else
1987: GO 2002
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
1989: LD_INT 4
1991: PPUSH
1992: LD_INT 0
1994: PPUSH
1995: LD_INT 1
1997: PPUSH
1998: CALL 1441 0 3
// end ; end ; hc_gallery =  ;
2002: LD_ADDR_OWVAR 33
2006: PUSH
2007: LD_STRING 
2009: ST_TO_ADDR
// hc_name =  ;
2010: LD_ADDR_OWVAR 26
2014: PUSH
2015: LD_STRING 
2017: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2018: LD_ADDR_OWVAR 37
2022: PUSH
2023: LD_INT 3
2025: ST_TO_ADDR
// vc_engine = 3 ;
2026: LD_ADDR_OWVAR 39
2030: PUSH
2031: LD_INT 3
2033: ST_TO_ADDR
// vc_control = 1 ;
2034: LD_ADDR_OWVAR 38
2038: PUSH
2039: LD_INT 1
2041: ST_TO_ADDR
// vc_weapon = us_crane ;
2042: LD_ADDR_OWVAR 40
2046: PUSH
2047: LD_INT 13
2049: ST_TO_ADDR
// veh = CreateVehicle ;
2050: LD_ADDR_VAR 0 2
2054: PUSH
2055: CALL_OW 45
2059: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_INT 4
2067: PPUSH
2068: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 4
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// PrepareHuman ( false , 3 , rand ( 5 , 8 ) ) ;
2087: LD_INT 0
2089: PPUSH
2090: LD_INT 3
2092: PPUSH
2093: LD_INT 5
2095: PPUSH
2096: LD_INT 8
2098: PPUSH
2099: CALL_OW 12
2103: PPUSH
2104: CALL_OW 380
// un = CreateHuman ;
2108: LD_ADDR_VAR 0 3
2112: PUSH
2113: CALL_OW 44
2117: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2118: LD_VAR 0 3
2122: PPUSH
2123: LD_VAR 0 2
2127: PPUSH
2128: CALL_OW 52
// vc_control = 3 ;
2132: LD_ADDR_OWVAR 38
2136: PUSH
2137: LD_INT 3
2139: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2140: LD_ADDR_OWVAR 40
2144: PUSH
2145: LD_INT 12
2147: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2148: LD_ADDR_EXP 15
2152: PUSH
2153: CALL_OW 45
2157: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2158: LD_ADDR_EXP 16
2162: PUSH
2163: CALL_OW 45
2167: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2168: LD_EXP 15
2172: PPUSH
2173: LD_INT 4
2175: PPUSH
2176: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2180: LD_EXP 16
2184: PPUSH
2185: LD_INT 4
2187: PPUSH
2188: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2192: LD_EXP 15
2196: PPUSH
2197: LD_INT 4
2199: PPUSH
2200: LD_INT 0
2202: PPUSH
2203: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2207: LD_EXP 16
2211: PPUSH
2212: LD_INT 4
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2222: LD_EXP 15
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 100
2232: PPUSH
2233: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2237: LD_EXP 16
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 80
2247: PPUSH
2248: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2252: LD_EXP 16
2256: PPUSH
2257: LD_INT 3
2259: PPUSH
2260: LD_INT 20
2262: PPUSH
2263: CALL_OW 291
// end ;
2267: LD_VAR 0 1
2271: RET
// export function PowellSupport2 ; var veh , un ; begin
2272: LD_INT 0
2274: PPUSH
2275: PPUSH
2276: PPUSH
// uc_side = 1 ;
2277: LD_ADDR_OWVAR 20
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// uc_nation = 1 ;
2285: LD_ADDR_OWVAR 21
2289: PUSH
2290: LD_INT 1
2292: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2293: LD_ADDR_OWVAR 37
2297: PUSH
2298: LD_INT 2
2300: ST_TO_ADDR
// vc_engine = 3 ;
2301: LD_ADDR_OWVAR 39
2305: PUSH
2306: LD_INT 3
2308: ST_TO_ADDR
// vc_control = 3 ;
2309: LD_ADDR_OWVAR 38
2313: PUSH
2314: LD_INT 3
2316: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2317: LD_ADDR_OWVAR 40
2321: PUSH
2322: LD_INT 3
2324: ST_TO_ADDR
// veh = CreateVehicle ;
2325: LD_ADDR_VAR 0 2
2329: PUSH
2330: CALL_OW 45
2334: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2335: LD_VAR 0 2
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2347: LD_VAR 0 2
2351: PPUSH
2352: LD_INT 4
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// vc_control = 1 ;
2362: LD_ADDR_OWVAR 38
2366: PUSH
2367: LD_INT 1
2369: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2370: LD_ADDR_OWVAR 37
2374: PUSH
2375: LD_INT 2
2377: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2378: LD_ADDR_OWVAR 40
2382: PUSH
2383: LD_INT 5
2385: ST_TO_ADDR
// veh = CreateVehicle ;
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: CALL_OW 45
2395: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2396: LD_VAR 0 2
2400: PPUSH
2401: LD_INT 4
2403: PPUSH
2404: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2408: LD_VAR 0 2
2412: PPUSH
2413: LD_INT 4
2415: PPUSH
2416: LD_INT 0
2418: PPUSH
2419: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2423: LD_STRING 11_Bobby
2425: PPUSH
2426: CALL_OW 28
2430: PUSH
2431: LD_INT 1
2433: EQUAL
2434: IFFALSE 2480
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2436: LD_ADDR_EXP 4
2440: PUSH
2441: LD_STRING 11_Bobby
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: CALL 12229 0 2
2451: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2452: LD_EXP 4
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2464: LD_EXP 4
2468: PPUSH
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 52
// end else
2478: GO 2552
// begin if TestCharacters ( 10c_Bobby ) = true then
2480: LD_STRING 10c_Bobby
2482: PPUSH
2483: CALL_OW 28
2487: PUSH
2488: LD_INT 1
2490: EQUAL
2491: IFFALSE 2537
// begin Bobby = PrepareUnit ( 10c_Bobby , true ) ;
2493: LD_ADDR_EXP 4
2497: PUSH
2498: LD_STRING 10c_Bobby
2500: PPUSH
2501: LD_INT 1
2503: PPUSH
2504: CALL 12229 0 2
2508: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2509: LD_EXP 4
2513: PPUSH
2514: LD_INT 3
2516: PPUSH
2517: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2521: LD_EXP 4
2525: PPUSH
2526: LD_VAR 0 2
2530: PPUSH
2531: CALL_OW 52
// end else
2535: GO 2552
// begin PrepareAmericansRandom ( 0 , veh , 2 ) ;
2537: LD_INT 0
2539: PPUSH
2540: LD_VAR 0 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL 1441 0 3
// end ; end ; if TestCharacters ( 11_Houten ) = true then
2552: LD_STRING 11_Houten
2554: PPUSH
2555: CALL_OW 28
2559: PUSH
2560: LD_INT 1
2562: EQUAL
2563: IFFALSE 2610
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2565: LD_ADDR_EXP 9
2569: PUSH
2570: LD_STRING 11_Houten
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL 12229 0 2
2580: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2581: LD_EXP 9
2585: PPUSH
2586: LD_INT 1
2588: PPUSH
2589: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2593: LD_EXP 9
2597: PPUSH
2598: LD_INT 4
2600: PPUSH
2601: LD_INT 0
2603: PPUSH
2604: CALL_OW 49
// end else
2608: GO 2681
// begin if TestCharacters ( 10c_Houten ) = true then
2610: LD_STRING 10c_Houten
2612: PPUSH
2613: CALL_OW 28
2617: PUSH
2618: LD_INT 1
2620: EQUAL
2621: IFFALSE 2668
// begin Houten = PrepareUnit ( 10c_Houten , true ) ;
2623: LD_ADDR_EXP 9
2627: PUSH
2628: LD_STRING 10c_Houten
2630: PPUSH
2631: LD_INT 1
2633: PPUSH
2634: CALL 12229 0 2
2638: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2639: LD_EXP 9
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2651: LD_EXP 9
2655: PPUSH
2656: LD_INT 4
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: CALL_OW 49
// end else
2666: GO 2681
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
2668: LD_INT 4
2670: PPUSH
2671: LD_INT 0
2673: PPUSH
2674: LD_INT 1
2676: PPUSH
2677: CALL 1441 0 3
// end ; end ; vc_control = 3 ;
2681: LD_ADDR_OWVAR 38
2685: PUSH
2686: LD_INT 3
2688: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2689: LD_ADDR_OWVAR 40
2693: PUSH
2694: LD_INT 12
2696: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2697: LD_ADDR_EXP 17
2701: PUSH
2702: CALL_OW 45
2706: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2707: LD_EXP 17
2711: PPUSH
2712: LD_INT 4
2714: PPUSH
2715: CALL_OW 233
// amCargo4 = CreateVehicle ;
2719: LD_ADDR_EXP 18
2723: PUSH
2724: CALL_OW 45
2728: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2729: LD_EXP 18
2733: PPUSH
2734: LD_INT 4
2736: PPUSH
2737: CALL_OW 233
// amCargo5 = CreateVehicle ;
2741: LD_ADDR_EXP 19
2745: PUSH
2746: CALL_OW 45
2750: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2751: LD_EXP 19
2755: PPUSH
2756: LD_INT 4
2758: PPUSH
2759: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2763: LD_EXP 17
2767: PPUSH
2768: LD_INT 4
2770: PPUSH
2771: LD_INT 0
2773: PPUSH
2774: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2778: LD_EXP 18
2782: PPUSH
2783: LD_INT 4
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2793: LD_EXP 19
2797: PPUSH
2798: LD_INT 4
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2808: LD_EXP 17
2812: PPUSH
2813: LD_INT 1
2815: PPUSH
2816: LD_INT 100
2818: PPUSH
2819: CALL_OW 291
// AddCargo ( amCargo4 , 2 , 100 ) ;
2823: LD_EXP 18
2827: PPUSH
2828: LD_INT 2
2830: PPUSH
2831: LD_INT 100
2833: PPUSH
2834: CALL_OW 291
// AddCargo ( amCargo5 , 1 , 50 ) ;
2838: LD_EXP 19
2842: PPUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_INT 50
2848: PPUSH
2849: CALL_OW 291
// AddCargo ( amCargo5 , 2 , 50 ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 2
2860: PPUSH
2861: LD_INT 50
2863: PPUSH
2864: CALL_OW 291
// end ;
2868: LD_VAR 0 1
2872: RET
// export function PowellSupport3 ; var veh , un ; begin
2873: LD_INT 0
2875: PPUSH
2876: PPUSH
2877: PPUSH
// uc_side = 1 ;
2878: LD_ADDR_OWVAR 20
2882: PUSH
2883: LD_INT 1
2885: ST_TO_ADDR
// uc_nation = 1 ;
2886: LD_ADDR_OWVAR 21
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 ) ;
2894: LD_INT 4
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: LD_INT 1
2902: PPUSH
2903: CALL 1441 0 3
// vc_chassis = us_medium_wheeled ;
2907: LD_ADDR_OWVAR 37
2911: PUSH
2912: LD_INT 2
2914: ST_TO_ADDR
// vc_engine = 3 ;
2915: LD_ADDR_OWVAR 39
2919: PUSH
2920: LD_INT 3
2922: ST_TO_ADDR
// vc_control = 3 ;
2923: LD_ADDR_OWVAR 38
2927: PUSH
2928: LD_INT 3
2930: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2931: LD_ADDR_OWVAR 40
2935: PUSH
2936: LD_INT 12
2938: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2939: LD_ADDR_EXP 20
2943: PUSH
2944: CALL_OW 45
2948: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2949: LD_ADDR_EXP 21
2953: PUSH
2954: CALL_OW 45
2958: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2959: LD_EXP 20
2963: PPUSH
2964: LD_INT 4
2966: PPUSH
2967: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2971: LD_EXP 21
2975: PPUSH
2976: LD_INT 4
2978: PPUSH
2979: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2983: LD_EXP 20
2987: PPUSH
2988: LD_INT 4
2990: PPUSH
2991: LD_INT 0
2993: PPUSH
2994: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2998: LD_EXP 21
3002: PPUSH
3003: LD_INT 4
3005: PPUSH
3006: LD_INT 0
3008: PPUSH
3009: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3013: LD_EXP 20
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: LD_INT 100
3023: PPUSH
3024: CALL_OW 291
// AddCargo ( amCargo7 , 2 , 100 ) ;
3028: LD_EXP 21
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: LD_INT 100
3038: PPUSH
3039: CALL_OW 291
// end ; end_of_file
3043: LD_VAR 0 1
3047: RET
// export function PrepareRussianCommander ; begin
3048: LD_INT 0
3050: PPUSH
// uc_side = 3 ;
3051: LD_ADDR_OWVAR 20
3055: PUSH
3056: LD_INT 3
3058: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3059: LD_ADDR_EXP 23
3063: PUSH
3064: LD_STRING Davidov
3066: PPUSH
3067: LD_INT 0
3069: PPUSH
3070: CALL 12229 0 2
3074: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3075: LD_EXP 23
3079: PPUSH
3080: LD_INT 3
3082: PPUSH
3083: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3087: LD_ADDR_EXP 34
3091: PUSH
3092: LD_EXP 34
3096: PUSH
3097: LD_EXP 23
3101: ADD
3102: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3103: LD_EXP 34
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: CALL_OW 336
// end ;
3115: LD_VAR 0 1
3119: RET
// export function PrepareEastBase ; var i , un ; begin
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3125: LD_INT 3
3127: PPUSH
3128: LD_INT 3
3130: PPUSH
3131: LD_INT 121
3133: PPUSH
3134: LD_EXP 36
3138: PPUSH
3139: LD_EXP 37
3143: PPUSH
3144: CALL_OW 12
3148: PPUSH
3149: LD_INT 1
3151: PPUSH
3152: LD_INT 3
3154: PPUSH
3155: CALL 13021 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3159: LD_INT 3
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 121
3167: PPUSH
3168: LD_EXP 36
3172: PPUSH
3173: LD_EXP 37
3177: PPUSH
3178: CALL_OW 12
3182: PPUSH
3183: LD_INT 9
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: CALL 13021 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3193: LD_INT 3
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 4
3201: PPUSH
3202: LD_EXP 36
3206: PPUSH
3207: LD_EXP 37
3211: PPUSH
3212: CALL_OW 12
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_INT 6
3222: PPUSH
3223: CALL 13021 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3227: LD_INT 3
3229: PPUSH
3230: LD_INT 3
3232: PPUSH
3233: LD_INT 112
3235: PPUSH
3236: LD_EXP 36
3240: PPUSH
3241: LD_EXP 37
3245: PPUSH
3246: CALL_OW 12
3250: PPUSH
3251: LD_INT 3
3253: PPUSH
3254: LD_INT 6
3256: PPUSH
3257: CALL 13021 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3261: LD_INT 3
3263: PPUSH
3264: LD_INT 3
3266: PPUSH
3267: LD_INT 47
3269: PPUSH
3270: LD_EXP 36
3274: PPUSH
3275: LD_EXP 37
3279: PPUSH
3280: CALL_OW 12
3284: PPUSH
3285: LD_INT 4
3287: PPUSH
3288: LD_INT 6
3290: PPUSH
3291: CALL 13021 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3295: LD_INT 3
3297: PPUSH
3298: LD_INT 3
3300: PPUSH
3301: LD_INT 129
3303: PPUSH
3304: LD_EXP 36
3308: PPUSH
3309: LD_EXP 37
3313: PPUSH
3314: CALL_OW 12
3318: PPUSH
3319: LD_INT 4
3321: PPUSH
3322: LD_INT 6
3324: PPUSH
3325: CALL 13021 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3329: LD_INT 3
3331: PPUSH
3332: LD_INT 3
3334: PPUSH
3335: LD_INT 135
3337: PPUSH
3338: LD_EXP 36
3342: PPUSH
3343: LD_EXP 37
3347: PPUSH
3348: CALL_OW 12
3352: PPUSH
3353: LD_INT 4
3355: PPUSH
3356: LD_INT 6
3358: PPUSH
3359: CALL 13021 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3363: LD_ADDR_VAR 0 2
3367: PUSH
3368: LD_INT 22
3370: PUSH
3371: LD_INT 3
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PUSH
3378: LD_INT 30
3380: PUSH
3381: LD_INT 32
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PPUSH
3392: CALL_OW 69
3396: PUSH
3397: FOR_IN
3398: IFFALSE 3438
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3400: LD_INT 3
3402: PPUSH
3403: LD_INT 3
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: LD_EXP 36
3415: PPUSH
3416: LD_EXP 37
3420: PPUSH
3421: CALL_OW 12
3425: PPUSH
3426: LD_INT 1
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: CALL 13021 0 6
3436: GO 3397
3438: POP
3439: POP
// for i = 1 to 5 do
3440: LD_ADDR_VAR 0 2
3444: PUSH
3445: DOUBLE
3446: LD_INT 1
3448: DEC
3449: ST_TO_ADDR
3450: LD_INT 5
3452: PUSH
3453: FOR_TO
3454: IFFALSE 3553
// begin uc_side = 3 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 3
3463: ST_TO_ADDR
// uc_nation = 3 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 3
3471: ST_TO_ADDR
// hc_gallery =  ;
3472: LD_ADDR_OWVAR 33
3476: PUSH
3477: LD_STRING 
3479: ST_TO_ADDR
// hc_name =  ;
3480: LD_ADDR_OWVAR 26
3484: PUSH
3485: LD_STRING 
3487: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 4
3493: PPUSH
3494: LD_EXP 36
3498: PPUSH
3499: LD_EXP 37
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: CALL_OW 380
// un = CreateHuman ;
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: CALL_OW 44
3522: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3523: LD_VAR 0 3
3527: PPUSH
3528: LD_INT 3
3530: PPUSH
3531: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3535: LD_ADDR_EXP 34
3539: PUSH
3540: LD_EXP 34
3544: PUSH
3545: LD_VAR 0 3
3549: ADD
3550: ST_TO_ADDR
// end ;
3551: GO 3453
3553: POP
3554: POP
// end ;
3555: LD_VAR 0 1
3559: RET
// export function PrepareWestBase ; var i , un ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3565: LD_INT 3
3567: PPUSH
3568: LD_INT 3
3570: PPUSH
3571: LD_INT 6
3573: PPUSH
3574: LD_EXP 36
3578: PPUSH
3579: LD_EXP 37
3583: PPUSH
3584: CALL_OW 12
3588: PPUSH
3589: LD_INT 2
3591: PPUSH
3592: LD_INT 3
3594: PPUSH
3595: CALL 13021 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3599: LD_INT 3
3601: PPUSH
3602: LD_INT 3
3604: PPUSH
3605: LD_INT 91
3607: PPUSH
3608: LD_EXP 36
3612: PPUSH
3613: LD_EXP 37
3617: PPUSH
3618: CALL_OW 12
3622: PPUSH
3623: LD_INT 4
3625: PPUSH
3626: LD_INT 3
3628: PPUSH
3629: CALL 13021 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3633: LD_INT 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: LD_INT 21
3641: PPUSH
3642: LD_EXP 36
3646: PPUSH
3647: LD_EXP 37
3651: PPUSH
3652: CALL_OW 12
3656: PPUSH
3657: LD_INT 3
3659: PPUSH
3660: LD_INT 6
3662: PPUSH
3663: CALL 13021 0 6
// end ;
3667: LD_VAR 0 1
3671: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
3677: PPUSH
// uc_side = 3 ;
3678: LD_ADDR_OWVAR 20
3682: PUSH
3683: LD_INT 3
3685: ST_TO_ADDR
// uc_nation = 3 ;
3686: LD_ADDR_OWVAR 21
3690: PUSH
3691: LD_INT 3
3693: ST_TO_ADDR
// for i = 1 to 5 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 5
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3778
// begin hc_gallery =  ;
3710: LD_ADDR_OWVAR 33
3714: PUSH
3715: LD_STRING 
3717: ST_TO_ADDR
// hc_name =  ;
3718: LD_ADDR_OWVAR 26
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3726: LD_INT 0
3728: PPUSH
3729: LD_INT 9
3731: PPUSH
3732: LD_EXP 36
3736: PPUSH
3737: LD_EXP 37
3741: PPUSH
3742: CALL_OW 12
3746: PPUSH
3747: CALL_OW 380
// un = CreateHuman ;
3751: LD_ADDR_VAR 0 3
3755: PUSH
3756: CALL_OW 44
3760: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_INT 8
3768: PPUSH
3769: LD_INT 0
3771: PPUSH
3772: CALL_OW 49
// end ;
3776: GO 3707
3778: POP
3779: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: DOUBLE
3786: LD_INT 1
3788: DEC
3789: ST_TO_ADDR
3790: LD_INT 2
3792: PUSH
3793: LD_INT 3
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_OWVAR 67
3808: ARRAY
3809: PUSH
3810: FOR_TO
3811: IFFALSE 3881
// begin hc_gallery =  ;
3813: LD_ADDR_OWVAR 33
3817: PUSH
3818: LD_STRING 
3820: ST_TO_ADDR
// hc_name =  ;
3821: LD_ADDR_OWVAR 26
3825: PUSH
3826: LD_STRING 
3828: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3829: LD_INT 0
3831: PPUSH
3832: LD_INT 4
3834: PPUSH
3835: LD_EXP 36
3839: PPUSH
3840: LD_EXP 37
3844: PPUSH
3845: CALL_OW 12
3849: PPUSH
3850: CALL_OW 380
// un = CreateHuman ;
3854: LD_ADDR_VAR 0 3
3858: PUSH
3859: CALL_OW 44
3863: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3864: LD_VAR 0 3
3868: PPUSH
3869: LD_INT 8
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 49
// end ;
3879: GO 3810
3881: POP
3882: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3883: LD_ADDR_VAR 0 2
3887: PUSH
3888: DOUBLE
3889: LD_INT 1
3891: DEC
3892: ST_TO_ADDR
3893: LD_INT 3
3895: PUSH
3896: LD_INT 4
3898: PUSH
3899: LD_INT 5
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: PUSH
3907: LD_OWVAR 67
3911: ARRAY
3912: PUSH
3913: FOR_TO
3914: IFFALSE 4110
// begin vc_engine = 3 ;
3916: LD_ADDR_OWVAR 39
3920: PUSH
3921: LD_INT 3
3923: ST_TO_ADDR
// vc_control = 1 ;
3924: LD_ADDR_OWVAR 38
3928: PUSH
3929: LD_INT 1
3931: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3932: LD_ADDR_OWVAR 40
3936: PUSH
3937: LD_INT 42
3939: PUSH
3940: LD_INT 43
3942: PUSH
3943: LD_INT 44
3945: PUSH
3946: LD_INT 45
3948: PUSH
3949: LD_INT 46
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 1
3961: PPUSH
3962: LD_INT 5
3964: PPUSH
3965: CALL_OW 12
3969: ARRAY
3970: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3971: LD_OWVAR 40
3975: PUSH
3976: LD_INT 46
3978: EQUAL
3979: IFFALSE 3991
// vc_chassis = ru_heavy_tracked else
3981: LD_ADDR_OWVAR 37
3985: PUSH
3986: LD_INT 24
3988: ST_TO_ADDR
3989: GO 4018
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3991: LD_ADDR_OWVAR 37
3995: PUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 21
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 1
4008: PPUSH
4009: LD_INT 2
4011: PPUSH
4012: CALL_OW 12
4016: ARRAY
4017: ST_TO_ADDR
// veh = CreateVehicle ;
4018: LD_ADDR_VAR 0 4
4022: PUSH
4023: CALL_OW 45
4027: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4028: LD_VAR 0 4
4032: PPUSH
4033: LD_INT 3
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_INT 5
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 49
// hc_gallery =  ;
4055: LD_ADDR_OWVAR 33
4059: PUSH
4060: LD_STRING 
4062: ST_TO_ADDR
// hc_name =  ;
4063: LD_ADDR_OWVAR 26
4067: PUSH
4068: LD_STRING 
4070: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4071: LD_INT 0
4073: PPUSH
4074: LD_INT 3
4076: PPUSH
4077: LD_INT 10
4079: PPUSH
4080: CALL_OW 380
// un = CreateHuman ;
4084: LD_ADDR_VAR 0 3
4088: PUSH
4089: CALL_OW 44
4093: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4094: LD_VAR 0 3
4098: PPUSH
4099: LD_VAR 0 4
4103: PPUSH
4104: CALL_OW 52
// end ;
4108: GO 3913
4110: POP
4111: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4112: LD_ADDR_VAR 0 2
4116: PUSH
4117: DOUBLE
4118: LD_INT 1
4120: DEC
4121: ST_TO_ADDR
4122: LD_INT 3
4124: PUSH
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: LD_OWVAR 67
4140: ARRAY
4141: PUSH
4142: FOR_TO
4143: IFFALSE 4290
// begin vc_engine = 3 ;
4145: LD_ADDR_OWVAR 39
4149: PUSH
4150: LD_INT 3
4152: ST_TO_ADDR
// vc_control = 3 ;
4153: LD_ADDR_OWVAR 38
4157: PUSH
4158: LD_INT 3
4160: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4161: LD_ADDR_OWVAR 40
4165: PUSH
4166: LD_INT 42
4168: PUSH
4169: LD_INT 43
4171: PUSH
4172: LD_INT 44
4174: PUSH
4175: LD_INT 45
4177: PUSH
4178: LD_INT 46
4180: PUSH
4181: LD_INT 49
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 1
4194: PPUSH
4195: LD_INT 5
4197: PPUSH
4198: CALL_OW 12
4202: ARRAY
4203: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4204: LD_OWVAR 40
4208: PUSH
4209: LD_INT 46
4211: EQUAL
4212: IFFALSE 4224
// vc_chassis = ru_heavy_tracked else
4214: LD_ADDR_OWVAR 37
4218: PUSH
4219: LD_INT 24
4221: ST_TO_ADDR
4222: GO 4251
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4224: LD_ADDR_OWVAR 37
4228: PUSH
4229: LD_INT 22
4231: PUSH
4232: LD_INT 21
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 2
4244: PPUSH
4245: CALL_OW 12
4249: ARRAY
4250: ST_TO_ADDR
// veh = CreateVehicle ;
4251: LD_ADDR_VAR 0 4
4255: PUSH
4256: CALL_OW 45
4260: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4261: LD_VAR 0 4
4265: PPUSH
4266: LD_INT 3
4268: PPUSH
4269: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4273: LD_VAR 0 4
4277: PPUSH
4278: LD_INT 6
4280: PPUSH
4281: LD_INT 0
4283: PPUSH
4284: CALL_OW 49
// end ;
4288: GO 4142
4290: POP
4291: POP
// end ; end_of_file
4292: LD_VAR 0 1
4296: RET
// export function PrepareKurt ; begin
4297: LD_INT 0
4299: PPUSH
// uc_side = 8 ;
4300: LD_ADDR_OWVAR 20
4304: PUSH
4305: LD_INT 8
4307: ST_TO_ADDR
// uc_nation = 2 ;
4308: LD_ADDR_OWVAR 21
4312: PUSH
4313: LD_INT 2
4315: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4316: LD_ADDR_OWVAR 37
4320: PUSH
4321: LD_INT 13
4323: ST_TO_ADDR
// vc_engine = 1 ;
4324: LD_ADDR_OWVAR 39
4328: PUSH
4329: LD_INT 1
4331: ST_TO_ADDR
// vc_control = 1 ;
4332: LD_ADDR_OWVAR 38
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// vc_weapon = 24 ;
4340: LD_ADDR_OWVAR 40
4344: PUSH
4345: LD_INT 24
4347: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4348: LD_ADDR_EXP 26
4352: PUSH
4353: CALL_OW 45
4357: ST_TO_ADDR
// if kurtStatus > 0 then
4358: LD_EXP 27
4362: PUSH
4363: LD_INT 0
4365: GREATER
4366: IFFALSE 4415
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4368: LD_ADDR_EXP 24
4372: PUSH
4373: LD_STRING Kurt
4375: PPUSH
4376: LD_INT 0
4378: PPUSH
4379: CALL 12229 0 2
4383: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4384: LD_EXP 26
4388: PPUSH
4389: LD_INT 4
4391: PPUSH
4392: LD_INT 0
4394: PPUSH
4395: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4399: LD_EXP 24
4403: PPUSH
4404: LD_EXP 26
4408: PPUSH
4409: CALL_OW 52
// end else
4413: GO 4476
// begin hc_name =  ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING 
4422: ST_TO_ADDR
// hc_gallery =  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// otherKurt = PrepareSoldier ( sex_male , 10 ) ;
4431: LD_ADDR_EXP 25
4435: PUSH
4436: LD_INT 1
4438: PPUSH
4439: LD_INT 10
4441: PPUSH
4442: CALL_OW 381
4446: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4447: LD_EXP 26
4451: PPUSH
4452: LD_INT 4
4454: PPUSH
4455: LD_INT 0
4457: PPUSH
4458: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4462: LD_EXP 25
4466: PPUSH
4467: LD_EXP 26
4471: PPUSH
4472: CALL_OW 52
// end ; end ;
4476: LD_VAR 0 1
4480: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4481: LD_INT 0
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
// for i = 1 to 3 do
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: DOUBLE
4493: LD_INT 1
4495: DEC
4496: ST_TO_ADDR
4497: LD_INT 3
4499: PUSH
4500: FOR_TO
4501: IFFALSE 4638
// begin uc_side = 1 ;
4503: LD_ADDR_OWVAR 20
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// uc_nation = 2 ;
4511: LD_ADDR_OWVAR 21
4515: PUSH
4516: LD_INT 2
4518: ST_TO_ADDR
// hc_gallery =  ;
4519: LD_ADDR_OWVAR 33
4523: PUSH
4524: LD_STRING 
4526: ST_TO_ADDR
// hc_name =  ;
4527: LD_ADDR_OWVAR 26
4531: PUSH
4532: LD_STRING 
4534: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4535: LD_EXP 27
4539: PUSH
4540: LD_INT 0
4542: EQUAL
4543: PUSH
4544: LD_EXP 27
4548: PUSH
4549: LD_INT 2
4551: EQUAL
4552: OR
4553: IFFALSE 4578
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4555: LD_INT 0
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: LD_INT 2
4563: PPUSH
4564: LD_INT 4
4566: PPUSH
4567: CALL_OW 12
4571: PPUSH
4572: CALL_OW 380
4576: GO 4599
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4578: LD_INT 0
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: LD_INT 6
4586: PPUSH
4587: LD_INT 8
4589: PPUSH
4590: CALL_OW 12
4594: PPUSH
4595: CALL_OW 380
// un = CreateHuman ;
4599: LD_ADDR_VAR 0 3
4603: PUSH
4604: CALL_OW 44
4608: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4609: LD_VAR 0 3
4613: PPUSH
4614: LD_INT 4
4616: PPUSH
4617: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4621: LD_VAR 0 3
4625: PPUSH
4626: LD_INT 4
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 49
// end ;
4636: GO 4500
4638: POP
4639: POP
// vc_chassis = 14 ;
4640: LD_ADDR_OWVAR 37
4644: PUSH
4645: LD_INT 14
4647: ST_TO_ADDR
// vc_engine = 3 ;
4648: LD_ADDR_OWVAR 39
4652: PUSH
4653: LD_INT 3
4655: ST_TO_ADDR
// vc_control = 1 ;
4656: LD_ADDR_OWVAR 38
4660: PUSH
4661: LD_INT 1
4663: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4664: LD_ADDR_OWVAR 40
4668: PUSH
4669: LD_INT 27
4671: PUSH
4672: LD_INT 26
4674: PUSH
4675: LD_INT 28
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: PUSH
4683: LD_INT 1
4685: PPUSH
4686: LD_INT 3
4688: PPUSH
4689: CALL_OW 12
4693: ARRAY
4694: ST_TO_ADDR
// veh = CreateVehicle ;
4695: LD_ADDR_VAR 0 4
4699: PUSH
4700: CALL_OW 45
4704: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4705: LD_VAR 0 4
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4717: LD_VAR 0 4
4721: PPUSH
4722: LD_INT 4
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4732: LD_EXP 27
4736: PUSH
4737: LD_INT 0
4739: EQUAL
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 2
4748: EQUAL
4749: OR
4750: IFFALSE 4775
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 3
4757: PPUSH
4758: LD_INT 2
4760: PPUSH
4761: LD_INT 4
4763: PPUSH
4764: CALL_OW 12
4768: PPUSH
4769: CALL_OW 380
4773: GO 4796
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4775: LD_INT 0
4777: PPUSH
4778: LD_INT 3
4780: PPUSH
4781: LD_INT 6
4783: PPUSH
4784: LD_INT 8
4786: PPUSH
4787: CALL_OW 12
4791: PPUSH
4792: CALL_OW 380
// un = CreateHuman ;
4796: LD_ADDR_VAR 0 3
4800: PUSH
4801: CALL_OW 44
4805: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4806: LD_VAR 0 3
4810: PPUSH
4811: LD_VAR 0 4
4815: PPUSH
4816: CALL_OW 52
// vc_chassis = 14 ;
4820: LD_ADDR_OWVAR 37
4824: PUSH
4825: LD_INT 14
4827: ST_TO_ADDR
// vc_engine = 3 ;
4828: LD_ADDR_OWVAR 39
4832: PUSH
4833: LD_INT 3
4835: ST_TO_ADDR
// vc_control = 1 ;
4836: LD_ADDR_OWVAR 38
4840: PUSH
4841: LD_INT 1
4843: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4844: LD_ADDR_OWVAR 40
4848: PUSH
4849: LD_INT 27
4851: PUSH
4852: LD_INT 26
4854: PUSH
4855: LD_INT 28
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 1
4865: PPUSH
4866: LD_INT 3
4868: PPUSH
4869: CALL_OW 12
4873: ARRAY
4874: ST_TO_ADDR
// veh = CreateVehicle ;
4875: LD_ADDR_VAR 0 4
4879: PUSH
4880: CALL_OW 45
4884: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4885: LD_VAR 0 4
4889: PPUSH
4890: LD_INT 4
4892: PPUSH
4893: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4897: LD_VAR 0 4
4901: PPUSH
4902: LD_INT 4
4904: PPUSH
4905: LD_INT 0
4907: PPUSH
4908: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4912: LD_EXP 27
4916: PUSH
4917: LD_INT 0
4919: EQUAL
4920: PUSH
4921: LD_EXP 27
4925: PUSH
4926: LD_INT 2
4928: EQUAL
4929: OR
4930: IFFALSE 4955
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4932: LD_INT 0
4934: PPUSH
4935: LD_INT 4
4937: PPUSH
4938: LD_INT 2
4940: PPUSH
4941: LD_INT 4
4943: PPUSH
4944: CALL_OW 12
4948: PPUSH
4949: CALL_OW 380
4953: GO 4976
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4955: LD_INT 0
4957: PPUSH
4958: LD_INT 4
4960: PPUSH
4961: LD_INT 6
4963: PPUSH
4964: LD_INT 8
4966: PPUSH
4967: CALL_OW 12
4971: PPUSH
4972: CALL_OW 380
// un = CreateHuman ;
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: CALL_OW 44
4985: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4986: LD_VAR 0 3
4990: PPUSH
4991: LD_INT 4
4993: PPUSH
4994: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4998: LD_VAR 0 3
5002: PPUSH
5003: LD_VAR 0 4
5007: PPUSH
5008: CALL_OW 52
// end ;
5012: LD_VAR 0 1
5016: RET
// export function PrepareAttackLegion ; var i , un ; begin
5017: LD_INT 0
5019: PPUSH
5020: PPUSH
5021: PPUSH
// for i = 1 to 4 do
5022: LD_ADDR_VAR 0 2
5026: PUSH
5027: DOUBLE
5028: LD_INT 1
5030: DEC
5031: ST_TO_ADDR
5032: LD_INT 4
5034: PUSH
5035: FOR_TO
5036: IFFALSE 5137
// begin uc_side = 1 ;
5038: LD_ADDR_OWVAR 20
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// uc_nation = 2 ;
5046: LD_ADDR_OWVAR 21
5050: PUSH
5051: LD_INT 2
5053: ST_TO_ADDR
// hc_gallery =  ;
5054: LD_ADDR_OWVAR 33
5058: PUSH
5059: LD_STRING 
5061: ST_TO_ADDR
// hc_name =  ;
5062: LD_ADDR_OWVAR 26
5066: PUSH
5067: LD_STRING 
5069: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5070: LD_INT 0
5072: PPUSH
5073: LD_INT 1
5075: PUSH
5076: LD_INT 8
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: CALL_OW 12
5093: ARRAY
5094: PPUSH
5095: LD_INT 6
5097: PPUSH
5098: LD_INT 8
5100: PPUSH
5101: CALL_OW 12
5105: PPUSH
5106: CALL_OW 380
// un = CreateHuman ;
5110: LD_ADDR_VAR 0 3
5114: PUSH
5115: CALL_OW 44
5119: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5120: LD_VAR 0 3
5124: PPUSH
5125: LD_INT 19
5127: PPUSH
5128: LD_INT 0
5130: PPUSH
5131: CALL_OW 49
// end ;
5135: GO 5035
5137: POP
5138: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5139: LD_INT 1
5141: PPUSH
5142: LD_INT 8
5144: PPUSH
5145: LD_INT 2
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5155: LD_INT 20
5157: PPUSH
5158: LD_INT 3
5160: PPUSH
5161: CALL 15145 0 2
// end ; end_of_file
5165: LD_VAR 0 1
5169: RET
// every 1 do var i ;
5170: GO 5172
5172: DISABLE
5173: LD_INT 0
5175: PPUSH
// begin TeleportExit ( ruteleprt , 117 , 131 ) ;
5176: LD_INT 10
5178: PPUSH
5179: LD_INT 117
5181: PPUSH
5182: LD_INT 131
5184: PPUSH
5185: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5189: LD_INT 137
5191: PPUSH
5192: LD_INT 84
5194: PPUSH
5195: LD_INT 61
5197: PPUSH
5198: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5202: LD_EXP 1
5206: PPUSH
5207: CALL_OW 310
5211: PPUSH
5212: CALL_OW 87
// InGameOn ;
5216: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 102 ) ;
5220: LD_INT 22
5222: PUSH
5223: LD_INT 1
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PPUSH
5230: CALL_OW 69
5234: PPUSH
5235: LD_INT 130
5237: PPUSH
5238: LD_INT 102
5240: PPUSH
5241: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5245: LD_VAR 0 1
5249: PPUSH
5250: LD_INT 114
5252: PPUSH
5253: LD_INT 102
5255: PPUSH
5256: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5260: LD_EXP 1
5264: PPUSH
5265: LD_STRING D1-JMM-1
5267: PPUSH
5268: CALL_OW 88
// if IsOk ( Donaldson ) then
5272: LD_EXP 3
5276: PPUSH
5277: CALL_OW 302
5281: IFFALSE 5319
// begin Say ( Donaldson , D1-Don-1 ) ;
5283: LD_EXP 3
5287: PPUSH
5288: LD_STRING D1-Don-1
5290: PPUSH
5291: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
5295: LD_EXP 1
5299: PPUSH
5300: LD_STRING D1-JMM-2
5302: PPUSH
5303: CALL_OW 88
// Say ( Donaldson , D1-Don-2 ) ;
5307: LD_EXP 3
5311: PPUSH
5312: LD_STRING D1-Don-2
5314: PPUSH
5315: CALL_OW 88
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 104 , 96 ) ;
5319: LD_INT 22
5321: PUSH
5322: LD_INT 1
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: PPUSH
5329: CALL_OW 69
5333: PPUSH
5334: LD_INT 104
5336: PPUSH
5337: LD_INT 96
5339: PPUSH
5340: CALL_OW 171
// end ;
5344: PPOPN 1
5346: END
// every 0 0$1 trigger SeeXY ( 1 , 101 , 92 ) do var i ;
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 101
5352: PPUSH
5353: LD_INT 92
5355: PPUSH
5356: CALL_OW 293
5360: IFFALSE 5535
5362: GO 5364
5364: DISABLE
5365: LD_INT 0
5367: PPUSH
// begin CenterOnXY ( 99 , 89 ) ;
5368: LD_INT 99
5370: PPUSH
5371: LD_INT 89
5373: PPUSH
5374: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff JMM ) , D1-Sol1-2 ,  ) ;
5378: LD_INT 22
5380: PUSH
5381: LD_INT 1
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: LD_INT 26
5390: PUSH
5391: LD_INT 1
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 2
5400: PUSH
5401: LD_INT 25
5403: PUSH
5404: LD_INT 1
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 25
5413: PUSH
5414: LD_INT 2
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 25
5423: PUSH
5424: LD_INT 3
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 25
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PUSH
5453: LD_EXP 1
5457: DIFF
5458: PPUSH
5459: CALL_OW 69
5463: PPUSH
5464: LD_STRING D1-Sol1-2
5466: PPUSH
5467: LD_STRING 
5469: PPUSH
5470: CALL 12337 0 3
// Say ( JMM , D1-JMM-3 ) ;
5474: LD_EXP 1
5478: PPUSH
5479: LD_STRING D1-JMM-3
5481: PPUSH
5482: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5486: LD_STRING M1
5488: PPUSH
5489: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5493: LD_ADDR_VAR 0 1
5497: PUSH
5498: LD_INT 22
5500: PUSH
5501: LD_INT 1
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: CALL_OW 69
5512: PUSH
5513: FOR_IN
5514: IFFALSE 5533
// ComMoveXY ( i , 93 , 83 ) ;
5516: LD_VAR 0 1
5520: PPUSH
5521: LD_INT 93
5523: PPUSH
5524: LD_INT 83
5526: PPUSH
5527: CALL_OW 111
5531: GO 5513
5533: POP
5534: POP
// end ;
5535: PPOPN 1
5537: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5538: GO 5540
5540: DISABLE
5541: LD_INT 0
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 8
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 3
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 25
5567: PUSH
5568: LD_INT 9
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5584: LD_ADDR_VAR 0 3
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: PPUSH
5602: CALL_OW 69
5606: ST_TO_ADDR
// enable ;
5607: ENABLE
// for i in your_units do
5608: LD_ADDR_VAR 0 1
5612: PUSH
5613: LD_VAR 0 3
5617: PUSH
5618: FOR_IN
5619: IFFALSE 6254
// begin if See ( 3 , i ) then
5621: LD_INT 3
5623: PPUSH
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 292
5633: IFFALSE 6252
// begin disable ;
5635: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_INT 96
5643: PPUSH
5644: LD_INT 85
5646: PPUSH
5647: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5651: LD_VAR 0 2
5655: PPUSH
5656: LD_INT 96
5658: PPUSH
5659: LD_INT 85
5661: PPUSH
5662: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 96
5673: PPUSH
5674: LD_INT 85
5676: PPUSH
5677: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5681: LD_VAR 0 2
5685: PPUSH
5686: LD_INT 96
5688: PPUSH
5689: LD_INT 85
5691: PPUSH
5692: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_INT 96
5703: PPUSH
5704: LD_INT 85
5706: PPUSH
5707: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5711: LD_VAR 0 2
5715: PPUSH
5716: LD_INT 96
5718: PPUSH
5719: LD_INT 85
5721: PPUSH
5722: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5726: LD_EXP 1
5730: PPUSH
5731: LD_STRING D1a-JMM-1
5733: PPUSH
5734: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5738: LD_EXP 3
5742: PPUSH
5743: LD_STRING D1a-Don-1
5745: PPUSH
5746: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5750: LD_ADDR_VAR 0 1
5754: PUSH
5755: LD_INT 22
5757: PUSH
5758: LD_INT 1
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PPUSH
5765: CALL_OW 69
5769: PUSH
5770: FOR_IN
5771: IFFALSE 5790
// ComMoveXY ( i , 109 , 102 ) ;
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 109
5780: PPUSH
5781: LD_INT 102
5783: PPUSH
5784: CALL_OW 111
5788: GO 5770
5790: POP
5791: POP
// Say ( JMM , D1a-JMM-2 ) ;
5792: LD_EXP 1
5796: PPUSH
5797: LD_STRING D1a-JMM-2
5799: PPUSH
5800: CALL_OW 88
// wait ( 0 0$10 ) ;
5804: LD_INT 350
5806: PPUSH
5807: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5811: LD_EXP 1
5815: PPUSH
5816: CALL_OW 310
5820: PPUSH
5821: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
5825: LD_EXP 3
5829: PPUSH
5830: LD_STRING D1b-Don-1
5832: PPUSH
5833: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
5837: LD_EXP 1
5841: PPUSH
5842: LD_STRING D1b-JMM-1
5844: PPUSH
5845: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D1b-Sol1-1 ,  ) ;
5849: LD_INT 22
5851: PUSH
5852: LD_INT 1
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PUSH
5859: LD_INT 26
5861: PUSH
5862: LD_INT 1
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: LD_INT 25
5874: PUSH
5875: LD_INT 1
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 25
5884: PUSH
5885: LD_INT 2
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 3
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 25
5904: PUSH
5905: LD_INT 4
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_EXP 1
5928: PUSH
5929: EMPTY
5930: LIST
5931: DIFF
5932: PPUSH
5933: CALL_OW 69
5937: PPUSH
5938: LD_STRING D1b-Sol1-1
5940: PPUSH
5941: LD_STRING 
5943: PPUSH
5944: CALL 12337 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
5948: LD_EXP 3
5952: PPUSH
5953: LD_STRING D1b-Don-2
5955: PPUSH
5956: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
5960: LD_EXP 1
5964: PPUSH
5965: LD_STRING D1b-JMM-2
5967: PPUSH
5968: CALL_OW 88
// dec = ShowQuery1 ;
5972: LD_ADDR_VAR 0 4
5976: PUSH
5977: CALL 12873 0 0
5981: ST_TO_ADDR
// if dec = 1 then
5982: LD_VAR 0 4
5986: PUSH
5987: LD_INT 1
5989: EQUAL
5990: IFFALSE 6096
// begin Say ( JMM , D2-JMM-1 ) ;
5992: LD_EXP 1
5996: PPUSH
5997: LD_STRING D2-JMM-1
5999: PPUSH
6000: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6004: LD_EXP 22
6008: PPUSH
6009: LD_STRING D2-Pow-1
6011: PPUSH
6012: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6016: LD_EXP 1
6020: PPUSH
6021: LD_STRING D2a-JMM-1
6023: PPUSH
6024: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6028: LD_EXP 22
6032: PPUSH
6033: LD_STRING D2a-Pow-1
6035: PPUSH
6036: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6040: LD_EXP 1
6044: PPUSH
6045: LD_STRING D2a-JMM-2
6047: PPUSH
6048: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6052: LD_EXP 22
6056: PPUSH
6057: LD_STRING D2a-Pow-2
6059: PPUSH
6060: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6064: LD_EXP 1
6068: PPUSH
6069: LD_STRING D2a-JMM-3
6071: PPUSH
6072: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6076: LD_EXP 22
6080: PPUSH
6081: LD_STRING D2a-Pow-3
6083: PPUSH
6084: CALL_OW 94
// secondPass = 2 ;
6088: LD_ADDR_EXP 28
6092: PUSH
6093: LD_INT 2
6095: ST_TO_ADDR
// end ; if dec = 2 then
6096: LD_VAR 0 4
6100: PUSH
6101: LD_INT 2
6103: EQUAL
6104: IFFALSE 6198
// begin Say ( JMM , D2-JMM-1 ) ;
6106: LD_EXP 1
6110: PPUSH
6111: LD_STRING D2-JMM-1
6113: PPUSH
6114: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6118: LD_EXP 22
6122: PPUSH
6123: LD_STRING D2-Pow-1
6125: PPUSH
6126: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6130: LD_EXP 1
6134: PPUSH
6135: LD_STRING D2b-JMM-1
6137: PPUSH
6138: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6142: LD_EXP 22
6146: PPUSH
6147: LD_STRING D2b-Pow-1
6149: PPUSH
6150: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6154: LD_EXP 1
6158: PPUSH
6159: LD_STRING D2c-JMM-1
6161: PPUSH
6162: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6166: LD_EXP 22
6170: PPUSH
6171: LD_STRING D2c-Pow-1
6173: PPUSH
6174: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6178: LD_EXP 1
6182: PPUSH
6183: LD_STRING D2c-JMM-2
6185: PPUSH
6186: CALL_OW 88
// secondPass = 2 ;
6190: LD_ADDR_EXP 28
6194: PUSH
6195: LD_INT 2
6197: ST_TO_ADDR
// end ; if dec = 3 then
6198: LD_VAR 0 4
6202: PUSH
6203: LD_INT 3
6205: EQUAL
6206: IFFALSE 6216
// secondPass = 1 ;
6208: LD_ADDR_EXP 28
6212: PUSH
6213: LD_INT 1
6215: ST_TO_ADDR
// InGameOff ;
6216: CALL_OW 9
// ruAI = 1 ;
6220: LD_ADDR_EXP 41
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6228: LD_INT 1
6230: PPUSH
6231: LD_INT 3
6233: PPUSH
6234: LD_INT 2
6236: PPUSH
6237: LD_INT 1
6239: PPUSH
6240: CALL_OW 80
// SaveForQuickRestart ;
6244: CALL_OW 22
// exit ;
6248: POP
6249: POP
6250: GO 6256
// end ; end ;
6252: GO 5618
6254: POP
6255: POP
// end ;
6256: PPOPN 4
6258: END
// every 1 1$0 trigger secondPass = 2 do
6259: LD_EXP 28
6263: PUSH
6264: LD_INT 2
6266: EQUAL
6267: IFFALSE 6394
6269: GO 6271
6271: DISABLE
// begin PowellSupport1 ;
6272: CALL 1723 0 0
// DialogueOn ;
6276: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6280: LD_EXP 1
6284: PPUSH
6285: LD_STRING DC1-JMM-1
6287: PPUSH
6288: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6292: LD_EXP 22
6296: PPUSH
6297: LD_STRING DC1-Pow-1
6299: PPUSH
6300: CALL_OW 94
// DialogueOff ;
6304: CALL_OW 7
// wait ( 3 3$0 ) ;
6308: LD_INT 6300
6310: PPUSH
6311: CALL_OW 67
// PowellSupport2 ;
6315: CALL 2272 0 0
// DialogueOn ;
6319: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6323: LD_EXP 1
6327: PPUSH
6328: LD_STRING DC2-JMM-1
6330: PPUSH
6331: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6335: LD_EXP 22
6339: PPUSH
6340: LD_STRING DC2-Pow-1
6342: PPUSH
6343: CALL_OW 94
// DialogueOff ;
6347: CALL_OW 7
// wait ( 6 6$0 ) ;
6351: LD_INT 12600
6353: PPUSH
6354: CALL_OW 67
// PowellSupport3 ;
6358: CALL 2873 0 0
// DialogueOn ;
6362: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6366: LD_EXP 22
6370: PPUSH
6371: LD_STRING DC3-Pow-1
6373: PPUSH
6374: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6378: LD_EXP 1
6382: PPUSH
6383: LD_STRING DC3-JMM-1
6385: PPUSH
6386: CALL_OW 88
// DialogueOff ;
6390: CALL_OW 7
// end ;
6394: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6395: LD_EXP 28
6399: PUSH
6400: LD_INT 2
6402: EQUAL
6403: PUSH
6404: LD_INT 22
6406: PUSH
6407: LD_INT 1
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: LD_INT 2
6416: PUSH
6417: LD_INT 30
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 30
6429: PUSH
6430: LD_INT 1
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 69
6450: PUSH
6451: LD_INT 0
6453: GREATER
6454: AND
6455: IFFALSE 9845
6457: GO 6459
6459: DISABLE
6460: LD_INT 0
6462: PPUSH
6463: PPUSH
6464: PPUSH
6465: PPUSH
6466: PPUSH
6467: PPUSH
6468: PPUSH
6469: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6470: LD_ADDR_VAR 0 4
6474: PUSH
6475: LD_INT 22
6477: PUSH
6478: LD_INT 1
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 21
6487: PUSH
6488: LD_INT 3
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 30
6500: PUSH
6501: LD_INT 0
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 30
6510: PUSH
6511: LD_INT 1
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: ST_TO_ADDR
// for i in tmp do
6533: LD_ADDR_VAR 0 1
6537: PUSH
6538: LD_VAR 0 4
6542: PUSH
6543: FOR_IN
6544: IFFALSE 6577
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6546: LD_ADDR_VAR 0 6
6550: PUSH
6551: LD_VAR 0 6
6555: PUSH
6556: LD_VAR 0 1
6560: PPUSH
6561: CALL_OW 274
6565: PPUSH
6566: LD_INT 1
6568: PPUSH
6569: CALL_OW 275
6573: PLUS
6574: ST_TO_ADDR
6575: GO 6543
6577: POP
6578: POP
// for i in tmp do
6579: LD_ADDR_VAR 0 1
6583: PUSH
6584: LD_VAR 0 4
6588: PUSH
6589: FOR_IN
6590: IFFALSE 6623
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6592: LD_ADDR_VAR 0 7
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: LD_VAR 0 1
6606: PPUSH
6607: CALL_OW 274
6611: PPUSH
6612: LD_INT 2
6614: PPUSH
6615: CALL_OW 275
6619: PLUS
6620: ST_TO_ADDR
6621: GO 6589
6623: POP
6624: POP
// for i in tmp do
6625: LD_ADDR_VAR 0 1
6629: PUSH
6630: LD_VAR 0 4
6634: PUSH
6635: FOR_IN
6636: IFFALSE 6669
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6638: LD_ADDR_VAR 0 8
6642: PUSH
6643: LD_VAR 0 8
6647: PUSH
6648: LD_VAR 0 1
6652: PPUSH
6653: CALL_OW 274
6657: PPUSH
6658: LD_INT 3
6660: PPUSH
6661: CALL_OW 275
6665: PLUS
6666: ST_TO_ADDR
6667: GO 6635
6669: POP
6670: POP
// PrepareKurt ;
6671: CALL 4297 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6675: LD_EXP 26
6679: PPUSH
6680: LD_INT 144
6682: PPUSH
6683: LD_INT 111
6685: PPUSH
6686: CALL_OW 111
// wait ( 0 0$2 ) ;
6690: LD_INT 70
6692: PPUSH
6693: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6697: LD_INT 8
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: CALL_OW 343
// if kurtStatus > 0 then
6707: LD_EXP 27
6711: PUSH
6712: LD_INT 0
6714: GREATER
6715: IFFALSE 8277
// begin ComExitVehicle ( Kurt ) ;
6717: LD_EXP 24
6721: PPUSH
6722: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6726: LD_EXP 24
6730: PPUSH
6731: CALL_OW 87
// wait ( 0 0$1 ) ;
6735: LD_INT 35
6737: PPUSH
6738: CALL_OW 67
// DialogueOn ;
6742: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
6746: LD_INT 22
6748: PUSH
6749: LD_INT 1
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 26
6758: PUSH
6759: LD_INT 1
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 2
6768: PUSH
6769: LD_INT 25
6771: PUSH
6772: LD_INT 1
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 25
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 25
6791: PUSH
6792: LD_INT 3
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 25
6801: PUSH
6802: LD_INT 4
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: PUSH
6821: LD_EXP 1
6825: PUSH
6826: EMPTY
6827: LIST
6828: DIFF
6829: PPUSH
6830: CALL_OW 69
6834: PPUSH
6835: LD_STRING D3-Sol1-1
6837: PPUSH
6838: LD_STRING 
6840: PPUSH
6841: CALL 12337 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
6845: LD_EXP 24
6849: PPUSH
6850: LD_STRING D3-Kurt-1
6852: PPUSH
6853: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
6857: LD_EXP 1
6861: PPUSH
6862: LD_STRING D3-JMM-1
6864: PPUSH
6865: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
6869: LD_EXP 24
6873: PPUSH
6874: LD_STRING D3-Kurt-2
6876: PPUSH
6877: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6881: LD_EXP 1
6885: PPUSH
6886: LD_STRING D3-JMM-2
6888: PPUSH
6889: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
6893: LD_EXP 24
6897: PPUSH
6898: LD_STRING D3-Kurt-4
6900: PPUSH
6901: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
6905: LD_EXP 1
6909: PPUSH
6910: LD_STRING D3-JMM-4
6912: PPUSH
6913: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
6917: LD_EXP 24
6921: PPUSH
6922: LD_STRING D3-Kurt-5
6924: PPUSH
6925: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
6929: LD_EXP 24
6933: PPUSH
6934: LD_STRING D3-Kurt-5a
6936: PPUSH
6937: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
6941: LD_EXP 24
6945: PPUSH
6946: LD_STRING D3-Kurt-5b
6948: PPUSH
6949: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
6953: LD_VAR 0 6
6957: PUSH
6958: LD_INT 60
6960: GREATEREQUAL
6961: PUSH
6962: LD_VAR 0 8
6966: PUSH
6967: LD_INT 60
6969: GREATEREQUAL
6970: AND
6971: IFFALSE 7006
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_STRING Q2K
6980: PPUSH
6981: LD_INT 1
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 4
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 98
7003: ST_TO_ADDR
7004: GO 7029
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7006: LD_ADDR_VAR 0 2
7010: PUSH
7011: LD_STRING Q2K
7013: PPUSH
7014: LD_INT 3
7016: PUSH
7017: LD_INT 4
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 98
7028: ST_TO_ADDR
// if dec1 = 1 then
7029: LD_VAR 0 2
7033: PUSH
7034: LD_INT 1
7036: EQUAL
7037: IFFALSE 7071
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7039: LD_EXP 1
7043: PPUSH
7044: LD_STRING D3Ka-JMM-1
7046: PPUSH
7047: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7051: LD_EXP 24
7055: PPUSH
7056: LD_STRING D3Ka-Kurt-1
7058: PPUSH
7059: CALL_OW 88
// warWithLegion = 1 ;
7063: LD_ADDR_EXP 30
7067: PUSH
7068: LD_INT 1
7070: ST_TO_ADDR
// end ; if dec1 = 2 then
7071: LD_VAR 0 2
7075: PUSH
7076: LD_INT 2
7078: EQUAL
7079: IFFALSE 7305
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7081: LD_EXP 1
7085: PPUSH
7086: LD_STRING D3Kb-JMM-1
7088: PPUSH
7089: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7093: LD_EXP 24
7097: PPUSH
7098: LD_STRING D3Kb-Kurt-1
7100: PPUSH
7101: CALL_OW 88
// for i in tmp do
7105: LD_ADDR_VAR 0 1
7109: PUSH
7110: LD_VAR 0 4
7114: PUSH
7115: FOR_IN
7116: IFFALSE 7203
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7118: LD_ADDR_VAR 0 5
7122: PUSH
7123: LD_VAR 0 1
7127: PPUSH
7128: CALL_OW 274
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 275
7140: ST_TO_ADDR
// if tmp2 >= 60 then
7141: LD_VAR 0 5
7145: PUSH
7146: LD_INT 60
7148: GREATEREQUAL
7149: IFFALSE 7181
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 274
7160: PPUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_VAR 0 5
7168: PUSH
7169: LD_INT 60
7171: MINUS
7172: PPUSH
7173: CALL_OW 277
// break ;
7177: GO 7203
// end else
7179: GO 7201
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7181: LD_VAR 0 1
7185: PPUSH
7186: CALL_OW 274
7190: PPUSH
7191: LD_INT 1
7193: PPUSH
7194: LD_INT 0
7196: PPUSH
7197: CALL_OW 277
// end ; end ;
7201: GO 7115
7203: POP
7204: POP
// for i in tmp do
7205: LD_ADDR_VAR 0 1
7209: PUSH
7210: LD_VAR 0 4
7214: PUSH
7215: FOR_IN
7216: IFFALSE 7303
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7218: LD_ADDR_VAR 0 5
7222: PUSH
7223: LD_VAR 0 1
7227: PPUSH
7228: CALL_OW 274
7232: PPUSH
7233: LD_INT 3
7235: PPUSH
7236: CALL_OW 275
7240: ST_TO_ADDR
// if tmp2 >= 60 then
7241: LD_VAR 0 5
7245: PUSH
7246: LD_INT 60
7248: GREATEREQUAL
7249: IFFALSE 7281
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: CALL_OW 274
7260: PPUSH
7261: LD_INT 3
7263: PPUSH
7264: LD_VAR 0 5
7268: PUSH
7269: LD_INT 60
7271: MINUS
7272: PPUSH
7273: CALL_OW 277
// break ;
7277: GO 7303
// end else
7279: GO 7301
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7281: LD_VAR 0 1
7285: PPUSH
7286: CALL_OW 274
7290: PPUSH
7291: LD_INT 3
7293: PPUSH
7294: LD_INT 0
7296: PPUSH
7297: CALL_OW 277
// end ; end ;
7301: GO 7215
7303: POP
7304: POP
// end ; if dec1 = 3 then
7305: LD_VAR 0 2
7309: PUSH
7310: LD_INT 3
7312: EQUAL
7313: IFFALSE 7548
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7315: LD_EXP 1
7319: PPUSH
7320: LD_STRING D3Kc1-JMM-1
7322: PPUSH
7323: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7327: LD_EXP 24
7331: PPUSH
7332: LD_STRING D3Kc1-Kurt-1
7334: PPUSH
7335: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7339: LD_EXP 1
7343: PPUSH
7344: LD_STRING D3Kc1-JMM-2
7346: PPUSH
7347: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7351: LD_EXP 24
7355: PPUSH
7356: LD_STRING D3Kc1-Kurt-2
7358: PPUSH
7359: CALL_OW 88
// askSiberite = 1 ;
7363: LD_ADDR_EXP 32
7367: PUSH
7368: LD_INT 1
7370: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7371: LD_ADDR_VAR 0 2
7375: PUSH
7376: LD_STRING Q2b
7378: PPUSH
7379: LD_INT 1
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 98
7397: ST_TO_ADDR
// if dec2 = 1 then
7398: LD_VAR 0 3
7402: PUSH
7403: LD_INT 1
7405: EQUAL
7406: IFFALSE 7440
// begin Say ( JMM , D4a-JMM-1 ) ;
7408: LD_EXP 1
7412: PPUSH
7413: LD_STRING D4a-JMM-1
7415: PPUSH
7416: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7420: LD_EXP 24
7424: PPUSH
7425: LD_STRING D4b-Kurt-1
7427: PPUSH
7428: CALL_OW 88
// warWithLegion = 1 ;
7432: LD_ADDR_EXP 30
7436: PUSH
7437: LD_INT 1
7439: ST_TO_ADDR
// end ; if dec2 = 2 then
7440: LD_VAR 0 3
7444: PUSH
7445: LD_INT 2
7447: EQUAL
7448: IFFALSE 7482
// begin Say ( JMM , D4b-JMM-1 ) ;
7450: LD_EXP 1
7454: PPUSH
7455: LD_STRING D4b-JMM-1
7457: PPUSH
7458: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7462: LD_EXP 24
7466: PPUSH
7467: LD_STRING D4b-Kurt-1
7469: PPUSH
7470: CALL_OW 88
// warWithLegion = 1 ;
7474: LD_ADDR_EXP 30
7478: PUSH
7479: LD_INT 1
7481: ST_TO_ADDR
// end ; if dec2 = 3 then
7482: LD_VAR 0 3
7486: PUSH
7487: LD_INT 3
7489: EQUAL
7490: IFFALSE 7548
// begin Say ( JMM , D4c-JMM-1 ) ;
7492: LD_EXP 1
7496: PPUSH
7497: LD_STRING D4c-JMM-1
7499: PPUSH
7500: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7504: LD_EXP 24
7508: PPUSH
7509: LD_STRING D4c-Kurt-1
7511: PPUSH
7512: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7516: LD_EXP 1
7520: PPUSH
7521: LD_STRING D4c-JMM-2
7523: PPUSH
7524: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7528: LD_EXP 24
7532: PPUSH
7533: LD_STRING D4c-Kurt-2
7535: PPUSH
7536: CALL_OW 88
// fakeInfo = 1 ;
7540: LD_ADDR_EXP 31
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7548: LD_VAR 0 2
7552: PUSH
7553: LD_INT 4
7555: EQUAL
7556: IFFALSE 8213
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7558: LD_EXP 1
7562: PPUSH
7563: LD_STRING D3Kd-JMM-1
7565: PPUSH
7566: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7570: LD_VAR 0 6
7574: PUSH
7575: LD_INT 120
7577: GREATEREQUAL
7578: PUSH
7579: LD_VAR 0 8
7583: PUSH
7584: LD_INT 120
7586: GREATEREQUAL
7587: AND
7588: IFFALSE 7623
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7590: LD_ADDR_VAR 0 3
7594: PUSH
7595: LD_STRING Q2aK
7597: PPUSH
7598: LD_INT 1
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: LD_INT 4
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PPUSH
7616: CALL_OW 98
7620: ST_TO_ADDR
7621: GO 7646
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_STRING Q2K
7630: PPUSH
7631: LD_INT 1
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PPUSH
7641: CALL_OW 98
7645: ST_TO_ADDR
// if dec2 = 1 then
7646: LD_VAR 0 3
7650: PUSH
7651: LD_INT 1
7653: EQUAL
7654: IFFALSE 7688
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7656: LD_EXP 1
7660: PPUSH
7661: LD_STRING D5Ka-JMM-1
7663: PPUSH
7664: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7668: LD_EXP 24
7672: PPUSH
7673: LD_STRING D5Ka-Kurt-1
7675: PPUSH
7676: CALL_OW 88
// warWithLegion = 1 ;
7680: LD_ADDR_EXP 30
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// end ; if dec2 = 2 then
7688: LD_VAR 0 3
7692: PUSH
7693: LD_INT 2
7695: EQUAL
7696: IFFALSE 7722
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7698: LD_EXP 1
7702: PPUSH
7703: LD_STRING D3Kb-JMM-1
7705: PPUSH
7706: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7710: LD_EXP 24
7714: PPUSH
7715: LD_STRING D3Kb-Kurt-1
7717: PPUSH
7718: CALL_OW 88
// end ; if dec2 = 3 then
7722: LD_VAR 0 3
7726: PUSH
7727: LD_INT 3
7729: EQUAL
7730: IFFALSE 7960
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7732: LD_EXP 1
7736: PPUSH
7737: LD_STRING D3Ke-JMM-1
7739: PPUSH
7740: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7744: LD_EXP 24
7748: PPUSH
7749: LD_STRING D3Ke-Kurt-1
7751: PPUSH
7752: CALL_OW 88
// PrepareLegionForPlayer ;
7756: CALL 4481 0 0
// for i in tmp do
7760: LD_ADDR_VAR 0 1
7764: PUSH
7765: LD_VAR 0 4
7769: PUSH
7770: FOR_IN
7771: IFFALSE 7858
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7773: LD_ADDR_VAR 0 5
7777: PUSH
7778: LD_VAR 0 1
7782: PPUSH
7783: CALL_OW 274
7787: PPUSH
7788: LD_INT 1
7790: PPUSH
7791: CALL_OW 275
7795: ST_TO_ADDR
// if tmp2 >= 120 then
7796: LD_VAR 0 5
7800: PUSH
7801: LD_INT 120
7803: GREATEREQUAL
7804: IFFALSE 7836
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 274
7815: PPUSH
7816: LD_INT 1
7818: PPUSH
7819: LD_VAR 0 5
7823: PUSH
7824: LD_INT 120
7826: MINUS
7827: PPUSH
7828: CALL_OW 277
// break ;
7832: GO 7858
// end else
7834: GO 7856
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7836: LD_VAR 0 1
7840: PPUSH
7841: CALL_OW 274
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: LD_INT 0
7851: PPUSH
7852: CALL_OW 277
// end ; end ;
7856: GO 7770
7858: POP
7859: POP
// for i in tmp do
7860: LD_ADDR_VAR 0 1
7864: PUSH
7865: LD_VAR 0 4
7869: PUSH
7870: FOR_IN
7871: IFFALSE 7958
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7873: LD_ADDR_VAR 0 5
7877: PUSH
7878: LD_VAR 0 1
7882: PPUSH
7883: CALL_OW 274
7887: PPUSH
7888: LD_INT 3
7890: PPUSH
7891: CALL_OW 275
7895: ST_TO_ADDR
// if tmp2 >= 120 then
7896: LD_VAR 0 5
7900: PUSH
7901: LD_INT 120
7903: GREATEREQUAL
7904: IFFALSE 7936
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 274
7915: PPUSH
7916: LD_INT 3
7918: PPUSH
7919: LD_VAR 0 5
7923: PUSH
7924: LD_INT 120
7926: MINUS
7927: PPUSH
7928: CALL_OW 277
// break ;
7932: GO 7958
// end else
7934: GO 7956
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 274
7945: PPUSH
7946: LD_INT 3
7948: PPUSH
7949: LD_INT 0
7951: PPUSH
7952: CALL_OW 277
// end ; end ;
7956: GO 7870
7958: POP
7959: POP
// end ; if dec2 = 4 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 4
7967: EQUAL
7968: IFFALSE 8213
// begin if dec1 = 3 then
7970: LD_VAR 0 2
7974: PUSH
7975: LD_INT 3
7977: EQUAL
7978: IFFALSE 8213
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7980: LD_EXP 1
7984: PPUSH
7985: LD_STRING D3Kc1-JMM-1
7987: PPUSH
7988: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7992: LD_EXP 24
7996: PPUSH
7997: LD_STRING D3Kc1-Kurt-1
7999: PPUSH
8000: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8004: LD_EXP 1
8008: PPUSH
8009: LD_STRING D3Kc1-JMM-2
8011: PPUSH
8012: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8016: LD_EXP 24
8020: PPUSH
8021: LD_STRING D3Kc1-Kurt-2
8023: PPUSH
8024: CALL_OW 88
// askSiberite = 1 ;
8028: LD_ADDR_EXP 32
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8036: LD_ADDR_VAR 0 2
8040: PUSH
8041: LD_STRING Q2b
8043: PPUSH
8044: LD_INT 1
8046: PUSH
8047: LD_INT 2
8049: PUSH
8050: LD_INT 3
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: PPUSH
8058: CALL_OW 98
8062: ST_TO_ADDR
// if dec2 = 1 then
8063: LD_VAR 0 3
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: IFFALSE 8105
// begin Say ( JMM , D4a-JMM-1 ) ;
8073: LD_EXP 1
8077: PPUSH
8078: LD_STRING D4a-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8085: LD_EXP 24
8089: PPUSH
8090: LD_STRING D4b-Kurt-1
8092: PPUSH
8093: CALL_OW 88
// warWithLegion = 1 ;
8097: LD_ADDR_EXP 30
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// end ; if dec2 = 2 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 2
8112: EQUAL
8113: IFFALSE 8147
// begin Say ( JMM , D4b-JMM-1 ) ;
8115: LD_EXP 1
8119: PPUSH
8120: LD_STRING D4b-JMM-1
8122: PPUSH
8123: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8127: LD_EXP 24
8131: PPUSH
8132: LD_STRING D4b-Kurt-1
8134: PPUSH
8135: CALL_OW 88
// warWithLegion = 1 ;
8139: LD_ADDR_EXP 30
8143: PUSH
8144: LD_INT 1
8146: ST_TO_ADDR
// end ; if dec2 = 3 then
8147: LD_VAR 0 3
8151: PUSH
8152: LD_INT 3
8154: EQUAL
8155: IFFALSE 8213
// begin Say ( JMM , D4c-JMM-1 ) ;
8157: LD_EXP 1
8161: PPUSH
8162: LD_STRING D4c-JMM-1
8164: PPUSH
8165: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8169: LD_EXP 24
8173: PPUSH
8174: LD_STRING D4c-Kurt-1
8176: PPUSH
8177: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8181: LD_EXP 1
8185: PPUSH
8186: LD_STRING D4c-JMM-2
8188: PPUSH
8189: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8193: LD_EXP 24
8197: PPUSH
8198: LD_STRING D4c-Kurt-2
8200: PPUSH
8201: CALL_OW 88
// fakeInfo = 1 ;
8205: LD_ADDR_EXP 31
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8213: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8217: LD_EXP 24
8221: PPUSH
8222: LD_EXP 26
8226: PPUSH
8227: CALL_OW 120
// wait ( 0 0$1 ) ;
8231: LD_INT 35
8233: PPUSH
8234: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8238: LD_EXP 26
8242: PPUSH
8243: LD_INT 4
8245: PPUSH
8246: CALL_OW 113
// wait ( 0 0$3 ) ;
8250: LD_INT 105
8252: PPUSH
8253: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8257: LD_EXP 24
8261: PPUSH
8262: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8266: LD_EXP 26
8270: PPUSH
8271: CALL_OW 64
// end else
8275: GO 9845
// begin ComExitVehicle ( otherKurt ) ;
8277: LD_EXP 25
8281: PPUSH
8282: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8286: LD_EXP 25
8290: PPUSH
8291: CALL_OW 87
// wait ( 0 0$1 ) ;
8295: LD_INT 35
8297: PPUSH
8298: CALL_OW 67
// DialogueOn ;
8302: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D3-Sol1-1 ,  ) ;
8306: LD_INT 22
8308: PUSH
8309: LD_INT 1
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 26
8318: PUSH
8319: LD_INT 1
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 1
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 25
8341: PUSH
8342: LD_INT 2
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 25
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 25
8361: PUSH
8362: LD_INT 4
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: LIST
8380: PUSH
8381: LD_EXP 1
8385: PUSH
8386: EMPTY
8387: LIST
8388: DIFF
8389: PPUSH
8390: CALL_OW 69
8394: PPUSH
8395: LD_STRING D3-Sol1-1
8397: PPUSH
8398: LD_STRING 
8400: PPUSH
8401: CALL 12337 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8405: LD_EXP 25
8409: PPUSH
8410: LD_STRING D3-Kurt-1
8412: PPUSH
8413: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8417: LD_EXP 1
8421: PPUSH
8422: LD_STRING D3-JMM-1
8424: PPUSH
8425: CALL_OW 88
// Say ( otherKurt , D3-Kurt-2 ) ;
8429: LD_EXP 25
8433: PPUSH
8434: LD_STRING D3-Kurt-2
8436: PPUSH
8437: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
8441: LD_EXP 1
8445: PPUSH
8446: LD_STRING D3-JMM-2
8448: PPUSH
8449: CALL_OW 88
// Say ( otherKurt , D3-Kurt-4 ) ;
8453: LD_EXP 25
8457: PPUSH
8458: LD_STRING D3-Kurt-4
8460: PPUSH
8461: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
8465: LD_EXP 1
8469: PPUSH
8470: LD_STRING D3-JMM-4
8472: PPUSH
8473: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8477: LD_EXP 25
8481: PPUSH
8482: LD_STRING D3-Kurt-5
8484: PPUSH
8485: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5a ) ;
8489: LD_EXP 25
8493: PPUSH
8494: LD_STRING D3-Kurt-5a
8496: PPUSH
8497: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8501: LD_EXP 25
8505: PPUSH
8506: LD_STRING D3-Kurt-5b
8508: PPUSH
8509: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8513: LD_VAR 0 6
8517: PUSH
8518: LD_INT 100
8520: GREATEREQUAL
8521: PUSH
8522: LD_VAR 0 8
8526: PUSH
8527: LD_INT 100
8529: GREATEREQUAL
8530: AND
8531: IFFALSE 8566
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8533: LD_ADDR_VAR 0 2
8537: PUSH
8538: LD_STRING Q2
8540: PPUSH
8541: LD_INT 1
8543: PUSH
8544: LD_INT 2
8546: PUSH
8547: LD_INT 3
8549: PUSH
8550: LD_INT 4
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 98
8563: ST_TO_ADDR
8564: GO 8589
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8566: LD_ADDR_VAR 0 2
8570: PUSH
8571: LD_STRING Q2
8573: PPUSH
8574: LD_INT 3
8576: PUSH
8577: LD_INT 4
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PPUSH
8584: CALL_OW 98
8588: ST_TO_ADDR
// if dec1 = 1 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_INT 1
8596: EQUAL
8597: IFFALSE 8631
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8599: LD_EXP 1
8603: PPUSH
8604: LD_STRING D3Ka-JMM-1
8606: PPUSH
8607: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8611: LD_EXP 25
8615: PPUSH
8616: LD_STRING D3Ka-Kurt-1
8618: PPUSH
8619: CALL_OW 88
// warWithLegion = 1 ;
8623: LD_ADDR_EXP 30
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// end ; if dec1 = 2 then
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 2
8638: EQUAL
8639: IFFALSE 8865
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8641: LD_EXP 1
8645: PPUSH
8646: LD_STRING D3Kb-JMM-1
8648: PPUSH
8649: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8653: LD_EXP 25
8657: PPUSH
8658: LD_STRING D3Kb-Kurt-1
8660: PPUSH
8661: CALL_OW 88
// for i in tmp do
8665: LD_ADDR_VAR 0 1
8669: PUSH
8670: LD_VAR 0 4
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8763
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8678: LD_ADDR_VAR 0 5
8682: PUSH
8683: LD_VAR 0 1
8687: PPUSH
8688: CALL_OW 274
8692: PPUSH
8693: LD_INT 1
8695: PPUSH
8696: CALL_OW 275
8700: ST_TO_ADDR
// if tmp2 >= 100 then
8701: LD_VAR 0 5
8705: PUSH
8706: LD_INT 100
8708: GREATEREQUAL
8709: IFFALSE 8741
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: CALL_OW 274
8720: PPUSH
8721: LD_INT 1
8723: PPUSH
8724: LD_VAR 0 5
8728: PUSH
8729: LD_INT 100
8731: MINUS
8732: PPUSH
8733: CALL_OW 277
// break ;
8737: GO 8763
// end else
8739: GO 8761
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8741: LD_VAR 0 1
8745: PPUSH
8746: CALL_OW 274
8750: PPUSH
8751: LD_INT 1
8753: PPUSH
8754: LD_INT 0
8756: PPUSH
8757: CALL_OW 277
// end ; end ;
8761: GO 8675
8763: POP
8764: POP
// for i in tmp do
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: LD_VAR 0 4
8774: PUSH
8775: FOR_IN
8776: IFFALSE 8863
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8778: LD_ADDR_VAR 0 5
8782: PUSH
8783: LD_VAR 0 1
8787: PPUSH
8788: CALL_OW 274
8792: PPUSH
8793: LD_INT 3
8795: PPUSH
8796: CALL_OW 275
8800: ST_TO_ADDR
// if tmp2 >= 100 then
8801: LD_VAR 0 5
8805: PUSH
8806: LD_INT 100
8808: GREATEREQUAL
8809: IFFALSE 8841
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
8811: LD_VAR 0 1
8815: PPUSH
8816: CALL_OW 274
8820: PPUSH
8821: LD_INT 3
8823: PPUSH
8824: LD_VAR 0 5
8828: PUSH
8829: LD_INT 100
8831: MINUS
8832: PPUSH
8833: CALL_OW 277
// break ;
8837: GO 8863
// end else
8839: GO 8861
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8841: LD_VAR 0 1
8845: PPUSH
8846: CALL_OW 274
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: LD_INT 0
8856: PPUSH
8857: CALL_OW 277
// end ; end ;
8861: GO 8775
8863: POP
8864: POP
// end ; if dec1 = 3 then
8865: LD_VAR 0 2
8869: PUSH
8870: LD_INT 3
8872: EQUAL
8873: IFFALSE 9108
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8875: LD_EXP 1
8879: PPUSH
8880: LD_STRING D3Kc1-JMM-1
8882: PPUSH
8883: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
8887: LD_EXP 25
8891: PPUSH
8892: LD_STRING D3Kc1-Kurt-1
8894: PPUSH
8895: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8899: LD_EXP 1
8903: PPUSH
8904: LD_STRING D3Kc1-JMM-2
8906: PPUSH
8907: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
8911: LD_EXP 25
8915: PPUSH
8916: LD_STRING D3Kc1-Kurt-2
8918: PPUSH
8919: CALL_OW 88
// askSiberite = 1 ;
8923: LD_ADDR_EXP 32
8927: PUSH
8928: LD_INT 1
8930: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: LD_STRING Q2b
8938: PPUSH
8939: LD_INT 1
8941: PUSH
8942: LD_INT 2
8944: PUSH
8945: LD_INT 3
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: PPUSH
8953: CALL_OW 98
8957: ST_TO_ADDR
// if dec2 = 1 then
8958: LD_VAR 0 3
8962: PUSH
8963: LD_INT 1
8965: EQUAL
8966: IFFALSE 9000
// begin Say ( JMM , D4a-JMM-1 ) ;
8968: LD_EXP 1
8972: PPUSH
8973: LD_STRING D4a-JMM-1
8975: PPUSH
8976: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
8980: LD_EXP 25
8984: PPUSH
8985: LD_STRING D4b-Kurt-1
8987: PPUSH
8988: CALL_OW 88
// warWithLegion = 1 ;
8992: LD_ADDR_EXP 30
8996: PUSH
8997: LD_INT 1
8999: ST_TO_ADDR
// end ; if dec2 = 2 then
9000: LD_VAR 0 3
9004: PUSH
9005: LD_INT 2
9007: EQUAL
9008: IFFALSE 9042
// begin Say ( JMM , D4b-JMM-1 ) ;
9010: LD_EXP 1
9014: PPUSH
9015: LD_STRING D4b-JMM-1
9017: PPUSH
9018: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9022: LD_EXP 25
9026: PPUSH
9027: LD_STRING D4b-Kurt-1
9029: PPUSH
9030: CALL_OW 88
// warWithLegion = 1 ;
9034: LD_ADDR_EXP 30
9038: PUSH
9039: LD_INT 1
9041: ST_TO_ADDR
// end ; if dec2 = 3 then
9042: LD_VAR 0 3
9046: PUSH
9047: LD_INT 3
9049: EQUAL
9050: IFFALSE 9108
// begin Say ( JMM , D4c-JMM-1 ) ;
9052: LD_EXP 1
9056: PPUSH
9057: LD_STRING D4c-JMM-1
9059: PPUSH
9060: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9064: LD_EXP 25
9068: PPUSH
9069: LD_STRING D4c-Kurt-1
9071: PPUSH
9072: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9076: LD_EXP 1
9080: PPUSH
9081: LD_STRING D4c-JMM-2
9083: PPUSH
9084: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9088: LD_EXP 25
9092: PPUSH
9093: LD_STRING D4c-Kurt-2
9095: PPUSH
9096: CALL_OW 88
// fakeInfo = 1 ;
9100: LD_ADDR_EXP 31
9104: PUSH
9105: LD_INT 1
9107: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9108: LD_VAR 0 2
9112: PUSH
9113: LD_INT 4
9115: EQUAL
9116: IFFALSE 9773
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9118: LD_EXP 1
9122: PPUSH
9123: LD_STRING D3Kd-JMM-1
9125: PPUSH
9126: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9130: LD_VAR 0 6
9134: PUSH
9135: LD_INT 200
9137: GREATEREQUAL
9138: PUSH
9139: LD_VAR 0 8
9143: PUSH
9144: LD_INT 200
9146: GREATEREQUAL
9147: AND
9148: IFFALSE 9183
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9150: LD_ADDR_VAR 0 3
9154: PUSH
9155: LD_STRING Q2a
9157: PPUSH
9158: LD_INT 1
9160: PUSH
9161: LD_INT 2
9163: PUSH
9164: LD_INT 3
9166: PUSH
9167: LD_INT 4
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 98
9180: ST_TO_ADDR
9181: GO 9206
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9183: LD_ADDR_VAR 0 3
9187: PUSH
9188: LD_STRING Q2a
9190: PPUSH
9191: LD_INT 1
9193: PUSH
9194: LD_INT 4
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PPUSH
9201: CALL_OW 98
9205: ST_TO_ADDR
// if dec2 = 1 then
9206: LD_VAR 0 3
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9248
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9216: LD_EXP 1
9220: PPUSH
9221: LD_STRING D5Ka-JMM-1
9223: PPUSH
9224: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9228: LD_EXP 25
9232: PPUSH
9233: LD_STRING D5Ka-Kurt-1
9235: PPUSH
9236: CALL_OW 88
// warWithLegion = 1 ;
9240: LD_ADDR_EXP 30
9244: PUSH
9245: LD_INT 1
9247: ST_TO_ADDR
// end ; if dec2 = 2 then
9248: LD_VAR 0 3
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: IFFALSE 9282
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9258: LD_EXP 1
9262: PPUSH
9263: LD_STRING D3Kb-JMM-1
9265: PPUSH
9266: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9270: LD_EXP 25
9274: PPUSH
9275: LD_STRING D3Kb-Kurt-1
9277: PPUSH
9278: CALL_OW 88
// end ; if dec2 = 3 then
9282: LD_VAR 0 3
9286: PUSH
9287: LD_INT 3
9289: EQUAL
9290: IFFALSE 9520
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9292: LD_EXP 1
9296: PPUSH
9297: LD_STRING D3Ke-JMM-1
9299: PPUSH
9300: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9304: LD_EXP 25
9308: PPUSH
9309: LD_STRING D3Ke-Kurt-1
9311: PPUSH
9312: CALL_OW 88
// PrepareLegionForPlayer ;
9316: CALL 4481 0 0
// for i in tmp do
9320: LD_ADDR_VAR 0 1
9324: PUSH
9325: LD_VAR 0 4
9329: PUSH
9330: FOR_IN
9331: IFFALSE 9418
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9333: LD_ADDR_VAR 0 5
9337: PUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 274
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: CALL_OW 275
9355: ST_TO_ADDR
// if tmp2 >= 200 then
9356: LD_VAR 0 5
9360: PUSH
9361: LD_INT 200
9363: GREATEREQUAL
9364: IFFALSE 9396
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 274
9375: PPUSH
9376: LD_INT 1
9378: PPUSH
9379: LD_VAR 0 5
9383: PUSH
9384: LD_INT 200
9386: MINUS
9387: PPUSH
9388: CALL_OW 277
// break ;
9392: GO 9418
// end else
9394: GO 9416
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9396: LD_VAR 0 1
9400: PPUSH
9401: CALL_OW 274
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: LD_INT 0
9411: PPUSH
9412: CALL_OW 277
// end ; end ;
9416: GO 9330
9418: POP
9419: POP
// for i in tmp do
9420: LD_ADDR_VAR 0 1
9424: PUSH
9425: LD_VAR 0 4
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9518
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9433: LD_ADDR_VAR 0 5
9437: PUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 274
9447: PPUSH
9448: LD_INT 3
9450: PPUSH
9451: CALL_OW 275
9455: ST_TO_ADDR
// if tmp2 >= 200 then
9456: LD_VAR 0 5
9460: PUSH
9461: LD_INT 200
9463: GREATEREQUAL
9464: IFFALSE 9496
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9466: LD_VAR 0 1
9470: PPUSH
9471: CALL_OW 274
9475: PPUSH
9476: LD_INT 3
9478: PPUSH
9479: LD_VAR 0 5
9483: PUSH
9484: LD_INT 200
9486: MINUS
9487: PPUSH
9488: CALL_OW 277
// break ;
9492: GO 9518
// end else
9494: GO 9516
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9496: LD_VAR 0 1
9500: PPUSH
9501: CALL_OW 274
9505: PPUSH
9506: LD_INT 3
9508: PPUSH
9509: LD_INT 0
9511: PPUSH
9512: CALL_OW 277
// end ; end ;
9516: GO 9430
9518: POP
9519: POP
// end ; if dec2 = 4 then
9520: LD_VAR 0 3
9524: PUSH
9525: LD_INT 4
9527: EQUAL
9528: IFFALSE 9773
// begin if dec1 = 3 then
9530: LD_VAR 0 2
9534: PUSH
9535: LD_INT 3
9537: EQUAL
9538: IFFALSE 9773
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9540: LD_EXP 1
9544: PPUSH
9545: LD_STRING D3Kc1-JMM-1
9547: PPUSH
9548: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9552: LD_EXP 25
9556: PPUSH
9557: LD_STRING D3Kc1-Kurt-1
9559: PPUSH
9560: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9564: LD_EXP 1
9568: PPUSH
9569: LD_STRING D3Kc1-JMM-2
9571: PPUSH
9572: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9576: LD_EXP 25
9580: PPUSH
9581: LD_STRING D3Kc1-Kurt-2
9583: PPUSH
9584: CALL_OW 88
// askSiberite = 1 ;
9588: LD_ADDR_EXP 32
9592: PUSH
9593: LD_INT 1
9595: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9596: LD_ADDR_VAR 0 2
9600: PUSH
9601: LD_STRING Q2b
9603: PPUSH
9604: LD_INT 1
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: PPUSH
9618: CALL_OW 98
9622: ST_TO_ADDR
// if dec2 = 1 then
9623: LD_VAR 0 3
9627: PUSH
9628: LD_INT 1
9630: EQUAL
9631: IFFALSE 9665
// begin Say ( JMM , D4a-JMM-1 ) ;
9633: LD_EXP 1
9637: PPUSH
9638: LD_STRING D4a-JMM-1
9640: PPUSH
9641: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9645: LD_EXP 25
9649: PPUSH
9650: LD_STRING D4b-Kurt-1
9652: PPUSH
9653: CALL_OW 88
// warWithLegion = 1 ;
9657: LD_ADDR_EXP 30
9661: PUSH
9662: LD_INT 1
9664: ST_TO_ADDR
// end ; if dec2 = 2 then
9665: LD_VAR 0 3
9669: PUSH
9670: LD_INT 2
9672: EQUAL
9673: IFFALSE 9707
// begin Say ( JMM , D4b-JMM-1 ) ;
9675: LD_EXP 1
9679: PPUSH
9680: LD_STRING D4b-JMM-1
9682: PPUSH
9683: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9687: LD_EXP 25
9691: PPUSH
9692: LD_STRING D4b-Kurt-1
9694: PPUSH
9695: CALL_OW 88
// warWithLegion = 1 ;
9699: LD_ADDR_EXP 30
9703: PUSH
9704: LD_INT 1
9706: ST_TO_ADDR
// end ; if dec2 = 3 then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_INT 3
9714: EQUAL
9715: IFFALSE 9773
// begin Say ( JMM , D4c-JMM-1 ) ;
9717: LD_EXP 1
9721: PPUSH
9722: LD_STRING D4c-JMM-1
9724: PPUSH
9725: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9729: LD_EXP 25
9733: PPUSH
9734: LD_STRING D4c-Kurt-1
9736: PPUSH
9737: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9741: LD_EXP 1
9745: PPUSH
9746: LD_STRING D4c-JMM-2
9748: PPUSH
9749: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9753: LD_EXP 25
9757: PPUSH
9758: LD_STRING D4c-Kurt-2
9760: PPUSH
9761: CALL_OW 88
// fakeInfo = 1 ;
9765: LD_ADDR_EXP 31
9769: PUSH
9770: LD_INT 1
9772: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9773: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9777: LD_INT 8
9779: PPUSH
9780: LD_INT 8
9782: PPUSH
9783: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9787: LD_EXP 25
9791: PPUSH
9792: LD_EXP 26
9796: PPUSH
9797: CALL_OW 120
// wait ( 0 0$1 ) ;
9801: LD_INT 35
9803: PPUSH
9804: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9808: LD_EXP 26
9812: PPUSH
9813: LD_INT 4
9815: PPUSH
9816: CALL_OW 113
// wait ( 0 0$6 ) ;
9820: LD_INT 210
9822: PPUSH
9823: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
9827: LD_EXP 25
9831: PPUSH
9832: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9836: LD_EXP 26
9840: PPUSH
9841: CALL_OW 64
// end ; end ;
9845: PPOPN 8
9847: END
// every 0 0$10 trigger warWithLegion = 1 do
9848: LD_EXP 30
9852: PUSH
9853: LD_INT 1
9855: EQUAL
9856: IFFALSE 9865
9858: GO 9860
9860: DISABLE
// PrepareAttackLegion ;
9861: CALL 5017 0 0
9865: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9866: LD_EXP 15
9870: PPUSH
9871: CALL_OW 305
9875: PUSH
9876: LD_EXP 15
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: CALL_OW 289
9888: NOT
9889: AND
9890: PUSH
9891: LD_EXP 15
9895: PPUSH
9896: LD_INT 2
9898: PPUSH
9899: CALL_OW 289
9903: NOT
9904: AND
9905: PUSH
9906: LD_EXP 15
9910: PPUSH
9911: LD_INT 3
9913: PPUSH
9914: CALL_OW 289
9918: NOT
9919: AND
9920: IFFALSE 9937
9922: GO 9924
9924: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9925: LD_EXP 15
9929: PPUSH
9930: LD_INT 4
9932: PPUSH
9933: CALL_OW 235
9937: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9938: LD_EXP 16
9942: PPUSH
9943: CALL_OW 305
9947: PUSH
9948: LD_EXP 16
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: CALL_OW 289
9960: NOT
9961: AND
9962: PUSH
9963: LD_EXP 16
9967: PPUSH
9968: LD_INT 2
9970: PPUSH
9971: CALL_OW 289
9975: NOT
9976: AND
9977: PUSH
9978: LD_EXP 16
9982: PPUSH
9983: LD_INT 3
9985: PPUSH
9986: CALL_OW 289
9990: NOT
9991: AND
9992: IFFALSE 10009
9994: GO 9996
9996: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9997: LD_EXP 16
10001: PPUSH
10002: LD_INT 4
10004: PPUSH
10005: CALL_OW 235
10009: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10010: LD_EXP 17
10014: PPUSH
10015: CALL_OW 305
10019: PUSH
10020: LD_EXP 17
10024: PPUSH
10025: LD_INT 1
10027: PPUSH
10028: CALL_OW 289
10032: NOT
10033: AND
10034: PUSH
10035: LD_EXP 17
10039: PPUSH
10040: LD_INT 2
10042: PPUSH
10043: CALL_OW 289
10047: NOT
10048: AND
10049: PUSH
10050: LD_EXP 17
10054: PPUSH
10055: LD_INT 3
10057: PPUSH
10058: CALL_OW 289
10062: NOT
10063: AND
10064: IFFALSE 10081
10066: GO 10068
10068: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10069: LD_EXP 17
10073: PPUSH
10074: LD_INT 4
10076: PPUSH
10077: CALL_OW 235
10081: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10082: LD_EXP 18
10086: PPUSH
10087: CALL_OW 305
10091: PUSH
10092: LD_EXP 18
10096: PPUSH
10097: LD_INT 1
10099: PPUSH
10100: CALL_OW 289
10104: NOT
10105: AND
10106: PUSH
10107: LD_EXP 18
10111: PPUSH
10112: LD_INT 2
10114: PPUSH
10115: CALL_OW 289
10119: NOT
10120: AND
10121: PUSH
10122: LD_EXP 18
10126: PPUSH
10127: LD_INT 3
10129: PPUSH
10130: CALL_OW 289
10134: NOT
10135: AND
10136: IFFALSE 10153
10138: GO 10140
10140: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10141: LD_EXP 18
10145: PPUSH
10146: LD_INT 4
10148: PPUSH
10149: CALL_OW 235
10153: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10154: LD_EXP 19
10158: PPUSH
10159: CALL_OW 305
10163: PUSH
10164: LD_EXP 19
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: CALL_OW 289
10176: NOT
10177: AND
10178: PUSH
10179: LD_EXP 19
10183: PPUSH
10184: LD_INT 2
10186: PPUSH
10187: CALL_OW 289
10191: NOT
10192: AND
10193: PUSH
10194: LD_EXP 19
10198: PPUSH
10199: LD_INT 3
10201: PPUSH
10202: CALL_OW 289
10206: NOT
10207: AND
10208: PUSH
10209: LD_EXP 19
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: CALL_OW 289
10221: NOT
10222: AND
10223: IFFALSE 10240
10225: GO 10227
10227: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10228: LD_EXP 19
10232: PPUSH
10233: LD_INT 4
10235: PPUSH
10236: CALL_OW 235
10240: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10241: LD_EXP 20
10245: PPUSH
10246: CALL_OW 305
10250: PUSH
10251: LD_EXP 20
10255: PPUSH
10256: LD_INT 1
10258: PPUSH
10259: CALL_OW 289
10263: NOT
10264: AND
10265: PUSH
10266: LD_EXP 20
10270: PPUSH
10271: LD_INT 2
10273: PPUSH
10274: CALL_OW 289
10278: NOT
10279: AND
10280: PUSH
10281: LD_EXP 20
10285: PPUSH
10286: LD_INT 3
10288: PPUSH
10289: CALL_OW 289
10293: NOT
10294: AND
10295: IFFALSE 10312
10297: GO 10299
10299: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10300: LD_EXP 20
10304: PPUSH
10305: LD_INT 4
10307: PPUSH
10308: CALL_OW 235
10312: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10313: LD_EXP 21
10317: PPUSH
10318: CALL_OW 305
10322: PUSH
10323: LD_EXP 21
10327: PPUSH
10328: LD_INT 1
10330: PPUSH
10331: CALL_OW 289
10335: NOT
10336: AND
10337: PUSH
10338: LD_EXP 21
10342: PPUSH
10343: LD_INT 2
10345: PPUSH
10346: CALL_OW 289
10350: NOT
10351: AND
10352: PUSH
10353: LD_EXP 21
10357: PPUSH
10358: LD_INT 3
10360: PPUSH
10361: CALL_OW 289
10365: NOT
10366: AND
10367: IFFALSE 10384
10369: GO 10371
10371: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10372: LD_EXP 21
10376: PPUSH
10377: LD_INT 4
10379: PPUSH
10380: CALL_OW 235
10384: END
// every 0 0$1 do var i ;
10385: GO 10387
10387: DISABLE
10388: LD_INT 0
10390: PPUSH
// begin enable ;
10391: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10392: LD_ADDR_VAR 0 1
10396: PUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 69
10411: PUSH
10412: FOR_IN
10413: IFFALSE 10452
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10415: LD_VAR 0 1
10419: PPUSH
10420: LD_INT 4
10422: PPUSH
10423: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_INT 4
10434: PPUSH
10435: CALL_OW 308
10439: IFFALSE 10450
// RemoveUnit ( i ) ;
10441: LD_VAR 0 1
10445: PPUSH
10446: CALL_OW 64
// end ;
10450: GO 10412
10452: POP
10453: POP
// end ;
10454: PPOPN 1
10456: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10457: LD_EXP 28
10461: PUSH
10462: LD_INT 1
10464: EQUAL
10465: IFFALSE 10840
10467: GO 10469
10469: DISABLE
10470: LD_INT 0
10472: PPUSH
10473: PPUSH
10474: PPUSH
// begin enable ;
10475: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10476: LD_ADDR_VAR 0 2
10480: PUSH
10481: LD_INT 12
10483: PPUSH
10484: LD_INT 22
10486: PUSH
10487: LD_INT 3
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 2
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 70
10512: ST_TO_ADDR
// for i in enemyVehs do
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_VAR 0 2
10522: PUSH
10523: FOR_IN
10524: IFFALSE 10838
// begin if See ( 1 , i ) then
10526: LD_INT 1
10528: PPUSH
10529: LD_VAR 0 1
10533: PPUSH
10534: CALL_OW 292
10538: IFFALSE 10836
// begin disable ;
10540: DISABLE
// DialogueOn ;
10541: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10545: LD_VAR 0 1
10549: PPUSH
10550: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10554: LD_INT 22
10556: PUSH
10557: LD_INT 1
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 26
10566: PUSH
10567: LD_INT 1
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_EXP 1
10582: PUSH
10583: EMPTY
10584: LIST
10585: DIFF
10586: PPUSH
10587: CALL_OW 69
10591: PPUSH
10592: LD_STRING DT1-Sol1-1
10594: PPUSH
10595: LD_STRING DT1-FSol1-1
10597: PPUSH
10598: CALL 12337 0 3
// dec = ShowQuery2 ;
10602: LD_ADDR_VAR 0 3
10606: PUSH
10607: CALL 12947 0 0
10611: ST_TO_ADDR
// if dec = 1 then
10612: LD_VAR 0 3
10616: PUSH
10617: LD_INT 1
10619: EQUAL
10620: IFFALSE 10726
// begin Say ( JMM , D2-JMM-1 ) ;
10622: LD_EXP 1
10626: PPUSH
10627: LD_STRING D2-JMM-1
10629: PPUSH
10630: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10634: LD_EXP 22
10638: PPUSH
10639: LD_STRING D2-Pow-1
10641: PPUSH
10642: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10646: LD_EXP 1
10650: PPUSH
10651: LD_STRING D2a-JMM-1
10653: PPUSH
10654: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10658: LD_EXP 22
10662: PPUSH
10663: LD_STRING D2a-Pow-1
10665: PPUSH
10666: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10670: LD_EXP 1
10674: PPUSH
10675: LD_STRING D2a-JMM-2
10677: PPUSH
10678: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10682: LD_EXP 22
10686: PPUSH
10687: LD_STRING D2a-Pow-2
10689: PPUSH
10690: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10694: LD_EXP 1
10698: PPUSH
10699: LD_STRING D2a-JMM-3
10701: PPUSH
10702: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10706: LD_EXP 22
10710: PPUSH
10711: LD_STRING D2a-Pow-3
10713: PPUSH
10714: CALL_OW 94
// secondPass = 2 ;
10718: LD_ADDR_EXP 28
10722: PUSH
10723: LD_INT 2
10725: ST_TO_ADDR
// end ; if dec = 2 then
10726: LD_VAR 0 3
10730: PUSH
10731: LD_INT 2
10733: EQUAL
10734: IFFALSE 10828
// begin Say ( JMM , D2-JMM-1 ) ;
10736: LD_EXP 1
10740: PPUSH
10741: LD_STRING D2-JMM-1
10743: PPUSH
10744: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10748: LD_EXP 22
10752: PPUSH
10753: LD_STRING D2-Pow-1
10755: PPUSH
10756: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10760: LD_EXP 1
10764: PPUSH
10765: LD_STRING D2b-JMM-1
10767: PPUSH
10768: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10772: LD_EXP 22
10776: PPUSH
10777: LD_STRING D2b-Pow-1
10779: PPUSH
10780: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10784: LD_EXP 1
10788: PPUSH
10789: LD_STRING D2c-JMM-1
10791: PPUSH
10792: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10796: LD_EXP 22
10800: PPUSH
10801: LD_STRING D2c-Pow-1
10803: PPUSH
10804: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10808: LD_EXP 1
10812: PPUSH
10813: LD_STRING D2c-JMM-2
10815: PPUSH
10816: CALL_OW 88
// secondPass = 2 ;
10820: LD_ADDR_EXP 28
10824: PUSH
10825: LD_INT 2
10827: ST_TO_ADDR
// end ; DialogueOff ;
10828: CALL_OW 7
// exit ;
10832: POP
10833: POP
10834: GO 10840
// end ; end ;
10836: GO 10523
10838: POP
10839: POP
// end ;
10840: PPOPN 3
10842: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10843: LD_EXP 29
10847: PUSH
10848: LD_INT 1
10850: EQUAL
10851: IFFALSE 11001
10853: GO 10855
10855: DISABLE
10856: LD_INT 0
10858: PPUSH
10859: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10860: LD_ADDR_VAR 0 2
10864: PUSH
10865: LD_INT 11
10867: PPUSH
10868: LD_INT 22
10870: PUSH
10871: LD_INT 3
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 24
10880: PUSH
10881: LD_INT 250
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PPUSH
10892: CALL_OW 70
10896: ST_TO_ADDR
// enable ;
10897: ENABLE
// for i in vehicles do
10898: LD_ADDR_VAR 0 1
10902: PUSH
10903: LD_VAR 0 2
10907: PUSH
10908: FOR_IN
10909: IFFALSE 10999
// begin if See ( 1 , i ) and vehicleTeleported = 1 then
10911: LD_INT 1
10913: PPUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 292
10923: PUSH
10924: LD_EXP 29
10928: PUSH
10929: LD_INT 1
10931: EQUAL
10932: AND
10933: IFFALSE 10997
// begin disable ;
10935: DISABLE
// DialogueOn ;
10936: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10940: LD_INT 22
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: LD_INT 21
10952: PUSH
10953: LD_INT 1
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PPUSH
10964: CALL_OW 69
10968: PPUSH
10969: LD_STRING DT1-Sol1-1
10971: PPUSH
10972: LD_STRING DT1-FSol1-1
10974: PPUSH
10975: CALL 12337 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10979: LD_EXP 1
10983: PPUSH
10984: LD_STRING DT1-JMM-1
10986: PPUSH
10987: CALL_OW 88
// DialogueOff ;
10991: CALL_OW 7
// break ;
10995: GO 10999
// end ; end ;
10997: GO 10908
10999: POP
11000: POP
// end ;
11001: PPOPN 2
11003: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11004: LD_EXP 29
11008: PUSH
11009: LD_INT 1
11011: EQUAL
11012: PUSH
11013: LD_INT 11
11015: PPUSH
11016: LD_INT 22
11018: PUSH
11019: LD_INT 3
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 24
11028: PUSH
11029: LD_INT 251
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 2
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 2
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 21
11051: PUSH
11052: LD_INT 1
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: PPUSH
11069: CALL_OW 70
11073: PUSH
11074: LD_INT 0
11076: EQUAL
11077: AND
11078: IFFALSE 11162
11080: GO 11082
11082: DISABLE
// begin vehicleTeleported = 2 ;
11083: LD_ADDR_EXP 29
11087: PUSH
11088: LD_INT 2
11090: ST_TO_ADDR
// DialogueOn ;
11091: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11095: LD_EXP 1
11099: PPUSH
11100: LD_STRING DT1a-JMM-1
11102: PPUSH
11103: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11107: LD_INT 22
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 21
11119: PUSH
11120: LD_INT 1
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PPUSH
11131: CALL_OW 69
11135: PPUSH
11136: LD_STRING DT1a-Sol1-1
11138: PPUSH
11139: LD_STRING DT1a-FSol1-1
11141: PPUSH
11142: CALL 12337 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11146: LD_EXP 1
11150: PPUSH
11151: LD_STRING DT1a-JMM-2
11153: PPUSH
11154: CALL_OW 88
// DialogueOff ;
11158: CALL_OW 7
// end ;
11162: END
// every 0 0$1 trigger vehicleTeleported = 3 do var i , vehicles ;
11163: LD_EXP 29
11167: PUSH
11168: LD_INT 3
11170: EQUAL
11171: IFFALSE 11309
11173: GO 11175
11175: DISABLE
11176: LD_INT 0
11178: PPUSH
11179: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11180: LD_ADDR_VAR 0 2
11184: PUSH
11185: LD_INT 11
11187: PPUSH
11188: LD_INT 22
11190: PUSH
11191: LD_INT 3
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 24
11200: PUSH
11201: LD_INT 250
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 70
11216: ST_TO_ADDR
// enable ;
11217: ENABLE
// for i in vehicles do
11218: LD_ADDR_VAR 0 1
11222: PUSH
11223: LD_VAR 0 2
11227: PUSH
11228: FOR_IN
11229: IFFALSE 11307
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11231: LD_INT 1
11233: PPUSH
11234: LD_VAR 0 1
11238: PPUSH
11239: CALL_OW 292
11243: PUSH
11244: LD_EXP 29
11248: PUSH
11249: LD_INT 3
11251: EQUAL
11252: AND
11253: IFFALSE 11305
// begin disable ;
11255: DISABLE
// DialogueOn ;
11256: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11260: LD_INT 22
11262: PUSH
11263: LD_INT 1
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 21
11272: PUSH
11273: LD_INT 1
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PPUSH
11284: CALL_OW 69
11288: PPUSH
11289: LD_STRING DT2-Sol1-1
11291: PPUSH
11292: LD_STRING DT2-FSol1-1
11294: PPUSH
11295: CALL 12337 0 3
// DialogueOff ;
11299: CALL_OW 7
// break ;
11303: GO 11307
// end ; end ;
11305: GO 11228
11307: POP
11308: POP
// end ;
11309: PPOPN 2
11311: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 do
11312: LD_EXP 29
11316: PUSH
11317: LD_INT 3
11319: EQUAL
11320: PUSH
11321: LD_INT 11
11323: PPUSH
11324: LD_INT 22
11326: PUSH
11327: LD_INT 3
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 24
11336: PUSH
11337: LD_INT 251
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: LD_INT 21
11349: PUSH
11350: LD_INT 2
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 21
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: LIST
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 70
11381: PUSH
11382: LD_INT 0
11384: EQUAL
11385: AND
11386: IFFALSE 11470
11388: GO 11390
11390: DISABLE
// begin vehicleTeleported = 4 ;
11391: LD_ADDR_EXP 29
11395: PUSH
11396: LD_INT 4
11398: ST_TO_ADDR
// DialogueOn ;
11399: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11403: LD_EXP 1
11407: PPUSH
11408: LD_STRING DT2a-JMM-1
11410: PPUSH
11411: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11415: LD_INT 22
11417: PUSH
11418: LD_INT 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 69
11443: PPUSH
11444: LD_STRING DT2a-Sol1-1
11446: PPUSH
11447: LD_STRING DT2a-FSol1-1
11449: PPUSH
11450: CALL 12337 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
11454: LD_EXP 3
11458: PPUSH
11459: LD_STRING DT2a-Don-1
11461: PPUSH
11462: CALL_OW 88
// DialogueOff ;
11466: CALL_OW 7
// end ;
11470: END
// every 0 0$1 trigger SeeXY ( 1 , 36 , 55 ) do
11471: LD_INT 1
11473: PPUSH
11474: LD_INT 36
11476: PPUSH
11477: LD_INT 55
11479: PPUSH
11480: CALL_OW 293
11484: IFFALSE 11579
11486: GO 11488
11488: DISABLE
// begin DialogueOn ;
11489: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11493: LD_INT 36
11495: PPUSH
11496: LD_INT 55
11498: PPUSH
11499: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11503: LD_INT 22
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 21
11515: PUSH
11516: LD_INT 1
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: PPUSH
11532: LD_STRING D5-Sol1-1
11534: PPUSH
11535: LD_STRING D5-FSol1-
11537: PPUSH
11538: CALL 12337 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
11542: LD_EXP 30
11546: PUSH
11547: LD_INT 1
11549: EQUAL
11550: PUSH
11551: LD_EXP 3
11555: PPUSH
11556: CALL_OW 300
11560: AND
11561: IFFALSE 11575
// Say ( Donaldson , D5-Don-1 ) ;
11563: LD_EXP 3
11567: PPUSH
11568: LD_STRING D5-Don-1
11570: PPUSH
11571: CALL_OW 88
// DialogueOff ;
11575: CALL_OW 7
// end ;
11579: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) do
11580: LD_INT 1
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: CALL_OW 292
11590: IFFALSE 11677
11592: GO 11594
11594: DISABLE
// begin DialogueOn ;
11595: CALL_OW 6
// CenterNowOnUnits ( ruteleprt ) ;
11599: LD_INT 10
11601: PPUSH
11602: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11606: LD_INT 22
11608: PUSH
11609: LD_INT 1
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 21
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: PUSH
11635: LD_EXP 1
11639: PUSH
11640: EMPTY
11641: LIST
11642: DIFF
11643: PPUSH
11644: LD_STRING DT3-Sol1-1
11646: PPUSH
11647: LD_STRING DT3-FSol1-1
11649: PPUSH
11650: CALL 12337 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11654: LD_EXP 1
11658: PPUSH
11659: LD_STRING DT3-JMM-1
11661: PPUSH
11662: CALL_OW 88
// DialogueOff ;
11666: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11670: LD_STRING M2
11672: PPUSH
11673: CALL_OW 337
// end ;
11677: END
// every 0 0$1 trigger IsDying ( ruheadlab ) do var i , j , vehs ;
11678: LD_INT 3
11680: PPUSH
11681: CALL_OW 303
11685: IFFALSE 12025
11687: GO 11689
11689: DISABLE
11690: LD_INT 0
11692: PPUSH
11693: PPUSH
11694: PPUSH
// begin ruAI = 0 ;
11695: LD_ADDR_EXP 41
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11703: LD_ADDR_VAR 0 3
11707: PUSH
11708: LD_INT 10
11710: PPUSH
11711: LD_INT 22
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 21
11723: PUSH
11724: LD_INT 2
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 58
11733: PUSH
11734: EMPTY
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 70
11746: ST_TO_ADDR
// DialogueOn ;
11747: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11751: LD_EXP 1
11755: PPUSH
11756: LD_STRING D6-JMM-1
11758: PPUSH
11759: CALL_OW 88
// DialogueOff ;
11763: CALL_OW 7
// for i := 1 to RuScientists do
11767: LD_ADDR_VAR 0 1
11771: PUSH
11772: DOUBLE
11773: LD_INT 1
11775: DEC
11776: ST_TO_ADDR
11777: LD_EXP 34
11781: PUSH
11782: FOR_TO
11783: IFFALSE 12023
// begin ComEnterUnit ( RuScientists [ i ] , vehs [ 1 ] ) ;
11785: LD_EXP 34
11789: PUSH
11790: LD_VAR 0 1
11794: ARRAY
11795: PPUSH
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 1
11803: ARRAY
11804: PPUSH
11805: CALL_OW 120
// if IsOk ( rutp ) then
11809: LD_INT 137
11811: PPUSH
11812: CALL_OW 302
11816: IFFALSE 11969
// begin if i mod 2 then
11818: LD_VAR 0 1
11822: PUSH
11823: LD_INT 2
11825: MOD
11826: IFFALSE 11915
// begin AddComEnterUnit ( [ RuScientists [ i ] , vehs [ i ] ] , rutp ) ;
11828: LD_EXP 34
11832: PUSH
11833: LD_VAR 0 1
11837: ARRAY
11838: PUSH
11839: LD_VAR 0 3
11843: PUSH
11844: LD_VAR 0 1
11848: ARRAY
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PPUSH
11854: LD_INT 137
11856: PPUSH
11857: CALL_OW 180
// AddComMoveToArea ( [ RuScientists [ i ] , vehs [ j ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11861: LD_EXP 34
11865: PUSH
11866: LD_VAR 0 1
11870: ARRAY
11871: PUSH
11872: LD_VAR 0 3
11876: PUSH
11877: LD_VAR 0 2
11881: ARRAY
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: LD_INT 13
11889: PUSH
11890: LD_INT 14
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 1
11899: PPUSH
11900: LD_INT 2
11902: PPUSH
11903: CALL_OW 12
11907: ARRAY
11908: PPUSH
11909: CALL_OW 173
// end else
11913: GO 11967
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11915: LD_EXP 34
11919: PUSH
11920: LD_VAR 0 1
11924: ARRAY
11925: PUSH
11926: LD_VAR 0 3
11930: PUSH
11931: LD_VAR 0 1
11935: ARRAY
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PPUSH
11941: LD_INT 13
11943: PUSH
11944: LD_INT 14
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 1
11953: PPUSH
11954: LD_INT 2
11956: PPUSH
11957: CALL_OW 12
11961: ARRAY
11962: PPUSH
11963: CALL_OW 173
// end ; end else
11967: GO 12021
// begin AddComMoveToArea ( [ RuScientists [ i ] , vehs [ i ] ] , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11969: LD_EXP 34
11973: PUSH
11974: LD_VAR 0 1
11978: ARRAY
11979: PUSH
11980: LD_VAR 0 3
11984: PUSH
11985: LD_VAR 0 1
11989: ARRAY
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PPUSH
11995: LD_INT 13
11997: PUSH
11998: LD_INT 14
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 1
12007: PPUSH
12008: LD_INT 2
12010: PPUSH
12011: CALL_OW 12
12015: ARRAY
12016: PPUSH
12017: CALL_OW 173
// end ; end ;
12021: GO 11782
12023: POP
12024: POP
// end ;
12025: PPOPN 3
12027: END
// every 0 0$1 trigger ruAI = 0 do var i , j ;
12028: LD_EXP 41
12032: PUSH
12033: LD_INT 0
12035: EQUAL
12036: IFFALSE 12226
12038: GO 12040
12040: DISABLE
12041: LD_INT 0
12043: PPUSH
12044: PPUSH
// begin enable ;
12045: ENABLE
// for i in FilterUnitsInArea ( EscapeArea1 , [ [ f_side , 3 ] ] ) do
12046: LD_ADDR_VAR 0 1
12050: PUSH
12051: LD_INT 13
12053: PPUSH
12054: LD_INT 22
12056: PUSH
12057: LD_INT 3
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: EMPTY
12065: LIST
12066: PPUSH
12067: CALL_OW 70
12071: PUSH
12072: FOR_IN
12073: IFFALSE 12134
// begin for j in RuScientists do
12075: LD_ADDR_VAR 0 2
12079: PUSH
12080: LD_EXP 34
12084: PUSH
12085: FOR_IN
12086: IFFALSE 12121
// if j = i then
12088: LD_VAR 0 2
12092: PUSH
12093: LD_VAR 0 1
12097: EQUAL
12098: IFFALSE 12119
// RuScientists = RuScientists diff [ i ] ;
12100: LD_ADDR_EXP 34
12104: PUSH
12105: LD_EXP 34
12109: PUSH
12110: LD_VAR 0 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: DIFF
12118: ST_TO_ADDR
12119: GO 12085
12121: POP
12122: POP
// RemoveUnit ( i ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 64
// end ;
12132: GO 12072
12134: POP
12135: POP
// for i in FilterUnitsInArea ( EscapeArea2 , [ [ f_side , 3 ] ] ) do
12136: LD_ADDR_VAR 0 1
12140: PUSH
12141: LD_INT 14
12143: PPUSH
12144: LD_INT 22
12146: PUSH
12147: LD_INT 3
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: PPUSH
12157: CALL_OW 70
12161: PUSH
12162: FOR_IN
12163: IFFALSE 12224
// begin for j in RuScientists do
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: LD_EXP 34
12174: PUSH
12175: FOR_IN
12176: IFFALSE 12211
// if j = i then
12178: LD_VAR 0 2
12182: PUSH
12183: LD_VAR 0 1
12187: EQUAL
12188: IFFALSE 12209
// RuScientists = RuScientists diff [ i ] ;
12190: LD_ADDR_EXP 34
12194: PUSH
12195: LD_EXP 34
12199: PUSH
12200: LD_VAR 0 1
12204: PUSH
12205: EMPTY
12206: LIST
12207: DIFF
12208: ST_TO_ADDR
12209: GO 12175
12211: POP
12212: POP
// RemoveUnit ( i ) ;
12213: LD_VAR 0 1
12217: PPUSH
12218: CALL_OW 64
// end ;
12222: GO 12162
12224: POP
12225: POP
// end ; end_of_file
12226: PPOPN 2
12228: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
// if exist_mode then
12233: LD_VAR 0 2
12237: IFFALSE 12256
// unit := CreateCharacter ( ident ) else
12239: LD_ADDR_VAR 0 4
12243: PUSH
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 34
12253: ST_TO_ADDR
12254: GO 12271
// unit := NewCharacter ( ident ) ;
12256: LD_ADDR_VAR 0 4
12260: PUSH
12261: LD_VAR 0 1
12265: PPUSH
12266: CALL_OW 25
12270: ST_TO_ADDR
// result := unit ;
12271: LD_ADDR_VAR 0 3
12275: PUSH
12276: LD_VAR 0 4
12280: ST_TO_ADDR
// end ;
12281: LD_VAR 0 3
12285: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12286: LD_INT 0
12288: PPUSH
12289: PPUSH
// for i in charactersList do
12290: LD_ADDR_VAR 0 4
12294: PUSH
12295: LD_VAR 0 1
12299: PUSH
12300: FOR_IN
12301: IFFALSE 12330
// begin if IsOk ( i ) then
12303: LD_VAR 0 4
12307: PPUSH
12308: CALL_OW 302
12312: IFFALSE 12328
// SaveCharacters ( i , ident ) ;
12314: LD_VAR 0 4
12318: PPUSH
12319: LD_VAR 0 2
12323: PPUSH
12324: CALL_OW 38
// end ;
12328: GO 12300
12330: POP
12331: POP
// end ;
12332: LD_VAR 0 3
12336: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
12337: LD_INT 0
12339: PPUSH
12340: PPUSH
12341: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12342: LD_ADDR_VAR 0 1
12346: PUSH
12347: LD_VAR 0 1
12351: PUSH
12352: LD_EXP 1
12356: PUSH
12357: LD_EXP 7
12361: PUSH
12362: LD_EXP 3
12366: PUSH
12367: LD_EXP 4
12371: PUSH
12372: LD_EXP 5
12376: PUSH
12377: LD_EXP 2
12381: PUSH
12382: LD_EXP 12
12386: PUSH
12387: LD_EXP 13
12391: PUSH
12392: LD_EXP 9
12396: PUSH
12397: LD_EXP 11
12401: PUSH
12402: LD_EXP 6
12406: PUSH
12407: LD_EXP 8
12411: PUSH
12412: LD_EXP 10
12416: PUSH
12417: LD_EXP 22
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: DIFF
12438: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
12439: LD_ADDR_VAR 0 6
12443: PUSH
12444: LD_INT 1
12446: PPUSH
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 12
12456: ST_TO_ADDR
// for i = 1 to characters do
12457: LD_ADDR_VAR 0 5
12461: PUSH
12462: DOUBLE
12463: LD_INT 1
12465: DEC
12466: ST_TO_ADDR
12467: LD_VAR 0 1
12471: PUSH
12472: FOR_TO
12473: IFFALSE 12583
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
12475: LD_VAR 0 5
12479: PUSH
12480: LD_VAR 0 6
12484: EQUAL
12485: PUSH
12486: LD_VAR 0 1
12490: PUSH
12491: LD_VAR 0 5
12495: ARRAY
12496: PPUSH
12497: CALL_OW 258
12501: PUSH
12502: LD_INT 1
12504: EQUAL
12505: AND
12506: IFFALSE 12528
// Say ( characters [ i ] , dialogMID ) ;
12508: LD_VAR 0 1
12512: PUSH
12513: LD_VAR 0 5
12517: ARRAY
12518: PPUSH
12519: LD_VAR 0 2
12523: PPUSH
12524: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
12528: LD_VAR 0 5
12532: PUSH
12533: LD_VAR 0 6
12537: EQUAL
12538: PUSH
12539: LD_VAR 0 1
12543: PUSH
12544: LD_VAR 0 5
12548: ARRAY
12549: PPUSH
12550: CALL_OW 258
12554: PUSH
12555: LD_INT 2
12557: EQUAL
12558: AND
12559: IFFALSE 12581
// Say ( characters [ i ] , dialogFID ) ;
12561: LD_VAR 0 1
12565: PUSH
12566: LD_VAR 0 5
12570: ARRAY
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: CALL_OW 88
// end ;
12581: GO 12472
12583: POP
12584: POP
// end ;
12585: LD_VAR 0 4
12589: RET
// export function PrepareDifficulty ; var tmp ; begin
12590: LD_INT 0
12592: PPUSH
12593: PPUSH
// if Difficulty = 1 then
12594: LD_OWVAR 67
12598: PUSH
12599: LD_INT 1
12601: EQUAL
12602: IFFALSE 12620
// begin RuSolMinLevel = 8 ;
12604: LD_ADDR_EXP 36
12608: PUSH
12609: LD_INT 8
12611: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12612: LD_ADDR_EXP 37
12616: PUSH
12617: LD_INT 10
12619: ST_TO_ADDR
// end ; if Difficulty = 2 then
12620: LD_OWVAR 67
12624: PUSH
12625: LD_INT 2
12627: EQUAL
12628: IFFALSE 12722
// begin RuSolMinLevel = 9 ;
12630: LD_ADDR_EXP 36
12634: PUSH
12635: LD_INT 9
12637: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12638: LD_ADDR_EXP 37
12642: PUSH
12643: LD_INT 10
12645: ST_TO_ADDR
// uc_nation = 3 ;
12646: LD_ADDR_OWVAR 21
12650: PUSH
12651: LD_INT 3
12653: ST_TO_ADDR
// uc_side = 3 ;
12654: LD_ADDR_OWVAR 20
12658: PUSH
12659: LD_INT 3
12661: ST_TO_ADDR
// bc_level = 10 ;
12662: LD_ADDR_OWVAR 43
12666: PUSH
12667: LD_INT 10
12669: ST_TO_ADDR
// bc_type = b_turret ;
12670: LD_ADDR_OWVAR 42
12674: PUSH
12675: LD_INT 33
12677: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12678: LD_ADDR_VAR 0 2
12682: PUSH
12683: LD_INT 86
12685: PPUSH
12686: LD_INT 34
12688: PPUSH
12689: LD_INT 2
12691: PPUSH
12692: CALL_OW 47
12696: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12697: LD_VAR 0 2
12701: PPUSH
12702: LD_INT 49
12704: PPUSH
12705: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12709: LD_INT 64
12711: PPUSH
12712: LD_INT 3
12714: PPUSH
12715: LD_INT 1
12717: PPUSH
12718: CALL_OW 322
// end ; if Difficulty = 3 then
12722: LD_OWVAR 67
12726: PUSH
12727: LD_INT 3
12729: EQUAL
12730: IFFALSE 12868
// begin RuSolMinLevel = 10 ;
12732: LD_ADDR_EXP 36
12736: PUSH
12737: LD_INT 10
12739: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12740: LD_ADDR_EXP 37
12744: PUSH
12745: LD_INT 10
12747: ST_TO_ADDR
// uc_nation = 3 ;
12748: LD_ADDR_OWVAR 21
12752: PUSH
12753: LD_INT 3
12755: ST_TO_ADDR
// uc_side = 3 ;
12756: LD_ADDR_OWVAR 20
12760: PUSH
12761: LD_INT 3
12763: ST_TO_ADDR
// bc_level = 10 ;
12764: LD_ADDR_OWVAR 43
12768: PUSH
12769: LD_INT 10
12771: ST_TO_ADDR
// bc_type = b_turret ;
12772: LD_ADDR_OWVAR 42
12776: PUSH
12777: LD_INT 33
12779: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12780: LD_ADDR_VAR 0 2
12784: PUSH
12785: LD_INT 86
12787: PPUSH
12788: LD_INT 34
12790: PPUSH
12791: LD_INT 2
12793: PPUSH
12794: CALL_OW 47
12798: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12799: LD_VAR 0 2
12803: PPUSH
12804: LD_INT 49
12806: PPUSH
12807: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12811: LD_ADDR_VAR 0 2
12815: PUSH
12816: LD_INT 93
12818: PPUSH
12819: LD_INT 31
12821: PPUSH
12822: LD_INT 2
12824: PPUSH
12825: CALL_OW 47
12829: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12830: LD_VAR 0 2
12834: PPUSH
12835: LD_INT 49
12837: PPUSH
12838: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12842: LD_INT 64
12844: PPUSH
12845: LD_INT 3
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12855: LD_INT 65
12857: PPUSH
12858: LD_INT 3
12860: PPUSH
12861: LD_INT 1
12863: PPUSH
12864: CALL_OW 322
// end ; end ;
12868: LD_VAR 0 1
12872: RET
// export function ShowQuery1 ; begin
12873: LD_INT 0
12875: PPUSH
// case query ( Q1 ) of 1 :
12876: LD_STRING Q1
12878: PPUSH
12879: CALL_OW 97
12883: PUSH
12884: LD_INT 1
12886: DOUBLE
12887: EQUAL
12888: IFTRUE 12892
12890: GO 12903
12892: POP
// result = 1 ; 2 :
12893: LD_ADDR_VAR 0 1
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
12901: GO 12942
12903: LD_INT 2
12905: DOUBLE
12906: EQUAL
12907: IFTRUE 12911
12909: GO 12922
12911: POP
// result = 2 ; 3 :
12912: LD_ADDR_VAR 0 1
12916: PUSH
12917: LD_INT 2
12919: ST_TO_ADDR
12920: GO 12942
12922: LD_INT 3
12924: DOUBLE
12925: EQUAL
12926: IFTRUE 12930
12928: GO 12941
12930: POP
// result = 3 ; end ;
12931: LD_ADDR_VAR 0 1
12935: PUSH
12936: LD_INT 3
12938: ST_TO_ADDR
12939: GO 12942
12941: POP
// end ;
12942: LD_VAR 0 1
12946: RET
// export function ShowQuery2 ; begin
12947: LD_INT 0
12949: PPUSH
// case query ( Q1a ) of 1 :
12950: LD_STRING Q1a
12952: PPUSH
12953: CALL_OW 97
12957: PUSH
12958: LD_INT 1
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 12977
12966: POP
// result = 1 ; 2 :
12967: LD_ADDR_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: ST_TO_ADDR
12975: GO 13016
12977: LD_INT 2
12979: DOUBLE
12980: EQUAL
12981: IFTRUE 12985
12983: GO 12996
12985: POP
// result = 2 ; 3 :
12986: LD_ADDR_VAR 0 1
12990: PUSH
12991: LD_INT 2
12993: ST_TO_ADDR
12994: GO 13016
12996: LD_INT 3
12998: DOUBLE
12999: EQUAL
13000: IFTRUE 13004
13002: GO 13015
13004: POP
// result = 3 ; end ;
13005: LD_ADDR_VAR 0 1
13009: PUSH
13010: LD_INT 3
13012: ST_TO_ADDR
13013: GO 13016
13015: POP
// end ;
13016: LD_VAR 0 1
13020: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13021: LD_INT 0
13023: PPUSH
13024: PPUSH
13025: PPUSH
13026: PPUSH
13027: PPUSH
// for i = 1 to count do
13028: LD_ADDR_VAR 0 8
13032: PUSH
13033: DOUBLE
13034: LD_INT 1
13036: DEC
13037: ST_TO_ADDR
13038: LD_VAR 0 6
13042: PUSH
13043: FOR_TO
13044: IFFALSE 13125
// begin uc_side = side ;
13046: LD_ADDR_OWVAR 20
13050: PUSH
13051: LD_VAR 0 1
13055: ST_TO_ADDR
// uc_nation = nation ;
13056: LD_ADDR_OWVAR 21
13060: PUSH
13061: LD_VAR 0 2
13065: ST_TO_ADDR
// hc_gallery =  ;
13066: LD_ADDR_OWVAR 33
13070: PUSH
13071: LD_STRING 
13073: ST_TO_ADDR
// hc_name =  ;
13074: LD_ADDR_OWVAR 26
13078: PUSH
13079: LD_STRING 
13081: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13082: LD_INT 0
13084: PPUSH
13085: LD_VAR 0 5
13089: PPUSH
13090: LD_VAR 0 4
13094: PPUSH
13095: CALL_OW 380
// un = CreateHuman ;
13099: LD_ADDR_VAR 0 10
13103: PUSH
13104: CALL_OW 44
13108: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13109: LD_VAR 0 10
13113: PPUSH
13114: LD_VAR 0 3
13118: PPUSH
13119: CALL_OW 52
// end ;
13123: GO 13043
13125: POP
13126: POP
// end ;
13127: LD_VAR 0 7
13131: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13132: LD_INT 0
13134: PPUSH
13135: PPUSH
13136: PPUSH
13137: PPUSH
// for i = 1 to 72 do
13138: LD_ADDR_VAR 0 5
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_INT 72
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13210
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13154: LD_VAR 0 5
13158: PPUSH
13159: LD_VAR 0 1
13163: PPUSH
13164: CALL_OW 321
13168: PUSH
13169: LD_INT 1
13171: EQUAL
13172: PUSH
13173: LD_VAR 0 5
13177: PPUSH
13178: LD_VAR 0 3
13182: PPUSH
13183: CALL_OW 482
13187: PUSH
13188: LD_INT 1
13190: EQUAL
13191: AND
13192: IFFALSE 13208
// AddComResearch ( lab , i ) ;
13194: LD_VAR 0 2
13198: PPUSH
13199: LD_VAR 0 5
13203: PPUSH
13204: CALL_OW 184
13208: GO 13151
13210: POP
13211: POP
// end ;
13212: LD_VAR 0 4
13216: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13217: LD_INT 0
13219: PPUSH
13220: PPUSH
13221: PPUSH
13222: PPUSH
13223: PPUSH
13224: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13225: LD_ADDR_VAR 0 8
13229: PUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: CALL_OW 313
13239: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13240: LD_ADDR_VAR 0 9
13244: PUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 22
13252: PUSH
13253: LD_VAR 0 1
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 25
13264: PUSH
13265: LD_INT 2
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 24
13274: PUSH
13275: LD_INT 750
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 3
13284: PUSH
13285: LD_INT 54
13287: PUSH
13288: EMPTY
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 70
13305: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13306: LD_ADDR_VAR 0 6
13310: PUSH
13311: LD_VAR 0 3
13315: PPUSH
13316: LD_INT 22
13318: PUSH
13319: LD_VAR 0 1
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 21
13330: PUSH
13331: LD_INT 3
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 3
13340: PUSH
13341: LD_INT 24
13343: PUSH
13344: LD_INT 1000
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: PPUSH
13363: CALL_OW 70
13367: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13368: LD_VAR 0 6
13372: NOT
13373: PUSH
13374: LD_INT 22
13376: PUSH
13377: LD_VAR 0 1
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 2
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 24
13398: PUSH
13399: LD_INT 250
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 69
13415: NOT
13416: AND
13417: IFFALSE 13421
// exit ;
13419: GO 13603
// if buildings_list > 0 and engineerOkInside then
13421: LD_VAR 0 6
13425: PUSH
13426: LD_INT 0
13428: GREATER
13429: PUSH
13430: LD_VAR 0 8
13434: AND
13435: IFFALSE 13446
// ComExitBuilding ( engineerOkInside ) ;
13437: LD_VAR 0 8
13441: PPUSH
13442: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13446: LD_VAR 0 6
13450: PUSH
13451: LD_INT 0
13453: GREATER
13454: PUSH
13455: LD_VAR 0 9
13459: PUSH
13460: LD_INT 0
13462: GREATER
13463: AND
13464: IFFALSE 13484
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13466: LD_VAR 0 9
13470: PPUSH
13471: LD_VAR 0 6
13475: PUSH
13476: LD_INT 1
13478: ARRAY
13479: PPUSH
13480: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13484: LD_VAR 0 6
13488: PUSH
13489: LD_INT 0
13491: EQUAL
13492: PUSH
13493: LD_VAR 0 4
13497: PUSH
13498: LD_INT 0
13500: EQUAL
13501: AND
13502: PUSH
13503: LD_VAR 0 9
13507: PUSH
13508: LD_INT 0
13510: GREATER
13511: AND
13512: IFFALSE 13528
// ComEnterUnit ( engineerOkOutside , building ) ;
13514: LD_VAR 0 9
13518: PPUSH
13519: LD_VAR 0 2
13523: PPUSH
13524: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13528: LD_VAR 0 9
13532: PUSH
13533: LD_INT 0
13535: GREATER
13536: PUSH
13537: LD_VAR 0 6
13541: PUSH
13542: LD_INT 0
13544: EQUAL
13545: AND
13546: PUSH
13547: LD_VAR 0 4
13551: PUSH
13552: LD_INT 0
13554: GREATER
13555: AND
13556: IFFALSE 13603
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13558: LD_VAR 0 9
13562: PPUSH
13563: LD_VAR 0 4
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: PPUSH
13572: LD_VAR 0 4
13576: PUSH
13577: LD_INT 2
13579: ARRAY
13580: PPUSH
13581: LD_VAR 0 4
13585: PUSH
13586: LD_INT 3
13588: ARRAY
13589: PPUSH
13590: LD_VAR 0 4
13594: PUSH
13595: LD_INT 4
13597: ARRAY
13598: PPUSH
13599: CALL_OW 145
// end ;
13603: LD_VAR 0 5
13607: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13608: LD_INT 0
13610: PPUSH
13611: PPUSH
13612: PPUSH
13613: PPUSH
13614: PPUSH
13615: PPUSH
13616: PPUSH
13617: PPUSH
13618: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13619: LD_ADDR_VAR 0 6
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: LD_VAR 0 1
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 25
13638: PUSH
13639: LD_INT 4
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 24
13648: PUSH
13649: LD_INT 251
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: PPUSH
13661: CALL_OW 69
13665: PUSH
13666: LD_EXP 34
13670: PUSH
13671: EMPTY
13672: LIST
13673: DIFF
13674: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13675: LD_ADDR_VAR 0 7
13679: PUSH
13680: LD_VAR 0 3
13684: PPUSH
13685: LD_INT 22
13687: PUSH
13688: LD_VAR 0 1
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 25
13699: PUSH
13700: LD_INT 4
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 50
13709: PUSH
13710: EMPTY
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 70
13722: PUSH
13723: LD_EXP 34
13727: PUSH
13728: EMPTY
13729: LIST
13730: DIFF
13731: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13732: LD_ADDR_VAR 0 10
13736: PUSH
13737: LD_VAR 0 3
13741: PPUSH
13742: LD_INT 22
13744: PUSH
13745: LD_VAR 0 1
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 21
13756: PUSH
13757: LD_INT 1
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 3
13766: PUSH
13767: LD_INT 24
13769: PUSH
13770: LD_INT 750
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: PPUSH
13786: CALL_OW 70
13790: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13791: LD_ADDR_VAR 0 11
13795: PUSH
13796: LD_VAR 0 2
13800: PPUSH
13801: LD_INT 22
13803: PUSH
13804: LD_VAR 0 1
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 21
13815: PUSH
13816: LD_INT 1
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 3
13825: PUSH
13826: LD_INT 24
13828: PUSH
13829: LD_INT 1000
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: PPUSH
13845: CALL_OW 70
13849: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13850: LD_VAR 0 10
13854: PUSH
13855: LD_INT 0
13857: GREATER
13858: PUSH
13859: LD_VAR 0 6
13863: PUSH
13864: LD_INT 0
13866: GREATER
13867: AND
13868: IFFALSE 13884
// ComMoveToArea ( damageUnits , healArea ) ;
13870: LD_VAR 0 10
13874: PPUSH
13875: LD_VAR 0 2
13879: PPUSH
13880: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13884: LD_VAR 0 11
13888: PUSH
13889: LD_INT 0
13891: GREATER
13892: PUSH
13893: LD_VAR 0 7
13897: PUSH
13898: LD_INT 0
13900: GREATER
13901: AND
13902: IFFALSE 13922
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13904: LD_VAR 0 7
13908: PPUSH
13909: LD_VAR 0 11
13913: PUSH
13914: LD_INT 1
13916: ARRAY
13917: PPUSH
13918: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13922: LD_VAR 0 10
13926: PUSH
13927: LD_INT 0
13929: EQUAL
13930: PUSH
13931: LD_VAR 0 11
13935: PUSH
13936: LD_INT 0
13938: EQUAL
13939: AND
13940: PUSH
13941: LD_VAR 0 7
13945: PUSH
13946: LD_INT 0
13948: GREATER
13949: AND
13950: IFFALSE 14055
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13952: LD_ADDR_VAR 0 12
13956: PUSH
13957: LD_INT 22
13959: PUSH
13960: LD_VAR 0 1
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 21
13971: PUSH
13972: LD_INT 3
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 30
13981: PUSH
13982: LD_INT 8
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: PPUSH
13994: CALL_OW 69
13998: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13999: LD_ADDR_VAR 0 13
14003: PUSH
14004: LD_INT 1
14006: PPUSH
14007: LD_VAR 0 12
14011: PPUSH
14012: CALL_OW 12
14016: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14017: LD_VAR 0 7
14021: PPUSH
14022: LD_INT 3
14024: PUSH
14025: LD_INT 60
14027: PUSH
14028: EMPTY
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PPUSH
14035: CALL_OW 72
14039: PPUSH
14040: LD_VAR 0 12
14044: PUSH
14045: LD_VAR 0 13
14049: ARRAY
14050: PPUSH
14051: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14055: LD_VAR 0 3
14059: PPUSH
14060: LD_INT 22
14062: PUSH
14063: LD_VAR 0 1
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 25
14074: PUSH
14075: LD_INT 3
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 24
14084: PUSH
14085: LD_INT 751
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: PPUSH
14097: CALL_OW 70
14101: PUSH
14102: LD_INT 0
14104: GREATER
14105: PUSH
14106: LD_INT 21
14108: PPUSH
14109: CALL_OW 302
14113: AND
14114: PUSH
14115: LD_INT 21
14117: PPUSH
14118: CALL_OW 255
14122: PUSH
14123: LD_INT 3
14125: EQUAL
14126: AND
14127: IFFALSE 14183
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14129: LD_VAR 0 3
14133: PPUSH
14134: LD_INT 22
14136: PUSH
14137: LD_VAR 0 1
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 25
14148: PUSH
14149: LD_INT 3
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 24
14158: PUSH
14159: LD_INT 751
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: PPUSH
14171: CALL_OW 70
14175: PPUSH
14176: LD_INT 21
14178: PPUSH
14179: CALL_OW 120
// end ;
14183: LD_VAR 0 5
14187: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14188: LD_INT 0
14190: PPUSH
14191: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14192: LD_INT 22
14194: PUSH
14195: LD_VAR 0 1
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 21
14206: PUSH
14207: LD_INT 2
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 69
14222: PUSH
14223: LD_INT 18
14225: PPUSH
14226: LD_INT 22
14228: PUSH
14229: LD_VAR 0 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 2
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PPUSH
14252: CALL_OW 70
14256: PUSH
14257: LD_VAR 0 3
14261: LESSEQUAL
14262: DIFF
14263: IFFALSE 14330
// for i = 1 to vehCount do
14265: LD_ADDR_VAR 0 9
14269: PUSH
14270: DOUBLE
14271: LD_INT 1
14273: DEC
14274: ST_TO_ADDR
14275: LD_VAR 0 3
14279: PUSH
14280: FOR_TO
14281: IFFALSE 14328
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14283: LD_VAR 0 2
14287: PPUSH
14288: LD_VAR 0 7
14292: PPUSH
14293: LD_VAR 0 5
14297: PPUSH
14298: LD_VAR 0 6
14302: PPUSH
14303: LD_VAR 0 4
14307: PUSH
14308: LD_INT 1
14310: PPUSH
14311: LD_VAR 0 4
14315: PPUSH
14316: CALL_OW 12
14320: ARRAY
14321: PPUSH
14322: CALL_OW 185
14326: GO 14280
14328: POP
14329: POP
// end ;
14330: LD_VAR 0 8
14334: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14335: LD_INT 0
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14343: LD_EXP 39
14347: PUSH
14348: LD_INT 3
14350: PUSH
14351: LD_INT 4
14353: PUSH
14354: LD_INT 4
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: PUSH
14362: LD_OWVAR 67
14366: ARRAY
14367: GREATEREQUAL
14368: PUSH
14369: LD_EXP 40
14373: PUSH
14374: LD_INT 1
14376: PUSH
14377: LD_INT 2
14379: PUSH
14380: LD_INT 2
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: PUSH
14388: LD_OWVAR 67
14392: ARRAY
14393: GREATEREQUAL
14394: AND
14395: IFFALSE 14628
// begin repeat wait ( 0 0$3 ) ;
14397: LD_INT 105
14399: PPUSH
14400: CALL_OW 67
// for j in russianTanks do
14404: LD_ADDR_VAR 0 4
14408: PUSH
14409: LD_EXP 39
14413: PUSH
14414: FOR_IN
14415: IFFALSE 14616
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14417: LD_ADDR_VAR 0 6
14421: PUSH
14422: LD_INT 81
14424: PUSH
14425: LD_VAR 0 1
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 101
14436: PUSH
14437: LD_INT 1
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PPUSH
14448: CALL_OW 69
14452: PPUSH
14453: LD_VAR 0 4
14457: PPUSH
14458: CALL_OW 74
14462: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14463: LD_ADDR_VAR 0 7
14467: PUSH
14468: LD_INT 81
14470: PUSH
14471: LD_VAR 0 1
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 101
14482: PUSH
14483: LD_INT 1
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 2
14492: PUSH
14493: LD_INT 59
14495: PUSH
14496: EMPTY
14497: LIST
14498: PUSH
14499: LD_INT 21
14501: PUSH
14502: LD_INT 1
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 21
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: PPUSH
14538: LD_VAR 0 4
14542: PPUSH
14543: CALL_OW 74
14547: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14548: LD_VAR 0 4
14552: PPUSH
14553: LD_VAR 0 6
14557: PPUSH
14558: CALL_OW 296
14562: PUSH
14563: LD_INT 8
14565: PLUS
14566: PUSH
14567: LD_VAR 0 4
14571: PPUSH
14572: LD_VAR 0 7
14576: PPUSH
14577: CALL_OW 296
14581: LESS
14582: IFFALSE 14600
// ComAttackUnit ( j , target1 ) else
14584: LD_VAR 0 4
14588: PPUSH
14589: LD_VAR 0 6
14593: PPUSH
14594: CALL_OW 115
14598: GO 14614
// ComAttackUnit ( j , target2 ) ;
14600: LD_VAR 0 4
14604: PPUSH
14605: LD_VAR 0 7
14609: PPUSH
14610: CALL_OW 115
// end ;
14614: GO 14414
14616: POP
14617: POP
// until russianTanks = 0 ;
14618: LD_EXP 39
14622: PUSH
14623: LD_INT 0
14625: EQUAL
14626: IFFALSE 14397
// end ; end ;
14628: LD_VAR 0 2
14632: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14633: LD_INT 0
14635: PPUSH
14636: PPUSH
14637: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14638: LD_EXP 39
14642: PUSH
14643: LD_INT 1
14645: GREATEREQUAL
14646: PUSH
14647: LD_EXP 40
14651: PUSH
14652: LD_INT 1
14654: PUSH
14655: LD_INT 2
14657: PUSH
14658: LD_INT 2
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: PUSH
14666: LD_OWVAR 67
14670: ARRAY
14671: GREATEREQUAL
14672: AND
14673: IFFALSE 14812
// repeat wait ( 0 0$3 ) ;
14675: LD_INT 105
14677: PPUSH
14678: CALL_OW 67
// if russianTimeLapsers > 0 then
14682: LD_EXP 40
14686: PUSH
14687: LD_INT 0
14689: GREATER
14690: IFFALSE 14802
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
14692: LD_ADDR_VAR 0 3
14696: PUSH
14697: LD_EXP 40
14701: PPUSH
14702: LD_INT 3
14704: PUSH
14705: LD_INT 60
14707: PUSH
14708: EMPTY
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 72
14719: PUSH
14720: FOR_IN
14721: IFFALSE 14800
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14723: LD_ADDR_VAR 0 4
14727: PUSH
14728: LD_INT 81
14730: PUSH
14731: LD_VAR 0 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 101
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: PPUSH
14759: LD_VAR 0 3
14763: PPUSH
14764: CALL_OW 74
14768: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
14769: LD_VAR 0 3
14773: PPUSH
14774: LD_VAR 0 4
14778: PPUSH
14779: CALL_OW 250
14783: PPUSH
14784: LD_VAR 0 4
14788: PPUSH
14789: CALL_OW 251
14793: PPUSH
14794: CALL_OW 111
// end ;
14798: GO 14720
14800: POP
14801: POP
// until russianTimeLapsers = 0 ;
14802: LD_EXP 40
14806: PUSH
14807: LD_INT 0
14809: EQUAL
14810: IFFALSE 14675
// end ;
14812: LD_VAR 0 2
14816: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14825: LD_ADDR_VAR 0 6
14829: PUSH
14830: LD_INT 22
14832: PUSH
14833: LD_VAR 0 1
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 25
14844: PUSH
14845: LD_INT 9
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PPUSH
14856: CALL_OW 69
14860: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14861: LD_ADDR_VAR 0 7
14865: PUSH
14866: LD_INT 81
14868: PUSH
14869: LD_VAR 0 1
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 3
14880: PUSH
14881: LD_INT 21
14883: PUSH
14884: LD_INT 3
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14904: LD_ADDR_VAR 0 4
14908: PUSH
14909: LD_INT 1
14911: PPUSH
14912: LD_INT 3
14914: PPUSH
14915: CALL_OW 12
14919: ST_TO_ADDR
// for i = 1 to list do
14920: LD_ADDR_VAR 0 5
14924: PUSH
14925: DOUBLE
14926: LD_INT 1
14928: DEC
14929: ST_TO_ADDR
14930: LD_VAR 0 6
14934: PUSH
14935: FOR_TO
14936: IFFALSE 15138
// for ta in filter do
14938: LD_ADDR_VAR 0 3
14942: PUSH
14943: LD_VAR 0 7
14947: PUSH
14948: FOR_IN
14949: IFFALSE 15134
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14951: LD_VAR 0 6
14955: PUSH
14956: LD_VAR 0 5
14960: ARRAY
14961: PPUSH
14962: LD_VAR 0 3
14966: PPUSH
14967: CALL_OW 296
14971: PUSH
14972: LD_INT 15
14974: LESSEQUAL
14975: IFFALSE 15132
// begin case c of 1 :
14977: LD_VAR 0 4
14981: PUSH
14982: LD_INT 1
14984: DOUBLE
14985: EQUAL
14986: IFTRUE 14990
14988: GO 15028
14990: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14991: LD_VAR 0 6
14995: PUSH
14996: LD_VAR 0 5
15000: ARRAY
15001: PPUSH
15002: LD_VAR 0 3
15006: PPUSH
15007: CALL_OW 250
15011: PPUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: CALL_OW 251
15021: PPUSH
15022: CALL_OW 154
15026: GO 15132
15028: LD_INT 2
15030: DOUBLE
15031: EQUAL
15032: IFTRUE 15036
15034: GO 15100
15036: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15037: LD_VAR 0 6
15041: PUSH
15042: LD_VAR 0 5
15046: ARRAY
15047: PPUSH
15048: LD_VAR 0 3
15052: PPUSH
15053: CALL_OW 250
15057: PUSH
15058: LD_INT 1
15060: NEG
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 12
15069: PLUS
15070: PPUSH
15071: LD_VAR 0 3
15075: PPUSH
15076: CALL_OW 251
15080: PUSH
15081: LD_INT 1
15083: NEG
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 12
15092: PLUS
15093: PPUSH
15094: CALL_OW 153
15098: GO 15132
15100: LD_INT 3
15102: DOUBLE
15103: EQUAL
15104: IFTRUE 15108
15106: GO 15131
15108: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15109: LD_VAR 0 6
15113: PUSH
15114: LD_VAR 0 5
15118: ARRAY
15119: PPUSH
15120: LD_VAR 0 3
15124: PPUSH
15125: CALL_OW 115
15129: GO 15132
15131: POP
// end ; end ;
15132: GO 14948
15134: POP
15135: POP
15136: GO 14935
15138: POP
15139: POP
// end ;
15140: LD_VAR 0 2
15144: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15145: LD_INT 0
15147: PPUSH
15148: PPUSH
15149: PPUSH
15150: PPUSH
// r := 100 ;
15151: LD_ADDR_VAR 0 5
15155: PUSH
15156: LD_INT 100
15158: ST_TO_ADDR
// x := 0 ;
15159: LD_ADDR_VAR 0 6
15163: PUSH
15164: LD_INT 0
15166: ST_TO_ADDR
// while ( x < n ) do
15167: LD_VAR 0 6
15171: PUSH
15172: LD_VAR 0 2
15176: LESS
15177: IFFALSE 15464
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15179: LD_ADDR_VAR 0 4
15183: PUSH
15184: DOUBLE
15185: LD_INT 1
15187: DEC
15188: ST_TO_ADDR
15189: LD_VAR 0 1
15193: PPUSH
15194: LD_INT 0
15196: PPUSH
15197: CALL_OW 517
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: PUSH
15206: FOR_TO
15207: IFFALSE 15460
// begin if r > 50 then
15209: LD_VAR 0 5
15213: PUSH
15214: LD_INT 50
15216: GREATER
15217: IFFALSE 15436
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15219: LD_VAR 0 1
15223: PPUSH
15224: LD_INT 0
15226: PPUSH
15227: CALL_OW 517
15231: PUSH
15232: LD_INT 1
15234: ARRAY
15235: PUSH
15236: LD_VAR 0 4
15240: ARRAY
15241: PPUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: LD_INT 0
15249: PPUSH
15250: CALL_OW 517
15254: PUSH
15255: LD_INT 2
15257: ARRAY
15258: PUSH
15259: LD_VAR 0 4
15263: ARRAY
15264: PPUSH
15265: CALL_OW 458
15269: NOT
15270: IFFALSE 15420
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_INT 0
15279: PPUSH
15280: CALL_OW 517
15284: PUSH
15285: LD_INT 1
15287: ARRAY
15288: PUSH
15289: LD_VAR 0 4
15293: ARRAY
15294: PPUSH
15295: LD_VAR 0 1
15299: PPUSH
15300: LD_INT 0
15302: PPUSH
15303: CALL_OW 517
15307: PUSH
15308: LD_INT 2
15310: ARRAY
15311: PUSH
15312: LD_VAR 0 4
15316: ARRAY
15317: PPUSH
15318: LD_INT 5
15320: PPUSH
15321: LD_INT 0
15323: PPUSH
15324: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15328: LD_ADDR_EXP 42
15332: PUSH
15333: LD_EXP 42
15337: PPUSH
15338: LD_INT 1
15340: PPUSH
15341: LD_VAR 0 1
15345: PPUSH
15346: LD_INT 0
15348: PPUSH
15349: CALL_OW 517
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PUSH
15358: LD_VAR 0 4
15362: ARRAY
15363: PUSH
15364: LD_VAR 0 1
15368: PPUSH
15369: LD_INT 0
15371: PPUSH
15372: CALL_OW 517
15376: PUSH
15377: LD_INT 2
15379: ARRAY
15380: PUSH
15381: LD_VAR 0 4
15385: ARRAY
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PPUSH
15391: CALL_OW 2
15395: ST_TO_ADDR
// r := 0 ;
15396: LD_ADDR_VAR 0 5
15400: PUSH
15401: LD_INT 0
15403: ST_TO_ADDR
// x := x + 1 ;
15404: LD_ADDR_VAR 0 6
15408: PUSH
15409: LD_VAR 0 6
15413: PUSH
15414: LD_INT 1
15416: PLUS
15417: ST_TO_ADDR
// end else
15418: GO 15434
// r := r + 35 ;
15420: LD_ADDR_VAR 0 5
15424: PUSH
15425: LD_VAR 0 5
15429: PUSH
15430: LD_INT 35
15432: PLUS
15433: ST_TO_ADDR
// end else
15434: GO 15458
// r := r + rand ( 10 , 25 ) ;
15436: LD_ADDR_VAR 0 5
15440: PUSH
15441: LD_VAR 0 5
15445: PUSH
15446: LD_INT 10
15448: PPUSH
15449: LD_INT 25
15451: PPUSH
15452: CALL_OW 12
15456: PLUS
15457: ST_TO_ADDR
// end ;
15458: GO 15206
15460: POP
15461: POP
15462: GO 15167
// end ; end_of_file
15464: LD_VAR 0 3
15468: RET
// on UnitDestroyed ( unit ) do var i ;
15469: LD_INT 0
15471: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
15472: LD_VAR 0 1
15476: PPUSH
15477: CALL_OW 255
15481: PUSH
15482: LD_INT 3
15484: EQUAL
15485: PUSH
15486: LD_VAR 0 1
15490: PPUSH
15491: CALL_OW 247
15495: PUSH
15496: LD_INT 1
15498: EQUAL
15499: AND
15500: IFFALSE 15564
// begin for i in RuScientists do
15502: LD_ADDR_VAR 0 2
15506: PUSH
15507: LD_EXP 34
15511: PUSH
15512: FOR_IN
15513: IFFALSE 15562
// if i = unit then
15515: LD_VAR 0 2
15519: PUSH
15520: LD_VAR 0 1
15524: EQUAL
15525: IFFALSE 15560
// begin RuScientists = RuScientists diff [ unit ] ;
15527: LD_ADDR_EXP 34
15531: PUSH
15532: LD_EXP 34
15536: PUSH
15537: LD_VAR 0 1
15541: PUSH
15542: EMPTY
15543: LIST
15544: DIFF
15545: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15546: LD_ADDR_EXP 35
15550: PUSH
15551: LD_EXP 35
15555: PUSH
15556: LD_INT 1
15558: PLUS
15559: ST_TO_ADDR
// end ;
15560: GO 15512
15562: POP
15563: POP
// end ; end ;
15564: PPOPN 2
15566: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 10
15574: EQUAL
15575: PUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: CALL_OW 255
15585: PUSH
15586: LD_INT 1
15588: EQUAL
15589: AND
15590: PUSH
15591: LD_EXP 45
15595: PUSH
15596: LD_INT 0
15598: EQUAL
15599: AND
15600: IFFALSE 15701
// begin eventVar1 = 1 ;
15602: LD_ADDR_EXP 45
15606: PUSH
15607: LD_INT 1
15609: ST_TO_ADDR
// teleportExplored = 1 ;
15610: LD_ADDR_EXP 33
15614: PUSH
15615: LD_INT 1
15617: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15618: LD_STRING M2a
15620: PPUSH
15621: CALL_OW 337
// wait ( 0 0$2 ) ;
15625: LD_INT 70
15627: PPUSH
15628: CALL_OW 67
// DialogueOn ;
15632: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15636: LD_INT 22
15638: PUSH
15639: LD_INT 1
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: PPUSH
15649: CALL_OW 69
15653: PPUSH
15654: LD_STRING DT3a-Sol1-1
15656: PPUSH
15657: LD_STRING DT3a-FSol1-1
15659: PPUSH
15660: CALL 12337 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15664: LD_EXP 1
15668: PPUSH
15669: LD_STRING DT3a-JMM-1
15671: PPUSH
15672: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15676: LD_VAR 0 2
15680: PPUSH
15681: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15685: LD_EXP 1
15689: PPUSH
15690: LD_STRING DT3a-JMM-1a
15692: PPUSH
15693: CALL_OW 88
// DialogueOff ;
15697: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
15701: LD_VAR 0 1
15705: PUSH
15706: LD_INT 10
15708: EQUAL
15709: PUSH
15710: LD_VAR 0 2
15714: PPUSH
15715: CALL_OW 247
15719: PUSH
15720: LD_INT 2
15722: EQUAL
15723: AND
15724: PUSH
15725: LD_VAR 0 2
15729: PPUSH
15730: CALL_OW 255
15734: PUSH
15735: LD_INT 3
15737: EQUAL
15738: AND
15739: PUSH
15740: LD_EXP 29
15744: PUSH
15745: LD_INT 0
15747: EQUAL
15748: AND
15749: IFFALSE 15759
// vehicleTeleported = 1 ;
15751: LD_ADDR_EXP 29
15755: PUSH
15756: LD_INT 1
15758: ST_TO_ADDR
// if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
15759: LD_VAR 0 1
15763: PUSH
15764: LD_INT 10
15766: EQUAL
15767: PUSH
15768: LD_VAR 0 2
15772: PPUSH
15773: CALL_OW 247
15777: PUSH
15778: LD_INT 2
15780: EQUAL
15781: AND
15782: PUSH
15783: LD_VAR 0 2
15787: PPUSH
15788: CALL_OW 255
15792: PUSH
15793: LD_INT 3
15795: EQUAL
15796: AND
15797: PUSH
15798: LD_EXP 29
15802: PUSH
15803: LD_INT 2
15805: EQUAL
15806: AND
15807: IFFALSE 15817
// vehicleTeleported = 3 ;
15809: LD_ADDR_EXP 29
15813: PUSH
15814: LD_INT 3
15816: ST_TO_ADDR
// end ;
15817: PPOPN 2
15819: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
15820: LD_VAR 0 2
15824: PUSH
15825: LD_INT 21
15827: EQUAL
15828: PUSH
15829: LD_VAR 0 2
15833: PUSH
15834: LD_INT 112
15836: EQUAL
15837: OR
15838: IFFALSE 15971
// if GetSide ( vehicle ) = 3 then
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 255
15849: PUSH
15850: LD_INT 3
15852: EQUAL
15853: IFFALSE 15971
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
15855: LD_VAR 0 1
15859: PPUSH
15860: CALL_OW 264
15864: PUSH
15865: LD_INT 46
15867: EQUAL
15868: PUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 264
15878: PUSH
15879: LD_INT 45
15881: EQUAL
15882: OR
15883: PUSH
15884: LD_VAR 0 1
15888: PPUSH
15889: CALL_OW 264
15893: PUSH
15894: LD_INT 44
15896: EQUAL
15897: OR
15898: IFFALSE 15928
// begin russianTanks = russianTanks ^ vehicle ;
15900: LD_ADDR_EXP 39
15904: PUSH
15905: LD_EXP 39
15909: PUSH
15910: LD_VAR 0 1
15914: ADD
15915: ST_TO_ADDR
// ComEnterUnit ( vehicle , ruteleprt ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_INT 10
15923: PPUSH
15924: CALL_OW 120
// end ; if GetWeapon ( vehicle ) = 49 then
15928: LD_VAR 0 1
15932: PPUSH
15933: CALL_OW 264
15937: PUSH
15938: LD_INT 49
15940: EQUAL
15941: IFFALSE 15971
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
15943: LD_ADDR_EXP 40
15947: PUSH
15948: LD_EXP 40
15952: PUSH
15953: LD_VAR 0 1
15957: ADD
15958: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
15959: LD_VAR 0 1
15963: PPUSH
15964: LD_INT 137
15966: PPUSH
15967: CALL_OW 120
// end ; end ; end ;
15971: PPOPN 2
15973: END
// on UnitGoesToRed ( unit ) do var i ;
15974: LD_INT 0
15976: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 255
15986: PUSH
15987: LD_INT 3
15989: EQUAL
15990: PUSH
15991: LD_VAR 0 1
15995: PPUSH
15996: CALL_OW 247
16000: PUSH
16001: LD_INT 2
16003: EQUAL
16004: AND
16005: IFFALSE 16123
// begin if russianTanks > 0 then
16007: LD_EXP 39
16011: PUSH
16012: LD_INT 0
16014: GREATER
16015: IFFALSE 16065
// for i in russianTanks do
16017: LD_ADDR_VAR 0 2
16021: PUSH
16022: LD_EXP 39
16026: PUSH
16027: FOR_IN
16028: IFFALSE 16063
// if i = unit then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_VAR 0 1
16039: EQUAL
16040: IFFALSE 16061
// russianTanks = russianTanks diff [ unit ] ;
16042: LD_ADDR_EXP 39
16046: PUSH
16047: LD_EXP 39
16051: PUSH
16052: LD_VAR 0 1
16056: PUSH
16057: EMPTY
16058: LIST
16059: DIFF
16060: ST_TO_ADDR
16061: GO 16027
16063: POP
16064: POP
// if russianTimeLapsers > 0 then
16065: LD_EXP 40
16069: PUSH
16070: LD_INT 0
16072: GREATER
16073: IFFALSE 16123
// for i in russianTimeLapsers do
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_EXP 40
16084: PUSH
16085: FOR_IN
16086: IFFALSE 16121
// if i = unit then
16088: LD_VAR 0 2
16092: PUSH
16093: LD_VAR 0 1
16097: EQUAL
16098: IFFALSE 16119
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
16100: LD_ADDR_EXP 40
16104: PUSH
16105: LD_EXP 40
16109: PUSH
16110: LD_VAR 0 1
16114: PUSH
16115: EMPTY
16116: LIST
16117: DIFF
16118: ST_TO_ADDR
16119: GO 16085
16121: POP
16122: POP
// end ; end ;
16123: PPOPN 2
16125: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16126: LD_VAR 0 2
16130: PPUSH
16131: CALL_OW 255
16135: PUSH
16136: LD_INT 3
16138: EQUAL
16139: PUSH
16140: LD_INT 21
16142: PPUSH
16143: CALL_OW 255
16147: PUSH
16148: LD_INT 3
16150: EQUAL
16151: AND
16152: PUSH
16153: LD_INT 21
16155: PPUSH
16156: CALL_OW 302
16160: AND
16161: IFFALSE 16175
// ComEnterUnit ( human , ru_fact ) ;
16163: LD_VAR 0 2
16167: PPUSH
16168: LD_INT 21
16170: PPUSH
16171: CALL_OW 120
// end ; end_of_file
16175: PPOPN 2
16177: END
// every 0 0$1 trigger ruAI = 1 do
16178: LD_EXP 41
16182: PUSH
16183: LD_INT 1
16185: EQUAL
16186: IFFALSE 16285
16188: GO 16190
16190: DISABLE
// begin enable ;
16191: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16192: LD_INT 3
16194: PPUSH
16195: LD_INT 6
16197: PPUSH
16198: LD_INT 9
16200: PPUSH
16201: LD_EXP 38
16205: PPUSH
16206: CALL 13217 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16210: LD_INT 3
16212: PPUSH
16213: LD_INT 4
16215: PPUSH
16216: LD_INT 10
16218: PPUSH
16219: LD_EXP 38
16223: PPUSH
16224: CALL 13217 0 4
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16228: LD_INT 3
16230: PPUSH
16231: LD_INT 16
16233: PPUSH
16234: LD_INT 9
16236: PPUSH
16237: LD_INT 91
16239: PPUSH
16240: CALL 13608 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16244: LD_INT 3
16246: PPUSH
16247: LD_INT 17
16249: PPUSH
16250: LD_INT 10
16252: PPUSH
16253: LD_INT 47
16255: PUSH
16256: LD_INT 129
16258: PUSH
16259: LD_INT 135
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL 13608 0 4
// AttackVehicles ( 3 ) ;
16271: LD_INT 3
16273: PPUSH
16274: CALL 14335 0 1
// IntBazooka ( 3 ) ;
16278: LD_INT 3
16280: PPUSH
16281: CALL 14817 0 1
// end ;
16285: END
// every 0 0$1 do
16286: GO 16288
16288: DISABLE
// begin enable ;
16289: ENABLE
// TimeLapsersAI ( 3 ) ;
16290: LD_INT 3
16292: PPUSH
16293: CALL 14633 0 1
// end ;
16297: END
// every 0 0$1 do
16298: GO 16300
16300: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16301: LD_INT 3
16303: PPUSH
16304: LD_INT 91
16306: PPUSH
16307: LD_INT 3
16309: PPUSH
16310: CALL 13132 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16314: LD_INT 3
16316: PPUSH
16317: LD_INT 47
16319: PPUSH
16320: LD_INT 3
16322: PPUSH
16323: CALL 13132 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16327: LD_INT 3
16329: PPUSH
16330: LD_INT 129
16332: PPUSH
16333: LD_INT 3
16335: PPUSH
16336: CALL 13132 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16340: LD_INT 3
16342: PPUSH
16343: LD_INT 3
16345: PPUSH
16346: LD_INT 3
16348: PPUSH
16349: CALL 13132 0 3
// end ;
16353: END
// every 5 5$0 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16354: LD_EXP 28
16358: PUSH
16359: LD_INT 2
16361: EQUAL
16362: PUSH
16363: LD_INT 22
16365: PUSH
16366: LD_INT 3
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 21
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 50
16385: PUSH
16386: EMPTY
16387: LIST
16388: PUSH
16389: LD_INT 3
16391: PUSH
16392: LD_INT 58
16394: PUSH
16395: EMPTY
16396: LIST
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: PPUSH
16408: CALL_OW 69
16412: PUSH
16413: LD_INT 18
16415: PPUSH
16416: LD_INT 22
16418: PUSH
16419: LD_INT 3
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 21
16428: PUSH
16429: LD_INT 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PPUSH
16440: CALL_OW 70
16444: PUSH
16445: LD_INT 0
16447: EQUAL
16448: DIFF
16449: AND
16450: IFFALSE 16568
16452: GO 16454
16454: DISABLE
// begin enable ;
16455: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16456: LD_INT 3
16458: PPUSH
16459: LD_INT 21
16461: PPUSH
16462: LD_INT 3
16464: PUSH
16465: LD_INT 4
16467: PUSH
16468: LD_INT 4
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: PUSH
16476: LD_OWVAR 67
16480: ARRAY
16481: PPUSH
16482: LD_INT 46
16484: PUSH
16485: LD_INT 45
16487: PUSH
16488: LD_INT 44
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: PPUSH
16496: LD_INT 3
16498: PPUSH
16499: LD_INT 3
16501: PPUSH
16502: LD_INT 24
16504: PPUSH
16505: CALL 14188 0 7
// if russianTimeLapsers = 0 then
16509: LD_EXP 40
16513: PUSH
16514: LD_INT 0
16516: EQUAL
16517: IFFALSE 16568
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
16519: LD_INT 3
16521: PPUSH
16522: LD_INT 112
16524: PPUSH
16525: LD_INT 1
16527: PUSH
16528: LD_INT 2
16530: PUSH
16531: LD_INT 2
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: PUSH
16539: LD_OWVAR 67
16543: ARRAY
16544: PPUSH
16545: LD_INT 49
16547: PUSH
16548: LD_INT 49
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PPUSH
16555: LD_INT 3
16557: PPUSH
16558: LD_INT 3
16560: PPUSH
16561: LD_INT 24
16563: PPUSH
16564: CALL 14188 0 7
// end ;
16568: END
// every 0 0$1 trigger arabianMines do var i ;
16569: LD_EXP 42
16573: IFFALSE 16694
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
// begin enable ;
16581: ENABLE
// for i in arabianMines do
16582: LD_ADDR_VAR 0 1
16586: PUSH
16587: LD_EXP 42
16591: PUSH
16592: FOR_IN
16593: IFFALSE 16692
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
16595: LD_INT 22
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 92
16607: PUSH
16608: LD_VAR 0 1
16612: PUSH
16613: LD_INT 1
16615: ARRAY
16616: PUSH
16617: LD_VAR 0 1
16621: PUSH
16622: LD_INT 2
16624: ARRAY
16625: PUSH
16626: LD_INT 3
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PPUSH
16639: CALL_OW 69
16643: IFFALSE 16690
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
16645: LD_VAR 0 1
16649: PUSH
16650: LD_INT 1
16652: ARRAY
16653: PPUSH
16654: LD_VAR 0 1
16658: PUSH
16659: LD_INT 2
16661: ARRAY
16662: PPUSH
16663: LD_INT 5
16665: PPUSH
16666: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
16670: LD_ADDR_EXP 42
16674: PUSH
16675: LD_EXP 42
16679: PPUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 3
16689: ST_TO_ADDR
// end ; end ;
16690: GO 16592
16692: POP
16693: POP
// end ; end_of_file
16694: PPOPN 1
16696: END
// every 0 0$1 trigger RuScientists = [ ] do
16697: LD_EXP 34
16701: PUSH
16702: EMPTY
16703: EQUAL
16704: IFFALSE 16909
16706: GO 16708
16708: DISABLE
// begin if sciCounter = 0 then
16709: LD_EXP 35
16713: PUSH
16714: LD_INT 0
16716: EQUAL
16717: IFFALSE 16743
// begin Say ( JMM , D7a-JMM-1 ) ;
16719: LD_EXP 1
16723: PPUSH
16724: LD_STRING D7a-JMM-1
16726: PPUSH
16727: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
16731: LD_EXP 22
16735: PPUSH
16736: LD_STRING D7a-Pow-1
16738: PPUSH
16739: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
16743: LD_EXP 35
16747: PUSH
16748: LD_INT 0
16750: GREATER
16751: PUSH
16752: LD_EXP 35
16756: PUSH
16757: LD_INT 6
16759: LESS
16760: AND
16761: IFFALSE 16787
// begin Say ( JMM , D7b-JMM-1 ) ;
16763: LD_EXP 1
16767: PPUSH
16768: LD_STRING D7b-JMM-1
16770: PPUSH
16771: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
16775: LD_EXP 22
16779: PPUSH
16780: LD_STRING D7b-Pow-1
16782: PPUSH
16783: CALL_OW 94
// end ; if sciCounter = 6 then
16787: LD_EXP 35
16791: PUSH
16792: LD_INT 6
16794: EQUAL
16795: IFFALSE 16905
// begin Say ( JMM , D7c-JMM-1 ) ;
16797: LD_EXP 1
16801: PPUSH
16802: LD_STRING D7c-JMM-1
16804: PPUSH
16805: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
16809: LD_EXP 22
16813: PPUSH
16814: LD_STRING D7c-Pow-1
16816: PPUSH
16817: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
16821: LD_EXP 1
16825: PPUSH
16826: LD_STRING D7d-JMM-1
16828: PPUSH
16829: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
16833: LD_EXP 22
16837: PPUSH
16838: LD_STRING D7d-Pow-1
16840: PPUSH
16841: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
16845: LD_EXP 1
16849: PPUSH
16850: LD_STRING D7d-JMM-2
16852: PPUSH
16853: CALL_OW 88
// if askSiberite = 1 then
16857: LD_EXP 32
16861: PUSH
16862: LD_INT 1
16864: EQUAL
16865: IFFALSE 16881
// begin Say ( JMM , D7d-JMM-2a ) ;
16867: LD_EXP 1
16871: PPUSH
16872: LD_STRING D7d-JMM-2a
16874: PPUSH
16875: CALL_OW 88
// end else
16879: GO 16893
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
16881: LD_EXP 22
16885: PPUSH
16886: LD_STRING D7d-Pow-2
16888: PPUSH
16889: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
16893: LD_EXP 22
16897: PPUSH
16898: LD_STRING D7d-Pow-2a
16900: PPUSH
16901: CALL_OW 94
// end ; FinishMission ;
16905: CALL 16910 0 0
// end ;
16909: END
// export function FinishMission ; begin
16910: LD_INT 0
16912: PPUSH
// if teleportExplored = 1 then
16913: LD_EXP 33
16917: PUSH
16918: LD_INT 1
16920: EQUAL
16921: IFFALSE 16935
// AddMedal ( Teleport , 1 ) else
16923: LD_STRING Teleport
16925: PPUSH
16926: LD_INT 1
16928: PPUSH
16929: CALL_OW 101
16933: GO 16946
// AddMedal ( Teleport , - 1 ) ;
16935: LD_STRING Teleport
16937: PPUSH
16938: LD_INT 1
16940: NEG
16941: PPUSH
16942: CALL_OW 101
// if sciCounter > 2 then
16946: LD_EXP 35
16950: PUSH
16951: LD_INT 2
16953: GREATER
16954: IFFALSE 16968
// AddMedal ( Materials , 1 ) else
16956: LD_STRING Materials
16958: PPUSH
16959: LD_INT 1
16961: PPUSH
16962: CALL_OW 101
16966: GO 16979
// AddMedal ( Materials , - 1 ) ;
16968: LD_STRING Materials
16970: PPUSH
16971: LD_INT 1
16973: NEG
16974: PPUSH
16975: CALL_OW 101
// if sciCounter = 6 then
16979: LD_EXP 35
16983: PUSH
16984: LD_INT 6
16986: EQUAL
16987: IFFALSE 17011
// begin AddMedal ( Scientists , 1 ) ;
16989: LD_STRING Scientists
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
16999: LD_INT 1
17001: PPUSH
17002: LD_STRING 12_SciDed_1
17004: PPUSH
17005: CALL_OW 39
// end else
17009: GO 17032
// begin AddMedal ( Scientists , - 1 ) ;
17011: LD_STRING Scientists
17013: PPUSH
17014: LD_INT 1
17016: NEG
17017: PPUSH
17018: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17022: LD_INT 0
17024: PPUSH
17025: LD_STRING 12_SciDed_1
17027: PPUSH
17028: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17032: LD_EXP 31
17036: PPUSH
17037: LD_STRING 12_MainDepositFake_1
17039: PPUSH
17040: CALL_OW 39
// GiveMedals ( MAIN ) ;
17044: LD_STRING MAIN
17046: PPUSH
17047: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17051: LD_INT 22
17053: PUSH
17054: LD_INT 1
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 21
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: LD_INT 25
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 25
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 25
17096: PUSH
17097: LD_INT 3
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 25
17106: PUSH
17107: LD_INT 4
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 25
17116: PUSH
17117: LD_INT 5
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 25
17126: PUSH
17127: LD_INT 8
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: PPUSH
17148: CALL_OW 69
17152: PPUSH
17153: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
17157: LD_EXP 1
17161: PPUSH
17162: LD_EXP 44
17166: PUSH
17167: LD_STRING JMM
17169: STR
17170: PPUSH
17171: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
17175: LD_EXP 7
17179: PPUSH
17180: LD_EXP 44
17184: PUSH
17185: LD_STRING Brown
17187: STR
17188: PPUSH
17189: CALL 12286 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
17193: LD_EXP 3
17197: PPUSH
17198: LD_EXP 44
17202: PUSH
17203: LD_STRING Donaldson
17205: STR
17206: PPUSH
17207: CALL 12286 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
17211: LD_EXP 4
17215: PPUSH
17216: LD_EXP 44
17220: PUSH
17221: LD_STRING Bobby
17223: STR
17224: PPUSH
17225: CALL 12286 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
17229: LD_EXP 5
17233: PPUSH
17234: LD_EXP 44
17238: PUSH
17239: LD_STRING Cyrus
17241: STR
17242: PPUSH
17243: CALL 12286 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
17247: LD_EXP 2
17251: PPUSH
17252: LD_EXP 44
17256: PUSH
17257: LD_STRING Lisa
17259: STR
17260: PPUSH
17261: CALL 12286 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
17265: LD_EXP 12
17269: PPUSH
17270: LD_EXP 44
17274: PUSH
17275: LD_STRING Frank
17277: STR
17278: PPUSH
17279: CALL 12286 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
17283: LD_EXP 13
17287: PPUSH
17288: LD_EXP 44
17292: PUSH
17293: LD_STRING Kikuchi
17295: STR
17296: PPUSH
17297: CALL 12286 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
17301: LD_EXP 9
17305: PPUSH
17306: LD_EXP 44
17310: PUSH
17311: LD_STRING Houten
17313: STR
17314: PPUSH
17315: CALL 12286 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
17319: LD_EXP 11
17323: PPUSH
17324: LD_EXP 44
17328: PUSH
17329: LD_STRING Gary
17331: STR
17332: PPUSH
17333: CALL 12286 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
17337: LD_EXP 10
17341: PPUSH
17342: LD_EXP 44
17346: PUSH
17347: LD_STRING Cornell
17349: STR
17350: PPUSH
17351: CALL 12286 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
17355: LD_EXP 6
17359: PPUSH
17360: LD_EXP 44
17364: PUSH
17365: LD_STRING Denis
17367: STR
17368: PPUSH
17369: CALL 12286 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
17373: LD_EXP 8
17377: PPUSH
17378: LD_EXP 44
17382: PUSH
17383: LD_STRING Gladstone
17385: STR
17386: PPUSH
17387: CALL 12286 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
17391: LD_INT 50
17393: PUSH
17394: EMPTY
17395: LIST
17396: PUSH
17397: LD_INT 22
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 21
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 2
17419: PUSH
17420: LD_INT 25
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 25
17432: PUSH
17433: LD_INT 2
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 25
17442: PUSH
17443: LD_INT 3
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 25
17452: PUSH
17453: LD_INT 4
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 25
17462: PUSH
17463: LD_INT 5
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 25
17472: PUSH
17473: LD_INT 8
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: PPUSH
17495: CALL_OW 69
17499: PUSH
17500: LD_EXP 1
17504: PUSH
17505: LD_EXP 7
17509: PUSH
17510: LD_EXP 3
17514: PUSH
17515: LD_EXP 4
17519: PUSH
17520: LD_EXP 5
17524: PUSH
17525: LD_EXP 2
17529: PUSH
17530: LD_EXP 12
17534: PUSH
17535: LD_EXP 8
17539: PUSH
17540: LD_EXP 13
17544: PUSH
17545: LD_EXP 6
17549: PUSH
17550: LD_EXP 9
17554: PUSH
17555: LD_EXP 11
17559: PUSH
17560: LD_EXP 10
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: DIFF
17580: PPUSH
17581: LD_STRING 12_other_survivors
17583: PPUSH
17584: CALL_OW 38
// YouWin ;
17588: CALL_OW 103
// end ; end_of_file
17592: LD_VAR 0 1
17596: RET
// every 0 0$1 trigger IsDead ( JMM ) do
17597: LD_EXP 1
17601: PPUSH
17602: CALL_OW 301
17606: IFFALSE 17618
17608: GO 17610
17610: DISABLE
// YouLost ( JMM ) ; end_of_file
17611: LD_STRING JMM
17613: PPUSH
17614: CALL_OW 104
17618: END
// every 0 0$30 do
17619: GO 17621
17621: DISABLE
// begin enable ;
17622: ENABLE
// if cratesSpawned < 6 then
17623: LD_EXP 43
17627: PUSH
17628: LD_INT 6
17630: LESS
17631: IFFALSE 17668
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
17633: LD_INT 3
17635: PPUSH
17636: LD_INT 5
17638: PPUSH
17639: CALL_OW 12
17643: PPUSH
17644: LD_INT 21
17646: PPUSH
17647: LD_INT 1
17649: PPUSH
17650: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
17654: LD_ADDR_EXP 43
17658: PUSH
17659: LD_EXP 43
17663: PUSH
17664: LD_INT 1
17666: PLUS
17667: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
17668: LD_EXP 43
17672: PUSH
17673: LD_INT 6
17675: GREATEREQUAL
17676: PUSH
17677: LD_EXP 43
17681: PUSH
17682: LD_INT 12
17684: LESS
17685: AND
17686: IFFALSE 17730
// begin wait ( 0 0$30 ) ;
17688: LD_INT 1050
17690: PPUSH
17691: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
17695: LD_INT 3
17697: PPUSH
17698: LD_INT 5
17700: PPUSH
17701: CALL_OW 12
17705: PPUSH
17706: LD_INT 21
17708: PPUSH
17709: LD_INT 1
17711: PPUSH
17712: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
17716: LD_ADDR_EXP 43
17720: PUSH
17721: LD_EXP 43
17725: PUSH
17726: LD_INT 1
17728: PLUS
17729: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 15 then
17730: LD_EXP 43
17734: PUSH
17735: LD_INT 12
17737: GREATEREQUAL
17738: PUSH
17739: LD_EXP 43
17743: PUSH
17744: LD_INT 15
17746: LESS
17747: AND
17748: IFFALSE 17792
// begin wait ( 1 1$30 ) ;
17750: LD_INT 3150
17752: PPUSH
17753: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
17757: LD_INT 3
17759: PPUSH
17760: LD_INT 5
17762: PPUSH
17763: CALL_OW 12
17767: PPUSH
17768: LD_INT 21
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
17778: LD_ADDR_EXP 43
17782: PUSH
17783: LD_EXP 43
17787: PUSH
17788: LD_INT 1
17790: PLUS
17791: ST_TO_ADDR
// end ; if cratesSpawned >= 15 then
17792: LD_EXP 43
17796: PUSH
17797: LD_INT 15
17799: GREATEREQUAL
17800: IFFALSE 17803
// disable ;
17802: DISABLE
// end ;
17803: END
