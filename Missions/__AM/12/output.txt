// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17228 0 0
// PrepareDifficulty ;
 195: CALL 13608 0 0
// PrepareVehicles ;
 199: CALL 1547 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1123 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2923 0 0
// PrepareWestBase ;
 227: CALL 3435 0 0
// PrepareEastBase ;
 231: CALL 2995 0 0
// PrepareOtherRussians ;
 235: CALL 3547 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11c_others
 575: PPUSH
 576: CALL_OW 31
 580: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 581: LD_ADDR_EXP 1
 585: PUSH
 586: LD_STRING 11_JMM
 588: PPUSH
 589: LD_INT 1
 591: PPUSH
 592: CALL 13247 0 2
 596: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 597: LD_EXP 1
 601: PPUSH
 602: LD_INT 1
 604: PPUSH
 605: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 609: LD_EXP 1
 613: PPUSH
 614: LD_INT 22
 616: PUSH
 617: LD_INT 1
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 21
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 58
 636: PUSH
 637: EMPTY
 638: LIST
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: PPUSH
 645: CALL_OW 69
 649: PUSH
 650: LD_INT 1
 652: ARRAY
 653: PPUSH
 654: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 658: LD_STRING 11_Lisa
 660: PPUSH
 661: CALL_OW 28
 665: PUSH
 666: LD_INT 1
 668: EQUAL
 669: IFFALSE 716
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 671: LD_ADDR_EXP 2
 675: PUSH
 676: LD_STRING 11_Lisa
 678: PPUSH
 679: LD_INT 1
 681: PPUSH
 682: CALL 13247 0 2
 686: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 687: LD_EXP 2
 691: PPUSH
 692: LD_INT 1
 694: PPUSH
 695: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 699: LD_EXP 2
 703: PPUSH
 704: LD_INT 4
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: CALL_OW 49
// end else
 714: GO 732
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 716: LD_INT 4
 718: PPUSH
 719: LD_INT 0
 721: PPUSH
 722: LD_INT 1
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: CALL 1123 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 732: LD_STRING 11_Donaldson
 734: PPUSH
 735: CALL_OW 28
 739: PUSH
 740: LD_INT 1
 742: EQUAL
 743: IFFALSE 790
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 745: LD_ADDR_EXP 3
 749: PUSH
 750: LD_STRING 11_Donaldson
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 13247 0 2
 760: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 761: LD_EXP 3
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 773: LD_EXP 3
 777: PPUSH
 778: LD_INT 4
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end else
 788: GO 806
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 790: LD_INT 4
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL 1123 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 806: LD_STRING 11_Cyrus
 808: PPUSH
 809: CALL_OW 28
 813: PUSH
 814: LD_INT 1
 816: EQUAL
 817: IFFALSE 864
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 819: LD_ADDR_EXP 5
 823: PUSH
 824: LD_STRING 11_Cyrus
 826: PPUSH
 827: LD_INT 1
 829: PPUSH
 830: CALL 13247 0 2
 834: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 835: LD_EXP 5
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 847: LD_EXP 5
 851: PPUSH
 852: LD_INT 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// end else
 862: GO 880
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 864: LD_INT 4
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL 1123 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 880: LD_STRING 11_Denis
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_INT 1
 890: EQUAL
 891: IFFALSE 938
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 893: LD_ADDR_EXP 6
 897: PUSH
 898: LD_STRING 11_Denis
 900: PPUSH
 901: LD_INT 1
 903: PPUSH
 904: CALL 13247 0 2
 908: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 909: LD_EXP 6
 913: PPUSH
 914: LD_INT 4
 916: PPUSH
 917: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_INT 4
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end else
 936: GO 954
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 938: LD_INT 4
 940: PPUSH
 941: LD_INT 0
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL 1123 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 954: LD_STRING 11_Frank
 956: PPUSH
 957: CALL_OW 28
 961: PUSH
 962: LD_INT 1
 964: EQUAL
 965: IFFALSE 1012
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 967: LD_ADDR_EXP 12
 971: PUSH
 972: LD_STRING 11_Frank
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL 13247 0 2
 982: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 983: LD_EXP 12
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 995: LD_EXP 12
 999: PPUSH
1000: LD_INT 4
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: CALL_OW 49
// end else
1010: GO 1028
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1012: LD_INT 4
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL 1123 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1028: LD_STRING 11_Cornell
1030: PPUSH
1031: CALL_OW 28
1035: PUSH
1036: LD_INT 1
1038: EQUAL
1039: IFFALSE 1086
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1041: LD_ADDR_EXP 10
1045: PUSH
1046: LD_STRING 11_Cornell
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: CALL 13247 0 2
1056: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1057: LD_EXP 10
1061: PPUSH
1062: LD_INT 1
1064: PPUSH
1065: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1069: LD_EXP 10
1073: PPUSH
1074: LD_INT 4
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL_OW 49
// end else
1084: GO 1102
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1086: LD_INT 4
1088: PPUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL 1123 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1102: LD_ADDR_EXP 22
1106: PUSH
1107: LD_STRING Powell
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL 13247 0 2
1117: ST_TO_ADDR
// end ;
1118: LD_VAR 0 1
1122: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1123: LD_INT 0
1125: PPUSH
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
// if mech = 1 then
1130: LD_VAR 0 4
1134: PUSH
1135: LD_INT 1
1137: EQUAL
1138: IFFALSE 1373
// begin if others11 > 0 then
1140: LD_EXP 14
1144: PUSH
1145: LD_INT 0
1147: GREATER
1148: IFFALSE 1313
// begin for i := 1 to others11 - 1 do
1150: LD_ADDR_VAR 0 6
1154: PUSH
1155: DOUBLE
1156: LD_INT 1
1158: DEC
1159: ST_TO_ADDR
1160: LD_EXP 14
1164: PUSH
1165: LD_INT 1
1167: MINUS
1168: PUSH
1169: FOR_TO
1170: IFFALSE 1250
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1172: LD_EXP 14
1176: PUSH
1177: LD_VAR 0 6
1181: ARRAY
1182: PPUSH
1183: LD_INT 3
1185: PPUSH
1186: CALL_OW 259
1190: PUSH
1191: LD_EXP 14
1195: PUSH
1196: LD_VAR 0 6
1200: PUSH
1201: LD_INT 1
1203: PLUS
1204: ARRAY
1205: PPUSH
1206: LD_INT 3
1208: PPUSH
1209: CALL_OW 259
1213: LESS
1214: IFFALSE 1248
// begin mecha = others11 [ i + 1 ] ;
1216: LD_ADDR_VAR 0 9
1220: PUSH
1221: LD_EXP 14
1225: PUSH
1226: LD_VAR 0 6
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1236: LD_VAR 0 9
1240: PPUSH
1241: LD_INT 3
1243: PPUSH
1244: CALL_OW 336
// end ; end ;
1248: GO 1169
1250: POP
1251: POP
// if spawnMode = 1 then
1252: LD_VAR 0 3
1256: PUSH
1257: LD_INT 1
1259: EQUAL
1260: IFFALSE 1281
// PlaceUnitArea ( mecha , area , false ) else
1262: LD_VAR 0 9
1266: PPUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: LD_INT 0
1274: PPUSH
1275: CALL_OW 49
1279: GO 1295
// PlaceHumanInUnit ( mecha , veh ) ;
1281: LD_VAR 0 9
1285: PPUSH
1286: LD_VAR 0 2
1290: PPUSH
1291: CALL_OW 52
// others11 = others11 diff mecha ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 9
1309: DIFF
1310: ST_TO_ADDR
// end else
1311: GO 1371
// begin hc_name =  ;
1313: LD_ADDR_OWVAR 26
1317: PUSH
1318: LD_STRING 
1320: ST_TO_ADDR
// hc_gallery =  ;
1321: LD_ADDR_OWVAR 33
1325: PUSH
1326: LD_STRING 
1328: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 7
1334: PPUSH
1335: LD_INT 9
1337: PPUSH
1338: CALL_OW 12
1342: PPUSH
1343: CALL_OW 383
// un = CreateHuman ;
1347: LD_ADDR_VAR 0 7
1351: PUSH
1352: CALL_OW 44
1356: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1357: LD_VAR 0 7
1361: PPUSH
1362: LD_VAR 0 2
1366: PPUSH
1367: CALL_OW 52
// end ; end else
1371: GO 1542
// begin if others11 > 0 then
1373: LD_EXP 14
1377: PUSH
1378: LD_INT 0
1380: GREATER
1381: IFFALSE 1454
// begin if spawnMode = 1 then
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: EQUAL
1391: IFFALSE 1416
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1393: LD_EXP 14
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PPUSH
1402: LD_VAR 0 1
1406: PPUSH
1407: LD_INT 0
1409: PPUSH
1410: CALL_OW 49
1414: GO 1434
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1416: LD_EXP 14
1420: PUSH
1421: LD_INT 1
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 2
1429: PPUSH
1430: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1434: LD_ADDR_EXP 14
1438: PUSH
1439: LD_EXP 14
1443: PPUSH
1444: LD_INT 1
1446: PPUSH
1447: CALL_OW 3
1451: ST_TO_ADDR
// end else
1452: GO 1542
// begin hc_name =  ;
1454: LD_ADDR_OWVAR 26
1458: PUSH
1459: LD_STRING 
1461: ST_TO_ADDR
// hc_gallery =  ;
1462: LD_ADDR_OWVAR 33
1466: PUSH
1467: LD_STRING 
1469: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1470: LD_INT 0
1472: PPUSH
1473: LD_INT 1
1475: PUSH
1476: LD_INT 2
1478: PUSH
1479: LD_INT 3
1481: PUSH
1482: LD_INT 4
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: PUSH
1491: LD_INT 1
1493: PPUSH
1494: LD_INT 4
1496: PPUSH
1497: CALL_OW 12
1501: ARRAY
1502: PPUSH
1503: LD_INT 7
1505: PPUSH
1506: LD_INT 9
1508: PPUSH
1509: CALL_OW 12
1513: PPUSH
1514: CALL_OW 380
// un = CreateHuman ;
1518: LD_ADDR_VAR 0 7
1522: PUSH
1523: CALL_OW 44
1527: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1528: LD_VAR 0 7
1532: PPUSH
1533: LD_VAR 0 2
1537: PPUSH
1538: CALL_OW 52
// end ; end ; end ;
1542: LD_VAR 0 5
1546: RET
// export function PrepareVehicles ; var veh ; begin
1547: LD_INT 0
1549: PPUSH
1550: PPUSH
// uc_side = 1 ;
1551: LD_ADDR_OWVAR 20
1555: PUSH
1556: LD_INT 1
1558: ST_TO_ADDR
// uc_nation = 1 ;
1559: LD_ADDR_OWVAR 21
1563: PUSH
1564: LD_INT 1
1566: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1567: LD_ADDR_OWVAR 37
1571: PUSH
1572: LD_INT 3
1574: ST_TO_ADDR
// vc_engine = 3 ;
1575: LD_ADDR_OWVAR 39
1579: PUSH
1580: LD_INT 3
1582: ST_TO_ADDR
// vc_control = 3 ;
1583: LD_ADDR_OWVAR 38
1587: PUSH
1588: LD_INT 3
1590: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1591: LD_ADDR_OWVAR 40
1595: PUSH
1596: LD_INT 4
1598: ST_TO_ADDR
// veh = CreateVehicle ;
1599: LD_ADDR_VAR 0 2
1603: PUSH
1604: CALL_OW 45
1608: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1609: LD_VAR 0 2
1613: PPUSH
1614: LD_INT 4
1616: PPUSH
1617: LD_INT 0
1619: PPUSH
1620: CALL_OW 49
// vc_weapon = us_double_gun ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 5
1631: ST_TO_ADDR
// vc_control = 1 ;
1632: LD_ADDR_OWVAR 38
1636: PUSH
1637: LD_INT 1
1639: ST_TO_ADDR
// veh = CreateVehicle ;
1640: LD_ADDR_VAR 0 2
1644: PUSH
1645: CALL_OW 45
1649: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1650: LD_VAR 0 2
1654: PPUSH
1655: LD_INT 4
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 49
// vc_weapon = us_light_gun ;
1665: LD_ADDR_OWVAR 40
1669: PUSH
1670: LD_INT 3
1672: ST_TO_ADDR
// vc_control = 3 ;
1673: LD_ADDR_OWVAR 38
1677: PUSH
1678: LD_INT 3
1680: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1681: LD_ADDR_OWVAR 37
1685: PUSH
1686: LD_INT 2
1688: ST_TO_ADDR
// veh = CreateVehicle ;
1689: LD_ADDR_VAR 0 2
1693: PUSH
1694: CALL_OW 45
1698: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1699: LD_VAR 0 2
1703: PPUSH
1704: LD_INT 4
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1714: LD_ADDR_OWVAR 40
1718: PUSH
1719: LD_INT 4
1721: ST_TO_ADDR
// veh = CreateVehicle ;
1722: LD_ADDR_VAR 0 2
1726: PUSH
1727: CALL_OW 45
1731: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1732: LD_VAR 0 2
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// end ;
1747: LD_VAR 0 1
1751: RET
// export function PowellSupport1 ; var veh , un ; begin
1752: LD_INT 0
1754: PPUSH
1755: PPUSH
1756: PPUSH
// uc_side = 1 ;
1757: LD_ADDR_OWVAR 20
1761: PUSH
1762: LD_INT 1
1764: ST_TO_ADDR
// uc_nation = 1 ;
1765: LD_ADDR_OWVAR 21
1769: PUSH
1770: LD_INT 1
1772: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1773: LD_STRING 11_Brown
1775: PPUSH
1776: CALL_OW 28
1780: PUSH
1781: LD_INT 1
1783: EQUAL
1784: IFFALSE 1831
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1786: LD_ADDR_EXP 7
1790: PUSH
1791: LD_STRING 11_Brown
1793: PPUSH
1794: LD_INT 1
1796: PPUSH
1797: CALL 13247 0 2
1801: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1802: LD_EXP 7
1806: PPUSH
1807: LD_INT 2
1809: PPUSH
1810: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1814: LD_EXP 7
1818: PPUSH
1819: LD_INT 4
1821: PPUSH
1822: LD_INT 0
1824: PPUSH
1825: CALL_OW 49
// end else
1829: GO 1847
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1831: LD_INT 4
1833: PPUSH
1834: LD_INT 0
1836: PPUSH
1837: LD_INT 1
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL 1123 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1847: LD_STRING 11_Gary
1849: PPUSH
1850: CALL_OW 28
1854: PUSH
1855: LD_INT 1
1857: EQUAL
1858: IFFALSE 1905
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1860: LD_ADDR_EXP 11
1864: PUSH
1865: LD_STRING 11_Gary
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: CALL 13247 0 2
1875: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1876: LD_EXP 11
1880: PPUSH
1881: LD_INT 2
1883: PPUSH
1884: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1888: LD_EXP 11
1892: PPUSH
1893: LD_INT 4
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// end else
1903: GO 1921
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1905: LD_INT 4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL 1123 0 4
// end ; vc_chassis = us_medium_tracked ;
1921: LD_ADDR_OWVAR 37
1925: PUSH
1926: LD_INT 3
1928: ST_TO_ADDR
// vc_engine = 3 ;
1929: LD_ADDR_OWVAR 39
1933: PUSH
1934: LD_INT 3
1936: ST_TO_ADDR
// vc_control = 1 ;
1937: LD_ADDR_OWVAR 38
1941: PUSH
1942: LD_INT 1
1944: ST_TO_ADDR
// vc_weapon = us_crane ;
1945: LD_ADDR_OWVAR 40
1949: PUSH
1950: LD_INT 13
1952: ST_TO_ADDR
// veh = CreateVehicle ;
1953: LD_ADDR_VAR 0 2
1957: PUSH
1958: CALL_OW 45
1962: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1963: LD_VAR 0 2
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_INT 4
1982: PPUSH
1983: LD_INT 0
1985: PPUSH
1986: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
1990: LD_INT 4
1992: PPUSH
1993: LD_VAR 0 2
1997: PPUSH
1998: LD_INT 2
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: CALL 1123 0 4
// vc_weapon = 9 ;
2008: LD_ADDR_OWVAR 40
2012: PUSH
2013: LD_INT 9
2015: ST_TO_ADDR
// veh = CreateVehicle ;
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: CALL_OW 45
2025: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2026: LD_VAR 0 2
2030: PPUSH
2031: LD_INT 4
2033: PPUSH
2034: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2038: LD_VAR 0 2
2042: PPUSH
2043: LD_INT 4
2045: PPUSH
2046: LD_INT 0
2048: PPUSH
2049: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2053: LD_INT 4
2055: PPUSH
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 2
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 1123 0 4
// vc_control = 3 ;
2071: LD_ADDR_OWVAR 38
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2079: LD_ADDR_OWVAR 40
2083: PUSH
2084: LD_INT 12
2086: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2087: LD_ADDR_EXP 15
2091: PUSH
2092: CALL_OW 45
2096: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2097: LD_ADDR_EXP 16
2101: PUSH
2102: CALL_OW 45
2106: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2107: LD_EXP 15
2111: PPUSH
2112: LD_INT 4
2114: PPUSH
2115: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2119: LD_EXP 16
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2131: LD_EXP 15
2135: PPUSH
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2146: LD_EXP 16
2150: PPUSH
2151: LD_INT 4
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2161: LD_EXP 15
2165: PPUSH
2166: LD_INT 3
2168: PPUSH
2169: LD_INT 100
2171: PPUSH
2172: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2176: LD_EXP 16
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: LD_INT 80
2186: PPUSH
2187: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2191: LD_EXP 16
2195: PPUSH
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 20
2201: PPUSH
2202: CALL_OW 291
// end ;
2206: LD_VAR 0 1
2210: RET
// export function PowellSupport2 ; var veh , un ; begin
2211: LD_INT 0
2213: PPUSH
2214: PPUSH
2215: PPUSH
// uc_side = 1 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// uc_nation = 1 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2232: LD_ADDR_OWVAR 37
2236: PUSH
2237: LD_INT 2
2239: ST_TO_ADDR
// vc_engine = 3 ;
2240: LD_ADDR_OWVAR 39
2244: PUSH
2245: LD_INT 3
2247: ST_TO_ADDR
// vc_control = 3 ;
2248: LD_ADDR_OWVAR 38
2252: PUSH
2253: LD_INT 3
2255: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2256: LD_ADDR_OWVAR 40
2260: PUSH
2261: LD_INT 3
2263: ST_TO_ADDR
// veh = CreateVehicle ;
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: CALL_OW 45
2273: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 4
2281: PPUSH
2282: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2286: LD_VAR 0 2
2290: PPUSH
2291: LD_INT 4
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 49
// vc_control = 1 ;
2301: LD_ADDR_OWVAR 38
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2309: LD_ADDR_OWVAR 37
2313: PUSH
2314: LD_INT 2
2316: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2317: LD_ADDR_OWVAR 40
2321: PUSH
2322: LD_INT 5
2324: ST_TO_ADDR
// veh = CreateVehicle ;
2325: LD_ADDR_VAR 0 2
2329: PUSH
2330: CALL_OW 45
2334: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2335: LD_VAR 0 2
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2347: LD_VAR 0 2
2351: PPUSH
2352: LD_INT 4
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2362: LD_STRING 11_Bobby
2364: PPUSH
2365: CALL_OW 28
2369: PUSH
2370: LD_INT 1
2372: EQUAL
2373: IFFALSE 2419
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2375: LD_ADDR_EXP 4
2379: PUSH
2380: LD_STRING 11_Bobby
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: CALL 13247 0 2
2390: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2391: LD_EXP 4
2395: PPUSH
2396: LD_INT 3
2398: PPUSH
2399: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2403: LD_EXP 4
2407: PPUSH
2408: LD_VAR 0 2
2412: PPUSH
2413: CALL_OW 52
// end else
2417: GO 2437
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2419: LD_INT 0
2421: PPUSH
2422: LD_VAR 0 2
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: LD_INT 0
2432: PPUSH
2433: CALL 1123 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2437: LD_STRING 11_Houten
2439: PPUSH
2440: CALL_OW 28
2444: PUSH
2445: LD_INT 1
2447: EQUAL
2448: IFFALSE 2495
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2450: LD_ADDR_EXP 9
2454: PUSH
2455: LD_STRING 11_Houten
2457: PPUSH
2458: LD_INT 1
2460: PPUSH
2461: CALL 13247 0 2
2465: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2466: LD_EXP 9
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2478: LD_EXP 9
2482: PPUSH
2483: LD_INT 4
2485: PPUSH
2486: LD_INT 0
2488: PPUSH
2489: CALL_OW 49
// end else
2493: GO 2511
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2495: LD_INT 4
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: LD_INT 1
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL 1123 0 4
// end ; vc_control = 3 ;
2511: LD_ADDR_OWVAR 38
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2519: LD_ADDR_OWVAR 40
2523: PUSH
2524: LD_INT 12
2526: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2527: LD_ADDR_EXP 17
2531: PUSH
2532: CALL_OW 45
2536: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2537: LD_EXP 17
2541: PPUSH
2542: LD_INT 4
2544: PPUSH
2545: CALL_OW 233
// amCargo4 = CreateVehicle ;
2549: LD_ADDR_EXP 18
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2559: LD_EXP 18
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// amCargo5 = CreateVehicle ;
2571: LD_ADDR_EXP 19
2575: PUSH
2576: CALL_OW 45
2580: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2581: LD_EXP 19
2585: PPUSH
2586: LD_INT 4
2588: PPUSH
2589: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2593: LD_EXP 17
2597: PPUSH
2598: LD_INT 4
2600: PPUSH
2601: LD_INT 0
2603: PPUSH
2604: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2608: LD_EXP 18
2612: PPUSH
2613: LD_INT 4
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2623: LD_EXP 19
2627: PPUSH
2628: LD_INT 4
2630: PPUSH
2631: LD_INT 0
2633: PPUSH
2634: CALL_OW 49
// if kurtStatus > 0 then
2638: LD_EXP 27
2642: PUSH
2643: LD_INT 0
2645: GREATER
2646: IFFALSE 2695
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2648: LD_EXP 17
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 100
2658: PPUSH
2659: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2663: LD_EXP 18
2667: PPUSH
2668: LD_INT 1
2670: PPUSH
2671: LD_INT 100
2673: PPUSH
2674: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2678: LD_EXP 19
2682: PPUSH
2683: LD_INT 3
2685: PPUSH
2686: LD_INT 80
2688: PPUSH
2689: CALL_OW 291
// end else
2693: GO 2740
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2695: LD_EXP 17
2699: PPUSH
2700: LD_INT 1
2702: PPUSH
2703: LD_INT 100
2705: PPUSH
2706: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2710: LD_EXP 18
2714: PPUSH
2715: LD_INT 3
2717: PPUSH
2718: LD_INT 60
2720: PPUSH
2721: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2725: LD_EXP 19
2729: PPUSH
2730: LD_INT 3
2732: PPUSH
2733: LD_INT 100
2735: PPUSH
2736: CALL_OW 291
// end ; end ;
2740: LD_VAR 0 1
2744: RET
// export function PowellSupport3 ; var veh , un ; begin
2745: LD_INT 0
2747: PPUSH
2748: PPUSH
2749: PPUSH
// uc_side = 1 ;
2750: LD_ADDR_OWVAR 20
2754: PUSH
2755: LD_INT 1
2757: ST_TO_ADDR
// uc_nation = 1 ;
2758: LD_ADDR_OWVAR 21
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2766: LD_INT 4
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: CALL 1123 0 4
// vc_chassis = us_medium_wheeled ;
2782: LD_ADDR_OWVAR 37
2786: PUSH
2787: LD_INT 2
2789: ST_TO_ADDR
// vc_engine = 3 ;
2790: LD_ADDR_OWVAR 39
2794: PUSH
2795: LD_INT 3
2797: ST_TO_ADDR
// vc_control = 3 ;
2798: LD_ADDR_OWVAR 38
2802: PUSH
2803: LD_INT 3
2805: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2806: LD_ADDR_OWVAR 40
2810: PUSH
2811: LD_INT 12
2813: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2814: LD_ADDR_EXP 20
2818: PUSH
2819: CALL_OW 45
2823: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2824: LD_ADDR_EXP 21
2828: PUSH
2829: CALL_OW 45
2833: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2834: LD_EXP 20
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2846: LD_EXP 21
2850: PPUSH
2851: LD_INT 4
2853: PPUSH
2854: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2858: LD_EXP 20
2862: PPUSH
2863: LD_INT 4
2865: PPUSH
2866: LD_INT 0
2868: PPUSH
2869: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2873: LD_EXP 21
2877: PPUSH
2878: LD_INT 4
2880: PPUSH
2881: LD_INT 0
2883: PPUSH
2884: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2888: LD_EXP 20
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 100
2898: PPUSH
2899: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
2903: LD_EXP 21
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: LD_INT 100
2913: PPUSH
2914: CALL_OW 291
// end ; end_of_file
2918: LD_VAR 0 1
2922: RET
// export function PrepareRussianCommander ; begin
2923: LD_INT 0
2925: PPUSH
// uc_side = 3 ;
2926: LD_ADDR_OWVAR 20
2930: PUSH
2931: LD_INT 3
2933: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2934: LD_ADDR_EXP 23
2938: PUSH
2939: LD_STRING Davidov
2941: PPUSH
2942: LD_INT 0
2944: PPUSH
2945: CALL 13247 0 2
2949: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2950: LD_EXP 23
2954: PPUSH
2955: LD_INT 3
2957: PPUSH
2958: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2962: LD_ADDR_EXP 35
2966: PUSH
2967: LD_EXP 35
2971: PUSH
2972: LD_EXP 23
2976: ADD
2977: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2978: LD_EXP 35
2982: PPUSH
2983: LD_INT 4
2985: PPUSH
2986: CALL_OW 336
// end ;
2990: LD_VAR 0 1
2994: RET
// export function PrepareEastBase ; var i , un ; begin
2995: LD_INT 0
2997: PPUSH
2998: PPUSH
2999: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3000: LD_INT 3
3002: PPUSH
3003: LD_INT 3
3005: PPUSH
3006: LD_INT 121
3008: PPUSH
3009: LD_EXP 37
3013: PPUSH
3014: LD_EXP 38
3018: PPUSH
3019: CALL_OW 12
3023: PPUSH
3024: LD_INT 1
3026: PPUSH
3027: LD_INT 3
3029: PPUSH
3030: CALL 14039 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3034: LD_INT 3
3036: PPUSH
3037: LD_INT 3
3039: PPUSH
3040: LD_INT 121
3042: PPUSH
3043: LD_EXP 37
3047: PPUSH
3048: LD_EXP 38
3052: PPUSH
3053: CALL_OW 12
3057: PPUSH
3058: LD_INT 9
3060: PPUSH
3061: LD_INT 3
3063: PPUSH
3064: CALL 14039 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3068: LD_INT 3
3070: PPUSH
3071: LD_INT 3
3073: PPUSH
3074: LD_INT 4
3076: PPUSH
3077: LD_EXP 37
3081: PPUSH
3082: LD_EXP 38
3086: PPUSH
3087: CALL_OW 12
3091: PPUSH
3092: LD_INT 2
3094: PPUSH
3095: LD_INT 6
3097: PPUSH
3098: CALL 14039 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3102: LD_INT 3
3104: PPUSH
3105: LD_INT 3
3107: PPUSH
3108: LD_INT 112
3110: PPUSH
3111: LD_EXP 37
3115: PPUSH
3116: LD_EXP 38
3120: PPUSH
3121: CALL_OW 12
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: LD_INT 6
3131: PPUSH
3132: CALL 14039 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3136: LD_INT 3
3138: PPUSH
3139: LD_INT 3
3141: PPUSH
3142: LD_INT 47
3144: PPUSH
3145: LD_EXP 37
3149: PPUSH
3150: LD_EXP 38
3154: PPUSH
3155: CALL_OW 12
3159: PPUSH
3160: LD_INT 4
3162: PPUSH
3163: LD_INT 6
3165: PPUSH
3166: CALL 14039 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3170: LD_INT 3
3172: PPUSH
3173: LD_INT 3
3175: PPUSH
3176: LD_INT 129
3178: PPUSH
3179: LD_EXP 37
3183: PPUSH
3184: LD_EXP 38
3188: PPUSH
3189: CALL_OW 12
3193: PPUSH
3194: LD_INT 4
3196: PPUSH
3197: LD_INT 6
3199: PPUSH
3200: CALL 14039 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3204: LD_INT 3
3206: PPUSH
3207: LD_INT 3
3209: PPUSH
3210: LD_INT 135
3212: PPUSH
3213: LD_EXP 37
3217: PPUSH
3218: LD_EXP 38
3222: PPUSH
3223: CALL_OW 12
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: LD_INT 6
3233: PPUSH
3234: CALL 14039 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3238: LD_ADDR_VAR 0 2
3242: PUSH
3243: LD_INT 22
3245: PUSH
3246: LD_INT 3
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 30
3255: PUSH
3256: LD_INT 32
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PPUSH
3267: CALL_OW 69
3271: PUSH
3272: FOR_IN
3273: IFFALSE 3313
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3275: LD_INT 3
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_EXP 37
3290: PPUSH
3291: LD_EXP 38
3295: PPUSH
3296: CALL_OW 12
3300: PPUSH
3301: LD_INT 1
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL 14039 0 6
3311: GO 3272
3313: POP
3314: POP
// for i = 1 to 5 do
3315: LD_ADDR_VAR 0 2
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_INT 5
3327: PUSH
3328: FOR_TO
3329: IFFALSE 3428
// begin uc_side = 3 ;
3331: LD_ADDR_OWVAR 20
3335: PUSH
3336: LD_INT 3
3338: ST_TO_ADDR
// uc_nation = 3 ;
3339: LD_ADDR_OWVAR 21
3343: PUSH
3344: LD_INT 3
3346: ST_TO_ADDR
// hc_gallery =  ;
3347: LD_ADDR_OWVAR 33
3351: PUSH
3352: LD_STRING 
3354: ST_TO_ADDR
// hc_name =  ;
3355: LD_ADDR_OWVAR 26
3359: PUSH
3360: LD_STRING 
3362: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3363: LD_INT 0
3365: PPUSH
3366: LD_INT 4
3368: PPUSH
3369: LD_EXP 37
3373: PPUSH
3374: LD_EXP 38
3378: PPUSH
3379: CALL_OW 12
3383: PPUSH
3384: CALL_OW 380
// un = CreateHuman ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: CALL_OW 44
3397: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3398: LD_VAR 0 3
3402: PPUSH
3403: LD_INT 3
3405: PPUSH
3406: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3410: LD_ADDR_EXP 35
3414: PUSH
3415: LD_EXP 35
3419: PUSH
3420: LD_VAR 0 3
3424: ADD
3425: ST_TO_ADDR
// end ;
3426: GO 3328
3428: POP
3429: POP
// end ;
3430: LD_VAR 0 1
3434: RET
// export function PrepareWestBase ; var i , un ; begin
3435: LD_INT 0
3437: PPUSH
3438: PPUSH
3439: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 3
3445: PPUSH
3446: LD_INT 6
3448: PPUSH
3449: LD_EXP 37
3453: PPUSH
3454: LD_EXP 38
3458: PPUSH
3459: CALL_OW 12
3463: PPUSH
3464: LD_INT 2
3466: PPUSH
3467: LD_INT 3
3469: PPUSH
3470: CALL 14039 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_INT 91
3482: PPUSH
3483: LD_EXP 37
3487: PPUSH
3488: LD_EXP 38
3492: PPUSH
3493: CALL_OW 12
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 3
3503: PPUSH
3504: CALL 14039 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_INT 21
3516: PPUSH
3517: LD_EXP 37
3521: PPUSH
3522: LD_EXP 38
3526: PPUSH
3527: CALL_OW 12
3531: PPUSH
3532: LD_INT 3
3534: PPUSH
3535: LD_INT 6
3537: PPUSH
3538: CALL 14039 0 6
// end ;
3542: LD_VAR 0 1
3546: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3547: LD_INT 0
3549: PPUSH
3550: PPUSH
3551: PPUSH
3552: PPUSH
// uc_side = 3 ;
3553: LD_ADDR_OWVAR 20
3557: PUSH
3558: LD_INT 3
3560: ST_TO_ADDR
// uc_nation = 3 ;
3561: LD_ADDR_OWVAR 21
3565: PUSH
3566: LD_INT 3
3568: ST_TO_ADDR
// for i = 1 to 5 do
3569: LD_ADDR_VAR 0 2
3573: PUSH
3574: DOUBLE
3575: LD_INT 1
3577: DEC
3578: ST_TO_ADDR
3579: LD_INT 5
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3653
// begin hc_gallery =  ;
3585: LD_ADDR_OWVAR 33
3589: PUSH
3590: LD_STRING 
3592: ST_TO_ADDR
// hc_name =  ;
3593: LD_ADDR_OWVAR 26
3597: PUSH
3598: LD_STRING 
3600: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3601: LD_INT 0
3603: PPUSH
3604: LD_INT 9
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: LD_EXP 38
3616: PPUSH
3617: CALL_OW 12
3621: PPUSH
3622: CALL_OW 380
// un = CreateHuman ;
3626: LD_ADDR_VAR 0 3
3630: PUSH
3631: CALL_OW 44
3635: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_INT 8
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL_OW 49
// end ;
3651: GO 3582
3653: POP
3654: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3655: LD_ADDR_VAR 0 2
3659: PUSH
3660: DOUBLE
3661: LD_INT 1
3663: DEC
3664: ST_TO_ADDR
3665: LD_INT 2
3667: PUSH
3668: LD_INT 3
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PUSH
3679: LD_OWVAR 67
3683: ARRAY
3684: PUSH
3685: FOR_TO
3686: IFFALSE 3756
// begin hc_gallery =  ;
3688: LD_ADDR_OWVAR 33
3692: PUSH
3693: LD_STRING 
3695: ST_TO_ADDR
// hc_name =  ;
3696: LD_ADDR_OWVAR 26
3700: PUSH
3701: LD_STRING 
3703: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3704: LD_INT 0
3706: PPUSH
3707: LD_INT 4
3709: PPUSH
3710: LD_EXP 37
3714: PPUSH
3715: LD_EXP 38
3719: PPUSH
3720: CALL_OW 12
3724: PPUSH
3725: CALL_OW 380
// un = CreateHuman ;
3729: LD_ADDR_VAR 0 3
3733: PUSH
3734: CALL_OW 44
3738: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3739: LD_VAR 0 3
3743: PPUSH
3744: LD_INT 8
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: CALL_OW 49
// end ;
3754: GO 3685
3756: POP
3757: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3758: LD_ADDR_VAR 0 2
3762: PUSH
3763: DOUBLE
3764: LD_INT 1
3766: DEC
3767: ST_TO_ADDR
3768: LD_INT 3
3770: PUSH
3771: LD_INT 4
3773: PUSH
3774: LD_INT 5
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: LD_OWVAR 67
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3985
// begin vc_engine = 3 ;
3791: LD_ADDR_OWVAR 39
3795: PUSH
3796: LD_INT 3
3798: ST_TO_ADDR
// vc_control = 1 ;
3799: LD_ADDR_OWVAR 38
3803: PUSH
3804: LD_INT 1
3806: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3807: LD_ADDR_OWVAR 40
3811: PUSH
3812: LD_INT 42
3814: PUSH
3815: LD_INT 43
3817: PUSH
3818: LD_INT 44
3820: PUSH
3821: LD_INT 45
3823: PUSH
3824: LD_INT 46
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: PUSH
3834: LD_INT 1
3836: PPUSH
3837: LD_INT 5
3839: PPUSH
3840: CALL_OW 12
3844: ARRAY
3845: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3846: LD_OWVAR 40
3850: PUSH
3851: LD_INT 46
3853: EQUAL
3854: IFFALSE 3866
// vc_chassis = ru_heavy_tracked else
3856: LD_ADDR_OWVAR 37
3860: PUSH
3861: LD_INT 24
3863: ST_TO_ADDR
3864: GO 3893
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3866: LD_ADDR_OWVAR 37
3870: PUSH
3871: LD_INT 22
3873: PUSH
3874: LD_INT 21
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: LD_INT 1
3883: PPUSH
3884: LD_INT 2
3886: PPUSH
3887: CALL_OW 12
3891: ARRAY
3892: ST_TO_ADDR
// veh = CreateVehicle ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: CALL_OW 45
3902: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3903: LD_VAR 0 4
3907: PPUSH
3908: LD_INT 3
3910: PPUSH
3911: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3915: LD_VAR 0 4
3919: PPUSH
3920: LD_INT 5
3922: PPUSH
3923: LD_INT 0
3925: PPUSH
3926: CALL_OW 49
// hc_gallery =  ;
3930: LD_ADDR_OWVAR 33
3934: PUSH
3935: LD_STRING 
3937: ST_TO_ADDR
// hc_name =  ;
3938: LD_ADDR_OWVAR 26
3942: PUSH
3943: LD_STRING 
3945: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3946: LD_INT 0
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_INT 10
3954: PPUSH
3955: CALL_OW 380
// un = CreateHuman ;
3959: LD_ADDR_VAR 0 3
3963: PUSH
3964: CALL_OW 44
3968: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3969: LD_VAR 0 3
3973: PPUSH
3974: LD_VAR 0 4
3978: PPUSH
3979: CALL_OW 52
// end ;
3983: GO 3788
3985: POP
3986: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3987: LD_ADDR_VAR 0 2
3991: PUSH
3992: DOUBLE
3993: LD_INT 1
3995: DEC
3996: ST_TO_ADDR
3997: LD_INT 3
3999: PUSH
4000: LD_INT 4
4002: PUSH
4003: LD_INT 5
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: PUSH
4011: LD_OWVAR 67
4015: ARRAY
4016: PUSH
4017: FOR_TO
4018: IFFALSE 4165
// begin vc_engine = 3 ;
4020: LD_ADDR_OWVAR 39
4024: PUSH
4025: LD_INT 3
4027: ST_TO_ADDR
// vc_control = 3 ;
4028: LD_ADDR_OWVAR 38
4032: PUSH
4033: LD_INT 3
4035: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4036: LD_ADDR_OWVAR 40
4040: PUSH
4041: LD_INT 42
4043: PUSH
4044: LD_INT 43
4046: PUSH
4047: LD_INT 44
4049: PUSH
4050: LD_INT 45
4052: PUSH
4053: LD_INT 46
4055: PUSH
4056: LD_INT 49
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 1
4069: PPUSH
4070: LD_INT 5
4072: PPUSH
4073: CALL_OW 12
4077: ARRAY
4078: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4079: LD_OWVAR 40
4083: PUSH
4084: LD_INT 46
4086: EQUAL
4087: IFFALSE 4099
// vc_chassis = ru_heavy_tracked else
4089: LD_ADDR_OWVAR 37
4093: PUSH
4094: LD_INT 24
4096: ST_TO_ADDR
4097: GO 4126
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4099: LD_ADDR_OWVAR 37
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 21
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 1
4116: PPUSH
4117: LD_INT 2
4119: PPUSH
4120: CALL_OW 12
4124: ARRAY
4125: ST_TO_ADDR
// veh = CreateVehicle ;
4126: LD_ADDR_VAR 0 4
4130: PUSH
4131: CALL_OW 45
4135: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4136: LD_VAR 0 4
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_INT 6
4155: PPUSH
4156: LD_INT 0
4158: PPUSH
4159: CALL_OW 49
// end ;
4163: GO 4017
4165: POP
4166: POP
// end ; end_of_file
4167: LD_VAR 0 1
4171: RET
// export function PrepareKurt ; begin
4172: LD_INT 0
4174: PPUSH
// uc_side = 8 ;
4175: LD_ADDR_OWVAR 20
4179: PUSH
4180: LD_INT 8
4182: ST_TO_ADDR
// uc_nation = 2 ;
4183: LD_ADDR_OWVAR 21
4187: PUSH
4188: LD_INT 2
4190: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4191: LD_ADDR_OWVAR 37
4195: PUSH
4196: LD_INT 13
4198: ST_TO_ADDR
// vc_engine = 1 ;
4199: LD_ADDR_OWVAR 39
4203: PUSH
4204: LD_INT 1
4206: ST_TO_ADDR
// vc_control = 1 ;
4207: LD_ADDR_OWVAR 38
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// vc_weapon = 24 ;
4215: LD_ADDR_OWVAR 40
4219: PUSH
4220: LD_INT 24
4222: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4223: LD_ADDR_EXP 26
4227: PUSH
4228: CALL_OW 45
4232: ST_TO_ADDR
// if kurtStatus > 0 then
4233: LD_EXP 27
4237: PUSH
4238: LD_INT 0
4240: GREATER
4241: IFFALSE 4290
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4243: LD_ADDR_EXP 24
4247: PUSH
4248: LD_STRING Kurt
4250: PPUSH
4251: LD_INT 0
4253: PPUSH
4254: CALL 13247 0 2
4258: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4259: LD_EXP 26
4263: PPUSH
4264: LD_INT 4
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4274: LD_EXP 24
4278: PPUSH
4279: LD_EXP 26
4283: PPUSH
4284: CALL_OW 52
// end else
4288: GO 4355
// begin hc_name =  ;
4290: LD_ADDR_OWVAR 26
4294: PUSH
4295: LD_STRING 
4297: ST_TO_ADDR
// hc_gallery =  ;
4298: LD_ADDR_OWVAR 33
4302: PUSH
4303: LD_STRING 
4305: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4306: LD_INT 1
4308: PPUSH
4309: LD_INT 10
4311: PPUSH
4312: CALL_OW 381
// otherKurt = CreateHuman ;
4316: LD_ADDR_EXP 25
4320: PUSH
4321: CALL_OW 44
4325: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4326: LD_EXP 26
4330: PPUSH
4331: LD_INT 4
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4341: LD_EXP 25
4345: PPUSH
4346: LD_EXP 26
4350: PPUSH
4351: CALL_OW 52
// end ; end ;
4355: LD_VAR 0 1
4359: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4360: LD_INT 0
4362: PPUSH
4363: PPUSH
4364: PPUSH
4365: PPUSH
// for i = 1 to 3 do
4366: LD_ADDR_VAR 0 2
4370: PUSH
4371: DOUBLE
4372: LD_INT 1
4374: DEC
4375: ST_TO_ADDR
4376: LD_INT 3
4378: PUSH
4379: FOR_TO
4380: IFFALSE 4517
// begin uc_side = 1 ;
4382: LD_ADDR_OWVAR 20
4386: PUSH
4387: LD_INT 1
4389: ST_TO_ADDR
// uc_nation = 2 ;
4390: LD_ADDR_OWVAR 21
4394: PUSH
4395: LD_INT 2
4397: ST_TO_ADDR
// hc_gallery =  ;
4398: LD_ADDR_OWVAR 33
4402: PUSH
4403: LD_STRING 
4405: ST_TO_ADDR
// hc_name =  ;
4406: LD_ADDR_OWVAR 26
4410: PUSH
4411: LD_STRING 
4413: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4414: LD_EXP 27
4418: PUSH
4419: LD_INT 0
4421: EQUAL
4422: PUSH
4423: LD_EXP 27
4427: PUSH
4428: LD_INT 2
4430: EQUAL
4431: OR
4432: IFFALSE 4457
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4434: LD_INT 0
4436: PPUSH
4437: LD_INT 1
4439: PPUSH
4440: LD_INT 2
4442: PPUSH
4443: LD_INT 4
4445: PPUSH
4446: CALL_OW 12
4450: PPUSH
4451: CALL_OW 380
4455: GO 4478
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4457: LD_INT 0
4459: PPUSH
4460: LD_INT 1
4462: PPUSH
4463: LD_INT 6
4465: PPUSH
4466: LD_INT 8
4468: PPUSH
4469: CALL_OW 12
4473: PPUSH
4474: CALL_OW 380
// un = CreateHuman ;
4478: LD_ADDR_VAR 0 3
4482: PUSH
4483: CALL_OW 44
4487: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4488: LD_VAR 0 3
4492: PPUSH
4493: LD_INT 4
4495: PPUSH
4496: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4500: LD_VAR 0 3
4504: PPUSH
4505: LD_INT 4
4507: PPUSH
4508: LD_INT 0
4510: PPUSH
4511: CALL_OW 49
// end ;
4515: GO 4379
4517: POP
4518: POP
// vc_chassis = 14 ;
4519: LD_ADDR_OWVAR 37
4523: PUSH
4524: LD_INT 14
4526: ST_TO_ADDR
// vc_engine = 3 ;
4527: LD_ADDR_OWVAR 39
4531: PUSH
4532: LD_INT 3
4534: ST_TO_ADDR
// vc_control = 1 ;
4535: LD_ADDR_OWVAR 38
4539: PUSH
4540: LD_INT 1
4542: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4543: LD_ADDR_OWVAR 40
4547: PUSH
4548: LD_INT 27
4550: PUSH
4551: LD_INT 26
4553: PUSH
4554: LD_INT 28
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: LIST
4561: PUSH
4562: LD_INT 1
4564: PPUSH
4565: LD_INT 3
4567: PPUSH
4568: CALL_OW 12
4572: ARRAY
4573: ST_TO_ADDR
// veh = CreateVehicle ;
4574: LD_ADDR_VAR 0 4
4578: PUSH
4579: CALL_OW 45
4583: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4584: LD_VAR 0 4
4588: PPUSH
4589: LD_INT 4
4591: PPUSH
4592: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4596: LD_VAR 0 4
4600: PPUSH
4601: LD_INT 4
4603: PPUSH
4604: LD_INT 0
4606: PPUSH
4607: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4611: LD_EXP 27
4615: PUSH
4616: LD_INT 0
4618: EQUAL
4619: PUSH
4620: LD_EXP 27
4624: PUSH
4625: LD_INT 2
4627: EQUAL
4628: OR
4629: IFFALSE 4654
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4631: LD_INT 0
4633: PPUSH
4634: LD_INT 3
4636: PPUSH
4637: LD_INT 2
4639: PPUSH
4640: LD_INT 4
4642: PPUSH
4643: CALL_OW 12
4647: PPUSH
4648: CALL_OW 380
4652: GO 4675
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4654: LD_INT 0
4656: PPUSH
4657: LD_INT 3
4659: PPUSH
4660: LD_INT 6
4662: PPUSH
4663: LD_INT 8
4665: PPUSH
4666: CALL_OW 12
4670: PPUSH
4671: CALL_OW 380
// un = CreateHuman ;
4675: LD_ADDR_VAR 0 3
4679: PUSH
4680: CALL_OW 44
4684: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4685: LD_VAR 0 3
4689: PPUSH
4690: LD_VAR 0 4
4694: PPUSH
4695: CALL_OW 52
// vc_chassis = 14 ;
4699: LD_ADDR_OWVAR 37
4703: PUSH
4704: LD_INT 14
4706: ST_TO_ADDR
// vc_engine = 3 ;
4707: LD_ADDR_OWVAR 39
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// vc_control = 1 ;
4715: LD_ADDR_OWVAR 38
4719: PUSH
4720: LD_INT 1
4722: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4723: LD_ADDR_OWVAR 40
4727: PUSH
4728: LD_INT 27
4730: PUSH
4731: LD_INT 26
4733: PUSH
4734: LD_INT 28
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_INT 1
4744: PPUSH
4745: LD_INT 3
4747: PPUSH
4748: CALL_OW 12
4752: ARRAY
4753: ST_TO_ADDR
// veh = CreateVehicle ;
4754: LD_ADDR_VAR 0 4
4758: PUSH
4759: CALL_OW 45
4763: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4764: LD_VAR 0 4
4768: PPUSH
4769: LD_INT 4
4771: PPUSH
4772: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4776: LD_VAR 0 4
4780: PPUSH
4781: LD_INT 4
4783: PPUSH
4784: LD_INT 0
4786: PPUSH
4787: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4791: LD_EXP 27
4795: PUSH
4796: LD_INT 0
4798: EQUAL
4799: PUSH
4800: LD_EXP 27
4804: PUSH
4805: LD_INT 2
4807: EQUAL
4808: OR
4809: IFFALSE 4834
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4811: LD_INT 0
4813: PPUSH
4814: LD_INT 4
4816: PPUSH
4817: LD_INT 2
4819: PPUSH
4820: LD_INT 4
4822: PPUSH
4823: CALL_OW 12
4827: PPUSH
4828: CALL_OW 380
4832: GO 4855
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4834: LD_INT 0
4836: PPUSH
4837: LD_INT 4
4839: PPUSH
4840: LD_INT 6
4842: PPUSH
4843: LD_INT 8
4845: PPUSH
4846: CALL_OW 12
4850: PPUSH
4851: CALL_OW 380
// un = CreateHuman ;
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: CALL_OW 44
4864: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: LD_INT 4
4872: PPUSH
4873: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4877: LD_VAR 0 3
4881: PPUSH
4882: LD_VAR 0 4
4886: PPUSH
4887: CALL_OW 52
// vc_chassis = 14 ;
4891: LD_ADDR_OWVAR 37
4895: PUSH
4896: LD_INT 14
4898: ST_TO_ADDR
// vc_engine = 3 ;
4899: LD_ADDR_OWVAR 39
4903: PUSH
4904: LD_INT 3
4906: ST_TO_ADDR
// vc_control = 1 ;
4907: LD_ADDR_OWVAR 38
4911: PUSH
4912: LD_INT 1
4914: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4915: LD_ADDR_OWVAR 40
4919: PUSH
4920: LD_INT 27
4922: PUSH
4923: LD_INT 26
4925: PUSH
4926: LD_INT 28
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 1
4936: PPUSH
4937: LD_INT 3
4939: PPUSH
4940: CALL_OW 12
4944: ARRAY
4945: ST_TO_ADDR
// veh = CreateVehicle ;
4946: LD_ADDR_VAR 0 4
4950: PUSH
4951: CALL_OW 45
4955: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4956: LD_VAR 0 4
4960: PPUSH
4961: LD_INT 4
4963: PPUSH
4964: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4968: LD_VAR 0 4
4972: PPUSH
4973: LD_INT 4
4975: PPUSH
4976: LD_INT 0
4978: PPUSH
4979: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4983: LD_EXP 27
4987: PUSH
4988: LD_INT 0
4990: EQUAL
4991: PUSH
4992: LD_EXP 27
4996: PUSH
4997: LD_INT 2
4999: EQUAL
5000: OR
5001: IFFALSE 5026
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
5003: LD_INT 0
5005: PPUSH
5006: LD_INT 2
5008: PPUSH
5009: LD_INT 2
5011: PPUSH
5012: LD_INT 4
5014: PPUSH
5015: CALL_OW 12
5019: PPUSH
5020: CALL_OW 380
5024: GO 5047
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
5026: LD_INT 0
5028: PPUSH
5029: LD_INT 2
5031: PPUSH
5032: LD_INT 6
5034: PPUSH
5035: LD_INT 8
5037: PPUSH
5038: CALL_OW 12
5042: PPUSH
5043: CALL_OW 380
// un = CreateHuman ;
5047: LD_ADDR_VAR 0 3
5051: PUSH
5052: CALL_OW 44
5056: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5057: LD_VAR 0 3
5061: PPUSH
5062: LD_INT 4
5064: PPUSH
5065: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5069: LD_VAR 0 3
5073: PPUSH
5074: LD_VAR 0 4
5078: PPUSH
5079: CALL_OW 52
// end ;
5083: LD_VAR 0 1
5087: RET
// export function PrepareAttackLegion ; var i , un ; begin
5088: LD_INT 0
5090: PPUSH
5091: PPUSH
5092: PPUSH
// for i = 1 to 4 do
5093: LD_ADDR_VAR 0 2
5097: PUSH
5098: DOUBLE
5099: LD_INT 1
5101: DEC
5102: ST_TO_ADDR
5103: LD_INT 4
5105: PUSH
5106: FOR_TO
5107: IFFALSE 5217
// begin uc_side = 8 ;
5109: LD_ADDR_OWVAR 20
5113: PUSH
5114: LD_INT 8
5116: ST_TO_ADDR
// uc_nation = 2 ;
5117: LD_ADDR_OWVAR 21
5121: PUSH
5122: LD_INT 2
5124: ST_TO_ADDR
// hc_gallery =  ;
5125: LD_ADDR_OWVAR 33
5129: PUSH
5130: LD_STRING 
5132: ST_TO_ADDR
// hc_name =  ;
5133: LD_ADDR_OWVAR 26
5137: PUSH
5138: LD_STRING 
5140: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5141: LD_INT 0
5143: PPUSH
5144: LD_INT 1
5146: PUSH
5147: LD_INT 8
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: LD_INT 1
5156: PPUSH
5157: LD_INT 2
5159: PPUSH
5160: CALL_OW 12
5164: ARRAY
5165: PPUSH
5166: LD_INT 6
5168: PPUSH
5169: LD_INT 8
5171: PPUSH
5172: CALL_OW 12
5176: PPUSH
5177: CALL_OW 380
// un = CreateHuman ;
5181: LD_ADDR_VAR 0 3
5185: PUSH
5186: CALL_OW 44
5190: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5191: LD_VAR 0 3
5195: PPUSH
5196: LD_INT 19
5198: PPUSH
5199: LD_INT 0
5201: PPUSH
5202: CALL_OW 49
// ComCrawl ( un ) ;
5206: LD_VAR 0 3
5210: PPUSH
5211: CALL_OW 137
// end ;
5215: GO 5106
5217: POP
5218: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5219: LD_INT 1
5221: PPUSH
5222: LD_INT 8
5224: PPUSH
5225: LD_INT 2
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5235: LD_INT 20
5237: PPUSH
5238: LD_INT 3
5240: PPUSH
5241: CALL 16740 0 2
// end ; end_of_file
5245: LD_VAR 0 1
5249: RET
// every 1 do var i ;
5250: GO 5252
5252: DISABLE
5253: LD_INT 0
5255: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5256: LD_INT 10
5258: PPUSH
5259: LD_INT 122
5261: PPUSH
5262: LD_INT 145
5264: PPUSH
5265: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5269: LD_INT 137
5271: PPUSH
5272: LD_INT 84
5274: PPUSH
5275: LD_INT 61
5277: PPUSH
5278: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5282: LD_EXP 1
5286: PPUSH
5287: CALL_OW 310
5291: PPUSH
5292: CALL_OW 87
// InGameOn ;
5296: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5300: LD_INT 22
5302: PUSH
5303: LD_INT 1
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PPUSH
5310: CALL_OW 69
5314: PPUSH
5315: LD_INT 130
5317: PPUSH
5318: LD_INT 103
5320: PPUSH
5321: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5325: LD_VAR 0 1
5329: PPUSH
5330: LD_INT 114
5332: PPUSH
5333: LD_INT 102
5335: PPUSH
5336: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5340: LD_EXP 1
5344: PPUSH
5345: LD_STRING D1-JMM-1
5347: PPUSH
5348: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5352: LD_EXP 1
5356: PPUSH
5357: CALL_OW 310
5361: PPUSH
5362: CALL_OW 87
// if IsOk ( Donaldson ) then
5366: LD_EXP 3
5370: PPUSH
5371: CALL_OW 302
5375: IFFALSE 5455
// begin Say ( Donaldson , D1-Don-1 ) ;
5377: LD_EXP 3
5381: PPUSH
5382: LD_STRING D1-Don-1
5384: PPUSH
5385: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5389: LD_EXP 1
5393: PPUSH
5394: CALL_OW 310
5398: PPUSH
5399: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5403: LD_EXP 1
5407: PPUSH
5408: LD_STRING D1-JMM-2
5410: PPUSH
5411: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5415: LD_EXP 1
5419: PPUSH
5420: CALL_OW 310
5424: PPUSH
5425: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5429: LD_EXP 3
5433: PPUSH
5434: LD_STRING D1-Don-2
5436: PPUSH
5437: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5441: LD_EXP 1
5445: PPUSH
5446: CALL_OW 310
5450: PPUSH
5451: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5455: LD_INT 22
5457: PUSH
5458: LD_INT 1
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 69
5469: PPUSH
5470: LD_INT 110
5472: PPUSH
5473: LD_INT 101
5475: PPUSH
5476: CALL_OW 171
// wait ( 0 0$1 ) ;
5480: LD_INT 35
5482: PPUSH
5483: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5487: LD_EXP 1
5491: PPUSH
5492: CALL_OW 310
5496: PPUSH
5497: CALL_OW 87
// wait ( 0 0$1 ) ;
5501: LD_INT 35
5503: PPUSH
5504: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5508: LD_EXP 1
5512: PPUSH
5513: CALL_OW 310
5517: PPUSH
5518: CALL_OW 87
// wait ( 0 0$1 ) ;
5522: LD_INT 35
5524: PPUSH
5525: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5529: LD_EXP 1
5533: PPUSH
5534: CALL_OW 310
5538: PPUSH
5539: CALL_OW 87
// wait ( 0 0$1 ) ;
5543: LD_INT 35
5545: PPUSH
5546: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5550: LD_EXP 1
5554: PPUSH
5555: CALL_OW 310
5559: PPUSH
5560: CALL_OW 87
// end ;
5564: PPOPN 1
5566: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5567: LD_INT 1
5569: PPUSH
5570: LD_INT 102
5572: PPUSH
5573: LD_INT 94
5575: PPUSH
5576: CALL_OW 293
5580: IFFALSE 5771
5582: GO 5584
5584: DISABLE
5585: LD_INT 0
5587: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5588: LD_INT 102
5590: PPUSH
5591: LD_INT 94
5593: PPUSH
5594: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5598: LD_INT 22
5600: PUSH
5601: LD_INT 1
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 26
5610: PUSH
5611: LD_INT 1
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 2
5620: PUSH
5621: LD_INT 25
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 25
5633: PUSH
5634: LD_INT 2
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 25
5643: PUSH
5644: LD_INT 3
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 25
5653: PUSH
5654: LD_INT 4
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 5
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 8
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: PPUSH
5695: CALL_OW 69
5699: PPUSH
5700: LD_STRING D1-Sol1-2
5702: PPUSH
5703: LD_STRING 
5705: PPUSH
5706: CALL 13355 0 3
// Say ( JMM , D1-JMM-3 ) ;
5710: LD_EXP 1
5714: PPUSH
5715: LD_STRING D1-JMM-3
5717: PPUSH
5718: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5722: LD_STRING M1
5724: PPUSH
5725: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5729: LD_ADDR_VAR 0 1
5733: PUSH
5734: LD_INT 22
5736: PUSH
5737: LD_INT 1
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PPUSH
5744: CALL_OW 69
5748: PUSH
5749: FOR_IN
5750: IFFALSE 5769
// ComMoveXY ( i , 95 , 84 ) ;
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_INT 95
5759: PPUSH
5760: LD_INT 84
5762: PPUSH
5763: CALL_OW 111
5767: GO 5749
5769: POP
5770: POP
// end ;
5771: PPOPN 1
5773: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5774: GO 5776
5776: DISABLE
5777: LD_INT 0
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5783: LD_ADDR_VAR 0 2
5787: PUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_INT 22
5793: PUSH
5794: LD_INT 3
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_INT 25
5803: PUSH
5804: LD_INT 9
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 70
5819: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5820: LD_ADDR_VAR 0 3
5824: PUSH
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: EMPTY
5836: LIST
5837: PPUSH
5838: CALL_OW 69
5842: ST_TO_ADDR
// enable ;
5843: ENABLE
// for i in your_units do
5844: LD_ADDR_VAR 0 1
5848: PUSH
5849: LD_VAR 0 3
5853: PUSH
5854: FOR_IN
5855: IFFALSE 6503
// begin if See ( 3 , i ) then
5857: LD_INT 3
5859: PPUSH
5860: LD_VAR 0 1
5864: PPUSH
5865: CALL_OW 292
5869: IFFALSE 6501
// begin disable ;
5871: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5872: LD_VAR 0 2
5876: PPUSH
5877: LD_INT 96
5879: PPUSH
5880: LD_INT 85
5882: PPUSH
5883: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5887: LD_VAR 0 2
5891: PPUSH
5892: LD_INT 96
5894: PPUSH
5895: LD_INT 85
5897: PPUSH
5898: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5902: LD_VAR 0 2
5906: PPUSH
5907: LD_INT 96
5909: PPUSH
5910: LD_INT 85
5912: PPUSH
5913: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5917: LD_VAR 0 2
5921: PPUSH
5922: LD_INT 96
5924: PPUSH
5925: LD_INT 85
5927: PPUSH
5928: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5932: LD_VAR 0 2
5936: PPUSH
5937: LD_INT 96
5939: PPUSH
5940: LD_INT 85
5942: PPUSH
5943: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5947: LD_VAR 0 2
5951: PPUSH
5952: LD_INT 96
5954: PPUSH
5955: LD_INT 85
5957: PPUSH
5958: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5962: LD_EXP 1
5966: PPUSH
5967: LD_STRING D1a-JMM-1
5969: PPUSH
5970: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5974: LD_EXP 3
5978: PPUSH
5979: LD_STRING D1a-Don-1
5981: PPUSH
5982: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5986: LD_ADDR_VAR 0 1
5990: PUSH
5991: LD_INT 22
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PPUSH
6001: CALL_OW 69
6005: PUSH
6006: FOR_IN
6007: IFFALSE 6026
// ComMoveXY ( i , 109 , 102 ) ;
6009: LD_VAR 0 1
6013: PPUSH
6014: LD_INT 109
6016: PPUSH
6017: LD_INT 102
6019: PPUSH
6020: CALL_OW 111
6024: GO 6006
6026: POP
6027: POP
// Say ( JMM , D1a-JMM-2 ) ;
6028: LD_EXP 1
6032: PPUSH
6033: LD_STRING D1a-JMM-2
6035: PPUSH
6036: CALL_OW 88
// wait ( 0 0$10 ) ;
6040: LD_INT 350
6042: PPUSH
6043: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6047: LD_EXP 1
6051: PPUSH
6052: CALL_OW 310
6056: PPUSH
6057: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6061: LD_EXP 3
6065: PPUSH
6066: LD_STRING D1b-Don-1
6068: PPUSH
6069: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6073: LD_EXP 1
6077: PPUSH
6078: LD_STRING D1b-JMM-1
6080: PPUSH
6081: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6085: LD_INT 22
6087: PUSH
6088: LD_INT 1
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 26
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 2
6107: PUSH
6108: LD_INT 25
6110: PUSH
6111: LD_INT 1
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 25
6120: PUSH
6121: LD_INT 2
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 25
6140: PUSH
6141: LD_INT 4
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 25
6150: PUSH
6151: LD_INT 5
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 8
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: PPUSH
6182: CALL_OW 69
6186: PPUSH
6187: LD_STRING D1b-Sol1-1
6189: PPUSH
6190: LD_STRING 
6192: PPUSH
6193: CALL 13355 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6197: LD_EXP 3
6201: PPUSH
6202: LD_STRING D1b-Don-2
6204: PPUSH
6205: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6209: LD_EXP 1
6213: PPUSH
6214: LD_STRING D1b-JMM-2
6216: PPUSH
6217: CALL_OW 88
// dec = ShowQuery1 ;
6221: LD_ADDR_VAR 0 4
6225: PUSH
6226: CALL 13891 0 0
6230: ST_TO_ADDR
// if dec = 1 then
6231: LD_VAR 0 4
6235: PUSH
6236: LD_INT 1
6238: EQUAL
6239: IFFALSE 6345
// begin Say ( JMM , D2-JMM-1 ) ;
6241: LD_EXP 1
6245: PPUSH
6246: LD_STRING D2-JMM-1
6248: PPUSH
6249: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6253: LD_EXP 22
6257: PPUSH
6258: LD_STRING D2-Pow-1
6260: PPUSH
6261: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6265: LD_EXP 1
6269: PPUSH
6270: LD_STRING D2a-JMM-1
6272: PPUSH
6273: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6277: LD_EXP 22
6281: PPUSH
6282: LD_STRING D2a-Pow-1
6284: PPUSH
6285: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6289: LD_EXP 1
6293: PPUSH
6294: LD_STRING D2a-JMM-2
6296: PPUSH
6297: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6301: LD_EXP 22
6305: PPUSH
6306: LD_STRING D2a-Pow-2
6308: PPUSH
6309: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6313: LD_EXP 1
6317: PPUSH
6318: LD_STRING D2a-JMM-3
6320: PPUSH
6321: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6325: LD_EXP 22
6329: PPUSH
6330: LD_STRING D2a-Pow-3
6332: PPUSH
6333: CALL_OW 94
// secondPass = 2 ;
6337: LD_ADDR_EXP 28
6341: PUSH
6342: LD_INT 2
6344: ST_TO_ADDR
// end ; if dec = 2 then
6345: LD_VAR 0 4
6349: PUSH
6350: LD_INT 2
6352: EQUAL
6353: IFFALSE 6447
// begin Say ( JMM , D2-JMM-1 ) ;
6355: LD_EXP 1
6359: PPUSH
6360: LD_STRING D2-JMM-1
6362: PPUSH
6363: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6367: LD_EXP 22
6371: PPUSH
6372: LD_STRING D2-Pow-1
6374: PPUSH
6375: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6379: LD_EXP 1
6383: PPUSH
6384: LD_STRING D2b-JMM-1
6386: PPUSH
6387: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6391: LD_EXP 22
6395: PPUSH
6396: LD_STRING D2b-Pow-1
6398: PPUSH
6399: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6403: LD_EXP 1
6407: PPUSH
6408: LD_STRING D2c-JMM-1
6410: PPUSH
6411: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6415: LD_EXP 22
6419: PPUSH
6420: LD_STRING D2c-Pow-1
6422: PPUSH
6423: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6427: LD_EXP 1
6431: PPUSH
6432: LD_STRING D2c-JMM-2
6434: PPUSH
6435: CALL_OW 88
// secondPass = 2 ;
6439: LD_ADDR_EXP 28
6443: PUSH
6444: LD_INT 2
6446: ST_TO_ADDR
// end ; if dec = 3 then
6447: LD_VAR 0 4
6451: PUSH
6452: LD_INT 3
6454: EQUAL
6455: IFFALSE 6465
// secondPass = 1 ;
6457: LD_ADDR_EXP 28
6461: PUSH
6462: LD_INT 1
6464: ST_TO_ADDR
// InGameOff ;
6465: CALL_OW 9
// ruAI = 1 ;
6469: LD_ADDR_EXP 42
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6477: LD_INT 1
6479: PPUSH
6480: LD_INT 3
6482: PPUSH
6483: LD_INT 2
6485: PPUSH
6486: LD_INT 1
6488: PPUSH
6489: CALL_OW 80
// SaveForQuickRestart ;
6493: CALL_OW 22
// exit ;
6497: POP
6498: POP
6499: GO 6505
// end ; end ;
6501: GO 5854
6503: POP
6504: POP
// end ;
6505: PPOPN 4
6507: END
// every 1 1$0 trigger secondPass = 2 do
6508: LD_EXP 28
6512: PUSH
6513: LD_INT 2
6515: EQUAL
6516: IFFALSE 6643
6518: GO 6520
6520: DISABLE
// begin PowellSupport1 ;
6521: CALL 1752 0 0
// DialogueOn ;
6525: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6529: LD_EXP 1
6533: PPUSH
6534: LD_STRING DC1-JMM-1
6536: PPUSH
6537: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6541: LD_EXP 22
6545: PPUSH
6546: LD_STRING DC1-Pow-1
6548: PPUSH
6549: CALL_OW 94
// DialogueOff ;
6553: CALL_OW 7
// wait ( 3 3$0 ) ;
6557: LD_INT 6300
6559: PPUSH
6560: CALL_OW 67
// PowellSupport2 ;
6564: CALL 2211 0 0
// DialogueOn ;
6568: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6572: LD_EXP 1
6576: PPUSH
6577: LD_STRING DC2-JMM-1
6579: PPUSH
6580: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6584: LD_EXP 22
6588: PPUSH
6589: LD_STRING DC2-Pow-1
6591: PPUSH
6592: CALL_OW 94
// DialogueOff ;
6596: CALL_OW 7
// wait ( 6 6$0 ) ;
6600: LD_INT 12600
6602: PPUSH
6603: CALL_OW 67
// PowellSupport3 ;
6607: CALL 2745 0 0
// DialogueOn ;
6611: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6615: LD_EXP 22
6619: PPUSH
6620: LD_STRING DC3-Pow-1
6622: PPUSH
6623: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6627: LD_EXP 1
6631: PPUSH
6632: LD_STRING DC3-JMM-1
6634: PPUSH
6635: CALL_OW 88
// DialogueOff ;
6639: CALL_OW 7
// end ;
6643: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6644: LD_EXP 28
6648: PUSH
6649: LD_INT 2
6651: EQUAL
6652: PUSH
6653: LD_INT 22
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 2
6665: PUSH
6666: LD_INT 30
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 30
6678: PUSH
6679: LD_INT 1
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PPUSH
6695: CALL_OW 69
6699: PUSH
6700: LD_INT 0
6702: GREATER
6703: AND
6704: IFFALSE 10072
6706: GO 6708
6708: DISABLE
6709: LD_INT 0
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
6716: PPUSH
6717: PPUSH
6718: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6719: LD_ADDR_VAR 0 4
6723: PUSH
6724: LD_INT 22
6726: PUSH
6727: LD_INT 1
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PUSH
6734: LD_INT 21
6736: PUSH
6737: LD_INT 3
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: LD_INT 30
6749: PUSH
6750: LD_INT 0
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 30
6759: PUSH
6760: LD_INT 1
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: LIST
6776: PPUSH
6777: CALL_OW 69
6781: ST_TO_ADDR
// for i in tmp do
6782: LD_ADDR_VAR 0 1
6786: PUSH
6787: LD_VAR 0 4
6791: PUSH
6792: FOR_IN
6793: IFFALSE 6826
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6795: LD_ADDR_VAR 0 6
6799: PUSH
6800: LD_VAR 0 6
6804: PUSH
6805: LD_VAR 0 1
6809: PPUSH
6810: CALL_OW 274
6814: PPUSH
6815: LD_INT 1
6817: PPUSH
6818: CALL_OW 275
6822: PLUS
6823: ST_TO_ADDR
6824: GO 6792
6826: POP
6827: POP
// for i in tmp do
6828: LD_ADDR_VAR 0 1
6832: PUSH
6833: LD_VAR 0 4
6837: PUSH
6838: FOR_IN
6839: IFFALSE 6872
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6841: LD_ADDR_VAR 0 7
6845: PUSH
6846: LD_VAR 0 7
6850: PUSH
6851: LD_VAR 0 1
6855: PPUSH
6856: CALL_OW 274
6860: PPUSH
6861: LD_INT 2
6863: PPUSH
6864: CALL_OW 275
6868: PLUS
6869: ST_TO_ADDR
6870: GO 6838
6872: POP
6873: POP
// for i in tmp do
6874: LD_ADDR_VAR 0 1
6878: PUSH
6879: LD_VAR 0 4
6883: PUSH
6884: FOR_IN
6885: IFFALSE 6918
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6887: LD_ADDR_VAR 0 8
6891: PUSH
6892: LD_VAR 0 8
6896: PUSH
6897: LD_VAR 0 1
6901: PPUSH
6902: CALL_OW 274
6906: PPUSH
6907: LD_INT 3
6909: PPUSH
6910: CALL_OW 275
6914: PLUS
6915: ST_TO_ADDR
6916: GO 6884
6918: POP
6919: POP
// PrepareKurt ;
6920: CALL 4172 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6924: LD_EXP 26
6928: PPUSH
6929: LD_INT 144
6931: PPUSH
6932: LD_INT 111
6934: PPUSH
6935: CALL_OW 111
// wait ( 0 0$2 ) ;
6939: LD_INT 70
6941: PPUSH
6942: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6946: LD_INT 8
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: CALL_OW 343
// if kurtStatus > 0 then
6956: LD_EXP 27
6960: PUSH
6961: LD_INT 0
6963: GREATER
6964: IFFALSE 8527
// begin ComExitVehicle ( Kurt ) ;
6966: LD_EXP 24
6970: PPUSH
6971: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6975: LD_EXP 24
6979: PPUSH
6980: CALL_OW 87
// wait ( 0 0$1 ) ;
6984: LD_INT 35
6986: PPUSH
6987: CALL_OW 67
// DialogueOn ;
6991: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6995: LD_INT 22
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 26
7007: PUSH
7008: LD_INT 1
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 2
7017: PUSH
7018: LD_INT 25
7020: PUSH
7021: LD_INT 1
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 25
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 25
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 25
7050: PUSH
7051: LD_INT 4
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 25
7060: PUSH
7061: LD_INT 5
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 25
7070: PUSH
7071: LD_INT 8
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: PPUSH
7092: CALL_OW 69
7096: PPUSH
7097: LD_STRING D3-Sol1-1
7099: PPUSH
7100: LD_STRING 
7102: PPUSH
7103: CALL 13355 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7107: LD_EXP 24
7111: PPUSH
7112: LD_STRING D3-Kurt-1
7114: PPUSH
7115: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7119: LD_EXP 1
7123: PPUSH
7124: LD_STRING D3-JMM-1
7126: PPUSH
7127: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7131: LD_EXP 24
7135: PPUSH
7136: LD_STRING D3-Kurt-2
7138: PPUSH
7139: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7143: LD_EXP 1
7147: PPUSH
7148: LD_STRING D3-JMM-2
7150: PPUSH
7151: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7155: LD_EXP 24
7159: PPUSH
7160: LD_STRING D3-Kurt-4
7162: PPUSH
7163: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7167: LD_EXP 1
7171: PPUSH
7172: LD_STRING D3-JMM-4
7174: PPUSH
7175: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7179: LD_EXP 24
7183: PPUSH
7184: LD_STRING D3-Kurt-5
7186: PPUSH
7187: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7191: LD_EXP 24
7195: PPUSH
7196: LD_STRING D3-Kurt-5a
7198: PPUSH
7199: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7203: LD_VAR 0 6
7207: PUSH
7208: LD_INT 60
7210: GREATEREQUAL
7211: PUSH
7212: LD_VAR 0 8
7216: PUSH
7217: LD_INT 60
7219: GREATEREQUAL
7220: AND
7221: IFFALSE 7256
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7223: LD_ADDR_VAR 0 2
7227: PUSH
7228: LD_STRING Q2K
7230: PPUSH
7231: LD_INT 1
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 98
7253: ST_TO_ADDR
7254: GO 7279
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7256: LD_ADDR_VAR 0 2
7260: PUSH
7261: LD_STRING Q2K
7263: PPUSH
7264: LD_INT 3
7266: PUSH
7267: LD_INT 4
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 98
7278: ST_TO_ADDR
// if dec1 = 1 then
7279: LD_VAR 0 2
7283: PUSH
7284: LD_INT 1
7286: EQUAL
7287: IFFALSE 7321
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7289: LD_EXP 1
7293: PPUSH
7294: LD_STRING D3Ka-JMM-1
7296: PPUSH
7297: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7301: LD_EXP 24
7305: PPUSH
7306: LD_STRING D3Ka-Kurt-1
7308: PPUSH
7309: CALL_OW 88
// warWithLegion = 1 ;
7313: LD_ADDR_EXP 31
7317: PUSH
7318: LD_INT 1
7320: ST_TO_ADDR
// end ; if dec1 = 2 then
7321: LD_VAR 0 2
7325: PUSH
7326: LD_INT 2
7328: EQUAL
7329: IFFALSE 7555
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7331: LD_EXP 1
7335: PPUSH
7336: LD_STRING D3Kb-JMM-1
7338: PPUSH
7339: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7343: LD_EXP 24
7347: PPUSH
7348: LD_STRING D3Kb-Kurt-1
7350: PPUSH
7351: CALL_OW 88
// for i in tmp do
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_VAR 0 4
7364: PUSH
7365: FOR_IN
7366: IFFALSE 7453
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7368: LD_ADDR_VAR 0 5
7372: PUSH
7373: LD_VAR 0 1
7377: PPUSH
7378: CALL_OW 274
7382: PPUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 275
7390: ST_TO_ADDR
// if tmp2 >= 60 then
7391: LD_VAR 0 5
7395: PUSH
7396: LD_INT 60
7398: GREATEREQUAL
7399: IFFALSE 7431
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7401: LD_VAR 0 1
7405: PPUSH
7406: CALL_OW 274
7410: PPUSH
7411: LD_INT 1
7413: PPUSH
7414: LD_VAR 0 5
7418: PUSH
7419: LD_INT 60
7421: MINUS
7422: PPUSH
7423: CALL_OW 277
// break ;
7427: GO 7453
// end else
7429: GO 7451
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7431: LD_VAR 0 1
7435: PPUSH
7436: CALL_OW 274
7440: PPUSH
7441: LD_INT 1
7443: PPUSH
7444: LD_INT 0
7446: PPUSH
7447: CALL_OW 277
// end ; end ;
7451: GO 7365
7453: POP
7454: POP
// for i in tmp do
7455: LD_ADDR_VAR 0 1
7459: PUSH
7460: LD_VAR 0 4
7464: PUSH
7465: FOR_IN
7466: IFFALSE 7553
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7468: LD_ADDR_VAR 0 5
7472: PUSH
7473: LD_VAR 0 1
7477: PPUSH
7478: CALL_OW 274
7482: PPUSH
7483: LD_INT 3
7485: PPUSH
7486: CALL_OW 275
7490: ST_TO_ADDR
// if tmp2 >= 60 then
7491: LD_VAR 0 5
7495: PUSH
7496: LD_INT 60
7498: GREATEREQUAL
7499: IFFALSE 7531
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7501: LD_VAR 0 1
7505: PPUSH
7506: CALL_OW 274
7510: PPUSH
7511: LD_INT 3
7513: PPUSH
7514: LD_VAR 0 5
7518: PUSH
7519: LD_INT 60
7521: MINUS
7522: PPUSH
7523: CALL_OW 277
// break ;
7527: GO 7553
// end else
7529: GO 7551
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7531: LD_VAR 0 1
7535: PPUSH
7536: CALL_OW 274
7540: PPUSH
7541: LD_INT 3
7543: PPUSH
7544: LD_INT 0
7546: PPUSH
7547: CALL_OW 277
// end ; end ;
7551: GO 7465
7553: POP
7554: POP
// end ; if dec1 = 3 then
7555: LD_VAR 0 2
7559: PUSH
7560: LD_INT 3
7562: EQUAL
7563: IFFALSE 7798
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7565: LD_EXP 1
7569: PPUSH
7570: LD_STRING D3Kc1-JMM-1
7572: PPUSH
7573: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7577: LD_EXP 24
7581: PPUSH
7582: LD_STRING D3Kc1-Kurt-1
7584: PPUSH
7585: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7589: LD_EXP 1
7593: PPUSH
7594: LD_STRING D3Kc1-JMM-2
7596: PPUSH
7597: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7601: LD_EXP 24
7605: PPUSH
7606: LD_STRING D3Kc1-Kurt-2
7608: PPUSH
7609: CALL_OW 88
// askSiberite = 1 ;
7613: LD_ADDR_EXP 33
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7621: LD_ADDR_VAR 0 2
7625: PUSH
7626: LD_STRING Q2b
7628: PPUSH
7629: LD_INT 1
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: LIST
7642: PPUSH
7643: CALL_OW 98
7647: ST_TO_ADDR
// if dec2 = 1 then
7648: LD_VAR 0 3
7652: PUSH
7653: LD_INT 1
7655: EQUAL
7656: IFFALSE 7690
// begin Say ( JMM , D4a-JMM-1 ) ;
7658: LD_EXP 1
7662: PPUSH
7663: LD_STRING D4a-JMM-1
7665: PPUSH
7666: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7670: LD_EXP 24
7674: PPUSH
7675: LD_STRING D4b-Kurt-1
7677: PPUSH
7678: CALL_OW 88
// warWithLegion = 1 ;
7682: LD_ADDR_EXP 31
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// end ; if dec2 = 2 then
7690: LD_VAR 0 3
7694: PUSH
7695: LD_INT 2
7697: EQUAL
7698: IFFALSE 7732
// begin Say ( JMM , D4b-JMM-1 ) ;
7700: LD_EXP 1
7704: PPUSH
7705: LD_STRING D4b-JMM-1
7707: PPUSH
7708: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7712: LD_EXP 24
7716: PPUSH
7717: LD_STRING D4b-Kurt-1
7719: PPUSH
7720: CALL_OW 88
// warWithLegion = 1 ;
7724: LD_ADDR_EXP 31
7728: PUSH
7729: LD_INT 1
7731: ST_TO_ADDR
// end ; if dec2 = 3 then
7732: LD_VAR 0 3
7736: PUSH
7737: LD_INT 3
7739: EQUAL
7740: IFFALSE 7798
// begin Say ( JMM , D4c-JMM-1 ) ;
7742: LD_EXP 1
7746: PPUSH
7747: LD_STRING D4c-JMM-1
7749: PPUSH
7750: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7754: LD_EXP 24
7758: PPUSH
7759: LD_STRING D4c-Kurt-1
7761: PPUSH
7762: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7766: LD_EXP 1
7770: PPUSH
7771: LD_STRING D4c-JMM-2
7773: PPUSH
7774: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7778: LD_EXP 24
7782: PPUSH
7783: LD_STRING D4c-Kurt-2
7785: PPUSH
7786: CALL_OW 88
// fakeInfo = 1 ;
7790: LD_ADDR_EXP 32
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7798: LD_VAR 0 2
7802: PUSH
7803: LD_INT 4
7805: EQUAL
7806: IFFALSE 8463
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7808: LD_EXP 1
7812: PPUSH
7813: LD_STRING D3Kd-JMM-1
7815: PPUSH
7816: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7820: LD_VAR 0 6
7824: PUSH
7825: LD_INT 120
7827: GREATEREQUAL
7828: PUSH
7829: LD_VAR 0 8
7833: PUSH
7834: LD_INT 120
7836: GREATEREQUAL
7837: AND
7838: IFFALSE 7873
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7840: LD_ADDR_VAR 0 3
7844: PUSH
7845: LD_STRING Q2aK
7847: PPUSH
7848: LD_INT 1
7850: PUSH
7851: LD_INT 2
7853: PUSH
7854: LD_INT 3
7856: PUSH
7857: LD_INT 4
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 98
7870: ST_TO_ADDR
7871: GO 7896
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7873: LD_ADDR_VAR 0 3
7877: PUSH
7878: LD_STRING Q2K
7880: PPUSH
7881: LD_INT 1
7883: PUSH
7884: LD_INT 4
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PPUSH
7891: CALL_OW 98
7895: ST_TO_ADDR
// if dec2 = 1 then
7896: LD_VAR 0 3
7900: PUSH
7901: LD_INT 1
7903: EQUAL
7904: IFFALSE 7938
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7906: LD_EXP 1
7910: PPUSH
7911: LD_STRING D5Ka-JMM-1
7913: PPUSH
7914: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7918: LD_EXP 24
7922: PPUSH
7923: LD_STRING D5Ka-Kurt-1
7925: PPUSH
7926: CALL_OW 88
// warWithLegion = 1 ;
7930: LD_ADDR_EXP 31
7934: PUSH
7935: LD_INT 1
7937: ST_TO_ADDR
// end ; if dec2 = 2 then
7938: LD_VAR 0 3
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 7972
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7948: LD_EXP 1
7952: PPUSH
7953: LD_STRING D3Kb-JMM-1
7955: PPUSH
7956: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7960: LD_EXP 24
7964: PPUSH
7965: LD_STRING D3Kb-Kurt-1
7967: PPUSH
7968: CALL_OW 88
// end ; if dec2 = 3 then
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 3
7979: EQUAL
7980: IFFALSE 8210
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7982: LD_EXP 1
7986: PPUSH
7987: LD_STRING D3Ke-JMM-1
7989: PPUSH
7990: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7994: LD_EXP 24
7998: PPUSH
7999: LD_STRING D3Ke-Kurt-1
8001: PPUSH
8002: CALL_OW 88
// PrepareLegionForPlayer ;
8006: CALL 4360 0 0
// for i in tmp do
8010: LD_ADDR_VAR 0 1
8014: PUSH
8015: LD_VAR 0 4
8019: PUSH
8020: FOR_IN
8021: IFFALSE 8108
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8023: LD_ADDR_VAR 0 5
8027: PUSH
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 274
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 275
8045: ST_TO_ADDR
// if tmp2 >= 120 then
8046: LD_VAR 0 5
8050: PUSH
8051: LD_INT 120
8053: GREATEREQUAL
8054: IFFALSE 8086
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8056: LD_VAR 0 1
8060: PPUSH
8061: CALL_OW 274
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_VAR 0 5
8073: PUSH
8074: LD_INT 120
8076: MINUS
8077: PPUSH
8078: CALL_OW 277
// break ;
8082: GO 8108
// end else
8084: GO 8106
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 274
8095: PPUSH
8096: LD_INT 1
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 277
// end ; end ;
8106: GO 8020
8108: POP
8109: POP
// for i in tmp do
8110: LD_ADDR_VAR 0 1
8114: PUSH
8115: LD_VAR 0 4
8119: PUSH
8120: FOR_IN
8121: IFFALSE 8208
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8123: LD_ADDR_VAR 0 5
8127: PUSH
8128: LD_VAR 0 1
8132: PPUSH
8133: CALL_OW 274
8137: PPUSH
8138: LD_INT 3
8140: PPUSH
8141: CALL_OW 275
8145: ST_TO_ADDR
// if tmp2 >= 120 then
8146: LD_VAR 0 5
8150: PUSH
8151: LD_INT 120
8153: GREATEREQUAL
8154: IFFALSE 8186
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8156: LD_VAR 0 1
8160: PPUSH
8161: CALL_OW 274
8165: PPUSH
8166: LD_INT 3
8168: PPUSH
8169: LD_VAR 0 5
8173: PUSH
8174: LD_INT 120
8176: MINUS
8177: PPUSH
8178: CALL_OW 277
// break ;
8182: GO 8208
// end else
8184: GO 8206
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8186: LD_VAR 0 1
8190: PPUSH
8191: CALL_OW 274
8195: PPUSH
8196: LD_INT 3
8198: PPUSH
8199: LD_INT 0
8201: PPUSH
8202: CALL_OW 277
// end ; end ;
8206: GO 8120
8208: POP
8209: POP
// end ; if dec2 = 4 then
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 4
8217: EQUAL
8218: IFFALSE 8463
// begin if dec1 = 3 then
8220: LD_VAR 0 2
8224: PUSH
8225: LD_INT 3
8227: EQUAL
8228: IFFALSE 8463
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8230: LD_EXP 1
8234: PPUSH
8235: LD_STRING D3Kc1-JMM-1
8237: PPUSH
8238: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8242: LD_EXP 24
8246: PPUSH
8247: LD_STRING D3Kc1-Kurt-1
8249: PPUSH
8250: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8254: LD_EXP 1
8258: PPUSH
8259: LD_STRING D3Kc1-JMM-2
8261: PPUSH
8262: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8266: LD_EXP 24
8270: PPUSH
8271: LD_STRING D3Kc1-Kurt-2
8273: PPUSH
8274: CALL_OW 88
// askSiberite = 1 ;
8278: LD_ADDR_EXP 33
8282: PUSH
8283: LD_INT 1
8285: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8286: LD_ADDR_VAR 0 2
8290: PUSH
8291: LD_STRING Q2b
8293: PPUSH
8294: LD_INT 1
8296: PUSH
8297: LD_INT 2
8299: PUSH
8300: LD_INT 3
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: LIST
8307: PPUSH
8308: CALL_OW 98
8312: ST_TO_ADDR
// if dec2 = 1 then
8313: LD_VAR 0 3
8317: PUSH
8318: LD_INT 1
8320: EQUAL
8321: IFFALSE 8355
// begin Say ( JMM , D4a-JMM-1 ) ;
8323: LD_EXP 1
8327: PPUSH
8328: LD_STRING D4a-JMM-1
8330: PPUSH
8331: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8335: LD_EXP 24
8339: PPUSH
8340: LD_STRING D4b-Kurt-1
8342: PPUSH
8343: CALL_OW 88
// warWithLegion = 1 ;
8347: LD_ADDR_EXP 31
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// end ; if dec2 = 2 then
8355: LD_VAR 0 3
8359: PUSH
8360: LD_INT 2
8362: EQUAL
8363: IFFALSE 8397
// begin Say ( JMM , D4b-JMM-1 ) ;
8365: LD_EXP 1
8369: PPUSH
8370: LD_STRING D4b-JMM-1
8372: PPUSH
8373: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8377: LD_EXP 24
8381: PPUSH
8382: LD_STRING D4b-Kurt-1
8384: PPUSH
8385: CALL_OW 88
// warWithLegion = 1 ;
8389: LD_ADDR_EXP 31
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// end ; if dec2 = 3 then
8397: LD_VAR 0 3
8401: PUSH
8402: LD_INT 3
8404: EQUAL
8405: IFFALSE 8463
// begin Say ( JMM , D4c-JMM-1 ) ;
8407: LD_EXP 1
8411: PPUSH
8412: LD_STRING D4c-JMM-1
8414: PPUSH
8415: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8419: LD_EXP 24
8423: PPUSH
8424: LD_STRING D4c-Kurt-1
8426: PPUSH
8427: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8431: LD_EXP 1
8435: PPUSH
8436: LD_STRING D4c-JMM-2
8438: PPUSH
8439: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8443: LD_EXP 24
8447: PPUSH
8448: LD_STRING D4c-Kurt-2
8450: PPUSH
8451: CALL_OW 88
// fakeInfo = 1 ;
8455: LD_ADDR_EXP 32
8459: PUSH
8460: LD_INT 1
8462: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8463: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8467: LD_EXP 24
8471: PPUSH
8472: LD_EXP 26
8476: PPUSH
8477: CALL_OW 120
// wait ( 0 0$1 ) ;
8481: LD_INT 35
8483: PPUSH
8484: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8488: LD_EXP 26
8492: PPUSH
8493: LD_INT 4
8495: PPUSH
8496: CALL_OW 113
// wait ( 0 0$3 ) ;
8500: LD_INT 105
8502: PPUSH
8503: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8507: LD_EXP 24
8511: PPUSH
8512: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8516: LD_EXP 26
8520: PPUSH
8521: CALL_OW 64
// end else
8525: GO 10072
// begin ComExitVehicle ( otherKurt ) ;
8527: LD_EXP 25
8531: PPUSH
8532: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8536: LD_EXP 25
8540: PPUSH
8541: CALL_OW 87
// wait ( 0 0$1 ) ;
8545: LD_INT 35
8547: PPUSH
8548: CALL_OW 67
// DialogueOn ;
8552: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8556: LD_INT 22
8558: PUSH
8559: LD_INT 1
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 26
8568: PUSH
8569: LD_INT 1
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 2
8578: PUSH
8579: LD_INT 25
8581: PUSH
8582: LD_INT 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 25
8591: PUSH
8592: LD_INT 2
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 25
8601: PUSH
8602: LD_INT 3
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 25
8611: PUSH
8612: LD_INT 4
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 25
8621: PUSH
8622: LD_INT 5
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 25
8631: PUSH
8632: LD_INT 8
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: PPUSH
8653: CALL_OW 69
8657: PPUSH
8658: LD_STRING D3-Sol1-1
8660: PPUSH
8661: LD_STRING 
8663: PPUSH
8664: CALL 13355 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8668: LD_EXP 25
8672: PPUSH
8673: LD_STRING D3-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8680: LD_EXP 1
8684: PPUSH
8685: LD_STRING D3-JMM-1
8687: PPUSH
8688: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8692: LD_EXP 25
8696: PPUSH
8697: LD_STRING D3-Kurt-3
8699: PPUSH
8700: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8704: LD_EXP 1
8708: PPUSH
8709: LD_STRING D3-JMM-3
8711: PPUSH
8712: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8716: LD_EXP 25
8720: PPUSH
8721: LD_STRING D3-Kurt-5
8723: PPUSH
8724: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8728: LD_EXP 25
8732: PPUSH
8733: LD_STRING D3-Kurt-5b
8735: PPUSH
8736: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8740: LD_VAR 0 6
8744: PUSH
8745: LD_INT 100
8747: GREATEREQUAL
8748: PUSH
8749: LD_VAR 0 8
8753: PUSH
8754: LD_INT 100
8756: GREATEREQUAL
8757: AND
8758: IFFALSE 8793
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_STRING Q2
8767: PPUSH
8768: LD_INT 1
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: LD_INT 3
8776: PUSH
8777: LD_INT 4
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: PPUSH
8786: CALL_OW 98
8790: ST_TO_ADDR
8791: GO 8816
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8793: LD_ADDR_VAR 0 2
8797: PUSH
8798: LD_STRING Q2
8800: PPUSH
8801: LD_INT 3
8803: PUSH
8804: LD_INT 4
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 98
8815: ST_TO_ADDR
// if dec1 = 1 then
8816: LD_VAR 0 2
8820: PUSH
8821: LD_INT 1
8823: EQUAL
8824: IFFALSE 8858
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8826: LD_EXP 1
8830: PPUSH
8831: LD_STRING D3Ka-JMM-1
8833: PPUSH
8834: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8838: LD_EXP 25
8842: PPUSH
8843: LD_STRING D3Ka-Kurt-1
8845: PPUSH
8846: CALL_OW 88
// warWithLegion = 1 ;
8850: LD_ADDR_EXP 31
8854: PUSH
8855: LD_INT 1
8857: ST_TO_ADDR
// end ; if dec1 = 2 then
8858: LD_VAR 0 2
8862: PUSH
8863: LD_INT 2
8865: EQUAL
8866: IFFALSE 9092
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8868: LD_EXP 1
8872: PPUSH
8873: LD_STRING D3Kb-JMM-1
8875: PPUSH
8876: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8880: LD_EXP 25
8884: PPUSH
8885: LD_STRING D3Kb-Kurt-1
8887: PPUSH
8888: CALL_OW 88
// for i in tmp do
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_VAR 0 4
8901: PUSH
8902: FOR_IN
8903: IFFALSE 8990
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8905: LD_ADDR_VAR 0 5
8909: PUSH
8910: LD_VAR 0 1
8914: PPUSH
8915: CALL_OW 274
8919: PPUSH
8920: LD_INT 1
8922: PPUSH
8923: CALL_OW 275
8927: ST_TO_ADDR
// if tmp2 >= 100 then
8928: LD_VAR 0 5
8932: PUSH
8933: LD_INT 100
8935: GREATEREQUAL
8936: IFFALSE 8968
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8938: LD_VAR 0 1
8942: PPUSH
8943: CALL_OW 274
8947: PPUSH
8948: LD_INT 1
8950: PPUSH
8951: LD_VAR 0 5
8955: PUSH
8956: LD_INT 100
8958: MINUS
8959: PPUSH
8960: CALL_OW 277
// break ;
8964: GO 8990
// end else
8966: GO 8988
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 274
8977: PPUSH
8978: LD_INT 1
8980: PPUSH
8981: LD_INT 0
8983: PPUSH
8984: CALL_OW 277
// end ; end ;
8988: GO 8902
8990: POP
8991: POP
// for i in tmp do
8992: LD_ADDR_VAR 0 1
8996: PUSH
8997: LD_VAR 0 4
9001: PUSH
9002: FOR_IN
9003: IFFALSE 9090
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9005: LD_ADDR_VAR 0 5
9009: PUSH
9010: LD_VAR 0 1
9014: PPUSH
9015: CALL_OW 274
9019: PPUSH
9020: LD_INT 3
9022: PPUSH
9023: CALL_OW 275
9027: ST_TO_ADDR
// if tmp2 >= 100 then
9028: LD_VAR 0 5
9032: PUSH
9033: LD_INT 100
9035: GREATEREQUAL
9036: IFFALSE 9068
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
9038: LD_VAR 0 1
9042: PPUSH
9043: CALL_OW 274
9047: PPUSH
9048: LD_INT 3
9050: PPUSH
9051: LD_VAR 0 5
9055: PUSH
9056: LD_INT 100
9058: MINUS
9059: PPUSH
9060: CALL_OW 277
// break ;
9064: GO 9090
// end else
9066: GO 9088
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 274
9077: PPUSH
9078: LD_INT 3
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 277
// end ; end ;
9088: GO 9002
9090: POP
9091: POP
// end ; if dec1 = 3 then
9092: LD_VAR 0 2
9096: PUSH
9097: LD_INT 3
9099: EQUAL
9100: IFFALSE 9335
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9102: LD_EXP 1
9106: PPUSH
9107: LD_STRING D3Kc1-JMM-1
9109: PPUSH
9110: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9114: LD_EXP 25
9118: PPUSH
9119: LD_STRING D3Kc1-Kurt-1
9121: PPUSH
9122: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9126: LD_EXP 1
9130: PPUSH
9131: LD_STRING D3Kc1-JMM-2
9133: PPUSH
9134: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9138: LD_EXP 25
9142: PPUSH
9143: LD_STRING D3Kc1-Kurt-2
9145: PPUSH
9146: CALL_OW 88
// askSiberite = 1 ;
9150: LD_ADDR_EXP 33
9154: PUSH
9155: LD_INT 1
9157: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9158: LD_ADDR_VAR 0 2
9162: PUSH
9163: LD_STRING Q2b
9165: PPUSH
9166: LD_INT 1
9168: PUSH
9169: LD_INT 2
9171: PUSH
9172: LD_INT 3
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 98
9184: ST_TO_ADDR
// if dec2 = 1 then
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: EQUAL
9193: IFFALSE 9227
// begin Say ( JMM , D4a-JMM-1 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D4a-JMM-1
9202: PPUSH
9203: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9207: LD_EXP 25
9211: PPUSH
9212: LD_STRING D4b-Kurt-1
9214: PPUSH
9215: CALL_OW 88
// warWithLegion = 1 ;
9219: LD_ADDR_EXP 31
9223: PUSH
9224: LD_INT 1
9226: ST_TO_ADDR
// end ; if dec2 = 2 then
9227: LD_VAR 0 3
9231: PUSH
9232: LD_INT 2
9234: EQUAL
9235: IFFALSE 9269
// begin Say ( JMM , D4b-JMM-1 ) ;
9237: LD_EXP 1
9241: PPUSH
9242: LD_STRING D4b-JMM-1
9244: PPUSH
9245: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9249: LD_EXP 25
9253: PPUSH
9254: LD_STRING D4b-Kurt-1
9256: PPUSH
9257: CALL_OW 88
// warWithLegion = 1 ;
9261: LD_ADDR_EXP 31
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
// end ; if dec2 = 3 then
9269: LD_VAR 0 3
9273: PUSH
9274: LD_INT 3
9276: EQUAL
9277: IFFALSE 9335
// begin Say ( JMM , D4c-JMM-1 ) ;
9279: LD_EXP 1
9283: PPUSH
9284: LD_STRING D4c-JMM-1
9286: PPUSH
9287: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9291: LD_EXP 25
9295: PPUSH
9296: LD_STRING D4c-Kurt-1
9298: PPUSH
9299: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9303: LD_EXP 1
9307: PPUSH
9308: LD_STRING D4c-JMM-2
9310: PPUSH
9311: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9315: LD_EXP 25
9319: PPUSH
9320: LD_STRING D4c-Kurt-2
9322: PPUSH
9323: CALL_OW 88
// fakeInfo = 1 ;
9327: LD_ADDR_EXP 32
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9335: LD_VAR 0 2
9339: PUSH
9340: LD_INT 4
9342: EQUAL
9343: IFFALSE 10000
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9345: LD_EXP 1
9349: PPUSH
9350: LD_STRING D3Kd-JMM-1
9352: PPUSH
9353: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9357: LD_VAR 0 6
9361: PUSH
9362: LD_INT 200
9364: GREATEREQUAL
9365: PUSH
9366: LD_VAR 0 8
9370: PUSH
9371: LD_INT 200
9373: GREATEREQUAL
9374: AND
9375: IFFALSE 9410
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9377: LD_ADDR_VAR 0 3
9381: PUSH
9382: LD_STRING Q2a
9384: PPUSH
9385: LD_INT 1
9387: PUSH
9388: LD_INT 2
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 4
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 98
9407: ST_TO_ADDR
9408: GO 9433
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9410: LD_ADDR_VAR 0 3
9414: PUSH
9415: LD_STRING Q2a
9417: PPUSH
9418: LD_INT 1
9420: PUSH
9421: LD_INT 4
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 98
9432: ST_TO_ADDR
// if dec2 = 1 then
9433: LD_VAR 0 3
9437: PUSH
9438: LD_INT 1
9440: EQUAL
9441: IFFALSE 9475
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9443: LD_EXP 1
9447: PPUSH
9448: LD_STRING D5Ka-JMM-1
9450: PPUSH
9451: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9455: LD_EXP 25
9459: PPUSH
9460: LD_STRING D5Ka-Kurt-1
9462: PPUSH
9463: CALL_OW 88
// warWithLegion = 1 ;
9467: LD_ADDR_EXP 31
9471: PUSH
9472: LD_INT 1
9474: ST_TO_ADDR
// end ; if dec2 = 2 then
9475: LD_VAR 0 3
9479: PUSH
9480: LD_INT 2
9482: EQUAL
9483: IFFALSE 9509
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9485: LD_EXP 1
9489: PPUSH
9490: LD_STRING D3Kb-JMM-1
9492: PPUSH
9493: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9497: LD_EXP 25
9501: PPUSH
9502: LD_STRING D3Kb-Kurt-1
9504: PPUSH
9505: CALL_OW 88
// end ; if dec2 = 3 then
9509: LD_VAR 0 3
9513: PUSH
9514: LD_INT 3
9516: EQUAL
9517: IFFALSE 9747
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9519: LD_EXP 1
9523: PPUSH
9524: LD_STRING D3Ke-JMM-1
9526: PPUSH
9527: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9531: LD_EXP 25
9535: PPUSH
9536: LD_STRING D3Ke-Kurt-1
9538: PPUSH
9539: CALL_OW 88
// PrepareLegionForPlayer ;
9543: CALL 4360 0 0
// for i in tmp do
9547: LD_ADDR_VAR 0 1
9551: PUSH
9552: LD_VAR 0 4
9556: PUSH
9557: FOR_IN
9558: IFFALSE 9645
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9560: LD_ADDR_VAR 0 5
9564: PUSH
9565: LD_VAR 0 1
9569: PPUSH
9570: CALL_OW 274
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 275
9582: ST_TO_ADDR
// if tmp2 >= 200 then
9583: LD_VAR 0 5
9587: PUSH
9588: LD_INT 200
9590: GREATEREQUAL
9591: IFFALSE 9623
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9593: LD_VAR 0 1
9597: PPUSH
9598: CALL_OW 274
9602: PPUSH
9603: LD_INT 1
9605: PPUSH
9606: LD_VAR 0 5
9610: PUSH
9611: LD_INT 200
9613: MINUS
9614: PPUSH
9615: CALL_OW 277
// break ;
9619: GO 9645
// end else
9621: GO 9643
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9623: LD_VAR 0 1
9627: PPUSH
9628: CALL_OW 274
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_INT 0
9638: PPUSH
9639: CALL_OW 277
// end ; end ;
9643: GO 9557
9645: POP
9646: POP
// for i in tmp do
9647: LD_ADDR_VAR 0 1
9651: PUSH
9652: LD_VAR 0 4
9656: PUSH
9657: FOR_IN
9658: IFFALSE 9745
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9660: LD_ADDR_VAR 0 5
9664: PUSH
9665: LD_VAR 0 1
9669: PPUSH
9670: CALL_OW 274
9674: PPUSH
9675: LD_INT 3
9677: PPUSH
9678: CALL_OW 275
9682: ST_TO_ADDR
// if tmp2 >= 200 then
9683: LD_VAR 0 5
9687: PUSH
9688: LD_INT 200
9690: GREATEREQUAL
9691: IFFALSE 9723
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9693: LD_VAR 0 1
9697: PPUSH
9698: CALL_OW 274
9702: PPUSH
9703: LD_INT 3
9705: PPUSH
9706: LD_VAR 0 5
9710: PUSH
9711: LD_INT 200
9713: MINUS
9714: PPUSH
9715: CALL_OW 277
// break ;
9719: GO 9745
// end else
9721: GO 9743
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9723: LD_VAR 0 1
9727: PPUSH
9728: CALL_OW 274
9732: PPUSH
9733: LD_INT 3
9735: PPUSH
9736: LD_INT 0
9738: PPUSH
9739: CALL_OW 277
// end ; end ;
9743: GO 9657
9745: POP
9746: POP
// end ; if dec2 = 4 then
9747: LD_VAR 0 3
9751: PUSH
9752: LD_INT 4
9754: EQUAL
9755: IFFALSE 10000
// begin if dec1 = 3 then
9757: LD_VAR 0 2
9761: PUSH
9762: LD_INT 3
9764: EQUAL
9765: IFFALSE 10000
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9767: LD_EXP 1
9771: PPUSH
9772: LD_STRING D3Kc1-JMM-1
9774: PPUSH
9775: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9779: LD_EXP 25
9783: PPUSH
9784: LD_STRING D3Kc1-Kurt-1
9786: PPUSH
9787: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9791: LD_EXP 1
9795: PPUSH
9796: LD_STRING D3Kc1-JMM-2
9798: PPUSH
9799: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9803: LD_EXP 25
9807: PPUSH
9808: LD_STRING D3Kc1-Kurt-2
9810: PPUSH
9811: CALL_OW 88
// askSiberite = 1 ;
9815: LD_ADDR_EXP 33
9819: PUSH
9820: LD_INT 1
9822: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9823: LD_ADDR_VAR 0 2
9827: PUSH
9828: LD_STRING Q2b
9830: PPUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 98
9849: ST_TO_ADDR
// if dec2 = 1 then
9850: LD_VAR 0 3
9854: PUSH
9855: LD_INT 1
9857: EQUAL
9858: IFFALSE 9892
// begin Say ( JMM , D4a-JMM-1 ) ;
9860: LD_EXP 1
9864: PPUSH
9865: LD_STRING D4a-JMM-1
9867: PPUSH
9868: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9872: LD_EXP 25
9876: PPUSH
9877: LD_STRING D4b-Kurt-1
9879: PPUSH
9880: CALL_OW 88
// warWithLegion = 1 ;
9884: LD_ADDR_EXP 31
9888: PUSH
9889: LD_INT 1
9891: ST_TO_ADDR
// end ; if dec2 = 2 then
9892: LD_VAR 0 3
9896: PUSH
9897: LD_INT 2
9899: EQUAL
9900: IFFALSE 9934
// begin Say ( JMM , D4b-JMM-1 ) ;
9902: LD_EXP 1
9906: PPUSH
9907: LD_STRING D4b-JMM-1
9909: PPUSH
9910: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9914: LD_EXP 25
9918: PPUSH
9919: LD_STRING D4b-Kurt-1
9921: PPUSH
9922: CALL_OW 88
// warWithLegion = 1 ;
9926: LD_ADDR_EXP 31
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// end ; if dec2 = 3 then
9934: LD_VAR 0 3
9938: PUSH
9939: LD_INT 3
9941: EQUAL
9942: IFFALSE 10000
// begin Say ( JMM , D4c-JMM-1 ) ;
9944: LD_EXP 1
9948: PPUSH
9949: LD_STRING D4c-JMM-1
9951: PPUSH
9952: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9956: LD_EXP 25
9960: PPUSH
9961: LD_STRING D4c-Kurt-1
9963: PPUSH
9964: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9968: LD_EXP 1
9972: PPUSH
9973: LD_STRING D4c-JMM-2
9975: PPUSH
9976: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9980: LD_EXP 25
9984: PPUSH
9985: LD_STRING D4c-Kurt-2
9987: PPUSH
9988: CALL_OW 88
// fakeInfo = 1 ;
9992: LD_ADDR_EXP 32
9996: PUSH
9997: LD_INT 1
9999: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
10000: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
10004: LD_INT 8
10006: PPUSH
10007: LD_INT 8
10009: PPUSH
10010: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
10014: LD_EXP 25
10018: PPUSH
10019: LD_EXP 26
10023: PPUSH
10024: CALL_OW 120
// wait ( 0 0$1 ) ;
10028: LD_INT 35
10030: PPUSH
10031: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
10035: LD_EXP 26
10039: PPUSH
10040: LD_INT 4
10042: PPUSH
10043: CALL_OW 113
// wait ( 0 0$6 ) ;
10047: LD_INT 210
10049: PPUSH
10050: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10054: LD_EXP 25
10058: PPUSH
10059: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10063: LD_EXP 26
10067: PPUSH
10068: CALL_OW 64
// end ; end ;
10072: PPOPN 8
10074: END
// every 0 0$10 trigger warWithLegion = 1 do
10075: LD_EXP 31
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: IFFALSE 10092
10085: GO 10087
10087: DISABLE
// PrepareAttackLegion ;
10088: CALL 5088 0 0
10092: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10093: LD_EXP 15
10097: PPUSH
10098: CALL_OW 305
10102: PUSH
10103: LD_EXP 15
10107: PPUSH
10108: LD_INT 1
10110: PPUSH
10111: CALL_OW 289
10115: NOT
10116: AND
10117: PUSH
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 2
10125: PPUSH
10126: CALL_OW 289
10130: NOT
10131: AND
10132: PUSH
10133: LD_EXP 15
10137: PPUSH
10138: LD_INT 3
10140: PPUSH
10141: CALL_OW 289
10145: NOT
10146: AND
10147: IFFALSE 10164
10149: GO 10151
10151: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10152: LD_EXP 15
10156: PPUSH
10157: LD_INT 4
10159: PPUSH
10160: CALL_OW 235
10164: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10165: LD_EXP 16
10169: PPUSH
10170: CALL_OW 305
10174: PUSH
10175: LD_EXP 16
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: CALL_OW 289
10187: NOT
10188: AND
10189: PUSH
10190: LD_EXP 16
10194: PPUSH
10195: LD_INT 2
10197: PPUSH
10198: CALL_OW 289
10202: NOT
10203: AND
10204: PUSH
10205: LD_EXP 16
10209: PPUSH
10210: LD_INT 3
10212: PPUSH
10213: CALL_OW 289
10217: NOT
10218: AND
10219: IFFALSE 10236
10221: GO 10223
10223: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10224: LD_EXP 16
10228: PPUSH
10229: LD_INT 4
10231: PPUSH
10232: CALL_OW 235
10236: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10237: LD_EXP 17
10241: PPUSH
10242: CALL_OW 305
10246: PUSH
10247: LD_EXP 17
10251: PPUSH
10252: LD_INT 1
10254: PPUSH
10255: CALL_OW 289
10259: NOT
10260: AND
10261: PUSH
10262: LD_EXP 17
10266: PPUSH
10267: LD_INT 2
10269: PPUSH
10270: CALL_OW 289
10274: NOT
10275: AND
10276: PUSH
10277: LD_EXP 17
10281: PPUSH
10282: LD_INT 3
10284: PPUSH
10285: CALL_OW 289
10289: NOT
10290: AND
10291: IFFALSE 10308
10293: GO 10295
10295: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10296: LD_EXP 17
10300: PPUSH
10301: LD_INT 4
10303: PPUSH
10304: CALL_OW 235
10308: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10309: LD_EXP 18
10313: PPUSH
10314: CALL_OW 305
10318: PUSH
10319: LD_EXP 18
10323: PPUSH
10324: LD_INT 1
10326: PPUSH
10327: CALL_OW 289
10331: NOT
10332: AND
10333: PUSH
10334: LD_EXP 18
10338: PPUSH
10339: LD_INT 2
10341: PPUSH
10342: CALL_OW 289
10346: NOT
10347: AND
10348: PUSH
10349: LD_EXP 18
10353: PPUSH
10354: LD_INT 3
10356: PPUSH
10357: CALL_OW 289
10361: NOT
10362: AND
10363: IFFALSE 10380
10365: GO 10367
10367: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10368: LD_EXP 18
10372: PPUSH
10373: LD_INT 4
10375: PPUSH
10376: CALL_OW 235
10380: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10381: LD_EXP 19
10385: PPUSH
10386: CALL_OW 305
10390: PUSH
10391: LD_EXP 19
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: CALL_OW 289
10403: NOT
10404: AND
10405: PUSH
10406: LD_EXP 19
10410: PPUSH
10411: LD_INT 2
10413: PPUSH
10414: CALL_OW 289
10418: NOT
10419: AND
10420: PUSH
10421: LD_EXP 19
10425: PPUSH
10426: LD_INT 3
10428: PPUSH
10429: CALL_OW 289
10433: NOT
10434: AND
10435: PUSH
10436: LD_EXP 19
10440: PPUSH
10441: LD_INT 2
10443: PPUSH
10444: CALL_OW 289
10448: NOT
10449: AND
10450: IFFALSE 10467
10452: GO 10454
10454: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10455: LD_EXP 19
10459: PPUSH
10460: LD_INT 4
10462: PPUSH
10463: CALL_OW 235
10467: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10468: LD_EXP 20
10472: PPUSH
10473: CALL_OW 305
10477: PUSH
10478: LD_EXP 20
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 289
10490: NOT
10491: AND
10492: PUSH
10493: LD_EXP 20
10497: PPUSH
10498: LD_INT 2
10500: PPUSH
10501: CALL_OW 289
10505: NOT
10506: AND
10507: PUSH
10508: LD_EXP 20
10512: PPUSH
10513: LD_INT 3
10515: PPUSH
10516: CALL_OW 289
10520: NOT
10521: AND
10522: IFFALSE 10539
10524: GO 10526
10526: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10527: LD_EXP 20
10531: PPUSH
10532: LD_INT 4
10534: PPUSH
10535: CALL_OW 235
10539: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10540: LD_EXP 21
10544: PPUSH
10545: CALL_OW 305
10549: PUSH
10550: LD_EXP 21
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: CALL_OW 289
10562: NOT
10563: AND
10564: PUSH
10565: LD_EXP 21
10569: PPUSH
10570: LD_INT 2
10572: PPUSH
10573: CALL_OW 289
10577: NOT
10578: AND
10579: PUSH
10580: LD_EXP 21
10584: PPUSH
10585: LD_INT 3
10587: PPUSH
10588: CALL_OW 289
10592: NOT
10593: AND
10594: IFFALSE 10611
10596: GO 10598
10598: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10599: LD_EXP 21
10603: PPUSH
10604: LD_INT 4
10606: PPUSH
10607: CALL_OW 235
10611: END
// every 0 0$1 do var i ;
10612: GO 10614
10614: DISABLE
10615: LD_INT 0
10617: PPUSH
// begin enable ;
10618: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10619: LD_ADDR_VAR 0 1
10623: PUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 4
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 69
10638: PUSH
10639: FOR_IN
10640: IFFALSE 10679
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10642: LD_VAR 0 1
10646: PPUSH
10647: LD_INT 4
10649: PPUSH
10650: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10654: LD_VAR 0 1
10658: PPUSH
10659: LD_INT 4
10661: PPUSH
10662: CALL_OW 308
10666: IFFALSE 10677
// RemoveUnit ( i ) ;
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL_OW 64
// end ;
10677: GO 10639
10679: POP
10680: POP
// end ;
10681: PPOPN 1
10683: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10684: LD_EXP 28
10688: PUSH
10689: LD_INT 1
10691: EQUAL
10692: IFFALSE 11131
10694: GO 10696
10696: DISABLE
10697: LD_INT 0
10699: PPUSH
10700: PPUSH
10701: PPUSH
// begin enable ;
10702: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10703: LD_ADDR_VAR 0 2
10707: PUSH
10708: LD_INT 12
10710: PPUSH
10711: LD_INT 22
10713: PUSH
10714: LD_INT 3
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 21
10723: PUSH
10724: LD_INT 2
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 70
10739: ST_TO_ADDR
// for i in enemyVehs do
10740: LD_ADDR_VAR 0 1
10744: PUSH
10745: LD_VAR 0 2
10749: PUSH
10750: FOR_IN
10751: IFFALSE 11129
// begin if See ( 1 , i ) then
10753: LD_INT 1
10755: PPUSH
10756: LD_VAR 0 1
10760: PPUSH
10761: CALL_OW 292
10765: IFFALSE 11127
// begin disable ;
10767: DISABLE
// DialogueOn ;
10768: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10772: LD_VAR 0 1
10776: PPUSH
10777: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10781: LD_INT 22
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 26
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 2
10803: PUSH
10804: LD_INT 25
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 25
10816: PUSH
10817: LD_INT 2
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 25
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 25
10836: PUSH
10837: LD_INT 4
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 25
10846: PUSH
10847: LD_INT 5
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 25
10856: PUSH
10857: LD_INT 8
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 69
10882: PPUSH
10883: LD_STRING DT1-Sol1-1
10885: PPUSH
10886: LD_STRING DT1-FSol1-1
10888: PPUSH
10889: CALL 13355 0 3
// dec = ShowQuery2 ;
10893: LD_ADDR_VAR 0 3
10897: PUSH
10898: CALL 13965 0 0
10902: ST_TO_ADDR
// if dec = 1 then
10903: LD_VAR 0 3
10907: PUSH
10908: LD_INT 1
10910: EQUAL
10911: IFFALSE 11017
// begin Say ( JMM , D2-JMM-1 ) ;
10913: LD_EXP 1
10917: PPUSH
10918: LD_STRING D2-JMM-1
10920: PPUSH
10921: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10925: LD_EXP 22
10929: PPUSH
10930: LD_STRING D2-Pow-1
10932: PPUSH
10933: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10937: LD_EXP 1
10941: PPUSH
10942: LD_STRING D2a-JMM-1
10944: PPUSH
10945: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10949: LD_EXP 22
10953: PPUSH
10954: LD_STRING D2a-Pow-1
10956: PPUSH
10957: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10961: LD_EXP 1
10965: PPUSH
10966: LD_STRING D2a-JMM-2
10968: PPUSH
10969: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10973: LD_EXP 22
10977: PPUSH
10978: LD_STRING D2a-Pow-2
10980: PPUSH
10981: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10985: LD_EXP 1
10989: PPUSH
10990: LD_STRING D2a-JMM-3
10992: PPUSH
10993: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10997: LD_EXP 22
11001: PPUSH
11002: LD_STRING D2a-Pow-3
11004: PPUSH
11005: CALL_OW 94
// secondPass = 2 ;
11009: LD_ADDR_EXP 28
11013: PUSH
11014: LD_INT 2
11016: ST_TO_ADDR
// end ; if dec = 2 then
11017: LD_VAR 0 3
11021: PUSH
11022: LD_INT 2
11024: EQUAL
11025: IFFALSE 11119
// begin Say ( JMM , D2-JMM-1 ) ;
11027: LD_EXP 1
11031: PPUSH
11032: LD_STRING D2-JMM-1
11034: PPUSH
11035: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11039: LD_EXP 22
11043: PPUSH
11044: LD_STRING D2-Pow-1
11046: PPUSH
11047: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11051: LD_EXP 1
11055: PPUSH
11056: LD_STRING D2b-JMM-1
11058: PPUSH
11059: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11063: LD_EXP 22
11067: PPUSH
11068: LD_STRING D2b-Pow-1
11070: PPUSH
11071: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11075: LD_EXP 1
11079: PPUSH
11080: LD_STRING D2c-JMM-1
11082: PPUSH
11083: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11087: LD_EXP 22
11091: PPUSH
11092: LD_STRING D2c-Pow-1
11094: PPUSH
11095: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11099: LD_EXP 1
11103: PPUSH
11104: LD_STRING D2c-JMM-2
11106: PPUSH
11107: CALL_OW 88
// secondPass = 2 ;
11111: LD_ADDR_EXP 28
11115: PUSH
11116: LD_INT 2
11118: ST_TO_ADDR
// end ; DialogueOff ;
11119: CALL_OW 7
// exit ;
11123: POP
11124: POP
11125: GO 11131
// end ; end ;
11127: GO 10750
11129: POP
11130: POP
// end ;
11131: PPOPN 3
11133: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11134: LD_EXP 29
11138: PUSH
11139: LD_INT 1
11141: EQUAL
11142: IFFALSE 11375
11144: GO 11146
11146: DISABLE
11147: LD_INT 0
11149: PPUSH
11150: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11151: LD_ADDR_VAR 0 2
11155: PUSH
11156: LD_INT 11
11158: PPUSH
11159: LD_INT 22
11161: PUSH
11162: LD_INT 3
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 24
11171: PUSH
11172: LD_INT 250
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PPUSH
11183: CALL_OW 70
11187: ST_TO_ADDR
// enable ;
11188: ENABLE
// for i in vehicles do
11189: LD_ADDR_VAR 0 1
11193: PUSH
11194: LD_VAR 0 2
11198: PUSH
11199: FOR_IN
11200: IFFALSE 11373
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11202: LD_INT 1
11204: PPUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 292
11214: PUSH
11215: LD_EXP 29
11219: PUSH
11220: LD_INT 1
11222: EQUAL
11223: AND
11224: PUSH
11225: LD_EXP 30
11229: PUSH
11230: LD_INT 4
11232: LESSEQUAL
11233: AND
11234: IFFALSE 11371
// begin disable ;
11236: DISABLE
// DialogueOn ;
11237: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11241: LD_INT 22
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 26
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: LD_INT 25
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 25
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 25
11286: PUSH
11287: LD_INT 3
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 25
11296: PUSH
11297: LD_INT 4
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 5
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 25
11316: PUSH
11317: LD_INT 8
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: PPUSH
11338: CALL_OW 69
11342: PPUSH
11343: LD_STRING DT1-Sol1-1
11345: PPUSH
11346: LD_STRING DT1-FSol1-1
11348: PPUSH
11349: CALL 13355 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11353: LD_EXP 1
11357: PPUSH
11358: LD_STRING DT1-JMM-1
11360: PPUSH
11361: CALL_OW 88
// DialogueOff ;
11365: CALL_OW 7
// break ;
11369: GO 11373
// end ; end ;
11371: GO 11199
11373: POP
11374: POP
// end ;
11375: PPOPN 2
11377: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11378: LD_EXP 29
11382: PUSH
11383: LD_INT 1
11385: EQUAL
11386: PUSH
11387: LD_INT 11
11389: PPUSH
11390: LD_INT 22
11392: PUSH
11393: LD_INT 3
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 24
11402: PUSH
11403: LD_INT 251
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 2
11412: PUSH
11413: LD_INT 21
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 21
11425: PUSH
11426: LD_INT 1
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 70
11447: PUSH
11448: LD_INT 0
11450: EQUAL
11451: AND
11452: PUSH
11453: LD_EXP 30
11457: PUSH
11458: LD_INT 3
11460: PUSH
11461: LD_INT 3
11463: PUSH
11464: LD_INT 4
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: PUSH
11472: LD_OWVAR 67
11476: ARRAY
11477: LESSEQUAL
11478: AND
11479: PUSH
11480: LD_EXP 30
11484: PUSH
11485: LD_INT 5
11487: GREATER
11488: AND
11489: IFFALSE 11646
11491: GO 11493
11493: DISABLE
// begin vehicleTeleported = 2 ;
11494: LD_ADDR_EXP 29
11498: PUSH
11499: LD_INT 2
11501: ST_TO_ADDR
// DialogueOn ;
11502: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11506: LD_EXP 1
11510: PPUSH
11511: LD_STRING DT1a-JMM-1
11513: PPUSH
11514: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11518: LD_INT 22
11520: PUSH
11521: LD_INT 1
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 26
11530: PUSH
11531: LD_INT 1
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 2
11540: PUSH
11541: LD_INT 25
11543: PUSH
11544: LD_INT 1
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 25
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 25
11563: PUSH
11564: LD_INT 3
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 25
11573: PUSH
11574: LD_INT 4
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 25
11583: PUSH
11584: LD_INT 5
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 25
11593: PUSH
11594: LD_INT 8
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: LIST
11614: PPUSH
11615: CALL_OW 69
11619: PPUSH
11620: LD_STRING DT1a-Sol1-1
11622: PPUSH
11623: LD_STRING DT1a-FSol1-1
11625: PPUSH
11626: CALL 13355 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11630: LD_EXP 1
11634: PPUSH
11635: LD_STRING DT1a-JMM-2
11637: PPUSH
11638: CALL_OW 88
// DialogueOff ;
11642: CALL_OW 7
// end ;
11646: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11647: LD_EXP 29
11651: PUSH
11652: LD_INT 3
11654: EQUAL
11655: PUSH
11656: LD_EXP 30
11660: PUSH
11661: LD_INT 4
11663: GREATER
11664: AND
11665: IFFALSE 11876
11667: GO 11669
11669: DISABLE
11670: LD_INT 0
11672: PPUSH
11673: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11674: LD_ADDR_VAR 0 2
11678: PUSH
11679: LD_INT 11
11681: PPUSH
11682: LD_INT 22
11684: PUSH
11685: LD_INT 3
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 24
11694: PUSH
11695: LD_INT 250
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 70
11710: ST_TO_ADDR
// enable ;
11711: ENABLE
// for i in vehicles do
11712: LD_ADDR_VAR 0 1
11716: PUSH
11717: LD_VAR 0 2
11721: PUSH
11722: FOR_IN
11723: IFFALSE 11874
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11725: LD_INT 1
11727: PPUSH
11728: LD_VAR 0 1
11732: PPUSH
11733: CALL_OW 292
11737: PUSH
11738: LD_EXP 29
11742: PUSH
11743: LD_INT 3
11745: EQUAL
11746: AND
11747: IFFALSE 11872
// begin disable ;
11749: DISABLE
// DialogueOn ;
11750: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11754: LD_INT 22
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 26
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 2
11776: PUSH
11777: LD_INT 25
11779: PUSH
11780: LD_INT 1
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 25
11789: PUSH
11790: LD_INT 2
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 25
11799: PUSH
11800: LD_INT 3
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 25
11809: PUSH
11810: LD_INT 4
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 5
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 25
11829: PUSH
11830: LD_INT 8
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: PPUSH
11856: LD_STRING DT2-Sol1-1
11858: PPUSH
11859: LD_STRING DT2-FSol1-1
11861: PPUSH
11862: CALL 13355 0 3
// DialogueOff ;
11866: CALL_OW 7
// break ;
11870: GO 11874
// end ; end ;
11872: GO 11722
11874: POP
11875: POP
// end ;
11876: PPOPN 2
11878: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11879: LD_EXP 29
11883: PUSH
11884: LD_INT 3
11886: EQUAL
11887: PUSH
11888: LD_INT 11
11890: PPUSH
11891: LD_INT 22
11893: PUSH
11894: LD_INT 3
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 24
11903: PUSH
11904: LD_INT 251
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 2
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 2
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: LD_INT 21
11926: PUSH
11927: LD_INT 1
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: PPUSH
11944: CALL_OW 70
11948: PUSH
11949: LD_INT 0
11951: EQUAL
11952: AND
11953: PUSH
11954: LD_EXP 30
11958: PUSH
11959: LD_INT 6
11961: PUSH
11962: LD_INT 6
11964: PUSH
11965: LD_INT 8
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_OWVAR 67
11977: ARRAY
11978: EQUAL
11979: AND
11980: IFFALSE 12137
11982: GO 11984
11984: DISABLE
// begin vehicleTeleported = 4 ;
11985: LD_ADDR_EXP 29
11989: PUSH
11990: LD_INT 4
11992: ST_TO_ADDR
// DialogueOn ;
11993: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11997: LD_EXP 1
12001: PPUSH
12002: LD_STRING DT2a-JMM-1
12004: PPUSH
12005: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
12009: LD_INT 22
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 26
12021: PUSH
12022: LD_INT 1
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: LD_INT 25
12034: PUSH
12035: LD_INT 1
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 25
12044: PUSH
12045: LD_INT 2
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 25
12054: PUSH
12055: LD_INT 3
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 25
12064: PUSH
12065: LD_INT 4
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 25
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 25
12084: PUSH
12085: LD_INT 8
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: PPUSH
12106: CALL_OW 69
12110: PPUSH
12111: LD_STRING DT2a-Sol1-1
12113: PPUSH
12114: LD_STRING DT2a-FSol1-1
12116: PPUSH
12117: CALL 13355 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12121: LD_EXP 3
12125: PPUSH
12126: LD_STRING DT2a-Don-1
12128: PPUSH
12129: CALL_OW 88
// DialogueOff ;
12133: CALL_OW 7
// end ;
12137: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12138: LD_INT 1
12140: PPUSH
12141: LD_INT 45
12143: PPUSH
12144: LD_INT 74
12146: PPUSH
12147: CALL_OW 293
12151: IFFALSE 12319
12153: GO 12155
12155: DISABLE
// begin DialogueOn ;
12156: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12160: LD_INT 36
12162: PPUSH
12163: LD_INT 55
12165: PPUSH
12166: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12170: LD_INT 22
12172: PUSH
12173: LD_INT 1
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 26
12182: PUSH
12183: LD_INT 1
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 2
12192: PUSH
12193: LD_INT 25
12195: PUSH
12196: LD_INT 1
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 25
12205: PUSH
12206: LD_INT 2
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: LD_INT 25
12215: PUSH
12216: LD_INT 3
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 25
12225: PUSH
12226: LD_INT 4
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 25
12235: PUSH
12236: LD_INT 5
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 25
12245: PUSH
12246: LD_INT 8
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 69
12271: PPUSH
12272: LD_STRING D5-Sol1-1
12274: PPUSH
12275: LD_STRING D5-FSol1-
12277: PPUSH
12278: CALL 13355 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12282: LD_EXP 31
12286: PUSH
12287: LD_INT 1
12289: EQUAL
12290: PUSH
12291: LD_EXP 3
12295: PPUSH
12296: CALL_OW 300
12300: AND
12301: IFFALSE 12315
// Say ( Donaldson , D5-Don-1 ) ;
12303: LD_EXP 3
12307: PPUSH
12308: LD_STRING D5-Don-1
12310: PPUSH
12311: CALL_OW 88
// DialogueOff ;
12315: CALL_OW 7
// end ;
12319: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12320: LD_INT 1
12322: PPUSH
12323: LD_INT 10
12325: PPUSH
12326: CALL_OW 292
12330: PUSH
12331: LD_INT 1
12333: PPUSH
12334: LD_INT 137
12336: PPUSH
12337: CALL_OW 292
12341: OR
12342: IFFALSE 12486
12344: GO 12346
12346: DISABLE
// begin DialogueOn ;
12347: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12351: LD_INT 22
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 26
12363: PUSH
12364: LD_INT 1
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 2
12373: PUSH
12374: LD_INT 25
12376: PUSH
12377: LD_INT 1
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 25
12386: PUSH
12387: LD_INT 2
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 25
12396: PUSH
12397: LD_INT 3
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 25
12406: PUSH
12407: LD_INT 4
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 25
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 25
12426: PUSH
12427: LD_INT 8
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 69
12452: PPUSH
12453: LD_STRING DT3-Sol1-1
12455: PPUSH
12456: LD_STRING DT3-FSol1-1
12458: PPUSH
12459: CALL 13355 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12463: LD_EXP 1
12467: PPUSH
12468: LD_STRING DT3-JMM-1
12470: PPUSH
12471: CALL_OW 88
// DialogueOff ;
12475: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12479: LD_STRING M2
12481: PPUSH
12482: CALL_OW 337
// end ;
12486: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12487: LD_EXP 43
12491: PUSH
12492: LD_INT 0
12494: EQUAL
12495: IFFALSE 12578
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
// begin enable ;
12503: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12504: LD_ADDR_VAR 0 1
12508: PUSH
12509: LD_INT 10
12511: PPUSH
12512: LD_INT 22
12514: PUSH
12515: LD_INT 3
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 58
12534: PUSH
12535: EMPTY
12536: LIST
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 70
12547: PUSH
12548: FOR_IN
12549: IFFALSE 12576
// if GetLives ( i ) < 1000 then
12551: LD_VAR 0 1
12555: PPUSH
12556: CALL_OW 256
12560: PUSH
12561: LD_INT 1000
12563: LESS
12564: IFFALSE 12574
// ruEscape = 1 ;
12566: LD_ADDR_EXP 43
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
12574: GO 12548
12576: POP
12577: POP
// end ;
12578: PPOPN 1
12580: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12581: LD_INT 3
12583: PPUSH
12584: CALL_OW 303
12588: PUSH
12589: LD_INT 4
12591: PPUSH
12592: CALL_OW 303
12596: OR
12597: PUSH
12598: LD_INT 22
12600: PPUSH
12601: LD_INT 22
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PPUSH
12611: CALL_OW 70
12615: PUSH
12616: LD_INT 0
12618: GREATER
12619: OR
12620: PUSH
12621: LD_EXP 43
12625: PUSH
12626: LD_INT 1
12628: EQUAL
12629: OR
12630: IFFALSE 12861
12632: GO 12634
12634: DISABLE
12635: LD_INT 0
12637: PPUSH
12638: PPUSH
12639: PPUSH
// begin ruAI = 0 ;
12640: LD_ADDR_EXP 42
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12648: LD_ADDR_VAR 0 3
12652: PUSH
12653: LD_INT 10
12655: PPUSH
12656: LD_INT 22
12658: PUSH
12659: LD_INT 3
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 21
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 58
12678: PUSH
12679: EMPTY
12680: LIST
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: LIST
12686: PPUSH
12687: CALL_OW 70
12691: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12692: LD_EXP 35
12696: PPUSH
12697: CALL_OW 122
// wait ( 0 0$1 ) ;
12701: LD_INT 35
12703: PPUSH
12704: CALL_OW 67
// DialogueOn ;
12708: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12712: LD_EXP 1
12716: PPUSH
12717: LD_STRING D6-JMM-1
12719: PPUSH
12720: CALL_OW 88
// DialogueOff ;
12724: CALL_OW 7
// if vehs > 0 then
12728: LD_VAR 0 3
12732: PUSH
12733: LD_INT 0
12735: GREATER
12736: IFFALSE 12806
// for i := 1 to RuScientists do
12738: LD_ADDR_VAR 0 1
12742: PUSH
12743: DOUBLE
12744: LD_INT 1
12746: DEC
12747: ST_TO_ADDR
12748: LD_EXP 35
12752: PUSH
12753: FOR_TO
12754: IFFALSE 12802
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12756: LD_EXP 35
12760: PUSH
12761: LD_VAR 0 1
12765: ARRAY
12766: PPUSH
12767: LD_INT 3
12769: PUSH
12770: LD_INT 60
12772: PUSH
12773: EMPTY
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PPUSH
12780: CALL_OW 72
12784: PPUSH
12785: LD_VAR 0 3
12789: PUSH
12790: LD_VAR 0 1
12794: ARRAY
12795: PPUSH
12796: CALL_OW 120
12800: GO 12753
12802: POP
12803: POP
12804: GO 12861
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12806: LD_EXP 35
12810: PUSH
12811: LD_VAR 0 1
12815: ARRAY
12816: PPUSH
12817: LD_INT 3
12819: PUSH
12820: LD_INT 60
12822: PUSH
12823: EMPTY
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 72
12834: PPUSH
12835: LD_INT 13
12837: PUSH
12838: LD_INT 14
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 1
12847: PPUSH
12848: LD_INT 2
12850: PPUSH
12851: CALL_OW 12
12855: ARRAY
12856: PPUSH
12857: CALL_OW 113
// end ;
12861: PPOPN 3
12863: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
12864: LD_EXP 42
12868: PUSH
12869: LD_INT 0
12871: EQUAL
12872: IFFALSE 13244
12874: GO 12876
12876: DISABLE
12877: LD_INT 0
12879: PPUSH
12880: PPUSH
12881: PPUSH
12882: PPUSH
// begin enable ;
12883: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
12884: LD_EXP 35
12888: PPUSH
12889: LD_INT 2
12891: PUSH
12892: LD_INT 95
12894: PUSH
12895: LD_INT 13
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 95
12904: PUSH
12905: LD_INT 14
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: PPUSH
12917: CALL_OW 72
12921: PUSH
12922: LD_INT 33
12924: PUSH
12925: LD_INT 1
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 23
12934: PUSH
12935: LD_INT 3
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 2
12944: PUSH
12945: LD_INT 95
12947: PUSH
12948: LD_INT 13
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 95
12957: PUSH
12958: LD_INT 14
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: OR
12980: IFFALSE 13169
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12982: LD_ADDR_VAR 0 2
12986: PUSH
12987: LD_EXP 35
12991: PPUSH
12992: LD_INT 2
12994: PUSH
12995: LD_INT 95
12997: PUSH
12998: LD_INT 13
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 95
13007: PUSH
13008: LD_INT 14
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 72
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: ST_TO_ADDR
// if not unit then
13029: LD_VAR 0 2
13033: NOT
13034: IFFALSE 13169
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
13036: LD_ADDR_VAR 0 4
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: LD_INT 95
13046: PUSH
13047: LD_INT 13
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 95
13056: PUSH
13057: LD_INT 14
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 33
13071: PUSH
13072: LD_INT 1
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 23
13081: PUSH
13082: LD_INT 3
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: PPUSH
13094: CALL_OW 69
13098: ST_TO_ADDR
// if not tmp then
13099: LD_VAR 0 4
13103: NOT
13104: IFFALSE 13108
// exit ;
13106: GO 13244
// for i in tmp do
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_VAR 0 4
13117: PUSH
13118: FOR_IN
13119: IFFALSE 13167
// if IsDrivenBy ( i ) in RuScientists then
13121: LD_VAR 0 1
13125: PPUSH
13126: CALL_OW 311
13130: PUSH
13131: LD_EXP 35
13135: IN
13136: IFFALSE 13165
// begin unit := IsDrivenBy ( i ) ;
13138: LD_ADDR_VAR 0 2
13142: PUSH
13143: LD_VAR 0 1
13147: PPUSH
13148: CALL_OW 311
13152: ST_TO_ADDR
// veh := i ;
13153: LD_ADDR_VAR 0 3
13157: PUSH
13158: LD_VAR 0 1
13162: ST_TO_ADDR
// break ;
13163: GO 13167
// end ;
13165: GO 13118
13167: POP
13168: POP
// end ; end ; if not unit then
13169: LD_VAR 0 2
13173: NOT
13174: IFFALSE 13178
// exit ;
13176: GO 13244
// RuScientists = RuScientists diff unit ;
13178: LD_ADDR_EXP 35
13182: PUSH
13183: LD_EXP 35
13187: PUSH
13188: LD_VAR 0 2
13192: DIFF
13193: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13194: LD_VAR 0 2
13198: PPUSH
13199: CALL_OW 64
// if veh then
13203: LD_VAR 0 3
13207: IFFALSE 13244
// begin if GetWeapon ( veh ) = 49 then
13209: LD_VAR 0 3
13213: PPUSH
13214: CALL_OW 264
13218: PUSH
13219: LD_INT 49
13221: EQUAL
13222: IFFALSE 13235
// KillUnit ( veh ) else
13224: LD_VAR 0 3
13228: PPUSH
13229: CALL_OW 66
13233: GO 13244
// RemoveUnit ( veh ) ;
13235: LD_VAR 0 3
13239: PPUSH
13240: CALL_OW 64
// end ; end ; end_of_file
13244: PPOPN 4
13246: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13247: LD_INT 0
13249: PPUSH
13250: PPUSH
// if exist_mode then
13251: LD_VAR 0 2
13255: IFFALSE 13274
// unit := CreateCharacter ( ident ) else
13257: LD_ADDR_VAR 0 4
13261: PUSH
13262: LD_VAR 0 1
13266: PPUSH
13267: CALL_OW 34
13271: ST_TO_ADDR
13272: GO 13289
// unit := NewCharacter ( ident ) ;
13274: LD_ADDR_VAR 0 4
13278: PUSH
13279: LD_VAR 0 1
13283: PPUSH
13284: CALL_OW 25
13288: ST_TO_ADDR
// result := unit ;
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: LD_VAR 0 4
13298: ST_TO_ADDR
// end ;
13299: LD_VAR 0 3
13303: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13304: LD_INT 0
13306: PPUSH
13307: PPUSH
// for i in charactersList do
13308: LD_ADDR_VAR 0 4
13312: PUSH
13313: LD_VAR 0 1
13317: PUSH
13318: FOR_IN
13319: IFFALSE 13348
// begin if IsOk ( i ) then
13321: LD_VAR 0 4
13325: PPUSH
13326: CALL_OW 302
13330: IFFALSE 13346
// SaveCharacters ( i , ident ) ;
13332: LD_VAR 0 4
13336: PPUSH
13337: LD_VAR 0 2
13341: PPUSH
13342: CALL_OW 38
// end ;
13346: GO 13318
13348: POP
13349: POP
// end ;
13350: LD_VAR 0 3
13354: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13355: LD_INT 0
13357: PPUSH
13358: PPUSH
13359: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13360: LD_ADDR_VAR 0 1
13364: PUSH
13365: LD_VAR 0 1
13369: PUSH
13370: LD_EXP 1
13374: PUSH
13375: LD_EXP 7
13379: PUSH
13380: LD_EXP 3
13384: PUSH
13385: LD_EXP 4
13389: PUSH
13390: LD_EXP 5
13394: PUSH
13395: LD_EXP 2
13399: PUSH
13400: LD_EXP 12
13404: PUSH
13405: LD_EXP 13
13409: PUSH
13410: LD_EXP 9
13414: PUSH
13415: LD_EXP 11
13419: PUSH
13420: LD_EXP 6
13424: PUSH
13425: LD_EXP 8
13429: PUSH
13430: LD_EXP 10
13434: PUSH
13435: LD_EXP 22
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: DIFF
13456: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13457: LD_ADDR_VAR 0 6
13461: PUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL_OW 12
13474: ST_TO_ADDR
// for i = 1 to characters do
13475: LD_ADDR_VAR 0 5
13479: PUSH
13480: DOUBLE
13481: LD_INT 1
13483: DEC
13484: ST_TO_ADDR
13485: LD_VAR 0 1
13489: PUSH
13490: FOR_TO
13491: IFFALSE 13601
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13493: LD_VAR 0 5
13497: PUSH
13498: LD_VAR 0 6
13502: EQUAL
13503: PUSH
13504: LD_VAR 0 1
13508: PUSH
13509: LD_VAR 0 5
13513: ARRAY
13514: PPUSH
13515: CALL_OW 258
13519: PUSH
13520: LD_INT 1
13522: EQUAL
13523: AND
13524: IFFALSE 13546
// Say ( characters [ i ] , dialogMID ) ;
13526: LD_VAR 0 1
13530: PUSH
13531: LD_VAR 0 5
13535: ARRAY
13536: PPUSH
13537: LD_VAR 0 2
13541: PPUSH
13542: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13546: LD_VAR 0 5
13550: PUSH
13551: LD_VAR 0 6
13555: EQUAL
13556: PUSH
13557: LD_VAR 0 1
13561: PUSH
13562: LD_VAR 0 5
13566: ARRAY
13567: PPUSH
13568: CALL_OW 258
13572: PUSH
13573: LD_INT 2
13575: EQUAL
13576: AND
13577: IFFALSE 13599
// Say ( characters [ i ] , dialogFID ) ;
13579: LD_VAR 0 1
13583: PUSH
13584: LD_VAR 0 5
13588: ARRAY
13589: PPUSH
13590: LD_VAR 0 3
13594: PPUSH
13595: CALL_OW 88
// end ;
13599: GO 13490
13601: POP
13602: POP
// end ;
13603: LD_VAR 0 4
13607: RET
// export function PrepareDifficulty ; var tmp ; begin
13608: LD_INT 0
13610: PPUSH
13611: PPUSH
// if Difficulty = 1 then
13612: LD_OWVAR 67
13616: PUSH
13617: LD_INT 1
13619: EQUAL
13620: IFFALSE 13638
// begin RuSolMinLevel = 8 ;
13622: LD_ADDR_EXP 37
13626: PUSH
13627: LD_INT 8
13629: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13630: LD_ADDR_EXP 38
13634: PUSH
13635: LD_INT 10
13637: ST_TO_ADDR
// end ; if Difficulty = 2 then
13638: LD_OWVAR 67
13642: PUSH
13643: LD_INT 2
13645: EQUAL
13646: IFFALSE 13740
// begin RuSolMinLevel = 9 ;
13648: LD_ADDR_EXP 37
13652: PUSH
13653: LD_INT 9
13655: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13656: LD_ADDR_EXP 38
13660: PUSH
13661: LD_INT 10
13663: ST_TO_ADDR
// uc_nation = 3 ;
13664: LD_ADDR_OWVAR 21
13668: PUSH
13669: LD_INT 3
13671: ST_TO_ADDR
// uc_side = 3 ;
13672: LD_ADDR_OWVAR 20
13676: PUSH
13677: LD_INT 3
13679: ST_TO_ADDR
// bc_level = 10 ;
13680: LD_ADDR_OWVAR 43
13684: PUSH
13685: LD_INT 10
13687: ST_TO_ADDR
// bc_type = b_turret ;
13688: LD_ADDR_OWVAR 42
13692: PUSH
13693: LD_INT 33
13695: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13696: LD_ADDR_VAR 0 2
13700: PUSH
13701: LD_INT 86
13703: PPUSH
13704: LD_INT 34
13706: PPUSH
13707: LD_INT 2
13709: PPUSH
13710: CALL_OW 47
13714: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13715: LD_VAR 0 2
13719: PPUSH
13720: LD_INT 49
13722: PPUSH
13723: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13727: LD_INT 64
13729: PPUSH
13730: LD_INT 3
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: CALL_OW 322
// end ; if Difficulty = 3 then
13740: LD_OWVAR 67
13744: PUSH
13745: LD_INT 3
13747: EQUAL
13748: IFFALSE 13886
// begin RuSolMinLevel = 10 ;
13750: LD_ADDR_EXP 37
13754: PUSH
13755: LD_INT 10
13757: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13758: LD_ADDR_EXP 38
13762: PUSH
13763: LD_INT 10
13765: ST_TO_ADDR
// uc_nation = 3 ;
13766: LD_ADDR_OWVAR 21
13770: PUSH
13771: LD_INT 3
13773: ST_TO_ADDR
// uc_side = 3 ;
13774: LD_ADDR_OWVAR 20
13778: PUSH
13779: LD_INT 3
13781: ST_TO_ADDR
// bc_level = 10 ;
13782: LD_ADDR_OWVAR 43
13786: PUSH
13787: LD_INT 10
13789: ST_TO_ADDR
// bc_type = b_turret ;
13790: LD_ADDR_OWVAR 42
13794: PUSH
13795: LD_INT 33
13797: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13798: LD_ADDR_VAR 0 2
13802: PUSH
13803: LD_INT 86
13805: PPUSH
13806: LD_INT 34
13808: PPUSH
13809: LD_INT 2
13811: PPUSH
13812: CALL_OW 47
13816: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13817: LD_VAR 0 2
13821: PPUSH
13822: LD_INT 49
13824: PPUSH
13825: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13829: LD_ADDR_VAR 0 2
13833: PUSH
13834: LD_INT 93
13836: PPUSH
13837: LD_INT 31
13839: PPUSH
13840: LD_INT 2
13842: PPUSH
13843: CALL_OW 47
13847: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13848: LD_VAR 0 2
13852: PPUSH
13853: LD_INT 49
13855: PPUSH
13856: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13860: LD_INT 64
13862: PPUSH
13863: LD_INT 3
13865: PPUSH
13866: LD_INT 1
13868: PPUSH
13869: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13873: LD_INT 65
13875: PPUSH
13876: LD_INT 3
13878: PPUSH
13879: LD_INT 1
13881: PPUSH
13882: CALL_OW 322
// end ; end ;
13886: LD_VAR 0 1
13890: RET
// export function ShowQuery1 ; begin
13891: LD_INT 0
13893: PPUSH
// case query ( Q1 ) of 1 :
13894: LD_STRING Q1
13896: PPUSH
13897: CALL_OW 97
13901: PUSH
13902: LD_INT 1
13904: DOUBLE
13905: EQUAL
13906: IFTRUE 13910
13908: GO 13921
13910: POP
// result = 1 ; 2 :
13911: LD_ADDR_VAR 0 1
13915: PUSH
13916: LD_INT 1
13918: ST_TO_ADDR
13919: GO 13960
13921: LD_INT 2
13923: DOUBLE
13924: EQUAL
13925: IFTRUE 13929
13927: GO 13940
13929: POP
// result = 2 ; 3 :
13930: LD_ADDR_VAR 0 1
13934: PUSH
13935: LD_INT 2
13937: ST_TO_ADDR
13938: GO 13960
13940: LD_INT 3
13942: DOUBLE
13943: EQUAL
13944: IFTRUE 13948
13946: GO 13959
13948: POP
// result = 3 ; end ;
13949: LD_ADDR_VAR 0 1
13953: PUSH
13954: LD_INT 3
13956: ST_TO_ADDR
13957: GO 13960
13959: POP
// end ;
13960: LD_VAR 0 1
13964: RET
// export function ShowQuery2 ; begin
13965: LD_INT 0
13967: PPUSH
// case query ( Q1a ) of 1 :
13968: LD_STRING Q1a
13970: PPUSH
13971: CALL_OW 97
13975: PUSH
13976: LD_INT 1
13978: DOUBLE
13979: EQUAL
13980: IFTRUE 13984
13982: GO 13995
13984: POP
// result = 1 ; 2 :
13985: LD_ADDR_VAR 0 1
13989: PUSH
13990: LD_INT 1
13992: ST_TO_ADDR
13993: GO 14034
13995: LD_INT 2
13997: DOUBLE
13998: EQUAL
13999: IFTRUE 14003
14001: GO 14014
14003: POP
// result = 2 ; 3 :
14004: LD_ADDR_VAR 0 1
14008: PUSH
14009: LD_INT 2
14011: ST_TO_ADDR
14012: GO 14034
14014: LD_INT 3
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14022
14020: GO 14033
14022: POP
// result = 3 ; end ;
14023: LD_ADDR_VAR 0 1
14027: PUSH
14028: LD_INT 3
14030: ST_TO_ADDR
14031: GO 14034
14033: POP
// end ;
14034: LD_VAR 0 1
14038: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
14039: LD_INT 0
14041: PPUSH
14042: PPUSH
14043: PPUSH
14044: PPUSH
14045: PPUSH
// for i = 1 to count do
14046: LD_ADDR_VAR 0 8
14050: PUSH
14051: DOUBLE
14052: LD_INT 1
14054: DEC
14055: ST_TO_ADDR
14056: LD_VAR 0 6
14060: PUSH
14061: FOR_TO
14062: IFFALSE 14143
// begin uc_side = side ;
14064: LD_ADDR_OWVAR 20
14068: PUSH
14069: LD_VAR 0 1
14073: ST_TO_ADDR
// uc_nation = nation ;
14074: LD_ADDR_OWVAR 21
14078: PUSH
14079: LD_VAR 0 2
14083: ST_TO_ADDR
// hc_gallery =  ;
14084: LD_ADDR_OWVAR 33
14088: PUSH
14089: LD_STRING 
14091: ST_TO_ADDR
// hc_name =  ;
14092: LD_ADDR_OWVAR 26
14096: PUSH
14097: LD_STRING 
14099: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
14100: LD_INT 0
14102: PPUSH
14103: LD_VAR 0 5
14107: PPUSH
14108: LD_VAR 0 4
14112: PPUSH
14113: CALL_OW 380
// un = CreateHuman ;
14117: LD_ADDR_VAR 0 10
14121: PUSH
14122: CALL_OW 44
14126: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14127: LD_VAR 0 10
14131: PPUSH
14132: LD_VAR 0 3
14136: PPUSH
14137: CALL_OW 52
// end ;
14141: GO 14061
14143: POP
14144: POP
// end ;
14145: LD_VAR 0 7
14149: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14150: LD_INT 0
14152: PPUSH
14153: PPUSH
14154: PPUSH
14155: PPUSH
14156: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14157: LD_ADDR_VAR 0 8
14161: PUSH
14162: LD_INT 48
14164: PUSH
14165: LD_INT 49
14167: PUSH
14168: LD_INT 50
14170: PUSH
14171: LD_INT 20
14173: PUSH
14174: LD_INT 1
14176: PUSH
14177: LD_INT 51
14179: PUSH
14180: LD_INT 52
14182: PUSH
14183: LD_INT 69
14185: PUSH
14186: LD_INT 39
14188: PUSH
14189: LD_INT 34
14191: PUSH
14192: LD_INT 40
14194: PUSH
14195: LD_INT 53
14197: PUSH
14198: LD_INT 71
14200: PUSH
14201: LD_INT 57
14203: PUSH
14204: LD_INT 58
14206: PUSH
14207: LD_INT 44
14209: PUSH
14210: LD_INT 32
14212: PUSH
14213: LD_INT 27
14215: PUSH
14216: LD_INT 23
14218: PUSH
14219: LD_INT 33
14221: PUSH
14222: LD_INT 59
14224: PUSH
14225: LD_INT 54
14227: PUSH
14228: LD_INT 55
14230: PUSH
14231: LD_INT 56
14233: PUSH
14234: LD_INT 63
14236: PUSH
14237: LD_INT 64
14239: PUSH
14240: LD_INT 65
14242: PUSH
14243: LD_INT 30
14245: PUSH
14246: LD_INT 31
14248: PUSH
14249: LD_INT 21
14251: PUSH
14252: LD_INT 22
14254: PUSH
14255: LD_INT 25
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14292: LD_ADDR_VAR 0 5
14296: PUSH
14297: DOUBLE
14298: LD_INT 1
14300: DEC
14301: ST_TO_ADDR
14302: LD_VAR 0 8
14306: PUSH
14307: FOR_TO
14308: IFFALSE 14384
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14310: LD_VAR 0 8
14314: PUSH
14315: LD_VAR 0 5
14319: ARRAY
14320: PPUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL_OW 321
14330: PUSH
14331: LD_INT 1
14333: EQUAL
14334: PUSH
14335: LD_VAR 0 8
14339: PUSH
14340: LD_VAR 0 5
14344: ARRAY
14345: PPUSH
14346: LD_VAR 0 3
14350: PPUSH
14351: CALL_OW 482
14355: PUSH
14356: LD_INT 1
14358: EQUAL
14359: AND
14360: IFFALSE 14382
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14362: LD_VAR 0 2
14366: PPUSH
14367: LD_VAR 0 8
14371: PUSH
14372: LD_VAR 0 5
14376: ARRAY
14377: PPUSH
14378: CALL_OW 184
14382: GO 14307
14384: POP
14385: POP
// end ;
14386: LD_VAR 0 4
14390: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
14395: PPUSH
14396: PPUSH
14397: PPUSH
14398: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14399: LD_ADDR_VAR 0 8
14403: PUSH
14404: LD_VAR 0 2
14408: PPUSH
14409: CALL_OW 313
14413: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14414: LD_ADDR_VAR 0 9
14418: PUSH
14419: LD_VAR 0 3
14423: PPUSH
14424: LD_INT 22
14426: PUSH
14427: LD_VAR 0 1
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 25
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 24
14448: PUSH
14449: LD_INT 750
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 3
14458: PUSH
14459: LD_INT 54
14461: PUSH
14462: EMPTY
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 70
14479: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14480: LD_ADDR_VAR 0 6
14484: PUSH
14485: LD_VAR 0 3
14489: PPUSH
14490: LD_INT 22
14492: PUSH
14493: LD_VAR 0 1
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 21
14504: PUSH
14505: LD_INT 3
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: LD_INT 24
14517: PUSH
14518: LD_INT 1000
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: PPUSH
14537: CALL_OW 70
14541: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14542: LD_VAR 0 6
14546: NOT
14547: PUSH
14548: LD_INT 22
14550: PUSH
14551: LD_VAR 0 1
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 25
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 250
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 69
14589: NOT
14590: AND
14591: IFFALSE 14595
// exit ;
14593: GO 14777
// if buildings_list > 0 and engineerOkInside then
14595: LD_VAR 0 6
14599: PUSH
14600: LD_INT 0
14602: GREATER
14603: PUSH
14604: LD_VAR 0 8
14608: AND
14609: IFFALSE 14620
// ComExitBuilding ( engineerOkInside ) ;
14611: LD_VAR 0 8
14615: PPUSH
14616: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14620: LD_VAR 0 6
14624: PUSH
14625: LD_INT 0
14627: GREATER
14628: PUSH
14629: LD_VAR 0 9
14633: PUSH
14634: LD_INT 0
14636: GREATER
14637: AND
14638: IFFALSE 14658
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14640: LD_VAR 0 9
14644: PPUSH
14645: LD_VAR 0 6
14649: PUSH
14650: LD_INT 1
14652: ARRAY
14653: PPUSH
14654: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14658: LD_VAR 0 6
14662: PUSH
14663: LD_INT 0
14665: EQUAL
14666: PUSH
14667: LD_VAR 0 4
14671: PUSH
14672: LD_INT 0
14674: EQUAL
14675: AND
14676: PUSH
14677: LD_VAR 0 9
14681: PUSH
14682: LD_INT 0
14684: GREATER
14685: AND
14686: IFFALSE 14702
// ComEnterUnit ( engineerOkOutside , building ) ;
14688: LD_VAR 0 9
14692: PPUSH
14693: LD_VAR 0 2
14697: PPUSH
14698: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14702: LD_VAR 0 9
14706: PUSH
14707: LD_INT 0
14709: GREATER
14710: PUSH
14711: LD_VAR 0 6
14715: PUSH
14716: LD_INT 0
14718: EQUAL
14719: AND
14720: PUSH
14721: LD_VAR 0 4
14725: PUSH
14726: LD_INT 0
14728: GREATER
14729: AND
14730: IFFALSE 14777
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14732: LD_VAR 0 9
14736: PPUSH
14737: LD_VAR 0 4
14741: PUSH
14742: LD_INT 1
14744: ARRAY
14745: PPUSH
14746: LD_VAR 0 4
14750: PUSH
14751: LD_INT 2
14753: ARRAY
14754: PPUSH
14755: LD_VAR 0 4
14759: PUSH
14760: LD_INT 3
14762: ARRAY
14763: PPUSH
14764: LD_VAR 0 4
14768: PUSH
14769: LD_INT 4
14771: ARRAY
14772: PPUSH
14773: CALL_OW 145
// end ;
14777: LD_VAR 0 5
14781: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
14791: PPUSH
14792: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14793: LD_ADDR_VAR 0 6
14797: PUSH
14798: LD_INT 22
14800: PUSH
14801: LD_VAR 0 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 25
14812: PUSH
14813: LD_INT 4
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 24
14822: PUSH
14823: LD_INT 251
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 69
14839: PUSH
14840: LD_EXP 35
14844: PUSH
14845: EMPTY
14846: LIST
14847: DIFF
14848: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14849: LD_ADDR_VAR 0 7
14853: PUSH
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_INT 22
14861: PUSH
14862: LD_VAR 0 1
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 25
14873: PUSH
14874: LD_INT 4
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 50
14883: PUSH
14884: EMPTY
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: PPUSH
14892: CALL_OW 70
14896: PUSH
14897: LD_EXP 35
14901: PUSH
14902: EMPTY
14903: LIST
14904: DIFF
14905: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14906: LD_ADDR_VAR 0 10
14910: PUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: LD_INT 22
14918: PUSH
14919: LD_VAR 0 1
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 21
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 3
14940: PUSH
14941: LD_INT 24
14943: PUSH
14944: LD_INT 750
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 70
14964: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14965: LD_ADDR_VAR 0 11
14969: PUSH
14970: LD_VAR 0 2
14974: PPUSH
14975: LD_INT 22
14977: PUSH
14978: LD_VAR 0 1
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 21
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 3
14999: PUSH
15000: LD_INT 24
15002: PUSH
15003: LD_INT 1000
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 70
15023: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
15024: LD_VAR 0 10
15028: PUSH
15029: LD_INT 0
15031: GREATER
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_INT 0
15040: GREATER
15041: AND
15042: IFFALSE 15058
// ComMoveToArea ( damageUnits , healArea ) ;
15044: LD_VAR 0 10
15048: PPUSH
15049: LD_VAR 0 2
15053: PPUSH
15054: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
15058: LD_VAR 0 11
15062: PUSH
15063: LD_INT 0
15065: GREATER
15066: PUSH
15067: LD_VAR 0 7
15071: PUSH
15072: LD_INT 0
15074: GREATER
15075: AND
15076: IFFALSE 15096
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
15078: LD_VAR 0 7
15082: PPUSH
15083: LD_VAR 0 11
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: PPUSH
15092: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15096: LD_VAR 0 10
15100: PUSH
15101: LD_INT 0
15103: EQUAL
15104: PUSH
15105: LD_VAR 0 11
15109: PUSH
15110: LD_INT 0
15112: EQUAL
15113: AND
15114: PUSH
15115: LD_VAR 0 7
15119: PUSH
15120: LD_INT 0
15122: GREATER
15123: AND
15124: IFFALSE 15229
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15126: LD_ADDR_VAR 0 12
15130: PUSH
15131: LD_INT 22
15133: PUSH
15134: LD_VAR 0 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 21
15145: PUSH
15146: LD_INT 3
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 30
15155: PUSH
15156: LD_INT 8
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: PPUSH
15168: CALL_OW 69
15172: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15173: LD_ADDR_VAR 0 13
15177: PUSH
15178: LD_INT 1
15180: PPUSH
15181: LD_VAR 0 12
15185: PPUSH
15186: CALL_OW 12
15190: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15191: LD_VAR 0 7
15195: PPUSH
15196: LD_INT 3
15198: PUSH
15199: LD_INT 60
15201: PUSH
15202: EMPTY
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 72
15213: PPUSH
15214: LD_VAR 0 12
15218: PUSH
15219: LD_VAR 0 13
15223: ARRAY
15224: PPUSH
15225: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15229: LD_VAR 0 3
15233: PPUSH
15234: LD_INT 22
15236: PUSH
15237: LD_VAR 0 1
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 25
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 24
15258: PUSH
15259: LD_INT 751
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: PPUSH
15271: CALL_OW 70
15275: PUSH
15276: LD_INT 0
15278: GREATER
15279: PUSH
15280: LD_INT 21
15282: PPUSH
15283: CALL_OW 302
15287: AND
15288: PUSH
15289: LD_INT 21
15291: PPUSH
15292: CALL_OW 255
15296: PUSH
15297: LD_INT 3
15299: EQUAL
15300: AND
15301: IFFALSE 15357
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15303: LD_VAR 0 3
15307: PPUSH
15308: LD_INT 22
15310: PUSH
15311: LD_VAR 0 1
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 25
15322: PUSH
15323: LD_INT 3
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 24
15332: PUSH
15333: LD_INT 751
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: LIST
15344: PPUSH
15345: CALL_OW 70
15349: PPUSH
15350: LD_INT 21
15352: PPUSH
15353: CALL_OW 120
// end ;
15357: LD_VAR 0 5
15361: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15362: LD_INT 0
15364: PPUSH
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15369: LD_ADDR_VAR 0 6
15373: PUSH
15374: LD_INT 22
15376: PUSH
15377: LD_VAR 0 1
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 2
15388: PUSH
15389: LD_INT 30
15391: PUSH
15392: LD_INT 31
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 30
15401: PUSH
15402: LD_INT 32
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 33
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 30
15421: PUSH
15422: LD_INT 4
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 30
15431: PUSH
15432: LD_INT 5
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15456: LD_ADDR_VAR 0 7
15460: PUSH
15461: LD_INT 22
15463: PUSH
15464: LD_VAR 0 2
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 21
15475: PUSH
15476: LD_INT 3
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 58
15485: PUSH
15486: EMPTY
15487: LIST
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 69
15498: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15499: LD_VAR 0 6
15503: PUSH
15504: LD_INT 0
15506: GREATER
15507: PUSH
15508: LD_VAR 0 7
15512: PUSH
15513: LD_INT 0
15515: GREATER
15516: AND
15517: IFFALSE 15587
// begin for i in turretsList do
15519: LD_ADDR_VAR 0 4
15523: PUSH
15524: LD_VAR 0 6
15528: PUSH
15529: FOR_IN
15530: IFFALSE 15585
// begin for j in enemyBuildings do
15532: LD_ADDR_VAR 0 5
15536: PUSH
15537: LD_VAR 0 7
15541: PUSH
15542: FOR_IN
15543: IFFALSE 15581
// begin if GetDistUnits ( i , j ) < 20 then
15545: LD_VAR 0 4
15549: PPUSH
15550: LD_VAR 0 5
15554: PPUSH
15555: CALL_OW 296
15559: PUSH
15560: LD_INT 20
15562: LESS
15563: IFFALSE 15579
// begin ComAttackUnit ( i , j ) ;
15565: LD_VAR 0 4
15569: PPUSH
15570: LD_VAR 0 5
15574: PPUSH
15575: CALL_OW 115
// end ; end ;
15579: GO 15542
15581: POP
15582: POP
// end ;
15583: GO 15529
15585: POP
15586: POP
// end ; end ;
15587: LD_VAR 0 3
15591: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15592: LD_INT 0
15594: PPUSH
15595: PPUSH
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15600: LD_ADDR_VAR 0 7
15604: PUSH
15605: LD_VAR 0 2
15609: PPUSH
15610: LD_INT 22
15612: PUSH
15613: LD_VAR 0 1
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 2
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 34
15634: PUSH
15635: LD_INT 52
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 70
15651: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15652: LD_ADDR_VAR 0 8
15656: PUSH
15657: LD_VAR 0 2
15661: PPUSH
15662: LD_INT 22
15664: PUSH
15665: LD_VAR 0 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 21
15676: PUSH
15677: LD_INT 3
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 3
15686: PUSH
15687: LD_INT 24
15689: PUSH
15690: LD_INT 1000
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: PPUSH
15709: CALL_OW 70
15713: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15714: LD_VAR 0 8
15718: PUSH
15719: LD_INT 0
15721: GREATER
15722: PUSH
15723: LD_VAR 0 7
15727: PPUSH
15728: LD_INT 24
15730: PUSH
15731: LD_INT 750
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 72
15742: PUSH
15743: LD_INT 0
15745: GREATER
15746: AND
15747: IFFALSE 15767
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15749: LD_VAR 0 7
15753: PPUSH
15754: LD_VAR 0 8
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: PPUSH
15763: CALL_OW 130
// end ;
15767: LD_VAR 0 3
15771: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15776: LD_INT 22
15778: PUSH
15779: LD_VAR 0 1
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 21
15790: PUSH
15791: LD_INT 2
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PPUSH
15802: CALL_OW 69
15806: PUSH
15807: LD_INT 18
15809: PPUSH
15810: LD_INT 22
15812: PUSH
15813: LD_VAR 0 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 21
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PPUSH
15836: CALL_OW 70
15840: PUSH
15841: LD_VAR 0 3
15845: LESSEQUAL
15846: DIFF
15847: IFFALSE 15914
// for i = 1 to vehCount do
15849: LD_ADDR_VAR 0 9
15853: PUSH
15854: DOUBLE
15855: LD_INT 1
15857: DEC
15858: ST_TO_ADDR
15859: LD_VAR 0 3
15863: PUSH
15864: FOR_TO
15865: IFFALSE 15912
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15867: LD_VAR 0 2
15871: PPUSH
15872: LD_VAR 0 7
15876: PPUSH
15877: LD_VAR 0 5
15881: PPUSH
15882: LD_VAR 0 6
15886: PPUSH
15887: LD_VAR 0 4
15891: PUSH
15892: LD_INT 1
15894: PPUSH
15895: LD_VAR 0 4
15899: PPUSH
15900: CALL_OW 12
15904: ARRAY
15905: PPUSH
15906: CALL_OW 185
15910: GO 15864
15912: POP
15913: POP
// end ;
15914: LD_VAR 0 8
15918: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15919: LD_INT 0
15921: PPUSH
15922: PPUSH
15923: PPUSH
15924: PPUSH
15925: PPUSH
15926: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15927: LD_EXP 40
15931: PUSH
15932: LD_INT 3
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: LD_INT 4
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: PUSH
15946: LD_OWVAR 67
15950: ARRAY
15951: GREATEREQUAL
15952: PUSH
15953: LD_EXP 41
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: LD_INT 2
15963: PUSH
15964: LD_INT 2
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: LIST
15971: PUSH
15972: LD_OWVAR 67
15976: ARRAY
15977: GREATEREQUAL
15978: AND
15979: IFFALSE 16212
// begin repeat wait ( 0 0$3 ) ;
15981: LD_INT 105
15983: PPUSH
15984: CALL_OW 67
// for j in russianTanks do
15988: LD_ADDR_VAR 0 4
15992: PUSH
15993: LD_EXP 40
15997: PUSH
15998: FOR_IN
15999: IFFALSE 16200
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
16001: LD_ADDR_VAR 0 6
16005: PUSH
16006: LD_INT 81
16008: PUSH
16009: LD_VAR 0 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 101
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PPUSH
16032: CALL_OW 69
16036: PPUSH
16037: LD_VAR 0 4
16041: PPUSH
16042: CALL_OW 74
16046: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
16047: LD_ADDR_VAR 0 7
16051: PUSH
16052: LD_INT 81
16054: PUSH
16055: LD_VAR 0 1
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 101
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 2
16076: PUSH
16077: LD_INT 59
16079: PUSH
16080: EMPTY
16081: LIST
16082: PUSH
16083: LD_INT 21
16085: PUSH
16086: LD_INT 1
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PPUSH
16122: LD_VAR 0 4
16126: PPUSH
16127: CALL_OW 74
16131: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16132: LD_VAR 0 4
16136: PPUSH
16137: LD_VAR 0 6
16141: PPUSH
16142: CALL_OW 296
16146: PUSH
16147: LD_INT 8
16149: PLUS
16150: PUSH
16151: LD_VAR 0 4
16155: PPUSH
16156: LD_VAR 0 7
16160: PPUSH
16161: CALL_OW 296
16165: LESS
16166: IFFALSE 16184
// ComAttackUnit ( j , target1 ) else
16168: LD_VAR 0 4
16172: PPUSH
16173: LD_VAR 0 6
16177: PPUSH
16178: CALL_OW 115
16182: GO 16198
// ComAttackUnit ( j , target2 ) ;
16184: LD_VAR 0 4
16188: PPUSH
16189: LD_VAR 0 7
16193: PPUSH
16194: CALL_OW 115
// end ;
16198: GO 15998
16200: POP
16201: POP
// until russianTanks = 0 ;
16202: LD_EXP 40
16206: PUSH
16207: LD_INT 0
16209: EQUAL
16210: IFFALSE 15981
// end ; end ;
16212: LD_VAR 0 2
16216: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16217: LD_INT 0
16219: PPUSH
16220: PPUSH
16221: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16222: LD_EXP 40
16226: PUSH
16227: LD_INT 1
16229: GREATEREQUAL
16230: PUSH
16231: LD_EXP 41
16235: PUSH
16236: LD_INT 1
16238: PUSH
16239: LD_INT 2
16241: PUSH
16242: LD_INT 2
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: PUSH
16250: LD_OWVAR 67
16254: ARRAY
16255: GREATEREQUAL
16256: AND
16257: IFFALSE 16407
// repeat wait ( 0 0$3 ) ;
16259: LD_INT 105
16261: PPUSH
16262: CALL_OW 67
// if russianTimeLapsers > 0 then
16266: LD_EXP 41
16270: PUSH
16271: LD_INT 0
16273: GREATER
16274: IFFALSE 16397
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16276: LD_ADDR_VAR 0 3
16280: PUSH
16281: LD_EXP 41
16285: PPUSH
16286: LD_INT 3
16288: PUSH
16289: LD_INT 60
16291: PUSH
16292: EMPTY
16293: LIST
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PPUSH
16299: CALL_OW 72
16303: PUSH
16304: FOR_IN
16305: IFFALSE 16395
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
16307: LD_ADDR_VAR 0 4
16311: PUSH
16312: LD_INT 81
16314: PUSH
16315: LD_VAR 0 1
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 101
16326: PUSH
16327: LD_INT 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 21
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: PPUSH
16349: CALL_OW 69
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: CALL_OW 74
16363: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
16364: LD_VAR 0 3
16368: PPUSH
16369: LD_VAR 0 4
16373: PPUSH
16374: CALL_OW 250
16378: PPUSH
16379: LD_VAR 0 4
16383: PPUSH
16384: CALL_OW 251
16388: PPUSH
16389: CALL_OW 111
// end ;
16393: GO 16304
16395: POP
16396: POP
// until russianTimeLapsers = 0 ;
16397: LD_EXP 41
16401: PUSH
16402: LD_INT 0
16404: EQUAL
16405: IFFALSE 16259
// end ;
16407: LD_VAR 0 2
16411: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16412: LD_INT 0
16414: PPUSH
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16420: LD_ADDR_VAR 0 6
16424: PUSH
16425: LD_INT 22
16427: PUSH
16428: LD_VAR 0 1
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 25
16439: PUSH
16440: LD_INT 9
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PPUSH
16451: CALL_OW 69
16455: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16456: LD_ADDR_VAR 0 7
16460: PUSH
16461: LD_INT 81
16463: PUSH
16464: LD_VAR 0 1
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 3
16475: PUSH
16476: LD_INT 21
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 69
16498: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16499: LD_ADDR_VAR 0 4
16503: PUSH
16504: LD_INT 1
16506: PPUSH
16507: LD_INT 3
16509: PPUSH
16510: CALL_OW 12
16514: ST_TO_ADDR
// for i = 1 to list do
16515: LD_ADDR_VAR 0 5
16519: PUSH
16520: DOUBLE
16521: LD_INT 1
16523: DEC
16524: ST_TO_ADDR
16525: LD_VAR 0 6
16529: PUSH
16530: FOR_TO
16531: IFFALSE 16733
// for ta in filter do
16533: LD_ADDR_VAR 0 3
16537: PUSH
16538: LD_VAR 0 7
16542: PUSH
16543: FOR_IN
16544: IFFALSE 16729
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16546: LD_VAR 0 6
16550: PUSH
16551: LD_VAR 0 5
16555: ARRAY
16556: PPUSH
16557: LD_VAR 0 3
16561: PPUSH
16562: CALL_OW 296
16566: PUSH
16567: LD_INT 15
16569: LESSEQUAL
16570: IFFALSE 16727
// begin case c of 1 :
16572: LD_VAR 0 4
16576: PUSH
16577: LD_INT 1
16579: DOUBLE
16580: EQUAL
16581: IFTRUE 16585
16583: GO 16623
16585: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16586: LD_VAR 0 6
16590: PUSH
16591: LD_VAR 0 5
16595: ARRAY
16596: PPUSH
16597: LD_VAR 0 3
16601: PPUSH
16602: CALL_OW 250
16606: PPUSH
16607: LD_VAR 0 3
16611: PPUSH
16612: CALL_OW 251
16616: PPUSH
16617: CALL_OW 154
16621: GO 16727
16623: LD_INT 2
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 16695
16631: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16632: LD_VAR 0 6
16636: PUSH
16637: LD_VAR 0 5
16641: ARRAY
16642: PPUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: CALL_OW 250
16652: PUSH
16653: LD_INT 1
16655: NEG
16656: PPUSH
16657: LD_INT 1
16659: PPUSH
16660: CALL_OW 12
16664: PLUS
16665: PPUSH
16666: LD_VAR 0 3
16670: PPUSH
16671: CALL_OW 251
16675: PUSH
16676: LD_INT 1
16678: NEG
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 12
16687: PLUS
16688: PPUSH
16689: CALL_OW 153
16693: GO 16727
16695: LD_INT 3
16697: DOUBLE
16698: EQUAL
16699: IFTRUE 16703
16701: GO 16726
16703: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16704: LD_VAR 0 6
16708: PUSH
16709: LD_VAR 0 5
16713: ARRAY
16714: PPUSH
16715: LD_VAR 0 3
16719: PPUSH
16720: CALL_OW 115
16724: GO 16727
16726: POP
// end ; end ;
16727: GO 16543
16729: POP
16730: POP
16731: GO 16530
16733: POP
16734: POP
// end ;
16735: LD_VAR 0 2
16739: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16740: LD_INT 0
16742: PPUSH
16743: PPUSH
16744: PPUSH
16745: PPUSH
// r := 100 ;
16746: LD_ADDR_VAR 0 5
16750: PUSH
16751: LD_INT 100
16753: ST_TO_ADDR
// x := 0 ;
16754: LD_ADDR_VAR 0 6
16758: PUSH
16759: LD_INT 0
16761: ST_TO_ADDR
// while ( x < n ) do
16762: LD_VAR 0 6
16766: PUSH
16767: LD_VAR 0 2
16771: LESS
16772: IFFALSE 17059
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16774: LD_ADDR_VAR 0 4
16778: PUSH
16779: DOUBLE
16780: LD_INT 1
16782: DEC
16783: ST_TO_ADDR
16784: LD_VAR 0 1
16788: PPUSH
16789: LD_INT 0
16791: PPUSH
16792: CALL_OW 517
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PUSH
16801: FOR_TO
16802: IFFALSE 17055
// begin if r > 50 then
16804: LD_VAR 0 5
16808: PUSH
16809: LD_INT 50
16811: GREATER
16812: IFFALSE 17031
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16814: LD_VAR 0 1
16818: PPUSH
16819: LD_INT 0
16821: PPUSH
16822: CALL_OW 517
16826: PUSH
16827: LD_INT 1
16829: ARRAY
16830: PUSH
16831: LD_VAR 0 4
16835: ARRAY
16836: PPUSH
16837: LD_VAR 0 1
16841: PPUSH
16842: LD_INT 0
16844: PPUSH
16845: CALL_OW 517
16849: PUSH
16850: LD_INT 2
16852: ARRAY
16853: PUSH
16854: LD_VAR 0 4
16858: ARRAY
16859: PPUSH
16860: CALL_OW 458
16864: NOT
16865: IFFALSE 17015
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_INT 0
16874: PPUSH
16875: CALL_OW 517
16879: PUSH
16880: LD_INT 1
16882: ARRAY
16883: PUSH
16884: LD_VAR 0 4
16888: ARRAY
16889: PPUSH
16890: LD_VAR 0 1
16894: PPUSH
16895: LD_INT 0
16897: PPUSH
16898: CALL_OW 517
16902: PUSH
16903: LD_INT 2
16905: ARRAY
16906: PUSH
16907: LD_VAR 0 4
16911: ARRAY
16912: PPUSH
16913: LD_INT 8
16915: PPUSH
16916: LD_INT 0
16918: PPUSH
16919: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16923: LD_ADDR_EXP 45
16927: PUSH
16928: LD_EXP 45
16932: PPUSH
16933: LD_INT 1
16935: PPUSH
16936: LD_VAR 0 1
16940: PPUSH
16941: LD_INT 0
16943: PPUSH
16944: CALL_OW 517
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PUSH
16953: LD_VAR 0 4
16957: ARRAY
16958: PUSH
16959: LD_VAR 0 1
16963: PPUSH
16964: LD_INT 0
16966: PPUSH
16967: CALL_OW 517
16971: PUSH
16972: LD_INT 2
16974: ARRAY
16975: PUSH
16976: LD_VAR 0 4
16980: ARRAY
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PPUSH
16986: CALL_OW 2
16990: ST_TO_ADDR
// r := 0 ;
16991: LD_ADDR_VAR 0 5
16995: PUSH
16996: LD_INT 0
16998: ST_TO_ADDR
// x := x + 1 ;
16999: LD_ADDR_VAR 0 6
17003: PUSH
17004: LD_VAR 0 6
17008: PUSH
17009: LD_INT 1
17011: PLUS
17012: ST_TO_ADDR
// end else
17013: GO 17029
// r := r + 35 ;
17015: LD_ADDR_VAR 0 5
17019: PUSH
17020: LD_VAR 0 5
17024: PUSH
17025: LD_INT 35
17027: PLUS
17028: ST_TO_ADDR
// end else
17029: GO 17053
// r := r + rand ( 10 , 25 ) ;
17031: LD_ADDR_VAR 0 5
17035: PUSH
17036: LD_VAR 0 5
17040: PUSH
17041: LD_INT 10
17043: PPUSH
17044: LD_INT 25
17046: PPUSH
17047: CALL_OW 12
17051: PLUS
17052: ST_TO_ADDR
// end ;
17053: GO 16801
17055: POP
17056: POP
17057: GO 16762
// end ;
17059: LD_VAR 0 3
17063: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
17064: LD_INT 0
17066: PPUSH
17067: PPUSH
17068: PPUSH
17069: PPUSH
// tmpTab = [ ] ;
17070: LD_ADDR_VAR 0 6
17074: PUSH
17075: EMPTY
17076: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
17077: LD_INT 22
17079: PUSH
17080: LD_VAR 0 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 30
17091: PUSH
17092: LD_INT 32
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: PUSH
17108: LD_INT 0
17110: GREATER
17111: IFFALSE 17194
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
17113: LD_ADDR_VAR 0 4
17117: PUSH
17118: LD_INT 22
17120: PUSH
17121: LD_VAR 0 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 30
17132: PUSH
17133: LD_INT 32
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PPUSH
17144: CALL_OW 69
17148: PUSH
17149: FOR_IN
17150: IFFALSE 17192
// begin for j in UnitsInside ( i ) do
17152: LD_ADDR_VAR 0 5
17156: PUSH
17157: LD_VAR 0 4
17161: PPUSH
17162: CALL_OW 313
17166: PUSH
17167: FOR_IN
17168: IFFALSE 17188
// tmpTab = tmpTab ^ j ;
17170: LD_ADDR_VAR 0 6
17174: PUSH
17175: LD_VAR 0 6
17179: PUSH
17180: LD_VAR 0 5
17184: ADD
17185: ST_TO_ADDR
17186: GO 17167
17188: POP
17189: POP
// end ;
17190: GO 17149
17192: POP
17193: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17194: LD_VAR 0 6
17198: PPUSH
17199: LD_VAR 0 2
17203: PPUSH
17204: CALL_OW 250
17208: PPUSH
17209: LD_VAR 0 2
17213: PPUSH
17214: CALL_OW 251
17218: PPUSH
17219: CALL_OW 114
// end ;
17223: LD_VAR 0 3
17227: RET
// export function PrepareNature ; var i , un ; begin
17228: LD_INT 0
17230: PPUSH
17231: PPUSH
17232: PPUSH
// uc_side := 0 ;
17233: LD_ADDR_OWVAR 20
17237: PUSH
17238: LD_INT 0
17240: ST_TO_ADDR
// uc_nation := 0 ;
17241: LD_ADDR_OWVAR 21
17245: PUSH
17246: LD_INT 0
17248: ST_TO_ADDR
// InitHc ;
17249: CALL_OW 19
// hc_class := class_fish ;
17253: LD_ADDR_OWVAR 28
17257: PUSH
17258: LD_INT 20
17260: ST_TO_ADDR
// for i = 1 to 6 do
17261: LD_ADDR_VAR 0 2
17265: PUSH
17266: DOUBLE
17267: LD_INT 1
17269: DEC
17270: ST_TO_ADDR
17271: LD_INT 6
17273: PUSH
17274: FOR_TO
17275: IFFALSE 17294
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17277: CALL_OW 44
17281: PPUSH
17282: LD_INT 23
17284: PPUSH
17285: LD_INT 0
17287: PPUSH
17288: CALL_OW 49
17292: GO 17274
17294: POP
17295: POP
// for i = 1 to Difficulty + 2 do
17296: LD_ADDR_VAR 0 2
17300: PUSH
17301: DOUBLE
17302: LD_INT 1
17304: DEC
17305: ST_TO_ADDR
17306: LD_OWVAR 67
17310: PUSH
17311: LD_INT 2
17313: PLUS
17314: PUSH
17315: FOR_TO
17316: IFFALSE 17425
// begin hc_sex = sex_male ;
17318: LD_ADDR_OWVAR 27
17322: PUSH
17323: LD_INT 1
17325: ST_TO_ADDR
// uc_side = 0 ;
17326: LD_ADDR_OWVAR 20
17330: PUSH
17331: LD_INT 0
17333: ST_TO_ADDR
// uc_nation = nation_nature ;
17334: LD_ADDR_OWVAR 21
17338: PUSH
17339: LD_INT 0
17341: ST_TO_ADDR
// hc_class = class_tiger ;
17342: LD_ADDR_OWVAR 28
17346: PUSH
17347: LD_INT 14
17349: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17350: LD_ADDR_OWVAR 31
17354: PUSH
17355: LD_EXP 38
17359: PUSH
17360: LD_INT 0
17362: PUSH
17363: LD_INT 0
17365: PUSH
17366: LD_INT 0
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17375: LD_ADDR_OWVAR 35
17379: PUSH
17380: LD_INT 5
17382: NEG
17383: PPUSH
17384: LD_INT 5
17386: PPUSH
17387: CALL_OW 12
17391: PUSH
17392: LD_OWVAR 67
17396: MUL
17397: ST_TO_ADDR
// un = CreateHuman ;
17398: LD_ADDR_VAR 0 3
17402: PUSH
17403: CALL_OW 44
17407: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17408: LD_VAR 0 3
17412: PPUSH
17413: LD_INT 24
17415: PPUSH
17416: LD_INT 0
17418: PPUSH
17419: CALL_OW 49
// end ;
17423: GO 17315
17425: POP
17426: POP
// for i = 1 to rand ( 3 , 4 ) do
17427: LD_ADDR_VAR 0 2
17431: PUSH
17432: DOUBLE
17433: LD_INT 1
17435: DEC
17436: ST_TO_ADDR
17437: LD_INT 3
17439: PPUSH
17440: LD_INT 4
17442: PPUSH
17443: CALL_OW 12
17447: PUSH
17448: FOR_TO
17449: IFFALSE 17541
// begin hc_sex = sex_male ;
17451: LD_ADDR_OWVAR 27
17455: PUSH
17456: LD_INT 1
17458: ST_TO_ADDR
// uc_side = 0 ;
17459: LD_ADDR_OWVAR 20
17463: PUSH
17464: LD_INT 0
17466: ST_TO_ADDR
// uc_nation = nation_nature ;
17467: LD_ADDR_OWVAR 21
17471: PUSH
17472: LD_INT 0
17474: ST_TO_ADDR
// hc_class = 18 ;
17475: LD_ADDR_OWVAR 28
17479: PUSH
17480: LD_INT 18
17482: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17483: LD_ADDR_OWVAR 31
17487: PUSH
17488: LD_INT 0
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: LD_INT 0
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: ST_TO_ADDR
// hc_agressivity = 0 ;
17506: LD_ADDR_OWVAR 35
17510: PUSH
17511: LD_INT 0
17513: ST_TO_ADDR
// un = CreateHuman ;
17514: LD_ADDR_VAR 0 3
17518: PUSH
17519: CALL_OW 44
17523: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17524: LD_VAR 0 3
17528: PPUSH
17529: LD_INT 24
17531: PPUSH
17532: LD_INT 0
17534: PPUSH
17535: CALL_OW 49
// end ;
17539: GO 17448
17541: POP
17542: POP
// for i = 1 to rand ( 1 , 3 ) do
17543: LD_ADDR_VAR 0 2
17547: PUSH
17548: DOUBLE
17549: LD_INT 1
17551: DEC
17552: ST_TO_ADDR
17553: LD_INT 1
17555: PPUSH
17556: LD_INT 3
17558: PPUSH
17559: CALL_OW 12
17563: PUSH
17564: FOR_TO
17565: IFFALSE 17713
// begin hc_sex = sex_male ;
17567: LD_ADDR_OWVAR 27
17571: PUSH
17572: LD_INT 1
17574: ST_TO_ADDR
// uc_side = 0 ;
17575: LD_ADDR_OWVAR 20
17579: PUSH
17580: LD_INT 0
17582: ST_TO_ADDR
// uc_nation = nation_nature ;
17583: LD_ADDR_OWVAR 21
17587: PUSH
17588: LD_INT 0
17590: ST_TO_ADDR
// hc_class = class_apeman ;
17591: LD_ADDR_OWVAR 28
17595: PUSH
17596: LD_INT 12
17598: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17599: LD_ADDR_OWVAR 31
17603: PUSH
17604: LD_EXP 37
17608: PPUSH
17609: LD_EXP 38
17613: PPUSH
17614: CALL_OW 12
17618: PUSH
17619: LD_EXP 37
17623: PPUSH
17624: LD_EXP 38
17628: PPUSH
17629: CALL_OW 12
17633: PUSH
17634: LD_EXP 37
17638: PPUSH
17639: LD_EXP 38
17643: PPUSH
17644: CALL_OW 12
17648: PUSH
17649: LD_EXP 37
17653: PPUSH
17654: LD_EXP 38
17658: PPUSH
17659: CALL_OW 12
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17670: LD_ADDR_OWVAR 35
17674: PUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_INT 20
17680: PPUSH
17681: CALL_OW 12
17685: ST_TO_ADDR
// un = CreateHuman ;
17686: LD_ADDR_VAR 0 3
17690: PUSH
17691: CALL_OW 44
17695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17696: LD_VAR 0 3
17700: PPUSH
17701: LD_INT 24
17703: PPUSH
17704: LD_INT 0
17706: PPUSH
17707: CALL_OW 49
// end ;
17711: GO 17564
17713: POP
17714: POP
// end ; end_of_file
17715: LD_VAR 0 1
17719: RET
// on UnitDestroyed ( unit ) do var i ;
17720: LD_INT 0
17722: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL_OW 255
17732: PUSH
17733: LD_INT 3
17735: EQUAL
17736: PUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 247
17746: PUSH
17747: LD_INT 1
17749: EQUAL
17750: AND
17751: IFFALSE 17815
// begin for i in RuScientists do
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: LD_EXP 35
17762: PUSH
17763: FOR_IN
17764: IFFALSE 17813
// if i = unit then
17766: LD_VAR 0 2
17770: PUSH
17771: LD_VAR 0 1
17775: EQUAL
17776: IFFALSE 17811
// begin RuScientists = RuScientists diff [ unit ] ;
17778: LD_ADDR_EXP 35
17782: PUSH
17783: LD_EXP 35
17787: PUSH
17788: LD_VAR 0 1
17792: PUSH
17793: EMPTY
17794: LIST
17795: DIFF
17796: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17797: LD_ADDR_EXP 36
17801: PUSH
17802: LD_EXP 36
17806: PUSH
17807: LD_INT 1
17809: PLUS
17810: ST_TO_ADDR
// end ;
17811: GO 17763
17813: POP
17814: POP
// end ; end ;
17815: PPOPN 2
17817: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 10
17825: EQUAL
17826: PUSH
17827: LD_VAR 0 2
17831: PPUSH
17832: CALL_OW 255
17836: PUSH
17837: LD_INT 1
17839: EQUAL
17840: AND
17841: PUSH
17842: LD_EXP 48
17846: PUSH
17847: LD_INT 0
17849: EQUAL
17850: AND
17851: IFFALSE 17963
// begin eventVar1 = 1 ;
17853: LD_ADDR_EXP 48
17857: PUSH
17858: LD_INT 1
17860: ST_TO_ADDR
// teleportExplored = 1 ;
17861: LD_ADDR_EXP 34
17865: PUSH
17866: LD_INT 1
17868: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17869: LD_STRING M2a
17871: PPUSH
17872: CALL_OW 337
// wait ( 0 0$2 ) ;
17876: LD_INT 70
17878: PPUSH
17879: CALL_OW 67
// DialogueOn ;
17883: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17887: LD_INT 22
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 21
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PPUSH
17911: CALL_OW 69
17915: PPUSH
17916: LD_STRING DT3a-Sol1-1
17918: PPUSH
17919: LD_STRING DT3a-FSol1-1
17921: PPUSH
17922: CALL 13355 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17926: LD_EXP 1
17930: PPUSH
17931: LD_STRING DT3a-JMM-1
17933: PPUSH
17934: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17938: LD_VAR 0 2
17942: PPUSH
17943: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17947: LD_EXP 1
17951: PPUSH
17952: LD_STRING DT3a-JMM-1a
17954: PPUSH
17955: CALL_OW 88
// DialogueOff ;
17959: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17963: LD_VAR 0 1
17967: PUSH
17968: LD_INT 10
17970: EQUAL
17971: PUSH
17972: LD_VAR 0 2
17976: PPUSH
17977: CALL_OW 247
17981: PUSH
17982: LD_INT 2
17984: EQUAL
17985: AND
17986: PUSH
17987: LD_VAR 0 2
17991: PPUSH
17992: CALL_OW 255
17996: PUSH
17997: LD_INT 3
17999: EQUAL
18000: AND
18001: PUSH
18002: LD_EXP 29
18006: PUSH
18007: LD_INT 0
18009: EQUAL
18010: AND
18011: IFFALSE 18028
// begin wait ( 0 0$3 ) ;
18013: LD_INT 105
18015: PPUSH
18016: CALL_OW 67
// vehicleTeleported = 1 ;
18020: LD_ADDR_EXP 29
18024: PUSH
18025: LD_INT 1
18027: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
18028: LD_VAR 0 1
18032: PUSH
18033: LD_INT 10
18035: EQUAL
18036: PUSH
18037: LD_VAR 0 2
18041: PPUSH
18042: CALL_OW 247
18046: PUSH
18047: LD_INT 2
18049: EQUAL
18050: AND
18051: PUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: AND
18066: PUSH
18067: LD_EXP 29
18071: PUSH
18072: LD_INT 2
18074: EQUAL
18075: AND
18076: IFFALSE 18093
// begin wait ( 0 0$3 ) ;
18078: LD_INT 105
18080: PPUSH
18081: CALL_OW 67
// vehicleTeleported = 3 ;
18085: LD_ADDR_EXP 29
18089: PUSH
18090: LD_INT 3
18092: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
18093: LD_VAR 0 1
18097: PUSH
18098: LD_INT 10
18100: EQUAL
18101: PUSH
18102: LD_VAR 0 2
18106: PPUSH
18107: CALL_OW 247
18111: PUSH
18112: LD_INT 2
18114: EQUAL
18115: AND
18116: PUSH
18117: LD_VAR 0 2
18121: PPUSH
18122: CALL_OW 255
18126: PUSH
18127: LD_INT 3
18129: EQUAL
18130: AND
18131: IFFALSE 18147
// tpCounter = tpCounter + 1 ;
18133: LD_ADDR_EXP 30
18137: PUSH
18138: LD_EXP 30
18142: PUSH
18143: LD_INT 1
18145: PLUS
18146: ST_TO_ADDR
// end ;
18147: PPOPN 2
18149: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18150: LD_VAR 0 2
18154: PUSH
18155: LD_INT 21
18157: EQUAL
18158: PUSH
18159: LD_VAR 0 2
18163: PUSH
18164: LD_INT 112
18166: EQUAL
18167: OR
18168: IFFALSE 18346
// if GetSide ( vehicle ) = 3 then
18170: LD_VAR 0 1
18174: PPUSH
18175: CALL_OW 255
18179: PUSH
18180: LD_INT 3
18182: EQUAL
18183: IFFALSE 18346
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 264
18194: PUSH
18195: LD_INT 46
18197: EQUAL
18198: PUSH
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 264
18208: PUSH
18209: LD_INT 45
18211: EQUAL
18212: OR
18213: PUSH
18214: LD_VAR 0 1
18218: PPUSH
18219: CALL_OW 264
18223: PUSH
18224: LD_INT 44
18226: EQUAL
18227: OR
18228: IFFALSE 18303
// begin russianTanks = russianTanks ^ vehicle ;
18230: LD_ADDR_EXP 40
18234: PUSH
18235: LD_EXP 40
18239: PUSH
18240: LD_VAR 0 1
18244: ADD
18245: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18246: LD_EXP 44
18250: PUSH
18251: LD_INT 1
18253: EQUAL
18254: PUSH
18255: LD_EXP 44
18259: PUSH
18260: LD_INT 0
18262: EQUAL
18263: OR
18264: IFFALSE 18278
// ComEnterUnit ( vehicle , ruteleprt ) ;
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_INT 10
18273: PPUSH
18274: CALL_OW 120
// if attackTactic = 2 then
18278: LD_EXP 44
18282: PUSH
18283: LD_INT 2
18285: EQUAL
18286: IFFALSE 18303
// ComMoveXY ( vehicle , 88 , 69 ) ;
18288: LD_VAR 0 1
18292: PPUSH
18293: LD_INT 88
18295: PPUSH
18296: LD_INT 69
18298: PPUSH
18299: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 264
18312: PUSH
18313: LD_INT 49
18315: EQUAL
18316: IFFALSE 18346
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18318: LD_ADDR_EXP 41
18322: PUSH
18323: LD_EXP 41
18327: PUSH
18328: LD_VAR 0 1
18332: ADD
18333: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18334: LD_VAR 0 1
18338: PPUSH
18339: LD_INT 137
18341: PPUSH
18342: CALL_OW 120
// end ; end ; end ;
18346: PPOPN 2
18348: END
// on UnitGoesToRed ( unit ) do var i ;
18349: LD_INT 0
18351: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 255
18361: PUSH
18362: LD_INT 3
18364: EQUAL
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 247
18375: PUSH
18376: LD_INT 2
18378: EQUAL
18379: AND
18380: IFFALSE 18498
// begin if russianTanks > 0 then
18382: LD_EXP 40
18386: PUSH
18387: LD_INT 0
18389: GREATER
18390: IFFALSE 18440
// for i in russianTanks do
18392: LD_ADDR_VAR 0 2
18396: PUSH
18397: LD_EXP 40
18401: PUSH
18402: FOR_IN
18403: IFFALSE 18438
// if i = unit then
18405: LD_VAR 0 2
18409: PUSH
18410: LD_VAR 0 1
18414: EQUAL
18415: IFFALSE 18436
// russianTanks = russianTanks diff [ unit ] ;
18417: LD_ADDR_EXP 40
18421: PUSH
18422: LD_EXP 40
18426: PUSH
18427: LD_VAR 0 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: DIFF
18435: ST_TO_ADDR
18436: GO 18402
18438: POP
18439: POP
// if russianTimeLapsers > 0 then
18440: LD_EXP 41
18444: PUSH
18445: LD_INT 0
18447: GREATER
18448: IFFALSE 18498
// for i in russianTimeLapsers do
18450: LD_ADDR_VAR 0 2
18454: PUSH
18455: LD_EXP 41
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18496
// if i = unit then
18463: LD_VAR 0 2
18467: PUSH
18468: LD_VAR 0 1
18472: EQUAL
18473: IFFALSE 18494
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18475: LD_ADDR_EXP 41
18479: PUSH
18480: LD_EXP 41
18484: PUSH
18485: LD_VAR 0 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: DIFF
18493: ST_TO_ADDR
18494: GO 18460
18496: POP
18497: POP
// end ; end ;
18498: PPOPN 2
18500: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18501: LD_INT 0
18503: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18504: LD_VAR 0 2
18508: PPUSH
18509: CALL_OW 255
18513: PUSH
18514: LD_INT 3
18516: EQUAL
18517: PUSH
18518: LD_VAR 0 2
18522: PPUSH
18523: CALL_OW 257
18527: PUSH
18528: LD_INT 3
18530: EQUAL
18531: AND
18532: PUSH
18533: LD_INT 21
18535: PPUSH
18536: CALL_OW 255
18540: PUSH
18541: LD_INT 3
18543: EQUAL
18544: AND
18545: PUSH
18546: LD_INT 21
18548: PPUSH
18549: CALL_OW 302
18553: AND
18554: IFFALSE 18568
// ComEnterUnit ( human , ru_fact ) ;
18556: LD_VAR 0 2
18560: PPUSH
18561: LD_INT 21
18563: PPUSH
18564: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18568: LD_VAR 0 2
18572: PPUSH
18573: CALL_OW 257
18577: PUSH
18578: LD_INT 4
18580: EQUAL
18581: PUSH
18582: LD_VAR 0 2
18586: PPUSH
18587: CALL_OW 255
18591: PUSH
18592: LD_INT 3
18594: EQUAL
18595: AND
18596: PUSH
18597: LD_EXP 42
18601: PUSH
18602: LD_INT 0
18604: EQUAL
18605: AND
18606: IFFALSE 18668
// for i in RuScientists do
18608: LD_ADDR_VAR 0 3
18612: PUSH
18613: LD_EXP 35
18617: PUSH
18618: FOR_IN
18619: IFFALSE 18666
// if i = human then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_VAR 0 2
18630: EQUAL
18631: IFFALSE 18664
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18633: LD_VAR 0 3
18637: PPUSH
18638: LD_INT 13
18640: PUSH
18641: LD_INT 14
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: PPUSH
18651: LD_INT 2
18653: PPUSH
18654: CALL_OW 12
18658: ARRAY
18659: PPUSH
18660: CALL_OW 113
18664: GO 18618
18666: POP
18667: POP
// end ;
18668: PPOPN 3
18670: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18671: LD_INT 0
18673: PPUSH
18674: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18675: LD_VAR 0 2
18679: PPUSH
18680: CALL_OW 255
18684: PUSH
18685: LD_INT 3
18687: EQUAL
18688: PUSH
18689: LD_VAR 0 2
18693: PPUSH
18694: CALL_OW 257
18698: PUSH
18699: LD_INT 4
18701: EQUAL
18702: AND
18703: IFFALSE 18845
// for i in RuScientists do
18705: LD_ADDR_VAR 0 3
18709: PUSH
18710: LD_EXP 35
18714: PUSH
18715: FOR_IN
18716: IFFALSE 18843
// if i = human then
18718: LD_VAR 0 3
18722: PUSH
18723: LD_VAR 0 2
18727: EQUAL
18728: IFFALSE 18841
// if IsOk ( rutp ) then
18730: LD_INT 137
18732: PPUSH
18733: CALL_OW 302
18737: IFFALSE 18810
// begin rnd = rand ( 1 , 2 ) ;
18739: LD_ADDR_VAR 0 4
18743: PUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_INT 2
18749: PPUSH
18750: CALL_OW 12
18754: ST_TO_ADDR
// if rnd = 1 then
18755: LD_VAR 0 4
18759: PUSH
18760: LD_INT 1
18762: EQUAL
18763: IFFALSE 18777
// ComEnterUnit ( vehicle , rutp ) ;
18765: LD_VAR 0 1
18769: PPUSH
18770: LD_INT 137
18772: PPUSH
18773: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18777: LD_VAR 0 1
18781: PPUSH
18782: LD_INT 13
18784: PUSH
18785: LD_INT 14
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: PPUSH
18795: LD_INT 2
18797: PPUSH
18798: CALL_OW 12
18802: ARRAY
18803: PPUSH
18804: CALL_OW 173
// end else
18808: GO 18841
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18810: LD_VAR 0 1
18814: PPUSH
18815: LD_INT 13
18817: PUSH
18818: LD_INT 14
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: PPUSH
18828: LD_INT 2
18830: PPUSH
18831: CALL_OW 12
18835: ARRAY
18836: PPUSH
18837: CALL_OW 113
// end ;
18841: GO 18715
18843: POP
18844: POP
// end ; end_of_file
18845: PPOPN 4
18847: END
// every 0 0$1 trigger ruAI = 1 do
18848: LD_EXP 42
18852: PUSH
18853: LD_INT 1
18855: EQUAL
18856: IFFALSE 18985
18858: GO 18860
18860: DISABLE
// begin enable ;
18861: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18862: LD_INT 3
18864: PPUSH
18865: LD_INT 6
18867: PPUSH
18868: LD_INT 9
18870: PPUSH
18871: LD_EXP 39
18875: PPUSH
18876: CALL 14391 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18880: LD_INT 3
18882: PPUSH
18883: LD_INT 4
18885: PPUSH
18886: LD_INT 10
18888: PPUSH
18889: LD_EXP 39
18893: PPUSH
18894: CALL 14391 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18898: LD_INT 3
18900: PPUSH
18901: LD_INT 9
18903: PPUSH
18904: CALL 15592 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 10
18913: PPUSH
18914: CALL 15592 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18918: LD_INT 3
18920: PPUSH
18921: LD_INT 16
18923: PPUSH
18924: LD_INT 9
18926: PPUSH
18927: LD_INT 91
18929: PPUSH
18930: CALL 14782 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18934: LD_INT 3
18936: PPUSH
18937: LD_INT 17
18939: PPUSH
18940: LD_INT 10
18942: PPUSH
18943: LD_INT 47
18945: PUSH
18946: LD_INT 129
18948: PUSH
18949: LD_INT 135
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: PPUSH
18957: CALL 14782 0 4
// AttackVehicles ( 3 ) ;
18961: LD_INT 3
18963: PPUSH
18964: CALL 15919 0 1
// IntBazooka ( 3 ) ;
18968: LD_INT 3
18970: PPUSH
18971: CALL 16412 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18975: LD_INT 3
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: CALL 15362 0 2
// end ;
18985: END
// every 0 0$1 do
18986: GO 18988
18988: DISABLE
// begin enable ;
18989: ENABLE
// TimeLapsersAI ( 3 ) ;
18990: LD_INT 3
18992: PPUSH
18993: CALL 16217 0 1
// end ;
18997: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18998: LD_INT 4
19000: PPUSH
19001: CALL_OW 303
19005: IFFALSE 19020
19007: GO 19009
19009: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
19010: LD_INT 3
19012: PPUSH
19013: LD_INT 4
19015: PPUSH
19016: CALL 17064 0 2
19020: END
// every 0 0$1 do
19021: GO 19023
19023: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
19024: LD_INT 3
19026: PPUSH
19027: LD_INT 91
19029: PPUSH
19030: LD_INT 3
19032: PPUSH
19033: CALL 14150 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
19037: LD_INT 3
19039: PPUSH
19040: LD_INT 47
19042: PPUSH
19043: LD_INT 3
19045: PPUSH
19046: CALL 14150 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
19050: LD_INT 3
19052: PPUSH
19053: LD_INT 129
19055: PPUSH
19056: LD_INT 3
19058: PPUSH
19059: CALL 14150 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
19063: LD_INT 3
19065: PPUSH
19066: LD_INT 3
19068: PPUSH
19069: LD_INT 3
19071: PPUSH
19072: CALL 14150 0 3
// end ;
19076: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
19077: LD_EXP 28
19081: PUSH
19082: LD_INT 2
19084: EQUAL
19085: PUSH
19086: LD_INT 21
19088: PPUSH
19089: CALL_OW 255
19093: PUSH
19094: LD_INT 3
19096: EQUAL
19097: AND
19098: PUSH
19099: LD_INT 112
19101: PPUSH
19102: CALL_OW 255
19106: PUSH
19107: LD_INT 3
19109: EQUAL
19110: AND
19111: PUSH
19112: LD_INT 21
19114: PPUSH
19115: CALL_OW 302
19119: AND
19120: PUSH
19121: LD_INT 112
19123: PPUSH
19124: CALL_OW 302
19128: AND
19129: PUSH
19130: LD_INT 22
19132: PUSH
19133: LD_INT 3
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 21
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 50
19152: PUSH
19153: EMPTY
19154: LIST
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: LD_INT 58
19161: PUSH
19162: EMPTY
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: PPUSH
19175: CALL_OW 69
19179: PUSH
19180: LD_INT 18
19182: PPUSH
19183: LD_INT 22
19185: PUSH
19186: LD_INT 3
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 21
19195: PUSH
19196: LD_INT 2
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 70
19211: PUSH
19212: LD_INT 0
19214: EQUAL
19215: DIFF
19216: AND
19217: IFFALSE 19335
19219: GO 19221
19221: DISABLE
// begin enable ;
19222: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19223: LD_INT 3
19225: PPUSH
19226: LD_INT 21
19228: PPUSH
19229: LD_INT 3
19231: PUSH
19232: LD_INT 4
19234: PUSH
19235: LD_INT 4
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: PUSH
19243: LD_OWVAR 67
19247: ARRAY
19248: PPUSH
19249: LD_INT 46
19251: PUSH
19252: LD_INT 45
19254: PUSH
19255: LD_INT 44
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: PPUSH
19263: LD_INT 3
19265: PPUSH
19266: LD_INT 3
19268: PPUSH
19269: LD_INT 24
19271: PPUSH
19272: CALL 15772 0 7
// if russianTimeLapsers = 0 then
19276: LD_EXP 41
19280: PUSH
19281: LD_INT 0
19283: EQUAL
19284: IFFALSE 19335
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19286: LD_INT 3
19288: PPUSH
19289: LD_INT 112
19291: PPUSH
19292: LD_INT 1
19294: PUSH
19295: LD_INT 2
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: PUSH
19306: LD_OWVAR 67
19310: ARRAY
19311: PPUSH
19312: LD_INT 49
19314: PUSH
19315: LD_INT 49
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PPUSH
19322: LD_INT 3
19324: PPUSH
19325: LD_INT 3
19327: PPUSH
19328: LD_INT 24
19330: PPUSH
19331: CALL 15772 0 7
// end ;
19335: END
// every 0 0$1 trigger arabianMines do var i ;
19336: LD_EXP 45
19340: IFFALSE 19461
19342: GO 19344
19344: DISABLE
19345: LD_INT 0
19347: PPUSH
// begin enable ;
19348: ENABLE
// for i in arabianMines do
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: LD_EXP 45
19358: PUSH
19359: FOR_IN
19360: IFFALSE 19459
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19362: LD_INT 22
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 92
19374: PUSH
19375: LD_VAR 0 1
19379: PUSH
19380: LD_INT 1
19382: ARRAY
19383: PUSH
19384: LD_VAR 0 1
19388: PUSH
19389: LD_INT 2
19391: ARRAY
19392: PUSH
19393: LD_INT 3
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 69
19410: IFFALSE 19457
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19412: LD_VAR 0 1
19416: PUSH
19417: LD_INT 1
19419: ARRAY
19420: PPUSH
19421: LD_VAR 0 1
19425: PUSH
19426: LD_INT 2
19428: ARRAY
19429: PPUSH
19430: LD_INT 5
19432: PPUSH
19433: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19437: LD_ADDR_EXP 45
19441: PUSH
19442: LD_EXP 45
19446: PPUSH
19447: LD_VAR 0 1
19451: PPUSH
19452: CALL_OW 3
19456: ST_TO_ADDR
// end ; end ;
19457: GO 19359
19459: POP
19460: POP
// end ;
19461: PPOPN 1
19463: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19464: LD_EXP 29
19468: PUSH
19469: LD_INT 4
19471: EQUAL
19472: PUSH
19473: LD_EXP 30
19477: PUSH
19478: LD_INT 6
19480: PUSH
19481: LD_INT 8
19483: PUSH
19484: LD_INT 8
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: PUSH
19492: LD_OWVAR 67
19496: ARRAY
19497: EQUAL
19498: AND
19499: IFFALSE 19517
19501: GO 19503
19503: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19504: LD_INT 10
19506: PPUSH
19507: LD_INT 47
19509: PPUSH
19510: LD_INT 82
19512: PPUSH
19513: CALL_OW 243
19517: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19518: LD_EXP 29
19522: PUSH
19523: LD_INT 4
19525: EQUAL
19526: IFFALSE 19548
19528: GO 19530
19530: DISABLE
// begin enable ;
19531: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19532: LD_ADDR_EXP 44
19536: PUSH
19537: LD_INT 1
19539: PPUSH
19540: LD_INT 2
19542: PPUSH
19543: CALL_OW 12
19547: ST_TO_ADDR
// end ; end_of_file
19548: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19549: LD_EXP 35
19553: PUSH
19554: EMPTY
19555: EQUAL
19556: PUSH
19557: LD_INT 3
19559: PPUSH
19560: CALL_OW 301
19564: AND
19565: IFFALSE 19770
19567: GO 19569
19569: DISABLE
// begin if sciCounter = 0 then
19570: LD_EXP 36
19574: PUSH
19575: LD_INT 0
19577: EQUAL
19578: IFFALSE 19604
// begin Say ( JMM , D7a-JMM-1 ) ;
19580: LD_EXP 1
19584: PPUSH
19585: LD_STRING D7a-JMM-1
19587: PPUSH
19588: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19592: LD_EXP 22
19596: PPUSH
19597: LD_STRING D7a-Pow-1
19599: PPUSH
19600: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19604: LD_EXP 36
19608: PUSH
19609: LD_INT 0
19611: GREATER
19612: PUSH
19613: LD_EXP 36
19617: PUSH
19618: LD_INT 6
19620: LESS
19621: AND
19622: IFFALSE 19648
// begin Say ( JMM , D7b-JMM-1 ) ;
19624: LD_EXP 1
19628: PPUSH
19629: LD_STRING D7b-JMM-1
19631: PPUSH
19632: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19636: LD_EXP 22
19640: PPUSH
19641: LD_STRING D7b-Pow-1
19643: PPUSH
19644: CALL_OW 94
// end ; if sciCounter = 6 then
19648: LD_EXP 36
19652: PUSH
19653: LD_INT 6
19655: EQUAL
19656: IFFALSE 19766
// begin Say ( JMM , D7c-JMM-1 ) ;
19658: LD_EXP 1
19662: PPUSH
19663: LD_STRING D7c-JMM-1
19665: PPUSH
19666: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19670: LD_EXP 22
19674: PPUSH
19675: LD_STRING D7c-Pow-1
19677: PPUSH
19678: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19682: LD_EXP 1
19686: PPUSH
19687: LD_STRING D7d-JMM-1
19689: PPUSH
19690: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19694: LD_EXP 22
19698: PPUSH
19699: LD_STRING D7d-Pow-1
19701: PPUSH
19702: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19706: LD_EXP 1
19710: PPUSH
19711: LD_STRING D7d-JMM-2
19713: PPUSH
19714: CALL_OW 88
// if askSiberite = 1 then
19718: LD_EXP 33
19722: PUSH
19723: LD_INT 1
19725: EQUAL
19726: IFFALSE 19742
// begin Say ( JMM , D7d-JMM-2a ) ;
19728: LD_EXP 1
19732: PPUSH
19733: LD_STRING D7d-JMM-2a
19735: PPUSH
19736: CALL_OW 88
// end else
19740: GO 19754
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19742: LD_EXP 22
19746: PPUSH
19747: LD_STRING D7d-Pow-2
19749: PPUSH
19750: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19754: LD_EXP 22
19758: PPUSH
19759: LD_STRING D7d-Pow-2a
19761: PPUSH
19762: CALL_OW 94
// end ; FinishMission ;
19766: CALL 19771 0 0
// end ;
19770: END
// export function FinishMission ; begin
19771: LD_INT 0
19773: PPUSH
// if teleportExplored = 1 then
19774: LD_EXP 34
19778: PUSH
19779: LD_INT 1
19781: EQUAL
19782: IFFALSE 19796
// AddMedal ( Teleport , 1 ) else
19784: LD_STRING Teleport
19786: PPUSH
19787: LD_INT 1
19789: PPUSH
19790: CALL_OW 101
19794: GO 19807
// AddMedal ( Teleport , - 1 ) ;
19796: LD_STRING Teleport
19798: PPUSH
19799: LD_INT 1
19801: NEG
19802: PPUSH
19803: CALL_OW 101
// if sciCounter > 2 then
19807: LD_EXP 36
19811: PUSH
19812: LD_INT 2
19814: GREATER
19815: IFFALSE 19829
// AddMedal ( Materials , 1 ) else
19817: LD_STRING Materials
19819: PPUSH
19820: LD_INT 1
19822: PPUSH
19823: CALL_OW 101
19827: GO 19840
// AddMedal ( Materials , - 1 ) ;
19829: LD_STRING Materials
19831: PPUSH
19832: LD_INT 1
19834: NEG
19835: PPUSH
19836: CALL_OW 101
// if sciCounter = 6 then
19840: LD_EXP 36
19844: PUSH
19845: LD_INT 6
19847: EQUAL
19848: IFFALSE 19872
// begin AddMedal ( Scientists , 1 ) ;
19850: LD_STRING Scientists
19852: PPUSH
19853: LD_INT 1
19855: PPUSH
19856: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19860: LD_INT 1
19862: PPUSH
19863: LD_STRING 12_SciDed_1
19865: PPUSH
19866: CALL_OW 39
// end else
19870: GO 19893
// begin AddMedal ( Scientists , - 1 ) ;
19872: LD_STRING Scientists
19874: PPUSH
19875: LD_INT 1
19877: NEG
19878: PPUSH
19879: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19883: LD_INT 0
19885: PPUSH
19886: LD_STRING 12_SciDed_1
19888: PPUSH
19889: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19893: LD_EXP 32
19897: PPUSH
19898: LD_STRING 12_MainDepositFake_1
19900: PPUSH
19901: CALL_OW 39
// GiveMedals ( MAIN ) ;
19905: LD_STRING MAIN
19907: PPUSH
19908: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19912: LD_INT 22
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 21
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: LD_INT 25
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 25
19947: PUSH
19948: LD_INT 2
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 25
19957: PUSH
19958: LD_INT 3
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 25
19967: PUSH
19968: LD_INT 4
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 25
19977: PUSH
19978: LD_INT 5
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 25
19987: PUSH
19988: LD_INT 8
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: PPUSH
20009: CALL_OW 69
20013: PPUSH
20014: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20018: LD_EXP 1
20022: PPUSH
20023: LD_EXP 47
20027: PUSH
20028: LD_STRING JMM
20030: STR
20031: PPUSH
20032: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20036: LD_EXP 7
20040: PPUSH
20041: LD_EXP 47
20045: PUSH
20046: LD_STRING Brown
20048: STR
20049: PPUSH
20050: CALL 13304 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20054: LD_EXP 3
20058: PPUSH
20059: LD_EXP 47
20063: PUSH
20064: LD_STRING Donaldson
20066: STR
20067: PPUSH
20068: CALL 13304 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20072: LD_EXP 4
20076: PPUSH
20077: LD_EXP 47
20081: PUSH
20082: LD_STRING Bobby
20084: STR
20085: PPUSH
20086: CALL 13304 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20090: LD_EXP 5
20094: PPUSH
20095: LD_EXP 47
20099: PUSH
20100: LD_STRING Cyrus
20102: STR
20103: PPUSH
20104: CALL 13304 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20108: LD_EXP 2
20112: PPUSH
20113: LD_EXP 47
20117: PUSH
20118: LD_STRING Lisa
20120: STR
20121: PPUSH
20122: CALL 13304 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20126: LD_EXP 12
20130: PPUSH
20131: LD_EXP 47
20135: PUSH
20136: LD_STRING Frank
20138: STR
20139: PPUSH
20140: CALL 13304 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20144: LD_EXP 13
20148: PPUSH
20149: LD_EXP 47
20153: PUSH
20154: LD_STRING Kikuchi
20156: STR
20157: PPUSH
20158: CALL 13304 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20162: LD_EXP 9
20166: PPUSH
20167: LD_EXP 47
20171: PUSH
20172: LD_STRING Houten
20174: STR
20175: PPUSH
20176: CALL 13304 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20180: LD_EXP 11
20184: PPUSH
20185: LD_EXP 47
20189: PUSH
20190: LD_STRING Gary
20192: STR
20193: PPUSH
20194: CALL 13304 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20198: LD_EXP 10
20202: PPUSH
20203: LD_EXP 47
20207: PUSH
20208: LD_STRING Cornell
20210: STR
20211: PPUSH
20212: CALL 13304 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20216: LD_EXP 6
20220: PPUSH
20221: LD_EXP 47
20225: PUSH
20226: LD_STRING Denis
20228: STR
20229: PPUSH
20230: CALL 13304 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20234: LD_EXP 8
20238: PPUSH
20239: LD_EXP 47
20243: PUSH
20244: LD_STRING Gladstone
20246: STR
20247: PPUSH
20248: CALL 13304 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20252: LD_INT 50
20254: PUSH
20255: EMPTY
20256: LIST
20257: PUSH
20258: LD_INT 22
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 23
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 21
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 2
20290: PUSH
20291: LD_INT 25
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 25
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 25
20313: PUSH
20314: LD_INT 3
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 25
20323: PUSH
20324: LD_INT 4
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 25
20333: PUSH
20334: LD_INT 5
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 25
20343: PUSH
20344: LD_INT 8
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: PPUSH
20367: CALL_OW 69
20371: PUSH
20372: LD_EXP 1
20376: PUSH
20377: LD_EXP 7
20381: PUSH
20382: LD_EXP 3
20386: PUSH
20387: LD_EXP 4
20391: PUSH
20392: LD_EXP 5
20396: PUSH
20397: LD_EXP 2
20401: PUSH
20402: LD_EXP 12
20406: PUSH
20407: LD_EXP 8
20411: PUSH
20412: LD_EXP 13
20416: PUSH
20417: LD_EXP 6
20421: PUSH
20422: LD_EXP 9
20426: PUSH
20427: LD_EXP 11
20431: PUSH
20432: LD_EXP 10
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: DIFF
20452: PPUSH
20453: LD_STRING 12_other_survivors
20455: PPUSH
20456: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20460: LD_INT 50
20462: PUSH
20463: EMPTY
20464: LIST
20465: PUSH
20466: LD_INT 22
20468: PUSH
20469: LD_INT 1
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 23
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 21
20488: PUSH
20489: LD_INT 1
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 25
20501: PUSH
20502: LD_INT 1
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 25
20511: PUSH
20512: LD_INT 2
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 25
20521: PUSH
20522: LD_INT 3
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 25
20531: PUSH
20532: LD_INT 4
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 25
20541: PUSH
20542: LD_INT 5
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 25
20551: PUSH
20552: LD_INT 8
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: PPUSH
20575: CALL_OW 69
20579: PPUSH
20580: LD_STRING 12_kurt_squad
20582: PPUSH
20583: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
20587: LD_STRING 11_others
20589: PPUSH
20590: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
20594: LD_EXP 14
20598: PPUSH
20599: LD_STRING 11_others
20601: PPUSH
20602: CALL_OW 38
// YouWin ;
20606: CALL_OW 103
// end ; end_of_file
20610: LD_VAR 0 1
20614: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20615: LD_EXP 1
20619: PPUSH
20620: CALL_OW 301
20624: IFFALSE 20636
20626: GO 20628
20628: DISABLE
// YouLost ( JMM ) ; end_of_file
20629: LD_STRING JMM
20631: PPUSH
20632: CALL_OW 104
20636: END
// every 0 0$01 do
20637: GO 20639
20639: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20640: LD_INT 1050
20642: PPUSH
20643: CALL_OW 67
// if cratesSpawned < 6 then
20647: LD_EXP 46
20651: PUSH
20652: LD_INT 6
20654: LESS
20655: IFFALSE 20692
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20657: LD_INT 3
20659: PPUSH
20660: LD_INT 5
20662: PPUSH
20663: CALL_OW 12
20667: PPUSH
20668: LD_INT 21
20670: PPUSH
20671: LD_INT 1
20673: PPUSH
20674: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20678: LD_ADDR_EXP 46
20682: PUSH
20683: LD_EXP 46
20687: PUSH
20688: LD_INT 1
20690: PLUS
20691: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20692: LD_EXP 46
20696: PUSH
20697: LD_INT 6
20699: GREATEREQUAL
20700: PUSH
20701: LD_EXP 46
20705: PUSH
20706: LD_INT 12
20708: LESS
20709: AND
20710: IFFALSE 20754
// begin wait ( 0 0$30 ) ;
20712: LD_INT 1050
20714: PPUSH
20715: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20719: LD_INT 3
20721: PPUSH
20722: LD_INT 5
20724: PPUSH
20725: CALL_OW 12
20729: PPUSH
20730: LD_INT 21
20732: PPUSH
20733: LD_INT 1
20735: PPUSH
20736: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20740: LD_ADDR_EXP 46
20744: PUSH
20745: LD_EXP 46
20749: PUSH
20750: LD_INT 1
20752: PLUS
20753: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20754: LD_EXP 46
20758: PUSH
20759: LD_INT 12
20761: GREATEREQUAL
20762: IFFALSE 20806
// begin wait ( 1 1$30 ) ;
20764: LD_INT 3150
20766: PPUSH
20767: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20771: LD_INT 3
20773: PPUSH
20774: LD_INT 5
20776: PPUSH
20777: CALL_OW 12
20781: PPUSH
20782: LD_INT 21
20784: PPUSH
20785: LD_INT 1
20787: PPUSH
20788: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20792: LD_ADDR_EXP 46
20796: PUSH
20797: LD_EXP 46
20801: PUSH
20802: LD_INT 1
20804: PLUS
20805: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20806: LD_EXP 46
20810: PUSH
20811: LD_INT 15
20813: GREATEREQUAL
20814: IFFALSE 20640
// end ;
20816: END
