// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt , otherKurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 35
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 36
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 39
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 40
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 41
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 45
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 27
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 28
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 34
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 44
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 30
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 33
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 31
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 32
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 46
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 43
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 48
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 47
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 49
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 17102 0 0
// PrepareDifficulty ;
 195: CALL 13482 0 0
// PrepareVehicles ;
 199: CALL 1566 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1142 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 2885 0 0
// PrepareWestBase ;
 227: CALL 3397 0 0
// PrepareEastBase ;
 231: CALL 2957 0 0
// PrepareOtherRussians ;
 235: CALL 3509 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 49
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; begin
 557: LD_INT 0
 559: PPUSH
// uc_side = 1 ;
 560: LD_ADDR_OWVAR 20
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
 568: LD_ADDR_EXP 14
 572: PUSH
 573: LD_STRING 11_others
 575: PPUSH
 576: CALL_OW 31
 580: ST_TO_ADDR
// others11 = others11 ^ CreateCharacterSet ( 11c_others ) ;
 581: LD_ADDR_EXP 14
 585: PUSH
 586: LD_EXP 14
 590: PUSH
 591: LD_STRING 11c_others
 593: PPUSH
 594: CALL_OW 31
 598: ADD
 599: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 600: LD_ADDR_EXP 1
 604: PUSH
 605: LD_STRING 11_JMM
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 13121 0 2
 615: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 616: LD_EXP 1
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 628: LD_EXP 1
 632: PPUSH
 633: LD_INT 22
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: LD_INT 58
 655: PUSH
 656: EMPTY
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PPUSH
 664: CALL_OW 69
 668: PUSH
 669: LD_INT 1
 671: ARRAY
 672: PPUSH
 673: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 677: LD_STRING 11_Lisa
 679: PPUSH
 680: CALL_OW 28
 684: PUSH
 685: LD_INT 1
 687: EQUAL
 688: IFFALSE 735
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 690: LD_ADDR_EXP 2
 694: PUSH
 695: LD_STRING 11_Lisa
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 13121 0 2
 705: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 706: LD_EXP 2
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 718: LD_EXP 2
 722: PPUSH
 723: LD_INT 4
 725: PPUSH
 726: LD_INT 0
 728: PPUSH
 729: CALL_OW 49
// end else
 733: GO 751
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 735: LD_INT 4
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: LD_INT 1
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 1142 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 751: LD_STRING 11_Donaldson
 753: PPUSH
 754: CALL_OW 28
 758: PUSH
 759: LD_INT 1
 761: EQUAL
 762: IFFALSE 809
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING 11_Donaldson
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 13121 0 2
 779: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 780: LD_EXP 3
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 792: LD_EXP 3
 796: PPUSH
 797: LD_INT 4
 799: PPUSH
 800: LD_INT 0
 802: PPUSH
 803: CALL_OW 49
// end else
 807: GO 825
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 809: LD_INT 4
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL 1142 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 825: LD_STRING 11_Cyrus
 827: PPUSH
 828: CALL_OW 28
 832: PUSH
 833: LD_INT 1
 835: EQUAL
 836: IFFALSE 883
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 838: LD_ADDR_EXP 5
 842: PUSH
 843: LD_STRING 11_Cyrus
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: CALL 13121 0 2
 853: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 854: LD_EXP 5
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 866: LD_EXP 5
 870: PPUSH
 871: LD_INT 4
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: CALL_OW 49
// end else
 881: GO 899
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 883: LD_INT 4
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_INT 1
 891: PPUSH
 892: LD_INT 0
 894: PPUSH
 895: CALL 1142 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 899: LD_STRING 11_Denis
 901: PPUSH
 902: CALL_OW 28
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 957
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 912: LD_ADDR_EXP 6
 916: PUSH
 917: LD_STRING 11_Denis
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: CALL 13121 0 2
 927: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 928: LD_EXP 6
 932: PPUSH
 933: LD_INT 4
 935: PPUSH
 936: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 940: LD_EXP 6
 944: PPUSH
 945: LD_INT 4
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 49
// end else
 955: GO 973
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 957: LD_INT 4
 959: PPUSH
 960: LD_INT 0
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL 1142 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 973: LD_STRING 11_Frank
 975: PPUSH
 976: CALL_OW 28
 980: PUSH
 981: LD_INT 1
 983: EQUAL
 984: IFFALSE 1031
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 986: LD_ADDR_EXP 12
 990: PUSH
 991: LD_STRING 11_Frank
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: CALL 13121 0 2
1001: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1002: LD_EXP 12
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1014: LD_EXP 12
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: CALL_OW 49
// end else
1029: GO 1047
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL 1142 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1047: LD_STRING 11_Cornell
1049: PPUSH
1050: CALL_OW 28
1054: PUSH
1055: LD_INT 1
1057: EQUAL
1058: IFFALSE 1105
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1060: LD_ADDR_EXP 10
1064: PUSH
1065: LD_STRING 11_Cornell
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL 13121 0 2
1075: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1076: LD_EXP 10
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1088: LD_EXP 10
1092: PPUSH
1093: LD_INT 4
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end else
1103: GO 1121
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1105: LD_INT 4
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: LD_INT 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: CALL 1142 0 4
// end ; Powell = PrepareUnit ( Powell , false ) ;
1121: LD_ADDR_EXP 22
1125: PUSH
1126: LD_STRING Powell
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL 13121 0 2
1136: ST_TO_ADDR
// end ;
1137: LD_VAR 0 1
1141: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
// if mech = 1 then
1149: LD_VAR 0 4
1153: PUSH
1154: LD_INT 1
1156: EQUAL
1157: IFFALSE 1392
// begin if others11 > 0 then
1159: LD_EXP 14
1163: PUSH
1164: LD_INT 0
1166: GREATER
1167: IFFALSE 1332
// begin for i := 1 to others11 - 1 do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: DOUBLE
1175: LD_INT 1
1177: DEC
1178: ST_TO_ADDR
1179: LD_EXP 14
1183: PUSH
1184: LD_INT 1
1186: MINUS
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1269
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1191: LD_EXP 14
1195: PUSH
1196: LD_VAR 0 6
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 259
1209: PUSH
1210: LD_EXP 14
1214: PUSH
1215: LD_VAR 0 6
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ARRAY
1224: PPUSH
1225: LD_INT 3
1227: PPUSH
1228: CALL_OW 259
1232: LESS
1233: IFFALSE 1267
// begin mecha = others11 [ i + 1 ] ;
1235: LD_ADDR_VAR 0 9
1239: PUSH
1240: LD_EXP 14
1244: PUSH
1245: LD_VAR 0 6
1249: PUSH
1250: LD_INT 1
1252: PLUS
1253: ARRAY
1254: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1255: LD_VAR 0 9
1259: PPUSH
1260: LD_INT 3
1262: PPUSH
1263: CALL_OW 336
// end ; end ;
1267: GO 1188
1269: POP
1270: POP
// if spawnMode = 1 then
1271: LD_VAR 0 3
1275: PUSH
1276: LD_INT 1
1278: EQUAL
1279: IFFALSE 1300
// PlaceUnitArea ( mecha , area , false ) else
1281: LD_VAR 0 9
1285: PPUSH
1286: LD_VAR 0 1
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
1298: GO 1314
// PlaceHumanInUnit ( mecha , veh ) ;
1300: LD_VAR 0 9
1304: PPUSH
1305: LD_VAR 0 2
1309: PPUSH
1310: CALL_OW 52
// others11 = others11 diff mecha ;
1314: LD_ADDR_EXP 14
1318: PUSH
1319: LD_EXP 14
1323: PUSH
1324: LD_VAR 0 9
1328: DIFF
1329: ST_TO_ADDR
// end else
1330: GO 1390
// begin hc_name =  ;
1332: LD_ADDR_OWVAR 26
1336: PUSH
1337: LD_STRING 
1339: ST_TO_ADDR
// hc_gallery =  ;
1340: LD_ADDR_OWVAR 33
1344: PUSH
1345: LD_STRING 
1347: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1348: LD_INT 0
1350: PPUSH
1351: LD_INT 7
1353: PPUSH
1354: LD_INT 9
1356: PPUSH
1357: CALL_OW 12
1361: PPUSH
1362: CALL_OW 383
// un = CreateHuman ;
1366: LD_ADDR_VAR 0 7
1370: PUSH
1371: CALL_OW 44
1375: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1376: LD_VAR 0 7
1380: PPUSH
1381: LD_VAR 0 2
1385: PPUSH
1386: CALL_OW 52
// end ; end else
1390: GO 1561
// begin if others11 > 0 then
1392: LD_EXP 14
1396: PUSH
1397: LD_INT 0
1399: GREATER
1400: IFFALSE 1473
// begin if spawnMode = 1 then
1402: LD_VAR 0 3
1406: PUSH
1407: LD_INT 1
1409: EQUAL
1410: IFFALSE 1435
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1412: LD_EXP 14
1416: PUSH
1417: LD_INT 1
1419: ARRAY
1420: PPUSH
1421: LD_VAR 0 1
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
1433: GO 1453
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1435: LD_EXP 14
1439: PUSH
1440: LD_INT 1
1442: ARRAY
1443: PPUSH
1444: LD_VAR 0 2
1448: PPUSH
1449: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1453: LD_ADDR_EXP 14
1457: PUSH
1458: LD_EXP 14
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL_OW 3
1470: ST_TO_ADDR
// end else
1471: GO 1561
// begin hc_name =  ;
1473: LD_ADDR_OWVAR 26
1477: PUSH
1478: LD_STRING 
1480: ST_TO_ADDR
// hc_gallery =  ;
1481: LD_ADDR_OWVAR 33
1485: PUSH
1486: LD_STRING 
1488: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1489: LD_INT 0
1491: PPUSH
1492: LD_INT 1
1494: PUSH
1495: LD_INT 2
1497: PUSH
1498: LD_INT 3
1500: PUSH
1501: LD_INT 4
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: CALL_OW 12
1520: ARRAY
1521: PPUSH
1522: LD_INT 7
1524: PPUSH
1525: LD_INT 9
1527: PPUSH
1528: CALL_OW 12
1532: PPUSH
1533: CALL_OW 380
// un = CreateHuman ;
1537: LD_ADDR_VAR 0 7
1541: PUSH
1542: CALL_OW 44
1546: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1547: LD_VAR 0 7
1551: PPUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 52
// end ; end ; end ;
1561: LD_VAR 0 5
1565: RET
// export function PrepareVehicles ; var veh ; begin
1566: LD_INT 0
1568: PPUSH
1569: PPUSH
// uc_side = 1 ;
1570: LD_ADDR_OWVAR 20
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// uc_nation = 1 ;
1578: LD_ADDR_OWVAR 21
1582: PUSH
1583: LD_INT 1
1585: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1586: LD_ADDR_OWVAR 37
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// vc_engine = 3 ;
1594: LD_ADDR_OWVAR 39
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// vc_control = 3 ;
1602: LD_ADDR_OWVAR 38
1606: PUSH
1607: LD_INT 3
1609: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1610: LD_ADDR_OWVAR 40
1614: PUSH
1615: LD_INT 4
1617: ST_TO_ADDR
// veh = CreateVehicle ;
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: CALL_OW 45
1627: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_INT 4
1635: PPUSH
1636: LD_INT 0
1638: PPUSH
1639: CALL_OW 49
// vc_weapon = us_double_gun ;
1643: LD_ADDR_OWVAR 40
1647: PUSH
1648: LD_INT 5
1650: ST_TO_ADDR
// vc_control = 1 ;
1651: LD_ADDR_OWVAR 38
1655: PUSH
1656: LD_INT 1
1658: ST_TO_ADDR
// veh = CreateVehicle ;
1659: LD_ADDR_VAR 0 2
1663: PUSH
1664: CALL_OW 45
1668: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1669: LD_VAR 0 2
1673: PPUSH
1674: LD_INT 4
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL_OW 49
// vc_weapon = us_light_gun ;
1684: LD_ADDR_OWVAR 40
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// vc_control = 3 ;
1692: LD_ADDR_OWVAR 38
1696: PUSH
1697: LD_INT 3
1699: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1700: LD_ADDR_OWVAR 37
1704: PUSH
1705: LD_INT 2
1707: ST_TO_ADDR
// veh = CreateVehicle ;
1708: LD_ADDR_VAR 0 2
1712: PUSH
1713: CALL_OW 45
1717: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1718: LD_VAR 0 2
1722: PPUSH
1723: LD_INT 4
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1733: LD_ADDR_OWVAR 40
1737: PUSH
1738: LD_INT 4
1740: ST_TO_ADDR
// veh = CreateVehicle ;
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: CALL_OW 45
1750: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1751: LD_VAR 0 2
1755: PPUSH
1756: LD_INT 4
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: CALL_OW 49
// end ;
1766: LD_VAR 0 1
1770: RET
// export function PowellSupport1 ; var veh , un ; begin
1771: LD_INT 0
1773: PPUSH
1774: PPUSH
1775: PPUSH
// uc_side = 1 ;
1776: LD_ADDR_OWVAR 20
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// uc_nation = 1 ;
1784: LD_ADDR_OWVAR 21
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1792: LD_STRING 11_Brown
1794: PPUSH
1795: CALL_OW 28
1799: PUSH
1800: LD_INT 1
1802: EQUAL
1803: IFFALSE 1850
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1805: LD_ADDR_EXP 7
1809: PUSH
1810: LD_STRING 11_Brown
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 13121 0 2
1820: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1821: LD_EXP 7
1825: PPUSH
1826: LD_INT 2
1828: PPUSH
1829: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1833: LD_EXP 7
1837: PPUSH
1838: LD_INT 4
1840: PPUSH
1841: LD_INT 0
1843: PPUSH
1844: CALL_OW 49
// end else
1848: GO 1866
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1850: LD_INT 4
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL 1142 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1866: LD_STRING 11_Gary
1868: PPUSH
1869: CALL_OW 28
1873: PUSH
1874: LD_INT 1
1876: EQUAL
1877: IFFALSE 1924
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1879: LD_ADDR_EXP 11
1883: PUSH
1884: LD_STRING 11_Gary
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: CALL 13121 0 2
1894: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1895: LD_EXP 11
1899: PPUSH
1900: LD_INT 2
1902: PPUSH
1903: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1907: LD_EXP 11
1911: PPUSH
1912: LD_INT 4
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 49
// end else
1922: GO 1940
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1924: LD_INT 4
1926: PPUSH
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL 1142 0 4
// end ; vc_chassis = us_medium_tracked ;
1940: LD_ADDR_OWVAR 37
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
// vc_engine = 3 ;
1948: LD_ADDR_OWVAR 39
1952: PUSH
1953: LD_INT 3
1955: ST_TO_ADDR
// vc_control = 1 ;
1956: LD_ADDR_OWVAR 38
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// vc_weapon = us_crane ;
1964: LD_ADDR_OWVAR 40
1968: PUSH
1969: LD_INT 13
1971: ST_TO_ADDR
// veh = CreateVehicle ;
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: CALL_OW 45
1981: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1982: LD_VAR 0 2
1986: PPUSH
1987: LD_INT 4
1989: PPUSH
1990: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1994: LD_VAR 0 2
1998: PPUSH
1999: LD_INT 4
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2009: LD_INT 4
2011: PPUSH
2012: LD_VAR 0 2
2016: PPUSH
2017: LD_INT 2
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL 1142 0 4
// vc_weapon = 9 ;
2027: LD_ADDR_OWVAR 40
2031: PUSH
2032: LD_INT 9
2034: ST_TO_ADDR
// veh = CreateVehicle ;
2035: LD_ADDR_VAR 0 2
2039: PUSH
2040: CALL_OW 45
2044: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2045: LD_VAR 0 2
2049: PPUSH
2050: LD_INT 4
2052: PPUSH
2053: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2057: LD_VAR 0 2
2061: PPUSH
2062: LD_INT 4
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2072: LD_INT 4
2074: PPUSH
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL 1142 0 4
// vc_control = 3 ;
2090: LD_ADDR_OWVAR 38
2094: PUSH
2095: LD_INT 3
2097: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2098: LD_ADDR_OWVAR 40
2102: PUSH
2103: LD_INT 12
2105: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2106: LD_ADDR_EXP 15
2110: PUSH
2111: CALL_OW 45
2115: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2116: LD_ADDR_EXP 16
2120: PUSH
2121: CALL_OW 45
2125: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2126: LD_EXP 15
2130: PPUSH
2131: LD_INT 4
2133: PPUSH
2134: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2138: LD_EXP 16
2142: PPUSH
2143: LD_INT 4
2145: PPUSH
2146: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2150: LD_EXP 15
2154: PPUSH
2155: LD_INT 4
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2165: LD_EXP 16
2169: PPUSH
2170: LD_INT 4
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2180: LD_EXP 15
2184: PPUSH
2185: LD_INT 3
2187: PPUSH
2188: LD_INT 100
2190: PPUSH
2191: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2195: LD_EXP 16
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 80
2205: PPUSH
2206: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2210: LD_EXP 16
2214: PPUSH
2215: LD_INT 3
2217: PPUSH
2218: LD_INT 20
2220: PPUSH
2221: CALL_OW 291
// end ;
2225: LD_VAR 0 1
2229: RET
// export function PowellSupport2 ; var veh , un ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
2234: PPUSH
// uc_side = 1 ;
2235: LD_ADDR_OWVAR 20
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// uc_nation = 1 ;
2243: LD_ADDR_OWVAR 21
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2251: LD_ADDR_OWVAR 37
2255: PUSH
2256: LD_INT 2
2258: ST_TO_ADDR
// vc_engine = 3 ;
2259: LD_ADDR_OWVAR 39
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_control = 3 ;
2267: LD_ADDR_OWVAR 38
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2275: LD_ADDR_OWVAR 40
2279: PUSH
2280: LD_INT 3
2282: ST_TO_ADDR
// veh = CreateVehicle ;
2283: LD_ADDR_VAR 0 2
2287: PUSH
2288: CALL_OW 45
2292: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2293: LD_VAR 0 2
2297: PPUSH
2298: LD_INT 4
2300: PPUSH
2301: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2305: LD_VAR 0 2
2309: PPUSH
2310: LD_INT 4
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: CALL_OW 49
// vc_control = 1 ;
2320: LD_ADDR_OWVAR 38
2324: PUSH
2325: LD_INT 1
2327: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2328: LD_ADDR_OWVAR 37
2332: PUSH
2333: LD_INT 2
2335: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2336: LD_ADDR_OWVAR 40
2340: PUSH
2341: LD_INT 5
2343: ST_TO_ADDR
// veh = CreateVehicle ;
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: CALL_OW 45
2353: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2354: LD_VAR 0 2
2358: PPUSH
2359: LD_INT 4
2361: PPUSH
2362: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2366: LD_VAR 0 2
2370: PPUSH
2371: LD_INT 4
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2381: LD_STRING 11_Bobby
2383: PPUSH
2384: CALL_OW 28
2388: PUSH
2389: LD_INT 1
2391: EQUAL
2392: IFFALSE 2438
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2394: LD_ADDR_EXP 4
2398: PUSH
2399: LD_STRING 11_Bobby
2401: PPUSH
2402: LD_INT 1
2404: PPUSH
2405: CALL 13121 0 2
2409: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2410: LD_EXP 4
2414: PPUSH
2415: LD_INT 3
2417: PPUSH
2418: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2422: LD_EXP 4
2426: PPUSH
2427: LD_VAR 0 2
2431: PPUSH
2432: CALL_OW 52
// end else
2436: GO 2456
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2438: LD_INT 0
2440: PPUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_INT 2
2448: PPUSH
2449: LD_INT 0
2451: PPUSH
2452: CALL 1142 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2456: LD_STRING 11_Houten
2458: PPUSH
2459: CALL_OW 28
2463: PUSH
2464: LD_INT 1
2466: EQUAL
2467: IFFALSE 2514
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2469: LD_ADDR_EXP 9
2473: PUSH
2474: LD_STRING 11_Houten
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL 13121 0 2
2484: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2485: LD_EXP 9
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2497: LD_EXP 9
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL_OW 49
// end else
2512: GO 2530
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2514: LD_INT 4
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: LD_INT 1
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: CALL 1142 0 4
// end ; vc_control = 3 ;
2530: LD_ADDR_OWVAR 38
2534: PUSH
2535: LD_INT 3
2537: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2538: LD_ADDR_OWVAR 40
2542: PUSH
2543: LD_INT 12
2545: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2546: LD_ADDR_EXP 17
2550: PUSH
2551: CALL_OW 45
2555: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2556: LD_EXP 17
2560: PPUSH
2561: LD_INT 4
2563: PPUSH
2564: CALL_OW 233
// amCargo4 = CreateVehicle ;
2568: LD_ADDR_EXP 18
2572: PUSH
2573: CALL_OW 45
2577: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2578: LD_EXP 18
2582: PPUSH
2583: LD_INT 4
2585: PPUSH
2586: CALL_OW 233
// amCargo5 = CreateVehicle ;
2590: LD_ADDR_EXP 19
2594: PUSH
2595: CALL_OW 45
2599: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2600: LD_EXP 19
2604: PPUSH
2605: LD_INT 4
2607: PPUSH
2608: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2612: LD_EXP 17
2616: PPUSH
2617: LD_INT 4
2619: PPUSH
2620: LD_INT 0
2622: PPUSH
2623: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2627: LD_EXP 18
2631: PPUSH
2632: LD_INT 4
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2642: LD_EXP 19
2646: PPUSH
2647: LD_INT 4
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 49
// AddCargo ( amCargo3 , 1 , 100 ) ;
2657: LD_EXP 17
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 100
2667: PPUSH
2668: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2672: LD_EXP 18
2676: PPUSH
2677: LD_INT 1
2679: PPUSH
2680: LD_INT 100
2682: PPUSH
2683: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2687: LD_EXP 19
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: LD_INT 100
2697: PPUSH
2698: CALL_OW 291
// end ;
2702: LD_VAR 0 1
2706: RET
// export function PowellSupport3 ; var veh , un ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
2711: PPUSH
// uc_side = 1 ;
2712: LD_ADDR_OWVAR 20
2716: PUSH
2717: LD_INT 1
2719: ST_TO_ADDR
// uc_nation = 1 ;
2720: LD_ADDR_OWVAR 21
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2728: LD_INT 4
2730: PPUSH
2731: LD_INT 0
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL 1142 0 4
// vc_chassis = us_medium_wheeled ;
2744: LD_ADDR_OWVAR 37
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// vc_engine = 3 ;
2752: LD_ADDR_OWVAR 39
2756: PUSH
2757: LD_INT 3
2759: ST_TO_ADDR
// vc_control = 3 ;
2760: LD_ADDR_OWVAR 38
2764: PUSH
2765: LD_INT 3
2767: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2768: LD_ADDR_OWVAR 40
2772: PUSH
2773: LD_INT 12
2775: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2776: LD_ADDR_EXP 20
2780: PUSH
2781: CALL_OW 45
2785: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2786: LD_ADDR_EXP 21
2790: PUSH
2791: CALL_OW 45
2795: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2796: LD_EXP 20
2800: PPUSH
2801: LD_INT 4
2803: PPUSH
2804: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2808: LD_EXP 21
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2820: LD_EXP 20
2824: PPUSH
2825: LD_INT 4
2827: PPUSH
2828: LD_INT 0
2830: PPUSH
2831: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2835: LD_EXP 21
2839: PPUSH
2840: LD_INT 4
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2850: LD_EXP 20
2854: PPUSH
2855: LD_INT 1
2857: PPUSH
2858: LD_INT 100
2860: PPUSH
2861: CALL_OW 291
// AddCargo ( amCargo7 , 3 , 100 ) ;
2865: LD_EXP 21
2869: PPUSH
2870: LD_INT 3
2872: PPUSH
2873: LD_INT 100
2875: PPUSH
2876: CALL_OW 291
// end ; end_of_file
2880: LD_VAR 0 1
2884: RET
// export function PrepareRussianCommander ; begin
2885: LD_INT 0
2887: PPUSH
// uc_side = 3 ;
2888: LD_ADDR_OWVAR 20
2892: PUSH
2893: LD_INT 3
2895: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
2896: LD_ADDR_EXP 23
2900: PUSH
2901: LD_STRING Davidov
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL 13121 0 2
2911: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
2924: LD_ADDR_EXP 35
2928: PUSH
2929: LD_EXP 35
2933: PUSH
2934: LD_EXP 23
2938: ADD
2939: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
2940: LD_EXP 35
2944: PPUSH
2945: LD_INT 4
2947: PPUSH
2948: CALL_OW 336
// end ;
2952: LD_VAR 0 1
2956: RET
// export function PrepareEastBase ; var i , un ; begin
2957: LD_INT 0
2959: PPUSH
2960: PPUSH
2961: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
2962: LD_INT 3
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: LD_INT 121
2970: PPUSH
2971: LD_EXP 37
2975: PPUSH
2976: LD_EXP 38
2980: PPUSH
2981: CALL_OW 12
2985: PPUSH
2986: LD_INT 1
2988: PPUSH
2989: LD_INT 3
2991: PPUSH
2992: CALL 13913 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
2996: LD_INT 3
2998: PPUSH
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 121
3004: PPUSH
3005: LD_EXP 37
3009: PPUSH
3010: LD_EXP 38
3014: PPUSH
3015: CALL_OW 12
3019: PPUSH
3020: LD_INT 9
3022: PPUSH
3023: LD_INT 3
3025: PPUSH
3026: CALL 13913 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3030: LD_INT 3
3032: PPUSH
3033: LD_INT 3
3035: PPUSH
3036: LD_INT 4
3038: PPUSH
3039: LD_EXP 37
3043: PPUSH
3044: LD_EXP 38
3048: PPUSH
3049: CALL_OW 12
3053: PPUSH
3054: LD_INT 2
3056: PPUSH
3057: LD_INT 6
3059: PPUSH
3060: CALL 13913 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3064: LD_INT 3
3066: PPUSH
3067: LD_INT 3
3069: PPUSH
3070: LD_INT 112
3072: PPUSH
3073: LD_EXP 37
3077: PPUSH
3078: LD_EXP 38
3082: PPUSH
3083: CALL_OW 12
3087: PPUSH
3088: LD_INT 3
3090: PPUSH
3091: LD_INT 6
3093: PPUSH
3094: CALL 13913 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: LD_INT 47
3106: PPUSH
3107: LD_EXP 37
3111: PPUSH
3112: LD_EXP 38
3116: PPUSH
3117: CALL_OW 12
3121: PPUSH
3122: LD_INT 4
3124: PPUSH
3125: LD_INT 6
3127: PPUSH
3128: CALL 13913 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3132: LD_INT 3
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_INT 129
3140: PPUSH
3141: LD_EXP 37
3145: PPUSH
3146: LD_EXP 38
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: LD_INT 4
3158: PPUSH
3159: LD_INT 6
3161: PPUSH
3162: CALL 13913 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3166: LD_INT 3
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 135
3174: PPUSH
3175: LD_EXP 37
3179: PPUSH
3180: LD_EXP 38
3184: PPUSH
3185: CALL_OW 12
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: LD_INT 6
3195: PPUSH
3196: CALL 13913 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 30
3217: PUSH
3218: LD_INT 32
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PPUSH
3229: CALL_OW 69
3233: PUSH
3234: FOR_IN
3235: IFFALSE 3275
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_VAR 0 2
3247: PPUSH
3248: LD_EXP 37
3252: PPUSH
3253: LD_EXP 38
3257: PPUSH
3258: CALL_OW 12
3262: PPUSH
3263: LD_INT 1
3265: PPUSH
3266: LD_INT 1
3268: PPUSH
3269: CALL 13913 0 6
3273: GO 3234
3275: POP
3276: POP
// for i = 1 to 5 do
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_INT 5
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3390
// begin uc_side = 3 ;
3293: LD_ADDR_OWVAR 20
3297: PUSH
3298: LD_INT 3
3300: ST_TO_ADDR
// uc_nation = 3 ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 3
3308: ST_TO_ADDR
// hc_gallery =  ;
3309: LD_ADDR_OWVAR 33
3313: PUSH
3314: LD_STRING 
3316: ST_TO_ADDR
// hc_name =  ;
3317: LD_ADDR_OWVAR 26
3321: PUSH
3322: LD_STRING 
3324: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3325: LD_INT 0
3327: PPUSH
3328: LD_INT 4
3330: PPUSH
3331: LD_EXP 37
3335: PPUSH
3336: LD_EXP 38
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: CALL_OW 380
// un = CreateHuman ;
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: CALL_OW 44
3359: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3372: LD_ADDR_EXP 35
3376: PUSH
3377: LD_EXP 35
3381: PUSH
3382: LD_VAR 0 3
3386: ADD
3387: ST_TO_ADDR
// end ;
3388: GO 3290
3390: POP
3391: POP
// end ;
3392: LD_VAR 0 1
3396: RET
// export function PrepareWestBase ; var i , un ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
3401: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3402: LD_INT 3
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 6
3410: PPUSH
3411: LD_EXP 37
3415: PPUSH
3416: LD_EXP 38
3420: PPUSH
3421: CALL_OW 12
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: LD_INT 3
3431: PPUSH
3432: CALL 13913 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3436: LD_INT 3
3438: PPUSH
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 91
3444: PPUSH
3445: LD_EXP 37
3449: PPUSH
3450: LD_EXP 38
3454: PPUSH
3455: CALL_OW 12
3459: PPUSH
3460: LD_INT 4
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: CALL 13913 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 21
3478: PPUSH
3479: LD_EXP 37
3483: PPUSH
3484: LD_EXP 38
3488: PPUSH
3489: CALL_OW 12
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: LD_INT 6
3499: PPUSH
3500: CALL 13913 0 6
// end ;
3504: LD_VAR 0 1
3508: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3509: LD_INT 0
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
// uc_side = 3 ;
3515: LD_ADDR_OWVAR 20
3519: PUSH
3520: LD_INT 3
3522: ST_TO_ADDR
// uc_nation = 3 ;
3523: LD_ADDR_OWVAR 21
3527: PUSH
3528: LD_INT 3
3530: ST_TO_ADDR
// for i = 1 to 5 do
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: DOUBLE
3537: LD_INT 1
3539: DEC
3540: ST_TO_ADDR
3541: LD_INT 5
3543: PUSH
3544: FOR_TO
3545: IFFALSE 3615
// begin hc_gallery =  ;
3547: LD_ADDR_OWVAR 33
3551: PUSH
3552: LD_STRING 
3554: ST_TO_ADDR
// hc_name =  ;
3555: LD_ADDR_OWVAR 26
3559: PUSH
3560: LD_STRING 
3562: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 9
3568: PPUSH
3569: LD_EXP 37
3573: PPUSH
3574: LD_EXP 38
3578: PPUSH
3579: CALL_OW 12
3583: PPUSH
3584: CALL_OW 380
// un = CreateHuman ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: CALL_OW 44
3597: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_INT 8
3605: PPUSH
3606: LD_INT 0
3608: PPUSH
3609: CALL_OW 49
// end ;
3613: GO 3544
3615: POP
3616: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3617: LD_ADDR_VAR 0 2
3621: PUSH
3622: DOUBLE
3623: LD_INT 1
3625: DEC
3626: ST_TO_ADDR
3627: LD_INT 2
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: LD_OWVAR 67
3645: ARRAY
3646: PUSH
3647: FOR_TO
3648: IFFALSE 3718
// begin hc_gallery =  ;
3650: LD_ADDR_OWVAR 33
3654: PUSH
3655: LD_STRING 
3657: ST_TO_ADDR
// hc_name =  ;
3658: LD_ADDR_OWVAR 26
3662: PUSH
3663: LD_STRING 
3665: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3666: LD_INT 0
3668: PPUSH
3669: LD_INT 4
3671: PPUSH
3672: LD_EXP 37
3676: PPUSH
3677: LD_EXP 38
3681: PPUSH
3682: CALL_OW 12
3686: PPUSH
3687: CALL_OW 380
// un = CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 8
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL_OW 49
// end ;
3716: GO 3647
3718: POP
3719: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3720: LD_ADDR_VAR 0 2
3724: PUSH
3725: DOUBLE
3726: LD_INT 1
3728: DEC
3729: ST_TO_ADDR
3730: LD_INT 3
3732: PUSH
3733: LD_INT 4
3735: PUSH
3736: LD_INT 5
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3947
// begin vc_engine = 3 ;
3753: LD_ADDR_OWVAR 39
3757: PUSH
3758: LD_INT 3
3760: ST_TO_ADDR
// vc_control = 1 ;
3761: LD_ADDR_OWVAR 38
3765: PUSH
3766: LD_INT 1
3768: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3769: LD_ADDR_OWVAR 40
3773: PUSH
3774: LD_INT 42
3776: PUSH
3777: LD_INT 43
3779: PUSH
3780: LD_INT 44
3782: PUSH
3783: LD_INT 45
3785: PUSH
3786: LD_INT 46
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 5
3801: PPUSH
3802: CALL_OW 12
3806: ARRAY
3807: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 46
3815: EQUAL
3816: IFFALSE 3828
// vc_chassis = ru_heavy_tracked else
3818: LD_ADDR_OWVAR 37
3822: PUSH
3823: LD_INT 24
3825: ST_TO_ADDR
3826: GO 3855
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3828: LD_ADDR_OWVAR 37
3832: PUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 21
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 2
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: ST_TO_ADDR
// veh = CreateVehicle ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: CALL_OW 45
3864: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3865: LD_VAR 0 4
3869: PPUSH
3870: LD_INT 3
3872: PPUSH
3873: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
3877: LD_VAR 0 4
3881: PPUSH
3882: LD_INT 5
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 49
// hc_gallery =  ;
3892: LD_ADDR_OWVAR 33
3896: PUSH
3897: LD_STRING 
3899: ST_TO_ADDR
// hc_name =  ;
3900: LD_ADDR_OWVAR 26
3904: PUSH
3905: LD_STRING 
3907: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 3
3913: PPUSH
3914: LD_INT 10
3916: PPUSH
3917: CALL_OW 380
// un = CreateHuman ;
3921: LD_ADDR_VAR 0 3
3925: PUSH
3926: CALL_OW 44
3930: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3931: LD_VAR 0 3
3935: PPUSH
3936: LD_VAR 0 4
3940: PPUSH
3941: CALL_OW 52
// end ;
3945: GO 3750
3947: POP
3948: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 3
3961: PUSH
3962: LD_INT 4
3964: PUSH
3965: LD_INT 5
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_OWVAR 67
3977: ARRAY
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4127
// begin vc_engine = 3 ;
3982: LD_ADDR_OWVAR 39
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// vc_control = 3 ;
3990: LD_ADDR_OWVAR 38
3994: PUSH
3995: LD_INT 3
3997: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
3998: LD_ADDR_OWVAR 40
4002: PUSH
4003: LD_INT 42
4005: PUSH
4006: LD_INT 43
4008: PUSH
4009: LD_INT 44
4011: PUSH
4012: LD_INT 45
4014: PUSH
4015: LD_INT 46
4017: PUSH
4018: LD_INT 49
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: CALL_OW 12
4039: ARRAY
4040: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4041: LD_OWVAR 40
4045: PUSH
4046: LD_INT 46
4048: EQUAL
4049: IFFALSE 4061
// vc_chassis = ru_heavy_tracked else
4051: LD_ADDR_OWVAR 37
4055: PUSH
4056: LD_INT 24
4058: ST_TO_ADDR
4059: GO 4088
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4061: LD_ADDR_OWVAR 37
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 21
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 2
4081: PPUSH
4082: CALL_OW 12
4086: ARRAY
4087: ST_TO_ADDR
// veh = CreateVehicle ;
4088: LD_ADDR_VAR 0 4
4092: PUSH
4093: CALL_OW 45
4097: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4098: LD_VAR 0 4
4102: PPUSH
4103: LD_INT 3
4105: PPUSH
4106: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4110: LD_VAR 0 4
4114: PPUSH
4115: LD_INT 6
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 3979
4127: POP
4128: POP
// end ; end_of_file
4129: LD_VAR 0 1
4133: RET
// export function PrepareKurt ; begin
4134: LD_INT 0
4136: PPUSH
// uc_side = 8 ;
4137: LD_ADDR_OWVAR 20
4141: PUSH
4142: LD_INT 8
4144: ST_TO_ADDR
// uc_nation = 2 ;
4145: LD_ADDR_OWVAR 21
4149: PUSH
4150: LD_INT 2
4152: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4153: LD_ADDR_OWVAR 37
4157: PUSH
4158: LD_INT 13
4160: ST_TO_ADDR
// vc_engine = 1 ;
4161: LD_ADDR_OWVAR 39
4165: PUSH
4166: LD_INT 1
4168: ST_TO_ADDR
// vc_control = 1 ;
4169: LD_ADDR_OWVAR 38
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// vc_weapon = 24 ;
4177: LD_ADDR_OWVAR 40
4181: PUSH
4182: LD_INT 24
4184: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4185: LD_ADDR_EXP 26
4189: PUSH
4190: CALL_OW 45
4194: ST_TO_ADDR
// if kurtStatus > 0 then
4195: LD_EXP 27
4199: PUSH
4200: LD_INT 0
4202: GREATER
4203: IFFALSE 4252
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4205: LD_ADDR_EXP 24
4209: PUSH
4210: LD_STRING Kurt
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: CALL 13121 0 2
4220: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4221: LD_EXP 26
4225: PPUSH
4226: LD_INT 4
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4236: LD_EXP 24
4240: PPUSH
4241: LD_EXP 26
4245: PPUSH
4246: CALL_OW 52
// end else
4250: GO 4317
// begin hc_name =  ;
4252: LD_ADDR_OWVAR 26
4256: PUSH
4257: LD_STRING 
4259: ST_TO_ADDR
// hc_gallery =  ;
4260: LD_ADDR_OWVAR 33
4264: PUSH
4265: LD_STRING 
4267: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4268: LD_INT 1
4270: PPUSH
4271: LD_INT 10
4273: PPUSH
4274: CALL_OW 381
// otherKurt = CreateHuman ;
4278: LD_ADDR_EXP 25
4282: PUSH
4283: CALL_OW 44
4287: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4288: LD_EXP 26
4292: PPUSH
4293: LD_INT 4
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL_OW 49
// PlaceHumanInUnit ( otherKurt , KurtVeh ) ;
4303: LD_EXP 25
4307: PPUSH
4308: LD_EXP 26
4312: PPUSH
4313: CALL_OW 52
// end ; end ;
4317: LD_VAR 0 1
4321: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4322: LD_INT 0
4324: PPUSH
4325: PPUSH
4326: PPUSH
4327: PPUSH
// for i = 1 to 3 do
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 3
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4479
// begin uc_side = 1 ;
4344: LD_ADDR_OWVAR 20
4348: PUSH
4349: LD_INT 1
4351: ST_TO_ADDR
// uc_nation = 2 ;
4352: LD_ADDR_OWVAR 21
4356: PUSH
4357: LD_INT 2
4359: ST_TO_ADDR
// hc_gallery =  ;
4360: LD_ADDR_OWVAR 33
4364: PUSH
4365: LD_STRING 
4367: ST_TO_ADDR
// hc_name =  ;
4368: LD_ADDR_OWVAR 26
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4376: LD_EXP 27
4380: PUSH
4381: LD_INT 0
4383: EQUAL
4384: PUSH
4385: LD_EXP 27
4389: PUSH
4390: LD_INT 2
4392: EQUAL
4393: OR
4394: IFFALSE 4419
// PrepareHuman ( false , 1 , Rand ( 2 , 4 ) ) else
4396: LD_INT 0
4398: PPUSH
4399: LD_INT 1
4401: PPUSH
4402: LD_INT 2
4404: PPUSH
4405: LD_INT 4
4407: PPUSH
4408: CALL_OW 12
4412: PPUSH
4413: CALL_OW 380
4417: GO 4440
// PrepareHuman ( false , 1 , Rand ( 6 , 8 ) ) ;
4419: LD_INT 0
4421: PPUSH
4422: LD_INT 1
4424: PPUSH
4425: LD_INT 6
4427: PPUSH
4428: LD_INT 8
4430: PPUSH
4431: CALL_OW 12
4435: PPUSH
4436: CALL_OW 380
// un = CreateHuman ;
4440: LD_ADDR_VAR 0 3
4444: PUSH
4445: CALL_OW 44
4449: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4450: LD_VAR 0 3
4454: PPUSH
4455: LD_INT 4
4457: PPUSH
4458: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4462: LD_VAR 0 3
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 49
// end ;
4477: GO 4341
4479: POP
4480: POP
// vc_chassis = 14 ;
4481: LD_ADDR_OWVAR 37
4485: PUSH
4486: LD_INT 14
4488: ST_TO_ADDR
// vc_engine = 3 ;
4489: LD_ADDR_OWVAR 39
4493: PUSH
4494: LD_INT 3
4496: ST_TO_ADDR
// vc_control = 1 ;
4497: LD_ADDR_OWVAR 38
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4505: LD_ADDR_OWVAR 40
4509: PUSH
4510: LD_INT 27
4512: PUSH
4513: LD_INT 26
4515: PUSH
4516: LD_INT 28
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 1
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: CALL_OW 12
4534: ARRAY
4535: ST_TO_ADDR
// veh = CreateVehicle ;
4536: LD_ADDR_VAR 0 4
4540: PUSH
4541: CALL_OW 45
4545: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4546: LD_VAR 0 4
4550: PPUSH
4551: LD_INT 4
4553: PPUSH
4554: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4558: LD_VAR 0 4
4562: PPUSH
4563: LD_INT 4
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4573: LD_EXP 27
4577: PUSH
4578: LD_INT 0
4580: EQUAL
4581: PUSH
4582: LD_EXP 27
4586: PUSH
4587: LD_INT 2
4589: EQUAL
4590: OR
4591: IFFALSE 4616
// PrepareHuman ( false , 3 , Rand ( 2 , 4 ) ) else
4593: LD_INT 0
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: LD_INT 2
4601: PPUSH
4602: LD_INT 4
4604: PPUSH
4605: CALL_OW 12
4609: PPUSH
4610: CALL_OW 380
4614: GO 4637
// PrepareHuman ( false , 3 , Rand ( 6 , 8 ) ) ;
4616: LD_INT 0
4618: PPUSH
4619: LD_INT 3
4621: PPUSH
4622: LD_INT 6
4624: PPUSH
4625: LD_INT 8
4627: PPUSH
4628: CALL_OW 12
4632: PPUSH
4633: CALL_OW 380
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_VAR 0 4
4656: PPUSH
4657: CALL_OW 52
// vc_chassis = 14 ;
4661: LD_ADDR_OWVAR 37
4665: PUSH
4666: LD_INT 14
4668: ST_TO_ADDR
// vc_engine = 3 ;
4669: LD_ADDR_OWVAR 39
4673: PUSH
4674: LD_INT 3
4676: ST_TO_ADDR
// vc_control = 1 ;
4677: LD_ADDR_OWVAR 38
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4685: LD_ADDR_OWVAR 40
4689: PUSH
4690: LD_INT 27
4692: PUSH
4693: LD_INT 26
4695: PUSH
4696: LD_INT 28
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 3
4709: PPUSH
4710: CALL_OW 12
4714: ARRAY
4715: ST_TO_ADDR
// veh = CreateVehicle ;
4716: LD_ADDR_VAR 0 4
4720: PUSH
4721: CALL_OW 45
4725: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_INT 4
4733: PPUSH
4734: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4738: LD_VAR 0 4
4742: PPUSH
4743: LD_INT 4
4745: PPUSH
4746: LD_INT 0
4748: PPUSH
4749: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4753: LD_EXP 27
4757: PUSH
4758: LD_INT 0
4760: EQUAL
4761: PUSH
4762: LD_EXP 27
4766: PUSH
4767: LD_INT 2
4769: EQUAL
4770: OR
4771: IFFALSE 4796
// PrepareHuman ( false , 4 , Rand ( 2 , 4 ) ) else
4773: LD_INT 0
4775: PPUSH
4776: LD_INT 4
4778: PPUSH
4779: LD_INT 2
4781: PPUSH
4782: LD_INT 4
4784: PPUSH
4785: CALL_OW 12
4789: PPUSH
4790: CALL_OW 380
4794: GO 4817
// PrepareHuman ( false , 4 , Rand ( 6 , 8 ) ) ;
4796: LD_INT 0
4798: PPUSH
4799: LD_INT 4
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 8
4807: PPUSH
4808: CALL_OW 12
4812: PPUSH
4813: CALL_OW 380
// un = CreateHuman ;
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: CALL_OW 44
4826: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_INT 4
4834: PPUSH
4835: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4839: LD_VAR 0 3
4843: PPUSH
4844: LD_VAR 0 4
4848: PPUSH
4849: CALL_OW 52
// vc_chassis = 14 ;
4853: LD_ADDR_OWVAR 37
4857: PUSH
4858: LD_INT 14
4860: ST_TO_ADDR
// vc_engine = 3 ;
4861: LD_ADDR_OWVAR 39
4865: PUSH
4866: LD_INT 3
4868: ST_TO_ADDR
// vc_control = 1 ;
4869: LD_ADDR_OWVAR 38
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4877: LD_ADDR_OWVAR 40
4881: PUSH
4882: LD_INT 27
4884: PUSH
4885: LD_INT 26
4887: PUSH
4888: LD_INT 28
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 1
4898: PPUSH
4899: LD_INT 3
4901: PPUSH
4902: CALL_OW 12
4906: ARRAY
4907: ST_TO_ADDR
// veh = CreateVehicle ;
4908: LD_ADDR_VAR 0 4
4912: PUSH
4913: CALL_OW 45
4917: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4918: LD_VAR 0 4
4922: PPUSH
4923: LD_INT 4
4925: PPUSH
4926: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4930: LD_VAR 0 4
4934: PPUSH
4935: LD_INT 4
4937: PPUSH
4938: LD_INT 0
4940: PPUSH
4941: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4945: LD_EXP 27
4949: PUSH
4950: LD_INT 0
4952: EQUAL
4953: PUSH
4954: LD_EXP 27
4958: PUSH
4959: LD_INT 2
4961: EQUAL
4962: OR
4963: IFFALSE 4988
// PrepareHuman ( false , 2 , Rand ( 2 , 4 ) ) else
4965: LD_INT 0
4967: PPUSH
4968: LD_INT 2
4970: PPUSH
4971: LD_INT 2
4973: PPUSH
4974: LD_INT 4
4976: PPUSH
4977: CALL_OW 12
4981: PPUSH
4982: CALL_OW 380
4986: GO 5009
// PrepareHuman ( false , 2 , Rand ( 6 , 8 ) ) ;
4988: LD_INT 0
4990: PPUSH
4991: LD_INT 2
4993: PPUSH
4994: LD_INT 6
4996: PPUSH
4997: LD_INT 8
4999: PPUSH
5000: CALL_OW 12
5004: PPUSH
5005: CALL_OW 380
// un = CreateHuman ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: CALL_OW 44
5018: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5019: LD_VAR 0 3
5023: PPUSH
5024: LD_INT 4
5026: PPUSH
5027: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_VAR 0 4
5040: PPUSH
5041: CALL_OW 52
// end ;
5045: LD_VAR 0 1
5049: RET
// export function PrepareAttackLegion ; var i , un ; begin
5050: LD_INT 0
5052: PPUSH
5053: PPUSH
5054: PPUSH
// for i = 1 to 4 do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_INT 4
5067: PUSH
5068: FOR_TO
5069: IFFALSE 5179
// begin uc_side = 8 ;
5071: LD_ADDR_OWVAR 20
5075: PUSH
5076: LD_INT 8
5078: ST_TO_ADDR
// uc_nation = 2 ;
5079: LD_ADDR_OWVAR 21
5083: PUSH
5084: LD_INT 2
5086: ST_TO_ADDR
// hc_gallery =  ;
5087: LD_ADDR_OWVAR 33
5091: PUSH
5092: LD_STRING 
5094: ST_TO_ADDR
// hc_name =  ;
5095: LD_ADDR_OWVAR 26
5099: PUSH
5100: LD_STRING 
5102: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5103: LD_INT 0
5105: PPUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 8
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: LD_INT 1
5118: PPUSH
5119: LD_INT 2
5121: PPUSH
5122: CALL_OW 12
5126: ARRAY
5127: PPUSH
5128: LD_INT 6
5130: PPUSH
5131: LD_INT 8
5133: PPUSH
5134: CALL_OW 12
5138: PPUSH
5139: CALL_OW 380
// un = CreateHuman ;
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: CALL_OW 44
5152: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5153: LD_VAR 0 3
5157: PPUSH
5158: LD_INT 19
5160: PPUSH
5161: LD_INT 0
5163: PPUSH
5164: CALL_OW 49
// ComCrawl ( un ) ;
5168: LD_VAR 0 3
5172: PPUSH
5173: CALL_OW 137
// end ;
5177: GO 5068
5179: POP
5180: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5181: LD_INT 1
5183: PPUSH
5184: LD_INT 8
5186: PPUSH
5187: LD_INT 2
5189: PPUSH
5190: LD_INT 1
5192: PPUSH
5193: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5197: LD_INT 20
5199: PPUSH
5200: LD_INT 3
5202: PPUSH
5203: CALL 16614 0 2
// end ; end_of_file
5207: LD_VAR 0 1
5211: RET
// every 1 do var i ;
5212: GO 5214
5214: DISABLE
5215: LD_INT 0
5217: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5218: LD_INT 10
5220: PPUSH
5221: LD_INT 122
5223: PPUSH
5224: LD_INT 145
5226: PPUSH
5227: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5231: LD_INT 137
5233: PPUSH
5234: LD_INT 84
5236: PPUSH
5237: LD_INT 61
5239: PPUSH
5240: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5244: LD_EXP 1
5248: PPUSH
5249: CALL_OW 310
5253: PPUSH
5254: CALL_OW 87
// InGameOn ;
5258: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5262: LD_INT 22
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PPUSH
5272: CALL_OW 69
5276: PPUSH
5277: LD_INT 130
5279: PPUSH
5280: LD_INT 103
5282: PPUSH
5283: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 114
5294: PPUSH
5295: LD_INT 102
5297: PPUSH
5298: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5302: LD_EXP 1
5306: PPUSH
5307: LD_STRING D1-JMM-1
5309: PPUSH
5310: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5314: LD_EXP 1
5318: PPUSH
5319: CALL_OW 310
5323: PPUSH
5324: CALL_OW 87
// if IsOk ( Donaldson ) then
5328: LD_EXP 3
5332: PPUSH
5333: CALL_OW 302
5337: IFFALSE 5417
// begin Say ( Donaldson , D1-Don-1 ) ;
5339: LD_EXP 3
5343: PPUSH
5344: LD_STRING D1-Don-1
5346: PPUSH
5347: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5351: LD_EXP 1
5355: PPUSH
5356: CALL_OW 310
5360: PPUSH
5361: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5365: LD_EXP 1
5369: PPUSH
5370: LD_STRING D1-JMM-2
5372: PPUSH
5373: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5377: LD_EXP 1
5381: PPUSH
5382: CALL_OW 310
5386: PPUSH
5387: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5391: LD_EXP 3
5395: PPUSH
5396: LD_STRING D1-Don-2
5398: PPUSH
5399: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5403: LD_EXP 1
5407: PPUSH
5408: CALL_OW 310
5412: PPUSH
5413: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5417: LD_INT 22
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 69
5431: PPUSH
5432: LD_INT 110
5434: PPUSH
5435: LD_INT 101
5437: PPUSH
5438: CALL_OW 171
// wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5449: LD_EXP 1
5453: PPUSH
5454: CALL_OW 310
5458: PPUSH
5459: CALL_OW 87
// wait ( 0 0$1 ) ;
5463: LD_INT 35
5465: PPUSH
5466: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5470: LD_EXP 1
5474: PPUSH
5475: CALL_OW 310
5479: PPUSH
5480: CALL_OW 87
// wait ( 0 0$1 ) ;
5484: LD_INT 35
5486: PPUSH
5487: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5491: LD_EXP 1
5495: PPUSH
5496: CALL_OW 310
5500: PPUSH
5501: CALL_OW 87
// wait ( 0 0$1 ) ;
5505: LD_INT 35
5507: PPUSH
5508: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5512: LD_EXP 1
5516: PPUSH
5517: CALL_OW 310
5521: PPUSH
5522: CALL_OW 87
// end ;
5526: PPOPN 1
5528: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5529: LD_INT 1
5531: PPUSH
5532: LD_INT 102
5534: PPUSH
5535: LD_INT 94
5537: PPUSH
5538: CALL_OW 293
5542: IFFALSE 5733
5544: GO 5546
5546: DISABLE
5547: LD_INT 0
5549: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5550: LD_INT 102
5552: PPUSH
5553: LD_INT 94
5555: PPUSH
5556: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5560: LD_INT 22
5562: PUSH
5563: LD_INT 1
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PUSH
5570: LD_INT 26
5572: PUSH
5573: LD_INT 1
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 2
5582: PUSH
5583: LD_INT 25
5585: PUSH
5586: LD_INT 1
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PUSH
5593: LD_INT 25
5595: PUSH
5596: LD_INT 2
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 25
5605: PUSH
5606: LD_INT 3
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 25
5615: PUSH
5616: LD_INT 4
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 5
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 69
5661: PPUSH
5662: LD_STRING D1-Sol1-2
5664: PPUSH
5665: LD_STRING 
5667: PPUSH
5668: CALL 13229 0 3
// Say ( JMM , D1-JMM-3 ) ;
5672: LD_EXP 1
5676: PPUSH
5677: LD_STRING D1-JMM-3
5679: PPUSH
5680: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5684: LD_STRING M1
5686: PPUSH
5687: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5691: LD_ADDR_VAR 0 1
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PPUSH
5706: CALL_OW 69
5710: PUSH
5711: FOR_IN
5712: IFFALSE 5731
// ComMoveXY ( i , 95 , 84 ) ;
5714: LD_VAR 0 1
5718: PPUSH
5719: LD_INT 95
5721: PPUSH
5722: LD_INT 84
5724: PPUSH
5725: CALL_OW 111
5729: GO 5711
5731: POP
5732: POP
// end ;
5733: PPOPN 1
5735: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_INT 8
5752: PPUSH
5753: LD_INT 22
5755: PUSH
5756: LD_INT 3
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 25
5765: PUSH
5766: LD_INT 9
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5782: LD_ADDR_VAR 0 3
5786: PUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: PUSH
5797: EMPTY
5798: LIST
5799: PPUSH
5800: CALL_OW 69
5804: ST_TO_ADDR
// enable ;
5805: ENABLE
// for i in your_units do
5806: LD_ADDR_VAR 0 1
5810: PUSH
5811: LD_VAR 0 3
5815: PUSH
5816: FOR_IN
5817: IFFALSE 6465
// begin if See ( 3 , i ) then
5819: LD_INT 3
5821: PPUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 292
5831: IFFALSE 6463
// begin disable ;
5833: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5834: LD_VAR 0 2
5838: PPUSH
5839: LD_INT 96
5841: PPUSH
5842: LD_INT 85
5844: PPUSH
5845: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5849: LD_VAR 0 2
5853: PPUSH
5854: LD_INT 96
5856: PPUSH
5857: LD_INT 85
5859: PPUSH
5860: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5864: LD_VAR 0 2
5868: PPUSH
5869: LD_INT 96
5871: PPUSH
5872: LD_INT 85
5874: PPUSH
5875: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5879: LD_VAR 0 2
5883: PPUSH
5884: LD_INT 96
5886: PPUSH
5887: LD_INT 85
5889: PPUSH
5890: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 96
5901: PPUSH
5902: LD_INT 85
5904: PPUSH
5905: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5909: LD_VAR 0 2
5913: PPUSH
5914: LD_INT 96
5916: PPUSH
5917: LD_INT 85
5919: PPUSH
5920: CALL_OW 214
// Say ( JMM , D1a-JMM-1 ) ;
5924: LD_EXP 1
5928: PPUSH
5929: LD_STRING D1a-JMM-1
5931: PPUSH
5932: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
5936: LD_EXP 3
5940: PPUSH
5941: LD_STRING D1a-Don-1
5943: PPUSH
5944: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5948: LD_ADDR_VAR 0 1
5952: PUSH
5953: LD_INT 22
5955: PUSH
5956: LD_INT 1
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PPUSH
5963: CALL_OW 69
5967: PUSH
5968: FOR_IN
5969: IFFALSE 5988
// ComMoveXY ( i , 109 , 102 ) ;
5971: LD_VAR 0 1
5975: PPUSH
5976: LD_INT 109
5978: PPUSH
5979: LD_INT 102
5981: PPUSH
5982: CALL_OW 111
5986: GO 5968
5988: POP
5989: POP
// Say ( JMM , D1a-JMM-2 ) ;
5990: LD_EXP 1
5994: PPUSH
5995: LD_STRING D1a-JMM-2
5997: PPUSH
5998: CALL_OW 88
// wait ( 0 0$10 ) ;
6002: LD_INT 350
6004: PPUSH
6005: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6009: LD_EXP 1
6013: PPUSH
6014: CALL_OW 310
6018: PPUSH
6019: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6023: LD_EXP 3
6027: PPUSH
6028: LD_STRING D1b-Don-1
6030: PPUSH
6031: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6035: LD_EXP 1
6039: PPUSH
6040: LD_STRING D1b-JMM-1
6042: PPUSH
6043: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6047: LD_INT 22
6049: PUSH
6050: LD_INT 1
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 26
6059: PUSH
6060: LD_INT 1
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 2
6069: PUSH
6070: LD_INT 25
6072: PUSH
6073: LD_INT 1
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 25
6082: PUSH
6083: LD_INT 2
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: LD_INT 25
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 25
6102: PUSH
6103: LD_INT 4
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 25
6112: PUSH
6113: LD_INT 5
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 25
6122: PUSH
6123: LD_INT 8
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: PPUSH
6144: CALL_OW 69
6148: PPUSH
6149: LD_STRING D1b-Sol1-1
6151: PPUSH
6152: LD_STRING 
6154: PPUSH
6155: CALL 13229 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6159: LD_EXP 3
6163: PPUSH
6164: LD_STRING D1b-Don-2
6166: PPUSH
6167: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6171: LD_EXP 1
6175: PPUSH
6176: LD_STRING D1b-JMM-2
6178: PPUSH
6179: CALL_OW 88
// dec = ShowQuery1 ;
6183: LD_ADDR_VAR 0 4
6187: PUSH
6188: CALL 13765 0 0
6192: ST_TO_ADDR
// if dec = 1 then
6193: LD_VAR 0 4
6197: PUSH
6198: LD_INT 1
6200: EQUAL
6201: IFFALSE 6307
// begin Say ( JMM , D2-JMM-1 ) ;
6203: LD_EXP 1
6207: PPUSH
6208: LD_STRING D2-JMM-1
6210: PPUSH
6211: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6215: LD_EXP 22
6219: PPUSH
6220: LD_STRING D2-Pow-1
6222: PPUSH
6223: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6227: LD_EXP 1
6231: PPUSH
6232: LD_STRING D2a-JMM-1
6234: PPUSH
6235: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6239: LD_EXP 22
6243: PPUSH
6244: LD_STRING D2a-Pow-1
6246: PPUSH
6247: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6251: LD_EXP 1
6255: PPUSH
6256: LD_STRING D2a-JMM-2
6258: PPUSH
6259: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6263: LD_EXP 22
6267: PPUSH
6268: LD_STRING D2a-Pow-2
6270: PPUSH
6271: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D2a-JMM-3
6282: PPUSH
6283: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6287: LD_EXP 22
6291: PPUSH
6292: LD_STRING D2a-Pow-3
6294: PPUSH
6295: CALL_OW 94
// secondPass = 2 ;
6299: LD_ADDR_EXP 28
6303: PUSH
6304: LD_INT 2
6306: ST_TO_ADDR
// end ; if dec = 2 then
6307: LD_VAR 0 4
6311: PUSH
6312: LD_INT 2
6314: EQUAL
6315: IFFALSE 6409
// begin Say ( JMM , D2-JMM-1 ) ;
6317: LD_EXP 1
6321: PPUSH
6322: LD_STRING D2-JMM-1
6324: PPUSH
6325: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6329: LD_EXP 22
6333: PPUSH
6334: LD_STRING D2-Pow-1
6336: PPUSH
6337: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6341: LD_EXP 1
6345: PPUSH
6346: LD_STRING D2b-JMM-1
6348: PPUSH
6349: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6353: LD_EXP 22
6357: PPUSH
6358: LD_STRING D2b-Pow-1
6360: PPUSH
6361: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6365: LD_EXP 1
6369: PPUSH
6370: LD_STRING D2c-JMM-1
6372: PPUSH
6373: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6377: LD_EXP 22
6381: PPUSH
6382: LD_STRING D2c-Pow-1
6384: PPUSH
6385: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6389: LD_EXP 1
6393: PPUSH
6394: LD_STRING D2c-JMM-2
6396: PPUSH
6397: CALL_OW 88
// secondPass = 2 ;
6401: LD_ADDR_EXP 28
6405: PUSH
6406: LD_INT 2
6408: ST_TO_ADDR
// end ; if dec = 3 then
6409: LD_VAR 0 4
6413: PUSH
6414: LD_INT 3
6416: EQUAL
6417: IFFALSE 6427
// secondPass = 1 ;
6419: LD_ADDR_EXP 28
6423: PUSH
6424: LD_INT 1
6426: ST_TO_ADDR
// InGameOff ;
6427: CALL_OW 9
// ruAI = 1 ;
6431: LD_ADDR_EXP 42
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6439: LD_INT 1
6441: PPUSH
6442: LD_INT 3
6444: PPUSH
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: CALL_OW 80
// SaveForQuickRestart ;
6455: CALL_OW 22
// exit ;
6459: POP
6460: POP
6461: GO 6467
// end ; end ;
6463: GO 5816
6465: POP
6466: POP
// end ;
6467: PPOPN 4
6469: END
// every 1 1$0 trigger secondPass = 2 do
6470: LD_EXP 28
6474: PUSH
6475: LD_INT 2
6477: EQUAL
6478: IFFALSE 6605
6480: GO 6482
6482: DISABLE
// begin PowellSupport1 ;
6483: CALL 1771 0 0
// DialogueOn ;
6487: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6491: LD_EXP 1
6495: PPUSH
6496: LD_STRING DC1-JMM-1
6498: PPUSH
6499: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6503: LD_EXP 22
6507: PPUSH
6508: LD_STRING DC1-Pow-1
6510: PPUSH
6511: CALL_OW 94
// DialogueOff ;
6515: CALL_OW 7
// wait ( 3 3$0 ) ;
6519: LD_INT 6300
6521: PPUSH
6522: CALL_OW 67
// PowellSupport2 ;
6526: CALL 2230 0 0
// DialogueOn ;
6530: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6534: LD_EXP 1
6538: PPUSH
6539: LD_STRING DC2-JMM-1
6541: PPUSH
6542: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6546: LD_EXP 22
6550: PPUSH
6551: LD_STRING DC2-Pow-1
6553: PPUSH
6554: CALL_OW 94
// DialogueOff ;
6558: CALL_OW 7
// wait ( 6 6$0 ) ;
6562: LD_INT 12600
6564: PPUSH
6565: CALL_OW 67
// PowellSupport3 ;
6569: CALL 2707 0 0
// DialogueOn ;
6573: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6577: LD_EXP 22
6581: PPUSH
6582: LD_STRING DC3-Pow-1
6584: PPUSH
6585: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6589: LD_EXP 1
6593: PPUSH
6594: LD_STRING DC3-JMM-1
6596: PPUSH
6597: CALL_OW 88
// DialogueOff ;
6601: CALL_OW 7
// end ;
6605: END
// every 7 7$30 trigger secondPass = 2 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 do var i , dec1 , dec2 , tmp , tmp2 , crates , oil , siberite ;
6606: LD_EXP 28
6610: PUSH
6611: LD_INT 2
6613: EQUAL
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 2
6627: PUSH
6628: LD_INT 30
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 1
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL_OW 69
6661: PUSH
6662: LD_INT 0
6664: GREATER
6665: AND
6666: IFFALSE 10034
6668: GO 6670
6670: DISABLE
6671: LD_INT 0
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 22
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 21
6698: PUSH
6699: LD_INT 3
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 2
6708: PUSH
6709: LD_INT 30
6711: PUSH
6712: LD_INT 0
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 30
6721: PUSH
6722: LD_INT 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: PPUSH
6739: CALL_OW 69
6743: ST_TO_ADDR
// for i in tmp do
6744: LD_ADDR_VAR 0 1
6748: PUSH
6749: LD_VAR 0 4
6753: PUSH
6754: FOR_IN
6755: IFFALSE 6788
// crates = crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6757: LD_ADDR_VAR 0 6
6761: PUSH
6762: LD_VAR 0 6
6766: PUSH
6767: LD_VAR 0 1
6771: PPUSH
6772: CALL_OW 274
6776: PPUSH
6777: LD_INT 1
6779: PPUSH
6780: CALL_OW 275
6784: PLUS
6785: ST_TO_ADDR
6786: GO 6754
6788: POP
6789: POP
// for i in tmp do
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: LD_VAR 0 4
6799: PUSH
6800: FOR_IN
6801: IFFALSE 6834
// oil = oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6803: LD_ADDR_VAR 0 7
6807: PUSH
6808: LD_VAR 0 7
6812: PUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 274
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 275
6830: PLUS
6831: ST_TO_ADDR
6832: GO 6800
6834: POP
6835: POP
// for i in tmp do
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_VAR 0 4
6845: PUSH
6846: FOR_IN
6847: IFFALSE 6880
// siberite = siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6849: LD_ADDR_VAR 0 8
6853: PUSH
6854: LD_VAR 0 8
6858: PUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 274
6868: PPUSH
6869: LD_INT 3
6871: PPUSH
6872: CALL_OW 275
6876: PLUS
6877: ST_TO_ADDR
6878: GO 6846
6880: POP
6881: POP
// PrepareKurt ;
6882: CALL 4134 0 0
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
6886: LD_EXP 26
6890: PPUSH
6891: LD_INT 144
6893: PPUSH
6894: LD_INT 111
6896: PPUSH
6897: CALL_OW 111
// wait ( 0 0$2 ) ;
6901: LD_INT 70
6903: PPUSH
6904: CALL_OW 67
// ChangeSideFog ( 8 , 1 ) ;
6908: LD_INT 8
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 343
// if kurtStatus > 0 then
6918: LD_EXP 27
6922: PUSH
6923: LD_INT 0
6925: GREATER
6926: IFFALSE 8489
// begin ComExitVehicle ( Kurt ) ;
6928: LD_EXP 24
6932: PPUSH
6933: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
6937: LD_EXP 24
6941: PPUSH
6942: CALL_OW 87
// wait ( 0 0$1 ) ;
6946: LD_INT 35
6948: PPUSH
6949: CALL_OW 67
// DialogueOn ;
6953: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
6957: LD_INT 22
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 26
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 2
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 25
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 25
7002: PUSH
7003: LD_INT 3
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 25
7012: PUSH
7013: LD_INT 4
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 25
7022: PUSH
7023: LD_INT 5
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 25
7032: PUSH
7033: LD_INT 8
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PPUSH
7059: LD_STRING D3-Sol1-1
7061: PPUSH
7062: LD_STRING 
7064: PPUSH
7065: CALL 13229 0 3
// Say ( Kurt , D3-Kurt-1 ) ;
7069: LD_EXP 24
7073: PPUSH
7074: LD_STRING D3-Kurt-1
7076: PPUSH
7077: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7081: LD_EXP 1
7085: PPUSH
7086: LD_STRING D3-JMM-1
7088: PPUSH
7089: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7093: LD_EXP 24
7097: PPUSH
7098: LD_STRING D3-Kurt-2
7100: PPUSH
7101: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7105: LD_EXP 1
7109: PPUSH
7110: LD_STRING D3-JMM-2
7112: PPUSH
7113: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7117: LD_EXP 24
7121: PPUSH
7122: LD_STRING D3-Kurt-4
7124: PPUSH
7125: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7129: LD_EXP 1
7133: PPUSH
7134: LD_STRING D3-JMM-4
7136: PPUSH
7137: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7141: LD_EXP 24
7145: PPUSH
7146: LD_STRING D3-Kurt-5
7148: PPUSH
7149: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7153: LD_EXP 24
7157: PPUSH
7158: LD_STRING D3-Kurt-5a
7160: PPUSH
7161: CALL_OW 88
// if crates >= 60 and siberite >= 60 then
7165: LD_VAR 0 6
7169: PUSH
7170: LD_INT 60
7172: GREATEREQUAL
7173: PUSH
7174: LD_VAR 0 8
7178: PUSH
7179: LD_INT 60
7181: GREATEREQUAL
7182: AND
7183: IFFALSE 7218
// dec1 = SelectiveQuery ( Q2K , [ 1 , 2 , 3 , 4 ] ) else
7185: LD_ADDR_VAR 0 2
7189: PUSH
7190: LD_STRING Q2K
7192: PPUSH
7193: LD_INT 1
7195: PUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 4
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: PPUSH
7211: CALL_OW 98
7215: ST_TO_ADDR
7216: GO 7241
// dec1 = SelectiveQuery ( Q2K , [ 3 , 4 ] ) ;
7218: LD_ADDR_VAR 0 2
7222: PUSH
7223: LD_STRING Q2K
7225: PPUSH
7226: LD_INT 3
7228: PUSH
7229: LD_INT 4
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 98
7240: ST_TO_ADDR
// if dec1 = 1 then
7241: LD_VAR 0 2
7245: PUSH
7246: LD_INT 1
7248: EQUAL
7249: IFFALSE 7283
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7251: LD_EXP 1
7255: PPUSH
7256: LD_STRING D3Ka-JMM-1
7258: PPUSH
7259: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7263: LD_EXP 24
7267: PPUSH
7268: LD_STRING D3Ka-Kurt-1
7270: PPUSH
7271: CALL_OW 88
// warWithLegion = 1 ;
7275: LD_ADDR_EXP 31
7279: PUSH
7280: LD_INT 1
7282: ST_TO_ADDR
// end ; if dec1 = 2 then
7283: LD_VAR 0 2
7287: PUSH
7288: LD_INT 2
7290: EQUAL
7291: IFFALSE 7517
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7293: LD_EXP 1
7297: PPUSH
7298: LD_STRING D3Kb-JMM-1
7300: PPUSH
7301: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7305: LD_EXP 24
7309: PPUSH
7310: LD_STRING D3Kb-Kurt-1
7312: PPUSH
7313: CALL_OW 88
// for i in tmp do
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: LD_VAR 0 4
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7415
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7330: LD_ADDR_VAR 0 5
7334: PUSH
7335: LD_VAR 0 1
7339: PPUSH
7340: CALL_OW 274
7344: PPUSH
7345: LD_INT 1
7347: PPUSH
7348: CALL_OW 275
7352: ST_TO_ADDR
// if tmp2 >= 60 then
7353: LD_VAR 0 5
7357: PUSH
7358: LD_INT 60
7360: GREATEREQUAL
7361: IFFALSE 7393
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 60 ) ;
7363: LD_VAR 0 1
7367: PPUSH
7368: CALL_OW 274
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_VAR 0 5
7380: PUSH
7381: LD_INT 60
7383: MINUS
7384: PPUSH
7385: CALL_OW 277
// break ;
7389: GO 7415
// end else
7391: GO 7413
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 274
7402: PPUSH
7403: LD_INT 1
7405: PPUSH
7406: LD_INT 0
7408: PPUSH
7409: CALL_OW 277
// end ; end ;
7413: GO 7327
7415: POP
7416: POP
// for i in tmp do
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: LD_VAR 0 4
7426: PUSH
7427: FOR_IN
7428: IFFALSE 7515
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
7430: LD_ADDR_VAR 0 5
7434: PUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 274
7444: PPUSH
7445: LD_INT 3
7447: PPUSH
7448: CALL_OW 275
7452: ST_TO_ADDR
// if tmp2 >= 60 then
7453: LD_VAR 0 5
7457: PUSH
7458: LD_INT 60
7460: GREATEREQUAL
7461: IFFALSE 7493
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 60 ) ;
7463: LD_VAR 0 1
7467: PPUSH
7468: CALL_OW 274
7472: PPUSH
7473: LD_INT 3
7475: PPUSH
7476: LD_VAR 0 5
7480: PUSH
7481: LD_INT 60
7483: MINUS
7484: PPUSH
7485: CALL_OW 277
// break ;
7489: GO 7515
// end else
7491: GO 7513
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
7493: LD_VAR 0 1
7497: PPUSH
7498: CALL_OW 274
7502: PPUSH
7503: LD_INT 3
7505: PPUSH
7506: LD_INT 0
7508: PPUSH
7509: CALL_OW 277
// end ; end ;
7513: GO 7427
7515: POP
7516: POP
// end ; if dec1 = 3 then
7517: LD_VAR 0 2
7521: PUSH
7522: LD_INT 3
7524: EQUAL
7525: IFFALSE 7760
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7527: LD_EXP 1
7531: PPUSH
7532: LD_STRING D3Kc1-JMM-1
7534: PPUSH
7535: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7539: LD_EXP 24
7543: PPUSH
7544: LD_STRING D3Kc1-Kurt-1
7546: PPUSH
7547: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7551: LD_EXP 1
7555: PPUSH
7556: LD_STRING D3Kc1-JMM-2
7558: PPUSH
7559: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7563: LD_EXP 24
7567: PPUSH
7568: LD_STRING D3Kc1-Kurt-2
7570: PPUSH
7571: CALL_OW 88
// askSiberite = 1 ;
7575: LD_ADDR_EXP 33
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7583: LD_ADDR_VAR 0 2
7587: PUSH
7588: LD_STRING Q2b
7590: PPUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 3
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
// if dec2 = 1 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 7652
// begin Say ( JMM , D4a-JMM-1 ) ;
7620: LD_EXP 1
7624: PPUSH
7625: LD_STRING D4a-JMM-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7632: LD_EXP 24
7636: PPUSH
7637: LD_STRING D4b-Kurt-1
7639: PPUSH
7640: CALL_OW 88
// warWithLegion = 1 ;
7644: LD_ADDR_EXP 31
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// end ; if dec2 = 2 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 2
7659: EQUAL
7660: IFFALSE 7694
// begin Say ( JMM , D4b-JMM-1 ) ;
7662: LD_EXP 1
7666: PPUSH
7667: LD_STRING D4b-JMM-1
7669: PPUSH
7670: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7674: LD_EXP 24
7678: PPUSH
7679: LD_STRING D4b-Kurt-1
7681: PPUSH
7682: CALL_OW 88
// warWithLegion = 1 ;
7686: LD_ADDR_EXP 31
7690: PUSH
7691: LD_INT 1
7693: ST_TO_ADDR
// end ; if dec2 = 3 then
7694: LD_VAR 0 3
7698: PUSH
7699: LD_INT 3
7701: EQUAL
7702: IFFALSE 7760
// begin Say ( JMM , D4c-JMM-1 ) ;
7704: LD_EXP 1
7708: PPUSH
7709: LD_STRING D4c-JMM-1
7711: PPUSH
7712: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7716: LD_EXP 24
7720: PPUSH
7721: LD_STRING D4c-Kurt-1
7723: PPUSH
7724: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7728: LD_EXP 1
7732: PPUSH
7733: LD_STRING D4c-JMM-2
7735: PPUSH
7736: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7740: LD_EXP 24
7744: PPUSH
7745: LD_STRING D4c-Kurt-2
7747: PPUSH
7748: CALL_OW 88
// fakeInfo = 1 ;
7752: LD_ADDR_EXP 32
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7760: LD_VAR 0 2
7764: PUSH
7765: LD_INT 4
7767: EQUAL
7768: IFFALSE 8425
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D3Kd-JMM-1
7777: PPUSH
7778: CALL_OW 88
// if crates >= 120 and siberite >= 120 then
7782: LD_VAR 0 6
7786: PUSH
7787: LD_INT 120
7789: GREATEREQUAL
7790: PUSH
7791: LD_VAR 0 8
7795: PUSH
7796: LD_INT 120
7798: GREATEREQUAL
7799: AND
7800: IFFALSE 7835
// dec2 = SelectiveQuery ( Q2aK , [ 1 , 2 , 3 , 4 ] ) else
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_STRING Q2aK
7809: PPUSH
7810: LD_INT 1
7812: PUSH
7813: LD_INT 2
7815: PUSH
7816: LD_INT 3
7818: PUSH
7819: LD_INT 4
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 98
7832: ST_TO_ADDR
7833: GO 7858
// dec2 = SelectiveQuery ( Q2K , [ 1 , 4 ] ) ;
7835: LD_ADDR_VAR 0 3
7839: PUSH
7840: LD_STRING Q2K
7842: PPUSH
7843: LD_INT 1
7845: PUSH
7846: LD_INT 4
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PPUSH
7853: CALL_OW 98
7857: ST_TO_ADDR
// if dec2 = 1 then
7858: LD_VAR 0 3
7862: PUSH
7863: LD_INT 1
7865: EQUAL
7866: IFFALSE 7900
// begin Say ( JMM , D5Ka-JMM-1 ) ;
7868: LD_EXP 1
7872: PPUSH
7873: LD_STRING D5Ka-JMM-1
7875: PPUSH
7876: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
7880: LD_EXP 24
7884: PPUSH
7885: LD_STRING D5Ka-Kurt-1
7887: PPUSH
7888: CALL_OW 88
// warWithLegion = 1 ;
7892: LD_ADDR_EXP 31
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// end ; if dec2 = 2 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 2
7907: EQUAL
7908: IFFALSE 7934
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7910: LD_EXP 1
7914: PPUSH
7915: LD_STRING D3Kb-JMM-1
7917: PPUSH
7918: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7922: LD_EXP 24
7926: PPUSH
7927: LD_STRING D3Kb-Kurt-1
7929: PPUSH
7930: CALL_OW 88
// end ; if dec2 = 3 then
7934: LD_VAR 0 3
7938: PUSH
7939: LD_INT 3
7941: EQUAL
7942: IFFALSE 8172
// begin Say ( JMM , D3Ke-JMM-1 ) ;
7944: LD_EXP 1
7948: PPUSH
7949: LD_STRING D3Ke-JMM-1
7951: PPUSH
7952: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
7956: LD_EXP 24
7960: PPUSH
7961: LD_STRING D3Ke-Kurt-1
7963: PPUSH
7964: CALL_OW 88
// PrepareLegionForPlayer ;
7968: CALL 4322 0 0
// for i in tmp do
7972: LD_ADDR_VAR 0 1
7976: PUSH
7977: LD_VAR 0 4
7981: PUSH
7982: FOR_IN
7983: IFFALSE 8070
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
7985: LD_ADDR_VAR 0 5
7989: PUSH
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 274
7999: PPUSH
8000: LD_INT 1
8002: PPUSH
8003: CALL_OW 275
8007: ST_TO_ADDR
// if tmp2 >= 120 then
8008: LD_VAR 0 5
8012: PUSH
8013: LD_INT 120
8015: GREATEREQUAL
8016: IFFALSE 8048
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 120 ) ;
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 274
8027: PPUSH
8028: LD_INT 1
8030: PPUSH
8031: LD_VAR 0 5
8035: PUSH
8036: LD_INT 120
8038: MINUS
8039: PPUSH
8040: CALL_OW 277
// break ;
8044: GO 8070
// end else
8046: GO 8068
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 274
8057: PPUSH
8058: LD_INT 1
8060: PPUSH
8061: LD_INT 0
8063: PPUSH
8064: CALL_OW 277
// end ; end ;
8068: GO 7982
8070: POP
8071: POP
// for i in tmp do
8072: LD_ADDR_VAR 0 1
8076: PUSH
8077: LD_VAR 0 4
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8170
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8085: LD_ADDR_VAR 0 5
8089: PUSH
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 274
8099: PPUSH
8100: LD_INT 3
8102: PPUSH
8103: CALL_OW 275
8107: ST_TO_ADDR
// if tmp2 >= 120 then
8108: LD_VAR 0 5
8112: PUSH
8113: LD_INT 120
8115: GREATEREQUAL
8116: IFFALSE 8148
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 120 ) ;
8118: LD_VAR 0 1
8122: PPUSH
8123: CALL_OW 274
8127: PPUSH
8128: LD_INT 3
8130: PPUSH
8131: LD_VAR 0 5
8135: PUSH
8136: LD_INT 120
8138: MINUS
8139: PPUSH
8140: CALL_OW 277
// break ;
8144: GO 8170
// end else
8146: GO 8168
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
8148: LD_VAR 0 1
8152: PPUSH
8153: CALL_OW 274
8157: PPUSH
8158: LD_INT 3
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: CALL_OW 277
// end ; end ;
8168: GO 8082
8170: POP
8171: POP
// end ; if dec2 = 4 then
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 4
8179: EQUAL
8180: IFFALSE 8425
// begin if dec1 = 3 then
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8425
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8192: LD_EXP 1
8196: PPUSH
8197: LD_STRING D3Kc1-JMM-1
8199: PPUSH
8200: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8204: LD_EXP 24
8208: PPUSH
8209: LD_STRING D3Kc1-Kurt-1
8211: PPUSH
8212: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D3Kc1-JMM-2
8223: PPUSH
8224: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8228: LD_EXP 24
8232: PPUSH
8233: LD_STRING D3Kc1-Kurt-2
8235: PPUSH
8236: CALL_OW 88
// askSiberite = 1 ;
8240: LD_ADDR_EXP 33
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8248: LD_ADDR_VAR 0 2
8252: PUSH
8253: LD_STRING Q2b
8255: PPUSH
8256: LD_INT 1
8258: PUSH
8259: LD_INT 2
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 98
8274: ST_TO_ADDR
// if dec2 = 1 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 1
8282: EQUAL
8283: IFFALSE 8317
// begin Say ( JMM , D4a-JMM-1 ) ;
8285: LD_EXP 1
8289: PPUSH
8290: LD_STRING D4a-JMM-1
8292: PPUSH
8293: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8297: LD_EXP 24
8301: PPUSH
8302: LD_STRING D4b-Kurt-1
8304: PPUSH
8305: CALL_OW 88
// warWithLegion = 1 ;
8309: LD_ADDR_EXP 31
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// end ; if dec2 = 2 then
8317: LD_VAR 0 3
8321: PUSH
8322: LD_INT 2
8324: EQUAL
8325: IFFALSE 8359
// begin Say ( JMM , D4b-JMM-1 ) ;
8327: LD_EXP 1
8331: PPUSH
8332: LD_STRING D4b-JMM-1
8334: PPUSH
8335: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8339: LD_EXP 24
8343: PPUSH
8344: LD_STRING D4b-Kurt-1
8346: PPUSH
8347: CALL_OW 88
// warWithLegion = 1 ;
8351: LD_ADDR_EXP 31
8355: PUSH
8356: LD_INT 1
8358: ST_TO_ADDR
// end ; if dec2 = 3 then
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 3
8366: EQUAL
8367: IFFALSE 8425
// begin Say ( JMM , D4c-JMM-1 ) ;
8369: LD_EXP 1
8373: PPUSH
8374: LD_STRING D4c-JMM-1
8376: PPUSH
8377: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_STRING D4c-Kurt-1
8388: PPUSH
8389: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8393: LD_EXP 1
8397: PPUSH
8398: LD_STRING D4c-JMM-2
8400: PPUSH
8401: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8405: LD_EXP 24
8409: PPUSH
8410: LD_STRING D4c-Kurt-2
8412: PPUSH
8413: CALL_OW 88
// fakeInfo = 1 ;
8417: LD_ADDR_EXP 32
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
8425: CALL_OW 7
// ComEnterUnit ( Kurt , KurtVeh ) ;
8429: LD_EXP 24
8433: PPUSH
8434: LD_EXP 26
8438: PPUSH
8439: CALL_OW 120
// wait ( 0 0$1 ) ;
8443: LD_INT 35
8445: PPUSH
8446: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
8450: LD_EXP 26
8454: PPUSH
8455: LD_INT 4
8457: PPUSH
8458: CALL_OW 113
// wait ( 0 0$3 ) ;
8462: LD_INT 105
8464: PPUSH
8465: CALL_OW 67
// RemoveUnit ( Kurt ) ;
8469: LD_EXP 24
8473: PPUSH
8474: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
8478: LD_EXP 26
8482: PPUSH
8483: CALL_OW 64
// end else
8487: GO 10034
// begin ComExitVehicle ( otherKurt ) ;
8489: LD_EXP 25
8493: PPUSH
8494: CALL_OW 121
// CenterNowOnUnits ( otherKurt ) ;
8498: LD_EXP 25
8502: PPUSH
8503: CALL_OW 87
// wait ( 0 0$1 ) ;
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 67
// DialogueOn ;
8514: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
8518: LD_INT 22
8520: PUSH
8521: LD_INT 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 26
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 25
8543: PUSH
8544: LD_INT 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 25
8553: PUSH
8554: LD_INT 2
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 25
8563: PUSH
8564: LD_INT 3
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 25
8573: PUSH
8574: LD_INT 4
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: LD_INT 25
8583: PUSH
8584: LD_INT 5
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 25
8593: PUSH
8594: LD_INT 8
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: PPUSH
8620: LD_STRING D3-Sol1-1
8622: PPUSH
8623: LD_STRING 
8625: PPUSH
8626: CALL 13229 0 3
// Say ( otherKurt , D3-Kurt-1 ) ;
8630: LD_EXP 25
8634: PPUSH
8635: LD_STRING D3-Kurt-1
8637: PPUSH
8638: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
8642: LD_EXP 1
8646: PPUSH
8647: LD_STRING D3-JMM-1
8649: PPUSH
8650: CALL_OW 88
// Say ( otherKurt , D3-Kurt-3 ) ;
8654: LD_EXP 25
8658: PPUSH
8659: LD_STRING D3-Kurt-3
8661: PPUSH
8662: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
8666: LD_EXP 1
8670: PPUSH
8671: LD_STRING D3-JMM-3
8673: PPUSH
8674: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5 ) ;
8678: LD_EXP 25
8682: PPUSH
8683: LD_STRING D3-Kurt-5
8685: PPUSH
8686: CALL_OW 88
// Say ( otherKurt , D3-Kurt-5b ) ;
8690: LD_EXP 25
8694: PPUSH
8695: LD_STRING D3-Kurt-5b
8697: PPUSH
8698: CALL_OW 88
// if crates >= 100 and siberite >= 100 then
8702: LD_VAR 0 6
8706: PUSH
8707: LD_INT 100
8709: GREATEREQUAL
8710: PUSH
8711: LD_VAR 0 8
8715: PUSH
8716: LD_INT 100
8718: GREATEREQUAL
8719: AND
8720: IFFALSE 8755
// dec1 = SelectiveQuery ( Q2 , [ 1 , 2 , 3 , 4 ] ) else
8722: LD_ADDR_VAR 0 2
8726: PUSH
8727: LD_STRING Q2
8729: PPUSH
8730: LD_INT 1
8732: PUSH
8733: LD_INT 2
8735: PUSH
8736: LD_INT 3
8738: PUSH
8739: LD_INT 4
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 98
8752: ST_TO_ADDR
8753: GO 8778
// dec1 = SelectiveQuery ( Q2 , [ 3 , 4 ] ) ;
8755: LD_ADDR_VAR 0 2
8759: PUSH
8760: LD_STRING Q2
8762: PPUSH
8763: LD_INT 3
8765: PUSH
8766: LD_INT 4
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PPUSH
8773: CALL_OW 98
8777: ST_TO_ADDR
// if dec1 = 1 then
8778: LD_VAR 0 2
8782: PUSH
8783: LD_INT 1
8785: EQUAL
8786: IFFALSE 8820
// begin Say ( JMM , D3Ka-JMM-1 ) ;
8788: LD_EXP 1
8792: PPUSH
8793: LD_STRING D3Ka-JMM-1
8795: PPUSH
8796: CALL_OW 88
// Say ( otherKurt , D3Ka-Kurt-1 ) ;
8800: LD_EXP 25
8804: PPUSH
8805: LD_STRING D3Ka-Kurt-1
8807: PPUSH
8808: CALL_OW 88
// warWithLegion = 1 ;
8812: LD_ADDR_EXP 31
8816: PUSH
8817: LD_INT 1
8819: ST_TO_ADDR
// end ; if dec1 = 2 then
8820: LD_VAR 0 2
8824: PUSH
8825: LD_INT 2
8827: EQUAL
8828: IFFALSE 9054
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8830: LD_EXP 1
8834: PPUSH
8835: LD_STRING D3Kb-JMM-1
8837: PPUSH
8838: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
8842: LD_EXP 25
8846: PPUSH
8847: LD_STRING D3Kb-Kurt-1
8849: PPUSH
8850: CALL_OW 88
// for i in tmp do
8854: LD_ADDR_VAR 0 1
8858: PUSH
8859: LD_VAR 0 4
8863: PUSH
8864: FOR_IN
8865: IFFALSE 8952
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
8867: LD_ADDR_VAR 0 5
8871: PUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 274
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 275
8889: ST_TO_ADDR
// if tmp2 >= 100 then
8890: LD_VAR 0 5
8894: PUSH
8895: LD_INT 100
8897: GREATEREQUAL
8898: IFFALSE 8930
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 100 ) ;
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 274
8909: PPUSH
8910: LD_INT 1
8912: PPUSH
8913: LD_VAR 0 5
8917: PUSH
8918: LD_INT 100
8920: MINUS
8921: PPUSH
8922: CALL_OW 277
// break ;
8926: GO 8952
// end else
8928: GO 8950
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
8930: LD_VAR 0 1
8934: PPUSH
8935: CALL_OW 274
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_INT 0
8945: PPUSH
8946: CALL_OW 277
// end ; end ;
8950: GO 8864
8952: POP
8953: POP
// for i in tmp do
8954: LD_ADDR_VAR 0 1
8958: PUSH
8959: LD_VAR 0 4
8963: PUSH
8964: FOR_IN
8965: IFFALSE 9052
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
8967: LD_ADDR_VAR 0 5
8971: PUSH
8972: LD_VAR 0 1
8976: PPUSH
8977: CALL_OW 274
8981: PPUSH
8982: LD_INT 3
8984: PPUSH
8985: CALL_OW 275
8989: ST_TO_ADDR
// if tmp2 >= 100 then
8990: LD_VAR 0 5
8994: PUSH
8995: LD_INT 100
8997: GREATEREQUAL
8998: IFFALSE 9030
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 100 ) ;
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 274
9009: PPUSH
9010: LD_INT 3
9012: PPUSH
9013: LD_VAR 0 5
9017: PUSH
9018: LD_INT 100
9020: MINUS
9021: PPUSH
9022: CALL_OW 277
// break ;
9026: GO 9052
// end else
9028: GO 9050
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 274
9039: PPUSH
9040: LD_INT 3
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 277
// end ; end ;
9050: GO 8964
9052: POP
9053: POP
// end ; if dec1 = 3 then
9054: LD_VAR 0 2
9058: PUSH
9059: LD_INT 3
9061: EQUAL
9062: IFFALSE 9297
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9064: LD_EXP 1
9068: PPUSH
9069: LD_STRING D3Kc1-JMM-1
9071: PPUSH
9072: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9076: LD_EXP 25
9080: PPUSH
9081: LD_STRING D3Kc1-Kurt-1
9083: PPUSH
9084: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9088: LD_EXP 1
9092: PPUSH
9093: LD_STRING D3Kc1-JMM-2
9095: PPUSH
9096: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9100: LD_EXP 25
9104: PPUSH
9105: LD_STRING D3Kc1-Kurt-2
9107: PPUSH
9108: CALL_OW 88
// askSiberite = 1 ;
9112: LD_ADDR_EXP 33
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9120: LD_ADDR_VAR 0 2
9124: PUSH
9125: LD_STRING Q2b
9127: PPUSH
9128: LD_INT 1
9130: PUSH
9131: LD_INT 2
9133: PUSH
9134: LD_INT 3
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 98
9146: ST_TO_ADDR
// if dec2 = 1 then
9147: LD_VAR 0 3
9151: PUSH
9152: LD_INT 1
9154: EQUAL
9155: IFFALSE 9189
// begin Say ( JMM , D4a-JMM-1 ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_STRING D4a-JMM-1
9164: PPUSH
9165: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9169: LD_EXP 25
9173: PPUSH
9174: LD_STRING D4b-Kurt-1
9176: PPUSH
9177: CALL_OW 88
// warWithLegion = 1 ;
9181: LD_ADDR_EXP 31
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// end ; if dec2 = 2 then
9189: LD_VAR 0 3
9193: PUSH
9194: LD_INT 2
9196: EQUAL
9197: IFFALSE 9231
// begin Say ( JMM , D4b-JMM-1 ) ;
9199: LD_EXP 1
9203: PPUSH
9204: LD_STRING D4b-JMM-1
9206: PPUSH
9207: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9211: LD_EXP 25
9215: PPUSH
9216: LD_STRING D4b-Kurt-1
9218: PPUSH
9219: CALL_OW 88
// warWithLegion = 1 ;
9223: LD_ADDR_EXP 31
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// end ; if dec2 = 3 then
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 3
9238: EQUAL
9239: IFFALSE 9297
// begin Say ( JMM , D4c-JMM-1 ) ;
9241: LD_EXP 1
9245: PPUSH
9246: LD_STRING D4c-JMM-1
9248: PPUSH
9249: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9253: LD_EXP 25
9257: PPUSH
9258: LD_STRING D4c-Kurt-1
9260: PPUSH
9261: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9265: LD_EXP 1
9269: PPUSH
9270: LD_STRING D4c-JMM-2
9272: PPUSH
9273: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9277: LD_EXP 25
9281: PPUSH
9282: LD_STRING D4c-Kurt-2
9284: PPUSH
9285: CALL_OW 88
// fakeInfo = 1 ;
9289: LD_ADDR_EXP 32
9293: PUSH
9294: LD_INT 1
9296: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
9297: LD_VAR 0 2
9301: PUSH
9302: LD_INT 4
9304: EQUAL
9305: IFFALSE 9962
// begin Say ( JMM , D3Kd-JMM-1 ) ;
9307: LD_EXP 1
9311: PPUSH
9312: LD_STRING D3Kd-JMM-1
9314: PPUSH
9315: CALL_OW 88
// if crates >= 200 and siberite >= 200 then
9319: LD_VAR 0 6
9323: PUSH
9324: LD_INT 200
9326: GREATEREQUAL
9327: PUSH
9328: LD_VAR 0 8
9332: PUSH
9333: LD_INT 200
9335: GREATEREQUAL
9336: AND
9337: IFFALSE 9372
// dec2 = SelectiveQuery ( Q2a , [ 1 , 2 , 3 , 4 ] ) else
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: LD_STRING Q2a
9346: PPUSH
9347: LD_INT 1
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: LD_INT 3
9355: PUSH
9356: LD_INT 4
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PPUSH
9365: CALL_OW 98
9369: ST_TO_ADDR
9370: GO 9395
// dec2 = SelectiveQuery ( Q2a , [ 1 , 4 ] ) ;
9372: LD_ADDR_VAR 0 3
9376: PUSH
9377: LD_STRING Q2a
9379: PPUSH
9380: LD_INT 1
9382: PUSH
9383: LD_INT 4
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 98
9394: ST_TO_ADDR
// if dec2 = 1 then
9395: LD_VAR 0 3
9399: PUSH
9400: LD_INT 1
9402: EQUAL
9403: IFFALSE 9437
// begin Say ( JMM , D5Ka-JMM-1 ) ;
9405: LD_EXP 1
9409: PPUSH
9410: LD_STRING D5Ka-JMM-1
9412: PPUSH
9413: CALL_OW 88
// Say ( otherKurt , D5Ka-Kurt-1 ) ;
9417: LD_EXP 25
9421: PPUSH
9422: LD_STRING D5Ka-Kurt-1
9424: PPUSH
9425: CALL_OW 88
// warWithLegion = 1 ;
9429: LD_ADDR_EXP 31
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// end ; if dec2 = 2 then
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 2
9444: EQUAL
9445: IFFALSE 9471
// begin Say ( JMM , D3Kb-JMM-1 ) ;
9447: LD_EXP 1
9451: PPUSH
9452: LD_STRING D3Kb-JMM-1
9454: PPUSH
9455: CALL_OW 88
// Say ( otherKurt , D3Kb-Kurt-1 ) ;
9459: LD_EXP 25
9463: PPUSH
9464: LD_STRING D3Kb-Kurt-1
9466: PPUSH
9467: CALL_OW 88
// end ; if dec2 = 3 then
9471: LD_VAR 0 3
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9709
// begin Say ( JMM , D3Ke-JMM-1 ) ;
9481: LD_EXP 1
9485: PPUSH
9486: LD_STRING D3Ke-JMM-1
9488: PPUSH
9489: CALL_OW 88
// Say ( otherKurt , D3Ke-Kurt-1 ) ;
9493: LD_EXP 25
9497: PPUSH
9498: LD_STRING D3Ke-Kurt-1
9500: PPUSH
9501: CALL_OW 88
// PrepareLegionForPlayer ;
9505: CALL 4322 0 0
// for i in tmp do
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_VAR 0 4
9518: PUSH
9519: FOR_IN
9520: IFFALSE 9607
// begin tmp2 = GetResourceType ( GetBase ( i ) , 1 ) ;
9522: LD_ADDR_VAR 0 5
9526: PUSH
9527: LD_VAR 0 1
9531: PPUSH
9532: CALL_OW 274
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 275
9544: ST_TO_ADDR
// if tmp2 >= 200 then
9545: LD_VAR 0 5
9549: PUSH
9550: LD_INT 200
9552: GREATEREQUAL
9553: IFFALSE 9585
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - 200 ) ;
9555: LD_VAR 0 1
9559: PPUSH
9560: CALL_OW 274
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: LD_VAR 0 5
9572: PUSH
9573: LD_INT 200
9575: MINUS
9576: PPUSH
9577: CALL_OW 277
// break ;
9581: GO 9607
// end else
9583: GO 9605
// begin SetResourceType ( GetBase ( i ) , 1 , 0 ) ;
9585: LD_VAR 0 1
9589: PPUSH
9590: CALL_OW 274
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: LD_INT 0
9600: PPUSH
9601: CALL_OW 277
// end ; end ;
9605: GO 9519
9607: POP
9608: POP
// for i in tmp do
9609: LD_ADDR_VAR 0 1
9613: PUSH
9614: LD_VAR 0 4
9618: PUSH
9619: FOR_IN
9620: IFFALSE 9707
// begin tmp2 = GetResourceType ( GetBase ( i ) , 3 ) ;
9622: LD_ADDR_VAR 0 5
9626: PUSH
9627: LD_VAR 0 1
9631: PPUSH
9632: CALL_OW 274
9636: PPUSH
9637: LD_INT 3
9639: PPUSH
9640: CALL_OW 275
9644: ST_TO_ADDR
// if tmp2 >= 200 then
9645: LD_VAR 0 5
9649: PUSH
9650: LD_INT 200
9652: GREATEREQUAL
9653: IFFALSE 9685
// begin SetResourceType ( GetBase ( i ) , 3 , tmp2 - 200 ) ;
9655: LD_VAR 0 1
9659: PPUSH
9660: CALL_OW 274
9664: PPUSH
9665: LD_INT 3
9667: PPUSH
9668: LD_VAR 0 5
9672: PUSH
9673: LD_INT 200
9675: MINUS
9676: PPUSH
9677: CALL_OW 277
// break ;
9681: GO 9707
// end else
9683: GO 9705
// begin SetResourceType ( GetBase ( i ) , 3 , 0 ) ;
9685: LD_VAR 0 1
9689: PPUSH
9690: CALL_OW 274
9694: PPUSH
9695: LD_INT 3
9697: PPUSH
9698: LD_INT 0
9700: PPUSH
9701: CALL_OW 277
// end ; end ;
9705: GO 9619
9707: POP
9708: POP
// end ; if dec2 = 4 then
9709: LD_VAR 0 3
9713: PUSH
9714: LD_INT 4
9716: EQUAL
9717: IFFALSE 9962
// begin if dec1 = 3 then
9719: LD_VAR 0 2
9723: PUSH
9724: LD_INT 3
9726: EQUAL
9727: IFFALSE 9962
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
9729: LD_EXP 1
9733: PPUSH
9734: LD_STRING D3Kc1-JMM-1
9736: PPUSH
9737: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-1 ) ;
9741: LD_EXP 25
9745: PPUSH
9746: LD_STRING D3Kc1-Kurt-1
9748: PPUSH
9749: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
9753: LD_EXP 1
9757: PPUSH
9758: LD_STRING D3Kc1-JMM-2
9760: PPUSH
9761: CALL_OW 88
// Say ( otherKurt , D3Kc1-Kurt-2 ) ;
9765: LD_EXP 25
9769: PPUSH
9770: LD_STRING D3Kc1-Kurt-2
9772: PPUSH
9773: CALL_OW 88
// askSiberite = 1 ;
9777: LD_ADDR_EXP 33
9781: PUSH
9782: LD_INT 1
9784: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
9785: LD_ADDR_VAR 0 2
9789: PUSH
9790: LD_STRING Q2b
9792: PPUSH
9793: LD_INT 1
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 98
9811: ST_TO_ADDR
// if dec2 = 1 then
9812: LD_VAR 0 3
9816: PUSH
9817: LD_INT 1
9819: EQUAL
9820: IFFALSE 9854
// begin Say ( JMM , D4a-JMM-1 ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_STRING D4a-JMM-1
9829: PPUSH
9830: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9834: LD_EXP 25
9838: PPUSH
9839: LD_STRING D4b-Kurt-1
9841: PPUSH
9842: CALL_OW 88
// warWithLegion = 1 ;
9846: LD_ADDR_EXP 31
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// end ; if dec2 = 2 then
9854: LD_VAR 0 3
9858: PUSH
9859: LD_INT 2
9861: EQUAL
9862: IFFALSE 9896
// begin Say ( JMM , D4b-JMM-1 ) ;
9864: LD_EXP 1
9868: PPUSH
9869: LD_STRING D4b-JMM-1
9871: PPUSH
9872: CALL_OW 88
// Say ( otherKurt , D4b-Kurt-1 ) ;
9876: LD_EXP 25
9880: PPUSH
9881: LD_STRING D4b-Kurt-1
9883: PPUSH
9884: CALL_OW 88
// warWithLegion = 1 ;
9888: LD_ADDR_EXP 31
9892: PUSH
9893: LD_INT 1
9895: ST_TO_ADDR
// end ; if dec2 = 3 then
9896: LD_VAR 0 3
9900: PUSH
9901: LD_INT 3
9903: EQUAL
9904: IFFALSE 9962
// begin Say ( JMM , D4c-JMM-1 ) ;
9906: LD_EXP 1
9910: PPUSH
9911: LD_STRING D4c-JMM-1
9913: PPUSH
9914: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-1 ) ;
9918: LD_EXP 25
9922: PPUSH
9923: LD_STRING D4c-Kurt-1
9925: PPUSH
9926: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9930: LD_EXP 1
9934: PPUSH
9935: LD_STRING D4c-JMM-2
9937: PPUSH
9938: CALL_OW 88
// Say ( otherKurt , D4c-Kurt-2 ) ;
9942: LD_EXP 25
9946: PPUSH
9947: LD_STRING D4c-Kurt-2
9949: PPUSH
9950: CALL_OW 88
// fakeInfo = 1 ;
9954: LD_ADDR_EXP 32
9958: PUSH
9959: LD_INT 1
9961: ST_TO_ADDR
// end ; end ; end ; end ; DialogueOff ;
9962: CALL_OW 7
// ChangeSideFog ( 8 , 8 ) ;
9966: LD_INT 8
9968: PPUSH
9969: LD_INT 8
9971: PPUSH
9972: CALL_OW 343
// ComEnterUnit ( otherKurt , KurtVeh ) ;
9976: LD_EXP 25
9980: PPUSH
9981: LD_EXP 26
9985: PPUSH
9986: CALL_OW 120
// wait ( 0 0$1 ) ;
9990: LD_INT 35
9992: PPUSH
9993: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9997: LD_EXP 26
10001: PPUSH
10002: LD_INT 4
10004: PPUSH
10005: CALL_OW 113
// wait ( 0 0$6 ) ;
10009: LD_INT 210
10011: PPUSH
10012: CALL_OW 67
// RemoveUnit ( otherKurt ) ;
10016: LD_EXP 25
10020: PPUSH
10021: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
10025: LD_EXP 26
10029: PPUSH
10030: CALL_OW 64
// end ; end ;
10034: PPOPN 8
10036: END
// every 0 0$10 trigger warWithLegion = 1 do
10037: LD_EXP 31
10041: PUSH
10042: LD_INT 1
10044: EQUAL
10045: IFFALSE 10054
10047: GO 10049
10049: DISABLE
// PrepareAttackLegion ;
10050: CALL 5050 0 0
10054: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
10055: LD_EXP 15
10059: PPUSH
10060: CALL_OW 305
10064: PUSH
10065: LD_EXP 15
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: CALL_OW 289
10077: NOT
10078: AND
10079: PUSH
10080: LD_EXP 15
10084: PPUSH
10085: LD_INT 2
10087: PPUSH
10088: CALL_OW 289
10092: NOT
10093: AND
10094: PUSH
10095: LD_EXP 15
10099: PPUSH
10100: LD_INT 3
10102: PPUSH
10103: CALL_OW 289
10107: NOT
10108: AND
10109: IFFALSE 10126
10111: GO 10113
10113: DISABLE
// SetSide ( amCargo1 , 4 ) ;
10114: LD_EXP 15
10118: PPUSH
10119: LD_INT 4
10121: PPUSH
10122: CALL_OW 235
10126: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
10127: LD_EXP 16
10131: PPUSH
10132: CALL_OW 305
10136: PUSH
10137: LD_EXP 16
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 289
10149: NOT
10150: AND
10151: PUSH
10152: LD_EXP 16
10156: PPUSH
10157: LD_INT 2
10159: PPUSH
10160: CALL_OW 289
10164: NOT
10165: AND
10166: PUSH
10167: LD_EXP 16
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: CALL_OW 289
10179: NOT
10180: AND
10181: IFFALSE 10198
10183: GO 10185
10185: DISABLE
// SetSide ( amCargo2 , 4 ) ;
10186: LD_EXP 16
10190: PPUSH
10191: LD_INT 4
10193: PPUSH
10194: CALL_OW 235
10198: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
10199: LD_EXP 17
10203: PPUSH
10204: CALL_OW 305
10208: PUSH
10209: LD_EXP 17
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 289
10221: NOT
10222: AND
10223: PUSH
10224: LD_EXP 17
10228: PPUSH
10229: LD_INT 2
10231: PPUSH
10232: CALL_OW 289
10236: NOT
10237: AND
10238: PUSH
10239: LD_EXP 17
10243: PPUSH
10244: LD_INT 3
10246: PPUSH
10247: CALL_OW 289
10251: NOT
10252: AND
10253: IFFALSE 10270
10255: GO 10257
10257: DISABLE
// SetSide ( amCargo3 , 4 ) ;
10258: LD_EXP 17
10262: PPUSH
10263: LD_INT 4
10265: PPUSH
10266: CALL_OW 235
10270: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
10271: LD_EXP 18
10275: PPUSH
10276: CALL_OW 305
10280: PUSH
10281: LD_EXP 18
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 289
10293: NOT
10294: AND
10295: PUSH
10296: LD_EXP 18
10300: PPUSH
10301: LD_INT 2
10303: PPUSH
10304: CALL_OW 289
10308: NOT
10309: AND
10310: PUSH
10311: LD_EXP 18
10315: PPUSH
10316: LD_INT 3
10318: PPUSH
10319: CALL_OW 289
10323: NOT
10324: AND
10325: IFFALSE 10342
10327: GO 10329
10329: DISABLE
// SetSide ( amCargo4 , 4 ) ;
10330: LD_EXP 18
10334: PPUSH
10335: LD_INT 4
10337: PPUSH
10338: CALL_OW 235
10342: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
10343: LD_EXP 19
10347: PPUSH
10348: CALL_OW 305
10352: PUSH
10353: LD_EXP 19
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 289
10365: NOT
10366: AND
10367: PUSH
10368: LD_EXP 19
10372: PPUSH
10373: LD_INT 2
10375: PPUSH
10376: CALL_OW 289
10380: NOT
10381: AND
10382: PUSH
10383: LD_EXP 19
10387: PPUSH
10388: LD_INT 3
10390: PPUSH
10391: CALL_OW 289
10395: NOT
10396: AND
10397: PUSH
10398: LD_EXP 19
10402: PPUSH
10403: LD_INT 2
10405: PPUSH
10406: CALL_OW 289
10410: NOT
10411: AND
10412: IFFALSE 10429
10414: GO 10416
10416: DISABLE
// SetSide ( amCargo5 , 4 ) ;
10417: LD_EXP 19
10421: PPUSH
10422: LD_INT 4
10424: PPUSH
10425: CALL_OW 235
10429: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
10430: LD_EXP 20
10434: PPUSH
10435: CALL_OW 305
10439: PUSH
10440: LD_EXP 20
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 289
10452: NOT
10453: AND
10454: PUSH
10455: LD_EXP 20
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: CALL_OW 289
10467: NOT
10468: AND
10469: PUSH
10470: LD_EXP 20
10474: PPUSH
10475: LD_INT 3
10477: PPUSH
10478: CALL_OW 289
10482: NOT
10483: AND
10484: IFFALSE 10501
10486: GO 10488
10488: DISABLE
// SetSide ( amCargo6 , 4 ) ;
10489: LD_EXP 20
10493: PPUSH
10494: LD_INT 4
10496: PPUSH
10497: CALL_OW 235
10501: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
10502: LD_EXP 21
10506: PPUSH
10507: CALL_OW 305
10511: PUSH
10512: LD_EXP 21
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 289
10524: NOT
10525: AND
10526: PUSH
10527: LD_EXP 21
10531: PPUSH
10532: LD_INT 2
10534: PPUSH
10535: CALL_OW 289
10539: NOT
10540: AND
10541: PUSH
10542: LD_EXP 21
10546: PPUSH
10547: LD_INT 3
10549: PPUSH
10550: CALL_OW 289
10554: NOT
10555: AND
10556: IFFALSE 10573
10558: GO 10560
10560: DISABLE
// SetSide ( amCargo7 , 4 ) ;
10561: LD_EXP 21
10565: PPUSH
10566: LD_INT 4
10568: PPUSH
10569: CALL_OW 235
10573: END
// every 0 0$1 do var i ;
10574: GO 10576
10576: DISABLE
10577: LD_INT 0
10579: PPUSH
// begin enable ;
10580: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10581: LD_ADDR_VAR 0 1
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_INT 4
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PPUSH
10596: CALL_OW 69
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10641
// begin ComMoveToArea ( i , PlayerSpawn ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 4
10611: PPUSH
10612: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_INT 4
10623: PPUSH
10624: CALL_OW 308
10628: IFFALSE 10639
// RemoveUnit ( i ) ;
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 64
// end ;
10639: GO 10601
10641: POP
10642: POP
// end ;
10643: PPOPN 1
10645: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
10646: LD_EXP 28
10650: PUSH
10651: LD_INT 1
10653: EQUAL
10654: IFFALSE 11093
10656: GO 10658
10658: DISABLE
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// begin enable ;
10664: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_INT 12
10672: PPUSH
10673: LD_INT 22
10675: PUSH
10676: LD_INT 3
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 21
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 70
10701: ST_TO_ADDR
// for i in enemyVehs do
10702: LD_ADDR_VAR 0 1
10706: PUSH
10707: LD_VAR 0 2
10711: PUSH
10712: FOR_IN
10713: IFFALSE 11091
// begin if See ( 1 , i ) then
10715: LD_INT 1
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 292
10727: IFFALSE 11089
// begin disable ;
10729: DISABLE
// DialogueOn ;
10730: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10743: LD_INT 22
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 26
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 25
10768: PUSH
10769: LD_INT 1
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 25
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 25
10788: PUSH
10789: LD_INT 3
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 4
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 8
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: PPUSH
10840: CALL_OW 69
10844: PPUSH
10845: LD_STRING DT1-Sol1-1
10847: PPUSH
10848: LD_STRING DT1-FSol1-1
10850: PPUSH
10851: CALL 13229 0 3
// dec = ShowQuery2 ;
10855: LD_ADDR_VAR 0 3
10859: PUSH
10860: CALL 13839 0 0
10864: ST_TO_ADDR
// if dec = 1 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 1
10872: EQUAL
10873: IFFALSE 10979
// begin Say ( JMM , D2-JMM-1 ) ;
10875: LD_EXP 1
10879: PPUSH
10880: LD_STRING D2-JMM-1
10882: PPUSH
10883: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10887: LD_EXP 22
10891: PPUSH
10892: LD_STRING D2-Pow-1
10894: PPUSH
10895: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10899: LD_EXP 1
10903: PPUSH
10904: LD_STRING D2a-JMM-1
10906: PPUSH
10907: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10911: LD_EXP 22
10915: PPUSH
10916: LD_STRING D2a-Pow-1
10918: PPUSH
10919: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10923: LD_EXP 1
10927: PPUSH
10928: LD_STRING D2a-JMM-2
10930: PPUSH
10931: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10935: LD_EXP 22
10939: PPUSH
10940: LD_STRING D2a-Pow-2
10942: PPUSH
10943: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10947: LD_EXP 1
10951: PPUSH
10952: LD_STRING D2a-JMM-3
10954: PPUSH
10955: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10959: LD_EXP 22
10963: PPUSH
10964: LD_STRING D2a-Pow-3
10966: PPUSH
10967: CALL_OW 94
// secondPass = 2 ;
10971: LD_ADDR_EXP 28
10975: PUSH
10976: LD_INT 2
10978: ST_TO_ADDR
// end ; if dec = 2 then
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 2
10986: EQUAL
10987: IFFALSE 11081
// begin Say ( JMM , D2-JMM-1 ) ;
10989: LD_EXP 1
10993: PPUSH
10994: LD_STRING D2-JMM-1
10996: PPUSH
10997: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
11001: LD_EXP 22
11005: PPUSH
11006: LD_STRING D2-Pow-1
11008: PPUSH
11009: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
11013: LD_EXP 1
11017: PPUSH
11018: LD_STRING D2b-JMM-1
11020: PPUSH
11021: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
11025: LD_EXP 22
11029: PPUSH
11030: LD_STRING D2b-Pow-1
11032: PPUSH
11033: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
11037: LD_EXP 1
11041: PPUSH
11042: LD_STRING D2c-JMM-1
11044: PPUSH
11045: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
11049: LD_EXP 22
11053: PPUSH
11054: LD_STRING D2c-Pow-1
11056: PPUSH
11057: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
11061: LD_EXP 1
11065: PPUSH
11066: LD_STRING D2c-JMM-2
11068: PPUSH
11069: CALL_OW 88
// secondPass = 2 ;
11073: LD_ADDR_EXP 28
11077: PUSH
11078: LD_INT 2
11080: ST_TO_ADDR
// end ; DialogueOff ;
11081: CALL_OW 7
// exit ;
11085: POP
11086: POP
11087: GO 11093
// end ; end ;
11089: GO 10712
11091: POP
11092: POP
// end ;
11093: PPOPN 3
11095: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
11096: LD_EXP 29
11100: PUSH
11101: LD_INT 1
11103: EQUAL
11104: IFFALSE 11337
11106: GO 11108
11108: DISABLE
11109: LD_INT 0
11111: PPUSH
11112: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_INT 11
11120: PPUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 24
11133: PUSH
11134: LD_INT 250
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 70
11149: ST_TO_ADDR
// enable ;
11150: ENABLE
// for i in vehicles do
11151: LD_ADDR_VAR 0 1
11155: PUSH
11156: LD_VAR 0 2
11160: PUSH
11161: FOR_IN
11162: IFFALSE 11335
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
11164: LD_INT 1
11166: PPUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL_OW 292
11176: PUSH
11177: LD_EXP 29
11181: PUSH
11182: LD_INT 1
11184: EQUAL
11185: AND
11186: PUSH
11187: LD_EXP 30
11191: PUSH
11192: LD_INT 4
11194: LESSEQUAL
11195: AND
11196: IFFALSE 11333
// begin disable ;
11198: DISABLE
// DialogueOn ;
11199: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
11203: LD_INT 22
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 26
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 4
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 25
11268: PUSH
11269: LD_INT 5
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 25
11278: PUSH
11279: LD_INT 8
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: PPUSH
11300: CALL_OW 69
11304: PPUSH
11305: LD_STRING DT1-Sol1-1
11307: PPUSH
11308: LD_STRING DT1-FSol1-1
11310: PPUSH
11311: CALL 13229 0 3
// Say ( JMM , DT1-JMM-1 ) ;
11315: LD_EXP 1
11319: PPUSH
11320: LD_STRING DT1-JMM-1
11322: PPUSH
11323: CALL_OW 88
// DialogueOff ;
11327: CALL_OW 7
// break ;
11331: GO 11335
// end ; end ;
11333: GO 11161
11335: POP
11336: POP
// end ;
11337: PPOPN 2
11339: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter <= [ 3 , 3 , 4 ] [ Difficulty ] and tpCounter > 5 do
11340: LD_EXP 29
11344: PUSH
11345: LD_INT 1
11347: EQUAL
11348: PUSH
11349: LD_INT 11
11351: PPUSH
11352: LD_INT 22
11354: PUSH
11355: LD_INT 3
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 24
11364: PUSH
11365: LD_INT 251
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 21
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 21
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PPUSH
11405: CALL_OW 70
11409: PUSH
11410: LD_INT 0
11412: EQUAL
11413: AND
11414: PUSH
11415: LD_EXP 30
11419: PUSH
11420: LD_INT 3
11422: PUSH
11423: LD_INT 3
11425: PUSH
11426: LD_INT 4
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: LD_OWVAR 67
11438: ARRAY
11439: LESSEQUAL
11440: AND
11441: PUSH
11442: LD_EXP 30
11446: PUSH
11447: LD_INT 5
11449: GREATER
11450: AND
11451: IFFALSE 11608
11453: GO 11455
11455: DISABLE
// begin vehicleTeleported = 2 ;
11456: LD_ADDR_EXP 29
11460: PUSH
11461: LD_INT 2
11463: ST_TO_ADDR
// DialogueOn ;
11464: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
11468: LD_EXP 1
11472: PPUSH
11473: LD_STRING DT1a-JMM-1
11475: PPUSH
11476: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
11480: LD_INT 22
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 26
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 3
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 4
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 25
11545: PUSH
11546: LD_INT 5
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 25
11555: PUSH
11556: LD_INT 8
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: PPUSH
11577: CALL_OW 69
11581: PPUSH
11582: LD_STRING DT1a-Sol1-1
11584: PPUSH
11585: LD_STRING DT1a-FSol1-1
11587: PPUSH
11588: CALL 13229 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
11592: LD_EXP 1
11596: PPUSH
11597: LD_STRING DT1a-JMM-2
11599: PPUSH
11600: CALL_OW 88
// DialogueOff ;
11604: CALL_OW 7
// end ;
11608: END
// every 0 0$1 trigger vehicleTeleported = 3 and tpCounter > 4 do var i , vehicles ;
11609: LD_EXP 29
11613: PUSH
11614: LD_INT 3
11616: EQUAL
11617: PUSH
11618: LD_EXP 30
11622: PUSH
11623: LD_INT 4
11625: GREATER
11626: AND
11627: IFFALSE 11838
11629: GO 11631
11631: DISABLE
11632: LD_INT 0
11634: PPUSH
11635: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
11636: LD_ADDR_VAR 0 2
11640: PUSH
11641: LD_INT 11
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 24
11656: PUSH
11657: LD_INT 250
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 70
11672: ST_TO_ADDR
// enable ;
11673: ENABLE
// for i in vehicles do
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_VAR 0 2
11683: PUSH
11684: FOR_IN
11685: IFFALSE 11836
// begin if See ( 1 , i ) and vehicleTeleported = 3 then
11687: LD_INT 1
11689: PPUSH
11690: LD_VAR 0 1
11694: PPUSH
11695: CALL_OW 292
11699: PUSH
11700: LD_EXP 29
11704: PUSH
11705: LD_INT 3
11707: EQUAL
11708: AND
11709: IFFALSE 11834
// begin disable ;
11711: DISABLE
// DialogueOn ;
11712: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
11716: LD_INT 22
11718: PUSH
11719: LD_INT 1
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 26
11728: PUSH
11729: LD_INT 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 2
11738: PUSH
11739: LD_INT 25
11741: PUSH
11742: LD_INT 1
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 25
11761: PUSH
11762: LD_INT 3
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 4
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 25
11781: PUSH
11782: LD_INT 5
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 25
11791: PUSH
11792: LD_INT 8
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 69
11817: PPUSH
11818: LD_STRING DT2-Sol1-1
11820: PPUSH
11821: LD_STRING DT2-FSol1-1
11823: PPUSH
11824: CALL 13229 0 3
// DialogueOff ;
11828: CALL_OW 7
// break ;
11832: GO 11836
// end ; end ;
11834: GO 11684
11836: POP
11837: POP
// end ;
11838: PPOPN 2
11840: END
// every 0 0$10 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter = [ 6 , 6 , 8 ] [ Difficulty ] do
11841: LD_EXP 29
11845: PUSH
11846: LD_INT 3
11848: EQUAL
11849: PUSH
11850: LD_INT 11
11852: PPUSH
11853: LD_INT 22
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: LD_INT 24
11865: PUSH
11866: LD_INT 251
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 21
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 0
11913: EQUAL
11914: AND
11915: PUSH
11916: LD_EXP 30
11920: PUSH
11921: LD_INT 6
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 8
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: LD_OWVAR 67
11939: ARRAY
11940: EQUAL
11941: AND
11942: IFFALSE 12099
11944: GO 11946
11946: DISABLE
// begin vehicleTeleported = 4 ;
11947: LD_ADDR_EXP 29
11951: PUSH
11952: LD_INT 4
11954: ST_TO_ADDR
// DialogueOn ;
11955: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11959: LD_EXP 1
11963: PPUSH
11964: LD_STRING DT2a-JMM-1
11966: PPUSH
11967: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2a-Sol1-1 , DT2a-FSol1-1 ) ;
11971: LD_INT 22
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 26
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 25
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 25
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 25
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 5
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 25
12046: PUSH
12047: LD_INT 8
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 69
12072: PPUSH
12073: LD_STRING DT2a-Sol1-1
12075: PPUSH
12076: LD_STRING DT2a-FSol1-1
12078: PPUSH
12079: CALL 13229 0 3
// Say ( Donaldson , DT2a-Don-1 ) ;
12083: LD_EXP 3
12087: PPUSH
12088: LD_STRING DT2a-Don-1
12090: PPUSH
12091: CALL_OW 88
// DialogueOff ;
12095: CALL_OW 7
// end ;
12099: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
12100: LD_INT 1
12102: PPUSH
12103: LD_INT 45
12105: PPUSH
12106: LD_INT 74
12108: PPUSH
12109: CALL_OW 293
12113: IFFALSE 12281
12115: GO 12117
12117: DISABLE
// begin DialogueOn ;
12118: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
12122: LD_INT 36
12124: PPUSH
12125: LD_INT 55
12127: PPUSH
12128: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
12132: LD_INT 22
12134: PUSH
12135: LD_INT 1
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 26
12144: PUSH
12145: LD_INT 1
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: LD_INT 25
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 25
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 25
12177: PUSH
12178: LD_INT 3
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 25
12187: PUSH
12188: LD_INT 4
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 25
12197: PUSH
12198: LD_INT 5
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 8
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: LIST
12228: PPUSH
12229: CALL_OW 69
12233: PPUSH
12234: LD_STRING D5-Sol1-1
12236: PPUSH
12237: LD_STRING D5-FSol1-
12239: PPUSH
12240: CALL 13229 0 3
// if warWithLegion = 1 and IsLive ( Donaldson ) then
12244: LD_EXP 31
12248: PUSH
12249: LD_INT 1
12251: EQUAL
12252: PUSH
12253: LD_EXP 3
12257: PPUSH
12258: CALL_OW 300
12262: AND
12263: IFFALSE 12277
// Say ( Donaldson , D5-Don-1 ) ;
12265: LD_EXP 3
12269: PPUSH
12270: LD_STRING D5-Don-1
12272: PPUSH
12273: CALL_OW 88
// DialogueOff ;
12277: CALL_OW 7
// end ;
12281: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
12282: LD_INT 1
12284: PPUSH
12285: LD_INT 10
12287: PPUSH
12288: CALL_OW 292
12292: PUSH
12293: LD_INT 1
12295: PPUSH
12296: LD_INT 137
12298: PPUSH
12299: CALL_OW 292
12303: OR
12304: IFFALSE 12448
12306: GO 12308
12308: DISABLE
// begin DialogueOn ;
12309: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
12313: LD_INT 22
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 26
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 25
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 25
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 25
12358: PUSH
12359: LD_INT 3
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 25
12368: PUSH
12369: LD_INT 4
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 5
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 25
12388: PUSH
12389: LD_INT 8
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 69
12414: PPUSH
12415: LD_STRING DT3-Sol1-1
12417: PPUSH
12418: LD_STRING DT3-FSol1-1
12420: PPUSH
12421: CALL 13229 0 3
// Say ( JMM , DT3-JMM-1 ) ;
12425: LD_EXP 1
12429: PPUSH
12430: LD_STRING DT3-JMM-1
12432: PPUSH
12433: CALL_OW 88
// DialogueOff ;
12437: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
12441: LD_STRING M2
12443: PPUSH
12444: CALL_OW 337
// end ;
12448: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
12449: LD_EXP 43
12453: PUSH
12454: LD_INT 0
12456: EQUAL
12457: IFFALSE 12540
12459: GO 12461
12461: DISABLE
12462: LD_INT 0
12464: PPUSH
// begin enable ;
12465: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
12466: LD_ADDR_VAR 0 1
12470: PUSH
12471: LD_INT 10
12473: PPUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 3
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 58
12496: PUSH
12497: EMPTY
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 70
12509: PUSH
12510: FOR_IN
12511: IFFALSE 12538
// if GetLives ( i ) < 1000 then
12513: LD_VAR 0 1
12517: PPUSH
12518: CALL_OW 256
12522: PUSH
12523: LD_INT 1000
12525: LESS
12526: IFFALSE 12536
// ruEscape = 1 ;
12528: LD_ADDR_EXP 43
12532: PUSH
12533: LD_INT 1
12535: ST_TO_ADDR
12536: GO 12510
12538: POP
12539: POP
// end ;
12540: PPOPN 1
12542: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
12543: LD_INT 3
12545: PPUSH
12546: CALL_OW 303
12550: PUSH
12551: LD_INT 4
12553: PPUSH
12554: CALL_OW 303
12558: OR
12559: PUSH
12560: LD_INT 22
12562: PPUSH
12563: LD_INT 22
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 70
12577: PUSH
12578: LD_INT 0
12580: GREATER
12581: OR
12582: PUSH
12583: LD_EXP 43
12587: PUSH
12588: LD_INT 1
12590: EQUAL
12591: OR
12592: IFFALSE 12823
12594: GO 12596
12596: DISABLE
12597: LD_INT 0
12599: PPUSH
12600: PPUSH
12601: PPUSH
// begin ruAI = 0 ;
12602: LD_ADDR_EXP 42
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
12610: LD_ADDR_VAR 0 3
12614: PUSH
12615: LD_INT 10
12617: PPUSH
12618: LD_INT 22
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 21
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 58
12640: PUSH
12641: EMPTY
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: PPUSH
12649: CALL_OW 70
12653: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
12654: LD_EXP 35
12658: PPUSH
12659: CALL_OW 122
// wait ( 0 0$1 ) ;
12663: LD_INT 35
12665: PPUSH
12666: CALL_OW 67
// DialogueOn ;
12670: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
12674: LD_EXP 1
12678: PPUSH
12679: LD_STRING D6-JMM-1
12681: PPUSH
12682: CALL_OW 88
// DialogueOff ;
12686: CALL_OW 7
// if vehs > 0 then
12690: LD_VAR 0 3
12694: PUSH
12695: LD_INT 0
12697: GREATER
12698: IFFALSE 12768
// for i := 1 to RuScientists do
12700: LD_ADDR_VAR 0 1
12704: PUSH
12705: DOUBLE
12706: LD_INT 1
12708: DEC
12709: ST_TO_ADDR
12710: LD_EXP 35
12714: PUSH
12715: FOR_TO
12716: IFFALSE 12764
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
12718: LD_EXP 35
12722: PUSH
12723: LD_VAR 0 1
12727: ARRAY
12728: PPUSH
12729: LD_INT 3
12731: PUSH
12732: LD_INT 60
12734: PUSH
12735: EMPTY
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PPUSH
12742: CALL_OW 72
12746: PPUSH
12747: LD_VAR 0 3
12751: PUSH
12752: LD_VAR 0 1
12756: ARRAY
12757: PPUSH
12758: CALL_OW 120
12762: GO 12715
12764: POP
12765: POP
12766: GO 12823
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
12768: LD_EXP 35
12772: PUSH
12773: LD_VAR 0 1
12777: ARRAY
12778: PPUSH
12779: LD_INT 3
12781: PUSH
12782: LD_INT 60
12784: PUSH
12785: EMPTY
12786: LIST
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 72
12796: PPUSH
12797: LD_INT 13
12799: PUSH
12800: LD_INT 14
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_INT 2
12812: PPUSH
12813: CALL_OW 12
12817: ARRAY
12818: PPUSH
12819: CALL_OW 113
// end ;
12823: PPOPN 3
12825: END
// every 0 0$0.3 trigger ruAI = 0 and UnitFilter ( RuScientists , [ f_inarea , EscapeArea1 ] ) or FilterUnitsInArea ( EscapeArea1 , [ [ f_control , control_manual ] , [ f_nation , 3 ] ] ) do var i , unit , veh , tmp ;
12826: LD_EXP 42
12830: PUSH
12831: LD_INT 0
12833: EQUAL
12834: PUSH
12835: LD_EXP 35
12839: PPUSH
12840: LD_INT 95
12842: PUSH
12843: LD_INT 13
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 72
12854: AND
12855: PUSH
12856: LD_INT 13
12858: PPUSH
12859: LD_INT 33
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 23
12871: PUSH
12872: LD_INT 3
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 70
12887: OR
12888: IFFALSE 13118
12890: GO 12892
12892: DISABLE
12893: LD_INT 0
12895: PPUSH
12896: PPUSH
12897: PPUSH
12898: PPUSH
// begin enable ;
12899: ENABLE
// unit := UnitFilter ( RuScientists , [ f_inarea , EscapeArea1 ] ) [ 1 ] ;
12900: LD_ADDR_VAR 0 2
12904: PUSH
12905: LD_EXP 35
12909: PPUSH
12910: LD_INT 95
12912: PUSH
12913: LD_INT 13
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PPUSH
12920: CALL_OW 72
12924: PUSH
12925: LD_INT 1
12927: ARRAY
12928: ST_TO_ADDR
// if not unit then
12929: LD_VAR 0 2
12933: NOT
12934: IFFALSE 13043
// begin tmp := FilterUnitsInArea ( EscapeArea1 , [ [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12936: LD_ADDR_VAR 0 4
12940: PUSH
12941: LD_INT 13
12943: PPUSH
12944: LD_INT 33
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 23
12956: PUSH
12957: LD_INT 3
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PPUSH
12968: CALL_OW 70
12972: ST_TO_ADDR
// if not tmp then
12973: LD_VAR 0 4
12977: NOT
12978: IFFALSE 12982
// exit ;
12980: GO 13118
// for i in tmp do
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: LD_VAR 0 4
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13041
// if IsDrivenBy ( i ) in RuScientists then
12995: LD_VAR 0 1
12999: PPUSH
13000: CALL_OW 311
13004: PUSH
13005: LD_EXP 35
13009: IN
13010: IFFALSE 13039
// begin unit := IsDrivenBy ( i ) ;
13012: LD_ADDR_VAR 0 2
13016: PUSH
13017: LD_VAR 0 1
13021: PPUSH
13022: CALL_OW 311
13026: ST_TO_ADDR
// veh := i ;
13027: LD_ADDR_VAR 0 3
13031: PUSH
13032: LD_VAR 0 1
13036: ST_TO_ADDR
// break ;
13037: GO 13041
// end ;
13039: GO 12992
13041: POP
13042: POP
// end ; if not unit then
13043: LD_VAR 0 2
13047: NOT
13048: IFFALSE 13052
// exit ;
13050: GO 13118
// RuScientists = RuScientists diff unit ;
13052: LD_ADDR_EXP 35
13056: PUSH
13057: LD_EXP 35
13061: PUSH
13062: LD_VAR 0 2
13066: DIFF
13067: ST_TO_ADDR
// RemoveUnit ( unit ) ;
13068: LD_VAR 0 2
13072: PPUSH
13073: CALL_OW 64
// if veh then
13077: LD_VAR 0 3
13081: IFFALSE 13118
// if GetWeapon ( veh ) = 49 then
13083: LD_VAR 0 3
13087: PPUSH
13088: CALL_OW 264
13092: PUSH
13093: LD_INT 49
13095: EQUAL
13096: IFFALSE 13109
// KillUnit ( veh ) else
13098: LD_VAR 0 3
13102: PPUSH
13103: CALL_OW 66
13107: GO 13118
// RemoveUnit ( veh ) ;
13109: LD_VAR 0 3
13113: PPUSH
13114: CALL_OW 64
// end ; end_of_file
13118: PPOPN 4
13120: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
13121: LD_INT 0
13123: PPUSH
13124: PPUSH
// if exist_mode then
13125: LD_VAR 0 2
13129: IFFALSE 13148
// unit := CreateCharacter ( ident ) else
13131: LD_ADDR_VAR 0 4
13135: PUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 34
13145: ST_TO_ADDR
13146: GO 13163
// unit := NewCharacter ( ident ) ;
13148: LD_ADDR_VAR 0 4
13152: PUSH
13153: LD_VAR 0 1
13157: PPUSH
13158: CALL_OW 25
13162: ST_TO_ADDR
// result := unit ;
13163: LD_ADDR_VAR 0 3
13167: PUSH
13168: LD_VAR 0 4
13172: ST_TO_ADDR
// end ;
13173: LD_VAR 0 3
13177: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
13178: LD_INT 0
13180: PPUSH
13181: PPUSH
// for i in charactersList do
13182: LD_ADDR_VAR 0 4
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: FOR_IN
13193: IFFALSE 13222
// begin if IsOk ( i ) then
13195: LD_VAR 0 4
13199: PPUSH
13200: CALL_OW 302
13204: IFFALSE 13220
// SaveCharacters ( i , ident ) ;
13206: LD_VAR 0 4
13210: PPUSH
13211: LD_VAR 0 2
13215: PPUSH
13216: CALL_OW 38
// end ;
13220: GO 13192
13222: POP
13223: POP
// end ;
13224: LD_VAR 0 3
13228: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
13229: LD_INT 0
13231: PPUSH
13232: PPUSH
13233: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
13234: LD_ADDR_VAR 0 1
13238: PUSH
13239: LD_VAR 0 1
13243: PUSH
13244: LD_EXP 1
13248: PUSH
13249: LD_EXP 7
13253: PUSH
13254: LD_EXP 3
13258: PUSH
13259: LD_EXP 4
13263: PUSH
13264: LD_EXP 5
13268: PUSH
13269: LD_EXP 2
13273: PUSH
13274: LD_EXP 12
13278: PUSH
13279: LD_EXP 13
13283: PUSH
13284: LD_EXP 9
13288: PUSH
13289: LD_EXP 11
13293: PUSH
13294: LD_EXP 6
13298: PUSH
13299: LD_EXP 8
13303: PUSH
13304: LD_EXP 10
13308: PUSH
13309: LD_EXP 22
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: DIFF
13330: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
13331: LD_ADDR_VAR 0 6
13335: PUSH
13336: LD_INT 1
13338: PPUSH
13339: LD_VAR 0 1
13343: PPUSH
13344: CALL_OW 12
13348: ST_TO_ADDR
// for i = 1 to characters do
13349: LD_ADDR_VAR 0 5
13353: PUSH
13354: DOUBLE
13355: LD_INT 1
13357: DEC
13358: ST_TO_ADDR
13359: LD_VAR 0 1
13363: PUSH
13364: FOR_TO
13365: IFFALSE 13475
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
13367: LD_VAR 0 5
13371: PUSH
13372: LD_VAR 0 6
13376: EQUAL
13377: PUSH
13378: LD_VAR 0 1
13382: PUSH
13383: LD_VAR 0 5
13387: ARRAY
13388: PPUSH
13389: CALL_OW 258
13393: PUSH
13394: LD_INT 1
13396: EQUAL
13397: AND
13398: IFFALSE 13420
// Say ( characters [ i ] , dialogMID ) ;
13400: LD_VAR 0 1
13404: PUSH
13405: LD_VAR 0 5
13409: ARRAY
13410: PPUSH
13411: LD_VAR 0 2
13415: PPUSH
13416: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
13420: LD_VAR 0 5
13424: PUSH
13425: LD_VAR 0 6
13429: EQUAL
13430: PUSH
13431: LD_VAR 0 1
13435: PUSH
13436: LD_VAR 0 5
13440: ARRAY
13441: PPUSH
13442: CALL_OW 258
13446: PUSH
13447: LD_INT 2
13449: EQUAL
13450: AND
13451: IFFALSE 13473
// Say ( characters [ i ] , dialogFID ) ;
13453: LD_VAR 0 1
13457: PUSH
13458: LD_VAR 0 5
13462: ARRAY
13463: PPUSH
13464: LD_VAR 0 3
13468: PPUSH
13469: CALL_OW 88
// end ;
13473: GO 13364
13475: POP
13476: POP
// end ;
13477: LD_VAR 0 4
13481: RET
// export function PrepareDifficulty ; var tmp ; begin
13482: LD_INT 0
13484: PPUSH
13485: PPUSH
// if Difficulty = 1 then
13486: LD_OWVAR 67
13490: PUSH
13491: LD_INT 1
13493: EQUAL
13494: IFFALSE 13512
// begin RuSolMinLevel = 8 ;
13496: LD_ADDR_EXP 37
13500: PUSH
13501: LD_INT 8
13503: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13504: LD_ADDR_EXP 38
13508: PUSH
13509: LD_INT 10
13511: ST_TO_ADDR
// end ; if Difficulty = 2 then
13512: LD_OWVAR 67
13516: PUSH
13517: LD_INT 2
13519: EQUAL
13520: IFFALSE 13614
// begin RuSolMinLevel = 9 ;
13522: LD_ADDR_EXP 37
13526: PUSH
13527: LD_INT 9
13529: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13530: LD_ADDR_EXP 38
13534: PUSH
13535: LD_INT 10
13537: ST_TO_ADDR
// uc_nation = 3 ;
13538: LD_ADDR_OWVAR 21
13542: PUSH
13543: LD_INT 3
13545: ST_TO_ADDR
// uc_side = 3 ;
13546: LD_ADDR_OWVAR 20
13550: PUSH
13551: LD_INT 3
13553: ST_TO_ADDR
// bc_level = 10 ;
13554: LD_ADDR_OWVAR 43
13558: PUSH
13559: LD_INT 10
13561: ST_TO_ADDR
// bc_type = b_turret ;
13562: LD_ADDR_OWVAR 42
13566: PUSH
13567: LD_INT 33
13569: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13570: LD_ADDR_VAR 0 2
13574: PUSH
13575: LD_INT 86
13577: PPUSH
13578: LD_INT 34
13580: PPUSH
13581: LD_INT 2
13583: PPUSH
13584: CALL_OW 47
13588: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13589: LD_VAR 0 2
13593: PPUSH
13594: LD_INT 49
13596: PPUSH
13597: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13601: LD_INT 64
13603: PPUSH
13604: LD_INT 3
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: CALL_OW 322
// end ; if Difficulty = 3 then
13614: LD_OWVAR 67
13618: PUSH
13619: LD_INT 3
13621: EQUAL
13622: IFFALSE 13760
// begin RuSolMinLevel = 10 ;
13624: LD_ADDR_EXP 37
13628: PUSH
13629: LD_INT 10
13631: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
13632: LD_ADDR_EXP 38
13636: PUSH
13637: LD_INT 10
13639: ST_TO_ADDR
// uc_nation = 3 ;
13640: LD_ADDR_OWVAR 21
13644: PUSH
13645: LD_INT 3
13647: ST_TO_ADDR
// uc_side = 3 ;
13648: LD_ADDR_OWVAR 20
13652: PUSH
13653: LD_INT 3
13655: ST_TO_ADDR
// bc_level = 10 ;
13656: LD_ADDR_OWVAR 43
13660: PUSH
13661: LD_INT 10
13663: ST_TO_ADDR
// bc_type = b_turret ;
13664: LD_ADDR_OWVAR 42
13668: PUSH
13669: LD_INT 33
13671: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_INT 86
13679: PPUSH
13680: LD_INT 34
13682: PPUSH
13683: LD_INT 2
13685: PPUSH
13686: CALL_OW 47
13690: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13691: LD_VAR 0 2
13695: PPUSH
13696: LD_INT 49
13698: PPUSH
13699: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13703: LD_ADDR_VAR 0 2
13707: PUSH
13708: LD_INT 93
13710: PPUSH
13711: LD_INT 31
13713: PPUSH
13714: LD_INT 2
13716: PPUSH
13717: CALL_OW 47
13721: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13722: LD_VAR 0 2
13726: PPUSH
13727: LD_INT 49
13729: PPUSH
13730: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13734: LD_INT 64
13736: PPUSH
13737: LD_INT 3
13739: PPUSH
13740: LD_INT 1
13742: PPUSH
13743: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13747: LD_INT 65
13749: PPUSH
13750: LD_INT 3
13752: PPUSH
13753: LD_INT 1
13755: PPUSH
13756: CALL_OW 322
// end ; end ;
13760: LD_VAR 0 1
13764: RET
// export function ShowQuery1 ; begin
13765: LD_INT 0
13767: PPUSH
// case query ( Q1 ) of 1 :
13768: LD_STRING Q1
13770: PPUSH
13771: CALL_OW 97
13775: PUSH
13776: LD_INT 1
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 13795
13784: POP
// result = 1 ; 2 :
13785: LD_ADDR_VAR 0 1
13789: PUSH
13790: LD_INT 1
13792: ST_TO_ADDR
13793: GO 13834
13795: LD_INT 2
13797: DOUBLE
13798: EQUAL
13799: IFTRUE 13803
13801: GO 13814
13803: POP
// result = 2 ; 3 :
13804: LD_ADDR_VAR 0 1
13808: PUSH
13809: LD_INT 2
13811: ST_TO_ADDR
13812: GO 13834
13814: LD_INT 3
13816: DOUBLE
13817: EQUAL
13818: IFTRUE 13822
13820: GO 13833
13822: POP
// result = 3 ; end ;
13823: LD_ADDR_VAR 0 1
13827: PUSH
13828: LD_INT 3
13830: ST_TO_ADDR
13831: GO 13834
13833: POP
// end ;
13834: LD_VAR 0 1
13838: RET
// export function ShowQuery2 ; begin
13839: LD_INT 0
13841: PPUSH
// case query ( Q1a ) of 1 :
13842: LD_STRING Q1a
13844: PPUSH
13845: CALL_OW 97
13849: PUSH
13850: LD_INT 1
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13869
13858: POP
// result = 1 ; 2 :
13859: LD_ADDR_VAR 0 1
13863: PUSH
13864: LD_INT 1
13866: ST_TO_ADDR
13867: GO 13908
13869: LD_INT 2
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13888
13877: POP
// result = 2 ; 3 :
13878: LD_ADDR_VAR 0 1
13882: PUSH
13883: LD_INT 2
13885: ST_TO_ADDR
13886: GO 13908
13888: LD_INT 3
13890: DOUBLE
13891: EQUAL
13892: IFTRUE 13896
13894: GO 13907
13896: POP
// result = 3 ; end ;
13897: LD_ADDR_VAR 0 1
13901: PUSH
13902: LD_INT 3
13904: ST_TO_ADDR
13905: GO 13908
13907: POP
// end ;
13908: LD_VAR 0 1
13912: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13913: LD_INT 0
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
13919: PPUSH
// for i = 1 to count do
13920: LD_ADDR_VAR 0 8
13924: PUSH
13925: DOUBLE
13926: LD_INT 1
13928: DEC
13929: ST_TO_ADDR
13930: LD_VAR 0 6
13934: PUSH
13935: FOR_TO
13936: IFFALSE 14017
// begin uc_side = side ;
13938: LD_ADDR_OWVAR 20
13942: PUSH
13943: LD_VAR 0 1
13947: ST_TO_ADDR
// uc_nation = nation ;
13948: LD_ADDR_OWVAR 21
13952: PUSH
13953: LD_VAR 0 2
13957: ST_TO_ADDR
// hc_gallery =  ;
13958: LD_ADDR_OWVAR 33
13962: PUSH
13963: LD_STRING 
13965: ST_TO_ADDR
// hc_name =  ;
13966: LD_ADDR_OWVAR 26
13970: PUSH
13971: LD_STRING 
13973: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13974: LD_INT 0
13976: PPUSH
13977: LD_VAR 0 5
13981: PPUSH
13982: LD_VAR 0 4
13986: PPUSH
13987: CALL_OW 380
// un = CreateHuman ;
13991: LD_ADDR_VAR 0 10
13995: PUSH
13996: CALL_OW 44
14000: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
14001: LD_VAR 0 10
14005: PPUSH
14006: LD_VAR 0 3
14010: PPUSH
14011: CALL_OW 52
// end ;
14015: GO 13935
14017: POP
14018: POP
// end ;
14019: LD_VAR 0 7
14023: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
14024: LD_INT 0
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
14031: LD_ADDR_VAR 0 8
14035: PUSH
14036: LD_INT 48
14038: PUSH
14039: LD_INT 49
14041: PUSH
14042: LD_INT 50
14044: PUSH
14045: LD_INT 20
14047: PUSH
14048: LD_INT 1
14050: PUSH
14051: LD_INT 51
14053: PUSH
14054: LD_INT 52
14056: PUSH
14057: LD_INT 69
14059: PUSH
14060: LD_INT 39
14062: PUSH
14063: LD_INT 34
14065: PUSH
14066: LD_INT 40
14068: PUSH
14069: LD_INT 53
14071: PUSH
14072: LD_INT 71
14074: PUSH
14075: LD_INT 57
14077: PUSH
14078: LD_INT 58
14080: PUSH
14081: LD_INT 44
14083: PUSH
14084: LD_INT 32
14086: PUSH
14087: LD_INT 27
14089: PUSH
14090: LD_INT 23
14092: PUSH
14093: LD_INT 33
14095: PUSH
14096: LD_INT 59
14098: PUSH
14099: LD_INT 54
14101: PUSH
14102: LD_INT 55
14104: PUSH
14105: LD_INT 56
14107: PUSH
14108: LD_INT 63
14110: PUSH
14111: LD_INT 64
14113: PUSH
14114: LD_INT 65
14116: PUSH
14117: LD_INT 30
14119: PUSH
14120: LD_INT 31
14122: PUSH
14123: LD_INT 21
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: LD_INT 25
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: ST_TO_ADDR
// for i = 1 to ru_tech_list do
14166: LD_ADDR_VAR 0 5
14170: PUSH
14171: DOUBLE
14172: LD_INT 1
14174: DEC
14175: ST_TO_ADDR
14176: LD_VAR 0 8
14180: PUSH
14181: FOR_TO
14182: IFFALSE 14258
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
14184: LD_VAR 0 8
14188: PUSH
14189: LD_VAR 0 5
14193: ARRAY
14194: PPUSH
14195: LD_VAR 0 1
14199: PPUSH
14200: CALL_OW 321
14204: PUSH
14205: LD_INT 1
14207: EQUAL
14208: PUSH
14209: LD_VAR 0 8
14213: PUSH
14214: LD_VAR 0 5
14218: ARRAY
14219: PPUSH
14220: LD_VAR 0 3
14224: PPUSH
14225: CALL_OW 482
14229: PUSH
14230: LD_INT 1
14232: EQUAL
14233: AND
14234: IFFALSE 14256
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
14236: LD_VAR 0 2
14240: PPUSH
14241: LD_VAR 0 8
14245: PUSH
14246: LD_VAR 0 5
14250: ARRAY
14251: PPUSH
14252: CALL_OW 184
14256: GO 14181
14258: POP
14259: POP
// end ;
14260: LD_VAR 0 4
14264: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14265: LD_INT 0
14267: PPUSH
14268: PPUSH
14269: PPUSH
14270: PPUSH
14271: PPUSH
14272: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14273: LD_ADDR_VAR 0 8
14277: PUSH
14278: LD_VAR 0 2
14282: PPUSH
14283: CALL_OW 313
14287: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
14288: LD_ADDR_VAR 0 9
14292: PUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: LD_INT 22
14300: PUSH
14301: LD_VAR 0 1
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 25
14312: PUSH
14313: LD_INT 2
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 24
14322: PUSH
14323: LD_INT 750
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 3
14332: PUSH
14333: LD_INT 54
14335: PUSH
14336: EMPTY
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 70
14353: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14354: LD_ADDR_VAR 0 6
14358: PUSH
14359: LD_VAR 0 3
14363: PPUSH
14364: LD_INT 22
14366: PUSH
14367: LD_VAR 0 1
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 21
14378: PUSH
14379: LD_INT 3
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 3
14388: PUSH
14389: LD_INT 24
14391: PUSH
14392: LD_INT 1000
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: PPUSH
14411: CALL_OW 70
14415: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
14416: LD_VAR 0 6
14420: NOT
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_VAR 0 1
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 25
14436: PUSH
14437: LD_INT 2
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 24
14446: PUSH
14447: LD_INT 250
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: NOT
14464: AND
14465: IFFALSE 14469
// exit ;
14467: GO 14651
// if buildings_list > 0 and engineerOkInside then
14469: LD_VAR 0 6
14473: PUSH
14474: LD_INT 0
14476: GREATER
14477: PUSH
14478: LD_VAR 0 8
14482: AND
14483: IFFALSE 14494
// ComExitBuilding ( engineerOkInside ) ;
14485: LD_VAR 0 8
14489: PPUSH
14490: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
14494: LD_VAR 0 6
14498: PUSH
14499: LD_INT 0
14501: GREATER
14502: PUSH
14503: LD_VAR 0 9
14507: PUSH
14508: LD_INT 0
14510: GREATER
14511: AND
14512: IFFALSE 14532
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
14514: LD_VAR 0 9
14518: PPUSH
14519: LD_VAR 0 6
14523: PUSH
14524: LD_INT 1
14526: ARRAY
14527: PPUSH
14528: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
14532: LD_VAR 0 6
14536: PUSH
14537: LD_INT 0
14539: EQUAL
14540: PUSH
14541: LD_VAR 0 4
14545: PUSH
14546: LD_INT 0
14548: EQUAL
14549: AND
14550: PUSH
14551: LD_VAR 0 9
14555: PUSH
14556: LD_INT 0
14558: GREATER
14559: AND
14560: IFFALSE 14576
// ComEnterUnit ( engineerOkOutside , building ) ;
14562: LD_VAR 0 9
14566: PPUSH
14567: LD_VAR 0 2
14571: PPUSH
14572: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
14576: LD_VAR 0 9
14580: PUSH
14581: LD_INT 0
14583: GREATER
14584: PUSH
14585: LD_VAR 0 6
14589: PUSH
14590: LD_INT 0
14592: EQUAL
14593: AND
14594: PUSH
14595: LD_VAR 0 4
14599: PUSH
14600: LD_INT 0
14602: GREATER
14603: AND
14604: IFFALSE 14651
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14606: LD_VAR 0 9
14610: PPUSH
14611: LD_VAR 0 4
14615: PUSH
14616: LD_INT 1
14618: ARRAY
14619: PPUSH
14620: LD_VAR 0 4
14624: PUSH
14625: LD_INT 2
14627: ARRAY
14628: PPUSH
14629: LD_VAR 0 4
14633: PUSH
14634: LD_INT 3
14636: ARRAY
14637: PPUSH
14638: LD_VAR 0 4
14642: PUSH
14643: LD_INT 4
14645: ARRAY
14646: PPUSH
14647: CALL_OW 145
// end ;
14651: LD_VAR 0 5
14655: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14656: LD_INT 0
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
14667: LD_ADDR_VAR 0 6
14671: PUSH
14672: LD_INT 22
14674: PUSH
14675: LD_VAR 0 1
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 25
14686: PUSH
14687: LD_INT 4
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 24
14696: PUSH
14697: LD_INT 251
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: PPUSH
14709: CALL_OW 69
14713: PUSH
14714: LD_EXP 35
14718: PUSH
14719: EMPTY
14720: LIST
14721: DIFF
14722: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
14723: LD_ADDR_VAR 0 7
14727: PUSH
14728: LD_VAR 0 3
14732: PPUSH
14733: LD_INT 22
14735: PUSH
14736: LD_VAR 0 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 25
14747: PUSH
14748: LD_INT 4
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 50
14757: PUSH
14758: EMPTY
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 70
14770: PUSH
14771: LD_EXP 35
14775: PUSH
14776: EMPTY
14777: LIST
14778: DIFF
14779: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14780: LD_ADDR_VAR 0 10
14784: PUSH
14785: LD_VAR 0 3
14789: PPUSH
14790: LD_INT 22
14792: PUSH
14793: LD_VAR 0 1
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 21
14804: PUSH
14805: LD_INT 1
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 3
14814: PUSH
14815: LD_INT 24
14817: PUSH
14818: LD_INT 750
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: PPUSH
14834: CALL_OW 70
14838: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14839: LD_ADDR_VAR 0 11
14843: PUSH
14844: LD_VAR 0 2
14848: PPUSH
14849: LD_INT 22
14851: PUSH
14852: LD_VAR 0 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 21
14863: PUSH
14864: LD_INT 1
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 3
14873: PUSH
14874: LD_INT 24
14876: PUSH
14877: LD_INT 1000
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 70
14897: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14898: LD_VAR 0 10
14902: PUSH
14903: LD_INT 0
14905: GREATER
14906: PUSH
14907: LD_VAR 0 6
14911: PUSH
14912: LD_INT 0
14914: GREATER
14915: AND
14916: IFFALSE 14932
// ComMoveToArea ( damageUnits , healArea ) ;
14918: LD_VAR 0 10
14922: PPUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
14932: LD_VAR 0 11
14936: PUSH
14937: LD_INT 0
14939: GREATER
14940: PUSH
14941: LD_VAR 0 7
14945: PUSH
14946: LD_INT 0
14948: GREATER
14949: AND
14950: IFFALSE 14970
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
14952: LD_VAR 0 7
14956: PPUSH
14957: LD_VAR 0 11
14961: PUSH
14962: LD_INT 1
14964: ARRAY
14965: PPUSH
14966: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14970: LD_VAR 0 10
14974: PUSH
14975: LD_INT 0
14977: EQUAL
14978: PUSH
14979: LD_VAR 0 11
14983: PUSH
14984: LD_INT 0
14986: EQUAL
14987: AND
14988: PUSH
14989: LD_VAR 0 7
14993: PUSH
14994: LD_INT 0
14996: GREATER
14997: AND
14998: IFFALSE 15103
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15000: LD_ADDR_VAR 0 12
15004: PUSH
15005: LD_INT 22
15007: PUSH
15008: LD_VAR 0 1
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: LD_INT 21
15019: PUSH
15020: LD_INT 3
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 30
15029: PUSH
15030: LD_INT 8
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: LIST
15041: PPUSH
15042: CALL_OW 69
15046: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15047: LD_ADDR_VAR 0 13
15051: PUSH
15052: LD_INT 1
15054: PPUSH
15055: LD_VAR 0 12
15059: PPUSH
15060: CALL_OW 12
15064: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
15065: LD_VAR 0 7
15069: PPUSH
15070: LD_INT 3
15072: PUSH
15073: LD_INT 60
15075: PUSH
15076: EMPTY
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 72
15087: PPUSH
15088: LD_VAR 0 12
15092: PUSH
15093: LD_VAR 0 13
15097: ARRAY
15098: PPUSH
15099: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
15103: LD_VAR 0 3
15107: PPUSH
15108: LD_INT 22
15110: PUSH
15111: LD_VAR 0 1
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 25
15122: PUSH
15123: LD_INT 3
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 24
15132: PUSH
15133: LD_INT 751
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: PPUSH
15145: CALL_OW 70
15149: PUSH
15150: LD_INT 0
15152: GREATER
15153: PUSH
15154: LD_INT 21
15156: PPUSH
15157: CALL_OW 302
15161: AND
15162: PUSH
15163: LD_INT 21
15165: PPUSH
15166: CALL_OW 255
15170: PUSH
15171: LD_INT 3
15173: EQUAL
15174: AND
15175: IFFALSE 15231
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_INT 22
15184: PUSH
15185: LD_VAR 0 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 25
15196: PUSH
15197: LD_INT 3
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 24
15206: PUSH
15207: LD_INT 751
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 70
15223: PPUSH
15224: LD_INT 21
15226: PPUSH
15227: CALL_OW 120
// end ;
15231: LD_VAR 0 5
15235: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
15236: LD_INT 0
15238: PPUSH
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
15243: LD_ADDR_VAR 0 6
15247: PUSH
15248: LD_INT 22
15250: PUSH
15251: LD_VAR 0 1
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 2
15262: PUSH
15263: LD_INT 30
15265: PUSH
15266: LD_INT 31
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 30
15275: PUSH
15276: LD_INT 32
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 30
15285: PUSH
15286: LD_INT 33
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 30
15295: PUSH
15296: LD_INT 4
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 30
15305: PUSH
15306: LD_INT 5
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15330: LD_ADDR_VAR 0 7
15334: PUSH
15335: LD_INT 22
15337: PUSH
15338: LD_VAR 0 2
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 21
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 58
15359: PUSH
15360: EMPTY
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: PPUSH
15368: CALL_OW 69
15372: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
15373: LD_VAR 0 6
15377: PUSH
15378: LD_INT 0
15380: GREATER
15381: PUSH
15382: LD_VAR 0 7
15386: PUSH
15387: LD_INT 0
15389: GREATER
15390: AND
15391: IFFALSE 15461
// begin for i in turretsList do
15393: LD_ADDR_VAR 0 4
15397: PUSH
15398: LD_VAR 0 6
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15459
// begin for j in enemyBuildings do
15406: LD_ADDR_VAR 0 5
15410: PUSH
15411: LD_VAR 0 7
15415: PUSH
15416: FOR_IN
15417: IFFALSE 15455
// begin if GetDistUnits ( i , j ) < 20 then
15419: LD_VAR 0 4
15423: PPUSH
15424: LD_VAR 0 5
15428: PPUSH
15429: CALL_OW 296
15433: PUSH
15434: LD_INT 20
15436: LESS
15437: IFFALSE 15453
// begin ComAttackUnit ( i , j ) ;
15439: LD_VAR 0 4
15443: PPUSH
15444: LD_VAR 0 5
15448: PPUSH
15449: CALL_OW 115
// end ; end ;
15453: GO 15416
15455: POP
15456: POP
// end ;
15457: GO 15403
15459: POP
15460: POP
// end ; end ;
15461: LD_VAR 0 3
15465: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
15473: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
15474: LD_ADDR_VAR 0 7
15478: PUSH
15479: LD_VAR 0 2
15483: PPUSH
15484: LD_INT 22
15486: PUSH
15487: LD_VAR 0 1
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 21
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 34
15508: PUSH
15509: LD_INT 52
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 70
15525: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15526: LD_ADDR_VAR 0 8
15530: PUSH
15531: LD_VAR 0 2
15535: PPUSH
15536: LD_INT 22
15538: PUSH
15539: LD_VAR 0 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 21
15550: PUSH
15551: LD_INT 3
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: LD_INT 24
15563: PUSH
15564: LD_INT 1000
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: PPUSH
15583: CALL_OW 70
15587: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
15588: LD_VAR 0 8
15592: PUSH
15593: LD_INT 0
15595: GREATER
15596: PUSH
15597: LD_VAR 0 7
15601: PPUSH
15602: LD_INT 24
15604: PUSH
15605: LD_INT 750
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PPUSH
15612: CALL_OW 72
15616: PUSH
15617: LD_INT 0
15619: GREATER
15620: AND
15621: IFFALSE 15641
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
15623: LD_VAR 0 7
15627: PPUSH
15628: LD_VAR 0 8
15632: PUSH
15633: LD_INT 1
15635: ARRAY
15636: PPUSH
15637: CALL_OW 130
// end ;
15641: LD_VAR 0 3
15645: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
15646: LD_INT 0
15648: PPUSH
15649: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15650: LD_INT 22
15652: PUSH
15653: LD_VAR 0 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 21
15664: PUSH
15665: LD_INT 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PPUSH
15676: CALL_OW 69
15680: PUSH
15681: LD_INT 18
15683: PPUSH
15684: LD_INT 22
15686: PUSH
15687: LD_VAR 0 1
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 70
15714: PUSH
15715: LD_VAR 0 3
15719: LESSEQUAL
15720: DIFF
15721: IFFALSE 15788
// for i = 1 to vehCount do
15723: LD_ADDR_VAR 0 9
15727: PUSH
15728: DOUBLE
15729: LD_INT 1
15731: DEC
15732: ST_TO_ADDR
15733: LD_VAR 0 3
15737: PUSH
15738: FOR_TO
15739: IFFALSE 15786
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
15741: LD_VAR 0 2
15745: PPUSH
15746: LD_VAR 0 7
15750: PPUSH
15751: LD_VAR 0 5
15755: PPUSH
15756: LD_VAR 0 6
15760: PPUSH
15761: LD_VAR 0 4
15765: PUSH
15766: LD_INT 1
15768: PPUSH
15769: LD_VAR 0 4
15773: PPUSH
15774: CALL_OW 12
15778: ARRAY
15779: PPUSH
15780: CALL_OW 185
15784: GO 15738
15786: POP
15787: POP
// end ;
15788: LD_VAR 0 8
15792: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
15793: LD_INT 0
15795: PPUSH
15796: PPUSH
15797: PPUSH
15798: PPUSH
15799: PPUSH
15800: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
15801: LD_EXP 40
15805: PUSH
15806: LD_INT 3
15808: PUSH
15809: LD_INT 4
15811: PUSH
15812: LD_INT 4
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: LIST
15819: PUSH
15820: LD_OWVAR 67
15824: ARRAY
15825: GREATEREQUAL
15826: PUSH
15827: LD_EXP 41
15831: PUSH
15832: LD_INT 1
15834: PUSH
15835: LD_INT 2
15837: PUSH
15838: LD_INT 2
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: LD_OWVAR 67
15850: ARRAY
15851: GREATEREQUAL
15852: AND
15853: IFFALSE 16086
// begin repeat wait ( 0 0$3 ) ;
15855: LD_INT 105
15857: PPUSH
15858: CALL_OW 67
// for j in russianTanks do
15862: LD_ADDR_VAR 0 4
15866: PUSH
15867: LD_EXP 40
15871: PUSH
15872: FOR_IN
15873: IFFALSE 16074
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
15875: LD_ADDR_VAR 0 6
15879: PUSH
15880: LD_INT 81
15882: PUSH
15883: LD_VAR 0 1
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 101
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: PPUSH
15911: LD_VAR 0 4
15915: PPUSH
15916: CALL_OW 74
15920: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
15921: LD_ADDR_VAR 0 7
15925: PUSH
15926: LD_INT 81
15928: PUSH
15929: LD_VAR 0 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 101
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: LD_INT 59
15953: PUSH
15954: EMPTY
15955: LIST
15956: PUSH
15957: LD_INT 21
15959: PUSH
15960: LD_INT 1
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 2
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: PPUSH
15996: LD_VAR 0 4
16000: PPUSH
16001: CALL_OW 74
16005: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
16006: LD_VAR 0 4
16010: PPUSH
16011: LD_VAR 0 6
16015: PPUSH
16016: CALL_OW 296
16020: PUSH
16021: LD_INT 8
16023: PLUS
16024: PUSH
16025: LD_VAR 0 4
16029: PPUSH
16030: LD_VAR 0 7
16034: PPUSH
16035: CALL_OW 296
16039: LESS
16040: IFFALSE 16058
// ComAttackUnit ( j , target1 ) else
16042: LD_VAR 0 4
16046: PPUSH
16047: LD_VAR 0 6
16051: PPUSH
16052: CALL_OW 115
16056: GO 16072
// ComAttackUnit ( j , target2 ) ;
16058: LD_VAR 0 4
16062: PPUSH
16063: LD_VAR 0 7
16067: PPUSH
16068: CALL_OW 115
// end ;
16072: GO 15872
16074: POP
16075: POP
// until russianTanks = 0 ;
16076: LD_EXP 40
16080: PUSH
16081: LD_INT 0
16083: EQUAL
16084: IFFALSE 15855
// end ; end ;
16086: LD_VAR 0 2
16090: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
16091: LD_INT 0
16093: PPUSH
16094: PPUSH
16095: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
16096: LD_EXP 40
16100: PUSH
16101: LD_INT 1
16103: GREATEREQUAL
16104: PUSH
16105: LD_EXP 41
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: LD_INT 2
16115: PUSH
16116: LD_INT 2
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: LIST
16123: PUSH
16124: LD_OWVAR 67
16128: ARRAY
16129: GREATEREQUAL
16130: AND
16131: IFFALSE 16281
// repeat wait ( 0 0$3 ) ;
16133: LD_INT 105
16135: PPUSH
16136: CALL_OW 67
// if russianTimeLapsers > 0 then
16140: LD_EXP 41
16144: PUSH
16145: LD_INT 0
16147: GREATER
16148: IFFALSE 16271
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_EXP 41
16159: PPUSH
16160: LD_INT 3
16162: PUSH
16163: LD_INT 60
16165: PUSH
16166: EMPTY
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PPUSH
16173: CALL_OW 72
16177: PUSH
16178: FOR_IN
16179: IFFALSE 16269
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_type , unit_human ] ] ) , j ) ;
16181: LD_ADDR_VAR 0 4
16185: PUSH
16186: LD_INT 81
16188: PUSH
16189: LD_VAR 0 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 101
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 21
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: CALL_OW 74
16237: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
16238: LD_VAR 0 3
16242: PPUSH
16243: LD_VAR 0 4
16247: PPUSH
16248: CALL_OW 250
16252: PPUSH
16253: LD_VAR 0 4
16257: PPUSH
16258: CALL_OW 251
16262: PPUSH
16263: CALL_OW 111
// end ;
16267: GO 16178
16269: POP
16270: POP
// until russianTimeLapsers = 0 ;
16271: LD_EXP 41
16275: PUSH
16276: LD_INT 0
16278: EQUAL
16279: IFFALSE 16133
// end ;
16281: LD_VAR 0 2
16285: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
16286: LD_INT 0
16288: PPUSH
16289: PPUSH
16290: PPUSH
16291: PPUSH
16292: PPUSH
16293: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
16294: LD_ADDR_VAR 0 6
16298: PUSH
16299: LD_INT 22
16301: PUSH
16302: LD_VAR 0 1
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 25
16313: PUSH
16314: LD_INT 9
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PPUSH
16325: CALL_OW 69
16329: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16330: LD_ADDR_VAR 0 7
16334: PUSH
16335: LD_INT 81
16337: PUSH
16338: LD_VAR 0 1
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 3
16349: PUSH
16350: LD_INT 21
16352: PUSH
16353: LD_INT 3
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PPUSH
16368: CALL_OW 69
16372: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
16373: LD_ADDR_VAR 0 4
16377: PUSH
16378: LD_INT 1
16380: PPUSH
16381: LD_INT 3
16383: PPUSH
16384: CALL_OW 12
16388: ST_TO_ADDR
// for i = 1 to list do
16389: LD_ADDR_VAR 0 5
16393: PUSH
16394: DOUBLE
16395: LD_INT 1
16397: DEC
16398: ST_TO_ADDR
16399: LD_VAR 0 6
16403: PUSH
16404: FOR_TO
16405: IFFALSE 16607
// for ta in filter do
16407: LD_ADDR_VAR 0 3
16411: PUSH
16412: LD_VAR 0 7
16416: PUSH
16417: FOR_IN
16418: IFFALSE 16603
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
16420: LD_VAR 0 6
16424: PUSH
16425: LD_VAR 0 5
16429: ARRAY
16430: PPUSH
16431: LD_VAR 0 3
16435: PPUSH
16436: CALL_OW 296
16440: PUSH
16441: LD_INT 15
16443: LESSEQUAL
16444: IFFALSE 16601
// begin case c of 1 :
16446: LD_VAR 0 4
16450: PUSH
16451: LD_INT 1
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16497
16459: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
16460: LD_VAR 0 6
16464: PUSH
16465: LD_VAR 0 5
16469: ARRAY
16470: PPUSH
16471: LD_VAR 0 3
16475: PPUSH
16476: CALL_OW 250
16480: PPUSH
16481: LD_VAR 0 3
16485: PPUSH
16486: CALL_OW 251
16490: PPUSH
16491: CALL_OW 154
16495: GO 16601
16497: LD_INT 2
16499: DOUBLE
16500: EQUAL
16501: IFTRUE 16505
16503: GO 16569
16505: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
16506: LD_VAR 0 6
16510: PUSH
16511: LD_VAR 0 5
16515: ARRAY
16516: PPUSH
16517: LD_VAR 0 3
16521: PPUSH
16522: CALL_OW 250
16526: PUSH
16527: LD_INT 1
16529: NEG
16530: PPUSH
16531: LD_INT 1
16533: PPUSH
16534: CALL_OW 12
16538: PLUS
16539: PPUSH
16540: LD_VAR 0 3
16544: PPUSH
16545: CALL_OW 251
16549: PUSH
16550: LD_INT 1
16552: NEG
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 12
16561: PLUS
16562: PPUSH
16563: CALL_OW 153
16567: GO 16601
16569: LD_INT 3
16571: DOUBLE
16572: EQUAL
16573: IFTRUE 16577
16575: GO 16600
16577: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
16578: LD_VAR 0 6
16582: PUSH
16583: LD_VAR 0 5
16587: ARRAY
16588: PPUSH
16589: LD_VAR 0 3
16593: PPUSH
16594: CALL_OW 115
16598: GO 16601
16600: POP
// end ; end ;
16601: GO 16417
16603: POP
16604: POP
16605: GO 16404
16607: POP
16608: POP
// end ;
16609: LD_VAR 0 2
16613: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
16614: LD_INT 0
16616: PPUSH
16617: PPUSH
16618: PPUSH
16619: PPUSH
// r := 100 ;
16620: LD_ADDR_VAR 0 5
16624: PUSH
16625: LD_INT 100
16627: ST_TO_ADDR
// x := 0 ;
16628: LD_ADDR_VAR 0 6
16632: PUSH
16633: LD_INT 0
16635: ST_TO_ADDR
// while ( x < n ) do
16636: LD_VAR 0 6
16640: PUSH
16641: LD_VAR 0 2
16645: LESS
16646: IFFALSE 16933
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
16648: LD_ADDR_VAR 0 4
16652: PUSH
16653: DOUBLE
16654: LD_INT 1
16656: DEC
16657: ST_TO_ADDR
16658: LD_VAR 0 1
16662: PPUSH
16663: LD_INT 0
16665: PPUSH
16666: CALL_OW 517
16670: PUSH
16671: LD_INT 1
16673: ARRAY
16674: PUSH
16675: FOR_TO
16676: IFFALSE 16929
// begin if r > 50 then
16678: LD_VAR 0 5
16682: PUSH
16683: LD_INT 50
16685: GREATER
16686: IFFALSE 16905
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
16688: LD_VAR 0 1
16692: PPUSH
16693: LD_INT 0
16695: PPUSH
16696: CALL_OW 517
16700: PUSH
16701: LD_INT 1
16703: ARRAY
16704: PUSH
16705: LD_VAR 0 4
16709: ARRAY
16710: PPUSH
16711: LD_VAR 0 1
16715: PPUSH
16716: LD_INT 0
16718: PPUSH
16719: CALL_OW 517
16723: PUSH
16724: LD_INT 2
16726: ARRAY
16727: PUSH
16728: LD_VAR 0 4
16732: ARRAY
16733: PPUSH
16734: CALL_OW 458
16738: NOT
16739: IFFALSE 16889
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
16741: LD_VAR 0 1
16745: PPUSH
16746: LD_INT 0
16748: PPUSH
16749: CALL_OW 517
16753: PUSH
16754: LD_INT 1
16756: ARRAY
16757: PUSH
16758: LD_VAR 0 4
16762: ARRAY
16763: PPUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: LD_INT 0
16771: PPUSH
16772: CALL_OW 517
16776: PUSH
16777: LD_INT 2
16779: ARRAY
16780: PUSH
16781: LD_VAR 0 4
16785: ARRAY
16786: PPUSH
16787: LD_INT 8
16789: PPUSH
16790: LD_INT 0
16792: PPUSH
16793: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
16797: LD_ADDR_EXP 45
16801: PUSH
16802: LD_EXP 45
16806: PPUSH
16807: LD_INT 1
16809: PPUSH
16810: LD_VAR 0 1
16814: PPUSH
16815: LD_INT 0
16817: PPUSH
16818: CALL_OW 517
16822: PUSH
16823: LD_INT 1
16825: ARRAY
16826: PUSH
16827: LD_VAR 0 4
16831: ARRAY
16832: PUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: LD_INT 0
16840: PPUSH
16841: CALL_OW 517
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PUSH
16850: LD_VAR 0 4
16854: ARRAY
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 2
16864: ST_TO_ADDR
// r := 0 ;
16865: LD_ADDR_VAR 0 5
16869: PUSH
16870: LD_INT 0
16872: ST_TO_ADDR
// x := x + 1 ;
16873: LD_ADDR_VAR 0 6
16877: PUSH
16878: LD_VAR 0 6
16882: PUSH
16883: LD_INT 1
16885: PLUS
16886: ST_TO_ADDR
// end else
16887: GO 16903
// r := r + 35 ;
16889: LD_ADDR_VAR 0 5
16893: PUSH
16894: LD_VAR 0 5
16898: PUSH
16899: LD_INT 35
16901: PLUS
16902: ST_TO_ADDR
// end else
16903: GO 16927
// r := r + rand ( 10 , 25 ) ;
16905: LD_ADDR_VAR 0 5
16909: PUSH
16910: LD_VAR 0 5
16914: PUSH
16915: LD_INT 10
16917: PPUSH
16918: LD_INT 25
16920: PPUSH
16921: CALL_OW 12
16925: PLUS
16926: ST_TO_ADDR
// end ;
16927: GO 16675
16929: POP
16930: POP
16931: GO 16636
// end ;
16933: LD_VAR 0 3
16937: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
16938: LD_INT 0
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
// tmpTab = [ ] ;
16944: LD_ADDR_VAR 0 6
16948: PUSH
16949: EMPTY
16950: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
16951: LD_INT 22
16953: PUSH
16954: LD_VAR 0 1
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 30
16965: PUSH
16966: LD_INT 32
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PPUSH
16977: CALL_OW 69
16981: PUSH
16982: LD_INT 0
16984: GREATER
16985: IFFALSE 17068
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
16987: LD_ADDR_VAR 0 4
16991: PUSH
16992: LD_INT 22
16994: PUSH
16995: LD_VAR 0 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 30
17006: PUSH
17007: LD_INT 32
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 69
17022: PUSH
17023: FOR_IN
17024: IFFALSE 17066
// begin for j in UnitsInside ( i ) do
17026: LD_ADDR_VAR 0 5
17030: PUSH
17031: LD_VAR 0 4
17035: PPUSH
17036: CALL_OW 313
17040: PUSH
17041: FOR_IN
17042: IFFALSE 17062
// tmpTab = tmpTab ^ j ;
17044: LD_ADDR_VAR 0 6
17048: PUSH
17049: LD_VAR 0 6
17053: PUSH
17054: LD_VAR 0 5
17058: ADD
17059: ST_TO_ADDR
17060: GO 17041
17062: POP
17063: POP
// end ;
17064: GO 17023
17066: POP
17067: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
17068: LD_VAR 0 6
17072: PPUSH
17073: LD_VAR 0 2
17077: PPUSH
17078: CALL_OW 250
17082: PPUSH
17083: LD_VAR 0 2
17087: PPUSH
17088: CALL_OW 251
17092: PPUSH
17093: CALL_OW 114
// end ;
17097: LD_VAR 0 3
17101: RET
// export function PrepareNature ; var i , un ; begin
17102: LD_INT 0
17104: PPUSH
17105: PPUSH
17106: PPUSH
// uc_side := 0 ;
17107: LD_ADDR_OWVAR 20
17111: PUSH
17112: LD_INT 0
17114: ST_TO_ADDR
// uc_nation := 0 ;
17115: LD_ADDR_OWVAR 21
17119: PUSH
17120: LD_INT 0
17122: ST_TO_ADDR
// InitHc ;
17123: CALL_OW 19
// hc_class := class_fish ;
17127: LD_ADDR_OWVAR 28
17131: PUSH
17132: LD_INT 20
17134: ST_TO_ADDR
// for i = 1 to 6 do
17135: LD_ADDR_VAR 0 2
17139: PUSH
17140: DOUBLE
17141: LD_INT 1
17143: DEC
17144: ST_TO_ADDR
17145: LD_INT 6
17147: PUSH
17148: FOR_TO
17149: IFFALSE 17168
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
17151: CALL_OW 44
17155: PPUSH
17156: LD_INT 23
17158: PPUSH
17159: LD_INT 0
17161: PPUSH
17162: CALL_OW 49
17166: GO 17148
17168: POP
17169: POP
// for i = 1 to Difficulty + 2 do
17170: LD_ADDR_VAR 0 2
17174: PUSH
17175: DOUBLE
17176: LD_INT 1
17178: DEC
17179: ST_TO_ADDR
17180: LD_OWVAR 67
17184: PUSH
17185: LD_INT 2
17187: PLUS
17188: PUSH
17189: FOR_TO
17190: IFFALSE 17299
// begin hc_sex = sex_male ;
17192: LD_ADDR_OWVAR 27
17196: PUSH
17197: LD_INT 1
17199: ST_TO_ADDR
// uc_side = 0 ;
17200: LD_ADDR_OWVAR 20
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// uc_nation = nation_nature ;
17208: LD_ADDR_OWVAR 21
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// hc_class = class_tiger ;
17216: LD_ADDR_OWVAR 28
17220: PUSH
17221: LD_INT 14
17223: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17224: LD_ADDR_OWVAR 31
17228: PUSH
17229: LD_EXP 38
17233: PUSH
17234: LD_INT 0
17236: PUSH
17237: LD_INT 0
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
17249: LD_ADDR_OWVAR 35
17253: PUSH
17254: LD_INT 5
17256: NEG
17257: PPUSH
17258: LD_INT 5
17260: PPUSH
17261: CALL_OW 12
17265: PUSH
17266: LD_OWVAR 67
17270: MUL
17271: ST_TO_ADDR
// un = CreateHuman ;
17272: LD_ADDR_VAR 0 3
17276: PUSH
17277: CALL_OW 44
17281: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17282: LD_VAR 0 3
17286: PPUSH
17287: LD_INT 24
17289: PPUSH
17290: LD_INT 0
17292: PPUSH
17293: CALL_OW 49
// end ;
17297: GO 17189
17299: POP
17300: POP
// for i = 1 to rand ( 3 , 4 ) do
17301: LD_ADDR_VAR 0 2
17305: PUSH
17306: DOUBLE
17307: LD_INT 1
17309: DEC
17310: ST_TO_ADDR
17311: LD_INT 3
17313: PPUSH
17314: LD_INT 4
17316: PPUSH
17317: CALL_OW 12
17321: PUSH
17322: FOR_TO
17323: IFFALSE 17415
// begin hc_sex = sex_male ;
17325: LD_ADDR_OWVAR 27
17329: PUSH
17330: LD_INT 1
17332: ST_TO_ADDR
// uc_side = 0 ;
17333: LD_ADDR_OWVAR 20
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
// uc_nation = nation_nature ;
17341: LD_ADDR_OWVAR 21
17345: PUSH
17346: LD_INT 0
17348: ST_TO_ADDR
// hc_class = 18 ;
17349: LD_ADDR_OWVAR 28
17353: PUSH
17354: LD_INT 18
17356: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
17357: LD_ADDR_OWVAR 31
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: ST_TO_ADDR
// hc_agressivity = 0 ;
17380: LD_ADDR_OWVAR 35
17384: PUSH
17385: LD_INT 0
17387: ST_TO_ADDR
// un = CreateHuman ;
17388: LD_ADDR_VAR 0 3
17392: PUSH
17393: CALL_OW 44
17397: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17398: LD_VAR 0 3
17402: PPUSH
17403: LD_INT 24
17405: PPUSH
17406: LD_INT 0
17408: PPUSH
17409: CALL_OW 49
// end ;
17413: GO 17322
17415: POP
17416: POP
// for i = 1 to rand ( 1 , 3 ) do
17417: LD_ADDR_VAR 0 2
17421: PUSH
17422: DOUBLE
17423: LD_INT 1
17425: DEC
17426: ST_TO_ADDR
17427: LD_INT 1
17429: PPUSH
17430: LD_INT 3
17432: PPUSH
17433: CALL_OW 12
17437: PUSH
17438: FOR_TO
17439: IFFALSE 17587
// begin hc_sex = sex_male ;
17441: LD_ADDR_OWVAR 27
17445: PUSH
17446: LD_INT 1
17448: ST_TO_ADDR
// uc_side = 0 ;
17449: LD_ADDR_OWVAR 20
17453: PUSH
17454: LD_INT 0
17456: ST_TO_ADDR
// uc_nation = nation_nature ;
17457: LD_ADDR_OWVAR 21
17461: PUSH
17462: LD_INT 0
17464: ST_TO_ADDR
// hc_class = class_apeman ;
17465: LD_ADDR_OWVAR 28
17469: PUSH
17470: LD_INT 12
17472: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
17473: LD_ADDR_OWVAR 31
17477: PUSH
17478: LD_EXP 37
17482: PPUSH
17483: LD_EXP 38
17487: PPUSH
17488: CALL_OW 12
17492: PUSH
17493: LD_EXP 37
17497: PPUSH
17498: LD_EXP 38
17502: PPUSH
17503: CALL_OW 12
17507: PUSH
17508: LD_EXP 37
17512: PPUSH
17513: LD_EXP 38
17517: PPUSH
17518: CALL_OW 12
17522: PUSH
17523: LD_EXP 37
17527: PPUSH
17528: LD_EXP 38
17532: PPUSH
17533: CALL_OW 12
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
17544: LD_ADDR_OWVAR 35
17548: PUSH
17549: LD_INT 1
17551: PPUSH
17552: LD_INT 20
17554: PPUSH
17555: CALL_OW 12
17559: ST_TO_ADDR
// un = CreateHuman ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: CALL_OW 44
17569: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17570: LD_VAR 0 3
17574: PPUSH
17575: LD_INT 24
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: CALL_OW 49
// end ;
17585: GO 17438
17587: POP
17588: POP
// end ; end_of_file
17589: LD_VAR 0 1
17593: RET
// on UnitDestroyed ( unit ) do var i ;
17594: LD_INT 0
17596: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17597: LD_VAR 0 1
17601: PPUSH
17602: CALL_OW 255
17606: PUSH
17607: LD_INT 3
17609: EQUAL
17610: PUSH
17611: LD_VAR 0 1
17615: PPUSH
17616: CALL_OW 247
17620: PUSH
17621: LD_INT 1
17623: EQUAL
17624: AND
17625: IFFALSE 17689
// begin for i in RuScientists do
17627: LD_ADDR_VAR 0 2
17631: PUSH
17632: LD_EXP 35
17636: PUSH
17637: FOR_IN
17638: IFFALSE 17687
// if i = unit then
17640: LD_VAR 0 2
17644: PUSH
17645: LD_VAR 0 1
17649: EQUAL
17650: IFFALSE 17685
// begin RuScientists = RuScientists diff [ unit ] ;
17652: LD_ADDR_EXP 35
17656: PUSH
17657: LD_EXP 35
17661: PUSH
17662: LD_VAR 0 1
17666: PUSH
17667: EMPTY
17668: LIST
17669: DIFF
17670: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
17671: LD_ADDR_EXP 36
17675: PUSH
17676: LD_EXP 36
17680: PUSH
17681: LD_INT 1
17683: PLUS
17684: ST_TO_ADDR
// end ;
17685: GO 17637
17687: POP
17688: POP
// end ; end ;
17689: PPOPN 2
17691: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
17692: LD_VAR 0 1
17696: PUSH
17697: LD_INT 10
17699: EQUAL
17700: PUSH
17701: LD_VAR 0 2
17705: PPUSH
17706: CALL_OW 255
17710: PUSH
17711: LD_INT 1
17713: EQUAL
17714: AND
17715: PUSH
17716: LD_EXP 48
17720: PUSH
17721: LD_INT 0
17723: EQUAL
17724: AND
17725: IFFALSE 17837
// begin eventVar1 = 1 ;
17727: LD_ADDR_EXP 48
17731: PUSH
17732: LD_INT 1
17734: ST_TO_ADDR
// teleportExplored = 1 ;
17735: LD_ADDR_EXP 34
17739: PUSH
17740: LD_INT 1
17742: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
17743: LD_STRING M2a
17745: PPUSH
17746: CALL_OW 337
// wait ( 0 0$2 ) ;
17750: LD_INT 70
17752: PPUSH
17753: CALL_OW 67
// DialogueOn ;
17757: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
17761: LD_INT 22
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 21
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PPUSH
17785: CALL_OW 69
17789: PPUSH
17790: LD_STRING DT3a-Sol1-1
17792: PPUSH
17793: LD_STRING DT3a-FSol1-1
17795: PPUSH
17796: CALL 13229 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
17800: LD_EXP 1
17804: PPUSH
17805: LD_STRING DT3a-JMM-1
17807: PPUSH
17808: CALL_OW 88
// CenterNowOnUnits ( human ) ;
17812: LD_VAR 0 2
17816: PPUSH
17817: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
17821: LD_EXP 1
17825: PPUSH
17826: LD_STRING DT3a-JMM-1a
17828: PPUSH
17829: CALL_OW 88
// DialogueOff ;
17833: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
17837: LD_VAR 0 1
17841: PUSH
17842: LD_INT 10
17844: EQUAL
17845: PUSH
17846: LD_VAR 0 2
17850: PPUSH
17851: CALL_OW 247
17855: PUSH
17856: LD_INT 2
17858: EQUAL
17859: AND
17860: PUSH
17861: LD_VAR 0 2
17865: PPUSH
17866: CALL_OW 255
17870: PUSH
17871: LD_INT 3
17873: EQUAL
17874: AND
17875: PUSH
17876: LD_EXP 29
17880: PUSH
17881: LD_INT 0
17883: EQUAL
17884: AND
17885: IFFALSE 17902
// begin wait ( 0 0$3 ) ;
17887: LD_INT 105
17889: PPUSH
17890: CALL_OW 67
// vehicleTeleported = 1 ;
17894: LD_ADDR_EXP 29
17898: PUSH
17899: LD_INT 1
17901: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 10
17909: EQUAL
17910: PUSH
17911: LD_VAR 0 2
17915: PPUSH
17916: CALL_OW 247
17920: PUSH
17921: LD_INT 2
17923: EQUAL
17924: AND
17925: PUSH
17926: LD_VAR 0 2
17930: PPUSH
17931: CALL_OW 255
17935: PUSH
17936: LD_INT 3
17938: EQUAL
17939: AND
17940: PUSH
17941: LD_EXP 29
17945: PUSH
17946: LD_INT 2
17948: EQUAL
17949: AND
17950: IFFALSE 17967
// begin wait ( 0 0$3 ) ;
17952: LD_INT 105
17954: PPUSH
17955: CALL_OW 67
// vehicleTeleported = 3 ;
17959: LD_ADDR_EXP 29
17963: PUSH
17964: LD_INT 3
17966: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
17967: LD_VAR 0 1
17971: PUSH
17972: LD_INT 10
17974: EQUAL
17975: PUSH
17976: LD_VAR 0 2
17980: PPUSH
17981: CALL_OW 247
17985: PUSH
17986: LD_INT 2
17988: EQUAL
17989: AND
17990: PUSH
17991: LD_VAR 0 2
17995: PPUSH
17996: CALL_OW 255
18000: PUSH
18001: LD_INT 3
18003: EQUAL
18004: AND
18005: IFFALSE 18021
// tpCounter = tpCounter + 1 ;
18007: LD_ADDR_EXP 30
18011: PUSH
18012: LD_EXP 30
18016: PUSH
18017: LD_INT 1
18019: PLUS
18020: ST_TO_ADDR
// end ;
18021: PPOPN 2
18023: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
18024: LD_VAR 0 2
18028: PUSH
18029: LD_INT 21
18031: EQUAL
18032: PUSH
18033: LD_VAR 0 2
18037: PUSH
18038: LD_INT 112
18040: EQUAL
18041: OR
18042: IFFALSE 18220
// if GetSide ( vehicle ) = 3 then
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL_OW 255
18053: PUSH
18054: LD_INT 3
18056: EQUAL
18057: IFFALSE 18220
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 264
18068: PUSH
18069: LD_INT 46
18071: EQUAL
18072: PUSH
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 264
18082: PUSH
18083: LD_INT 45
18085: EQUAL
18086: OR
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 264
18097: PUSH
18098: LD_INT 44
18100: EQUAL
18101: OR
18102: IFFALSE 18177
// begin russianTanks = russianTanks ^ vehicle ;
18104: LD_ADDR_EXP 40
18108: PUSH
18109: LD_EXP 40
18113: PUSH
18114: LD_VAR 0 1
18118: ADD
18119: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
18120: LD_EXP 44
18124: PUSH
18125: LD_INT 1
18127: EQUAL
18128: PUSH
18129: LD_EXP 44
18133: PUSH
18134: LD_INT 0
18136: EQUAL
18137: OR
18138: IFFALSE 18152
// ComEnterUnit ( vehicle , ruteleprt ) ;
18140: LD_VAR 0 1
18144: PPUSH
18145: LD_INT 10
18147: PPUSH
18148: CALL_OW 120
// if attackTactic = 2 then
18152: LD_EXP 44
18156: PUSH
18157: LD_INT 2
18159: EQUAL
18160: IFFALSE 18177
// ComMoveXY ( vehicle , 88 , 69 ) ;
18162: LD_VAR 0 1
18166: PPUSH
18167: LD_INT 88
18169: PPUSH
18170: LD_INT 69
18172: PPUSH
18173: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
18177: LD_VAR 0 1
18181: PPUSH
18182: CALL_OW 264
18186: PUSH
18187: LD_INT 49
18189: EQUAL
18190: IFFALSE 18220
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
18192: LD_ADDR_EXP 41
18196: PUSH
18197: LD_EXP 41
18201: PUSH
18202: LD_VAR 0 1
18206: ADD
18207: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
18208: LD_VAR 0 1
18212: PPUSH
18213: LD_INT 137
18215: PPUSH
18216: CALL_OW 120
// end ; end ; end ;
18220: PPOPN 2
18222: END
// on UnitGoesToRed ( unit ) do var i ;
18223: LD_INT 0
18225: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 255
18235: PUSH
18236: LD_INT 3
18238: EQUAL
18239: PUSH
18240: LD_VAR 0 1
18244: PPUSH
18245: CALL_OW 247
18249: PUSH
18250: LD_INT 2
18252: EQUAL
18253: AND
18254: IFFALSE 18372
// begin if russianTanks > 0 then
18256: LD_EXP 40
18260: PUSH
18261: LD_INT 0
18263: GREATER
18264: IFFALSE 18314
// for i in russianTanks do
18266: LD_ADDR_VAR 0 2
18270: PUSH
18271: LD_EXP 40
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18312
// if i = unit then
18279: LD_VAR 0 2
18283: PUSH
18284: LD_VAR 0 1
18288: EQUAL
18289: IFFALSE 18310
// russianTanks = russianTanks diff [ unit ] ;
18291: LD_ADDR_EXP 40
18295: PUSH
18296: LD_EXP 40
18300: PUSH
18301: LD_VAR 0 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: DIFF
18309: ST_TO_ADDR
18310: GO 18276
18312: POP
18313: POP
// if russianTimeLapsers > 0 then
18314: LD_EXP 41
18318: PUSH
18319: LD_INT 0
18321: GREATER
18322: IFFALSE 18372
// for i in russianTimeLapsers do
18324: LD_ADDR_VAR 0 2
18328: PUSH
18329: LD_EXP 41
18333: PUSH
18334: FOR_IN
18335: IFFALSE 18370
// if i = unit then
18337: LD_VAR 0 2
18341: PUSH
18342: LD_VAR 0 1
18346: EQUAL
18347: IFFALSE 18368
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
18349: LD_ADDR_EXP 41
18353: PUSH
18354: LD_EXP 41
18358: PUSH
18359: LD_VAR 0 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: DIFF
18367: ST_TO_ADDR
18368: GO 18334
18370: POP
18371: POP
// end ; end ;
18372: PPOPN 2
18374: END
// on LeaveVehicle ( vehicle , human ) do var i ;
18375: LD_INT 0
18377: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
18378: LD_VAR 0 2
18382: PPUSH
18383: CALL_OW 255
18387: PUSH
18388: LD_INT 3
18390: EQUAL
18391: PUSH
18392: LD_VAR 0 2
18396: PPUSH
18397: CALL_OW 257
18401: PUSH
18402: LD_INT 3
18404: EQUAL
18405: AND
18406: PUSH
18407: LD_INT 21
18409: PPUSH
18410: CALL_OW 255
18414: PUSH
18415: LD_INT 3
18417: EQUAL
18418: AND
18419: PUSH
18420: LD_INT 21
18422: PPUSH
18423: CALL_OW 302
18427: AND
18428: IFFALSE 18442
// ComEnterUnit ( human , ru_fact ) ;
18430: LD_VAR 0 2
18434: PPUSH
18435: LD_INT 21
18437: PPUSH
18438: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
18442: LD_VAR 0 2
18446: PPUSH
18447: CALL_OW 257
18451: PUSH
18452: LD_INT 4
18454: EQUAL
18455: PUSH
18456: LD_VAR 0 2
18460: PPUSH
18461: CALL_OW 255
18465: PUSH
18466: LD_INT 3
18468: EQUAL
18469: AND
18470: PUSH
18471: LD_EXP 42
18475: PUSH
18476: LD_INT 0
18478: EQUAL
18479: AND
18480: IFFALSE 18542
// for i in RuScientists do
18482: LD_ADDR_VAR 0 3
18486: PUSH
18487: LD_EXP 35
18491: PUSH
18492: FOR_IN
18493: IFFALSE 18540
// if i = human then
18495: LD_VAR 0 3
18499: PUSH
18500: LD_VAR 0 2
18504: EQUAL
18505: IFFALSE 18538
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18507: LD_VAR 0 3
18511: PPUSH
18512: LD_INT 13
18514: PUSH
18515: LD_INT 14
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PPUSH
18525: LD_INT 2
18527: PPUSH
18528: CALL_OW 12
18532: ARRAY
18533: PPUSH
18534: CALL_OW 113
18538: GO 18492
18540: POP
18541: POP
// end ;
18542: PPOPN 3
18544: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
18545: LD_INT 0
18547: PPUSH
18548: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
18549: LD_VAR 0 2
18553: PPUSH
18554: CALL_OW 255
18558: PUSH
18559: LD_INT 3
18561: EQUAL
18562: PUSH
18563: LD_VAR 0 2
18567: PPUSH
18568: CALL_OW 257
18572: PUSH
18573: LD_INT 4
18575: EQUAL
18576: AND
18577: IFFALSE 18719
// for i in RuScientists do
18579: LD_ADDR_VAR 0 3
18583: PUSH
18584: LD_EXP 35
18588: PUSH
18589: FOR_IN
18590: IFFALSE 18717
// if i = human then
18592: LD_VAR 0 3
18596: PUSH
18597: LD_VAR 0 2
18601: EQUAL
18602: IFFALSE 18715
// if IsOk ( rutp ) then
18604: LD_INT 137
18606: PPUSH
18607: CALL_OW 302
18611: IFFALSE 18684
// begin rnd = rand ( 1 , 2 ) ;
18613: LD_ADDR_VAR 0 4
18617: PUSH
18618: LD_INT 1
18620: PPUSH
18621: LD_INT 2
18623: PPUSH
18624: CALL_OW 12
18628: ST_TO_ADDR
// if rnd = 1 then
18629: LD_VAR 0 4
18633: PUSH
18634: LD_INT 1
18636: EQUAL
18637: IFFALSE 18651
// ComEnterUnit ( vehicle , rutp ) ;
18639: LD_VAR 0 1
18643: PPUSH
18644: LD_INT 137
18646: PPUSH
18647: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_INT 13
18658: PUSH
18659: LD_INT 14
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: PPUSH
18669: LD_INT 2
18671: PPUSH
18672: CALL_OW 12
18676: ARRAY
18677: PPUSH
18678: CALL_OW 173
// end else
18682: GO 18715
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
18684: LD_VAR 0 1
18688: PPUSH
18689: LD_INT 13
18691: PUSH
18692: LD_INT 14
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: PPUSH
18702: LD_INT 2
18704: PPUSH
18705: CALL_OW 12
18709: ARRAY
18710: PPUSH
18711: CALL_OW 113
// end ;
18715: GO 18589
18717: POP
18718: POP
// end ; end_of_file
18719: PPOPN 4
18721: END
// every 0 0$1 trigger ruAI = 1 do
18722: LD_EXP 42
18726: PUSH
18727: LD_INT 1
18729: EQUAL
18730: IFFALSE 18859
18732: GO 18734
18734: DISABLE
// begin enable ;
18735: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
18736: LD_INT 3
18738: PPUSH
18739: LD_INT 6
18741: PPUSH
18742: LD_INT 9
18744: PPUSH
18745: LD_EXP 39
18749: PPUSH
18750: CALL 14265 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
18754: LD_INT 3
18756: PPUSH
18757: LD_INT 4
18759: PPUSH
18760: LD_INT 10
18762: PPUSH
18763: LD_EXP 39
18767: PPUSH
18768: CALL 14265 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
18772: LD_INT 3
18774: PPUSH
18775: LD_INT 9
18777: PPUSH
18778: CALL 15466 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
18782: LD_INT 3
18784: PPUSH
18785: LD_INT 10
18787: PPUSH
18788: CALL 15466 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
18792: LD_INT 3
18794: PPUSH
18795: LD_INT 16
18797: PPUSH
18798: LD_INT 9
18800: PPUSH
18801: LD_INT 91
18803: PPUSH
18804: CALL 14656 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
18808: LD_INT 3
18810: PPUSH
18811: LD_INT 17
18813: PPUSH
18814: LD_INT 10
18816: PPUSH
18817: LD_INT 47
18819: PUSH
18820: LD_INT 129
18822: PUSH
18823: LD_INT 135
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: PPUSH
18831: CALL 14656 0 4
// AttackVehicles ( 3 ) ;
18835: LD_INT 3
18837: PPUSH
18838: CALL 15793 0 1
// IntBazooka ( 3 ) ;
18842: LD_INT 3
18844: PPUSH
18845: CALL 16286 0 1
// AttackNearBuildings ( 3 , 1 ) ;
18849: LD_INT 3
18851: PPUSH
18852: LD_INT 1
18854: PPUSH
18855: CALL 15236 0 2
// end ;
18859: END
// every 0 0$1 do
18860: GO 18862
18862: DISABLE
// begin enable ;
18863: ENABLE
// TimeLapsersAI ( 3 ) ;
18864: LD_INT 3
18866: PPUSH
18867: CALL 16091 0 1
// end ;
18871: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
18872: LD_INT 4
18874: PPUSH
18875: CALL_OW 303
18879: IFFALSE 18894
18881: GO 18883
18883: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
18884: LD_INT 3
18886: PPUSH
18887: LD_INT 4
18889: PPUSH
18890: CALL 16938 0 2
18894: END
// every 0 0$1 do
18895: GO 18897
18897: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
18898: LD_INT 3
18900: PPUSH
18901: LD_INT 91
18903: PPUSH
18904: LD_INT 3
18906: PPUSH
18907: CALL 14024 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
18911: LD_INT 3
18913: PPUSH
18914: LD_INT 47
18916: PPUSH
18917: LD_INT 3
18919: PPUSH
18920: CALL 14024 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
18924: LD_INT 3
18926: PPUSH
18927: LD_INT 129
18929: PPUSH
18930: LD_INT 3
18932: PPUSH
18933: CALL 14024 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
18937: LD_INT 3
18939: PPUSH
18940: LD_INT 3
18942: PPUSH
18943: LD_INT 3
18945: PPUSH
18946: CALL 14024 0 3
// end ;
18950: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
18951: LD_EXP 28
18955: PUSH
18956: LD_INT 2
18958: EQUAL
18959: PUSH
18960: LD_INT 21
18962: PPUSH
18963: CALL_OW 255
18967: PUSH
18968: LD_INT 3
18970: EQUAL
18971: AND
18972: PUSH
18973: LD_INT 112
18975: PPUSH
18976: CALL_OW 255
18980: PUSH
18981: LD_INT 3
18983: EQUAL
18984: AND
18985: PUSH
18986: LD_INT 21
18988: PPUSH
18989: CALL_OW 302
18993: AND
18994: PUSH
18995: LD_INT 112
18997: PPUSH
18998: CALL_OW 302
19002: AND
19003: PUSH
19004: LD_INT 22
19006: PUSH
19007: LD_INT 3
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 50
19026: PUSH
19027: EMPTY
19028: LIST
19029: PUSH
19030: LD_INT 3
19032: PUSH
19033: LD_INT 58
19035: PUSH
19036: EMPTY
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: PPUSH
19049: CALL_OW 69
19053: PUSH
19054: LD_INT 18
19056: PPUSH
19057: LD_INT 22
19059: PUSH
19060: LD_INT 3
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 21
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PPUSH
19081: CALL_OW 70
19085: PUSH
19086: LD_INT 0
19088: EQUAL
19089: DIFF
19090: AND
19091: IFFALSE 19209
19093: GO 19095
19095: DISABLE
// begin enable ;
19096: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
19097: LD_INT 3
19099: PPUSH
19100: LD_INT 21
19102: PPUSH
19103: LD_INT 3
19105: PUSH
19106: LD_INT 4
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: PUSH
19117: LD_OWVAR 67
19121: ARRAY
19122: PPUSH
19123: LD_INT 46
19125: PUSH
19126: LD_INT 45
19128: PUSH
19129: LD_INT 44
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: LIST
19136: PPUSH
19137: LD_INT 3
19139: PPUSH
19140: LD_INT 3
19142: PPUSH
19143: LD_INT 24
19145: PPUSH
19146: CALL 15646 0 7
// if russianTimeLapsers = 0 then
19150: LD_EXP 41
19154: PUSH
19155: LD_INT 0
19157: EQUAL
19158: IFFALSE 19209
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
19160: LD_INT 3
19162: PPUSH
19163: LD_INT 112
19165: PPUSH
19166: LD_INT 1
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: LD_INT 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: LIST
19179: PUSH
19180: LD_OWVAR 67
19184: ARRAY
19185: PPUSH
19186: LD_INT 49
19188: PUSH
19189: LD_INT 49
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PPUSH
19196: LD_INT 3
19198: PPUSH
19199: LD_INT 3
19201: PPUSH
19202: LD_INT 24
19204: PPUSH
19205: CALL 15646 0 7
// end ;
19209: END
// every 0 0$1 trigger arabianMines do var i ;
19210: LD_EXP 45
19214: IFFALSE 19335
19216: GO 19218
19218: DISABLE
19219: LD_INT 0
19221: PPUSH
// begin enable ;
19222: ENABLE
// for i in arabianMines do
19223: LD_ADDR_VAR 0 1
19227: PUSH
19228: LD_EXP 45
19232: PUSH
19233: FOR_IN
19234: IFFALSE 19333
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
19236: LD_INT 22
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 92
19248: PUSH
19249: LD_VAR 0 1
19253: PUSH
19254: LD_INT 1
19256: ARRAY
19257: PUSH
19258: LD_VAR 0 1
19262: PUSH
19263: LD_INT 2
19265: ARRAY
19266: PUSH
19267: LD_INT 3
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PPUSH
19280: CALL_OW 69
19284: IFFALSE 19331
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
19286: LD_VAR 0 1
19290: PUSH
19291: LD_INT 1
19293: ARRAY
19294: PPUSH
19295: LD_VAR 0 1
19299: PUSH
19300: LD_INT 2
19302: ARRAY
19303: PPUSH
19304: LD_INT 5
19306: PPUSH
19307: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
19311: LD_ADDR_EXP 45
19315: PUSH
19316: LD_EXP 45
19320: PPUSH
19321: LD_VAR 0 1
19325: PPUSH
19326: CALL_OW 3
19330: ST_TO_ADDR
// end ; end ;
19331: GO 19233
19333: POP
19334: POP
// end ;
19335: PPOPN 1
19337: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
19338: LD_EXP 29
19342: PUSH
19343: LD_INT 4
19345: EQUAL
19346: PUSH
19347: LD_EXP 30
19351: PUSH
19352: LD_INT 6
19354: PUSH
19355: LD_INT 8
19357: PUSH
19358: LD_INT 8
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: PUSH
19366: LD_OWVAR 67
19370: ARRAY
19371: EQUAL
19372: AND
19373: IFFALSE 19391
19375: GO 19377
19377: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
19378: LD_INT 10
19380: PPUSH
19381: LD_INT 47
19383: PPUSH
19384: LD_INT 82
19386: PPUSH
19387: CALL_OW 243
19391: END
// every 2 2$0 trigger vehicleTeleported = 4 do
19392: LD_EXP 29
19396: PUSH
19397: LD_INT 4
19399: EQUAL
19400: IFFALSE 19422
19402: GO 19404
19404: DISABLE
// begin enable ;
19405: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
19406: LD_ADDR_EXP 44
19410: PUSH
19411: LD_INT 1
19413: PPUSH
19414: LD_INT 2
19416: PPUSH
19417: CALL_OW 12
19421: ST_TO_ADDR
// end ; end_of_file
19422: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
19423: LD_EXP 35
19427: PUSH
19428: EMPTY
19429: EQUAL
19430: PUSH
19431: LD_INT 3
19433: PPUSH
19434: CALL_OW 301
19438: AND
19439: IFFALSE 19644
19441: GO 19443
19443: DISABLE
// begin if sciCounter = 0 then
19444: LD_EXP 36
19448: PUSH
19449: LD_INT 0
19451: EQUAL
19452: IFFALSE 19478
// begin Say ( JMM , D7a-JMM-1 ) ;
19454: LD_EXP 1
19458: PPUSH
19459: LD_STRING D7a-JMM-1
19461: PPUSH
19462: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
19466: LD_EXP 22
19470: PPUSH
19471: LD_STRING D7a-Pow-1
19473: PPUSH
19474: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
19478: LD_EXP 36
19482: PUSH
19483: LD_INT 0
19485: GREATER
19486: PUSH
19487: LD_EXP 36
19491: PUSH
19492: LD_INT 6
19494: LESS
19495: AND
19496: IFFALSE 19522
// begin Say ( JMM , D7b-JMM-1 ) ;
19498: LD_EXP 1
19502: PPUSH
19503: LD_STRING D7b-JMM-1
19505: PPUSH
19506: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
19510: LD_EXP 22
19514: PPUSH
19515: LD_STRING D7b-Pow-1
19517: PPUSH
19518: CALL_OW 94
// end ; if sciCounter = 6 then
19522: LD_EXP 36
19526: PUSH
19527: LD_INT 6
19529: EQUAL
19530: IFFALSE 19640
// begin Say ( JMM , D7c-JMM-1 ) ;
19532: LD_EXP 1
19536: PPUSH
19537: LD_STRING D7c-JMM-1
19539: PPUSH
19540: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
19544: LD_EXP 22
19548: PPUSH
19549: LD_STRING D7c-Pow-1
19551: PPUSH
19552: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
19556: LD_EXP 1
19560: PPUSH
19561: LD_STRING D7d-JMM-1
19563: PPUSH
19564: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
19568: LD_EXP 22
19572: PPUSH
19573: LD_STRING D7d-Pow-1
19575: PPUSH
19576: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
19580: LD_EXP 1
19584: PPUSH
19585: LD_STRING D7d-JMM-2
19587: PPUSH
19588: CALL_OW 88
// if askSiberite = 1 then
19592: LD_EXP 33
19596: PUSH
19597: LD_INT 1
19599: EQUAL
19600: IFFALSE 19616
// begin Say ( JMM , D7d-JMM-2a ) ;
19602: LD_EXP 1
19606: PPUSH
19607: LD_STRING D7d-JMM-2a
19609: PPUSH
19610: CALL_OW 88
// end else
19614: GO 19628
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
19616: LD_EXP 22
19620: PPUSH
19621: LD_STRING D7d-Pow-2
19623: PPUSH
19624: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
19628: LD_EXP 22
19632: PPUSH
19633: LD_STRING D7d-Pow-2a
19635: PPUSH
19636: CALL_OW 94
// end ; FinishMission ;
19640: CALL 19645 0 0
// end ;
19644: END
// export function FinishMission ; begin
19645: LD_INT 0
19647: PPUSH
// if teleportExplored = 1 then
19648: LD_EXP 34
19652: PUSH
19653: LD_INT 1
19655: EQUAL
19656: IFFALSE 19670
// AddMedal ( Teleport , 1 ) else
19658: LD_STRING Teleport
19660: PPUSH
19661: LD_INT 1
19663: PPUSH
19664: CALL_OW 101
19668: GO 19681
// AddMedal ( Teleport , - 1 ) ;
19670: LD_STRING Teleport
19672: PPUSH
19673: LD_INT 1
19675: NEG
19676: PPUSH
19677: CALL_OW 101
// if sciCounter > 2 then
19681: LD_EXP 36
19685: PUSH
19686: LD_INT 2
19688: GREATER
19689: IFFALSE 19703
// AddMedal ( Materials , 1 ) else
19691: LD_STRING Materials
19693: PPUSH
19694: LD_INT 1
19696: PPUSH
19697: CALL_OW 101
19701: GO 19714
// AddMedal ( Materials , - 1 ) ;
19703: LD_STRING Materials
19705: PPUSH
19706: LD_INT 1
19708: NEG
19709: PPUSH
19710: CALL_OW 101
// if sciCounter = 6 then
19714: LD_EXP 36
19718: PUSH
19719: LD_INT 6
19721: EQUAL
19722: IFFALSE 19746
// begin AddMedal ( Scientists , 1 ) ;
19724: LD_STRING Scientists
19726: PPUSH
19727: LD_INT 1
19729: PPUSH
19730: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
19734: LD_INT 1
19736: PPUSH
19737: LD_STRING 12_SciDed_1
19739: PPUSH
19740: CALL_OW 39
// end else
19744: GO 19767
// begin AddMedal ( Scientists , - 1 ) ;
19746: LD_STRING Scientists
19748: PPUSH
19749: LD_INT 1
19751: NEG
19752: PPUSH
19753: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
19757: LD_INT 0
19759: PPUSH
19760: LD_STRING 12_SciDed_1
19762: PPUSH
19763: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
19767: LD_EXP 32
19771: PPUSH
19772: LD_STRING 12_MainDepositFake_1
19774: PPUSH
19775: CALL_OW 39
// GiveMedals ( MAIN ) ;
19779: LD_STRING MAIN
19781: PPUSH
19782: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
19786: LD_INT 22
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 21
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 25
19811: PUSH
19812: LD_INT 1
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 25
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 25
19831: PUSH
19832: LD_INT 3
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 25
19841: PUSH
19842: LD_INT 4
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 25
19851: PUSH
19852: LD_INT 5
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 25
19861: PUSH
19862: LD_INT 8
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: LIST
19882: PPUSH
19883: CALL_OW 69
19887: PPUSH
19888: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19892: LD_EXP 1
19896: PPUSH
19897: LD_EXP 47
19901: PUSH
19902: LD_STRING JMM
19904: STR
19905: PPUSH
19906: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19910: LD_EXP 7
19914: PPUSH
19915: LD_EXP 47
19919: PUSH
19920: LD_STRING Brown
19922: STR
19923: PPUSH
19924: CALL 13178 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19928: LD_EXP 3
19932: PPUSH
19933: LD_EXP 47
19937: PUSH
19938: LD_STRING Donaldson
19940: STR
19941: PPUSH
19942: CALL 13178 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19946: LD_EXP 4
19950: PPUSH
19951: LD_EXP 47
19955: PUSH
19956: LD_STRING Bobby
19958: STR
19959: PPUSH
19960: CALL 13178 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19964: LD_EXP 5
19968: PPUSH
19969: LD_EXP 47
19973: PUSH
19974: LD_STRING Cyrus
19976: STR
19977: PPUSH
19978: CALL 13178 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19982: LD_EXP 2
19986: PPUSH
19987: LD_EXP 47
19991: PUSH
19992: LD_STRING Lisa
19994: STR
19995: PPUSH
19996: CALL 13178 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20000: LD_EXP 12
20004: PPUSH
20005: LD_EXP 47
20009: PUSH
20010: LD_STRING Frank
20012: STR
20013: PPUSH
20014: CALL 13178 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20018: LD_EXP 13
20022: PPUSH
20023: LD_EXP 47
20027: PUSH
20028: LD_STRING Kikuchi
20030: STR
20031: PPUSH
20032: CALL 13178 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20036: LD_EXP 9
20040: PPUSH
20041: LD_EXP 47
20045: PUSH
20046: LD_STRING Houten
20048: STR
20049: PPUSH
20050: CALL 13178 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20054: LD_EXP 11
20058: PPUSH
20059: LD_EXP 47
20063: PUSH
20064: LD_STRING Gary
20066: STR
20067: PPUSH
20068: CALL 13178 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
20072: LD_EXP 10
20076: PPUSH
20077: LD_EXP 47
20081: PUSH
20082: LD_STRING Cornell
20084: STR
20085: PPUSH
20086: CALL 13178 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20090: LD_EXP 6
20094: PPUSH
20095: LD_EXP 47
20099: PUSH
20100: LD_STRING Denis
20102: STR
20103: PPUSH
20104: CALL 13178 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20108: LD_EXP 8
20112: PPUSH
20113: LD_EXP 47
20117: PUSH
20118: LD_STRING Gladstone
20120: STR
20121: PPUSH
20122: CALL 13178 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
20126: LD_INT 50
20128: PUSH
20129: EMPTY
20130: LIST
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 23
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 2
20164: PUSH
20165: LD_INT 25
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 25
20177: PUSH
20178: LD_INT 2
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 25
20187: PUSH
20188: LD_INT 3
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 25
20197: PUSH
20198: LD_INT 4
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 25
20207: PUSH
20208: LD_INT 5
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 25
20217: PUSH
20218: LD_INT 8
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 69
20245: PUSH
20246: LD_EXP 1
20250: PUSH
20251: LD_EXP 7
20255: PUSH
20256: LD_EXP 3
20260: PUSH
20261: LD_EXP 4
20265: PUSH
20266: LD_EXP 5
20270: PUSH
20271: LD_EXP 2
20275: PUSH
20276: LD_EXP 12
20280: PUSH
20281: LD_EXP 8
20285: PUSH
20286: LD_EXP 13
20290: PUSH
20291: LD_EXP 6
20295: PUSH
20296: LD_EXP 9
20300: PUSH
20301: LD_EXP 11
20305: PUSH
20306: LD_EXP 10
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: DIFF
20326: PPUSH
20327: LD_STRING 12_other_survivors
20329: PPUSH
20330: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
20334: LD_INT 50
20336: PUSH
20337: EMPTY
20338: LIST
20339: PUSH
20340: LD_INT 22
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 23
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 21
20362: PUSH
20363: LD_INT 1
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: LD_INT 25
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 25
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 25
20395: PUSH
20396: LD_INT 3
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 25
20405: PUSH
20406: LD_INT 4
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 25
20415: PUSH
20416: LD_INT 5
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 25
20425: PUSH
20426: LD_INT 8
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: PPUSH
20449: CALL_OW 69
20453: PPUSH
20454: LD_STRING 12_kurt_squad
20456: PPUSH
20457: CALL_OW 38
// DeleteCharacters ( 11_others ) ;
20461: LD_STRING 11_others
20463: PPUSH
20464: CALL_OW 40
// SaveCharacters ( others11 , 11_others ) ;
20468: LD_EXP 14
20472: PPUSH
20473: LD_STRING 11_others
20475: PPUSH
20476: CALL_OW 38
// YouWin ;
20480: CALL_OW 103
// end ; end_of_file
20484: LD_VAR 0 1
20488: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20489: LD_EXP 1
20493: PPUSH
20494: CALL_OW 301
20498: IFFALSE 20510
20500: GO 20502
20502: DISABLE
// YouLost ( JMM ) ; end_of_file
20503: LD_STRING JMM
20505: PPUSH
20506: CALL_OW 104
20510: END
// every 0 0$01 do
20511: GO 20513
20513: DISABLE
// begin repeat wait ( 0 0$30 ) ;
20514: LD_INT 1050
20516: PPUSH
20517: CALL_OW 67
// if cratesSpawned < 6 then
20521: LD_EXP 46
20525: PUSH
20526: LD_INT 6
20528: LESS
20529: IFFALSE 20566
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20531: LD_INT 3
20533: PPUSH
20534: LD_INT 5
20536: PPUSH
20537: CALL_OW 12
20541: PPUSH
20542: LD_INT 21
20544: PPUSH
20545: LD_INT 1
20547: PPUSH
20548: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20552: LD_ADDR_EXP 46
20556: PUSH
20557: LD_EXP 46
20561: PUSH
20562: LD_INT 1
20564: PLUS
20565: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
20566: LD_EXP 46
20570: PUSH
20571: LD_INT 6
20573: GREATEREQUAL
20574: PUSH
20575: LD_EXP 46
20579: PUSH
20580: LD_INT 12
20582: LESS
20583: AND
20584: IFFALSE 20628
// begin wait ( 0 0$30 ) ;
20586: LD_INT 1050
20588: PPUSH
20589: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20593: LD_INT 3
20595: PPUSH
20596: LD_INT 5
20598: PPUSH
20599: CALL_OW 12
20603: PPUSH
20604: LD_INT 21
20606: PPUSH
20607: LD_INT 1
20609: PPUSH
20610: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20614: LD_ADDR_EXP 46
20618: PUSH
20619: LD_EXP 46
20623: PUSH
20624: LD_INT 1
20626: PLUS
20627: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
20628: LD_EXP 46
20632: PUSH
20633: LD_INT 12
20635: GREATEREQUAL
20636: IFFALSE 20680
// begin wait ( 1 1$30 ) ;
20638: LD_INT 3150
20640: PPUSH
20641: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20645: LD_INT 3
20647: PPUSH
20648: LD_INT 5
20650: PPUSH
20651: CALL_OW 12
20655: PPUSH
20656: LD_INT 21
20658: PPUSH
20659: LD_INT 1
20661: PPUSH
20662: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20666: LD_ADDR_EXP 46
20670: PUSH
20671: LD_EXP 46
20675: PUSH
20676: LD_INT 1
20678: PLUS
20679: ST_TO_ADDR
// end ; until cratesSpawned >= 15 ;
20680: LD_EXP 46
20684: PUSH
20685: LD_INT 15
20687: GREATEREQUAL
20688: IFFALSE 20514
// end ;
20690: END
