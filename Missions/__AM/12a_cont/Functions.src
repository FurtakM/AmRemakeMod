Export Function PrepareUnit(ident, exist_mode, prefix);
var unit;
begin

if exist_mode then
   unit := CreateCharacter(prefix&ident)
  else
   unit := NewCharacter(ident);
                     
result := unit;
End;

Export Function PrepareVehicle(chassis, engine, control, weapon, fuel);
begin
vc_chassis := chassis;
vc_engine := engine;
vc_control := control;
vc_weapon := weapon;
vc_fuel_battery := fuel;
End;

Export Function CanSayRand(side);
begin
result := FilterAllUnits([[f_placed], [f_side, side], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4]]]) diff [JMM, Frank, Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Powell, Cornel, Gary, Kikuchi];
End;

Export Function SayRand(sex, dial);
begin
result := FilterAllUnits([[f_placed], [f_side, 1], [f_sex, sex], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4]]]) diff [JMM, Frank, Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Powell, Cornel, Gary, Kikuchi];

if not result then
   exit;

result := result[1];
Say(result, dial);
End;

Export Function SayRand2(sex, dial, filter);
begin
result := FilterAllUnits([[f_side, 1], [f_sex, sex], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4]]]) diff [JMM, Frank, Lisa, Donaldson, Bobby, Cyrus, Denis, Brown, Gladstone, Houten, Powell, Cornel, Gary, Kikuchi]^filter;

if not result then
   exit;

result := result[1];
Say(result, dial);
End;

{
    flags:
    'safe_place' => [x, y, r] (default: null)
    'spot_dist' => r (default: 8)
    'chase_range' => r (default: 8)
}
Export Function Patrol(unit, path, flags);
var i, x, y, c, p, station, tmp_path, status, enemy, e, spot_dist, safe_place, chase_range, need_refuel;
begin
if not unit or not path or GetType(unit) = unit_building then
    exit;

for i = path downto 1 do
    begin
    if not ValidHex(path[i][1], path[i][2]) then
        path = Delete(path, i);
    end;

if not path then
    exit;

tmp_path := [];

if flags then
   begin

   if flags[1] then
      safe_place = flags[1];

   if flags[2] then
      spot_dist = flags[2];

   if flags[3] then
      chase_range = flags[3];

   end;

if not chase_range then
   chase_range = 8;

if not spot_dist then
   spot_dist := 8;

need_refuel = (GetType(unit) = unit_vehicle and GetEngine(unit) <> engine_siberite);

// unit status
{
    1 - patrol
    2 - chase
    3 - retreat
    4 - wait for heal/repair
    5 - return to patrol
    6 - refuel
}

status = 1; // as default
tmp_path = [1, path[1]]; // as default

repeat
 wait(0$1); // update time

 // refuel
 if need_refuel and GetFuel(unit) < 20 then
    begin
    station := FilterAllUnits([[f_side, GetSide(unit)], [f_or, [f_btype, b_depot], [f_btype, b_warehouse], [f_btype, b_oil_mine], [f_btype, b_factory]]]);

    if not station then
       begin
       SetFuel(unit, 40);
       continue;
       end;

    status := 6;
    station := NearestUnitToUnit(station, unit);

    repeat
     wait(0$1);
     ComMoveUnit(unit, station);
    until GetDistUnits(unit, station) < 6;

    SetFuel(unit, 100);
    status := 5;
    end;

 // check status
 // patrol
 if status = 1 then
    begin
    // scan area
    enemy := FilterAllUnits([[f_enemy, GetSide(unit)], [f_dist, unit, spot_dist]]);

     // enemy spotted!
    if (enemy) then
        begin
        SetRememberedX(unit, GetX(unit));
        SetRememberedY(unit, GetY(unit));

        status = 2;
        end
    else // continue patrol
        begin
        // go to next point
        if IsAt(unit, tmp_path[2][1], tmp_path[2][2]) or not HasTask(unit) then
            begin
            if tmp_path[1]+1 > path then
                tmp_path := Replace(tmp_path, 1, 1)
            else
                tmp_path := Replace(tmp_path, 1, tmp_path[1]+1);

            tmp_path := Replace(tmp_path, 2, path[tmp_path[1]]);

            ComAgressiveMove(unit, tmp_path[2][1], tmp_path[2][2]);
            end;
        end;
    end;

 // chase
 if status = 2 then
    begin
    // check health
    if GetLives(unit) < 650 and safe_place then
       begin
       status = 3;

       continue;
       end;

    x := GetRememberedX(unit);
    y := GetRememberedY(unit);

    enemy := FilterAllUnits([[f_enemy, GetSide(unit)], [f_distxy,  x, y, spot_dist]]);

    // nearest unit
    if enemy then
       begin
       e := NearestUnitToUnit(enemy, unit);

       if GetDistUnitXY(e, x, y) < spot_dist + chase_range then
          ComAttackUnit(unit, e);
       end
    else
       begin
       ComStop(unit);

       status = 5;
       end;
    end;

 // retreat
 if status = 3 and safe_place then
    begin

    repeat
     ComMoveXY(unit, safe_place[1], safe_place[2]);
     wait(0$1);
    until GetDistUnitXY(unit, safe_place[1], safe_place[2]) < 4;

    ComStop(unit);

    status = 4;
    end;

 // healing
 if status = 4 then
    begin
    // <--- add to heal/repair array here

    repeat
     wait(0$1);
    until GetLives(unit) = 1000;

    status = 5;
    end;

 // return
 if status = 5 then
    begin
    p := 999;
    e := [tmp_path[2][1], tmp_path[2][2]];
    c := 1;

    for i = 1 to tmp_path[2] div 2 do
        begin
        x := GetDistUnitXY(unit, tmp_path[2][c], tmp_path[2][c+1]);

        if x < p then
           begin
           p := x;
           e := [tmp_path[2][c], tmp_path[2][c+1]];
           end;

        c = c + 2;
        end;

    repeat
     ComMoveXY(unit, e[1], e[2]);
     wait(0$1);
    until IsAt(unit, e[1], e[2]);

    status = 1;
    end;

until IsDead(unit);

End;


{
    DialogStandard 1.0
    D{Sequence}-{Sex}{Class}{Number}-{Number}
    D5a-FSol2-1
}
Export Function Talk(units, type, sequence, sex, class, id, order_id);
var i, unit, tmp, unit_id, dialog_id, sex_id, class_id;
begin
if not units or not sequence or not sex in [sex_male, sex_female, 0] or not id or not order_id then
   exit;

sex_id := '';

case class of
  1: class_id := 'Sol';
  2: class_id := 'Eng';
  3: class_id := 'Mech';
  4: class_id := 'Sci';
end;

tmp := UnitFilter(units, [f_class, class]);

if tmp then
   units := tmp;

if sex then
   begin
   if sex = sex_female then
      sex_id := 'F';

   units := UnitFilter(units, [f_sex, sex]);

   if not units then
      exit;
   end;

unit_id := id;

if unit_id > units then
   unit_id := 1;

if not units[unit_id] then
   exit;

unit := units[unit_id];

dialog_id := 'D' & sequence & '-' & sex_id & class_id & id & '-' & order_id;

case type of
0: Say(unit, dialog_id);
1: SayRadio(unit, dialog_id);
2: ForceSay(unit, dialog_id);
end;

result := unit;
End;

{
    Reindex
    * param array - array to reindex
    * param i_from - index number where reindex start
    * param i_to - index number where reindex stop
    * param direction - false -> DESC, true -> ASC
    * return array
}                                                      
Export Function Reindex(array, i_from, i_to, direction);
var i, j, k, d, tmp, length;
begin
result := array;

if not array or not i_from or not i_to or i_from > array or i_to > array then
   exit;

{
    [1*, 2, 3, 4*, 5] -> [5, 1, 2, 3, 4] -> [4, 5, 1, 2, 3] -> [3, 4, 5, 1, 2]
}


// calculated length i_from to i_to
if direction then // ASC
   begin
   d := 1;

   if i_from > i_to then
      length := (array - i_from) + i_to
     else
      length := i_to - i_from;

   end
  else // DESC
   begin
   d := -1;

   if i_from > i_to then
      length := i_from - i_to
    else
      length := (array - i_to) + i_from;

   end;

if not length then
   exit;

// SORT
tmp := array;

for i = 1 to length do
    begin

    for j = 1 to array do
        begin
        k := j+d;

        if k > array then
           k := 1;

        if not k then
           k := array;

        tmp := Replace(tmp, k, array[j]);
        end;

    array := tmp;
    end;

result := array;
End;

{
   Function by 0dd1
   Source: https://forum.original-war.net/viewtopic.php?f=42&t=5749
}
Export Function GetBuildingHexes(btype, x, y, dir, nation, mode);
var i, temp_list, temp_list2;
var DepotAm0, DepotAm1, DepotAm2, DepotAm3, DepotAm4, DepotAm5, DepotAr0, DepotAr1, DepotAr2, DepotAr3, DepotAr4, DepotAr5, DepotRu0, DepotRu1, DepotRu2, DepotRu3, DepotRu4, DepotRu5;
var Factory0, Factory1, Factory2, Factory3, Factory4, Factory5, Ext0, Ext1, Ext2, Ext3, Ext4, Ext5;
var Lab0, Lab1, Lab2, Lab3, Lab4, Lab5, ControlTower0, ControlTower1, ControlTower2, ControlTower3, ControlTower4, ControlTower5;
var Barracks0, Barracks1, Barracks2, Barracks3, Barracks4, Barracks5, Bunker0, Bunker1, Bunker2, Bunker3, Bunker4, Bunker5;
begin
     result = [];
     temp_list = [];

     if not dir in [0,1,2,3,4,5] or (btype in [b_depot,b_warehouse] and not nation in [nation_american,nation_arabian,nation_russian]) then
        exit;

     if btype in [b_lab,b_lab_half,b_lab_full,b_lab_biological,b_lab_computer,b_lab_opto,b_lab_siberium,b_lab_spacetime,b_lab_weapon] then
        btype = b_lab;

     if not mode in [0,1,2] or (not btype in [b_depot,b_warehouse,b_workshop,b_factory,b_lab,b_control_tower,b_armoury,b_barracks,b_breastwork, b_bunker, b_turret] and mode = 1) or (not btype in [b_workshop,b_factory] and mode = 2) then
        mode = 0;


     case mode of
          0: begin
                  //Building Hexes
                  DepotAm0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[1,2],[0,2],[-1,1],[1,3],[0,3],[-1,2]];
                  DepotAm1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[1,-1],[2,0],[2,1],[-1,1],[-2,0],[-2,-1],[-2,1],[-3,0],[-3,-1]];
                  DepotAm2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[2,1],[2,2],[1,2],[-2,-1],[-2,-2],[-2,-3],[-3,-2],[-3,-3]];
                  DepotAm3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[1,2],[0,2],[-1,1],[-1,-3],[0,-3],[1,-2]];
                  DepotAm4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[1,-1],[2,0],[2,1],[-1,1],[-2,0],[-2,-1],[2,-1],[3,0],[3,1]];
                  DepotAm5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[2,1],[2,2],[1,2],[-2,-1],[-2,-2],[3,2],[3,3],[2,3]];

                  DepotAr0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  DepotAr1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  DepotAr2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  DepotAr3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  DepotAr4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  DepotAr5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];

                  DepotRu0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[-2,-3],[-1,-3],[1,-2],[2,-1]];
                  DepotRu1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[1,-2],[2,-1],[3,1],[3,2]];
                  DepotRu2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[3,1],[3,2],[2,3],[1,3]];
                  DepotRu3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[2,3],[1,3],[-1,2],[-2,1]];
                  DepotRu4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[-1,2],[-2,1],[-3,-1],[-3,-2]];
                  DepotRu5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[-2,-3],[-1,-3],[-3,-1],[-3,-2]];

                  Factory0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[1,2],[0,2],[-1,1],[-2,-1],[-2,-2],[-2,-3],[2,-1],[3,1],[1,3],[-1,2],[-3,-2]];
                  Factory1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[-1,1],[-2,0],[-2,-1],[-1,-3],[1,-2],[3,2],[2,3],[-2,1],[-3,-1]];
                  Factory2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,-1],[-2,-2],[-2,-3],[2,-1],[3,1],[1,3],[-1,2],[-3,-2]];
                  Factory3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-1,-3],[1,-2],[3,2],[2,3],[-2,1],[-3,-1]];
                  Factory4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[1,-1],[2,0],[2,1],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[-2,-3],[2,-1],[3,1],[1,3],[-1,2],[-3,-2]];
                  Factory5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,1],[2,2],[1,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[-1,-3],[1,-2],[3,2],[2,3],[-2,1],[-3,-1]];

                  Ext0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[2,1],[-2,-1]];
                  Ext1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[1,2]];
                  Ext2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[1,-1],[-1,1]];
                  Ext3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[2,1],[-2,-1]];
                  Ext4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[1,2]];
                  Ext5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[1,-1],[-1,1]];

                  Lab0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[-2,-3],[2,-1],[3,0],[3,1],[3,2],[3,3],[2,3],[-2,1],[-3,0],[-3,-1],[-3,-2],[-3,-3]];
                  Lab1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,-1],[-2,-2],[-2,-3],[-1,-3],[0,-3],[1,-2],[3,2],[3,3],[2,3],[1,3],[0,3],[-1,2],[-3,-2],[-3,-3]];
                  Lab2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-1,-3],[0,-3],[1,-2],[2,-1],[3,0],[3,1],[1,3],[0,3],[-1,2],[-2,1],[-3,0],[-3,-1]];
                  Lab3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[-1,1],[-2,0],[-2,-1],[-2,-2],[-2,-3],[2,-1],[3,0],[3,1],[3,2],[3,3],[2,3],[-2,1],[-3,0],[-3,-1],[-3,-2],[-3,-3]];
                  Lab4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,-1],[-2,-2],[-2,-3],[-1,-3],[0,-3],[1,-2],[3,2],[3,3],[2,3],[1,3],[0,3],[-1,2],[-3,-2],[-3,-3]];
                  Lab5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-1,-3],[0,-3],[1,-2],[2,-1],[3,0],[3,1],[1,3],[0,3],[-1,2],[-2,1],[-3,0],[-3,-1]];

                  ControlTower0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[-2,-1],[-2,-2]];
                  ControlTower1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1]];
                  ControlTower2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[1,-1],[2,0],[2,1],[2,2],[1,2]];
                  ControlTower3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[2,1],[2,2],[1,2],[0,2],[-1,1]];
                  ControlTower4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[1,2],[0,2],[-1,1],[-2,0],[-2,-1]];
                  ControlTower5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[-1,1],[-2,0],[-2,-1],[-2,-2]];

                  Barracks0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  Barracks1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  Barracks2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  Barracks3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  Barracks4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];
                  Barracks5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1],[-1,-2],[0,-2],[1,-1],[2,0],[2,1],[2,2],[1,2],[0,2],[-1,1],[-2,0],[-2,-1],[-2,-2]];

                  Bunker0 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1]];
                  Bunker1 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1]];
                  Bunker2 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1]];
                  Bunker3 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1]];
                  Bunker4 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1]];
                  Bunker5 = [[0,0],[0,-1],[1,0],[1,1],[0,1],[-1,0],[-1,-1]];
             end;

          1: begin
                  //Exits
                  DepotAm0 = [[-1,-3],[0,-3],[1,-2]];
                  DepotAm1 = [[2,-1],[3,0],[3,1]];
                  DepotAm2 = [[3,2],[3,3],[2,3]];
                  DepotAm3 = [[1,3],[0,3],[-1,2]];
                  DepotAm4 = [[-2,1],[-3,0],[-3,-1]];
                  DepotAm5 = [[-2,-3],[-3,-2],[-3,-3]];

                  DepotAr0 = [[-1,-3],[0,-3],[1,-2]];
                  DepotAr1 = [[2,-1],[3,0],[3,1]];
                  DepotAr2 = [[3,2],[3,3],[2,3]];
                  DepotAr3 = [[1,3],[0,3],[-1,2]];
                  DepotAr4 = [[-2,1],[-3,0],[-3,-1]];
                  DepotAr5 = [[-2,-3],[-3,-2],[-3,-3]];

                  DepotRu0 = [[0,-3],[-1,-4],[1,-3]];
                  DepotRu1 = [[3,0],[3,-1],[4,1]];
                  DepotRu2 = [[3,3],[4,3],[3,4]];
                  DepotRu3 = [[0,3],[1,4],[-1,3]];
                  DepotRu4 = [[-3,0],[-3,1],[-4,-1]];
                  DepotRu5 = [[-3,-3],[-3,-4],[-4,-3]];

                  Factory0 = [[-1,-3],[0,-3],[1,-2],[-1,-4],[0,-4],[1,-3],[-1,-5],[0,-5],[1,-4],[-1,-6],[0,-6],[1,-5]];
                  Factory1 = [[2,-1],[3,0],[3,1],[3,-1],[4,0],[4,1],[4,-1],[5,0],[5,1],[5,-1],[6,0],[6,1]];
                  Factory2 = [[3,2],[3,3],[2,3],[4,3],[4,4],[3,4],[5,4],[5,5],[4,5],[6,5],[6,6],[5,6]];
                  Factory3 = [[1,3],[0,3],[-1,2],[1,4],[0,4],[-1,3],[1,5],[0,5],[-1,4],[1,6],[0,6],[-1,5]];
                  Factory4 = [[-2,1],[-3,0],[-3,-1],[-3,1],[-4,0],[-4,-1],[-4,1],[-5,0],[-5,-1],[-5,1],[-6,0],[-6,-1]];
                  Factory5 = [[-2,-3],[-3,-2],[-3,-3],[-3,-4],[-4,-3],[-4,-4],[-4,-5],[-5,-4],[-5,-5],[-5,-6],[-6,-5],[-6,-6]];

                  Lab0 = [[0,-2],[-1,-3],[1,-2]];
                  Lab1 = [[2,0],[2,-1],[3,1]];
                  Lab2 = [[2,2],[3,2],[2,3]];
                  Lab3 = [[0,2],[1,3],[-1,2]];
                  Lab4 = [[-2,0],[-2,1],[-3,-1]];
                  Lab5 = [[-2,-2],[-2,-3],[-3,-2]];

                  ControlTower0 = [[-2,-3],[-1,-3]];
                  ControlTower1 = [[1,-2],[2,-1]];
                  ControlTower2 = [[3,1],[3,2]];
                  ControlTower3 = [[2,3],[1,3]];
                  ControlTower4 = [[-1,2],[-2,1]];
                  ControlTower5 = [[-3,-1],[-3,-2]];

                  Barracks0 = [[-1,-3],[0,-3],[1,-2]];
                  Barracks1 = [[2,-1],[3,0],[3,1]];
                  Barracks2 = [[3,2],[3,3],[2,3]];
                  Barracks3 = [[1,3],[0,3],[-1,2]];
                  Barracks4 = [[-2,1],[-3,0],[-3,-1]];
                  Barracks5 = [[-2,-3],[-3,-2],[-3,-3]];

                  Bunker0 = [[-1,-2],[0,-2],[1,-1]];
                  Bunker1 = [[1,-1],[2,0],[2,1]];
                  Bunker2 = [[2,1],[2,2],[1,2]];
                  Bunker3 = [[1,2],[0,2],[-1,1]];
                  Bunker4 = [[-1,1],[-2,0],[-2,-1]];
                  Bunker5 = [[-1,-2],[-2,-1],[-2,-2]];
             end;

          2: begin
                  //Extensions
                  Factory0 = [[4,0],[4,-1],[5,0],[5,1],[4,1],[3,0],[3,-1],[3,-2],[5,2],[3,3],[3,2],[4,3],[4,4],[3,4],[2,3],[2,2],[4,2],[2,4],[0,4],[0,3],[1,4],[1,5],[0,5],[-1,4],[-1,3],[2,5],[-2,3],[-3,0],[-3,-1],[-2,0],[-2,1],[-3,1],[-4,0],[-4,-1],[-4,-2],[-2,2],[-4,-4],[-4,-5],[-3,-4],[-3,-3],[-4,-3],[-5,-4],[-5,-5],[-3,-5],[-5,-3]];
                  Factory1 = [[4,4],[4,3],[5,4],[5,5],[4,5],[3,4],[3,3],[5,3],[3,5],[0,3],[0,2],[1,3],[1,4],[0,4],[-1,3],[-1,2],[2,4],[-2,2],[-4,0],[-4,-1],[-3,0],[-3,1],[-4,1],[-5,0],[-5,-1],[-5,-2],[-3,2],[-3,-3],[-3,-4],[-2,-3],[-2,-2],[-3,-2],[-4,-3],[-4,-4],[-2,-4],[-4,-2],[0,-4],[0,-5],[1,-4],[1,-3],[0,-3],[-1,-4],[-1,-5],[2,-3],[-2,-5]];
                  Factory2 = [[0,4],[0,3],[1,4],[1,5],[0,5],[-1,4],[-1,3],[2,5],[-2,3],[-3,0],[-3,-1],[-2,0],[-2,1],[-3,1],[-4,0],[-4,-1],[-4,-2],[-2,2],[-4,-4],[-4,-5],[-3,-4],[-3,-3],[-4,-3],[-5,-4],[-5,-5],[-3,-5],[-5,-3],[0,-3],[0,-4],[1,-3],[1,-2],[0,-2],[-1,-3],[-1,-4],[2,-2],[-2,-4],[4,0],[4,-1],[5,0],[5,1],[4,1],[3,0],[3,-1],[3,-2],[5,2]];
                  Factory3 = [[-4,0],[-4,-1],[-3,0],[-3,1],[-4,1],[-5,0],[-5,-1],[-5,-2],[-3,2],[-3,-3],[-3,-4],[-2,-3],[-2,-2],[-3,-2],[-4,-3],[-4,-4],[-2,-4],[-4,-2],[0,-4],[0,-5],[1,-4],[1,-3],[0,-3],[-1,-4],[-1,-5],[2,-3],[-2,-5],[3,0],[3,-1],[4,0],[4,1],[3,1],[2,0],[2,-1],[2,-2],[4,2],[4,4],[4,3],[5,4],[5,5],[4,5],[3,4],[3,3],[5,3],[3,5]];
                  Factory4 = [[-4,-4],[-4,-5],[-3,-4],[-3,-3],[-4,-3],[-5,-4],[-5,-5],[-3,-5],[-5,-3],[0,-3],[0,-4],[1,-3],[1,-2],[0,-2],[-1,-3],[-1,-4],[2,-2],[-2,-4],[4,0],[4,-1],[5,0],[5,1],[4,1],[3,0],[3,-1],[3,-2],[5,2],[3,3],[3,2],[4,3],[4,4],[3,4],[2,3],[2,2],[4,2],[2,4],[0,4],[0,3],[1,4],[1,5],[0,5],[-1,4],[-1,3],[2,5],[-2,3]];
                  Factory5 = [[0,-4],[0,-5],[1,-4],[1,-3],[0,-3],[-1,-4],[-1,-5],[2,-3],[-2,-5],[3,0],[3,-1],[4,0],[4,1],[3,1],[2,0],[2,-1],[2,-2],[4,2],[4,4],[4,3],[5,4],[5,5],[4,5],[3,4],[3,3],[5,3],[3,5],[0,3],[0,2],[1,3],[1,4],[0,4],[-1,3],[-1,2],[2,4],[-2,2],[-4,0],[-4,-1],[-3,0],[-3,1],[-4,1],[-5,0],[-5,-1],[-5,-2],[-3,2]];
             end;
     end;


     case btype of
          b_depot, b_warehouse: case nation of
                                     nation_american: temp_list = [DepotAm0, DepotAm1, DepotAm2, DepotAm3, DepotAm4, DepotAm5][dir+1];
                                     nation_arabian: temp_list = [DepotAr0, DepotAr1, DepotAr2, DepotAr3, DepotAr4, DepotAr5][dir+1];
                                     nation_russian: temp_list = [DepotRu0, DepotRu1, DepotRu2, DepotRu3, DepotRu4, DepotRu5][dir+1];
                                end;

          b_workshop,b_factory: temp_list = [Factory0, Factory1, Factory2, Factory3, Factory4, Factory5][dir+1];

          b_ext_track,b_ext_gun,b_ext_rocket,b_ext_noncombat,
          b_ext_radar,b_ext_siberium,b_ext_stitch,b_ext_computer,b_ext_laser: temp_list = [Ext0, Ext1, Ext2, Ext3, Ext4, Ext5][dir+1];

          b_lab, b_lab_half, b_lab_full,
          b_lab_biological, b_lab_computer, b_lab_opto,
          b_lab_siberium, b_lab_spacetime, b_lab_weapon: temp_list = [Lab0, Lab1, Lab2, Lab3, Lab4, Lab5][dir+1];

          b_control_tower: temp_list = [ControlTower0, ControlTower1, ControlTower2, ControlTower3, ControlTower4, ControlTower5][dir+1];

          b_armoury,b_barracks,
          b_teleport, b_behemoth: temp_list = [Barracks0, Barracks1, Barracks2, Barracks3, Barracks4, Barracks5][dir+1];

          b_breastwork, b_bunker, b_turret,
          b_solar_power,b_oil_power,b_siberite_power,
          b_oil_mine, b_siberite_mine: temp_list = [Bunker0, Bunker1, Bunker2, Bunker3, Bunker4, Bunker5][dir+1];
     end;


     temp_list2 = [];
     for i in temp_list do
         temp_list2 = temp_list2 ^ [[i[1] + x, i[2] + y]];

     result = temp_list2;
End;

Export Function IsNearbyEntrance(unit, building, distance);
var i, entrance;
begin
result := false;

if not unit or building or IsInUnit(unit) then
   exit;

if distance < 0 then
   distance := 0;

entrance := GetBuildingHexes(GetBType(building), GetX(building), GetY(building), GetDir(building), GetNation(building), 1); // [ [x1, y1], [x2, y2], [...]]

if not entrance then
   exit;

for i in entrance do
    begin
    if not distance then
       begin
       if IsAt(unit, i[1], i[2]) then
          begin
          result := true;
          exit;
          end;
       end
    else
       begin
       if GetDistUnitXY(unit, i[1], i[2]) <= distance then
          begin
          result := true;
          exit;
          end;
       end;
    end;
End;

Export Function CanSpot(unit, unit2);
var i, building;
begin
result := false;

if not unit or not unit2 or not IsOk(unit) or not IsOk(unit2) then
   exit;

if GetDistUnits(unit, NearestUnitToUnit(FilterAllUnits([[f_enemy, GetSide(unit)], [f_not, [f_type, unit_building]]]), unit)) < 8 then
   exit;

building := IsInUnit(unit2);

if building then
   result := IsNearbyEntrance(unit, building, 2)
else
   result := (GetDistUnits(unit, unit2) < 6 and See(GetSide(unit2), unit));
End;