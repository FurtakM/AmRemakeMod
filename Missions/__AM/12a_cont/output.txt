// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 7 ) ;
   4: LD_INT 7
   6: PPUSH
   7: CALL_OW 344
// InitVariables ;
  11: CALL 65 0 0
// PrepareAlliance ;
  15: CALL 95 0 0
// PrepareFriends ;
  19: CALL 615 0 0
// PrepareAmerican ;
  23: CALL 260 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 60
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  33: LD_INT 1
  35: PPUSH
  36: LD_INT 7
  38: PPUSH
  39: LD_INT 2
  41: PPUSH
  42: LD_INT 1
  44: PPUSH
  45: CALL_OW 80
// RemoveUnit ( Powell ) ;
  49: LD_EXP 7
  53: PPUSH
  54: CALL_OW 64
// end else
  58: GO 64
// Action ;
  60: CALL 2682 0 0
// end ;
  64: END
// export debug , selected , friends , others ; export function InitVariables ; begin
  65: LD_INT 0
  67: PPUSH
// debug := 1 ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// friends := [ ] ;
  76: LD_ADDR_EXP 3
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// selected := [ ] ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// end ; end_of_file
  90: LD_VAR 0 1
  94: RET
// export JMM , Roth ; export function PrepareAlliance ; begin
  95: LD_INT 0
  97: PPUSH
// uc_side := 7 ;
  98: LD_ADDR_OWVAR 20
 102: PUSH
 103: LD_INT 7
 105: ST_TO_ADDR
// uc_nation := 1 ;
 106: LD_ADDR_OWVAR 21
 110: PUSH
 111: LD_INT 1
 113: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_STRING JMM
 121: PPUSH
 122: LD_EXP 1
 126: NOT
 127: PPUSH
 128: LD_STRING 11_
 130: PPUSH
 131: CALL 1826 0 3
 135: ST_TO_ADDR
// uc_side := 4 ;
 136: LD_ADDR_OWVAR 20
 140: PUSH
 141: LD_INT 4
 143: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 144: LD_ADDR_EXP 6
 148: PUSH
 149: LD_STRING Roth
 151: PPUSH
 152: CALL_OW 25
 156: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 157: LD_EXP 5
 161: PPUSH
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 233
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 169: LD_EXP 5
 173: PPUSH
 174: LD_INT 105
 176: PPUSH
 177: LD_INT 10
 179: PPUSH
 180: LD_INT 0
 182: PPUSH
 183: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 187: LD_EXP 6
 191: PPUSH
 192: LD_INT 4
 194: PPUSH
 195: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 199: LD_EXP 6
 203: PPUSH
 204: LD_INT 109
 206: PPUSH
 207: LD_INT 10
 209: PPUSH
 210: LD_INT 0
 212: PPUSH
 213: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 217: LD_EXP 5
 221: PPUSH
 222: LD_EXP 6
 226: PPUSH
 227: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 231: LD_EXP 6
 235: PPUSH
 236: LD_EXP 5
 240: PPUSH
 241: CALL_OW 119
// ChangeSideFog ( 7 , 4 ) ;
 245: LD_INT 7
 247: PPUSH
 248: LD_INT 4
 250: PPUSH
 251: CALL_OW 343
// end ; end_of_file
 255: LD_VAR 0 1
 259: RET
// export Powell , mobile_patrol ; export function PrepareAmerican ; var i , un , bunkers ; begin
 260: LD_INT 0
 262: PPUSH
 263: PPUSH
 264: PPUSH
 265: PPUSH
// uc_side := 1 ;
 266: LD_ADDR_OWVAR 20
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// uc_nation := 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_INT 1
 281: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 282: LD_ADDR_EXP 7
 286: PUSH
 287: LD_STRING Powell
 289: PPUSH
 290: CALL_OW 25
 294: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 295: LD_EXP 7
 299: PPUSH
 300: LD_INT 110
 302: PPUSH
 303: LD_INT 26
 305: PPUSH
 306: LD_INT 0
 308: PPUSH
 309: CALL_OW 48
// ComHold ( Powell ) ;
 313: LD_EXP 7
 317: PPUSH
 318: CALL_OW 140
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
 322: LD_ADDR_VAR 0 4
 326: PUSH
 327: LD_INT 22
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 30
 339: PUSH
 340: LD_INT 32
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PPUSH
 351: CALL_OW 69
 355: ST_TO_ADDR
// if others < bunkers then
 356: LD_EXP 4
 360: PUSH
 361: LD_VAR 0 4
 365: LESS
 366: IFFALSE 449
// for i = bunkers - others downto 1 do
 368: LD_ADDR_VAR 0 2
 372: PUSH
 373: DOUBLE
 374: LD_VAR 0 4
 378: PUSH
 379: LD_EXP 4
 383: MINUS
 384: INC
 385: ST_TO_ADDR
 386: LD_INT 1
 388: PUSH
 389: FOR_DOWNTO
 390: IFFALSE 447
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
 392: LD_INT 0
 394: PPUSH
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 7
 400: PUSH
 401: LD_INT 8
 403: PUSH
 404: LD_INT 9
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: LIST
 411: PUSH
 412: LD_OWVAR 67
 416: ARRAY
 417: PPUSH
 418: CALL_OW 380
// others := Insert ( others , 1 , CreateHuman ) ;
 422: LD_ADDR_EXP 4
 426: PUSH
 427: LD_EXP 4
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 44
 439: PPUSH
 440: CALL_OW 2
 444: ST_TO_ADDR
// end ;
 445: GO 389
 447: POP
 448: POP
// if others then
 449: LD_EXP 4
 453: IFFALSE 521
// for i = 1 to bunkers do
 455: LD_ADDR_VAR 0 2
 459: PUSH
 460: DOUBLE
 461: LD_INT 1
 463: DEC
 464: ST_TO_ADDR
 465: LD_VAR 0 4
 469: PUSH
 470: FOR_TO
 471: IFFALSE 519
// begin SetSide ( others [ i ] , 1 ) ;
 473: LD_EXP 4
 477: PUSH
 478: LD_VAR 0 2
 482: ARRAY
 483: PPUSH
 484: LD_INT 1
 486: PPUSH
 487: CALL_OW 235
// PlaceHumanInUnit ( others [ i ] , bunkers [ i ] ) ;
 491: LD_EXP 4
 495: PUSH
 496: LD_VAR 0 2
 500: ARRAY
 501: PPUSH
 502: LD_VAR 0 4
 506: PUSH
 507: LD_VAR 0 2
 511: ARRAY
 512: PPUSH
 513: CALL_OW 52
// end ;
 517: GO 470
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 1
 525: RET
// export function PreparePatrol ; var i , un , points ; begin
 526: LD_INT 0
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
// uc_side := 1 ;
 532: LD_ADDR_OWVAR 20
 536: PUSH
 537: LD_INT 1
 539: ST_TO_ADDR
// uc_nation := 1 ;
 540: LD_ADDR_OWVAR 21
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// points := [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] ;
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_INT 99
 555: PUSH
 556: LD_INT 55
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 113
 565: PUSH
 566: LD_INT 67
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: LD_INT 129
 575: PUSH
 576: LD_INT 68
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: PUSH
 583: LD_INT 135
 585: PUSH
 586: LD_INT 62
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 103
 595: PUSH
 596: LD_INT 41
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: ST_TO_ADDR
// end ; end_of_file
 610: LD_VAR 0 1
 614: RET
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings ; begin
 615: LD_INT 0
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
// uc_side := 4 ;
 621: LD_ADDR_OWVAR 20
 625: PUSH
 626: LD_INT 4
 628: ST_TO_ADDR
// uc_nation := 1 ;
 629: LD_ADDR_OWVAR 21
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
 637: LD_ADDR_EXP 23
 641: PUSH
 642: LD_STRING DeltaDoctor
 644: PPUSH
 645: LD_EXP 1
 649: NOT
 650: PPUSH
 651: LD_STRING 10c_
 653: PPUSH
 654: CALL 1826 0 3
 658: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 659: LD_ADDR_EXP 22
 663: PUSH
 664: LD_STRING Joan
 666: PPUSH
 667: LD_EXP 1
 671: NOT
 672: PPUSH
 673: LD_STRING 10c_
 675: PPUSH
 676: CALL 1826 0 3
 680: ST_TO_ADDR
// if Joan then
 681: LD_EXP 22
 685: IFFALSE 710
// friends := Insert ( friends , 1 , Joan ) ;
 687: LD_ADDR_EXP 3
 691: PUSH
 692: LD_EXP 3
 696: PPUSH
 697: LD_INT 1
 699: PPUSH
 700: LD_EXP 22
 704: PPUSH
 705: CALL_OW 2
 709: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
 710: LD_ADDR_EXP 21
 714: PUSH
 715: LD_STRING Simms
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 10c_
 726: PPUSH
 727: CALL 1826 0 3
 731: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
 732: LD_ADDR_EXP 20
 736: PUSH
 737: LD_STRING Kikuchi
 739: PPUSH
 740: LD_EXP 1
 744: NOT
 745: PPUSH
 746: LD_STRING 11_
 748: PPUSH
 749: CALL 1826 0 3
 753: ST_TO_ADDR
// if Kikuchi then
 754: LD_EXP 20
 758: IFFALSE 783
// friends := Insert ( friends , 1 , Kikuchi ) ;
 760: LD_ADDR_EXP 3
 764: PUSH
 765: LD_EXP 3
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_EXP 20
 777: PPUSH
 778: CALL_OW 2
 782: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
 783: LD_ADDR_EXP 19
 787: PUSH
 788: LD_STRING Frank
 790: PPUSH
 791: LD_EXP 1
 795: NOT
 796: PPUSH
 797: LD_STRING 11_
 799: PPUSH
 800: CALL 1826 0 3
 804: ST_TO_ADDR
// if Frank then
 805: LD_EXP 19
 809: IFFALSE 834
// friends := Insert ( friends , 1 , Frank ) ;
 811: LD_ADDR_EXP 3
 815: PUSH
 816: LD_EXP 3
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_EXP 19
 828: PPUSH
 829: CALL_OW 2
 833: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
 834: LD_ADDR_EXP 18
 838: PUSH
 839: LD_STRING Gary
 841: PPUSH
 842: LD_EXP 1
 846: NOT
 847: PPUSH
 848: LD_STRING 11_
 850: PPUSH
 851: CALL 1826 0 3
 855: ST_TO_ADDR
// if Gary then
 856: LD_EXP 18
 860: IFFALSE 885
// friends := Insert ( friends , 1 , Gary ) ;
 862: LD_ADDR_EXP 3
 866: PUSH
 867: LD_EXP 3
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_EXP 18
 879: PPUSH
 880: CALL_OW 2
 884: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 11_ ) ;
 885: LD_ADDR_EXP 17
 889: PUSH
 890: LD_STRING Cornel
 892: PPUSH
 893: LD_EXP 1
 897: NOT
 898: PPUSH
 899: LD_STRING 11_
 901: PPUSH
 902: CALL 1826 0 3
 906: ST_TO_ADDR
// if Cornel then
 907: LD_EXP 17
 911: IFFALSE 936
// friends := Insert ( friends , 1 , Cornel ) ;
 913: LD_ADDR_EXP 3
 917: PUSH
 918: LD_EXP 3
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_EXP 17
 930: PPUSH
 931: CALL_OW 2
 935: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
 936: LD_ADDR_EXP 16
 940: PUSH
 941: LD_STRING Houten
 943: PPUSH
 944: LD_EXP 1
 948: NOT
 949: PPUSH
 950: LD_STRING 11_
 952: PPUSH
 953: CALL 1826 0 3
 957: ST_TO_ADDR
// if Houten then
 958: LD_EXP 16
 962: IFFALSE 987
// friends := Insert ( friends , 1 , Houten ) ;
 964: LD_ADDR_EXP 3
 968: PUSH
 969: LD_EXP 3
 973: PPUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_EXP 16
 981: PPUSH
 982: CALL_OW 2
 986: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
 987: LD_ADDR_EXP 15
 991: PUSH
 992: LD_STRING Gladstone
 994: PPUSH
 995: LD_EXP 1
 999: NOT
1000: PPUSH
1001: LD_STRING 11_
1003: PPUSH
1004: CALL 1826 0 3
1008: ST_TO_ADDR
// if Gladstone then
1009: LD_EXP 15
1013: IFFALSE 1038
// friends := Insert ( friends , 1 , Gladstone ) ;
1015: LD_ADDR_EXP 3
1019: PUSH
1020: LD_EXP 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_EXP 15
1032: PPUSH
1033: CALL_OW 2
1037: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
1038: LD_ADDR_EXP 9
1042: PUSH
1043: LD_STRING Lisa
1045: PPUSH
1046: LD_EXP 1
1050: NOT
1051: PPUSH
1052: LD_STRING 11_
1054: PPUSH
1055: CALL 1826 0 3
1059: ST_TO_ADDR
// if Lisa then
1060: LD_EXP 9
1064: IFFALSE 1089
// friends := Insert ( friends , 1 , Lisa ) ;
1066: LD_ADDR_EXP 3
1070: PUSH
1071: LD_EXP 3
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_EXP 9
1083: PPUSH
1084: CALL_OW 2
1088: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
1089: LD_ADDR_EXP 10
1093: PUSH
1094: LD_STRING Donaldson
1096: PPUSH
1097: LD_EXP 1
1101: NOT
1102: PPUSH
1103: LD_STRING 11_
1105: PPUSH
1106: CALL 1826 0 3
1110: ST_TO_ADDR
// if Donaldson then
1111: LD_EXP 10
1115: IFFALSE 1140
// friends := Insert ( friends , 1 , Donaldson ) ;
1117: LD_ADDR_EXP 3
1121: PUSH
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 1
1129: PPUSH
1130: LD_EXP 10
1134: PPUSH
1135: CALL_OW 2
1139: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
1140: LD_ADDR_EXP 11
1144: PUSH
1145: LD_STRING Bobby
1147: PPUSH
1148: LD_EXP 1
1152: NOT
1153: PPUSH
1154: LD_STRING 11_
1156: PPUSH
1157: CALL 1826 0 3
1161: ST_TO_ADDR
// if Bobby then
1162: LD_EXP 11
1166: IFFALSE 1191
// friends := Insert ( friends , 1 , Bobby ) ;
1168: LD_ADDR_EXP 3
1172: PUSH
1173: LD_EXP 3
1177: PPUSH
1178: LD_INT 1
1180: PPUSH
1181: LD_EXP 11
1185: PPUSH
1186: CALL_OW 2
1190: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
1191: LD_ADDR_EXP 12
1195: PUSH
1196: LD_STRING Cyrus
1198: PPUSH
1199: LD_EXP 1
1203: NOT
1204: PPUSH
1205: LD_STRING 11_
1207: PPUSH
1208: CALL 1826 0 3
1212: ST_TO_ADDR
// if Cyrus then
1213: LD_EXP 12
1217: IFFALSE 1242
// friends := Insert ( friends , 1 , Cyrus ) ;
1219: LD_ADDR_EXP 3
1223: PUSH
1224: LD_EXP 3
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_EXP 12
1236: PPUSH
1237: CALL_OW 2
1241: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
1242: LD_ADDR_EXP 13
1246: PUSH
1247: LD_STRING Denis
1249: PPUSH
1250: LD_EXP 1
1254: NOT
1255: PPUSH
1256: LD_STRING 11_
1258: PPUSH
1259: CALL 1826 0 3
1263: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: LD_STRING Brown
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_STRING 11_
1280: PPUSH
1281: CALL 1826 0 3
1285: ST_TO_ADDR
// if Brown then
1286: LD_EXP 14
1290: IFFALSE 1315
// friends := Insert ( friends , 1 , Brown ) ;
1292: LD_ADDR_EXP 3
1296: PUSH
1297: LD_EXP 3
1301: PPUSH
1302: LD_INT 1
1304: PPUSH
1305: LD_EXP 14
1309: PPUSH
1310: CALL_OW 2
1314: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ;
1315: LD_ADDR_EXP 3
1319: PUSH
1320: LD_EXP 3
1324: PUSH
1325: LD_STRING 11c_others
1327: PPUSH
1328: CALL_OW 31
1332: ADD
1333: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11_others ) ;
1334: LD_ADDR_EXP 3
1338: PUSH
1339: LD_EXP 3
1343: PUSH
1344: LD_STRING 11_others
1346: PPUSH
1347: CALL_OW 31
1351: ADD
1352: ST_TO_ADDR
// if friends < 10 then
1353: LD_EXP 3
1357: PUSH
1358: LD_INT 10
1360: LESS
1361: IFFALSE 1427
// for i = 1 to 10 do
1363: LD_ADDR_VAR 0 2
1367: PUSH
1368: DOUBLE
1369: LD_INT 1
1371: DEC
1372: ST_TO_ADDR
1373: LD_INT 10
1375: PUSH
1376: FOR_TO
1377: IFFALSE 1425
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
1379: LD_INT 0
1381: PPUSH
1382: LD_INT 1
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL_OW 12
1392: PPUSH
1393: LD_INT 7
1395: PPUSH
1396: CALL_OW 380
// friends := Insert ( friends , 1 , CreateHuman ) ;
1400: LD_ADDR_EXP 3
1404: PUSH
1405: LD_EXP 3
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: CALL_OW 44
1417: PPUSH
1418: CALL_OW 2
1422: ST_TO_ADDR
// end ;
1423: GO 1376
1425: POP
1426: POP
// for i in friends do
1427: LD_ADDR_VAR 0 2
1431: PUSH
1432: LD_EXP 3
1436: PUSH
1437: FOR_IN
1438: IFFALSE 1496
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
1440: LD_VAR 0 2
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: CALL_OW 259
1452: PUSH
1453: LD_VAR 0 2
1457: PPUSH
1458: LD_INT 4
1460: PPUSH
1461: CALL_OW 259
1465: GREATEREQUAL
1466: IFFALSE 1482
// SetClass ( i , class_soldier ) else
1468: LD_VAR 0 2
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL_OW 336
1480: GO 1494
// SetClass ( i , class_scientistic ) ;
1482: LD_VAR 0 2
1486: PPUSH
1487: LD_INT 4
1489: PPUSH
1490: CALL_OW 336
1494: GO 1437
1496: POP
1497: POP
// if Frank then
1498: LD_EXP 19
1502: IFFALSE 1516
// SetClass ( Frank , class_sniper ) ;
1504: LD_EXP 19
1508: PPUSH
1509: LD_INT 5
1511: PPUSH
1512: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
1516: LD_EXP 22
1520: PUSH
1521: LD_EXP 13
1525: PUSH
1526: LD_EXP 23
1530: PUSH
1531: LD_EXP 21
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: LD_INT 4
1544: PPUSH
1545: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 3 ] , [ class_sniper , 0 , 3 ] ] ) ;
1549: LD_ADDR_EXP 2
1553: PUSH
1554: LD_STRING 
1556: PPUSH
1557: LD_INT 7
1559: PPUSH
1560: LD_INT 7
1562: PPUSH
1563: LD_INT -6
1565: PUSH
1566: LD_EXP 5
1570: PUSH
1571: LD_EXP 21
1575: PUSH
1576: LD_EXP 13
1580: PUSH
1581: LD_EXP 23
1585: PUSH
1586: LD_INT -2
1588: PUSH
1589: LD_INT -3
1591: PUSH
1592: LD_INT -5
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: PUSH
1605: LD_EXP 3
1609: ADD
1610: PPUSH
1611: LD_INT 1
1613: PUSH
1614: LD_INT 4
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 42
1647: ST_TO_ADDR
// others := friends diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ^ selected ;
1648: LD_ADDR_EXP 4
1652: PUSH
1653: LD_EXP 3
1657: PUSH
1658: LD_EXP 9
1662: PUSH
1663: LD_EXP 10
1667: PUSH
1668: LD_EXP 11
1672: PUSH
1673: LD_EXP 12
1677: PUSH
1678: LD_EXP 13
1682: PUSH
1683: LD_EXP 14
1687: PUSH
1688: LD_EXP 15
1692: PUSH
1693: LD_EXP 16
1697: PUSH
1698: LD_EXP 17
1702: PUSH
1703: LD_EXP 18
1707: PUSH
1708: LD_EXP 19
1712: PUSH
1713: LD_EXP 20
1717: PUSH
1718: LD_EXP 21
1722: PUSH
1723: LD_EXP 22
1727: PUSH
1728: LD_EXP 23
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PUSH
1750: LD_EXP 2
1754: ADD
1755: DIFF
1756: ST_TO_ADDR
// buildings := [ ambar1 , ambar2 , amlab2 , amlab3 , amlab4 , amct1 , amfac1 ] ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: LD_INT 111
1764: PUSH
1765: LD_INT 137
1767: PUSH
1768: LD_INT 4
1770: PUSH
1771: LD_INT 129
1773: PUSH
1774: LD_INT 25
1776: PUSH
1777: LD_INT 126
1779: PUSH
1780: LD_INT 19
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: ST_TO_ADDR
// for i in buildings do
1792: LD_ADDR_VAR 0 2
1796: PUSH
1797: LD_VAR 0 4
1801: PUSH
1802: FOR_IN
1803: IFFALSE 1819
// SetSide ( i , 4 ) ;
1805: LD_VAR 0 2
1809: PPUSH
1810: LD_INT 4
1812: PPUSH
1813: CALL_OW 235
1817: GO 1802
1819: POP
1820: POP
// end ; end_of_file
1821: LD_VAR 0 1
1825: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1826: LD_INT 0
1828: PPUSH
1829: PPUSH
// if exist_mode then
1830: LD_VAR 0 2
1834: IFFALSE 1859
// unit := CreateCharacter ( prefix & ident ) else
1836: LD_ADDR_VAR 0 5
1840: PUSH
1841: LD_VAR 0 3
1845: PUSH
1846: LD_VAR 0 1
1850: STR
1851: PPUSH
1852: CALL_OW 34
1856: ST_TO_ADDR
1857: GO 1874
// unit := NewCharacter ( ident ) ;
1859: LD_ADDR_VAR 0 5
1863: PUSH
1864: LD_VAR 0 1
1868: PPUSH
1869: CALL_OW 25
1873: ST_TO_ADDR
// result := unit ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_VAR 0 5
1883: ST_TO_ADDR
// end ;
1884: LD_VAR 0 4
1888: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
1889: LD_INT 0
1891: PPUSH
// vc_chassis := chassis ;
1892: LD_ADDR_OWVAR 37
1896: PUSH
1897: LD_VAR 0 1
1901: ST_TO_ADDR
// vc_engine := engine ;
1902: LD_ADDR_OWVAR 39
1906: PUSH
1907: LD_VAR 0 2
1911: ST_TO_ADDR
// vc_control := control ;
1912: LD_ADDR_OWVAR 38
1916: PUSH
1917: LD_VAR 0 3
1921: ST_TO_ADDR
// vc_weapon := weapon ;
1922: LD_ADDR_OWVAR 40
1926: PUSH
1927: LD_VAR 0 4
1931: ST_TO_ADDR
// vc_fuel_battery := fuel ;
1932: LD_ADDR_OWVAR 41
1936: PUSH
1937: LD_VAR 0 5
1941: ST_TO_ADDR
// end ;
1942: LD_VAR 0 6
1946: RET
// export function CanSayRand ( side ) ; begin
1947: LD_INT 0
1949: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 52
1957: PUSH
1958: EMPTY
1959: LIST
1960: PUSH
1961: LD_INT 22
1963: PUSH
1964: LD_VAR 0 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 2
1975: PUSH
1976: LD_INT 25
1978: PUSH
1979: LD_INT 1
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PUSH
1986: LD_INT 25
1988: PUSH
1989: LD_INT 2
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 25
1998: PUSH
1999: LD_INT 3
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 25
2008: PUSH
2009: LD_INT 4
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_EXP 5
2037: PUSH
2038: LD_EXP 19
2042: PUSH
2043: LD_EXP 9
2047: PUSH
2048: LD_EXP 10
2052: PUSH
2053: LD_EXP 11
2057: PUSH
2058: LD_EXP 12
2062: PUSH
2063: LD_EXP 13
2067: PUSH
2068: LD_EXP 14
2072: PUSH
2073: LD_EXP 15
2077: PUSH
2078: LD_EXP 16
2082: PUSH
2083: LD_EXP 7
2087: PUSH
2088: LD_EXP 17
2092: PUSH
2093: LD_EXP 18
2097: PUSH
2098: LD_EXP 20
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: DIFF
2119: ST_TO_ADDR
// end ;
2120: LD_VAR 0 2
2124: RET
// export function SayRand ( sex , dial ) ; begin
2125: LD_INT 0
2127: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2128: LD_ADDR_VAR 0 3
2132: PUSH
2133: LD_INT 52
2135: PUSH
2136: EMPTY
2137: LIST
2138: PUSH
2139: LD_INT 22
2141: PUSH
2142: LD_INT 1
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 26
2151: PUSH
2152: LD_VAR 0 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: LD_INT 2
2163: PUSH
2164: LD_INT 25
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PUSH
2174: LD_INT 25
2176: PUSH
2177: LD_INT 2
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 25
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 25
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: PPUSH
2217: CALL_OW 69
2221: PUSH
2222: LD_EXP 5
2226: PUSH
2227: LD_EXP 19
2231: PUSH
2232: LD_EXP 9
2236: PUSH
2237: LD_EXP 10
2241: PUSH
2242: LD_EXP 11
2246: PUSH
2247: LD_EXP 12
2251: PUSH
2252: LD_EXP 13
2256: PUSH
2257: LD_EXP 14
2261: PUSH
2262: LD_EXP 15
2266: PUSH
2267: LD_EXP 16
2271: PUSH
2272: LD_EXP 7
2276: PUSH
2277: LD_EXP 17
2281: PUSH
2282: LD_EXP 18
2286: PUSH
2287: LD_EXP 20
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: DIFF
2308: ST_TO_ADDR
// if not result then
2309: LD_VAR 0 3
2313: NOT
2314: IFFALSE 2318
// exit ;
2316: GO 2346
// result := result [ 1 ] ;
2318: LD_ADDR_VAR 0 3
2322: PUSH
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 1
2330: ARRAY
2331: ST_TO_ADDR
// Say ( result , dial ) ;
2332: LD_VAR 0 3
2336: PPUSH
2337: LD_VAR 0 2
2341: PPUSH
2342: CALL_OW 88
// end ;
2346: LD_VAR 0 3
2350: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2351: LD_INT 0
2353: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2354: LD_ADDR_VAR 0 4
2358: PUSH
2359: LD_INT 22
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 26
2371: PUSH
2372: LD_VAR 0 1
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 25
2386: PUSH
2387: LD_INT 1
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_INT 25
2396: PUSH
2397: LD_INT 2
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 25
2406: PUSH
2407: LD_INT 3
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 25
2416: PUSH
2417: LD_INT 4
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: PPUSH
2436: CALL_OW 69
2440: PUSH
2441: LD_EXP 5
2445: PUSH
2446: LD_EXP 19
2450: PUSH
2451: LD_EXP 9
2455: PUSH
2456: LD_EXP 10
2460: PUSH
2461: LD_EXP 11
2465: PUSH
2466: LD_EXP 12
2470: PUSH
2471: LD_EXP 13
2475: PUSH
2476: LD_EXP 14
2480: PUSH
2481: LD_EXP 15
2485: PUSH
2486: LD_EXP 16
2490: PUSH
2491: LD_EXP 7
2495: PUSH
2496: LD_EXP 17
2500: PUSH
2501: LD_EXP 18
2505: PUSH
2506: LD_EXP 20
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_VAR 0 3
2531: ADD
2532: DIFF
2533: ST_TO_ADDR
// if not result then
2534: LD_VAR 0 4
2538: NOT
2539: IFFALSE 2543
// exit ;
2541: GO 2571
// result := result [ 1 ] ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_VAR 0 4
2552: PUSH
2553: LD_INT 1
2555: ARRAY
2556: ST_TO_ADDR
// Say ( result , dial ) ;
2557: LD_VAR 0 4
2561: PPUSH
2562: LD_VAR 0 2
2566: PPUSH
2567: CALL_OW 88
// end ;
2571: LD_VAR 0 4
2575: RET
// export function Patrol ( unit , path , flags ) ; var i , p , un , tmp ; begin
2576: LD_INT 0
2578: PPUSH
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
// if not unit or not path or not flags then
2583: LD_VAR 0 1
2587: NOT
2588: PUSH
2589: LD_VAR 0 2
2593: NOT
2594: OR
2595: PUSH
2596: LD_VAR 0 3
2600: NOT
2601: OR
2602: IFFALSE 2606
// exit ;
2604: GO 2677
// tmp := [ ] ;
2606: LD_ADDR_VAR 0 8
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// for i in path do
2613: LD_ADDR_VAR 0 5
2617: PUSH
2618: LD_VAR 0 2
2622: PUSH
2623: FOR_IN
2624: IFFALSE 2675
// if ValidHex ( i [ 1 ] , i [ 2 ] ) then
2626: LD_VAR 0 5
2630: PUSH
2631: LD_INT 1
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 5
2639: PUSH
2640: LD_INT 2
2642: ARRAY
2643: PPUSH
2644: CALL_OW 488
2648: IFFALSE 2673
// tmp := Insert ( tmp , 1 , i ) ;
2650: LD_ADDR_VAR 0 8
2654: PUSH
2655: LD_VAR 0 8
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_VAR 0 5
2667: PPUSH
2668: CALL_OW 2
2672: ST_TO_ADDR
2673: GO 2623
2675: POP
2676: POP
// end ; end_of_file
2677: LD_VAR 0 4
2681: RET
// export function Action ; begin
2682: LD_INT 0
2684: PPUSH
// InGameOn ;
2685: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
2689: LD_EXP 5
2693: PPUSH
2694: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
2698: LD_EXP 5
2702: PPUSH
2703: LD_STRING D1-JMM-1
2705: PPUSH
2706: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
2710: LD_EXP 6
2714: PPUSH
2715: LD_STRING D1-Roth-1
2717: PPUSH
2718: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2722: LD_EXP 5
2726: PPUSH
2727: LD_STRING D1-JMM-2
2729: PPUSH
2730: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
2734: LD_EXP 6
2738: PPUSH
2739: LD_STRING D1-Roth-2
2741: PPUSH
2742: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2746: LD_EXP 5
2750: PPUSH
2751: LD_STRING D1-JMM-3
2753: PPUSH
2754: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
2758: LD_EXP 6
2762: PPUSH
2763: LD_STRING D1-Roth-3
2765: PPUSH
2766: CALL_OW 88
// ComInvisible ( Roth ) ;
2770: LD_EXP 6
2774: PPUSH
2775: CALL_OW 152
// wait ( 0 0$1.3 ) ;
2779: LD_INT 46
2781: PPUSH
2782: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
2786: LD_EXP 5
2790: PPUSH
2791: LD_STRING D1-JMM-4
2793: PPUSH
2794: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2798: LD_INT 10
2800: PPUSH
2801: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
2805: LD_EXP 6
2809: PPUSH
2810: LD_EXP 5
2814: PPUSH
2815: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
2819: LD_EXP 5
2823: PPUSH
2824: LD_STRING D1-JMM-4a
2826: PPUSH
2827: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
2831: LD_EXP 6
2835: PPUSH
2836: LD_STRING D1-Roth-4
2838: PPUSH
2839: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
2843: LD_EXP 5
2847: PPUSH
2848: LD_STRING D1-JMM-5
2850: PPUSH
2851: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
2855: LD_EXP 6
2859: PPUSH
2860: LD_STRING D1-Roth-5
2862: PPUSH
2863: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
2867: LD_EXP 5
2871: PPUSH
2872: LD_STRING D1-JMM-6
2874: PPUSH
2875: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
2879: LD_EXP 6
2883: PPUSH
2884: LD_STRING D1-Roth-6
2886: PPUSH
2887: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
2891: LD_EXP 5
2895: PPUSH
2896: LD_STRING D1-JMM-7
2898: PPUSH
2899: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
2903: LD_EXP 7
2907: PPUSH
2908: LD_EXP 5
2912: PPUSH
2913: CALL_OW 250
2917: PPUSH
2918: LD_EXP 5
2922: PPUSH
2923: CALL_OW 251
2927: PPUSH
2928: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
2932: LD_EXP 6
2936: PPUSH
2937: LD_STRING D1-Roth-7
2939: PPUSH
2940: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
2944: LD_INT 10
2946: PPUSH
2947: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
2951: LD_EXP 7
2955: PPUSH
2956: LD_EXP 5
2960: PPUSH
2961: CALL_OW 296
2965: PUSH
2966: LD_INT 6
2968: LESS
2969: IFFALSE 2944
// ComTurnUnit ( Powell , JMM ) ;
2971: LD_EXP 7
2975: PPUSH
2976: LD_EXP 5
2980: PPUSH
2981: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
2985: LD_EXP 7
2989: PPUSH
2990: LD_STRING D1-Pow-7
2992: PPUSH
2993: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
2997: LD_EXP 5
3001: PPUSH
3002: LD_EXP 7
3006: PPUSH
3007: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
3011: LD_EXP 6
3015: PPUSH
3016: LD_EXP 7
3020: PPUSH
3021: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
3025: LD_EXP 5
3029: PPUSH
3030: LD_STRING D1-JMM-8
3032: PPUSH
3033: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
3037: LD_EXP 7
3041: PPUSH
3042: LD_STRING D1-Pow-8
3044: PPUSH
3045: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
3049: LD_EXP 7
3053: PPUSH
3054: LD_INT 124
3056: PPUSH
3057: LD_INT 61
3059: PPUSH
3060: CALL_OW 111
// Say ( JMM , D1-JMM-9 ) ;
3064: LD_EXP 5
3068: PPUSH
3069: LD_STRING D1-JMM-9
3071: PPUSH
3072: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
3076: LD_INT 35
3078: PPUSH
3079: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 11 ;
3083: LD_EXP 5
3087: PPUSH
3088: LD_EXP 7
3092: PPUSH
3093: CALL_OW 296
3097: PUSH
3098: LD_INT 11
3100: GREATER
3101: IFFALSE 3076
// SayRadio ( Powell , D1-Pow-9 ) ;
3103: LD_EXP 7
3107: PPUSH
3108: LD_STRING D1-Pow-9
3110: PPUSH
3111: CALL_OW 94
// RemoveUnit ( Powell ) ;
3115: LD_EXP 7
3119: PPUSH
3120: CALL_OW 64
// if Joan and not Joan in selected then
3124: LD_EXP 22
3128: PUSH
3129: LD_EXP 22
3133: PUSH
3134: LD_EXP 2
3138: IN
3139: NOT
3140: AND
3141: IFFALSE 3155
// SayRadio ( Joan , D1-Joan-9 ) ;
3143: LD_EXP 22
3147: PPUSH
3148: LD_STRING D1-Joan-9
3150: PPUSH
3151: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
3155: LD_EXP 6
3159: PPUSH
3160: LD_EXP 5
3164: PPUSH
3165: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
3169: LD_EXP 5
3173: PPUSH
3174: LD_EXP 6
3178: PPUSH
3179: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
3183: LD_EXP 6
3187: PPUSH
3188: LD_STRING D1-Roth-9
3190: PPUSH
3191: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
3195: LD_EXP 5
3199: PPUSH
3200: LD_STRING D1-JMM-10
3202: PPUSH
3203: CALL_OW 88
// InGameOff ;
3207: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3211: LD_STRING M1
3213: PPUSH
3214: CALL_OW 337
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
3218: LD_INT 7
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 2
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: CALL_OW 80
// wait ( 0 0$3 ) ;
3234: LD_INT 105
3236: PPUSH
3237: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
3241: LD_EXP 6
3245: PPUSH
3246: LD_INT 124
3248: PPUSH
3249: LD_INT 18
3251: PPUSH
3252: CALL_OW 111
// AddComInvisible ( Roth ) ;
3256: LD_EXP 6
3260: PPUSH
3261: CALL_OW 212
// end ;
3265: LD_VAR 0 1
3269: RET
