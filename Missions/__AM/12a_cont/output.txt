// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 7 ) ;
   4: LD_INT 7
   6: PPUSH
   7: CALL_OW 344
// InitVariables ;
  11: CALL 61 0 0
// PrepareAmerican ;
  15: CALL 256 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 52
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 7
  30: PPUSH
  31: LD_INT 2
  33: PPUSH
  34: LD_INT 1
  36: PPUSH
  37: CALL_OW 80
// RemoveUnit ( Powell ) ;
  41: LD_EXP 7
  45: PPUSH
  46: CALL_OW 64
// end else
  50: GO 56
// Action ;
  52: CALL 4164 0 0
// PreparePatrol ;
  56: CALL 522 0 0
// end ;
  60: END
// export debug , selected , friends , others ; export function InitVariables ; begin
  61: LD_INT 0
  63: PPUSH
// debug := 1 ;
  64: LD_ADDR_EXP 1
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// friends := [ ] ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// selected := [ ] ;
  79: LD_ADDR_EXP 2
  83: PUSH
  84: EMPTY
  85: ST_TO_ADDR
// end ; end_of_file
  86: LD_VAR 0 1
  90: RET
// export JMM , Roth ; export function PrepareAlliance ; begin
  91: LD_INT 0
  93: PPUSH
// uc_side := 7 ;
  94: LD_ADDR_OWVAR 20
  98: PUSH
  99: LD_INT 7
 101: ST_TO_ADDR
// uc_nation := 1 ;
 102: LD_ADDR_OWVAR 21
 106: PUSH
 107: LD_INT 1
 109: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 110: LD_ADDR_EXP 5
 114: PUSH
 115: LD_STRING JMM
 117: PPUSH
 118: LD_EXP 1
 122: NOT
 123: PPUSH
 124: LD_STRING 11_
 126: PPUSH
 127: CALL 1913 0 3
 131: ST_TO_ADDR
// uc_side := 4 ;
 132: LD_ADDR_OWVAR 20
 136: PUSH
 137: LD_INT 4
 139: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 140: LD_ADDR_EXP 6
 144: PUSH
 145: LD_STRING Roth
 147: PPUSH
 148: CALL_OW 25
 152: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 153: LD_EXP 5
 157: PPUSH
 158: LD_INT 1
 160: PPUSH
 161: CALL_OW 233
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 165: LD_EXP 5
 169: PPUSH
 170: LD_INT 105
 172: PPUSH
 173: LD_INT 10
 175: PPUSH
 176: LD_INT 0
 178: PPUSH
 179: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 183: LD_EXP 6
 187: PPUSH
 188: LD_INT 4
 190: PPUSH
 191: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 195: LD_EXP 6
 199: PPUSH
 200: LD_INT 109
 202: PPUSH
 203: LD_INT 10
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 213: LD_EXP 5
 217: PPUSH
 218: LD_EXP 6
 222: PPUSH
 223: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 227: LD_EXP 6
 231: PPUSH
 232: LD_EXP 5
 236: PPUSH
 237: CALL_OW 119
// ChangeSideFog ( 7 , 4 ) ;
 241: LD_INT 7
 243: PPUSH
 244: LD_INT 4
 246: PPUSH
 247: CALL_OW 343
// end ; end_of_file
 251: LD_VAR 0 1
 255: RET
// export Powell , mobile_patrol ; export function PrepareAmerican ; var i , un , bunkers ; begin
 256: LD_INT 0
 258: PPUSH
 259: PPUSH
 260: PPUSH
 261: PPUSH
// uc_side := 1 ;
 262: LD_ADDR_OWVAR 20
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
// uc_nation := 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_INT 1
 277: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 278: LD_ADDR_EXP 7
 282: PUSH
 283: LD_STRING Powell
 285: PPUSH
 286: CALL_OW 25
 290: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 291: LD_EXP 7
 295: PPUSH
 296: LD_INT 110
 298: PPUSH
 299: LD_INT 26
 301: PPUSH
 302: LD_INT 0
 304: PPUSH
 305: CALL_OW 48
// ComHold ( Powell ) ;
 309: LD_EXP 7
 313: PPUSH
 314: CALL_OW 140
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
 318: LD_ADDR_VAR 0 4
 322: PUSH
 323: LD_INT 22
 325: PUSH
 326: LD_INT 1
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PUSH
 333: LD_INT 30
 335: PUSH
 336: LD_INT 32
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PPUSH
 347: CALL_OW 69
 351: ST_TO_ADDR
// if others < bunkers then
 352: LD_EXP 4
 356: PUSH
 357: LD_VAR 0 4
 361: LESS
 362: IFFALSE 445
// for i = bunkers - others downto 1 do
 364: LD_ADDR_VAR 0 2
 368: PUSH
 369: DOUBLE
 370: LD_VAR 0 4
 374: PUSH
 375: LD_EXP 4
 379: MINUS
 380: INC
 381: ST_TO_ADDR
 382: LD_INT 1
 384: PUSH
 385: FOR_DOWNTO
 386: IFFALSE 443
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
 388: LD_INT 0
 390: PPUSH
 391: LD_INT 1
 393: PPUSH
 394: LD_INT 7
 396: PUSH
 397: LD_INT 8
 399: PUSH
 400: LD_INT 9
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: PUSH
 408: LD_OWVAR 67
 412: ARRAY
 413: PPUSH
 414: CALL_OW 380
// others := Insert ( others , 1 , CreateHuman ) ;
 418: LD_ADDR_EXP 4
 422: PUSH
 423: LD_EXP 4
 427: PPUSH
 428: LD_INT 1
 430: PPUSH
 431: CALL_OW 44
 435: PPUSH
 436: CALL_OW 2
 440: ST_TO_ADDR
// end ;
 441: GO 385
 443: POP
 444: POP
// if others then
 445: LD_EXP 4
 449: IFFALSE 517
// for i = 1 to bunkers do
 451: LD_ADDR_VAR 0 2
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 4
 465: PUSH
 466: FOR_TO
 467: IFFALSE 515
// begin SetSide ( others [ i ] , 1 ) ;
 469: LD_EXP 4
 473: PUSH
 474: LD_VAR 0 2
 478: ARRAY
 479: PPUSH
 480: LD_INT 1
 482: PPUSH
 483: CALL_OW 235
// PlaceHumanInUnit ( others [ i ] , bunkers [ i ] ) ;
 487: LD_EXP 4
 491: PUSH
 492: LD_VAR 0 2
 496: ARRAY
 497: PPUSH
 498: LD_VAR 0 4
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: PPUSH
 509: CALL_OW 52
// end ;
 513: GO 466
 515: POP
 516: POP
// end ;
 517: LD_VAR 0 1
 521: RET
// export function PreparePatrol ; var i , un , points ; begin
 522: LD_INT 0
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 1 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 1
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// points := [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] ;
 544: LD_ADDR_VAR 0 4
 548: PUSH
 549: LD_INT 99
 551: PUSH
 552: LD_INT 55
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 113
 561: PUSH
 562: LD_INT 67
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 129
 571: PUSH
 572: LD_INT 68
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 135
 581: PUSH
 582: LD_INT 62
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 103
 591: PUSH
 592: LD_INT 41
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: ST_TO_ADDR
// mobile_patrol := [ ] ;
 606: LD_ADDR_EXP 8
 610: PUSH
 611: EMPTY
 612: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
 613: LD_INT 3
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: LD_INT 3
 621: PPUSH
 622: LD_INT 4
 624: PPUSH
 625: LD_INT 100
 627: PPUSH
 628: CALL 1976 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
 632: LD_ADDR_EXP 8
 636: PUSH
 637: LD_EXP 8
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL_OW 45
 649: PPUSH
 650: CALL_OW 2
 654: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
 655: LD_EXP 8
 659: PUSH
 660: LD_INT 1
 662: ARRAY
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 55
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 48
// Patrol ( mobile_patrol [ 1 ] , points , [ ] ) ;
 677: LD_EXP 8
 681: PUSH
 682: LD_INT 1
 684: ARRAY
 685: PPUSH
 686: LD_VAR 0 4
 690: PPUSH
 691: EMPTY
 692: PPUSH
 693: CALL 2663 0 3
// end ; end_of_file
 697: LD_VAR 0 1
 701: RET
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings ; begin
 702: LD_INT 0
 704: PPUSH
 705: PPUSH
 706: PPUSH
 707: PPUSH
// uc_side := 4 ;
 708: LD_ADDR_OWVAR 20
 712: PUSH
 713: LD_INT 4
 715: ST_TO_ADDR
// uc_nation := 1 ;
 716: LD_ADDR_OWVAR 21
 720: PUSH
 721: LD_INT 1
 723: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
 724: LD_ADDR_EXP 23
 728: PUSH
 729: LD_STRING DeltaDoctor
 731: PPUSH
 732: LD_EXP 1
 736: NOT
 737: PPUSH
 738: LD_STRING 10c_
 740: PPUSH
 741: CALL 1913 0 3
 745: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 746: LD_ADDR_EXP 22
 750: PUSH
 751: LD_STRING Joan
 753: PPUSH
 754: LD_EXP 1
 758: NOT
 759: PPUSH
 760: LD_STRING 10c_
 762: PPUSH
 763: CALL 1913 0 3
 767: ST_TO_ADDR
// if Joan then
 768: LD_EXP 22
 772: IFFALSE 797
// friends := Insert ( friends , 1 , Joan ) ;
 774: LD_ADDR_EXP 3
 778: PUSH
 779: LD_EXP 3
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_EXP 22
 791: PPUSH
 792: CALL_OW 2
 796: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
 797: LD_ADDR_EXP 21
 801: PUSH
 802: LD_STRING Simms
 804: PPUSH
 805: LD_EXP 1
 809: NOT
 810: PPUSH
 811: LD_STRING 10c_
 813: PPUSH
 814: CALL 1913 0 3
 818: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
 819: LD_ADDR_EXP 20
 823: PUSH
 824: LD_STRING Kikuchi
 826: PPUSH
 827: LD_EXP 1
 831: NOT
 832: PPUSH
 833: LD_STRING 11_
 835: PPUSH
 836: CALL 1913 0 3
 840: ST_TO_ADDR
// if Kikuchi then
 841: LD_EXP 20
 845: IFFALSE 870
// friends := Insert ( friends , 1 , Kikuchi ) ;
 847: LD_ADDR_EXP 3
 851: PUSH
 852: LD_EXP 3
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_EXP 20
 864: PPUSH
 865: CALL_OW 2
 869: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
 870: LD_ADDR_EXP 19
 874: PUSH
 875: LD_STRING Frank
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_STRING 11_
 886: PPUSH
 887: CALL 1913 0 3
 891: ST_TO_ADDR
// if Frank then
 892: LD_EXP 19
 896: IFFALSE 921
// friends := Insert ( friends , 1 , Frank ) ;
 898: LD_ADDR_EXP 3
 902: PUSH
 903: LD_EXP 3
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 19
 915: PPUSH
 916: CALL_OW 2
 920: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
 921: LD_ADDR_EXP 18
 925: PUSH
 926: LD_STRING Gary
 928: PPUSH
 929: LD_EXP 1
 933: NOT
 934: PPUSH
 935: LD_STRING 11_
 937: PPUSH
 938: CALL 1913 0 3
 942: ST_TO_ADDR
// if Gary then
 943: LD_EXP 18
 947: IFFALSE 972
// friends := Insert ( friends , 1 , Gary ) ;
 949: LD_ADDR_EXP 3
 953: PUSH
 954: LD_EXP 3
 958: PPUSH
 959: LD_INT 1
 961: PPUSH
 962: LD_EXP 18
 966: PPUSH
 967: CALL_OW 2
 971: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 11_ ) ;
 972: LD_ADDR_EXP 17
 976: PUSH
 977: LD_STRING Cornel
 979: PPUSH
 980: LD_EXP 1
 984: NOT
 985: PPUSH
 986: LD_STRING 11_
 988: PPUSH
 989: CALL 1913 0 3
 993: ST_TO_ADDR
// if Cornel then
 994: LD_EXP 17
 998: IFFALSE 1023
// friends := Insert ( friends , 1 , Cornel ) ;
1000: LD_ADDR_EXP 3
1004: PUSH
1005: LD_EXP 3
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 17
1017: PPUSH
1018: CALL_OW 2
1022: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
1023: LD_ADDR_EXP 16
1027: PUSH
1028: LD_STRING Houten
1030: PPUSH
1031: LD_EXP 1
1035: NOT
1036: PPUSH
1037: LD_STRING 11_
1039: PPUSH
1040: CALL 1913 0 3
1044: ST_TO_ADDR
// if Houten then
1045: LD_EXP 16
1049: IFFALSE 1074
// friends := Insert ( friends , 1 , Houten ) ;
1051: LD_ADDR_EXP 3
1055: PUSH
1056: LD_EXP 3
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: LD_EXP 16
1068: PPUSH
1069: CALL_OW 2
1073: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Gladstone
1081: PPUSH
1082: LD_EXP 1
1086: NOT
1087: PPUSH
1088: LD_STRING 11_
1090: PPUSH
1091: CALL 1913 0 3
1095: ST_TO_ADDR
// if Gladstone then
1096: LD_EXP 15
1100: IFFALSE 1125
// friends := Insert ( friends , 1 , Gladstone ) ;
1102: LD_ADDR_EXP 3
1106: PUSH
1107: LD_EXP 3
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_EXP 15
1119: PPUSH
1120: CALL_OW 2
1124: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
1125: LD_ADDR_EXP 9
1129: PUSH
1130: LD_STRING Lisa
1132: PPUSH
1133: LD_EXP 1
1137: NOT
1138: PPUSH
1139: LD_STRING 11_
1141: PPUSH
1142: CALL 1913 0 3
1146: ST_TO_ADDR
// if Lisa then
1147: LD_EXP 9
1151: IFFALSE 1176
// friends := Insert ( friends , 1 , Lisa ) ;
1153: LD_ADDR_EXP 3
1157: PUSH
1158: LD_EXP 3
1162: PPUSH
1163: LD_INT 1
1165: PPUSH
1166: LD_EXP 9
1170: PPUSH
1171: CALL_OW 2
1175: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
1176: LD_ADDR_EXP 10
1180: PUSH
1181: LD_STRING Donaldson
1183: PPUSH
1184: LD_EXP 1
1188: NOT
1189: PPUSH
1190: LD_STRING 11_
1192: PPUSH
1193: CALL 1913 0 3
1197: ST_TO_ADDR
// if Donaldson then
1198: LD_EXP 10
1202: IFFALSE 1227
// friends := Insert ( friends , 1 , Donaldson ) ;
1204: LD_ADDR_EXP 3
1208: PUSH
1209: LD_EXP 3
1213: PPUSH
1214: LD_INT 1
1216: PPUSH
1217: LD_EXP 10
1221: PPUSH
1222: CALL_OW 2
1226: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
1227: LD_ADDR_EXP 11
1231: PUSH
1232: LD_STRING Bobby
1234: PPUSH
1235: LD_EXP 1
1239: NOT
1240: PPUSH
1241: LD_STRING 11_
1243: PPUSH
1244: CALL 1913 0 3
1248: ST_TO_ADDR
// if Bobby then
1249: LD_EXP 11
1253: IFFALSE 1278
// friends := Insert ( friends , 1 , Bobby ) ;
1255: LD_ADDR_EXP 3
1259: PUSH
1260: LD_EXP 3
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_EXP 11
1272: PPUSH
1273: CALL_OW 2
1277: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
1278: LD_ADDR_EXP 12
1282: PUSH
1283: LD_STRING Cyrus
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_STRING 11_
1294: PPUSH
1295: CALL 1913 0 3
1299: ST_TO_ADDR
// if Cyrus then
1300: LD_EXP 12
1304: IFFALSE 1329
// friends := Insert ( friends , 1 , Cyrus ) ;
1306: LD_ADDR_EXP 3
1310: PUSH
1311: LD_EXP 3
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_EXP 12
1323: PPUSH
1324: CALL_OW 2
1328: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
1329: LD_ADDR_EXP 13
1333: PUSH
1334: LD_STRING Denis
1336: PPUSH
1337: LD_EXP 1
1341: NOT
1342: PPUSH
1343: LD_STRING 11_
1345: PPUSH
1346: CALL 1913 0 3
1350: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
1351: LD_ADDR_EXP 14
1355: PUSH
1356: LD_STRING Brown
1358: PPUSH
1359: LD_EXP 1
1363: NOT
1364: PPUSH
1365: LD_STRING 11_
1367: PPUSH
1368: CALL 1913 0 3
1372: ST_TO_ADDR
// if Brown then
1373: LD_EXP 14
1377: IFFALSE 1402
// friends := Insert ( friends , 1 , Brown ) ;
1379: LD_ADDR_EXP 3
1383: PUSH
1384: LD_EXP 3
1388: PPUSH
1389: LD_INT 1
1391: PPUSH
1392: LD_EXP 14
1396: PPUSH
1397: CALL_OW 2
1401: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ;
1402: LD_ADDR_EXP 3
1406: PUSH
1407: LD_EXP 3
1411: PUSH
1412: LD_STRING 11c_others
1414: PPUSH
1415: CALL_OW 31
1419: ADD
1420: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11_others ) ;
1421: LD_ADDR_EXP 3
1425: PUSH
1426: LD_EXP 3
1430: PUSH
1431: LD_STRING 11_others
1433: PPUSH
1434: CALL_OW 31
1438: ADD
1439: ST_TO_ADDR
// if friends < 10 then
1440: LD_EXP 3
1444: PUSH
1445: LD_INT 10
1447: LESS
1448: IFFALSE 1514
// for i = 1 to 10 do
1450: LD_ADDR_VAR 0 2
1454: PUSH
1455: DOUBLE
1456: LD_INT 1
1458: DEC
1459: ST_TO_ADDR
1460: LD_INT 10
1462: PUSH
1463: FOR_TO
1464: IFFALSE 1512
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
1466: LD_INT 0
1468: PPUSH
1469: LD_INT 1
1471: PPUSH
1472: LD_INT 4
1474: PPUSH
1475: CALL_OW 12
1479: PPUSH
1480: LD_INT 7
1482: PPUSH
1483: CALL_OW 380
// friends := Insert ( friends , 1 , CreateHuman ) ;
1487: LD_ADDR_EXP 3
1491: PUSH
1492: LD_EXP 3
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL_OW 44
1504: PPUSH
1505: CALL_OW 2
1509: ST_TO_ADDR
// end ;
1510: GO 1463
1512: POP
1513: POP
// for i in friends do
1514: LD_ADDR_VAR 0 2
1518: PUSH
1519: LD_EXP 3
1523: PUSH
1524: FOR_IN
1525: IFFALSE 1583
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
1527: LD_VAR 0 2
1531: PPUSH
1532: LD_INT 1
1534: PPUSH
1535: CALL_OW 259
1539: PUSH
1540: LD_VAR 0 2
1544: PPUSH
1545: LD_INT 4
1547: PPUSH
1548: CALL_OW 259
1552: GREATEREQUAL
1553: IFFALSE 1569
// SetClass ( i , class_soldier ) else
1555: LD_VAR 0 2
1559: PPUSH
1560: LD_INT 1
1562: PPUSH
1563: CALL_OW 336
1567: GO 1581
// SetClass ( i , class_scientistic ) ;
1569: LD_VAR 0 2
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 336
1581: GO 1524
1583: POP
1584: POP
// if Frank then
1585: LD_EXP 19
1589: IFFALSE 1603
// SetClass ( Frank , class_sniper ) ;
1591: LD_EXP 19
1595: PPUSH
1596: LD_INT 5
1598: PPUSH
1599: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
1603: LD_EXP 22
1607: PUSH
1608: LD_EXP 13
1612: PUSH
1613: LD_EXP 23
1617: PUSH
1618: LD_EXP 21
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: PPUSH
1629: LD_INT 4
1631: PPUSH
1632: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 3 ] , [ class_sniper , 0 , 3 ] ] ) ;
1636: LD_ADDR_EXP 2
1640: PUSH
1641: LD_STRING 
1643: PPUSH
1644: LD_INT 7
1646: PPUSH
1647: LD_INT 7
1649: PPUSH
1650: LD_INT -6
1652: PUSH
1653: LD_EXP 5
1657: PUSH
1658: LD_EXP 21
1662: PUSH
1663: LD_EXP 13
1667: PUSH
1668: LD_EXP 23
1672: PUSH
1673: LD_INT -2
1675: PUSH
1676: LD_INT -3
1678: PUSH
1679: LD_INT -5
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: LD_EXP 3
1696: ADD
1697: PPUSH
1698: LD_INT 1
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 5
1713: PUSH
1714: LD_INT 0
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: PPUSH
1730: CALL_OW 42
1734: ST_TO_ADDR
// others := friends diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ^ selected ;
1735: LD_ADDR_EXP 4
1739: PUSH
1740: LD_EXP 3
1744: PUSH
1745: LD_EXP 9
1749: PUSH
1750: LD_EXP 10
1754: PUSH
1755: LD_EXP 11
1759: PUSH
1760: LD_EXP 12
1764: PUSH
1765: LD_EXP 13
1769: PUSH
1770: LD_EXP 14
1774: PUSH
1775: LD_EXP 15
1779: PUSH
1780: LD_EXP 16
1784: PUSH
1785: LD_EXP 17
1789: PUSH
1790: LD_EXP 18
1794: PUSH
1795: LD_EXP 19
1799: PUSH
1800: LD_EXP 20
1804: PUSH
1805: LD_EXP 21
1809: PUSH
1810: LD_EXP 22
1814: PUSH
1815: LD_EXP 23
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_EXP 2
1841: ADD
1842: DIFF
1843: ST_TO_ADDR
// buildings := [ ambar1 , ambar2 , amlab2 , amlab3 , amlab4 , amct1 , amfac1 ] ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: LD_INT 111
1851: PUSH
1852: LD_INT 137
1854: PUSH
1855: LD_INT 4
1857: PUSH
1858: LD_INT 129
1860: PUSH
1861: LD_INT 25
1863: PUSH
1864: LD_INT 126
1866: PUSH
1867: LD_INT 19
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: ST_TO_ADDR
// for i in buildings do
1879: LD_ADDR_VAR 0 2
1883: PUSH
1884: LD_VAR 0 4
1888: PUSH
1889: FOR_IN
1890: IFFALSE 1906
// SetSide ( i , 4 ) ;
1892: LD_VAR 0 2
1896: PPUSH
1897: LD_INT 4
1899: PPUSH
1900: CALL_OW 235
1904: GO 1889
1906: POP
1907: POP
// end ; end_of_file
1908: LD_VAR 0 1
1912: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1913: LD_INT 0
1915: PPUSH
1916: PPUSH
// if exist_mode then
1917: LD_VAR 0 2
1921: IFFALSE 1946
// unit := CreateCharacter ( prefix & ident ) else
1923: LD_ADDR_VAR 0 5
1927: PUSH
1928: LD_VAR 0 3
1932: PUSH
1933: LD_VAR 0 1
1937: STR
1938: PPUSH
1939: CALL_OW 34
1943: ST_TO_ADDR
1944: GO 1961
// unit := NewCharacter ( ident ) ;
1946: LD_ADDR_VAR 0 5
1950: PUSH
1951: LD_VAR 0 1
1955: PPUSH
1956: CALL_OW 25
1960: ST_TO_ADDR
// result := unit ;
1961: LD_ADDR_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: ST_TO_ADDR
// end ;
1971: LD_VAR 0 4
1975: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
1976: LD_INT 0
1978: PPUSH
// vc_chassis := chassis ;
1979: LD_ADDR_OWVAR 37
1983: PUSH
1984: LD_VAR 0 1
1988: ST_TO_ADDR
// vc_engine := engine ;
1989: LD_ADDR_OWVAR 39
1993: PUSH
1994: LD_VAR 0 2
1998: ST_TO_ADDR
// vc_control := control ;
1999: LD_ADDR_OWVAR 38
2003: PUSH
2004: LD_VAR 0 3
2008: ST_TO_ADDR
// vc_weapon := weapon ;
2009: LD_ADDR_OWVAR 40
2013: PUSH
2014: LD_VAR 0 4
2018: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2019: LD_ADDR_OWVAR 41
2023: PUSH
2024: LD_VAR 0 5
2028: ST_TO_ADDR
// end ;
2029: LD_VAR 0 6
2033: RET
// export function CanSayRand ( side ) ; begin
2034: LD_INT 0
2036: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2037: LD_ADDR_VAR 0 2
2041: PUSH
2042: LD_INT 52
2044: PUSH
2045: EMPTY
2046: LIST
2047: PUSH
2048: LD_INT 22
2050: PUSH
2051: LD_VAR 0 1
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 2
2062: PUSH
2063: LD_INT 25
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 25
2075: PUSH
2076: LD_INT 2
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 25
2085: PUSH
2086: LD_INT 3
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 25
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PPUSH
2115: CALL_OW 69
2119: PUSH
2120: LD_EXP 5
2124: PUSH
2125: LD_EXP 19
2129: PUSH
2130: LD_EXP 9
2134: PUSH
2135: LD_EXP 10
2139: PUSH
2140: LD_EXP 11
2144: PUSH
2145: LD_EXP 12
2149: PUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_EXP 14
2159: PUSH
2160: LD_EXP 15
2164: PUSH
2165: LD_EXP 16
2169: PUSH
2170: LD_EXP 7
2174: PUSH
2175: LD_EXP 17
2179: PUSH
2180: LD_EXP 18
2184: PUSH
2185: LD_EXP 20
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: DIFF
2206: ST_TO_ADDR
// end ;
2207: LD_VAR 0 2
2211: RET
// export function SayRand ( sex , dial ) ; begin
2212: LD_INT 0
2214: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2215: LD_ADDR_VAR 0 3
2219: PUSH
2220: LD_INT 52
2222: PUSH
2223: EMPTY
2224: LIST
2225: PUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 26
2238: PUSH
2239: LD_VAR 0 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: LD_INT 25
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 25
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 25
2273: PUSH
2274: LD_INT 3
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 25
2283: PUSH
2284: LD_INT 4
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: PPUSH
2304: CALL_OW 69
2308: PUSH
2309: LD_EXP 5
2313: PUSH
2314: LD_EXP 19
2318: PUSH
2319: LD_EXP 9
2323: PUSH
2324: LD_EXP 10
2328: PUSH
2329: LD_EXP 11
2333: PUSH
2334: LD_EXP 12
2338: PUSH
2339: LD_EXP 13
2343: PUSH
2344: LD_EXP 14
2348: PUSH
2349: LD_EXP 15
2353: PUSH
2354: LD_EXP 16
2358: PUSH
2359: LD_EXP 7
2363: PUSH
2364: LD_EXP 17
2368: PUSH
2369: LD_EXP 18
2373: PUSH
2374: LD_EXP 20
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: DIFF
2395: ST_TO_ADDR
// if not result then
2396: LD_VAR 0 3
2400: NOT
2401: IFFALSE 2405
// exit ;
2403: GO 2433
// result := result [ 1 ] ;
2405: LD_ADDR_VAR 0 3
2409: PUSH
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 1
2417: ARRAY
2418: ST_TO_ADDR
// Say ( result , dial ) ;
2419: LD_VAR 0 3
2423: PPUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL_OW 88
// end ;
2433: LD_VAR 0 3
2437: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2438: LD_INT 0
2440: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2441: LD_ADDR_VAR 0 4
2445: PUSH
2446: LD_INT 22
2448: PUSH
2449: LD_INT 1
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 26
2458: PUSH
2459: LD_VAR 0 1
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 2
2470: PUSH
2471: LD_INT 25
2473: PUSH
2474: LD_INT 1
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 25
2483: PUSH
2484: LD_INT 2
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 3
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 25
2503: PUSH
2504: LD_INT 4
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: PUSH
2528: LD_EXP 5
2532: PUSH
2533: LD_EXP 19
2537: PUSH
2538: LD_EXP 9
2542: PUSH
2543: LD_EXP 10
2547: PUSH
2548: LD_EXP 11
2552: PUSH
2553: LD_EXP 12
2557: PUSH
2558: LD_EXP 13
2562: PUSH
2563: LD_EXP 14
2567: PUSH
2568: LD_EXP 15
2572: PUSH
2573: LD_EXP 16
2577: PUSH
2578: LD_EXP 7
2582: PUSH
2583: LD_EXP 17
2587: PUSH
2588: LD_EXP 18
2592: PUSH
2593: LD_EXP 20
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: PUSH
2614: LD_VAR 0 3
2618: ADD
2619: DIFF
2620: ST_TO_ADDR
// if not result then
2621: LD_VAR 0 4
2625: NOT
2626: IFFALSE 2630
// exit ;
2628: GO 2658
// result := result [ 1 ] ;
2630: LD_ADDR_VAR 0 4
2634: PUSH
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: ST_TO_ADDR
// Say ( result , dial ) ;
2644: LD_VAR 0 4
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: CALL_OW 88
// end ;
2658: LD_VAR 0 4
2662: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
2667: PPUSH
2668: PPUSH
2669: PPUSH
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
2674: PPUSH
2675: PPUSH
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
2680: LD_VAR 0 1
2684: NOT
2685: PUSH
2686: LD_VAR 0 2
2690: NOT
2691: OR
2692: PUSH
2693: LD_VAR 0 1
2697: PPUSH
2698: CALL_OW 247
2702: PUSH
2703: LD_INT 3
2705: EQUAL
2706: OR
2707: IFFALSE 2711
// exit ;
2709: GO 4159
// for i = path downto 1 do
2711: LD_ADDR_VAR 0 5
2715: PUSH
2716: DOUBLE
2717: LD_VAR 0 2
2721: INC
2722: ST_TO_ADDR
2723: LD_INT 1
2725: PUSH
2726: FOR_DOWNTO
2727: IFFALSE 2788
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 5
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: LD_VAR 0 2
2748: PUSH
2749: LD_VAR 0 5
2753: ARRAY
2754: PUSH
2755: LD_INT 2
2757: ARRAY
2758: PPUSH
2759: CALL_OW 488
2763: NOT
2764: IFFALSE 2786
// path = Delete ( path , i ) ;
2766: LD_ADDR_VAR 0 2
2770: PUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: LD_VAR 0 5
2780: PPUSH
2781: CALL_OW 3
2785: ST_TO_ADDR
// end ;
2786: GO 2726
2788: POP
2789: POP
// if not path then
2790: LD_VAR 0 2
2794: NOT
2795: IFFALSE 2799
// exit ;
2797: GO 4159
// tmp_path := [ ] ;
2799: LD_ADDR_VAR 0 11
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// if flags then
2806: LD_VAR 0 3
2810: IFFALSE 2884
// begin if flags [ 1 ] then
2812: LD_VAR 0 3
2816: PUSH
2817: LD_INT 1
2819: ARRAY
2820: IFFALSE 2836
// safe_place = flags [ 1 ] ;
2822: LD_ADDR_VAR 0 16
2826: PUSH
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 1
2834: ARRAY
2835: ST_TO_ADDR
// if flags [ 2 ] then
2836: LD_VAR 0 3
2840: PUSH
2841: LD_INT 2
2843: ARRAY
2844: IFFALSE 2860
// spot_dist = flags [ 2 ] ;
2846: LD_ADDR_VAR 0 15
2850: PUSH
2851: LD_VAR 0 3
2855: PUSH
2856: LD_INT 2
2858: ARRAY
2859: ST_TO_ADDR
// if flags [ 3 ] then
2860: LD_VAR 0 3
2864: PUSH
2865: LD_INT 3
2867: ARRAY
2868: IFFALSE 2884
// chase_range = flags [ 3 ] ;
2870: LD_ADDR_VAR 0 17
2874: PUSH
2875: LD_VAR 0 3
2879: PUSH
2880: LD_INT 3
2882: ARRAY
2883: ST_TO_ADDR
// end ; if not chase_range then
2884: LD_VAR 0 17
2888: NOT
2889: IFFALSE 2899
// chase_range = 8 ;
2891: LD_ADDR_VAR 0 17
2895: PUSH
2896: LD_INT 8
2898: ST_TO_ADDR
// if not spot_dist then
2899: LD_VAR 0 15
2903: NOT
2904: IFFALSE 2914
// spot_dist := 8 ;
2906: LD_ADDR_VAR 0 15
2910: PUSH
2911: LD_INT 8
2913: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
2914: LD_ADDR_VAR 0 18
2918: PUSH
2919: LD_VAR 0 1
2923: PPUSH
2924: CALL_OW 247
2928: PUSH
2929: LD_INT 2
2931: EQUAL
2932: PUSH
2933: LD_VAR 0 1
2937: PPUSH
2938: CALL_OW 262
2942: PUSH
2943: LD_INT 3
2945: NONEQUAL
2946: AND
2947: ST_TO_ADDR
// status = 1 ;
2948: LD_ADDR_VAR 0 12
2952: PUSH
2953: LD_INT 1
2955: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
2956: LD_ADDR_VAR 0 11
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: LD_VAR 0 2
2968: PUSH
2969: LD_INT 1
2971: ARRAY
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2977: LD_INT 35
2979: PPUSH
2980: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
2984: LD_VAR 0 18
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 261
2998: PUSH
2999: LD_INT 20
3001: LESS
3002: AND
3003: IFFALSE 3196
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
3005: LD_ADDR_VAR 0 10
3009: PUSH
3010: LD_INT 22
3012: PUSH
3013: LD_VAR 0 1
3017: PPUSH
3018: CALL_OW 255
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 2
3029: PUSH
3030: LD_INT 30
3032: PUSH
3033: LD_INT 0
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 30
3042: PUSH
3043: LD_INT 1
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 30
3052: PUSH
3053: LD_INT 29
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 30
3062: PUSH
3063: LD_INT 3
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 69
3085: ST_TO_ADDR
// if not station then
3086: LD_VAR 0 10
3090: NOT
3091: IFFALSE 3107
// begin SetFuel ( unit , 40 ) ;
3093: LD_VAR 0 1
3097: PPUSH
3098: LD_INT 40
3100: PPUSH
3101: CALL_OW 240
// continue ;
3105: GO 2977
// end ; status := 6 ;
3107: LD_ADDR_VAR 0 12
3111: PUSH
3112: LD_INT 6
3114: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
3115: LD_ADDR_VAR 0 10
3119: PUSH
3120: LD_VAR 0 10
3124: PPUSH
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 74
3134: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3135: LD_INT 35
3137: PPUSH
3138: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_VAR 0 10
3151: PPUSH
3152: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
3156: LD_VAR 0 1
3160: PPUSH
3161: LD_VAR 0 10
3165: PPUSH
3166: CALL_OW 296
3170: PUSH
3171: LD_INT 6
3173: LESS
3174: IFFALSE 3135
// SetFuel ( unit , 100 ) ;
3176: LD_VAR 0 1
3180: PPUSH
3181: LD_INT 100
3183: PPUSH
3184: CALL_OW 240
// status := 5 ;
3188: LD_ADDR_VAR 0 12
3192: PUSH
3193: LD_INT 5
3195: ST_TO_ADDR
// end ; if status = 1 then
3196: LD_VAR 0 12
3200: PUSH
3201: LD_INT 1
3203: EQUAL
3204: IFFALSE 3500
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , spot_dist ] ] ) ;
3206: LD_ADDR_VAR 0 13
3210: PUSH
3211: LD_INT 81
3213: PUSH
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 255
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 91
3230: PUSH
3231: LD_VAR 0 1
3235: PUSH
3236: LD_VAR 0 15
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: ST_TO_ADDR
// if ( enemy ) then
3255: LD_VAR 0 13
3259: IFFALSE 3309
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
3261: LD_VAR 0 1
3265: PPUSH
3266: LD_VAR 0 1
3270: PPUSH
3271: CALL_OW 250
3275: PPUSH
3276: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_VAR 0 1
3289: PPUSH
3290: CALL_OW 251
3294: PPUSH
3295: CALL_OW 232
// status = 2 ;
3299: LD_ADDR_VAR 0 12
3303: PUSH
3304: LD_INT 2
3306: ST_TO_ADDR
// end else
3307: GO 3500
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
3309: LD_VAR 0 1
3313: PPUSH
3314: LD_VAR 0 11
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PUSH
3323: LD_INT 1
3325: ARRAY
3326: PPUSH
3327: LD_VAR 0 11
3331: PUSH
3332: LD_INT 2
3334: ARRAY
3335: PUSH
3336: LD_INT 2
3338: ARRAY
3339: PPUSH
3340: CALL_OW 307
3344: PUSH
3345: LD_VAR 0 1
3349: PPUSH
3350: CALL_OW 314
3354: NOT
3355: OR
3356: IFFALSE 3500
// begin if tmp_path [ 1 ] + 1 > path then
3358: LD_VAR 0 11
3362: PUSH
3363: LD_INT 1
3365: ARRAY
3366: PUSH
3367: LD_INT 1
3369: PLUS
3370: PUSH
3371: LD_VAR 0 2
3375: GREATER
3376: IFFALSE 3401
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
3378: LD_ADDR_VAR 0 11
3382: PUSH
3383: LD_VAR 0 11
3387: PPUSH
3388: LD_INT 1
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: CALL_OW 1
3398: ST_TO_ADDR
3399: GO 3432
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
3401: LD_ADDR_VAR 0 11
3405: PUSH
3406: LD_VAR 0 11
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_VAR 0 11
3418: PUSH
3419: LD_INT 1
3421: ARRAY
3422: PUSH
3423: LD_INT 1
3425: PLUS
3426: PPUSH
3427: CALL_OW 1
3431: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
3432: LD_ADDR_VAR 0 11
3436: PUSH
3437: LD_VAR 0 11
3441: PPUSH
3442: LD_INT 2
3444: PPUSH
3445: LD_VAR 0 2
3449: PUSH
3450: LD_VAR 0 11
3454: PUSH
3455: LD_INT 1
3457: ARRAY
3458: ARRAY
3459: PPUSH
3460: CALL_OW 1
3464: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
3465: LD_VAR 0 1
3469: PPUSH
3470: LD_VAR 0 11
3474: PUSH
3475: LD_INT 2
3477: ARRAY
3478: PUSH
3479: LD_INT 1
3481: ARRAY
3482: PPUSH
3483: LD_VAR 0 11
3487: PUSH
3488: LD_INT 2
3490: ARRAY
3491: PUSH
3492: LD_INT 2
3494: ARRAY
3495: PPUSH
3496: CALL_OW 114
// end ; end ; end ; if status = 2 then
3500: LD_VAR 0 12
3504: PUSH
3505: LD_INT 2
3507: EQUAL
3508: IFFALSE 3718
// begin if GetLives ( unit ) < 650 and safe_place then
3510: LD_VAR 0 1
3514: PPUSH
3515: CALL_OW 256
3519: PUSH
3520: LD_INT 650
3522: LESS
3523: PUSH
3524: LD_VAR 0 16
3528: AND
3529: IFFALSE 3541
// begin status = 3 ;
3531: LD_ADDR_VAR 0 12
3535: PUSH
3536: LD_INT 3
3538: ST_TO_ADDR
// continue ;
3539: GO 2977
// end ; x := GetRememberedX ( unit ) ;
3541: LD_ADDR_VAR 0 6
3545: PUSH
3546: LD_VAR 0 1
3550: PPUSH
3551: CALL_OW 252
3555: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
3556: LD_ADDR_VAR 0 7
3560: PUSH
3561: LD_VAR 0 1
3565: PPUSH
3566: CALL_OW 253
3570: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] ] ) ;
3571: LD_ADDR_VAR 0 13
3575: PUSH
3576: LD_INT 81
3578: PUSH
3579: LD_VAR 0 1
3583: PPUSH
3584: CALL_OW 255
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 92
3595: PUSH
3596: LD_VAR 0 6
3600: PUSH
3601: LD_VAR 0 7
3605: PUSH
3606: LD_VAR 0 15
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: PPUSH
3621: CALL_OW 69
3625: ST_TO_ADDR
// if enemy then
3626: LD_VAR 0 13
3630: IFFALSE 3701
// begin e := NearestUnitToUnit ( enemy , unit ) ;
3632: LD_ADDR_VAR 0 14
3636: PUSH
3637: LD_VAR 0 13
3641: PPUSH
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 74
3651: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
3652: LD_VAR 0 14
3656: PPUSH
3657: LD_VAR 0 6
3661: PPUSH
3662: LD_VAR 0 7
3666: PPUSH
3667: CALL_OW 297
3671: PUSH
3672: LD_VAR 0 15
3676: PUSH
3677: LD_VAR 0 17
3681: PLUS
3682: LESS
3683: IFFALSE 3699
// ComAttackUnit ( unit , e ) ;
3685: LD_VAR 0 1
3689: PPUSH
3690: LD_VAR 0 14
3694: PPUSH
3695: CALL_OW 115
// end else
3699: GO 3718
// begin ComStop ( unit ) ;
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 141
// status = 5 ;
3710: LD_ADDR_VAR 0 12
3714: PUSH
3715: LD_INT 5
3717: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
3718: LD_VAR 0 12
3722: PUSH
3723: LD_INT 3
3725: EQUAL
3726: PUSH
3727: LD_VAR 0 16
3731: AND
3732: IFFALSE 3818
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
3734: LD_VAR 0 1
3738: PPUSH
3739: LD_VAR 0 16
3743: PUSH
3744: LD_INT 1
3746: ARRAY
3747: PPUSH
3748: LD_VAR 0 16
3752: PUSH
3753: LD_INT 2
3755: ARRAY
3756: PPUSH
3757: CALL_OW 111
// wait ( 0 0$1 ) ;
3761: LD_INT 35
3763: PPUSH
3764: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
3768: LD_VAR 0 1
3772: PPUSH
3773: LD_VAR 0 16
3777: PUSH
3778: LD_INT 1
3780: ARRAY
3781: PPUSH
3782: LD_VAR 0 16
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: PPUSH
3791: CALL_OW 297
3795: PUSH
3796: LD_INT 4
3798: LESS
3799: IFFALSE 3734
// ComStop ( unit ) ;
3801: LD_VAR 0 1
3805: PPUSH
3806: CALL_OW 141
// status = 4 ;
3810: LD_ADDR_VAR 0 12
3814: PUSH
3815: LD_INT 4
3817: ST_TO_ADDR
// end ; if status = 4 then
3818: LD_VAR 0 12
3822: PUSH
3823: LD_INT 4
3825: EQUAL
3826: IFFALSE 3858
// begin repeat wait ( 0 0$1 ) ;
3828: LD_INT 35
3830: PPUSH
3831: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 256
3844: PUSH
3845: LD_INT 1000
3847: EQUAL
3848: IFFALSE 3828
// status = 5 ;
3850: LD_ADDR_VAR 0 12
3854: PUSH
3855: LD_INT 5
3857: ST_TO_ADDR
// end ; if status = 5 then
3858: LD_VAR 0 12
3862: PUSH
3863: LD_INT 5
3865: EQUAL
3866: IFFALSE 4148
// begin p := 999 ;
3868: LD_ADDR_VAR 0 9
3872: PUSH
3873: LD_INT 999
3875: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
3876: LD_ADDR_VAR 0 14
3880: PUSH
3881: LD_VAR 0 11
3885: PUSH
3886: LD_INT 2
3888: ARRAY
3889: PUSH
3890: LD_INT 1
3892: ARRAY
3893: PUSH
3894: LD_VAR 0 11
3898: PUSH
3899: LD_INT 2
3901: ARRAY
3902: PUSH
3903: LD_INT 2
3905: ARRAY
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: ST_TO_ADDR
// c := 1 ;
3911: LD_ADDR_VAR 0 8
3915: PUSH
3916: LD_INT 1
3918: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
3919: LD_ADDR_VAR 0 5
3923: PUSH
3924: DOUBLE
3925: LD_INT 1
3927: DEC
3928: ST_TO_ADDR
3929: LD_VAR 0 11
3933: PUSH
3934: LD_INT 2
3936: ARRAY
3937: PUSH
3938: LD_INT 2
3940: DIV
3941: PUSH
3942: FOR_TO
3943: IFFALSE 4075
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
3945: LD_ADDR_VAR 0 6
3949: PUSH
3950: LD_VAR 0 1
3954: PPUSH
3955: LD_VAR 0 11
3959: PUSH
3960: LD_INT 2
3962: ARRAY
3963: PUSH
3964: LD_VAR 0 8
3968: ARRAY
3969: PPUSH
3970: LD_VAR 0 11
3974: PUSH
3975: LD_INT 2
3977: ARRAY
3978: PUSH
3979: LD_VAR 0 8
3983: PUSH
3984: LD_INT 1
3986: PLUS
3987: ARRAY
3988: PPUSH
3989: CALL_OW 297
3993: ST_TO_ADDR
// if x < p then
3994: LD_VAR 0 6
3998: PUSH
3999: LD_VAR 0 9
4003: LESS
4004: IFFALSE 4059
// begin p := x ;
4006: LD_ADDR_VAR 0 9
4010: PUSH
4011: LD_VAR 0 6
4015: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
4016: LD_ADDR_VAR 0 14
4020: PUSH
4021: LD_VAR 0 11
4025: PUSH
4026: LD_INT 2
4028: ARRAY
4029: PUSH
4030: LD_VAR 0 8
4034: ARRAY
4035: PUSH
4036: LD_VAR 0 11
4040: PUSH
4041: LD_INT 2
4043: ARRAY
4044: PUSH
4045: LD_VAR 0 8
4049: PUSH
4050: LD_INT 1
4052: PLUS
4053: ARRAY
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// end ; c = c + 2 ;
4059: LD_ADDR_VAR 0 8
4063: PUSH
4064: LD_VAR 0 8
4068: PUSH
4069: LD_INT 2
4071: PLUS
4072: ST_TO_ADDR
// end ;
4073: GO 3942
4075: POP
4076: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
4077: LD_VAR 0 1
4081: PPUSH
4082: LD_VAR 0 14
4086: PUSH
4087: LD_INT 1
4089: ARRAY
4090: PPUSH
4091: LD_VAR 0 14
4095: PUSH
4096: LD_INT 2
4098: ARRAY
4099: PPUSH
4100: CALL_OW 111
// wait ( 0 0$1 ) ;
4104: LD_INT 35
4106: PPUSH
4107: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
4111: LD_VAR 0 1
4115: PPUSH
4116: LD_VAR 0 14
4120: PUSH
4121: LD_INT 1
4123: ARRAY
4124: PPUSH
4125: LD_VAR 0 14
4129: PUSH
4130: LD_INT 2
4132: ARRAY
4133: PPUSH
4134: CALL_OW 307
4138: IFFALSE 4077
// status = 1 ;
4140: LD_ADDR_VAR 0 12
4144: PUSH
4145: LD_INT 1
4147: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 301
4157: IFFALSE 2977
// end ; end_of_file
4159: LD_VAR 0 4
4163: RET
// export function Action ; begin
4164: LD_INT 0
4166: PPUSH
// InGameOn ;
4167: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
4171: LD_EXP 5
4175: PPUSH
4176: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4180: LD_EXP 5
4184: PPUSH
4185: LD_STRING D1-JMM-1
4187: PPUSH
4188: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
4192: LD_EXP 6
4196: PPUSH
4197: LD_STRING D1-Roth-1
4199: PPUSH
4200: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
4204: LD_EXP 5
4208: PPUSH
4209: LD_STRING D1-JMM-2
4211: PPUSH
4212: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
4216: LD_EXP 6
4220: PPUSH
4221: LD_STRING D1-Roth-2
4223: PPUSH
4224: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
4228: LD_EXP 5
4232: PPUSH
4233: LD_STRING D1-JMM-3
4235: PPUSH
4236: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
4240: LD_EXP 6
4244: PPUSH
4245: LD_STRING D1-Roth-3
4247: PPUSH
4248: CALL_OW 88
// ComInvisible ( Roth ) ;
4252: LD_EXP 6
4256: PPUSH
4257: CALL_OW 152
// wait ( 0 0$1.3 ) ;
4261: LD_INT 46
4263: PPUSH
4264: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
4268: LD_EXP 5
4272: PPUSH
4273: LD_STRING D1-JMM-4
4275: PPUSH
4276: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4280: LD_INT 10
4282: PPUSH
4283: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
4287: LD_EXP 6
4291: PPUSH
4292: LD_EXP 5
4296: PPUSH
4297: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
4301: LD_EXP 5
4305: PPUSH
4306: LD_STRING D1-JMM-4a
4308: PPUSH
4309: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
4313: LD_EXP 6
4317: PPUSH
4318: LD_STRING D1-Roth-4
4320: PPUSH
4321: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
4325: LD_EXP 5
4329: PPUSH
4330: LD_STRING D1-JMM-5
4332: PPUSH
4333: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
4337: LD_EXP 6
4341: PPUSH
4342: LD_STRING D1-Roth-5
4344: PPUSH
4345: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
4349: LD_EXP 5
4353: PPUSH
4354: LD_STRING D1-JMM-6
4356: PPUSH
4357: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
4361: LD_EXP 6
4365: PPUSH
4366: LD_STRING D1-Roth-6
4368: PPUSH
4369: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
4373: LD_EXP 5
4377: PPUSH
4378: LD_STRING D1-JMM-7
4380: PPUSH
4381: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
4385: LD_EXP 7
4389: PPUSH
4390: LD_EXP 5
4394: PPUSH
4395: CALL_OW 250
4399: PPUSH
4400: LD_EXP 5
4404: PPUSH
4405: CALL_OW 251
4409: PPUSH
4410: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
4414: LD_EXP 6
4418: PPUSH
4419: LD_STRING D1-Roth-7
4421: PPUSH
4422: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
4426: LD_INT 10
4428: PPUSH
4429: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
4433: LD_EXP 7
4437: PPUSH
4438: LD_EXP 5
4442: PPUSH
4443: CALL_OW 296
4447: PUSH
4448: LD_INT 6
4450: LESS
4451: IFFALSE 4426
// ComTurnUnit ( Powell , JMM ) ;
4453: LD_EXP 7
4457: PPUSH
4458: LD_EXP 5
4462: PPUSH
4463: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
4467: LD_EXP 7
4471: PPUSH
4472: LD_STRING D1-Pow-7
4474: PPUSH
4475: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
4479: LD_EXP 5
4483: PPUSH
4484: LD_EXP 7
4488: PPUSH
4489: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
4493: LD_EXP 6
4497: PPUSH
4498: LD_EXP 7
4502: PPUSH
4503: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
4507: LD_EXP 5
4511: PPUSH
4512: LD_STRING D1-JMM-8
4514: PPUSH
4515: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
4519: LD_EXP 7
4523: PPUSH
4524: LD_STRING D1-Pow-8
4526: PPUSH
4527: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
4531: LD_EXP 7
4535: PPUSH
4536: LD_INT 124
4538: PPUSH
4539: LD_INT 61
4541: PPUSH
4542: CALL_OW 111
// Say ( JMM , D1-JMM-9 ) ;
4546: LD_EXP 5
4550: PPUSH
4551: LD_STRING D1-JMM-9
4553: PPUSH
4554: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4558: LD_INT 35
4560: PPUSH
4561: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 11 ;
4565: LD_EXP 5
4569: PPUSH
4570: LD_EXP 7
4574: PPUSH
4575: CALL_OW 296
4579: PUSH
4580: LD_INT 11
4582: GREATER
4583: IFFALSE 4558
// SayRadio ( Powell , D1-Pow-9 ) ;
4585: LD_EXP 7
4589: PPUSH
4590: LD_STRING D1-Pow-9
4592: PPUSH
4593: CALL_OW 94
// RemoveUnit ( Powell ) ;
4597: LD_EXP 7
4601: PPUSH
4602: CALL_OW 64
// if Joan and not Joan in selected then
4606: LD_EXP 22
4610: PUSH
4611: LD_EXP 22
4615: PUSH
4616: LD_EXP 2
4620: IN
4621: NOT
4622: AND
4623: IFFALSE 4637
// SayRadio ( Joan , D1-Joan-9 ) ;
4625: LD_EXP 22
4629: PPUSH
4630: LD_STRING D1-Joan-9
4632: PPUSH
4633: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
4637: LD_EXP 6
4641: PPUSH
4642: LD_EXP 5
4646: PPUSH
4647: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
4651: LD_EXP 5
4655: PPUSH
4656: LD_EXP 6
4660: PPUSH
4661: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
4665: LD_EXP 6
4669: PPUSH
4670: LD_STRING D1-Roth-9
4672: PPUSH
4673: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
4677: LD_EXP 5
4681: PPUSH
4682: LD_STRING D1-JMM-10
4684: PPUSH
4685: CALL_OW 88
// InGameOff ;
4689: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4693: LD_STRING M1
4695: PPUSH
4696: CALL_OW 337
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
4700: LD_INT 7
4702: PPUSH
4703: LD_INT 1
4705: PPUSH
4706: LD_INT 2
4708: PPUSH
4709: LD_INT 1
4711: PPUSH
4712: CALL_OW 80
// wait ( 0 0$3 ) ;
4716: LD_INT 105
4718: PPUSH
4719: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
4723: LD_EXP 6
4727: PPUSH
4728: LD_INT 124
4730: PPUSH
4731: LD_INT 18
4733: PPUSH
4734: CALL_OW 111
// AddComInvisible ( Roth ) ;
4738: LD_EXP 6
4742: PPUSH
4743: CALL_OW 212
// end ;
4747: LD_VAR 0 1
4751: RET
