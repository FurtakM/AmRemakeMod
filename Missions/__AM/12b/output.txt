// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike , Khatam ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export cinematics , skip ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 78
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 79
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 80
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 82
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 81
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 83
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 76
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 77
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 65
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 66
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 67
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 72
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 68
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 70
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 69
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 74
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 71
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 54
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 92
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 64
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 55
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 61
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 62
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 93
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 94
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 95
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 57
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 58
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 59
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 101
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 60
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 98
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 84
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 85
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 86
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 96
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 97
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 100
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 102
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 105
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// cinematics := false ;
 378: LD_ADDR_EXP 103
 382: PUSH
 383: LD_INT 0
 385: ST_TO_ADDR
// skip := false ;
 386: LD_ADDR_EXP 104
 390: PUSH
 391: LD_INT 0
 393: ST_TO_ADDR
// PrepareHeroes ;
 394: CALL 743 0 0
// PrepareHeroesFromEpsilon ;
 398: CALL 1280 0 0
// PrepareRandoms ;
 402: CALL 1624 0 0
// PrepareLegion ;
 406: CALL 3867 0 0
// PrepareRussians ;
 410: CALL 4264 0 0
// PrepareAlliance ;
 414: CALL 6011 0 0
// PrepareDifficulty ;
 418: CALL 7556 0 0
// SetBName ( RuDep2 , zhukov ) ;
 422: LD_INT 23
 424: PPUSH
 425: LD_STRING zhukov
 427: PPUSH
 428: CALL_OW 500
// end ;
 432: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 433: LD_EXP 105
 437: PUSH
 438: LD_INT 1
 440: EQUAL
 441: IFFALSE 740
 443: GO 445
 445: DISABLE
 446: LD_INT 0
 448: PPUSH
// begin enable ;
 449: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 21
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 501
// SetLives ( i , 1000 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: LD_INT 1000
 494: PPUSH
 495: CALL_OW 234
 499: GO 484
 501: POP
 502: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 503: LD_ADDR_VAR 0 1
 507: PUSH
 508: LD_INT 22
 510: PUSH
 511: LD_INT 1
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 2
 520: PUSH
 521: LD_INT 30
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 30
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PPUSH
 550: CALL_OW 69
 554: PUSH
 555: FOR_IN
 556: IFFALSE 580
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 558: LD_VAR 0 1
 562: PPUSH
 563: CALL_OW 274
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_INT 9999
 573: PPUSH
 574: CALL_OW 277
 578: GO 555
 580: POP
 581: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 582: LD_ADDR_VAR 0 1
 586: PUSH
 587: LD_INT 22
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 2
 599: PUSH
 600: LD_INT 30
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 30
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PPUSH
 629: CALL_OW 69
 633: PUSH
 634: FOR_IN
 635: IFFALSE 659
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 637: LD_VAR 0 1
 641: PPUSH
 642: CALL_OW 274
 646: PPUSH
 647: LD_INT 2
 649: PPUSH
 650: LD_INT 9999
 652: PPUSH
 653: CALL_OW 277
 657: GO 634
 659: POP
 660: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 661: LD_ADDR_VAR 0 1
 665: PUSH
 666: LD_INT 22
 668: PUSH
 669: LD_INT 1
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 30
 691: PUSH
 692: LD_INT 1
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: LIST
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: PPUSH
 708: CALL_OW 69
 712: PUSH
 713: FOR_IN
 714: IFFALSE 738
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 716: LD_VAR 0 1
 720: PPUSH
 721: CALL_OW 274
 725: PPUSH
 726: LD_INT 3
 728: PPUSH
 729: LD_INT 9999
 731: PPUSH
 732: CALL_OW 277
 736: GO 713
 738: POP
 739: POP
// end ; end_of_file
 740: PPOPN 1
 742: END
// export function PrepareHeroes ; begin
 743: LD_INT 0
 745: PPUSH
// uc_side = 1 ;
 746: LD_ADDR_OWVAR 20
 750: PUSH
 751: LD_INT 1
 753: ST_TO_ADDR
// uc_nation = 1 ;
 754: LD_ADDR_OWVAR 21
 758: PUSH
 759: LD_INT 1
 761: ST_TO_ADDR
// if JMMVeh = [ ] then
 762: LD_EXP 78
 766: PUSH
 767: EMPTY
 768: EQUAL
 769: IFFALSE 815
// begin vc_engine = 3 ;
 771: LD_ADDR_OWVAR 39
 775: PUSH
 776: LD_INT 3
 778: ST_TO_ADDR
// vc_control = 1 ;
 779: LD_ADDR_OWVAR 38
 783: PUSH
 784: LD_INT 1
 786: ST_TO_ADDR
// vc_chassis = 5 ;
 787: LD_ADDR_OWVAR 37
 791: PUSH
 792: LD_INT 5
 794: ST_TO_ADDR
// vc_weapon = 9 ;
 795: LD_ADDR_OWVAR 40
 799: PUSH
 800: LD_INT 9
 802: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 803: LD_ADDR_EXP 24
 807: PUSH
 808: CALL_OW 45
 812: ST_TO_ADDR
// end else
 813: GO 897
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 815: LD_ADDR_OWVAR 37
 819: PUSH
 820: LD_EXP 78
 824: PUSH
 825: LD_INT 1
 827: ARRAY
 828: PUSH
 829: LD_INT 1
 831: ARRAY
 832: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 833: LD_ADDR_OWVAR 39
 837: PUSH
 838: LD_EXP 78
 842: PUSH
 843: LD_INT 2
 845: ARRAY
 846: PUSH
 847: LD_INT 1
 849: ARRAY
 850: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 851: LD_ADDR_OWVAR 38
 855: PUSH
 856: LD_EXP 78
 860: PUSH
 861: LD_INT 3
 863: ARRAY
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 869: LD_ADDR_OWVAR 40
 873: PUSH
 874: LD_EXP 78
 878: PUSH
 879: LD_INT 4
 881: ARRAY
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 887: LD_ADDR_EXP 24
 891: PUSH
 892: CALL_OW 45
 896: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 897: LD_EXP 79
 901: PUSH
 902: EMPTY
 903: EQUAL
 904: NOT
 905: IFFALSE 989
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 907: LD_ADDR_OWVAR 37
 911: PUSH
 912: LD_EXP 79
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 925: LD_ADDR_OWVAR 39
 929: PUSH
 930: LD_EXP 79
 934: PUSH
 935: LD_INT 2
 937: ARRAY
 938: PUSH
 939: LD_INT 1
 941: ARRAY
 942: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 943: LD_ADDR_OWVAR 38
 947: PUSH
 948: LD_EXP 79
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 961: LD_ADDR_OWVAR 40
 965: PUSH
 966: LD_EXP 79
 970: PUSH
 971: LD_INT 4
 973: ARRAY
 974: PUSH
 975: LD_INT 1
 977: ARRAY
 978: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 979: LD_ADDR_EXP 25
 983: PUSH
 984: CALL_OW 45
 988: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 989: LD_EXP 24
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
1001: LD_EXP 25
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
1013: LD_EXP 24
1017: PPUSH
1018: LD_INT 99
1020: PPUSH
1021: LD_INT 154
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL_OW 48
// if JMMGirlVeh then
1031: LD_EXP 79
1035: IFFALSE 1055
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1037: LD_EXP 25
1041: PPUSH
1042: LD_INT 98
1044: PPUSH
1045: LD_INT 159
1047: PPUSH
1048: LD_INT 0
1050: PPUSH
1051: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_STRING 14_JMM
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: CALL 6656 0 2
1070: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1071: LD_EXP 1
1075: PPUSH
1076: LD_EXP 24
1080: PPUSH
1081: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1085: LD_EXP 79
1089: PUSH
1090: EMPTY
1091: EQUAL
1092: NOT
1093: IFFALSE 1215
// begin if JMMGirl = 1 then
1095: LD_EXP 80
1099: PUSH
1100: LD_INT 1
1102: EQUAL
1103: IFFALSE 1135
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1105: LD_ADDR_EXP 2
1109: PUSH
1110: LD_STRING 14_Joan
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: CALL 6656 0 2
1120: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1121: LD_EXP 2
1125: PPUSH
1126: LD_EXP 25
1130: PPUSH
1131: CALL_OW 52
// end ; if JMMGirl = 2 then
1135: LD_EXP 80
1139: PUSH
1140: LD_INT 2
1142: EQUAL
1143: IFFALSE 1175
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1145: LD_ADDR_EXP 4
1149: PUSH
1150: LD_STRING 14_Lisa
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL 6656 0 2
1160: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_EXP 25
1170: PPUSH
1171: CALL_OW 52
// end ; if JMMGirl = 3 then
1175: LD_EXP 80
1179: PUSH
1180: LD_INT 3
1182: EQUAL
1183: IFFALSE 1215
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_STRING 14_Connie
1192: PPUSH
1193: LD_INT 1
1195: PPUSH
1196: CALL 6656 0 2
1200: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1201: LD_EXP 16
1205: PPUSH
1206: LD_EXP 25
1210: PPUSH
1211: CALL_OW 52
// end ; end ; uc_side = 4 ;
1215: LD_ADDR_OWVAR 20
1219: PUSH
1220: LD_INT 4
1222: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1223: LD_ADDR_EXP 17
1227: PUSH
1228: LD_STRING Powell
1230: PPUSH
1231: LD_INT 0
1233: PPUSH
1234: CALL 6656 0 2
1238: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1239: LD_EXP 17
1243: PPUSH
1244: LD_INT 42
1246: PPUSH
1247: LD_INT 62
1249: PPUSH
1250: LD_INT 5
1252: PPUSH
1253: LD_INT 0
1255: PPUSH
1256: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1260: LD_EXP 17
1264: PPUSH
1265: LD_INT 43
1267: PPUSH
1268: LD_INT 63
1270: PPUSH
1271: CALL_OW 118
// end ;
1275: LD_VAR 0 1
1279: RET
// export function PrepareHeroesFromEpsilon ; begin
1280: LD_INT 0
1282: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1283: LD_ADDR_EXP 4
1287: PUSH
1288: LD_STRING Lisa
1290: PPUSH
1291: CALL 6713 0 1
1295: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1296: LD_ADDR_EXP 5
1300: PUSH
1301: LD_STRING Donaldson
1303: PPUSH
1304: CALL 6713 0 1
1308: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1309: LD_ADDR_EXP 6
1313: PUSH
1314: LD_STRING Bobby
1316: PPUSH
1317: CALL 6713 0 1
1321: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1322: LD_ADDR_EXP 7
1326: PUSH
1327: LD_STRING Cyrus
1329: PPUSH
1330: CALL 6713 0 1
1334: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1335: LD_ADDR_EXP 8
1339: PUSH
1340: LD_STRING Denis
1342: PPUSH
1343: CALL 6713 0 1
1347: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1348: LD_ADDR_EXP 9
1352: PUSH
1353: LD_STRING Brown
1355: PPUSH
1356: CALL 6713 0 1
1360: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1361: LD_ADDR_EXP 10
1365: PUSH
1366: LD_STRING Gladstone
1368: PPUSH
1369: CALL 6713 0 1
1373: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1374: LD_ADDR_EXP 11
1378: PUSH
1379: LD_STRING Houten
1381: PPUSH
1382: CALL 6713 0 1
1386: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1387: LD_ADDR_EXP 12
1391: PUSH
1392: LD_STRING Cornel
1394: PPUSH
1395: CALL 6713 0 1
1399: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1400: LD_ADDR_EXP 13
1404: PUSH
1405: LD_STRING Gary
1407: PPUSH
1408: CALL 6713 0 1
1412: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1413: LD_ADDR_EXP 14
1417: PUSH
1418: LD_STRING Frank
1420: PPUSH
1421: CALL 6713 0 1
1425: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1426: LD_ADDR_EXP 15
1430: PUSH
1431: LD_STRING Kikuchi
1433: PPUSH
1434: CALL 6713 0 1
1438: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1439: LD_EXP 4
1443: PPUSH
1444: LD_INT 6
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1454: LD_EXP 5
1458: PPUSH
1459: LD_INT 6
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1469: LD_EXP 6
1473: PPUSH
1474: LD_INT 6
1476: PPUSH
1477: LD_INT 0
1479: PPUSH
1480: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1484: LD_EXP 7
1488: PPUSH
1489: LD_INT 6
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1499: LD_EXP 8
1503: PPUSH
1504: LD_INT 6
1506: PPUSH
1507: LD_INT 0
1509: PPUSH
1510: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1514: LD_EXP 9
1518: PPUSH
1519: LD_INT 6
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1529: LD_EXP 10
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1544: LD_EXP 11
1548: PPUSH
1549: LD_INT 6
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1559: LD_EXP 12
1563: PPUSH
1564: LD_INT 6
1566: PPUSH
1567: LD_INT 0
1569: PPUSH
1570: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1574: LD_EXP 13
1578: PPUSH
1579: LD_INT 6
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1589: LD_EXP 14
1593: PPUSH
1594: LD_INT 6
1596: PPUSH
1597: LD_INT 0
1599: PPUSH
1600: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1604: LD_EXP 15
1608: PPUSH
1609: LD_INT 6
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL_OW 49
// end ;
1619: LD_VAR 0 1
1623: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1624: LD_INT 0
1626: PPUSH
1627: PPUSH
1628: PPUSH
1629: PPUSH
1630: PPUSH
// uc_side = 4 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 4
1638: ST_TO_ADDR
// uc_nation = 1 ;
1639: LD_ADDR_OWVAR 21
1643: PUSH
1644: LD_INT 1
1646: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1647: LD_ADDR_EXP 18
1651: PUSH
1652: LD_STRING 13s_others
1654: PPUSH
1655: CALL_OW 31
1659: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: LD_INT 22
1667: PUSH
1668: LD_INT 4
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: LD_INT 21
1677: PUSH
1678: LD_INT 1
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PPUSH
1689: CALL_OW 69
1693: PUSH
1694: LD_EXP 17
1698: PUSH
1699: EMPTY
1700: LIST
1701: DIFF
1702: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 4
1712: PPUSH
1713: CALL 6843 0 1
1717: ST_TO_ADDR
// if others13 >= 8 then
1718: LD_EXP 18
1722: PUSH
1723: LD_INT 8
1725: GREATEREQUAL
1726: IFFALSE 1787
// begin for i = 1 to 8 do
1728: LD_ADDR_VAR 0 2
1732: PUSH
1733: DOUBLE
1734: LD_INT 1
1736: DEC
1737: ST_TO_ADDR
1738: LD_INT 8
1740: PUSH
1741: FOR_TO
1742: IFFALSE 1783
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1744: LD_EXP 18
1748: PUSH
1749: LD_INT 1
1751: ARRAY
1752: PPUSH
1753: LD_INT 6
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1763: LD_ADDR_EXP 18
1767: PUSH
1768: LD_EXP 18
1772: PPUSH
1773: LD_INT 1
1775: PPUSH
1776: CALL_OW 3
1780: ST_TO_ADDR
// end ;
1781: GO 1741
1783: POP
1784: POP
// end else
1785: GO 1846
// begin for i = 1 to others13 do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: DOUBLE
1793: LD_INT 1
1795: DEC
1796: ST_TO_ADDR
1797: LD_EXP 18
1801: PUSH
1802: FOR_TO
1803: IFFALSE 1844
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1805: LD_EXP 18
1809: PUSH
1810: LD_INT 1
1812: ARRAY
1813: PPUSH
1814: LD_INT 6
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: LD_EXP 18
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: CALL_OW 3
1841: ST_TO_ADDR
// end ;
1842: GO 1802
1844: POP
1845: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1846: LD_ADDR_VAR 0 4
1850: PUSH
1851: LD_INT 22
1853: PUSH
1854: LD_INT 4
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 21
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 69
1879: PUSH
1880: LD_EXP 17
1884: PUSH
1885: EMPTY
1886: LIST
1887: DIFF
1888: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1889: LD_ADDR_VAR 0 5
1893: PUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: CALL 6843 0 1
1903: ST_TO_ADDR
// if others13 >= 6 then
1904: LD_EXP 18
1908: PUSH
1909: LD_INT 6
1911: GREATEREQUAL
1912: IFFALSE 1973
// begin for i = 1 to 6 do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_INT 6
1926: PUSH
1927: FOR_TO
1928: IFFALSE 1969
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1930: LD_EXP 18
1934: PUSH
1935: LD_INT 1
1937: ARRAY
1938: PPUSH
1939: LD_INT 6
1941: PPUSH
1942: LD_INT 0
1944: PPUSH
1945: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1949: LD_ADDR_EXP 18
1953: PUSH
1954: LD_EXP 18
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL_OW 3
1966: ST_TO_ADDR
// end ;
1967: GO 1927
1969: POP
1970: POP
// end else
1971: GO 2032
// begin for i = 1 to others13 do
1973: LD_ADDR_VAR 0 2
1977: PUSH
1978: DOUBLE
1979: LD_INT 1
1981: DEC
1982: ST_TO_ADDR
1983: LD_EXP 18
1987: PUSH
1988: FOR_TO
1989: IFFALSE 2030
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1991: LD_EXP 18
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: LD_INT 6
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
2010: LD_ADDR_EXP 18
2014: PUSH
2015: LD_EXP 18
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL_OW 3
2027: ST_TO_ADDR
// end ;
2028: GO 1988
2030: POP
2031: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2032: LD_ADDR_VAR 0 4
2036: PUSH
2037: LD_INT 22
2039: PUSH
2040: LD_INT 4
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 21
2049: PUSH
2050: LD_INT 1
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PPUSH
2061: CALL_OW 69
2065: PUSH
2066: LD_EXP 17
2070: PUSH
2071: EMPTY
2072: LIST
2073: DIFF
2074: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 4
2084: PPUSH
2085: CALL 6843 0 1
2089: ST_TO_ADDR
// if heroLenght < 19 then
2090: LD_VAR 0 5
2094: PUSH
2095: LD_INT 19
2097: LESS
2098: IFFALSE 2196
// for i = 1 to 19 - heroLenght do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: DOUBLE
2106: LD_INT 1
2108: DEC
2109: ST_TO_ADDR
2110: LD_INT 19
2112: PUSH
2113: LD_VAR 0 5
2117: MINUS
2118: PUSH
2119: FOR_TO
2120: IFFALSE 2194
// begin hc_gallery =  ;
2122: LD_ADDR_OWVAR 33
2126: PUSH
2127: LD_STRING 
2129: ST_TO_ADDR
// hc_name =  ;
2130: LD_ADDR_OWVAR 26
2134: PUSH
2135: LD_STRING 
2137: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2138: LD_INT 0
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: LD_INT 4
2146: PPUSH
2147: CALL_OW 12
2151: PPUSH
2152: LD_INT 6
2154: PPUSH
2155: LD_INT 8
2157: PPUSH
2158: CALL_OW 12
2162: PPUSH
2163: CALL_OW 380
// un = CreateHuman ;
2167: LD_ADDR_VAR 0 3
2171: PUSH
2172: CALL_OW 44
2176: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2177: LD_VAR 0 3
2181: PPUSH
2182: LD_INT 6
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: CALL_OW 49
// end ;
2192: GO 2119
2194: POP
2195: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2196: LD_ADDR_VAR 0 4
2200: PUSH
2201: LD_INT 22
2203: PUSH
2204: LD_INT 4
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 21
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PUSH
2230: LD_EXP 17
2234: PUSH
2235: LD_EXP 1
2239: PUSH
2240: LD_EXP 2
2244: PUSH
2245: LD_EXP 3
2249: PUSH
2250: LD_EXP 4
2254: PUSH
2255: LD_EXP 5
2259: PUSH
2260: LD_EXP 6
2264: PUSH
2265: LD_EXP 7
2269: PUSH
2270: LD_EXP 8
2274: PUSH
2275: LD_EXP 9
2279: PUSH
2280: LD_EXP 10
2284: PUSH
2285: LD_EXP 11
2289: PUSH
2290: LD_EXP 12
2294: PUSH
2295: LD_EXP 13
2299: PUSH
2300: LD_EXP 14
2304: PUSH
2305: LD_EXP 15
2309: PUSH
2310: LD_EXP 16
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: DIFF
2334: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2335: LD_ADDR_EXP 65
2339: PUSH
2340: LD_VAR 0 4
2344: PPUSH
2345: LD_INT 1
2347: PPUSH
2348: CALL 7189 0 2
2352: ST_TO_ADDR
// for i = 1 to 8 do
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 8
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2397
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2369: LD_ADDR_EXP 66
2373: PUSH
2374: LD_EXP 66
2378: PUSH
2379: LD_EXP 65
2383: PUSH
2384: LD_VAR 0 2
2388: ARRAY
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
2395: GO 2366
2397: POP
2398: POP
// SetClass ( amUnitsAttack , 1 ) ;
2399: LD_EXP 66
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: CALL_OW 336
// end ;
2411: LD_VAR 0 1
2415: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2416: LD_INT 0
2418: PPUSH
2419: PPUSH
2420: PPUSH
// uc_side = 1 ;
2421: LD_ADDR_OWVAR 20
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// uc_nation = 1 ;
2429: LD_ADDR_OWVAR 21
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// for i := 1 to 5 do
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: DOUBLE
2443: LD_INT 1
2445: DEC
2446: ST_TO_ADDR
2447: LD_INT 5
2449: PUSH
2450: FOR_TO
2451: IFFALSE 2535
// begin vc_engine = 3 ;
2453: LD_ADDR_OWVAR 39
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_control = 3 ;
2461: LD_ADDR_OWVAR 38
2465: PUSH
2466: LD_INT 3
2468: ST_TO_ADDR
// vc_chassis = 3 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 3
2476: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2477: LD_ADDR_OWVAR 40
2481: PUSH
2482: LD_INT 5
2484: PUSH
2485: LD_INT 9
2487: PUSH
2488: LD_INT 7
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 1
2498: PPUSH
2499: LD_INT 3
2501: PPUSH
2502: CALL_OW 12
2506: ARRAY
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 14
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2450
2535: POP
2536: POP
// vc_engine = 3 ;
2537: LD_ADDR_OWVAR 39
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_control = 1 ;
2545: LD_ADDR_OWVAR 38
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// vc_chassis = 3 ;
2553: LD_ADDR_OWVAR 37
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2561: LD_ADDR_OWVAR 40
2565: PUSH
2566: LD_INT 5
2568: PUSH
2569: LD_INT 9
2571: PUSH
2572: LD_INT 7
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 1
2582: PPUSH
2583: LD_INT 3
2585: PPUSH
2586: CALL_OW 12
2590: ARRAY
2591: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2592: LD_ADDR_EXP 25
2596: PUSH
2597: CALL_OW 45
2601: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2602: LD_EXP 25
2606: PPUSH
2607: LD_INT 14
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if JMMGirl = 1 then
2617: LD_EXP 80
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2678
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2627: LD_ADDR_EXP 2
2631: PUSH
2632: LD_STRING 14_Joan
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL 6656 0 2
2642: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2643: LD_EXP 2
2647: PPUSH
2648: LD_EXP 25
2652: PPUSH
2653: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2657: LD_EXP 25
2661: PPUSH
2662: CALL_OW 87
// SayRadio ( Joan , D10BW-Joan-1 ) ;
2666: LD_EXP 2
2670: PPUSH
2671: LD_STRING D10BW-Joan-1
2673: PPUSH
2674: CALL_OW 94
// end ; if JMMGirl = 2 then
2678: LD_EXP 80
2682: PUSH
2683: LD_INT 2
2685: EQUAL
2686: IFFALSE 2739
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2688: LD_ADDR_EXP 4
2692: PUSH
2693: LD_STRING 14_Lisa
2695: PPUSH
2696: LD_INT 1
2698: PPUSH
2699: CALL 6656 0 2
2703: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2704: LD_EXP 4
2708: PPUSH
2709: LD_EXP 25
2713: PPUSH
2714: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2718: LD_EXP 25
2722: PPUSH
2723: CALL_OW 87
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
2727: LD_EXP 4
2731: PPUSH
2732: LD_STRING D10BW-Lisa-1
2734: PPUSH
2735: CALL_OW 94
// end ; if JMMGirl = 3 then
2739: LD_EXP 80
2743: PUSH
2744: LD_INT 3
2746: EQUAL
2747: IFFALSE 2800
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2749: LD_ADDR_EXP 16
2753: PUSH
2754: LD_STRING 14_Connie
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: CALL 6656 0 2
2764: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2765: LD_EXP 16
2769: PPUSH
2770: LD_EXP 25
2774: PPUSH
2775: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2779: LD_EXP 25
2783: PPUSH
2784: CALL_OW 87
// SayRadio ( Lisa , D10BW-Con-1 ) ;
2788: LD_EXP 4
2792: PPUSH
2793: LD_STRING D10BW-Con-1
2795: PPUSH
2796: CALL_OW 94
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
// uc_side = 1 ;
2816: LD_ADDR_OWVAR 20
2820: PUSH
2821: LD_INT 1
2823: ST_TO_ADDR
// uc_nation = 1 ;
2824: LD_ADDR_OWVAR 21
2828: PUSH
2829: LD_INT 1
2831: ST_TO_ADDR
// omegaVeh = [ ] ;
2832: LD_ADDR_VAR 0 3
2836: PUSH
2837: EMPTY
2838: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2839: LD_STRING 13s_Lisa
2841: PPUSH
2842: CALL_OW 28
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 2865
// Lisa = PrepareUnitOmega ( Lisa ) ;
2852: LD_ADDR_EXP 4
2856: PUSH
2857: LD_STRING Lisa
2859: PPUSH
2860: CALL 6770 0 1
2864: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2865: LD_STRING 13s_Donaldson
2867: PPUSH
2868: CALL_OW 28
2872: PUSH
2873: LD_INT 0
2875: EQUAL
2876: IFFALSE 2891
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2878: LD_ADDR_EXP 5
2882: PUSH
2883: LD_STRING Donaldson
2885: PPUSH
2886: CALL 6770 0 1
2890: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2891: LD_STRING 13s_Bobby
2893: PPUSH
2894: CALL_OW 28
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2917
// Bobby = PrepareUnitOmega ( Bobby ) ;
2904: LD_ADDR_EXP 6
2908: PUSH
2909: LD_STRING Bobby
2911: PPUSH
2912: CALL 6770 0 1
2916: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2917: LD_STRING 13s_Cyrus
2919: PPUSH
2920: CALL_OW 28
2924: PUSH
2925: LD_INT 0
2927: EQUAL
2928: IFFALSE 2943
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2930: LD_ADDR_EXP 7
2934: PUSH
2935: LD_STRING Cyrus
2937: PPUSH
2938: CALL 6770 0 1
2942: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2943: LD_STRING 13s_Denis
2945: PPUSH
2946: CALL_OW 28
2950: PUSH
2951: LD_INT 0
2953: EQUAL
2954: IFFALSE 2969
// Denis = PrepareUnitOmega ( Denis ) ;
2956: LD_ADDR_EXP 8
2960: PUSH
2961: LD_STRING Denis
2963: PPUSH
2964: CALL 6770 0 1
2968: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2969: LD_STRING 13s_Brown
2971: PPUSH
2972: CALL_OW 28
2976: PUSH
2977: LD_INT 0
2979: EQUAL
2980: IFFALSE 2995
// Brown = PrepareUnitOmega ( Brown ) ;
2982: LD_ADDR_EXP 9
2986: PUSH
2987: LD_STRING Brown
2989: PPUSH
2990: CALL 6770 0 1
2994: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2995: LD_STRING 13s_Gladstone
2997: PPUSH
2998: CALL_OW 28
3002: PUSH
3003: LD_INT 0
3005: EQUAL
3006: IFFALSE 3021
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
3008: LD_ADDR_EXP 10
3012: PUSH
3013: LD_STRING Gladstone
3015: PPUSH
3016: CALL 6770 0 1
3020: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3021: LD_STRING 13s_Houten
3023: PPUSH
3024: CALL_OW 28
3028: PUSH
3029: LD_INT 0
3031: EQUAL
3032: IFFALSE 3047
// Houten = PrepareUnitOmega ( Houten ) ;
3034: LD_ADDR_EXP 11
3038: PUSH
3039: LD_STRING Houten
3041: PPUSH
3042: CALL 6770 0 1
3046: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3047: LD_STRING 13s_Cornell
3049: PPUSH
3050: CALL_OW 28
3054: PUSH
3055: LD_INT 0
3057: EQUAL
3058: IFFALSE 3073
// Cornel = PrepareUnitOmega ( Cornell ) ;
3060: LD_ADDR_EXP 12
3064: PUSH
3065: LD_STRING Cornell
3067: PPUSH
3068: CALL 6770 0 1
3072: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3073: LD_STRING 13s_Gary
3075: PPUSH
3076: CALL_OW 28
3080: PUSH
3081: LD_INT 0
3083: EQUAL
3084: IFFALSE 3099
// Gary = PrepareUnitOmega ( Gary ) ;
3086: LD_ADDR_EXP 13
3090: PUSH
3091: LD_STRING Gary
3093: PPUSH
3094: CALL 6770 0 1
3098: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3099: LD_STRING 13s_Frank
3101: PPUSH
3102: CALL_OW 28
3106: PUSH
3107: LD_INT 0
3109: EQUAL
3110: IFFALSE 3125
// Frank = PrepareUnitOmega ( Frank ) ;
3112: LD_ADDR_EXP 14
3116: PUSH
3117: LD_STRING Frank
3119: PPUSH
3120: CALL 6770 0 1
3124: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3125: LD_STRING 13s_Kikuchi
3127: PPUSH
3128: CALL_OW 28
3132: PUSH
3133: LD_INT 0
3135: EQUAL
3136: IFFALSE 3151
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3138: LD_ADDR_EXP 15
3142: PUSH
3143: LD_STRING Kikuchi
3145: PPUSH
3146: CALL 6770 0 1
3150: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
3151: LD_EXP 80
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: PUSH
3160: LD_EXP 80
3164: PUSH
3165: LD_INT 2
3167: EQUAL
3168: OR
3169: IFFALSE 3184
// Connie = PrepareUnitOmega ( Connie ) ;
3171: LD_ADDR_EXP 16
3175: PUSH
3176: LD_STRING Connie
3178: PPUSH
3179: CALL 6770 0 1
3183: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3184: LD_ADDR_EXP 22
3188: PUSH
3189: LD_STRING Gordon
3191: PPUSH
3192: CALL 6770 0 1
3196: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3197: LD_ADDR_EXP 23
3201: PUSH
3202: LD_STRING Peter
3204: PPUSH
3205: CALL 6770 0 1
3209: ST_TO_ADDR
// if StevensStatus = 1 then
3210: LD_EXP 77
3214: PUSH
3215: LD_INT 1
3217: EQUAL
3218: IFFALSE 3235
// Stevens = PrepareUnitOmega ( Stevens ) else
3220: LD_ADDR_EXP 3
3224: PUSH
3225: LD_STRING Stevens
3227: PPUSH
3228: CALL 6770 0 1
3232: ST_TO_ADDR
3233: GO 3248
// Baker = PrepareUnitOmega ( Baker ) ;
3235: LD_ADDR_EXP 21
3239: PUSH
3240: LD_STRING Baker
3242: PPUSH
3243: CALL 6770 0 1
3247: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3248: LD_ADDR_EXP 19
3252: PUSH
3253: LD_STRING 15_other_survivors
3255: PPUSH
3256: CALL_OW 31
3260: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3261: LD_ADDR_VAR 0 7
3265: PUSH
3266: LD_STRING 15_Vehicles_1
3268: PPUSH
3269: EMPTY
3270: PPUSH
3271: CALL_OW 30
3275: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3276: LD_ADDR_VAR 0 8
3280: PUSH
3281: LD_STRING 15_ResourcesInCargo_1
3283: PPUSH
3284: EMPTY
3285: PPUSH
3286: CALL_OW 30
3290: ST_TO_ADDR
// for i := 1 to vehicles do
3291: LD_ADDR_VAR 0 2
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_VAR 0 7
3305: PUSH
3306: FOR_TO
3307: IFFALSE 3532
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3309: LD_ADDR_OWVAR 21
3313: PUSH
3314: LD_VAR 0 7
3318: PUSH
3319: LD_VAR 0 2
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3329: LD_ADDR_OWVAR 37
3333: PUSH
3334: LD_VAR 0 7
3338: PUSH
3339: LD_VAR 0 2
3343: ARRAY
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3349: LD_ADDR_OWVAR 39
3353: PUSH
3354: LD_VAR 0 7
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PUSH
3365: LD_INT 3
3367: ARRAY
3368: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3369: LD_ADDR_OWVAR 38
3373: PUSH
3374: LD_VAR 0 7
3378: PUSH
3379: LD_VAR 0 2
3383: ARRAY
3384: PUSH
3385: LD_INT 4
3387: ARRAY
3388: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3389: LD_ADDR_OWVAR 40
3393: PUSH
3394: LD_VAR 0 7
3398: PUSH
3399: LD_VAR 0 2
3403: ARRAY
3404: PUSH
3405: LD_INT 5
3407: ARRAY
3408: ST_TO_ADDR
// if vc_weapon = 8 then
3409: LD_OWVAR 40
3413: PUSH
3414: LD_INT 8
3416: EQUAL
3417: IFFALSE 3429
// vc_weapon = 9 else
3419: LD_ADDR_OWVAR 40
3423: PUSH
3424: LD_INT 9
3426: ST_TO_ADDR
3427: GO 3449
// vc_weapon = vehicles [ i ] [ 5 ] ;
3429: LD_ADDR_OWVAR 40
3433: PUSH
3434: LD_VAR 0 7
3438: PUSH
3439: LD_VAR 0 2
3443: ARRAY
3444: PUSH
3445: LD_INT 5
3447: ARRAY
3448: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3449: LD_ADDR_OWVAR 41
3453: PUSH
3454: LD_INT 40
3456: ST_TO_ADDR
// veh = CreateVehicle ;
3457: LD_ADDR_VAR 0 5
3461: PUSH
3462: CALL_OW 45
3466: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3467: LD_VAR 0 5
3471: PPUSH
3472: LD_INT 5
3474: PPUSH
3475: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3479: LD_VAR 0 5
3483: PPUSH
3484: LD_INT 300
3486: PPUSH
3487: LD_INT 800
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: LD_VAR 0 3
3508: PUSH
3509: LD_VAR 0 5
3513: ADD
3514: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3515: LD_VAR 0 5
3519: PPUSH
3520: LD_INT 16
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// end ;
3530: GO 3306
3532: POP
3533: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3534: LD_ADDR_VAR 0 9
3538: PUSH
3539: LD_INT 16
3541: PPUSH
3542: LD_INT 22
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 21
3554: PUSH
3555: LD_INT 2
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 34
3564: PUSH
3565: LD_INT 12
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: LD_INT 33
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 32
3584: PUSH
3585: LD_INT 3
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PPUSH
3599: CALL_OW 70
3603: ST_TO_ADDR
// if cargoList > 0 then
3604: LD_VAR 0 9
3608: PUSH
3609: LD_INT 0
3611: GREATER
3612: IFFALSE 3745
// for i = 1 to cargoList do
3614: LD_ADDR_VAR 0 2
3618: PUSH
3619: DOUBLE
3620: LD_INT 1
3622: DEC
3623: ST_TO_ADDR
3624: LD_VAR 0 9
3628: PUSH
3629: FOR_TO
3630: IFFALSE 3743
// begin if resources > 0 then
3632: LD_VAR 0 8
3636: PUSH
3637: LD_INT 0
3639: GREATER
3640: IFFALSE 3741
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3642: LD_VAR 0 9
3646: PUSH
3647: LD_VAR 0 2
3651: ARRAY
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_VAR 0 8
3660: PUSH
3661: LD_VAR 0 2
3665: ARRAY
3666: PUSH
3667: LD_INT 1
3669: ARRAY
3670: PPUSH
3671: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3675: LD_VAR 0 9
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: PPUSH
3686: LD_INT 2
3688: PPUSH
3689: LD_VAR 0 8
3693: PUSH
3694: LD_VAR 0 2
3698: ARRAY
3699: PUSH
3700: LD_INT 2
3702: ARRAY
3703: PPUSH
3704: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3708: LD_VAR 0 9
3712: PUSH
3713: LD_VAR 0 2
3717: ARRAY
3718: PPUSH
3719: LD_INT 3
3721: PPUSH
3722: LD_VAR 0 8
3726: PUSH
3727: LD_VAR 0 2
3731: ARRAY
3732: PUSH
3733: LD_INT 3
3735: ARRAY
3736: PPUSH
3737: CALL_OW 291
// end ; end ;
3741: GO 3629
3743: POP
3744: POP
// for i := 1 to heroesFromOmega do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_EXP 20
3759: PUSH
3760: FOR_TO
3761: IFFALSE 3791
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3763: LD_EXP 20
3767: PUSH
3768: LD_VAR 0 2
3772: ARRAY
3773: PPUSH
3774: LD_VAR 0 3
3778: PUSH
3779: LD_VAR 0 2
3783: ARRAY
3784: PPUSH
3785: CALL_OW 52
// end ;
3789: GO 3760
3791: POP
3792: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3793: LD_ADDR_VAR 0 6
3797: PUSH
3798: LD_VAR 0 3
3802: PPUSH
3803: LD_INT 58
3805: PUSH
3806: EMPTY
3807: LIST
3808: PPUSH
3809: CALL_OW 72
3813: ST_TO_ADDR
// for i := 1 to others13Omega do
3814: LD_ADDR_VAR 0 2
3818: PUSH
3819: DOUBLE
3820: LD_INT 1
3822: DEC
3823: ST_TO_ADDR
3824: LD_EXP 19
3828: PUSH
3829: FOR_TO
3830: IFFALSE 3860
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3832: LD_EXP 19
3836: PUSH
3837: LD_VAR 0 2
3841: ARRAY
3842: PPUSH
3843: LD_VAR 0 6
3847: PUSH
3848: LD_VAR 0 2
3852: ARRAY
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3829
3860: POP
3861: POP
// end ; end_of_file
3862: LD_VAR 0 1
3866: RET
// export function PrepareLegion ; var i ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
// uc_side = 8 ;
3871: LD_ADDR_OWVAR 20
3875: PUSH
3876: LD_INT 8
3878: ST_TO_ADDR
// uc_nation = 2 ;
3879: LD_ADDR_OWVAR 21
3883: PUSH
3884: LD_INT 2
3886: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3887: LD_ADDR_EXP 30
3891: PUSH
3892: LD_STRING Kurt
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 6656 0 2
3902: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3903: LD_ADDR_EXP 36
3907: PUSH
3908: LD_STRING Kozlov
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL 6656 0 2
3918: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3919: LD_INT 8
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: LD_INT 122
3927: PPUSH
3928: LD_INT 10
3930: PPUSH
3931: LD_INT 2
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3941: LD_INT 8
3943: PPUSH
3944: LD_INT 2
3946: PPUSH
3947: LD_INT 99
3949: PPUSH
3950: LD_INT 10
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: LD_INT 2
3958: PPUSH
3959: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3963: LD_INT 8
3965: PPUSH
3966: LD_INT 2
3968: PPUSH
3969: LD_INT 104
3971: PPUSH
3972: LD_INT 10
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: LD_INT 2
3980: PPUSH
3981: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3985: LD_INT 8
3987: PPUSH
3988: LD_INT 2
3990: PPUSH
3991: LD_INT 104
3993: PPUSH
3994: LD_INT 10
3996: PPUSH
3997: LD_INT 8
3999: PPUSH
4000: LD_INT 1
4002: PPUSH
4003: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
4007: LD_INT 8
4009: PPUSH
4010: LD_INT 2
4012: PPUSH
4013: LD_INT 118
4015: PPUSH
4016: LD_INT 10
4018: PPUSH
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4029: LD_INT 8
4031: PPUSH
4032: LD_INT 2
4034: PPUSH
4035: LD_INT 117
4037: PPUSH
4038: LD_INT 10
4040: PPUSH
4041: LD_INT 3
4043: PPUSH
4044: LD_INT 4
4046: PPUSH
4047: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4051: LD_INT 8
4053: PPUSH
4054: LD_INT 2
4056: PPUSH
4057: LD_INT 252
4059: PPUSH
4060: LD_INT 10
4062: PPUSH
4063: LD_INT 4
4065: PPUSH
4066: LD_INT 2
4068: PPUSH
4069: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4073: LD_ADDR_VAR 0 2
4077: PUSH
4078: LD_INT 22
4080: PUSH
4081: LD_INT 8
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 21
4090: PUSH
4091: LD_INT 3
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 30
4100: PUSH
4101: LD_INT 32
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 58
4110: PUSH
4111: EMPTY
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 69
4124: PUSH
4125: FOR_IN
4126: IFFALSE 4154
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4128: LD_INT 8
4130: PPUSH
4131: LD_INT 2
4133: PPUSH
4134: LD_VAR 0 2
4138: PPUSH
4139: LD_INT 10
4141: PPUSH
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 1
4147: PPUSH
4148: CALL 7750 0 6
4152: GO 4125
4154: POP
4155: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4156: LD_INT 8
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: LD_INT 140
4164: PPUSH
4165: LD_INT 10
4167: PPUSH
4168: LD_INT 3
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: CALL 7750 0 6
// arControler = UnitsInside ( ArControl ) ;
4178: LD_ADDR_EXP 56
4182: PUSH
4183: LD_INT 140
4185: PPUSH
4186: CALL_OW 313
4190: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4191: LD_INT 139
4193: PPUSH
4194: LD_EXP 56
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4207: LD_INT 138
4209: PPUSH
4210: LD_EXP 56
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: CALL_OW 195
// hc_name = Ali Hadarach ;
4223: LD_ADDR_OWVAR 26
4227: PUSH
4228: LD_STRING Ali Hadarach
4230: ST_TO_ADDR
// hc_gallery =  ;
4231: LD_ADDR_OWVAR 33
4235: PUSH
4236: LD_STRING 
4238: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 8
4244: PPUSH
4245: CALL_OW 383
// LegionFriend = CreateHuman ;
4249: LD_ADDR_EXP 53
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// end ; end_of_file
4259: LD_VAR 0 1
4263: RET
// export function PrepareRussians ; var i ; begin
4264: LD_INT 0
4266: PPUSH
4267: PPUSH
// uc_side = 3 ;
4268: LD_ADDR_OWVAR 20
4272: PUSH
4273: LD_INT 3
4275: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4276: LD_ADDR_EXP 26
4280: PUSH
4281: LD_STRING Platonov
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL 6656 0 2
4291: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4292: LD_EXP 26
4296: PPUSH
4297: LD_INT 23
4299: PPUSH
4300: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4304: LD_ADDR_EXP 27
4308: PUSH
4309: LD_STRING Yakotich
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: CALL 6656 0 2
4319: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4320: LD_EXP 27
4324: PPUSH
4325: LD_INT 26
4327: PPUSH
4328: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4332: LD_ADDR_EXP 37
4336: PUSH
4337: LD_STRING Kovalyuk
4339: PPUSH
4340: LD_INT 0
4342: PPUSH
4343: CALL 6656 0 2
4347: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4348: LD_EXP 37
4352: PPUSH
4353: LD_INT 3
4355: PPUSH
4356: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4360: LD_ADDR_EXP 58
4364: PUSH
4365: LD_EXP 58
4369: PUSH
4370: LD_EXP 37
4374: ADD
4375: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4376: LD_ADDR_EXP 38
4380: PUSH
4381: LD_STRING Oblukov
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL 6656 0 2
4391: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4392: LD_ADDR_EXP 39
4396: PUSH
4397: LD_STRING Bystrov
4399: PPUSH
4400: LD_INT 0
4402: PPUSH
4403: CALL 6656 0 2
4407: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4408: LD_ADDR_EXP 40
4412: PUSH
4413: LD_STRING Fadeev
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL 6656 0 2
4423: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4424: LD_ADDR_EXP 41
4428: PUSH
4429: LD_STRING Gleb
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL 6656 0 2
4439: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4440: LD_ADDR_EXP 42
4444: PUSH
4445: LD_STRING Petrosyan
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL 6656 0 2
4455: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4456: LD_ADDR_EXP 43
4460: PUSH
4461: LD_STRING Petrovova
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 6656 0 2
4471: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4472: LD_ADDR_EXP 44
4476: PUSH
4477: LD_STRING Kuzmov
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: CALL 6656 0 2
4487: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4488: LD_ADDR_EXP 45
4492: PUSH
4493: LD_STRING Mikhail
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL 6656 0 2
4503: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4504: LD_ADDR_EXP 46
4508: PUSH
4509: LD_STRING Furmanov
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL 6656 0 2
4519: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4520: LD_ADDR_EXP 47
4524: PUSH
4525: LD_STRING Belkov
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL 6656 0 2
4535: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4536: LD_EXP 38
4540: PPUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 21
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 30
4563: PUSH
4564: LD_INT 32
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 58
4573: PUSH
4574: EMPTY
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: PPUSH
4592: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4596: LD_EXP 40
4600: PPUSH
4601: LD_INT 22
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 30
4623: PUSH
4624: LD_INT 32
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 58
4633: PUSH
4634: EMPTY
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: PPUSH
4643: CALL_OW 69
4647: PUSH
4648: LD_INT 1
4650: ARRAY
4651: PPUSH
4652: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4656: LD_EXP 41
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 3
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 3
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 30
4683: PUSH
4684: LD_INT 32
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 58
4693: PUSH
4694: EMPTY
4695: LIST
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PUSH
4708: LD_INT 1
4710: ARRAY
4711: PPUSH
4712: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4716: LD_EXP 43
4720: PPUSH
4721: LD_INT 22
4723: PUSH
4724: LD_INT 3
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 21
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 30
4743: PUSH
4744: LD_INT 32
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 58
4753: PUSH
4754: EMPTY
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 69
4767: PUSH
4768: LD_INT 1
4770: ARRAY
4771: PPUSH
4772: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4776: LD_EXP 44
4780: PPUSH
4781: LD_INT 22
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 21
4793: PUSH
4794: LD_INT 3
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 30
4803: PUSH
4804: LD_INT 32
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 58
4813: PUSH
4814: EMPTY
4815: LIST
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: PPUSH
4823: CALL_OW 69
4827: PUSH
4828: LD_INT 1
4830: ARRAY
4831: PPUSH
4832: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4836: LD_EXP 46
4840: PPUSH
4841: LD_INT 22
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 30
4863: PUSH
4864: LD_INT 32
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 58
4873: PUSH
4874: EMPTY
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: PPUSH
4883: CALL_OW 69
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: PPUSH
4892: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4896: LD_EXP 47
4900: PPUSH
4901: LD_INT 22
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 21
4913: PUSH
4914: LD_INT 3
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 32
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 58
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4956: LD_EXP 39
4960: PPUSH
4961: LD_INT 2
4963: PPUSH
4964: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4968: LD_EXP 42
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4980: LD_EXP 45
4984: PPUSH
4985: LD_INT 26
4987: PPUSH
4988: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4992: LD_EXP 45
4996: PPUSH
4997: LD_INT 2
4999: PPUSH
5000: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
5004: LD_INT 3
5006: PPUSH
5007: LD_INT 3
5009: PPUSH
5010: LD_INT 26
5012: PPUSH
5013: LD_INT 10
5015: PPUSH
5016: LD_INT 2
5018: PPUSH
5019: LD_INT 5
5021: PPUSH
5022: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5026: LD_INT 3
5028: PPUSH
5029: LD_INT 3
5031: PPUSH
5032: LD_INT 23
5034: PPUSH
5035: LD_INT 10
5037: PPUSH
5038: LD_INT 2
5040: PPUSH
5041: LD_INT 4
5043: PPUSH
5044: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 3
5053: PPUSH
5054: LD_INT 27
5056: PPUSH
5057: LD_INT 10
5059: PPUSH
5060: LD_INT 9
5062: PPUSH
5063: LD_INT 6
5065: PPUSH
5066: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5070: LD_INT 3
5072: PPUSH
5073: LD_INT 3
5075: PPUSH
5076: LD_INT 27
5078: PPUSH
5079: LD_INT 10
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 3
5087: PPUSH
5088: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5092: LD_INT 3
5094: PPUSH
5095: LD_INT 3
5097: PPUSH
5098: LD_INT 4
5100: PPUSH
5101: LD_INT 10
5103: PPUSH
5104: LD_INT 3
5106: PPUSH
5107: LD_INT 6
5109: PPUSH
5110: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5114: LD_INT 3
5116: PPUSH
5117: LD_INT 3
5119: PPUSH
5120: LD_INT 10
5122: PPUSH
5123: LD_INT 10
5125: PPUSH
5126: LD_INT 3
5128: PPUSH
5129: LD_INT 6
5131: PPUSH
5132: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5136: LD_INT 3
5138: PPUSH
5139: LD_INT 3
5141: PPUSH
5142: LD_INT 2
5144: PPUSH
5145: LD_INT 10
5147: PPUSH
5148: LD_INT 4
5150: PPUSH
5151: LD_INT 3
5153: PPUSH
5154: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5158: LD_INT 3
5160: PPUSH
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 1
5166: PPUSH
5167: LD_INT 10
5169: PPUSH
5170: LD_INT 4
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5180: LD_ADDR_VAR 0 2
5184: PUSH
5185: LD_INT 22
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 3
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 30
5207: PUSH
5208: LD_INT 32
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: LD_INT 58
5217: PUSH
5218: EMPTY
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: PPUSH
5227: CALL_OW 69
5231: PUSH
5232: FOR_IN
5233: IFFALSE 5261
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5235: LD_INT 3
5237: PPUSH
5238: LD_INT 3
5240: PPUSH
5241: LD_VAR 0 2
5245: PPUSH
5246: LD_INT 10
5248: PPUSH
5249: LD_INT 1
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: CALL 7750 0 6
5259: GO 5232
5261: POP
5262: POP
// end ;
5263: LD_VAR 0 1
5267: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5268: LD_INT 0
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
// uc_side = 6 ;
5274: LD_ADDR_OWVAR 20
5278: PUSH
5279: LD_INT 6
5281: ST_TO_ADDR
// uc_nation = 1 ;
5282: LD_ADDR_OWVAR 21
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// vc_engine = 3 ;
5290: LD_ADDR_OWVAR 39
5294: PUSH
5295: LD_INT 3
5297: ST_TO_ADDR
// vc_control = 1 ;
5298: LD_ADDR_OWVAR 38
5302: PUSH
5303: LD_INT 1
5305: ST_TO_ADDR
// vc_chassis = 5 ;
5306: LD_ADDR_OWVAR 37
5310: PUSH
5311: LD_INT 5
5313: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5314: LD_ADDR_OWVAR 40
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: LD_INT 9
5324: PUSH
5325: LD_INT 7
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 1
5335: PPUSH
5336: LD_INT 3
5338: PPUSH
5339: CALL_OW 12
5343: ARRAY
5344: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5345: LD_ADDR_EXP 35
5349: PUSH
5350: CALL_OW 45
5354: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5355: LD_EXP 35
5359: PPUSH
5360: LD_INT 14
5362: PPUSH
5363: LD_INT 0
5365: PPUSH
5366: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5370: LD_ADDR_EXP 34
5374: PUSH
5375: LD_STRING Vsevolod
5377: PPUSH
5378: LD_INT 0
5380: PPUSH
5381: CALL 6656 0 2
5385: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5386: LD_EXP 34
5390: PPUSH
5391: LD_EXP 35
5395: PPUSH
5396: CALL_OW 52
// for i := 1 to 5 do
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 5
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5498
// begin vc_engine = 3 ;
5416: LD_ADDR_OWVAR 39
5420: PUSH
5421: LD_INT 3
5423: ST_TO_ADDR
// vc_control = 3 ;
5424: LD_ADDR_OWVAR 38
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_chassis = 3 ;
5432: LD_ADDR_OWVAR 37
5436: PUSH
5437: LD_INT 3
5439: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_INT 5
5447: PUSH
5448: LD_INT 9
5450: PUSH
5451: LD_INT 7
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 1
5461: PPUSH
5462: LD_INT 3
5464: PPUSH
5465: CALL_OW 12
5469: ARRAY
5470: ST_TO_ADDR
// veh = CreateVehicle ;
5471: LD_ADDR_VAR 0 3
5475: PUSH
5476: CALL_OW 45
5480: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5481: LD_VAR 0 3
5485: PPUSH
5486: LD_INT 14
5488: PPUSH
5489: LD_INT 0
5491: PPUSH
5492: CALL_OW 49
// end ;
5496: GO 5413
5498: POP
5499: POP
// uc_nation = 3 ;
5500: LD_ADDR_OWVAR 21
5504: PUSH
5505: LD_INT 3
5507: ST_TO_ADDR
// for i := 1 to 7 do
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_INT 7
5520: PUSH
5521: FOR_TO
5522: IFFALSE 5614
// begin vc_engine = 3 ;
5524: LD_ADDR_OWVAR 39
5528: PUSH
5529: LD_INT 3
5531: ST_TO_ADDR
// vc_control = 3 ;
5532: LD_ADDR_OWVAR 38
5536: PUSH
5537: LD_INT 3
5539: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5540: LD_ADDR_OWVAR 37
5544: PUSH
5545: LD_INT 24
5547: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5548: LD_ADDR_OWVAR 40
5552: PUSH
5553: LD_INT 44
5555: PUSH
5556: LD_INT 47
5558: PUSH
5559: LD_INT 45
5561: PUSH
5562: LD_INT 46
5564: PUSH
5565: LD_INT 49
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 1
5577: PPUSH
5578: LD_INT 4
5580: PPUSH
5581: CALL_OW 12
5585: ARRAY
5586: ST_TO_ADDR
// veh = CreateVehicle ;
5587: LD_ADDR_VAR 0 3
5591: PUSH
5592: CALL_OW 45
5596: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5597: LD_VAR 0 3
5601: PPUSH
5602: LD_INT 14
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5521
5614: POP
5615: POP
// repeat wait ( 0 0$1 ) ;
5616: LD_INT 35
5618: PPUSH
5619: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5623: LD_ADDR_VAR 0 4
5627: PUSH
5628: LD_INT 22
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 21
5640: PUSH
5641: LD_INT 2
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: LD_INT 50
5650: PUSH
5651: EMPTY
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 69
5663: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5664: LD_EXP 1
5668: PPUSH
5669: CALL_OW 310
5673: NOT
5674: IFFALSE 5707
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_EXP 1
5685: PPUSH
5686: CALL_OW 250
5690: PPUSH
5691: LD_EXP 1
5695: PPUSH
5696: CALL_OW 251
5700: PPUSH
5701: CALL_OW 114
5705: GO 5746
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_EXP 1
5716: PPUSH
5717: CALL_OW 310
5721: PPUSH
5722: CALL_OW 250
5726: PPUSH
5727: LD_EXP 1
5731: PPUSH
5732: CALL_OW 310
5736: PPUSH
5737: CALL_OW 251
5741: PPUSH
5742: CALL_OW 114
// until vehList = 0 ;
5746: LD_VAR 0 4
5750: PUSH
5751: LD_INT 0
5753: EQUAL
5754: IFFALSE 5616
// end ;
5756: LD_VAR 0 1
5760: RET
// export function PreapreMehBehs ; var i , un ; begin
5761: LD_INT 0
5763: PPUSH
5764: PPUSH
5765: PPUSH
// uc_side = 6 ;
5766: LD_ADDR_OWVAR 20
5770: PUSH
5771: LD_INT 6
5773: ST_TO_ADDR
// uc_nation = 3 ;
5774: LD_ADDR_OWVAR 21
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// for i := 1 to 3 do
5782: LD_ADDR_VAR 0 2
5786: PUSH
5787: DOUBLE
5788: LD_INT 1
5790: DEC
5791: ST_TO_ADDR
5792: LD_INT 3
5794: PUSH
5795: FOR_TO
5796: IFFALSE 5867
// begin hc_name =  ;
5798: LD_ADDR_OWVAR 26
5802: PUSH
5803: LD_STRING 
5805: ST_TO_ADDR
// hc_gallery =  ;
5806: LD_ADDR_OWVAR 33
5810: PUSH
5811: LD_STRING 
5813: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5814: LD_INT 0
5816: PPUSH
5817: LD_INT 10
5819: PPUSH
5820: CALL_OW 383
// un = CreateHuman ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: CALL_OW 44
5833: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5834: LD_ADDR_EXP 58
5838: PUSH
5839: LD_EXP 58
5843: PUSH
5844: LD_VAR 0 3
5848: ADD
5849: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5850: LD_VAR 0 3
5854: PPUSH
5855: LD_INT 17
5857: PPUSH
5858: LD_INT 0
5860: PPUSH
5861: CALL_OW 49
// end ;
5865: GO 5795
5867: POP
5868: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5869: LD_EXP 37
5873: PPUSH
5874: LD_INT 17
5876: PPUSH
5877: LD_INT 0
5879: PPUSH
5880: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5884: LD_EXP 37
5888: PPUSH
5889: LD_INT 6
5891: PPUSH
5892: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5896: LD_INT 145
5898: PPUSH
5899: LD_INT 6
5901: PPUSH
5902: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5906: LD_EXP 58
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: PPUSH
5915: LD_INT 37
5917: PPUSH
5918: LD_INT 193
5920: PPUSH
5921: LD_INT 118
5923: PPUSH
5924: LD_INT 0
5926: PPUSH
5927: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5931: LD_EXP 58
5935: PUSH
5936: LD_INT 2
5938: ARRAY
5939: PPUSH
5940: LD_INT 37
5942: PPUSH
5943: LD_INT 204
5945: PPUSH
5946: LD_INT 119
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5956: LD_EXP 58
5960: PUSH
5961: LD_INT 3
5963: ARRAY
5964: PPUSH
5965: LD_INT 37
5967: PPUSH
5968: LD_INT 195
5970: PPUSH
5971: LD_INT 126
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5981: LD_EXP 58
5985: PUSH
5986: LD_INT 4
5988: ARRAY
5989: PPUSH
5990: LD_INT 37
5992: PPUSH
5993: LD_INT 207
5995: PPUSH
5996: LD_INT 126
5998: PPUSH
5999: LD_INT 0
6001: PPUSH
6002: CALL_OW 170
// end ; end_of_file
6006: LD_VAR 0 1
6010: RET
// export function PrepareAlliance ; var i ; begin
6011: LD_INT 0
6013: PPUSH
6014: PPUSH
// uc_side = 7 ;
6015: LD_ADDR_OWVAR 20
6019: PUSH
6020: LD_INT 7
6022: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6023: LD_ADDR_EXP 28
6027: PUSH
6028: LD_STRING Roth
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL 6656 0 2
6038: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6039: LD_EXP 28
6043: PPUSH
6044: LD_INT 31
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6054: LD_EXP 28
6058: PPUSH
6059: LD_INT 248
6061: PPUSH
6062: LD_INT 187
6064: PPUSH
6065: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6069: LD_STRING 10c_Simms
6071: PPUSH
6072: CALL_OW 28
6076: PUSH
6077: LD_INT 1
6079: EQUAL
6080: IFFALSE 6130
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6082: LD_ADDR_EXP 48
6086: PUSH
6087: LD_STRING 10c_Simms
6089: PPUSH
6090: LD_INT 1
6092: PPUSH
6093: CALL 6656 0 2
6097: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6098: LD_EXP 48
6102: PPUSH
6103: LD_INT 32
6105: PPUSH
6106: LD_INT 0
6108: PPUSH
6109: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6113: LD_EXP 48
6117: PPUSH
6118: LD_INT 248
6120: PPUSH
6121: LD_INT 187
6123: PPUSH
6124: CALL_OW 118
// end else
6128: GO 6204
// begin uc_nation = 1 ;
6130: LD_ADDR_OWVAR 21
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// hc_name =  ;
6138: LD_ADDR_OWVAR 26
6142: PUSH
6143: LD_STRING 
6145: ST_TO_ADDR
// hc_gallery =  ;
6146: LD_ADDR_OWVAR 33
6150: PUSH
6151: LD_STRING 
6153: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6154: LD_INT 2
6156: PPUSH
6157: LD_INT 10
6159: PPUSH
6160: CALL_OW 384
// Simms = CreateHuman ;
6164: LD_ADDR_EXP 48
6168: PUSH
6169: CALL_OW 44
6173: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6174: LD_EXP 48
6178: PPUSH
6179: LD_INT 32
6181: PPUSH
6182: LD_INT 0
6184: PPUSH
6185: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6189: LD_EXP 48
6193: PPUSH
6194: LD_INT 248
6196: PPUSH
6197: LD_INT 187
6199: PPUSH
6200: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6204: LD_ADDR_EXP 49
6208: PUSH
6209: LD_STRING Scholtze
6211: PPUSH
6212: LD_INT 0
6214: PPUSH
6215: CALL 6656 0 2
6219: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6220: LD_ADDR_EXP 50
6224: PUSH
6225: LD_STRING Kirilenkova
6227: PPUSH
6228: LD_INT 0
6230: PPUSH
6231: CALL 6656 0 2
6235: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6236: LD_ADDR_EXP 51
6240: PUSH
6241: LD_STRING Kapitsova
6243: PPUSH
6244: LD_INT 0
6246: PPUSH
6247: CALL 6656 0 2
6251: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6252: LD_ADDR_EXP 52
6256: PUSH
6257: LD_STRING Karamazov
6259: PPUSH
6260: LD_INT 0
6262: PPUSH
6263: CALL 6656 0 2
6267: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6268: LD_EXP 49
6272: PPUSH
6273: LD_INT 39
6275: PPUSH
6276: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6280: LD_EXP 50
6284: PPUSH
6285: LD_INT 133
6287: PPUSH
6288: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6292: LD_EXP 51
6296: PPUSH
6297: LD_INT 133
6299: PPUSH
6300: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6304: LD_EXP 52
6308: PPUSH
6309: LD_INT 45
6311: PPUSH
6312: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6316: LD_INT 7
6318: PPUSH
6319: LD_INT 1
6321: PPUSH
6322: LD_INT 45
6324: PPUSH
6325: LD_INT 10
6327: PPUSH
6328: LD_INT 2
6330: PPUSH
6331: LD_INT 2
6333: PPUSH
6334: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6338: LD_INT 7
6340: PPUSH
6341: LD_INT 3
6343: PPUSH
6344: LD_INT 45
6346: PPUSH
6347: LD_INT 10
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: LD_INT 2
6355: PPUSH
6356: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6360: LD_INT 7
6362: PPUSH
6363: LD_INT 1
6365: PPUSH
6366: LD_INT 194
6368: PPUSH
6369: LD_INT 10
6371: PPUSH
6372: LD_INT 5
6374: PPUSH
6375: LD_INT 4
6377: PPUSH
6378: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6382: LD_INT 7
6384: PPUSH
6385: LD_INT 3
6387: PPUSH
6388: LD_INT 194
6390: PPUSH
6391: LD_INT 10
6393: PPUSH
6394: LD_INT 8
6396: PPUSH
6397: LD_INT 6
6399: PPUSH
6400: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6404: LD_INT 7
6406: PPUSH
6407: LD_INT 1
6409: PPUSH
6410: LD_INT 156
6412: PPUSH
6413: LD_INT 10
6415: PPUSH
6416: LD_INT 3
6418: PPUSH
6419: LD_INT 6
6421: PPUSH
6422: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6426: LD_INT 7
6428: PPUSH
6429: LD_INT 3
6431: PPUSH
6432: LD_INT 162
6434: PPUSH
6435: LD_INT 10
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 6
6443: PPUSH
6444: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6448: LD_INT 7
6450: PPUSH
6451: LD_INT 3
6453: PPUSH
6454: LD_INT 39
6456: PPUSH
6457: LD_INT 10
6459: PPUSH
6460: LD_INT 4
6462: PPUSH
6463: LD_INT 3
6465: PPUSH
6466: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6470: LD_INT 7
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 133
6478: PPUSH
6479: LD_INT 10
6481: PPUSH
6482: LD_INT 4
6484: PPUSH
6485: LD_INT 2
6487: PPUSH
6488: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6492: LD_INT 7
6494: PPUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_INT 46
6500: PPUSH
6501: LD_INT 10
6503: PPUSH
6504: LD_INT 4
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 7
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 21
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 32
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 58
6551: PUSH
6552: EMPTY
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: PPUSH
6561: CALL_OW 69
6565: PUSH
6566: FOR_IN
6567: IFFALSE 6614
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6569: LD_INT 7
6571: PPUSH
6572: LD_INT 1
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 1
6584: PPUSH
6585: LD_INT 2
6587: PPUSH
6588: CALL_OW 12
6592: ARRAY
6593: PPUSH
6594: LD_VAR 0 2
6598: PPUSH
6599: LD_INT 10
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 1
6607: PPUSH
6608: CALL 7750 0 6
6612: GO 6566
6614: POP
6615: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6616: LD_INT 7
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 226
6624: PPUSH
6625: LD_INT 10
6627: PPUSH
6628: LD_INT 3
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: CALL 7750 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6638: LD_ADDR_EXP 63
6642: PUSH
6643: LD_INT 226
6645: PPUSH
6646: CALL_OW 313
6650: ST_TO_ADDR
// end ; end_of_file
6651: LD_VAR 0 1
6655: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6656: LD_INT 0
6658: PPUSH
6659: PPUSH
// if exist_mode then
6660: LD_VAR 0 2
6664: IFFALSE 6683
// unit := CreateCharacter ( ident ) else
6666: LD_ADDR_VAR 0 4
6670: PUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 34
6680: ST_TO_ADDR
6681: GO 6698
// unit := NewCharacter ( ident ) ;
6683: LD_ADDR_VAR 0 4
6687: PUSH
6688: LD_VAR 0 1
6692: PPUSH
6693: CALL_OW 25
6697: ST_TO_ADDR
// result := unit ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_VAR 0 4
6707: ST_TO_ADDR
// end ;
6708: LD_VAR 0 3
6712: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6713: LD_INT 0
6715: PPUSH
6716: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6717: LD_STRING 13s_
6719: PUSH
6720: LD_VAR 0 1
6724: STR
6725: PPUSH
6726: CALL_OW 28
6730: PUSH
6731: LD_INT 1
6733: EQUAL
6734: IFFALSE 6755
// unit = CreateCharacter ( 13s_ & ident ) ;
6736: LD_ADDR_VAR 0 3
6740: PUSH
6741: LD_STRING 13s_
6743: PUSH
6744: LD_VAR 0 1
6748: STR
6749: PPUSH
6750: CALL_OW 34
6754: ST_TO_ADDR
// result := unit ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_VAR 0 3
6764: ST_TO_ADDR
// end ;
6765: LD_VAR 0 2
6769: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6770: LD_INT 0
6772: PPUSH
6773: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6774: LD_STRING 15_
6776: PUSH
6777: LD_VAR 0 1
6781: STR
6782: PPUSH
6783: CALL_OW 28
6787: PUSH
6788: LD_INT 1
6790: EQUAL
6791: IFFALSE 6828
// begin unit = CreateCharacter ( 15_ & ident ) ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_STRING 15_
6800: PUSH
6801: LD_VAR 0 1
6805: STR
6806: PPUSH
6807: CALL_OW 34
6811: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6812: LD_ADDR_EXP 20
6816: PUSH
6817: LD_EXP 20
6821: PUSH
6822: LD_VAR 0 3
6826: ADD
6827: ST_TO_ADDR
// end ; result := unit ;
6828: LD_ADDR_VAR 0 2
6832: PUSH
6833: LD_VAR 0 3
6837: ST_TO_ADDR
// end ;
6838: LD_VAR 0 2
6842: RET
// export function TabLenght ( tab ) ; var i ; begin
6843: LD_INT 0
6845: PPUSH
6846: PPUSH
// for i = 1 to tab do
6847: LD_ADDR_VAR 0 3
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 1
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6877
// result = i ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_VAR 0 3
6874: ST_TO_ADDR
6875: GO 6862
6877: POP
6878: POP
// end ;
6879: LD_VAR 0 2
6883: RET
// export function Video ( mode ) ; begin
6884: LD_INT 0
6886: PPUSH
// ingame_video = mode ;
6887: LD_ADDR_OWVAR 52
6891: PUSH
6892: LD_VAR 0 1
6896: ST_TO_ADDR
// interface_hidden = mode ;
6897: LD_ADDR_OWVAR 54
6901: PUSH
6902: LD_VAR 0 1
6906: ST_TO_ADDR
// end ;
6907: LD_VAR 0 2
6911: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
6916: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6917: LD_ADDR_VAR 0 1
6921: PUSH
6922: LD_VAR 0 1
6926: PUSH
6927: LD_EXP 1
6931: PUSH
6932: LD_EXP 3
6936: PUSH
6937: LD_EXP 21
6941: PUSH
6942: LD_EXP 22
6946: PUSH
6947: LD_EXP 23
6951: PUSH
6952: LD_EXP 4
6956: PUSH
6957: LD_EXP 5
6961: PUSH
6962: LD_EXP 6
6966: PUSH
6967: LD_EXP 7
6971: PUSH
6972: LD_EXP 8
6976: PUSH
6977: LD_EXP 9
6981: PUSH
6982: LD_EXP 10
6986: PUSH
6987: LD_EXP 11
6991: PUSH
6992: LD_EXP 12
6996: PUSH
6997: LD_EXP 13
7001: PUSH
7002: LD_EXP 14
7006: PUSH
7007: LD_EXP 15
7011: PUSH
7012: LD_EXP 17
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: DIFF
7037: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7038: LD_ADDR_VAR 0 6
7042: PUSH
7043: LD_INT 1
7045: PPUSH
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 12
7055: ST_TO_ADDR
// for i = 1 to characters do
7056: LD_ADDR_VAR 0 5
7060: PUSH
7061: DOUBLE
7062: LD_INT 1
7064: DEC
7065: ST_TO_ADDR
7066: LD_VAR 0 1
7070: PUSH
7071: FOR_TO
7072: IFFALSE 7182
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7074: LD_VAR 0 5
7078: PUSH
7079: LD_VAR 0 6
7083: EQUAL
7084: PUSH
7085: LD_VAR 0 1
7089: PUSH
7090: LD_VAR 0 5
7094: ARRAY
7095: PPUSH
7096: CALL_OW 258
7100: PUSH
7101: LD_INT 1
7103: EQUAL
7104: AND
7105: IFFALSE 7127
// Say ( characters [ i ] , dialogMID ) ;
7107: LD_VAR 0 1
7111: PUSH
7112: LD_VAR 0 5
7116: ARRAY
7117: PPUSH
7118: LD_VAR 0 2
7122: PPUSH
7123: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7127: LD_VAR 0 5
7131: PUSH
7132: LD_VAR 0 6
7136: EQUAL
7137: PUSH
7138: LD_VAR 0 1
7142: PUSH
7143: LD_VAR 0 5
7147: ARRAY
7148: PPUSH
7149: CALL_OW 258
7153: PUSH
7154: LD_INT 2
7156: EQUAL
7157: AND
7158: IFFALSE 7180
// Say ( characters [ i ] , dialogFID ) ;
7160: LD_VAR 0 1
7164: PUSH
7165: LD_VAR 0 5
7169: ARRAY
7170: PPUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 88
// end ;
7180: GO 7071
7182: POP
7183: POP
// end ;
7184: LD_VAR 0 4
7188: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
// if not list then
7195: LD_VAR 0 1
7199: NOT
7200: IFFALSE 7204
// exit ;
7202: GO 7551
// result := [ ] ;
7204: LD_ADDR_VAR 0 3
7208: PUSH
7209: EMPTY
7210: ST_TO_ADDR
// for i in list do
7211: LD_ADDR_VAR 0 4
7215: PUSH
7216: LD_VAR 0 1
7220: PUSH
7221: FOR_IN
7222: IFFALSE 7463
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7224: LD_ADDR_VAR 0 6
7228: PUSH
7229: LD_VAR 0 4
7233: PPUSH
7234: LD_INT 1
7236: PPUSH
7237: CALL_OW 259
7241: PUSH
7242: LD_VAR 0 4
7246: PPUSH
7247: LD_INT 2
7249: PPUSH
7250: CALL_OW 259
7254: PLUS
7255: PUSH
7256: LD_VAR 0 4
7260: PPUSH
7261: LD_INT 3
7263: PPUSH
7264: CALL_OW 259
7268: PLUS
7269: PUSH
7270: LD_VAR 0 4
7274: PPUSH
7275: LD_INT 4
7277: PPUSH
7278: CALL_OW 259
7282: PLUS
7283: PUSH
7284: LD_INT 4
7286: DIV
7287: ST_TO_ADDR
// if not result then
7288: LD_VAR 0 3
7292: NOT
7293: IFFALSE 7319
// result := [ [ i , tmp ] ] else
7295: LD_ADDR_VAR 0 3
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_VAR 0 6
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: ST_TO_ADDR
7317: GO 7461
// begin if result [ result ] [ 2 ] <= tmp then
7319: LD_VAR 0 3
7323: PUSH
7324: LD_VAR 0 3
7328: ARRAY
7329: PUSH
7330: LD_INT 2
7332: ARRAY
7333: PUSH
7334: LD_VAR 0 6
7338: LESSEQUAL
7339: IFFALSE 7381
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_VAR 0 3
7350: PPUSH
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 1
7358: PLUS
7359: PPUSH
7360: LD_VAR 0 4
7364: PUSH
7365: LD_VAR 0 6
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 2
7378: ST_TO_ADDR
7379: GO 7461
// for j = 1 to result do
7381: LD_ADDR_VAR 0 5
7385: PUSH
7386: DOUBLE
7387: LD_INT 1
7389: DEC
7390: ST_TO_ADDR
7391: LD_VAR 0 3
7395: PUSH
7396: FOR_TO
7397: IFFALSE 7459
// begin if tmp < result [ j ] [ 2 ] then
7399: LD_VAR 0 6
7403: PUSH
7404: LD_VAR 0 3
7408: PUSH
7409: LD_VAR 0 5
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: LESS
7419: IFFALSE 7457
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7421: LD_ADDR_VAR 0 3
7425: PUSH
7426: LD_VAR 0 3
7430: PPUSH
7431: LD_VAR 0 5
7435: PPUSH
7436: LD_VAR 0 4
7440: PUSH
7441: LD_VAR 0 6
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 2
7454: ST_TO_ADDR
// break ;
7455: GO 7459
// end ; end ;
7457: GO 7396
7459: POP
7460: POP
// end ; end ;
7461: GO 7221
7463: POP
7464: POP
// if result and not asc then
7465: LD_VAR 0 3
7469: PUSH
7470: LD_VAR 0 2
7474: NOT
7475: AND
7476: IFFALSE 7551
// begin tmp := result ;
7478: LD_ADDR_VAR 0 6
7482: PUSH
7483: LD_VAR 0 3
7487: ST_TO_ADDR
// for i = tmp downto 1 do
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: DOUBLE
7494: LD_VAR 0 6
7498: INC
7499: ST_TO_ADDR
7500: LD_INT 1
7502: PUSH
7503: FOR_DOWNTO
7504: IFFALSE 7549
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_VAR 0 3
7515: PPUSH
7516: LD_VAR 0 6
7520: PUSH
7521: LD_VAR 0 4
7525: MINUS
7526: PUSH
7527: LD_INT 1
7529: PLUS
7530: PPUSH
7531: LD_VAR 0 6
7535: PUSH
7536: LD_VAR 0 4
7540: ARRAY
7541: PPUSH
7542: CALL_OW 1
7546: ST_TO_ADDR
7547: GO 7503
7549: POP
7550: POP
// end ; end ;
7551: LD_VAR 0 3
7555: RET
// export function PrepareDifficulty ; begin
7556: LD_INT 0
7558: PPUSH
// if difficulty = 1 then
7559: LD_OWVAR 67
7563: PUSH
7564: LD_INT 1
7566: EQUAL
7567: IFFALSE 7595
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7569: LD_INT 51
7571: PPUSH
7572: LD_INT 6
7574: PPUSH
7575: LD_INT 2
7577: PPUSH
7578: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7582: LD_INT 57
7584: PPUSH
7585: LD_INT 6
7587: PPUSH
7588: LD_INT 2
7590: PPUSH
7591: CALL_OW 322
// end ; if difficulty = 2 then
7595: LD_OWVAR 67
7599: PUSH
7600: LD_INT 2
7602: EQUAL
7603: IFFALSE 7657
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7605: LD_INT 51
7607: PPUSH
7608: LD_INT 6
7610: PPUSH
7611: LD_INT 2
7613: PPUSH
7614: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7618: LD_INT 57
7620: PPUSH
7621: LD_INT 6
7623: PPUSH
7624: LD_INT 2
7626: PPUSH
7627: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7631: LD_INT 52
7633: PPUSH
7634: LD_INT 6
7636: PPUSH
7637: LD_INT 2
7639: PPUSH
7640: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7644: LD_INT 58
7646: PPUSH
7647: LD_INT 6
7649: PPUSH
7650: LD_INT 2
7652: PPUSH
7653: CALL_OW 322
// end ; if difficulty = 3 then
7657: LD_OWVAR 67
7661: PUSH
7662: LD_INT 3
7664: EQUAL
7665: IFFALSE 7745
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7667: LD_INT 51
7669: PPUSH
7670: LD_INT 6
7672: PPUSH
7673: LD_INT 2
7675: PPUSH
7676: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7680: LD_INT 57
7682: PPUSH
7683: LD_INT 6
7685: PPUSH
7686: LD_INT 2
7688: PPUSH
7689: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7693: LD_INT 52
7695: PPUSH
7696: LD_INT 6
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7706: LD_INT 58
7708: PPUSH
7709: LD_INT 6
7711: PPUSH
7712: LD_INT 2
7714: PPUSH
7715: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7719: LD_INT 53
7721: PPUSH
7722: LD_INT 6
7724: PPUSH
7725: LD_INT 2
7727: PPUSH
7728: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7732: LD_INT 59
7734: PPUSH
7735: LD_INT 6
7737: PPUSH
7738: LD_INT 2
7740: PPUSH
7741: CALL_OW 322
// end ; end ;
7745: LD_VAR 0 1
7749: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7750: LD_INT 0
7752: PPUSH
7753: PPUSH
7754: PPUSH
7755: PPUSH
7756: PPUSH
// for i = 1 to count do
7757: LD_ADDR_VAR 0 8
7761: PUSH
7762: DOUBLE
7763: LD_INT 1
7765: DEC
7766: ST_TO_ADDR
7767: LD_VAR 0 6
7771: PUSH
7772: FOR_TO
7773: IFFALSE 7854
// begin uc_side = side ;
7775: LD_ADDR_OWVAR 20
7779: PUSH
7780: LD_VAR 0 1
7784: ST_TO_ADDR
// uc_nation = nation ;
7785: LD_ADDR_OWVAR 21
7789: PUSH
7790: LD_VAR 0 2
7794: ST_TO_ADDR
// hc_gallery =  ;
7795: LD_ADDR_OWVAR 33
7799: PUSH
7800: LD_STRING 
7802: ST_TO_ADDR
// hc_name =  ;
7803: LD_ADDR_OWVAR 26
7807: PUSH
7808: LD_STRING 
7810: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7811: LD_INT 0
7813: PPUSH
7814: LD_VAR 0 5
7818: PPUSH
7819: LD_VAR 0 4
7823: PPUSH
7824: CALL_OW 380
// un = CreateHuman ;
7828: LD_ADDR_VAR 0 10
7832: PUSH
7833: CALL_OW 44
7837: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7838: LD_VAR 0 10
7842: PPUSH
7843: LD_VAR 0 3
7847: PPUSH
7848: CALL_OW 52
// end ;
7852: GO 7772
7854: POP
7855: POP
// end ;
7856: LD_VAR 0 7
7860: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7874: LD_INT 2100
7876: PUSH
7877: LD_INT 3150
7879: PUSH
7880: LD_INT 4200
7882: PUSH
7883: LD_INT 5250
7885: PUSH
7886: LD_INT 6300
7888: PUSH
7889: LD_INT 7350
7891: PUSH
7892: LD_INT 8400
7894: PUSH
7895: LD_INT 9450
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 1
7910: PPUSH
7911: LD_INT 8
7913: PPUSH
7914: CALL_OW 12
7918: ARRAY
7919: PPUSH
7920: CALL_OW 67
// amChassisTab = [ ] ;
7924: LD_ADDR_VAR 0 19
7928: PUSH
7929: EMPTY
7930: ST_TO_ADDR
// arChassisTab = [ ] ;
7931: LD_ADDR_VAR 0 18
7935: PUSH
7936: EMPTY
7937: ST_TO_ADDR
// ruChassisTab = [ ] ;
7938: LD_ADDR_VAR 0 17
7942: PUSH
7943: EMPTY
7944: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7945: LD_INT 35
7947: PPUSH
7948: CALL_OW 67
// if nation = 1 then
7952: LD_VAR 0 5
7956: PUSH
7957: LD_INT 1
7959: EQUAL
7960: IFFALSE 8451
// begin uc_side = side ;
7962: LD_ADDR_OWVAR 20
7966: PUSH
7967: LD_VAR 0 2
7971: ST_TO_ADDR
// uc_nation = nation ;
7972: LD_ADDR_OWVAR 21
7976: PUSH
7977: LD_VAR 0 5
7981: ST_TO_ADDR
// vc_engine = vehengine ;
7982: LD_ADDR_OWVAR 39
7986: PUSH
7987: LD_VAR 0 6
7991: ST_TO_ADDR
// vc_control = vehcontrol ;
7992: LD_ADDR_OWVAR 38
7996: PUSH
7997: LD_VAR 0 7
8001: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8002: LD_ADDR_OWVAR 40
8006: PUSH
8007: LD_VAR 0 10
8011: PUSH
8012: LD_INT 1
8014: PPUSH
8015: LD_VAR 0 10
8019: PPUSH
8020: CALL_OW 12
8024: ARRAY
8025: ST_TO_ADDR
// for j = 1 to AMWeapon do
8026: LD_ADDR_VAR 0 14
8030: PUSH
8031: DOUBLE
8032: LD_INT 1
8034: DEC
8035: ST_TO_ADDR
8036: LD_VAR 0 10
8040: PUSH
8041: FOR_TO
8042: IFFALSE 8343
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8044: LD_VAR 0 10
8048: PUSH
8049: LD_VAR 0 14
8053: ARRAY
8054: PUSH
8055: LD_INT 2
8057: EQUAL
8058: PUSH
8059: LD_VAR 0 10
8063: PUSH
8064: LD_VAR 0 14
8068: ARRAY
8069: PUSH
8070: LD_INT 3
8072: EQUAL
8073: OR
8074: IFFALSE 8127
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8076: LD_ADDR_VAR 0 19
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: LD_INT 2
8086: PUSH
8087: LD_INT 3
8089: PUSH
8090: LD_INT 4
8092: PUSH
8093: LD_INT 5
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8103: LD_ADDR_OWVAR 37
8107: PUSH
8108: LD_VAR 0 19
8112: PUSH
8113: LD_INT 1
8115: PPUSH
8116: LD_VAR 0 19
8120: PPUSH
8121: CALL_OW 12
8125: ARRAY
8126: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8127: LD_VAR 0 10
8131: PUSH
8132: LD_VAR 0 14
8136: ARRAY
8137: PUSH
8138: LD_INT 4
8140: EQUAL
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_VAR 0 14
8151: ARRAY
8152: PUSH
8153: LD_INT 5
8155: EQUAL
8156: OR
8157: PUSH
8158: LD_VAR 0 10
8162: PUSH
8163: LD_VAR 0 14
8167: ARRAY
8168: PUSH
8169: LD_INT 9
8171: EQUAL
8172: OR
8173: PUSH
8174: LD_VAR 0 10
8178: PUSH
8179: LD_VAR 0 14
8183: ARRAY
8184: PUSH
8185: LD_INT 11
8187: EQUAL
8188: OR
8189: PUSH
8190: LD_VAR 0 10
8194: PUSH
8195: LD_VAR 0 14
8199: ARRAY
8200: PUSH
8201: LD_INT 7
8203: EQUAL
8204: OR
8205: IFFALSE 8254
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8207: LD_ADDR_VAR 0 19
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: LD_INT 3
8217: PUSH
8218: LD_INT 4
8220: PUSH
8221: LD_INT 5
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8230: LD_ADDR_OWVAR 37
8234: PUSH
8235: LD_VAR 0 19
8239: PUSH
8240: LD_INT 1
8242: PPUSH
8243: LD_VAR 0 19
8247: PPUSH
8248: CALL_OW 12
8252: ARRAY
8253: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8254: LD_VAR 0 10
8258: PUSH
8259: LD_VAR 0 14
8263: ARRAY
8264: PUSH
8265: LD_INT 8
8267: EQUAL
8268: PUSH
8269: LD_VAR 0 10
8273: PUSH
8274: LD_VAR 0 14
8278: ARRAY
8279: PUSH
8280: LD_INT 6
8282: EQUAL
8283: OR
8284: PUSH
8285: LD_VAR 0 10
8289: PUSH
8290: LD_VAR 0 14
8294: ARRAY
8295: PUSH
8296: LD_INT 10
8298: EQUAL
8299: OR
8300: IFFALSE 8341
// begin amChassisTab = [ 4 , 5 ] ;
8302: LD_ADDR_VAR 0 19
8306: PUSH
8307: LD_INT 4
8309: PUSH
8310: LD_INT 5
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8317: LD_ADDR_OWVAR 37
8321: PUSH
8322: LD_VAR 0 19
8326: PUSH
8327: LD_INT 1
8329: PPUSH
8330: LD_VAR 0 19
8334: PPUSH
8335: CALL_OW 12
8339: ARRAY
8340: ST_TO_ADDR
// end ; end ;
8341: GO 8041
8343: POP
8344: POP
// veh = CreateVehicle ;
8345: LD_ADDR_VAR 0 16
8349: PUSH
8350: CALL_OW 45
8354: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8355: LD_VAR 0 16
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_INT 0
8367: PPUSH
8368: CALL_OW 49
// if vc_control = 1 then
8372: LD_OWVAR 38
8376: PUSH
8377: LD_INT 1
8379: EQUAL
8380: IFFALSE 8437
// begin hc_gallery =  ;
8382: LD_ADDR_OWVAR 33
8386: PUSH
8387: LD_STRING 
8389: ST_TO_ADDR
// hc_name =  ;
8390: LD_ADDR_OWVAR 26
8394: PUSH
8395: LD_STRING 
8397: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8398: LD_INT 0
8400: PPUSH
8401: LD_INT 3
8403: PPUSH
8404: LD_VAR 0 4
8408: PPUSH
8409: CALL_OW 380
// un = CreateHuman ;
8413: LD_ADDR_VAR 0 15
8417: PUSH
8418: CALL_OW 44
8422: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8423: LD_VAR 0 15
8427: PPUSH
8428: LD_VAR 0 16
8432: PPUSH
8433: CALL_OW 52
// end ; i = i + 1 ;
8437: LD_ADDR_VAR 0 13
8441: PUSH
8442: LD_VAR 0 13
8446: PUSH
8447: LD_INT 1
8449: PLUS
8450: ST_TO_ADDR
// end ; if nation = 2 then
8451: LD_VAR 0 5
8455: PUSH
8456: LD_INT 2
8458: EQUAL
8459: IFFALSE 8883
// begin uc_side = side ;
8461: LD_ADDR_OWVAR 20
8465: PUSH
8466: LD_VAR 0 2
8470: ST_TO_ADDR
// uc_nation = nation ;
8471: LD_ADDR_OWVAR 21
8475: PUSH
8476: LD_VAR 0 5
8480: ST_TO_ADDR
// vc_engine = vehengine ;
8481: LD_ADDR_OWVAR 39
8485: PUSH
8486: LD_VAR 0 6
8490: ST_TO_ADDR
// vc_control = vehcontrol ;
8491: LD_ADDR_OWVAR 38
8495: PUSH
8496: LD_VAR 0 7
8500: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8501: LD_ADDR_OWVAR 40
8505: PUSH
8506: LD_VAR 0 9
8510: PUSH
8511: LD_INT 1
8513: PPUSH
8514: LD_VAR 0 9
8518: PPUSH
8519: CALL_OW 12
8523: ARRAY
8524: ST_TO_ADDR
// for j = 1 to ARWeapons do
8525: LD_ADDR_VAR 0 14
8529: PUSH
8530: DOUBLE
8531: LD_INT 1
8533: DEC
8534: ST_TO_ADDR
8535: LD_VAR 0 9
8539: PUSH
8540: FOR_TO
8541: IFFALSE 8775
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8543: LD_VAR 0 9
8547: PUSH
8548: LD_VAR 0 14
8552: ARRAY
8553: PUSH
8554: LD_INT 24
8556: EQUAL
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_VAR 0 14
8567: ARRAY
8568: PUSH
8569: LD_INT 22
8571: EQUAL
8572: OR
8573: PUSH
8574: LD_VAR 0 9
8578: PUSH
8579: LD_VAR 0 14
8583: ARRAY
8584: PUSH
8585: LD_INT 23
8587: EQUAL
8588: OR
8589: PUSH
8590: LD_VAR 0 9
8594: PUSH
8595: LD_VAR 0 14
8599: ARRAY
8600: PUSH
8601: LD_INT 30
8603: EQUAL
8604: OR
8605: IFFALSE 8654
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8607: LD_ADDR_VAR 0 18
8611: PUSH
8612: LD_INT 11
8614: PUSH
8615: LD_INT 12
8617: PUSH
8618: LD_INT 13
8620: PUSH
8621: LD_INT 14
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8630: LD_ADDR_OWVAR 37
8634: PUSH
8635: LD_VAR 0 18
8639: PUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_VAR 0 18
8647: PPUSH
8648: CALL_OW 12
8652: ARRAY
8653: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8654: LD_VAR 0 9
8658: PUSH
8659: LD_VAR 0 14
8663: ARRAY
8664: PUSH
8665: LD_INT 29
8667: EQUAL
8668: PUSH
8669: LD_VAR 0 9
8673: PUSH
8674: LD_VAR 0 14
8678: ARRAY
8679: PUSH
8680: LD_INT 28
8682: EQUAL
8683: OR
8684: PUSH
8685: LD_VAR 0 9
8689: PUSH
8690: LD_VAR 0 14
8694: ARRAY
8695: PUSH
8696: LD_INT 27
8698: EQUAL
8699: OR
8700: PUSH
8701: LD_VAR 0 9
8705: PUSH
8706: LD_VAR 0 14
8710: ARRAY
8711: PUSH
8712: LD_INT 26
8714: EQUAL
8715: OR
8716: PUSH
8717: LD_VAR 0 9
8721: PUSH
8722: LD_VAR 0 14
8726: ARRAY
8727: PUSH
8728: LD_INT 25
8730: EQUAL
8731: OR
8732: IFFALSE 8773
// begin arChassisTab = [ 13 , 14 ] ;
8734: LD_ADDR_VAR 0 18
8738: PUSH
8739: LD_INT 13
8741: PUSH
8742: LD_INT 14
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8749: LD_ADDR_OWVAR 37
8753: PUSH
8754: LD_VAR 0 18
8758: PUSH
8759: LD_INT 1
8761: PPUSH
8762: LD_VAR 0 18
8766: PPUSH
8767: CALL_OW 12
8771: ARRAY
8772: ST_TO_ADDR
// end ; end ;
8773: GO 8540
8775: POP
8776: POP
// veh = CreateVehicle ;
8777: LD_ADDR_VAR 0 16
8781: PUSH
8782: CALL_OW 45
8786: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8787: LD_VAR 0 16
8791: PPUSH
8792: LD_VAR 0 1
8796: PPUSH
8797: LD_INT 0
8799: PPUSH
8800: CALL_OW 49
// if vc_control = 1 then
8804: LD_OWVAR 38
8808: PUSH
8809: LD_INT 1
8811: EQUAL
8812: IFFALSE 8869
// begin hc_gallery =  ;
8814: LD_ADDR_OWVAR 33
8818: PUSH
8819: LD_STRING 
8821: ST_TO_ADDR
// hc_name =  ;
8822: LD_ADDR_OWVAR 26
8826: PUSH
8827: LD_STRING 
8829: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8830: LD_INT 0
8832: PPUSH
8833: LD_INT 3
8835: PPUSH
8836: LD_VAR 0 4
8840: PPUSH
8841: CALL_OW 380
// un = CreateHuman ;
8845: LD_ADDR_VAR 0 15
8849: PUSH
8850: CALL_OW 44
8854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8855: LD_VAR 0 15
8859: PPUSH
8860: LD_VAR 0 16
8864: PPUSH
8865: CALL_OW 52
// end ; i = i + 1 ;
8869: LD_ADDR_VAR 0 13
8873: PUSH
8874: LD_VAR 0 13
8878: PUSH
8879: LD_INT 1
8881: PLUS
8882: ST_TO_ADDR
// end ; if nation = 3 then
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 3
8890: EQUAL
8891: IFFALSE 9267
// begin uc_side = side ;
8893: LD_ADDR_OWVAR 20
8897: PUSH
8898: LD_VAR 0 2
8902: ST_TO_ADDR
// uc_nation = nation ;
8903: LD_ADDR_OWVAR 21
8907: PUSH
8908: LD_VAR 0 5
8912: ST_TO_ADDR
// vc_engine = vehengine ;
8913: LD_ADDR_OWVAR 39
8917: PUSH
8918: LD_VAR 0 6
8922: ST_TO_ADDR
// vc_control = vehcontrol ;
8923: LD_ADDR_OWVAR 38
8927: PUSH
8928: LD_VAR 0 7
8932: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8933: LD_ADDR_OWVAR 40
8937: PUSH
8938: LD_VAR 0 8
8942: PUSH
8943: LD_INT 1
8945: PPUSH
8946: LD_VAR 0 8
8950: PPUSH
8951: CALL_OW 12
8955: ARRAY
8956: ST_TO_ADDR
// for j = 1 to RuWeapons do
8957: LD_ADDR_VAR 0 14
8961: PUSH
8962: DOUBLE
8963: LD_INT 1
8965: DEC
8966: ST_TO_ADDR
8967: LD_VAR 0 8
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9159
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8975: LD_VAR 0 8
8979: PUSH
8980: LD_VAR 0 14
8984: ARRAY
8985: PUSH
8986: LD_INT 42
8988: EQUAL
8989: PUSH
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 14
8999: ARRAY
9000: PUSH
9001: LD_INT 43
9003: EQUAL
9004: OR
9005: PUSH
9006: LD_VAR 0 8
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PUSH
9017: LD_INT 44
9019: EQUAL
9020: OR
9021: PUSH
9022: LD_VAR 0 8
9026: PUSH
9027: LD_VAR 0 14
9031: ARRAY
9032: PUSH
9033: LD_INT 45
9035: EQUAL
9036: OR
9037: PUSH
9038: LD_VAR 0 8
9042: PUSH
9043: LD_VAR 0 14
9047: ARRAY
9048: PUSH
9049: LD_INT 49
9051: EQUAL
9052: OR
9053: IFFALSE 9090
// begin ruChassisTab = [ 24 ] ;
9055: LD_ADDR_VAR 0 17
9059: PUSH
9060: LD_INT 24
9062: PUSH
9063: EMPTY
9064: LIST
9065: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9066: LD_ADDR_OWVAR 37
9070: PUSH
9071: LD_VAR 0 17
9075: PUSH
9076: LD_INT 1
9078: PPUSH
9079: LD_VAR 0 17
9083: PPUSH
9084: CALL_OW 12
9088: ARRAY
9089: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9090: LD_VAR 0 8
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PUSH
9101: LD_INT 46
9103: EQUAL
9104: PUSH
9105: LD_VAR 0 8
9109: PUSH
9110: LD_VAR 0 14
9114: ARRAY
9115: PUSH
9116: LD_INT 47
9118: EQUAL
9119: OR
9120: IFFALSE 9157
// begin ruChassisTab = [ 24 ] ;
9122: LD_ADDR_VAR 0 17
9126: PUSH
9127: LD_INT 24
9129: PUSH
9130: EMPTY
9131: LIST
9132: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9133: LD_ADDR_OWVAR 37
9137: PUSH
9138: LD_VAR 0 17
9142: PUSH
9143: LD_INT 1
9145: PPUSH
9146: LD_VAR 0 17
9150: PPUSH
9151: CALL_OW 12
9155: ARRAY
9156: ST_TO_ADDR
// end ; end ;
9157: GO 8972
9159: POP
9160: POP
// veh = CreateVehicle ;
9161: LD_ADDR_VAR 0 16
9165: PUSH
9166: CALL_OW 45
9170: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9171: LD_VAR 0 16
9175: PPUSH
9176: LD_VAR 0 1
9180: PPUSH
9181: LD_INT 0
9183: PPUSH
9184: CALL_OW 49
// if vc_control = 1 then
9188: LD_OWVAR 38
9192: PUSH
9193: LD_INT 1
9195: EQUAL
9196: IFFALSE 9253
// begin hc_gallery =  ;
9198: LD_ADDR_OWVAR 33
9202: PUSH
9203: LD_STRING 
9205: ST_TO_ADDR
// hc_name =  ;
9206: LD_ADDR_OWVAR 26
9210: PUSH
9211: LD_STRING 
9213: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9214: LD_INT 0
9216: PPUSH
9217: LD_INT 3
9219: PPUSH
9220: LD_VAR 0 4
9224: PPUSH
9225: CALL_OW 380
// un = CreateHuman ;
9229: LD_ADDR_VAR 0 15
9233: PUSH
9234: CALL_OW 44
9238: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9239: LD_VAR 0 15
9243: PPUSH
9244: LD_VAR 0 16
9248: PPUSH
9249: CALL_OW 52
// end ; i = i + 1 ;
9253: LD_ADDR_VAR 0 13
9257: PUSH
9258: LD_VAR 0 13
9262: PUSH
9263: LD_INT 1
9265: PLUS
9266: ST_TO_ADDR
// end ; until i = vehCount ;
9267: LD_VAR 0 13
9271: PUSH
9272: LD_VAR 0 3
9276: EQUAL
9277: IFFALSE 7945
// repeat wait ( 0 0$1 ) ;
9279: LD_INT 35
9281: PPUSH
9282: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9286: LD_ADDR_VAR 0 20
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_VAR 0 2
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 21
9305: PUSH
9306: LD_INT 2
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 24
9315: PUSH
9316: LD_INT 250
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: ST_TO_ADDR
// if vehicleOK_list > 0 then
9333: LD_VAR 0 20
9337: PUSH
9338: LD_INT 0
9340: GREATER
9341: IFFALSE 9560
// begin for i in vehicleOK_list do
9343: LD_ADDR_VAR 0 13
9347: PUSH
9348: LD_VAR 0 20
9352: PUSH
9353: FOR_IN
9354: IFFALSE 9558
// begin if GetSide ( i ) <> side then
9356: LD_VAR 0 13
9360: PPUSH
9361: CALL_OW 255
9365: PUSH
9366: LD_VAR 0 2
9370: NONEQUAL
9371: IFFALSE 9384
// begin ComStop ( i ) ;
9373: LD_VAR 0 13
9377: PPUSH
9378: CALL_OW 141
// continue ;
9382: GO 9353
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9384: LD_ADDR_VAR 0 21
9388: PUSH
9389: LD_INT 22
9391: PUSH
9392: LD_VAR 0 11
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 69
9405: PPUSH
9406: LD_VAR 0 13
9410: PPUSH
9411: CALL_OW 74
9415: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9416: LD_ADDR_VAR 0 22
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_VAR 0 11
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 59
9438: PUSH
9439: EMPTY
9440: LIST
9441: PUSH
9442: LD_INT 21
9444: PUSH
9445: LD_INT 1
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 2
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: PPUSH
9475: CALL_OW 69
9479: PPUSH
9480: LD_VAR 0 13
9484: PPUSH
9485: CALL_OW 74
9489: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9490: LD_VAR 0 13
9494: PPUSH
9495: LD_VAR 0 21
9499: PPUSH
9500: CALL_OW 296
9504: PUSH
9505: LD_INT 8
9507: PLUS
9508: PUSH
9509: LD_VAR 0 13
9513: PPUSH
9514: LD_VAR 0 22
9518: PPUSH
9519: CALL_OW 296
9523: LESS
9524: IFFALSE 9542
// begin ComAttackUnit ( i , target1 ) ;
9526: LD_VAR 0 13
9530: PPUSH
9531: LD_VAR 0 21
9535: PPUSH
9536: CALL_OW 115
// end else
9540: GO 9556
// begin ComAttackUnit ( i , target2 ) ;
9542: LD_VAR 0 13
9546: PPUSH
9547: LD_VAR 0 22
9551: PPUSH
9552: CALL_OW 115
// end ; end ;
9556: GO 9353
9558: POP
9559: POP
// end ; until vehicleOK_list = [ ] ;
9560: LD_VAR 0 20
9564: PUSH
9565: EMPTY
9566: EQUAL
9567: IFFALSE 9279
// end ;
9569: LD_VAR 0 12
9573: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9574: LD_INT 0
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
// for i = 1 to 72 do
9580: LD_ADDR_VAR 0 5
9584: PUSH
9585: DOUBLE
9586: LD_INT 1
9588: DEC
9589: ST_TO_ADDR
9590: LD_INT 72
9592: PUSH
9593: FOR_TO
9594: IFFALSE 9652
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9596: LD_VAR 0 5
9600: PPUSH
9601: LD_VAR 0 1
9605: PPUSH
9606: CALL_OW 321
9610: PUSH
9611: LD_INT 1
9613: EQUAL
9614: PUSH
9615: LD_VAR 0 5
9619: PPUSH
9620: LD_VAR 0 3
9624: PPUSH
9625: CALL_OW 482
9629: PUSH
9630: LD_INT 1
9632: EQUAL
9633: AND
9634: IFFALSE 9650
// AddComResearch ( lab , i ) ;
9636: LD_VAR 0 2
9640: PPUSH
9641: LD_VAR 0 5
9645: PPUSH
9646: CALL_OW 184
9650: GO 9593
9652: POP
9653: POP
// end ;
9654: LD_VAR 0 4
9658: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9667: LD_ADDR_VAR 0 8
9671: PUSH
9672: LD_VAR 0 2
9676: PPUSH
9677: CALL_OW 313
9681: PUSH
9682: LD_EXP 36
9686: PUSH
9687: EMPTY
9688: LIST
9689: DIFF
9690: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9691: LD_ADDR_VAR 0 9
9695: PUSH
9696: LD_VAR 0 3
9700: PPUSH
9701: LD_INT 22
9703: PUSH
9704: LD_VAR 0 1
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 25
9715: PUSH
9716: LD_INT 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 24
9725: PUSH
9726: LD_INT 750
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 54
9738: PUSH
9739: EMPTY
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 70
9756: PUSH
9757: LD_EXP 36
9761: PUSH
9762: EMPTY
9763: LIST
9764: DIFF
9765: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9766: LD_ADDR_VAR 0 6
9770: PUSH
9771: LD_VAR 0 3
9775: PPUSH
9776: LD_INT 22
9778: PUSH
9779: LD_VAR 0 1
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 21
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 3
9800: PUSH
9801: LD_INT 24
9803: PUSH
9804: LD_INT 1000
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: PPUSH
9823: CALL_OW 70
9827: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9828: LD_VAR 0 6
9832: NOT
9833: PUSH
9834: LD_INT 22
9836: PUSH
9837: LD_VAR 0 1
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 25
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 24
9858: PUSH
9859: LD_INT 250
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 69
9875: NOT
9876: AND
9877: IFFALSE 9881
// exit ;
9879: GO 10063
// if buildings_list > 0 and engineerOkInside then
9881: LD_VAR 0 6
9885: PUSH
9886: LD_INT 0
9888: GREATER
9889: PUSH
9890: LD_VAR 0 8
9894: AND
9895: IFFALSE 9906
// ComExitBuilding ( engineerOkInside ) ;
9897: LD_VAR 0 8
9901: PPUSH
9902: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9906: LD_VAR 0 6
9910: PUSH
9911: LD_INT 0
9913: GREATER
9914: PUSH
9915: LD_VAR 0 9
9919: PUSH
9920: LD_INT 0
9922: GREATER
9923: AND
9924: IFFALSE 9944
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9926: LD_VAR 0 9
9930: PPUSH
9931: LD_VAR 0 6
9935: PUSH
9936: LD_INT 1
9938: ARRAY
9939: PPUSH
9940: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9944: LD_VAR 0 6
9948: PUSH
9949: LD_INT 0
9951: EQUAL
9952: PUSH
9953: LD_VAR 0 4
9957: PUSH
9958: LD_INT 0
9960: EQUAL
9961: AND
9962: PUSH
9963: LD_VAR 0 9
9967: PUSH
9968: LD_INT 0
9970: GREATER
9971: AND
9972: IFFALSE 9988
// ComEnterUnit ( engineerOkOutside , building ) ;
9974: LD_VAR 0 9
9978: PPUSH
9979: LD_VAR 0 2
9983: PPUSH
9984: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9988: LD_VAR 0 9
9992: PUSH
9993: LD_INT 0
9995: GREATER
9996: PUSH
9997: LD_VAR 0 6
10001: PUSH
10002: LD_INT 0
10004: EQUAL
10005: AND
10006: PUSH
10007: LD_VAR 0 4
10011: PUSH
10012: LD_INT 0
10014: GREATER
10015: AND
10016: IFFALSE 10063
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10018: LD_VAR 0 9
10022: PPUSH
10023: LD_VAR 0 4
10027: PUSH
10028: LD_INT 1
10030: ARRAY
10031: PPUSH
10032: LD_VAR 0 4
10036: PUSH
10037: LD_INT 2
10039: ARRAY
10040: PPUSH
10041: LD_VAR 0 4
10045: PUSH
10046: LD_INT 3
10048: ARRAY
10049: PPUSH
10050: LD_VAR 0 4
10054: PUSH
10055: LD_INT 4
10057: ARRAY
10058: PPUSH
10059: CALL_OW 145
// end ;
10063: LD_VAR 0 5
10067: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
10074: PPUSH
10075: PPUSH
10076: PPUSH
10077: PPUSH
10078: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10079: LD_ADDR_VAR 0 6
10083: PUSH
10084: LD_INT 22
10086: PUSH
10087: LD_VAR 0 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 25
10098: PUSH
10099: LD_INT 4
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 23
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 24
10118: PUSH
10119: LD_INT 251
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: PUSH
10137: LD_EXP 36
10141: PUSH
10142: EMPTY
10143: LIST
10144: DIFF
10145: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10146: LD_ADDR_VAR 0 7
10150: PUSH
10151: LD_VAR 0 3
10155: PPUSH
10156: LD_INT 22
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 23
10170: PUSH
10171: LD_INT 2
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 25
10180: PUSH
10181: LD_INT 4
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 50
10190: PUSH
10191: EMPTY
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 70
10204: PUSH
10205: LD_EXP 36
10209: PUSH
10210: EMPTY
10211: LIST
10212: DIFF
10213: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10214: LD_ADDR_VAR 0 10
10218: PUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: LD_INT 22
10226: PUSH
10227: LD_VAR 0 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 3
10248: PUSH
10249: LD_INT 25
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: LD_INT 24
10268: PUSH
10269: LD_INT 750
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 70
10290: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10291: LD_ADDR_VAR 0 11
10295: PUSH
10296: LD_VAR 0 2
10300: PPUSH
10301: LD_INT 22
10303: PUSH
10304: LD_VAR 0 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 21
10315: PUSH
10316: LD_INT 1
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 3
10325: PUSH
10326: LD_INT 25
10328: PUSH
10329: LD_INT 3
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: LD_INT 24
10345: PUSH
10346: LD_INT 1000
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PPUSH
10363: CALL_OW 70
10367: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10368: LD_VAR 0 10
10372: NOT
10373: PUSH
10374: LD_VAR 0 11
10378: NOT
10379: AND
10380: PUSH
10381: LD_VAR 0 6
10385: NOT
10386: AND
10387: IFFALSE 10391
// exit ;
10389: GO 10625
// if damageUnits > 0 and sci_list > 0 then
10391: LD_VAR 0 10
10395: PUSH
10396: LD_INT 0
10398: GREATER
10399: PUSH
10400: LD_VAR 0 6
10404: PUSH
10405: LD_INT 0
10407: GREATER
10408: AND
10409: IFFALSE 10425
// ComMoveToArea ( damageUnits , healArea ) ;
10411: LD_VAR 0 10
10415: PPUSH
10416: LD_VAR 0 2
10420: PPUSH
10421: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10425: LD_VAR 0 11
10429: PUSH
10430: LD_INT 0
10432: GREATER
10433: PUSH
10434: LD_VAR 0 6
10438: PUSH
10439: LD_INT 0
10441: GREATER
10442: AND
10443: IFFALSE 10454
// ComExitBuilding ( sci_list ) ;
10445: LD_VAR 0 6
10449: PPUSH
10450: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10454: LD_VAR 0 11
10458: PUSH
10459: LD_INT 0
10461: GREATER
10462: PUSH
10463: LD_VAR 0 7
10467: PUSH
10468: LD_INT 0
10470: GREATER
10471: AND
10472: IFFALSE 10492
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10474: LD_VAR 0 7
10478: PPUSH
10479: LD_VAR 0 11
10483: PUSH
10484: LD_INT 1
10486: ARRAY
10487: PPUSH
10488: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10492: LD_VAR 0 10
10496: PUSH
10497: LD_INT 0
10499: EQUAL
10500: PUSH
10501: LD_VAR 0 11
10505: PUSH
10506: LD_INT 0
10508: EQUAL
10509: AND
10510: PUSH
10511: LD_VAR 0 7
10515: PUSH
10516: LD_INT 0
10518: GREATER
10519: AND
10520: IFFALSE 10625
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10522: LD_ADDR_VAR 0 12
10526: PUSH
10527: LD_INT 22
10529: PUSH
10530: LD_VAR 0 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 3
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 30
10551: PUSH
10552: LD_INT 8
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: PPUSH
10564: CALL_OW 69
10568: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10569: LD_ADDR_VAR 0 13
10573: PUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 12
10581: PPUSH
10582: CALL_OW 12
10586: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10587: LD_VAR 0 7
10591: PPUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 60
10597: PUSH
10598: EMPTY
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 72
10609: PPUSH
10610: LD_VAR 0 12
10614: PUSH
10615: LD_VAR 0 13
10619: ARRAY
10620: PPUSH
10621: CALL_OW 120
// end ; end ;
10625: LD_VAR 0 5
10629: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10630: LD_INT 0
10632: PPUSH
10633: PPUSH
10634: PPUSH
10635: PPUSH
// tmpTab = [ ] ;
10636: LD_ADDR_VAR 0 6
10640: PUSH
10641: EMPTY
10642: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10643: LD_INT 22
10645: PUSH
10646: LD_VAR 0 1
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 30
10657: PUSH
10658: LD_INT 32
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: PUSH
10674: LD_INT 0
10676: GREATER
10677: IFFALSE 10760
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10679: LD_ADDR_VAR 0 4
10683: PUSH
10684: LD_INT 22
10686: PUSH
10687: LD_VAR 0 1
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 30
10698: PUSH
10699: LD_INT 32
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 69
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10758
// begin for j in UnitsInside ( i ) do
10718: LD_ADDR_VAR 0 5
10722: PUSH
10723: LD_VAR 0 4
10727: PPUSH
10728: CALL_OW 313
10732: PUSH
10733: FOR_IN
10734: IFFALSE 10754
// tmpTab = tmpTab ^ j ;
10736: LD_ADDR_VAR 0 6
10740: PUSH
10741: LD_VAR 0 6
10745: PUSH
10746: LD_VAR 0 5
10750: ADD
10751: ST_TO_ADDR
10752: GO 10733
10754: POP
10755: POP
// end ;
10756: GO 10715
10758: POP
10759: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10760: LD_VAR 0 6
10764: PPUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: CALL_OW 250
10774: PPUSH
10775: LD_VAR 0 2
10779: PPUSH
10780: CALL_OW 251
10784: PPUSH
10785: CALL_OW 114
// end ;
10789: LD_VAR 0 3
10793: RET
// export function CraneRepairBuild ( side , baseArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10794: LD_INT 0
10796: PPUSH
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10802: LD_ADDR_VAR 0 8
10806: PUSH
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 22
10814: PUSH
10815: LD_VAR 0 1
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 21
10826: PUSH
10827: LD_INT 2
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 34
10836: PUSH
10837: LD_INT 52
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 70
10853: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10854: LD_ADDR_VAR 0 9
10858: PUSH
10859: LD_VAR 0 2
10863: PPUSH
10864: LD_INT 22
10866: PUSH
10867: LD_VAR 0 1
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 21
10878: PUSH
10879: LD_INT 3
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: LD_INT 24
10891: PUSH
10892: LD_INT 1000
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: PPUSH
10911: CALL_OW 70
10915: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10916: LD_VAR 0 9
10920: PUSH
10921: LD_INT 0
10923: GREATER
10924: PUSH
10925: LD_VAR 0 8
10929: PPUSH
10930: LD_INT 24
10932: PUSH
10933: LD_INT 750
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PPUSH
10940: CALL_OW 72
10944: PUSH
10945: LD_INT 0
10947: GREATER
10948: AND
10949: IFFALSE 10969
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10951: LD_VAR 0 8
10955: PPUSH
10956: LD_VAR 0 9
10960: PUSH
10961: LD_INT 1
10963: ARRAY
10964: PPUSH
10965: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10969: LD_VAR 0 8
10973: PUSH
10974: LD_INT 0
10976: GREATER
10977: PUSH
10978: LD_VAR 0 9
10982: PUSH
10983: LD_INT 0
10985: EQUAL
10986: AND
10987: PUSH
10988: LD_VAR 0 3
10992: PUSH
10993: LD_INT 0
10995: GREATER
10996: AND
10997: IFFALSE 11044
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10999: LD_VAR 0 8
11003: PPUSH
11004: LD_VAR 0 3
11008: PUSH
11009: LD_INT 1
11011: ARRAY
11012: PPUSH
11013: LD_VAR 0 3
11017: PUSH
11018: LD_INT 2
11020: ARRAY
11021: PPUSH
11022: LD_VAR 0 3
11026: PUSH
11027: LD_INT 3
11029: ARRAY
11030: PPUSH
11031: LD_VAR 0 3
11035: PUSH
11036: LD_INT 4
11038: ARRAY
11039: PPUSH
11040: CALL_OW 567
// end ;
11044: LD_VAR 0 4
11048: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
11059: LD_ADDR_VAR 0 6
11063: PUSH
11064: LD_VAR 0 2
11068: PPUSH
11069: LD_INT 22
11071: PUSH
11072: LD_VAR 0 1
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 56
11083: PUSH
11084: EMPTY
11085: LIST
11086: PUSH
11087: LD_INT 24
11089: PUSH
11090: LD_INT 700
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 3
11099: PUSH
11100: LD_INT 60
11102: PUSH
11103: EMPTY
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: LD_INT 25
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 25
11125: PUSH
11126: LD_INT 5
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 25
11135: PUSH
11136: LD_INT 8
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 25
11145: PUSH
11146: LD_INT 9
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 70
11171: PUSH
11172: LD_EXP 26
11176: PUSH
11177: LD_EXP 27
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: DIFF
11186: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11187: LD_ADDR_VAR 0 7
11191: PUSH
11192: LD_VAR 0 2
11196: PPUSH
11197: LD_INT 22
11199: PUSH
11200: LD_VAR 0 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 30
11211: PUSH
11212: LD_INT 32
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 58
11221: PUSH
11222: EMPTY
11223: LIST
11224: PUSH
11225: LD_INT 24
11227: PUSH
11228: LD_INT 251
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PPUSH
11241: CALL_OW 70
11245: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11246: LD_ADDR_VAR 0 9
11250: PUSH
11251: LD_VAR 0 2
11255: PPUSH
11256: LD_INT 22
11258: PUSH
11259: LD_VAR 0 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: LD_INT 30
11273: PUSH
11274: LD_INT 4
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 30
11283: PUSH
11284: LD_INT 5
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 24
11298: PUSH
11299: LD_INT 251
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 70
11315: ST_TO_ADDR
// if barrackList > 0 then
11316: LD_VAR 0 9
11320: PUSH
11321: LD_INT 0
11323: GREATER
11324: IFFALSE 11472
// begin if turretList = 0 then
11326: LD_VAR 0 7
11330: PUSH
11331: LD_INT 0
11333: EQUAL
11334: IFFALSE 11376
// begin if soldiers_list > 0 then
11336: LD_VAR 0 6
11340: PUSH
11341: LD_INT 0
11343: GREATER
11344: IFFALSE 11374
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11346: LD_VAR 0 6
11350: PPUSH
11351: LD_VAR 0 9
11355: PUSH
11356: LD_INT 1
11358: PPUSH
11359: LD_VAR 0 9
11363: PPUSH
11364: CALL_OW 12
11368: ARRAY
11369: PPUSH
11370: CALL_OW 120
// end else
11374: GO 11472
// begin for i in barrackList do
11376: LD_ADDR_VAR 0 4
11380: PUSH
11381: LD_VAR 0 9
11385: PUSH
11386: FOR_IN
11387: IFFALSE 11470
// begin insideUnits = UnitsInside ( i ) ;
11389: LD_ADDR_VAR 0 10
11393: PUSH
11394: LD_VAR 0 4
11398: PPUSH
11399: CALL_OW 313
11403: ST_TO_ADDR
// if insideUnits > 0 then
11404: LD_VAR 0 10
11408: PUSH
11409: LD_INT 0
11411: GREATER
11412: IFFALSE 11436
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11414: LD_VAR 0 10
11418: PUSH
11419: LD_INT 1
11421: ARRAY
11422: PPUSH
11423: LD_VAR 0 7
11427: PUSH
11428: LD_INT 1
11430: ARRAY
11431: PPUSH
11432: CALL_OW 120
// if soldiers_list > 0 then
11436: LD_VAR 0 6
11440: PUSH
11441: LD_INT 0
11443: GREATER
11444: IFFALSE 11468
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11446: LD_VAR 0 6
11450: PUSH
11451: LD_INT 1
11453: ARRAY
11454: PPUSH
11455: LD_VAR 0 7
11459: PUSH
11460: LD_INT 1
11462: ARRAY
11463: PPUSH
11464: CALL_OW 120
// end ;
11468: GO 11386
11470: POP
11471: POP
// end ; end ; end ;
11472: LD_VAR 0 3
11476: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11477: LD_INT 0
11479: PPUSH
11480: PPUSH
11481: PPUSH
11482: PPUSH
11483: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11484: LD_ADDR_VAR 0 6
11488: PUSH
11489: LD_INT 22
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: LD_INT 30
11506: PUSH
11507: LD_INT 31
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 30
11516: PUSH
11517: LD_INT 32
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 30
11526: PUSH
11527: LD_INT 33
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 30
11536: PUSH
11537: LD_INT 4
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 30
11546: PUSH
11547: LD_INT 5
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11571: LD_ADDR_VAR 0 7
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_VAR 0 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 58
11600: PUSH
11601: EMPTY
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: PPUSH
11609: CALL_OW 69
11613: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 0
11621: GREATER
11622: PUSH
11623: LD_VAR 0 7
11627: PUSH
11628: LD_INT 0
11630: GREATER
11631: AND
11632: IFFALSE 11702
// begin for i in turretsList do
11634: LD_ADDR_VAR 0 4
11638: PUSH
11639: LD_VAR 0 6
11643: PUSH
11644: FOR_IN
11645: IFFALSE 11700
// begin for j in enemyBuildings do
11647: LD_ADDR_VAR 0 5
11651: PUSH
11652: LD_VAR 0 7
11656: PUSH
11657: FOR_IN
11658: IFFALSE 11696
// begin if GetDistUnits ( i , j ) < 20 then
11660: LD_VAR 0 4
11664: PPUSH
11665: LD_VAR 0 5
11669: PPUSH
11670: CALL_OW 296
11674: PUSH
11675: LD_INT 20
11677: LESS
11678: IFFALSE 11694
// begin ComAttackUnit ( i , j ) ;
11680: LD_VAR 0 4
11684: PPUSH
11685: LD_VAR 0 5
11689: PPUSH
11690: CALL_OW 115
// end ; end ;
11694: GO 11657
11696: POP
11697: POP
// end ;
11698: GO 11644
11700: POP
11701: POP
// end ; end ;
11702: LD_VAR 0 3
11706: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11707: LD_INT 0
11709: PPUSH
11710: PPUSH
// for i = 1 to vehCount do
11711: LD_ADDR_VAR 0 9
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 3
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11774
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11729: LD_VAR 0 2
11733: PPUSH
11734: LD_VAR 0 7
11738: PPUSH
11739: LD_VAR 0 5
11743: PPUSH
11744: LD_VAR 0 6
11748: PPUSH
11749: LD_VAR 0 4
11753: PUSH
11754: LD_INT 1
11756: PPUSH
11757: LD_VAR 0 4
11761: PPUSH
11762: CALL_OW 12
11766: ARRAY
11767: PPUSH
11768: CALL_OW 185
11772: GO 11726
11774: POP
11775: POP
// end ;
11776: LD_VAR 0 8
11780: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11781: LD_INT 0
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
// if oponent = 1 then
11789: LD_VAR 0 2
11793: PUSH
11794: LD_INT 1
11796: EQUAL
11797: IFFALSE 11987
// begin repeat wait ( 0 0$1 ) ;
11799: LD_INT 35
11801: PPUSH
11802: CALL_OW 67
// for j in legionVehicles do
11806: LD_ADDR_VAR 0 5
11810: PUSH
11811: LD_EXP 55
11815: PUSH
11816: FOR_IN
11817: IFFALSE 11975
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11819: LD_ADDR_VAR 0 7
11823: PUSH
11824: LD_INT 22
11826: PUSH
11827: LD_VAR 0 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 69
11840: PPUSH
11841: LD_VAR 0 5
11845: PPUSH
11846: CALL_OW 74
11850: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11851: LD_ADDR_VAR 0 8
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_VAR 0 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 30
11870: PUSH
11871: LD_INT 32
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 59
11880: PUSH
11881: EMPTY
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: PPUSH
11892: CALL_OW 69
11896: PPUSH
11897: LD_VAR 0 5
11901: PPUSH
11902: CALL_OW 74
11906: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11907: LD_VAR 0 5
11911: PPUSH
11912: LD_VAR 0 7
11916: PPUSH
11917: CALL_OW 296
11921: PUSH
11922: LD_INT 8
11924: PLUS
11925: PUSH
11926: LD_VAR 0 5
11930: PPUSH
11931: LD_VAR 0 8
11935: PPUSH
11936: CALL_OW 296
11940: LESS
11941: IFFALSE 11959
// ComAttackUnit ( j , target1 ) else
11943: LD_VAR 0 5
11947: PPUSH
11948: LD_VAR 0 7
11952: PPUSH
11953: CALL_OW 115
11957: GO 11973
// ComAttackUnit ( j , target2 ) ;
11959: LD_VAR 0 5
11963: PPUSH
11964: LD_VAR 0 8
11968: PPUSH
11969: CALL_OW 115
// end ;
11973: GO 11816
11975: POP
11976: POP
// until legionVehicles = 0 ;
11977: LD_EXP 55
11981: PUSH
11982: LD_INT 0
11984: EQUAL
11985: IFFALSE 11799
// end ; if oponent = 2 then
11987: LD_VAR 0 2
11991: PUSH
11992: LD_INT 2
11994: EQUAL
11995: IFFALSE 12185
// begin repeat wait ( 0 0$1 ) ;
11997: LD_INT 35
11999: PPUSH
12000: CALL_OW 67
// for j in russianVehicles do
12004: LD_ADDR_VAR 0 5
12008: PUSH
12009: LD_EXP 61
12013: PUSH
12014: FOR_IN
12015: IFFALSE 12173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12017: LD_ADDR_VAR 0 7
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_VAR 0 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 69
12038: PPUSH
12039: LD_VAR 0 5
12043: PPUSH
12044: CALL_OW 74
12048: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12049: LD_ADDR_VAR 0 8
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_VAR 0 1
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 32
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 59
12078: PUSH
12079: EMPTY
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: PPUSH
12090: CALL_OW 69
12094: PPUSH
12095: LD_VAR 0 5
12099: PPUSH
12100: CALL_OW 74
12104: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12105: LD_VAR 0 5
12109: PPUSH
12110: LD_VAR 0 7
12114: PPUSH
12115: CALL_OW 296
12119: PUSH
12120: LD_INT 8
12122: PLUS
12123: PUSH
12124: LD_VAR 0 5
12128: PPUSH
12129: LD_VAR 0 8
12133: PPUSH
12134: CALL_OW 296
12138: LESS
12139: IFFALSE 12157
// ComAttackUnit ( j , target1 ) else
12141: LD_VAR 0 5
12145: PPUSH
12146: LD_VAR 0 7
12150: PPUSH
12151: CALL_OW 115
12155: GO 12171
// ComAttackUnit ( j , target2 ) ;
12157: LD_VAR 0 5
12161: PPUSH
12162: LD_VAR 0 8
12166: PPUSH
12167: CALL_OW 115
// end ;
12171: GO 12014
12173: POP
12174: POP
// until russianVehicles = 0 ;
12175: LD_EXP 61
12179: PUSH
12180: LD_INT 0
12182: EQUAL
12183: IFFALSE 11997
// end ; if oponent = 3 then
12185: LD_VAR 0 2
12189: PUSH
12190: LD_INT 3
12192: EQUAL
12193: IFFALSE 12383
// begin repeat wait ( 0 0$1 ) ;
12195: LD_INT 35
12197: PPUSH
12198: CALL_OW 67
// for j in allianceVehicles do
12202: LD_ADDR_VAR 0 5
12206: PUSH
12207: LD_EXP 62
12211: PUSH
12212: FOR_IN
12213: IFFALSE 12371
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12215: LD_ADDR_VAR 0 7
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_VAR 0 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: PPUSH
12237: LD_VAR 0 5
12241: PPUSH
12242: CALL_OW 74
12246: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12247: LD_ADDR_VAR 0 8
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_VAR 0 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 32
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 59
12276: PUSH
12277: EMPTY
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: PPUSH
12293: LD_VAR 0 5
12297: PPUSH
12298: CALL_OW 74
12302: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12303: LD_VAR 0 5
12307: PPUSH
12308: LD_VAR 0 7
12312: PPUSH
12313: CALL_OW 296
12317: PUSH
12318: LD_INT 8
12320: PLUS
12321: PUSH
12322: LD_VAR 0 5
12326: PPUSH
12327: LD_VAR 0 8
12331: PPUSH
12332: CALL_OW 296
12336: LESS
12337: IFFALSE 12355
// ComAttackUnit ( j , target1 ) else
12339: LD_VAR 0 5
12343: PPUSH
12344: LD_VAR 0 7
12348: PPUSH
12349: CALL_OW 115
12353: GO 12369
// ComAttackUnit ( j , target2 ) ;
12355: LD_VAR 0 5
12359: PPUSH
12360: LD_VAR 0 8
12364: PPUSH
12365: CALL_OW 115
// end ;
12369: GO 12212
12371: POP
12372: POP
// until allianceVehicles = 0 ;
12373: LD_EXP 62
12377: PUSH
12378: LD_INT 0
12380: EQUAL
12381: IFFALSE 12195
// end ; end ;
12383: LD_VAR 0 3
12387: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12388: LD_INT 0
12390: PPUSH
12391: PPUSH
12392: PPUSH
12393: PPUSH
12394: PPUSH
12395: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12396: LD_ADDR_VAR 0 6
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_VAR 0 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 25
12415: PUSH
12416: LD_INT 9
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12432: LD_ADDR_VAR 0 7
12436: PUSH
12437: LD_INT 81
12439: PUSH
12440: LD_VAR 0 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: LD_INT 21
12454: PUSH
12455: LD_INT 3
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12475: LD_ADDR_VAR 0 4
12479: PUSH
12480: LD_INT 1
12482: PPUSH
12483: LD_INT 3
12485: PPUSH
12486: CALL_OW 12
12490: ST_TO_ADDR
// for i = 1 to list do
12491: LD_ADDR_VAR 0 5
12495: PUSH
12496: DOUBLE
12497: LD_INT 1
12499: DEC
12500: ST_TO_ADDR
12501: LD_VAR 0 6
12505: PUSH
12506: FOR_TO
12507: IFFALSE 12709
// for ta in filter do
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_VAR 0 7
12518: PUSH
12519: FOR_IN
12520: IFFALSE 12705
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12522: LD_VAR 0 6
12526: PUSH
12527: LD_VAR 0 5
12531: ARRAY
12532: PPUSH
12533: LD_VAR 0 3
12537: PPUSH
12538: CALL_OW 296
12542: PUSH
12543: LD_INT 15
12545: LESSEQUAL
12546: IFFALSE 12703
// begin case c of 1 :
12548: LD_VAR 0 4
12552: PUSH
12553: LD_INT 1
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12599
12561: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12562: LD_VAR 0 6
12566: PUSH
12567: LD_VAR 0 5
12571: ARRAY
12572: PPUSH
12573: LD_VAR 0 3
12577: PPUSH
12578: CALL_OW 250
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: CALL_OW 251
12592: PPUSH
12593: CALL_OW 154
12597: GO 12703
12599: LD_INT 2
12601: DOUBLE
12602: EQUAL
12603: IFTRUE 12607
12605: GO 12671
12607: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12608: LD_VAR 0 6
12612: PUSH
12613: LD_VAR 0 5
12617: ARRAY
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: CALL_OW 250
12628: PUSH
12629: LD_INT 1
12631: NEG
12632: PPUSH
12633: LD_INT 1
12635: PPUSH
12636: CALL_OW 12
12640: PLUS
12641: PPUSH
12642: LD_VAR 0 3
12646: PPUSH
12647: CALL_OW 251
12651: PUSH
12652: LD_INT 1
12654: NEG
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 12
12663: PLUS
12664: PPUSH
12665: CALL_OW 153
12669: GO 12703
12671: LD_INT 3
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12702
12679: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12680: LD_VAR 0 6
12684: PUSH
12685: LD_VAR 0 5
12689: ARRAY
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: CALL_OW 115
12700: GO 12703
12702: POP
// end ; end ;
12703: GO 12519
12705: POP
12706: POP
12707: GO 12506
12709: POP
12710: POP
// end ;
12711: LD_VAR 0 2
12715: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12716: LD_INT 0
12718: PPUSH
12719: PPUSH
12720: PPUSH
12721: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12722: LD_INT 22
12724: PUSH
12725: LD_VAR 0 1
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 21
12736: PUSH
12737: LD_INT 2
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 34
12746: PUSH
12747: LD_INT 49
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 69
12763: PUSH
12764: LD_INT 0
12766: EQUAL
12767: IFFALSE 12771
// exit ;
12769: GO 13026
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12771: LD_INT 22
12773: PUSH
12774: LD_VAR 0 1
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 21
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 34
12795: PUSH
12796: LD_INT 49
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: PUSH
12813: LD_INT 0
12815: GREATER
12816: IFFALSE 13026
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12818: LD_ADDR_VAR 0 6
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_VAR 0 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 21
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 34
12847: PUSH
12848: LD_INT 49
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12865: LD_INT 105
12867: PPUSH
12868: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12872: LD_ADDR_VAR 0 4
12876: PUSH
12877: LD_VAR 0 6
12881: PPUSH
12882: LD_INT 3
12884: PUSH
12885: LD_INT 60
12887: PUSH
12888: EMPTY
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 72
12899: PUSH
12900: FOR_IN
12901: IFFALSE 13014
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12903: LD_ADDR_VAR 0 5
12907: PUSH
12908: LD_INT 81
12910: PUSH
12911: LD_VAR 0 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 101
12922: PUSH
12923: LD_VAR 0 2
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: LD_INT 21
12937: PUSH
12938: LD_INT 1
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: LD_INT 58
12950: PUSH
12951: EMPTY
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: PPUSH
12968: CALL_OW 69
12972: PPUSH
12973: LD_VAR 0 4
12977: PPUSH
12978: CALL_OW 74
12982: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12983: LD_VAR 0 4
12987: PPUSH
12988: LD_VAR 0 5
12992: PPUSH
12993: CALL_OW 250
12997: PPUSH
12998: LD_VAR 0 5
13002: PPUSH
13003: CALL_OW 251
13007: PPUSH
13008: CALL_OW 111
// end ;
13012: GO 12900
13014: POP
13015: POP
// until vehs = 0 ;
13016: LD_VAR 0 6
13020: PUSH
13021: LD_INT 0
13023: EQUAL
13024: IFFALSE 12818
// end ;
13026: LD_VAR 0 3
13030: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
13039: LD_VAR 0 1
13043: NOT
13044: PUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 263
13054: PUSH
13055: LD_INT 2
13057: EQUAL
13058: NOT
13059: OR
13060: IFFALSE 13064
// exit ;
13062: GO 13380
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_VAR 0 1
13076: PPUSH
13077: CALL_OW 255
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: LD_INT 30
13091: PUSH
13092: LD_INT 36
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 34
13101: PUSH
13102: LD_INT 31
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: ST_TO_ADDR
// if not tmp then
13123: LD_VAR 0 6
13127: NOT
13128: IFFALSE 13132
// exit ;
13130: GO 13380
// result := [ ] ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: EMPTY
13138: ST_TO_ADDR
// for i in tmp do
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: LD_VAR 0 6
13148: PUSH
13149: FOR_IN
13150: IFFALSE 13221
// begin t := UnitsInside ( i ) ;
13152: LD_ADDR_VAR 0 4
13156: PUSH
13157: LD_VAR 0 3
13161: PPUSH
13162: CALL_OW 313
13166: ST_TO_ADDR
// if t then
13167: LD_VAR 0 4
13171: IFFALSE 13219
// for j in t do
13173: LD_ADDR_VAR 0 7
13177: PUSH
13178: LD_VAR 0 4
13182: PUSH
13183: FOR_IN
13184: IFFALSE 13217
// result := Insert ( result , result + 1 , j ) ;
13186: LD_ADDR_VAR 0 2
13190: PUSH
13191: LD_VAR 0 2
13195: PPUSH
13196: LD_VAR 0 2
13200: PUSH
13201: LD_INT 1
13203: PLUS
13204: PPUSH
13205: LD_VAR 0 7
13209: PPUSH
13210: CALL_OW 2
13214: ST_TO_ADDR
13215: GO 13183
13217: POP
13218: POP
// end ;
13219: GO 13149
13221: POP
13222: POP
// if not result then
13223: LD_VAR 0 2
13227: NOT
13228: IFFALSE 13232
// exit ;
13230: GO 13380
// mech := result [ 1 ] ;
13232: LD_ADDR_VAR 0 5
13236: PUSH
13237: LD_VAR 0 2
13241: PUSH
13242: LD_INT 1
13244: ARRAY
13245: ST_TO_ADDR
// if result > 1 then
13246: LD_VAR 0 2
13250: PUSH
13251: LD_INT 1
13253: GREATER
13254: IFFALSE 13366
// for i = 2 to result do
13256: LD_ADDR_VAR 0 3
13260: PUSH
13261: DOUBLE
13262: LD_INT 2
13264: DEC
13265: ST_TO_ADDR
13266: LD_VAR 0 2
13270: PUSH
13271: FOR_TO
13272: IFFALSE 13364
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13274: LD_ADDR_VAR 0 4
13278: PUSH
13279: LD_VAR 0 2
13283: PUSH
13284: LD_VAR 0 3
13288: ARRAY
13289: PPUSH
13290: LD_INT 3
13292: PPUSH
13293: CALL_OW 259
13297: PUSH
13298: LD_VAR 0 2
13302: PUSH
13303: LD_VAR 0 3
13307: ARRAY
13308: PPUSH
13309: CALL_OW 432
13313: MINUS
13314: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13315: LD_VAR 0 4
13319: PUSH
13320: LD_VAR 0 5
13324: PPUSH
13325: LD_INT 3
13327: PPUSH
13328: CALL_OW 259
13332: PUSH
13333: LD_VAR 0 5
13337: PPUSH
13338: CALL_OW 432
13342: MINUS
13343: GREATEREQUAL
13344: IFFALSE 13362
// mech := result [ i ] ;
13346: LD_ADDR_VAR 0 5
13350: PUSH
13351: LD_VAR 0 2
13355: PUSH
13356: LD_VAR 0 3
13360: ARRAY
13361: ST_TO_ADDR
// end ;
13362: GO 13271
13364: POP
13365: POP
// ComLinkTo ( vehicle , mech ) ;
13366: LD_VAR 0 1
13370: PPUSH
13371: LD_VAR 0 5
13375: PPUSH
13376: CALL_OW 135
// end ; end_of_file
13380: LD_VAR 0 2
13384: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 1
13392: EQUAL
13393: PUSH
13394: LD_VAR 0 2
13398: PUSH
13399: LD_INT 4
13401: EQUAL
13402: AND
13403: IFFALSE 13412
// YouLost ( text ) ;
13405: LD_STRING text
13407: PPUSH
13408: CALL_OW 104
// end ;
13412: PPOPN 2
13414: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
13415: LD_VAR 0 1
13419: PUSH
13420: LD_INT 235
13422: EQUAL
13423: PUSH
13424: LD_VAR 0 2
13428: PPUSH
13429: CALL_OW 255
13433: PUSH
13434: LD_INT 4
13436: EQUAL
13437: AND
13438: IFFALSE 13514
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
13440: LD_INT 235
13442: PPUSH
13443: LD_INT 84
13445: PPUSH
13446: LD_INT 1
13448: PPUSH
13449: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
13453: LD_INT 235
13455: PPUSH
13456: LD_INT 68
13458: PPUSH
13459: LD_INT 100
13461: PPUSH
13462: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13466: LD_INT 235
13468: PPUSH
13469: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13473: LD_INT 235
13475: PPUSH
13476: LD_INT 48
13478: PPUSH
13479: LD_INT 69
13481: PPUSH
13482: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13486: LD_INT 235
13488: PPUSH
13489: LD_INT 39
13491: PPUSH
13492: LD_INT 61
13494: PPUSH
13495: CALL_OW 171
// wait ( 0 0$10 ) ;
13499: LD_INT 350
13501: PPUSH
13502: CALL_OW 67
// powellUnloadCargo = 1 ;
13506: LD_ADDR_EXP 70
13510: PUSH
13511: LD_INT 1
13513: ST_TO_ADDR
// end ; end ;
13514: PPOPN 2
13516: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13517: LD_INT 0
13519: PPUSH
13520: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 21
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 56
13548: PUSH
13549: EMPTY
13550: LIST
13551: PUSH
13552: LD_INT 3
13554: PUSH
13555: LD_INT 60
13557: PUSH
13558: EMPTY
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 69
13575: PUSH
13576: LD_EXP 17
13580: PUSH
13581: EMPTY
13582: LIST
13583: DIFF
13584: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13585: LD_VAR 0 1
13589: PPUSH
13590: CALL_OW 255
13594: PUSH
13595: LD_INT 4
13597: EQUAL
13598: IFFALSE 13729
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13600: LD_INT 22
13602: PUSH
13603: LD_INT 4
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 30
13612: PUSH
13613: LD_INT 8
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL_OW 69
13628: PUSH
13629: LD_INT 1
13631: EQUAL
13632: IFFALSE 13729
// begin for i = 1 to 3 do
13634: LD_ADDR_VAR 0 2
13638: PUSH
13639: DOUBLE
13640: LD_INT 1
13642: DEC
13643: ST_TO_ADDR
13644: LD_INT 3
13646: PUSH
13647: FOR_TO
13648: IFFALSE 13712
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13650: LD_VAR 0 3
13654: PUSH
13655: LD_VAR 0 2
13659: ARRAY
13660: PPUSH
13661: LD_INT 3
13663: PUSH
13664: LD_INT 25
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 72
13682: PPUSH
13683: LD_VAR 0 1
13687: PPUSH
13688: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13692: LD_VAR 0 3
13696: PUSH
13697: LD_VAR 0 2
13701: ARRAY
13702: PPUSH
13703: LD_INT 4
13705: PPUSH
13706: CALL_OW 183
// end ;
13710: GO 13647
13712: POP
13713: POP
// ResAllTechs ( 4 , building , 1 ) ;
13714: LD_INT 4
13716: PPUSH
13717: LD_VAR 0 1
13721: PPUSH
13722: LD_INT 1
13724: PPUSH
13725: CALL 9574 0 3
// end ; if GetSide ( building ) = 8 then
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 255
13738: PUSH
13739: LD_INT 8
13741: EQUAL
13742: IFFALSE 13927
// begin if GetNation ( building ) = 3 then
13744: LD_VAR 0 1
13748: PPUSH
13749: CALL_OW 248
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13927
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13759: LD_EXP 36
13763: PPUSH
13764: LD_INT 73
13766: PPUSH
13767: LD_INT 16
13769: PPUSH
13770: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13774: LD_EXP 36
13778: PPUSH
13779: LD_INT 21
13781: PPUSH
13782: LD_INT 74
13784: PPUSH
13785: LD_INT 12
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 205
// wait ( 0 0$2 ) ;
13795: LD_INT 70
13797: PPUSH
13798: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13802: LD_EXP 36
13806: PPUSH
13807: LD_INT 22
13809: PUSH
13810: LD_INT 8
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 30
13819: PUSH
13820: LD_INT 3
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 23
13829: PUSH
13830: LD_INT 3
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: PUSH
13847: LD_INT 1
13849: ARRAY
13850: PPUSH
13851: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13855: LD_EXP 36
13859: PPUSH
13860: LD_INT 3
13862: PPUSH
13863: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13867: LD_INT 22
13869: PUSH
13870: LD_INT 8
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 3
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 23
13889: PUSH
13890: LD_INT 3
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 69
13906: PUSH
13907: LD_INT 1
13909: ARRAY
13910: PPUSH
13911: LD_INT 24
13913: PPUSH
13914: LD_INT 3
13916: PPUSH
13917: LD_INT 3
13919: PPUSH
13920: LD_INT 48
13922: PPUSH
13923: CALL_OW 185
// end ; end ; end ;
13927: PPOPN 3
13929: END
// on BuildingComplete ( building ) do var powellPeople ;
13930: LD_INT 0
13932: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13933: LD_VAR 0 1
13937: PPUSH
13938: CALL_OW 255
13942: PUSH
13943: LD_INT 4
13945: EQUAL
13946: PUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 266
13956: PUSH
13957: LD_INT 17
13959: EQUAL
13960: AND
13961: IFFALSE 14243
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13963: LD_ADDR_VAR 0 2
13967: PUSH
13968: LD_INT 22
13970: PUSH
13971: LD_INT 4
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 21
13980: PUSH
13981: LD_INT 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 56
13990: PUSH
13991: EMPTY
13992: LIST
13993: PUSH
13994: LD_INT 3
13996: PUSH
13997: LD_INT 60
13999: PUSH
14000: EMPTY
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 69
14017: PUSH
14018: LD_EXP 17
14022: PUSH
14023: EMPTY
14024: LIST
14025: DIFF
14026: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
14027: LD_INT 22
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 21
14039: PUSH
14040: LD_INT 3
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 30
14049: PUSH
14050: LD_INT 32
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: PPUSH
14062: CALL_OW 69
14066: PUSH
14067: LD_INT 1
14069: ARRAY
14070: PPUSH
14071: LD_INT 6
14073: PPUSH
14074: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
14078: LD_INT 22
14080: PUSH
14081: LD_INT 4
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 3
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 30
14100: PUSH
14101: LD_INT 32
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 69
14117: PUSH
14118: LD_INT 2
14120: ARRAY
14121: PPUSH
14122: LD_INT 5
14124: PPUSH
14125: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
14129: LD_VAR 0 2
14133: PUSH
14134: LD_INT 1
14136: ARRAY
14137: PPUSH
14138: LD_INT 22
14140: PUSH
14141: LD_INT 4
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 21
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 30
14160: PUSH
14161: LD_INT 32
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: PUSH
14178: LD_INT 1
14180: ARRAY
14181: PPUSH
14182: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
14186: LD_VAR 0 2
14190: PUSH
14191: LD_INT 2
14193: ARRAY
14194: PPUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 30
14217: PUSH
14218: LD_INT 32
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PUSH
14235: LD_INT 2
14237: ARRAY
14238: PPUSH
14239: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
14243: LD_VAR 0 1
14247: PPUSH
14248: CALL_OW 255
14252: PUSH
14253: LD_INT 4
14255: EQUAL
14256: PUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 266
14266: PUSH
14267: LD_INT 21
14269: EQUAL
14270: AND
14271: IFFALSE 14418
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14273: LD_INT 85
14275: PPUSH
14276: LD_INT 3
14278: PPUSH
14279: LD_INT 3
14281: PPUSH
14282: LD_INT 1
14284: PPUSH
14285: LD_INT 3
14287: PUSH
14288: LD_INT 5
14290: PUSH
14291: LD_INT 7
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 1
14301: PPUSH
14302: LD_INT 3
14304: PPUSH
14305: CALL_OW 12
14309: ARRAY
14310: PPUSH
14311: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14315: LD_INT 85
14317: PPUSH
14318: LD_INT 3
14320: PPUSH
14321: LD_INT 3
14323: PPUSH
14324: LD_INT 1
14326: PPUSH
14327: LD_INT 3
14329: PUSH
14330: LD_INT 5
14332: PUSH
14333: LD_INT 7
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 1
14343: PPUSH
14344: LD_INT 3
14346: PPUSH
14347: CALL_OW 12
14351: ARRAY
14352: PPUSH
14353: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14357: LD_INT 85
14359: PPUSH
14360: LD_INT 3
14362: PPUSH
14363: LD_INT 3
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: LD_INT 3
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: LD_INT 7
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 1
14385: PPUSH
14386: LD_INT 3
14388: PPUSH
14389: CALL_OW 12
14393: ARRAY
14394: PPUSH
14395: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
14399: LD_INT 85
14401: PPUSH
14402: LD_INT 5
14404: PPUSH
14405: LD_INT 3
14407: PPUSH
14408: LD_INT 1
14410: PPUSH
14411: LD_INT 6
14413: PPUSH
14414: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL_OW 255
14427: PUSH
14428: LD_INT 8
14430: EQUAL
14431: IFFALSE 14457
// begin if GetBType ( building ) = b_workshop then
14433: LD_VAR 0 1
14437: PPUSH
14438: CALL_OW 266
14442: PUSH
14443: LD_INT 2
14445: EQUAL
14446: IFFALSE 14457
// ComUpgrade ( building ) ;
14448: LD_VAR 0 1
14452: PPUSH
14453: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 255
14466: PUSH
14467: LD_INT 3
14469: EQUAL
14470: IFFALSE 14544
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14472: LD_ADDR_EXP 94
14476: PUSH
14477: LD_EXP 94
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14490: LD_ADDR_EXP 94
14494: PUSH
14495: LD_EXP 94
14499: PPUSH
14500: LD_INT 1
14502: PPUSH
14503: CALL_OW 3
14507: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14508: LD_ADDR_EXP 94
14512: PUSH
14513: LD_EXP 94
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 3
14525: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14526: LD_ADDR_EXP 94
14530: PUSH
14531: LD_EXP 94
14535: PPUSH
14536: LD_INT 1
14538: PPUSH
14539: CALL_OW 3
14543: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 255
14553: PUSH
14554: LD_INT 8
14556: EQUAL
14557: IFFALSE 14631
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14559: LD_ADDR_EXP 93
14563: PUSH
14564: LD_EXP 93
14568: PPUSH
14569: LD_INT 1
14571: PPUSH
14572: CALL_OW 3
14576: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14577: LD_ADDR_EXP 93
14581: PUSH
14582: LD_EXP 93
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 3
14594: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14595: LD_ADDR_EXP 93
14599: PUSH
14600: LD_EXP 93
14604: PPUSH
14605: LD_INT 1
14607: PPUSH
14608: CALL_OW 3
14612: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14613: LD_ADDR_EXP 93
14617: PUSH
14618: LD_EXP 93
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: CALL_OW 3
14630: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14631: LD_VAR 0 1
14635: PPUSH
14636: CALL_OW 255
14640: PUSH
14641: LD_INT 7
14643: EQUAL
14644: IFFALSE 14718
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14646: LD_ADDR_EXP 95
14650: PUSH
14651: LD_EXP 95
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: CALL_OW 3
14663: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14664: LD_ADDR_EXP 95
14668: PUSH
14669: LD_EXP 95
14673: PPUSH
14674: LD_INT 1
14676: PPUSH
14677: CALL_OW 3
14681: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14682: LD_ADDR_EXP 95
14686: PUSH
14687: LD_EXP 95
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 3
14699: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14700: LD_ADDR_EXP 95
14704: PUSH
14705: LD_EXP 95
14709: PPUSH
14710: LD_INT 1
14712: PPUSH
14713: CALL_OW 3
14717: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 255
14727: PUSH
14728: LD_INT 3
14730: EQUAL
14731: IFFALSE 14798
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 266
14742: PUSH
14743: LD_INT 32
14745: EQUAL
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 266
14756: PUSH
14757: LD_INT 33
14759: EQUAL
14760: OR
14761: IFFALSE 14798
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_INT 46
14770: PUSH
14771: LD_INT 47
14773: PUSH
14774: LD_INT 45
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 1
14784: PPUSH
14785: LD_INT 3
14787: PPUSH
14788: CALL_OW 12
14792: ARRAY
14793: PPUSH
14794: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14798: LD_VAR 0 1
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 8
14810: EQUAL
14811: PUSH
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 266
14821: PUSH
14822: LD_INT 32
14824: EQUAL
14825: AND
14826: IFFALSE 14859
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: LD_INT 28
14835: PUSH
14836: LD_INT 27
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 1
14845: PPUSH
14846: LD_INT 2
14848: PPUSH
14849: CALL_OW 12
14853: ARRAY
14854: PPUSH
14855: CALL_OW 431
// end ; end ;
14859: PPOPN 2
14861: END
// on EnterBuilding ( building , human ) do begin end ;
14862: PPOPN 2
14864: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 255
14874: PUSH
14875: LD_INT 6
14877: EQUAL
14878: IFFALSE 14896
// ruBehs = ruBehs ^ vehicle ;
14880: LD_ADDR_EXP 59
14884: PUSH
14885: LD_EXP 59
14889: PUSH
14890: LD_VAR 0 1
14894: ADD
14895: ST_TO_ADDR
// end ;
14896: PPOPN 1
14898: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget ;
14899: LD_INT 0
14901: PPUSH
14902: PPUSH
// begin if vehicle = powellVeh then
14903: LD_VAR 0 1
14907: PUSH
14908: LD_EXP 73
14912: EQUAL
14913: IFFALSE 14929
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: CALL_OW 313
14924: PPUSH
14925: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 255
14938: PUSH
14939: LD_INT 4
14941: EQUAL
14942: IFFALSE 14959
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14944: LD_VAR 0 1
14948: PPUSH
14949: LD_INT 58
14951: PPUSH
14952: LD_INT 63
14954: PPUSH
14955: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 255
14968: PUSH
14969: LD_INT 4
14971: EQUAL
14972: PUSH
14973: LD_EXP 69
14977: PUSH
14978: LD_INT 2
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_VAR 0 1
14987: PPUSH
14988: CALL_OW 264
14992: PUSH
14993: LD_INT 6
14995: EQUAL
14996: AND
14997: IFFALSE 15051
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14999: LD_EXP 66
15003: PUSH
15004: LD_INT 5
15006: ARRAY
15007: PPUSH
15008: CALL_OW 122
// wait ( 0 0$1 ) ;
15012: LD_INT 35
15014: PPUSH
15015: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
15019: LD_EXP 66
15023: PUSH
15024: LD_INT 5
15026: ARRAY
15027: PPUSH
15028: LD_INT 85
15030: PPUSH
15031: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
15035: LD_EXP 66
15039: PUSH
15040: LD_INT 5
15042: ARRAY
15043: PPUSH
15044: LD_INT 3
15046: PPUSH
15047: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
15051: LD_VAR 0 1
15055: PPUSH
15056: CALL_OW 255
15060: PUSH
15061: LD_INT 4
15063: EQUAL
15064: PUSH
15065: LD_EXP 69
15069: PUSH
15070: LD_INT 2
15072: EQUAL
15073: AND
15074: PUSH
15075: LD_VAR 0 1
15079: PPUSH
15080: CALL_OW 264
15084: PUSH
15085: LD_INT 3
15087: EQUAL
15088: AND
15089: IFFALSE 15116
// begin powellVeh = vehicle ;
15091: LD_ADDR_EXP 73
15095: PUSH
15096: LD_VAR 0 1
15100: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_INT 49
15108: PPUSH
15109: LD_INT 74
15111: PPUSH
15112: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 255
15125: PUSH
15126: LD_INT 8
15128: EQUAL
15129: PUSH
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 248
15139: PUSH
15140: LD_INT 2
15142: EQUAL
15143: AND
15144: PUSH
15145: LD_VAR 0 1
15149: PPUSH
15150: CALL_OW 247
15154: PUSH
15155: LD_INT 2
15157: EQUAL
15158: AND
15159: IFFALSE 15195
// begin legionVehicles = legionVehicles ^ vehicle ;
15161: LD_ADDR_EXP 55
15165: PUSH
15166: LD_EXP 55
15170: PUSH
15171: LD_VAR 0 1
15175: ADD
15176: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
15177: LD_VAR 0 1
15181: PPUSH
15182: LD_EXP 56
15186: PUSH
15187: LD_INT 1
15189: ARRAY
15190: PPUSH
15191: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 255
15204: PUSH
15205: LD_INT 8
15207: EQUAL
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 248
15218: PUSH
15219: LD_INT 3
15221: EQUAL
15222: AND
15223: IFFALSE 15762
// begin ChangeMissionObjectives ( MlegionDel ) ;
15225: LD_STRING MlegionDel
15227: PPUSH
15228: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
15232: LD_ADDR_VAR 0 3
15236: PUSH
15237: LD_INT 1
15239: PPUSH
15240: LD_INT 2
15242: PPUSH
15243: CALL_OW 12
15247: ST_TO_ADDR
// legionRocket = vehicle ;
15248: LD_ADDR_EXP 99
15252: PUSH
15253: LD_VAR 0 1
15257: ST_TO_ADDR
// DialogueOn ;
15258: CALL_OW 6
// if legionBomb = 1 then
15262: LD_VAR 0 3
15266: PUSH
15267: LD_INT 1
15269: EQUAL
15270: IFFALSE 15622
// begin if Kurt then
15272: LD_EXP 30
15276: IFFALSE 15292
// Say ( Kurt , D12-Kurt-1 ) else
15278: LD_EXP 30
15282: PPUSH
15283: LD_STRING D12-Kurt-1
15285: PPUSH
15286: CALL_OW 88
15290: GO 15354
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
15292: LD_INT 22
15294: PUSH
15295: LD_INT 8
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 21
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 25
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 26
15324: PUSH
15325: LD_INT 1
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PPUSH
15338: CALL_OW 69
15342: PUSH
15343: LD_INT 2
15345: ARRAY
15346: PPUSH
15347: LD_STRING D12-Kurt-1
15349: PPUSH
15350: CALL_OW 88
// DialogueOff ;
15354: CALL_OW 7
// wait ( 0 0$15 ) ;
15358: LD_INT 525
15360: PPUSH
15361: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15365: LD_ADDR_VAR 0 4
15369: PUSH
15370: LD_INT 22
15372: PUSH
15373: LD_INT 1
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 3
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 23
15392: PUSH
15393: LD_INT 1
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 30
15405: PUSH
15406: LD_INT 0
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 30
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 69
15438: ST_TO_ADDR
// if rocketTarget = 0 then
15439: LD_VAR 0 4
15443: PUSH
15444: LD_INT 0
15446: EQUAL
15447: IFFALSE 15523
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15449: LD_ADDR_VAR 0 4
15453: PUSH
15454: LD_INT 22
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 21
15466: PUSH
15467: LD_INT 3
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 23
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 2
15486: PUSH
15487: LD_INT 30
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 30
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: PPUSH
15518: CALL_OW 69
15522: ST_TO_ADDR
// if rocketTarget = 0 then
15523: LD_VAR 0 4
15527: PUSH
15528: LD_INT 0
15530: EQUAL
15531: IFFALSE 15585
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15533: LD_ADDR_VAR 0 4
15537: PUSH
15538: LD_INT 22
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 21
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 23
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 50
15570: PUSH
15571: EMPTY
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 69
15584: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15585: LD_EXP 99
15589: PPUSH
15590: LD_VAR 0 4
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: CALL_OW 250
15603: PPUSH
15604: LD_VAR 0 4
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PPUSH
15613: CALL_OW 251
15617: PPUSH
15618: CALL_OW 116
// end ; if legionBomb = 2 then
15622: LD_VAR 0 3
15626: PUSH
15627: LD_INT 2
15629: EQUAL
15630: IFFALSE 15762
// begin if Kurt then
15632: LD_EXP 30
15636: IFFALSE 15652
// Say ( Kurt , D12a-Kurt-1 ) else
15638: LD_EXP 30
15642: PPUSH
15643: LD_STRING D12a-Kurt-1
15645: PPUSH
15646: CALL_OW 88
15650: GO 15714
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15652: LD_INT 22
15654: PUSH
15655: LD_INT 8
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 21
15664: PUSH
15665: LD_INT 1
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 25
15674: PUSH
15675: LD_INT 1
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: PUSH
15703: LD_INT 2
15705: ARRAY
15706: PPUSH
15707: LD_STRING D12a-Kurt-11
15709: PPUSH
15710: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15714: LD_EXP 28
15718: PPUSH
15719: LD_STRING D12a-Roth-1
15721: PPUSH
15722: CALL_OW 94
// DialogueOff ;
15726: CALL_OW 7
// wait ( 0 0$15 ) ;
15730: LD_INT 525
15732: PPUSH
15733: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15737: LD_EXP 99
15741: PPUSH
15742: LD_INT 23
15744: PPUSH
15745: CALL_OW 250
15749: PPUSH
15750: LD_INT 23
15752: PPUSH
15753: CALL_OW 251
15757: PPUSH
15758: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15762: LD_VAR 0 1
15766: PPUSH
15767: CALL_OW 255
15771: PUSH
15772: LD_INT 3
15774: EQUAL
15775: PUSH
15776: LD_VAR 0 1
15780: PPUSH
15781: CALL_OW 248
15785: PUSH
15786: LD_INT 3
15788: EQUAL
15789: AND
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 247
15800: PUSH
15801: LD_INT 2
15803: EQUAL
15804: AND
15805: IFFALSE 15823
// RussianVehicles = RussianVehicles ^ vehicle ;
15807: LD_ADDR_EXP 61
15811: PUSH
15812: LD_EXP 61
15816: PUSH
15817: LD_VAR 0 1
15821: ADD
15822: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL_OW 255
15832: PUSH
15833: LD_INT 7
15835: EQUAL
15836: PUSH
15837: LD_VAR 0 1
15841: PPUSH
15842: CALL_OW 247
15846: PUSH
15847: LD_INT 2
15849: EQUAL
15850: AND
15851: IFFALSE 15910
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15853: LD_ADDR_EXP 62
15857: PUSH
15858: LD_EXP 62
15862: PUSH
15863: LD_VAR 0 1
15867: ADD
15868: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 263
15878: PUSH
15879: LD_INT 2
15881: EQUAL
15882: IFFALSE 15910
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15884: LD_VAR 0 1
15888: PPUSH
15889: LD_EXP 63
15893: PUSH
15894: LD_INT 1
15896: PPUSH
15897: LD_INT 3
15899: PPUSH
15900: CALL_OW 12
15904: ARRAY
15905: PPUSH
15906: CALL_OW 135
// end ; end ;
15910: PPOPN 4
15912: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 255
15922: PUSH
15923: LD_INT 4
15925: EQUAL
15926: PUSH
15927: LD_EXP 69
15931: PUSH
15932: LD_INT 1
15934: EQUAL
15935: AND
15936: IFFALSE 16039
// begin ComEnterUnit ( human , AmFact ) ;
15938: LD_VAR 0 2
15942: PPUSH
15943: LD_INT 85
15945: PPUSH
15946: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15950: LD_VAR 0 2
15954: PPUSH
15955: CALL_OW 258
15959: PUSH
15960: LD_INT 1
15962: EQUAL
15963: PUSH
15964: LD_EXP 102
15968: PUSH
15969: LD_INT 0
15971: EQUAL
15972: AND
15973: IFFALSE 16039
// begin blockEvent1 = 1 ;
15975: LD_ADDR_EXP 102
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// startAttacks = 1 ;
15983: LD_ADDR_EXP 72
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15991: LD_VAR 0 2
15995: PPUSH
15996: LD_STRING D4a-Sol1-1
15998: PPUSH
15999: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
16003: LD_EXP 17
16007: PPUSH
16008: LD_STRING D4a-Pow-1
16010: PPUSH
16011: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
16015: LD_VAR 0 2
16019: PPUSH
16020: LD_STRING D4a-Sol1-2
16022: PPUSH
16023: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
16027: LD_EXP 17
16031: PPUSH
16032: LD_STRING D4a-Pow-2
16034: PPUSH
16035: CALL_OW 88
// end ; end ; end ;
16039: PPOPN 2
16041: END
// on UnitDestroyed ( unit ) do var i ;
16042: LD_INT 0
16044: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 255
16054: PUSH
16055: LD_INT 1
16057: EQUAL
16058: PUSH
16059: LD_VAR 0 1
16063: PPUSH
16064: CALL_OW 247
16068: PUSH
16069: LD_INT 1
16071: EQUAL
16072: AND
16073: IFFALSE 16089
// unitLost = unitLost + 1 ;
16075: LD_ADDR_EXP 98
16079: PUSH
16080: LD_EXP 98
16084: PUSH
16085: LD_INT 1
16087: PLUS
16088: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
16089: LD_VAR 0 1
16093: PPUSH
16094: CALL_OW 255
16098: PUSH
16099: LD_INT 4
16101: EQUAL
16102: PUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 247
16112: PUSH
16113: LD_INT 1
16115: EQUAL
16116: AND
16117: IFFALSE 16167
// begin for i in amUnitsAttack do
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: LD_EXP 66
16128: PUSH
16129: FOR_IN
16130: IFFALSE 16165
// if i = unit then
16132: LD_VAR 0 2
16136: PUSH
16137: LD_VAR 0 1
16141: EQUAL
16142: IFFALSE 16163
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
16144: LD_ADDR_EXP 66
16148: PUSH
16149: LD_EXP 66
16153: PUSH
16154: LD_VAR 0 1
16158: PUSH
16159: EMPTY
16160: LIST
16161: DIFF
16162: ST_TO_ADDR
16163: GO 16129
16165: POP
16166: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 255
16176: PUSH
16177: LD_INT 8
16179: EQUAL
16180: PUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 247
16190: PUSH
16191: LD_INT 2
16193: EQUAL
16194: AND
16195: PUSH
16196: LD_VAR 0 1
16200: PPUSH
16201: CALL_OW 248
16205: PUSH
16206: LD_INT 2
16208: EQUAL
16209: AND
16210: IFFALSE 16260
// begin for i in legionVehicles do
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_EXP 55
16221: PUSH
16222: FOR_IN
16223: IFFALSE 16258
// if i = unit then
16225: LD_VAR 0 2
16229: PUSH
16230: LD_VAR 0 1
16234: EQUAL
16235: IFFALSE 16256
// legionVehicles = legionVehicles diff [ unit ] ;
16237: LD_ADDR_EXP 55
16241: PUSH
16242: LD_EXP 55
16246: PUSH
16247: LD_VAR 0 1
16251: PUSH
16252: EMPTY
16253: LIST
16254: DIFF
16255: ST_TO_ADDR
16256: GO 16222
16258: POP
16259: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16260: LD_VAR 0 1
16264: PPUSH
16265: CALL_OW 255
16269: PUSH
16270: LD_INT 3
16272: EQUAL
16273: PUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 247
16283: PUSH
16284: LD_INT 2
16286: EQUAL
16287: AND
16288: IFFALSE 16338
// begin for i in RussianVehicles do
16290: LD_ADDR_VAR 0 2
16294: PUSH
16295: LD_EXP 61
16299: PUSH
16300: FOR_IN
16301: IFFALSE 16336
// if i = unit then
16303: LD_VAR 0 2
16307: PUSH
16308: LD_VAR 0 1
16312: EQUAL
16313: IFFALSE 16334
// RussianVehicles = RussianVehicles diff [ unit ] ;
16315: LD_ADDR_EXP 61
16319: PUSH
16320: LD_EXP 61
16324: PUSH
16325: LD_VAR 0 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: DIFF
16333: ST_TO_ADDR
16334: GO 16300
16336: POP
16337: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 255
16347: PUSH
16348: LD_INT 7
16350: EQUAL
16351: PUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 247
16361: PUSH
16362: LD_INT 2
16364: EQUAL
16365: AND
16366: IFFALSE 16416
// begin for i in AllianceVehicles do
16368: LD_ADDR_VAR 0 2
16372: PUSH
16373: LD_EXP 62
16377: PUSH
16378: FOR_IN
16379: IFFALSE 16414
// if i = unit then
16381: LD_VAR 0 2
16385: PUSH
16386: LD_VAR 0 1
16390: EQUAL
16391: IFFALSE 16412
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
16393: LD_ADDR_EXP 62
16397: PUSH
16398: LD_EXP 62
16402: PUSH
16403: LD_VAR 0 1
16407: PUSH
16408: EMPTY
16409: LIST
16410: DIFF
16411: ST_TO_ADDR
16412: GO 16378
16414: POP
16415: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 255
16425: PUSH
16426: LD_INT 3
16428: EQUAL
16429: PUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 247
16439: PUSH
16440: LD_INT 3
16442: EQUAL
16443: AND
16444: IFFALSE 17136
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16446: LD_VAR 0 1
16450: PPUSH
16451: CALL_OW 266
16455: PUSH
16456: LD_INT 31
16458: EQUAL
16459: PUSH
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 266
16469: PUSH
16470: LD_INT 32
16472: EQUAL
16473: OR
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 266
16484: PUSH
16485: LD_INT 36
16487: EQUAL
16488: OR
16489: PUSH
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 266
16499: PUSH
16500: LD_INT 0
16502: EQUAL
16503: OR
16504: PUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 266
16514: PUSH
16515: LD_INT 24
16517: EQUAL
16518: OR
16519: PUSH
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL_OW 266
16529: PUSH
16530: LD_INT 17
16532: EQUAL
16533: OR
16534: PUSH
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 266
16544: PUSH
16545: LD_INT 25
16547: EQUAL
16548: OR
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 266
16559: PUSH
16560: LD_INT 19
16562: EQUAL
16563: OR
16564: PUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 266
16574: PUSH
16575: LD_INT 20
16577: EQUAL
16578: OR
16579: PUSH
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 266
16589: PUSH
16590: LD_INT 18
16592: EQUAL
16593: OR
16594: PUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 266
16604: PUSH
16605: LD_INT 21
16607: EQUAL
16608: OR
16609: PUSH
16610: LD_VAR 0 1
16614: PPUSH
16615: CALL_OW 266
16619: PUSH
16620: LD_INT 23
16622: EQUAL
16623: OR
16624: PUSH
16625: LD_VAR 0 1
16629: PPUSH
16630: CALL_OW 266
16634: PUSH
16635: LD_INT 16
16637: EQUAL
16638: OR
16639: PUSH
16640: LD_VAR 0 1
16644: PPUSH
16645: CALL_OW 266
16649: PUSH
16650: LD_INT 6
16652: EQUAL
16653: OR
16654: PUSH
16655: LD_VAR 0 1
16659: PPUSH
16660: CALL_OW 266
16664: PUSH
16665: LD_INT 29
16667: EQUAL
16668: OR
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 266
16679: PUSH
16680: LD_INT 26
16682: EQUAL
16683: OR
16684: PUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 266
16694: PUSH
16695: LD_INT 30
16697: EQUAL
16698: OR
16699: PUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 266
16709: PUSH
16710: LD_INT 28
16712: EQUAL
16713: OR
16714: PUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 266
16724: PUSH
16725: LD_INT 27
16727: EQUAL
16728: OR
16729: PUSH
16730: LD_VAR 0 1
16734: PPUSH
16735: CALL_OW 266
16739: PUSH
16740: LD_INT 33
16742: EQUAL
16743: OR
16744: PUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 266
16754: PUSH
16755: LD_INT 2
16757: EQUAL
16758: OR
16759: PUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 266
16769: PUSH
16770: LD_INT 4
16772: EQUAL
16773: OR
16774: IFFALSE 16860
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16776: LD_ADDR_EXP 94
16780: PUSH
16781: LD_EXP 94
16785: PUSH
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 266
16795: ADD
16796: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16797: LD_ADDR_EXP 94
16801: PUSH
16802: LD_EXP 94
16806: PUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 250
16816: ADD
16817: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16818: LD_ADDR_EXP 94
16822: PUSH
16823: LD_EXP 94
16827: PUSH
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 251
16837: ADD
16838: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16839: LD_ADDR_EXP 94
16843: PUSH
16844: LD_EXP 94
16848: PUSH
16849: LD_VAR 0 1
16853: PPUSH
16854: CALL_OW 254
16858: ADD
16859: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 266
16869: PUSH
16870: LD_INT 1
16872: EQUAL
16873: IFFALSE 16952
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16875: LD_ADDR_EXP 94
16879: PUSH
16880: LD_EXP 94
16884: PUSH
16885: LD_INT 0
16887: ADD
16888: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16889: LD_ADDR_EXP 94
16893: PUSH
16894: LD_EXP 94
16898: PUSH
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 250
16908: ADD
16909: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16910: LD_ADDR_EXP 94
16914: PUSH
16915: LD_EXP 94
16919: PUSH
16920: LD_VAR 0 1
16924: PPUSH
16925: CALL_OW 251
16929: ADD
16930: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16931: LD_ADDR_EXP 94
16935: PUSH
16936: LD_EXP 94
16940: PUSH
16941: LD_VAR 0 1
16945: PPUSH
16946: CALL_OW 254
16950: ADD
16951: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16952: LD_VAR 0 1
16956: PPUSH
16957: CALL_OW 266
16961: PUSH
16962: LD_INT 3
16964: EQUAL
16965: IFFALSE 17044
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16967: LD_ADDR_EXP 94
16971: PUSH
16972: LD_EXP 94
16976: PUSH
16977: LD_INT 2
16979: ADD
16980: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16981: LD_ADDR_EXP 94
16985: PUSH
16986: LD_EXP 94
16990: PUSH
16991: LD_VAR 0 1
16995: PPUSH
16996: CALL_OW 250
17000: ADD
17001: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
17002: LD_ADDR_EXP 94
17006: PUSH
17007: LD_EXP 94
17011: PUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 251
17021: ADD
17022: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17023: LD_ADDR_EXP 94
17027: PUSH
17028: LD_EXP 94
17032: PUSH
17033: LD_VAR 0 1
17037: PPUSH
17038: CALL_OW 254
17042: ADD
17043: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17044: LD_VAR 0 1
17048: PPUSH
17049: CALL_OW 266
17053: PUSH
17054: LD_INT 5
17056: EQUAL
17057: IFFALSE 17136
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
17059: LD_ADDR_EXP 94
17063: PUSH
17064: LD_EXP 94
17068: PUSH
17069: LD_INT 4
17071: ADD
17072: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
17073: LD_ADDR_EXP 94
17077: PUSH
17078: LD_EXP 94
17082: PUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 250
17092: ADD
17093: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
17094: LD_ADDR_EXP 94
17098: PUSH
17099: LD_EXP 94
17103: PUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 251
17113: ADD
17114: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17115: LD_ADDR_EXP 94
17119: PUSH
17120: LD_EXP 94
17124: PUSH
17125: LD_VAR 0 1
17129: PPUSH
17130: CALL_OW 254
17134: ADD
17135: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL_OW 255
17145: PUSH
17146: LD_INT 8
17148: EQUAL
17149: PUSH
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 247
17159: PUSH
17160: LD_INT 3
17162: EQUAL
17163: AND
17164: PUSH
17165: LD_VAR 0 1
17169: PPUSH
17170: CALL_OW 248
17174: PUSH
17175: LD_INT 2
17177: EQUAL
17178: AND
17179: IFFALSE 17871
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 266
17190: PUSH
17191: LD_INT 31
17193: EQUAL
17194: PUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 266
17204: PUSH
17205: LD_INT 32
17207: EQUAL
17208: OR
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 266
17219: PUSH
17220: LD_INT 36
17222: EQUAL
17223: OR
17224: PUSH
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL_OW 266
17234: PUSH
17235: LD_INT 0
17237: EQUAL
17238: OR
17239: PUSH
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 266
17249: PUSH
17250: LD_INT 24
17252: EQUAL
17253: OR
17254: PUSH
17255: LD_VAR 0 1
17259: PPUSH
17260: CALL_OW 266
17264: PUSH
17265: LD_INT 17
17267: EQUAL
17268: OR
17269: PUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: CALL_OW 266
17279: PUSH
17280: LD_INT 25
17282: EQUAL
17283: OR
17284: PUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 266
17294: PUSH
17295: LD_INT 19
17297: EQUAL
17298: OR
17299: PUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 266
17309: PUSH
17310: LD_INT 20
17312: EQUAL
17313: OR
17314: PUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 266
17324: PUSH
17325: LD_INT 18
17327: EQUAL
17328: OR
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 266
17339: PUSH
17340: LD_INT 21
17342: EQUAL
17343: OR
17344: PUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 266
17354: PUSH
17355: LD_INT 23
17357: EQUAL
17358: OR
17359: PUSH
17360: LD_VAR 0 1
17364: PPUSH
17365: CALL_OW 266
17369: PUSH
17370: LD_INT 16
17372: EQUAL
17373: OR
17374: PUSH
17375: LD_VAR 0 1
17379: PPUSH
17380: CALL_OW 266
17384: PUSH
17385: LD_INT 6
17387: EQUAL
17388: OR
17389: PUSH
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 266
17399: PUSH
17400: LD_INT 29
17402: EQUAL
17403: OR
17404: PUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 266
17414: PUSH
17415: LD_INT 26
17417: EQUAL
17418: OR
17419: PUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 266
17429: PUSH
17430: LD_INT 30
17432: EQUAL
17433: OR
17434: PUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 266
17444: PUSH
17445: LD_INT 28
17447: EQUAL
17448: OR
17449: PUSH
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 266
17459: PUSH
17460: LD_INT 27
17462: EQUAL
17463: OR
17464: PUSH
17465: LD_VAR 0 1
17469: PPUSH
17470: CALL_OW 266
17474: PUSH
17475: LD_INT 33
17477: EQUAL
17478: OR
17479: PUSH
17480: LD_VAR 0 1
17484: PPUSH
17485: CALL_OW 266
17489: PUSH
17490: LD_INT 2
17492: EQUAL
17493: OR
17494: PUSH
17495: LD_VAR 0 1
17499: PPUSH
17500: CALL_OW 266
17504: PUSH
17505: LD_INT 4
17507: EQUAL
17508: OR
17509: IFFALSE 17595
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17511: LD_ADDR_EXP 93
17515: PUSH
17516: LD_EXP 93
17520: PUSH
17521: LD_VAR 0 1
17525: PPUSH
17526: CALL_OW 266
17530: ADD
17531: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17532: LD_ADDR_EXP 93
17536: PUSH
17537: LD_EXP 93
17541: PUSH
17542: LD_VAR 0 1
17546: PPUSH
17547: CALL_OW 250
17551: ADD
17552: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17553: LD_ADDR_EXP 93
17557: PUSH
17558: LD_EXP 93
17562: PUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 251
17572: ADD
17573: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17574: LD_ADDR_EXP 93
17578: PUSH
17579: LD_EXP 93
17583: PUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 254
17593: ADD
17594: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17595: LD_VAR 0 1
17599: PPUSH
17600: CALL_OW 266
17604: PUSH
17605: LD_INT 1
17607: EQUAL
17608: IFFALSE 17687
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17610: LD_ADDR_EXP 93
17614: PUSH
17615: LD_EXP 93
17619: PUSH
17620: LD_INT 0
17622: ADD
17623: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17624: LD_ADDR_EXP 93
17628: PUSH
17629: LD_EXP 93
17633: PUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 250
17643: ADD
17644: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17645: LD_ADDR_EXP 93
17649: PUSH
17650: LD_EXP 93
17654: PUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 251
17664: ADD
17665: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17666: LD_ADDR_EXP 93
17670: PUSH
17671: LD_EXP 93
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 254
17685: ADD
17686: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 266
17696: PUSH
17697: LD_INT 3
17699: EQUAL
17700: IFFALSE 17779
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17702: LD_ADDR_EXP 93
17706: PUSH
17707: LD_EXP 93
17711: PUSH
17712: LD_INT 2
17714: ADD
17715: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17716: LD_ADDR_EXP 93
17720: PUSH
17721: LD_EXP 93
17725: PUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 250
17735: ADD
17736: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17737: LD_ADDR_EXP 93
17741: PUSH
17742: LD_EXP 93
17746: PUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: CALL_OW 251
17756: ADD
17757: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17758: LD_ADDR_EXP 93
17762: PUSH
17763: LD_EXP 93
17767: PUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 254
17777: ADD
17778: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 266
17788: PUSH
17789: LD_INT 5
17791: EQUAL
17792: IFFALSE 17871
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17794: LD_ADDR_EXP 93
17798: PUSH
17799: LD_EXP 93
17803: PUSH
17804: LD_INT 4
17806: ADD
17807: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17808: LD_ADDR_EXP 93
17812: PUSH
17813: LD_EXP 93
17817: PUSH
17818: LD_VAR 0 1
17822: PPUSH
17823: CALL_OW 250
17827: ADD
17828: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17829: LD_ADDR_EXP 93
17833: PUSH
17834: LD_EXP 93
17838: PUSH
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 251
17848: ADD
17849: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17850: LD_ADDR_EXP 93
17854: PUSH
17855: LD_EXP 93
17859: PUSH
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 254
17869: ADD
17870: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 255
17880: PUSH
17881: LD_INT 7
17883: EQUAL
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 247
17894: PUSH
17895: LD_INT 3
17897: EQUAL
17898: AND
17899: IFFALSE 18591
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17901: LD_VAR 0 1
17905: PPUSH
17906: CALL_OW 266
17910: PUSH
17911: LD_INT 31
17913: EQUAL
17914: PUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 266
17924: PUSH
17925: LD_INT 32
17927: EQUAL
17928: OR
17929: PUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 266
17939: PUSH
17940: LD_INT 36
17942: EQUAL
17943: OR
17944: PUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 266
17954: PUSH
17955: LD_INT 0
17957: EQUAL
17958: OR
17959: PUSH
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 266
17969: PUSH
17970: LD_INT 24
17972: EQUAL
17973: OR
17974: PUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 266
17984: PUSH
17985: LD_INT 17
17987: EQUAL
17988: OR
17989: PUSH
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 266
17999: PUSH
18000: LD_INT 25
18002: EQUAL
18003: OR
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 266
18014: PUSH
18015: LD_INT 19
18017: EQUAL
18018: OR
18019: PUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: CALL_OW 266
18029: PUSH
18030: LD_INT 20
18032: EQUAL
18033: OR
18034: PUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: CALL_OW 266
18044: PUSH
18045: LD_INT 18
18047: EQUAL
18048: OR
18049: PUSH
18050: LD_VAR 0 1
18054: PPUSH
18055: CALL_OW 266
18059: PUSH
18060: LD_INT 21
18062: EQUAL
18063: OR
18064: PUSH
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 266
18074: PUSH
18075: LD_INT 23
18077: EQUAL
18078: OR
18079: PUSH
18080: LD_VAR 0 1
18084: PPUSH
18085: CALL_OW 266
18089: PUSH
18090: LD_INT 16
18092: EQUAL
18093: OR
18094: PUSH
18095: LD_VAR 0 1
18099: PPUSH
18100: CALL_OW 266
18104: PUSH
18105: LD_INT 6
18107: EQUAL
18108: OR
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 266
18119: PUSH
18120: LD_INT 29
18122: EQUAL
18123: OR
18124: PUSH
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL_OW 266
18134: PUSH
18135: LD_INT 26
18137: EQUAL
18138: OR
18139: PUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 266
18149: PUSH
18150: LD_INT 30
18152: EQUAL
18153: OR
18154: PUSH
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 266
18164: PUSH
18165: LD_INT 28
18167: EQUAL
18168: OR
18169: PUSH
18170: LD_VAR 0 1
18174: PPUSH
18175: CALL_OW 266
18179: PUSH
18180: LD_INT 27
18182: EQUAL
18183: OR
18184: PUSH
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 266
18194: PUSH
18195: LD_INT 33
18197: EQUAL
18198: OR
18199: PUSH
18200: LD_VAR 0 1
18204: PPUSH
18205: CALL_OW 266
18209: PUSH
18210: LD_INT 2
18212: EQUAL
18213: OR
18214: PUSH
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 266
18224: PUSH
18225: LD_INT 4
18227: EQUAL
18228: OR
18229: IFFALSE 18315
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
18231: LD_ADDR_EXP 95
18235: PUSH
18236: LD_EXP 95
18240: PUSH
18241: LD_VAR 0 1
18245: PPUSH
18246: CALL_OW 266
18250: ADD
18251: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18252: LD_ADDR_EXP 95
18256: PUSH
18257: LD_EXP 95
18261: PUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 250
18271: ADD
18272: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18273: LD_ADDR_EXP 95
18277: PUSH
18278: LD_EXP 95
18282: PUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 251
18292: ADD
18293: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18294: LD_ADDR_EXP 95
18298: PUSH
18299: LD_EXP 95
18303: PUSH
18304: LD_VAR 0 1
18308: PPUSH
18309: CALL_OW 254
18313: ADD
18314: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18315: LD_VAR 0 1
18319: PPUSH
18320: CALL_OW 266
18324: PUSH
18325: LD_INT 1
18327: EQUAL
18328: IFFALSE 18407
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
18330: LD_ADDR_EXP 95
18334: PUSH
18335: LD_EXP 95
18339: PUSH
18340: LD_INT 0
18342: ADD
18343: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18344: LD_ADDR_EXP 95
18348: PUSH
18349: LD_EXP 95
18353: PUSH
18354: LD_VAR 0 1
18358: PPUSH
18359: CALL_OW 250
18363: ADD
18364: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18365: LD_ADDR_EXP 95
18369: PUSH
18370: LD_EXP 95
18374: PUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 251
18384: ADD
18385: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18386: LD_ADDR_EXP 95
18390: PUSH
18391: LD_EXP 95
18395: PUSH
18396: LD_VAR 0 1
18400: PPUSH
18401: CALL_OW 254
18405: ADD
18406: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL_OW 266
18416: PUSH
18417: LD_INT 3
18419: EQUAL
18420: IFFALSE 18499
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
18422: LD_ADDR_EXP 95
18426: PUSH
18427: LD_EXP 95
18431: PUSH
18432: LD_INT 2
18434: ADD
18435: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18436: LD_ADDR_EXP 95
18440: PUSH
18441: LD_EXP 95
18445: PUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: CALL_OW 250
18455: ADD
18456: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18457: LD_ADDR_EXP 95
18461: PUSH
18462: LD_EXP 95
18466: PUSH
18467: LD_VAR 0 1
18471: PPUSH
18472: CALL_OW 251
18476: ADD
18477: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18478: LD_ADDR_EXP 95
18482: PUSH
18483: LD_EXP 95
18487: PUSH
18488: LD_VAR 0 1
18492: PPUSH
18493: CALL_OW 254
18497: ADD
18498: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL_OW 266
18508: PUSH
18509: LD_INT 5
18511: EQUAL
18512: IFFALSE 18591
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18514: LD_ADDR_EXP 95
18518: PUSH
18519: LD_EXP 95
18523: PUSH
18524: LD_INT 4
18526: ADD
18527: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18528: LD_ADDR_EXP 95
18532: PUSH
18533: LD_EXP 95
18537: PUSH
18538: LD_VAR 0 1
18542: PPUSH
18543: CALL_OW 250
18547: ADD
18548: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18549: LD_ADDR_EXP 95
18553: PUSH
18554: LD_EXP 95
18558: PUSH
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 251
18568: ADD
18569: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18570: LD_ADDR_EXP 95
18574: PUSH
18575: LD_EXP 95
18579: PUSH
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 254
18589: ADD
18590: ST_TO_ADDR
// end ; end ; end ;
18591: PPOPN 2
18593: END
// on UnitKamikazed ( unit ) do var i ;
18594: LD_INT 0
18596: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL_OW 255
18606: PUSH
18607: LD_INT 8
18609: EQUAL
18610: PUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 247
18620: PUSH
18621: LD_INT 2
18623: EQUAL
18624: AND
18625: PUSH
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 248
18635: PUSH
18636: LD_INT 2
18638: EQUAL
18639: AND
18640: IFFALSE 18690
// begin for i in legionVehicles do
18642: LD_ADDR_VAR 0 2
18646: PUSH
18647: LD_EXP 55
18651: PUSH
18652: FOR_IN
18653: IFFALSE 18688
// if i = unit then
18655: LD_VAR 0 2
18659: PUSH
18660: LD_VAR 0 1
18664: EQUAL
18665: IFFALSE 18686
// legionVehicles = legionVehicles diff [ unit ] ;
18667: LD_ADDR_EXP 55
18671: PUSH
18672: LD_EXP 55
18676: PUSH
18677: LD_VAR 0 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: DIFF
18685: ST_TO_ADDR
18686: GO 18652
18688: POP
18689: POP
// end ; end ;
18690: PPOPN 2
18692: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18693: LD_VAR 0 2
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: LD_INT 29
18705: PPUSH
18706: CALL_OW 309
18710: IFFALSE 18770
// begin if GetSide ( unit ) = 1 then
18712: LD_VAR 0 1
18716: PPUSH
18717: CALL_OW 255
18721: PUSH
18722: LD_INT 1
18724: EQUAL
18725: IFFALSE 18741
// begin wait ( 0 0$6 ) ;
18727: LD_INT 210
18729: PPUSH
18730: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18734: LD_STRING Motherlode2
18736: PPUSH
18737: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 255
18750: PUSH
18751: LD_INT 8
18753: EQUAL
18754: IFFALSE 18770
// begin wait ( 0 0$6 ) ;
18756: LD_INT 210
18758: PPUSH
18759: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18763: LD_STRING Motherlode1
18765: PPUSH
18766: CALL_OW 104
// end ; end ; end ;
18770: PPOPN 3
18772: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 255
18782: PUSH
18783: LD_INT 2
18785: EQUAL
18786: IFFALSE 18795
// YouLost ( Motherlode3 ) ;
18788: LD_STRING Motherlode3
18790: PPUSH
18791: CALL_OW 104
// end ;
18795: PPOPN 3
18797: END
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do begin if old_identifier in allianceVehicles then
18798: LD_VAR 0 2
18802: PUSH
18803: LD_EXP 62
18807: IN
18808: IFFALSE 18826
// allianceVehicles := allianceVehicles diff old_identifier ;
18810: LD_ADDR_EXP 62
18814: PUSH
18815: LD_EXP 62
18819: PUSH
18820: LD_VAR 0 2
18824: DIFF
18825: ST_TO_ADDR
// if old_identifier in legionVehicles then
18826: LD_VAR 0 2
18830: PUSH
18831: LD_EXP 55
18835: IN
18836: IFFALSE 18854
// legionVehicles := legionVehicles diff old_identifier ;
18838: LD_ADDR_EXP 55
18842: PUSH
18843: LD_EXP 55
18847: PUSH
18848: LD_VAR 0 2
18852: DIFF
18853: ST_TO_ADDR
// if old_identifier in russianVehicles then
18854: LD_VAR 0 2
18858: PUSH
18859: LD_EXP 61
18863: IN
18864: IFFALSE 18882
// russianVehicles := russianVehicles diff old_identifier ;
18866: LD_ADDR_EXP 61
18870: PUSH
18871: LD_EXP 61
18875: PUSH
18876: LD_VAR 0 2
18880: DIFF
18881: ST_TO_ADDR
// end ;
18882: PPOPN 4
18884: END
// on SailEvent ( event ) do begin case event of 1 :
18885: LD_VAR 0 1
18889: PUSH
18890: LD_INT 1
18892: DOUBLE
18893: EQUAL
18894: IFTRUE 18898
18896: GO 19045
18898: POP
// begin PlaceSeeing ( 118 , 180 , 1 , - 15 ) ;
18899: LD_INT 118
18901: PPUSH
18902: LD_INT 180
18904: PPUSH
18905: LD_INT 1
18907: PPUSH
18908: LD_INT 15
18910: NEG
18911: PPUSH
18912: CALL_OW 330
// RemoveSeeing ( 118 , 180 , 1 ) ;
18916: LD_INT 118
18918: PPUSH
18919: LD_INT 180
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 331
// PlaceSeeing ( 76 , 133 , 1 , - 15 ) ;
18929: LD_INT 76
18931: PPUSH
18932: LD_INT 133
18934: PPUSH
18935: LD_INT 1
18937: PPUSH
18938: LD_INT 15
18940: NEG
18941: PPUSH
18942: CALL_OW 330
// RemoveSeeing ( 76 , 133 , 1 ) ;
18946: LD_INT 76
18948: PPUSH
18949: LD_INT 133
18951: PPUSH
18952: LD_INT 1
18954: PPUSH
18955: CALL_OW 331
// if not skip then
18959: LD_EXP 104
18963: NOT
18964: IFFALSE 19043
// begin wait ( 0 0$4.3 ) ;
18966: LD_INT 150
18968: PPUSH
18969: CALL_OW 67
// CenterOnXY ( 118 , 180 ) ;
18973: LD_INT 118
18975: PPUSH
18976: LD_INT 180
18978: PPUSH
18979: CALL_OW 84
// wait ( 0 0$2 ) ;
18983: LD_INT 70
18985: PPUSH
18986: CALL_OW 67
// CenterOnXY ( 76 , 133 ) ;
18990: LD_INT 76
18992: PPUSH
18993: LD_INT 133
18995: PPUSH
18996: CALL_OW 84
// wait ( 0 0$1.3 ) ;
19000: LD_INT 46
19002: PPUSH
19003: CALL_OW 67
// if IsInUnit ( JMM ) then
19007: LD_EXP 1
19011: PPUSH
19012: CALL_OW 310
19016: IFFALSE 19034
// CenterOnUnits ( IsInUnit ( JMM ) ) else
19018: LD_EXP 1
19022: PPUSH
19023: CALL_OW 310
19027: PPUSH
19028: CALL_OW 85
19032: GO 19043
// CenterOnUnits ( JMM ) ;
19034: LD_EXP 1
19038: PPUSH
19039: CALL_OW 85
// end ; end ; 2 :
19043: GO 19170
19045: LD_INT 2
19047: DOUBLE
19048: EQUAL
19049: IFTRUE 19053
19051: GO 19169
19053: POP
// begin wait ( 0 0$2 ) ;
19054: LD_INT 70
19056: PPUSH
19057: CALL_OW 67
// RevealFogArea ( 1 , RevealArea1 ) ;
19061: LD_INT 1
19063: PPUSH
19064: LD_INT 3
19066: PPUSH
19067: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
19071: LD_INT 1
19073: PPUSH
19074: LD_INT 4
19076: PPUSH
19077: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
19081: LD_INT 1
19083: PPUSH
19084: LD_INT 5
19086: PPUSH
19087: CALL_OW 332
// if not skip then
19091: LD_EXP 104
19095: NOT
19096: IFFALSE 19167
// begin CenterOnXY ( 171 , 81 ) ;
19098: LD_INT 171
19100: PPUSH
19101: LD_INT 81
19103: PPUSH
19104: CALL_OW 84
// wait ( 0 0$2 ) ;
19108: LD_INT 70
19110: PPUSH
19111: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
19115: LD_INT 162
19117: PPUSH
19118: LD_INT 36
19120: PPUSH
19121: CALL_OW 84
// wait ( 0 0$2 ) ;
19125: LD_INT 70
19127: PPUSH
19128: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
19132: LD_INT 75
19134: PPUSH
19135: LD_INT 16
19137: PPUSH
19138: CALL_OW 84
// wait ( 0 0$1.3 ) ;
19142: LD_INT 46
19144: PPUSH
19145: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
19149: LD_EXP 17
19153: PUSH
19154: LD_EXP 1
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PPUSH
19163: CALL_OW 87
// end ; end ; end ;
19167: GO 19170
19169: POP
// end ;
19170: PPOPN 1
19172: END
// on DialogueSkipped ( i ) do begin skip = true ;
19173: LD_ADDR_EXP 104
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// end ; end_of_file
19181: PPOPN 1
19183: END
// every 3 3$0 do
19184: GO 19186
19186: DISABLE
// begin enable ;
19187: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
19188: LD_ADDR_EXP 87
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: LD_INT 3
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: PPUSH
19206: LD_INT 2
19208: PPUSH
19209: CALL_OW 12
19213: ARRAY
19214: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
19215: LD_INT 22
19217: PUSH
19218: LD_INT 8
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 21
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: PUSH
19244: LD_INT 1
19246: GREATER
19247: IFFALSE 19278
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
19249: LD_ADDR_EXP 89
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 8
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: PPUSH
19267: LD_INT 2
19269: PPUSH
19270: CALL_OW 12
19274: ARRAY
19275: ST_TO_ADDR
19276: GO 19286
// RussianTarget = 1 ;
19278: LD_ADDR_EXP 89
19282: PUSH
19283: LD_INT 1
19285: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
19286: LD_INT 22
19288: PUSH
19289: LD_INT 8
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PPUSH
19310: CALL_OW 69
19314: PUSH
19315: LD_INT 1
19317: GREATER
19318: IFFALSE 19353
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
19320: LD_ADDR_EXP 88
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: LD_INT 3
19330: PUSH
19331: LD_INT 8
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 1
19341: PPUSH
19342: LD_INT 3
19344: PPUSH
19345: CALL_OW 12
19349: ARRAY
19350: ST_TO_ADDR
19351: GO 19380
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
19353: LD_ADDR_EXP 88
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 3
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: PPUSH
19371: LD_INT 2
19373: PPUSH
19374: CALL_OW 12
19378: ARRAY
19379: ST_TO_ADDR
// end ;
19380: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople , engs ;
19381: LD_EXP 68
19385: PUSH
19386: LD_INT 1
19388: EQUAL
19389: IFFALSE 19771
19391: GO 19393
19393: DISABLE
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
19398: PPUSH
// begin for i = 1 to 4 do
19399: LD_ADDR_VAR 0 1
19403: PUSH
19404: DOUBLE
19405: LD_INT 1
19407: DEC
19408: ST_TO_ADDR
19409: LD_INT 4
19411: PUSH
19412: FOR_TO
19413: IFFALSE 19453
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
19415: LD_EXP 66
19419: PUSH
19420: LD_VAR 0 1
19424: ARRAY
19425: PPUSH
19426: LD_INT 85
19428: PPUSH
19429: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
19433: LD_EXP 66
19437: PUSH
19438: LD_VAR 0 1
19442: ARRAY
19443: PPUSH
19444: LD_INT 3
19446: PPUSH
19447: CALL_OW 183
// end ;
19451: GO 19412
19453: POP
19454: POP
// engs := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) ;
19455: LD_ADDR_VAR 0 3
19459: PUSH
19460: LD_INT 22
19462: PUSH
19463: LD_INT 4
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 25
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19489: LD_INT 35
19491: PPUSH
19492: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff amUnitsAttack ;
19496: LD_ADDR_VAR 0 2
19500: PUSH
19501: LD_INT 22
19503: PUSH
19504: LD_INT 4
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 3
19523: PUSH
19524: LD_INT 60
19526: PUSH
19527: EMPTY
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: PPUSH
19539: CALL_OW 69
19543: PUSH
19544: LD_EXP 66
19548: DIFF
19549: ST_TO_ADDR
// ComEnterUnit ( NearestUnitToUnit ( powellPeople , PowellCargo ) , PowellCargo ) ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_INT 235
19557: PPUSH
19558: CALL_OW 74
19562: PPUSH
19563: LD_INT 235
19565: PPUSH
19566: CALL_OW 120
// SetResourceVisibility ( 30 , 49 , 4 ) ;
19570: LD_INT 30
19572: PPUSH
19573: LD_INT 49
19575: PPUSH
19576: LD_INT 4
19578: PPUSH
19579: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
19583: LD_INT 91
19585: PPUSH
19586: LD_INT 10
19588: PPUSH
19589: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
19593: LD_INT 91
19595: PPUSH
19596: LD_INT 11
19598: PPUSH
19599: CALL_OW 207
// ComBuild ( engs , b_siberite_mine , 30 , 49 , 1 ) ;
19603: LD_VAR 0 3
19607: PPUSH
19608: LD_INT 30
19610: PPUSH
19611: LD_INT 30
19613: PPUSH
19614: LD_INT 49
19616: PPUSH
19617: LD_INT 1
19619: PPUSH
19620: CALL_OW 145
// AddComBuild ( engs , b_bunker , 55 , 56 , 4 ) ;
19624: LD_VAR 0 3
19628: PPUSH
19629: LD_INT 32
19631: PPUSH
19632: LD_INT 55
19634: PPUSH
19635: LD_INT 56
19637: PPUSH
19638: LD_INT 4
19640: PPUSH
19641: CALL_OW 205
// AddComBuild ( engs , b_bunker , 63 , 71 , 4 ) ;
19645: LD_VAR 0 3
19649: PPUSH
19650: LD_INT 32
19652: PPUSH
19653: LD_INT 63
19655: PPUSH
19656: LD_INT 71
19658: PPUSH
19659: LD_INT 4
19661: PPUSH
19662: CALL_OW 205
// AddComBuild ( engs , b_siberite_power , 40 , 72 , 4 ) ;
19666: LD_VAR 0 3
19670: PPUSH
19671: LD_INT 28
19673: PPUSH
19674: LD_INT 40
19676: PPUSH
19677: LD_INT 72
19679: PPUSH
19680: LD_INT 4
19682: PPUSH
19683: CALL_OW 205
// AddComBuild ( engs , b_solar_power , 45 , 73 , 4 ) ;
19687: LD_VAR 0 3
19691: PPUSH
19692: LD_INT 27
19694: PPUSH
19695: LD_INT 45
19697: PPUSH
19698: LD_INT 73
19700: PPUSH
19701: LD_INT 4
19703: PPUSH
19704: CALL_OW 205
// AddComBuild ( engs , b_ext_rocket , 37 , 50 , 2 ) ;
19708: LD_VAR 0 3
19712: PPUSH
19713: LD_INT 18
19715: PPUSH
19716: LD_INT 37
19718: PPUSH
19719: LD_INT 50
19721: PPUSH
19722: LD_INT 2
19724: PPUSH
19725: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 41 , 51 , 3 ) ;
19729: LD_VAR 0 3
19733: PPUSH
19734: LD_INT 17
19736: PPUSH
19737: LD_INT 41
19739: PPUSH
19740: LD_INT 51
19742: PPUSH
19743: LD_INT 3
19745: PPUSH
19746: CALL_OW 205
// AddComBuild ( engs , b_ext_siberium , 38 , 54 , 1 ) ;
19750: LD_VAR 0 3
19754: PPUSH
19755: LD_INT 21
19757: PPUSH
19758: LD_INT 38
19760: PPUSH
19761: LD_INT 54
19763: PPUSH
19764: LD_INT 1
19766: PPUSH
19767: CALL_OW 205
// end ;
19771: PPOPN 3
19773: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19774: LD_INT 235
19776: PPUSH
19777: LD_INT 10
19779: PPUSH
19780: CALL_OW 308
19784: PUSH
19785: LD_EXP 70
19789: PUSH
19790: LD_INT 1
19792: EQUAL
19793: AND
19794: IFFALSE 19818
19796: GO 19798
19798: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19799: LD_INT 235
19801: PPUSH
19802: CALL_OW 313
19806: PPUSH
19807: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19811: LD_INT 84
19813: PPUSH
19814: CALL_OW 146
// end ;
19818: END
// every 0 0$1 trigger legionAI = 1 do
19819: LD_EXP 84
19823: PUSH
19824: LD_INT 1
19826: EQUAL
19827: IFFALSE 19890
19829: GO 19831
19831: DISABLE
// begin enable ;
19832: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19833: LD_INT 8
19835: PPUSH
19836: LD_INT 99
19838: PPUSH
19839: LD_INT 11
19841: PPUSH
19842: LD_EXP 93
19846: PPUSH
19847: CALL 9659 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19851: LD_INT 8
19853: PPUSH
19854: LD_INT 20
19856: PPUSH
19857: LD_INT 11
19859: PPUSH
19860: LD_INT 252
19862: PUSH
19863: EMPTY
19864: LIST
19865: PPUSH
19866: CALL 10068 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19870: LD_INT 8
19872: PPUSH
19873: LD_INT 1
19875: PPUSH
19876: CALL 11477 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
19880: LD_INT 8
19882: PPUSH
19883: LD_INT 11
19885: PPUSH
19886: CALL 11049 0 2
// end ;
19890: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19891: LD_EXP 84
19895: PUSH
19896: LD_INT 1
19898: EQUAL
19899: PUSH
19900: LD_EXP 101
19904: PUSH
19905: LD_INT 1
19907: GREATEREQUAL
19908: AND
19909: PUSH
19910: LD_EXP 55
19914: PUSH
19915: EMPTY
19916: EQUAL
19917: AND
19918: PUSH
19919: LD_INT 117
19921: PPUSH
19922: CALL_OW 302
19926: AND
19927: PUSH
19928: LD_INT 117
19930: PPUSH
19931: CALL_OW 255
19935: PUSH
19936: LD_INT 8
19938: EQUAL
19939: AND
19940: IFFALSE 20003
19942: GO 19944
19944: DISABLE
// begin enable ;
19945: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19946: LD_INT 8
19948: PPUSH
19949: LD_INT 117
19951: PPUSH
19952: LD_INT 5
19954: PUSH
19955: LD_INT 6
19957: PUSH
19958: LD_INT 7
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: LIST
19965: PUSH
19966: LD_OWVAR 67
19970: ARRAY
19971: PPUSH
19972: LD_INT 27
19974: PUSH
19975: LD_INT 28
19977: PUSH
19978: LD_INT 25
19980: PUSH
19981: LD_INT 29
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: PPUSH
19990: LD_INT 3
19992: PPUSH
19993: LD_INT 2
19995: PPUSH
19996: LD_INT 14
19998: PPUSH
19999: CALL 11707 0 7
// end ;
20003: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
20004: LD_EXP 84
20008: PUSH
20009: LD_INT 1
20011: EQUAL
20012: PUSH
20013: LD_EXP 101
20017: PUSH
20018: LD_INT 1
20020: GREATEREQUAL
20021: AND
20022: PUSH
20023: LD_EXP 55
20027: PUSH
20028: LD_INT 5
20030: PUSH
20031: LD_INT 6
20033: PUSH
20034: LD_INT 7
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: LD_OWVAR 67
20046: ARRAY
20047: EQUAL
20048: AND
20049: IFFALSE 20067
20051: GO 20053
20053: DISABLE
// begin enable ;
20054: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
20055: LD_EXP 87
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL 11781 0 2
// end ;
20067: END
// every 0 0$1 do
20068: GO 20070
20070: DISABLE
// begin enable ;
20071: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
20072: LD_INT 6
20074: PPUSH
20075: LD_INT 1
20077: PPUSH
20078: CALL 12716 0 2
// end ;
20082: END
// every 0 0$1 trigger RussianAI = 1 do
20083: LD_EXP 86
20087: PUSH
20088: LD_INT 1
20090: EQUAL
20091: IFFALSE 20185
20093: GO 20095
20095: DISABLE
// begin enable ;
20096: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
20097: LD_INT 3
20099: PPUSH
20100: LD_INT 26
20102: PPUSH
20103: LD_INT 21
20105: PPUSH
20106: LD_EXP 94
20110: PPUSH
20111: CALL 9659 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
20115: LD_INT 3
20117: PPUSH
20118: LD_INT 22
20120: PPUSH
20121: LD_INT 21
20123: PPUSH
20124: LD_INT 2
20126: PUSH
20127: LD_INT 1
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PPUSH
20134: CALL 10068 0 4
// AttackNearBuildings ( 3 , 1 ) ;
20138: LD_INT 3
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: CALL 11477 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
20148: LD_INT 3
20150: PPUSH
20151: LD_EXP 89
20155: PPUSH
20156: CALL 12716 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
20160: LD_INT 3
20162: PPUSH
20163: LD_INT 21
20165: PPUSH
20166: CALL 11049 0 2
// CraneRepairBuild ( 3 , RussianBaseArea , russianDestroyedBuilds ) ;
20170: LD_INT 3
20172: PPUSH
20173: LD_INT 21
20175: PPUSH
20176: LD_EXP 94
20180: PPUSH
20181: CALL 10794 0 3
// end ;
20185: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
20186: LD_EXP 86
20190: PUSH
20191: LD_INT 1
20193: EQUAL
20194: PUSH
20195: LD_EXP 101
20199: PUSH
20200: LD_INT 3
20202: GREATEREQUAL
20203: AND
20204: PUSH
20205: LD_EXP 61
20209: PUSH
20210: EMPTY
20211: EQUAL
20212: AND
20213: PUSH
20214: LD_INT 10
20216: PPUSH
20217: CALL_OW 302
20221: AND
20222: PUSH
20223: LD_INT 10
20225: PPUSH
20226: CALL_OW 255
20230: PUSH
20231: LD_INT 3
20233: EQUAL
20234: AND
20235: PUSH
20236: LD_INT 4
20238: PPUSH
20239: CALL_OW 302
20243: AND
20244: PUSH
20245: LD_INT 4
20247: PPUSH
20248: CALL_OW 255
20252: PUSH
20253: LD_INT 3
20255: EQUAL
20256: AND
20257: IFFALSE 20377
20259: GO 20261
20261: DISABLE
// begin enable ;
20262: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20263: LD_INT 3
20265: PPUSH
20266: LD_INT 4
20268: PPUSH
20269: LD_INT 4
20271: PUSH
20272: LD_INT 5
20274: PUSH
20275: LD_INT 6
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: LD_OWVAR 67
20287: ARRAY
20288: PPUSH
20289: LD_INT 45
20291: PUSH
20292: LD_INT 46
20294: PUSH
20295: LD_INT 47
20297: PUSH
20298: LD_INT 49
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: PPUSH
20307: LD_INT 3
20309: PPUSH
20310: LD_INT 3
20312: PPUSH
20313: LD_INT 24
20315: PPUSH
20316: CALL 11707 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20320: LD_INT 3
20322: PPUSH
20323: LD_INT 10
20325: PPUSH
20326: LD_INT 4
20328: PUSH
20329: LD_INT 5
20331: PUSH
20332: LD_INT 6
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: LIST
20339: PUSH
20340: LD_OWVAR 67
20344: ARRAY
20345: PPUSH
20346: LD_INT 45
20348: PUSH
20349: LD_INT 46
20351: PUSH
20352: LD_INT 47
20354: PUSH
20355: LD_INT 49
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: PPUSH
20364: LD_INT 3
20366: PPUSH
20367: LD_INT 3
20369: PPUSH
20370: LD_INT 24
20372: PPUSH
20373: CALL 11707 0 7
// end ;
20377: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
20378: LD_EXP 86
20382: PUSH
20383: LD_INT 1
20385: EQUAL
20386: PUSH
20387: LD_EXP 101
20391: PUSH
20392: LD_INT 3
20394: GREATEREQUAL
20395: AND
20396: PUSH
20397: LD_EXP 61
20401: PUSH
20402: LD_INT 8
20404: PUSH
20405: LD_INT 10
20407: PUSH
20408: LD_INT 12
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: LIST
20415: PUSH
20416: LD_OWVAR 67
20420: ARRAY
20421: EQUAL
20422: AND
20423: IFFALSE 20535
20425: GO 20427
20427: DISABLE
// begin enable ;
20428: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
20429: LD_INT 22
20431: PUSH
20432: LD_INT 3
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 21
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 3
20451: PUSH
20452: LD_INT 34
20454: PUSH
20455: LD_INT 48
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 3
20468: PUSH
20469: LD_INT 60
20471: PUSH
20472: EMPTY
20473: LIST
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: PPUSH
20485: CALL_OW 69
20489: PPUSH
20490: LD_INT 24
20492: PUSH
20493: LD_INT 25
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: PPUSH
20503: LD_INT 2
20505: PPUSH
20506: CALL_OW 12
20510: ARRAY
20511: PPUSH
20512: CALL_OW 120
// wait ( 0 0$20 ) ;
20516: LD_INT 700
20518: PPUSH
20519: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
20523: LD_EXP 89
20527: PPUSH
20528: LD_INT 2
20530: PPUSH
20531: CALL 11781 0 2
// end ;
20535: END
// every 0 0$1 trigger AllianceAI = 1 do
20536: LD_EXP 85
20540: PUSH
20541: LD_INT 1
20543: EQUAL
20544: IFFALSE 20627
20546: GO 20548
20548: DISABLE
// begin enable ;
20549: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
20550: LD_INT 7
20552: PPUSH
20553: LD_INT 45
20555: PPUSH
20556: LD_INT 23
20558: PPUSH
20559: LD_EXP 95
20563: PPUSH
20564: CALL 9659 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
20568: LD_INT 7
20570: PPUSH
20571: LD_INT 24
20573: PPUSH
20574: LD_INT 23
20576: PPUSH
20577: LD_INT 46
20579: PUSH
20580: LD_INT 39
20582: PUSH
20583: LD_INT 133
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: PPUSH
20591: CALL 10068 0 4
// AttackNearBuildings ( 7 , 1 ) ;
20595: LD_INT 7
20597: PPUSH
20598: LD_INT 1
20600: PPUSH
20601: CALL 11477 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
20605: LD_INT 7
20607: PPUSH
20608: LD_EXP 88
20612: PPUSH
20613: CALL 12716 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
20617: LD_INT 7
20619: PPUSH
20620: LD_INT 23
20622: PPUSH
20623: CALL 11049 0 2
// end ;
20627: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
20628: LD_EXP 85
20632: PUSH
20633: LD_INT 1
20635: EQUAL
20636: PUSH
20637: LD_EXP 101
20641: PUSH
20642: LD_INT 4
20644: GREATEREQUAL
20645: AND
20646: PUSH
20647: LD_EXP 62
20651: PUSH
20652: EMPTY
20653: EQUAL
20654: AND
20655: PUSH
20656: LD_INT 156
20658: PPUSH
20659: CALL_OW 302
20663: AND
20664: PUSH
20665: LD_INT 156
20667: PPUSH
20668: CALL_OW 255
20672: PUSH
20673: LD_INT 7
20675: EQUAL
20676: AND
20677: PUSH
20678: LD_INT 162
20680: PPUSH
20681: CALL_OW 302
20685: AND
20686: PUSH
20687: LD_INT 162
20689: PPUSH
20690: CALL_OW 255
20694: PUSH
20695: LD_INT 7
20697: EQUAL
20698: AND
20699: IFFALSE 20815
20701: GO 20703
20703: DISABLE
// begin enable ;
20704: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20705: LD_INT 3
20707: PPUSH
20708: LD_INT 156
20710: PPUSH
20711: LD_INT 3
20713: PUSH
20714: LD_INT 3
20716: PUSH
20717: LD_INT 4
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: LIST
20724: PUSH
20725: LD_OWVAR 67
20729: ARRAY
20730: PPUSH
20731: LD_INT 9
20733: PUSH
20734: LD_INT 10
20736: PUSH
20737: LD_INT 7
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: PPUSH
20745: LD_INT 3
20747: PPUSH
20748: LD_INT 2
20750: PPUSH
20751: LD_INT 5
20753: PPUSH
20754: CALL 11707 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20758: LD_INT 3
20760: PPUSH
20761: LD_INT 162
20763: PPUSH
20764: LD_INT 2
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: LD_INT 3
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: PUSH
20778: LD_OWVAR 67
20782: ARRAY
20783: PPUSH
20784: LD_INT 45
20786: PUSH
20787: LD_INT 46
20789: PUSH
20790: LD_INT 47
20792: PUSH
20793: LD_INT 49
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: PPUSH
20802: LD_INT 3
20804: PPUSH
20805: LD_INT 3
20807: PPUSH
20808: LD_INT 24
20810: PPUSH
20811: CALL 11707 0 7
// end ;
20815: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20816: LD_EXP 85
20820: PUSH
20821: LD_INT 1
20823: EQUAL
20824: PUSH
20825: LD_EXP 101
20829: PUSH
20830: LD_INT 4
20832: GREATEREQUAL
20833: AND
20834: PUSH
20835: LD_EXP 62
20839: PUSH
20840: LD_INT 5
20842: PUSH
20843: LD_INT 5
20845: PUSH
20846: LD_INT 7
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: LD_OWVAR 67
20858: ARRAY
20859: EQUAL
20860: AND
20861: IFFALSE 20920
20863: GO 20865
20865: DISABLE
20866: LD_INT 0
20868: PPUSH
// begin for i in AllianceVehicles do
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: LD_EXP 62
20878: PUSH
20879: FOR_IN
20880: IFFALSE 20905
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
20882: LD_VAR 0 1
20886: PPUSH
20887: LD_INT 117
20889: PPUSH
20890: LD_INT 112
20892: PPUSH
20893: LD_INT 10
20895: PPUSH
20896: LD_INT 1
20898: PPUSH
20899: CALL_OW 483
20903: GO 20879
20905: POP
20906: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20907: LD_EXP 88
20911: PPUSH
20912: LD_INT 3
20914: PPUSH
20915: CALL 11781 0 2
// enable ;
20919: ENABLE
// end ;
20920: PPOPN 1
20922: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20923: LD_EXP 85
20927: PUSH
20928: LD_INT 1
20930: EQUAL
20931: PUSH
20932: LD_EXP 101
20936: PUSH
20937: LD_INT 4
20939: GREATEREQUAL
20940: AND
20941: IFFALSE 21122
20943: GO 20945
20945: DISABLE
20946: LD_INT 0
20948: PPUSH
// begin enable ;
20949: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20950: LD_ADDR_VAR 0 1
20954: PUSH
20955: LD_INT 22
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 21
20967: PUSH
20968: LD_INT 3
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: LD_INT 30
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 30
20990: PUSH
20991: LD_INT 28
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 30
21000: PUSH
21001: LD_INT 21
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: PPUSH
21019: CALL_OW 69
21023: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
21024: LD_ADDR_VAR 0 1
21028: PUSH
21029: LD_VAR 0 1
21033: PUSH
21034: LD_INT 22
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 21
21046: PUSH
21047: LD_INT 2
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 32
21056: PUSH
21057: LD_INT 3
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: PPUSH
21069: CALL_OW 69
21073: ADD
21074: ST_TO_ADDR
// if tmp = [ ] then
21075: LD_VAR 0 1
21079: PUSH
21080: EMPTY
21081: EQUAL
21082: IFFALSE 21086
// exit ;
21084: GO 21122
// if tmp > 0 then
21086: LD_VAR 0 1
21090: PUSH
21091: LD_INT 0
21093: GREATER
21094: IFFALSE 21122
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
21096: LD_VAR 0 1
21100: PUSH
21101: LD_INT 1
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 12
21113: ARRAY
21114: PPUSH
21115: LD_INT 0
21117: PPUSH
21118: CALL_OW 234
// end ;
21122: PPOPN 1
21124: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
21125: LD_EXP 84
21129: PUSH
21130: LD_INT 1
21132: EQUAL
21133: PUSH
21134: LD_INT 22
21136: PUSH
21137: LD_INT 8
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 21
21146: PUSH
21147: LD_INT 2
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 3
21156: PUSH
21157: LD_INT 61
21159: PUSH
21160: EMPTY
21161: LIST
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: PPUSH
21172: CALL_OW 69
21176: PUSH
21177: LD_INT 0
21179: GREATER
21180: AND
21181: IFFALSE 21265
21183: GO 21185
21185: DISABLE
21186: LD_INT 0
21188: PPUSH
// begin enable ;
21189: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
21190: LD_ADDR_VAR 0 1
21194: PUSH
21195: LD_INT 22
21197: PUSH
21198: LD_INT 8
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 33
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 3
21227: PUSH
21228: LD_INT 61
21230: PUSH
21231: EMPTY
21232: LIST
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: PPUSH
21244: CALL_OW 69
21248: PUSH
21249: FOR_IN
21250: IFFALSE 21263
// Connect ( i ) ;
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL 13031 0 1
21261: GO 21249
21263: POP
21264: POP
// end ;
21265: PPOPN 1
21267: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
21268: LD_EXP 85
21272: PUSH
21273: LD_INT 1
21275: EQUAL
21276: PUSH
21277: LD_INT 22
21279: PUSH
21280: LD_INT 7
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 21
21289: PUSH
21290: LD_INT 2
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 3
21299: PUSH
21300: LD_INT 61
21302: PUSH
21303: EMPTY
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 69
21319: PUSH
21320: LD_INT 0
21322: GREATER
21323: AND
21324: IFFALSE 21408
21326: GO 21328
21328: DISABLE
21329: LD_INT 0
21331: PPUSH
// begin enable ;
21332: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
21333: LD_ADDR_VAR 0 1
21337: PUSH
21338: LD_INT 22
21340: PUSH
21341: LD_INT 7
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 21
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 33
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 61
21373: PUSH
21374: EMPTY
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: PPUSH
21387: CALL_OW 69
21391: PUSH
21392: FOR_IN
21393: IFFALSE 21406
// Connect ( i ) ;
21395: LD_VAR 0 1
21399: PPUSH
21400: CALL 13031 0 1
21404: GO 21392
21406: POP
21407: POP
// end ; end_of_file
21408: PPOPN 1
21410: END
// every 0 0$1 trigger timerStatus = 1 do
21411: LD_EXP 96
21415: PUSH
21416: LD_INT 1
21418: EQUAL
21419: IFFALSE 21456
21421: GO 21423
21423: DISABLE
// begin enable ;
21424: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
21425: LD_ADDR_OWVAR 47
21429: PUSH
21430: LD_STRING #Am15-1
21432: PUSH
21433: LD_EXP 97
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
21442: LD_ADDR_EXP 97
21446: PUSH
21447: LD_EXP 97
21451: PUSH
21452: LD_INT 35
21454: PLUS
21455: ST_TO_ADDR
// end ; end_of_file
21456: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
21457: LD_EXP 72
21461: PUSH
21462: LD_INT 1
21464: EQUAL
21465: PUSH
21466: LD_EXP 101
21470: PUSH
21471: LD_INT 0
21473: EQUAL
21474: AND
21475: PUSH
21476: LD_EXP 90
21480: PUSH
21481: LD_INT 0
21483: EQUAL
21484: AND
21485: IFFALSE 21545
21487: GO 21489
21489: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
21490: LD_INT 2
21492: PPUSH
21493: LD_INT 6
21495: PPUSH
21496: LD_INT 2
21498: PPUSH
21499: LD_INT 4
21501: PPUSH
21502: CALL_OW 12
21506: PPUSH
21507: LD_INT 10
21509: PPUSH
21510: LD_INT 3
21512: PPUSH
21513: LD_INT 3
21515: PPUSH
21516: LD_INT 3
21518: PPUSH
21519: LD_INT 42
21521: PUSH
21522: LD_INT 43
21524: PUSH
21525: LD_INT 44
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: PPUSH
21533: EMPTY
21534: PPUSH
21535: EMPTY
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL 7861 0 11
// enable ;
21544: ENABLE
// end ;
21545: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
21546: LD_EXP 72
21550: PUSH
21551: LD_INT 1
21553: EQUAL
21554: PUSH
21555: LD_EXP 101
21559: PUSH
21560: LD_INT 1
21562: EQUAL
21563: AND
21564: PUSH
21565: LD_EXP 90
21569: PUSH
21570: LD_INT 0
21572: EQUAL
21573: AND
21574: IFFALSE 21634
21576: GO 21578
21578: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21579: LD_INT 2
21581: PPUSH
21582: LD_INT 6
21584: PPUSH
21585: LD_INT 4
21587: PPUSH
21588: LD_INT 6
21590: PPUSH
21591: CALL_OW 12
21595: PPUSH
21596: LD_INT 10
21598: PPUSH
21599: LD_INT 3
21601: PPUSH
21602: LD_INT 3
21604: PPUSH
21605: LD_INT 3
21607: PPUSH
21608: LD_INT 44
21610: PUSH
21611: LD_INT 45
21613: PUSH
21614: LD_INT 46
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: PPUSH
21622: EMPTY
21623: PPUSH
21624: EMPTY
21625: PPUSH
21626: LD_INT 1
21628: PPUSH
21629: CALL 7861 0 11
// enable ;
21633: ENABLE
// end ;
21634: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
21635: LD_EXP 72
21639: PUSH
21640: LD_INT 1
21642: EQUAL
21643: PUSH
21644: LD_EXP 101
21648: PUSH
21649: LD_INT 3
21651: EQUAL
21652: AND
21653: PUSH
21654: LD_EXP 90
21658: PUSH
21659: LD_INT 0
21661: EQUAL
21662: AND
21663: IFFALSE 21727
21665: GO 21667
21667: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
21668: LD_INT 2
21670: PPUSH
21671: LD_INT 6
21673: PPUSH
21674: LD_INT 4
21676: PPUSH
21677: LD_INT 8
21679: PPUSH
21680: CALL_OW 12
21684: PPUSH
21685: LD_INT 10
21687: PPUSH
21688: LD_INT 3
21690: PPUSH
21691: LD_INT 3
21693: PPUSH
21694: LD_INT 3
21696: PPUSH
21697: LD_INT 44
21699: PUSH
21700: LD_INT 45
21702: PUSH
21703: LD_INT 46
21705: PUSH
21706: LD_INT 47
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: PPUSH
21715: EMPTY
21716: PPUSH
21717: EMPTY
21718: PPUSH
21719: LD_INT 1
21721: PPUSH
21722: CALL 7861 0 11
// enable ;
21726: ENABLE
// end ;
21727: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21728: LD_EXP 72
21732: PUSH
21733: LD_INT 1
21735: EQUAL
21736: PUSH
21737: LD_EXP 101
21741: PUSH
21742: LD_INT 4
21744: GREATEREQUAL
21745: AND
21746: PUSH
21747: LD_EXP 90
21751: PUSH
21752: LD_INT 0
21754: EQUAL
21755: AND
21756: IFFALSE 21816
21758: GO 21760
21760: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21761: LD_INT 2
21763: PPUSH
21764: LD_INT 6
21766: PPUSH
21767: LD_INT 4
21769: PPUSH
21770: LD_INT 8
21772: PPUSH
21773: CALL_OW 12
21777: PPUSH
21778: LD_INT 10
21780: PPUSH
21781: LD_INT 3
21783: PPUSH
21784: LD_INT 3
21786: PPUSH
21787: LD_INT 3
21789: PPUSH
21790: LD_INT 46
21792: PUSH
21793: LD_INT 47
21795: PUSH
21796: LD_INT 49
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: LIST
21803: PPUSH
21804: EMPTY
21805: PPUSH
21806: EMPTY
21807: PPUSH
21808: LD_INT 1
21810: PPUSH
21811: CALL 7861 0 11
// enable ;
21815: ENABLE
// end ; end_of_file
21816: END
// every 1 do var i , dec1 , options , people ;
21817: GO 21819
21819: DISABLE
21820: LD_INT 0
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21826: LD_INT 24
21828: PPUSH
21829: LD_INT 92
21831: PPUSH
21832: LD_INT 172
21834: PPUSH
21835: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21839: LD_INT 25
21841: PPUSH
21842: LD_INT 103
21844: PPUSH
21845: LD_INT 74
21847: PPUSH
21848: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21852: LD_EXP 48
21856: PPUSH
21857: LD_INT 4
21859: PPUSH
21860: CALL_OW 336
// Video ( true ) ;
21864: LD_INT 1
21866: PPUSH
21867: CALL 6884 0 1
// cinematics := true ;
21871: LD_ADDR_EXP 103
21875: PUSH
21876: LD_INT 1
21878: ST_TO_ADDR
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21879: LD_EXP 24
21883: PUSH
21884: LD_EXP 25
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PPUSH
21893: LD_INT 60
21895: PPUSH
21896: LD_INT 75
21898: PPUSH
21899: CALL_OW 111
// if KappaStatus = 0 then
21903: LD_EXP 81
21907: PUSH
21908: LD_INT 0
21910: EQUAL
21911: IFFALSE 22200
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21913: LD_EXP 24
21917: PPUSH
21918: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21922: LD_EXP 1
21926: PPUSH
21927: LD_STRING D1T-JMM-1
21929: PPUSH
21930: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21934: LD_EXP 24
21938: PPUSH
21939: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21943: LD_EXP 17
21947: PPUSH
21948: LD_STRING D1T-Pow-1
21950: PPUSH
21951: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21955: LD_EXP 24
21959: PPUSH
21960: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21964: LD_EXP 1
21968: PPUSH
21969: LD_STRING D1T-JMM-2
21971: PPUSH
21972: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21976: LD_EXP 24
21980: PPUSH
21981: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21985: LD_EXP 17
21989: PPUSH
21990: LD_STRING D1T-Pow-2
21992: PPUSH
21993: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21997: LD_EXP 24
22001: PPUSH
22002: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
22006: LD_EXP 1
22010: PPUSH
22011: LD_STRING D1T-JMM-3
22013: PPUSH
22014: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22018: LD_EXP 24
22022: PPUSH
22023: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
22027: LD_EXP 17
22031: PPUSH
22032: LD_STRING D1T-Pow-3
22034: PPUSH
22035: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22039: LD_EXP 24
22043: PPUSH
22044: CALL_OW 87
// if not JMMGirlVeh = [ ] then
22048: LD_EXP 79
22052: PUSH
22053: EMPTY
22054: EQUAL
22055: NOT
22056: IFFALSE 22156
// begin if JMMGirl = 1 then
22058: LD_EXP 80
22062: PUSH
22063: LD_INT 1
22065: EQUAL
22066: IFFALSE 22080
// Say ( Joan , D1T-Joan-3 ) ;
22068: LD_EXP 2
22072: PPUSH
22073: LD_STRING D1T-Joan-3
22075: PPUSH
22076: CALL_OW 88
// if JMMGirl = 2 then
22080: LD_EXP 80
22084: PUSH
22085: LD_INT 2
22087: EQUAL
22088: IFFALSE 22102
// Say ( Lisa , D1T-Lisa-3 ) ;
22090: LD_EXP 4
22094: PPUSH
22095: LD_STRING D1T-Lisa-3
22097: PPUSH
22098: CALL_OW 88
// if JMMGirl = 3 then
22102: LD_EXP 80
22106: PUSH
22107: LD_INT 3
22109: EQUAL
22110: IFFALSE 22124
// Say ( Connie , D1T-Con-3 ) ;
22112: LD_EXP 16
22116: PPUSH
22117: LD_STRING D1T-Con-3
22119: PPUSH
22120: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22124: LD_EXP 24
22128: PPUSH
22129: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
22133: LD_EXP 17
22137: PPUSH
22138: LD_STRING D1T-Pow-4
22140: PPUSH
22141: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22145: LD_EXP 24
22149: PPUSH
22150: CALL_OW 87
// end else
22154: GO 22198
// begin Say ( JMM , D1T-JMM-4 ) ;
22156: LD_EXP 1
22160: PPUSH
22161: LD_STRING D1T-JMM-4
22163: PPUSH
22164: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22168: LD_EXP 24
22172: PPUSH
22173: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
22177: LD_EXP 17
22181: PPUSH
22182: LD_STRING D1T-Pow-5
22184: PPUSH
22185: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22189: LD_EXP 24
22193: PPUSH
22194: CALL_OW 87
// end ; end else
22198: GO 22284
// begin CenterNowOnUnits ( NewJMMVeh ) ;
22200: LD_EXP 24
22204: PPUSH
22205: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
22209: LD_EXP 1
22213: PPUSH
22214: LD_STRING D1T-JMM-1
22216: PPUSH
22217: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22221: LD_EXP 24
22225: PPUSH
22226: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
22230: LD_EXP 17
22234: PPUSH
22235: LD_STRING D1T-Pow-1
22237: PPUSH
22238: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22242: LD_EXP 24
22246: PPUSH
22247: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
22251: LD_EXP 1
22255: PPUSH
22256: LD_STRING D1T-JMM-2
22258: PPUSH
22259: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22263: LD_EXP 24
22267: PPUSH
22268: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
22272: LD_EXP 17
22276: PPUSH
22277: LD_STRING D1T-Pow-2
22279: PPUSH
22280: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
22284: LD_INT 35
22286: PPUSH
22287: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
22291: LD_EXP 24
22295: PUSH
22296: LD_EXP 25
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: LD_INT 60
22307: PPUSH
22308: LD_INT 75
22310: PPUSH
22311: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
22315: LD_EXP 24
22319: PPUSH
22320: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
22324: LD_EXP 24
22328: PPUSH
22329: LD_EXP 17
22333: PPUSH
22334: CALL_OW 296
22338: PUSH
22339: LD_INT 20
22341: LESS
22342: PUSH
22343: LD_EXP 24
22347: PPUSH
22348: CALL_OW 314
22352: NOT
22353: OR
22354: IFFALSE 22284
// ComExitVehicle ( JMM ) ;
22356: LD_EXP 1
22360: PPUSH
22361: CALL_OW 121
// repeat wait ( 0 0$2 ) ;
22365: LD_INT 70
22367: PPUSH
22368: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
22372: LD_EXP 1
22376: PPUSH
22377: LD_EXP 17
22381: PPUSH
22382: CALL_OW 112
// CenterOnUnits ( JMM ) ;
22386: LD_EXP 1
22390: PPUSH
22391: CALL_OW 85
// until GetDistUnits ( JMM , Powell ) < 6 ;
22395: LD_EXP 1
22399: PPUSH
22400: LD_EXP 17
22404: PPUSH
22405: CALL_OW 296
22409: PUSH
22410: LD_INT 6
22412: LESS
22413: IFFALSE 22365
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
22415: LD_EXP 1
22419: PUSH
22420: LD_EXP 17
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PPUSH
22429: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
22433: LD_EXP 1
22437: PPUSH
22438: LD_EXP 17
22442: PPUSH
22443: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
22447: LD_EXP 17
22451: PPUSH
22452: LD_EXP 1
22456: PPUSH
22457: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
22461: LD_EXP 1
22465: PPUSH
22466: LD_STRING D1-JMM-1
22468: PPUSH
22469: CALL_OW 88
// RaiseSailEvent ( 2 ) ;
22473: LD_INT 2
22475: PPUSH
22476: CALL_OW 427
// Say ( Powell , D1-Pow-1 ) ;
22480: LD_EXP 17
22484: PPUSH
22485: LD_STRING D1-Pow-1
22487: PPUSH
22488: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
22492: LD_EXP 1
22496: PPUSH
22497: LD_STRING D1-JMM-2
22499: PPUSH
22500: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
22504: LD_EXP 17
22508: PPUSH
22509: LD_STRING D1-Pow-2
22511: PPUSH
22512: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
22516: LD_EXP 1
22520: PPUSH
22521: LD_STRING D1-JMM-3
22523: PPUSH
22524: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
22528: LD_EXP 17
22532: PPUSH
22533: LD_STRING D1-Pow-3
22535: PPUSH
22536: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
22540: LD_EXP 1
22544: PPUSH
22545: LD_STRING D1-JMM-4
22547: PPUSH
22548: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
22552: LD_EXP 17
22556: PPUSH
22557: LD_STRING D1-Pow-4
22559: PPUSH
22560: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
22564: LD_EXP 1
22568: PPUSH
22569: LD_STRING D1-JMM-5
22571: PPUSH
22572: CALL_OW 88
// RaiseSailEvent ( 1 ) ;
22576: LD_INT 1
22578: PPUSH
22579: CALL_OW 427
// Say ( Powell , D1-Pow-5 ) ;
22583: LD_EXP 17
22587: PPUSH
22588: LD_STRING D1-Pow-5
22590: PPUSH
22591: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
22595: LD_ADDR_VAR 0 3
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: LD_INT 2
22605: PUSH
22606: LD_INT 3
22608: PUSH
22609: LD_INT 4
22611: PUSH
22612: LD_INT 5
22614: PUSH
22615: LD_INT 6
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22626: LD_ADDR_VAR 0 2
22630: PUSH
22631: LD_STRING Q1
22633: PPUSH
22634: LD_VAR 0 3
22638: PPUSH
22639: CALL_OW 98
22643: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22644: LD_ADDR_VAR 0 2
22648: PUSH
22649: LD_STRING Q1
22651: PPUSH
22652: LD_VAR 0 3
22656: PPUSH
22657: CALL_OW 98
22661: ST_TO_ADDR
// options = options diff dec1 ;
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_VAR 0 3
22671: PUSH
22672: LD_VAR 0 2
22676: DIFF
22677: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22678: LD_VAR 0 2
22682: PPUSH
22683: LD_VAR 0 3
22687: PPUSH
22688: CALL 24276 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22692: LD_VAR 0 2
22696: PUSH
22697: LD_INT 5
22699: PUSH
22700: LD_INT 6
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: IN
22707: PUSH
22708: LD_VAR 0 3
22712: PUSH
22713: LD_INT 2
22715: EQUAL
22716: OR
22717: IFFALSE 22644
// if not ( dec1 in [ 5 , 6 ] ) then
22719: LD_VAR 0 2
22723: PUSH
22724: LD_INT 5
22726: PUSH
22727: LD_INT 6
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: IN
22734: NOT
22735: IFFALSE 22778
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22737: LD_ADDR_VAR 0 2
22741: PUSH
22742: LD_STRING Q1a
22744: PPUSH
22745: LD_INT 1
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PPUSH
22755: CALL_OW 98
22759: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22760: LD_VAR 0 2
22764: PUSH
22765: LD_INT 4
22767: PLUS
22768: PPUSH
22769: LD_VAR 0 3
22773: PPUSH
22774: CALL 24276 0 2
// end ; if not JMMGirlVeh = [ ] then
22778: LD_EXP 79
22782: PUSH
22783: EMPTY
22784: EQUAL
22785: NOT
22786: IFFALSE 23152
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22788: LD_EXP 25
22792: PPUSH
22793: CALL_OW 313
22797: PPUSH
22798: CALL_OW 121
// wait ( 0 0$1 ) ;
22802: LD_INT 35
22804: PPUSH
22805: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22809: LD_INT 35
22811: PPUSH
22812: CALL_OW 67
// if JMMGirl = 1 then
22816: LD_EXP 80
22820: PUSH
22821: LD_INT 1
22823: EQUAL
22824: IFFALSE 22840
// ComMoveUnit ( JMM , Joan ) ;
22826: LD_EXP 1
22830: PPUSH
22831: LD_EXP 2
22835: PPUSH
22836: CALL_OW 112
// if JMMGirl = 2 then
22840: LD_EXP 80
22844: PUSH
22845: LD_INT 2
22847: EQUAL
22848: IFFALSE 22864
// ComMoveUnit ( JMM , Lisa ) ;
22850: LD_EXP 1
22854: PPUSH
22855: LD_EXP 4
22859: PPUSH
22860: CALL_OW 112
// if JMMGirl = 3 then
22864: LD_EXP 80
22868: PUSH
22869: LD_INT 3
22871: EQUAL
22872: IFFALSE 22888
// ComMoveUnit ( JMM , Connie ) ;
22874: LD_EXP 1
22878: PPUSH
22879: LD_EXP 16
22883: PPUSH
22884: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22888: LD_EXP 1
22892: PPUSH
22893: LD_EXP 2
22897: PPUSH
22898: CALL_OW 296
22902: PUSH
22903: LD_INT 6
22905: LESS
22906: PUSH
22907: LD_EXP 1
22911: PPUSH
22912: LD_EXP 4
22916: PPUSH
22917: CALL_OW 296
22921: PUSH
22922: LD_INT 6
22924: LESS
22925: OR
22926: PUSH
22927: LD_EXP 1
22931: PPUSH
22932: LD_EXP 16
22936: PPUSH
22937: CALL_OW 296
22941: PUSH
22942: LD_INT 6
22944: LESS
22945: OR
22946: IFFALSE 22809
// CenterNowOnUnits ( JMM ) ;
22948: LD_EXP 1
22952: PPUSH
22953: CALL_OW 87
// case JMMGirl of 1 :
22957: LD_EXP 80
22961: PUSH
22962: LD_INT 1
22964: DOUBLE
22965: EQUAL
22966: IFTRUE 22970
22968: GO 23025
22970: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22971: LD_EXP 1
22975: PPUSH
22976: LD_EXP 2
22980: PPUSH
22981: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22985: LD_EXP 2
22989: PPUSH
22990: LD_EXP 1
22994: PPUSH
22995: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
22999: LD_EXP 2
23003: PPUSH
23004: LD_STRING D3W-Joan-1
23006: PPUSH
23007: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23011: LD_EXP 1
23015: PPUSH
23016: LD_STRING D3W-JMM-1
23018: PPUSH
23019: CALL_OW 88
// end ; 2 :
23023: GO 23152
23025: LD_INT 2
23027: DOUBLE
23028: EQUAL
23029: IFTRUE 23033
23031: GO 23088
23033: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
23034: LD_EXP 1
23038: PPUSH
23039: LD_EXP 4
23043: PPUSH
23044: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
23048: LD_EXP 4
23052: PPUSH
23053: LD_EXP 1
23057: PPUSH
23058: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
23062: LD_EXP 4
23066: PPUSH
23067: LD_STRING D3W-Lisa-1
23069: PPUSH
23070: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23074: LD_EXP 1
23078: PPUSH
23079: LD_STRING D3W-JMM-1
23081: PPUSH
23082: CALL_OW 88
// end ; 3 :
23086: GO 23152
23088: LD_INT 3
23090: DOUBLE
23091: EQUAL
23092: IFTRUE 23096
23094: GO 23151
23096: POP
// begin ComTurnUnit ( JMM , Connie ) ;
23097: LD_EXP 1
23101: PPUSH
23102: LD_EXP 16
23106: PPUSH
23107: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
23111: LD_EXP 16
23115: PPUSH
23116: LD_EXP 1
23120: PPUSH
23121: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
23125: LD_EXP 16
23129: PPUSH
23130: LD_STRING D3W-Con-1
23132: PPUSH
23133: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23137: LD_EXP 1
23141: PPUSH
23142: LD_STRING D3W-JMM-1
23144: PPUSH
23145: CALL_OW 88
// end ; end ;
23149: GO 23152
23151: POP
// end ; people = 0 ;
23152: LD_ADDR_VAR 0 4
23156: PUSH
23157: LD_INT 0
23159: ST_TO_ADDR
// if Lisa and people < 5 then
23160: LD_EXP 4
23164: PUSH
23165: LD_VAR 0 4
23169: PUSH
23170: LD_INT 5
23172: LESS
23173: AND
23174: IFFALSE 23206
// begin people = people + 1 ;
23176: LD_ADDR_VAR 0 4
23180: PUSH
23181: LD_VAR 0 4
23185: PUSH
23186: LD_INT 1
23188: PLUS
23189: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
23190: LD_ADDR_EXP 67
23194: PUSH
23195: LD_EXP 67
23199: PUSH
23200: LD_EXP 4
23204: ADD
23205: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
23206: LD_EXP 5
23210: PUSH
23211: LD_VAR 0 4
23215: PUSH
23216: LD_INT 5
23218: LESS
23219: AND
23220: IFFALSE 23252
// begin people = people + 1 ;
23222: LD_ADDR_VAR 0 4
23226: PUSH
23227: LD_VAR 0 4
23231: PUSH
23232: LD_INT 1
23234: PLUS
23235: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
23236: LD_ADDR_EXP 67
23240: PUSH
23241: LD_EXP 67
23245: PUSH
23246: LD_EXP 5
23250: ADD
23251: ST_TO_ADDR
// end ; if Bobby and people < 5 then
23252: LD_EXP 6
23256: PUSH
23257: LD_VAR 0 4
23261: PUSH
23262: LD_INT 5
23264: LESS
23265: AND
23266: IFFALSE 23298
// begin people = people + 1 ;
23268: LD_ADDR_VAR 0 4
23272: PUSH
23273: LD_VAR 0 4
23277: PUSH
23278: LD_INT 1
23280: PLUS
23281: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
23282: LD_ADDR_EXP 67
23286: PUSH
23287: LD_EXP 67
23291: PUSH
23292: LD_EXP 6
23296: ADD
23297: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
23298: LD_EXP 7
23302: PUSH
23303: LD_VAR 0 4
23307: PUSH
23308: LD_INT 5
23310: LESS
23311: AND
23312: IFFALSE 23344
// begin people = people + 1 ;
23314: LD_ADDR_VAR 0 4
23318: PUSH
23319: LD_VAR 0 4
23323: PUSH
23324: LD_INT 1
23326: PLUS
23327: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
23328: LD_ADDR_EXP 67
23332: PUSH
23333: LD_EXP 67
23337: PUSH
23338: LD_EXP 7
23342: ADD
23343: ST_TO_ADDR
// end ; if Denis and people < 5 then
23344: LD_EXP 8
23348: PUSH
23349: LD_VAR 0 4
23353: PUSH
23354: LD_INT 5
23356: LESS
23357: AND
23358: IFFALSE 23390
// begin people = people + 1 ;
23360: LD_ADDR_VAR 0 4
23364: PUSH
23365: LD_VAR 0 4
23369: PUSH
23370: LD_INT 1
23372: PLUS
23373: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
23374: LD_ADDR_EXP 67
23378: PUSH
23379: LD_EXP 67
23383: PUSH
23384: LD_EXP 8
23388: ADD
23389: ST_TO_ADDR
// end ; if Brown and people < 5 then
23390: LD_EXP 9
23394: PUSH
23395: LD_VAR 0 4
23399: PUSH
23400: LD_INT 5
23402: LESS
23403: AND
23404: IFFALSE 23436
// begin people = people + 1 ;
23406: LD_ADDR_VAR 0 4
23410: PUSH
23411: LD_VAR 0 4
23415: PUSH
23416: LD_INT 1
23418: PLUS
23419: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
23420: LD_ADDR_EXP 67
23424: PUSH
23425: LD_EXP 67
23429: PUSH
23430: LD_EXP 9
23434: ADD
23435: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
23436: LD_EXP 10
23440: PUSH
23441: LD_VAR 0 4
23445: PUSH
23446: LD_INT 5
23448: LESS
23449: AND
23450: IFFALSE 23482
// begin people = people + 1 ;
23452: LD_ADDR_VAR 0 4
23456: PUSH
23457: LD_VAR 0 4
23461: PUSH
23462: LD_INT 1
23464: PLUS
23465: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
23466: LD_ADDR_EXP 67
23470: PUSH
23471: LD_EXP 67
23475: PUSH
23476: LD_EXP 10
23480: ADD
23481: ST_TO_ADDR
// end ; if Houten and people < 5 then
23482: LD_EXP 11
23486: PUSH
23487: LD_VAR 0 4
23491: PUSH
23492: LD_INT 5
23494: LESS
23495: AND
23496: IFFALSE 23528
// begin people = people + 1 ;
23498: LD_ADDR_VAR 0 4
23502: PUSH
23503: LD_VAR 0 4
23507: PUSH
23508: LD_INT 1
23510: PLUS
23511: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
23512: LD_ADDR_EXP 67
23516: PUSH
23517: LD_EXP 67
23521: PUSH
23522: LD_EXP 11
23526: ADD
23527: ST_TO_ADDR
// end ; if Cornel and people < 5 then
23528: LD_EXP 12
23532: PUSH
23533: LD_VAR 0 4
23537: PUSH
23538: LD_INT 5
23540: LESS
23541: AND
23542: IFFALSE 23574
// begin people = people + 1 ;
23544: LD_ADDR_VAR 0 4
23548: PUSH
23549: LD_VAR 0 4
23553: PUSH
23554: LD_INT 1
23556: PLUS
23557: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
23558: LD_ADDR_EXP 67
23562: PUSH
23563: LD_EXP 67
23567: PUSH
23568: LD_EXP 12
23572: ADD
23573: ST_TO_ADDR
// end ; if Gary and people < 5 then
23574: LD_EXP 13
23578: PUSH
23579: LD_VAR 0 4
23583: PUSH
23584: LD_INT 5
23586: LESS
23587: AND
23588: IFFALSE 23620
// begin people = people + 1 ;
23590: LD_ADDR_VAR 0 4
23594: PUSH
23595: LD_VAR 0 4
23599: PUSH
23600: LD_INT 1
23602: PLUS
23603: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23604: LD_ADDR_EXP 67
23608: PUSH
23609: LD_EXP 67
23613: PUSH
23614: LD_EXP 13
23618: ADD
23619: ST_TO_ADDR
// end ; if Frank and people < 5 then
23620: LD_EXP 14
23624: PUSH
23625: LD_VAR 0 4
23629: PUSH
23630: LD_INT 5
23632: LESS
23633: AND
23634: IFFALSE 23666
// begin people = people + 1 ;
23636: LD_ADDR_VAR 0 4
23640: PUSH
23641: LD_VAR 0 4
23645: PUSH
23646: LD_INT 1
23648: PLUS
23649: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23650: LD_ADDR_EXP 67
23654: PUSH
23655: LD_EXP 67
23659: PUSH
23660: LD_EXP 14
23664: ADD
23665: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23666: LD_EXP 15
23670: PUSH
23671: LD_VAR 0 4
23675: PUSH
23676: LD_INT 5
23678: LESS
23679: AND
23680: IFFALSE 23712
// begin people = people + 1 ;
23682: LD_ADDR_VAR 0 4
23686: PUSH
23687: LD_VAR 0 4
23691: PUSH
23692: LD_INT 1
23694: PLUS
23695: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23696: LD_ADDR_EXP 67
23700: PUSH
23701: LD_EXP 67
23705: PUSH
23706: LD_EXP 15
23710: ADD
23711: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23712: LD_EXP 67
23716: PPUSH
23717: LD_INT 25
23719: PUSH
23720: LD_INT 2
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PPUSH
23727: CALL_OW 72
23731: PUSH
23732: LD_INT 0
23734: EQUAL
23735: IFFALSE 23753
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23737: LD_EXP 67
23741: PUSH
23742: LD_INT 1
23744: ARRAY
23745: PPUSH
23746: LD_INT 2
23748: PPUSH
23749: CALL_OW 336
// for i = 1 to 5 do
23753: LD_ADDR_VAR 0 1
23757: PUSH
23758: DOUBLE
23759: LD_INT 1
23761: DEC
23762: ST_TO_ADDR
23763: LD_INT 5
23765: PUSH
23766: FOR_TO
23767: IFFALSE 23818
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23769: LD_EXP 67
23773: PUSH
23774: LD_VAR 0 1
23778: ARRAY
23779: PPUSH
23780: LD_INT 62
23782: PUSH
23783: LD_VAR 0 1
23787: PLUS
23788: PPUSH
23789: LD_INT 95
23791: PPUSH
23792: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23796: LD_EXP 67
23800: PUSH
23801: LD_VAR 0 1
23805: ARRAY
23806: PPUSH
23807: LD_EXP 1
23811: PPUSH
23812: CALL_OW 179
// end ;
23816: GO 23766
23818: POP
23819: POP
// repeat wait ( 0 0$1 ) ;
23820: LD_INT 35
23822: PPUSH
23823: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23827: LD_EXP 1
23831: PPUSH
23832: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23836: LD_EXP 1
23840: PPUSH
23841: LD_INT 66
23843: PPUSH
23844: LD_INT 98
23846: PPUSH
23847: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23851: LD_EXP 2
23855: PUSH
23856: LD_EXP 4
23860: PUSH
23861: LD_EXP 16
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: PPUSH
23871: LD_INT 67
23873: PPUSH
23874: LD_INT 98
23876: PPUSH
23877: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23881: LD_EXP 1
23885: PUSH
23886: LD_EXP 2
23890: PUSH
23891: LD_EXP 4
23895: PUSH
23896: LD_EXP 16
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: PPUSH
23907: LD_INT 63
23909: PPUSH
23910: LD_INT 95
23912: PPUSH
23913: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23917: LD_EXP 1
23921: PPUSH
23922: LD_INT 9
23924: PPUSH
23925: CALL_OW 308
23929: PUSH
23930: LD_INT 9
23932: PPUSH
23933: LD_INT 22
23935: PUSH
23936: LD_INT 4
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 21
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PPUSH
23957: CALL_OW 70
23961: PUSH
23962: LD_INT 5
23964: EQUAL
23965: AND
23966: IFFALSE 23820
// wait ( 0 0$3 ) ;
23968: LD_INT 105
23970: PPUSH
23971: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23975: LD_INT 35
23977: PPUSH
23978: CALL_OW 67
// until IsInArea ( JMM , PowellHillArea ) ;
23982: LD_EXP 1
23986: PPUSH
23987: LD_INT 9
23989: PPUSH
23990: CALL_OW 308
23994: IFFALSE 23975
// for i in amUnitsForJMM do
23996: LD_ADDR_VAR 0 1
24000: PUSH
24001: LD_EXP 67
24005: PUSH
24006: FOR_IN
24007: IFFALSE 24023
// SetSide ( i , 1 ) ;
24009: LD_VAR 0 1
24013: PPUSH
24014: LD_INT 1
24016: PPUSH
24017: CALL_OW 235
24021: GO 24006
24023: POP
24024: POP
// if IsInArea ( Lisa , PowellHillArea ) then
24025: LD_EXP 4
24029: PPUSH
24030: LD_INT 9
24032: PPUSH
24033: CALL_OW 308
24037: IFFALSE 24051
// Say ( Lisa , D3nW-Lisa-1 ) ;
24039: LD_EXP 4
24043: PPUSH
24044: LD_STRING D3nW-Lisa-1
24046: PPUSH
24047: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
24051: LD_EXP 7
24055: PPUSH
24056: LD_INT 9
24058: PPUSH
24059: CALL_OW 308
24063: IFFALSE 24077
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
24065: LD_EXP 7
24069: PPUSH
24070: LD_STRING D3nW-Cyrus-1
24072: PPUSH
24073: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
24077: LD_EXP 6
24081: PPUSH
24082: LD_INT 9
24084: PPUSH
24085: CALL_OW 308
24089: IFFALSE 24103
// Say ( Bobby , D3nW-Bobby-1 ) ;
24091: LD_EXP 6
24095: PPUSH
24096: LD_STRING D3nW-Bobby-1
24098: PPUSH
24099: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
24103: LD_EXP 13
24107: PPUSH
24108: LD_INT 9
24110: PPUSH
24111: CALL_OW 308
24115: IFFALSE 24129
// Say ( Gary , D3nW-Gary-1 ) ;
24117: LD_EXP 13
24121: PPUSH
24122: LD_STRING D3nW-Gary-1
24124: PPUSH
24125: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
24129: LD_EXP 5
24133: PPUSH
24134: LD_INT 9
24136: PPUSH
24137: CALL_OW 308
24141: IFFALSE 24155
// Say ( Donaldson , D3nW-Don-1 ) ;
24143: LD_EXP 5
24147: PPUSH
24148: LD_STRING D3nW-Don-1
24150: PPUSH
24151: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
24155: LD_EXP 12
24159: PPUSH
24160: LD_INT 9
24162: PPUSH
24163: CALL_OW 308
24167: IFFALSE 24181
// Say ( Cornel , D3nW-Corn-1 ) ;
24169: LD_EXP 12
24173: PPUSH
24174: LD_STRING D3nW-Corn-1
24176: PPUSH
24177: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
24181: LD_EXP 14
24185: PPUSH
24186: LD_INT 9
24188: PPUSH
24189: CALL_OW 308
24193: IFFALSE 24207
// Say ( Frank , D3nW-Frank-1 ) ;
24195: LD_EXP 14
24199: PPUSH
24200: LD_STRING D3nW-Frank-1
24202: PPUSH
24203: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
24207: LD_EXP 1
24211: PPUSH
24212: LD_STRING D3nW-JMM-1
24214: PPUSH
24215: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
24219: LD_EXP 1
24223: PPUSH
24224: LD_STRING D3nW-JMM-1a
24226: PPUSH
24227: CALL_OW 88
// Video ( false ) ;
24231: LD_INT 0
24233: PPUSH
24234: CALL 6884 0 1
// cinematics := false ;
24238: LD_ADDR_EXP 103
24242: PUSH
24243: LD_INT 0
24245: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
24246: LD_STRING M1
24248: PPUSH
24249: CALL_OW 337
// SaveForQuickRestart ;
24253: CALL_OW 22
// startAttacks = 1 ;
24257: LD_ADDR_EXP 72
24261: PUSH
24262: LD_INT 1
24264: ST_TO_ADDR
// powellBuildBase = 1 ;
24265: LD_ADDR_EXP 68
24269: PUSH
24270: LD_INT 1
24272: ST_TO_ADDR
// end ;
24273: PPOPN 4
24275: END
// function ResolveQuery ( question , list_of_q ) ; begin
24276: LD_INT 0
24278: PPUSH
// case question of 1 :
24279: LD_VAR 0 1
24283: PUSH
24284: LD_INT 1
24286: DOUBLE
24287: EQUAL
24288: IFTRUE 24292
24290: GO 24343
24292: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
24293: LD_EXP 1
24297: PPUSH
24298: LD_STRING D2Mot-JMM-1
24300: PPUSH
24301: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
24305: LD_EXP 17
24309: PPUSH
24310: LD_STRING D2Mot-Pow-1
24312: PPUSH
24313: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
24317: LD_EXP 1
24321: PPUSH
24322: LD_STRING D2Mot-JMM-2
24324: PPUSH
24325: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
24329: LD_EXP 17
24333: PPUSH
24334: LD_STRING D2Mot-Pow-2
24336: PPUSH
24337: CALL_OW 88
// end ; 2 :
24341: GO 24686
24343: LD_INT 2
24345: DOUBLE
24346: EQUAL
24347: IFTRUE 24351
24349: GO 24427
24351: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
24352: LD_EXP 1
24356: PPUSH
24357: LD_STRING D2Rus-JMM-1
24359: PPUSH
24360: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
24364: LD_EXP 17
24368: PPUSH
24369: LD_STRING D2Rus-Pow-1
24371: PPUSH
24372: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
24376: LD_EXP 1
24380: PPUSH
24381: LD_STRING D2Rus-JMM-2
24383: PPUSH
24384: CALL_OW 88
// if not ( 3 in list_of_q ) then
24388: LD_INT 3
24390: PUSH
24391: LD_VAR 0 2
24395: IN
24396: NOT
24397: IFFALSE 24413
// Say ( Powell , D2Rus-Pow-2 ) else
24399: LD_EXP 17
24403: PPUSH
24404: LD_STRING D2Rus-Pow-2
24406: PPUSH
24407: CALL_OW 88
24411: GO 24425
// Say ( Powell , D2Rus-Pow-2a ) ;
24413: LD_EXP 17
24417: PPUSH
24418: LD_STRING D2Rus-Pow-2a
24420: PPUSH
24421: CALL_OW 88
// end ; 3 :
24425: GO 24686
24427: LD_INT 3
24429: DOUBLE
24430: EQUAL
24431: IFTRUE 24435
24433: GO 24520
24435: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
24436: LD_EXP 1
24440: PPUSH
24441: LD_STRING D2Leg-JMM-1
24443: PPUSH
24444: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
24448: LD_EXP 17
24452: PPUSH
24453: LD_STRING D2Leg-Pow-1
24455: PPUSH
24456: CALL_OW 88
// if ( 2 in list_of_q ) then
24460: LD_INT 2
24462: PUSH
24463: LD_VAR 0 2
24467: IN
24468: IFFALSE 24494
// begin Say ( JMM , D2Leg-JMM-2 ) ;
24470: LD_EXP 1
24474: PPUSH
24475: LD_STRING D2Leg-JMM-2
24477: PPUSH
24478: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
24482: LD_EXP 17
24486: PPUSH
24487: LD_STRING D2Leg-Pow-2
24489: PPUSH
24490: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
24494: LD_EXP 1
24498: PPUSH
24499: LD_STRING D2Leg-JMM-3
24501: PPUSH
24502: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
24506: LD_EXP 17
24510: PPUSH
24511: LD_STRING D2Leg-Pow-3
24513: PPUSH
24514: CALL_OW 88
// end ; 4 :
24518: GO 24686
24520: LD_INT 4
24522: DOUBLE
24523: EQUAL
24524: IFTRUE 24528
24526: GO 24603
24528: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
24529: LD_EXP 1
24533: PPUSH
24534: LD_STRING D2Ar-JMM-1
24536: PPUSH
24537: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
24541: LD_EXP 17
24545: PPUSH
24546: LD_STRING D2Ar-Pow-1
24548: PPUSH
24549: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
24553: LD_EXP 1
24557: PPUSH
24558: LD_STRING D2Ar-JMM-2
24560: PPUSH
24561: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
24565: LD_EXP 17
24569: PPUSH
24570: LD_STRING D2Ar-Pow-2
24572: PPUSH
24573: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
24577: LD_EXP 1
24581: PPUSH
24582: LD_STRING D2Ar-JMM-3
24584: PPUSH
24585: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
24589: LD_EXP 17
24593: PPUSH
24594: LD_STRING D2Ar-Pow-3
24596: PPUSH
24597: CALL_OW 88
// end ; 5 :
24601: GO 24686
24603: LD_INT 5
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24626
24611: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
24612: LD_EXP 1
24616: PPUSH
24617: LD_STRING D2Conf-JMM-1
24619: PPUSH
24620: CALL_OW 88
// end ; 6 :
24624: GO 24686
24626: LD_INT 6
24628: DOUBLE
24629: EQUAL
24630: IFTRUE 24634
24632: GO 24685
24634: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
24635: LD_EXP 1
24639: PPUSH
24640: LD_STRING D2Com-JMM-1
24642: PPUSH
24643: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
24647: LD_EXP 17
24651: PPUSH
24652: LD_STRING D2Com-Pow-1
24654: PPUSH
24655: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24659: LD_EXP 1
24663: PPUSH
24664: LD_STRING D2Com-JMM-2
24666: PPUSH
24667: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24671: LD_EXP 17
24675: PPUSH
24676: LD_STRING D2Com-Pow-2
24678: PPUSH
24679: CALL_OW 88
// end ; end ;
24683: GO 24686
24685: POP
// end ;
24686: LD_VAR 0 3
24690: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24691: LD_INT 22
24693: PUSH
24694: LD_INT 4
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 21
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: LD_INT 58
24716: PUSH
24717: EMPTY
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: PPUSH
24729: CALL_OW 69
24733: PUSH
24734: LD_INT 4
24736: EQUAL
24737: PUSH
24738: LD_EXP 72
24742: PUSH
24743: LD_INT 1
24745: EQUAL
24746: AND
24747: IFFALSE 24760
24749: GO 24751
24751: DISABLE
// startAttacks = 0 ;
24752: LD_ADDR_EXP 72
24756: PUSH
24757: LD_INT 0
24759: ST_TO_ADDR
24760: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24761: LD_INT 22
24763: PUSH
24764: LD_INT 4
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 21
24773: PUSH
24774: LD_INT 2
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 3
24783: PUSH
24784: LD_INT 58
24786: PUSH
24787: EMPTY
24788: LIST
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: PPUSH
24799: CALL_OW 69
24803: PUSH
24804: LD_INT 4
24806: EQUAL
24807: PUSH
24808: LD_INT 22
24810: PUSH
24811: LD_INT 6
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 21
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 24
24830: PUSH
24831: LD_INT 250
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: PPUSH
24843: CALL_OW 69
24847: PUSH
24848: LD_INT 0
24850: EQUAL
24851: AND
24852: PUSH
24853: LD_EXP 72
24857: PUSH
24858: LD_INT 0
24860: EQUAL
24861: AND
24862: PUSH
24863: LD_EXP 69
24867: PUSH
24868: LD_INT 0
24870: EQUAL
24871: AND
24872: IFFALSE 25060
24874: GO 24876
24876: DISABLE
24877: LD_INT 0
24879: PPUSH
// begin powellAttacks = 1 ;
24880: LD_ADDR_EXP 69
24884: PUSH
24885: LD_INT 1
24887: ST_TO_ADDR
// InGameOn ;
24888: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24892: LD_EXP 17
24896: PPUSH
24897: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24901: LD_EXP 17
24905: PPUSH
24906: LD_INT 47
24908: PPUSH
24909: LD_INT 60
24911: PPUSH
24912: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24916: LD_EXP 17
24920: PPUSH
24921: LD_STRING D4-Pow-1
24923: PPUSH
24924: CALL_OW 88
// for i = 1 to amUnitsAttack do
24928: LD_ADDR_VAR 0 1
24932: PUSH
24933: DOUBLE
24934: LD_INT 1
24936: DEC
24937: ST_TO_ADDR
24938: LD_EXP 66
24942: PUSH
24943: FOR_TO
24944: IFFALSE 24989
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24946: LD_EXP 66
24950: PUSH
24951: LD_VAR 0 1
24955: ARRAY
24956: PPUSH
24957: CALL_OW 258
24961: PUSH
24962: LD_INT 1
24964: EQUAL
24965: IFFALSE 24987
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24967: LD_EXP 66
24971: PUSH
24972: LD_VAR 0 1
24976: ARRAY
24977: PPUSH
24978: LD_STRING D4-Sol1-1
24980: PPUSH
24981: CALL_OW 88
// break ;
24985: GO 24989
// end ;
24987: GO 24943
24989: POP
24990: POP
// Say ( Powell , D4-Pow-2 ) ;
24991: LD_EXP 17
24995: PPUSH
24996: LD_STRING D4-Pow-2
24998: PPUSH
24999: CALL_OW 88
// InGameOff ;
25003: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
25007: LD_INT 22
25009: PUSH
25010: LD_INT 4
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 21
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 3
25029: PUSH
25030: LD_INT 58
25032: PUSH
25033: EMPTY
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: PPUSH
25045: CALL_OW 69
25049: PPUSH
25050: LD_INT 59
25052: PPUSH
25053: LD_INT 21
25055: PPUSH
25056: CALL_OW 114
// end ;
25060: PPOPN 1
25062: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25063: LD_EXP 103
25067: NOT
25068: PUSH
25069: LD_INT 7
25071: PPUSH
25072: LD_INT 22
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 21
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PPUSH
25096: CALL_OW 70
25100: PUSH
25101: LD_INT 0
25103: GREATER
25104: AND
25105: PUSH
25106: LD_EXP 17
25110: PPUSH
25111: CALL_OW 302
25115: AND
25116: PUSH
25117: LD_EXP 71
25121: PUSH
25122: LD_INT 0
25124: EQUAL
25125: AND
25126: IFFALSE 25250
25128: GO 25130
25130: DISABLE
// begin InGameOn ;
25131: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25135: LD_INT 22
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 21
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PPUSH
25159: CALL_OW 69
25163: PPUSH
25164: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25168: LD_INT 7
25170: PPUSH
25171: LD_INT 22
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 21
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PPUSH
25195: CALL_OW 70
25199: PPUSH
25200: LD_INT 70
25202: PPUSH
25203: LD_INT 104
25205: PPUSH
25206: CALL_OW 111
// if powellWarm = 0 then
25210: LD_EXP 71
25214: PUSH
25215: LD_INT 0
25217: EQUAL
25218: IFFALSE 25246
// begin Say ( Powell , DBack1-Pow-1 ) ;
25220: LD_EXP 17
25224: PPUSH
25225: LD_STRING DBack1-Pow-1
25227: PPUSH
25228: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25232: LD_ADDR_EXP 71
25236: PUSH
25237: LD_EXP 71
25241: PUSH
25242: LD_INT 1
25244: PLUS
25245: ST_TO_ADDR
// end ; InGameOff ;
25246: CALL_OW 9
// end ;
25250: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25251: LD_EXP 103
25255: NOT
25256: PUSH
25257: LD_INT 7
25259: PPUSH
25260: LD_INT 22
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 21
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PPUSH
25284: CALL_OW 70
25288: PUSH
25289: LD_INT 0
25291: GREATER
25292: AND
25293: PUSH
25294: LD_EXP 17
25298: PPUSH
25299: CALL_OW 302
25303: AND
25304: PUSH
25305: LD_EXP 71
25309: PUSH
25310: LD_INT 1
25312: EQUAL
25313: AND
25314: IFFALSE 25438
25316: GO 25318
25318: DISABLE
// begin InGameOn ;
25319: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25323: LD_INT 22
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 21
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PPUSH
25347: CALL_OW 69
25351: PPUSH
25352: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25356: LD_INT 7
25358: PPUSH
25359: LD_INT 22
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 21
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PPUSH
25383: CALL_OW 70
25387: PPUSH
25388: LD_INT 70
25390: PPUSH
25391: LD_INT 104
25393: PPUSH
25394: CALL_OW 111
// if powellWarm = 1 then
25398: LD_EXP 71
25402: PUSH
25403: LD_INT 1
25405: EQUAL
25406: IFFALSE 25434
// begin Say ( Powell , DBack2-Pow-1 ) ;
25408: LD_EXP 17
25412: PPUSH
25413: LD_STRING DBack2-Pow-1
25415: PPUSH
25416: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25420: LD_ADDR_EXP 71
25424: PUSH
25425: LD_EXP 71
25429: PUSH
25430: LD_INT 1
25432: PLUS
25433: ST_TO_ADDR
// end ; InGameOff ;
25434: CALL_OW 9
// end ;
25438: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25439: LD_EXP 103
25443: NOT
25444: PUSH
25445: LD_INT 7
25447: PPUSH
25448: LD_INT 22
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 21
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PPUSH
25472: CALL_OW 70
25476: PUSH
25477: LD_INT 0
25479: GREATER
25480: AND
25481: PUSH
25482: LD_EXP 17
25486: PPUSH
25487: CALL_OW 302
25491: AND
25492: PUSH
25493: LD_EXP 71
25497: PUSH
25498: LD_INT 2
25500: EQUAL
25501: AND
25502: IFFALSE 25619
25504: GO 25506
25506: DISABLE
// begin InGameOn ;
25507: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25511: LD_INT 22
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 21
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PPUSH
25535: CALL_OW 69
25539: PPUSH
25540: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25544: LD_INT 7
25546: PPUSH
25547: LD_INT 22
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 21
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PPUSH
25571: CALL_OW 70
25575: PPUSH
25576: LD_INT 70
25578: PPUSH
25579: LD_INT 104
25581: PPUSH
25582: CALL_OW 111
// if powellWarm = 2 then
25586: LD_EXP 71
25590: PUSH
25591: LD_INT 2
25593: EQUAL
25594: IFFALSE 25615
// begin Say ( Powell , DBack3-Pow-1 ) ;
25596: LD_EXP 17
25600: PPUSH
25601: LD_STRING DBack3-Pow-1
25603: PPUSH
25604: CALL_OW 88
// YouLost ( Dismissed ) ;
25608: LD_STRING Dismissed
25610: PPUSH
25611: CALL_OW 104
// end ; InGameOff ;
25615: CALL_OW 9
// end ;
25619: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25620: LD_EXP 103
25624: NOT
25625: PUSH
25626: LD_INT 8
25628: PPUSH
25629: LD_INT 22
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 21
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PPUSH
25653: CALL_OW 70
25657: PUSH
25658: LD_INT 0
25660: GREATER
25661: AND
25662: PUSH
25663: LD_EXP 17
25667: PPUSH
25668: CALL_OW 302
25672: AND
25673: PUSH
25674: LD_EXP 71
25678: PUSH
25679: LD_INT 0
25681: EQUAL
25682: AND
25683: IFFALSE 25807
25685: GO 25687
25687: DISABLE
// begin InGameOn ;
25688: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25692: LD_INT 22
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 21
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PPUSH
25716: CALL_OW 69
25720: PPUSH
25721: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25725: LD_INT 8
25727: PPUSH
25728: LD_INT 22
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 21
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PPUSH
25752: CALL_OW 70
25756: PPUSH
25757: LD_INT 71
25759: PPUSH
25760: LD_INT 63
25762: PPUSH
25763: CALL_OW 111
// if powellWarm = 0 then
25767: LD_EXP 71
25771: PUSH
25772: LD_INT 0
25774: EQUAL
25775: IFFALSE 25803
// begin Say ( Powell , DBack1-Pow-1 ) ;
25777: LD_EXP 17
25781: PPUSH
25782: LD_STRING DBack1-Pow-1
25784: PPUSH
25785: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25789: LD_ADDR_EXP 71
25793: PUSH
25794: LD_EXP 71
25798: PUSH
25799: LD_INT 1
25801: PLUS
25802: ST_TO_ADDR
// end ; InGameOff ;
25803: CALL_OW 9
// end ;
25807: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25808: LD_EXP 103
25812: NOT
25813: PUSH
25814: LD_INT 8
25816: PPUSH
25817: LD_INT 22
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 21
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PPUSH
25841: CALL_OW 70
25845: PUSH
25846: LD_INT 0
25848: GREATER
25849: AND
25850: PUSH
25851: LD_EXP 17
25855: PPUSH
25856: CALL_OW 302
25860: AND
25861: PUSH
25862: LD_EXP 71
25866: PUSH
25867: LD_INT 1
25869: EQUAL
25870: AND
25871: IFFALSE 25995
25873: GO 25875
25875: DISABLE
// begin InGameOn ;
25876: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25880: LD_INT 22
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 21
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PPUSH
25904: CALL_OW 69
25908: PPUSH
25909: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25913: LD_INT 8
25915: PPUSH
25916: LD_INT 22
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 21
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 70
25944: PPUSH
25945: LD_INT 71
25947: PPUSH
25948: LD_INT 63
25950: PPUSH
25951: CALL_OW 111
// if powellWarm = 1 then
25955: LD_EXP 71
25959: PUSH
25960: LD_INT 1
25962: EQUAL
25963: IFFALSE 25991
// begin Say ( Powell , DBack2-Pow-1 ) ;
25965: LD_EXP 17
25969: PPUSH
25970: LD_STRING DBack2-Pow-1
25972: PPUSH
25973: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25977: LD_ADDR_EXP 71
25981: PUSH
25982: LD_EXP 71
25986: PUSH
25987: LD_INT 1
25989: PLUS
25990: ST_TO_ADDR
// end ; InGameOff ;
25991: CALL_OW 9
// end ;
25995: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25996: LD_EXP 103
26000: NOT
26001: PUSH
26002: LD_INT 8
26004: PPUSH
26005: LD_INT 22
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 21
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PPUSH
26029: CALL_OW 70
26033: PUSH
26034: LD_INT 0
26036: GREATER
26037: AND
26038: PUSH
26039: LD_EXP 17
26043: PPUSH
26044: CALL_OW 302
26048: AND
26049: PUSH
26050: LD_EXP 71
26054: PUSH
26055: LD_INT 2
26057: EQUAL
26058: AND
26059: IFFALSE 26176
26061: GO 26063
26063: DISABLE
// begin InGameOn ;
26064: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
26068: LD_INT 22
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 21
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PPUSH
26092: CALL_OW 69
26096: PPUSH
26097: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
26101: LD_INT 8
26103: PPUSH
26104: LD_INT 22
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 21
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 70
26132: PPUSH
26133: LD_INT 71
26135: PPUSH
26136: LD_INT 63
26138: PPUSH
26139: CALL_OW 111
// if powellWarm = 2 then
26143: LD_EXP 71
26147: PUSH
26148: LD_INT 2
26150: EQUAL
26151: IFFALSE 26172
// begin Say ( Powell , DBack3-Pow-1 ) ;
26153: LD_EXP 17
26157: PPUSH
26158: LD_STRING DBack3-Pow-1
26160: PPUSH
26161: CALL_OW 88
// YouLost ( Dismissed ) ;
26165: LD_STRING Dismissed
26167: PPUSH
26168: CALL_OW 104
// end ; InGameOff ;
26172: CALL_OW 9
// end ;
26176: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
26177: LD_EXP 69
26181: PUSH
26182: LD_INT 1
26184: EQUAL
26185: IFFALSE 26234
26187: GO 26189
26189: DISABLE
26190: LD_INT 0
26192: PPUSH
// begin enable ;
26193: ENABLE
// for i = 1 to amUnitsAttack do
26194: LD_ADDR_VAR 0 1
26198: PUSH
26199: DOUBLE
26200: LD_INT 1
26202: DEC
26203: ST_TO_ADDR
26204: LD_EXP 66
26208: PUSH
26209: FOR_TO
26210: IFFALSE 26232
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
26212: LD_INT 8
26214: PPUSH
26215: LD_EXP 66
26219: PUSH
26220: LD_VAR 0 1
26224: ARRAY
26225: PPUSH
26226: CALL_OW 471
26230: GO 26209
26232: POP
26233: POP
// end ;
26234: PPOPN 1
26236: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
26237: LD_INT 22
26239: PUSH
26240: LD_INT 4
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 21
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 3
26259: PUSH
26260: LD_INT 58
26262: PUSH
26263: EMPTY
26264: LIST
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: PPUSH
26275: CALL_OW 69
26279: PUSH
26280: LD_INT 0
26282: EQUAL
26283: PUSH
26284: LD_EXP 69
26288: PUSH
26289: LD_INT 1
26291: EQUAL
26292: AND
26293: IFFALSE 26464
26295: GO 26297
26297: DISABLE
// begin powellAttacks = 2 ;
26298: LD_ADDR_EXP 69
26302: PUSH
26303: LD_INT 2
26305: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26306: LD_INT 85
26308: PPUSH
26309: LD_INT 3
26311: PPUSH
26312: LD_INT 3
26314: PPUSH
26315: LD_INT 1
26317: PPUSH
26318: LD_INT 5
26320: PUSH
26321: LD_INT 7
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PPUSH
26331: LD_INT 2
26333: PPUSH
26334: CALL_OW 12
26338: ARRAY
26339: PPUSH
26340: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26344: LD_INT 85
26346: PPUSH
26347: LD_INT 3
26349: PPUSH
26350: LD_INT 3
26352: PPUSH
26353: LD_INT 1
26355: PPUSH
26356: LD_INT 5
26358: PUSH
26359: LD_INT 7
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: PPUSH
26369: LD_INT 2
26371: PPUSH
26372: CALL_OW 12
26376: ARRAY
26377: PPUSH
26378: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26382: LD_INT 85
26384: PPUSH
26385: LD_INT 3
26387: PPUSH
26388: LD_INT 3
26390: PPUSH
26391: LD_INT 1
26393: PPUSH
26394: LD_INT 5
26396: PUSH
26397: LD_INT 7
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: PPUSH
26407: LD_INT 2
26409: PPUSH
26410: CALL_OW 12
26414: ARRAY
26415: PPUSH
26416: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
26420: LD_INT 85
26422: PPUSH
26423: LD_INT 5
26425: PPUSH
26426: LD_INT 3
26428: PPUSH
26429: LD_INT 1
26431: PPUSH
26432: LD_INT 6
26434: PPUSH
26435: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
26439: LD_ADDR_EXP 73
26443: PUSH
26444: LD_INT 85
26446: PPUSH
26447: LD_INT 3
26449: PPUSH
26450: LD_INT 3
26452: PPUSH
26453: LD_INT 1
26455: PPUSH
26456: LD_INT 3
26458: PPUSH
26459: CALL_OW 185
26463: ST_TO_ADDR
// end ;
26464: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
26465: LD_INT 22
26467: PUSH
26468: LD_INT 4
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 21
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 3
26487: PUSH
26488: LD_INT 58
26490: PUSH
26491: EMPTY
26492: LIST
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 69
26507: PUSH
26508: LD_INT 5
26510: GREATEREQUAL
26511: PUSH
26512: LD_EXP 72
26516: PUSH
26517: LD_INT 1
26519: EQUAL
26520: AND
26521: IFFALSE 26534
26523: GO 26525
26525: DISABLE
// startAttacks = 0 ;
26526: LD_ADDR_EXP 72
26530: PUSH
26531: LD_INT 0
26533: ST_TO_ADDR
26534: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
26535: LD_INT 22
26537: PUSH
26538: LD_INT 4
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 21
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 3
26557: PUSH
26558: LD_INT 58
26560: PUSH
26561: EMPTY
26562: LIST
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: PPUSH
26573: CALL_OW 69
26577: PUSH
26578: LD_INT 5
26580: GREATEREQUAL
26581: PUSH
26582: LD_INT 22
26584: PUSH
26585: LD_INT 6
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 21
26594: PUSH
26595: LD_INT 2
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PPUSH
26606: CALL_OW 69
26610: PUSH
26611: LD_INT 0
26613: EQUAL
26614: AND
26615: PUSH
26616: LD_EXP 72
26620: PUSH
26621: LD_INT 0
26623: EQUAL
26624: AND
26625: PUSH
26626: LD_EXP 69
26630: PUSH
26631: LD_INT 2
26633: EQUAL
26634: AND
26635: IFFALSE 27570
26637: GO 26639
26639: DISABLE
26640: LD_INT 0
26642: PPUSH
26643: PPUSH
26644: PPUSH
26645: PPUSH
// begin powellAttacks = 3 ;
26646: LD_ADDR_EXP 69
26650: PUSH
26651: LD_INT 3
26653: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26654: LD_ADDR_VAR 0 1
26658: PUSH
26659: DOUBLE
26660: LD_INT 1
26662: DEC
26663: ST_TO_ADDR
26664: LD_EXP 66
26668: PUSH
26669: FOR_TO
26670: IFFALSE 26692
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26672: LD_INT 8
26674: PPUSH
26675: LD_EXP 66
26679: PUSH
26680: LD_VAR 0 1
26684: ARRAY
26685: PPUSH
26686: CALL_OW 472
26690: GO 26669
26692: POP
26693: POP
// wait ( 0 0$5 ) ;
26694: LD_INT 175
26696: PPUSH
26697: CALL_OW 67
// Video ( true ) ;
26701: LD_INT 1
26703: PPUSH
26704: CALL 6884 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26708: LD_INT 22
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PPUSH
26718: CALL_OW 69
26722: PPUSH
26723: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26727: LD_EXP 17
26731: PPUSH
26732: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26736: LD_EXP 17
26740: PPUSH
26741: LD_INT 45
26743: PPUSH
26744: LD_INT 64
26746: PPUSH
26747: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26751: LD_EXP 17
26755: PPUSH
26756: LD_INT 46
26758: PPUSH
26759: LD_INT 66
26761: PPUSH
26762: CALL_OW 178
// for i = 5 to 8 do
26766: LD_ADDR_VAR 0 1
26770: PUSH
26771: DOUBLE
26772: LD_INT 5
26774: DEC
26775: ST_TO_ADDR
26776: LD_INT 8
26778: PUSH
26779: FOR_TO
26780: IFFALSE 26926
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26782: LD_EXP 66
26786: PUSH
26787: LD_VAR 0 1
26791: ARRAY
26792: PPUSH
26793: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26797: LD_EXP 66
26801: PUSH
26802: LD_VAR 0 1
26806: ARRAY
26807: PPUSH
26808: CALL_OW 121
// wait ( 0 0$1 ) ;
26812: LD_INT 35
26814: PPUSH
26815: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26819: LD_EXP 66
26823: PUSH
26824: LD_VAR 0 1
26828: ARRAY
26829: PPUSH
26830: LD_INT 92
26832: PPUSH
26833: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26837: LD_EXP 66
26841: PUSH
26842: LD_VAR 0 1
26846: ARRAY
26847: PPUSH
26848: LD_INT 1
26850: PPUSH
26851: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26855: LD_EXP 66
26859: PUSH
26860: LD_VAR 0 1
26864: ARRAY
26865: PPUSH
26866: CALL_OW 182
// wait ( 0 0$1 ) ;
26870: LD_INT 35
26872: PPUSH
26873: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26877: LD_EXP 66
26881: PUSH
26882: LD_VAR 0 1
26886: ARRAY
26887: PPUSH
26888: LD_INT 43
26890: PUSH
26891: LD_VAR 0 1
26895: PLUS
26896: PPUSH
26897: LD_INT 66
26899: PPUSH
26900: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26904: LD_EXP 66
26908: PUSH
26909: LD_VAR 0 1
26913: ARRAY
26914: PPUSH
26915: LD_EXP 17
26919: PPUSH
26920: CALL_OW 179
// end ;
26924: GO 26779
26926: POP
26927: POP
// wait ( 0 0$10 ) ;
26928: LD_INT 350
26930: PPUSH
26931: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26935: LD_ADDR_VAR 0 3
26939: PUSH
26940: LD_INT 22
26942: PUSH
26943: LD_INT 4
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 21
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 56
26962: PUSH
26963: EMPTY
26964: LIST
26965: PUSH
26966: LD_INT 3
26968: PUSH
26969: LD_INT 60
26971: PUSH
26972: EMPTY
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: PPUSH
26985: CALL_OW 69
26989: PUSH
26990: LD_EXP 17
26994: PUSH
26995: EMPTY
26996: LIST
26997: DIFF
26998: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
26999: LD_VAR 0 3
27003: PPUSH
27004: LD_INT 92
27006: PPUSH
27007: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
27011: LD_VAR 0 3
27015: PPUSH
27016: LD_INT 1
27018: PPUSH
27019: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
27023: LD_EXP 17
27027: PPUSH
27028: LD_STRING D5-Pow-1
27030: PPUSH
27031: CALL_OW 88
// for i = 1 to amUnitsAttack do
27035: LD_ADDR_VAR 0 1
27039: PUSH
27040: DOUBLE
27041: LD_INT 1
27043: DEC
27044: ST_TO_ADDR
27045: LD_EXP 66
27049: PUSH
27050: FOR_TO
27051: IFFALSE 27096
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
27053: LD_EXP 66
27057: PUSH
27058: LD_VAR 0 1
27062: ARRAY
27063: PPUSH
27064: CALL_OW 258
27068: PUSH
27069: LD_INT 1
27071: EQUAL
27072: IFFALSE 27094
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
27074: LD_EXP 66
27078: PUSH
27079: LD_VAR 0 1
27083: ARRAY
27084: PPUSH
27085: LD_STRING D5-Sol2-1
27087: PPUSH
27088: CALL_OW 88
// break ;
27092: GO 27096
// end ;
27094: GO 27050
27096: POP
27097: POP
// Say ( Powell , D5-Pow-2 ) ;
27098: LD_EXP 17
27102: PPUSH
27103: LD_STRING D5-Pow-2
27105: PPUSH
27106: CALL_OW 88
// for i = 1 to amUnitsAttack do
27110: LD_ADDR_VAR 0 1
27114: PUSH
27115: DOUBLE
27116: LD_INT 1
27118: DEC
27119: ST_TO_ADDR
27120: LD_EXP 66
27124: PUSH
27125: FOR_TO
27126: IFFALSE 27171
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
27128: LD_EXP 66
27132: PUSH
27133: LD_VAR 0 1
27137: ARRAY
27138: PPUSH
27139: CALL_OW 258
27143: PUSH
27144: LD_INT 1
27146: EQUAL
27147: IFFALSE 27169
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
27149: LD_EXP 66
27153: PUSH
27154: LD_VAR 0 1
27158: ARRAY
27159: PPUSH
27160: LD_STRING D5-Sol2-2
27162: PPUSH
27163: CALL_OW 88
// break ;
27167: GO 27171
// end ;
27169: GO 27125
27171: POP
27172: POP
// Say ( Powell , D5-Pow-3 ) ;
27173: LD_EXP 17
27177: PPUSH
27178: LD_STRING D5-Pow-3
27180: PPUSH
27181: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
27185: LD_INT 22
27187: PUSH
27188: LD_INT 4
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 21
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 3
27207: PUSH
27208: LD_INT 58
27210: PUSH
27211: EMPTY
27212: LIST
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: PPUSH
27223: CALL_OW 69
27227: PPUSH
27228: LD_INT 59
27230: PPUSH
27231: LD_INT 21
27233: PPUSH
27234: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
27238: LD_EXP 66
27242: PPUSH
27243: LD_INT 59
27245: PPUSH
27246: LD_INT 21
27248: PPUSH
27249: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
27253: LD_INT 61
27255: PPUSH
27256: LD_INT 35
27258: PPUSH
27259: CALL_OW 84
// wait ( 0 0$15 ) ;
27263: LD_INT 525
27265: PPUSH
27266: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
27270: LD_EXP 17
27274: PPUSH
27275: LD_STRING D5a-Pow-1
27277: PPUSH
27278: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
27282: LD_EXP 17
27286: PPUSH
27287: LD_STRING D5a-Pow-1a
27289: PPUSH
27290: CALL_OW 88
// wait ( 0 0$2 ) ;
27294: LD_INT 70
27296: PPUSH
27297: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
27301: LD_EXP 17
27305: PPUSH
27306: LD_STRING D5a-Pow-1b
27308: PPUSH
27309: CALL_OW 88
// wait ( 0 0$3 ) ;
27313: LD_INT 105
27315: PPUSH
27316: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
27320: LD_EXP 17
27324: PPUSH
27325: LD_STRING D5a-Pow-1c
27327: PPUSH
27328: CALL_OW 88
// wait ( 0 0$1 ) ;
27332: LD_INT 35
27334: PPUSH
27335: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
27339: LD_EXP 17
27343: PPUSH
27344: LD_STRING D5a-Pow-1d
27346: PPUSH
27347: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
27351: LD_INT 35
27353: PPUSH
27354: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
27358: LD_INT 22
27360: PUSH
27361: LD_INT 4
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 21
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: LD_INT 58
27383: PUSH
27384: EMPTY
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: PPUSH
27396: CALL_OW 69
27400: PPUSH
27401: LD_INT 59
27403: PPUSH
27404: LD_INT 21
27406: PPUSH
27407: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
27411: LD_EXP 66
27415: PPUSH
27416: LD_INT 59
27418: PPUSH
27419: LD_INT 21
27421: PPUSH
27422: CALL_OW 114
// until amUnitsAttack = [ ] ;
27426: LD_EXP 66
27430: PUSH
27431: EMPTY
27432: EQUAL
27433: IFFALSE 27351
// CenterNowOnUnits ( Powell ) ;
27435: LD_EXP 17
27439: PPUSH
27440: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
27444: LD_ADDR_VAR 0 3
27448: PUSH
27449: LD_INT 22
27451: PUSH
27452: LD_INT 4
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 21
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PPUSH
27473: CALL_OW 69
27477: PUSH
27478: LD_EXP 17
27482: PUSH
27483: EMPTY
27484: LIST
27485: DIFF
27486: ST_TO_ADDR
// for i in powellPeople do
27487: LD_ADDR_VAR 0 1
27491: PUSH
27492: LD_VAR 0 3
27496: PUSH
27497: FOR_IN
27498: IFFALSE 27527
// if GetSex ( i ) = sex_male then
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 258
27509: PUSH
27510: LD_INT 1
27512: EQUAL
27513: IFFALSE 27525
// sold = i ;
27515: LD_ADDR_VAR 0 2
27519: PUSH
27520: LD_VAR 0 1
27524: ST_TO_ADDR
27525: GO 27497
27527: POP
27528: POP
// Say ( sold , D6-Sol3-1 ) ;
27529: LD_VAR 0 2
27533: PPUSH
27534: LD_STRING D6-Sol3-1
27536: PPUSH
27537: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
27541: LD_EXP 17
27545: PPUSH
27546: LD_STRING D6-Pow-1
27548: PPUSH
27549: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
27553: LD_INT 139
27555: PUSH
27556: LD_INT 138
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PPUSH
27563: LD_INT 12
27565: PPUSH
27566: CALL_OW 113
// end ;
27570: PPOPN 4
27572: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
27573: LD_EXP 69
27577: PUSH
27578: LD_INT 3
27580: EQUAL
27581: PUSH
27582: LD_INT 12
27584: PPUSH
27585: LD_INT 22
27587: PUSH
27588: LD_INT 8
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 21
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PPUSH
27609: CALL_OW 70
27613: PUSH
27614: LD_INT 2
27616: EQUAL
27617: AND
27618: IFFALSE 27779
27620: GO 27622
27622: DISABLE
27623: LD_INT 0
27625: PPUSH
27626: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27627: LD_INT 8
27629: PPUSH
27630: LD_INT 1
27632: PPUSH
27633: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27637: LD_INT 4
27639: PPUSH
27640: LD_INT 8
27642: PPUSH
27643: LD_INT 1
27645: PPUSH
27646: LD_INT 1
27648: PPUSH
27649: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27653: LD_ADDR_VAR 0 1
27657: PUSH
27658: LD_INT 92
27660: PPUSH
27661: CALL_OW 313
27665: PUSH
27666: FOR_IN
27667: IFFALSE 27698
// if GetSex ( i ) = sex_male then
27669: LD_VAR 0 1
27673: PPUSH
27674: CALL_OW 258
27678: PUSH
27679: LD_INT 1
27681: EQUAL
27682: IFFALSE 27696
// begin tmp = i ;
27684: LD_ADDR_VAR 0 2
27688: PUSH
27689: LD_VAR 0 1
27693: ST_TO_ADDR
// break ;
27694: GO 27698
// end ;
27696: GO 27666
27698: POP
27699: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27700: LD_INT 92
27702: PPUSH
27703: CALL_OW 313
27707: PPUSH
27708: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27712: LD_VAR 0 2
27716: PPUSH
27717: LD_STRING D6-Sol3-2
27719: PPUSH
27720: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27724: LD_INT 139
27726: PUSH
27727: LD_INT 138
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PPUSH
27734: LD_INT 85
27736: PPUSH
27737: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27741: LD_INT 4
27743: PPUSH
27744: LD_INT 8
27746: PPUSH
27747: LD_INT 2
27749: PPUSH
27750: LD_INT 1
27752: PPUSH
27753: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27757: LD_INT 8
27759: PPUSH
27760: LD_INT 8
27762: PPUSH
27763: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27767: LD_EXP 17
27771: PPUSH
27772: LD_STRING D6-Pow-2
27774: PPUSH
27775: CALL_OW 88
// end ;
27779: PPOPN 2
27781: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27782: LD_INT 85
27784: PPUSH
27785: CALL_OW 301
27789: IFFALSE 28253
27791: GO 27793
27793: DISABLE
27794: LD_INT 0
27796: PPUSH
27797: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27798: LD_INT 22
27800: PUSH
27801: LD_INT 8
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 21
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 33
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 34
27830: PUSH
27831: LD_INT 29
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 50
27840: PUSH
27841: EMPTY
27842: LIST
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: PPUSH
27851: CALL_OW 69
27855: PUSH
27856: LD_INT 1
27858: EQUAL
27859: IFFALSE 27970
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27861: LD_INT 22
27863: PUSH
27864: LD_INT 8
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 21
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 33
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 34
27893: PUSH
27894: LD_INT 29
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 50
27903: PUSH
27904: EMPTY
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: PPUSH
27919: LD_INT 34
27921: PPUSH
27922: LD_INT 22
27924: PUSH
27925: LD_INT 4
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 21
27934: PUSH
27935: LD_INT 3
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 30
27944: PUSH
27945: LD_INT 32
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: PPUSH
27957: CALL_OW 70
27961: PUSH
27962: LD_INT 1
27964: ARRAY
27965: PPUSH
27966: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
27970: LD_ADDR_VAR 0 1
27974: PUSH
27975: LD_INT 22
27977: PUSH
27978: LD_INT 4
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 21
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 56
27997: PUSH
27998: EMPTY
27999: LIST
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: PPUSH
28006: CALL_OW 69
28010: PUSH
28011: LD_EXP 17
28015: PUSH
28016: EMPTY
28017: LIST
28018: DIFF
28019: PUSH
28020: FOR_IN
28021: IFFALSE 28052
// if GetSex ( i ) = sex_male then
28023: LD_VAR 0 1
28027: PPUSH
28028: CALL_OW 258
28032: PUSH
28033: LD_INT 1
28035: EQUAL
28036: IFFALSE 28050
// begin tmp = i ;
28038: LD_ADDR_VAR 0 2
28042: PUSH
28043: LD_VAR 0 1
28047: ST_TO_ADDR
// break ;
28048: GO 28052
// end ;
28050: GO 28020
28052: POP
28053: POP
// Say ( Powell , D6a-Pow-1 ) ;
28054: LD_EXP 17
28058: PPUSH
28059: LD_STRING D6a-Pow-1
28061: PPUSH
28062: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
28066: LD_VAR 0 2
28070: PPUSH
28071: LD_STRING D6a-Sol3-1
28073: PPUSH
28074: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
28078: LD_EXP 17
28082: PPUSH
28083: LD_VAR 0 2
28087: PPUSH
28088: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
28092: LD_EXP 17
28096: PPUSH
28097: LD_STRING D6a-Pow-2
28099: PPUSH
28100: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
28104: LD_VAR 0 2
28108: PPUSH
28109: LD_STRING D6a-Sol3-2
28111: PPUSH
28112: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
28116: LD_EXP 17
28120: PPUSH
28121: LD_STRING D6a-Pow-3
28123: PPUSH
28124: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
28128: LD_EXP 17
28132: PPUSH
28133: LD_EXP 73
28137: PPUSH
28138: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
28142: LD_INT 35
28144: PPUSH
28145: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
28149: LD_EXP 17
28153: PPUSH
28154: LD_EXP 73
28158: PPUSH
28159: CALL_OW 120
// until IsInUnit ( Powell ) ;
28163: LD_EXP 17
28167: PPUSH
28168: CALL_OW 310
28172: IFFALSE 28142
// wait ( 0 0$1 ) ;
28174: LD_INT 35
28176: PPUSH
28177: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
28181: LD_EXP 73
28185: PPUSH
28186: LD_INT 77
28188: PPUSH
28189: LD_INT 64
28191: PPUSH
28192: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
28196: LD_EXP 73
28200: PPUSH
28201: LD_INT 91
28203: PPUSH
28204: LD_INT 61
28206: PPUSH
28207: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
28211: LD_EXP 73
28215: PPUSH
28216: LD_INT 74
28218: PPUSH
28219: LD_INT 25
28221: PPUSH
28222: CALL_OW 171
// centerPowell = 1 ;
28226: LD_ADDR_EXP 74
28230: PUSH
28231: LD_INT 1
28233: ST_TO_ADDR
// wait ( 0 0$15 ) ;
28234: LD_INT 525
28236: PPUSH
28237: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
28241: LD_EXP 17
28245: PPUSH
28246: LD_STRING D6b-Pow-1
28248: PPUSH
28249: CALL_OW 88
// end ;
28253: PPOPN 2
28255: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
28256: LD_EXP 73
28260: PPUSH
28261: LD_INT 13
28263: PPUSH
28264: CALL_OW 308
28268: PUSH
28269: LD_EXP 69
28273: PUSH
28274: LD_INT 3
28276: EQUAL
28277: AND
28278: IFFALSE 28420
28280: GO 28282
28282: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
28283: LD_EXP 73
28287: PPUSH
28288: LD_INT 250
28290: PPUSH
28291: CALL_OW 234
// DialogueOn ;
28295: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
28299: LD_EXP 17
28303: PPUSH
28304: LD_STRING D6b-Pow-1a
28306: PPUSH
28307: CALL_OW 88
// DialogueOff ;
28311: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
28315: LD_EXP 17
28319: PPUSH
28320: LD_INT 22
28322: PUSH
28323: LD_INT 8
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 34
28332: PUSH
28333: LD_INT 29
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 50
28342: PUSH
28343: EMPTY
28344: LIST
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: PUSH
28356: LD_INT 1
28358: ARRAY
28359: PPUSH
28360: CALL_OW 120
// wait ( 0 0$1 ) ;
28364: LD_INT 35
28366: PPUSH
28367: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
28371: LD_EXP 17
28375: PPUSH
28376: LD_INT 22
28378: PUSH
28379: LD_INT 8
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 34
28388: PUSH
28389: LD_INT 29
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 50
28398: PUSH
28399: EMPTY
28400: LIST
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: PPUSH
28407: CALL_OW 69
28411: PUSH
28412: LD_INT 1
28414: ARRAY
28415: PPUSH
28416: CALL_OW 120
// end ;
28420: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
28421: LD_INT 22
28423: PUSH
28424: LD_INT 4
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 34
28433: PUSH
28434: LD_INT 29
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL_OW 69
28449: IFFALSE 28881
28451: GO 28453
28453: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
28454: LD_ADDR_EXP 75
28458: PUSH
28459: LD_INT 22
28461: PUSH
28462: LD_INT 4
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 34
28471: PUSH
28472: LD_INT 29
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PPUSH
28483: CALL_OW 69
28487: PUSH
28488: LD_INT 1
28490: ARRAY
28491: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
28492: LD_INT 8
28494: PPUSH
28495: LD_INT 4
28497: PPUSH
28498: LD_INT 1
28500: PPUSH
28501: LD_INT 1
28503: PPUSH
28504: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
28508: LD_EXP 75
28512: PPUSH
28513: LD_INT 80
28515: PPUSH
28516: LD_INT 19
28518: PPUSH
28519: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28523: LD_EXP 75
28527: PPUSH
28528: LD_INT 74
28530: PPUSH
28531: LD_INT 15
28533: PPUSH
28534: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28538: LD_EXP 75
28542: PPUSH
28543: LD_INT 72
28545: PPUSH
28546: LD_INT 19
28548: PPUSH
28549: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28553: LD_EXP 75
28557: PPUSH
28558: LD_INT 78
28560: PPUSH
28561: LD_INT 24
28563: PPUSH
28564: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28568: LD_EXP 75
28572: PPUSH
28573: LD_INT 77
28575: PPUSH
28576: LD_INT 20
28578: PPUSH
28579: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28583: LD_EXP 75
28587: PPUSH
28588: LD_INT 74
28590: PPUSH
28591: LD_INT 15
28593: PPUSH
28594: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28598: LD_EXP 75
28602: PPUSH
28603: LD_INT 72
28605: PPUSH
28606: LD_INT 19
28608: PPUSH
28609: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28613: LD_EXP 75
28617: PPUSH
28618: LD_INT 78
28620: PPUSH
28621: LD_INT 24
28623: PPUSH
28624: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28628: LD_EXP 75
28632: PPUSH
28633: LD_INT 77
28635: PPUSH
28636: LD_INT 20
28638: PPUSH
28639: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28643: LD_EXP 75
28647: PPUSH
28648: LD_INT 78
28650: PPUSH
28651: LD_INT 15
28653: PPUSH
28654: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28658: LD_EXP 17
28662: PPUSH
28663: LD_STRING D6b-Pow-1b
28665: PPUSH
28666: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28670: LD_INT 22
28672: PUSH
28673: LD_INT 8
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 21
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 25
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 26
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: PPUSH
28716: CALL_OW 69
28720: PUSH
28721: LD_INT 1
28723: ARRAY
28724: PPUSH
28725: LD_STRING D6b-ArSol1-1
28727: PPUSH
28728: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28732: LD_INT 22
28734: PUSH
28735: LD_INT 8
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 21
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 25
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 26
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 69
28782: PUSH
28783: LD_INT 2
28785: ARRAY
28786: PPUSH
28787: LD_STRING D6b-ArSol2-1
28789: PPUSH
28790: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28794: LD_EXP 17
28798: PPUSH
28799: LD_STRING D6b-Pow-2
28801: PPUSH
28802: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28806: LD_INT 35
28808: PPUSH
28809: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
28813: LD_EXP 75
28817: PPUSH
28818: LD_INT 78
28820: PPUSH
28821: LD_INT 15
28823: PPUSH
28824: CALL_OW 297
28828: PUSH
28829: LD_INT 2
28831: LESS
28832: IFFALSE 28806
// wait ( 0 0$1 ) ;
28834: LD_INT 35
28836: PPUSH
28837: CALL_OW 67
// DialogueOn ;
28841: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28845: LD_EXP 17
28849: PPUSH
28850: LD_STRING D6b-Pow-2a
28852: PPUSH
28853: CALL_OW 88
// DialogueOff ;
28857: CALL_OW 7
// centerPowell = 0 ;
28861: LD_ADDR_EXP 74
28865: PUSH
28866: LD_INT 0
28868: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28869: LD_EXP 75
28873: PPUSH
28874: LD_INT 105
28876: PPUSH
28877: CALL_OW 115
// end ;
28881: END
// every 0 0$1 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28882: LD_INT 105
28884: PPUSH
28885: CALL_OW 301
28889: PUSH
28890: LD_EXP 69
28894: PUSH
28895: LD_INT 3
28897: EQUAL
28898: AND
28899: IFFALSE 29740
28901: GO 28903
28903: DISABLE
28904: LD_INT 0
28906: PPUSH
28907: PPUSH
28908: PPUSH
28909: PPUSH
// begin wait ( 0 0$2 ) ;
28910: LD_INT 70
28912: PPUSH
28913: CALL_OW 67
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28917: LD_ADDR_VAR 0 2
28921: PUSH
28922: LD_INT 22
28924: PUSH
28925: LD_INT 4
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 26
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: PPUSH
28957: CALL_OW 69
28961: PUSH
28962: LD_EXP 1
28966: PUSH
28967: LD_EXP 3
28971: PUSH
28972: LD_EXP 21
28976: PUSH
28977: LD_EXP 22
28981: PUSH
28982: LD_EXP 23
28986: PUSH
28987: LD_EXP 4
28991: PUSH
28992: LD_EXP 5
28996: PUSH
28997: LD_EXP 6
29001: PUSH
29002: LD_EXP 7
29006: PUSH
29007: LD_EXP 8
29011: PUSH
29012: LD_EXP 9
29016: PUSH
29017: LD_EXP 10
29021: PUSH
29022: LD_EXP 11
29026: PUSH
29027: LD_EXP 12
29031: PUSH
29032: LD_EXP 13
29036: PUSH
29037: LD_EXP 14
29041: PUSH
29042: LD_EXP 15
29046: PUSH
29047: LD_EXP 17
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: DIFF
29072: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
29073: LD_INT 49
29075: PPUSH
29076: LD_INT 66
29078: PPUSH
29079: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
29083: LD_VAR 0 2
29087: PUSH
29088: LD_INT 1
29090: ARRAY
29091: PPUSH
29092: LD_STRING D6c-Sol3-1
29094: PPUSH
29095: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
29099: LD_EXP 1
29103: PPUSH
29104: LD_STRING D6c-JMM-1
29106: PPUSH
29107: CALL_OW 88
// if IsOk ( Cyrus ) then
29111: LD_EXP 7
29115: PPUSH
29116: CALL_OW 302
29120: IFFALSE 29134
// Say ( Cyrus , D6c-Cyrus-1 ) ;
29122: LD_EXP 7
29126: PPUSH
29127: LD_STRING D6c-Cyrus-1
29129: PPUSH
29130: CALL_OW 88
// if IsOk ( Bobby ) then
29134: LD_EXP 6
29138: PPUSH
29139: CALL_OW 302
29143: IFFALSE 29157
// Say ( Bobby , D6c-Bobby-1 ) ;
29145: LD_EXP 6
29149: PPUSH
29150: LD_STRING D6c-Bobby-1
29152: PPUSH
29153: CALL_OW 88
// if IsOk ( Cornel ) then
29157: LD_EXP 12
29161: PPUSH
29162: CALL_OW 302
29166: IFFALSE 29180
// Say ( Cornel , D6c-Corn-1 ) ;
29168: LD_EXP 12
29172: PPUSH
29173: LD_STRING D6c-Corn-1
29175: PPUSH
29176: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
29180: LD_VAR 0 2
29184: PUSH
29185: LD_INT 2
29187: ARRAY
29188: PPUSH
29189: LD_STRING D6c-Sol1-1
29191: PPUSH
29192: CALL_OW 88
// if IsOk ( Lisa ) then
29196: LD_EXP 4
29200: PPUSH
29201: CALL_OW 302
29205: IFFALSE 29219
// Say ( Lisa , D6c-Lisa-1 ) ;
29207: LD_EXP 4
29211: PPUSH
29212: LD_STRING D6c-Lisa-1
29214: PPUSH
29215: CALL_OW 88
// if IsOk ( Gary ) then
29219: LD_EXP 13
29223: PPUSH
29224: CALL_OW 302
29228: IFFALSE 29242
// Say ( Gary , D6c-Gary-1 ) ;
29230: LD_EXP 13
29234: PPUSH
29235: LD_STRING D6c-Gary-1
29237: PPUSH
29238: CALL_OW 88
// if IsOK ( Donaldson ) then
29242: LD_EXP 5
29246: PPUSH
29247: CALL_OW 302
29251: IFFALSE 29265
// Say ( Donaldson , D6c-Don-1 ) ;
29253: LD_EXP 5
29257: PPUSH
29258: LD_STRING D6c-Don-1
29260: PPUSH
29261: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
29265: LD_VAR 0 2
29269: PUSH
29270: LD_INT 3
29272: ARRAY
29273: PPUSH
29274: LD_STRING D6c-Sol2-1
29276: PPUSH
29277: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
29281: LD_INT 22
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 21
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PPUSH
29305: CALL_OW 69
29309: PPUSH
29310: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
29314: LD_INT 22
29316: PUSH
29317: LD_INT 4
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 21
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 69
29342: PPUSH
29343: CALL_OW 122
// wait ( 0 0$1 ) ;
29347: LD_INT 35
29349: PPUSH
29350: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
29354: LD_ADDR_VAR 0 3
29358: PUSH
29359: LD_INT 22
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 21
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PPUSH
29383: CALL_OW 69
29387: PUSH
29388: LD_EXP 1
29392: PUSH
29393: EMPTY
29394: LIST
29395: DIFF
29396: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
29397: LD_ADDR_VAR 0 4
29401: PUSH
29402: LD_INT 22
29404: PUSH
29405: LD_INT 4
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 21
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PPUSH
29426: CALL_OW 69
29430: ST_TO_ADDR
// for i := 1 to tmp2 do
29431: LD_ADDR_VAR 0 1
29435: PUSH
29436: DOUBLE
29437: LD_INT 1
29439: DEC
29440: ST_TO_ADDR
29441: LD_VAR 0 4
29445: PUSH
29446: FOR_TO
29447: IFFALSE 29498
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
29449: LD_VAR 0 4
29453: PUSH
29454: LD_VAR 0 1
29458: ARRAY
29459: PPUSH
29460: LD_INT 43
29462: PUSH
29463: LD_VAR 0 1
29467: PLUS
29468: PPUSH
29469: LD_INT 64
29471: PPUSH
29472: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
29476: LD_VAR 0 4
29480: PUSH
29481: LD_VAR 0 1
29485: ARRAY
29486: PPUSH
29487: LD_EXP 1
29491: PPUSH
29492: CALL_OW 179
// end ;
29496: GO 29446
29498: POP
29499: POP
// for i := 1 to tmp1 do
29500: LD_ADDR_VAR 0 1
29504: PUSH
29505: DOUBLE
29506: LD_INT 1
29508: DEC
29509: ST_TO_ADDR
29510: LD_VAR 0 3
29514: PUSH
29515: FOR_TO
29516: IFFALSE 29567
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
29518: LD_VAR 0 3
29522: PUSH
29523: LD_VAR 0 1
29527: ARRAY
29528: PPUSH
29529: LD_INT 43
29531: PUSH
29532: LD_VAR 0 1
29536: PLUS
29537: PPUSH
29538: LD_INT 65
29540: PPUSH
29541: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
29545: LD_VAR 0 3
29549: PUSH
29550: LD_VAR 0 1
29554: ARRAY
29555: PPUSH
29556: LD_EXP 1
29560: PPUSH
29561: CALL_OW 179
// end ;
29565: GO 29515
29567: POP
29568: POP
// repeat wait ( 0 0$1 ) ;
29569: LD_INT 35
29571: PPUSH
29572: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
29576: LD_EXP 1
29580: PPUSH
29581: LD_INT 48
29583: PPUSH
29584: LD_INT 68
29586: PPUSH
29587: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
29591: LD_EXP 1
29595: PPUSH
29596: LD_INT 48
29598: PPUSH
29599: LD_INT 68
29601: PPUSH
29602: CALL_OW 297
29606: PUSH
29607: LD_INT 2
29609: LESS
29610: IFFALSE 29569
// AddComTurnXY ( JMM , 47 , 65 ) ;
29612: LD_EXP 1
29616: PPUSH
29617: LD_INT 47
29619: PPUSH
29620: LD_INT 65
29622: PPUSH
29623: CALL_OW 178
// wait ( 0 0$2 ) ;
29627: LD_INT 70
29629: PPUSH
29630: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29634: LD_VAR 0 2
29638: PUSH
29639: LD_INT 1
29641: ARRAY
29642: PPUSH
29643: LD_STRING D6c-Sol3-2
29645: PPUSH
29646: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29650: LD_EXP 1
29654: PPUSH
29655: LD_STRING D6c-JMM-2
29657: PPUSH
29658: CALL_OW 88
// Video ( false ) ;
29662: LD_INT 0
29664: PPUSH
29665: CALL 6884 0 1
// centerPowell = 0 ;
29669: LD_ADDR_EXP 74
29673: PUSH
29674: LD_INT 0
29676: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29677: LD_INT 22
29679: PUSH
29680: LD_INT 4
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PPUSH
29687: CALL_OW 69
29691: PPUSH
29692: LD_INT 1
29694: PPUSH
29695: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29699: LD_STRING M2
29701: PPUSH
29702: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29706: LD_INT 4
29708: PPUSH
29709: LD_INT 4
29711: PPUSH
29712: CALL_OW 343
// timerStatus = 1 ;
29716: LD_ADDR_EXP 96
29720: PUSH
29721: LD_INT 1
29723: ST_TO_ADDR
// missionStage = 1 ;
29724: LD_ADDR_EXP 101
29728: PUSH
29729: LD_INT 1
29731: ST_TO_ADDR
// startAttacks = 1 ;
29732: LD_ADDR_EXP 72
29736: PUSH
29737: LD_INT 1
29739: ST_TO_ADDR
// end ;
29740: PPOPN 4
29742: END
// every 0 0$2 trigger centerPowell = 1 do
29743: LD_EXP 74
29747: PUSH
29748: LD_INT 1
29750: EQUAL
29751: IFFALSE 30034
29753: GO 29755
29755: DISABLE
// begin enable ;
29756: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29757: LD_EXP 17
29761: PUSH
29762: LD_EXP 75
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PPUSH
29771: LD_INT 1000
29773: PPUSH
29774: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29778: LD_INT 22
29780: PUSH
29781: LD_INT 4
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 34
29790: PUSH
29791: LD_INT 29
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 33
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: PPUSH
29813: CALL_OW 69
29817: PUSH
29818: LD_INT 0
29820: GREATER
29821: IFFALSE 29874
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29823: LD_INT 22
29825: PUSH
29826: LD_INT 4
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 34
29835: PUSH
29836: LD_INT 29
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 33
29845: PUSH
29846: LD_INT 1
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: LIST
29857: PPUSH
29858: CALL_OW 69
29862: PUSH
29863: LD_INT 1
29865: ARRAY
29866: PPUSH
29867: LD_INT 1000
29869: PPUSH
29870: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29874: LD_INT 22
29876: PUSH
29877: LD_INT 8
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 34
29886: PUSH
29887: LD_INT 29
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 33
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL_OW 69
29913: PUSH
29914: LD_INT 0
29916: GREATER
29917: IFFALSE 29970
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29919: LD_INT 22
29921: PUSH
29922: LD_INT 8
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 34
29931: PUSH
29932: LD_INT 29
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 33
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: PPUSH
29954: CALL_OW 69
29958: PUSH
29959: LD_INT 1
29961: ARRAY
29962: PPUSH
29963: LD_INT 1000
29965: PPUSH
29966: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
29970: LD_EXP 73
29974: PPUSH
29975: LD_INT 13
29977: PPUSH
29978: CALL_OW 308
29982: NOT
29983: IFFALSE 29997
// SetLives ( powellVeh , 1000 ) ;
29985: LD_EXP 73
29989: PPUSH
29990: LD_INT 1000
29992: PPUSH
29993: CALL_OW 234
// if not IsInUnit ( Powell ) then
29997: LD_EXP 17
30001: PPUSH
30002: CALL_OW 310
30006: NOT
30007: IFFALSE 30020
// CenterOnUnits ( Powell ) else
30009: LD_EXP 17
30013: PPUSH
30014: CALL_OW 85
30018: GO 30034
// CenterOnUnits ( IsInUnit ( Powell ) ) ;
30020: LD_EXP 17
30024: PPUSH
30025: CALL_OW 310
30029: PPUSH
30030: CALL_OW 85
// end ;
30034: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
30035: LD_EXP 97
30039: PUSH
30040: LD_INT 560
30042: GREATEREQUAL
30043: IFFALSE 30255
30045: GO 30047
30047: DISABLE
// begin DialogueOn ;
30048: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
30052: LD_EXP 53
30056: PPUSH
30057: LD_STRING D7-Friend-1
30059: PPUSH
30060: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
30064: LD_EXP 1
30068: PPUSH
30069: LD_STRING D7-JMM-1
30071: PPUSH
30072: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
30076: LD_EXP 53
30080: PPUSH
30081: LD_STRING D7-Friend-2
30083: PPUSH
30084: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
30088: LD_EXP 1
30092: PPUSH
30093: LD_STRING D7-JMM-2
30095: PPUSH
30096: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
30100: LD_EXP 53
30104: PPUSH
30105: LD_STRING D7-Friend-3
30107: PPUSH
30108: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
30112: LD_EXP 1
30116: PPUSH
30117: LD_STRING D7-JMM-3
30119: PPUSH
30120: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
30124: LD_EXP 53
30128: PPUSH
30129: LD_STRING D7-Friend-4
30131: PPUSH
30132: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
30136: LD_EXP 1
30140: PPUSH
30141: LD_STRING D7-JMM-4
30143: PPUSH
30144: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
30148: LD_EXP 53
30152: PPUSH
30153: LD_STRING D7-Friend-5
30155: PPUSH
30156: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
30160: LD_EXP 1
30164: PPUSH
30165: LD_STRING D7-JMM-5
30167: PPUSH
30168: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
30172: LD_EXP 53
30176: PPUSH
30177: LD_STRING D7-Friend-6
30179: PPUSH
30180: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
30184: LD_EXP 1
30188: PPUSH
30189: LD_STRING D7-JMM-6
30191: PPUSH
30192: CALL_OW 88
// DialogueOff ;
30196: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
30200: LD_EXP 36
30204: PPUSH
30205: LD_INT 15
30207: PPUSH
30208: LD_INT 0
30210: PPUSH
30211: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
30215: LD_EXP 36
30219: PPUSH
30220: LD_INT 2
30222: PPUSH
30223: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
30227: LD_EXP 36
30231: PPUSH
30232: LD_INT 2
30234: PPUSH
30235: LD_INT 78
30237: PPUSH
30238: LD_INT 12
30240: PPUSH
30241: LD_INT 3
30243: PPUSH
30244: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
30248: LD_STRING Mlegion
30250: PPUSH
30251: CALL_OW 337
// end ;
30255: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 6 , 5 ] [ Difficulty ] do
30256: LD_INT 22
30258: PUSH
30259: LD_INT 8
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 23
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: PUSH
30296: LD_INT 6
30298: PUSH
30299: LD_INT 6
30301: PUSH
30302: LD_INT 5
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: PUSH
30310: LD_OWVAR 67
30314: ARRAY
30315: LESSEQUAL
30316: IFFALSE 30630
30318: GO 30320
30320: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
30321: LD_EXP 30
30325: PPUSH
30326: LD_INT 19
30328: PPUSH
30329: LD_INT 0
30331: PPUSH
30332: CALL_OW 49
// KillUnit ( Kozlov ) ;
30336: LD_EXP 36
30340: PPUSH
30341: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
30345: LD_INT 22
30347: PUSH
30348: LD_INT 8
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 21
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 23
30367: PUSH
30368: LD_INT 3
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 30
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: PPUSH
30391: CALL_OW 69
30395: PUSH
30396: LD_INT 1
30398: ARRAY
30399: PPUSH
30400: CALL_OW 66
// DialogueOn ;
30404: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
30408: LD_EXP 1
30412: PPUSH
30413: LD_STRING D13-JMM-1
30415: PPUSH
30416: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
30420: LD_EXP 30
30424: PPUSH
30425: LD_STRING D13-Kurt-1
30427: PPUSH
30428: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
30432: LD_EXP 1
30436: PPUSH
30437: LD_STRING D13-JMM-2
30439: PPUSH
30440: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
30444: LD_EXP 30
30448: PPUSH
30449: LD_STRING D13-Kurt-2a
30451: PPUSH
30452: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
30456: LD_EXP 1
30460: PPUSH
30461: LD_STRING D13-JMM-3
30463: PPUSH
30464: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
30468: LD_EXP 30
30472: PPUSH
30473: LD_STRING D13-Kurt-3
30475: PPUSH
30476: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
30480: LD_EXP 1
30484: PPUSH
30485: LD_STRING D13-JMM-4
30487: PPUSH
30488: CALL_OW 88
// DialogueOff ;
30492: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
30496: LD_INT 22
30498: PUSH
30499: LD_INT 8
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 50
30508: PUSH
30509: EMPTY
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PPUSH
30516: CALL_OW 69
30520: PPUSH
30521: LD_INT 1
30523: PPUSH
30524: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
30528: LD_INT 22
30530: PUSH
30531: LD_INT 8
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 3
30540: PUSH
30541: LD_INT 24
30543: PUSH
30544: LD_INT 250
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PPUSH
30559: CALL_OW 69
30563: PPUSH
30564: LD_INT 0
30566: PPUSH
30567: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
30571: LD_STRING MlegionOut
30573: PPUSH
30574: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
30578: LD_INT 8
30580: PPUSH
30581: LD_INT 1
30583: PPUSH
30584: LD_INT 1
30586: PPUSH
30587: LD_INT 1
30589: PPUSH
30590: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
30594: LD_EXP 53
30598: PPUSH
30599: LD_INT 30
30601: PPUSH
30602: LD_INT 0
30604: PPUSH
30605: CALL_OW 49
// wait ( 0 0$1 ) ;
30609: LD_INT 35
30611: PPUSH
30612: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
30616: LD_EXP 53
30620: PPUSH
30621: LD_EXP 1
30625: PPUSH
30626: CALL_OW 112
// end ;
30630: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30631: LD_INT 1
30633: PPUSH
30634: LD_EXP 53
30638: PPUSH
30639: CALL_OW 292
30643: IFFALSE 30919
30645: GO 30647
30647: DISABLE
30648: LD_INT 0
30650: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30651: LD_EXP 53
30655: PPUSH
30656: CALL_OW 87
// DialogueOn ;
30660: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30664: LD_EXP 1
30668: PPUSH
30669: LD_STRING D14-JMM-1
30671: PPUSH
30672: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30676: LD_EXP 53
30680: PPUSH
30681: LD_STRING D14-Friend-1
30683: PPUSH
30684: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30688: LD_EXP 1
30692: PPUSH
30693: LD_STRING D14-JMM-2
30695: PPUSH
30696: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30700: LD_EXP 53
30704: PPUSH
30705: LD_STRING D14-Friend-2
30707: PPUSH
30708: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30712: LD_EXP 1
30716: PPUSH
30717: LD_STRING D14-JMM-3
30719: PPUSH
30720: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30724: LD_EXP 53
30728: PPUSH
30729: LD_STRING D14-Friend-3
30731: PPUSH
30732: CALL_OW 88
// DialogueOff ;
30736: CALL_OW 7
// dec = Query ( Q14 ) ;
30740: LD_ADDR_VAR 0 1
30744: PUSH
30745: LD_STRING Q14
30747: PPUSH
30748: CALL_OW 97
30752: ST_TO_ADDR
// if dec = 1 then
30753: LD_VAR 0 1
30757: PUSH
30758: LD_INT 1
30760: EQUAL
30761: IFFALSE 30795
// begin DialogueOn ;
30763: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30767: LD_EXP 1
30771: PPUSH
30772: LD_STRING D14a-JMM-1
30774: PPUSH
30775: CALL_OW 88
// DialogueOff ;
30779: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30783: LD_EXP 53
30787: PPUSH
30788: LD_INT 1
30790: PPUSH
30791: CALL_OW 235
// end ; if dec = 2 then
30795: LD_VAR 0 1
30799: PUSH
30800: LD_INT 2
30802: EQUAL
30803: IFFALSE 30837
// begin DialogueOn ;
30805: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30809: LD_EXP 1
30813: PPUSH
30814: LD_STRING D14b-JMM-1
30816: PPUSH
30817: CALL_OW 88
// DialogueOff ;
30821: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30825: LD_EXP 53
30829: PPUSH
30830: LD_INT 18
30832: PPUSH
30833: CALL_OW 113
// end ; if dec = 3 then
30837: LD_VAR 0 1
30841: PUSH
30842: LD_INT 3
30844: EQUAL
30845: IFFALSE 30919
// begin DialogueOn ;
30847: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30851: LD_EXP 1
30855: PPUSH
30856: LD_STRING D14c-JMM-1
30858: PPUSH
30859: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30863: LD_EXP 53
30867: PPUSH
30868: LD_STRING D14c-Friend-1
30870: PPUSH
30871: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30875: LD_EXP 1
30879: PPUSH
30880: LD_STRING D14c-JMM-2
30882: PPUSH
30883: CALL_OW 88
// DialogueOff ;
30887: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30891: LD_INT 8
30893: PPUSH
30894: LD_INT 1
30896: PPUSH
30897: LD_INT 2
30899: PPUSH
30900: LD_INT 1
30902: PPUSH
30903: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30907: LD_EXP 53
30911: PPUSH
30912: LD_INT 18
30914: PPUSH
30915: CALL_OW 113
// end ; end ;
30919: PPOPN 1
30921: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30922: LD_EXP 53
30926: PPUSH
30927: LD_INT 18
30929: PPUSH
30930: CALL_OW 308
30934: PUSH
30935: LD_EXP 53
30939: PPUSH
30940: CALL_OW 255
30944: PUSH
30945: LD_INT 8
30947: EQUAL
30948: AND
30949: IFFALSE 30963
30951: GO 30953
30953: DISABLE
// RemoveUnit ( LegionFriend ) ;
30954: LD_EXP 53
30958: PPUSH
30959: CALL_OW 64
30963: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
30964: LD_EXP 97
30968: PUSH
30969: LD_INT 31570
30971: GREATEREQUAL
30972: IFFALSE 31069
30974: GO 30976
30976: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
30977: LD_EXP 81
30981: PUSH
30982: LD_INT 1
30984: EQUAL
30985: PUSH
30986: LD_EXP 79
30990: PUSH
30991: EMPTY
30992: EQUAL
30993: AND
30994: IFFALSE 31021
// begin PrepareSupportFromKappa ;
30996: CALL 2416 0 0
// if burlakStatus = 1 then
31000: LD_EXP 76
31004: PUSH
31005: LD_INT 1
31007: EQUAL
31008: IFFALSE 31021
// begin wait ( 25 25$00 ) ;
31010: LD_INT 52500
31012: PPUSH
31013: CALL_OW 67
// PrepareAttackFromKappa ;
31017: CALL 5268 0 0
// end ; end ; if KappaStatus = 0 and JMMGirlStatus = 1 then
31021: LD_EXP 81
31025: PUSH
31026: LD_INT 0
31028: EQUAL
31029: PUSH
31030: LD_EXP 82
31034: PUSH
31035: LD_INT 1
31037: EQUAL
31038: AND
31039: IFFALSE 31045
// PrepareAttackFromKappa ;
31041: CALL 5268 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
31045: LD_EXP 81
31049: PUSH
31050: LD_INT 0
31052: EQUAL
31053: PUSH
31054: LD_EXP 82
31058: PUSH
31059: LD_INT 0
31061: EQUAL
31062: AND
31063: IFFALSE 31069
// PrepareAttackFromKappa ;
31065: CALL 5268 0 0
// end ;
31069: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
31070: LD_INT 1
31072: PPUSH
31073: LD_EXP 35
31077: PPUSH
31078: CALL_OW 292
31082: IFFALSE 31350
31084: GO 31086
31086: DISABLE
// begin missionStage = 2 ;
31087: LD_ADDR_EXP 101
31091: PUSH
31092: LD_INT 2
31094: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
31095: LD_EXP 35
31099: PPUSH
31100: CALL_OW 87
// DialogueOn ;
31104: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
31108: LD_EXP 1
31112: PPUSH
31113: LD_STRING D10nB-JMM-1
31115: PPUSH
31116: CALL_OW 88
// if BurlakStatus = 1 then
31120: LD_EXP 76
31124: PUSH
31125: LD_INT 1
31127: EQUAL
31128: IFFALSE 31142
// Say ( Vsevolod , D10nB-Vse-1a ) ;
31130: LD_EXP 34
31134: PPUSH
31135: LD_STRING D10nB-Vse-1a
31137: PPUSH
31138: CALL_OW 88
// if BurlakStatus = 0 then
31142: LD_EXP 76
31146: PUSH
31147: LD_INT 0
31149: EQUAL
31150: IFFALSE 31164
// Say ( Vsevolod , D10nB-Vse-1 ) ;
31152: LD_EXP 34
31156: PPUSH
31157: LD_STRING D10nB-Vse-1
31159: PPUSH
31160: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
31164: LD_EXP 1
31168: PPUSH
31169: LD_STRING D10nB-JMM-2
31171: PPUSH
31172: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
31176: LD_EXP 81
31180: PUSH
31181: LD_EXP 82
31185: PUSH
31186: LD_INT 1
31188: EQUAL
31189: AND
31190: IFFALSE 31204
// SayRadio ( Vsevolod , D10nB-Vse-5a ) ;
31192: LD_EXP 34
31196: PPUSH
31197: LD_STRING D10nB-Vse-5a
31199: PPUSH
31200: CALL_OW 94
// if KappaStatus and JMMGirlStatus = 0 then
31204: LD_EXP 81
31208: PUSH
31209: LD_EXP 82
31213: PUSH
31214: LD_INT 0
31216: EQUAL
31217: AND
31218: IFFALSE 31346
// begin if JMMGirl = 1 then
31220: LD_EXP 80
31224: PUSH
31225: LD_INT 1
31227: EQUAL
31228: IFFALSE 31278
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
31230: LD_EXP 34
31234: PPUSH
31235: LD_STRING D10nB-Vse-2
31237: PPUSH
31238: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
31242: LD_EXP 1
31246: PPUSH
31247: LD_STRING D10nB-JMM-3
31249: PPUSH
31250: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
31254: LD_EXP 34
31258: PPUSH
31259: LD_STRING D10nB-Vse-3
31261: PPUSH
31262: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
31266: LD_EXP 1
31270: PPUSH
31271: LD_STRING D10nB-JMM-4
31273: PPUSH
31274: CALL_OW 88
// end ; if JMMGirl = 2 then
31278: LD_EXP 80
31282: PUSH
31283: LD_INT 2
31285: EQUAL
31286: IFFALSE 31312
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
31288: LD_EXP 34
31292: PPUSH
31293: LD_STRING D10nB-Vse-4
31295: PPUSH
31296: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
31300: LD_EXP 1
31304: PPUSH
31305: LD_STRING D10nB-JMM-5
31307: PPUSH
31308: CALL_OW 88
// end ; if JMMGirl = 3 then
31312: LD_EXP 80
31316: PUSH
31317: LD_INT 3
31319: EQUAL
31320: IFFALSE 31346
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
31322: LD_EXP 34
31326: PPUSH
31327: LD_STRING D10nB-Vse-5
31329: PPUSH
31330: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
31334: LD_EXP 1
31338: PPUSH
31339: LD_STRING D10nB-JMM-6
31341: PPUSH
31342: CALL_OW 88
// end ; end ; DialogueOff ;
31346: CALL_OW 7
// end ;
31350: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
31351: LD_EXP 97
31355: PUSH
31356: LD_INT 63070
31358: GREATEREQUAL
31359: IFFALSE 31637
31361: GO 31363
31363: DISABLE
// begin PrepareOmegaTeam ;
31364: CALL 2805 0 0
// missionStage = 3 ;
31368: LD_ADDR_EXP 101
31372: PUSH
31373: LD_INT 3
31375: ST_TO_ADDR
// DialogueOn ;
31376: CALL_OW 6
// if StevensStatus = 1 then
31380: LD_EXP 77
31384: PUSH
31385: LD_INT 1
31387: EQUAL
31388: IFFALSE 31500
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
31390: LD_EXP 3
31394: PPUSH
31395: CALL_OW 310
31399: PPUSH
31400: CALL_OW 87
// SayRadio ( Stevens , D8-Huck-1 ) ;
31404: LD_EXP 3
31408: PPUSH
31409: LD_STRING D8-Huck-1
31411: PPUSH
31412: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
31416: LD_EXP 1
31420: PPUSH
31421: LD_STRING D8-JMM-1
31423: PPUSH
31424: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
31428: LD_EXP 3
31432: PPUSH
31433: LD_STRING D8-Huck-2
31435: PPUSH
31436: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
31440: LD_EXP 1
31444: PPUSH
31445: LD_STRING D8-JMM-2
31447: PPUSH
31448: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
31452: LD_EXP 3
31456: PPUSH
31457: LD_STRING D8-Huck-3
31459: PPUSH
31460: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
31464: LD_EXP 1
31468: PPUSH
31469: LD_STRING D8-JMM-3
31471: PPUSH
31472: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
31476: LD_EXP 3
31480: PPUSH
31481: LD_STRING D8-Huck-4
31483: PPUSH
31484: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
31488: LD_EXP 1
31492: PPUSH
31493: LD_STRING D8-JMM-4
31495: PPUSH
31496: CALL_OW 88
// end ; if StevensStatus = 0 then
31500: LD_EXP 77
31504: PUSH
31505: LD_INT 0
31507: EQUAL
31508: IFFALSE 31620
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
31510: LD_EXP 21
31514: PPUSH
31515: CALL_OW 310
31519: PPUSH
31520: CALL_OW 87
// SayRadio ( Baker , D8-Huck-1 ) ;
31524: LD_EXP 21
31528: PPUSH
31529: LD_STRING D8-Huck-1
31531: PPUSH
31532: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
31536: LD_EXP 1
31540: PPUSH
31541: LD_STRING D8-JMM-1a
31543: PPUSH
31544: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
31548: LD_EXP 21
31552: PPUSH
31553: LD_STRING D8-Huck-2
31555: PPUSH
31556: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
31560: LD_EXP 1
31564: PPUSH
31565: LD_STRING D8-JMM-2
31567: PPUSH
31568: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
31572: LD_EXP 21
31576: PPUSH
31577: LD_STRING D8-Huck-3
31579: PPUSH
31580: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
31584: LD_EXP 1
31588: PPUSH
31589: LD_STRING D8-JMM-3
31591: PPUSH
31592: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
31596: LD_EXP 21
31600: PPUSH
31601: LD_STRING D8-Huck-4
31603: PPUSH
31604: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
31608: LD_EXP 1
31612: PPUSH
31613: LD_STRING D8-JMM-4
31615: PPUSH
31616: CALL_OW 88
// end ; DialogueOff ;
31620: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
31624: LD_INT 25
31626: PPUSH
31627: LD_INT 1
31629: PPUSH
31630: LD_INT 1
31632: PPUSH
31633: CALL_OW 322
// end ;
31637: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
31638: LD_EXP 97
31642: PUSH
31643: LD_INT 73570
31645: GREATEREQUAL
31646: IFFALSE 31996
31648: GO 31650
31650: DISABLE
31651: LD_INT 0
31653: PPUSH
// begin missionStage = 4 ;
31654: LD_ADDR_EXP 101
31658: PUSH
31659: LD_INT 4
31661: ST_TO_ADDR
// DialogueOn ;
31662: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31666: LD_EXP 28
31670: PPUSH
31671: LD_STRING D9-Roth-1
31673: PPUSH
31674: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31678: LD_EXP 1
31682: PPUSH
31683: LD_STRING D9-JMM-1
31685: PPUSH
31686: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31690: LD_EXP 28
31694: PPUSH
31695: LD_STRING D9-Roth-2
31697: PPUSH
31698: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31702: LD_EXP 28
31706: PPUSH
31707: LD_STRING D9-Roth-2a
31709: PPUSH
31710: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31714: LD_EXP 26
31718: PPUSH
31719: LD_STRING D9-Pla-2
31721: PPUSH
31722: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31726: LD_EXP 28
31730: PPUSH
31731: LD_STRING D9-Roth-3
31733: PPUSH
31734: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31738: LD_EXP 26
31742: PPUSH
31743: LD_STRING D9-Pla-3
31745: PPUSH
31746: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31750: LD_EXP 28
31754: PPUSH
31755: LD_STRING D9-Roth-4
31757: PPUSH
31758: CALL_OW 94
// dec = Query ( Q9 ) ;
31762: LD_ADDR_VAR 0 1
31766: PUSH
31767: LD_STRING Q9
31769: PPUSH
31770: CALL_OW 97
31774: ST_TO_ADDR
// if dec = 1 then
31775: LD_VAR 0 1
31779: PUSH
31780: LD_INT 1
31782: EQUAL
31783: IFFALSE 31797
// SayRadio ( Roth , D9a-Roth-1 ) ;
31785: LD_EXP 28
31789: PPUSH
31790: LD_STRING D9a-Roth-1
31792: PPUSH
31793: CALL_OW 94
// if dec = 2 then
31797: LD_VAR 0 1
31801: PUSH
31802: LD_INT 2
31804: EQUAL
31805: IFFALSE 31831
// begin Say ( JMM , D9b-JMM-1 ) ;
31807: LD_EXP 1
31811: PPUSH
31812: LD_STRING D9b-JMM-1
31814: PPUSH
31815: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31819: LD_EXP 28
31823: PPUSH
31824: LD_STRING D9b-Roth-1
31826: PPUSH
31827: CALL_OW 94
// end ; if dec = 3 then
31831: LD_VAR 0 1
31835: PUSH
31836: LD_INT 3
31838: EQUAL
31839: IFFALSE 31901
// begin Say ( JMM , D9c-JMM-1 ) ;
31841: LD_EXP 1
31845: PPUSH
31846: LD_STRING D9c-JMM-1
31848: PPUSH
31849: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31853: LD_EXP 28
31857: PPUSH
31858: LD_STRING D9c-Roth-1
31860: PPUSH
31861: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31865: LD_EXP 1
31869: PPUSH
31870: LD_STRING D9c-JMM-2
31872: PPUSH
31873: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31877: LD_EXP 28
31881: PPUSH
31882: LD_STRING D9c-Roth-2
31884: PPUSH
31885: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31889: LD_EXP 1
31893: PPUSH
31894: LD_STRING D9c-JMM-3
31896: PPUSH
31897: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31901: LD_EXP 28
31905: PPUSH
31906: LD_STRING D9c-Roth-3
31908: PPUSH
31909: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31913: LD_EXP 28
31917: PPUSH
31918: LD_STRING D9cont-Roth-1
31920: PPUSH
31921: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31925: LD_EXP 1
31929: PPUSH
31930: LD_STRING D9cont-JMM-1
31932: PPUSH
31933: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
31937: LD_EXP 28
31941: PPUSH
31942: LD_STRING D9cont-Roth-2
31944: PPUSH
31945: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
31949: LD_EXP 1
31953: PPUSH
31954: LD_STRING D9cont-JMM-2
31956: PPUSH
31957: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
31961: LD_EXP 28
31965: PPUSH
31966: LD_STRING D9cont-Roth-3
31968: PPUSH
31969: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
31973: LD_EXP 1
31977: PPUSH
31978: LD_STRING D9cont-JMM-3
31980: PPUSH
31981: CALL_OW 88
// DialogueOff ;
31985: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
31989: LD_STRING M3
31991: PPUSH
31992: CALL_OW 337
// end ;
31996: PPOPN 1
31998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
31999: LD_INT 22
32001: PUSH
32002: LD_INT 7
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 21
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PPUSH
32023: CALL_OW 69
32027: PUSH
32028: LD_INT 20
32030: PUSH
32031: LD_INT 18
32033: PUSH
32034: LD_INT 15
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: PUSH
32042: LD_OWVAR 67
32046: ARRAY
32047: LESSEQUAL
32048: IFFALSE 32534
32050: GO 32052
32052: DISABLE
32053: LD_INT 0
32055: PPUSH
32056: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
32057: LD_ADDR_VAR 0 1
32061: PUSH
32062: LD_INT 22
32064: PUSH
32065: LD_INT 7
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 21
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 23
32084: PUSH
32085: LD_INT 3
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 24
32094: PUSH
32095: LD_INT 900
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: PPUSH
32108: CALL_OW 69
32112: PUSH
32113: FOR_IN
32114: IFFALSE 32145
// if GetSex ( i ) = sex_male then
32116: LD_VAR 0 1
32120: PPUSH
32121: CALL_OW 258
32125: PUSH
32126: LD_INT 1
32128: EQUAL
32129: IFFALSE 32143
// begin tmp = i ;
32131: LD_ADDR_VAR 0 2
32135: PUSH
32136: LD_VAR 0 1
32140: ST_TO_ADDR
// break ;
32141: GO 32145
// end ;
32143: GO 32113
32145: POP
32146: POP
// if tmp = 0 then
32147: LD_VAR 0 2
32151: PUSH
32152: LD_INT 0
32154: EQUAL
32155: IFFALSE 32209
// begin uc_side = 7 ;
32157: LD_ADDR_OWVAR 20
32161: PUSH
32162: LD_INT 7
32164: ST_TO_ADDR
// uc_nation = 3 ;
32165: LD_ADDR_OWVAR 21
32169: PUSH
32170: LD_INT 3
32172: ST_TO_ADDR
// hc_name =  ;
32173: LD_ADDR_OWVAR 26
32177: PUSH
32178: LD_STRING 
32180: ST_TO_ADDR
// hc_gallery =  ;
32181: LD_ADDR_OWVAR 33
32185: PUSH
32186: LD_STRING 
32188: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
32189: LD_INT 1
32191: PPUSH
32192: LD_INT 10
32194: PPUSH
32195: CALL_OW 381
// tmp = CreateHuman ;
32199: LD_ADDR_VAR 0 2
32203: PUSH
32204: CALL_OW 44
32208: ST_TO_ADDR
// end ; AllianceAI = 0 ;
32209: LD_ADDR_EXP 85
32213: PUSH
32214: LD_INT 0
32216: ST_TO_ADDR
// AllianceEscape = 1 ;
32217: LD_ADDR_EXP 91
32221: PUSH
32222: LD_INT 1
32224: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
32225: LD_INT 7
32227: PPUSH
32228: LD_INT 1
32230: PPUSH
32231: LD_INT 1
32233: PPUSH
32234: LD_INT 1
32236: PPUSH
32237: CALL_OW 80
// DialogueOn ;
32241: CALL_OW 6
// if IsOK ( Roth ) then
32245: LD_EXP 28
32249: PPUSH
32250: CALL_OW 302
32254: IFFALSE 32268
// Say ( JMM , DAb-JMM-1 ) ;
32256: LD_EXP 1
32260: PPUSH
32261: LD_STRING DAb-JMM-1
32263: PPUSH
32264: CALL_OW 88
// if IsOK ( Roth ) then
32268: LD_EXP 28
32272: PPUSH
32273: CALL_OW 302
32277: IFFALSE 32293
// Say ( Roth , DSurrenderAlliance-Roth-1 ) else
32279: LD_EXP 28
32283: PPUSH
32284: LD_STRING DSurrenderAlliance-Roth-1
32286: PPUSH
32287: CALL_OW 88
32291: GO 32305
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
32293: LD_VAR 0 2
32297: PPUSH
32298: LD_STRING DSurrenderAlliance-Sci1-1
32300: PPUSH
32301: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
32305: LD_INT 23
32307: PPUSH
32308: LD_INT 22
32310: PUSH
32311: LD_INT 4
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PPUSH
32318: CALL_OW 70
32322: PUSH
32323: LD_INT 1
32325: EQUAL
32326: IFFALSE 32340
// Say ( JMM , DAb-JMM-1a ) ;
32328: LD_EXP 1
32332: PPUSH
32333: LD_STRING DAb-JMM-1a
32335: PPUSH
32336: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
32340: LD_INT 23
32342: PPUSH
32343: LD_INT 22
32345: PUSH
32346: LD_INT 4
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PPUSH
32353: CALL_OW 70
32357: PUSH
32358: LD_INT 1
32360: GREATER
32361: IFFALSE 32375
// Say ( JMM , DAb-JMM-1b ) ;
32363: LD_EXP 1
32367: PPUSH
32368: LD_STRING DAb-JMM-1b
32370: PPUSH
32371: CALL_OW 88
// DialogueOff ;
32375: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
32379: LD_INT 23
32381: PPUSH
32382: LD_INT 22
32384: PUSH
32385: LD_INT 4
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PPUSH
32392: CALL_OW 70
32396: PUSH
32397: LD_INT 0
32399: GREATER
32400: IFFALSE 32427
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
32402: LD_INT 23
32404: PPUSH
32405: LD_INT 22
32407: PUSH
32408: LD_INT 4
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PPUSH
32415: CALL_OW 70
32419: PPUSH
32420: LD_INT 1
32422: PPUSH
32423: CALL_OW 235
// if IsDying ( Roth ) then
32427: LD_EXP 28
32431: PPUSH
32432: CALL_OW 303
32436: IFFALSE 32458
// begin RothStatus = 0 ;
32438: LD_ADDR_EXP 92
32442: PUSH
32443: LD_INT 0
32445: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
32446: LD_EXP 28
32450: PPUSH
32451: LD_INT 0
32453: PPUSH
32454: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
32458: LD_INT 22
32460: PUSH
32461: LD_INT 7
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 21
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PPUSH
32482: CALL_OW 69
32486: PPUSH
32487: CALL_OW 122
// wait ( 0 0$1 ) ;
32491: LD_INT 35
32493: PPUSH
32494: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
32498: LD_INT 22
32500: PUSH
32501: LD_INT 7
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 21
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PPUSH
32522: CALL_OW 69
32526: PPUSH
32527: LD_INT 28
32529: PPUSH
32530: CALL_OW 173
// end ;
32534: PPOPN 2
32536: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
32537: LD_EXP 91
32541: PUSH
32542: LD_INT 1
32544: EQUAL
32545: PUSH
32546: LD_INT 28
32548: PPUSH
32549: LD_INT 22
32551: PUSH
32552: LD_INT 7
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 21
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PPUSH
32573: CALL_OW 70
32577: AND
32578: IFFALSE 32640
32580: GO 32582
32582: DISABLE
32583: LD_INT 0
32585: PPUSH
// begin enable ;
32586: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
32587: LD_ADDR_VAR 0 1
32591: PUSH
32592: LD_INT 28
32594: PPUSH
32595: LD_INT 22
32597: PUSH
32598: LD_INT 7
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 21
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PPUSH
32619: CALL_OW 70
32623: PUSH
32624: FOR_IN
32625: IFFALSE 32638
// RemoveUnit ( i ) ;
32627: LD_VAR 0 1
32631: PPUSH
32632: CALL_OW 64
32636: GO 32624
32638: POP
32639: POP
// end ;
32640: PPOPN 1
32642: END
// every 0 0$55 trigger ( FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 ) and IsOK ( Roth ) and IsOk ( AllLabR1 ) and IsOk ( AllLabR2 ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
32643: LD_INT 33
32645: PPUSH
32646: LD_INT 22
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 21
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PPUSH
32670: CALL_OW 70
32674: PUSH
32675: LD_INT 0
32677: GREATER
32678: PUSH
32679: LD_INT 33
32681: PPUSH
32682: LD_INT 22
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 21
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 33
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: LD_INT 58
32717: PUSH
32718: EMPTY
32719: LIST
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: PPUSH
32731: CALL_OW 70
32735: PUSH
32736: LD_INT 0
32738: GREATER
32739: OR
32740: PUSH
32741: LD_EXP 28
32745: PPUSH
32746: CALL_OW 302
32750: AND
32751: PUSH
32752: LD_INT 39
32754: PPUSH
32755: CALL_OW 302
32759: AND
32760: PUSH
32761: LD_INT 133
32763: PPUSH
32764: CALL_OW 302
32768: AND
32769: PUSH
32770: LD_EXP 85
32774: PUSH
32775: LD_INT 1
32777: EQUAL
32778: AND
32779: IFFALSE 35178
32781: GO 32783
32783: DISABLE
32784: LD_INT 0
32786: PPUSH
32787: PPUSH
32788: PPUSH
// begin enable ;
32789: ENABLE
// if not Prob ( [ 50 , 60 , 70 ] [ Difficulty ] ) then
32790: LD_INT 50
32792: PUSH
32793: LD_INT 60
32795: PUSH
32796: LD_INT 70
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: PUSH
32804: LD_OWVAR 67
32808: ARRAY
32809: PPUSH
32810: CALL_OW 13
32814: NOT
32815: IFFALSE 32819
// exit ;
32817: GO 35178
// tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32819: LD_ADDR_VAR 0 1
32823: PUSH
32824: LD_INT 33
32826: PPUSH
32827: LD_INT 22
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: LD_INT 21
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 33
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: LIST
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PPUSH
32869: CALL_OW 70
32873: PUSH
32874: LD_INT 1
32876: ARRAY
32877: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32878: LD_ADDR_VAR 0 2
32882: PUSH
32883: LD_EXP 1
32887: PUSH
32888: LD_EXP 2
32892: PUSH
32893: LD_EXP 3
32897: PUSH
32898: LD_EXP 21
32902: PUSH
32903: LD_EXP 4
32907: PUSH
32908: LD_EXP 5
32912: PUSH
32913: LD_EXP 6
32917: PUSH
32918: LD_EXP 7
32922: PUSH
32923: LD_EXP 8
32927: PUSH
32928: LD_EXP 9
32932: PUSH
32933: LD_EXP 10
32937: PUSH
32938: LD_EXP 11
32942: PUSH
32943: LD_EXP 12
32947: PUSH
32948: LD_EXP 13
32952: PUSH
32953: LD_EXP 14
32957: PUSH
32958: LD_EXP 15
32962: PUSH
32963: LD_EXP 16
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: ST_TO_ADDR
// InGameOn ;
32987: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
32991: LD_INT 1
32993: PPUSH
32994: LD_INT 7
32996: PPUSH
32997: LD_INT 1
32999: PPUSH
33000: LD_INT 1
33002: PPUSH
33003: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
33007: LD_VAR 0 1
33011: PPUSH
33012: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
33016: LD_VAR 0 1
33020: PPUSH
33021: CALL_OW 247
33025: PUSH
33026: LD_INT 2
33028: EQUAL
33029: IFFALSE 33050
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
33031: LD_ADDR_VAR 0 1
33035: PUSH
33036: LD_VAR 0 1
33040: PPUSH
33041: CALL_OW 313
33045: PUSH
33046: LD_INT 1
33048: ARRAY
33049: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
33050: LD_VAR 0 1
33054: PPUSH
33055: CALL_OW 121
// wait ( 0 0$1 ) ;
33059: LD_INT 35
33061: PPUSH
33062: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
33066: LD_VAR 0 1
33070: PPUSH
33071: LD_INT 248
33073: PPUSH
33074: LD_INT 186
33076: PPUSH
33077: LD_INT 4
33079: PPUSH
33080: LD_INT 1
33082: PPUSH
33083: CALL_OW 483
// wait ( 0 0$2 ) ;
33087: LD_INT 70
33089: PPUSH
33090: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
33094: LD_VAR 0 1
33098: PPUSH
33099: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
33103: LD_VAR 0 1
33107: PPUSH
33108: LD_EXP 28
33112: PPUSH
33113: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
33117: LD_EXP 28
33121: PUSH
33122: LD_EXP 48
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PPUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 119
// if tpUnit = JMM then
33140: LD_VAR 0 1
33144: PUSH
33145: LD_EXP 1
33149: EQUAL
33150: IFFALSE 33164
// Say ( JMM , DA1-JMM-1 ) ;
33152: LD_EXP 1
33156: PPUSH
33157: LD_STRING DA1-JMM-1
33159: PPUSH
33160: CALL_OW 88
// if tpUnit = Joan then
33164: LD_VAR 0 1
33168: PUSH
33169: LD_EXP 2
33173: EQUAL
33174: IFFALSE 33188
// Say ( Joan , DA1-Joan-1 ) ;
33176: LD_EXP 2
33180: PPUSH
33181: LD_STRING DA1-Joan-1
33183: PPUSH
33184: CALL_OW 88
// if tpUnit = Lisa then
33188: LD_VAR 0 1
33192: PUSH
33193: LD_EXP 4
33197: EQUAL
33198: IFFALSE 33212
// Say ( Lisa , DA1-Lisa-1 ) ;
33200: LD_EXP 4
33204: PPUSH
33205: LD_STRING DA1-Lisa-1
33207: PPUSH
33208: CALL_OW 88
// if tpUnit = Donaldson then
33212: LD_VAR 0 1
33216: PUSH
33217: LD_EXP 5
33221: EQUAL
33222: IFFALSE 33236
// Say ( Donaldson , DA1-Don-1 ) ;
33224: LD_EXP 5
33228: PPUSH
33229: LD_STRING DA1-Don-1
33231: PPUSH
33232: CALL_OW 88
// if tpUnit = Cornel then
33236: LD_VAR 0 1
33240: PUSH
33241: LD_EXP 12
33245: EQUAL
33246: IFFALSE 33260
// Say ( Cornel , DA1-Corn-1 ) ;
33248: LD_EXP 12
33252: PPUSH
33253: LD_STRING DA1-Corn-1
33255: PPUSH
33256: CALL_OW 88
// if tpUnit = Denis then
33260: LD_VAR 0 1
33264: PUSH
33265: LD_EXP 8
33269: EQUAL
33270: IFFALSE 33284
// Say ( Denis , DA1-Den-1 ) ;
33272: LD_EXP 8
33276: PPUSH
33277: LD_STRING DA1-Den-1
33279: PPUSH
33280: CALL_OW 88
// if tpUnit = Bobby then
33284: LD_VAR 0 1
33288: PUSH
33289: LD_EXP 6
33293: EQUAL
33294: IFFALSE 33308
// Say ( Bobby , DA1-Bobby-1 ) ;
33296: LD_EXP 6
33300: PPUSH
33301: LD_STRING DA1-Bobby-1
33303: PPUSH
33304: CALL_OW 88
// if tpUnit = Gladstone then
33308: LD_VAR 0 1
33312: PUSH
33313: LD_EXP 10
33317: EQUAL
33318: IFFALSE 33332
// Say ( Gladstone , DA1-Glad-1 ) ;
33320: LD_EXP 10
33324: PPUSH
33325: LD_STRING DA1-Glad-1
33327: PPUSH
33328: CALL_OW 88
// if tpUnit = Cyrus then
33332: LD_VAR 0 1
33336: PUSH
33337: LD_EXP 7
33341: EQUAL
33342: IFFALSE 33356
// Say ( Cyrus , DA1-Cyrus-1 ) ;
33344: LD_EXP 7
33348: PPUSH
33349: LD_STRING DA1-Cyrus-1
33351: PPUSH
33352: CALL_OW 88
// if tpUnit = Stevens then
33356: LD_VAR 0 1
33360: PUSH
33361: LD_EXP 3
33365: EQUAL
33366: IFFALSE 33380
// Say ( Stevens , DA1-Huck-1 ) ;
33368: LD_EXP 3
33372: PPUSH
33373: LD_STRING DA1-Huck-1
33375: PPUSH
33376: CALL_OW 88
// if tpUnit = Baker then
33380: LD_VAR 0 1
33384: PUSH
33385: LD_EXP 21
33389: EQUAL
33390: IFFALSE 33404
// Say ( Baker , DA1-Huck-1 ) ;
33392: LD_EXP 21
33396: PPUSH
33397: LD_STRING DA1-Huck-1
33399: PPUSH
33400: CALL_OW 88
// if tpUnit = Brown then
33404: LD_VAR 0 1
33408: PUSH
33409: LD_EXP 9
33413: EQUAL
33414: IFFALSE 33428
// Say ( Brown , DA1-Brown-1 ) ;
33416: LD_EXP 9
33420: PPUSH
33421: LD_STRING DA1-Brown-1
33423: PPUSH
33424: CALL_OW 88
// if tpUnit = Gary then
33428: LD_VAR 0 1
33432: PUSH
33433: LD_EXP 13
33437: EQUAL
33438: IFFALSE 33452
// Say ( Gary , DA1-Gary-1 ) ;
33440: LD_EXP 13
33444: PPUSH
33445: LD_STRING DA1-Gary-1
33447: PPUSH
33448: CALL_OW 88
// if tpUnit = Connie then
33452: LD_VAR 0 1
33456: PUSH
33457: LD_EXP 16
33461: EQUAL
33462: IFFALSE 33476
// Say ( Connie , DA1-Con-1 ) ;
33464: LD_EXP 16
33468: PPUSH
33469: LD_STRING DA1-Con-1
33471: PPUSH
33472: CALL_OW 88
// if tpUnit = Kurt then
33476: LD_VAR 0 1
33480: PUSH
33481: LD_EXP 30
33485: EQUAL
33486: IFFALSE 33500
// Say ( Kurt , DA1-Kurt-1 ) ;
33488: LD_EXP 30
33492: PPUSH
33493: LD_STRING DA1-Kurt-1
33495: PPUSH
33496: CALL_OW 88
// if tpUnit = Kikuchi then
33500: LD_VAR 0 1
33504: PUSH
33505: LD_EXP 15
33509: EQUAL
33510: IFFALSE 33524
// Say ( Kikuchi , DA1-Yam-1 ) ;
33512: LD_EXP 15
33516: PPUSH
33517: LD_STRING DA1-Yam-1
33519: PPUSH
33520: CALL_OW 88
// if tpUnit = Frank then
33524: LD_VAR 0 1
33528: PUSH
33529: LD_EXP 14
33533: EQUAL
33534: IFFALSE 33548
// Say ( Frank , DA1-Frank-1 ) ;
33536: LD_EXP 14
33540: PPUSH
33541: LD_STRING DA1-Frank-1
33543: PPUSH
33544: CALL_OW 88
// if not tpUnit in heroes then
33548: LD_VAR 0 1
33552: PUSH
33553: LD_VAR 0 2
33557: IN
33558: NOT
33559: IFFALSE 33615
// begin if GetSex ( tpUnit ) = 1 then
33561: LD_VAR 0 1
33565: PPUSH
33566: CALL_OW 258
33570: PUSH
33571: LD_INT 1
33573: EQUAL
33574: IFFALSE 33588
// Say ( tpUnit , DA1-Sol1-1 ) ;
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_STRING DA1-Sol1-1
33583: PPUSH
33584: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
33588: LD_VAR 0 1
33592: PPUSH
33593: CALL_OW 258
33597: PUSH
33598: LD_INT 2
33600: EQUAL
33601: IFFALSE 33615
// Say ( tpUnit , DA1-FSol1-1 ) ;
33603: LD_VAR 0 1
33607: PPUSH
33608: LD_STRING DA1-FSol1-1
33610: PPUSH
33611: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
33615: LD_EXP 28
33619: PPUSH
33620: LD_STRING DA-Roth-1
33622: PPUSH
33623: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
33627: LD_EXP 48
33631: PPUSH
33632: LD_STRING DA-Sim-1
33634: PPUSH
33635: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
33639: LD_EXP 28
33643: PPUSH
33644: LD_STRING DA-Roth-2
33646: PPUSH
33647: CALL_OW 88
// if tpUnit = JMM then
33651: LD_VAR 0 1
33655: PUSH
33656: LD_EXP 1
33660: EQUAL
33661: IFFALSE 33694
// begin Say ( JMM , DA1-JMM-1a ) ;
33663: LD_EXP 1
33667: PPUSH
33668: LD_STRING DA1-JMM-1a
33670: PPUSH
33671: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33675: LD_EXP 28
33679: PPUSH
33680: LD_STRING DA-Roth-3a
33682: PPUSH
33683: CALL_OW 88
// YouLost ( JMMCaptured ) ;
33687: LD_STRING JMMCaptured
33689: PPUSH
33690: CALL_OW 104
// end ; if tpUnit = Joan then
33694: LD_VAR 0 1
33698: PUSH
33699: LD_EXP 2
33703: EQUAL
33704: IFFALSE 33766
// begin Say ( Joan , DA1-Joan-1a ) ;
33706: LD_EXP 2
33710: PPUSH
33711: LD_STRING DA1-Joan-1a
33713: PPUSH
33714: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33718: LD_EXP 28
33722: PPUSH
33723: LD_STRING DA-Roth-3a
33725: PPUSH
33726: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33730: LD_EXP 2
33734: PPUSH
33735: LD_INT 4
33737: PPUSH
33738: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33742: LD_EXP 2
33746: PPUSH
33747: LD_INT 257
33749: PPUSH
33750: LD_INT 198
33752: PPUSH
33753: CALL_OW 111
// AddComHold ( Joan ) ;
33757: LD_EXP 2
33761: PPUSH
33762: CALL_OW 200
// end ; if tpUnit = Donaldson then
33766: LD_VAR 0 1
33770: PUSH
33771: LD_EXP 5
33775: EQUAL
33776: IFFALSE 33829
// begin Say ( Donaldson , DA1-Don-1a ) ;
33778: LD_EXP 5
33782: PPUSH
33783: LD_STRING DA1-Don-1a
33785: PPUSH
33786: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33790: LD_EXP 28
33794: PPUSH
33795: LD_STRING DA-Roth-3
33797: PPUSH
33798: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33802: LD_EXP 5
33806: PPUSH
33807: LD_INT 7
33809: PPUSH
33810: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33814: LD_EXP 5
33818: PPUSH
33819: LD_INT 240
33821: PPUSH
33822: LD_INT 188
33824: PPUSH
33825: CALL_OW 111
// end ; if tpUnit = Cornel then
33829: LD_VAR 0 1
33833: PUSH
33834: LD_EXP 12
33838: EQUAL
33839: IFFALSE 33901
// begin Say ( Cornel , DA1-Corn-1a ) ;
33841: LD_EXP 12
33845: PPUSH
33846: LD_STRING DA1-Corn-1a
33848: PPUSH
33849: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33853: LD_EXP 28
33857: PPUSH
33858: LD_STRING DA-Roth-3a
33860: PPUSH
33861: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33865: LD_EXP 12
33869: PPUSH
33870: LD_INT 4
33872: PPUSH
33873: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33877: LD_EXP 12
33881: PPUSH
33882: LD_INT 257
33884: PPUSH
33885: LD_INT 198
33887: PPUSH
33888: CALL_OW 111
// AddComHold ( Cornel ) ;
33892: LD_EXP 12
33896: PPUSH
33897: CALL_OW 200
// end ; if tpUnit = Denis then
33901: LD_VAR 0 1
33905: PUSH
33906: LD_EXP 8
33910: EQUAL
33911: IFFALSE 33964
// begin Say ( Denis , DA1-Den-1a ) ;
33913: LD_EXP 8
33917: PPUSH
33918: LD_STRING DA1-Den-1a
33920: PPUSH
33921: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33925: LD_EXP 28
33929: PPUSH
33930: LD_STRING DA-Roth-3
33932: PPUSH
33933: CALL_OW 88
// SetSide ( Denis , 7 ) ;
33937: LD_EXP 8
33941: PPUSH
33942: LD_INT 7
33944: PPUSH
33945: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
33949: LD_EXP 8
33953: PPUSH
33954: LD_INT 240
33956: PPUSH
33957: LD_INT 188
33959: PPUSH
33960: CALL_OW 111
// end ; if tpUnit = Bobby then
33964: LD_VAR 0 1
33968: PUSH
33969: LD_EXP 6
33973: EQUAL
33974: IFFALSE 34027
// begin Say ( Joan , DA1-Bobby-1a ) ;
33976: LD_EXP 2
33980: PPUSH
33981: LD_STRING DA1-Bobby-1a
33983: PPUSH
33984: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33988: LD_EXP 28
33992: PPUSH
33993: LD_STRING DA-Roth-3
33995: PPUSH
33996: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
34000: LD_EXP 6
34004: PPUSH
34005: LD_INT 7
34007: PPUSH
34008: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
34012: LD_EXP 6
34016: PPUSH
34017: LD_INT 240
34019: PPUSH
34020: LD_INT 188
34022: PPUSH
34023: CALL_OW 111
// end ; if tpUnit = Gladstone then
34027: LD_VAR 0 1
34031: PUSH
34032: LD_EXP 10
34036: EQUAL
34037: IFFALSE 34099
// begin Say ( Gladstone , DA1-Glad-1a ) ;
34039: LD_EXP 10
34043: PPUSH
34044: LD_STRING DA1-Glad-1a
34046: PPUSH
34047: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34051: LD_EXP 28
34055: PPUSH
34056: LD_STRING DA-Roth-3a
34058: PPUSH
34059: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
34063: LD_EXP 10
34067: PPUSH
34068: LD_INT 4
34070: PPUSH
34071: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
34075: LD_EXP 10
34079: PPUSH
34080: LD_INT 257
34082: PPUSH
34083: LD_INT 198
34085: PPUSH
34086: CALL_OW 111
// AddComHold ( Gladstone ) ;
34090: LD_EXP 10
34094: PPUSH
34095: CALL_OW 200
// end ; if tpUnit = Cyrus then
34099: LD_VAR 0 1
34103: PUSH
34104: LD_EXP 7
34108: EQUAL
34109: IFFALSE 34171
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
34111: LD_EXP 7
34115: PPUSH
34116: LD_STRING DA1-Cyrus-1a
34118: PPUSH
34119: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34123: LD_EXP 28
34127: PPUSH
34128: LD_STRING DA-Roth-3a
34130: PPUSH
34131: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
34135: LD_EXP 7
34139: PPUSH
34140: LD_INT 4
34142: PPUSH
34143: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
34147: LD_EXP 7
34151: PPUSH
34152: LD_INT 257
34154: PPUSH
34155: LD_INT 198
34157: PPUSH
34158: CALL_OW 111
// AddComHold ( Cyrus ) ;
34162: LD_EXP 7
34166: PPUSH
34167: CALL_OW 200
// end ; if tpUnit = Stevens then
34171: LD_VAR 0 1
34175: PUSH
34176: LD_EXP 3
34180: EQUAL
34181: IFFALSE 34234
// begin Say ( Stevens , DA1-Huck-1a ) ;
34183: LD_EXP 3
34187: PPUSH
34188: LD_STRING DA1-Huck-1a
34190: PPUSH
34191: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34195: LD_EXP 28
34199: PPUSH
34200: LD_STRING DA-Roth-3
34202: PPUSH
34203: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
34207: LD_EXP 3
34211: PPUSH
34212: LD_INT 7
34214: PPUSH
34215: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
34219: LD_EXP 3
34223: PPUSH
34224: LD_INT 240
34226: PPUSH
34227: LD_INT 188
34229: PPUSH
34230: CALL_OW 111
// end ; if tpUnit = Baker then
34234: LD_VAR 0 1
34238: PUSH
34239: LD_EXP 21
34243: EQUAL
34244: IFFALSE 34297
// begin Say ( Baker , DA1-Huck-1a ) ;
34246: LD_EXP 21
34250: PPUSH
34251: LD_STRING DA1-Huck-1a
34253: PPUSH
34254: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34258: LD_EXP 28
34262: PPUSH
34263: LD_STRING DA-Roth-3
34265: PPUSH
34266: CALL_OW 88
// SetSide ( Baker , 7 ) ;
34270: LD_EXP 21
34274: PPUSH
34275: LD_INT 7
34277: PPUSH
34278: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
34282: LD_EXP 21
34286: PPUSH
34287: LD_INT 240
34289: PPUSH
34290: LD_INT 188
34292: PPUSH
34293: CALL_OW 111
// end ; if tpUnit = Brown then
34297: LD_VAR 0 1
34301: PUSH
34302: LD_EXP 9
34306: EQUAL
34307: IFFALSE 34360
// begin Say ( Cyrus , DA1-Brown-1a ) ;
34309: LD_EXP 7
34313: PPUSH
34314: LD_STRING DA1-Brown-1a
34316: PPUSH
34317: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34321: LD_EXP 28
34325: PPUSH
34326: LD_STRING DA-Roth-3
34328: PPUSH
34329: CALL_OW 88
// SetSide ( Brown , 7 ) ;
34333: LD_EXP 9
34337: PPUSH
34338: LD_INT 7
34340: PPUSH
34341: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
34345: LD_EXP 9
34349: PPUSH
34350: LD_INT 240
34352: PPUSH
34353: LD_INT 188
34355: PPUSH
34356: CALL_OW 111
// end ; if tpUnit = Gary then
34360: LD_VAR 0 1
34364: PUSH
34365: LD_EXP 13
34369: EQUAL
34370: IFFALSE 34432
// begin Say ( Gary , DA1-Gary-1a ) ;
34372: LD_EXP 13
34376: PPUSH
34377: LD_STRING DA1-Gary-1a
34379: PPUSH
34380: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34384: LD_EXP 28
34388: PPUSH
34389: LD_STRING DA-Roth-3a
34391: PPUSH
34392: CALL_OW 88
// SetSide ( Gary , 4 ) ;
34396: LD_EXP 13
34400: PPUSH
34401: LD_INT 4
34403: PPUSH
34404: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
34408: LD_EXP 13
34412: PPUSH
34413: LD_INT 257
34415: PPUSH
34416: LD_INT 198
34418: PPUSH
34419: CALL_OW 111
// AddComHold ( Gary ) ;
34423: LD_EXP 13
34427: PPUSH
34428: CALL_OW 200
// end ; if tpUnit = Cyrus then
34432: LD_VAR 0 1
34436: PUSH
34437: LD_EXP 7
34441: EQUAL
34442: IFFALSE 34504
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
34444: LD_EXP 7
34448: PPUSH
34449: LD_STRING DA1-Cyrus-1a
34451: PPUSH
34452: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34456: LD_EXP 28
34460: PPUSH
34461: LD_STRING DA-Roth-3a
34463: PPUSH
34464: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
34468: LD_EXP 7
34472: PPUSH
34473: LD_INT 4
34475: PPUSH
34476: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
34480: LD_EXP 7
34484: PPUSH
34485: LD_INT 257
34487: PPUSH
34488: LD_INT 198
34490: PPUSH
34491: CALL_OW 111
// AddComHold ( Cyrus ) ;
34495: LD_EXP 7
34499: PPUSH
34500: CALL_OW 200
// end ; if tpUnit = Connie then
34504: LD_VAR 0 1
34508: PUSH
34509: LD_EXP 16
34513: EQUAL
34514: IFFALSE 34576
// begin Say ( Connie , DA1-Con-1a ) ;
34516: LD_EXP 16
34520: PPUSH
34521: LD_STRING DA1-Con-1a
34523: PPUSH
34524: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34528: LD_EXP 28
34532: PPUSH
34533: LD_STRING DA-Roth-3a
34535: PPUSH
34536: CALL_OW 88
// SetSide ( Connie , 4 ) ;
34540: LD_EXP 16
34544: PPUSH
34545: LD_INT 4
34547: PPUSH
34548: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
34552: LD_EXP 16
34556: PPUSH
34557: LD_INT 257
34559: PPUSH
34560: LD_INT 198
34562: PPUSH
34563: CALL_OW 111
// AddComHold ( Connie ) ;
34567: LD_EXP 16
34571: PPUSH
34572: CALL_OW 200
// end ; if tpUnit = Kurt then
34576: LD_VAR 0 1
34580: PUSH
34581: LD_EXP 30
34585: EQUAL
34586: IFFALSE 34648
// begin Say ( Kurt , DA1-Kurt-1a ) ;
34588: LD_EXP 30
34592: PPUSH
34593: LD_STRING DA1-Kurt-1a
34595: PPUSH
34596: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34600: LD_EXP 28
34604: PPUSH
34605: LD_STRING DA-Roth-3a
34607: PPUSH
34608: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
34612: LD_EXP 30
34616: PPUSH
34617: LD_INT 4
34619: PPUSH
34620: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
34624: LD_EXP 30
34628: PPUSH
34629: LD_INT 257
34631: PPUSH
34632: LD_INT 198
34634: PPUSH
34635: CALL_OW 111
// AddComHold ( Kurt ) ;
34639: LD_EXP 30
34643: PPUSH
34644: CALL_OW 200
// end ; if tpUnit = Kikuchi then
34648: LD_VAR 0 1
34652: PUSH
34653: LD_EXP 15
34657: EQUAL
34658: IFFALSE 34711
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
34660: LD_EXP 15
34664: PPUSH
34665: LD_STRING DA1-Yam-1a
34667: PPUSH
34668: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34672: LD_EXP 28
34676: PPUSH
34677: LD_STRING DA-Roth-3
34679: PPUSH
34680: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
34684: LD_EXP 15
34688: PPUSH
34689: LD_INT 7
34691: PPUSH
34692: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
34696: LD_EXP 15
34700: PPUSH
34701: LD_INT 240
34703: PPUSH
34704: LD_INT 188
34706: PPUSH
34707: CALL_OW 111
// end ; if tpUnit = Frank then
34711: LD_VAR 0 1
34715: PUSH
34716: LD_EXP 14
34720: EQUAL
34721: IFFALSE 34783
// begin Say ( Frank , DA1-Frank-1a ) ;
34723: LD_EXP 14
34727: PPUSH
34728: LD_STRING DA1-Frank-1a
34730: PPUSH
34731: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34735: LD_EXP 28
34739: PPUSH
34740: LD_STRING DA-Roth-3a
34742: PPUSH
34743: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34747: LD_EXP 14
34751: PPUSH
34752: LD_INT 4
34754: PPUSH
34755: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34759: LD_EXP 14
34763: PPUSH
34764: LD_INT 257
34766: PPUSH
34767: LD_INT 198
34769: PPUSH
34770: CALL_OW 111
// AddComHold ( Frank ) ;
34774: LD_EXP 14
34778: PPUSH
34779: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34783: LD_EXP 64
34787: PUSH
34788: LD_INT 0
34790: EQUAL
34791: IFFALSE 34837
// begin Say ( JMM , DAa-JMM-1 ) ;
34793: LD_EXP 1
34797: PPUSH
34798: LD_STRING DAa-JMM-1
34800: PPUSH
34801: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34805: LD_EXP 1
34809: PPUSH
34810: LD_STRING DAa-JMM-1a
34812: PPUSH
34813: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34817: LD_EXP 1
34821: PPUSH
34822: LD_STRING DAa-JMM-1b
34824: PPUSH
34825: CALL_OW 88
// allianceFirstContact = 1 ;
34829: LD_ADDR_EXP 64
34833: PUSH
34834: LD_INT 1
34836: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34837: LD_VAR 0 1
34841: PUSH
34842: LD_VAR 0 2
34846: IN
34847: NOT
34848: IFFALSE 35158
// begin rnd = Rand ( 1 , 2 ) ;
34850: LD_ADDR_VAR 0 3
34854: PUSH
34855: LD_INT 1
34857: PPUSH
34858: LD_INT 2
34860: PPUSH
34861: CALL_OW 12
34865: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34866: LD_VAR 0 1
34870: PPUSH
34871: CALL_OW 258
34875: PUSH
34876: LD_INT 1
34878: EQUAL
34879: IFFALSE 35012
// begin if rnd = 1 then
34881: LD_VAR 0 3
34885: PUSH
34886: LD_INT 1
34888: EQUAL
34889: IFFALSE 34951
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34891: LD_VAR 0 1
34895: PPUSH
34896: LD_STRING DA1-Sol1-1a
34898: PPUSH
34899: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34903: LD_EXP 28
34907: PPUSH
34908: LD_STRING DA-Roth-3a
34910: PPUSH
34911: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34915: LD_VAR 0 1
34919: PPUSH
34920: LD_INT 4
34922: PPUSH
34923: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34927: LD_VAR 0 1
34931: PPUSH
34932: LD_INT 257
34934: PPUSH
34935: LD_INT 198
34937: PPUSH
34938: CALL_OW 111
// AddComHold ( tpUnit ) ;
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 200
// end ; if rnd = 2 then
34951: LD_VAR 0 3
34955: PUSH
34956: LD_INT 2
34958: EQUAL
34959: IFFALSE 35012
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
34961: LD_VAR 0 1
34965: PPUSH
34966: LD_STRING DA1-Sol1-1b
34968: PPUSH
34969: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34973: LD_EXP 28
34977: PPUSH
34978: LD_STRING DA-Roth-3
34980: PPUSH
34981: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34985: LD_VAR 0 1
34989: PPUSH
34990: LD_INT 7
34992: PPUSH
34993: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34997: LD_VAR 0 1
35001: PPUSH
35002: LD_INT 240
35004: PPUSH
35005: LD_INT 188
35007: PPUSH
35008: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
35012: LD_VAR 0 1
35016: PPUSH
35017: CALL_OW 258
35021: PUSH
35022: LD_INT 2
35024: EQUAL
35025: IFFALSE 35158
// begin if rnd = 1 then
35027: LD_VAR 0 3
35031: PUSH
35032: LD_INT 1
35034: EQUAL
35035: IFFALSE 35097
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
35037: LD_VAR 0 1
35041: PPUSH
35042: LD_STRING DA1-FSol1-1a
35044: PPUSH
35045: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
35049: LD_EXP 28
35053: PPUSH
35054: LD_STRING DA-Roth-3a
35056: PPUSH
35057: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
35061: LD_VAR 0 1
35065: PPUSH
35066: LD_INT 4
35068: PPUSH
35069: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
35073: LD_VAR 0 1
35077: PPUSH
35078: LD_INT 257
35080: PPUSH
35081: LD_INT 198
35083: PPUSH
35084: CALL_OW 111
// AddComHold ( tpUnit ) ;
35088: LD_VAR 0 1
35092: PPUSH
35093: CALL_OW 200
// end ; if rnd = 2 then
35097: LD_VAR 0 3
35101: PUSH
35102: LD_INT 2
35104: EQUAL
35105: IFFALSE 35158
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
35107: LD_VAR 0 1
35111: PPUSH
35112: LD_STRING DA1-FSol1-1b
35114: PPUSH
35115: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
35119: LD_EXP 28
35123: PPUSH
35124: LD_STRING DA-Roth-3
35126: PPUSH
35127: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
35131: LD_VAR 0 1
35135: PPUSH
35136: LD_INT 7
35138: PPUSH
35139: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
35143: LD_VAR 0 1
35147: PPUSH
35148: LD_INT 240
35150: PPUSH
35151: LD_INT 188
35153: PPUSH
35154: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
35158: LD_INT 1
35160: PPUSH
35161: LD_INT 7
35163: PPUSH
35164: LD_INT 2
35166: PPUSH
35167: LD_INT 1
35169: PPUSH
35170: CALL_OW 80
// InGameOff ;
35174: CALL_OW 9
// end ;
35178: PPOPN 3
35180: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
35181: LD_EXP 97
35185: PUSH
35186: LD_INT 94570
35188: GREATEREQUAL
35189: IFFALSE 35508
35191: GO 35193
35193: DISABLE
// begin DialogueOn ;
35194: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
35198: LD_INT 22
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 23
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 26
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 25
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 25
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 25
35253: PUSH
35254: LD_INT 3
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 25
35263: PUSH
35264: LD_INT 4
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 25
35273: PUSH
35274: LD_INT 5
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 25
35283: PUSH
35284: LD_INT 8
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: PPUSH
35306: CALL_OW 69
35310: PPUSH
35311: LD_STRING D11-Sol1-1
35313: PPUSH
35314: LD_STRING D5-FSol1-1
35316: PPUSH
35317: CALL 6912 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
35321: LD_EXP 26
35325: PPUSH
35326: LD_STRING D11-Pla-1
35328: PPUSH
35329: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
35333: LD_EXP 37
35337: PPUSH
35338: LD_STRING D11-Kov-1
35340: PPUSH
35341: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
35345: LD_EXP 26
35349: PPUSH
35350: LD_STRING D11-Pla-2
35352: PPUSH
35353: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
35357: LD_INT 22
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 23
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 26
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 25
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 25
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 25
35412: PUSH
35413: LD_INT 3
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 25
35422: PUSH
35423: LD_INT 4
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 25
35432: PUSH
35433: LD_INT 5
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 25
35442: PUSH
35443: LD_INT 8
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: PPUSH
35465: CALL_OW 69
35469: PPUSH
35470: LD_STRING D11-Sol1-2
35472: PPUSH
35473: LD_STRING D5-FSol1-1
35475: PPUSH
35476: CALL 6912 0 3
// Say ( JMM , D11-JMM-2 ) ;
35480: LD_EXP 1
35484: PPUSH
35485: LD_STRING D11-JMM-2
35487: PPUSH
35488: CALL_OW 88
// DialogueOff ;
35492: CALL_OW 7
// PreapreMehBehs ;
35496: CALL 5761 0 0
// missionStage = 5 ;
35500: LD_ADDR_EXP 101
35504: PUSH
35505: LD_INT 5
35507: ST_TO_ADDR
// end ;
35508: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
35509: LD_EXP 97
35513: PUSH
35514: LD_INT 105070
35516: GREATEREQUAL
35517: IFFALSE 35911
35519: GO 35521
35521: DISABLE
35522: LD_INT 0
35524: PPUSH
35525: PPUSH
// begin time = 0 0$00 ;
35526: LD_ADDR_VAR 0 2
35530: PUSH
35531: LD_INT 0
35533: ST_TO_ADDR
// DialogueOn ;
35534: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
35538: LD_EXP 26
35542: PPUSH
35543: LD_STRING D15-Pla-1
35545: PPUSH
35546: CALL_OW 94
// dec = Query ( Q15a ) ;
35550: LD_ADDR_VAR 0 1
35554: PUSH
35555: LD_STRING Q15a
35557: PPUSH
35558: CALL_OW 97
35562: ST_TO_ADDR
// if dec = 1 then
35563: LD_VAR 0 1
35567: PUSH
35568: LD_INT 1
35570: EQUAL
35571: IFFALSE 35592
// begin Say ( JMM , D15a-JMM-1 ) ;
35573: LD_EXP 1
35577: PPUSH
35578: LD_STRING D15a-JMM-1
35580: PPUSH
35581: CALL_OW 88
// YouLost ( Surrender ) ;
35585: LD_STRING Surrender
35587: PPUSH
35588: CALL_OW 104
// end ; if dec = 2 then
35592: LD_VAR 0 1
35596: PUSH
35597: LD_INT 2
35599: EQUAL
35600: IFFALSE 35630
// begin Say ( JMM , D15b-JMM-1 ) ;
35602: LD_EXP 1
35606: PPUSH
35607: LD_STRING D15b-JMM-1
35609: PPUSH
35610: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
35614: LD_EXP 26
35618: PPUSH
35619: LD_STRING D15b-Pla-1
35621: PPUSH
35622: CALL_OW 94
// DialogueOff ;
35626: CALL_OW 7
// end ; if dec = 3 then
35630: LD_VAR 0 1
35634: PUSH
35635: LD_INT 3
35637: EQUAL
35638: IFFALSE 35714
// begin Say ( JMM , D15c-JMM-1 ) ;
35640: LD_EXP 1
35644: PPUSH
35645: LD_STRING D15c-JMM-1
35647: PPUSH
35648: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
35652: LD_EXP 26
35656: PPUSH
35657: LD_STRING D15c-Pla-1
35659: PPUSH
35660: CALL_OW 94
// DialogueOff ;
35664: CALL_OW 7
// wait ( 0 0$15 ) ;
35668: LD_INT 525
35670: PPUSH
35671: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35675: LD_EXP 26
35679: PPUSH
35680: LD_STRING D18-Pla-1
35682: PPUSH
35683: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
35687: LD_INT 273
35689: PPUSH
35690: LD_EXP 1
35694: PPUSH
35695: CALL_OW 250
35699: PPUSH
35700: LD_EXP 1
35704: PPUSH
35705: CALL_OW 251
35709: PPUSH
35710: CALL_OW 116
// end ; if dec = 4 then
35714: LD_VAR 0 1
35718: PUSH
35719: LD_INT 4
35721: EQUAL
35722: IFFALSE 35760
// begin Say ( JMM , D15d-JMM-1 ) ;
35724: LD_EXP 1
35728: PPUSH
35729: LD_STRING D15d-JMM-1
35731: PPUSH
35732: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35736: LD_EXP 26
35740: PPUSH
35741: LD_STRING D15d-Pla-1
35743: PPUSH
35744: CALL_OW 94
// DialogueOff ;
35748: CALL_OW 7
// missionStage = 6 ;
35752: LD_ADDR_EXP 101
35756: PUSH
35757: LD_INT 6
35759: ST_TO_ADDR
// end ; if dec = 2 then
35760: LD_VAR 0 1
35764: PUSH
35765: LD_INT 2
35767: EQUAL
35768: IFFALSE 35841
// begin repeat wait ( 0 0$01 ) ;
35770: LD_INT 35
35772: PPUSH
35773: CALL_OW 67
// time = time + 0 0$01 ;
35777: LD_ADDR_VAR 0 2
35781: PUSH
35782: LD_VAR 0 2
35786: PUSH
35787: LD_INT 35
35789: PLUS
35790: ST_TO_ADDR
// until time >= 3 3$00 ;
35791: LD_VAR 0 2
35795: PUSH
35796: LD_INT 6300
35798: GREATEREQUAL
35799: IFFALSE 35770
// DialogueOn ;
35801: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35805: LD_EXP 1
35809: PPUSH
35810: LD_STRING D15d-JMM-1a
35812: PPUSH
35813: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35817: LD_EXP 26
35821: PPUSH
35822: LD_STRING D15d-Pla-1
35824: PPUSH
35825: CALL_OW 94
// DialogueOff ;
35829: CALL_OW 7
// missionStage = 6 ;
35833: LD_ADDR_EXP 101
35837: PUSH
35838: LD_INT 6
35840: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35841: LD_EXP 53
35845: PPUSH
35846: CALL_OW 302
35850: PUSH
35851: LD_EXP 53
35855: PPUSH
35856: CALL_OW 255
35860: PUSH
35861: LD_INT 1
35863: EQUAL
35864: AND
35865: IFFALSE 35911
// begin DialogueOn ;
35867: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35871: LD_EXP 1
35875: PPUSH
35876: LD_STRING D16-JMM-1
35878: PPUSH
35879: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35883: LD_EXP 53
35887: PPUSH
35888: LD_STRING D16-Friend-1
35890: PPUSH
35891: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35895: LD_EXP 1
35899: PPUSH
35900: LD_STRING D16-JMM-2
35902: PPUSH
35903: CALL_OW 88
// DialogueOff ;
35907: CALL_OW 7
// end ; end ;
35911: PPOPN 2
35913: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35914: LD_EXP 101
35918: PUSH
35919: LD_INT 6
35921: EQUAL
35922: PUSH
35923: LD_EXP 53
35927: PPUSH
35928: CALL_OW 302
35932: AND
35933: PUSH
35934: LD_EXP 53
35938: PPUSH
35939: CALL_OW 255
35943: PUSH
35944: LD_INT 1
35946: EQUAL
35947: AND
35948: IFFALSE 36585
35950: GO 35952
35952: DISABLE
35953: LD_INT 0
35955: PPUSH
// begin DialogueOn ;
35956: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35960: LD_INT 22
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: LD_INT 34
35975: PUSH
35976: LD_INT 8
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 35
35985: PUSH
35986: LD_INT 8
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PPUSH
36002: CALL_OW 69
36006: PUSH
36007: LD_INT 0
36009: GREATER
36010: IFFALSE 36034
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36012: LD_EXP 26
36016: PPUSH
36017: LD_STRING D16c-Pla-1
36019: PPUSH
36020: CALL_OW 94
// playerHaveRocket = 1 ;
36024: LD_ADDR_EXP 100
36028: PUSH
36029: LD_INT 1
36031: ST_TO_ADDR
// end else
36032: GO 36493
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
36034: LD_EXP 26
36038: PPUSH
36039: LD_STRING D16a-Pla-1
36041: PPUSH
36042: CALL_OW 94
// if IsOK ( Stevens ) then
36046: LD_EXP 3
36050: PPUSH
36051: CALL_OW 302
36055: IFFALSE 36071
// begin Say ( Stevens , D16a-Huck-1 ) ;
36057: LD_EXP 3
36061: PPUSH
36062: LD_STRING D16a-Huck-1
36064: PPUSH
36065: CALL_OW 88
// end else
36069: GO 36219
// begin if IsOk ( Baker ) then
36071: LD_EXP 21
36075: PPUSH
36076: CALL_OW 302
36080: IFFALSE 36096
// begin Say ( Baker , D16a-Huck-1 ) ;
36082: LD_EXP 21
36086: PPUSH
36087: LD_STRING D16a-Huck-1
36089: PPUSH
36090: CALL_OW 88
// end else
36094: GO 36219
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
36096: LD_INT 22
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 23
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 26
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: LD_INT 25
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 25
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 25
36151: PUSH
36152: LD_INT 3
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 25
36161: PUSH
36162: LD_INT 4
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 25
36171: PUSH
36172: LD_INT 5
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 25
36181: PUSH
36182: LD_INT 8
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: PPUSH
36204: CALL_OW 69
36208: PPUSH
36209: LD_STRING D16a-Sol1-1
36211: PPUSH
36212: LD_STRING D5-FSol1-1
36214: PPUSH
36215: CALL 6912 0 3
// end ; end ; wait ( 0 0$30 ) ;
36219: LD_INT 1050
36221: PPUSH
36222: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36226: LD_EXP 26
36230: PPUSH
36231: LD_STRING D18-Pla-1
36233: PPUSH
36234: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36238: LD_ADDR_VAR 0 1
36242: PUSH
36243: LD_INT 22
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 21
36255: PUSH
36256: LD_INT 3
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 23
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: LD_INT 30
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 30
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: PPUSH
36307: CALL_OW 69
36311: ST_TO_ADDR
// if rocketTarget = 0 then
36312: LD_VAR 0 1
36316: PUSH
36317: LD_INT 0
36319: EQUAL
36320: IFFALSE 36396
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36322: LD_ADDR_VAR 0 1
36326: PUSH
36327: LD_INT 22
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 21
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 23
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: LD_INT 30
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 30
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: PPUSH
36391: CALL_OW 69
36395: ST_TO_ADDR
// if rocketTarget = 0 then
36396: LD_VAR 0 1
36400: PUSH
36401: LD_INT 0
36403: EQUAL
36404: IFFALSE 36458
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36406: LD_ADDR_VAR 0 1
36410: PUSH
36411: LD_INT 22
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 21
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 23
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 50
36443: PUSH
36444: EMPTY
36445: LIST
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: PPUSH
36453: CALL_OW 69
36457: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36458: LD_INT 273
36460: PPUSH
36461: LD_VAR 0 1
36465: PUSH
36466: LD_INT 1
36468: ARRAY
36469: PPUSH
36470: CALL_OW 250
36474: PPUSH
36475: LD_VAR 0 1
36479: PUSH
36480: LD_INT 1
36482: ARRAY
36483: PPUSH
36484: CALL_OW 251
36488: PPUSH
36489: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
36493: LD_EXP 1
36497: PPUSH
36498: LD_STRING D16a-JMM-1a
36500: PPUSH
36501: CALL_OW 88
// DialogueOff ;
36505: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
36509: LD_EXP 53
36513: PPUSH
36514: LD_INT 3
36516: PPUSH
36517: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
36521: LD_EXP 53
36525: PPUSH
36526: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
36530: LD_EXP 53
36534: PPUSH
36535: CALL_OW 121
// wait ( 0 0$1 ) ;
36539: LD_INT 35
36541: PPUSH
36542: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
36546: LD_EXP 53
36550: PPUSH
36551: LD_INT 18
36553: PPUSH
36554: CALL_OW 113
// wait ( 0 0$3 ) ;
36558: LD_INT 105
36560: PPUSH
36561: CALL_OW 67
// DialogueOn ;
36565: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
36569: LD_EXP 1
36573: PPUSH
36574: LD_STRING D16a-JMM-1
36576: PPUSH
36577: CALL_OW 88
// DialogueOff ;
36581: CALL_OW 7
// end ;
36585: PPOPN 1
36587: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
36588: LD_EXP 53
36592: PPUSH
36593: CALL_OW 255
36597: PUSH
36598: LD_INT 3
36600: EQUAL
36601: IFFALSE 36708
36603: GO 36605
36605: DISABLE
36606: LD_INT 0
36608: PPUSH
// begin enable ;
36609: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
36610: LD_ADDR_VAR 0 1
36614: PUSH
36615: LD_INT 22
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 21
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 56
36637: PUSH
36638: EMPTY
36639: LIST
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: PPUSH
36646: CALL_OW 69
36650: PUSH
36651: FOR_IN
36652: IFFALSE 36706
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
36654: LD_VAR 0 1
36658: PPUSH
36659: LD_EXP 53
36663: PPUSH
36664: CALL_OW 296
36668: PUSH
36669: LD_INT 8
36671: LESS
36672: IFFALSE 36704
// begin disable ;
36674: DISABLE
// DialogueOn ;
36675: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
36679: LD_EXP 53
36683: PPUSH
36684: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
36688: LD_EXP 53
36692: PPUSH
36693: LD_STRING D16a-Friend-1
36695: PPUSH
36696: CALL_OW 88
// DialogueOff ;
36700: CALL_OW 7
// end ; end ;
36704: GO 36651
36706: POP
36707: POP
// end ;
36708: PPOPN 1
36710: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36711: LD_EXP 101
36715: PUSH
36716: LD_INT 6
36718: EQUAL
36719: PUSH
36720: LD_EXP 53
36724: PPUSH
36725: CALL_OW 255
36729: PUSH
36730: LD_INT 1
36732: EQUAL
36733: NOT
36734: AND
36735: IFFALSE 37115
36737: GO 36739
36739: DISABLE
36740: LD_INT 0
36742: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36743: LD_INT 22
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: LD_INT 34
36758: PUSH
36759: LD_INT 8
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 35
36768: PUSH
36769: LD_INT 8
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PPUSH
36785: CALL_OW 69
36789: PUSH
36790: LD_INT 0
36792: GREATER
36793: IFFALSE 36817
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36795: LD_EXP 26
36799: PPUSH
36800: LD_STRING D16c-Pla-1
36802: PPUSH
36803: CALL_OW 94
// playerHaveRocket = 1 ;
36807: LD_ADDR_EXP 100
36811: PUSH
36812: LD_INT 1
36814: ST_TO_ADDR
// end else
36815: GO 37115
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36817: LD_EXP 26
36821: PPUSH
36822: LD_STRING D16b-Pla-1
36824: PPUSH
36825: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36829: LD_EXP 1
36833: PPUSH
36834: LD_STRING D16b-JMM-1
36836: PPUSH
36837: CALL_OW 88
// wait ( 0 0$15 ) ;
36841: LD_INT 525
36843: PPUSH
36844: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36848: LD_EXP 26
36852: PPUSH
36853: LD_STRING D18-Pla-1
36855: PPUSH
36856: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36860: LD_ADDR_VAR 0 1
36864: PUSH
36865: LD_INT 22
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 21
36877: PUSH
36878: LD_INT 3
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 23
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 30
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 30
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: PPUSH
36929: CALL_OW 69
36933: ST_TO_ADDR
// if rocketTarget = 0 then
36934: LD_VAR 0 1
36938: PUSH
36939: LD_INT 0
36941: EQUAL
36942: IFFALSE 37018
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36944: LD_ADDR_VAR 0 1
36948: PUSH
36949: LD_INT 22
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 21
36961: PUSH
36962: LD_INT 3
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 23
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: LD_INT 30
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 30
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: PPUSH
37013: CALL_OW 69
37017: ST_TO_ADDR
// if rocketTarget = 0 then
37018: LD_VAR 0 1
37022: PUSH
37023: LD_INT 0
37025: EQUAL
37026: IFFALSE 37080
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
37028: LD_ADDR_VAR 0 1
37032: PUSH
37033: LD_INT 22
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 21
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 23
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 50
37065: PUSH
37066: EMPTY
37067: LIST
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: PPUSH
37075: CALL_OW 69
37079: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
37080: LD_INT 273
37082: PPUSH
37083: LD_VAR 0 1
37087: PUSH
37088: LD_INT 1
37090: ARRAY
37091: PPUSH
37092: CALL_OW 250
37096: PPUSH
37097: LD_VAR 0 1
37101: PUSH
37102: LD_INT 1
37104: ARRAY
37105: PPUSH
37106: CALL_OW 251
37110: PPUSH
37111: CALL_OW 116
// end ; end ;
37115: PPOPN 1
37117: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
37118: LD_EXP 97
37122: PUSH
37123: LD_INT 168070
37125: GREATEREQUAL
37126: PUSH
37127: LD_EXP 101
37131: PUSH
37132: LD_INT 6
37134: GREATEREQUAL
37135: AND
37136: PUSH
37137: LD_EXP 85
37141: PUSH
37142: LD_INT 1
37144: EQUAL
37145: AND
37146: IFFALSE 37176
37148: GO 37150
37150: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
37151: LD_EXP 26
37155: PPUSH
37156: LD_STRING D18-Pla-1
37158: PPUSH
37159: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
37163: LD_INT 273
37165: PPUSH
37166: LD_INT 244
37168: PPUSH
37169: LD_INT 187
37171: PPUSH
37172: CALL_OW 116
// end ;
37176: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
37177: LD_EXP 101
37181: PUSH
37182: LD_INT 5
37184: GREATEREQUAL
37185: IFFALSE 37378
37187: GO 37189
37189: DISABLE
37190: LD_INT 0
37192: PPUSH
// begin enable ;
37193: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
37194: LD_ADDR_VAR 0 1
37198: PUSH
37199: LD_INT 22
37201: PUSH
37202: LD_INT 6
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 30
37211: PUSH
37212: LD_INT 37
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 57
37221: PUSH
37222: EMPTY
37223: LIST
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: PPUSH
37230: CALL_OW 69
37234: PUSH
37235: FOR_IN
37236: IFFALSE 37290
// begin if See ( 1 , i ) then
37238: LD_INT 1
37240: PPUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: CALL_OW 292
37250: IFFALSE 37288
// begin disable ;
37252: DISABLE
// DialogueOn ;
37253: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
37257: LD_EXP 1
37261: PPUSH
37262: LD_STRING D17a-JMM-1
37264: PPUSH
37265: CALL_OW 88
// DialogueOff ;
37269: CALL_OW 7
// behemothStatus = 1 ;
37273: LD_ADDR_EXP 60
37277: PUSH
37278: LD_INT 1
37280: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
37281: LD_STRING M4a
37283: PPUSH
37284: CALL_OW 337
// end ; end ;
37288: GO 37235
37290: POP
37291: POP
// for i in ruBehs do
37292: LD_ADDR_VAR 0 1
37296: PUSH
37297: LD_EXP 59
37301: PUSH
37302: FOR_IN
37303: IFFALSE 37376
// begin if See ( 1 , i ) then
37305: LD_INT 1
37307: PPUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: CALL_OW 292
37317: IFFALSE 37374
// begin disable ;
37319: DISABLE
// DialogueOn ;
37320: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
37324: LD_EXP 1
37328: PPUSH
37329: LD_STRING D17b-JMM-1
37331: PPUSH
37332: CALL_OW 88
// DialogueOff ;
37336: CALL_OW 7
// behemothStatus = 0 ;
37340: LD_ADDR_EXP 60
37344: PUSH
37345: LD_INT 0
37347: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
37348: LD_STRING M4b
37350: PPUSH
37351: CALL_OW 337
// wait ( 0 0$2 ) ;
37355: LD_INT 70
37357: PPUSH
37358: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
37362: LD_EXP 26
37366: PPUSH
37367: LD_STRING D18-Pla-1
37369: PPUSH
37370: CALL_OW 88
// end ; end ;
37374: GO 37302
37376: POP
37377: POP
// end ;
37378: PPOPN 1
37380: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
37381: LD_EXP 26
37385: PPUSH
37386: CALL_OW 301
37390: PUSH
37391: LD_EXP 27
37395: PPUSH
37396: CALL_OW 301
37400: AND
37401: PUSH
37402: LD_INT 22
37404: PUSH
37405: LD_INT 3
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 21
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 50
37424: PUSH
37425: EMPTY
37426: LIST
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: PPUSH
37433: CALL_OW 69
37437: PUSH
37438: LD_INT 7
37440: PUSH
37441: LD_INT 8
37443: PUSH
37444: LD_INT 9
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: PUSH
37452: LD_OWVAR 67
37456: ARRAY
37457: LESS
37458: AND
37459: IFFALSE 38135
37461: GO 37463
37463: DISABLE
37464: LD_INT 0
37466: PPUSH
37467: PPUSH
37468: PPUSH
// begin russianAI = 0 ;
37469: LD_ADDR_EXP 86
37473: PUSH
37474: LD_INT 0
37476: ST_TO_ADDR
// russianEscape = 1 ;
37477: LD_ADDR_EXP 90
37481: PUSH
37482: LD_INT 1
37484: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
37485: LD_INT 1
37487: PPUSH
37488: LD_INT 3
37490: PPUSH
37491: LD_INT 1
37493: PPUSH
37494: LD_INT 1
37496: PPUSH
37497: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
37501: LD_ADDR_VAR 0 1
37505: PUSH
37506: LD_INT 22
37508: PUSH
37509: LD_INT 3
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 21
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 24
37528: PUSH
37529: LD_INT 900
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: PPUSH
37541: CALL_OW 69
37545: PUSH
37546: FOR_IN
37547: IFFALSE 37578
// if GetSex ( i ) = sex_male then
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 258
37558: PUSH
37559: LD_INT 1
37561: EQUAL
37562: IFFALSE 37576
// begin tmp = i ;
37564: LD_ADDR_VAR 0 2
37568: PUSH
37569: LD_VAR 0 1
37573: ST_TO_ADDR
// break ;
37574: GO 37578
// end ;
37576: GO 37546
37578: POP
37579: POP
// if tmp = 0 then
37580: LD_VAR 0 2
37584: PUSH
37585: LD_INT 0
37587: EQUAL
37588: IFFALSE 37642
// begin uc_side = 3 ;
37590: LD_ADDR_OWVAR 20
37594: PUSH
37595: LD_INT 3
37597: ST_TO_ADDR
// uc_nation = 3 ;
37598: LD_ADDR_OWVAR 21
37602: PUSH
37603: LD_INT 3
37605: ST_TO_ADDR
// hc_name =  ;
37606: LD_ADDR_OWVAR 26
37610: PUSH
37611: LD_STRING 
37613: ST_TO_ADDR
// hc_gallery =  ;
37614: LD_ADDR_OWVAR 33
37618: PUSH
37619: LD_STRING 
37621: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
37622: LD_INT 1
37624: PPUSH
37625: LD_INT 10
37627: PPUSH
37628: CALL_OW 381
// tmp = CreateHuman ;
37632: LD_ADDR_VAR 0 2
37636: PUSH
37637: CALL_OW 44
37641: ST_TO_ADDR
// end ; DialogueOn ;
37642: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
37646: LD_VAR 0 2
37650: PPUSH
37651: LD_STRING DSurrenderRussians-RSol1-1a
37653: PPUSH
37654: CALL_OW 88
// DialogueOff ;
37658: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
37662: LD_INT 22
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 21
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PPUSH
37686: CALL_OW 69
37690: PPUSH
37691: CALL_OW 122
// wait ( 0 0$1 ) ;
37695: LD_INT 35
37697: PPUSH
37698: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
37702: LD_INT 22
37704: PUSH
37705: LD_INT 3
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 21
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PPUSH
37726: CALL_OW 69
37730: PPUSH
37731: LD_INT 25
37733: PPUSH
37734: CALL_OW 173
// wait ( 0 0$10 ) ;
37738: LD_INT 350
37740: PPUSH
37741: CALL_OW 67
// PrepareOmarArmy ;
37745: CALL 38755 0 0
// missionStage = 7 ;
37749: LD_ADDR_EXP 101
37753: PUSH
37754: LD_INT 7
37756: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37757: LD_INT 157
37759: PPUSH
37760: LD_INT 8
37762: PPUSH
37763: LD_INT 1
37765: PPUSH
37766: LD_INT 8
37768: NEG
37769: PPUSH
37770: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37774: LD_INT 157
37776: PPUSH
37777: LD_INT 8
37779: PPUSH
37780: CALL_OW 84
// DialogueOn ;
37784: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37788: LD_EXP 32
37792: PPUSH
37793: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37797: LD_EXP 1
37801: PPUSH
37802: LD_STRING D19-JMM-1
37804: PPUSH
37805: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37809: LD_INT 22
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 26
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 25
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 25
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 25
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 25
37864: PUSH
37865: LD_INT 4
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 25
37874: PUSH
37875: LD_INT 5
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 25
37884: PUSH
37885: LD_INT 8
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: PPUSH
37906: CALL_OW 69
37910: PPUSH
37911: LD_STRING D19-Sol1-1
37913: PPUSH
37914: LD_STRING D5-FSol1-1
37916: PPUSH
37917: CALL 6912 0 3
// Say ( JMM , D19-JMM-2 ) ;
37921: LD_EXP 1
37925: PPUSH
37926: LD_STRING D19-JMM-2
37928: PPUSH
37929: CALL_OW 88
// DialogueOff ;
37933: CALL_OW 7
// LaunchMines ;
37937: CALL 38244 0 0
// wait ( 0 0$3 ) ;
37941: LD_INT 105
37943: PPUSH
37944: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
37948: LD_ADDR_VAR 0 3
37952: PUSH
37953: LD_INT 22
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 21
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PPUSH
37977: CALL_OW 69
37981: PUSH
37982: LD_INT 22
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 21
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 25
38004: PUSH
38005: LD_INT 4
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: PPUSH
38017: CALL_OW 69
38021: DIFF
38022: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
38023: LD_ADDR_VAR 0 3
38027: PUSH
38028: LD_VAR 0 3
38032: PUSH
38033: LD_INT 22
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 21
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PPUSH
38057: CALL_OW 69
38061: ADD
38062: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
38063: LD_VAR 0 3
38067: PPUSH
38068: LD_INT 178
38070: PPUSH
38071: LD_INT 66
38073: PPUSH
38074: CALL_OW 114
// wait ( 0 0$10 ) ;
38078: LD_INT 350
38080: PPUSH
38081: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
38085: LD_INT 22
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 21
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 25
38107: PUSH
38108: LD_INT 4
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: PPUSH
38120: CALL_OW 69
38124: PPUSH
38125: LD_INT 177
38127: PPUSH
38128: LD_INT 69
38130: PPUSH
38131: CALL_OW 158
// end ;
38135: PPOPN 3
38137: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
38138: LD_EXP 90
38142: PUSH
38143: LD_INT 1
38145: EQUAL
38146: PUSH
38147: LD_INT 25
38149: PPUSH
38150: LD_INT 22
38152: PUSH
38153: LD_INT 3
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 21
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PPUSH
38174: CALL_OW 70
38178: AND
38179: IFFALSE 38241
38181: GO 38183
38183: DISABLE
38184: LD_INT 0
38186: PPUSH
// begin enable ;
38187: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
38188: LD_ADDR_VAR 0 1
38192: PUSH
38193: LD_INT 25
38195: PPUSH
38196: LD_INT 22
38198: PUSH
38199: LD_INT 3
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 21
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PPUSH
38220: CALL_OW 70
38224: PUSH
38225: FOR_IN
38226: IFFALSE 38239
// RemoveUnit ( i ) ;
38228: LD_VAR 0 1
38232: PPUSH
38233: CALL_OW 64
38237: GO 38225
38239: POP
38240: POP
// end ;
38241: PPOPN 1
38243: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
38244: LD_INT 0
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
38251: LD_ADDR_VAR 0 2
38255: PUSH
38256: LD_INT 168
38258: PUSH
38259: LD_INT 18
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 169
38268: PUSH
38269: LD_INT 20
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 167
38278: PUSH
38279: LD_INT 20
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 164
38288: PUSH
38289: LD_INT 18
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 164
38298: PUSH
38299: LD_INT 19
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 163
38308: PUSH
38309: LD_INT 19
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 164
38318: PUSH
38319: LD_INT 21
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 165
38328: PUSH
38329: LD_INT 21
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 163
38338: PUSH
38339: LD_INT 20
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 164
38348: PUSH
38349: LD_INT 22
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 162
38358: PUSH
38359: LD_INT 20
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
38379: LD_ADDR_VAR 0 3
38383: PUSH
38384: LD_INT 169
38386: PUSH
38387: LD_INT 34
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 169
38396: PUSH
38397: LD_INT 35
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 167
38406: PUSH
38407: LD_INT 32
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 170
38416: PUSH
38417: LD_INT 31
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 173
38426: PUSH
38427: LD_INT 35
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 174
38436: PUSH
38437: LD_INT 39
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
// for i = 1 to mines_pos do
38452: LD_ADDR_VAR 0 4
38456: PUSH
38457: DOUBLE
38458: LD_INT 1
38460: DEC
38461: ST_TO_ADDR
38462: LD_VAR 0 2
38466: PUSH
38467: FOR_TO
38468: IFFALSE 38680
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
38470: LD_VAR 0 2
38474: PUSH
38475: LD_VAR 0 4
38479: ARRAY
38480: PUSH
38481: LD_INT 1
38483: ARRAY
38484: PPUSH
38485: LD_VAR 0 2
38489: PUSH
38490: LD_VAR 0 4
38494: ARRAY
38495: PUSH
38496: LD_INT 2
38498: ARRAY
38499: PPUSH
38500: LD_INT 1
38502: PPUSH
38503: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38507: LD_INT 1
38509: PPUSH
38510: LD_INT 3
38512: PPUSH
38513: CALL_OW 12
38517: PPUSH
38518: CALL_OW 67
// if i < mines_pos then
38522: LD_VAR 0 4
38526: PUSH
38527: LD_VAR 0 2
38531: LESS
38532: IFFALSE 38570
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
38534: LD_VAR 0 2
38538: PUSH
38539: LD_VAR 0 4
38543: ARRAY
38544: PUSH
38545: LD_INT 1
38547: ARRAY
38548: PPUSH
38549: LD_VAR 0 2
38553: PUSH
38554: LD_VAR 0 4
38558: ARRAY
38559: PUSH
38560: LD_INT 2
38562: ARRAY
38563: PPUSH
38564: CALL_OW 348
38568: GO 38678
// begin for j = 1 to mines_pos1 do
38570: LD_ADDR_VAR 0 5
38574: PUSH
38575: DOUBLE
38576: LD_INT 1
38578: DEC
38579: ST_TO_ADDR
38580: LD_VAR 0 3
38584: PUSH
38585: FOR_TO
38586: IFFALSE 38642
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
38588: LD_VAR 0 3
38592: PUSH
38593: LD_VAR 0 5
38597: ARRAY
38598: PUSH
38599: LD_INT 1
38601: ARRAY
38602: PPUSH
38603: LD_VAR 0 3
38607: PUSH
38608: LD_VAR 0 5
38612: ARRAY
38613: PUSH
38614: LD_INT 2
38616: ARRAY
38617: PPUSH
38618: LD_INT 1
38620: PPUSH
38621: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38625: LD_INT 1
38627: PPUSH
38628: LD_INT 3
38630: PPUSH
38631: CALL_OW 12
38635: PPUSH
38636: CALL_OW 67
// end ;
38640: GO 38585
38642: POP
38643: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
38644: LD_VAR 0 2
38648: PUSH
38649: LD_VAR 0 4
38653: ARRAY
38654: PUSH
38655: LD_INT 1
38657: ARRAY
38658: PPUSH
38659: LD_VAR 0 2
38663: PUSH
38664: LD_VAR 0 4
38668: ARRAY
38669: PUSH
38670: LD_INT 2
38672: ARRAY
38673: PPUSH
38674: CALL_OW 347
// end ; end ;
38678: GO 38467
38680: POP
38681: POP
// end ;
38682: LD_VAR 0 1
38686: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
38687: LD_EXP 101
38691: PUSH
38692: LD_INT 7
38694: EQUAL
38695: PUSH
38696: LD_EXP 31
38700: PPUSH
38701: CALL_OW 301
38705: AND
38706: PUSH
38707: LD_EXP 32
38711: PPUSH
38712: CALL_OW 302
38716: AND
38717: IFFALSE 38754
38719: GO 38721
38721: DISABLE
// begin DialogueOn ;
38722: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38726: LD_EXP 1
38730: PPUSH
38731: LD_STRING D19a-JMM-1
38733: PPUSH
38734: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38738: LD_EXP 32
38742: PPUSH
38743: LD_STRING D19a-Hke-1
38745: PPUSH
38746: CALL_OW 88
// DialogueOff ;
38750: CALL_OW 7
// end ; end_of_file
38754: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38755: LD_INT 0
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
// uc_side = 2 ;
38762: LD_ADDR_OWVAR 20
38766: PUSH
38767: LD_INT 2
38769: ST_TO_ADDR
// uc_nation = 2 ;
38770: LD_ADDR_OWVAR 21
38774: PUSH
38775: LD_INT 2
38777: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38778: LD_ADDR_EXP 31
38782: PUSH
38783: LD_STRING Omar
38785: PPUSH
38786: LD_INT 0
38788: PPUSH
38789: CALL 6656 0 2
38793: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38794: LD_ADDR_EXP 32
38798: PUSH
38799: LD_STRING Heike
38801: PPUSH
38802: LD_INT 0
38804: PPUSH
38805: CALL 6656 0 2
38809: ST_TO_ADDR
// if KhatamStatus = 1 then
38810: LD_EXP 83
38814: PUSH
38815: LD_INT 1
38817: EQUAL
38818: IFFALSE 38833
// Khatam = NewCharacter ( Khatam ) ;
38820: LD_ADDR_EXP 33
38824: PUSH
38825: LD_STRING Khatam
38827: PPUSH
38828: CALL_OW 25
38832: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38833: LD_EXP 32
38837: PPUSH
38838: LD_INT 26
38840: PPUSH
38841: LD_INT 0
38843: PPUSH
38844: CALL_OW 49
// PlaceUnitArea ( Khatam , ArabianSpawn , false ) ;
38848: LD_EXP 33
38852: PPUSH
38853: LD_INT 26
38855: PPUSH
38856: LD_INT 0
38858: PPUSH
38859: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38863: LD_ADDR_VAR 0 2
38867: PUSH
38868: DOUBLE
38869: LD_INT 1
38871: DEC
38872: ST_TO_ADDR
38873: LD_INT 5
38875: PUSH
38876: LD_INT 6
38878: PUSH
38879: LD_INT 7
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: LD_OWVAR 67
38891: ARRAY
38892: PUSH
38893: FOR_TO
38894: IFFALSE 38949
// begin hc_name =  ;
38896: LD_ADDR_OWVAR 26
38900: PUSH
38901: LD_STRING 
38903: ST_TO_ADDR
// hc_gallery =  ;
38904: LD_ADDR_OWVAR 33
38908: PUSH
38909: LD_STRING 
38911: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38912: LD_INT 0
38914: PPUSH
38915: LD_INT 8
38917: PPUSH
38918: CALL_OW 381
// un = CreateHuman ;
38922: LD_ADDR_VAR 0 3
38926: PUSH
38927: CALL_OW 44
38931: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38932: LD_VAR 0 3
38936: PPUSH
38937: LD_INT 26
38939: PPUSH
38940: LD_INT 0
38942: PPUSH
38943: CALL_OW 49
// end ;
38947: GO 38893
38949: POP
38950: POP
// for i := 1 to 4 do
38951: LD_ADDR_VAR 0 2
38955: PUSH
38956: DOUBLE
38957: LD_INT 1
38959: DEC
38960: ST_TO_ADDR
38961: LD_INT 4
38963: PUSH
38964: FOR_TO
38965: IFFALSE 39020
// begin hc_name =  ;
38967: LD_ADDR_OWVAR 26
38971: PUSH
38972: LD_STRING 
38974: ST_TO_ADDR
// hc_gallery =  ;
38975: LD_ADDR_OWVAR 33
38979: PUSH
38980: LD_STRING 
38982: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
38983: LD_INT 0
38985: PPUSH
38986: LD_INT 8
38988: PPUSH
38989: CALL_OW 384
// un = CreateHuman ;
38993: LD_ADDR_VAR 0 3
38997: PUSH
38998: CALL_OW 44
39002: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
39003: LD_VAR 0 3
39007: PPUSH
39008: LD_INT 26
39010: PPUSH
39011: LD_INT 0
39013: PPUSH
39014: CALL_OW 49
// end ;
39018: GO 38964
39020: POP
39021: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
39022: LD_ADDR_VAR 0 2
39026: PUSH
39027: DOUBLE
39028: LD_INT 1
39030: DEC
39031: ST_TO_ADDR
39032: LD_INT 8
39034: PUSH
39035: LD_INT 9
39037: PUSH
39038: LD_INT 10
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: PUSH
39046: LD_OWVAR 67
39050: ARRAY
39051: PUSH
39052: FOR_TO
39053: IFFALSE 39141
// begin vc_engine = 3 ;
39055: LD_ADDR_OWVAR 39
39059: PUSH
39060: LD_INT 3
39062: ST_TO_ADDR
// vc_control = 5 ;
39063: LD_ADDR_OWVAR 38
39067: PUSH
39068: LD_INT 5
39070: ST_TO_ADDR
// vc_chassis = 14 ;
39071: LD_ADDR_OWVAR 37
39075: PUSH
39076: LD_INT 14
39078: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
39079: LD_ADDR_OWVAR 40
39083: PUSH
39084: LD_INT 27
39086: PUSH
39087: LD_INT 26
39089: PUSH
39090: LD_INT 28
39092: PUSH
39093: LD_INT 25
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: PPUSH
39105: LD_INT 3
39107: PPUSH
39108: CALL_OW 12
39112: ARRAY
39113: ST_TO_ADDR
// veh = CreateVehicle ;
39114: LD_ADDR_VAR 0 4
39118: PUSH
39119: CALL_OW 45
39123: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
39124: LD_VAR 0 4
39128: PPUSH
39129: LD_INT 26
39131: PPUSH
39132: LD_INT 0
39134: PPUSH
39135: CALL_OW 49
// end ;
39139: GO 39052
39141: POP
39142: POP
// vc_chassis := 31 ;
39143: LD_ADDR_OWVAR 37
39147: PUSH
39148: LD_INT 31
39150: ST_TO_ADDR
// vc_control := control_rider ;
39151: LD_ADDR_OWVAR 38
39155: PUSH
39156: LD_INT 4
39158: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
39159: LD_ADDR_VAR 0 5
39163: PUSH
39164: CALL_OW 45
39168: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
39169: LD_VAR 0 5
39173: PPUSH
39174: LD_INT 26
39176: PPUSH
39177: LD_INT 0
39179: PPUSH
39180: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
39184: LD_EXP 31
39188: PPUSH
39189: LD_VAR 0 5
39193: PPUSH
39194: CALL_OW 52
// end ; end_of_file
39198: LD_VAR 0 1
39202: RET
// every 1 1$30 trigger missionStage > 0 do
39203: LD_EXP 101
39207: PUSH
39208: LD_INT 0
39210: GREATER
39211: IFFALSE 39238
39213: GO 39215
39215: DISABLE
// begin enable ;
39216: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
39217: LD_INT 3
39219: PPUSH
39220: LD_INT 5
39222: PPUSH
39223: CALL_OW 12
39227: PPUSH
39228: LD_INT 27
39230: PPUSH
39231: LD_INT 1
39233: PPUSH
39234: CALL_OW 55
// end ; end_of_file
39238: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
39239: LD_EXP 101
39243: PUSH
39244: LD_INT 7
39246: EQUAL
39247: PUSH
39248: LD_INT 22
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 21
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PPUSH
39272: CALL_OW 69
39276: PUSH
39277: LD_INT 0
39279: EQUAL
39280: AND
39281: PUSH
39282: LD_INT 22
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 21
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 50
39304: PUSH
39305: EMPTY
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: PPUSH
39313: CALL_OW 69
39317: PUSH
39318: LD_INT 0
39320: EQUAL
39321: AND
39322: IFFALSE 39811
39324: GO 39326
39326: DISABLE
// begin DialogueOn ;
39327: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
39331: LD_EXP 1
39335: PPUSH
39336: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
39340: LD_EXP 1
39344: PPUSH
39345: LD_STRING D20-JMM-1
39347: PPUSH
39348: CALL_OW 88
// if IsOK ( Joan ) then
39352: LD_EXP 2
39356: PPUSH
39357: CALL_OW 302
39361: IFFALSE 39375
// Say ( Joan , D20-Joan-1 ) ;
39363: LD_EXP 2
39367: PPUSH
39368: LD_STRING D20-Joan-1
39370: PPUSH
39371: CALL_OW 88
// if IsOk ( Lisa ) then
39375: LD_EXP 4
39379: PPUSH
39380: CALL_OW 302
39384: IFFALSE 39398
// Say ( Lisa , D20-Lisa-1 ) ;
39386: LD_EXP 4
39390: PPUSH
39391: LD_STRING D20-Lisa-1
39393: PPUSH
39394: CALL_OW 88
// if IsOk ( Donaldson ) then
39398: LD_EXP 5
39402: PPUSH
39403: CALL_OW 302
39407: IFFALSE 39421
// Say ( Donaldson , D20-Don-1 ) ;
39409: LD_EXP 5
39413: PPUSH
39414: LD_STRING D20-Don-1
39416: PPUSH
39417: CALL_OW 88
// if IsOK ( Cornel ) then
39421: LD_EXP 12
39425: PPUSH
39426: CALL_OW 302
39430: IFFALSE 39444
// Say ( Cornel , D20-Corn-1 ) ;
39432: LD_EXP 12
39436: PPUSH
39437: LD_STRING D20-Corn-1
39439: PPUSH
39440: CALL_OW 88
// if IsOk ( Denis ) then
39444: LD_EXP 8
39448: PPUSH
39449: CALL_OW 302
39453: IFFALSE 39467
// Say ( Denis , D20-Den-1 ) ;
39455: LD_EXP 8
39459: PPUSH
39460: LD_STRING D20-Den-1
39462: PPUSH
39463: CALL_OW 88
// if IsOk ( Bobby ) then
39467: LD_EXP 6
39471: PPUSH
39472: CALL_OW 302
39476: IFFALSE 39490
// Say ( Bobby , D20-Bobby-1 ) ;
39478: LD_EXP 6
39482: PPUSH
39483: LD_STRING D20-Bobby-1
39485: PPUSH
39486: CALL_OW 88
// if IsOk ( Gladstone ) then
39490: LD_EXP 10
39494: PPUSH
39495: CALL_OW 302
39499: IFFALSE 39513
// Say ( Gladstone , D20-Glad-1 ) ;
39501: LD_EXP 10
39505: PPUSH
39506: LD_STRING D20-Glad-1
39508: PPUSH
39509: CALL_OW 88
// if IsOk ( Cyrus ) then
39513: LD_EXP 7
39517: PPUSH
39518: CALL_OW 302
39522: IFFALSE 39536
// Say ( Cyrus , D20-Cyrus-1 ) ;
39524: LD_EXP 7
39528: PPUSH
39529: LD_STRING D20-Cyrus-1
39531: PPUSH
39532: CALL_OW 88
// if IsOk ( Stevens ) then
39536: LD_EXP 3
39540: PPUSH
39541: CALL_OW 302
39545: IFFALSE 39559
// Say ( Stevens , D20-Huck-1 ) ;
39547: LD_EXP 3
39551: PPUSH
39552: LD_STRING D20-Huck-1
39554: PPUSH
39555: CALL_OW 88
// if IsOk ( Brown ) then
39559: LD_EXP 9
39563: PPUSH
39564: CALL_OW 302
39568: IFFALSE 39582
// Say ( Brown , D20-Brown-1 ) ;
39570: LD_EXP 9
39574: PPUSH
39575: LD_STRING D20-Brown-1
39577: PPUSH
39578: CALL_OW 88
// if IsOk ( Gary ) then
39582: LD_EXP 13
39586: PPUSH
39587: CALL_OW 302
39591: IFFALSE 39605
// Say ( Gary , D20-Gary-1 ) ;
39593: LD_EXP 13
39597: PPUSH
39598: LD_STRING D20-Gary-1
39600: PPUSH
39601: CALL_OW 88
// if IsOk ( Connie ) then
39605: LD_EXP 16
39609: PPUSH
39610: CALL_OW 302
39614: IFFALSE 39628
// Say ( Connie , D20-Con-1 ) ;
39616: LD_EXP 16
39620: PPUSH
39621: LD_STRING D20-Con-1
39623: PPUSH
39624: CALL_OW 88
// if IsOk ( Kurt ) then
39628: LD_EXP 30
39632: PPUSH
39633: CALL_OW 302
39637: IFFALSE 39651
// Say ( Kurt , D20-Kurt-1 ) ;
39639: LD_EXP 30
39643: PPUSH
39644: LD_STRING D20-Kurt-1
39646: PPUSH
39647: CALL_OW 88
// if IsOk ( Kikuchi ) then
39651: LD_EXP 15
39655: PPUSH
39656: CALL_OW 302
39660: IFFALSE 39674
// Say ( Kikuchi , D20-Yam-1 ) ;
39662: LD_EXP 15
39666: PPUSH
39667: LD_STRING D20-Yam-1
39669: PPUSH
39670: CALL_OW 88
// if IsOk ( Frank ) then
39674: LD_EXP 14
39678: PPUSH
39679: CALL_OW 302
39683: IFFALSE 39697
// Say ( Frank , D20-Frank-1 ) ;
39685: LD_EXP 14
39689: PPUSH
39690: LD_STRING D20-Frank-1
39692: PPUSH
39693: CALL_OW 88
// DialogueOff ;
39697: CALL_OW 7
// if AllianceEscape = 1 then
39701: LD_EXP 91
39705: PUSH
39706: LD_INT 1
39708: EQUAL
39709: IFFALSE 39723
// AddMedal ( Roth , 1 ) else
39711: LD_STRING Roth
39713: PPUSH
39714: LD_INT 1
39716: PPUSH
39717: CALL_OW 101
39721: GO 39734
// AddMedal ( Roth , - 1 ) ;
39723: LD_STRING Roth
39725: PPUSH
39726: LD_INT 1
39728: NEG
39729: PPUSH
39730: CALL_OW 101
// if behemothStatus = 1 then
39734: LD_EXP 60
39738: PUSH
39739: LD_INT 1
39741: EQUAL
39742: IFFALSE 39756
// AddMedal ( Project , 1 ) else
39744: LD_STRING Project
39746: PPUSH
39747: LD_INT 1
39749: PPUSH
39750: CALL_OW 101
39754: GO 39767
// AddMedal ( Project , - 1 ) ;
39756: LD_STRING Project
39758: PPUSH
39759: LD_INT 1
39761: NEG
39762: PPUSH
39763: CALL_OW 101
// if unitLost = 0 then
39767: LD_EXP 98
39771: PUSH
39772: LD_INT 0
39774: EQUAL
39775: IFFALSE 39789
// AddMedal ( NoLosses , 1 ) else
39777: LD_STRING NoLosses
39779: PPUSH
39780: LD_INT 1
39782: PPUSH
39783: CALL_OW 101
39787: GO 39800
// AddMedal ( NoLosses , - 1 ) ;
39789: LD_STRING NoLosses
39791: PPUSH
39792: LD_INT 1
39794: NEG
39795: PPUSH
39796: CALL_OW 101
// GiveMedals ( MAIN ) ;
39800: LD_STRING MAIN
39802: PPUSH
39803: CALL_OW 102
// YouWin ;
39807: CALL_OW 103
// end ; end_of_file
39811: END
// every 0 0$1 trigger IsDead ( JMM ) do
39812: LD_EXP 1
39816: PPUSH
39817: CALL_OW 301
39821: IFFALSE 39833
39823: GO 39825
39825: DISABLE
// YouLost ( JMM ) ;
39826: LD_STRING JMM
39828: PPUSH
39829: CALL_OW 104
39833: END
