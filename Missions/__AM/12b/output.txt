// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike , Khatam ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export cinematics , skip ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 78
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 79
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 80
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 82
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 81
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 83
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 76
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 77
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 65
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 66
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 67
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 72
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 68
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 70
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 69
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 74
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 71
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 54
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 92
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 64
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 55
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 61
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 62
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 93
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 94
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 95
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 57
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 58
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 59
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 101
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 60
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 98
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 84
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 85
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 86
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 96
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 97
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 100
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 102
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 105
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// cinematics := false ;
 378: LD_ADDR_EXP 103
 382: PUSH
 383: LD_INT 0
 385: ST_TO_ADDR
// skip := false ;
 386: LD_ADDR_EXP 104
 390: PUSH
 391: LD_INT 0
 393: ST_TO_ADDR
// PrepareHeroes ;
 394: CALL 743 0 0
// PrepareHeroesFromEpsilon ;
 398: CALL 1280 0 0
// PrepareRandoms ;
 402: CALL 1624 0 0
// PrepareLegion ;
 406: CALL 3867 0 0
// PrepareRussians ;
 410: CALL 4264 0 0
// PrepareAlliance ;
 414: CALL 6011 0 0
// PrepareDifficulty ;
 418: CALL 7556 0 0
// SetBName ( RuDep2 , zhukov ) ;
 422: LD_INT 23
 424: PPUSH
 425: LD_STRING zhukov
 427: PPUSH
 428: CALL_OW 500
// end ;
 432: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 433: LD_EXP 105
 437: PUSH
 438: LD_INT 1
 440: EQUAL
 441: IFFALSE 740
 443: GO 445
 445: DISABLE
 446: LD_INT 0
 448: PPUSH
// begin enable ;
 449: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 21
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 501
// SetLives ( i , 1000 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: LD_INT 1000
 494: PPUSH
 495: CALL_OW 234
 499: GO 484
 501: POP
 502: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 503: LD_ADDR_VAR 0 1
 507: PUSH
 508: LD_INT 22
 510: PUSH
 511: LD_INT 1
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 2
 520: PUSH
 521: LD_INT 30
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 30
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PPUSH
 550: CALL_OW 69
 554: PUSH
 555: FOR_IN
 556: IFFALSE 580
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 558: LD_VAR 0 1
 562: PPUSH
 563: CALL_OW 274
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_INT 9999
 573: PPUSH
 574: CALL_OW 277
 578: GO 555
 580: POP
 581: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 582: LD_ADDR_VAR 0 1
 586: PUSH
 587: LD_INT 22
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 2
 599: PUSH
 600: LD_INT 30
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 30
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PPUSH
 629: CALL_OW 69
 633: PUSH
 634: FOR_IN
 635: IFFALSE 659
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 637: LD_VAR 0 1
 641: PPUSH
 642: CALL_OW 274
 646: PPUSH
 647: LD_INT 2
 649: PPUSH
 650: LD_INT 9999
 652: PPUSH
 653: CALL_OW 277
 657: GO 634
 659: POP
 660: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 661: LD_ADDR_VAR 0 1
 665: PUSH
 666: LD_INT 22
 668: PUSH
 669: LD_INT 1
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 30
 691: PUSH
 692: LD_INT 1
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: LIST
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: PPUSH
 708: CALL_OW 69
 712: PUSH
 713: FOR_IN
 714: IFFALSE 738
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 716: LD_VAR 0 1
 720: PPUSH
 721: CALL_OW 274
 725: PPUSH
 726: LD_INT 3
 728: PPUSH
 729: LD_INT 9999
 731: PPUSH
 732: CALL_OW 277
 736: GO 713
 738: POP
 739: POP
// end ; end_of_file
 740: PPOPN 1
 742: END
// export function PrepareHeroes ; begin
 743: LD_INT 0
 745: PPUSH
// uc_side = 1 ;
 746: LD_ADDR_OWVAR 20
 750: PUSH
 751: LD_INT 1
 753: ST_TO_ADDR
// uc_nation = 1 ;
 754: LD_ADDR_OWVAR 21
 758: PUSH
 759: LD_INT 1
 761: ST_TO_ADDR
// if JMMVeh = [ ] then
 762: LD_EXP 78
 766: PUSH
 767: EMPTY
 768: EQUAL
 769: IFFALSE 815
// begin vc_engine = 3 ;
 771: LD_ADDR_OWVAR 39
 775: PUSH
 776: LD_INT 3
 778: ST_TO_ADDR
// vc_control = 1 ;
 779: LD_ADDR_OWVAR 38
 783: PUSH
 784: LD_INT 1
 786: ST_TO_ADDR
// vc_chassis = 5 ;
 787: LD_ADDR_OWVAR 37
 791: PUSH
 792: LD_INT 5
 794: ST_TO_ADDR
// vc_weapon = 9 ;
 795: LD_ADDR_OWVAR 40
 799: PUSH
 800: LD_INT 9
 802: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 803: LD_ADDR_EXP 24
 807: PUSH
 808: CALL_OW 45
 812: ST_TO_ADDR
// end else
 813: GO 897
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 815: LD_ADDR_OWVAR 37
 819: PUSH
 820: LD_EXP 78
 824: PUSH
 825: LD_INT 1
 827: ARRAY
 828: PUSH
 829: LD_INT 1
 831: ARRAY
 832: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 833: LD_ADDR_OWVAR 39
 837: PUSH
 838: LD_EXP 78
 842: PUSH
 843: LD_INT 2
 845: ARRAY
 846: PUSH
 847: LD_INT 1
 849: ARRAY
 850: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 851: LD_ADDR_OWVAR 38
 855: PUSH
 856: LD_EXP 78
 860: PUSH
 861: LD_INT 3
 863: ARRAY
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 869: LD_ADDR_OWVAR 40
 873: PUSH
 874: LD_EXP 78
 878: PUSH
 879: LD_INT 4
 881: ARRAY
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 887: LD_ADDR_EXP 24
 891: PUSH
 892: CALL_OW 45
 896: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 897: LD_EXP 79
 901: PUSH
 902: EMPTY
 903: EQUAL
 904: NOT
 905: IFFALSE 989
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 907: LD_ADDR_OWVAR 37
 911: PUSH
 912: LD_EXP 79
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 925: LD_ADDR_OWVAR 39
 929: PUSH
 930: LD_EXP 79
 934: PUSH
 935: LD_INT 2
 937: ARRAY
 938: PUSH
 939: LD_INT 1
 941: ARRAY
 942: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 943: LD_ADDR_OWVAR 38
 947: PUSH
 948: LD_EXP 79
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 961: LD_ADDR_OWVAR 40
 965: PUSH
 966: LD_EXP 79
 970: PUSH
 971: LD_INT 4
 973: ARRAY
 974: PUSH
 975: LD_INT 1
 977: ARRAY
 978: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 979: LD_ADDR_EXP 25
 983: PUSH
 984: CALL_OW 45
 988: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 989: LD_EXP 24
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
1001: LD_EXP 25
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
1013: LD_EXP 24
1017: PPUSH
1018: LD_INT 99
1020: PPUSH
1021: LD_INT 154
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL_OW 48
// if JMMGirlVeh then
1031: LD_EXP 79
1035: IFFALSE 1055
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1037: LD_EXP 25
1041: PPUSH
1042: LD_INT 98
1044: PPUSH
1045: LD_INT 159
1047: PPUSH
1048: LD_INT 0
1050: PPUSH
1051: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_STRING 14_JMM
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: CALL 6656 0 2
1070: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1071: LD_EXP 1
1075: PPUSH
1076: LD_EXP 24
1080: PPUSH
1081: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1085: LD_EXP 79
1089: PUSH
1090: EMPTY
1091: EQUAL
1092: NOT
1093: IFFALSE 1215
// begin if JMMGirl = 1 then
1095: LD_EXP 80
1099: PUSH
1100: LD_INT 1
1102: EQUAL
1103: IFFALSE 1135
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1105: LD_ADDR_EXP 2
1109: PUSH
1110: LD_STRING 14_Joan
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: CALL 6656 0 2
1120: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1121: LD_EXP 2
1125: PPUSH
1126: LD_EXP 25
1130: PPUSH
1131: CALL_OW 52
// end ; if JMMGirl = 2 then
1135: LD_EXP 80
1139: PUSH
1140: LD_INT 2
1142: EQUAL
1143: IFFALSE 1175
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1145: LD_ADDR_EXP 4
1149: PUSH
1150: LD_STRING 14_Lisa
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL 6656 0 2
1160: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_EXP 25
1170: PPUSH
1171: CALL_OW 52
// end ; if JMMGirl = 3 then
1175: LD_EXP 80
1179: PUSH
1180: LD_INT 3
1182: EQUAL
1183: IFFALSE 1215
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_STRING 14_Connie
1192: PPUSH
1193: LD_INT 1
1195: PPUSH
1196: CALL 6656 0 2
1200: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1201: LD_EXP 16
1205: PPUSH
1206: LD_EXP 25
1210: PPUSH
1211: CALL_OW 52
// end ; end ; uc_side = 4 ;
1215: LD_ADDR_OWVAR 20
1219: PUSH
1220: LD_INT 4
1222: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1223: LD_ADDR_EXP 17
1227: PUSH
1228: LD_STRING Powell
1230: PPUSH
1231: LD_INT 0
1233: PPUSH
1234: CALL 6656 0 2
1238: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1239: LD_EXP 17
1243: PPUSH
1244: LD_INT 42
1246: PPUSH
1247: LD_INT 62
1249: PPUSH
1250: LD_INT 5
1252: PPUSH
1253: LD_INT 0
1255: PPUSH
1256: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1260: LD_EXP 17
1264: PPUSH
1265: LD_INT 43
1267: PPUSH
1268: LD_INT 63
1270: PPUSH
1271: CALL_OW 118
// end ;
1275: LD_VAR 0 1
1279: RET
// export function PrepareHeroesFromEpsilon ; begin
1280: LD_INT 0
1282: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1283: LD_ADDR_EXP 4
1287: PUSH
1288: LD_STRING Lisa
1290: PPUSH
1291: CALL 6713 0 1
1295: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1296: LD_ADDR_EXP 5
1300: PUSH
1301: LD_STRING Donaldson
1303: PPUSH
1304: CALL 6713 0 1
1308: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1309: LD_ADDR_EXP 6
1313: PUSH
1314: LD_STRING Bobby
1316: PPUSH
1317: CALL 6713 0 1
1321: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1322: LD_ADDR_EXP 7
1326: PUSH
1327: LD_STRING Cyrus
1329: PPUSH
1330: CALL 6713 0 1
1334: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1335: LD_ADDR_EXP 8
1339: PUSH
1340: LD_STRING Denis
1342: PPUSH
1343: CALL 6713 0 1
1347: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1348: LD_ADDR_EXP 9
1352: PUSH
1353: LD_STRING Brown
1355: PPUSH
1356: CALL 6713 0 1
1360: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1361: LD_ADDR_EXP 10
1365: PUSH
1366: LD_STRING Gladstone
1368: PPUSH
1369: CALL 6713 0 1
1373: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1374: LD_ADDR_EXP 11
1378: PUSH
1379: LD_STRING Houten
1381: PPUSH
1382: CALL 6713 0 1
1386: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1387: LD_ADDR_EXP 12
1391: PUSH
1392: LD_STRING Cornel
1394: PPUSH
1395: CALL 6713 0 1
1399: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1400: LD_ADDR_EXP 13
1404: PUSH
1405: LD_STRING Gary
1407: PPUSH
1408: CALL 6713 0 1
1412: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1413: LD_ADDR_EXP 14
1417: PUSH
1418: LD_STRING Frank
1420: PPUSH
1421: CALL 6713 0 1
1425: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1426: LD_ADDR_EXP 15
1430: PUSH
1431: LD_STRING Kikuchi
1433: PPUSH
1434: CALL 6713 0 1
1438: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1439: LD_EXP 4
1443: PPUSH
1444: LD_INT 6
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1454: LD_EXP 5
1458: PPUSH
1459: LD_INT 6
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1469: LD_EXP 6
1473: PPUSH
1474: LD_INT 6
1476: PPUSH
1477: LD_INT 0
1479: PPUSH
1480: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1484: LD_EXP 7
1488: PPUSH
1489: LD_INT 6
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1499: LD_EXP 8
1503: PPUSH
1504: LD_INT 6
1506: PPUSH
1507: LD_INT 0
1509: PPUSH
1510: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1514: LD_EXP 9
1518: PPUSH
1519: LD_INT 6
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1529: LD_EXP 10
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1544: LD_EXP 11
1548: PPUSH
1549: LD_INT 6
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1559: LD_EXP 12
1563: PPUSH
1564: LD_INT 6
1566: PPUSH
1567: LD_INT 0
1569: PPUSH
1570: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1574: LD_EXP 13
1578: PPUSH
1579: LD_INT 6
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1589: LD_EXP 14
1593: PPUSH
1594: LD_INT 6
1596: PPUSH
1597: LD_INT 0
1599: PPUSH
1600: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1604: LD_EXP 15
1608: PPUSH
1609: LD_INT 6
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL_OW 49
// end ;
1619: LD_VAR 0 1
1623: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1624: LD_INT 0
1626: PPUSH
1627: PPUSH
1628: PPUSH
1629: PPUSH
1630: PPUSH
// uc_side = 4 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 4
1638: ST_TO_ADDR
// uc_nation = 1 ;
1639: LD_ADDR_OWVAR 21
1643: PUSH
1644: LD_INT 1
1646: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1647: LD_ADDR_EXP 18
1651: PUSH
1652: LD_STRING 13s_others
1654: PPUSH
1655: CALL_OW 31
1659: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: LD_INT 22
1667: PUSH
1668: LD_INT 4
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: LD_INT 21
1677: PUSH
1678: LD_INT 1
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PPUSH
1689: CALL_OW 69
1693: PUSH
1694: LD_EXP 17
1698: PUSH
1699: EMPTY
1700: LIST
1701: DIFF
1702: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 4
1712: PPUSH
1713: CALL 6843 0 1
1717: ST_TO_ADDR
// if others13 >= 8 then
1718: LD_EXP 18
1722: PUSH
1723: LD_INT 8
1725: GREATEREQUAL
1726: IFFALSE 1787
// begin for i = 1 to 8 do
1728: LD_ADDR_VAR 0 2
1732: PUSH
1733: DOUBLE
1734: LD_INT 1
1736: DEC
1737: ST_TO_ADDR
1738: LD_INT 8
1740: PUSH
1741: FOR_TO
1742: IFFALSE 1783
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1744: LD_EXP 18
1748: PUSH
1749: LD_INT 1
1751: ARRAY
1752: PPUSH
1753: LD_INT 6
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1763: LD_ADDR_EXP 18
1767: PUSH
1768: LD_EXP 18
1772: PPUSH
1773: LD_INT 1
1775: PPUSH
1776: CALL_OW 3
1780: ST_TO_ADDR
// end ;
1781: GO 1741
1783: POP
1784: POP
// end else
1785: GO 1846
// begin for i = 1 to others13 do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: DOUBLE
1793: LD_INT 1
1795: DEC
1796: ST_TO_ADDR
1797: LD_EXP 18
1801: PUSH
1802: FOR_TO
1803: IFFALSE 1844
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1805: LD_EXP 18
1809: PUSH
1810: LD_INT 1
1812: ARRAY
1813: PPUSH
1814: LD_INT 6
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: LD_EXP 18
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: CALL_OW 3
1841: ST_TO_ADDR
// end ;
1842: GO 1802
1844: POP
1845: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1846: LD_ADDR_VAR 0 4
1850: PUSH
1851: LD_INT 22
1853: PUSH
1854: LD_INT 4
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 21
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 69
1879: PUSH
1880: LD_EXP 17
1884: PUSH
1885: EMPTY
1886: LIST
1887: DIFF
1888: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1889: LD_ADDR_VAR 0 5
1893: PUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: CALL 6843 0 1
1903: ST_TO_ADDR
// if others13 >= 6 then
1904: LD_EXP 18
1908: PUSH
1909: LD_INT 6
1911: GREATEREQUAL
1912: IFFALSE 1973
// begin for i = 1 to 6 do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_INT 6
1926: PUSH
1927: FOR_TO
1928: IFFALSE 1969
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1930: LD_EXP 18
1934: PUSH
1935: LD_INT 1
1937: ARRAY
1938: PPUSH
1939: LD_INT 6
1941: PPUSH
1942: LD_INT 0
1944: PPUSH
1945: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1949: LD_ADDR_EXP 18
1953: PUSH
1954: LD_EXP 18
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL_OW 3
1966: ST_TO_ADDR
// end ;
1967: GO 1927
1969: POP
1970: POP
// end else
1971: GO 2032
// begin for i = 1 to others13 do
1973: LD_ADDR_VAR 0 2
1977: PUSH
1978: DOUBLE
1979: LD_INT 1
1981: DEC
1982: ST_TO_ADDR
1983: LD_EXP 18
1987: PUSH
1988: FOR_TO
1989: IFFALSE 2030
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1991: LD_EXP 18
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: LD_INT 6
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
2010: LD_ADDR_EXP 18
2014: PUSH
2015: LD_EXP 18
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL_OW 3
2027: ST_TO_ADDR
// end ;
2028: GO 1988
2030: POP
2031: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2032: LD_ADDR_VAR 0 4
2036: PUSH
2037: LD_INT 22
2039: PUSH
2040: LD_INT 4
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 21
2049: PUSH
2050: LD_INT 1
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PPUSH
2061: CALL_OW 69
2065: PUSH
2066: LD_EXP 17
2070: PUSH
2071: EMPTY
2072: LIST
2073: DIFF
2074: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 4
2084: PPUSH
2085: CALL 6843 0 1
2089: ST_TO_ADDR
// if heroLenght < 19 then
2090: LD_VAR 0 5
2094: PUSH
2095: LD_INT 19
2097: LESS
2098: IFFALSE 2196
// for i = 1 to 19 - heroLenght do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: DOUBLE
2106: LD_INT 1
2108: DEC
2109: ST_TO_ADDR
2110: LD_INT 19
2112: PUSH
2113: LD_VAR 0 5
2117: MINUS
2118: PUSH
2119: FOR_TO
2120: IFFALSE 2194
// begin hc_gallery =  ;
2122: LD_ADDR_OWVAR 33
2126: PUSH
2127: LD_STRING 
2129: ST_TO_ADDR
// hc_name =  ;
2130: LD_ADDR_OWVAR 26
2134: PUSH
2135: LD_STRING 
2137: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2138: LD_INT 0
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: LD_INT 4
2146: PPUSH
2147: CALL_OW 12
2151: PPUSH
2152: LD_INT 6
2154: PPUSH
2155: LD_INT 8
2157: PPUSH
2158: CALL_OW 12
2162: PPUSH
2163: CALL_OW 380
// un = CreateHuman ;
2167: LD_ADDR_VAR 0 3
2171: PUSH
2172: CALL_OW 44
2176: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2177: LD_VAR 0 3
2181: PPUSH
2182: LD_INT 6
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: CALL_OW 49
// end ;
2192: GO 2119
2194: POP
2195: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2196: LD_ADDR_VAR 0 4
2200: PUSH
2201: LD_INT 22
2203: PUSH
2204: LD_INT 4
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 21
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PUSH
2230: LD_EXP 17
2234: PUSH
2235: LD_EXP 1
2239: PUSH
2240: LD_EXP 2
2244: PUSH
2245: LD_EXP 3
2249: PUSH
2250: LD_EXP 4
2254: PUSH
2255: LD_EXP 5
2259: PUSH
2260: LD_EXP 6
2264: PUSH
2265: LD_EXP 7
2269: PUSH
2270: LD_EXP 8
2274: PUSH
2275: LD_EXP 9
2279: PUSH
2280: LD_EXP 10
2284: PUSH
2285: LD_EXP 11
2289: PUSH
2290: LD_EXP 12
2294: PUSH
2295: LD_EXP 13
2299: PUSH
2300: LD_EXP 14
2304: PUSH
2305: LD_EXP 15
2309: PUSH
2310: LD_EXP 16
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: DIFF
2334: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2335: LD_ADDR_EXP 65
2339: PUSH
2340: LD_VAR 0 4
2344: PPUSH
2345: LD_INT 1
2347: PPUSH
2348: CALL 7189 0 2
2352: ST_TO_ADDR
// for i = 1 to 8 do
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 8
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2397
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2369: LD_ADDR_EXP 66
2373: PUSH
2374: LD_EXP 66
2378: PUSH
2379: LD_EXP 65
2383: PUSH
2384: LD_VAR 0 2
2388: ARRAY
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
2395: GO 2366
2397: POP
2398: POP
// SetClass ( amUnitsAttack , 1 ) ;
2399: LD_EXP 66
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: CALL_OW 336
// end ;
2411: LD_VAR 0 1
2415: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2416: LD_INT 0
2418: PPUSH
2419: PPUSH
2420: PPUSH
// uc_side = 1 ;
2421: LD_ADDR_OWVAR 20
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// uc_nation = 1 ;
2429: LD_ADDR_OWVAR 21
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// for i := 1 to 5 do
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: DOUBLE
2443: LD_INT 1
2445: DEC
2446: ST_TO_ADDR
2447: LD_INT 5
2449: PUSH
2450: FOR_TO
2451: IFFALSE 2535
// begin vc_engine = 3 ;
2453: LD_ADDR_OWVAR 39
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_control = 3 ;
2461: LD_ADDR_OWVAR 38
2465: PUSH
2466: LD_INT 3
2468: ST_TO_ADDR
// vc_chassis = 3 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 3
2476: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2477: LD_ADDR_OWVAR 40
2481: PUSH
2482: LD_INT 5
2484: PUSH
2485: LD_INT 9
2487: PUSH
2488: LD_INT 7
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 1
2498: PPUSH
2499: LD_INT 3
2501: PPUSH
2502: CALL_OW 12
2506: ARRAY
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 14
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2450
2535: POP
2536: POP
// vc_engine = 3 ;
2537: LD_ADDR_OWVAR 39
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_control = 1 ;
2545: LD_ADDR_OWVAR 38
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// vc_chassis = 3 ;
2553: LD_ADDR_OWVAR 37
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2561: LD_ADDR_OWVAR 40
2565: PUSH
2566: LD_INT 5
2568: PUSH
2569: LD_INT 9
2571: PUSH
2572: LD_INT 7
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 1
2582: PPUSH
2583: LD_INT 3
2585: PPUSH
2586: CALL_OW 12
2590: ARRAY
2591: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2592: LD_ADDR_EXP 25
2596: PUSH
2597: CALL_OW 45
2601: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2602: LD_EXP 25
2606: PPUSH
2607: LD_INT 14
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if JMMGirl = 1 then
2617: LD_EXP 80
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2678
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2627: LD_ADDR_EXP 2
2631: PUSH
2632: LD_STRING 14_Joan
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL 6656 0 2
2642: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2643: LD_EXP 2
2647: PPUSH
2648: LD_EXP 25
2652: PPUSH
2653: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2657: LD_EXP 25
2661: PPUSH
2662: CALL_OW 87
// SayRadio ( Joan , D10BW-Joan-1 ) ;
2666: LD_EXP 2
2670: PPUSH
2671: LD_STRING D10BW-Joan-1
2673: PPUSH
2674: CALL_OW 94
// end ; if JMMGirl = 2 then
2678: LD_EXP 80
2682: PUSH
2683: LD_INT 2
2685: EQUAL
2686: IFFALSE 2739
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2688: LD_ADDR_EXP 4
2692: PUSH
2693: LD_STRING 14_Lisa
2695: PPUSH
2696: LD_INT 1
2698: PPUSH
2699: CALL 6656 0 2
2703: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2704: LD_EXP 4
2708: PPUSH
2709: LD_EXP 25
2713: PPUSH
2714: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2718: LD_EXP 25
2722: PPUSH
2723: CALL_OW 87
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
2727: LD_EXP 4
2731: PPUSH
2732: LD_STRING D10BW-Lisa-1
2734: PPUSH
2735: CALL_OW 94
// end ; if JMMGirl = 3 then
2739: LD_EXP 80
2743: PUSH
2744: LD_INT 3
2746: EQUAL
2747: IFFALSE 2800
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2749: LD_ADDR_EXP 16
2753: PUSH
2754: LD_STRING 14_Connie
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: CALL 6656 0 2
2764: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2765: LD_EXP 16
2769: PPUSH
2770: LD_EXP 25
2774: PPUSH
2775: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2779: LD_EXP 25
2783: PPUSH
2784: CALL_OW 87
// SayRadio ( Lisa , D10BW-Con-1 ) ;
2788: LD_EXP 4
2792: PPUSH
2793: LD_STRING D10BW-Con-1
2795: PPUSH
2796: CALL_OW 94
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
// uc_side = 1 ;
2816: LD_ADDR_OWVAR 20
2820: PUSH
2821: LD_INT 1
2823: ST_TO_ADDR
// uc_nation = 1 ;
2824: LD_ADDR_OWVAR 21
2828: PUSH
2829: LD_INT 1
2831: ST_TO_ADDR
// omegaVeh = [ ] ;
2832: LD_ADDR_VAR 0 3
2836: PUSH
2837: EMPTY
2838: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2839: LD_STRING 13s_Lisa
2841: PPUSH
2842: CALL_OW 28
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 2865
// Lisa = PrepareUnitOmega ( Lisa ) ;
2852: LD_ADDR_EXP 4
2856: PUSH
2857: LD_STRING Lisa
2859: PPUSH
2860: CALL 6770 0 1
2864: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2865: LD_STRING 13s_Donaldson
2867: PPUSH
2868: CALL_OW 28
2872: PUSH
2873: LD_INT 0
2875: EQUAL
2876: IFFALSE 2891
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2878: LD_ADDR_EXP 5
2882: PUSH
2883: LD_STRING Donaldson
2885: PPUSH
2886: CALL 6770 0 1
2890: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2891: LD_STRING 13s_Bobby
2893: PPUSH
2894: CALL_OW 28
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2917
// Bobby = PrepareUnitOmega ( Bobby ) ;
2904: LD_ADDR_EXP 6
2908: PUSH
2909: LD_STRING Bobby
2911: PPUSH
2912: CALL 6770 0 1
2916: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2917: LD_STRING 13s_Cyrus
2919: PPUSH
2920: CALL_OW 28
2924: PUSH
2925: LD_INT 0
2927: EQUAL
2928: IFFALSE 2943
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2930: LD_ADDR_EXP 7
2934: PUSH
2935: LD_STRING Cyrus
2937: PPUSH
2938: CALL 6770 0 1
2942: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2943: LD_STRING 13s_Denis
2945: PPUSH
2946: CALL_OW 28
2950: PUSH
2951: LD_INT 0
2953: EQUAL
2954: IFFALSE 2969
// Denis = PrepareUnitOmega ( Denis ) ;
2956: LD_ADDR_EXP 8
2960: PUSH
2961: LD_STRING Denis
2963: PPUSH
2964: CALL 6770 0 1
2968: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2969: LD_STRING 13s_Brown
2971: PPUSH
2972: CALL_OW 28
2976: PUSH
2977: LD_INT 0
2979: EQUAL
2980: IFFALSE 2995
// Brown = PrepareUnitOmega ( Brown ) ;
2982: LD_ADDR_EXP 9
2986: PUSH
2987: LD_STRING Brown
2989: PPUSH
2990: CALL 6770 0 1
2994: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2995: LD_STRING 13s_Gladstone
2997: PPUSH
2998: CALL_OW 28
3002: PUSH
3003: LD_INT 0
3005: EQUAL
3006: IFFALSE 3021
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
3008: LD_ADDR_EXP 10
3012: PUSH
3013: LD_STRING Gladstone
3015: PPUSH
3016: CALL 6770 0 1
3020: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3021: LD_STRING 13s_Houten
3023: PPUSH
3024: CALL_OW 28
3028: PUSH
3029: LD_INT 0
3031: EQUAL
3032: IFFALSE 3047
// Houten = PrepareUnitOmega ( Houten ) ;
3034: LD_ADDR_EXP 11
3038: PUSH
3039: LD_STRING Houten
3041: PPUSH
3042: CALL 6770 0 1
3046: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3047: LD_STRING 13s_Cornell
3049: PPUSH
3050: CALL_OW 28
3054: PUSH
3055: LD_INT 0
3057: EQUAL
3058: IFFALSE 3073
// Cornel = PrepareUnitOmega ( Cornell ) ;
3060: LD_ADDR_EXP 12
3064: PUSH
3065: LD_STRING Cornell
3067: PPUSH
3068: CALL 6770 0 1
3072: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3073: LD_STRING 13s_Gary
3075: PPUSH
3076: CALL_OW 28
3080: PUSH
3081: LD_INT 0
3083: EQUAL
3084: IFFALSE 3099
// Gary = PrepareUnitOmega ( Gary ) ;
3086: LD_ADDR_EXP 13
3090: PUSH
3091: LD_STRING Gary
3093: PPUSH
3094: CALL 6770 0 1
3098: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3099: LD_STRING 13s_Frank
3101: PPUSH
3102: CALL_OW 28
3106: PUSH
3107: LD_INT 0
3109: EQUAL
3110: IFFALSE 3125
// Frank = PrepareUnitOmega ( Frank ) ;
3112: LD_ADDR_EXP 14
3116: PUSH
3117: LD_STRING Frank
3119: PPUSH
3120: CALL 6770 0 1
3124: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3125: LD_STRING 13s_Kikuchi
3127: PPUSH
3128: CALL_OW 28
3132: PUSH
3133: LD_INT 0
3135: EQUAL
3136: IFFALSE 3151
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3138: LD_ADDR_EXP 15
3142: PUSH
3143: LD_STRING Kikuchi
3145: PPUSH
3146: CALL 6770 0 1
3150: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
3151: LD_EXP 80
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: PUSH
3160: LD_EXP 80
3164: PUSH
3165: LD_INT 2
3167: EQUAL
3168: OR
3169: IFFALSE 3184
// Connie = PrepareUnitOmega ( Connie ) ;
3171: LD_ADDR_EXP 16
3175: PUSH
3176: LD_STRING Connie
3178: PPUSH
3179: CALL 6770 0 1
3183: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3184: LD_ADDR_EXP 22
3188: PUSH
3189: LD_STRING Gordon
3191: PPUSH
3192: CALL 6770 0 1
3196: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3197: LD_ADDR_EXP 23
3201: PUSH
3202: LD_STRING Peter
3204: PPUSH
3205: CALL 6770 0 1
3209: ST_TO_ADDR
// if StevensStatus = 1 then
3210: LD_EXP 77
3214: PUSH
3215: LD_INT 1
3217: EQUAL
3218: IFFALSE 3235
// Stevens = PrepareUnitOmega ( Stevens ) else
3220: LD_ADDR_EXP 3
3224: PUSH
3225: LD_STRING Stevens
3227: PPUSH
3228: CALL 6770 0 1
3232: ST_TO_ADDR
3233: GO 3248
// Baker = PrepareUnitOmega ( Baker ) ;
3235: LD_ADDR_EXP 21
3239: PUSH
3240: LD_STRING Baker
3242: PPUSH
3243: CALL 6770 0 1
3247: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3248: LD_ADDR_EXP 19
3252: PUSH
3253: LD_STRING 15_other_survivors
3255: PPUSH
3256: CALL_OW 31
3260: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3261: LD_ADDR_VAR 0 7
3265: PUSH
3266: LD_STRING 15_Vehicles_1
3268: PPUSH
3269: EMPTY
3270: PPUSH
3271: CALL_OW 30
3275: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3276: LD_ADDR_VAR 0 8
3280: PUSH
3281: LD_STRING 15_ResourcesInCargo_1
3283: PPUSH
3284: EMPTY
3285: PPUSH
3286: CALL_OW 30
3290: ST_TO_ADDR
// for i := 1 to vehicles do
3291: LD_ADDR_VAR 0 2
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_VAR 0 7
3305: PUSH
3306: FOR_TO
3307: IFFALSE 3532
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3309: LD_ADDR_OWVAR 21
3313: PUSH
3314: LD_VAR 0 7
3318: PUSH
3319: LD_VAR 0 2
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3329: LD_ADDR_OWVAR 37
3333: PUSH
3334: LD_VAR 0 7
3338: PUSH
3339: LD_VAR 0 2
3343: ARRAY
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3349: LD_ADDR_OWVAR 39
3353: PUSH
3354: LD_VAR 0 7
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PUSH
3365: LD_INT 3
3367: ARRAY
3368: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3369: LD_ADDR_OWVAR 38
3373: PUSH
3374: LD_VAR 0 7
3378: PUSH
3379: LD_VAR 0 2
3383: ARRAY
3384: PUSH
3385: LD_INT 4
3387: ARRAY
3388: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3389: LD_ADDR_OWVAR 40
3393: PUSH
3394: LD_VAR 0 7
3398: PUSH
3399: LD_VAR 0 2
3403: ARRAY
3404: PUSH
3405: LD_INT 5
3407: ARRAY
3408: ST_TO_ADDR
// if vc_weapon = 8 then
3409: LD_OWVAR 40
3413: PUSH
3414: LD_INT 8
3416: EQUAL
3417: IFFALSE 3429
// vc_weapon = 9 else
3419: LD_ADDR_OWVAR 40
3423: PUSH
3424: LD_INT 9
3426: ST_TO_ADDR
3427: GO 3449
// vc_weapon = vehicles [ i ] [ 5 ] ;
3429: LD_ADDR_OWVAR 40
3433: PUSH
3434: LD_VAR 0 7
3438: PUSH
3439: LD_VAR 0 2
3443: ARRAY
3444: PUSH
3445: LD_INT 5
3447: ARRAY
3448: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3449: LD_ADDR_OWVAR 41
3453: PUSH
3454: LD_INT 40
3456: ST_TO_ADDR
// veh = CreateVehicle ;
3457: LD_ADDR_VAR 0 5
3461: PUSH
3462: CALL_OW 45
3466: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3467: LD_VAR 0 5
3471: PPUSH
3472: LD_INT 5
3474: PPUSH
3475: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3479: LD_VAR 0 5
3483: PPUSH
3484: LD_INT 300
3486: PPUSH
3487: LD_INT 800
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: LD_VAR 0 3
3508: PUSH
3509: LD_VAR 0 5
3513: ADD
3514: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3515: LD_VAR 0 5
3519: PPUSH
3520: LD_INT 16
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// end ;
3530: GO 3306
3532: POP
3533: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3534: LD_ADDR_VAR 0 9
3538: PUSH
3539: LD_INT 16
3541: PPUSH
3542: LD_INT 22
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 21
3554: PUSH
3555: LD_INT 2
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 34
3564: PUSH
3565: LD_INT 12
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: LD_INT 33
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 32
3584: PUSH
3585: LD_INT 3
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PPUSH
3599: CALL_OW 70
3603: ST_TO_ADDR
// if cargoList > 0 then
3604: LD_VAR 0 9
3608: PUSH
3609: LD_INT 0
3611: GREATER
3612: IFFALSE 3745
// for i = 1 to cargoList do
3614: LD_ADDR_VAR 0 2
3618: PUSH
3619: DOUBLE
3620: LD_INT 1
3622: DEC
3623: ST_TO_ADDR
3624: LD_VAR 0 9
3628: PUSH
3629: FOR_TO
3630: IFFALSE 3743
// begin if resources > 0 then
3632: LD_VAR 0 8
3636: PUSH
3637: LD_INT 0
3639: GREATER
3640: IFFALSE 3741
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3642: LD_VAR 0 9
3646: PUSH
3647: LD_VAR 0 2
3651: ARRAY
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_VAR 0 8
3660: PUSH
3661: LD_VAR 0 2
3665: ARRAY
3666: PUSH
3667: LD_INT 1
3669: ARRAY
3670: PPUSH
3671: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3675: LD_VAR 0 9
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: PPUSH
3686: LD_INT 2
3688: PPUSH
3689: LD_VAR 0 8
3693: PUSH
3694: LD_VAR 0 2
3698: ARRAY
3699: PUSH
3700: LD_INT 2
3702: ARRAY
3703: PPUSH
3704: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3708: LD_VAR 0 9
3712: PUSH
3713: LD_VAR 0 2
3717: ARRAY
3718: PPUSH
3719: LD_INT 3
3721: PPUSH
3722: LD_VAR 0 8
3726: PUSH
3727: LD_VAR 0 2
3731: ARRAY
3732: PUSH
3733: LD_INT 3
3735: ARRAY
3736: PPUSH
3737: CALL_OW 291
// end ; end ;
3741: GO 3629
3743: POP
3744: POP
// for i := 1 to heroesFromOmega do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_EXP 20
3759: PUSH
3760: FOR_TO
3761: IFFALSE 3791
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3763: LD_EXP 20
3767: PUSH
3768: LD_VAR 0 2
3772: ARRAY
3773: PPUSH
3774: LD_VAR 0 3
3778: PUSH
3779: LD_VAR 0 2
3783: ARRAY
3784: PPUSH
3785: CALL_OW 52
// end ;
3789: GO 3760
3791: POP
3792: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3793: LD_ADDR_VAR 0 6
3797: PUSH
3798: LD_VAR 0 3
3802: PPUSH
3803: LD_INT 58
3805: PUSH
3806: EMPTY
3807: LIST
3808: PPUSH
3809: CALL_OW 72
3813: ST_TO_ADDR
// for i := 1 to others13Omega do
3814: LD_ADDR_VAR 0 2
3818: PUSH
3819: DOUBLE
3820: LD_INT 1
3822: DEC
3823: ST_TO_ADDR
3824: LD_EXP 19
3828: PUSH
3829: FOR_TO
3830: IFFALSE 3860
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3832: LD_EXP 19
3836: PUSH
3837: LD_VAR 0 2
3841: ARRAY
3842: PPUSH
3843: LD_VAR 0 6
3847: PUSH
3848: LD_VAR 0 2
3852: ARRAY
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3829
3860: POP
3861: POP
// end ; end_of_file
3862: LD_VAR 0 1
3866: RET
// export function PrepareLegion ; var i ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
// uc_side = 8 ;
3871: LD_ADDR_OWVAR 20
3875: PUSH
3876: LD_INT 8
3878: ST_TO_ADDR
// uc_nation = 2 ;
3879: LD_ADDR_OWVAR 21
3883: PUSH
3884: LD_INT 2
3886: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3887: LD_ADDR_EXP 30
3891: PUSH
3892: LD_STRING Kurt
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 6656 0 2
3902: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3903: LD_ADDR_EXP 36
3907: PUSH
3908: LD_STRING Kozlov
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL 6656 0 2
3918: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3919: LD_INT 8
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: LD_INT 122
3927: PPUSH
3928: LD_INT 10
3930: PPUSH
3931: LD_INT 2
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3941: LD_INT 8
3943: PPUSH
3944: LD_INT 2
3946: PPUSH
3947: LD_INT 99
3949: PPUSH
3950: LD_INT 10
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: LD_INT 2
3958: PPUSH
3959: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3963: LD_INT 8
3965: PPUSH
3966: LD_INT 2
3968: PPUSH
3969: LD_INT 104
3971: PPUSH
3972: LD_INT 10
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: LD_INT 2
3980: PPUSH
3981: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3985: LD_INT 8
3987: PPUSH
3988: LD_INT 2
3990: PPUSH
3991: LD_INT 104
3993: PPUSH
3994: LD_INT 10
3996: PPUSH
3997: LD_INT 8
3999: PPUSH
4000: LD_INT 1
4002: PPUSH
4003: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
4007: LD_INT 8
4009: PPUSH
4010: LD_INT 2
4012: PPUSH
4013: LD_INT 118
4015: PPUSH
4016: LD_INT 10
4018: PPUSH
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4029: LD_INT 8
4031: PPUSH
4032: LD_INT 2
4034: PPUSH
4035: LD_INT 117
4037: PPUSH
4038: LD_INT 10
4040: PPUSH
4041: LD_INT 3
4043: PPUSH
4044: LD_INT 4
4046: PPUSH
4047: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4051: LD_INT 8
4053: PPUSH
4054: LD_INT 2
4056: PPUSH
4057: LD_INT 252
4059: PPUSH
4060: LD_INT 10
4062: PPUSH
4063: LD_INT 4
4065: PPUSH
4066: LD_INT 2
4068: PPUSH
4069: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4073: LD_ADDR_VAR 0 2
4077: PUSH
4078: LD_INT 22
4080: PUSH
4081: LD_INT 8
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 21
4090: PUSH
4091: LD_INT 3
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 30
4100: PUSH
4101: LD_INT 32
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 58
4110: PUSH
4111: EMPTY
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 69
4124: PUSH
4125: FOR_IN
4126: IFFALSE 4154
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4128: LD_INT 8
4130: PPUSH
4131: LD_INT 2
4133: PPUSH
4134: LD_VAR 0 2
4138: PPUSH
4139: LD_INT 10
4141: PPUSH
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 1
4147: PPUSH
4148: CALL 7750 0 6
4152: GO 4125
4154: POP
4155: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4156: LD_INT 8
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: LD_INT 140
4164: PPUSH
4165: LD_INT 10
4167: PPUSH
4168: LD_INT 3
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: CALL 7750 0 6
// arControler = UnitsInside ( ArControl ) ;
4178: LD_ADDR_EXP 56
4182: PUSH
4183: LD_INT 140
4185: PPUSH
4186: CALL_OW 313
4190: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4191: LD_INT 139
4193: PPUSH
4194: LD_EXP 56
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4207: LD_INT 138
4209: PPUSH
4210: LD_EXP 56
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: CALL_OW 195
// hc_name = Ali Hadarach ;
4223: LD_ADDR_OWVAR 26
4227: PUSH
4228: LD_STRING Ali Hadarach
4230: ST_TO_ADDR
// hc_gallery =  ;
4231: LD_ADDR_OWVAR 33
4235: PUSH
4236: LD_STRING 
4238: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 8
4244: PPUSH
4245: CALL_OW 383
// LegionFriend = CreateHuman ;
4249: LD_ADDR_EXP 53
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// end ; end_of_file
4259: LD_VAR 0 1
4263: RET
// export function PrepareRussians ; var i ; begin
4264: LD_INT 0
4266: PPUSH
4267: PPUSH
// uc_side = 3 ;
4268: LD_ADDR_OWVAR 20
4272: PUSH
4273: LD_INT 3
4275: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4276: LD_ADDR_EXP 26
4280: PUSH
4281: LD_STRING Platonov
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL 6656 0 2
4291: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4292: LD_EXP 26
4296: PPUSH
4297: LD_INT 23
4299: PPUSH
4300: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4304: LD_ADDR_EXP 27
4308: PUSH
4309: LD_STRING Yakotich
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: CALL 6656 0 2
4319: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4320: LD_EXP 27
4324: PPUSH
4325: LD_INT 26
4327: PPUSH
4328: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4332: LD_ADDR_EXP 37
4336: PUSH
4337: LD_STRING Kovalyuk
4339: PPUSH
4340: LD_INT 0
4342: PPUSH
4343: CALL 6656 0 2
4347: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4348: LD_EXP 37
4352: PPUSH
4353: LD_INT 3
4355: PPUSH
4356: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4360: LD_ADDR_EXP 58
4364: PUSH
4365: LD_EXP 58
4369: PUSH
4370: LD_EXP 37
4374: ADD
4375: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4376: LD_ADDR_EXP 38
4380: PUSH
4381: LD_STRING Oblukov
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL 6656 0 2
4391: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4392: LD_ADDR_EXP 39
4396: PUSH
4397: LD_STRING Bystrov
4399: PPUSH
4400: LD_INT 0
4402: PPUSH
4403: CALL 6656 0 2
4407: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4408: LD_ADDR_EXP 40
4412: PUSH
4413: LD_STRING Fadeev
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL 6656 0 2
4423: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4424: LD_ADDR_EXP 41
4428: PUSH
4429: LD_STRING Gleb
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL 6656 0 2
4439: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4440: LD_ADDR_EXP 42
4444: PUSH
4445: LD_STRING Petrosyan
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL 6656 0 2
4455: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4456: LD_ADDR_EXP 43
4460: PUSH
4461: LD_STRING Petrovova
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 6656 0 2
4471: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4472: LD_ADDR_EXP 44
4476: PUSH
4477: LD_STRING Kuzmov
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: CALL 6656 0 2
4487: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4488: LD_ADDR_EXP 45
4492: PUSH
4493: LD_STRING Mikhail
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL 6656 0 2
4503: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4504: LD_ADDR_EXP 46
4508: PUSH
4509: LD_STRING Furmanov
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL 6656 0 2
4519: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4520: LD_ADDR_EXP 47
4524: PUSH
4525: LD_STRING Belkov
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL 6656 0 2
4535: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4536: LD_EXP 38
4540: PPUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 21
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 30
4563: PUSH
4564: LD_INT 32
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 58
4573: PUSH
4574: EMPTY
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: PPUSH
4592: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4596: LD_EXP 40
4600: PPUSH
4601: LD_INT 22
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 30
4623: PUSH
4624: LD_INT 32
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 58
4633: PUSH
4634: EMPTY
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: PPUSH
4643: CALL_OW 69
4647: PUSH
4648: LD_INT 1
4650: ARRAY
4651: PPUSH
4652: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4656: LD_EXP 41
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 3
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 3
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 30
4683: PUSH
4684: LD_INT 32
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 58
4693: PUSH
4694: EMPTY
4695: LIST
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PUSH
4708: LD_INT 1
4710: ARRAY
4711: PPUSH
4712: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4716: LD_EXP 43
4720: PPUSH
4721: LD_INT 22
4723: PUSH
4724: LD_INT 3
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 21
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 30
4743: PUSH
4744: LD_INT 32
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 58
4753: PUSH
4754: EMPTY
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 69
4767: PUSH
4768: LD_INT 1
4770: ARRAY
4771: PPUSH
4772: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4776: LD_EXP 44
4780: PPUSH
4781: LD_INT 22
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 21
4793: PUSH
4794: LD_INT 3
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 30
4803: PUSH
4804: LD_INT 32
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 58
4813: PUSH
4814: EMPTY
4815: LIST
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: PPUSH
4823: CALL_OW 69
4827: PUSH
4828: LD_INT 1
4830: ARRAY
4831: PPUSH
4832: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4836: LD_EXP 46
4840: PPUSH
4841: LD_INT 22
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 30
4863: PUSH
4864: LD_INT 32
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 58
4873: PUSH
4874: EMPTY
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: PPUSH
4883: CALL_OW 69
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: PPUSH
4892: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4896: LD_EXP 47
4900: PPUSH
4901: LD_INT 22
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 21
4913: PUSH
4914: LD_INT 3
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 32
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 58
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4956: LD_EXP 39
4960: PPUSH
4961: LD_INT 2
4963: PPUSH
4964: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4968: LD_EXP 42
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4980: LD_EXP 45
4984: PPUSH
4985: LD_INT 26
4987: PPUSH
4988: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4992: LD_EXP 45
4996: PPUSH
4997: LD_INT 2
4999: PPUSH
5000: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
5004: LD_INT 3
5006: PPUSH
5007: LD_INT 3
5009: PPUSH
5010: LD_INT 26
5012: PPUSH
5013: LD_INT 10
5015: PPUSH
5016: LD_INT 2
5018: PPUSH
5019: LD_INT 5
5021: PPUSH
5022: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5026: LD_INT 3
5028: PPUSH
5029: LD_INT 3
5031: PPUSH
5032: LD_INT 23
5034: PPUSH
5035: LD_INT 10
5037: PPUSH
5038: LD_INT 2
5040: PPUSH
5041: LD_INT 4
5043: PPUSH
5044: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 3
5053: PPUSH
5054: LD_INT 27
5056: PPUSH
5057: LD_INT 10
5059: PPUSH
5060: LD_INT 9
5062: PPUSH
5063: LD_INT 6
5065: PPUSH
5066: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5070: LD_INT 3
5072: PPUSH
5073: LD_INT 3
5075: PPUSH
5076: LD_INT 27
5078: PPUSH
5079: LD_INT 10
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 3
5087: PPUSH
5088: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5092: LD_INT 3
5094: PPUSH
5095: LD_INT 3
5097: PPUSH
5098: LD_INT 4
5100: PPUSH
5101: LD_INT 10
5103: PPUSH
5104: LD_INT 3
5106: PPUSH
5107: LD_INT 6
5109: PPUSH
5110: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5114: LD_INT 3
5116: PPUSH
5117: LD_INT 3
5119: PPUSH
5120: LD_INT 10
5122: PPUSH
5123: LD_INT 10
5125: PPUSH
5126: LD_INT 3
5128: PPUSH
5129: LD_INT 6
5131: PPUSH
5132: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5136: LD_INT 3
5138: PPUSH
5139: LD_INT 3
5141: PPUSH
5142: LD_INT 2
5144: PPUSH
5145: LD_INT 10
5147: PPUSH
5148: LD_INT 4
5150: PPUSH
5151: LD_INT 3
5153: PPUSH
5154: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5158: LD_INT 3
5160: PPUSH
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 1
5166: PPUSH
5167: LD_INT 10
5169: PPUSH
5170: LD_INT 4
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5180: LD_ADDR_VAR 0 2
5184: PUSH
5185: LD_INT 22
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 3
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 30
5207: PUSH
5208: LD_INT 32
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: LD_INT 58
5217: PUSH
5218: EMPTY
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: PPUSH
5227: CALL_OW 69
5231: PUSH
5232: FOR_IN
5233: IFFALSE 5261
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5235: LD_INT 3
5237: PPUSH
5238: LD_INT 3
5240: PPUSH
5241: LD_VAR 0 2
5245: PPUSH
5246: LD_INT 10
5248: PPUSH
5249: LD_INT 1
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: CALL 7750 0 6
5259: GO 5232
5261: POP
5262: POP
// end ;
5263: LD_VAR 0 1
5267: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5268: LD_INT 0
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
// uc_side = 6 ;
5274: LD_ADDR_OWVAR 20
5278: PUSH
5279: LD_INT 6
5281: ST_TO_ADDR
// uc_nation = 1 ;
5282: LD_ADDR_OWVAR 21
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// vc_engine = 3 ;
5290: LD_ADDR_OWVAR 39
5294: PUSH
5295: LD_INT 3
5297: ST_TO_ADDR
// vc_control = 1 ;
5298: LD_ADDR_OWVAR 38
5302: PUSH
5303: LD_INT 1
5305: ST_TO_ADDR
// vc_chassis = 5 ;
5306: LD_ADDR_OWVAR 37
5310: PUSH
5311: LD_INT 5
5313: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5314: LD_ADDR_OWVAR 40
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: LD_INT 9
5324: PUSH
5325: LD_INT 7
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 1
5335: PPUSH
5336: LD_INT 3
5338: PPUSH
5339: CALL_OW 12
5343: ARRAY
5344: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5345: LD_ADDR_EXP 35
5349: PUSH
5350: CALL_OW 45
5354: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5355: LD_EXP 35
5359: PPUSH
5360: LD_INT 14
5362: PPUSH
5363: LD_INT 0
5365: PPUSH
5366: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5370: LD_ADDR_EXP 34
5374: PUSH
5375: LD_STRING Vsevolod
5377: PPUSH
5378: LD_INT 0
5380: PPUSH
5381: CALL 6656 0 2
5385: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5386: LD_EXP 34
5390: PPUSH
5391: LD_EXP 35
5395: PPUSH
5396: CALL_OW 52
// for i := 1 to 5 do
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 5
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5498
// begin vc_engine = 3 ;
5416: LD_ADDR_OWVAR 39
5420: PUSH
5421: LD_INT 3
5423: ST_TO_ADDR
// vc_control = 3 ;
5424: LD_ADDR_OWVAR 38
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_chassis = 3 ;
5432: LD_ADDR_OWVAR 37
5436: PUSH
5437: LD_INT 3
5439: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_INT 5
5447: PUSH
5448: LD_INT 9
5450: PUSH
5451: LD_INT 7
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 1
5461: PPUSH
5462: LD_INT 3
5464: PPUSH
5465: CALL_OW 12
5469: ARRAY
5470: ST_TO_ADDR
// veh = CreateVehicle ;
5471: LD_ADDR_VAR 0 3
5475: PUSH
5476: CALL_OW 45
5480: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5481: LD_VAR 0 3
5485: PPUSH
5486: LD_INT 14
5488: PPUSH
5489: LD_INT 0
5491: PPUSH
5492: CALL_OW 49
// end ;
5496: GO 5413
5498: POP
5499: POP
// uc_nation = 3 ;
5500: LD_ADDR_OWVAR 21
5504: PUSH
5505: LD_INT 3
5507: ST_TO_ADDR
// for i := 1 to 7 do
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_INT 7
5520: PUSH
5521: FOR_TO
5522: IFFALSE 5614
// begin vc_engine = 3 ;
5524: LD_ADDR_OWVAR 39
5528: PUSH
5529: LD_INT 3
5531: ST_TO_ADDR
// vc_control = 3 ;
5532: LD_ADDR_OWVAR 38
5536: PUSH
5537: LD_INT 3
5539: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5540: LD_ADDR_OWVAR 37
5544: PUSH
5545: LD_INT 24
5547: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5548: LD_ADDR_OWVAR 40
5552: PUSH
5553: LD_INT 44
5555: PUSH
5556: LD_INT 47
5558: PUSH
5559: LD_INT 45
5561: PUSH
5562: LD_INT 46
5564: PUSH
5565: LD_INT 49
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 1
5577: PPUSH
5578: LD_INT 4
5580: PPUSH
5581: CALL_OW 12
5585: ARRAY
5586: ST_TO_ADDR
// veh = CreateVehicle ;
5587: LD_ADDR_VAR 0 3
5591: PUSH
5592: CALL_OW 45
5596: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5597: LD_VAR 0 3
5601: PPUSH
5602: LD_INT 14
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5521
5614: POP
5615: POP
// repeat wait ( 0 0$1 ) ;
5616: LD_INT 35
5618: PPUSH
5619: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5623: LD_ADDR_VAR 0 4
5627: PUSH
5628: LD_INT 22
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 21
5640: PUSH
5641: LD_INT 2
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: LD_INT 50
5650: PUSH
5651: EMPTY
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 69
5663: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5664: LD_EXP 1
5668: PPUSH
5669: CALL_OW 310
5673: NOT
5674: IFFALSE 5707
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_EXP 1
5685: PPUSH
5686: CALL_OW 250
5690: PPUSH
5691: LD_EXP 1
5695: PPUSH
5696: CALL_OW 251
5700: PPUSH
5701: CALL_OW 114
5705: GO 5746
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_EXP 1
5716: PPUSH
5717: CALL_OW 310
5721: PPUSH
5722: CALL_OW 250
5726: PPUSH
5727: LD_EXP 1
5731: PPUSH
5732: CALL_OW 310
5736: PPUSH
5737: CALL_OW 251
5741: PPUSH
5742: CALL_OW 114
// until vehList = 0 ;
5746: LD_VAR 0 4
5750: PUSH
5751: LD_INT 0
5753: EQUAL
5754: IFFALSE 5616
// end ;
5756: LD_VAR 0 1
5760: RET
// export function PreapreMehBehs ; var i , un ; begin
5761: LD_INT 0
5763: PPUSH
5764: PPUSH
5765: PPUSH
// uc_side = 6 ;
5766: LD_ADDR_OWVAR 20
5770: PUSH
5771: LD_INT 6
5773: ST_TO_ADDR
// uc_nation = 3 ;
5774: LD_ADDR_OWVAR 21
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// for i := 1 to 3 do
5782: LD_ADDR_VAR 0 2
5786: PUSH
5787: DOUBLE
5788: LD_INT 1
5790: DEC
5791: ST_TO_ADDR
5792: LD_INT 3
5794: PUSH
5795: FOR_TO
5796: IFFALSE 5867
// begin hc_name =  ;
5798: LD_ADDR_OWVAR 26
5802: PUSH
5803: LD_STRING 
5805: ST_TO_ADDR
// hc_gallery =  ;
5806: LD_ADDR_OWVAR 33
5810: PUSH
5811: LD_STRING 
5813: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5814: LD_INT 0
5816: PPUSH
5817: LD_INT 10
5819: PPUSH
5820: CALL_OW 383
// un = CreateHuman ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: CALL_OW 44
5833: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5834: LD_ADDR_EXP 58
5838: PUSH
5839: LD_EXP 58
5843: PUSH
5844: LD_VAR 0 3
5848: ADD
5849: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5850: LD_VAR 0 3
5854: PPUSH
5855: LD_INT 17
5857: PPUSH
5858: LD_INT 0
5860: PPUSH
5861: CALL_OW 49
// end ;
5865: GO 5795
5867: POP
5868: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5869: LD_EXP 37
5873: PPUSH
5874: LD_INT 17
5876: PPUSH
5877: LD_INT 0
5879: PPUSH
5880: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5884: LD_EXP 37
5888: PPUSH
5889: LD_INT 6
5891: PPUSH
5892: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5896: LD_INT 145
5898: PPUSH
5899: LD_INT 6
5901: PPUSH
5902: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5906: LD_EXP 58
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: PPUSH
5915: LD_INT 37
5917: PPUSH
5918: LD_INT 193
5920: PPUSH
5921: LD_INT 118
5923: PPUSH
5924: LD_INT 0
5926: PPUSH
5927: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5931: LD_EXP 58
5935: PUSH
5936: LD_INT 2
5938: ARRAY
5939: PPUSH
5940: LD_INT 37
5942: PPUSH
5943: LD_INT 204
5945: PPUSH
5946: LD_INT 119
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5956: LD_EXP 58
5960: PUSH
5961: LD_INT 3
5963: ARRAY
5964: PPUSH
5965: LD_INT 37
5967: PPUSH
5968: LD_INT 195
5970: PPUSH
5971: LD_INT 126
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5981: LD_EXP 58
5985: PUSH
5986: LD_INT 4
5988: ARRAY
5989: PPUSH
5990: LD_INT 37
5992: PPUSH
5993: LD_INT 207
5995: PPUSH
5996: LD_INT 126
5998: PPUSH
5999: LD_INT 0
6001: PPUSH
6002: CALL_OW 170
// end ; end_of_file
6006: LD_VAR 0 1
6010: RET
// export function PrepareAlliance ; var i ; begin
6011: LD_INT 0
6013: PPUSH
6014: PPUSH
// uc_side = 7 ;
6015: LD_ADDR_OWVAR 20
6019: PUSH
6020: LD_INT 7
6022: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6023: LD_ADDR_EXP 28
6027: PUSH
6028: LD_STRING Roth
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL 6656 0 2
6038: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6039: LD_EXP 28
6043: PPUSH
6044: LD_INT 31
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6054: LD_EXP 28
6058: PPUSH
6059: LD_INT 248
6061: PPUSH
6062: LD_INT 187
6064: PPUSH
6065: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6069: LD_STRING 10c_Simms
6071: PPUSH
6072: CALL_OW 28
6076: PUSH
6077: LD_INT 1
6079: EQUAL
6080: IFFALSE 6130
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6082: LD_ADDR_EXP 48
6086: PUSH
6087: LD_STRING 10c_Simms
6089: PPUSH
6090: LD_INT 1
6092: PPUSH
6093: CALL 6656 0 2
6097: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6098: LD_EXP 48
6102: PPUSH
6103: LD_INT 32
6105: PPUSH
6106: LD_INT 0
6108: PPUSH
6109: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6113: LD_EXP 48
6117: PPUSH
6118: LD_INT 248
6120: PPUSH
6121: LD_INT 187
6123: PPUSH
6124: CALL_OW 118
// end else
6128: GO 6204
// begin uc_nation = 1 ;
6130: LD_ADDR_OWVAR 21
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// hc_name =  ;
6138: LD_ADDR_OWVAR 26
6142: PUSH
6143: LD_STRING 
6145: ST_TO_ADDR
// hc_gallery =  ;
6146: LD_ADDR_OWVAR 33
6150: PUSH
6151: LD_STRING 
6153: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6154: LD_INT 2
6156: PPUSH
6157: LD_INT 10
6159: PPUSH
6160: CALL_OW 384
// Simms = CreateHuman ;
6164: LD_ADDR_EXP 48
6168: PUSH
6169: CALL_OW 44
6173: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6174: LD_EXP 48
6178: PPUSH
6179: LD_INT 32
6181: PPUSH
6182: LD_INT 0
6184: PPUSH
6185: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6189: LD_EXP 48
6193: PPUSH
6194: LD_INT 248
6196: PPUSH
6197: LD_INT 187
6199: PPUSH
6200: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6204: LD_ADDR_EXP 49
6208: PUSH
6209: LD_STRING Scholtze
6211: PPUSH
6212: LD_INT 0
6214: PPUSH
6215: CALL 6656 0 2
6219: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6220: LD_ADDR_EXP 50
6224: PUSH
6225: LD_STRING Kirilenkova
6227: PPUSH
6228: LD_INT 0
6230: PPUSH
6231: CALL 6656 0 2
6235: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6236: LD_ADDR_EXP 51
6240: PUSH
6241: LD_STRING Kapitsova
6243: PPUSH
6244: LD_INT 0
6246: PPUSH
6247: CALL 6656 0 2
6251: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6252: LD_ADDR_EXP 52
6256: PUSH
6257: LD_STRING Karamazov
6259: PPUSH
6260: LD_INT 0
6262: PPUSH
6263: CALL 6656 0 2
6267: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6268: LD_EXP 49
6272: PPUSH
6273: LD_INT 39
6275: PPUSH
6276: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6280: LD_EXP 50
6284: PPUSH
6285: LD_INT 133
6287: PPUSH
6288: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6292: LD_EXP 51
6296: PPUSH
6297: LD_INT 133
6299: PPUSH
6300: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6304: LD_EXP 52
6308: PPUSH
6309: LD_INT 45
6311: PPUSH
6312: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6316: LD_INT 7
6318: PPUSH
6319: LD_INT 1
6321: PPUSH
6322: LD_INT 45
6324: PPUSH
6325: LD_INT 10
6327: PPUSH
6328: LD_INT 2
6330: PPUSH
6331: LD_INT 2
6333: PPUSH
6334: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6338: LD_INT 7
6340: PPUSH
6341: LD_INT 3
6343: PPUSH
6344: LD_INT 45
6346: PPUSH
6347: LD_INT 10
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: LD_INT 2
6355: PPUSH
6356: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6360: LD_INT 7
6362: PPUSH
6363: LD_INT 1
6365: PPUSH
6366: LD_INT 194
6368: PPUSH
6369: LD_INT 10
6371: PPUSH
6372: LD_INT 5
6374: PPUSH
6375: LD_INT 4
6377: PPUSH
6378: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6382: LD_INT 7
6384: PPUSH
6385: LD_INT 3
6387: PPUSH
6388: LD_INT 194
6390: PPUSH
6391: LD_INT 10
6393: PPUSH
6394: LD_INT 8
6396: PPUSH
6397: LD_INT 6
6399: PPUSH
6400: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6404: LD_INT 7
6406: PPUSH
6407: LD_INT 1
6409: PPUSH
6410: LD_INT 156
6412: PPUSH
6413: LD_INT 10
6415: PPUSH
6416: LD_INT 3
6418: PPUSH
6419: LD_INT 6
6421: PPUSH
6422: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6426: LD_INT 7
6428: PPUSH
6429: LD_INT 3
6431: PPUSH
6432: LD_INT 162
6434: PPUSH
6435: LD_INT 10
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 6
6443: PPUSH
6444: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6448: LD_INT 7
6450: PPUSH
6451: LD_INT 3
6453: PPUSH
6454: LD_INT 39
6456: PPUSH
6457: LD_INT 10
6459: PPUSH
6460: LD_INT 4
6462: PPUSH
6463: LD_INT 3
6465: PPUSH
6466: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6470: LD_INT 7
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 133
6478: PPUSH
6479: LD_INT 10
6481: PPUSH
6482: LD_INT 4
6484: PPUSH
6485: LD_INT 2
6487: PPUSH
6488: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6492: LD_INT 7
6494: PPUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_INT 46
6500: PPUSH
6501: LD_INT 10
6503: PPUSH
6504: LD_INT 4
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 7
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 21
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 32
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 58
6551: PUSH
6552: EMPTY
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: PPUSH
6561: CALL_OW 69
6565: PUSH
6566: FOR_IN
6567: IFFALSE 6614
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6569: LD_INT 7
6571: PPUSH
6572: LD_INT 1
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 1
6584: PPUSH
6585: LD_INT 2
6587: PPUSH
6588: CALL_OW 12
6592: ARRAY
6593: PPUSH
6594: LD_VAR 0 2
6598: PPUSH
6599: LD_INT 10
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 1
6607: PPUSH
6608: CALL 7750 0 6
6612: GO 6566
6614: POP
6615: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6616: LD_INT 7
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 226
6624: PPUSH
6625: LD_INT 10
6627: PPUSH
6628: LD_INT 3
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: CALL 7750 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6638: LD_ADDR_EXP 63
6642: PUSH
6643: LD_INT 226
6645: PPUSH
6646: CALL_OW 313
6650: ST_TO_ADDR
// end ; end_of_file
6651: LD_VAR 0 1
6655: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6656: LD_INT 0
6658: PPUSH
6659: PPUSH
// if exist_mode then
6660: LD_VAR 0 2
6664: IFFALSE 6683
// unit := CreateCharacter ( ident ) else
6666: LD_ADDR_VAR 0 4
6670: PUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 34
6680: ST_TO_ADDR
6681: GO 6698
// unit := NewCharacter ( ident ) ;
6683: LD_ADDR_VAR 0 4
6687: PUSH
6688: LD_VAR 0 1
6692: PPUSH
6693: CALL_OW 25
6697: ST_TO_ADDR
// result := unit ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_VAR 0 4
6707: ST_TO_ADDR
// end ;
6708: LD_VAR 0 3
6712: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6713: LD_INT 0
6715: PPUSH
6716: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6717: LD_STRING 13s_
6719: PUSH
6720: LD_VAR 0 1
6724: STR
6725: PPUSH
6726: CALL_OW 28
6730: PUSH
6731: LD_INT 1
6733: EQUAL
6734: IFFALSE 6755
// unit = CreateCharacter ( 13s_ & ident ) ;
6736: LD_ADDR_VAR 0 3
6740: PUSH
6741: LD_STRING 13s_
6743: PUSH
6744: LD_VAR 0 1
6748: STR
6749: PPUSH
6750: CALL_OW 34
6754: ST_TO_ADDR
// result := unit ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_VAR 0 3
6764: ST_TO_ADDR
// end ;
6765: LD_VAR 0 2
6769: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6770: LD_INT 0
6772: PPUSH
6773: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6774: LD_STRING 15_
6776: PUSH
6777: LD_VAR 0 1
6781: STR
6782: PPUSH
6783: CALL_OW 28
6787: PUSH
6788: LD_INT 1
6790: EQUAL
6791: IFFALSE 6828
// begin unit = CreateCharacter ( 15_ & ident ) ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_STRING 15_
6800: PUSH
6801: LD_VAR 0 1
6805: STR
6806: PPUSH
6807: CALL_OW 34
6811: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6812: LD_ADDR_EXP 20
6816: PUSH
6817: LD_EXP 20
6821: PUSH
6822: LD_VAR 0 3
6826: ADD
6827: ST_TO_ADDR
// end ; result := unit ;
6828: LD_ADDR_VAR 0 2
6832: PUSH
6833: LD_VAR 0 3
6837: ST_TO_ADDR
// end ;
6838: LD_VAR 0 2
6842: RET
// export function TabLenght ( tab ) ; var i ; begin
6843: LD_INT 0
6845: PPUSH
6846: PPUSH
// for i = 1 to tab do
6847: LD_ADDR_VAR 0 3
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 1
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6877
// result = i ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_VAR 0 3
6874: ST_TO_ADDR
6875: GO 6862
6877: POP
6878: POP
// end ;
6879: LD_VAR 0 2
6883: RET
// export function Video ( mode ) ; begin
6884: LD_INT 0
6886: PPUSH
// ingame_video = mode ;
6887: LD_ADDR_OWVAR 52
6891: PUSH
6892: LD_VAR 0 1
6896: ST_TO_ADDR
// interface_hidden = mode ;
6897: LD_ADDR_OWVAR 54
6901: PUSH
6902: LD_VAR 0 1
6906: ST_TO_ADDR
// end ;
6907: LD_VAR 0 2
6911: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
6916: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6917: LD_ADDR_VAR 0 1
6921: PUSH
6922: LD_VAR 0 1
6926: PUSH
6927: LD_EXP 1
6931: PUSH
6932: LD_EXP 3
6936: PUSH
6937: LD_EXP 21
6941: PUSH
6942: LD_EXP 22
6946: PUSH
6947: LD_EXP 23
6951: PUSH
6952: LD_EXP 4
6956: PUSH
6957: LD_EXP 5
6961: PUSH
6962: LD_EXP 6
6966: PUSH
6967: LD_EXP 7
6971: PUSH
6972: LD_EXP 8
6976: PUSH
6977: LD_EXP 9
6981: PUSH
6982: LD_EXP 10
6986: PUSH
6987: LD_EXP 11
6991: PUSH
6992: LD_EXP 12
6996: PUSH
6997: LD_EXP 13
7001: PUSH
7002: LD_EXP 14
7006: PUSH
7007: LD_EXP 15
7011: PUSH
7012: LD_EXP 17
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: DIFF
7037: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7038: LD_ADDR_VAR 0 6
7042: PUSH
7043: LD_INT 1
7045: PPUSH
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 12
7055: ST_TO_ADDR
// for i = 1 to characters do
7056: LD_ADDR_VAR 0 5
7060: PUSH
7061: DOUBLE
7062: LD_INT 1
7064: DEC
7065: ST_TO_ADDR
7066: LD_VAR 0 1
7070: PUSH
7071: FOR_TO
7072: IFFALSE 7182
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7074: LD_VAR 0 5
7078: PUSH
7079: LD_VAR 0 6
7083: EQUAL
7084: PUSH
7085: LD_VAR 0 1
7089: PUSH
7090: LD_VAR 0 5
7094: ARRAY
7095: PPUSH
7096: CALL_OW 258
7100: PUSH
7101: LD_INT 1
7103: EQUAL
7104: AND
7105: IFFALSE 7127
// Say ( characters [ i ] , dialogMID ) ;
7107: LD_VAR 0 1
7111: PUSH
7112: LD_VAR 0 5
7116: ARRAY
7117: PPUSH
7118: LD_VAR 0 2
7122: PPUSH
7123: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7127: LD_VAR 0 5
7131: PUSH
7132: LD_VAR 0 6
7136: EQUAL
7137: PUSH
7138: LD_VAR 0 1
7142: PUSH
7143: LD_VAR 0 5
7147: ARRAY
7148: PPUSH
7149: CALL_OW 258
7153: PUSH
7154: LD_INT 2
7156: EQUAL
7157: AND
7158: IFFALSE 7180
// Say ( characters [ i ] , dialogFID ) ;
7160: LD_VAR 0 1
7164: PUSH
7165: LD_VAR 0 5
7169: ARRAY
7170: PPUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 88
// end ;
7180: GO 7071
7182: POP
7183: POP
// end ;
7184: LD_VAR 0 4
7188: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
// if not list then
7195: LD_VAR 0 1
7199: NOT
7200: IFFALSE 7204
// exit ;
7202: GO 7551
// result := [ ] ;
7204: LD_ADDR_VAR 0 3
7208: PUSH
7209: EMPTY
7210: ST_TO_ADDR
// for i in list do
7211: LD_ADDR_VAR 0 4
7215: PUSH
7216: LD_VAR 0 1
7220: PUSH
7221: FOR_IN
7222: IFFALSE 7463
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7224: LD_ADDR_VAR 0 6
7228: PUSH
7229: LD_VAR 0 4
7233: PPUSH
7234: LD_INT 1
7236: PPUSH
7237: CALL_OW 259
7241: PUSH
7242: LD_VAR 0 4
7246: PPUSH
7247: LD_INT 2
7249: PPUSH
7250: CALL_OW 259
7254: PLUS
7255: PUSH
7256: LD_VAR 0 4
7260: PPUSH
7261: LD_INT 3
7263: PPUSH
7264: CALL_OW 259
7268: PLUS
7269: PUSH
7270: LD_VAR 0 4
7274: PPUSH
7275: LD_INT 4
7277: PPUSH
7278: CALL_OW 259
7282: PLUS
7283: PUSH
7284: LD_INT 4
7286: DIV
7287: ST_TO_ADDR
// if not result then
7288: LD_VAR 0 3
7292: NOT
7293: IFFALSE 7319
// result := [ [ i , tmp ] ] else
7295: LD_ADDR_VAR 0 3
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_VAR 0 6
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: ST_TO_ADDR
7317: GO 7461
// begin if result [ result ] [ 2 ] <= tmp then
7319: LD_VAR 0 3
7323: PUSH
7324: LD_VAR 0 3
7328: ARRAY
7329: PUSH
7330: LD_INT 2
7332: ARRAY
7333: PUSH
7334: LD_VAR 0 6
7338: LESSEQUAL
7339: IFFALSE 7381
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_VAR 0 3
7350: PPUSH
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 1
7358: PLUS
7359: PPUSH
7360: LD_VAR 0 4
7364: PUSH
7365: LD_VAR 0 6
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 2
7378: ST_TO_ADDR
7379: GO 7461
// for j = 1 to result do
7381: LD_ADDR_VAR 0 5
7385: PUSH
7386: DOUBLE
7387: LD_INT 1
7389: DEC
7390: ST_TO_ADDR
7391: LD_VAR 0 3
7395: PUSH
7396: FOR_TO
7397: IFFALSE 7459
// begin if tmp < result [ j ] [ 2 ] then
7399: LD_VAR 0 6
7403: PUSH
7404: LD_VAR 0 3
7408: PUSH
7409: LD_VAR 0 5
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: LESS
7419: IFFALSE 7457
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7421: LD_ADDR_VAR 0 3
7425: PUSH
7426: LD_VAR 0 3
7430: PPUSH
7431: LD_VAR 0 5
7435: PPUSH
7436: LD_VAR 0 4
7440: PUSH
7441: LD_VAR 0 6
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 2
7454: ST_TO_ADDR
// break ;
7455: GO 7459
// end ; end ;
7457: GO 7396
7459: POP
7460: POP
// end ; end ;
7461: GO 7221
7463: POP
7464: POP
// if result and not asc then
7465: LD_VAR 0 3
7469: PUSH
7470: LD_VAR 0 2
7474: NOT
7475: AND
7476: IFFALSE 7551
// begin tmp := result ;
7478: LD_ADDR_VAR 0 6
7482: PUSH
7483: LD_VAR 0 3
7487: ST_TO_ADDR
// for i = tmp downto 1 do
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: DOUBLE
7494: LD_VAR 0 6
7498: INC
7499: ST_TO_ADDR
7500: LD_INT 1
7502: PUSH
7503: FOR_DOWNTO
7504: IFFALSE 7549
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_VAR 0 3
7515: PPUSH
7516: LD_VAR 0 6
7520: PUSH
7521: LD_VAR 0 4
7525: MINUS
7526: PUSH
7527: LD_INT 1
7529: PLUS
7530: PPUSH
7531: LD_VAR 0 6
7535: PUSH
7536: LD_VAR 0 4
7540: ARRAY
7541: PPUSH
7542: CALL_OW 1
7546: ST_TO_ADDR
7547: GO 7503
7549: POP
7550: POP
// end ; end ;
7551: LD_VAR 0 3
7555: RET
// export function PrepareDifficulty ; begin
7556: LD_INT 0
7558: PPUSH
// if difficulty = 1 then
7559: LD_OWVAR 67
7563: PUSH
7564: LD_INT 1
7566: EQUAL
7567: IFFALSE 7595
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7569: LD_INT 51
7571: PPUSH
7572: LD_INT 6
7574: PPUSH
7575: LD_INT 2
7577: PPUSH
7578: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7582: LD_INT 57
7584: PPUSH
7585: LD_INT 6
7587: PPUSH
7588: LD_INT 2
7590: PPUSH
7591: CALL_OW 322
// end ; if difficulty = 2 then
7595: LD_OWVAR 67
7599: PUSH
7600: LD_INT 2
7602: EQUAL
7603: IFFALSE 7657
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7605: LD_INT 51
7607: PPUSH
7608: LD_INT 6
7610: PPUSH
7611: LD_INT 2
7613: PPUSH
7614: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7618: LD_INT 57
7620: PPUSH
7621: LD_INT 6
7623: PPUSH
7624: LD_INT 2
7626: PPUSH
7627: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7631: LD_INT 52
7633: PPUSH
7634: LD_INT 6
7636: PPUSH
7637: LD_INT 2
7639: PPUSH
7640: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7644: LD_INT 58
7646: PPUSH
7647: LD_INT 6
7649: PPUSH
7650: LD_INT 2
7652: PPUSH
7653: CALL_OW 322
// end ; if difficulty = 3 then
7657: LD_OWVAR 67
7661: PUSH
7662: LD_INT 3
7664: EQUAL
7665: IFFALSE 7745
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7667: LD_INT 51
7669: PPUSH
7670: LD_INT 6
7672: PPUSH
7673: LD_INT 2
7675: PPUSH
7676: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7680: LD_INT 57
7682: PPUSH
7683: LD_INT 6
7685: PPUSH
7686: LD_INT 2
7688: PPUSH
7689: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7693: LD_INT 52
7695: PPUSH
7696: LD_INT 6
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7706: LD_INT 58
7708: PPUSH
7709: LD_INT 6
7711: PPUSH
7712: LD_INT 2
7714: PPUSH
7715: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7719: LD_INT 53
7721: PPUSH
7722: LD_INT 6
7724: PPUSH
7725: LD_INT 2
7727: PPUSH
7728: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7732: LD_INT 59
7734: PPUSH
7735: LD_INT 6
7737: PPUSH
7738: LD_INT 2
7740: PPUSH
7741: CALL_OW 322
// end ; end ;
7745: LD_VAR 0 1
7749: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7750: LD_INT 0
7752: PPUSH
7753: PPUSH
7754: PPUSH
7755: PPUSH
7756: PPUSH
// for i = 1 to count do
7757: LD_ADDR_VAR 0 8
7761: PUSH
7762: DOUBLE
7763: LD_INT 1
7765: DEC
7766: ST_TO_ADDR
7767: LD_VAR 0 6
7771: PUSH
7772: FOR_TO
7773: IFFALSE 7854
// begin uc_side = side ;
7775: LD_ADDR_OWVAR 20
7779: PUSH
7780: LD_VAR 0 1
7784: ST_TO_ADDR
// uc_nation = nation ;
7785: LD_ADDR_OWVAR 21
7789: PUSH
7790: LD_VAR 0 2
7794: ST_TO_ADDR
// hc_gallery =  ;
7795: LD_ADDR_OWVAR 33
7799: PUSH
7800: LD_STRING 
7802: ST_TO_ADDR
// hc_name =  ;
7803: LD_ADDR_OWVAR 26
7807: PUSH
7808: LD_STRING 
7810: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7811: LD_INT 0
7813: PPUSH
7814: LD_VAR 0 5
7818: PPUSH
7819: LD_VAR 0 4
7823: PPUSH
7824: CALL_OW 380
// un = CreateHuman ;
7828: LD_ADDR_VAR 0 10
7832: PUSH
7833: CALL_OW 44
7837: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7838: LD_VAR 0 10
7842: PPUSH
7843: LD_VAR 0 3
7847: PPUSH
7848: CALL_OW 52
// end ;
7852: GO 7772
7854: POP
7855: POP
// end ;
7856: LD_VAR 0 7
7860: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7874: LD_INT 2100
7876: PUSH
7877: LD_INT 3150
7879: PUSH
7880: LD_INT 4200
7882: PUSH
7883: LD_INT 5250
7885: PUSH
7886: LD_INT 6300
7888: PUSH
7889: LD_INT 7350
7891: PUSH
7892: LD_INT 8400
7894: PUSH
7895: LD_INT 9450
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 1
7910: PPUSH
7911: LD_INT 8
7913: PPUSH
7914: CALL_OW 12
7918: ARRAY
7919: PPUSH
7920: CALL_OW 67
// amChassisTab = [ ] ;
7924: LD_ADDR_VAR 0 19
7928: PUSH
7929: EMPTY
7930: ST_TO_ADDR
// arChassisTab = [ ] ;
7931: LD_ADDR_VAR 0 18
7935: PUSH
7936: EMPTY
7937: ST_TO_ADDR
// ruChassisTab = [ ] ;
7938: LD_ADDR_VAR 0 17
7942: PUSH
7943: EMPTY
7944: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7945: LD_INT 35
7947: PPUSH
7948: CALL_OW 67
// if nation = 1 then
7952: LD_VAR 0 5
7956: PUSH
7957: LD_INT 1
7959: EQUAL
7960: IFFALSE 8451
// begin uc_side = side ;
7962: LD_ADDR_OWVAR 20
7966: PUSH
7967: LD_VAR 0 2
7971: ST_TO_ADDR
// uc_nation = nation ;
7972: LD_ADDR_OWVAR 21
7976: PUSH
7977: LD_VAR 0 5
7981: ST_TO_ADDR
// vc_engine = vehengine ;
7982: LD_ADDR_OWVAR 39
7986: PUSH
7987: LD_VAR 0 6
7991: ST_TO_ADDR
// vc_control = vehcontrol ;
7992: LD_ADDR_OWVAR 38
7996: PUSH
7997: LD_VAR 0 7
8001: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8002: LD_ADDR_OWVAR 40
8006: PUSH
8007: LD_VAR 0 10
8011: PUSH
8012: LD_INT 1
8014: PPUSH
8015: LD_VAR 0 10
8019: PPUSH
8020: CALL_OW 12
8024: ARRAY
8025: ST_TO_ADDR
// for j = 1 to AMWeapon do
8026: LD_ADDR_VAR 0 14
8030: PUSH
8031: DOUBLE
8032: LD_INT 1
8034: DEC
8035: ST_TO_ADDR
8036: LD_VAR 0 10
8040: PUSH
8041: FOR_TO
8042: IFFALSE 8343
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8044: LD_VAR 0 10
8048: PUSH
8049: LD_VAR 0 14
8053: ARRAY
8054: PUSH
8055: LD_INT 2
8057: EQUAL
8058: PUSH
8059: LD_VAR 0 10
8063: PUSH
8064: LD_VAR 0 14
8068: ARRAY
8069: PUSH
8070: LD_INT 3
8072: EQUAL
8073: OR
8074: IFFALSE 8127
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8076: LD_ADDR_VAR 0 19
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: LD_INT 2
8086: PUSH
8087: LD_INT 3
8089: PUSH
8090: LD_INT 4
8092: PUSH
8093: LD_INT 5
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8103: LD_ADDR_OWVAR 37
8107: PUSH
8108: LD_VAR 0 19
8112: PUSH
8113: LD_INT 1
8115: PPUSH
8116: LD_VAR 0 19
8120: PPUSH
8121: CALL_OW 12
8125: ARRAY
8126: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8127: LD_VAR 0 10
8131: PUSH
8132: LD_VAR 0 14
8136: ARRAY
8137: PUSH
8138: LD_INT 4
8140: EQUAL
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_VAR 0 14
8151: ARRAY
8152: PUSH
8153: LD_INT 5
8155: EQUAL
8156: OR
8157: PUSH
8158: LD_VAR 0 10
8162: PUSH
8163: LD_VAR 0 14
8167: ARRAY
8168: PUSH
8169: LD_INT 9
8171: EQUAL
8172: OR
8173: PUSH
8174: LD_VAR 0 10
8178: PUSH
8179: LD_VAR 0 14
8183: ARRAY
8184: PUSH
8185: LD_INT 11
8187: EQUAL
8188: OR
8189: PUSH
8190: LD_VAR 0 10
8194: PUSH
8195: LD_VAR 0 14
8199: ARRAY
8200: PUSH
8201: LD_INT 7
8203: EQUAL
8204: OR
8205: IFFALSE 8254
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8207: LD_ADDR_VAR 0 19
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: LD_INT 3
8217: PUSH
8218: LD_INT 4
8220: PUSH
8221: LD_INT 5
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8230: LD_ADDR_OWVAR 37
8234: PUSH
8235: LD_VAR 0 19
8239: PUSH
8240: LD_INT 1
8242: PPUSH
8243: LD_VAR 0 19
8247: PPUSH
8248: CALL_OW 12
8252: ARRAY
8253: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8254: LD_VAR 0 10
8258: PUSH
8259: LD_VAR 0 14
8263: ARRAY
8264: PUSH
8265: LD_INT 8
8267: EQUAL
8268: PUSH
8269: LD_VAR 0 10
8273: PUSH
8274: LD_VAR 0 14
8278: ARRAY
8279: PUSH
8280: LD_INT 6
8282: EQUAL
8283: OR
8284: PUSH
8285: LD_VAR 0 10
8289: PUSH
8290: LD_VAR 0 14
8294: ARRAY
8295: PUSH
8296: LD_INT 10
8298: EQUAL
8299: OR
8300: IFFALSE 8341
// begin amChassisTab = [ 4 , 5 ] ;
8302: LD_ADDR_VAR 0 19
8306: PUSH
8307: LD_INT 4
8309: PUSH
8310: LD_INT 5
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8317: LD_ADDR_OWVAR 37
8321: PUSH
8322: LD_VAR 0 19
8326: PUSH
8327: LD_INT 1
8329: PPUSH
8330: LD_VAR 0 19
8334: PPUSH
8335: CALL_OW 12
8339: ARRAY
8340: ST_TO_ADDR
// end ; end ;
8341: GO 8041
8343: POP
8344: POP
// veh = CreateVehicle ;
8345: LD_ADDR_VAR 0 16
8349: PUSH
8350: CALL_OW 45
8354: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8355: LD_VAR 0 16
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_INT 0
8367: PPUSH
8368: CALL_OW 49
// if vc_control = 1 then
8372: LD_OWVAR 38
8376: PUSH
8377: LD_INT 1
8379: EQUAL
8380: IFFALSE 8437
// begin hc_gallery =  ;
8382: LD_ADDR_OWVAR 33
8386: PUSH
8387: LD_STRING 
8389: ST_TO_ADDR
// hc_name =  ;
8390: LD_ADDR_OWVAR 26
8394: PUSH
8395: LD_STRING 
8397: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8398: LD_INT 0
8400: PPUSH
8401: LD_INT 3
8403: PPUSH
8404: LD_VAR 0 4
8408: PPUSH
8409: CALL_OW 380
// un = CreateHuman ;
8413: LD_ADDR_VAR 0 15
8417: PUSH
8418: CALL_OW 44
8422: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8423: LD_VAR 0 15
8427: PPUSH
8428: LD_VAR 0 16
8432: PPUSH
8433: CALL_OW 52
// end ; i = i + 1 ;
8437: LD_ADDR_VAR 0 13
8441: PUSH
8442: LD_VAR 0 13
8446: PUSH
8447: LD_INT 1
8449: PLUS
8450: ST_TO_ADDR
// end ; if nation = 2 then
8451: LD_VAR 0 5
8455: PUSH
8456: LD_INT 2
8458: EQUAL
8459: IFFALSE 8883
// begin uc_side = side ;
8461: LD_ADDR_OWVAR 20
8465: PUSH
8466: LD_VAR 0 2
8470: ST_TO_ADDR
// uc_nation = nation ;
8471: LD_ADDR_OWVAR 21
8475: PUSH
8476: LD_VAR 0 5
8480: ST_TO_ADDR
// vc_engine = vehengine ;
8481: LD_ADDR_OWVAR 39
8485: PUSH
8486: LD_VAR 0 6
8490: ST_TO_ADDR
// vc_control = vehcontrol ;
8491: LD_ADDR_OWVAR 38
8495: PUSH
8496: LD_VAR 0 7
8500: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8501: LD_ADDR_OWVAR 40
8505: PUSH
8506: LD_VAR 0 9
8510: PUSH
8511: LD_INT 1
8513: PPUSH
8514: LD_VAR 0 9
8518: PPUSH
8519: CALL_OW 12
8523: ARRAY
8524: ST_TO_ADDR
// for j = 1 to ARWeapons do
8525: LD_ADDR_VAR 0 14
8529: PUSH
8530: DOUBLE
8531: LD_INT 1
8533: DEC
8534: ST_TO_ADDR
8535: LD_VAR 0 9
8539: PUSH
8540: FOR_TO
8541: IFFALSE 8775
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8543: LD_VAR 0 9
8547: PUSH
8548: LD_VAR 0 14
8552: ARRAY
8553: PUSH
8554: LD_INT 24
8556: EQUAL
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_VAR 0 14
8567: ARRAY
8568: PUSH
8569: LD_INT 22
8571: EQUAL
8572: OR
8573: PUSH
8574: LD_VAR 0 9
8578: PUSH
8579: LD_VAR 0 14
8583: ARRAY
8584: PUSH
8585: LD_INT 23
8587: EQUAL
8588: OR
8589: PUSH
8590: LD_VAR 0 9
8594: PUSH
8595: LD_VAR 0 14
8599: ARRAY
8600: PUSH
8601: LD_INT 30
8603: EQUAL
8604: OR
8605: IFFALSE 8654
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8607: LD_ADDR_VAR 0 18
8611: PUSH
8612: LD_INT 11
8614: PUSH
8615: LD_INT 12
8617: PUSH
8618: LD_INT 13
8620: PUSH
8621: LD_INT 14
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8630: LD_ADDR_OWVAR 37
8634: PUSH
8635: LD_VAR 0 18
8639: PUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_VAR 0 18
8647: PPUSH
8648: CALL_OW 12
8652: ARRAY
8653: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8654: LD_VAR 0 9
8658: PUSH
8659: LD_VAR 0 14
8663: ARRAY
8664: PUSH
8665: LD_INT 29
8667: EQUAL
8668: PUSH
8669: LD_VAR 0 9
8673: PUSH
8674: LD_VAR 0 14
8678: ARRAY
8679: PUSH
8680: LD_INT 28
8682: EQUAL
8683: OR
8684: PUSH
8685: LD_VAR 0 9
8689: PUSH
8690: LD_VAR 0 14
8694: ARRAY
8695: PUSH
8696: LD_INT 27
8698: EQUAL
8699: OR
8700: PUSH
8701: LD_VAR 0 9
8705: PUSH
8706: LD_VAR 0 14
8710: ARRAY
8711: PUSH
8712: LD_INT 26
8714: EQUAL
8715: OR
8716: PUSH
8717: LD_VAR 0 9
8721: PUSH
8722: LD_VAR 0 14
8726: ARRAY
8727: PUSH
8728: LD_INT 25
8730: EQUAL
8731: OR
8732: IFFALSE 8773
// begin arChassisTab = [ 13 , 14 ] ;
8734: LD_ADDR_VAR 0 18
8738: PUSH
8739: LD_INT 13
8741: PUSH
8742: LD_INT 14
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8749: LD_ADDR_OWVAR 37
8753: PUSH
8754: LD_VAR 0 18
8758: PUSH
8759: LD_INT 1
8761: PPUSH
8762: LD_VAR 0 18
8766: PPUSH
8767: CALL_OW 12
8771: ARRAY
8772: ST_TO_ADDR
// end ; end ;
8773: GO 8540
8775: POP
8776: POP
// veh = CreateVehicle ;
8777: LD_ADDR_VAR 0 16
8781: PUSH
8782: CALL_OW 45
8786: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8787: LD_VAR 0 16
8791: PPUSH
8792: LD_VAR 0 1
8796: PPUSH
8797: LD_INT 0
8799: PPUSH
8800: CALL_OW 49
// if vc_control = 1 then
8804: LD_OWVAR 38
8808: PUSH
8809: LD_INT 1
8811: EQUAL
8812: IFFALSE 8869
// begin hc_gallery =  ;
8814: LD_ADDR_OWVAR 33
8818: PUSH
8819: LD_STRING 
8821: ST_TO_ADDR
// hc_name =  ;
8822: LD_ADDR_OWVAR 26
8826: PUSH
8827: LD_STRING 
8829: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8830: LD_INT 0
8832: PPUSH
8833: LD_INT 3
8835: PPUSH
8836: LD_VAR 0 4
8840: PPUSH
8841: CALL_OW 380
// un = CreateHuman ;
8845: LD_ADDR_VAR 0 15
8849: PUSH
8850: CALL_OW 44
8854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8855: LD_VAR 0 15
8859: PPUSH
8860: LD_VAR 0 16
8864: PPUSH
8865: CALL_OW 52
// end ; i = i + 1 ;
8869: LD_ADDR_VAR 0 13
8873: PUSH
8874: LD_VAR 0 13
8878: PUSH
8879: LD_INT 1
8881: PLUS
8882: ST_TO_ADDR
// end ; if nation = 3 then
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 3
8890: EQUAL
8891: IFFALSE 9267
// begin uc_side = side ;
8893: LD_ADDR_OWVAR 20
8897: PUSH
8898: LD_VAR 0 2
8902: ST_TO_ADDR
// uc_nation = nation ;
8903: LD_ADDR_OWVAR 21
8907: PUSH
8908: LD_VAR 0 5
8912: ST_TO_ADDR
// vc_engine = vehengine ;
8913: LD_ADDR_OWVAR 39
8917: PUSH
8918: LD_VAR 0 6
8922: ST_TO_ADDR
// vc_control = vehcontrol ;
8923: LD_ADDR_OWVAR 38
8927: PUSH
8928: LD_VAR 0 7
8932: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8933: LD_ADDR_OWVAR 40
8937: PUSH
8938: LD_VAR 0 8
8942: PUSH
8943: LD_INT 1
8945: PPUSH
8946: LD_VAR 0 8
8950: PPUSH
8951: CALL_OW 12
8955: ARRAY
8956: ST_TO_ADDR
// for j = 1 to RuWeapons do
8957: LD_ADDR_VAR 0 14
8961: PUSH
8962: DOUBLE
8963: LD_INT 1
8965: DEC
8966: ST_TO_ADDR
8967: LD_VAR 0 8
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9159
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8975: LD_VAR 0 8
8979: PUSH
8980: LD_VAR 0 14
8984: ARRAY
8985: PUSH
8986: LD_INT 42
8988: EQUAL
8989: PUSH
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 14
8999: ARRAY
9000: PUSH
9001: LD_INT 43
9003: EQUAL
9004: OR
9005: PUSH
9006: LD_VAR 0 8
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PUSH
9017: LD_INT 44
9019: EQUAL
9020: OR
9021: PUSH
9022: LD_VAR 0 8
9026: PUSH
9027: LD_VAR 0 14
9031: ARRAY
9032: PUSH
9033: LD_INT 45
9035: EQUAL
9036: OR
9037: PUSH
9038: LD_VAR 0 8
9042: PUSH
9043: LD_VAR 0 14
9047: ARRAY
9048: PUSH
9049: LD_INT 49
9051: EQUAL
9052: OR
9053: IFFALSE 9090
// begin ruChassisTab = [ 24 ] ;
9055: LD_ADDR_VAR 0 17
9059: PUSH
9060: LD_INT 24
9062: PUSH
9063: EMPTY
9064: LIST
9065: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9066: LD_ADDR_OWVAR 37
9070: PUSH
9071: LD_VAR 0 17
9075: PUSH
9076: LD_INT 1
9078: PPUSH
9079: LD_VAR 0 17
9083: PPUSH
9084: CALL_OW 12
9088: ARRAY
9089: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9090: LD_VAR 0 8
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PUSH
9101: LD_INT 46
9103: EQUAL
9104: PUSH
9105: LD_VAR 0 8
9109: PUSH
9110: LD_VAR 0 14
9114: ARRAY
9115: PUSH
9116: LD_INT 47
9118: EQUAL
9119: OR
9120: IFFALSE 9157
// begin ruChassisTab = [ 24 ] ;
9122: LD_ADDR_VAR 0 17
9126: PUSH
9127: LD_INT 24
9129: PUSH
9130: EMPTY
9131: LIST
9132: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9133: LD_ADDR_OWVAR 37
9137: PUSH
9138: LD_VAR 0 17
9142: PUSH
9143: LD_INT 1
9145: PPUSH
9146: LD_VAR 0 17
9150: PPUSH
9151: CALL_OW 12
9155: ARRAY
9156: ST_TO_ADDR
// end ; end ;
9157: GO 8972
9159: POP
9160: POP
// veh = CreateVehicle ;
9161: LD_ADDR_VAR 0 16
9165: PUSH
9166: CALL_OW 45
9170: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9171: LD_VAR 0 16
9175: PPUSH
9176: LD_VAR 0 1
9180: PPUSH
9181: LD_INT 0
9183: PPUSH
9184: CALL_OW 49
// if vc_control = 1 then
9188: LD_OWVAR 38
9192: PUSH
9193: LD_INT 1
9195: EQUAL
9196: IFFALSE 9253
// begin hc_gallery =  ;
9198: LD_ADDR_OWVAR 33
9202: PUSH
9203: LD_STRING 
9205: ST_TO_ADDR
// hc_name =  ;
9206: LD_ADDR_OWVAR 26
9210: PUSH
9211: LD_STRING 
9213: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9214: LD_INT 0
9216: PPUSH
9217: LD_INT 3
9219: PPUSH
9220: LD_VAR 0 4
9224: PPUSH
9225: CALL_OW 380
// un = CreateHuman ;
9229: LD_ADDR_VAR 0 15
9233: PUSH
9234: CALL_OW 44
9238: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9239: LD_VAR 0 15
9243: PPUSH
9244: LD_VAR 0 16
9248: PPUSH
9249: CALL_OW 52
// end ; i = i + 1 ;
9253: LD_ADDR_VAR 0 13
9257: PUSH
9258: LD_VAR 0 13
9262: PUSH
9263: LD_INT 1
9265: PLUS
9266: ST_TO_ADDR
// end ; until i = vehCount ;
9267: LD_VAR 0 13
9271: PUSH
9272: LD_VAR 0 3
9276: EQUAL
9277: IFFALSE 7945
// repeat wait ( 0 0$1 ) ;
9279: LD_INT 35
9281: PPUSH
9282: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9286: LD_ADDR_VAR 0 20
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_VAR 0 2
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 21
9305: PUSH
9306: LD_INT 2
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 24
9315: PUSH
9316: LD_INT 250
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: ST_TO_ADDR
// if vehicleOK_list > 0 then
9333: LD_VAR 0 20
9337: PUSH
9338: LD_INT 0
9340: GREATER
9341: IFFALSE 9560
// begin for i in vehicleOK_list do
9343: LD_ADDR_VAR 0 13
9347: PUSH
9348: LD_VAR 0 20
9352: PUSH
9353: FOR_IN
9354: IFFALSE 9558
// begin if GetSide ( i ) <> side then
9356: LD_VAR 0 13
9360: PPUSH
9361: CALL_OW 255
9365: PUSH
9366: LD_VAR 0 2
9370: NONEQUAL
9371: IFFALSE 9384
// begin ComStop ( i ) ;
9373: LD_VAR 0 13
9377: PPUSH
9378: CALL_OW 141
// continue ;
9382: GO 9353
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9384: LD_ADDR_VAR 0 21
9388: PUSH
9389: LD_INT 22
9391: PUSH
9392: LD_VAR 0 11
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 69
9405: PPUSH
9406: LD_VAR 0 13
9410: PPUSH
9411: CALL_OW 74
9415: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9416: LD_ADDR_VAR 0 22
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_VAR 0 11
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 59
9438: PUSH
9439: EMPTY
9440: LIST
9441: PUSH
9442: LD_INT 21
9444: PUSH
9445: LD_INT 1
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 2
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: PPUSH
9475: CALL_OW 69
9479: PPUSH
9480: LD_VAR 0 13
9484: PPUSH
9485: CALL_OW 74
9489: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9490: LD_VAR 0 13
9494: PPUSH
9495: LD_VAR 0 21
9499: PPUSH
9500: CALL_OW 296
9504: PUSH
9505: LD_INT 8
9507: PLUS
9508: PUSH
9509: LD_VAR 0 13
9513: PPUSH
9514: LD_VAR 0 22
9518: PPUSH
9519: CALL_OW 296
9523: LESS
9524: IFFALSE 9542
// begin ComAttackUnit ( i , target1 ) ;
9526: LD_VAR 0 13
9530: PPUSH
9531: LD_VAR 0 21
9535: PPUSH
9536: CALL_OW 115
// end else
9540: GO 9556
// begin ComAttackUnit ( i , target2 ) ;
9542: LD_VAR 0 13
9546: PPUSH
9547: LD_VAR 0 22
9551: PPUSH
9552: CALL_OW 115
// end ; end ;
9556: GO 9353
9558: POP
9559: POP
// end ; until vehicleOK_list = [ ] ;
9560: LD_VAR 0 20
9564: PUSH
9565: EMPTY
9566: EQUAL
9567: IFFALSE 9279
// end ;
9569: LD_VAR 0 12
9573: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9574: LD_INT 0
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
// for i = 1 to 72 do
9580: LD_ADDR_VAR 0 5
9584: PUSH
9585: DOUBLE
9586: LD_INT 1
9588: DEC
9589: ST_TO_ADDR
9590: LD_INT 72
9592: PUSH
9593: FOR_TO
9594: IFFALSE 9652
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9596: LD_VAR 0 5
9600: PPUSH
9601: LD_VAR 0 1
9605: PPUSH
9606: CALL_OW 321
9610: PUSH
9611: LD_INT 1
9613: EQUAL
9614: PUSH
9615: LD_VAR 0 5
9619: PPUSH
9620: LD_VAR 0 3
9624: PPUSH
9625: CALL_OW 482
9629: PUSH
9630: LD_INT 1
9632: EQUAL
9633: AND
9634: IFFALSE 9650
// AddComResearch ( lab , i ) ;
9636: LD_VAR 0 2
9640: PPUSH
9641: LD_VAR 0 5
9645: PPUSH
9646: CALL_OW 184
9650: GO 9593
9652: POP
9653: POP
// end ;
9654: LD_VAR 0 4
9658: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9667: LD_ADDR_VAR 0 8
9671: PUSH
9672: LD_VAR 0 2
9676: PPUSH
9677: CALL_OW 313
9681: PUSH
9682: LD_EXP 36
9686: PUSH
9687: EMPTY
9688: LIST
9689: DIFF
9690: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9691: LD_ADDR_VAR 0 9
9695: PUSH
9696: LD_VAR 0 3
9700: PPUSH
9701: LD_INT 22
9703: PUSH
9704: LD_VAR 0 1
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 25
9715: PUSH
9716: LD_INT 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 24
9725: PUSH
9726: LD_INT 750
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 54
9738: PUSH
9739: EMPTY
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 70
9756: PUSH
9757: LD_EXP 36
9761: PUSH
9762: EMPTY
9763: LIST
9764: DIFF
9765: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9766: LD_ADDR_VAR 0 6
9770: PUSH
9771: LD_VAR 0 3
9775: PPUSH
9776: LD_INT 22
9778: PUSH
9779: LD_VAR 0 1
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 21
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 3
9800: PUSH
9801: LD_INT 24
9803: PUSH
9804: LD_INT 1000
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: PPUSH
9823: CALL_OW 70
9827: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9828: LD_VAR 0 6
9832: NOT
9833: PUSH
9834: LD_INT 22
9836: PUSH
9837: LD_VAR 0 1
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 25
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 24
9858: PUSH
9859: LD_INT 250
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 69
9875: NOT
9876: AND
9877: IFFALSE 9881
// exit ;
9879: GO 10063
// if buildings_list > 0 and engineerOkInside then
9881: LD_VAR 0 6
9885: PUSH
9886: LD_INT 0
9888: GREATER
9889: PUSH
9890: LD_VAR 0 8
9894: AND
9895: IFFALSE 9906
// ComExitBuilding ( engineerOkInside ) ;
9897: LD_VAR 0 8
9901: PPUSH
9902: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9906: LD_VAR 0 6
9910: PUSH
9911: LD_INT 0
9913: GREATER
9914: PUSH
9915: LD_VAR 0 9
9919: PUSH
9920: LD_INT 0
9922: GREATER
9923: AND
9924: IFFALSE 9944
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9926: LD_VAR 0 9
9930: PPUSH
9931: LD_VAR 0 6
9935: PUSH
9936: LD_INT 1
9938: ARRAY
9939: PPUSH
9940: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9944: LD_VAR 0 6
9948: PUSH
9949: LD_INT 0
9951: EQUAL
9952: PUSH
9953: LD_VAR 0 4
9957: PUSH
9958: LD_INT 0
9960: EQUAL
9961: AND
9962: PUSH
9963: LD_VAR 0 9
9967: PUSH
9968: LD_INT 0
9970: GREATER
9971: AND
9972: IFFALSE 9988
// ComEnterUnit ( engineerOkOutside , building ) ;
9974: LD_VAR 0 9
9978: PPUSH
9979: LD_VAR 0 2
9983: PPUSH
9984: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9988: LD_VAR 0 9
9992: PUSH
9993: LD_INT 0
9995: GREATER
9996: PUSH
9997: LD_VAR 0 6
10001: PUSH
10002: LD_INT 0
10004: EQUAL
10005: AND
10006: PUSH
10007: LD_VAR 0 4
10011: PUSH
10012: LD_INT 0
10014: GREATER
10015: AND
10016: IFFALSE 10063
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10018: LD_VAR 0 9
10022: PPUSH
10023: LD_VAR 0 4
10027: PUSH
10028: LD_INT 1
10030: ARRAY
10031: PPUSH
10032: LD_VAR 0 4
10036: PUSH
10037: LD_INT 2
10039: ARRAY
10040: PPUSH
10041: LD_VAR 0 4
10045: PUSH
10046: LD_INT 3
10048: ARRAY
10049: PPUSH
10050: LD_VAR 0 4
10054: PUSH
10055: LD_INT 4
10057: ARRAY
10058: PPUSH
10059: CALL_OW 145
// end ;
10063: LD_VAR 0 5
10067: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
10074: PPUSH
10075: PPUSH
10076: PPUSH
10077: PPUSH
10078: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10079: LD_ADDR_VAR 0 6
10083: PUSH
10084: LD_INT 22
10086: PUSH
10087: LD_VAR 0 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 25
10098: PUSH
10099: LD_INT 4
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 23
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 24
10118: PUSH
10119: LD_INT 251
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: PUSH
10137: LD_EXP 36
10141: PUSH
10142: EMPTY
10143: LIST
10144: DIFF
10145: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10146: LD_ADDR_VAR 0 7
10150: PUSH
10151: LD_VAR 0 3
10155: PPUSH
10156: LD_INT 22
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 23
10170: PUSH
10171: LD_INT 2
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 25
10180: PUSH
10181: LD_INT 4
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 50
10190: PUSH
10191: EMPTY
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 70
10204: PUSH
10205: LD_EXP 36
10209: PUSH
10210: EMPTY
10211: LIST
10212: DIFF
10213: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10214: LD_ADDR_VAR 0 10
10218: PUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: LD_INT 22
10226: PUSH
10227: LD_VAR 0 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 3
10248: PUSH
10249: LD_INT 25
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: LD_INT 24
10268: PUSH
10269: LD_INT 750
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 70
10290: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10291: LD_ADDR_VAR 0 11
10295: PUSH
10296: LD_VAR 0 2
10300: PPUSH
10301: LD_INT 22
10303: PUSH
10304: LD_VAR 0 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 21
10315: PUSH
10316: LD_INT 1
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 3
10325: PUSH
10326: LD_INT 25
10328: PUSH
10329: LD_INT 3
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: LD_INT 24
10345: PUSH
10346: LD_INT 1000
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PPUSH
10363: CALL_OW 70
10367: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10368: LD_VAR 0 10
10372: NOT
10373: PUSH
10374: LD_VAR 0 11
10378: NOT
10379: AND
10380: PUSH
10381: LD_VAR 0 6
10385: NOT
10386: AND
10387: IFFALSE 10391
// exit ;
10389: GO 10625
// if damageUnits > 0 and sci_list > 0 then
10391: LD_VAR 0 10
10395: PUSH
10396: LD_INT 0
10398: GREATER
10399: PUSH
10400: LD_VAR 0 6
10404: PUSH
10405: LD_INT 0
10407: GREATER
10408: AND
10409: IFFALSE 10425
// ComMoveToArea ( damageUnits , healArea ) ;
10411: LD_VAR 0 10
10415: PPUSH
10416: LD_VAR 0 2
10420: PPUSH
10421: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10425: LD_VAR 0 11
10429: PUSH
10430: LD_INT 0
10432: GREATER
10433: PUSH
10434: LD_VAR 0 6
10438: PUSH
10439: LD_INT 0
10441: GREATER
10442: AND
10443: IFFALSE 10454
// ComExitBuilding ( sci_list ) ;
10445: LD_VAR 0 6
10449: PPUSH
10450: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10454: LD_VAR 0 11
10458: PUSH
10459: LD_INT 0
10461: GREATER
10462: PUSH
10463: LD_VAR 0 7
10467: PUSH
10468: LD_INT 0
10470: GREATER
10471: AND
10472: IFFALSE 10492
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10474: LD_VAR 0 7
10478: PPUSH
10479: LD_VAR 0 11
10483: PUSH
10484: LD_INT 1
10486: ARRAY
10487: PPUSH
10488: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10492: LD_VAR 0 10
10496: PUSH
10497: LD_INT 0
10499: EQUAL
10500: PUSH
10501: LD_VAR 0 11
10505: PUSH
10506: LD_INT 0
10508: EQUAL
10509: AND
10510: PUSH
10511: LD_VAR 0 7
10515: PUSH
10516: LD_INT 0
10518: GREATER
10519: AND
10520: IFFALSE 10625
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10522: LD_ADDR_VAR 0 12
10526: PUSH
10527: LD_INT 22
10529: PUSH
10530: LD_VAR 0 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 3
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 30
10551: PUSH
10552: LD_INT 8
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: PPUSH
10564: CALL_OW 69
10568: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10569: LD_ADDR_VAR 0 13
10573: PUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 12
10581: PPUSH
10582: CALL_OW 12
10586: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10587: LD_VAR 0 7
10591: PPUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 60
10597: PUSH
10598: EMPTY
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 72
10609: PPUSH
10610: LD_VAR 0 12
10614: PUSH
10615: LD_VAR 0 13
10619: ARRAY
10620: PPUSH
10621: CALL_OW 120
// end ; end ;
10625: LD_VAR 0 5
10629: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10630: LD_INT 0
10632: PPUSH
10633: PPUSH
10634: PPUSH
10635: PPUSH
// tmpTab = [ ] ;
10636: LD_ADDR_VAR 0 6
10640: PUSH
10641: EMPTY
10642: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10643: LD_INT 22
10645: PUSH
10646: LD_VAR 0 1
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 30
10657: PUSH
10658: LD_INT 32
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: PUSH
10674: LD_INT 0
10676: GREATER
10677: IFFALSE 10760
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10679: LD_ADDR_VAR 0 4
10683: PUSH
10684: LD_INT 22
10686: PUSH
10687: LD_VAR 0 1
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 30
10698: PUSH
10699: LD_INT 32
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 69
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10758
// begin for j in UnitsInside ( i ) do
10718: LD_ADDR_VAR 0 5
10722: PUSH
10723: LD_VAR 0 4
10727: PPUSH
10728: CALL_OW 313
10732: PUSH
10733: FOR_IN
10734: IFFALSE 10754
// tmpTab = tmpTab ^ j ;
10736: LD_ADDR_VAR 0 6
10740: PUSH
10741: LD_VAR 0 6
10745: PUSH
10746: LD_VAR 0 5
10750: ADD
10751: ST_TO_ADDR
10752: GO 10733
10754: POP
10755: POP
// end ;
10756: GO 10715
10758: POP
10759: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10760: LD_VAR 0 6
10764: PPUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: CALL_OW 250
10774: PPUSH
10775: LD_VAR 0 2
10779: PPUSH
10780: CALL_OW 251
10784: PPUSH
10785: CALL_OW 114
// end ;
10789: LD_VAR 0 3
10793: RET
// export function CraneRepairBuild ( side , baseArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10794: LD_INT 0
10796: PPUSH
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10802: LD_ADDR_VAR 0 8
10806: PUSH
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 22
10814: PUSH
10815: LD_VAR 0 1
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 21
10826: PUSH
10827: LD_INT 2
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 34
10836: PUSH
10837: LD_INT 52
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 70
10853: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10854: LD_ADDR_VAR 0 9
10858: PUSH
10859: LD_VAR 0 2
10863: PPUSH
10864: LD_INT 22
10866: PUSH
10867: LD_VAR 0 1
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 21
10878: PUSH
10879: LD_INT 3
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: LD_INT 24
10891: PUSH
10892: LD_INT 1000
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: PPUSH
10911: CALL_OW 70
10915: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10916: LD_VAR 0 9
10920: PUSH
10921: LD_INT 0
10923: GREATER
10924: PUSH
10925: LD_VAR 0 8
10929: PPUSH
10930: LD_INT 24
10932: PUSH
10933: LD_INT 750
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PPUSH
10940: CALL_OW 72
10944: PUSH
10945: LD_INT 0
10947: GREATER
10948: AND
10949: IFFALSE 10969
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10951: LD_VAR 0 8
10955: PPUSH
10956: LD_VAR 0 9
10960: PUSH
10961: LD_INT 1
10963: ARRAY
10964: PPUSH
10965: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10969: LD_VAR 0 8
10973: PUSH
10974: LD_INT 0
10976: GREATER
10977: PUSH
10978: LD_VAR 0 9
10982: PUSH
10983: LD_INT 0
10985: EQUAL
10986: AND
10987: PUSH
10988: LD_VAR 0 3
10992: PUSH
10993: LD_INT 0
10995: GREATER
10996: AND
10997: IFFALSE 11044
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10999: LD_VAR 0 8
11003: PPUSH
11004: LD_VAR 0 3
11008: PUSH
11009: LD_INT 1
11011: ARRAY
11012: PPUSH
11013: LD_VAR 0 3
11017: PUSH
11018: LD_INT 2
11020: ARRAY
11021: PPUSH
11022: LD_VAR 0 3
11026: PUSH
11027: LD_INT 3
11029: ARRAY
11030: PPUSH
11031: LD_VAR 0 3
11035: PUSH
11036: LD_INT 4
11038: ARRAY
11039: PPUSH
11040: CALL_OW 567
// end ;
11044: LD_VAR 0 4
11048: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
11059: LD_ADDR_VAR 0 6
11063: PUSH
11064: LD_VAR 0 2
11068: PPUSH
11069: LD_INT 22
11071: PUSH
11072: LD_VAR 0 1
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 56
11083: PUSH
11084: EMPTY
11085: LIST
11086: PUSH
11087: LD_INT 24
11089: PUSH
11090: LD_INT 700
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 3
11099: PUSH
11100: LD_INT 60
11102: PUSH
11103: EMPTY
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: LD_INT 25
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 25
11125: PUSH
11126: LD_INT 5
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 25
11135: PUSH
11136: LD_INT 8
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 25
11145: PUSH
11146: LD_INT 9
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 70
11171: PUSH
11172: LD_EXP 26
11176: PUSH
11177: LD_EXP 27
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: DIFF
11186: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11187: LD_ADDR_VAR 0 7
11191: PUSH
11192: LD_VAR 0 2
11196: PPUSH
11197: LD_INT 22
11199: PUSH
11200: LD_VAR 0 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 30
11211: PUSH
11212: LD_INT 32
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 58
11221: PUSH
11222: EMPTY
11223: LIST
11224: PUSH
11225: LD_INT 24
11227: PUSH
11228: LD_INT 251
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PPUSH
11241: CALL_OW 70
11245: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11246: LD_ADDR_VAR 0 9
11250: PUSH
11251: LD_VAR 0 2
11255: PPUSH
11256: LD_INT 22
11258: PUSH
11259: LD_VAR 0 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: LD_INT 30
11273: PUSH
11274: LD_INT 4
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 30
11283: PUSH
11284: LD_INT 5
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 24
11298: PUSH
11299: LD_INT 251
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 70
11315: ST_TO_ADDR
// if barrackList > 0 then
11316: LD_VAR 0 9
11320: PUSH
11321: LD_INT 0
11323: GREATER
11324: IFFALSE 11472
// begin if turretList = 0 then
11326: LD_VAR 0 7
11330: PUSH
11331: LD_INT 0
11333: EQUAL
11334: IFFALSE 11376
// begin if soldiers_list > 0 then
11336: LD_VAR 0 6
11340: PUSH
11341: LD_INT 0
11343: GREATER
11344: IFFALSE 11374
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11346: LD_VAR 0 6
11350: PPUSH
11351: LD_VAR 0 9
11355: PUSH
11356: LD_INT 1
11358: PPUSH
11359: LD_VAR 0 9
11363: PPUSH
11364: CALL_OW 12
11368: ARRAY
11369: PPUSH
11370: CALL_OW 120
// end else
11374: GO 11472
// begin for i in barrackList do
11376: LD_ADDR_VAR 0 4
11380: PUSH
11381: LD_VAR 0 9
11385: PUSH
11386: FOR_IN
11387: IFFALSE 11470
// begin insideUnits = UnitsInside ( i ) ;
11389: LD_ADDR_VAR 0 10
11393: PUSH
11394: LD_VAR 0 4
11398: PPUSH
11399: CALL_OW 313
11403: ST_TO_ADDR
// if insideUnits > 0 then
11404: LD_VAR 0 10
11408: PUSH
11409: LD_INT 0
11411: GREATER
11412: IFFALSE 11436
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11414: LD_VAR 0 10
11418: PUSH
11419: LD_INT 1
11421: ARRAY
11422: PPUSH
11423: LD_VAR 0 7
11427: PUSH
11428: LD_INT 1
11430: ARRAY
11431: PPUSH
11432: CALL_OW 120
// if soldiers_list > 0 then
11436: LD_VAR 0 6
11440: PUSH
11441: LD_INT 0
11443: GREATER
11444: IFFALSE 11468
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11446: LD_VAR 0 6
11450: PUSH
11451: LD_INT 1
11453: ARRAY
11454: PPUSH
11455: LD_VAR 0 7
11459: PUSH
11460: LD_INT 1
11462: ARRAY
11463: PPUSH
11464: CALL_OW 120
// end ;
11468: GO 11386
11470: POP
11471: POP
// end ; end ; end ;
11472: LD_VAR 0 3
11476: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11477: LD_INT 0
11479: PPUSH
11480: PPUSH
11481: PPUSH
11482: PPUSH
11483: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11484: LD_ADDR_VAR 0 6
11488: PUSH
11489: LD_INT 22
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: LD_INT 30
11506: PUSH
11507: LD_INT 31
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 30
11516: PUSH
11517: LD_INT 32
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 30
11526: PUSH
11527: LD_INT 33
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 30
11536: PUSH
11537: LD_INT 4
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 30
11546: PUSH
11547: LD_INT 5
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11571: LD_ADDR_VAR 0 7
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_VAR 0 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 58
11600: PUSH
11601: EMPTY
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: PPUSH
11609: CALL_OW 69
11613: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 0
11621: GREATER
11622: PUSH
11623: LD_VAR 0 7
11627: PUSH
11628: LD_INT 0
11630: GREATER
11631: AND
11632: IFFALSE 11702
// begin for i in turretsList do
11634: LD_ADDR_VAR 0 4
11638: PUSH
11639: LD_VAR 0 6
11643: PUSH
11644: FOR_IN
11645: IFFALSE 11700
// begin for j in enemyBuildings do
11647: LD_ADDR_VAR 0 5
11651: PUSH
11652: LD_VAR 0 7
11656: PUSH
11657: FOR_IN
11658: IFFALSE 11696
// begin if GetDistUnits ( i , j ) < 20 then
11660: LD_VAR 0 4
11664: PPUSH
11665: LD_VAR 0 5
11669: PPUSH
11670: CALL_OW 296
11674: PUSH
11675: LD_INT 20
11677: LESS
11678: IFFALSE 11694
// begin ComAttackUnit ( i , j ) ;
11680: LD_VAR 0 4
11684: PPUSH
11685: LD_VAR 0 5
11689: PPUSH
11690: CALL_OW 115
// end ; end ;
11694: GO 11657
11696: POP
11697: POP
// end ;
11698: GO 11644
11700: POP
11701: POP
// end ; end ;
11702: LD_VAR 0 3
11706: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11707: LD_INT 0
11709: PPUSH
11710: PPUSH
// for i = 1 to vehCount do
11711: LD_ADDR_VAR 0 9
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 3
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11774
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11729: LD_VAR 0 2
11733: PPUSH
11734: LD_VAR 0 7
11738: PPUSH
11739: LD_VAR 0 5
11743: PPUSH
11744: LD_VAR 0 6
11748: PPUSH
11749: LD_VAR 0 4
11753: PUSH
11754: LD_INT 1
11756: PPUSH
11757: LD_VAR 0 4
11761: PPUSH
11762: CALL_OW 12
11766: ARRAY
11767: PPUSH
11768: CALL_OW 185
11772: GO 11726
11774: POP
11775: POP
// end ;
11776: LD_VAR 0 8
11780: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11781: LD_INT 0
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
// if oponent = 1 then
11789: LD_VAR 0 2
11793: PUSH
11794: LD_INT 1
11796: EQUAL
11797: IFFALSE 11987
// begin repeat wait ( 0 0$1 ) ;
11799: LD_INT 35
11801: PPUSH
11802: CALL_OW 67
// for j in legionVehicles do
11806: LD_ADDR_VAR 0 5
11810: PUSH
11811: LD_EXP 55
11815: PUSH
11816: FOR_IN
11817: IFFALSE 11975
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11819: LD_ADDR_VAR 0 7
11823: PUSH
11824: LD_INT 22
11826: PUSH
11827: LD_VAR 0 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 69
11840: PPUSH
11841: LD_VAR 0 5
11845: PPUSH
11846: CALL_OW 74
11850: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11851: LD_ADDR_VAR 0 8
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_VAR 0 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 30
11870: PUSH
11871: LD_INT 32
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 59
11880: PUSH
11881: EMPTY
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: PPUSH
11892: CALL_OW 69
11896: PPUSH
11897: LD_VAR 0 5
11901: PPUSH
11902: CALL_OW 74
11906: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11907: LD_VAR 0 5
11911: PPUSH
11912: LD_VAR 0 7
11916: PPUSH
11917: CALL_OW 296
11921: PUSH
11922: LD_INT 8
11924: PLUS
11925: PUSH
11926: LD_VAR 0 5
11930: PPUSH
11931: LD_VAR 0 8
11935: PPUSH
11936: CALL_OW 296
11940: LESS
11941: IFFALSE 11959
// ComAttackUnit ( j , target1 ) else
11943: LD_VAR 0 5
11947: PPUSH
11948: LD_VAR 0 7
11952: PPUSH
11953: CALL_OW 115
11957: GO 11973
// ComAttackUnit ( j , target2 ) ;
11959: LD_VAR 0 5
11963: PPUSH
11964: LD_VAR 0 8
11968: PPUSH
11969: CALL_OW 115
// end ;
11973: GO 11816
11975: POP
11976: POP
// until legionVehicles = 0 ;
11977: LD_EXP 55
11981: PUSH
11982: LD_INT 0
11984: EQUAL
11985: IFFALSE 11799
// end ; if oponent = 2 then
11987: LD_VAR 0 2
11991: PUSH
11992: LD_INT 2
11994: EQUAL
11995: IFFALSE 12185
// begin repeat wait ( 0 0$1 ) ;
11997: LD_INT 35
11999: PPUSH
12000: CALL_OW 67
// for j in russianVehicles do
12004: LD_ADDR_VAR 0 5
12008: PUSH
12009: LD_EXP 61
12013: PUSH
12014: FOR_IN
12015: IFFALSE 12173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12017: LD_ADDR_VAR 0 7
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_VAR 0 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 69
12038: PPUSH
12039: LD_VAR 0 5
12043: PPUSH
12044: CALL_OW 74
12048: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12049: LD_ADDR_VAR 0 8
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_VAR 0 1
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 32
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 59
12078: PUSH
12079: EMPTY
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: PPUSH
12090: CALL_OW 69
12094: PPUSH
12095: LD_VAR 0 5
12099: PPUSH
12100: CALL_OW 74
12104: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12105: LD_VAR 0 5
12109: PPUSH
12110: LD_VAR 0 7
12114: PPUSH
12115: CALL_OW 296
12119: PUSH
12120: LD_INT 8
12122: PLUS
12123: PUSH
12124: LD_VAR 0 5
12128: PPUSH
12129: LD_VAR 0 8
12133: PPUSH
12134: CALL_OW 296
12138: LESS
12139: IFFALSE 12157
// ComAttackUnit ( j , target1 ) else
12141: LD_VAR 0 5
12145: PPUSH
12146: LD_VAR 0 7
12150: PPUSH
12151: CALL_OW 115
12155: GO 12171
// ComAttackUnit ( j , target2 ) ;
12157: LD_VAR 0 5
12161: PPUSH
12162: LD_VAR 0 8
12166: PPUSH
12167: CALL_OW 115
// end ;
12171: GO 12014
12173: POP
12174: POP
// until russianVehicles = 0 ;
12175: LD_EXP 61
12179: PUSH
12180: LD_INT 0
12182: EQUAL
12183: IFFALSE 11997
// end ; if oponent = 3 then
12185: LD_VAR 0 2
12189: PUSH
12190: LD_INT 3
12192: EQUAL
12193: IFFALSE 12383
// begin repeat wait ( 0 0$1 ) ;
12195: LD_INT 35
12197: PPUSH
12198: CALL_OW 67
// for j in allianceVehicles do
12202: LD_ADDR_VAR 0 5
12206: PUSH
12207: LD_EXP 62
12211: PUSH
12212: FOR_IN
12213: IFFALSE 12371
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12215: LD_ADDR_VAR 0 7
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_VAR 0 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: PPUSH
12237: LD_VAR 0 5
12241: PPUSH
12242: CALL_OW 74
12246: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12247: LD_ADDR_VAR 0 8
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_VAR 0 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 32
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 59
12276: PUSH
12277: EMPTY
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: PPUSH
12293: LD_VAR 0 5
12297: PPUSH
12298: CALL_OW 74
12302: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12303: LD_VAR 0 5
12307: PPUSH
12308: LD_VAR 0 7
12312: PPUSH
12313: CALL_OW 296
12317: PUSH
12318: LD_INT 8
12320: PLUS
12321: PUSH
12322: LD_VAR 0 5
12326: PPUSH
12327: LD_VAR 0 8
12331: PPUSH
12332: CALL_OW 296
12336: LESS
12337: IFFALSE 12355
// ComAttackUnit ( j , target1 ) else
12339: LD_VAR 0 5
12343: PPUSH
12344: LD_VAR 0 7
12348: PPUSH
12349: CALL_OW 115
12353: GO 12369
// ComAttackUnit ( j , target2 ) ;
12355: LD_VAR 0 5
12359: PPUSH
12360: LD_VAR 0 8
12364: PPUSH
12365: CALL_OW 115
// end ;
12369: GO 12212
12371: POP
12372: POP
// until allianceVehicles = 0 ;
12373: LD_EXP 62
12377: PUSH
12378: LD_INT 0
12380: EQUAL
12381: IFFALSE 12195
// end ; end ;
12383: LD_VAR 0 3
12387: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12388: LD_INT 0
12390: PPUSH
12391: PPUSH
12392: PPUSH
12393: PPUSH
12394: PPUSH
12395: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12396: LD_ADDR_VAR 0 6
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_VAR 0 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 25
12415: PUSH
12416: LD_INT 9
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12432: LD_ADDR_VAR 0 7
12436: PUSH
12437: LD_INT 81
12439: PUSH
12440: LD_VAR 0 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: LD_INT 21
12454: PUSH
12455: LD_INT 3
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12475: LD_ADDR_VAR 0 4
12479: PUSH
12480: LD_INT 1
12482: PPUSH
12483: LD_INT 3
12485: PPUSH
12486: CALL_OW 12
12490: ST_TO_ADDR
// for i = 1 to list do
12491: LD_ADDR_VAR 0 5
12495: PUSH
12496: DOUBLE
12497: LD_INT 1
12499: DEC
12500: ST_TO_ADDR
12501: LD_VAR 0 6
12505: PUSH
12506: FOR_TO
12507: IFFALSE 12709
// for ta in filter do
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_VAR 0 7
12518: PUSH
12519: FOR_IN
12520: IFFALSE 12705
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12522: LD_VAR 0 6
12526: PUSH
12527: LD_VAR 0 5
12531: ARRAY
12532: PPUSH
12533: LD_VAR 0 3
12537: PPUSH
12538: CALL_OW 296
12542: PUSH
12543: LD_INT 15
12545: LESSEQUAL
12546: IFFALSE 12703
// begin case c of 1 :
12548: LD_VAR 0 4
12552: PUSH
12553: LD_INT 1
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12599
12561: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12562: LD_VAR 0 6
12566: PUSH
12567: LD_VAR 0 5
12571: ARRAY
12572: PPUSH
12573: LD_VAR 0 3
12577: PPUSH
12578: CALL_OW 250
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: CALL_OW 251
12592: PPUSH
12593: CALL_OW 154
12597: GO 12703
12599: LD_INT 2
12601: DOUBLE
12602: EQUAL
12603: IFTRUE 12607
12605: GO 12671
12607: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12608: LD_VAR 0 6
12612: PUSH
12613: LD_VAR 0 5
12617: ARRAY
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: CALL_OW 250
12628: PUSH
12629: LD_INT 1
12631: NEG
12632: PPUSH
12633: LD_INT 1
12635: PPUSH
12636: CALL_OW 12
12640: PLUS
12641: PPUSH
12642: LD_VAR 0 3
12646: PPUSH
12647: CALL_OW 251
12651: PUSH
12652: LD_INT 1
12654: NEG
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 12
12663: PLUS
12664: PPUSH
12665: CALL_OW 153
12669: GO 12703
12671: LD_INT 3
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12702
12679: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12680: LD_VAR 0 6
12684: PUSH
12685: LD_VAR 0 5
12689: ARRAY
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: CALL_OW 115
12700: GO 12703
12702: POP
// end ; end ;
12703: GO 12519
12705: POP
12706: POP
12707: GO 12506
12709: POP
12710: POP
// end ;
12711: LD_VAR 0 2
12715: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12716: LD_INT 0
12718: PPUSH
12719: PPUSH
12720: PPUSH
12721: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12722: LD_INT 22
12724: PUSH
12725: LD_VAR 0 1
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 21
12736: PUSH
12737: LD_INT 2
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 34
12746: PUSH
12747: LD_INT 49
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 69
12763: PUSH
12764: LD_INT 0
12766: EQUAL
12767: IFFALSE 12771
// exit ;
12769: GO 13026
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12771: LD_INT 22
12773: PUSH
12774: LD_VAR 0 1
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 21
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 34
12795: PUSH
12796: LD_INT 49
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: PUSH
12813: LD_INT 0
12815: GREATER
12816: IFFALSE 13026
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12818: LD_ADDR_VAR 0 6
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_VAR 0 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 21
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 34
12847: PUSH
12848: LD_INT 49
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12865: LD_INT 105
12867: PPUSH
12868: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12872: LD_ADDR_VAR 0 4
12876: PUSH
12877: LD_VAR 0 6
12881: PPUSH
12882: LD_INT 3
12884: PUSH
12885: LD_INT 60
12887: PUSH
12888: EMPTY
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 72
12899: PUSH
12900: FOR_IN
12901: IFFALSE 13014
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12903: LD_ADDR_VAR 0 5
12907: PUSH
12908: LD_INT 81
12910: PUSH
12911: LD_VAR 0 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 101
12922: PUSH
12923: LD_VAR 0 2
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: LD_INT 21
12937: PUSH
12938: LD_INT 1
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: LD_INT 58
12950: PUSH
12951: EMPTY
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: PPUSH
12968: CALL_OW 69
12972: PPUSH
12973: LD_VAR 0 4
12977: PPUSH
12978: CALL_OW 74
12982: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12983: LD_VAR 0 4
12987: PPUSH
12988: LD_VAR 0 5
12992: PPUSH
12993: CALL_OW 250
12997: PPUSH
12998: LD_VAR 0 5
13002: PPUSH
13003: CALL_OW 251
13007: PPUSH
13008: CALL_OW 111
// end ;
13012: GO 12900
13014: POP
13015: POP
// until vehs = 0 ;
13016: LD_VAR 0 6
13020: PUSH
13021: LD_INT 0
13023: EQUAL
13024: IFFALSE 12818
// end ;
13026: LD_VAR 0 3
13030: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
13039: LD_VAR 0 1
13043: NOT
13044: PUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 263
13054: PUSH
13055: LD_INT 2
13057: EQUAL
13058: NOT
13059: OR
13060: IFFALSE 13064
// exit ;
13062: GO 13380
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_VAR 0 1
13076: PPUSH
13077: CALL_OW 255
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: LD_INT 30
13091: PUSH
13092: LD_INT 36
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 34
13101: PUSH
13102: LD_INT 31
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: ST_TO_ADDR
// if not tmp then
13123: LD_VAR 0 6
13127: NOT
13128: IFFALSE 13132
// exit ;
13130: GO 13380
// result := [ ] ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: EMPTY
13138: ST_TO_ADDR
// for i in tmp do
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: LD_VAR 0 6
13148: PUSH
13149: FOR_IN
13150: IFFALSE 13221
// begin t := UnitsInside ( i ) ;
13152: LD_ADDR_VAR 0 4
13156: PUSH
13157: LD_VAR 0 3
13161: PPUSH
13162: CALL_OW 313
13166: ST_TO_ADDR
// if t then
13167: LD_VAR 0 4
13171: IFFALSE 13219
// for j in t do
13173: LD_ADDR_VAR 0 7
13177: PUSH
13178: LD_VAR 0 4
13182: PUSH
13183: FOR_IN
13184: IFFALSE 13217
// result := Insert ( result , result + 1 , j ) ;
13186: LD_ADDR_VAR 0 2
13190: PUSH
13191: LD_VAR 0 2
13195: PPUSH
13196: LD_VAR 0 2
13200: PUSH
13201: LD_INT 1
13203: PLUS
13204: PPUSH
13205: LD_VAR 0 7
13209: PPUSH
13210: CALL_OW 2
13214: ST_TO_ADDR
13215: GO 13183
13217: POP
13218: POP
// end ;
13219: GO 13149
13221: POP
13222: POP
// if not result then
13223: LD_VAR 0 2
13227: NOT
13228: IFFALSE 13232
// exit ;
13230: GO 13380
// mech := result [ 1 ] ;
13232: LD_ADDR_VAR 0 5
13236: PUSH
13237: LD_VAR 0 2
13241: PUSH
13242: LD_INT 1
13244: ARRAY
13245: ST_TO_ADDR
// if result > 1 then
13246: LD_VAR 0 2
13250: PUSH
13251: LD_INT 1
13253: GREATER
13254: IFFALSE 13366
// for i = 2 to result do
13256: LD_ADDR_VAR 0 3
13260: PUSH
13261: DOUBLE
13262: LD_INT 2
13264: DEC
13265: ST_TO_ADDR
13266: LD_VAR 0 2
13270: PUSH
13271: FOR_TO
13272: IFFALSE 13364
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13274: LD_ADDR_VAR 0 4
13278: PUSH
13279: LD_VAR 0 2
13283: PUSH
13284: LD_VAR 0 3
13288: ARRAY
13289: PPUSH
13290: LD_INT 3
13292: PPUSH
13293: CALL_OW 259
13297: PUSH
13298: LD_VAR 0 2
13302: PUSH
13303: LD_VAR 0 3
13307: ARRAY
13308: PPUSH
13309: CALL_OW 432
13313: MINUS
13314: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13315: LD_VAR 0 4
13319: PUSH
13320: LD_VAR 0 5
13324: PPUSH
13325: LD_INT 3
13327: PPUSH
13328: CALL_OW 259
13332: PUSH
13333: LD_VAR 0 5
13337: PPUSH
13338: CALL_OW 432
13342: MINUS
13343: GREATEREQUAL
13344: IFFALSE 13362
// mech := result [ i ] ;
13346: LD_ADDR_VAR 0 5
13350: PUSH
13351: LD_VAR 0 2
13355: PUSH
13356: LD_VAR 0 3
13360: ARRAY
13361: ST_TO_ADDR
// end ;
13362: GO 13271
13364: POP
13365: POP
// ComLinkTo ( vehicle , mech ) ;
13366: LD_VAR 0 1
13370: PPUSH
13371: LD_VAR 0 5
13375: PPUSH
13376: CALL_OW 135
// end ;
13380: LD_VAR 0 2
13384: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
13385: LD_INT 0
13387: PPUSH
13388: PPUSH
// if BuildingStatus ( b ) = bs_build then
13389: LD_VAR 0 2
13393: PPUSH
13394: CALL_OW 461
13398: PUSH
13399: LD_INT 1
13401: EQUAL
13402: IFFALSE 13490
// for i = 1 to plist do
13404: LD_ADDR_VAR 0 4
13408: PUSH
13409: DOUBLE
13410: LD_INT 1
13412: DEC
13413: ST_TO_ADDR
13414: LD_VAR 0 1
13418: PUSH
13419: FOR_TO
13420: IFFALSE 13488
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13422: LD_VAR 0 1
13426: PUSH
13427: LD_VAR 0 4
13431: ARRAY
13432: PPUSH
13433: LD_STRING h
13435: PUSH
13436: LD_VAR 0 2
13440: PPUSH
13441: CALL_OW 250
13445: PUSH
13446: LD_VAR 0 2
13450: PPUSH
13451: CALL_OW 251
13455: PUSH
13456: LD_VAR 0 2
13460: PUSH
13461: LD_INT 0
13463: PUSH
13464: LD_INT 0
13466: PUSH
13467: LD_INT 0
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: PPUSH
13482: CALL_OW 446
13486: GO 13419
13488: POP
13489: POP
// end ; end_of_file
13490: LD_VAR 0 3
13494: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
13495: LD_VAR 0 1
13499: PUSH
13500: LD_INT 1
13502: EQUAL
13503: PUSH
13504: LD_VAR 0 2
13508: PUSH
13509: LD_INT 4
13511: EQUAL
13512: AND
13513: IFFALSE 13522
// YouLost ( text ) ;
13515: LD_STRING text
13517: PPUSH
13518: CALL_OW 104
// end ;
13522: PPOPN 2
13524: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
13525: LD_VAR 0 1
13529: PUSH
13530: LD_INT 340
13532: EQUAL
13533: PUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: CALL_OW 255
13543: PUSH
13544: LD_INT 4
13546: EQUAL
13547: AND
13548: IFFALSE 13624
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
13550: LD_INT 340
13552: PPUSH
13553: LD_INT 84
13555: PPUSH
13556: LD_INT 1
13558: PPUSH
13559: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
13563: LD_INT 340
13565: PPUSH
13566: LD_INT 68
13568: PPUSH
13569: LD_INT 100
13571: PPUSH
13572: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13576: LD_INT 340
13578: PPUSH
13579: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13583: LD_INT 340
13585: PPUSH
13586: LD_INT 48
13588: PPUSH
13589: LD_INT 69
13591: PPUSH
13592: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13596: LD_INT 340
13598: PPUSH
13599: LD_INT 39
13601: PPUSH
13602: LD_INT 61
13604: PPUSH
13605: CALL_OW 171
// wait ( 0 0$10 ) ;
13609: LD_INT 350
13611: PPUSH
13612: CALL_OW 67
// powellUnloadCargo = 1 ;
13616: LD_ADDR_EXP 70
13620: PUSH
13621: LD_INT 1
13623: ST_TO_ADDR
// end ; end ;
13624: PPOPN 2
13626: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13627: LD_INT 0
13629: PPUSH
13630: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 4
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 21
13648: PUSH
13649: LD_INT 1
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 56
13658: PUSH
13659: EMPTY
13660: LIST
13661: PUSH
13662: LD_INT 3
13664: PUSH
13665: LD_INT 60
13667: PUSH
13668: EMPTY
13669: LIST
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL_OW 69
13685: PUSH
13686: LD_EXP 17
13690: PUSH
13691: EMPTY
13692: LIST
13693: DIFF
13694: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13695: LD_VAR 0 1
13699: PPUSH
13700: CALL_OW 255
13704: PUSH
13705: LD_INT 4
13707: EQUAL
13708: IFFALSE 13839
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13710: LD_INT 22
13712: PUSH
13713: LD_INT 4
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 30
13722: PUSH
13723: LD_INT 8
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 69
13738: PUSH
13739: LD_INT 1
13741: EQUAL
13742: IFFALSE 13839
// begin for i = 1 to 3 do
13744: LD_ADDR_VAR 0 2
13748: PUSH
13749: DOUBLE
13750: LD_INT 1
13752: DEC
13753: ST_TO_ADDR
13754: LD_INT 3
13756: PUSH
13757: FOR_TO
13758: IFFALSE 13822
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13760: LD_VAR 0 3
13764: PUSH
13765: LD_VAR 0 2
13769: ARRAY
13770: PPUSH
13771: LD_INT 3
13773: PUSH
13774: LD_INT 25
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PPUSH
13788: CALL_OW 72
13792: PPUSH
13793: LD_VAR 0 1
13797: PPUSH
13798: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13802: LD_VAR 0 3
13806: PUSH
13807: LD_VAR 0 2
13811: ARRAY
13812: PPUSH
13813: LD_INT 4
13815: PPUSH
13816: CALL_OW 183
// end ;
13820: GO 13757
13822: POP
13823: POP
// ResAllTechs ( 4 , building , 1 ) ;
13824: LD_INT 4
13826: PPUSH
13827: LD_VAR 0 1
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: CALL 9574 0 3
// end ; if GetSide ( building ) = 8 then
13839: LD_VAR 0 1
13843: PPUSH
13844: CALL_OW 255
13848: PUSH
13849: LD_INT 8
13851: EQUAL
13852: IFFALSE 14037
// begin if GetNation ( building ) = 3 then
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 248
13863: PUSH
13864: LD_INT 3
13866: EQUAL
13867: IFFALSE 14037
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13869: LD_EXP 36
13873: PPUSH
13874: LD_INT 73
13876: PPUSH
13877: LD_INT 16
13879: PPUSH
13880: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13884: LD_EXP 36
13888: PPUSH
13889: LD_INT 21
13891: PPUSH
13892: LD_INT 74
13894: PPUSH
13895: LD_INT 12
13897: PPUSH
13898: LD_INT 1
13900: PPUSH
13901: CALL_OW 205
// wait ( 0 0$2 ) ;
13905: LD_INT 70
13907: PPUSH
13908: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13912: LD_EXP 36
13916: PPUSH
13917: LD_INT 22
13919: PUSH
13920: LD_INT 8
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 30
13929: PUSH
13930: LD_INT 3
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 23
13939: PUSH
13940: LD_INT 3
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: PPUSH
13952: CALL_OW 69
13956: PUSH
13957: LD_INT 1
13959: ARRAY
13960: PPUSH
13961: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13965: LD_EXP 36
13969: PPUSH
13970: LD_INT 3
13972: PPUSH
13973: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13977: LD_INT 22
13979: PUSH
13980: LD_INT 8
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 30
13989: PUSH
13990: LD_INT 3
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 23
13999: PUSH
14000: LD_INT 3
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: PPUSH
14012: CALL_OW 69
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: LD_INT 24
14023: PPUSH
14024: LD_INT 3
14026: PPUSH
14027: LD_INT 3
14029: PPUSH
14030: LD_INT 48
14032: PPUSH
14033: CALL_OW 185
// end ; end ; end ;
14037: PPOPN 3
14039: END
// on BuildingComplete ( building ) do var powellPeople ;
14040: LD_INT 0
14042: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
14043: LD_VAR 0 1
14047: PPUSH
14048: CALL_OW 255
14052: PUSH
14053: LD_INT 4
14055: EQUAL
14056: PUSH
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 266
14066: PUSH
14067: LD_INT 17
14069: EQUAL
14070: AND
14071: IFFALSE 14353
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_INT 22
14080: PUSH
14081: LD_INT 4
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 56
14100: PUSH
14101: EMPTY
14102: LIST
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: LD_INT 60
14109: PUSH
14110: EMPTY
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: PPUSH
14123: CALL_OW 69
14127: PUSH
14128: LD_EXP 17
14132: PUSH
14133: EMPTY
14134: LIST
14135: DIFF
14136: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
14137: LD_INT 22
14139: PUSH
14140: LD_INT 4
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 21
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 30
14159: PUSH
14160: LD_INT 32
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: PUSH
14177: LD_INT 1
14179: ARRAY
14180: PPUSH
14181: LD_INT 6
14183: PPUSH
14184: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
14188: LD_INT 22
14190: PUSH
14191: LD_INT 4
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 3
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 30
14210: PUSH
14211: LD_INT 32
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: PUSH
14228: LD_INT 2
14230: ARRAY
14231: PPUSH
14232: LD_INT 5
14234: PPUSH
14235: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
14239: LD_VAR 0 2
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 3
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 30
14270: PUSH
14271: LD_INT 32
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
14296: LD_VAR 0 2
14300: PUSH
14301: LD_INT 2
14303: ARRAY
14304: PPUSH
14305: LD_INT 22
14307: PUSH
14308: LD_INT 4
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 21
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 30
14327: PUSH
14328: LD_INT 32
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: PPUSH
14340: CALL_OW 69
14344: PUSH
14345: LD_INT 2
14347: ARRAY
14348: PPUSH
14349: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
14353: LD_VAR 0 1
14357: PPUSH
14358: CALL_OW 255
14362: PUSH
14363: LD_INT 4
14365: EQUAL
14366: PUSH
14367: LD_VAR 0 1
14371: PPUSH
14372: CALL_OW 266
14376: PUSH
14377: LD_INT 21
14379: EQUAL
14380: AND
14381: IFFALSE 14528
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14383: LD_INT 85
14385: PPUSH
14386: LD_INT 3
14388: PPUSH
14389: LD_INT 3
14391: PPUSH
14392: LD_INT 1
14394: PPUSH
14395: LD_INT 3
14397: PUSH
14398: LD_INT 5
14400: PUSH
14401: LD_INT 7
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 1
14411: PPUSH
14412: LD_INT 3
14414: PPUSH
14415: CALL_OW 12
14419: ARRAY
14420: PPUSH
14421: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14425: LD_INT 85
14427: PPUSH
14428: LD_INT 3
14430: PPUSH
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 3
14439: PUSH
14440: LD_INT 5
14442: PUSH
14443: LD_INT 7
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 1
14453: PPUSH
14454: LD_INT 3
14456: PPUSH
14457: CALL_OW 12
14461: ARRAY
14462: PPUSH
14463: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14467: LD_INT 85
14469: PPUSH
14470: LD_INT 3
14472: PPUSH
14473: LD_INT 3
14475: PPUSH
14476: LD_INT 1
14478: PPUSH
14479: LD_INT 3
14481: PUSH
14482: LD_INT 5
14484: PUSH
14485: LD_INT 7
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 1
14495: PPUSH
14496: LD_INT 3
14498: PPUSH
14499: CALL_OW 12
14503: ARRAY
14504: PPUSH
14505: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
14509: LD_INT 85
14511: PPUSH
14512: LD_INT 5
14514: PPUSH
14515: LD_INT 3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: LD_INT 6
14523: PPUSH
14524: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 255
14537: PUSH
14538: LD_INT 8
14540: EQUAL
14541: IFFALSE 14567
// begin if GetBType ( building ) = b_workshop then
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 266
14552: PUSH
14553: LD_INT 2
14555: EQUAL
14556: IFFALSE 14567
// ComUpgrade ( building ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 255
14576: PUSH
14577: LD_INT 3
14579: EQUAL
14580: IFFALSE 14654
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14582: LD_ADDR_EXP 94
14586: PUSH
14587: LD_EXP 94
14591: PPUSH
14592: LD_INT 1
14594: PPUSH
14595: CALL_OW 3
14599: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14600: LD_ADDR_EXP 94
14604: PUSH
14605: LD_EXP 94
14609: PPUSH
14610: LD_INT 1
14612: PPUSH
14613: CALL_OW 3
14617: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14618: LD_ADDR_EXP 94
14622: PUSH
14623: LD_EXP 94
14627: PPUSH
14628: LD_INT 1
14630: PPUSH
14631: CALL_OW 3
14635: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14636: LD_ADDR_EXP 94
14640: PUSH
14641: LD_EXP 94
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 3
14653: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14654: LD_VAR 0 1
14658: PPUSH
14659: CALL_OW 255
14663: PUSH
14664: LD_INT 8
14666: EQUAL
14667: IFFALSE 14741
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14669: LD_ADDR_EXP 93
14673: PUSH
14674: LD_EXP 93
14678: PPUSH
14679: LD_INT 1
14681: PPUSH
14682: CALL_OW 3
14686: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14687: LD_ADDR_EXP 93
14691: PUSH
14692: LD_EXP 93
14696: PPUSH
14697: LD_INT 1
14699: PPUSH
14700: CALL_OW 3
14704: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14705: LD_ADDR_EXP 93
14709: PUSH
14710: LD_EXP 93
14714: PPUSH
14715: LD_INT 1
14717: PPUSH
14718: CALL_OW 3
14722: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14723: LD_ADDR_EXP 93
14727: PUSH
14728: LD_EXP 93
14732: PPUSH
14733: LD_INT 1
14735: PPUSH
14736: CALL_OW 3
14740: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14741: LD_VAR 0 1
14745: PPUSH
14746: CALL_OW 255
14750: PUSH
14751: LD_INT 7
14753: EQUAL
14754: IFFALSE 14828
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14756: LD_ADDR_EXP 95
14760: PUSH
14761: LD_EXP 95
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 3
14773: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14774: LD_ADDR_EXP 95
14778: PUSH
14779: LD_EXP 95
14783: PPUSH
14784: LD_INT 1
14786: PPUSH
14787: CALL_OW 3
14791: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14792: LD_ADDR_EXP 95
14796: PUSH
14797: LD_EXP 95
14801: PPUSH
14802: LD_INT 1
14804: PPUSH
14805: CALL_OW 3
14809: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14810: LD_ADDR_EXP 95
14814: PUSH
14815: LD_EXP 95
14819: PPUSH
14820: LD_INT 1
14822: PPUSH
14823: CALL_OW 3
14827: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 255
14837: PUSH
14838: LD_INT 3
14840: EQUAL
14841: IFFALSE 14908
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 266
14852: PUSH
14853: LD_INT 32
14855: EQUAL
14856: PUSH
14857: LD_VAR 0 1
14861: PPUSH
14862: CALL_OW 266
14866: PUSH
14867: LD_INT 33
14869: EQUAL
14870: OR
14871: IFFALSE 14908
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_INT 46
14880: PUSH
14881: LD_INT 47
14883: PUSH
14884: LD_INT 45
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 1
14894: PPUSH
14895: LD_INT 3
14897: PPUSH
14898: CALL_OW 12
14902: ARRAY
14903: PPUSH
14904: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14908: LD_VAR 0 1
14912: PPUSH
14913: CALL_OW 255
14917: PUSH
14918: LD_INT 8
14920: EQUAL
14921: PUSH
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 266
14931: PUSH
14932: LD_INT 32
14934: EQUAL
14935: AND
14936: IFFALSE 14969
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14938: LD_VAR 0 1
14942: PPUSH
14943: LD_INT 28
14945: PUSH
14946: LD_INT 27
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 1
14955: PPUSH
14956: LD_INT 2
14958: PPUSH
14959: CALL_OW 12
14963: ARRAY
14964: PPUSH
14965: CALL_OW 431
// end ; end ;
14969: PPOPN 2
14971: END
// on EnterBuilding ( building , human ) do begin end ;
14972: PPOPN 2
14974: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14975: LD_VAR 0 1
14979: PPUSH
14980: CALL_OW 255
14984: PUSH
14985: LD_INT 6
14987: EQUAL
14988: IFFALSE 15006
// ruBehs = ruBehs ^ vehicle ;
14990: LD_ADDR_EXP 59
14994: PUSH
14995: LD_EXP 59
14999: PUSH
15000: LD_VAR 0 1
15004: ADD
15005: ST_TO_ADDR
// end ;
15006: PPOPN 1
15008: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget , mech ;
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
15013: PPUSH
// begin if GetSide ( vehicle ) = 4 then
15014: LD_VAR 0 1
15018: PPUSH
15019: CALL_OW 255
15023: PUSH
15024: LD_INT 4
15026: EQUAL
15027: IFFALSE 15053
// begin AddComWait ( vehicle , 0 0$2 ) ;
15029: LD_VAR 0 1
15033: PPUSH
15034: LD_INT 70
15036: PPUSH
15037: CALL_OW 202
// AddComMoveToArea ( vehicle , PowellParking ) ;
15041: LD_VAR 0 1
15045: PPUSH
15046: LD_INT 35
15048: PPUSH
15049: CALL_OW 173
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
15053: LD_VAR 0 1
15057: PPUSH
15058: CALL_OW 255
15062: PUSH
15063: LD_INT 4
15065: EQUAL
15066: PUSH
15067: LD_EXP 69
15071: PUSH
15072: LD_INT 2
15074: EQUAL
15075: AND
15076: PUSH
15077: LD_VAR 0 1
15081: PPUSH
15082: CALL_OW 264
15086: PUSH
15087: LD_INT 6
15089: EQUAL
15090: AND
15091: IFFALSE 15145
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
15093: LD_EXP 66
15097: PUSH
15098: LD_INT 5
15100: ARRAY
15101: PPUSH
15102: CALL_OW 122
// wait ( 0 0$1 ) ;
15106: LD_INT 35
15108: PPUSH
15109: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
15113: LD_EXP 66
15117: PUSH
15118: LD_INT 5
15120: ARRAY
15121: PPUSH
15122: LD_INT 85
15124: PPUSH
15125: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
15129: LD_EXP 66
15133: PUSH
15134: LD_INT 5
15136: ARRAY
15137: PPUSH
15138: LD_INT 3
15140: PPUSH
15141: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
15145: LD_VAR 0 1
15149: PPUSH
15150: CALL_OW 255
15154: PUSH
15155: LD_INT 4
15157: EQUAL
15158: PUSH
15159: LD_EXP 69
15163: PUSH
15164: LD_INT 2
15166: EQUAL
15167: AND
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 264
15178: PUSH
15179: LD_INT 3
15181: EQUAL
15182: AND
15183: IFFALSE 15195
// begin powellVeh = vehicle ;
15185: LD_ADDR_EXP 73
15189: PUSH
15190: LD_VAR 0 1
15194: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 255
15204: PUSH
15205: LD_INT 8
15207: EQUAL
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 248
15218: PUSH
15219: LD_INT 2
15221: EQUAL
15222: AND
15223: PUSH
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 247
15233: PUSH
15234: LD_INT 2
15236: EQUAL
15237: AND
15238: IFFALSE 15274
// begin legionVehicles = legionVehicles ^ vehicle ;
15240: LD_ADDR_EXP 55
15244: PUSH
15245: LD_EXP 55
15249: PUSH
15250: LD_VAR 0 1
15254: ADD
15255: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
15256: LD_VAR 0 1
15260: PPUSH
15261: LD_EXP 56
15265: PUSH
15266: LD_INT 1
15268: ARRAY
15269: PPUSH
15270: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 255
15283: PUSH
15284: LD_INT 8
15286: EQUAL
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 248
15297: PUSH
15298: LD_INT 3
15300: EQUAL
15301: AND
15302: IFFALSE 15841
// begin ChangeMissionObjectives ( MlegionDel ) ;
15304: LD_STRING MlegionDel
15306: PPUSH
15307: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
15311: LD_ADDR_VAR 0 3
15315: PUSH
15316: LD_INT 1
15318: PPUSH
15319: LD_INT 2
15321: PPUSH
15322: CALL_OW 12
15326: ST_TO_ADDR
// legionRocket = vehicle ;
15327: LD_ADDR_EXP 99
15331: PUSH
15332: LD_VAR 0 1
15336: ST_TO_ADDR
// DialogueOn ;
15337: CALL_OW 6
// if legionBomb = 1 then
15341: LD_VAR 0 3
15345: PUSH
15346: LD_INT 1
15348: EQUAL
15349: IFFALSE 15701
// begin if Kurt then
15351: LD_EXP 30
15355: IFFALSE 15371
// Say ( Kurt , D12-Kurt-1 ) else
15357: LD_EXP 30
15361: PPUSH
15362: LD_STRING D12-Kurt-1
15364: PPUSH
15365: CALL_OW 88
15369: GO 15433
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
15371: LD_INT 22
15373: PUSH
15374: LD_INT 8
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 25
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 26
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: PUSH
15422: LD_INT 2
15424: ARRAY
15425: PPUSH
15426: LD_STRING D12-Kurt-1
15428: PPUSH
15429: CALL_OW 88
// DialogueOff ;
15433: CALL_OW 7
// wait ( 0 0$15 ) ;
15437: LD_INT 525
15439: PPUSH
15440: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15444: LD_ADDR_VAR 0 4
15448: PUSH
15449: LD_INT 22
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 21
15461: PUSH
15462: LD_INT 3
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 23
15471: PUSH
15472: LD_INT 1
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 2
15481: PUSH
15482: LD_INT 30
15484: PUSH
15485: LD_INT 0
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 30
15494: PUSH
15495: LD_INT 1
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 69
15517: ST_TO_ADDR
// if rocketTarget = 0 then
15518: LD_VAR 0 4
15522: PUSH
15523: LD_INT 0
15525: EQUAL
15526: IFFALSE 15602
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15528: LD_ADDR_VAR 0 4
15532: PUSH
15533: LD_INT 22
15535: PUSH
15536: LD_INT 1
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 21
15545: PUSH
15546: LD_INT 3
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 23
15555: PUSH
15556: LD_INT 2
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PUSH
15563: LD_INT 2
15565: PUSH
15566: LD_INT 30
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 30
15578: PUSH
15579: LD_INT 1
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: PPUSH
15597: CALL_OW 69
15601: ST_TO_ADDR
// if rocketTarget = 0 then
15602: LD_VAR 0 4
15606: PUSH
15607: LD_INT 0
15609: EQUAL
15610: IFFALSE 15664
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: LD_INT 22
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 21
15629: PUSH
15630: LD_INT 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 23
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 50
15649: PUSH
15650: EMPTY
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: PPUSH
15659: CALL_OW 69
15663: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15664: LD_EXP 99
15668: PPUSH
15669: LD_VAR 0 4
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PPUSH
15678: CALL_OW 250
15682: PPUSH
15683: LD_VAR 0 4
15687: PUSH
15688: LD_INT 1
15690: ARRAY
15691: PPUSH
15692: CALL_OW 251
15696: PPUSH
15697: CALL_OW 116
// end ; if legionBomb = 2 then
15701: LD_VAR 0 3
15705: PUSH
15706: LD_INT 2
15708: EQUAL
15709: IFFALSE 15841
// begin if Kurt then
15711: LD_EXP 30
15715: IFFALSE 15731
// Say ( Kurt , D12a-Kurt-1 ) else
15717: LD_EXP 30
15721: PPUSH
15722: LD_STRING D12a-Kurt-1
15724: PPUSH
15725: CALL_OW 88
15729: GO 15793
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15731: LD_INT 22
15733: PUSH
15734: LD_INT 8
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 21
15743: PUSH
15744: LD_INT 1
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 25
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 26
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: PPUSH
15777: CALL_OW 69
15781: PUSH
15782: LD_INT 2
15784: ARRAY
15785: PPUSH
15786: LD_STRING D12a-Kurt-11
15788: PPUSH
15789: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15793: LD_EXP 28
15797: PPUSH
15798: LD_STRING D12a-Roth-1
15800: PPUSH
15801: CALL_OW 94
// DialogueOff ;
15805: CALL_OW 7
// wait ( 0 0$15 ) ;
15809: LD_INT 525
15811: PPUSH
15812: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15816: LD_EXP 99
15820: PPUSH
15821: LD_INT 23
15823: PPUSH
15824: CALL_OW 250
15828: PPUSH
15829: LD_INT 23
15831: PPUSH
15832: CALL_OW 251
15836: PPUSH
15837: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 255
15850: PUSH
15851: LD_INT 3
15853: EQUAL
15854: PUSH
15855: LD_VAR 0 1
15859: PPUSH
15860: CALL_OW 248
15864: PUSH
15865: LD_INT 3
15867: EQUAL
15868: AND
15869: PUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 247
15879: PUSH
15880: LD_INT 2
15882: EQUAL
15883: AND
15884: IFFALSE 15902
// RussianVehicles = RussianVehicles ^ vehicle ;
15886: LD_ADDR_EXP 61
15890: PUSH
15891: LD_EXP 61
15895: PUSH
15896: LD_VAR 0 1
15900: ADD
15901: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 255
15911: PUSH
15912: LD_INT 7
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: AND
15930: IFFALSE 15989
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15932: LD_ADDR_EXP 62
15936: PUSH
15937: LD_EXP 62
15941: PUSH
15942: LD_VAR 0 1
15946: ADD
15947: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15948: LD_VAR 0 1
15952: PPUSH
15953: CALL_OW 263
15957: PUSH
15958: LD_INT 2
15960: EQUAL
15961: IFFALSE 15989
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15963: LD_VAR 0 1
15967: PPUSH
15968: LD_EXP 63
15972: PUSH
15973: LD_INT 1
15975: PPUSH
15976: LD_INT 3
15978: PPUSH
15979: CALL_OW 12
15983: ARRAY
15984: PPUSH
15985: CALL_OW 135
// end ; end ;
15989: PPOPN 5
15991: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15992: LD_VAR 0 1
15996: PPUSH
15997: CALL_OW 255
16001: PUSH
16002: LD_INT 4
16004: EQUAL
16005: PUSH
16006: LD_EXP 69
16010: PUSH
16011: LD_INT 1
16013: EQUAL
16014: AND
16015: IFFALSE 16118
// begin ComEnterUnit ( human , AmFact ) ;
16017: LD_VAR 0 2
16021: PPUSH
16022: LD_INT 85
16024: PPUSH
16025: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
16029: LD_VAR 0 2
16033: PPUSH
16034: CALL_OW 258
16038: PUSH
16039: LD_INT 1
16041: EQUAL
16042: PUSH
16043: LD_EXP 102
16047: PUSH
16048: LD_INT 0
16050: EQUAL
16051: AND
16052: IFFALSE 16118
// begin blockEvent1 = 1 ;
16054: LD_ADDR_EXP 102
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// startAttacks = 1 ;
16062: LD_ADDR_EXP 72
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
16070: LD_VAR 0 2
16074: PPUSH
16075: LD_STRING D4a-Sol1-1
16077: PPUSH
16078: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
16082: LD_EXP 17
16086: PPUSH
16087: LD_STRING D4a-Pow-1
16089: PPUSH
16090: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
16094: LD_VAR 0 2
16098: PPUSH
16099: LD_STRING D4a-Sol1-2
16101: PPUSH
16102: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
16106: LD_EXP 17
16110: PPUSH
16111: LD_STRING D4a-Pow-2
16113: PPUSH
16114: CALL_OW 88
// end ; end ; end ;
16118: PPOPN 2
16120: END
// on UnitDestroyed ( unit ) do var i ;
16121: LD_INT 0
16123: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 255
16133: PUSH
16134: LD_INT 1
16136: EQUAL
16137: PUSH
16138: LD_VAR 0 1
16142: PPUSH
16143: CALL_OW 247
16147: PUSH
16148: LD_INT 1
16150: EQUAL
16151: AND
16152: IFFALSE 16168
// unitLost = unitLost + 1 ;
16154: LD_ADDR_EXP 98
16158: PUSH
16159: LD_EXP 98
16163: PUSH
16164: LD_INT 1
16166: PLUS
16167: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 255
16177: PUSH
16178: LD_INT 4
16180: EQUAL
16181: PUSH
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 247
16191: PUSH
16192: LD_INT 1
16194: EQUAL
16195: AND
16196: IFFALSE 16246
// begin for i in amUnitsAttack do
16198: LD_ADDR_VAR 0 2
16202: PUSH
16203: LD_EXP 66
16207: PUSH
16208: FOR_IN
16209: IFFALSE 16244
// if i = unit then
16211: LD_VAR 0 2
16215: PUSH
16216: LD_VAR 0 1
16220: EQUAL
16221: IFFALSE 16242
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
16223: LD_ADDR_EXP 66
16227: PUSH
16228: LD_EXP 66
16232: PUSH
16233: LD_VAR 0 1
16237: PUSH
16238: EMPTY
16239: LIST
16240: DIFF
16241: ST_TO_ADDR
16242: GO 16208
16244: POP
16245: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
16246: LD_VAR 0 1
16250: PPUSH
16251: CALL_OW 255
16255: PUSH
16256: LD_INT 8
16258: EQUAL
16259: PUSH
16260: LD_VAR 0 1
16264: PPUSH
16265: CALL_OW 247
16269: PUSH
16270: LD_INT 2
16272: EQUAL
16273: AND
16274: PUSH
16275: LD_VAR 0 1
16279: PPUSH
16280: CALL_OW 248
16284: PUSH
16285: LD_INT 2
16287: EQUAL
16288: AND
16289: IFFALSE 16339
// begin for i in legionVehicles do
16291: LD_ADDR_VAR 0 2
16295: PUSH
16296: LD_EXP 55
16300: PUSH
16301: FOR_IN
16302: IFFALSE 16337
// if i = unit then
16304: LD_VAR 0 2
16308: PUSH
16309: LD_VAR 0 1
16313: EQUAL
16314: IFFALSE 16335
// legionVehicles = legionVehicles diff [ unit ] ;
16316: LD_ADDR_EXP 55
16320: PUSH
16321: LD_EXP 55
16325: PUSH
16326: LD_VAR 0 1
16330: PUSH
16331: EMPTY
16332: LIST
16333: DIFF
16334: ST_TO_ADDR
16335: GO 16301
16337: POP
16338: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16339: LD_VAR 0 1
16343: PPUSH
16344: CALL_OW 255
16348: PUSH
16349: LD_INT 3
16351: EQUAL
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 247
16362: PUSH
16363: LD_INT 2
16365: EQUAL
16366: AND
16367: IFFALSE 16417
// begin for i in RussianVehicles do
16369: LD_ADDR_VAR 0 2
16373: PUSH
16374: LD_EXP 61
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16415
// if i = unit then
16382: LD_VAR 0 2
16386: PUSH
16387: LD_VAR 0 1
16391: EQUAL
16392: IFFALSE 16413
// RussianVehicles = RussianVehicles diff [ unit ] ;
16394: LD_ADDR_EXP 61
16398: PUSH
16399: LD_EXP 61
16403: PUSH
16404: LD_VAR 0 1
16408: PUSH
16409: EMPTY
16410: LIST
16411: DIFF
16412: ST_TO_ADDR
16413: GO 16379
16415: POP
16416: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
16417: LD_VAR 0 1
16421: PPUSH
16422: CALL_OW 255
16426: PUSH
16427: LD_INT 7
16429: EQUAL
16430: PUSH
16431: LD_VAR 0 1
16435: PPUSH
16436: CALL_OW 247
16440: PUSH
16441: LD_INT 2
16443: EQUAL
16444: AND
16445: IFFALSE 16495
// begin for i in AllianceVehicles do
16447: LD_ADDR_VAR 0 2
16451: PUSH
16452: LD_EXP 62
16456: PUSH
16457: FOR_IN
16458: IFFALSE 16493
// if i = unit then
16460: LD_VAR 0 2
16464: PUSH
16465: LD_VAR 0 1
16469: EQUAL
16470: IFFALSE 16491
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
16472: LD_ADDR_EXP 62
16476: PUSH
16477: LD_EXP 62
16481: PUSH
16482: LD_VAR 0 1
16486: PUSH
16487: EMPTY
16488: LIST
16489: DIFF
16490: ST_TO_ADDR
16491: GO 16457
16493: POP
16494: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 255
16504: PUSH
16505: LD_INT 3
16507: EQUAL
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 247
16518: PUSH
16519: LD_INT 3
16521: EQUAL
16522: AND
16523: IFFALSE 17215
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 266
16534: PUSH
16535: LD_INT 31
16537: EQUAL
16538: PUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 266
16548: PUSH
16549: LD_INT 32
16551: EQUAL
16552: OR
16553: PUSH
16554: LD_VAR 0 1
16558: PPUSH
16559: CALL_OW 266
16563: PUSH
16564: LD_INT 36
16566: EQUAL
16567: OR
16568: PUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 266
16578: PUSH
16579: LD_INT 0
16581: EQUAL
16582: OR
16583: PUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 266
16593: PUSH
16594: LD_INT 24
16596: EQUAL
16597: OR
16598: PUSH
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL_OW 266
16608: PUSH
16609: LD_INT 17
16611: EQUAL
16612: OR
16613: PUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 266
16623: PUSH
16624: LD_INT 25
16626: EQUAL
16627: OR
16628: PUSH
16629: LD_VAR 0 1
16633: PPUSH
16634: CALL_OW 266
16638: PUSH
16639: LD_INT 19
16641: EQUAL
16642: OR
16643: PUSH
16644: LD_VAR 0 1
16648: PPUSH
16649: CALL_OW 266
16653: PUSH
16654: LD_INT 20
16656: EQUAL
16657: OR
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 266
16668: PUSH
16669: LD_INT 18
16671: EQUAL
16672: OR
16673: PUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 266
16683: PUSH
16684: LD_INT 21
16686: EQUAL
16687: OR
16688: PUSH
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 266
16698: PUSH
16699: LD_INT 23
16701: EQUAL
16702: OR
16703: PUSH
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 266
16713: PUSH
16714: LD_INT 16
16716: EQUAL
16717: OR
16718: PUSH
16719: LD_VAR 0 1
16723: PPUSH
16724: CALL_OW 266
16728: PUSH
16729: LD_INT 6
16731: EQUAL
16732: OR
16733: PUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: CALL_OW 266
16743: PUSH
16744: LD_INT 29
16746: EQUAL
16747: OR
16748: PUSH
16749: LD_VAR 0 1
16753: PPUSH
16754: CALL_OW 266
16758: PUSH
16759: LD_INT 26
16761: EQUAL
16762: OR
16763: PUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 266
16773: PUSH
16774: LD_INT 30
16776: EQUAL
16777: OR
16778: PUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 266
16788: PUSH
16789: LD_INT 28
16791: EQUAL
16792: OR
16793: PUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 266
16803: PUSH
16804: LD_INT 27
16806: EQUAL
16807: OR
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 266
16818: PUSH
16819: LD_INT 33
16821: EQUAL
16822: OR
16823: PUSH
16824: LD_VAR 0 1
16828: PPUSH
16829: CALL_OW 266
16833: PUSH
16834: LD_INT 2
16836: EQUAL
16837: OR
16838: PUSH
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL_OW 266
16848: PUSH
16849: LD_INT 4
16851: EQUAL
16852: OR
16853: IFFALSE 16939
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16855: LD_ADDR_EXP 94
16859: PUSH
16860: LD_EXP 94
16864: PUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 266
16874: ADD
16875: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16876: LD_ADDR_EXP 94
16880: PUSH
16881: LD_EXP 94
16885: PUSH
16886: LD_VAR 0 1
16890: PPUSH
16891: CALL_OW 250
16895: ADD
16896: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16897: LD_ADDR_EXP 94
16901: PUSH
16902: LD_EXP 94
16906: PUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 251
16916: ADD
16917: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16918: LD_ADDR_EXP 94
16922: PUSH
16923: LD_EXP 94
16927: PUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 254
16937: ADD
16938: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 266
16948: PUSH
16949: LD_INT 1
16951: EQUAL
16952: IFFALSE 17031
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16954: LD_ADDR_EXP 94
16958: PUSH
16959: LD_EXP 94
16963: PUSH
16964: LD_INT 0
16966: ADD
16967: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16968: LD_ADDR_EXP 94
16972: PUSH
16973: LD_EXP 94
16977: PUSH
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL_OW 250
16987: ADD
16988: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16989: LD_ADDR_EXP 94
16993: PUSH
16994: LD_EXP 94
16998: PUSH
16999: LD_VAR 0 1
17003: PPUSH
17004: CALL_OW 251
17008: ADD
17009: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17010: LD_ADDR_EXP 94
17014: PUSH
17015: LD_EXP 94
17019: PUSH
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 254
17029: ADD
17030: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17031: LD_VAR 0 1
17035: PPUSH
17036: CALL_OW 266
17040: PUSH
17041: LD_INT 3
17043: EQUAL
17044: IFFALSE 17123
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
17046: LD_ADDR_EXP 94
17050: PUSH
17051: LD_EXP 94
17055: PUSH
17056: LD_INT 2
17058: ADD
17059: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
17060: LD_ADDR_EXP 94
17064: PUSH
17065: LD_EXP 94
17069: PUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 250
17079: ADD
17080: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
17081: LD_ADDR_EXP 94
17085: PUSH
17086: LD_EXP 94
17090: PUSH
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 251
17100: ADD
17101: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17102: LD_ADDR_EXP 94
17106: PUSH
17107: LD_EXP 94
17111: PUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 254
17121: ADD
17122: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 266
17132: PUSH
17133: LD_INT 5
17135: EQUAL
17136: IFFALSE 17215
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
17138: LD_ADDR_EXP 94
17142: PUSH
17143: LD_EXP 94
17147: PUSH
17148: LD_INT 4
17150: ADD
17151: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
17152: LD_ADDR_EXP 94
17156: PUSH
17157: LD_EXP 94
17161: PUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 250
17171: ADD
17172: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
17173: LD_ADDR_EXP 94
17177: PUSH
17178: LD_EXP 94
17182: PUSH
17183: LD_VAR 0 1
17187: PPUSH
17188: CALL_OW 251
17192: ADD
17193: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17194: LD_ADDR_EXP 94
17198: PUSH
17199: LD_EXP 94
17203: PUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 254
17213: ADD
17214: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
17215: LD_VAR 0 1
17219: PPUSH
17220: CALL_OW 255
17224: PUSH
17225: LD_INT 8
17227: EQUAL
17228: PUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 247
17238: PUSH
17239: LD_INT 3
17241: EQUAL
17242: AND
17243: PUSH
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 248
17253: PUSH
17254: LD_INT 2
17256: EQUAL
17257: AND
17258: IFFALSE 17950
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17260: LD_VAR 0 1
17264: PPUSH
17265: CALL_OW 266
17269: PUSH
17270: LD_INT 31
17272: EQUAL
17273: PUSH
17274: LD_VAR 0 1
17278: PPUSH
17279: CALL_OW 266
17283: PUSH
17284: LD_INT 32
17286: EQUAL
17287: OR
17288: PUSH
17289: LD_VAR 0 1
17293: PPUSH
17294: CALL_OW 266
17298: PUSH
17299: LD_INT 36
17301: EQUAL
17302: OR
17303: PUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 266
17313: PUSH
17314: LD_INT 0
17316: EQUAL
17317: OR
17318: PUSH
17319: LD_VAR 0 1
17323: PPUSH
17324: CALL_OW 266
17328: PUSH
17329: LD_INT 24
17331: EQUAL
17332: OR
17333: PUSH
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 266
17343: PUSH
17344: LD_INT 17
17346: EQUAL
17347: OR
17348: PUSH
17349: LD_VAR 0 1
17353: PPUSH
17354: CALL_OW 266
17358: PUSH
17359: LD_INT 25
17361: EQUAL
17362: OR
17363: PUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 266
17373: PUSH
17374: LD_INT 19
17376: EQUAL
17377: OR
17378: PUSH
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 266
17388: PUSH
17389: LD_INT 20
17391: EQUAL
17392: OR
17393: PUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 266
17403: PUSH
17404: LD_INT 18
17406: EQUAL
17407: OR
17408: PUSH
17409: LD_VAR 0 1
17413: PPUSH
17414: CALL_OW 266
17418: PUSH
17419: LD_INT 21
17421: EQUAL
17422: OR
17423: PUSH
17424: LD_VAR 0 1
17428: PPUSH
17429: CALL_OW 266
17433: PUSH
17434: LD_INT 23
17436: EQUAL
17437: OR
17438: PUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: CALL_OW 266
17448: PUSH
17449: LD_INT 16
17451: EQUAL
17452: OR
17453: PUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 266
17463: PUSH
17464: LD_INT 6
17466: EQUAL
17467: OR
17468: PUSH
17469: LD_VAR 0 1
17473: PPUSH
17474: CALL_OW 266
17478: PUSH
17479: LD_INT 29
17481: EQUAL
17482: OR
17483: PUSH
17484: LD_VAR 0 1
17488: PPUSH
17489: CALL_OW 266
17493: PUSH
17494: LD_INT 26
17496: EQUAL
17497: OR
17498: PUSH
17499: LD_VAR 0 1
17503: PPUSH
17504: CALL_OW 266
17508: PUSH
17509: LD_INT 30
17511: EQUAL
17512: OR
17513: PUSH
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL_OW 266
17523: PUSH
17524: LD_INT 28
17526: EQUAL
17527: OR
17528: PUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 266
17538: PUSH
17539: LD_INT 27
17541: EQUAL
17542: OR
17543: PUSH
17544: LD_VAR 0 1
17548: PPUSH
17549: CALL_OW 266
17553: PUSH
17554: LD_INT 33
17556: EQUAL
17557: OR
17558: PUSH
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 266
17568: PUSH
17569: LD_INT 2
17571: EQUAL
17572: OR
17573: PUSH
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 266
17583: PUSH
17584: LD_INT 4
17586: EQUAL
17587: OR
17588: IFFALSE 17674
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17590: LD_ADDR_EXP 93
17594: PUSH
17595: LD_EXP 93
17599: PUSH
17600: LD_VAR 0 1
17604: PPUSH
17605: CALL_OW 266
17609: ADD
17610: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17611: LD_ADDR_EXP 93
17615: PUSH
17616: LD_EXP 93
17620: PUSH
17621: LD_VAR 0 1
17625: PPUSH
17626: CALL_OW 250
17630: ADD
17631: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17632: LD_ADDR_EXP 93
17636: PUSH
17637: LD_EXP 93
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 251
17651: ADD
17652: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17653: LD_ADDR_EXP 93
17657: PUSH
17658: LD_EXP 93
17662: PUSH
17663: LD_VAR 0 1
17667: PPUSH
17668: CALL_OW 254
17672: ADD
17673: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17674: LD_VAR 0 1
17678: PPUSH
17679: CALL_OW 266
17683: PUSH
17684: LD_INT 1
17686: EQUAL
17687: IFFALSE 17766
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17689: LD_ADDR_EXP 93
17693: PUSH
17694: LD_EXP 93
17698: PUSH
17699: LD_INT 0
17701: ADD
17702: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17703: LD_ADDR_EXP 93
17707: PUSH
17708: LD_EXP 93
17712: PUSH
17713: LD_VAR 0 1
17717: PPUSH
17718: CALL_OW 250
17722: ADD
17723: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17724: LD_ADDR_EXP 93
17728: PUSH
17729: LD_EXP 93
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 251
17743: ADD
17744: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17745: LD_ADDR_EXP 93
17749: PUSH
17750: LD_EXP 93
17754: PUSH
17755: LD_VAR 0 1
17759: PPUSH
17760: CALL_OW 254
17764: ADD
17765: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 266
17775: PUSH
17776: LD_INT 3
17778: EQUAL
17779: IFFALSE 17858
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17781: LD_ADDR_EXP 93
17785: PUSH
17786: LD_EXP 93
17790: PUSH
17791: LD_INT 2
17793: ADD
17794: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17795: LD_ADDR_EXP 93
17799: PUSH
17800: LD_EXP 93
17804: PUSH
17805: LD_VAR 0 1
17809: PPUSH
17810: CALL_OW 250
17814: ADD
17815: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17816: LD_ADDR_EXP 93
17820: PUSH
17821: LD_EXP 93
17825: PUSH
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 251
17835: ADD
17836: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17837: LD_ADDR_EXP 93
17841: PUSH
17842: LD_EXP 93
17846: PUSH
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 254
17856: ADD
17857: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17858: LD_VAR 0 1
17862: PPUSH
17863: CALL_OW 266
17867: PUSH
17868: LD_INT 5
17870: EQUAL
17871: IFFALSE 17950
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17873: LD_ADDR_EXP 93
17877: PUSH
17878: LD_EXP 93
17882: PUSH
17883: LD_INT 4
17885: ADD
17886: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17887: LD_ADDR_EXP 93
17891: PUSH
17892: LD_EXP 93
17896: PUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 250
17906: ADD
17907: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17908: LD_ADDR_EXP 93
17912: PUSH
17913: LD_EXP 93
17917: PUSH
17918: LD_VAR 0 1
17922: PPUSH
17923: CALL_OW 251
17927: ADD
17928: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17929: LD_ADDR_EXP 93
17933: PUSH
17934: LD_EXP 93
17938: PUSH
17939: LD_VAR 0 1
17943: PPUSH
17944: CALL_OW 254
17948: ADD
17949: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17950: LD_VAR 0 1
17954: PPUSH
17955: CALL_OW 255
17959: PUSH
17960: LD_INT 7
17962: EQUAL
17963: PUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 247
17973: PUSH
17974: LD_INT 3
17976: EQUAL
17977: AND
17978: IFFALSE 18670
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 266
17989: PUSH
17990: LD_INT 31
17992: EQUAL
17993: PUSH
17994: LD_VAR 0 1
17998: PPUSH
17999: CALL_OW 266
18003: PUSH
18004: LD_INT 32
18006: EQUAL
18007: OR
18008: PUSH
18009: LD_VAR 0 1
18013: PPUSH
18014: CALL_OW 266
18018: PUSH
18019: LD_INT 36
18021: EQUAL
18022: OR
18023: PUSH
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 266
18033: PUSH
18034: LD_INT 0
18036: EQUAL
18037: OR
18038: PUSH
18039: LD_VAR 0 1
18043: PPUSH
18044: CALL_OW 266
18048: PUSH
18049: LD_INT 24
18051: EQUAL
18052: OR
18053: PUSH
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL_OW 266
18063: PUSH
18064: LD_INT 17
18066: EQUAL
18067: OR
18068: PUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL_OW 266
18078: PUSH
18079: LD_INT 25
18081: EQUAL
18082: OR
18083: PUSH
18084: LD_VAR 0 1
18088: PPUSH
18089: CALL_OW 266
18093: PUSH
18094: LD_INT 19
18096: EQUAL
18097: OR
18098: PUSH
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 266
18108: PUSH
18109: LD_INT 20
18111: EQUAL
18112: OR
18113: PUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 266
18123: PUSH
18124: LD_INT 18
18126: EQUAL
18127: OR
18128: PUSH
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 266
18138: PUSH
18139: LD_INT 21
18141: EQUAL
18142: OR
18143: PUSH
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 266
18153: PUSH
18154: LD_INT 23
18156: EQUAL
18157: OR
18158: PUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 266
18168: PUSH
18169: LD_INT 16
18171: EQUAL
18172: OR
18173: PUSH
18174: LD_VAR 0 1
18178: PPUSH
18179: CALL_OW 266
18183: PUSH
18184: LD_INT 6
18186: EQUAL
18187: OR
18188: PUSH
18189: LD_VAR 0 1
18193: PPUSH
18194: CALL_OW 266
18198: PUSH
18199: LD_INT 29
18201: EQUAL
18202: OR
18203: PUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 266
18213: PUSH
18214: LD_INT 26
18216: EQUAL
18217: OR
18218: PUSH
18219: LD_VAR 0 1
18223: PPUSH
18224: CALL_OW 266
18228: PUSH
18229: LD_INT 30
18231: EQUAL
18232: OR
18233: PUSH
18234: LD_VAR 0 1
18238: PPUSH
18239: CALL_OW 266
18243: PUSH
18244: LD_INT 28
18246: EQUAL
18247: OR
18248: PUSH
18249: LD_VAR 0 1
18253: PPUSH
18254: CALL_OW 266
18258: PUSH
18259: LD_INT 27
18261: EQUAL
18262: OR
18263: PUSH
18264: LD_VAR 0 1
18268: PPUSH
18269: CALL_OW 266
18273: PUSH
18274: LD_INT 33
18276: EQUAL
18277: OR
18278: PUSH
18279: LD_VAR 0 1
18283: PPUSH
18284: CALL_OW 266
18288: PUSH
18289: LD_INT 2
18291: EQUAL
18292: OR
18293: PUSH
18294: LD_VAR 0 1
18298: PPUSH
18299: CALL_OW 266
18303: PUSH
18304: LD_INT 4
18306: EQUAL
18307: OR
18308: IFFALSE 18394
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
18310: LD_ADDR_EXP 95
18314: PUSH
18315: LD_EXP 95
18319: PUSH
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 266
18329: ADD
18330: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18331: LD_ADDR_EXP 95
18335: PUSH
18336: LD_EXP 95
18340: PUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 250
18350: ADD
18351: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18352: LD_ADDR_EXP 95
18356: PUSH
18357: LD_EXP 95
18361: PUSH
18362: LD_VAR 0 1
18366: PPUSH
18367: CALL_OW 251
18371: ADD
18372: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18373: LD_ADDR_EXP 95
18377: PUSH
18378: LD_EXP 95
18382: PUSH
18383: LD_VAR 0 1
18387: PPUSH
18388: CALL_OW 254
18392: ADD
18393: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18394: LD_VAR 0 1
18398: PPUSH
18399: CALL_OW 266
18403: PUSH
18404: LD_INT 1
18406: EQUAL
18407: IFFALSE 18486
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
18409: LD_ADDR_EXP 95
18413: PUSH
18414: LD_EXP 95
18418: PUSH
18419: LD_INT 0
18421: ADD
18422: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18423: LD_ADDR_EXP 95
18427: PUSH
18428: LD_EXP 95
18432: PUSH
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 250
18442: ADD
18443: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18444: LD_ADDR_EXP 95
18448: PUSH
18449: LD_EXP 95
18453: PUSH
18454: LD_VAR 0 1
18458: PPUSH
18459: CALL_OW 251
18463: ADD
18464: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18465: LD_ADDR_EXP 95
18469: PUSH
18470: LD_EXP 95
18474: PUSH
18475: LD_VAR 0 1
18479: PPUSH
18480: CALL_OW 254
18484: ADD
18485: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 266
18495: PUSH
18496: LD_INT 3
18498: EQUAL
18499: IFFALSE 18578
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
18501: LD_ADDR_EXP 95
18505: PUSH
18506: LD_EXP 95
18510: PUSH
18511: LD_INT 2
18513: ADD
18514: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18515: LD_ADDR_EXP 95
18519: PUSH
18520: LD_EXP 95
18524: PUSH
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 250
18534: ADD
18535: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18536: LD_ADDR_EXP 95
18540: PUSH
18541: LD_EXP 95
18545: PUSH
18546: LD_VAR 0 1
18550: PPUSH
18551: CALL_OW 251
18555: ADD
18556: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18557: LD_ADDR_EXP 95
18561: PUSH
18562: LD_EXP 95
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 254
18576: ADD
18577: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18578: LD_VAR 0 1
18582: PPUSH
18583: CALL_OW 266
18587: PUSH
18588: LD_INT 5
18590: EQUAL
18591: IFFALSE 18670
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18593: LD_ADDR_EXP 95
18597: PUSH
18598: LD_EXP 95
18602: PUSH
18603: LD_INT 4
18605: ADD
18606: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18607: LD_ADDR_EXP 95
18611: PUSH
18612: LD_EXP 95
18616: PUSH
18617: LD_VAR 0 1
18621: PPUSH
18622: CALL_OW 250
18626: ADD
18627: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18628: LD_ADDR_EXP 95
18632: PUSH
18633: LD_EXP 95
18637: PUSH
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 251
18647: ADD
18648: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18649: LD_ADDR_EXP 95
18653: PUSH
18654: LD_EXP 95
18658: PUSH
18659: LD_VAR 0 1
18663: PPUSH
18664: CALL_OW 254
18668: ADD
18669: ST_TO_ADDR
// end ; end ; end ;
18670: PPOPN 2
18672: END
// on UnitKamikazed ( unit ) do var i ;
18673: LD_INT 0
18675: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18676: LD_VAR 0 1
18680: PPUSH
18681: CALL_OW 255
18685: PUSH
18686: LD_INT 8
18688: EQUAL
18689: PUSH
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL_OW 247
18699: PUSH
18700: LD_INT 2
18702: EQUAL
18703: AND
18704: PUSH
18705: LD_VAR 0 1
18709: PPUSH
18710: CALL_OW 248
18714: PUSH
18715: LD_INT 2
18717: EQUAL
18718: AND
18719: IFFALSE 18769
// begin for i in legionVehicles do
18721: LD_ADDR_VAR 0 2
18725: PUSH
18726: LD_EXP 55
18730: PUSH
18731: FOR_IN
18732: IFFALSE 18767
// if i = unit then
18734: LD_VAR 0 2
18738: PUSH
18739: LD_VAR 0 1
18743: EQUAL
18744: IFFALSE 18765
// legionVehicles = legionVehicles diff [ unit ] ;
18746: LD_ADDR_EXP 55
18750: PUSH
18751: LD_EXP 55
18755: PUSH
18756: LD_VAR 0 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: DIFF
18764: ST_TO_ADDR
18765: GO 18731
18767: POP
18768: POP
// end ; end ;
18769: PPOPN 2
18771: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18772: LD_VAR 0 2
18776: PPUSH
18777: LD_VAR 0 3
18781: PPUSH
18782: LD_INT 29
18784: PPUSH
18785: CALL_OW 309
18789: IFFALSE 18849
// begin if GetSide ( unit ) = 1 then
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 255
18800: PUSH
18801: LD_INT 1
18803: EQUAL
18804: IFFALSE 18820
// begin wait ( 0 0$6 ) ;
18806: LD_INT 210
18808: PPUSH
18809: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18813: LD_STRING Motherlode2
18815: PPUSH
18816: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18820: LD_VAR 0 1
18824: PPUSH
18825: CALL_OW 255
18829: PUSH
18830: LD_INT 8
18832: EQUAL
18833: IFFALSE 18849
// begin wait ( 0 0$6 ) ;
18835: LD_INT 210
18837: PPUSH
18838: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18842: LD_STRING Motherlode1
18844: PPUSH
18845: CALL_OW 104
// end ; end ; end ;
18849: PPOPN 3
18851: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18852: LD_VAR 0 1
18856: PPUSH
18857: CALL_OW 255
18861: PUSH
18862: LD_INT 2
18864: EQUAL
18865: IFFALSE 18874
// YouLost ( Motherlode3 ) ;
18867: LD_STRING Motherlode3
18869: PPUSH
18870: CALL_OW 104
// end ;
18874: PPOPN 3
18876: END
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do begin if old_identifier in allianceVehicles then
18877: LD_VAR 0 2
18881: PUSH
18882: LD_EXP 62
18886: IN
18887: IFFALSE 18905
// allianceVehicles := allianceVehicles diff old_identifier ;
18889: LD_ADDR_EXP 62
18893: PUSH
18894: LD_EXP 62
18898: PUSH
18899: LD_VAR 0 2
18903: DIFF
18904: ST_TO_ADDR
// if old_identifier in legionVehicles then
18905: LD_VAR 0 2
18909: PUSH
18910: LD_EXP 55
18914: IN
18915: IFFALSE 18933
// legionVehicles := legionVehicles diff old_identifier ;
18917: LD_ADDR_EXP 55
18921: PUSH
18922: LD_EXP 55
18926: PUSH
18927: LD_VAR 0 2
18931: DIFF
18932: ST_TO_ADDR
// if old_identifier in russianVehicles then
18933: LD_VAR 0 2
18937: PUSH
18938: LD_EXP 61
18942: IN
18943: IFFALSE 18961
// russianVehicles := russianVehicles diff old_identifier ;
18945: LD_ADDR_EXP 61
18949: PUSH
18950: LD_EXP 61
18954: PUSH
18955: LD_VAR 0 2
18959: DIFF
18960: ST_TO_ADDR
// end ;
18961: PPOPN 4
18963: END
// on SailEvent ( event ) do begin case event of 1 :
18964: LD_VAR 0 1
18968: PUSH
18969: LD_INT 1
18971: DOUBLE
18972: EQUAL
18973: IFTRUE 18977
18975: GO 19124
18977: POP
// begin PlaceSeeing ( 118 , 180 , 1 , - 15 ) ;
18978: LD_INT 118
18980: PPUSH
18981: LD_INT 180
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: LD_INT 15
18989: NEG
18990: PPUSH
18991: CALL_OW 330
// RemoveSeeing ( 118 , 180 , 1 ) ;
18995: LD_INT 118
18997: PPUSH
18998: LD_INT 180
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL_OW 331
// PlaceSeeing ( 76 , 133 , 1 , - 15 ) ;
19008: LD_INT 76
19010: PPUSH
19011: LD_INT 133
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: LD_INT 15
19019: NEG
19020: PPUSH
19021: CALL_OW 330
// RemoveSeeing ( 76 , 133 , 1 ) ;
19025: LD_INT 76
19027: PPUSH
19028: LD_INT 133
19030: PPUSH
19031: LD_INT 1
19033: PPUSH
19034: CALL_OW 331
// if not skip then
19038: LD_EXP 104
19042: NOT
19043: IFFALSE 19122
// begin wait ( 0 0$4.3 ) ;
19045: LD_INT 150
19047: PPUSH
19048: CALL_OW 67
// CenterOnXY ( 118 , 180 ) ;
19052: LD_INT 118
19054: PPUSH
19055: LD_INT 180
19057: PPUSH
19058: CALL_OW 84
// wait ( 0 0$2 ) ;
19062: LD_INT 70
19064: PPUSH
19065: CALL_OW 67
// CenterOnXY ( 76 , 133 ) ;
19069: LD_INT 76
19071: PPUSH
19072: LD_INT 133
19074: PPUSH
19075: CALL_OW 84
// wait ( 0 0$1.3 ) ;
19079: LD_INT 46
19081: PPUSH
19082: CALL_OW 67
// if IsInUnit ( JMM ) then
19086: LD_EXP 1
19090: PPUSH
19091: CALL_OW 310
19095: IFFALSE 19113
// CenterOnUnits ( IsInUnit ( JMM ) ) else
19097: LD_EXP 1
19101: PPUSH
19102: CALL_OW 310
19106: PPUSH
19107: CALL_OW 85
19111: GO 19122
// CenterOnUnits ( JMM ) ;
19113: LD_EXP 1
19117: PPUSH
19118: CALL_OW 85
// end ; end ; 2 :
19122: GO 19249
19124: LD_INT 2
19126: DOUBLE
19127: EQUAL
19128: IFTRUE 19132
19130: GO 19248
19132: POP
// begin wait ( 0 0$2 ) ;
19133: LD_INT 70
19135: PPUSH
19136: CALL_OW 67
// RevealFogArea ( 1 , RevealArea1 ) ;
19140: LD_INT 1
19142: PPUSH
19143: LD_INT 3
19145: PPUSH
19146: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
19150: LD_INT 1
19152: PPUSH
19153: LD_INT 4
19155: PPUSH
19156: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
19160: LD_INT 1
19162: PPUSH
19163: LD_INT 5
19165: PPUSH
19166: CALL_OW 332
// if not skip then
19170: LD_EXP 104
19174: NOT
19175: IFFALSE 19246
// begin CenterOnXY ( 171 , 81 ) ;
19177: LD_INT 171
19179: PPUSH
19180: LD_INT 81
19182: PPUSH
19183: CALL_OW 84
// wait ( 0 0$2 ) ;
19187: LD_INT 70
19189: PPUSH
19190: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
19194: LD_INT 162
19196: PPUSH
19197: LD_INT 36
19199: PPUSH
19200: CALL_OW 84
// wait ( 0 0$2 ) ;
19204: LD_INT 70
19206: PPUSH
19207: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
19211: LD_INT 75
19213: PPUSH
19214: LD_INT 16
19216: PPUSH
19217: CALL_OW 84
// wait ( 0 0$1.3 ) ;
19221: LD_INT 46
19223: PPUSH
19224: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
19228: LD_EXP 17
19232: PUSH
19233: LD_EXP 1
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PPUSH
19242: CALL_OW 87
// end ; end ; end ;
19246: GO 19249
19248: POP
// end ;
19249: PPOPN 1
19251: END
// on DialogueSkipped ( i ) do begin skip = true ;
19252: LD_ADDR_EXP 104
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// end ; end_of_file
19260: PPOPN 1
19262: END
// every 3 3$0 do
19263: GO 19265
19265: DISABLE
// begin enable ;
19266: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
19267: LD_ADDR_EXP 87
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: LD_INT 3
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: PPUSH
19285: LD_INT 2
19287: PPUSH
19288: CALL_OW 12
19292: ARRAY
19293: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
19294: LD_INT 22
19296: PUSH
19297: LD_INT 8
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 21
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PPUSH
19318: CALL_OW 69
19322: PUSH
19323: LD_INT 1
19325: GREATER
19326: IFFALSE 19357
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
19328: LD_ADDR_EXP 89
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: LD_INT 8
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 1
19345: PPUSH
19346: LD_INT 2
19348: PPUSH
19349: CALL_OW 12
19353: ARRAY
19354: ST_TO_ADDR
19355: GO 19365
// RussianTarget = 1 ;
19357: LD_ADDR_EXP 89
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
19365: LD_INT 22
19367: PUSH
19368: LD_INT 8
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 21
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PPUSH
19389: CALL_OW 69
19393: PUSH
19394: LD_INT 1
19396: GREATER
19397: IFFALSE 19432
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
19399: LD_ADDR_EXP 88
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: LD_INT 3
19409: PUSH
19410: LD_INT 8
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 1
19420: PPUSH
19421: LD_INT 3
19423: PPUSH
19424: CALL_OW 12
19428: ARRAY
19429: ST_TO_ADDR
19430: GO 19459
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
19432: LD_ADDR_EXP 88
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: LD_INT 3
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: PPUSH
19450: LD_INT 2
19452: PPUSH
19453: CALL_OW 12
19457: ARRAY
19458: ST_TO_ADDR
// end ;
19459: END
// export function PowellBuildBaseScript ; var i , powellPeople , engs , un ; begin
19460: LD_INT 0
19462: PPUSH
19463: PPUSH
19464: PPUSH
19465: PPUSH
19466: PPUSH
// for i = 1 to 4 do
19467: LD_ADDR_VAR 0 2
19471: PUSH
19472: DOUBLE
19473: LD_INT 1
19475: DEC
19476: ST_TO_ADDR
19477: LD_INT 4
19479: PUSH
19480: FOR_TO
19481: IFFALSE 19521
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
19483: LD_EXP 66
19487: PUSH
19488: LD_VAR 0 2
19492: ARRAY
19493: PPUSH
19494: LD_INT 85
19496: PPUSH
19497: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
19501: LD_EXP 66
19505: PUSH
19506: LD_VAR 0 2
19510: ARRAY
19511: PPUSH
19512: LD_INT 3
19514: PPUSH
19515: CALL_OW 183
// end ;
19519: GO 19480
19521: POP
19522: POP
// engs := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) ;
19523: LD_ADDR_VAR 0 4
19527: PUSH
19528: LD_INT 22
19530: PUSH
19531: LD_INT 4
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 25
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PPUSH
19552: CALL_OW 69
19556: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19557: LD_INT 35
19559: PPUSH
19560: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff amUnitsAttack ;
19564: LD_ADDR_VAR 0 3
19568: PUSH
19569: LD_INT 22
19571: PUSH
19572: LD_INT 4
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 21
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 3
19591: PUSH
19592: LD_INT 60
19594: PUSH
19595: EMPTY
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: PPUSH
19607: CALL_OW 69
19611: PUSH
19612: LD_EXP 66
19616: DIFF
19617: ST_TO_ADDR
// un := NearestUnitToUnit ( powellPeople , PowellCargo ) ;
19618: LD_ADDR_VAR 0 5
19622: PUSH
19623: LD_VAR 0 3
19627: PPUSH
19628: LD_INT 340
19630: PPUSH
19631: CALL_OW 74
19635: ST_TO_ADDR
// if not un then
19636: LD_VAR 0 5
19640: NOT
19641: IFFALSE 19653
// un := Powell ;
19643: LD_ADDR_VAR 0 5
19647: PUSH
19648: LD_EXP 17
19652: ST_TO_ADDR
// ComEnterUnit ( un , PowellCargo ) ;
19653: LD_VAR 0 5
19657: PPUSH
19658: LD_INT 340
19660: PPUSH
19661: CALL_OW 120
// SetResourceVisibility ( 30 , 49 , 4 ) ;
19665: LD_INT 30
19667: PPUSH
19668: LD_INT 49
19670: PPUSH
19671: LD_INT 4
19673: PPUSH
19674: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
19678: LD_INT 91
19680: PPUSH
19681: LD_INT 10
19683: PPUSH
19684: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
19688: LD_INT 91
19690: PPUSH
19691: LD_INT 11
19693: PPUSH
19694: CALL_OW 207
// AddComBuild ( engs , b_siberite_mine , 30 , 49 , 1 ) ;
19698: LD_VAR 0 4
19702: PPUSH
19703: LD_INT 30
19705: PPUSH
19706: LD_INT 30
19708: PPUSH
19709: LD_INT 49
19711: PPUSH
19712: LD_INT 1
19714: PPUSH
19715: CALL_OW 205
// AddComBuild ( engs , b_solar_power , 45 , 73 , 4 ) ;
19719: LD_VAR 0 4
19723: PPUSH
19724: LD_INT 27
19726: PPUSH
19727: LD_INT 45
19729: PPUSH
19730: LD_INT 73
19732: PPUSH
19733: LD_INT 4
19735: PPUSH
19736: CALL_OW 205
// AddComBuild ( engs , b_bunker , 55 , 56 , 4 ) ;
19740: LD_VAR 0 4
19744: PPUSH
19745: LD_INT 32
19747: PPUSH
19748: LD_INT 55
19750: PPUSH
19751: LD_INT 56
19753: PPUSH
19754: LD_INT 4
19756: PPUSH
19757: CALL_OW 205
// AddComBuild ( engs , b_bunker , 63 , 71 , 4 ) ;
19761: LD_VAR 0 4
19765: PPUSH
19766: LD_INT 32
19768: PPUSH
19769: LD_INT 63
19771: PPUSH
19772: LD_INT 71
19774: PPUSH
19775: LD_INT 4
19777: PPUSH
19778: CALL_OW 205
// AddComBuild ( engs , b_siberite_power , 40 , 72 , 4 ) ;
19782: LD_VAR 0 4
19786: PPUSH
19787: LD_INT 28
19789: PPUSH
19790: LD_INT 40
19792: PPUSH
19793: LD_INT 72
19795: PPUSH
19796: LD_INT 4
19798: PPUSH
19799: CALL_OW 205
// AddComBuild ( engs , b_ext_rocket , 37 , 50 , 2 ) ;
19803: LD_VAR 0 4
19807: PPUSH
19808: LD_INT 18
19810: PPUSH
19811: LD_INT 37
19813: PPUSH
19814: LD_INT 50
19816: PPUSH
19817: LD_INT 2
19819: PPUSH
19820: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 41 , 51 , 3 ) ;
19824: LD_VAR 0 4
19828: PPUSH
19829: LD_INT 17
19831: PPUSH
19832: LD_INT 41
19834: PPUSH
19835: LD_INT 51
19837: PPUSH
19838: LD_INT 3
19840: PPUSH
19841: CALL_OW 205
// AddComBuild ( engs , b_ext_siberium , 38 , 54 , 1 ) ;
19845: LD_VAR 0 4
19849: PPUSH
19850: LD_INT 21
19852: PPUSH
19853: LD_INT 38
19855: PPUSH
19856: LD_INT 54
19858: PPUSH
19859: LD_INT 1
19861: PPUSH
19862: CALL_OW 205
// wait ( 0 0$2 ) ;
19866: LD_INT 70
19868: PPUSH
19869: CALL_OW 67
// ComCompleteUpgrade ( powellPeople diff engs , AmLab ) ;
19873: LD_VAR 0 3
19877: PUSH
19878: LD_VAR 0 4
19882: DIFF
19883: PPUSH
19884: LD_INT 91
19886: PPUSH
19887: CALL 13385 0 2
// end ;
19891: LD_VAR 0 1
19895: RET
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19896: LD_INT 340
19898: PPUSH
19899: LD_INT 10
19901: PPUSH
19902: CALL_OW 308
19906: PUSH
19907: LD_EXP 70
19911: PUSH
19912: LD_INT 1
19914: EQUAL
19915: AND
19916: IFFALSE 19940
19918: GO 19920
19920: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19921: LD_INT 340
19923: PPUSH
19924: CALL_OW 313
19928: PPUSH
19929: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19933: LD_INT 84
19935: PPUSH
19936: CALL_OW 146
// end ;
19940: END
// every 0 0$1 trigger legionAI = 1 do
19941: LD_EXP 84
19945: PUSH
19946: LD_INT 1
19948: EQUAL
19949: IFFALSE 20012
19951: GO 19953
19953: DISABLE
// begin enable ;
19954: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19955: LD_INT 8
19957: PPUSH
19958: LD_INT 99
19960: PPUSH
19961: LD_INT 11
19963: PPUSH
19964: LD_EXP 93
19968: PPUSH
19969: CALL 9659 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19973: LD_INT 8
19975: PPUSH
19976: LD_INT 20
19978: PPUSH
19979: LD_INT 11
19981: PPUSH
19982: LD_INT 252
19984: PUSH
19985: EMPTY
19986: LIST
19987: PPUSH
19988: CALL 10068 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19992: LD_INT 8
19994: PPUSH
19995: LD_INT 1
19997: PPUSH
19998: CALL 11477 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
20002: LD_INT 8
20004: PPUSH
20005: LD_INT 11
20007: PPUSH
20008: CALL 11049 0 2
// end ;
20012: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
20013: LD_EXP 84
20017: PUSH
20018: LD_INT 1
20020: EQUAL
20021: PUSH
20022: LD_EXP 101
20026: PUSH
20027: LD_INT 1
20029: GREATEREQUAL
20030: AND
20031: PUSH
20032: LD_EXP 55
20036: PUSH
20037: EMPTY
20038: EQUAL
20039: AND
20040: PUSH
20041: LD_INT 117
20043: PPUSH
20044: CALL_OW 302
20048: AND
20049: PUSH
20050: LD_INT 117
20052: PPUSH
20053: CALL_OW 255
20057: PUSH
20058: LD_INT 8
20060: EQUAL
20061: AND
20062: IFFALSE 20125
20064: GO 20066
20066: DISABLE
// begin enable ;
20067: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
20068: LD_INT 8
20070: PPUSH
20071: LD_INT 117
20073: PPUSH
20074: LD_INT 5
20076: PUSH
20077: LD_INT 6
20079: PUSH
20080: LD_INT 7
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: PUSH
20088: LD_OWVAR 67
20092: ARRAY
20093: PPUSH
20094: LD_INT 27
20096: PUSH
20097: LD_INT 28
20099: PUSH
20100: LD_INT 25
20102: PUSH
20103: LD_INT 29
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: PPUSH
20112: LD_INT 3
20114: PPUSH
20115: LD_INT 2
20117: PPUSH
20118: LD_INT 14
20120: PPUSH
20121: CALL 11707 0 7
// end ;
20125: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
20126: LD_EXP 84
20130: PUSH
20131: LD_INT 1
20133: EQUAL
20134: PUSH
20135: LD_EXP 101
20139: PUSH
20140: LD_INT 1
20142: GREATEREQUAL
20143: AND
20144: PUSH
20145: LD_EXP 55
20149: PUSH
20150: LD_INT 5
20152: PUSH
20153: LD_INT 6
20155: PUSH
20156: LD_INT 7
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: LIST
20163: PUSH
20164: LD_OWVAR 67
20168: ARRAY
20169: EQUAL
20170: AND
20171: IFFALSE 20189
20173: GO 20175
20175: DISABLE
// begin enable ;
20176: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
20177: LD_EXP 87
20181: PPUSH
20182: LD_INT 1
20184: PPUSH
20185: CALL 11781 0 2
// end ;
20189: END
// every 0 0$1 do
20190: GO 20192
20192: DISABLE
// begin enable ;
20193: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
20194: LD_INT 6
20196: PPUSH
20197: LD_INT 1
20199: PPUSH
20200: CALL 12716 0 2
// end ;
20204: END
// every 0 0$1 trigger RussianAI = 1 do
20205: LD_EXP 86
20209: PUSH
20210: LD_INT 1
20212: EQUAL
20213: IFFALSE 20307
20215: GO 20217
20217: DISABLE
// begin enable ;
20218: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
20219: LD_INT 3
20221: PPUSH
20222: LD_INT 26
20224: PPUSH
20225: LD_INT 21
20227: PPUSH
20228: LD_EXP 94
20232: PPUSH
20233: CALL 9659 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
20237: LD_INT 3
20239: PPUSH
20240: LD_INT 22
20242: PPUSH
20243: LD_INT 21
20245: PPUSH
20246: LD_INT 2
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PPUSH
20256: CALL 10068 0 4
// AttackNearBuildings ( 3 , 1 ) ;
20260: LD_INT 3
20262: PPUSH
20263: LD_INT 1
20265: PPUSH
20266: CALL 11477 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
20270: LD_INT 3
20272: PPUSH
20273: LD_EXP 89
20277: PPUSH
20278: CALL 12716 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
20282: LD_INT 3
20284: PPUSH
20285: LD_INT 21
20287: PPUSH
20288: CALL 11049 0 2
// CraneRepairBuild ( 3 , RussianBaseArea , russianDestroyedBuilds ) ;
20292: LD_INT 3
20294: PPUSH
20295: LD_INT 21
20297: PPUSH
20298: LD_EXP 94
20302: PPUSH
20303: CALL 10794 0 3
// end ;
20307: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
20308: LD_EXP 86
20312: PUSH
20313: LD_INT 1
20315: EQUAL
20316: PUSH
20317: LD_EXP 101
20321: PUSH
20322: LD_INT 3
20324: GREATEREQUAL
20325: AND
20326: PUSH
20327: LD_EXP 61
20331: PUSH
20332: EMPTY
20333: EQUAL
20334: AND
20335: PUSH
20336: LD_INT 10
20338: PPUSH
20339: CALL_OW 302
20343: AND
20344: PUSH
20345: LD_INT 10
20347: PPUSH
20348: CALL_OW 255
20352: PUSH
20353: LD_INT 3
20355: EQUAL
20356: AND
20357: PUSH
20358: LD_INT 4
20360: PPUSH
20361: CALL_OW 302
20365: AND
20366: PUSH
20367: LD_INT 4
20369: PPUSH
20370: CALL_OW 255
20374: PUSH
20375: LD_INT 3
20377: EQUAL
20378: AND
20379: IFFALSE 20499
20381: GO 20383
20383: DISABLE
// begin enable ;
20384: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20385: LD_INT 3
20387: PPUSH
20388: LD_INT 4
20390: PPUSH
20391: LD_INT 4
20393: PUSH
20394: LD_INT 5
20396: PUSH
20397: LD_INT 6
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: LIST
20404: PUSH
20405: LD_OWVAR 67
20409: ARRAY
20410: PPUSH
20411: LD_INT 45
20413: PUSH
20414: LD_INT 46
20416: PUSH
20417: LD_INT 47
20419: PUSH
20420: LD_INT 49
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: PPUSH
20429: LD_INT 3
20431: PPUSH
20432: LD_INT 3
20434: PPUSH
20435: LD_INT 24
20437: PPUSH
20438: CALL 11707 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20442: LD_INT 3
20444: PPUSH
20445: LD_INT 10
20447: PPUSH
20448: LD_INT 4
20450: PUSH
20451: LD_INT 5
20453: PUSH
20454: LD_INT 6
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: LIST
20461: PUSH
20462: LD_OWVAR 67
20466: ARRAY
20467: PPUSH
20468: LD_INT 45
20470: PUSH
20471: LD_INT 46
20473: PUSH
20474: LD_INT 47
20476: PUSH
20477: LD_INT 49
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: PPUSH
20486: LD_INT 3
20488: PPUSH
20489: LD_INT 3
20491: PPUSH
20492: LD_INT 24
20494: PPUSH
20495: CALL 11707 0 7
// end ;
20499: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
20500: LD_EXP 86
20504: PUSH
20505: LD_INT 1
20507: EQUAL
20508: PUSH
20509: LD_EXP 101
20513: PUSH
20514: LD_INT 3
20516: GREATEREQUAL
20517: AND
20518: PUSH
20519: LD_EXP 61
20523: PUSH
20524: LD_INT 8
20526: PUSH
20527: LD_INT 10
20529: PUSH
20530: LD_INT 12
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: LIST
20537: PUSH
20538: LD_OWVAR 67
20542: ARRAY
20543: EQUAL
20544: AND
20545: IFFALSE 20657
20547: GO 20549
20549: DISABLE
// begin enable ;
20550: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
20551: LD_INT 22
20553: PUSH
20554: LD_INT 3
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 21
20563: PUSH
20564: LD_INT 2
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 3
20573: PUSH
20574: LD_INT 34
20576: PUSH
20577: LD_INT 48
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 3
20590: PUSH
20591: LD_INT 60
20593: PUSH
20594: EMPTY
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: PPUSH
20612: LD_INT 24
20614: PUSH
20615: LD_INT 25
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: PPUSH
20625: LD_INT 2
20627: PPUSH
20628: CALL_OW 12
20632: ARRAY
20633: PPUSH
20634: CALL_OW 120
// wait ( 0 0$20 ) ;
20638: LD_INT 700
20640: PPUSH
20641: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
20645: LD_EXP 89
20649: PPUSH
20650: LD_INT 2
20652: PPUSH
20653: CALL 11781 0 2
// end ;
20657: END
// every 0 0$1 trigger AllianceAI = 1 do
20658: LD_EXP 85
20662: PUSH
20663: LD_INT 1
20665: EQUAL
20666: IFFALSE 20749
20668: GO 20670
20670: DISABLE
// begin enable ;
20671: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
20672: LD_INT 7
20674: PPUSH
20675: LD_INT 45
20677: PPUSH
20678: LD_INT 23
20680: PPUSH
20681: LD_EXP 95
20685: PPUSH
20686: CALL 9659 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
20690: LD_INT 7
20692: PPUSH
20693: LD_INT 24
20695: PPUSH
20696: LD_INT 23
20698: PPUSH
20699: LD_INT 46
20701: PUSH
20702: LD_INT 39
20704: PUSH
20705: LD_INT 133
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: PPUSH
20713: CALL 10068 0 4
// AttackNearBuildings ( 7 , 1 ) ;
20717: LD_INT 7
20719: PPUSH
20720: LD_INT 1
20722: PPUSH
20723: CALL 11477 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
20727: LD_INT 7
20729: PPUSH
20730: LD_EXP 88
20734: PPUSH
20735: CALL 12716 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
20739: LD_INT 7
20741: PPUSH
20742: LD_INT 23
20744: PPUSH
20745: CALL 11049 0 2
// end ;
20749: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
20750: LD_EXP 85
20754: PUSH
20755: LD_INT 1
20757: EQUAL
20758: PUSH
20759: LD_EXP 101
20763: PUSH
20764: LD_INT 4
20766: GREATEREQUAL
20767: AND
20768: PUSH
20769: LD_EXP 62
20773: PUSH
20774: EMPTY
20775: EQUAL
20776: AND
20777: PUSH
20778: LD_INT 156
20780: PPUSH
20781: CALL_OW 302
20785: AND
20786: PUSH
20787: LD_INT 156
20789: PPUSH
20790: CALL_OW 255
20794: PUSH
20795: LD_INT 7
20797: EQUAL
20798: AND
20799: PUSH
20800: LD_INT 162
20802: PPUSH
20803: CALL_OW 302
20807: AND
20808: PUSH
20809: LD_INT 162
20811: PPUSH
20812: CALL_OW 255
20816: PUSH
20817: LD_INT 7
20819: EQUAL
20820: AND
20821: IFFALSE 20937
20823: GO 20825
20825: DISABLE
// begin enable ;
20826: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20827: LD_INT 3
20829: PPUSH
20830: LD_INT 156
20832: PPUSH
20833: LD_INT 3
20835: PUSH
20836: LD_INT 3
20838: PUSH
20839: LD_INT 4
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: PUSH
20847: LD_OWVAR 67
20851: ARRAY
20852: PPUSH
20853: LD_INT 9
20855: PUSH
20856: LD_INT 10
20858: PUSH
20859: LD_INT 7
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: PPUSH
20867: LD_INT 3
20869: PPUSH
20870: LD_INT 2
20872: PPUSH
20873: LD_INT 5
20875: PPUSH
20876: CALL 11707 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20880: LD_INT 3
20882: PPUSH
20883: LD_INT 162
20885: PPUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 2
20891: PUSH
20892: LD_INT 3
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: PUSH
20900: LD_OWVAR 67
20904: ARRAY
20905: PPUSH
20906: LD_INT 45
20908: PUSH
20909: LD_INT 46
20911: PUSH
20912: LD_INT 47
20914: PUSH
20915: LD_INT 49
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: PPUSH
20924: LD_INT 3
20926: PPUSH
20927: LD_INT 3
20929: PPUSH
20930: LD_INT 24
20932: PPUSH
20933: CALL 11707 0 7
// end ;
20937: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20938: LD_EXP 85
20942: PUSH
20943: LD_INT 1
20945: EQUAL
20946: PUSH
20947: LD_EXP 101
20951: PUSH
20952: LD_INT 4
20954: GREATEREQUAL
20955: AND
20956: PUSH
20957: LD_EXP 62
20961: PUSH
20962: LD_INT 5
20964: PUSH
20965: LD_INT 5
20967: PUSH
20968: LD_INT 7
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: PUSH
20976: LD_OWVAR 67
20980: ARRAY
20981: EQUAL
20982: AND
20983: IFFALSE 21042
20985: GO 20987
20987: DISABLE
20988: LD_INT 0
20990: PPUSH
// begin for i in AllianceVehicles do
20991: LD_ADDR_VAR 0 1
20995: PUSH
20996: LD_EXP 62
21000: PUSH
21001: FOR_IN
21002: IFFALSE 21027
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
21004: LD_VAR 0 1
21008: PPUSH
21009: LD_INT 117
21011: PPUSH
21012: LD_INT 112
21014: PPUSH
21015: LD_INT 10
21017: PPUSH
21018: LD_INT 1
21020: PPUSH
21021: CALL_OW 483
21025: GO 21001
21027: POP
21028: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
21029: LD_EXP 88
21033: PPUSH
21034: LD_INT 3
21036: PPUSH
21037: CALL 11781 0 2
// enable ;
21041: ENABLE
// end ;
21042: PPOPN 1
21044: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
21045: LD_EXP 85
21049: PUSH
21050: LD_INT 1
21052: EQUAL
21053: PUSH
21054: LD_EXP 101
21058: PUSH
21059: LD_INT 4
21061: GREATEREQUAL
21062: AND
21063: IFFALSE 21244
21065: GO 21067
21067: DISABLE
21068: LD_INT 0
21070: PPUSH
// begin enable ;
21071: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
21072: LD_ADDR_VAR 0 1
21076: PUSH
21077: LD_INT 22
21079: PUSH
21080: LD_INT 1
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 21
21089: PUSH
21090: LD_INT 3
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 30
21102: PUSH
21103: LD_INT 30
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 30
21112: PUSH
21113: LD_INT 28
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 30
21122: PUSH
21123: LD_INT 21
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 69
21145: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
21146: LD_ADDR_VAR 0 1
21150: PUSH
21151: LD_VAR 0 1
21155: PUSH
21156: LD_INT 22
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 21
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 32
21178: PUSH
21179: LD_INT 3
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: LIST
21190: PPUSH
21191: CALL_OW 69
21195: ADD
21196: ST_TO_ADDR
// if tmp = [ ] then
21197: LD_VAR 0 1
21201: PUSH
21202: EMPTY
21203: EQUAL
21204: IFFALSE 21208
// exit ;
21206: GO 21244
// if tmp > 0 then
21208: LD_VAR 0 1
21212: PUSH
21213: LD_INT 0
21215: GREATER
21216: IFFALSE 21244
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
21218: LD_VAR 0 1
21222: PUSH
21223: LD_INT 1
21225: PPUSH
21226: LD_VAR 0 1
21230: PPUSH
21231: CALL_OW 12
21235: ARRAY
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: CALL_OW 234
// end ;
21244: PPOPN 1
21246: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
21247: LD_EXP 84
21251: PUSH
21252: LD_INT 1
21254: EQUAL
21255: PUSH
21256: LD_INT 22
21258: PUSH
21259: LD_INT 8
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 21
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 3
21278: PUSH
21279: LD_INT 61
21281: PUSH
21282: EMPTY
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: PPUSH
21294: CALL_OW 69
21298: PUSH
21299: LD_INT 0
21301: GREATER
21302: AND
21303: IFFALSE 21387
21305: GO 21307
21307: DISABLE
21308: LD_INT 0
21310: PPUSH
// begin enable ;
21311: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_INT 22
21319: PUSH
21320: LD_INT 8
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 21
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 33
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 3
21349: PUSH
21350: LD_INT 61
21352: PUSH
21353: EMPTY
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: PPUSH
21366: CALL_OW 69
21370: PUSH
21371: FOR_IN
21372: IFFALSE 21385
// Connect ( i ) ;
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL 13031 0 1
21383: GO 21371
21385: POP
21386: POP
// end ;
21387: PPOPN 1
21389: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
21390: LD_EXP 85
21394: PUSH
21395: LD_INT 1
21397: EQUAL
21398: PUSH
21399: LD_INT 22
21401: PUSH
21402: LD_INT 7
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 21
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 3
21421: PUSH
21422: LD_INT 61
21424: PUSH
21425: EMPTY
21426: LIST
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 69
21441: PUSH
21442: LD_INT 0
21444: GREATER
21445: AND
21446: IFFALSE 21530
21448: GO 21450
21450: DISABLE
21451: LD_INT 0
21453: PPUSH
// begin enable ;
21454: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
21455: LD_ADDR_VAR 0 1
21459: PUSH
21460: LD_INT 22
21462: PUSH
21463: LD_INT 7
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 21
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 33
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 3
21492: PUSH
21493: LD_INT 61
21495: PUSH
21496: EMPTY
21497: LIST
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: PPUSH
21509: CALL_OW 69
21513: PUSH
21514: FOR_IN
21515: IFFALSE 21528
// Connect ( i ) ;
21517: LD_VAR 0 1
21521: PPUSH
21522: CALL 13031 0 1
21526: GO 21514
21528: POP
21529: POP
// end ; end_of_file
21530: PPOPN 1
21532: END
// every 0 0$1 trigger timerStatus = 1 do
21533: LD_EXP 96
21537: PUSH
21538: LD_INT 1
21540: EQUAL
21541: IFFALSE 21578
21543: GO 21545
21545: DISABLE
// begin enable ;
21546: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
21547: LD_ADDR_OWVAR 47
21551: PUSH
21552: LD_STRING #Am15-1
21554: PUSH
21555: LD_EXP 97
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
21564: LD_ADDR_EXP 97
21568: PUSH
21569: LD_EXP 97
21573: PUSH
21574: LD_INT 35
21576: PLUS
21577: ST_TO_ADDR
// end ; end_of_file
21578: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
21579: LD_EXP 72
21583: PUSH
21584: LD_INT 1
21586: EQUAL
21587: PUSH
21588: LD_EXP 101
21592: PUSH
21593: LD_INT 0
21595: EQUAL
21596: AND
21597: PUSH
21598: LD_EXP 90
21602: PUSH
21603: LD_INT 0
21605: EQUAL
21606: AND
21607: IFFALSE 21667
21609: GO 21611
21611: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
21612: LD_INT 2
21614: PPUSH
21615: LD_INT 6
21617: PPUSH
21618: LD_INT 2
21620: PPUSH
21621: LD_INT 4
21623: PPUSH
21624: CALL_OW 12
21628: PPUSH
21629: LD_INT 10
21631: PPUSH
21632: LD_INT 3
21634: PPUSH
21635: LD_INT 3
21637: PPUSH
21638: LD_INT 3
21640: PPUSH
21641: LD_INT 42
21643: PUSH
21644: LD_INT 43
21646: PUSH
21647: LD_INT 44
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: LIST
21654: PPUSH
21655: EMPTY
21656: PPUSH
21657: EMPTY
21658: PPUSH
21659: LD_INT 1
21661: PPUSH
21662: CALL 7861 0 11
// enable ;
21666: ENABLE
// end ;
21667: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
21668: LD_EXP 72
21672: PUSH
21673: LD_INT 1
21675: EQUAL
21676: PUSH
21677: LD_EXP 101
21681: PUSH
21682: LD_INT 1
21684: EQUAL
21685: AND
21686: PUSH
21687: LD_EXP 90
21691: PUSH
21692: LD_INT 0
21694: EQUAL
21695: AND
21696: IFFALSE 21756
21698: GO 21700
21700: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21701: LD_INT 2
21703: PPUSH
21704: LD_INT 6
21706: PPUSH
21707: LD_INT 4
21709: PPUSH
21710: LD_INT 6
21712: PPUSH
21713: CALL_OW 12
21717: PPUSH
21718: LD_INT 10
21720: PPUSH
21721: LD_INT 3
21723: PPUSH
21724: LD_INT 3
21726: PPUSH
21727: LD_INT 3
21729: PPUSH
21730: LD_INT 44
21732: PUSH
21733: LD_INT 45
21735: PUSH
21736: LD_INT 46
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: PPUSH
21744: EMPTY
21745: PPUSH
21746: EMPTY
21747: PPUSH
21748: LD_INT 1
21750: PPUSH
21751: CALL 7861 0 11
// enable ;
21755: ENABLE
// end ;
21756: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
21757: LD_EXP 72
21761: PUSH
21762: LD_INT 1
21764: EQUAL
21765: PUSH
21766: LD_EXP 101
21770: PUSH
21771: LD_INT 3
21773: EQUAL
21774: AND
21775: PUSH
21776: LD_EXP 90
21780: PUSH
21781: LD_INT 0
21783: EQUAL
21784: AND
21785: IFFALSE 21849
21787: GO 21789
21789: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
21790: LD_INT 2
21792: PPUSH
21793: LD_INT 6
21795: PPUSH
21796: LD_INT 4
21798: PPUSH
21799: LD_INT 8
21801: PPUSH
21802: CALL_OW 12
21806: PPUSH
21807: LD_INT 10
21809: PPUSH
21810: LD_INT 3
21812: PPUSH
21813: LD_INT 3
21815: PPUSH
21816: LD_INT 3
21818: PPUSH
21819: LD_INT 44
21821: PUSH
21822: LD_INT 45
21824: PUSH
21825: LD_INT 46
21827: PUSH
21828: LD_INT 47
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: PPUSH
21837: EMPTY
21838: PPUSH
21839: EMPTY
21840: PPUSH
21841: LD_INT 1
21843: PPUSH
21844: CALL 7861 0 11
// enable ;
21848: ENABLE
// end ;
21849: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21850: LD_EXP 72
21854: PUSH
21855: LD_INT 1
21857: EQUAL
21858: PUSH
21859: LD_EXP 101
21863: PUSH
21864: LD_INT 4
21866: GREATEREQUAL
21867: AND
21868: PUSH
21869: LD_EXP 90
21873: PUSH
21874: LD_INT 0
21876: EQUAL
21877: AND
21878: IFFALSE 21938
21880: GO 21882
21882: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21883: LD_INT 2
21885: PPUSH
21886: LD_INT 6
21888: PPUSH
21889: LD_INT 4
21891: PPUSH
21892: LD_INT 8
21894: PPUSH
21895: CALL_OW 12
21899: PPUSH
21900: LD_INT 10
21902: PPUSH
21903: LD_INT 3
21905: PPUSH
21906: LD_INT 3
21908: PPUSH
21909: LD_INT 3
21911: PPUSH
21912: LD_INT 46
21914: PUSH
21915: LD_INT 47
21917: PUSH
21918: LD_INT 49
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: PPUSH
21926: EMPTY
21927: PPUSH
21928: EMPTY
21929: PPUSH
21930: LD_INT 1
21932: PPUSH
21933: CALL 7861 0 11
// enable ;
21937: ENABLE
// end ; end_of_file
21938: END
// every 1 do var i , dec1 , options , people ;
21939: GO 21941
21941: DISABLE
21942: LD_INT 0
21944: PPUSH
21945: PPUSH
21946: PPUSH
21947: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21948: LD_INT 24
21950: PPUSH
21951: LD_INT 92
21953: PPUSH
21954: LD_INT 172
21956: PPUSH
21957: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21961: LD_INT 25
21963: PPUSH
21964: LD_INT 103
21966: PPUSH
21967: LD_INT 74
21969: PPUSH
21970: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21974: LD_EXP 48
21978: PPUSH
21979: LD_INT 4
21981: PPUSH
21982: CALL_OW 336
// Video ( true ) ;
21986: LD_INT 1
21988: PPUSH
21989: CALL 6884 0 1
// cinematics := true ;
21993: LD_ADDR_EXP 103
21997: PUSH
21998: LD_INT 1
22000: ST_TO_ADDR
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
22001: LD_EXP 24
22005: PUSH
22006: LD_EXP 25
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PPUSH
22015: LD_INT 60
22017: PPUSH
22018: LD_INT 75
22020: PPUSH
22021: CALL_OW 111
// if KappaStatus = 0 then
22025: LD_EXP 81
22029: PUSH
22030: LD_INT 0
22032: EQUAL
22033: IFFALSE 22322
// begin CenterNowOnUnits ( NewJMMVeh ) ;
22035: LD_EXP 24
22039: PPUSH
22040: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
22044: LD_EXP 1
22048: PPUSH
22049: LD_STRING D1T-JMM-1
22051: PPUSH
22052: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22056: LD_EXP 24
22060: PPUSH
22061: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
22065: LD_EXP 17
22069: PPUSH
22070: LD_STRING D1T-Pow-1
22072: PPUSH
22073: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22077: LD_EXP 24
22081: PPUSH
22082: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
22086: LD_EXP 1
22090: PPUSH
22091: LD_STRING D1T-JMM-2
22093: PPUSH
22094: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22098: LD_EXP 24
22102: PPUSH
22103: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
22107: LD_EXP 17
22111: PPUSH
22112: LD_STRING D1T-Pow-2
22114: PPUSH
22115: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22119: LD_EXP 24
22123: PPUSH
22124: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
22128: LD_EXP 1
22132: PPUSH
22133: LD_STRING D1T-JMM-3
22135: PPUSH
22136: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22140: LD_EXP 24
22144: PPUSH
22145: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
22149: LD_EXP 17
22153: PPUSH
22154: LD_STRING D1T-Pow-3
22156: PPUSH
22157: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22161: LD_EXP 24
22165: PPUSH
22166: CALL_OW 87
// if not JMMGirlVeh = [ ] then
22170: LD_EXP 79
22174: PUSH
22175: EMPTY
22176: EQUAL
22177: NOT
22178: IFFALSE 22278
// begin if JMMGirl = 1 then
22180: LD_EXP 80
22184: PUSH
22185: LD_INT 1
22187: EQUAL
22188: IFFALSE 22202
// Say ( Joan , D1T-Joan-3 ) ;
22190: LD_EXP 2
22194: PPUSH
22195: LD_STRING D1T-Joan-3
22197: PPUSH
22198: CALL_OW 88
// if JMMGirl = 2 then
22202: LD_EXP 80
22206: PUSH
22207: LD_INT 2
22209: EQUAL
22210: IFFALSE 22224
// Say ( Lisa , D1T-Lisa-3 ) ;
22212: LD_EXP 4
22216: PPUSH
22217: LD_STRING D1T-Lisa-3
22219: PPUSH
22220: CALL_OW 88
// if JMMGirl = 3 then
22224: LD_EXP 80
22228: PUSH
22229: LD_INT 3
22231: EQUAL
22232: IFFALSE 22246
// Say ( Connie , D1T-Con-3 ) ;
22234: LD_EXP 16
22238: PPUSH
22239: LD_STRING D1T-Con-3
22241: PPUSH
22242: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22246: LD_EXP 24
22250: PPUSH
22251: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
22255: LD_EXP 17
22259: PPUSH
22260: LD_STRING D1T-Pow-4
22262: PPUSH
22263: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22267: LD_EXP 24
22271: PPUSH
22272: CALL_OW 87
// end else
22276: GO 22320
// begin Say ( JMM , D1T-JMM-4 ) ;
22278: LD_EXP 1
22282: PPUSH
22283: LD_STRING D1T-JMM-4
22285: PPUSH
22286: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22290: LD_EXP 24
22294: PPUSH
22295: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
22299: LD_EXP 17
22303: PPUSH
22304: LD_STRING D1T-Pow-5
22306: PPUSH
22307: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22311: LD_EXP 24
22315: PPUSH
22316: CALL_OW 87
// end ; end else
22320: GO 22406
// begin CenterNowOnUnits ( NewJMMVeh ) ;
22322: LD_EXP 24
22326: PPUSH
22327: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
22331: LD_EXP 1
22335: PPUSH
22336: LD_STRING D1T-JMM-1
22338: PPUSH
22339: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22343: LD_EXP 24
22347: PPUSH
22348: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
22352: LD_EXP 17
22356: PPUSH
22357: LD_STRING D1T-Pow-1
22359: PPUSH
22360: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22364: LD_EXP 24
22368: PPUSH
22369: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
22373: LD_EXP 1
22377: PPUSH
22378: LD_STRING D1T-JMM-2
22380: PPUSH
22381: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22385: LD_EXP 24
22389: PPUSH
22390: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
22394: LD_EXP 17
22398: PPUSH
22399: LD_STRING D1T-Pow-2
22401: PPUSH
22402: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
22406: LD_INT 35
22408: PPUSH
22409: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
22413: LD_EXP 24
22417: PUSH
22418: LD_EXP 25
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PPUSH
22427: LD_INT 60
22429: PPUSH
22430: LD_INT 75
22432: PPUSH
22433: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
22437: LD_EXP 24
22441: PPUSH
22442: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
22446: LD_EXP 24
22450: PPUSH
22451: LD_EXP 17
22455: PPUSH
22456: CALL_OW 296
22460: PUSH
22461: LD_INT 20
22463: LESS
22464: PUSH
22465: LD_EXP 24
22469: PPUSH
22470: CALL_OW 314
22474: NOT
22475: OR
22476: IFFALSE 22406
// ComExitVehicle ( JMM ) ;
22478: LD_EXP 1
22482: PPUSH
22483: CALL_OW 121
// repeat wait ( 0 0$2 ) ;
22487: LD_INT 70
22489: PPUSH
22490: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
22494: LD_EXP 1
22498: PPUSH
22499: LD_EXP 17
22503: PPUSH
22504: CALL_OW 112
// CenterOnUnits ( JMM ) ;
22508: LD_EXP 1
22512: PPUSH
22513: CALL_OW 85
// until GetDistUnits ( JMM , Powell ) < 6 ;
22517: LD_EXP 1
22521: PPUSH
22522: LD_EXP 17
22526: PPUSH
22527: CALL_OW 296
22531: PUSH
22532: LD_INT 6
22534: LESS
22535: IFFALSE 22487
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
22537: LD_EXP 1
22541: PUSH
22542: LD_EXP 17
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PPUSH
22551: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
22555: LD_EXP 1
22559: PPUSH
22560: LD_EXP 17
22564: PPUSH
22565: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
22569: LD_EXP 17
22573: PPUSH
22574: LD_EXP 1
22578: PPUSH
22579: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
22583: LD_EXP 1
22587: PPUSH
22588: LD_STRING D1-JMM-1
22590: PPUSH
22591: CALL_OW 88
// RaiseSailEvent ( 2 ) ;
22595: LD_INT 2
22597: PPUSH
22598: CALL_OW 427
// Say ( Powell , D1-Pow-1 ) ;
22602: LD_EXP 17
22606: PPUSH
22607: LD_STRING D1-Pow-1
22609: PPUSH
22610: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
22614: LD_EXP 1
22618: PPUSH
22619: LD_STRING D1-JMM-2
22621: PPUSH
22622: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
22626: LD_EXP 17
22630: PPUSH
22631: LD_STRING D1-Pow-2
22633: PPUSH
22634: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
22638: LD_EXP 1
22642: PPUSH
22643: LD_STRING D1-JMM-3
22645: PPUSH
22646: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
22650: LD_EXP 17
22654: PPUSH
22655: LD_STRING D1-Pow-3
22657: PPUSH
22658: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
22662: LD_EXP 1
22666: PPUSH
22667: LD_STRING D1-JMM-4
22669: PPUSH
22670: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
22674: LD_EXP 17
22678: PPUSH
22679: LD_STRING D1-Pow-4
22681: PPUSH
22682: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
22686: LD_EXP 1
22690: PPUSH
22691: LD_STRING D1-JMM-5
22693: PPUSH
22694: CALL_OW 88
// RaiseSailEvent ( 1 ) ;
22698: LD_INT 1
22700: PPUSH
22701: CALL_OW 427
// Say ( Powell , D1-Pow-5 ) ;
22705: LD_EXP 17
22709: PPUSH
22710: LD_STRING D1-Pow-5
22712: PPUSH
22713: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
22717: LD_ADDR_VAR 0 3
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: LD_INT 4
22733: PUSH
22734: LD_INT 5
22736: PUSH
22737: LD_INT 6
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22748: LD_ADDR_VAR 0 2
22752: PUSH
22753: LD_STRING Q1
22755: PPUSH
22756: LD_VAR 0 3
22760: PPUSH
22761: CALL_OW 98
22765: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22766: LD_ADDR_VAR 0 2
22770: PUSH
22771: LD_STRING Q1
22773: PPUSH
22774: LD_VAR 0 3
22778: PPUSH
22779: CALL_OW 98
22783: ST_TO_ADDR
// options = options diff dec1 ;
22784: LD_ADDR_VAR 0 3
22788: PUSH
22789: LD_VAR 0 3
22793: PUSH
22794: LD_VAR 0 2
22798: DIFF
22799: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22800: LD_VAR 0 2
22804: PPUSH
22805: LD_VAR 0 3
22809: PPUSH
22810: CALL 24402 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22814: LD_VAR 0 2
22818: PUSH
22819: LD_INT 5
22821: PUSH
22822: LD_INT 6
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: IN
22829: PUSH
22830: LD_VAR 0 3
22834: PUSH
22835: LD_INT 2
22837: EQUAL
22838: OR
22839: IFFALSE 22766
// if not ( dec1 in [ 5 , 6 ] ) then
22841: LD_VAR 0 2
22845: PUSH
22846: LD_INT 5
22848: PUSH
22849: LD_INT 6
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: IN
22856: NOT
22857: IFFALSE 22900
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22859: LD_ADDR_VAR 0 2
22863: PUSH
22864: LD_STRING Q1a
22866: PPUSH
22867: LD_INT 1
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PPUSH
22877: CALL_OW 98
22881: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22882: LD_VAR 0 2
22886: PUSH
22887: LD_INT 4
22889: PLUS
22890: PPUSH
22891: LD_VAR 0 3
22895: PPUSH
22896: CALL 24402 0 2
// end ; if not JMMGirlVeh = [ ] then
22900: LD_EXP 79
22904: PUSH
22905: EMPTY
22906: EQUAL
22907: NOT
22908: IFFALSE 23274
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22910: LD_EXP 25
22914: PPUSH
22915: CALL_OW 313
22919: PPUSH
22920: CALL_OW 121
// wait ( 0 0$1 ) ;
22924: LD_INT 35
22926: PPUSH
22927: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22931: LD_INT 35
22933: PPUSH
22934: CALL_OW 67
// if JMMGirl = 1 then
22938: LD_EXP 80
22942: PUSH
22943: LD_INT 1
22945: EQUAL
22946: IFFALSE 22962
// ComMoveUnit ( JMM , Joan ) ;
22948: LD_EXP 1
22952: PPUSH
22953: LD_EXP 2
22957: PPUSH
22958: CALL_OW 112
// if JMMGirl = 2 then
22962: LD_EXP 80
22966: PUSH
22967: LD_INT 2
22969: EQUAL
22970: IFFALSE 22986
// ComMoveUnit ( JMM , Lisa ) ;
22972: LD_EXP 1
22976: PPUSH
22977: LD_EXP 4
22981: PPUSH
22982: CALL_OW 112
// if JMMGirl = 3 then
22986: LD_EXP 80
22990: PUSH
22991: LD_INT 3
22993: EQUAL
22994: IFFALSE 23010
// ComMoveUnit ( JMM , Connie ) ;
22996: LD_EXP 1
23000: PPUSH
23001: LD_EXP 16
23005: PPUSH
23006: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
23010: LD_EXP 1
23014: PPUSH
23015: LD_EXP 2
23019: PPUSH
23020: CALL_OW 296
23024: PUSH
23025: LD_INT 6
23027: LESS
23028: PUSH
23029: LD_EXP 1
23033: PPUSH
23034: LD_EXP 4
23038: PPUSH
23039: CALL_OW 296
23043: PUSH
23044: LD_INT 6
23046: LESS
23047: OR
23048: PUSH
23049: LD_EXP 1
23053: PPUSH
23054: LD_EXP 16
23058: PPUSH
23059: CALL_OW 296
23063: PUSH
23064: LD_INT 6
23066: LESS
23067: OR
23068: IFFALSE 22931
// CenterNowOnUnits ( JMM ) ;
23070: LD_EXP 1
23074: PPUSH
23075: CALL_OW 87
// case JMMGirl of 1 :
23079: LD_EXP 80
23083: PUSH
23084: LD_INT 1
23086: DOUBLE
23087: EQUAL
23088: IFTRUE 23092
23090: GO 23147
23092: POP
// begin ComTurnUnit ( JMM , Joan ) ;
23093: LD_EXP 1
23097: PPUSH
23098: LD_EXP 2
23102: PPUSH
23103: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
23107: LD_EXP 2
23111: PPUSH
23112: LD_EXP 1
23116: PPUSH
23117: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
23121: LD_EXP 2
23125: PPUSH
23126: LD_STRING D3W-Joan-1
23128: PPUSH
23129: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23133: LD_EXP 1
23137: PPUSH
23138: LD_STRING D3W-JMM-1
23140: PPUSH
23141: CALL_OW 88
// end ; 2 :
23145: GO 23274
23147: LD_INT 2
23149: DOUBLE
23150: EQUAL
23151: IFTRUE 23155
23153: GO 23210
23155: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
23156: LD_EXP 1
23160: PPUSH
23161: LD_EXP 4
23165: PPUSH
23166: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
23170: LD_EXP 4
23174: PPUSH
23175: LD_EXP 1
23179: PPUSH
23180: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
23184: LD_EXP 4
23188: PPUSH
23189: LD_STRING D3W-Lisa-1
23191: PPUSH
23192: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23196: LD_EXP 1
23200: PPUSH
23201: LD_STRING D3W-JMM-1
23203: PPUSH
23204: CALL_OW 88
// end ; 3 :
23208: GO 23274
23210: LD_INT 3
23212: DOUBLE
23213: EQUAL
23214: IFTRUE 23218
23216: GO 23273
23218: POP
// begin ComTurnUnit ( JMM , Connie ) ;
23219: LD_EXP 1
23223: PPUSH
23224: LD_EXP 16
23228: PPUSH
23229: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
23233: LD_EXP 16
23237: PPUSH
23238: LD_EXP 1
23242: PPUSH
23243: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
23247: LD_EXP 16
23251: PPUSH
23252: LD_STRING D3W-Con-1
23254: PPUSH
23255: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23259: LD_EXP 1
23263: PPUSH
23264: LD_STRING D3W-JMM-1
23266: PPUSH
23267: CALL_OW 88
// end ; end ;
23271: GO 23274
23273: POP
// end ; people = 0 ;
23274: LD_ADDR_VAR 0 4
23278: PUSH
23279: LD_INT 0
23281: ST_TO_ADDR
// if Lisa and people < 5 then
23282: LD_EXP 4
23286: PUSH
23287: LD_VAR 0 4
23291: PUSH
23292: LD_INT 5
23294: LESS
23295: AND
23296: IFFALSE 23328
// begin people = people + 1 ;
23298: LD_ADDR_VAR 0 4
23302: PUSH
23303: LD_VAR 0 4
23307: PUSH
23308: LD_INT 1
23310: PLUS
23311: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
23312: LD_ADDR_EXP 67
23316: PUSH
23317: LD_EXP 67
23321: PUSH
23322: LD_EXP 4
23326: ADD
23327: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
23328: LD_EXP 5
23332: PUSH
23333: LD_VAR 0 4
23337: PUSH
23338: LD_INT 5
23340: LESS
23341: AND
23342: IFFALSE 23374
// begin people = people + 1 ;
23344: LD_ADDR_VAR 0 4
23348: PUSH
23349: LD_VAR 0 4
23353: PUSH
23354: LD_INT 1
23356: PLUS
23357: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
23358: LD_ADDR_EXP 67
23362: PUSH
23363: LD_EXP 67
23367: PUSH
23368: LD_EXP 5
23372: ADD
23373: ST_TO_ADDR
// end ; if Bobby and people < 5 then
23374: LD_EXP 6
23378: PUSH
23379: LD_VAR 0 4
23383: PUSH
23384: LD_INT 5
23386: LESS
23387: AND
23388: IFFALSE 23420
// begin people = people + 1 ;
23390: LD_ADDR_VAR 0 4
23394: PUSH
23395: LD_VAR 0 4
23399: PUSH
23400: LD_INT 1
23402: PLUS
23403: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
23404: LD_ADDR_EXP 67
23408: PUSH
23409: LD_EXP 67
23413: PUSH
23414: LD_EXP 6
23418: ADD
23419: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
23420: LD_EXP 7
23424: PUSH
23425: LD_VAR 0 4
23429: PUSH
23430: LD_INT 5
23432: LESS
23433: AND
23434: IFFALSE 23466
// begin people = people + 1 ;
23436: LD_ADDR_VAR 0 4
23440: PUSH
23441: LD_VAR 0 4
23445: PUSH
23446: LD_INT 1
23448: PLUS
23449: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
23450: LD_ADDR_EXP 67
23454: PUSH
23455: LD_EXP 67
23459: PUSH
23460: LD_EXP 7
23464: ADD
23465: ST_TO_ADDR
// end ; if Denis and people < 5 then
23466: LD_EXP 8
23470: PUSH
23471: LD_VAR 0 4
23475: PUSH
23476: LD_INT 5
23478: LESS
23479: AND
23480: IFFALSE 23512
// begin people = people + 1 ;
23482: LD_ADDR_VAR 0 4
23486: PUSH
23487: LD_VAR 0 4
23491: PUSH
23492: LD_INT 1
23494: PLUS
23495: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
23496: LD_ADDR_EXP 67
23500: PUSH
23501: LD_EXP 67
23505: PUSH
23506: LD_EXP 8
23510: ADD
23511: ST_TO_ADDR
// end ; if Brown and people < 5 then
23512: LD_EXP 9
23516: PUSH
23517: LD_VAR 0 4
23521: PUSH
23522: LD_INT 5
23524: LESS
23525: AND
23526: IFFALSE 23558
// begin people = people + 1 ;
23528: LD_ADDR_VAR 0 4
23532: PUSH
23533: LD_VAR 0 4
23537: PUSH
23538: LD_INT 1
23540: PLUS
23541: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
23542: LD_ADDR_EXP 67
23546: PUSH
23547: LD_EXP 67
23551: PUSH
23552: LD_EXP 9
23556: ADD
23557: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
23558: LD_EXP 10
23562: PUSH
23563: LD_VAR 0 4
23567: PUSH
23568: LD_INT 5
23570: LESS
23571: AND
23572: IFFALSE 23604
// begin people = people + 1 ;
23574: LD_ADDR_VAR 0 4
23578: PUSH
23579: LD_VAR 0 4
23583: PUSH
23584: LD_INT 1
23586: PLUS
23587: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
23588: LD_ADDR_EXP 67
23592: PUSH
23593: LD_EXP 67
23597: PUSH
23598: LD_EXP 10
23602: ADD
23603: ST_TO_ADDR
// end ; if Houten and people < 5 then
23604: LD_EXP 11
23608: PUSH
23609: LD_VAR 0 4
23613: PUSH
23614: LD_INT 5
23616: LESS
23617: AND
23618: IFFALSE 23650
// begin people = people + 1 ;
23620: LD_ADDR_VAR 0 4
23624: PUSH
23625: LD_VAR 0 4
23629: PUSH
23630: LD_INT 1
23632: PLUS
23633: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
23634: LD_ADDR_EXP 67
23638: PUSH
23639: LD_EXP 67
23643: PUSH
23644: LD_EXP 11
23648: ADD
23649: ST_TO_ADDR
// end ; if Cornel and people < 5 then
23650: LD_EXP 12
23654: PUSH
23655: LD_VAR 0 4
23659: PUSH
23660: LD_INT 5
23662: LESS
23663: AND
23664: IFFALSE 23696
// begin people = people + 1 ;
23666: LD_ADDR_VAR 0 4
23670: PUSH
23671: LD_VAR 0 4
23675: PUSH
23676: LD_INT 1
23678: PLUS
23679: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
23680: LD_ADDR_EXP 67
23684: PUSH
23685: LD_EXP 67
23689: PUSH
23690: LD_EXP 12
23694: ADD
23695: ST_TO_ADDR
// end ; if Gary and people < 5 then
23696: LD_EXP 13
23700: PUSH
23701: LD_VAR 0 4
23705: PUSH
23706: LD_INT 5
23708: LESS
23709: AND
23710: IFFALSE 23742
// begin people = people + 1 ;
23712: LD_ADDR_VAR 0 4
23716: PUSH
23717: LD_VAR 0 4
23721: PUSH
23722: LD_INT 1
23724: PLUS
23725: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23726: LD_ADDR_EXP 67
23730: PUSH
23731: LD_EXP 67
23735: PUSH
23736: LD_EXP 13
23740: ADD
23741: ST_TO_ADDR
// end ; if Frank and people < 5 then
23742: LD_EXP 14
23746: PUSH
23747: LD_VAR 0 4
23751: PUSH
23752: LD_INT 5
23754: LESS
23755: AND
23756: IFFALSE 23788
// begin people = people + 1 ;
23758: LD_ADDR_VAR 0 4
23762: PUSH
23763: LD_VAR 0 4
23767: PUSH
23768: LD_INT 1
23770: PLUS
23771: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23772: LD_ADDR_EXP 67
23776: PUSH
23777: LD_EXP 67
23781: PUSH
23782: LD_EXP 14
23786: ADD
23787: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23788: LD_EXP 15
23792: PUSH
23793: LD_VAR 0 4
23797: PUSH
23798: LD_INT 5
23800: LESS
23801: AND
23802: IFFALSE 23834
// begin people = people + 1 ;
23804: LD_ADDR_VAR 0 4
23808: PUSH
23809: LD_VAR 0 4
23813: PUSH
23814: LD_INT 1
23816: PLUS
23817: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23818: LD_ADDR_EXP 67
23822: PUSH
23823: LD_EXP 67
23827: PUSH
23828: LD_EXP 15
23832: ADD
23833: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23834: LD_EXP 67
23838: PPUSH
23839: LD_INT 25
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PPUSH
23849: CALL_OW 72
23853: PUSH
23854: LD_INT 0
23856: EQUAL
23857: IFFALSE 23875
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23859: LD_EXP 67
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: PPUSH
23868: LD_INT 2
23870: PPUSH
23871: CALL_OW 336
// for i = 1 to 5 do
23875: LD_ADDR_VAR 0 1
23879: PUSH
23880: DOUBLE
23881: LD_INT 1
23883: DEC
23884: ST_TO_ADDR
23885: LD_INT 5
23887: PUSH
23888: FOR_TO
23889: IFFALSE 23940
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23891: LD_EXP 67
23895: PUSH
23896: LD_VAR 0 1
23900: ARRAY
23901: PPUSH
23902: LD_INT 62
23904: PUSH
23905: LD_VAR 0 1
23909: PLUS
23910: PPUSH
23911: LD_INT 95
23913: PPUSH
23914: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23918: LD_EXP 67
23922: PUSH
23923: LD_VAR 0 1
23927: ARRAY
23928: PPUSH
23929: LD_EXP 1
23933: PPUSH
23934: CALL_OW 179
// end ;
23938: GO 23888
23940: POP
23941: POP
// repeat wait ( 0 0$1 ) ;
23942: LD_INT 35
23944: PPUSH
23945: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23949: LD_EXP 1
23953: PPUSH
23954: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23958: LD_EXP 1
23962: PPUSH
23963: LD_INT 66
23965: PPUSH
23966: LD_INT 98
23968: PPUSH
23969: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23973: LD_EXP 2
23977: PUSH
23978: LD_EXP 4
23982: PUSH
23983: LD_EXP 16
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: PPUSH
23993: LD_INT 67
23995: PPUSH
23996: LD_INT 98
23998: PPUSH
23999: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
24003: LD_EXP 1
24007: PUSH
24008: LD_EXP 2
24012: PUSH
24013: LD_EXP 4
24017: PUSH
24018: LD_EXP 16
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: PPUSH
24029: LD_INT 63
24031: PPUSH
24032: LD_INT 95
24034: PPUSH
24035: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
24039: LD_EXP 1
24043: PPUSH
24044: LD_INT 9
24046: PPUSH
24047: CALL_OW 308
24051: PUSH
24052: LD_INT 9
24054: PPUSH
24055: LD_INT 22
24057: PUSH
24058: LD_INT 4
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 21
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: PUSH
24084: LD_INT 5
24086: EQUAL
24087: AND
24088: IFFALSE 23942
// wait ( 0 0$3 ) ;
24090: LD_INT 105
24092: PPUSH
24093: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24097: LD_INT 35
24099: PPUSH
24100: CALL_OW 67
// until IsInArea ( JMM , PowellHillArea ) ;
24104: LD_EXP 1
24108: PPUSH
24109: LD_INT 9
24111: PPUSH
24112: CALL_OW 308
24116: IFFALSE 24097
// for i in amUnitsForJMM do
24118: LD_ADDR_VAR 0 1
24122: PUSH
24123: LD_EXP 67
24127: PUSH
24128: FOR_IN
24129: IFFALSE 24145
// SetSide ( i , 1 ) ;
24131: LD_VAR 0 1
24135: PPUSH
24136: LD_INT 1
24138: PPUSH
24139: CALL_OW 235
24143: GO 24128
24145: POP
24146: POP
// if IsInArea ( Lisa , PowellHillArea ) then
24147: LD_EXP 4
24151: PPUSH
24152: LD_INT 9
24154: PPUSH
24155: CALL_OW 308
24159: IFFALSE 24173
// Say ( Lisa , D3nW-Lisa-1 ) ;
24161: LD_EXP 4
24165: PPUSH
24166: LD_STRING D3nW-Lisa-1
24168: PPUSH
24169: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
24173: LD_EXP 7
24177: PPUSH
24178: LD_INT 9
24180: PPUSH
24181: CALL_OW 308
24185: IFFALSE 24199
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
24187: LD_EXP 7
24191: PPUSH
24192: LD_STRING D3nW-Cyrus-1
24194: PPUSH
24195: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
24199: LD_EXP 6
24203: PPUSH
24204: LD_INT 9
24206: PPUSH
24207: CALL_OW 308
24211: IFFALSE 24225
// Say ( Bobby , D3nW-Bobby-1 ) ;
24213: LD_EXP 6
24217: PPUSH
24218: LD_STRING D3nW-Bobby-1
24220: PPUSH
24221: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
24225: LD_EXP 13
24229: PPUSH
24230: LD_INT 9
24232: PPUSH
24233: CALL_OW 308
24237: IFFALSE 24251
// Say ( Gary , D3nW-Gary-1 ) ;
24239: LD_EXP 13
24243: PPUSH
24244: LD_STRING D3nW-Gary-1
24246: PPUSH
24247: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
24251: LD_EXP 5
24255: PPUSH
24256: LD_INT 9
24258: PPUSH
24259: CALL_OW 308
24263: IFFALSE 24277
// Say ( Donaldson , D3nW-Don-1 ) ;
24265: LD_EXP 5
24269: PPUSH
24270: LD_STRING D3nW-Don-1
24272: PPUSH
24273: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
24277: LD_EXP 12
24281: PPUSH
24282: LD_INT 9
24284: PPUSH
24285: CALL_OW 308
24289: IFFALSE 24303
// Say ( Cornel , D3nW-Corn-1 ) ;
24291: LD_EXP 12
24295: PPUSH
24296: LD_STRING D3nW-Corn-1
24298: PPUSH
24299: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
24303: LD_EXP 14
24307: PPUSH
24308: LD_INT 9
24310: PPUSH
24311: CALL_OW 308
24315: IFFALSE 24329
// Say ( Frank , D3nW-Frank-1 ) ;
24317: LD_EXP 14
24321: PPUSH
24322: LD_STRING D3nW-Frank-1
24324: PPUSH
24325: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
24329: LD_EXP 1
24333: PPUSH
24334: LD_STRING D3nW-JMM-1
24336: PPUSH
24337: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
24341: LD_EXP 1
24345: PPUSH
24346: LD_STRING D3nW-JMM-1a
24348: PPUSH
24349: CALL_OW 88
// Video ( false ) ;
24353: LD_INT 0
24355: PPUSH
24356: CALL 6884 0 1
// cinematics := false ;
24360: LD_ADDR_EXP 103
24364: PUSH
24365: LD_INT 0
24367: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
24368: LD_STRING M1
24370: PPUSH
24371: CALL_OW 337
// SaveForQuickRestart ;
24375: CALL_OW 22
// startAttacks = 1 ;
24379: LD_ADDR_EXP 72
24383: PUSH
24384: LD_INT 1
24386: ST_TO_ADDR
// powellBuildBase = 1 ;
24387: LD_ADDR_EXP 68
24391: PUSH
24392: LD_INT 1
24394: ST_TO_ADDR
// PowellBuildBaseScript ;
24395: CALL 19460 0 0
// end ;
24399: PPOPN 4
24401: END
// function ResolveQuery ( question , list_of_q ) ; begin
24402: LD_INT 0
24404: PPUSH
// case question of 1 :
24405: LD_VAR 0 1
24409: PUSH
24410: LD_INT 1
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24469
24418: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
24419: LD_EXP 1
24423: PPUSH
24424: LD_STRING D2Mot-JMM-1
24426: PPUSH
24427: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
24431: LD_EXP 17
24435: PPUSH
24436: LD_STRING D2Mot-Pow-1
24438: PPUSH
24439: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
24443: LD_EXP 1
24447: PPUSH
24448: LD_STRING D2Mot-JMM-2
24450: PPUSH
24451: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
24455: LD_EXP 17
24459: PPUSH
24460: LD_STRING D2Mot-Pow-2
24462: PPUSH
24463: CALL_OW 88
// end ; 2 :
24467: GO 24812
24469: LD_INT 2
24471: DOUBLE
24472: EQUAL
24473: IFTRUE 24477
24475: GO 24553
24477: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
24478: LD_EXP 1
24482: PPUSH
24483: LD_STRING D2Rus-JMM-1
24485: PPUSH
24486: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
24490: LD_EXP 17
24494: PPUSH
24495: LD_STRING D2Rus-Pow-1
24497: PPUSH
24498: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
24502: LD_EXP 1
24506: PPUSH
24507: LD_STRING D2Rus-JMM-2
24509: PPUSH
24510: CALL_OW 88
// if not ( 3 in list_of_q ) then
24514: LD_INT 3
24516: PUSH
24517: LD_VAR 0 2
24521: IN
24522: NOT
24523: IFFALSE 24539
// Say ( Powell , D2Rus-Pow-2 ) else
24525: LD_EXP 17
24529: PPUSH
24530: LD_STRING D2Rus-Pow-2
24532: PPUSH
24533: CALL_OW 88
24537: GO 24551
// Say ( Powell , D2Rus-Pow-2a ) ;
24539: LD_EXP 17
24543: PPUSH
24544: LD_STRING D2Rus-Pow-2a
24546: PPUSH
24547: CALL_OW 88
// end ; 3 :
24551: GO 24812
24553: LD_INT 3
24555: DOUBLE
24556: EQUAL
24557: IFTRUE 24561
24559: GO 24646
24561: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
24562: LD_EXP 1
24566: PPUSH
24567: LD_STRING D2Leg-JMM-1
24569: PPUSH
24570: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
24574: LD_EXP 17
24578: PPUSH
24579: LD_STRING D2Leg-Pow-1
24581: PPUSH
24582: CALL_OW 88
// if ( 2 in list_of_q ) then
24586: LD_INT 2
24588: PUSH
24589: LD_VAR 0 2
24593: IN
24594: IFFALSE 24620
// begin Say ( JMM , D2Leg-JMM-2 ) ;
24596: LD_EXP 1
24600: PPUSH
24601: LD_STRING D2Leg-JMM-2
24603: PPUSH
24604: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
24608: LD_EXP 17
24612: PPUSH
24613: LD_STRING D2Leg-Pow-2
24615: PPUSH
24616: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
24620: LD_EXP 1
24624: PPUSH
24625: LD_STRING D2Leg-JMM-3
24627: PPUSH
24628: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
24632: LD_EXP 17
24636: PPUSH
24637: LD_STRING D2Leg-Pow-3
24639: PPUSH
24640: CALL_OW 88
// end ; 4 :
24644: GO 24812
24646: LD_INT 4
24648: DOUBLE
24649: EQUAL
24650: IFTRUE 24654
24652: GO 24729
24654: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
24655: LD_EXP 1
24659: PPUSH
24660: LD_STRING D2Ar-JMM-1
24662: PPUSH
24663: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
24667: LD_EXP 17
24671: PPUSH
24672: LD_STRING D2Ar-Pow-1
24674: PPUSH
24675: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
24679: LD_EXP 1
24683: PPUSH
24684: LD_STRING D2Ar-JMM-2
24686: PPUSH
24687: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
24691: LD_EXP 17
24695: PPUSH
24696: LD_STRING D2Ar-Pow-2
24698: PPUSH
24699: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
24703: LD_EXP 1
24707: PPUSH
24708: LD_STRING D2Ar-JMM-3
24710: PPUSH
24711: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
24715: LD_EXP 17
24719: PPUSH
24720: LD_STRING D2Ar-Pow-3
24722: PPUSH
24723: CALL_OW 88
// end ; 5 :
24727: GO 24812
24729: LD_INT 5
24731: DOUBLE
24732: EQUAL
24733: IFTRUE 24737
24735: GO 24752
24737: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
24738: LD_EXP 1
24742: PPUSH
24743: LD_STRING D2Conf-JMM-1
24745: PPUSH
24746: CALL_OW 88
// end ; 6 :
24750: GO 24812
24752: LD_INT 6
24754: DOUBLE
24755: EQUAL
24756: IFTRUE 24760
24758: GO 24811
24760: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
24761: LD_EXP 1
24765: PPUSH
24766: LD_STRING D2Com-JMM-1
24768: PPUSH
24769: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
24773: LD_EXP 17
24777: PPUSH
24778: LD_STRING D2Com-Pow-1
24780: PPUSH
24781: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24785: LD_EXP 1
24789: PPUSH
24790: LD_STRING D2Com-JMM-2
24792: PPUSH
24793: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24797: LD_EXP 17
24801: PPUSH
24802: LD_STRING D2Com-Pow-2
24804: PPUSH
24805: CALL_OW 88
// end ; end ;
24809: GO 24812
24811: POP
// end ;
24812: LD_VAR 0 3
24816: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24817: LD_INT 22
24819: PUSH
24820: LD_INT 4
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 21
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 3
24839: PUSH
24840: LD_INT 58
24842: PUSH
24843: EMPTY
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: LIST
24854: PPUSH
24855: CALL_OW 69
24859: PUSH
24860: LD_INT 4
24862: EQUAL
24863: PUSH
24864: LD_EXP 72
24868: PUSH
24869: LD_INT 1
24871: EQUAL
24872: AND
24873: IFFALSE 24886
24875: GO 24877
24877: DISABLE
// startAttacks = 0 ;
24878: LD_ADDR_EXP 72
24882: PUSH
24883: LD_INT 0
24885: ST_TO_ADDR
24886: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24887: LD_INT 22
24889: PUSH
24890: LD_INT 4
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 21
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 3
24909: PUSH
24910: LD_INT 58
24912: PUSH
24913: EMPTY
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: PPUSH
24925: CALL_OW 69
24929: PUSH
24930: LD_INT 4
24932: EQUAL
24933: PUSH
24934: LD_INT 22
24936: PUSH
24937: LD_INT 6
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 21
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 24
24956: PUSH
24957: LD_INT 250
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL_OW 69
24973: PUSH
24974: LD_INT 0
24976: EQUAL
24977: AND
24978: PUSH
24979: LD_EXP 72
24983: PUSH
24984: LD_INT 0
24986: EQUAL
24987: AND
24988: PUSH
24989: LD_EXP 69
24993: PUSH
24994: LD_INT 0
24996: EQUAL
24997: AND
24998: IFFALSE 25186
25000: GO 25002
25002: DISABLE
25003: LD_INT 0
25005: PPUSH
// begin powellAttacks = 1 ;
25006: LD_ADDR_EXP 69
25010: PUSH
25011: LD_INT 1
25013: ST_TO_ADDR
// InGameOn ;
25014: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
25018: LD_EXP 17
25022: PPUSH
25023: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
25027: LD_EXP 17
25031: PPUSH
25032: LD_INT 47
25034: PPUSH
25035: LD_INT 60
25037: PPUSH
25038: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
25042: LD_EXP 17
25046: PPUSH
25047: LD_STRING D4-Pow-1
25049: PPUSH
25050: CALL_OW 88
// for i = 1 to amUnitsAttack do
25054: LD_ADDR_VAR 0 1
25058: PUSH
25059: DOUBLE
25060: LD_INT 1
25062: DEC
25063: ST_TO_ADDR
25064: LD_EXP 66
25068: PUSH
25069: FOR_TO
25070: IFFALSE 25115
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
25072: LD_EXP 66
25076: PUSH
25077: LD_VAR 0 1
25081: ARRAY
25082: PPUSH
25083: CALL_OW 258
25087: PUSH
25088: LD_INT 1
25090: EQUAL
25091: IFFALSE 25113
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
25093: LD_EXP 66
25097: PUSH
25098: LD_VAR 0 1
25102: ARRAY
25103: PPUSH
25104: LD_STRING D4-Sol1-1
25106: PPUSH
25107: CALL_OW 88
// break ;
25111: GO 25115
// end ;
25113: GO 25069
25115: POP
25116: POP
// Say ( Powell , D4-Pow-2 ) ;
25117: LD_EXP 17
25121: PPUSH
25122: LD_STRING D4-Pow-2
25124: PPUSH
25125: CALL_OW 88
// InGameOff ;
25129: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
25133: LD_INT 22
25135: PUSH
25136: LD_INT 4
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 21
25145: PUSH
25146: LD_INT 2
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: LD_INT 58
25158: PUSH
25159: EMPTY
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: PPUSH
25171: CALL_OW 69
25175: PPUSH
25176: LD_INT 59
25178: PPUSH
25179: LD_INT 21
25181: PPUSH
25182: CALL_OW 114
// end ;
25186: PPOPN 1
25188: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25189: LD_EXP 103
25193: NOT
25194: PUSH
25195: LD_INT 7
25197: PPUSH
25198: LD_INT 22
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 21
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PPUSH
25222: CALL_OW 70
25226: PUSH
25227: LD_INT 0
25229: GREATER
25230: AND
25231: PUSH
25232: LD_EXP 17
25236: PPUSH
25237: CALL_OW 302
25241: AND
25242: PUSH
25243: LD_EXP 71
25247: PUSH
25248: LD_INT 0
25250: EQUAL
25251: AND
25252: IFFALSE 25376
25254: GO 25256
25256: DISABLE
// begin InGameOn ;
25257: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25261: LD_INT 22
25263: PUSH
25264: LD_INT 1
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 21
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PPUSH
25290: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25294: LD_INT 7
25296: PPUSH
25297: LD_INT 22
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 21
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PPUSH
25321: CALL_OW 70
25325: PPUSH
25326: LD_INT 70
25328: PPUSH
25329: LD_INT 104
25331: PPUSH
25332: CALL_OW 111
// if powellWarm = 0 then
25336: LD_EXP 71
25340: PUSH
25341: LD_INT 0
25343: EQUAL
25344: IFFALSE 25372
// begin Say ( Powell , DBack1-Pow-1 ) ;
25346: LD_EXP 17
25350: PPUSH
25351: LD_STRING DBack1-Pow-1
25353: PPUSH
25354: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25358: LD_ADDR_EXP 71
25362: PUSH
25363: LD_EXP 71
25367: PUSH
25368: LD_INT 1
25370: PLUS
25371: ST_TO_ADDR
// end ; InGameOff ;
25372: CALL_OW 9
// end ;
25376: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25377: LD_EXP 103
25381: NOT
25382: PUSH
25383: LD_INT 7
25385: PPUSH
25386: LD_INT 22
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 21
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PPUSH
25410: CALL_OW 70
25414: PUSH
25415: LD_INT 0
25417: GREATER
25418: AND
25419: PUSH
25420: LD_EXP 17
25424: PPUSH
25425: CALL_OW 302
25429: AND
25430: PUSH
25431: LD_EXP 71
25435: PUSH
25436: LD_INT 1
25438: EQUAL
25439: AND
25440: IFFALSE 25564
25442: GO 25444
25444: DISABLE
// begin InGameOn ;
25445: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25449: LD_INT 22
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 21
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PPUSH
25473: CALL_OW 69
25477: PPUSH
25478: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25482: LD_INT 7
25484: PPUSH
25485: LD_INT 22
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 21
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PPUSH
25509: CALL_OW 70
25513: PPUSH
25514: LD_INT 70
25516: PPUSH
25517: LD_INT 104
25519: PPUSH
25520: CALL_OW 111
// if powellWarm = 1 then
25524: LD_EXP 71
25528: PUSH
25529: LD_INT 1
25531: EQUAL
25532: IFFALSE 25560
// begin Say ( Powell , DBack2-Pow-1 ) ;
25534: LD_EXP 17
25538: PPUSH
25539: LD_STRING DBack2-Pow-1
25541: PPUSH
25542: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25546: LD_ADDR_EXP 71
25550: PUSH
25551: LD_EXP 71
25555: PUSH
25556: LD_INT 1
25558: PLUS
25559: ST_TO_ADDR
// end ; InGameOff ;
25560: CALL_OW 9
// end ;
25564: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25565: LD_EXP 103
25569: NOT
25570: PUSH
25571: LD_INT 7
25573: PPUSH
25574: LD_INT 22
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 21
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 70
25602: PUSH
25603: LD_INT 0
25605: GREATER
25606: AND
25607: PUSH
25608: LD_EXP 17
25612: PPUSH
25613: CALL_OW 302
25617: AND
25618: PUSH
25619: LD_EXP 71
25623: PUSH
25624: LD_INT 2
25626: EQUAL
25627: AND
25628: IFFALSE 25745
25630: GO 25632
25632: DISABLE
// begin InGameOn ;
25633: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25637: LD_INT 22
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 21
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PPUSH
25661: CALL_OW 69
25665: PPUSH
25666: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25670: LD_INT 7
25672: PPUSH
25673: LD_INT 22
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 21
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL_OW 70
25701: PPUSH
25702: LD_INT 70
25704: PPUSH
25705: LD_INT 104
25707: PPUSH
25708: CALL_OW 111
// if powellWarm = 2 then
25712: LD_EXP 71
25716: PUSH
25717: LD_INT 2
25719: EQUAL
25720: IFFALSE 25741
// begin Say ( Powell , DBack3-Pow-1 ) ;
25722: LD_EXP 17
25726: PPUSH
25727: LD_STRING DBack3-Pow-1
25729: PPUSH
25730: CALL_OW 88
// YouLost ( Dismissed ) ;
25734: LD_STRING Dismissed
25736: PPUSH
25737: CALL_OW 104
// end ; InGameOff ;
25741: CALL_OW 9
// end ;
25745: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25746: LD_EXP 103
25750: NOT
25751: PUSH
25752: LD_INT 8
25754: PPUSH
25755: LD_INT 22
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 21
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PPUSH
25779: CALL_OW 70
25783: PUSH
25784: LD_INT 0
25786: GREATER
25787: AND
25788: PUSH
25789: LD_EXP 17
25793: PPUSH
25794: CALL_OW 302
25798: AND
25799: PUSH
25800: LD_EXP 71
25804: PUSH
25805: LD_INT 0
25807: EQUAL
25808: AND
25809: IFFALSE 25933
25811: GO 25813
25813: DISABLE
// begin InGameOn ;
25814: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25818: LD_INT 22
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 21
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PPUSH
25842: CALL_OW 69
25846: PPUSH
25847: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25851: LD_INT 8
25853: PPUSH
25854: LD_INT 22
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 21
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PPUSH
25878: CALL_OW 70
25882: PPUSH
25883: LD_INT 71
25885: PPUSH
25886: LD_INT 63
25888: PPUSH
25889: CALL_OW 111
// if powellWarm = 0 then
25893: LD_EXP 71
25897: PUSH
25898: LD_INT 0
25900: EQUAL
25901: IFFALSE 25929
// begin Say ( Powell , DBack1-Pow-1 ) ;
25903: LD_EXP 17
25907: PPUSH
25908: LD_STRING DBack1-Pow-1
25910: PPUSH
25911: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25915: LD_ADDR_EXP 71
25919: PUSH
25920: LD_EXP 71
25924: PUSH
25925: LD_INT 1
25927: PLUS
25928: ST_TO_ADDR
// end ; InGameOff ;
25929: CALL_OW 9
// end ;
25933: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25934: LD_EXP 103
25938: NOT
25939: PUSH
25940: LD_INT 8
25942: PPUSH
25943: LD_INT 22
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 21
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PPUSH
25967: CALL_OW 70
25971: PUSH
25972: LD_INT 0
25974: GREATER
25975: AND
25976: PUSH
25977: LD_EXP 17
25981: PPUSH
25982: CALL_OW 302
25986: AND
25987: PUSH
25988: LD_EXP 71
25992: PUSH
25993: LD_INT 1
25995: EQUAL
25996: AND
25997: IFFALSE 26121
25999: GO 26001
26001: DISABLE
// begin InGameOn ;
26002: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
26006: LD_INT 22
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 21
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PPUSH
26030: CALL_OW 69
26034: PPUSH
26035: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
26039: LD_INT 8
26041: PPUSH
26042: LD_INT 22
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 21
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PPUSH
26066: CALL_OW 70
26070: PPUSH
26071: LD_INT 71
26073: PPUSH
26074: LD_INT 63
26076: PPUSH
26077: CALL_OW 111
// if powellWarm = 1 then
26081: LD_EXP 71
26085: PUSH
26086: LD_INT 1
26088: EQUAL
26089: IFFALSE 26117
// begin Say ( Powell , DBack2-Pow-1 ) ;
26091: LD_EXP 17
26095: PPUSH
26096: LD_STRING DBack2-Pow-1
26098: PPUSH
26099: CALL_OW 88
// powellWarm = powellWarm + 1 ;
26103: LD_ADDR_EXP 71
26107: PUSH
26108: LD_EXP 71
26112: PUSH
26113: LD_INT 1
26115: PLUS
26116: ST_TO_ADDR
// end ; InGameOff ;
26117: CALL_OW 9
// end ;
26121: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
26122: LD_EXP 103
26126: NOT
26127: PUSH
26128: LD_INT 8
26130: PPUSH
26131: LD_INT 22
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 21
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PPUSH
26155: CALL_OW 70
26159: PUSH
26160: LD_INT 0
26162: GREATER
26163: AND
26164: PUSH
26165: LD_EXP 17
26169: PPUSH
26170: CALL_OW 302
26174: AND
26175: PUSH
26176: LD_EXP 71
26180: PUSH
26181: LD_INT 2
26183: EQUAL
26184: AND
26185: IFFALSE 26302
26187: GO 26189
26189: DISABLE
// begin InGameOn ;
26190: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
26194: LD_INT 22
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 21
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PPUSH
26218: CALL_OW 69
26222: PPUSH
26223: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
26227: LD_INT 8
26229: PPUSH
26230: LD_INT 22
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 21
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PPUSH
26254: CALL_OW 70
26258: PPUSH
26259: LD_INT 71
26261: PPUSH
26262: LD_INT 63
26264: PPUSH
26265: CALL_OW 111
// if powellWarm = 2 then
26269: LD_EXP 71
26273: PUSH
26274: LD_INT 2
26276: EQUAL
26277: IFFALSE 26298
// begin Say ( Powell , DBack3-Pow-1 ) ;
26279: LD_EXP 17
26283: PPUSH
26284: LD_STRING DBack3-Pow-1
26286: PPUSH
26287: CALL_OW 88
// YouLost ( Dismissed ) ;
26291: LD_STRING Dismissed
26293: PPUSH
26294: CALL_OW 104
// end ; InGameOff ;
26298: CALL_OW 9
// end ;
26302: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
26303: LD_EXP 69
26307: PUSH
26308: LD_INT 1
26310: EQUAL
26311: IFFALSE 26360
26313: GO 26315
26315: DISABLE
26316: LD_INT 0
26318: PPUSH
// begin enable ;
26319: ENABLE
// for i = 1 to amUnitsAttack do
26320: LD_ADDR_VAR 0 1
26324: PUSH
26325: DOUBLE
26326: LD_INT 1
26328: DEC
26329: ST_TO_ADDR
26330: LD_EXP 66
26334: PUSH
26335: FOR_TO
26336: IFFALSE 26358
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
26338: LD_INT 8
26340: PPUSH
26341: LD_EXP 66
26345: PUSH
26346: LD_VAR 0 1
26350: ARRAY
26351: PPUSH
26352: CALL_OW 471
26356: GO 26335
26358: POP
26359: POP
// end ;
26360: PPOPN 1
26362: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
26363: LD_INT 22
26365: PUSH
26366: LD_INT 4
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 21
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 3
26385: PUSH
26386: LD_INT 58
26388: PUSH
26389: EMPTY
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: PUSH
26406: LD_INT 0
26408: EQUAL
26409: PUSH
26410: LD_EXP 69
26414: PUSH
26415: LD_INT 1
26417: EQUAL
26418: AND
26419: IFFALSE 26590
26421: GO 26423
26423: DISABLE
// begin powellAttacks = 2 ;
26424: LD_ADDR_EXP 69
26428: PUSH
26429: LD_INT 2
26431: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26432: LD_INT 85
26434: PPUSH
26435: LD_INT 3
26437: PPUSH
26438: LD_INT 3
26440: PPUSH
26441: LD_INT 1
26443: PPUSH
26444: LD_INT 5
26446: PUSH
26447: LD_INT 7
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PPUSH
26457: LD_INT 2
26459: PPUSH
26460: CALL_OW 12
26464: ARRAY
26465: PPUSH
26466: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26470: LD_INT 85
26472: PPUSH
26473: LD_INT 3
26475: PPUSH
26476: LD_INT 3
26478: PPUSH
26479: LD_INT 1
26481: PPUSH
26482: LD_INT 5
26484: PUSH
26485: LD_INT 7
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: PPUSH
26495: LD_INT 2
26497: PPUSH
26498: CALL_OW 12
26502: ARRAY
26503: PPUSH
26504: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26508: LD_INT 85
26510: PPUSH
26511: LD_INT 3
26513: PPUSH
26514: LD_INT 3
26516: PPUSH
26517: LD_INT 1
26519: PPUSH
26520: LD_INT 5
26522: PUSH
26523: LD_INT 7
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PPUSH
26533: LD_INT 2
26535: PPUSH
26536: CALL_OW 12
26540: ARRAY
26541: PPUSH
26542: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
26546: LD_INT 85
26548: PPUSH
26549: LD_INT 5
26551: PPUSH
26552: LD_INT 3
26554: PPUSH
26555: LD_INT 1
26557: PPUSH
26558: LD_INT 6
26560: PPUSH
26561: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
26565: LD_ADDR_EXP 73
26569: PUSH
26570: LD_INT 85
26572: PPUSH
26573: LD_INT 3
26575: PPUSH
26576: LD_INT 3
26578: PPUSH
26579: LD_INT 1
26581: PPUSH
26582: LD_INT 3
26584: PPUSH
26585: CALL_OW 185
26589: ST_TO_ADDR
// end ;
26590: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
26591: LD_INT 22
26593: PUSH
26594: LD_INT 4
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 21
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 3
26613: PUSH
26614: LD_INT 58
26616: PUSH
26617: EMPTY
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: LIST
26628: PPUSH
26629: CALL_OW 69
26633: PUSH
26634: LD_INT 5
26636: GREATEREQUAL
26637: PUSH
26638: LD_INT 22
26640: PUSH
26641: LD_INT 6
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 21
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PPUSH
26662: CALL_OW 69
26666: PUSH
26667: LD_INT 0
26669: EQUAL
26670: AND
26671: PUSH
26672: LD_EXP 69
26676: PUSH
26677: LD_INT 2
26679: EQUAL
26680: AND
26681: IFFALSE 27624
26683: GO 26685
26685: DISABLE
26686: LD_INT 0
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
// begin startAttacks = 0 ;
26692: LD_ADDR_EXP 72
26696: PUSH
26697: LD_INT 0
26699: ST_TO_ADDR
// powellAttacks = 3 ;
26700: LD_ADDR_EXP 69
26704: PUSH
26705: LD_INT 3
26707: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26708: LD_ADDR_VAR 0 1
26712: PUSH
26713: DOUBLE
26714: LD_INT 1
26716: DEC
26717: ST_TO_ADDR
26718: LD_EXP 66
26722: PUSH
26723: FOR_TO
26724: IFFALSE 26746
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26726: LD_INT 8
26728: PPUSH
26729: LD_EXP 66
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: PPUSH
26740: CALL_OW 472
26744: GO 26723
26746: POP
26747: POP
// wait ( 0 0$5 ) ;
26748: LD_INT 175
26750: PPUSH
26751: CALL_OW 67
// Video ( true ) ;
26755: LD_INT 1
26757: PPUSH
26758: CALL 6884 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26762: LD_INT 22
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PPUSH
26772: CALL_OW 69
26776: PPUSH
26777: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26781: LD_EXP 17
26785: PPUSH
26786: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26790: LD_EXP 17
26794: PPUSH
26795: LD_INT 45
26797: PPUSH
26798: LD_INT 64
26800: PPUSH
26801: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26805: LD_EXP 17
26809: PPUSH
26810: LD_INT 46
26812: PPUSH
26813: LD_INT 66
26815: PPUSH
26816: CALL_OW 178
// for i = 5 to 8 do
26820: LD_ADDR_VAR 0 1
26824: PUSH
26825: DOUBLE
26826: LD_INT 5
26828: DEC
26829: ST_TO_ADDR
26830: LD_INT 8
26832: PUSH
26833: FOR_TO
26834: IFFALSE 26980
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26836: LD_EXP 66
26840: PUSH
26841: LD_VAR 0 1
26845: ARRAY
26846: PPUSH
26847: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26851: LD_EXP 66
26855: PUSH
26856: LD_VAR 0 1
26860: ARRAY
26861: PPUSH
26862: CALL_OW 121
// wait ( 0 0$1 ) ;
26866: LD_INT 35
26868: PPUSH
26869: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26873: LD_EXP 66
26877: PUSH
26878: LD_VAR 0 1
26882: ARRAY
26883: PPUSH
26884: LD_INT 92
26886: PPUSH
26887: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26891: LD_EXP 66
26895: PUSH
26896: LD_VAR 0 1
26900: ARRAY
26901: PPUSH
26902: LD_INT 1
26904: PPUSH
26905: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26909: LD_EXP 66
26913: PUSH
26914: LD_VAR 0 1
26918: ARRAY
26919: PPUSH
26920: CALL_OW 182
// wait ( 0 0$1 ) ;
26924: LD_INT 35
26926: PPUSH
26927: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26931: LD_EXP 66
26935: PUSH
26936: LD_VAR 0 1
26940: ARRAY
26941: PPUSH
26942: LD_INT 43
26944: PUSH
26945: LD_VAR 0 1
26949: PLUS
26950: PPUSH
26951: LD_INT 66
26953: PPUSH
26954: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26958: LD_EXP 66
26962: PUSH
26963: LD_VAR 0 1
26967: ARRAY
26968: PPUSH
26969: LD_EXP 17
26973: PPUSH
26974: CALL_OW 179
// end ;
26978: GO 26833
26980: POP
26981: POP
// wait ( 0 0$10 ) ;
26982: LD_INT 350
26984: PPUSH
26985: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26989: LD_ADDR_VAR 0 3
26993: PUSH
26994: LD_INT 22
26996: PUSH
26997: LD_INT 4
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 21
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 56
27016: PUSH
27017: EMPTY
27018: LIST
27019: PUSH
27020: LD_INT 3
27022: PUSH
27023: LD_INT 60
27025: PUSH
27026: EMPTY
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 69
27043: PUSH
27044: LD_EXP 17
27048: PUSH
27049: EMPTY
27050: LIST
27051: DIFF
27052: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
27053: LD_VAR 0 3
27057: PPUSH
27058: LD_INT 92
27060: PPUSH
27061: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
27065: LD_VAR 0 3
27069: PPUSH
27070: LD_INT 1
27072: PPUSH
27073: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
27077: LD_EXP 17
27081: PPUSH
27082: LD_STRING D5-Pow-1
27084: PPUSH
27085: CALL_OW 88
// for i = 1 to amUnitsAttack do
27089: LD_ADDR_VAR 0 1
27093: PUSH
27094: DOUBLE
27095: LD_INT 1
27097: DEC
27098: ST_TO_ADDR
27099: LD_EXP 66
27103: PUSH
27104: FOR_TO
27105: IFFALSE 27150
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
27107: LD_EXP 66
27111: PUSH
27112: LD_VAR 0 1
27116: ARRAY
27117: PPUSH
27118: CALL_OW 258
27122: PUSH
27123: LD_INT 1
27125: EQUAL
27126: IFFALSE 27148
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
27128: LD_EXP 66
27132: PUSH
27133: LD_VAR 0 1
27137: ARRAY
27138: PPUSH
27139: LD_STRING D5-Sol2-1
27141: PPUSH
27142: CALL_OW 88
// break ;
27146: GO 27150
// end ;
27148: GO 27104
27150: POP
27151: POP
// Say ( Powell , D5-Pow-2 ) ;
27152: LD_EXP 17
27156: PPUSH
27157: LD_STRING D5-Pow-2
27159: PPUSH
27160: CALL_OW 88
// for i = 1 to amUnitsAttack do
27164: LD_ADDR_VAR 0 1
27168: PUSH
27169: DOUBLE
27170: LD_INT 1
27172: DEC
27173: ST_TO_ADDR
27174: LD_EXP 66
27178: PUSH
27179: FOR_TO
27180: IFFALSE 27225
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
27182: LD_EXP 66
27186: PUSH
27187: LD_VAR 0 1
27191: ARRAY
27192: PPUSH
27193: CALL_OW 258
27197: PUSH
27198: LD_INT 1
27200: EQUAL
27201: IFFALSE 27223
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
27203: LD_EXP 66
27207: PUSH
27208: LD_VAR 0 1
27212: ARRAY
27213: PPUSH
27214: LD_STRING D5-Sol2-2
27216: PPUSH
27217: CALL_OW 88
// break ;
27221: GO 27225
// end ;
27223: GO 27179
27225: POP
27226: POP
// Say ( Powell , D5-Pow-3 ) ;
27227: LD_EXP 17
27231: PPUSH
27232: LD_STRING D5-Pow-3
27234: PPUSH
27235: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
27239: LD_INT 22
27241: PUSH
27242: LD_INT 4
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 21
27251: PUSH
27252: LD_INT 2
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: LD_INT 58
27264: PUSH
27265: EMPTY
27266: LIST
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: LIST
27276: PPUSH
27277: CALL_OW 69
27281: PPUSH
27282: LD_INT 59
27284: PPUSH
27285: LD_INT 21
27287: PPUSH
27288: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
27292: LD_EXP 66
27296: PPUSH
27297: LD_INT 59
27299: PPUSH
27300: LD_INT 21
27302: PPUSH
27303: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
27307: LD_INT 61
27309: PPUSH
27310: LD_INT 35
27312: PPUSH
27313: CALL_OW 84
// wait ( 0 0$15 ) ;
27317: LD_INT 525
27319: PPUSH
27320: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
27324: LD_EXP 17
27328: PPUSH
27329: LD_STRING D5a-Pow-1
27331: PPUSH
27332: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
27336: LD_EXP 17
27340: PPUSH
27341: LD_STRING D5a-Pow-1a
27343: PPUSH
27344: CALL_OW 88
// wait ( 0 0$2 ) ;
27348: LD_INT 70
27350: PPUSH
27351: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
27355: LD_EXP 17
27359: PPUSH
27360: LD_STRING D5a-Pow-1b
27362: PPUSH
27363: CALL_OW 88
// wait ( 0 0$3 ) ;
27367: LD_INT 105
27369: PPUSH
27370: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
27374: LD_EXP 17
27378: PPUSH
27379: LD_STRING D5a-Pow-1c
27381: PPUSH
27382: CALL_OW 88
// wait ( 0 0$1 ) ;
27386: LD_INT 35
27388: PPUSH
27389: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
27393: LD_EXP 17
27397: PPUSH
27398: LD_STRING D5a-Pow-1d
27400: PPUSH
27401: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
27405: LD_INT 35
27407: PPUSH
27408: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
27412: LD_INT 22
27414: PUSH
27415: LD_INT 4
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 21
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 3
27434: PUSH
27435: LD_INT 58
27437: PUSH
27438: EMPTY
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: PPUSH
27450: CALL_OW 69
27454: PPUSH
27455: LD_INT 59
27457: PPUSH
27458: LD_INT 21
27460: PPUSH
27461: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
27465: LD_EXP 66
27469: PPUSH
27470: LD_INT 59
27472: PPUSH
27473: LD_INT 21
27475: PPUSH
27476: CALL_OW 114
// until amUnitsAttack = [ ] ;
27480: LD_EXP 66
27484: PUSH
27485: EMPTY
27486: EQUAL
27487: IFFALSE 27405
// CenterNowOnUnits ( Powell ) ;
27489: LD_EXP 17
27493: PPUSH
27494: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_INT 22
27505: PUSH
27506: LD_INT 4
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 21
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PPUSH
27527: CALL_OW 69
27531: PUSH
27532: LD_EXP 17
27536: PUSH
27537: EMPTY
27538: LIST
27539: DIFF
27540: ST_TO_ADDR
// for i in powellPeople do
27541: LD_ADDR_VAR 0 1
27545: PUSH
27546: LD_VAR 0 3
27550: PUSH
27551: FOR_IN
27552: IFFALSE 27581
// if GetSex ( i ) = sex_male then
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL_OW 258
27563: PUSH
27564: LD_INT 1
27566: EQUAL
27567: IFFALSE 27579
// sold = i ;
27569: LD_ADDR_VAR 0 2
27573: PUSH
27574: LD_VAR 0 1
27578: ST_TO_ADDR
27579: GO 27551
27581: POP
27582: POP
// Say ( sold , D6-Sol3-1 ) ;
27583: LD_VAR 0 2
27587: PPUSH
27588: LD_STRING D6-Sol3-1
27590: PPUSH
27591: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
27595: LD_EXP 17
27599: PPUSH
27600: LD_STRING D6-Pow-1
27602: PPUSH
27603: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
27607: LD_INT 139
27609: PUSH
27610: LD_INT 138
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PPUSH
27617: LD_INT 12
27619: PPUSH
27620: CALL_OW 113
// end ;
27624: PPOPN 4
27626: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
27627: LD_EXP 69
27631: PUSH
27632: LD_INT 3
27634: EQUAL
27635: PUSH
27636: LD_INT 12
27638: PPUSH
27639: LD_INT 22
27641: PUSH
27642: LD_INT 8
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 21
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PPUSH
27663: CALL_OW 70
27667: PUSH
27668: LD_INT 2
27670: EQUAL
27671: AND
27672: IFFALSE 27833
27674: GO 27676
27676: DISABLE
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27681: LD_INT 8
27683: PPUSH
27684: LD_INT 1
27686: PPUSH
27687: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27691: LD_INT 4
27693: PPUSH
27694: LD_INT 8
27696: PPUSH
27697: LD_INT 1
27699: PPUSH
27700: LD_INT 1
27702: PPUSH
27703: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27707: LD_ADDR_VAR 0 1
27711: PUSH
27712: LD_INT 92
27714: PPUSH
27715: CALL_OW 313
27719: PUSH
27720: FOR_IN
27721: IFFALSE 27752
// if GetSex ( i ) = sex_male then
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL_OW 258
27732: PUSH
27733: LD_INT 1
27735: EQUAL
27736: IFFALSE 27750
// begin tmp = i ;
27738: LD_ADDR_VAR 0 2
27742: PUSH
27743: LD_VAR 0 1
27747: ST_TO_ADDR
// break ;
27748: GO 27752
// end ;
27750: GO 27720
27752: POP
27753: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27754: LD_INT 92
27756: PPUSH
27757: CALL_OW 313
27761: PPUSH
27762: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27766: LD_VAR 0 2
27770: PPUSH
27771: LD_STRING D6-Sol3-2
27773: PPUSH
27774: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27778: LD_INT 139
27780: PUSH
27781: LD_INT 138
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PPUSH
27788: LD_INT 85
27790: PPUSH
27791: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27795: LD_INT 4
27797: PPUSH
27798: LD_INT 8
27800: PPUSH
27801: LD_INT 2
27803: PPUSH
27804: LD_INT 1
27806: PPUSH
27807: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27811: LD_INT 8
27813: PPUSH
27814: LD_INT 8
27816: PPUSH
27817: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27821: LD_EXP 17
27825: PPUSH
27826: LD_STRING D6-Pow-2
27828: PPUSH
27829: CALL_OW 88
// end ;
27833: PPOPN 2
27835: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27836: LD_INT 85
27838: PPUSH
27839: CALL_OW 301
27843: IFFALSE 28315
27845: GO 27847
27847: DISABLE
27848: LD_INT 0
27850: PPUSH
27851: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27852: LD_INT 22
27854: PUSH
27855: LD_INT 8
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 21
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 33
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 34
27884: PUSH
27885: LD_INT 29
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 50
27894: PUSH
27895: EMPTY
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: PPUSH
27905: CALL_OW 69
27909: PUSH
27910: LD_INT 1
27912: EQUAL
27913: IFFALSE 28024
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27915: LD_INT 22
27917: PUSH
27918: LD_INT 8
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 21
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 33
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 34
27947: PUSH
27948: LD_INT 29
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 50
27957: PUSH
27958: EMPTY
27959: LIST
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: PPUSH
27968: CALL_OW 69
27972: PPUSH
27973: LD_INT 34
27975: PPUSH
27976: LD_INT 22
27978: PUSH
27979: LD_INT 4
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 21
27988: PUSH
27989: LD_INT 3
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 30
27998: PUSH
27999: LD_INT 32
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: LIST
28010: PPUSH
28011: CALL_OW 70
28015: PUSH
28016: LD_INT 1
28018: ARRAY
28019: PPUSH
28020: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
28024: LD_ADDR_VAR 0 1
28028: PUSH
28029: LD_INT 22
28031: PUSH
28032: LD_INT 4
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 21
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 56
28051: PUSH
28052: EMPTY
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: PPUSH
28060: CALL_OW 69
28064: PUSH
28065: LD_EXP 17
28069: PUSH
28070: EMPTY
28071: LIST
28072: DIFF
28073: PUSH
28074: FOR_IN
28075: IFFALSE 28106
// if GetSex ( i ) = sex_male then
28077: LD_VAR 0 1
28081: PPUSH
28082: CALL_OW 258
28086: PUSH
28087: LD_INT 1
28089: EQUAL
28090: IFFALSE 28104
// begin tmp = i ;
28092: LD_ADDR_VAR 0 2
28096: PUSH
28097: LD_VAR 0 1
28101: ST_TO_ADDR
// break ;
28102: GO 28106
// end ;
28104: GO 28074
28106: POP
28107: POP
// Say ( Powell , D6a-Pow-1 ) ;
28108: LD_EXP 17
28112: PPUSH
28113: LD_STRING D6a-Pow-1
28115: PPUSH
28116: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
28120: LD_VAR 0 2
28124: PPUSH
28125: LD_STRING D6a-Sol3-1
28127: PPUSH
28128: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
28132: LD_EXP 17
28136: PPUSH
28137: LD_VAR 0 2
28141: PPUSH
28142: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
28146: LD_EXP 17
28150: PPUSH
28151: LD_STRING D6a-Pow-2
28153: PPUSH
28154: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
28158: LD_VAR 0 2
28162: PPUSH
28163: LD_STRING D6a-Sol3-2
28165: PPUSH
28166: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
28170: LD_EXP 17
28174: PPUSH
28175: LD_STRING D6a-Pow-3
28177: PPUSH
28178: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
28182: LD_EXP 17
28186: PPUSH
28187: LD_EXP 73
28191: PPUSH
28192: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
28196: LD_INT 35
28198: PPUSH
28199: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
28203: LD_EXP 17
28207: PPUSH
28208: LD_EXP 73
28212: PPUSH
28213: CALL_OW 120
// until IsInUnit ( Powell ) ;
28217: LD_EXP 17
28221: PPUSH
28222: CALL_OW 310
28226: IFFALSE 28196
// wait ( 0 0$1 ) ;
28228: LD_INT 35
28230: PPUSH
28231: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
28235: LD_EXP 73
28239: PPUSH
28240: LD_INT 77
28242: PPUSH
28243: LD_INT 64
28245: PPUSH
28246: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
28250: LD_EXP 73
28254: PPUSH
28255: LD_INT 91
28257: PPUSH
28258: LD_INT 61
28260: PPUSH
28261: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
28265: LD_EXP 73
28269: PPUSH
28270: LD_INT 74
28272: PPUSH
28273: LD_INT 25
28275: PPUSH
28276: CALL_OW 171
// centerPowell = 1 ;
28280: LD_ADDR_EXP 74
28284: PUSH
28285: LD_INT 1
28287: ST_TO_ADDR
// wait ( 0 0$15 ) ;
28288: LD_INT 525
28290: PPUSH
28291: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
28295: LD_EXP 17
28299: PPUSH
28300: LD_STRING D6b-Pow-1
28302: PPUSH
28303: CALL_OW 88
// game_speed := 4 ;
28307: LD_ADDR_OWVAR 65
28311: PUSH
28312: LD_INT 4
28314: ST_TO_ADDR
// end ;
28315: PPOPN 2
28317: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
28318: LD_EXP 73
28322: PPUSH
28323: LD_INT 13
28325: PPUSH
28326: CALL_OW 308
28330: PUSH
28331: LD_EXP 69
28335: PUSH
28336: LD_INT 3
28338: EQUAL
28339: AND
28340: IFFALSE 28482
28342: GO 28344
28344: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
28345: LD_EXP 73
28349: PPUSH
28350: LD_INT 250
28352: PPUSH
28353: CALL_OW 234
// DialogueOn ;
28357: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
28361: LD_EXP 17
28365: PPUSH
28366: LD_STRING D6b-Pow-1a
28368: PPUSH
28369: CALL_OW 88
// DialogueOff ;
28373: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
28377: LD_EXP 17
28381: PPUSH
28382: LD_INT 22
28384: PUSH
28385: LD_INT 8
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 34
28394: PUSH
28395: LD_INT 29
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 50
28404: PUSH
28405: EMPTY
28406: LIST
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: PPUSH
28413: CALL_OW 69
28417: PUSH
28418: LD_INT 1
28420: ARRAY
28421: PPUSH
28422: CALL_OW 120
// wait ( 0 0$1 ) ;
28426: LD_INT 35
28428: PPUSH
28429: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
28433: LD_EXP 17
28437: PPUSH
28438: LD_INT 22
28440: PUSH
28441: LD_INT 8
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 34
28450: PUSH
28451: LD_INT 29
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 50
28460: PUSH
28461: EMPTY
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: PPUSH
28469: CALL_OW 69
28473: PUSH
28474: LD_INT 1
28476: ARRAY
28477: PPUSH
28478: CALL_OW 120
// end ;
28482: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
28483: LD_INT 22
28485: PUSH
28486: LD_INT 4
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 34
28495: PUSH
28496: LD_INT 29
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PPUSH
28507: CALL_OW 69
28511: IFFALSE 28951
28513: GO 28515
28515: DISABLE
// begin game_speed := 4 ;
28516: LD_ADDR_OWVAR 65
28520: PUSH
28521: LD_INT 4
28523: ST_TO_ADDR
// powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
28524: LD_ADDR_EXP 75
28528: PUSH
28529: LD_INT 22
28531: PUSH
28532: LD_INT 4
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 34
28541: PUSH
28542: LD_INT 29
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PPUSH
28553: CALL_OW 69
28557: PUSH
28558: LD_INT 1
28560: ARRAY
28561: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
28562: LD_INT 8
28564: PPUSH
28565: LD_INT 4
28567: PPUSH
28568: LD_INT 1
28570: PPUSH
28571: LD_INT 1
28573: PPUSH
28574: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
28578: LD_EXP 75
28582: PPUSH
28583: LD_INT 80
28585: PPUSH
28586: LD_INT 19
28588: PPUSH
28589: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28593: LD_EXP 75
28597: PPUSH
28598: LD_INT 74
28600: PPUSH
28601: LD_INT 15
28603: PPUSH
28604: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28608: LD_EXP 75
28612: PPUSH
28613: LD_INT 72
28615: PPUSH
28616: LD_INT 19
28618: PPUSH
28619: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28623: LD_EXP 75
28627: PPUSH
28628: LD_INT 78
28630: PPUSH
28631: LD_INT 24
28633: PPUSH
28634: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28638: LD_EXP 75
28642: PPUSH
28643: LD_INT 77
28645: PPUSH
28646: LD_INT 20
28648: PPUSH
28649: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28653: LD_EXP 75
28657: PPUSH
28658: LD_INT 74
28660: PPUSH
28661: LD_INT 15
28663: PPUSH
28664: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28668: LD_EXP 75
28672: PPUSH
28673: LD_INT 72
28675: PPUSH
28676: LD_INT 19
28678: PPUSH
28679: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28683: LD_EXP 75
28687: PPUSH
28688: LD_INT 78
28690: PPUSH
28691: LD_INT 24
28693: PPUSH
28694: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28698: LD_EXP 75
28702: PPUSH
28703: LD_INT 77
28705: PPUSH
28706: LD_INT 20
28708: PPUSH
28709: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28713: LD_EXP 75
28717: PPUSH
28718: LD_INT 78
28720: PPUSH
28721: LD_INT 15
28723: PPUSH
28724: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28728: LD_EXP 17
28732: PPUSH
28733: LD_STRING D6b-Pow-1b
28735: PPUSH
28736: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28740: LD_INT 22
28742: PUSH
28743: LD_INT 8
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 21
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 25
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 26
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: PPUSH
28786: CALL_OW 69
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: PPUSH
28795: LD_STRING D6b-ArSol1-1
28797: PPUSH
28798: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28802: LD_INT 22
28804: PUSH
28805: LD_INT 8
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 21
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 25
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 26
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: PPUSH
28848: CALL_OW 69
28852: PUSH
28853: LD_INT 2
28855: ARRAY
28856: PPUSH
28857: LD_STRING D6b-ArSol2-1
28859: PPUSH
28860: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28864: LD_EXP 17
28868: PPUSH
28869: LD_STRING D6b-Pow-2
28871: PPUSH
28872: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28876: LD_INT 35
28878: PPUSH
28879: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 3 ;
28883: LD_EXP 75
28887: PPUSH
28888: LD_INT 78
28890: PPUSH
28891: LD_INT 15
28893: PPUSH
28894: CALL_OW 297
28898: PUSH
28899: LD_INT 3
28901: LESS
28902: IFFALSE 28876
// wait ( 0 0$1 ) ;
28904: LD_INT 35
28906: PPUSH
28907: CALL_OW 67
// DialogueOn ;
28911: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28915: LD_EXP 17
28919: PPUSH
28920: LD_STRING D6b-Pow-2a
28922: PPUSH
28923: CALL_OW 88
// DialogueOff ;
28927: CALL_OW 7
// centerPowell = 0 ;
28931: LD_ADDR_EXP 74
28935: PUSH
28936: LD_INT 0
28938: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28939: LD_EXP 75
28943: PPUSH
28944: LD_INT 105
28946: PPUSH
28947: CALL_OW 115
// end ;
28951: END
// every 0 0$1 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28952: LD_INT 105
28954: PPUSH
28955: CALL_OW 301
28959: PUSH
28960: LD_EXP 69
28964: PUSH
28965: LD_INT 3
28967: EQUAL
28968: AND
28969: IFFALSE 29810
28971: GO 28973
28973: DISABLE
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
// begin wait ( 0 0$2 ) ;
28980: LD_INT 70
28982: PPUSH
28983: CALL_OW 67
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28987: LD_ADDR_VAR 0 2
28991: PUSH
28992: LD_INT 22
28994: PUSH
28995: LD_INT 4
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 21
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 26
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: LIST
29026: PPUSH
29027: CALL_OW 69
29031: PUSH
29032: LD_EXP 1
29036: PUSH
29037: LD_EXP 3
29041: PUSH
29042: LD_EXP 21
29046: PUSH
29047: LD_EXP 22
29051: PUSH
29052: LD_EXP 23
29056: PUSH
29057: LD_EXP 4
29061: PUSH
29062: LD_EXP 5
29066: PUSH
29067: LD_EXP 6
29071: PUSH
29072: LD_EXP 7
29076: PUSH
29077: LD_EXP 8
29081: PUSH
29082: LD_EXP 9
29086: PUSH
29087: LD_EXP 10
29091: PUSH
29092: LD_EXP 11
29096: PUSH
29097: LD_EXP 12
29101: PUSH
29102: LD_EXP 13
29106: PUSH
29107: LD_EXP 14
29111: PUSH
29112: LD_EXP 15
29116: PUSH
29117: LD_EXP 17
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: DIFF
29142: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
29143: LD_INT 49
29145: PPUSH
29146: LD_INT 66
29148: PPUSH
29149: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
29153: LD_VAR 0 2
29157: PUSH
29158: LD_INT 1
29160: ARRAY
29161: PPUSH
29162: LD_STRING D6c-Sol3-1
29164: PPUSH
29165: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
29169: LD_EXP 1
29173: PPUSH
29174: LD_STRING D6c-JMM-1
29176: PPUSH
29177: CALL_OW 88
// if IsOk ( Cyrus ) then
29181: LD_EXP 7
29185: PPUSH
29186: CALL_OW 302
29190: IFFALSE 29204
// Say ( Cyrus , D6c-Cyrus-1 ) ;
29192: LD_EXP 7
29196: PPUSH
29197: LD_STRING D6c-Cyrus-1
29199: PPUSH
29200: CALL_OW 88
// if IsOk ( Bobby ) then
29204: LD_EXP 6
29208: PPUSH
29209: CALL_OW 302
29213: IFFALSE 29227
// Say ( Bobby , D6c-Bobby-1 ) ;
29215: LD_EXP 6
29219: PPUSH
29220: LD_STRING D6c-Bobby-1
29222: PPUSH
29223: CALL_OW 88
// if IsOk ( Cornel ) then
29227: LD_EXP 12
29231: PPUSH
29232: CALL_OW 302
29236: IFFALSE 29250
// Say ( Cornel , D6c-Corn-1 ) ;
29238: LD_EXP 12
29242: PPUSH
29243: LD_STRING D6c-Corn-1
29245: PPUSH
29246: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
29250: LD_VAR 0 2
29254: PUSH
29255: LD_INT 2
29257: ARRAY
29258: PPUSH
29259: LD_STRING D6c-Sol1-1
29261: PPUSH
29262: CALL_OW 88
// if IsOk ( Lisa ) then
29266: LD_EXP 4
29270: PPUSH
29271: CALL_OW 302
29275: IFFALSE 29289
// Say ( Lisa , D6c-Lisa-1 ) ;
29277: LD_EXP 4
29281: PPUSH
29282: LD_STRING D6c-Lisa-1
29284: PPUSH
29285: CALL_OW 88
// if IsOk ( Gary ) then
29289: LD_EXP 13
29293: PPUSH
29294: CALL_OW 302
29298: IFFALSE 29312
// Say ( Gary , D6c-Gary-1 ) ;
29300: LD_EXP 13
29304: PPUSH
29305: LD_STRING D6c-Gary-1
29307: PPUSH
29308: CALL_OW 88
// if IsOK ( Donaldson ) then
29312: LD_EXP 5
29316: PPUSH
29317: CALL_OW 302
29321: IFFALSE 29335
// Say ( Donaldson , D6c-Don-1 ) ;
29323: LD_EXP 5
29327: PPUSH
29328: LD_STRING D6c-Don-1
29330: PPUSH
29331: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
29335: LD_VAR 0 2
29339: PUSH
29340: LD_INT 3
29342: ARRAY
29343: PPUSH
29344: LD_STRING D6c-Sol2-1
29346: PPUSH
29347: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
29351: LD_INT 22
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 21
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PPUSH
29375: CALL_OW 69
29379: PPUSH
29380: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
29384: LD_INT 22
29386: PUSH
29387: LD_INT 4
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 21
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PPUSH
29408: CALL_OW 69
29412: PPUSH
29413: CALL_OW 122
// wait ( 0 0$1 ) ;
29417: LD_INT 35
29419: PPUSH
29420: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_INT 22
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 21
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PPUSH
29453: CALL_OW 69
29457: PUSH
29458: LD_EXP 1
29462: PUSH
29463: EMPTY
29464: LIST
29465: DIFF
29466: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
29467: LD_ADDR_VAR 0 4
29471: PUSH
29472: LD_INT 22
29474: PUSH
29475: LD_INT 4
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 21
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PPUSH
29496: CALL_OW 69
29500: ST_TO_ADDR
// for i := 1 to tmp2 do
29501: LD_ADDR_VAR 0 1
29505: PUSH
29506: DOUBLE
29507: LD_INT 1
29509: DEC
29510: ST_TO_ADDR
29511: LD_VAR 0 4
29515: PUSH
29516: FOR_TO
29517: IFFALSE 29568
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
29519: LD_VAR 0 4
29523: PUSH
29524: LD_VAR 0 1
29528: ARRAY
29529: PPUSH
29530: LD_INT 43
29532: PUSH
29533: LD_VAR 0 1
29537: PLUS
29538: PPUSH
29539: LD_INT 64
29541: PPUSH
29542: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
29546: LD_VAR 0 4
29550: PUSH
29551: LD_VAR 0 1
29555: ARRAY
29556: PPUSH
29557: LD_EXP 1
29561: PPUSH
29562: CALL_OW 179
// end ;
29566: GO 29516
29568: POP
29569: POP
// for i := 1 to tmp1 do
29570: LD_ADDR_VAR 0 1
29574: PUSH
29575: DOUBLE
29576: LD_INT 1
29578: DEC
29579: ST_TO_ADDR
29580: LD_VAR 0 3
29584: PUSH
29585: FOR_TO
29586: IFFALSE 29637
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
29588: LD_VAR 0 3
29592: PUSH
29593: LD_VAR 0 1
29597: ARRAY
29598: PPUSH
29599: LD_INT 43
29601: PUSH
29602: LD_VAR 0 1
29606: PLUS
29607: PPUSH
29608: LD_INT 65
29610: PPUSH
29611: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
29615: LD_VAR 0 3
29619: PUSH
29620: LD_VAR 0 1
29624: ARRAY
29625: PPUSH
29626: LD_EXP 1
29630: PPUSH
29631: CALL_OW 179
// end ;
29635: GO 29585
29637: POP
29638: POP
// repeat wait ( 0 0$1 ) ;
29639: LD_INT 35
29641: PPUSH
29642: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
29646: LD_EXP 1
29650: PPUSH
29651: LD_INT 48
29653: PPUSH
29654: LD_INT 68
29656: PPUSH
29657: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
29661: LD_EXP 1
29665: PPUSH
29666: LD_INT 48
29668: PPUSH
29669: LD_INT 68
29671: PPUSH
29672: CALL_OW 297
29676: PUSH
29677: LD_INT 2
29679: LESS
29680: IFFALSE 29639
// AddComTurnXY ( JMM , 47 , 65 ) ;
29682: LD_EXP 1
29686: PPUSH
29687: LD_INT 47
29689: PPUSH
29690: LD_INT 65
29692: PPUSH
29693: CALL_OW 178
// wait ( 0 0$2 ) ;
29697: LD_INT 70
29699: PPUSH
29700: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29704: LD_VAR 0 2
29708: PUSH
29709: LD_INT 1
29711: ARRAY
29712: PPUSH
29713: LD_STRING D6c-Sol3-2
29715: PPUSH
29716: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29720: LD_EXP 1
29724: PPUSH
29725: LD_STRING D6c-JMM-2
29727: PPUSH
29728: CALL_OW 88
// Video ( false ) ;
29732: LD_INT 0
29734: PPUSH
29735: CALL 6884 0 1
// centerPowell = 0 ;
29739: LD_ADDR_EXP 74
29743: PUSH
29744: LD_INT 0
29746: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29747: LD_INT 22
29749: PUSH
29750: LD_INT 4
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PPUSH
29757: CALL_OW 69
29761: PPUSH
29762: LD_INT 1
29764: PPUSH
29765: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29769: LD_STRING M2
29771: PPUSH
29772: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29776: LD_INT 4
29778: PPUSH
29779: LD_INT 4
29781: PPUSH
29782: CALL_OW 343
// timerStatus = 1 ;
29786: LD_ADDR_EXP 96
29790: PUSH
29791: LD_INT 1
29793: ST_TO_ADDR
// missionStage = 1 ;
29794: LD_ADDR_EXP 101
29798: PUSH
29799: LD_INT 1
29801: ST_TO_ADDR
// startAttacks = 1 ;
29802: LD_ADDR_EXP 72
29806: PUSH
29807: LD_INT 1
29809: ST_TO_ADDR
// end ;
29810: PPOPN 4
29812: END
// every 0 0$2 trigger centerPowell = 1 do
29813: LD_EXP 74
29817: PUSH
29818: LD_INT 1
29820: EQUAL
29821: IFFALSE 30104
29823: GO 29825
29825: DISABLE
// begin enable ;
29826: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29827: LD_EXP 17
29831: PUSH
29832: LD_EXP 75
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PPUSH
29841: LD_INT 1000
29843: PPUSH
29844: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29848: LD_INT 22
29850: PUSH
29851: LD_INT 4
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 34
29860: PUSH
29861: LD_INT 29
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 33
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: PPUSH
29883: CALL_OW 69
29887: PUSH
29888: LD_INT 0
29890: GREATER
29891: IFFALSE 29944
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29893: LD_INT 22
29895: PUSH
29896: LD_INT 4
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 34
29905: PUSH
29906: LD_INT 29
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 33
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: PPUSH
29928: CALL_OW 69
29932: PUSH
29933: LD_INT 1
29935: ARRAY
29936: PPUSH
29937: LD_INT 1000
29939: PPUSH
29940: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29944: LD_INT 22
29946: PUSH
29947: LD_INT 8
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 34
29956: PUSH
29957: LD_INT 29
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 33
29966: PUSH
29967: LD_INT 1
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: PPUSH
29979: CALL_OW 69
29983: PUSH
29984: LD_INT 0
29986: GREATER
29987: IFFALSE 30040
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29989: LD_INT 22
29991: PUSH
29992: LD_INT 8
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 34
30001: PUSH
30002: LD_INT 29
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 33
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: PPUSH
30024: CALL_OW 69
30028: PUSH
30029: LD_INT 1
30031: ARRAY
30032: PPUSH
30033: LD_INT 1000
30035: PPUSH
30036: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
30040: LD_EXP 73
30044: PPUSH
30045: LD_INT 13
30047: PPUSH
30048: CALL_OW 308
30052: NOT
30053: IFFALSE 30067
// SetLives ( powellVeh , 1000 ) ;
30055: LD_EXP 73
30059: PPUSH
30060: LD_INT 1000
30062: PPUSH
30063: CALL_OW 234
// if not IsInUnit ( Powell ) then
30067: LD_EXP 17
30071: PPUSH
30072: CALL_OW 310
30076: NOT
30077: IFFALSE 30090
// CenterOnUnits ( Powell ) else
30079: LD_EXP 17
30083: PPUSH
30084: CALL_OW 85
30088: GO 30104
// CenterOnUnits ( IsInUnit ( Powell ) ) ;
30090: LD_EXP 17
30094: PPUSH
30095: CALL_OW 310
30099: PPUSH
30100: CALL_OW 85
// end ;
30104: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
30105: LD_EXP 97
30109: PUSH
30110: LD_INT 560
30112: GREATEREQUAL
30113: IFFALSE 30325
30115: GO 30117
30117: DISABLE
// begin DialogueOn ;
30118: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
30122: LD_EXP 53
30126: PPUSH
30127: LD_STRING D7-Friend-1
30129: PPUSH
30130: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
30134: LD_EXP 1
30138: PPUSH
30139: LD_STRING D7-JMM-1
30141: PPUSH
30142: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
30146: LD_EXP 53
30150: PPUSH
30151: LD_STRING D7-Friend-2
30153: PPUSH
30154: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
30158: LD_EXP 1
30162: PPUSH
30163: LD_STRING D7-JMM-2
30165: PPUSH
30166: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
30170: LD_EXP 53
30174: PPUSH
30175: LD_STRING D7-Friend-3
30177: PPUSH
30178: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
30182: LD_EXP 1
30186: PPUSH
30187: LD_STRING D7-JMM-3
30189: PPUSH
30190: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
30194: LD_EXP 53
30198: PPUSH
30199: LD_STRING D7-Friend-4
30201: PPUSH
30202: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
30206: LD_EXP 1
30210: PPUSH
30211: LD_STRING D7-JMM-4
30213: PPUSH
30214: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
30218: LD_EXP 53
30222: PPUSH
30223: LD_STRING D7-Friend-5
30225: PPUSH
30226: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
30230: LD_EXP 1
30234: PPUSH
30235: LD_STRING D7-JMM-5
30237: PPUSH
30238: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
30242: LD_EXP 53
30246: PPUSH
30247: LD_STRING D7-Friend-6
30249: PPUSH
30250: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
30254: LD_EXP 1
30258: PPUSH
30259: LD_STRING D7-JMM-6
30261: PPUSH
30262: CALL_OW 88
// DialogueOff ;
30266: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
30270: LD_EXP 36
30274: PPUSH
30275: LD_INT 15
30277: PPUSH
30278: LD_INT 0
30280: PPUSH
30281: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
30285: LD_EXP 36
30289: PPUSH
30290: LD_INT 2
30292: PPUSH
30293: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
30297: LD_EXP 36
30301: PPUSH
30302: LD_INT 2
30304: PPUSH
30305: LD_INT 78
30307: PPUSH
30308: LD_INT 12
30310: PPUSH
30311: LD_INT 3
30313: PPUSH
30314: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
30318: LD_STRING Mlegion
30320: PPUSH
30321: CALL_OW 337
// end ;
30325: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 6 , 5 ] [ Difficulty ] do
30326: LD_INT 22
30328: PUSH
30329: LD_INT 8
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 21
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 23
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 69
30365: PUSH
30366: LD_INT 6
30368: PUSH
30369: LD_INT 6
30371: PUSH
30372: LD_INT 5
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: PUSH
30380: LD_OWVAR 67
30384: ARRAY
30385: LESSEQUAL
30386: IFFALSE 30700
30388: GO 30390
30390: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
30391: LD_EXP 30
30395: PPUSH
30396: LD_INT 19
30398: PPUSH
30399: LD_INT 0
30401: PPUSH
30402: CALL_OW 49
// KillUnit ( Kozlov ) ;
30406: LD_EXP 36
30410: PPUSH
30411: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
30415: LD_INT 22
30417: PUSH
30418: LD_INT 8
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 21
30427: PUSH
30428: LD_INT 3
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 23
30437: PUSH
30438: LD_INT 3
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 30
30447: PUSH
30448: LD_INT 3
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: PPUSH
30461: CALL_OW 69
30465: PUSH
30466: LD_INT 1
30468: ARRAY
30469: PPUSH
30470: CALL_OW 66
// DialogueOn ;
30474: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
30478: LD_EXP 1
30482: PPUSH
30483: LD_STRING D13-JMM-1
30485: PPUSH
30486: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
30490: LD_EXP 30
30494: PPUSH
30495: LD_STRING D13-Kurt-1
30497: PPUSH
30498: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
30502: LD_EXP 1
30506: PPUSH
30507: LD_STRING D13-JMM-2
30509: PPUSH
30510: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
30514: LD_EXP 30
30518: PPUSH
30519: LD_STRING D13-Kurt-2a
30521: PPUSH
30522: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
30526: LD_EXP 1
30530: PPUSH
30531: LD_STRING D13-JMM-3
30533: PPUSH
30534: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
30538: LD_EXP 30
30542: PPUSH
30543: LD_STRING D13-Kurt-3
30545: PPUSH
30546: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
30550: LD_EXP 1
30554: PPUSH
30555: LD_STRING D13-JMM-4
30557: PPUSH
30558: CALL_OW 88
// DialogueOff ;
30562: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
30566: LD_INT 22
30568: PUSH
30569: LD_INT 8
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 50
30578: PUSH
30579: EMPTY
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: PPUSH
30591: LD_INT 1
30593: PPUSH
30594: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
30598: LD_INT 22
30600: PUSH
30601: LD_INT 8
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: LD_INT 24
30613: PUSH
30614: LD_INT 250
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PPUSH
30629: CALL_OW 69
30633: PPUSH
30634: LD_INT 0
30636: PPUSH
30637: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
30641: LD_STRING MlegionOut
30643: PPUSH
30644: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
30648: LD_INT 8
30650: PPUSH
30651: LD_INT 1
30653: PPUSH
30654: LD_INT 1
30656: PPUSH
30657: LD_INT 1
30659: PPUSH
30660: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
30664: LD_EXP 53
30668: PPUSH
30669: LD_INT 30
30671: PPUSH
30672: LD_INT 0
30674: PPUSH
30675: CALL_OW 49
// wait ( 0 0$1 ) ;
30679: LD_INT 35
30681: PPUSH
30682: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
30686: LD_EXP 53
30690: PPUSH
30691: LD_EXP 1
30695: PPUSH
30696: CALL_OW 112
// end ;
30700: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30701: LD_INT 1
30703: PPUSH
30704: LD_EXP 53
30708: PPUSH
30709: CALL_OW 292
30713: IFFALSE 30989
30715: GO 30717
30717: DISABLE
30718: LD_INT 0
30720: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30721: LD_EXP 53
30725: PPUSH
30726: CALL_OW 87
// DialogueOn ;
30730: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30734: LD_EXP 1
30738: PPUSH
30739: LD_STRING D14-JMM-1
30741: PPUSH
30742: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30746: LD_EXP 53
30750: PPUSH
30751: LD_STRING D14-Friend-1
30753: PPUSH
30754: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30758: LD_EXP 1
30762: PPUSH
30763: LD_STRING D14-JMM-2
30765: PPUSH
30766: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30770: LD_EXP 53
30774: PPUSH
30775: LD_STRING D14-Friend-2
30777: PPUSH
30778: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30782: LD_EXP 1
30786: PPUSH
30787: LD_STRING D14-JMM-3
30789: PPUSH
30790: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30794: LD_EXP 53
30798: PPUSH
30799: LD_STRING D14-Friend-3
30801: PPUSH
30802: CALL_OW 88
// DialogueOff ;
30806: CALL_OW 7
// dec = Query ( Q14 ) ;
30810: LD_ADDR_VAR 0 1
30814: PUSH
30815: LD_STRING Q14
30817: PPUSH
30818: CALL_OW 97
30822: ST_TO_ADDR
// if dec = 1 then
30823: LD_VAR 0 1
30827: PUSH
30828: LD_INT 1
30830: EQUAL
30831: IFFALSE 30865
// begin DialogueOn ;
30833: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30837: LD_EXP 1
30841: PPUSH
30842: LD_STRING D14a-JMM-1
30844: PPUSH
30845: CALL_OW 88
// DialogueOff ;
30849: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30853: LD_EXP 53
30857: PPUSH
30858: LD_INT 1
30860: PPUSH
30861: CALL_OW 235
// end ; if dec = 2 then
30865: LD_VAR 0 1
30869: PUSH
30870: LD_INT 2
30872: EQUAL
30873: IFFALSE 30907
// begin DialogueOn ;
30875: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30879: LD_EXP 1
30883: PPUSH
30884: LD_STRING D14b-JMM-1
30886: PPUSH
30887: CALL_OW 88
// DialogueOff ;
30891: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30895: LD_EXP 53
30899: PPUSH
30900: LD_INT 18
30902: PPUSH
30903: CALL_OW 113
// end ; if dec = 3 then
30907: LD_VAR 0 1
30911: PUSH
30912: LD_INT 3
30914: EQUAL
30915: IFFALSE 30989
// begin DialogueOn ;
30917: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30921: LD_EXP 1
30925: PPUSH
30926: LD_STRING D14c-JMM-1
30928: PPUSH
30929: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30933: LD_EXP 53
30937: PPUSH
30938: LD_STRING D14c-Friend-1
30940: PPUSH
30941: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30945: LD_EXP 1
30949: PPUSH
30950: LD_STRING D14c-JMM-2
30952: PPUSH
30953: CALL_OW 88
// DialogueOff ;
30957: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30961: LD_INT 8
30963: PPUSH
30964: LD_INT 1
30966: PPUSH
30967: LD_INT 2
30969: PPUSH
30970: LD_INT 1
30972: PPUSH
30973: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30977: LD_EXP 53
30981: PPUSH
30982: LD_INT 18
30984: PPUSH
30985: CALL_OW 113
// end ; end ;
30989: PPOPN 1
30991: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30992: LD_EXP 53
30996: PPUSH
30997: LD_INT 18
30999: PPUSH
31000: CALL_OW 308
31004: PUSH
31005: LD_EXP 53
31009: PPUSH
31010: CALL_OW 255
31014: PUSH
31015: LD_INT 8
31017: EQUAL
31018: AND
31019: IFFALSE 31033
31021: GO 31023
31023: DISABLE
// RemoveUnit ( LegionFriend ) ;
31024: LD_EXP 53
31028: PPUSH
31029: CALL_OW 64
31033: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
31034: LD_EXP 97
31038: PUSH
31039: LD_INT 31570
31041: GREATEREQUAL
31042: IFFALSE 31139
31044: GO 31046
31046: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
31047: LD_EXP 81
31051: PUSH
31052: LD_INT 1
31054: EQUAL
31055: PUSH
31056: LD_EXP 79
31060: PUSH
31061: EMPTY
31062: EQUAL
31063: AND
31064: IFFALSE 31091
// begin PrepareSupportFromKappa ;
31066: CALL 2416 0 0
// if burlakStatus = 1 then
31070: LD_EXP 76
31074: PUSH
31075: LD_INT 1
31077: EQUAL
31078: IFFALSE 31091
// begin wait ( 25 25$00 ) ;
31080: LD_INT 52500
31082: PPUSH
31083: CALL_OW 67
// PrepareAttackFromKappa ;
31087: CALL 5268 0 0
// end ; end ; if KappaStatus = 0 and JMMGirlStatus = 1 then
31091: LD_EXP 81
31095: PUSH
31096: LD_INT 0
31098: EQUAL
31099: PUSH
31100: LD_EXP 82
31104: PUSH
31105: LD_INT 1
31107: EQUAL
31108: AND
31109: IFFALSE 31115
// PrepareAttackFromKappa ;
31111: CALL 5268 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
31115: LD_EXP 81
31119: PUSH
31120: LD_INT 0
31122: EQUAL
31123: PUSH
31124: LD_EXP 82
31128: PUSH
31129: LD_INT 0
31131: EQUAL
31132: AND
31133: IFFALSE 31139
// PrepareAttackFromKappa ;
31135: CALL 5268 0 0
// end ;
31139: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
31140: LD_INT 1
31142: PPUSH
31143: LD_EXP 35
31147: PPUSH
31148: CALL_OW 292
31152: IFFALSE 31420
31154: GO 31156
31156: DISABLE
// begin missionStage = 2 ;
31157: LD_ADDR_EXP 101
31161: PUSH
31162: LD_INT 2
31164: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
31165: LD_EXP 35
31169: PPUSH
31170: CALL_OW 87
// DialogueOn ;
31174: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
31178: LD_EXP 1
31182: PPUSH
31183: LD_STRING D10nB-JMM-1
31185: PPUSH
31186: CALL_OW 88
// if BurlakStatus = 1 then
31190: LD_EXP 76
31194: PUSH
31195: LD_INT 1
31197: EQUAL
31198: IFFALSE 31212
// Say ( Vsevolod , D10nB-Vse-1a ) ;
31200: LD_EXP 34
31204: PPUSH
31205: LD_STRING D10nB-Vse-1a
31207: PPUSH
31208: CALL_OW 88
// if BurlakStatus = 0 then
31212: LD_EXP 76
31216: PUSH
31217: LD_INT 0
31219: EQUAL
31220: IFFALSE 31234
// Say ( Vsevolod , D10nB-Vse-1 ) ;
31222: LD_EXP 34
31226: PPUSH
31227: LD_STRING D10nB-Vse-1
31229: PPUSH
31230: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
31234: LD_EXP 1
31238: PPUSH
31239: LD_STRING D10nB-JMM-2
31241: PPUSH
31242: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
31246: LD_EXP 81
31250: PUSH
31251: LD_EXP 82
31255: PUSH
31256: LD_INT 1
31258: EQUAL
31259: AND
31260: IFFALSE 31274
// SayRadio ( Vsevolod , D10nB-Vse-5a ) ;
31262: LD_EXP 34
31266: PPUSH
31267: LD_STRING D10nB-Vse-5a
31269: PPUSH
31270: CALL_OW 94
// if KappaStatus and JMMGirlStatus = 0 then
31274: LD_EXP 81
31278: PUSH
31279: LD_EXP 82
31283: PUSH
31284: LD_INT 0
31286: EQUAL
31287: AND
31288: IFFALSE 31416
// begin if JMMGirl = 1 then
31290: LD_EXP 80
31294: PUSH
31295: LD_INT 1
31297: EQUAL
31298: IFFALSE 31348
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
31300: LD_EXP 34
31304: PPUSH
31305: LD_STRING D10nB-Vse-2
31307: PPUSH
31308: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
31312: LD_EXP 1
31316: PPUSH
31317: LD_STRING D10nB-JMM-3
31319: PPUSH
31320: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
31324: LD_EXP 34
31328: PPUSH
31329: LD_STRING D10nB-Vse-3
31331: PPUSH
31332: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
31336: LD_EXP 1
31340: PPUSH
31341: LD_STRING D10nB-JMM-4
31343: PPUSH
31344: CALL_OW 88
// end ; if JMMGirl = 2 then
31348: LD_EXP 80
31352: PUSH
31353: LD_INT 2
31355: EQUAL
31356: IFFALSE 31382
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
31358: LD_EXP 34
31362: PPUSH
31363: LD_STRING D10nB-Vse-4
31365: PPUSH
31366: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
31370: LD_EXP 1
31374: PPUSH
31375: LD_STRING D10nB-JMM-5
31377: PPUSH
31378: CALL_OW 88
// end ; if JMMGirl = 3 then
31382: LD_EXP 80
31386: PUSH
31387: LD_INT 3
31389: EQUAL
31390: IFFALSE 31416
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
31392: LD_EXP 34
31396: PPUSH
31397: LD_STRING D10nB-Vse-5
31399: PPUSH
31400: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
31404: LD_EXP 1
31408: PPUSH
31409: LD_STRING D10nB-JMM-6
31411: PPUSH
31412: CALL_OW 88
// end ; end ; DialogueOff ;
31416: CALL_OW 7
// end ;
31420: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
31421: LD_EXP 97
31425: PUSH
31426: LD_INT 63070
31428: GREATEREQUAL
31429: IFFALSE 31707
31431: GO 31433
31433: DISABLE
// begin PrepareOmegaTeam ;
31434: CALL 2805 0 0
// missionStage = 3 ;
31438: LD_ADDR_EXP 101
31442: PUSH
31443: LD_INT 3
31445: ST_TO_ADDR
// DialogueOn ;
31446: CALL_OW 6
// if StevensStatus = 1 then
31450: LD_EXP 77
31454: PUSH
31455: LD_INT 1
31457: EQUAL
31458: IFFALSE 31570
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
31460: LD_EXP 3
31464: PPUSH
31465: CALL_OW 310
31469: PPUSH
31470: CALL_OW 87
// SayRadio ( Stevens , D8-Huck-1 ) ;
31474: LD_EXP 3
31478: PPUSH
31479: LD_STRING D8-Huck-1
31481: PPUSH
31482: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
31486: LD_EXP 1
31490: PPUSH
31491: LD_STRING D8-JMM-1
31493: PPUSH
31494: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
31498: LD_EXP 3
31502: PPUSH
31503: LD_STRING D8-Huck-2
31505: PPUSH
31506: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
31510: LD_EXP 1
31514: PPUSH
31515: LD_STRING D8-JMM-2
31517: PPUSH
31518: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
31522: LD_EXP 3
31526: PPUSH
31527: LD_STRING D8-Huck-3
31529: PPUSH
31530: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
31534: LD_EXP 1
31538: PPUSH
31539: LD_STRING D8-JMM-3
31541: PPUSH
31542: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
31546: LD_EXP 3
31550: PPUSH
31551: LD_STRING D8-Huck-4
31553: PPUSH
31554: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
31558: LD_EXP 1
31562: PPUSH
31563: LD_STRING D8-JMM-4
31565: PPUSH
31566: CALL_OW 88
// end ; if StevensStatus = 0 then
31570: LD_EXP 77
31574: PUSH
31575: LD_INT 0
31577: EQUAL
31578: IFFALSE 31690
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
31580: LD_EXP 21
31584: PPUSH
31585: CALL_OW 310
31589: PPUSH
31590: CALL_OW 87
// SayRadio ( Baker , D8-Huck-1 ) ;
31594: LD_EXP 21
31598: PPUSH
31599: LD_STRING D8-Huck-1
31601: PPUSH
31602: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
31606: LD_EXP 1
31610: PPUSH
31611: LD_STRING D8-JMM-1a
31613: PPUSH
31614: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
31618: LD_EXP 21
31622: PPUSH
31623: LD_STRING D8-Huck-2
31625: PPUSH
31626: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
31630: LD_EXP 1
31634: PPUSH
31635: LD_STRING D8-JMM-2
31637: PPUSH
31638: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
31642: LD_EXP 21
31646: PPUSH
31647: LD_STRING D8-Huck-3
31649: PPUSH
31650: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
31654: LD_EXP 1
31658: PPUSH
31659: LD_STRING D8-JMM-3
31661: PPUSH
31662: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
31666: LD_EXP 21
31670: PPUSH
31671: LD_STRING D8-Huck-4
31673: PPUSH
31674: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
31678: LD_EXP 1
31682: PPUSH
31683: LD_STRING D8-JMM-4
31685: PPUSH
31686: CALL_OW 88
// end ; DialogueOff ;
31690: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
31694: LD_INT 25
31696: PPUSH
31697: LD_INT 1
31699: PPUSH
31700: LD_INT 1
31702: PPUSH
31703: CALL_OW 322
// end ;
31707: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
31708: LD_EXP 97
31712: PUSH
31713: LD_INT 73570
31715: GREATEREQUAL
31716: IFFALSE 32066
31718: GO 31720
31720: DISABLE
31721: LD_INT 0
31723: PPUSH
// begin missionStage = 4 ;
31724: LD_ADDR_EXP 101
31728: PUSH
31729: LD_INT 4
31731: ST_TO_ADDR
// DialogueOn ;
31732: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31736: LD_EXP 28
31740: PPUSH
31741: LD_STRING D9-Roth-1
31743: PPUSH
31744: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31748: LD_EXP 1
31752: PPUSH
31753: LD_STRING D9-JMM-1
31755: PPUSH
31756: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31760: LD_EXP 28
31764: PPUSH
31765: LD_STRING D9-Roth-2
31767: PPUSH
31768: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31772: LD_EXP 28
31776: PPUSH
31777: LD_STRING D9-Roth-2a
31779: PPUSH
31780: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31784: LD_EXP 26
31788: PPUSH
31789: LD_STRING D9-Pla-2
31791: PPUSH
31792: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31796: LD_EXP 28
31800: PPUSH
31801: LD_STRING D9-Roth-3
31803: PPUSH
31804: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31808: LD_EXP 26
31812: PPUSH
31813: LD_STRING D9-Pla-3
31815: PPUSH
31816: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31820: LD_EXP 28
31824: PPUSH
31825: LD_STRING D9-Roth-4
31827: PPUSH
31828: CALL_OW 94
// dec = Query ( Q9 ) ;
31832: LD_ADDR_VAR 0 1
31836: PUSH
31837: LD_STRING Q9
31839: PPUSH
31840: CALL_OW 97
31844: ST_TO_ADDR
// if dec = 1 then
31845: LD_VAR 0 1
31849: PUSH
31850: LD_INT 1
31852: EQUAL
31853: IFFALSE 31867
// SayRadio ( Roth , D9a-Roth-1 ) ;
31855: LD_EXP 28
31859: PPUSH
31860: LD_STRING D9a-Roth-1
31862: PPUSH
31863: CALL_OW 94
// if dec = 2 then
31867: LD_VAR 0 1
31871: PUSH
31872: LD_INT 2
31874: EQUAL
31875: IFFALSE 31901
// begin Say ( JMM , D9b-JMM-1 ) ;
31877: LD_EXP 1
31881: PPUSH
31882: LD_STRING D9b-JMM-1
31884: PPUSH
31885: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31889: LD_EXP 28
31893: PPUSH
31894: LD_STRING D9b-Roth-1
31896: PPUSH
31897: CALL_OW 94
// end ; if dec = 3 then
31901: LD_VAR 0 1
31905: PUSH
31906: LD_INT 3
31908: EQUAL
31909: IFFALSE 31971
// begin Say ( JMM , D9c-JMM-1 ) ;
31911: LD_EXP 1
31915: PPUSH
31916: LD_STRING D9c-JMM-1
31918: PPUSH
31919: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31923: LD_EXP 28
31927: PPUSH
31928: LD_STRING D9c-Roth-1
31930: PPUSH
31931: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31935: LD_EXP 1
31939: PPUSH
31940: LD_STRING D9c-JMM-2
31942: PPUSH
31943: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31947: LD_EXP 28
31951: PPUSH
31952: LD_STRING D9c-Roth-2
31954: PPUSH
31955: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31959: LD_EXP 1
31963: PPUSH
31964: LD_STRING D9c-JMM-3
31966: PPUSH
31967: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31971: LD_EXP 28
31975: PPUSH
31976: LD_STRING D9c-Roth-3
31978: PPUSH
31979: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31983: LD_EXP 28
31987: PPUSH
31988: LD_STRING D9cont-Roth-1
31990: PPUSH
31991: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31995: LD_EXP 1
31999: PPUSH
32000: LD_STRING D9cont-JMM-1
32002: PPUSH
32003: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
32007: LD_EXP 28
32011: PPUSH
32012: LD_STRING D9cont-Roth-2
32014: PPUSH
32015: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
32019: LD_EXP 1
32023: PPUSH
32024: LD_STRING D9cont-JMM-2
32026: PPUSH
32027: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
32031: LD_EXP 28
32035: PPUSH
32036: LD_STRING D9cont-Roth-3
32038: PPUSH
32039: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
32043: LD_EXP 1
32047: PPUSH
32048: LD_STRING D9cont-JMM-3
32050: PPUSH
32051: CALL_OW 88
// DialogueOff ;
32055: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
32059: LD_STRING M3
32061: PPUSH
32062: CALL_OW 337
// end ;
32066: PPOPN 1
32068: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
32069: LD_INT 22
32071: PUSH
32072: LD_INT 7
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 21
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PPUSH
32093: CALL_OW 69
32097: PUSH
32098: LD_INT 20
32100: PUSH
32101: LD_INT 18
32103: PUSH
32104: LD_INT 15
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: PUSH
32112: LD_OWVAR 67
32116: ARRAY
32117: LESSEQUAL
32118: IFFALSE 32604
32120: GO 32122
32122: DISABLE
32123: LD_INT 0
32125: PPUSH
32126: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
32127: LD_ADDR_VAR 0 1
32131: PUSH
32132: LD_INT 22
32134: PUSH
32135: LD_INT 7
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 21
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 23
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 24
32164: PUSH
32165: LD_INT 900
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: PPUSH
32178: CALL_OW 69
32182: PUSH
32183: FOR_IN
32184: IFFALSE 32215
// if GetSex ( i ) = sex_male then
32186: LD_VAR 0 1
32190: PPUSH
32191: CALL_OW 258
32195: PUSH
32196: LD_INT 1
32198: EQUAL
32199: IFFALSE 32213
// begin tmp = i ;
32201: LD_ADDR_VAR 0 2
32205: PUSH
32206: LD_VAR 0 1
32210: ST_TO_ADDR
// break ;
32211: GO 32215
// end ;
32213: GO 32183
32215: POP
32216: POP
// if tmp = 0 then
32217: LD_VAR 0 2
32221: PUSH
32222: LD_INT 0
32224: EQUAL
32225: IFFALSE 32279
// begin uc_side = 7 ;
32227: LD_ADDR_OWVAR 20
32231: PUSH
32232: LD_INT 7
32234: ST_TO_ADDR
// uc_nation = 3 ;
32235: LD_ADDR_OWVAR 21
32239: PUSH
32240: LD_INT 3
32242: ST_TO_ADDR
// hc_name =  ;
32243: LD_ADDR_OWVAR 26
32247: PUSH
32248: LD_STRING 
32250: ST_TO_ADDR
// hc_gallery =  ;
32251: LD_ADDR_OWVAR 33
32255: PUSH
32256: LD_STRING 
32258: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
32259: LD_INT 1
32261: PPUSH
32262: LD_INT 10
32264: PPUSH
32265: CALL_OW 381
// tmp = CreateHuman ;
32269: LD_ADDR_VAR 0 2
32273: PUSH
32274: CALL_OW 44
32278: ST_TO_ADDR
// end ; AllianceAI = 0 ;
32279: LD_ADDR_EXP 85
32283: PUSH
32284: LD_INT 0
32286: ST_TO_ADDR
// AllianceEscape = 1 ;
32287: LD_ADDR_EXP 91
32291: PUSH
32292: LD_INT 1
32294: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
32295: LD_INT 7
32297: PPUSH
32298: LD_INT 1
32300: PPUSH
32301: LD_INT 1
32303: PPUSH
32304: LD_INT 1
32306: PPUSH
32307: CALL_OW 80
// DialogueOn ;
32311: CALL_OW 6
// if IsOK ( Roth ) then
32315: LD_EXP 28
32319: PPUSH
32320: CALL_OW 302
32324: IFFALSE 32338
// Say ( JMM , DAb-JMM-1 ) ;
32326: LD_EXP 1
32330: PPUSH
32331: LD_STRING DAb-JMM-1
32333: PPUSH
32334: CALL_OW 88
// if IsOK ( Roth ) then
32338: LD_EXP 28
32342: PPUSH
32343: CALL_OW 302
32347: IFFALSE 32363
// Say ( Roth , DSurrenderAlliance-Roth-1 ) else
32349: LD_EXP 28
32353: PPUSH
32354: LD_STRING DSurrenderAlliance-Roth-1
32356: PPUSH
32357: CALL_OW 88
32361: GO 32375
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
32363: LD_VAR 0 2
32367: PPUSH
32368: LD_STRING DSurrenderAlliance-Sci1-1
32370: PPUSH
32371: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
32375: LD_INT 23
32377: PPUSH
32378: LD_INT 22
32380: PUSH
32381: LD_INT 4
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PPUSH
32388: CALL_OW 70
32392: PUSH
32393: LD_INT 1
32395: EQUAL
32396: IFFALSE 32410
// Say ( JMM , DAb-JMM-1a ) ;
32398: LD_EXP 1
32402: PPUSH
32403: LD_STRING DAb-JMM-1a
32405: PPUSH
32406: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
32410: LD_INT 23
32412: PPUSH
32413: LD_INT 22
32415: PUSH
32416: LD_INT 4
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PPUSH
32423: CALL_OW 70
32427: PUSH
32428: LD_INT 1
32430: GREATER
32431: IFFALSE 32445
// Say ( JMM , DAb-JMM-1b ) ;
32433: LD_EXP 1
32437: PPUSH
32438: LD_STRING DAb-JMM-1b
32440: PPUSH
32441: CALL_OW 88
// DialogueOff ;
32445: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
32449: LD_INT 23
32451: PPUSH
32452: LD_INT 22
32454: PUSH
32455: LD_INT 4
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PPUSH
32462: CALL_OW 70
32466: PUSH
32467: LD_INT 0
32469: GREATER
32470: IFFALSE 32497
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
32472: LD_INT 23
32474: PPUSH
32475: LD_INT 22
32477: PUSH
32478: LD_INT 4
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PPUSH
32485: CALL_OW 70
32489: PPUSH
32490: LD_INT 1
32492: PPUSH
32493: CALL_OW 235
// if IsDying ( Roth ) then
32497: LD_EXP 28
32501: PPUSH
32502: CALL_OW 303
32506: IFFALSE 32528
// begin RothStatus = 0 ;
32508: LD_ADDR_EXP 92
32512: PUSH
32513: LD_INT 0
32515: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
32516: LD_EXP 28
32520: PPUSH
32521: LD_INT 0
32523: PPUSH
32524: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
32528: LD_INT 22
32530: PUSH
32531: LD_INT 7
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 21
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PPUSH
32552: CALL_OW 69
32556: PPUSH
32557: CALL_OW 122
// wait ( 0 0$1 ) ;
32561: LD_INT 35
32563: PPUSH
32564: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
32568: LD_INT 22
32570: PUSH
32571: LD_INT 7
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 21
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PPUSH
32592: CALL_OW 69
32596: PPUSH
32597: LD_INT 28
32599: PPUSH
32600: CALL_OW 173
// end ;
32604: PPOPN 2
32606: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
32607: LD_EXP 91
32611: PUSH
32612: LD_INT 1
32614: EQUAL
32615: PUSH
32616: LD_INT 28
32618: PPUSH
32619: LD_INT 22
32621: PUSH
32622: LD_INT 7
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 21
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PPUSH
32643: CALL_OW 70
32647: AND
32648: IFFALSE 32710
32650: GO 32652
32652: DISABLE
32653: LD_INT 0
32655: PPUSH
// begin enable ;
32656: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
32657: LD_ADDR_VAR 0 1
32661: PUSH
32662: LD_INT 28
32664: PPUSH
32665: LD_INT 22
32667: PUSH
32668: LD_INT 7
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 21
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PPUSH
32689: CALL_OW 70
32693: PUSH
32694: FOR_IN
32695: IFFALSE 32708
// RemoveUnit ( i ) ;
32697: LD_VAR 0 1
32701: PPUSH
32702: CALL_OW 64
32706: GO 32694
32708: POP
32709: POP
// end ;
32710: PPOPN 1
32712: END
// every 3 3$55 trigger ( FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 ) and IsOK ( Roth ) and IsOk ( AllLabR1 ) and IsOk ( AllLabR2 ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
32713: LD_INT 33
32715: PPUSH
32716: LD_INT 22
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 21
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PPUSH
32740: CALL_OW 70
32744: PUSH
32745: LD_INT 0
32747: GREATER
32748: PUSH
32749: LD_INT 33
32751: PPUSH
32752: LD_INT 22
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 21
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 33
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 3
32784: PUSH
32785: LD_INT 58
32787: PUSH
32788: EMPTY
32789: LIST
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: PPUSH
32801: CALL_OW 70
32805: PUSH
32806: LD_INT 0
32808: GREATER
32809: OR
32810: PUSH
32811: LD_EXP 28
32815: PPUSH
32816: CALL_OW 302
32820: AND
32821: PUSH
32822: LD_INT 39
32824: PPUSH
32825: CALL_OW 302
32829: AND
32830: PUSH
32831: LD_INT 133
32833: PPUSH
32834: CALL_OW 302
32838: AND
32839: PUSH
32840: LD_EXP 85
32844: PUSH
32845: LD_INT 1
32847: EQUAL
32848: AND
32849: IFFALSE 35247
32851: GO 32853
32853: DISABLE
32854: LD_INT 0
32856: PPUSH
32857: PPUSH
32858: PPUSH
// begin enable ;
32859: ENABLE
// if Prob ( [ 80 , 70 , 60 ] [ Difficulty ] ) then
32860: LD_INT 80
32862: PUSH
32863: LD_INT 70
32865: PUSH
32866: LD_INT 60
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: PUSH
32874: LD_OWVAR 67
32878: ARRAY
32879: PPUSH
32880: CALL_OW 13
32884: IFFALSE 32888
// exit ;
32886: GO 35247
// tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32888: LD_ADDR_VAR 0 1
32892: PUSH
32893: LD_INT 33
32895: PPUSH
32896: LD_INT 22
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 21
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 33
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PPUSH
32938: CALL_OW 70
32942: PUSH
32943: LD_INT 1
32945: ARRAY
32946: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32947: LD_ADDR_VAR 0 2
32951: PUSH
32952: LD_EXP 1
32956: PUSH
32957: LD_EXP 2
32961: PUSH
32962: LD_EXP 3
32966: PUSH
32967: LD_EXP 21
32971: PUSH
32972: LD_EXP 4
32976: PUSH
32977: LD_EXP 5
32981: PUSH
32982: LD_EXP 6
32986: PUSH
32987: LD_EXP 7
32991: PUSH
32992: LD_EXP 8
32996: PUSH
32997: LD_EXP 9
33001: PUSH
33002: LD_EXP 10
33006: PUSH
33007: LD_EXP 11
33011: PUSH
33012: LD_EXP 12
33016: PUSH
33017: LD_EXP 13
33021: PUSH
33022: LD_EXP 14
33026: PUSH
33027: LD_EXP 15
33031: PUSH
33032: LD_EXP 16
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: ST_TO_ADDR
// InGameOn ;
33056: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
33060: LD_INT 1
33062: PPUSH
33063: LD_INT 7
33065: PPUSH
33066: LD_INT 1
33068: PPUSH
33069: LD_INT 1
33071: PPUSH
33072: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
33076: LD_VAR 0 1
33080: PPUSH
33081: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
33085: LD_VAR 0 1
33089: PPUSH
33090: CALL_OW 247
33094: PUSH
33095: LD_INT 2
33097: EQUAL
33098: IFFALSE 33119
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
33100: LD_ADDR_VAR 0 1
33104: PUSH
33105: LD_VAR 0 1
33109: PPUSH
33110: CALL_OW 313
33114: PUSH
33115: LD_INT 1
33117: ARRAY
33118: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
33119: LD_VAR 0 1
33123: PPUSH
33124: CALL_OW 121
// wait ( 0 0$1 ) ;
33128: LD_INT 35
33130: PPUSH
33131: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
33135: LD_VAR 0 1
33139: PPUSH
33140: LD_INT 248
33142: PPUSH
33143: LD_INT 186
33145: PPUSH
33146: LD_INT 4
33148: PPUSH
33149: LD_INT 1
33151: PPUSH
33152: CALL_OW 483
// wait ( 0 0$2 ) ;
33156: LD_INT 70
33158: PPUSH
33159: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
33163: LD_VAR 0 1
33167: PPUSH
33168: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
33172: LD_VAR 0 1
33176: PPUSH
33177: LD_EXP 28
33181: PPUSH
33182: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
33186: LD_EXP 28
33190: PUSH
33191: LD_EXP 48
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PPUSH
33200: LD_VAR 0 1
33204: PPUSH
33205: CALL_OW 119
// if tpUnit = JMM then
33209: LD_VAR 0 1
33213: PUSH
33214: LD_EXP 1
33218: EQUAL
33219: IFFALSE 33233
// Say ( JMM , DA1-JMM-1 ) ;
33221: LD_EXP 1
33225: PPUSH
33226: LD_STRING DA1-JMM-1
33228: PPUSH
33229: CALL_OW 88
// if tpUnit = Joan then
33233: LD_VAR 0 1
33237: PUSH
33238: LD_EXP 2
33242: EQUAL
33243: IFFALSE 33257
// Say ( Joan , DA1-Joan-1 ) ;
33245: LD_EXP 2
33249: PPUSH
33250: LD_STRING DA1-Joan-1
33252: PPUSH
33253: CALL_OW 88
// if tpUnit = Lisa then
33257: LD_VAR 0 1
33261: PUSH
33262: LD_EXP 4
33266: EQUAL
33267: IFFALSE 33281
// Say ( Lisa , DA1-Lisa-1 ) ;
33269: LD_EXP 4
33273: PPUSH
33274: LD_STRING DA1-Lisa-1
33276: PPUSH
33277: CALL_OW 88
// if tpUnit = Donaldson then
33281: LD_VAR 0 1
33285: PUSH
33286: LD_EXP 5
33290: EQUAL
33291: IFFALSE 33305
// Say ( Donaldson , DA1-Don-1 ) ;
33293: LD_EXP 5
33297: PPUSH
33298: LD_STRING DA1-Don-1
33300: PPUSH
33301: CALL_OW 88
// if tpUnit = Cornel then
33305: LD_VAR 0 1
33309: PUSH
33310: LD_EXP 12
33314: EQUAL
33315: IFFALSE 33329
// Say ( Cornel , DA1-Corn-1 ) ;
33317: LD_EXP 12
33321: PPUSH
33322: LD_STRING DA1-Corn-1
33324: PPUSH
33325: CALL_OW 88
// if tpUnit = Denis then
33329: LD_VAR 0 1
33333: PUSH
33334: LD_EXP 8
33338: EQUAL
33339: IFFALSE 33353
// Say ( Denis , DA1-Den-1 ) ;
33341: LD_EXP 8
33345: PPUSH
33346: LD_STRING DA1-Den-1
33348: PPUSH
33349: CALL_OW 88
// if tpUnit = Bobby then
33353: LD_VAR 0 1
33357: PUSH
33358: LD_EXP 6
33362: EQUAL
33363: IFFALSE 33377
// Say ( Bobby , DA1-Bobby-1 ) ;
33365: LD_EXP 6
33369: PPUSH
33370: LD_STRING DA1-Bobby-1
33372: PPUSH
33373: CALL_OW 88
// if tpUnit = Gladstone then
33377: LD_VAR 0 1
33381: PUSH
33382: LD_EXP 10
33386: EQUAL
33387: IFFALSE 33401
// Say ( Gladstone , DA1-Glad-1 ) ;
33389: LD_EXP 10
33393: PPUSH
33394: LD_STRING DA1-Glad-1
33396: PPUSH
33397: CALL_OW 88
// if tpUnit = Cyrus then
33401: LD_VAR 0 1
33405: PUSH
33406: LD_EXP 7
33410: EQUAL
33411: IFFALSE 33425
// Say ( Cyrus , DA1-Cyrus-1 ) ;
33413: LD_EXP 7
33417: PPUSH
33418: LD_STRING DA1-Cyrus-1
33420: PPUSH
33421: CALL_OW 88
// if tpUnit = Stevens then
33425: LD_VAR 0 1
33429: PUSH
33430: LD_EXP 3
33434: EQUAL
33435: IFFALSE 33449
// Say ( Stevens , DA1-Huck-1 ) ;
33437: LD_EXP 3
33441: PPUSH
33442: LD_STRING DA1-Huck-1
33444: PPUSH
33445: CALL_OW 88
// if tpUnit = Baker then
33449: LD_VAR 0 1
33453: PUSH
33454: LD_EXP 21
33458: EQUAL
33459: IFFALSE 33473
// Say ( Baker , DA1-Huck-1 ) ;
33461: LD_EXP 21
33465: PPUSH
33466: LD_STRING DA1-Huck-1
33468: PPUSH
33469: CALL_OW 88
// if tpUnit = Brown then
33473: LD_VAR 0 1
33477: PUSH
33478: LD_EXP 9
33482: EQUAL
33483: IFFALSE 33497
// Say ( Brown , DA1-Brown-1 ) ;
33485: LD_EXP 9
33489: PPUSH
33490: LD_STRING DA1-Brown-1
33492: PPUSH
33493: CALL_OW 88
// if tpUnit = Gary then
33497: LD_VAR 0 1
33501: PUSH
33502: LD_EXP 13
33506: EQUAL
33507: IFFALSE 33521
// Say ( Gary , DA1-Gary-1 ) ;
33509: LD_EXP 13
33513: PPUSH
33514: LD_STRING DA1-Gary-1
33516: PPUSH
33517: CALL_OW 88
// if tpUnit = Connie then
33521: LD_VAR 0 1
33525: PUSH
33526: LD_EXP 16
33530: EQUAL
33531: IFFALSE 33545
// Say ( Connie , DA1-Con-1 ) ;
33533: LD_EXP 16
33537: PPUSH
33538: LD_STRING DA1-Con-1
33540: PPUSH
33541: CALL_OW 88
// if tpUnit = Kurt then
33545: LD_VAR 0 1
33549: PUSH
33550: LD_EXP 30
33554: EQUAL
33555: IFFALSE 33569
// Say ( Kurt , DA1-Kurt-1 ) ;
33557: LD_EXP 30
33561: PPUSH
33562: LD_STRING DA1-Kurt-1
33564: PPUSH
33565: CALL_OW 88
// if tpUnit = Kikuchi then
33569: LD_VAR 0 1
33573: PUSH
33574: LD_EXP 15
33578: EQUAL
33579: IFFALSE 33593
// Say ( Kikuchi , DA1-Yam-1 ) ;
33581: LD_EXP 15
33585: PPUSH
33586: LD_STRING DA1-Yam-1
33588: PPUSH
33589: CALL_OW 88
// if tpUnit = Frank then
33593: LD_VAR 0 1
33597: PUSH
33598: LD_EXP 14
33602: EQUAL
33603: IFFALSE 33617
// Say ( Frank , DA1-Frank-1 ) ;
33605: LD_EXP 14
33609: PPUSH
33610: LD_STRING DA1-Frank-1
33612: PPUSH
33613: CALL_OW 88
// if not tpUnit in heroes then
33617: LD_VAR 0 1
33621: PUSH
33622: LD_VAR 0 2
33626: IN
33627: NOT
33628: IFFALSE 33684
// begin if GetSex ( tpUnit ) = 1 then
33630: LD_VAR 0 1
33634: PPUSH
33635: CALL_OW 258
33639: PUSH
33640: LD_INT 1
33642: EQUAL
33643: IFFALSE 33657
// Say ( tpUnit , DA1-Sol1-1 ) ;
33645: LD_VAR 0 1
33649: PPUSH
33650: LD_STRING DA1-Sol1-1
33652: PPUSH
33653: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
33657: LD_VAR 0 1
33661: PPUSH
33662: CALL_OW 258
33666: PUSH
33667: LD_INT 2
33669: EQUAL
33670: IFFALSE 33684
// Say ( tpUnit , DA1-FSol1-1 ) ;
33672: LD_VAR 0 1
33676: PPUSH
33677: LD_STRING DA1-FSol1-1
33679: PPUSH
33680: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
33684: LD_EXP 28
33688: PPUSH
33689: LD_STRING DA-Roth-1
33691: PPUSH
33692: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
33696: LD_EXP 48
33700: PPUSH
33701: LD_STRING DA-Sim-1
33703: PPUSH
33704: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
33708: LD_EXP 28
33712: PPUSH
33713: LD_STRING DA-Roth-2
33715: PPUSH
33716: CALL_OW 88
// if tpUnit = JMM then
33720: LD_VAR 0 1
33724: PUSH
33725: LD_EXP 1
33729: EQUAL
33730: IFFALSE 33763
// begin Say ( JMM , DA1-JMM-1a ) ;
33732: LD_EXP 1
33736: PPUSH
33737: LD_STRING DA1-JMM-1a
33739: PPUSH
33740: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33744: LD_EXP 28
33748: PPUSH
33749: LD_STRING DA-Roth-3a
33751: PPUSH
33752: CALL_OW 88
// YouLost ( JMMCaptured ) ;
33756: LD_STRING JMMCaptured
33758: PPUSH
33759: CALL_OW 104
// end ; if tpUnit = Joan then
33763: LD_VAR 0 1
33767: PUSH
33768: LD_EXP 2
33772: EQUAL
33773: IFFALSE 33835
// begin Say ( Joan , DA1-Joan-1a ) ;
33775: LD_EXP 2
33779: PPUSH
33780: LD_STRING DA1-Joan-1a
33782: PPUSH
33783: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33787: LD_EXP 28
33791: PPUSH
33792: LD_STRING DA-Roth-3a
33794: PPUSH
33795: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33799: LD_EXP 2
33803: PPUSH
33804: LD_INT 4
33806: PPUSH
33807: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33811: LD_EXP 2
33815: PPUSH
33816: LD_INT 257
33818: PPUSH
33819: LD_INT 198
33821: PPUSH
33822: CALL_OW 111
// AddComHold ( Joan ) ;
33826: LD_EXP 2
33830: PPUSH
33831: CALL_OW 200
// end ; if tpUnit = Donaldson then
33835: LD_VAR 0 1
33839: PUSH
33840: LD_EXP 5
33844: EQUAL
33845: IFFALSE 33898
// begin Say ( Donaldson , DA1-Don-1a ) ;
33847: LD_EXP 5
33851: PPUSH
33852: LD_STRING DA1-Don-1a
33854: PPUSH
33855: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33859: LD_EXP 28
33863: PPUSH
33864: LD_STRING DA-Roth-3
33866: PPUSH
33867: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33871: LD_EXP 5
33875: PPUSH
33876: LD_INT 7
33878: PPUSH
33879: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33883: LD_EXP 5
33887: PPUSH
33888: LD_INT 240
33890: PPUSH
33891: LD_INT 188
33893: PPUSH
33894: CALL_OW 111
// end ; if tpUnit = Cornel then
33898: LD_VAR 0 1
33902: PUSH
33903: LD_EXP 12
33907: EQUAL
33908: IFFALSE 33970
// begin Say ( Cornel , DA1-Corn-1a ) ;
33910: LD_EXP 12
33914: PPUSH
33915: LD_STRING DA1-Corn-1a
33917: PPUSH
33918: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33922: LD_EXP 28
33926: PPUSH
33927: LD_STRING DA-Roth-3a
33929: PPUSH
33930: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33934: LD_EXP 12
33938: PPUSH
33939: LD_INT 4
33941: PPUSH
33942: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33946: LD_EXP 12
33950: PPUSH
33951: LD_INT 257
33953: PPUSH
33954: LD_INT 198
33956: PPUSH
33957: CALL_OW 111
// AddComHold ( Cornel ) ;
33961: LD_EXP 12
33965: PPUSH
33966: CALL_OW 200
// end ; if tpUnit = Denis then
33970: LD_VAR 0 1
33974: PUSH
33975: LD_EXP 8
33979: EQUAL
33980: IFFALSE 34033
// begin Say ( Denis , DA1-Den-1a ) ;
33982: LD_EXP 8
33986: PPUSH
33987: LD_STRING DA1-Den-1a
33989: PPUSH
33990: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33994: LD_EXP 28
33998: PPUSH
33999: LD_STRING DA-Roth-3
34001: PPUSH
34002: CALL_OW 88
// SetSide ( Denis , 7 ) ;
34006: LD_EXP 8
34010: PPUSH
34011: LD_INT 7
34013: PPUSH
34014: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
34018: LD_EXP 8
34022: PPUSH
34023: LD_INT 240
34025: PPUSH
34026: LD_INT 188
34028: PPUSH
34029: CALL_OW 111
// end ; if tpUnit = Bobby then
34033: LD_VAR 0 1
34037: PUSH
34038: LD_EXP 6
34042: EQUAL
34043: IFFALSE 34096
// begin Say ( Joan , DA1-Bobby-1a ) ;
34045: LD_EXP 2
34049: PPUSH
34050: LD_STRING DA1-Bobby-1a
34052: PPUSH
34053: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34057: LD_EXP 28
34061: PPUSH
34062: LD_STRING DA-Roth-3
34064: PPUSH
34065: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
34069: LD_EXP 6
34073: PPUSH
34074: LD_INT 7
34076: PPUSH
34077: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
34081: LD_EXP 6
34085: PPUSH
34086: LD_INT 240
34088: PPUSH
34089: LD_INT 188
34091: PPUSH
34092: CALL_OW 111
// end ; if tpUnit = Gladstone then
34096: LD_VAR 0 1
34100: PUSH
34101: LD_EXP 10
34105: EQUAL
34106: IFFALSE 34168
// begin Say ( Gladstone , DA1-Glad-1a ) ;
34108: LD_EXP 10
34112: PPUSH
34113: LD_STRING DA1-Glad-1a
34115: PPUSH
34116: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34120: LD_EXP 28
34124: PPUSH
34125: LD_STRING DA-Roth-3a
34127: PPUSH
34128: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
34132: LD_EXP 10
34136: PPUSH
34137: LD_INT 4
34139: PPUSH
34140: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
34144: LD_EXP 10
34148: PPUSH
34149: LD_INT 257
34151: PPUSH
34152: LD_INT 198
34154: PPUSH
34155: CALL_OW 111
// AddComHold ( Gladstone ) ;
34159: LD_EXP 10
34163: PPUSH
34164: CALL_OW 200
// end ; if tpUnit = Cyrus then
34168: LD_VAR 0 1
34172: PUSH
34173: LD_EXP 7
34177: EQUAL
34178: IFFALSE 34240
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
34180: LD_EXP 7
34184: PPUSH
34185: LD_STRING DA1-Cyrus-1a
34187: PPUSH
34188: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34192: LD_EXP 28
34196: PPUSH
34197: LD_STRING DA-Roth-3a
34199: PPUSH
34200: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
34204: LD_EXP 7
34208: PPUSH
34209: LD_INT 4
34211: PPUSH
34212: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
34216: LD_EXP 7
34220: PPUSH
34221: LD_INT 257
34223: PPUSH
34224: LD_INT 198
34226: PPUSH
34227: CALL_OW 111
// AddComHold ( Cyrus ) ;
34231: LD_EXP 7
34235: PPUSH
34236: CALL_OW 200
// end ; if tpUnit = Stevens then
34240: LD_VAR 0 1
34244: PUSH
34245: LD_EXP 3
34249: EQUAL
34250: IFFALSE 34303
// begin Say ( Stevens , DA1-Huck-1a ) ;
34252: LD_EXP 3
34256: PPUSH
34257: LD_STRING DA1-Huck-1a
34259: PPUSH
34260: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34264: LD_EXP 28
34268: PPUSH
34269: LD_STRING DA-Roth-3
34271: PPUSH
34272: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
34276: LD_EXP 3
34280: PPUSH
34281: LD_INT 7
34283: PPUSH
34284: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
34288: LD_EXP 3
34292: PPUSH
34293: LD_INT 240
34295: PPUSH
34296: LD_INT 188
34298: PPUSH
34299: CALL_OW 111
// end ; if tpUnit = Baker then
34303: LD_VAR 0 1
34307: PUSH
34308: LD_EXP 21
34312: EQUAL
34313: IFFALSE 34366
// begin Say ( Baker , DA1-Huck-1a ) ;
34315: LD_EXP 21
34319: PPUSH
34320: LD_STRING DA1-Huck-1a
34322: PPUSH
34323: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34327: LD_EXP 28
34331: PPUSH
34332: LD_STRING DA-Roth-3
34334: PPUSH
34335: CALL_OW 88
// SetSide ( Baker , 7 ) ;
34339: LD_EXP 21
34343: PPUSH
34344: LD_INT 7
34346: PPUSH
34347: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
34351: LD_EXP 21
34355: PPUSH
34356: LD_INT 240
34358: PPUSH
34359: LD_INT 188
34361: PPUSH
34362: CALL_OW 111
// end ; if tpUnit = Brown then
34366: LD_VAR 0 1
34370: PUSH
34371: LD_EXP 9
34375: EQUAL
34376: IFFALSE 34429
// begin Say ( Cyrus , DA1-Brown-1a ) ;
34378: LD_EXP 7
34382: PPUSH
34383: LD_STRING DA1-Brown-1a
34385: PPUSH
34386: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34390: LD_EXP 28
34394: PPUSH
34395: LD_STRING DA-Roth-3
34397: PPUSH
34398: CALL_OW 88
// SetSide ( Brown , 7 ) ;
34402: LD_EXP 9
34406: PPUSH
34407: LD_INT 7
34409: PPUSH
34410: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
34414: LD_EXP 9
34418: PPUSH
34419: LD_INT 240
34421: PPUSH
34422: LD_INT 188
34424: PPUSH
34425: CALL_OW 111
// end ; if tpUnit = Gary then
34429: LD_VAR 0 1
34433: PUSH
34434: LD_EXP 13
34438: EQUAL
34439: IFFALSE 34501
// begin Say ( Gary , DA1-Gary-1a ) ;
34441: LD_EXP 13
34445: PPUSH
34446: LD_STRING DA1-Gary-1a
34448: PPUSH
34449: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34453: LD_EXP 28
34457: PPUSH
34458: LD_STRING DA-Roth-3a
34460: PPUSH
34461: CALL_OW 88
// SetSide ( Gary , 4 ) ;
34465: LD_EXP 13
34469: PPUSH
34470: LD_INT 4
34472: PPUSH
34473: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
34477: LD_EXP 13
34481: PPUSH
34482: LD_INT 257
34484: PPUSH
34485: LD_INT 198
34487: PPUSH
34488: CALL_OW 111
// AddComHold ( Gary ) ;
34492: LD_EXP 13
34496: PPUSH
34497: CALL_OW 200
// end ; if tpUnit = Cyrus then
34501: LD_VAR 0 1
34505: PUSH
34506: LD_EXP 7
34510: EQUAL
34511: IFFALSE 34573
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
34513: LD_EXP 7
34517: PPUSH
34518: LD_STRING DA1-Cyrus-1a
34520: PPUSH
34521: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34525: LD_EXP 28
34529: PPUSH
34530: LD_STRING DA-Roth-3a
34532: PPUSH
34533: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
34537: LD_EXP 7
34541: PPUSH
34542: LD_INT 4
34544: PPUSH
34545: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
34549: LD_EXP 7
34553: PPUSH
34554: LD_INT 257
34556: PPUSH
34557: LD_INT 198
34559: PPUSH
34560: CALL_OW 111
// AddComHold ( Cyrus ) ;
34564: LD_EXP 7
34568: PPUSH
34569: CALL_OW 200
// end ; if tpUnit = Connie then
34573: LD_VAR 0 1
34577: PUSH
34578: LD_EXP 16
34582: EQUAL
34583: IFFALSE 34645
// begin Say ( Connie , DA1-Con-1a ) ;
34585: LD_EXP 16
34589: PPUSH
34590: LD_STRING DA1-Con-1a
34592: PPUSH
34593: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34597: LD_EXP 28
34601: PPUSH
34602: LD_STRING DA-Roth-3a
34604: PPUSH
34605: CALL_OW 88
// SetSide ( Connie , 4 ) ;
34609: LD_EXP 16
34613: PPUSH
34614: LD_INT 4
34616: PPUSH
34617: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
34621: LD_EXP 16
34625: PPUSH
34626: LD_INT 257
34628: PPUSH
34629: LD_INT 198
34631: PPUSH
34632: CALL_OW 111
// AddComHold ( Connie ) ;
34636: LD_EXP 16
34640: PPUSH
34641: CALL_OW 200
// end ; if tpUnit = Kurt then
34645: LD_VAR 0 1
34649: PUSH
34650: LD_EXP 30
34654: EQUAL
34655: IFFALSE 34717
// begin Say ( Kurt , DA1-Kurt-1a ) ;
34657: LD_EXP 30
34661: PPUSH
34662: LD_STRING DA1-Kurt-1a
34664: PPUSH
34665: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34669: LD_EXP 28
34673: PPUSH
34674: LD_STRING DA-Roth-3a
34676: PPUSH
34677: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
34681: LD_EXP 30
34685: PPUSH
34686: LD_INT 4
34688: PPUSH
34689: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
34693: LD_EXP 30
34697: PPUSH
34698: LD_INT 257
34700: PPUSH
34701: LD_INT 198
34703: PPUSH
34704: CALL_OW 111
// AddComHold ( Kurt ) ;
34708: LD_EXP 30
34712: PPUSH
34713: CALL_OW 200
// end ; if tpUnit = Kikuchi then
34717: LD_VAR 0 1
34721: PUSH
34722: LD_EXP 15
34726: EQUAL
34727: IFFALSE 34780
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
34729: LD_EXP 15
34733: PPUSH
34734: LD_STRING DA1-Yam-1a
34736: PPUSH
34737: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34741: LD_EXP 28
34745: PPUSH
34746: LD_STRING DA-Roth-3
34748: PPUSH
34749: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
34753: LD_EXP 15
34757: PPUSH
34758: LD_INT 7
34760: PPUSH
34761: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
34765: LD_EXP 15
34769: PPUSH
34770: LD_INT 240
34772: PPUSH
34773: LD_INT 188
34775: PPUSH
34776: CALL_OW 111
// end ; if tpUnit = Frank then
34780: LD_VAR 0 1
34784: PUSH
34785: LD_EXP 14
34789: EQUAL
34790: IFFALSE 34852
// begin Say ( Frank , DA1-Frank-1a ) ;
34792: LD_EXP 14
34796: PPUSH
34797: LD_STRING DA1-Frank-1a
34799: PPUSH
34800: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34804: LD_EXP 28
34808: PPUSH
34809: LD_STRING DA-Roth-3a
34811: PPUSH
34812: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34816: LD_EXP 14
34820: PPUSH
34821: LD_INT 4
34823: PPUSH
34824: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34828: LD_EXP 14
34832: PPUSH
34833: LD_INT 257
34835: PPUSH
34836: LD_INT 198
34838: PPUSH
34839: CALL_OW 111
// AddComHold ( Frank ) ;
34843: LD_EXP 14
34847: PPUSH
34848: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34852: LD_EXP 64
34856: PUSH
34857: LD_INT 0
34859: EQUAL
34860: IFFALSE 34906
// begin Say ( JMM , DAa-JMM-1 ) ;
34862: LD_EXP 1
34866: PPUSH
34867: LD_STRING DAa-JMM-1
34869: PPUSH
34870: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34874: LD_EXP 1
34878: PPUSH
34879: LD_STRING DAa-JMM-1a
34881: PPUSH
34882: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34886: LD_EXP 1
34890: PPUSH
34891: LD_STRING DAa-JMM-1b
34893: PPUSH
34894: CALL_OW 88
// allianceFirstContact = 1 ;
34898: LD_ADDR_EXP 64
34902: PUSH
34903: LD_INT 1
34905: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34906: LD_VAR 0 1
34910: PUSH
34911: LD_VAR 0 2
34915: IN
34916: NOT
34917: IFFALSE 35227
// begin rnd = Rand ( 1 , 2 ) ;
34919: LD_ADDR_VAR 0 3
34923: PUSH
34924: LD_INT 1
34926: PPUSH
34927: LD_INT 2
34929: PPUSH
34930: CALL_OW 12
34934: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34935: LD_VAR 0 1
34939: PPUSH
34940: CALL_OW 258
34944: PUSH
34945: LD_INT 1
34947: EQUAL
34948: IFFALSE 35081
// begin if rnd = 1 then
34950: LD_VAR 0 3
34954: PUSH
34955: LD_INT 1
34957: EQUAL
34958: IFFALSE 35020
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34960: LD_VAR 0 1
34964: PPUSH
34965: LD_STRING DA1-Sol1-1a
34967: PPUSH
34968: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34972: LD_EXP 28
34976: PPUSH
34977: LD_STRING DA-Roth-3a
34979: PPUSH
34980: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34984: LD_VAR 0 1
34988: PPUSH
34989: LD_INT 4
34991: PPUSH
34992: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34996: LD_VAR 0 1
35000: PPUSH
35001: LD_INT 257
35003: PPUSH
35004: LD_INT 198
35006: PPUSH
35007: CALL_OW 111
// AddComHold ( tpUnit ) ;
35011: LD_VAR 0 1
35015: PPUSH
35016: CALL_OW 200
// end ; if rnd = 2 then
35020: LD_VAR 0 3
35024: PUSH
35025: LD_INT 2
35027: EQUAL
35028: IFFALSE 35081
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
35030: LD_VAR 0 1
35034: PPUSH
35035: LD_STRING DA1-Sol1-1b
35037: PPUSH
35038: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
35042: LD_EXP 28
35046: PPUSH
35047: LD_STRING DA-Roth-3
35049: PPUSH
35050: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
35054: LD_VAR 0 1
35058: PPUSH
35059: LD_INT 7
35061: PPUSH
35062: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
35066: LD_VAR 0 1
35070: PPUSH
35071: LD_INT 240
35073: PPUSH
35074: LD_INT 188
35076: PPUSH
35077: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
35081: LD_VAR 0 1
35085: PPUSH
35086: CALL_OW 258
35090: PUSH
35091: LD_INT 2
35093: EQUAL
35094: IFFALSE 35227
// begin if rnd = 1 then
35096: LD_VAR 0 3
35100: PUSH
35101: LD_INT 1
35103: EQUAL
35104: IFFALSE 35166
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
35106: LD_VAR 0 1
35110: PPUSH
35111: LD_STRING DA1-FSol1-1a
35113: PPUSH
35114: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
35118: LD_EXP 28
35122: PPUSH
35123: LD_STRING DA-Roth-3a
35125: PPUSH
35126: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
35130: LD_VAR 0 1
35134: PPUSH
35135: LD_INT 4
35137: PPUSH
35138: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
35142: LD_VAR 0 1
35146: PPUSH
35147: LD_INT 257
35149: PPUSH
35150: LD_INT 198
35152: PPUSH
35153: CALL_OW 111
// AddComHold ( tpUnit ) ;
35157: LD_VAR 0 1
35161: PPUSH
35162: CALL_OW 200
// end ; if rnd = 2 then
35166: LD_VAR 0 3
35170: PUSH
35171: LD_INT 2
35173: EQUAL
35174: IFFALSE 35227
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
35176: LD_VAR 0 1
35180: PPUSH
35181: LD_STRING DA1-FSol1-1b
35183: PPUSH
35184: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
35188: LD_EXP 28
35192: PPUSH
35193: LD_STRING DA-Roth-3
35195: PPUSH
35196: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
35200: LD_VAR 0 1
35204: PPUSH
35205: LD_INT 7
35207: PPUSH
35208: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
35212: LD_VAR 0 1
35216: PPUSH
35217: LD_INT 240
35219: PPUSH
35220: LD_INT 188
35222: PPUSH
35223: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
35227: LD_INT 1
35229: PPUSH
35230: LD_INT 7
35232: PPUSH
35233: LD_INT 2
35235: PPUSH
35236: LD_INT 1
35238: PPUSH
35239: CALL_OW 80
// InGameOff ;
35243: CALL_OW 9
// end ;
35247: PPOPN 3
35249: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
35250: LD_EXP 97
35254: PUSH
35255: LD_INT 94570
35257: GREATEREQUAL
35258: IFFALSE 35577
35260: GO 35262
35262: DISABLE
// begin DialogueOn ;
35263: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
35267: LD_INT 22
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 23
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 26
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 2
35299: PUSH
35300: LD_INT 25
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 25
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 25
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 25
35332: PUSH
35333: LD_INT 4
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 25
35342: PUSH
35343: LD_INT 5
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 25
35352: PUSH
35353: LD_INT 8
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: PPUSH
35375: CALL_OW 69
35379: PPUSH
35380: LD_STRING D11-Sol1-1
35382: PPUSH
35383: LD_STRING D5-FSol1-1
35385: PPUSH
35386: CALL 6912 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
35390: LD_EXP 26
35394: PPUSH
35395: LD_STRING D11-Pla-1
35397: PPUSH
35398: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
35402: LD_EXP 37
35406: PPUSH
35407: LD_STRING D11-Kov-1
35409: PPUSH
35410: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
35414: LD_EXP 26
35418: PPUSH
35419: LD_STRING D11-Pla-2
35421: PPUSH
35422: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
35426: LD_INT 22
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 23
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 26
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 25
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 25
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 25
35481: PUSH
35482: LD_INT 3
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 25
35491: PUSH
35492: LD_INT 4
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 25
35501: PUSH
35502: LD_INT 5
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 25
35511: PUSH
35512: LD_INT 8
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: PPUSH
35534: CALL_OW 69
35538: PPUSH
35539: LD_STRING D11-Sol1-2
35541: PPUSH
35542: LD_STRING D5-FSol1-1
35544: PPUSH
35545: CALL 6912 0 3
// Say ( JMM , D11-JMM-2 ) ;
35549: LD_EXP 1
35553: PPUSH
35554: LD_STRING D11-JMM-2
35556: PPUSH
35557: CALL_OW 88
// DialogueOff ;
35561: CALL_OW 7
// PreapreMehBehs ;
35565: CALL 5761 0 0
// missionStage = 5 ;
35569: LD_ADDR_EXP 101
35573: PUSH
35574: LD_INT 5
35576: ST_TO_ADDR
// end ;
35577: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
35578: LD_EXP 97
35582: PUSH
35583: LD_INT 105070
35585: GREATEREQUAL
35586: IFFALSE 35980
35588: GO 35590
35590: DISABLE
35591: LD_INT 0
35593: PPUSH
35594: PPUSH
// begin time = 0 0$00 ;
35595: LD_ADDR_VAR 0 2
35599: PUSH
35600: LD_INT 0
35602: ST_TO_ADDR
// DialogueOn ;
35603: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
35607: LD_EXP 26
35611: PPUSH
35612: LD_STRING D15-Pla-1
35614: PPUSH
35615: CALL_OW 94
// dec = Query ( Q15a ) ;
35619: LD_ADDR_VAR 0 1
35623: PUSH
35624: LD_STRING Q15a
35626: PPUSH
35627: CALL_OW 97
35631: ST_TO_ADDR
// if dec = 1 then
35632: LD_VAR 0 1
35636: PUSH
35637: LD_INT 1
35639: EQUAL
35640: IFFALSE 35661
// begin Say ( JMM , D15a-JMM-1 ) ;
35642: LD_EXP 1
35646: PPUSH
35647: LD_STRING D15a-JMM-1
35649: PPUSH
35650: CALL_OW 88
// YouLost ( Surrender ) ;
35654: LD_STRING Surrender
35656: PPUSH
35657: CALL_OW 104
// end ; if dec = 2 then
35661: LD_VAR 0 1
35665: PUSH
35666: LD_INT 2
35668: EQUAL
35669: IFFALSE 35699
// begin Say ( JMM , D15b-JMM-1 ) ;
35671: LD_EXP 1
35675: PPUSH
35676: LD_STRING D15b-JMM-1
35678: PPUSH
35679: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
35683: LD_EXP 26
35687: PPUSH
35688: LD_STRING D15b-Pla-1
35690: PPUSH
35691: CALL_OW 94
// DialogueOff ;
35695: CALL_OW 7
// end ; if dec = 3 then
35699: LD_VAR 0 1
35703: PUSH
35704: LD_INT 3
35706: EQUAL
35707: IFFALSE 35783
// begin Say ( JMM , D15c-JMM-1 ) ;
35709: LD_EXP 1
35713: PPUSH
35714: LD_STRING D15c-JMM-1
35716: PPUSH
35717: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
35721: LD_EXP 26
35725: PPUSH
35726: LD_STRING D15c-Pla-1
35728: PPUSH
35729: CALL_OW 94
// DialogueOff ;
35733: CALL_OW 7
// wait ( 0 0$15 ) ;
35737: LD_INT 525
35739: PPUSH
35740: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35744: LD_EXP 26
35748: PPUSH
35749: LD_STRING D18-Pla-1
35751: PPUSH
35752: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
35756: LD_INT 273
35758: PPUSH
35759: LD_EXP 1
35763: PPUSH
35764: CALL_OW 250
35768: PPUSH
35769: LD_EXP 1
35773: PPUSH
35774: CALL_OW 251
35778: PPUSH
35779: CALL_OW 116
// end ; if dec = 4 then
35783: LD_VAR 0 1
35787: PUSH
35788: LD_INT 4
35790: EQUAL
35791: IFFALSE 35829
// begin Say ( JMM , D15d-JMM-1 ) ;
35793: LD_EXP 1
35797: PPUSH
35798: LD_STRING D15d-JMM-1
35800: PPUSH
35801: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35805: LD_EXP 26
35809: PPUSH
35810: LD_STRING D15d-Pla-1
35812: PPUSH
35813: CALL_OW 94
// DialogueOff ;
35817: CALL_OW 7
// missionStage = 6 ;
35821: LD_ADDR_EXP 101
35825: PUSH
35826: LD_INT 6
35828: ST_TO_ADDR
// end ; if dec = 2 then
35829: LD_VAR 0 1
35833: PUSH
35834: LD_INT 2
35836: EQUAL
35837: IFFALSE 35910
// begin repeat wait ( 0 0$01 ) ;
35839: LD_INT 35
35841: PPUSH
35842: CALL_OW 67
// time = time + 0 0$01 ;
35846: LD_ADDR_VAR 0 2
35850: PUSH
35851: LD_VAR 0 2
35855: PUSH
35856: LD_INT 35
35858: PLUS
35859: ST_TO_ADDR
// until time >= 3 3$00 ;
35860: LD_VAR 0 2
35864: PUSH
35865: LD_INT 6300
35867: GREATEREQUAL
35868: IFFALSE 35839
// DialogueOn ;
35870: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35874: LD_EXP 1
35878: PPUSH
35879: LD_STRING D15d-JMM-1a
35881: PPUSH
35882: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35886: LD_EXP 26
35890: PPUSH
35891: LD_STRING D15d-Pla-1
35893: PPUSH
35894: CALL_OW 94
// DialogueOff ;
35898: CALL_OW 7
// missionStage = 6 ;
35902: LD_ADDR_EXP 101
35906: PUSH
35907: LD_INT 6
35909: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35910: LD_EXP 53
35914: PPUSH
35915: CALL_OW 302
35919: PUSH
35920: LD_EXP 53
35924: PPUSH
35925: CALL_OW 255
35929: PUSH
35930: LD_INT 1
35932: EQUAL
35933: AND
35934: IFFALSE 35980
// begin DialogueOn ;
35936: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35940: LD_EXP 1
35944: PPUSH
35945: LD_STRING D16-JMM-1
35947: PPUSH
35948: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35952: LD_EXP 53
35956: PPUSH
35957: LD_STRING D16-Friend-1
35959: PPUSH
35960: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35964: LD_EXP 1
35968: PPUSH
35969: LD_STRING D16-JMM-2
35971: PPUSH
35972: CALL_OW 88
// DialogueOff ;
35976: CALL_OW 7
// end ; end ;
35980: PPOPN 2
35982: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35983: LD_EXP 101
35987: PUSH
35988: LD_INT 6
35990: EQUAL
35991: PUSH
35992: LD_EXP 53
35996: PPUSH
35997: CALL_OW 302
36001: AND
36002: PUSH
36003: LD_EXP 53
36007: PPUSH
36008: CALL_OW 255
36012: PUSH
36013: LD_INT 1
36015: EQUAL
36016: AND
36017: IFFALSE 36654
36019: GO 36021
36021: DISABLE
36022: LD_INT 0
36024: PPUSH
// begin DialogueOn ;
36025: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36029: LD_INT 22
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 34
36044: PUSH
36045: LD_INT 8
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 35
36054: PUSH
36055: LD_INT 8
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PPUSH
36071: CALL_OW 69
36075: PUSH
36076: LD_INT 0
36078: GREATER
36079: IFFALSE 36103
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36081: LD_EXP 26
36085: PPUSH
36086: LD_STRING D16c-Pla-1
36088: PPUSH
36089: CALL_OW 94
// playerHaveRocket = 1 ;
36093: LD_ADDR_EXP 100
36097: PUSH
36098: LD_INT 1
36100: ST_TO_ADDR
// end else
36101: GO 36562
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
36103: LD_EXP 26
36107: PPUSH
36108: LD_STRING D16a-Pla-1
36110: PPUSH
36111: CALL_OW 94
// if IsOK ( Stevens ) then
36115: LD_EXP 3
36119: PPUSH
36120: CALL_OW 302
36124: IFFALSE 36140
// begin Say ( Stevens , D16a-Huck-1 ) ;
36126: LD_EXP 3
36130: PPUSH
36131: LD_STRING D16a-Huck-1
36133: PPUSH
36134: CALL_OW 88
// end else
36138: GO 36288
// begin if IsOk ( Baker ) then
36140: LD_EXP 21
36144: PPUSH
36145: CALL_OW 302
36149: IFFALSE 36165
// begin Say ( Baker , D16a-Huck-1 ) ;
36151: LD_EXP 21
36155: PPUSH
36156: LD_STRING D16a-Huck-1
36158: PPUSH
36159: CALL_OW 88
// end else
36163: GO 36288
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
36165: LD_INT 22
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 23
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 26
36187: PUSH
36188: LD_INT 1
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: LD_INT 25
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 25
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 25
36220: PUSH
36221: LD_INT 3
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 25
36230: PUSH
36231: LD_INT 4
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 25
36240: PUSH
36241: LD_INT 5
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 25
36250: PUSH
36251: LD_INT 8
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: PPUSH
36273: CALL_OW 69
36277: PPUSH
36278: LD_STRING D16a-Sol1-1
36280: PPUSH
36281: LD_STRING D5-FSol1-1
36283: PPUSH
36284: CALL 6912 0 3
// end ; end ; wait ( 0 0$30 ) ;
36288: LD_INT 1050
36290: PPUSH
36291: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36295: LD_EXP 26
36299: PPUSH
36300: LD_STRING D18-Pla-1
36302: PPUSH
36303: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36307: LD_ADDR_VAR 0 1
36311: PUSH
36312: LD_INT 22
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 21
36324: PUSH
36325: LD_INT 3
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 23
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: LD_INT 30
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 30
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: PPUSH
36376: CALL_OW 69
36380: ST_TO_ADDR
// if rocketTarget = 0 then
36381: LD_VAR 0 1
36385: PUSH
36386: LD_INT 0
36388: EQUAL
36389: IFFALSE 36465
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36391: LD_ADDR_VAR 0 1
36395: PUSH
36396: LD_INT 22
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 21
36408: PUSH
36409: LD_INT 3
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 23
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: LD_INT 30
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 30
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: PPUSH
36460: CALL_OW 69
36464: ST_TO_ADDR
// if rocketTarget = 0 then
36465: LD_VAR 0 1
36469: PUSH
36470: LD_INT 0
36472: EQUAL
36473: IFFALSE 36527
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36475: LD_ADDR_VAR 0 1
36479: PUSH
36480: LD_INT 22
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 21
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 23
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 50
36512: PUSH
36513: EMPTY
36514: LIST
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: PPUSH
36522: CALL_OW 69
36526: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36527: LD_INT 273
36529: PPUSH
36530: LD_VAR 0 1
36534: PUSH
36535: LD_INT 1
36537: ARRAY
36538: PPUSH
36539: CALL_OW 250
36543: PPUSH
36544: LD_VAR 0 1
36548: PUSH
36549: LD_INT 1
36551: ARRAY
36552: PPUSH
36553: CALL_OW 251
36557: PPUSH
36558: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
36562: LD_EXP 1
36566: PPUSH
36567: LD_STRING D16a-JMM-1a
36569: PPUSH
36570: CALL_OW 88
// DialogueOff ;
36574: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
36578: LD_EXP 53
36582: PPUSH
36583: LD_INT 3
36585: PPUSH
36586: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
36590: LD_EXP 53
36594: PPUSH
36595: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
36599: LD_EXP 53
36603: PPUSH
36604: CALL_OW 121
// wait ( 0 0$1 ) ;
36608: LD_INT 35
36610: PPUSH
36611: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
36615: LD_EXP 53
36619: PPUSH
36620: LD_INT 18
36622: PPUSH
36623: CALL_OW 113
// wait ( 0 0$3 ) ;
36627: LD_INT 105
36629: PPUSH
36630: CALL_OW 67
// DialogueOn ;
36634: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
36638: LD_EXP 1
36642: PPUSH
36643: LD_STRING D16a-JMM-1
36645: PPUSH
36646: CALL_OW 88
// DialogueOff ;
36650: CALL_OW 7
// end ;
36654: PPOPN 1
36656: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
36657: LD_EXP 53
36661: PPUSH
36662: CALL_OW 255
36666: PUSH
36667: LD_INT 3
36669: EQUAL
36670: IFFALSE 36777
36672: GO 36674
36674: DISABLE
36675: LD_INT 0
36677: PPUSH
// begin enable ;
36678: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
36679: LD_ADDR_VAR 0 1
36683: PUSH
36684: LD_INT 22
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 21
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 56
36706: PUSH
36707: EMPTY
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: PPUSH
36715: CALL_OW 69
36719: PUSH
36720: FOR_IN
36721: IFFALSE 36775
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
36723: LD_VAR 0 1
36727: PPUSH
36728: LD_EXP 53
36732: PPUSH
36733: CALL_OW 296
36737: PUSH
36738: LD_INT 8
36740: LESS
36741: IFFALSE 36773
// begin disable ;
36743: DISABLE
// DialogueOn ;
36744: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
36748: LD_EXP 53
36752: PPUSH
36753: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
36757: LD_EXP 53
36761: PPUSH
36762: LD_STRING D16a-Friend-1
36764: PPUSH
36765: CALL_OW 88
// DialogueOff ;
36769: CALL_OW 7
// end ; end ;
36773: GO 36720
36775: POP
36776: POP
// end ;
36777: PPOPN 1
36779: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36780: LD_EXP 101
36784: PUSH
36785: LD_INT 6
36787: EQUAL
36788: PUSH
36789: LD_EXP 53
36793: PPUSH
36794: CALL_OW 255
36798: PUSH
36799: LD_INT 1
36801: EQUAL
36802: NOT
36803: AND
36804: IFFALSE 37184
36806: GO 36808
36808: DISABLE
36809: LD_INT 0
36811: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36812: LD_INT 22
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 34
36827: PUSH
36828: LD_INT 8
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 35
36837: PUSH
36838: LD_INT 8
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PPUSH
36854: CALL_OW 69
36858: PUSH
36859: LD_INT 0
36861: GREATER
36862: IFFALSE 36886
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36864: LD_EXP 26
36868: PPUSH
36869: LD_STRING D16c-Pla-1
36871: PPUSH
36872: CALL_OW 94
// playerHaveRocket = 1 ;
36876: LD_ADDR_EXP 100
36880: PUSH
36881: LD_INT 1
36883: ST_TO_ADDR
// end else
36884: GO 37184
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36886: LD_EXP 26
36890: PPUSH
36891: LD_STRING D16b-Pla-1
36893: PPUSH
36894: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36898: LD_EXP 1
36902: PPUSH
36903: LD_STRING D16b-JMM-1
36905: PPUSH
36906: CALL_OW 88
// wait ( 0 0$15 ) ;
36910: LD_INT 525
36912: PPUSH
36913: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36917: LD_EXP 26
36921: PPUSH
36922: LD_STRING D18-Pla-1
36924: PPUSH
36925: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36929: LD_ADDR_VAR 0 1
36933: PUSH
36934: LD_INT 22
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 21
36946: PUSH
36947: LD_INT 3
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 23
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 2
36966: PUSH
36967: LD_INT 30
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 30
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: PPUSH
36998: CALL_OW 69
37002: ST_TO_ADDR
// if rocketTarget = 0 then
37003: LD_VAR 0 1
37007: PUSH
37008: LD_INT 0
37010: EQUAL
37011: IFFALSE 37087
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
37013: LD_ADDR_VAR 0 1
37017: PUSH
37018: LD_INT 22
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 21
37030: PUSH
37031: LD_INT 3
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 23
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: LD_INT 30
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 30
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: PPUSH
37082: CALL_OW 69
37086: ST_TO_ADDR
// if rocketTarget = 0 then
37087: LD_VAR 0 1
37091: PUSH
37092: LD_INT 0
37094: EQUAL
37095: IFFALSE 37149
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
37097: LD_ADDR_VAR 0 1
37101: PUSH
37102: LD_INT 22
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 21
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 23
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 50
37134: PUSH
37135: EMPTY
37136: LIST
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: PPUSH
37144: CALL_OW 69
37148: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
37149: LD_INT 273
37151: PPUSH
37152: LD_VAR 0 1
37156: PUSH
37157: LD_INT 1
37159: ARRAY
37160: PPUSH
37161: CALL_OW 250
37165: PPUSH
37166: LD_VAR 0 1
37170: PUSH
37171: LD_INT 1
37173: ARRAY
37174: PPUSH
37175: CALL_OW 251
37179: PPUSH
37180: CALL_OW 116
// end ; end ;
37184: PPOPN 1
37186: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
37187: LD_EXP 97
37191: PUSH
37192: LD_INT 168070
37194: GREATEREQUAL
37195: PUSH
37196: LD_EXP 101
37200: PUSH
37201: LD_INT 6
37203: GREATEREQUAL
37204: AND
37205: PUSH
37206: LD_EXP 85
37210: PUSH
37211: LD_INT 1
37213: EQUAL
37214: AND
37215: IFFALSE 37245
37217: GO 37219
37219: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
37220: LD_EXP 26
37224: PPUSH
37225: LD_STRING D18-Pla-1
37227: PPUSH
37228: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
37232: LD_INT 273
37234: PPUSH
37235: LD_INT 244
37237: PPUSH
37238: LD_INT 187
37240: PPUSH
37241: CALL_OW 116
// end ;
37245: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
37246: LD_EXP 101
37250: PUSH
37251: LD_INT 5
37253: GREATEREQUAL
37254: IFFALSE 37447
37256: GO 37258
37258: DISABLE
37259: LD_INT 0
37261: PPUSH
// begin enable ;
37262: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
37263: LD_ADDR_VAR 0 1
37267: PUSH
37268: LD_INT 22
37270: PUSH
37271: LD_INT 6
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 30
37280: PUSH
37281: LD_INT 37
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 57
37290: PUSH
37291: EMPTY
37292: LIST
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: PPUSH
37299: CALL_OW 69
37303: PUSH
37304: FOR_IN
37305: IFFALSE 37359
// begin if See ( 1 , i ) then
37307: LD_INT 1
37309: PPUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: CALL_OW 292
37319: IFFALSE 37357
// begin disable ;
37321: DISABLE
// DialogueOn ;
37322: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
37326: LD_EXP 1
37330: PPUSH
37331: LD_STRING D17a-JMM-1
37333: PPUSH
37334: CALL_OW 88
// DialogueOff ;
37338: CALL_OW 7
// behemothStatus = 1 ;
37342: LD_ADDR_EXP 60
37346: PUSH
37347: LD_INT 1
37349: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
37350: LD_STRING M4a
37352: PPUSH
37353: CALL_OW 337
// end ; end ;
37357: GO 37304
37359: POP
37360: POP
// for i in ruBehs do
37361: LD_ADDR_VAR 0 1
37365: PUSH
37366: LD_EXP 59
37370: PUSH
37371: FOR_IN
37372: IFFALSE 37445
// begin if See ( 1 , i ) then
37374: LD_INT 1
37376: PPUSH
37377: LD_VAR 0 1
37381: PPUSH
37382: CALL_OW 292
37386: IFFALSE 37443
// begin disable ;
37388: DISABLE
// DialogueOn ;
37389: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
37393: LD_EXP 1
37397: PPUSH
37398: LD_STRING D17b-JMM-1
37400: PPUSH
37401: CALL_OW 88
// DialogueOff ;
37405: CALL_OW 7
// behemothStatus = 0 ;
37409: LD_ADDR_EXP 60
37413: PUSH
37414: LD_INT 0
37416: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
37417: LD_STRING M4b
37419: PPUSH
37420: CALL_OW 337
// wait ( 0 0$2 ) ;
37424: LD_INT 70
37426: PPUSH
37427: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
37431: LD_EXP 26
37435: PPUSH
37436: LD_STRING D18-Pla-1
37438: PPUSH
37439: CALL_OW 88
// end ; end ;
37443: GO 37371
37445: POP
37446: POP
// end ;
37447: PPOPN 1
37449: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
37450: LD_EXP 26
37454: PPUSH
37455: CALL_OW 301
37459: PUSH
37460: LD_EXP 27
37464: PPUSH
37465: CALL_OW 301
37469: AND
37470: PUSH
37471: LD_INT 22
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 21
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 50
37493: PUSH
37494: EMPTY
37495: LIST
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: PPUSH
37502: CALL_OW 69
37506: PUSH
37507: LD_INT 7
37509: PUSH
37510: LD_INT 8
37512: PUSH
37513: LD_INT 9
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PUSH
37521: LD_OWVAR 67
37525: ARRAY
37526: LESS
37527: AND
37528: IFFALSE 38204
37530: GO 37532
37532: DISABLE
37533: LD_INT 0
37535: PPUSH
37536: PPUSH
37537: PPUSH
// begin russianAI = 0 ;
37538: LD_ADDR_EXP 86
37542: PUSH
37543: LD_INT 0
37545: ST_TO_ADDR
// russianEscape = 1 ;
37546: LD_ADDR_EXP 90
37550: PUSH
37551: LD_INT 1
37553: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
37554: LD_INT 1
37556: PPUSH
37557: LD_INT 3
37559: PPUSH
37560: LD_INT 1
37562: PPUSH
37563: LD_INT 1
37565: PPUSH
37566: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
37570: LD_ADDR_VAR 0 1
37574: PUSH
37575: LD_INT 22
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 21
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 24
37597: PUSH
37598: LD_INT 900
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: PPUSH
37610: CALL_OW 69
37614: PUSH
37615: FOR_IN
37616: IFFALSE 37647
// if GetSex ( i ) = sex_male then
37618: LD_VAR 0 1
37622: PPUSH
37623: CALL_OW 258
37627: PUSH
37628: LD_INT 1
37630: EQUAL
37631: IFFALSE 37645
// begin tmp = i ;
37633: LD_ADDR_VAR 0 2
37637: PUSH
37638: LD_VAR 0 1
37642: ST_TO_ADDR
// break ;
37643: GO 37647
// end ;
37645: GO 37615
37647: POP
37648: POP
// if tmp = 0 then
37649: LD_VAR 0 2
37653: PUSH
37654: LD_INT 0
37656: EQUAL
37657: IFFALSE 37711
// begin uc_side = 3 ;
37659: LD_ADDR_OWVAR 20
37663: PUSH
37664: LD_INT 3
37666: ST_TO_ADDR
// uc_nation = 3 ;
37667: LD_ADDR_OWVAR 21
37671: PUSH
37672: LD_INT 3
37674: ST_TO_ADDR
// hc_name =  ;
37675: LD_ADDR_OWVAR 26
37679: PUSH
37680: LD_STRING 
37682: ST_TO_ADDR
// hc_gallery =  ;
37683: LD_ADDR_OWVAR 33
37687: PUSH
37688: LD_STRING 
37690: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
37691: LD_INT 1
37693: PPUSH
37694: LD_INT 10
37696: PPUSH
37697: CALL_OW 381
// tmp = CreateHuman ;
37701: LD_ADDR_VAR 0 2
37705: PUSH
37706: CALL_OW 44
37710: ST_TO_ADDR
// end ; DialogueOn ;
37711: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
37715: LD_VAR 0 2
37719: PPUSH
37720: LD_STRING DSurrenderRussians-RSol1-1a
37722: PPUSH
37723: CALL_OW 88
// DialogueOff ;
37727: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
37731: LD_INT 22
37733: PUSH
37734: LD_INT 3
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 21
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 69
37759: PPUSH
37760: CALL_OW 122
// wait ( 0 0$1 ) ;
37764: LD_INT 35
37766: PPUSH
37767: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
37771: LD_INT 22
37773: PUSH
37774: LD_INT 3
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 21
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PPUSH
37795: CALL_OW 69
37799: PPUSH
37800: LD_INT 25
37802: PPUSH
37803: CALL_OW 173
// wait ( 0 0$10 ) ;
37807: LD_INT 350
37809: PPUSH
37810: CALL_OW 67
// PrepareOmarArmy ;
37814: CALL 38824 0 0
// missionStage = 7 ;
37818: LD_ADDR_EXP 101
37822: PUSH
37823: LD_INT 7
37825: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37826: LD_INT 157
37828: PPUSH
37829: LD_INT 8
37831: PPUSH
37832: LD_INT 1
37834: PPUSH
37835: LD_INT 8
37837: NEG
37838: PPUSH
37839: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37843: LD_INT 157
37845: PPUSH
37846: LD_INT 8
37848: PPUSH
37849: CALL_OW 84
// DialogueOn ;
37853: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37857: LD_EXP 32
37861: PPUSH
37862: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37866: LD_EXP 1
37870: PPUSH
37871: LD_STRING D19-JMM-1
37873: PPUSH
37874: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37878: LD_INT 22
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 26
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: LD_INT 25
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 25
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 25
37923: PUSH
37924: LD_INT 3
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 25
37933: PUSH
37934: LD_INT 4
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 25
37943: PUSH
37944: LD_INT 5
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 25
37953: PUSH
37954: LD_INT 8
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: PPUSH
37975: CALL_OW 69
37979: PPUSH
37980: LD_STRING D19-Sol1-1
37982: PPUSH
37983: LD_STRING D5-FSol1-1
37985: PPUSH
37986: CALL 6912 0 3
// Say ( JMM , D19-JMM-2 ) ;
37990: LD_EXP 1
37994: PPUSH
37995: LD_STRING D19-JMM-2
37997: PPUSH
37998: CALL_OW 88
// DialogueOff ;
38002: CALL_OW 7
// LaunchMines ;
38006: CALL 38313 0 0
// wait ( 0 0$3 ) ;
38010: LD_INT 105
38012: PPUSH
38013: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
38017: LD_ADDR_VAR 0 3
38021: PUSH
38022: LD_INT 22
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 21
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PPUSH
38046: CALL_OW 69
38050: PUSH
38051: LD_INT 22
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 21
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 25
38073: PUSH
38074: LD_INT 4
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: LIST
38085: PPUSH
38086: CALL_OW 69
38090: DIFF
38091: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
38092: LD_ADDR_VAR 0 3
38096: PUSH
38097: LD_VAR 0 3
38101: PUSH
38102: LD_INT 22
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 21
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PPUSH
38126: CALL_OW 69
38130: ADD
38131: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
38132: LD_VAR 0 3
38136: PPUSH
38137: LD_INT 178
38139: PPUSH
38140: LD_INT 66
38142: PPUSH
38143: CALL_OW 114
// wait ( 0 0$10 ) ;
38147: LD_INT 350
38149: PPUSH
38150: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
38154: LD_INT 22
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 21
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 25
38176: PUSH
38177: LD_INT 4
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: PPUSH
38189: CALL_OW 69
38193: PPUSH
38194: LD_INT 177
38196: PPUSH
38197: LD_INT 69
38199: PPUSH
38200: CALL_OW 158
// end ;
38204: PPOPN 3
38206: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
38207: LD_EXP 90
38211: PUSH
38212: LD_INT 1
38214: EQUAL
38215: PUSH
38216: LD_INT 25
38218: PPUSH
38219: LD_INT 22
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 21
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PPUSH
38243: CALL_OW 70
38247: AND
38248: IFFALSE 38310
38250: GO 38252
38252: DISABLE
38253: LD_INT 0
38255: PPUSH
// begin enable ;
38256: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
38257: LD_ADDR_VAR 0 1
38261: PUSH
38262: LD_INT 25
38264: PPUSH
38265: LD_INT 22
38267: PUSH
38268: LD_INT 3
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 21
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PPUSH
38289: CALL_OW 70
38293: PUSH
38294: FOR_IN
38295: IFFALSE 38308
// RemoveUnit ( i ) ;
38297: LD_VAR 0 1
38301: PPUSH
38302: CALL_OW 64
38306: GO 38294
38308: POP
38309: POP
// end ;
38310: PPOPN 1
38312: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
38313: LD_INT 0
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
38320: LD_ADDR_VAR 0 2
38324: PUSH
38325: LD_INT 168
38327: PUSH
38328: LD_INT 18
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 169
38337: PUSH
38338: LD_INT 20
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 167
38347: PUSH
38348: LD_INT 20
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 164
38357: PUSH
38358: LD_INT 18
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 164
38367: PUSH
38368: LD_INT 19
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 163
38377: PUSH
38378: LD_INT 19
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 164
38387: PUSH
38388: LD_INT 21
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 165
38397: PUSH
38398: LD_INT 21
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 163
38407: PUSH
38408: LD_INT 20
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 164
38417: PUSH
38418: LD_INT 22
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 162
38427: PUSH
38428: LD_INT 20
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
38448: LD_ADDR_VAR 0 3
38452: PUSH
38453: LD_INT 169
38455: PUSH
38456: LD_INT 34
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 169
38465: PUSH
38466: LD_INT 35
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 167
38475: PUSH
38476: LD_INT 32
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 170
38485: PUSH
38486: LD_INT 31
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 173
38495: PUSH
38496: LD_INT 35
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 174
38505: PUSH
38506: LD_INT 39
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// for i = 1 to mines_pos do
38521: LD_ADDR_VAR 0 4
38525: PUSH
38526: DOUBLE
38527: LD_INT 1
38529: DEC
38530: ST_TO_ADDR
38531: LD_VAR 0 2
38535: PUSH
38536: FOR_TO
38537: IFFALSE 38749
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
38539: LD_VAR 0 2
38543: PUSH
38544: LD_VAR 0 4
38548: ARRAY
38549: PUSH
38550: LD_INT 1
38552: ARRAY
38553: PPUSH
38554: LD_VAR 0 2
38558: PUSH
38559: LD_VAR 0 4
38563: ARRAY
38564: PUSH
38565: LD_INT 2
38567: ARRAY
38568: PPUSH
38569: LD_INT 1
38571: PPUSH
38572: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38576: LD_INT 1
38578: PPUSH
38579: LD_INT 3
38581: PPUSH
38582: CALL_OW 12
38586: PPUSH
38587: CALL_OW 67
// if i < mines_pos then
38591: LD_VAR 0 4
38595: PUSH
38596: LD_VAR 0 2
38600: LESS
38601: IFFALSE 38639
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
38603: LD_VAR 0 2
38607: PUSH
38608: LD_VAR 0 4
38612: ARRAY
38613: PUSH
38614: LD_INT 1
38616: ARRAY
38617: PPUSH
38618: LD_VAR 0 2
38622: PUSH
38623: LD_VAR 0 4
38627: ARRAY
38628: PUSH
38629: LD_INT 2
38631: ARRAY
38632: PPUSH
38633: CALL_OW 348
38637: GO 38747
// begin for j = 1 to mines_pos1 do
38639: LD_ADDR_VAR 0 5
38643: PUSH
38644: DOUBLE
38645: LD_INT 1
38647: DEC
38648: ST_TO_ADDR
38649: LD_VAR 0 3
38653: PUSH
38654: FOR_TO
38655: IFFALSE 38711
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
38657: LD_VAR 0 3
38661: PUSH
38662: LD_VAR 0 5
38666: ARRAY
38667: PUSH
38668: LD_INT 1
38670: ARRAY
38671: PPUSH
38672: LD_VAR 0 3
38676: PUSH
38677: LD_VAR 0 5
38681: ARRAY
38682: PUSH
38683: LD_INT 2
38685: ARRAY
38686: PPUSH
38687: LD_INT 1
38689: PPUSH
38690: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38694: LD_INT 1
38696: PPUSH
38697: LD_INT 3
38699: PPUSH
38700: CALL_OW 12
38704: PPUSH
38705: CALL_OW 67
// end ;
38709: GO 38654
38711: POP
38712: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
38713: LD_VAR 0 2
38717: PUSH
38718: LD_VAR 0 4
38722: ARRAY
38723: PUSH
38724: LD_INT 1
38726: ARRAY
38727: PPUSH
38728: LD_VAR 0 2
38732: PUSH
38733: LD_VAR 0 4
38737: ARRAY
38738: PUSH
38739: LD_INT 2
38741: ARRAY
38742: PPUSH
38743: CALL_OW 347
// end ; end ;
38747: GO 38536
38749: POP
38750: POP
// end ;
38751: LD_VAR 0 1
38755: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
38756: LD_EXP 101
38760: PUSH
38761: LD_INT 7
38763: EQUAL
38764: PUSH
38765: LD_EXP 31
38769: PPUSH
38770: CALL_OW 301
38774: AND
38775: PUSH
38776: LD_EXP 32
38780: PPUSH
38781: CALL_OW 302
38785: AND
38786: IFFALSE 38823
38788: GO 38790
38790: DISABLE
// begin DialogueOn ;
38791: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38795: LD_EXP 1
38799: PPUSH
38800: LD_STRING D19a-JMM-1
38802: PPUSH
38803: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38807: LD_EXP 32
38811: PPUSH
38812: LD_STRING D19a-Hke-1
38814: PPUSH
38815: CALL_OW 88
// DialogueOff ;
38819: CALL_OW 7
// end ; end_of_file
38823: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38824: LD_INT 0
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
// uc_side = 2 ;
38831: LD_ADDR_OWVAR 20
38835: PUSH
38836: LD_INT 2
38838: ST_TO_ADDR
// uc_nation = 2 ;
38839: LD_ADDR_OWVAR 21
38843: PUSH
38844: LD_INT 2
38846: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38847: LD_ADDR_EXP 31
38851: PUSH
38852: LD_STRING Omar
38854: PPUSH
38855: LD_INT 0
38857: PPUSH
38858: CALL 6656 0 2
38862: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38863: LD_ADDR_EXP 32
38867: PUSH
38868: LD_STRING Heike
38870: PPUSH
38871: LD_INT 0
38873: PPUSH
38874: CALL 6656 0 2
38878: ST_TO_ADDR
// if KhatamStatus = 1 then
38879: LD_EXP 83
38883: PUSH
38884: LD_INT 1
38886: EQUAL
38887: IFFALSE 38902
// Khatam = NewCharacter ( Khatam ) ;
38889: LD_ADDR_EXP 33
38893: PUSH
38894: LD_STRING Khatam
38896: PPUSH
38897: CALL_OW 25
38901: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38902: LD_EXP 32
38906: PPUSH
38907: LD_INT 26
38909: PPUSH
38910: LD_INT 0
38912: PPUSH
38913: CALL_OW 49
// PlaceUnitArea ( Khatam , ArabianSpawn , false ) ;
38917: LD_EXP 33
38921: PPUSH
38922: LD_INT 26
38924: PPUSH
38925: LD_INT 0
38927: PPUSH
38928: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38932: LD_ADDR_VAR 0 2
38936: PUSH
38937: DOUBLE
38938: LD_INT 1
38940: DEC
38941: ST_TO_ADDR
38942: LD_INT 5
38944: PUSH
38945: LD_INT 6
38947: PUSH
38948: LD_INT 7
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: PUSH
38956: LD_OWVAR 67
38960: ARRAY
38961: PUSH
38962: FOR_TO
38963: IFFALSE 39018
// begin hc_name =  ;
38965: LD_ADDR_OWVAR 26
38969: PUSH
38970: LD_STRING 
38972: ST_TO_ADDR
// hc_gallery =  ;
38973: LD_ADDR_OWVAR 33
38977: PUSH
38978: LD_STRING 
38980: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38981: LD_INT 0
38983: PPUSH
38984: LD_INT 8
38986: PPUSH
38987: CALL_OW 381
// un = CreateHuman ;
38991: LD_ADDR_VAR 0 3
38995: PUSH
38996: CALL_OW 44
39000: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
39001: LD_VAR 0 3
39005: PPUSH
39006: LD_INT 26
39008: PPUSH
39009: LD_INT 0
39011: PPUSH
39012: CALL_OW 49
// end ;
39016: GO 38962
39018: POP
39019: POP
// for i := 1 to 4 do
39020: LD_ADDR_VAR 0 2
39024: PUSH
39025: DOUBLE
39026: LD_INT 1
39028: DEC
39029: ST_TO_ADDR
39030: LD_INT 4
39032: PUSH
39033: FOR_TO
39034: IFFALSE 39089
// begin hc_name =  ;
39036: LD_ADDR_OWVAR 26
39040: PUSH
39041: LD_STRING 
39043: ST_TO_ADDR
// hc_gallery =  ;
39044: LD_ADDR_OWVAR 33
39048: PUSH
39049: LD_STRING 
39051: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
39052: LD_INT 0
39054: PPUSH
39055: LD_INT 8
39057: PPUSH
39058: CALL_OW 384
// un = CreateHuman ;
39062: LD_ADDR_VAR 0 3
39066: PUSH
39067: CALL_OW 44
39071: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
39072: LD_VAR 0 3
39076: PPUSH
39077: LD_INT 26
39079: PPUSH
39080: LD_INT 0
39082: PPUSH
39083: CALL_OW 49
// end ;
39087: GO 39033
39089: POP
39090: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
39091: LD_ADDR_VAR 0 2
39095: PUSH
39096: DOUBLE
39097: LD_INT 1
39099: DEC
39100: ST_TO_ADDR
39101: LD_INT 8
39103: PUSH
39104: LD_INT 9
39106: PUSH
39107: LD_INT 10
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: PUSH
39115: LD_OWVAR 67
39119: ARRAY
39120: PUSH
39121: FOR_TO
39122: IFFALSE 39210
// begin vc_engine = 3 ;
39124: LD_ADDR_OWVAR 39
39128: PUSH
39129: LD_INT 3
39131: ST_TO_ADDR
// vc_control = 5 ;
39132: LD_ADDR_OWVAR 38
39136: PUSH
39137: LD_INT 5
39139: ST_TO_ADDR
// vc_chassis = 14 ;
39140: LD_ADDR_OWVAR 37
39144: PUSH
39145: LD_INT 14
39147: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
39148: LD_ADDR_OWVAR 40
39152: PUSH
39153: LD_INT 27
39155: PUSH
39156: LD_INT 26
39158: PUSH
39159: LD_INT 28
39161: PUSH
39162: LD_INT 25
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: PPUSH
39174: LD_INT 3
39176: PPUSH
39177: CALL_OW 12
39181: ARRAY
39182: ST_TO_ADDR
// veh = CreateVehicle ;
39183: LD_ADDR_VAR 0 4
39187: PUSH
39188: CALL_OW 45
39192: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
39193: LD_VAR 0 4
39197: PPUSH
39198: LD_INT 26
39200: PPUSH
39201: LD_INT 0
39203: PPUSH
39204: CALL_OW 49
// end ;
39208: GO 39121
39210: POP
39211: POP
// vc_chassis := 31 ;
39212: LD_ADDR_OWVAR 37
39216: PUSH
39217: LD_INT 31
39219: ST_TO_ADDR
// vc_control := control_rider ;
39220: LD_ADDR_OWVAR 38
39224: PUSH
39225: LD_INT 4
39227: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
39228: LD_ADDR_VAR 0 5
39232: PUSH
39233: CALL_OW 45
39237: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
39238: LD_VAR 0 5
39242: PPUSH
39243: LD_INT 26
39245: PPUSH
39246: LD_INT 0
39248: PPUSH
39249: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
39253: LD_EXP 31
39257: PPUSH
39258: LD_VAR 0 5
39262: PPUSH
39263: CALL_OW 52
// end ; end_of_file
39267: LD_VAR 0 1
39271: RET
// every 1 1$30 trigger missionStage > 0 do
39272: LD_EXP 101
39276: PUSH
39277: LD_INT 0
39279: GREATER
39280: IFFALSE 39307
39282: GO 39284
39284: DISABLE
// begin enable ;
39285: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
39286: LD_INT 3
39288: PPUSH
39289: LD_INT 5
39291: PPUSH
39292: CALL_OW 12
39296: PPUSH
39297: LD_INT 27
39299: PPUSH
39300: LD_INT 1
39302: PPUSH
39303: CALL_OW 55
// end ; end_of_file
39307: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
39308: LD_EXP 101
39312: PUSH
39313: LD_INT 7
39315: EQUAL
39316: PUSH
39317: LD_INT 22
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 21
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PPUSH
39341: CALL_OW 69
39345: PUSH
39346: LD_INT 0
39348: EQUAL
39349: AND
39350: PUSH
39351: LD_INT 22
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 21
39363: PUSH
39364: LD_INT 2
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 50
39373: PUSH
39374: EMPTY
39375: LIST
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: LIST
39381: PPUSH
39382: CALL_OW 69
39386: PUSH
39387: LD_INT 0
39389: EQUAL
39390: AND
39391: IFFALSE 39880
39393: GO 39395
39395: DISABLE
// begin DialogueOn ;
39396: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
39400: LD_EXP 1
39404: PPUSH
39405: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
39409: LD_EXP 1
39413: PPUSH
39414: LD_STRING D20-JMM-1
39416: PPUSH
39417: CALL_OW 88
// if IsOK ( Joan ) then
39421: LD_EXP 2
39425: PPUSH
39426: CALL_OW 302
39430: IFFALSE 39444
// Say ( Joan , D20-Joan-1 ) ;
39432: LD_EXP 2
39436: PPUSH
39437: LD_STRING D20-Joan-1
39439: PPUSH
39440: CALL_OW 88
// if IsOk ( Lisa ) then
39444: LD_EXP 4
39448: PPUSH
39449: CALL_OW 302
39453: IFFALSE 39467
// Say ( Lisa , D20-Lisa-1 ) ;
39455: LD_EXP 4
39459: PPUSH
39460: LD_STRING D20-Lisa-1
39462: PPUSH
39463: CALL_OW 88
// if IsOk ( Donaldson ) then
39467: LD_EXP 5
39471: PPUSH
39472: CALL_OW 302
39476: IFFALSE 39490
// Say ( Donaldson , D20-Don-1 ) ;
39478: LD_EXP 5
39482: PPUSH
39483: LD_STRING D20-Don-1
39485: PPUSH
39486: CALL_OW 88
// if IsOK ( Cornel ) then
39490: LD_EXP 12
39494: PPUSH
39495: CALL_OW 302
39499: IFFALSE 39513
// Say ( Cornel , D20-Corn-1 ) ;
39501: LD_EXP 12
39505: PPUSH
39506: LD_STRING D20-Corn-1
39508: PPUSH
39509: CALL_OW 88
// if IsOk ( Denis ) then
39513: LD_EXP 8
39517: PPUSH
39518: CALL_OW 302
39522: IFFALSE 39536
// Say ( Denis , D20-Den-1 ) ;
39524: LD_EXP 8
39528: PPUSH
39529: LD_STRING D20-Den-1
39531: PPUSH
39532: CALL_OW 88
// if IsOk ( Bobby ) then
39536: LD_EXP 6
39540: PPUSH
39541: CALL_OW 302
39545: IFFALSE 39559
// Say ( Bobby , D20-Bobby-1 ) ;
39547: LD_EXP 6
39551: PPUSH
39552: LD_STRING D20-Bobby-1
39554: PPUSH
39555: CALL_OW 88
// if IsOk ( Gladstone ) then
39559: LD_EXP 10
39563: PPUSH
39564: CALL_OW 302
39568: IFFALSE 39582
// Say ( Gladstone , D20-Glad-1 ) ;
39570: LD_EXP 10
39574: PPUSH
39575: LD_STRING D20-Glad-1
39577: PPUSH
39578: CALL_OW 88
// if IsOk ( Cyrus ) then
39582: LD_EXP 7
39586: PPUSH
39587: CALL_OW 302
39591: IFFALSE 39605
// Say ( Cyrus , D20-Cyrus-1 ) ;
39593: LD_EXP 7
39597: PPUSH
39598: LD_STRING D20-Cyrus-1
39600: PPUSH
39601: CALL_OW 88
// if IsOk ( Stevens ) then
39605: LD_EXP 3
39609: PPUSH
39610: CALL_OW 302
39614: IFFALSE 39628
// Say ( Stevens , D20-Huck-1 ) ;
39616: LD_EXP 3
39620: PPUSH
39621: LD_STRING D20-Huck-1
39623: PPUSH
39624: CALL_OW 88
// if IsOk ( Brown ) then
39628: LD_EXP 9
39632: PPUSH
39633: CALL_OW 302
39637: IFFALSE 39651
// Say ( Brown , D20-Brown-1 ) ;
39639: LD_EXP 9
39643: PPUSH
39644: LD_STRING D20-Brown-1
39646: PPUSH
39647: CALL_OW 88
// if IsOk ( Gary ) then
39651: LD_EXP 13
39655: PPUSH
39656: CALL_OW 302
39660: IFFALSE 39674
// Say ( Gary , D20-Gary-1 ) ;
39662: LD_EXP 13
39666: PPUSH
39667: LD_STRING D20-Gary-1
39669: PPUSH
39670: CALL_OW 88
// if IsOk ( Connie ) then
39674: LD_EXP 16
39678: PPUSH
39679: CALL_OW 302
39683: IFFALSE 39697
// Say ( Connie , D20-Con-1 ) ;
39685: LD_EXP 16
39689: PPUSH
39690: LD_STRING D20-Con-1
39692: PPUSH
39693: CALL_OW 88
// if IsOk ( Kurt ) then
39697: LD_EXP 30
39701: PPUSH
39702: CALL_OW 302
39706: IFFALSE 39720
// Say ( Kurt , D20-Kurt-1 ) ;
39708: LD_EXP 30
39712: PPUSH
39713: LD_STRING D20-Kurt-1
39715: PPUSH
39716: CALL_OW 88
// if IsOk ( Kikuchi ) then
39720: LD_EXP 15
39724: PPUSH
39725: CALL_OW 302
39729: IFFALSE 39743
// Say ( Kikuchi , D20-Yam-1 ) ;
39731: LD_EXP 15
39735: PPUSH
39736: LD_STRING D20-Yam-1
39738: PPUSH
39739: CALL_OW 88
// if IsOk ( Frank ) then
39743: LD_EXP 14
39747: PPUSH
39748: CALL_OW 302
39752: IFFALSE 39766
// Say ( Frank , D20-Frank-1 ) ;
39754: LD_EXP 14
39758: PPUSH
39759: LD_STRING D20-Frank-1
39761: PPUSH
39762: CALL_OW 88
// DialogueOff ;
39766: CALL_OW 7
// if AllianceEscape = 1 then
39770: LD_EXP 91
39774: PUSH
39775: LD_INT 1
39777: EQUAL
39778: IFFALSE 39792
// AddMedal ( Roth , 1 ) else
39780: LD_STRING Roth
39782: PPUSH
39783: LD_INT 1
39785: PPUSH
39786: CALL_OW 101
39790: GO 39803
// AddMedal ( Roth , - 1 ) ;
39792: LD_STRING Roth
39794: PPUSH
39795: LD_INT 1
39797: NEG
39798: PPUSH
39799: CALL_OW 101
// if behemothStatus = 1 then
39803: LD_EXP 60
39807: PUSH
39808: LD_INT 1
39810: EQUAL
39811: IFFALSE 39825
// AddMedal ( Project , 1 ) else
39813: LD_STRING Project
39815: PPUSH
39816: LD_INT 1
39818: PPUSH
39819: CALL_OW 101
39823: GO 39836
// AddMedal ( Project , - 1 ) ;
39825: LD_STRING Project
39827: PPUSH
39828: LD_INT 1
39830: NEG
39831: PPUSH
39832: CALL_OW 101
// if unitLost = 0 then
39836: LD_EXP 98
39840: PUSH
39841: LD_INT 0
39843: EQUAL
39844: IFFALSE 39858
// AddMedal ( NoLosses , 1 ) else
39846: LD_STRING NoLosses
39848: PPUSH
39849: LD_INT 1
39851: PPUSH
39852: CALL_OW 101
39856: GO 39869
// AddMedal ( NoLosses , - 1 ) ;
39858: LD_STRING NoLosses
39860: PPUSH
39861: LD_INT 1
39863: NEG
39864: PPUSH
39865: CALL_OW 101
// GiveMedals ( MAIN ) ;
39869: LD_STRING MAIN
39871: PPUSH
39872: CALL_OW 102
// YouWin ;
39876: CALL_OW 103
// end ; end_of_file
39880: END
// every 0 0$1 trigger IsDead ( JMM ) do
39881: LD_EXP 1
39885: PPUSH
39886: CALL_OW 301
39890: IFFALSE 39902
39892: GO 39894
39894: DISABLE
// YouLost ( JMM ) ;
39895: LD_STRING JMM
39897: PPUSH
39898: CALL_OW 104
39902: END
