// export JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ; export Powell ; export others13 , others13Omega ; export heroesFromOmega , Baker , Gordon , Peter ; export NewJMMVeh , NewJMMGirlVeh ; export Platonov , Yakotich , Roth , Burlak , Kurt , Omar , Heike , Khatam ; export Vsevolod , sewiVeh ; export Kozlov ; export Kovalyuk , Oblukov , Bystrov , Fadeev , Gleb , Petrosyan , Petrovova , Kuzmov , Mikhail , Furmanov , Belkov ; export Simms , Scholtze , Kirilenkova , Kapitsova , Karamazov ; export LegionFriend , LegionFriendStatus ; export legionVehicles ; export arControler ; export ruVehicles ; export ruBehMehs , ruBehs ; export behemothStatus ; export russianVehicles ; export allianceVehicles ; export allianceControler ; export allianceFirstContact ; export amUnitsSkillTab , amUnitsAttack , amUnitsForJMM ; export powellBuildBase ; export powellAttacks ; export powellUnloadCargo ; export powellWarm ; export startAttacks ; export powellVeh , centerPowell , powBomb ; export BurlakStatus , StevensStatus ; export JMMVeh , JMMGirlVeh ; export JMMGirl , KappaStatus , JMMGirlStatus ; export KhatamStatus ; export LegionAI , AllianceAI , RussianAI ; export LegionTarget , AllianceTarget , RussianTarget ; export russianEscape , allianceEscape ; export RothStatus ; export legionDestroyedBuilds , russianDestroyedBuilds , allianceDestroyedBuilds ; export timerStatus , timeAction ; export unitLost ; export legionRocket ; export playerHaveRocket ; export missionStage ; export blockEvent1 ; export cinematics , skip ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// JMMVeh = LoadVariable ( 14_JMMVeh_1 , [ ] ) ;
   8: LD_ADDR_EXP 78
  12: PUSH
  13: LD_STRING 14_JMMVeh_1
  15: PPUSH
  16: EMPTY
  17: PPUSH
  18: CALL_OW 30
  22: ST_TO_ADDR
// JMMGirlVeh = LoadVariable ( 14_JMMGirlVeh_1 , [ ] ) ;
  23: LD_ADDR_EXP 79
  27: PUSH
  28: LD_STRING 14_JMMGirlVeh_1
  30: PPUSH
  31: EMPTY
  32: PPUSH
  33: CALL_OW 30
  37: ST_TO_ADDR
// JMMGirl = LoadVariable ( 14_JMMGirl_1 , 3 ) ;
  38: LD_ADDR_EXP 80
  42: PUSH
  43: LD_STRING 14_JMMGirl_1
  45: PPUSH
  46: LD_INT 3
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// JMMGirlStatus = LoadVariable ( 14_JMMGirlStatus_1 , 0 ) ;
  54: LD_ADDR_EXP 82
  58: PUSH
  59: LD_STRING 14_JMMGirlStatus_1
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// KappaStatus = LoadVariable ( 14_KappaStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 81
  74: PUSH
  75: LD_STRING 14_KappaStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// KhatamStatus = LoadVariable ( 10_KhatamStatus_1 , 0 ) ;
  86: LD_ADDR_EXP 83
  90: PUSH
  91: LD_STRING 10_KhatamStatus_1
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// BurlakStatus = LoadVariable ( 13_BurlakStatus_1 , 0 ) ;
 102: LD_ADDR_EXP 76
 106: PUSH
 107: LD_STRING 13_BurlakStatus_1
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// StevensStatus = LoadVariable ( 13_StevensStatus_1 , 0 ) ;
 118: LD_ADDR_EXP 77
 122: PUSH
 123: LD_STRING 13_StevensStatus_1
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: CALL_OW 30
 133: ST_TO_ADDR
// amUnitsSkillTab = [ ] ;
 134: LD_ADDR_EXP 65
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// amUnitsAttack = [ ] ;
 141: LD_ADDR_EXP 66
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// amUnitsForJMM = [ ] ;
 148: LD_ADDR_EXP 67
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// startAttacks = 0 ;
 155: LD_ADDR_EXP 72
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// powellBuildBase = 0 ;
 163: LD_ADDR_EXP 68
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// powellUnloadCargo = 0 ;
 171: LD_ADDR_EXP 70
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// powellAttacks = 0 ;
 179: LD_ADDR_EXP 69
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// centerPowell = 0 ;
 187: LD_ADDR_EXP 74
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// powellWarm = 0 ;
 195: LD_ADDR_EXP 71
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// LegionFriendStatus = 0 ;
 203: LD_ADDR_EXP 54
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// RothStatus = 1 ;
 211: LD_ADDR_EXP 92
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// allianceFirstContact = 0 ;
 219: LD_ADDR_EXP 64
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// legionVehicles = [ ] ;
 227: LD_ADDR_EXP 55
 231: PUSH
 232: EMPTY
 233: ST_TO_ADDR
// russianVehicles = [ ] ;
 234: LD_ADDR_EXP 61
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// allianceVehicles = [ ] ;
 241: LD_ADDR_EXP 62
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// legionDestroyedBuilds = [ ] ;
 248: LD_ADDR_EXP 93
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianDestroyedBuilds = [ ] ;
 255: LD_ADDR_EXP 94
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// allianceDestroyedBuilds = [ ] ;
 262: LD_ADDR_EXP 95
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ruVehicles = [ ] ;
 269: LD_ADDR_EXP 57
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ruBehMehs = [ ] ;
 276: LD_ADDR_EXP 58
 280: PUSH
 281: EMPTY
 282: ST_TO_ADDR
// ruBehs = [ ] ;
 283: LD_ADDR_EXP 59
 287: PUSH
 288: EMPTY
 289: ST_TO_ADDR
// missionStage = 0 ;
 290: LD_ADDR_EXP 101
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// behemothStatus = 0 ;
 298: LD_ADDR_EXP 60
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// unitLost = 0 ;
 306: LD_ADDR_EXP 98
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// LegionAI = 1 ;
 314: LD_ADDR_EXP 84
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// AllianceAI = 1 ;
 322: LD_ADDR_EXP 85
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// RussianAI = 1 ;
 330: LD_ADDR_EXP 86
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// timerStatus = 0 ;
 338: LD_ADDR_EXP 96
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
// timeAction = 0 0$00 ;
 346: LD_ADDR_EXP 97
 350: PUSH
 351: LD_INT 0
 353: ST_TO_ADDR
// playerHaveRocket = 0 ;
 354: LD_ADDR_EXP 100
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// blockEvent1 = 0 ;
 362: LD_ADDR_EXP 102
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// debugMode = 0 ;
 370: LD_ADDR_EXP 105
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// cinematics := false ;
 378: LD_ADDR_EXP 103
 382: PUSH
 383: LD_INT 0
 385: ST_TO_ADDR
// skip := false ;
 386: LD_ADDR_EXP 104
 390: PUSH
 391: LD_INT 0
 393: ST_TO_ADDR
// PrepareHeroes ;
 394: CALL 743 0 0
// PrepareHeroesFromEpsilon ;
 398: CALL 1280 0 0
// PrepareRandoms ;
 402: CALL 1624 0 0
// PrepareLegion ;
 406: CALL 3867 0 0
// PrepareRussians ;
 410: CALL 4264 0 0
// PrepareAlliance ;
 414: CALL 6011 0 0
// PrepareDifficulty ;
 418: CALL 7556 0 0
// SetBName ( RuDep2 , zhukov ) ;
 422: LD_INT 23
 424: PPUSH
 425: LD_STRING zhukov
 427: PPUSH
 428: CALL_OW 500
// end ;
 432: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 433: LD_EXP 105
 437: PUSH
 438: LD_INT 1
 440: EQUAL
 441: IFFALSE 740
 443: GO 445
 445: DISABLE
 446: LD_INT 0
 448: PPUSH
// begin enable ;
 449: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 21
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 501
// SetLives ( i , 1000 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: LD_INT 1000
 494: PPUSH
 495: CALL_OW 234
 499: GO 484
 501: POP
 502: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 503: LD_ADDR_VAR 0 1
 507: PUSH
 508: LD_INT 22
 510: PUSH
 511: LD_INT 1
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 2
 520: PUSH
 521: LD_INT 30
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 30
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PPUSH
 550: CALL_OW 69
 554: PUSH
 555: FOR_IN
 556: IFFALSE 580
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 558: LD_VAR 0 1
 562: PPUSH
 563: CALL_OW 274
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_INT 9999
 573: PPUSH
 574: CALL_OW 277
 578: GO 555
 580: POP
 581: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 582: LD_ADDR_VAR 0 1
 586: PUSH
 587: LD_INT 22
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: LD_INT 2
 599: PUSH
 600: LD_INT 30
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 30
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PPUSH
 629: CALL_OW 69
 633: PUSH
 634: FOR_IN
 635: IFFALSE 659
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 637: LD_VAR 0 1
 641: PPUSH
 642: CALL_OW 274
 646: PPUSH
 647: LD_INT 2
 649: PPUSH
 650: LD_INT 9999
 652: PPUSH
 653: CALL_OW 277
 657: GO 634
 659: POP
 660: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 661: LD_ADDR_VAR 0 1
 665: PUSH
 666: LD_INT 22
 668: PUSH
 669: LD_INT 1
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 30
 691: PUSH
 692: LD_INT 1
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: LIST
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: PPUSH
 708: CALL_OW 69
 712: PUSH
 713: FOR_IN
 714: IFFALSE 738
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 716: LD_VAR 0 1
 720: PPUSH
 721: CALL_OW 274
 725: PPUSH
 726: LD_INT 3
 728: PPUSH
 729: LD_INT 9999
 731: PPUSH
 732: CALL_OW 277
 736: GO 713
 738: POP
 739: POP
// end ; end_of_file
 740: PPOPN 1
 742: END
// export function PrepareHeroes ; begin
 743: LD_INT 0
 745: PPUSH
// uc_side = 1 ;
 746: LD_ADDR_OWVAR 20
 750: PUSH
 751: LD_INT 1
 753: ST_TO_ADDR
// uc_nation = 1 ;
 754: LD_ADDR_OWVAR 21
 758: PUSH
 759: LD_INT 1
 761: ST_TO_ADDR
// if JMMVeh = [ ] then
 762: LD_EXP 78
 766: PUSH
 767: EMPTY
 768: EQUAL
 769: IFFALSE 815
// begin vc_engine = 3 ;
 771: LD_ADDR_OWVAR 39
 775: PUSH
 776: LD_INT 3
 778: ST_TO_ADDR
// vc_control = 1 ;
 779: LD_ADDR_OWVAR 38
 783: PUSH
 784: LD_INT 1
 786: ST_TO_ADDR
// vc_chassis = 5 ;
 787: LD_ADDR_OWVAR 37
 791: PUSH
 792: LD_INT 5
 794: ST_TO_ADDR
// vc_weapon = 9 ;
 795: LD_ADDR_OWVAR 40
 799: PUSH
 800: LD_INT 9
 802: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 803: LD_ADDR_EXP 24
 807: PUSH
 808: CALL_OW 45
 812: ST_TO_ADDR
// end else
 813: GO 897
// begin vc_chassis = JMMVeh [ 1 ] [ 1 ] ;
 815: LD_ADDR_OWVAR 37
 819: PUSH
 820: LD_EXP 78
 824: PUSH
 825: LD_INT 1
 827: ARRAY
 828: PUSH
 829: LD_INT 1
 831: ARRAY
 832: ST_TO_ADDR
// vc_engine = JMMVeh [ 2 ] [ 1 ] ;
 833: LD_ADDR_OWVAR 39
 837: PUSH
 838: LD_EXP 78
 842: PUSH
 843: LD_INT 2
 845: ARRAY
 846: PUSH
 847: LD_INT 1
 849: ARRAY
 850: ST_TO_ADDR
// vc_control = JMMVeh [ 3 ] [ 1 ] ;
 851: LD_ADDR_OWVAR 38
 855: PUSH
 856: LD_EXP 78
 860: PUSH
 861: LD_INT 3
 863: ARRAY
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: ST_TO_ADDR
// vc_weapon = JMMVeh [ 4 ] [ 1 ] ;
 869: LD_ADDR_OWVAR 40
 873: PUSH
 874: LD_EXP 78
 878: PUSH
 879: LD_INT 4
 881: ARRAY
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: ST_TO_ADDR
// NewJMMVeh = CreateVehicle ;
 887: LD_ADDR_EXP 24
 891: PUSH
 892: CALL_OW 45
 896: ST_TO_ADDR
// end ; if not JMMGirlVeh = [ ] then
 897: LD_EXP 79
 901: PUSH
 902: EMPTY
 903: EQUAL
 904: NOT
 905: IFFALSE 989
// begin vc_chassis = JMMGirlVeh [ 1 ] [ 1 ] ;
 907: LD_ADDR_OWVAR 37
 911: PUSH
 912: LD_EXP 79
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: ST_TO_ADDR
// vc_engine = JMMGirlVeh [ 2 ] [ 1 ] ;
 925: LD_ADDR_OWVAR 39
 929: PUSH
 930: LD_EXP 79
 934: PUSH
 935: LD_INT 2
 937: ARRAY
 938: PUSH
 939: LD_INT 1
 941: ARRAY
 942: ST_TO_ADDR
// vc_control = JMMGirlVeh [ 3 ] [ 1 ] ;
 943: LD_ADDR_OWVAR 38
 947: PUSH
 948: LD_EXP 79
 952: PUSH
 953: LD_INT 3
 955: ARRAY
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: ST_TO_ADDR
// vc_weapon = JMMGirlVeh [ 4 ] [ 1 ] ;
 961: LD_ADDR_OWVAR 40
 965: PUSH
 966: LD_EXP 79
 970: PUSH
 971: LD_INT 4
 973: ARRAY
 974: PUSH
 975: LD_INT 1
 977: ARRAY
 978: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
 979: LD_ADDR_EXP 25
 983: PUSH
 984: CALL_OW 45
 988: ST_TO_ADDR
// end ; SetDir ( NewJMMVeh , 0 ) ;
 989: LD_EXP 24
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL_OW 233
// SetDir ( NewJMMGirlVeh , 0 ) ;
1001: LD_EXP 25
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 233
// PlaceUnitXY ( NewJMMVeh , 99 , 154 , false ) ;
1013: LD_EXP 24
1017: PPUSH
1018: LD_INT 99
1020: PPUSH
1021: LD_INT 154
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL_OW 48
// if JMMGirlVeh then
1031: LD_EXP 79
1035: IFFALSE 1055
// PlaceUnitXY ( NewJMMGirlVeh , 98 , 159 , false ) ;
1037: LD_EXP 25
1041: PPUSH
1042: LD_INT 98
1044: PPUSH
1045: LD_INT 159
1047: PPUSH
1048: LD_INT 0
1050: PPUSH
1051: CALL_OW 48
// JMM = PrepareUnit ( 14_JMM , true ) ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_STRING 14_JMM
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: CALL 6656 0 2
1070: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , NewJMMVeh ) ;
1071: LD_EXP 1
1075: PPUSH
1076: LD_EXP 24
1080: PPUSH
1081: CALL_OW 52
// if not JMMGirlVeh = [ ] then
1085: LD_EXP 79
1089: PUSH
1090: EMPTY
1091: EQUAL
1092: NOT
1093: IFFALSE 1215
// begin if JMMGirl = 1 then
1095: LD_EXP 80
1099: PUSH
1100: LD_INT 1
1102: EQUAL
1103: IFFALSE 1135
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
1105: LD_ADDR_EXP 2
1109: PUSH
1110: LD_STRING 14_Joan
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: CALL 6656 0 2
1120: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
1121: LD_EXP 2
1125: PPUSH
1126: LD_EXP 25
1130: PPUSH
1131: CALL_OW 52
// end ; if JMMGirl = 2 then
1135: LD_EXP 80
1139: PUSH
1140: LD_INT 2
1142: EQUAL
1143: IFFALSE 1175
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
1145: LD_ADDR_EXP 4
1149: PUSH
1150: LD_STRING 14_Lisa
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL 6656 0 2
1160: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
1161: LD_EXP 4
1165: PPUSH
1166: LD_EXP 25
1170: PPUSH
1171: CALL_OW 52
// end ; if JMMGirl = 3 then
1175: LD_EXP 80
1179: PUSH
1180: LD_INT 3
1182: EQUAL
1183: IFFALSE 1215
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_STRING 14_Connie
1192: PPUSH
1193: LD_INT 1
1195: PPUSH
1196: CALL 6656 0 2
1200: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
1201: LD_EXP 16
1205: PPUSH
1206: LD_EXP 25
1210: PPUSH
1211: CALL_OW 52
// end ; end ; uc_side = 4 ;
1215: LD_ADDR_OWVAR 20
1219: PUSH
1220: LD_INT 4
1222: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1223: LD_ADDR_EXP 17
1227: PUSH
1228: LD_STRING Powell
1230: PPUSH
1231: LD_INT 0
1233: PPUSH
1234: CALL 6656 0 2
1238: ST_TO_ADDR
// PlaceUnitXYR ( Powell , 42 , 62 , 5 , false ) ;
1239: LD_EXP 17
1243: PPUSH
1244: LD_INT 42
1246: PPUSH
1247: LD_INT 62
1249: PPUSH
1250: LD_INT 5
1252: PPUSH
1253: LD_INT 0
1255: PPUSH
1256: CALL_OW 50
// ComTurnXY ( Powell , 43 , 63 ) ;
1260: LD_EXP 17
1264: PPUSH
1265: LD_INT 43
1267: PPUSH
1268: LD_INT 63
1270: PPUSH
1271: CALL_OW 118
// end ;
1275: LD_VAR 0 1
1279: RET
// export function PrepareHeroesFromEpsilon ; begin
1280: LD_INT 0
1282: PPUSH
// Lisa = PrepareUnitEpsilon ( Lisa ) ;
1283: LD_ADDR_EXP 4
1287: PUSH
1288: LD_STRING Lisa
1290: PPUSH
1291: CALL 6713 0 1
1295: ST_TO_ADDR
// Donaldson = PrepareUnitEpsilon ( Donaldson ) ;
1296: LD_ADDR_EXP 5
1300: PUSH
1301: LD_STRING Donaldson
1303: PPUSH
1304: CALL 6713 0 1
1308: ST_TO_ADDR
// Bobby = PrepareUnitEpsilon ( Bobby ) ;
1309: LD_ADDR_EXP 6
1313: PUSH
1314: LD_STRING Bobby
1316: PPUSH
1317: CALL 6713 0 1
1321: ST_TO_ADDR
// Cyrus = PrepareUnitEpsilon ( Cyrus ) ;
1322: LD_ADDR_EXP 7
1326: PUSH
1327: LD_STRING Cyrus
1329: PPUSH
1330: CALL 6713 0 1
1334: ST_TO_ADDR
// Denis = PrepareUnitEpsilon ( Denis ) ;
1335: LD_ADDR_EXP 8
1339: PUSH
1340: LD_STRING Denis
1342: PPUSH
1343: CALL 6713 0 1
1347: ST_TO_ADDR
// Brown = PrepareUnitEpsilon ( Brown ) ;
1348: LD_ADDR_EXP 9
1352: PUSH
1353: LD_STRING Brown
1355: PPUSH
1356: CALL 6713 0 1
1360: ST_TO_ADDR
// Gladstone = PrepareUnitEpsilon ( Gladstone ) ;
1361: LD_ADDR_EXP 10
1365: PUSH
1366: LD_STRING Gladstone
1368: PPUSH
1369: CALL 6713 0 1
1373: ST_TO_ADDR
// Houten = PrepareUnitEpsilon ( Houten ) ;
1374: LD_ADDR_EXP 11
1378: PUSH
1379: LD_STRING Houten
1381: PPUSH
1382: CALL 6713 0 1
1386: ST_TO_ADDR
// Cornel = PrepareUnitEpsilon ( Cornel ) ;
1387: LD_ADDR_EXP 12
1391: PUSH
1392: LD_STRING Cornel
1394: PPUSH
1395: CALL 6713 0 1
1399: ST_TO_ADDR
// Gary = PrepareUnitEpsilon ( Gary ) ;
1400: LD_ADDR_EXP 13
1404: PUSH
1405: LD_STRING Gary
1407: PPUSH
1408: CALL 6713 0 1
1412: ST_TO_ADDR
// Frank = PrepareUnitEpsilon ( Frank ) ;
1413: LD_ADDR_EXP 14
1417: PUSH
1418: LD_STRING Frank
1420: PPUSH
1421: CALL 6713 0 1
1425: ST_TO_ADDR
// Kikuchi = PrepareUnitEpsilon ( Kikuchi ) ;
1426: LD_ADDR_EXP 15
1430: PUSH
1431: LD_STRING Kikuchi
1433: PPUSH
1434: CALL 6713 0 1
1438: ST_TO_ADDR
// PlaceUnitArea ( Lisa , PowellBaseSpawn , false ) ;
1439: LD_EXP 4
1443: PPUSH
1444: LD_INT 6
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: CALL_OW 49
// PlaceUnitArea ( Donaldson , PowellBaseSpawn , false ) ;
1454: LD_EXP 5
1458: PPUSH
1459: LD_INT 6
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// PlaceUnitArea ( Bobby , PowellBaseSpawn , false ) ;
1469: LD_EXP 6
1473: PPUSH
1474: LD_INT 6
1476: PPUSH
1477: LD_INT 0
1479: PPUSH
1480: CALL_OW 49
// PlaceUnitArea ( Cyrus , PowellBaseSpawn , false ) ;
1484: LD_EXP 7
1488: PPUSH
1489: LD_INT 6
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 49
// PlaceUnitArea ( Denis , PowellBaseSpawn , false ) ;
1499: LD_EXP 8
1503: PPUSH
1504: LD_INT 6
1506: PPUSH
1507: LD_INT 0
1509: PPUSH
1510: CALL_OW 49
// PlaceUnitArea ( Brown , PowellBaseSpawn , false ) ;
1514: LD_EXP 9
1518: PPUSH
1519: LD_INT 6
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 49
// PlaceUnitArea ( Gladstone , PowellBaseSpawn , false ) ;
1529: LD_EXP 10
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// PlaceUnitArea ( Houten , PowellBaseSpawn , false ) ;
1544: LD_EXP 11
1548: PPUSH
1549: LD_INT 6
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: CALL_OW 49
// PlaceUnitArea ( Cornel , PowellBaseSpawn , false ) ;
1559: LD_EXP 12
1563: PPUSH
1564: LD_INT 6
1566: PPUSH
1567: LD_INT 0
1569: PPUSH
1570: CALL_OW 49
// PlaceUnitArea ( Gary , PowellBaseSpawn , false ) ;
1574: LD_EXP 13
1578: PPUSH
1579: LD_INT 6
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// PlaceUnitArea ( Frank , PowellBaseSpawn , false ) ;
1589: LD_EXP 14
1593: PPUSH
1594: LD_INT 6
1596: PPUSH
1597: LD_INT 0
1599: PPUSH
1600: CALL_OW 49
// PlaceUnitArea ( Kikuchi , PowellBaseSpawn , false ) ;
1604: LD_EXP 15
1608: PPUSH
1609: LD_INT 6
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL_OW 49
// end ;
1619: LD_VAR 0 1
1623: RET
// export function PrepareRandoms ; var i , un , tmp , heroLenght ; begin
1624: LD_INT 0
1626: PPUSH
1627: PPUSH
1628: PPUSH
1629: PPUSH
1630: PPUSH
// uc_side = 4 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 4
1638: ST_TO_ADDR
// uc_nation = 1 ;
1639: LD_ADDR_OWVAR 21
1643: PUSH
1644: LD_INT 1
1646: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13s_others ) ;
1647: LD_ADDR_EXP 18
1651: PUSH
1652: LD_STRING 13s_others
1654: PPUSH
1655: CALL_OW 31
1659: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: LD_INT 22
1667: PUSH
1668: LD_INT 4
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: LD_INT 21
1677: PUSH
1678: LD_INT 1
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PPUSH
1689: CALL_OW 69
1693: PUSH
1694: LD_EXP 17
1698: PUSH
1699: EMPTY
1700: LIST
1701: DIFF
1702: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 4
1712: PPUSH
1713: CALL 6843 0 1
1717: ST_TO_ADDR
// if others13 >= 8 then
1718: LD_EXP 18
1722: PUSH
1723: LD_INT 8
1725: GREATEREQUAL
1726: IFFALSE 1787
// begin for i = 1 to 8 do
1728: LD_ADDR_VAR 0 2
1732: PUSH
1733: DOUBLE
1734: LD_INT 1
1736: DEC
1737: ST_TO_ADDR
1738: LD_INT 8
1740: PUSH
1741: FOR_TO
1742: IFFALSE 1783
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1744: LD_EXP 18
1748: PUSH
1749: LD_INT 1
1751: ARRAY
1752: PPUSH
1753: LD_INT 6
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1763: LD_ADDR_EXP 18
1767: PUSH
1768: LD_EXP 18
1772: PPUSH
1773: LD_INT 1
1775: PPUSH
1776: CALL_OW 3
1780: ST_TO_ADDR
// end ;
1781: GO 1741
1783: POP
1784: POP
// end else
1785: GO 1846
// begin for i = 1 to others13 do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: DOUBLE
1793: LD_INT 1
1795: DEC
1796: ST_TO_ADDR
1797: LD_EXP 18
1801: PUSH
1802: FOR_TO
1803: IFFALSE 1844
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1805: LD_EXP 18
1809: PUSH
1810: LD_INT 1
1812: ARRAY
1813: PPUSH
1814: LD_INT 6
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1824: LD_ADDR_EXP 18
1828: PUSH
1829: LD_EXP 18
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: CALL_OW 3
1841: ST_TO_ADDR
// end ;
1842: GO 1802
1844: POP
1845: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
1846: LD_ADDR_VAR 0 4
1850: PUSH
1851: LD_INT 22
1853: PUSH
1854: LD_INT 4
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 21
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 69
1879: PUSH
1880: LD_EXP 17
1884: PUSH
1885: EMPTY
1886: LIST
1887: DIFF
1888: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
1889: LD_ADDR_VAR 0 5
1893: PUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: CALL 6843 0 1
1903: ST_TO_ADDR
// if others13 >= 6 then
1904: LD_EXP 18
1908: PUSH
1909: LD_INT 6
1911: GREATEREQUAL
1912: IFFALSE 1973
// begin for i = 1 to 6 do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_INT 6
1926: PUSH
1927: FOR_TO
1928: IFFALSE 1969
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1930: LD_EXP 18
1934: PUSH
1935: LD_INT 1
1937: ARRAY
1938: PPUSH
1939: LD_INT 6
1941: PPUSH
1942: LD_INT 0
1944: PPUSH
1945: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
1949: LD_ADDR_EXP 18
1953: PUSH
1954: LD_EXP 18
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL_OW 3
1966: ST_TO_ADDR
// end ;
1967: GO 1927
1969: POP
1970: POP
// end else
1971: GO 2032
// begin for i = 1 to others13 do
1973: LD_ADDR_VAR 0 2
1977: PUSH
1978: DOUBLE
1979: LD_INT 1
1981: DEC
1982: ST_TO_ADDR
1983: LD_EXP 18
1987: PUSH
1988: FOR_TO
1989: IFFALSE 2030
// begin PlaceUnitArea ( others13 [ 1 ] , PowellBaseSpawn , false ) ;
1991: LD_EXP 18
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: LD_INT 6
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 49
// others13 = Delete ( others13 , 1 ) ;
2010: LD_ADDR_EXP 18
2014: PUSH
2015: LD_EXP 18
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL_OW 3
2027: ST_TO_ADDR
// end ;
2028: GO 1988
2030: POP
2031: POP
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
2032: LD_ADDR_VAR 0 4
2036: PUSH
2037: LD_INT 22
2039: PUSH
2040: LD_INT 4
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 21
2049: PUSH
2050: LD_INT 1
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PPUSH
2061: CALL_OW 69
2065: PUSH
2066: LD_EXP 17
2070: PUSH
2071: EMPTY
2072: LIST
2073: DIFF
2074: ST_TO_ADDR
// heroLenght = TabLenght ( tmp ) ;
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 4
2084: PPUSH
2085: CALL 6843 0 1
2089: ST_TO_ADDR
// if heroLenght < 19 then
2090: LD_VAR 0 5
2094: PUSH
2095: LD_INT 19
2097: LESS
2098: IFFALSE 2196
// for i = 1 to 19 - heroLenght do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: DOUBLE
2106: LD_INT 1
2108: DEC
2109: ST_TO_ADDR
2110: LD_INT 19
2112: PUSH
2113: LD_VAR 0 5
2117: MINUS
2118: PUSH
2119: FOR_TO
2120: IFFALSE 2194
// begin hc_gallery =  ;
2122: LD_ADDR_OWVAR 33
2126: PUSH
2127: LD_STRING 
2129: ST_TO_ADDR
// hc_name =  ;
2130: LD_ADDR_OWVAR 26
2134: PUSH
2135: LD_STRING 
2137: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 6 , 8 ) ) ;
2138: LD_INT 0
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: LD_INT 4
2146: PPUSH
2147: CALL_OW 12
2151: PPUSH
2152: LD_INT 6
2154: PPUSH
2155: LD_INT 8
2157: PPUSH
2158: CALL_OW 12
2162: PPUSH
2163: CALL_OW 380
// un = CreateHuman ;
2167: LD_ADDR_VAR 0 3
2171: PUSH
2172: CALL_OW 44
2176: ST_TO_ADDR
// PlaceUnitArea ( un , PowellBaseSpawn , false ) ;
2177: LD_VAR 0 3
2181: PPUSH
2182: LD_INT 6
2184: PPUSH
2185: LD_INT 0
2187: PPUSH
2188: CALL_OW 49
// end ;
2192: GO 2119
2194: POP
2195: POP
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell , JMM , Joan , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
2196: LD_ADDR_VAR 0 4
2200: PUSH
2201: LD_INT 22
2203: PUSH
2204: LD_INT 4
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 21
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PUSH
2230: LD_EXP 17
2234: PUSH
2235: LD_EXP 1
2239: PUSH
2240: LD_EXP 2
2244: PUSH
2245: LD_EXP 3
2249: PUSH
2250: LD_EXP 4
2254: PUSH
2255: LD_EXP 5
2259: PUSH
2260: LD_EXP 6
2264: PUSH
2265: LD_EXP 7
2269: PUSH
2270: LD_EXP 8
2274: PUSH
2275: LD_EXP 9
2279: PUSH
2280: LD_EXP 10
2284: PUSH
2285: LD_EXP 11
2289: PUSH
2290: LD_EXP 12
2294: PUSH
2295: LD_EXP 13
2299: PUSH
2300: LD_EXP 14
2304: PUSH
2305: LD_EXP 15
2309: PUSH
2310: LD_EXP 16
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: DIFF
2334: ST_TO_ADDR
// amUnitsSkillTab = SortBySkill ( tmp , true ) ;
2335: LD_ADDR_EXP 65
2339: PUSH
2340: LD_VAR 0 4
2344: PPUSH
2345: LD_INT 1
2347: PPUSH
2348: CALL 7189 0 2
2352: ST_TO_ADDR
// for i = 1 to 8 do
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 8
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2397
// amUnitsAttack = amUnitsAttack ^ amUnitsSkillTab [ i ] [ 1 ] ;
2369: LD_ADDR_EXP 66
2373: PUSH
2374: LD_EXP 66
2378: PUSH
2379: LD_EXP 65
2383: PUSH
2384: LD_VAR 0 2
2388: ARRAY
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
2395: GO 2366
2397: POP
2398: POP
// SetClass ( amUnitsAttack , 1 ) ;
2399: LD_EXP 66
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: CALL_OW 336
// end ;
2411: LD_VAR 0 1
2415: RET
// export function PrepareSupportFromKappa ; var i , veh ; begin
2416: LD_INT 0
2418: PPUSH
2419: PPUSH
2420: PPUSH
// uc_side = 1 ;
2421: LD_ADDR_OWVAR 20
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// uc_nation = 1 ;
2429: LD_ADDR_OWVAR 21
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// for i := 1 to 5 do
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: DOUBLE
2443: LD_INT 1
2445: DEC
2446: ST_TO_ADDR
2447: LD_INT 5
2449: PUSH
2450: FOR_TO
2451: IFFALSE 2535
// begin vc_engine = 3 ;
2453: LD_ADDR_OWVAR 39
2457: PUSH
2458: LD_INT 3
2460: ST_TO_ADDR
// vc_control = 3 ;
2461: LD_ADDR_OWVAR 38
2465: PUSH
2466: LD_INT 3
2468: ST_TO_ADDR
// vc_chassis = 3 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 3
2476: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2477: LD_ADDR_OWVAR 40
2481: PUSH
2482: LD_INT 5
2484: PUSH
2485: LD_INT 9
2487: PUSH
2488: LD_INT 7
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 1
2498: PPUSH
2499: LD_INT 3
2501: PPUSH
2502: CALL_OW 12
2506: ARRAY
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 14
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2450
2535: POP
2536: POP
// vc_engine = 3 ;
2537: LD_ADDR_OWVAR 39
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_control = 1 ;
2545: LD_ADDR_OWVAR 38
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// vc_chassis = 3 ;
2553: LD_ADDR_OWVAR 37
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
2561: LD_ADDR_OWVAR 40
2565: PUSH
2566: LD_INT 5
2568: PUSH
2569: LD_INT 9
2571: PUSH
2572: LD_INT 7
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 1
2582: PPUSH
2583: LD_INT 3
2585: PPUSH
2586: CALL_OW 12
2590: ARRAY
2591: ST_TO_ADDR
// NewJMMGirlVeh = CreateVehicle ;
2592: LD_ADDR_EXP 25
2596: PUSH
2597: CALL_OW 45
2601: ST_TO_ADDR
// PlaceUnitArea ( NewJMMGirlVeh , KappaSpawn , false ) ;
2602: LD_EXP 25
2606: PPUSH
2607: LD_INT 14
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if JMMGirl = 1 then
2617: LD_EXP 80
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2678
// begin Joan = PrepareUnit ( 14_Joan , true ) ;
2627: LD_ADDR_EXP 2
2631: PUSH
2632: LD_STRING 14_Joan
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL 6656 0 2
2642: ST_TO_ADDR
// PlaceHumanInUnit ( Joan , NewJMMGirlVeh ) ;
2643: LD_EXP 2
2647: PPUSH
2648: LD_EXP 25
2652: PPUSH
2653: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2657: LD_EXP 25
2661: PPUSH
2662: CALL_OW 87
// SayRadio ( Joan , D10BW-Joan-1 ) ;
2666: LD_EXP 2
2670: PPUSH
2671: LD_STRING D10BW-Joan-1
2673: PPUSH
2674: CALL_OW 94
// end ; if JMMGirl = 2 then
2678: LD_EXP 80
2682: PUSH
2683: LD_INT 2
2685: EQUAL
2686: IFFALSE 2739
// begin Lisa = PrepareUnit ( 14_Lisa , true ) ;
2688: LD_ADDR_EXP 4
2692: PUSH
2693: LD_STRING 14_Lisa
2695: PPUSH
2696: LD_INT 1
2698: PPUSH
2699: CALL 6656 0 2
2703: ST_TO_ADDR
// PlaceHumanInUnit ( Lisa , NewJMMGirlVeh ) ;
2704: LD_EXP 4
2708: PPUSH
2709: LD_EXP 25
2713: PPUSH
2714: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2718: LD_EXP 25
2722: PPUSH
2723: CALL_OW 87
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
2727: LD_EXP 4
2731: PPUSH
2732: LD_STRING D10BW-Lisa-1
2734: PPUSH
2735: CALL_OW 94
// end ; if JMMGirl = 3 then
2739: LD_EXP 80
2743: PUSH
2744: LD_INT 3
2746: EQUAL
2747: IFFALSE 2800
// begin Connie = PrepareUnit ( 14_Connie , true ) ;
2749: LD_ADDR_EXP 16
2753: PUSH
2754: LD_STRING 14_Connie
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: CALL 6656 0 2
2764: ST_TO_ADDR
// PlaceHumanInUnit ( Connie , NewJMMGirlVeh ) ;
2765: LD_EXP 16
2769: PPUSH
2770: LD_EXP 25
2774: PPUSH
2775: CALL_OW 52
// CenterNowOnUnits ( NewJMMGirlVeh ) ;
2779: LD_EXP 25
2783: PPUSH
2784: CALL_OW 87
// SayRadio ( Lisa , D10BW-Con-1 ) ;
2788: LD_EXP 4
2792: PPUSH
2793: LD_STRING D10BW-Con-1
2795: PPUSH
2796: CALL_OW 94
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export function PrepareOmegaTeam ; var i , omegaVeh , sum , veh , avalaibleVehs , vehicles , resources , cargoList ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
// uc_side = 1 ;
2816: LD_ADDR_OWVAR 20
2820: PUSH
2821: LD_INT 1
2823: ST_TO_ADDR
// uc_nation = 1 ;
2824: LD_ADDR_OWVAR 21
2828: PUSH
2829: LD_INT 1
2831: ST_TO_ADDR
// omegaVeh = [ ] ;
2832: LD_ADDR_VAR 0 3
2836: PUSH
2837: EMPTY
2838: ST_TO_ADDR
// if TestCharacters ( 13s_Lisa ) = false then
2839: LD_STRING 13s_Lisa
2841: PPUSH
2842: CALL_OW 28
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 2865
// Lisa = PrepareUnitOmega ( Lisa ) ;
2852: LD_ADDR_EXP 4
2856: PUSH
2857: LD_STRING Lisa
2859: PPUSH
2860: CALL 6770 0 1
2864: ST_TO_ADDR
// if TestCharacters ( 13s_Donaldson ) = false then
2865: LD_STRING 13s_Donaldson
2867: PPUSH
2868: CALL_OW 28
2872: PUSH
2873: LD_INT 0
2875: EQUAL
2876: IFFALSE 2891
// Donaldson = PrepareUnitOmega ( Donaldson ) ;
2878: LD_ADDR_EXP 5
2882: PUSH
2883: LD_STRING Donaldson
2885: PPUSH
2886: CALL 6770 0 1
2890: ST_TO_ADDR
// if TestCharacters ( 13s_Bobby ) = false then
2891: LD_STRING 13s_Bobby
2893: PPUSH
2894: CALL_OW 28
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2917
// Bobby = PrepareUnitOmega ( Bobby ) ;
2904: LD_ADDR_EXP 6
2908: PUSH
2909: LD_STRING Bobby
2911: PPUSH
2912: CALL 6770 0 1
2916: ST_TO_ADDR
// if TestCharacters ( 13s_Cyrus ) = false then
2917: LD_STRING 13s_Cyrus
2919: PPUSH
2920: CALL_OW 28
2924: PUSH
2925: LD_INT 0
2927: EQUAL
2928: IFFALSE 2943
// Cyrus = PrepareUnitOmega ( Cyrus ) ;
2930: LD_ADDR_EXP 7
2934: PUSH
2935: LD_STRING Cyrus
2937: PPUSH
2938: CALL 6770 0 1
2942: ST_TO_ADDR
// if TestCharacters ( 13s_Denis ) = false then
2943: LD_STRING 13s_Denis
2945: PPUSH
2946: CALL_OW 28
2950: PUSH
2951: LD_INT 0
2953: EQUAL
2954: IFFALSE 2969
// Denis = PrepareUnitOmega ( Denis ) ;
2956: LD_ADDR_EXP 8
2960: PUSH
2961: LD_STRING Denis
2963: PPUSH
2964: CALL 6770 0 1
2968: ST_TO_ADDR
// if TestCharacters ( 13s_Brown ) = false then
2969: LD_STRING 13s_Brown
2971: PPUSH
2972: CALL_OW 28
2976: PUSH
2977: LD_INT 0
2979: EQUAL
2980: IFFALSE 2995
// Brown = PrepareUnitOmega ( Brown ) ;
2982: LD_ADDR_EXP 9
2986: PUSH
2987: LD_STRING Brown
2989: PPUSH
2990: CALL 6770 0 1
2994: ST_TO_ADDR
// if TestCharacters ( 13s_Gladstone ) = false then
2995: LD_STRING 13s_Gladstone
2997: PPUSH
2998: CALL_OW 28
3002: PUSH
3003: LD_INT 0
3005: EQUAL
3006: IFFALSE 3021
// Gladstone = PrepareUnitOmega ( Gladstone ) ;
3008: LD_ADDR_EXP 10
3012: PUSH
3013: LD_STRING Gladstone
3015: PPUSH
3016: CALL 6770 0 1
3020: ST_TO_ADDR
// if TestCharacters ( 13s_Houten ) = false then
3021: LD_STRING 13s_Houten
3023: PPUSH
3024: CALL_OW 28
3028: PUSH
3029: LD_INT 0
3031: EQUAL
3032: IFFALSE 3047
// Houten = PrepareUnitOmega ( Houten ) ;
3034: LD_ADDR_EXP 11
3038: PUSH
3039: LD_STRING Houten
3041: PPUSH
3042: CALL 6770 0 1
3046: ST_TO_ADDR
// if TestCharacters ( 13s_Cornell ) = false then
3047: LD_STRING 13s_Cornell
3049: PPUSH
3050: CALL_OW 28
3054: PUSH
3055: LD_INT 0
3057: EQUAL
3058: IFFALSE 3073
// Cornel = PrepareUnitOmega ( Cornell ) ;
3060: LD_ADDR_EXP 12
3064: PUSH
3065: LD_STRING Cornell
3067: PPUSH
3068: CALL 6770 0 1
3072: ST_TO_ADDR
// if TestCharacters ( 13s_Gary ) = false then
3073: LD_STRING 13s_Gary
3075: PPUSH
3076: CALL_OW 28
3080: PUSH
3081: LD_INT 0
3083: EQUAL
3084: IFFALSE 3099
// Gary = PrepareUnitOmega ( Gary ) ;
3086: LD_ADDR_EXP 13
3090: PUSH
3091: LD_STRING Gary
3093: PPUSH
3094: CALL 6770 0 1
3098: ST_TO_ADDR
// if TestCharacters ( 13s_Frank ) = false then
3099: LD_STRING 13s_Frank
3101: PPUSH
3102: CALL_OW 28
3106: PUSH
3107: LD_INT 0
3109: EQUAL
3110: IFFALSE 3125
// Frank = PrepareUnitOmega ( Frank ) ;
3112: LD_ADDR_EXP 14
3116: PUSH
3117: LD_STRING Frank
3119: PPUSH
3120: CALL 6770 0 1
3124: ST_TO_ADDR
// if TestCharacters ( 13s_Kikuchi ) = false then
3125: LD_STRING 13s_Kikuchi
3127: PPUSH
3128: CALL_OW 28
3132: PUSH
3133: LD_INT 0
3135: EQUAL
3136: IFFALSE 3151
// Kikuchi = PrepareUnitOmega ( Kikuchi ) ;
3138: LD_ADDR_EXP 15
3142: PUSH
3143: LD_STRING Kikuchi
3145: PPUSH
3146: CALL 6770 0 1
3150: ST_TO_ADDR
// if JMMGirl = 1 or JMMGirl = 2 then
3151: LD_EXP 80
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: PUSH
3160: LD_EXP 80
3164: PUSH
3165: LD_INT 2
3167: EQUAL
3168: OR
3169: IFFALSE 3184
// Connie = PrepareUnitOmega ( Connie ) ;
3171: LD_ADDR_EXP 16
3175: PUSH
3176: LD_STRING Connie
3178: PPUSH
3179: CALL 6770 0 1
3183: ST_TO_ADDR
// Gordon = PrepareUnitOmega ( Gordon ) ;
3184: LD_ADDR_EXP 22
3188: PUSH
3189: LD_STRING Gordon
3191: PPUSH
3192: CALL 6770 0 1
3196: ST_TO_ADDR
// Peter = PrepareUnitOmega ( Peter ) ;
3197: LD_ADDR_EXP 23
3201: PUSH
3202: LD_STRING Peter
3204: PPUSH
3205: CALL 6770 0 1
3209: ST_TO_ADDR
// if StevensStatus = 1 then
3210: LD_EXP 77
3214: PUSH
3215: LD_INT 1
3217: EQUAL
3218: IFFALSE 3235
// Stevens = PrepareUnitOmega ( Stevens ) else
3220: LD_ADDR_EXP 3
3224: PUSH
3225: LD_STRING Stevens
3227: PPUSH
3228: CALL 6770 0 1
3232: ST_TO_ADDR
3233: GO 3248
// Baker = PrepareUnitOmega ( Baker ) ;
3235: LD_ADDR_EXP 21
3239: PUSH
3240: LD_STRING Baker
3242: PPUSH
3243: CALL 6770 0 1
3247: ST_TO_ADDR
// others13Omega = CreateCharacterSet ( 15_other_survivors ) ;
3248: LD_ADDR_EXP 19
3252: PUSH
3253: LD_STRING 15_other_survivors
3255: PPUSH
3256: CALL_OW 31
3260: ST_TO_ADDR
// vehicles = LoadVariable ( 15_Vehicles_1 , [ ] ) ;
3261: LD_ADDR_VAR 0 7
3265: PUSH
3266: LD_STRING 15_Vehicles_1
3268: PPUSH
3269: EMPTY
3270: PPUSH
3271: CALL_OW 30
3275: ST_TO_ADDR
// resources = LoadVariable ( 15_ResourcesInCargo_1 , [ ] ) ;
3276: LD_ADDR_VAR 0 8
3280: PUSH
3281: LD_STRING 15_ResourcesInCargo_1
3283: PPUSH
3284: EMPTY
3285: PPUSH
3286: CALL_OW 30
3290: ST_TO_ADDR
// for i := 1 to vehicles do
3291: LD_ADDR_VAR 0 2
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_VAR 0 7
3305: PUSH
3306: FOR_TO
3307: IFFALSE 3532
// begin uc_nation = vehicles [ i ] [ 1 ] ;
3309: LD_ADDR_OWVAR 21
3313: PUSH
3314: LD_VAR 0 7
3318: PUSH
3319: LD_VAR 0 2
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
3329: LD_ADDR_OWVAR 37
3333: PUSH
3334: LD_VAR 0 7
3338: PUSH
3339: LD_VAR 0 2
3343: ARRAY
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
3349: LD_ADDR_OWVAR 39
3353: PUSH
3354: LD_VAR 0 7
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PUSH
3365: LD_INT 3
3367: ARRAY
3368: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
3369: LD_ADDR_OWVAR 38
3373: PUSH
3374: LD_VAR 0 7
3378: PUSH
3379: LD_VAR 0 2
3383: ARRAY
3384: PUSH
3385: LD_INT 4
3387: ARRAY
3388: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
3389: LD_ADDR_OWVAR 40
3393: PUSH
3394: LD_VAR 0 7
3398: PUSH
3399: LD_VAR 0 2
3403: ARRAY
3404: PUSH
3405: LD_INT 5
3407: ARRAY
3408: ST_TO_ADDR
// if vc_weapon = 8 then
3409: LD_OWVAR 40
3413: PUSH
3414: LD_INT 8
3416: EQUAL
3417: IFFALSE 3429
// vc_weapon = 9 else
3419: LD_ADDR_OWVAR 40
3423: PUSH
3424: LD_INT 9
3426: ST_TO_ADDR
3427: GO 3449
// vc_weapon = vehicles [ i ] [ 5 ] ;
3429: LD_ADDR_OWVAR 40
3433: PUSH
3434: LD_VAR 0 7
3438: PUSH
3439: LD_VAR 0 2
3443: ARRAY
3444: PUSH
3445: LD_INT 5
3447: ARRAY
3448: ST_TO_ADDR
// vc_fuel_battery = 40 ;
3449: LD_ADDR_OWVAR 41
3453: PUSH
3454: LD_INT 40
3456: ST_TO_ADDR
// veh = CreateVehicle ;
3457: LD_ADDR_VAR 0 5
3461: PUSH
3462: CALL_OW 45
3466: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
3467: LD_VAR 0 5
3471: PPUSH
3472: LD_INT 5
3474: PPUSH
3475: CALL_OW 233
// SetLives ( veh , rand ( 300 , 800 ) ) ;
3479: LD_VAR 0 5
3483: PPUSH
3484: LD_INT 300
3486: PPUSH
3487: LD_INT 800
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 234
// omegaVeh = omegaVeh ^ veh ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: LD_VAR 0 3
3508: PUSH
3509: LD_VAR 0 5
3513: ADD
3514: ST_TO_ADDR
// PlaceUnitArea ( veh , OmegaSpawn , false ) ;
3515: LD_VAR 0 5
3519: PPUSH
3520: LD_INT 16
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// end ;
3530: GO 3306
3532: POP
3533: POP
// cargoList = FilterUnitsInArea ( OmegaSpawn , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] , [ f_control , 1 ] , [ f_engine , 3 ] ] ) ;
3534: LD_ADDR_VAR 0 9
3538: PUSH
3539: LD_INT 16
3541: PPUSH
3542: LD_INT 22
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 21
3554: PUSH
3555: LD_INT 2
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 34
3564: PUSH
3565: LD_INT 12
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: LD_INT 33
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 32
3584: PUSH
3585: LD_INT 3
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PPUSH
3599: CALL_OW 70
3603: ST_TO_ADDR
// if cargoList > 0 then
3604: LD_VAR 0 9
3608: PUSH
3609: LD_INT 0
3611: GREATER
3612: IFFALSE 3745
// for i = 1 to cargoList do
3614: LD_ADDR_VAR 0 2
3618: PUSH
3619: DOUBLE
3620: LD_INT 1
3622: DEC
3623: ST_TO_ADDR
3624: LD_VAR 0 9
3628: PUSH
3629: FOR_TO
3630: IFFALSE 3743
// begin if resources > 0 then
3632: LD_VAR 0 8
3636: PUSH
3637: LD_INT 0
3639: GREATER
3640: IFFALSE 3741
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
3642: LD_VAR 0 9
3646: PUSH
3647: LD_VAR 0 2
3651: ARRAY
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_VAR 0 8
3660: PUSH
3661: LD_VAR 0 2
3665: ARRAY
3666: PUSH
3667: LD_INT 1
3669: ARRAY
3670: PPUSH
3671: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
3675: LD_VAR 0 9
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: PPUSH
3686: LD_INT 2
3688: PPUSH
3689: LD_VAR 0 8
3693: PUSH
3694: LD_VAR 0 2
3698: ARRAY
3699: PUSH
3700: LD_INT 2
3702: ARRAY
3703: PPUSH
3704: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
3708: LD_VAR 0 9
3712: PUSH
3713: LD_VAR 0 2
3717: ARRAY
3718: PPUSH
3719: LD_INT 3
3721: PPUSH
3722: LD_VAR 0 8
3726: PUSH
3727: LD_VAR 0 2
3731: ARRAY
3732: PUSH
3733: LD_INT 3
3735: ARRAY
3736: PPUSH
3737: CALL_OW 291
// end ; end ;
3741: GO 3629
3743: POP
3744: POP
// for i := 1 to heroesFromOmega do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_EXP 20
3759: PUSH
3760: FOR_TO
3761: IFFALSE 3791
// begin PlaceHumanInUnit ( heroesFromOmega [ i ] , omegaVeh [ i ] ) ;
3763: LD_EXP 20
3767: PUSH
3768: LD_VAR 0 2
3772: ARRAY
3773: PPUSH
3774: LD_VAR 0 3
3778: PUSH
3779: LD_VAR 0 2
3783: ARRAY
3784: PPUSH
3785: CALL_OW 52
// end ;
3789: GO 3760
3791: POP
3792: POP
// avalaibleVehs = UnitFilter ( omegaVeh , [ f_empty ] ) ;
3793: LD_ADDR_VAR 0 6
3797: PUSH
3798: LD_VAR 0 3
3802: PPUSH
3803: LD_INT 58
3805: PUSH
3806: EMPTY
3807: LIST
3808: PPUSH
3809: CALL_OW 72
3813: ST_TO_ADDR
// for i := 1 to others13Omega do
3814: LD_ADDR_VAR 0 2
3818: PUSH
3819: DOUBLE
3820: LD_INT 1
3822: DEC
3823: ST_TO_ADDR
3824: LD_EXP 19
3828: PUSH
3829: FOR_TO
3830: IFFALSE 3860
// begin PlaceHumanInUnit ( others13Omega [ i ] , avalaibleVehs [ i ] ) ;
3832: LD_EXP 19
3836: PUSH
3837: LD_VAR 0 2
3841: ARRAY
3842: PPUSH
3843: LD_VAR 0 6
3847: PUSH
3848: LD_VAR 0 2
3852: ARRAY
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3829
3860: POP
3861: POP
// end ; end_of_file
3862: LD_VAR 0 1
3866: RET
// export function PrepareLegion ; var i ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
// uc_side = 8 ;
3871: LD_ADDR_OWVAR 20
3875: PUSH
3876: LD_INT 8
3878: ST_TO_ADDR
// uc_nation = 2 ;
3879: LD_ADDR_OWVAR 21
3883: PUSH
3884: LD_INT 2
3886: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
3887: LD_ADDR_EXP 30
3891: PUSH
3892: LD_STRING Kurt
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL 6656 0 2
3902: ST_TO_ADDR
// Kozlov = PrepareUnit ( Kozlov , false ) ;
3903: LD_ADDR_EXP 36
3907: PUSH
3908: LD_STRING Kozlov
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL 6656 0 2
3918: ST_TO_ADDR
// RespawnInside ( 8 , 2 , ArDep1 , 10 , 2 , 4 ) ;
3919: LD_INT 8
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: LD_INT 122
3927: PPUSH
3928: LD_INT 10
3930: PPUSH
3931: LD_INT 2
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArDep2 , 10 , 2 , 2 ) ;
3941: LD_INT 8
3943: PPUSH
3944: LD_INT 2
3946: PPUSH
3947: LD_INT 99
3949: PPUSH
3950: LD_INT 10
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: LD_INT 2
3958: PPUSH
3959: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 1 , 2 ) ;
3963: LD_INT 8
3965: PPUSH
3966: LD_INT 2
3968: PPUSH
3969: LD_INT 104
3971: PPUSH
3972: LD_INT 10
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: LD_INT 2
3980: PPUSH
3981: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar1 , 10 , 8 , 1 ) ;
3985: LD_INT 8
3987: PPUSH
3988: LD_INT 2
3990: PPUSH
3991: LD_INT 104
3993: PPUSH
3994: LD_INT 10
3996: PPUSH
3997: LD_INT 8
3999: PPUSH
4000: LD_INT 1
4002: PPUSH
4003: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArBar2 , 10 , 1 , 1 ) ;
4007: LD_INT 8
4009: PPUSH
4010: LD_INT 2
4012: PPUSH
4013: LD_INT 118
4015: PPUSH
4016: LD_INT 10
4018: PPUSH
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArFact , 10 , 3 , 4 ) ;
4029: LD_INT 8
4031: PPUSH
4032: LD_INT 2
4034: PPUSH
4035: LD_INT 117
4037: PPUSH
4038: LD_INT 10
4040: PPUSH
4041: LD_INT 3
4043: PPUSH
4044: LD_INT 4
4046: PPUSH
4047: CALL 7750 0 6
// RespawnInside ( 8 , 2 , ArLab1 , 10 , 4 , 2 ) ;
4051: LD_INT 8
4053: PPUSH
4054: LD_INT 2
4056: PPUSH
4057: LD_INT 252
4059: PPUSH
4060: LD_INT 10
4062: PPUSH
4063: LD_INT 4
4065: PPUSH
4066: LD_INT 2
4068: PPUSH
4069: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
4073: LD_ADDR_VAR 0 2
4077: PUSH
4078: LD_INT 22
4080: PUSH
4081: LD_INT 8
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 21
4090: PUSH
4091: LD_INT 3
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 30
4100: PUSH
4101: LD_INT 32
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 58
4110: PUSH
4111: EMPTY
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 69
4124: PUSH
4125: FOR_IN
4126: IFFALSE 4154
// RespawnInside ( 8 , 2 , i , 10 , 1 , 1 ) ;
4128: LD_INT 8
4130: PPUSH
4131: LD_INT 2
4133: PPUSH
4134: LD_VAR 0 2
4138: PPUSH
4139: LD_INT 10
4141: PPUSH
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 1
4147: PPUSH
4148: CALL 7750 0 6
4152: GO 4125
4154: POP
4155: POP
// RespawnInside ( 8 , 2 , ArControl , 10 , 3 , 1 ) ;
4156: LD_INT 8
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: LD_INT 140
4164: PPUSH
4165: LD_INT 10
4167: PPUSH
4168: LD_INT 3
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: CALL 7750 0 6
// arControler = UnitsInside ( ArControl ) ;
4178: LD_ADDR_EXP 56
4182: PUSH
4183: LD_INT 140
4185: PPUSH
4186: CALL_OW 313
4190: ST_TO_ADDR
// AddComLinkTo ( ArBomb1 , arControler [ 1 ] ) ;
4191: LD_INT 139
4193: PPUSH
4194: LD_EXP 56
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 195
// AddComLinkTo ( ArBomb2 , arControler [ 1 ] ) ;
4207: LD_INT 138
4209: PPUSH
4210: LD_EXP 56
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: CALL_OW 195
// hc_name = Ali Hadarach ;
4223: LD_ADDR_OWVAR 26
4227: PUSH
4228: LD_STRING Ali Hadarach
4230: ST_TO_ADDR
// hc_gallery =  ;
4231: LD_ADDR_OWVAR 33
4235: PUSH
4236: LD_STRING 
4238: ST_TO_ADDR
// PrepareMechanic ( sex_male , 8 ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 8
4244: PPUSH
4245: CALL_OW 383
// LegionFriend = CreateHuman ;
4249: LD_ADDR_EXP 53
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// end ; end_of_file
4259: LD_VAR 0 1
4263: RET
// export function PrepareRussians ; var i ; begin
4264: LD_INT 0
4266: PPUSH
4267: PPUSH
// uc_side = 3 ;
4268: LD_ADDR_OWVAR 20
4272: PUSH
4273: LD_INT 3
4275: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
4276: LD_ADDR_EXP 26
4280: PUSH
4281: LD_STRING Platonov
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL 6656 0 2
4291: ST_TO_ADDR
// PlaceHumanInUnit ( Platonov , RuDep2 ) ;
4292: LD_EXP 26
4296: PPUSH
4297: LD_INT 23
4299: PPUSH
4300: CALL_OW 52
// Yakotich = PrepareUnit ( Yakotich , false ) ;
4304: LD_ADDR_EXP 27
4308: PUSH
4309: LD_STRING Yakotich
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: CALL 6656 0 2
4319: ST_TO_ADDR
// PlaceHumanInUnit ( Yakotich , RuDep1 ) ;
4320: LD_EXP 27
4324: PPUSH
4325: LD_INT 26
4327: PPUSH
4328: CALL_OW 52
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
4332: LD_ADDR_EXP 37
4336: PUSH
4337: LD_STRING Kovalyuk
4339: PPUSH
4340: LD_INT 0
4342: PPUSH
4343: CALL 6656 0 2
4347: ST_TO_ADDR
// SetClass ( Kovalyuk , 3 ) ;
4348: LD_EXP 37
4352: PPUSH
4353: LD_INT 3
4355: PPUSH
4356: CALL_OW 336
// ruBehMehs = ruBehMehs ^ Kovalyuk ;
4360: LD_ADDR_EXP 58
4364: PUSH
4365: LD_EXP 58
4369: PUSH
4370: LD_EXP 37
4374: ADD
4375: ST_TO_ADDR
// Oblukov = PrepareUnit ( Oblukov , false ) ;
4376: LD_ADDR_EXP 38
4380: PUSH
4381: LD_STRING Oblukov
4383: PPUSH
4384: LD_INT 0
4386: PPUSH
4387: CALL 6656 0 2
4391: ST_TO_ADDR
// Bystrov = PrepareUnit ( Bystrov , false ) ;
4392: LD_ADDR_EXP 39
4396: PUSH
4397: LD_STRING Bystrov
4399: PPUSH
4400: LD_INT 0
4402: PPUSH
4403: CALL 6656 0 2
4407: ST_TO_ADDR
// Fadeev = PrepareUnit ( Fadeev , false ) ;
4408: LD_ADDR_EXP 40
4412: PUSH
4413: LD_STRING Fadeev
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL 6656 0 2
4423: ST_TO_ADDR
// Gleb = PrepareUnit ( Gleb , false ) ;
4424: LD_ADDR_EXP 41
4428: PUSH
4429: LD_STRING Gleb
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL 6656 0 2
4439: ST_TO_ADDR
// Petrosyan = PrepareUnit ( Petrosyan , false ) ;
4440: LD_ADDR_EXP 42
4444: PUSH
4445: LD_STRING Petrosyan
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL 6656 0 2
4455: ST_TO_ADDR
// Petrovova = PrepareUnit ( Petrovova , false ) ;
4456: LD_ADDR_EXP 43
4460: PUSH
4461: LD_STRING Petrovova
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: CALL 6656 0 2
4471: ST_TO_ADDR
// Kuzmov = PrepareUnit ( Kuzmov , false ) ;
4472: LD_ADDR_EXP 44
4476: PUSH
4477: LD_STRING Kuzmov
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: CALL 6656 0 2
4487: ST_TO_ADDR
// Mikhail = PrepareUnit ( Mikhail , false ) ;
4488: LD_ADDR_EXP 45
4492: PUSH
4493: LD_STRING Mikhail
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: CALL 6656 0 2
4503: ST_TO_ADDR
// Furmanov = PrepareUnit ( Furmanov , false ) ;
4504: LD_ADDR_EXP 46
4508: PUSH
4509: LD_STRING Furmanov
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL 6656 0 2
4519: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
4520: LD_ADDR_EXP 47
4524: PUSH
4525: LD_STRING Belkov
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL 6656 0 2
4535: ST_TO_ADDR
// PlaceHumanInUnit ( Oblukov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4536: LD_EXP 38
4540: PPUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 21
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 30
4563: PUSH
4564: LD_INT 32
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 58
4573: PUSH
4574: EMPTY
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: PPUSH
4592: CALL_OW 52
// PlaceHumanInUnit ( Fadeev , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4596: LD_EXP 40
4600: PPUSH
4601: LD_INT 22
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 30
4623: PUSH
4624: LD_INT 32
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 58
4633: PUSH
4634: EMPTY
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: PPUSH
4643: CALL_OW 69
4647: PUSH
4648: LD_INT 1
4650: ARRAY
4651: PPUSH
4652: CALL_OW 52
// PlaceHumanInUnit ( Gleb , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4656: LD_EXP 41
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 3
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 3
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 30
4683: PUSH
4684: LD_INT 32
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 58
4693: PUSH
4694: EMPTY
4695: LIST
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PUSH
4708: LD_INT 1
4710: ARRAY
4711: PPUSH
4712: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4716: LD_EXP 43
4720: PPUSH
4721: LD_INT 22
4723: PUSH
4724: LD_INT 3
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 21
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 30
4743: PUSH
4744: LD_INT 32
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 58
4753: PUSH
4754: EMPTY
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 69
4767: PUSH
4768: LD_INT 1
4770: ARRAY
4771: PPUSH
4772: CALL_OW 52
// PlaceHumanInUnit ( Kuzmov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4776: LD_EXP 44
4780: PPUSH
4781: LD_INT 22
4783: PUSH
4784: LD_INT 3
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 21
4793: PUSH
4794: LD_INT 3
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 30
4803: PUSH
4804: LD_INT 32
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 58
4813: PUSH
4814: EMPTY
4815: LIST
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: PPUSH
4823: CALL_OW 69
4827: PUSH
4828: LD_INT 1
4830: ARRAY
4831: PPUSH
4832: CALL_OW 52
// PlaceHumanInUnit ( Furmanov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4836: LD_EXP 46
4840: PPUSH
4841: LD_INT 22
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 30
4863: PUSH
4864: LD_INT 32
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 58
4873: PUSH
4874: EMPTY
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: PPUSH
4883: CALL_OW 69
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: PPUSH
4892: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) [ 1 ] ) ;
4896: LD_EXP 47
4900: PPUSH
4901: LD_INT 22
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 21
4913: PUSH
4914: LD_INT 3
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 32
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 58
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 52
// PlaceHumanInUnit ( Bystrov , RusLab1 ) ;
4956: LD_EXP 39
4960: PPUSH
4961: LD_INT 2
4963: PPUSH
4964: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , RusLab2 ) ;
4968: LD_EXP 42
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: CALL_OW 52
// PlaceHumanInUnit ( Mikhail , RuDep1 ) ;
4980: LD_EXP 45
4984: PPUSH
4985: LD_INT 26
4987: PPUSH
4988: CALL_OW 52
// SetClass ( Mikhail , 2 ) ;
4992: LD_EXP 45
4996: PPUSH
4997: LD_INT 2
4999: PPUSH
5000: CALL_OW 336
// RespawnInside ( 3 , 3 , RuDep1 , 10 , 2 , 5 ) ;
5004: LD_INT 3
5006: PPUSH
5007: LD_INT 3
5009: PPUSH
5010: LD_INT 26
5012: PPUSH
5013: LD_INT 10
5015: PPUSH
5016: LD_INT 2
5018: PPUSH
5019: LD_INT 5
5021: PPUSH
5022: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RuDep2 , 10 , 2 , 4 ) ;
5026: LD_INT 3
5028: PPUSH
5029: LD_INT 3
5031: PPUSH
5032: LD_INT 23
5034: PPUSH
5035: LD_INT 10
5037: PPUSH
5038: LD_INT 2
5040: PPUSH
5041: LD_INT 4
5043: PPUSH
5044: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 9 , 6 ) ;
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 3
5053: PPUSH
5054: LD_INT 27
5056: PPUSH
5057: LD_INT 10
5059: PPUSH
5060: LD_INT 9
5062: PPUSH
5063: LD_INT 6
5065: PPUSH
5066: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusBarr1 , 10 , 3 , 3 ) ;
5070: LD_INT 3
5072: PPUSH
5073: LD_INT 3
5075: PPUSH
5076: LD_INT 27
5078: PPUSH
5079: LD_INT 10
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 3
5087: PPUSH
5088: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusFact1 , 10 , 3 , 6 ) ;
5092: LD_INT 3
5094: PPUSH
5095: LD_INT 3
5097: PPUSH
5098: LD_INT 4
5100: PPUSH
5101: LD_INT 10
5103: PPUSH
5104: LD_INT 3
5106: PPUSH
5107: LD_INT 6
5109: PPUSH
5110: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusFact2 , 10 , 3 , 6 ) ;
5114: LD_INT 3
5116: PPUSH
5117: LD_INT 3
5119: PPUSH
5120: LD_INT 10
5122: PPUSH
5123: LD_INT 10
5125: PPUSH
5126: LD_INT 3
5128: PPUSH
5129: LD_INT 6
5131: PPUSH
5132: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusLab1 , 10 , 4 , 3 ) ;
5136: LD_INT 3
5138: PPUSH
5139: LD_INT 3
5141: PPUSH
5142: LD_INT 2
5144: PPUSH
5145: LD_INT 10
5147: PPUSH
5148: LD_INT 4
5150: PPUSH
5151: LD_INT 3
5153: PPUSH
5154: CALL 7750 0 6
// RespawnInside ( 3 , 3 , RusLab2 , 10 , 4 , 3 ) ;
5158: LD_INT 3
5160: PPUSH
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 1
5166: PPUSH
5167: LD_INT 10
5169: PPUSH
5170: LD_INT 4
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
5180: LD_ADDR_VAR 0 2
5184: PUSH
5185: LD_INT 22
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 3
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 30
5207: PUSH
5208: LD_INT 32
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: LD_INT 58
5217: PUSH
5218: EMPTY
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: PPUSH
5227: CALL_OW 69
5231: PUSH
5232: FOR_IN
5233: IFFALSE 5261
// RespawnInside ( 3 , 3 , i , 10 , 1 , 1 ) ;
5235: LD_INT 3
5237: PPUSH
5238: LD_INT 3
5240: PPUSH
5241: LD_VAR 0 2
5245: PPUSH
5246: LD_INT 10
5248: PPUSH
5249: LD_INT 1
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: CALL 7750 0 6
5259: GO 5232
5261: POP
5262: POP
// end ;
5263: LD_VAR 0 1
5267: RET
// export function PrepareAttackFromKappa ; var i , veh , vehList ; begin
5268: LD_INT 0
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
// uc_side = 6 ;
5274: LD_ADDR_OWVAR 20
5278: PUSH
5279: LD_INT 6
5281: ST_TO_ADDR
// uc_nation = 1 ;
5282: LD_ADDR_OWVAR 21
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// vc_engine = 3 ;
5290: LD_ADDR_OWVAR 39
5294: PUSH
5295: LD_INT 3
5297: ST_TO_ADDR
// vc_control = 1 ;
5298: LD_ADDR_OWVAR 38
5302: PUSH
5303: LD_INT 1
5305: ST_TO_ADDR
// vc_chassis = 5 ;
5306: LD_ADDR_OWVAR 37
5310: PUSH
5311: LD_INT 5
5313: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5314: LD_ADDR_OWVAR 40
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: LD_INT 9
5324: PUSH
5325: LD_INT 7
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 1
5335: PPUSH
5336: LD_INT 3
5338: PPUSH
5339: CALL_OW 12
5343: ARRAY
5344: ST_TO_ADDR
// sewiVeh = CreateVehicle ;
5345: LD_ADDR_EXP 35
5349: PUSH
5350: CALL_OW 45
5354: ST_TO_ADDR
// PlaceUnitArea ( sewiVeh , KappaSpawn , false ) ;
5355: LD_EXP 35
5359: PPUSH
5360: LD_INT 14
5362: PPUSH
5363: LD_INT 0
5365: PPUSH
5366: CALL_OW 49
// Vsevolod = PrepareUnit ( Vsevolod , false ) ;
5370: LD_ADDR_EXP 34
5374: PUSH
5375: LD_STRING Vsevolod
5377: PPUSH
5378: LD_INT 0
5380: PPUSH
5381: CALL 6656 0 2
5385: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , sewiVeh ) ;
5386: LD_EXP 34
5390: PPUSH
5391: LD_EXP 35
5395: PPUSH
5396: CALL_OW 52
// for i := 1 to 5 do
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 5
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5498
// begin vc_engine = 3 ;
5416: LD_ADDR_OWVAR 39
5420: PUSH
5421: LD_INT 3
5423: ST_TO_ADDR
// vc_control = 3 ;
5424: LD_ADDR_OWVAR 38
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_chassis = 3 ;
5432: LD_ADDR_OWVAR 37
5436: PUSH
5437: LD_INT 3
5439: ST_TO_ADDR
// vc_weapon = [ 5 , 9 , 7 ] [ Rand ( 1 , 3 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_INT 5
5447: PUSH
5448: LD_INT 9
5450: PUSH
5451: LD_INT 7
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 1
5461: PPUSH
5462: LD_INT 3
5464: PPUSH
5465: CALL_OW 12
5469: ARRAY
5470: ST_TO_ADDR
// veh = CreateVehicle ;
5471: LD_ADDR_VAR 0 3
5475: PUSH
5476: CALL_OW 45
5480: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5481: LD_VAR 0 3
5485: PPUSH
5486: LD_INT 14
5488: PPUSH
5489: LD_INT 0
5491: PPUSH
5492: CALL_OW 49
// end ;
5496: GO 5413
5498: POP
5499: POP
// uc_nation = 3 ;
5500: LD_ADDR_OWVAR 21
5504: PUSH
5505: LD_INT 3
5507: ST_TO_ADDR
// for i := 1 to 7 do
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_INT 7
5520: PUSH
5521: FOR_TO
5522: IFFALSE 5614
// begin vc_engine = 3 ;
5524: LD_ADDR_OWVAR 39
5528: PUSH
5529: LD_INT 3
5531: ST_TO_ADDR
// vc_control = 3 ;
5532: LD_ADDR_OWVAR 38
5536: PUSH
5537: LD_INT 3
5539: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
5540: LD_ADDR_OWVAR 37
5544: PUSH
5545: LD_INT 24
5547: ST_TO_ADDR
// vc_weapon = [ 44 , 47 , 45 , 46 , 49 ] [ Rand ( 1 , 4 ) ] ;
5548: LD_ADDR_OWVAR 40
5552: PUSH
5553: LD_INT 44
5555: PUSH
5556: LD_INT 47
5558: PUSH
5559: LD_INT 45
5561: PUSH
5562: LD_INT 46
5564: PUSH
5565: LD_INT 49
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 1
5577: PPUSH
5578: LD_INT 4
5580: PPUSH
5581: CALL_OW 12
5585: ARRAY
5586: ST_TO_ADDR
// veh = CreateVehicle ;
5587: LD_ADDR_VAR 0 3
5591: PUSH
5592: CALL_OW 45
5596: ST_TO_ADDR
// PlaceUnitArea ( veh , KappaSpawn , false ) ;
5597: LD_VAR 0 3
5601: PPUSH
5602: LD_INT 14
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5521
5614: POP
5615: POP
// repeat wait ( 0 0$1 ) ;
5616: LD_INT 35
5618: PPUSH
5619: CALL_OW 67
// vehList = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
5623: LD_ADDR_VAR 0 4
5627: PUSH
5628: LD_INT 22
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 21
5640: PUSH
5641: LD_INT 2
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: LD_INT 50
5650: PUSH
5651: EMPTY
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 69
5663: ST_TO_ADDR
// if not IsInUnit ( JMM ) then
5664: LD_EXP 1
5668: PPUSH
5669: CALL_OW 310
5673: NOT
5674: IFFALSE 5707
// ComAgressiveMove ( vehList , GetX ( JMM ) , GetY ( JMM ) ) else
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_EXP 1
5685: PPUSH
5686: CALL_OW 250
5690: PPUSH
5691: LD_EXP 1
5695: PPUSH
5696: CALL_OW 251
5700: PPUSH
5701: CALL_OW 114
5705: GO 5746
// ComAgressiveMove ( vehList , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) ;
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_EXP 1
5716: PPUSH
5717: CALL_OW 310
5721: PPUSH
5722: CALL_OW 250
5726: PPUSH
5727: LD_EXP 1
5731: PPUSH
5732: CALL_OW 310
5736: PPUSH
5737: CALL_OW 251
5741: PPUSH
5742: CALL_OW 114
// until vehList = 0 ;
5746: LD_VAR 0 4
5750: PUSH
5751: LD_INT 0
5753: EQUAL
5754: IFFALSE 5616
// end ;
5756: LD_VAR 0 1
5760: RET
// export function PreapreMehBehs ; var i , un ; begin
5761: LD_INT 0
5763: PPUSH
5764: PPUSH
5765: PPUSH
// uc_side = 6 ;
5766: LD_ADDR_OWVAR 20
5770: PUSH
5771: LD_INT 6
5773: ST_TO_ADDR
// uc_nation = 3 ;
5774: LD_ADDR_OWVAR 21
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// for i := 1 to 3 do
5782: LD_ADDR_VAR 0 2
5786: PUSH
5787: DOUBLE
5788: LD_INT 1
5790: DEC
5791: ST_TO_ADDR
5792: LD_INT 3
5794: PUSH
5795: FOR_TO
5796: IFFALSE 5867
// begin hc_name =  ;
5798: LD_ADDR_OWVAR 26
5802: PUSH
5803: LD_STRING 
5805: ST_TO_ADDR
// hc_gallery =  ;
5806: LD_ADDR_OWVAR 33
5810: PUSH
5811: LD_STRING 
5813: ST_TO_ADDR
// PrepareMechanic ( false , 10 ) ;
5814: LD_INT 0
5816: PPUSH
5817: LD_INT 10
5819: PPUSH
5820: CALL_OW 383
// un = CreateHuman ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: CALL_OW 44
5833: ST_TO_ADDR
// ruBehMehs = ruBehMehs ^ un ;
5834: LD_ADDR_EXP 58
5838: PUSH
5839: LD_EXP 58
5843: PUSH
5844: LD_VAR 0 3
5848: ADD
5849: ST_TO_ADDR
// PlaceUnitArea ( un , RuMehBehSpawn , false ) ;
5850: LD_VAR 0 3
5854: PPUSH
5855: LD_INT 17
5857: PPUSH
5858: LD_INT 0
5860: PPUSH
5861: CALL_OW 49
// end ;
5865: GO 5795
5867: POP
5868: POP
// PlaceUnitArea ( Kovalyuk , RuMehBehSpawn , false ) ;
5869: LD_EXP 37
5873: PPUSH
5874: LD_INT 17
5876: PPUSH
5877: LD_INT 0
5879: PPUSH
5880: CALL_OW 49
// SetSide ( Kovalyuk , 6 ) ;
5884: LD_EXP 37
5888: PPUSH
5889: LD_INT 6
5891: PPUSH
5892: CALL_OW 235
// SetSide ( RuBehDep , 6 ) ;
5896: LD_INT 145
5898: PPUSH
5899: LD_INT 6
5901: PPUSH
5902: CALL_OW 235
// ComBuildBehemoth ( ruBehMehs [ 1 ] , b_behemoth , 193 , 118 , 0 ) ;
5906: LD_EXP 58
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: PPUSH
5915: LD_INT 37
5917: PPUSH
5918: LD_INT 193
5920: PPUSH
5921: LD_INT 118
5923: PPUSH
5924: LD_INT 0
5926: PPUSH
5927: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 2 ] , b_behemoth , 204 , 119 , 0 ) ;
5931: LD_EXP 58
5935: PUSH
5936: LD_INT 2
5938: ARRAY
5939: PPUSH
5940: LD_INT 37
5942: PPUSH
5943: LD_INT 204
5945: PPUSH
5946: LD_INT 119
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 3 ] , b_behemoth , 195 , 126 , 0 ) ;
5956: LD_EXP 58
5960: PUSH
5961: LD_INT 3
5963: ARRAY
5964: PPUSH
5965: LD_INT 37
5967: PPUSH
5968: LD_INT 195
5970: PPUSH
5971: LD_INT 126
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: CALL_OW 170
// ComBuildBehemoth ( ruBehMehs [ 4 ] , b_behemoth , 207 , 126 , 0 ) ;
5981: LD_EXP 58
5985: PUSH
5986: LD_INT 4
5988: ARRAY
5989: PPUSH
5990: LD_INT 37
5992: PPUSH
5993: LD_INT 207
5995: PPUSH
5996: LD_INT 126
5998: PPUSH
5999: LD_INT 0
6001: PPUSH
6002: CALL_OW 170
// end ; end_of_file
6006: LD_VAR 0 1
6010: RET
// export function PrepareAlliance ; var i ; begin
6011: LD_INT 0
6013: PPUSH
6014: PPUSH
// uc_side = 7 ;
6015: LD_ADDR_OWVAR 20
6019: PUSH
6020: LD_INT 7
6022: ST_TO_ADDR
// Roth = PrepareUnit ( Roth , false ) ;
6023: LD_ADDR_EXP 28
6027: PUSH
6028: LD_STRING Roth
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL 6656 0 2
6038: ST_TO_ADDR
// PlaceUnitArea ( Roth , RothSpawn , false ) ;
6039: LD_EXP 28
6043: PPUSH
6044: LD_INT 31
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 49
// ComTurnXY ( Roth , 248 , 187 ) ;
6054: LD_EXP 28
6058: PPUSH
6059: LD_INT 248
6061: PPUSH
6062: LD_INT 187
6064: PPUSH
6065: CALL_OW 118
// if TestCharacters ( 10c_Simms ) = true then
6069: LD_STRING 10c_Simms
6071: PPUSH
6072: CALL_OW 28
6076: PUSH
6077: LD_INT 1
6079: EQUAL
6080: IFFALSE 6130
// begin Simms = PrepareUnit ( 10c_Simms , true ) ;
6082: LD_ADDR_EXP 48
6086: PUSH
6087: LD_STRING 10c_Simms
6089: PPUSH
6090: LD_INT 1
6092: PPUSH
6093: CALL 6656 0 2
6097: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6098: LD_EXP 48
6102: PPUSH
6103: LD_INT 32
6105: PPUSH
6106: LD_INT 0
6108: PPUSH
6109: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6113: LD_EXP 48
6117: PPUSH
6118: LD_INT 248
6120: PPUSH
6121: LD_INT 187
6123: PPUSH
6124: CALL_OW 118
// end else
6128: GO 6204
// begin uc_nation = 1 ;
6130: LD_ADDR_OWVAR 21
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// hc_name =  ;
6138: LD_ADDR_OWVAR 26
6142: PUSH
6143: LD_STRING 
6145: ST_TO_ADDR
// hc_gallery =  ;
6146: LD_ADDR_OWVAR 33
6150: PUSH
6151: LD_STRING 
6153: ST_TO_ADDR
// PrepareScientist ( sex_female , 10 ) ;
6154: LD_INT 2
6156: PPUSH
6157: LD_INT 10
6159: PPUSH
6160: CALL_OW 384
// Simms = CreateHuman ;
6164: LD_ADDR_EXP 48
6168: PUSH
6169: CALL_OW 44
6173: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathySpawn , false ) ;
6174: LD_EXP 48
6178: PPUSH
6179: LD_INT 32
6181: PPUSH
6182: LD_INT 0
6184: PPUSH
6185: CALL_OW 49
// ComTurnXY ( Simms , 248 , 187 ) ;
6189: LD_EXP 48
6193: PPUSH
6194: LD_INT 248
6196: PPUSH
6197: LD_INT 187
6199: PPUSH
6200: CALL_OW 118
// end ; Scholtze = PrepareUnit ( Scholtze , false ) ;
6204: LD_ADDR_EXP 49
6208: PUSH
6209: LD_STRING Scholtze
6211: PPUSH
6212: LD_INT 0
6214: PPUSH
6215: CALL 6656 0 2
6219: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , false ) ;
6220: LD_ADDR_EXP 50
6224: PUSH
6225: LD_STRING Kirilenkova
6227: PPUSH
6228: LD_INT 0
6230: PPUSH
6231: CALL 6656 0 2
6235: ST_TO_ADDR
// Kapitsova = PrepareUnit ( Kapitsova , false ) ;
6236: LD_ADDR_EXP 51
6240: PUSH
6241: LD_STRING Kapitsova
6243: PPUSH
6244: LD_INT 0
6246: PPUSH
6247: CALL 6656 0 2
6251: ST_TO_ADDR
// Karamazov = PrepareUnit ( Karamazov , false ) ;
6252: LD_ADDR_EXP 52
6256: PUSH
6257: LD_STRING Karamazov
6259: PPUSH
6260: LD_INT 0
6262: PPUSH
6263: CALL 6656 0 2
6267: ST_TO_ADDR
// PlaceHumanInUnit ( Scholtze , AllLabR1 ) ;
6268: LD_EXP 49
6272: PPUSH
6273: LD_INT 39
6275: PPUSH
6276: CALL_OW 52
// PlaceHumanInUnit ( Kirilenkova , AllLabR2 ) ;
6280: LD_EXP 50
6284: PPUSH
6285: LD_INT 133
6287: PPUSH
6288: CALL_OW 52
// PlaceHumanInUnit ( Kapitsova , AllLabR2 ) ;
6292: LD_EXP 51
6296: PPUSH
6297: LD_INT 133
6299: PPUSH
6300: CALL_OW 52
// PlaceHumanInUnit ( Karamazov , AllDep ) ;
6304: LD_EXP 52
6308: PPUSH
6309: LD_INT 45
6311: PPUSH
6312: CALL_OW 52
// RespawnInside ( 7 , 1 , AllDep , 10 , 2 , 2 ) ;
6316: LD_INT 7
6318: PPUSH
6319: LD_INT 1
6321: PPUSH
6322: LD_INT 45
6324: PPUSH
6325: LD_INT 10
6327: PPUSH
6328: LD_INT 2
6330: PPUSH
6331: LD_INT 2
6333: PPUSH
6334: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllDep , 10 , 2 , 2 ) ;
6338: LD_INT 7
6340: PPUSH
6341: LD_INT 3
6343: PPUSH
6344: LD_INT 45
6346: PPUSH
6347: LD_INT 10
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: LD_INT 2
6355: PPUSH
6356: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllBar1 , 10 , 5 , 4 ) ;
6360: LD_INT 7
6362: PPUSH
6363: LD_INT 1
6365: PPUSH
6366: LD_INT 194
6368: PPUSH
6369: LD_INT 10
6371: PPUSH
6372: LD_INT 5
6374: PPUSH
6375: LD_INT 4
6377: PPUSH
6378: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllBar1 , 10 , 8 , 6 ) ;
6382: LD_INT 7
6384: PPUSH
6385: LD_INT 3
6387: PPUSH
6388: LD_INT 194
6390: PPUSH
6391: LD_INT 10
6393: PPUSH
6394: LD_INT 8
6396: PPUSH
6397: LD_INT 6
6399: PPUSH
6400: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllFab1 , 10 , 3 , 6 ) ;
6404: LD_INT 7
6406: PPUSH
6407: LD_INT 1
6409: PPUSH
6410: LD_INT 156
6412: PPUSH
6413: LD_INT 10
6415: PPUSH
6416: LD_INT 3
6418: PPUSH
6419: LD_INT 6
6421: PPUSH
6422: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllFab2 , 10 , 3 , 6 ) ;
6426: LD_INT 7
6428: PPUSH
6429: LD_INT 3
6431: PPUSH
6432: LD_INT 162
6434: PPUSH
6435: LD_INT 10
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 6
6443: PPUSH
6444: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllLabR1 , 10 , 4 , 3 ) ;
6448: LD_INT 7
6450: PPUSH
6451: LD_INT 3
6453: PPUSH
6454: LD_INT 39
6456: PPUSH
6457: LD_INT 10
6459: PPUSH
6460: LD_INT 4
6462: PPUSH
6463: LD_INT 3
6465: PPUSH
6466: CALL 7750 0 6
// RespawnInside ( 7 , 3 , AllLabR2 , 10 , 4 , 2 ) ;
6470: LD_INT 7
6472: PPUSH
6473: LD_INT 3
6475: PPUSH
6476: LD_INT 133
6478: PPUSH
6479: LD_INT 10
6481: PPUSH
6482: LD_INT 4
6484: PPUSH
6485: LD_INT 2
6487: PPUSH
6488: CALL 7750 0 6
// RespawnInside ( 7 , 1 , AllLabA , 10 , 4 , 2 ) ;
6492: LD_INT 7
6494: PPUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_INT 46
6500: PPUSH
6501: LD_INT 10
6503: PPUSH
6504: LD_INT 4
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: CALL 7750 0 6
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 7
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 21
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 32
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 58
6551: PUSH
6552: EMPTY
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: PPUSH
6561: CALL_OW 69
6565: PUSH
6566: FOR_IN
6567: IFFALSE 6614
// RespawnInside ( 7 , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , i , 10 , 1 , 1 ) ;
6569: LD_INT 7
6571: PPUSH
6572: LD_INT 1
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 1
6584: PPUSH
6585: LD_INT 2
6587: PPUSH
6588: CALL_OW 12
6592: ARRAY
6593: PPUSH
6594: LD_VAR 0 2
6598: PPUSH
6599: LD_INT 10
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 1
6607: PPUSH
6608: CALL 7750 0 6
6612: GO 6566
6614: POP
6615: POP
// RespawnInside ( 7 , 1 , AllControl , 10 , 3 , 3 ) ;
6616: LD_INT 7
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 226
6624: PPUSH
6625: LD_INT 10
6627: PPUSH
6628: LD_INT 3
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: CALL 7750 0 6
// allianceControler = UnitsInside ( AllControl ) ;
6638: LD_ADDR_EXP 63
6642: PUSH
6643: LD_INT 226
6645: PPUSH
6646: CALL_OW 313
6650: ST_TO_ADDR
// end ; end_of_file
6651: LD_VAR 0 1
6655: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6656: LD_INT 0
6658: PPUSH
6659: PPUSH
// if exist_mode then
6660: LD_VAR 0 2
6664: IFFALSE 6683
// unit := CreateCharacter ( ident ) else
6666: LD_ADDR_VAR 0 4
6670: PUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 34
6680: ST_TO_ADDR
6681: GO 6698
// unit := NewCharacter ( ident ) ;
6683: LD_ADDR_VAR 0 4
6687: PUSH
6688: LD_VAR 0 1
6692: PPUSH
6693: CALL_OW 25
6697: ST_TO_ADDR
// result := unit ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_VAR 0 4
6707: ST_TO_ADDR
// end ;
6708: LD_VAR 0 3
6712: RET
// export function PrepareUnitEpsilon ( ident ) ; var unit ; begin
6713: LD_INT 0
6715: PPUSH
6716: PPUSH
// if TestCharacters ( 13s_ & ident ) = true then
6717: LD_STRING 13s_
6719: PUSH
6720: LD_VAR 0 1
6724: STR
6725: PPUSH
6726: CALL_OW 28
6730: PUSH
6731: LD_INT 1
6733: EQUAL
6734: IFFALSE 6755
// unit = CreateCharacter ( 13s_ & ident ) ;
6736: LD_ADDR_VAR 0 3
6740: PUSH
6741: LD_STRING 13s_
6743: PUSH
6744: LD_VAR 0 1
6748: STR
6749: PPUSH
6750: CALL_OW 34
6754: ST_TO_ADDR
// result := unit ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_VAR 0 3
6764: ST_TO_ADDR
// end ;
6765: LD_VAR 0 2
6769: RET
// export function PrepareUnitOmega ( ident ) ; var unit ; begin
6770: LD_INT 0
6772: PPUSH
6773: PPUSH
// if TestCharacters ( 15_ & ident ) = true then
6774: LD_STRING 15_
6776: PUSH
6777: LD_VAR 0 1
6781: STR
6782: PPUSH
6783: CALL_OW 28
6787: PUSH
6788: LD_INT 1
6790: EQUAL
6791: IFFALSE 6828
// begin unit = CreateCharacter ( 15_ & ident ) ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_STRING 15_
6800: PUSH
6801: LD_VAR 0 1
6805: STR
6806: PPUSH
6807: CALL_OW 34
6811: ST_TO_ADDR
// heroesFromOmega = heroesFromOmega ^ unit ;
6812: LD_ADDR_EXP 20
6816: PUSH
6817: LD_EXP 20
6821: PUSH
6822: LD_VAR 0 3
6826: ADD
6827: ST_TO_ADDR
// end ; result := unit ;
6828: LD_ADDR_VAR 0 2
6832: PUSH
6833: LD_VAR 0 3
6837: ST_TO_ADDR
// end ;
6838: LD_VAR 0 2
6842: RET
// export function TabLenght ( tab ) ; var i ; begin
6843: LD_INT 0
6845: PPUSH
6846: PPUSH
// for i = 1 to tab do
6847: LD_ADDR_VAR 0 3
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 1
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6877
// result = i ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_VAR 0 3
6874: ST_TO_ADDR
6875: GO 6862
6877: POP
6878: POP
// end ;
6879: LD_VAR 0 2
6883: RET
// export function Video ( mode ) ; begin
6884: LD_INT 0
6886: PPUSH
// ingame_video = mode ;
6887: LD_ADDR_OWVAR 52
6891: PUSH
6892: LD_VAR 0 1
6896: ST_TO_ADDR
// interface_hidden = mode ;
6897: LD_ADDR_OWVAR 54
6901: PUSH
6902: LD_VAR 0 1
6906: ST_TO_ADDR
// end ;
6907: LD_VAR 0 2
6911: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
6916: PPUSH
// characters := characters diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6917: LD_ADDR_VAR 0 1
6921: PUSH
6922: LD_VAR 0 1
6926: PUSH
6927: LD_EXP 1
6931: PUSH
6932: LD_EXP 3
6936: PUSH
6937: LD_EXP 21
6941: PUSH
6942: LD_EXP 22
6946: PUSH
6947: LD_EXP 23
6951: PUSH
6952: LD_EXP 4
6956: PUSH
6957: LD_EXP 5
6961: PUSH
6962: LD_EXP 6
6966: PUSH
6967: LD_EXP 7
6971: PUSH
6972: LD_EXP 8
6976: PUSH
6977: LD_EXP 9
6981: PUSH
6982: LD_EXP 10
6986: PUSH
6987: LD_EXP 11
6991: PUSH
6992: LD_EXP 12
6996: PUSH
6997: LD_EXP 13
7001: PUSH
7002: LD_EXP 14
7006: PUSH
7007: LD_EXP 15
7011: PUSH
7012: LD_EXP 17
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: DIFF
7037: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
7038: LD_ADDR_VAR 0 6
7042: PUSH
7043: LD_INT 1
7045: PPUSH
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 12
7055: ST_TO_ADDR
// for i = 1 to characters do
7056: LD_ADDR_VAR 0 5
7060: PUSH
7061: DOUBLE
7062: LD_INT 1
7064: DEC
7065: ST_TO_ADDR
7066: LD_VAR 0 1
7070: PUSH
7071: FOR_TO
7072: IFFALSE 7182
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7074: LD_VAR 0 5
7078: PUSH
7079: LD_VAR 0 6
7083: EQUAL
7084: PUSH
7085: LD_VAR 0 1
7089: PUSH
7090: LD_VAR 0 5
7094: ARRAY
7095: PPUSH
7096: CALL_OW 258
7100: PUSH
7101: LD_INT 1
7103: EQUAL
7104: AND
7105: IFFALSE 7127
// Say ( characters [ i ] , dialogMID ) ;
7107: LD_VAR 0 1
7111: PUSH
7112: LD_VAR 0 5
7116: ARRAY
7117: PPUSH
7118: LD_VAR 0 2
7122: PPUSH
7123: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7127: LD_VAR 0 5
7131: PUSH
7132: LD_VAR 0 6
7136: EQUAL
7137: PUSH
7138: LD_VAR 0 1
7142: PUSH
7143: LD_VAR 0 5
7147: ARRAY
7148: PPUSH
7149: CALL_OW 258
7153: PUSH
7154: LD_INT 2
7156: EQUAL
7157: AND
7158: IFFALSE 7180
// Say ( characters [ i ] , dialogFID ) ;
7160: LD_VAR 0 1
7164: PUSH
7165: LD_VAR 0 5
7169: ARRAY
7170: PPUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 88
// end ;
7180: GO 7071
7182: POP
7183: POP
// end ;
7184: LD_VAR 0 4
7188: RET
// export function SortBySkill ( list , asc ) ; var i , j , tmp ; begin
7189: LD_INT 0
7191: PPUSH
7192: PPUSH
7193: PPUSH
7194: PPUSH
// if not list then
7195: LD_VAR 0 1
7199: NOT
7200: IFFALSE 7204
// exit ;
7202: GO 7551
// result := [ ] ;
7204: LD_ADDR_VAR 0 3
7208: PUSH
7209: EMPTY
7210: ST_TO_ADDR
// for i in list do
7211: LD_ADDR_VAR 0 4
7215: PUSH
7216: LD_VAR 0 1
7220: PUSH
7221: FOR_IN
7222: IFFALSE 7463
// begin tmp := ( ( GetSkill ( i , 1 ) + GetSkill ( i , 2 ) + GetSkill ( i , 3 ) + GetSkill ( i , 4 ) ) div 4 ) ;
7224: LD_ADDR_VAR 0 6
7228: PUSH
7229: LD_VAR 0 4
7233: PPUSH
7234: LD_INT 1
7236: PPUSH
7237: CALL_OW 259
7241: PUSH
7242: LD_VAR 0 4
7246: PPUSH
7247: LD_INT 2
7249: PPUSH
7250: CALL_OW 259
7254: PLUS
7255: PUSH
7256: LD_VAR 0 4
7260: PPUSH
7261: LD_INT 3
7263: PPUSH
7264: CALL_OW 259
7268: PLUS
7269: PUSH
7270: LD_VAR 0 4
7274: PPUSH
7275: LD_INT 4
7277: PPUSH
7278: CALL_OW 259
7282: PLUS
7283: PUSH
7284: LD_INT 4
7286: DIV
7287: ST_TO_ADDR
// if not result then
7288: LD_VAR 0 3
7292: NOT
7293: IFFALSE 7319
// result := [ [ i , tmp ] ] else
7295: LD_ADDR_VAR 0 3
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_VAR 0 6
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: ST_TO_ADDR
7317: GO 7461
// begin if result [ result ] [ 2 ] <= tmp then
7319: LD_VAR 0 3
7323: PUSH
7324: LD_VAR 0 3
7328: ARRAY
7329: PUSH
7330: LD_INT 2
7332: ARRAY
7333: PUSH
7334: LD_VAR 0 6
7338: LESSEQUAL
7339: IFFALSE 7381
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_VAR 0 3
7350: PPUSH
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 1
7358: PLUS
7359: PPUSH
7360: LD_VAR 0 4
7364: PUSH
7365: LD_VAR 0 6
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 2
7378: ST_TO_ADDR
7379: GO 7461
// for j = 1 to result do
7381: LD_ADDR_VAR 0 5
7385: PUSH
7386: DOUBLE
7387: LD_INT 1
7389: DEC
7390: ST_TO_ADDR
7391: LD_VAR 0 3
7395: PUSH
7396: FOR_TO
7397: IFFALSE 7459
// begin if tmp < result [ j ] [ 2 ] then
7399: LD_VAR 0 6
7403: PUSH
7404: LD_VAR 0 3
7408: PUSH
7409: LD_VAR 0 5
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: LESS
7419: IFFALSE 7457
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7421: LD_ADDR_VAR 0 3
7425: PUSH
7426: LD_VAR 0 3
7430: PPUSH
7431: LD_VAR 0 5
7435: PPUSH
7436: LD_VAR 0 4
7440: PUSH
7441: LD_VAR 0 6
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 2
7454: ST_TO_ADDR
// break ;
7455: GO 7459
// end ; end ;
7457: GO 7396
7459: POP
7460: POP
// end ; end ;
7461: GO 7221
7463: POP
7464: POP
// if result and not asc then
7465: LD_VAR 0 3
7469: PUSH
7470: LD_VAR 0 2
7474: NOT
7475: AND
7476: IFFALSE 7551
// begin tmp := result ;
7478: LD_ADDR_VAR 0 6
7482: PUSH
7483: LD_VAR 0 3
7487: ST_TO_ADDR
// for i = tmp downto 1 do
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: DOUBLE
7494: LD_VAR 0 6
7498: INC
7499: ST_TO_ADDR
7500: LD_INT 1
7502: PUSH
7503: FOR_DOWNTO
7504: IFFALSE 7549
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_VAR 0 3
7515: PPUSH
7516: LD_VAR 0 6
7520: PUSH
7521: LD_VAR 0 4
7525: MINUS
7526: PUSH
7527: LD_INT 1
7529: PLUS
7530: PPUSH
7531: LD_VAR 0 6
7535: PUSH
7536: LD_VAR 0 4
7540: ARRAY
7541: PPUSH
7542: CALL_OW 1
7546: ST_TO_ADDR
7547: GO 7503
7549: POP
7550: POP
// end ; end ;
7551: LD_VAR 0 3
7555: RET
// export function PrepareDifficulty ; begin
7556: LD_INT 0
7558: PPUSH
// if difficulty = 1 then
7559: LD_OWVAR 67
7563: PUSH
7564: LD_INT 1
7566: EQUAL
7567: IFFALSE 7595
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7569: LD_INT 51
7571: PPUSH
7572: LD_INT 6
7574: PPUSH
7575: LD_INT 2
7577: PPUSH
7578: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7582: LD_INT 57
7584: PPUSH
7585: LD_INT 6
7587: PPUSH
7588: LD_INT 2
7590: PPUSH
7591: CALL_OW 322
// end ; if difficulty = 2 then
7595: LD_OWVAR 67
7599: PUSH
7600: LD_INT 2
7602: EQUAL
7603: IFFALSE 7657
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7605: LD_INT 51
7607: PPUSH
7608: LD_INT 6
7610: PPUSH
7611: LD_INT 2
7613: PPUSH
7614: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7618: LD_INT 57
7620: PPUSH
7621: LD_INT 6
7623: PPUSH
7624: LD_INT 2
7626: PPUSH
7627: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7631: LD_INT 52
7633: PPUSH
7634: LD_INT 6
7636: PPUSH
7637: LD_INT 2
7639: PPUSH
7640: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7644: LD_INT 58
7646: PPUSH
7647: LD_INT 6
7649: PPUSH
7650: LD_INT 2
7652: PPUSH
7653: CALL_OW 322
// end ; if difficulty = 3 then
7657: LD_OWVAR 67
7661: PUSH
7662: LD_INT 3
7664: EQUAL
7665: IFFALSE 7745
// begin SetTech ( tech_Weap1 , 6 , state_researched ) ;
7667: LD_INT 51
7669: PPUSH
7670: LD_INT 6
7672: PPUSH
7673: LD_INT 2
7675: PPUSH
7676: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7680: LD_INT 57
7682: PPUSH
7683: LD_INT 6
7685: PPUSH
7686: LD_INT 2
7688: PPUSH
7689: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7693: LD_INT 52
7695: PPUSH
7696: LD_INT 6
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7706: LD_INT 58
7708: PPUSH
7709: LD_INT 6
7711: PPUSH
7712: LD_INT 2
7714: PPUSH
7715: CALL_OW 322
// SetTech ( tech_Weap3 , 6 , state_researched ) ;
7719: LD_INT 53
7721: PPUSH
7722: LD_INT 6
7724: PPUSH
7725: LD_INT 2
7727: PPUSH
7728: CALL_OW 322
// SetTech ( tech_Comp3 , 6 , state_researched ) ;
7732: LD_INT 59
7734: PPUSH
7735: LD_INT 6
7737: PPUSH
7738: LD_INT 2
7740: PPUSH
7741: CALL_OW 322
// end ; end ;
7745: LD_VAR 0 1
7749: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
7750: LD_INT 0
7752: PPUSH
7753: PPUSH
7754: PPUSH
7755: PPUSH
7756: PPUSH
// for i = 1 to count do
7757: LD_ADDR_VAR 0 8
7761: PUSH
7762: DOUBLE
7763: LD_INT 1
7765: DEC
7766: ST_TO_ADDR
7767: LD_VAR 0 6
7771: PUSH
7772: FOR_TO
7773: IFFALSE 7854
// begin uc_side = side ;
7775: LD_ADDR_OWVAR 20
7779: PUSH
7780: LD_VAR 0 1
7784: ST_TO_ADDR
// uc_nation = nation ;
7785: LD_ADDR_OWVAR 21
7789: PUSH
7790: LD_VAR 0 2
7794: ST_TO_ADDR
// hc_gallery =  ;
7795: LD_ADDR_OWVAR 33
7799: PUSH
7800: LD_STRING 
7802: ST_TO_ADDR
// hc_name =  ;
7803: LD_ADDR_OWVAR 26
7807: PUSH
7808: LD_STRING 
7810: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7811: LD_INT 0
7813: PPUSH
7814: LD_VAR 0 5
7818: PPUSH
7819: LD_VAR 0 4
7823: PPUSH
7824: CALL_OW 380
// un = CreateHuman ;
7828: LD_ADDR_VAR 0 10
7832: PUSH
7833: CALL_OW 44
7837: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7838: LD_VAR 0 10
7842: PPUSH
7843: LD_VAR 0 3
7847: PPUSH
7848: CALL_OW 52
// end ;
7852: GO 7772
7854: POP
7855: POP
// end ;
7856: LD_VAR 0 7
7860: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7874: LD_INT 2100
7876: PUSH
7877: LD_INT 3150
7879: PUSH
7880: LD_INT 4200
7882: PUSH
7883: LD_INT 5250
7885: PUSH
7886: LD_INT 6300
7888: PUSH
7889: LD_INT 7350
7891: PUSH
7892: LD_INT 8400
7894: PUSH
7895: LD_INT 9450
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 1
7910: PPUSH
7911: LD_INT 8
7913: PPUSH
7914: CALL_OW 12
7918: ARRAY
7919: PPUSH
7920: CALL_OW 67
// amChassisTab = [ ] ;
7924: LD_ADDR_VAR 0 19
7928: PUSH
7929: EMPTY
7930: ST_TO_ADDR
// arChassisTab = [ ] ;
7931: LD_ADDR_VAR 0 18
7935: PUSH
7936: EMPTY
7937: ST_TO_ADDR
// ruChassisTab = [ ] ;
7938: LD_ADDR_VAR 0 17
7942: PUSH
7943: EMPTY
7944: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7945: LD_INT 35
7947: PPUSH
7948: CALL_OW 67
// if nation = 1 then
7952: LD_VAR 0 5
7956: PUSH
7957: LD_INT 1
7959: EQUAL
7960: IFFALSE 8451
// begin uc_side = side ;
7962: LD_ADDR_OWVAR 20
7966: PUSH
7967: LD_VAR 0 2
7971: ST_TO_ADDR
// uc_nation = nation ;
7972: LD_ADDR_OWVAR 21
7976: PUSH
7977: LD_VAR 0 5
7981: ST_TO_ADDR
// vc_engine = vehengine ;
7982: LD_ADDR_OWVAR 39
7986: PUSH
7987: LD_VAR 0 6
7991: ST_TO_ADDR
// vc_control = vehcontrol ;
7992: LD_ADDR_OWVAR 38
7996: PUSH
7997: LD_VAR 0 7
8001: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8002: LD_ADDR_OWVAR 40
8006: PUSH
8007: LD_VAR 0 10
8011: PUSH
8012: LD_INT 1
8014: PPUSH
8015: LD_VAR 0 10
8019: PPUSH
8020: CALL_OW 12
8024: ARRAY
8025: ST_TO_ADDR
// for j = 1 to AMWeapon do
8026: LD_ADDR_VAR 0 14
8030: PUSH
8031: DOUBLE
8032: LD_INT 1
8034: DEC
8035: ST_TO_ADDR
8036: LD_VAR 0 10
8040: PUSH
8041: FOR_TO
8042: IFFALSE 8343
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8044: LD_VAR 0 10
8048: PUSH
8049: LD_VAR 0 14
8053: ARRAY
8054: PUSH
8055: LD_INT 2
8057: EQUAL
8058: PUSH
8059: LD_VAR 0 10
8063: PUSH
8064: LD_VAR 0 14
8068: ARRAY
8069: PUSH
8070: LD_INT 3
8072: EQUAL
8073: OR
8074: IFFALSE 8127
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8076: LD_ADDR_VAR 0 19
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: LD_INT 2
8086: PUSH
8087: LD_INT 3
8089: PUSH
8090: LD_INT 4
8092: PUSH
8093: LD_INT 5
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8103: LD_ADDR_OWVAR 37
8107: PUSH
8108: LD_VAR 0 19
8112: PUSH
8113: LD_INT 1
8115: PPUSH
8116: LD_VAR 0 19
8120: PPUSH
8121: CALL_OW 12
8125: ARRAY
8126: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8127: LD_VAR 0 10
8131: PUSH
8132: LD_VAR 0 14
8136: ARRAY
8137: PUSH
8138: LD_INT 4
8140: EQUAL
8141: PUSH
8142: LD_VAR 0 10
8146: PUSH
8147: LD_VAR 0 14
8151: ARRAY
8152: PUSH
8153: LD_INT 5
8155: EQUAL
8156: OR
8157: PUSH
8158: LD_VAR 0 10
8162: PUSH
8163: LD_VAR 0 14
8167: ARRAY
8168: PUSH
8169: LD_INT 9
8171: EQUAL
8172: OR
8173: PUSH
8174: LD_VAR 0 10
8178: PUSH
8179: LD_VAR 0 14
8183: ARRAY
8184: PUSH
8185: LD_INT 11
8187: EQUAL
8188: OR
8189: PUSH
8190: LD_VAR 0 10
8194: PUSH
8195: LD_VAR 0 14
8199: ARRAY
8200: PUSH
8201: LD_INT 7
8203: EQUAL
8204: OR
8205: IFFALSE 8254
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8207: LD_ADDR_VAR 0 19
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: LD_INT 3
8217: PUSH
8218: LD_INT 4
8220: PUSH
8221: LD_INT 5
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8230: LD_ADDR_OWVAR 37
8234: PUSH
8235: LD_VAR 0 19
8239: PUSH
8240: LD_INT 1
8242: PPUSH
8243: LD_VAR 0 19
8247: PPUSH
8248: CALL_OW 12
8252: ARRAY
8253: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8254: LD_VAR 0 10
8258: PUSH
8259: LD_VAR 0 14
8263: ARRAY
8264: PUSH
8265: LD_INT 8
8267: EQUAL
8268: PUSH
8269: LD_VAR 0 10
8273: PUSH
8274: LD_VAR 0 14
8278: ARRAY
8279: PUSH
8280: LD_INT 6
8282: EQUAL
8283: OR
8284: PUSH
8285: LD_VAR 0 10
8289: PUSH
8290: LD_VAR 0 14
8294: ARRAY
8295: PUSH
8296: LD_INT 10
8298: EQUAL
8299: OR
8300: IFFALSE 8341
// begin amChassisTab = [ 4 , 5 ] ;
8302: LD_ADDR_VAR 0 19
8306: PUSH
8307: LD_INT 4
8309: PUSH
8310: LD_INT 5
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8317: LD_ADDR_OWVAR 37
8321: PUSH
8322: LD_VAR 0 19
8326: PUSH
8327: LD_INT 1
8329: PPUSH
8330: LD_VAR 0 19
8334: PPUSH
8335: CALL_OW 12
8339: ARRAY
8340: ST_TO_ADDR
// end ; end ;
8341: GO 8041
8343: POP
8344: POP
// veh = CreateVehicle ;
8345: LD_ADDR_VAR 0 16
8349: PUSH
8350: CALL_OW 45
8354: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8355: LD_VAR 0 16
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_INT 0
8367: PPUSH
8368: CALL_OW 49
// if vc_control = 1 then
8372: LD_OWVAR 38
8376: PUSH
8377: LD_INT 1
8379: EQUAL
8380: IFFALSE 8437
// begin hc_gallery =  ;
8382: LD_ADDR_OWVAR 33
8386: PUSH
8387: LD_STRING 
8389: ST_TO_ADDR
// hc_name =  ;
8390: LD_ADDR_OWVAR 26
8394: PUSH
8395: LD_STRING 
8397: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8398: LD_INT 0
8400: PPUSH
8401: LD_INT 3
8403: PPUSH
8404: LD_VAR 0 4
8408: PPUSH
8409: CALL_OW 380
// un = CreateHuman ;
8413: LD_ADDR_VAR 0 15
8417: PUSH
8418: CALL_OW 44
8422: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8423: LD_VAR 0 15
8427: PPUSH
8428: LD_VAR 0 16
8432: PPUSH
8433: CALL_OW 52
// end ; i = i + 1 ;
8437: LD_ADDR_VAR 0 13
8441: PUSH
8442: LD_VAR 0 13
8446: PUSH
8447: LD_INT 1
8449: PLUS
8450: ST_TO_ADDR
// end ; if nation = 2 then
8451: LD_VAR 0 5
8455: PUSH
8456: LD_INT 2
8458: EQUAL
8459: IFFALSE 8883
// begin uc_side = side ;
8461: LD_ADDR_OWVAR 20
8465: PUSH
8466: LD_VAR 0 2
8470: ST_TO_ADDR
// uc_nation = nation ;
8471: LD_ADDR_OWVAR 21
8475: PUSH
8476: LD_VAR 0 5
8480: ST_TO_ADDR
// vc_engine = vehengine ;
8481: LD_ADDR_OWVAR 39
8485: PUSH
8486: LD_VAR 0 6
8490: ST_TO_ADDR
// vc_control = vehcontrol ;
8491: LD_ADDR_OWVAR 38
8495: PUSH
8496: LD_VAR 0 7
8500: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8501: LD_ADDR_OWVAR 40
8505: PUSH
8506: LD_VAR 0 9
8510: PUSH
8511: LD_INT 1
8513: PPUSH
8514: LD_VAR 0 9
8518: PPUSH
8519: CALL_OW 12
8523: ARRAY
8524: ST_TO_ADDR
// for j = 1 to ARWeapons do
8525: LD_ADDR_VAR 0 14
8529: PUSH
8530: DOUBLE
8531: LD_INT 1
8533: DEC
8534: ST_TO_ADDR
8535: LD_VAR 0 9
8539: PUSH
8540: FOR_TO
8541: IFFALSE 8775
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8543: LD_VAR 0 9
8547: PUSH
8548: LD_VAR 0 14
8552: ARRAY
8553: PUSH
8554: LD_INT 24
8556: EQUAL
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_VAR 0 14
8567: ARRAY
8568: PUSH
8569: LD_INT 22
8571: EQUAL
8572: OR
8573: PUSH
8574: LD_VAR 0 9
8578: PUSH
8579: LD_VAR 0 14
8583: ARRAY
8584: PUSH
8585: LD_INT 23
8587: EQUAL
8588: OR
8589: PUSH
8590: LD_VAR 0 9
8594: PUSH
8595: LD_VAR 0 14
8599: ARRAY
8600: PUSH
8601: LD_INT 30
8603: EQUAL
8604: OR
8605: IFFALSE 8654
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8607: LD_ADDR_VAR 0 18
8611: PUSH
8612: LD_INT 11
8614: PUSH
8615: LD_INT 12
8617: PUSH
8618: LD_INT 13
8620: PUSH
8621: LD_INT 14
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8630: LD_ADDR_OWVAR 37
8634: PUSH
8635: LD_VAR 0 18
8639: PUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_VAR 0 18
8647: PPUSH
8648: CALL_OW 12
8652: ARRAY
8653: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8654: LD_VAR 0 9
8658: PUSH
8659: LD_VAR 0 14
8663: ARRAY
8664: PUSH
8665: LD_INT 29
8667: EQUAL
8668: PUSH
8669: LD_VAR 0 9
8673: PUSH
8674: LD_VAR 0 14
8678: ARRAY
8679: PUSH
8680: LD_INT 28
8682: EQUAL
8683: OR
8684: PUSH
8685: LD_VAR 0 9
8689: PUSH
8690: LD_VAR 0 14
8694: ARRAY
8695: PUSH
8696: LD_INT 27
8698: EQUAL
8699: OR
8700: PUSH
8701: LD_VAR 0 9
8705: PUSH
8706: LD_VAR 0 14
8710: ARRAY
8711: PUSH
8712: LD_INT 26
8714: EQUAL
8715: OR
8716: PUSH
8717: LD_VAR 0 9
8721: PUSH
8722: LD_VAR 0 14
8726: ARRAY
8727: PUSH
8728: LD_INT 25
8730: EQUAL
8731: OR
8732: IFFALSE 8773
// begin arChassisTab = [ 13 , 14 ] ;
8734: LD_ADDR_VAR 0 18
8738: PUSH
8739: LD_INT 13
8741: PUSH
8742: LD_INT 14
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8749: LD_ADDR_OWVAR 37
8753: PUSH
8754: LD_VAR 0 18
8758: PUSH
8759: LD_INT 1
8761: PPUSH
8762: LD_VAR 0 18
8766: PPUSH
8767: CALL_OW 12
8771: ARRAY
8772: ST_TO_ADDR
// end ; end ;
8773: GO 8540
8775: POP
8776: POP
// veh = CreateVehicle ;
8777: LD_ADDR_VAR 0 16
8781: PUSH
8782: CALL_OW 45
8786: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8787: LD_VAR 0 16
8791: PPUSH
8792: LD_VAR 0 1
8796: PPUSH
8797: LD_INT 0
8799: PPUSH
8800: CALL_OW 49
// if vc_control = 1 then
8804: LD_OWVAR 38
8808: PUSH
8809: LD_INT 1
8811: EQUAL
8812: IFFALSE 8869
// begin hc_gallery =  ;
8814: LD_ADDR_OWVAR 33
8818: PUSH
8819: LD_STRING 
8821: ST_TO_ADDR
// hc_name =  ;
8822: LD_ADDR_OWVAR 26
8826: PUSH
8827: LD_STRING 
8829: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8830: LD_INT 0
8832: PPUSH
8833: LD_INT 3
8835: PPUSH
8836: LD_VAR 0 4
8840: PPUSH
8841: CALL_OW 380
// un = CreateHuman ;
8845: LD_ADDR_VAR 0 15
8849: PUSH
8850: CALL_OW 44
8854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8855: LD_VAR 0 15
8859: PPUSH
8860: LD_VAR 0 16
8864: PPUSH
8865: CALL_OW 52
// end ; i = i + 1 ;
8869: LD_ADDR_VAR 0 13
8873: PUSH
8874: LD_VAR 0 13
8878: PUSH
8879: LD_INT 1
8881: PLUS
8882: ST_TO_ADDR
// end ; if nation = 3 then
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 3
8890: EQUAL
8891: IFFALSE 9267
// begin uc_side = side ;
8893: LD_ADDR_OWVAR 20
8897: PUSH
8898: LD_VAR 0 2
8902: ST_TO_ADDR
// uc_nation = nation ;
8903: LD_ADDR_OWVAR 21
8907: PUSH
8908: LD_VAR 0 5
8912: ST_TO_ADDR
// vc_engine = vehengine ;
8913: LD_ADDR_OWVAR 39
8917: PUSH
8918: LD_VAR 0 6
8922: ST_TO_ADDR
// vc_control = vehcontrol ;
8923: LD_ADDR_OWVAR 38
8927: PUSH
8928: LD_VAR 0 7
8932: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8933: LD_ADDR_OWVAR 40
8937: PUSH
8938: LD_VAR 0 8
8942: PUSH
8943: LD_INT 1
8945: PPUSH
8946: LD_VAR 0 8
8950: PPUSH
8951: CALL_OW 12
8955: ARRAY
8956: ST_TO_ADDR
// for j = 1 to RuWeapons do
8957: LD_ADDR_VAR 0 14
8961: PUSH
8962: DOUBLE
8963: LD_INT 1
8965: DEC
8966: ST_TO_ADDR
8967: LD_VAR 0 8
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9159
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8975: LD_VAR 0 8
8979: PUSH
8980: LD_VAR 0 14
8984: ARRAY
8985: PUSH
8986: LD_INT 42
8988: EQUAL
8989: PUSH
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 14
8999: ARRAY
9000: PUSH
9001: LD_INT 43
9003: EQUAL
9004: OR
9005: PUSH
9006: LD_VAR 0 8
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PUSH
9017: LD_INT 44
9019: EQUAL
9020: OR
9021: PUSH
9022: LD_VAR 0 8
9026: PUSH
9027: LD_VAR 0 14
9031: ARRAY
9032: PUSH
9033: LD_INT 45
9035: EQUAL
9036: OR
9037: PUSH
9038: LD_VAR 0 8
9042: PUSH
9043: LD_VAR 0 14
9047: ARRAY
9048: PUSH
9049: LD_INT 49
9051: EQUAL
9052: OR
9053: IFFALSE 9090
// begin ruChassisTab = [ 24 ] ;
9055: LD_ADDR_VAR 0 17
9059: PUSH
9060: LD_INT 24
9062: PUSH
9063: EMPTY
9064: LIST
9065: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9066: LD_ADDR_OWVAR 37
9070: PUSH
9071: LD_VAR 0 17
9075: PUSH
9076: LD_INT 1
9078: PPUSH
9079: LD_VAR 0 17
9083: PPUSH
9084: CALL_OW 12
9088: ARRAY
9089: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9090: LD_VAR 0 8
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PUSH
9101: LD_INT 46
9103: EQUAL
9104: PUSH
9105: LD_VAR 0 8
9109: PUSH
9110: LD_VAR 0 14
9114: ARRAY
9115: PUSH
9116: LD_INT 47
9118: EQUAL
9119: OR
9120: IFFALSE 9157
// begin ruChassisTab = [ 24 ] ;
9122: LD_ADDR_VAR 0 17
9126: PUSH
9127: LD_INT 24
9129: PUSH
9130: EMPTY
9131: LIST
9132: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9133: LD_ADDR_OWVAR 37
9137: PUSH
9138: LD_VAR 0 17
9142: PUSH
9143: LD_INT 1
9145: PPUSH
9146: LD_VAR 0 17
9150: PPUSH
9151: CALL_OW 12
9155: ARRAY
9156: ST_TO_ADDR
// end ; end ;
9157: GO 8972
9159: POP
9160: POP
// veh = CreateVehicle ;
9161: LD_ADDR_VAR 0 16
9165: PUSH
9166: CALL_OW 45
9170: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9171: LD_VAR 0 16
9175: PPUSH
9176: LD_VAR 0 1
9180: PPUSH
9181: LD_INT 0
9183: PPUSH
9184: CALL_OW 49
// if vc_control = 1 then
9188: LD_OWVAR 38
9192: PUSH
9193: LD_INT 1
9195: EQUAL
9196: IFFALSE 9253
// begin hc_gallery =  ;
9198: LD_ADDR_OWVAR 33
9202: PUSH
9203: LD_STRING 
9205: ST_TO_ADDR
// hc_name =  ;
9206: LD_ADDR_OWVAR 26
9210: PUSH
9211: LD_STRING 
9213: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9214: LD_INT 0
9216: PPUSH
9217: LD_INT 3
9219: PPUSH
9220: LD_VAR 0 4
9224: PPUSH
9225: CALL_OW 380
// un = CreateHuman ;
9229: LD_ADDR_VAR 0 15
9233: PUSH
9234: CALL_OW 44
9238: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9239: LD_VAR 0 15
9243: PPUSH
9244: LD_VAR 0 16
9248: PPUSH
9249: CALL_OW 52
// end ; i = i + 1 ;
9253: LD_ADDR_VAR 0 13
9257: PUSH
9258: LD_VAR 0 13
9262: PUSH
9263: LD_INT 1
9265: PLUS
9266: ST_TO_ADDR
// end ; until i = vehCount ;
9267: LD_VAR 0 13
9271: PUSH
9272: LD_VAR 0 3
9276: EQUAL
9277: IFFALSE 7945
// repeat wait ( 0 0$1 ) ;
9279: LD_INT 35
9281: PPUSH
9282: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
9286: LD_ADDR_VAR 0 20
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_VAR 0 2
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 21
9305: PUSH
9306: LD_INT 2
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 24
9315: PUSH
9316: LD_INT 250
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: ST_TO_ADDR
// if vehicleOK_list > 0 then
9333: LD_VAR 0 20
9337: PUSH
9338: LD_INT 0
9340: GREATER
9341: IFFALSE 9560
// begin for i in vehicleOK_list do
9343: LD_ADDR_VAR 0 13
9347: PUSH
9348: LD_VAR 0 20
9352: PUSH
9353: FOR_IN
9354: IFFALSE 9558
// begin if GetSide ( i ) <> side then
9356: LD_VAR 0 13
9360: PPUSH
9361: CALL_OW 255
9365: PUSH
9366: LD_VAR 0 2
9370: NONEQUAL
9371: IFFALSE 9384
// begin ComStop ( i ) ;
9373: LD_VAR 0 13
9377: PPUSH
9378: CALL_OW 141
// continue ;
9382: GO 9353
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9384: LD_ADDR_VAR 0 21
9388: PUSH
9389: LD_INT 22
9391: PUSH
9392: LD_VAR 0 11
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 69
9405: PPUSH
9406: LD_VAR 0 13
9410: PPUSH
9411: CALL_OW 74
9415: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9416: LD_ADDR_VAR 0 22
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_VAR 0 11
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 59
9438: PUSH
9439: EMPTY
9440: LIST
9441: PUSH
9442: LD_INT 21
9444: PUSH
9445: LD_INT 1
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 2
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: PPUSH
9475: CALL_OW 69
9479: PPUSH
9480: LD_VAR 0 13
9484: PPUSH
9485: CALL_OW 74
9489: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9490: LD_VAR 0 13
9494: PPUSH
9495: LD_VAR 0 21
9499: PPUSH
9500: CALL_OW 296
9504: PUSH
9505: LD_INT 8
9507: PLUS
9508: PUSH
9509: LD_VAR 0 13
9513: PPUSH
9514: LD_VAR 0 22
9518: PPUSH
9519: CALL_OW 296
9523: LESS
9524: IFFALSE 9542
// begin ComAttackUnit ( i , target1 ) ;
9526: LD_VAR 0 13
9530: PPUSH
9531: LD_VAR 0 21
9535: PPUSH
9536: CALL_OW 115
// end else
9540: GO 9556
// begin ComAttackUnit ( i , target2 ) ;
9542: LD_VAR 0 13
9546: PPUSH
9547: LD_VAR 0 22
9551: PPUSH
9552: CALL_OW 115
// end ; end ;
9556: GO 9353
9558: POP
9559: POP
// end ; until vehicleOK_list = [ ] ;
9560: LD_VAR 0 20
9564: PUSH
9565: EMPTY
9566: EQUAL
9567: IFFALSE 9279
// end ;
9569: LD_VAR 0 12
9573: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9574: LD_INT 0
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
// for i = 1 to 72 do
9580: LD_ADDR_VAR 0 5
9584: PUSH
9585: DOUBLE
9586: LD_INT 1
9588: DEC
9589: ST_TO_ADDR
9590: LD_INT 72
9592: PUSH
9593: FOR_TO
9594: IFFALSE 9652
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9596: LD_VAR 0 5
9600: PPUSH
9601: LD_VAR 0 1
9605: PPUSH
9606: CALL_OW 321
9610: PUSH
9611: LD_INT 1
9613: EQUAL
9614: PUSH
9615: LD_VAR 0 5
9619: PPUSH
9620: LD_VAR 0 3
9624: PPUSH
9625: CALL_OW 482
9629: PUSH
9630: LD_INT 1
9632: EQUAL
9633: AND
9634: IFFALSE 9650
// AddComResearch ( lab , i ) ;
9636: LD_VAR 0 2
9640: PPUSH
9641: LD_VAR 0 5
9645: PPUSH
9646: CALL_OW 184
9650: GO 9593
9652: POP
9653: POP
// end ;
9654: LD_VAR 0 4
9658: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Kozlov ] ;
9667: LD_ADDR_VAR 0 8
9671: PUSH
9672: LD_VAR 0 2
9676: PPUSH
9677: CALL_OW 313
9681: PUSH
9682: LD_EXP 36
9686: PUSH
9687: EMPTY
9688: LIST
9689: DIFF
9690: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) diff [ Kozlov ] ;
9691: LD_ADDR_VAR 0 9
9695: PUSH
9696: LD_VAR 0 3
9700: PPUSH
9701: LD_INT 22
9703: PUSH
9704: LD_VAR 0 1
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 25
9715: PUSH
9716: LD_INT 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 24
9725: PUSH
9726: LD_INT 750
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 54
9738: PUSH
9739: EMPTY
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 70
9756: PUSH
9757: LD_EXP 36
9761: PUSH
9762: EMPTY
9763: LIST
9764: DIFF
9765: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9766: LD_ADDR_VAR 0 6
9770: PUSH
9771: LD_VAR 0 3
9775: PPUSH
9776: LD_INT 22
9778: PUSH
9779: LD_VAR 0 1
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 21
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 3
9800: PUSH
9801: LD_INT 24
9803: PUSH
9804: LD_INT 1000
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: PPUSH
9823: CALL_OW 70
9827: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
9828: LD_VAR 0 6
9832: NOT
9833: PUSH
9834: LD_INT 22
9836: PUSH
9837: LD_VAR 0 1
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 25
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 24
9858: PUSH
9859: LD_INT 250
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 69
9875: NOT
9876: AND
9877: IFFALSE 9881
// exit ;
9879: GO 10063
// if buildings_list > 0 and engineerOkInside then
9881: LD_VAR 0 6
9885: PUSH
9886: LD_INT 0
9888: GREATER
9889: PUSH
9890: LD_VAR 0 8
9894: AND
9895: IFFALSE 9906
// ComExitBuilding ( engineerOkInside ) ;
9897: LD_VAR 0 8
9901: PPUSH
9902: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
9906: LD_VAR 0 6
9910: PUSH
9911: LD_INT 0
9913: GREATER
9914: PUSH
9915: LD_VAR 0 9
9919: PUSH
9920: LD_INT 0
9922: GREATER
9923: AND
9924: IFFALSE 9944
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
9926: LD_VAR 0 9
9930: PPUSH
9931: LD_VAR 0 6
9935: PUSH
9936: LD_INT 1
9938: ARRAY
9939: PPUSH
9940: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
9944: LD_VAR 0 6
9948: PUSH
9949: LD_INT 0
9951: EQUAL
9952: PUSH
9953: LD_VAR 0 4
9957: PUSH
9958: LD_INT 0
9960: EQUAL
9961: AND
9962: PUSH
9963: LD_VAR 0 9
9967: PUSH
9968: LD_INT 0
9970: GREATER
9971: AND
9972: IFFALSE 9988
// ComEnterUnit ( engineerOkOutside , building ) ;
9974: LD_VAR 0 9
9978: PPUSH
9979: LD_VAR 0 2
9983: PPUSH
9984: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9988: LD_VAR 0 9
9992: PUSH
9993: LD_INT 0
9995: GREATER
9996: PUSH
9997: LD_VAR 0 6
10001: PUSH
10002: LD_INT 0
10004: EQUAL
10005: AND
10006: PUSH
10007: LD_VAR 0 4
10011: PUSH
10012: LD_INT 0
10014: GREATER
10015: AND
10016: IFFALSE 10063
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10018: LD_VAR 0 9
10022: PPUSH
10023: LD_VAR 0 4
10027: PUSH
10028: LD_INT 1
10030: ARRAY
10031: PPUSH
10032: LD_VAR 0 4
10036: PUSH
10037: LD_INT 2
10039: ARRAY
10040: PPUSH
10041: LD_VAR 0 4
10045: PUSH
10046: LD_INT 3
10048: ARRAY
10049: PPUSH
10050: LD_VAR 0 4
10054: PUSH
10055: LD_INT 4
10057: ARRAY
10058: PPUSH
10059: CALL_OW 145
// end ;
10063: LD_VAR 0 5
10067: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
10074: PPUSH
10075: PPUSH
10076: PPUSH
10077: PPUSH
10078: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) diff [ Kozlov ] ;
10079: LD_ADDR_VAR 0 6
10083: PUSH
10084: LD_INT 22
10086: PUSH
10087: LD_VAR 0 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 25
10098: PUSH
10099: LD_INT 4
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 23
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 24
10118: PUSH
10119: LD_INT 251
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: PUSH
10137: LD_EXP 36
10141: PUSH
10142: EMPTY
10143: LIST
10144: DIFF
10145: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ Kozlov ] ;
10146: LD_ADDR_VAR 0 7
10150: PUSH
10151: LD_VAR 0 3
10155: PPUSH
10156: LD_INT 22
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 23
10170: PUSH
10171: LD_INT 2
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 25
10180: PUSH
10181: LD_INT 4
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 50
10190: PUSH
10191: EMPTY
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 70
10204: PUSH
10205: LD_EXP 36
10209: PUSH
10210: EMPTY
10211: LIST
10212: DIFF
10213: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10214: LD_ADDR_VAR 0 10
10218: PUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: LD_INT 22
10226: PUSH
10227: LD_VAR 0 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 3
10248: PUSH
10249: LD_INT 25
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: LD_INT 24
10268: PUSH
10269: LD_INT 750
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 70
10290: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
10291: LD_ADDR_VAR 0 11
10295: PUSH
10296: LD_VAR 0 2
10300: PPUSH
10301: LD_INT 22
10303: PUSH
10304: LD_VAR 0 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 21
10315: PUSH
10316: LD_INT 1
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 3
10325: PUSH
10326: LD_INT 25
10328: PUSH
10329: LD_INT 3
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: LD_INT 24
10345: PUSH
10346: LD_INT 1000
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PPUSH
10363: CALL_OW 70
10367: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
10368: LD_VAR 0 10
10372: NOT
10373: PUSH
10374: LD_VAR 0 11
10378: NOT
10379: AND
10380: PUSH
10381: LD_VAR 0 6
10385: NOT
10386: AND
10387: IFFALSE 10391
// exit ;
10389: GO 10625
// if damageUnits > 0 and sci_list > 0 then
10391: LD_VAR 0 10
10395: PUSH
10396: LD_INT 0
10398: GREATER
10399: PUSH
10400: LD_VAR 0 6
10404: PUSH
10405: LD_INT 0
10407: GREATER
10408: AND
10409: IFFALSE 10425
// ComMoveToArea ( damageUnits , healArea ) ;
10411: LD_VAR 0 10
10415: PPUSH
10416: LD_VAR 0 2
10420: PPUSH
10421: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
10425: LD_VAR 0 11
10429: PUSH
10430: LD_INT 0
10432: GREATER
10433: PUSH
10434: LD_VAR 0 6
10438: PUSH
10439: LD_INT 0
10441: GREATER
10442: AND
10443: IFFALSE 10454
// ComExitBuilding ( sci_list ) ;
10445: LD_VAR 0 6
10449: PPUSH
10450: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
10454: LD_VAR 0 11
10458: PUSH
10459: LD_INT 0
10461: GREATER
10462: PUSH
10463: LD_VAR 0 7
10467: PUSH
10468: LD_INT 0
10470: GREATER
10471: AND
10472: IFFALSE 10492
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
10474: LD_VAR 0 7
10478: PPUSH
10479: LD_VAR 0 11
10483: PUSH
10484: LD_INT 1
10486: ARRAY
10487: PPUSH
10488: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
10492: LD_VAR 0 10
10496: PUSH
10497: LD_INT 0
10499: EQUAL
10500: PUSH
10501: LD_VAR 0 11
10505: PUSH
10506: LD_INT 0
10508: EQUAL
10509: AND
10510: PUSH
10511: LD_VAR 0 7
10515: PUSH
10516: LD_INT 0
10518: GREATER
10519: AND
10520: IFFALSE 10625
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
10522: LD_ADDR_VAR 0 12
10526: PUSH
10527: LD_INT 22
10529: PUSH
10530: LD_VAR 0 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 3
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 30
10551: PUSH
10552: LD_INT 8
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: PPUSH
10564: CALL_OW 69
10568: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
10569: LD_ADDR_VAR 0 13
10573: PUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 12
10581: PPUSH
10582: CALL_OW 12
10586: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
10587: LD_VAR 0 7
10591: PPUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 60
10597: PUSH
10598: EMPTY
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 72
10609: PPUSH
10610: LD_VAR 0 12
10614: PUSH
10615: LD_VAR 0 13
10619: ARRAY
10620: PPUSH
10621: CALL_OW 120
// end ; end ;
10625: LD_VAR 0 5
10629: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
10630: LD_INT 0
10632: PPUSH
10633: PPUSH
10634: PPUSH
10635: PPUSH
// tmpTab = [ ] ;
10636: LD_ADDR_VAR 0 6
10640: PUSH
10641: EMPTY
10642: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
10643: LD_INT 22
10645: PUSH
10646: LD_VAR 0 1
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 30
10657: PUSH
10658: LD_INT 32
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: PUSH
10674: LD_INT 0
10676: GREATER
10677: IFFALSE 10760
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10679: LD_ADDR_VAR 0 4
10683: PUSH
10684: LD_INT 22
10686: PUSH
10687: LD_VAR 0 1
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 30
10698: PUSH
10699: LD_INT 32
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 69
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10758
// begin for j in UnitsInside ( i ) do
10718: LD_ADDR_VAR 0 5
10722: PUSH
10723: LD_VAR 0 4
10727: PPUSH
10728: CALL_OW 313
10732: PUSH
10733: FOR_IN
10734: IFFALSE 10754
// tmpTab = tmpTab ^ j ;
10736: LD_ADDR_VAR 0 6
10740: PUSH
10741: LD_VAR 0 6
10745: PUSH
10746: LD_VAR 0 5
10750: ADD
10751: ST_TO_ADDR
10752: GO 10733
10754: POP
10755: POP
// end ;
10756: GO 10715
10758: POP
10759: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
10760: LD_VAR 0 6
10764: PPUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: CALL_OW 250
10774: PPUSH
10775: LD_VAR 0 2
10779: PPUSH
10780: CALL_OW 251
10784: PPUSH
10785: CALL_OW 114
// end ;
10789: LD_VAR 0 3
10793: RET
// export function CraneRepairBuild ( side , baseArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10794: LD_INT 0
10796: PPUSH
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10802: LD_ADDR_VAR 0 8
10806: PUSH
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 22
10814: PUSH
10815: LD_VAR 0 1
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 21
10826: PUSH
10827: LD_INT 2
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 34
10836: PUSH
10837: LD_INT 52
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 70
10853: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10854: LD_ADDR_VAR 0 9
10858: PUSH
10859: LD_VAR 0 2
10863: PPUSH
10864: LD_INT 22
10866: PUSH
10867: LD_VAR 0 1
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 21
10878: PUSH
10879: LD_INT 3
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: LD_INT 24
10891: PUSH
10892: LD_INT 1000
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: PPUSH
10911: CALL_OW 70
10915: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10916: LD_VAR 0 9
10920: PUSH
10921: LD_INT 0
10923: GREATER
10924: PUSH
10925: LD_VAR 0 8
10929: PPUSH
10930: LD_INT 24
10932: PUSH
10933: LD_INT 750
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PPUSH
10940: CALL_OW 72
10944: PUSH
10945: LD_INT 0
10947: GREATER
10948: AND
10949: IFFALSE 10969
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
10951: LD_VAR 0 8
10955: PPUSH
10956: LD_VAR 0 9
10960: PUSH
10961: LD_INT 1
10963: ARRAY
10964: PPUSH
10965: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10969: LD_VAR 0 8
10973: PUSH
10974: LD_INT 0
10976: GREATER
10977: PUSH
10978: LD_VAR 0 9
10982: PUSH
10983: LD_INT 0
10985: EQUAL
10986: AND
10987: PUSH
10988: LD_VAR 0 3
10992: PUSH
10993: LD_INT 0
10995: GREATER
10996: AND
10997: IFFALSE 11044
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10999: LD_VAR 0 8
11003: PPUSH
11004: LD_VAR 0 3
11008: PUSH
11009: LD_INT 1
11011: ARRAY
11012: PPUSH
11013: LD_VAR 0 3
11017: PUSH
11018: LD_INT 2
11020: ARRAY
11021: PPUSH
11022: LD_VAR 0 3
11026: PUSH
11027: LD_INT 3
11029: ARRAY
11030: PPUSH
11031: LD_VAR 0 3
11035: PUSH
11036: LD_INT 4
11038: ARRAY
11039: PPUSH
11040: CALL_OW 567
// end ;
11044: LD_VAR 0 4
11048: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Platonov , Yakotich ] ;
11059: LD_ADDR_VAR 0 6
11063: PUSH
11064: LD_VAR 0 2
11068: PPUSH
11069: LD_INT 22
11071: PUSH
11072: LD_VAR 0 1
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 56
11083: PUSH
11084: EMPTY
11085: LIST
11086: PUSH
11087: LD_INT 24
11089: PUSH
11090: LD_INT 700
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 3
11099: PUSH
11100: LD_INT 60
11102: PUSH
11103: EMPTY
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: LD_INT 25
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 25
11125: PUSH
11126: LD_INT 5
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 25
11135: PUSH
11136: LD_INT 8
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 25
11145: PUSH
11146: LD_INT 9
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 70
11171: PUSH
11172: LD_EXP 26
11176: PUSH
11177: LD_EXP 27
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: DIFF
11186: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11187: LD_ADDR_VAR 0 7
11191: PUSH
11192: LD_VAR 0 2
11196: PPUSH
11197: LD_INT 22
11199: PUSH
11200: LD_VAR 0 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 30
11211: PUSH
11212: LD_INT 32
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 58
11221: PUSH
11222: EMPTY
11223: LIST
11224: PUSH
11225: LD_INT 24
11227: PUSH
11228: LD_INT 251
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PPUSH
11241: CALL_OW 70
11245: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11246: LD_ADDR_VAR 0 9
11250: PUSH
11251: LD_VAR 0 2
11255: PPUSH
11256: LD_INT 22
11258: PUSH
11259: LD_VAR 0 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: LD_INT 30
11273: PUSH
11274: LD_INT 4
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 30
11283: PUSH
11284: LD_INT 5
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 24
11298: PUSH
11299: LD_INT 251
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 70
11315: ST_TO_ADDR
// if barrackList > 0 then
11316: LD_VAR 0 9
11320: PUSH
11321: LD_INT 0
11323: GREATER
11324: IFFALSE 11472
// begin if turretList = 0 then
11326: LD_VAR 0 7
11330: PUSH
11331: LD_INT 0
11333: EQUAL
11334: IFFALSE 11376
// begin if soldiers_list > 0 then
11336: LD_VAR 0 6
11340: PUSH
11341: LD_INT 0
11343: GREATER
11344: IFFALSE 11374
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11346: LD_VAR 0 6
11350: PPUSH
11351: LD_VAR 0 9
11355: PUSH
11356: LD_INT 1
11358: PPUSH
11359: LD_VAR 0 9
11363: PPUSH
11364: CALL_OW 12
11368: ARRAY
11369: PPUSH
11370: CALL_OW 120
// end else
11374: GO 11472
// begin for i in barrackList do
11376: LD_ADDR_VAR 0 4
11380: PUSH
11381: LD_VAR 0 9
11385: PUSH
11386: FOR_IN
11387: IFFALSE 11470
// begin insideUnits = UnitsInside ( i ) ;
11389: LD_ADDR_VAR 0 10
11393: PUSH
11394: LD_VAR 0 4
11398: PPUSH
11399: CALL_OW 313
11403: ST_TO_ADDR
// if insideUnits > 0 then
11404: LD_VAR 0 10
11408: PUSH
11409: LD_INT 0
11411: GREATER
11412: IFFALSE 11436
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11414: LD_VAR 0 10
11418: PUSH
11419: LD_INT 1
11421: ARRAY
11422: PPUSH
11423: LD_VAR 0 7
11427: PUSH
11428: LD_INT 1
11430: ARRAY
11431: PPUSH
11432: CALL_OW 120
// if soldiers_list > 0 then
11436: LD_VAR 0 6
11440: PUSH
11441: LD_INT 0
11443: GREATER
11444: IFFALSE 11468
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11446: LD_VAR 0 6
11450: PUSH
11451: LD_INT 1
11453: ARRAY
11454: PPUSH
11455: LD_VAR 0 7
11459: PUSH
11460: LD_INT 1
11462: ARRAY
11463: PPUSH
11464: CALL_OW 120
// end ;
11468: GO 11386
11470: POP
11471: POP
// end ; end ; end ;
11472: LD_VAR 0 3
11476: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
11477: LD_INT 0
11479: PPUSH
11480: PPUSH
11481: PPUSH
11482: PPUSH
11483: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
11484: LD_ADDR_VAR 0 6
11488: PUSH
11489: LD_INT 22
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 2
11503: PUSH
11504: LD_INT 30
11506: PUSH
11507: LD_INT 31
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 30
11516: PUSH
11517: LD_INT 32
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 30
11526: PUSH
11527: LD_INT 33
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 30
11536: PUSH
11537: LD_INT 4
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 30
11546: PUSH
11547: LD_INT 5
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
11571: LD_ADDR_VAR 0 7
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_VAR 0 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 58
11600: PUSH
11601: EMPTY
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: PPUSH
11609: CALL_OW 69
11613: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 0
11621: GREATER
11622: PUSH
11623: LD_VAR 0 7
11627: PUSH
11628: LD_INT 0
11630: GREATER
11631: AND
11632: IFFALSE 11702
// begin for i in turretsList do
11634: LD_ADDR_VAR 0 4
11638: PUSH
11639: LD_VAR 0 6
11643: PUSH
11644: FOR_IN
11645: IFFALSE 11700
// begin for j in enemyBuildings do
11647: LD_ADDR_VAR 0 5
11651: PUSH
11652: LD_VAR 0 7
11656: PUSH
11657: FOR_IN
11658: IFFALSE 11696
// begin if GetDistUnits ( i , j ) < 20 then
11660: LD_VAR 0 4
11664: PPUSH
11665: LD_VAR 0 5
11669: PPUSH
11670: CALL_OW 296
11674: PUSH
11675: LD_INT 20
11677: LESS
11678: IFFALSE 11694
// begin ComAttackUnit ( i , j ) ;
11680: LD_VAR 0 4
11684: PPUSH
11685: LD_VAR 0 5
11689: PPUSH
11690: CALL_OW 115
// end ; end ;
11694: GO 11657
11696: POP
11697: POP
// end ;
11698: GO 11644
11700: POP
11701: POP
// end ; end ;
11702: LD_VAR 0 3
11706: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
11707: LD_INT 0
11709: PPUSH
11710: PPUSH
// for i = 1 to vehCount do
11711: LD_ADDR_VAR 0 9
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 3
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11774
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
11729: LD_VAR 0 2
11733: PPUSH
11734: LD_VAR 0 7
11738: PPUSH
11739: LD_VAR 0 5
11743: PPUSH
11744: LD_VAR 0 6
11748: PPUSH
11749: LD_VAR 0 4
11753: PUSH
11754: LD_INT 1
11756: PPUSH
11757: LD_VAR 0 4
11761: PPUSH
11762: CALL_OW 12
11766: ARRAY
11767: PPUSH
11768: CALL_OW 185
11772: GO 11726
11774: POP
11775: POP
// end ;
11776: LD_VAR 0 8
11780: RET
// export function AttackVehicles ( enemySide , oponent ) ; var i , j , vehiclesOK , target1 , target2 ; begin
11781: LD_INT 0
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
// if oponent = 1 then
11789: LD_VAR 0 2
11793: PUSH
11794: LD_INT 1
11796: EQUAL
11797: IFFALSE 11987
// begin repeat wait ( 0 0$1 ) ;
11799: LD_INT 35
11801: PPUSH
11802: CALL_OW 67
// for j in legionVehicles do
11806: LD_ADDR_VAR 0 5
11810: PUSH
11811: LD_EXP 55
11815: PUSH
11816: FOR_IN
11817: IFFALSE 11975
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
11819: LD_ADDR_VAR 0 7
11823: PUSH
11824: LD_INT 22
11826: PUSH
11827: LD_VAR 0 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 69
11840: PPUSH
11841: LD_VAR 0 5
11845: PPUSH
11846: CALL_OW 74
11850: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
11851: LD_ADDR_VAR 0 8
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_VAR 0 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 30
11870: PUSH
11871: LD_INT 32
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 59
11880: PUSH
11881: EMPTY
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: PPUSH
11892: CALL_OW 69
11896: PPUSH
11897: LD_VAR 0 5
11901: PPUSH
11902: CALL_OW 74
11906: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11907: LD_VAR 0 5
11911: PPUSH
11912: LD_VAR 0 7
11916: PPUSH
11917: CALL_OW 296
11921: PUSH
11922: LD_INT 8
11924: PLUS
11925: PUSH
11926: LD_VAR 0 5
11930: PPUSH
11931: LD_VAR 0 8
11935: PPUSH
11936: CALL_OW 296
11940: LESS
11941: IFFALSE 11959
// ComAttackUnit ( j , target1 ) else
11943: LD_VAR 0 5
11947: PPUSH
11948: LD_VAR 0 7
11952: PPUSH
11953: CALL_OW 115
11957: GO 11973
// ComAttackUnit ( j , target2 ) ;
11959: LD_VAR 0 5
11963: PPUSH
11964: LD_VAR 0 8
11968: PPUSH
11969: CALL_OW 115
// end ;
11973: GO 11816
11975: POP
11976: POP
// until legionVehicles = 0 ;
11977: LD_EXP 55
11981: PUSH
11982: LD_INT 0
11984: EQUAL
11985: IFFALSE 11799
// end ; if oponent = 2 then
11987: LD_VAR 0 2
11991: PUSH
11992: LD_INT 2
11994: EQUAL
11995: IFFALSE 12185
// begin repeat wait ( 0 0$1 ) ;
11997: LD_INT 35
11999: PPUSH
12000: CALL_OW 67
// for j in russianVehicles do
12004: LD_ADDR_VAR 0 5
12008: PUSH
12009: LD_EXP 61
12013: PUSH
12014: FOR_IN
12015: IFFALSE 12173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12017: LD_ADDR_VAR 0 7
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_VAR 0 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 69
12038: PPUSH
12039: LD_VAR 0 5
12043: PPUSH
12044: CALL_OW 74
12048: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12049: LD_ADDR_VAR 0 8
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_VAR 0 1
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 32
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 59
12078: PUSH
12079: EMPTY
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: PPUSH
12090: CALL_OW 69
12094: PPUSH
12095: LD_VAR 0 5
12099: PPUSH
12100: CALL_OW 74
12104: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12105: LD_VAR 0 5
12109: PPUSH
12110: LD_VAR 0 7
12114: PPUSH
12115: CALL_OW 296
12119: PUSH
12120: LD_INT 8
12122: PLUS
12123: PUSH
12124: LD_VAR 0 5
12128: PPUSH
12129: LD_VAR 0 8
12133: PPUSH
12134: CALL_OW 296
12138: LESS
12139: IFFALSE 12157
// ComAttackUnit ( j , target1 ) else
12141: LD_VAR 0 5
12145: PPUSH
12146: LD_VAR 0 7
12150: PPUSH
12151: CALL_OW 115
12155: GO 12171
// ComAttackUnit ( j , target2 ) ;
12157: LD_VAR 0 5
12161: PPUSH
12162: LD_VAR 0 8
12166: PPUSH
12167: CALL_OW 115
// end ;
12171: GO 12014
12173: POP
12174: POP
// until russianVehicles = 0 ;
12175: LD_EXP 61
12179: PUSH
12180: LD_INT 0
12182: EQUAL
12183: IFFALSE 11997
// end ; if oponent = 3 then
12185: LD_VAR 0 2
12189: PUSH
12190: LD_INT 3
12192: EQUAL
12193: IFFALSE 12383
// begin repeat wait ( 0 0$1 ) ;
12195: LD_INT 35
12197: PPUSH
12198: CALL_OW 67
// for j in allianceVehicles do
12202: LD_ADDR_VAR 0 5
12206: PUSH
12207: LD_EXP 62
12211: PUSH
12212: FOR_IN
12213: IFFALSE 12371
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , enemySide ] ) , j ) ;
12215: LD_ADDR_VAR 0 7
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_VAR 0 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: PPUSH
12237: LD_VAR 0 5
12241: PPUSH
12242: CALL_OW 74
12246: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , enemySide ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , j ) ;
12247: LD_ADDR_VAR 0 8
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_VAR 0 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 32
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 59
12276: PUSH
12277: EMPTY
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: PPUSH
12293: LD_VAR 0 5
12297: PPUSH
12298: CALL_OW 74
12302: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12303: LD_VAR 0 5
12307: PPUSH
12308: LD_VAR 0 7
12312: PPUSH
12313: CALL_OW 296
12317: PUSH
12318: LD_INT 8
12320: PLUS
12321: PUSH
12322: LD_VAR 0 5
12326: PPUSH
12327: LD_VAR 0 8
12331: PPUSH
12332: CALL_OW 296
12336: LESS
12337: IFFALSE 12355
// ComAttackUnit ( j , target1 ) else
12339: LD_VAR 0 5
12343: PPUSH
12344: LD_VAR 0 7
12348: PPUSH
12349: CALL_OW 115
12353: GO 12369
// ComAttackUnit ( j , target2 ) ;
12355: LD_VAR 0 5
12359: PPUSH
12360: LD_VAR 0 8
12364: PPUSH
12365: CALL_OW 115
// end ;
12369: GO 12212
12371: POP
12372: POP
// until allianceVehicles = 0 ;
12373: LD_EXP 62
12377: PUSH
12378: LD_INT 0
12380: EQUAL
12381: IFFALSE 12195
// end ; end ;
12383: LD_VAR 0 3
12387: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
12388: LD_INT 0
12390: PPUSH
12391: PPUSH
12392: PPUSH
12393: PPUSH
12394: PPUSH
12395: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12396: LD_ADDR_VAR 0 6
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_VAR 0 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 25
12415: PUSH
12416: LD_INT 9
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 69
12431: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12432: LD_ADDR_VAR 0 7
12436: PUSH
12437: LD_INT 81
12439: PUSH
12440: LD_VAR 0 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: LD_INT 21
12454: PUSH
12455: LD_INT 3
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12475: LD_ADDR_VAR 0 4
12479: PUSH
12480: LD_INT 1
12482: PPUSH
12483: LD_INT 3
12485: PPUSH
12486: CALL_OW 12
12490: ST_TO_ADDR
// for i = 1 to list do
12491: LD_ADDR_VAR 0 5
12495: PUSH
12496: DOUBLE
12497: LD_INT 1
12499: DEC
12500: ST_TO_ADDR
12501: LD_VAR 0 6
12505: PUSH
12506: FOR_TO
12507: IFFALSE 12709
// for ta in filter do
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_VAR 0 7
12518: PUSH
12519: FOR_IN
12520: IFFALSE 12705
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
12522: LD_VAR 0 6
12526: PUSH
12527: LD_VAR 0 5
12531: ARRAY
12532: PPUSH
12533: LD_VAR 0 3
12537: PPUSH
12538: CALL_OW 296
12542: PUSH
12543: LD_INT 15
12545: LESSEQUAL
12546: IFFALSE 12703
// begin case c of 1 :
12548: LD_VAR 0 4
12552: PUSH
12553: LD_INT 1
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12599
12561: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
12562: LD_VAR 0 6
12566: PUSH
12567: LD_VAR 0 5
12571: ARRAY
12572: PPUSH
12573: LD_VAR 0 3
12577: PPUSH
12578: CALL_OW 250
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: CALL_OW 251
12592: PPUSH
12593: CALL_OW 154
12597: GO 12703
12599: LD_INT 2
12601: DOUBLE
12602: EQUAL
12603: IFTRUE 12607
12605: GO 12671
12607: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
12608: LD_VAR 0 6
12612: PUSH
12613: LD_VAR 0 5
12617: ARRAY
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: CALL_OW 250
12628: PUSH
12629: LD_INT 1
12631: NEG
12632: PPUSH
12633: LD_INT 1
12635: PPUSH
12636: CALL_OW 12
12640: PLUS
12641: PPUSH
12642: LD_VAR 0 3
12646: PPUSH
12647: CALL_OW 251
12651: PUSH
12652: LD_INT 1
12654: NEG
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 12
12663: PLUS
12664: PPUSH
12665: CALL_OW 153
12669: GO 12703
12671: LD_INT 3
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12702
12679: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
12680: LD_VAR 0 6
12684: PUSH
12685: LD_VAR 0 5
12689: ARRAY
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: CALL_OW 115
12700: GO 12703
12702: POP
// end ; end ;
12703: GO 12519
12705: POP
12706: POP
12707: GO 12506
12709: POP
12710: POP
// end ;
12711: LD_VAR 0 2
12715: RET
// export function TimeLapsersAI ( side , enemy ) ; var j , nearUnit , vehs ; begin
12716: LD_INT 0
12718: PPUSH
12719: PPUSH
12720: PPUSH
12721: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 then
12722: LD_INT 22
12724: PUSH
12725: LD_VAR 0 1
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 21
12736: PUSH
12737: LD_INT 2
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 34
12746: PUSH
12747: LD_INT 49
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 69
12763: PUSH
12764: LD_INT 0
12766: EQUAL
12767: IFFALSE 12771
// exit ;
12769: GO 13026
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) > 0 then
12771: LD_INT 22
12773: PUSH
12774: LD_VAR 0 1
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 21
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 34
12795: PUSH
12796: LD_INT 49
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: PUSH
12813: LD_INT 0
12815: GREATER
12816: IFFALSE 13026
// repeat vehs = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) ;
12818: LD_ADDR_VAR 0 6
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_VAR 0 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 21
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 34
12847: PUSH
12848: LD_INT 49
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12865: LD_INT 105
12867: PPUSH
12868: CALL_OW 67
// for j in UnitFilter ( vehs , [ f_not , [ f_hastask ] ] ) do
12872: LD_ADDR_VAR 0 4
12876: PUSH
12877: LD_VAR 0 6
12881: PPUSH
12882: LD_INT 3
12884: PUSH
12885: LD_INT 60
12887: PUSH
12888: EMPTY
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 72
12899: PUSH
12900: FOR_IN
12901: IFFALSE 13014
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , enemy ] , [ f_or , [ f_type , unit_human ] , [ f_not , [ f_empty ] ] ] ] ) , j ) ;
12903: LD_ADDR_VAR 0 5
12907: PUSH
12908: LD_INT 81
12910: PUSH
12911: LD_VAR 0 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 101
12922: PUSH
12923: LD_VAR 0 2
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: LD_INT 21
12937: PUSH
12938: LD_INT 1
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: LD_INT 58
12950: PUSH
12951: EMPTY
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: PPUSH
12968: CALL_OW 69
12972: PPUSH
12973: LD_VAR 0 4
12977: PPUSH
12978: CALL_OW 74
12982: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
12983: LD_VAR 0 4
12987: PPUSH
12988: LD_VAR 0 5
12992: PPUSH
12993: CALL_OW 250
12997: PPUSH
12998: LD_VAR 0 5
13002: PPUSH
13003: CALL_OW 251
13007: PPUSH
13008: CALL_OW 111
// end ;
13012: GO 12900
13014: POP
13015: POP
// until vehs = 0 ;
13016: LD_VAR 0 6
13020: PUSH
13021: LD_INT 0
13023: EQUAL
13024: IFFALSE 12818
// end ;
13026: LD_VAR 0 3
13030: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
13039: LD_VAR 0 1
13043: NOT
13044: PUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 263
13054: PUSH
13055: LD_INT 2
13057: EQUAL
13058: NOT
13059: OR
13060: IFFALSE 13064
// exit ;
13062: GO 13380
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_INT 22
13071: PUSH
13072: LD_VAR 0 1
13076: PPUSH
13077: CALL_OW 255
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: LD_INT 30
13091: PUSH
13092: LD_INT 36
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 34
13101: PUSH
13102: LD_INT 31
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: ST_TO_ADDR
// if not tmp then
13123: LD_VAR 0 6
13127: NOT
13128: IFFALSE 13132
// exit ;
13130: GO 13380
// result := [ ] ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: EMPTY
13138: ST_TO_ADDR
// for i in tmp do
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: LD_VAR 0 6
13148: PUSH
13149: FOR_IN
13150: IFFALSE 13221
// begin t := UnitsInside ( i ) ;
13152: LD_ADDR_VAR 0 4
13156: PUSH
13157: LD_VAR 0 3
13161: PPUSH
13162: CALL_OW 313
13166: ST_TO_ADDR
// if t then
13167: LD_VAR 0 4
13171: IFFALSE 13219
// for j in t do
13173: LD_ADDR_VAR 0 7
13177: PUSH
13178: LD_VAR 0 4
13182: PUSH
13183: FOR_IN
13184: IFFALSE 13217
// result := Insert ( result , result + 1 , j ) ;
13186: LD_ADDR_VAR 0 2
13190: PUSH
13191: LD_VAR 0 2
13195: PPUSH
13196: LD_VAR 0 2
13200: PUSH
13201: LD_INT 1
13203: PLUS
13204: PPUSH
13205: LD_VAR 0 7
13209: PPUSH
13210: CALL_OW 2
13214: ST_TO_ADDR
13215: GO 13183
13217: POP
13218: POP
// end ;
13219: GO 13149
13221: POP
13222: POP
// if not result then
13223: LD_VAR 0 2
13227: NOT
13228: IFFALSE 13232
// exit ;
13230: GO 13380
// mech := result [ 1 ] ;
13232: LD_ADDR_VAR 0 5
13236: PUSH
13237: LD_VAR 0 2
13241: PUSH
13242: LD_INT 1
13244: ARRAY
13245: ST_TO_ADDR
// if result > 1 then
13246: LD_VAR 0 2
13250: PUSH
13251: LD_INT 1
13253: GREATER
13254: IFFALSE 13366
// for i = 2 to result do
13256: LD_ADDR_VAR 0 3
13260: PUSH
13261: DOUBLE
13262: LD_INT 2
13264: DEC
13265: ST_TO_ADDR
13266: LD_VAR 0 2
13270: PUSH
13271: FOR_TO
13272: IFFALSE 13364
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13274: LD_ADDR_VAR 0 4
13278: PUSH
13279: LD_VAR 0 2
13283: PUSH
13284: LD_VAR 0 3
13288: ARRAY
13289: PPUSH
13290: LD_INT 3
13292: PPUSH
13293: CALL_OW 259
13297: PUSH
13298: LD_VAR 0 2
13302: PUSH
13303: LD_VAR 0 3
13307: ARRAY
13308: PPUSH
13309: CALL_OW 432
13313: MINUS
13314: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13315: LD_VAR 0 4
13319: PUSH
13320: LD_VAR 0 5
13324: PPUSH
13325: LD_INT 3
13327: PPUSH
13328: CALL_OW 259
13332: PUSH
13333: LD_VAR 0 5
13337: PPUSH
13338: CALL_OW 432
13342: MINUS
13343: GREATEREQUAL
13344: IFFALSE 13362
// mech := result [ i ] ;
13346: LD_ADDR_VAR 0 5
13350: PUSH
13351: LD_VAR 0 2
13355: PUSH
13356: LD_VAR 0 3
13360: ARRAY
13361: ST_TO_ADDR
// end ;
13362: GO 13271
13364: POP
13365: POP
// ComLinkTo ( vehicle , mech ) ;
13366: LD_VAR 0 1
13370: PPUSH
13371: LD_VAR 0 5
13375: PPUSH
13376: CALL_OW 135
// end ; end_of_file
13380: LD_VAR 0 2
13384: RET
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 1
13392: EQUAL
13393: PUSH
13394: LD_VAR 0 2
13398: PUSH
13399: LD_INT 4
13401: EQUAL
13402: AND
13403: IFFALSE 13412
// YouLost ( text ) ;
13405: LD_STRING text
13407: PPUSH
13408: CALL_OW 104
// end ;
13412: PPOPN 2
13414: END
// on EnterVehicle ( vehicle , human ) do begin if vehicle = powellCargo and GetSide ( human ) = 4 then
13415: LD_VAR 0 1
13419: PUSH
13420: LD_INT 235
13422: EQUAL
13423: PUSH
13424: LD_VAR 0 2
13428: PPUSH
13429: CALL_OW 255
13433: PUSH
13434: LD_INT 4
13436: EQUAL
13437: AND
13438: IFFALSE 13514
// begin ComTransport ( PowellCargo , PowellDepot , 1 ) ;
13440: LD_INT 235
13442: PPUSH
13443: LD_INT 84
13445: PPUSH
13446: LD_INT 1
13448: PPUSH
13449: CALL_OW 151
// AddComMoveXY ( PowellCargo , 68 , 100 ) ;
13453: LD_INT 235
13455: PPUSH
13456: LD_INT 68
13458: PPUSH
13459: LD_INT 100
13461: PPUSH
13462: CALL_OW 171
// AddComUnload ( PowellCargo ) ;
13466: LD_INT 235
13468: PPUSH
13469: CALL_OW 219
// AddComMoveXY ( PowellCargo , 48 , 69 ) ;
13473: LD_INT 235
13475: PPUSH
13476: LD_INT 48
13478: PPUSH
13479: LD_INT 69
13481: PPUSH
13482: CALL_OW 171
// AddComMoveXY ( PowellCargo , 39 , 61 ) ;
13486: LD_INT 235
13488: PPUSH
13489: LD_INT 39
13491: PPUSH
13492: LD_INT 61
13494: PPUSH
13495: CALL_OW 171
// wait ( 0 0$10 ) ;
13499: LD_INT 350
13501: PPUSH
13502: CALL_OW 67
// powellUnloadCargo = 1 ;
13506: LD_ADDR_EXP 70
13510: PUSH
13511: LD_INT 1
13513: ST_TO_ADDR
// end ; end ;
13514: PPOPN 2
13516: END
// on UpgradeComplete ( building ) do var i , powellPeople ;
13517: LD_INT 0
13519: PPUSH
13520: PPUSH
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 21
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 56
13548: PUSH
13549: EMPTY
13550: LIST
13551: PUSH
13552: LD_INT 3
13554: PUSH
13555: LD_INT 60
13557: PUSH
13558: EMPTY
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 69
13575: PUSH
13576: LD_EXP 17
13580: PUSH
13581: EMPTY
13582: LIST
13583: DIFF
13584: ST_TO_ADDR
// if GetSide ( building ) = 4 then
13585: LD_VAR 0 1
13589: PPUSH
13590: CALL_OW 255
13594: PUSH
13595: LD_INT 4
13597: EQUAL
13598: IFFALSE 13729
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_lab_full ] ] ) = 1 then
13600: LD_INT 22
13602: PUSH
13603: LD_INT 4
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 30
13612: PUSH
13613: LD_INT 8
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL_OW 69
13628: PUSH
13629: LD_INT 1
13631: EQUAL
13632: IFFALSE 13729
// begin for i = 1 to 3 do
13634: LD_ADDR_VAR 0 2
13638: PUSH
13639: DOUBLE
13640: LD_INT 1
13642: DEC
13643: ST_TO_ADDR
13644: LD_INT 3
13646: PUSH
13647: FOR_TO
13648: IFFALSE 13712
// begin AddComEnterUnit ( UnitFilter ( powellPeople [ i ] , [ f_not , [ f_class , 2 ] ] ) , building ) ;
13650: LD_VAR 0 3
13654: PUSH
13655: LD_VAR 0 2
13659: ARRAY
13660: PPUSH
13661: LD_INT 3
13663: PUSH
13664: LD_INT 25
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 72
13682: PPUSH
13683: LD_VAR 0 1
13687: PPUSH
13688: CALL_OW 180
// AddComChangeProfession ( powellPeople [ i ] , 4 ) ;
13692: LD_VAR 0 3
13696: PUSH
13697: LD_VAR 0 2
13701: ARRAY
13702: PPUSH
13703: LD_INT 4
13705: PPUSH
13706: CALL_OW 183
// end ;
13710: GO 13647
13712: POP
13713: POP
// ResAllTechs ( 4 , building , 1 ) ;
13714: LD_INT 4
13716: PPUSH
13717: LD_VAR 0 1
13721: PPUSH
13722: LD_INT 1
13724: PPUSH
13725: CALL 9574 0 3
// end ; if GetSide ( building ) = 8 then
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 255
13738: PUSH
13739: LD_INT 8
13741: EQUAL
13742: IFFALSE 13927
// begin if GetNation ( building ) = 3 then
13744: LD_VAR 0 1
13748: PPUSH
13749: CALL_OW 248
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13927
// begin AddComMoveXY ( Kozlov , 73 , 16 ) ;
13759: LD_EXP 36
13763: PPUSH
13764: LD_INT 73
13766: PPUSH
13767: LD_INT 16
13769: PPUSH
13770: CALL_OW 171
// AddComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
13774: LD_EXP 36
13778: PPUSH
13779: LD_INT 21
13781: PPUSH
13782: LD_INT 74
13784: PPUSH
13785: LD_INT 12
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 205
// wait ( 0 0$2 ) ;
13795: LD_INT 70
13797: PPUSH
13798: CALL_OW 67
// AddComEnterUnit ( Kozlov , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] ) ;
13802: LD_EXP 36
13806: PPUSH
13807: LD_INT 22
13809: PUSH
13810: LD_INT 8
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 30
13819: PUSH
13820: LD_INT 3
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 23
13829: PUSH
13830: LD_INT 3
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: PUSH
13847: LD_INT 1
13849: ARRAY
13850: PPUSH
13851: CALL_OW 180
// AddComChangeProfession ( Kozlov , 3 ) ;
13855: LD_EXP 36
13859: PPUSH
13860: LD_INT 3
13862: PPUSH
13863: CALL_OW 183
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] , [ f_nation , 3 ] ] ) [ 1 ] , ru_heavy_tracked , 3 , 3 , ru_siberium_rocket ) ;
13867: LD_INT 22
13869: PUSH
13870: LD_INT 8
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 3
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 23
13889: PUSH
13890: LD_INT 3
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 69
13906: PUSH
13907: LD_INT 1
13909: ARRAY
13910: PPUSH
13911: LD_INT 24
13913: PPUSH
13914: LD_INT 3
13916: PPUSH
13917: LD_INT 3
13919: PPUSH
13920: LD_INT 48
13922: PPUSH
13923: CALL_OW 185
// end ; end ; end ;
13927: PPOPN 3
13929: END
// on BuildingComplete ( building ) do var powellPeople ;
13930: LD_INT 0
13932: PPUSH
// begin if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_gun then
13933: LD_VAR 0 1
13937: PPUSH
13938: CALL_OW 255
13942: PUSH
13943: LD_INT 4
13945: EQUAL
13946: PUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 266
13956: PUSH
13957: LD_INT 17
13959: EQUAL
13960: AND
13961: IFFALSE 14243
// begin powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
13963: LD_ADDR_VAR 0 2
13967: PUSH
13968: LD_INT 22
13970: PUSH
13971: LD_INT 4
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 21
13980: PUSH
13981: LD_INT 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 56
13990: PUSH
13991: EMPTY
13992: LIST
13993: PUSH
13994: LD_INT 3
13996: PUSH
13997: LD_INT 60
13999: PUSH
14000: EMPTY
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 69
14017: PUSH
14018: LD_EXP 17
14022: PUSH
14023: EMPTY
14024: LIST
14025: DIFF
14026: ST_TO_ADDR
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] , us_heavy_gun ) ;
14027: LD_INT 22
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 21
14039: PUSH
14040: LD_INT 3
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 30
14049: PUSH
14050: LD_INT 32
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: PPUSH
14062: CALL_OW 69
14066: PUSH
14067: LD_INT 1
14069: ARRAY
14070: PPUSH
14071: LD_INT 6
14073: PPUSH
14074: CALL_OW 431
// PlaceWeaponTurret ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] , us_double_gun ) ;
14078: LD_INT 22
14080: PUSH
14081: LD_INT 4
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 3
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 30
14100: PUSH
14101: LD_INT 32
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 69
14117: PUSH
14118: LD_INT 2
14120: ARRAY
14121: PPUSH
14122: LD_INT 5
14124: PPUSH
14125: CALL_OW 431
// ComEnterUnit ( powellPeople [ 1 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
14129: LD_VAR 0 2
14133: PUSH
14134: LD_INT 1
14136: ARRAY
14137: PPUSH
14138: LD_INT 22
14140: PUSH
14141: LD_INT 4
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 21
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 30
14160: PUSH
14161: LD_INT 32
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: PUSH
14178: LD_INT 1
14180: ARRAY
14181: PPUSH
14182: CALL_OW 120
// ComEnterUnit ( powellPeople [ 2 ] , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 2 ] ) ;
14186: LD_VAR 0 2
14190: PUSH
14191: LD_INT 2
14193: ARRAY
14194: PPUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 30
14217: PUSH
14218: LD_INT 32
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PUSH
14235: LD_INT 2
14237: ARRAY
14238: PPUSH
14239: CALL_OW 120
// end ; if GetSide ( building ) = 4 and GetBType ( building ) = b_ext_siberium then
14243: LD_VAR 0 1
14247: PPUSH
14248: CALL_OW 255
14252: PUSH
14253: LD_INT 4
14255: EQUAL
14256: PUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 266
14266: PUSH
14267: LD_INT 21
14269: EQUAL
14270: AND
14271: IFFALSE 14418
// begin AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14273: LD_INT 85
14275: PPUSH
14276: LD_INT 3
14278: PPUSH
14279: LD_INT 3
14281: PPUSH
14282: LD_INT 1
14284: PPUSH
14285: LD_INT 3
14287: PUSH
14288: LD_INT 5
14290: PUSH
14291: LD_INT 7
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 1
14301: PPUSH
14302: LD_INT 3
14304: PPUSH
14305: CALL_OW 12
14309: ARRAY
14310: PPUSH
14311: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14315: LD_INT 85
14317: PPUSH
14318: LD_INT 3
14320: PPUSH
14321: LD_INT 3
14323: PPUSH
14324: LD_INT 1
14326: PPUSH
14327: LD_INT 3
14329: PUSH
14330: LD_INT 5
14332: PUSH
14333: LD_INT 7
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 1
14343: PPUSH
14344: LD_INT 3
14346: PPUSH
14347: CALL_OW 12
14351: ARRAY
14352: PPUSH
14353: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 3 , 5 , 7 ] [ Rand ( 1 , 3 ) ] ) ;
14357: LD_INT 85
14359: PPUSH
14360: LD_INT 3
14362: PPUSH
14363: LD_INT 3
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: LD_INT 3
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: LD_INT 7
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 1
14385: PPUSH
14386: LD_INT 3
14388: PPUSH
14389: CALL_OW 12
14393: ARRAY
14394: PPUSH
14395: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
14399: LD_INT 85
14401: PPUSH
14402: LD_INT 5
14404: PPUSH
14405: LD_INT 3
14407: PPUSH
14408: LD_INT 1
14410: PPUSH
14411: LD_INT 6
14413: PPUSH
14414: CALL_OW 185
// end ; if GetSide ( building ) = 8 then
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL_OW 255
14427: PUSH
14428: LD_INT 8
14430: EQUAL
14431: IFFALSE 14457
// begin if GetBType ( building ) = b_workshop then
14433: LD_VAR 0 1
14437: PPUSH
14438: CALL_OW 266
14442: PUSH
14443: LD_INT 2
14445: EQUAL
14446: IFFALSE 14457
// ComUpgrade ( building ) ;
14448: LD_VAR 0 1
14452: PPUSH
14453: CALL_OW 146
// end ; if GetSide ( building ) = 3 then
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 255
14466: PUSH
14467: LD_INT 3
14469: EQUAL
14470: IFFALSE 14544
// begin russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14472: LD_ADDR_EXP 94
14476: PUSH
14477: LD_EXP 94
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14490: LD_ADDR_EXP 94
14494: PUSH
14495: LD_EXP 94
14499: PPUSH
14500: LD_INT 1
14502: PPUSH
14503: CALL_OW 3
14507: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14508: LD_ADDR_EXP 94
14512: PUSH
14513: LD_EXP 94
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 3
14525: ST_TO_ADDR
// russianDestroyedBuilds := Delete ( russianDestroyedBuilds , 1 ) ;
14526: LD_ADDR_EXP 94
14530: PUSH
14531: LD_EXP 94
14535: PPUSH
14536: LD_INT 1
14538: PPUSH
14539: CALL_OW 3
14543: ST_TO_ADDR
// end ; if GetSide ( building ) = 8 then
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 255
14553: PUSH
14554: LD_INT 8
14556: EQUAL
14557: IFFALSE 14631
// begin legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14559: LD_ADDR_EXP 93
14563: PUSH
14564: LD_EXP 93
14568: PPUSH
14569: LD_INT 1
14571: PPUSH
14572: CALL_OW 3
14576: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14577: LD_ADDR_EXP 93
14581: PUSH
14582: LD_EXP 93
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 3
14594: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14595: LD_ADDR_EXP 93
14599: PUSH
14600: LD_EXP 93
14604: PPUSH
14605: LD_INT 1
14607: PPUSH
14608: CALL_OW 3
14612: ST_TO_ADDR
// legionDestroyedBuilds := Delete ( legionDestroyedBuilds , 1 ) ;
14613: LD_ADDR_EXP 93
14617: PUSH
14618: LD_EXP 93
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: CALL_OW 3
14630: ST_TO_ADDR
// end ; if GetSide ( building ) = 7 then
14631: LD_VAR 0 1
14635: PPUSH
14636: CALL_OW 255
14640: PUSH
14641: LD_INT 7
14643: EQUAL
14644: IFFALSE 14718
// begin allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14646: LD_ADDR_EXP 95
14650: PUSH
14651: LD_EXP 95
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: CALL_OW 3
14663: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14664: LD_ADDR_EXP 95
14668: PUSH
14669: LD_EXP 95
14673: PPUSH
14674: LD_INT 1
14676: PPUSH
14677: CALL_OW 3
14681: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14682: LD_ADDR_EXP 95
14686: PUSH
14687: LD_EXP 95
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 3
14699: ST_TO_ADDR
// allianceDestroyedBuilds := Delete ( allianceDestroyedBuilds , 1 ) ;
14700: LD_ADDR_EXP 95
14704: PUSH
14705: LD_EXP 95
14709: PPUSH
14710: LD_INT 1
14712: PPUSH
14713: CALL_OW 3
14717: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 255
14727: PUSH
14728: LD_INT 3
14730: EQUAL
14731: IFFALSE 14798
// begin if GetBType ( building ) = b_bunker or GetBType ( building ) = b_turret then
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 266
14742: PUSH
14743: LD_INT 32
14745: EQUAL
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 266
14756: PUSH
14757: LD_INT 33
14759: EQUAL
14760: OR
14761: IFFALSE 14798
// PlaceWeaponTurret ( building , [ 46 , 47 , 45 ] [ Rand ( 1 , 3 ) ] ) ;
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_INT 46
14770: PUSH
14771: LD_INT 47
14773: PUSH
14774: LD_INT 45
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 1
14784: PPUSH
14785: LD_INT 3
14787: PPUSH
14788: CALL_OW 12
14792: ARRAY
14793: PPUSH
14794: CALL_OW 431
// end ; if GetSide ( building ) = 8 and GetBType ( building ) = b_bunker then
14798: LD_VAR 0 1
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 8
14810: EQUAL
14811: PUSH
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 266
14821: PUSH
14822: LD_INT 32
14824: EQUAL
14825: AND
14826: IFFALSE 14859
// begin PlaceWeaponTurret ( building , [ 28 , 27 ] [ Rand ( 1 , 2 ) ] ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: LD_INT 28
14835: PUSH
14836: LD_INT 27
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 1
14845: PPUSH
14846: LD_INT 2
14848: PPUSH
14849: CALL_OW 12
14853: ARRAY
14854: PPUSH
14855: CALL_OW 431
// end ; end ;
14859: PPOPN 2
14861: END
// on EnterBuilding ( building , human ) do begin end ;
14862: PPOPN 2
14864: END
// on BehemothConstructed ( vehicle ) do begin if GetSide ( vehicle ) = 6 then
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 255
14874: PUSH
14875: LD_INT 6
14877: EQUAL
14878: IFFALSE 14896
// ruBehs = ruBehs ^ vehicle ;
14880: LD_ADDR_EXP 59
14884: PUSH
14885: LD_EXP 59
14889: PUSH
14890: LD_VAR 0 1
14894: ADD
14895: ST_TO_ADDR
// end ;
14896: PPOPN 1
14898: END
// on VehicleConstructed ( vehicle , building ) do var legionBomb , rocketTarget ;
14899: LD_INT 0
14901: PPUSH
14902: PPUSH
// begin if vehicle = powellVeh then
14903: LD_VAR 0 1
14907: PUSH
14908: LD_EXP 73
14912: EQUAL
14913: IFFALSE 14929
// ComExitVehicle ( UnitsInside ( vehicle ) ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: CALL_OW 313
14924: PPUSH
14925: CALL_OW 121
// if GetSide ( vehicle ) = 4 then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 255
14938: PUSH
14939: LD_INT 4
14941: EQUAL
14942: IFFALSE 14959
// AddComMoveXY ( vehicle , 58 , 63 ) ;
14944: LD_VAR 0 1
14948: PPUSH
14949: LD_INT 58
14951: PPUSH
14952: LD_INT 63
14954: PPUSH
14955: CALL_OW 171
// if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_heavy_gun then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 255
14968: PUSH
14969: LD_INT 4
14971: EQUAL
14972: PUSH
14973: LD_EXP 69
14977: PUSH
14978: LD_INT 2
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_VAR 0 1
14987: PPUSH
14988: CALL_OW 264
14992: PUSH
14993: LD_INT 6
14995: EQUAL
14996: AND
14997: IFFALSE 15051
// begin ComExitBuilding ( amUnitsAttack [ 5 ] ) ;
14999: LD_EXP 66
15003: PUSH
15004: LD_INT 5
15006: ARRAY
15007: PPUSH
15008: CALL_OW 122
// wait ( 0 0$1 ) ;
15012: LD_INT 35
15014: PPUSH
15015: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ 5 ] , AmFact ) ;
15019: LD_EXP 66
15023: PUSH
15024: LD_INT 5
15026: ARRAY
15027: PPUSH
15028: LD_INT 85
15030: PPUSH
15031: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ 5 ] , 3 ) ;
15035: LD_EXP 66
15039: PUSH
15040: LD_INT 5
15042: ARRAY
15043: PPUSH
15044: LD_INT 3
15046: PPUSH
15047: CALL_OW 183
// end ; if GetSide ( vehicle ) = 4 and powellAttacks = 2 and GetWeapon ( vehicle ) = us_light_gun then
15051: LD_VAR 0 1
15055: PPUSH
15056: CALL_OW 255
15060: PUSH
15061: LD_INT 4
15063: EQUAL
15064: PUSH
15065: LD_EXP 69
15069: PUSH
15070: LD_INT 2
15072: EQUAL
15073: AND
15074: PUSH
15075: LD_VAR 0 1
15079: PPUSH
15080: CALL_OW 264
15084: PUSH
15085: LD_INT 3
15087: EQUAL
15088: AND
15089: IFFALSE 15116
// begin powellVeh = vehicle ;
15091: LD_ADDR_EXP 73
15095: PUSH
15096: LD_VAR 0 1
15100: ST_TO_ADDR
// ComMoveXY ( vehicle , 49 , 74 ) ;
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_INT 49
15108: PPUSH
15109: LD_INT 74
15111: PPUSH
15112: CALL_OW 111
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 2 and GetType ( vehicle ) = unit_vehicle then
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 255
15125: PUSH
15126: LD_INT 8
15128: EQUAL
15129: PUSH
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 248
15139: PUSH
15140: LD_INT 2
15142: EQUAL
15143: AND
15144: PUSH
15145: LD_VAR 0 1
15149: PPUSH
15150: CALL_OW 247
15154: PUSH
15155: LD_INT 2
15157: EQUAL
15158: AND
15159: IFFALSE 15195
// begin legionVehicles = legionVehicles ^ vehicle ;
15161: LD_ADDR_EXP 55
15165: PUSH
15166: LD_EXP 55
15170: PUSH
15171: LD_VAR 0 1
15175: ADD
15176: ST_TO_ADDR
// ComLinkTo ( vehicle , arControler [ 1 ] ) ;
15177: LD_VAR 0 1
15181: PPUSH
15182: LD_EXP 56
15186: PUSH
15187: LD_INT 1
15189: ARRAY
15190: PPUSH
15191: CALL_OW 135
// end ; if GetSide ( vehicle ) = 8 and GetNation ( vehicle ) = 3 then
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 255
15204: PUSH
15205: LD_INT 8
15207: EQUAL
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 248
15218: PUSH
15219: LD_INT 3
15221: EQUAL
15222: AND
15223: IFFALSE 15762
// begin ChangeMissionObjectives ( MlegionDel ) ;
15225: LD_STRING MlegionDel
15227: PPUSH
15228: CALL_OW 337
// legionBomb = rand ( 1 , 2 ) ;
15232: LD_ADDR_VAR 0 3
15236: PUSH
15237: LD_INT 1
15239: PPUSH
15240: LD_INT 2
15242: PPUSH
15243: CALL_OW 12
15247: ST_TO_ADDR
// legionRocket = vehicle ;
15248: LD_ADDR_EXP 99
15252: PUSH
15253: LD_VAR 0 1
15257: ST_TO_ADDR
// DialogueOn ;
15258: CALL_OW 6
// if legionBomb = 1 then
15262: LD_VAR 0 3
15266: PUSH
15267: LD_INT 1
15269: EQUAL
15270: IFFALSE 15622
// begin if Kurt then
15272: LD_EXP 30
15276: IFFALSE 15292
// Say ( Kurt , D12-Kurt-1 ) else
15278: LD_EXP 30
15282: PPUSH
15283: LD_STRING D12-Kurt-1
15285: PPUSH
15286: CALL_OW 88
15290: GO 15354
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12-Kurt-1 ) ;
15292: LD_INT 22
15294: PUSH
15295: LD_INT 8
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 21
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 25
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 26
15324: PUSH
15325: LD_INT 1
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PPUSH
15338: CALL_OW 69
15342: PUSH
15343: LD_INT 2
15345: ARRAY
15346: PPUSH
15347: LD_STRING D12-Kurt-1
15349: PPUSH
15350: CALL_OW 88
// DialogueOff ;
15354: CALL_OW 7
// wait ( 0 0$15 ) ;
15358: LD_INT 525
15360: PPUSH
15361: CALL_OW 67
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15365: LD_ADDR_VAR 0 4
15369: PUSH
15370: LD_INT 22
15372: PUSH
15373: LD_INT 1
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 3
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 23
15392: PUSH
15393: LD_INT 1
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 30
15405: PUSH
15406: LD_INT 0
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 30
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 69
15438: ST_TO_ADDR
// if rocketTarget = 0 then
15439: LD_VAR 0 4
15443: PUSH
15444: LD_INT 0
15446: EQUAL
15447: IFFALSE 15523
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
15449: LD_ADDR_VAR 0 4
15453: PUSH
15454: LD_INT 22
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 21
15466: PUSH
15467: LD_INT 3
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 23
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 2
15486: PUSH
15487: LD_INT 30
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 30
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: PPUSH
15518: CALL_OW 69
15522: ST_TO_ADDR
// if rocketTarget = 0 then
15523: LD_VAR 0 4
15527: PUSH
15528: LD_INT 0
15530: EQUAL
15531: IFFALSE 15585
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
15533: LD_ADDR_VAR 0 4
15537: PUSH
15538: LD_INT 22
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 21
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 23
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 50
15570: PUSH
15571: EMPTY
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 69
15584: ST_TO_ADDR
// ComAttackPlace ( legionRocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
15585: LD_EXP 99
15589: PPUSH
15590: LD_VAR 0 4
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: CALL_OW 250
15603: PPUSH
15604: LD_VAR 0 4
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PPUSH
15613: CALL_OW 251
15617: PPUSH
15618: CALL_OW 116
// end ; if legionBomb = 2 then
15622: LD_VAR 0 3
15626: PUSH
15627: LD_INT 2
15629: EQUAL
15630: IFFALSE 15762
// begin if Kurt then
15632: LD_EXP 30
15636: IFFALSE 15652
// Say ( Kurt , D12a-Kurt-1 ) else
15638: LD_EXP 30
15642: PPUSH
15643: LD_STRING D12a-Kurt-1
15645: PPUSH
15646: CALL_OW 88
15650: GO 15714
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D12a-Kurt-11 ) ;
15652: LD_INT 22
15654: PUSH
15655: LD_INT 8
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 21
15664: PUSH
15665: LD_INT 1
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 25
15674: PUSH
15675: LD_INT 1
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: PUSH
15703: LD_INT 2
15705: ARRAY
15706: PPUSH
15707: LD_STRING D12a-Kurt-11
15709: PPUSH
15710: CALL_OW 88
// SayRadio ( Roth , D12a-Roth-1 ) ;
15714: LD_EXP 28
15718: PPUSH
15719: LD_STRING D12a-Roth-1
15721: PPUSH
15722: CALL_OW 94
// DialogueOff ;
15726: CALL_OW 7
// wait ( 0 0$15 ) ;
15730: LD_INT 525
15732: PPUSH
15733: CALL_OW 67
// ComAttackPlace ( legionRocket , GetX ( RuDep2 ) , GetY ( RuDep2 ) ) ;
15737: LD_EXP 99
15741: PPUSH
15742: LD_INT 23
15744: PPUSH
15745: CALL_OW 250
15749: PPUSH
15750: LD_INT 23
15752: PPUSH
15753: CALL_OW 251
15757: PPUSH
15758: CALL_OW 116
// end ; end ; if GetSide ( vehicle ) = 3 and GetNation ( vehicle ) = 3 and GetType ( vehicle ) = unit_vehicle then
15762: LD_VAR 0 1
15766: PPUSH
15767: CALL_OW 255
15771: PUSH
15772: LD_INT 3
15774: EQUAL
15775: PUSH
15776: LD_VAR 0 1
15780: PPUSH
15781: CALL_OW 248
15785: PUSH
15786: LD_INT 3
15788: EQUAL
15789: AND
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 247
15800: PUSH
15801: LD_INT 2
15803: EQUAL
15804: AND
15805: IFFALSE 15823
// RussianVehicles = RussianVehicles ^ vehicle ;
15807: LD_ADDR_EXP 61
15811: PUSH
15812: LD_EXP 61
15816: PUSH
15817: LD_VAR 0 1
15821: ADD
15822: ST_TO_ADDR
// if GetSide ( vehicle ) = 7 and GetType ( vehicle ) = unit_vehicle then
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL_OW 255
15832: PUSH
15833: LD_INT 7
15835: EQUAL
15836: PUSH
15837: LD_VAR 0 1
15841: PPUSH
15842: CALL_OW 247
15846: PUSH
15847: LD_INT 2
15849: EQUAL
15850: AND
15851: IFFALSE 15910
// begin AllianceVehicles = AllianceVehicles ^ vehicle ;
15853: LD_ADDR_EXP 62
15857: PUSH
15858: LD_EXP 62
15862: PUSH
15863: LD_VAR 0 1
15867: ADD
15868: ST_TO_ADDR
// if GetControl ( vehicle ) = 2 then
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 263
15878: PUSH
15879: LD_INT 2
15881: EQUAL
15882: IFFALSE 15910
// ComLinkTo ( vehicle , allianceControler [ rand ( 1 , 3 ) ] ) ;
15884: LD_VAR 0 1
15888: PPUSH
15889: LD_EXP 63
15893: PUSH
15894: LD_INT 1
15896: PPUSH
15897: LD_INT 3
15899: PPUSH
15900: CALL_OW 12
15904: ARRAY
15905: PPUSH
15906: CALL_OW 135
// end ; end ;
15910: PPOPN 4
15912: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 4 and powellAttacks = 1 then
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 255
15922: PUSH
15923: LD_INT 4
15925: EQUAL
15926: PUSH
15927: LD_EXP 69
15931: PUSH
15932: LD_INT 1
15934: EQUAL
15935: AND
15936: IFFALSE 16039
// begin ComEnterUnit ( human , AmFact ) ;
15938: LD_VAR 0 2
15942: PPUSH
15943: LD_INT 85
15945: PPUSH
15946: CALL_OW 120
// if GetSex ( human ) = sex_male and blockEvent1 = 0 then
15950: LD_VAR 0 2
15954: PPUSH
15955: CALL_OW 258
15959: PUSH
15960: LD_INT 1
15962: EQUAL
15963: PUSH
15964: LD_EXP 102
15968: PUSH
15969: LD_INT 0
15971: EQUAL
15972: AND
15973: IFFALSE 16039
// begin blockEvent1 = 1 ;
15975: LD_ADDR_EXP 102
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// startAttacks = 1 ;
15983: LD_ADDR_EXP 72
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// Say ( human , D4a-Sol1-1 ) ;
15991: LD_VAR 0 2
15995: PPUSH
15996: LD_STRING D4a-Sol1-1
15998: PPUSH
15999: CALL_OW 88
// Say ( Powell , D4a-Pow-1 ) ;
16003: LD_EXP 17
16007: PPUSH
16008: LD_STRING D4a-Pow-1
16010: PPUSH
16011: CALL_OW 88
// Say ( human , D4a-Sol1-2 ) ;
16015: LD_VAR 0 2
16019: PPUSH
16020: LD_STRING D4a-Sol1-2
16022: PPUSH
16023: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
16027: LD_EXP 17
16031: PPUSH
16032: LD_STRING D4a-Pow-2
16034: PPUSH
16035: CALL_OW 88
// end ; end ; end ;
16039: PPOPN 2
16041: END
// on UnitDestroyed ( unit ) do var i ;
16042: LD_INT 0
16044: PPUSH
// begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 255
16054: PUSH
16055: LD_INT 1
16057: EQUAL
16058: PUSH
16059: LD_VAR 0 1
16063: PPUSH
16064: CALL_OW 247
16068: PUSH
16069: LD_INT 1
16071: EQUAL
16072: AND
16073: IFFALSE 16089
// unitLost = unitLost + 1 ;
16075: LD_ADDR_EXP 98
16079: PUSH
16080: LD_EXP 98
16084: PUSH
16085: LD_INT 1
16087: PLUS
16088: ST_TO_ADDR
// if GetSide ( unit ) = 4 and GetType ( unit ) = unit_human then
16089: LD_VAR 0 1
16093: PPUSH
16094: CALL_OW 255
16098: PUSH
16099: LD_INT 4
16101: EQUAL
16102: PUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 247
16112: PUSH
16113: LD_INT 1
16115: EQUAL
16116: AND
16117: IFFALSE 16167
// begin for i in amUnitsAttack do
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: LD_EXP 66
16128: PUSH
16129: FOR_IN
16130: IFFALSE 16165
// if i = unit then
16132: LD_VAR 0 2
16136: PUSH
16137: LD_VAR 0 1
16141: EQUAL
16142: IFFALSE 16163
// amUnitsAttack = amUnitsAttack diff [ unit ] ;
16144: LD_ADDR_EXP 66
16148: PUSH
16149: LD_EXP 66
16153: PUSH
16154: LD_VAR 0 1
16158: PUSH
16159: EMPTY
16160: LIST
16161: DIFF
16162: ST_TO_ADDR
16163: GO 16129
16165: POP
16166: POP
// end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 255
16176: PUSH
16177: LD_INT 8
16179: EQUAL
16180: PUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 247
16190: PUSH
16191: LD_INT 2
16193: EQUAL
16194: AND
16195: PUSH
16196: LD_VAR 0 1
16200: PPUSH
16201: CALL_OW 248
16205: PUSH
16206: LD_INT 2
16208: EQUAL
16209: AND
16210: IFFALSE 16260
// begin for i in legionVehicles do
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_EXP 55
16221: PUSH
16222: FOR_IN
16223: IFFALSE 16258
// if i = unit then
16225: LD_VAR 0 2
16229: PUSH
16230: LD_VAR 0 1
16234: EQUAL
16235: IFFALSE 16256
// legionVehicles = legionVehicles diff [ unit ] ;
16237: LD_ADDR_EXP 55
16241: PUSH
16242: LD_EXP 55
16246: PUSH
16247: LD_VAR 0 1
16251: PUSH
16252: EMPTY
16253: LIST
16254: DIFF
16255: ST_TO_ADDR
16256: GO 16222
16258: POP
16259: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16260: LD_VAR 0 1
16264: PPUSH
16265: CALL_OW 255
16269: PUSH
16270: LD_INT 3
16272: EQUAL
16273: PUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 247
16283: PUSH
16284: LD_INT 2
16286: EQUAL
16287: AND
16288: IFFALSE 16338
// begin for i in RussianVehicles do
16290: LD_ADDR_VAR 0 2
16294: PUSH
16295: LD_EXP 61
16299: PUSH
16300: FOR_IN
16301: IFFALSE 16336
// if i = unit then
16303: LD_VAR 0 2
16307: PUSH
16308: LD_VAR 0 1
16312: EQUAL
16313: IFFALSE 16334
// RussianVehicles = RussianVehicles diff [ unit ] ;
16315: LD_ADDR_EXP 61
16319: PUSH
16320: LD_EXP 61
16324: PUSH
16325: LD_VAR 0 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: DIFF
16333: ST_TO_ADDR
16334: GO 16300
16336: POP
16337: POP
// end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_vehicle then
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 255
16347: PUSH
16348: LD_INT 7
16350: EQUAL
16351: PUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 247
16361: PUSH
16362: LD_INT 2
16364: EQUAL
16365: AND
16366: IFFALSE 16416
// begin for i in AllianceVehicles do
16368: LD_ADDR_VAR 0 2
16372: PUSH
16373: LD_EXP 62
16377: PUSH
16378: FOR_IN
16379: IFFALSE 16414
// if i = unit then
16381: LD_VAR 0 2
16385: PUSH
16386: LD_VAR 0 1
16390: EQUAL
16391: IFFALSE 16412
// AllianceVehicles = AllianceVehicles diff [ unit ] ;
16393: LD_ADDR_EXP 62
16397: PUSH
16398: LD_EXP 62
16402: PUSH
16403: LD_VAR 0 1
16407: PUSH
16408: EMPTY
16409: LIST
16410: DIFF
16411: ST_TO_ADDR
16412: GO 16378
16414: POP
16415: POP
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 255
16425: PUSH
16426: LD_INT 3
16428: EQUAL
16429: PUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 247
16439: PUSH
16440: LD_INT 3
16442: EQUAL
16443: AND
16444: IFFALSE 17136
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16446: LD_VAR 0 1
16450: PPUSH
16451: CALL_OW 266
16455: PUSH
16456: LD_INT 31
16458: EQUAL
16459: PUSH
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 266
16469: PUSH
16470: LD_INT 32
16472: EQUAL
16473: OR
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 266
16484: PUSH
16485: LD_INT 36
16487: EQUAL
16488: OR
16489: PUSH
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 266
16499: PUSH
16500: LD_INT 0
16502: EQUAL
16503: OR
16504: PUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 266
16514: PUSH
16515: LD_INT 24
16517: EQUAL
16518: OR
16519: PUSH
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL_OW 266
16529: PUSH
16530: LD_INT 17
16532: EQUAL
16533: OR
16534: PUSH
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 266
16544: PUSH
16545: LD_INT 25
16547: EQUAL
16548: OR
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 266
16559: PUSH
16560: LD_INT 19
16562: EQUAL
16563: OR
16564: PUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 266
16574: PUSH
16575: LD_INT 20
16577: EQUAL
16578: OR
16579: PUSH
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 266
16589: PUSH
16590: LD_INT 18
16592: EQUAL
16593: OR
16594: PUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 266
16604: PUSH
16605: LD_INT 21
16607: EQUAL
16608: OR
16609: PUSH
16610: LD_VAR 0 1
16614: PPUSH
16615: CALL_OW 266
16619: PUSH
16620: LD_INT 23
16622: EQUAL
16623: OR
16624: PUSH
16625: LD_VAR 0 1
16629: PPUSH
16630: CALL_OW 266
16634: PUSH
16635: LD_INT 16
16637: EQUAL
16638: OR
16639: PUSH
16640: LD_VAR 0 1
16644: PPUSH
16645: CALL_OW 266
16649: PUSH
16650: LD_INT 6
16652: EQUAL
16653: OR
16654: PUSH
16655: LD_VAR 0 1
16659: PPUSH
16660: CALL_OW 266
16664: PUSH
16665: LD_INT 29
16667: EQUAL
16668: OR
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 266
16679: PUSH
16680: LD_INT 26
16682: EQUAL
16683: OR
16684: PUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 266
16694: PUSH
16695: LD_INT 30
16697: EQUAL
16698: OR
16699: PUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 266
16709: PUSH
16710: LD_INT 28
16712: EQUAL
16713: OR
16714: PUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 266
16724: PUSH
16725: LD_INT 27
16727: EQUAL
16728: OR
16729: PUSH
16730: LD_VAR 0 1
16734: PPUSH
16735: CALL_OW 266
16739: PUSH
16740: LD_INT 33
16742: EQUAL
16743: OR
16744: PUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 266
16754: PUSH
16755: LD_INT 2
16757: EQUAL
16758: OR
16759: PUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 266
16769: PUSH
16770: LD_INT 4
16772: EQUAL
16773: OR
16774: IFFALSE 16860
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ GetBType ( unit ) ;
16776: LD_ADDR_EXP 94
16780: PUSH
16781: LD_EXP 94
16785: PUSH
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 266
16795: ADD
16796: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16797: LD_ADDR_EXP 94
16801: PUSH
16802: LD_EXP 94
16806: PUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: CALL_OW 250
16816: ADD
16817: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16818: LD_ADDR_EXP 94
16822: PUSH
16823: LD_EXP 94
16827: PUSH
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 251
16837: ADD
16838: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16839: LD_ADDR_EXP 94
16843: PUSH
16844: LD_EXP 94
16848: PUSH
16849: LD_VAR 0 1
16853: PPUSH
16854: CALL_OW 254
16858: ADD
16859: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 266
16869: PUSH
16870: LD_INT 1
16872: EQUAL
16873: IFFALSE 16952
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 0 ;
16875: LD_ADDR_EXP 94
16879: PUSH
16880: LD_EXP 94
16884: PUSH
16885: LD_INT 0
16887: ADD
16888: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16889: LD_ADDR_EXP 94
16893: PUSH
16894: LD_EXP 94
16898: PUSH
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 250
16908: ADD
16909: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
16910: LD_ADDR_EXP 94
16914: PUSH
16915: LD_EXP 94
16919: PUSH
16920: LD_VAR 0 1
16924: PPUSH
16925: CALL_OW 251
16929: ADD
16930: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
16931: LD_ADDR_EXP 94
16935: PUSH
16936: LD_EXP 94
16940: PUSH
16941: LD_VAR 0 1
16945: PPUSH
16946: CALL_OW 254
16950: ADD
16951: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16952: LD_VAR 0 1
16956: PPUSH
16957: CALL_OW 266
16961: PUSH
16962: LD_INT 3
16964: EQUAL
16965: IFFALSE 17044
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 2 ;
16967: LD_ADDR_EXP 94
16971: PUSH
16972: LD_EXP 94
16976: PUSH
16977: LD_INT 2
16979: ADD
16980: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
16981: LD_ADDR_EXP 94
16985: PUSH
16986: LD_EXP 94
16990: PUSH
16991: LD_VAR 0 1
16995: PPUSH
16996: CALL_OW 250
17000: ADD
17001: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
17002: LD_ADDR_EXP 94
17006: PUSH
17007: LD_EXP 94
17011: PUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 251
17021: ADD
17022: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17023: LD_ADDR_EXP 94
17027: PUSH
17028: LD_EXP 94
17032: PUSH
17033: LD_VAR 0 1
17037: PPUSH
17038: CALL_OW 254
17042: ADD
17043: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17044: LD_VAR 0 1
17048: PPUSH
17049: CALL_OW 266
17053: PUSH
17054: LD_INT 5
17056: EQUAL
17057: IFFALSE 17136
// begin russianDestroyedBuilds = russianDestroyedBuilds ^ 4 ;
17059: LD_ADDR_EXP 94
17063: PUSH
17064: LD_EXP 94
17068: PUSH
17069: LD_INT 4
17071: ADD
17072: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetX ( unit ) ;
17073: LD_ADDR_EXP 94
17077: PUSH
17078: LD_EXP 94
17082: PUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 250
17092: ADD
17093: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetY ( unit ) ;
17094: LD_ADDR_EXP 94
17098: PUSH
17099: LD_EXP 94
17103: PUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 251
17113: ADD
17114: ST_TO_ADDR
// russianDestroyedBuilds = russianDestroyedBuilds ^ GetDir ( unit ) ;
17115: LD_ADDR_EXP 94
17119: PUSH
17120: LD_EXP 94
17124: PUSH
17125: LD_VAR 0 1
17129: PPUSH
17130: CALL_OW 254
17134: ADD
17135: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 8 and GetType ( unit ) = unit_building and GetNation ( unit ) = 2 then
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL_OW 255
17145: PUSH
17146: LD_INT 8
17148: EQUAL
17149: PUSH
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 247
17159: PUSH
17160: LD_INT 3
17162: EQUAL
17163: AND
17164: PUSH
17165: LD_VAR 0 1
17169: PPUSH
17170: CALL_OW 248
17174: PUSH
17175: LD_INT 2
17177: EQUAL
17178: AND
17179: IFFALSE 17871
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 266
17190: PUSH
17191: LD_INT 31
17193: EQUAL
17194: PUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 266
17204: PUSH
17205: LD_INT 32
17207: EQUAL
17208: OR
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 266
17219: PUSH
17220: LD_INT 36
17222: EQUAL
17223: OR
17224: PUSH
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL_OW 266
17234: PUSH
17235: LD_INT 0
17237: EQUAL
17238: OR
17239: PUSH
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 266
17249: PUSH
17250: LD_INT 24
17252: EQUAL
17253: OR
17254: PUSH
17255: LD_VAR 0 1
17259: PPUSH
17260: CALL_OW 266
17264: PUSH
17265: LD_INT 17
17267: EQUAL
17268: OR
17269: PUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: CALL_OW 266
17279: PUSH
17280: LD_INT 25
17282: EQUAL
17283: OR
17284: PUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 266
17294: PUSH
17295: LD_INT 19
17297: EQUAL
17298: OR
17299: PUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 266
17309: PUSH
17310: LD_INT 20
17312: EQUAL
17313: OR
17314: PUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 266
17324: PUSH
17325: LD_INT 18
17327: EQUAL
17328: OR
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 266
17339: PUSH
17340: LD_INT 21
17342: EQUAL
17343: OR
17344: PUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 266
17354: PUSH
17355: LD_INT 23
17357: EQUAL
17358: OR
17359: PUSH
17360: LD_VAR 0 1
17364: PPUSH
17365: CALL_OW 266
17369: PUSH
17370: LD_INT 16
17372: EQUAL
17373: OR
17374: PUSH
17375: LD_VAR 0 1
17379: PPUSH
17380: CALL_OW 266
17384: PUSH
17385: LD_INT 6
17387: EQUAL
17388: OR
17389: PUSH
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 266
17399: PUSH
17400: LD_INT 29
17402: EQUAL
17403: OR
17404: PUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 266
17414: PUSH
17415: LD_INT 26
17417: EQUAL
17418: OR
17419: PUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 266
17429: PUSH
17430: LD_INT 30
17432: EQUAL
17433: OR
17434: PUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 266
17444: PUSH
17445: LD_INT 28
17447: EQUAL
17448: OR
17449: PUSH
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 266
17459: PUSH
17460: LD_INT 27
17462: EQUAL
17463: OR
17464: PUSH
17465: LD_VAR 0 1
17469: PPUSH
17470: CALL_OW 266
17474: PUSH
17475: LD_INT 33
17477: EQUAL
17478: OR
17479: PUSH
17480: LD_VAR 0 1
17484: PPUSH
17485: CALL_OW 266
17489: PUSH
17490: LD_INT 2
17492: EQUAL
17493: OR
17494: PUSH
17495: LD_VAR 0 1
17499: PPUSH
17500: CALL_OW 266
17504: PUSH
17505: LD_INT 4
17507: EQUAL
17508: OR
17509: IFFALSE 17595
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ GetBType ( unit ) ;
17511: LD_ADDR_EXP 93
17515: PUSH
17516: LD_EXP 93
17520: PUSH
17521: LD_VAR 0 1
17525: PPUSH
17526: CALL_OW 266
17530: ADD
17531: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17532: LD_ADDR_EXP 93
17536: PUSH
17537: LD_EXP 93
17541: PUSH
17542: LD_VAR 0 1
17546: PPUSH
17547: CALL_OW 250
17551: ADD
17552: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17553: LD_ADDR_EXP 93
17557: PUSH
17558: LD_EXP 93
17562: PUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 251
17572: ADD
17573: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17574: LD_ADDR_EXP 93
17578: PUSH
17579: LD_EXP 93
17583: PUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 254
17593: ADD
17594: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17595: LD_VAR 0 1
17599: PPUSH
17600: CALL_OW 266
17604: PUSH
17605: LD_INT 1
17607: EQUAL
17608: IFFALSE 17687
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 0 ;
17610: LD_ADDR_EXP 93
17614: PUSH
17615: LD_EXP 93
17619: PUSH
17620: LD_INT 0
17622: ADD
17623: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17624: LD_ADDR_EXP 93
17628: PUSH
17629: LD_EXP 93
17633: PUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 250
17643: ADD
17644: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17645: LD_ADDR_EXP 93
17649: PUSH
17650: LD_EXP 93
17654: PUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 251
17664: ADD
17665: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17666: LD_ADDR_EXP 93
17670: PUSH
17671: LD_EXP 93
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 254
17685: ADD
17686: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 266
17696: PUSH
17697: LD_INT 3
17699: EQUAL
17700: IFFALSE 17779
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 2 ;
17702: LD_ADDR_EXP 93
17706: PUSH
17707: LD_EXP 93
17711: PUSH
17712: LD_INT 2
17714: ADD
17715: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17716: LD_ADDR_EXP 93
17720: PUSH
17721: LD_EXP 93
17725: PUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 250
17735: ADD
17736: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17737: LD_ADDR_EXP 93
17741: PUSH
17742: LD_EXP 93
17746: PUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: CALL_OW 251
17756: ADD
17757: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17758: LD_ADDR_EXP 93
17762: PUSH
17763: LD_EXP 93
17767: PUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 254
17777: ADD
17778: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 266
17788: PUSH
17789: LD_INT 5
17791: EQUAL
17792: IFFALSE 17871
// begin legionDestroyedBuilds = legionDestroyedBuilds ^ 4 ;
17794: LD_ADDR_EXP 93
17798: PUSH
17799: LD_EXP 93
17803: PUSH
17804: LD_INT 4
17806: ADD
17807: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetX ( unit ) ;
17808: LD_ADDR_EXP 93
17812: PUSH
17813: LD_EXP 93
17817: PUSH
17818: LD_VAR 0 1
17822: PPUSH
17823: CALL_OW 250
17827: ADD
17828: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetY ( unit ) ;
17829: LD_ADDR_EXP 93
17833: PUSH
17834: LD_EXP 93
17838: PUSH
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 251
17848: ADD
17849: ST_TO_ADDR
// legionDestroyedBuilds = legionDestroyedBuilds ^ GetDir ( unit ) ;
17850: LD_ADDR_EXP 93
17854: PUSH
17855: LD_EXP 93
17859: PUSH
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 254
17869: ADD
17870: ST_TO_ADDR
// end ; end ; if GetSide ( unit ) = 7 and GetType ( unit ) = unit_building then
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 255
17880: PUSH
17881: LD_INT 7
17883: EQUAL
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 247
17894: PUSH
17895: LD_INT 3
17897: EQUAL
17898: AND
17899: IFFALSE 18591
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17901: LD_VAR 0 1
17905: PPUSH
17906: CALL_OW 266
17910: PUSH
17911: LD_INT 31
17913: EQUAL
17914: PUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 266
17924: PUSH
17925: LD_INT 32
17927: EQUAL
17928: OR
17929: PUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 266
17939: PUSH
17940: LD_INT 36
17942: EQUAL
17943: OR
17944: PUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 266
17954: PUSH
17955: LD_INT 0
17957: EQUAL
17958: OR
17959: PUSH
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 266
17969: PUSH
17970: LD_INT 24
17972: EQUAL
17973: OR
17974: PUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 266
17984: PUSH
17985: LD_INT 17
17987: EQUAL
17988: OR
17989: PUSH
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 266
17999: PUSH
18000: LD_INT 25
18002: EQUAL
18003: OR
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 266
18014: PUSH
18015: LD_INT 19
18017: EQUAL
18018: OR
18019: PUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: CALL_OW 266
18029: PUSH
18030: LD_INT 20
18032: EQUAL
18033: OR
18034: PUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: CALL_OW 266
18044: PUSH
18045: LD_INT 18
18047: EQUAL
18048: OR
18049: PUSH
18050: LD_VAR 0 1
18054: PPUSH
18055: CALL_OW 266
18059: PUSH
18060: LD_INT 21
18062: EQUAL
18063: OR
18064: PUSH
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 266
18074: PUSH
18075: LD_INT 23
18077: EQUAL
18078: OR
18079: PUSH
18080: LD_VAR 0 1
18084: PPUSH
18085: CALL_OW 266
18089: PUSH
18090: LD_INT 16
18092: EQUAL
18093: OR
18094: PUSH
18095: LD_VAR 0 1
18099: PPUSH
18100: CALL_OW 266
18104: PUSH
18105: LD_INT 6
18107: EQUAL
18108: OR
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 266
18119: PUSH
18120: LD_INT 29
18122: EQUAL
18123: OR
18124: PUSH
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL_OW 266
18134: PUSH
18135: LD_INT 26
18137: EQUAL
18138: OR
18139: PUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 266
18149: PUSH
18150: LD_INT 30
18152: EQUAL
18153: OR
18154: PUSH
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 266
18164: PUSH
18165: LD_INT 28
18167: EQUAL
18168: OR
18169: PUSH
18170: LD_VAR 0 1
18174: PPUSH
18175: CALL_OW 266
18179: PUSH
18180: LD_INT 27
18182: EQUAL
18183: OR
18184: PUSH
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 266
18194: PUSH
18195: LD_INT 33
18197: EQUAL
18198: OR
18199: PUSH
18200: LD_VAR 0 1
18204: PPUSH
18205: CALL_OW 266
18209: PUSH
18210: LD_INT 2
18212: EQUAL
18213: OR
18214: PUSH
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 266
18224: PUSH
18225: LD_INT 4
18227: EQUAL
18228: OR
18229: IFFALSE 18315
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetBType ( unit ) ;
18231: LD_ADDR_EXP 95
18235: PUSH
18236: LD_EXP 95
18240: PUSH
18241: LD_VAR 0 1
18245: PPUSH
18246: CALL_OW 266
18250: ADD
18251: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18252: LD_ADDR_EXP 95
18256: PUSH
18257: LD_EXP 95
18261: PUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 250
18271: ADD
18272: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18273: LD_ADDR_EXP 95
18277: PUSH
18278: LD_EXP 95
18282: PUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 251
18292: ADD
18293: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18294: LD_ADDR_EXP 95
18298: PUSH
18299: LD_EXP 95
18303: PUSH
18304: LD_VAR 0 1
18308: PPUSH
18309: CALL_OW 254
18313: ADD
18314: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18315: LD_VAR 0 1
18319: PPUSH
18320: CALL_OW 266
18324: PUSH
18325: LD_INT 1
18327: EQUAL
18328: IFFALSE 18407
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 0 ;
18330: LD_ADDR_EXP 95
18334: PUSH
18335: LD_EXP 95
18339: PUSH
18340: LD_INT 0
18342: ADD
18343: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18344: LD_ADDR_EXP 95
18348: PUSH
18349: LD_EXP 95
18353: PUSH
18354: LD_VAR 0 1
18358: PPUSH
18359: CALL_OW 250
18363: ADD
18364: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18365: LD_ADDR_EXP 95
18369: PUSH
18370: LD_EXP 95
18374: PUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 251
18384: ADD
18385: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18386: LD_ADDR_EXP 95
18390: PUSH
18391: LD_EXP 95
18395: PUSH
18396: LD_VAR 0 1
18400: PPUSH
18401: CALL_OW 254
18405: ADD
18406: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL_OW 266
18416: PUSH
18417: LD_INT 3
18419: EQUAL
18420: IFFALSE 18499
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 2 ;
18422: LD_ADDR_EXP 95
18426: PUSH
18427: LD_EXP 95
18431: PUSH
18432: LD_INT 2
18434: ADD
18435: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18436: LD_ADDR_EXP 95
18440: PUSH
18441: LD_EXP 95
18445: PUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: CALL_OW 250
18455: ADD
18456: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18457: LD_ADDR_EXP 95
18461: PUSH
18462: LD_EXP 95
18466: PUSH
18467: LD_VAR 0 1
18471: PPUSH
18472: CALL_OW 251
18476: ADD
18477: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18478: LD_ADDR_EXP 95
18482: PUSH
18483: LD_EXP 95
18487: PUSH
18488: LD_VAR 0 1
18492: PPUSH
18493: CALL_OW 254
18497: ADD
18498: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL_OW 266
18508: PUSH
18509: LD_INT 5
18511: EQUAL
18512: IFFALSE 18591
// begin allianceDestroyedBuilds = allianceDestroyedBuilds ^ 4 ;
18514: LD_ADDR_EXP 95
18518: PUSH
18519: LD_EXP 95
18523: PUSH
18524: LD_INT 4
18526: ADD
18527: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetX ( unit ) ;
18528: LD_ADDR_EXP 95
18532: PUSH
18533: LD_EXP 95
18537: PUSH
18538: LD_VAR 0 1
18542: PPUSH
18543: CALL_OW 250
18547: ADD
18548: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetY ( unit ) ;
18549: LD_ADDR_EXP 95
18553: PUSH
18554: LD_EXP 95
18558: PUSH
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 251
18568: ADD
18569: ST_TO_ADDR
// allianceDestroyedBuilds = allianceDestroyedBuilds ^ GetDir ( unit ) ;
18570: LD_ADDR_EXP 95
18574: PUSH
18575: LD_EXP 95
18579: PUSH
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 254
18589: ADD
18590: ST_TO_ADDR
// end ; end ; end ;
18591: PPOPN 2
18593: END
// on UnitKamikazed ( unit ) do var i ;
18594: LD_INT 0
18596: PPUSH
// begin if GetSide ( unit ) = 8 and GetType ( unit ) = unit_vehicle and GetNation ( unit ) = 2 then
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL_OW 255
18606: PUSH
18607: LD_INT 8
18609: EQUAL
18610: PUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 247
18620: PUSH
18621: LD_INT 2
18623: EQUAL
18624: AND
18625: PUSH
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 248
18635: PUSH
18636: LD_INT 2
18638: EQUAL
18639: AND
18640: IFFALSE 18690
// begin for i in legionVehicles do
18642: LD_ADDR_VAR 0 2
18646: PUSH
18647: LD_EXP 55
18651: PUSH
18652: FOR_IN
18653: IFFALSE 18688
// if i = unit then
18655: LD_VAR 0 2
18659: PUSH
18660: LD_VAR 0 1
18664: EQUAL
18665: IFFALSE 18686
// legionVehicles = legionVehicles diff [ unit ] ;
18667: LD_ADDR_EXP 55
18671: PUSH
18672: LD_EXP 55
18676: PUSH
18677: LD_VAR 0 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: DIFF
18685: ST_TO_ADDR
18686: GO 18652
18688: POP
18689: POP
// end ; end ;
18690: PPOPN 2
18692: END
// on SiberiteRocketExploded ( unit , x , y ) do begin if InArea ( x , y , SiberiteMainDeposit ) then
18693: LD_VAR 0 2
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: LD_INT 29
18705: PPUSH
18706: CALL_OW 309
18710: IFFALSE 18770
// begin if GetSide ( unit ) = 1 then
18712: LD_VAR 0 1
18716: PPUSH
18717: CALL_OW 255
18721: PUSH
18722: LD_INT 1
18724: EQUAL
18725: IFFALSE 18741
// begin wait ( 0 0$6 ) ;
18727: LD_INT 210
18729: PPUSH
18730: CALL_OW 67
// YouLost ( Motherlode2 ) ;
18734: LD_STRING Motherlode2
18736: PPUSH
18737: CALL_OW 104
// end ; if GetSide ( unit ) = 8 then
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 255
18750: PUSH
18751: LD_INT 8
18753: EQUAL
18754: IFFALSE 18770
// begin wait ( 0 0$6 ) ;
18756: LD_INT 210
18758: PPUSH
18759: CALL_OW 67
// YouLost ( Motherlode1 ) ;
18763: LD_STRING Motherlode1
18765: PPUSH
18766: CALL_OW 104
// end ; end ; end ;
18770: PPOPN 3
18772: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetSide ( unit ) = 2 then
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 255
18782: PUSH
18783: LD_INT 2
18785: EQUAL
18786: IFFALSE 18795
// YouLost ( Motherlode3 ) ;
18788: LD_STRING Motherlode3
18790: PPUSH
18791: CALL_OW 104
// end ;
18795: PPOPN 3
18797: END
// on VehicleCaptured ( new_identifier , old_identifier , old_side , capturing_unit ) do begin if old_identifier in allianceVehicles then
18798: LD_VAR 0 2
18802: PUSH
18803: LD_EXP 62
18807: IN
18808: IFFALSE 18826
// allianceVehicles := allianceVehicles diff old_identifier ;
18810: LD_ADDR_EXP 62
18814: PUSH
18815: LD_EXP 62
18819: PUSH
18820: LD_VAR 0 2
18824: DIFF
18825: ST_TO_ADDR
// if old_identifier in legionVehicles then
18826: LD_VAR 0 2
18830: PUSH
18831: LD_EXP 55
18835: IN
18836: IFFALSE 18854
// legionVehicles := legionVehicles diff old_identifier ;
18838: LD_ADDR_EXP 55
18842: PUSH
18843: LD_EXP 55
18847: PUSH
18848: LD_VAR 0 2
18852: DIFF
18853: ST_TO_ADDR
// if old_identifier in russianVehicles then
18854: LD_VAR 0 2
18858: PUSH
18859: LD_EXP 61
18863: IN
18864: IFFALSE 18882
// russianVehicles := russianVehicles diff old_identifier ;
18866: LD_ADDR_EXP 61
18870: PUSH
18871: LD_EXP 61
18875: PUSH
18876: LD_VAR 0 2
18880: DIFF
18881: ST_TO_ADDR
// end ;
18882: PPOPN 4
18884: END
// on SailEvent ( event ) do begin case event of 1 :
18885: LD_VAR 0 1
18889: PUSH
18890: LD_INT 1
18892: DOUBLE
18893: EQUAL
18894: IFTRUE 18898
18896: GO 19045
18898: POP
// begin PlaceSeeing ( 118 , 180 , 1 , - 15 ) ;
18899: LD_INT 118
18901: PPUSH
18902: LD_INT 180
18904: PPUSH
18905: LD_INT 1
18907: PPUSH
18908: LD_INT 15
18910: NEG
18911: PPUSH
18912: CALL_OW 330
// RemoveSeeing ( 118 , 180 , 1 ) ;
18916: LD_INT 118
18918: PPUSH
18919: LD_INT 180
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 331
// PlaceSeeing ( 76 , 133 , 1 , - 15 ) ;
18929: LD_INT 76
18931: PPUSH
18932: LD_INT 133
18934: PPUSH
18935: LD_INT 1
18937: PPUSH
18938: LD_INT 15
18940: NEG
18941: PPUSH
18942: CALL_OW 330
// RemoveSeeing ( 76 , 133 , 1 ) ;
18946: LD_INT 76
18948: PPUSH
18949: LD_INT 133
18951: PPUSH
18952: LD_INT 1
18954: PPUSH
18955: CALL_OW 331
// if not skip then
18959: LD_EXP 104
18963: NOT
18964: IFFALSE 19043
// begin wait ( 0 0$4.3 ) ;
18966: LD_INT 150
18968: PPUSH
18969: CALL_OW 67
// CenterOnXY ( 118 , 180 ) ;
18973: LD_INT 118
18975: PPUSH
18976: LD_INT 180
18978: PPUSH
18979: CALL_OW 84
// wait ( 0 0$2 ) ;
18983: LD_INT 70
18985: PPUSH
18986: CALL_OW 67
// CenterOnXY ( 76 , 133 ) ;
18990: LD_INT 76
18992: PPUSH
18993: LD_INT 133
18995: PPUSH
18996: CALL_OW 84
// wait ( 0 0$1.3 ) ;
19000: LD_INT 46
19002: PPUSH
19003: CALL_OW 67
// if IsInUnit ( JMM ) then
19007: LD_EXP 1
19011: PPUSH
19012: CALL_OW 310
19016: IFFALSE 19034
// CenterOnUnits ( IsInUnit ( JMM ) ) else
19018: LD_EXP 1
19022: PPUSH
19023: CALL_OW 310
19027: PPUSH
19028: CALL_OW 85
19032: GO 19043
// CenterOnUnits ( JMM ) ;
19034: LD_EXP 1
19038: PPUSH
19039: CALL_OW 85
// end ; end ; 2 :
19043: GO 19170
19045: LD_INT 2
19047: DOUBLE
19048: EQUAL
19049: IFTRUE 19053
19051: GO 19169
19053: POP
// begin wait ( 0 0$2 ) ;
19054: LD_INT 70
19056: PPUSH
19057: CALL_OW 67
// RevealFogArea ( 1 , RevealArea1 ) ;
19061: LD_INT 1
19063: PPUSH
19064: LD_INT 3
19066: PPUSH
19067: CALL_OW 332
// RevealFogArea ( 1 , RevealArea2 ) ;
19071: LD_INT 1
19073: PPUSH
19074: LD_INT 4
19076: PPUSH
19077: CALL_OW 332
// RevealFogArea ( 1 , RevealArea3 ) ;
19081: LD_INT 1
19083: PPUSH
19084: LD_INT 5
19086: PPUSH
19087: CALL_OW 332
// if not skip then
19091: LD_EXP 104
19095: NOT
19096: IFFALSE 19167
// begin CenterOnXY ( 171 , 81 ) ;
19098: LD_INT 171
19100: PPUSH
19101: LD_INT 81
19103: PPUSH
19104: CALL_OW 84
// wait ( 0 0$2 ) ;
19108: LD_INT 70
19110: PPUSH
19111: CALL_OW 67
// CenterOnXY ( 162 , 36 ) ;
19115: LD_INT 162
19117: PPUSH
19118: LD_INT 36
19120: PPUSH
19121: CALL_OW 84
// wait ( 0 0$2 ) ;
19125: LD_INT 70
19127: PPUSH
19128: CALL_OW 67
// CenterOnXY ( 75 , 16 ) ;
19132: LD_INT 75
19134: PPUSH
19135: LD_INT 16
19137: PPUSH
19138: CALL_OW 84
// wait ( 0 0$1.3 ) ;
19142: LD_INT 46
19144: PPUSH
19145: CALL_OW 67
// CenterNowOnUnits ( [ Powell , JMM ] ) ;
19149: LD_EXP 17
19153: PUSH
19154: LD_EXP 1
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PPUSH
19163: CALL_OW 87
// end ; end ; end ;
19167: GO 19170
19169: POP
// end ;
19170: PPOPN 1
19172: END
// on DialogueSkipped ( i ) do begin if cinematics then
19173: LD_EXP 103
19177: IFFALSE 19187
// skip = true ;
19179: LD_ADDR_EXP 104
19183: PUSH
19184: LD_INT 1
19186: ST_TO_ADDR
// end ; end_of_file
19187: PPOPN 1
19189: END
// every 3 3$0 do
19190: GO 19192
19192: DISABLE
// begin enable ;
19193: ENABLE
// LegionTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
19194: LD_ADDR_EXP 87
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 3
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 1
19211: PPUSH
19212: LD_INT 2
19214: PPUSH
19215: CALL_OW 12
19219: ARRAY
19220: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
19221: LD_INT 22
19223: PUSH
19224: LD_INT 8
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 21
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PPUSH
19245: CALL_OW 69
19249: PUSH
19250: LD_INT 1
19252: GREATER
19253: IFFALSE 19284
// RussianTarget = [ 1 , 8 ] [ Rand ( 1 , 2 ) ] else
19255: LD_ADDR_EXP 89
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: LD_INT 8
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: PPUSH
19273: LD_INT 2
19275: PPUSH
19276: CALL_OW 12
19280: ARRAY
19281: ST_TO_ADDR
19282: GO 19292
// RussianTarget = 1 ;
19284: LD_ADDR_EXP 89
19288: PUSH
19289: LD_INT 1
19291: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) > 1 then
19292: LD_INT 22
19294: PUSH
19295: LD_INT 8
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 21
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PPUSH
19316: CALL_OW 69
19320: PUSH
19321: LD_INT 1
19323: GREATER
19324: IFFALSE 19359
// AllianceTarget = [ 1 , 3 , 8 ] [ Rand ( 1 , 3 ) ] else
19326: LD_ADDR_EXP 88
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: LD_INT 3
19336: PUSH
19337: LD_INT 8
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: PPUSH
19348: LD_INT 3
19350: PPUSH
19351: CALL_OW 12
19355: ARRAY
19356: ST_TO_ADDR
19357: GO 19386
// AllianceTarget = [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
19359: LD_ADDR_EXP 88
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 3
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PPUSH
19377: LD_INT 2
19379: PPUSH
19380: CALL_OW 12
19384: ARRAY
19385: ST_TO_ADDR
// end ;
19386: END
// every 0 0$1 trigger powellBuildBase = 1 do var i , powellPeople , engs ;
19387: LD_EXP 68
19391: PUSH
19392: LD_INT 1
19394: EQUAL
19395: IFFALSE 19757
19397: GO 19399
19399: DISABLE
19400: LD_INT 0
19402: PPUSH
19403: PPUSH
19404: PPUSH
// begin for i = 1 to 4 do
19405: LD_ADDR_VAR 0 1
19409: PUSH
19410: DOUBLE
19411: LD_INT 1
19413: DEC
19414: ST_TO_ADDR
19415: LD_INT 4
19417: PUSH
19418: FOR_TO
19419: IFFALSE 19459
// begin AddComEnterUnit ( amUnitsAttack [ i ] , AmFact ) ;
19421: LD_EXP 66
19425: PUSH
19426: LD_VAR 0 1
19430: ARRAY
19431: PPUSH
19432: LD_INT 85
19434: PPUSH
19435: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 3 ) ;
19439: LD_EXP 66
19443: PUSH
19444: LD_VAR 0 1
19448: ARRAY
19449: PPUSH
19450: LD_INT 3
19452: PPUSH
19453: CALL_OW 183
// end ;
19457: GO 19418
19459: POP
19460: POP
// engs := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) ;
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_INT 22
19468: PUSH
19469: LD_INT 4
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 25
19478: PUSH
19479: LD_INT 2
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PPUSH
19490: CALL_OW 69
19494: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19495: LD_INT 35
19497: PPUSH
19498: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
19502: LD_ADDR_VAR 0 2
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_INT 4
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 69
19535: ST_TO_ADDR
// ComEnterUnit ( NearestUnitToUnit ( powellPeople , PowellCargo ) , PowellCargo ) ;
19536: LD_VAR 0 2
19540: PPUSH
19541: LD_INT 235
19543: PPUSH
19544: CALL_OW 74
19548: PPUSH
19549: LD_INT 235
19551: PPUSH
19552: CALL_OW 120
// SetResourceVisibility ( 30 , 49 , 4 ) ;
19556: LD_INT 30
19558: PPUSH
19559: LD_INT 49
19561: PPUSH
19562: LD_INT 4
19564: PPUSH
19565: CALL_OW 441
// AddComUpgradeLab ( AmLab , b_lab_weapon ) ;
19569: LD_INT 91
19571: PPUSH
19572: LD_INT 10
19574: PPUSH
19575: CALL_OW 207
// AddComUpgradeLab ( AmLab , b_lab_siberium ) ;
19579: LD_INT 91
19581: PPUSH
19582: LD_INT 11
19584: PPUSH
19585: CALL_OW 207
// ComBuild ( engs , b_siberite_mine , 30 , 49 , 1 ) ;
19589: LD_VAR 0 3
19593: PPUSH
19594: LD_INT 30
19596: PPUSH
19597: LD_INT 30
19599: PPUSH
19600: LD_INT 49
19602: PPUSH
19603: LD_INT 1
19605: PPUSH
19606: CALL_OW 145
// AddComBuild ( engs , b_bunker , 55 , 56 , 4 ) ;
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_INT 32
19617: PPUSH
19618: LD_INT 55
19620: PPUSH
19621: LD_INT 56
19623: PPUSH
19624: LD_INT 4
19626: PPUSH
19627: CALL_OW 205
// AddComBuild ( engs , b_bunker , 63 , 71 , 4 ) ;
19631: LD_VAR 0 3
19635: PPUSH
19636: LD_INT 32
19638: PPUSH
19639: LD_INT 63
19641: PPUSH
19642: LD_INT 71
19644: PPUSH
19645: LD_INT 4
19647: PPUSH
19648: CALL_OW 205
// AddComBuild ( engs , b_siberite_power , 40 , 72 , 4 ) ;
19652: LD_VAR 0 3
19656: PPUSH
19657: LD_INT 28
19659: PPUSH
19660: LD_INT 40
19662: PPUSH
19663: LD_INT 72
19665: PPUSH
19666: LD_INT 4
19668: PPUSH
19669: CALL_OW 205
// AddComBuild ( engs , b_solar_power , 45 , 73 , 4 ) ;
19673: LD_VAR 0 3
19677: PPUSH
19678: LD_INT 27
19680: PPUSH
19681: LD_INT 45
19683: PPUSH
19684: LD_INT 73
19686: PPUSH
19687: LD_INT 4
19689: PPUSH
19690: CALL_OW 205
// AddComBuild ( engs , b_ext_rocket , 37 , 50 , 2 ) ;
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_INT 18
19701: PPUSH
19702: LD_INT 37
19704: PPUSH
19705: LD_INT 50
19707: PPUSH
19708: LD_INT 2
19710: PPUSH
19711: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 41 , 51 , 3 ) ;
19715: LD_VAR 0 3
19719: PPUSH
19720: LD_INT 17
19722: PPUSH
19723: LD_INT 41
19725: PPUSH
19726: LD_INT 51
19728: PPUSH
19729: LD_INT 3
19731: PPUSH
19732: CALL_OW 205
// AddComBuild ( engs , b_ext_siberium , 38 , 54 , 1 ) ;
19736: LD_VAR 0 3
19740: PPUSH
19741: LD_INT 21
19743: PPUSH
19744: LD_INT 38
19746: PPUSH
19747: LD_INT 54
19749: PPUSH
19750: LD_INT 1
19752: PPUSH
19753: CALL_OW 205
// end ;
19757: PPOPN 3
19759: END
// every 1 trigger IsInArea ( PowellCargo , CargoParking ) and powellUnloadCargo = 1 do
19760: LD_INT 235
19762: PPUSH
19763: LD_INT 10
19765: PPUSH
19766: CALL_OW 308
19770: PUSH
19771: LD_EXP 70
19775: PUSH
19776: LD_INT 1
19778: EQUAL
19779: AND
19780: IFFALSE 19804
19782: GO 19784
19784: DISABLE
// begin ComExitVehicle ( UnitsInside ( PowellCargo ) ) ;
19785: LD_INT 235
19787: PPUSH
19788: CALL_OW 313
19792: PPUSH
19793: CALL_OW 121
// ComUpgrade ( PowellDepot ) ;
19797: LD_INT 84
19799: PPUSH
19800: CALL_OW 146
// end ;
19804: END
// every 0 0$1 trigger legionAI = 1 do
19805: LD_EXP 84
19809: PUSH
19810: LD_INT 1
19812: EQUAL
19813: IFFALSE 19876
19815: GO 19817
19817: DISABLE
// begin enable ;
19818: ENABLE
// RepairAndRebuildBase ( 8 , ArDep2 , LegionBaseArea , legionDestroyedBuilds ) ;
19819: LD_INT 8
19821: PPUSH
19822: LD_INT 99
19824: PPUSH
19825: LD_INT 11
19827: PPUSH
19828: LD_EXP 93
19832: PPUSH
19833: CALL 9659 0 4
// HealUnitInBase ( 8 , LegionHealArea , LegionBaseArea , [ ArLab1 ] ) ;
19837: LD_INT 8
19839: PPUSH
19840: LD_INT 20
19842: PPUSH
19843: LD_INT 11
19845: PPUSH
19846: LD_INT 252
19848: PUSH
19849: EMPTY
19850: LIST
19851: PPUSH
19852: CALL 10068 0 4
// AttackNearBuildings ( 8 , 1 ) ;
19856: LD_INT 8
19858: PPUSH
19859: LD_INT 1
19861: PPUSH
19862: CALL 11477 0 2
// EnterBunkerOrBarrack ( 8 , LegionBaseArea ) ;
19866: LD_INT 8
19868: PPUSH
19869: LD_INT 11
19871: PPUSH
19872: CALL 11049 0 2
// end ;
19876: END
// every 3 3$0 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ ] and IsOk ( ArFact ) and GetSide ( ArFact ) = 8 do
19877: LD_EXP 84
19881: PUSH
19882: LD_INT 1
19884: EQUAL
19885: PUSH
19886: LD_EXP 101
19890: PUSH
19891: LD_INT 1
19893: GREATEREQUAL
19894: AND
19895: PUSH
19896: LD_EXP 55
19900: PUSH
19901: EMPTY
19902: EQUAL
19903: AND
19904: PUSH
19905: LD_INT 117
19907: PPUSH
19908: CALL_OW 302
19912: AND
19913: PUSH
19914: LD_INT 117
19916: PPUSH
19917: CALL_OW 255
19921: PUSH
19922: LD_INT 8
19924: EQUAL
19925: AND
19926: IFFALSE 19989
19928: GO 19930
19930: DISABLE
// begin enable ;
19931: ENABLE
// BuildingVehicle ( 8 , ArFact , [ 5 , 6 , 7 ] [ Difficulty ] , [ 27 , 28 , 25 , 29 ] , 3 , 2 , 14 ) ;
19932: LD_INT 8
19934: PPUSH
19935: LD_INT 117
19937: PPUSH
19938: LD_INT 5
19940: PUSH
19941: LD_INT 6
19943: PUSH
19944: LD_INT 7
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: PUSH
19952: LD_OWVAR 67
19956: ARRAY
19957: PPUSH
19958: LD_INT 27
19960: PUSH
19961: LD_INT 28
19963: PUSH
19964: LD_INT 25
19966: PUSH
19967: LD_INT 29
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: PPUSH
19976: LD_INT 3
19978: PPUSH
19979: LD_INT 2
19981: PPUSH
19982: LD_INT 14
19984: PPUSH
19985: CALL 11707 0 7
// end ;
19989: END
// every 0 0$1 trigger legionAI = 1 and missionStage >= 1 and LegionVehicles = [ 5 , 6 , 7 ] [ Difficulty ] do
19990: LD_EXP 84
19994: PUSH
19995: LD_INT 1
19997: EQUAL
19998: PUSH
19999: LD_EXP 101
20003: PUSH
20004: LD_INT 1
20006: GREATEREQUAL
20007: AND
20008: PUSH
20009: LD_EXP 55
20013: PUSH
20014: LD_INT 5
20016: PUSH
20017: LD_INT 6
20019: PUSH
20020: LD_INT 7
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: LIST
20027: PUSH
20028: LD_OWVAR 67
20032: ARRAY
20033: EQUAL
20034: AND
20035: IFFALSE 20053
20037: GO 20039
20039: DISABLE
// begin enable ;
20040: ENABLE
// AttackVehicles ( LegionTarget , 1 ) ;
20041: LD_EXP 87
20045: PPUSH
20046: LD_INT 1
20048: PPUSH
20049: CALL 11781 0 2
// end ;
20053: END
// every 0 0$1 do
20054: GO 20056
20056: DISABLE
// begin enable ;
20057: ENABLE
// TimeLapsersAI ( 6 , 1 ) ;
20058: LD_INT 6
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL 12716 0 2
// end ;
20068: END
// every 0 0$1 trigger RussianAI = 1 do
20069: LD_EXP 86
20073: PUSH
20074: LD_INT 1
20076: EQUAL
20077: IFFALSE 20171
20079: GO 20081
20081: DISABLE
// begin enable ;
20082: ENABLE
// RepairAndRebuildBase ( 3 , RuDep1 , RussianBaseArea , russianDestroyedBuilds ) ;
20083: LD_INT 3
20085: PPUSH
20086: LD_INT 26
20088: PPUSH
20089: LD_INT 21
20091: PPUSH
20092: LD_EXP 94
20096: PPUSH
20097: CALL 9659 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBaseArea , [ RusLab1 , RusLab2 ] ) ;
20101: LD_INT 3
20103: PPUSH
20104: LD_INT 22
20106: PPUSH
20107: LD_INT 21
20109: PPUSH
20110: LD_INT 2
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL 10068 0 4
// AttackNearBuildings ( 3 , 1 ) ;
20124: LD_INT 3
20126: PPUSH
20127: LD_INT 1
20129: PPUSH
20130: CALL 11477 0 2
// TimeLapsersAI ( 3 , RussianTarget ) ;
20134: LD_INT 3
20136: PPUSH
20137: LD_EXP 89
20141: PPUSH
20142: CALL 12716 0 2
// EnterBunkerOrBarrack ( 3 , RussianBaseArea ) ;
20146: LD_INT 3
20148: PPUSH
20149: LD_INT 21
20151: PPUSH
20152: CALL 11049 0 2
// CraneRepairBuild ( 3 , RussianBaseArea , russianDestroyedBuilds ) ;
20156: LD_INT 3
20158: PPUSH
20159: LD_INT 21
20161: PPUSH
20162: LD_EXP 94
20166: PPUSH
20167: CALL 10794 0 3
// end ;
20171: END
// every 3 3$0 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ ] and IsOk ( RusFact2 ) and GetSide ( RusFact2 ) = 3 and IsOk ( RusFact1 ) and GetSide ( RusFact1 ) = 3 do
20172: LD_EXP 86
20176: PUSH
20177: LD_INT 1
20179: EQUAL
20180: PUSH
20181: LD_EXP 101
20185: PUSH
20186: LD_INT 3
20188: GREATEREQUAL
20189: AND
20190: PUSH
20191: LD_EXP 61
20195: PUSH
20196: EMPTY
20197: EQUAL
20198: AND
20199: PUSH
20200: LD_INT 10
20202: PPUSH
20203: CALL_OW 302
20207: AND
20208: PUSH
20209: LD_INT 10
20211: PPUSH
20212: CALL_OW 255
20216: PUSH
20217: LD_INT 3
20219: EQUAL
20220: AND
20221: PUSH
20222: LD_INT 4
20224: PPUSH
20225: CALL_OW 302
20229: AND
20230: PUSH
20231: LD_INT 4
20233: PPUSH
20234: CALL_OW 255
20238: PUSH
20239: LD_INT 3
20241: EQUAL
20242: AND
20243: IFFALSE 20363
20245: GO 20247
20247: DISABLE
// begin enable ;
20248: ENABLE
// BuildingVehicle ( 3 , RusFact1 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20249: LD_INT 3
20251: PPUSH
20252: LD_INT 4
20254: PPUSH
20255: LD_INT 4
20257: PUSH
20258: LD_INT 5
20260: PUSH
20261: LD_INT 6
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: PUSH
20269: LD_OWVAR 67
20273: ARRAY
20274: PPUSH
20275: LD_INT 45
20277: PUSH
20278: LD_INT 46
20280: PUSH
20281: LD_INT 47
20283: PUSH
20284: LD_INT 49
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: PPUSH
20293: LD_INT 3
20295: PPUSH
20296: LD_INT 3
20298: PPUSH
20299: LD_INT 24
20301: PPUSH
20302: CALL 11707 0 7
// BuildingVehicle ( 3 , RusFact2 , [ 4 , 5 , 6 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20306: LD_INT 3
20308: PPUSH
20309: LD_INT 10
20311: PPUSH
20312: LD_INT 4
20314: PUSH
20315: LD_INT 5
20317: PUSH
20318: LD_INT 6
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: LIST
20325: PUSH
20326: LD_OWVAR 67
20330: ARRAY
20331: PPUSH
20332: LD_INT 45
20334: PUSH
20335: LD_INT 46
20337: PUSH
20338: LD_INT 47
20340: PUSH
20341: LD_INT 49
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: PPUSH
20350: LD_INT 3
20352: PPUSH
20353: LD_INT 3
20355: PPUSH
20356: LD_INT 24
20358: PPUSH
20359: CALL 11707 0 7
// end ;
20363: END
// every 0 0$1 trigger RussianAI = 1 and missionStage >= 3 and RussianVehicles = [ 8 , 10 , 12 ] [ Difficulty ] do
20364: LD_EXP 86
20368: PUSH
20369: LD_INT 1
20371: EQUAL
20372: PUSH
20373: LD_EXP 101
20377: PUSH
20378: LD_INT 3
20380: GREATEREQUAL
20381: AND
20382: PUSH
20383: LD_EXP 61
20387: PUSH
20388: LD_INT 8
20390: PUSH
20391: LD_INT 10
20393: PUSH
20394: LD_INT 12
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: PUSH
20402: LD_OWVAR 67
20406: ARRAY
20407: EQUAL
20408: AND
20409: IFFALSE 20521
20411: GO 20413
20413: DISABLE
// begin enable ;
20414: ENABLE
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 48 ] ] , [ f_not , [ f_hastask ] ] ] ) , [ rutp1 , rutp2 ] [ Rand ( 1 , 2 ) ] ) ;
20415: LD_INT 22
20417: PUSH
20418: LD_INT 3
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 21
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 3
20437: PUSH
20438: LD_INT 34
20440: PUSH
20441: LD_INT 48
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 3
20454: PUSH
20455: LD_INT 60
20457: PUSH
20458: EMPTY
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: PPUSH
20476: LD_INT 24
20478: PUSH
20479: LD_INT 25
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: PPUSH
20489: LD_INT 2
20491: PPUSH
20492: CALL_OW 12
20496: ARRAY
20497: PPUSH
20498: CALL_OW 120
// wait ( 0 0$20 ) ;
20502: LD_INT 700
20504: PPUSH
20505: CALL_OW 67
// AttackVehicles ( RussianTarget , 2 ) ;
20509: LD_EXP 89
20513: PPUSH
20514: LD_INT 2
20516: PPUSH
20517: CALL 11781 0 2
// end ;
20521: END
// every 0 0$1 trigger AllianceAI = 1 do
20522: LD_EXP 85
20526: PUSH
20527: LD_INT 1
20529: EQUAL
20530: IFFALSE 20613
20532: GO 20534
20534: DISABLE
// begin enable ;
20535: ENABLE
// RepairAndRebuildBase ( 7 , AllDep , AllianceBaseArea , allianceDestroyedBuilds ) ;
20536: LD_INT 7
20538: PPUSH
20539: LD_INT 45
20541: PPUSH
20542: LD_INT 23
20544: PPUSH
20545: LD_EXP 95
20549: PPUSH
20550: CALL 9659 0 4
// HealUnitInBase ( 7 , AllianceHealArea , AllianceBaseArea , [ AllLabA , AllLabR1 , AllLabR2 ] ) ;
20554: LD_INT 7
20556: PPUSH
20557: LD_INT 24
20559: PPUSH
20560: LD_INT 23
20562: PPUSH
20563: LD_INT 46
20565: PUSH
20566: LD_INT 39
20568: PUSH
20569: LD_INT 133
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: PPUSH
20577: CALL 10068 0 4
// AttackNearBuildings ( 7 , 1 ) ;
20581: LD_INT 7
20583: PPUSH
20584: LD_INT 1
20586: PPUSH
20587: CALL 11477 0 2
// TimeLapsersAI ( 7 , AllianceTarget ) ;
20591: LD_INT 7
20593: PPUSH
20594: LD_EXP 88
20598: PPUSH
20599: CALL 12716 0 2
// EnterBunkerOrBarrack ( 7 , AllianceBaseArea ) ;
20603: LD_INT 7
20605: PPUSH
20606: LD_INT 23
20608: PPUSH
20609: CALL 11049 0 2
// end ;
20613: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ ] and IsOk ( Allfab1 ) and GetSide ( Allfab1 ) = 7 and IsOk ( Allfab2 ) and GetSide ( Allfab2 ) = 7 do
20614: LD_EXP 85
20618: PUSH
20619: LD_INT 1
20621: EQUAL
20622: PUSH
20623: LD_EXP 101
20627: PUSH
20628: LD_INT 4
20630: GREATEREQUAL
20631: AND
20632: PUSH
20633: LD_EXP 62
20637: PUSH
20638: EMPTY
20639: EQUAL
20640: AND
20641: PUSH
20642: LD_INT 156
20644: PPUSH
20645: CALL_OW 302
20649: AND
20650: PUSH
20651: LD_INT 156
20653: PPUSH
20654: CALL_OW 255
20658: PUSH
20659: LD_INT 7
20661: EQUAL
20662: AND
20663: PUSH
20664: LD_INT 162
20666: PPUSH
20667: CALL_OW 302
20671: AND
20672: PUSH
20673: LD_INT 162
20675: PPUSH
20676: CALL_OW 255
20680: PUSH
20681: LD_INT 7
20683: EQUAL
20684: AND
20685: IFFALSE 20801
20687: GO 20689
20689: DISABLE
// begin enable ;
20690: ENABLE
// BuildingVehicle ( 3 , Allfab1 , [ 3 , 3 , 4 ] [ Difficulty ] , [ 9 , 10 , 7 ] , 3 , 2 , 5 ) ;
20691: LD_INT 3
20693: PPUSH
20694: LD_INT 156
20696: PPUSH
20697: LD_INT 3
20699: PUSH
20700: LD_INT 3
20702: PUSH
20703: LD_INT 4
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: PUSH
20711: LD_OWVAR 67
20715: ARRAY
20716: PPUSH
20717: LD_INT 9
20719: PUSH
20720: LD_INT 10
20722: PUSH
20723: LD_INT 7
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: PPUSH
20731: LD_INT 3
20733: PPUSH
20734: LD_INT 2
20736: PPUSH
20737: LD_INT 5
20739: PPUSH
20740: CALL 11707 0 7
// BuildingVehicle ( 3 , Allfab2 , [ 2 , 2 , 3 ] [ Difficulty ] , [ 45 , 46 , 47 , 49 ] , 3 , 3 , 24 ) ;
20744: LD_INT 3
20746: PPUSH
20747: LD_INT 162
20749: PPUSH
20750: LD_INT 2
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 3
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: PUSH
20764: LD_OWVAR 67
20768: ARRAY
20769: PPUSH
20770: LD_INT 45
20772: PUSH
20773: LD_INT 46
20775: PUSH
20776: LD_INT 47
20778: PUSH
20779: LD_INT 49
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: PPUSH
20788: LD_INT 3
20790: PPUSH
20791: LD_INT 3
20793: PPUSH
20794: LD_INT 24
20796: PPUSH
20797: CALL 11707 0 7
// end ;
20801: END
// every 0 0$1 trigger AllianceAI = 1 and missionStage >= 4 and AllianceVehicles = [ 5 , 5 , 7 ] [ Difficulty ] do var i ;
20802: LD_EXP 85
20806: PUSH
20807: LD_INT 1
20809: EQUAL
20810: PUSH
20811: LD_EXP 101
20815: PUSH
20816: LD_INT 4
20818: GREATEREQUAL
20819: AND
20820: PUSH
20821: LD_EXP 62
20825: PUSH
20826: LD_INT 5
20828: PUSH
20829: LD_INT 5
20831: PUSH
20832: LD_INT 7
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: PUSH
20840: LD_OWVAR 67
20844: ARRAY
20845: EQUAL
20846: AND
20847: IFFALSE 20906
20849: GO 20851
20851: DISABLE
20852: LD_INT 0
20854: PPUSH
// begin for i in AllianceVehicles do
20855: LD_ADDR_VAR 0 1
20859: PUSH
20860: LD_EXP 62
20864: PUSH
20865: FOR_IN
20866: IFFALSE 20891
// TeleportUnit ( i , 117 , 112 , 10 , true ) ;
20868: LD_VAR 0 1
20872: PPUSH
20873: LD_INT 117
20875: PPUSH
20876: LD_INT 112
20878: PPUSH
20879: LD_INT 10
20881: PPUSH
20882: LD_INT 1
20884: PPUSH
20885: CALL_OW 483
20889: GO 20865
20891: POP
20892: POP
// AttackVehicles ( AllianceTarget , 3 ) ;
20893: LD_EXP 88
20897: PPUSH
20898: LD_INT 3
20900: PPUSH
20901: CALL 11781 0 2
// enable ;
20905: ENABLE
// end ;
20906: PPOPN 1
20908: END
// every 3 3$0 trigger AllianceAI = 1 and missionStage >= 4 do var tmp ;
20909: LD_EXP 85
20913: PUSH
20914: LD_INT 1
20916: EQUAL
20917: PUSH
20918: LD_EXP 101
20922: PUSH
20923: LD_INT 4
20925: GREATEREQUAL
20926: AND
20927: IFFALSE 21108
20929: GO 20931
20931: DISABLE
20932: LD_INT 0
20934: PPUSH
// begin enable ;
20935: ENABLE
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] , [ f_btype , 21 ] ] ] ) ;
20936: LD_ADDR_VAR 0 1
20940: PUSH
20941: LD_INT 22
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 21
20953: PUSH
20954: LD_INT 3
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: LD_INT 30
20966: PUSH
20967: LD_INT 30
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 30
20976: PUSH
20977: LD_INT 28
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 30
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 69
21009: ST_TO_ADDR
// tmp = tmp ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] ] ) ;
21010: LD_ADDR_VAR 0 1
21014: PUSH
21015: LD_VAR 0 1
21019: PUSH
21020: LD_INT 22
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 21
21032: PUSH
21033: LD_INT 2
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 32
21042: PUSH
21043: LD_INT 3
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: PPUSH
21055: CALL_OW 69
21059: ADD
21060: ST_TO_ADDR
// if tmp = [ ] then
21061: LD_VAR 0 1
21065: PUSH
21066: EMPTY
21067: EQUAL
21068: IFFALSE 21072
// exit ;
21070: GO 21108
// if tmp > 0 then
21072: LD_VAR 0 1
21076: PUSH
21077: LD_INT 0
21079: GREATER
21080: IFFALSE 21108
// SetLives ( tmp [ Rand ( 1 , tmp ) ] , 0 ) ;
21082: LD_VAR 0 1
21086: PUSH
21087: LD_INT 1
21089: PPUSH
21090: LD_VAR 0 1
21094: PPUSH
21095: CALL_OW 12
21099: ARRAY
21100: PPUSH
21101: LD_INT 0
21103: PPUSH
21104: CALL_OW 234
// end ;
21108: PPOPN 1
21110: END
// every 0 0$1 trigger LegionAI = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
21111: LD_EXP 84
21115: PUSH
21116: LD_INT 1
21118: EQUAL
21119: PUSH
21120: LD_INT 22
21122: PUSH
21123: LD_INT 8
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 21
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: LD_INT 61
21145: PUSH
21146: EMPTY
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: PPUSH
21158: CALL_OW 69
21162: PUSH
21163: LD_INT 0
21165: GREATER
21166: AND
21167: IFFALSE 21251
21169: GO 21171
21171: DISABLE
21172: LD_INT 0
21174: PPUSH
// begin enable ;
21175: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
21176: LD_ADDR_VAR 0 1
21180: PUSH
21181: LD_INT 22
21183: PUSH
21184: LD_INT 8
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 2
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 33
21203: PUSH
21204: LD_INT 2
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 3
21213: PUSH
21214: LD_INT 61
21216: PUSH
21217: EMPTY
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: PUSH
21235: FOR_IN
21236: IFFALSE 21249
// Connect ( i ) ;
21238: LD_VAR 0 1
21242: PPUSH
21243: CALL 13031 0 1
21247: GO 21235
21249: POP
21250: POP
// end ;
21251: PPOPN 1
21253: END
// every 0 0$1 trigger AllianceAI = 1 and FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_linked ] ] ] ) > 0 do var i ;
21254: LD_EXP 85
21258: PUSH
21259: LD_INT 1
21261: EQUAL
21262: PUSH
21263: LD_INT 22
21265: PUSH
21266: LD_INT 7
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 21
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 3
21285: PUSH
21286: LD_INT 61
21288: PUSH
21289: EMPTY
21290: LIST
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: LIST
21300: PPUSH
21301: CALL_OW 69
21305: PUSH
21306: LD_INT 0
21308: GREATER
21309: AND
21310: IFFALSE 21394
21312: GO 21314
21314: DISABLE
21315: LD_INT 0
21317: PPUSH
// begin enable ;
21318: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
21319: LD_ADDR_VAR 0 1
21323: PUSH
21324: LD_INT 22
21326: PUSH
21327: LD_INT 7
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 21
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 33
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 3
21356: PUSH
21357: LD_INT 61
21359: PUSH
21360: EMPTY
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: PPUSH
21373: CALL_OW 69
21377: PUSH
21378: FOR_IN
21379: IFFALSE 21392
// Connect ( i ) ;
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL 13031 0 1
21390: GO 21378
21392: POP
21393: POP
// end ; end_of_file
21394: PPOPN 1
21396: END
// every 0 0$1 trigger timerStatus = 1 do
21397: LD_EXP 96
21401: PUSH
21402: LD_INT 1
21404: EQUAL
21405: IFFALSE 21442
21407: GO 21409
21409: DISABLE
// begin enable ;
21410: ENABLE
// display_strings = [ #Am15-1 , timeAction ] ;
21411: LD_ADDR_OWVAR 47
21415: PUSH
21416: LD_STRING #Am15-1
21418: PUSH
21419: LD_EXP 97
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: ST_TO_ADDR
// timeAction = timeAction + 0 0$01 ;
21428: LD_ADDR_EXP 97
21432: PUSH
21433: LD_EXP 97
21437: PUSH
21438: LD_INT 35
21440: PLUS
21441: ST_TO_ADDR
// end ; end_of_file
21442: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 0 and russianEscape = 0 do
21443: LD_EXP 72
21447: PUSH
21448: LD_INT 1
21450: EQUAL
21451: PUSH
21452: LD_EXP 101
21456: PUSH
21457: LD_INT 0
21459: EQUAL
21460: AND
21461: PUSH
21462: LD_EXP 90
21466: PUSH
21467: LD_INT 0
21469: EQUAL
21470: AND
21471: IFFALSE 21531
21473: GO 21475
21475: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 2 , 4 ) , 10 , 3 , 3 , 3 , [ 42 , 43 , 44 ] , [ ] , [ ] , 1 ) ;
21476: LD_INT 2
21478: PPUSH
21479: LD_INT 6
21481: PPUSH
21482: LD_INT 2
21484: PPUSH
21485: LD_INT 4
21487: PPUSH
21488: CALL_OW 12
21492: PPUSH
21493: LD_INT 10
21495: PPUSH
21496: LD_INT 3
21498: PPUSH
21499: LD_INT 3
21501: PPUSH
21502: LD_INT 3
21504: PPUSH
21505: LD_INT 42
21507: PUSH
21508: LD_INT 43
21510: PUSH
21511: LD_INT 44
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: PPUSH
21519: EMPTY
21520: PPUSH
21521: EMPTY
21522: PPUSH
21523: LD_INT 1
21525: PPUSH
21526: CALL 7861 0 11
// enable ;
21530: ENABLE
// end ;
21531: END
// every 1 1$30 trigger startAttacks = 1 and missionStage = 1 and russianEscape = 0 do
21532: LD_EXP 72
21536: PUSH
21537: LD_INT 1
21539: EQUAL
21540: PUSH
21541: LD_EXP 101
21545: PUSH
21546: LD_INT 1
21548: EQUAL
21549: AND
21550: PUSH
21551: LD_EXP 90
21555: PUSH
21556: LD_INT 0
21558: EQUAL
21559: AND
21560: IFFALSE 21620
21562: GO 21564
21564: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 6 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21565: LD_INT 2
21567: PPUSH
21568: LD_INT 6
21570: PPUSH
21571: LD_INT 4
21573: PPUSH
21574: LD_INT 6
21576: PPUSH
21577: CALL_OW 12
21581: PPUSH
21582: LD_INT 10
21584: PPUSH
21585: LD_INT 3
21587: PPUSH
21588: LD_INT 3
21590: PPUSH
21591: LD_INT 3
21593: PPUSH
21594: LD_INT 44
21596: PUSH
21597: LD_INT 45
21599: PUSH
21600: LD_INT 46
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: PPUSH
21608: EMPTY
21609: PPUSH
21610: EMPTY
21611: PPUSH
21612: LD_INT 1
21614: PPUSH
21615: CALL 7861 0 11
// enable ;
21619: ENABLE
// end ;
21620: END
// every 3 3$30 trigger startAttacks = 1 and missionStage = 3 and russianEscape = 0 do
21621: LD_EXP 72
21625: PUSH
21626: LD_INT 1
21628: EQUAL
21629: PUSH
21630: LD_EXP 101
21634: PUSH
21635: LD_INT 3
21637: EQUAL
21638: AND
21639: PUSH
21640: LD_EXP 90
21644: PUSH
21645: LD_INT 0
21647: EQUAL
21648: AND
21649: IFFALSE 21713
21651: GO 21653
21653: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 44 , 45 , 46 , 47 ] , [ ] , [ ] , 1 ) ;
21654: LD_INT 2
21656: PPUSH
21657: LD_INT 6
21659: PPUSH
21660: LD_INT 4
21662: PPUSH
21663: LD_INT 8
21665: PPUSH
21666: CALL_OW 12
21670: PPUSH
21671: LD_INT 10
21673: PPUSH
21674: LD_INT 3
21676: PPUSH
21677: LD_INT 3
21679: PPUSH
21680: LD_INT 3
21682: PPUSH
21683: LD_INT 44
21685: PUSH
21686: LD_INT 45
21688: PUSH
21689: LD_INT 46
21691: PUSH
21692: LD_INT 47
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: PPUSH
21701: EMPTY
21702: PPUSH
21703: EMPTY
21704: PPUSH
21705: LD_INT 1
21707: PPUSH
21708: CALL 7861 0 11
// enable ;
21712: ENABLE
// end ;
21713: END
// every 5 5$30 trigger startAttacks = 1 and missionStage >= 4 and russianEscape = 0 do
21714: LD_EXP 72
21718: PUSH
21719: LD_INT 1
21721: EQUAL
21722: PUSH
21723: LD_EXP 101
21727: PUSH
21728: LD_INT 4
21730: GREATEREQUAL
21731: AND
21732: PUSH
21733: LD_EXP 90
21737: PUSH
21738: LD_INT 0
21740: EQUAL
21741: AND
21742: IFFALSE 21802
21744: GO 21746
21746: DISABLE
// begin RespawnAttackVehicle ( RussianSpawnAttack , 6 , rand ( 4 , 8 ) , 10 , 3 , 3 , 3 , [ 46 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
21747: LD_INT 2
21749: PPUSH
21750: LD_INT 6
21752: PPUSH
21753: LD_INT 4
21755: PPUSH
21756: LD_INT 8
21758: PPUSH
21759: CALL_OW 12
21763: PPUSH
21764: LD_INT 10
21766: PPUSH
21767: LD_INT 3
21769: PPUSH
21770: LD_INT 3
21772: PPUSH
21773: LD_INT 3
21775: PPUSH
21776: LD_INT 46
21778: PUSH
21779: LD_INT 47
21781: PUSH
21782: LD_INT 49
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: PPUSH
21790: EMPTY
21791: PPUSH
21792: EMPTY
21793: PPUSH
21794: LD_INT 1
21796: PPUSH
21797: CALL 7861 0 11
// enable ;
21801: ENABLE
// end ; end_of_file
21802: END
// every 1 do var i , dec1 , options , people ;
21803: GO 21805
21805: DISABLE
21806: LD_INT 0
21808: PPUSH
21809: PPUSH
21810: PPUSH
21811: PPUSH
// begin TeleportExit ( rutp1 , 92 , 172 ) ;
21812: LD_INT 24
21814: PPUSH
21815: LD_INT 92
21817: PPUSH
21818: LD_INT 172
21820: PPUSH
21821: CALL_OW 243
// TeleportExit ( rutp2 , 103 , 74 ) ;
21825: LD_INT 25
21827: PPUSH
21828: LD_INT 103
21830: PPUSH
21831: LD_INT 74
21833: PPUSH
21834: CALL_OW 243
// SetClass ( Simms , 4 ) ;
21838: LD_EXP 48
21842: PPUSH
21843: LD_INT 4
21845: PPUSH
21846: CALL_OW 336
// Video ( true ) ;
21850: LD_INT 1
21852: PPUSH
21853: CALL 6884 0 1
// cinematics := true ;
21857: LD_ADDR_EXP 103
21861: PUSH
21862: LD_INT 1
21864: ST_TO_ADDR
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
21865: LD_EXP 24
21869: PUSH
21870: LD_EXP 25
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PPUSH
21879: LD_INT 60
21881: PPUSH
21882: LD_INT 75
21884: PPUSH
21885: CALL_OW 111
// if KappaStatus = 0 then
21889: LD_EXP 81
21893: PUSH
21894: LD_INT 0
21896: EQUAL
21897: IFFALSE 22186
// begin CenterNowOnUnits ( NewJMMVeh ) ;
21899: LD_EXP 24
21903: PPUSH
21904: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
21908: LD_EXP 1
21912: PPUSH
21913: LD_STRING D1T-JMM-1
21915: PPUSH
21916: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21920: LD_EXP 24
21924: PPUSH
21925: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
21929: LD_EXP 17
21933: PPUSH
21934: LD_STRING D1T-Pow-1
21936: PPUSH
21937: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21941: LD_EXP 24
21945: PPUSH
21946: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
21950: LD_EXP 1
21954: PPUSH
21955: LD_STRING D1T-JMM-2
21957: PPUSH
21958: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21962: LD_EXP 24
21966: PPUSH
21967: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
21971: LD_EXP 17
21975: PPUSH
21976: LD_STRING D1T-Pow-2
21978: PPUSH
21979: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
21983: LD_EXP 24
21987: PPUSH
21988: CALL_OW 87
// Say ( JMM , D1T-JMM-3 ) ;
21992: LD_EXP 1
21996: PPUSH
21997: LD_STRING D1T-JMM-3
21999: PPUSH
22000: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22004: LD_EXP 24
22008: PPUSH
22009: CALL_OW 87
// Say ( Powell , D1T-Pow-3 ) ;
22013: LD_EXP 17
22017: PPUSH
22018: LD_STRING D1T-Pow-3
22020: PPUSH
22021: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22025: LD_EXP 24
22029: PPUSH
22030: CALL_OW 87
// if not JMMGirlVeh = [ ] then
22034: LD_EXP 79
22038: PUSH
22039: EMPTY
22040: EQUAL
22041: NOT
22042: IFFALSE 22142
// begin if JMMGirl = 1 then
22044: LD_EXP 80
22048: PUSH
22049: LD_INT 1
22051: EQUAL
22052: IFFALSE 22066
// Say ( Joan , D1T-Joan-3 ) ;
22054: LD_EXP 2
22058: PPUSH
22059: LD_STRING D1T-Joan-3
22061: PPUSH
22062: CALL_OW 88
// if JMMGirl = 2 then
22066: LD_EXP 80
22070: PUSH
22071: LD_INT 2
22073: EQUAL
22074: IFFALSE 22088
// Say ( Lisa , D1T-Lisa-3 ) ;
22076: LD_EXP 4
22080: PPUSH
22081: LD_STRING D1T-Lisa-3
22083: PPUSH
22084: CALL_OW 88
// if JMMGirl = 3 then
22088: LD_EXP 80
22092: PUSH
22093: LD_INT 3
22095: EQUAL
22096: IFFALSE 22110
// Say ( Connie , D1T-Con-3 ) ;
22098: LD_EXP 16
22102: PPUSH
22103: LD_STRING D1T-Con-3
22105: PPUSH
22106: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22110: LD_EXP 24
22114: PPUSH
22115: CALL_OW 87
// Say ( Powell , D1T-Pow-4 ) ;
22119: LD_EXP 17
22123: PPUSH
22124: LD_STRING D1T-Pow-4
22126: PPUSH
22127: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22131: LD_EXP 24
22135: PPUSH
22136: CALL_OW 87
// end else
22140: GO 22184
// begin Say ( JMM , D1T-JMM-4 ) ;
22142: LD_EXP 1
22146: PPUSH
22147: LD_STRING D1T-JMM-4
22149: PPUSH
22150: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22154: LD_EXP 24
22158: PPUSH
22159: CALL_OW 87
// Say ( Powell , D1T-Pow-5 ) ;
22163: LD_EXP 17
22167: PPUSH
22168: LD_STRING D1T-Pow-5
22170: PPUSH
22171: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22175: LD_EXP 24
22179: PPUSH
22180: CALL_OW 87
// end ; end else
22184: GO 22270
// begin CenterNowOnUnits ( NewJMMVeh ) ;
22186: LD_EXP 24
22190: PPUSH
22191: CALL_OW 87
// Say ( JMM , D1T-JMM-1 ) ;
22195: LD_EXP 1
22199: PPUSH
22200: LD_STRING D1T-JMM-1
22202: PPUSH
22203: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22207: LD_EXP 24
22211: PPUSH
22212: CALL_OW 87
// Say ( Powell , D1T-Pow-1 ) ;
22216: LD_EXP 17
22220: PPUSH
22221: LD_STRING D1T-Pow-1
22223: PPUSH
22224: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22228: LD_EXP 24
22232: PPUSH
22233: CALL_OW 87
// Say ( JMM , D1T-JMM-2 ) ;
22237: LD_EXP 1
22241: PPUSH
22242: LD_STRING D1T-JMM-2
22244: PPUSH
22245: CALL_OW 88
// CenterNowOnUnits ( NewJMMVeh ) ;
22249: LD_EXP 24
22253: PPUSH
22254: CALL_OW 87
// Say ( Powell , D1T-Pow-2 ) ;
22258: LD_EXP 17
22262: PPUSH
22263: LD_STRING D1T-Pow-2
22265: PPUSH
22266: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
22270: LD_INT 35
22272: PPUSH
22273: CALL_OW 67
// ComMoveXY ( [ NewJMMVeh , NewJMMGirlVeh ] , 60 , 75 ) ;
22277: LD_EXP 24
22281: PUSH
22282: LD_EXP 25
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PPUSH
22291: LD_INT 60
22293: PPUSH
22294: LD_INT 75
22296: PPUSH
22297: CALL_OW 111
// CenterNowOnUnits ( NewJMMVeh ) ;
22301: LD_EXP 24
22305: PPUSH
22306: CALL_OW 87
// until GetDistUnits ( NewJMMVeh , Powell ) < 20 or not HasTask ( NewJMMVeh ) ;
22310: LD_EXP 24
22314: PPUSH
22315: LD_EXP 17
22319: PPUSH
22320: CALL_OW 296
22324: PUSH
22325: LD_INT 20
22327: LESS
22328: PUSH
22329: LD_EXP 24
22333: PPUSH
22334: CALL_OW 314
22338: NOT
22339: OR
22340: IFFALSE 22270
// ComExitVehicle ( JMM ) ;
22342: LD_EXP 1
22346: PPUSH
22347: CALL_OW 121
// repeat wait ( 0 0$2 ) ;
22351: LD_INT 70
22353: PPUSH
22354: CALL_OW 67
// ComMoveUnit ( JMM , Powell ) ;
22358: LD_EXP 1
22362: PPUSH
22363: LD_EXP 17
22367: PPUSH
22368: CALL_OW 112
// CenterOnUnits ( JMM ) ;
22372: LD_EXP 1
22376: PPUSH
22377: CALL_OW 85
// until GetDistUnits ( JMM , Powell ) < 6 ;
22381: LD_EXP 1
22385: PPUSH
22386: LD_EXP 17
22390: PPUSH
22391: CALL_OW 296
22395: PUSH
22396: LD_INT 6
22398: LESS
22399: IFFALSE 22351
// CenterNowOnUnits ( [ JMM , Powell ] ) ;
22401: LD_EXP 1
22405: PUSH
22406: LD_EXP 17
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PPUSH
22415: CALL_OW 87
// ComTurnUnit ( JMM , Powell ) ;
22419: LD_EXP 1
22423: PPUSH
22424: LD_EXP 17
22428: PPUSH
22429: CALL_OW 119
// ComTurnUnit ( Powell , JMM ) ;
22433: LD_EXP 17
22437: PPUSH
22438: LD_EXP 1
22442: PPUSH
22443: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
22447: LD_EXP 1
22451: PPUSH
22452: LD_STRING D1-JMM-1
22454: PPUSH
22455: CALL_OW 88
// RaiseSailEvent ( 2 ) ;
22459: LD_INT 2
22461: PPUSH
22462: CALL_OW 427
// skip := false ;
22466: LD_ADDR_EXP 104
22470: PUSH
22471: LD_INT 0
22473: ST_TO_ADDR
// Say ( Powell , D1-Pow-1 ) ;
22474: LD_EXP 17
22478: PPUSH
22479: LD_STRING D1-Pow-1
22481: PPUSH
22482: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
22486: LD_EXP 1
22490: PPUSH
22491: LD_STRING D1-JMM-2
22493: PPUSH
22494: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
22498: LD_EXP 17
22502: PPUSH
22503: LD_STRING D1-Pow-2
22505: PPUSH
22506: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
22510: LD_EXP 1
22514: PPUSH
22515: LD_STRING D1-JMM-3
22517: PPUSH
22518: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
22522: LD_EXP 17
22526: PPUSH
22527: LD_STRING D1-Pow-3
22529: PPUSH
22530: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
22534: LD_EXP 1
22538: PPUSH
22539: LD_STRING D1-JMM-4
22541: PPUSH
22542: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
22546: LD_EXP 17
22550: PPUSH
22551: LD_STRING D1-Pow-4
22553: PPUSH
22554: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
22558: LD_EXP 1
22562: PPUSH
22563: LD_STRING D1-JMM-5
22565: PPUSH
22566: CALL_OW 88
// RaiseSailEvent ( 1 ) ;
22570: LD_INT 1
22572: PPUSH
22573: CALL_OW 427
// skip := false ;
22577: LD_ADDR_EXP 104
22581: PUSH
22582: LD_INT 0
22584: ST_TO_ADDR
// Say ( Powell , D1-Pow-5 ) ;
22585: LD_EXP 17
22589: PPUSH
22590: LD_STRING D1-Pow-5
22592: PPUSH
22593: CALL_OW 88
// options = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
22597: LD_ADDR_VAR 0 3
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: LD_INT 3
22610: PUSH
22611: LD_INT 4
22613: PUSH
22614: LD_INT 5
22616: PUSH
22617: LD_INT 6
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: ST_TO_ADDR
// dec1 = SelectiveQuery ( Q1 , options ) ;
22628: LD_ADDR_VAR 0 2
22632: PUSH
22633: LD_STRING Q1
22635: PPUSH
22636: LD_VAR 0 3
22640: PPUSH
22641: CALL_OW 98
22645: ST_TO_ADDR
// repeat dec1 = SelectiveQuery ( Q1 , options ) ;
22646: LD_ADDR_VAR 0 2
22650: PUSH
22651: LD_STRING Q1
22653: PPUSH
22654: LD_VAR 0 3
22658: PPUSH
22659: CALL_OW 98
22663: ST_TO_ADDR
// options = options diff dec1 ;
22664: LD_ADDR_VAR 0 3
22668: PUSH
22669: LD_VAR 0 3
22673: PUSH
22674: LD_VAR 0 2
22678: DIFF
22679: ST_TO_ADDR
// ResolveQuery ( dec1 , options ) ;
22680: LD_VAR 0 2
22684: PPUSH
22685: LD_VAR 0 3
22689: PPUSH
22690: CALL 24278 0 2
// until ( dec1 in [ 5 , 6 ] ) or options = 2 ;
22694: LD_VAR 0 2
22698: PUSH
22699: LD_INT 5
22701: PUSH
22702: LD_INT 6
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: IN
22709: PUSH
22710: LD_VAR 0 3
22714: PUSH
22715: LD_INT 2
22717: EQUAL
22718: OR
22719: IFFALSE 22646
// if not ( dec1 in [ 5 , 6 ] ) then
22721: LD_VAR 0 2
22725: PUSH
22726: LD_INT 5
22728: PUSH
22729: LD_INT 6
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: IN
22736: NOT
22737: IFFALSE 22780
// begin dec1 = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_STRING Q1a
22746: PPUSH
22747: LD_INT 1
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PPUSH
22757: CALL_OW 98
22761: ST_TO_ADDR
// ResolveQuery ( dec1 + 4 , options ) ;
22762: LD_VAR 0 2
22766: PUSH
22767: LD_INT 4
22769: PLUS
22770: PPUSH
22771: LD_VAR 0 3
22775: PPUSH
22776: CALL 24278 0 2
// end ; if not JMMGirlVeh = [ ] then
22780: LD_EXP 79
22784: PUSH
22785: EMPTY
22786: EQUAL
22787: NOT
22788: IFFALSE 23154
// begin ComExitVehicle ( UnitsInside ( NewJMMGirlVeh ) ) ;
22790: LD_EXP 25
22794: PPUSH
22795: CALL_OW 313
22799: PPUSH
22800: CALL_OW 121
// wait ( 0 0$1 ) ;
22804: LD_INT 35
22806: PPUSH
22807: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22811: LD_INT 35
22813: PPUSH
22814: CALL_OW 67
// if JMMGirl = 1 then
22818: LD_EXP 80
22822: PUSH
22823: LD_INT 1
22825: EQUAL
22826: IFFALSE 22842
// ComMoveUnit ( JMM , Joan ) ;
22828: LD_EXP 1
22832: PPUSH
22833: LD_EXP 2
22837: PPUSH
22838: CALL_OW 112
// if JMMGirl = 2 then
22842: LD_EXP 80
22846: PUSH
22847: LD_INT 2
22849: EQUAL
22850: IFFALSE 22866
// ComMoveUnit ( JMM , Lisa ) ;
22852: LD_EXP 1
22856: PPUSH
22857: LD_EXP 4
22861: PPUSH
22862: CALL_OW 112
// if JMMGirl = 3 then
22866: LD_EXP 80
22870: PUSH
22871: LD_INT 3
22873: EQUAL
22874: IFFALSE 22890
// ComMoveUnit ( JMM , Connie ) ;
22876: LD_EXP 1
22880: PPUSH
22881: LD_EXP 16
22885: PPUSH
22886: CALL_OW 112
// until GetDistUnits ( JMM , Joan ) < 6 or GetDistUnits ( JMM , Lisa ) < 6 or GetDistUnits ( JMM , Connie ) < 6 ;
22890: LD_EXP 1
22894: PPUSH
22895: LD_EXP 2
22899: PPUSH
22900: CALL_OW 296
22904: PUSH
22905: LD_INT 6
22907: LESS
22908: PUSH
22909: LD_EXP 1
22913: PPUSH
22914: LD_EXP 4
22918: PPUSH
22919: CALL_OW 296
22923: PUSH
22924: LD_INT 6
22926: LESS
22927: OR
22928: PUSH
22929: LD_EXP 1
22933: PPUSH
22934: LD_EXP 16
22938: PPUSH
22939: CALL_OW 296
22943: PUSH
22944: LD_INT 6
22946: LESS
22947: OR
22948: IFFALSE 22811
// CenterNowOnUnits ( JMM ) ;
22950: LD_EXP 1
22954: PPUSH
22955: CALL_OW 87
// case JMMGirl of 1 :
22959: LD_EXP 80
22963: PUSH
22964: LD_INT 1
22966: DOUBLE
22967: EQUAL
22968: IFTRUE 22972
22970: GO 23027
22972: POP
// begin ComTurnUnit ( JMM , Joan ) ;
22973: LD_EXP 1
22977: PPUSH
22978: LD_EXP 2
22982: PPUSH
22983: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
22987: LD_EXP 2
22991: PPUSH
22992: LD_EXP 1
22996: PPUSH
22997: CALL_OW 119
// Say ( Joan , D3W-Joan-1 ) ;
23001: LD_EXP 2
23005: PPUSH
23006: LD_STRING D3W-Joan-1
23008: PPUSH
23009: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23013: LD_EXP 1
23017: PPUSH
23018: LD_STRING D3W-JMM-1
23020: PPUSH
23021: CALL_OW 88
// end ; 2 :
23025: GO 23154
23027: LD_INT 2
23029: DOUBLE
23030: EQUAL
23031: IFTRUE 23035
23033: GO 23090
23035: POP
// begin ComTurnUnit ( JMM , Lisa ) ;
23036: LD_EXP 1
23040: PPUSH
23041: LD_EXP 4
23045: PPUSH
23046: CALL_OW 119
// ComTurnUnit ( Lisa , JMM ) ;
23050: LD_EXP 4
23054: PPUSH
23055: LD_EXP 1
23059: PPUSH
23060: CALL_OW 119
// Say ( Lisa , D3W-Lisa-1 ) ;
23064: LD_EXP 4
23068: PPUSH
23069: LD_STRING D3W-Lisa-1
23071: PPUSH
23072: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23076: LD_EXP 1
23080: PPUSH
23081: LD_STRING D3W-JMM-1
23083: PPUSH
23084: CALL_OW 88
// end ; 3 :
23088: GO 23154
23090: LD_INT 3
23092: DOUBLE
23093: EQUAL
23094: IFTRUE 23098
23096: GO 23153
23098: POP
// begin ComTurnUnit ( JMM , Connie ) ;
23099: LD_EXP 1
23103: PPUSH
23104: LD_EXP 16
23108: PPUSH
23109: CALL_OW 119
// ComTurnUnit ( Connie , JMM ) ;
23113: LD_EXP 16
23117: PPUSH
23118: LD_EXP 1
23122: PPUSH
23123: CALL_OW 119
// Say ( Connie , D3W-Con-1 ) ;
23127: LD_EXP 16
23131: PPUSH
23132: LD_STRING D3W-Con-1
23134: PPUSH
23135: CALL_OW 88
// Say ( JMM , D3W-JMM-1 ) ;
23139: LD_EXP 1
23143: PPUSH
23144: LD_STRING D3W-JMM-1
23146: PPUSH
23147: CALL_OW 88
// end ; end ;
23151: GO 23154
23153: POP
// end ; people = 0 ;
23154: LD_ADDR_VAR 0 4
23158: PUSH
23159: LD_INT 0
23161: ST_TO_ADDR
// if Lisa and people < 5 then
23162: LD_EXP 4
23166: PUSH
23167: LD_VAR 0 4
23171: PUSH
23172: LD_INT 5
23174: LESS
23175: AND
23176: IFFALSE 23208
// begin people = people + 1 ;
23178: LD_ADDR_VAR 0 4
23182: PUSH
23183: LD_VAR 0 4
23187: PUSH
23188: LD_INT 1
23190: PLUS
23191: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Lisa ;
23192: LD_ADDR_EXP 67
23196: PUSH
23197: LD_EXP 67
23201: PUSH
23202: LD_EXP 4
23206: ADD
23207: ST_TO_ADDR
// end ; if Donaldson and people < 5 then
23208: LD_EXP 5
23212: PUSH
23213: LD_VAR 0 4
23217: PUSH
23218: LD_INT 5
23220: LESS
23221: AND
23222: IFFALSE 23254
// begin people = people + 1 ;
23224: LD_ADDR_VAR 0 4
23228: PUSH
23229: LD_VAR 0 4
23233: PUSH
23234: LD_INT 1
23236: PLUS
23237: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Donaldson ;
23238: LD_ADDR_EXP 67
23242: PUSH
23243: LD_EXP 67
23247: PUSH
23248: LD_EXP 5
23252: ADD
23253: ST_TO_ADDR
// end ; if Bobby and people < 5 then
23254: LD_EXP 6
23258: PUSH
23259: LD_VAR 0 4
23263: PUSH
23264: LD_INT 5
23266: LESS
23267: AND
23268: IFFALSE 23300
// begin people = people + 1 ;
23270: LD_ADDR_VAR 0 4
23274: PUSH
23275: LD_VAR 0 4
23279: PUSH
23280: LD_INT 1
23282: PLUS
23283: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Bobby ;
23284: LD_ADDR_EXP 67
23288: PUSH
23289: LD_EXP 67
23293: PUSH
23294: LD_EXP 6
23298: ADD
23299: ST_TO_ADDR
// end ; if Cyrus and people < 5 then
23300: LD_EXP 7
23304: PUSH
23305: LD_VAR 0 4
23309: PUSH
23310: LD_INT 5
23312: LESS
23313: AND
23314: IFFALSE 23346
// begin people = people + 1 ;
23316: LD_ADDR_VAR 0 4
23320: PUSH
23321: LD_VAR 0 4
23325: PUSH
23326: LD_INT 1
23328: PLUS
23329: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cyrus ;
23330: LD_ADDR_EXP 67
23334: PUSH
23335: LD_EXP 67
23339: PUSH
23340: LD_EXP 7
23344: ADD
23345: ST_TO_ADDR
// end ; if Denis and people < 5 then
23346: LD_EXP 8
23350: PUSH
23351: LD_VAR 0 4
23355: PUSH
23356: LD_INT 5
23358: LESS
23359: AND
23360: IFFALSE 23392
// begin people = people + 1 ;
23362: LD_ADDR_VAR 0 4
23366: PUSH
23367: LD_VAR 0 4
23371: PUSH
23372: LD_INT 1
23374: PLUS
23375: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Denis ;
23376: LD_ADDR_EXP 67
23380: PUSH
23381: LD_EXP 67
23385: PUSH
23386: LD_EXP 8
23390: ADD
23391: ST_TO_ADDR
// end ; if Brown and people < 5 then
23392: LD_EXP 9
23396: PUSH
23397: LD_VAR 0 4
23401: PUSH
23402: LD_INT 5
23404: LESS
23405: AND
23406: IFFALSE 23438
// begin people = people + 1 ;
23408: LD_ADDR_VAR 0 4
23412: PUSH
23413: LD_VAR 0 4
23417: PUSH
23418: LD_INT 1
23420: PLUS
23421: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Brown ;
23422: LD_ADDR_EXP 67
23426: PUSH
23427: LD_EXP 67
23431: PUSH
23432: LD_EXP 9
23436: ADD
23437: ST_TO_ADDR
// end ; if Gladstone and people < 5 then
23438: LD_EXP 10
23442: PUSH
23443: LD_VAR 0 4
23447: PUSH
23448: LD_INT 5
23450: LESS
23451: AND
23452: IFFALSE 23484
// begin people = people + 1 ;
23454: LD_ADDR_VAR 0 4
23458: PUSH
23459: LD_VAR 0 4
23463: PUSH
23464: LD_INT 1
23466: PLUS
23467: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gladstone ;
23468: LD_ADDR_EXP 67
23472: PUSH
23473: LD_EXP 67
23477: PUSH
23478: LD_EXP 10
23482: ADD
23483: ST_TO_ADDR
// end ; if Houten and people < 5 then
23484: LD_EXP 11
23488: PUSH
23489: LD_VAR 0 4
23493: PUSH
23494: LD_INT 5
23496: LESS
23497: AND
23498: IFFALSE 23530
// begin people = people + 1 ;
23500: LD_ADDR_VAR 0 4
23504: PUSH
23505: LD_VAR 0 4
23509: PUSH
23510: LD_INT 1
23512: PLUS
23513: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Houten ;
23514: LD_ADDR_EXP 67
23518: PUSH
23519: LD_EXP 67
23523: PUSH
23524: LD_EXP 11
23528: ADD
23529: ST_TO_ADDR
// end ; if Cornel and people < 5 then
23530: LD_EXP 12
23534: PUSH
23535: LD_VAR 0 4
23539: PUSH
23540: LD_INT 5
23542: LESS
23543: AND
23544: IFFALSE 23576
// begin people = people + 1 ;
23546: LD_ADDR_VAR 0 4
23550: PUSH
23551: LD_VAR 0 4
23555: PUSH
23556: LD_INT 1
23558: PLUS
23559: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Cornel ;
23560: LD_ADDR_EXP 67
23564: PUSH
23565: LD_EXP 67
23569: PUSH
23570: LD_EXP 12
23574: ADD
23575: ST_TO_ADDR
// end ; if Gary and people < 5 then
23576: LD_EXP 13
23580: PUSH
23581: LD_VAR 0 4
23585: PUSH
23586: LD_INT 5
23588: LESS
23589: AND
23590: IFFALSE 23622
// begin people = people + 1 ;
23592: LD_ADDR_VAR 0 4
23596: PUSH
23597: LD_VAR 0 4
23601: PUSH
23602: LD_INT 1
23604: PLUS
23605: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Gary ;
23606: LD_ADDR_EXP 67
23610: PUSH
23611: LD_EXP 67
23615: PUSH
23616: LD_EXP 13
23620: ADD
23621: ST_TO_ADDR
// end ; if Frank and people < 5 then
23622: LD_EXP 14
23626: PUSH
23627: LD_VAR 0 4
23631: PUSH
23632: LD_INT 5
23634: LESS
23635: AND
23636: IFFALSE 23668
// begin people = people + 1 ;
23638: LD_ADDR_VAR 0 4
23642: PUSH
23643: LD_VAR 0 4
23647: PUSH
23648: LD_INT 1
23650: PLUS
23651: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Frank ;
23652: LD_ADDR_EXP 67
23656: PUSH
23657: LD_EXP 67
23661: PUSH
23662: LD_EXP 14
23666: ADD
23667: ST_TO_ADDR
// end ; if Kikuchi and people < 5 then
23668: LD_EXP 15
23672: PUSH
23673: LD_VAR 0 4
23677: PUSH
23678: LD_INT 5
23680: LESS
23681: AND
23682: IFFALSE 23714
// begin people = people + 1 ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_VAR 0 4
23693: PUSH
23694: LD_INT 1
23696: PLUS
23697: ST_TO_ADDR
// amUnitsForJMM = amUnitsForJMM ^ Kikuchi ;
23698: LD_ADDR_EXP 67
23702: PUSH
23703: LD_EXP 67
23707: PUSH
23708: LD_EXP 15
23712: ADD
23713: ST_TO_ADDR
// end ; if UnitFilter ( amUnitsForJMM , [ f_class , 2 ] ) = 0 then
23714: LD_EXP 67
23718: PPUSH
23719: LD_INT 25
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PPUSH
23729: CALL_OW 72
23733: PUSH
23734: LD_INT 0
23736: EQUAL
23737: IFFALSE 23755
// SetClass ( amUnitsForJMM [ 1 ] , 2 ) ;
23739: LD_EXP 67
23743: PUSH
23744: LD_INT 1
23746: ARRAY
23747: PPUSH
23748: LD_INT 2
23750: PPUSH
23751: CALL_OW 336
// for i = 1 to 5 do
23755: LD_ADDR_VAR 0 1
23759: PUSH
23760: DOUBLE
23761: LD_INT 1
23763: DEC
23764: ST_TO_ADDR
23765: LD_INT 5
23767: PUSH
23768: FOR_TO
23769: IFFALSE 23820
// begin ComMoveXY ( amUnitsForJMM [ i ] , 62 + i , 95 ) ;
23771: LD_EXP 67
23775: PUSH
23776: LD_VAR 0 1
23780: ARRAY
23781: PPUSH
23782: LD_INT 62
23784: PUSH
23785: LD_VAR 0 1
23789: PLUS
23790: PPUSH
23791: LD_INT 95
23793: PPUSH
23794: CALL_OW 111
// AddComTurnUnit ( amUnitsForJMM [ i ] , JMM ) ;
23798: LD_EXP 67
23802: PUSH
23803: LD_VAR 0 1
23807: ARRAY
23808: PPUSH
23809: LD_EXP 1
23813: PPUSH
23814: CALL_OW 179
// end ;
23818: GO 23768
23820: POP
23821: POP
// repeat wait ( 0 0$1 ) ;
23822: LD_INT 35
23824: PPUSH
23825: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
23829: LD_EXP 1
23833: PPUSH
23834: CALL_OW 87
// ComMoveXY ( JMM , 66 , 98 ) ;
23838: LD_EXP 1
23842: PPUSH
23843: LD_INT 66
23845: PPUSH
23846: LD_INT 98
23848: PPUSH
23849: CALL_OW 111
// ComMoveXY ( [ Joan , Lisa , Connie ] , 67 , 98 ) ;
23853: LD_EXP 2
23857: PUSH
23858: LD_EXP 4
23862: PUSH
23863: LD_EXP 16
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: PPUSH
23873: LD_INT 67
23875: PPUSH
23876: LD_INT 98
23878: PPUSH
23879: CALL_OW 111
// AddComTurnXY ( [ JMM , Joan , Lisa , Connie ] , 63 , 95 ) ;
23883: LD_EXP 1
23887: PUSH
23888: LD_EXP 2
23892: PUSH
23893: LD_EXP 4
23897: PUSH
23898: LD_EXP 16
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: PPUSH
23909: LD_INT 63
23911: PPUSH
23912: LD_INT 95
23914: PPUSH
23915: CALL_OW 178
// until IsInArea ( JMM , PowellHillArea ) and FilterUnitsInArea ( PowellHillArea , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 5 ;
23919: LD_EXP 1
23923: PPUSH
23924: LD_INT 9
23926: PPUSH
23927: CALL_OW 308
23931: PUSH
23932: LD_INT 9
23934: PPUSH
23935: LD_INT 22
23937: PUSH
23938: LD_INT 4
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 21
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 70
23963: PUSH
23964: LD_INT 5
23966: EQUAL
23967: AND
23968: IFFALSE 23822
// wait ( 0 0$3 ) ;
23970: LD_INT 105
23972: PPUSH
23973: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23977: LD_INT 35
23979: PPUSH
23980: CALL_OW 67
// until IsInArea ( JMM , PowellHillArea ) ;
23984: LD_EXP 1
23988: PPUSH
23989: LD_INT 9
23991: PPUSH
23992: CALL_OW 308
23996: IFFALSE 23977
// for i in amUnitsForJMM do
23998: LD_ADDR_VAR 0 1
24002: PUSH
24003: LD_EXP 67
24007: PUSH
24008: FOR_IN
24009: IFFALSE 24025
// SetSide ( i , 1 ) ;
24011: LD_VAR 0 1
24015: PPUSH
24016: LD_INT 1
24018: PPUSH
24019: CALL_OW 235
24023: GO 24008
24025: POP
24026: POP
// if IsInArea ( Lisa , PowellHillArea ) then
24027: LD_EXP 4
24031: PPUSH
24032: LD_INT 9
24034: PPUSH
24035: CALL_OW 308
24039: IFFALSE 24053
// Say ( Lisa , D3nW-Lisa-1 ) ;
24041: LD_EXP 4
24045: PPUSH
24046: LD_STRING D3nW-Lisa-1
24048: PPUSH
24049: CALL_OW 88
// if IsInArea ( Cyrus , PowellHillArea ) then
24053: LD_EXP 7
24057: PPUSH
24058: LD_INT 9
24060: PPUSH
24061: CALL_OW 308
24065: IFFALSE 24079
// Say ( Cyrus , D3nW-Cyrus-1 ) ;
24067: LD_EXP 7
24071: PPUSH
24072: LD_STRING D3nW-Cyrus-1
24074: PPUSH
24075: CALL_OW 88
// if IsInArea ( Bobby , PowellHillArea ) then
24079: LD_EXP 6
24083: PPUSH
24084: LD_INT 9
24086: PPUSH
24087: CALL_OW 308
24091: IFFALSE 24105
// Say ( Bobby , D3nW-Bobby-1 ) ;
24093: LD_EXP 6
24097: PPUSH
24098: LD_STRING D3nW-Bobby-1
24100: PPUSH
24101: CALL_OW 88
// if IsInArea ( Gary , PowellHillArea ) then
24105: LD_EXP 13
24109: PPUSH
24110: LD_INT 9
24112: PPUSH
24113: CALL_OW 308
24117: IFFALSE 24131
// Say ( Gary , D3nW-Gary-1 ) ;
24119: LD_EXP 13
24123: PPUSH
24124: LD_STRING D3nW-Gary-1
24126: PPUSH
24127: CALL_OW 88
// if IsInArea ( Donaldson , PowellHillArea ) then
24131: LD_EXP 5
24135: PPUSH
24136: LD_INT 9
24138: PPUSH
24139: CALL_OW 308
24143: IFFALSE 24157
// Say ( Donaldson , D3nW-Don-1 ) ;
24145: LD_EXP 5
24149: PPUSH
24150: LD_STRING D3nW-Don-1
24152: PPUSH
24153: CALL_OW 88
// if IsInArea ( Cornel , PowellHillArea ) then
24157: LD_EXP 12
24161: PPUSH
24162: LD_INT 9
24164: PPUSH
24165: CALL_OW 308
24169: IFFALSE 24183
// Say ( Cornel , D3nW-Corn-1 ) ;
24171: LD_EXP 12
24175: PPUSH
24176: LD_STRING D3nW-Corn-1
24178: PPUSH
24179: CALL_OW 88
// if IsInArea ( Frank , PowellHillArea ) then
24183: LD_EXP 14
24187: PPUSH
24188: LD_INT 9
24190: PPUSH
24191: CALL_OW 308
24195: IFFALSE 24209
// Say ( Frank , D3nW-Frank-1 ) ;
24197: LD_EXP 14
24201: PPUSH
24202: LD_STRING D3nW-Frank-1
24204: PPUSH
24205: CALL_OW 88
// Say ( JMM , D3nW-JMM-1 ) ;
24209: LD_EXP 1
24213: PPUSH
24214: LD_STRING D3nW-JMM-1
24216: PPUSH
24217: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
24221: LD_EXP 1
24225: PPUSH
24226: LD_STRING D3nW-JMM-1a
24228: PPUSH
24229: CALL_OW 88
// Video ( false ) ;
24233: LD_INT 0
24235: PPUSH
24236: CALL 6884 0 1
// cinematics := false ;
24240: LD_ADDR_EXP 103
24244: PUSH
24245: LD_INT 0
24247: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
24248: LD_STRING M1
24250: PPUSH
24251: CALL_OW 337
// SaveForQuickRestart ;
24255: CALL_OW 22
// startAttacks = 1 ;
24259: LD_ADDR_EXP 72
24263: PUSH
24264: LD_INT 1
24266: ST_TO_ADDR
// powellBuildBase = 1 ;
24267: LD_ADDR_EXP 68
24271: PUSH
24272: LD_INT 1
24274: ST_TO_ADDR
// end ;
24275: PPOPN 4
24277: END
// function ResolveQuery ( question , list_of_q ) ; begin
24278: LD_INT 0
24280: PPUSH
// case question of 1 :
24281: LD_VAR 0 1
24285: PUSH
24286: LD_INT 1
24288: DOUBLE
24289: EQUAL
24290: IFTRUE 24294
24292: GO 24345
24294: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
24295: LD_EXP 1
24299: PPUSH
24300: LD_STRING D2Mot-JMM-1
24302: PPUSH
24303: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
24307: LD_EXP 17
24311: PPUSH
24312: LD_STRING D2Mot-Pow-1
24314: PPUSH
24315: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
24319: LD_EXP 1
24323: PPUSH
24324: LD_STRING D2Mot-JMM-2
24326: PPUSH
24327: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
24331: LD_EXP 17
24335: PPUSH
24336: LD_STRING D2Mot-Pow-2
24338: PPUSH
24339: CALL_OW 88
// end ; 2 :
24343: GO 24688
24345: LD_INT 2
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24429
24353: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
24354: LD_EXP 1
24358: PPUSH
24359: LD_STRING D2Rus-JMM-1
24361: PPUSH
24362: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
24366: LD_EXP 17
24370: PPUSH
24371: LD_STRING D2Rus-Pow-1
24373: PPUSH
24374: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
24378: LD_EXP 1
24382: PPUSH
24383: LD_STRING D2Rus-JMM-2
24385: PPUSH
24386: CALL_OW 88
// if not ( 3 in list_of_q ) then
24390: LD_INT 3
24392: PUSH
24393: LD_VAR 0 2
24397: IN
24398: NOT
24399: IFFALSE 24415
// Say ( Powell , D2Rus-Pow-2 ) else
24401: LD_EXP 17
24405: PPUSH
24406: LD_STRING D2Rus-Pow-2
24408: PPUSH
24409: CALL_OW 88
24413: GO 24427
// Say ( Powell , D2Rus-Pow-2a ) ;
24415: LD_EXP 17
24419: PPUSH
24420: LD_STRING D2Rus-Pow-2a
24422: PPUSH
24423: CALL_OW 88
// end ; 3 :
24427: GO 24688
24429: LD_INT 3
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24437
24435: GO 24522
24437: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
24438: LD_EXP 1
24442: PPUSH
24443: LD_STRING D2Leg-JMM-1
24445: PPUSH
24446: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
24450: LD_EXP 17
24454: PPUSH
24455: LD_STRING D2Leg-Pow-1
24457: PPUSH
24458: CALL_OW 88
// if ( 2 in list_of_q ) then
24462: LD_INT 2
24464: PUSH
24465: LD_VAR 0 2
24469: IN
24470: IFFALSE 24496
// begin Say ( JMM , D2Leg-JMM-2 ) ;
24472: LD_EXP 1
24476: PPUSH
24477: LD_STRING D2Leg-JMM-2
24479: PPUSH
24480: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
24484: LD_EXP 17
24488: PPUSH
24489: LD_STRING D2Leg-Pow-2
24491: PPUSH
24492: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
24496: LD_EXP 1
24500: PPUSH
24501: LD_STRING D2Leg-JMM-3
24503: PPUSH
24504: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
24508: LD_EXP 17
24512: PPUSH
24513: LD_STRING D2Leg-Pow-3
24515: PPUSH
24516: CALL_OW 88
// end ; 4 :
24520: GO 24688
24522: LD_INT 4
24524: DOUBLE
24525: EQUAL
24526: IFTRUE 24530
24528: GO 24605
24530: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
24531: LD_EXP 1
24535: PPUSH
24536: LD_STRING D2Ar-JMM-1
24538: PPUSH
24539: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
24543: LD_EXP 17
24547: PPUSH
24548: LD_STRING D2Ar-Pow-1
24550: PPUSH
24551: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
24555: LD_EXP 1
24559: PPUSH
24560: LD_STRING D2Ar-JMM-2
24562: PPUSH
24563: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
24567: LD_EXP 17
24571: PPUSH
24572: LD_STRING D2Ar-Pow-2
24574: PPUSH
24575: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
24579: LD_EXP 1
24583: PPUSH
24584: LD_STRING D2Ar-JMM-3
24586: PPUSH
24587: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
24591: LD_EXP 17
24595: PPUSH
24596: LD_STRING D2Ar-Pow-3
24598: PPUSH
24599: CALL_OW 88
// end ; 5 :
24603: GO 24688
24605: LD_INT 5
24607: DOUBLE
24608: EQUAL
24609: IFTRUE 24613
24611: GO 24628
24613: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
24614: LD_EXP 1
24618: PPUSH
24619: LD_STRING D2Conf-JMM-1
24621: PPUSH
24622: CALL_OW 88
// end ; 6 :
24626: GO 24688
24628: LD_INT 6
24630: DOUBLE
24631: EQUAL
24632: IFTRUE 24636
24634: GO 24687
24636: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
24637: LD_EXP 1
24641: PPUSH
24642: LD_STRING D2Com-JMM-1
24644: PPUSH
24645: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
24649: LD_EXP 17
24653: PPUSH
24654: LD_STRING D2Com-Pow-1
24656: PPUSH
24657: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
24661: LD_EXP 1
24665: PPUSH
24666: LD_STRING D2Com-JMM-2
24668: PPUSH
24669: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
24673: LD_EXP 17
24677: PPUSH
24678: LD_STRING D2Com-Pow-2
24680: PPUSH
24681: CALL_OW 88
// end ; end ;
24685: GO 24688
24687: POP
// end ;
24688: LD_VAR 0 3
24692: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and startAttacks = 1 do
24693: LD_INT 22
24695: PUSH
24696: LD_INT 4
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 21
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 3
24715: PUSH
24716: LD_INT 58
24718: PUSH
24719: EMPTY
24720: LIST
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: PPUSH
24731: CALL_OW 69
24735: PUSH
24736: LD_INT 4
24738: EQUAL
24739: PUSH
24740: LD_EXP 72
24744: PUSH
24745: LD_INT 1
24747: EQUAL
24748: AND
24749: IFFALSE 24762
24751: GO 24753
24753: DISABLE
// startAttacks = 0 ;
24754: LD_ADDR_EXP 72
24758: PUSH
24759: LD_INT 0
24761: ST_TO_ADDR
24762: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 4 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 and startAttacks = 0 and powellAttacks = 0 do var i ;
24763: LD_INT 22
24765: PUSH
24766: LD_INT 4
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 21
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 3
24785: PUSH
24786: LD_INT 58
24788: PUSH
24789: EMPTY
24790: LIST
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: PPUSH
24801: CALL_OW 69
24805: PUSH
24806: LD_INT 4
24808: EQUAL
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 6
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 21
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 24
24832: PUSH
24833: LD_INT 250
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: LIST
24844: PPUSH
24845: CALL_OW 69
24849: PUSH
24850: LD_INT 0
24852: EQUAL
24853: AND
24854: PUSH
24855: LD_EXP 72
24859: PUSH
24860: LD_INT 0
24862: EQUAL
24863: AND
24864: PUSH
24865: LD_EXP 69
24869: PUSH
24870: LD_INT 0
24872: EQUAL
24873: AND
24874: IFFALSE 25062
24876: GO 24878
24878: DISABLE
24879: LD_INT 0
24881: PPUSH
// begin powellAttacks = 1 ;
24882: LD_ADDR_EXP 69
24886: PUSH
24887: LD_INT 1
24889: ST_TO_ADDR
// InGameOn ;
24890: CALL_OW 8
// CenterNowOnUnits ( Powell ) ;
24894: LD_EXP 17
24898: PPUSH
24899: CALL_OW 87
// ComTurnXY ( POwell , 47 , 60 ) ;
24903: LD_EXP 17
24907: PPUSH
24908: LD_INT 47
24910: PPUSH
24911: LD_INT 60
24913: PPUSH
24914: CALL_OW 118
// Say ( Powell , D4-Pow-1 ) ;
24918: LD_EXP 17
24922: PPUSH
24923: LD_STRING D4-Pow-1
24925: PPUSH
24926: CALL_OW 88
// for i = 1 to amUnitsAttack do
24930: LD_ADDR_VAR 0 1
24934: PUSH
24935: DOUBLE
24936: LD_INT 1
24938: DEC
24939: ST_TO_ADDR
24940: LD_EXP 66
24944: PUSH
24945: FOR_TO
24946: IFFALSE 24991
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
24948: LD_EXP 66
24952: PUSH
24953: LD_VAR 0 1
24957: ARRAY
24958: PPUSH
24959: CALL_OW 258
24963: PUSH
24964: LD_INT 1
24966: EQUAL
24967: IFFALSE 24989
// begin Say ( amUnitsAttack [ i ] , D4-Sol1-1 ) ;
24969: LD_EXP 66
24973: PUSH
24974: LD_VAR 0 1
24978: ARRAY
24979: PPUSH
24980: LD_STRING D4-Sol1-1
24982: PPUSH
24983: CALL_OW 88
// break ;
24987: GO 24991
// end ;
24989: GO 24945
24991: POP
24992: POP
// Say ( Powell , D4-Pow-2 ) ;
24993: LD_EXP 17
24997: PPUSH
24998: LD_STRING D4-Pow-2
25000: PPUSH
25001: CALL_OW 88
// InGameOff ;
25005: CALL_OW 9
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
25009: LD_INT 22
25011: PUSH
25012: LD_INT 4
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 3
25031: PUSH
25032: LD_INT 58
25034: PUSH
25035: EMPTY
25036: LIST
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: PPUSH
25047: CALL_OW 69
25051: PPUSH
25052: LD_INT 59
25054: PPUSH
25055: LD_INT 21
25057: PPUSH
25058: CALL_OW 114
// end ;
25062: PPOPN 1
25064: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25065: LD_EXP 103
25069: NOT
25070: PUSH
25071: LD_INT 7
25073: PPUSH
25074: LD_INT 22
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 21
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PPUSH
25098: CALL_OW 70
25102: PUSH
25103: LD_INT 0
25105: GREATER
25106: AND
25107: PUSH
25108: LD_EXP 17
25112: PPUSH
25113: CALL_OW 302
25117: AND
25118: PUSH
25119: LD_EXP 71
25123: PUSH
25124: LD_INT 0
25126: EQUAL
25127: AND
25128: IFFALSE 25252
25130: GO 25132
25132: DISABLE
// begin InGameOn ;
25133: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25137: LD_INT 22
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 21
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PPUSH
25161: CALL_OW 69
25165: PPUSH
25166: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25170: LD_INT 7
25172: PPUSH
25173: LD_INT 22
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 21
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PPUSH
25197: CALL_OW 70
25201: PPUSH
25202: LD_INT 70
25204: PPUSH
25205: LD_INT 104
25207: PPUSH
25208: CALL_OW 111
// if powellWarm = 0 then
25212: LD_EXP 71
25216: PUSH
25217: LD_INT 0
25219: EQUAL
25220: IFFALSE 25248
// begin Say ( Powell , DBack1-Pow-1 ) ;
25222: LD_EXP 17
25226: PPUSH
25227: LD_STRING DBack1-Pow-1
25229: PPUSH
25230: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25234: LD_ADDR_EXP 71
25238: PUSH
25239: LD_EXP 71
25243: PUSH
25244: LD_INT 1
25246: PLUS
25247: ST_TO_ADDR
// end ; InGameOff ;
25248: CALL_OW 9
// end ;
25252: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25253: LD_EXP 103
25257: NOT
25258: PUSH
25259: LD_INT 7
25261: PPUSH
25262: LD_INT 22
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 21
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PPUSH
25286: CALL_OW 70
25290: PUSH
25291: LD_INT 0
25293: GREATER
25294: AND
25295: PUSH
25296: LD_EXP 17
25300: PPUSH
25301: CALL_OW 302
25305: AND
25306: PUSH
25307: LD_EXP 71
25311: PUSH
25312: LD_INT 1
25314: EQUAL
25315: AND
25316: IFFALSE 25440
25318: GO 25320
25320: DISABLE
// begin InGameOn ;
25321: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25325: LD_INT 22
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 21
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PPUSH
25349: CALL_OW 69
25353: PPUSH
25354: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25358: LD_INT 7
25360: PPUSH
25361: LD_INT 22
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 21
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PPUSH
25385: CALL_OW 70
25389: PPUSH
25390: LD_INT 70
25392: PPUSH
25393: LD_INT 104
25395: PPUSH
25396: CALL_OW 111
// if powellWarm = 1 then
25400: LD_EXP 71
25404: PUSH
25405: LD_INT 1
25407: EQUAL
25408: IFFALSE 25436
// begin Say ( Powell , DBack2-Pow-1 ) ;
25410: LD_EXP 17
25414: PPUSH
25415: LD_STRING DBack2-Pow-1
25417: PPUSH
25418: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25422: LD_ADDR_EXP 71
25426: PUSH
25427: LD_EXP 71
25431: PUSH
25432: LD_INT 1
25434: PLUS
25435: ST_TO_ADDR
// end ; InGameOff ;
25436: CALL_OW 9
// end ;
25440: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25441: LD_EXP 103
25445: NOT
25446: PUSH
25447: LD_INT 7
25449: PPUSH
25450: LD_INT 22
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 21
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PPUSH
25474: CALL_OW 70
25478: PUSH
25479: LD_INT 0
25481: GREATER
25482: AND
25483: PUSH
25484: LD_EXP 17
25488: PPUSH
25489: CALL_OW 302
25493: AND
25494: PUSH
25495: LD_EXP 71
25499: PUSH
25500: LD_INT 2
25502: EQUAL
25503: AND
25504: IFFALSE 25621
25506: GO 25508
25508: DISABLE
// begin InGameOn ;
25509: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25513: LD_INT 22
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 21
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PPUSH
25537: CALL_OW 69
25541: PPUSH
25542: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea1 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 70 , 104 ) ;
25546: LD_INT 7
25548: PPUSH
25549: LD_INT 22
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 21
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PPUSH
25573: CALL_OW 70
25577: PPUSH
25578: LD_INT 70
25580: PPUSH
25581: LD_INT 104
25583: PPUSH
25584: CALL_OW 111
// if powellWarm = 2 then
25588: LD_EXP 71
25592: PUSH
25593: LD_INT 2
25595: EQUAL
25596: IFFALSE 25617
// begin Say ( Powell , DBack3-Pow-1 ) ;
25598: LD_EXP 17
25602: PPUSH
25603: LD_STRING DBack3-Pow-1
25605: PPUSH
25606: CALL_OW 88
// YouLost ( Dismissed ) ;
25610: LD_STRING Dismissed
25612: PPUSH
25613: CALL_OW 104
// end ; InGameOff ;
25617: CALL_OW 9
// end ;
25621: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 0 do
25622: LD_EXP 103
25626: NOT
25627: PUSH
25628: LD_INT 8
25630: PPUSH
25631: LD_INT 22
25633: PUSH
25634: LD_INT 1
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 21
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PPUSH
25655: CALL_OW 70
25659: PUSH
25660: LD_INT 0
25662: GREATER
25663: AND
25664: PUSH
25665: LD_EXP 17
25669: PPUSH
25670: CALL_OW 302
25674: AND
25675: PUSH
25676: LD_EXP 71
25680: PUSH
25681: LD_INT 0
25683: EQUAL
25684: AND
25685: IFFALSE 25809
25687: GO 25689
25689: DISABLE
// begin InGameOn ;
25690: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25694: LD_INT 22
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 21
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PPUSH
25718: CALL_OW 69
25722: PPUSH
25723: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25727: LD_INT 8
25729: PPUSH
25730: LD_INT 22
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 21
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PPUSH
25754: CALL_OW 70
25758: PPUSH
25759: LD_INT 71
25761: PPUSH
25762: LD_INT 63
25764: PPUSH
25765: CALL_OW 111
// if powellWarm = 0 then
25769: LD_EXP 71
25773: PUSH
25774: LD_INT 0
25776: EQUAL
25777: IFFALSE 25805
// begin Say ( Powell , DBack1-Pow-1 ) ;
25779: LD_EXP 17
25783: PPUSH
25784: LD_STRING DBack1-Pow-1
25786: PPUSH
25787: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25791: LD_ADDR_EXP 71
25795: PUSH
25796: LD_EXP 71
25800: PUSH
25801: LD_INT 1
25803: PLUS
25804: ST_TO_ADDR
// end ; InGameOff ;
25805: CALL_OW 9
// end ;
25809: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 1 do
25810: LD_EXP 103
25814: NOT
25815: PUSH
25816: LD_INT 8
25818: PPUSH
25819: LD_INT 22
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 21
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PPUSH
25843: CALL_OW 70
25847: PUSH
25848: LD_INT 0
25850: GREATER
25851: AND
25852: PUSH
25853: LD_EXP 17
25857: PPUSH
25858: CALL_OW 302
25862: AND
25863: PUSH
25864: LD_EXP 71
25868: PUSH
25869: LD_INT 1
25871: EQUAL
25872: AND
25873: IFFALSE 25997
25875: GO 25877
25877: DISABLE
// begin InGameOn ;
25878: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
25882: LD_INT 22
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 21
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PPUSH
25906: CALL_OW 69
25910: PPUSH
25911: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
25915: LD_INT 8
25917: PPUSH
25918: LD_INT 22
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 21
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 70
25946: PPUSH
25947: LD_INT 71
25949: PPUSH
25950: LD_INT 63
25952: PPUSH
25953: CALL_OW 111
// if powellWarm = 1 then
25957: LD_EXP 71
25961: PUSH
25962: LD_INT 1
25964: EQUAL
25965: IFFALSE 25993
// begin Say ( Powell , DBack2-Pow-1 ) ;
25967: LD_EXP 17
25971: PPUSH
25972: LD_STRING DBack2-Pow-1
25974: PPUSH
25975: CALL_OW 88
// powellWarm = powellWarm + 1 ;
25979: LD_ADDR_EXP 71
25983: PUSH
25984: LD_EXP 71
25988: PUSH
25989: LD_INT 1
25991: PLUS
25992: ST_TO_ADDR
// end ; InGameOff ;
25993: CALL_OW 9
// end ;
25997: END
// every 1 trigger not cinematics and FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 and IsOk ( Powell ) and powellWarm = 2 do
25998: LD_EXP 103
26002: NOT
26003: PUSH
26004: LD_INT 8
26006: PPUSH
26007: LD_INT 22
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 21
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 70
26035: PUSH
26036: LD_INT 0
26038: GREATER
26039: AND
26040: PUSH
26041: LD_EXP 17
26045: PPUSH
26046: CALL_OW 302
26050: AND
26051: PUSH
26052: LD_EXP 71
26056: PUSH
26057: LD_INT 2
26059: EQUAL
26060: AND
26061: IFFALSE 26178
26063: GO 26065
26065: DISABLE
// begin InGameOn ;
26066: CALL_OW 8
// ComStop ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
26070: LD_INT 22
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 21
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PPUSH
26094: CALL_OW 69
26098: PPUSH
26099: CALL_OW 141
// ComMoveXY ( FilterUnitsInArea ( PowellWarmArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 71 , 63 ) ;
26103: LD_INT 8
26105: PPUSH
26106: LD_INT 22
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 21
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PPUSH
26130: CALL_OW 70
26134: PPUSH
26135: LD_INT 71
26137: PPUSH
26138: LD_INT 63
26140: PPUSH
26141: CALL_OW 111
// if powellWarm = 2 then
26145: LD_EXP 71
26149: PUSH
26150: LD_INT 2
26152: EQUAL
26153: IFFALSE 26174
// begin Say ( Powell , DBack3-Pow-1 ) ;
26155: LD_EXP 17
26159: PPUSH
26160: LD_STRING DBack3-Pow-1
26162: PPUSH
26163: CALL_OW 88
// YouLost ( Dismissed ) ;
26167: LD_STRING Dismissed
26169: PPUSH
26170: CALL_OW 104
// end ; InGameOff ;
26174: CALL_OW 9
// end ;
26178: END
// every 0 0$1 trigger powellAttacks = 1 do var i ;
26179: LD_EXP 69
26183: PUSH
26184: LD_INT 1
26186: EQUAL
26187: IFFALSE 26236
26189: GO 26191
26191: DISABLE
26192: LD_INT 0
26194: PPUSH
// begin enable ;
26195: ENABLE
// for i = 1 to amUnitsAttack do
26196: LD_ADDR_VAR 0 1
26200: PUSH
26201: DOUBLE
26202: LD_INT 1
26204: DEC
26205: ST_TO_ADDR
26206: LD_EXP 66
26210: PUSH
26211: FOR_TO
26212: IFFALSE 26234
// DoNotAttack ( 8 , amUnitsAttack [ i ] ) ;
26214: LD_INT 8
26216: PPUSH
26217: LD_EXP 66
26221: PUSH
26222: LD_VAR 0 1
26226: ARRAY
26227: PPUSH
26228: CALL_OW 471
26232: GO 26211
26234: POP
26235: POP
// end ;
26236: PPOPN 1
26238: END
// every 2 2$0 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 and powellAttacks = 1 do
26239: LD_INT 22
26241: PUSH
26242: LD_INT 4
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 21
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 3
26261: PUSH
26262: LD_INT 58
26264: PUSH
26265: EMPTY
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: LIST
26276: PPUSH
26277: CALL_OW 69
26281: PUSH
26282: LD_INT 0
26284: EQUAL
26285: PUSH
26286: LD_EXP 69
26290: PUSH
26291: LD_INT 1
26293: EQUAL
26294: AND
26295: IFFALSE 26466
26297: GO 26299
26299: DISABLE
// begin powellAttacks = 2 ;
26300: LD_ADDR_EXP 69
26304: PUSH
26305: LD_INT 2
26307: ST_TO_ADDR
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26308: LD_INT 85
26310: PPUSH
26311: LD_INT 3
26313: PPUSH
26314: LD_INT 3
26316: PPUSH
26317: LD_INT 1
26319: PPUSH
26320: LD_INT 5
26322: PUSH
26323: LD_INT 7
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PPUSH
26333: LD_INT 2
26335: PPUSH
26336: CALL_OW 12
26340: ARRAY
26341: PPUSH
26342: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26346: LD_INT 85
26348: PPUSH
26349: LD_INT 3
26351: PPUSH
26352: LD_INT 3
26354: PPUSH
26355: LD_INT 1
26357: PPUSH
26358: LD_INT 5
26360: PUSH
26361: LD_INT 7
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: PPUSH
26371: LD_INT 2
26373: PPUSH
26374: CALL_OW 12
26378: ARRAY
26379: PPUSH
26380: CALL_OW 185
// AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , [ 5 , 7 ] [ Rand ( 1 , 2 ) ] ) ;
26384: LD_INT 85
26386: PPUSH
26387: LD_INT 3
26389: PPUSH
26390: LD_INT 3
26392: PPUSH
26393: LD_INT 1
26395: PPUSH
26396: LD_INT 5
26398: PUSH
26399: LD_INT 7
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: PPUSH
26409: LD_INT 2
26411: PPUSH
26412: CALL_OW 12
26416: ARRAY
26417: PPUSH
26418: CALL_OW 185
// AddComConstruct ( AmFact , us_morphling , engine_siberite , control_manual , 6 ) ;
26422: LD_INT 85
26424: PPUSH
26425: LD_INT 5
26427: PPUSH
26428: LD_INT 3
26430: PPUSH
26431: LD_INT 1
26433: PPUSH
26434: LD_INT 6
26436: PPUSH
26437: CALL_OW 185
// powellVeh = AddComConstruct ( AmFact , us_medium_tracked , engine_siberite , control_manual , 3 ) ;
26441: LD_ADDR_EXP 73
26445: PUSH
26446: LD_INT 85
26448: PPUSH
26449: LD_INT 3
26451: PPUSH
26452: LD_INT 3
26454: PPUSH
26455: LD_INT 1
26457: PPUSH
26458: LD_INT 3
26460: PPUSH
26461: CALL_OW 185
26465: ST_TO_ADDR
// end ;
26466: END
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and startAttacks = 1 do
26467: LD_INT 22
26469: PUSH
26470: LD_INT 4
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 21
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 3
26489: PUSH
26490: LD_INT 58
26492: PUSH
26493: EMPTY
26494: LIST
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: LIST
26504: PPUSH
26505: CALL_OW 69
26509: PUSH
26510: LD_INT 5
26512: GREATEREQUAL
26513: PUSH
26514: LD_EXP 72
26518: PUSH
26519: LD_INT 1
26521: EQUAL
26522: AND
26523: IFFALSE 26536
26525: GO 26527
26527: DISABLE
// startAttacks = 0 ;
26528: LD_ADDR_EXP 72
26532: PUSH
26533: LD_INT 0
26535: ST_TO_ADDR
26536: END
// every 1 1$15 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) >= 5 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) = 0 and startAttacks = 0 and powellAttacks = 2 do var i , sold , powellPeople , arControler ;
26537: LD_INT 22
26539: PUSH
26540: LD_INT 4
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 21
26549: PUSH
26550: LD_INT 2
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 3
26559: PUSH
26560: LD_INT 58
26562: PUSH
26563: EMPTY
26564: LIST
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: PPUSH
26575: CALL_OW 69
26579: PUSH
26580: LD_INT 5
26582: GREATEREQUAL
26583: PUSH
26584: LD_INT 22
26586: PUSH
26587: LD_INT 6
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 21
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PPUSH
26608: CALL_OW 69
26612: PUSH
26613: LD_INT 0
26615: EQUAL
26616: AND
26617: PUSH
26618: LD_EXP 72
26622: PUSH
26623: LD_INT 0
26625: EQUAL
26626: AND
26627: PUSH
26628: LD_EXP 69
26632: PUSH
26633: LD_INT 2
26635: EQUAL
26636: AND
26637: IFFALSE 27572
26639: GO 26641
26641: DISABLE
26642: LD_INT 0
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
// begin powellAttacks = 3 ;
26648: LD_ADDR_EXP 69
26652: PUSH
26653: LD_INT 3
26655: ST_TO_ADDR
// for i = 1 to amUnitsAttack do
26656: LD_ADDR_VAR 0 1
26660: PUSH
26661: DOUBLE
26662: LD_INT 1
26664: DEC
26665: ST_TO_ADDR
26666: LD_EXP 66
26670: PUSH
26671: FOR_TO
26672: IFFALSE 26694
// NormalAttack ( 8 , amUnitsAttack [ i ] ) ;
26674: LD_INT 8
26676: PPUSH
26677: LD_EXP 66
26681: PUSH
26682: LD_VAR 0 1
26686: ARRAY
26687: PPUSH
26688: CALL_OW 472
26692: GO 26671
26694: POP
26695: POP
// wait ( 0 0$5 ) ;
26696: LD_INT 175
26698: PPUSH
26699: CALL_OW 67
// Video ( true ) ;
26703: LD_INT 1
26705: PPUSH
26706: CALL 6884 0 1
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
26710: LD_INT 22
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PPUSH
26720: CALL_OW 69
26724: PPUSH
26725: CALL_OW 141
// CenterNowOnUnits ( Powell ) ;
26729: LD_EXP 17
26733: PPUSH
26734: CALL_OW 87
// ComMoveXY ( Powell , 45 , 64 ) ;
26738: LD_EXP 17
26742: PPUSH
26743: LD_INT 45
26745: PPUSH
26746: LD_INT 64
26748: PPUSH
26749: CALL_OW 111
// AddComTurnXY ( POwell , 46 , 66 ) ;
26753: LD_EXP 17
26757: PPUSH
26758: LD_INT 46
26760: PPUSH
26761: LD_INT 66
26763: PPUSH
26764: CALL_OW 178
// for i = 5 to 8 do
26768: LD_ADDR_VAR 0 1
26772: PUSH
26773: DOUBLE
26774: LD_INT 5
26776: DEC
26777: ST_TO_ADDR
26778: LD_INT 8
26780: PUSH
26781: FOR_TO
26782: IFFALSE 26928
// begin ComExitBuilding ( amUnitsAttack [ i ] ) ;
26784: LD_EXP 66
26788: PUSH
26789: LD_VAR 0 1
26793: ARRAY
26794: PPUSH
26795: CALL_OW 122
// ComExitVehicle ( amUnitsAttack [ i ] ) ;
26799: LD_EXP 66
26803: PUSH
26804: LD_VAR 0 1
26808: ARRAY
26809: PPUSH
26810: CALL_OW 121
// wait ( 0 0$1 ) ;
26814: LD_INT 35
26816: PPUSH
26817: CALL_OW 67
// AddComEnterUnit ( amUnitsAttack [ i ] , AmArm ) ;
26821: LD_EXP 66
26825: PUSH
26826: LD_VAR 0 1
26830: ARRAY
26831: PPUSH
26832: LD_INT 92
26834: PPUSH
26835: CALL_OW 180
// AddComChangeProfession ( amUnitsAttack [ i ] , 1 ) ;
26839: LD_EXP 66
26843: PUSH
26844: LD_VAR 0 1
26848: ARRAY
26849: PPUSH
26850: LD_INT 1
26852: PPUSH
26853: CALL_OW 183
// AddComExitBuilding ( amUnitsAttack [ i ] ) ;
26857: LD_EXP 66
26861: PUSH
26862: LD_VAR 0 1
26866: ARRAY
26867: PPUSH
26868: CALL_OW 182
// wait ( 0 0$1 ) ;
26872: LD_INT 35
26874: PPUSH
26875: CALL_OW 67
// AddComMoveXY ( amUnitsAttack [ i ] , 43 + i , 66 ) ;
26879: LD_EXP 66
26883: PUSH
26884: LD_VAR 0 1
26888: ARRAY
26889: PPUSH
26890: LD_INT 43
26892: PUSH
26893: LD_VAR 0 1
26897: PLUS
26898: PPUSH
26899: LD_INT 66
26901: PPUSH
26902: CALL_OW 171
// AddComTurnUnit ( amUnitsAttack [ i ] , Powell ) ;
26906: LD_EXP 66
26910: PUSH
26911: LD_VAR 0 1
26915: ARRAY
26916: PPUSH
26917: LD_EXP 17
26921: PPUSH
26922: CALL_OW 179
// end ;
26926: GO 26781
26928: POP
26929: POP
// wait ( 0 0$10 ) ;
26930: LD_INT 350
26932: PPUSH
26933: CALL_OW 67
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff [ Powell ] ;
26937: LD_ADDR_VAR 0 3
26941: PUSH
26942: LD_INT 22
26944: PUSH
26945: LD_INT 4
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 21
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 56
26964: PUSH
26965: EMPTY
26966: LIST
26967: PUSH
26968: LD_INT 3
26970: PUSH
26971: LD_INT 60
26973: PUSH
26974: EMPTY
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: PPUSH
26987: CALL_OW 69
26991: PUSH
26992: LD_EXP 17
26996: PUSH
26997: EMPTY
26998: LIST
26999: DIFF
27000: ST_TO_ADDR
// ComEnterUnit ( powellPeople , AmArm ) ;
27001: LD_VAR 0 3
27005: PPUSH
27006: LD_INT 92
27008: PPUSH
27009: CALL_OW 120
// AddComChangeProfession ( powellPeople , 1 ) ;
27013: LD_VAR 0 3
27017: PPUSH
27018: LD_INT 1
27020: PPUSH
27021: CALL_OW 183
// Say ( Powell , D5-Pow-1 ) ;
27025: LD_EXP 17
27029: PPUSH
27030: LD_STRING D5-Pow-1
27032: PPUSH
27033: CALL_OW 88
// for i = 1 to amUnitsAttack do
27037: LD_ADDR_VAR 0 1
27041: PUSH
27042: DOUBLE
27043: LD_INT 1
27045: DEC
27046: ST_TO_ADDR
27047: LD_EXP 66
27051: PUSH
27052: FOR_TO
27053: IFFALSE 27098
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
27055: LD_EXP 66
27059: PUSH
27060: LD_VAR 0 1
27064: ARRAY
27065: PPUSH
27066: CALL_OW 258
27070: PUSH
27071: LD_INT 1
27073: EQUAL
27074: IFFALSE 27096
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-1 ) ;
27076: LD_EXP 66
27080: PUSH
27081: LD_VAR 0 1
27085: ARRAY
27086: PPUSH
27087: LD_STRING D5-Sol2-1
27089: PPUSH
27090: CALL_OW 88
// break ;
27094: GO 27098
// end ;
27096: GO 27052
27098: POP
27099: POP
// Say ( Powell , D5-Pow-2 ) ;
27100: LD_EXP 17
27104: PPUSH
27105: LD_STRING D5-Pow-2
27107: PPUSH
27108: CALL_OW 88
// for i = 1 to amUnitsAttack do
27112: LD_ADDR_VAR 0 1
27116: PUSH
27117: DOUBLE
27118: LD_INT 1
27120: DEC
27121: ST_TO_ADDR
27122: LD_EXP 66
27126: PUSH
27127: FOR_TO
27128: IFFALSE 27173
// if GetSex ( amUnitsAttack [ i ] ) = sex_male then
27130: LD_EXP 66
27134: PUSH
27135: LD_VAR 0 1
27139: ARRAY
27140: PPUSH
27141: CALL_OW 258
27145: PUSH
27146: LD_INT 1
27148: EQUAL
27149: IFFALSE 27171
// begin Say ( amUnitsAttack [ i ] , D5-Sol2-2 ) ;
27151: LD_EXP 66
27155: PUSH
27156: LD_VAR 0 1
27160: ARRAY
27161: PPUSH
27162: LD_STRING D5-Sol2-2
27164: PPUSH
27165: CALL_OW 88
// break ;
27169: GO 27173
// end ;
27171: GO 27127
27173: POP
27174: POP
// Say ( Powell , D5-Pow-3 ) ;
27175: LD_EXP 17
27179: PPUSH
27180: LD_STRING D5-Pow-3
27182: PPUSH
27183: CALL_OW 88
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
27187: LD_INT 22
27189: PUSH
27190: LD_INT 4
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 21
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 3
27209: PUSH
27210: LD_INT 58
27212: PUSH
27213: EMPTY
27214: LIST
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: PPUSH
27225: CALL_OW 69
27229: PPUSH
27230: LD_INT 59
27232: PPUSH
27233: LD_INT 21
27235: PPUSH
27236: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
27240: LD_EXP 66
27244: PPUSH
27245: LD_INT 59
27247: PPUSH
27248: LD_INT 21
27250: PPUSH
27251: CALL_OW 114
// CenterOnXY ( 61 , 35 ) ;
27255: LD_INT 61
27257: PPUSH
27258: LD_INT 35
27260: PPUSH
27261: CALL_OW 84
// wait ( 0 0$15 ) ;
27265: LD_INT 525
27267: PPUSH
27268: CALL_OW 67
// Say ( Powell , D5a-Pow-1 ) ;
27272: LD_EXP 17
27276: PPUSH
27277: LD_STRING D5a-Pow-1
27279: PPUSH
27280: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
27284: LD_EXP 17
27288: PPUSH
27289: LD_STRING D5a-Pow-1a
27291: PPUSH
27292: CALL_OW 88
// wait ( 0 0$2 ) ;
27296: LD_INT 70
27298: PPUSH
27299: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
27303: LD_EXP 17
27307: PPUSH
27308: LD_STRING D5a-Pow-1b
27310: PPUSH
27311: CALL_OW 88
// wait ( 0 0$3 ) ;
27315: LD_INT 105
27317: PPUSH
27318: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
27322: LD_EXP 17
27326: PPUSH
27327: LD_STRING D5a-Pow-1c
27329: PPUSH
27330: CALL_OW 88
// wait ( 0 0$1 ) ;
27334: LD_INT 35
27336: PPUSH
27337: CALL_OW 67
// Say ( Powell , D5a-Pow-1d ) ;
27341: LD_EXP 17
27345: PPUSH
27346: LD_STRING D5a-Pow-1d
27348: PPUSH
27349: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
27353: LD_INT 35
27355: PPUSH
27356: CALL_OW 67
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) , 59 , 21 ) ;
27360: LD_INT 22
27362: PUSH
27363: LD_INT 4
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 21
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: LD_INT 58
27385: PUSH
27386: EMPTY
27387: LIST
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: PPUSH
27398: CALL_OW 69
27402: PPUSH
27403: LD_INT 59
27405: PPUSH
27406: LD_INT 21
27408: PPUSH
27409: CALL_OW 114
// ComAgressiveMove ( amUnitsAttack , 59 , 21 ) ;
27413: LD_EXP 66
27417: PPUSH
27418: LD_INT 59
27420: PPUSH
27421: LD_INT 21
27423: PPUSH
27424: CALL_OW 114
// until amUnitsAttack = [ ] ;
27428: LD_EXP 66
27432: PUSH
27433: EMPTY
27434: EQUAL
27435: IFFALSE 27353
// CenterNowOnUnits ( Powell ) ;
27437: LD_EXP 17
27441: PPUSH
27442: CALL_OW 87
// powellPeople = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Powell ] ;
27446: LD_ADDR_VAR 0 3
27450: PUSH
27451: LD_INT 22
27453: PUSH
27454: LD_INT 4
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 21
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: CALL_OW 69
27479: PUSH
27480: LD_EXP 17
27484: PUSH
27485: EMPTY
27486: LIST
27487: DIFF
27488: ST_TO_ADDR
// for i in powellPeople do
27489: LD_ADDR_VAR 0 1
27493: PUSH
27494: LD_VAR 0 3
27498: PUSH
27499: FOR_IN
27500: IFFALSE 27529
// if GetSex ( i ) = sex_male then
27502: LD_VAR 0 1
27506: PPUSH
27507: CALL_OW 258
27511: PUSH
27512: LD_INT 1
27514: EQUAL
27515: IFFALSE 27527
// sold = i ;
27517: LD_ADDR_VAR 0 2
27521: PUSH
27522: LD_VAR 0 1
27526: ST_TO_ADDR
27527: GO 27499
27529: POP
27530: POP
// Say ( sold , D6-Sol3-1 ) ;
27531: LD_VAR 0 2
27535: PPUSH
27536: LD_STRING D6-Sol3-1
27538: PPUSH
27539: CALL_OW 88
// Say ( Powell , D6-Pow-1 ) ;
27543: LD_EXP 17
27547: PPUSH
27548: LD_STRING D6-Pow-1
27550: PPUSH
27551: CALL_OW 88
// ComMoveToArea ( [ ArBomb1 , ArBomb2 ] , PowellBaseNearArea ) ;
27555: LD_INT 139
27557: PUSH
27558: LD_INT 138
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PPUSH
27565: LD_INT 12
27567: PPUSH
27568: CALL_OW 113
// end ;
27572: PPOPN 4
27574: END
// every 0 0$1 trigger powellAttacks = 3 and FilterUnitsInArea ( PowellBaseNearArea , [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) = 2 do var i , tmp ;
27575: LD_EXP 69
27579: PUSH
27580: LD_INT 3
27582: EQUAL
27583: PUSH
27584: LD_INT 12
27586: PPUSH
27587: LD_INT 22
27589: PUSH
27590: LD_INT 8
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 21
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PPUSH
27611: CALL_OW 70
27615: PUSH
27616: LD_INT 2
27618: EQUAL
27619: AND
27620: IFFALSE 27781
27622: GO 27624
27624: DISABLE
27625: LD_INT 0
27627: PPUSH
27628: PPUSH
// begin ChangeSideFog ( 8 , 1 ) ;
27629: LD_INT 8
27631: PPUSH
27632: LD_INT 1
27634: PPUSH
27635: CALL_OW 343
// SetAttitude ( 4 , 8 , att_friend , true ) ;
27639: LD_INT 4
27641: PPUSH
27642: LD_INT 8
27644: PPUSH
27645: LD_INT 1
27647: PPUSH
27648: LD_INT 1
27650: PPUSH
27651: CALL_OW 80
// for i in UnitsInside ( AmArm ) do
27655: LD_ADDR_VAR 0 1
27659: PUSH
27660: LD_INT 92
27662: PPUSH
27663: CALL_OW 313
27667: PUSH
27668: FOR_IN
27669: IFFALSE 27700
// if GetSex ( i ) = sex_male then
27671: LD_VAR 0 1
27675: PPUSH
27676: CALL_OW 258
27680: PUSH
27681: LD_INT 1
27683: EQUAL
27684: IFFALSE 27698
// begin tmp = i ;
27686: LD_ADDR_VAR 0 2
27690: PUSH
27691: LD_VAR 0 1
27695: ST_TO_ADDR
// break ;
27696: GO 27700
// end ;
27698: GO 27668
27700: POP
27701: POP
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
27702: LD_INT 92
27704: PPUSH
27705: CALL_OW 313
27709: PPUSH
27710: CALL_OW 122
// Say ( tmp , D6-Sol3-2 ) ;
27714: LD_VAR 0 2
27718: PPUSH
27719: LD_STRING D6-Sol3-2
27721: PPUSH
27722: CALL_OW 88
// ComAttackUnit ( [ ArBomb1 , ArBomb2 ] , AmFact ) ;
27726: LD_INT 139
27728: PUSH
27729: LD_INT 138
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PPUSH
27736: LD_INT 85
27738: PPUSH
27739: CALL_OW 115
// SetAttitude ( 4 , 8 , att_enemy , true ) ;
27743: LD_INT 4
27745: PPUSH
27746: LD_INT 8
27748: PPUSH
27749: LD_INT 2
27751: PPUSH
27752: LD_INT 1
27754: PPUSH
27755: CALL_OW 80
// ChangeSideFog ( 8 , 8 ) ;
27759: LD_INT 8
27761: PPUSH
27762: LD_INT 8
27764: PPUSH
27765: CALL_OW 343
// Say ( Powell , D6-Pow-2 ) ;
27769: LD_EXP 17
27773: PPUSH
27774: LD_STRING D6-Pow-2
27776: PPUSH
27777: CALL_OW 88
// end ;
27781: PPOPN 2
27783: END
// every 1 trigger IsDead ( AmFact ) do var i , tmp ;
27784: LD_INT 85
27786: PPUSH
27787: CALL_OW 301
27791: IFFALSE 28255
27793: GO 27795
27795: DISABLE
27796: LD_INT 0
27798: PPUSH
27799: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) = 1 then
27800: LD_INT 22
27802: PUSH
27803: LD_INT 8
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 21
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 33
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 34
27832: PUSH
27833: LD_INT 29
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 50
27842: PUSH
27843: EMPTY
27844: LIST
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: PPUSH
27853: CALL_OW 69
27857: PUSH
27858: LD_INT 1
27860: EQUAL
27861: IFFALSE 27972
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] , [ f_weapon , 29 ] , [ f_ok ] ] ) , FilterUnitsInArea ( BunkerHillArea , [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
27863: LD_INT 22
27865: PUSH
27866: LD_INT 8
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 21
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 33
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 34
27895: PUSH
27896: LD_INT 29
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 50
27905: PUSH
27906: EMPTY
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 69
27920: PPUSH
27921: LD_INT 34
27923: PPUSH
27924: LD_INT 22
27926: PUSH
27927: LD_INT 4
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 21
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 30
27946: PUSH
27947: LD_INT 32
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: PPUSH
27959: CALL_OW 70
27963: PUSH
27964: LD_INT 1
27966: ARRAY
27967: PPUSH
27968: CALL_OW 115
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_outside ] ] ) diff [ Powell ] do
27972: LD_ADDR_VAR 0 1
27976: PUSH
27977: LD_INT 22
27979: PUSH
27980: LD_INT 4
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 21
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 56
27999: PUSH
28000: EMPTY
28001: LIST
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: PPUSH
28008: CALL_OW 69
28012: PUSH
28013: LD_EXP 17
28017: PUSH
28018: EMPTY
28019: LIST
28020: DIFF
28021: PUSH
28022: FOR_IN
28023: IFFALSE 28054
// if GetSex ( i ) = sex_male then
28025: LD_VAR 0 1
28029: PPUSH
28030: CALL_OW 258
28034: PUSH
28035: LD_INT 1
28037: EQUAL
28038: IFFALSE 28052
// begin tmp = i ;
28040: LD_ADDR_VAR 0 2
28044: PUSH
28045: LD_VAR 0 1
28049: ST_TO_ADDR
// break ;
28050: GO 28054
// end ;
28052: GO 28022
28054: POP
28055: POP
// Say ( Powell , D6a-Pow-1 ) ;
28056: LD_EXP 17
28060: PPUSH
28061: LD_STRING D6a-Pow-1
28063: PPUSH
28064: CALL_OW 88
// Say ( tmp , D6a-Sol3-1 ) ;
28068: LD_VAR 0 2
28072: PPUSH
28073: LD_STRING D6a-Sol3-1
28075: PPUSH
28076: CALL_OW 88
// ComTurnUnit ( Powell , tmp ) ;
28080: LD_EXP 17
28084: PPUSH
28085: LD_VAR 0 2
28089: PPUSH
28090: CALL_OW 119
// Say ( Powell , D6a-Pow-2 ) ;
28094: LD_EXP 17
28098: PPUSH
28099: LD_STRING D6a-Pow-2
28101: PPUSH
28102: CALL_OW 88
// Say ( tmp , D6a-Sol3-2 ) ;
28106: LD_VAR 0 2
28110: PPUSH
28111: LD_STRING D6a-Sol3-2
28113: PPUSH
28114: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
28118: LD_EXP 17
28122: PPUSH
28123: LD_STRING D6a-Pow-3
28125: PPUSH
28126: CALL_OW 88
// ComEnterUnit ( Powell , powellVeh ) ;
28130: LD_EXP 17
28134: PPUSH
28135: LD_EXP 73
28139: PPUSH
28140: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
28144: LD_INT 35
28146: PPUSH
28147: CALL_OW 67
// ComEnterUnit ( Powell , powellVeh ) ;
28151: LD_EXP 17
28155: PPUSH
28156: LD_EXP 73
28160: PPUSH
28161: CALL_OW 120
// until IsInUnit ( Powell ) ;
28165: LD_EXP 17
28169: PPUSH
28170: CALL_OW 310
28174: IFFALSE 28144
// wait ( 0 0$1 ) ;
28176: LD_INT 35
28178: PPUSH
28179: CALL_OW 67
// AddComMoveXY ( powellVeh , 77 , 64 ) ;
28183: LD_EXP 73
28187: PPUSH
28188: LD_INT 77
28190: PPUSH
28191: LD_INT 64
28193: PPUSH
28194: CALL_OW 171
// AddComMoveXY ( powellVeh , 91 , 61 ) ;
28198: LD_EXP 73
28202: PPUSH
28203: LD_INT 91
28205: PPUSH
28206: LD_INT 61
28208: PPUSH
28209: CALL_OW 171
// AddComMoveXY ( powellVeh , 74 , 25 ) ;
28213: LD_EXP 73
28217: PPUSH
28218: LD_INT 74
28220: PPUSH
28221: LD_INT 25
28223: PPUSH
28224: CALL_OW 171
// centerPowell = 1 ;
28228: LD_ADDR_EXP 74
28232: PUSH
28233: LD_INT 1
28235: ST_TO_ADDR
// wait ( 0 0$15 ) ;
28236: LD_INT 525
28238: PPUSH
28239: CALL_OW 67
// Say ( Powell , D6b-Pow-1 ) ;
28243: LD_EXP 17
28247: PPUSH
28248: LD_STRING D6b-Pow-1
28250: PPUSH
28251: CALL_OW 88
// end ;
28255: PPOPN 2
28257: END
// every 0 0$1 trigger IsInArea ( powellVeh , DestroyPowellVeh ) and powellAttacks = 3 do
28258: LD_EXP 73
28262: PPUSH
28263: LD_INT 13
28265: PPUSH
28266: CALL_OW 308
28270: PUSH
28271: LD_EXP 69
28275: PUSH
28276: LD_INT 3
28278: EQUAL
28279: AND
28280: IFFALSE 28422
28282: GO 28284
28284: DISABLE
// begin SetLives ( PowellVeh , 250 ) ;
28285: LD_EXP 73
28289: PPUSH
28290: LD_INT 250
28292: PPUSH
28293: CALL_OW 234
// DialogueOn ;
28297: CALL_OW 6
// Say ( Powell , D6b-Pow-1a ) ;
28301: LD_EXP 17
28305: PPUSH
28306: LD_STRING D6b-Pow-1a
28308: PPUSH
28309: CALL_OW 88
// DialogueOff ;
28313: CALL_OW 7
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
28317: LD_EXP 17
28321: PPUSH
28322: LD_INT 22
28324: PUSH
28325: LD_INT 8
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 34
28334: PUSH
28335: LD_INT 29
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 50
28344: PUSH
28345: EMPTY
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: PPUSH
28353: CALL_OW 69
28357: PUSH
28358: LD_INT 1
28360: ARRAY
28361: PPUSH
28362: CALL_OW 120
// wait ( 0 0$1 ) ;
28366: LD_INT 35
28368: PPUSH
28369: CALL_OW 67
// ComEnterUnit ( Powell , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_ok ] ] ) [ 1 ] ) ;
28373: LD_EXP 17
28377: PPUSH
28378: LD_INT 22
28380: PUSH
28381: LD_INT 8
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 34
28390: PUSH
28391: LD_INT 29
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 50
28400: PUSH
28401: EMPTY
28402: LIST
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: PPUSH
28409: CALL_OW 69
28413: PUSH
28414: LD_INT 1
28416: ARRAY
28417: PPUSH
28418: CALL_OW 120
// end ;
28422: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) do
28423: LD_INT 22
28425: PUSH
28426: LD_INT 4
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 34
28435: PUSH
28436: LD_INT 29
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: IFFALSE 28883
28453: GO 28455
28455: DISABLE
// begin powBomb = FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] ] ) [ 1 ] ;
28456: LD_ADDR_EXP 75
28460: PUSH
28461: LD_INT 22
28463: PUSH
28464: LD_INT 4
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 34
28473: PUSH
28474: LD_INT 29
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PPUSH
28485: CALL_OW 69
28489: PUSH
28490: LD_INT 1
28492: ARRAY
28493: ST_TO_ADDR
// SetAttitude ( 8 , 4 , att_friend , true ) ;
28494: LD_INT 8
28496: PPUSH
28497: LD_INT 4
28499: PPUSH
28500: LD_INT 1
28502: PPUSH
28503: LD_INT 1
28505: PPUSH
28506: CALL_OW 80
// ComMoveXY ( PowBomb , 80 , 19 ) ;
28510: LD_EXP 75
28514: PPUSH
28515: LD_INT 80
28517: PPUSH
28518: LD_INT 19
28520: PPUSH
28521: CALL_OW 111
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28525: LD_EXP 75
28529: PPUSH
28530: LD_INT 74
28532: PPUSH
28533: LD_INT 15
28535: PPUSH
28536: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28540: LD_EXP 75
28544: PPUSH
28545: LD_INT 72
28547: PPUSH
28548: LD_INT 19
28550: PPUSH
28551: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28555: LD_EXP 75
28559: PPUSH
28560: LD_INT 78
28562: PPUSH
28563: LD_INT 24
28565: PPUSH
28566: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28570: LD_EXP 75
28574: PPUSH
28575: LD_INT 77
28577: PPUSH
28578: LD_INT 20
28580: PPUSH
28581: CALL_OW 171
// AddComMoveXY ( PowBomb , 74 , 15 ) ;
28585: LD_EXP 75
28589: PPUSH
28590: LD_INT 74
28592: PPUSH
28593: LD_INT 15
28595: PPUSH
28596: CALL_OW 171
// AddComMoveXY ( PowBomb , 72 , 19 ) ;
28600: LD_EXP 75
28604: PPUSH
28605: LD_INT 72
28607: PPUSH
28608: LD_INT 19
28610: PPUSH
28611: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 24 ) ;
28615: LD_EXP 75
28619: PPUSH
28620: LD_INT 78
28622: PPUSH
28623: LD_INT 24
28625: PPUSH
28626: CALL_OW 171
// AddComMoveXY ( PowBomb , 77 , 20 ) ;
28630: LD_EXP 75
28634: PPUSH
28635: LD_INT 77
28637: PPUSH
28638: LD_INT 20
28640: PPUSH
28641: CALL_OW 171
// AddComMoveXY ( PowBomb , 78 , 15 ) ;
28645: LD_EXP 75
28649: PPUSH
28650: LD_INT 78
28652: PPUSH
28653: LD_INT 15
28655: PPUSH
28656: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28660: LD_EXP 17
28664: PPUSH
28665: LD_STRING D6b-Pow-1b
28667: PPUSH
28668: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 1 ] , D6b-ArSol1-1 ) ;
28672: LD_INT 22
28674: PUSH
28675: LD_INT 8
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 21
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 25
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 26
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: PPUSH
28718: CALL_OW 69
28722: PUSH
28723: LD_INT 1
28725: ARRAY
28726: PPUSH
28727: LD_STRING D6b-ArSol1-1
28729: PPUSH
28730: CALL_OW 88
// Say ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_sex , 1 ] ] ) [ 2 ] , D6b-ArSol2-1 ) ;
28734: LD_INT 22
28736: PUSH
28737: LD_INT 8
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 21
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 25
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 26
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: PUSH
28785: LD_INT 2
28787: ARRAY
28788: PPUSH
28789: LD_STRING D6b-ArSol2-1
28791: PPUSH
28792: CALL_OW 88
// Say ( Powell , D6b-Pow-2 ) ;
28796: LD_EXP 17
28800: PPUSH
28801: LD_STRING D6b-Pow-2
28803: PPUSH
28804: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
28808: LD_INT 35
28810: PPUSH
28811: CALL_OW 67
// until GetDistUnitXY ( PowBomb , 78 , 15 ) < 2 ;
28815: LD_EXP 75
28819: PPUSH
28820: LD_INT 78
28822: PPUSH
28823: LD_INT 15
28825: PPUSH
28826: CALL_OW 297
28830: PUSH
28831: LD_INT 2
28833: LESS
28834: IFFALSE 28808
// wait ( 0 0$1 ) ;
28836: LD_INT 35
28838: PPUSH
28839: CALL_OW 67
// DialogueOn ;
28843: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28847: LD_EXP 17
28851: PPUSH
28852: LD_STRING D6b-Pow-2a
28854: PPUSH
28855: CALL_OW 88
// DialogueOff ;
28859: CALL_OW 7
// centerPowell = 0 ;
28863: LD_ADDR_EXP 74
28867: PUSH
28868: LD_INT 0
28870: ST_TO_ADDR
// ComAttackUnit ( PowBomb , ArRuFact ) ;
28871: LD_EXP 75
28875: PPUSH
28876: LD_INT 105
28878: PPUSH
28879: CALL_OW 115
// end ;
28883: END
// every 0 0$1 trigger IsDead ( ArRuFact ) and powellAttacks = 3 do var i , tmp , tmp1 , tmp2 ;
28884: LD_INT 105
28886: PPUSH
28887: CALL_OW 301
28891: PUSH
28892: LD_EXP 69
28896: PUSH
28897: LD_INT 3
28899: EQUAL
28900: AND
28901: IFFALSE 29742
28903: GO 28905
28905: DISABLE
28906: LD_INT 0
28908: PPUSH
28909: PPUSH
28910: PPUSH
28911: PPUSH
// begin wait ( 0 0$2 ) ;
28912: LD_INT 70
28914: PPUSH
28915: CALL_OW 67
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Stevens , Baker , Gordon , Peter , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
28919: LD_ADDR_VAR 0 2
28923: PUSH
28924: LD_INT 22
28926: PUSH
28927: LD_INT 4
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 21
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 26
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: PPUSH
28959: CALL_OW 69
28963: PUSH
28964: LD_EXP 1
28968: PUSH
28969: LD_EXP 3
28973: PUSH
28974: LD_EXP 21
28978: PUSH
28979: LD_EXP 22
28983: PUSH
28984: LD_EXP 23
28988: PUSH
28989: LD_EXP 4
28993: PUSH
28994: LD_EXP 5
28998: PUSH
28999: LD_EXP 6
29003: PUSH
29004: LD_EXP 7
29008: PUSH
29009: LD_EXP 8
29013: PUSH
29014: LD_EXP 9
29018: PUSH
29019: LD_EXP 10
29023: PUSH
29024: LD_EXP 11
29028: PUSH
29029: LD_EXP 12
29033: PUSH
29034: LD_EXP 13
29038: PUSH
29039: LD_EXP 14
29043: PUSH
29044: LD_EXP 15
29048: PUSH
29049: LD_EXP 17
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: DIFF
29074: ST_TO_ADDR
// CenterOnXY ( 49 , 66 ) ;
29075: LD_INT 49
29077: PPUSH
29078: LD_INT 66
29080: PPUSH
29081: CALL_OW 84
// Say ( tmp [ 1 ] , D6c-Sol3-1 ) ;
29085: LD_VAR 0 2
29089: PUSH
29090: LD_INT 1
29092: ARRAY
29093: PPUSH
29094: LD_STRING D6c-Sol3-1
29096: PPUSH
29097: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
29101: LD_EXP 1
29105: PPUSH
29106: LD_STRING D6c-JMM-1
29108: PPUSH
29109: CALL_OW 88
// if IsOk ( Cyrus ) then
29113: LD_EXP 7
29117: PPUSH
29118: CALL_OW 302
29122: IFFALSE 29136
// Say ( Cyrus , D6c-Cyrus-1 ) ;
29124: LD_EXP 7
29128: PPUSH
29129: LD_STRING D6c-Cyrus-1
29131: PPUSH
29132: CALL_OW 88
// if IsOk ( Bobby ) then
29136: LD_EXP 6
29140: PPUSH
29141: CALL_OW 302
29145: IFFALSE 29159
// Say ( Bobby , D6c-Bobby-1 ) ;
29147: LD_EXP 6
29151: PPUSH
29152: LD_STRING D6c-Bobby-1
29154: PPUSH
29155: CALL_OW 88
// if IsOk ( Cornel ) then
29159: LD_EXP 12
29163: PPUSH
29164: CALL_OW 302
29168: IFFALSE 29182
// Say ( Cornel , D6c-Corn-1 ) ;
29170: LD_EXP 12
29174: PPUSH
29175: LD_STRING D6c-Corn-1
29177: PPUSH
29178: CALL_OW 88
// Say ( tmp [ 2 ] , D6c-Sol1-1 ) ;
29182: LD_VAR 0 2
29186: PUSH
29187: LD_INT 2
29189: ARRAY
29190: PPUSH
29191: LD_STRING D6c-Sol1-1
29193: PPUSH
29194: CALL_OW 88
// if IsOk ( Lisa ) then
29198: LD_EXP 4
29202: PPUSH
29203: CALL_OW 302
29207: IFFALSE 29221
// Say ( Lisa , D6c-Lisa-1 ) ;
29209: LD_EXP 4
29213: PPUSH
29214: LD_STRING D6c-Lisa-1
29216: PPUSH
29217: CALL_OW 88
// if IsOk ( Gary ) then
29221: LD_EXP 13
29225: PPUSH
29226: CALL_OW 302
29230: IFFALSE 29244
// Say ( Gary , D6c-Gary-1 ) ;
29232: LD_EXP 13
29236: PPUSH
29237: LD_STRING D6c-Gary-1
29239: PPUSH
29240: CALL_OW 88
// if IsOK ( Donaldson ) then
29244: LD_EXP 5
29248: PPUSH
29249: CALL_OW 302
29253: IFFALSE 29267
// Say ( Donaldson , D6c-Don-1 ) ;
29255: LD_EXP 5
29259: PPUSH
29260: LD_STRING D6c-Don-1
29262: PPUSH
29263: CALL_OW 88
// Say ( tmp [ 3 ] , D6c-Sol2-1 ) ;
29267: LD_VAR 0 2
29271: PUSH
29272: LD_INT 3
29274: ARRAY
29275: PPUSH
29276: LD_STRING D6c-Sol2-1
29278: PPUSH
29279: CALL_OW 88
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
29283: LD_INT 22
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 21
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PPUSH
29307: CALL_OW 69
29311: PPUSH
29312: CALL_OW 122
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ) ;
29316: LD_INT 22
29318: PUSH
29319: LD_INT 4
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 21
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PPUSH
29340: CALL_OW 69
29344: PPUSH
29345: CALL_OW 122
// wait ( 0 0$1 ) ;
29349: LD_INT 35
29351: PPUSH
29352: CALL_OW 67
// tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] ;
29356: LD_ADDR_VAR 0 3
29360: PUSH
29361: LD_INT 22
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 21
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PPUSH
29385: CALL_OW 69
29389: PUSH
29390: LD_EXP 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: DIFF
29398: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
29399: LD_ADDR_VAR 0 4
29403: PUSH
29404: LD_INT 22
29406: PUSH
29407: LD_INT 4
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 21
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PPUSH
29428: CALL_OW 69
29432: ST_TO_ADDR
// for i := 1 to tmp2 do
29433: LD_ADDR_VAR 0 1
29437: PUSH
29438: DOUBLE
29439: LD_INT 1
29441: DEC
29442: ST_TO_ADDR
29443: LD_VAR 0 4
29447: PUSH
29448: FOR_TO
29449: IFFALSE 29500
// begin ComMoveXY ( tmp2 [ i ] , 43 + i , 64 ) ;
29451: LD_VAR 0 4
29455: PUSH
29456: LD_VAR 0 1
29460: ARRAY
29461: PPUSH
29462: LD_INT 43
29464: PUSH
29465: LD_VAR 0 1
29469: PLUS
29470: PPUSH
29471: LD_INT 64
29473: PPUSH
29474: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , JMM ) ;
29478: LD_VAR 0 4
29482: PUSH
29483: LD_VAR 0 1
29487: ARRAY
29488: PPUSH
29489: LD_EXP 1
29493: PPUSH
29494: CALL_OW 179
// end ;
29498: GO 29448
29500: POP
29501: POP
// for i := 1 to tmp1 do
29502: LD_ADDR_VAR 0 1
29506: PUSH
29507: DOUBLE
29508: LD_INT 1
29510: DEC
29511: ST_TO_ADDR
29512: LD_VAR 0 3
29516: PUSH
29517: FOR_TO
29518: IFFALSE 29569
// begin ComMoveXY ( tmp1 [ i ] , 43 + i , 65 ) ;
29520: LD_VAR 0 3
29524: PUSH
29525: LD_VAR 0 1
29529: ARRAY
29530: PPUSH
29531: LD_INT 43
29533: PUSH
29534: LD_VAR 0 1
29538: PLUS
29539: PPUSH
29540: LD_INT 65
29542: PPUSH
29543: CALL_OW 111
// AddComTurnUnit ( tmp1 [ i ] , JMM ) ;
29547: LD_VAR 0 3
29551: PUSH
29552: LD_VAR 0 1
29556: ARRAY
29557: PPUSH
29558: LD_EXP 1
29562: PPUSH
29563: CALL_OW 179
// end ;
29567: GO 29517
29569: POP
29570: POP
// repeat wait ( 0 0$1 ) ;
29571: LD_INT 35
29573: PPUSH
29574: CALL_OW 67
// ComMoveXY ( JMM , 48 , 68 ) ;
29578: LD_EXP 1
29582: PPUSH
29583: LD_INT 48
29585: PPUSH
29586: LD_INT 68
29588: PPUSH
29589: CALL_OW 111
// until GetDistUnitXY ( JMM , 48 , 68 ) < 2 ;
29593: LD_EXP 1
29597: PPUSH
29598: LD_INT 48
29600: PPUSH
29601: LD_INT 68
29603: PPUSH
29604: CALL_OW 297
29608: PUSH
29609: LD_INT 2
29611: LESS
29612: IFFALSE 29571
// AddComTurnXY ( JMM , 47 , 65 ) ;
29614: LD_EXP 1
29618: PPUSH
29619: LD_INT 47
29621: PPUSH
29622: LD_INT 65
29624: PPUSH
29625: CALL_OW 178
// wait ( 0 0$2 ) ;
29629: LD_INT 70
29631: PPUSH
29632: CALL_OW 67
// Say ( tmp [ 1 ] , D6c-Sol3-2 ) ;
29636: LD_VAR 0 2
29640: PUSH
29641: LD_INT 1
29643: ARRAY
29644: PPUSH
29645: LD_STRING D6c-Sol3-2
29647: PPUSH
29648: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
29652: LD_EXP 1
29656: PPUSH
29657: LD_STRING D6c-JMM-2
29659: PPUSH
29660: CALL_OW 88
// Video ( false ) ;
29664: LD_INT 0
29666: PPUSH
29667: CALL 6884 0 1
// centerPowell = 0 ;
29671: LD_ADDR_EXP 74
29675: PUSH
29676: LD_INT 0
29678: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
29679: LD_INT 22
29681: PUSH
29682: LD_INT 4
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 69
29693: PPUSH
29694: LD_INT 1
29696: PPUSH
29697: CALL_OW 235
// ChangeMissionObjectives ( M2 ) ;
29701: LD_STRING M2
29703: PPUSH
29704: CALL_OW 337
// ChangeSideFog ( 4 , 4 ) ;
29708: LD_INT 4
29710: PPUSH
29711: LD_INT 4
29713: PPUSH
29714: CALL_OW 343
// timerStatus = 1 ;
29718: LD_ADDR_EXP 96
29722: PUSH
29723: LD_INT 1
29725: ST_TO_ADDR
// missionStage = 1 ;
29726: LD_ADDR_EXP 101
29730: PUSH
29731: LD_INT 1
29733: ST_TO_ADDR
// startAttacks = 1 ;
29734: LD_ADDR_EXP 72
29738: PUSH
29739: LD_INT 1
29741: ST_TO_ADDR
// end ;
29742: PPOPN 4
29744: END
// every 0 0$2 trigger centerPowell = 1 do
29745: LD_EXP 74
29749: PUSH
29750: LD_INT 1
29752: EQUAL
29753: IFFALSE 30036
29755: GO 29757
29757: DISABLE
// begin enable ;
29758: ENABLE
// SetLives ( [ Powell , PowBomb ] , 1000 ) ;
29759: LD_EXP 17
29763: PUSH
29764: LD_EXP 75
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PPUSH
29773: LD_INT 1000
29775: PPUSH
29776: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29780: LD_INT 22
29782: PUSH
29783: LD_INT 4
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 34
29792: PUSH
29793: LD_INT 29
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 33
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 69
29819: PUSH
29820: LD_INT 0
29822: GREATER
29823: IFFALSE 29876
// SetLives ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29825: LD_INT 22
29827: PUSH
29828: LD_INT 4
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 34
29837: PUSH
29838: LD_INT 29
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 33
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: PUSH
29865: LD_INT 1
29867: ARRAY
29868: PPUSH
29869: LD_INT 1000
29871: PPUSH
29872: CALL_OW 234
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) > 0 then
29876: LD_INT 22
29878: PUSH
29879: LD_INT 8
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 34
29888: PUSH
29889: LD_INT 29
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 33
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: PUSH
29916: LD_INT 0
29918: GREATER
29919: IFFALSE 29972
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_control , 1 ] ] ) [ 1 ] , 1000 ) ;
29921: LD_INT 22
29923: PUSH
29924: LD_INT 8
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 34
29933: PUSH
29934: LD_INT 29
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 33
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: LIST
29955: PPUSH
29956: CALL_OW 69
29960: PUSH
29961: LD_INT 1
29963: ARRAY
29964: PPUSH
29965: LD_INT 1000
29967: PPUSH
29968: CALL_OW 234
// if not IsInArea ( powellVeh , DestroyPowellVeh ) then
29972: LD_EXP 73
29976: PPUSH
29977: LD_INT 13
29979: PPUSH
29980: CALL_OW 308
29984: NOT
29985: IFFALSE 29999
// SetLives ( powellVeh , 1000 ) ;
29987: LD_EXP 73
29991: PPUSH
29992: LD_INT 1000
29994: PPUSH
29995: CALL_OW 234
// if not IsInUnit ( Powell ) then
29999: LD_EXP 17
30003: PPUSH
30004: CALL_OW 310
30008: NOT
30009: IFFALSE 30022
// CenterOnUnits ( Powell ) else
30011: LD_EXP 17
30015: PPUSH
30016: CALL_OW 85
30020: GO 30036
// CenterOnUnits ( IsInUnit ( Powell ) ) ;
30022: LD_EXP 17
30026: PPUSH
30027: CALL_OW 310
30031: PPUSH
30032: CALL_OW 85
// end ;
30036: END
// every 0 0$1 trigger timeAction >= 0 0$16 do
30037: LD_EXP 97
30041: PUSH
30042: LD_INT 560
30044: GREATEREQUAL
30045: IFFALSE 30257
30047: GO 30049
30049: DISABLE
// begin DialogueOn ;
30050: CALL_OW 6
// SayRadio ( LegionFriend , D7-Friend-1 ) ;
30054: LD_EXP 53
30058: PPUSH
30059: LD_STRING D7-Friend-1
30061: PPUSH
30062: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
30066: LD_EXP 1
30070: PPUSH
30071: LD_STRING D7-JMM-1
30073: PPUSH
30074: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-2 ) ;
30078: LD_EXP 53
30082: PPUSH
30083: LD_STRING D7-Friend-2
30085: PPUSH
30086: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
30090: LD_EXP 1
30094: PPUSH
30095: LD_STRING D7-JMM-2
30097: PPUSH
30098: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-3 ) ;
30102: LD_EXP 53
30106: PPUSH
30107: LD_STRING D7-Friend-3
30109: PPUSH
30110: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
30114: LD_EXP 1
30118: PPUSH
30119: LD_STRING D7-JMM-3
30121: PPUSH
30122: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-4 ) ;
30126: LD_EXP 53
30130: PPUSH
30131: LD_STRING D7-Friend-4
30133: PPUSH
30134: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
30138: LD_EXP 1
30142: PPUSH
30143: LD_STRING D7-JMM-4
30145: PPUSH
30146: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-5 ) ;
30150: LD_EXP 53
30154: PPUSH
30155: LD_STRING D7-Friend-5
30157: PPUSH
30158: CALL_OW 94
// Say ( JMM , D7-JMM-5 ) ;
30162: LD_EXP 1
30166: PPUSH
30167: LD_STRING D7-JMM-5
30169: PPUSH
30170: CALL_OW 88
// SayRadio ( LegionFriend , D7-Friend-6 ) ;
30174: LD_EXP 53
30178: PPUSH
30179: LD_STRING D7-Friend-6
30181: PPUSH
30182: CALL_OW 94
// Say ( JMM , D7-JMM-6 ) ;
30186: LD_EXP 1
30190: PPUSH
30191: LD_STRING D7-JMM-6
30193: PPUSH
30194: CALL_OW 88
// DialogueOff ;
30198: CALL_OW 7
// PlaceUnitArea ( Kozlov , KozlovSpawn , false ) ;
30202: LD_EXP 36
30206: PPUSH
30207: LD_INT 15
30209: PPUSH
30210: LD_INT 0
30212: PPUSH
30213: CALL_OW 49
// SetClass ( Kozlov , 2 ) ;
30217: LD_EXP 36
30221: PPUSH
30222: LD_INT 2
30224: PPUSH
30225: CALL_OW 336
// ComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
30229: LD_EXP 36
30233: PPUSH
30234: LD_INT 2
30236: PPUSH
30237: LD_INT 78
30239: PPUSH
30240: LD_INT 12
30242: PPUSH
30243: LD_INT 3
30245: PPUSH
30246: CALL_OW 145
// ChangeMissionObjectives ( Mlegion ) ;
30250: LD_STRING Mlegion
30252: PPUSH
30253: CALL_OW 337
// end ;
30257: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) <= [ 6 , 6 , 5 ] [ Difficulty ] do
30258: LD_INT 22
30260: PUSH
30261: LD_INT 8
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 21
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 23
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: LIST
30292: PPUSH
30293: CALL_OW 69
30297: PUSH
30298: LD_INT 6
30300: PUSH
30301: LD_INT 6
30303: PUSH
30304: LD_INT 5
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: PUSH
30312: LD_OWVAR 67
30316: ARRAY
30317: LESSEQUAL
30318: IFFALSE 30632
30320: GO 30322
30322: DISABLE
// begin PlaceUnitArea ( Kurt , KurtSpawn , false ) ;
30323: LD_EXP 30
30327: PPUSH
30328: LD_INT 19
30330: PPUSH
30331: LD_INT 0
30333: PPUSH
30334: CALL_OW 49
// KillUnit ( Kozlov ) ;
30338: LD_EXP 36
30342: PPUSH
30343: CALL_OW 66
// KillUnit ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_nation , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
30347: LD_INT 22
30349: PUSH
30350: LD_INT 8
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 21
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 23
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 30
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: PPUSH
30393: CALL_OW 69
30397: PUSH
30398: LD_INT 1
30400: ARRAY
30401: PPUSH
30402: CALL_OW 66
// DialogueOn ;
30406: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
30410: LD_EXP 1
30414: PPUSH
30415: LD_STRING D13-JMM-1
30417: PPUSH
30418: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
30422: LD_EXP 30
30426: PPUSH
30427: LD_STRING D13-Kurt-1
30429: PPUSH
30430: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
30434: LD_EXP 1
30438: PPUSH
30439: LD_STRING D13-JMM-2
30441: PPUSH
30442: CALL_OW 88
// Say ( Kurt , D13-Kurt-2a ) ;
30446: LD_EXP 30
30450: PPUSH
30451: LD_STRING D13-Kurt-2a
30453: PPUSH
30454: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
30458: LD_EXP 1
30462: PPUSH
30463: LD_STRING D13-JMM-3
30465: PPUSH
30466: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
30470: LD_EXP 30
30474: PPUSH
30475: LD_STRING D13-Kurt-3
30477: PPUSH
30478: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
30482: LD_EXP 1
30486: PPUSH
30487: LD_STRING D13-JMM-4
30489: PPUSH
30490: CALL_OW 88
// DialogueOff ;
30494: CALL_OW 7
// SetSide ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] ] ) , 1 ) ;
30498: LD_INT 22
30500: PUSH
30501: LD_INT 8
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 50
30510: PUSH
30511: EMPTY
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PPUSH
30518: CALL_OW 69
30522: PPUSH
30523: LD_INT 1
30525: PPUSH
30526: CALL_OW 235
// SetLives ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_lives , 250 ] ] ] ) , 0 ) ;
30530: LD_INT 22
30532: PUSH
30533: LD_INT 8
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 24
30545: PUSH
30546: LD_INT 250
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PPUSH
30561: CALL_OW 69
30565: PPUSH
30566: LD_INT 0
30568: PPUSH
30569: CALL_OW 234
// ChangeMissionObjectives ( MlegionOut ) ;
30573: LD_STRING MlegionOut
30575: PPUSH
30576: CALL_OW 337
// SetAttitude ( 8 , 1 , att_friend , true ) ;
30580: LD_INT 8
30582: PPUSH
30583: LD_INT 1
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: LD_INT 1
30591: PPUSH
30592: CALL_OW 80
// PlaceUnitArea ( LegionFriend , LegFriendSpawn , false ) ;
30596: LD_EXP 53
30600: PPUSH
30601: LD_INT 30
30603: PPUSH
30604: LD_INT 0
30606: PPUSH
30607: CALL_OW 49
// wait ( 0 0$1 ) ;
30611: LD_INT 35
30613: PPUSH
30614: CALL_OW 67
// ComMoveUnit ( LegionFriend , JMM ) ;
30618: LD_EXP 53
30622: PPUSH
30623: LD_EXP 1
30627: PPUSH
30628: CALL_OW 112
// end ;
30632: END
// every 0 0$1 trigger See ( 1 , LegionFriend ) do var dec ;
30633: LD_INT 1
30635: PPUSH
30636: LD_EXP 53
30640: PPUSH
30641: CALL_OW 292
30645: IFFALSE 30921
30647: GO 30649
30649: DISABLE
30650: LD_INT 0
30652: PPUSH
// begin CenterNowOnUnits ( LegionFriend ) ;
30653: LD_EXP 53
30657: PPUSH
30658: CALL_OW 87
// DialogueOn ;
30662: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
30666: LD_EXP 1
30670: PPUSH
30671: LD_STRING D14-JMM-1
30673: PPUSH
30674: CALL_OW 88
// Say ( LegionFriend , D14-Friend-1 ) ;
30678: LD_EXP 53
30682: PPUSH
30683: LD_STRING D14-Friend-1
30685: PPUSH
30686: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
30690: LD_EXP 1
30694: PPUSH
30695: LD_STRING D14-JMM-2
30697: PPUSH
30698: CALL_OW 88
// Say ( LegionFriend , D14-Friend-2 ) ;
30702: LD_EXP 53
30706: PPUSH
30707: LD_STRING D14-Friend-2
30709: PPUSH
30710: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
30714: LD_EXP 1
30718: PPUSH
30719: LD_STRING D14-JMM-3
30721: PPUSH
30722: CALL_OW 88
// Say ( LegionFriend , D14-Friend-3 ) ;
30726: LD_EXP 53
30730: PPUSH
30731: LD_STRING D14-Friend-3
30733: PPUSH
30734: CALL_OW 88
// DialogueOff ;
30738: CALL_OW 7
// dec = Query ( Q14 ) ;
30742: LD_ADDR_VAR 0 1
30746: PUSH
30747: LD_STRING Q14
30749: PPUSH
30750: CALL_OW 97
30754: ST_TO_ADDR
// if dec = 1 then
30755: LD_VAR 0 1
30759: PUSH
30760: LD_INT 1
30762: EQUAL
30763: IFFALSE 30797
// begin DialogueOn ;
30765: CALL_OW 6
// Say ( JMM , D14a-JMM-1 ) ;
30769: LD_EXP 1
30773: PPUSH
30774: LD_STRING D14a-JMM-1
30776: PPUSH
30777: CALL_OW 88
// DialogueOff ;
30781: CALL_OW 7
// SetSide ( LegionFriend , 1 ) ;
30785: LD_EXP 53
30789: PPUSH
30790: LD_INT 1
30792: PPUSH
30793: CALL_OW 235
// end ; if dec = 2 then
30797: LD_VAR 0 1
30801: PUSH
30802: LD_INT 2
30804: EQUAL
30805: IFFALSE 30839
// begin DialogueOn ;
30807: CALL_OW 6
// Say ( JMM , D14b-JMM-1 ) ;
30811: LD_EXP 1
30815: PPUSH
30816: LD_STRING D14b-JMM-1
30818: PPUSH
30819: CALL_OW 88
// DialogueOff ;
30823: CALL_OW 7
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30827: LD_EXP 53
30831: PPUSH
30832: LD_INT 18
30834: PPUSH
30835: CALL_OW 113
// end ; if dec = 3 then
30839: LD_VAR 0 1
30843: PUSH
30844: LD_INT 3
30846: EQUAL
30847: IFFALSE 30921
// begin DialogueOn ;
30849: CALL_OW 6
// Say ( JMM , D14c-JMM-1 ) ;
30853: LD_EXP 1
30857: PPUSH
30858: LD_STRING D14c-JMM-1
30860: PPUSH
30861: CALL_OW 88
// Say ( LegionFriend , D14c-Friend-1 ) ;
30865: LD_EXP 53
30869: PPUSH
30870: LD_STRING D14c-Friend-1
30872: PPUSH
30873: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
30877: LD_EXP 1
30881: PPUSH
30882: LD_STRING D14c-JMM-2
30884: PPUSH
30885: CALL_OW 88
// DialogueOff ;
30889: CALL_OW 7
// SetAttitude ( 8 , 1 , att_enemy , true ) ;
30893: LD_INT 8
30895: PPUSH
30896: LD_INT 1
30898: PPUSH
30899: LD_INT 2
30901: PPUSH
30902: LD_INT 1
30904: PPUSH
30905: CALL_OW 80
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
30909: LD_EXP 53
30913: PPUSH
30914: LD_INT 18
30916: PPUSH
30917: CALL_OW 113
// end ; end ;
30921: PPOPN 1
30923: END
// every 0 0$1 trigger IsInArea ( LegionFriend , FriendEscapeArea ) and GetSide ( LegionFriend ) = 8 do
30924: LD_EXP 53
30928: PPUSH
30929: LD_INT 18
30931: PPUSH
30932: CALL_OW 308
30936: PUSH
30937: LD_EXP 53
30941: PPUSH
30942: CALL_OW 255
30946: PUSH
30947: LD_INT 8
30949: EQUAL
30950: AND
30951: IFFALSE 30965
30953: GO 30955
30955: DISABLE
// RemoveUnit ( LegionFriend ) ;
30956: LD_EXP 53
30960: PPUSH
30961: CALL_OW 64
30965: END
// every 0 0$1 trigger timeAction >= 15 15$02 do
30966: LD_EXP 97
30970: PUSH
30971: LD_INT 31570
30973: GREATEREQUAL
30974: IFFALSE 31071
30976: GO 30978
30978: DISABLE
// begin if KappaStatus = 1 and JMMGirlVeh = [ ] then
30979: LD_EXP 81
30983: PUSH
30984: LD_INT 1
30986: EQUAL
30987: PUSH
30988: LD_EXP 79
30992: PUSH
30993: EMPTY
30994: EQUAL
30995: AND
30996: IFFALSE 31023
// begin PrepareSupportFromKappa ;
30998: CALL 2416 0 0
// if burlakStatus = 1 then
31002: LD_EXP 76
31006: PUSH
31007: LD_INT 1
31009: EQUAL
31010: IFFALSE 31023
// begin wait ( 25 25$00 ) ;
31012: LD_INT 52500
31014: PPUSH
31015: CALL_OW 67
// PrepareAttackFromKappa ;
31019: CALL 5268 0 0
// end ; end ; if KappaStatus = 0 and JMMGirlStatus = 1 then
31023: LD_EXP 81
31027: PUSH
31028: LD_INT 0
31030: EQUAL
31031: PUSH
31032: LD_EXP 82
31036: PUSH
31037: LD_INT 1
31039: EQUAL
31040: AND
31041: IFFALSE 31047
// PrepareAttackFromKappa ;
31043: CALL 5268 0 0
// if KappaStatus = 0 and JMMGirlStatus = 0 then
31047: LD_EXP 81
31051: PUSH
31052: LD_INT 0
31054: EQUAL
31055: PUSH
31056: LD_EXP 82
31060: PUSH
31061: LD_INT 0
31063: EQUAL
31064: AND
31065: IFFALSE 31071
// PrepareAttackFromKappa ;
31067: CALL 5268 0 0
// end ;
31071: END
// every 0 0$1 trigger See ( 1 , sewiVeh ) do
31072: LD_INT 1
31074: PPUSH
31075: LD_EXP 35
31079: PPUSH
31080: CALL_OW 292
31084: IFFALSE 31352
31086: GO 31088
31088: DISABLE
// begin missionStage = 2 ;
31089: LD_ADDR_EXP 101
31093: PUSH
31094: LD_INT 2
31096: ST_TO_ADDR
// CenterNowOnUnits ( sewiVeh ) ;
31097: LD_EXP 35
31101: PPUSH
31102: CALL_OW 87
// DialogueOn ;
31106: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
31110: LD_EXP 1
31114: PPUSH
31115: LD_STRING D10nB-JMM-1
31117: PPUSH
31118: CALL_OW 88
// if BurlakStatus = 1 then
31122: LD_EXP 76
31126: PUSH
31127: LD_INT 1
31129: EQUAL
31130: IFFALSE 31144
// Say ( Vsevolod , D10nB-Vse-1a ) ;
31132: LD_EXP 34
31136: PPUSH
31137: LD_STRING D10nB-Vse-1a
31139: PPUSH
31140: CALL_OW 88
// if BurlakStatus = 0 then
31144: LD_EXP 76
31148: PUSH
31149: LD_INT 0
31151: EQUAL
31152: IFFALSE 31166
// Say ( Vsevolod , D10nB-Vse-1 ) ;
31154: LD_EXP 34
31158: PPUSH
31159: LD_STRING D10nB-Vse-1
31161: PPUSH
31162: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
31166: LD_EXP 1
31170: PPUSH
31171: LD_STRING D10nB-JMM-2
31173: PPUSH
31174: CALL_OW 88
// if KappaStatus and JMMGirlStatus = 1 then
31178: LD_EXP 81
31182: PUSH
31183: LD_EXP 82
31187: PUSH
31188: LD_INT 1
31190: EQUAL
31191: AND
31192: IFFALSE 31206
// SayRadio ( Vsevolod , D10nB-Vse-5a ) ;
31194: LD_EXP 34
31198: PPUSH
31199: LD_STRING D10nB-Vse-5a
31201: PPUSH
31202: CALL_OW 94
// if KappaStatus and JMMGirlStatus = 0 then
31206: LD_EXP 81
31210: PUSH
31211: LD_EXP 82
31215: PUSH
31216: LD_INT 0
31218: EQUAL
31219: AND
31220: IFFALSE 31348
// begin if JMMGirl = 1 then
31222: LD_EXP 80
31226: PUSH
31227: LD_INT 1
31229: EQUAL
31230: IFFALSE 31280
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
31232: LD_EXP 34
31236: PPUSH
31237: LD_STRING D10nB-Vse-2
31239: PPUSH
31240: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
31244: LD_EXP 1
31248: PPUSH
31249: LD_STRING D10nB-JMM-3
31251: PPUSH
31252: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
31256: LD_EXP 34
31260: PPUSH
31261: LD_STRING D10nB-Vse-3
31263: PPUSH
31264: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
31268: LD_EXP 1
31272: PPUSH
31273: LD_STRING D10nB-JMM-4
31275: PPUSH
31276: CALL_OW 88
// end ; if JMMGirl = 2 then
31280: LD_EXP 80
31284: PUSH
31285: LD_INT 2
31287: EQUAL
31288: IFFALSE 31314
// begin Say ( Vsevolod , D10nB-Vse-4 ) ;
31290: LD_EXP 34
31294: PPUSH
31295: LD_STRING D10nB-Vse-4
31297: PPUSH
31298: CALL_OW 88
// Say ( JMM , D10nB-JMM-5 ) ;
31302: LD_EXP 1
31306: PPUSH
31307: LD_STRING D10nB-JMM-5
31309: PPUSH
31310: CALL_OW 88
// end ; if JMMGirl = 3 then
31314: LD_EXP 80
31318: PUSH
31319: LD_INT 3
31321: EQUAL
31322: IFFALSE 31348
// begin Say ( Vsevolod , D10nB-Vse-5 ) ;
31324: LD_EXP 34
31328: PPUSH
31329: LD_STRING D10nB-Vse-5
31331: PPUSH
31332: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
31336: LD_EXP 1
31340: PPUSH
31341: LD_STRING D10nB-JMM-6
31343: PPUSH
31344: CALL_OW 88
// end ; end ; DialogueOff ;
31348: CALL_OW 7
// end ;
31352: END
// every 0 0$1 trigger timeAction >= 30 30$02 do
31353: LD_EXP 97
31357: PUSH
31358: LD_INT 63070
31360: GREATEREQUAL
31361: IFFALSE 31639
31363: GO 31365
31365: DISABLE
// begin PrepareOmegaTeam ;
31366: CALL 2805 0 0
// missionStage = 3 ;
31370: LD_ADDR_EXP 101
31374: PUSH
31375: LD_INT 3
31377: ST_TO_ADDR
// DialogueOn ;
31378: CALL_OW 6
// if StevensStatus = 1 then
31382: LD_EXP 77
31386: PUSH
31387: LD_INT 1
31389: EQUAL
31390: IFFALSE 31502
// begin CenterNowOnUnits ( IsInUnit ( Stevens ) ) ;
31392: LD_EXP 3
31396: PPUSH
31397: CALL_OW 310
31401: PPUSH
31402: CALL_OW 87
// SayRadio ( Stevens , D8-Huck-1 ) ;
31406: LD_EXP 3
31410: PPUSH
31411: LD_STRING D8-Huck-1
31413: PPUSH
31414: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
31418: LD_EXP 1
31422: PPUSH
31423: LD_STRING D8-JMM-1
31425: PPUSH
31426: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
31430: LD_EXP 3
31434: PPUSH
31435: LD_STRING D8-Huck-2
31437: PPUSH
31438: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
31442: LD_EXP 1
31446: PPUSH
31447: LD_STRING D8-JMM-2
31449: PPUSH
31450: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
31454: LD_EXP 3
31458: PPUSH
31459: LD_STRING D8-Huck-3
31461: PPUSH
31462: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
31466: LD_EXP 1
31470: PPUSH
31471: LD_STRING D8-JMM-3
31473: PPUSH
31474: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
31478: LD_EXP 3
31482: PPUSH
31483: LD_STRING D8-Huck-4
31485: PPUSH
31486: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
31490: LD_EXP 1
31494: PPUSH
31495: LD_STRING D8-JMM-4
31497: PPUSH
31498: CALL_OW 88
// end ; if StevensStatus = 0 then
31502: LD_EXP 77
31506: PUSH
31507: LD_INT 0
31509: EQUAL
31510: IFFALSE 31622
// begin CenterNowOnUnits ( IsInUnit ( Baker ) ) ;
31512: LD_EXP 21
31516: PPUSH
31517: CALL_OW 310
31521: PPUSH
31522: CALL_OW 87
// SayRadio ( Baker , D8-Huck-1 ) ;
31526: LD_EXP 21
31530: PPUSH
31531: LD_STRING D8-Huck-1
31533: PPUSH
31534: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
31538: LD_EXP 1
31542: PPUSH
31543: LD_STRING D8-JMM-1a
31545: PPUSH
31546: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
31550: LD_EXP 21
31554: PPUSH
31555: LD_STRING D8-Huck-2
31557: PPUSH
31558: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
31562: LD_EXP 1
31566: PPUSH
31567: LD_STRING D8-JMM-2
31569: PPUSH
31570: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
31574: LD_EXP 21
31578: PPUSH
31579: LD_STRING D8-Huck-3
31581: PPUSH
31582: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
31586: LD_EXP 1
31590: PPUSH
31591: LD_STRING D8-JMM-3
31593: PPUSH
31594: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
31598: LD_EXP 21
31602: PPUSH
31603: LD_STRING D8-Huck-4
31605: PPUSH
31606: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
31610: LD_EXP 1
31614: PPUSH
31615: LD_STRING D8-JMM-4
31617: PPUSH
31618: CALL_OW 88
// end ; DialogueOff ;
31622: CALL_OW 7
// SetTech ( tech_SibFiss , 1 , state_enabled ) ;
31626: LD_INT 25
31628: PPUSH
31629: LD_INT 1
31631: PPUSH
31632: LD_INT 1
31634: PPUSH
31635: CALL_OW 322
// end ;
31639: END
// every 0 0$1 trigger timeAction >= 35 35$02 do var dec ;
31640: LD_EXP 97
31644: PUSH
31645: LD_INT 73570
31647: GREATEREQUAL
31648: IFFALSE 31998
31650: GO 31652
31652: DISABLE
31653: LD_INT 0
31655: PPUSH
// begin missionStage = 4 ;
31656: LD_ADDR_EXP 101
31660: PUSH
31661: LD_INT 4
31663: ST_TO_ADDR
// DialogueOn ;
31664: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
31668: LD_EXP 28
31672: PPUSH
31673: LD_STRING D9-Roth-1
31675: PPUSH
31676: CALL_OW 94
// Say ( JMM , D9-JMM-1 ) ;
31680: LD_EXP 1
31684: PPUSH
31685: LD_STRING D9-JMM-1
31687: PPUSH
31688: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
31692: LD_EXP 28
31696: PPUSH
31697: LD_STRING D9-Roth-2
31699: PPUSH
31700: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
31704: LD_EXP 28
31708: PPUSH
31709: LD_STRING D9-Roth-2a
31711: PPUSH
31712: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
31716: LD_EXP 26
31720: PPUSH
31721: LD_STRING D9-Pla-2
31723: PPUSH
31724: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
31728: LD_EXP 28
31732: PPUSH
31733: LD_STRING D9-Roth-3
31735: PPUSH
31736: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
31740: LD_EXP 26
31744: PPUSH
31745: LD_STRING D9-Pla-3
31747: PPUSH
31748: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
31752: LD_EXP 28
31756: PPUSH
31757: LD_STRING D9-Roth-4
31759: PPUSH
31760: CALL_OW 94
// dec = Query ( Q9 ) ;
31764: LD_ADDR_VAR 0 1
31768: PUSH
31769: LD_STRING Q9
31771: PPUSH
31772: CALL_OW 97
31776: ST_TO_ADDR
// if dec = 1 then
31777: LD_VAR 0 1
31781: PUSH
31782: LD_INT 1
31784: EQUAL
31785: IFFALSE 31799
// SayRadio ( Roth , D9a-Roth-1 ) ;
31787: LD_EXP 28
31791: PPUSH
31792: LD_STRING D9a-Roth-1
31794: PPUSH
31795: CALL_OW 94
// if dec = 2 then
31799: LD_VAR 0 1
31803: PUSH
31804: LD_INT 2
31806: EQUAL
31807: IFFALSE 31833
// begin Say ( JMM , D9b-JMM-1 ) ;
31809: LD_EXP 1
31813: PPUSH
31814: LD_STRING D9b-JMM-1
31816: PPUSH
31817: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
31821: LD_EXP 28
31825: PPUSH
31826: LD_STRING D9b-Roth-1
31828: PPUSH
31829: CALL_OW 94
// end ; if dec = 3 then
31833: LD_VAR 0 1
31837: PUSH
31838: LD_INT 3
31840: EQUAL
31841: IFFALSE 31903
// begin Say ( JMM , D9c-JMM-1 ) ;
31843: LD_EXP 1
31847: PPUSH
31848: LD_STRING D9c-JMM-1
31850: PPUSH
31851: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
31855: LD_EXP 28
31859: PPUSH
31860: LD_STRING D9c-Roth-1
31862: PPUSH
31863: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
31867: LD_EXP 1
31871: PPUSH
31872: LD_STRING D9c-JMM-2
31874: PPUSH
31875: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
31879: LD_EXP 28
31883: PPUSH
31884: LD_STRING D9c-Roth-2
31886: PPUSH
31887: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
31891: LD_EXP 1
31895: PPUSH
31896: LD_STRING D9c-JMM-3
31898: PPUSH
31899: CALL_OW 88
// end ; SayRadio ( Roth , D9c-Roth-3 ) ;
31903: LD_EXP 28
31907: PPUSH
31908: LD_STRING D9c-Roth-3
31910: PPUSH
31911: CALL_OW 94
// SayRadio ( Roth , D9cont-Roth-1 ) ;
31915: LD_EXP 28
31919: PPUSH
31920: LD_STRING D9cont-Roth-1
31922: PPUSH
31923: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
31927: LD_EXP 1
31931: PPUSH
31932: LD_STRING D9cont-JMM-1
31934: PPUSH
31935: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
31939: LD_EXP 28
31943: PPUSH
31944: LD_STRING D9cont-Roth-2
31946: PPUSH
31947: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
31951: LD_EXP 1
31955: PPUSH
31956: LD_STRING D9cont-JMM-2
31958: PPUSH
31959: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
31963: LD_EXP 28
31967: PPUSH
31968: LD_STRING D9cont-Roth-3
31970: PPUSH
31971: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
31975: LD_EXP 1
31979: PPUSH
31980: LD_STRING D9cont-JMM-3
31982: PPUSH
31983: CALL_OW 88
// DialogueOff ;
31987: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
31991: LD_STRING M3
31993: PPUSH
31994: CALL_OW 337
// end ;
31998: PPOPN 1
32000: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) <= [ 20 , 18 , 15 ] [ Difficulty ] do var i , tmp ;
32001: LD_INT 22
32003: PUSH
32004: LD_INT 7
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 21
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PPUSH
32025: CALL_OW 69
32029: PUSH
32030: LD_INT 20
32032: PUSH
32033: LD_INT 18
32035: PUSH
32036: LD_INT 15
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: PUSH
32044: LD_OWVAR 67
32048: ARRAY
32049: LESSEQUAL
32050: IFFALSE 32536
32052: GO 32054
32054: DISABLE
32055: LD_INT 0
32057: PPUSH
32058: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_lives , 900 ] ] ) do
32059: LD_ADDR_VAR 0 1
32063: PUSH
32064: LD_INT 22
32066: PUSH
32067: LD_INT 7
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 21
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 23
32086: PUSH
32087: LD_INT 3
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 24
32096: PUSH
32097: LD_INT 900
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: PPUSH
32110: CALL_OW 69
32114: PUSH
32115: FOR_IN
32116: IFFALSE 32147
// if GetSex ( i ) = sex_male then
32118: LD_VAR 0 1
32122: PPUSH
32123: CALL_OW 258
32127: PUSH
32128: LD_INT 1
32130: EQUAL
32131: IFFALSE 32145
// begin tmp = i ;
32133: LD_ADDR_VAR 0 2
32137: PUSH
32138: LD_VAR 0 1
32142: ST_TO_ADDR
// break ;
32143: GO 32147
// end ;
32145: GO 32115
32147: POP
32148: POP
// if tmp = 0 then
32149: LD_VAR 0 2
32153: PUSH
32154: LD_INT 0
32156: EQUAL
32157: IFFALSE 32211
// begin uc_side = 7 ;
32159: LD_ADDR_OWVAR 20
32163: PUSH
32164: LD_INT 7
32166: ST_TO_ADDR
// uc_nation = 3 ;
32167: LD_ADDR_OWVAR 21
32171: PUSH
32172: LD_INT 3
32174: ST_TO_ADDR
// hc_name =  ;
32175: LD_ADDR_OWVAR 26
32179: PUSH
32180: LD_STRING 
32182: ST_TO_ADDR
// hc_gallery =  ;
32183: LD_ADDR_OWVAR 33
32187: PUSH
32188: LD_STRING 
32190: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
32191: LD_INT 1
32193: PPUSH
32194: LD_INT 10
32196: PPUSH
32197: CALL_OW 381
// tmp = CreateHuman ;
32201: LD_ADDR_VAR 0 2
32205: PUSH
32206: CALL_OW 44
32210: ST_TO_ADDR
// end ; AllianceAI = 0 ;
32211: LD_ADDR_EXP 85
32215: PUSH
32216: LD_INT 0
32218: ST_TO_ADDR
// AllianceEscape = 1 ;
32219: LD_ADDR_EXP 91
32223: PUSH
32224: LD_INT 1
32226: ST_TO_ADDR
// SetAttitude ( 7 , 1 , att_friend , true ) ;
32227: LD_INT 7
32229: PPUSH
32230: LD_INT 1
32232: PPUSH
32233: LD_INT 1
32235: PPUSH
32236: LD_INT 1
32238: PPUSH
32239: CALL_OW 80
// DialogueOn ;
32243: CALL_OW 6
// if IsOK ( Roth ) then
32247: LD_EXP 28
32251: PPUSH
32252: CALL_OW 302
32256: IFFALSE 32270
// Say ( JMM , DAb-JMM-1 ) ;
32258: LD_EXP 1
32262: PPUSH
32263: LD_STRING DAb-JMM-1
32265: PPUSH
32266: CALL_OW 88
// if IsOK ( Roth ) then
32270: LD_EXP 28
32274: PPUSH
32275: CALL_OW 302
32279: IFFALSE 32295
// Say ( Roth , DSurrenderAlliance-Roth-1 ) else
32281: LD_EXP 28
32285: PPUSH
32286: LD_STRING DSurrenderAlliance-Roth-1
32288: PPUSH
32289: CALL_OW 88
32293: GO 32307
// Say ( tmp , DSurrenderAlliance-Sci1-1 ) ;
32295: LD_VAR 0 2
32299: PPUSH
32300: LD_STRING DSurrenderAlliance-Sci1-1
32302: PPUSH
32303: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) = 1 then
32307: LD_INT 23
32309: PPUSH
32310: LD_INT 22
32312: PUSH
32313: LD_INT 4
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PPUSH
32320: CALL_OW 70
32324: PUSH
32325: LD_INT 1
32327: EQUAL
32328: IFFALSE 32342
// Say ( JMM , DAb-JMM-1a ) ;
32330: LD_EXP 1
32334: PPUSH
32335: LD_STRING DAb-JMM-1a
32337: PPUSH
32338: CALL_OW 88
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 1 then
32342: LD_INT 23
32344: PPUSH
32345: LD_INT 22
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PPUSH
32355: CALL_OW 70
32359: PUSH
32360: LD_INT 1
32362: GREATER
32363: IFFALSE 32377
// Say ( JMM , DAb-JMM-1b ) ;
32365: LD_EXP 1
32369: PPUSH
32370: LD_STRING DAb-JMM-1b
32372: PPUSH
32373: CALL_OW 88
// DialogueOff ;
32377: CALL_OW 7
// if FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) > 0 then
32381: LD_INT 23
32383: PPUSH
32384: LD_INT 22
32386: PUSH
32387: LD_INT 4
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PPUSH
32394: CALL_OW 70
32398: PUSH
32399: LD_INT 0
32401: GREATER
32402: IFFALSE 32429
// SetSide ( FilterUnitsInArea ( AllianceBaseArea , [ f_side , 4 ] ) , 1 ) ;
32404: LD_INT 23
32406: PPUSH
32407: LD_INT 22
32409: PUSH
32410: LD_INT 4
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PPUSH
32417: CALL_OW 70
32421: PPUSH
32422: LD_INT 1
32424: PPUSH
32425: CALL_OW 235
// if IsDying ( Roth ) then
32429: LD_EXP 28
32433: PPUSH
32434: CALL_OW 303
32438: IFFALSE 32460
// begin RothStatus = 0 ;
32440: LD_ADDR_EXP 92
32444: PUSH
32445: LD_INT 0
32447: ST_TO_ADDR
// SetLives ( Roth , 0 ) ;
32448: LD_EXP 28
32452: PPUSH
32453: LD_INT 0
32455: PPUSH
32456: CALL_OW 234
// end ; ComExitBuilding ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ) ;
32460: LD_INT 22
32462: PUSH
32463: LD_INT 7
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 21
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PPUSH
32484: CALL_OW 69
32488: PPUSH
32489: CALL_OW 122
// wait ( 0 0$1 ) ;
32493: LD_INT 35
32495: PPUSH
32496: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) , AllianceEscapeArea ) ;
32500: LD_INT 22
32502: PUSH
32503: LD_INT 7
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 21
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PPUSH
32524: CALL_OW 69
32528: PPUSH
32529: LD_INT 28
32531: PPUSH
32532: CALL_OW 173
// end ;
32536: PPOPN 2
32538: END
// every 0 0$1 trigger AllianceEscape = 1 and FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do var i ;
32539: LD_EXP 91
32543: PUSH
32544: LD_INT 1
32546: EQUAL
32547: PUSH
32548: LD_INT 28
32550: PPUSH
32551: LD_INT 22
32553: PUSH
32554: LD_INT 7
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 21
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PPUSH
32575: CALL_OW 70
32579: AND
32580: IFFALSE 32642
32582: GO 32584
32584: DISABLE
32585: LD_INT 0
32587: PPUSH
// begin enable ;
32588: ENABLE
// for i in FilterUnitsInArea ( AllianceEscapeArea , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
32589: LD_ADDR_VAR 0 1
32593: PUSH
32594: LD_INT 28
32596: PPUSH
32597: LD_INT 22
32599: PUSH
32600: LD_INT 7
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 21
32609: PUSH
32610: LD_INT 1
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PPUSH
32621: CALL_OW 70
32625: PUSH
32626: FOR_IN
32627: IFFALSE 32640
// RemoveUnit ( i ) ;
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 64
32638: GO 32626
32640: POP
32641: POP
// end ;
32642: PPOPN 1
32644: END
// every 0 0$55 trigger ( FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 0 or FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 ) and IsOK ( Roth ) and IsOk ( AllLabR1 ) and IsOk ( AllLabR2 ) and AllianceAI = 1 do var tpUnit , heroes , rnd ;
32645: LD_INT 33
32647: PPUSH
32648: LD_INT 22
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 21
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PPUSH
32672: CALL_OW 70
32676: PUSH
32677: LD_INT 0
32679: GREATER
32680: PUSH
32681: LD_INT 33
32683: PPUSH
32684: LD_INT 22
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 21
32696: PUSH
32697: LD_INT 2
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 33
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: LD_INT 58
32719: PUSH
32720: EMPTY
32721: LIST
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: PPUSH
32733: CALL_OW 70
32737: PUSH
32738: LD_INT 0
32740: GREATER
32741: OR
32742: PUSH
32743: LD_EXP 28
32747: PPUSH
32748: CALL_OW 302
32752: AND
32753: PUSH
32754: LD_INT 39
32756: PPUSH
32757: CALL_OW 302
32761: AND
32762: PUSH
32763: LD_INT 133
32765: PPUSH
32766: CALL_OW 302
32770: AND
32771: PUSH
32772: LD_EXP 85
32776: PUSH
32777: LD_INT 1
32779: EQUAL
32780: AND
32781: IFFALSE 35180
32783: GO 32785
32785: DISABLE
32786: LD_INT 0
32788: PPUSH
32789: PPUSH
32790: PPUSH
// begin enable ;
32791: ENABLE
// if not Prob ( [ 50 , 60 , 70 ] [ Difficulty ] ) then
32792: LD_INT 50
32794: PUSH
32795: LD_INT 60
32797: PUSH
32798: LD_INT 70
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: PUSH
32806: LD_OWVAR 67
32810: ARRAY
32811: PPUSH
32812: CALL_OW 13
32816: NOT
32817: IFFALSE 32821
// exit ;
32819: GO 35180
// tpUnit = FilterUnitsInArea ( AllianceTeleport , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_control , 1 ] ] ] ) [ 1 ] ;
32821: LD_ADDR_VAR 0 1
32825: PUSH
32826: LD_INT 33
32828: PPUSH
32829: LD_INT 22
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 21
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 33
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PPUSH
32871: CALL_OW 70
32875: PUSH
32876: LD_INT 1
32878: ARRAY
32879: ST_TO_ADDR
// heroes = [ JMM , Joan , Stevens , Baker , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Connie ] ;
32880: LD_ADDR_VAR 0 2
32884: PUSH
32885: LD_EXP 1
32889: PUSH
32890: LD_EXP 2
32894: PUSH
32895: LD_EXP 3
32899: PUSH
32900: LD_EXP 21
32904: PUSH
32905: LD_EXP 4
32909: PUSH
32910: LD_EXP 5
32914: PUSH
32915: LD_EXP 6
32919: PUSH
32920: LD_EXP 7
32924: PUSH
32925: LD_EXP 8
32929: PUSH
32930: LD_EXP 9
32934: PUSH
32935: LD_EXP 10
32939: PUSH
32940: LD_EXP 11
32944: PUSH
32945: LD_EXP 12
32949: PUSH
32950: LD_EXP 13
32954: PUSH
32955: LD_EXP 14
32959: PUSH
32960: LD_EXP 15
32964: PUSH
32965: LD_EXP 16
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: ST_TO_ADDR
// InGameOn ;
32989: CALL_OW 8
// SetAttitude ( 1 , 7 , att_friend , true ) ;
32993: LD_INT 1
32995: PPUSH
32996: LD_INT 7
32998: PPUSH
32999: LD_INT 1
33001: PPUSH
33002: LD_INT 1
33004: PPUSH
33005: CALL_OW 80
// CenterNowOnUnits ( tpUnit ) ;
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 87
// if GetType ( tpUnit ) = unit_vehicle then
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL_OW 247
33027: PUSH
33028: LD_INT 2
33030: EQUAL
33031: IFFALSE 33052
// tpUnit = UnitsInside ( tpUnit ) [ 1 ] ;
33033: LD_ADDR_VAR 0 1
33037: PUSH
33038: LD_VAR 0 1
33042: PPUSH
33043: CALL_OW 313
33047: PUSH
33048: LD_INT 1
33050: ARRAY
33051: ST_TO_ADDR
// ComExitVehicle ( tpUnit ) ;
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 121
// wait ( 0 0$1 ) ;
33061: LD_INT 35
33063: PPUSH
33064: CALL_OW 67
// TeleportUnit ( tpUnit , 248 , 186 , 4 , true ) ;
33068: LD_VAR 0 1
33072: PPUSH
33073: LD_INT 248
33075: PPUSH
33076: LD_INT 186
33078: PPUSH
33079: LD_INT 4
33081: PPUSH
33082: LD_INT 1
33084: PPUSH
33085: CALL_OW 483
// wait ( 0 0$2 ) ;
33089: LD_INT 70
33091: PPUSH
33092: CALL_OW 67
// CenterNowOnUnits ( tpUnit ) ;
33096: LD_VAR 0 1
33100: PPUSH
33101: CALL_OW 87
// ComTurnUnit ( tpUnit , Roth ) ;
33105: LD_VAR 0 1
33109: PPUSH
33110: LD_EXP 28
33114: PPUSH
33115: CALL_OW 119
// ComTurnUnit ( [ Roth , Simms ] , tpUnit ) ;
33119: LD_EXP 28
33123: PUSH
33124: LD_EXP 48
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PPUSH
33133: LD_VAR 0 1
33137: PPUSH
33138: CALL_OW 119
// if tpUnit = JMM then
33142: LD_VAR 0 1
33146: PUSH
33147: LD_EXP 1
33151: EQUAL
33152: IFFALSE 33166
// Say ( JMM , DA1-JMM-1 ) ;
33154: LD_EXP 1
33158: PPUSH
33159: LD_STRING DA1-JMM-1
33161: PPUSH
33162: CALL_OW 88
// if tpUnit = Joan then
33166: LD_VAR 0 1
33170: PUSH
33171: LD_EXP 2
33175: EQUAL
33176: IFFALSE 33190
// Say ( Joan , DA1-Joan-1 ) ;
33178: LD_EXP 2
33182: PPUSH
33183: LD_STRING DA1-Joan-1
33185: PPUSH
33186: CALL_OW 88
// if tpUnit = Lisa then
33190: LD_VAR 0 1
33194: PUSH
33195: LD_EXP 4
33199: EQUAL
33200: IFFALSE 33214
// Say ( Lisa , DA1-Lisa-1 ) ;
33202: LD_EXP 4
33206: PPUSH
33207: LD_STRING DA1-Lisa-1
33209: PPUSH
33210: CALL_OW 88
// if tpUnit = Donaldson then
33214: LD_VAR 0 1
33218: PUSH
33219: LD_EXP 5
33223: EQUAL
33224: IFFALSE 33238
// Say ( Donaldson , DA1-Don-1 ) ;
33226: LD_EXP 5
33230: PPUSH
33231: LD_STRING DA1-Don-1
33233: PPUSH
33234: CALL_OW 88
// if tpUnit = Cornel then
33238: LD_VAR 0 1
33242: PUSH
33243: LD_EXP 12
33247: EQUAL
33248: IFFALSE 33262
// Say ( Cornel , DA1-Corn-1 ) ;
33250: LD_EXP 12
33254: PPUSH
33255: LD_STRING DA1-Corn-1
33257: PPUSH
33258: CALL_OW 88
// if tpUnit = Denis then
33262: LD_VAR 0 1
33266: PUSH
33267: LD_EXP 8
33271: EQUAL
33272: IFFALSE 33286
// Say ( Denis , DA1-Den-1 ) ;
33274: LD_EXP 8
33278: PPUSH
33279: LD_STRING DA1-Den-1
33281: PPUSH
33282: CALL_OW 88
// if tpUnit = Bobby then
33286: LD_VAR 0 1
33290: PUSH
33291: LD_EXP 6
33295: EQUAL
33296: IFFALSE 33310
// Say ( Bobby , DA1-Bobby-1 ) ;
33298: LD_EXP 6
33302: PPUSH
33303: LD_STRING DA1-Bobby-1
33305: PPUSH
33306: CALL_OW 88
// if tpUnit = Gladstone then
33310: LD_VAR 0 1
33314: PUSH
33315: LD_EXP 10
33319: EQUAL
33320: IFFALSE 33334
// Say ( Gladstone , DA1-Glad-1 ) ;
33322: LD_EXP 10
33326: PPUSH
33327: LD_STRING DA1-Glad-1
33329: PPUSH
33330: CALL_OW 88
// if tpUnit = Cyrus then
33334: LD_VAR 0 1
33338: PUSH
33339: LD_EXP 7
33343: EQUAL
33344: IFFALSE 33358
// Say ( Cyrus , DA1-Cyrus-1 ) ;
33346: LD_EXP 7
33350: PPUSH
33351: LD_STRING DA1-Cyrus-1
33353: PPUSH
33354: CALL_OW 88
// if tpUnit = Stevens then
33358: LD_VAR 0 1
33362: PUSH
33363: LD_EXP 3
33367: EQUAL
33368: IFFALSE 33382
// Say ( Stevens , DA1-Huck-1 ) ;
33370: LD_EXP 3
33374: PPUSH
33375: LD_STRING DA1-Huck-1
33377: PPUSH
33378: CALL_OW 88
// if tpUnit = Baker then
33382: LD_VAR 0 1
33386: PUSH
33387: LD_EXP 21
33391: EQUAL
33392: IFFALSE 33406
// Say ( Baker , DA1-Huck-1 ) ;
33394: LD_EXP 21
33398: PPUSH
33399: LD_STRING DA1-Huck-1
33401: PPUSH
33402: CALL_OW 88
// if tpUnit = Brown then
33406: LD_VAR 0 1
33410: PUSH
33411: LD_EXP 9
33415: EQUAL
33416: IFFALSE 33430
// Say ( Brown , DA1-Brown-1 ) ;
33418: LD_EXP 9
33422: PPUSH
33423: LD_STRING DA1-Brown-1
33425: PPUSH
33426: CALL_OW 88
// if tpUnit = Gary then
33430: LD_VAR 0 1
33434: PUSH
33435: LD_EXP 13
33439: EQUAL
33440: IFFALSE 33454
// Say ( Gary , DA1-Gary-1 ) ;
33442: LD_EXP 13
33446: PPUSH
33447: LD_STRING DA1-Gary-1
33449: PPUSH
33450: CALL_OW 88
// if tpUnit = Connie then
33454: LD_VAR 0 1
33458: PUSH
33459: LD_EXP 16
33463: EQUAL
33464: IFFALSE 33478
// Say ( Connie , DA1-Con-1 ) ;
33466: LD_EXP 16
33470: PPUSH
33471: LD_STRING DA1-Con-1
33473: PPUSH
33474: CALL_OW 88
// if tpUnit = Kurt then
33478: LD_VAR 0 1
33482: PUSH
33483: LD_EXP 30
33487: EQUAL
33488: IFFALSE 33502
// Say ( Kurt , DA1-Kurt-1 ) ;
33490: LD_EXP 30
33494: PPUSH
33495: LD_STRING DA1-Kurt-1
33497: PPUSH
33498: CALL_OW 88
// if tpUnit = Kikuchi then
33502: LD_VAR 0 1
33506: PUSH
33507: LD_EXP 15
33511: EQUAL
33512: IFFALSE 33526
// Say ( Kikuchi , DA1-Yam-1 ) ;
33514: LD_EXP 15
33518: PPUSH
33519: LD_STRING DA1-Yam-1
33521: PPUSH
33522: CALL_OW 88
// if tpUnit = Frank then
33526: LD_VAR 0 1
33530: PUSH
33531: LD_EXP 14
33535: EQUAL
33536: IFFALSE 33550
// Say ( Frank , DA1-Frank-1 ) ;
33538: LD_EXP 14
33542: PPUSH
33543: LD_STRING DA1-Frank-1
33545: PPUSH
33546: CALL_OW 88
// if not tpUnit in heroes then
33550: LD_VAR 0 1
33554: PUSH
33555: LD_VAR 0 2
33559: IN
33560: NOT
33561: IFFALSE 33617
// begin if GetSex ( tpUnit ) = 1 then
33563: LD_VAR 0 1
33567: PPUSH
33568: CALL_OW 258
33572: PUSH
33573: LD_INT 1
33575: EQUAL
33576: IFFALSE 33590
// Say ( tpUnit , DA1-Sol1-1 ) ;
33578: LD_VAR 0 1
33582: PPUSH
33583: LD_STRING DA1-Sol1-1
33585: PPUSH
33586: CALL_OW 88
// if GetSex ( tpUnit ) = 2 then
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 258
33599: PUSH
33600: LD_INT 2
33602: EQUAL
33603: IFFALSE 33617
// Say ( tpUnit , DA1-FSol1-1 ) ;
33605: LD_VAR 0 1
33609: PPUSH
33610: LD_STRING DA1-FSol1-1
33612: PPUSH
33613: CALL_OW 88
// end ; Say ( Roth , DA-Roth-1 ) ;
33617: LD_EXP 28
33621: PPUSH
33622: LD_STRING DA-Roth-1
33624: PPUSH
33625: CALL_OW 88
// Say ( Simms , DA-Sim-1 ) ;
33629: LD_EXP 48
33633: PPUSH
33634: LD_STRING DA-Sim-1
33636: PPUSH
33637: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
33641: LD_EXP 28
33645: PPUSH
33646: LD_STRING DA-Roth-2
33648: PPUSH
33649: CALL_OW 88
// if tpUnit = JMM then
33653: LD_VAR 0 1
33657: PUSH
33658: LD_EXP 1
33662: EQUAL
33663: IFFALSE 33696
// begin Say ( JMM , DA1-JMM-1a ) ;
33665: LD_EXP 1
33669: PPUSH
33670: LD_STRING DA1-JMM-1a
33672: PPUSH
33673: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33677: LD_EXP 28
33681: PPUSH
33682: LD_STRING DA-Roth-3a
33684: PPUSH
33685: CALL_OW 88
// YouLost ( JMMCaptured ) ;
33689: LD_STRING JMMCaptured
33691: PPUSH
33692: CALL_OW 104
// end ; if tpUnit = Joan then
33696: LD_VAR 0 1
33700: PUSH
33701: LD_EXP 2
33705: EQUAL
33706: IFFALSE 33768
// begin Say ( Joan , DA1-Joan-1a ) ;
33708: LD_EXP 2
33712: PPUSH
33713: LD_STRING DA1-Joan-1a
33715: PPUSH
33716: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33720: LD_EXP 28
33724: PPUSH
33725: LD_STRING DA-Roth-3a
33727: PPUSH
33728: CALL_OW 88
// SetSide ( Joan , 4 ) ;
33732: LD_EXP 2
33736: PPUSH
33737: LD_INT 4
33739: PPUSH
33740: CALL_OW 235
// ComMoveXY ( Joan , 257 , 198 ) ;
33744: LD_EXP 2
33748: PPUSH
33749: LD_INT 257
33751: PPUSH
33752: LD_INT 198
33754: PPUSH
33755: CALL_OW 111
// AddComHold ( Joan ) ;
33759: LD_EXP 2
33763: PPUSH
33764: CALL_OW 200
// end ; if tpUnit = Donaldson then
33768: LD_VAR 0 1
33772: PUSH
33773: LD_EXP 5
33777: EQUAL
33778: IFFALSE 33831
// begin Say ( Donaldson , DA1-Don-1a ) ;
33780: LD_EXP 5
33784: PPUSH
33785: LD_STRING DA1-Don-1a
33787: PPUSH
33788: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33792: LD_EXP 28
33796: PPUSH
33797: LD_STRING DA-Roth-3
33799: PPUSH
33800: CALL_OW 88
// SetSide ( Donaldson , 7 ) ;
33804: LD_EXP 5
33808: PPUSH
33809: LD_INT 7
33811: PPUSH
33812: CALL_OW 235
// ComMoveXY ( Donaldson , 240 , 188 ) ;
33816: LD_EXP 5
33820: PPUSH
33821: LD_INT 240
33823: PPUSH
33824: LD_INT 188
33826: PPUSH
33827: CALL_OW 111
// end ; if tpUnit = Cornel then
33831: LD_VAR 0 1
33835: PUSH
33836: LD_EXP 12
33840: EQUAL
33841: IFFALSE 33903
// begin Say ( Cornel , DA1-Corn-1a ) ;
33843: LD_EXP 12
33847: PPUSH
33848: LD_STRING DA1-Corn-1a
33850: PPUSH
33851: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
33855: LD_EXP 28
33859: PPUSH
33860: LD_STRING DA-Roth-3a
33862: PPUSH
33863: CALL_OW 88
// SetSide ( Cornel , 4 ) ;
33867: LD_EXP 12
33871: PPUSH
33872: LD_INT 4
33874: PPUSH
33875: CALL_OW 235
// ComMoveXY ( Cornel , 257 , 198 ) ;
33879: LD_EXP 12
33883: PPUSH
33884: LD_INT 257
33886: PPUSH
33887: LD_INT 198
33889: PPUSH
33890: CALL_OW 111
// AddComHold ( Cornel ) ;
33894: LD_EXP 12
33898: PPUSH
33899: CALL_OW 200
// end ; if tpUnit = Denis then
33903: LD_VAR 0 1
33907: PUSH
33908: LD_EXP 8
33912: EQUAL
33913: IFFALSE 33966
// begin Say ( Denis , DA1-Den-1a ) ;
33915: LD_EXP 8
33919: PPUSH
33920: LD_STRING DA1-Den-1a
33922: PPUSH
33923: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33927: LD_EXP 28
33931: PPUSH
33932: LD_STRING DA-Roth-3
33934: PPUSH
33935: CALL_OW 88
// SetSide ( Denis , 7 ) ;
33939: LD_EXP 8
33943: PPUSH
33944: LD_INT 7
33946: PPUSH
33947: CALL_OW 235
// ComMoveXY ( Denis , 240 , 188 ) ;
33951: LD_EXP 8
33955: PPUSH
33956: LD_INT 240
33958: PPUSH
33959: LD_INT 188
33961: PPUSH
33962: CALL_OW 111
// end ; if tpUnit = Bobby then
33966: LD_VAR 0 1
33970: PUSH
33971: LD_EXP 6
33975: EQUAL
33976: IFFALSE 34029
// begin Say ( Joan , DA1-Bobby-1a ) ;
33978: LD_EXP 2
33982: PPUSH
33983: LD_STRING DA1-Bobby-1a
33985: PPUSH
33986: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
33990: LD_EXP 28
33994: PPUSH
33995: LD_STRING DA-Roth-3
33997: PPUSH
33998: CALL_OW 88
// SetSide ( Bobby , 7 ) ;
34002: LD_EXP 6
34006: PPUSH
34007: LD_INT 7
34009: PPUSH
34010: CALL_OW 235
// ComMoveXY ( Bobby , 240 , 188 ) ;
34014: LD_EXP 6
34018: PPUSH
34019: LD_INT 240
34021: PPUSH
34022: LD_INT 188
34024: PPUSH
34025: CALL_OW 111
// end ; if tpUnit = Gladstone then
34029: LD_VAR 0 1
34033: PUSH
34034: LD_EXP 10
34038: EQUAL
34039: IFFALSE 34101
// begin Say ( Gladstone , DA1-Glad-1a ) ;
34041: LD_EXP 10
34045: PPUSH
34046: LD_STRING DA1-Glad-1a
34048: PPUSH
34049: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34053: LD_EXP 28
34057: PPUSH
34058: LD_STRING DA-Roth-3a
34060: PPUSH
34061: CALL_OW 88
// SetSide ( Gladstone , 4 ) ;
34065: LD_EXP 10
34069: PPUSH
34070: LD_INT 4
34072: PPUSH
34073: CALL_OW 235
// ComMoveXY ( Gladstone , 257 , 198 ) ;
34077: LD_EXP 10
34081: PPUSH
34082: LD_INT 257
34084: PPUSH
34085: LD_INT 198
34087: PPUSH
34088: CALL_OW 111
// AddComHold ( Gladstone ) ;
34092: LD_EXP 10
34096: PPUSH
34097: CALL_OW 200
// end ; if tpUnit = Cyrus then
34101: LD_VAR 0 1
34105: PUSH
34106: LD_EXP 7
34110: EQUAL
34111: IFFALSE 34173
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
34113: LD_EXP 7
34117: PPUSH
34118: LD_STRING DA1-Cyrus-1a
34120: PPUSH
34121: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34125: LD_EXP 28
34129: PPUSH
34130: LD_STRING DA-Roth-3a
34132: PPUSH
34133: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
34137: LD_EXP 7
34141: PPUSH
34142: LD_INT 4
34144: PPUSH
34145: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
34149: LD_EXP 7
34153: PPUSH
34154: LD_INT 257
34156: PPUSH
34157: LD_INT 198
34159: PPUSH
34160: CALL_OW 111
// AddComHold ( Cyrus ) ;
34164: LD_EXP 7
34168: PPUSH
34169: CALL_OW 200
// end ; if tpUnit = Stevens then
34173: LD_VAR 0 1
34177: PUSH
34178: LD_EXP 3
34182: EQUAL
34183: IFFALSE 34236
// begin Say ( Stevens , DA1-Huck-1a ) ;
34185: LD_EXP 3
34189: PPUSH
34190: LD_STRING DA1-Huck-1a
34192: PPUSH
34193: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34197: LD_EXP 28
34201: PPUSH
34202: LD_STRING DA-Roth-3
34204: PPUSH
34205: CALL_OW 88
// SetSide ( Stevens , 7 ) ;
34209: LD_EXP 3
34213: PPUSH
34214: LD_INT 7
34216: PPUSH
34217: CALL_OW 235
// ComMoveXY ( Stevens , 240 , 188 ) ;
34221: LD_EXP 3
34225: PPUSH
34226: LD_INT 240
34228: PPUSH
34229: LD_INT 188
34231: PPUSH
34232: CALL_OW 111
// end ; if tpUnit = Baker then
34236: LD_VAR 0 1
34240: PUSH
34241: LD_EXP 21
34245: EQUAL
34246: IFFALSE 34299
// begin Say ( Baker , DA1-Huck-1a ) ;
34248: LD_EXP 21
34252: PPUSH
34253: LD_STRING DA1-Huck-1a
34255: PPUSH
34256: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34260: LD_EXP 28
34264: PPUSH
34265: LD_STRING DA-Roth-3
34267: PPUSH
34268: CALL_OW 88
// SetSide ( Baker , 7 ) ;
34272: LD_EXP 21
34276: PPUSH
34277: LD_INT 7
34279: PPUSH
34280: CALL_OW 235
// ComMoveXY ( Baker , 240 , 188 ) ;
34284: LD_EXP 21
34288: PPUSH
34289: LD_INT 240
34291: PPUSH
34292: LD_INT 188
34294: PPUSH
34295: CALL_OW 111
// end ; if tpUnit = Brown then
34299: LD_VAR 0 1
34303: PUSH
34304: LD_EXP 9
34308: EQUAL
34309: IFFALSE 34362
// begin Say ( Cyrus , DA1-Brown-1a ) ;
34311: LD_EXP 7
34315: PPUSH
34316: LD_STRING DA1-Brown-1a
34318: PPUSH
34319: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34323: LD_EXP 28
34327: PPUSH
34328: LD_STRING DA-Roth-3
34330: PPUSH
34331: CALL_OW 88
// SetSide ( Brown , 7 ) ;
34335: LD_EXP 9
34339: PPUSH
34340: LD_INT 7
34342: PPUSH
34343: CALL_OW 235
// ComMoveXY ( Brown , 240 , 188 ) ;
34347: LD_EXP 9
34351: PPUSH
34352: LD_INT 240
34354: PPUSH
34355: LD_INT 188
34357: PPUSH
34358: CALL_OW 111
// end ; if tpUnit = Gary then
34362: LD_VAR 0 1
34366: PUSH
34367: LD_EXP 13
34371: EQUAL
34372: IFFALSE 34434
// begin Say ( Gary , DA1-Gary-1a ) ;
34374: LD_EXP 13
34378: PPUSH
34379: LD_STRING DA1-Gary-1a
34381: PPUSH
34382: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34386: LD_EXP 28
34390: PPUSH
34391: LD_STRING DA-Roth-3a
34393: PPUSH
34394: CALL_OW 88
// SetSide ( Gary , 4 ) ;
34398: LD_EXP 13
34402: PPUSH
34403: LD_INT 4
34405: PPUSH
34406: CALL_OW 235
// ComMoveXY ( Gary , 257 , 198 ) ;
34410: LD_EXP 13
34414: PPUSH
34415: LD_INT 257
34417: PPUSH
34418: LD_INT 198
34420: PPUSH
34421: CALL_OW 111
// AddComHold ( Gary ) ;
34425: LD_EXP 13
34429: PPUSH
34430: CALL_OW 200
// end ; if tpUnit = Cyrus then
34434: LD_VAR 0 1
34438: PUSH
34439: LD_EXP 7
34443: EQUAL
34444: IFFALSE 34506
// begin Say ( Cyrus , DA1-Cyrus-1a ) ;
34446: LD_EXP 7
34450: PPUSH
34451: LD_STRING DA1-Cyrus-1a
34453: PPUSH
34454: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34458: LD_EXP 28
34462: PPUSH
34463: LD_STRING DA-Roth-3a
34465: PPUSH
34466: CALL_OW 88
// SetSide ( Cyrus , 4 ) ;
34470: LD_EXP 7
34474: PPUSH
34475: LD_INT 4
34477: PPUSH
34478: CALL_OW 235
// ComMoveXY ( Cyrus , 257 , 198 ) ;
34482: LD_EXP 7
34486: PPUSH
34487: LD_INT 257
34489: PPUSH
34490: LD_INT 198
34492: PPUSH
34493: CALL_OW 111
// AddComHold ( Cyrus ) ;
34497: LD_EXP 7
34501: PPUSH
34502: CALL_OW 200
// end ; if tpUnit = Connie then
34506: LD_VAR 0 1
34510: PUSH
34511: LD_EXP 16
34515: EQUAL
34516: IFFALSE 34578
// begin Say ( Connie , DA1-Con-1a ) ;
34518: LD_EXP 16
34522: PPUSH
34523: LD_STRING DA1-Con-1a
34525: PPUSH
34526: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34530: LD_EXP 28
34534: PPUSH
34535: LD_STRING DA-Roth-3a
34537: PPUSH
34538: CALL_OW 88
// SetSide ( Connie , 4 ) ;
34542: LD_EXP 16
34546: PPUSH
34547: LD_INT 4
34549: PPUSH
34550: CALL_OW 235
// ComMoveXY ( Connie , 257 , 198 ) ;
34554: LD_EXP 16
34558: PPUSH
34559: LD_INT 257
34561: PPUSH
34562: LD_INT 198
34564: PPUSH
34565: CALL_OW 111
// AddComHold ( Connie ) ;
34569: LD_EXP 16
34573: PPUSH
34574: CALL_OW 200
// end ; if tpUnit = Kurt then
34578: LD_VAR 0 1
34582: PUSH
34583: LD_EXP 30
34587: EQUAL
34588: IFFALSE 34650
// begin Say ( Kurt , DA1-Kurt-1a ) ;
34590: LD_EXP 30
34594: PPUSH
34595: LD_STRING DA1-Kurt-1a
34597: PPUSH
34598: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34602: LD_EXP 28
34606: PPUSH
34607: LD_STRING DA-Roth-3a
34609: PPUSH
34610: CALL_OW 88
// SetSide ( Kurt , 4 ) ;
34614: LD_EXP 30
34618: PPUSH
34619: LD_INT 4
34621: PPUSH
34622: CALL_OW 235
// ComMoveXY ( Kurt , 257 , 198 ) ;
34626: LD_EXP 30
34630: PPUSH
34631: LD_INT 257
34633: PPUSH
34634: LD_INT 198
34636: PPUSH
34637: CALL_OW 111
// AddComHold ( Kurt ) ;
34641: LD_EXP 30
34645: PPUSH
34646: CALL_OW 200
// end ; if tpUnit = Kikuchi then
34650: LD_VAR 0 1
34654: PUSH
34655: LD_EXP 15
34659: EQUAL
34660: IFFALSE 34713
// begin Say ( Kikuchi , DA1-Yam-1a ) ;
34662: LD_EXP 15
34666: PPUSH
34667: LD_STRING DA1-Yam-1a
34669: PPUSH
34670: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34674: LD_EXP 28
34678: PPUSH
34679: LD_STRING DA-Roth-3
34681: PPUSH
34682: CALL_OW 88
// SetSide ( Kikuchi , 7 ) ;
34686: LD_EXP 15
34690: PPUSH
34691: LD_INT 7
34693: PPUSH
34694: CALL_OW 235
// ComMoveXY ( Kikuchi , 240 , 188 ) ;
34698: LD_EXP 15
34702: PPUSH
34703: LD_INT 240
34705: PPUSH
34706: LD_INT 188
34708: PPUSH
34709: CALL_OW 111
// end ; if tpUnit = Frank then
34713: LD_VAR 0 1
34717: PUSH
34718: LD_EXP 14
34722: EQUAL
34723: IFFALSE 34785
// begin Say ( Frank , DA1-Frank-1a ) ;
34725: LD_EXP 14
34729: PPUSH
34730: LD_STRING DA1-Frank-1a
34732: PPUSH
34733: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34737: LD_EXP 28
34741: PPUSH
34742: LD_STRING DA-Roth-3a
34744: PPUSH
34745: CALL_OW 88
// SetSide ( Frank , 4 ) ;
34749: LD_EXP 14
34753: PPUSH
34754: LD_INT 4
34756: PPUSH
34757: CALL_OW 235
// ComMoveXY ( Frank , 257 , 198 ) ;
34761: LD_EXP 14
34765: PPUSH
34766: LD_INT 257
34768: PPUSH
34769: LD_INT 198
34771: PPUSH
34772: CALL_OW 111
// AddComHold ( Frank ) ;
34776: LD_EXP 14
34780: PPUSH
34781: CALL_OW 200
// end ; if allianceFirstContact = 0 then
34785: LD_EXP 64
34789: PUSH
34790: LD_INT 0
34792: EQUAL
34793: IFFALSE 34839
// begin Say ( JMM , DAa-JMM-1 ) ;
34795: LD_EXP 1
34799: PPUSH
34800: LD_STRING DAa-JMM-1
34802: PPUSH
34803: CALL_OW 88
// Say ( JMM , DAa-JMM-1a ) ;
34807: LD_EXP 1
34811: PPUSH
34812: LD_STRING DAa-JMM-1a
34814: PPUSH
34815: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
34819: LD_EXP 1
34823: PPUSH
34824: LD_STRING DAa-JMM-1b
34826: PPUSH
34827: CALL_OW 88
// allianceFirstContact = 1 ;
34831: LD_ADDR_EXP 64
34835: PUSH
34836: LD_INT 1
34838: ST_TO_ADDR
// end ; if not tpUnit in heroes then
34839: LD_VAR 0 1
34843: PUSH
34844: LD_VAR 0 2
34848: IN
34849: NOT
34850: IFFALSE 35160
// begin rnd = Rand ( 1 , 2 ) ;
34852: LD_ADDR_VAR 0 3
34856: PUSH
34857: LD_INT 1
34859: PPUSH
34860: LD_INT 2
34862: PPUSH
34863: CALL_OW 12
34867: ST_TO_ADDR
// if GetSex ( tpUnit ) = 1 then
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 258
34877: PUSH
34878: LD_INT 1
34880: EQUAL
34881: IFFALSE 35014
// begin if rnd = 1 then
34883: LD_VAR 0 3
34887: PUSH
34888: LD_INT 1
34890: EQUAL
34891: IFFALSE 34953
// begin Say ( tpUnit , DA1-Sol1-1a ) ;
34893: LD_VAR 0 1
34897: PPUSH
34898: LD_STRING DA1-Sol1-1a
34900: PPUSH
34901: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
34905: LD_EXP 28
34909: PPUSH
34910: LD_STRING DA-Roth-3a
34912: PPUSH
34913: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
34917: LD_VAR 0 1
34921: PPUSH
34922: LD_INT 4
34924: PPUSH
34925: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
34929: LD_VAR 0 1
34933: PPUSH
34934: LD_INT 257
34936: PPUSH
34937: LD_INT 198
34939: PPUSH
34940: CALL_OW 111
// AddComHold ( tpUnit ) ;
34944: LD_VAR 0 1
34948: PPUSH
34949: CALL_OW 200
// end ; if rnd = 2 then
34953: LD_VAR 0 3
34957: PUSH
34958: LD_INT 2
34960: EQUAL
34961: IFFALSE 35014
// begin Say ( tpUnit , DA1-Sol1-1b ) ;
34963: LD_VAR 0 1
34967: PPUSH
34968: LD_STRING DA1-Sol1-1b
34970: PPUSH
34971: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
34975: LD_EXP 28
34979: PPUSH
34980: LD_STRING DA-Roth-3
34982: PPUSH
34983: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
34987: LD_VAR 0 1
34991: PPUSH
34992: LD_INT 7
34994: PPUSH
34995: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
34999: LD_VAR 0 1
35003: PPUSH
35004: LD_INT 240
35006: PPUSH
35007: LD_INT 188
35009: PPUSH
35010: CALL_OW 111
// end ; end ; if GetSex ( tpUnit ) = 2 then
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 258
35023: PUSH
35024: LD_INT 2
35026: EQUAL
35027: IFFALSE 35160
// begin if rnd = 1 then
35029: LD_VAR 0 3
35033: PUSH
35034: LD_INT 1
35036: EQUAL
35037: IFFALSE 35099
// begin Say ( tpUnit , DA1-FSol1-1a ) ;
35039: LD_VAR 0 1
35043: PPUSH
35044: LD_STRING DA1-FSol1-1a
35046: PPUSH
35047: CALL_OW 88
// Say ( Roth , DA-Roth-3a ) ;
35051: LD_EXP 28
35055: PPUSH
35056: LD_STRING DA-Roth-3a
35058: PPUSH
35059: CALL_OW 88
// SetSide ( tpUnit , 4 ) ;
35063: LD_VAR 0 1
35067: PPUSH
35068: LD_INT 4
35070: PPUSH
35071: CALL_OW 235
// ComMoveXY ( tpUnit , 257 , 198 ) ;
35075: LD_VAR 0 1
35079: PPUSH
35080: LD_INT 257
35082: PPUSH
35083: LD_INT 198
35085: PPUSH
35086: CALL_OW 111
// AddComHold ( tpUnit ) ;
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 200
// end ; if rnd = 2 then
35099: LD_VAR 0 3
35103: PUSH
35104: LD_INT 2
35106: EQUAL
35107: IFFALSE 35160
// begin Say ( tpUnit , DA1-FSol1-1b ) ;
35109: LD_VAR 0 1
35113: PPUSH
35114: LD_STRING DA1-FSol1-1b
35116: PPUSH
35117: CALL_OW 88
// Say ( Roth , DA-Roth-3 ) ;
35121: LD_EXP 28
35125: PPUSH
35126: LD_STRING DA-Roth-3
35128: PPUSH
35129: CALL_OW 88
// SetSide ( tpUnit , 7 ) ;
35133: LD_VAR 0 1
35137: PPUSH
35138: LD_INT 7
35140: PPUSH
35141: CALL_OW 235
// ComMoveXY ( tpUnit , 240 , 188 ) ;
35145: LD_VAR 0 1
35149: PPUSH
35150: LD_INT 240
35152: PPUSH
35153: LD_INT 188
35155: PPUSH
35156: CALL_OW 111
// end ; end ; end ; SetAttitude ( 1 , 7 , att_enemy , true ) ;
35160: LD_INT 1
35162: PPUSH
35163: LD_INT 7
35165: PPUSH
35166: LD_INT 2
35168: PPUSH
35169: LD_INT 1
35171: PPUSH
35172: CALL_OW 80
// InGameOff ;
35176: CALL_OW 9
// end ;
35180: PPOPN 3
35182: END
// every 0 0$1 trigger timeAction >= 45 45$02 do
35183: LD_EXP 97
35187: PUSH
35188: LD_INT 94570
35190: GREATEREQUAL
35191: IFFALSE 35510
35193: GO 35195
35195: DISABLE
// begin DialogueOn ;
35196: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-1 , D5-FSol1-1 ) ;
35200: LD_INT 22
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 23
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 26
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 25
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 25
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 25
35255: PUSH
35256: LD_INT 3
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 25
35265: PUSH
35266: LD_INT 4
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 25
35275: PUSH
35276: LD_INT 5
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 25
35285: PUSH
35286: LD_INT 8
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: PPUSH
35308: CALL_OW 69
35312: PPUSH
35313: LD_STRING D11-Sol1-1
35315: PPUSH
35316: LD_STRING D5-FSol1-1
35318: PPUSH
35319: CALL 6912 0 3
// SayRadio ( Platonov , D11-Pla-1 ) ;
35323: LD_EXP 26
35327: PPUSH
35328: LD_STRING D11-Pla-1
35330: PPUSH
35331: CALL_OW 94
// SayRadio ( Kovalyuk , D11-Kov-1 ) ;
35335: LD_EXP 37
35339: PPUSH
35340: LD_STRING D11-Kov-1
35342: PPUSH
35343: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
35347: LD_EXP 26
35351: PPUSH
35352: LD_STRING D11-Pla-2
35354: PPUSH
35355: CALL_OW 94
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D11-Sol1-2 , D5-FSol1-1 ) ;
35359: LD_INT 22
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 23
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 26
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 2
35391: PUSH
35392: LD_INT 25
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 25
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 25
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 25
35424: PUSH
35425: LD_INT 4
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 25
35434: PUSH
35435: LD_INT 5
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 25
35444: PUSH
35445: LD_INT 8
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: PPUSH
35467: CALL_OW 69
35471: PPUSH
35472: LD_STRING D11-Sol1-2
35474: PPUSH
35475: LD_STRING D5-FSol1-1
35477: PPUSH
35478: CALL 6912 0 3
// Say ( JMM , D11-JMM-2 ) ;
35482: LD_EXP 1
35486: PPUSH
35487: LD_STRING D11-JMM-2
35489: PPUSH
35490: CALL_OW 88
// DialogueOff ;
35494: CALL_OW 7
// PreapreMehBehs ;
35498: CALL 5761 0 0
// missionStage = 5 ;
35502: LD_ADDR_EXP 101
35506: PUSH
35507: LD_INT 5
35509: ST_TO_ADDR
// end ;
35510: END
// every 0 0$1 trigger timeAction >= 50 50$02 do var dec , time ;
35511: LD_EXP 97
35515: PUSH
35516: LD_INT 105070
35518: GREATEREQUAL
35519: IFFALSE 35913
35521: GO 35523
35523: DISABLE
35524: LD_INT 0
35526: PPUSH
35527: PPUSH
// begin time = 0 0$00 ;
35528: LD_ADDR_VAR 0 2
35532: PUSH
35533: LD_INT 0
35535: ST_TO_ADDR
// DialogueOn ;
35536: CALL_OW 6
// SayRadio ( Platonov , D15-Pla-1 ) ;
35540: LD_EXP 26
35544: PPUSH
35545: LD_STRING D15-Pla-1
35547: PPUSH
35548: CALL_OW 94
// dec = Query ( Q15a ) ;
35552: LD_ADDR_VAR 0 1
35556: PUSH
35557: LD_STRING Q15a
35559: PPUSH
35560: CALL_OW 97
35564: ST_TO_ADDR
// if dec = 1 then
35565: LD_VAR 0 1
35569: PUSH
35570: LD_INT 1
35572: EQUAL
35573: IFFALSE 35594
// begin Say ( JMM , D15a-JMM-1 ) ;
35575: LD_EXP 1
35579: PPUSH
35580: LD_STRING D15a-JMM-1
35582: PPUSH
35583: CALL_OW 88
// YouLost ( Surrender ) ;
35587: LD_STRING Surrender
35589: PPUSH
35590: CALL_OW 104
// end ; if dec = 2 then
35594: LD_VAR 0 1
35598: PUSH
35599: LD_INT 2
35601: EQUAL
35602: IFFALSE 35632
// begin Say ( JMM , D15b-JMM-1 ) ;
35604: LD_EXP 1
35608: PPUSH
35609: LD_STRING D15b-JMM-1
35611: PPUSH
35612: CALL_OW 88
// SayRadio ( Platonov , D15b-Pla-1 ) ;
35616: LD_EXP 26
35620: PPUSH
35621: LD_STRING D15b-Pla-1
35623: PPUSH
35624: CALL_OW 94
// DialogueOff ;
35628: CALL_OW 7
// end ; if dec = 3 then
35632: LD_VAR 0 1
35636: PUSH
35637: LD_INT 3
35639: EQUAL
35640: IFFALSE 35716
// begin Say ( JMM , D15c-JMM-1 ) ;
35642: LD_EXP 1
35646: PPUSH
35647: LD_STRING D15c-JMM-1
35649: PPUSH
35650: CALL_OW 88
// SayRadio ( Platonov , D15c-Pla-1 ) ;
35654: LD_EXP 26
35658: PPUSH
35659: LD_STRING D15c-Pla-1
35661: PPUSH
35662: CALL_OW 94
// DialogueOff ;
35666: CALL_OW 7
// wait ( 0 0$15 ) ;
35670: LD_INT 525
35672: PPUSH
35673: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
35677: LD_EXP 26
35681: PPUSH
35682: LD_STRING D18-Pla-1
35684: PPUSH
35685: CALL_OW 88
// ComAttackPlace ( rurocket , GetX ( JMM ) , GetY ( JMM ) ) ;
35689: LD_INT 273
35691: PPUSH
35692: LD_EXP 1
35696: PPUSH
35697: CALL_OW 250
35701: PPUSH
35702: LD_EXP 1
35706: PPUSH
35707: CALL_OW 251
35711: PPUSH
35712: CALL_OW 116
// end ; if dec = 4 then
35716: LD_VAR 0 1
35720: PUSH
35721: LD_INT 4
35723: EQUAL
35724: IFFALSE 35762
// begin Say ( JMM , D15d-JMM-1 ) ;
35726: LD_EXP 1
35730: PPUSH
35731: LD_STRING D15d-JMM-1
35733: PPUSH
35734: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35738: LD_EXP 26
35742: PPUSH
35743: LD_STRING D15d-Pla-1
35745: PPUSH
35746: CALL_OW 94
// DialogueOff ;
35750: CALL_OW 7
// missionStage = 6 ;
35754: LD_ADDR_EXP 101
35758: PUSH
35759: LD_INT 6
35761: ST_TO_ADDR
// end ; if dec = 2 then
35762: LD_VAR 0 1
35766: PUSH
35767: LD_INT 2
35769: EQUAL
35770: IFFALSE 35843
// begin repeat wait ( 0 0$01 ) ;
35772: LD_INT 35
35774: PPUSH
35775: CALL_OW 67
// time = time + 0 0$01 ;
35779: LD_ADDR_VAR 0 2
35783: PUSH
35784: LD_VAR 0 2
35788: PUSH
35789: LD_INT 35
35791: PLUS
35792: ST_TO_ADDR
// until time >= 3 3$00 ;
35793: LD_VAR 0 2
35797: PUSH
35798: LD_INT 6300
35800: GREATEREQUAL
35801: IFFALSE 35772
// DialogueOn ;
35803: CALL_OW 6
// Say ( JMM , D15d-JMM-1a ) ;
35807: LD_EXP 1
35811: PPUSH
35812: LD_STRING D15d-JMM-1a
35814: PPUSH
35815: CALL_OW 88
// SayRadio ( Platonov , D15d-Pla-1 ) ;
35819: LD_EXP 26
35823: PPUSH
35824: LD_STRING D15d-Pla-1
35826: PPUSH
35827: CALL_OW 94
// DialogueOff ;
35831: CALL_OW 7
// missionStage = 6 ;
35835: LD_ADDR_EXP 101
35839: PUSH
35840: LD_INT 6
35842: ST_TO_ADDR
// end ; if IsOk ( LegionFriend ) and GetSide ( LegionFriend ) = 1 then
35843: LD_EXP 53
35847: PPUSH
35848: CALL_OW 302
35852: PUSH
35853: LD_EXP 53
35857: PPUSH
35858: CALL_OW 255
35862: PUSH
35863: LD_INT 1
35865: EQUAL
35866: AND
35867: IFFALSE 35913
// begin DialogueOn ;
35869: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
35873: LD_EXP 1
35877: PPUSH
35878: LD_STRING D16-JMM-1
35880: PPUSH
35881: CALL_OW 88
// Say ( LegionFriend , D16-Friend-1 ) ;
35885: LD_EXP 53
35889: PPUSH
35890: LD_STRING D16-Friend-1
35892: PPUSH
35893: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
35897: LD_EXP 1
35901: PPUSH
35902: LD_STRING D16-JMM-2
35904: PPUSH
35905: CALL_OW 88
// DialogueOff ;
35909: CALL_OW 7
// end ; end ;
35913: PPOPN 2
35915: END
// every 1 1$0 trigger missionStage = 6 and IsOK ( LegionFriend ) and GetSide ( LegionFriend ) = 1 do var rocketTarget ;
35916: LD_EXP 101
35920: PUSH
35921: LD_INT 6
35923: EQUAL
35924: PUSH
35925: LD_EXP 53
35929: PPUSH
35930: CALL_OW 302
35934: AND
35935: PUSH
35936: LD_EXP 53
35940: PPUSH
35941: CALL_OW 255
35945: PUSH
35946: LD_INT 1
35948: EQUAL
35949: AND
35950: IFFALSE 36587
35952: GO 35954
35954: DISABLE
35955: LD_INT 0
35957: PPUSH
// begin DialogueOn ;
35958: CALL_OW 6
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
35962: LD_INT 22
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: LD_INT 34
35977: PUSH
35978: LD_INT 8
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 35
35987: PUSH
35988: LD_INT 8
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PPUSH
36004: CALL_OW 69
36008: PUSH
36009: LD_INT 0
36011: GREATER
36012: IFFALSE 36036
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36014: LD_EXP 26
36018: PPUSH
36019: LD_STRING D16c-Pla-1
36021: PPUSH
36022: CALL_OW 94
// playerHaveRocket = 1 ;
36026: LD_ADDR_EXP 100
36030: PUSH
36031: LD_INT 1
36033: ST_TO_ADDR
// end else
36034: GO 36495
// begin SayRadio ( Platonov , D16a-Pla-1 ) ;
36036: LD_EXP 26
36040: PPUSH
36041: LD_STRING D16a-Pla-1
36043: PPUSH
36044: CALL_OW 94
// if IsOK ( Stevens ) then
36048: LD_EXP 3
36052: PPUSH
36053: CALL_OW 302
36057: IFFALSE 36073
// begin Say ( Stevens , D16a-Huck-1 ) ;
36059: LD_EXP 3
36063: PPUSH
36064: LD_STRING D16a-Huck-1
36066: PPUSH
36067: CALL_OW 88
// end else
36071: GO 36221
// begin if IsOk ( Baker ) then
36073: LD_EXP 21
36077: PPUSH
36078: CALL_OW 302
36082: IFFALSE 36098
// begin Say ( Baker , D16a-Huck-1 ) ;
36084: LD_EXP 21
36088: PPUSH
36089: LD_STRING D16a-Huck-1
36091: PPUSH
36092: CALL_OW 88
// end else
36096: GO 36221
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D16a-Sol1-1 , D5-FSol1-1 ) ;
36098: LD_INT 22
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 23
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 26
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 25
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 25
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 25
36153: PUSH
36154: LD_INT 3
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 25
36163: PUSH
36164: LD_INT 4
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 25
36173: PUSH
36174: LD_INT 5
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 25
36183: PUSH
36184: LD_INT 8
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: PPUSH
36206: CALL_OW 69
36210: PPUSH
36211: LD_STRING D16a-Sol1-1
36213: PPUSH
36214: LD_STRING D5-FSol1-1
36216: PPUSH
36217: CALL 6912 0 3
// end ; end ; wait ( 0 0$30 ) ;
36221: LD_INT 1050
36223: PPUSH
36224: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36228: LD_EXP 26
36232: PPUSH
36233: LD_STRING D18-Pla-1
36235: PPUSH
36236: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36240: LD_ADDR_VAR 0 1
36244: PUSH
36245: LD_INT 22
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 21
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 23
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: LD_INT 30
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 30
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: PPUSH
36309: CALL_OW 69
36313: ST_TO_ADDR
// if rocketTarget = 0 then
36314: LD_VAR 0 1
36318: PUSH
36319: LD_INT 0
36321: EQUAL
36322: IFFALSE 36398
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36324: LD_ADDR_VAR 0 1
36328: PUSH
36329: LD_INT 22
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 21
36341: PUSH
36342: LD_INT 3
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 23
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 30
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 30
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: PPUSH
36393: CALL_OW 69
36397: ST_TO_ADDR
// if rocketTarget = 0 then
36398: LD_VAR 0 1
36402: PUSH
36403: LD_INT 0
36405: EQUAL
36406: IFFALSE 36460
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
36408: LD_ADDR_VAR 0 1
36412: PUSH
36413: LD_INT 22
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 21
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 23
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 50
36445: PUSH
36446: EMPTY
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: PPUSH
36455: CALL_OW 69
36459: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
36460: LD_INT 273
36462: PPUSH
36463: LD_VAR 0 1
36467: PUSH
36468: LD_INT 1
36470: ARRAY
36471: PPUSH
36472: CALL_OW 250
36476: PPUSH
36477: LD_VAR 0 1
36481: PUSH
36482: LD_INT 1
36484: ARRAY
36485: PPUSH
36486: CALL_OW 251
36490: PPUSH
36491: CALL_OW 116
// end ; Say ( JMM , D16a-JMM-1a ) ;
36495: LD_EXP 1
36499: PPUSH
36500: LD_STRING D16a-JMM-1a
36502: PPUSH
36503: CALL_OW 88
// DialogueOff ;
36507: CALL_OW 7
// SetSide ( LegionFriend , 3 ) ;
36511: LD_EXP 53
36515: PPUSH
36516: LD_INT 3
36518: PPUSH
36519: CALL_OW 235
// ComExitBuilding ( LegionFriend ) ;
36523: LD_EXP 53
36527: PPUSH
36528: CALL_OW 122
// ComExitVehicle ( LegionFriend ) ;
36532: LD_EXP 53
36536: PPUSH
36537: CALL_OW 121
// wait ( 0 0$1 ) ;
36541: LD_INT 35
36543: PPUSH
36544: CALL_OW 67
// ComMoveToArea ( LegionFriend , FriendEscapeArea ) ;
36548: LD_EXP 53
36552: PPUSH
36553: LD_INT 18
36555: PPUSH
36556: CALL_OW 113
// wait ( 0 0$3 ) ;
36560: LD_INT 105
36562: PPUSH
36563: CALL_OW 67
// DialogueOn ;
36567: CALL_OW 6
// Say ( JMM , D16a-JMM-1 ) ;
36571: LD_EXP 1
36575: PPUSH
36576: LD_STRING D16a-JMM-1
36578: PPUSH
36579: CALL_OW 88
// DialogueOff ;
36583: CALL_OW 7
// end ;
36587: PPOPN 1
36589: END
// every 0 0$1 trigger GetSide ( LegionFriend ) = 3 do var i ;
36590: LD_EXP 53
36594: PPUSH
36595: CALL_OW 255
36599: PUSH
36600: LD_INT 3
36602: EQUAL
36603: IFFALSE 36710
36605: GO 36607
36607: DISABLE
36608: LD_INT 0
36610: PPUSH
// begin enable ;
36611: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_outside ] ] ) do
36612: LD_ADDR_VAR 0 1
36616: PUSH
36617: LD_INT 22
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 21
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 56
36639: PUSH
36640: EMPTY
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: PPUSH
36648: CALL_OW 69
36652: PUSH
36653: FOR_IN
36654: IFFALSE 36708
// begin if GetDistUnits ( i , LegionFriend ) < 8 then
36656: LD_VAR 0 1
36660: PPUSH
36661: LD_EXP 53
36665: PPUSH
36666: CALL_OW 296
36670: PUSH
36671: LD_INT 8
36673: LESS
36674: IFFALSE 36706
// begin disable ;
36676: DISABLE
// DialogueOn ;
36677: CALL_OW 6
// CenterNowOnUnits ( LegionFriend ) ;
36681: LD_EXP 53
36685: PPUSH
36686: CALL_OW 87
// Say ( LegionFriend , D16a-Friend-1 ) ;
36690: LD_EXP 53
36694: PPUSH
36695: LD_STRING D16a-Friend-1
36697: PPUSH
36698: CALL_OW 88
// DialogueOff ;
36702: CALL_OW 7
// end ; end ;
36706: GO 36653
36708: POP
36709: POP
// end ;
36710: PPOPN 1
36712: END
// every 5 5$0 trigger missionStage = 6 and not GetSide ( LegionFriend ) = 1 do var rocketTarget ;
36713: LD_EXP 101
36717: PUSH
36718: LD_INT 6
36720: EQUAL
36721: PUSH
36722: LD_EXP 53
36726: PPUSH
36727: CALL_OW 255
36731: PUSH
36732: LD_INT 1
36734: EQUAL
36735: NOT
36736: AND
36737: IFFALSE 37117
36739: GO 36741
36741: DISABLE
36742: LD_INT 0
36744: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) > 0 then
36745: LD_INT 22
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: LD_INT 34
36760: PUSH
36761: LD_INT 8
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 35
36770: PUSH
36771: LD_INT 8
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PPUSH
36787: CALL_OW 69
36791: PUSH
36792: LD_INT 0
36794: GREATER
36795: IFFALSE 36819
// begin SayRadio ( Platonov , D16c-Pla-1 ) ;
36797: LD_EXP 26
36801: PPUSH
36802: LD_STRING D16c-Pla-1
36804: PPUSH
36805: CALL_OW 94
// playerHaveRocket = 1 ;
36809: LD_ADDR_EXP 100
36813: PUSH
36814: LD_INT 1
36816: ST_TO_ADDR
// end else
36817: GO 37117
// begin SayRadio ( Platonov , D16b-Pla-1 ) ;
36819: LD_EXP 26
36823: PPUSH
36824: LD_STRING D16b-Pla-1
36826: PPUSH
36827: CALL_OW 94
// Say ( JMM , D16b-JMM-1 ) ;
36831: LD_EXP 1
36835: PPUSH
36836: LD_STRING D16b-JMM-1
36838: PPUSH
36839: CALL_OW 88
// wait ( 0 0$15 ) ;
36843: LD_INT 525
36845: PPUSH
36846: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
36850: LD_EXP 26
36854: PPUSH
36855: LD_STRING D18-Pla-1
36857: PPUSH
36858: CALL_OW 88
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36862: LD_ADDR_VAR 0 1
36866: PUSH
36867: LD_INT 22
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 21
36879: PUSH
36880: LD_INT 3
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 23
36889: PUSH
36890: LD_INT 1
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 30
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 30
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: PPUSH
36931: CALL_OW 69
36935: ST_TO_ADDR
// if rocketTarget = 0 then
36936: LD_VAR 0 1
36940: PUSH
36941: LD_INT 0
36943: EQUAL
36944: IFFALSE 37020
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_nation , 2 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) ;
36946: LD_ADDR_VAR 0 1
36950: PUSH
36951: LD_INT 22
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 21
36963: PUSH
36964: LD_INT 3
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 23
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 30
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 30
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: PPUSH
37015: CALL_OW 69
37019: ST_TO_ADDR
// if rocketTarget = 0 then
37020: LD_VAR 0 1
37024: PUSH
37025: LD_INT 0
37027: EQUAL
37028: IFFALSE 37082
// rocketTarget = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ;
37030: LD_ADDR_VAR 0 1
37034: PUSH
37035: LD_INT 22
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 21
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 23
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 50
37067: PUSH
37068: EMPTY
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: PPUSH
37077: CALL_OW 69
37081: ST_TO_ADDR
// ComAttackPlace ( rurocket , GetX ( rocketTarget [ 1 ] ) , GetY ( rocketTarget [ 1 ] ) ) ;
37082: LD_INT 273
37084: PPUSH
37085: LD_VAR 0 1
37089: PUSH
37090: LD_INT 1
37092: ARRAY
37093: PPUSH
37094: CALL_OW 250
37098: PPUSH
37099: LD_VAR 0 1
37103: PUSH
37104: LD_INT 1
37106: ARRAY
37107: PPUSH
37108: CALL_OW 251
37112: PPUSH
37113: CALL_OW 116
// end ; end ;
37117: PPOPN 1
37119: END
// every 0 0$1 trigger timeAction >= 80 80$02 and missionStage >= 6 and AllianceAI = 1 do
37120: LD_EXP 97
37124: PUSH
37125: LD_INT 168070
37127: GREATEREQUAL
37128: PUSH
37129: LD_EXP 101
37133: PUSH
37134: LD_INT 6
37136: GREATEREQUAL
37137: AND
37138: PUSH
37139: LD_EXP 85
37143: PUSH
37144: LD_INT 1
37146: EQUAL
37147: AND
37148: IFFALSE 37178
37150: GO 37152
37152: DISABLE
// begin Say ( Platonov , D18-Pla-1 ) ;
37153: LD_EXP 26
37157: PPUSH
37158: LD_STRING D18-Pla-1
37160: PPUSH
37161: CALL_OW 88
// ComAttackPlace ( rurocket , 244 , 187 ) ;
37165: LD_INT 273
37167: PPUSH
37168: LD_INT 244
37170: PPUSH
37171: LD_INT 187
37173: PPUSH
37174: CALL_OW 116
// end ;
37178: END
// every 0 0$3 trigger missionStage >= 5 do var i ;
37179: LD_EXP 101
37183: PUSH
37184: LD_INT 5
37186: GREATEREQUAL
37187: IFFALSE 37380
37189: GO 37191
37191: DISABLE
37192: LD_INT 0
37194: PPUSH
// begin enable ;
37195: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_behemoth ] , [ f_constructed ] ] ) do
37196: LD_ADDR_VAR 0 1
37200: PUSH
37201: LD_INT 22
37203: PUSH
37204: LD_INT 6
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 30
37213: PUSH
37214: LD_INT 37
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 57
37223: PUSH
37224: EMPTY
37225: LIST
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: PPUSH
37232: CALL_OW 69
37236: PUSH
37237: FOR_IN
37238: IFFALSE 37292
// begin if See ( 1 , i ) then
37240: LD_INT 1
37242: PPUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL_OW 292
37252: IFFALSE 37290
// begin disable ;
37254: DISABLE
// DialogueOn ;
37255: CALL_OW 6
// Say ( JMM , D17a-JMM-1 ) ;
37259: LD_EXP 1
37263: PPUSH
37264: LD_STRING D17a-JMM-1
37266: PPUSH
37267: CALL_OW 88
// DialogueOff ;
37271: CALL_OW 7
// behemothStatus = 1 ;
37275: LD_ADDR_EXP 60
37279: PUSH
37280: LD_INT 1
37282: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
37283: LD_STRING M4a
37285: PPUSH
37286: CALL_OW 337
// end ; end ;
37290: GO 37237
37292: POP
37293: POP
// for i in ruBehs do
37294: LD_ADDR_VAR 0 1
37298: PUSH
37299: LD_EXP 59
37303: PUSH
37304: FOR_IN
37305: IFFALSE 37378
// begin if See ( 1 , i ) then
37307: LD_INT 1
37309: PPUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: CALL_OW 292
37319: IFFALSE 37376
// begin disable ;
37321: DISABLE
// DialogueOn ;
37322: CALL_OW 6
// Say ( JMM , D17b-JMM-1 ) ;
37326: LD_EXP 1
37330: PPUSH
37331: LD_STRING D17b-JMM-1
37333: PPUSH
37334: CALL_OW 88
// DialogueOff ;
37338: CALL_OW 7
// behemothStatus = 0 ;
37342: LD_ADDR_EXP 60
37346: PUSH
37347: LD_INT 0
37349: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
37350: LD_STRING M4b
37352: PPUSH
37353: CALL_OW 337
// wait ( 0 0$2 ) ;
37357: LD_INT 70
37359: PPUSH
37360: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
37364: LD_EXP 26
37368: PPUSH
37369: LD_STRING D18-Pla-1
37371: PPUSH
37372: CALL_OW 88
// end ; end ;
37376: GO 37304
37378: POP
37379: POP
// end ;
37380: PPOPN 1
37382: END
// every 1 trigger IsDead ( Platonov ) and IsDead ( Yakotich ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < [ 7 , 8 , 9 ] [ Difficulty ] do var i , tmp , arabianArmy ;
37383: LD_EXP 26
37387: PPUSH
37388: CALL_OW 301
37392: PUSH
37393: LD_EXP 27
37397: PPUSH
37398: CALL_OW 301
37402: AND
37403: PUSH
37404: LD_INT 22
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 21
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 50
37426: PUSH
37427: EMPTY
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: PPUSH
37435: CALL_OW 69
37439: PUSH
37440: LD_INT 7
37442: PUSH
37443: LD_INT 8
37445: PUSH
37446: LD_INT 9
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: LD_OWVAR 67
37458: ARRAY
37459: LESS
37460: AND
37461: IFFALSE 38137
37463: GO 37465
37465: DISABLE
37466: LD_INT 0
37468: PPUSH
37469: PPUSH
37470: PPUSH
// begin russianAI = 0 ;
37471: LD_ADDR_EXP 86
37475: PUSH
37476: LD_INT 0
37478: ST_TO_ADDR
// russianEscape = 1 ;
37479: LD_ADDR_EXP 90
37483: PUSH
37484: LD_INT 1
37486: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , true ) ;
37487: LD_INT 1
37489: PPUSH
37490: LD_INT 3
37492: PPUSH
37493: LD_INT 1
37495: PPUSH
37496: LD_INT 1
37498: PPUSH
37499: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_lives , 900 ] ] ) do
37503: LD_ADDR_VAR 0 1
37507: PUSH
37508: LD_INT 22
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 21
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 24
37530: PUSH
37531: LD_INT 900
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: PPUSH
37543: CALL_OW 69
37547: PUSH
37548: FOR_IN
37549: IFFALSE 37580
// if GetSex ( i ) = sex_male then
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 258
37560: PUSH
37561: LD_INT 1
37563: EQUAL
37564: IFFALSE 37578
// begin tmp = i ;
37566: LD_ADDR_VAR 0 2
37570: PUSH
37571: LD_VAR 0 1
37575: ST_TO_ADDR
// break ;
37576: GO 37580
// end ;
37578: GO 37548
37580: POP
37581: POP
// if tmp = 0 then
37582: LD_VAR 0 2
37586: PUSH
37587: LD_INT 0
37589: EQUAL
37590: IFFALSE 37644
// begin uc_side = 3 ;
37592: LD_ADDR_OWVAR 20
37596: PUSH
37597: LD_INT 3
37599: ST_TO_ADDR
// uc_nation = 3 ;
37600: LD_ADDR_OWVAR 21
37604: PUSH
37605: LD_INT 3
37607: ST_TO_ADDR
// hc_name =  ;
37608: LD_ADDR_OWVAR 26
37612: PUSH
37613: LD_STRING 
37615: ST_TO_ADDR
// hc_gallery =  ;
37616: LD_ADDR_OWVAR 33
37620: PUSH
37621: LD_STRING 
37623: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
37624: LD_INT 1
37626: PPUSH
37627: LD_INT 10
37629: PPUSH
37630: CALL_OW 381
// tmp = CreateHuman ;
37634: LD_ADDR_VAR 0 2
37638: PUSH
37639: CALL_OW 44
37643: ST_TO_ADDR
// end ; DialogueOn ;
37644: CALL_OW 6
// Say ( tmp , DSurrenderRussians-RSol1-1a ) ;
37648: LD_VAR 0 2
37652: PPUSH
37653: LD_STRING DSurrenderRussians-RSol1-1a
37655: PPUSH
37656: CALL_OW 88
// DialogueOff ;
37660: CALL_OW 7
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
37664: LD_INT 22
37666: PUSH
37667: LD_INT 3
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 21
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PPUSH
37688: CALL_OW 69
37692: PPUSH
37693: CALL_OW 122
// wait ( 0 0$1 ) ;
37697: LD_INT 35
37699: PPUSH
37700: CALL_OW 67
// AddComMoveToArea ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , RussianEscapeArea ) ;
37704: LD_INT 22
37706: PUSH
37707: LD_INT 3
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 21
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PPUSH
37728: CALL_OW 69
37732: PPUSH
37733: LD_INT 25
37735: PPUSH
37736: CALL_OW 173
// wait ( 0 0$10 ) ;
37740: LD_INT 350
37742: PPUSH
37743: CALL_OW 67
// PrepareOmarArmy ;
37747: CALL 38757 0 0
// missionStage = 7 ;
37751: LD_ADDR_EXP 101
37755: PUSH
37756: LD_INT 7
37758: ST_TO_ADDR
// PlaceSeeing ( 157 , 8 , 1 , - 8 ) ;
37759: LD_INT 157
37761: PPUSH
37762: LD_INT 8
37764: PPUSH
37765: LD_INT 1
37767: PPUSH
37768: LD_INT 8
37770: NEG
37771: PPUSH
37772: CALL_OW 330
// CenterOnXY ( 157 , 8 ) ;
37776: LD_INT 157
37778: PPUSH
37779: LD_INT 8
37781: PPUSH
37782: CALL_OW 84
// DialogueOn ;
37786: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
37790: LD_EXP 32
37794: PPUSH
37795: CALL_OW 87
// Say ( JMM , D19-JMM-1 ) ;
37799: LD_EXP 1
37803: PPUSH
37804: LD_STRING D19-JMM-1
37806: PPUSH
37807: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D19-Sol1-1 , D5-FSol1-1 ) ;
37811: LD_INT 22
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 26
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: LD_INT 25
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 25
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 25
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 25
37866: PUSH
37867: LD_INT 4
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 25
37876: PUSH
37877: LD_INT 5
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 25
37886: PUSH
37887: LD_INT 8
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: PPUSH
37908: CALL_OW 69
37912: PPUSH
37913: LD_STRING D19-Sol1-1
37915: PPUSH
37916: LD_STRING D5-FSol1-1
37918: PPUSH
37919: CALL 6912 0 3
// Say ( JMM , D19-JMM-2 ) ;
37923: LD_EXP 1
37927: PPUSH
37928: LD_STRING D19-JMM-2
37930: PPUSH
37931: CALL_OW 88
// DialogueOff ;
37935: CALL_OW 7
// LaunchMines ;
37939: CALL 38246 0 0
// wait ( 0 0$3 ) ;
37943: LD_INT 105
37945: PPUSH
37946: CALL_OW 67
// arabianArmy = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
37950: LD_ADDR_VAR 0 3
37954: PUSH
37955: LD_INT 22
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 21
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PPUSH
37979: CALL_OW 69
37983: PUSH
37984: LD_INT 22
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 21
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 25
38006: PUSH
38007: LD_INT 4
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: PPUSH
38019: CALL_OW 69
38023: DIFF
38024: ST_TO_ADDR
// arabianArmy = arabianArmy ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
38025: LD_ADDR_VAR 0 3
38029: PUSH
38030: LD_VAR 0 3
38034: PUSH
38035: LD_INT 22
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 21
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PPUSH
38059: CALL_OW 69
38063: ADD
38064: ST_TO_ADDR
// ComAgressiveMove ( arabianArmy , 178 , 66 ) ;
38065: LD_VAR 0 3
38069: PPUSH
38070: LD_INT 178
38072: PPUSH
38073: LD_INT 66
38075: PPUSH
38076: CALL_OW 114
// wait ( 0 0$10 ) ;
38080: LD_INT 350
38082: PPUSH
38083: CALL_OW 67
// ComContaminate ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) , 177 , 69 ) ;
38087: LD_INT 22
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 21
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 25
38109: PUSH
38110: LD_INT 4
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: PPUSH
38122: CALL_OW 69
38126: PPUSH
38127: LD_INT 177
38129: PPUSH
38130: LD_INT 69
38132: PPUSH
38133: CALL_OW 158
// end ;
38137: PPOPN 3
38139: END
// every 0 0$1 trigger russianEscape = 1 and FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var i ;
38140: LD_EXP 90
38144: PUSH
38145: LD_INT 1
38147: EQUAL
38148: PUSH
38149: LD_INT 25
38151: PPUSH
38152: LD_INT 22
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 21
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PPUSH
38176: CALL_OW 70
38180: AND
38181: IFFALSE 38243
38183: GO 38185
38185: DISABLE
38186: LD_INT 0
38188: PPUSH
// begin enable ;
38189: ENABLE
// for i in FilterUnitsInArea ( RussianEscapeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
38190: LD_ADDR_VAR 0 1
38194: PUSH
38195: LD_INT 25
38197: PPUSH
38198: LD_INT 22
38200: PUSH
38201: LD_INT 3
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 21
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PPUSH
38222: CALL_OW 70
38226: PUSH
38227: FOR_IN
38228: IFFALSE 38241
// RemoveUnit ( i ) ;
38230: LD_VAR 0 1
38234: PPUSH
38235: CALL_OW 64
38239: GO 38227
38241: POP
38242: POP
// end ;
38243: PPOPN 1
38245: END
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
38246: LD_INT 0
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
38253: LD_ADDR_VAR 0 2
38257: PUSH
38258: LD_INT 168
38260: PUSH
38261: LD_INT 18
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 169
38270: PUSH
38271: LD_INT 20
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 167
38280: PUSH
38281: LD_INT 20
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 164
38290: PUSH
38291: LD_INT 18
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 164
38300: PUSH
38301: LD_INT 19
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 163
38310: PUSH
38311: LD_INT 19
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 164
38320: PUSH
38321: LD_INT 21
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 165
38330: PUSH
38331: LD_INT 21
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 163
38340: PUSH
38341: LD_INT 20
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 164
38350: PUSH
38351: LD_INT 22
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 162
38360: PUSH
38361: LD_INT 20
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
38381: LD_ADDR_VAR 0 3
38385: PUSH
38386: LD_INT 169
38388: PUSH
38389: LD_INT 34
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 169
38398: PUSH
38399: LD_INT 35
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 167
38408: PUSH
38409: LD_INT 32
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 170
38418: PUSH
38419: LD_INT 31
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 173
38428: PUSH
38429: LD_INT 35
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 174
38438: PUSH
38439: LD_INT 39
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: ST_TO_ADDR
// for i = 1 to mines_pos do
38454: LD_ADDR_VAR 0 4
38458: PUSH
38459: DOUBLE
38460: LD_INT 1
38462: DEC
38463: ST_TO_ADDR
38464: LD_VAR 0 2
38468: PUSH
38469: FOR_TO
38470: IFFALSE 38682
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
38472: LD_VAR 0 2
38476: PUSH
38477: LD_VAR 0 4
38481: ARRAY
38482: PUSH
38483: LD_INT 1
38485: ARRAY
38486: PPUSH
38487: LD_VAR 0 2
38491: PUSH
38492: LD_VAR 0 4
38496: ARRAY
38497: PUSH
38498: LD_INT 2
38500: ARRAY
38501: PPUSH
38502: LD_INT 1
38504: PPUSH
38505: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38509: LD_INT 1
38511: PPUSH
38512: LD_INT 3
38514: PPUSH
38515: CALL_OW 12
38519: PPUSH
38520: CALL_OW 67
// if i < mines_pos then
38524: LD_VAR 0 4
38528: PUSH
38529: LD_VAR 0 2
38533: LESS
38534: IFFALSE 38572
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
38536: LD_VAR 0 2
38540: PUSH
38541: LD_VAR 0 4
38545: ARRAY
38546: PUSH
38547: LD_INT 1
38549: ARRAY
38550: PPUSH
38551: LD_VAR 0 2
38555: PUSH
38556: LD_VAR 0 4
38560: ARRAY
38561: PUSH
38562: LD_INT 2
38564: ARRAY
38565: PPUSH
38566: CALL_OW 348
38570: GO 38680
// begin for j = 1 to mines_pos1 do
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: DOUBLE
38578: LD_INT 1
38580: DEC
38581: ST_TO_ADDR
38582: LD_VAR 0 3
38586: PUSH
38587: FOR_TO
38588: IFFALSE 38644
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
38590: LD_VAR 0 3
38594: PUSH
38595: LD_VAR 0 5
38599: ARRAY
38600: PUSH
38601: LD_INT 1
38603: ARRAY
38604: PPUSH
38605: LD_VAR 0 3
38609: PUSH
38610: LD_VAR 0 5
38614: ARRAY
38615: PUSH
38616: LD_INT 2
38618: ARRAY
38619: PPUSH
38620: LD_INT 1
38622: PPUSH
38623: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
38627: LD_INT 1
38629: PPUSH
38630: LD_INT 3
38632: PPUSH
38633: CALL_OW 12
38637: PPUSH
38638: CALL_OW 67
// end ;
38642: GO 38587
38644: POP
38645: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
38646: LD_VAR 0 2
38650: PUSH
38651: LD_VAR 0 4
38655: ARRAY
38656: PUSH
38657: LD_INT 1
38659: ARRAY
38660: PPUSH
38661: LD_VAR 0 2
38665: PUSH
38666: LD_VAR 0 4
38670: ARRAY
38671: PUSH
38672: LD_INT 2
38674: ARRAY
38675: PPUSH
38676: CALL_OW 347
// end ; end ;
38680: GO 38469
38682: POP
38683: POP
// end ;
38684: LD_VAR 0 1
38688: RET
// every 0 0$1 trigger missionStage = 7 and IsDead ( Omar ) and IsOk ( Heike ) do
38689: LD_EXP 101
38693: PUSH
38694: LD_INT 7
38696: EQUAL
38697: PUSH
38698: LD_EXP 31
38702: PPUSH
38703: CALL_OW 301
38707: AND
38708: PUSH
38709: LD_EXP 32
38713: PPUSH
38714: CALL_OW 302
38718: AND
38719: IFFALSE 38756
38721: GO 38723
38723: DISABLE
// begin DialogueOn ;
38724: CALL_OW 6
// Say ( JMM , D19a-JMM-1 ) ;
38728: LD_EXP 1
38732: PPUSH
38733: LD_STRING D19a-JMM-1
38735: PPUSH
38736: CALL_OW 88
// Say ( Heike , D19a-Hke-1 ) ;
38740: LD_EXP 32
38744: PPUSH
38745: LD_STRING D19a-Hke-1
38747: PPUSH
38748: CALL_OW 88
// DialogueOff ;
38752: CALL_OW 7
// end ; end_of_file
38756: END
// export function PrepareOmarArmy ; var i , un , veh , omarMastodont ; begin
38757: LD_INT 0
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
// uc_side = 2 ;
38764: LD_ADDR_OWVAR 20
38768: PUSH
38769: LD_INT 2
38771: ST_TO_ADDR
// uc_nation = 2 ;
38772: LD_ADDR_OWVAR 21
38776: PUSH
38777: LD_INT 2
38779: ST_TO_ADDR
// Omar = PrepareUnit ( Omar , false ) ;
38780: LD_ADDR_EXP 31
38784: PUSH
38785: LD_STRING Omar
38787: PPUSH
38788: LD_INT 0
38790: PPUSH
38791: CALL 6656 0 2
38795: ST_TO_ADDR
// Heike = PrepareUnit ( Heike , false ) ;
38796: LD_ADDR_EXP 32
38800: PUSH
38801: LD_STRING Heike
38803: PPUSH
38804: LD_INT 0
38806: PPUSH
38807: CALL 6656 0 2
38811: ST_TO_ADDR
// if KhatamStatus = 1 then
38812: LD_EXP 83
38816: PUSH
38817: LD_INT 1
38819: EQUAL
38820: IFFALSE 38835
// Khatam = NewCharacter ( Khatam ) ;
38822: LD_ADDR_EXP 33
38826: PUSH
38827: LD_STRING Khatam
38829: PPUSH
38830: CALL_OW 25
38834: ST_TO_ADDR
// PlaceUnitArea ( Heike , ArabianSpawn , false ) ;
38835: LD_EXP 32
38839: PPUSH
38840: LD_INT 26
38842: PPUSH
38843: LD_INT 0
38845: PPUSH
38846: CALL_OW 49
// PlaceUnitArea ( Khatam , ArabianSpawn , false ) ;
38850: LD_EXP 33
38854: PPUSH
38855: LD_INT 26
38857: PPUSH
38858: LD_INT 0
38860: PPUSH
38861: CALL_OW 49
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
38865: LD_ADDR_VAR 0 2
38869: PUSH
38870: DOUBLE
38871: LD_INT 1
38873: DEC
38874: ST_TO_ADDR
38875: LD_INT 5
38877: PUSH
38878: LD_INT 6
38880: PUSH
38881: LD_INT 7
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: LD_OWVAR 67
38893: ARRAY
38894: PUSH
38895: FOR_TO
38896: IFFALSE 38951
// begin hc_name =  ;
38898: LD_ADDR_OWVAR 26
38902: PUSH
38903: LD_STRING 
38905: ST_TO_ADDR
// hc_gallery =  ;
38906: LD_ADDR_OWVAR 33
38910: PUSH
38911: LD_STRING 
38913: ST_TO_ADDR
// PrepareSoldier ( false , 8 ) ;
38914: LD_INT 0
38916: PPUSH
38917: LD_INT 8
38919: PPUSH
38920: CALL_OW 381
// un = CreateHuman ;
38924: LD_ADDR_VAR 0 3
38928: PUSH
38929: CALL_OW 44
38933: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
38934: LD_VAR 0 3
38938: PPUSH
38939: LD_INT 26
38941: PPUSH
38942: LD_INT 0
38944: PPUSH
38945: CALL_OW 49
// end ;
38949: GO 38895
38951: POP
38952: POP
// for i := 1 to 4 do
38953: LD_ADDR_VAR 0 2
38957: PUSH
38958: DOUBLE
38959: LD_INT 1
38961: DEC
38962: ST_TO_ADDR
38963: LD_INT 4
38965: PUSH
38966: FOR_TO
38967: IFFALSE 39022
// begin hc_name =  ;
38969: LD_ADDR_OWVAR 26
38973: PUSH
38974: LD_STRING 
38976: ST_TO_ADDR
// hc_gallery =  ;
38977: LD_ADDR_OWVAR 33
38981: PUSH
38982: LD_STRING 
38984: ST_TO_ADDR
// PrepareScientist ( false , 8 ) ;
38985: LD_INT 0
38987: PPUSH
38988: LD_INT 8
38990: PPUSH
38991: CALL_OW 384
// un = CreateHuman ;
38995: LD_ADDR_VAR 0 3
38999: PUSH
39000: CALL_OW 44
39004: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
39005: LD_VAR 0 3
39009: PPUSH
39010: LD_INT 26
39012: PPUSH
39013: LD_INT 0
39015: PPUSH
39016: CALL_OW 49
// end ;
39020: GO 38966
39022: POP
39023: POP
// for i := 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
39024: LD_ADDR_VAR 0 2
39028: PUSH
39029: DOUBLE
39030: LD_INT 1
39032: DEC
39033: ST_TO_ADDR
39034: LD_INT 8
39036: PUSH
39037: LD_INT 9
39039: PUSH
39040: LD_INT 10
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: PUSH
39048: LD_OWVAR 67
39052: ARRAY
39053: PUSH
39054: FOR_TO
39055: IFFALSE 39143
// begin vc_engine = 3 ;
39057: LD_ADDR_OWVAR 39
39061: PUSH
39062: LD_INT 3
39064: ST_TO_ADDR
// vc_control = 5 ;
39065: LD_ADDR_OWVAR 38
39069: PUSH
39070: LD_INT 5
39072: ST_TO_ADDR
// vc_chassis = 14 ;
39073: LD_ADDR_OWVAR 37
39077: PUSH
39078: LD_INT 14
39080: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 , 25 ] [ Rand ( 1 , 3 ) ] ;
39081: LD_ADDR_OWVAR 40
39085: PUSH
39086: LD_INT 27
39088: PUSH
39089: LD_INT 26
39091: PUSH
39092: LD_INT 28
39094: PUSH
39095: LD_INT 25
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PPUSH
39107: LD_INT 3
39109: PPUSH
39110: CALL_OW 12
39114: ARRAY
39115: ST_TO_ADDR
// veh = CreateVehicle ;
39116: LD_ADDR_VAR 0 4
39120: PUSH
39121: CALL_OW 45
39125: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawn , false ) ;
39126: LD_VAR 0 4
39130: PPUSH
39131: LD_INT 26
39133: PPUSH
39134: LD_INT 0
39136: PPUSH
39137: CALL_OW 49
// end ;
39141: GO 39054
39143: POP
39144: POP
// vc_chassis := 31 ;
39145: LD_ADDR_OWVAR 37
39149: PUSH
39150: LD_INT 31
39152: ST_TO_ADDR
// vc_control := control_rider ;
39153: LD_ADDR_OWVAR 38
39157: PUSH
39158: LD_INT 4
39160: ST_TO_ADDR
// omarMastodont := CreateVehicle ;
39161: LD_ADDR_VAR 0 5
39165: PUSH
39166: CALL_OW 45
39170: ST_TO_ADDR
// PlaceUnitArea ( omarMastodont , ArabianSpawn , false ) ;
39171: LD_VAR 0 5
39175: PPUSH
39176: LD_INT 26
39178: PPUSH
39179: LD_INT 0
39181: PPUSH
39182: CALL_OW 49
// PlaceHumanInUnit ( Omar , omarMastodont ) ;
39186: LD_EXP 31
39190: PPUSH
39191: LD_VAR 0 5
39195: PPUSH
39196: CALL_OW 52
// end ; end_of_file
39200: LD_VAR 0 1
39204: RET
// every 1 1$30 trigger missionStage > 0 do
39205: LD_EXP 101
39209: PUSH
39210: LD_INT 0
39212: GREATER
39213: IFFALSE 39240
39215: GO 39217
39217: DISABLE
// begin enable ;
39218: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
39219: LD_INT 3
39221: PPUSH
39222: LD_INT 5
39224: PPUSH
39225: CALL_OW 12
39229: PPUSH
39230: LD_INT 27
39232: PPUSH
39233: LD_INT 1
39235: PPUSH
39236: CALL_OW 55
// end ; end_of_file
39240: END
// every 0 0$1 trigger missionStage = 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
39241: LD_EXP 101
39245: PUSH
39246: LD_INT 7
39248: EQUAL
39249: PUSH
39250: LD_INT 22
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 21
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PPUSH
39274: CALL_OW 69
39278: PUSH
39279: LD_INT 0
39281: EQUAL
39282: AND
39283: PUSH
39284: LD_INT 22
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 21
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 50
39306: PUSH
39307: EMPTY
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 69
39319: PUSH
39320: LD_INT 0
39322: EQUAL
39323: AND
39324: IFFALSE 39813
39326: GO 39328
39328: DISABLE
// begin DialogueOn ;
39329: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
39333: LD_EXP 1
39337: PPUSH
39338: CALL_OW 87
// Say ( JMM , D20-JMM-1 ) ;
39342: LD_EXP 1
39346: PPUSH
39347: LD_STRING D20-JMM-1
39349: PPUSH
39350: CALL_OW 88
// if IsOK ( Joan ) then
39354: LD_EXP 2
39358: PPUSH
39359: CALL_OW 302
39363: IFFALSE 39377
// Say ( Joan , D20-Joan-1 ) ;
39365: LD_EXP 2
39369: PPUSH
39370: LD_STRING D20-Joan-1
39372: PPUSH
39373: CALL_OW 88
// if IsOk ( Lisa ) then
39377: LD_EXP 4
39381: PPUSH
39382: CALL_OW 302
39386: IFFALSE 39400
// Say ( Lisa , D20-Lisa-1 ) ;
39388: LD_EXP 4
39392: PPUSH
39393: LD_STRING D20-Lisa-1
39395: PPUSH
39396: CALL_OW 88
// if IsOk ( Donaldson ) then
39400: LD_EXP 5
39404: PPUSH
39405: CALL_OW 302
39409: IFFALSE 39423
// Say ( Donaldson , D20-Don-1 ) ;
39411: LD_EXP 5
39415: PPUSH
39416: LD_STRING D20-Don-1
39418: PPUSH
39419: CALL_OW 88
// if IsOK ( Cornel ) then
39423: LD_EXP 12
39427: PPUSH
39428: CALL_OW 302
39432: IFFALSE 39446
// Say ( Cornel , D20-Corn-1 ) ;
39434: LD_EXP 12
39438: PPUSH
39439: LD_STRING D20-Corn-1
39441: PPUSH
39442: CALL_OW 88
// if IsOk ( Denis ) then
39446: LD_EXP 8
39450: PPUSH
39451: CALL_OW 302
39455: IFFALSE 39469
// Say ( Denis , D20-Den-1 ) ;
39457: LD_EXP 8
39461: PPUSH
39462: LD_STRING D20-Den-1
39464: PPUSH
39465: CALL_OW 88
// if IsOk ( Bobby ) then
39469: LD_EXP 6
39473: PPUSH
39474: CALL_OW 302
39478: IFFALSE 39492
// Say ( Bobby , D20-Bobby-1 ) ;
39480: LD_EXP 6
39484: PPUSH
39485: LD_STRING D20-Bobby-1
39487: PPUSH
39488: CALL_OW 88
// if IsOk ( Gladstone ) then
39492: LD_EXP 10
39496: PPUSH
39497: CALL_OW 302
39501: IFFALSE 39515
// Say ( Gladstone , D20-Glad-1 ) ;
39503: LD_EXP 10
39507: PPUSH
39508: LD_STRING D20-Glad-1
39510: PPUSH
39511: CALL_OW 88
// if IsOk ( Cyrus ) then
39515: LD_EXP 7
39519: PPUSH
39520: CALL_OW 302
39524: IFFALSE 39538
// Say ( Cyrus , D20-Cyrus-1 ) ;
39526: LD_EXP 7
39530: PPUSH
39531: LD_STRING D20-Cyrus-1
39533: PPUSH
39534: CALL_OW 88
// if IsOk ( Stevens ) then
39538: LD_EXP 3
39542: PPUSH
39543: CALL_OW 302
39547: IFFALSE 39561
// Say ( Stevens , D20-Huck-1 ) ;
39549: LD_EXP 3
39553: PPUSH
39554: LD_STRING D20-Huck-1
39556: PPUSH
39557: CALL_OW 88
// if IsOk ( Brown ) then
39561: LD_EXP 9
39565: PPUSH
39566: CALL_OW 302
39570: IFFALSE 39584
// Say ( Brown , D20-Brown-1 ) ;
39572: LD_EXP 9
39576: PPUSH
39577: LD_STRING D20-Brown-1
39579: PPUSH
39580: CALL_OW 88
// if IsOk ( Gary ) then
39584: LD_EXP 13
39588: PPUSH
39589: CALL_OW 302
39593: IFFALSE 39607
// Say ( Gary , D20-Gary-1 ) ;
39595: LD_EXP 13
39599: PPUSH
39600: LD_STRING D20-Gary-1
39602: PPUSH
39603: CALL_OW 88
// if IsOk ( Connie ) then
39607: LD_EXP 16
39611: PPUSH
39612: CALL_OW 302
39616: IFFALSE 39630
// Say ( Connie , D20-Con-1 ) ;
39618: LD_EXP 16
39622: PPUSH
39623: LD_STRING D20-Con-1
39625: PPUSH
39626: CALL_OW 88
// if IsOk ( Kurt ) then
39630: LD_EXP 30
39634: PPUSH
39635: CALL_OW 302
39639: IFFALSE 39653
// Say ( Kurt , D20-Kurt-1 ) ;
39641: LD_EXP 30
39645: PPUSH
39646: LD_STRING D20-Kurt-1
39648: PPUSH
39649: CALL_OW 88
// if IsOk ( Kikuchi ) then
39653: LD_EXP 15
39657: PPUSH
39658: CALL_OW 302
39662: IFFALSE 39676
// Say ( Kikuchi , D20-Yam-1 ) ;
39664: LD_EXP 15
39668: PPUSH
39669: LD_STRING D20-Yam-1
39671: PPUSH
39672: CALL_OW 88
// if IsOk ( Frank ) then
39676: LD_EXP 14
39680: PPUSH
39681: CALL_OW 302
39685: IFFALSE 39699
// Say ( Frank , D20-Frank-1 ) ;
39687: LD_EXP 14
39691: PPUSH
39692: LD_STRING D20-Frank-1
39694: PPUSH
39695: CALL_OW 88
// DialogueOff ;
39699: CALL_OW 7
// if AllianceEscape = 1 then
39703: LD_EXP 91
39707: PUSH
39708: LD_INT 1
39710: EQUAL
39711: IFFALSE 39725
// AddMedal ( Roth , 1 ) else
39713: LD_STRING Roth
39715: PPUSH
39716: LD_INT 1
39718: PPUSH
39719: CALL_OW 101
39723: GO 39736
// AddMedal ( Roth , - 1 ) ;
39725: LD_STRING Roth
39727: PPUSH
39728: LD_INT 1
39730: NEG
39731: PPUSH
39732: CALL_OW 101
// if behemothStatus = 1 then
39736: LD_EXP 60
39740: PUSH
39741: LD_INT 1
39743: EQUAL
39744: IFFALSE 39758
// AddMedal ( Project , 1 ) else
39746: LD_STRING Project
39748: PPUSH
39749: LD_INT 1
39751: PPUSH
39752: CALL_OW 101
39756: GO 39769
// AddMedal ( Project , - 1 ) ;
39758: LD_STRING Project
39760: PPUSH
39761: LD_INT 1
39763: NEG
39764: PPUSH
39765: CALL_OW 101
// if unitLost = 0 then
39769: LD_EXP 98
39773: PUSH
39774: LD_INT 0
39776: EQUAL
39777: IFFALSE 39791
// AddMedal ( NoLosses , 1 ) else
39779: LD_STRING NoLosses
39781: PPUSH
39782: LD_INT 1
39784: PPUSH
39785: CALL_OW 101
39789: GO 39802
// AddMedal ( NoLosses , - 1 ) ;
39791: LD_STRING NoLosses
39793: PPUSH
39794: LD_INT 1
39796: NEG
39797: PPUSH
39798: CALL_OW 101
// GiveMedals ( MAIN ) ;
39802: LD_STRING MAIN
39804: PPUSH
39805: CALL_OW 102
// YouWin ;
39809: CALL_OW 103
// end ; end_of_file
39813: END
// every 0 0$1 trigger IsDead ( JMM ) do
39814: LD_EXP 1
39818: PPUSH
39819: CALL_OW 301
39823: IFFALSE 39835
39825: GO 39827
39827: DISABLE
// YouLost ( JMM ) ;
39828: LD_STRING JMM
39830: PPUSH
39831: CALL_OW 104
39835: END
